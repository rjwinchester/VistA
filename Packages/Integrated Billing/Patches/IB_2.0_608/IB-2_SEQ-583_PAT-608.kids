Released IB*2*608 SEQ #583
Extracted from mail message
**KIDS**:IB*2.0*608^

**INSTALL NAME**
IB*2.0*608
"BLD",10813,0)
IB*2.0*608^INTEGRATED BILLING^0^3190227^y
"BLD",10813,1,0)
^^1^1^3180421^^^^
"BLD",10813,1,1,0)
TEST v
"BLD",10813,4,0)
^9.64PA^350.9^8
"BLD",10813,4,36,0)
36
"BLD",10813,4,36,2,0)
^9.641^36^1
"BLD",10813,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",10813,4,36,2,36,1,0)
^9.6411^3.01^1
"BLD",10813,4,36,2,36,1,3.01,0)
TRANSMIT ELECTRONICALLY
"BLD",10813,4,36,222)
y^y^p^^^^n^^n
"BLD",10813,4,36,224)

"BLD",10813,4,350.8,0)
350.8
"BLD",10813,4,350.8,222)
n^n^f^^y^^y^o^n
"BLD",10813,4,350.8,224)
I $$INCLUDE^IBY608PR(8,Y)
"BLD",10813,4,350.9,0)
350.9
"BLD",10813,4,350.9,2,0)
^9.641^350.928^3
"BLD",10813,4,350.9,2,350.916,0)
CMN CPT CODES  (sub-file)
"BLD",10813,4,350.9,2,350.916,1,0)
^9.6411^^
"BLD",10813,4,350.9,2,350.928,0)
NON-MCCF RATE TYPES FOR PTP  (sub-file)
"BLD",10813,4,350.9,2,350.928,1,0)
^9.6411^^0
"BLD",10813,4,350.9,2,350.929,0)
TRICARE PAY-TO PROVIDERS  (sub-file)
"BLD",10813,4,350.9,2,350.929,1,0)
^9.6411^1.05^10
"BLD",10813,4,350.9,2,350.929,1,.01,0)
TC FACILITY
"BLD",10813,4,350.9,2,350.929,1,.02,0)
TC NAME
"BLD",10813,4,350.9,2,350.929,1,.03,0)
TC FEDERAL TAX NUMBER
"BLD",10813,4,350.9,2,350.929,1,.04,0)
TC TELEPHONE NUMBER
"BLD",10813,4,350.9,2,350.929,1,.05,0)
TC PARENT PAY-TO PROVIDER
"BLD",10813,4,350.9,2,350.929,1,1.01,0)
TC STREET ADDRESS 1
"BLD",10813,4,350.9,2,350.929,1,1.02,0)
TC STREET ADDRESS 2
"BLD",10813,4,350.9,2,350.929,1,1.03,0)
TC CITY
"BLD",10813,4,350.9,2,350.929,1,1.04,0)
TC STATE
"BLD",10813,4,350.9,2,350.929,1,1.05,0)
TC ZIP
"BLD",10813,4,350.9,222)
y^y^p^^^^n^^n
"BLD",10813,4,350.9,224)

"BLD",10813,4,364.5,0)
364.5
"BLD",10813,4,364.5,222)
n^n^f^^y^^y^o^n
"BLD",10813,4,364.5,224)
I $$INCLUDE^IBY608PR(5,Y)
"BLD",10813,4,364.6,0)
364.6
"BLD",10813,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",10813,4,364.6,224)
I $$INCLUDE^IBY608PR(6,Y)
"BLD",10813,4,364.7,0)
364.7
"BLD",10813,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",10813,4,364.7,224)
I $$INCLUDE^IBY608PR(7,Y)
"BLD",10813,4,399,0)
399
"BLD",10813,4,399,2,0)
^9.641^399.0304^1
"BLD",10813,4,399,2,399.0304,0)
PROCEDURES  (sub-file)
"BLD",10813,4,399,2,399.0304,1,0)
^9.6411^24.204^43
"BLD",10813,4,399,2,399.0304,1,23,0)
CMN REQUIRED?
"BLD",10813,4,399,2,399.0304,1,24,0)
CMN FORM TYPE
"BLD",10813,4,399,2,399.0304,1,24.01,0)
CMN CERTIFICATION TYPE
"BLD",10813,4,399,2,399.0304,1,24.02,0)
CMN PATIENT HEIGHT (IN)
"BLD",10813,4,399,2,399.0304,1,24.03,0)
CMN PATIENT WEIGHT (LBS)
"BLD",10813,4,399,2,399.0304,1,24.04,0)
CMN MONTHS DME EQUIP NEEDED
"BLD",10813,4,399,2,399.0304,1,24.05,0)
CMN DATE THERAPY STARTED
"BLD",10813,4,399,2,399.0304,1,24.06,0)
CMN LAST CERTIFICATION DATE
"BLD",10813,4,399,2,399.0304,1,24.07,0)
CMN RECERTIFICATION/REVISN DT
"BLD",10813,4,399,2,399.0304,1,24.08,0)
CMN REPLACEMENT ITEM?
"BLD",10813,4,399,2,399.0304,1,24.1,0)
CMN ABG PO2 (MMHG)
"BLD",10813,4,399,2,399.0304,1,24.102,0)
CMN O2 SATURATION %
"BLD",10813,4,399,2,399.0304,1,24.103,0)
CMN DT LAST ABG PO2 AND O2 SAT
"BLD",10813,4,399,2,399.0304,1,24.104,0)
CMN EDEMA DUE TO CHF PRESENT?
"BLD",10813,4,399,2,399.0304,1,24.105,0)
CMN COR PULMONARY HYPERTENSN?
"BLD",10813,4,399,2,399.0304,1,24.106,0)
CMN HEMATOCRIT > 56%?
"BLD",10813,4,399,2,399.0304,1,24.107,0)
CMN PT CONDITION AT TEST TIME
"BLD",10813,4,399,2,399.0304,1,24.108,0)
CMN TEST CONDITIONS
"BLD",10813,4,399,2,399.0304,1,24.109,0)
CMN PORTABLE O2 INDICATOR
"BLD",10813,4,399,2,399.0304,1,24.11,0)
CMN HIGHEST O2 FLOW RATE
"BLD",10813,4,399,2,399.0304,1,24.111,0)
CMN LAST 4 LPM ABG PO2 (MMHG)
"BLD",10813,4,399,2,399.0304,1,24.113,0)
CMN LAST 4 LPM O2 SATURATION %
"BLD",10813,4,399,2,399.0304,1,24.114,0)
CMN DATE OF LAST 4 LPM TESTS
"BLD",10813,4,399,2,399.0304,1,24.115,0)
CMN EQUIPMENT/COST DESCRIPTION
"BLD",10813,4,399,2,399.0304,1,24.201,0)
CMN SM BOWEL ABSORPTION DOC?
"BLD",10813,4,399,2,399.0304,1,24.202,0)
CMN ENTERAL NUTRITION BY TUBE?
"BLD",10813,4,399,2,399.0304,1,24.203,0)
CMN PROCEDURE A CALORIES
"BLD",10813,4,399,2,399.0304,1,24.204,0)
CMN PROCEDURE A
"BLD",10813,4,399,2,399.0304,1,24.205,0)
CMN METHOD OF ADMINISTRATION
"BLD",10813,4,399,2,399.0304,1,24.206,0)
CMN DAYS PER WEEK ADMINISTERED
"BLD",10813,4,399,2,399.0304,1,24.207,0)
CMN SEVERE MALABSORPTION DOC?
"BLD",10813,4,399,2,399.0304,1,24.208,0)
CMN AMINO ACID (ML/DAY)
"BLD",10813,4,399,2,399.0304,1,24.209,0)
CMN AMINO ACID CONCENTRATION %
"BLD",10813,4,399,2,399.0304,1,24.21,0)
CMN AMINO ACID PROTEIN (GM/DY)
"BLD",10813,4,399,2,399.0304,1,24.211,0)
CMN DEXTROSE (ML/DAY)
"BLD",10813,4,399,2,399.0304,1,24.212,0)
CMN DEXTROSE CONCENTRATION %
"BLD",10813,4,399,2,399.0304,1,24.213,0)
CMN LIPIDS (ML/DAY)
"BLD",10813,4,399,2,399.0304,1,24.214,0)
CMN ROUTE OF ADMINISTRATION
"BLD",10813,4,399,2,399.0304,1,24.215,0)
CMN LIPIDS (DAYS/WEEK)
"BLD",10813,4,399,2,399.0304,1,24.216,0)
CMN LIPIDS CONCENTRATE %
"BLD",10813,4,399,2,399.0304,1,24.217,0)
CMN PARENTERAL/ENTERAL/BOTH
"BLD",10813,4,399,2,399.0304,1,24.218,0)
CMN PROCEDURE B CALORIES
"BLD",10813,4,399,2,399.0304,1,24.219,0)
CMN PROCEDURE B
"BLD",10813,4,399,222)
y^y^p^^^^n^^n
"BLD",10813,4,399,224)

"BLD",10813,4,399.6,0)
399.6
"BLD",10813,4,399.6,222)
y^y^f^^n^^y^o^n
"BLD",10813,4,"APDD",36,36)

"BLD",10813,4,"APDD",36,36,3.01)

"BLD",10813,4,"APDD",350.9,350.916)

"BLD",10813,4,"APDD",350.9,350.928)

"BLD",10813,4,"APDD",350.9,350.929)

"BLD",10813,4,"APDD",350.9,350.929,.01)

"BLD",10813,4,"APDD",350.9,350.929,.02)

"BLD",10813,4,"APDD",350.9,350.929,.03)

"BLD",10813,4,"APDD",350.9,350.929,.04)

"BLD",10813,4,"APDD",350.9,350.929,.05)

"BLD",10813,4,"APDD",350.9,350.929,1.01)

"BLD",10813,4,"APDD",350.9,350.929,1.02)

"BLD",10813,4,"APDD",350.9,350.929,1.03)

"BLD",10813,4,"APDD",350.9,350.929,1.04)

"BLD",10813,4,"APDD",350.9,350.929,1.05)

"BLD",10813,4,"APDD",399,399.0304)

"BLD",10813,4,"APDD",399,399.0304,23)

"BLD",10813,4,"APDD",399,399.0304,24)

"BLD",10813,4,"APDD",399,399.0304,24.01)

"BLD",10813,4,"APDD",399,399.0304,24.02)

"BLD",10813,4,"APDD",399,399.0304,24.03)

"BLD",10813,4,"APDD",399,399.0304,24.04)

"BLD",10813,4,"APDD",399,399.0304,24.05)

"BLD",10813,4,"APDD",399,399.0304,24.06)

"BLD",10813,4,"APDD",399,399.0304,24.07)

"BLD",10813,4,"APDD",399,399.0304,24.08)

"BLD",10813,4,"APDD",399,399.0304,24.1)

"BLD",10813,4,"APDD",399,399.0304,24.102)

"BLD",10813,4,"APDD",399,399.0304,24.103)

"BLD",10813,4,"APDD",399,399.0304,24.104)

"BLD",10813,4,"APDD",399,399.0304,24.105)

"BLD",10813,4,"APDD",399,399.0304,24.106)

"BLD",10813,4,"APDD",399,399.0304,24.107)

"BLD",10813,4,"APDD",399,399.0304,24.108)

"BLD",10813,4,"APDD",399,399.0304,24.109)

"BLD",10813,4,"APDD",399,399.0304,24.11)

"BLD",10813,4,"APDD",399,399.0304,24.111)

"BLD",10813,4,"APDD",399,399.0304,24.113)

"BLD",10813,4,"APDD",399,399.0304,24.114)

"BLD",10813,4,"APDD",399,399.0304,24.115)

"BLD",10813,4,"APDD",399,399.0304,24.201)

"BLD",10813,4,"APDD",399,399.0304,24.202)

"BLD",10813,4,"APDD",399,399.0304,24.203)

"BLD",10813,4,"APDD",399,399.0304,24.204)

"BLD",10813,4,"APDD",399,399.0304,24.205)

"BLD",10813,4,"APDD",399,399.0304,24.206)

"BLD",10813,4,"APDD",399,399.0304,24.207)

"BLD",10813,4,"APDD",399,399.0304,24.208)

"BLD",10813,4,"APDD",399,399.0304,24.209)

"BLD",10813,4,"APDD",399,399.0304,24.21)

"BLD",10813,4,"APDD",399,399.0304,24.211)

"BLD",10813,4,"APDD",399,399.0304,24.212)

"BLD",10813,4,"APDD",399,399.0304,24.213)

"BLD",10813,4,"APDD",399,399.0304,24.214)

"BLD",10813,4,"APDD",399,399.0304,24.215)

"BLD",10813,4,"APDD",399,399.0304,24.216)

"BLD",10813,4,"APDD",399,399.0304,24.217)

"BLD",10813,4,"APDD",399,399.0304,24.218)

"BLD",10813,4,"APDD",399,399.0304,24.219)

"BLD",10813,4,"B",36,36)

"BLD",10813,4,"B",350.8,350.8)

"BLD",10813,4,"B",350.9,350.9)

"BLD",10813,4,"B",364.5,364.5)

"BLD",10813,4,"B",364.6,364.6)

"BLD",10813,4,"B",364.7,364.7)

"BLD",10813,4,"B",399,399)

"BLD",10813,4,"B",399.6,399.6)

"BLD",10813,6)
27^
"BLD",10813,6.3)
90
"BLD",10813,"ABPKG")
n
"BLD",10813,"INI")
IBY608PR
"BLD",10813,"INIT")
IBY608PO
"BLD",10813,"KRN",0)
^9.67PA^779.2^20
"BLD",10813,"KRN",.4,0)
.4
"BLD",10813,"KRN",.401,0)
.401
"BLD",10813,"KRN",.401,"NM",0)
^9.68A^^0
"BLD",10813,"KRN",.402,0)
.402
"BLD",10813,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",10813,"KRN",.402,"NM",1,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",10813,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",1)

"BLD",10813,"KRN",.403,0)
.403
"BLD",10813,"KRN",.5,0)
.5
"BLD",10813,"KRN",.84,0)
.84
"BLD",10813,"KRN",3.6,0)
3.6
"BLD",10813,"KRN",3.8,0)
3.8
"BLD",10813,"KRN",9.2,0)
9.2
"BLD",10813,"KRN",9.8,0)
9.8
"BLD",10813,"KRN",9.8,"NM",0)
^9.68A^34^31
"BLD",10813,"KRN",9.8,"NM",1,0)
IBCBB1^^0^B130250613
"BLD",10813,"KRN",9.8,"NM",2,0)
IBCBB13^^0^B52019184
"BLD",10813,"KRN",9.8,"NM",3,0)
IBCCC2^^0^B139322972
"BLD",10813,"KRN",9.8,"NM",4,0)
IBCEF31^^0^B67968602
"BLD",10813,"KRN",9.8,"NM",5,0)
IBCF23A^^0^B52551501
"BLD",10813,"KRN",9.8,"NM",6,0)
IBCU7^^0^B180096059
"BLD",10813,"KRN",9.8,"NM",8,0)
IBCEPTC2^^0^B56837195
"BLD",10813,"KRN",9.8,"NM",9,0)
IBCNSC01^^0^B76348341
"BLD",10813,"KRN",9.8,"NM",10,0)
IBCEF11^^0^B100824598
"BLD",10813,"KRN",9.8,"NM",11,0)
IBCEF2^^0^B140185497
"BLD",10813,"KRN",9.8,"NM",12,0)
IBCEF22^^0^B107716996
"BLD",10813,"KRN",9.8,"NM",13,0)
IBTUBO^^0^B73456123
"BLD",10813,"KRN",9.8,"NM",14,0)
IBTUBO3^^0^B45102914
"BLD",10813,"KRN",9.8,"NM",15,0)
IBTUBOA^^0^B56520031
"BLD",10813,"KRN",9.8,"NM",16,0)
IBTUBOU^^0^B42355876
"BLD",10813,"KRN",9.8,"NM",17,0)
IBTUBUL^^0^B63490597
"BLD",10813,"KRN",9.8,"NM",18,0)
IBCBB12^^0^B140177880
"BLD",10813,"KRN",9.8,"NM",19,0)
IBCEU^^0^B119764859
"BLD",10813,"KRN",9.8,"NM",20,0)
IBCEU3^^0^B109583745
"BLD",10813,"KRN",9.8,"NM",21,0)
IBCEU5^^0^B88004916
"BLD",10813,"KRN",9.8,"NM",24,0)
IBJPS2^^0^B59492878
"BLD",10813,"KRN",9.8,"NM",25,0)
IBJPS3^^0^B122116987
"BLD",10813,"KRN",9.8,"NM",26,0)
IBJPS4^^0^B37240589
"BLD",10813,"KRN",9.8,"NM",27,0)
IBJPS7^^0^B13118039
"BLD",10813,"KRN",9.8,"NM",28,0)
IBJPS^^0^B6807999
"BLD",10813,"KRN",9.8,"NM",29,0)
IBJPS8^^0^B8772675
"BLD",10813,"KRN",9.8,"NM",30,0)
IBCEU1^^0^B117180629
"BLD",10813,"KRN",9.8,"NM",31,0)
IBCEPTC3^^0^B91463160
"BLD",10813,"KRN",9.8,"NM",32,0)
IBCE837B^^0^B4349124
"BLD",10813,"KRN",9.8,"NM",33,0)
IBCEFG7^^0^B54668730
"BLD",10813,"KRN",9.8,"NM",34,0)
IBCU75^^0^B79458011
"BLD",10813,"KRN",9.8,"NM","B","IBCBB1",1)

"BLD",10813,"KRN",9.8,"NM","B","IBCBB12",18)

"BLD",10813,"KRN",9.8,"NM","B","IBCBB13",2)

"BLD",10813,"KRN",9.8,"NM","B","IBCCC2",3)

"BLD",10813,"KRN",9.8,"NM","B","IBCE837B",32)

"BLD",10813,"KRN",9.8,"NM","B","IBCEF11",10)

"BLD",10813,"KRN",9.8,"NM","B","IBCEF2",11)

"BLD",10813,"KRN",9.8,"NM","B","IBCEF22",12)

"BLD",10813,"KRN",9.8,"NM","B","IBCEF31",4)

"BLD",10813,"KRN",9.8,"NM","B","IBCEFG7",33)

"BLD",10813,"KRN",9.8,"NM","B","IBCEPTC2",8)

"BLD",10813,"KRN",9.8,"NM","B","IBCEPTC3",31)

"BLD",10813,"KRN",9.8,"NM","B","IBCEU",19)

"BLD",10813,"KRN",9.8,"NM","B","IBCEU1",30)

"BLD",10813,"KRN",9.8,"NM","B","IBCEU3",20)

"BLD",10813,"KRN",9.8,"NM","B","IBCEU5",21)

"BLD",10813,"KRN",9.8,"NM","B","IBCF23A",5)

"BLD",10813,"KRN",9.8,"NM","B","IBCNSC01",9)

"BLD",10813,"KRN",9.8,"NM","B","IBCU7",6)

"BLD",10813,"KRN",9.8,"NM","B","IBCU75",34)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS",28)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS2",24)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS3",25)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS4",26)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS7",27)

"BLD",10813,"KRN",9.8,"NM","B","IBJPS8",29)

"BLD",10813,"KRN",9.8,"NM","B","IBTUBO",13)

"BLD",10813,"KRN",9.8,"NM","B","IBTUBO3",14)

"BLD",10813,"KRN",9.8,"NM","B","IBTUBOA",15)

"BLD",10813,"KRN",9.8,"NM","B","IBTUBOU",16)

"BLD",10813,"KRN",9.8,"NM","B","IBTUBUL",17)

"BLD",10813,"KRN",19,0)
19
"BLD",10813,"KRN",19,"NM",0)
^9.68A^^
"BLD",10813,"KRN",19.1,0)
19.1
"BLD",10813,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",10813,"KRN",101,0)
101
"BLD",10813,"KRN",101,"NM",0)
^9.68A^13^13
"BLD",10813,"KRN",101,"NM",1,0)
IBJP IB NON-MCCF RATE TYPE ADD^^0
"BLD",10813,"KRN",101,"NM",2,0)
IBJP IB NON-MCCF RATE TYPES^^0^
"BLD",10813,"KRN",101,"NM",3,0)
IBJP IB NON-MCCF RATE TYPES MENU^^0
"BLD",10813,"KRN",101,"NM",4,0)
IBJP IB NON-MCCF RATE TYPE DEL^^0
"BLD",10813,"KRN",101,"NM",5,0)
IBJPS CMN CPT ADD^^0
"BLD",10813,"KRN",101,"NM",6,0)
IBJPS CMN CPT DEL^^0
"BLD",10813,"KRN",101,"NM",7,0)
IBJPS CMN CPT MENU^^0
"BLD",10813,"KRN",101,"NM",8,0)
IBJP IB TRICARE PAY-TO PROVIDERS MENU^^1^
"BLD",10813,"KRN",101,"NM",9,0)
IBJP IB TRICARE PAY-TO PROVIDER ADD^^4^
"BLD",10813,"KRN",101,"NM",10,0)
IBJP IB TRICARE PAY-TO PROVIDER DEL^^4^
"BLD",10813,"KRN",101,"NM",11,0)
IBJP IB TRICARE PAY-TO PROVIDER EDIT^^4^
"BLD",10813,"KRN",101,"NM",12,0)
IBJP IB TRICARE PAY-TO PROVIDER DIVISIONS^^4^
"BLD",10813,"KRN",101,"NM",13,0)
IBJP IB NON-MCCF PAY-TO PROVIDERS MENU^^0
"BLD",10813,"KRN",101,"NM","B","IBJP IB NON-MCCF PAY-TO PROVIDERS MENU",13)

"BLD",10813,"KRN",101,"NM","B","IBJP IB NON-MCCF RATE TYPE ADD",1)

"BLD",10813,"KRN",101,"NM","B","IBJP IB NON-MCCF RATE TYPE DEL",4)

"BLD",10813,"KRN",101,"NM","B","IBJP IB NON-MCCF RATE TYPES",2)

"BLD",10813,"KRN",101,"NM","B","IBJP IB NON-MCCF RATE TYPES MENU",3)

"BLD",10813,"KRN",101,"NM","B","IBJP IB TRICARE PAY-TO PROVIDER ADD",9)

"BLD",10813,"KRN",101,"NM","B","IBJP IB TRICARE PAY-TO PROVIDER DEL",10)

"BLD",10813,"KRN",101,"NM","B","IBJP IB TRICARE PAY-TO PROVIDER DIVISIONS",12)

"BLD",10813,"KRN",101,"NM","B","IBJP IB TRICARE PAY-TO PROVIDER EDIT",11)

"BLD",10813,"KRN",101,"NM","B","IBJP IB TRICARE PAY-TO PROVIDERS MENU",8)

"BLD",10813,"KRN",101,"NM","B","IBJPS CMN CPT ADD",5)

"BLD",10813,"KRN",101,"NM","B","IBJPS CMN CPT DEL",6)

"BLD",10813,"KRN",101,"NM","B","IBJPS CMN CPT MENU",7)

"BLD",10813,"KRN",409.61,0)
409.61
"BLD",10813,"KRN",409.61,"NM",0)
^9.68A^3^3
"BLD",10813,"KRN",409.61,"NM",1,0)
IBJP IB NON-MCCF RATE TYPES^^0
"BLD",10813,"KRN",409.61,"NM",2,0)
IBJP IB TRICARE PAY-TO PROVS^^0
"BLD",10813,"KRN",409.61,"NM",3,0)
IBJPS CMN CPTS^^0
"BLD",10813,"KRN",409.61,"NM","B","IBJP IB NON-MCCF RATE TYPES",1)

"BLD",10813,"KRN",409.61,"NM","B","IBJP IB TRICARE PAY-TO PROVS",2)

"BLD",10813,"KRN",409.61,"NM","B","IBJPS CMN CPTS",3)

"BLD",10813,"KRN",771,0)
771
"BLD",10813,"KRN",779.2,0)
779.2
"BLD",10813,"KRN",870,0)
870
"BLD",10813,"KRN",8989.51,0)
8989.51
"BLD",10813,"KRN",8989.52,0)
8989.52
"BLD",10813,"KRN",8994,0)
8994
"BLD",10813,"KRN","B",.4,.4)

"BLD",10813,"KRN","B",.401,.401)

"BLD",10813,"KRN","B",.402,.402)

"BLD",10813,"KRN","B",.403,.403)

"BLD",10813,"KRN","B",.5,.5)

"BLD",10813,"KRN","B",.84,.84)

"BLD",10813,"KRN","B",3.6,3.6)

"BLD",10813,"KRN","B",3.8,3.8)

"BLD",10813,"KRN","B",9.2,9.2)

"BLD",10813,"KRN","B",9.8,9.8)

"BLD",10813,"KRN","B",19,19)

"BLD",10813,"KRN","B",19.1,19.1)

"BLD",10813,"KRN","B",101,101)

"BLD",10813,"KRN","B",409.61,409.61)

"BLD",10813,"KRN","B",771,771)

"BLD",10813,"KRN","B",779.2,779.2)

"BLD",10813,"KRN","B",870,870)

"BLD",10813,"KRN","B",8989.51,8989.51)

"BLD",10813,"KRN","B",8989.52,8989.52)

"BLD",10813,"KRN","B",8994,8994)

"BLD",10813,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10813,"QUES",0)
^9.62^^
"BLD",10813,"REQB",0)
^9.611^2^2
"BLD",10813,"REQB",1,0)
IB*2.0*592^1
"BLD",10813,"REQB",2,0)
IB*2.0*621^1
"BLD",10813,"REQB","B","IB*2.0*592",1)

"BLD",10813,"REQB","B","IB*2.0*621",2)

"DATA",350.8,239,0)
IB CMN NOT REQ BUT DATA^- "CMN Required?" set to NO, but CMN data exists.^IB901^1^1
"DATA",350.8,240,0)
IB CMN FORM TYPE^- "CMN Form type" missing.^IB902^1^1
"DATA",350.8,241,0)
IB CMN NO DATA NODE^- CMN form-specific data missing for the Form Type chosen.^IB903^1^1
"DATA",350.8,243,0)
IB CMN BAD DATA NODE^- CMN data does not match the chosen Form Type.^IB904^1^1
"DATA",350.8,244,0)
IB CMN CERT TYPE^- "Certification Type" missing.^IB905^1^1
"DATA",350.8,246,0)
IB CMN THERAPY DT^- "Date Therapy Started" missing.^IB907^1^1
"DATA",350.8,247,0)
IB CMN LAST CERT DT^- "Last Certification Date" missing.^IB908^1^1
"DATA",350.8,248,0)
IB CMN RECERT/REVISION DT^- "Recertification/Revision Date" missing.^IB909^1^1
"DATA",350.8,259,0)
IB CMN ABG SAT DT^- Date of last "ABG PO2" and/or "O2 Saturation" Test(s) missing.^IB912^1^1
"DATA",350.8,271,0)
IB CMN 4 LPM DATE^- "Date of Latest 4 LPM Test(s)" missing.^IB914^1^1
"DATA",350.8,272,0)
IB CMN ERRORS HEADER^The following CMN field(s) missing or in error for at least 1 procedure:^IB915^1^1
"DATA",350.8,273,0)
IB CMN PEB^- "Is this for Parenteral nutrition, Enteral nutrition, or Both?" missing.^IB906^1^1
"DATA",364.5,225,0)
N-COB CLAIM LEVEL AMOUNTS^N^E^G^399^^^
"DATA",364.5,225,1)
K IBXSAVE("CCOB") D CCOB1^IBCEU1(IBXIEN,"0,1,2,4","",$G(IBRSBTST))
"DATA",364.5,225,3,0)
5^364.53^5^5^3180406^^^^
"DATA",364.5,225,3,1,0)
This data element extracts all the claim level COB data from the EOB file
"DATA",364.5,225,3,2,0)
for the current and its associated bills.
"DATA",364.5,225,3,3,0)
The data is returned in the array IBXDATA(n) and consists of the payer
"DATA",364.5,225,3,4,0)
sequence (1-3) in the first '^' piece followed by the data on the 0-2 node
"DATA",364.5,225,3,5,0)
of file 361.1 (1.01...1.99) for each accepted EOB in the COB sequence.
"DATA",364.5,226,0)
N-MEDICARE INPT CLAIM COB AMTS^N^E^G^399^^^
"DATA",364.5,226,1)
D CCOB1^IBCEU1(IBXIEN,"4,5","",$G(IBRSBTST))
"DATA",364.5,226,3,0)
^364.53^6^6^3180406^^^^
"DATA",364.5,226,3,1,0)
This data element extracts all the claim level MEDICARE inpatient COB
"DATA",364.5,226,3,2,0)
data from the EOB file for the current and its associated bills.
"DATA",364.5,226,3,3,0)
The data is returned in the arrays IBXDATA(COB,n,4) and IBXDATA(COB,n,5) 
"DATA",364.5,226,3,4,0)
where COB = the COB sequence of the payer, n = the ien of the entry in file
"DATA",364.5,226,3,5,0)
361.1 and equals the data on the '4' and '5' nodes respectively of file
"DATA",364.5,226,3,6,0)
361.1 (4.01...5.99) for each accepted EOB in the COB sequence.
"DATA",364.5,227,0)
N-MEDICARE OUTPT CLAIM COB AMT^N^E^G^399^^^
"DATA",364.5,227,1)
D CCOB1^IBCEU1(IBXIEN,3,"",$G(IBRSBTST))
"DATA",364.5,227,3,0)
^364.53^6^6^3180406^^^^
"DATA",364.5,227,3,1,0)
This data element extracts all the claim level MEDICARE outpatient COB
"DATA",364.5,227,3,2,0)
data from the EOB file for the current and its associated bills.
"DATA",364.5,227,3,3,0)
The data is returned in the array IBXDATA(COB,n,3) where COB = the COB
"DATA",364.5,227,3,4,0)
sequence of the payer, n = the ien of the entry in file 361.1 and equals
"DATA",364.5,227,3,5,0)
the data on the '3' node of file 361.1 (3.01...3.99) for each accepted EOB
"DATA",364.5,227,3,6,0)
in the COB sequence.
"DATA",364.5,228,0)
N-COB CLAIM LEVEL ADJUSTMENTS^N^E^G^399^^^
"DATA",364.5,228,1)
D CCAS1^IBCEU1(IBXIEN,"",$G(IBRSBTST))
"DATA",364.5,228,3,0)
^364.53^8^8^3180406^^^^
"DATA",364.5,228,3,1,0)
This data element extracts all the claim level COB adjustment data from the
"DATA",364.5,228,3,2,0)
EOB file for the current and its associated bills. The data is returned in
"DATA",364.5,228,3,3,0)
the arrays IBXDATA(n,0) and IBXDATA(n,1,m) for each accepted EOB in the COB
"DATA",364.5,228,3,4,0)
sequence.
"DATA",364.5,228,3,5,0)
IBXDATA(n,0) consists of the payer sequence (1-3) in the first '^' piece
"DATA",364.5,228,3,6,0)
followed by the data on the '0' node of subfile 361.11 (.01) .
"DATA",364.5,228,3,7,0)
IBXDATA(n,1,m) is returned where m is a sequential # and consists of the
"DATA",364.5,228,3,8,0)
data on the 0-node of each entry in subfile 361.111 (.01-.99)
"DATA",364.5,396,0)
N-CMN RECORD ID 'LQ  '^N^E^I^^^^
"DATA",364.5,438,0)
N-CMN RECORD ID 'FRM '^N^E^I^^^^
"DATA",364.5,440,0)
N-CMN RECORD ID 'CMN '^N^E^I^^^^
"DATA",364.5,442,0)
N-CMN RECORD ID 'MEA '^N^E^I^^^^
"DATA",364.6,2383,0)
8^N^^205^1^^^1^4^CMN RECORD ID 'LQ  '^0^0^1
"DATA",364.6,2384,0)
8^N^^205^1^^^3^30^CMN FORM TYPE QUALIFIER^0^0^0
"DATA",364.6,2385,0)
8^N^^205^1^^^2^6^SERVICE LINE #^0^1^0
"DATA",364.6,2387,0)
8^N^^205^1^^^4^10^CMN INDUSTRY CODE^0^0^0
"DATA",364.6,2388,0)
8^N^^191.4^1^^^3^1^CMN CERTIFICATION TYPE^0^^0
"DATA",364.6,2390,0)
8^N^^191.4^1^^^14^3^CMN CERTIFICATION TYPE QUAL^0
"DATA",364.6,2392,0)
8^N^^191.7^1^^^3^2^CMN MEASUREMENT REFERENCE ID CODE^0
"DATA",364.6,2393,0)
8^N^^40^1^^^15^4^CMN PATIENT WEIGHT (LBS)^0
"DATA",364.6,2394,0)
8^N^^40^1^^^14^2^CMN PATIENT WEIGHT MODIFIER^0
"DATA",364.6,2395,0)
8^N^^191.4^1^^^5^2^CMN MONTHS DME EQUIPMENT NEEDED^0
"DATA",364.6,2396,0)
8^N^^191.4^1^^^11^8^CMN DATE THERAPY STARTED^0
"DATA",364.6,2397,0)
8^N^^191.4^1^^^10^3^CMN DATE THERAPY STARTED QUALIFIER^0
"DATA",364.6,2398,0)
8^N^^191.4^1^^^13^8^CMN LAST CERTIFICATION DATE^0
"DATA",364.6,2399,0)
8^N^^191.4^1^^^12^3^CMN LAST CERTIFICATION DATE QUALIFIER^0
"DATA",364.6,2400,0)
8^N^^191.4^1^^^15^8^CMN RECERTIFICATION/REVISION DATE^0
"DATA",364.6,2401,0)
8^N^^191.4^1^^^9^3^CMN REPLACEMENT ITEM?^0
"DATA",364.6,2433,0)
8^^^205^1^^0^1.5^1^LQ DATA EXTRACT^1^1
"DATA",364.6,2436,0)
8^^^210^1^^0^1.5^1^FRM DATA EXTRACT^1^1
"DATA",364.6,2438,0)
8^N^^210^1^^^1^4^CMN RECORD ID 'FRM '^0^0^1
"DATA",364.6,2439,0)
8^N^^210^1^^^2^6^SERVICE LINE #^0
"DATA",364.6,2442,0)
8^^^210^1^^^3^20^CMN QUESTION NUMBER/LETTER^0^0
"DATA",364.6,2443,0)
8^N^^210^1^^^4^1^CMN QUESTION RESPONSE Y/N^0
"DATA",364.6,2444,0)
8^N^^210^1^^^5^50^CMN QUESTION RESPONSE REF ID^0
"DATA",364.6,2445,0)
8^N^^210^1^^^6^8^CMN QUESTION RESPONSE DATE^0
"DATA",364.6,2446,0)
8^N^^210^1^^^7^6^CMN QUESTION RESPONSE % & DECIMAL^0
"DATA",364.6,2447,0)
8^N^^191.4^1^^^2^6^SERVICE LINE #^0
"DATA",364.6,2448,0)
8^N^^191.4^1^^^1.5^1^CMN DATA EXTRACT^1^1
"DATA",364.6,2449,0)
8^N^^191.4^1^^^1^4^CMN RECORD ID 'CMN '^0
"DATA",364.6,2451,0)
8^N^^191.4^1^^^4^2^CMN UNIT OR BASIS FOR MEASUREMENT CODE^0
"DATA",364.6,2452,0)
8^N^^191.4^1^^^7^1^CMN CERTIFICATION CONDITION INDICATOR^0
"DATA",364.6,2453,0)
8^N^^191.4^1^^^8^3^CMN CONDITION INDICATOR^0
"DATA",364.6,2454,0)
8^N^^191.4^1^^^16^2^CMN ATTACHMENT REPORT TYPE CODE^0
"DATA",364.6,2455,0)
8^N^^191.4^1^^^17^2^CMN ATTACHMENT TRANSMISSION CODE^0
"DATA",364.6,2456,0)
8^N^^191.4^1^^^6^2^CMN CODE CATEGORY^0
"DATA",364.6,2457,0)
8^N^^191.7^1^^^1^4^CMN RECORD ID 'MEA '^0
"DATA",364.6,2458,0)
8^N^^191.7^1^^^1.5^1^MEA DATA EXTRACT^1
"DATA",364.6,2461,0)
8^N^^191.7^1^^^2^6^SERVICE LINE #^0
"DATA",364.6,2462,0)
8^N^^191.7^1^^^4^3^CMN MEASUREMENT QUALIFIER^0
"DATA",364.6,2463,0)
8^N^^191.7^1^^^5^20^CMN TEST RESULTS^0
"DATA",364.7,105,0)
88^N^5^^^^N
"DATA",364.7,105,1)
K IBXDATA,VC80 N R,VZ,Z,Z0 S (Z,R)=0,VC80=$$VC80CK^IBCEF2(IBIFN) F  S Z=$O(IBXSAVE("VALUE",Z)) Q:'Z  S VZ=IBXSAVE("VALUE",Z) S:+VC80 IBXSV("VC80",Z)=VZ S Z0=$P(VZ,U) I Z0'="" S IBXDATA(Z)=Z0 D ID^IBCEF2(Z,"VC"_$$M^IBCEF2(.R))
"DATA",364.7,105,3,0)
^364.73^5^5^3180406^^^^
"DATA",364.7,105,3,1,0)
Each value code found in the IBXSAVE array previously extracted is
"DATA",364.7,105,3,2,0)
output on its own VCn entry where n is a record count that will allow it
"DATA",364.7,105,3,3,0)
to be mapped into one of the 12 available pieces of the 837 value code
"DATA",364.7,105,3,4,0)
record correctly.  This is done to accommodate Austin's translator and one
"DATA",364.7,105,3,5,0)
of its shortcomings.
"DATA",364.7,176,0)
123^N^8^^^^N
"DATA",364.7,176,1)
D INS^IBCEF2
"DATA",364.7,176,3,0)
^364.73^4^4^3180131^^^^
"DATA",364.7,176,3,1,0)
^TMP($J,"IBLCT") keeps track of the last service line # output.  Data  
"DATA",364.7,176,3,2,0)
element is a group data element so multiple occurences of the data element
"DATA",364.7,176,3,3,0)
are possible in the IBXDATA array.  Save the data in the IBXSAVE array for
"DATA",364.7,176,3,4,0)
later use.  For every service line > 1, output the INS record id.
"DATA",364.7,178,0)
126^N^5^^^^N
"DATA",364.7,178,1)
D INS05^IBCEF2
"DATA",364.7,178,3,0)
^364.73^3^3^3190103^^^^
"DATA",364.7,178,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,178,3,2,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,178,3,3,0)
any service line data is found, the data is output.
"DATA",364.7,179,0)
127^N^5^^^^N
"DATA",364.7,179,1)
S IBXDATA=""
"DATA",364.7,179,3,0)
^364.73^1^1^3190103^^^^
"DATA",364.7,179,3,1,0)
MRD;IB*2.0*516 - Changed to be blank.
"DATA",364.7,180,0)
130^N^5^^^^N
"DATA",364.7,180,1)
D INS09^IBCEF2
"DATA",364.7,180,3,0)
^364.73^4^4^3180131^^^^
"DATA",364.7,180,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,180,3,2,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,180,3,3,0)
any service line data is found, the data is formatted as a numeric including
"DATA",364.7,180,3,4,0)
cents, without the decimal.
"DATA",364.7,181,0)
128^N^5^^^^N
"DATA",364.7,181,1)
D INS07^IBCEF2
"DATA",364.7,181,3,0)
^364.73^1^1^3180131^^^^
"DATA",364.7,181,3,1,0)
Save the data element in the IBXSAVE("PMOD") array for later use.
"DATA",364.7,189,0)
125^N^5^^^^N
"DATA",364.7,189,1)
K IBXDATA N Z,PCX S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S PCX=$P(IBXSAVE("INPT",Z),U,2) S:PCX'="" IBXDATA(Z)=$S(+$G(VC80):PCX,1:$$PRCD^IBCEF1(PCX_";ICPT("))
"DATA",364.7,189,3,0)
^364.73^3^3^3180131^^^^
"DATA",364.7,189,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,189,3,2,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,189,3,3,0)
any service line data is found, the data is output.
"DATA",364.7,478,0)
582^N^131^^^^N
"DATA",364.7,478,1)
K IBXSV S:'$O(^TMP("IBXMSG",$J,""),-1) IBXDATA="BGN " S:$G(IBXDATA)="" IBXNOREQ=1 S ^TMP("IBTX",$J,IBXIEN)=1
"DATA",364.7,478,3,0)
^364.73^3^3^3180130^^^^
"DATA",364.7,478,3,1,0)
If header data has already been extracted, then kill data element so
"DATA",364.7,478,3,2,0)
there is no output.  If no header already extracted, output record
"DATA",364.7,478,3,3,0)
id for 'BGN' record.
"DATA",364.7,482,0)
579^N^5^^^^N
"DATA",364.7,482,1)
D INS12^IBCEF2
"DATA",364.7,482,3,0)
^364.73^6^6^3180131^^
"DATA",364.7,482,3,1,0)
INS-12 for UB service line detail data.
"DATA",364.7,482,3,2,0)
 
"DATA",364.7,482,3,3,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,482,3,4,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,482,3,5,0)
any service line data is found, the data is formatted as a numeric 
"DATA",364.7,482,3,6,0)
including cents, without the decimal.
"DATA",364.7,805,0)
864^N^5^^^^N
"DATA",364.7,805,1)
D INS13^IBCEF2
"DATA",364.7,805,3,0)
^364.73^2^2^3180131^^^
"DATA",364.7,805,3,1,0)
Depending on the revenue code found, this field is set to DA or UN to
"DATA",364.7,805,3,2,0)
specify the type of units being billed for.
"DATA",364.7,985,0)
983^N^5^^^^N
"DATA",364.7,985,1)
N Z,Z0 K IBXDATA I $$COBN^IBCEF(IBXIEN)>1 F Z0="INPT","OUTPT","RX" S Z=0 F  S Z=$O(IBXSAVE(Z0,Z)) K:'Z IBXSAVE(Z0) Q:'Z  D CKCOBTST^IBCEU1(IBXIEN,.IBXSAVE,Z0,Z,+$G(IBRSBTST))
"DATA",364.7,985,3,0)
^364.73^4^4^3180411^^^^
"DATA",364.7,985,3,1,0)
The arrays IBXSAVE("INPT"), IBXSAVE("OUTPT") and IBXSAVE("RX") are created
"DATA",364.7,985,3,2,0)
when the line items on the bill are produced.  This field takes the data
"DATA",364.7,985,3,3,0)
from these arrays and creates a new IBXSAVE("LCOB") array with just the COB
"DATA",364.7,985,3,4,0)
data and deletes the original IBXSAVE arrays.
"DATA",364.7,1015,0)
1014^N^5^^^^N
"DATA",364.7,1015,1)
S IBXDATA="608.0" I '$$PROD^XUPROD(1) S $E(IBXDATA,11)="D"
"DATA",364.7,1015,3,0)
^364.73^7^7^3181011^^^^
"DATA",364.7,1015,3,1,0)
This field contains the VistA IB patch# that pertains to the
"DATA",364.7,1015,3,2,0)
applicable changes in the claim map.  Austin uses this field to determine
"DATA",364.7,1015,3,3,0)
which set of EDI claim maps to use when processing the EDI claims.
"DATA",364.7,1015,3,4,0)

"DATA",364.7,1015,3,5,0)
If the EDI claims are being transmitted from a non-production account,
"DATA",364.7,1015,3,6,0)
then the "D" in the 11th position indicates to Austin that it is test
"DATA",364.7,1015,3,7,0)
data.
"DATA",364.7,1751,0)
2051^N^5^^^^N
"DATA",364.7,1751,1)
D LDAT^IBCEF11
"DATA",364.7,1751,3,0)
^364.73^1^1^3180131^^^
"DATA",364.7,1751,3,1,0)
Service line counter for LDAT record.
"DATA",364.7,1752,0)
2052^N^5^^^^N
"DATA",364.7,1752,1)
K IBXSAVE("LDAT") D GETLDAT^IBCEF11(IBXIEN) D:$D(IBXSV("VC80")) VC80L^IBCEF11(IBXIEN,+$G(IBXSV("VC80LN")))
"DATA",364.7,1752,3,0)
^364.73^1^1^3180130^^^^
"DATA",364.7,1752,3,1,0)
Extract data for LDAT record and save it in IBXSAVE("LDAT").
"DATA",364.7,1765,0)
2065^N^5^^^^N
"DATA",364.7,1765,1)
K IBXSAVE("LDAT"),IBXSV("VC80"),IBXSV("VC80LN")
"DATA",364.7,1765,3,0)
^364.73^1^1^3180130^^^^
"DATA",364.7,1765,3,1,0)
Clear IBXSAVE array for this record.
"DATA",364.7,1969,0)
2383^N^396^^^^N^0^D
"DATA",364.7,1969,1)
K IBXDATA S IBXDATA="LQ  "
"DATA",364.7,1970,0)
2385^N^5^^^^N^0^D
"DATA",364.7,1970,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("CMNDEX",Z),U,2) D:Z>1 ID^IBCEF2(Z,"LQ  ")
"DATA",364.7,1971,0)
2384^N^5^^^^N^0^D
"DATA",364.7,1971,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="UT"
"DATA",364.7,1971,3,0)
^^1^1^3171027^
"DATA",364.7,1971,3,1,0)
The CMN FORM TYPE QUALIFIER is always 'UT'.
"DATA",364.7,1973,0)
2387^N^5^^^^N^0^D
"DATA",364.7,1973,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),"24:2")
"DATA",364.7,1974,0)
2388^N^5^^^^N^0^E
"DATA",364.7,1974,1)
N Z N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.01,"I")
"DATA",364.7,1975,0)
2390^N^5^^^^N^0^D
"DATA",364.7,1975,1)
N Z,CERTYP K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S CERTYP=$$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.01,"I") I CERTYP="R"!(CERTYP="S") S IBXDATA(Z)=607
"DATA",364.7,1977,0)
2392^N^5^^^^N^0
"DATA",364.7,1977,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="TR"
"DATA",364.7,1978,0)
2393^N^5^^^^N^0^E
"DATA",364.7,1978,1)
K IBXDATA S IBXDATA=$$PTWT^IBCEF31(IBXIEN)
"DATA",364.7,1979,0)
2394^N^5^^^^N^0^E
"DATA",364.7,1979,1)
K IBXDATA S IBXDATA="" I $$PTWT^IBCEF31(IBXIEN) S IBXDATA="01"
"DATA",364.7,1979,3,0)
^364.73^1^1^3180223^^
"DATA",364.7,1979,3,1,0)
This is the PATIENT WEIGHT MODIFIER which is always '01'.
"DATA",364.7,1980,0)
2395^N^5^^^^N^0^E
"DATA",364.7,1980,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.04)
"DATA",364.7,1981,0)
2396^N^5^^^^N^0^E
"DATA",364.7,1981,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$DT^IBCEFG1($$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.05,"I"),"","D8")
"DATA",364.7,1982,0)
2397^N^5^^^^N^0^D
"DATA",364.7,1982,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=463
"DATA",364.7,1982,3,0)
^364.73^1^1^3180218^^
"DATA",364.7,1982,3,1,0)
The value of CMN DATE THERAPY STARTED QUALIFIER is always '463'.
"DATA",364.7,1983,0)
2398^N^5^^^^N^0^E
"DATA",364.7,1983,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$DT^IBCEFG1($$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.06,"I"),"","D8")
"DATA",364.7,1984,0)
2399^N^5^^^^N^0^E
"DATA",364.7,1984,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=461
"DATA",364.7,1985,0)
2400^N^5^^^^N^0^E
"DATA",364.7,1985,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$DT^IBCEFG1($$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.07,"I"),"","D8")
"DATA",364.7,1986,0)
2401^N^5^^^^N^0^E
"DATA",364.7,1986,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  I $$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.08,"I") S IBXDATA(Z)="ZV"
"DATA",364.7,2018,0)
2433^N^5^^^^N
"DATA",364.7,2018,1)
D:$D(IBXSAVE("CMNDEX"))'>1 CMNDEX^IBCEF31(IBXIEN,.IBXSAVE)
"DATA",364.7,2019,0)
2436^N^5^^^^N
"DATA",364.7,2019,1)
K IBXSAVE("FRM") D FRM^IBCEF31(IBXIEN,.IBXSAVE)
"DATA",364.7,2020,0)
2438^N^438^^^^N^^D
"DATA",364.7,2020,1)
K IBXDATA S IBXDATA="FRM "
"DATA",364.7,2021,0)
2442^N^5^^^^N
"DATA",364.7,2021,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U)
"DATA",364.7,2022,0)
2443^N^5^^^^N
"DATA",364.7,2022,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U,2)
"DATA",364.7,2023,0)
2444^N^5^^^^N
"DATA",364.7,2023,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U,3)
"DATA",364.7,2024,0)
2445^N^5^^^^N
"DATA",364.7,2024,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U,4)
"DATA",364.7,2025,0)
2446^N^5^^^^N
"DATA",364.7,2025,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U,5)
"DATA",364.7,2026,0)
2439^N^5^^^^N^^D
"DATA",364.7,2026,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("FRM",Z),U,6) D:Z>1 ID^IBCEF2(Z,"FRM ")
"DATA",364.7,2027,0)
2447^N^5^^^^N^0^D
"DATA",364.7,2027,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("CMNDEX",Z),U,2) D:Z>1 ID^IBCEF2(Z,"CMN ")
"DATA",364.7,2028,0)
2448^N^5
"DATA",364.7,2028,1)
D:$D(IBXSAVE("CMNDEX"))'>1 CMNDEX^IBCEF31(IBXIEN,.IBXSAVE)
"DATA",364.7,2029,0)
2449^N^440^^^^N
"DATA",364.7,2029,1)
K IBXDATA S IBXDATA="CMN "
"DATA",364.7,2030,0)
2451^N^5^^^^N
"DATA",364.7,2030,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="MO"
"DATA",364.7,2031,0)
2452^N^5^^^^N
"DATA",364.7,2031,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="Y"
"DATA",364.7,2032,0)
2454^N^5^^^^N
"DATA",364.7,2032,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="CT"
"DATA",364.7,2033,0)
2455^N^5^^^^N
"DATA",364.7,2033,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="AD"
"DATA",364.7,2034,0)
2456^N^5^^^^N
"DATA",364.7,2034,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="09"
"DATA",364.7,2035,0)
2453^N^5^^^^N
"DATA",364.7,2035,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="38"
"DATA",364.7,2038,0)
2457^N^442^^^^N
"DATA",364.7,2038,1)
K IBXDATA S IBXDATA="MEA "
"DATA",364.7,2039,0)
2458^N^5^^^^N
"DATA",364.7,2039,1)
D:$D(IBXSAVE("CMNDEX"))'>1 CMNDEX^IBCEF31(IBXIEN,.IBXSAVE)
"DATA",364.7,2040,0)
2461^N^5^^^^N
"DATA",364.7,2040,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("CMNDEX",Z),U,2) D:Z>1 ID^IBCEF2(Z,"MEA ")
"DATA",364.7,2041,0)
2462^N^5^^^^N
"DATA",364.7,2041,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)="" I $$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.02) S IBXDATA(Z)="HT"
"DATA",364.7,2042,0)
2463^N^5^^^^N
"DATA",364.7,2042,1)
N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:'Z  S IBXDATA(Z)=$$CMNDATA^IBCEF31(IBXIEN,+IBXSAVE("CMNDEX",Z),24.02)
"DATA",399.6,1,0)
OXYGEN (CMS-484)^CERTIFICATE OF MEDICAL NECESSITY FORM 484.3 FOR OXYGEN^484.3^CMN-484
"DATA",399.6,2,0)
E & P NUTRITION (CMS-10126)^CERTIFICATE OF MEDICAL NECESSITY FORM 10126 FOR ENTERAL & PARENTERAL NUTRITION^10.03^CMN-10126
"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^y^p^^^^n^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,3.01)

"FIA",350.8)
IB ERROR
"FIA",350.8,0)
^IBE(350.8,
"FIA",350.8,0,0)
350.8I
"FIA",350.8,0,1)
n^n^f^^y^^y^o^n
"FIA",350.8,0,10)

"FIA",350.8,0,11)
I $$INCLUDE^IBY608PR(8,Y)
"FIA",350.8,0,"RLRO")

"FIA",350.8,0,"VR")
2.0^IB
"FIA",350.8,350.8)
0
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,16)

"FIA",350.9,350.9,28)

"FIA",350.9,350.9,29)

"FIA",350.9,350.916)
0
"FIA",350.9,350.928)
0
"FIA",350.9,350.929)
1
"FIA",350.9,350.929,.01)

"FIA",350.9,350.929,.02)

"FIA",350.9,350.929,.03)

"FIA",350.9,350.929,.04)

"FIA",350.9,350.929,.05)

"FIA",350.9,350.929,1.01)

"FIA",350.9,350.929,1.02)

"FIA",350.9,350.929,1.03)

"FIA",350.9,350.929,1.04)

"FIA",350.9,350.929,1.05)

"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^y^^y^o^n
"FIA",364.5,0,10)

"FIA",364.5,0,11)
I $$INCLUDE^IBY608PR(5,Y)
"FIA",364.5,0,"RLRO")

"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I $$INCLUDE^IBY608PR(6,Y)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $$INCLUDE^IBY608PR(7,Y)
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^y^p^^^^n^^n
"FIA",399,0,10)

"FIA",399,0,11)

"FIA",399,0,"RLRO")

"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399.0304)
1
"FIA",399,399.0304,23)

"FIA",399,399.0304,24)

"FIA",399,399.0304,24.01)

"FIA",399,399.0304,24.02)

"FIA",399,399.0304,24.03)

"FIA",399,399.0304,24.04)

"FIA",399,399.0304,24.05)

"FIA",399,399.0304,24.06)

"FIA",399,399.0304,24.07)

"FIA",399,399.0304,24.08)

"FIA",399,399.0304,24.1)

"FIA",399,399.0304,24.102)

"FIA",399,399.0304,24.103)

"FIA",399,399.0304,24.104)

"FIA",399,399.0304,24.105)

"FIA",399,399.0304,24.106)

"FIA",399,399.0304,24.107)

"FIA",399,399.0304,24.108)

"FIA",399,399.0304,24.109)

"FIA",399,399.0304,24.11)

"FIA",399,399.0304,24.111)

"FIA",399,399.0304,24.113)

"FIA",399,399.0304,24.114)

"FIA",399,399.0304,24.115)

"FIA",399,399.0304,24.201)

"FIA",399,399.0304,24.202)

"FIA",399,399.0304,24.203)

"FIA",399,399.0304,24.204)

"FIA",399,399.0304,24.205)

"FIA",399,399.0304,24.206)

"FIA",399,399.0304,24.207)

"FIA",399,399.0304,24.208)

"FIA",399,399.0304,24.209)

"FIA",399,399.0304,24.21)

"FIA",399,399.0304,24.211)

"FIA",399,399.0304,24.212)

"FIA",399,399.0304,24.213)

"FIA",399,399.0304,24.214)

"FIA",399,399.0304,24.215)

"FIA",399,399.0304,24.216)

"FIA",399,399.0304,24.217)

"FIA",399,399.0304,24.218)

"FIA",399,399.0304,24.219)

"FIA",399.6)
CMN FORM TYPES
"FIA",399.6,0)
^IBE(399.6,
"FIA",399.6,0,0)
399.6
"FIA",399.6,0,1)
y^y^f^^n^^y^o^n
"FIA",399.6,0,10)

"FIA",399.6,0,11)

"FIA",399.6,0,"RLRO")

"FIA",399.6,0,"VR")
2.0^IB
"FIA",399.6,399.6)
0
"INI")
IBY608PR
"INIT")
IBY608PO
"IX",350.9,350.929,"AC",0)
350.929^AC^Name and address defaults^MU^^F^IR^I^350.929^^^^^A
"IX",350.9,350.929,"AC",.1,0)
^^8^8^3140709^
"IX",350.9,350.929,"AC",.1,1,0)
The purpose of this x-ref is to default the name and address
"IX",350.9,350.929,"AC",.1,2,0)
fields in this sub-file from data found in the Institution
"IX",350.9,350.929,"AC",.1,3,0)
file.  The idea is that the user will select a VA Institution
"IX",350.9,350.929,"AC",.1,4,0)
from file 4 to be one of the TRICARE-specific Pay-To Providers
"IX",350.9,350.929,"AC",.1,5,0)
in this sub-file.  The name and address of the VA Institution
"IX",350.9,350.929,"AC",.1,6,0)
will be used as defaults for the name and address fields here
"IX",350.9,350.929,"AC",.1,7,0)
in this sub-file.  The default name and address information
"IX",350.9,350.929,"AC",.1,8,0)
may be overridden.
"IX",350.9,350.929,"AC",1)
I $G(X1(1))'=$G(X2(1)) D DEF^IBJPS3(+$G(X2(1)),.DA,1)
"IX",350.9,350.929,"AC",2)
Q
"IX",350.9,350.929,"AC",11.1,0)
^.114IA^1^1
"IX",350.9,350.929,"AC",11.1,1,0)
1^F^350.929^.01^^^F
"IX",350.9,350.929,"AC",11.1,1,3)

"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"C",0)
364.6^C^Field name lookup^R^^F^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"C",1)
S ^IBA(364.6,"C",$E(X,1,40),DA)=""
"IX",364.6,364.6,"C",2)
K ^IBA(364.6,"C",$E(X,1,40),DA)
"IX",364.6,364.6,"C",2.5)
K ^IBA(364.6,"C")
"IX",364.6,364.6,"C",11.1,0)
^.114IA^1^1
"IX",364.6,364.6,"C",11.1,1,0)
1^F^364.6^.1^40^1^F
"IX",364.6,364.6,"C",11.1,1,2)
S X=$$UP^XLFSTR(X)
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"KRN",.402,1838,-1)
0^1
"KRN",.402,1838,0)
IBEDIT INS CO1^3190124.1532^^36^^^3190124
"KRN",.402,1838,"DIAB",1,0,36,4)
EDI INST SECONDARY ID QUAL(1);"EDI - 1ST Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",1,0,36,8)
EDI INST SECONDARY ID(2);"EDI - 2ND Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",1,0,36,9)
EDI ID NUMBER - PROF;"EDI - Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",1,0,36,13)
EDI PROF SECONDARY ID QUAL(2);"EDI - 2ND Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",1,0,36,18)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,1838,"DIAB",1,0,36,19)
REF PROV SEC ID DEF CMS-1500//UPIN;"Default ID (1500)"
"KRN",.402,1838,"DIAB",1,1,36.015,0)
.01;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.016,0)
.01;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,1838,"DIAB",2,0,36,10)
EDI PROF SECONDARY ID QUAL(1);"EDI - 1ST Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",2,0,36,19)
REF PROV SEC ID REQ ON CLAIMS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",2,0,36,23)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,1838,"DIAB",2,1,36.015,0)
.02;"EDI - Alt Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",2,1,36.016,0)
.02;"EDI - Alt Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",3,0,36,1)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,1838,"DIAB",3,0,36,17)
BIN NUMBER;"EDI - Bin Number"
"KRN",.402,1838,"DIAB",4,0,36,19)
ATT/REND ID BILL SEC ID PROF//NO;"Use Att/Rend ID as Billing Provider Sec. ID (1500)?"
"KRN",.402,1838,"DIAB",5,0,36,18)
PERF PROV SECOND ID TYPE 1500;"Default ID (1500)"
"KRN",.402,1838,"DIAB",5,0,36,19)
ATT/REND ID BILL SEC ID INST//NO;"Use Att/Rend ID as Billing Provider Sec. ID (UB)?"
"KRN",.402,1838,"DIAB",6,0,36,3)
15;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",6,0,36,5)
EDI INST SECONDARY ID(1);"EDI - 1ST Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",6,0,36,14)
EDI PROF SECONDARY ID(2);"EDI - 2ND Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",6,0,36,15)
EDI ID NUMBER - DENTAL;"EDI - Dental Payer Primary ID"
"KRN",.402,1838,"DIAB",6,0,36,16)
ELECTRONIC INSURANCE TYPE;"EDI - Insurance Type"
"KRN",.402,1838,"DIAB",6,0,36,18)
PERF PROV SECOND ID TYPE UB;"Default ID (UB)"
"KRN",.402,1838,"DIAB",6,0,36,25)
INS COMPANY LINK TYPE;T
"KRN",.402,1838,"DIAB",7,0,36,2)
EDI ID NUMBER - INST;"EDI - Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",7,0,36,6)
EDI INST SECONDARY ID QUAL(2);"EDI - 2ND Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",7,0,36,9)
16;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",7,0,36,11)
EDI PROF SECONDARY ID(1);"EDI - 1ST Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",7,0,36,17)
PRINT SEC/TERT AUTO CLAIMS?;"EDI - Print Sec/Tert Auto Claims?"
"KRN",.402,1838,"DIAB",7,0,36,18)
SECONDARY ID REQUIREMENTS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",7,0,36,26)
INS COMPANY LINK PARENT;T
"KRN",.402,1838,"DIAB",8,0,36,17)
PRINT SEC MED CLAIMS W/O MRA;"EDI - Print Medicare Sec Claims w/o MRA?"
"KRN",.402,1838,"DIAB",12,0,36,1)
TRANSMIT ELECTRONICALLY;"EDI - Transmit?"
"KRN",.402,1838,"DIAB",12,0,36,22)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,1838,"DIAB",13,0,36,0)
STANDARD FTF;"STANDARD FILING TIME FRAME"
"KRN",.402,1838,"DIAB",15,0,36,24)
ANOTHER CO. PROC DENT CLAIMS?;T
"KRN",.402,1838,"DIAB",16,0,36,0)
STANDARD FTF VALUE;"STANDARD FILING TIME FRAME VALUE"
"KRN",.402,1838,"DIAB",20,0,36,20)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,1838,"DIAB",20,0,36,21)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,1838,"DIAB",22,0,36,23)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,1838,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;.18STANDARD FILING TIME FRAME~;I 'X S Y="@016";I '$$FTFV^IBCNSU31(X) S Y="@016";.19STANDARD FILING TIME FRAME VALUE~;@016;.12;.13;
"KRN",.402,1838,"DR",1,36,1)
.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@171";S DIE("NO^")="OUTOK";3.01EDI - Transmit?~;I '+X S Y="@16";S DIPA("IBTX")=X;K DIE("NO^");
"KRN",.402,1838,"DR",1,36,2)
I X=$G(IBEDIKEY(1))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1721";3.01////^S X=$G(IBEDIKEY(1));I $$EDIKEY^IBCNSC();S Y="@171";@1721;I '$G(DIPA("IBTX")) S Y="@17";3.04EDI - Inst Payer Primary ID~;
"KRN",.402,1838,"DR",1,36,3)
I X=$G(IBEDIKEY(4))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17211";3.04////^S X=$G(IBEDIKEY(4));I $$EDIKEY^IBCNSC();S Y="@171";@17211;15EDI - Alt Inst Payer Primary ID Type~;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,4)
6.01EDI - 1ST Inst Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(3,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";I X=$G(IBEDIKEY(1,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17212";6.01////^S X=$G(IBEDIKEY(1,6));
"KRN",.402,1838,"DR",1,36,5)
6.02////^S X=$G(IBEDIKEY(2,6));I $$EDIKEY^IBCNSC();S Y="@171";@17212;I '$G(DIPA("IBTX")) S Y="@17";6.02EDI - 1ST Inst Payer Sec. ID~;I X=$G(IBEDIKEY(2,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17213";
"KRN",.402,1838,"DR",1,36,6)
6.02////^S X=$G(IBEDIKEY(2,6));6.01////^S X=$G(IBEDIKEY(1,6));I $$EDIKEY^IBCNSC();S Y="@171";@17213;I '$G(DIPA("IBTX")) S Y="@17";6.03EDI - 2ND Inst Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";
"KRN",.402,1838,"DR",1,36,7)
I X=$G(IBEDIKEY(3,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17214";6.03////^S X=$G(IBEDIKEY(3,6));6.04////^S X=$G(IBEDIKEY(4,6));I $$EDIKEY^IBCNSC();S Y="@171";@17214;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,8)
6.04EDI - 2ND Inst Payer Sec. ID~;I X=$G(IBEDIKEY(4,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";6.04////^S X=$G(IBEDIKEY(4,6));6.03////^S X=$G(IBEDIKEY(3,6));I $$EDIKEY^IBCNSC();S Y="@171";@1722;
"KRN",.402,1838,"DR",1,36,9)
3.02EDI - Prof Payer Primary ID~;I X=$G(IBEDIKEY(2))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17221";3.02////^S X=$G(IBEDIKEY(2));I $$EDIKEY^IBCNSC();S Y="@171";@17221;16EDI - Alt Prof Payer Primary ID Type~;
"KRN",.402,1838,"DR",1,36,10)
I '$G(DIPA("IBTX")) S Y="@17";6.05EDI - 1ST Prof Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(7,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(5,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17222";
"KRN",.402,1838,"DR",1,36,11)
6.05////^S X=$G(IBEDIKEY(5,6));6.06////^S X=$G(IBEDIKEY(6,6));I $$EDIKEY^IBCNSC();S Y="@171";@17222;I '$G(DIPA("IBTX")) S Y="@17";6.06EDI - 1ST Prof Payer Sec. ID~;
"KRN",.402,1838,"DR",1,36,12)
I X=$G(IBEDIKEY(6,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17223";6.06////^S X=$G(IBEDIKEY(6,6));6.05////^S X=$G(IBEDIKEY(5,6));I $$EDIKEY^IBCNSC();S Y="@171";@17223;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,13)
6.07EDI - 2ND Prof Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(7,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17224";6.07////^S X=$G(IBEDIKEY(7,6));
"KRN",.402,1838,"DR",1,36,14)
6.08////^S X=$G(IBEDIKEY(8,6));I $$EDIKEY^IBCNSC();S Y="@171";@17224;I '$G(DIPA("IBTX")) S Y="@17";6.08EDI - 2ND Prof Payer Sec. ID~;I X=$G(IBEDIKEY(8,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";
"KRN",.402,1838,"DR",1,36,15)
6.08////^S X=$G(IBEDIKEY(8,6));6.07////^S X=$G(IBEDIKEY(7,6));I $$EDIKEY^IBCNSC();S Y="@171";@1723;3.15EDI - Dental Payer Primary ID~;I X=$G(IBEDIKEY(15))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17225";
"KRN",.402,1838,"DR",1,36,16)
3.15////^S X=$G(IBEDIKEY(15));I $$EDIKEY^IBCNSC();S Y="@171";@17225;@17;3.09EDI - Insurance Type~;I X=$G(IBEDIKEY(9))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1724";3.09////^S X=$G(IBEDIKEY(9));I $$EDIKEY^IBCNSC();S Y="@171";
"KRN",.402,1838,"DR",1,36,17)
@1724;@171;3.03EDI - Bin Number~;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1725";7.01;@1725;6.09EDI - Print Sec/Tert Auto Claims?~;6.1EDI - Print Medicare Sec Claims w/o MRA?~;I $G(DIPA("IBTX"))'=2 S Y="@18";
"KRN",.402,1838,"DR",1,36,18)
3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@18;S:",6,12,"'[IBY Y="@181";W !!,"Attending/Rendering Provider Secondary ID";4.01Default ID (1500)~;4.02Default ID (UB)~;4.03Require ID on Claim~;W !!,"Referring Provider Secondary ID";
"KRN",.402,1838,"DR",1,36,19)
4.04Default ID (1500)~//UPIN;4.05Require ID on Claim~;W !!,"Billing Provider Secondary IDs";4.06Use Att/Rend ID as Billing Provider Sec. ID (1500)?~//NO;4.08Use Att/Rend ID as Billing Provider Sec. ID (UB)?~//NO;
"KRN",.402,1838,"DR",1,36,20)
W !!,"Billing Provider/Service Facility";@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";.113;@1;.114;.115;.116;.131;.119;S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;
"KRN",.402,1838,"DR",1,36,21)
S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;S:",10,6,"'[IBY Y="@80";.168T~;S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";
"KRN",.402,1838,"DR",1,36,22)
.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@80;S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;S:X="" Y="@6";.182;S:X="" Y="@6";.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;
"KRN",.402,1838,"DR",1,36,23)
S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;S:IBY["4" Y="@99";@40;S:",5,6,"'[IBY Y="@130";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;
"KRN",.402,1838,"DR",1,36,24)
S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;S:IBY["5" Y="@99";@130;S:",110,6,"'[IBY Y="@55";.198T~;S:'X Y="@131";.197;S Y="@136";@131;.191;S:X="" Y="@15";.192;@15;.194;.195;.196;.1911;.199;@136;
"KRN",.402,1838,"DR",1,36,25)
S:IBY["110" Y="@99";@55;S:",13,6,"'[IBY Y="@60";I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@551";I $D(^DIC(36,"APC",+$G(DA))),$P($G(^DIC(36,+$G(DA),3)),U,13)="P" S Y="@551";3.13T~;S DIPA("IBLNK")=X;
"KRN",.402,1838,"DR",1,36,26)
I X=$G(IBEDIKEY(13))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@552";3.13////^S X=$G(IBEDIKEY(13));I $$EDIKEY^IBCNSC();S Y="@551";@552;I $G(DIPA("IBLNK"))'="C" S Y="@551";3.14T~;
"KRN",.402,1838,"DR",1,36,27)
I X=$G(IBEDIKEY(14))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@553";3.14////^S X=$G(IBEDIKEY(14));I $$EDIKEY^IBCNSC();S Y="@551";@553;D COPY^IBCEPCID(+$G(DA));@551;S:IBY=",13," Y="@99";@60;S IBPI=$$GET1^DIQ(36,DA,3.1,"I");
"KRN",.402,1838,"DR",1,36,28)
S:",7,6,"'[IBY Y="@50";3.1;I X="" S Y="@50";S IBPJ=X;I +$$GET1^DIQ(350.9,"1,",51.30,"I")'=IBPJ S Y="@605";3.1///@;3.1///^S X=IBPI;W !,"LINKING TO THE MBI PAYER IS NOT ALLOWED";S Y="@60";@605;
"KRN",.402,1838,"DR",1,36,29)
I +$$GET1^DIQ(350.9,"1,",51.31,"I")'=IBPJ S Y="@50";3.1///@;3.1///^S X=IBPI;W !,"LINKING TO THE ELECTRONIC INSURANCE COVERAGE DISCOVERY PAYER IS NOT ALLOWED",!;S Y="@60";@50;K IBPI,IBPJ;S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";
"KRN",.402,1838,"DR",1,36,30)
@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,1838,"DR",2,36.015)
.01EDI - Alt Inst Payer Primary ID Type~;.02EDI - Alt Inst Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.016)
.01EDI - Alt Prof Payer Primary ID Type~;.02EDI - Alt Prof Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.03)
.01
"KRN",101,7950,-1)
4^9
"KRN",101,7950,0)
IBJP IB TRICARE PAY-TO PROVIDER ADD
"KRN",101,7951,-1)
4^10
"KRN",101,7951,0)
IBJP IB TRICARE PAY-TO PROVIDER DEL
"KRN",101,7952,-1)
4^11
"KRN",101,7952,0)
IBJP IB TRICARE PAY-TO PROVIDER EDIT
"KRN",101,7953,-1)
4^12
"KRN",101,7953,0)
IBJP IB TRICARE PAY-TO PROVIDER DIVISIONS
"KRN",101,8395,-1)
0^4
"KRN",101,8395,0)
IBJP IB NON-MCCF RATE TYPE DEL^Remove Rate Type^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8395,4)
^^^RR
"KRN",101,8395,20)
D RTDEL^IBJPS7(1)
"KRN",101,8395,99)
65037,60667
"KRN",101,8396,-1)
0^3
"KRN",101,8396,0)
IBJP IB NON-MCCF RATE TYPES MENU^Non-MCCF Rate Types Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,8396,4)
26^4^^RM
"KRN",101,8396,10,0)
^101.01PA^2^2
"KRN",101,8396,10,1,0)
8397^AR^2^
"KRN",101,8396,10,1,"^")
IBJP IB NON-MCCF RATE TYPE ADD
"KRN",101,8396,10,2,0)
8395^RR^5^
"KRN",101,8396,10,2,"^")
IBJP IB NON-MCCF RATE TYPE DEL
"KRN",101,8396,26)
D SHOW^VALM
"KRN",101,8396,99)
65037,60667
"KRN",101,8397,-1)
0^1
"KRN",101,8397,0)
IBJP IB NON-MCCF RATE TYPE ADD^Add Rate Type^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8397,4)
^^^AR
"KRN",101,8397,20)
D RTADD^IBJPS7(1)
"KRN",101,8397,99)
65037,60667
"KRN",101,8398,-1)
0^2
"KRN",101,8398,0)
IBJP IB NON-MCCF RATE TYPES^Rate Types^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8398,4)
^^^RT
"KRN",101,8398,20)
D EN^IBJPS7(1)
"KRN",101,8398,99)
65037,60667
"KRN",101,8399,-1)
0^5
"KRN",101,8399,0)
IBJPS CMN CPT ADD^Add CPT Code^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8399,4)
^^^AC
"KRN",101,8399,20)
D RTADD^IBJPS8
"KRN",101,8399,99)
65037,60667
"KRN",101,8400,-1)
0^6
"KRN",101,8400,0)
IBJPS CMN CPT DEL^Delete CPT Code^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8400,4)
^^^DC
"KRN",101,8400,20)
D RTDEL^IBJPS8
"KRN",101,8400,99)
65037,60667
"KRN",101,8401,-1)
0^7
"KRN",101,8401,0)
IBJPS CMN CPT MENU^CMN CPT Inclusions Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,8401,4)
26^4
"KRN",101,8401,10,0)
^101.01PA^2^2
"KRN",101,8401,10,1,0)
8399^AC^2^
"KRN",101,8401,10,1,"^")
IBJPS CMN CPT ADD
"KRN",101,8401,10,2,0)
8400^DC^5^
"KRN",101,8401,10,2,"^")
IBJPS CMN CPT DEL
"KRN",101,8401,26)
D SHOW^VALM
"KRN",101,8401,99)
65037,60667
"KRN",101,8402,-1)
0^13
"KRN",101,8402,0)
IBJP IB NON-MCCF PAY-TO PROVIDERS MENU^Non-MCCF Pay-To Providers Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,8402,4)
26^4
"KRN",101,8402,10,0)
^101.01PA^5^5
"KRN",101,8402,10,1,0)
7950^AP^2^
"KRN",101,8402,10,1,"^")
IBJP IB TRICARE PAY-TO PROVIDER ADD
"KRN",101,8402,10,2,0)
7951^DP^6^
"KRN",101,8402,10,2,"^")
IBJP IB TRICARE PAY-TO PROVIDER DEL
"KRN",101,8402,10,3,0)
7952^EP^4^
"KRN",101,8402,10,3,"^")
IBJP IB TRICARE PAY-TO PROVIDER EDIT
"KRN",101,8402,10,4,0)
7953^AS^8^
"KRN",101,8402,10,4,"^")
IBJP IB TRICARE PAY-TO PROVIDER DIVISIONS
"KRN",101,8402,10,5,0)
8398^RT^10^
"KRN",101,8402,10,5,"^")
IBJP IB NON-MCCF RATE TYPES
"KRN",101,8402,24)
I $D(^XUSEC("IB EDIT PAY-TO TC",DUZ))
"KRN",101,8402,26)
D SHOW^VALM
"KRN",101,8402,99)
65037,60667
"KRN",101,8511,-1)
1^8
"KRN",101,8511,0)
IBJP IB TRICARE PAY-TO PROVIDERS MENU
"KRN",409.61,722,-1)
0^2
"KRN",409.61,722,0)
IBJP IB TRICARE PAY-TO PROVS^1^^80^2^18^1^1^IB Non-MCCF Pay-To Providers^IBJP IB NON-MCCF PAY-TO PROVIDERS MENU^Non-MCCF Pay-To Providers^1^^1
"KRN",409.61,722,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,722,"FNL")
D EXIT^IBJPS3
"KRN",409.61,722,"HDR")
D HDR^IBJPS3(1)
"KRN",409.61,722,"HLP")
D HELP^IBJPS3
"KRN",409.61,722,"INIT")
D INIT^IBJPS3(1)
"KRN",409.61,800,-1)
0^1
"KRN",409.61,800,0)
IBJP IB NON-MCCF RATE TYPES^1^^80^4^19^1^1^Non-MCCF Rate Types^IBJP IB NON-MCCF RATE TYPES MENU^Non-MCCF Rate Types^1^^1
"KRN",409.61,800,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,800,"ARRAY")
 ^TMP("IBJPS7",$J)
"KRN",409.61,800,"COL",0)
^409.621^3^3
"KRN",409.61,800,"COL",1,0)
NBR^5^1^#
"KRN",409.61,800,"COL",2,0)
RTYP^10^3^RTY
"KRN",409.61,800,"COL",3,0)
DESCR^17^30^DESCRIPTION
"KRN",409.61,800,"COL","B","DESCR",3)

"KRN",409.61,800,"COL","B","NBR",1)

"KRN",409.61,800,"COL","B","RTYP",2)

"KRN",409.61,800,"FNL")
D EXIT^IBJPS7
"KRN",409.61,800,"HDR")
D HDR^IBJPS7
"KRN",409.61,800,"HLP")
D HELP^IBJPS7
"KRN",409.61,800,"INIT")
D INIT^IBJPS7(1)
"KRN",409.61,801,-1)
0^3
"KRN",409.61,801,0)
IBJPS CMN CPTS^1^^80^4^19^1^1^CPT(s)^IBJPS CMN CPT MENU^CMN CPT Inclusions^1^^1
"KRN",409.61,801,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,801,"ARRAY")
 TMP("IBJPS8",$J)
"KRN",409.61,801,"COL",0)
^409.621^3^3
"KRN",409.61,801,"COL",1,0)
NBR^5^3^#^^0
"KRN",409.61,801,"COL",2,0)
CPT^10^10^CPT^^0
"KRN",409.61,801,"COL",3,0)
DESCR^25^30^DESCRIPTION^^0
"KRN",409.61,801,"COL","AIDENT",0,1)

"KRN",409.61,801,"COL","AIDENT",0,2)

"KRN",409.61,801,"COL","AIDENT",0,3)

"KRN",409.61,801,"COL","B","CPT",2)

"KRN",409.61,801,"COL","B","DESCR",3)

"KRN",409.61,801,"COL","B","NBR",1)

"KRN",409.61,801,"FNL")
D EXIT^IBJPS8
"KRN",409.61,801,"HDR")
D HDR^IBJPS8
"KRN",409.61,801,"HLP")
D HELP^IBJPS8
"KRN",409.61,801,"INIT")
D INIT^IBJPS8
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"PGL",350.8,0,6,.06)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
608^3190227^520824635
"PKG",230,22,1,"PAH",1,1,0)
^^1^1^3190227
"PKG",230,22,1,"PAH",1,1,1,0)
TEST v
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
33
"RTN","IBCBB1")
0^1^B130250613^B127796820
"RTN","IBCBB1",1,0)
IBCBB1 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
"RTN","IBCBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232,280,155,320,343,349,363,371,395,384,432,447,488,554,577,592,608**;21-MAR-94;Build 90
"RTN","IBCBB1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB1",4,0)
 ;
"RTN","IBCBB1",5,0)
 ; *** Begin IB*2.0*488 VD  (Issue 46 RBN)
"RTN","IBCBB1",6,0)
 N I
"RTN","IBCBB1",7,0)
 S I=""
"RTN","IBCBB1",8,0)
 S X=+$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCBB1",9,0)
 I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
"RTN","IBCBB1",10,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",11,0)
 I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,$$FT^IBCEF(IBIFN)=7:15,1:4))
"RTN","IBCBB1",12,0)
 S I=$$UP^XLFSTR(I)
"RTN","IBCBB1",13,0)
 I (I'=""&(I["PRNT")&($G(IBER)'["IB488")) D 
"RTN","IBCBB1",14,0)
 . S IBER=$G(IBER)_"IB488;"
"RTN","IBCBB1",15,0)
 ;
"RTN","IBCBB1",16,0)
 ; Cause an error if FORCED TO PRINT TO CLEARINGHOUSE
"RTN","IBCBB1",17,0)
 I $P($G(^DGCR(399,IBIFN,"TX")),U,8)=2 D
"RTN","IBCBB1",18,0)
 . S IBER=$G(IBER)_"IB489;"
"RTN","IBCBB1",19,0)
 ;
"RTN","IBCBB1",20,0)
 ; Cause a fatal error if the claim has no procedures & is NOT a UB-04 Inpatient claim.
"RTN","IBCBB1",21,0)
 I +$O(^DGCR(399,IBIFN,"CP",0))=0 D
"RTN","IBCBB1",22,0)
 .I $$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) Q   ; inpatient UB-04 check
"RTN","IBCBB1",23,0)
 .I '$$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) D  Q      ; Outpatient Institutional Claim.
"RTN","IBCBB1",24,0)
 ..I IBER["IB352" Q
"RTN","IBCBB1",25,0)
 ..S IBER=IBER_"IB352;"
"RTN","IBCBB1",26,0)
 .;
"RTN","IBCBB1",27,0)
 .; Professional claim
"RTN","IBCBB1",28,0)
 .I IBER["IB353" Q
"RTN","IBCBB1",29,0)
 .S IBER=IBER_"IB353;"
"RTN","IBCBB1",30,0)
 .Q
"RTN","IBCBB1",31,0)
 ; *** End IB*2.0*488 -- VD
"RTN","IBCBB1",32,0)
 ;
"RTN","IBCBB1",33,0)
 ;MAP TO DGCRBB1
"RTN","IBCBB1",34,0)
 ;
"RTN","IBCBB1",35,0)
% ;Bill Status
"RTN","IBCBB1",36,0)
 N Z,Z0,Z1,IBFT
"RTN","IBCBB1",37,0)
 I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
"RTN","IBCBB1",38,0)
 ;
"RTN","IBCBB1",39,0)
 ;Statement Covers From
"RTN","IBCBB1",40,0)
 I IBFDT="" S IBER=IBER_"IB061;"
"RTN","IBCBB1",41,0)
 I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
"RTN","IBCBB1",42,0)
 I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
"RTN","IBCBB1",43,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",44,0)
 ; if inpat - from date must not be prior to admit date.
"RTN","IBCBB1",45,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
"RTN","IBCBB1",46,0)
 ;
"RTN","IBCBB1",47,0)
 ;Statement Covers To
"RTN","IBCBB1",48,0)
 I IBTDT="" S IBER=IBER_"IB062;"
"RTN","IBCBB1",49,0)
 I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
"RTN","IBCBB1",50,0)
 I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
"RTN","IBCBB1",51,0)
 S IBTFY=$$FY^IBOUTL(IBTDT)
"RTN","IBCBB1",52,0)
 ;
"RTN","IBCBB1",53,0)
 ;Total Charges
"RTN","IBCBB1",54,0)
 ; IB*2.0*447/TAZ Removed this error so that zero dollar revenue codes can process on the 837
"RTN","IBCBB1",55,0)
 ;I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
"RTN","IBCBB1",56,0)
 ;
"RTN","IBCBB1",57,0)
 ;Billable charges for secondary claim
"RTN","IBCBB1",58,0)
 I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
"RTN","IBCBB1",59,0)
 ;Fiscal Year 1
"RTN","IBCBB1",60,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",61,0)
 ;
"RTN","IBCBB1",62,0)
 ;Check provider link for current user, enterer, reviewer and Authorizor
"RTN","IBCBB1",63,0)
 I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",64,0)
 I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",65,0)
 I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
"RTN","IBCBB1",66,0)
 I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
"RTN","IBCBB1",67,0)
 ;
"RTN","IBCBB1",68,0)
 I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
"RTN","IBCBB1",69,0)
 ; If ins bill, must have valid COB sequence
"RTN","IBCBB1",70,0)
 I $P(IBND0,U,11)="i",$S($P(IBND0,U,21)="":1,1:"PST"'[$P(IBND0,U,21)) S IBER=IBER_"IB324;"
"RTN","IBCBB1",71,0)
 ;
"RTN","IBCBB1",72,0)
 ; Check for valid sec provider id for current ins
"RTN","IBCBB1",73,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'="" D
"RTN","IBCBB1",74,0)
 . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TERTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
"RTN","IBCBB1",75,0)
 ; Check NPIs
"RTN","IBCBB1",76,0)
 D NPICHK^IBCBB11
"RTN","IBCBB1",77,0)
 ;
"RTN","IBCBB1",78,0)
 ; Check multiple rx NPIs
"RTN","IBCBB1",79,0)
 D RXNPI^IBCBB11(IBIFN)
"RTN","IBCBB1",80,0)
 ;
"RTN","IBCBB1",81,0)
 ; Check taxonomies
"RTN","IBCBB1",82,0)
 D TAXCHK^IBCBB11
"RTN","IBCBB1",83,0)
 ;
"RTN","IBCBB1",84,0)
 ; Check for Physician Name
"RTN","IBCBB1",85,0)
 K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
"RTN","IBCBB1",86,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",87,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCBB1",88,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",89,0)
 I IBFT'=2,IBFT'=7,$P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
"RTN","IBCBB1",90,0)
 ;
"RTN","IBCBB1",91,0)
 N FUNCTION,IBINS
"RTN","IBCBB1",92,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",93,0)
 ;S FUNCTION=$S($$FT^IBCEF(IBIFN)=3:4,1:3)
"RTN","IBCBB1",94,0)
 S FUNCTION=$S(IBFT=3:4,1:3)
"RTN","IBCBB1",95,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",96,0)
 I IBFT'=2,IBFT'=7,IBER'["IB303;" D
"RTN","IBCBB1",97,0)
 . F IBINS=1:1:3 D
"RTN","IBCBB1",98,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS)
"RTN","IBCBB1",99,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB1",100,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB1",101,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB1",102,0)
 ... S IBOK=0
"RTN","IBCBB1",103,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB1",104,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB236;",IBINS=2:"IB237;",IBINS=3:"IB238;",1:"")
"RTN","IBCBB1",105,0)
 ;
"RTN","IBCBB1",106,0)
 ; Patch 432 enh5:The IB system shall no longer prevent users from authorizing(fatal error message)a claim because the system cannot find the providersSSNorEIN
"RTN","IBCBB1",107,0)
 ; D PRIIDCHK^IBCBB11
"RTN","IBCBB1",108,0)
 ;
"RTN","IBCBB1",109,0)
 N IBM,IBM1
"RTN","IBCBB1",110,0)
 S IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCBB1",111,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCBB1",112,0)
 I $P(IBM,U),$P($G(^DIC(36,$P(IBM,U),4)),U,6),$P(IBM1,U,2)="" S IBER=IBER_"IB244;"
"RTN","IBCBB1",113,0)
 I $P(IBM,U,2),$P($G(^DIC(36,$P(IBM,U,2),4)),U,6),$P(IBM1,U,3)="" S IBER=IBER_"IB245;"
"RTN","IBCBB1",114,0)
 I $P(IBM,U,3),$P($G(^DIC(36,$P(IBM,U,3),4)),U,6),$P(IBM1,U,4)="" S IBER=IBER_"IB246;"
"RTN","IBCBB1",115,0)
 ;
"RTN","IBCBB1",116,0)
 ; If outside facility, check for ID and qualifier in 355.93
"RTN","IBCBB1",117,0)
 ; 5/15/06 - esg - hard error IB243 turned into warning message instead
"RTN","IBCBB1",118,0)
 S Z=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCBB1",119,0)
 I Z D
"RTN","IBCBB1",120,0)
 . I $P($G(^IBA(355.93,Z,0)),U,9)=""!($P($G(^IBA(355.93,Z,0)),U,13)="") D
"RTN","IBCBB1",121,0)
 .. N Z1,Z2
"RTN","IBCBB1",122,0)
 .. S Z1="Missing Lab or Facility Primary ID for non-VA facility, "
"RTN","IBCBB1",123,0)
 .. S Z2=$$EXTERNAL^DILFD(399,232,,Z)
"RTN","IBCBB1",124,0)
 .. I $L(Z2)'>19 D WARN^IBCBB11(Z1_Z2) Q
"RTN","IBCBB1",125,0)
 .. D WARN^IBCBB11(Z1),WARN^IBCBB11("     "_Z2)
"RTN","IBCBB1",126,0)
 .. Q
"RTN","IBCBB1",127,0)
 . Q
"RTN","IBCBB1",128,0)
 ;
"RTN","IBCBB1",129,0)
 ; Must be one and only one division on bill
"RTN","IBCBB1",130,0)
 S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
"RTN","IBCBB1",131,0)
 ; I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",132,0)
 ; Allow multi-divisional for OP instutional claims
"RTN","IBCBB1",133,0)
 I IBZ,$$INPAT^IBCEF(IBIFN)!'($$INSPRF^IBCEF(IBIFN)) S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",134,0)
 ; Still need error msg on OP Institutional if No Default division
"RTN","IBCBB1",135,0)
 I IBZ=3,'$$INPAT^IBCEF(IBIFN),$$INSPRF^IBCEF(IBIFN) S IBER=IBER_"IB105;"
"RTN","IBCBB1",136,0)
 ; Division address must be defined in institution file
"RTN","IBCBB1",137,0)
 I $P(IBND0,U,22) D
"RTN","IBCBB1",138,0)
 . N Z,Z0,Z1
"RTN","IBCBB1",139,0)
 . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
"RTN","IBCBB1",140,0)
 . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
"RTN","IBCBB1",141,0)
 . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",142,0)
 . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",143,0)
 ;
"RTN","IBCBB1",144,0)
 ; IB*2.0*432 Check ambulance addresses, COB Non-covered amt. & Attachment Control
"RTN","IBCBB1",145,0)
 I $$AMBCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB329;"
"RTN","IBCBB1",146,0)
 I $$COBAMT^IBCBB11(IBIFN)=1 S IBER=IBER_"IB330;"
"RTN","IBCBB1",147,0)
 I $$TMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"
"RTN","IBCBB1",148,0)
 I $$ACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"
"RTN","IBCBB1",149,0)
 I $$COBMRA^IBCBB11(IBIFN)=1 S IBER=IBER_"IB342;"
"RTN","IBCBB1",150,0)
 I $$COBSEC^IBCBB11(IBIFN)=1 S IBER=IBER_"IB343;"
"RTN","IBCBB1",151,0)
 ;
"RTN","IBCBB1",152,0)
 ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
"RTN","IBCBB1",153,0)
 S (IBRTCHV,IBPICHV)=0
"RTN","IBCBB1",154,0)
 I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
"RTN","IBCBB1",155,0)
 I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
"RTN","IBCBB1",156,0)
 I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
"RTN","IBCBB1",157,0)
 ;
"RTN","IBCBB1",158,0)
 ;Non-VA bill must use FEE REIMB INS rate type; FEE REIMB INS rate type can only be used for Non-VA bill
"RTN","IBCBB1",159,0)
 ;IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",160,0)
 ;N IBNVART,IBNVAST
"RTN","IBCBB1",161,0)
 ;S (IBNVART,IBNVAST)=0
"RTN","IBCBB1",162,0)
 ;I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="FEE REIMB INS" S IBNVART=1
"RTN","IBCBB1",163,0)
 ;S IBNVAST=$$NONVAFLG(IBIFN)
"RTN","IBCBB1",164,0)
 ;I IBNVART,'IBNVAST S IBER=IBER_"IB360;"  ;Non-VA rate type used for bill that is not Non-VA
"RTN","IBCBB1",165,0)
 ;I 'IBNVART,IBNVAST S IBER=IBER_"IB361;"  ;Non-VA rate type not used for bill that is Non-VA
"RTN","IBCBB1",166,0)
 ;
"RTN","IBCBB1",167,0)
 N IBZPRC,IBZPRCUB
"RTN","IBCBB1",168,0)
 D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
"RTN","IBCBB1",169,0)
 ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
"RTN","IBCBB1",170,0)
 I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
"RTN","IBCBB1",171,0)
 . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
"RTN","IBCBB1",172,0)
 .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
"RTN","IBCBB1",173,0)
 .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
"RTN","IBCBB1",174,0)
 .. I '$P(Z0,U,7) S ZE=1
"RTN","IBCBB1",175,0)
 ;
"RTN","IBCBB1",176,0)
 ; Extract procedures for UB-04
"RTN","IBCBB1",177,0)
 D F^IBCEF("N-UB-04 PROCEDURES","IBZPRCUB",,IBIFN)
"RTN","IBCBB1",178,0)
 ; Does this bill have ANY prescriptions associated with it?
"RTN","IBCBB1",179,0)
 ; Must bill prescriptions separately from other charges
"RTN","IBCBB1",180,0)
 ;
"RTN","IBCBB1",181,0)
 ; DEM;432 - Call line level provider edit checks.
"RTN","IBCBB1",182,0)
 D LNPROV^IBCBB12(IBIFN)  ; DEM;432 - If there are line provider edits, then routine LNPROV^IBCBB12(IBIFN) updates IBER string.
"RTN","IBCBB1",183,0)
 ; DEM;432 - Call to Other Operating/Operating Provider edit checks.
"RTN","IBCBB1",184,0)
 I $$OPPROVCK^IBCBB12(IBIFN)=1 S IBER=IBER_"IB337;"  ; DEM;432
"RTN","IBCBB1",185,0)
 ; DEM;432 - Line level Attachment Control edits.
"RTN","IBCBB1",186,0)
 I $$LNTMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"  ; DEM;432
"RTN","IBCBB1",187,0)
 I $$LNACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"  ; DEM;432
"RTN","IBCBB1",188,0)
 ;
"RTN","IBCBB1",189,0)
 ; vd/Beginning of IB*2*577 - Validate Line Level NDC edits.
"RTN","IBCBB1",190,0)
 I $$LNNDCCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB365;"  ;IB*2*577;JWS;11/20/17 FIX
"RTN","IBCBB1",191,0)
 ; vd/End of IB*2*577
"RTN","IBCBB1",192,0)
 I $$ISRX^IBCEF1(IBIFN) D
"RTN","IBCBB1",193,0)
 . N IBZ,IBRXDEF
"RTN","IBCBB1",194,0)
 . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
"RTN","IBCBB1",195,0)
 . F  S IBZ=$O(IBZPRCUB(IBZ)) Q:'IBZ  I IBZPRCUB(IBZ),+$P(IBZPRCUB(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
"RTN","IBCBB1",196,0)
 . K IBZ
"RTN","IBCBB1",197,0)
 ;
"RTN","IBCBB1",198,0)
 ; Check that COB sequences are not skipped
"RTN","IBCBB1",199,0)
 K Z
"RTN","IBCBB1",200,0)
 F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
"RTN","IBCBB1",201,0)
 F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
"RTN","IBCBB1",202,0)
 K Z
"RTN","IBCBB1",203,0)
 ; HD64676  IB*2*371 - OK for payer sequence to be blank when the Rate
"RTN","IBCBB1",204,0)
 ;    Type is either Interagency or Sharing Agreement
"RTN","IBCBB1",205,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,21)="",$P($G(^DGCR(399,IBIFN,0)),U,7)'=4,$P($G(^DGCR(399,IBIFN,0)),U,7)'=9 S IBER=IBER_"IB323;"
"RTN","IBCBB1",206,0)
 K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
"RTN","IBCBB1",207,0)
 ; Coding method should agree with types of procedure codes
"RTN","IBCBB1",208,0)
 S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
"RTN","IBCBB1",209,0)
 I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK=0 Q
"RTN","IBCBB1",210,0)
 I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
"RTN","IBCBB1",211,0)
 D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
"RTN","IBCBB1",212,0)
 Q:$G(IBQUIT)
"RTN","IBCBB1",213,0)
 ;
"RTN","IBCBB1",214,0)
 ;Other things that could be added:  Rev Code - calculating charges
"RTN","IBCBB1",215,0)
 ;        Diagnosis Coding, if MT copay - check for other co-payments
"RTN","IBCBB1",216,0)
 ;
"RTN","IBCBB1",217,0)
 I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
"RTN","IBCBB1",218,0)
 I $P(IBNDTX,U,8)!$P(IBNDTX,U,9) D
"RTN","IBCBB1",219,0)
 . Q:$P(IBNDTX,U,8)=2    ; Don't want to do this for option 2 any more.
"RTN","IBCBB1",220,0)
 . D WARN^IBCBB11($S($$REQMRA^IBEFUNC(IBIFN)&($P(IBNDTX,U,9)):"MRA Secondary ",1:"")_"Bill has been forced to print "_$S($P(IBNDTX,U,8)=1!($P(IBNDTX,U,9)=1):"locally",1:"at clearinghouse"))
"RTN","IBCBB1",221,0)
 N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IBA(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
"RTN","IBCBB1",222,0)
 . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
"RTN","IBCBB1",223,0)
 ;
"RTN","IBCBB1",224,0)
 D VALNDC^IBCBB11(IBIFN,DFN)  ;validate NDC#
"RTN","IBCBB1",225,0)
 ;
"RTN","IBCBB1",226,0)
 ;Build AR array if no errors and MRA not needed or already rec'd
"RTN","IBCBB1",227,0)
 I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
"RTN","IBCBB1",228,0)
 ;
"RTN","IBCBB1",229,0)
 ;Check ROI
"RTN","IBCBB1",230,0)
 N ROIERR
"RTN","IBCBB1",231,0)
 S ROIERR=0 I $P($G(^DGCR(399,IBIFN,"U")),U,5)=1,+$P($G(^DGCR(399,IBIFN,"U")),U,7)=0 S ROIERR=1 ; screen 7 sensitive record and no ROI
"RTN","IBCBB1",232,0)
 I $$ROICHK^IBCBB11(IBIFN,DFN,+IBNDMP) S ROIERR=1 ; check file for sensitive Rx and missing ROI
"RTN","IBCBB1",233,0)
 I ROIERR S IBER=IBER_"IB328;"
"RTN","IBCBB1",234,0)
 ;
"RTN","IBCBB1",235,0)
 ;Verify Line Charges Match Claim Total Charge. IB*2.0*447 BI
"RTN","IBCBB1",236,0)
 I +$$GET1^DIQ(399,IBIFN_",",201)'=+$$IBLNTOT^IBCBB13(IBIFN) S IBER=IBER_"IB344;"
"RTN","IBCBB1",237,0)
 ;
"RTN","IBCBB1",238,0)
 ;Test for valid EIN/SY ID Values. IB*2.0*447 BI
"RTN","IBCBB1",239,0)
 I $$IBSYEI^IBCBB13(IBIFN) S IBER=IBER_"IB345;"
"RTN","IBCBB1",240,0)
 ;
"RTN","IBCBB1",241,0)
 ;Test for a missing ICN. IB*2.0*447 BI
"RTN","IBCBB1",242,0)
 I $$IBMICN^IBCBB13(IBIFN) S IBER=IBER_"IB346;"
"RTN","IBCBB1",243,0)
 ;
"RTN","IBCBB1",244,0)
 ;Test for a ZERO charge amounts. IB*2.0*447 BI
"RTN","IBCBB1",245,0)
 I $$IBRCCHK^IBCBB13(IBIFN) D WARN^IBCBB11("Claim contains revenue codes with no associated charges.")
"RTN","IBCBB1",246,0)
 ;
"RTN","IBCBB1",247,0)
 ;Test for missing "Patient reason for visit". IB*2.0*447 BI
"RTN","IBCBB1",248,0)
 I $$FT^IBCEF(IBIFN)=3,'$$INPAT^IBCEF(IBIFN),$$IBPRV3^IBCBB13(IBIFN) S IBER=IBER_"IB347;"
"RTN","IBCBB1",249,0)
 ;
"RTN","IBCBB1",250,0)
 ;Test for missing Payer ID. IB*2.0*447 BI
"RTN","IBCBB1",251,0)
 ;I $$IBMPID^IBCBB13(IBIFN) S IBER=IBER_"IB348;"
"RTN","IBCBB1",252,0)
 ;Changed Error to Warning. IB*2.0*447 TAZ
"RTN","IBCBB1",253,0)
 I $$IBMPID^IBCBB13(IBIFN) D WARN^IBCBB11("Not all payers have Payer IDs.")
"RTN","IBCBB1",254,0)
 ;
"RTN","IBCBB1",255,0)
 ;Test for missing "Priority (Type) of Admission" for UB-04. IB*2.0*447 BI
"RTN","IBCBB1",256,0)
 I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(399,IBIFN_",",158)="" S IBER=IBER_"IB349;"
"RTN","IBCBB1",257,0)
 ;
"RTN","IBCBB1",258,0)
 I $$FT^IBCEF(IBIFN)=2 S IBER=IBER_$$CMNCHK^IBCBB13(IBIFN)  ;JRA;IB*2.0*608 Check for missing CMN info
"RTN","IBCBB1",259,0)
 ;
"RTN","IBCBB1",260,0)
END ;Don't kill IBIFN, IBER, DFN
"RTN","IBCBB1",261,0)
 I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
"RTN","IBCBB1",262,0)
 K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
"RTN","IBCBB1",263,0)
 K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
"RTN","IBCBB1",264,0)
 I $D(IBER),IBER="" W !,"No Errors found for National edits"
"RTN","IBCBB1",265,0)
 Q
"RTN","IBCBB1",266,0)
 ;
"RTN","IBCBB1",267,0)
ARRAY ;Build PRCASV(array)
"RTN","IBCBB1",268,0)
 N IBCOBN,X
"RTN","IBCBB1",269,0)
 K PRCASV
"RTN","IBCBB1",270,0)
 Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
"RTN","IBCBB1",271,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCBB1",272,0)
 S X=IBIFN
"RTN","IBCBB1",273,0)
 S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
"RTN","IBCBB1",274,0)
 S PRCASV("APR")=DUZ
"RTN","IBCBB1",275,0)
 S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
"RTN","IBCBB1",276,0)
 I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
"RTN","IBCBB1",277,0)
 S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
"RTN","IBCBB1",278,0)
 S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
"RTN","IBCBB1",279,0)
 S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
"RTN","IBCBB1",280,0)
 ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11)]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
"RTN","IBCBB1",281,0)
PLUS I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
"RTN","IBCBB1",282,0)
 I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
"RTN","IBCBB1",283,0)
 ;
"RTN","IBCBB1",284,0)
 N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
"RTN","IBCBB1",285,0)
 N IBNDI1
"RTN","IBCBB1",286,0)
 Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
"RTN","IBCBB1",287,0)
 S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
"RTN","IBCBB1",288,0)
 S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
"RTN","IBCBB1",289,0)
 S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
"RTN","IBCBB1",290,0)
 S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
"RTN","IBCBB1",291,0)
 ; Check that this is a secondary or tertiary bill and insurance for previous
"RTN","IBCBB1",292,0)
 ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
"RTN","IBCBB1",293,0)
 I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
"RTN","IBCBB1",294,0)
 Q
"RTN","IBCBB1",295,0)
 ;
"RTN","IBCBB1",296,0)
MRA N IBEOB S IBEOB=0
"RTN","IBCBB1",297,0)
 ;
"RTN","IBCBB1",298,0)
 K PRCASV("MEDURE"),PRCASV("MEDCA")
"RTN","IBCBB1",299,0)
 ; Get EOB data
"RTN","IBCBB1",300,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCBB1",301,0)
 . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
"RTN","IBCBB1",302,0)
 Q  ;MRA
"RTN","IBCBB1",303,0)
 ;
"RTN","IBCBB1",304,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB1",305,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB1",306,0)
 ;
"RTN","IBCBB1",307,0)
NONVAFLG(IBIFN) ; Check if Non-VA bill
"RTN","IBCBB1",308,0)
 ; Function returns 1 if Non-VA bill
"RTN","IBCBB1",309,0)
 ; IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",310,0)
 N FLAG,PTF
"RTN","IBCBB1",311,0)
 S FLAG=0
"RTN","IBCBB1",312,0)
 I $P($G(^DGCR(399,IBIFN,"U2")),U,10)]"" S FLAG=1 ;Non-VA provider defined
"RTN","IBCBB1",313,0)
 S PTF=$P($G(^DGCR(399,IBIFN,0)),U,8)
"RTN","IBCBB1",314,0)
 I PTF,$P($G(^DGPT(PTF,0)),U,4)=1 S FLAG=1 ;PTF entry indicates Non-VA
"RTN","IBCBB1",315,0)
 Q FLAG
"RTN","IBCBB12")
0^18^B140177880^B136258580
"RTN","IBCBB12",1,0)
IBCBB12 ;ALB/DEM - PROCEDURE AND LINE LEVEL PROVIDER EDITS ;17-OCT-2010
"RTN","IBCBB12",2,0)
 ;;2.0;INTEGRATED BILLING;**432,592,608**;21-MAR-94;Build 90
"RTN","IBCBB12",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB12",4,0)
 Q
"RTN","IBCBB12",5,0)
 ;
"RTN","IBCBB12",6,0)
LNPROV(IBIFN) ; DEM;432 - Edits for line level providers.
"RTN","IBCBB12",7,0)
 ;
"RTN","IBCBB12",8,0)
 ; Input:
"RTN","IBCBB12",9,0)
 ;       IBIFN - Claim number IEN.
"RTN","IBCBB12",10,0)
 ;
"RTN","IBCBB12",11,0)
 ; Output:
"RTN","IBCBB12",12,0)
 ;       OK - '1' Edits
"RTN","IBCBB12",13,0)
 ;            '0' No Edits.
"RTN","IBCBB12",14,0)
 ;       *Note: OK returned if called as function.
"RTN","IBCBB12",15,0)
 ;              Can be called as routine as well.
"RTN","IBCBB12",16,0)
 ;       IBER - Edit error string. Only updated if errors.
"RTN","IBCBB12",17,0)
 ;
"RTN","IBCBB12",18,0)
 ; Patch 432 EDITS:
"RTN","IBCBB12",19,0)
 ;
"RTN","IBCBB12",20,0)
 ; (1) Not all procedures have a Line Level Rendering Provider,
"RTN","IBCBB12",21,0)
 ;     and no Claim Level Rendering Provider.
"RTN","IBCBB12",22,0)
 ;     Error Message in Billing for Prof Rendering.
"RTN","IBCBB12",23,0)
 ;     *Note: Only applies to Rendering Provider Type.
"RTN","IBCBB12",24,0)
 ;
"RTN","IBCBB12",25,0)
 ; (2) All procedures have a Line Level Rendering Provider,
"RTN","IBCBB12",26,0)
 ;     and a Claim Level Rendering Provider who is different
"RTN","IBCBB12",27,0)
 ;     from any of the Line Level Rendering Providers.
"RTN","IBCBB12",28,0)
 ;     Error in Billing.
"RTN","IBCBB12",29,0)
 ;     *Note: Apply to all provider types (Rendering, Referring, Supervising, Attending, Operating, and Other Operating).
"RTN","IBCBB12",30,0)
 ;
"RTN","IBCBB12",31,0)
 N OK
"RTN","IBCBB12",32,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",33,0)
 Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
"RTN","IBCBB12",34,0)
 N IBPRVFUN,IBCLPRV,IBLNPRV,PRVFUN
"RTN","IBCBB12",35,0)
 S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
"RTN","IBCBB12",36,0)
 ; JWS;IB*2.0*592 US1108 - Dental form check
"RTN","IBCBB12",37,0)
 I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) or (7) Dental J430D Form Type.
"RTN","IBCBB12",38,0)
 S:IBFT=2 PRVFUN(2)="RENDERING,REFERRING,SUPERVISING"  ; Allowable line provider functions for CMS-1500.
"RTN","IBCBB12",39,0)
 S:IBFT=3 PRVFUN(3)="RENDERING,REFERRING,OPERATING,OTHER OPERATING"  ; Allowable line provider functions for UB-04.
"RTN","IBCBB12",40,0)
 S:IBFT=7 PRVFUN(7)="RENDERING,REFERRING,SUPERVISING,ASSISTANT SURGEON"  ; Allowable line provider functions for Dental form J430D.
"RTN","IBCBB12",41,0)
 ; JWS;IB*2.0*592 US1108 - end
"RTN","IBCBB12",42,0)
 F PRVFUN("CNT")=1:1:$L(PRVFUN(IBFT),",") S IBPRVFUN=$P(PRVFUN(IBFT),",",PRVFUN("CNT")) D
"RTN","IBCBB12",43,0)
 . I IBFT=2,IBPRVFUN="RENDERING",'$$LNPRV2(IBPRVFUN),'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D  Q  ; Edit Check (1).
"RTN","IBCBB12",44,0)
 .. ;
"RTN","IBCBB12",45,0)
 .. ;/Beginning of IB*2.0*608 - vd (US3214)
"RTN","IBCBB12",46,0)
 .. ; Changed the following from and error to a warning.
"RTN","IBCBB12",47,0)
 .. ;S OK=1  ; OK=1 indicates we have at least one error.
"RTN","IBCBB12",48,0)
 .. ;S IBER=IBER_"IB333;"
"RTN","IBCBB12",49,0)
 .. D WARN^IBCBB11("Claim has no Rendering Providers present.")
"RTN","IBCBB12",50,0)
 .. ;/Ending of IB*2.0*608 - vd (US3214)
"RTN","IBCBB12",51,0)
 .. Q
"RTN","IBCBB12",52,0)
 . Q:'$$LNPRV2(IBPRVFUN,.IBLNPRV)  ; Quit if not all the procedures have a line level provider of the same provider type.
"RTN","IBCBB12",53,0)
 . Q:'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN))  ; No claim level provider for this provider type.
"RTN","IBCBB12",54,0)
 . ;
"RTN","IBCBB12",55,0)
 . Q:'$$CLPRV2(IBPRVFUN,.IBCLPRV)  ; Must have provider for provider type IBPRVFUN to continue (Edit (2)).
"RTN","IBCBB12",56,0)
 . ;
"RTN","IBCBB12",57,0)
 . S IBCLPRV=0 F  S IBCLPRV=$O(IBCLPRV(IBPRVFUN,IBCLPRV)) Q:'IBCLPRV  D  ; Edit Check (2).
"RTN","IBCBB12",58,0)
 .. Q:$D(IBLNPRV(IBPRVFUN,IBCLPRV))  ; Check against line provider array IBLNPRV.
"RTN","IBCBB12",59,0)
 .. S OK=1
"RTN","IBCBB12",60,0)
 .. S IBER=IBER_$S(IBPRVFUN="ASSISTANT SURGEON":"IB335;",1:"IB334;")
"RTN","IBCBB12",61,0)
 .. Q
"RTN","IBCBB12",62,0)
 . Q
"RTN","IBCBB12",63,0)
 ;
"RTN","IBCBB12",64,0)
 Q OK
"RTN","IBCBB12",65,0)
 ;
"RTN","IBCBB12",66,0)
LNPRV2(IBPRVFUN,IBLNPRV) ; Function - Edit Check (2) for line level provider.
"RTN","IBCBB12",67,0)
 ; See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",68,0)
 ;
"RTN","IBCBB12",69,0)
 ; Input:
"RTN","IBCBB12",70,0)
 ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
"RTN","IBCBB12",71,0)
 ;       IBLNPRV(Array) - Passed by reference. Intially undefined.
"RTN","IBCBB12",72,0)
 ;
"RTN","IBCBB12",73,0)
 ; Output:
"RTN","IBCBB12",74,0)
 ;       OK - If Edit Check (2) line level provider condition has
"RTN","IBCBB12",75,0)
 ;            been met, then OK will return '1' for TRUE, ELSE, '0'
"RTN","IBCBB12",76,0)
 ;            for FALSE.
"RTN","IBCBB12",77,0)
 ;            *See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",78,0)
 ;       IBLNPRV(Array) - If Edit Check (2) condition has been met,
"RTN","IBCBB12",79,0)
 ;                        then IBLNPRV will contain the provider type,
"RTN","IBCBB12",80,0)
 ;                        and provider variable pointer as array
"RTN","IBCBB12",81,0)
 ;                        subscripts, and array element is SET to
"RTN","IBCBB12",82,0)
 ;                        NULL. => IBLNPRV(IBPRVFUN,IBLNPROV)="".
"RTN","IBCBB12",83,0)
 ;
"RTN","IBCBB12",84,0)
 N OK,IBPROCP,IBLPIEN,IBLNPROV
"RTN","IBCBB12",85,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  I $D(OK),'OK Q
"RTN","IBCBB12",86,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)
"RTN","IBCBB12",87,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function for this procedure.
"RTN","IBCBB12",88,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
"RTN","IBCBB12",89,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",90,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No zero node for line level provider.
"RTN","IBCBB12",91,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),"^",2)
"RTN","IBCBB12",92,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",93,0)
 . S IBLNPRV(IBPRVFUN,IBLNPROV)=""
"RTN","IBCBB12",94,0)
 . Q
"RTN","IBCBB12",95,0)
 ;
"RTN","IBCBB12",96,0)
 Q:$D(OK) OK  ; OK will never equal '1' for TRUE at this point.
"RTN","IBCBB12",97,0)
 I '$D(OK),'$D(IBLNPRV(IBPRVFUN)) S OK=0 Q OK  ; No line provider array for this line provider function.
"RTN","IBCBB12",98,0)
 S OK=1  ; Edit Check (2) line provider condition has been met.
"RTN","IBCBB12",99,0)
 Q OK
"RTN","IBCBB12",100,0)
 ;
"RTN","IBCBB12",101,0)
CLPRV2(IBPRVFUN,IBCLPRV) ; Function - Edit Check (2) for claim level provider.
"RTN","IBCBB12",102,0)
 ; See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",103,0)
 ;
"RTN","IBCBB12",104,0)
 ; Input:
"RTN","IBCBB12",105,0)
 ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
"RTN","IBCBB12",106,0)
 ;       IBCLPRV(Array) - Passed by reference. Intially undefined.
"RTN","IBCBB12",107,0)
 ;
"RTN","IBCBB12",108,0)
 ; Output:
"RTN","IBCBB12",109,0)
 ;       OK - If Edit Check (2) claim level provider condition has
"RTN","IBCBB12",110,0)
 ;            been met, then OK will return '1' for TRUE, ELSE, '0'
"RTN","IBCBB12",111,0)
 ;            for FALSE.
"RTN","IBCBB12",112,0)
 ;            *See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",113,0)
 ;       IBCLPRV(Array) - If Edit Check (2) condition has been met,
"RTN","IBCBB12",114,0)
 ;                        then IBCLPRV will contain the provider type,
"RTN","IBCBB12",115,0)
 ;                        and provider variable pointer as array
"RTN","IBCBB12",116,0)
 ;                        subscripts, and array element is SET to
"RTN","IBCBB12",117,0)
 ;                        NULL. => IBCLPRV(IBPRVFUN,IBCLPROV)="".
"RTN","IBCBB12",118,0)
 ;
"RTN","IBCBB12",119,0)
 N IBCLPIEN,IBCLPROV,OK
"RTN","IBCBB12",120,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",121,0)
 S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
"RTN","IBCBB12",122,0)
 . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
"RTN","IBCBB12",123,0)
 . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),"^",2)
"RTN","IBCBB12",124,0)
 . Q:'IBCLPROV
"RTN","IBCBB12",125,0)
 . S IBCLPRV(IBPRVFUN,IBCLPROV)=""  ; Set array for Edit Check (2) to compare claim level provider with line level provider.
"RTN","IBCBB12",126,0)
 . S OK=1  ; At this point we have our claim level provider of provider type IBPRVFUN. Set OK=1 for TRUE.
"RTN","IBCBB12",127,0)
 . Q
"RTN","IBCBB12",128,0)
 ;
"RTN","IBCBB12",129,0)
 Q:'OK OK
"RTN","IBCBB12",130,0)
 S OK=1
"RTN","IBCBB12",131,0)
 Q OK
"RTN","IBCBB12",132,0)
 ;
"RTN","IBCBB12",133,0)
OPPROVCK(IBIFN) ; DEM;432 - Other Operating Provider edit checks.
"RTN","IBCBB12",134,0)
 ;
"RTN","IBCBB12",135,0)
 ; Input:
"RTN","IBCBB12",136,0)
 ;       IBIFN - Claim number IEN.
"RTN","IBCBB12",137,0)
 ;
"RTN","IBCBB12",138,0)
 ; Output:
"RTN","IBCBB12",139,0)
 ;       OK - '1' Edits
"RTN","IBCBB12",140,0)
 ;            '0' No Edits.
"RTN","IBCBB12",141,0)
 ;       *Note: OK returned if called as function ($$).
"RTN","IBCBB12",142,0)
 ;              Can be called as routine as well.
"RTN","IBCBB12",143,0)
 ;
"RTN","IBCBB12",144,0)
 ; Patch 432 line level Other Operating Provider Edit checks:
"RTN","IBCBB12",145,0)
 ;
"RTN","IBCBB12",146,0)
 ; (1) If claim level Other Operating Provider, then
"RTN","IBCBB12",147,0)
 ;     (1.1) claim must have claim level Operating Provider.
"RTN","IBCBB12",148,0)
 ;           OR
"RTN","IBCBB12",149,0)
 ;     (1.2) every line must have Operating Provider.
"RTN","IBCBB12",150,0)
 ;
"RTN","IBCBB12",151,0)
 ;  If (1) Passes, then do edit check (2) below.
"RTN","IBCBB12",152,0)
 ;
"RTN","IBCBB12",153,0)
 ;  (2) If any claim line has Other Operating Provider, then
"RTN","IBCBB12",154,0)
 ;      (2.1) must have Operating Provider on same claim line,
"RTN","IBCBB12",155,0)
 ;            OR
"RTN","IBCBB12",156,0)
 ;      (2.2) must have claim level Operating Provider.
"RTN","IBCBB12",157,0)
 ;
"RTN","IBCBB12",158,0)
 N OK
"RTN","IBCBB12",159,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",160,0)
 Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
"RTN","IBCBB12",161,0)
 S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
"RTN","IBCBB12",162,0)
 ; JWS;IB*2.0*592 US1108 - Dental form check 
"RTN","IBCBB12",163,0)
 I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) Form Type or (7) Dental J430D
"RTN","IBCBB12",164,0)
 ;
"RTN","IBCBB12",165,0)
 N IBPRVFUN,IBLNFLAG,IBLNPRV,CLOK,LNOK
"RTN","IBCBB12",166,0)
 ;
"RTN","IBCBB12",167,0)
 ; Note: Claim level provider - OTHER and OTHER OPERATING are the same.
"RTN","IBCBB12",168,0)
 ; Check if condition (1) has been met.
"RTN","IBCBB12",169,0)
 F IBPRVFUN="OTHER","OTHER OPERATING" S CLOK=$$CLOPPRV1(IBPRVFUN) Q:CLOK
"RTN","IBCBB12",170,0)
 Q:'CLOK OK  ; No claim level OTHER OPERATING PROVIDER, then QUIT, no further checks.
"RTN","IBCBB12",171,0)
 S OK=0  ; Initialize OK=0 for FALSE. 
"RTN","IBCBB12",172,0)
 ; Condition (1) has been met, check condtion (1.1).
"RTN","IBCBB12",173,0)
 S CLOK=0  ; Initialize CLOK=0 for FALSE.
"RTN","IBCBB12",174,0)
 I $D(^DGCR(399,IBIFN,"PRV","C","OPERATING")) S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Check condition (1.1).
"RTN","IBCBB12",175,0)
 ; If CLOK at this point, then skip condition check (1.2) and continue to condition (2).
"RTN","IBCBB12",176,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",177,0)
 I 'CLOK S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN) I 'LNOK S OK=1 Q OK  ; Check condition (1.2). If 'LNOK, then we have an error and QUIT.
"RTN","IBCBB12",178,0)
 ; If LNOK, then continue to condition check (2).
"RTN","IBCBB12",179,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",180,0)
 K IBLNPRV  ; KILL IBLNPRV array before call to $$LNOPPRV1(IBPRVFUN,1,.IBLNPRV).
"RTN","IBCBB12",181,0)
 S IBPRVFUN="OTHER OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2) start.
"RTN","IBCBB12",182,0)
 I '$D(IBLNPRV("PRVFUN")) S OK=0 Q OK  ; If no data in IBLNPRV("PRVFUN") array, then skip rest of checks, no error.
"RTN","IBCBB12",183,0)
 ; If data in IBLNPRV("PRVFUN") array, then check condition (2.1).
"RTN","IBCBB12",184,0)
 S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2.1) start.
"RTN","IBCBB12",185,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",186,0)
 D:$D(IBLNPRV("PRVFUN"))  ; If data in IBLNPRV("PRVFUN") array, then continue condition check (2.1).
"RTN","IBCBB12",187,0)
 . N IBPROCP
"RTN","IBCBB12",188,0)
 . S IBPROCP=0 F  S IBPROCP=$O(IBLNPRV("PROC",IBPROCP)) Q:'IBPROCP  D  Q:'LNOK
"RTN","IBCBB12",189,0)
 . . I $D(IBLNPRV("PROC",IBPROCP,"OTHER OPERATING")),'$D(IBLNPRV("PROC",IBPROCP,"OPERATING")) S LNOK=0 Q
"RTN","IBCBB12",190,0)
 . . S LNOK=1  ; At this point, we have at least one match. If there wasn't a match, then LNOK=0 and we would have QUIT.
"RTN","IBCBB12",191,0)
 . . Q
"RTN","IBCBB12",192,0)
 . Q
"RTN","IBCBB12",193,0)
 I LNOK S OK=0 Q OK  ; Conditions (2) and (2.1) are met (no error). SET OK=0 and QUIT.
"RTN","IBCBB12",194,0)
 ; If 'LNOK, then continue to condition check (2.2).
"RTN","IBCBB12",195,0)
 S CLOK=0  ; Initialize CLOK=0 for FALSE.
"RTN","IBCBB12",196,0)
 S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Condition check (2.2).
"RTN","IBCBB12",197,0)
 I CLOK S OK=0 Q OK  ; Conditions (2) and (2.2) are met (no error). SET OK=0 and QUIT.
"RTN","IBCBB12",198,0)
 ; At this point, we have an error. SET OK=1, and QUIT.
"RTN","IBCBB12",199,0)
 S OK=1
"RTN","IBCBB12",200,0)
 Q OK
"RTN","IBCBB12",201,0)
 ;
"RTN","IBCBB12",202,0)
CLOPPRV1(IBPRVFUN) ; Claim level provider/provider function check.
"RTN","IBCBB12",203,0)
 ;
"RTN","IBCBB12",204,0)
 ; Check if there is a claim level provider with provider function IBPRVFUN.
"RTN","IBCBB12",205,0)
 ;
"RTN","IBCBB12",206,0)
 ; Input:
"RTN","IBCBB12",207,0)
 ;       IBPRVFUN - PROVIDER FUNCTION.
"RTN","IBCBB12",208,0)
 ;
"RTN","IBCBB12",209,0)
 ; Output:
"RTN","IBCBB12",210,0)
 ;       OK - '1' Claim level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",211,0)
 ;            '0' No Claim level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",212,0)
 ;
"RTN","IBCBB12",213,0)
 N OK,IBCLPIEN,IBCLPROV
"RTN","IBCBB12",214,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",215,0)
 ;
"RTN","IBCBB12",216,0)
 I $D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D
"RTN","IBCBB12",217,0)
 . S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
"RTN","IBCBB12",218,0)
 . . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
"RTN","IBCBB12",219,0)
 . . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),U,2)
"RTN","IBCBB12",220,0)
 . . Q:'IBCLPROV
"RTN","IBCBB12",221,0)
 . . S OK=1  ; At this point we have claim level provider with provider function IBPRVFUN and can QUIT function/subroutine.
"RTN","IBCBB12",222,0)
 . . Q
"RTN","IBCBB12",223,0)
 . Q
"RTN","IBCBB12",224,0)
 ;
"RTN","IBCBB12",225,0)
 Q OK
"RTN","IBCBB12",226,0)
 ;
"RTN","IBCBB12",227,0)
LNOPPRV1(IBPRVFUN,IBLNFLAG,IBLNPRV,IBPROCHK) ; Check every claim line for provider function IBPRVFUN.
"RTN","IBCBB12",228,0)
 ;
"RTN","IBCBB12",229,0)
 ;
"RTN","IBCBB12",230,0)
 ; Input:
"RTN","IBCBB12",231,0)
 ;       IBPRVFUN - PROVIDER FUNCTION.
"RTN","IBCBB12",232,0)
 ;       IBLNFLAG(Optional) = 1 or 0. 1 indicates return IBLNPRV array passed by reference, otherwise '0' for NO.
"RTN","IBCBB12",233,0)
 ;       IBLNPRV(Optional) - Array passed by reference => IF SET OK=1, then
"RTN","IBCBB12",234,0)
 ;                           I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
"RTN","IBCBB12",235,0)
 ;       IBPROCHK - Condition on PROCEDURE (ICD, CPT, or HCFA procedure codes).
"RTN","IBCBB12",236,0)
 ;
"RTN","IBCBB12",237,0)
 ; Output:
"RTN","IBCBB12",238,0)
 ;       OK - '1' Every line level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",239,0)
 ;            '0' Not every line level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",240,0)
 ;
"RTN","IBCBB12",241,0)
 N OK
"RTN","IBCBB12",242,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",243,0)
 ;
"RTN","IBCBB12",244,0)
 N IBLPIEN,IBLNPROV,IBPROCP
"RTN","IBCBB12",245,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)
"RTN","IBCBB12",246,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
"RTN","IBCBB12",247,0)
 . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
"RTN","IBCBB12",248,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function IBPRVFUN for this procedure.
"RTN","IBCBB12",249,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
"RTN","IBCBB12",250,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",251,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
"RTN","IBCBB12",252,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
"RTN","IBCBB12",253,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",254,0)
 . ; At this point we have line level provider of type IBPRVFUN.
"RTN","IBCBB12",255,0)
 . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
"RTN","IBCBB12",256,0)
 . ; We would not get to this point if any line level provider with provider function IBPRVFUN didn't exist.
"RTN","IBCBB12",257,0)
 . S OK=1
"RTN","IBCBB12",258,0)
 . I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
"RTN","IBCBB12",259,0)
 . Q
"RTN","IBCBB12",260,0)
 ;
"RTN","IBCBB12",261,0)
 Q OK
"RTN","IBCBB12",262,0)
 ;
"RTN","IBCBB12",263,0)
UBPRVCK(IBIFN) ; DEM;432 - Check if claim requires operating provider.
"RTN","IBCBB12",264,0)
 ;
"RTN","IBCBB12",265,0)
 ; Description: This function checks if claim requires an operating provider.
"RTN","IBCBB12",266,0)
 ;
"RTN","IBCBB12",267,0)
 ;              Checks:
"RTN","IBCBB12",268,0)
 ;
"RTN","IBCBB12",269,0)
 ;              (1) If claim has a claim level operating provider,
"RTN","IBCBB12",270,0)
 ;                  then no further checks (OK=1=TRUE).
"RTN","IBCBB12",271,0)
 ;              (2) If claim doesn't have a claim level operating provider,
"RTN","IBCBB12",272,0)
 ;                  then check:
"RTN","IBCBB12",273,0)
 ;                  (2.1) Is this a UB-04 claim? NO = QUIT (OK=1), YES = Continue to next check.
"RTN","IBCBB12",274,0)
 ;                  (2.2) Check every claim line that includes HCPCS procs - operating provider.
"RTN","IBCBB12",275,0)
 ;                        If every claim line that includes HCPCS procs has an operating provider,
"RTN","IBCBB12",276,0)
 ;                        then we are OK and QUIT (OK=1).
"RTN","IBCBB12",277,0)
 ;                        If any claim line that includes HCPCS procs doesn't have an operating
"RTN","IBCBB12",278,0)
 ;                        provider, then we have an ERROR (OK=0). 
"RTN","IBCBB12",279,0)
 ;
"RTN","IBCBB12",280,0)
 ; Input:
"RTN","IBCBB12",281,0)
 ;       IBIFN = Claim number IEN.
"RTN","IBCBB12",282,0)
 ;
"RTN","IBCBB12",283,0)
 ; Output:
"RTN","IBCBB12",284,0)
 ;        OK = 0 = claim doesn't have an operating provider
"RTN","IBCBB12",285,0)
 ;                 when operating provider or rendering provider required.
"RTN","IBCBB12",286,0)
 ;        OK = 1 = claim has an operating provider, or,
"RTN","IBCBB12",287,0)
 ;                 claim doesn't require operating provider.
"RTN","IBCBB12",288,0)
 ;
"RTN","IBCBB12",289,0)
 N OK
"RTN","IBCBB12",290,0)
 ; If claim doesn't have any procedure codes, then no checks required.
"RTN","IBCBB12",291,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) S OK=1 Q OK
"RTN","IBCBB12",292,0)
 ;
"RTN","IBCBB12",293,0)
 S OK=$$CLOPPRV1("OPERATING")  ; Do we have a claim level OPERATING PROVIDER (OK=1=TRUE)?
"RTN","IBCBB12",294,0)
 Q:OK OK  ; QUIT, we have a claim level OPERATING PROVIDER (OK=1=TRUE).
"RTN","IBCBB12",295,0)
 ;
"RTN","IBCBB12",296,0)
 N IBFT
"RTN","IBCBB12",297,0)
 S IBFT=($$FT^IBCEF(IBIFN)=3)  ; UB-04 claim (1 = TRUE, 0 = FALSE)?
"RTN","IBCBB12",298,0)
 S OK=1  ; Initialize OK=1.
"RTN","IBCBB12",299,0)
 Q:'IBFT OK  ; QUIT OK=1, not a UB-04 claim.
"RTN","IBCBB12",300,0)
 ;
"RTN","IBCBB12",301,0)
 ; Claim level check did not pass, check claim lines.
"RTN","IBCBB12",302,0)
 ; No claim level OPERATING PROVIDER, so check every PROCEDURE for OPERATING PROVIDER.
"RTN","IBCBB12",303,0)
 S OK=$$UBPRVCK1("") ; Does every procedure have an OPERATING PROVIDER(1=TRUE,0=FALSE)?
"RTN","IBCBB12",304,0)
 ;
"RTN","IBCBB12",305,0)
 Q OK
"RTN","IBCBB12",306,0)
 ;
"RTN","IBCBB12",307,0)
UBPRVCK1(IBPROCHK,IBONE) ; DEM;432 - Continuation of UBPRVCK function.
"RTN","IBCBB12",308,0)
 ;
"RTN","IBCBB12",309,0)
 ; Input:
"RTN","IBCBB12",310,0)
 ;       IBPROCHK(Optional) - Optional condition on PROCEDURE CODE (ICD, CPT, or HCFA procedure codes).
"RTN","IBCBB12",311,0)
 ;       IBONE(Optional) - Quit if at least one line has an OPERATING
"RTN","IBCBB12",312,0)
 ;
"RTN","IBCBB12",313,0)
 ; Output:
"RTN","IBCBB12",314,0)
 ;       OK - '1' Every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",315,0)
 ;            or if IBONE, then at least one procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",316,0)
 ;            '0' Not every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",317,0)
 ;            or if IBONE, then NO procedure codes that contain IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",318,0)
 ;
"RTN","IBCBB12",319,0)
 N OK
"RTN","IBCBB12",320,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",321,0)
 ;
"RTN","IBCBB12",322,0)
 N IBLPIEN,IBLNPROV,IBPROCP
"RTN","IBCBB12",323,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)&('$G(IBONE))  I $G(IBONE),$G(OK) Q
"RTN","IBCBB12",324,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
"RTN","IBCBB12",325,0)
 . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
"RTN","IBCBB12",326,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING")) S OK=0 Q  ; No line OPERATING PROVIDER for this procedure.
"RTN","IBCBB12",327,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING",0))
"RTN","IBCBB12",328,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",329,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
"RTN","IBCBB12",330,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
"RTN","IBCBB12",331,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",332,0)
 . ; At this point we have line level provider of type OPERATING.
"RTN","IBCBB12",333,0)
 . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
"RTN","IBCBB12",334,0)
 . ; We would not get to this point if any line level provider with provider function OPERATING didn't exist.
"RTN","IBCBB12",335,0)
 . S OK=1
"RTN","IBCBB12",336,0)
 . Q
"RTN","IBCBB12",337,0)
 ;
"RTN","IBCBB13")
0^2^B52019184^B19726855
"RTN","IBCBB13",1,0)
IBCBB13 ;ALB/BI - PROCEDURE AND LINE LEVEL PROVIDER EDITS ;5-OCT-2011
"RTN","IBCBB13",2,0)
 ;;2.0;INTEGRATED BILLING;**447,608**;21-MAR-94;Build 90
"RTN","IBCBB13",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB13",4,0)
 Q
"RTN","IBCBB13",5,0)
 ;
"RTN","IBCBB13",6,0)
IBLNTOT(IBIFN)   ; Calculate Line total charges.  IB*2.0*447 BI
"RTN","IBCBB13",7,0)
 N X,SUM S SUM=0
"RTN","IBCBB13",8,0)
 S X=0 F  S X=$O(^DGCR(399,IBIFN,"RC",X)) Q:+X=0  D
"RTN","IBCBB13",9,0)
 . S SUM=SUM+$P($G(^DGCR(399,IBIFN,"RC",X,0)),"^",4)
"RTN","IBCBB13",10,0)
 Q SUM
"RTN","IBCBB13",11,0)
 ;
"RTN","IBCBB13",12,0)
IBSYEI(IBIFN)   ; Test for valid EIN/SY ID Values. IB*2.0*447 BI
"RTN","IBCBB13",13,0)
 N X12CODE,RESULT,IBPIEN,IBWIEN,IBLIEN
"RTN","IBCBB13",14,0)
 S RESULT=0
"RTN","IBCBB13",15,0)
 ; Check Claim Level Providers
"RTN","IBCBB13",16,0)
 S IBWIEN=IBIFN_","
"RTN","IBCBB13",17,0)
 S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,128,"I")_",",.03)
"RTN","IBCBB13",18,0)
 I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,122),"-","")'?9N S RESULT=1 Q RESULT
"RTN","IBCBB13",19,0)
 S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,129,"I")_",",.03)
"RTN","IBCBB13",20,0)
 I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,123),"-","")'?9N S RESULT=1 Q RESULT
"RTN","IBCBB13",21,0)
 S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399,IBWIEN,130,"I")_",",.03)
"RTN","IBCBB13",22,0)
 I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399,IBWIEN,124),"-","")'?9N S RESULT=1 Q RESULT
"RTN","IBCBB13",23,0)
 ; Check Claim Level Providers
"RTN","IBCBB13",24,0)
 S IBPIEN=0 F  S IBPIEN=$O(^DGCR(399,IBIFN,"PRV",IBPIEN)) Q:+IBPIEN=0  Q:RESULT=1  D
"RTN","IBCBB13",25,0)
 .S IBWIEN=IBPIEN_","_IBIFN_","
"RTN","IBCBB13",26,0)
 .; Test for each provider listed.
"RTN","IBCBB13",27,0)
 .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.12,"I")_",",.03)
"RTN","IBCBB13",28,0)
 .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.05),"-","")'?9N S RESULT=1 Q
"RTN","IBCBB13",29,0)
 .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.13,"I")_",",.03)
"RTN","IBCBB13",30,0)
 .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.06),"-","")'?9N S RESULT=1 Q 
"RTN","IBCBB13",31,0)
 .S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0222,IBWIEN,.14,"I")_",",.03)
"RTN","IBCBB13",32,0)
 .I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0222,IBWIEN,.07),"-","")'?9N S RESULT=1 Q
"RTN","IBCBB13",33,0)
 ; Check Line Level Providers
"RTN","IBCBB13",34,0)
 ; For each charge code / line.
"RTN","IBCBB13",35,0)
 S IBLIEN=0 F  S IBLIEN=$O(^DGCR(399,IBIFN,"CP",IBLIEN)) Q:+IBLIEN=0  Q:RESULT=1  D
"RTN","IBCBB13",36,0)
 .; For each provider associated with the line.
"RTN","IBCBB13",37,0)
 .S IBPIEN=0 F  S IBPIEN=$O(^DGCR(399,IBIFN,"CP",IBLIEN,"LNPRV",IBPIEN)) Q:+IBPIEN=0  Q:RESULT=1  D
"RTN","IBCBB13",38,0)
 ..S IBWIEN=IBPIEN_","_IBLIEN_","_IBIFN_","
"RTN","IBCBB13",39,0)
 ..; Test for each provider listed.
"RTN","IBCBB13",40,0)
 ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.12,"I")_",",.03)
"RTN","IBCBB13",41,0)
 ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.05),"-","")'?9N S RESULT=1 Q
"RTN","IBCBB13",42,0)
 ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.13,"I")_",",.03)
"RTN","IBCBB13",43,0)
 ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.06),"-","")'?9N S RESULT=1 Q
"RTN","IBCBB13",44,0)
 ..S X12CODE=$$GET1^DIQ(355.97,$$GET1^DIQ(399.0404,IBWIEN,.14,"I")_",",.03)
"RTN","IBCBB13",45,0)
 ..I ((X12CODE="SY")!(X12CODE="EI")),$TR($$GET1^DIQ(399.0404,IBWIEN,.07),"-","")'?9N S RESULT=1 Q
"RTN","IBCBB13",46,0)
 Q RESULT
"RTN","IBCBB13",47,0)
 ;
"RTN","IBCBB13",48,0)
IBMICN(IBIFN)   ; Test for a missing ICN. IB*2.0*447 BI
"RTN","IBCBB13",49,0)
 N IBTFOB ; TIMEFRAME OF BILL
"RTN","IBCBB13",50,0)
 N IBCBPS ; CURRENT BILL PAYER SEQUENCE, P-PRI, S-SEC, T-TER, A-PATIENT
"RTN","IBCBB13",51,0)
 S IBTFOB=$$GET1^DIQ(399,IBIFN_",",.06,"I")
"RTN","IBCBB13",52,0)
 I '((IBTFOB=7)!(IBTFOB=8)) Q 0
"RTN","IBCBB13",53,0)
 S IBCBPS=$$GET1^DIQ(399,IBIFN_",",.21,"I")
"RTN","IBCBB13",54,0)
 I IBCBPS="P",$$GET1^DIQ(399,IBIFN_",",101)'="",$$GET1^DIQ(399,IBIFN_",",453)="" Q 1
"RTN","IBCBB13",55,0)
 I IBCBPS="S",$$GET1^DIQ(399,IBIFN_",",102)'="",$$GET1^DIQ(399,IBIFN_",",454)="" Q 1
"RTN","IBCBB13",56,0)
 I IBCBPS="T",$$GET1^DIQ(399,IBIFN_",",103)'="",$$GET1^DIQ(399,IBIFN_",",455)="" Q 1
"RTN","IBCBB13",57,0)
 Q 0
"RTN","IBCBB13",58,0)
 ;
"RTN","IBCBB13",59,0)
IBRCCHK(IBIFN)   ; Test for a ZERO charge amounts. IB*2.0*447 BI
"RTN","IBCBB13",60,0)
 N IBN0
"RTN","IBCBB13",61,0)
 N IBRCCNT S IBRCCNT=0
"RTN","IBCBB13",62,0)
 N IBRCCHG S IBRCCHG=0
"RTN","IBCBB13",63,0)
 F  S IBRCCNT=$O(^DGCR(399,IBIFN,"RC",IBRCCNT)) Q:+IBRCCNT=0  Q:IBRCCHG=1  D
"RTN","IBCBB13",64,0)
 .S IBN0=$G(^DGCR(399,IBIFN,"RC",IBRCCNT,0))
"RTN","IBCBB13",65,0)
 .I $P(IBN0,U,1)'="",+$P(IBN0,U,4)=0 S IBRCCHG=1
"RTN","IBCBB13",66,0)
 Q IBRCCHG
"RTN","IBCBB13",67,0)
 ;
"RTN","IBCBB13",68,0)
IBPRV3(IBIFN)   ; Test for missing "Patient reason for visit". IB*2.0*447 BI
"RTN","IBCBB13",69,0)
 I $$GET1^DIQ(399,IBIFN_",",249)="",$$GET1^DIQ(399,IBIFN_",",250)="",$$GET1^DIQ(399,IBIFN_",",251)="" Q 1
"RTN","IBCBB13",70,0)
 Q 0
"RTN","IBCBB13",71,0)
 ;
"RTN","IBCBB13",72,0)
IBMPID(IBIFN)   ; Test for multiple payers. IB*2.0*447 BI
"RTN","IBCBB13",73,0)
 N IBPAY1 S IBPAY1=$$GET1^DIQ(399,IBIFN_",",101,"I")
"RTN","IBCBB13",74,0)
 N IBPAY2 S IBPAY2=$$GET1^DIQ(399,IBIFN_",",102,"I")
"RTN","IBCBB13",75,0)
 N IBPAY3 S IBPAY3=$$GET1^DIQ(399,IBIFN_",",103,"I")
"RTN","IBCBB13",76,0)
 N IBCNT S IBCNT=0
"RTN","IBCBB13",77,0)
 S:IBPAY1 IBCNT=IBCNT+1 S:IBPAY2 IBCNT=IBCNT+1 S:IBPAY3 IBCNT=IBCNT+1 I IBCNT<2 Q 0
"RTN","IBCBB13",78,0)
 N IBINSTIT S IBINSTIT=$$INSPRF^IBCEF(IBIFN)
"RTN","IBCBB13",79,0)
 I IBPAY1,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY1_",",3.04),1:$$GET1^DIQ(36,IBPAY1_",",3.02))="" Q 1
"RTN","IBCBB13",80,0)
 I IBPAY2,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY2_",",3.04),1:$$GET1^DIQ(36,IBPAY2_",",3.02))="" Q 1
"RTN","IBCBB13",81,0)
 I IBPAY3,$S(IBINSTIT:$$GET1^DIQ(36,IBPAY3_",",3.04),1:$$GET1^DIQ(36,IBPAY3_",",3.02))="" Q 1
"RTN","IBCBB13",82,0)
 Q 0
"RTN","IBCBB13",83,0)
 ;
"RTN","IBCBB13",84,0)
CMNCHK(IBIFN) ;JRA;IB*2.0*608 Check for missing required Certificate of Medical Necessity (CMN) data
"RTN","IBCBB13",85,0)
 ; Input : IBIFN = IEN of the Bill/Claim (D399)
"RTN","IBCBB13",86,0)
 ; Output: IBER  = NULL if no errors      
"RTN","IBCBB13",87,0)
 ;               = String of IB Error Message codes delimited by ';'
"RTN","IBCBB13",88,0)
 ;               => Note that the return value is appended to the 'IBER' variable in routine ^IBCBB1
"RTN","IBCBB13",89,0)
 Q:IBIFN="" ""
"RTN","IBCBB13",90,0)
 N CERTYP,CMNNODE,CMNREQ,DA,DIE,ERR,FRMNAM,FRMIEN,FORM,FRMTYP,IBER,IBPROCP,PROCNUM
"RTN","IBCBB13",91,0)
 S IBER=""
"RTN","IBCBB13",92,0)
 ;Set up array of each existing Form Type (i.e. Form IENs) and associated ^DGCR data node.
"RTN","IBCBB13",93,0)
 S FRMNAM="" F  S FRMNAM=$O(^IBE(399.6,"B",FRMNAM)) Q:FRMNAM=""  S FRMIEN=+$O(^IBE(399.6,"B",FRMNAM,"")) I FRMIEN D
"RTN","IBCBB13",94,0)
 . S FORM(FRMIEN)=$P($G(^IBE(399.6,FRMIEN,0)),U,4)
"RTN","IBCBB13",95,0)
 ;Loop thru all procedures on the claim searching for missing CMN data
"RTN","IBCBB13",96,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBER]""
"RTN","IBCBB13",97,0)
 . ;If "CMN Required?" is NULL then QUIT w/out further checking
"RTN","IBCBB13",98,0)
 . S CMNREQ=$$CVALCHK(IBPROCP,23,,"I") Q:CMNREQ=""
"RTN","IBCBB13",99,0)
 . I 'CMNREQ,$D(FORM)>1 D  Q  ;"CMN Required?" flagged as "NO" so check if data node(s) exist anyway for at least 1 form
"RTN","IBCBB13",100,0)
 . . S ERR=0,FRMIEN="" F  S FRMIEN=$O(FORM(FRMIEN)) Q:FRMIEN=""  I FORM(FRMIEN)]"" D  Q:ERR
"RTN","IBCBB13",101,0)
 . . . S CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMIEN)_""")" I $D(@CMNNODE) S ERR=1,IBER=IBER_"IB901;"
"RTN","IBCBB13",102,0)
 . S FRMTYP=$$CVALCHK(IBPROCP,24,"IB902","I") Q:'FRMTYP  ;Check for "CMN FORM TYPE" (Internal value)
"RTN","IBCBB13",103,0)
 . I $G(FORM(FRMTYP))]"" D  Q:ERR
"RTN","IBCBB13",104,0)
 . . ;Check if any data exists at the node specific to the Form Type
"RTN","IBCBB13",105,0)
 . . S ERR=0,CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMTYP)_""")"
"RTN","IBCBB13",106,0)
 . . I '$D(@CMNNODE) S ERR=1,IBER=IBER_"IB903;" Q
"RTN","IBCBB13",107,0)
 . . Q:FORM(FRMTYP)'[10126
"RTN","IBCBB13",108,0)
 . . N ND10126
"RTN","IBCBB13",109,0)
 . . S ND10126=@CMNNODE
"RTN","IBCBB13",110,0)
 . . I $P(ND10126,U,17)]"" S $P(ND10126,U,17)="" I $TR(ND10126,U)="" S ERR=1,IBER=IBER_"IB903;"
"RTN","IBCBB13",111,0)
 . ;Check if any data exists for at least 1 node other than that associated with the Form Type 
"RTN","IBCBB13",112,0)
 . S ERR=0,FRMIEN="" F  S FRMIEN=$O(FORM(FRMIEN)) Q:FRMIEN=""  I FRMIEN'=FRMTYP,FORM(FRMIEN)]"" D  Q:ERR
"RTN","IBCBB13",113,0)
 . . S CMNNODE="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_","""_FORM(FRMIEN)_""")" I $D(@CMNNODE) S ERR=1,IBER=IBER_"IB904;"
"RTN","IBCBB13",114,0)
 . ;Check for Required fields at the data node common to all forms (node 'CMN')
"RTN","IBCBB13",115,0)
 . S CERTYP=$$CVALCHK(IBPROCP,24.01,"IB905","I") Q:CERTYP=""  ;Check for "CMN CERTIFICATION TYPE"
"RTN","IBCBB13",116,0)
 . D CVALCHK(IBPROCP,24.05,"IB907","I")  ;Check for "CMN DATE THERAPY STARTED"
"RTN","IBCBB13",117,0)
 . D CVALCHK(IBPROCP,24.06,"IB908","I")  ;Check for "CMN LAST CERTIFICATION DATE"
"RTN","IBCBB13",118,0)
 . ;IF Certificate Type is "RENEWAL" (R) or "REVISED" (S) then "CMN RECERTIFICATION/REVISN DT" is Required.
"RTN","IBCBB13",119,0)
 . I CERTYP="R"!(CERTYP="S") D CVALCHK(IBPROCP,24.07,"IB909","I")
"RTN","IBCBB13",120,0)
 . ;
"RTN","IBCBB13",121,0)
 . ;Check for required fields specific to the CMN-484 form
"RTN","IBCBB13",122,0)
 . I FORM(FRMTYP)[484 D  ;Check for required fields/dates
"RTN","IBCBB13",123,0)
 . . I $$CVALCHK(IBPROCP,24.1,,"I")]""!($$CVALCHK(IBPROCP,24.102,,"I")]"") D CVALCHK(IBPROCP,24.103,"IB912","I")
"RTN","IBCBB13",124,0)
 . . I $$CVALCHK(IBPROCP,24.111,,"I")]""!($$CVALCHK(IBPROCP,24.113,,"I")]"") D CVALCHK(IBPROCP,24.114,"IB914","I")
"RTN","IBCBB13",125,0)
 . ;
"RTN","IBCBB13",126,0)
 . ;Check for required fields specific to the CMN-10126 form
"RTN","IBCBB13",127,0)
 . I FORM(FRMTYP)[10126 D
"RTN","IBCBB13",128,0)
 . . D CVALCHK(IBPROCP,24.217,"IB906","I")
"RTN","IBCBB13",129,0)
 . . N PROCMSG
"RTN","IBCBB13",130,0)
 . . S PROCMSG="CMN ""Procedure ",PROCMSG(1)=""" has no associated Calories."
"RTN","IBCBB13",131,0)
 . . I $$CVALCHK(IBPROCP,24.204,,"I")]"",'$$CVALCHK(IBPROCP,24.203,,"I") D WARN^IBCBB11(PROCMSG_"A"_PROCMSG(1))
"RTN","IBCBB13",132,0)
 . . I $$CVALCHK(IBPROCP,24.219,,"I")]"",'$$CVALCHK(IBPROCP,24.218,,"I") D WARN^IBCBB11(PROCMSG_"B"_PROCMSG(1))
"RTN","IBCBB13",133,0)
 ;
"RTN","IBCBB13",134,0)
 I IBER]"" S IBER="IB915;"_IBER
"RTN","IBCBB13",135,0)
 Q IBER
"RTN","IBCBB13",136,0)
 ;
"RTN","IBCBB13",137,0)
CVALCHK(IBPROCP,FLD,ERROR,FLG) ;JRA;IB*2.0*608 Check value of CMN field & append Error Code (if any) to list of errors
"RTN","IBCBB13",138,0)
 Q:($G(FLD)=""!('$G(IBPROCP)))
"RTN","IBCBB13",139,0)
 N VAL
"RTN","IBCBB13",140,0)
 S VAL=$$CMNDATA^IBCEF31(IBIFN,IBPROCP,FLD,$G(FLG))
"RTN","IBCBB13",141,0)
 I $G(ERROR)]"",VAL="" S IBER=IBER_ERROR_";"
"RTN","IBCBB13",142,0)
 Q VAL
"RTN","IBCBB13",143,0)
 ;
"RTN","IBCCC2")
0^3^B139322972^B130398035
"RTN","IBCCC2",1,0)
IBCCC2 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
"RTN","IBCCC2",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296,320,348,349,371,400,433,432,447,516,577,592,608**;21-MAR-94;Build 90
"RTN","IBCCC2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCC2",4,0)
 ;
"RTN","IBCCC2",5,0)
 ;MAP TO DGCRCC2
"RTN","IBCCC2",6,0)
 ;
"RTN","IBCCC2",7,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC2",8,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC2",9,0)
 ;
"RTN","IBCCC2",10,0)
STEP5 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBCCC2",11,0)
 ; NOTE:  any new or changed data nodes may also need to be updated in IBNCPDP5
"RTN","IBCCC2",12,0)
 ;move pure data nodes
"RTN","IBCCC2",13,0)
 ; MRD;IB*2.0*516 - Added "In7" nodes.
"RTN","IBCCC2",14,0)
 F I="I1","I17","I2","I27","I3","I37","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",15,0)
 ;
"RTN","IBCCC2",16,0)
 ;move top level data node. ;Do not move 'TX' node EXCEPT piece 8 (added with IB*2.0*432)
"RTN","IBCCC2",17,0)
 ;F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",18,0)
 ; add new data nodes introduced with IB*2.0*432
"RTN","IBCCC2",19,0)
 F I="TX","U","U1","U2","U3","U4","U5","U6","U7","U8","UF2","UF3","UF31","UF32","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",20,0)
 ;
"RTN","IBCCC2",21,0)
 ;move multiple level data
"RTN","IBCCC2",22,0)
 ;F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",23,0)
 ; add new data nodes introduced with IB*2.0*447 BI
"RTN","IBCCC2",24,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV","U9" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",25,0)
 ;
"RTN","IBCCC2",26,0)
 ;JWS;IB*2.0*592;add new Dental Claim fields; IA# 3820
"RTN","IBCCC2",27,0)
 I $D(^DGCR(399,IBIFN1,"DEN")) S ^DGCR(399,IBIFN,"DEN")=^DGCR(399,IBIFN1,"DEN")
"RTN","IBCCC2",28,0)
 I $D(^DGCR(399,IBIFN1,"DEN1",0)) S ^DGCR(399,IBIFN,"DEN1",0)=^DGCR(399,IBIFN1,"DEN1",0) D
"RTN","IBCCC2",29,0)
 . S K=0 F  S K=$O(^DGCR(399,IBIFN1,"DEN1",K)) Q:'K  S ^DGCR(399,IBIFN,"DEN1",K,0)=^DGCR(399,IBIFN1,"DEN1",K,0)
"RTN","IBCCC2",30,0)
 I $D(^DGCR(399,IBIFN1,"DEN2")) S ^DGCR(399,IBIFN,"DEN2")=^DGCR(399,IBIFN1,"DEN2")
"RTN","IBCCC2",31,0)
 ;
"RTN","IBCCC2",32,0)
 ; IB*2.0*432  ADDED IBSILENT flag so that this can be processed in background
"RTN","IBCCC2",33,0)
 D FTPRV^IBCEU5(IBIFN,$G(IBSILENT)) ; Ask change prov type if form type not the same
"RTN","IBCCC2",34,0)
 D COBCHG(IBIFN,,.IBCOB)
"RTN","IBCCC2",35,0)
 ;
"RTN","IBCCC2",36,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBCCC2",37,0)
 ;
"RTN","IBCCC2",38,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBCCC2",39,0)
 D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBCCC2",40,0)
 ;
"RTN","IBCCC2",41,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ) G END
"RTN","IBCCC2",42,0)
 ;
"RTN","IBCCC2",43,0)
STEP6 N IBGOEND
"RTN","IBCCC2",44,0)
 ; need to kill CRD flag prior to entering billing screens in case a copy for corresponding claim is needed
"RTN","IBCCC2",45,0)
 K IBCNCRD
"RTN","IBCCC2",46,0)
 ; don't call IB bill edit screens if this is non-MRA background processing
"RTN","IBCCC2",47,0)
 I $G(IBSTSM)=1 G END
"RTN","IBCCC2",48,0)
 I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
"RTN","IBCCC2",49,0)
 ;
"RTN","IBCCC2",50,0)
 ;
"RTN","IBCCC2",51,0)
END K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARST,IBCOB,IBCNCOPY,IBCBCOPY,IBCNCRD,IBKEY
"RTN","IBCCC2",52,0)
 K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,IBCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
"RTN","IBCCC2",53,0)
 K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
"RTN","IBCCC2",54,0)
 Q
"RTN","IBCCC2",55,0)
 ;
"RTN","IBCCC2",56,0)
 ;
"RTN","IBCCC2",57,0)
IBSCEDT ; call the IB bill edit screens and validate the data
"RTN","IBCCC2",58,0)
 N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
"RTN","IBCCC2",59,0)
 ; if the user came from CBW->PC and this is a non-MRA claim w/a paper EOB, set force print flag IB*2.0*432
"RTN","IBCCC2",60,0)
 ; also, if the user came from CBW->PC and this is a non-MRA claim and the only EEOB we have has filing errors, set force print flag
"RTN","IBCCC2",61,0)
 I $G(IBMRANOT)=1,$$COBN^IBCEF(IBIFN)>1,$G(IBFROM)=2 D 
"RTN","IBCCC2",62,0)
 .I $G(IBDA)="" D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",63,0)
 .I $D(^IBM(361.1,IBDA,"ERR")) D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",64,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCCC2",65,0)
ST1 S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
"RTN","IBCCC2",66,0)
 S IBAC=1
"RTN","IBCCC2",67,0)
 D ^IBCB1
"RTN","IBCCC2",68,0)
 I $G(IBCIREDT) G ST1
"RTN","IBCCC2",69,0)
IBSCX ;
"RTN","IBCCC2",70,0)
 Q
"RTN","IBCCC2",71,0)
 ;
"RTN","IBCCC2",72,0)
 ;
"RTN","IBCCC2",73,0)
TX F J=8 I $P(IBND("TX"),"^",J)]"" S $P(^DGCR(399,IBIFN,"TX"),"^",J)=$P(IBND("TX"),"^",J)
"RTN","IBCCC2",74,0)
 Q
"RTN","IBCCC2",75,0)
U F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
"RTN","IBCCC2",76,0)
 Q
"RTN","IBCCC2",77,0)
U1 F J=1:1:3,15 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
"RTN","IBCCC2",78,0)
 Q
"RTN","IBCCC2",79,0)
U2 F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
"RTN","IBCCC2",80,0)
 Q
"RTN","IBCCC2",81,0)
U3 F J=1:1:11 I $P(IBND("U3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U3"),"^",J)=$P(IBND("U3"),"^",J)
"RTN","IBCCC2",82,0)
 Q
"RTN","IBCCC2",83,0)
UF2 F J=1,3 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
"RTN","IBCCC2",84,0)
 Q
"RTN","IBCCC2",85,0)
UF3 F J=4:1:6 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
"RTN","IBCCC2",86,0)
 Q
"RTN","IBCCC2",87,0)
U4 F J=1:1:14 I $P(IBND("U4"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U4"),"^",J)=$P(IBND("U4"),"^",J)
"RTN","IBCCC2",88,0)
 Q
"RTN","IBCCC2",89,0)
U5 F J=1:1:6 I $P(IBND("U5"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U5"),"^",J)=$P(IBND("U5"),"^",J)
"RTN","IBCCC2",90,0)
 Q
"RTN","IBCCC2",91,0)
U6 F J=1:1:6 I $P(IBND("U6"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U6"),"^",J)=$P(IBND("U6"),"^",J)
"RTN","IBCCC2",92,0)
 Q
"RTN","IBCCC2",93,0)
U7 F J=1:1:5 I $P(IBND("U7"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U7"),"^",J)=$P(IBND("U7"),"^",J)
"RTN","IBCCC2",94,0)
 Q
"RTN","IBCCC2",95,0)
U8 F J=1:1:3 I $P(IBND("U8"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U8"),"^",J)=$P(IBND("U8"),"^",J)
"RTN","IBCCC2",96,0)
 Q
"RTN","IBCCC2",97,0)
UF31 F J=3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
"RTN","IBCCC2",98,0)
 Q
"RTN","IBCCC2",99,0)
UF32 F J=1:1:3 I $P(IBND("UF32"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF32"),"^",J)=$P(IBND("UF32"),"^",J)
"RTN","IBCCC2",100,0)
 Q
"RTN","IBCCC2",101,0)
C F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
"RTN","IBCCC2",102,0)
 I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
"RTN","IBCCC2",103,0)
 Q
"RTN","IBCCC2",104,0)
M F J=1:1:9,11:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
"RTN","IBCCC2",105,0)
 Q
"RTN","IBCCC2",106,0)
CC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",107,0)
 S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",108,0)
OP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",109,0)
 S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",110,0)
 Q
"RTN","IBCCC2",111,0)
OC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",112,0)
 S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",113,0)
 Q
"RTN","IBCCC2",114,0)
OT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",115,0)
 S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",116,0)
 Q
"RTN","IBCCC2",117,0)
CV ; Don't copy value codes from inpatient inst to inpatient prof bills
"RTN","IBCCC2",118,0)
 I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
"RTN","IBCCC2",119,0)
 S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",120,0)
 S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",121,0)
 Q
"RTN","IBCCC2",122,0)
RC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",123,0)
 S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:16 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
"RTN","IBCCC2",124,0)
 Q
"RTN","IBCCC2",125,0)
CP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",126,0)
 I +$G(IBNOCPT) Q
"RTN","IBCCC2",127,0)
 S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP1")=$G(^(1)),IBND("CP2")=$G(^(2)),IBND("CP-AUX")=$G(^("AUX")) D
"RTN","IBCCC2",128,0)
 . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
"RTN","IBCCC2",129,0)
 . ; IB*2.0*432 add new 1 node
"RTN","IBCCC2",130,0)
 . ; MRD;IB*2.0*516 - Added pieces 7 & 8 (NDC, Units) to 1-node.
"RTN","IBCCC2",131,0)
 . F K=1:1:8 S $P(^DGCR(399,IBIFN,I,J,1),"^",K)=$P(IBND("CP1"),"^",K)
"RTN","IBCCC2",132,0)
 . ; WCJ;IB*2.0*577 - Added piece 1 (UNITS/BASIS OF MEASUREMENT) to 2-node.
"RTN","IBCCC2",133,0)
 . F K=1:1:1 S $P(^DGCR(399,IBIFN,I,J,2),"^",K)=$P(IBND("CP2"),"^",K)
"RTN","IBCCC2",134,0)
 . ; esg - 11/2/06 - IB*2*348 - 50.09 field was added - AUX piece [9]
"RTN","IBCCC2",135,0)
 . I IBND("CP-AUX")'="" F K=1:1:9 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
"RTN","IBCCC2",136,0)
 . ; IB*2.0*432 add new LNPRV multiple
"RTN","IBCCC2",137,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"LNPRV",0)) S ^DGCR(399,IBIFN,I,J,"LNPRV",0)=^DGCR(399,IBIFN1,I,J,"LNPRV",0) D
"RTN","IBCCC2",138,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"LNPRV",K)) Q:'K  D
"RTN","IBCCC2",139,0)
 ... S ^DGCR(399,IBIFN,I,J,"LNPRV",K,0)=^DGCR(399,IBIFN1,I,J,"LNPRV",K,0)
"RTN","IBCCC2",140,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
"RTN","IBCCC2",141,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
"RTN","IBCCC2",142,0)
 ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier from inst to prof bill
"RTN","IBCCC2",143,0)
 ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
"RTN","IBCCC2",144,0)
 . ;JWS;IB*2.0*592;add new Dental claim form fields
"RTN","IBCCC2",145,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"DEN")) S ^DGCR(399,IBIFN,I,J,"DEN")=^DGCR(399,IBIFN1,I,J,"DEN")
"RTN","IBCCC2",146,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"DEN1",0)) S ^DGCR(399,IBIFN,I,J,"DEN1",0)=^DGCR(399,IBIFN1,I,J,"DEN1",0) D
"RTN","IBCCC2",147,0)
 .. N IBDL
"RTN","IBCCC2",148,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"DEN1",K)) Q:'K  D
"RTN","IBCCC2",149,0)
 ... S ^DGCR(399,IBIFN,I,J,"DEN1",K,0)=^DGCR(399,IBIFN1,I,J,"DEN1",K,0)
"RTN","IBCCC2",150,0)
 ... ;JWS;IB*2.0*592;If DENT file 228.2 link, remove it from old invoice.
"RTN","IBCCC2",151,0)
 ... S IBDL=$P($G(^DGCR(399,IBIFN1,I,J,"DEN1",K,0)),"^",7)
"RTN","IBCCC2",152,0)
 ... I IBDL K ^DGCR(399,"ADT",IBDL,IBIFN1)
"RTN","IBCCC2",153,0)
 . ;JRA;IB*2.0*608 Add CMN info - Node 'CMN-10126' contains data specific to only the CMS-10126 form, node 'CMN-484' contains data specific to
"RTN","IBCCC2",154,0)
 . ; only the CMN-484 form, and node 'CMN' contains data common to both forms.
"RTN","IBCCC2",155,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"CMN")) S ^DGCR(399,IBIFN,I,J,"CMN")=^DGCR(399,IBIFN1,I,J,"CMN")
"RTN","IBCCC2",156,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"CMN-10126")) S ^DGCR(399,IBIFN,I,J,"CMN-10126")=^DGCR(399,IBIFN1,I,J,"CMN-10126")
"RTN","IBCCC2",157,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"CMN-484")) S ^DGCR(399,IBIFN,I,J,"CMN-484")=^DGCR(399,IBIFN1,I,J,"CMN-484")
"RTN","IBCCC2",158,0)
CP1 S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
"RTN","IBCCC2",159,0)
 I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D FILE
"RTN","IBCCC2",160,0)
 I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D FILE
"RTN","IBCCC2",161,0)
 I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D FILE
"RTN","IBCCC2",162,0)
 Q
"RTN","IBCCC2",163,0)
 ;
"RTN","IBCCC2",164,0)
PRV ; Copy providers for cloned claim
"RTN","IBCCC2",165,0)
 N Z,Z0,CNT
"RTN","IBCCC2",166,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19),CNT=0
"RTN","IBCCC2",167,0)
 S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
"RTN","IBCCC2",168,0)
 . I $$GETNPI^IBCEF73A($P(^DGCR(399,IBIFN1,I,J,0),U,2))="" Q  ;Don't file provider if no NPI - IB*2*516
"RTN","IBCCC2",169,0)
 . S CNT=CNT+1,^DGCR(399,IBIFN,I,CNT,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",170,0)
 . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,CNT,0),U)=(Z0+1)
"RTN","IBCCC2",171,0)
 I CNT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0),$P(^DGCR(399,IBIFN,I,0),U,3)=CNT,$P(^DGCR(399,IBIFN,I,0),U,4)=CNT
"RTN","IBCCC2",172,0)
 Q
"RTN","IBCCC2",173,0)
 ;
"RTN","IBCCC2",174,0)
U9 ; Added for new data elements in IB*2.0*447 BI
"RTN","IBCCC2",175,0)
 M ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",176,0)
 Q
"RTN","IBCCC2",177,0)
 ;
"RTN","IBCCC2",178,0)
COB S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
"RTN","IBCCC2",179,0)
 Q
"RTN","IBCCC2",180,0)
 ;
"RTN","IBCCC2",181,0)
FILE N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
"RTN","IBCCC2",182,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCC2",183,0)
 S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
"RTN","IBCCC2",184,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
"RTN","IBCCC2",185,0)
 K DGPROCDT
"RTN","IBCCC2",186,0)
 Q
"RTN","IBCCC2",187,0)
 ;
"RTN","IBCCC2",188,0)
INDEX ;index entire file (set logic)
"RTN","IBCCC2",189,0)
 N IBMAED D SAVERC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",190,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
"RTN","IBCCC2",191,0)
 D RESTRC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",192,0)
 Q
"RTN","IBCCC2",193,0)
 ;
"RTN","IBCCC2",194,0)
PRIOR(IBIFN) ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
"RTN","IBCCC2",195,0)
 N IBSEQ,IBSEQN,IBM1,I,IBIFN1
"RTN","IBCCC2",196,0)
 S IBSEQ=$$COB^IBCEF(IBIFN)
"RTN","IBCCC2",197,0)
 S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
"RTN","IBCCC2",198,0)
 ;
"RTN","IBCCC2",199,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
"RTN","IBCCC2",200,0)
 F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
"RTN","IBCCC2",201,0)
 Q
"RTN","IBCCC2",202,0)
 ;
"RTN","IBCCC2",203,0)
COBCHG(IBIFN,IBINS,IBCOB) ; Make changes for a new COB payer for bill
"RTN","IBCCC2",204,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCCC2",205,0)
 ; IBINS = ien of bill's current insurance (optional)
"RTN","IBCCC2",206,0)
 ; IBCOB = array subscripted by node,piece of COB data field change
"RTN","IBCCC2",207,0)
 ;
"RTN","IBCCC2",208,0)
 N I,IBFRMTYP,IBTAXLST
"RTN","IBCCC2",209,0)
 ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
"RTN","IBCCC2",210,0)
 F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
"RTN","IBCCC2",211,0)
 ;
"RTN","IBCCC2",212,0)
 I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
"RTN","IBCCC2",213,0)
 . ;MCRWNR is current insurance ... move payer only
"RTN","IBCCC2",214,0)
 . N IBCOBN,IBX
"RTN","IBCCC2",215,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCCC2",216,0)
 . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
"RTN","IBCCC2",217,0)
 . S IBCOB("M1",IBCOBN+4)=IBIFN
"RTN","IBCCC2",218,0)
 . S IBCOB("TX",1)="",IBCOB("TX",2)=""
"RTN","IBCCC2",219,0)
 . S IBX=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCCC2",220,0)
 . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
"RTN","IBCCC2",221,0)
 . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
"RTN","IBCCC2",222,0)
 . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
"RTN","IBCCC2",223,0)
 . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
"RTN","IBCCC2",224,0)
 . D PRIOR(IBIFN)
"RTN","IBCCC2",225,0)
 . Q
"RTN","IBCCC2",226,0)
 ;
"RTN","IBCCC2",227,0)
 ;reset fields for next Sequence Payer
"RTN","IBCCC2",228,0)
 F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
"RTN","IBCCC2",229,0)
 ;
"RTN","IBCCC2",230,0)
 ; IB*2.0*211
"RTN","IBCCC2",231,0)
 ; save off Form Type
"RTN","IBCCC2",232,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC2",233,0)
 ; Save off Taxonomies for providers.
"RTN","IBCCC2",234,0)
 S I=0 F  S I=$O(^DGCR(399,IBIFN,"PRV",I)) Q:'I  S IBTAXLST(I)=$P($G(^DGCR(399,IBIFN,"PRV",I,0)),U,15)
"RTN","IBCCC2",235,0)
 ;
"RTN","IBCCC2",236,0)
 ; fire xrefs set logic
"RTN","IBCCC2",237,0)
 D INDEX
"RTN","IBCCC2",238,0)
 ;
"RTN","IBCCC2",239,0)
 ; Restore Form Type if changed, but don't restore Form Type if
"RTN","IBCCC2",240,0)
 ;   creating CMS-1500 claim from CTCOPY1^IBCCCB
"RTN","IBCCC2",241,0)
 I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D ^DIE
"RTN","IBCCC2",242,0)
 ;
"RTN","IBCCC2",243,0)
 ; Restore Claim MRA Status field since triggers in fields 101 & 102
"RTN","IBCCC2",244,0)
 ;   will overwrite the correct value when processing the MRA/EOB.
"RTN","IBCCC2",245,0)
 ; If we're processing the MRA/EOB, then a valid MRA has been received.
"RTN","IBCCC2",246,0)
 I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
"RTN","IBCCC2",247,0)
 ;
"RTN","IBCCC2",248,0)
 ; Only if cloning, then restore Taxonomies in fields 243 and 244 and 252.
"RTN","IBCCC2",249,0)
 I '$G(IBINS),'$G(IBPRCOB) D
"RTN","IBCCC2",250,0)
 . S I=$P($G(IBND("U3")),U,2)
"RTN","IBCCC2",251,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,2) D
"RTN","IBCCC2",252,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="243////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",253,0)
 . ;
"RTN","IBCCC2",254,0)
 . S I=$P($G(IBND("U3")),U,3)
"RTN","IBCCC2",255,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,3) D
"RTN","IBCCC2",256,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="244////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",257,0)
 . ;
"RTN","IBCCC2",258,0)
 . S I=$P($G(IBND("U3")),U,11)
"RTN","IBCCC2",259,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,11) D
"RTN","IBCCC2",260,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="252////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",261,0)
 . Q
"RTN","IBCCC2",262,0)
 ;
"RTN","IBCCC2",263,0)
 ; Restore Taxonomies in field .15 in sub-file 399.0222.
"RTN","IBCCC2",264,0)
 S IBTAXLST=0 F  S IBTAXLST=$O(IBTAXLST(IBTAXLST)) Q:'IBTAXLST  D
"RTN","IBCCC2",265,0)
 . S I=IBTAXLST(IBTAXLST)
"RTN","IBCCC2",266,0)
 . I I=$P($G(^DGCR(399,IBIFN,"PRV",IBTAXLST,0)),U,15) Q  ; No change
"RTN","IBCCC2",267,0)
 . N DA,DIE,DR
"RTN","IBCCC2",268,0)
 . S DA(1)=IBIFN,DA=IBTAXLST
"RTN","IBCCC2",269,0)
 . S DIE="^DGCR(399,"_DA(1)_",""PRV"",",DR=".15////"_$S(I'="":I,1:"@")
"RTN","IBCCC2",270,0)
 . D ^DIE
"RTN","IBCCC2",271,0)
 . Q
"RTN","IBCCC2",272,0)
 ;
"RTN","IBCCC2",273,0)
 K IBCOB("TX")
"RTN","IBCCC2",274,0)
 Q
"RTN","IBCCC2",275,0)
 ;
"RTN","IBCCC2",276,0)
SAVERC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",277,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",278,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",279,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",280,0)
 F  S IBCNT=$O(^DGCR(399,IBIFN,"RC",IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",281,0)
 . S IBMAED(IBCNT)=$P($G(^DGCR(399,IBIFN,"RC",IBCNT,0)),U,16)
"RTN","IBCCC2",282,0)
 Q
"RTN","IBCCC2",283,0)
 ;
"RTN","IBCCC2",284,0)
RESTRC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node after re-indexing.
"RTN","IBCCC2",285,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",286,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",287,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",288,0)
 F  S IBCNT=$O(IBMAED(IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",289,0)
 . S $P(^DGCR(399,IBIFN,"RC",IBCNT,0),U,16)=IBMAED(IBCNT)
"RTN","IBCCC2",290,0)
 Q
"RTN","IBCE837B")
0^32^B4349124^B3184659
"RTN","IBCE837B",1,0)
IBCE837B ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION (cont) ;24-APR-01
"RTN","IBCE837B",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,197,320,608**;21-MAR-94;Build 90
"RTN","IBCE837B",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCE837B",4,0)
 ;
"RTN","IBCE837B",5,0)
QTXMT(IBSITE8) ; Run now or queue EDI bill transmit (part of nightly job)
"RTN","IBCE837B",6,0)
 ; IBSITE8 = the '8' node of the site parameters file (350.9)
"RTN","IBCE837B",7,0)
 I $P(IBSITE8,U,6)="" D
"RTN","IBCE837B",8,0)
 . D EN1("",1)
"RTN","IBCE837B",9,0)
 E  D
"RTN","IBCE837B",10,0)
 . N Z,Z0
"RTN","IBCE837B",11,0)
 . F Z=1:1:4 S Z0=$P($P(IBSITE8,U,6),";",Z) Q:Z0=""  D
"RTN","IBCE837B",12,0)
 .. S IBQDT=$S($E(($$NOW^XLFDT()#1*10000\1)_"0000",1,4)>Z0:$$FMADD^XLFDT(DT,1),1:DT)_"."_Z0  ; If time to queue is after the current time, queue for the next day
"RTN","IBCE837B",13,0)
 .. D EN1("",1,+IBQDT)
"RTN","IBCE837B",14,0)
 Q
"RTN","IBCE837B",15,0)
 ;
"RTN","IBCE837B",16,0)
EN1(IBZTSK,IBNOASK,IBQDT,IBABORT,IBRSBTST) ;Txmit 837's for bills waiting transmission
"RTN","IBCE837B",17,0)
 ; Pass IBZTSK by ref to get task # if job is tasked
"RTN","IBCE837B",18,0)
 ; IBNOASK = flag: 0 = ask to queue,  1 = no ask to queue
"RTN","IBCE837B",19,0)
 ; IBQDT = if IBNOASK=1, this can be the date/time to queue the job
"RTN","IBCE837B",20,0)
 ; Pass IBABORT by reference to determine if user aborted process
"RTN","IBCE837B",21,0)
 ;
"RTN","IBCE837B",22,0)
 ; IBRSBTST = 1 /IB*2*608 (vd) Instituted this variable for US2486 to indicate
"RTN","IBCE837B",23,0)
 ;                  a claim is being resubmitted and should be handled special
"RTN","IBCE837B",24,0)
 ;                  concerning the COB, OFFSET, PRIOR PAYMENTS calculation by the
"RTN","IBCE837B",25,0)
 ;                  OUTPUT FORMATTER. This is for "TEST" only.
"RTN","IBCE837B",26,0)
 ;
"RTN","IBCE837B",27,0)
 N Z S Z=$O(^IBE(353,"B","IB 837 TRANSMISSION",0)),Z=$S($P($G(^IBE(353,+Z,2)),U,8):$P(^(2),U,8),1:Z)
"RTN","IBCE837B",28,0)
 I Z D
"RTN","IBCE837B",29,0)
 . ;/IB*2*608 (vd) - US2486 added the parameter IBRSBTST to the following 2 lines.
"RTN","IBCE837B",30,0)
 . I $D(^TMP("IBRESUBMIT",$J))!($G(IBNOASK)) D FORM^IBCEFG7(Z,$P($G(^IBE(350.9,1,8)),U),+$G(IBNOASK),$S($G(IBNOASK):$G(IBQDT),1:""),.IBZTSK,.IBABORT,$G(IBRSBTST)) Q
"RTN","IBCE837B",31,0)
 . D FORM^IBCEFG7(Z,$P($G(^IBE(350.9,1,8)),U),+$G(IBNOASK),$S($G(IBNOASK):$G(IBQDT),1:""),"",.IBABORT,$G(IBRSBTST))
"RTN","IBCE837B",32,0)
 Q
"RTN","IBCEF11")
0^10^B100824598^B92999922
"RTN","IBCEF11",1,0)
IBCEF11 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371,432,447,473,516,577,592,608**;21-MAR-94;Build 90
"RTN","IBCEF11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF11",4,0)
 ;
"RTN","IBCEF11",5,0)
BOX24D(A,IB) ; Returns the lines for boxes 19-24 of the CMS-1500 display
"RTN","IBCEF11",6,0)
 ; IB = flag is 1 if only box 24 is needed
"RTN","IBCEF11",7,0)
 Q $S('$G(IB):"36",1:"44")_"^55"
"RTN","IBCEF11",8,0)
 ;
"RTN","IBCEF11",9,0)
RCBOX() ; Returns the lines for revenue code boxes of the UB-04 display
"RTN","IBCEF11",10,0)
 Q "19^41"
"RTN","IBCEF11",11,0)
 ;
"RTN","IBCEF11",12,0)
OUTPT(IBIFN,IBPRINT) ; Returns an array of service line data from
"RTN","IBCEF11",13,0)
 ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
"RTN","IBCEF11",14,0)
 ; IBPRINT = print flag  1: return print fields
"RTN","IBCEF11",15,0)
 ;                       0: return EDI fields
"RTN","IBCEF11",16,0)
 ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
"RTN","IBCEF11",17,0)
 ;   if it already exists. If not, it builds it from N-DIAGNOSES element
"RTN","IBCEF11",18,0)
 ;
"RTN","IBCEF11",19,0)
 ; For EDI call: Returns IBXDATA(n)=
"RTN","IBCEF11",20,0)
 ;   begin date(YYYYMMDD) ^ end date(YYYYMMDD) ^ pos ^ tos ^
"RTN","IBCEF11",21,0)
 ;   proc code/revenue code - if no procedure (not the pointers) ^
"RTN","IBCEF11",22,0)
 ;   type of code ^ dx pointer(s ) ^ unit charge ^ units ^ modifiers separated by ;
"RTN","IBCEF11",23,0)
 ;   ^ purchased charge amount ^ anesthesia minutes ^ emergency indicator ^
"RTN","IBCEF11",24,0)
 ;   lab-type service flag ^ NDC ^ Units/Quantity ^ Unit/Basis of Measurement (vd/IB*2*577)
"RTN","IBCEF11",25,0)
 ;
"RTN","IBCEF11",26,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF11",27,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF11",28,0)
 ;      line in the first '^' piece followed by the '0' node data of file
"RTN","IBCEF11",29,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF11",30,0)
 ;       COB = COB sequence # of adjustment's ins co, m = seq #
"RTN","IBCEF11",31,0)
 ;         -- AND --
"RTN","IBCEF11",32,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF11",33,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEF11",34,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEF11",35,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF11",36,0)
 ;
"RTN","IBCEF11",37,0)
 ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
"RTN","IBCEF11",38,0)
 ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
"RTN","IBCEF11",39,0)
 ;   or procedure code(not the pointer)^ ... refer to EDI call results
"RTN","IBCEF11",40,0)
 ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
"RTN","IBCEF11",41,0)
 ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
"RTN","IBCEF11",42,0)
 ;
"RTN","IBCEF11",43,0)
 ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
"RTN","IBCEF11",44,0)
 ;      -- AND --
"RTN","IBCEF11",45,0)
 ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
"RTN","IBCEF11",46,0)
 ;                   ^chrge^ien of file 362.4^NDC format
"RTN","IBCEF11",47,0)
 ;           If line references a prescription
"RTN","IBCEF11",48,0)
 ;      -- AND --
"RTN","IBCEF11",49,0)
 ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
"RTN","IBCEF11",50,0)
 ;      -- AND --
"RTN","IBCEF11",51,0)
 ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
"RTN","IBCEF11",52,0)
 ;
"RTN","IBCEF11",53,0)
 ; Also returns IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF11",54,0)
 ;
"RTN","IBCEF11",55,0)
 N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
"RTN","IBCEF11",56,0)
 ;
"RTN","IBCEF11",57,0)
 K ^TMP($J,"IBITEM")
"RTN","IBCEF11",58,0)
 S ^TMP($J,"IBITEM")=""
"RTN","IBCEF11",59,0)
 ; Build diagnosis array if not already built
"RTN","IBCEF11",60,0)
 I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
"RTN","IBCEF11",61,0)
 .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCEF11",62,0)
 .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,$P(IBXDATA(Z),U,2))=Z
"RTN","IBCEF11",63,0)
 ;
"RTN","IBCEF11",64,0)
 S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
"RTN","IBCEF11",65,0)
 S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
"RTN","IBCEF11",66,0)
 I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
"RTN","IBCEF11",67,0)
 I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
"RTN","IBCEF11",68,0)
 ; Returns IBFLD(24) = begin date ^ end date ^ pos ^ tos ^
"RTN","IBCEF11",69,0)
 ;     proc/bedsection/revenue code ^ dx pointer ^ unit charge ^
"RTN","IBCEF11",70,0)
 ;     units ^ modifiers ^ purchased charge amount ^ anesthesia minutes ^
"RTN","IBCEF11",71,0)
 ;     emergency indicator ^ soft pointer to PROCEDURES multiple in file 399 ^
"RTN","IBCEF11",72,0)
 ;     NDC ^ Units
"RTN","IBCEF11",73,0)
 ;         IBFLD(24,n,type,item)=""
"RTN","IBCEF11",74,0)
 ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
"RTN","IBCEF11",75,0)
 ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
"RTN","IBCEF11",76,0)
 ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
"RTN","IBCEF11",77,0)
 ;                            (can be null)
"RTN","IBCEF11",78,0)
 ;
"RTN","IBCEF11",79,0)
 D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
"RTN","IBCEF11",80,0)
 ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
"RTN","IBCEF11",81,0)
 I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
"RTN","IBCEF11",82,0)
 . N IBRXH
"RTN","IBCEF11",83,0)
 . S IBRXH=IBRX(IBRX,IBRX0)
"RTN","IBCEF11",84,0)
 . ; **IB*2.0*432** added _U_$P(IBRXH,U,9) (Rx Date) to Output Formatter
"RTN","IBCEF11",85,0)
 . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U,6)_U_+IBRXH_U_$P(IBRXH,U,8)_U_$P(IBRXH,U,9)
"RTN","IBCEF11",86,0)
 K IBRX
"RTN","IBCEF11",87,0)
 ;
"RTN","IBCEF11",88,0)
 ; for EDI, remove any $0 line items from the IBFLD array before 
"RTN","IBCEF11",89,0)
 ; dropping down into the next loop (IB*2*371)
"RTN","IBCEF11",90,0)
 ; Start IB*2.0*447 BI - Code removed to allow 0 dollars to print.
"RTN","IBCEF11",91,0)
 ;I '$G(IBPRINT) D
"RTN","IBCEF11",92,0)
 ;. NEW IBZ,IBI,Z
"RTN","IBCEF11",93,0)
 ;. M IBZ=IBFLD K IBFLD
"RTN","IBCEF11",94,0)
 ;. S (IBI,Z)=0
"RTN","IBCEF11",95,0)
 ;. F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",96,0)
 ;.. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
"RTN","IBCEF11",97,0)
 ;.. S Z=Z+1
"RTN","IBCEF11",98,0)
 ;.. M IBFLD(24,Z)=IBZ(24,IBI)
"RTN","IBCEF11",99,0)
 ;.. S IBFLD(24)=Z
"RTN","IBCEF11",100,0)
 ;.. Q
"RTN","IBCEF11",101,0)
 ;. Q
"RTN","IBCEF11",102,0)
 ; End IB*2.0*447 BI
"RTN","IBCEF11",103,0)
 ;
"RTN","IBCEF11",104,0)
 S IBI=0
"RTN","IBCEF11",105,0)
 F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",106,0)
 . S IBRX1=0
"RTN","IBCEF11",107,0)
 . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
"RTN","IBCEF11",108,0)
 . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
"RTN","IBCEF11",109,0)
 . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
"RTN","IBCEF11",110,0)
 . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
"RTN","IBCEF11",111,0)
 . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
"RTN","IBCEF11",112,0)
 . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim,
"RTN","IBCEF11",113,0)
 . ; pieces 14 & 15 of IBFLD, pieces 15 & 16 of IBXDATA. Print
"RTN","IBCEF11",114,0)
 . ; in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",115,0)
 . ;S $P(IBXDATA(IBI),U,15,16)=$P(IBFLD(24,IBI),U,14,15)
"RTN","IBCEF11",116,0)
 . ;I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" UN"_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",117,0)
 . ; vd/IB*2*577 - Added Unit/Basis of Measurement to line level of claim,
"RTN","IBCEF11",118,0)
 . ; piece 16 of IBFLD, piece 17 of IBXDATA.
"RTN","IBCEF11",119,0)
 . ; Print in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",120,0)
 . S $P(IBXDATA(IBI),U,15,17)=$P(IBFLD(24,IBI),U,14,16)
"RTN","IBCEF11",121,0)
 . I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" "_$P(IBFLD(24,IBI),U,16)_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",122,0)
 . ;
"RTN","IBCEF11",123,0)
 . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
"RTN","IBCEF11",124,0)
 .. S IBRX1=1
"RTN","IBCEF11",125,0)
 .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text allowed for rx's
"RTN","IBCEF11",126,0)
 .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
"RTN","IBCEF11",127,0)
 ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
"RTN","IBCEF11",128,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2),.01)),1,30)
"RTN","IBCEF11",129,0)
 ... K IBRX1(+IBFLD(24,IBI,"RX"))
"RTN","IBCEF11",130,0)
 ... ; No soft link - must find the first Rx with the same charge
"RTN","IBCEF11",131,0)
 .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
"RTN","IBCEF11",132,0)
 ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",133,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX) Q
"RTN","IBCEF11",134,0)
 ... Q
"RTN","IBCEF11",135,0)
 .. Q
"RTN","IBCEF11",136,0)
 . ;
"RTN","IBCEF11",137,0)
 . ; MRD;IB*2.0*516 - If additional service line comments to appear in
"RTN","IBCEF11",138,0)
 . ; Box 24, concatenate to front if something (NDC) is already there.
"RTN","IBCEF11",139,0)
 . I $G(IBFLD(24,IBI,"AUX"))'="" D
"RTN","IBCEF11",140,0)
 .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" D
"RTN","IBCEF11",141,0)
 ... I $G(IBXDATA(IBI,"TEXT"))'="" S IBXDATA(IBI,"TEXT")=$E($P(IBFLD(24,IBI,"AUX"),U,8)_" "_IBXDATA(IBI,"TEXT"),1,59)
"RTN","IBCEF11",142,0)
 ... E  S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8)
"RTN","IBCEF11",143,0)
 ... S $P(IBFLD(24,IBI,"AUX"),U,8)=""
"RTN","IBCEF11",144,0)
 ... Q
"RTN","IBCEF11",145,0)
 .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
"RTN","IBCEF11",146,0)
 .. Q
"RTN","IBCEF11",147,0)
 . ;
"RTN","IBCEF11",148,0)
 . ;JWS;IB*2.0*592:US131
"RTN","IBCEF11",149,0)
 . I $G(IBFLD(24,IBI,"DEN"))'="" S IBXDATA(IBI,"DEN")=IBFLD(24,IBI,"DEN")
"RTN","IBCEF11",150,0)
 . I $G(IBFLD(24,IBI,"DEND"))'="" S IBXDATA(IBI,"DEND")=$P(IBFLD(24,IBI,"DEND"),"^",4)
"RTN","IBCEF11",151,0)
 . I $O(IBFLD(24,IBI,"DEN1",0)) M IBXDATA(IBI,"DEN1")=IBFLD(24,IBI,"DEN1")
"RTN","IBCEF11",152,0)
 . ;end - ;JWS;IB*2.0*592:US131
"RTN","IBCEF11",153,0)
 . I $G(IBPRINT) D
"RTN","IBCEF11",154,0)
 .. ; START IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",155,0)
 .. ; I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",156,0)
 .. I $P(IBXDATA(IBI),U,8)="",'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",157,0)
 ... ; END IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",158,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",159,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
"RTN","IBCEF11",160,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",161,0)
 ... Q
"RTN","IBCEF11",162,0)
 .. ;
"RTN","IBCEF11",163,0)
 .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
"RTN","IBCEF11",164,0)
 ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
"RTN","IBCEF11",165,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",166,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
"RTN","IBCEF11",167,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",168,0)
 ... Q
"RTN","IBCEF11",169,0)
 .. ;
"RTN","IBCEF11",170,0)
 .. S IBRX=$G(IBXDATA(IBI,"RX"))
"RTN","IBCEF11",171,0)
 .. I IBRX'="" D  ;Format Rx detail
"RTN","IBCEF11",172,0)
 ... N Z
"RTN","IBCEF11",173,0)
 ... S Z=$P(IBRX,U)
"RTN","IBCEF11",174,0)
 ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
"RTN","IBCEF11",175,0)
 ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: "_$P(IBRX,U,7)
"RTN","IBCEF11",176,0)
 ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
"RTN","IBCEF11",177,0)
 ... Q
"RTN","IBCEF11",178,0)
 .. Q
"RTN","IBCEF11",179,0)
 . S IBXDATA(IBI,"CPLNK")=$P(IBFLD(24,IBI),U,13)
"RTN","IBCEF11",180,0)
 . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
"RTN","IBCEF11",181,0)
 . Q
"RTN","IBCEF11",182,0)
 ;
"RTN","IBCEF11",183,0)
 I $G(IBPRINT) D
"RTN","IBCEF11",184,0)
 . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
"RTN","IBCEF11",185,0)
 .. S IBI=+$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",186,0)
 .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
"RTN","IBCEF11",187,0)
 .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBRX),U,3)
"RTN","IBCEF11",188,0)
 .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",189,0)
 .. S IBXDATA(IBI,"ARX")=""
"RTN","IBCEF11",190,0)
 .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",191,0)
 .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX)
"RTN","IBCEF11",192,0)
 .. Q
"RTN","IBCEF11",193,0)
 . Q
"RTN","IBCEF11",194,0)
 ;
"RTN","IBCEF11",195,0)
 I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
"RTN","IBCEF11",196,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCEF11",197,0)
 Q
"RTN","IBCEF11",198,0)
 ;
"RTN","IBCEF11",199,0)
ISLAB(LDATA) ; Returns 0/1 if line item data indicates the item is a lab (1)
"RTN","IBCEF11",200,0)
 ; 'LAB' is defined here as type of service = 5
"RTN","IBCEF11",201,0)
 Q $E($P(LDATA,U,4))="5"
"RTN","IBCEF11",202,0)
 ;
"RTN","IBCEF11",203,0)
FMT(DATA,DLEN,FLEN) ; Returns a string in DATA with a max length of DLEN
"RTN","IBCEF11",204,0)
 ;  and a field length of FLEN
"RTN","IBCEF11",205,0)
 Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
"RTN","IBCEF11",206,0)
 ;
"RTN","IBCEF11",207,0)
DATE(X,DEL) ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
"RTN","IBCEF11",208,0)
 S DEL=$G(DEL)
"RTN","IBCEF11",209,0)
 S X=$$DATE^IBCF2(X,1,1)
"RTN","IBCEF11",210,0)
 I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
"RTN","IBCEF11",211,0)
 Q X
"RTN","IBCEF11",212,0)
 ;
"RTN","IBCEF11",213,0)
BATCH() ; Sets up record for and stores/returns the next batch number
"RTN","IBCEF11",214,0)
 N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
"RTN","IBCEF11",215,0)
 ;Keep latest batch number for view/print edi bill extract data option
"RTN","IBCEF11",216,0)
 I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
"RTN","IBCEF11",217,0)
 ;Check for batch resubmit - if yes, use same number as original batch
"RTN","IBCEF11",218,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
"RTN","IBCEF11",219,0)
 L +^IBA(364.1,0):5 I '$T Q 0
"RTN","IBCEF11",220,0)
 S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",221,0)
 I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
"RTN","IBCEF11",222,0)
 . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
"RTN","IBCEF11",223,0)
 . S NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",224,0)
 F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
"RTN","IBCEF11",225,0)
 K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
"RTN","IBCEF11",226,0)
 L -^IBA(364.1,0)
"RTN","IBCEF11",227,0)
BATCHQ Q NUM
"RTN","IBCEF11",228,0)
 ;
"RTN","IBCEF11",229,0)
GETLDAT(IBXIEN) ; Extract data for 837 transmission LDAT record
"RTN","IBCEF11",230,0)
 ; IBXIEN - ien in file 399
"RTN","IBCEF11",231,0)
 ; Sets up IBXSAVE("LDAT",n) array:
"RTN","IBCEF11",232,0)
 ; Attachment report type ^ Attachment report transmission code ^ Attachment control number ^ 
"RTN","IBCEF11",233,0)
 ; OB Anesthesia Additional Units ^ Purchase Service Provider ID ^ Purchase Service Amount ^
"RTN","IBCEF11",234,0)
 N CPIEN,FTYPE,IBXDATA,IDS,IBIDS,NODE1,PSAMNT,PSPID,Z,PCE1,LINE
"RTN","IBCEF11",235,0)
 I '+$G(IBXIEN) Q
"RTN","IBCEF11",236,0)
 K IBXSAVE("LDAT")
"RTN","IBCEF11",237,0)
 S FTYPE=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF11",238,0)
 ;JWS;IB*2.0*592; added Dental form
"RTN","IBCEF11",239,0)
 I FTYPE=2!(FTYPE=7) D OUTPT(IBXIEN,0)
"RTN","IBCEF11",240,0)
 I FTYPE=3 D HOS^IBCEF2(IBXIEN)
"RTN","IBCEF11",241,0)
 D ALLIDS^IBCEFP(IBXIEN,.IDS,1)
"RTN","IBCEF11",242,0)
 S (PSPID,PSAMNT)=""
"RTN","IBCEF11",243,0)
 ; IB*2.0*473/TAZ - Convert PROVIDER code to function call to PSID^IBCEFP
"RTN","IBCEF11",244,0)
 I $$SUB1OK^IBCEP8A(IBXIEN),(FTYPE=2) D
"RTN","IBCEF11",245,0)
 . D PSID^IBCEFP(IBXIEN,.IDS,.IBIDS)
"RTN","IBCEF11",246,0)
 . S PSPID=$G(IBIDS(0)) I PSPID="" S PSPID=$P($G(IBIDS(1)),U,1)
"RTN","IBCEF11",247,0)
 ;IB*2.0*473/TAZ - END
"RTN","IBCEF11",248,0)
 S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
"RTN","IBCEF11",249,0)
 . S CPIEN=+$G(IBXDATA(Z,"CPLNK")) ;I 'CPIEN Q
"RTN","IBCEF11",250,0)
 . I FTYPE=2,$$SUB1OK^IBCEP8A(IBXIEN) S PSAMNT=$$DOLLAR^IBCEFG1($P($G(IBXDATA(Z)),U,11))
"RTN","IBCEF11",251,0)
 . S (PCE1,NODE1)=""
"RTN","IBCEF11",252,0)
 . I CPIEN D
"RTN","IBCEF11",253,0)
 . . S NODE1=$G(^DGCR(399,IBXIEN,"CP",CPIEN,1))
"RTN","IBCEF11",254,0)
 . . S PCE1=$$GET1^DIQ(399.0304,CPIEN_","_IBXIEN_",",71)
"RTN","IBCEF11",255,0)
 . . Q
"RTN","IBCEF11",256,0)
 . ; MRD;IB*2.0*516 - Added addl. procedure description as piece 7 
"RTN","IBCEF11",257,0)
 . ; of IBXSAVE, which will exist only if the procedure ends in '99'
"RTN","IBCEF11",258,0)
 . ; or is an 'NOC/NOS' procedure.
"RTN","IBCEF11",259,0)
 . ;JWS;IB*2.0*592;do not include NOC description here for Dental claims
"RTN","IBCEF11",260,0)
 . S IBXSAVE("LDAT",Z)=PCE1_U_$P(NODE1,U,3)_U_$P(NODE1,U)_U_$P(NODE1,U,5)_U_$G(PSPID)_U_$G(PSAMNT)_U_$S(FTYPE=7:"",1:$P(NODE1,U,4))
"RTN","IBCEF11",261,0)
 . Q
"RTN","IBCEF11",262,0)
 Q
"RTN","IBCEF11",263,0)
 ;
"RTN","IBCEF11",264,0)
 ;/Beginning of IB*2.0*608 (US9) - vd
"RTN","IBCEF11",265,0)
LDAT ;
"RTN","IBCEF11",266,0)
 N Z K IBXDATA
"RTN","IBCEF11",267,0)
 S Z=0 F  S Z=$O(IBXSAVE("LDAT",Z)) Q:'Z  D
"RTN","IBCEF11",268,0)
 . S IBXDATA(Z)=Z D:Z>1 ID^IBCEF2(Z,"LDAT")
"RTN","IBCEF11",269,0)
 ;
"RTN","IBCEF11",270,0)
 I +$G(VC80) D
"RTN","IBCEF11",271,0)
 . S Z=$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",272,0)
 . D ID^IBCEF2(Z,"LDAT")
"RTN","IBCEF11",273,0)
 . D VC80L(IBXIEN,Z)  ; Process for 'SNF' claims & the last claim line
"RTN","IBCEF11",274,0)
 . S A=Z
"RTN","IBCEF11",275,0)
 . S IBXDATA(Z)=A
"RTN","IBCEF11",276,0)
 Q
"RTN","IBCEF11",277,0)
 ;
"RTN","IBCEF11",278,0)
VC80L(IBIFN,LN) ; Extracts the data for the "LDAT" record for VALUE CODE 80 Line item.
"RTN","IBCEF11",279,0)
 ; IBIFN = Claims internal id number
"RTN","IBCEF11",280,0)
 ;    LN = 
"RTN","IBCEF11",281,0)
 N VC80LN
"RTN","IBCEF11",282,0)
 S VC80LN=LN
"RTN","IBCEF11",283,0)
 S $P(IBXSAVE("LDAT",VC80LN),U,11)="6R"
"RTN","IBCEF11",284,0)
 S $P(IBXSAVE("LDAT",VC80LN),U,12)=VC80LN_"_"_$$GET1^DIQ(399,IBIFN_", ",.01)
"RTN","IBCEF11",285,0)
 Q
"RTN","IBCEF11",286,0)
 ;/Ending of IB*2.0*608 - vd
"RTN","IBCEF11",287,0)
 ;
"RTN","IBCEF2")
0^11^B140185497^B81532163
"RTN","IBCEF2",1,0)
IBCEF2 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;8/6/03 10:54am
"RTN","IBCEF2",2,0)
 ;;2.0;INTEGRATED BILLING;**52,85,51,137,232,155,296,349,403,400,432,488,461,547,592,608**;21-MAR-94;Build 90
"RTN","IBCEF2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF2",4,0)
 ;
"RTN","IBCEF2",5,0)
HOS(IBIFN) ; Extract rev codes for inst. episode into IBXDATA
"RTN","IBCEF2",6,0)
 ; Moved for space
"RTN","IBCEF2",7,0)
 D HOS^IBCEF22(IBIFN)
"RTN","IBCEF2",8,0)
 Q
"RTN","IBCEF2",9,0)
 ;
"RTN","IBCEF2",10,0)
OTHINS(IBIFN) ;Determine 'other insurance' node (I1,I2)
"RTN","IBCEF2",11,0)
 ; If primary bill, other ins is secondary
"RTN","IBCEF2",12,0)
 ; If sec or tert bill, other ins is primary
"RTN","IBCEF2",13,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",14,0)
 N Z
"RTN","IBCEF2",15,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",16,0)
 Q "I"_$S(Z=1:2,1:1)
"RTN","IBCEF2",17,0)
 ;
"RTN","IBCEF2",18,0)
OTHINS1(IBIFN) ; Returns the COB #'s of all 'other insurance' as a string
"RTN","IBCEF2",19,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",20,0)
 N IBC,Z
"RTN","IBCEF2",21,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",22,0)
 I Z=1 S IBC=$S($D(^DGCR(399,IBIFN,"I2")):$S($D(^DGCR(399,IBIFN,"I3")):23,1:2),1:"") ;Primary=>2 or 23
"RTN","IBCEF2",23,0)
 I Z=2 S IBC="1"_$S($D(^DGCR(399,IBIFN,"I3")):3,1:"") ;Secondary=>1 or 13
"RTN","IBCEF2",24,0)
 I Z=3 S IBC="12" ;Tertiary =>12
"RTN","IBCEF2",25,0)
OTHQ Q IBC
"RTN","IBCEF2",26,0)
 ;
"RTN","IBCEF2",27,0)
RECVR(IBIFN) ; Returns the V.A. internal routing id of the current ins
"RTN","IBCEF2",28,0)
 ; co for 837
"RTN","IBCEF2",29,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",30,0)
 N MCR,NUM,IBPH
"RTN","IBCEF2",31,0)
 ;JWS;IB*2.0*592:Dental form #7
"RTN","IBCEF2",32,0)
 S IBPH=$P("P^H^^^^DENTAL",U,$$FT^IBCEF(IBIFN)-1)
"RTN","IBCEF2",33,0)
 S NUM=$S($$FT^IBCEF(IBIFN)=7:IBPH,1:"ENVOY"_IBPH)
"RTN","IBCEF2",34,0)
 ; If rate type is CHAMPVA, send 'CHAMVA'
"RTN","IBCEF2",35,0)
 I $P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U)="CHAMPVA" S NUM="CHAMV"_IBPH
"RTN","IBCEF2",36,0)
 I NUM["ENVOY",$$MCRWNR^IBEFUNC(+$$CURR(IBIFN)) D
"RTN","IBCEF2",37,0)
 . ;JWS;IB*2.0*592:Dental form #7
"RTN","IBCEF2",38,0)
 . S MCR=$P("B^A^^^^B",U,$$FT^IBCEF(IBIFN)-1)    ; PART A/B for MEDICARE
"RTN","IBCEF2",39,0)
 . S NUM="PART"_MCR
"RTN","IBCEF2",40,0)
 Q NUM
"RTN","IBCEF2",41,0)
 ;
"RTN","IBCEF2",42,0)
ALLPAYID(IBIFN,IBXDATA,SEQ) ; Returns clearinghouse id for all (SEQ="")
"RTN","IBCEF2",43,0)
 ;  or a specific (SEQ=1,2,3) ins co's for 837 in IBXDATA(n) for bill ien
"RTN","IBCEF2",44,0)
 ;  IBIFN
"RTN","IBCEF2",45,0)
 ; EJK *296* Add IBMRA - MRA Claim type. 
"RTN","IBCEF2",46,0)
 ; EJK *296* Add IBEBI - Electronic Billing ID
"RTN","IBCEF2",47,0)
 ;
"RTN","IBCEF2",48,0)
 ;WCJ;IB*2.0*547 - added IBM2
"RTN","IBCEF2",49,0)
 ;N Z,Z0,Z1,A,IBM,IBINST,IBMCR,IBX,IBMRA,IBEBI
"RTN","IBCEF2",50,0)
 N Z,Z0,Z1,A,IBM,IBM2,IBINST,IBMCR,IBX,IBMRA,IBEBI
"RTN","IBCEF2",51,0)
 ;S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCEF2",52,0)
 S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M")),IBM2=$G(^DGCR(399,IBIFN,"M2"))
"RTN","IBCEF2",53,0)
 F Z=1:1:3 I $S('$G(SEQ):1,1:Z=SEQ) S Z0=$P(IBM,U,Z) I Z0 D  S:A'="" IBXDATA(Z)=A
"RTN","IBCEF2",54,0)
 . S A=""
"RTN","IBCEF2",55,0)
 . ;WCJ;IB*2.0*547
"RTN","IBCEF2",56,0)
 . I $P(IBM2,U,Z*2)]"" S A=$P(IBM2,U,Z*2) Q  ; grab new alternate payer IDs from bill if they exist
"RTN","IBCEF2",57,0)
 . ;
"RTN","IBCEF2",58,0)
 . S IBINST=($$FT^IBCEF(IBIFN)=3) ;Is bill UB-04?
"RTN","IBCEF2",59,0)
 . ; EJK *296* Get IBEBI based on Prof. or Inst. claim
"RTN","IBCEF2",60,0)
 . I IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,4)
"RTN","IBCEF2",61,0)
 . I 'IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,2)
"RTN","IBCEF2",62,0)
 . ;JWS;IB*2.0*592;Dental payer id;IA# 5292
"RTN","IBCEF2",63,0)
 . I $$FT^IBCEF(IBIFN)=7 S IBEBI=$P($G(^DIC(36,Z0,3)),U,15)
"RTN","IBCEF2",64,0)
 . S IBEBI=$$UP^XLFSTR(IBEBI)
"RTN","IBCEF2",65,0)
 . ; EJK *296* If this is a Medicare claim, it may be printed or transmitted. 
"RTN","IBCEF2",66,0)
 . S IBMRA=$$MRASEC^IBCEF4(IBIFN)   ;Is claim 2ndary to an MRA? 
"RTN","IBCEF2",67,0)
 . S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN),Z1=$G(^DGCR(399,IBIFN,"TX"))
"RTN","IBCEF2",68,0)
 . Q:$P(Z1,U,8)=1!$S('$P(Z1,U,9):0,1:$$MRASEC^IBCEF4(IBIFN))  ;Force local prnt
"RTN","IBCEF2",69,0)
 . ;JWS;IB*2.0*592;9/1/17 add Dental Payer ID;IA# 5292
"RTN","IBCEF2",70,0)
 . S A=$S($P(Z1,U,8)'=2:$P($G(^DIC(36,Z0,3)),U,$S(IBINST:4,$$FT^IBCEF(IBIFN)=7:15,1:2)),1:"")
"RTN","IBCEF2",71,0)
 . S A=$$UP^XLFSTR(A)
"RTN","IBCEF2",72,0)
 . ;
"RTN","IBCEF2",73,0)
 . ; RPRNT = CMS-1500 Rx bills
"RTN","IBCEF2",74,0)
 . ; IPRNT = Inst MRA secondary claims
"RTN","IBCEF2",75,0)
 . ; PPRNT = Prof MRA secondary claims
"RTN","IBCEF2",76,0)
 . ; HPRNT = inst printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",77,0)
 . ; SPRNT = prof printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",78,0)
 . ;
"RTN","IBCEF2",79,0)
 . ; Default to appropriate 'xPRNT' if Rx bill or COB bill or forced to
"RTN","IBCEF2",80,0)
 . ;    print - claims must print at clearinghouse
"RTN","IBCEF2",81,0)
 . ;
"RTN","IBCEF2",82,0)
 . ; Rx bills on CMS-1500
"RTN","IBCEF2",83,0)
 . ;IB*2.0*432/TAZ Claims no longer print at clearinghouse
"RTN","IBCEF2",84,0)
 . ;I 'IBINST,$$ISRX^IBCEF1(IBIFN) S A="RPRNT" Q
"RTN","IBCEF2",85,0)
 . ;
"RTN","IBCEF2",86,0)
 . ; Claim forced to print at clearinghouse (Field #27)
"RTN","IBCEF2",87,0)
 . I $P(Z1,U,8)=2 S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",88,0)
 . ;
"RTN","IBCEF2",89,0)
 . ; EJK *296* Send IBEBI for MRA secondary claims if it exists
"RTN","IBCEF2",90,0)
 . I Z>1,IBMRA,IBEBI'="" S A=IBEBI Q
"RTN","IBCEF2",91,0)
 . ;
"RTN","IBCEF2",92,0)
 . ; MRA secondary claim
"RTN","IBCEF2",93,0)
 . I Z>1,IBMCR=1,$P(Z1,U,5)="C" S A=$S(IBINST:"I",1:"P")_"PRNT" Q
"RTN","IBCEF2",94,0)
 . ;
"RTN","IBCEF2",95,0)
 . ; Medicare is current payer (MRA request claim)
"RTN","IBCEF2",96,0)
 . I $$WNRBILL^IBEFUNC(IBIFN,Z) S A=$S(IBINST:"12M61",1:"SMTX1") Q
"RTN","IBCEF2",97,0)
 . ;
"RTN","IBCEF2",98,0)
 . ; IB*296 - Do not modify the payer ID for CHAMPVA (HAC)
"RTN","IBCEF2",99,0)
 . I A=84146 Q
"RTN","IBCEF2",100,0)
 . I A=84147 Q
"RTN","IBCEF2",101,0)
 . ;
"RTN","IBCEF2",102,0)
 . ; If not a primary bill force to print
"RTN","IBCEF2",103,0)
 . ;IB*2.0*432/TAZ secondary bills will now be processed
"RTN","IBCEF2",104,0)
 . ;I Z>1,Z=$$COBN^IBCEF(IBIFN) S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",105,0)
 . Q
"RTN","IBCEF2",106,0)
 ;
"RTN","IBCEF2",107,0)
 Q
"RTN","IBCEF2",108,0)
 ;
"RTN","IBCEF2",109,0)
PAYERID(IBIFN) ; Returns clearinghouse id for current ins co
"RTN","IBCEF2",110,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",111,0)
 N NUM,IBSEQ
"RTN","IBCEF2",112,0)
 ; Determine the current ins co's # to identify at WEBMD
"RTN","IBCEF2",113,0)
 ; Envoy changed to WEBMD in patch 232
"RTN","IBCEF2",114,0)
 S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",115,0)
 D ALLPAYID(IBIFN,.NUM,IBSEQ) S NUM=$G(NUM(IBSEQ))
"RTN","IBCEF2",116,0)
 Q $G(NUM)
"RTN","IBCEF2",117,0)
 ;
"RTN","IBCEF2",118,0)
CURR(IBIFN) ; Returns ien of the current insurance
"RTN","IBCEF2",119,0)
 ; company for bill ien IBIFN
"RTN","IBCEF2",120,0)
 Q $$FINDINS^IBCEF1(IBIFN)
"RTN","IBCEF2",121,0)
 ;
"RTN","IBCEF2",122,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF2",123,0)
 D ADMDT^IBCEF21(IBIFN,$G(NOOUTCK))      ; Moved for space
"RTN","IBCEF2",124,0)
 Q
"RTN","IBCEF2",125,0)
 ;
"RTN","IBCEF2",126,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF2",127,0)
 D DISDT^IBCEF21(IBIFN)                  ; Moved for space
"RTN","IBCEF2",128,0)
 Q
"RTN","IBCEF2",129,0)
 ;
"RTN","IBCEF2",130,0)
INDTS(IBIFN) ; Function returns the admit ^ discharge date/time of admission if patient is an inpatient on bill's event date
"RTN","IBCEF2",131,0)
 N Z,Z0,DFN,VAINDT,VAIN S Z0=""
"RTN","IBCEF2",132,0)
 S Z=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(Z,U,2),VAINDT=$P(Z,U,3)
"RTN","IBCEF2",133,0)
 I +DFN,+VAINDT D INP^VADPT I +VAIN(1) S Z0=+VAIN(7)_U_+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF2",134,0)
 Q Z0
"RTN","IBCEF2",135,0)
 ;
"RTN","IBCEF2",136,0)
TXMT(IBIFN) ; Function moved - use new call in IBCEF4
"RTN","IBCEF2",137,0)
 Q $$TXMT^IBCEF4(IBIFN)
"RTN","IBCEF2",138,0)
 ;
"RTN","IBCEF2",139,0)
 ;
"RTN","IBCEF2",140,0)
ID(LN,VAL) ; Set EXTRACT GLOBAL for multi-valued record
"RTN","IBCEF2",141,0)
 ; ids for Austin
"RTN","IBCEF2",142,0)
 ; LN = the line # being extracted
"RTN","IBCEF2",143,0)
 ; VAL = the value of the element being extracted
"RTN","IBCEF2",144,0)
 ;
"RTN","IBCEF2",145,0)
 ; Assumes IBXPG exists
"RTN","IBCEF2",146,0)
 ;
"RTN","IBCEF2",147,0)
 Q:LN<2
"RTN","IBCEF2",148,0)
 D SETGBL^IBCEFG(IBXPG,LN,1,VAL,.IBXSIZE)
"RTN","IBCEF2",149,0)
 Q
"RTN","IBCEF2",150,0)
 ;
"RTN","IBCEF2",151,0)
ID1(LN,DX,CT,DCT,ECT) ;Special entry point for diagnoses to 'save' the fact
"RTN","IBCEF2",152,0)
 ;   a dx code is an e-code.
"RTN","IBCEF2",153,0)
 ; LN is last entry # output, returned as the entry # (IBXLINE) to assign to this entry
"RTN","IBCEF2",154,0)
 ; DX = the actual Dx code array(RECORD ID). Pass by reference, DX returned null if
"RTN","IBCEF2",155,0)
 ;      dx was not output
"RTN","IBCEF2",156,0)
 ; CT = the ct on the 'DC' entry.  pass by reference, returned null if
"RTN","IBCEF2",157,0)
 ;      the end of the valid dx codes has been reached
"RTN","IBCEF2",158,0)
 ; DCT= Count of regular DX codes. UB-04 can have 25 non External Cause codes.
"RTN","IBCEF2",159,0)
 ; ECT= Count of External Cause codes. UB-04 can have 12 External Cause codes.
"RTN","IBCEF2",160,0)
 ; External Cause of Injury codes and qualifier changed with ICD-10: E-codes in ICD-9, V,X,W,Y-codes in ICD-10
"RTN","IBCEF2",161,0)
 N IBINS,VAL,CNT,DXIEN,DXQ,EDX,I,POA,ICDV
"RTN","IBCEF2",162,0)
 S IBINS=($$FT^IBCEF(IBXIEN)=3)
"RTN","IBCEF2",163,0)
 S VAL="DC"_CT
"RTN","IBCEF2",164,0)
 S VAL=$E(VAL_" ",1,4)
"RTN","IBCEF2",165,0)
 S DCT=+$G(DCT),ECT=+$G(ECT) ;Make sure variables are initialized.
"RTN","IBCEF2",166,0)
 ;
"RTN","IBCEF2",167,0)
 S EDX=0,DX=$G(DX)
"RTN","IBCEF2",168,0)
 S ICDV=$$ICD9VER^IBACSV(+$G(DX(CT)))
"RTN","IBCEF2",169,0)
 I ICDV=1,$E(DX)="E" S EDX=1 ; TRUE if ECI ICD-9 Dx (e-code)
"RTN","IBCEF2",170,0)
 I ICDV=30,"VWXY"[$E(DX) S EDX=1 ; TRUE if ECI ICD-10 Dx
"RTN","IBCEF2",171,0)
 ;
"RTN","IBCEF2",172,0)
 S I=$S(EDX:3,1:2)
"RTN","IBCEF2",173,0)
 ;
"RTN","IBCEF2",174,0)
 S:'EDX DXQ=$S(+$G(^TMP("DCX",$J,2))>0:"BF",1:"BK") ; first non e-code DX is principal (qualifier "BK"), the rest have qualifier "BF"
"RTN","IBCEF2",175,0)
 ;
"RTN","IBCEF2",176,0)
 I IBINS D  I DX="" G IDX1
"RTN","IBCEF2",177,0)
 .;I CT>28 S CT="" Q     ; Max of 28 codes for institutional/UB
"RTN","IBCEF2",178,0)
 .I EDX S ECT=ECT+1 I ECT>12 S DX="" Q  ;Only 12 E-codes allowed
"RTN","IBCEF2",179,0)
 .I 'EDX S DCT=DCT+1 I DCT>25 S DX="" Q  ;Only 25 DX codes allowed
"RTN","IBCEF2",180,0)
 .S DXIEN=$P(DX(CT),U,2) Q:DXIEN=""
"RTN","IBCEF2",181,0)
 .; IB*2.0*547 - no longer stuff a 1 for POA, send a blank if null
"RTN","IBCEF2",182,0)
 .S POA=$P($G(^IBA(362.3,DXIEN,0)),U,4) ; I POA="",$$INPAT^IBCEF(IBXIEN) S POA=1 ; POA indicator defaults to "1", if not present on inpatient claim
"RTN","IBCEF2",183,0)
 .S:EDX DXQ="BN" ; e-code DX qualifier
"RTN","IBCEF2",184,0)
 .Q
"RTN","IBCEF2",185,0)
 ;
"RTN","IBCEF2",186,0)
 I 'IBINS S:EDX DXQ="BF" S POA="" ; on CMS-1500 e-code DX qualifiers are "BF" and there's no POA
"RTN","IBCEF2",187,0)
 ;
"RTN","IBCEF2",188,0)
 I ICDV=30 S DXQ="A"_DXQ ; adjust Qualifier for ICD-10 codes
"RTN","IBCEF2",189,0)
 ;
"RTN","IBCEF2",190,0)
 ;Changed 8 to 12 so we can transmit 12 codes. BAA *488*
"RTN","IBCEF2",191,0)
 I 'IBINS,CT>12 S ^TMP("IBXSAVE",$J,"DX",IBXIEN)=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN))+1,^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(+^TMP("IBXSAVE",$J,"DX",IBXIEN)),U,2))=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN)) S DX="" Q
"RTN","IBCEF2",192,0)
 ;
"RTN","IBCEF2",193,0)
 I CT'="",DX'="" D
"RTN","IBCEF2",194,0)
 .; populate ^TMP("DCX") scratch global
"RTN","IBCEF2",195,0)
 .S ^TMP("DCX",$J,1)=CT,CNT=$G(^TMP("DCX",$J,I))+1,^TMP("DCX",$J,I)=CNT
"RTN","IBCEF2",196,0)
 .S (^TMP("DCX",$J,I,CNT),^TMP("DCX",$J,1,CT))=DX_U_DXQ_U_POA
"RTN","IBCEF2",197,0)
 .S LN=LN+1 D ID(LN,VAL) S ^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(LN),U,2))=LN,^TMP("IBXSAVE",$J,"DX",IBXIEN)=CT,CT=CT+1
"RTN","IBCEF2",198,0)
 .Q
"RTN","IBCEF2",199,0)
 ;
"RTN","IBCEF2",200,0)
IDX1 ;
"RTN","IBCEF2",201,0)
 Q
"RTN","IBCEF2",202,0)
 ;
"RTN","IBCEF2",203,0)
M(CT) ; Calculate multi-valued field for 837 extract
"RTN","IBCEF2",204,0)
 ; CT = passed by reference/the record ID counter
"RTN","IBCEF2",205,0)
 S CT=CT+1
"RTN","IBCEF2",206,0)
 ;IB*2.0*547/TAZ Increase counter to 25
"RTN","IBCEF2",207,0)
 ;Q $E(CT#12+$S(CT#12:0,1:12)_" ",1,2)
"RTN","IBCEF2",208,0)
 Q $E(CT#25+$S(CT#25:0,1:25)_" ",1,2)
"RTN","IBCEF2",209,0)
 ;
"RTN","IBCEF2",210,0)
SVITM(IBA,LINE) ; Saves the linked items from the bill data extract into
"RTN","IBCEF2",211,0)
 ; an array the formatter will use to link Rxs and prosthetics
"RTN","IBCEF2",212,0)
 ; to an SV1 or SV2 line item, if possible.  Kills off IBA array entries
"RTN","IBCEF2",213,0)
 ; after they are 'moved'
"RTN","IBCEF2",214,0)
 ; IBA = array that contains the data to be saved
"RTN","IBCEF2",215,0)
 ;   subscripts are (line #,item type,item pointer)=ct
"RTN","IBCEF2",216,0)
 N Z0,Z1
"RTN","IBCEF2",217,0)
 S Z0="" F  S Z0=$O(IBA("OUTPT",LINE,Z0)) Q:Z0=""  I Z0?1N.N  S Z1="" F  S Z1=$O(IBA("OUTPT",LINE,Z0,Z1)) Q:Z1=""  S ^TMP($J,"IBITEM",Z0,Z1,LINE)=IBA("OUTPT",LINE,Z0,Z1) K IBA("OUTPT",LINE,Z0,Z1)
"RTN","IBCEF2",218,0)
 Q
"RTN","IBCEF2",219,0)
 ;
"RTN","IBCEF2",220,0)
LINK(IBTYP,IBDATA) ; Link the item with a service line, if possible
"RTN","IBCEF2",221,0)
 ; IBTYP = the code for the type of item
"RTN","IBCEF2",222,0)
 ;         returned incremented if no link is made
"RTN","IBCEF2",223,0)
 ; IBDATA = the extracted data string that identifies the item. 
"RTN","IBCEF2",224,0)
 ; Returns the line to link to or null if no link
"RTN","IBCEF2",225,0)
 N IBLN,IBKEY,Z
"RTN","IBCEF2",226,0)
 S IBLN=""
"RTN","IBCEF2",227,0)
 S IBKEY=$S(IBTYP=3:$P(IBDATA,U,9),IBTYP=5:$P(IBDATA,U,4),1:"") Q:IBKEY=""
"RTN","IBCEF2",228,0)
 I $D(^TMP($J,"IBITEM",IBTYP,IBKEY)) D  G:IBLN LINKQ
"RTN","IBCEF2",229,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",230,0)
 I $D(^TMP($J,"IBITEM",IBTYP,0)) S IBKEY=0 D
"RTN","IBCEF2",231,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",232,0)
LINKQ Q IBLN
"RTN","IBCEF2",233,0)
 ;
"RTN","IBCEF2",234,0)
COID(IBIFN) ; Claim office ID - moved for space
"RTN","IBCEF2",235,0)
 Q $$COID^IBCEF21(IBIFN)
"RTN","IBCEF2",236,0)
 ;
"RTN","IBCEF2",237,0)
PPOL(IBIFN,COB) ; return IFN of patient policy on a bill defined by COB (fields 399,112-114)
"RTN","IBCEF2",238,0)
 N X,Y,PPOL S PPOL=""
"RTN","IBCEF2",239,0)
 I +$G(IBIFN) S X=$G(^DGCR(399,+IBIFN,"M")) I +$G(COB),COB<4 S Y=COB+11,PPOL=$P(X,U,Y)
"RTN","IBCEF2",240,0)
 Q PPOL
"RTN","IBCEF2",241,0)
 ;
"RTN","IBCEF2",242,0)
LADJ(SUB,LINE,SEQ1,GRP,IBXSAVE,PIECE) ; Extract line level adjustments
"RTN","IBCEF2",243,0)
 ; SUB     = 1st subscript in IBXSAVE array to use
"RTN","IBCEF2",244,0)
 ; LINE    = 2nd subscript
"RTN","IBCEF2",245,0)
 ; SEQ1    = 4th subscript
"RTN","IBCEF2",246,0)
 ; GRP     = 5th subscript
"RTN","IBCEF2",247,0)
 ; IBXSAVE = array that has the data for COB line level adjustments
"RTN","IBCEF2",248,0)
 ; PIECE   = # of the piece on the 0-node of the line level
"RTN","IBCEF2",249,0)
 ;           adjustment reason to be extracted
"RTN","IBCEF2",250,0)
 ;
"RTN","IBCEF2",251,0)
 N A,B
"RTN","IBCEF2",252,0)
 S (A,B)=0
"RTN","IBCEF2",253,0)
 F  S A=$O(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A)) Q:'A  D
"RTN","IBCEF2",254,0)
 . S B=B+1,IBXDATA(B)=$P(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A),U,PIECE)
"RTN","IBCEF2",255,0)
 Q
"RTN","IBCEF2",256,0)
 ;
"RTN","IBCEF2",257,0)
ESGHPST(IBIFN,COB) ; return insureds employ status if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",258,0)
 Q $$ESGHPST^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",259,0)
 ;
"RTN","IBCEF2",260,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",261,0)
 Q $$ESGHPNL^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",262,0)
 ;
"RTN","IBCEF2",263,0)
AMTOUT(A,B,C,IBXSAVE) ; format output amount
"RTN","IBCEF2",264,0)
 ;
"RTN","IBCEF2",265,0)
 N Z,K,IBZ,IBARR K IBXDATA S (IBZ,K)=0,IBARR="IBXSAVE("""_A_""")" F  S IBZ=$O(@IBARR@(IBZ)) Q:'IBZ  S K=K+1,Z=0 F  S Z=$O(@IBARR@(IBZ,Z)) Q:'Z  I $P($G(@IBARR@(IBZ,Z,B)),U,C) S IBXDATA(K)=$$DOLLAR^IBCEFG1($G(IBXDATA(K))+$P(@IBARR@(IBZ,Z,B),U,C))
"RTN","IBCEF2",266,0)
 Q
"RTN","IBCEF2",267,0)
 ;
"RTN","IBCEF2",268,0)
 ;/Beginning of IB*2.0*608 (US9) - vd
"RTN","IBCEF2",269,0)
SNF(IBIFN) ; Check to see if the claim is a SNF (Skilled Nursing Facility) Claim.
"RTN","IBCEF2",270,0)
 ;   Returned Values:
"RTN","IBCEF2",271,0)
 ;    SNF = 0 if claim is not a SNF Claim.
"RTN","IBCEF2",272,0)
 ;    SNF = 1 if claim is a SNF Claim.
"RTN","IBCEF2",273,0)
 N SNF
"RTN","IBCEF2",274,0)
 S SNF=0
"RTN","IBCEF2",275,0)
 I $$GET1^DIQ(399,IBIFN_", ",.24,"I")=2 S SNF=1   ; Claim is a SNF Claim
"RTN","IBCEF2",276,0)
 Q SNF
"RTN","IBCEF2",277,0)
 ;
"RTN","IBCEF2",278,0)
VC80CK(IBIFN) ; Determine if the Claim is eligible for Value Code 80 Revenue Code Claim Lines.
"RTN","IBCEF2",279,0)
 N BLTYPX,COB,IB0,NUM,PPAYID,RCVRID,VC80SW
"RTN","IBCEF2",280,0)
 S VC80SW=0
"RTN","IBCEF2",281,0)
 I '$$SNF(IBIFN) Q VC80SW   ; Not a SNF Claim.
"RTN","IBCEF2",282,0)
 S RCVRID=$$RECVR^IBCEF2(IBIFN) I "^ENVOYH^PARTA^"'[(U_RCVRID_U) Q VC80SW   ; Not ENVOYH or PARTA
"RTN","IBCEF2",283,0)
 S COB=$$COB^IBCEF(IBIFN) I COB'="P" Q VC80SW   ; Payer Responsibility Sequence not equal to "P".
"RTN","IBCEF2",284,0)
 D ALLPAYID(IBIFN,.NUM,1) S PPAYID=$G(NUM(1))  Q:(PPAYID'="12M61") VC80SW  ; Primary Payer not equal to "12M61"
"RTN","IBCEF2",285,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF2",286,0)
 S BLTYPX=$P(IB0,U,24)_$P(IB0,U,5)
"RTN","IBCEF2",287,0)
 I BLTYPX<21!(BLTYPX>23) Q VC80SW  ; Not a valid Bill Type.
"RTN","IBCEF2",288,0)
 S VC80SW=1   ; If we got this far.the claim is eligible for Value Code 80 Revenue Code Claim Lines.
"RTN","IBCEF2",289,0)
 Q VC80SW
"RTN","IBCEF2",290,0)
 ;
"RTN","IBCEF2",291,0)
INS ; Called by the Output Formatter [#364.7, 176]
"RTN","IBCEF2",292,0)
 N A,Z
"RTN","IBCEF2",293,0)
 S Z=0,A=$G(^TMP($J,"IBLCT"))
"RTN","IBCEF2",294,0)
 F  S Z=$O(IBXDATA(Z)) D  Q:'Z
"RTN","IBCEF2",295,0)
 . K:'Z&($D(IBXDATA)=1) IBXDATA
"RTN","IBCEF2",296,0)
 . S:'Z ^TMP($J,"IBLCT")=A Q:'Z
"RTN","IBCEF2",297,0)
 . S A=A+1 M IBXSAVE("INPT",Z)=IBXDATA(Z)
"RTN","IBCEF2",298,0)
 . K IBXDATA(Z) S IBXDATA(Z)=A
"RTN","IBCEF2",299,0)
 . D:Z>1 ID^IBCEF2(Z,"INS ")
"RTN","IBCEF2",300,0)
 ;
"RTN","IBCEF2",301,0)
 I +$G(VC80) D
"RTN","IBCEF2",302,0)
 . S Z=$O(IBXDATA(""),-1)+1
"RTN","IBCEF2",303,0)
 . D ID^IBCEF2(Z,"INS ")
"RTN","IBCEF2",304,0)
 . ;D VC80I^IBCEF22(A,$G(IBXSV("VC80",A)))  ; Process for 'SNF' claims & the last claim line
"RTN","IBCEF2",305,0)
 . D VC80I^IBCEF22(A)   ; Process for 'SNF' claims & the last claim line.
"RTN","IBCEF2",306,0)
 . S A=A+1
"RTN","IBCEF2",307,0)
 . S IBXDATA(Z)=A
"RTN","IBCEF2",308,0)
 Q
"RTN","IBCEF2",309,0)
 ;
"RTN","IBCEF2",310,0)
INS05 ; Called by the Output Formatter [#364.7, 178]
"RTN","IBCEF2",311,0)
 ;K IBXDATA S IBXNOREQ='$$REQ^IBCEF1(3,"",IBXIEN) N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,4)'="" IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4)
"RTN","IBCEF2",312,0)
 K IBXDATA
"RTN","IBCEF2",313,0)
 S IBXNOREQ='$$REQ^IBCEF1(3,"",IBXIEN)
"RTN","IBCEF2",314,0)
 N LAST,Z S (LAST,Z)=0
"RTN","IBCEF2",315,0)
 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
"RTN","IBCEF2",316,0)
 . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4) Q:LAST
"RTN","IBCEF2",317,0)
 . S:$P(IBXSAVE("INPT",Z),U,4)'="" IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,4)
"RTN","IBCEF2",318,0)
 Q
"RTN","IBCEF2",319,0)
 ;
"RTN","IBCEF2",320,0)
INS07 ; Called by the Output Formatter [#364.7, 181]
"RTN","IBCEF2",321,0)
 ;N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,9)'=""&($P(IBXSAVE("INPT",Z),U,2)'="") IBXSAVE("PMOD",Z)=$P(IBXSAVE("INPT",Z),U,9),IBXDATA(Z)=$P(IBXSAVE("PMOD",Z),",")
"RTN","IBCEF2",322,0)
 N LAST,Z S (LAST,Z)=0
"RTN","IBCEF2",323,0)
 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
"RTN","IBCEF2",324,0)
 . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)="" Q:LAST
"RTN","IBCEF2",325,0)
 . S:$P(IBXSAVE("INPT",Z),U,9)'=""&($P(IBXSAVE("INPT",Z),U,2)'="") IBXSAVE("PMOD",Z)=$P(IBXSAVE("INPT",Z),U,9),IBXDATA(Z)=$P(IBXSAVE("PMOD",Z),",")
"RTN","IBCEF2",326,0)
 Q
"RTN","IBCEF2",327,0)
 ;
"RTN","IBCEF2",328,0)
INS09 ; Called by the Output Formatter [#364.7, 180]
"RTN","IBCEF2",329,0)
 ;K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S IBXDATA(Z)=$S($P(IBXSAVE("INPT",Z),U,5)="":$$DOLLAR^IBCEFG1("0.00"),1:$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,5)))
"RTN","IBCEF2",330,0)
 K IBXDATA
"RTN","IBCEF2",331,0)
 N LAST,Z S (LAST,Z)=0
"RTN","IBCEF2",332,0)
 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
"RTN","IBCEF2",333,0)
 . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=0 Q:LAST
"RTN","IBCEF2",334,0)
 . S IBXDATA(Z)=$S($P(IBXSAVE("INPT",Z),U,5)="":$$DOLLAR^IBCEFG1("0.00"),1:$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,5)))
"RTN","IBCEF2",335,0)
 Q
"RTN","IBCEF2",336,0)
 ;
"RTN","IBCEF2",337,0)
INS12 ; Called by the Output Formatter [#364.7, 482]
"RTN","IBCEF2",338,0)
 ;K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U,6)'="" IBXDATA(Z)=$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,6))
"RTN","IBCEF2",339,0)
 K IBXDATA
"RTN","IBCEF2",340,0)
 N LAST,Z S (LAST,Z)=0
"RTN","IBCEF2",341,0)
 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
"RTN","IBCEF2",342,0)
 . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)="" Q:LAST
"RTN","IBCEF2",343,0)
 . S:$P(IBXSAVE("INPT",Z),U,6)'="" IBXDATA(Z)=$$DOLLAR^IBCEFG1($P(IBXSAVE("INPT",Z),U,6))
"RTN","IBCEF2",344,0)
 Q
"RTN","IBCEF2",345,0)
 ;
"RTN","IBCEF2",346,0)
INS13 ; Called by the Output Formatter [#364.7, 805]
"RTN","IBCEF2",347,0)
 ;K IBXDATA N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S:$P(IBXSAVE("INPT",Z),U)'="" Z0=$P(IBXSAVE("INPT",Z),U) S IBXDATA(Z)=$S(Z0="":"",Z0'<100&(Z0'>219):"DA",1:"UN") K:IBXDATA(Z)="" IBXDATA(Z) K IBXDATA
"RTN","IBCEF2",348,0)
 K IBXDATA
"RTN","IBCEF2",349,0)
 N LAST,Z,Z0 S (LAST,Z)=0
"RTN","IBCEF2",350,0)
 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  D  Q:LAST
"RTN","IBCEF2",351,0)
 . I +$G(VC80) S:$O(IBXSAVE("INPT",Z))="" LAST=1,IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,13) Q:LAST
"RTN","IBCEF2",352,0)
 . S:$P(IBXSAVE("INPT",Z),U)'="" Z0=$P(IBXSAVE("INPT",Z),U)
"RTN","IBCEF2",353,0)
 . S IBXDATA(Z)=$S(Z0="":"",Z0'<100&(Z0'>219):"DA",1:"UN") K:IBXDATA(Z)="" IBXDATA(Z)
"RTN","IBCEF2",354,0)
 Q
"RTN","IBCEF2",355,0)
 ;/End IB*2.0*608 (US9) - vd
"RTN","IBCEF2",356,0)
 ;
"RTN","IBCEF22")
0^12^B107716996^B97383500
"RTN","IBCEF22",1,0)
IBCEF22 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;06-FEB-96
"RTN","IBCEF22",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,135,155,309,349,389,432,488,516,577,608**;21-MAR-94;Build 90
"RTN","IBCEF22",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF22",4,0)
 ;
"RTN","IBCEF22",5,0)
 ;  OVERFLOW FROM ROUTINE IBCEF2
"RTN","IBCEF22",6,0)
HOS(IBIFN) ; Extract rev codes for episode billed on a UB-04 into IBXDATA
"RTN","IBCEF22",7,0)
 ; IBIFN = bill ien
"RTN","IBCEF22",8,0)
 ; Format: IBXDATA(n) =
"RTN","IBCEF22",9,0)
 ;  rev cd ptr ^ CPT CODE ptr ^ unit chg ^ units ^ tot charge
"RTN","IBCEF22",10,0)
 ;    ^ tot uncov ^ FL49 value
"RTN","IBCEF22",11,0)
 ;    ^ ien of rev code multiple entry(s) (separated by ";")
"RTN","IBCEF22",12,0)
 ;    ^ modifiers specific to rev code/proc (separated by ",")
"RTN","IBCEF22",13,0)
 ;    ^ rev code date, if it can be determined by a corresponding proc
"RTN","IBCEF22",14,0)
 ;    ^ NDC from "CP" node of claim ^ Units/Quantity from "CP" node  - vd/IB*2*577
"RTN","IBCEF22",15,0)
 ;    ^ Units/Basis of Measurement for Drugs  - vd/IB*2*577
"RTN","IBCEF22",16,0)
 ;
"RTN","IBCEF22",17,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF22",18,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF22",19,0)
 ;      line in the first '^' piece followed by the '0' node of file
"RTN","IBCEF22",20,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF22",21,0)
 ;       COB = COB seq # of adjustment's ins co, m = seq #
"RTN","IBCEF22",22,0)
 ;         -- AND --
"RTN","IBCEF22",23,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF22",24,0)
 ;           the '0' node for each subordinate entry of file
"RTN","IBCEF22",25,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837)
"RTN","IBCEF22",26,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF22",27,0)
 ;
"RTN","IBCEF22",28,0)
 ;         -- AND --
"RTN","IBCEF22",29,0)
 ;    IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF22",30,0)
 ;
"RTN","IBCEF22",31,0)
 N IBDA,IBCOMB,IBINPAT,IBLN,IBX,IBY,IBZ,IBS,IBSS,IBXTRA,IBX1,IBXS,IBP,IBPO,IBP1,IBDEF,Z,Z0,Z1,ZX,QQ,IBMOD,LST
"RTN","IBCEF22",32,0)
 S IBINPAT=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF22",33,0)
 I 'IBINPAT D F^IBCEF("N-STATEMENT COVERS FROM DATE","IBZ",,IBIFN)
"RTN","IBCEF22",34,0)
 S IBDEF=$G(IBZ),LST=""
"RTN","IBCEF22",35,0)
 ;
"RTN","IBCEF22",36,0)
 ; Loop through lines of claim beneath ^DGCR(399,IBIFN,"CP") and build
"RTN","IBCEF22",37,0)
 ; the array IBP to be used below.
"RTN","IBCEF22",38,0)
 ;    IBP(Procedure ^ Modifiers, Print Order, Line#) = Procedure Date
"RTN","IBCEF22",39,0)
 ;
"RTN","IBCEF22",40,0)
 S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"CP",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ D
"RTN","IBCEF22",41,0)
 . S IBP(+$P(IBZ,U)_U_$$GETMOD^IBEFUNC(IBIFN,IBDA,1),$S($P(IBZ,U,4):$P(IBZ,U,4),1:999),IBDA)=$P(IBZ,U,2)
"RTN","IBCEF22",42,0)
 ;
"RTN","IBCEF22",43,0)
 ; Loop through the revenue codes beneath ^DGCR(399,IBIFN,"RC") and
"RTN","IBCEF22",44,0)
 ; build the array IBX to be used below.
"RTN","IBCEF22",45,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#) =
"RTN","IBCEF22",46,0)
 ;          ^DGCR(399.2, Revenue Code IEN, 0)
"RTN","IBCEF22",47,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "DT") = Procedure Date
"RTN","IBCEF22",48,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "MOD") = Modifiers
"RTN","IBCEF22",49,0)
 ;
"RTN","IBCEF22",50,0)
 S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"RC",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ S IBMOD="" D
"RTN","IBCEF22",51,0)
 . S IBX=$G(^DGCR(399.2,+IBZ,0)),IBX1="",IBPO=0
"RTN","IBCEF22",52,0)
 . ; Auto-added procedure charge
"RTN","IBCEF22",53,0)
 . I $P(IBZ,U,10)=4,$P(IBZ,U,11) D  ; Soft link to proc
"RTN","IBCEF22",54,0)
 .. S Z=$G(^DGCR(399,IBIFN,"CP",$P(IBZ,U,11),0))
"RTN","IBCEF22",55,0)
 .. Q:Z=""
"RTN","IBCEF22",56,0)
 .. S ZX=+Z_U_$$GETMOD^IBEFUNC(IBIFN,$P(IBZ,U,11),1)
"RTN","IBCEF22",57,0)
 .. Q:'$O(IBP(ZX,0))&'$O(IBP1(ZX,0))
"RTN","IBCEF22",58,0)
 .. I $P(IBZ,U,6) Q:$S($P(Z,U)'["ICPT":1,1:+$P(Z,U)'=$P(IBZ,U,6))
"RTN","IBCEF22",59,0)
 .. S Z0=$S($D(IBP(ZX)):$O(IBP(ZX,0)),1:$O(IBP1(ZX,0)))
"RTN","IBCEF22",60,0)
 .. S:'Z0 Z0=999
"RTN","IBCEF22",61,0)
 .. Q:'$D(IBP(ZX,+Z0,$P(IBZ,U,11)))&'$D(IBP1(ZX,+Z0,$P(IBZ,U,11)))
"RTN","IBCEF22",62,0)
 .. I '$D(IBP1(ZX,+Z0,$P(IBZ,U,11))) S IBP1(ZX,+Z0,$P(IBZ,U,11))=IBP(ZX,+Z0,$P(IBZ,U,11)) K IBP(ZX,+Z0,$P(IBZ,U,11))
"RTN","IBCEF22",63,0)
 .. S IBX1=$P(Z,U,2),IBPO=+Z0,IBMOD=$P(ZX,U,2)
"RTN","IBCEF22",64,0)
 . ; Manually added charge with a procedure
"RTN","IBCEF22",65,0)
 . I $P(IBZ,U,6),$S($P(IBZ,U,10)=4:'$P(IBZ,U,11),1:1),+$O(IBP($P(IBZ,U,6)))=$P(IBZ,U,6) D
"RTN","IBCEF22",66,0)
 .. ; No direct link, but a proc exists on rev code and in procedure mult without and then with modifiers
"RTN","IBCEF22",67,0)
 .. S ZX=$O(IBP($P(IBZ,U,6)))
"RTN","IBCEF22",68,0)
 .. F QQ=1,2 Q:IBPO  S Z="" F  S Z=$O(IBP(ZX,Z),-1) Q:'Z!(IBPO)  S Z0=0 F  S Z0=$O(IBP(ZX,Z,Z0)) Q:'Z0  S Z1=$G(^DGCR(399,IBIFN,"CP",Z0,0)) D  Q:IBPO
"RTN","IBCEF22",69,0)
 ... ; Ignore if not a CPT or a modifier exists and this is first pass
"RTN","IBCEF22",70,0)
 ... S IBMOD=$$GETMOD^IBEFUNC(IBIFN,Z0,1)
"RTN","IBCEF22",71,0)
 ... Q:$S($P(Z1,U)'["ICPT":1,QQ=1:IBMOD'="",1:0)
"RTN","IBCEF22",72,0)
 ... S IBPO=+$P(Z1,U,4),IBX1=$P(Z1,U,2)
"RTN","IBCEF22",73,0)
 ... K IBP(+Z1_U_IBMOD,Z,Z0)
"RTN","IBCEF22",74,0)
 . ;
"RTN","IBCEF22",75,0)
 . I IBX'="" D  ; revenue code is valid
"RTN","IBCEF22",76,0)
 .. S LST=$S(LST="":900,1:LST+1)
"RTN","IBCEF22",77,0)
 .. F Z=LST:1 S Z0=$S(IBPO:IBPO,$D(IBX(" "_$P(IBX,U),Z)):0,1:Z) I Z0 S (LST,IBPO)=Z0 Q
"RTN","IBCEF22",78,0)
 .. S IBX(" "_$P(IBX,U),IBPO,IBDA)=IBX,IBX(" "_$P(IBX,U),IBPO,IBDA,"DT")=$S(IBX1:IBX1,1:IBDEF),IBX(" "_$P(IBX,U),IBPO,IBDA,"MOD")=IBMOD
"RTN","IBCEF22",79,0)
 ;
"RTN","IBCEF22",80,0)
 ; Loop through revenue codes in IBX and build the array IBX1.
"RTN","IBCEF22",81,0)
 ;
"RTN","IBCEF22",82,0)
 S IBS="" F  S IBS=$O(IBX(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX(IBS,IBPO)) Q:'IBPO  D
"RTN","IBCEF22",83,0)
 . S IBDA=0 F  S IBDA=$O(IBX(IBS,IBPO,IBDA)) Q:'IBDA  S IBX=$G(IBX(IBS,IBPO,IBDA)),IBZ=$G(^DGCR(399,IBIFN,"RC",IBDA,0)) I IBX'="" D
"RTN","IBCEF22",84,0)
 .. ;S IBXS=$P(IBZ,U,2)_U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD"))
"RTN","IBCEF22",85,0)
 .. S IBXS=U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD")) ;combine same proc and modifiers regardless of rate
"RTN","IBCEF22",86,0)
 .. S:IBPO'<900&'$$ACCRV($P(IBS," ",2))&$S(IBINPAT:$P(IBZ,U,6),1:1) IBCOMB(IBS,IBXS,IBPO)=IBDA
"RTN","IBCEF22",87,0)
 .. S:'$D(IBX1(IBS,IBPO,IBXS,1)) IBX1(IBS,IBPO,IBXS,1)=IBX,IBX1(IBS,IBPO,IBXS,2)=IBZ
"RTN","IBCEF22",88,0)
 .. S $P(IBX1(IBS,IBPO,IBXS),U)=$P($G(IBX1(IBS,IBPO,IBXS)),U)+$P(IBZ,U,3)
"RTN","IBCEF22",89,0)
 .. S $P(IBX1(IBS,IBPO,IBXS),U,2)=$P($G(IBX1(IBS,IBPO,IBXS)),U,2)+$P(IBZ,U,4)
"RTN","IBCEF22",90,0)
 .. S IBX1(IBS,IBPO,IBXS,"DT")=$G(IBX(IBS,IBPO,IBDA,"DT")),IBX1(IBS,IBPO,IBXS,"IEN")=$G(IBX1(IBS,IBPO,IBXS,"IEN"))_$S($G(IBX1(IBS,IBPO,IBXS,"IEN")):";",1:"")_IBDA
"RTN","IBCEF22",91,0)
 ;
"RTN","IBCEF22",92,0)
 S IBS="" F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=899 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  D  ; Check to combine like rev codes without print order
"RTN","IBCEF22",93,0)
 . N Q,Q0,Q1,Z,Z0,Z1,Z2,IBZ1,IBZ2
"RTN","IBCEF22",94,0)
 . S Z=""
"RTN","IBCEF22",95,0)
 . N IBACC
"RTN","IBCEF22",96,0)
 . F  S Z=$O(IBX1(IBS,IBPO,Z)) Q:Z=""  S Q=IBPO F  S Q=$O(IBCOMB(IBS,Z,Q)) Q:'Q  I Q'=IBPO S IBZ1=$G(IBX1(IBS,IBPO,Z,1)),IBZ2=$G(IBX1(IBS,IBPO,Z,2)) D
"RTN","IBCEF22",97,0)
 .. Q:$G(IBX1(IBS,IBPO,Z,1))'=$G(IBX1(IBS,Q,Z,1))
"RTN","IBCEF22",98,0)
 .. S Q1=1,IBACC=$$ACCRV(+$P(IBS," ",2))
"RTN","IBCEF22",99,0)
 .. F Q0=1,5:1:7,10:1:13,15 D  Q:'Q1
"RTN","IBCEF22",100,0)
 ... I IBACC Q:Q0=5!(Q0>6)
"RTN","IBCEF22",101,0)
 ... I (Q0=11!(Q0=15))&($P($G(IBX1(IBS,Q,Z,2)),U,10)=3) Q
"RTN","IBCEF22",102,0)
 ... I Q0=5,'IBINPAT Q
"RTN","IBCEF22",103,0)
 ... I $P($G(IBX1(IBS,IBPO,Z,2)),U,Q0)'=$P($G(IBX1(IBS,Q,Z,2)),U,Q0) S Q1=0
"RTN","IBCEF22",104,0)
 .. Q:'Q1
"RTN","IBCEF22",105,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,3)=$P(IBX1(IBS,IBPO,Z,2),U,3)+$P(IBX1(IBS,Q,Z,2),U,3)
"RTN","IBCEF22",106,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,4)=$P(IBX1(IBS,IBPO,Z,2),U,4)+$P(IBX1(IBS,Q,Z,2),U,4)
"RTN","IBCEF22",107,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,9)=$P(IBX1(IBS,IBPO,Z,2),U,9)+$P(IBX1(IBS,Q,Z,2),U,9)
"RTN","IBCEF22",108,0)
 .. S IBX1(IBS,IBPO,Z)=$P(IBX1(IBS,IBPO,Z,2),U,3)_U_$P(IBX1(IBS,IBPO,Z,2),U,4)
"RTN","IBCEF22",109,0)
 .. S IBX1(IBS,IBPO,Z,"IEN")=IBX1(IBS,IBPO,Z,"IEN")_";"_IBX1(IBS,Q,Z,"IEN")
"RTN","IBCEF22",110,0)
 .. K IBX1(IBS,Q,Z)
"RTN","IBCEF22",111,0)
 ;
"RTN","IBCEF22",112,0)
 D SPLIT  ; 488 ; baa
"RTN","IBCEF22",113,0)
 ;
"RTN","IBCEF22",114,0)
 ; Loop through IBX1 and build the array IBXDATA. Everything in the
"RTN","IBCEF22",115,0)
 ; array IBXDATA comes from the array IBX1.
"RTN","IBCEF22",116,0)
 ;
"RTN","IBCEF22",117,0)
 S IBS="",IBLN=0
"RTN","IBCEF22",118,0)
 F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  S IBSS="" F  S IBSS=$O(IBX1(IBS,IBPO,IBSS)) Q:IBSS=""  D
"RTN","IBCEF22",119,0)
 . S IBX=$G(IBX1(IBS,IBPO,IBSS,1)),IBZ=$G(IBX1(IBS,IBPO,IBSS,2))
"RTN","IBCEF22",120,0)
 . S IBLN=$G(IBLN)+1,IBXDATA(IBLN)=$P(IBX,U)_U_$P(IBZ,U,6)_U_$P(IBZ,U,2)_U_+IBX1(IBS,IBPO,IBSS)_U_+$P(IBX1(IBS,IBPO,IBSS),U,2),$P(IBXDATA(IBLN),U,10)=$G(IBX1(IBS,IBPO,IBSS,"DT"))
"RTN","IBCEF22",121,0)
 . S $P(IBXDATA(IBLN),U,6)=$P(IBZ,U,9),$P(IBXDATA(IBLN),U,7)=$P(IBZ,U,13),$P(IBXDATA(IBLN),U,8)=$G(IBX1(IBS,IBPO,IBSS,"IEN")),$P(IBXDATA(IBLN),U,9)=$P($P(IBSS,U,3),",",1,2)
"RTN","IBCEF22",122,0)
 . S IBXDATA(IBLN,"CPLNK")=$$RC2CP(IBIFN,$P($P(IBXDATA(IBLN),U,8),";"))
"RTN","IBCEF22",123,0)
 . ;
"RTN","IBCEF22",124,0)
 . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
"RTN","IBCEF22",125,0)
 . ;I IBXDATA(IBLN,"CPLNK") S $P(IBXDATA(IBLN),U,11,12)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")
"RTN","IBCEF22",126,0)
 . ; VAD;IB*2.0*577 - Added Unit/Basis of Measurement to line level of claim.
"RTN","IBCEF22",127,0)
 . I IBXDATA(IBLN,"CPLNK") D
"RTN","IBCEF22",128,0)
 . . S $P(IBXDATA(IBLN),U,11,13)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),2)),U)
"RTN","IBCEF22",129,0)
 . . I +$P(IBXDATA(IBLN),U,12) S $P(IBXDATA(IBLN),U,12)=$S($P(IBXDATA(IBLN),U,12)#1:+$J($P(IBXDATA(IBLN),U,12),0,3),1:$P(IBXDATA(IBLN),U,12))
"RTN","IBCEF22",130,0)
 . ;
"RTN","IBCEF22",131,0)
 . ; Extract line lev COB data for sec or tert bill
"RTN","IBCEF22",132,0)
 . I $$COBN^IBCEF(IBIFN)>1 D COBLINE^IBCEU6(IBIFN,IBLN,.IBXDATA,,.IBXTRA) I $D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,1) ;Handle bundled/unbundled
"RTN","IBCEF22",133,0)
 ;
"RTN","IBCEF22",134,0)
 I $D(^IBA(362.4,"AIFN"_IBIFN))!$D(^IBA(362.5,"AIFN"_IBIFN)) D
"RTN","IBCEF22",135,0)
 . N IBARRAY,IBX,IBZ,IBRX,IBLCNT
"RTN","IBCEF22",136,0)
 . S IBLCNT=0
"RTN","IBCEF22",137,0)
 . ; Print prescriptions, prosthetics on front of UB-04
"RTN","IBCEF22",138,0)
 . D SET^IBCSC5A(IBIFN,.IBARRAY)
"RTN","IBCEF22",139,0)
 . I $P(IBARRAY,U,2) D
"RTN","IBCEF22",140,0)
 .. S IBX=+$P(IBARRAY,U,2)+2
"RTN","IBCEF22",141,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=""
"RTN","IBCEF22",142,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)="PRESCRIPTION REFILLS:",IBLCNT=2
"RTN","IBCEF22",143,0)
 .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  S IBRX=IBARRAY(IBX,IBY) D
"RTN","IBCEF22",144,0)
 ... D ZERO^IBRXUTL(+$P(IBRX,U,2))
"RTN","IBCEF22",145,0)
 ... S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=IBX_$J(" ",(11-$L(IBX)))_" "_$J($S($P(IBRX,U,6):"$"_$FN($P(IBRX,U,6),",",2),1:""),10)_"  "_$J($$FMTE^XLFDT(IBY,2),8)_"  "_$G(^TMP($J,"IBDRUG",+$P(IBRX,U,2),.01))
"RTN","IBCEF22",146,0)
 ... S IBZ=$S(+$P(IBRX,U,4):"QTY: "_$P(IBRX,U,4)_" ",1:"")_$S(+$P(IBRX,U,3):"for "_$P(IBRX,U,3)_" days supply ",1:"") I IBZ'="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35)_IBZ
"RTN","IBCEF22",147,0)
 ... S IBZ=$S($P(IBRX,U,5)'="":"NDC #: "_$P(IBRX,U,5),1:"") I IBZ'="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35)_IBZ
"RTN","IBCEF22",148,0)
 ... K ^TMP($J,"IBDRUG")
"RTN","IBCEF22",149,0)
 ... Q
"RTN","IBCEF22",150,0)
 . ;
"RTN","IBCEF22",151,0)
 . D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF22",152,0)
 . I $P(IBARRAY,U,2) D
"RTN","IBCEF22",153,0)
 .. S IBLCNT=0
"RTN","IBCEF22",154,0)
 .. S IBX=+$P(IBARRAY,U,2)+2
"RTN","IBCEF22",155,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=""
"RTN","IBCEF22",156,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)="PROSTHETIC REFILLS:",IBLCNT=2
"RTN","IBCEF22",157,0)
 .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  D
"RTN","IBCEF22",158,0)
 ... S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=$$FMTE^XLFDT(IBX,2)_" "_$J($S($P(IBARRAY(IBX,IBY),U,2):"$"_$FN($P(IBARRAY(IBX,IBY),U,2),",",2),1:""),10)_"  "_$E($$PINB^IBCSC5B(+IBARRAY(IBX,IBY)),1,54)
"RTN","IBCEF22",159,0)
 Q
"RTN","IBCEF22",160,0)
 ;
"RTN","IBCEF22",161,0)
ACCRV(X) ; Returns 1 if X is an accomodation RC, 0 if not
"RTN","IBCEF22",162,0)
 Q ((X'<100&(X'>219))!(X=224))
"RTN","IBCEF22",163,0)
 ;
"RTN","IBCEF22",164,0)
RC2CP(IBIFN,IBRCIEN) ; returns "CP" multiple pointer that corresponds to a given "RC" multiple pointer in file 399
"RTN","IBCEF22",165,0)
 ; IBIFN - ien in file 399, top level
"RTN","IBCEF22",166,0)
 ; IBRCIEN, ien in sub-file 399.042 (REVENUE CODE)
"RTN","IBCEF22",167,0)
 ;
"RTN","IBCEF22",168,0)
 ; returns pointer to sub-file 399.0304 (PROCEDURES) or 0 if no valid pointer can be found.
"RTN","IBCEF22",169,0)
 ;
"RTN","IBCEF22",170,0)
 N IBRC0,IBCPIEN
"RTN","IBCEF22",171,0)
 I +IBIFN'>0 Q 0
"RTN","IBCEF22",172,0)
 I +IBRCIEN'>0 Q 0
"RTN","IBCEF22",173,0)
 S IBRC0=$G(^DGCR(399,IBIFN,"RC",IBRCIEN,0)),IBCPIEN=0
"RTN","IBCEF22",174,0)
 I $P(IBRC0,U,10)=4 S IBCPIEN=+$P(IBRC0,U,11) ; type = CPT
"RTN","IBCEF22",175,0)
 I $P(IBRC0,U,10)=3 S IBCPIEN=+$P(IBRC0,U,15) ; type = RX
"RTN","IBCEF22",176,0)
 I 'IBCPIEN D
"RTN","IBCEF22",177,0)
 . S IBRC=$P(IBRC0,U,6)
"RTN","IBCEF22",178,0)
 . N IBCPTIEN S IBCPTIEN=IBRC
"RTN","IBCEF22",179,0)
 . F  S IBCPTIEN=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN)) Q:(+IBCPTIEN'=IBRC)!IBCPIEN  D
"RTN","IBCEF22",180,0)
 .. N OK,Z S OK="",Z=""
"RTN","IBCEF22",181,0)
 .. S Z=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN,Z)) Q:'Z!OK  D
"RTN","IBCEF22",182,0)
 ... N CNTR S CNTR=0
"RTN","IBCEF22",183,0)
 ... F  S CNTR=$O(IBXDATA(CNTR)) Q:'CNTR!'OK  D
"RTN","IBCEF22",184,0)
 .... I $G(IBXDATA(CNTR,"CPLNK"))=Z S OK=0 Q
"RTN","IBCEF22",185,0)
 ... I OK="" S OK=1,IBCPIEN=Z
"RTN","IBCEF22",186,0)
 I IBCPIEN,'$D(^DGCR(399,IBIFN,"CP",IBCPIEN)) S IBCPIEN=0
"RTN","IBCEF22",187,0)
 Q IBCPIEN
"RTN","IBCEF22",188,0)
 ;
"RTN","IBCEF22",189,0)
SPLIT    ; Split codes into multiple lines as needed => baa ; 488
"RTN","IBCEF22",190,0)
 ; The max line $ amount for a printed claim is less than the max line $ amount for an electronically transmitted claim.
"RTN","IBCEF22",191,0)
 ; However, since the clearinghouse can drop to print for a myriad of reasons at any time, the lines may need to be split
"RTN","IBCEF22",192,0)
 ; so they can all fit on a printed claim line just in case. In addition, since some claims are sent to primary payers as 
"RTN","IBCEF22",193,0)
 ; electronic claims but printed for secondary claims, the lines numbers need to be the same going out to ensure the 
"RTN","IBCEF22",194,0)
 ; COB data is correct applied (previous payments adj, etc are applied to the correct line.)
"RTN","IBCEF22",195,0)
 N IBS,IBSS,DATA,CHRG,UNTS,TOT,LNS,MOD,CPT,LNK,RLNK,IBSS1,LTOT,LUNT,REC,LST,FST
"RTN","IBCEF22",196,0)
 S IBS="",IBLN=0
"RTN","IBCEF22",197,0)
 F  S IBS=$O(IBX1(IBS)) Q:IBS=""  D
"RTN","IBCEF22",198,0)
 . S LST=$O(IBX1(IBS,""),-1)  ;we have to go through each level so must reset for each
"RTN","IBCEF22",199,0)
 . S LNK=0
"RTN","IBCEF22",200,0)
 . F  S LNK=$O(IBX1(IBS,LNK)) Q:('LNK!(LNK>LST))  S IBSS="" F  S IBSS=$O(IBX1(IBS,LNK,IBSS)) Q:IBSS=""  D
"RTN","IBCEF22",201,0)
 .. S DATA=IBX1(IBS,LNK,IBSS,2)
"RTN","IBCEF22",202,0)
 .. S CHRG=$P(DATA,U,2)
"RTN","IBCEF22",203,0)
 .. S UNTS=$P(DATA,U,3)
"RTN","IBCEF22",204,0)
 .. I UNTS=1 Q  ; if only one unit can't split
"RTN","IBCEF22",205,0)
 .. S TOT=UNTS*CHRG
"RTN","IBCEF22",206,0)
 .. I TOT<=9999999.99 Q  ; if the total is less tham max we don't need to split
"RTN","IBCEF22",207,0)
 .. S LNS=TOT\9999999.99
"RTN","IBCEF22",208,0)
 .. S MOD=TOT#9999999.99
"RTN","IBCEF22",209,0)
 .. I MOD S LNS=LNS+1
"RTN","IBCEF22",210,0)
 .. I CHRG>4999999.995 S LNS=UNTS  ; if the charge is greater than half the mas can't put more than one on a line.
"RTN","IBCEF22",211,0)
 .. S LUNT=UNTS\LNS
"RTN","IBCEF22",212,0)
 .. S MOD=UNTS#LNS
"RTN","IBCEF22",213,0)
 .. I MOD S LUNT=LUNT+1
"RTN","IBCEF22",214,0)
 .. F L=1:1:LNS D
"RTN","IBCEF22",215,0)
 ... N Q
"RTN","IBCEF22",216,0)
 ... S Q=$O(IBX1(IBS,""),-1)+1
"RTN","IBCEF22",217,0)
 ... I L=1 S Q=LNK
"RTN","IBCEF22",218,0)
 ... M IBX1(IBS,Q,IBSS)=IBX1(IBS,LNK,IBSS)
"RTN","IBCEF22",219,0)
 ... S $P(IBX1(IBS,Q,IBSS,2),U,3)=LUNT,$P(IBX1(IBS,Q,IBSS,2),U,4)=LUNT*CHRG
"RTN","IBCEF22",220,0)
 ... S $P(IBX1(IBS,Q,IBSS),U,1)=LUNT,$P(IBX1(IBS,Q,IBSS),U,2)=LUNT*CHRG
"RTN","IBCEF22",221,0)
 ... I L>1 S $P(IBX1(IBS,Q,IBSS,2),U,9)=""
"RTN","IBCEF22",222,0)
 ... S UNTS=UNTS-LUNT,LUNT=$S(UNTS>LUNT:LUNT,1:UNTS)
"RTN","IBCEF22",223,0)
 Q
"RTN","IBCEF22",224,0)
 ;
"RTN","IBCEF22",225,0)
 ; /Begin IB*2.0*608 - US9 - vd
"RTN","IBCEF22",226,0)
VC80I(LN)  ; Extracts the data for the "INS" record for VALUE CODE 80 Line item.
"RTN","IBCEF22",227,0)
 ; INPUT:      LN = Line counter
"RTN","IBCEF22",228,0)
 ;
"RTN","IBCEF22",229,0)
 N VC80REC,IBLOOP
"RTN","IBCEF22",230,0)
 S (VC80REC,IBLOOP)=""
"RTN","IBCEF22",231,0)
 F  S IBLOOP=$O(IBXSV("VC80",IBLOOP)) Q:IBLOOP=""  Q:$P(IBXSV("VC80",IBLOOP),U)=80
"RTN","IBCEF22",232,0)
 I IBLOOP]"" S VC80REC=IBXSV("VC80",IBLOOP)
"RTN","IBCEF22",233,0)
 ;
"RTN","IBCEF22",234,0)
 N UNIT,VC80LN
"RTN","IBCEF22",235,0)
 S UNIT=$P(VC80REC,U,2)    ; Service Unit Count
"RTN","IBCEF22",236,0)
 S VC80LN=LN+1             ; Get the next available line number.
"RTN","IBCEF22",237,0)
 ;
"RTN","IBCEF22",238,0)
 S $P(IBXSAVE("INPT",VC80LN),U,1)="0022"
"RTN","IBCEF22",239,0)
 S $P(IBXSAVE("INPT",VC80LN),U,2)="AAA00"
"RTN","IBCEF22",240,0)
 S $P(IBXSAVE("INPT",VC80LN),U,4)=$S(+IBLOOP:UNIT,1:0)
"RTN","IBCEF22",241,0)
 S $P(IBXSAVE("INPT",VC80LN),U,9)=0
"RTN","IBCEF22",242,0)
 S $P(IBXSAVE("INPT",VC80LN),U,13)=$S(+IBLOOP:"DA",1:"UN")
"RTN","IBCEF22",243,0)
 Q
"RTN","IBCEF22",244,0)
 ; /End IB*2.0*608
"RTN","IBCEF22",245,0)
 ;
"RTN","IBCEF31")
0^4^B67968602^B15832177
"RTN","IBCEF31",1,0)
IBCEF31 ;ALB/ESG - FORMATTER SPECIFIC BILL FLD FUNCTIONS - CONT ;14-NOV-03
"RTN","IBCEF31",2,0)
 ;;2.0;INTEGRATED BILLING;**155,296,349,400,432,488,516,592,608**;21-MAR-94;Build 90
"RTN","IBCEF31",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF31",4,0)
 ;
"RTN","IBCEF31",5,0)
 Q
"RTN","IBCEF31",6,0)
 ;
"RTN","IBCEF31",7,0)
ALLTYP(IBIFN) ; returns codes to translate to ALL ins types on a bill
"RTN","IBCEF31",8,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",9,0)
 N IBX,Z
"RTN","IBCEF31",10,0)
 F Z=1:1:3 S $P(IBX,U,Z)=$$INSTYP(IBIFN,Z)
"RTN","IBCEF31",11,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",12,0)
 Q IBX
"RTN","IBCEF31",13,0)
 ;
"RTN","IBCEF31",14,0)
INSTYP(IBIFN,SEQ) ; Returns insurance type code for an ins on a bill
"RTN","IBCEF31",15,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",16,0)
 ; SEQ = sequence (1,2,3) of insurance wanted - prim, second, tert
"RTN","IBCEF31",17,0)
 ;       Default is current insurance co
"RTN","IBCEF31",18,0)
 ;
"RTN","IBCEF31",19,0)
 N IBA,Z
"RTN","IBCEF31",20,0)
 ;
"RTN","IBCEF31",21,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",22,0)
 S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ))
"RTN","IBCEF31",23,0)
 ;Codes 1:HMO;2:COMMERCIAL;3:MEDICARE;4:MEDICAID;5:GROUP POLICY;9:OTHER
"RTN","IBCEF31",24,0)
 I Z D
"RTN","IBCEF31",25,0)
 . S IBA=$P($G(^DIC(36,Z,3)),U,9)
"RTN","IBCEF31",26,0)
 . I $$MCRWNR^IBEFUNC(Z) S IBA=3   ; force Medicare (WNR) definition to be correct
"RTN","IBCEF31",27,0)
 . I IBA="" S IBA=5 ;Default is group policy - 5 if blank
"RTN","IBCEF31",28,0)
 ;
"RTN","IBCEF31",29,0)
 Q $G(IBA)
"RTN","IBCEF31",30,0)
 ;
"RTN","IBCEF31",31,0)
POLTYP(IBIFN,IBSEQ) ; Returns ins electronic policy type code for one
"RTN","IBCEF31",32,0)
 ;   ins policy on a bill
"RTN","IBCEF31",33,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",34,0)
 ; IBSEQ = sequence (1,2,3) of ins policy wanted - prim, second, tert
"RTN","IBCEF31",35,0)
 ;       Default is current insurance co
"RTN","IBCEF31",36,0)
 ;
"RTN","IBCEF31",37,0)
 N IBPLAN,IBPLTYP
"RTN","IBCEF31",38,0)
 ;
"RTN","IBCEF31",39,0)
 I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",40,0)
 S IBPLAN=$G(^IBA(355.3,+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U,18),0))
"RTN","IBCEF31",41,0)
 S IBPLTYP=$P(IBPLAN,U,15)
"RTN","IBCEF31",42,0)
 ;
"RTN","IBCEF31",43,0)
 ; esg - 06/30/05 - IB*2.0*296 - Force Medicare (WNR) to be correct
"RTN","IBCEF31",44,0)
 ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) the same as CMS-1500
"RTN","IBCEF31",45,0)
 ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=2 S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 ';'
"RTN","IBCEF31",46,0)
 ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A
"RTN","IBCEF31",47,0)
 N FT S FT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592
"RTN","IBCEF31",48,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),(FT=2!(FT=7)) S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 same for J430D
"RTN","IBCEF31",49,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),FT=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A  ;JRA IB*2.0*592 Use 'FT' vs function call
"RTN","IBCEF31",50,0)
 ;
"RTN","IBCEF31",51,0)
 I IBPLTYP="" S IBPLTYP="CI" ;Default is commercial - 'CI'
"RTN","IBCEF31",52,0)
 I IBPLTYP="MX" D
"RTN","IBCEF31",53,0)
 . I $P(IBPLAN,U,14)'="","AB"[$P(IBPLAN,U,14) S IBPLTYP="M"_$P(IBPLAN,U,14) Q
"RTN","IBCEF31",54,0)
 . S IBPLTYP="CI"
"RTN","IBCEF31",55,0)
 Q $G(IBPLTYP)
"RTN","IBCEF31",56,0)
 ;
"RTN","IBCEF31",57,0)
ALLPTYP(IBIFN) ; returns insurance policy type codes for ALL ins on a bill
"RTN","IBCEF31",58,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",59,0)
 N IBX,Z S IBX=""
"RTN","IBCEF31",60,0)
 F Z=1:1:3 I $D(^DGCR(399,IBIFN,"I"_Z)) S $P(IBX,U,Z)=$$POLTYP(IBIFN,Z)
"RTN","IBCEF31",61,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",62,0)
 Q IBX
"RTN","IBCEF31",63,0)
 ;
"RTN","IBCEF31",64,0)
PGDX(DXCNT,IBX0,IBXDA,IBXLN,IBXCOL,IBXSIZE,IBXSAVE) ; Subroutine - Checks for Diagnosis Codes (Dx) beyond 
"RTN","IBCEF31",65,0)
 ; the first four, that relate to the current Dx position passed in DXCNT.
"RTN","IBCEF31",66,0)
 ; This subroutine stores the Diagnosis Codes in output global using display parameters (IBXLN,IBXCOL)
"RTN","IBCEF31",67,0)
 ;  THE PAGE IS ALWAYS 1 NOW SO WE DON'T NEED 4 LINES BELOW  BAA *488*
"RTN","IBCEF31",68,0)
 ; If DXCNT is 1, check for Dx's 5,9,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",69,0)
 ; If DXCNT is 2, check for Dx's 6,10,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",70,0)
 ; If DXCNT is 3, check for Dx's 7,11,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",71,0)
 ; If DXCNT is 4, check for Dx's 8,12,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",72,0)
 ;
"RTN","IBCEF31",73,0)
 ; Input: DXCNT= position of current Dx (from 1 to 4)
"RTN","IBCEF31",74,0)
 ;        IBX0= zero-level of file 364.7 of current Dx
"RTN","IBCEF31",75,0)
 ;        IBXDA= ien# of file 364.6 of current Dx
"RTN","IBCEF31",76,0)
 ;        IBXLN IBXCOL= line# & Column# of current Dx
"RTN","IBCEF31",77,0)
 ;        IBXSIZE= size counter
"RTN","IBCEF31",78,0)
 ;        IBXSAVE("DX")= local array with all Dx's on current bill
"RTN","IBCEF31",79,0)
 ;
"RTN","IBCEF31",80,0)
 ;  For patch *488* 
"RTN","IBCEF31",81,0)
 ;  S DXNM = 12  This is the number of diagnosis on a 1500 form  
"RTN","IBCEF31",82,0)
 ;  S IBPG=1  This is the page number.  All 12 print on page 1
"RTN","IBCEF31",83,0)
 N IBPG,VAL
"RTN","IBCEF31",84,0)
 S IBPG=1
"RTN","IBCEF31",85,0)
 I '$D(IBXSAVE("DX",DXCNT)) Q
"RTN","IBCEF31",86,0)
 S VAL=$P($$ICD9^IBACSV(+IBXSAVE("DX",DXCNT)),U)   ; resolve Dx pointer
"RTN","IBCEF31",87,0)
 S VAL=$$FORMAT^IBCEF3(VAL,$G(IBX0),$G(IBXDA))  ;format Dx value
"RTN","IBCEF31",88,0)
 D SETGBL^IBCEFG(IBPG,IBXLN,IBXCOL,VAL,.IBXSIZE) ;store in output global
"RTN","IBCEF31",89,0)
 Q  ;PGDX
"RTN","IBCEF31",90,0)
 ;
"RTN","IBCEF31",91,0)
DXSV(IB,IBXSAVE) ; output formatter subroutine
"RTN","IBCEF31",92,0)
 ; save off DX codes in IBXSAVE("DX")
"RTN","IBCEF31",93,0)
 N Z,IBCT
"RTN","IBCEF31",94,0)
 S (Z,IBCT)=0
"RTN","IBCEF31",95,0)
 F  S Z=$O(IB(Z)) Q:'Z  I $G(IB(Z)) S IBCT=IBCT+1 M IBXSAVE("DX",IBCT)=IB(Z)
"RTN","IBCEF31",96,0)
 Q
"RTN","IBCEF31",97,0)
 ;
"RTN","IBCEF31",98,0)
AUTRF(IBXIEN,IBL,Z) ; returns auth # and referral# if room for both, separated by a space - IB*2.0*432
"RTN","IBCEF31",99,0)
 ; IBXIEN=  claim ien
"RTN","IBCEF31",100,0)
 ; IBL   =  field length-1 to allow for 1 blank space between numbers (28 for CMS 1500, 30 for UB-04)
"RTN","IBCEF31",101,0)
 ; Z     =  1 for PRIMARY, 2 for SECONDARY, 3 for TERTIARY
"RTN","IBCEF31",102,0)
 ; 
"RTN","IBCEF31",103,0)
 N IBXDATA,IBZ
"RTN","IBCEF31",104,0)
 Q:$G(IBXIEN)="" ""
"RTN","IBCEF31",105,0)
 ; if CMS 1500, find current codes
"RTN","IBCEF31",106,0)
 I $G(Z)="",$G(IBL)=28 S Z=$$COBN^IBCEF(IBXIEN)
"RTN","IBCEF31",107,0)
 Q:$G(Z)="" ""
"RTN","IBCEF31",108,0)
 ; if length not defined, default to shortest
"RTN","IBCEF31",109,0)
 S:IBL="" IBL=28
"RTN","IBCEF31",110,0)
 D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" AUTH CODE",,,IBXIEN)
"RTN","IBCEF31",111,0)
 D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" REFERRAL NUMBER","IBZ",,IBXIEN)
"RTN","IBCEF31",112,0)
 ; if length of auth and referral combined is too long, only return auth code
"RTN","IBCEF31",113,0)
 Q $S(IBZ="":IBXDATA,IBXDATA="":IBZ,$L(IBXDATA)+$L(IBZ)>IBL:IBXDATA,1:IBXDATA_" "_IBZ)
"RTN","IBCEF31",114,0)
 ;
"RTN","IBCEF31",115,0)
GRPNAME(IBIEN,IBXDATA) ; Populate IBXDATA with the Group Name(s).
"RTN","IBCEF31",116,0)
 ; MRD;IB*2.0*516 - Created this procedure as extract code for
"RTN","IBCEF31",117,0)
 ; ^IBA(364.5,199), N-ALL INSURANCE GROUP NAME.
"RTN","IBCEF31",118,0)
 N A,Z
"RTN","IBCEF31",119,0)
 F Z=1:1:3 I $D(^DGCR(399,IBIEN,"I"_Z)) D
"RTN","IBCEF31",120,0)
 . S IBXDATA(Z)=$$POLICY^IBCEF(IBIEN,15,Z) I IBXDATA(Z)'="" Q
"RTN","IBCEF31",121,0)
 . S A=$$POLICY^IBCEF(IBIEN,1,Z)           ; Pull piece 1, Ins. Type.
"RTN","IBCEF31",122,0)
 . I A'="" S IBXDATA(Z)=$P($G(^DIC(36,+A,0)),U)
"RTN","IBCEF31",123,0)
 . Q
"RTN","IBCEF31",124,0)
 Q
"RTN","IBCEF31",125,0)
 ;
"RTN","IBCEF31",126,0)
GRPNUM(IBXIEN,IBXDATA) ; Populate IBXDATA with the Group Number(s).
"RTN","IBCEF31",127,0)
 ; MRD;IB*2.0*516 - Created this procedure as extract code for
"RTN","IBCEF31",128,0)
 ; ^IBA(364.5,200), N-ALL INSURANCE GROUP NUMBER.
"RTN","IBCEF31",129,0)
 N Z
"RTN","IBCEF31",130,0)
 F Z=1:1:3 I $D(^DGCR(399,IBXIEN,"I"_Z)) S IBXDATA(Z)=$$POLICY^IBCEF(IBXIEN,3,Z)
"RTN","IBCEF31",131,0)
 Q
"RTN","IBCEF31",132,0)
 ;
"RTN","IBCEF31",133,0)
CMNDATA(IBXIEN,IBPROC,FLD,INT) ;JRA;IB*2.0*608 Return data for specified Certificate of Medical Necessity (CMN) field.
"RTN","IBCEF31",134,0)
 ;Created to return data for a specific CMN field, which is a subfield of file 399, field 304 (Procedure).  Returns data
"RTN","IBCEF31",135,0)
 ; in External format by default.
"RTN","IBCEF31",136,0)
 ;
"RTN","IBCEF31",137,0)
 ;Input:  IBXIEN = Internal bill/claim number
"RTN","IBCEF31",138,0)
 ;        IBPROC = Procedure # (subscript in ^DGCR)
"RTN","IBCEF31",139,0)
 ;        FLD    = Field number of desired field
"RTN","IBCEF31",140,0)
 ;        INT    = Flag set to 'I' if the subfield's Internal value is to be returned (optional)
"RTN","IBCEF31",141,0)
 ;
"RTN","IBCEF31",142,0)
 ;Output: VAL    = External (or optionally Internal) value of the CMN subfield specified by FLD
"RTN","IBCEF31",143,0)
 ;
"RTN","IBCEF31",144,0)
 Q:('$G(IBXIEN)!('$G(FLD)!('$G(IBPROC)))) ""
"RTN","IBCEF31",145,0)
 S INT=$G(INT)
"RTN","IBCEF31",146,0)
 N ND,VAL,X
"RTN","IBCEF31",147,0)
 S ND=IBPROC_","_IBXIEN
"RTN","IBCEF31",148,0)
 S VAL=$$GET1^DIQ(399.0304,ND,FLD,INT)
"RTN","IBCEF31",149,0)
 Q VAL
"RTN","IBCEF31",150,0)
 ;
"RTN","IBCEF31",151,0)
CMNDEX(IBXIEN,IBXSAVE) ;JRA;IB*2.0*608 Data Extract for LQ, CMN and MEA segments
"RTN","IBCEF31",152,0)
 Q:'$G(IBXIEN)
"RTN","IBCEF31",153,0)
 ;
"RTN","IBCEF31",154,0)
 N CMNREQ,ND,X,IBXDATA
"RTN","IBCEF31",155,0)
 ;Get Procedure Links for all Procedures on the claim.
"RTN","IBCEF31",156,0)
 D OUTPT^IBCEF11(IBXIEN,0) Q:'$D(IBXDATA)
"RTN","IBCEF31",157,0)
 N LP,Z,CNT
"RTN","IBCEF31",158,0)
 S LP=0 F  S LP=$O(IBXDATA(LP)) Q:'+LP  D
"RTN","IBCEF31",159,0)
 . S CNT=$G(CNT)+1
"RTN","IBCEF31",160,0)
 . Q:'$D(IBXDATA(LP,"CPLNK"))
"RTN","IBCEF31",161,0)
 . S ND=IBXDATA(LP,"CPLNK")
"RTN","IBCEF31",162,0)
 . S ND=ND_","_IBXIEN_","
"RTN","IBCEF31",163,0)
 . S CMNREQ=$$GET1^DIQ(399.0304,ND,23,"I")
"RTN","IBCEF31",164,0)
 . S:CMNREQ="" CMNREQ=0
"RTN","IBCEF31",165,0)
 . Q:'+CMNREQ
"RTN","IBCEF31",166,0)
 . S Z=$G(Z)+1
"RTN","IBCEF31",167,0)
 . S IBXSAVE("CMNDEX",Z)=IBXDATA(LP,"CPLNK")_U_CNT
"RTN","IBCEF31",168,0)
 Q
"RTN","IBCEF31",169,0)
 ;
"RTN","IBCEF31",170,0)
FRM(IBXIEN,IBXSAVE) ;JRA;IB*2.0*608 Data Extract for FRM segment
"RTN","IBCEF31",171,0)
 Q:'$G(IBXIEN)
"RTN","IBCEF31",172,0)
 ;
"RTN","IBCEF31",173,0)
 N CMNREQ,CNT,DEL,IBXDATA,LP,ND,PAIRQ,QUIT,RESPTYP,X,Z,Z1
"RTN","IBCEF31",174,0)
 ;Get Procedure Data for all Procedures on the claim.
"RTN","IBCEF31",175,0)
 D OUTPT^IBCEF11(IBXIEN,0) Q:'$D(IBXDATA)
"RTN","IBCEF31",176,0)
 S LP=0 F  S LP=$O(IBXDATA(LP)) Q:'+LP  D
"RTN","IBCEF31",177,0)
 . Q:'$D(IBXDATA(LP,"CPLNK"))
"RTN","IBCEF31",178,0)
 . S CNT=$G(CNT)+1
"RTN","IBCEF31",179,0)
 . S ND=IBXDATA(LP,"CPLNK")
"RTN","IBCEF31",180,0)
 . S ND=ND_","_IBXIEN_","
"RTN","IBCEF31",181,0)
 . S CMNREQ=$$GET1^DIQ(399.0304,ND,23,"I")
"RTN","IBCEF31",182,0)
 . S:CMNREQ="" CMNREQ=0
"RTN","IBCEF31",183,0)
 . Q:'+CMNREQ
"RTN","IBCEF31",184,0)
 . S Z=$G(Z)+1
"RTN","IBCEF31",185,0)
 . ;WHAT FORM
"RTN","IBCEF31",186,0)
 . N DATA,FORM,FLD,FLDS,INTEXT,QUES,QUESNUM,X
"RTN","IBCEF31",187,0)
 . S FORM=$TR($$GET1^DIQ(399.0304,ND,"24:3","I"),"-")  ; get the form number to figure what fields go with it
"RTN","IBCEF31",188,0)
 . Q:FORM=""  ; quit if no form number
"RTN","IBCEF31",189,0)
 . ;
"RTN","IBCEF31",190,0)
 . S FLDS=$P($T(@FORM),";;",2,9999)   ; get all the associated data fields from below
"RTN","IBCEF31",191,0)
 . ;
"RTN","IBCEF31",192,0)
 . N PAIREDQA
"RTN","IBCEF31",193,0)
 . ;Parse FLDS to get DD field, question number, type of response (2=Y/N, 3=text/code, 4=date, 5=percent/decimal), and the response data.
"RTN","IBCEF31",194,0)
 . F X=1:1 S QUES=$P(FLDS,"~",X)  Q:QUES=""  D
"RTN","IBCEF31",195,0)
 .. S FLD=$P(QUES,U)
"RTN","IBCEF31",196,0)
 .. S QUESNUM=$P(QUES,U,2)
"RTN","IBCEF31",197,0)
 .. S RESPTYP=$P(QUES,U,3)
"RTN","IBCEF31",198,0)
 .. I RESPTYP=4 S INTEXT="I"
"RTN","IBCEF31",199,0)
 .. E  S INTEXT=$P(QUES,U,4) S:INTEXT="" INTEXT="E"
"RTN","IBCEF31",200,0)
 .. S DATA=$$GET1^DIQ(399.0304,ND,FLD,INTEXT)
"RTN","IBCEF31",201,0)
 .. ;
"RTN","IBCEF31",202,0)
 .. ; KLUDGE; On form CMN10126 If 4A or 3A is blank, don't send the other (which means get rid of the previous Q/A)
"RTN","IBCEF31",203,0)
 .. ; same for 4B/3B
"RTN","IBCEF31",204,0)
 .. I FORM="CMN10126",".3A.3B.4A.4B."[QUESNUM S PAIRQ=0 D  Q:PAIRQ
"RTN","IBCEF31",205,0)
 ... I QUESNUM="3A"!(QUESNUM="3B") S PAIREDQA(QUESNUM)=DATA Q
"RTN","IBCEF31",206,0)
 ... I QUESNUM="4A",$G(PAIREDQA("3A"))="" S PAIRQ=1 Q
"RTN","IBCEF31",207,0)
 ... I QUESNUM="4B",$G(PAIREDQA("3B"))="" S PAIRQ=1 Q
"RTN","IBCEF31",208,0)
 ..;
"RTN","IBCEF31",209,0)
 .. Q:DATA=""  ;Do not include FRM rec for unanswered questions
"RTN","IBCEF31",210,0)
 .. ;
"RTN","IBCEF31",211,0)
 .. S:RESPTYP=2 DATA=$E(DATA)  ; only want Y or N
"RTN","IBCEF31",212,0)
 .. I QUESNUM=4,"YN"'[DATA S DATA="W"
"RTN","IBCEF31",213,0)
 .. S:RESPTYP=4 DATA=$$DT^IBCEFG1(DATA,"","D8")  ;YYYYMMDD date format
"RTN","IBCEF31",214,0)
 .. ;Procedure# has a 1 to many ratio with Question# but can't have 2 subscripts so combine into 1, ordering IBXSAVE by Question#.
"RTN","IBCEF31",215,0)
 .. S IBXSAVE("FRM",(Z_"_"_(X/10)))=QUESNUM_U
"RTN","IBCEF31",216,0)
 .. S $P(IBXSAVE("FRM",(Z_"_"_(X/10))),U,RESPTYP)=DATA
"RTN","IBCEF31",217,0)
 .. S $P(IBXSAVE("FRM",(Z_"_"_(X/10))),U,6)=CNT
"RTN","IBCEF31",218,0)
 ;
"RTN","IBCEF31",219,0)
 ;Re-subscript IBXSAVE with sequential integers as current subscript format will not work with Output Formatter.
"RTN","IBCEF31",220,0)
 S (Z,Z1)=0 F  S Z=$O(IBXSAVE("FRM",Z)) Q:'Z  S Z1=Z1+1,IBXSAVE("FRM",Z1)=IBXSAVE("FRM",Z),DEL(Z)=""
"RTN","IBCEF31",221,0)
 S Z=0 F  S Z=$O(DEL(Z)) Q:'Z  K IBXSAVE("FRM",Z)
"RTN","IBCEF31",222,0)
 Q
"RTN","IBCEF31",223,0)
 ;
"RTN","IBCEF31",224,0)
PTWT(IBXIEN) ;JRA;IB*2.0*608 Return CMN Patient Weight from 1st Service Line # that has it (or NULL if none)
"RTN","IBCEF31",225,0)
 Q:'$G(IBXIEN)
"RTN","IBCEF31",226,0)
 N FOUND,IBPROC,IBXSAVE,PTWT
"RTN","IBCEF31",227,0)
 D CMNDEX(IBXIEN,.IBXSAVE)
"RTN","IBCEF31",228,0)
 S (FOUND,Z)=0,PTWT="" F  S Z=$O(IBXSAVE("CMNDEX",Z)) Q:Z=""  D  Q:FOUND
"RTN","IBCEF31",229,0)
 . S IBPROC=+IBXSAVE("CMNDEX",Z) Q:'IBPROC 
"RTN","IBCEF31",230,0)
 . S PTWT=$$CMNDATA(IBXIEN,IBPROC,24.03) S:PTWT FOUND=1
"RTN","IBCEF31",231,0)
 Q PTWT
"RTN","IBCEF31",232,0)
 ;
"RTN","IBCEF31",233,0)
 ;JRA;IB*2.0*608 Tags CMN484 & CMN10126 added
"RTN","IBCEF31",234,0)
 ; FIELD#^QUESTION#^RESPONSE_TYPE^INT/EXT
"RTN","IBCEF31",235,0)
CMN484 ;;24.1^1A^3~24.102^1B^5~24.103^1C^4~24.107^2^3^I~24.108^3^3^I~24.109^4^2^I~24.11^5^3~24.111^6A^3~24.113^6B^5~24.114^6C^4~24.104^7^2~24.105^8^2~24.106^9^2~24.115^C^3
"RTN","IBCEF31",236,0)
 ;
"RTN","IBCEF31",237,0)
CMN10126 ;;24.201^1^2~24.202^2^2~24.204^3A^3~24.219^3B^3~24.203^4A^3~24.218^4B^3~24.205^5^3^I~24.206^6^3~24.207^7^2~24.208^8A^3~24.209^8B^5~24.21^8C^3~24.211^8D^3~24.212^8E^5~24.213^8F^3~24.215^8G^3~24.216^8H^5~24.214^9^3^I
"RTN","IBCEF31",238,0)
 ;
"RTN","IBCEFG7")
0^33^B54668730^B51790981
"RTN","IBCEFG7",1,0)
IBCEFG7 ;ALB/TMP - OUTPUT FORMATTER GENERIC FORM PROCESSING ;06-MAR-96
"RTN","IBCEFG7",2,0)
 ;;2.0;INTEGRATED BILLING;**52,84,96,51,137,191,320,608**;21-MAR-94;Build 90
"RTN","IBCEFG7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEFG7",4,0)
 ;
"RTN","IBCEFG7",5,0)
 Q
"RTN","IBCEFG7",6,0)
 ;
"RTN","IBCEFG7",7,0)
 ;/IB*2*608 (vd) - US2486 added the parameter IBRSBTST to indicate a claim is a "TEST"
"RTN","IBCEFG7",8,0)
 ; that is being RESUBMITTED and assists with the COB Output Formatter data.
"RTN","IBCEFG7",9,0)
FORM(IBFORM,IBQUE,IBNOASK,IBQDT,ZTSK,IBABORT,IBRSBTST) ;For ien IBFORM, extract data using
"RTN","IBCEFG7",10,0)
 ;    output generater
"RTN","IBCEFG7",11,0)
 ; IBQUE = the output queue for transmitted forms or the printer queue
"RTN","IBCEFG7",12,0)
 ;          for printed output
"RTN","IBCEFG7",13,0)
 ; IBNOASK = flag that says user interaction for queuing is not needed
"RTN","IBCEFG7",14,0)
 ;           0 or null = ask, 1 = don't ask
"RTN","IBCEFG7",15,0)
 ; IBQDT = the date/time to queue the job (optional)
"RTN","IBCEFG7",16,0)
 ;
"RTN","IBCEFG7",17,0)
 ; Sets ZTSK only if job is queued
"RTN","IBCEFG7",18,0)
 ;
"RTN","IBCEFG7",19,0)
 ; IBABORT = output parameter which says user aborted forms output.
"RTN","IBCEFG7",20,0)
 ;           Pass by reference.  The $$QUEUE function returned false.
"RTN","IBCEFG7",21,0)
 ;
"RTN","IBCEFG7",22,0)
 ; IBRSBTST = 1, this indicates the claim is being resubmitted as a "TEST" claim and should be
"RTN","IBCEFG7",23,0)
 ;                             used by the OUTPUT FORMATTER entries to determine what COB information is
"RTN","IBCEFG7",24,0)
 ;                             going out.  - IB*2.0*608 (vd)  US2486
"RTN","IBCEFG7",25,0)
 ;
"RTN","IBCEFG7",26,0)
 N IBF2,IBTYP,POP,ZTIO,ZTRTN,ZTDESC,ZTSAVE,ZTREQ,ZTDTH,ZTREQ
"RTN","IBCEFG7",27,0)
 S IBTYP=$P($G(^IBE(353,IBFORM,2)),U,2),IBQUE=$G(IBQUE),IBABORT=0
"RTN","IBCEFG7",28,0)
 G:$S(IBTYP'="S":$G(^IBE(353,IBFORM,"EXT"))=""&($G(^IBE(353,+$P($G(^IBE(353,IBFORM,2)),U,5),"EXT"))=""),1:'$G(IBIFN)) FORMQ
"RTN","IBCEFG7",29,0)
 I IBTYP="P",IBQUE="" D DEV(IBFORM) G:$G(POP) FORMQ
"RTN","IBCEFG7",30,0)
 I IBTYP="T" D:$G(IBNOASK)  Q:$G(IBNOASK)  I '$$QUEUE(IBFORM) S:$O(^TMP("IBRESUBMIT",$J,0)) ^TMP("IBRESUBMIT",$J)="ABORT" S IBABORT=1 Q
"RTN","IBCEFG7",31,0)
 . S ZTRTN="FORMOUT^IBCEFG7",ZTIO="",ZTDESC="OUTPUT FORMATTER - FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")="",ZTDTH=$S($G(IBQDT):IBQDT,1:$$NOW^XLFDT())
"RTN","IBCEFG7",32,0)
 . S:$D(^TMP("IBRESUBMIT",$J)) ZTSAVE("^TMP(""IBRESUBMIT"",$J)")="",ZTSAVE("^TMP(""IBNOT"",$J)")="",ZTSAVE("^TMP(""IBRESUBMIT"",$J,")="",ZTSAVE("^TMP(""IBNOT"",$J,")=""
"RTN","IBCEFG7",33,0)
 . I $D(^TMP("IBSELX",$J)) S ZTSAVE("^TMP(""IBSELX"",$J,")="",ZTSAVE("^TMP(""IBSELX"",$J)")=""
"RTN","IBCEFG7",34,0)
 . S:'$G(DUZ) DUZ=.5
"RTN","IBCEFG7",35,0)
 . D ^%ZTLOAD
"RTN","IBCEFG7",36,0)
 I '$G(ZTSK) D FORMOUT
"RTN","IBCEFG7",37,0)
FORMQ Q
"RTN","IBCEFG7",38,0)
 ;
"RTN","IBCEFG7",39,0)
FORMOUT ; Queued job entrypoint - IBFORM needs to be defined
"RTN","IBCEFG7",40,0)
 ; IBQUE needs to be defined if using default transmission output
"RTN","IBCEFG7",41,0)
 N IB2,IBTYP,IBPAR
"RTN","IBCEFG7",42,0)
 K ^TMP("IBXDATA",$J)
"RTN","IBCEFG7",43,0)
 S ZTREQ="@"
"RTN","IBCEFG7",44,0)
 S IB2=$G(^IBE(353,IBFORM,2)),IBPAR=+$P(IB2,U,5),IBTYP=$P(IB2,U,2)
"RTN","IBCEFG7",45,0)
 ;
"RTN","IBCEFG7",46,0)
 ; Execute PRE-PROCESSOR
"RTN","IBCEFG7",47,0)
 I IBTYP'="S" D FPRE(IBFORM,IBPAR,.IBXERR)
"RTN","IBCEFG7",48,0)
 G:$G(IBXERR)'="" FOUTQ
"RTN","IBCEFG7",49,0)
 ;
"RTN","IBCEFG7",50,0)
 ; Extract records - this should include call(s) to $$EXTRACT^IBCEFG()
"RTN","IBCEFG7",51,0)
 I IBTYP'="S" D
"RTN","IBCEFG7",52,0)
 .I $G(^IBE(353,IBFORM,"EXT"))'="" X ^("EXT") ;Form extract
"RTN","IBCEFG7",53,0)
 .I $G(^IBE(353,IBFORM,"EXT"))="",$G(^IBE(353,IBPAR,"EXT"))'="" X ^("EXT") ;Parent form extract
"RTN","IBCEFG7",54,0)
 I IBTYP="S" D  G Q1
"RTN","IBCEFG7",55,0)
 .N PARAM,Z,Z0
"RTN","IBCEFG7",56,0)
 .S PARAM(1)="BILL-SEARCH",Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEFG7",57,0)
 .S Z=$P(Z0,U,21) S:Z="" Z="P" S PARAM(2)=$P($G(^DGCR(399,IBIFN,"I"_($F("PST",Z)-1))),U),PARAM(3)=$S($P(Z0,U,5)<3:"I",1:"O")
"RTN","IBCEFG7",58,0)
 .S Z=$$EXTRACT^IBCEFG(IBFORM,IBIFN,1,.PARAM)
"RTN","IBCEFG7",59,0)
 ;
"RTN","IBCEFG7",60,0)
 G:'$D(^TMP("IBXDATA",$J)) FOUTQ
"RTN","IBCEFG7",61,0)
 ;
"RTN","IBCEFG7",62,0)
 ; If an output routine exists, use it, otherwise use the generic ones
"RTN","IBCEFG7",63,0)
 I $G(^IBE(353,IBFORM,"OUT"))'="" X ^("OUT") G FOUTQ
"RTN","IBCEFG7",64,0)
 I $G(^IBE(353,IBFORM,"OUT"))="",$G(^IBE(353,IBPAR,"OUT"))'="" X ^("OUT") G FOUTQ
"RTN","IBCEFG7",65,0)
 ;
"RTN","IBCEFG7",66,0)
 I IBTYP="P" D PRINT(IBFORM) D:'$D(ZTQUEUED) ^%ZISC G FOUTQ
"RTN","IBCEFG7",67,0)
 I IBTYP="T" D:$G(IBQUE)'="" TRANSMIT(IBFORM,IBQUE) G FOUTQ
"RTN","IBCEFG7",68,0)
 ;
"RTN","IBCEFG7",69,0)
FOUTQ D FPOST(IBFORM,IBPAR,.IBXERR) ; Execute POST-PROCESSOR, if any
"RTN","IBCEFG7",70,0)
 K ^TMP("IBXDATA",$J),^TMP("IBXEDIT",$J)
"RTN","IBCEFG7",71,0)
Q1 Q
"RTN","IBCEFG7",72,0)
 ;
"RTN","IBCEFG7",73,0)
PRINT(IBFORM) ; Print data from extract global for form IBFORM
"RTN","IBCEFG7",74,0)
 ; Extract records - this should include call(s) to $$EXTRACT^IBCEFG()
"RTN","IBCEFG7",75,0)
 N IB1,IB2,IB3,IBREC
"RTN","IBCEFG7",76,0)
 ;LOOP THROUGH RECORD/PAGE/LINE/COL
"RTN","IBCEFG7",77,0)
 S IBREC="" F  S IBREC=$O(^TMP("IBXDATA",$J,IBREC)) Q:IBREC=""  D  ;Rec
"RTN","IBCEFG7",78,0)
 . ;Page/line
"RTN","IBCEFG7",79,0)
 . F IB1=1:1:+$O(^TMP("IBXDATA",$J,IBREC,""),-1) W:IB1>1 @IOF W ?0 F IB2=1:1:+$O(^TMP("IBXDATA",$J,IBREC,IB1,""),-1) W:IB2>1 ! S IB3="" D
"RTN","IBCEFG7",80,0)
 .. ; Column
"RTN","IBCEFG7",81,0)
 .. F  S IB3=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2,IB3)) Q:IB3=""  W ?(IB3-1),^(IB3)
"RTN","IBCEFG7",82,0)
 . ;Only print form feed if more records to print - not on last record
"RTN","IBCEFG7",83,0)
 . I $O(^TMP("IBXDATA",$J,IBREC))'="" W @IOF
"RTN","IBCEFG7",84,0)
 Q
"RTN","IBCEFG7",85,0)
 ;
"RTN","IBCEFG7",86,0)
TRANSMIT(IBFORM,IBQUE) ; Send data from extract global to queue IBQUE
"RTN","IBCEFG7",87,0)
 ;IBFORM = ien of the form to be transmitted (required)
"RTN","IBCEFG7",88,0)
 N IB1,IB2,IB3,IBREC,IBOUT,IBCT,IBSUB,Z,XMDUZ,XMSUBJ,XMBODY,XMTO
"RTN","IBCEFG7",89,0)
 K ^TMP("IBXTXMT",$J),^TMP("IBX",$J)
"RTN","IBCEFG7",90,0)
 Q:$G(IBQUE)=""
"RTN","IBCEFG7",91,0)
 ;
"RTN","IBCEFG7",92,0)
 S IBDELIM=$P($G(^IBE(353,+$S($P($G(^IBE(353,IBFORM,2)),U,5):$P(^(2),U,5),1:IBFORM),2)),U,7)
"RTN","IBCEFG7",93,0)
 S:IBDELIM="" IBDELIM="^"
"RTN","IBCEFG7",94,0)
 ;Loop through record/page/line/column
"RTN","IBCEFG7",95,0)
 S IBREC="",(IBSIZE,IBCT)=0,IBMSG=1
"RTN","IBCEFG7",96,0)
 F  S IBREC=$O(^TMP("IBXDATA",$J,IBREC)) Q:IBREC=""  D
"RTN","IBCEFG7",97,0)
 .S ^TMP("IBX",$J,IBREC)=IBCT
"RTN","IBCEFG7",98,0)
 .S IB1="" F  S IB1=$O(^TMP("IBXDATA",$J,IBREC,IB1)) Q:IB1=""  D
"RTN","IBCEFG7",99,0)
 ..S (IB2,IBOUT)=""
"RTN","IBCEFG7",100,0)
 ..F  S IB2=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2)) D:IB2=""&$L(IBOUT) MSG(IBREC,IBOUT,.IBMSG,.IBSIZE,.IBCT) Q:IB2=""  D
"RTN","IBCEFG7",101,0)
 ...S IB3="" F  S IB3=$O(^TMP("IBXDATA",$J,IBREC,IB1,IB2,IB3)) Q:IB3=""  S IBP=^(IB3) S:IBP?.E1L.E IBP=$$UP^XLFSTR(IBP) S $P(IBOUT,IBDELIM,IB3)=IBP
"RTN","IBCEFG7",102,0)
 ;
"RTN","IBCEFG7",103,0)
 ;Send mail message(s) for extract
"RTN","IBCEFG7",104,0)
 S XMDUZ=DUZ,XMTO(IBQUE)="",IBSUB="OUTPUT FORMATTER: "_$P($G(^IBE(353,IBFORM,0)),U)
"RTN","IBCEFG7",105,0)
 S Z="" F  S Z=$O(^TMP("IBXTXMT",$J,Z)) Q:'Z  S XMBODY="^TMP(""IBXTXMT"","_$J_","_Z_")",XMSUBJ=IBSUB_" ("_Z_")" D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCEFG7",106,0)
 ;
"RTN","IBCEFG7",107,0)
 K ^TMP("IBXTXMT",$J),^TMP("IBX",$J)
"RTN","IBCEFG7",108,0)
 Q
"RTN","IBCEFG7",109,0)
 ;
"RTN","IBCEFG7",110,0)
MSG(IBREC,LINE,MSG,SIZE,CT) ; Set up global for transmission line
"RTN","IBCEFG7",111,0)
 ; IBREC = record number being processed
"RTN","IBCEFG7",112,0)
 ; LINE = actual text to be output in mail message line
"RTN","IBCEFG7",113,0)
 ; MSG  = the message seq # to output this record in (pass by reference)
"RTN","IBCEFG7",114,0)
 ; SIZE = current size of the message (pass by reference)
"RTN","IBCEFG7",115,0)
 ; CT   = the last line # in message for the text (pass by reference)
"RTN","IBCEFG7",116,0)
 N Z,Z0,LLEN
"RTN","IBCEFG7",117,0)
 S LLEN=$L(LINE)
"RTN","IBCEFG7",118,0)
 I (LLEN+SIZE)>30000 D
"RTN","IBCEFG7",119,0)
 .Q:'$G(^TMP("IBX",$J,IBREC))  ;Record itself is > 30000 - let it go
"RTN","IBCEFG7",120,0)
 .S (SIZE,CT)=0,Z=$G(^TMP("IBX",$J,IBREC)),^(IBREC)=0
"RTN","IBCEFG7",121,0)
 .F  S Z=$O(^TMP("IBXTXMT",$J,MSG,Z)) Q:'Z  S CT=CT+1,Z0=^(Z),^TMP("IBXTXMT",$J,MSG+1,CT)=Z0,SIZE=SIZE+$L(Z0) K ^TMP("IBXTXMT",$J,MSG,Z)
"RTN","IBCEFG7",122,0)
 .S MSG=MSG+1
"RTN","IBCEFG7",123,0)
 S CT=CT+1,^TMP("IBXTXMT",$J,MSG,CT)=LINE,SIZE=SIZE+LLEN
"RTN","IBCEFG7",124,0)
 Q
"RTN","IBCEFG7",125,0)
 ;
"RTN","IBCEFG7",126,0)
DEV(IBFORM,NOQ) ;
"RTN","IBCEFG7",127,0)
 N IBFTYPE
"RTN","IBCEFG7",128,0)
 S:'$G(NOQ) %ZIS="Q" S %ZIS("A")="Output Device: "
"RTN","IBCEFG7",129,0)
 S %ZIS("B")=$P($G(^IBE(353,IBFORM,0)),"^",2)
"RTN","IBCEFG7",130,0)
 D ^%ZIS
"RTN","IBCEFG7",131,0)
 G:POP DEVQ
"RTN","IBCEFG7",132,0)
 I $D(IO("Q")) D  G DEVQ
"RTN","IBCEFG7",133,0)
 .S ZTRTN="FORMOUT^IBCEFG7",ZTDESC="PRINT FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")="" K ZTIO
"RTN","IBCEFG7",134,0)
 .I $D(^TMP("IBQONE",$J)) D
"RTN","IBCEFG7",135,0)
 ..S IBJ="",IBFTYPE="IBCFP"_$S($P($G(^IBE(353,IBFORM,2)),U,5):$P(^(2),U,5),1:IBFORM)
"RTN","IBCEFG7",136,0)
 ..S ZTSAVE("^XTMP(IBFTYPE,$J,")=""
"RTN","IBCEFG7",137,0)
 .D ^%ZTLOAD K IO("Q") D HOME^%ZIS
"RTN","IBCEFG7",138,0)
 .I $G(IBFTYPE)'="" K ^XTMP(IBFTYPE,$J)
"RTN","IBCEFG7",139,0)
 .I $D(ZTSK) W !!,"This job has been queued.  The task number is "_ZTSK_"."
"RTN","IBCEFG7",140,0)
 U IO
"RTN","IBCEFG7",141,0)
DEVQ Q
"RTN","IBCEFG7",142,0)
 ;
"RTN","IBCEFG7",143,0)
QUEUE(IBFORM) ; Ask to queue transmission
"RTN","IBCEFG7",144,0)
 N Y,DIR,OKAY
"RTN","IBCEFG7",145,0)
 S OKAY=1
"RTN","IBCEFG7",146,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you want to queue this transmission" W !
"RTN","IBCEFG7",147,0)
 D ^DIR K DIR
"RTN","IBCEFG7",148,0)
 I $D(DTOUT)!$D(DUOUT) S OKAY=0 G QUEQ
"RTN","IBCEFG7",149,0)
 I 'Y D  G QUEQ
"RTN","IBCEFG7",150,0)
 .S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you want to run this job without queuing it now"
"RTN","IBCEFG7",151,0)
 .W ! D ^DIR K DIR
"RTN","IBCEFG7",152,0)
 .I 'Y S OKAY=0
"RTN","IBCEFG7",153,0)
 ; - queue job to run
"RTN","IBCEFG7",154,0)
 W !!,"Please enter the date and time to execute this job...",!
"RTN","IBCEFG7",155,0)
 S ZTRTN="FORMOUT^IBCEFG7",ZTIO="",ZTDESC="OUTPUT FORMATTER - FORM: "_$P($G(^IBE(353,IBFORM,0)),U),ZTSAVE("IB*")=""
"RTN","IBCEFG7",156,0)
 S:$D(^TMP("IBRESUBMIT",$J)) ZTSAVE("^TMP(""IBRESUBMIT"",$J)")="",ZTSAVE("^TMP(""IBNOT"",$J)")="",ZTSAVE("^TMP(""IBRESUBMIT"",$J,")="",ZTSAVE("^TMP(""IBNOT"",$J,")=""
"RTN","IBCEFG7",157,0)
 I $D(^TMP("IBSELX",$J)) S ZTSAVE("^TMP(""IBSELX"",$J,")="",ZTSAVE("^TMP(""IBSELX"",$J)")=""
"RTN","IBCEFG7",158,0)
 D ^%ZTLOAD
"RTN","IBCEFG7",159,0)
 I $G(ZTSK) W !!,"This job has been queued.  The task number is "_ZTSK_"."
"RTN","IBCEFG7",160,0)
QUEQ Q OKAY
"RTN","IBCEFG7",161,0)
 ;
"RTN","IBCEFG7",162,0)
FPRE(IBFORM,IBPAR,IBXERR) ; Executes pre-processor
"RTN","IBCEFG7",163,0)
 I $G(^IBE(353,IBFORM,"FPRE"))'="" X ^("FPRE") ;Form pre-processor
"RTN","IBCEFG7",164,0)
 I $G(^IBE(353,IBFORM,"FPRE"))="",$G(^IBE(353,IBPAR,"FPRE"))'="" X ^("FPRE") ;Parent form pre-processor
"RTN","IBCEFG7",165,0)
 Q
"RTN","IBCEFG7",166,0)
 ;
"RTN","IBCEFG7",167,0)
FPOST(IBFORM,IBPAR,IBXERR) ; Executes post-processor
"RTN","IBCEFG7",168,0)
 I $G(^IBE(353,IBFORM,"FPOST"))'="" X ^("FPOST") ;Form post-processor
"RTN","IBCEFG7",169,0)
 I $G(^IBE(353,IBFORM,"FPOST"))="",$G(^IBE(353,IBPAR,"FPOST"))'="" X ^("FPOST") ;Parent form post-processor
"RTN","IBCEFG7",170,0)
 Q
"RTN","IBCEFG7",171,0)
 ;
"RTN","IBCEFG7",172,0)
FMFLD(IBDA) ;Return the file#field for fileman field referenced as a data
"RTN","IBCEFG7",173,0)
 ; element in file 364.7's IBDA entry.
"RTN","IBCEFG7",174,0)
 N Z,Z0,ND0
"RTN","IBCEFG7",175,0)
 S Z0=+$P($G(^IBA(364.7,IBDA,0)),U,3),ND0=$G(^IBA(364.5,+Z0,0))
"RTN","IBCEFG7",176,0)
 I $P(ND0,U,3)'="F"!($P(ND0,U,6)="") S Z="" G FLDQ
"RTN","IBCEFG7",177,0)
 S Z=$P(ND0,U,5),Z1=$P(ND0,U,6)
"RTN","IBCEFG7",178,0)
 I Z1[":" D  ;Navigation
"RTN","IBCEFG7",179,0)
 . S Z2=$O(^DD(+Z,"B",$P(Z1,":"),"")) Q:'Z2
"RTN","IBCEFG7",180,0)
 . S Z=+$P($P($G(^DD(399,Z2,0)),U,2),"P",2)
"RTN","IBCEFG7",181,0)
 . I Z S Z1=$P(Z1,":",2)
"RTN","IBCEFG7",182,0)
 I Z S Z=Z_"#"_$O(^DD(+Z,"B",Z1,""))
"RTN","IBCEFG7",183,0)
FLDQ Q Z
"RTN","IBCEFG7",184,0)
 ;
"RTN","IBCEPTC2")
0^8^B56837195^B53543437
"RTN","IBCEPTC2",1,0)
IBCEPTC2 ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS LIST MGR ;01/20/05
"RTN","IBCEPTC2",2,0)
 ;;2.0;INTEGRATED BILLING;**296,320,348,349,547,592,608**;21-MAR-94;Build 90
"RTN","IBCEPTC2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC2",4,0)
 ; IA 3337 for file 430.3
"RTN","IBCEPTC2",5,0)
 ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
"RTN","IBCEPTC2",6,0)
 ;
"RTN","IBCEPTC2",7,0)
HDR ;
"RTN","IBCEPTC2",8,0)
 K VALMHDR
"RTN","IBCEPTC2",9,0)
 ; The following line was replaced by the subsequent couple of lines of code  -  (vd) IB*2*608 - US1908
"RTN","IBCEPTC2",10,0)
 ;/IB*2*608 beginning
"RTN","IBCEPTC2",11,0)
 ; I IBLOC S VALMHDR(1)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)" Q
"RTN","IBCEPTC2",12,0)
 I IBLOC D  Q
"RTN","IBCEPTC2",13,0)
 . S VALMHDR(1)="** T = Test Claim"
"RTN","IBCEPTC2",14,0)
 . S VALMHDR(2)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",15,0)
 . Q
"RTN","IBCEPTC2",16,0)
 ;/IB*2*608 ending
"RTN","IBCEPTC2",17,0)
 ;
"RTN","IBCEPTC2",18,0)
 S VALMHDR(1)="** A claim may appear multiple times if transmitted more than once. **"
"RTN","IBCEPTC2",19,0)
 ;
"RTN","IBCEPTC2",20,0)
 I $G(IBSORT)=1 D
"RTN","IBCEPTC2",21,0)
 . S VALMHDR(2)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",22,0)
 . Q
"RTN","IBCEPTC2",23,0)
 ;
"RTN","IBCEPTC2",24,0)
 I $G(IBSORT)=2 D
"RTN","IBCEPTC2",25,0)
 . S VALMHDR(2)="** T = Test Claim   ** R = Batch Rejected"
"RTN","IBCEPTC2",26,0)
 . S VALMHDR(3)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",27,0)
 . Q
"RTN","IBCEPTC2",28,0)
 ;
"RTN","IBCEPTC2",29,0)
 Q
"RTN","IBCEPTC2",30,0)
 ;
"RTN","IBCEPTC2",31,0)
INIT ;
"RTN","IBCEPTC2",32,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCEPTC2",33,0)
 D BLD
"RTN","IBCEPTC2",34,0)
 Q
"RTN","IBCEPTC2",35,0)
 ;
"RTN","IBCEPTC2",36,0)
BLD ; Build display lines
"RTN","IBCEPTC2",37,0)
 N IBDA,IBS1,IBS2,IBIFN,IB0,IBX,IBCNT,IBLEV1,IBBDA
"RTN","IBCEPTC2",38,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J),^TMP("IB_PREV_CLAIM_SELECT",$J),^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",39,0)
 S IBCNT=0
"RTN","IBCEPTC2",40,0)
 I $O(^TMP("IB_PREV_CLAIM",$J,""))="" D  G BLDQ
"RTN","IBCEPTC2",41,0)
 . S IBX=" ** NO PREVIOUSLY "_$S(IBLOC:"PRINTED",1:"TRANSMITTED")_" CLAIMS EXIST FOR SEARCH CRITERIA SELECTED **"
"RTN","IBCEPTC2",42,0)
 . D WRT(IBX,"",0,0,"","S","",.IBCNT,0)
"RTN","IBCEPTC2",43,0)
 ;
"RTN","IBCEPTC2",44,0)
 S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D
"RTN","IBCEPTC2",45,0)
 . ; First level sort
"RTN","IBCEPTC2",46,0)
 . ; for sort by batch, display batch ID and transmit date
"RTN","IBCEPTC2",47,0)
 . I IBSORT=1 D
"RTN","IBCEPTC2",48,0)
 .. S IBLEV1="  Batch: "_$P(IBS1,U,2)_"  Last Transmitted: "_$G(^TMP("IB_PREV_CLAIM",$J,IBS1))
"RTN","IBCEPTC2",49,0)
 .. S IBBDA=+$O(^IBA(364.1,"B",$P(IBS1,U,2),0))
"RTN","IBCEPTC2",50,0)
 .. I $P(IBS1,U,3) S IBLEV1=IBLEV1_" ** Test"
"RTN","IBCEPTC2",51,0)
 .. I $P(IBS1,U,4) S IBLEV1=IBLEV1_" ** Rejected"
"RTN","IBCEPTC2",52,0)
 .. Q
"RTN","IBCEPTC2",53,0)
 . ;
"RTN","IBCEPTC2",54,0)
 . ; for sort by payer, display ins co name and payer address
"RTN","IBCEPTC2",55,0)
 . I IBSORT=2 D
"RTN","IBCEPTC2",56,0)
 .. S IBLEV1="  "_$P(IBS1,U)_"  "_$$CURRINS(+$G(^TMP("IB_PREV_CLAIM",$J,IBS1)),0)
"RTN","IBCEPTC2",57,0)
 .. Q
"RTN","IBCEPTC2",58,0)
 . ;
"RTN","IBCEPTC2",59,0)
 . ; output sort header line
"RTN","IBCEPTC2",60,0)
 . D WRT(IBLEV1,"",0,0,IBSORT,"S","",IBCNT,0) ; Add header line
"RTN","IBCEPTC2",61,0)
 . ;
"RTN","IBCEPTC2",62,0)
 . I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA)=VALMCNT
"RTN","IBCEPTC2",63,0)
 . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)) Q:'IBDA  D
"RTN","IBCEPTC2",64,0)
 .. N IBX,IBTEST
"RTN","IBCEPTC2",65,0)
 .. ;S IBIFN=+$G(^IBA(364,+IBDA,0)),IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",66,0)
 .. S IBIFN=$S(IBLOC:+IBDA,1:+$G(^IBA(364,+IBDA,0))),IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",67,0)
 .. S IBX=$P(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA),U,1)
"RTN","IBCEPTC2",68,0)
 .. I IBX=1 S IBTEST=0    ; live 364 transmission
"RTN","IBCEPTC2",69,0)
 .. I IBX=2 S IBTEST=1    ; test 364 transmission
"RTN","IBCEPTC2",70,0)
 .. I IBX=3 S IBTEST=1    ; test 361.4 transmission
"RTN","IBCEPTC2",71,0)
 .. D WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,"S","",.IBCNT,0,IBTEST)
"RTN","IBCEPTC2",72,0)
 .. I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA,VALMCNT)=IBIFN_U_IBCNT
"RTN","IBCEPTC2",73,0)
 .. Q
"RTN","IBCEPTC2",74,0)
 . Q
"RTN","IBCEPTC2",75,0)
 ;
"RTN","IBCEPTC2",76,0)
BLDQ Q
"RTN","IBCEPTC2",77,0)
 ;
"RTN","IBCEPTC2",78,0)
EXIT ; Clean up code
"RTN","IBCEPTC2",79,0)
 ;
"RTN","IBCEPTC2",80,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J)
"RTN","IBCEPTC2",81,0)
 K ^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC2",82,0)
 K ^TMP("IB_PREV_CLAIM_LIST_DX",$J)
"RTN","IBCEPTC2",83,0)
 K ^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",84,0)
 D CLEAR^VALM1
"RTN","IBCEPTC2",85,0)
 Q
"RTN","IBCEPTC2",86,0)
 ;
"RTN","IBCEPTC2",87,0)
WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,IBHDR,IBPAGE,IBSTOP,IBTEST) ; Wrt/output
"RTN","IBCEPTC2",88,0)
 ;
"RTN","IBCEPTC2",89,0)
 N IBX,IB0,Z,IBCNT,ARSTAT
"RTN","IBCEPTC2",90,0)
 S IBCNT=IBPAGE
"RTN","IBCEPTC2",91,0)
 ;
"RTN","IBCEPTC2",92,0)
 I 'IBIFN D  G WRTQ
"RTN","IBCEPTC2",93,0)
 . ;
"RTN","IBCEPTC2",94,0)
 . ; for report output
"RTN","IBCEPTC2",95,0)
 . I IBREP="R" D  Q
"RTN","IBCEPTC2",96,0)
 .. S Z="",$P(Z,"=",133)=""
"RTN","IBCEPTC2",97,0)
 .. D SET(Z,1,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",98,0)
 .. D SET(IBS1,2,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",99,0)
 .. Q
"RTN","IBCEPTC2",100,0)
 . ;
"RTN","IBCEPTC2",101,0)
 . ; for ListMan screen output
"RTN","IBCEPTC2",102,0)
 . D SET(IBS1,0,IBDA,IBREP,IBHDR,IBCNT+1,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",103,0)
 . Q
"RTN","IBCEPTC2",104,0)
 ;
"RTN","IBCEPTC2",105,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",106,0)
 S IBX=$$FO^IBCNEUT1($P(IB0,U,1),8)        ; claim#
"RTN","IBCEPTC2",107,0)
 S IBX=IBX_$S(IBSORT=2&$G(IBTEST):"T",1:" ")_" "
"RTN","IBCEPTC2",108,0)
 ;JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCEPTC2",109,0)
 S IBX=IBX_$S($P(IB0,U,19)=2:"1500 ",$P(IB0,U,19)=7:"J430D",1:"UB04 ")_" "
"RTN","IBCEPTC2",110,0)
 S Z=$$INPAT^IBCEF(IBIFN) S IBX=IBX_$S(Z:"INPT ",1:"OUTPT")
"RTN","IBCEPTC2",111,0)
 S IBX=IBX_$J($P(IB0,U,21),3)_"  "
"RTN","IBCEPTC2",112,0)
 S Z=$$EXTERNAL^DILFD(399,.13,"",$P(IB0,U,13))
"RTN","IBCEPTC2",113,0)
 S IBX=IBX_$$FO^IBCNEUT1(Z,11)_"  "             ; claim status
"RTN","IBCEPTC2",114,0)
 S ARSTAT=+$P($$BILL^RCJIBFN2(IBIFN),U,2)       ; ien
"RTN","IBCEPTC2",115,0)
 S ARSTAT=$P($G(^PRCA(430.3,ARSTAT,0)),U,2)     ; abbreviation
"RTN","IBCEPTC2",116,0)
 S IBX=IBX_$$FO^IBCNEUT1(ARSTAT,4)              ; a/r status display
"RTN","IBCEPTC2",117,0)
 ;
"RTN","IBCEPTC2",118,0)
 I IBSORT=1 D                    ; sort by batch
"RTN","IBCEPTC2",119,0)
 . N Z,IBZ,IBXDATA
"RTN","IBCEPTC2",120,0)
 . ; Print current payer, payer address, other payers, pat name
"RTN","IBCEPTC2",121,0)
 . D F^IBCEF("N-CURR INSURANCE COMPANY NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",122,0)
 . S IBX=IBX_$$FO^IBCNEUT1(IBZ,25)_" "                     ; ins co name
"RTN","IBCEPTC2",123,0)
 . S IBX=IBX_$$FO^IBCNEUT1($$CURRINS(IBIFN,1),29)_" "      ; address
"RTN","IBCEPTC2",124,0)
 . K IBZ D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",125,0)
 . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),15)_" "      ; other payer
"RTN","IBCEPTC2",126,0)
 . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTC2",127,0)
 . S IBX=IBX_$E(Z,1,18)                       ; patient name
"RTN","IBCEPTC2",128,0)
 . ;
"RTN","IBCEPTC2",129,0)
 . ; set line into list
"RTN","IBCEPTC2",130,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEPTC2",131,0)
 . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",132,0)
 . S IBX=""
"RTN","IBCEPTC2",133,0)
 . ;
"RTN","IBCEPTC2",134,0)
 . I $G(IBZ(2))'="" D    ; other payer #2 if it exists ;;IB*2.0*592 changed $J("",98) to 99
"RTN","IBCEPTC2",135,0)
 .. S IBX=$J("",99)_$E($P(IBZ(2),U,1),1,15)
"RTN","IBCEPTC2",136,0)
 .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",137,0)
 .. Q
"RTN","IBCEPTC2",138,0)
 . Q
"RTN","IBCEPTC2",139,0)
 ;
"RTN","IBCEPTC2",140,0)
 I IBSORT=2 D                    ; sort by payer
"RTN","IBCEPTC2",141,0)
 . N Z,IBZ
"RTN","IBCEPTC2",142,0)
 . S IBX=IBX_"  "
"RTN","IBCEPTC2",143,0)
 . ; Print other payers, patient name, date last trans, batch #, reject flag
"RTN","IBCEPTC2",144,0)
 . D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",145,0)
 . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),18)_"  "   ; oth payer#1
"RTN","IBCEPTC2",146,0)
 . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTC2",147,0)
 . S IBX=IBX_$$FO^IBCNEUT1(Z,18)_"    "                  ; patient name
"RTN","IBCEPTC2",148,0)
 . ;
"RTN","IBCEPTC2",149,0)
 . S Z=+$P($G(^IBA(364,+IBDA,0)),U,2) ; Batch ptr
"RTN","IBCEPTC2",150,0)
 . S:IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^DGCR(399,IBIFN,"S")),U,14),"1"),17)     ; date last printed *547*
"RTN","IBCEPTC2",151,0)
 . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^IBA(364.1,+Z,1)),U,3)\1,"1"),17)     ; date last transmitted
"RTN","IBCEPTC2",152,0)
 . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($P($G(^IBA(364.1,Z,0)),U,1),10)   ; batch#
"RTN","IBCEPTC2",153,0)
 . S:IBLOC IBX=IBX_"" ; no batch#
"RTN","IBCEPTC2",154,0)
 . S IBX=IBX_$S($P($G(^IBA(364.1,Z,0)),U,5):" R",1:"")  ; batch rejected flag
"RTN","IBCEPTC2",155,0)
 . ;
"RTN","IBCEPTC2",156,0)
 . ; set line into list
"RTN","IBCEPTC2",157,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEPTC2",158,0)
 . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",159,0)
 . S IBX=""
"RTN","IBCEPTC2",160,0)
 . ;
"RTN","IBCEPTC2",161,0)
 . I $G(IBZ(2))'="" D       ; other payer#2 if it exists
"RTN","IBCEPTC2",162,0)
 .. S IBX=$J("",45)_$E($P(IBZ(2),U),1,18)
"RTN","IBCEPTC2",163,0)
 .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",164,0)
 .. Q
"RTN","IBCEPTC2",165,0)
 . Q
"RTN","IBCEPTC2",166,0)
 ;
"RTN","IBCEPTC2",167,0)
WRTQ I IBREP="S" S IBPAGE=IBCNT
"RTN","IBCEPTC2",168,0)
 Q
"RTN","IBCEPTC2",169,0)
 ;
"RTN","IBCEPTC2",170,0)
SET(IBX,IBLINE,IBDA,IBREP,IBHDR,IBCNT,VALMCNT,IBPAGE,IBSTOP) ;
"RTN","IBCEPTC2",171,0)
 N Q,Z,IBZ
"RTN","IBCEPTC2",172,0)
 S IBZ=IBX,IBX=""
"RTN","IBCEPTC2",173,0)
 I IBREP="R" D  Q
"RTN","IBCEPTC2",174,0)
 . D:($Y+5)>IOSL!'IBPAGE HDR^IBCEPTC1(IBHDR,IBSORT,.IBPAGE,.IBSTOP) D
"RTN","IBCEPTC2",175,0)
 . I IBLINE F Z=1:1:IBLINE W !
"RTN","IBCEPTC2",176,0)
 . W:'IBSTOP IBZ
"RTN","IBCEPTC2",177,0)
 . Q
"RTN","IBCEPTC2",178,0)
 ;
"RTN","IBCEPTC2",179,0)
 ; only display the counter if we have a line with the claim#
"RTN","IBCEPTC2",180,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCEPTC2",181,0)
 I IBDA,$TR($E(IBZ,1,8)," ")'="" S IBZ=$$FO^IBCNEUT1($J(IBCNT,3),6)_IBZ
"RTN","IBCEPTC2",182,0)
 I IBDA,$TR($E(IBZ,1,8)," ")="" S IBZ="      "_IBZ
"RTN","IBCEPTC2",183,0)
 ;
"RTN","IBCEPTC2",184,0)
 S ^TMP("IB_PREV_CLAIM_LIST",$J,VALMCNT,0)=IBZ
"RTN","IBCEPTC2",185,0)
 S ^TMP("IB_PREV_CLAIM_LIST",$J,"IDX",VALMCNT,IBCNT)=""
"RTN","IBCEPTC2",186,0)
 I IBDA,$TR($E(IBZ,1,8)," ")'="" S ^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBCNT)=VALMCNT_U_IBDA
"RTN","IBCEPTC2",187,0)
 Q
"RTN","IBCEPTC2",188,0)
 ;
"RTN","IBCEPTC2",189,0)
CURRINS(IBIFN,TRUNC) ; Returns Current insurance address for given claim
"RTN","IBCEPTC2",190,0)
 ; TRUNC = truncate flag; 1 to truncate the address and city
"RTN","IBCEPTC2",191,0)
 N IBX,IBZ,L1,CITY,ST
"RTN","IBCEPTC2",192,0)
 D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
"RTN","IBCEPTC2",193,0)
 S L1=$G(IBZ(1)) I +$G(TRUNC) S L1=$E(L1,1,15)
"RTN","IBCEPTC2",194,0)
 S CITY=$G(IBZ(4)) I +$G(TRUNC) S CITY=$E(CITY,1,10)
"RTN","IBCEPTC2",195,0)
 S ST=$G(IBZ(5))
"RTN","IBCEPTC2",196,0)
 I ST S ST=$P($G(^DIC(5,ST,0)),U,2)
"RTN","IBCEPTC2",197,0)
 S IBX=L1_" "_CITY
"RTN","IBCEPTC2",198,0)
 I CITY'="",ST'="" S IBX=IBX_","_ST
"RTN","IBCEPTC2",199,0)
 E  S IBX=IBX_" "_ST
"RTN","IBCEPTC2",200,0)
 Q IBX
"RTN","IBCEPTC2",201,0)
 ;
"RTN","IBCEPTC3")
0^31^B91463160^B64803891
"RTN","IBCEPTC3",1,0)
IBCEPTC3 ;ALB/ESG - EDI PREVIOUSLY TRANSMITTED CLAIMS ACTIONS ;12/19/05
"RTN","IBCEPTC3",2,0)
 ;;2.0;INTEGRATED BILLING;**320,547,608**;21-MAR-94;Build 90
"RTN","IBCEPTC3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC3",4,0)
 ;
"RTN","IBCEPTC3",5,0)
 ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
"RTN","IBCEPTC3",6,0)
 ; IB*2.0*608 (vd) provided the ability to identify those claims that are resubmitted
"RTN","IBCEPTC3",7,0)
 ;                 and those that are skipped. (US2486)
"RTN","IBCEPTC3",8,0)
 Q
"RTN","IBCEPTC3",9,0)
 ;
"RTN","IBCEPTC3",10,0)
SELECT ; Select claims to resubmit
"RTN","IBCEPTC3",11,0)
 N IBIFN,IBZ,IBI,IBQ,DIR,VALMY,X,Y
"RTN","IBCEPTC3",12,0)
 D FULL^VALM1
"RTN","IBCEPTC3",13,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCEPTC3",14,0)
 S IBZ=0 F  S IBZ=$O(VALMY(IBZ)) Q:'IBZ  D
"RTN","IBCEPTC3",15,0)
 . S IBQ=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBZ)),IBI=+$P(IBQ,U,2),IBQ=+IBQ
"RTN","IBCEPTC3",16,0)
 . S IBIFN=$S(IBLOC:IBI,1:+$G(^IBA(364,IBI,0)))
"RTN","IBCEPTC3",17,0)
 . Q:'IBIFN
"RTN","IBCEPTC3",18,0)
 . D MARK(IBIFN,IBZ,IBQ,IBI,1,.VALMHDR)
"RTN","IBCEPTC3",19,0)
 S VALMBCK="R"
"RTN","IBCEPTC3",20,0)
 Q
"RTN","IBCEPTC3",21,0)
 ;
"RTN","IBCEPTC3",22,0)
SELBATCH ; Select a batch to resubmit 
"RTN","IBCEPTC3",23,0)
 ; Assumes IBSORT is defined
"RTN","IBCEPTC3",24,0)
 N DIC,DIR,X,Y,Z,IBQ,IBZ,IBI,IBDX,IBASK,IBOK,IBY,DTOUT,DUOUT
"RTN","IBCEPTC3",25,0)
 D FULL^VALM1
"RTN","IBCEPTC3",26,0)
 ; IB*2.0*547 Do not allow batch resubmit of locally printed claims
"RTN","IBCEPTC3",27,0)
 I IBLOC=1 D  G SELBQ
"RTN","IBCEPTC3",28,0)
 . S DIR(0)="EA",DIR("A",1)="This action is not available for Locally Printed Claims",DIR("A")="Press return to continue: "
"RTN","IBCEPTC3",29,0)
 I IBSORT'=1 D  G SELBQ
"RTN","IBCEPTC3",30,0)
 . S DIR(0)="EA",DIR("A",1)="This action is not available unless you chose to sort by batch",DIR("A")="Press return to continue: "
"RTN","IBCEPTC3",31,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC3",32,0)
 S DIC="^IBA(364.1,",DIC(0)="AEMQ",DIC("S")="I $D(^TMP(""IB_PREV_CLAIM_BATCH"",$J,+Y))"
"RTN","IBCEPTC3",33,0)
 D ^DIC K DIC
"RTN","IBCEPTC3",34,0)
 I Y'>0 G SELBQ
"RTN","IBCEPTC3",35,0)
 S IBY=+Y,VALMBG=+$G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY))
"RTN","IBCEPTC3",36,0)
 ;
"RTN","IBCEPTC3",37,0)
 S (IBOK,IBASK)=1
"RTN","IBCEPTC3",38,0)
 I $G(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")) D  G:'IBOK SELBQ
"RTN","IBCEPTC3",39,0)
 . S DIR(0)="YA",DIR("A",1)="This batch was previously selected.",DIR("A")="Do you want to de-select all claims in this batch?: ",DIR("B")="No"
"RTN","IBCEPTC3",40,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC3",41,0)
 . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEPTC3",42,0)
 . I Y S IBASK=0 K ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")
"RTN","IBCEPTC3",43,0)
 ;
"RTN","IBCEPTC3",44,0)
 S IBQ=0      ; last screen row# for claim
"RTN","IBCEPTC3",45,0)
 F  S IBQ=$O(^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,IBQ)) Q:'IBQ  D
"RTN","IBCEPTC3",46,0)
 . S IBZ=$G(^(IBQ))      ; IBIFN^selection#
"RTN","IBCEPTC3",47,0)
 . S Z=$P(IBZ,U,2)       ; selection#
"RTN","IBCEPTC3",48,0)
 . S IBDX=$G(^TMP("IB_PREV_CLAIM_LIST_DX",$J,+Z))   ; 1st screen row# for claim^364 ien
"RTN","IBCEPTC3",49,0)
 . S IBI=$P(IBDX,U,2)    ; 364 ien
"RTN","IBCEPTC3",50,0)
 . D MARK(+IBZ,Z,+IBDX,IBI,IBASK,.VALMHDR)
"RTN","IBCEPTC3",51,0)
 ;
"RTN","IBCEPTC3",52,0)
 I IBASK S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBY,"SEL")=1
"RTN","IBCEPTC3",53,0)
 ;
"RTN","IBCEPTC3",54,0)
SELBQ S VALMBCK="R"
"RTN","IBCEPTC3",55,0)
 Q
"RTN","IBCEPTC3",56,0)
 ;
"RTN","IBCEPTC3",57,0)
MARK(IBIFN,IBZ,IBQ,IBI,IBASK,VALMHDR) ; Mark claim as selected for resubmit
"RTN","IBCEPTC3",58,0)
 ; Returns VALMHDR killed if any selections/de-selections made
"RTN","IBCEPTC3",59,0)
 N DIR,X,Y
"RTN","IBCEPTC3",60,0)
 I $D(^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)) D  Q
"RTN","IBCEPTC3",61,0)
 . S Y=1
"RTN","IBCEPTC3",62,0)
 . I IBASK D
"RTN","IBCEPTC3",63,0)
 .. S DIR(0)="YA",DIR("B")="No",DIR("A",1)="Claim "_$P($G(^DGCR(399,IBIFN,0)),U)_" for entry # "_IBZ_" has already been selected",DIR("A")="Do you want to de-select it?: " W ! D ^DIR K DIR
"RTN","IBCEPTC3",64,0)
 . I Y=1 K ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN) S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)=" ",^TMP("IB_PREV_CLAIM_SELECT",$J)=^TMP("IB_PREV_CLAIM_SELECT",$J)-1 K VALMHDR
"RTN","IBCEPTC3",65,0)
 ;
"RTN","IBCEPTC3",66,0)
 S ^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)=IBQ,^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN,0)=IBI,^TMP("IB_PREV_CLAIM_SELECT",$J)=$G(^TMP("IB_PREV_CLAIM_SELECT",$J))+1
"RTN","IBCEPTC3",67,0)
 S $E(^TMP("IB_PREV_CLAIM_LIST",$J,IBQ,0),6)="*" K VALMHDR
"RTN","IBCEPTC3",68,0)
 Q
"RTN","IBCEPTC3",69,0)
 ;
"RTN","IBCEPTC3",70,0)
VIEW ; View claims selected
"RTN","IBCEPTC3",71,0)
 N IBCT,IBQUIT,DIR,X,Y,Z,Z0
"RTN","IBCEPTC3",72,0)
 D FULL^VALM1
"RTN","IBCEPTC3",73,0)
 I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  G VIEWQ
"RTN","IBCEPTC3",74,0)
 . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
"RTN","IBCEPTC3",75,0)
 W @IOF
"RTN","IBCEPTC3",76,0)
 S (IBQUIT,IBCT)=0
"RTN","IBCEPTC3",77,0)
 W !,+^TMP("IB_PREV_CLAIM_SELECT",$J)," claims selected:"
"RTN","IBCEPTC3",78,0)
 S Z="" F  S Z=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,Z)) Q:'Z  S Z0=+$G(^(Z)) D
"RTN","IBCEPTC3",79,0)
 . Q:'$D(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0))
"RTN","IBCEPTC3",80,0)
 . S IBCT=IBCT+1
"RTN","IBCEPTC3",81,0)
 . I '(IBCT#15) S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCEPTC3",82,0)
 .. S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC3",83,0)
 .. I 'Y S IBQUIT=1
"RTN","IBCEPTC3",84,0)
 . W !,"  ",$E(^TMP("IB_PREV_CLAIM_LIST",$J,Z0,0),7,47)
"RTN","IBCEPTC3",85,0)
 ;
"RTN","IBCEPTC3",86,0)
 G:IBQUIT VIEWQ
"RTN","IBCEPTC3",87,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC3",88,0)
 ;
"RTN","IBCEPTC3",89,0)
VIEWQ S VALMBCK="R"
"RTN","IBCEPTC3",90,0)
 Q
"RTN","IBCEPTC3",91,0)
 ;
"RTN","IBCEPTC3",92,0)
RESUB ; Resubmit selected claims
"RTN","IBCEPTC3",93,0)
 N DIR,DIRCTR,DIRLN,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEPTC3",94,0)
 N IB364,IBABORT,IBCLMNO,IBIFN,IBSKCTR,IBFSKIP,IBRSBTST,IBTYPPTC
"RTN","IBCEPTC3",95,0)
 N X,Y,Z1
"RTN","IBCEPTC3",96,0)
 ;/IB*2*608 - vd (US2486) - instituted the following variable to identify a claim as being resubmitted.
"RTN","IBCEPTC3",97,0)
 S IBRSBTST=0
"RTN","IBCEPTC3",98,0)
 D FULL^VALM1
"RTN","IBCEPTC3",99,0)
 I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D  G RESUBQ
"RTN","IBCEPTC3",100,0)
 . N DIR,X,Y
"RTN","IBCEPTC3",101,0)
 . S DIR(0)="EA",DIR("A")="No claims have been selected - Press return to continue " D ^DIR K DIR
"RTN","IBCEPTC3",102,0)
 ;
"RTN","IBCEPTC3",103,0)
 ; Ask user if resubmit as production or as test
"RTN","IBCEPTC3",104,0)
 S DIR(0)="SA^P:Production;T:Test Only"
"RTN","IBCEPTC3",105,0)
 S DIR("A")="Resubmit Claims: "
"RTN","IBCEPTC3",106,0)
 S DIR("B")="Production"
"RTN","IBCEPTC3",107,0)
 S DIR("?",1)="  Select Production to resubmit the claims to the payer for payment."
"RTN","IBCEPTC3",108,0)
 S DIR("?")="  Select Test to resubmit the claims as Test claims only."
"RTN","IBCEPTC3",109,0)
 ; IB*2.0*547  Only allow locally printed claims to resubmit as Test
"RTN","IBCEPTC3",110,0)
 W ! I IBLOC'=1 D ^DIR K DIR
"RTN","IBCEPTC3",111,0)
 I $D(DIRUT) G RESUBQ
"RTN","IBCEPTC3",112,0)
 S IBTYPPTC="TEST"
"RTN","IBCEPTC3",113,0)
 I IBLOC'=1,Y="P" S IBTYPPTC="PRODUCTION"
"RTN","IBCEPTC3",114,0)
 ;/IB*2*608 (vd) - The following line indicates the claim is being resubmitted as a "TEST" Claim and should be handled
"RTN","IBCEPTC3",115,0)
 ; special concerning the COB, OFFSET, PRIOR PAYMENTS calculations by the Output Formatter.  (US2486)
"RTN","IBCEPTC3",116,0)
 I IBTYPPTC="TEST" S IBRSBTST=1
"RTN","IBCEPTC3",117,0)
 ;
"RTN","IBCEPTC3",118,0)
 S DIR(0)="YA",DIR("B")="No"
"RTN","IBCEPTC3",119,0)
 S DIR("A",1)="You are about to resubmit "_+^TMP("IB_PREV_CLAIM_SELECT",$J)_" claims as "_IBTYPPTC_" claims."
"RTN","IBCEPTC3",120,0)
 S DIR("A")="Are you sure you want to continue?: "
"RTN","IBCEPTC3",121,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC3",122,0)
 I Y'=1 G RESUBQ
"RTN","IBCEPTC3",123,0)
 ;
"RTN","IBCEPTC3",124,0)
 ; OK to proceed and resubmit
"RTN","IBCEPTC3",125,0)
 W !!,"Resubmission in process ... "
"RTN","IBCEPTC3",126,0)
 ;
"RTN","IBCEPTC3",127,0)
 ; loop thru selected claims and set into scratch globals
"RTN","IBCEPTC3",128,0)
 S IBFSKIP=0
"RTN","IBCEPTC3",129,0)
 K ^TMP("IBRCBOLD",$J)
"RTN","IBCEPTC3",130,0)
 K ^TMP("IBSKIPPED",$J)   ;/IB*2*608 - vd
"RTN","IBCEPTC3",131,0)
 S IBIFN=0 F  S IBIFN=$O(^TMP("IB_PREV_CLAIM_SELECT",$J,IBIFN)) Q:'IBIFN  S Z1=+$G(^(IBIFN)),IB364=+$G(^(IBIFN,0)) I IB364 D
"RTN","IBCEPTC3",132,0)
 . ;
"RTN","IBCEPTC3",133,0)
 . I IBTYPPTC="TEST" D
"RTN","IBCEPTC3",134,0)
 .. S ^TMP("IBEDI_TEST_BATCH",$J,IB364)=""
"RTN","IBCEPTC3",135,0)
 .. S ^TMP("IBRESUBMIT",$J,IB364)=""
"RTN","IBCEPTC3",136,0)
 .. I Z1 D MARK(IBIFN,"",Z1,IB364,0,.VALMHDR)
"RTN","IBCEPTC3",137,0)
 .. Q
"RTN","IBCEPTC3",138,0)
 . ;
"RTN","IBCEPTC3",139,0)
 . I IBTYPPTC="PRODUCTION" D
"RTN","IBCEPTC3",140,0)
 .. ;/IB*2*680 (vd) - modified the following line for US2486 as shown below.
"RTN","IBCEPTC3",141,0)
 .. ; I '$$TXOK(IBIFN) S IBFSKIP=IBFSKIP+1 Q    ; transmission not allowed
"RTN","IBCEPTC3",142,0)
 .. I '$$TXOK(IBIFN) D  Q   ;transmission not allowed
"RTN","IBCEPTC3",143,0)
 ... S IBCLMNO=$$GET1^DIQ(399,IBIFN,.01)
"RTN","IBCEPTC3",144,0)
 ... S IBFSKIP=IBFSKIP+1
"RTN","IBCEPTC3",145,0)
 ... S ^TMP("IBSKIPPED",$J,IBCLMNO)=IBIFN  ; /IB*2*608 (vd) - Added to identify those claims that are Skipped
"RTN","IBCEPTC3",146,0)
 .. N Y S Y=$$ADDTBILL^IBCB1(IBIFN)  ; new entry in file 364 - "X" status
"RTN","IBCEPTC3",147,0)
 .. I '$P(Y,U,3) Q                   ; quit if new entry didn't get added
"RTN","IBCEPTC3",148,0)
 .. S ^TMP("IBSELX",$J,+Y)=""
"RTN","IBCEPTC3",149,0)
 .. S ^TMP("IBRCBOLD",$J,IB364)=""   ; save list of old transmit bills
"RTN","IBCEPTC3",150,0)
 .. I Z1 D MARK(IBIFN,"",Z1,IB364,0,.VALMHDR)
"RTN","IBCEPTC3",151,0)
 .. Q
"RTN","IBCEPTC3",152,0)
 . ;
"RTN","IBCEPTC3",153,0)
 . Q
"RTN","IBCEPTC3",154,0)
 ;
"RTN","IBCEPTC3",155,0)
 ; set top level of scratch globals based on test or production
"RTN","IBCEPTC3",156,0)
 I IBTYPPTC="TEST" S ^TMP("IBRESUBMIT",$J)="^^0^1",^TMP("IBEDI_TEST_BATCH",$J)=1
"RTN","IBCEPTC3",157,0)
 E  KILL ^TMP("IBRESUBMIT",$J),^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBONE",$J) S ^TMP("IBSELX",$J)=0
"RTN","IBCEPTC3",158,0)
 ;
"RTN","IBCEPTC3",159,0)
 ; resubmit call
"RTN","IBCEPTC3",160,0)
 D EN1^IBCE837B("","","",.IBABORT,$G(IBRSBTST)) ;/IB*2*608 (vd) - added the IBRSBTST parameter for US2486.
"RTN","IBCEPTC3",161,0)
 ;
"RTN","IBCEPTC3",162,0)
 ; if user aborted at the last minute, then get rid of the new entries
"RTN","IBCEPTC3",163,0)
 ; in file 364 that were added for production claim sending
"RTN","IBCEPTC3",164,0)
 I IBABORT D
"RTN","IBCEPTC3",165,0)
 . N IB,DIK,DA
"RTN","IBCEPTC3",166,0)
 . S IB=0 F  S IB=$O(^TMP("IBSELX",$J,IB)) Q:'IB  S DIK="^IBA(364,",DA=IB D ^DIK
"RTN","IBCEPTC3",167,0)
 . Q
"RTN","IBCEPTC3",168,0)
 ;
"RTN","IBCEPTC3",169,0)
 ; update EDI files for the old transmit bills
"RTN","IBCEPTC3",170,0)
 I 'IBABORT D
"RTN","IBCEPTC3",171,0)
 . N IB
"RTN","IBCEPTC3",172,0)
 . S IB=0 F  S IB=$O(^TMP("IBRCBOLD",$J,IB)) Q:'IB  D UPDEDI^IBCEM(IB,"R")
"RTN","IBCEPTC3",173,0)
 . Q
"RTN","IBCEPTC3",174,0)
 ;
"RTN","IBCEPTC3",175,0)
 ; cleanup
"RTN","IBCEPTC3",176,0)
 K ^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBRESUBMIT",$J),^TMP("IBSELX",$J),^TMP("IBRCBOLD",$J)
"RTN","IBCEPTC3",177,0)
 I '$O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) K ^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC3",178,0)
 S DIR(0)="EA"
"RTN","IBCEPTC3",179,0)
 S DIR("A",1)="Selected claims have been resubmitted as "_IBTYPPTC_"."
"RTN","IBCEPTC3",180,0)
 I IBFSKIP D
"RTN","IBCEPTC3",181,0)
 . S DIR("A",2)="Please note: Some claims were not eligible to be resubmitted as live claims."
"RTN","IBCEPTC3",182,0)
 . S DIR("A",3)=" These claims are still indicated as being selected."
"RTN","IBCEPTC3",183,0)
 . S DIR("A",4)="The following are the claims that were skipped:"
"RTN","IBCEPTC3",184,0)
 . S (DIRLN,IBCLMNO)="",IBSKCTR=0,DIRCTR=4
"RTN","IBCEPTC3",185,0)
 . F  S IBCLMNO=$O(^TMP("IBSKIPPED",$J,IBCLMNO)) Q:IBCLMNO=""  D
"RTN","IBCEPTC3",186,0)
 . . S IBSKCTR=IBSKCTR+1 ; Increment # of claims on the display line.
"RTN","IBCEPTC3",187,0)
 . . I IBSKCTR>6 D     ; Want no more than 6 claim numbers displayed per display line.
"RTN","IBCEPTC3",188,0)
 . . . S DIRCTR=DIRCTR+1,DIR("A",DIRCTR)=DIRLN   ; increment the DIR("A",...) display line and set the line.
"RTN","IBCEPTC3",189,0)
 . . . S IBSKCTR=1,DIRLN=""   ; reset the line segment ctr and clear the display line.
"RTN","IBCEPTC3",190,0)
 . . ;
"RTN","IBCEPTC3",191,0)
 . . S DIRLN=DIRLN_" "_IBCLMNO   ; Append the claim # to the existing display line.
"RTN","IBCEPTC3",192,0)
 . I +IBSKCTR S DIRCTR=DIRCTR+1,DIR("A",DIRCTR)=DIRLN
"RTN","IBCEPTC3",193,0)
 . ;
"RTN","IBCEPTC3",194,0)
 . Q
"RTN","IBCEPTC3",195,0)
 K ^TMP("IBSKIPPED",$J) ;/IB*2*608 (vd) - delete the temporary list of skipped claims after reporting them.
"RTN","IBCEPTC3",196,0)
 I IBABORT K DIR("A") S DIR("A",1)="No claims were resubmitted."
"RTN","IBCEPTC3",197,0)
 S DIR("A")="Press return to continue "
"RTN","IBCEPTC3",198,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC3",199,0)
 K VALMHDR
"RTN","IBCEPTC3",200,0)
 ;
"RTN","IBCEPTC3",201,0)
RESUBQ ;
"RTN","IBCEPTC3",202,0)
 S VALMBCK="R"
"RTN","IBCEPTC3",203,0)
 Q
"RTN","IBCEPTC3",204,0)
 ;
"RTN","IBCEPTC3",205,0)
REPORT ; Print report
"RTN","IBCEPTC3",206,0)
 ; Assumes IBSORT, IBDT1, IBDT2 defined
"RTN","IBCEPTC3",207,0)
 N IBACT,Z
"RTN","IBCEPTC3",208,0)
 D FULL^VALM1
"RTN","IBCEPTC3",209,0)
 F  S IBACT=0 D DEVSEL^IBCEPTC(.IBACT) Q:IBACT 
"RTN","IBCEPTC3",210,0)
 I IBACT'=99 D
"RTN","IBCEPTC3",211,0)
 . N IBREP
"RTN","IBCEPTC3",212,0)
 . S IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2)
"RTN","IBCEPTC3",213,0)
 ;
"RTN","IBCEPTC3",214,0)
 D HOME^%ZIS
"RTN","IBCEPTC3",215,0)
 S VALMBCK="R"
"RTN","IBCEPTC3",216,0)
 Q
"RTN","IBCEPTC3",217,0)
 ;
"RTN","IBCEPTC3",218,0)
CKSENT(VALMBCK) ; Make sure selected entries are transmitted
"RTN","IBCEPTC3",219,0)
 ;
"RTN","IBCEPTC3",220,0)
 N IBOK,DIR,X,Y
"RTN","IBCEPTC3",221,0)
 S IBOK=1
"RTN","IBCEPTC3",222,0)
 I $O(^TMP("IB_PREV_CLAIM_SELECT",$J,0)) D
"RTN","IBCEPTC3",223,0)
 . D FULL^VALM1
"RTN","IBCEPTC3",224,0)
 . S DIR(0)="YA",DIR("A",1)="You have selected "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" claims, but have not resubmitted them",DIR("A")="Are you sure you want to quit before you resubmit them?: ",DIR("B")="No"
"RTN","IBCEPTC3",225,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC3",226,0)
 . I Y'=1 S VALMBCK="R",IBOK=0
"RTN","IBCEPTC3",227,0)
 I IBOK S VALMBCK="Q"
"RTN","IBCEPTC3",228,0)
 Q
"RTN","IBCEPTC3",229,0)
 ;
"RTN","IBCEPTC3",230,0)
TXOK(IBIFN) ; Function determines if claim is OK for live resubmission
"RTN","IBCEPTC3",231,0)
 NEW OK,IB364,IBD,IBSTAT
"RTN","IBCEPTC3",232,0)
 S OK=0
"RTN","IBCEPTC3",233,0)
 ;/IB*2*608 (vd) - added the following line for US2486.
"RTN","IBCEPTC3",234,0)
 I $D(^IBM(361.1,"ABS",+$G(IBIFN),$$COBN^IBCEF(IBIFN))) G TXOKX  ; Not okay for claim w/EOB for this payer sequence
"RTN","IBCEPTC3",235,0)
 ;
"RTN","IBCEPTC3",236,0)
 I '$P($G(^DGCR(399,+$G(IBIFN),"TX")),U,2) G TXOKX                  ; last electronic extract date
"RTN","IBCEPTC3",237,0)
 I '$F(".2.3.4.","."_$P($G(^DGCR(399,IBIFN,0)),U,13)_".") G TXOKX   ; claim status
"RTN","IBCEPTC3",238,0)
 S IB364=+$$LAST364^IBCEF4(+$G(IBIFN)) I 'IB364 G TXOKX             ; transmit bill exists
"RTN","IBCEPTC3",239,0)
 S IBD=$G(^IBA(364,IB364,0)) I IBD="" G TXOKX
"RTN","IBCEPTC3",240,0)
 S IBSTAT=$P(IBD,U,3) I IBSTAT="X" G TXOKX                          ; already awaiting extract
"RTN","IBCEPTC3",241,0)
 S OK=1
"RTN","IBCEPTC3",242,0)
TXOKX ;
"RTN","IBCEPTC3",243,0)
 Q OK
"RTN","IBCEPTC3",244,0)
 ;
"RTN","IBCEU")
0^19^B119764859^B116893464
"RTN","IBCEU",1,0)
IBCEU ;ALB/TMP - EDI UTILITIES ;02-OCT-96
"RTN","IBCEU",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,207,232,349,432,592,608**;21-MAR-94;Build 90
"RTN","IBCEU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU",4,0)
 ; DBIA SUPPORTED REF: GET^XUA4A72 = 1625
"RTN","IBCEU",5,0)
 ; DBIA SUPPORTED REF: $$ESBLOCK^XUSESIG1 = 1557
"RTN","IBCEU",6,0)
 Q
"RTN","IBCEU",7,0)
 ;
"RTN","IBCEU",8,0)
TESTPT(DFN) ; Determine if pt is test pt
"RTN","IBCEU",9,0)
 ; Returns 1 if a test pt, 0 if not
"RTN","IBCEU",10,0)
 Q $E($P($G(^DPT(+DFN,0)),U,9),1,5)="00000"
"RTN","IBCEU",11,0)
 ;
"RTN","IBCEU",12,0)
MAINPRV(IBIFN) ; Returns name^id^ien^type code of 'main' prov on bill IBIFN
"RTN","IBCEU",13,0)
 N IBPRV,IBCOB,IBQ,Z
"RTN","IBCEU",14,0)
 D GETPRV(IBIFN,"3,4",.IBPRV)
"RTN","IBCEU",15,0)
 S IBQ="",IBCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",16,0)
 F Z=3,4 I $G(IBPRV(Z,1))'="" D  Q
"RTN","IBCEU",17,0)
 . S IBQ=IBPRV(Z,1),$P(IBQ,U,4)=Z
"RTN","IBCEU",18,0)
 . I $G(IBPRV(Z,1,IBCOB))'="" S $P(IBQ,U,2)=IBPRV(Z,1,IBCOB)
"RTN","IBCEU",19,0)
 Q IBQ
"RTN","IBCEU",20,0)
 ;
"RTN","IBCEU",21,0)
PRVOK(VAL,IBIFN) ; Check bill form & prov function agree
"RTN","IBCEU",22,0)
 ; VAL = internal value of prov function
"RTN","IBCEU",23,0)
 ;
"RTN","IBCEU",24,0)
 N OK,IBBT
"RTN","IBCEU",25,0)
 S OK=0
"RTN","IBCEU",26,0)
 Q:VAL="" OK
"RTN","IBCEU",27,0)
 Q:'IBIFN OK
"RTN","IBCEU",28,0)
 ; JWS;IB*2.0*592 US1108 - add Dental form (7) check
"RTN","IBCEU",29,0)
 S IBBT=$$FT^IBCEF(IBIFN) ; 2 If CMS-1500, 3 If UB-04, 7 if J430D Dental
"RTN","IBCEU",30,0)
 I IBBT=2!(IBBT=7) D
"RTN","IBCEU",31,0)
 . I VAL=1 S OK=1 Q   ; CMS-1500, REFERRING
"RTN","IBCEU",32,0)
 . I VAL=3 S OK=1 Q   ; CMS-1500, RENDERING
"RTN","IBCEU",33,0)
 . I VAL=5 S OK=1 Q   ; CMS-1500, SUPERVISING
"RTN","IBCEU",34,0)
 . I IBBT=7,VAL=6 S OK=1 Q  ;J430D, ASSISTANT SURGEON
"RTN","IBCEU",35,0)
 ; JWS;IB*2.0*592 US1108 - end
"RTN","IBCEU",36,0)
 I IBBT=7,$G(IBDR20)=103,'$$FILTERP^IBCSC10H(IBIFN,VAL) S OK=0
"RTN","IBCEU",37,0)
 I 'OK,IBBT=3 D
"RTN","IBCEU",38,0)
 . I VAL=1 S OK=1 Q   ; UB-04, REFERRING
"RTN","IBCEU",39,0)
 . I VAL=2 S OK=1 Q   ; UB-04, OPERATING
"RTN","IBCEU",40,0)
 . I VAL=3 S OK=1 Q   ; UB-04, RENDERING
"RTN","IBCEU",41,0)
 . I VAL=4 S OK=1 Q   ; UB-04, ATTENDING
"RTN","IBCEU",42,0)
 . I VAL=9 S OK=1 Q   ; UB-04, OTHER
"RTN","IBCEU",43,0)
 ;
"RTN","IBCEU",44,0)
 Q OK
"RTN","IBCEU",45,0)
 ;
"RTN","IBCEU",46,0)
PRVOK1(VAL,IBIFN) ; Check for both attending and rendering on bill
"RTN","IBCEU",47,0)
 N OK
"RTN","IBCEU",48,0)
 S OK=1
"RTN","IBCEU",49,0)
 Q:$$FT^IBCEF(IBIFN)=3 1  ; both are allowed on UB
"RTN","IBCEU",50,0)
 I $S("34"'[VAL:0,1:$D(^DGCR(399,IBIFN,"PRV","B",$S(VAL=3:4,1:3)))) D EN^DDIOL($S(VAL=3:"ATTENDING",1:"RENDERING")_" ALREADY EXISTS - CAN'T HAVE BOTH ON ONE BILL") S OK=0
"RTN","IBCEU",51,0)
 Q OK
"RTN","IBCEU",52,0)
 ;
"RTN","IBCEU",53,0)
SPEC(IBPRV,IBDT) ; Returns spec code for vp ien IBPRV from file 355.9
"RTN","IBCEU",54,0)
 ;  (for new person entries, as of date in IBDT)
"RTN","IBCEU",55,0)
 ; DBIA 1625
"RTN","IBCEU",56,0)
 N IBSPEC
"RTN","IBCEU",57,0)
 S:'$G(IBDT) IBDT=DT
"RTN","IBCEU",58,0)
 I IBPRV'["IBA(355.93" S IBSPEC=$S(IBPRV:$P($$GET^XUA4A72(+IBPRV,IBDT),U,8),1:"") ; VA
"RTN","IBCEU",59,0)
 I IBPRV["IBA(355.93" S IBSPEC=$P($G(^IBA(355.93,+IBPRV,0)),U,4) ; Non-VA
"RTN","IBCEU",60,0)
 Q IBSPEC
"RTN","IBCEU",61,0)
 ;
"RTN","IBCEU",62,0)
CRED(IBPRV,IBIFN,IBPIEN,IBTYP) ; Returns prov credentials
"RTN","IBCEU",63,0)
 ; IBPRV = vp of provider for file 200 or 355.93
"RTN","IBCEU",64,0)
 ; IBIFN = bill ien in file 399 (optional)
"RTN","IBCEU",65,0)
 ; IBPIEN = prov ien - file 399.0222 (optional)
"RTN","IBCEU",66,0)
 ;          DEM;432 - prov ien can be from file 399.0404
"RTN","IBCEU",67,0)
 ;          as well (optional).
"RTN","IBCEU",68,0)
 ; IBTYP = the prov type
"RTN","IBCEU",69,0)
 ;
"RTN","IBCEU",70,0)
 N IBCRED
"RTN","IBCEU",71,0)
 S IBCRED=""
"RTN","IBCEU",72,0)
 ;
"RTN","IBCEU",73,0)
 ; DEM;432 - Provider can come from either file 399.0222, or
"RTN","IBCEU",74,0)
 ;           file 399.0404. Variable IBLNPRV is the flag
"RTN","IBCEU",75,0)
 ;           that indicates we want prov ien from file 399.0404.
"RTN","IBCEU",76,0)
 ;
"RTN","IBCEU",77,0)
 I '$G(IBLNPRV),$G(IBIFN),'$D(^DGCR(399,IBIFN,"PRV",0)) G CREDQ
"RTN","IBCEU",78,0)
 ;
"RTN","IBCEU",79,0)
 ; DEM;432 - Next line if for line level provider. Variable IBPROCP,
"RTN","IBCEU",80,0)
 ;           if it exist, is the procedure ien. File 399.0404 is a
"RTN","IBCEU",81,0)
 ;           multiple of the Procedure File 399.0304.
"RTN","IBCEU",82,0)
 ;
"RTN","IBCEU",83,0)
 I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),'$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",0)) G CREDQ
"RTN","IBCEU",84,0)
 I '$G(IBLNPRV),$G(IBIFN),($G(IBPIEN)!$G(IBTYP)) D
"RTN","IBCEU",85,0)
 . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"PRV","B",IBTYP,0))
"RTN","IBCEU",86,0)
 . S IBCRED=$P($G(^DGCR(399,IBIFN,"PRV",IBPIEN,0)),U,3)
"RTN","IBCEU",87,0)
 ;
"RTN","IBCEU",88,0)
 I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),($G(IBPIEN)!$G(IBTYP)) D  ; DEM;432 - Line Provider File 399.0404.
"RTN","IBCEU",89,0)
 . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"CP",IBPROCP,"B",IBTYP,0))
"RTN","IBCEU",90,0)
 . S IBCRED=$P($G(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBPIEN,0)),U,3)
"RTN","IBCEU",91,0)
 ;
"RTN","IBCEU",92,0)
CREDQ ;
"RTN","IBCEU",93,0)
 I $G(IBPRV),IBCRED="" D
"RTN","IBCEU",94,0)
 . I IBPRV'["IBA(355.93" S IBCRED=$P($$ESBLOCK^XUSESIG1(+IBPRV),U,2)
"RTN","IBCEU",95,0)
 . I IBPRV["IBA(355.93" S IBCRED=$P($G(^IBA(355.93,+IBPRV,0)),U,3)
"RTN","IBCEU",96,0)
 Q IBCRED
"RTN","IBCEU",97,0)
 ;
"RTN","IBCEU",98,0)
GETPRV(IBIFN,IBTYP,IBPRV) ; Returns prov(s) of type(s) IBTYP for
"RTN","IBCEU",99,0)
 ;  bill ien IBIFN.
"RTN","IBCEU",100,0)
 ;  IBTYP = prov types needed, separated by ',' or ALL
"RTN","IBCEU",101,0)
 ; 
"RTN","IBCEU",102,0)
 ; OUTPUT:
"RTN","IBCEU",103,0)
 ;  IBPRV array: IBPRV(type)= 1 if prov is from old prov flds
"RTN","IBCEU",104,0)
 ;               IBPRV(type,ct)=name^current COB id^vp provider ien^cred
"RTN","IBCEU",105,0)
 ;               IBPRV(type,ct,seq)=COB seq specific id
"RTN","IBCEU",106,0)
 ;               IBPRV(type)=default nm^def id
"RTN","IBCEU",107,0)
 ;               IBPRV(type,"NOTOPT")= defined if a required prov type
"RTN","IBCEU",108,0)
 ;
"RTN","IBCEU",109,0)
 N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z ;,IBZFID
"RTN","IBCEU",110,0)
 ;S IBZFID=""
"RTN","IBCEU",111,0)
 D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
"RTN","IBCEU",112,0)
 ;I IBZ="CI" D F^IBCEF("N-FEDERAL TAX ID","IBZFID",,IBIFN) S IBZFID=$TR(IBZFID,"-")
"RTN","IBCEU",113,0)
 S IBPRV=U_$G(IBZ),IBY=0
"RTN","IBCEU",114,0)
 S IBMRAND=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",115,0)
 ;WCJ;IB*2.0*432;Remove Default
"RTN","IBCEU",116,0)
 I IBMRAND D
"RTN","IBCEU",117,0)
 . ; F Z=1:1:3,5,6,7,8,9 S:Z=3&($$FT^IBCEF(IBIFN)=3) Z=4 S IBPRV(Z)=$S(Z=3!(Z=4):"DEPT VETERANS AFFAIRS",1:"")_"^VAD000"
"RTN","IBCEU",118,0)
 . F Z=1:1:9 S IBPRV(Z)="^VAD000"
"RTN","IBCEU",119,0)
 . I '$$INPAT^IBCEF(IBIFN,1),$$FT^IBCEF(IBIFN)=3 S IBPRV(4,1)="^SLF000"
"RTN","IBCEU",120,0)
 ;WCJ;IB*2.0*432;End changes
"RTN","IBCEU",121,0)
 ;
"RTN","IBCEU",122,0)
 ; For backwards compatability (before the claim level provider mulitple)
"RTN","IBCEU",123,0)
 I '$D(^DGCR(399,+IBIFN,"PRV",0)) D  G GETQ
"RTN","IBCEU",124,0)
 . N IBALL
"RTN","IBCEU",125,0)
 . S IBALL=(IBTYP="ALL")
"RTN","IBCEU",126,0)
 . I IBTYP[4!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,13)'="" IBPRV(4,1)=$P(^("U1"),U,13),IBPRV(4)=1 Q:IBTYP=4
"RTN","IBCEU",127,0)
 . I IBTYP[3!IBALL S:$P($G(^DGCR(399,+IBIFN,"UF2")),U)'="" IBPRV(3,1)=$P(^("UF2"),U),IBPRV(3)=1 Q:IBTYP=3
"RTN","IBCEU",128,0)
 . I IBTYP[9!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,14)'="" IBPRV(9,1)=$P(^("U1"),U,14),IBPRV(9)=1
"RTN","IBCEU",129,0)
 ;
"RTN","IBCEU",130,0)
 S IBID=4+$$COBN^IBCEF(IBIFN),IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBCEU",131,0)
 F IBZ=1:1:$S(IBTYP="ALL":99,1:$L(IBTYP,",")) S (IBCT,IB)=0,IBY=$S(IBTYP'="ALL":$P(IBTYP,",",IBZ),1:$O(^DGCR(399,+IBIFN,"PRV","B",IBY))) Q:IBY=""  F  S IB=$O(^DGCR(399,+IBIFN,"PRV","B",IBY,IB)) Q:'IB  D
"RTN","IBCEU",132,0)
 . S IBCT=IBCT+1
"RTN","IBCEU",133,0)
 . S IBD=$G(^DGCR(399,+IBIFN,"PRV",IB,0))
"RTN","IBCEU",134,0)
 . Q:'$P(IBD,U,2)
"RTN","IBCEU",135,0)
 . S IBPNM=$$EXPAND^IBTRE(399.0222,.02,$P(IBD,U,2))
"RTN","IBCEU",136,0)
 . I IBWNR Q:'$D(IBPRV(IBY))  S $P(IBD,U,IBID)=$P(IBPRV(IBY),U,2)
"RTN","IBCEU",137,0)
 . S IBPRV(IBY,IBCT)=IBPNM_U_$S($P(IBD,U,IBID)'="":$P(IBD,U,IBID),$P($G(IBPRV(IBY)),U,2)'="":$P(IBPRV(IBY),U,2),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,IBID-4))_U_$P(IBD,U,2)
"RTN","IBCEU",138,0)
 . S $P(IBPRV(IBY,IBCT),U,4)=$$CRED($P(IBPRV(IBY,IBCT),U,3),IBIFN,$S($P(IBD,U,3)'=""!'$P(IBPRV(IBY,IBCT),U,3):IB,1:""))
"RTN","IBCEU",139,0)
 . F Z=1:1:3 D
"RTN","IBCEU",140,0)
 .. ;I IBZFID'="",'$$INPAT^IBCEF(IBIFN,1),$P(IBPRV(IBY,IBCT),U,2)="SLF000" S IBZFID=""
"RTN","IBCEU",141,0)
 .. ;I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($G(IBZFID)'="":IBZFID,$P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:"")
"RTN","IBCEU",142,0)
 .. I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,Z))
"RTN","IBCEU",143,0)
GETQ D NEEDPRV(IBIFN,IBTYP,.IBPRV)
"RTN","IBCEU",144,0)
 Q
"RTN","IBCEU",145,0)
 ;
"RTN","IBCEU",146,0)
NEEDPRV(IBIFN,IBTYP,IBPRV) ; Check for needed prov
"RTN","IBCEU",147,0)
 ; If needed, not entered, insert defaults for MCR only
"RTN","IBCEU",148,0)
 N IB0,IBINP,IBFT,IBMRAND,IBTOB
"RTN","IBCEU",149,0)
 S IB0=$G(^DGCR(399,+IBIFN,0))
"RTN","IBCEU",150,0)
 S IBFT=($$FT^IBCEF(IBIFN)=3),IBINP=$$INPAT^IBCEF(IBIFN,1),IBTOB=$$TOB^IBCBB(IB0)
"RTN","IBCEU",151,0)
 ; Only allow defaults for MCR
"RTN","IBCEU",152,0)
 S IBMRAND=$$WNRBILL^IBEFUNC(IBIFN) ;$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",153,0)
 ;
"RTN","IBCEU",154,0)
 I IBTYP="ALL"!((IBTYP_",")["1,") D
"RTN","IBCEU",155,0)
 . ; DEM;432 - UB-04 or CMS-1500 SITUATIONAL
"RTN","IBCEU",156,0)
 . S IBPRV(1,"SITUATIONAL")=1
"RTN","IBCEU",157,0)
 . Q
"RTN","IBCEU",158,0)
 ;
"RTN","IBCEU",159,0)
 I IBTYP="ALL"!((IBTYP_",")["2,") D:IBFT
"RTN","IBCEU",160,0)
 . ; only for bill type inpt - 11X, outpt - 83X
"RTN","IBCEU",161,0)
 . S IBPRV(2,"SITUATIONAL")=1  ; DEM;432 - Default to "SITUATIONAL". If conditions below are met, then IBPRV(2,"SITUATIONAL") is KILLED and IBRPV is SET according to conditions.
"RTN","IBCEU",162,0)
 . Q:$S(IBINP:$E(IBTOB,1,2)'="11",1:$E(IBTOB,1,2)'="83")
"RTN","IBCEU",163,0)
 . ; UB-04 bill includes HCPCS procs - operating phys situational
"RTN","IBCEU",164,0)
 . N Z
"RTN","IBCEU",165,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  I $P($G(^(Z,0)),U)["ICP" D  Q
"RTN","IBCEU",166,0)
 .. K IBPRV(2,"SITUATIONAL")  ; DEM;432 - We have met one of the condtions, so KILL IBPRV(2,"SITUATIONAL"). 
"RTN","IBCEU",167,0)
 .. I IBINP S IBPRV(2,"SITUATIONAL")=1 Q  ; DEM;432 - If UB-04 (inpatient), then operating provider situational.
"RTN","IBCEU",168,0)
 .. I 'IBINP S IBPRV(2,"NOTOPT")=1  ; DEM;432 - If UB-04 (outpatient), then operating provider required.
"RTN","IBCEU",169,0)
 .. Q:'IBMRAND
"RTN","IBCEU",170,0)
 .. I '$O(IBPRV(2,0)) S IBPRV(2,"REQ")=1,IBPRV(2,1)=$G(IBPRV(2))
"RTN","IBCEU",171,0)
 ;
"RTN","IBCEU",172,0)
 I IBTYP="ALL"!((IBTYP_",")["3,") D
"RTN","IBCEU",173,0)
 . ; if a CMS-1500 bill, rendering is required
"RTN","IBCEU",174,0)
 . ; JWS;IB*2.0*592 US1108 - exclude dental form
"RTN","IBCEU",175,0)
 . ;I 'IBFT,$$FT^IBCEF(IBIFN)'=7 S IBPRV(3,"NOTOPT")=1      ;CHANGED THIS LINE TO THE FOLLOWING IN IB*2.0*608 - vd (US3214)
"RTN","IBCEU",176,0)
 . I 'IBFT,$$FT^IBCEF(IBIFN)'=7 S IBPRV(3,"SITUATIONAL")=1  ;FOR CMS-1500 RENDERING IS NO LONGER REQUIRED
"RTN","IBCEU",177,0)
 . ; DEM;432 - if UB-04, rendering is situational.
"RTN","IBCEU",178,0)
 . ; JWS;IB*2.0*592 US1108 - dental form check
"RTN","IBCEU",179,0)
 . I IBFT!($$FT^IBCEF(IBIFN)=7) S IBPRV(3,"SITUATIONAL")=1 Q
"RTN","IBCEU",180,0)
 . Q:'IBMRAND
"RTN","IBCEU",181,0)
 . I '$O(IBPRV(3,0)) S IBPRV(3,1)=$G(IBPRV(3)),IBPRV(3,"REQ")=1
"RTN","IBCEU",182,0)
 ;
"RTN","IBCEU",183,0)
 I IBTYP="ALL"!((IBTYP_",")["4,") D:IBFT
"RTN","IBCEU",184,0)
 . ; if a UB-04, attending required
"RTN","IBCEU",185,0)
 . S IBPRV(4,"NOTOPT")=1
"RTN","IBCEU",186,0)
 . Q:'IBMRAND
"RTN","IBCEU",187,0)
 . I '$O(IBPRV(4,0)) S IBPRV(4,1)=$G(IBPRV(4)),IBPRV(4,"REQ")=1
"RTN","IBCEU",188,0)
 Q
"RTN","IBCEU",189,0)
 ;
"RTN","IBCEU",190,0)
CKPROV(IBIFN,IBTYP,IBVAL) ; Checks if prov of type IBTYP in 'PRV' node
"RTN","IBCEU",191,0)
 ; of bill IBIFN
"RTN","IBCEU",192,0)
 ; If IBVAL = 1, skips the check for an existing provider, just looks
"RTN","IBCEU",193,0)
 ;               for existence of the function itself
"RTN","IBCEU",194,0)
 N OK,IBFT,Z,R
"RTN","IBCEU",195,0)
 S OK=0,IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU",196,0)
 S Z=+$O(^DGCR(399,IBIFN,"PRV","B",+IBTYP,0))
"RTN","IBCEU",197,0)
 I $G(^DGCR(399,IBIFN,"PRV",Z,0))'="" D
"RTN","IBCEU",198,0)
 . ; Only outpt UB-04 can have SLF000 as prov ID with no name
"RTN","IBCEU",199,0)
 . I IBFT=3,'$$INPAT^IBCEF(IBIFN,1),$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)="",$P(^(0),U,5)="SLF000" S OK=1 Q
"RTN","IBCEU",200,0)
 . I '$G(IBVAL) Q:$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)=""
"RTN","IBCEU",201,0)
 . S OK=1
"RTN","IBCEU",202,0)
 Q OK
"RTN","IBCEU",203,0)
 ;
"RTN","IBCEU",204,0)
XFER(IBQ) ; Transfer DILIST
"RTN","IBCEU",205,0)
 ; IBQ = # of entries already found
"RTN","IBCEU",206,0)
 N Z,IBZ
"RTN","IBCEU",207,0)
 S (Z,IBZ)=0
"RTN","IBCEU",208,0)
 F  S Z=$O(^TMP("DILIST",$J,1,Z)) Q:'Z  S IBZ=IBZ+1,^TMP("IBLIST",$J,1,IBZ+IBQ)=^TMP("DILIST",$J,1,Z),^TMP("IBLIST",$J,2,IBZ+IBQ)=^TMP("DILIST",$J,2,Z) M ^TMP("IBLIST",$J,"ID",IBZ+IBQ)=^TMP("DILIST",$J,"ID",Z)
"RTN","IBCEU",209,0)
 ;
"RTN","IBCEU",210,0)
 I $D(^TMP("DILIST",$J,0)) S ^TMP("IBLIST",$J,0)=^TMP("DILIST",$J,0)
"RTN","IBCEU",211,0)
 S $P(^TMP("IBLIST",$J,0),U)=IBQ+IBZ
"RTN","IBCEU",212,0)
 Q
"RTN","IBCEU",213,0)
 ;
"RTN","IBCEU",214,0)
DATE(X) ; Convert date X in YYYYMMDD or YYMMDD to FM format
"RTN","IBCEU",215,0)
 ; FP = flag to indicate if past or future dates are expected
"RTN","IBCEU",216,0)
 N %DT,Y
"RTN","IBCEU",217,0)
 I $L(X)=8,$E(X,1,4)<2100,$E(X,5,6)<13,$E(X,7,8)<32 S X=$E(X,1,4)-1700_$E(X,5,8) G DTQ
"RTN","IBCEU",218,0)
 I $L(X)=6,$E(X,3,4)<13,$E(X,5,6)<32 S X=$E(X,3,4)_"/"_$E(X,5,6)_"/"_$E(X,1,2),%DT="N" D ^%DT I Y>0 S X=Y
"RTN","IBCEU",219,0)
DTQ Q X
"RTN","IBCEU",220,0)
 ;
"RTN","IBCEU",221,0)
BCLASS(IBIFN) ; Returns actual bill classif. code from ptr fld
"RTN","IBCEU",222,0)
 ;  .25 in file 399 for bill ien IBIFN
"RTN","IBCEU",223,0)
 Q $P($G(^DGCR(399.1,+$P($G(^DGCR(399,IBIFN,0)),U,25),0)),U,2)
"RTN","IBCEU",224,0)
 ;
"RTN","IBCEU",225,0)
ADMHR(IBIFN,IBDTTM) ; Extract admit hr from admit dt/tm
"RTN","IBCEU",226,0)
 ;  Default 00 if no time and bill is 11X or 18X
"RTN","IBCEU",227,0)
 N TM
"RTN","IBCEU",228,0)
 S TM=$P(IBDTTM,".",2)
"RTN","IBCEU",229,0)
 I TM="","18"[$$BCLASS(IBIFN),$P($G(^DGCR(399,IBIFN,0)),U,24)=1 S TM="00"
"RTN","IBCEU",230,0)
 I TM'="",TM'="00" S TM=$E(TM_"0000",1,4)
"RTN","IBCEU",231,0)
 Q TM
"RTN","IBCEU",232,0)
 ;
"RTN","IBCEU",233,0)
OLAB(IBIFN) ; Returns 1 if bill IBIFN is outside lab
"RTN","IBCEU",234,0)
 N IBL,IBLAB
"RTN","IBCEU",235,0)
 S IBL=0
"RTN","IBCEU",236,0)
 S IBLAB=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU",237,0)
 I IBLAB,"24"[IBLAB S IBL=1
"RTN","IBCEU",238,0)
 Q IBL
"RTN","IBCEU",239,0)
 ;
"RTN","IBCEU",240,0)
PSRV(IBIFN) ; Returns 1 if bill IBIFN has any purch services
"RTN","IBCEU",241,0)
 N IBZ,IBXDATA,IBXSAVE,Z
"RTN","IBCEU",242,0)
 S IBZ=0
"RTN","IBCEU",243,0)
 D F^IBCEF("N-HCFA 1500 PROCEDURES",,,IBIFN)
"RTN","IBCEU",244,0)
 S Z=0 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:'Z  I $P(IBXSAVE("BOX24",Z),U,11) S IBZ=1 Q
"RTN","IBCEU",245,0)
 Q IBZ
"RTN","IBCEU",246,0)
 ;
"RTN","IBCEU",247,0)
SEQBILL(IBIFN) ; Returns the ien's of all bills in COB sequence for bill IBIFN
"RTN","IBCEU",248,0)
 ; Return value is "^" delimited: primary ien^secondary ien^tertiary ien
"RTN","IBCEU",249,0)
 N IBSEQ,Z
"RTN","IBCEU",250,0)
 S IBSEQ=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU",251,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",252,0)
 I $P(IBSEQ,U,Z)="" S $P(IBSEQ,U,Z)=IBIFN
"RTN","IBCEU",253,0)
 Q IBSEQ
"RTN","IBCEU",254,0)
 ;
"RTN","IBCEU",255,0)
 ;IB*2.0*432/TAZ Added to take into account the line level providers.
"RTN","IBCEU",256,0)
GETPRV1(IBIFN,IBTYP,IBPRV) ; Returns prov(s) of type(s) IBTYP for
"RTN","IBCEU",257,0)
 ;  bill ien IBIFN for TPJI display
"RTN","IBCEU",258,0)
 ;  IBTYP = prov types needed, separated by ',' or ALL
"RTN","IBCEU",259,0)
 ; 
"RTN","IBCEU",260,0)
 ; OUTPUT:
"RTN","IBCEU",261,0)
 ;  IBPRV array: IBPRV(level,type,ct)=name^current COB id^vp provider ien^cred
"RTN","IBCEU",262,0)
 ;
"RTN","IBCEU",263,0)
 N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z,IBPRTYP
"RTN","IBCEU",264,0)
 D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
"RTN","IBCEU",265,0)
 S IBPRV=U_$G(IBZ),IBY=0
"RTN","IBCEU",266,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE)
"RTN","IBCEU",267,0)
 S IBCT=0
"RTN","IBCEU",268,0)
 F  S IBCT=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT)) Q:'IBCT  D
"RTN","IBCEU",269,0)
 . S IBPRTYP=""
"RTN","IBCEU",270,0)
 . F  S IBPRTYP=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEU",271,0)
 .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
"RTN","IBCEU",272,0)
 .. N IBPRIEN,OBPRNM,IBCOBID
"RTN","IBCEU",273,0)
 .. S IBPRIEN=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP),U)
"RTN","IBCEU",274,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,1)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
"RTN","IBCEU",275,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,2)=IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"COBID")
"RTN","IBCEU",276,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,3)=IBPRIEN
"RTN","IBCEU",277,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"NAME"),U,4)
"RTN","IBCEU",278,0)
 S IBCT=0
"RTN","IBCEU",279,0)
 F  S IBCT=$O(IBXSAVE("L-PROV",IBIFN,IBCT)) Q:'IBCT  D
"RTN","IBCEU",280,0)
 . S IBPRTYP=""
"RTN","IBCEU",281,0)
 . F  S IBPRTYP=$O(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEU",282,0)
 .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
"RTN","IBCEU",283,0)
 .. N IBPRIEN
"RTN","IBCEU",284,0)
 .. S IBPRIEN=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP),U)
"RTN","IBCEU",285,0)
 .. S IBPRV(2,IBCT,IBPRTYP)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
"RTN","IBCEU",286,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,2)=IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"COBID")
"RTN","IBCEU",287,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,3)=IBPRIEN
"RTN","IBCEU",288,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"NAME"),U,4)
"RTN","IBCEU",289,0)
 Q
"RTN","IBCEU",290,0)
 ;/IB*2.0*592
"RTN","IBCEU",291,0)
RTYPOK(VAL,IBIFN) ;sceen for field 399,285 Attachment Report Type - Check for a valid Report Type depending on Claim Type
"RTN","IBCEU",292,0)
 ; VAL = internal value of report type file#353.3
"RTN","IBCEU",293,0)
 ; IBIFN = file 399 ien
"RTN","IBCEU",294,0)
 ;
"RTN","IBCEU",295,0)
 N OK,IBBT
"RTN","IBCEU",296,0)
 S OK=0
"RTN","IBCEU",297,0)
 Q:VAL="" OK
"RTN","IBCEU",298,0)
 Q:'IBIFN OK
"RTN","IBCEU",299,0)
 S IBBT=$$FT^IBCEF(IBIFN) ;2 if CMS-1500, 3 if UB-04, 7 if J430D Dental
"RTN","IBCEU",300,0)
 I IBBT'=7 S:VAL'="P6" OK=1 Q OK  ;not a Dental Claim, periodontal charts not applicable
"RTN","IBCEU",301,0)
 ; following for Dental claims
"RTN","IBCEU",302,0)
 I "^B4^DA^DG^EB^OZ^P6^RB^RR^"[(U_VAL_U) S OK=1
"RTN","IBCEU",303,0)
 Q OK
"RTN","IBCEU",304,0)
 ; IB*2.0*592 end
"RTN","IBCEU",305,0)
 ;
"RTN","IBCEU1")
0^30^B117180629^B91847621
"RTN","IBCEU1",1,0)
IBCEU1 ;ALB/TMP - EDI UTILITIES FOR EOB PROCESSING ;10-FEB-99
"RTN","IBCEU1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,296,349,371,432,473,547,608**;21-MAR-94;Build 90
"RTN","IBCEU1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU1",4,0)
 ;
"RTN","IBCEU1",5,0)
CCOB1(IBIFN,NODE,SEQ,IBRSBTST) ; Extract Claim level COB data
"RTN","IBCEU1",6,0)
 ; for a bill IBIFN
"RTN","IBCEU1",7,0)
 ; NODE = the file 361.1 node(s) to be returned, separated by commas
"RTN","IBCEU1",8,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",9,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",10,0)
 ; Returns IBXDATA(COB,n,node)  where COB = COB insurance sequence,
"RTN","IBCEU1",11,0)
 ;  n is the entry number in file 361.1 and node is the node requested
"RTN","IBCEU1",12,0)
 ;   = the requested node's data
"RTN","IBCEU1",13,0)
 ; IBRSBTST=1, this indicates the claim is being resubmitted as a "TEST"
"RTN","IBCEU1",14,0)
 ;             claim and should be used be the OUTPUT FORMATTER entries
"RTN","IBCEU1",15,0)
 ;             to determine what COB information is going out. - IB*2*608 (vd)
"RTN","IBCEU1",16,0)
 ;
"RTN","IBCEU1",17,0)
 N IB,IBN,IBBILL,IBS,A,B,C,IBCURR,IBMRAF,Z,CSEQ
"RTN","IBCEU1",18,0)
 ;
"RTN","IBCEU1",19,0)
 K IBXDATA
"RTN","IBCEU1",20,0)
 ;
"RTN","IBCEU1",21,0)
 S:$G(NODE)="" NODE=1
"RTN","IBCEU1",22,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",23,0)
 S IBCURR=$$COB^IBCEF(IBIFN)
"RTN","IBCEU1",24,0)
 S CSEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU1",25,0)
 ; ib*2.0*547 make sure you only set MRA flag if MRA on current sequence being checked
"RTN","IBCEU1",26,0)
 ;S IBMRAF=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU1",27,0)
 S IBMRAF=$P($$MCRONBIL^IBEFUNC(IBIFN,$S(IBCURR="P":1,IBCURR="S":2,1:3)),U,2)
"RTN","IBCEU1",28,0)
 ;
"RTN","IBCEU1",29,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",30,0)
 ;
"RTN","IBCEU1",31,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",32,0)
 . I '$$EOBELIG(C,IBMRAF,IBCURR) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",33,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",34,0)
 . I +$G(IBRSBTST),((CSEQ=IBS)!(CSEQ<IBS)) Q   ; IB*2.0*608/vd (US2486) added to prevent COB Data from being put on Resubmitted Claims for TEST.
"RTN","IBCEU1",35,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",36,0)
 .. F Z=1:1:$L(NODE,",") D
"RTN","IBCEU1",37,0)
 ... S A=$P(NODE,",",Z)
"RTN","IBCEU1",38,0)
 ... Q:A=""
"RTN","IBCEU1",39,0)
 ... S IBN=$G(^IBM(361.1,C,A))
"RTN","IBCEU1",40,0)
 ... ; Start IB*2.0*473 BI Added to null patient responsibility in OI1
"RTN","IBCEU1",41,0)
 ... ; if the data is contained at the line level to be sent in LCOB.
"RTN","IBCEU1",42,0)
 ... ; Perform the following for only OI1.19 using the dictionary 364.6 IEN.
"RTN","IBCEU1",43,0)
 ... S:+$G(IBX0)=2204&($$LPREXIST(C))&(A=1) $P(IBN,U,2)=""
"RTN","IBCEU1",44,0)
 ... ; End IB*2.0*473
"RTN","IBCEU1",45,0)
 ... I $TR(IBN,U)'="" S IBXDATA(IBS,C,A)=IBN
"RTN","IBCEU1",46,0)
 ;
"RTN","IBCEU1",47,0)
 Q
"RTN","IBCEU1",48,0)
 ;
"RTN","IBCEU1",49,0)
CCAS1(IBIFN,SEQ,IBRSBTST) ; Extract all MEDICARE COB claim level adjustment data
"RTN","IBCEU1",50,0)
 ; for a bill IBIFN (subfile 361.11 in file 361.1)
"RTN","IBCEU1",51,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",52,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",53,0)
 ; Returns IBXDATA(COB,n)  where COB = COB insurance sequence,
"RTN","IBCEU1",54,0)
 ;       n is the entry number in file 361.1 and
"RTN","IBCEU1",55,0)
 ;       = the 0-node of the subfile entry (361.11)
"RTN","IBCEU1",56,0)
 ;    and IBXDATA(COB,n,m) where m is a sequential # and
"RTN","IBCEU1",57,0)
 ;                         = this level's 0-node
"RTN","IBCEU1",58,0)
 ; IBRSBTST=1, this indicates the claim is being resubmitted as a "TEST"
"RTN","IBCEU1",59,0)
 ;             claim and should be used be the OUTPUT FORMATTER entries
"RTN","IBCEU1",60,0)
 ;             to determine what COB information is going out. - IB*2*608 (vd)
"RTN","IBCEU1",61,0)
 N IB,IBA,IBS,IB0,IB00,IBBILL,B,C,D,E,CSEQ
"RTN","IBCEU1",62,0)
 ;
"RTN","IBCEU1",63,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",64,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",65,0)
 S CSEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU1",66,0)
 ;
"RTN","IBCEU1",67,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",68,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",69,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",70,0)
 . I +$G(IBRSBTST),((CSEQ=IBS)!(CSEQ<IBS)) Q   ; IB*2.0*608/vd (US2486) added to prevent COB Data from being put on Resubmitted Claims for TEST.
"RTN","IBCEU1",71,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",72,0)
 .. S (IBA,D)=0 F  S D=$O(^IBM(361.1,C,10,D)) Q:'D  S IB0=$G(^(D,0)) D
"RTN","IBCEU1",73,0)
 ... S IBXDATA(IBS,D)=IB0
"RTN","IBCEU1",74,0)
 ... S (IBA,E)=0
"RTN","IBCEU1",75,0)
 ... F  S E=$O(^IBM(361.1,C,10,D,1,E)) Q:'E  S IB00=$G(^(E,0)) D
"RTN","IBCEU1",76,0)
 .... S IBA=IBA+1
"RTN","IBCEU1",77,0)
 .... I $TR(IB00,U)'="" S IBXDATA(IBS,D,IBA)=IB00
"RTN","IBCEU1",78,0)
 ;
"RTN","IBCEU1",79,0)
 Q
"RTN","IBCEU1",80,0)
 ;
"RTN","IBCEU1",81,0)
SEQ(A) ; Translate sequence # A into corresponding letter representation
"RTN","IBCEU1",82,0)
 S A=$E("PST",A)
"RTN","IBCEU1",83,0)
 I $S(A'="":"PST"'[A,1:1) S A="P"
"RTN","IBCEU1",84,0)
 Q A
"RTN","IBCEU1",85,0)
 ;
"RTN","IBCEU1",86,0)
EOBTOT(IBIFN,IBCOBN) ; Total all EOB's for a bill's COB sequence
"RTN","IBCEU1",87,0)
 ; Function returns the total of all EOB's for a specific COB seq
"RTN","IBCEU1",88,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU1",89,0)
 ; IBCOBN = the # of the COB sequence you want EOB/MRA total for (1-3)
"RTN","IBCEU1",90,0)
 ;
"RTN","IBCEU1",91,0)
 N Z,Z0,IBTOT
"RTN","IBCEU1",92,0)
 S IBTOT=0
"RTN","IBCEU1",93,0)
 I $O(^IBM(361.1,"ABS",IBIFN,IBCOBN,0)) D
"RTN","IBCEU1",94,0)
 . ; Set up prior payment field here from MRA/EOB(s)
"RTN","IBCEU1",95,0)
 . S (IBTOT,Z)=0
"RTN","IBCEU1",96,0)
 . F  S Z=$O(^IBM(361.1,"ABS",IBIFN,IBCOBN,Z)) Q:'Z  D
"RTN","IBCEU1",97,0)
 .. ; HD64841 IB*2*371 - total up the payer paid amounts
"RTN","IBCEU1",98,0)
 .. S IBTOT=IBTOT+$P($G(^IBM(361.1,Z,1)),U,1)
"RTN","IBCEU1",99,0)
 Q IBTOT
"RTN","IBCEU1",100,0)
 ;
"RTN","IBCEU1",101,0)
 ;
"RTN","IBCEU1",102,0)
LCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the line adjustment reasons COB
"RTN","IBCEU1",103,0)
 ;  line # data for an electronic claim
"RTN","IBCEU1",104,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",105,0)
 ;                   pass by reference
"RTN","IBCEU1",106,0)
 ; COL = the column in the 837 flat file being output for LCAS record
"RTN","IBCEU1",107,0)
 N LINE,COBSEQ,RECCT,GRPCD,SEQ,RCCT,RCPC,DATA,RCREC,SEQLINE K IBXDATA
"RTN","IBCEU1",108,0)
 S (LINE,RECCT)=0
"RTN","IBCEU1",109,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",110,0)
 S RCREC=$S(COL'<4:COL-1\3,1:0)
"RTN","IBCEU1",111,0)
 ;S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",112,0)
 F  S LINE=$O(IBXSAVE("LCOB",LINE)) Q:'LINE  D
"RTN","IBCEU1",113,0)
 . S COBSEQ=0
"RTN","IBCEU1",114,0)
 . F  S COBSEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ)) Q:'COBSEQ  S SEQLINE=0 F  S SEQLINE=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE)) Q:'SEQLINE  S GRPCD="" F  S GRPCD=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD)) Q:GRPCD=""  D
"RTN","IBCEU1",115,0)
 .. S RECCT=RECCT+1
"RTN","IBCEU1",116,0)
 .. ;IB*2.0*432/TAZ Added payer sequence in piece 22 of LCAS record (parameter Z)
"RTN","IBCEU1",117,0)
 .. I COL="Z" S IBXDATA(RECCT)=$E("PST",COBSEQ) I RECCT>1 D ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",118,0)
 .. I COL=2 S IBXDATA(RECCT)=LINE,DATA=LINE D:RECCT>1 ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",119,0)
 .. I COL=3 S IBXDATA(RECCT)=$TR(GRPCD," ")
"RTN","IBCEU1",120,0)
 .. S (SEQ,RCCT)=0
"RTN","IBCEU1",121,0)
 .. F  S SEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U)'="" D
"RTN","IBCEU1",122,0)
 ... S RCCT=RCCT+1
"RTN","IBCEU1",123,0)
 ... Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",124,0)
 ... S DATA=$S(COL=2:LINE,COL=3:$TR(GRPCD," "),1:$P($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U,RCPC))
"RTN","IBCEU1",125,0)
 ... I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",126,0)
 ... I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"LCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",127,0)
 Q
"RTN","IBCEU1",128,0)
 ;
"RTN","IBCEU1",129,0)
CCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the claim adjustment reasons COB
"RTN","IBCEU1",130,0)
 ;  data for an electronic claim
"RTN","IBCEU1",131,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",132,0)
 ;                   pass by reference
"RTN","IBCEU1",133,0)
 ; COL = the column in the 837 flat file being output for CCAS record
"RTN","IBCEU1",134,0)
 N COBSEQ,RECCT,GRPSEQ,SEQ,RCPC,RCCT,RCREC,DATA K IBXDATA
"RTN","IBCEU1",135,0)
 S RECCT=0
"RTN","IBCEU1",136,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",137,0)
 S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",138,0)
 S COBSEQ=0
"RTN","IBCEU1",139,0)
 F  S COBSEQ=$O(IBXSAVE("CCAS",COBSEQ)) Q:'COBSEQ  S GRPSEQ="" F  S GRPSEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ)) Q:GRPSEQ=""  D
"RTN","IBCEU1",140,0)
 . S RECCT=RECCT+1
"RTN","IBCEU1",141,0)
 . I COL=2 S IBXDATA(RECCT)=COBSEQ D:RECCT>1 ID^IBCEF2(RECCT,"CCAS")
"RTN","IBCEU1",142,0)
 . I COL=3 S IBXDATA(RECCT)=$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U)
"RTN","IBCEU1",143,0)
 . S (SEQ,RCCT)=0
"RTN","IBCEU1",144,0)
 . F  S SEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U)'="" D
"RTN","IBCEU1",145,0)
 .. S RCCT=RCCT+1
"RTN","IBCEU1",146,0)
 .. Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",147,0)
 .. S DATA=$S(COL=2:COBSEQ,COL=3:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U),1:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U,RCPC))
"RTN","IBCEU1",148,0)
 .. I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",149,0)
 .. I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"CCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",150,0)
 Q
"RTN","IBCEU1",151,0)
 ;
"RTN","IBCEU1",152,0)
COBOUT(IBXSAVE,IBXDATA,CL) ; build LCOB segment data
"RTN","IBCEU1",153,0)
 ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
"RTN","IBCEU1",154,0)
 ; This is basically the 361.115, but all the piece numbers here in this
"RTN","IBCEU1",155,0)
 ; local array are one higher than the pieces in subfile 361.115.
"RTN","IBCEU1",156,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",157,0)
 S (N,Z)=0
"RTN","IBCEU1",158,0)
 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",159,0)
 . S M=0 F  S M=$O(IBXSAVE("LCOB",Z,"COB",M)) Q:'M  D
"RTN","IBCEU1",160,0)
 .. S P=0 F  S P=$O(IBXSAVE("LCOB",Z,"COB",M,P)) Q:'P  D
"RTN","IBCEU1",161,0)
 ... S N=N+1
"RTN","IBCEU1",162,0)
 ... I CL="Z" S IBXDATA(N)=$E("PST",M) Q
"RTN","IBCEU1",163,0)
 ... S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",164,0)
 ... ;IB*2.0*432/TAZ - If the revenue code is blank for the EOB get it from the Primary Level
"RTN","IBCEU1",165,0)
 ... I PCCL="",CL=11 S PCCL=$P($G(IBXSAVE("LCOB",Z)),U)
"RTN","IBCEU1",166,0)
 ... S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",167,0)
 Q
"RTN","IBCEU1",168,0)
 ;
"RTN","IBCEU1",169,0)
 ;IB*2.0*432/TAZ - XCOBOUT is the original code which did not capture all the LCOB records.
"RTN","IBCEU1",170,0)
XCOBOUT(IBXSAVE,IBXDATA,CL) ; build LCOB segment data
"RTN","IBCEU1",171,0)
 ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
"RTN","IBCEU1",172,0)
 ; This is basically the 361.115, but all the piece numbers here in this
"RTN","IBCEU1",173,0)
 ; local array are one higher than the pieces in subfile 361.115.
"RTN","IBCEU1",174,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",175,0)
 S (N,Z,P)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",176,0)
 . S N=N+1
"RTN","IBCEU1",177,0)
 . S M=$O(IBXSAVE("LCOB",Z,"COB",""),-1) Q:'M
"RTN","IBCEU1",178,0)
 . S P=$O(IBXSAVE("LCOB",Z,"COB",M,""),-1) Q:'P
"RTN","IBCEU1",179,0)
 . ;IB*2.0*432/TAZ Added Payer Sequence to piece 18 of the LCOB record
"RTN","IBCEU1",180,0)
 . I CL="Z" S IBXDATA(N)=$E("PST",M) Q
"RTN","IBCEU1",181,0)
 . S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",182,0)
 . S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",183,0)
 . Q
"RTN","IBCEU1",184,0)
 Q
"RTN","IBCEU1",185,0)
 ;
"RTN","IBCEU1",186,0)
COBPYRID(IBXIEN,IBXSAVE,IBXDATA) ; cob insurance company payer id
"RTN","IBCEU1",187,0)
 N CT,N,NUM,Z
"RTN","IBCEU1",188,0)
 K IBXDATA
"RTN","IBCEU1",189,0)
 I '$D(IBXSAVE("LCOB")) G COBPYRX
"RTN","IBCEU1",190,0)
 ;
"RTN","IBCEU1",191,0)
 ;IB*2.0*432/TAZ - Replaced following code with loop to insure that all LCOB records have the Payer ID
"RTN","IBCEU1",192,0)
 ;D ALLPAYID^IBCEF2(IBXIEN,.NUM,1)
"RTN","IBCEU1",193,0)
 ;S NUM=$G(NUM(1))
"RTN","IBCEU1",194,0)
 ;S NUM=$E(NUM_$J("",5),1,5)
"RTN","IBCEU1",195,0)
 ;S (CT,N)=0
"RTN","IBCEU1",196,0)
 ;F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  S CT=CT+1,IBXDATA(CT)=NUM
"RTN","IBCEU1",197,0)
 ;
"RTN","IBCEU1",198,0)
 D ALLPAYID^IBCEF2(IBXIEN,.NUM)
"RTN","IBCEU1",199,0)
 S (CT,N)=0
"RTN","IBCEU1",200,0)
 F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  D
"RTN","IBCEU1",201,0)
 . S Z=0
"RTN","IBCEU1",202,0)
 . F  S Z=$O(IBXSAVE("LCOB",N,"COB",Z)) Q:'Z  D
"RTN","IBCEU1",203,0)
 .. S CT=CT+1,IBXDATA(CT)=$G(NUM(Z))
"RTN","IBCEU1",204,0)
COBPYRX ;
"RTN","IBCEU1",205,0)
 Q
"RTN","IBCEU1",206,0)
 ;
"RTN","IBCEU1",207,0)
EOBELIG(IBEOB,IBMRAF,IBCURR) ; EOB eligibility for secondary claim
"RTN","IBCEU1",208,0)
 ; Function to decide if EOB entry in file 361.1 (ien=IBEOB) is
"RTN","IBCEU1",209,0)
 ; eligible to be included for secondary claim creation process
"RTN","IBCEU1",210,0)
 ; The EOB is not eligible if the review status is not 3, or if there
"RTN","IBCEU1",211,0)
 ; is no insurance sequence indicator, or if the EOB has been DENIED
"RTN","IBCEU1",212,0)
 ; and the patient responsibility for that EOB is $0 and that EOB is
"RTN","IBCEU1",213,0)
 ; not a split EOB.  Split EOB's need to be included (IB*2*371).
"RTN","IBCEU1",214,0)
 ;
"RTN","IBCEU1",215,0)
 ; 432 - added new flag IBMRAF to indicate if we need to check only MRA's or all EOB's
"RTN","IBCEU1",216,0)
 ; IBMRAF = 1 if only need MRA EOB's
"RTN","IBCEU1",217,0)
 ;
"RTN","IBCEU1",218,0)
 NEW ELIG,IBDATA,PTRESP
"RTN","IBCEU1",219,0)
 S ELIG=0
"RTN","IBCEU1",220,0)
 ; IB*2.0*432/TAZ Get current Payer sequence if not passed in.
"RTN","IBCEU1",221,0)
 I '$G(IBCURR) S IBCURR=$$COB^IBCEF(IBIFN)
"RTN","IBCEU1",222,0)
 I '$G(IBEOB) G EOBELIGX
"RTN","IBCEU1",223,0)
 S IBDATA=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEU1",224,0)
 I $G(IBMRAF)=1,$P(IBDATA,U,4)'=1 G EOBELIGX      ; Only MRA EOB's for now if flag = 1
"RTN","IBCEU1",225,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) G EOBELIGX     ; filing error
"RTN","IBCEU1",226,0)
 I $P(IBDATA,U,16)'=3 G EOBELIGX     ; review status - accepted-complete
"RTN","IBCEU1",227,0)
 I '$P(IBDATA,U,15) G EOBELIGX       ; insurance sequence must exist
"RTN","IBCEU1",228,0)
 ; IB*2.0*432/TAZ Don't send EOB data for current payer
"RTN","IBCEU1",229,0)
 I $P(IBDATA,U,15)=IBCURR G EOBELIGX ; Don't send EOB data for current payer (this is for retransmits)
"RTN","IBCEU1",230,0)
 S PTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)     ; Pt Resp Amount for 1500s
"RTN","IBCEU1",231,0)
 I $$FT^IBCEF(+IBDATA)=3 S PTRESP=$$PTRESPI^IBCECOB1(IBEOB)  ; for UBs
"RTN","IBCEU1",232,0)
 I PTRESP'>0,$P(IBDATA,U,13)=2,'$$SPLIT^IBCEMU1(IBEOB) G EOBELIGX     ; Denied & No Pt. Resp. & not a split MRA
"RTN","IBCEU1",233,0)
 ;
"RTN","IBCEU1",234,0)
 S ELIG=1
"RTN","IBCEU1",235,0)
EOBELIGX ;
"RTN","IBCEU1",236,0)
 Q ELIG
"RTN","IBCEU1",237,0)
 ;
"RTN","IBCEU1",238,0)
EOBCNT(IBIFN) ; This function counts up the number of EOBs that are eligible
"RTN","IBCEU1",239,0)
 ; for the secondary claim creation process for a given bill#.
"RTN","IBCEU1",240,0)
 NEW CNT,IEN
"RTN","IBCEU1",241,0)
 S (CNT,IEN)=0
"RTN","IBCEU1",242,0)
 F  S IEN=$O(^IBM(361.1,"B",+$G(IBIFN),IEN)) Q:'IEN  D
"RTN","IBCEU1",243,0)
 . I $$EOBELIG(IEN) S CNT=CNT+1
"RTN","IBCEU1",244,0)
 . Q
"RTN","IBCEU1",245,0)
EOBCNTX ;
"RTN","IBCEU1",246,0)
 Q CNT
"RTN","IBCEU1",247,0)
 ;
"RTN","IBCEU1",248,0)
LPTRESP(IBIFN,IBXSAVE,IBXDATA,CL)  ; Line level patient responsibility.
"RTN","IBCEU1",249,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",250,0)
 N IBPTZ,IBPTM,IBPTP,IBPTPR,IBPRDATA,IBPTCNT
"RTN","IBCEU1",251,0)
 S:'$D(CL) CL=17
"RTN","IBCEU1",252,0)
 S IBPTCNT=0
"RTN","IBCEU1",253,0)
 S IBPTZ=0 F  S IBPTZ=$O(IBXSAVE("LCOB",IBPTZ)) Q:'IBPTZ  D
"RTN","IBCEU1",254,0)
 . S IBPTM=0 F  S IBPTM=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM)) Q:'IBPTM  D
"RTN","IBCEU1",255,0)
 .. S IBPTP=0 F  S IBPTP=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP)) Q:'IBPTP  D
"RTN","IBCEU1",256,0)
 ... S IBPTCNT=IBPTCNT+1
"RTN","IBCEU1",257,0)
 ... I $$CHKCCOB1(IBIFN,IBPTM) S IBXDATA(IBPTCNT)="" Q
"RTN","IBCEU1",258,0)
 ... I CL=16 S IBXDATA(IBPTCNT)="EAF" Q
"RTN","IBCEU1",259,0)
 ... S IBXDATA(IBPTCNT)=0
"RTN","IBCEU1",260,0)
 ... S IBPTPR=0 F  S IBPTPR=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR)) Q:'IBPTPR  D
"RTN","IBCEU1",261,0)
 .... S IBPRDATA=$G(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR))
"RTN","IBCEU1",262,0)
 .... I +IBPRDATA S IBXDATA(IBPTCNT)=IBXDATA(IBPTCNT)+$P(IBPRDATA,U,2)
"RTN","IBCEU1",263,0)
 ... S IBXDATA(IBPTCNT)=$$DOLLAR^IBCEFG1(IBXDATA(IBPTCNT))
"RTN","IBCEU1",264,0)
 Q
"RTN","IBCEU1",265,0)
 ;
"RTN","IBCEU1",266,0)
LPREXIST(EOBIEN)  ; Tests to see if Line Level Patient Responsibility Segments exists.
"RTN","IBCEU1",267,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",268,0)
 N CL,CAS,PR,PRSEQ,PRZ,RESULT
"RTN","IBCEU1",269,0)
 S RESULT=0
"RTN","IBCEU1",270,0)
 Q:'$G(EOBIEN) RESULT
"RTN","IBCEU1",271,0)
 S CL=0 F  S CL=$O(^IBM(361.1,EOBIEN,15,CL)) Q:+CL=0  D
"RTN","IBCEU1",272,0)
 . S CAS=0 F  S CAS=$O(^IBM(361.1,EOBIEN,15,CL,CAS)) Q:+CAS=0  D
"RTN","IBCEU1",273,0)
 .. S PR=$O(^IBM(361.1,EOBIEN,15,CL,CAS,"B","PR",0)) Q:+PR=0
"RTN","IBCEU1",274,0)
 .. S PRSEQ=0 F  S PRSEQ=$O(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ)) Q:+PRSEQ=0  D
"RTN","IBCEU1",275,0)
 ... S PRZ=$G(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ,0)) Q:'+PRZ
"RTN","IBCEU1",276,0)
 ... S RESULT=1
"RTN","IBCEU1",277,0)
 Q RESULT
"RTN","IBCEU1",278,0)
 ;
"RTN","IBCEU1",279,0)
CHKCCOB1(IBIFN,IBS)  ; Test to see if Patient Responsibility pieces should be included
"RTN","IBCEU1",280,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",281,0)
 N RESULTS,IBXDATA,EOBIEN
"RTN","IBCEU1",282,0)
 S RESULTS=1
"RTN","IBCEU1",283,0)
 ; INPUTS:  IBIFN - BILL/CLAIM INTERNAL NUMBER
"RTN","IBCEU1",284,0)
 ;          IBS   - INSURANCE SEQUENCE NUMBER
"RTN","IBCEU1",285,0)
 ; RETURNS: 0     - IF LCOB RECORDS ARE TO BE INCLUDED
"RTN","IBCEU1",286,0)
 ;          1     - IF LCOB RECORDS SHOULD NOT BE INCLUDED
"RTN","IBCEU1",287,0)
 D CCOB1(IBIFN,0,IBS)
"RTN","IBCEU1",288,0)
 S EOBIEN=$O(IBXDATA(IBS,0))
"RTN","IBCEU1",289,0)
 S RESULT='$$LPREXIST(EOBIEN)
"RTN","IBCEU1",290,0)
 Q RESULT
"RTN","IBCEU1",291,0)
 ;
"RTN","IBCEU1",292,0)
 ;/IB*2*608 (vd) (US2486) - Added this module of code to be referenced by the Output Formatter.
"RTN","IBCEU1",293,0)
CKCOBTST(IBXIEN,IBXSAVE,Z0,Z,IBRSBTST)  ; Check Primary, Secondary & Tertiary COBS for Claims Resubmitted as Test.
"RTN","IBCEU1",294,0)
 ; INPUT:  IBXIEN   - Current Claim number
"RTN","IBCEU1",295,0)
 ;         IBXSAVE  - Array containing current claim COB data.
"RTN","IBCEU1",296,0)
 ;         Z0       - Will equal "INPT", "OUTPT" or "RX"
"RTN","IBCEU1",297,0)
 ;         Z        - Is the LINE
"RTN","IBCEU1",298,0)
 N A,CURSEQ,XX
"RTN","IBCEU1",299,0)
 I '+$G(IBRSBTST) M IBXSAVE("LCOB",Z)=IBXSAVE(Z0,Z) Q  ; Only concerned with Claims that are Resubmitted as Test.
"RTN","IBCEU1",300,0)
 S A="",CURSEQ=$$COBN^IBCEF(IBXIEN)
"RTN","IBCEU1",301,0)
 ; With the line below, ideally, we want to merge all of IBXSAVE(Z0,Z) into IBXSAVE("LCOB",Z),
"RTN","IBCEU1",302,0)
 ; but the COB node should be handled separately for the current sequence.
"RTN","IBCEU1",303,0)
 S IBXSAVE("LCOB",Z)=IBXSAVE(Z0,Z)
"RTN","IBCEU1",304,0)
 S XX="" F  S XX=$O(IBXSAVE(Z0,Z,XX)) Q:XX=""  I XX'="COB" M IBXSAVE("LCOB",Z,XX)=IBXSAVE(Z0,Z,XX)
"RTN","IBCEU1",305,0)
 ; Now handle the COB node for the current sequence.
"RTN","IBCEU1",306,0)
 F  S A=$O(IBXSAVE(Z0,Z,"COB",A)) Q:A=""  D   ; Only want to merge those COBS that are previous to the current
"RTN","IBCEU1",307,0)
 . I (CURSEQ=A)!(CURSEQ<A) Q   ; Only want to merge those COBS that are previous to the current sequence.
"RTN","IBCEU1",308,0)
 . M IBXSAVE("LCOB",Z,"COB",A)=IBXSAVE(Z0,Z,"COB",A)
"RTN","IBCEU1",309,0)
 Q
"RTN","IBCEU1",310,0)
 ;
"RTN","IBCEU3")
0^20^B109583745^B109051815
"RTN","IBCEU3",1,0)
IBCEU3 ;ALB/TMP - EDI UTILITIES FOR 1500 CLAIM FORM ;12/29/05 9:58am
"RTN","IBCEU3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,323,348,371,400,432,488,519,592,608**;21-MAR-94;Build 90
"RTN","IBCEU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU3",4,0)
 ;
"RTN","IBCEU3",5,0)
BOX19(IBIFN) ; New Box 19 added for patch 488.  This is for workman's comp?
"RTN","IBCEU3",6,0)
 ; This returns the Paperwork Attachment 
"RTN","IBCEU3",7,0)
 ;     Information in the following format:
"RTN","IBCEU3",8,0)
 ;   PWKNNFX12348907CHEY<3 Spaces>Next set if more than one on claim
"RTN","IBCEU3",9,0)
 ; PWK is the qualifier for data, followed by the appropriate Report Type 
"RTN","IBCEU3",10,0)
 ;Code, the appropriate Transmission Type Code, then the Attachment Control 
"RTN","IBCEU3",11,0)
 ;Number.  Do not enter spaces between qualifiers and data.
"RTN","IBCEU3",12,0)
 ;
"RTN","IBCEU3",13,0)
 ; This information can be at either the Line Level or the Claim Level.
"RTN","IBCEU3",14,0)
 ; Check all Lines first and print as many as possible - 71 characters 
"RTN","IBCEU3",15,0)
 ; maximum.  Then check the Claim Level
"RTN","IBCEU3",16,0)
 N IBRTP,LN,U8,IBBX19,IB19,DATA,I,DEL
"RTN","IBCEU3",17,0)
 ;JWS;IB*2.0*592;add Dental Claim Note field to EDI 837D trans, rec UB1, field 19
"RTN","IBCEU3",18,0)
 ;IA# 2056
"RTN","IBCEU3",19,0)
 I $$FT^IBCEF(IBIFN)=7 Q $$GET1^DIQ(399,IBIFN_",",97)
"RTN","IBCEU3",20,0)
 S IB19="",DEL="   ",LN=0
"RTN","IBCEU3",21,0)
 ; Get rate type
"RTN","IBCEU3",22,0)
 S IBRTP=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCEU3",23,0)
 ; Get data entered for box 19
"RTN","IBCEU3",24,0)
 S IBBX19=$P($G(^DGCR(399,IBIFN,"UF31")),U,3)
"RTN","IBCEU3",25,0)
 ; check the line Level first
"RTN","IBCEU3",26,0)
 I IBRTP=11 D
"RTN","IBCEU3",27,0)
 .F  S LN=$O(^DGCR(399,IBIFN,"CP",LN)) Q:LN=""  Q:LN'?.N  D
"RTN","IBCEU3",28,0)
 ..S DATA=$G(^DGCR(399,IBIFN,"CP",LN,1))
"RTN","IBCEU3",29,0)
 ..I $P(DATA,U,2)'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",30,0)
 .; check the Claim Level next
"RTN","IBCEU3",31,0)
 .S DATA=""
"RTN","IBCEU3",32,0)
 .S DATA=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCEU3",33,0)
 .I DATA'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",34,0)
 ; If any room left add user entered box 19 info
"RTN","IBCEU3",35,0)
 I IBBX19'="",IB19'="",$L(IB19)<84 D
"RTN","IBCEU3",36,0)
 .F I=1:1:$L(IBBX19,DEL) S DATA=$P(IBBX19,DEL,I) I DATA'="" D
"RTN","IBCEU3",37,0)
 ..I $L(IB19_DEL_DATA)<84 S IB19=IB19_$S(IB19="":"",1:DEL)_DATA
"RTN","IBCEU3",38,0)
 I IB19="",IBBX19'="" S IB19=IBBX19
"RTN","IBCEU3",39,0)
 ;
"RTN","IBCEU3",40,0)
 Q IB19
"RTN","IBCEU3",41,0)
 ;
"RTN","IBCEU3",42,0)
FORMAT(DATA) ; format data for ouput
"RTN","IBCEU3",43,0)
 N ART,OUT
"RTN","IBCEU3",44,0)
 S ART=$P(DATA,U,2)
"RTN","IBCEU3",45,0)
 S ART=$P(^IBE(353.3,ART,0),U,1)
"RTN","IBCEU3",46,0)
 S OUT="PWK"_ART_$P(DATA,U,3)_$P(DATA,U,1)
"RTN","IBCEU3",47,0)
 Q OUT
"RTN","IBCEU3",48,0)
 ;
"RTN","IBCEU3",49,0)
 ; BELOW NO LONGER USED -> BAA *488*
"RTN","IBCEU3",50,0)
OBOX19(IBIFN) ; THIS IS NOLONGER USED.  IT WAS REPLACE WITH ABOVE.
"RTN","IBCEU3",51,0)
 ; Returns the text that should print in box 19 of the CMS-1500
"RTN","IBCEU3",52,0)
 ;   for bill ien IBIFN
"RTN","IBCEU3",53,0)
 ; Data is derived from a combo of data throughout
"RTN","IBCEU3",54,0)
 ; the system and is limited to 80 characters.  The hierarchy for
"RTN","IBCEU3",55,0)
 ; including data is as follows (until 80 characters have been used):
"RTN","IBCEU3",56,0)
 ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
"RTN","IBCEU3",57,0)
 ;                      specialty codes = 025,065,073,067,048
"RTN","IBCEU3",58,0)
 ;   LAST X-RAY DATE (chiropractic) specialty code = 35
"RTN","IBCEU3",59,0)
 ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
"RTN","IBCEU3",60,0)
 ;                        a specimen from a homebound patient)
"RTN","IBCEU3",61,0)
 ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
"RTN","IBCEU3",62,0)
 ;   Hearing aid testing (if applicable)
"RTN","IBCEU3",63,0)
 ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
"RTN","IBCEU3",64,0)
 ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
"RTN","IBCEU3",65,0)
 ;                   lung volume reduction surgery study is set
"RTN","IBCEU3",66,0)
 ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
"RTN","IBCEU3",67,0)
 ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
"RTN","IBCEU3",68,0)
 ;     DETAIL
"RTN","IBCEU3",69,0)
 ;
"RTN","IBCEU3",70,0)
 N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM,IBSPI
"RTN","IBCEU3",71,0)
 S IB19="",IBGO=1
"RTN","IBCEU3",72,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEU3",73,0)
 I $D(IBXSAVE(IBSUB)) N IBXSAVE
"RTN","IBCEU3",74,0)
 S IBPRT=(IBSUB["24")
"RTN","IBCEU3",75,0)
 ;
"RTN","IBCEU3",76,0)
 S IBSPEC=$$BILLSPEC(IBIFN)
"RTN","IBCEU3",77,0)
 G:'IBPRT NPRT
"RTN","IBCEU3",78,0)
 ; Check for chiropractic services
"RTN","IBCEU3",79,0)
 I $P($G(^DGCR(399,IBIFN,"U3")),U,5)'="" S:$P($G(^DGCR(399,IBIFN,"U3")),U,4)'="" IBGO=$$LENOK("Last X-ray: "_$TR($$DATE^IBCF2($P(^DGCR(399,IBIFN,"U3"),U,4))," ","/"),.IB19)
"RTN","IBCEU3",80,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",81,0)
 ;
"RTN","IBCEU3",82,0)
 I "^25^65^73^67^48^"[(U_IBSPEC_U) D
"RTN","IBCEU3",83,0)
 . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
"RTN","IBCEU3",84,0)
 . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB19)
"RTN","IBCEU3",85,0)
 .. ; Only print if specialty is OT or PT or proc for routine foot care
"RTN","IBCEU3",86,0)
 .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
"RTN","IBCEU3",87,0)
 ;
"RTN","IBCEU3",88,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",89,0)
 K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
"RTN","IBCEU3",90,0)
 I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
"RTN","IBCEU3",91,0)
 ;
"RTN","IBCEU3",92,0)
 K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
"RTN","IBCEU3",93,0)
 I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
"RTN","IBCEU3",94,0)
 ;
"RTN","IBCEU3",95,0)
 I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
"RTN","IBCEU3",96,0)
 ;
"RTN","IBCEU3",97,0)
 S (IBHAID,IBHOSP,IBXRAY)=0
"RTN","IBCEU3",98,0)
 ;
"RTN","IBCEU3",99,0)
 S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
"RTN","IBCEU3",100,0)
 . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" Units:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
"RTN","IBCEU3",101,0)
 . ;
"RTN","IBCEU3",102,0)
 . Q:'IBGO
"RTN","IBCEU3",103,0)
 . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
"RTN","IBCEU3",104,0)
 .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
"RTN","IBCEU3",105,0)
 . ;
"RTN","IBCEU3",106,0)
 . Q:'IBGO
"RTN","IBCEU3",107,0)
 . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19) Q
"RTN","IBCEU3",108,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",109,0)
 K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
"RTN","IBCEU3",110,0)
 I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
"RTN","IBCEU3",111,0)
 ;
"RTN","IBCEU3",112,0)
 ; SPECIAL PROGRAM INDICATOR field code.
"RTN","IBCEU3",113,0)
 S IBSPI=$$GET1^DIQ(399,IBIFN_",",238,"E")
"RTN","IBCEU3",114,0)
 I IBSPI'="" S IBGO=$$LENOK(IBSPI,.IB19)
"RTN","IBCEU3",115,0)
 ;
"RTN","IBCEU3",116,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",117,0)
NPRT K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
"RTN","IBCEU3",118,0)
 S IBREM=0
"RTN","IBCEU3",119,0)
 I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
"RTN","IBCEU3",120,0)
 K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
"RTN","IBCEU3",121,0)
 I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
"RTN","IBCEU3",122,0)
 ;
"RTN","IBCEU3",123,0)
BOX19Q Q IB19
"RTN","IBCEU3",124,0)
 ; ALL OF THE ABOVE TO OBOX19 IS NO LONGER USED *488*
"RTN","IBCEU3",125,0)
 ;
"RTN","IBCEU3",126,0)
LENOK(IBDATA,IB19) ; Add text IBDATA to box 19 string (IB19 passed by ref)
"RTN","IBCEU3",127,0)
 ; Check length of box 19 data - truncate at 71 (max length)
"RTN","IBCEU3",128,0)
 ; Returns 0 if max length reached or exceeded, otherwise, 1
"RTN","IBCEU3",129,0)
 ; Changed 96 to 71 for new 1500 form
"RTN","IBCEU3",130,0)
 N OK
"RTN","IBCEU3",131,0)
 S OK=1
"RTN","IBCEU3",132,0)
 S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
"RTN","IBCEU3",133,0)
 I $L(IB19)'<83 S OK=0,IB19=$E(IB19,1,71) G LENOKQ
"RTN","IBCEU3",134,0)
LENOKQ Q OK
"RTN","IBCEU3",135,0)
 ;
"RTN","IBCEU3",136,0)
ASK19(IBIFN) ; Ask to display CMS-1500 box 19 data for current IBIFN
"RTN","IBCEU3",137,0)
 ;  changed to 71 length.
"RTN","IBCEU3",138,0)
 N DIR,DIC,X,Y,DIE,DR,Z
"RTN","IBCEU3",139,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL CMS-1500 BOX 19?: "
"RTN","IBCEU3",140,0)
 D ^DIR
"RTN","IBCEU3",141,0)
 K DIR("B")
"RTN","IBCEU3",142,0)
 I Y=1 D
"RTN","IBCEU3",143,0)
 .S Z=$$BOX19(IBIFN) W !!,?4,"19",?45,$E(Z,1,23) W:$L(Z)>23 !,?4,$E(Z,24,71),!
"RTN","IBCEU3",144,0)
 .S DIR(0)="E",DIR("A")="Enter <RET> to Continue " W ! D ^DIR K DIR
"RTN","IBCEU3",145,0)
 Q
"RTN","IBCEU3",146,0)
 ;
"RTN","IBCEU3",147,0)
ONLAB(IBIFN) ; Functions returns 1 if the bill IBIFN is outside non-lab
"RTN","IBCEU3",148,0)
 N IBP,IBPUR
"RTN","IBCEU3",149,0)
 S IBP=0
"RTN","IBCEU3",150,0)
 S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU3",151,0)
 I IBPUR,"13"[IBPUR S IBP=1
"RTN","IBCEU3",152,0)
 Q IBP
"RTN","IBCEU3",153,0)
 ;
"RTN","IBCEU3",154,0)
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) ; Format the text line of box 24 by fld
"RTN","IBCEU3",155,0)
 ; INPUT:
"RTN","IBCEU3",156,0)
 ;   FLD = the letter of the field in box 24 (A-J)
"RTN","IBCEU3",157,0)
 ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
"RTN","IBCEU3",158,0)
 ;   IBSUB = the subscript of the IBXSAVE array to use.
"RTN","IBCEU3",159,0)
 ;           If null, use "BOX24"
"RTN","IBCEU3",160,0)
 ; OUTPUT:
"RTN","IBCEU3",161,0)
 ;   IBXDATA = passed by reference, set to the correct part of the
"RTN","IBCEU3",162,0)
 ;             text that will print in the field's positions
"RTN","IBCEU3",163,0)
 ;
"RTN","IBCEU3",164,0)
 ; esg - 8/14/06 - modified for the new cms-1500 form - IB*2*348
"RTN","IBCEU3",165,0)
 ;
"RTN","IBCEU3",166,0)
 N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ,IBREN,IBRENQ,IBRENNPI,IBRENSID
"RTN","IBCEU3",167,0)
 K IBXDATA
"RTN","IBCEU3",168,0)
 S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
"RTN","IBCEU3",169,0)
 ;
"RTN","IBCEU3",170,0)
 I FLD="I"!(FLD="J") D   ; extract the Rendering provider data
"RTN","IBCEU3",171,0)
 . I '$G(IBXIEN) Q       ; assume that the claim# exists
"RTN","IBCEU3",172,0)
 . S IBREN=$$CFIDS^IBCEF77(IBXIEN)
"RTN","IBCEU3",173,0)
 . S IBRENQ=$P(IBREN,U,1)    ; qual
"RTN","IBCEU3",174,0)
 . S IBRENSID=$P(IBREN,U,2)  ; id
"RTN","IBCEU3",175,0)
 . S IBRENNPI=$P(IBREN,U,3)  ; npi
"RTN","IBCEU3",176,0)
 . Q
"RTN","IBCEU3",177,0)
 ;
"RTN","IBCEU3",178,0)
 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
"RTN","IBCEU3",179,0)
 . S IBDAT=$G(IBXSAVE(IBSUB,Z))
"RTN","IBCEU3",180,0)
 . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
"RTN","IBCEU3",181,0)
 . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
"RTN","IBCEU3",182,0)
 . S IBZ=$P(IBAUX,U,9)
"RTN","IBCEU3",183,0)
 . I IBZ="" S IBZ="  "
"RTN","IBCEU3",184,0)
 . S IBTEXT=IBZ_IBTEXT
"RTN","IBCEU3",185,0)
 . ;
"RTN","IBCEU3",186,0)
 . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S IBTEXT=""
"RTN","IBCEU3",187,0)
 . ;
"RTN","IBCEU3",188,0)
 . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9 D   ; From date of service
"RTN","IBCEU3",189,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",190,0)
 .. Q
"RTN","IBCEU3",191,0)
 . ;
"RTN","IBCEU3",192,0)
 . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18 D    ; To date of service
"RTN","IBCEU3",193,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",194,0)
 .. Q
"RTN","IBCEU3",195,0)
 . ;
"RTN","IBCEU3",196,0)
 . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21   ; place of service
"RTN","IBCEU3",197,0)
 . I FLD="C" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=22,IBE=24   ; emergency indicator
"RTN","IBCEU3",198,0)
 . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=44 D   ; procedures and modifiers
"RTN","IBCEU3",199,0)
 .. N M S M=$$MODLST^IBEFUNC($P(IBDAT,U,10))       ; modifier list
"RTN","IBCEU3",200,0)
 .. S IBVAL=$$FO^IBCNEUT1(IBVAL,6)_"  "            ; procedure code
"RTN","IBCEU3",201,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",1),3)     ; mod#1
"RTN","IBCEU3",202,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",2),3)     ; mod#2
"RTN","IBCEU3",203,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",3),3)     ; mod#3
"RTN","IBCEU3",204,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",4),3)     ; mod#4
"RTN","IBCEU3",205,0)
 .. Q
"RTN","IBCEU3",206,0)
 . ;
"RTN","IBCEU3",207,0)
 . I FLD="E" D
"RTN","IBCEU3",208,0)
 .. N NUM,IN,OUT,LET
"RTN","IBCEU3",209,0)
 .. S IN="1,2,3,4,5,6,7,8,9"
"RTN","IBCEU3",210,0)
 .. S OUT="A,B,C,D,E,F,G,H,I"
"RTN","IBCEU3",211,0)
 .. S IBVAL=$P(IBDAT,U,7)
"RTN","IBCEU3",212,0)
 .. F I=1:1:4 S NUM=$P(IBVAL,",",I) D
"RTN","IBCEU3",213,0)
 ... I NUM<10 S $P(LET,",",I)=$TR(NUM,IN,OUT)
"RTN","IBCEU3",214,0)
 ... I NUM=10 S $P(LET,",",I)="J"
"RTN","IBCEU3",215,0)
 ... I NUM=11 S $P(LET,",",I)="K"
"RTN","IBCEU3",216,0)
 ... I NUM=12 S $P(LET,",",I)="L"
"RTN","IBCEU3",217,0)
 .. S IBVAL=$TR(LET,","),IBS=45,IBE=48  ; diagnosis pointer
"RTN","IBCEU3",218,0)
 . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=57 D
"RTN","IBCEU3",219,0)
 .. ; total charges  **519 returned field length back to 8, 9 is too long for BOX24F
"RTN","IBCEU3",220,0)
 .. S IBVAL=$$DOL^IBCEF77(IBVAL,8)
"RTN","IBCEU3",221,0)
 .. I $L(IBVAL)>8 S IBVAL=$E(IBVAL,$L(IBVAL)-7,$L(IBVAL))
"RTN","IBCEU3",222,0)
 .. Q
"RTN","IBCEU3",223,0)
 . ;
"RTN","IBCEU3",224,0)
 . I FLD="G" S IBVAL=$S($P(IBDAT,U,12):$P(IBDAT,U,12),1:$P(IBDAT,U,9)),IBS=58,IBE=61 D
"RTN","IBCEU3",225,0)
 .. ; days or units or anesthesia minutes
"RTN","IBCEU3",226,0)
 .. S IBVAL=$J(+IBVAL,4)
"RTN","IBCEU3",227,0)
 .. Q
"RTN","IBCEU3",228,0)
 . ;
"RTN","IBCEU3",229,0)
 . ; columns H,I,J don't have any free text supplemental information
"RTN","IBCEU3",230,0)
 . ;
"RTN","IBCEU3",231,0)
 . I FLD="H" D     ; epsdt family plan
"RTN","IBCEU3",232,0)
 .. S IBVAL=$P(IBAUX,U,7),IBS=0,IBE=0,IBTEXT=""   ; line 1 blank
"RTN","IBCEU3",233,0)
 .. I IBVAL S IBVAL="Y"
"RTN","IBCEU3",234,0)
 .. Q
"RTN","IBCEU3",235,0)
 . I FLD="I" D     ; ID qualifier for rendering provider
"RTN","IBCEU3",236,0)
 .. S IBVAL="",IBS=1,IBE=2   ; line 2 blank
"RTN","IBCEU3",237,0)
 .. S IBTEXT=$G(IBRENQ)      ; qualifier on line 1
"RTN","IBCEU3",238,0)
 .. Q
"RTN","IBCEU3",239,0)
 . I FLD="J" D     ; rendering provider ID and NPI
"RTN","IBCEU3",240,0)
 .. S IBTEXT=$G(IBRENSID),IBS=1,IBE=11   ; secondary ID line 1
"RTN","IBCEU3",241,0)
 .. S IBVAL=$G(IBRENNPI)                 ; NPI# line 2
"RTN","IBCEU3",242,0)
 .. Q
"RTN","IBCEU3",243,0)
 . ;
"RTN","IBCEU3",244,0)
 . S IBLINE=IBLINE+1                      ; top line
"RTN","IBCEU3",245,0)
 . S IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE)   ; text in shaded area (top)
"RTN","IBCEU3",246,0)
 . S IBLINE=IBLINE+1             ; bottom line
"RTN","IBCEU3",247,0)
 . S IBXDATA(IBLINE)=IBVAL       ; field value in unshaded area (bottom)
"RTN","IBCEU3",248,0)
 . Q
"RTN","IBCEU3",249,0)
 ;
"RTN","IBCEU3",250,0)
 Q
"RTN","IBCEU3",251,0)
 ;
"RTN","IBCEU3",252,0)
LINSPEC(IBIFN) ; Checks the specialities of line and claim level providers
"RTN","IBCEU3",253,0)
 ; called from IBCBB2 to check for Chiro codes & IBCBB9 to check for 99's on Medicare
"RTN","IBCEU3",254,0)
 ; Default = 99 if no valid SPEC code found for line and claim level provider
"RTN","IBCEU3",255,0)
 ; Get rendering for professional, attending for institutional
"RTN","IBCEU3",256,0)
 ; If multiple lines w/ rendering or attending, returns a string of spec codes
"RTN","IBCEU3",257,0)
 N Z,IBSPEC,IBINS,IBDT,IBCP,IBSPC
"RTN","IBCEU3",258,0)
 S IBSPC=""
"RTN","IBCEU3",259,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",260,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",261,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",262,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",263,0)
 ; check claim level
"RTN","IBCEU3",264,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",265,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) I IBSPEC'="" S IBSPC=IBSPC_U_IBSPEC Q
"RTN","IBCEU3",266,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",267,0)
 . I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC=99 S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",268,0)
 ; Check line level
"RTN","IBCEU3",269,0)
 S IBCP=0 F  S IBCP=$O(^DGCR(399,IBIFN,"CP",IBCP)) Q:'IBCP  D
"RTN","IBCEU3",270,0)
 .S Z0=+$O(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV","B",Z,0))
"RTN","IBCEU3",271,0)
 .I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC="99" S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",272,0)
 ;/IB*2*608 - vd (US3214) - modified the following line to allow for No Rendering Provider.
"RTN","IBCEU3",273,0)
 ;S:IBSPC="" IBSPC=99
"RTN","IBCEU3",274,0)
 I $$FT^IBCEF(IBIFN)'=2 S:IBSPC="" IBSPC=99
"RTN","IBCEU3",275,0)
 Q IBSPC
"RTN","IBCEU3",276,0)
 ;
"RTN","IBCEU3",277,0)
BILLSPEC(IBIFN,IBPRV) ;  Returns the specialty of the provider on bill IBIFN
"RTN","IBCEU3",278,0)
 ; If IBPRV is supplied, returns the data for that provider, otherwise,
"RTN","IBCEU3",279,0)
 ;  returns the specialty of the 'main/required' provider on the bill.
"RTN","IBCEU3",280,0)
 ;  Default = 99 if no valid code found
"RTN","IBCEU3",281,0)
 ; IBPRV = vp of provider (file 200 or 355.93)
"RTN","IBCEU3",282,0)
 N Z,IBSPEC,IBINS,IBDT
"RTN","IBCEU3",283,0)
 S IBSPEC="",IBPRV=$G(IBPRV)
"RTN","IBCEU3",284,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",285,0)
 ;
"RTN","IBCEU3",286,0)
 I $G(IBPRV) D  G SPECQ
"RTN","IBCEU3",287,0)
 . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
"RTN","IBCEU3",288,0)
 ;
"RTN","IBCEU3",289,0)
 ;Get rendering for professional, attending for institutional,
"RTN","IBCEU3",290,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",291,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",292,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",293,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",294,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
"RTN","IBCEU3",295,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",296,0)
 . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
"RTN","IBCEU3",297,0)
 ;
"RTN","IBCEU3",298,0)
SPECQ I IBSPEC="" S IBSPEC="99"
"RTN","IBCEU3",299,0)
 Q IBSPEC
"RTN","IBCEU3",300,0)
 ;
"RTN","IBCEU3",301,0)
CHAMPVA(IBIFN) ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
"RTN","IBCEU3",302,0)
 Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
"RTN","IBCEU3",303,0)
 ;
"RTN","IBCEU3",304,0)
FAC(IBIFN) ; Obsolete function.  Used by old output formatter field and data element N-RENDERING INSTITUTION
"RTN","IBCEU3",305,0)
 Q ""
"RTN","IBCEU3",306,0)
 ;
"RTN","IBCEU3",307,0)
MCR24K(IBIFN,IBPRV) ;Function returns MEDICARE id# for professional (CMS-1500) box 24k for bill IBIFN if appropriate
"RTN","IBCEU3",308,0)
 ;*432/TAZ - Added IBPRV to allow circumvent the call to F^IBCEF("N-SPECIALTY CODE","IBZ",,IBIFN) in MCRSPEC^IBCEU4
"RTN","IBCEU3",309,0)
 ;JWS;IB*2.0*592:Added dental form to check for compatibility
"RTN","IBCEU3",310,0)
 ;Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCEU3",311,0)
 Q $S(($$FT^IBCEF(IBIFN)=2)!($$FT^IBCEF(IBIFN)=7)&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCEU3",312,0)
 ;
"RTN","IBCEU5")
0^21^B88004916^B88027546
"RTN","IBCEU5",1,0)
IBCEU5 ;ALB/TMP - EDI UTILITIES (continued) FOR CMS-1500 ;13-DEC-99
"RTN","IBCEU5",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232,348,349,432,592,608**;21-MAR-94;Build 90
"RTN","IBCEU5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU5",4,0)
 Q
"RTN","IBCEU5",5,0)
 ;
"RTN","IBCEU5",6,0)
EXTCR(IBPRV) ; Called by trigger on field .02 of file 399.0222
"RTN","IBCEU5",7,0)
 ; Also called by trigger on field .02 of file 399.0404 (DEM;432).
"RTN","IBCEU5",8,0)
 ; Function returns the first 3 digits of the provider's degree if
"RTN","IBCEU5",9,0)
 ; a VA provider or the credentials in file 355.9 if non-VA provider
"RTN","IBCEU5",10,0)
 ; IBPRV = vp to file 200 or 355.93
"RTN","IBCEU5",11,0)
 Q $E($$CRED^IBCEU(IBPRV),1,3)
"RTN","IBCEU5",12,0)
 ; 
"RTN","IBCEU5",13,0)
FTPRV(IBIFN,NOASK) ; If form type changes from UB-04 to CMS-1500 or vice
"RTN","IBCEU5",14,0)
 ; versa, ask to change provider function to appropriate function for
"RTN","IBCEU5",15,0)
 ; form type (ATTENDING = UB-04, RENDERING = CMS-1500)
"RTN","IBCEU5",16,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU5",17,0)
 ; NOASK (flag) = 1 if change should happen without asking first
"RTN","IBCEU5",18,0)
 N ATT,REN,FT
"RTN","IBCEU5",19,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",20,0)
 S REN=$$CKPROV^IBCEU(IBIFN,3,1)
"RTN","IBCEU5",21,0)
 S ATT=$$CKPROV^IBCEU(IBIFN,4,1)
"RTN","IBCEU5",22,0)
 ;JWS;IB*2.0*592;add Dental form check 
"RTN","IBCEU5",23,0)
 I $S(FT=2:'REN&ATT,FT=3:'ATT&REN,FT=7:'REN&ATT,1:0) D
"RTN","IBCEU5",24,0)
 . I '$G(NOASK) D TXFERPRV(IBIFN,FT) Q
"RTN","IBCEU5",25,0)
 . D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",26,0)
 D CLEANUP(IBIFN,FT)
"RTN","IBCEU5",27,0)
 Q
"RTN","IBCEU5",28,0)
 ;
"RTN","IBCEU5",29,0)
TXFERPRV(IBIFN,FT) ; Ask to change the function of the main provider on
"RTN","IBCEU5",30,0)
 ;  bill IBIFN to the function appropriate to the form type FT
"RTN","IBCEU5",31,0)
 ;  
"RTN","IBCEU5",32,0)
 N DIR,X,Y,Z,DIE,DA,DR,HAVE,NEED,IBZ
"RTN","IBCEU5",33,0)
 ; DEM;432 - Changed the prompt from uppercase to mixed case.
"RTN","IBCEU5",34,0)
 W ! S DIR("A")="  Change the Claim Level "_$S(FT=3:"Rendering",1:"Attending")_" provider's function to "_$S(FT=3:"Attending",1:"Rendering")_"?: "
"RTN","IBCEU5",35,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("?",1)="If you answer YES here, you will make the claim level provider functions",DIR("?")="  consistent with the form type of the bill"
"RTN","IBCEU5",36,0)
 D ^DIR K DIR
"RTN","IBCEU5",37,0)
 I Y'=1 Q
"RTN","IBCEU5",38,0)
 D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",39,0)
 Q
"RTN","IBCEU5",40,0)
 ;
"RTN","IBCEU5",41,0)
PRVCHG(IBIFN,IBFT) ; Change provider type to type consistent with current
"RTN","IBCEU5",42,0)
 ; data on bill
"RTN","IBCEU5",43,0)
 N Z,IBZ,HAVE,NEED,DIE,DA,X,Y
"RTN","IBCEU5",44,0)
 S HAVE=$S(IBFT=3:3,1:4)
"RTN","IBCEU5",45,0)
 S NEED=$S(IBFT=3:4,1:3)
"RTN","IBCEU5",46,0)
 S Z=$O(^DGCR(399,IBIFN,"PRV","B",HAVE,0))
"RTN","IBCEU5",47,0)
 I Z D
"RTN","IBCEU5",48,0)
 . S DA(1)=IBIFN,DA=+Z
"RTN","IBCEU5",49,0)
 . D FDA^DILF(399.0222,.DA,.01,,NEED,"IBZ")
"RTN","IBCEU5",50,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",51,0)
 ;I Z S DA(1)=IBIFN,DIE="^DGCR(399,"_DA(1)_",""PRV"",",DA=+Z,DR=".01////"_NEED D FILE^DIE(,DIE
"RTN","IBCEU5",52,0)
 Q
"RTN","IBCEU5",53,0)
 ;
"RTN","IBCEU5",54,0)
CLEANUP(IBIFN,FT)  ; If form type changes remove any extra provider FUNCTIONS.
"RTN","IBCEU5",55,0)
 N X,PRV,CLEAN,DA,DIE
"RTN","IBCEU5",56,0)
 ;
"RTN","IBCEU5",57,0)
 ;JWS;IB*2.0*592 US1108 - If form type changes to (7) J430D - Dental, default Bill Charge Type
"RTN","IBCEU5",58,0)
 I FT=7 S CLEAN(399,IBIFN_",",.27)=2
"RTN","IBCEU5",59,0)
 ; (3) If form type changes from CMS-1500 to UB-04, remove any extra provider FUNCTIONS. 
"RTN","IBCEU5",60,0)
 ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
"RTN","IBCEU5",61,0)
 I FT=3 F X=5,6 D  ; 5-SUPERVISING, 6-ASSISTANT SURGEON
"RTN","IBCEU5",62,0)
 . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
"RTN","IBCEU5",63,0)
 .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
"RTN","IBCEU5",64,0)
 ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
"RTN","IBCEU5",65,0)
 ;
"RTN","IBCEU5",66,0)
 ; (2) If form type changes from UB-04 to CMS-1500, remove any extra provider FUNCTIONS. 
"RTN","IBCEU5",67,0)
 ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
"RTN","IBCEU5",68,0)
 I FT=2 F X=2,4,6,9 D  ; 2-OPERATING, 4-ATTENDING, 6-ASSISTANT SURGEON, 9-OTHER
"RTN","IBCEU5",69,0)
 . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
"RTN","IBCEU5",70,0)
 .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
"RTN","IBCEU5",71,0)
 ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
"RTN","IBCEU5",72,0)
 ;
"RTN","IBCEU5",73,0)
 I $D(CLEAN) D FILE^DIE(,"CLEAN")
"RTN","IBCEU5",74,0)
 Q
"RTN","IBCEU5",75,0)
 ;
"RTN","IBCEU5",76,0)
PRVHELP ; Text for the provider function help
"RTN","IBCEU5",77,0)
 Q:$G(X)'="??"
"RTN","IBCEU5",78,0)
 N IBZ,IBQUIT,IB,IB1,DIR,Z
"RTN","IBCEU5",79,0)
 S IBQUIT=0
"RTN","IBCEU5",80,0)
 S Z=""
"RTN","IBCEU5",81,0)
 I '$D(IOSL)!'$D(IOST) D HOME^%ZIS
"RTN","IBCEU5",82,0)
 Q:IOST'["C-"
"RTN","IBCEU5",83,0)
 D:$G(D0) SPECIFIC(D0)
"RTN","IBCEU5",84,0)
 N DIR,X,Y S DIR(0)="E" D ^DIR K DIR W @IOF
"RTN","IBCEU5",85,0)
 S:$G(D0) Z=$$FT^IBCEF(D0)
"RTN","IBCEU5",86,0)
 S IB=IOSL,IB1=1
"RTN","IBCEU5",87,0)
 F IBZ=1:1 S:$P($T(HLPTXT+IBZ),";;",2)="" IBQUIT=1 Q:IBQUIT  S IB1=1 D
"RTN","IBCEU5",88,0)
 . I $Y>(IB-3) N DIR,X,Y S IB1=0,DIR(0)="E" D ^DIR K DIR S IB=IB+IOSL I Y'=1 S IBQUIT=1 Q
"RTN","IBCEU5",89,0)
 . W !,$P($T(HLPTXT+IBZ),";;",2)
"RTN","IBCEU5",90,0)
 I IB1 D
"RTN","IBCEU5",91,0)
 . N DIR,X,Y S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEU5",92,0)
 W @IOF
"RTN","IBCEU5",93,0)
 Q
"RTN","IBCEU5",94,0)
 ;
"RTN","IBCEU5",95,0)
SPECIFIC(IBIFN) ; Display specific provider requirements for the bill IBIFN
"RTN","IBCEU5",96,0)
 N IBFT,IBPRV,IBR,ONBILL,Z,IBZ
"RTN","IBCEU5",97,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",98,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV) ;Returns needed providers
"RTN","IBCEU5",99,0)
 ;JWS;IB*2.0*592 US1108 - added Dental form #7
"RTN","IBCEU5",100,0)
 W !,"This bill is ",$S(IBFT=7:"J430D",IBFT=3:"UB-04",1:"CMS-1500"),"/",$S($$INPAT^IBCEF(IBIFN):"Inpatient",1:"Outpatient")
"RTN","IBCEU5",101,0)
 W !!,"The valid provider functions for this bill are:"
"RTN","IBCEU5",102,0)
 ;JWS;IB*2.0*592 US1108 - changed loop from :5 to :6 for Assistant Surgeon
"RTN","IBCEU5",103,0)
 F IBZ=1:1:6,9 I $$PRVOK^IBCEU(IBZ,IBIFN) D
"RTN","IBCEU5",104,0)
 . S ONBILL=$$CKPROV^IBCEU(IBIFN,IBZ)
"RTN","IBCEU5",105,0)
 . S IBR=$S($G(IBPRV(IBZ,"NOTOPT")):1,$G(IBPRV(IBZ,"SITUATIONAL")):2,1:0)  ; DEM;432 added "SITUATIONAL" check.
"RTN","IBCEU5",106,0)
 . ;JWS;IB*2.0*592 US1108 - dental form#7
"RTN","IBCEU5",107,0)
 . I IBFT=7 S IBR=2
"RTN","IBCEU5",108,0)
 . ; ib2.0*432
"RTN","IBCEU5",109,0)
 . ; W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?20,$S(IBR:"REQUIRED",1:"OPTIONAL"),$S(ONBILL:" - ALREADY ON BILL",1:" - NOT ON BILL")
"RTN","IBCEU5",110,0)
 . W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?23,$S(IBR=1:"REQUIRED",IBR=2:"SITUATIONAL",1:"OPTIONAL")
"RTN","IBCEU5",111,0)
 W !
"RTN","IBCEU5",112,0)
 Q
"RTN","IBCEU5",113,0)
 ;
"RTN","IBCEU5",114,0)
HLPTXT ; Helptext for provider function
"RTN","IBCEU5",115,0)
 ;; 
"RTN","IBCEU5",116,0)
 ;;PROVIDER FUNCTION requirements:
"RTN","IBCEU5",117,0)
 ;; 
"RTN","IBCEU5",118,0)
 ;;RENDERING: UB-04 Situational, CMS-1500 Situational, or J430D Situational
"RTN","IBCEU5",119,0)
 ;;           This is the provider who performed a service.
"RTN","IBCEU5",120,0)
 ;; 
"RTN","IBCEU5",121,0)
 ;;ATTENDING: UB-04 REQUIRED
"RTN","IBCEU5",122,0)
 ;;           The physician who has primary responsibility
"RTN","IBCEU5",123,0)
 ;;           for the patient's medical care and treatment. 
"RTN","IBCEU5",124,0)
 ;; 
"RTN","IBCEU5",125,0)
 ;;OPERATING: UB-04 SITUATIONAL 
"RTN","IBCEU5",126,0)
 ;;           The provider who performed the principal procedure(s)
"RTN","IBCEU5",127,0)
 ;;           being billed.
"RTN","IBCEU5",128,0)
 ;; UB-04 (inpatient): Situational IF type of bill has first 2
"RTN","IBCEU5",129,0)
 ;;                    digits of 11, and there is a principal
"RTN","IBCEU5",130,0)
 ;;                    procedure that will print in Form
"RTN","IBCEU5",131,0)
 ;;                    Locator 74 of the claim, there must be
"RTN","IBCEU5",132,0)
 ;;                    an Operating or Rendering Provider.
"RTN","IBCEU5",133,0)
 ;; UB-04 (outpatient):REQUIRED IF type of bill has first 2
"RTN","IBCEU5",134,0)
 ;;                    digits of 83, and there is a principal
"RTN","IBCEU5",135,0)
 ;;                    procedure that will print in Form
"RTN","IBCEU5",136,0)
 ;;                    Locator 74 of the claim.
"RTN","IBCEU5",137,0)
 ;; 
"RTN","IBCEU5",138,0)
 ;;REFERRING: UB-04, CMS-1500, or J430D SITUATIONAL
"RTN","IBCEU5",139,0)
 ;;           The provider who referred the patient for the services being billed. 
"RTN","IBCEU5",140,0)
 ;; 
"RTN","IBCEU5",141,0)
 ;;SUPERVISING: CMS-1500 OPTIONAL or J430D SITUATIONAL
"RTN","IBCEU5",142,0)
 ;;           Required when the rendering provider is supervised
"RTN","IBCEU5",143,0)
 ;;           by another provider. Data will not be printed.
"RTN","IBCEU5",144,0)
 ;; 
"RTN","IBCEU5",145,0)
 ;;OTHER OPERATING: UB-04 SITUATIONAL
"RTN","IBCEU5",146,0)
 ;;           Used to report another Operating Physician.  There must
"RTN","IBCEU5",147,0)
 ;;           also be an Operating Physician on the claim.
"RTN","IBCEU5",148,0)
 ;; 
"RTN","IBCEU5",149,0)
 ;;ASSISTANT SURGEON: J430D SITUATIONAL
"RTN","IBCEU5",150,0)
 ;;           Use when the Rendering Provider provided these services in the role
"RTN","IBCEU5",151,0)
 ;;           of the Assisting Surgeon.
"RTN","IBCEU5",152,0)
 ;; 
"RTN","IBCEU5",153,0)
 ;;           There are providers who performed specific functions for
"RTN","IBCEU5",154,0)
 ;;           the services on this bill.  These providers are needed to
"RTN","IBCEU5",155,0)
 ;;           enable the V.A. to collect reimbursement when more than
"RTN","IBCEU5",156,0)
 ;;           one provider function is involved in the billable episode
"RTN","IBCEU5",157,0)
 ;;           (like an operating physician or referring provider). 
"RTN","IBCEU5",158,0)
 ;; 
"RTN","IBCEU5",159,0)
 ;;           This data identifies the type of function that was performed
"RTN","IBCEU5",160,0)
 ;;           by a provider.
"RTN","IBCEU5",161,0)
 ;;
"RTN","IBCEU5",162,0)
 ;
"RTN","IBCEU5",163,0)
LINKRX(IBIFN,IBREV) ; Ask for revenue code's RX if not already there
"RTN","IBCEU5",164,0)
 N DIR,X,Y,IBZ,IBRX,Z,Z0,DA
"RTN","IBCEU5",165,0)
 Q:$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,11)!($P($G(^(0)),U,10)'=3)
"RTN","IBCEU5",166,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  I Z'=IBREV S Z0=$G(^(Z,0)) I $P(Z0,U,10)=3,$P(Z0,U,11) S IBRX(+$P(Z0,U,11))=""
"RTN","IBCEU5",167,0)
 S DIR(0)="PAO^IBA(362.4,:AEMQ",DIR("S")="I $P(^(0),U,2)=IBIFN,'$D(IBRX(+Y))"
"RTN","IBCEU5",168,0)
 S DIR("A")="Select Rx for this charge: "
"RTN","IBCEU5",169,0)
 S DIR("?",1)="Enter an Rx# for this revenue code"
"RTN","IBCEU5",170,0)
 S DIR("?")=" The Rx must not already have an associated revenue code"
"RTN","IBCEU5",171,0)
 D ^DIR K DIR
"RTN","IBCEU5",172,0)
 I Y>0 D
"RTN","IBCEU5",173,0)
 . S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",174,0)
 . D FDA^DILF(399.042,.DA,.11,"R",+Y,"IBZ")
"RTN","IBCEU5",175,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",176,0)
 Q
"RTN","IBCEU5",177,0)
 ;
"RTN","IBCEU5",178,0)
LINKCPT(IBIFN,IBREV) ; Ask for revenue code's CPT
"RTN","IBCEU5",179,0)
 N DIR,X,Y,IBZ,IBCP,Z,Z0,Z1,DA,IBRC,IBP
"RTN","IBCEU5",180,0)
 S IBRC=$G(^DGCR(399,IBIFN,"RC",IBREV,0))
"RTN","IBCEU5",181,0)
 Q:$P(IBRC,U,8)!($P(IBRC,U,10)'=4)
"RTN","IBCEU5",182,0)
 S IBP=+$P(IBRC,U,6)
"RTN","IBCEU5",183,0)
 I $P(IBRC,U,11) W !,"PROCEDURE #"_$P(IBRC,U,11)_" HAS BEEN ASSOCIATED WITH THIS MANUAL CHARGE"
"RTN","IBCEU5",184,0)
 I '$P(IBRC,U,11) D  Q:IBRC=""
"RTN","IBCEU5",185,0)
 . S DIR("?",1)="Respond YES if this revenue code charge specifically references the data for"
"RTN","IBCEU5",186,0)
 . S DIR("?",2)="  a particular procedure that was manually entered on the previous screen."
"RTN","IBCEU5",187,0)
 . S DIR("?",3)="  For outpatient UB-04 bills, associating a manual revenue code charge with",DIR("?")="  a procedure is the only way to print a modifier in box 44"
"RTN","IBCEU5",188,0)
 . S DIR(0)="YA",DIR("A")="SHOULD A PROCEDURE ENTRY BE ASSOCIATED WITH THIS CHARGE?: ",DIR("B")=$S(IBP:"YES",1:"NO") W ! D ^DIR K DIR W !
"RTN","IBCEU5",189,0)
 . I Y'=1 S IBRC="" Q
"RTN","IBCEU5",190,0)
 I $P(IBRC,U,11) D
"RTN","IBCEU5",191,0)
 . S DIR("?",1)="Respond YES if you no longer want this revenue code charge to reference a",DIR("?")="  specific manually entered procedure"
"RTN","IBCEU5",192,0)
 . S DIR(0)="YA",DIR("A")="DELETE THE EXISTING PROCEDURE ASSOCIATION?: ",DIR("B")="NO" W ! D ^DIR K DIR
"RTN","IBCEU5",193,0)
 . I Y=1 D UPDPTR(IBIFN,IBREV,"") S $P(IBRC,U,11)=""
"RTN","IBCEU5",194,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I IBREV'=Z,$P(Z0,U,11) D
"RTN","IBCEU5",195,0)
 . ; Don't allow to link to 'used' proc
"RTN","IBCEU5",196,0)
 . I $P(Z0,U,10)=4 S IBCP($P(Z0,U,11))="" Q
"RTN","IBCEU5",197,0)
 . I $P(Z0,U,10)=3,$P(Z0,U,15) S IBCP($P(Z0,U,15))=""
"RTN","IBCEU5",198,0)
 S DIR(0)="PAO^DGCR(399,"_IBIFN_",""CP"",:AEMQ",DIR("S")="I '$D(IBCP(+Y)),$P(^(0),U)[""CPT"",+^(0)="_+$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,6)
"RTN","IBCEU5",199,0)
 S DIR("A")="SELECT A PROCEDURE ENTRY: "_$S($P(IBRC,U,11):"#"_$P(IBRC,U,11)_" - "_$$EXPAND^IBTRE(399.0304,.01,$P($G(^DGCR(399,IBIFN,"CP",$P(IBRC,U,11),0)),U))_"// ",1:"")
"RTN","IBCEU5",200,0)
 S DIR("?")="Enter a manually-added CPT procedure to associate with this charge"
"RTN","IBCEU5",201,0)
 S DA(1)=IBIFN
"RTN","IBCEU5",202,0)
 D ^DIR K DIR W !
"RTN","IBCEU5",203,0)
 I Y>0 D UPDPTR(IBIFN,IBREV,+Y)
"RTN","IBCEU5",204,0)
 Q
"RTN","IBCEU5",205,0)
 ;
"RTN","IBCEU5",206,0)
UPDPTR(IBIFN,IBREV,Y) ;
"RTN","IBCEU5",207,0)
 N IBZ,DA
"RTN","IBCEU5",208,0)
 S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",209,0)
 D FDA^DILF(399.042,.DA,.11,"R",$S(Y:+Y,1:""),"IBZ")
"RTN","IBCEU5",210,0)
 D FILE^DIE(,"IBZ")
"RTN","IBCEU5",211,0)
 Q
"RTN","IBCEU5",212,0)
 ;
"RTN","IBCEU5",213,0)
INSFT(IBIFN) ; Returns 1 if form type is UB-04, 0 if CMS-1500 or J430D
"RTN","IBCEU5",214,0)
 Q ($$FT^IBCEF(IBIFN)=3)
"RTN","IBCF23A")
0^5^B52551501^B50374642
"RTN","IBCF23A",1,0)
IBCF23A ;ALB/ARH - HCFA 1500 19-90 DATA - Split from IBCF23 ;12-JUN-93
"RTN","IBCF23A",2,0)
 ;;2.0;INTEGRATED BILLING;**51,432,516,547,577,592,608**;21-MAR-94;Build 90
"RTN","IBCF23A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCF23A",4,0)
 ;
"RTN","IBCF23A",5,0)
 ; $$INSTALDT^XPDUTL(IBPATCH,.IBARY) - ICR 10141
"RTN","IBCF23A",6,0)
 ;
"RTN","IBCF23A",7,0)
B24 ; set individual entries in print array, external format
"RTN","IBCF23A",8,0)
 ; IBAUX = additional data for EDI output
"RTN","IBCF23A",9,0)
 ; IBRXF = array of RX procedures
"RTN","IBCF23A",10,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",11,0)
 ; IBDEN = Dental data for EDI output
"RTN","IBCF23A",12,0)
 ; IBDEN1 = array of Dental data for EDI output
"RTN","IBCF23A",13,0)
 N IBX,Z,IBD1,IBD2,IBCPLINK
"RTN","IBCF23A",14,0)
 S IBI=IBI+1,IBPROC=$P(IBSS,U,2),IBD1=$$DATE^IBCF23(IBDT1),IBD2=$S(IBDT1'=IBDT2:$$DATE^IBCF23(IBDT2),1:"")
"RTN","IBCF23A",15,0)
 I '$D(IBXIEN) S IBD1=$E(IBD1,5,8)_$E(IBD1,1,4),IBD2=$E(IBD2,5,8)_$E(IBD2,1,4)
"RTN","IBCF23A",16,0)
 S IBFLD(24,IBI)=IBD1_U_IBD2_U_$P($G(^IBE(353.1,+$P(IBSS,U,6),0)),U)_U_$P($G(^IBE(353.2,+$P(IBSS,U,7),0)),U)
"RTN","IBCF23A",17,0)
 I +IBPROC D
"RTN","IBCF23A",18,0)
 . S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P($$PRCD^IBCEF1(IBPROC,1),U,2) S:$P(IBPROC,";",2)'["ICPT" IBFLD(24,IBI_"X")=""
"RTN","IBCF23A",19,0)
 I 'IBPROC S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$S('$D(IBXIEN):IBPROC,1:+IBREV),IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",20,0)
 I $D(IBRXF),IBCHARG="" S IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",21,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P(IBSS,U,5)_U_IBCHARG_U_IBUNIT_U_$P(IBSS,U,8)_U_$G(IBPCHG)_U_$G(IBMIN)_U_$G(IBEMG)
"RTN","IBCF23A",22,0)
 I $D(IBSS("L")) S Z=0 F  S Z=$O(IBSS("L",Z)) Q:'Z  S IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2))=$G(IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2)))+1
"RTN","IBCF23A",23,0)
 S:$TR($G(IBAUX),U)'="" IBFLD(24,IBI,"AUX")=$G(IBAUX)
"RTN","IBCF23A",24,0)
 S:$D(IBRXF) IBFLD(24,IBI,"RX")=IBRXF
"RTN","IBCF23A",25,0)
 K IBPROC,IBSS("L")
"RTN","IBCF23A",26,0)
 S IBCPLINK=$P(IBSS,U,$L(IBSS,U))
"RTN","IBCF23A",27,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_IBCPLINK
"RTN","IBCF23A",28,0)
 ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
"RTN","IBCF23A",29,0)
 ;I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,15)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")
"RTN","IBCF23A",30,0)
 ; vd/Beginning of IB*2*577 - Added Unit/Basis of Measurment to line level of claim.
"RTN","IBCF23A",31,0)
 I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,16)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,2)),U)
"RTN","IBCF23A",32,0)
 ; vd/End of IB*2*577
"RTN","IBCF23A",33,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",34,0)
 I $G(IBDEN)'="" S IBFLD(24,IBI,"DEN")=$G(IBDEN)
"RTN","IBCF23A",35,0)
 I $D(IBDEN1) M IBFLD(24,IBI,"DEN1")=IBDEN1
"RTN","IBCF23A",36,0)
 I $D(IBDEND) S IBFLD(24,IBI,"DEND")=$G(IBDEND)
"RTN","IBCF23A",37,0)
 ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",38,0)
 Q
"RTN","IBCF23A",39,0)
 ;
"RTN","IBCF23A",40,0)
AUXOK(IBSS,IBSS1) ; Check all other flds are the same to combine procs
"RTN","IBCF23A",41,0)
 ; IBSS = subscript of IBCP to check for dups to combine - pass by ref
"RTN","IBCF23A",42,0)
 ; IBSS(IBSS,"AUX-X",n) = all the previously extracted line items for the
"RTN","IBCF23A",43,0)
 ;  same set of basic data, but having different "AUX" data
"RTN","IBCF23A",44,0)
 ; IBSS1 = the "AUX" data of the current IBCP entry
"RTN","IBCF23A",45,0)
 ;
"RTN","IBCF23A",46,0)
 ; Returns entry # in IBSS array if match found, or 0 if no match
"RTN","IBCF23A",47,0)
 ; Set the IBSS "AUX-X" node for no match
"RTN","IBCF23A",48,0)
 N Z,Z0,Z1,XIEN
"RTN","IBCF23A",49,0)
 S Z=0 F  S Z=$O(IBSS(IBSS,"AUX-X",Z)) Q:'Z  I IBSS1=IBSS(IBSS,"AUX-X",Z) Q
"RTN","IBCF23A",50,0)
 ;JWS;IB*2.0*592;Dental fields to check for roll-up
"RTN","IBCF23A",51,0)
 S XIEN=$G(IBSS(IBSS,1))
"RTN","IBCF23A",52,0)
 I $D(IBCP(IBPO,"DEN"))!($D(IBCP(IBPO,"DEN1")))!($D(IBCP(IBPO,"DEND")))!($D(IBCP(XIEN,"DEN")))!($D(IBCP(XIEN,"DEN1")))!($D(IBCP(XIEN,"DEND"))) D
"RTN","IBCF23A",53,0)
 . I $G(IBCP(IBPO,"DEN"))'=$G(IBCP(XIEN,"DEN")) S Z=0 Q
"RTN","IBCF23A",54,0)
 . I $G(IBCP(IBPO,"DEND"))'=$G(IBCP(XIEN,"DEND")) S Z=0 Q
"RTN","IBCF23A",55,0)
 . S Z1=0 F  S Z1=$O(IBCP(IBPO,"DEN1",Z1)) Q:'Z1  I $G(IBCP(IBPO,"DEN1",Z1,0))'=$G(IBCP(XIEN,"DEN1",Z1,0)) S Z=0 Q
"RTN","IBCF23A",56,0)
 I 'Z S Z0=+$O(IBSS(IBSS,"AUX-X",""),-1)+1,IBSS(IBSS,"AUX-X",Z0)=IBSS1
"RTN","IBCF23A",57,0)
 Q +Z
"RTN","IBCF23A",58,0)
 ;
"RTN","IBCF23A",59,0)
PRC ; Extract procedure data for HCFA 1500
"RTN","IBCF23A",60,0)
 ; IBRC(IBSS) = #rev codes with same billing criteria (IBSS)
"RTN","IBCF23A",61,0)
 ; IBLINK('CP' ien,'RC' ien) = IBSS including modifiers,rx seq in pc 7,8
"RTN","IBCF23A",62,0)
 ; IBLINK1(IBSS, 'RC' ien) =  auto (1)^ 'CP' ien (soft link)
"RTN","IBCF23A",63,0)
 ;
"RTN","IBCF23A",64,0)
 ; proc array w/chrg
"RTN","IBCF23A",65,0)
 ;JWS;IB*2.0*592;US131; added IBLN1, IBDENLN
"RTN","IBCF23A",66,0)
 ;IA# 3820
"RTN","IBCF23A",67,0)
 N IBPR,IBP,IBDENLN,IBLN1
"RTN","IBCF23A",68,0)
 S IBI=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:'IBI  K IBDENLN S IBLN=^(IBI,0),IBLN1=$G(^(1)),IBAUXLN=$G(^("AUX")),IBDENLN=$G(^("DEN")) D
"RTN","IBCF23A",69,0)
 . I $O(^DGCR(399,IBIFN,"CP",IBI,"DEN1",0)) M IBDENLN("DEN1")=^DGCR(399,IBIFN,"CP",IBI,"DEN1")
"RTN","IBCF23A",70,0)
 . ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",71,0)
 . N Z,Z0,Z1,Q1
"RTN","IBCF23A",72,0)
 . S IBPDT=$P(IBLN,U,2)
"RTN","IBCF23A",73,0)
 . S IBSS=$$IBSS(IBI,.IBDXI,IBLN)
"RTN","IBCF23A",74,0)
 . S IBPO=$S($P(IBLN,U,4):+$P(IBLN,U,4),1:IBI+1000) ;Set print order
"RTN","IBCF23A",75,0)
 . S IBCP(IBPO)=IBPDT_"^"_IBSS,IBCP(IBPO,"AUX")=IBAUXLN
"RTN","IBCF23A",76,0)
 . S IBCP(IBPO,"LNK")=IBI
"RTN","IBCF23A",77,0)
 . ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",78,0)
 . I $G(IBLN1)'="" S IBCP(IBPO,"DEND")=IBLN1
"RTN","IBCF23A",79,0)
 . I $G(IBDENLN)'="" S IBCP(IBPO,"DEN")=IBDENLN
"RTN","IBCF23A",80,0)
 . I $O(IBDENLN("DEN1",0)) M IBCP(IBPO,"DEN1")=IBDENLN("DEN1")
"RTN","IBCF23A",81,0)
 . ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",82,0)
 . ; Rx
"RTN","IBCF23A",83,0)
 . N IBZ,IBITEM
"RTN","IBCF23A",84,0)
 . S IBZ=$S($P(IBSS,U):$P(IBSS,U),1:"")
"RTN","IBCF23A",85,0)
 . I IBZ'="",$D(IBLINKRX(IBZ,IBI)) D  Q:IBCHARG'=""
"RTN","IBCF23A",86,0)
 .. S IBPO1=IBPO
"RTN","IBCF23A",87,0)
 .. S IBITEM=+$O(IBLINKRX(IBZ,IBI,0)),IBRV=$G(IBLINKRX(IBZ,IBI,IBITEM))
"RTN","IBCF23A",88,0)
 .. Q:$S(IBRV="":1,1:'$G(IBRC(IBRV)))
"RTN","IBCF23A",89,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",90,0)
 .. S $P(IBCP(IBPO1),U,9)=IBCHARG,IBCP(IBPO1,"RX")=IBITEM K IBLINKRX(IBZ,IBI,IBITEM)
"RTN","IBCF23A",91,0)
 . ; find chrgs directly linked to proc
"RTN","IBCF23A",92,0)
 . S IBK=0 F  S IBK=$O(IBLINK(IBI,IBK)) Q:'IBK  S IBRV1=IBLINK(IBI,IBK),IBRV=$P(IBRV1,U,1,6) I +IBRC(IBRV1) D
"RTN","IBCF23A",93,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV1)=IBRC(IBRV1)-1
"RTN","IBCF23A",94,0)
 .. I IBCHARG'="" S $P(IBSS,U,8)=IBCHARG,IBCP(IBPO)=IBPDT_"^"_IBSS,IBPO=IBPO+.1
"RTN","IBCF23A",95,0)
 ;
"RTN","IBCF23A",96,0)
 ; add chrgs associated with a proc (not a direct link)
"RTN","IBCF23A",97,0)
 ; find chrg associated with proc, if any (match proc,div,+/-basc)
"RTN","IBCF23A",98,0)
 K IBP(0)
"RTN","IBCF23A",99,0)
 F IBP=3,2 Q:$D(IBP(0))  S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",100,0)
 . S IBSS=$P(IBCP(IBPO),U,2,9)
"RTN","IBCF23A",101,0)
 . S IBCHARG="",(IBRV,IBSS)=$P(IBSS,U,1,IBP) F  S IBRV=$O(IBRC(IBRV)) Q:$P(IBRV,U,1,IBP)'=IBSS  S IBP(0)=0 I +IBRC(IBRV) D  Q
"RTN","IBCF23A",102,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",103,0)
 .. I IBRC(IBRV) S Z=0 F  S Z=$O(IBCP(IBPO,Z)) Q:'Z  S IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",104,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",105,0)
 . I IBCHARG'="" S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",106,0)
 ;
"RTN","IBCF23A",107,0)
 ; add chrgs not associated with a proc to first proc with no chrg
"RTN","IBCF23A",108,0)
 ; Aggggh!!! TP
"RTN","IBCF23A",109,0)
 S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",110,0)
 . S IBCHARG="",IBRV="^" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""!+IBRV  I +IBRC(IBRV) D  Q
"RTN","IBCF23A",111,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",112,0)
 .. S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",113,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",114,0)
 ;
"RTN","IBCF23A",115,0)
 Q
"RTN","IBCF23A",116,0)
IBSS(IBI,IBDXI,IBLN) ; Creates index sequence for procedure
"RTN","IBCF23A",117,0)
 N IBPC,IBJ,IBSS,IBLPI,IBX,IBLPAR
"RTN","IBCF23A",118,0)
 S (IBPC,IBLPI)=0
"RTN","IBCF23A",119,0)
 F IBJ=1,6,5,0,9,10 S IBPC=IBPC+1 S:IBJ $P(IBSS,U,IBPC,IBPC+1)=($P(IBLN,U,IBJ)_U)
"RTN","IBCF23A",120,0)
 S $P(IBSS,U,7)=($$GETMOD^IBEFUNC(IBIFN,IBI)_U) ;Modifiers
"RTN","IBCF23A",121,0)
 ;IB*547/TAZ - IBDXI not defined, use internal DX pointer
"RTN","IBCF23A",122,0)
 I '$G(IBNWPTCH) F IBJ=11:1:14 I $P(IBLN,U,IBJ) S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(+$P(IBLN,U,IBJ))) ; dx
"RTN","IBCF23A",123,0)
 I $G(IBNWPTCH) F IBJ=11:1:14 S IBX=$P(IBLN,U,IBJ) I IBX S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(IBX),IBX) ; dx
"RTN","IBCF23A",124,0)
 S $P(IBSS,U,10)=$P(IBLN,U,16),$P(IBSS,U,9)=$P(IBLN,U,19),$P(IBSS,U,11)=+$P(IBLN,U,17)
"RTN","IBCF23A",125,0)
 G:'$G(IBNWPTCH) IBSSX
"RTN","IBCF23A",126,0)
 ;IB*547/TAZ - Add additional fields for roll-up compare
"RTN","IBCF23A",127,0)
 S $P(IBSS,U,21)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ASSOCIATED CLINIC","I")
"RTN","IBCF23A",128,0)
 S $P(IBSS,U,22)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","TYPE OF SERVICE","I")
"RTN","IBCF23A",129,0)
 S $P(IBSS,U,23)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ATTACHMENT CONTROL NUMBER","I")
"RTN","IBCF23A",130,0)
 S $P(IBSS,U,24)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","NDC","I")
"RTN","IBCF23A",131,0)
 S $P(IBSS,U,25)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","PROCEDURE DESCRIPTION","I")
"RTN","IBCF23A",132,0)
 S $P(IBSS,U,26)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ADDITIONAL OB MINUTES","I")
"RTN","IBCF23A",133,0)
 ;JRA;IB*2.0*608 Put Certificate of Medical Necessity (CMN) info in pieces 30,31,32
"RTN","IBCF23A",134,0)
 M IBLPAR=^DGCR(399,IBIFN,"CP",IBI)
"RTN","IBCF23A",135,0)
 S $P(IBSS,U,30)=$TR($G(IBLPAR("CMN")),U,"~")
"RTN","IBCF23A",136,0)
 S $P(IBSS,U,31)=$TR($G(IBLPAR("CMN-10126")),U,"~")
"RTN","IBCF23A",137,0)
 S $P(IBSS,U,32)=$TR($G(IBLPAR("CMN-484")),U,"~")
"RTN","IBCF23A",138,0)
 K IBLPAR
"RTN","IBCF23A",139,0)
 ;Add Provider info in pieces 41-49
"RTN","IBCF23A",140,0)
 M IBLPAR=^DGCR(399,IBIFN,"CP",IBI,"LNPRV")
"RTN","IBCF23A",141,0)
 F  S IBLPI=$O(IBLPAR(IBLPI)) Q:'IBLPI  S IBX=IBLPAR(IBLPI,0),$P(IBSS,U,40+IBX)=$TR(IBX,"^","~")
"RTN","IBCF23A",142,0)
 K IBLPAR
"RTN","IBCF23A",143,0)
IBSSX ;
"RTN","IBCF23A",144,0)
 Q IBSS
"RTN","IBCF23A",145,0)
 ;
"RTN","IBCF23A",146,0)
IBNWPTCH(IBIFN,IBPATCH) ;
"RTN","IBCF23A",147,0)
 ;Checks the date the primary claim was 1st transmitted and returns 1 if the transmitted date is after the patch
"RTN","IBCF23A",148,0)
 ;referenced in variable IBPATCH was released. This allows the MRA/EOBs returning to roll up procedures the same
"RTN","IBCF23A",149,0)
 ;way as they went out.  Otherwise the order changes and the MRA/EOB won't match up.
"RTN","IBCF23A",150,0)
 ;
"RTN","IBCF23A",151,0)
 N IBARY,IBIDT,IBPFN,IBEFN,IBBN,IBX,IBBDT
"RTN","IBCF23A",152,0)
 S IBX=0
"RTN","IBCF23A",153,0)
 I $$INSTALDT^XPDUTL(IBPATCH,.IBARY) D   ;ICR 10141
"RTN","IBCF23A",154,0)
 . S IBX=1
"RTN","IBCF23A",155,0)
 . S IBIDT=$O(IBARY(""))
"RTN","IBCF23A",156,0)
 . ; Get Primary Bill Number. This will insure COB data is consistent across all bills.
"RTN","IBCF23A",157,0)
 . S IBPFN=$$GET1^DIQ(399,IBIFN_",","PRIMARY BILL #","I") I 'IBPFN S IBPFN=IBIFN
"RTN","IBCF23A",158,0)
 . ; Find 1st Accepted Entry (A1, A2, or Z) of Primary Bill in EDI TRANSMIT BILL FILE (364) to determine Batch Number
"RTN","IBCF23A",159,0)
 . S (IBEFN,IBBN)=0 F  S IBEFN=$O(^IBA(364,"B",IBPFN,IBEFN)) Q:'IBEFN  D  I IBBN Q
"RTN","IBCF23A",160,0)
 .. I ",A1,A2,Z,"'[(","_$$GET1^DIQ(364,IBEFN_",","TRANSMISSION STATUS","I")_",") Q
"RTN","IBCF23A",161,0)
 .. S IBBN=$$GET1^DIQ(364,IBEFN_",","BATCH NUMBER","I")
"RTN","IBCF23A",162,0)
 . ;Retrieve the date the batch was 1st sent.  If IBBN="" IBBDT will be null
"RTN","IBCF23A",163,0)
 . S IBBDT=$$GET1^DIQ(364.1,$$GET1^DIQ(364,IBBN_",","BATCH NUMBER","I")_",","DATE FIRST SENT","I")
"RTN","IBCF23A",164,0)
 . I IBBDT,(IBBDT<IBIDT) S IBX=0
"RTN","IBCF23A",165,0)
 Q IBX
"RTN","IBCNSC01")
0^9^B76348341^B75281286
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371,399,416,432,494,519,547,592,608**;21-MAR-94;Build 90
"RTN","IBCNSC01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3,IBHPD
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 ;
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+4,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+5,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+8,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12)_$S(+$P(IBCNS0,"^",18):" ("_$$FTFN^IBCNSU31(,+IBCNS)_")",1:""))
"RTN","IBCNSC01",21,0)
 ;
"RTN","IBCNSC01",22,0)
 S OFFSET=45
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+1,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",28,0)
 I +IBCNS3=2 D SET^IBCNSP(START+6,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",29,0)
 ;
"RTN","IBCNSC01",30,0)
 S START=11,OFFSET=2
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",32,0)
 ;/IB*2*608 (vd) for US1909 changed the line below from "TEST ONLY" to "YES-TEST"
"RTN","IBCNSC01",33,0)
 ;D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",$P(IBCNS3,U,1)="":"",1:"NO"))
"RTN","IBCNSC01",34,0)
 D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"YES-TEST",$P(IBCNS3,U,1)="":"",1:"NO"))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",36,0)
 ;
"RTN","IBCNSC01",37,0)
 ;WCJ;IB*2.0*547; Lots o Changes below to include new Alternate Primary ID
"RTN","IBCNSC01",38,0)
 N IBAC,IBACND,LOOP
"RTN","IBCNSC01",39,0)
 S IBACMAX=0
"RTN","IBCNSC01",40,0)
 F IBACND=15,16 D
"RTN","IBCNSC01",41,0)
 .S LOOP=0 F  S LOOP=$O(^DIC(36,+IBCNS,IBACND,LOOP)) Q:'+LOOP  D
"RTN","IBCNSC01",42,0)
 ..S IBAC(IBACND,"CT")=$G(IBAC(IBACND,"CT"))+1 I IBAC(IBACND,"CT")>IBACMAX S IBACMAX=IBAC(IBACND,"CT")
"RTN","IBCNSC01",43,0)
 ..S IBAC(IBACND,IBAC(IBACND,"CT"))=$P($G(^DIC(36,+IBCNS,IBACND,LOOP,0)),U,1,2)
"RTN","IBCNSC01",44,0)
 ;
"RTN","IBCNSC01",45,0)
 S LOOP=0 F  S LOOP=$O(IBAC(15,LOOP)) Q:'LOOP  D
"RTN","IBCNSC01",46,0)
 .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET,"Alt-I Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(15,LOOP)),U),.01))
"RTN","IBCNSC01",47,0)
 .D SET^IBCNSP(START+2+(LOOP*2),OFFSET,"Alt-Inst Payer Prim ID: "_$P($G(IBAC(15,LOOP)),U,2))
"RTN","IBCNSC01",48,0)
 ;
"RTN","IBCNSC01",49,0)
 D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
"RTN","IBCNSC01",50,0)
 D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
"RTN","IBCNSC01",51,0)
 D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
"RTN","IBCNSC01",52,0)
 D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
"RTN","IBCNSC01",53,0)
 ;
"RTN","IBCNSC01",54,0)
 ;JWS;IB*2.0*592;Dental Payer ID, moved UMO ID and HPD down 1
"RTN","IBCNSC01",55,0)
 D SET^IBCNSP(START+7+(2*IBACMAX),OFFSET+7,"Dental Payer ID: "_$P(IBCNS3,U,15))
"RTN","IBCNSC01",56,0)
 D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3))
"RTN","IBCNSC01",57,0)
 ;IB*2.0*547;WCJ Added and bumped HPID down
"RTN","IBCNSC01",58,0)
 D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET+10,"UMO (278) ID: "_$P($G(^DIC(36,+IBCNS,7)),U))
"RTN","IBCNSC01",59,0)
 ;ib*2.0*519
"RTN","IBCNSC01",60,0)
 S IBHPD=$$HPD^IBCNHUT1(+IBCNS)
"RTN","IBCNSC01",61,0)
 D SET^IBCNSP(START+10+(2*IBACMAX),OFFSET+13,$P($$HOD^IBCNHUT1(IBHPD),U,2)_": "_IBHPD)
"RTN","IBCNSC01",62,0)
 ;
"RTN","IBCNSC01",63,0)
 S OFFSET=41
"RTN","IBCNSC01",64,0)
 D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",65,0)
 D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",66,0)
 ;
"RTN","IBCNSC01",67,0)
 S LOOP=0 F  S LOOP=$O(IBAC(16,LOOP)) Q:'LOOP  D
"RTN","IBCNSC01",68,0)
 .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET+1,"Alt-P Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(16,LOOP)),U),.01))
"RTN","IBCNSC01",69,0)
 .D SET^IBCNSP(START+2+(LOOP*2),OFFSET+1,"Alt-Prof Payer Prim ID: "_$P($G(IBAC(16,LOOP)),U,2))
"RTN","IBCNSC01",70,0)
 ;
"RTN","IBCNSC01",71,0)
 D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
"RTN","IBCNSC01",72,0)
 D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
"RTN","IBCNSC01",73,0)
 D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
"RTN","IBCNSC01",74,0)
 D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
"RTN","IBCNSC01",75,0)
 ;IB*2.0*432/TAZ Added fields 6.09 and 6.1
"RTN","IBCNSC01",76,0)
 D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET-3," Prnt Sec/Tert Auto Claims: "_$$GET1^DIQ(36,+IBCNS,6.09))
"RTN","IBCNSC01",77,0)
 D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET-5," Prnt Med Sec Claims w/o MRA: "_$$GET1^DIQ(36,+IBCNS,6.1))
"RTN","IBCNSC01",78,0)
 Q
"RTN","IBCNSC01",79,0)
 ;
"RTN","IBCNSC01",80,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",81,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",82,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",83,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",84,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",85,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",86,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",87,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",88,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",89,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",90,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",91,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",92,0)
PHONEQ Q IBX
"RTN","IBCNSC01",93,0)
 ;
"RTN","IBCNSC01",94,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",95,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",96,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",97,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",98,0)
 ;
"RTN","IBCNSC01",99,0)
 ;S START=21,OFFSET=25
"RTN","IBCNSC01",100,0)
 S START=22+(2*IBACMAX),OFFSET=25
"RTN","IBCNSC01",101,0)
MAINAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI
"RTN","IBCNSC01",102,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",103,0)
 S OFFSET=2
"RTN","IBCNSC01",104,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",105,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",106,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",107,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",108,0)
 S OFFSET=45
"RTN","IBCNSC01",109,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",110,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",111,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",112,0)
 Q
"RTN","IBCNSC01",113,0)
 ;
"RTN","IBCNSC01",114,0)
 ;
"RTN","IBCNSC01",115,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",116,0)
 ; this insurance company.
"RTN","IBCNSC01",117,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",118,0)
 ;     -  9/9/09 - eIV updated
"RTN","IBCNSC01",119,0)
 ;     -  2/4/13 - remove ePharmacy references (IB*2*494)
"RTN","IBCNSC01",120,0)
 ;
"RTN","IBCNSC01",121,0)
 N PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",122,0)
 N START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",123,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",124,0)
 I PAYERIEN D
"RTN","IBCNSC01",125,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",126,0)
 . S APP=0
"RTN","IBCNSC01",127,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",128,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",129,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",130,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",131,0)
 .. I APPNAME="IIV" S APPNAME="eIV"   ; IB*2*416 - change external display to be eIV
"RTN","IBCNSC01",132,0)
 .. I APPNAME="E-PHARM" Q             ; IB*2*494 - don't display ePharmacy application data
"RTN","IBCNSC01",133,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",134,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",135,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",136,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",137,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",138,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID (*416 field not used)
"RTN","IBCNSC01",139,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID (*416 field not used)
"RTN","IBCNSC01",140,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN (*416 field not used)
"RTN","IBCNSC01",141,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",142,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",143,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",144,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",145,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",146,0)
 .. Q
"RTN","IBCNSC01",147,0)
 . Q
"RTN","IBCNSC01",148,0)
 ;
"RTN","IBCNSC01",149,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC01",150,0)
 S IB1ST("PAYER")=START
"RTN","IBCNSC01",151,0)
 S TITLE=" Payer Information:  e-IV "     ; esg - IB*2*494 - remove ePharmacy reference
"RTN","IBCNSC01",152,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",153,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",154,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",155,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",156,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",157,0)
 S IBLINE=START+2
"RTN","IBCNSC01",158,0)
 ;
"RTN","IBCNSC01",159,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",160,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",161,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",162,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",163,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",164,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",165,0)
 . Q
"RTN","IBCNSC01",166,0)
 ;
"RTN","IBCNSC01",167,0)
 ; Display all the applications
"RTN","IBCNSC01",168,0)
 S APPNAME=""
"RTN","IBCNSC01",169,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",170,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",171,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",172,0)
 . ;
"RTN","IBCNSC01",173,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",174,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",175,0)
 . D SET^IBCNSP(IBLINE,51,"FSC Auto-Update: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",176,0)
 . ;
"RTN","IBCNSC01",177,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",178,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",179,0)
 . D SET^IBCNSP(IBLINE,55,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",180,0)
 . ;
"RTN","IBCNSC01",181,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",182,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",183,0)
 . ;
"RTN","IBCNSC01",184,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",185,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",186,0)
 . ;
"RTN","IBCNSC01",187,0)
 . D SET^IBCNSP(IBLINE,50,"Date Deactivated: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",188,0)
 . ;
"RTN","IBCNSC01",189,0)
 . Q
"RTN","IBCNSC01",190,0)
PAYERX ;
"RTN","IBCNSC01",191,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",192,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",193,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",194,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",195,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",196,0)
 Q
"RTN","IBCNSC01",197,0)
 ;
"RTN","IBCNSC01",198,0)
 ;
"RTN","IBCNSC01",199,0)
REMARKS ;
"RTN","IBCNSC01",200,0)
 ;
"RTN","IBCNSC01",201,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",202,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",203,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",204,0)
 ;
"RTN","IBCNSC01",205,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",206,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",207,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",208,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",209,0)
 . Q
"RTN","IBCNSC01",210,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",211,0)
 Q
"RTN","IBCNSC01",212,0)
 ;
"RTN","IBCNSC01",213,0)
SYN ;
"RTN","IBCNSC01",214,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",215,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",216,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",217,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",218,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",219,0)
 Q
"RTN","IBCNSC01",220,0)
 ;
"RTN","IBCU7")
0^6^B180096059^B175831153
"RTN","IBCU7",1,0)
IBCU7 ;ALB/AAS - INTERCEPT SCREEN INPUT OF PROCEDURE CODES ;29-OCT-91
"RTN","IBCU7",2,0)
 ;;2.0;INTEGRATED BILLING;**62,52,106,125,51,137,210,245,228,260,348,371,432,447,488,461,516,522,577,604,616,592,608**;21-MAR-94;Build 90
"RTN","IBCU7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU7",4,0)
 ;
"RTN","IBCU7",5,0)
 ;MAP TO DGCRU7
"RTN","IBCU7",6,0)
 ;
"RTN","IBCU7",7,0)
 ; This routine is a copy of IBUC7 for testing purposes.
"RTN","IBCU7",8,0)
 ;
"RTN","IBCU7",9,0)
CHKX ;  -interception of input x from Additional Procedure input
"RTN","IBCU7",10,0)
 G:X=" " CHKXQ
"RTN","IBCU7",11,0)
 I $$INPAT^IBCEF(DA(1)),'$P($G(^IBE(350.9,1,1)),"^",15),X'?1A1.2N D  G CHKXQ
"RTN","IBCU7",12,0)
 . K X
"RTN","IBCU7",13,0)
 . D EN^DDIOL("Site param does not allow entry of non-PTF procedures") ;Fileman error here will be: The previous error occurred when performing an action specified in a Pre-lookup transform (7.5 node).
"RTN","IBCU7",14,0)
 G:'$D(^UTILITY($J,"IB")) CHKXQ
"RTN","IBCU7",15,0)
 ;S M=($A($E(X,1))-64),S=+$E(X,2) Q:'$G(^UTILITY($J,"IB",M,S))  S X="`"_+^(S)
"RTN","IBCU7",16,0)
 S M=0 I X?1A1.2N S N=$G(^UTILITY($J,"IB","B",X)) S M=+N,S=+$P(N,U,2),P=X S S=$G(^UTILITY($J,"IB",M,S)) I +S S X="`"_+S I $P(N,U,3)="N" S X=""""_X_"""" S $P(^UTILITY($J,"IB","B",P),U,3)="Y"
"RTN","IBCU7",17,0)
 I +M,$D(DGPROCDT),DGPROCDT'=$P($G(^UTILITY($J,"IB",M,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) W !!,"Procedure Date: " S Y=DGPROCDT X ^DD("DD") W Y,!
"RTN","IBCU7",18,0)
CHKXQ Q
"RTN","IBCU7",19,0)
 ;
"RTN","IBCU7",20,0)
CODMUL ;Date oriented entry of procedure
"RTN","IBCU7",21,0)
DELASK I $D(IBZ20),IBZ20,IBZ20'=$P(^DGCR(399,IBIFN,0),U,9) S %=2 W !,"SINCE THE PROCEDURE CODING METHOD HAS BEEN CHANGED, DO YOU WANT TO DELETE ALL",!,"PROCEDURE CODES IN THIS BILL"
"RTN","IBCU7",22,0)
 I  D YN^DICN Q:%=-1  D:%=1 DELADD I %Y?1."?" W !!,"If you answer 'Yes', all procedure codes will be DELETED from this bill.",! G DELASK
"RTN","IBCU7",23,0)
 K %,%Y,DA,IBZ20,DIK ;W !,"Procedure Entry:"
"RTN","IBCU7",24,0)
 ;
"RTN","IBCU7",25,0)
CODDT I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",26,0)
 I $P($G(^DGCR(399,IBIFN,0)),"^",5)<3 S IBZTYPE=1 I $P($G(^UTILITY($J,"IB",1,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) D ASKCOD
"RTN","IBCU7",27,0)
 S X=$$PRCDIV^IBCU71(IBIFN) I +X W !!,$P(X,U,2),!
"RTN","IBCU7",28,0)
 N Z,Z0 S Z=$G(^DGCR(399,IBIFN,"U")),Z0=$$FMTE^XLFDT($P(Z,U),"2D")_"-"_$$FMTE^XLFDT($P(Z,U,2),"2D")
"RTN","IBCU7",29,0)
 W !,"Select PROCEDURE DATE"_$S($TR(Z0,"-")'="":" ("_Z0_")",1:"")_": " R X:DTIME G:'$T!("^"[X) CODQ D:X["?" CODHLP
"RTN","IBCU7",30,0)
 S IBEX=0 D  ; Get procedure date
"RTN","IBCU7",31,0)
 . I X=" ",$D(DGPROCDT),DGPROCDT?7N S Y=DGPROCDT D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",32,0)
 . I X=" ",+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4) S (DGPROCDT,Y)=$O(^DGCR(399,IBIFN,"OP",0)) D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",33,0)
 . S %DT="EXP",%DT(0)=-DT D ^%DT K %DT I Y<1 S IBEX=1 Q
"RTN","IBCU7",34,0)
 . I '$$OPV2^IBCU41(Y,IBIFN,1) S IBEX=1 Q
"RTN","IBCU7",35,0)
 . S:'$G(IBZTYPE) X=$$OPV^IBCU41(Y,IBIFN) S DGPROCDT=Y
"RTN","IBCU7",36,0)
 I 'IBEX D ASKCOD,ADDCPT^IBCU71:$D(DGCPT)
"RTN","IBCU7",37,0)
 K IBEX
"RTN","IBCU7",38,0)
 G CODDT
"RTN","IBCU7",39,0)
 ;
"RTN","IBCU7",40,0)
ASKCOD N Z,Z0,DA,IBACT,IBQUIT,IBLNPRV,IBCODE,IBPIEN  ;WCJ;2.0*432
"RTN","IBCU7",41,0)
 N IBPOPOUT  S IBPOPOUT=0  ; IB*2.0*447 BI
"RTN","IBCU7",42,0)
 K DGCPT
"RTN","IBCU7",43,0)
 S DGCPT=0,DGCPTUP=$P($G(^IBE(350.9,1,1)),"^",19),DGADDVST=0,IBFT=$P($G(^DGCR(399,IBIFN,0)),"^",19)
"RTN","IBCU7",44,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S ^DGCR(399,IBIFN,"CP",0)=U_$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCU7",45,0)
 ;
"RTN","IBCU7",46,0)
 F  S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCU7",47,0)
 . S IBPOPOUT=0
"RTN","IBCU7",48,0)
 . D DICV ; restrict code type to PCM
"RTN","IBCU7",49,0)
 . S DIC("A")="   Select PROCEDURE: "
"RTN","IBCU7",50,0)
 . S DIC="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",51,0)
 . S DIC(0)="AEQMNL"
"RTN","IBCU7",52,0)
 . S DIC("S")="I '$D(DIV(""S""))&($P(^(0),U,2)=DGPROCDT)"
"RTN","IBCU7",53,0)
 . S DIC("DR")="1///^S X=DGPROCDT"
"RTN","IBCU7",54,0)
 . S DA(1)=IBIFN,DLAYGO=399
"RTN","IBCU7",55,0)
 . W ! D ^DIC I Y<1 S IBQUIT=1 Q
"RTN","IBCU7",56,0)
 . S IBPROCP=+Y
"RTN","IBCU7",57,0)
 . S IBCODE="" I Y["ICPT" S IBPIEN=+$P(Y,U,2),IBCODE=$P($$CPT^ICPTCOD(IBPIEN),U,2) ;IB*2.0*616, get procedure code, supported by ICR 1995
"RTN","IBCU7",58,0)
 . ; If we just added inactive code - it must be deleted.
"RTN","IBCU7",59,0)
 . S IBACT=0 ; Active flag
"RTN","IBCU7",60,0)
 . I Y["ICD0" S IBACT=$$ICD0ACT^IBACSV(+$P(Y,U,2),$$BDATE^IBACSV(IBIFN))
"RTN","IBCU7",61,0)
 . I Y["ICPT" S IBACT=$$CPTACT^IBACSV(+$P(Y,U,2),DGPROCDT)
"RTN","IBCU7",62,0)
 . S DGCPTNEW=$P(Y,"^",3) ;Was the procedure just added?
"RTN","IBCU7",63,0)
 . I DGCPTNEW,'IBACT D DELPROC Q
"RTN","IBCU7",64,0)
 . I 'IBACT W !,*7,"Warning:  Procedure code is inactive on this date",!
"RTN","IBCU7",65,0)
 . I DGCPTNEW,$D(^UTILITY($J,"IB")),$$INPAT^IBCEF(IBIFN),Y["ICPT(" D DATA^IBCU74(Y,.IBLNPRV)
"RTN","IBCU7",66,0)
 . S DGADDVST=$S(DGCPTNEW:1,$D(DGADDVST):DGADDVST,1:0)
"RTN","IBCU7",67,0)
 . N IBPRV,IBPRVO,IBPRVN
"RTN","IBCU7",68,0)
 . ;
"RTN","IBCU7",69,0)
 . ; Line level provider function by form type.
"RTN","IBCU7",70,0)
 . ;     CMS-1500 (FORM TYPE=2)
"RTN","IBCU7",71,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",72,0)
 . ;              and SUPERVISING PROVIDER.
"RTN","IBCU7",73,0)
 . ;     UB-04 (FORM TYPE=3)
"RTN","IBCU7",74,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",75,0)
 . ;              OPERATING PROVIDER, and OTHER OPERATING
"RTN","IBCU7",76,0)
 . ;              PROVIDER.
"RTN","IBCU7",77,0)
 . ;
"RTN","IBCU7",78,0)
 . ; Removed: Call to $$MAINPRV^IBCEU(IBIFN) is for claim
"RTN","IBCU7",79,0)
 . ;          level provider defaults.
"RTN","IBCU7",80,0)
 . ;     1. For new line level providers we don't need
"RTN","IBCU7",81,0)
 . ;        or want default claim level provider
"RTN","IBCU7",82,0)
 . ;        (requirement).
"RTN","IBCU7",83,0)
 . ;     2. We don't want to default claim level to
"RTN","IBCU7",84,0)
 . ;        line level provider (requirement).
"RTN","IBCU7",85,0)
 . ;
"RTN","IBCU7",86,0)
 . K DIC("V")  ; DEM;432 - KILL DIC("V") because this was for previous variable pointer use.
"RTN","IBCU7",87,0)
 . ;
"RTN","IBCU7",88,0)
 . N IBPROCSV  ; DEM;432 - Variable IBPROCSV is variable to preserve value of 'Y', which is procedure code info returned by call to ^DIC.
"RTN","IBCU7",89,0)
 . S IBPROCSV=Y  ; DEM;432 - Preserve value of Y for after calls to FileMan (Y = procedure code info returned by call to ^DIC).
"RTN","IBCU7",90,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",91,0)
 . ;
"RTN","IBCU7",92,0)
 . I IBPROCSV["ICD0" S DR=".01",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*461
"RTN","IBCU7",93,0)
 . ;
"RTN","IBCU7",94,0)
 . ;JRA;IB*2.0*608 Prompt user for Certificate of Medical Necessity (CMN) info
"RTN","IBCU7",95,0)
 . I $$FT^IBCEF(IBIFN)=2,$$CMNPRMT^IBJPS8(IBIFN,IBPROCP,$P($P(IBPROCSV,U,2),";")) D CMN^IBCU75(IBIFN,IBPROCP)
"RTN","IBCU7",96,0)
 . ;
"RTN","IBCU7",97,0)
 . I IBPROCSV["ICPT" S DR=".01;16",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*447 BI
"RTN","IBCU7",98,0)
 . ;
"RTN","IBCU7",99,0)
 . S DR=""
"RTN","IBCU7",100,0)
 . ;
"RTN","IBCU7",101,0)
 . ; MRD;IB*2.0*516 - Added line level PROCEDURE DESCRIPTION field,
"RTN","IBCU7",102,0)
 . ; asked only if the procedure is an "NOC".
"RTN","IBCU7",103,0)
 . I IBPROCSV["ICPT",$$NOCPROC(IBPROCSV,IBCODE,DGPROCDT) D  ; added IBCODE,DGPROCDT in *604
"RTN","IBCU7",104,0)
 . . S DA=$P(IBPROCSV,"^")  ; The line# on the bill/claim.
"RTN","IBCU7",105,0)
 . . S DR=51                ; Field# for PROCEDURE DESCRIPTION
"RTN","IBCU7",106,0)
 . . D ^DIE
"RTN","IBCU7",107,0)
 . . Q
"RTN","IBCU7",108,0)
 . ;
"RTN","IBCU7",109,0)
 . D EN^IBCU7B ; DEM;432 - Call to line level provider user input.
"RTN","IBCU7",110,0)
 . S Y=IBPROCSV  ; DEM;432 - Restore value of Y after calls to FileMan
"RTN","IBCU7",111,0)
 . K IBPROCSV
"RTN","IBCU7",112,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",113,0)
 . I IBPOPOUT Q   ; IB*2.0*447 BI
"RTN","IBCU7",114,0)
 . S DR="" I Y["ICPT" S DR="6;5//"_$$DEFDIV(IBIFN)_";"
"RTN","IBCU7",115,0)
 . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",116,0)
 . ;IA# 10018
"RTN","IBCU7",117,0)
 . S DR=DR_$S(IBFT=7:"8;",IBFT=2:"8;9;17//NO;",1:"")_3,DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($E($G(Y))=U)
"RTN","IBCU7",118,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",119,0)
 . ;
"RTN","IBCU7",120,0)
 . ; MRD;IB*2.0*516 - Allow user to add an NDC and Units.  Ask only if
"RTN","IBCU7",121,0)
 . ; coding system is not ICD and this is not a prescription claim. If
"RTN","IBCU7",122,0)
 . ; an NDC is entered, prompt for Units.
"RTN","IBCU7",123,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,9)'=9,'$$RXLINK^IBCSC5C(IBIFN,IBPROCP) D
"RTN","IBCU7",124,0)
 . . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",125,0)
 . . I IBFT=7 Q
"RTN","IBCU7",126,0)
 . . K DA
"RTN","IBCU7",127,0)
 . . S DA=IBPROCP,DA(1)=IBIFN,DIE="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",128,0)
 . . ; vd/Beginning IB*2*577 - Added the prompt for Unit/Basis of Measurement.
"RTN","IBCU7",129,0)
 . . ; S DR="53NDC NUMBER;I X="""" S Y="""";54//1"
"RTN","IBCU7",130,0)
 . . S DR="53NDC NUMBER;I X="""" S Y="""";52R~//UN;54R~QUANTITY//1"  ;Prompt for NDC, UN & amt.
"RTN","IBCU7",131,0)
 . . ; vd/Ending IB*2*577
"RTN","IBCU7",132,0)
 . . D ^DIE
"RTN","IBCU7",133,0)
 . . Q
"RTN","IBCU7",134,0)
 . ;
"RTN","IBCU7",135,0)
 . I IBFT=3 D:'$$INPAT^IBCEF(IBIFN) ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",136,0)
 . ; DEM;432 - Add Additional OB Minutes to DR string for call to DIE.
"RTN","IBCU7",137,0)
 . S DR=$$SPCUNIT(IBIFN,IBPROCP) S:DR["15;" DR=DR_"74Additional OB Minutes" D ^DIE ; miles/minutes/hours
"RTN","IBCU7",138,0)
 . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",139,0)
 . I IBFT=2!(IBFT=7) D
"RTN","IBCU7",140,0)
 .. D DX^IBCU72(IBIFN,IBPROCP)
"RTN","IBCU7",141,0)
 .. ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",142,0)
 .. I IBFT'=7 S X=$$ADDTNL(IBIFN,.DA)
"RTN","IBCU7",143,0)
 . Q:$$INPAT^IBCEF(IBIFN)  ;only outpatient bills
"RTN","IBCU7",144,0)
 . ;JWS;IB*2.0*592 US1108 - Dental input fields
"RTN","IBCU7",145,0)
 . I IBFT=7 D ORAL^IBCU72
"RTN","IBCU7",146,0)
 . ;add procedures to array for download to PCE: dgcpt(assoc clinic,cpt,'provider^first dx^modifiers',cnt)=""
"RTN","IBCU7",147,0)
 . S DGPROC=$G(^DGCR(399,IBIFN,"CP",+DA,0))
"RTN","IBCU7",148,0)
 . S X=$P(DGPROC,U,18)_U_+$G(^IBA(362.3,+$P(DGPROC,U,11),0))_U_$P(DGPROC,U,15)
"RTN","IBCU7",149,0)
 . I 'DGCPTNEW,$P(DGPROC,"^",7)="" S DGCPTNEW=2
"RTN","IBCU7",150,0)
 . I DGCPTUP,DGCPTNEW S DGCPT=DGCPT+1 I $P(DGPROC,"^",7) S DGCPT($P(DGPROC,"^",7),+DGPROC,X,DGCPT)=""
"RTN","IBCU7",151,0)
 . ; add visit date to bill
"RTN","IBCU7",152,0)
 . I DGADDVST S (X,DINUM)=DGPROCDT D VFILE1^IBCOPV1 K DINUM,X,DGNOADD,DGADDVST
"RTN","IBCU7",153,0)
 ; Delete modifiers with only a sequence #, no code
"RTN","IBCU7",154,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=0 F  S Z0=$O(^DGCR(399,IBIFN,"CP",Z,"MOD",Z0)) Q:'Z0  I $P($G(^(Z0,0)),U,2)="" S DA(2)=IBIFN,DA(1)=Z,DA=Z0,DIK="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""MOD""," D ^DIK
"RTN","IBCU7",155,0)
 Q
"RTN","IBCU7",156,0)
CODQ K %DT,DGPROC,DIC,DIE,DR,DGPROCDT,IBPROCP,DLAYGO
"RTN","IBCU7",157,0)
 K IBFT,DGNOADD,DGADDVST,DGCPT,DGCPTUP,IBZTYPE,DGCPTNEW
"RTN","IBCU7",158,0)
 Q
"RTN","IBCU7",159,0)
 ;
"RTN","IBCU7",160,0)
DELPROC ; Remove the selected procedure, because of inactive status (cancel selection)
"RTN","IBCU7",161,0)
 W !!,*7,"The Procedure code is inactive on ",$$DAT1^IBOUTL(DGPROCDT),"."
"RTN","IBCU7",162,0)
 W !,"Please select another Procedure."
"RTN","IBCU7",163,0)
 S DA(1)=IBIFN,DA=+Y,DIK="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",164,0)
 D ^DIK
"RTN","IBCU7",165,0)
 Q
"RTN","IBCU7",166,0)
 ;
"RTN","IBCU7",167,0)
DELADD N Z,Z0,DA,DIK,X,Y
"RTN","IBCU7",168,0)
 S DA(1)=IBIFN
"RTN","IBCU7",169,0)
 ;Delete references to proc on rev codes
"RTN","IBCU7",170,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I Z0'="",$P(Z0,U,15)!$S($P(Z0,U,10)=3:$P(Z0,U,11),1:0) S DIE="^DGCR(399,"_DA(1)_",""RC"",",DA=Z,DR=".11///@;.15///@"_$S($P(Z0,U,8):"",1:";.08////1") D ^DIE
"RTN","IBCU7",171,0)
 S DIK="^DGCR(399,"_DA(1)_",""CP""," F DA=0:0 S DA=$O(^DGCR(399,DA(1),"CP",DA)) Q:'DA  D ^DIK
"RTN","IBCU7",172,0)
 S DGRVRCAL=1
"RTN","IBCU7",173,0)
 Q
"RTN","IBCU7",174,0)
 ;
"RTN","IBCU7",175,0)
DTMES ;Message if procedure date not in date range
"RTN","IBCU7",176,0)
 Q:'$D(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"U"))  S DGNODUU=^("U")
"RTN","IBCU7",177,0)
 G:X'<$P(DGNODUU,"^")&(X'>$P(DGNODUU,"^",2)) DTMESQ
"RTN","IBCU7",178,0)
 W *7,!!?3,"Date must be within STATEMENT COVERS FROM and STATEMENT COVERS TO period."
"RTN","IBCU7",179,0)
 S Y=$P(DGNODUU,"^") X ^DD("DD")
"RTN","IBCU7",180,0)
 W !?3,"Enter a date between ",Y," and " S Y=$P(DGNODUU,"^",2) X ^DD("DD") W Y,!
"RTN","IBCU7",181,0)
 K X,Y
"RTN","IBCU7",182,0)
DTMESQ K DGNODUU Q
"RTN","IBCU7",183,0)
 ;
"RTN","IBCU7",184,0)
CODHLP ;Display Additional Procedure codes
"RTN","IBCU7",185,0)
 N I,J,Y,IBMOD
"RTN","IBCU7",186,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) W !!?5,"No Codes Entered!",! Q
"RTN","IBCU7",187,0)
 W ! F I=0:0 S I=$O(^DGCR(399,IBIFN,"CP",I)) Q:'I  S Y=$G(^(I,0)) S Z=$$PRCNM^IBCSCH1($P(Y,"^",1),$P(Y,"^",2)) W !?5,$E($P(Z,"^",2),1,33),?40,"- ",$P(Z,"^") D
"RTN","IBCU7",188,0)
 . N IBY
"RTN","IBCU7",189,0)
 . S IBY=$P(Y,U,2)
"RTN","IBCU7",190,0)
 . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,I,1)
"RTN","IBCU7",191,0)
 . I IBMOD'="" S IBMOD="/"_IBMOD W IBMOD
"RTN","IBCU7",192,0)
 . W ?60,"Date: " S Y=IBY D DT^DIQ
"RTN","IBCU7",193,0)
 W !
"RTN","IBCU7",194,0)
 ;
"RTN","IBCU7",195,0)
 K Z Q
"RTN","IBCU7",196,0)
 ;
"RTN","IBCU7",197,0)
DICV I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",198,0)
 Q
"RTN","IBCU7",199,0)
 ;
"RTN","IBCU7",200,0)
DEFDIV(IBIFN) ; Find default division for bill IBIFN
"RTN","IBCU7",201,0)
 Q $P($G(^DG(40.8,+$P($G(^DGCR(399,IBIFN,0)),U,22),0)),U)
"RTN","IBCU7",202,0)
 ;
"RTN","IBCU7",203,0)
ADDTNL(IBIFN,DA) ;
"RTN","IBCU7",204,0)
 N DR,IBOK,X,Y,DIR
"RTN","IBCU7",205,0)
 S IBOK=1
"RTN","IBCU7",206,0)
 S DR="19T;50.09T;50.08T" D ^DIE  ; WCJ;IB*2.0*488 Added Ts
"RTN","IBCU7",207,0)
 ;I '($$FT^IBCEF(IBIFN)'=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",208,0)
 I '($$FT^IBCEF(IBIFN)=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",209,0)
 I $D(Y) S IBOK=0 G ADDTNLQ
"RTN","IBCU7",210,0)
 ;/Beginning of IB*2.0*488 (vd)
"RTN","IBCU7",211,0)
 ;S DIR("B")="NO",DIR("A")="EDIT CMS-1500 SPECIAL PROGRAM FIELDS and BOX 19?: ",DIR("A",1)=" ",DIR(0)="YA"
"RTN","IBCU7",212,0)
 ;S DIR("?",1)="Respond YES only if you need to add/edit data for chiropractic visits,"
"RTN","IBCU7",213,0)
 ;S DIR("?")="EPSDT care, or if billing for HOSPICE and attending is not a hospice employee."
"RTN","IBCU7",214,0)
 ;D ^DIR K DIR
"RTN","IBCU7",215,0)
 ;I Y'=1 S IBOK=0 G ADDTNLQ
"RTN","IBCU7",216,0)
 ;S DR="W !,""  <<EPSDT>>"";50.07;W !!,""  <<HOSPICE>>"";50.03"
"RTN","IBCU7",217,0)
 S DR="50.07T;50.03T"   ;WCJ;IB*2.0*488 added Ts
"RTN","IBCU7",218,0)
 ;/End of IB*2.0*488 (vd)
"RTN","IBCU7",219,0)
 D ^DIE
"RTN","IBCU7",220,0)
 W !
"RTN","IBCU7",221,0)
ADDTNLQ Q IBOK
"RTN","IBCU7",222,0)
 ;
"RTN","IBCU7",223,0)
XTRA1(Y) ;
"RTN","IBCU7",224,0)
 K Y
"RTN","IBCU7",225,0)
 Q
"RTN","IBCU7",226,0)
 ;
"RTN","IBCU7",227,0)
SPCUNIT(IBIFN,DA) ; return fields for special units if applicable, in DR form
"RTN","IBCU7",228,0)
 N IB0,IBCPT,IBDR,IBCT,IBFT,DFN S IBDR=""
"RTN","IBCU7",229,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27),IBFT=$P(IB0,U,19),DFN=$P(IB0,U,2)
"RTN","IBCU7",230,0)
 S IBCPT=$G(^DGCR(399,+$G(IBIFN),"CP",+$G(DA),0)) I IBCPT'["ICPT" G SPCUNTQ
"RTN","IBCU7",231,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,5,IBCT) S IBDR="15;" D SROMIN^IBCU74(IBIFN,DA) G SPCUNTQ ; minutes
"RTN","IBCU7",232,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,4,IBCT) S IBDR="21;" G SPCUNTQ ; miles
"RTN","IBCU7",233,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,6,IBCT) S IBDR="22//"_$$OBSHOUR^IBCU74(DFN,$P(IBCPT,U,2))_";" G SPCUNTQ ; hours
"RTN","IBCU7",234,0)
 I +IBFT=2,$P($G(^IBE(353.2,+$P(IBCPT,U,10),0)),U,2)="ANESTHESIA" S IBDR="15;" ; minutes
"RTN","IBCU7",235,0)
SPCUNTQ Q IBDR
"RTN","IBCU7",236,0)
 ;
"RTN","IBCU7",237,0)
ATTACH ; DEM;432 - Attachment control number.
"RTN","IBCU7",238,0)
 ; Ask if user wants to enter Attachment Control Number.
"RTN","IBCU7",239,0)
 N DIR,X,Y,DA,DIE,DR
"RTN","IBCU7",240,0)
 S DIR("A")="Enter Attachment Control Number"
"RTN","IBCU7",241,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCU7",242,0)
 D ^DIR
"RTN","IBCU7",243,0)
 Q:'Y
"RTN","IBCU7",244,0)
 ; User chose to enter Attachment Control Number.
"RTN","IBCU7",245,0)
 ; User enters Attachment Control fields.
"RTN","IBCU7",246,0)
 S DA(1)=IBIFN,DA=IBPROCP
"RTN","IBCU7",247,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"","
"RTN","IBCU7",248,0)
 S DR="71Report Type;72Report Transmission Method;70Attachment Control Number"
"RTN","IBCU7",249,0)
 D ^DIE
"RTN","IBCU7",250,0)
 Q
"RTN","IBCU7",251,0)
 ;
"RTN","IBCU7",252,0)
NOCPROC(IBPROCSV,IBCODE,IBDATE) ; MRD;IB*2.0*516 - Function to determine if procedure is an
"RTN","IBCU7",253,0)
 ; "NOC". Returns '1' if "NOC" procedure, otherwise '0'.
"RTN","IBCU7",254,0)
 ;
"RTN","IBCU7",255,0)
 N IBNOC,IBPROCEX,IBPROCIN,IBPROCNM,IBX,IBLINES,IBSTR,IBEND,IBLN
"RTN","IBCU7",256,0)
 S IBNOC=0
"RTN","IBCU7",257,0)
 I $G(IBPROCSV)="" G NOCPROCQ
"RTN","IBCU7",258,0)
 I $G(IBCODE)="" G NOCPROCQ
"RTN","IBCU7",259,0)
 I $G(IBDATE)'?7N G NOCPROCQ
"RTN","IBCU7",260,0)
 S IBPROCIN=$P($P(IBPROCSV,U,2),";") ;parsing out the IEN
"RTN","IBCU7",261,0)
 I IBPROCIN="" G NOCPROCQ
"RTN","IBCU7",262,0)
 ;
"RTN","IBCU7",263,0)
 ; If procedure code ends in '99', quit with a '1'.
"RTN","IBCU7",264,0)
 ;
"RTN","IBCU7",265,0)
 I $E(IBCODE,$L(IBCODE)-1,$L(IBCODE))=99 S IBNOC=1 G NOCPROCQ ;Does code end with 99? If so NOC
"RTN","IBCU7",266,0)
 ;
"RTN","IBCU7",267,0)
 ; Pull procedure name, then check to see if it contains one of the
"RTN","IBCU7",268,0)
 ; specified strings.
"RTN","IBCU7",269,0)
 ;
"RTN","IBCU7",270,0)
 S IBPROCNM=$$CPT^ICPTCOD(IBCODE,IBDATE)
"RTN","IBCU7",271,0)
 S IBPROCNM=$P(IBPROCNM,U,3)
"RTN","IBCU7",272,0)
 I IBPROCNM'="",($$NOC(IBPROCNM)) S IBNOC=1 G NOCPROCQ ; Does external match NOC strings? if so NOC
"RTN","IBCU7",273,0)
 ;
"RTN","IBCU7",274,0)
 ;Does array strings match any of the specified strings
"RTN","IBCU7",275,0)
 S IBLINES=$$CPTD^ICPTCOD(IBCODE,"IBINFO",,IBDATE) ;get number of lines/array of lines
"RTN","IBCU7",276,0)
 S IBEND=1 S:IBLINES>1 IBEND=IBLINES-1 ;set up counter for loop
"RTN","IBCU7",277,0)
 F IBLN=1:1:IBEND D  Q:IBNOC=1  ;loop through array so we can check if node values = NOC
"RTN","IBCU7",278,0)
 . N IBSTR S IBSTR=$$TM($G(IBINFO(IBLN)))_" "_$$TM($G(IBINFO(IBLN+1)))_" " ;Build strings for NOC comparison
"RTN","IBCU7",279,0)
 . S IBNOC=$$NOC(IBSTR) ;is current combination of strings a NOC?
"RTN","IBCU7",280,0)
 . Q
"RTN","IBCU7",281,0)
 ;
"RTN","IBCU7",282,0)
NOCPROCQ ; Quit out.
"RTN","IBCU7",283,0)
 K IBINFO ;killing the array made in CPTD^ICPTCOD
"RTN","IBCU7",284,0)
 Q IBNOC
"RTN","IBCU7",285,0)
 ;
"RTN","IBCU7",286,0)
NOC(IBTEXT) ; Quit with '1' if IBTEXT contains one of the specified strings.
"RTN","IBCU7",287,0)
 ;
"RTN","IBCU7",288,0)
 S IBTEXT=$TR(IBTEXT,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBCU7",289,0)
 ;
"RTN","IBCU7",290,0)
 I IBTEXT["NOT OTHERWISE" Q 1
"RTN","IBCU7",291,0)
 I IBTEXT["NOT ELSEWHERE" Q 1
"RTN","IBCU7",292,0)
 I IBTEXT["NOT LISTED" Q 1
"RTN","IBCU7",293,0)
 I IBTEXT["UNLISTED" Q 1
"RTN","IBCU7",294,0)
 I IBTEXT["UNSPECIFIED" Q 1
"RTN","IBCU7",295,0)
 I IBTEXT["UNCLASSIFIED" Q 1
"RTN","IBCU7",296,0)
 I IBTEXT["NON-SPECIFIED" Q 1
"RTN","IBCU7",297,0)
 I IBTEXT["NOS " Q 1
"RTN","IBCU7",298,0)
 I IBTEXT["NOS;" Q 1
"RTN","IBCU7",299,0)
 I IBTEXT["NOS." Q 1
"RTN","IBCU7",300,0)
 I IBTEXT["NOS," Q 1
"RTN","IBCU7",301,0)
 I IBTEXT["NOS/" Q 1
"RTN","IBCU7",302,0)
 I IBTEXT["(NOS)" Q 1
"RTN","IBCU7",303,0)
 I IBTEXT["NOC " Q 1
"RTN","IBCU7",304,0)
 I IBTEXT["NOC;" Q 1
"RTN","IBCU7",305,0)
 I IBTEXT["NOC." Q 1
"RTN","IBCU7",306,0)
 I IBTEXT["NOC," Q 1
"RTN","IBCU7",307,0)
 I IBTEXT["NOC/" Q 1
"RTN","IBCU7",308,0)
 I IBTEXT["(NOC)" Q 1
"RTN","IBCU7",309,0)
 ;
"RTN","IBCU7",310,0)
 ; Check if last three charcters are 'NOC' or 'NOS'.
"RTN","IBCU7",311,0)
 ;
"RTN","IBCU7",312,0)
 S IBTEXT=$E(IBTEXT,$L(IBTEXT)-2,$L(IBTEXT))
"RTN","IBCU7",313,0)
 Q 0
"RTN","IBCU7",314,0)
 ;
"RTN","IBCU7",315,0)
TM(IBX,IBY) ; Trim Character Y - Default " "
"RTN","IBCU7",316,0)
 S IBX=$G(IBX) Q:IBX="" IBX  S IBY=$G(IBY) S:'$L(IBY) IBY=" "
"RTN","IBCU7",317,0)
 F  Q:$E(IBX,1)'=IBY  S IBX=$E(IBX,2,$L(IBX))
"RTN","IBCU7",318,0)
 F  Q:$E(IBX,$L(IBX))'=IBY  S IBX=$E(IBX,1,($L(IBX)-1))
"RTN","IBCU7",319,0)
 Q IBX
"RTN","IBCU7",320,0)
 ;
"RTN","IBCU7",321,0)
ORALCAV(FLD) ;EP;IB*2.0*592
"RTN","IBCU7",322,0)
 ; Dictionary Screen function called from Procedures Oral Cavity Fields:
"RTN","IBCU7",323,0)
 ; 399.0304.90.01, 399.0304.90.02, 399.0304.90.03, 399.0304.90.04, 399.0304.90.05 
"RTN","IBCU7",324,0)
 ; Prevents the same Oral Cavity from being selected more than once.
"RTN","IBCU7",325,0)
 ; Input: FLD - Field # of the field being checked
"RTN","IBCU7",326,0)
 ; DA - IEN of the Service Line Multiple being edited
"RTN","IBCU7",327,0)
 ; DA(1) - IEN of the 399 entry being edited
"RTN","IBCU7",328,0)
 ; Y - Internal Value of the user response
"RTN","IBCU7",329,0)
 ; Returns: 1 - Data input by the user is valid, 0 otherwise
"RTN","IBCU7",330,0)
 N NDE,RTN
"RTN","IBCU7",331,0)
 S NDE=$G(^DGCR(399,DA(1),"CP",DA,"DEN"))
"RTN","IBCU7",332,0)
 S RTN=1 ; Assume Valid Input
"RTN","IBCU7",333,0)
 Q:Y="" 1 ; No value entered
"RTN","IBCU7",334,0)
 ;
"RTN","IBCU7",335,0)
 ; Make sure there are no duplicates
"RTN","IBCU7",336,0)
 I FLD=90.01 D  Q RTN
"RTN","IBCU7",337,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",338,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",339,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",340,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",341,0)
 I FLD=90.02 D  Q RTN
"RTN","IBCU7",342,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",343,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",344,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",345,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",346,0)
 I FLD=90.03 D  Q RTN
"RTN","IBCU7",347,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",348,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",349,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",350,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",351,0)
 I FLD=90.04 D  Q RTN
"RTN","IBCU7",352,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",353,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",354,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",355,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",356,0)
 I FLD=90.05 D  Q RTN
"RTN","IBCU7",357,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",358,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",359,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",360,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",361,0)
 Q RTN
"RTN","IBCU7",362,0)
 ;
"RTN","IBCU7",363,0)
TOOTHS(FLD) ;EP;IB*2.0*592
"RTN","IBCU7",364,0)
 ; Dictionary Screen function called from Dental Service Line Tooth fields:
"RTN","IBCU7",365,0)
 ; 399,91,.02, 399,91,.03, 399,91,.04, 399,91,.05, 399,91,.06. Prevents the 
"RTN","IBCU7",366,0)
 ; same Tooth Surface from being selected more than once.
"RTN","IBCU7",367,0)
 ; Input: FLD - Field # of the field being checked
"RTN","IBCU7",368,0)
 ; DA - Tooth Surface multiple IEN
"RTN","IBCU7",369,0)
 ; DA(1) - Service Line multiple IEN
"RTN","IBCU7",370,0)
 ; DA(2) - IEN of the 399 entry being edited
"RTN","IBCU7",371,0)
 ; Y - Internal Value of the user response
"RTN","IBCU7",372,0)
 ; Returns: 1 - Data input by the user is valid, 0 otherwise
"RTN","IBCU7",373,0)
 N NDE,RTN
"RTN","IBCU7",374,0)
 S NDE=$G(^DGCR(399,DA(2),"CP",DA(1),"DEN1",DA,0))
"RTN","IBCU7",375,0)
 S RTN=1 ; Assume Valid Input
"RTN","IBCU7",376,0)
 Q:Y="" 1 ; No value entered
"RTN","IBCU7",377,0)
 ;
"RTN","IBCU7",378,0)
 ; Make sure there are no duplicates
"RTN","IBCU7",379,0)
 I FLD=.02 D  Q RTN
"RTN","IBCU7",380,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",381,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",382,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",383,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",384,0)
 I FLD=.03 D  Q RTN
"RTN","IBCU7",385,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",386,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",387,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",388,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",389,0)
 I FLD=.04 D  Q RTN
"RTN","IBCU7",390,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",391,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",392,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",393,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",394,0)
 I FLD=.05 D  Q RTN
"RTN","IBCU7",395,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",396,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",397,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",398,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",399,0)
 I FLD=.06 D  Q RTN
"RTN","IBCU7",400,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",401,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",402,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",403,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",404,0)
 Q RTN
"RTN","IBCU7",405,0)
 ; 
"RTN","IBCU75")
0^34^B79458011^n/a
"RTN","IBCU75",1,0)
IBCU75 ;ALB/JRA - INTERCEPT SCREEN INPUT OF PROCEDURE CODES (ENTER CMN INFO) ;23-Apr-18
"RTN","IBCU75",2,0)
 ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 90
"RTN","IBCU75",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU75",4,0)
 ;
"RTN","IBCU75",5,0)
 Q
"RTN","IBCU75",6,0)
 ;
"RTN","IBCU75",7,0)
CMN(IBXIEN,IBPROCP) ;JRA;IB*2.0*608 Prompt user for CMN info
"RTN","IBCU75",8,0)
 ;Input: IBXIEN  = Internal bill/claim number
"RTN","IBCU75",9,0)
 ;       IBPROCP = Procedure line subscript in ^DGCR
"RTN","IBCU75",10,0)
 ;
"RTN","IBCU75",11,0)
 Q:('$G(IBXIEN)!('$G(IBPROCP)))
"RTN","IBCU75",12,0)
 N ABGMSG,ABGPO2,CERTDT,CERTYP,CHNGFRM,CMNNODE,CMNREQ,CMSG,DA,DIC,DIE,DIR,DGLB,DR,DRTAG,DTOLD,EDIT,EVNTDT,FIEN,FNAM,FORM,FRMTAG
"RTN","IBCU75",13,0)
 N FRMTYP,HT,HTOLD,I,IBPEB,WTOLD,LKGLB,LPM4ABG,LPM4SAT,MSG,NODE0,O2SAT,OK,OLDVAL,PROCA,PROCB,QUIT,RRDT,TDY,THERPYDT,X,Y
"RTN","IBCU75",14,0)
 S DGLB="^TMP(""CMN"",$J)" K @DGLB
"RTN","IBCU75",15,0)
 S LKGLB="^DGCR(399,"_IBXIEN_")" L +@LKGLB:0 I '$T W !,$C(7),"Another user is editing this entry -- EXITING" H 2 Q
"RTN","IBCU75",16,0)
 S EVNTDT=$$FMTE^DILIBF($G(IBDT),"5U")  ;Get the Event Date - will be the default for several date fields.
"RTN","IBCU75",17,0)
 S TDY=$$HTFM^DILIBF(+$H)
"RTN","IBCU75",18,0)
 S ABGMSG="""ABG PO2"" and/or ""O2 Saturation"" Test(s) REQUIRED"
"RTN","IBCU75",19,0)
 S DA=IBPROCP,DA(1)=IBXIEN,DIE="^DGCR(399,"_IBXIEN_",""CP"","
"RTN","IBCU75",20,0)
 ;Set FORM array of CMN Data Nodes (D399.6 field 3) indexed by CMN Form Type ien
"RTN","IBCU75",21,0)
 S FNAM="" F  S FNAM=$O(^IBE(399.6,"B",FNAM)) Q:FNAM=""  S FIEN=+$O(^IBE(399.6,"B",FNAM,"")) I FIEN D
"RTN","IBCU75",22,0)
 . S FORM(FIEN)=$P($G(^IBE(399.6,FIEN,0)),U,4) K:$TR(FORM(FIEN)," ")="" FORM(FIEN)
"RTN","IBCU75",23,0)
 I $D(FORM)'>1 S FORM(1)="CMN-484",FORM(2)="CMN-10126"  ;Default nodes for CMN data
"RTN","IBCU75",24,0)
 S DIE("NO^")="BACKOUTOK"
"RTN","IBCU75",25,0)
 S CMNREQ("MSG")="If ""CMN Required?"" is changed to ""NO"", existing CMN data will be deleted!"
"RTN","IBCU75",26,0)
 S FRMTYP("MSG")="Changing the Form Type will delete any data specific to the current Form Type!"
"RTN","IBCU75",27,0)
 S CERTYP("MSG")="You are changing the Certification Type!"
"RTN","IBCU75",28,0)
 S CERTYP("MSGI")="Changing Certification Type to ""I"" will delete ""Recertification/Revision Date!"""
"RTN","IBCU75",29,0)
 D CMNREQ
"RTN","IBCU75",30,0)
 S QUIT=0 F  D  Q:QUIT
"RTN","IBCU75",31,0)
 . D ^DIE
"RTN","IBCU75",32,0)
 . S CMNREQ=$G(CMNREQ),FRMTYP=$G(FRMTYP),CERTYP=$G(CERTYP)
"RTN","IBCU75",33,0)
 . S CMNREQ=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,"I") I CMNREQ=0 S QUIT=1 Q
"RTN","IBCU75",34,0)
 . S FRMTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,"I")
"RTN","IBCU75",35,0)
 . S CERTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,"I")
"RTN","IBCU75",36,0)
 . I FRMTYP,CERTYP'="" S QUIT=1 Q
"RTN","IBCU75",37,0)
 . I CMNREQ="" W $C(7),!,?3,"""CMN Required?"" is a REQUIRED field!" D CMNREQ Q
"RTN","IBCU75",38,0)
 . S MSG=""
"RTN","IBCU75",39,0)
 . I FRMTYP="" S MSG="""Form Type"" and ""Certification Type"" are REQUIRED!",DRTAG="CMNREQ"
"RTN","IBCU75",40,0)
 . E  I CERTYP="" S MSG="""Certification Type"" is REQUIRED!",DRTAG="CMNREQ"
"RTN","IBCU75",41,0)
 . I MSG]"" S DR="",MSG=MSG_$C(13,10)_"   ** To exit, set ""CMN Required?"" to ""NO""" W $C(7),!,?3,MSG D @DRTAG Q
"RTN","IBCU75",42,0)
 . S QUIT=1
"RTN","IBCU75",43,0)
 ;
"RTN","IBCU75",44,0)
 ;If CMN is not required, delete all CMN data that may be associated with this procedure & exit
"RTN","IBCU75",45,0)
 I $G(CMNREQ)=0 D  Q
"RTN","IBCU75",46,0)
 . S FIEN="" F  S FIEN=$O(FORM(FIEN)) Q:FIEN=""  I FORM(FIEN)]"" D
"RTN","IBCU75",47,0)
 . . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_","""_FORM(FIEN)_""")" K @CMNNODE
"RTN","IBCU75",48,0)
 . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_",""CMN"")" K @CMNNODE S @CMNNODE=0
"RTN","IBCU75",49,0)
 ;
"RTN","IBCU75",50,0)
 ;If user selected Form Type we need to remove data that may exist for any other Form Type.
"RTN","IBCU75",51,0)
 I $G(FRMTYP) S FIEN="" F  S FIEN=$O(FORM(FIEN)) Q:FIEN=""  I FIEN'=FRMTYP D
"RTN","IBCU75",52,0)
 . S CMNNODE="^DGCR(399,"_IBXIEN_",""CP"","_IBPROCP_","""_FORM(FIEN)_""")" K @CMNNODE
"RTN","IBCU75",53,0)
 ;
"RTN","IBCU75",54,0)
 I $G(CERTYP)="I" D SETFLD(24.07,"@")  ;If "Certification Type" is "INITIAL" delete "Recertification/Revision Date"
"RTN","IBCU75",55,0)
 ;
"RTN","IBCU75",56,0)
 I (($D(EDIT)&($G(EDIT)'="Y"))!(X=""!('$G(CMNREQ)!('$G(FRMTYP)!($G(CERTYP)=""))))) Q
"RTN","IBCU75",57,0)
 ;
"RTN","IBCU75",58,0)
 S FRMTAG="DR"_$S($G(FORM(FRMTYP))[484:484,1:10126)  ;Set tag to call to set DR with form-specific logic
"RTN","IBCU75",59,0)
 D DRCOMM
"RTN","IBCU75",60,0)
 ;
"RTN","IBCU75",61,0)
 ;Prompt user for remaining questions & check for missing required fields
"RTN","IBCU75",62,0)
 S (QUIT,UPCT)=0,DRTAG(1)="" F  D  Q:QUIT
"RTN","IBCU75",63,0)
 . D ^DIE
"RTN","IBCU75",64,0)
 . K MSG S MSG=0
"RTN","IBCU75",65,0)
 . S DRTAG=""
"RTN","IBCU75",66,0)
 . S CERTYP=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,"I")
"RTN","IBCU75",67,0)
 . S HT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.02,"I")
"RTN","IBCU75",68,0)
 . S THERPYDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.05,"I")
"RTN","IBCU75",69,0)
 . S CERTDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.06,"I")
"RTN","IBCU75",70,0)
 . S RRDT=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.07,"I")
"RTN","IBCU75",71,0)
 . I 'CERTDT S MSG=MSG+1,MSG(MSG)="""Last Certification Date""" S DRTAG="DRCOMM"
"RTN","IBCU75",72,0)
 . I 'RRDT,CERTYP'="I" S MSG=MSG+1,MSG(MSG)="""Recertification/Revision Date""" S:DRTAG="" DRTAG="RRDT"
"RTN","IBCU75",73,0)
 . I 'THERPYDT S MSG=MSG+1,MSG(MSG)="""Date Therapy Started""" S:DRTAG="" DRTAG="STRTDT"
"RTN","IBCU75",74,0)
 . I FORM(FRMTYP)[10126 D
"RTN","IBCU75",75,0)
 . . I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.217,"I")="" S MSG=MSG+1,MSG(MSG)="""Is this for Parenteral nutrition, Enteral nutrition, or Both?""" S:DRTAG="" DRTAG="DR10126"
"RTN","IBCU75",76,0)
 . I +MSG D  Q
"RTN","IBCU75",77,0)
 . . S:X="" UPCT=UPCT+1 I UPCT>1,DRTAG=DRTAG(1) S QUIT=1 Q
"RTN","IBCU75",78,0)
 . . S DR="" W $C(7) F I=1:1:MSG W !,?3,MSG(I)_" is REQUIRED!"
"RTN","IBCU75",79,0)
 . . W !,?3,"** Exiting now will leave required fields unanswered."
"RTN","IBCU75",80,0)
 . . W !,?3,"** If you must exit, enter '^' again."
"RTN","IBCU75",81,0)
 . . S DRTAG(1)=DRTAG D @DRTAG
"RTN","IBCU75",82,0)
 . S QUIT=1
"RTN","IBCU75",83,0)
 ;
"RTN","IBCU75",84,0)
 ;Delete dates associated with result fields that were deleted
"RTN","IBCU75",85,0)
 I $D(@DGLB)>1 D
"RTN","IBCU75",86,0)
 . N FLD
"RTN","IBCU75",87,0)
 . S FLD="" F  S FLD=$O(@DGLB@(FLD)) Q:FLD=""  D SETFLD(FLD,"@")
"RTN","IBCU75",88,0)
 . K @DGLB
"RTN","IBCU75",89,0)
 Q
"RTN","IBCU75",90,0)
 ;
"RTN","IBCU75",91,0)
CMNREQ ; Set DR with logic for 1st 3 fields: "CMN Required?", "Form Type" and "Certification Type"
"RTN","IBCU75",92,0)
 S DR="@23;S CMNREQ(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,""I"");23R~T//NO;S CMNREQ=X I 'X,'CMNREQ(""OLD"") S Y=""@999"";"
"RTN","IBCU75",93,0)
 S DR=DR_"I CMNREQ=0,CMNREQ(""OLD"")=1 S FRM=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,""I"") S:'FRM OK=1 S:FRM OK=$$USEROK^IBCU75(23,1,CMNREQ(""MSG""))"
"RTN","IBCU75",94,0)
 S DR=DR_" S:OK Y=""@999"" I 'OK S Y=""@23"";"
"RTN","IBCU75",95,0)
FRMTYP ;Entry point to set DR with logic for "Form Type" and "Certification Type" fields in preparation for re-prompting.
"RTN","IBCU75",96,0)
 S DR=DR_"@24;S DIC(0)=""N"" S FRMTYP(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24,""I"");24R~T;S FRMTYP=X I FRMTYP(""OLD"")]"""",FRMTYP]"""""
"RTN","IBCU75",97,0)
 S DR=DR_",FRMTYP'=FRMTYP(""OLD"") S OK=$$USEROK^IBCU75(24,FRMTYP(""OLD""),FRMTYP(""MSG"")) S:OK CHNGFRM=1 S:'OK Y=""@24"";"
"RTN","IBCU75",98,0)
 S DR=DR_"I $G(CHNGFRM)!($$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"")="""") D COPYCMN^IBCU75(IBXIEN,IBPROCP,FRMTYP);"
"RTN","IBCU75",99,0)
 S DR=DR_"I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"")]"""",'$G(CHNGFRM) R !,""Edit CMN Information for this Procedure? NO// "",EDIT S EDIT=$E($ZCONVERT(EDIT,""U"")) "
"RTN","IBCU75",100,0)
 S DR=DR_"W:(EDIT]""""&(EDIT'=""^"")) ""  ""_$S(EDIT=""Y"":""YES"",1:""NO"") I EDIT'=""Y"" S Y=""@999"";"
"RTN","IBCU75",101,0)
CERTYP ;Entry point to set DR with logic for "Certification Type" field in preparation for re-prompting.
"RTN","IBCU75",102,0)
 S DR=DR_"@01;S CERTYP(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.01,""I"");24.01R~T//INITIAL"
"RTN","IBCU75",103,0)
 S DR=DR_";S CERTYP=X I CERTYP(""OLD"")]"""",CERTYP]"""",CERTYP'=CERTYP(""OLD"")"
"RTN","IBCU75",104,0)
 S DR=DR_" S CMSG=$S(CERTYP=""I"":CERTYP(""MSGI""),1:CERTYP(""MSG""))"
"RTN","IBCU75",105,0)
 S DR=DR_" S OK=$$USEROK^IBCU75(24.01,CERTYP(""OLD""),CMSG) S:'OK Y=""@01"";@999;"
"RTN","IBCU75",106,0)
 Q
"RTN","IBCU75",107,0)
 ;
"RTN","IBCU75",108,0)
DRCOMM ;Set DR with logic for the remaining fields common to all form types
"RTN","IBCU75",109,0)
 S DR="@06;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.06,""I"");24.06R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""06"",$G(DTOLD));"
"RTN","IBCU75",110,0)
 S DR=DR_"I CERTYP=""I"" S @DGLB@(24.07)="""",Y=""@02"";"
"RTN","IBCU75",111,0)
RRDT ;Entry point to set DR with logic for "Recertification/Revision Date"... fields in preparation for re-prompting.
"RTN","IBCU75",112,0)
 S DR=DR_"@07;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.07,""I"");24.07R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""07"",$G(DTOLD));"
"RTN","IBCU75",113,0)
 S DR=DR_"@02;S HTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.02,""I"");24.02T;I X>96 S OK=$$USEROK^IBCU75(24.02,HTOLD,""Patient is over 8 feet tall!"")"
"RTN","IBCU75",114,0)
 S DR=DR_" I 'OK S Y=""@02"";@03;S WTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.03,""I"");24.03T;I X>500 S OK=$$USEROK^IBCU75(24.03,WTOLD,"
"RTN","IBCU75",115,0)
 S DR=DR_"""Patient is over 500 pounds!"") I 'OK S Y=""@03"";24.04T;"
"RTN","IBCU75",116,0)
STRTDT ;Entry point to set DR with logic for "Date Therapy Started"... fields in preparation for re-prompting.
"RTN","IBCU75",117,0)
 S DR=DR_"@05;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.05,""I"");24.05R~T//"_EVNTDT_";D DTCHK^IBCU75(X,TDY,""05"",$G(DTOLD));@08;24.08T//N;"
"RTN","IBCU75",118,0)
 D @FRMTAG
"RTN","IBCU75",119,0)
 Q
"RTN","IBCU75",120,0)
 ;
"RTN","IBCU75",121,0)
DR484 ;Set DR with logic specific for form CMN-484
"RTN","IBCU75",122,0)
 S DR=DR_"@100;24.1T;S ABGPO2=X;@102;24.102T;S O2SAT=X;I ABGPO2="""",O2SAT="""" S Y=""@104"";"
"RTN","IBCU75",123,0)
 S DR=DR_"@103;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.103,""I"");24.103T;D DTCHK^IBCU75(X,TDY,103,$G(DTOLD));"
"RTN","IBCU75",124,0)
 S DR=DR_"@104;I (ABGPO2<56!(ABGPO2>59)),(O2SAT'=89) S @DGLB@(24.104)="""",@DGLB@(24.105)="""""
"RTN","IBCU75",125,0)
 S DR=DR_",@DGLB@(24.106)="""",Y=""@107"";24.104T//NO;24.105T//NO;24.106T//NO;@107;24.107T;24.108T;24.109T;24.11T;I X'>4 S @DGLB@(24.111)="""""
"RTN","IBCU75",126,0)
 S DR=DR_",@DGLB@(24.113)="""",@DGLB@(24.114)="""",Y=""@115"";24.111T;S ABG4LPM=X;"
"RTN","IBCU75",127,0)
 S DR=DR_"@113;24.113T;I 'ABG4LPM,'X S Y=""@115"",@DGLB@(24.114)="""";"
"RTN","IBCU75",128,0)
 S DR=DR_"@114;S DTOLD=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.114,""I"");24.114T;D DTCHK^IBCU75(X,TDY,114,$G(DTOLD));@115;24.115T;@999;"
"RTN","IBCU75",129,0)
 Q
"RTN","IBCU75",130,0)
 ;
"RTN","IBCU75",131,0)
DR10126 ;Set DR with logic specific to the CMN-10126
"RTN","IBCU75",132,0)
 S DR=DR_"@217;S IBPEB(""OLD"")=$$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.217,""I"");24.217R~T//P;S IBPEB=X I IBPEB(""OLD"")]"""",IBPEB]"""",IBPEB(""OLD"")'=IBPEB "
"RTN","IBCU75",133,0)
 S DR=DR_"S OK=$$USEROK^IBCU75(24.217,IBPEB(""OLD""),""You are changing the nutrition type!"") S:'OK Y=""@217"";I $G(IBPEB)=""P"" S Y=""@206"" "
"RTN","IBCU75",134,0)
 S DR=DR_"N I F I=24.201:.001:24.205,24.218,24.219 S @DGLB@(I)="""";24.201T;24.202T;"
"RTN","IBCU75",135,0)
 S DR=DR_"24.204T;I '+X S Y=""@205"",@DGLB@(24.203)="""" I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.219)]"""" S Y=""@219"";"
"RTN","IBCU75",136,0)
 S DR=DR_"24.203T;I '+X S Y=""@205"" I $$CMNDATA^IBCEF31(IBXIEN,IBPROCP,24.219)]"""" S Y=""@219"";"
"RTN","IBCU75",137,0)
 S DR=DR_"@219;24.219T;I '+X S Y=""@205"",@DGLB@(24.218)="""";"
"RTN","IBCU75",138,0)
 S DR=DR_"24.218T;@205;24.205T;@206;24.206T;I $G(IBPEB)=""E"" S Y=""@999"" "
"RTN","IBCU75",139,0)
 S DR=DR_"N I F I=24.207:.001:24.216 S @DGLB@(I)="""";"
"RTN","IBCU75",140,0)
 S DR=DR_"24.207T;24.208T;24.209T;24.21T;24.211T;24.212T;24.213T;24.215T;24.216T;@214;24.214T;@999;"
"RTN","IBCU75",141,0)
 Q
"RTN","IBCU75",142,0)
 ;
"RTN","IBCU75",143,0)
COPYCMN(IBXIEN,IBPROCP,FRMTYP) ;Copy CMN information from last procedure entered that has it to current procedure
"RTN","IBCU75",144,0)
 ;Input: IBXIEN  = Internal bill/claim number
"RTN","IBCU75",145,0)
 ;       IBPROCP = Procedure line subscript
"RTN","IBCU75",146,0)
 ;       FRMTYP  = CMN Form Type ien
"RTN","IBCU75",147,0)
 ;
"RTN","IBCU75",148,0)
 N DONE
"RTN","IBCU75",149,0)
 S DONE=0
"RTN","IBCU75",150,0)
 Q:('$G(IBXIEN)!('$G(IBPROCP)!('$G(FRMTYP))))
"RTN","IBCU75",151,0)
 N FRMND,FRMNDI,IBPROC,IBXSAVE,Z
"RTN","IBCU75",152,0)
 S FRMNDI=FORM(FRMTYP)
"RTN","IBCU75",153,0)
 D CMNDEX^IBCEF31(IBXIEN,.IBXSAVE)
"RTN","IBCU75",154,0)
 S Z="" F  S Z=$O(IBXSAVE("CMNDEX",Z),-1) Q:'Z  S IBPROC=+IBXSAVE("CMNDEX",Z) I IBPROCP,IBPROC'=IBPROCP D  Q:DONE
"RTN","IBCU75",155,0)
 . Q:('$D(^DGCR(399,IBXIEN,"CP",IBPROC,"CMN"))!('$D(^DGCR(399,IBXIEN,"CP",IBPROC,FRMNDI))))
"RTN","IBCU75",156,0)
 . S FRMND=$O(^DGCR(399,IBXIEN,"CP",IBPROC,"CMN")) Q:(FRMND=""!(FRMND'=FRMNDI))
"RTN","IBCU75",157,0)
 . S ^DGCR(399,IBXIEN,"CP",IBPROCP,"CMN")=^DGCR(399,IBXIEN,"CP",IBPROC,"CMN")
"RTN","IBCU75",158,0)
 . S ^DGCR(399,IBXIEN,"CP",IBPROCP,FRMND)=^DGCR(399,IBXIEN,"CP",IBPROC,FRMND)
"RTN","IBCU75",159,0)
 . S DONE=1
"RTN","IBCU75",160,0)
 Q 
"RTN","IBCU75",161,0)
 ;
"RTN","IBCU75",162,0)
USEROK(FLD,OLDVAL,MSG) ;JRA;IB*2.0*608 Prompt user if OK to change field value
"RTN","IBCU75",163,0)
 ;Input: FLD    =  Field for which we are asking the user to confirm the change
"RTN","IBCU75",164,0)
 ;       OLDVAL =  Value of the field before user changed
"RTN","IBCU75",165,0)
 ;       MSG    =  Warning message to display to user regarding the implications of the change
"RTN","IBCU75",166,0)
 ;
"RTN","IBCU75",167,0)
 Q:'$G(FLD) 0
"RTN","IBCU75",168,0)
 N DIC,DIR,X,Y
"RTN","IBCU75",169,0)
 S OLDVAL=$G(OLDVAL)
"RTN","IBCU75",170,0)
 W $C(7) I $TR($G(MSG)," ")]"" W !,MSG
"RTN","IBCU75",171,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="NO" D ^DIR
"RTN","IBCU75",172,0)
 I Y'=1 D SETFLD(FLD,OLDVAL)  ;Set field back to old value if user doesn't want to continue
"RTN","IBCU75",173,0)
 I Y=1 S X="^"
"RTN","IBCU75",174,0)
 Q Y
"RTN","IBCU75",175,0)
 ;
"RTN","IBCU75",176,0)
SETFLD(FLD,VAL) ;JRA;IB*2.0*608 Set/Delete field data w/out user prompting
"RTN","IBCU75",177,0)
 ;Input: FLD = Field to set/delete
"RTN","IBCU75",178,0)
 ;       VAL = Value to set FLD to (Note: '@' will delete field value)
"RTN","IBCU75",179,0)
 ;
"RTN","IBCU75",180,0)
 Q:('$G(FLD)!($G(VAL)=""))
"RTN","IBCU75",181,0)
 N DIE,DI,DL,DP,DQ,DR,X,Y
"RTN","IBCU75",182,0)
 S DIE="^DGCR(399,"_IBXIEN_",""CP"","
"RTN","IBCU75",183,0)
 S DR=FLD_"////"_VAL
"RTN","IBCU75",184,0)
 D ^DIE
"RTN","IBCU75",185,0)
 Q
"RTN","IBCU75",186,0)
 ;
"RTN","IBCU75",187,0)
DTCHK(X,TDY,TAG,DTOLD) ;JRA;IB*2.0*608 Check if future date entered by user
"RTN","IBCU75",188,0)
 ;Input:  X     = User entry for date field (internal FileMan date format)
"RTN","IBCU75",189,0)
 ;        TDY   = Today's internal FileMan date
"RTN","IBCU75",190,0)
 ;        TAG   = Field tag to jump to if user enters a future date (usually re-prompt same date)
"RTN","IBCU75",191,0)
 ;        DTOLD = The value of the date field prior to user edit
"RTN","IBCU75",192,0)
 ;
"RTN","IBCU75",193,0)
 Q:('$G(X))!('$G(TAG))
"RTN","IBCU75",194,0)
 N FLD
"RTN","IBCU75",195,0)
 S:$G(DTOLD)="" DTOLD="@"
"RTN","IBCU75",196,0)
 S:'$G(TDY) TDY=$$HTFM^DILIBF(+$H) Q:X'>TDY
"RTN","IBCU75",197,0)
 ;User entered future date so display error and change date back to previous value.
"RTN","IBCU75",198,0)
 W $C(7),!,?3,"Future dates not allowed??"
"RTN","IBCU75",199,0)
 S Y="@"_TAG
"RTN","IBCU75",200,0)
 D SETFLD("24."_TAG,DTOLD)  ;set back to prior date
"RTN","IBCU75",201,0)
 Q
"RTN","IBCU75",202,0)
 ;
"RTN","IBJPS")
0^28^B6807999^B6552900
"RTN","IBJPS",1,0)
IBJPS ;ALB/MAF,ARH - IBSP IB SITE PARAMETER SCREEN ;22-DEC-1995
"RTN","IBJPS",2,0)
 ;;2.0;INTEGRATED BILLING;**39,52,70,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592,608**;21-MAR-94;Build 90
"RTN","IBJPS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS",4,0)
 ;
"RTN","IBJPS",5,0)
EN ; -- main entry point for IBJP IB SITE PARAMETERS, display IB site parameters
"RTN","IBJPS",6,0)
 D EN^VALM("IBJP IB SITE PARAMETERS")
"RTN","IBJPS",7,0)
 Q
"RTN","IBJPS",8,0)
 ;
"RTN","IBJPS",9,0)
HDR ; -- header code
"RTN","IBJPS",10,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPS",11,0)
 Q
"RTN","IBJPS",12,0)
 ;
"RTN","IBJPS",13,0)
INIT ; -- init variables and list array
"RTN","IBJPS",14,0)
 K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
"RTN","IBJPS",15,0)
 D BLD^IBJPS1
"RTN","IBJPS",16,0)
 Q
"RTN","IBJPS",17,0)
 ;
"RTN","IBJPS",18,0)
HELP ; -- help code
"RTN","IBJPS",19,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS",20,0)
 Q
"RTN","IBJPS",21,0)
 ;
"RTN","IBJPS",22,0)
EXIT ; -- exit code
"RTN","IBJPS",23,0)
 K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
"RTN","IBJPS",24,0)
 D CLEAR^VALM1
"RTN","IBJPS",25,0)
 Q
"RTN","IBJPS",26,0)
 ;
"RTN","IBJPS",27,0)
NXEDIT ; -- IBJP IB SITE PARAMETER EDIT ACTION (EP): Select data set to edit, do edit
"RTN","IBJPS",28,0)
 N VALMY,IBSELN,IBSET
"RTN","IBJPS",29,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBJPS",30,0)
 I $D(VALMY) S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBJPS",31,0)
 . S IBSET=$P($G(^TMP("IBJPSAX",$J,IBSELN)),U,1) Q:'IBSET
"RTN","IBJPS",32,0)
 . D EDIT(IBSET)
"RTN","IBJPS",33,0)
 S VALMBCK="R"
"RTN","IBJPS",34,0)
 Q
"RTN","IBJPS",35,0)
 ;
"RTN","IBJPS",36,0)
EDIT(IBSET) ; edit IB Site Parameters
"RTN","IBJPS",37,0)
 D FULL^VALM1
"RTN","IBJPS",38,0)
 N DR
"RTN","IBJPS",39,0)
 I IBSET'="" D
"RTN","IBJPS",40,0)
 . ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
"RTN","IBJPS",41,0)
 . ; WCJ;IB*2.0*547 - shifted the numbers down to insert a new one
"RTN","IBJPS",42,0)
 . I IBSET=8 D EN^IBJPS5 Q
"RTN","IBJPS",43,0)
 . I IBSET=11 D EN^IBJPS3(0) Q
"RTN","IBJPS",44,0)
 . I IBSET=12 D EN^IBJPS3(1) Q
"RTN","IBJPS",45,0)
 . ;WCJ;IB*2.0*547 added default Administrative contractors for billing (medicare and commercial)
"RTN","IBJPS",46,0)
 . I IBSET=17 D EN^IBJPS6(1) Q   ; medicare
"RTN","IBJPS",47,0)
 . I IBSET=18 D EN^IBJPS6(2) Q   ; commercial
"RTN","IBJPS",48,0)
 . I IBSET=21 D EN^IBJPS8 Q   ; WCJ;IB*2.0*608;US3;
"RTN","IBJPS",49,0)
 . S DR=$P($T(@IBSET),";;",2,999)
"RTN","IBJPS",50,0)
 . Q
"RTN","IBJPS",51,0)
 ; WCJ;IB*2.0*547 - shifted the number down to insert a new one
"RTN","IBJPS",52,0)
 I IBSET=9,$$ICD9SYS^IBACSV(DT)=30 S $P(DR,";",1)=7.05
"RTN","IBJPS",53,0)
 ;
"RTN","IBJPS",54,0)
 I $G(DR)'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPS",55,0)
 D INIT^IBJPS S VALMBCK="R"
"RTN","IBJPS",56,0)
 Q
"RTN","IBJPS",57,0)
 ;
"RTN","IBJPS",58,0)
 ;WCJ;IB*2.0*547 - cleared the spot for the new #8, added 17 & 18, move 16 to 19.
"RTN","IBJPS",59,0)
 ;gef;IB*2.0*547 - added 20
"RTN","IBJPS",60,0)
 ;JWS;IB*2.0*592 - added field 8.2 to 16
"RTN","IBJPS",61,0)
1 ;;.09;.13;.14
"RTN","IBJPS",62,0)
2 ;;1.2;.15;.11;.12;7.04
"RTN","IBJPS",63,0)
3 ;;1.09;1.07;2.07
"RTN","IBJPS",64,0)
4 ;;4.04;6.25;6.24
"RTN","IBJPS",65,0)
5 ;;.02;1.14;1.25;1.08
"RTN","IBJPS",66,0)
6 ;;1.23;1.16;1.22;1.19;1.15;1.17
"RTN","IBJPS",67,0)
7 ;;1.33;1.32;1.31;1.27;8.14T;8.15T;8.16T;8.19T
"RTN","IBJPS",68,0)
9 ;;1.29;1.3;1.18;1.28
"RTN","IBJPS",69,0)
10 ;;1.01;1.02;1.05
"RTN","IBJPS",70,0)
13 ;;2.08;2.09
"RTN","IBJPS",71,0)
14 ;;11.01
"RTN","IBJPS",72,0)
15 ;;10.02;10.03;10.04;10.05;D INIT^IBATFILE
"RTN","IBJPS",73,0)
16 ;;2.11;8.01;8.09;8.03;8.06;8.04;8.07;8.02;8.12T;8.11T;8.17T;8.2T
"RTN","IBJPS",74,0)
19 ;;50.01;50.02;50.05;50.06;50.03;50.04;50.07
"RTN","IBJPS",75,0)
20 ;;52.01;52.02
"RTN","IBJPS",76,0)
 ;
"RTN","IBJPS2")
0^24^B59492878^B56657157
"RTN","IBJPS2",1,0)
IBJPS2 ;ALB/MAF,ARH - IBSP IB SITE PARAMETER BUILD (cont) ;22-DEC-1995
"RTN","IBJPS2",2,0)
 ;;2.0;INTEGRATED BILLING;**39,52,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592,608**;21-MAR-94;Build 90
"RTN","IBJPS2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS2",4,0)
 ;
"RTN","IBJPS2",5,0)
BLD2 ; - continue build screen array for IB parameters
"RTN","IBJPS2",6,0)
 ;
"RTN","IBJPS2",7,0)
 N Z,Z0,PTPSTR,BPZZ
"RTN","IBJPS2",8,0)
 D RIGHT(1,1,1) ; - facility/med center  (new line for each)
"RTN","IBJPS2",9,0)
 S IBLN=$$SET("Medical Center",$$EXSET^IBJU1($P(IBPD0,U,2),350.9,.02),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",10,0)
 S IBLN=$$SET("MAS Service",$$EXSET^IBJU1($P(IBPD1,U,14),350.9,1.14),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",11,0)
 ;
"RTN","IBJPS2",12,0)
 D LEFT(2)
"RTN","IBJPS2",13,0)
 S IBLN=$$SET("Default Division",$$EXSET^IBJU1($P(IBPD1,U,25),350.9,1.25),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",14,0)
 S IBLN=$$SET("Billing Supervisor",$$EXSET^IBJU1($P(IBPD1,U,8),350.9,1.08),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",15,0)
 ;
"RTN","IBJPS2",16,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",17,0)
 S IBLN=$$SET("Initiator Authorize",$$YN(+$P(IBPD1,U,23)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",18,0)
 S IBLN=$$SET("Ask HINQ in MCCR",$$YN(+$P(IBPD1,U,16)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",19,0)
 S IBLN=$$SET("Multiple Form Types",$$YN(+$P(IBPD1,U,22)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",20,0)
 ;
"RTN","IBJPS2",21,0)
 D LEFT(2)
"RTN","IBJPS2",22,0)
 S IBLN=$$SET("Xfer Proc to Sched",$$YN(+$P(IBPD1,U,19)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",23,0)
 S IBLN=$$SET("Use Non-PTF Codes",$$YN(+$P(IBPD1,U,15)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",24,0)
 S IBLN=$$SET("Use OP CPT screen",$$YN(+$P(IBPD1,U,17)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",25,0)
 ;
"RTN","IBJPS2",26,0)
 ; IB patch 349 for UB-04 claim form and parameters
"RTN","IBJPS2",27,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",28,0)
 S IBLN=$$SET("UB-04 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,33),350.9,1.33),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",29,0)
 S IBLN=$$SET("CMS-1500 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,32),350.9,1.32),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",30,0)
 S IBLN=$$SET("CMS-1500 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,14),350.9,8.14),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",31,0)
 S IBLN=$$SET("EOB Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,16),350.9,8.16),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",32,0)
 ;
"RTN","IBJPS2",33,0)
 D LEFT(2)
"RTN","IBJPS2",34,0)
 S IBLN=$$SET("UB-04 Address Col",$P(IBPD1,U,31),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",35,0)
 S IBLN=$$SET("CMS-1500 Addr Col",$P(IBPD1,U,27),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",36,0)
 S IBLN=$$SET("UB-04 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,15),350.9,8.15),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",37,0)
 S IBLN=$$SET("MRA Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,19),350.9,8.19),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",38,0)
 ;
"RTN","IBJPS2",39,0)
 ; VAD - IB*2.0*547 - inserted a new section 8.  Only count activated codes
"RTN","IBJPS2",40,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",41,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,15,"B",Z)) Q:'Z  I $P($G(^DGCR(399.2,Z,0)),U,3)=1 S Z0=Z0+1
"RTN","IBJPS2",42,0)
 S PTPSTR=Z0_" Activated Codes Defined"
"RTN","IBJPS2",43,0)
 S IBLN=$$SET("Printed Claims Rev Code Excl",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",44,0)
 ;
"RTN","IBJPS2",45,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",46,0)
 S Z=$$ICD9SYS^IBACSV(DT)
"RTN","IBJPS2",47,0)
 I Z=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD1,U,29),350.9,1.29)_" (ICD-9)",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",48,0)
 I Z'=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD7,U,5),350.9,7.05)_" (ICD-10)",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",49,0)
 S IBLN=$$SET("Default RX CPT Cd",$$EXSET^IBJU1($P(IBPD1,U,30),350.9,1.30),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",50,0)
 ;
"RTN","IBJPS2",51,0)
 D LEFT(2)
"RTN","IBJPS2",52,0)
 S IBLN=$$SET("Default ASC Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,18),350.9,1.18),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",53,0)
 S IBLN=$$SET("Default RX Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,28),350.9,1.28),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",54,0)
 ;
"RTN","IBJPS2",55,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",56,0)
 S IBLN=$$SET("Bill Signer Name","<No longer used>",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",57,0)
 S IBLN=$$SET("Bill Signer Title","<No longer used>",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",58,0)
 ;
"RTN","IBJPS2",59,0)
 D LEFT(2)
"RTN","IBJPS2",60,0)
 S IBLN=$$SET("Federal Tax #",$P(IBPD1,U,5),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",61,0)
 ;
"RTN","IBJPS2",62,0)
 D RIGHT(3,1,1) ; - Pay-To Providers - section 11
"RTN","IBJPS2",63,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,19,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,19,Z,0)),U,5)="" Z0=Z0+1
"RTN","IBJPS2",64,0)
 S Z=+$P($G(^IBE(350.9,1,11)),U,3),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,0),U),1:"")
"RTN","IBJPS2",65,0)
 S IBLN=$$SET("Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",66,0)
 ;
"RTN","IBJPS2",67,0)
 ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
"RTN","IBJPS2",68,0)
 D RIGHT(3,1,1) ; - TRICARE Pay-To Providers - section 12
"RTN","IBJPS2",69,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,29,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,29,Z,0)),U,5)="" Z0=Z0+1
"RTN","IBJPS2",70,0)
 S Z=+$P($G(^IBE(350.9,1,11)),U,4),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,1),U),1:"")
"RTN","IBJPS2",71,0)
 S IBLN=$$SET("Non-MCCF Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)  ; IB*2*608 (vd) - Changed "TRICARE..." to "Non-MCCF..."
"RTN","IBJPS2",72,0)
 ;
"RTN","IBJPS2",73,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",74,0)
 S IBLN=$$SET("Inpt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,8),350.9,2.08),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",75,0)
 S IBLN=$$SET("Opt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,9),350.9,2.09),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",76,0)
 ;
"RTN","IBJPS2",77,0)
 ; ePharmacy parameters
"RTN","IBJPS2",78,0)
 D RIGHT(7,1,1)
"RTN","IBJPS2",79,0)
 S IBLN=$$SET("HIPPA NCPDP Active Flag",$S($P(IBPD11,U)=1:"Active",1:"Not Active"),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",80,0)
 ;
"RTN","IBJPS2",81,0)
 ; transfer pricing
"RTN","IBJPS2",82,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",83,0)
 S IBLN=$$SET("Inpatient TP Active ",$$YN(+$P(IBPD10,U,2)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",84,0)
 S IBLN=$$SET("Outpatient TP Active",$$YN(+$P(IBPD10,U,3)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",85,0)
 S IBLN=$$SET("Pharmacy TP Active  ",$$YN(+$P(IBPD10,U,4)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",86,0)
 S IBLN=$$SET("Prosthetic TP Active",$$YN(+$P(IBPD10,U,5)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",87,0)
 ;
"RTN","IBJPS2",88,0)
 ; EDI/MRA parameters
"RTN","IBJPS2",89,0)
 D RIGHT(7,1,1)
"RTN","IBJPS2",90,0)
 N IBZ S IBZ=$P(IBPD8,U,3)
"RTN","IBJPS2",91,0)
 S IBLN=$$SET(" EDI/MRA Activated",$$EXSET^IBJU1(+$P(IBPD8,U,10),350.9,8.1),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",92,0)
 S IBLN=$$SET(" EDI Contact Phone",$P(IBPD2,U,11),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",93,0)
 S IBLN=$$SET(" EDI 837 Live Transmit Queue",$P(IBPD8,U),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",94,0)
 S IBLN=$$SET(" EDI 837 Test Transmit Queue",$P(IBPD8,U,9),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",95,0)
 S IBLN=$$SET(" Auto-Txmt Bill Frequency",$S(IBZ:"Every"_$S(IBZ>1:" "_$P(IBPD8,U,3),1:""),1:"")_$S(IBZ:" Day"_$S(IBZ=1:"",1:"s"),1:"Never Run"),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",96,0)
 S IBLN=$$SET(" Hours To Auto-Transmit",$P(IBPD8,U,6),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",97,0)
 S IBLN=$$SET(" Max # Bills Per Batch",$P(IBPD8,U,4),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",98,0)
 S IBLN=$$SET(" Only Allow 1 Ins Co/Claim Batch?",$$EXPAND^IBTRE(350.9,8.07,+$P(IBPD8,U,7)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",99,0)
 S IBLN=$$SET(" Last Auto-Txmt Run Date",$$DATE^IBJU1($P(IBPD8,U,5)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",100,0)
 S IBLN=$$SET(" Days To Wait To Purge Msgs",$P(IBPD8,U,2),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",101,0)
 S IBLN=$$SET(" Allow MRA Processing?",$$YN(+$P(IBPD8,U,12)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",102,0)
 S IBLN=$$SET(" Enable Automatic MRA Processing?",$$YN(+$P(IBPD8,U,11)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",103,0)
 S IBLN=$$SET(" Enable Auto Reg EOB Processing?",$$YN(+$P(IBPD8,U,17)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",104,0)
 ;JWS;IB*2.0*592;add on/off for Dental
"RTN","IBJPS2",105,0)
 I $P(IBPD8,U,20)="" S $P(IBPD8,U,20)=1  ;default to yes
"RTN","IBJPS2",106,0)
 S IBLN=$$SET(" Allow Dental Claim Processing?",$$YN(+$P(IBPD8,U,20)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",107,0)
 ;
"RTN","IBJPS2",108,0)
 ; WCJ;IB*2.0*547;administrative contractors medicare
"RTN","IBJPS2",109,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",110,0)
 S Z=+$P($G(^IBE(350.9,1,81,0)),U,4)_" defined"
"RTN","IBJPS2",111,0)
 S IBLN=$$SET("Alt Prim Payer ID Typ-Medicare",Z,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",112,0)
 ;
"RTN","IBJPS2",113,0)
 ; WCJ;IB*2.0*547;administrative contractors commercial
"RTN","IBJPS2",114,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",115,0)
 S Z=+$P($G(^IBE(350.9,1,82,0)),U,4)_" defined"
"RTN","IBJPS2",116,0)
 S IBLN=$$SET("Alt Prim Payer ID Typ-Commercial",Z,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",117,0)
 ;
"RTN","IBJPS2",118,0)
 ; Ingenix ClaimsManager Information
"RTN","IBJPS2",119,0)
 D RIGHT(9,1,1)
"RTN","IBJPS2",120,0)
 S IBLN=$$SET("Are we using ClaimsManager?",$$YN(+$P(IBPD50,U,1)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",121,0)
 S IBLN=$$SET("Is ClaimsManager working OK?",$$YN(+$P(IBPD50,U,2)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",122,0)
 S IBLN=$$SET("ClaimsManager TCP/IP Address",$P(IBPD50,U,5),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",123,0)
 S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",""))
"RTN","IBJPS2",124,0)
 S IBLN=$$SET("ClaimsManager TCP/IP Ports",IBCISOCK,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",125,0)
 F  S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",IBCISOCK)) Q:IBCISOCK=""  D
"RTN","IBJPS2",126,0)
 . S IBLN=$$SET("",IBCISOCK,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",127,0)
 . Q
"RTN","IBJPS2",128,0)
 S IBLN=$$SET("General Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,3),350.9,50.03),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",129,0)
 S IBLN=$$SET("Communication Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,4),350.9,50.04),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",130,0)
 S IBCIMFLG=$$EXTERNAL^DILFD(350.9,50.07,"",$P(IBPD50,U,7))
"RTN","IBJPS2",131,0)
 I IBCIMFLG="" S IBCIMFLG="PRIORITY"
"RTN","IBJPS2",132,0)
 S IBLN=$$SET("MailMan Messages",IBCIMFLG,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",133,0)
 ;
"RTN","IBJPS2",134,0)
 ; Request For Additional Info patch 547
"RTN","IBJPS2",135,0)
 D RIGHT(9,1,1)
"RTN","IBJPS2",136,0)
 S Z=$G(^IBE(350.9,1,52)) S:$P(Z,U)="" $P(Z,U)="No Purge"
"RTN","IBJPS2",137,0)
 S IBLN=$$SET("Days to store 277RFAI Transactions",$P(Z,U),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",138,0)
 S IBLN=$$SET("Days to wait to purge entry on RFAI Management Worklist",$P(Z,U,2),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",139,0)
 ;
"RTN","IBJPS2",140,0)
 ; WCJ - IB*2.0*608;US3 - inserted a new section 20.
"RTN","IBJPS2",141,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",142,0)
 S Z="",Z0=0 F  S Z=$O(^IBE(350.9,1,16,"B",Z)) Q:'Z  S Z0=Z0+1
"RTN","IBJPS2",143,0)
 S PTPSTR=Z0_" CMN CPT Codes Included"
"RTN","IBJPS2",144,0)
 S IBLN=$$SET("CMN CPT Code Inclusion",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",145,0)
 Q
"RTN","IBJPS2",146,0)
 ;
"RTN","IBJPS2",147,0)
SET(TTL,DATA,LN,LR,SEL,HDR) ;
"RTN","IBJPS2",148,0)
 N IBY,IBX,IBC S IBC=": " I TTL="" S IBC="  "
"RTN","IBJPS2",149,0)
 S IBY=TTL_$J("",(IBTW(LR)-$L(TTL)-2))_$S('$G(HDR):IBC_DATA,1:""),IBX=$G(^TMP("IBJPS",$J,LN,0))
"RTN","IBJPS2",150,0)
 S IBX=$$SETSTR^VALM1(IBY,IBX,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPS2",151,0)
 D SET1(IBX,LN,SEL)
"RTN","IBJPS2",152,0)
 S LN=LN+1
"RTN","IBJPS2",153,0)
 Q LN
"RTN","IBJPS2",154,0)
 ;
"RTN","IBJPS2",155,0)
SET1(STR,LN,SEL,HI) ; set up TMP array with screen data
"RTN","IBJPS2",156,0)
 S ^TMP("IBJPS",$J,LN,0)=STR
"RTN","IBJPS2",157,0)
 S ^TMP("IBJPS",$J,"IDX",LN,SEL)=""
"RTN","IBJPS2",158,0)
 S ^TMP("IBJPSAX",$J,SEL)=SEL
"RTN","IBJPS2",159,0)
 I $G(HI)'="" D CNTRL^VALM10(LN,1,4,IOINHI,IOINORM)
"RTN","IBJPS2",160,0)
 ;I $G(RV) D CNTRL^VALM10(LN,6,19,IOUON,IOUOFF)
"RTN","IBJPS2",161,0)
 Q
"RTN","IBJPS2",162,0)
 ;
"RTN","IBJPS2",163,0)
YN(X) Q $S(+X:"YES",1:"NO")
"RTN","IBJPS2",164,0)
 ;
"RTN","IBJPS2",165,0)
RIGHT(LR,SEL,BL) ; - reset control variables for right side of screen
"RTN","IBJPS2",166,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE) I $G(BL) S IBLN=$$SET("","",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",167,0)
 S IBLR=$G(LR),IBGRPB=IBLN I +$G(SEL) S IBSEL=IBSEL+1 D SET1("["_IBSEL_"]",IBLN,IBSEL,1)
"RTN","IBJPS2",168,0)
 Q
"RTN","IBJPS2",169,0)
 ;
"RTN","IBJPS2",170,0)
LEFT(LR) ; - reset control variables for left side of screen
"RTN","IBJPS2",171,0)
 S IBLR=$G(LR),IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPS2",172,0)
 Q
"RTN","IBJPS3")
0^25^B122116987^B122000376
"RTN","IBJPS3",1,0)
IBJPS3 ;BP/YMG - IB Site Parameters, Pay-To Provider ;20-Oct-2008
"RTN","IBJPS3",2,0)
 ;;2.0;INTEGRATED BILLING;**400,432,516,577,608**;21-MAR-94;Build 90
"RTN","IBJPS3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS3",4,0)
 ;
"RTN","IBJPS3",5,0)
 ; MRD;IB*2.0*516 - Added logic pertaining to TRICARE-Specific Pay-To
"RTN","IBJPS3",6,0)
 ; Providers, which entailed adding the parameter IBTCFLAG to many
"RTN","IBJPS3",7,0)
 ; procedures here and in ^IBJPS4.
"RTN","IBJPS3",8,0)
 ;
"RTN","IBJPS3",9,0)
EN(IBTCFLAG) ; -- main entry point for IBJP IB PAY-TO PROVIDERS
"RTN","IBJPS3",10,0)
 D EN^VALM("IBJP IB "_$S(IBTCFLAG:"TRICARE PAY-TO PROVS",1:"PAY-TO PROVIDERS"))
"RTN","IBJPS3",11,0)
 Q
"RTN","IBJPS3",12,0)
 ;
"RTN","IBJPS3",13,0)
HDR(IBTCFLAG) ; -- header code
"RTN","IBJPS3",14,0)
 ; Not setting VALMHDR causes this tag to be called upon return from every action, 
"RTN","IBJPS3",15,0)
 ; this is done to keep VALMSG displayed at all times, instead of the default message on the lower bar.
"RTN","IBJPS3",16,0)
 S VALMSG="* = Default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to provider"
"RTN","IBJPS3",17,0)
 Q
"RTN","IBJPS3",18,0)
 ;
"RTN","IBJPS3",19,0)
INIT(IBTCFLAG) ; -- init variables and list array
"RTN","IBJPS3",20,0)
 N IBCNT,IBLN,IBSTR,PIEN,PDATA,IBNODE
"RTN","IBJPS3",21,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",22,0)
 ;
"RTN","IBJPS3",23,0)
 S (VALMCNT,IBCNT,IBLN)=0
"RTN","IBJPS3",24,0)
 S PIEN=0 F  S PIEN=$O(^IBE(350.9,1,IBNODE,PIEN)) Q:'PIEN  D
"RTN","IBJPS3",25,0)
 .I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" Q
"RTN","IBJPS3",26,0)
 .S PDATA=$$PTG(PIEN,IBTCFLAG),IBCNT=IBCNT+1
"RTN","IBJPS3",27,0)
 .S IBSTR=$$SETSTR^VALM1(IBCNT_".","",2,4)
"RTN","IBJPS3",28,0)
 .I $$ISDFLT(PIEN,IBTCFLAG) S IBSTR=$$SETSTR^VALM1("*",IBSTR,7,1)
"RTN","IBJPS3",29,0)
 .S IBSTR=$$SETSTR^VALM1("Name     : "_$P(PDATA,U),IBSTR,8,45)
"RTN","IBJPS3",30,0)
 .;S IBSTR=$$SETSTR^VALM1("State   : "_$P(PDATA,U,8),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",31,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",32,0)
 .;S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,45)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",33,0)
 .S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
"RTN","IBJPS3",34,0)
 .;S IBSTR=$$SETSTR^VALM1("Zip Code: "_$P(PDATA,U,9),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",35,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",36,0)
 .;S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,45)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",37,0)
 .S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
"RTN","IBJPS3",38,0)
 .;S IBSTR=$$SETSTR^VALM1("Phone   : "_$P(PDATA,U,4),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",39,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",40,0)
 .S IBSTR=$$SETSTR^VALM1("City     : "_$P(PDATA,U,7),"",8,45)
"RTN","IBJPS3",41,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",42,0)
 .;S IBSTR=$$SETSTR^VALM1("Tax ID  : "_$P(PDATA,U,3),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",43,0)
 .;JRA Move State, Zip Code, Phone and Tax ID under City to allow for longer address lines
"RTN","IBJPS3",44,0)
 .S IBSTR=$$SETSTR^VALM1("State    : "_$P(PDATA,U,8),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",45,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",46,0)
 .S IBSTR=$$SETSTR^VALM1("Zip Code : "_$P(PDATA,U,9),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",47,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",48,0)
 .S IBSTR=$$SETSTR^VALM1("Phone    : "_$P(PDATA,U,4),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",49,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",50,0)
 .S IBSTR=$$SETSTR^VALM1("Tax ID   : "_$P(PDATA,U,3),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",51,0)
 .S IBLN=$$SET(IBLN,IBSTR),IBLN=$$SET(IBLN,"")
"RTN","IBJPS3",52,0)
 .S @VALMAR@("ZIDX",IBCNT,PIEN)=""
"RTN","IBJPS3",53,0)
 .Q
"RTN","IBJPS3",54,0)
 ;
"RTN","IBJPS3",55,0)
 I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Providers defined.","",13,40))
"RTN","IBJPS3",56,0)
 ;
"RTN","IBJPS3",57,0)
 S VALMCNT=IBLN,VALMBG=1
"RTN","IBJPS3",58,0)
 Q
"RTN","IBJPS3",59,0)
 ;
"RTN","IBJPS3",60,0)
HELP ; -- help code
"RTN","IBJPS3",61,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS3",62,0)
 Q
"RTN","IBJPS3",63,0)
 ;
"RTN","IBJPS3",64,0)
EXIT ; -- exit code
"RTN","IBJPS3",65,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBJPS3",66,0)
 Q
"RTN","IBJPS3",67,0)
 ;
"RTN","IBJPS3",68,0)
PRVADD(IBTCFLAG) ; add new pay-to provider
"RTN","IBJPS3",69,0)
 N X,Y,DIC,DA,DLAYGO,DIE,DR,DIR,DIRUT,DUOUT,DTOUT,IEN,IBNODE
"RTN","IBJPS3",70,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",71,0)
 D FULL^VALM1
"RTN","IBJPS3",72,0)
 S VALMBCK="R"
"RTN","IBJPS3",73,0)
 S DIC="^IBE(350.9,1,"_IBNODE_",",DIC(0)="AELMQ",DA(1)=1,DLAYGO=350.9
"RTN","IBJPS3",74,0)
 S DIC("A")="Enter "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to Provider: "
"RTN","IBJPS3",75,0)
 D ^DIC S IEN=+Y
"RTN","IBJPS3",76,0)
 I IEN'>0 Q
"RTN","IBJPS3",77,0)
 D PRVEDIT1
"RTN","IBJPS3",78,0)
 I $P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)="" D PRVDEL1
"RTN","IBJPS3",79,0)
 Q
"RTN","IBJPS3",80,0)
 ;
"RTN","IBJPS3",81,0)
PRVDEL(IBTCFLAG) ; delete a pay-to provider
"RTN","IBJPS3",82,0)
 N DA,DR,DIE,X,Y,DIR,DIRUT,DUOUT,DTOUT,I,IEN,DIVS,DFLT,IBNODE,IBDISP
"RTN","IBJPS3",83,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",84,0)
 S IBDISP=$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
"RTN","IBJPS3",85,0)
 S VALMBCK="R"
"RTN","IBJPS3",86,0)
 D FULL^VALM1
"RTN","IBJPS3",87,0)
 S IEN=$$SEL(IBTCFLAG) Q:'IEN
"RTN","IBJPS3",88,0)
 S DFLT=$$ISDFLT(IEN,IBTCFLAG)
"RTN","IBJPS3",89,0)
 I DFLT W !!,"WARNING: This is the default "_IBDISP_"."
"RTN","IBJPS3",90,0)
 D GETDIVS^IBJPS4(IEN,.DIVS,IBTCFLAG)
"RTN","IBJPS3",91,0)
 I 'DFLT D
"RTN","IBJPS3",92,0)
 .W !!,"The following divisions are currently associated with this "_IBDISP_": "
"RTN","IBJPS3",93,0)
 .S I="" F  S I=$O(DIVS(I)) Q:I=""  W !,?5,DIVS(I)
"RTN","IBJPS3",94,0)
 .W:'$D(DIVS) "None",! W !
"RTN","IBJPS3",95,0)
 .Q
"RTN","IBJPS3",96,0)
 S DIR("?")="Enter Yes to delete this "_IBDISP_"."
"RTN","IBJPS3",97,0)
 S DIR("A")="Delete "_IBDISP_" "_$P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)
"RTN","IBJPS3",98,0)
 S DIR(0)="YO",DIR("B")="NO" D ^DIR Q:'Y
"RTN","IBJPS3",99,0)
 I DFLT S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////@" D ^DIE
"RTN","IBJPS3",100,0)
 I $D(DIVS) K DIK S DIK="^IBE(350.9,1,"_IBNODE_",",DA(1)=1,I="" F  S I=$O(DIVS(I)) Q:I=""  S DA=I D ^DIK
"RTN","IBJPS3",101,0)
 K DIK
"RTN","IBJPS3",102,0)
PRVDEL1 ;
"RTN","IBJPS3",103,0)
 N DIK
"RTN","IBJPS3",104,0)
 K DA
"RTN","IBJPS3",105,0)
 S DIK="^IBE(350.9,1,"_IBNODE_","
"RTN","IBJPS3",106,0)
 S DA(1)=1,DA=IEN
"RTN","IBJPS3",107,0)
 D ^DIK
"RTN","IBJPS3",108,0)
 D CLEAN^VALM10,INIT(IBTCFLAG)
"RTN","IBJPS3",109,0)
 Q
"RTN","IBJPS3",110,0)
 ;
"RTN","IBJPS3",111,0)
PRVEDIT(IBTCFLAG) ; edit existing pay-to provider
"RTN","IBJPS3",112,0)
 N IEN,IBNODE
"RTN","IBJPS3",113,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",114,0)
 S VALMBCK="R"
"RTN","IBJPS3",115,0)
 D FULL^VALM1
"RTN","IBJPS3",116,0)
 S IEN=$$SEL(IBTCFLAG) Q:'IEN
"RTN","IBJPS3",117,0)
PRVEDIT1 ;
"RTN","IBJPS3",118,0)
 N DIE,DA,DR,DIR,DIRUT,DUOUT,DTOUT,X,Y
"RTN","IBJPS3",119,0)
 S DIE="^IBE(350.9,1,"_IBNODE_","
"RTN","IBJPS3",120,0)
 S DA=IEN,DA(1)=1
"RTN","IBJPS3",121,0)
 S DR=".02T;1.01T;1.02T;1.03T;1.04T;1.05T;.04T;.03T;.05///@"
"RTN","IBJPS3",122,0)
 D ^DIE
"RTN","IBJPS3",123,0)
 S DIR("?")="Enter Yes to make this entry the default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-to Provider."
"RTN","IBJPS3",124,0)
 S DIR("A")="Is this the default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
"RTN","IBJPS3",125,0)
 S DIR(0)="YO"
"RTN","IBJPS3",126,0)
 S DIR("B")="YES" I $$GETDFLT(IBTCFLAG),'$$ISDFLT(IEN,IBTCFLAG) S DIR("B")="NO"
"RTN","IBJPS3",127,0)
 D ^DIR I Y K DA S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////"_IEN D ^DIE
"RTN","IBJPS3",128,0)
 D CLEAN^VALM10,INIT(IBTCFLAG)
"RTN","IBJPS3",129,0)
 Q
"RTN","IBJPS3",130,0)
 ;
"RTN","IBJPS3",131,0)
SET(IBLN,IBSTR) ; add a line to display list
"RTN","IBJPS3",132,0)
 ; returns line number added
"RTN","IBJPS3",133,0)
 S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR)
"RTN","IBJPS3",134,0)
 Q IBLN
"RTN","IBJPS3",135,0)
 ;
"RTN","IBJPS3",136,0)
ISDFLT(PIEN,IBTCFLAG) ; returns 1 if provider with ien PIEN is the default pay-to provider, 0 otherwise
"RTN","IBJPS3",137,0)
 Q:PIEN="" 0
"RTN","IBJPS3",138,0)
 Q $$GETDFLT(IBTCFLAG)=PIEN
"RTN","IBJPS3",139,0)
 ;
"RTN","IBJPS3",140,0)
GETDFLT(IBTCFLAG) ; returns ien of default pay-to provider
"RTN","IBJPS3",141,0)
 Q $P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3))
"RTN","IBJPS3",142,0)
 ;
"RTN","IBJPS3",143,0)
SEL(IBTCFLAG) ; select pay-to provider
"RTN","IBJPS3",144,0)
 ; returns ien of selected pay-to provider, or 0 if nothing is selected
"RTN","IBJPS3",145,0)
 N DIR,IEN,MAX,X,Y
"RTN","IBJPS3",146,0)
 S IEN=0
"RTN","IBJPS3",147,0)
 I VALMLST>4 D
"RTN","IBJPS3",148,0)
 . ; there is at least one entry
"RTN","IBJPS3",149,0)
 . S MAX=$O(@VALMAR@("ZIDX",""),-1) S:MAX=1 Y=1
"RTN","IBJPS3",150,0)
 . I MAX>1 D
"RTN","IBJPS3",151,0)
 . . S DIR("A")="Select "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider (1-"_MAX_"): "
"RTN","IBJPS3",152,0)
 . . S DIR(0)="NA^"_1_":"_MAX_":0"
"RTN","IBJPS3",153,0)
 . . D ^DIR
"RTN","IBJPS3",154,0)
 . . Q
"RTN","IBJPS3",155,0)
 . S:+Y>0 IEN=$O(@VALMAR@("ZIDX",Y,""))
"RTN","IBJPS3",156,0)
 . Q
"RTN","IBJPS3",157,0)
 Q +IEN
"RTN","IBJPS3",158,0)
 ;
"RTN","IBJPS3",159,0)
PRVDATA(IBIFN) ; Return a string of Pay-To provider information in the following format
"RTN","IBJPS3",160,0)
 ;  [1] name
"RTN","IBJPS3",161,0)
 ;  [2] npi
"RTN","IBJPS3",162,0)
 ;  [3] tax id#
"RTN","IBJPS3",163,0)
 ;  [4] phone#
"RTN","IBJPS3",164,0)
 ;  [5] street 1
"RTN","IBJPS3",165,0)
 ;  [6] street 2
"RTN","IBJPS3",166,0)
 ;  [7] city
"RTN","IBJPS3",167,0)
 ;  [8] state abbreviation
"RTN","IBJPS3",168,0)
 ;  [9] zip
"RTN","IBJPS3",169,0)
 ; [10] list of IB error messages if any of this data is missing in IBXX1;IBXX2;IBXX3;IBXX4; format
"RTN","IBJPS3",170,0)
 ; [11] Institution (File 4) ien
"RTN","IBJPS3",171,0)
 ;
"RTN","IBJPS3",172,0)
 ; **NOTE:  pieces 12,13,14 are added to this string in output formatter data element #1624 for PRV1-1.5 for PRV1
"RTN","IBJPS3",173,0)
 ; pieces 2,3,5.  If pieces are added here to this string, then adjust the code in PRV1-1.5,2,3,5 accordingly.
"RTN","IBJPS3",174,0)
 ;
"RTN","IBJPS3",175,0)
 N DATA,IB0,EVDT,IBDIV,INST,PIEN,IBER,IBTCFLAG
"RTN","IBJPS3",176,0)
 S DATA="",IBER=""
"RTN","IBJPS3",177,0)
 ;
"RTN","IBJPS3",178,0)
 S IBTCFLAG=$$TRICARE^IBJPS4(IBIFN) ; Set IBTCFLAG to '1' if TRICARE claim, otherwise '0'.
"RTN","IBJPS3",179,0)
 ;
"RTN","IBJPS3",180,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBJPS3",181,0)
 S EVDT=$P(IB0,U,3)                             ; event date on claim
"RTN","IBJPS3",182,0)
 I 'EVDT S EVDT=DT
"RTN","IBJPS3",183,0)
 S IBDIV=+$P(IB0,U,22)                          ; division on claim
"RTN","IBJPS3",184,0)
 I 'IBDIV S IBDIV=$$PRIM^VASITE(EVDT)
"RTN","IBJPS3",185,0)
 I IBDIV'>0 S IBDIV=$$PRIM^VASITE()
"RTN","IBJPS3",186,0)
 I IBDIV'>0 G PRVDATX                           ; get out if no division
"RTN","IBJPS3",187,0)
 S INST=+$$SITE^VASITE(EVDT,IBDIV)              ; inst file 4 pointer
"RTN","IBJPS3",188,0)
 I INST'>0 S INST=+$$SITE^VASITE(DT,IBDIV)
"RTN","IBJPS3",189,0)
 I INST'>0 S INST=+$$SITE^VASITE()
"RTN","IBJPS3",190,0)
 I INST'>0 G PRVDATX                            ; get out if no institution
"RTN","IBJPS3",191,0)
 ;
"RTN","IBJPS3",192,0)
 ; check to see if this institution exists as a separate Pay-To Provider subfile entry
"RTN","IBJPS3",193,0)
 S PIEN=+$O(^IBE(350.9,1,$S(IBTCFLAG:29,1:19),"B",INST,""))
"RTN","IBJPS3",194,0)
 ;
"RTN","IBJPS3",195,0)
 I 'PIEN D  G PRVDATX      ; this institution does not exist in 350.9004/350.929.
"RTN","IBJPS3",196,0)
 . ; check to see if the default Pay-To provider information is defined (350.9;11.03/11.04)
"RTN","IBJPS3",197,0)
 . S PIEN=+$P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3)) Q:'PIEN
"RTN","IBJPS3",198,0)
 . S DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",199,0)
 . Q
"RTN","IBJPS3",200,0)
 ;
"RTN","IBJPS3",201,0)
 ; here PIEN exists and the institution pointer was found in the 350.9004 subfile
"RTN","IBJPS3",202,0)
 ; find parent pay-to provider
"RTN","IBJPS3",203,0)
 S PIEN=$$GETPROV^IBJPS4(PIEN,IBTCFLAG) S:PIEN DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",204,0)
 ;
"RTN","IBJPS3",205,0)
PRVDATX ;
"RTN","IBJPS3",206,0)
 I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
"RTN","IBJPS3",207,0)
 Q DATA
"RTN","IBJPS3",208,0)
 ;
"RTN","IBJPS3",209,0)
PTG(PIEN,IBTCFLAG) ; gather pay-to provider info
"RTN","IBJPS3",210,0)
 N N0,N1,IBORG,NPI,STIEN,STATE,Z,IBER,IBNODE
"RTN","IBJPS3",211,0)
 ;
"RTN","IBJPS3",212,0)
 S IBNODE=$$NODE^IBJPS4(+$G(IBTCFLAG))
"RTN","IBJPS3",213,0)
 ;
"RTN","IBJPS3",214,0)
 S Z="",IBER="",PIEN=+$G(PIEN)
"RTN","IBJPS3",215,0)
 ;
"RTN","IBJPS3",216,0)
 I '$D(^IBE(350.9,1,IBNODE,PIEN)) S IBER=IBER_"IB177;",$P(Z,U,10)=IBER G PTGX
"RTN","IBJPS3",217,0)
 S N0=$G(^IBE(350.9,1,IBNODE,PIEN,0))
"RTN","IBJPS3",218,0)
 S N1=$G(^IBE(350.9,1,IBNODE,PIEN,1))
"RTN","IBJPS3",219,0)
 ;
"RTN","IBJPS3",220,0)
 ; get the NPI# from the Institution file
"RTN","IBJPS3",221,0)
 S IBORG=+$P(N0,U,1),NPI=""
"RTN","IBJPS3",222,0)
 I IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)
"RTN","IBJPS3",223,0)
 ;
"RTN","IBJPS3",224,0)
 ; get the state abbreviation
"RTN","IBJPS3",225,0)
 S STIEN=+$P(N1,U,4),STATE=""
"RTN","IBJPS3",226,0)
 I STIEN S STATE=$$GET1^DIQ(5,STIEN_",",1)
"RTN","IBJPS3",227,0)
 ;
"RTN","IBJPS3",228,0)
 ; check for missing data
"RTN","IBJPS3",229,0)
 I '$L($P(N0,U,2)) S IBER=IBER_"IB178;"     ; missing name
"RTN","IBJPS3",230,0)
 I NPI'>0 S IBER=IBER_"IB179;"              ; missing npi
"RTN","IBJPS3",231,0)
 ; Patch 432 enh5:  The IB system shall no longer prevent users from authorizing (fatal error message) a claim because the system can not find the human providers SSN or EIN
"RTN","IBJPS3",232,0)
 ;I '$L($P(N0,U,3)) S IBER=IBER_"IB180;"     ; missing tax ID
"RTN","IBJPS3",233,0)
 I '$L($P(N1,U,1))!'$L($P(N1,U,3))!'$L(STATE)!'$L($P(N1,U,5)) S IBER=IBER_"IB181;"     ; missing address part(s)
"RTN","IBJPS3",234,0)
 ;
"RTN","IBJPS3",235,0)
 S Z=$P(N0,U,2)_U_NPI_U_$P(N0,U,3)_U_$P(N0,U,4)_U_$P(N1,U,1)_U_$P(N1,U,2)_U_$P(N1,U,3)_U_STATE_U_$P(N1,U,5)_U_IBER_U_IBORG
"RTN","IBJPS3",236,0)
PTGX ;
"RTN","IBJPS3",237,0)
 Q Z
"RTN","IBJPS3",238,0)
 ;
"RTN","IBJPS3",239,0)
PRVPHONE(IBIFN) ; Return Pay-to provider phone# for a given claim
"RTN","IBJPS3",240,0)
 ; IBIFN - internal claim# (optional parameter)
"RTN","IBJPS3",241,0)
 ; If IBIFN is not passed in, then the phone# from the default pay-to provider entry will be returned.
"RTN","IBJPS3",242,0)
 ; For example, AR option 'EDI Lockbox 3rd Party Exceptions' needs the phone# for the process of transfering an
"RTN","IBJPS3",243,0)
 ; EEOB to another site, but the claim# is not available to this process.
"RTN","IBJPS3",244,0)
 N PTPP,PIEN
"RTN","IBJPS3",245,0)
 S PTPP=""
"RTN","IBJPS3",246,0)
 I +$G(IBIFN) S PTPP=$P($$PRVDATA(IBIFN),U,4) G PRVPHNX
"RTN","IBJPS3",247,0)
 ;
"RTN","IBJPS3",248,0)
 S PIEN=+$P($G(^IBE(350.9,1,11)),U,3) I 'PIEN G PRVPHNX   ; no claim#, default pay-to provider
"RTN","IBJPS3",249,0)
 S PTPP=$P($$PTG(PIEN),U,4)                               ; phone#
"RTN","IBJPS3",250,0)
 ;
"RTN","IBJPS3",251,0)
PRVPHNX ;
"RTN","IBJPS3",252,0)
 Q PTPP
"RTN","IBJPS3",253,0)
 ;
"RTN","IBJPS3",254,0)
DEF(INST,DA,IBTCFLAG) ; This procedure is called by new style x-ref in
"RTN","IBJPS3",255,0)
 ; order to default name and address fields.
"RTN","IBJPS3",256,0)
 ; INST - IEN to file #4, Institution.  This is the value in the .01
"RTN","IBJPS3",257,0)
 ;      field of the Pay-to or TRICARE Pay-to Providers sub-fil.
"RTN","IBJPS3",258,0)
 ; DA - DA array as passed in from FileMan.  DA(1) should equal 1 since
"RTN","IBJPS3",259,0)
 ;      this is the IB site params and there is only 1 entry.  DA should
"RTN","IBJPS3",260,0)
 ;      equal the IEN to the pay-to provider multiple entry
"RTN","IBJPS3",261,0)
 ; This procedure is called only if a new institution is being added to
"RTN","IBJPS3",262,0)
 ; the sub-file or an entry in the sub-file is being changed from one
"RTN","IBJPS3",263,0)
 ; institution to another.
"RTN","IBJPS3",264,0)
 ;
"RTN","IBJPS3",265,0)
 NEW NAD,IENS,ST,STIEN,IBTAXID,IBFILE
"RTN","IBJPS3",266,0)
 ;
"RTN","IBJPS3",267,0)
 I '$G(INST) G DEFX
"RTN","IBJPS3",268,0)
 ;
"RTN","IBJPS3",269,0)
 I IBTCFLAG S IBFILE=350.929
"RTN","IBJPS3",270,0)
 E  S IBFILE=350.9004
"RTN","IBJPS3",271,0)
 ;
"RTN","IBJPS3",272,0)
 S ST=$$WHAT^XUAF4(INST,.02)             ; full state name
"RTN","IBJPS3",273,0)
 S STIEN=$$FIND1^DIC(5,,"BX",ST,"B")     ; state ien
"RTN","IBJPS3",274,0)
 ;
"RTN","IBJPS3",275,0)
 ; if the selected pay-to provider institution is the same as the main
"RTN","IBJPS3",276,0)
 ; facility name field from the IB site parameters, then also default
"RTN","IBJPS3",277,0)
 ; the federal tax ID# from the IB site parameters into the pay-to
"RTN","IBJPS3",278,0)
 ; provider tax ID# field.
"RTN","IBJPS3",279,0)
 S IBTAXID=""
"RTN","IBJPS3",280,0)
 I INST=$P($G(^IBE(350.9,1,0)),U,2) S IBTAXID=$P($G(^IBE(350.9,1,1)),U,5)
"RTN","IBJPS3",281,0)
 ;
"RTN","IBJPS3",282,0)
 S IENS=DA_",1,"
"RTN","IBJPS3",283,0)
 S NAD(IBFILE,IENS,.02)=$$WHAT^XUAF4(INST,100)     ; official VA name
"RTN","IBJPS3",284,0)
 S NAD(IBFILE,IENS,.03)=IBTAXID                    ; tax#
"RTN","IBJPS3",285,0)
 S NAD(IBFILE,IENS,.04)=""                         ; phone# - blank it out
"RTN","IBJPS3",286,0)
 S NAD(IBFILE,IENS,.05)=""                         ; parent - blank it out
"RTN","IBJPS3",287,0)
 S NAD(IBFILE,IENS,1.01)=$$WHAT^XUAF4(INST,1.01)   ; address line 1
"RTN","IBJPS3",288,0)
 S NAD(IBFILE,IENS,1.02)=$$WHAT^XUAF4(INST,1.02)   ; address line 2
"RTN","IBJPS3",289,0)
 S NAD(IBFILE,IENS,1.03)=$$WHAT^XUAF4(INST,1.03)   ; city
"RTN","IBJPS3",290,0)
 I STIEN S NAD(IBFILE,IENS,1.04)=STIEN             ; state
"RTN","IBJPS3",291,0)
 S NAD(IBFILE,IENS,1.05)=$$WHAT^XUAF4(INST,1.04)   ; zip
"RTN","IBJPS3",292,0)
 D FILE^DIE(,"NAD")
"RTN","IBJPS3",293,0)
DEFX ;
"RTN","IBJPS3",294,0)
 Q
"RTN","IBJPS3",295,0)
 ;
"RTN","IBJPS3",296,0)
DIFF(IBIFN,EDI) ; This function will determine if there are any differences between
"RTN","IBJPS3",297,0)
 ; the Billing Provider name and address and the Pay-to Provider name and address.
"RTN","IBJPS3",298,0)
 ; When these two are the same, then the Pay-to Provider information is
"RTN","IBJPS3",299,0)
 ; suppressed and is not printed or transmitted.
"RTN","IBJPS3",300,0)
 ; This function returns a 1 if differences are found, and 0 if they are the same.
"RTN","IBJPS3",301,0)
 ;
"RTN","IBJPS3",302,0)
 ; EDI=1 if this is being called for the electronic claim transmission
"RTN","IBJPS3",303,0)
 ; EDI=0 if this is being called for the printed UB-04 claim form
"RTN","IBJPS3",304,0)
 ;
"RTN","IBJPS3",305,0)
 N BPZ,PTP,DIFF,BPNAME,BPAD1,BPAD2,BPCITY,BPST,BPZIP,IBZ
"RTN","IBJPS3",306,0)
 S DIFF=0,EDI=+$G(EDI)
"RTN","IBJPS3",307,0)
 S BPZ=+$$B^IBCEF79(IBIFN)            ; billing provider ien to file 4
"RTN","IBJPS3",308,0)
 S PTP=$$UP^XLFSTR($$PRVDATA(IBIFN))  ; pay-to provider information
"RTN","IBJPS3",309,0)
 ;
"RTN","IBJPS3",310,0)
 ; for EDI claims, use the GETBP utility to get the billing provider data
"RTN","IBJPS3",311,0)
 I EDI D
"RTN","IBJPS3",312,0)
 . D GETBP^IBCEF79(IBIFN,"",BPZ,"DIFF",.IBZ)
"RTN","IBJPS3",313,0)
 . S BPNAME=$$UP^XLFSTR($G(IBZ("DIFF","NAME")))
"RTN","IBJPS3",314,0)
 . S BPAD1=$$UP^XLFSTR($G(IBZ("DIFF","ADDR1")))
"RTN","IBJPS3",315,0)
 . S BPAD2=$$UP^XLFSTR($G(IBZ("DIFF","ADDR2")))
"RTN","IBJPS3",316,0)
 . S BPCITY=$$UP^XLFSTR($G(IBZ("DIFF","CITY")))
"RTN","IBJPS3",317,0)
 . S BPST=$$UP^XLFSTR($G(IBZ("DIFF","ST")))
"RTN","IBJPS3",318,0)
 . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($G(IBZ("DIFF","ZIP"))))
"RTN","IBJPS3",319,0)
 . Q
"RTN","IBJPS3",320,0)
 ;
"RTN","IBJPS3",321,0)
 ; for printed UB claims, use the Institution file for FL-1 data
"RTN","IBJPS3",322,0)
 I 'EDI D
"RTN","IBJPS3",323,0)
 . S BPNAME=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,0))
"RTN","IBJPS3",324,0)
 . S BPAD1=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,1))
"RTN","IBJPS3",325,0)
 . S BPAD2=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,2))
"RTN","IBJPS3",326,0)
 . S BPCITY=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3C"))
"RTN","IBJPS3",327,0)
 . S BPST=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3S"))
"RTN","IBJPS3",328,0)
 . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3Z")))
"RTN","IBJPS3",329,0)
 . Q
"RTN","IBJPS3",330,0)
 ;
"RTN","IBJPS3",331,0)
 I BPNAME'=$P(PTP,U,1) S DIFF=1 G DIFFX
"RTN","IBJPS3",332,0)
 I BPAD1'=$P(PTP,U,5) S DIFF=1 G DIFFX
"RTN","IBJPS3",333,0)
 I BPAD2'=$P(PTP,U,6) S DIFF=1 G DIFFX
"RTN","IBJPS3",334,0)
 I BPCITY'=$P(PTP,U,7) S DIFF=1 G DIFFX
"RTN","IBJPS3",335,0)
 I BPST'=$P(PTP,U,8) S DIFF=1 G DIFFX
"RTN","IBJPS3",336,0)
 I BPZIP'=$$NOPUNCT^IBCEF($P(PTP,U,9)) S DIFF=1 G DIFFX
"RTN","IBJPS3",337,0)
DIFFX ;
"RTN","IBJPS3",338,0)
 Q DIFF
"RTN","IBJPS3",339,0)
 ;
"RTN","IBJPS3",340,0)
MAINPRV(IBTCFLAG) ; Return Pay-To provider information for main VAMC
"RTN","IBJPS3",341,0)
 N DATA,IBER,IEN4,PIEN,IBNODE
"RTN","IBJPS3",342,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",343,0)
 S (DATA,IBER)="",IEN4=+$$SITE^VASITE I 'IEN4 G MAINPRVX
"RTN","IBJPS3",344,0)
 S PIEN=$O(^IBE(350.9,1,IBNODE,"B",IEN4,"")) I 'PIEN G MAINPRVX
"RTN","IBJPS3",345,0)
 I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" G MAINPRVX   ; if this sub-entry is not a pay-to provider, then get out
"RTN","IBJPS3",346,0)
 S DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",347,0)
MAINPRVX ;
"RTN","IBJPS3",348,0)
 I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
"RTN","IBJPS3",349,0)
 Q DATA
"RTN","IBJPS3",350,0)
 ;
"RTN","IBJPS4")
0^26^B37240589^B36439628
"RTN","IBJPS4",1,0)
IBJPS4 ;BP/YMG - IB Site Parameters, Pay-To Provider Associations ;06-Nov-2008
"RTN","IBJPS4",2,0)
 ;;2.0;INTEGRATED BILLING;**400,516,608**;21-MAR-94;Build 90
"RTN","IBJPS4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS4",4,0)
 ;
"RTN","IBJPS4",5,0)
 ; MRD;IB*2.0*516 - Added logic pertaining to TRICARE-Specific Pay-To
"RTN","IBJPS4",6,0)
 ; Providers, which entailed adding the parameter IBTCFLAG to many
"RTN","IBJPS4",7,0)
 ; procedures here and in ^IBJPS3.
"RTN","IBJPS4",8,0)
 ;
"RTN","IBJPS4",9,0)
EN(IBTCFLAG) ; -- main entry point for IBJP IB PAY-TO ASSOCIATIONS
"RTN","IBJPS4",10,0)
 ; select pay-to provider
"RTN","IBJPS4",11,0)
 D EN^VALM("IBJP IB "_$S(IBTCFLAG:"TRICARE PAY-TO ASSOCS",1:"PAY-TO ASSOCIATIONS"))
"RTN","IBJPS4",12,0)
 S VALMBCK="R"
"RTN","IBJPS4",13,0)
 Q
"RTN","IBJPS4",14,0)
 ;
"RTN","IBJPS4",15,0)
HDR ; -- header code
"RTN","IBJPS4",16,0)
 S VALMHDR(1)=""
"RTN","IBJPS4",17,0)
 Q
"RTN","IBJPS4",18,0)
 ;
"RTN","IBJPS4",19,0)
INIT(IBTCFLAG) ; -- init variables and list array
"RTN","IBJPS4",20,0)
 N DFLT,HASDIVS,IBCNT,IBLN,IBSTR,IEN4,PIEN,PROVS
"RTN","IBJPS4",21,0)
 S DFLT=$$GETDFLT^IBJPS3(IBTCFLAG) D BLD(DFLT,.PROVS,IBTCFLAG)
"RTN","IBJPS4",22,0)
 I $D(PROVS) D
"RTN","IBJPS4",23,0)
 .; create listman array
"RTN","IBJPS4",24,0)
 .S (IBCNT,IBLN)=0 S PIEN="" F  S PIEN=$O(PROVS(PIEN)) Q:PIEN=""  D
"RTN","IBJPS4",25,0)
 ..S IBLN=IBLN+1
"RTN","IBJPS4",26,0)
 ..S IBSTR=$$SETSTR^VALM1(PROVS(PIEN)_$S($$ISDFLT^IBJPS3(PIEN,IBTCFLAG):"  (Default)",1:""),"",2,75)
"RTN","IBJPS4",27,0)
 ..D SET^VALM10(IBLN,IBSTR)
"RTN","IBJPS4",28,0)
 ..S HASDIVS=0,IEN4="" F  S IEN4=$O(PROVS(PIEN,IEN4)) Q:IEN4=""  D
"RTN","IBJPS4",29,0)
 ...S IBLN=IBLN+1,IBCNT=IBCNT+1 S:'HASDIVS HASDIVS=1
"RTN","IBJPS4",30,0)
 ...S IBSTR=$$SETSTR^VALM1(IBCNT,"",8,4)
"RTN","IBJPS4",31,0)
 ...S IBSTR=$$SETSTR^VALM1($P(PROVS(PIEN,IEN4),U,2),IBSTR,14,8)
"RTN","IBJPS4",32,0)
 ...S IBSTR=$$SETSTR^VALM1($P(PROVS(PIEN,IEN4),U),IBSTR,24,55)
"RTN","IBJPS4",33,0)
 ...D SET^VALM10(IBLN,IBSTR)
"RTN","IBJPS4",34,0)
 ...S @VALMAR@("ZIDX",IBCNT,IEN4)=""
"RTN","IBJPS4",35,0)
 ...Q
"RTN","IBJPS4",36,0)
 ..I 'HASDIVS S IBSTR=$$SETSTR^VALM1("No Divisions found.","",8,45) S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR)
"RTN","IBJPS4",37,0)
 ..S IBLN=IBLN+1 D SET^VALM10(IBLN,"")
"RTN","IBJPS4",38,0)
 ..Q
"RTN","IBJPS4",39,0)
 .Q
"RTN","IBJPS4",40,0)
 I 'DFLT S IBLN=$$SET^IBJPS3(0,$$SETSTR^VALM1("No Default "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider found.","",11,42))
"RTN","IBJPS4",41,0)
 I DFLT,'$D(PROVS) S IBLN=$$SET^IBJPS3(0,$$SETSTR^VALM1("No "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Providers found.","",15,35))
"RTN","IBJPS4",42,0)
 S VALMCNT=IBLN,VALMBG=1
"RTN","IBJPS4",43,0)
 Q
"RTN","IBJPS4",44,0)
 ;
"RTN","IBJPS4",45,0)
HELP ; -- help code
"RTN","IBJPS4",46,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS4",47,0)
 Q
"RTN","IBJPS4",48,0)
 ;
"RTN","IBJPS4",49,0)
EXIT ; -- exit code
"RTN","IBJPS4",50,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBJPS4",51,0)
 Q
"RTN","IBJPS4",52,0)
 ;
"RTN","IBJPS4",53,0)
BLD(DFLT,PROVS,IBTCFLAG) ; build array of pay-to providers and divisions
"RTN","IBJPS4",54,0)
 N ALLDIVS,DIEN,DIVDATA,I,IB0,IEN4,PIEN,IBNODE
"RTN","IBJPS4",55,0)
 I DFLT'>0 Q
"RTN","IBJPS4",56,0)
 S IBNODE=$$NODE(IBTCFLAG)
"RTN","IBJPS4",57,0)
 ;
"RTN","IBJPS4",58,0)
 ; create list of all pay-to providers
"RTN","IBJPS4",59,0)
 S I=0 F  S I=$O(^IBE(350.9,1,IBNODE,I)) Q:'I  D
"RTN","IBJPS4",60,0)
 .S IB0=$G(^IBE(350.9,1,IBNODE,I,0)) I 'IB0 Q
"RTN","IBJPS4",61,0)
 .I $P(IB0,U,5)="" S PROVS(I)=$P(IB0,U,2)
"RTN","IBJPS4",62,0)
 .Q
"RTN","IBJPS4",63,0)
 I $D(PROVS) D
"RTN","IBJPS4",64,0)
 .; add divisions to the list
"RTN","IBJPS4",65,0)
 .D LIST^DIC(40.8,,"@;.01;.07I","PQ",,,,,,,"ALLDIVS")
"RTN","IBJPS4",66,0)
 .I $D(ALLDIVS) S I=0 F  S I=$O(ALLDIVS("DILIST",I)) Q:I=""  D
"RTN","IBJPS4",67,0)
 ..; make sure that we have a file 4 ien to work with
"RTN","IBJPS4",68,0)
 ..S DIVDATA=$G(ALLDIVS("DILIST",I,0)),IEN4=$P(DIVDATA,U,3) I IEN4="" Q
"RTN","IBJPS4",69,0)
 ..S DIEN=$O(^IBE(350.9,1,IBNODE,"B",IEN4,""))
"RTN","IBJPS4",70,0)
 ..; if there is an entry in 350.9 for this division, get corresponding pay-to provider
"RTN","IBJPS4",71,0)
 ..; otherwise, use default pay-to provider 
"RTN","IBJPS4",72,0)
 ..S PIEN=$S(DIEN:$$GETPROV(DIEN,IBTCFLAG),1:DFLT)
"RTN","IBJPS4",73,0)
 ..; add this division to the list as division name ^ station number
"RTN","IBJPS4",74,0)
 ..S PROVS(PIEN,IEN4)=$P(DIVDATA,U,2)_U_$$GET1^DIQ(4,IEN4,99)
"RTN","IBJPS4",75,0)
 ..Q
"RTN","IBJPS4",76,0)
 .Q
"RTN","IBJPS4",77,0)
 D CLEAN^DILF
"RTN","IBJPS4",78,0)
 Q
"RTN","IBJPS4",79,0)
 ;
"RTN","IBJPS4",80,0)
SEL() ; select division
"RTN","IBJPS4",81,0)
 ; returns ien of selected division, or 0 if nothing is selected
"RTN","IBJPS4",82,0)
 N DIR,IEN,MAX,X,Y
"RTN","IBJPS4",83,0)
 S IEN=0,MAX=+$O(@VALMAR@("ZIDX",""),-1)
"RTN","IBJPS4",84,0)
 I MAX>0 D
"RTN","IBJPS4",85,0)
 .S:MAX=1 Y=1 I MAX>1 S DIR("A")="Select Division (1-"_MAX_"): ",DIR(0)="NA^"_1_":"_MAX_":0" D ^DIR
"RTN","IBJPS4",86,0)
 .S:+Y>0 IEN=$O(@VALMAR@("ZIDX",Y,""))
"RTN","IBJPS4",87,0)
 .Q
"RTN","IBJPS4",88,0)
 Q +IEN
"RTN","IBJPS4",89,0)
 ;
"RTN","IBJPS4",90,0)
DIVADD(IBTCFLAG) ; associate division with a pay-to provider
"RTN","IBJPS4",91,0)
 N DA,DFLT,DIC,DIE,DIEN,DIR,DNAME,DR,IEN4,IEN19,Y,IBNODE
"RTN","IBJPS4",92,0)
 S IBNODE=$$NODE(IBTCFLAG)
"RTN","IBJPS4",93,0)
 ;
"RTN","IBJPS4",94,0)
 D FULL^VALM1
"RTN","IBJPS4",95,0)
 S VALMBCK="R"
"RTN","IBJPS4",96,0)
 S IEN4=$$SEL I IEN4>0 D
"RTN","IBJPS4",97,0)
 .S IEN19=$O(^IBE(350.9,1,IBNODE,"B",IEN4,"")) I IEN19="" D
"RTN","IBJPS4",98,0)
 ..; create a new entry in 350.9
"RTN","IBJPS4",99,0)
 ..S DIEN=$$FIND1^DIC(40.8,,"QX",IEN4,"AD") I 'DIEN Q
"RTN","IBJPS4",100,0)
 ..S DNAME=$$GET1^DIQ(40.8,DIEN,.01),DFLT=$$GETDFLT^IBJPS3(IBTCFLAG) I 'DFLT Q
"RTN","IBJPS4",101,0)
 ..I IEN4=+$G(^IBE(350.9,1,IBNODE,DFLT,0)) D ERR Q
"RTN","IBJPS4",102,0)
 ..S DIC="^IBE(350.9,1,"_IBNODE_",",DIC(0)="L",DIC("DR")=".02////"_DNAME_";.05////"_DFLT,X=IEN4,DLAYGO=350.9,DA(1)=1
"RTN","IBJPS4",103,0)
 ..K DD,DO D FILE^DICN I +Y>0 S IEN19=+Y
"RTN","IBJPS4",104,0)
 ..K DIC,DD,DO,DLAYGO
"RTN","IBJPS4",105,0)
 ..Q
"RTN","IBJPS4",106,0)
 .I +IEN19>0 D
"RTN","IBJPS4",107,0)
 ..I $P($G(^IBE(350.9,1,IBNODE,IEN19,0)),U,5)="" D ERR Q
"RTN","IBJPS4",108,0)
 ..S DIR(0)="P^IBE(350.9,1,"_IBNODE_",:M",DIR("S")="I $P(^(0),U,5)="""""
"RTN","IBJPS4",109,0)
 ..S DA(1)=1,DIR("A")="Select "_$S(IBTCFLAG:"Non-MCCF ",1:"")_"Pay-To Provider"
"RTN","IBJPS4",110,0)
 ..D ^DIR
"RTN","IBJPS4",111,0)
 ..I +Y>0 S DIE="^IBE(350.9,1,"_IBNODE_",",DA=IEN19,DA(1)=1,DR=".05////"_+Y D ^DIE
"RTN","IBJPS4",112,0)
 .Q
"RTN","IBJPS4",113,0)
 D CLEAN^VALM10,CLEAN^DILF,INIT(IBTCFLAG)
"RTN","IBJPS4",114,0)
 Q
"RTN","IBJPS4",115,0)
 ;
"RTN","IBJPS4",116,0)
ERR ;
"RTN","IBJPS4",117,0)
 N DIR
"RTN","IBJPS4",118,0)
 S DIR("A",1)="A division used as a Pay-to Provider cannot be associated"
"RTN","IBJPS4",119,0)
 S DIR("A",2)="with another Pay-to Provider."
"RTN","IBJPS4",120,0)
 S DIR("A")="Press RETURN to continue: "
"RTN","IBJPS4",121,0)
 S DIR(0)="EA" D ^DIR
"RTN","IBJPS4",122,0)
 Q
"RTN","IBJPS4",123,0)
 ;
"RTN","IBJPS4",124,0)
GETPROV(PIEN,IBTCFLAG) ; return pay-to provider ien for a given division, or 0 if provider can't be found
"RTN","IBJPS4",125,0)
 ; PIEN has to be a valid ien in pay-to providers sub-file
"RTN","IBJPS4",126,0)
 ;
"RTN","IBJPS4",127,0)
 N PRVZ,NXTPIEN,OUT,IBNODE
"RTN","IBJPS4",128,0)
 S PRVZ(PIEN)="" ; this array holds ien's to prevent infinite chain
"RTN","IBJPS4",129,0)
 S IBNODE=$$NODE(IBTCFLAG)
"RTN","IBJPS4",130,0)
 S OUT=0 F  S NXTPIEN=+$P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5) D  Q:OUT  ;
"RTN","IBJPS4",131,0)
 .I 'NXTPIEN S OUT=1 Q  ; no parent - this is pay-to provider
"RTN","IBJPS4",132,0)
 .I $D(PRVZ(NXTPIEN)) S PIEN=0,OUT=1 Q  ; we are in an infinite loop, so get out
"RTN","IBJPS4",133,0)
 .S PIEN=NXTPIEN,PRVZ(NXTPIEN)="" ; parent exists, so continue the loop
"RTN","IBJPS4",134,0)
 .Q
"RTN","IBJPS4",135,0)
 Q PIEN
"RTN","IBJPS4",136,0)
 ;
"RTN","IBJPS4",137,0)
GETDIVS(PIEN,DIVS,IBTCFLAG) ; return array of divisions associated with pay-to provider PIEN
"RTN","IBJPS4",138,0)
 N I,DIV,PPROV,IBNODE
"RTN","IBJPS4",139,0)
 S IBNODE=$$NODE(IBTCFLAG)
"RTN","IBJPS4",140,0)
 S I="" F  S I=$O(^IBE(350.9,1,IBNODE,"B",I)) Q:I=""  D
"RTN","IBJPS4",141,0)
 .S DIV=$O(^IBE(350.9,1,IBNODE,"B",I,""))
"RTN","IBJPS4",142,0)
 .Q:+DIV'>0  S PPROV=$$GETPROV(DIV,IBTCFLAG)
"RTN","IBJPS4",143,0)
 .I PPROV=PIEN,DIV'=PIEN S DIVS(DIV)=$P($G(^IBE(350.9,1,IBNODE,DIV,0)),U,2)
"RTN","IBJPS4",144,0)
 .Q
"RTN","IBJPS4",145,0)
 Q
"RTN","IBJPS4",146,0)
 ;
"RTN","IBJPS4",147,0)
NODE(IBTCFLAG) ; Determine appropriate pay-to provide node within ^IBE(350.9).
"RTN","IBJPS4",148,0)
 ; '29' for TRICARE, otherwise '19'.
"RTN","IBJPS4",149,0)
 Q $S(IBTCFLAG:29,1:19)
"RTN","IBJPS4",150,0)
 ;
"RTN","IBJPS4",151,0)
SCRN4(IEN) ; Screen for INSTITUTION(#4) file
"RTN","IBJPS4",152,0)
 N DIERR,IENS,FIELDS,Z,ZERR
"RTN","IBJPS4",153,0)
 S IENS=+IEN_",",FIELDS="11;13;101"
"RTN","IBJPS4",154,0)
 D GETS^DIQ(4,IENS,FIELDS,"IE","Z","ZERR")
"RTN","IBJPS4",155,0)
 I $D(DIERR) Q 0
"RTN","IBJPS4",156,0)
 ;Check to see if National
"RTN","IBJPS4",157,0)
 I Z(4,IENS,11,"I")'="N" Q 0
"RTN","IBJPS4",158,0)
 ;Check to see if Inactive
"RTN","IBJPS4",159,0)
 I Z(4,IENS,101,"I") Q 0
"RTN","IBJPS4",160,0)
 ;Check to see if Pharmacy
"RTN","IBJPS4",161,0)
 I "^PHARM^CMOP^MSN^"[(U_Z(4,IENS,13,"E")_U) Q 0
"RTN","IBJPS4",162,0)
 ;Default
"RTN","IBJPS4",163,0)
 Q 1
"RTN","IBJPS4",164,0)
 ;
"RTN","IBJPS4",165,0)
TRICARE(IBIFN) ; Determine whether this bill/claim is TRICARE or not.
"RTN","IBJPS4",166,0)
 ; Return '1' if TRICARE, '0' if not.  There are two rate types that
"RTN","IBJPS4",167,0)
 ; should return '1': TRICARE and TRICARE REIMB. INS.
"RTN","IBJPS4",168,0)
 ; 
"RTN","IBJPS4",169,0)
 ; This has been modified to reflect Non-MCCF Claims and not just TRICARE. - IB*2.0*608 - vd (US2599)
"RTN","IBJPS4",170,0)
 ;
"RTN","IBJPS4",171,0)
 I '$G(IBIFN) Q 0
"RTN","IBJPS4",172,0)
 N IBRATE
"RTN","IBJPS4",173,0)
 S IBRATE=$P(^DGCR(399,IBIFN,0),U,7)
"RTN","IBJPS4",174,0)
 I 'IBRATE Q 0
"RTN","IBJPS4",175,0)
 ;
"RTN","IBJPS4",176,0)
 ;/Begin IB*2.0*608 - vd (US2599) - Replaced the following lines
"RTN","IBJPS4",177,0)
 ; I $P($G(^DGCR(399.3,IBRATE,0)),U)'["TRICARE" Q 0
"RTN","IBJPS4",178,0)
 I '$D(^IBE(350.9,1,28,"B",IBRATE)) Q 0   ; Not a Non-MCCF Pay-to Provider Rate Type.
"RTN","IBJPS4",179,0)
 ;/End IB*2.0*608 - vd
"RTN","IBJPS4",180,0)
 ;
"RTN","IBJPS4",181,0)
 ; At this point, the claim has a Non-MCCF rate type  However,
"RTN","IBJPS4",182,0)
 ; quit with a '1' only if a default Non-MCCF-specific pay-to
"RTN","IBJPS4",183,0)
 ; provider is defined. Otherwise, quit with a '0'.
"RTN","IBJPS4",184,0)
 ;
"RTN","IBJPS4",185,0)
 I $$GETDFLT^IBJPS3(1) Q 1
"RTN","IBJPS4",186,0)
 Q 0
"RTN","IBJPS7")
0^27^B13118039^n/a
"RTN","IBJPS7",1,0)
IBJPS7 ;ALB/VD - IB Site Parameters, Pay-To Provider Rate Types ;02-Feb-2018
"RTN","IBJPS7",2,0)
 ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 90
"RTN","IBJPS7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS7",4,0)
 ;
"RTN","IBJPS7",5,0)
EN(IBTCFLAG) ; -- main entry point for IBJP IB PAY-TO RATE TYPES
"RTN","IBJPS7",6,0)
 ; select pay-to provider
"RTN","IBJPS7",7,0)
 Q:(IBTCFLAG'=1)  ; Only want Non-MCCF Pay-To Provider Rate Types
"RTN","IBJPS7",8,0)
 D EN^VALM("IBJP IB NON-MCCF RATE TYPES")
"RTN","IBJPS7",9,0)
 S VALMBCK="R"
"RTN","IBJPS7",10,0)
 Q
"RTN","IBJPS7",11,0)
 ;
"RTN","IBJPS7",12,0)
HDR ; -- header code
"RTN","IBJPS7",13,0)
 S VALMSG=""
"RTN","IBJPS7",14,0)
 Q
"RTN","IBJPS7",15,0)
 ;
"RTN","IBJPS7",16,0)
INIT(IBTCFLAG) ; -- init variables and list array
"RTN","IBJPS7",17,0)
 N ERROR,IBCNT,IBLN,IBSTR,RTYDATA,RIENS,RTYPE
"RTN","IBJPS7",18,0)
 Q:(IBTCFLAG'=1)  ; Only want Non-MCCF Pay-To Provider Rate Types
"RTN","IBJPS7",19,0)
 ;
"RTN","IBJPS7",20,0)
 S (VALMCNT,IBCNT,IBLN)=0
"RTN","IBJPS7",21,0)
 I $D(^IBE(350.9,1,28,"B")) D
"RTN","IBJPS7",22,0)
 . S RTYPE=0 F  S RTYPE=$O(^IBE(350.9,1,28,"B",RTYPE)) Q:'RTYPE  D
"RTN","IBJPS7",23,0)
 . . ;
"RTN","IBJPS7",24,0)
 . . S RIENS=RTYPE_","
"RTN","IBJPS7",25,0)
 . . D GETS^DIQ(399.3,RIENS,".001;.01;.03","I","RTYDATA","ERROR")
"RTN","IBJPS7",26,0)
 . . ; do not included *RESERVED codes (must be ACTIVATE = 0 for Active, 1 = InActive)
"RTN","IBJPS7",27,0)
 . . Q:+$G(RTYDATA(399.3,RIENS,.03,"I"))
"RTN","IBJPS7",28,0)
 . . S IBCNT=IBCNT+1
"RTN","IBJPS7",29,0)
 . . S IBSTR=$$SETSTR^VALM1($J(IBCNT,4)_".","",2,6)
"RTN","IBJPS7",30,0)
 . . S IBSTR=$$SETSTR^VALM1($J($G(RTYDATA(399.3,RIENS,.001,"I")),3),IBSTR,10,4)
"RTN","IBJPS7",31,0)
 . . S IBSTR=$$SETSTR^VALM1($G(RTYDATA(399.3,RIENS,.01,"I")),IBSTR,17,30)
"RTN","IBJPS7",32,0)
 . . S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS7",33,0)
 . . S @VALMAR@("ZIDX",IBCNT,$G(RTYDATA(399.3,RIENS,.001,"I")))=""
"RTN","IBJPS7",34,0)
 . . Q
"RTN","IBJPS7",35,0)
 ;
"RTN","IBJPS7",36,0)
 I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No Rate Types defined.","",13,40))
"RTN","IBJPS7",37,0)
 ;
"RTN","IBJPS7",38,0)
 S VALMCNT=IBLN,VALMBG=1
"RTN","IBJPS7",39,0)
 Q
"RTN","IBJPS7",40,0)
 ;
"RTN","IBJPS7",41,0)
HELP ; -- help code
"RTN","IBJPS7",42,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS7",43,0)
 Q
"RTN","IBJPS7",44,0)
 ;
"RTN","IBJPS7",45,0)
EXIT ; -- exit code
"RTN","IBJPS7",46,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBJPS7",47,0)
 Q
"RTN","IBJPS7",48,0)
 ;
"RTN","IBJPS7",49,0)
RTADD(IBTCFLAG) ; -- Add a new Rate Type
"RTN","IBJPS7",50,0)
 N DA,DIK,DIR,DIROUT,DIRUT,DTOUT,DUOUT,FDA,IEN,IENS,X,Y,Z
"RTN","IBJPS7",51,0)
 ;
"RTN","IBJPS7",52,0)
 S VALMBCK="R"
"RTN","IBJPS7",53,0)
 Q:'$$LOCK()  ; Couldn't lock for adding
"RTN","IBJPS7",54,0)
 D FULL^VALM1
"RTN","IBJPS7",55,0)
 ;
"RTN","IBJPS7",56,0)
 I '$$ENTSEL(.IENS) D  Q  ; Select entry(s) to be added
"RTN","IBJPS7",57,0)
 . S VALMSG="No Rate Type selected"
"RTN","IBJPS7",58,0)
 . D UNLOCK
"RTN","IBJPS7",59,0)
 D UNLOCK          ; Unlock the node.
"RTN","IBJPS7",60,0)
 D INIT(IBTCFLAG) ; Rebuild list body
"RTN","IBJPS7",61,0)
 S VALMSG="Added Rate Type(s)"
"RTN","IBJPS7",62,0)
 Q
"RTN","IBJPS7",63,0)
 ;
"RTN","IBJPS7",64,0)
RTDEL(IBTCFLAG) ; -- Delete a Rate Type
"RTN","IBJPS7",65,0)
 N VALMY,Z
"RTN","IBJPS7",66,0)
 D FULL^VALM1
"RTN","IBJPS7",67,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBJPS7",68,0)
 S Z=0
"RTN","IBJPS7",69,0)
 F  S Z=$O(VALMY(Z)) Q:'Z  D
"RTN","IBJPS7",70,0)
 . N DA,DIK,IEN,RIEN
"RTN","IBJPS7",71,0)
 . S IEN=$O(@VALMAR@("ZIDX",Z,""))
"RTN","IBJPS7",72,0)
 . Q:'IEN
"RTN","IBJPS7",73,0)
 . S RIEN=$O(^IBE(350.9,1,28,"B",IEN,""))
"RTN","IBJPS7",74,0)
 . I +RIEN S DIK="^IBE(350.9,1,28,",DA(1)=1,DA=RIEN D ^DIK
"RTN","IBJPS7",75,0)
 K @VALMAR
"RTN","IBJPS7",76,0)
 D INIT(IBTCFLAG)
"RTN","IBJPS7",77,0)
 S VALMBCK="R"
"RTN","IBJPS7",78,0)
 Q
"RTN","IBJPS7",79,0)
 ;
"RTN","IBJPS7",80,0)
SET(IBLN,IBSTR) ; -- Add a line to display list
"RTN","IBJPS7",81,0)
 ; returns line number added
"RTN","IBJPS7",82,0)
 S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR,IBLN)
"RTN","IBJPS7",83,0)
 Q IBLN
"RTN","IBJPS7",84,0)
 ;
"RTN","IBJPS7",85,0)
ENTSEL(IENS) ; Selects an entry to be added to the specified Site Parameter Node
"RTN","IBJPS7",86,0)
 ; Output: IENS - Array of selected IEN(s), "" if not selected
"RTN","IBJPS7",87,0)
 ; Returns: 1 - At least one IEN selected, 0 otherwise
"RTN","IBJPS7",88,0)
 N DA,DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,FDA,STOP,X,Y,Z
"RTN","IBJPS7",89,0)
 K IENS
"RTN","IBJPS7",90,0)
 S STOP=0
"RTN","IBJPS7",91,0)
 S DIC=399.3
"RTN","IBJPS7",92,0)
 S DIC(0)="AEQM"
"RTN","IBJPS7",93,0)
 S DIC("A")="Select a Rate Type to be added: "
"RTN","IBJPS7",94,0)
 ;
"RTN","IBJPS7",95,0)
 ; Set the Add filter
"RTN","IBJPS7",96,0)
 S DIC("S")="I '$D(^IBE(350.9,1,28,""B"",Y))&'$D(IENS(+Y))"
"RTN","IBJPS7",97,0)
 F  D  Q:STOP
"RTN","IBJPS7",98,0)
 . D ^DIC
"RTN","IBJPS7",99,0)
 . I Y'>0 S STOP=1 Q
"RTN","IBJPS7",100,0)
 . S IENS(+Y)=""
"RTN","IBJPS7",101,0)
 . ; create entry for Rate Type
"RTN","IBJPS7",102,0)
 . K FDA
"RTN","IBJPS7",103,0)
 . S FDA("350.928","+1,1,",.01)=+Y
"RTN","IBJPS7",104,0)
 . S FDA("350.928","+1,1,",.02)=0
"RTN","IBJPS7",105,0)
 . D UPDATE^DIE("","FDA")
"RTN","IBJPS7",106,0)
 . Q
"RTN","IBJPS7",107,0)
 ;
"RTN","IBJPS7",108,0)
 I '$D(IENS) Q 0 ; No IENS selected
"RTN","IBJPS7",109,0)
 Q 1
"RTN","IBJPS7",110,0)
 ;
"RTN","IBJPS7",111,0)
LOCK() ;EP
"RTN","IBJPS7",112,0)
 ; Attempt to lock the Non-MCCF Pay-To Providers Rate Types for Site Parameters.
"RTN","IBJPS7",113,0)
 ; Returns: 1 - Successfully locked
"RTN","IBJPS7",114,0)
 ; 0 - Not successfully locked and an error message is
"RTN","IBJPS7",115,0)
 ; displayed
"RTN","IBJPS7",116,0)
 L +^IBE(350.9,1,28):1
"RTN","IBJPS7",117,0)
 I '$T D  Q 0
"RTN","IBJPS7",118,0)
 . W @IOF,"Someone else is editing the Non-MCCF Pay-To Providers Rate Types"
"RTN","IBJPS7",119,0)
 . W !,"Please Try again later"
"RTN","IBJPS7",120,0)
 . D PAUSE^VALM1
"RTN","IBJPS7",121,0)
 Q 1
"RTN","IBJPS7",122,0)
 ;
"RTN","IBJPS7",123,0)
UNLOCK ;EP
"RTN","IBJPS7",124,0)
 ; Unlocks the Non-MCCF Pay-To Providers Rate Types for IB Site Parameters.
"RTN","IBJPS7",125,0)
 L -^IBE(350.9,1,28)
"RTN","IBJPS7",126,0)
 Q
"RTN","IBJPS7",127,0)
 ;
"RTN","IBJPS8")
0^29^B8772675^n/a
"RTN","IBJPS8",1,0)
IBJPS8 ;AITC/WCJ - IB Site Parameters, CMN CPT Inclusions CPT Codes ;02-Feb-2018
"RTN","IBJPS8",2,0)
 ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 90
"RTN","IBJPS8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS8",4,0)
 ;
"RTN","IBJPS8",5,0)
EN ; -- main entry point for IBJP IB CMN CPTS
"RTN","IBJPS8",6,0)
 D EN^VALM("IBJPS CMN CPTS")
"RTN","IBJPS8",7,0)
 Q
"RTN","IBJPS8",8,0)
 ;
"RTN","IBJPS8",9,0)
HDR ; -- header code
"RTN","IBJPS8",10,0)
 S VALMSG=""
"RTN","IBJPS8",11,0)
 Q
"RTN","IBJPS8",12,0)
 ;
"RTN","IBJPS8",13,0)
INIT ; -- init variables and list array
"RTN","IBJPS8",14,0)
 N ERROR,IBCNT,IBLN,IBSTR
"RTN","IBJPS8",15,0)
 N CPTDATA,CIENS,CPTIEN,RTYDSC
"RTN","IBJPS8",16,0)
 ;
"RTN","IBJPS8",17,0)
 S (VALMCNT,IBCNT,IBLN)=0
"RTN","IBJPS8",18,0)
 I $D(^IBE(350.9,1,16,"B")) D
"RTN","IBJPS8",19,0)
 . S CPTIEN=0 F  S CPTIEN=$O(^IBE(350.9,1,16,"B",CPTIEN)) Q:'CPTIEN  D
"RTN","IBJPS8",20,0)
 . . ;
"RTN","IBJPS8",21,0)
 . . S CIENS=CPTIEN_","
"RTN","IBJPS8",22,0)
 . . D GETS^DIQ(81,CIENS,".001;.01;2","I","CPTDATA","ERROR")
"RTN","IBJPS8",23,0)
 . . S IBCNT=IBCNT+1
"RTN","IBJPS8",24,0)
 . . S IBSTR=$$SETSTR^VALM1($J(IBCNT,4)_".","",2,6)
"RTN","IBJPS8",25,0)
 . . S IBSTR=$$SETSTR^VALM1($G(CPTDATA(81,CIENS,.01,"I")),IBSTR,10,10)
"RTN","IBJPS8",26,0)
 . . S IBSTR=$$SETSTR^VALM1($G(CPTDATA(81,CIENS,2,"I")),IBSTR,25,30)
"RTN","IBJPS8",27,0)
 . . S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS8",28,0)
 . . S @VALMAR@("ZIDX",IBCNT,+CIENS)=""
"RTN","IBJPS8",29,0)
 . . Q
"RTN","IBJPS8",30,0)
 ;
"RTN","IBJPS8",31,0)
 I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No CMN CPTs defined.","",13,40))
"RTN","IBJPS8",32,0)
 ;
"RTN","IBJPS8",33,0)
 S VALMCNT=IBLN,VALMBG=1
"RTN","IBJPS8",34,0)
 Q
"RTN","IBJPS8",35,0)
 ;
"RTN","IBJPS8",36,0)
HELP ; -- help code
"RTN","IBJPS8",37,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS8",38,0)
 Q
"RTN","IBJPS8",39,0)
 ;
"RTN","IBJPS8",40,0)
EXIT ; -- exit code
"RTN","IBJPS8",41,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBJPS8",42,0)
 Q
"RTN","IBJPS8",43,0)
 ;
"RTN","IBJPS8",44,0)
EXPND ; -- expand code
"RTN","IBJPS8",45,0)
 Q
"RTN","IBJPS8",46,0)
 ;
"RTN","IBJPS8",47,0)
RTADD(IBTCFLAG) ; -- Add a new CPT Codes
"RTN","IBJPS8",48,0)
 N X,Y,DIE,DIR,DIRUT,DR,DTOUT,DUOUT,ERRMSG,FDA,RETIEN
"RTN","IBJPS8",49,0)
 ;
"RTN","IBJPS8",50,0)
 S VALMBCK="R"
"RTN","IBJPS8",51,0)
 D FULL^VALM1
"RTN","IBJPS8",52,0)
 D RTADD1
"RTN","IBJPS8",53,0)
 D INIT
"RTN","IBJPS8",54,0)
 Q
"RTN","IBJPS8",55,0)
 ;
"RTN","IBJPS8",56,0)
RTADD1 ; Looping tag for Adding CPT Codes
"RTN","IBJPS8",57,0)
 K DA,DIE,DIR,DIRUT,DR,DTOUT,DUOUT,ERRMSG,FDA,RETIEN,X,Y
"RTN","IBJPS8",58,0)
 ;
"RTN","IBJPS8",59,0)
 S DIR(0)="350.916,.01"
"RTN","IBJPS8",60,0)
 S DIR("A")="CPT Code"
"RTN","IBJPS8",61,0)
 D ^DIR
"RTN","IBJPS8",62,0)
 Q:'+Y
"RTN","IBJPS8",63,0)
 ;
"RTN","IBJPS8",64,0)
 I $D(^IBE(350.9,1,16,"B",+Y)) D  G RTADD1
"RTN","IBJPS8",65,0)
 . D FULL^VALM1
"RTN","IBJPS8",66,0)
 . W @IOF
"RTN","IBJPS8",67,0)
 . W !,"This CPT Code already exists on the Inclusion list."
"RTN","IBJPS8",68,0)
 . W !,"Please enter another CPT Code."
"RTN","IBJPS8",69,0)
 . Q
"RTN","IBJPS8",70,0)
 ;
"RTN","IBJPS8",71,0)
 S FDA(350.916,"+1,1,",.01)=+Y
"RTN","IBJPS8",72,0)
 D UPDATE^DIE("","FDA","RETIEN","ERRMSG")
"RTN","IBJPS8",73,0)
 G RTADD1
"RTN","IBJPS8",74,0)
 ;
"RTN","IBJPS8",75,0)
RTDEL ; -- Delete a CPT Coode
"RTN","IBJPS8",76,0)
 N DR
"RTN","IBJPS8",77,0)
 D RTDEL1
"RTN","IBJPS8",78,0)
 S VALMBCK="R"
"RTN","IBJPS8",79,0)
 Q
"RTN","IBJPS8",80,0)
 ;
"RTN","IBJPS8",81,0)
RTDEL1 ; Looping tag for deleting CPT Codes
"RTN","IBJPS8",82,0)
 N Z,VALMY
"RTN","IBJPS8",83,0)
 D FULL^VALM1
"RTN","IBJPS8",84,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBJPS8",85,0)
 S Z=0
"RTN","IBJPS8",86,0)
 F  S Z=$O(VALMY(Z)) Q:'Z  D
"RTN","IBJPS8",87,0)
 . N DIK,IEN,RIEN
"RTN","IBJPS8",88,0)
 . S IEN=$O(@VALMAR@("ZIDX",Z,""))
"RTN","IBJPS8",89,0)
 . Q:IEN=""
"RTN","IBJPS8",90,0)
 . S RIEN=$O(^IBE(350.9,1,16,"B",IEN,""))
"RTN","IBJPS8",91,0)
 . I +RIEN S DIK="^IBE(350.9,1,16,",DA(1)=1,DA=RIEN D ^DIK
"RTN","IBJPS8",92,0)
 K @VALMAR
"RTN","IBJPS8",93,0)
 D INIT
"RTN","IBJPS8",94,0)
 Q
"RTN","IBJPS8",95,0)
 ;
"RTN","IBJPS8",96,0)
SET(IBLN,IBSTR) ; -- Add a line to display list
"RTN","IBJPS8",97,0)
 ; returns line number added
"RTN","IBJPS8",98,0)
 S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR,IBLN)
"RTN","IBJPS8",99,0)
 Q IBLN
"RTN","IBJPS8",100,0)
 ;
"RTN","IBJPS8",101,0)
CMNPRMT(IBXIEN,IBPROCP,CPTIEN) ;JRA Determine if procedure requires prompting for CMN Info
"RTN","IBJPS8",102,0)
 ;Basically checks if CPTIEN is in the "CMN CPT Code Inclusion" list
"RTN","IBJPS8",103,0)
 ;  Input: IBXIEN  = Internal bill/claim number
"RTN","IBJPS8",104,0)
 ;         IBPROCP = Procedure line subscript
"RTN","IBJPS8",105,0)
 ;         CPTIEN  = CPT code ien
"RTN","IBJPS8",106,0)
 ;
"RTN","IBJPS8",107,0)
 ;  Output: 1 = Prompt user for CMN info
"RTN","IBJPS8",108,0)
 ;          0 = Don't prompt user for CMN info
"RTN","IBJPS8",109,0)
 ;
"RTN","IBJPS8",110,0)
 I '$G(IBXIEN)!('$G(IBPROCP)!('$G(CPTIEN))) Q 0
"RTN","IBJPS8",111,0)
 ;Prompt if the CPT is in IB Site Parameters "CMN CPT Code Inclusion" list -OR- if "CMN Required?" already set to "YES"
"RTN","IBJPS8",112,0)
 I $D(^IBE(350.9,1,16,"B",CPTIEN))>1!($$CMNDATA^IBCEF31(IBXIEN,IBPROCP,23,"I")) Q 1
"RTN","IBJPS8",113,0)
 Q 0
"RTN","IBJPS8",114,0)
 ;
"RTN","IBTUBO")
0^13^B73456123^B47033794
"RTN","IBTUBO",1,0)
IBTUBO ;ALB/AAS - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;29-SEP-94
"RTN","IBTUBO",2,0)
 ;;2.0;INTEGRATED BILLING;**19,31,32,91,123,159,192,235,248,155,516,547,608**;21-MAR-94;Build 90
"RTN","IBTUBO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTUBO",4,0)
 ;
"RTN","IBTUBO",5,0)
 ;Associated ICRs
"RTN","IBTUBO",6,0)
 ;  ICR#
"RTN","IBTUBO",7,0)
 ;  4671 - Supports reference to file 409.1
"RTN","IBTUBO",8,0)
 ;   427 - Supports reference to file 8
"RTN","IBTUBO",9,0)
 ;
"RTN","IBTUBO",10,0)
% ; - Entry point for manual option.
"RTN","IBTUBO",11,0)
 N IBBDT,IBCOMP,IBDET,IBEDT,IBOPT,IBPRT,IBTIMON,IBQUIT,IBSEL,IBSBD
"RTN","IBTUBO",12,0)
 S (IBQUIT,IBSBD)=0 D:'$D(DT) DT^DICRW
"RTN","IBTUBO",13,0)
 W !!,"Re-Generate Unbilled Amounts Report",!
"RTN","IBTUBO",14,0)
 ;
"RTN","IBTUBO",15,0)
 ; - Ask to re-compile Unbilled Amounts data.
"RTN","IBTUBO",16,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IBTUBO",17,0)
 S DIR("A")="Do you want to store Unbilled Amounts figures"
"RTN","IBTUBO",18,0)
 S DIR("?",1)="Enter 'YES' if you wish to store the Unbilled Amounts summary"
"RTN","IBTUBO",19,0)
 S DIR("?",2)="figures in your system for a specific month/year in the past."
"RTN","IBTUBO",20,0)
 S DIR("?",3)="Once stored, these figures will be available for inquiry through"
"RTN","IBTUBO",21,0)
 S DIR("?",4)="the View Unbilled Amounts option [IBT VIEW UNBILLED AMOUNTS]."
"RTN","IBTUBO",22,0)
 S DIR("?",5)="These summary figures are normally calculated and stored"
"RTN","IBTUBO",23,0)
 S DIR("?",6)="automatically by the system at the beginning of each month for"
"RTN","IBTUBO",24,0)
 S DIR("?",7)="the previous month."
"RTN","IBTUBO",25,0)
 S DIR("?",8)=" "
"RTN","IBTUBO",26,0)
 S DIR("?",9)="If you enter 'NO', the Unbilled Amounts summary figures will"
"RTN","IBTUBO",27,0)
 S DIR("?",10)="NOT be stored in your system, and the report may be run for"
"RTN","IBTUBO",28,0)
 S DIR("?")="any date range."
"RTN","IBTUBO",29,0)
 D ^DIR K DIR G:$D(DIRUT) END S IBCOMP=Y
"RTN","IBTUBO",30,0)
 ;
"RTN","IBTUBO",31,0)
 ; IB*2.0*516 - Added ability to sort by Division
"RTN","IBTUBO",32,0)
 ;
"RTN","IBTUBO",33,0)
 K ^TMP($J,"IBTUB"),^TMP($J,"IBTUB-DIV")
"RTN","IBTUBO",34,0)
 I IBCOMP G RDATE
"RTN","IBTUBO",35,0)
 ;
"RTN","IBTUBO",36,0)
 ;IB*2.0*547/TAZ - Add prompt to search by division. If NO bypass all division selection.
"RTN","IBTUBO",37,0)
 S DIR(0)="Y",DIR("B")="NO" W !
"RTN","IBTUBO",38,0)
 S DIR("A")="Search by Division?"
"RTN","IBTUBO",39,0)
 S DIR("?",1)=" This opt allows you to search for all unbilled amounts"
"RTN","IBTUBO",40,0)
 S DIR("?",2)=" or to search for unbilled amounts in only one or more"
"RTN","IBTUBO",41,0)
 S DIR("?",3)=" divisions."
"RTN","IBTUBO",42,0)
 S DIR("?",4)=""
"RTN","IBTUBO",43,0)
 S DIR("?",5)="Choose from:"
"RTN","IBTUBO",44,0)
 S DIR("?",6)="      N  NO"
"RTN","IBTUBO",45,0)
 S DIR("?")="      Y  YES"
"RTN","IBTUBO",46,0)
 D ^DIR K DIR G:$D(DIRUT) END
"RTN","IBTUBO",47,0)
 S IBSBD=Y I 'IBSBD G DIVX
"RTN","IBTUBO",48,0)
 ;
"RTN","IBTUBO",49,0)
DIV ; division
"RTN","IBTUBO",50,0)
 W !!
"RTN","IBTUBO",51,0)
 S DIR(0)="SA^A:All Divisions;S:Selected Divisions"
"RTN","IBTUBO",52,0)
 S DIR("A")="Include All Divisions or Selected Divisions? "
"RTN","IBTUBO",53,0)
 S DIR("B")="All"
"RTN","IBTUBO",54,0)
 D ^DIR K DIR
"RTN","IBTUBO",55,0)
 I $D(DIROUT)!$D(DIRUT) Q  ;Timeout or User "^"
"RTN","IBTUBO",56,0)
 I Y="A" G DIVX
"RTN","IBTUBO",57,0)
 ;
"RTN","IBTUBO",58,0)
 W !
"RTN","IBTUBO",59,0)
 F  D  I IBQUIT S IBQUIT=IBQUIT-1 Q
"RTN","IBTUBO",60,0)
 . S DIC=40.8,DIC(0)="AEMQ",DIC("A")="   Select Division: "
"RTN","IBTUBO",61,0)
 . I $O(^TMP($J,"IBTUB-DIV","")) S DIC("A")="   Select Another Division: "
"RTN","IBTUBO",62,0)
 . D ^DIC K DIC                ; lookup
"RTN","IBTUBO",63,0)
 . I X="^^" S IBQUIT=2 Q       ; user entered ^^
"RTN","IBTUBO",64,0)
 . I +Y'>0 S IBQUIT=1 Q        ; user is done
"RTN","IBTUBO",65,0)
 . S ^TMP($J,"IBTUB-DIV",+Y)=$P(Y,U,2)
"RTN","IBTUBO",66,0)
 . Q
"RTN","IBTUBO",67,0)
 ;
"RTN","IBTUBO",68,0)
 I IBQUIT G END  ;User "^" out of the selection
"RTN","IBTUBO",69,0)
 ;
"RTN","IBTUBO",70,0)
 I '$O(^TMP($J,"IBTUB-DIV","")) D  G DIV
"RTN","IBTUBO",71,0)
 . W *7,!!?3,"No divisions have been selected.  Please try again."
"RTN","IBTUBO",72,0)
 . Q
"RTN","IBTUBO",73,0)
 ;
"RTN","IBTUBO",74,0)
DIVX ; Exit Division selection.
"RTN","IBTUBO",75,0)
 ;
"RTN","IBTUBO",76,0)
 ;JRA;IB*2.0*608 Ask to Search by MCCF, Non-MCCF or Both - Start
"RTN","IBTUBO",77,0)
 W !
"RTN","IBTUBO",78,0)
 S DIR(0)="SA^M:MCCF;N:Non-MCCF (Outpatient Only);B:Both"
"RTN","IBTUBO",79,0)
 S DIR("A")="Search by (M)CCF, (N)on-MCCF (Outpatient Only), or (B)oth? "
"RTN","IBTUBO",80,0)
 S DIR("B")="M"
"RTN","IBTUBO",81,0)
 S DIR("?",1)="Non-MCCF Eligibilities of Encounter are 'CHAMPVA', 'INELIGIBLE',"
"RTN","IBTUBO",82,0)
 S DIR("?",2)=" 'EMPLOYEE', 'TRICARE' and 'SHARING AGREEMENT'."
"RTN","IBTUBO",83,0)
 S DIR("?",3)="Non-MCCF Appointment Types are 'EMPLOYEE' and 'SHARING AGREEMENT'."
"RTN","IBTUBO",84,0)
 S DIR("?",4)="Non-MCCF Rate Types are 'CHAMPVA REIMB. INS.', 'CHAMPVA',"
"RTN","IBTUBO",85,0)
 S DIR("?",5)=" 'TRICARE REIMB. INS.', 'TRICARE', 'INELIGIBLE' and 'INTERAGENCY'."
"RTN","IBTUBO",86,0)
 S DIR("?")="All other Eligibilities/Types are MCCF."
"RTN","IBTUBO",87,0)
 D ^DIR K DIR G:($D(DIROUT)!($D(DIRUT))) END
"RTN","IBTUBO",88,0)
 S IBMCCF=Y
"RTN","IBTUBO",89,0)
 ;Set up arrays of Non-MCCF Rate Types, Non-MCCF Appointment Types and Non-MCCF Eligibility of Encounter entries.
"RTN","IBTUBO",90,0)
 N ARTIEN,ARTYP,ELIG,ELIGIEN,X
"RTN","IBTUBO",91,0)
 F ARTYP="INTERAGENCY","CHAMPVA REIMB. INS.","CHAMPVA","TRICARE REIMB. INS.","TRICARE","INELIGIBLE" D  ;Non-MCCF Rate Types
"RTN","IBTUBO",92,0)
 . S ARTIEN=$O(^DGCR(399.3,"B",ARTYP,"")) I +ARTIEN S IBMCCF("RTYP",ARTIEN)=""
"RTN","IBTUBO",93,0)
 F ARTYP="EMPLOYEE","SHARING AGREEMENT" D  ;Non-MCCF Appointment Types
"RTN","IBTUBO",94,0)
 . ;DBIA4671 for following FIND^DIC
"RTN","IBTUBO",95,0)
 . K ^TMP("DILIST",$J) D FIND^DIC(409.1,,"@;.01","X",ARTYP) I $D(^TMP("DILIST",$J,2))>1 D
"RTN","IBTUBO",96,0)
 . . S X=0 F  S X=$O(^TMP("DILIST",$J,2,X)) Q:'X  S ARTIEN=^TMP("DILIST",$J,2,X) S:+ARTIEN IBMCCF("ATYP",ARTIEN)=""
"RTN","IBTUBO",97,0)
 F ELIG="CHAMPVA","INELIGIBLE","EMPLOYEE","TRICARE","SHARING AGREEMENT" D  ;Non-MCCF "Eligibility of Encounter" Entries
"RTN","IBTUBO",98,0)
 . ;DBIA427 for following FIND^DIC
"RTN","IBTUBO",99,0)
 . K ^TMP("DILIST",$J) D FIND^DIC(8,,"@;.01","X",ELIG) I $D(^TMP("DILIST",$J,2))>1 D
"RTN","IBTUBO",100,0)
 . . S X=0 F  S X=$O(^TMP("DILIST",$J,2,X)) Q:'X  S ELIGIEN=^TMP("DILIST",$J,2,X) S:+ELIGIEN IBMCCF("ELIG",ELIGIEN)=""
"RTN","IBTUBO",101,0)
 ;JRA;IB*2.0*608 - End
"RTN","IBTUBO",102,0)
 ;
"RTN","IBTUBO",103,0)
 ; - Select date(s) to build report.
"RTN","IBTUBO",104,0)
 W ! D DT1^IBTUBOU G:IBBDT="^" END
"RTN","IBTUBO",105,0)
 ;
"RTN","IBTUBO",106,0)
 ; - Select report(s).
"RTN","IBTUBO",107,0)
 S IBPRT="Choose report type(s) to print:"
"RTN","IBTUBO",108,0)
 ;S IBOPT(1)="INPATIENT UNBILLED"  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO",109,0)
 ;S IBOPT(2)="OUTPATIENT UNBILLED"  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO",110,0)
 ;S IBOPT(3)="PRESCRIPTION UNBILLED"  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO",111,0)
 ;S IBOPT(4)="ALL OF THE ABOVE"  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO",112,0)
 I $G(IBMCCF)="N" S IBOPT(1)="OUTPATIENT UNBILLED"  ;JRA;IB*2.0*608
"RTN","IBTUBO",113,0)
 E  D  ;JRA;IB*2.0*608
"RTN","IBTUBO",114,0)
 . S IBOPT(1)="INPATIENT UNBILLED"
"RTN","IBTUBO",115,0)
 . S IBOPT(2)="OUTPATIENT UNBILLED"
"RTN","IBTUBO",116,0)
 . S IBOPT(3)="PRESCRIPTION UNBILLED"
"RTN","IBTUBO",117,0)
 . S IBOPT(4)="ALL OF THE ABOVE"
"RTN","IBTUBO",118,0)
 ;S IBSEL=$$MLTP^IBJD(IBPRT,.IBOPT,1) I 'IBSEL G END  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO",119,0)
 S IBSEL=$$MLTP^IBJD(IBPRT,.IBOPT,$S($G(IBMCCF)="N":"",1:1)) I 'IBSEL G END  ;JRA;IB*2.0*608
"RTN","IBTUBO",120,0)
 ;JRA;IB*2.0*608 For Non-MCCF set IBSEL="2," since the value of IBSEL drives the computations and '2' is for Outpatient.
"RTN","IBTUBO",121,0)
 ; Since "OUTPATIENT UNBILLED" is the only choice for Non-MCCF, IBSEL will be set to '1,' so need to reset to '2,'.
"RTN","IBTUBO",122,0)
 S:$G(IBMCCF)="N" IBSEL="2,"  ;JRA;IB*2.0*608
"RTN","IBTUBO",123,0)
 S $E(IBSEL,$L(IBSEL))=""
"RTN","IBTUBO",124,0)
 ;
"RTN","IBTUBO",125,0)
RDATE ; - Select re-compile date, if necessary.
"RTN","IBTUBO",126,0)
 I IBCOMP D  G END:IBTIMON="^",DET
"RTN","IBTUBO",127,0)
 . W ! D DT2("Unbilled Amounts") Q:IBTIMON="^"
"RTN","IBTUBO",128,0)
 . W !!,"NOTE: Just a reminder that by entering the above month/year this"
"RTN","IBTUBO",129,0)
 . W !,"      report will re-calculate and update the Unbilled Amounts"
"RTN","IBTUBO",130,0)
 . W !,"      data on file in your system.",*7
"RTN","IBTUBO",131,0)
 . ;
"RTN","IBTUBO",132,0)
 . ; - Initialize variables
"RTN","IBTUBO",133,0)
 . I IBTIMON<3030900 N X S X=$$M2^IBJDE(IBTIMON,11,11) D 
"RTN","IBTUBO",134,0)
 .. S IBBDT=+X,IBEDT=$P(X,U,2)+.9,IBSEL="1,2,3"
"RTN","IBTUBO",135,0)
 . I IBTIMON'<3030900 S IBBDT=$$M3^IBJDE($$LDATE^IBJDE(IBTIMON)+1),IBEDT=$$LDATE^IBJDE(IBTIMON)+.9,IBSEL="1,2,3"
"RTN","IBTUBO",136,0)
 . D MSG W !
"RTN","IBTUBO",137,0)
 ;
"RTN","IBTUBO",138,0)
 S IBTIMON=IBEDT\100*100
"RTN","IBTUBO",139,0)
 ;
"RTN","IBTUBO",140,0)
DET ; - Ask to print detail report.
"RTN","IBTUBO",141,0)
 S DIR(0)="Y",DIR("B")="NO" W !
"RTN","IBTUBO",142,0)
 S DIR("A")="Print detail report with the Unbilled Amounts summary"
"RTN","IBTUBO",143,0)
 S DIR("?",1)="Answer YES if you want a detailed listing of the patients"
"RTN","IBTUBO",144,0)
 S DIR("?",2)="and events that are unbilled. Answer NO if you just want"
"RTN","IBTUBO",145,0)
 S DIR("?")="the summary, or '^' to quit this option."
"RTN","IBTUBO",146,0)
 D ^DIR K DIR G:$D(DIRUT) END S IBDET=Y G:'IBDET QUE
"RTN","IBTUBO",147,0)
 ;
"RTN","IBTUBO",148,0)
 ; Ask to include REQUEST MRA Status
"RTN","IBTUBO",149,0)
 S DIR(0)="YA",DIR("A")="Do you want to include MRA claims?: ",DIR("B")="NO" W ! D ^DIR K DIR G:$D(DIRUT) END
"RTN","IBTUBO",150,0)
 S IBINMRA=+Y
"RTN","IBTUBO",151,0)
 ;
"RTN","IBTUBO",152,0)
 ;IB*2.0*547/TAZ - Add prompt to sort by Patient or Divsion if Division Search was selected.
"RTN","IBTUBO",153,0)
 I $G(IBSBD) D  G:$D(DIRUT) END
"RTN","IBTUBO",154,0)
 . S DIR("A")="Sort by: ",DIR("B")="Patient Name" W !
"RTN","IBTUBO",155,0)
 . S DIR(0)="SA^N:PATIENT NAME;D:DIVISION^S:X="""" X=""N"""
"RTN","IBTUBO",156,0)
 . S DIR("?",1)=" This determines whether the unbilled amounts are displayed"
"RTN","IBTUBO",157,0)
 . S DIR("?",2)=" in alphabetical order of patient name or in alphabetical "
"RTN","IBTUBO",158,0)
 . S DIR("?")=" order of patient name within a division."
"RTN","IBTUBO",159,0)
 . D ^DIR K DIR
"RTN","IBTUBO",160,0)
 . S IBSBD=Y="D" ;IBSBD=0 - Sort by Patient Name, IBSBD=1, Sort by Patient Name within Division.
"RTN","IBTUBO",161,0)
 ;
"RTN","IBTUBO",162,0)
 ; - Select device to print.
"RTN","IBTUBO",163,0)
 W !!,"This report takes a while to run, so you should queue it to run"
"RTN","IBTUBO",164,0)
 W !,"after normal business hours."
"RTN","IBTUBO",165,0)
 W !!,"You will need a 132 column printer for this report!",!
"RTN","IBTUBO",166,0)
 S %ZIS="QM" D ^%ZIS G END:POP,QUE:$D(IO("Q"))
"RTN","IBTUBO",167,0)
 ;
"RTN","IBTUBO",168,0)
 U IO G STR
"RTN","IBTUBO",169,0)
 ;
"RTN","IBTUBO",170,0)
QUE ; - Queue report/summary, if necessary.
"RTN","IBTUBO",171,0)
 W ! I 'IBDET S ZTIO=""
"RTN","IBTUBO",172,0)
 S ZTRTN="IBTUBOA",ZTSAVE("IB*")=""
"RTN","IBTUBO",173,0)
 S ZTDESC="IB - Unbilled Amounts Report"
"RTN","IBTUBO",174,0)
 D ^%ZTLOAD K IO("Q"),ZTSK
"RTN","IBTUBO",175,0)
 D HOME^%ZIS G END
"RTN","IBTUBO",176,0)
 ;
"RTN","IBTUBO",177,0)
AUTO ; - Entry point for scheduled option.
"RTN","IBTUBO",178,0)
 Q  ;;**NO LONGER USED**
"RTN","IBTUBO",179,0)
 ;
"RTN","IBTUBO",180,0)
DQ ; - Entry point for DM extract.
"RTN","IBTUBO",181,0)
 ; - If AUTO PRINT UNBILLED LIST=yes and default report printer then
"RTN","IBTUBO",182,0)
 ;   automatically requeue to device.
"RTN","IBTUBO",183,0)
 I $P(^IBE(350.9,1,6),U,24) D  G END:'$G(IBXTRACT)
"RTN","IBTUBO",184,0)
 . N X S X=$O(^IBE(353,"B","IB REPORTS",0))
"RTN","IBTUBO",185,0)
 . S ZTIO=$P($G(^IBE(353,+X,0)),U,2) Q:ZTIO=""
"RTN","IBTUBO",186,0)
 . S IBDET=1,IBXTRACT=0,ZTDTH=$H,ZTRTN="IBTUBOA",ZTSAVE("IB*")=""
"RTN","IBTUBO",187,0)
 . S ZTDESC="IB - Unbilled Amounts Report" D ^%ZTLOAD
"RTN","IBTUBO",188,0)
 . S IBDET=0,IBXTRACT=1
"RTN","IBTUBO",189,0)
 . K ZTDESC,ZTDTH,ZTRTN,ZTSAVE,ZTSK
"RTN","IBTUBO",190,0)
 ;
"RTN","IBTUBO",191,0)
STR D ^IBTUBOA ; Start report.
"RTN","IBTUBO",192,0)
 ;
"RTN","IBTUBO",193,0)
END K DIRUT,IBMCCF Q  ;JRA IB*2.0*608 Added IBMCCF
"RTN","IBTUBO",194,0)
 ;
"RTN","IBTUBO",195,0)
MSG ; - Compile message.
"RTN","IBTUBO",196,0)
 W !!,"NOTE: After this report is run, the Unbilled Amounts totals for"
"RTN","IBTUBO",197,0)
 W !?6,"the month of "_$$DAT2^IBOUTL(IBTIMON)_" will be updated."
"RTN","IBTUBO",198,0)
 Q
"RTN","IBTUBO",199,0)
 ;
"RTN","IBTUBO",200,0)
DT2(STR) ; - Select re-compile date (returns variable IBTIMON).
"RTN","IBTUBO",201,0)
 ; Input: STR - String that describe the type of data that will be 
"RTN","IBTUBO",202,0)
 ;        re-compiled: "Unbilled Amounts", "Average Bill Amounts", etc...
"RTN","IBTUBO",203,0)
 ;
"RTN","IBTUBO",204,0)
 ; This code is very the same code as is in DT2^IBTUBOU... that is
"RTN","IBTUBO",205,0)
 ; a utility routine, so code was copied and altered to accommodate
"RTN","IBTUBO",206,0)
 ; EOAM changes. 
"RTN","IBTUBO",207,0)
 N DIRUT,DT0,DT1,DT2,Y
"RTN","IBTUBO",208,0)
 ; - AUG 1993 is the first month on file with Unbilled Amounts data
"RTN","IBTUBO",209,0)
 S DT0=2930800,DT1=$$DAT2^IBOUTL(DT0)
"RTN","IBTUBO",210,0)
 I $E(DT,6,7)'>$E($$LDATE^IBJDE(DT),6,7) S DT2=DT
"RTN","IBTUBO",211,0)
 I $E(DT,6,7)>$E($$LDATE^IBJDE(DT),6,7) S DT2=DT+100 I $E(DT2,4,5)=13 S DT2=DT+8900
"RTN","IBTUBO",212,0)
 S DT2=$$M1^IBJDE(DT2,1),DIR("B")=$$DAT2^IBOUTL(DT2)
"RTN","IBTUBO",213,0)
 S DIR(0)="DA^"_$E(DT0,1,5)_"00:"_DT2_":AE^K:$E(Y,6,7)'=""00"" X"
"RTN","IBTUBO",214,0)
 S DIR("A")="Re-compile "_$G(STR)_" through MONTH/YEAR: "
"RTN","IBTUBO",215,0)
 S DIR("?",1)="Enter a past month/year (ex. Oct 2000).",DIR("?",2)=""
"RTN","IBTUBO",216,0)
 S DIR("?",3)="NOTE: The earliest month/year that can be entered is "_DT1_", and"
"RTN","IBTUBO",217,0)
 S DIR("?")="      it is NOT possible to enter the current or a future month/year."
"RTN","IBTUBO",218,0)
 D ^DIR K DIR I $D(DIRUT) S IBTIMON="^" G DT2Q
"RTN","IBTUBO",219,0)
 I $E(Y,6,7)'="00"!($E(Y,4,7)="0000") W "  ??" G DT2
"RTN","IBTUBO",220,0)
 S IBTIMON=Y
"RTN","IBTUBO",221,0)
 ;
"RTN","IBTUBO",222,0)
DT2Q Q
"RTN","IBTUBO3")
0^14^B45102914^B42226483
"RTN","IBTUBO3",1,0)
IBTUBO3 ;ALB/RB - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;03 Aug 2004  9:12 AM
"RTN","IBTUBO3",2,0)
 ;;2.0;INTEGRATED BILLING;**123,159,192,155,277,516,547,608**;21-MAR-94;Build 90
"RTN","IBTUBO3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTUBO3",4,0)
 ;
"RTN","IBTUBO3",5,0)
REPORT ; - Prepare report if requested, send summary bulletin.
"RTN","IBTUBO3",6,0)
 N IBDIV,IBN,IBPAG,IBQ,IBRUN,DFN,DTE,FL,PT,X0,X1
"RTN","IBTUBO3",7,0)
 S IBRUN=$$HTE^XLFDT($H,1)
"RTN","IBTUBO3",8,0)
 D BULL^IBTUBUL G:'IBDET REPRTQ
"RTN","IBTUBO3",9,0)
 ;
"RTN","IBTUBO3",10,0)
REPRT1 ;
"RTN","IBTUBO3",11,0)
 S (IBPAG,IBQ)=0
"RTN","IBTUBO3",12,0)
 ;I '$D(^TMP($J)) S X0="" D HDR,NIM D:'IBQ PAUSE G REPRTQ
"RTN","IBTUBO3",13,0)
 I '$O(^TMP($J,"IBTUB",0)) S X0="",IBDIV=999999 D HDR,NIM D:'IBQ PAUSE G REPRTQ
"RTN","IBTUBO3",14,0)
 I $G(IBSBD) D SUMPG
"RTN","IBTUBO3",15,0)
 S IBDIV=0
"RTN","IBTUBO3",16,0)
 I $D(^TMP($J,"IBTUB-DIV")) D  G REPRT1Q
"RTN","IBTUBO3",17,0)
 . F  S IBDIV=$O(^TMP($J,"IBTUB-DIV",IBDIV)) Q:'IBDIV  D REPRT2
"RTN","IBTUBO3",18,0)
 F  S IBDIV=$O(^TMP($J,"IBTUB",IBDIV)) Q:'IBDIV  D REPRT2
"RTN","IBTUBO3",19,0)
 ;
"RTN","IBTUBO3",20,0)
REPRT1Q ;
"RTN","IBTUBO3",21,0)
 D:'IBQ PAUSE
"RTN","IBTUBO3",22,0)
 ;
"RTN","IBTUBO3",23,0)
REPRTQ Q
"RTN","IBTUBO3",24,0)
 ;
"RTN","IBTUBO3",25,0)
SUMPG ;IB*2.0*547/TAZ - Summary page to show which Division has blank pages for selected reports.
"RTN","IBTUBO3",26,0)
 N IBND
"RTN","IBTUBO3",27,0)
 S IBDIV=0
"RTN","IBTUBO3",28,0)
 F  S IBDIV=$O(^DG(40.8,IBDIV)) Q:'IBDIV  D
"RTN","IBTUBO3",29,0)
 . I $D(^TMP($J,"IBTUB-DIV")),'$D(^TMP($J,"IBTUB-DIV",IBDIV)) Q  ;Not a selected division
"RTN","IBTUBO3",30,0)
 . F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
"RTN","IBTUBO3",31,0)
 .. S X1=$S(X0=2:"OPT",X0=3:"RX",1:"INPT")
"RTN","IBTUBO3",32,0)
 .. I '$D(^TMP($J,"IBTUB",IBDIV,X1)) S IBND(X0,IBDIV)=""
"RTN","IBTUBO3",33,0)
 I $D(IBND) D
"RTN","IBTUBO3",34,0)
 . S IBPAG=1 W !
"RTN","IBTUBO3",35,0)
 . W !,"Unbilled Amounts Report"
"RTN","IBTUBO3",36,0)
 . W ?60,"Run Date: ",IBRUN,?124,"Page ",$J(IBPAG,3)
"RTN","IBTUBO3",37,0)
 . W !,"No data for the following Divisions for the selected reports:"
"RTN","IBTUBO3",38,0)
 . F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
"RTN","IBTUBO3",39,0)
 .. W !,$S(X0=2:"Outpatient:",X0=3:"Prescriptions:",1:"Inpatient:")
"RTN","IBTUBO3",40,0)
 .. S IBDIV=0  W !
"RTN","IBTUBO3",41,0)
 .. F  S IBDIV=$O(IBND(X0,IBDIV)) Q:'IBDIV  D  Q:IBQ
"RTN","IBTUBO3",42,0)
 ... I $Y>(IOSL-6) D HDR Q:IBQ  W !,$S(X0=2:"Outpatient:",X0=3:"Prescriptions:",1:"Inpatient:")," Cont'd",!
"RTN","IBTUBO3",43,0)
 ... W $$GET1^DIQ(40.8,IBDIV_",",.01),!
"RTN","IBTUBO3",44,0)
 .. W !
"RTN","IBTUBO3",45,0)
 Q
"RTN","IBTUBO3",46,0)
 ;
"RTN","IBTUBO3",47,0)
REPRT2 ;Print Detail lines
"RTN","IBTUBO3",48,0)
 F X0=1,2,3 I IBSEL[X0 D  Q:IBQ
"RTN","IBTUBO3",49,0)
 . S X1=$S(X0=2:"OPT",X0=3:"RX",1:"INPT")
"RTN","IBTUBO3",50,0)
 . I IBSBD,'$D(^TMP($J,"IBTUB",IBDIV,X1)) Q  ;IB*2.0*547/TAZ Suppress blank pages for Sort by Division
"RTN","IBTUBO3",51,0)
 . D HDR Q:IBQ  I '$D(^TMP($J,"IBTUB",IBDIV,X1)) D NIM Q
"RTN","IBTUBO3",52,0)
 . S PT="" F  S PT=$O(^TMP($J,"IBTUB",IBDIV,X1,PT)) Q:PT=""  D  Q:IBQ
"RTN","IBTUBO3",53,0)
 .. S DFN=+$P(PT,"@@",2) Q:'DFN
"RTN","IBTUBO3",54,0)
 .. S (DTE,FL)="" F  S DTE=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE)) Q:DTE=""  D  Q:IBQ
"RTN","IBTUBO3",55,0)
 ... S IBX="" F  S IBX=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX)) Q:IBX=""  D  Q:IBQ
"RTN","IBTUBO3",56,0)
 .... S IBN=^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX) D LINE Q:IBQ  I X1["OPT" D CPTS Q:IBQ
"RTN","IBTUBO3",57,0)
 Q
"RTN","IBTUBO3",58,0)
 ;
"RTN","IBTUBO3",59,0)
HDR ; - Output header.
"RTN","IBTUBO3",60,0)
 N I,X,XTP,IBDIVHDR
"RTN","IBTUBO3",61,0)
 I $E(IOST,1,2)="C-",IBPAG D PAUSE G HDRQ:IBQ
"RTN","IBTUBO3",62,0)
 I '$G(IBPAG) W !
"RTN","IBTUBO3",63,0)
 I $E(IOST,1,2)="C-"!$G(IBPAG) W @IOF,*13
"RTN","IBTUBO3",64,0)
 S IBDIVHDR=""
"RTN","IBTUBO3",65,0)
 I IBDIV=999999 S IBDIVHDR=$S('IBSBD&$D(^TMP($J,"IBTUB-DIV")):"SELECTED",'$G(IBSBD):"ALL",1:"UNKNOWN")
"RTN","IBTUBO3",66,0)
 E  S IBDIVHDR=$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")"
"RTN","IBTUBO3",67,0)
 S IBPAG=$G(IBPAG)+1
"RTN","IBTUBO3",68,0)
 W !,"Unbilled Amounts Report"
"RTN","IBTUBO3",69,0)
 W ?60,"Run Date: ",IBRUN,?124,"Page ",$J(IBPAG,3)
"RTN","IBTUBO3",70,0)
 S XTP=$S(X0=1:"INPATIENT",X0=2:"OUTPATIENT",X0=3:"PRESCRIPTIONS",1:"")
"RTN","IBTUBO3",71,0)
 I X0'=3 S XTP=XTP_" EPISODES"
"RTN","IBTUBO3",72,0)
 ;S X="ALL "_XTP_" FROM "  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBO3",73,0)
 S X=$S(($G(IBMCCF)="M"&(X0=2)):"MCCF CLAIMS - ",($G(IBMCCF)="N"&(X0=2)):"NON-MCCF CLAIMS - ",($G(IBMCCF)="B"&(X0=2)):"MCCF & NON-MCCF CLAIMS - ",1:"")  ;JRA;IB*2.0*608
"RTN","IBTUBO3",74,0)
 S X=X_"ALL "_XTP_" FROM "  ;JRA;IB*2.0*608
"RTN","IBTUBO3",75,0)
 S X=X_$$DTE(IBBDT)_" TO "_$$DTE(IBEDT\1)_" FOR DIVISION: "_IBDIVHDR
"RTN","IBTUBO3",76,0)
 I $G(IBCOMP) S X=X_" / DATA RECOMPILED/STORED FOR "_$$DAT2^IBOUTL(IBTIMON)
"RTN","IBTUBO3",77,0)
 S X=X_" / '*' AFTER THE PATIENT NAME = USUALLY BILLED MEANS TEST COPAYMENT"
"RTN","IBTUBO3",78,0)
 I X0=1 S X=X_" / 'H' AFTER THE ADMISSION DATE = PATIENT CURRENTLY HOSPITALIZED"
"RTN","IBTUBO3",79,0)
 I X0=3 S X=X_" / '$' AFTER THE ORIGINAL FILL DATE = ORIGINAL FILL DATE HAS BEEN BILLED"
"RTN","IBTUBO3",80,0)
 S X=X_" / 'CF' COLUMN = NUMBER OF CLAIMS ON FILE FOR THE EPISODE"
"RTN","IBTUBO3",81,0)
 I X0'=3 D
"RTN","IBTUBO3",82,0)
 . S X=X_" / 'I/P' COLUMN = 'I' - INSTITUTIONAL CLAIM MISSING,"  ;JRA IB*2.0*608 Fix misspelling 'INSTUTIONAL' => 'INSTITUTIONAL'
"RTN","IBTUBO3",83,0)
 . S X=X_" 'P' - PROFESSIONAL CLAIM MISSING"
"RTN","IBTUBO3",84,0)
 . Q
"RTN","IBTUBO3",85,0)
 F I=1:1 W !,$E(X,1,132) S X=$E(X,133,999) Q:X=""
"RTN","IBTUBO3",86,0)
 ;
"RTN","IBTUBO3",87,0)
 I 'X0 W !,$TR($J(" ",IOM)," ","-"),! G HDRQ
"RTN","IBTUBO3",88,0)
 W !!?29,"Last Prim.  Claims" W:X0=3 ?52,"Fill",?123,"Original"
"RTN","IBTUBO3",89,0)
 W !,"Name",?29,"4SSN Elig.  Track.ID#"
"RTN","IBTUBO3",90,0)
 I X0=1 W ?52,"Admission CF Insurance Carrier(s)",?98,"I/P",?102,"MRA"
"RTN","IBTUBO3",91,0)
 I X0=2 W ?52,"Care Dt.  CF Insurance Carrier(s)",?98,"I/P",?102,"MRA",?106,"CPT     I. Rate   P. Rate"
"RTN","IBTUBO3",92,0)
 I X0=3 W ?52,"Date     CF Ins. Carrier(s)     MRA Drug Name        Physician",?123,"Fill Dt."
"RTN","IBTUBO3",93,0)
 W !,$TR($J(" ",IOM)," ","-"),!
"RTN","IBTUBO3",94,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD D
"RTN","IBTUBO3",95,0)
 . W !!,"...Task stoped at user request"
"RTN","IBTUBO3",96,0)
 . S (IBQ,ZTSTOP)=1
"RTN","IBTUBO3",97,0)
 . Q
"RTN","IBTUBO3",98,0)
 ;
"RTN","IBTUBO3",99,0)
HDRQ Q
"RTN","IBTUBO3",100,0)
 ;
"RTN","IBTUBO3",101,0)
CPTS ; - Outpatient Only (CPTs and Rates)
"RTN","IBTUBO3",102,0)
 N CPT,IBN1
"RTN","IBTUBO3",103,0)
 I $O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,""))="" W ?98,"I",?103,$S('$G(IBINMRA):"",$G(^TMP($J,X1_"_MRA",PT,DTE,IBX)):"M",1:"") W ! Q
"RTN","IBTUBO3",104,0)
 S CPT="" F  S CPT=$O(^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,CPT)) Q:CPT=""  D  Q:IBQ
"RTN","IBTUBO3",105,0)
 . S IBN1=^TMP($J,"IBTUB",IBDIV,X1,PT,DTE,IBX,CPT)
"RTN","IBTUBO3",106,0)
 . I $Y>(IOSL-5) D HDR Q:IBQ  S FL=0 D LINE
"RTN","IBTUBO3",107,0)
 . W ?98,$P(IBN1,U,3),?103,$S('$G(IBINMRA):"",$G(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX)):"M",1:""),?106,CPT,?113,$J(+IBN1,8,2)
"RTN","IBTUBO3",108,0)
 . W ?124,$J($P(IBN1,U,2),8,2),!
"RTN","IBTUBO3",109,0)
 Q
"RTN","IBTUBO3",110,0)
 ;
"RTN","IBTUBO3",111,0)
LINE ; - Print detail line.
"RTN","IBTUBO3",112,0)
 I $Y>(IOSL-6) D HDR G:IBQ LINQ S FL=0
"RTN","IBTUBO3",113,0)
 I 'FL D
"RTN","IBTUBO3",114,0)
 . W $E($P(PT,"@@"),1,26) I $$BIL^DGMTUB(DFN,+DTE) W " *"
"RTN","IBTUBO3",115,0)
 . W ?29,$$SSN(DFN),?34,$E($$ELIG(DFN),1,5) S FL=1
"RTN","IBTUBO3",116,0)
 ;
"RTN","IBTUBO3",117,0)
 W ?39,$J(IBX,11)
"RTN","IBTUBO3",118,0)
 ; - Inpatient and Outpatient Only
"RTN","IBTUBO3",119,0)
 I X1'["RX" D
"RTN","IBTUBO3",120,0)
 . W ?52,$$DTE(+DTE) W:X1["INPT" $S($P(IBN,U,5):"H",1:"")
"RTN","IBTUBO3",121,0)
 . W ?62,$J($P(IBN,U),2),?65,$$INS(DFN,+DTE,34)
"RTN","IBTUBO3",122,0)
 . I X1["INPT" D
"RTN","IBTUBO3",123,0)
 .. I $P(IBN,U,2)'="" W ?98,$E($P(IBN,U,2),1,3),!
"RTN","IBTUBO3",124,0)
 .. I '$G(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX))!'$G(IBINMRA) W:$P(IBN,U,2)="" ! Q
"RTN","IBTUBO3",125,0)
 .. W ?98,$E($P(^TMP($J,"IBTUB",IBDIV,X1_"_MRA",PT,DTE,IBX),U,2),1,3),?103,"M",!
"RTN","IBTUBO3",126,0)
 ;
"RTN","IBTUBO3",127,0)
 ; - Pharmacy Only
"RTN","IBTUBO3",128,0)
 I X1["RX" D  G LINQ
"RTN","IBTUBO3",129,0)
 . W ?52,$$DTE(+DTE),?61,$J($P(IBN,U),2),?64,$$INS(DFN,+DTE,19),?85,$S('$G(IBINMRA):"",$G(^TMP($J,X1_"_MRA",PT,DTE,IBX)):"M",1:"")
"RTN","IBTUBO3",130,0)
 . W ?88,$E($P(IBN,U,6),1,15),?105,$E($P(IBN,U,2),1,14)
"RTN","IBTUBO3",131,0)
 . W ?123,$$DTE($P(IBN,U,3)) W:$P(IBN,"^",5) "$" W !
"RTN","IBTUBO3",132,0)
 ;
"RTN","IBTUBO3",133,0)
LINQ Q
"RTN","IBTUBO3",134,0)
 ;
"RTN","IBTUBO3",135,0)
SSN(DFN) ; - Return last 4 of patient's SSN.
"RTN","IBTUBO3",136,0)
 N SSN,VADM
"RTN","IBTUBO3",137,0)
 D DEM^VADPT S SSN=$P(VADM(2),"^"),SSN=$E(SSN,6,9) D KVA^VADPT
"RTN","IBTUBO3",138,0)
 Q SSN
"RTN","IBTUBO3",139,0)
 ;
"RTN","IBTUBO3",140,0)
ELIG(DFN) ; - Return patient's primary eligibility (1st 10 characters).
"RTN","IBTUBO3",141,0)
 N ELIG,VAEL
"RTN","IBTUBO3",142,0)
 D ELIG^VADPT S ELIG=$E($P(VAEL(1),"^",2),1,10) D KVAR^VADPT
"RTN","IBTUBO3",143,0)
 Q ELIG
"RTN","IBTUBO3",144,0)
 ;
"RTN","IBTUBO3",145,0)
DTE(D) ; - Format date (MM/DD/YY or MM/YY).
"RTN","IBTUBO3",146,0)
 Q $S('$G(D):"",1:$E(D,4,5)_"/"_$S($E(D,6,7)'="00":$E(D,6,7)_"/",1:"")_$E(D,2,3))
"RTN","IBTUBO3",147,0)
 ;
"RTN","IBTUBO3",148,0)
INS(P,D,C) ; - Return patient's insurance carrier(s).
"RTN","IBTUBO3",149,0)
 ;   Input: P=patient IEN, D=event date, C=Size of the Ins.Carrier column
"RTN","IBTUBO3",150,0)
 ;  Output: List of Providers
"RTN","IBTUBO3",151,0)
 ;
"RTN","IBTUBO3",152,0)
 I '$G(P)!('$G(D)) Q ""
"RTN","IBTUBO3",153,0)
 ;
"RTN","IBTUBO3",154,0)
 N INSC,INSL,INSN,LST,TMP,X
"RTN","IBTUBO3",155,0)
 ;
"RTN","IBTUBO3",156,0)
 S INSL="" D ALL^IBCNS1(P,"LST",1,D)
"RTN","IBTUBO3",157,0)
 S X=0 F  S X=$O(LST(X)) Q:'X  D
"RTN","IBTUBO3",158,0)
 . S INSC=+$G(LST(X,0)) Q:$D(TMP(INSC))!'INSC
"RTN","IBTUBO3",159,0)
 . S INSN=$P($G(^DIC(36,INSC,0)),U)
"RTN","IBTUBO3",160,0)
 . I $G(LST(0))>1 S INSN=$E(INSN,1,C\2)
"RTN","IBTUBO3",161,0)
 . S INSL=INSL_","_INSN
"RTN","IBTUBO3",162,0)
 . S TMP(INSC)=""
"RTN","IBTUBO3",163,0)
 ;
"RTN","IBTUBO3",164,0)
 S $E(INSL)=""
"RTN","IBTUBO3",165,0)
 I $L(INSL,",")>1,$L(INSL)>C D
"RTN","IBTUBO3",166,0)
 . S INSL=$E(INSL,1,C-3),$P(INSL,",",$L(INSL,","))="..."
"RTN","IBTUBO3",167,0)
 S INSL=$E(INSL,1,C)
"RTN","IBTUBO3",168,0)
 ;
"RTN","IBTUBO3",169,0)
 Q INSL
"RTN","IBTUBO3",170,0)
 ;
"RTN","IBTUBO3",171,0)
NIM ; - Print 'no info' message.
"RTN","IBTUBO3",172,0)
 W !?3,"No information available for the period specified."
"RTN","IBTUBO3",173,0)
 Q
"RTN","IBTUBO3",174,0)
 ;
"RTN","IBTUBO3",175,0)
PAUSE ; - Page break.
"RTN","IBTUBO3",176,0)
 I $E(IOST,1,2)'="C-" Q
"RTN","IBTUBO3",177,0)
 I IOSL>24 Q  ;User is creating a continuous document to a log file.
"RTN","IBTUBO3",178,0)
 N IBI,DIR,DIRUT,DUOUT,DTOUT,DIROUT,X,Y
"RTN","IBTUBO3",179,0)
 F IBI=$Y:1:(IOSL-3) W !
"RTN","IBTUBO3",180,0)
 S DIR(0)="E" D ^DIR S:$D(DIRUT)!($D(DUOUT)) IBQ=1
"RTN","IBTUBO3",181,0)
 Q
"RTN","IBTUBOA")
0^15^B56520031^B37900623
"RTN","IBTUBOA",1,0)
IBTUBOA ;ALB/RB - UNBILLED AMOUNTS - GENERATE UNBILLED REPORTS ;01-JAN-01
"RTN","IBTUBOA",2,0)
 ;;2.0;INTEGRATED BILLING;**19,31,32,91,123,159,192,155,276,516,608**;21-MAR-94;Build 90
"RTN","IBTUBOA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTUBOA",4,0)
 ;
"RTN","IBTUBOA",5,0)
% ; - Entry point from Taskman.
"RTN","IBTUBOA",6,0)
 ;
"RTN","IBTUBOA",7,0)
 ; IB*2.0*516 - Added ability to sort by Division, so added IBDIV as a
"RTN","IBTUBOA",8,0)
 ; subscript to most of the IBUNB entries.
"RTN","IBTUBOA",9,0)
 ;
"RTN","IBTUBOA",10,0)
 ;ARRAY VARIABLES:
"RTN","IBTUBOA",11,0)
 ;   IBAVG("BILLS-I")=number of inpatient institutional claims
"RTN","IBTUBOA",12,0)
 ;   IBAVG("BILLS-P")=number of inpatient professional claims
"RTN","IBTUBOA",13,0)
 ;   IBAVG("EPISD-I")=number of inpt. episodes for institutional claims
"RTN","IBTUBOA",14,0)
 ;   IBAVG("EPISD-P")=number of inpt. episodes for professional claims
"RTN","IBTUBOA",15,0)
 ;   IBAVG("$AMNT-I")=inpatient institutional amount billed
"RTN","IBTUBOA",16,0)
 ;   IBAVG("$AMNT-P")=inpatient professional amount billed
"RTN","IBTUBOA",17,0)
 ;
"RTN","IBTUBOA",18,0)
 ;   IBUNB("UNBILTL")=total unbilled amount
"RTN","IBTUBOA",19,0)
 ;   IBUNB("UNBILTL-MRA")=total MRA req amount
"RTN","IBTUBOA",20,0)
 ;
"RTN","IBTUBOA",21,0)
 ;   IBUNB(IBDIV,"ENCNTRS")=number of outpatient encounters missing claims
"RTN","IBTUBOA",22,0)
 ;   IBUNB(IBDIV,"EPISM-I")=number of inpatient episodes missing inst. claims
"RTN","IBTUBOA",23,0)
 ;   IBUNB(IBDIV,"EPISM-I-MRA")=number of MRA req inpat institutional claims
"RTN","IBTUBOA",24,0)
 ;   IBUNB(IBDIV,"EPISM-P")=number of inpatient episodes missing prof. claims
"RTN","IBTUBOA",25,0)
 ;   IBUNB(IBDIV,"EPISM-P-MRA")=number of MRA req inpat professional claims
"RTN","IBTUBOA",26,0)
 ;   IBUNB(IBDIV,"EPISM-A")=number of inpatient admissions missing claims
"RTN","IBTUBOA",27,0)
 ;                   (any type: Prof,Inst or both)
"RTN","IBTUBOA",28,0)
 ;   IBUNB(IBDIV,"EPISM-A-MRA")=number inpt MRA req admissions missing claims
"RTN","IBTUBOA",29,0)
 ;                   (any type: Prof,Inst or both)
"RTN","IBTUBOA",30,0)
 ;   IBUNB(IBDIV,"CPTMS-I")=number of CPT codes missing institutional claims
"RTN","IBTUBOA",31,0)
 ;   IBUNB(IBDIV,"CPTMS-I-MRA")=number of MRA req CPT codes missing inst claims
"RTN","IBTUBOA",32,0)
 ;   IBUNB(IBDIV,"CPTMS-P")=number of CPT codes missing professional claims
"RTN","IBTUBOA",33,0)
 ;   IBUNB(IBDIV,"CPTMS-P-MRA")=number of MRA req CPT codes missing prof claims
"RTN","IBTUBOA",34,0)
 ;   IBUNB(IBDIV,"PRESCRP")=number of unbilled prescriptions
"RTN","IBTUBOA",35,0)
 ;   IBUNB(IBDIV,"PRESCRP-MRA")=number of MRA req prescriptions
"RTN","IBTUBOA",36,0)
 ;   IBUNB(IBDIV,"UNBILIP")=unbilled inpatient amount
"RTN","IBTUBOA",37,0)
 ;   IBUNB(IBDIV,"UNBILIP-MRA")=MRA req inpatient amount
"RTN","IBTUBOA",38,0)
 ;   IBUNB(IBDIV,"UNBILOP")=unbilled outpatient amount
"RTN","IBTUBOA",39,0)
 ;   IBUNB(IBDIV,"UNBILOP-MRA")=MRA req outpatient amount
"RTN","IBTUBOA",40,0)
 ;   IBUNB(IBDIV,"UNBILRX")=unbilled prescription amount
"RTN","IBTUBOA",41,0)
 ;   IBUNB(IBDIV,"UNBILRX-MRA")=MRA req prescription amount
"RTN","IBTUBOA",42,0)
 ; 
"RTN","IBTUBOA",43,0)
 ;ARRAY VARIABLES FOR DM EXTRACT:
"RTN","IBTUBOA",44,0)
 ;   IB(1)=Number of inpatient episodes missing institutional claims
"RTN","IBTUBOA",45,0)
 ;   IB(2)=Amount of inpatient episodes missing institutional claims
"RTN","IBTUBOA",46,0)
 ;   IB(3)=Number of inpatient episodes missing professional claims
"RTN","IBTUBOA",47,0)
 ;   IB(4)=Amount of inpatient episodes missing professional claims
"RTN","IBTUBOA",48,0)
 ;   IB(5)=Number of all inpatient episodes missing claims
"RTN","IBTUBOA",49,0)
 ;   IB(6)=Amount of all inpatient episodes missing claims
"RTN","IBTUBOA",50,0)
 ;   IB(7)=Number of unbilled outpatient encounters prior to 9/1/99
"RTN","IBTUBOA",51,0)
 ;   IB(8)=Amount of unbilled outpatient encounters prior to 9/1/99
"RTN","IBTUBOA",52,0)
 ;   IB(9)=Number of procedures without an institutional charge
"RTN","IBTUBOA",53,0)
 ;   IB(10)=Amount of procedures without an institutional charge
"RTN","IBTUBOA",54,0)
 ;   IB(11)=Number of procedures without a professional charge
"RTN","IBTUBOA",55,0)
 ;   IB(12)=Amount of procedures without a professional charge
"RTN","IBTUBOA",56,0)
 ;   IB(13)=Number of all procedures without a charge
"RTN","IBTUBOA",57,0)
 ;   IB(14)=Number of encounters associated with all procedures without
"RTN","IBTUBOA",58,0)
 ;          a charge
"RTN","IBTUBOA",59,0)
 ;   IB(15)=Number of all encounters missing claims
"RTN","IBTUBOA",60,0)
 ;   IB(16)=Amount of all encounters missing claims
"RTN","IBTUBOA",61,0)
 ;   IB(17)=Number of unbilled prescriptions and refills
"RTN","IBTUBOA",62,0)
 ;   IB(18)=Amount of unbilled prescriptions and refills
"RTN","IBTUBOA",63,0)
 ;   IB(19)=Amount of all unbilled episodes of care
"RTN","IBTUBOA",64,0)
 ;
"RTN","IBTUBOA",65,0)
 N IB,IBAMTI,IBAMTP,IBIAV,IBIA,IBNODE,IBOE,IBPA,IBQUERY,IBRX,IBSAV,IBT
"RTN","IBTUBOA",66,0)
 N IBAMTIM,IBAMTPM,IBTYP,IBX,IBY,DFN,DGPM,I,J
"RTN","IBTUBOA",67,0)
 ;
"RTN","IBTUBOA",68,0)
 K ^TMP($J,"IBTUB-INPT"),^TMP($J,"IBTUB-OPT"),^TMP($J,"IBTUB-RX")
"RTN","IBTUBOA",69,0)
 K ^TMP($J,"IBTUB-INPT_MRA"),^TMP($J,"IBTUB-OPT_MRA"),^TMP($J,"IBTUB-RX_MRA")
"RTN","IBTUBOA",70,0)
 ;
"RTN","IBTUBOA",71,0)
 ; - Initialize DM extract variables, if necessary.
"RTN","IBTUBOA",72,0)
 I $G(IBXTRACT) D E^IBJDE(37,1) F IBX=1:1:19 S IB(IBX)=0
"RTN","IBTUBOA",73,0)
 ;
"RTN","IBTUBOA",74,0)
 ; - Initialize Unbilled Amounts variables.
"RTN","IBTUBOA",75,0)
 S (IBUNB("ENCNTRS"),IBUNB("PRESCRP"),IBUNB("PRESCRP-MRA"))=0
"RTN","IBTUBOA",76,0)
 F IBX="IP","OP","RX","TL" S IBUNB("UNBIL"_IBX)=0,IBUNB("UNBIL"_IBX_"-MRA")=0
"RTN","IBTUBOA",77,0)
 F IBX="I","P" S (IBUNB("EPISM-"_IBX),IBUNB("EPISM-"_IBX_"-MRA"),IBUNB("CPTMS-"_IBX),IBUNB("CPTMS-"_IBX_"-MRA"))=0
"RTN","IBTUBOA",78,0)
 S (IBUNB("EPISM-A"),IBUNB("EPISM-A-MRA"))=0
"RTN","IBTUBOA",79,0)
 ;
"RTN","IBTUBOA",80,0)
 ; - Retrieve the Rate Type code for Reimbursable Insurance
"RTN","IBTUBOA",81,0)
 S IBRT=$S($O(^DGCR(399.3,"B","REIMBURSABLE INS.",0)):$O(^(0)),1:8)
"RTN","IBTUBOA",82,0)
 ;
"RTN","IBTUBOA",83,0)
 ; - If Compile/Store - Checks if the Average Bill Amounts exists for
"RTN","IBTUBOA",84,0)
 ;   IBTIMON. If it does not, calls IBTUBAV to calculate/updated it.
"RTN","IBTUBOA",85,0)
 I $G(IBCOMP) D
"RTN","IBTUBOA",86,0)
 . I $P($G(^IBE(356.19,IBTIMON,1)),"^",14)'="" Q
"RTN","IBTUBOA",87,0)
 . ;
"RTN","IBTUBOA",88,0)
 . ; - DQ^IBTUBAV will kill the variables IBTIMON and IBCOMP - That's why
"RTN","IBTUBOA",89,0)
 . ;   they are being set again after this call.
"RTN","IBTUBOA",90,0)
 . S IBSAV=IBTIMON D DQ^IBTUBAV S IBTIMON=IBSAV,IBCOMP=1
"RTN","IBTUBOA",91,0)
 . Q
"RTN","IBTUBOA",92,0)
 ;
"RTN","IBTUBOA",93,0)
PROC ; - Loops through all the entries in the Claims Tracking file for the
"RTN","IBTUBOA",94,0)
 ;   period selected and calculate the Unbilled Amounts
"RTN","IBTUBOA",95,0)
 N NVELIG  ;JRA;IB*2.0*608 Flag set to 1 if patient has non-veteran eligibility
"RTN","IBTUBOA",96,0)
 S IBDT=IBBDT-.1
"RTN","IBTUBOA",97,0)
 ;
"RTN","IBTUBOA",98,0)
 F  S IBDT=$O(^IBT(356,"D",IBDT)) Q:'IBDT!(IBDT>IBEDT)  D
"RTN","IBTUBOA",99,0)
 . S IBX=0 F  S IBX=$O(^IBT(356,"D",IBDT,IBX)) Q:'IBX  D
"RTN","IBTUBOA",100,0)
 . . S IBNODE=$G(^IBT(356,IBX,0)) Q:IBNODE=""
"RTN","IBTUBOA",101,0)
 . . I $P(IBNODE,U,12) Q  ; Tort-Feasor,Workman's Comp,No-fault Auto Acc.
"RTN","IBTUBOA",102,0)
 . . I $P(IBNODE,U,19) Q  ;  Reason not billable assigned.
"RTN","IBTUBOA",103,0)
 . . I '$P(IBNODE,U,20) Q  ; Inactive.
"RTN","IBTUBOA",104,0)
 . . S DFN=+$P(IBNODE,U,2)
"RTN","IBTUBOA",105,0)
 . . ;Non-veteran eligibility includes CHAMPVA & TRICARE which is non-MCCF so do not screen out
"RTN","IBTUBOA",106,0)
 . . ;I '$$PTCHK^IBTUBOU(DFN,IBNODE) Q  ; Has a non-veteran eligibility.  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBOA",107,0)
 . . S NVELIG='$$PTCHK^IBTUBOU(DFN,IBNODE)  ;JRA;IB*2.0*608
"RTN","IBTUBOA",108,0)
 . . I '$$INSURED^IBCNS1(DFN,IBDT) Q  ;  Not insured during care.
"RTN","IBTUBOA",109,0)
 . . ;JRA;IB*2.0*608 No Inpatient for Non-MCCF
"RTN","IBTUBOA",110,0)
 . . ;I $P(IBNODE,U,5),IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D  Q  ;Inpatient  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBOA",111,0)
 . . I 'NVELIG,$G(IBMCCF)'="N",$P(IBNODE,U,5),IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D  Q  ;Inpatient  ;JRA;IB*2.0*608
"RTN","IBTUBOA",112,0)
 . . . S DGPM=+$P(IBNODE,U,5) D INPT^IBTUBO2(DGPM)
"RTN","IBTUBOA",113,0)
 . . I $P(IBNODE,U,4),IBSEL[2,$$COV^IBTUBOU(DFN,IBDT,2) D  Q  ;Outpatient
"RTN","IBTUBOA",114,0)
 . . . S IBOE=+$P(IBNODE,U,4) I $$NCCL^IBTUBOU(IBOE) Q  ; Non-Count Clinic
"RTN","IBTUBOA",115,0)
 . . . ;JRA;IB*2.0*608 Check if Eligibility of Encounter, Appointment Type & Rate Type meet MCCF/Non-MCCF Criteria
"RTN","IBTUBOA",116,0)
 . . . I $G(IBMCCF)]"",(IBMCCF'="B") N OK S OK=1 D  Q:'OK  ;JRA;IB*2.0*608
"RTN","IBTUBOA",117,0)
 . . . . N CLAIM S CLAIM=+$P(IBNODE,U,11)
"RTN","IBTUBOA",118,0)
 . . . . ;If looking only for MCCF and there is a non-veteran eligibility, this entry is Non-MCCF so don't process
"RTN","IBTUBOA",119,0)
 . . . . I IBMCCF="M",'$$PTCHK^IBTUBOU(DFN,IBNODE) S OK=0 Q  ;Copied condition from above & modified
"RTN","IBTUBOA",120,0)
 . . . . I IBOE S OK=$$MCCFCKX^IBTUBOU(409.68,IBOE,.13,"ELIG")  ;Check Eligibilty of Encounter
"RTN","IBTUBOA",121,0)
 . . . . I IBOE,((OK'=1&(IBMCCF="N"))!(IBMCCF="M"&(OK))) S OK=$$MCCFCKX^IBTUBOU(409.68,IBOE,.1,"ATYP")  ;Check Appointment Type
"RTN","IBTUBOA",122,0)
 . . . . I CLAIM,((OK'=1&(IBMCCF="N"))!(IBMCCF="M"&(OK))) S OK=$$MCCFCKX^IBTUBOU(399,CLAIM,.07,"RTYP")  ;Check Rate Type
"RTN","IBTUBOA",123,0)
 . . . D OPT^IBTUBO1(IBOE,.IBQUERY)
"RTN","IBTUBOA",124,0)
 . . Q:($G(IBMCCF)="N"!(NVELIG))  ;JRA;IB*2.0*608 Quit if Non-MCCF since only want Outpatient or quit if patient has non-veteran eligibility
"RTN","IBTUBOA",125,0)
 . . I $P(IBNODE,U,8),IBSEL[3,$$COV^IBTUBOU(DFN,IBDT,3) D  Q  ;Prescription
"RTN","IBTUBOA",126,0)
 . . . N IBIFN,IBCSTAT S IBIFN=+$P(IBNODE,U,11)
"RTN","IBTUBOA",127,0)
 . . . I IBIFN S IBCSTAT=$$GET1^DIQ(399,IBIFN_",",.13,"I") Q:$S(IBCSTAT=0:1,IBCSTAT=1:0,IBCSTAT=2:1,IBCSTAT=3:1,IBCSTAT=4:1,IBCSTAT=5:1,IBCSTAT=7:0,1:1)  ;already billed (modified in T9)
"RTN","IBTUBOA",128,0)
 . . . S IBRX=+$P(IBNODE,U,8) D RX^IBTUBO2(IBRX)
"RTN","IBTUBOA",129,0)
 . . ;
"RTN","IBTUBOA",130,0)
 . . ; - Check CT entry event type to get unbilled amounts, if necessary.
"RTN","IBTUBOA",131,0)
 . . S IBTYP=$P($G(^IBE(356.6,+$P(IBNODE,U,18),0)),U,8)
"RTN","IBTUBOA",132,0)
 . . I IBTYP=1,IBSEL[1,$$COV^IBTUBOU(DFN,IBDT,1) D
"RTN","IBTUBOA",133,0)
 . . . D INPT^IBTUBO2(+$O(^DGPM("APTT1",DFN,IBDT,0)))
"RTN","IBTUBOA",134,0)
 . . I IBTYP=2,IBSEL[2,$$COV^IBTUBOU(DFN,IBDT,2) D
"RTN","IBTUBOA",135,0)
 . . . D OPT^IBTUBO1("",.IBQUERY)
"RTN","IBTUBOA",136,0)
 ;
"RTN","IBTUBOA",137,0)
 I $G(IBXTRACT) D XTRACT^IBTUBOU ; Load extract file, if necessary.
"RTN","IBTUBOA",138,0)
 ;
"RTN","IBTUBOA",139,0)
 ; MRD;IB*2.0*516 - Moved code that was here into the new
"RTN","IBTUBOA",140,0)
 ; procedure TOTAL, and tally most of the values up by Division.
"RTN","IBTUBOA",141,0)
 ;
"RTN","IBTUBOA",142,0)
 D TOTAL
"RTN","IBTUBOA",143,0)
 ;
"RTN","IBTUBOA",144,0)
 ; - If Compile/Store - update Unbilled Amounts data on file #356.19
"RTN","IBTUBOA",145,0)
 I $G(IBCOMP) D LD^IBTUBOU(3,IBTIMON)
"RTN","IBTUBOA",146,0)
 ;
"RTN","IBTUBOA",147,0)
PRT ; - Print report(s).
"RTN","IBTUBOA",148,0)
 I $G(IBQUERY) D CLOSE^IBSDU(.IBQUERY)
"RTN","IBTUBOA",149,0)
 D REPORT^IBTUBO3
"RTN","IBTUBOA",150,0)
 ;
"RTN","IBTUBOA",151,0)
END K ^TMP($J,"IBTUB-INPT"),^TMP($J,"IBTUB-OPT"),^TMP($J,"IBTUB-RX")
"RTN","IBTUBOA",152,0)
 K IBDT,IBRT,IBUNB
"RTN","IBTUBOA",153,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBTUBOA",154,0)
 D ^%ZISC K IBTEMON,IBXTRACT,D,D0,DA,DIC,DIE
"RTN","IBTUBOA",155,0)
 Q
"RTN","IBTUBOA",156,0)
 ;
"RTN","IBTUBOA",157,0)
TOTAL ; Determine grand total amounts.
"RTN","IBTUBOA",158,0)
 ;
"RTN","IBTUBOA",159,0)
 ; - Calculate the Amount Inpatient INST. & PROF. Unbilled Amounts,
"RTN","IBTUBOA",160,0)
 ;   based on average amounts of Billed Amounts
"RTN","IBTUBOA",161,0)
 ;
"RTN","IBTUBOA",162,0)
 S IBIAV=$$INPAVG^IBTUBOU(IBTIMON)
"RTN","IBTUBOA",163,0)
 ;
"RTN","IBTUBOA",164,0)
 S IBAMTI=$P(IBIAV,"^")*$G(IBUNB("EPISM-I")) ; Inst
"RTN","IBTUBOA",165,0)
 S IBAMTIM=$P(IBIAV,"^")*$G(IBUNB("EPISM-I-MRA")) ; Inst
"RTN","IBTUBOA",166,0)
 S IBAMTP=$P(IBIAV,"^",2)*$G(IBUNB("EPISM-P")) ; Prof
"RTN","IBTUBOA",167,0)
 S IBAMTPM=$P(IBIAV,"^",2)*$G(IBUNB("EPISM-P-MRA")) ; Prof
"RTN","IBTUBOA",168,0)
 ;
"RTN","IBTUBOA",169,0)
 S IBUNB("UNBILIP")=IBAMTI+IBAMTP
"RTN","IBTUBOA",170,0)
 S IBUNB("UNBILIP-MRA")=IBAMTIM+IBAMTPM
"RTN","IBTUBOA",171,0)
 ;
"RTN","IBTUBOA",172,0)
 ;S IBUNB("UNBILTL")=IBUNB("UNBILIP")
"RTN","IBTUBOA",173,0)
 ;S IBUNB("UNBILTL-MRA")=IBUNB("UNBILIP-MRA")
"RTN","IBTUBOA",174,0)
 ;
"RTN","IBTUBOA",175,0)
 ; - Calculate Unbilled Amounts Totals by Division
"RTN","IBTUBOA",176,0)
 ;
"RTN","IBTUBOA",177,0)
 S IBDIV=0
"RTN","IBTUBOA",178,0)
 F  S IBDIV=$O(IBUNB(IBDIV)) Q:'IBDIV  D
"RTN","IBTUBOA",179,0)
 . ;
"RTN","IBTUBOA",180,0)
 . S IBAMTI=$P(IBIAV,"^")*$G(IBUNB(IBDIV,"EPISM-I")) ; Inst
"RTN","IBTUBOA",181,0)
 . S IBAMTIM=$P(IBIAV,"^")*$G(IBUNB(IBDIV,"EPISM-I-MRA")) ; Inst
"RTN","IBTUBOA",182,0)
 . S IBAMTP=$P(IBIAV,"^",2)*$G(IBUNB(IBDIV,"EPISM-P")) ; Prof
"RTN","IBTUBOA",183,0)
 . S IBAMTPM=$P(IBIAV,"^",2)*$G(IBUNB(IBDIV,"EPISM-P-MRA")) ; Prof
"RTN","IBTUBOA",184,0)
 . ;
"RTN","IBTUBOA",185,0)
 . S IBUNB(IBDIV,"UNBILIP")=IBAMTI+IBAMTP
"RTN","IBTUBOA",186,0)
 . S IBUNB(IBDIV,"UNBILIP-MRA")=IBAMTIM+IBAMTPM
"RTN","IBTUBOA",187,0)
 . ;
"RTN","IBTUBOA",188,0)
 . S IBUNB("UNBILTL")=$G(IBUNB("UNBILTL"))+$G(IBUNB(IBDIV,"UNBILIP"))+$G(IBUNB(IBDIV,"UNBILOP"))+$G(IBUNB(IBDIV,"UNBILRX"))
"RTN","IBTUBOA",189,0)
 . S IBUNB("UNBILTL-MRA")=$G(IBUNB("UNBILTL-MRA"))+$G(IBUNB(IBDIV,"UNBILIP-MRA"))+$G(IBUNB(IBDIV,"UNBILOP-MRA"))+$G(IBUNB(IBDIV,"UNBILRX-MRA"))
"RTN","IBTUBOA",190,0)
 . ;
"RTN","IBTUBOA",191,0)
 . Q
"RTN","IBTUBOA",192,0)
 ;
"RTN","IBTUBOA",193,0)
 Q
"RTN","IBTUBOA",194,0)
 ;
"RTN","IBTUBOU")
0^16^B42355876^B38728907
"RTN","IBTUBOU",1,0)
IBTUBOU ;ALB/RB - UNBILLED AMOUNTS (UTILITIES) ;03 Aug 2004  7:21 AM
"RTN","IBTUBOU",2,0)
 ;;2.0;INTEGRATED BILLING;**123,159,155,608**;21-MAR-94;Build 90
"RTN","IBTUBOU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTUBOU",4,0)
 ;
"RTN","IBTUBOU",5,0)
DT1 ; - Select date range (returns variables IBBDT and IBEDT).
"RTN","IBTUBOU",6,0)
 N DT0,DT1,DTOUT,DUOUT,Y
"RTN","IBTUBOU",7,0)
 S DT0=$O(^IBT(356,"D",""))\1,DT1=""
"RTN","IBTUBOU",8,0)
 I DT0 S DT1=$$DAT3^IBOUTL(DT0),DIR("B")=DT1
"RTN","IBTUBOU",9,0)
 S DIR(0)="DA^"_DT0_":"_DT_":AEX",DIR("A")="Start with DATE: "
"RTN","IBTUBOU",10,0)
 S DIR("?",1)="If you enter a start date here, the report will look for"
"RTN","IBTUBOU",11,0)
 S DIR("?",2)="events ON or AFTER this date. Press <CR> if you want to"
"RTN","IBTUBOU",12,0)
 S DIR("?",3)="skip this prompt and have the report look thru ALL events"
"RTN","IBTUBOU",13,0)
 S DIR("?",4)="or enter '^' to exit.",DIR("?",5)=""
"RTN","IBTUBOU",14,0)
 S DIR("?",6)="NOTE: The earliest date that can be entered is "_DT1_","
"RTN","IBTUBOU",15,0)
 S DIR("?",7)="      which is the date of the first event on file, and"
"RTN","IBTUBOU",16,0)
 S DIR("?")="      it is NOT possible to enter a future date."
"RTN","IBTUBOU",17,0)
 D ^DIR K DIR I $D(DTOUT)!($D(DUOUT)) S IBBDT="^" G DT1Q
"RTN","IBTUBOU",18,0)
 S IBBDT=Y,DT1=$$DAT3^IBOUTL(IBBDT)
"RTN","IBTUBOU",19,0)
 ;
"RTN","IBTUBOU",20,0)
 S DIR("B")=$$DAT3^IBOUTL(DT)
"RTN","IBTUBOU",21,0)
 S DIR(0)="DA^"_IBBDT_":"_DT_":AEX",DIR("A")="     Go to DATE: "
"RTN","IBTUBOU",22,0)
 S DIR("?",1)="If you enter a end date here, the report will look for"
"RTN","IBTUBOU",23,0)
 S DIR("?",2)="events from "_DT1_" to this date. Press <CR> to have"
"RTN","IBTUBOU",24,0)
 S DIR("?",3)="the report look at all events from "_DT1_" to today,"
"RTN","IBTUBOU",25,0)
 S DIR("?",4)="or enter '^' to exit."
"RTN","IBTUBOU",26,0)
 S DIR("?",5)=""
"RTN","IBTUBOU",27,0)
 S DIR("?",6)="NOTE: This date MUST NOT be earlier than "_DT1_" neither"
"RTN","IBTUBOU",28,0)
 S DIR("?")="      later than today."
"RTN","IBTUBOU",29,0)
 D ^DIR K DIR I $D(DTOUT)!($D(DUOUT)) S IBBDT="^" G DT1Q
"RTN","IBTUBOU",30,0)
 S IBEDT=Y+.9
"RTN","IBTUBOU",31,0)
 ;
"RTN","IBTUBOU",32,0)
DT1Q Q
"RTN","IBTUBOU",33,0)
 ;
"RTN","IBTUBOU",34,0)
DT2(STR) ; - Select re-compile date (returns variable IBTIMON).
"RTN","IBTUBOU",35,0)
 ; Input: STR - String that describe the type of data that will be 
"RTN","IBTUBOU",36,0)
 ;        re-compiled: "Unbilled Amounts", "Average Bill Amounts", etc...
"RTN","IBTUBOU",37,0)
 ;
"RTN","IBTUBOU",38,0)
 N DIRUT,DT0,DT1,DT2,Y
"RTN","IBTUBOU",39,0)
 ; - AUG 1993 is the first month on file with Unbilled Amounts data
"RTN","IBTUBOU",40,0)
 S DT0=2930800,DT1=$$DAT2^IBOUTL(DT0)
"RTN","IBTUBOU",41,0)
 S DT2=$$M1^IBJDE(DT,1),DIR("B")=$$DAT2^IBOUTL(DT2)
"RTN","IBTUBOU",42,0)
 S DIR(0)="DA^"_$E(DT0,1,5)_"00:"_DT2_":AE^K:$E(Y,6,7)'=""00"" X"
"RTN","IBTUBOU",43,0)
 S DIR("A")="Re-compile "_$G(STR)_" through MONTH/YEAR: "
"RTN","IBTUBOU",44,0)
 S DIR("?",1)="Enter a past month/year (ex. Oct 2000).",DIR("?",2)=""
"RTN","IBTUBOU",45,0)
 S DIR("?",3)="NOTE: The earliest month/year that can be entered is "_DT1_", and"
"RTN","IBTUBOU",46,0)
 S DIR("?")="      it is NOT possible to enter the current or a future month/year."
"RTN","IBTUBOU",47,0)
 D ^DIR K DIR I $D(DIRUT) S IBTIMON="^" G DT2Q
"RTN","IBTUBOU",48,0)
 I $E(Y,6,7)'="00"!($E(Y,4,7)="0000") W "  ??" G DT2
"RTN","IBTUBOU",49,0)
 S IBTIMON=Y
"RTN","IBTUBOU",50,0)
 ;
"RTN","IBTUBOU",51,0)
DT2Q Q
"RTN","IBTUBOU",52,0)
 ;
"RTN","IBTUBOU",53,0)
YR2(D) ; - Return a date two years from date D.
"RTN","IBTUBOU",54,0)
 N X,X1,X2 S X="" G:'$G(D) YR2Q S X1=D,X2=-730 D C^%DTC
"RTN","IBTUBOU",55,0)
 ;
"RTN","IBTUBOU",56,0)
YR2Q Q X
"RTN","IBTUBOU",57,0)
 ;
"RTN","IBTUBOU",58,0)
COV(P,E,T) ; - Check if patient has insurance coverage.
"RTN","IBTUBOU",59,0)
 ;    Input: P=patient IEN, E=event date,
"RTN","IBTUBOU",60,0)
 ;           T=1-inpatient/2-outpatient/3-pharmacy
"RTN","IBTUBOU",61,0)
 ;   Output: Y=1-patient has coverage/0-no coverage or unknown
"RTN","IBTUBOU",62,0)
 N X,XY,Y S Y=0 G:'$G(P)!('$G(E))!('$G(T)) COVQ
"RTN","IBTUBOU",63,0)
 S X=$S(T=1:"INPATIENT",T=2:"OUTPATIENT",1:"PHARMACY")
"RTN","IBTUBOU",64,0)
 S Y=$$PTCOV^IBCNSU3(P,E,X,.XY)
"RTN","IBTUBOU",65,0)
 ;
"RTN","IBTUBOU",66,0)
COVQ Q Y
"RTN","IBTUBOU",67,0)
 ;
"RTN","IBTUBOU",68,0)
PTCHK(DFN,IBNODE) ; - See if patient has a non-veteran eligibility.
"RTN","IBTUBOU",69,0)
 ;    Input: DFN=patient IEN
"RTN","IBTUBOU",70,0)
 ;           IBNODE=zero node to CT entry
"RTN","IBTUBOU",71,0)
 ;   Output: IBFLAG=0-nonbillable, 1-billable 
"RTN","IBTUBOU",72,0)
 N IBFLAG S IBFLAG=0 G:'$G(DFN) PTCKQ
"RTN","IBTUBOU",73,0)
 I $D(^DPT(+DFN,.312)),$G(^("VET"))="Y" S IBFLAG=1
"RTN","IBTUBOU",74,0)
 I $P(IBNODE,U,4),$P($G(^DIC(8,+$$SCE^IBSDU(+$P(IBNODE,U,4),13),0)),U,5)="N" S IBFLAG=0
"RTN","IBTUBOU",75,0)
 ;
"RTN","IBTUBOU",76,0)
PTCKQ Q IBFLAG
"RTN","IBTUBOU",77,0)
 ;
"RTN","IBTUBOU",78,0)
NCCL(ENC) ; - Check if Encounter is NON-COUNT CLINIC
"RTN","IBTUBOU",79,0)
 ;    Input: ENC = Pointer to the ENCOUNTER file (#409.69)
"RTN","IBTUBOU",80,0)
 ;   Output: NCCL= 1 - NON-COUNT CLINIC / 0 - NO NON-COUNT CLINIC
"RTN","IBTUBOU",81,0)
 N NCCL,HLOC
"RTN","IBTUBOU",82,0)
 S NCCL=0,HLOC=$$SCE^IBSDU(+ENC,4)
"RTN","IBTUBOU",83,0)
 I HLOC,$P($G(^SC(+HLOC,0)),"^",17)="Y" S NCCL=1
"RTN","IBTUBOU",84,0)
 ;
"RTN","IBTUBOU",85,0)
 Q NCCL
"RTN","IBTUBOU",86,0)
 ;
"RTN","IBTUBOU",87,0)
HOSP(ADM) ; Is the patient still hospitalized (not discharged)?
"RTN","IBTUBOU",88,0)
 ; Input: ADM  = Pointer to the PATIENT MOVEMENT file (#405)
"RTN","IBTUBOU",89,0)
 ;Output: HOSP = 1 - Hospitalized / 0 - Discharged
"RTN","IBTUBOU",90,0)
 ;
"RTN","IBTUBOU",91,0)
 N HOSP,X
"RTN","IBTUBOU",92,0)
 S HOSP=1,X=$G(^DGPM(+ADM,0)) I $P(X,"^",17) S HOSP=0
"RTN","IBTUBOU",93,0)
 ;
"RTN","IBTUBOU",94,0)
 Q HOSP
"RTN","IBTUBOU",95,0)
 ;
"RTN","IBTUBOU",96,0)
CKBIL(X,Y) ; - Return valid claim data.
"RTN","IBTUBOU",97,0)
 ;    Input: X=IEN from file #399, Y=0-outpatient, 1-inpatient
"RTN","IBTUBOU",98,0)
 ;   Output: Z=rate^status^auth date^1-inst claim/2-prof claim^
"RTN","IBTUBOU",99,0)
 ;             event date (if Y=1), or null^req MRA date
"RTN","IBTUBOU",100,0)
 N X1,X2,Y1,Z S Z="" G:'$G(X) CKBLQ S:'$G(Y) Y=0
"RTN","IBTUBOU",101,0)
 S X1=$G(^DGCR(399,X,0)) G:X1="" CKBLQ
"RTN","IBTUBOU",102,0)
 I $G(DFN),$P(X1,U,2)'=DFN G CKBLQ ;              Invalid patient IEN.
"RTN","IBTUBOU",103,0)
 I '$G(IBRX),'Y,'$$NOTRX(X) G CKBLQ ;             Bill has RX rev codes.
"RTN","IBTUBOU",104,0)
 I $P(X1,U,5)<3,'Y G CKBLQ ;                      Not inpatient bill.
"RTN","IBTUBOU",105,0)
 I $P(X1,U,5)>2,Y G CKBLQ ;                       Not outpatient bill.
"RTN","IBTUBOU",106,0)
 I $P(X1,U,11)'="i" G CKBLQ ;                     Not an insurance bill.
"RTN","IBTUBOU",107,0)
 S X2=$P($G(^DGCR(399,X,"S")),U,10)
"RTN","IBTUBOU",108,0)
 I 'X2 G:$P(X1,U,13)'=2 CKBLQ ; No authorization date, not MRA req
"RTN","IBTUBOU",109,0)
 I $P(X1,U,13)<2!($P(X1,U,13)>5) G CKBLQ ; Status not auth, prin, trans.
"RTN","IBTUBOU",110,0)
 ;JRA;IB*2.0*608 Check if claim should be excluded based on MCCF/non-MCCF
"RTN","IBTUBOU",111,0)
 I $G(IBMCCF)]"",IBMCCF'="B",'$$MCCFCKX(399,X,.07,"RTYP") G CKBLQ  ;JRA;IB*2.0*608
"RTN","IBTUBOU",112,0)
 S Z=$P(X1,U,7)_U_$P(X1,U,13)_U_X2,Y1=$P($P(X1,U,3),".")
"RTN","IBTUBOU",113,0)
 S:$P(X1,U,13)=2 $P(Z,U,6)=$P($G(^DGCR(399,X,"S")),U,7)
"RTN","IBTUBOU",114,0)
 I $P(X1,U,27)=1!($P(X1,U,19)=3)!(Y1<2990901) S $P(Z,U,4)=1 G CKBL1
"RTN","IBTUBOU",115,0)
 I $P(X1,U,27)=2!($P(X1,U,19)=2) S $P(Z,U,4)=2
"RTN","IBTUBOU",116,0)
 I '$P(Z,U,4) S Z="" G CKBLQ ; Not institutional or professional bill.
"RTN","IBTUBOU",117,0)
CKBL1 I Y S $P(Z,U,5)=Y1
"RTN","IBTUBOU",118,0)
 ;
"RTN","IBTUBOU",119,0)
CKBLQ Q Z
"RTN","IBTUBOU",120,0)
 ;
"RTN","IBTUBOU",121,0)
CKENC(IBOE,IBOE0,IBQUIT) ; - Check outpatient encounters.
"RTN","IBTUBOU",122,0)
 N IBCK,IBZ,IBPB,IBZERR
"RTN","IBTUBOU",123,0)
 I $G(IBOE0)="" D GETGEN^SDOE(IBOE,"IBZ","IBZERR") S IBOE0=$G(IBZ(0))
"RTN","IBTUBOU",124,0)
 F IBZ=9,13,14 S IBCK(IBZ)=""
"RTN","IBTUBOU",125,0)
 I '$$BILLCK^IBAMTEDU(IBOE,IBOE0) S IBQUIT=1 ; Not billable.
"RTN","IBTUBOU",126,0)
 Q
"RTN","IBTUBOU",127,0)
 ;
"RTN","IBTUBOU",128,0)
SCAN(DFN,IBDT,IBQUERY) ; - Look at all visits for a day.
"RTN","IBTUBOU",129,0)
 N IBNDT,IBVAL,IBFILTER,IBCBK
"RTN","IBTUBOU",130,0)
 S IBVAL("DFN")=DFN,IBVAL("BDT")=IBDT,IBVAL("EDT")=IBDT,IBFILTER=""
"RTN","IBTUBOU",131,0)
 S IBCBK="I $P(Y0,U,8)=3,Y0>IBDT S:'IBNDT IBNDT=+Y0 D:IBNDT=+Y0 CKENC^IBTUBOU(Y,Y0,.IBQUIT) S:$S('$G(IBQUIT):1,1:Y0>IBNDT) SDSTOP=1"
"RTN","IBTUBOU",132,0)
 S IBNDT=0 D SCAN^IBSDU("PATIENT/DATE",.IBVAL,IBFILTER,IBCBK,0,.IBQUERY)
"RTN","IBTUBOU",133,0)
 Q
"RTN","IBTUBOU",134,0)
 ;
"RTN","IBTUBOU",135,0)
SC(PTF) ; - If patient is SC, are movements for SC care.
"RTN","IBTUBOU",136,0)
 ;    Input: PTF=PTF record
"RTN","IBTUBOU",137,0)
 ;   Output: IBM=1-all movements PTF, 0-one or more not flagged as SC
"RTN","IBTUBOU",138,0)
 N M,IBM S IBM=1,M=0 G:$G(^DGPT(+$G(PTF),0))="" SCQ
"RTN","IBTUBOU",139,0)
 F  S M=$O(^DGPT(PTF,"M",M)) Q:'M  D  Q:'IBM
"RTN","IBTUBOU",140,0)
 .I $P($G(^DGPT(PTF,"M",M,0)),U,18)'=1 S IBM=0
"RTN","IBTUBOU",141,0)
 ;
"RTN","IBTUBOU",142,0)
SCQ Q IBM
"RTN","IBTUBOU",143,0)
 ;
"RTN","IBTUBOU",144,0)
LD(L,M) ; - Load average/unbilled totals into file #356.19
"RTN","IBTUBOU",145,0)
 ;   Input: L=1-average (mon), 2-average (12m), 3-unbilled
"RTN","IBTUBOU",146,0)
 ;          M=file #356.19 IEN
"RTN","IBTUBOU",147,0)
 I '$G(L)!('$G(M)) G LDQ
"RTN","IBTUBOU",148,0)
 S DA=M,DIE="^IBE(356.19,"
"RTN","IBTUBOU",149,0)
 S DR=$S(L=3:"[IBT UNBILLED AMOUNTS]",L=2:"[IBT AVERAGE BILL AMOUNTS (12M)]",1:"[IBT AVERAGE BILL AMOUNTS (MON)]")
"RTN","IBTUBOU",150,0)
 D ^DIE K DA,DIE,DR
"RTN","IBTUBOU",151,0)
 ;
"RTN","IBTUBOU",152,0)
LDQ Q
"RTN","IBTUBOU",153,0)
 ;
"RTN","IBTUBOU",154,0)
XTRACT ; - Calculate remaining extract totals and load into file #351.71
"RTN","IBTUBOU",155,0)
 ; - Set IB with the average and total amounts and call E^IBJDE
"RTN","IBTUBOU",156,0)
 N X,AVGS
"RTN","IBTUBOU",157,0)
 S AVGS=$$INPAVG(IBTIMON)
"RTN","IBTUBOU",158,0)
 S IB(2)=$J(IB(1)*$P(AVGS,"^"),0,2)
"RTN","IBTUBOU",159,0)
 S IB(4)=$J(IB(3)*$P(AVGS,"^",2),0,2)
"RTN","IBTUBOU",160,0)
 S IB(6)=$J(IB(2)+IB(4),0,2)
"RTN","IBTUBOU",161,0)
 S IB(13)=IB(9)+IB(11),IB(15)=IB(7)+IB(14)
"RTN","IBTUBOU",162,0)
 F X=8,10,12,18 S IB(X)=$J(IB(X),0,2)
"RTN","IBTUBOU",163,0)
 S IB(16)=$J(IB(8)+IB(10)+IB(12),0,2)
"RTN","IBTUBOU",164,0)
 S IB(19)=$J(IB(6)+IB(16)+IB(18),0,2)
"RTN","IBTUBOU",165,0)
 D E^IBJDE(37,0)
"RTN","IBTUBOU",166,0)
 Q
"RTN","IBTUBOU",167,0)
 ;
"RTN","IBTUBOU",168,0)
INPAVG(IBYRMO) ; - Calculate the Average Inpatient INST. & PROF. Billed Amounts
"RTN","IBTUBOU",169,0)
 ; Input: IBYRMO - YEAR/MONTH (YYYMM00) being calculated/updated
"RTN","IBTUBOU",170,0)
 ; Output: Avg.Inpt.Inst.Bill Amount ^ Avg.Inpt.Prof. Bill Amount
"RTN","IBTUBOU",171,0)
 ;
"RTN","IBTUBOU",172,0)
 N AVGI,AVGP,ND I '$G(IBYRMO) Q ""
"RTN","IBTUBOU",173,0)
 F  Q:$P($G(^IBE(356.19,IBYRMO,1)),"^",14)'=""!'IBYRMO  D
"RTN","IBTUBOU",174,0)
 . S IBYRMO=$O(^IBE(356.19,IBYRMO),-1)
"RTN","IBTUBOU",175,0)
 S (AVGI,AVGP)=0 I 'IBYRMO Q ""
"RTN","IBTUBOU",176,0)
 S ND=$G(^IBE(356.19,IBYRMO,1))
"RTN","IBTUBOU",177,0)
 I $P(ND,"^",9) S AVGI=$J($P(ND,"^",8)/$P(ND,"^",9),0,2)
"RTN","IBTUBOU",178,0)
 I $P(ND,"^",12) S AVGP=$J($P(ND,"^",11)/$P(ND,"^",12),0,2)
"RTN","IBTUBOU",179,0)
 Q (AVGI_"^"_AVGP)
"RTN","IBTUBOU",180,0)
 ;
"RTN","IBTUBOU",181,0)
NOTRX(BILL) ; - Determine if bill contains outpatient visit (use this check
"RTN","IBTUBOU",182,0)
 ;   to make sure not just rx bill returns one if contains a revenue
"RTN","IBTUBOU",183,0)
 ;   code for outpatient visit or a zero if no outpatient visit code
"RTN","IBTUBOU",184,0)
 ;   on bill).
"RTN","IBTUBOU",185,0)
 N IBRX,RC,X
"RTN","IBTUBOU",186,0)
 S (IBRX,RC)=0 G:'$O(^DGCR(399,BILL,"OP",0)) NOTRXQ
"RTN","IBTUBOU",187,0)
 F  S RC=$O(^DGCR(399,BILL,"RC",RC)) Q:'RC  I $P($G(^DGCR(399.1,+$P($G(^DGCR(399,BILL,"RC",RC,0)),U,5),0)),U)'="PRESCRIPTION" S IBRX=1 Q
"RTN","IBTUBOU",188,0)
 ;
"RTN","IBTUBOU",189,0)
NOTRXQ Q IBRX
"RTN","IBTUBOU",190,0)
 ;
"RTN","IBTUBOU",191,0)
MCCFCKX(FILE,IEN,FLD,ND) ;JRA;IB*2.0*608 Check if Eligibility of Encounter, Appointment Type, and Rate Type meet MCCF/non-MCCF criteria 
"RTN","IBTUBOU",192,0)
 ;Input: FILE=
"RTN","IBTUBOU",193,0)
 Q:('$G(FILE)!('$G(IEN)!('$G(FLD)!($G(ND)="")))) -1
"RTN","IBTUBOU",194,0)
 N VAL
"RTN","IBTUBOU",195,0)
 S VAL=$$GET1^DIQ(FILE,IEN_",",FLD,"I") Q:'VAL -1
"RTN","IBTUBOU",196,0)
 I ((IBMCCF="N")&('$D(IBMCCF(ND,VAL))))!((IBMCCF="M")&($D(IBMCCF(ND,VAL)))) Q 0
"RTN","IBTUBOU",197,0)
 Q 1
"RTN","IBTUBOU",198,0)
 ;
"RTN","IBTUBUL")
0^17^B63490597^B60799593
"RTN","IBTUBUL",1,0)
IBTUBUL ;ALB/AAS - UNBILLED AMOUNTS ;29-SEP-94
"RTN","IBTUBUL",2,0)
 ;;2.0;INTEGRATED BILLING;**19,123,159,217,155,356,516,547,608**;21-MAR-94;Build 90
"RTN","IBTUBUL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTUBUL",4,0)
 ;
"RTN","IBTUBUL",5,0)
 ; IB*2.0*516 - Added sort by Division.  Because some of the totals
"RTN","IBTUBUL",6,0)
 ; can be done by Division and some cannot, portions of the report
"RTN","IBTUBUL",7,0)
 ; were reorganized.
"RTN","IBTUBUL",8,0)
 ;
"RTN","IBTUBUL",9,0)
TEST ; - Create and send test bulletin.
"RTN","IBTUBUL",10,0)
 N IBBDT,IBEDT,IBSEL,IBTEST
"RTN","IBTUBUL",11,0)
 S IBBDT=DT,IBEDT=DT,IBSEL="1,2,3",IBTEST=1
"RTN","IBTUBUL",12,0)
 D TESTV
"RTN","IBTUBUL",13,0)
 ;
"RTN","IBTUBUL",14,0)
BULL ; - Create and send bulletin.
"RTN","IBTUBUL",15,0)
 ;
"RTN","IBTUBUL",16,0)
 I '$O(IBUNB(0)) Q  ; Quit out if no data.
"RTN","IBTUBUL",17,0)
 ;
"RTN","IBTUBUL",18,0)
 N I,IBDIV,IBGRP,IBT,IBTOTAL,IBX,IDX,X,XMDUZ,XMN,XMSUB,XMTEXT,XMY,XMZ
"RTN","IBTUBUL",19,0)
 S XMSUB="UNBILLED AMOUNTS SUMMARY REPORT"_$S($G(IBTEST):" (TEST)",1:"")
"RTN","IBTUBUL",20,0)
 ;
"RTN","IBTUBUL",21,0)
 D BULL1,SUMMARY
"RTN","IBTUBUL",22,0)
 ;
"RTN","IBTUBUL",23,0)
 I $G(IBSBD) S IBDIV=0 F  S IBDIV=$O(IBUNB(IBDIV)) Q:'IBDIV  D BULL2
"RTN","IBTUBUL",24,0)
 ;
"RTN","IBTUBUL",25,0)
 D BULL3,SEND
"RTN","IBTUBUL",26,0)
 ;
"RTN","IBTUBUL",27,0)
 Q
"RTN","IBTUBUL",28,0)
 ;
"RTN","IBTUBUL",29,0)
SUMMARY ; Print Grand Totals.
"RTN","IBTUBUL",30,0)
 ;
"RTN","IBTUBUL",31,0)
 S IBT(IDX)="",IDX=IDX+1
"RTN","IBTUBUL",32,0)
 ;S IBT(IDX)="  GRAND TOTALS",IDX=IDX+1  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBUL",33,0)
 S IBT(IDX)="  GRAND TOTALS"_$S($G(IBMCCF)="N":" FOR NON-MCCF CLAIMS",1:""),IDX=IDX+1  ;JRA;IB*2.0*608
"RTN","IBTUBUL",34,0)
 S IBT(IDX)="",IDX=IDX+1
"RTN","IBTUBUL",35,0)
 ;
"RTN","IBTUBUL",36,0)
 I IBSEL[1 D
"RTN","IBTUBUL",37,0)
 . S X=$$INPAVG^IBTUBOU(IBTIMON)
"RTN","IBTUBUL",38,0)
 . S IBT(IDX+1)="    Inpatient Care:"
"RTN","IBTUBUL",39,0)
 . S IBT(IDX+2)="      Number of Unbilled Inpatient Admissions : "_$J(+$G(IBUNB("EPISM-A")),11)
"RTN","IBTUBUL",40,0)
 . S IBT(IDX+3)="      Number of MRA Unbilled Inpt Admissions  : "_$J(+$G(IBUNB("EPISM-A-MRA")),11)
"RTN","IBTUBUL",41,0)
 . S IBT(IDX+4)="      Number of Inpt. Institutional Cases     : "_$J(+$G(IBUNB("EPISM-I")),11)
"RTN","IBTUBUL",42,0)
 . S IBT(IDX+5)="      Average Inpt. Institutional Bill Amount : "_$J($P(X,"^"),11,2)
"RTN","IBTUBUL",43,0)
 . S IBT(IDX+6)="      Number of Inpt. Professional Cases      : "_$J(+$G(IBUNB("EPISM-P")),11)
"RTN","IBTUBUL",44,0)
 . S IBT(IDX+7)="      Average Inpt. Professional Bill Amount  : "_$J($P(X,"^",2),11,2)
"RTN","IBTUBUL",45,0)
 . S IBT(IDX+8)="      Total Unbilled Inpatient Care           : "_$J($G(IBUNB("UNBILIP")),11,2)
"RTN","IBTUBUL",46,0)
 . S IBT(IDX+9)="      Total MRA Unbilled Inpatient Care       : "_$J($G(IBUNB("UNBILIP-MRA")),11,2)
"RTN","IBTUBUL",47,0)
 . S IBT(IDX+10)="",IDX=IDX+10
"RTN","IBTUBUL",48,0)
 . Q
"RTN","IBTUBUL",49,0)
 ;
"RTN","IBTUBUL",50,0)
 I IBSEL[2 D
"RTN","IBTUBUL",51,0)
 . ;S IBT(IDX+1)="    Outpatient Care:"  ;JRA;IB*2.0*608 ';'
"RTN","IBTUBUL",52,0)
 . S IBT(IDX+1)="    "_$S($G(IBMCCF)="M":"MCCF Claims - ",$G(IBMCCF)="N":"Non-MCCF Claims - ",1:"MCCF & Non-MCCF Claims - ")_"Outpatient Care:"  ;JRA;IB*2.0*608
"RTN","IBTUBUL",53,0)
 . S IBT(IDX+2)="      Number of Unbilled Outpatient Cases     : "_$J(+$G(IBUNB("ENCNTRS")),11)
"RTN","IBTUBUL",54,0)
 . S IBT(IDX+3)="      Number of Unbilled CPT Codes            : "_$J(+$G(IBUNB("CPTMS")),11)
"RTN","IBTUBUL",55,0)
 . S IBT(IDX+4)="      Number of MRA Unbilled CPT Codes        : "_$J(+$G(IBUNB("CPTMS-MRA")),11)
"RTN","IBTUBUL",56,0)
 . S IBT(IDX+5)="      Total Unbilled Outpatient Care          : "_$J($G(IBUNB("UNBILOP")),11,2)
"RTN","IBTUBUL",57,0)
 . S IBT(IDX+6)="      Total MRA Unbilled Outpatient Care      : "_$J($G(IBUNB("UNBILOP-MRA")),11,2)
"RTN","IBTUBUL",58,0)
 . S IBT(IDX+7)="",IDX=IDX+7
"RTN","IBTUBUL",59,0)
 . Q
"RTN","IBTUBUL",60,0)
 ;
"RTN","IBTUBUL",61,0)
 I IBSEL[3 D
"RTN","IBTUBUL",62,0)
 . S IBT(IDX+1)="    Prescriptions:"
"RTN","IBTUBUL",63,0)
 . S IBT(IDX+2)="      Number of Unbilled Prescriptions        : "_$J(+$G(IBUNB("PRESCRP")),11)
"RTN","IBTUBUL",64,0)
 . S IBT(IDX+3)="      Number of MRA Unbilled Prescriptions    : "_$J(+$G(IBUNB("PRESCRP-MRA")),11)
"RTN","IBTUBUL",65,0)
 . S IBT(IDX+4)="      Total Unbilled Prescriptions            : "_$J($G(IBUNB("UNBILRX")),11,2)
"RTN","IBTUBUL",66,0)
 . S IBT(IDX+5)="      Total MRA Unbilled Prescriptions        : "_$J($G(IBUNB("UNBILRX-MRA")),11,2)
"RTN","IBTUBUL",67,0)
 . S IBT(IDX+6)="",IDX=IDX+6
"RTN","IBTUBUL",68,0)
 . Q
"RTN","IBTUBUL",69,0)
 ;
"RTN","IBTUBUL",70,0)
 Q
"RTN","IBTUBUL",71,0)
 ;
"RTN","IBTUBUL",72,0)
BULL1 ; Header for entire report.
"RTN","IBTUBUL",73,0)
 ;
"RTN","IBTUBUL",74,0)
 N IBDIV
"RTN","IBTUBUL",75,0)
 S IDX=1
"RTN","IBTUBUL",76,0)
 S IBX=$P($$SITE^VASITE,U,2,3)
"RTN","IBTUBUL",77,0)
 S IBT(IDX)="SUMMARY UNBILLED AMOUNTS FOR "
"RTN","IBTUBUL",78,0)
 I '$D(^TMP($J,"IBTUB-DIV")) S IBT(IDX)=IBT(IDX)_$P(IBX,U)_" ("_$P(IBX,U,2)_").",IDX=IDX+1
"RTN","IBTUBUL",79,0)
 I $D(^TMP($J,"IBTUB-DIV")) D
"RTN","IBTUBUL",80,0)
 . S IBT(IDX)=IBT(IDX)_"SELECTED DIVISIONS:",IDX=IDX+1
"RTN","IBTUBUL",81,0)
 . S IBDIV="" F  S IBDIV=$O(^TMP($J,"IBTUB-DIV",IBDIV)) Q:IBDIV=""  D
"RTN","IBTUBUL",82,0)
 .. S IBT(IDX)="   "_$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")",IDX=IDX+1
"RTN","IBTUBUL",83,0)
 S IBT(IDX)="PERIOD: FROM "_$$DAT1^IBOUTL(IBBDT)_" TO "_$$DAT1^IBOUTL(IBEDT),IDX=IDX+1
"RTN","IBTUBUL",84,0)
 ;
"RTN","IBTUBUL",85,0)
 I $G(IBDET) S IBT(IDX)="DETAILED REPORT PRINTED TO '"_IO_"'",IDX=IDX+1
"RTN","IBTUBUL",86,0)
 I $G(IBCOMP) S IBT(IDX)="UNBILLED AMOUNTS FIGURES STORED FOR "_$$DAT2^IBOUTL(IBTIMON),IDX=IDX+1
"RTN","IBTUBUL",87,0)
 ;
"RTN","IBTUBUL",88,0)
 Q
"RTN","IBTUBUL",89,0)
 ;
"RTN","IBTUBUL",90,0)
BULL2 ; Totals for one Division.
"RTN","IBTUBUL",91,0)
 ;
"RTN","IBTUBUL",92,0)
 I IBDIV=999999 S IBDIVHDR="UNKNOWN"
"RTN","IBTUBUL",93,0)
 E  S IBDIVHDR=$$GET1^DIQ(40.8,IBDIV_",",.01)_" ("_$$GET1^DIQ(40.8,IBDIV_",",1)_")"
"RTN","IBTUBUL",94,0)
 S IBT(IDX)="",IDX=IDX+1
"RTN","IBTUBUL",95,0)
 S IBT(IDX)="  DIVISION: "_IBDIVHDR,IDX=IDX+1
"RTN","IBTUBUL",96,0)
 S IBT(IDX)="",IDX=IDX+1
"RTN","IBTUBUL",97,0)
 ;
"RTN","IBTUBUL",98,0)
 I $G(IBTEST) S IBT(IDX)="  *** TEST DATA, TEST DATA ***",IDX=IDX+1
"RTN","IBTUBUL",99,0)
 ;
"RTN","IBTUBUL",100,0)
 I IBSEL[1 D
"RTN","IBTUBUL",101,0)
 . S X=$$INPAVG^IBTUBOU(IBTIMON)
"RTN","IBTUBUL",102,0)
 . S IBT(IDX+1)="    Inpatient Care:"
"RTN","IBTUBUL",103,0)
 . S IBT(IDX+2)="      Number of Unbilled Inpatient Admissions : "_$J(+$G(IBUNB(IBDIV,"EPISM-A")),11)
"RTN","IBTUBUL",104,0)
 . S IBT(IDX+3)="      Number of MRA Unbilled Inpt Admissions  : "_$J(+$G(IBUNB(IBDIV,"EPISM-A-MRA")),11)
"RTN","IBTUBUL",105,0)
 . S IBT(IDX+4)="      Number of Inpt. Institutional Cases     : "_$J(+$G(IBUNB(IBDIV,"EPISM-I")),11)
"RTN","IBTUBUL",106,0)
 . S IBT(IDX+5)="      Average Inpt. Institutional Bill Amount : "_$J($P(X,"^"),11,2)
"RTN","IBTUBUL",107,0)
 . S IBT(IDX+6)="      Number of Inpt. Professional Cases      : "_$J(+$G(IBUNB(IBDIV,"EPISM-P")),11)
"RTN","IBTUBUL",108,0)
 . S IBT(IDX+7)="      Average Inpt. Professional Bill Amount  : "_$J($P(X,"^",2),11,2)
"RTN","IBTUBUL",109,0)
 . S IBT(IDX+8)="      Total Unbilled Inpatient Care           : "_$J($G(IBUNB(IBDIV,"UNBILIP")),11,2)
"RTN","IBTUBUL",110,0)
 . S IBT(IDX+9)="      Total MRA Unbilled Inpatient Care       : "_$J($G(IBUNB(IBDIV,"UNBILIP-MRA")),11,2)
"RTN","IBTUBUL",111,0)
 . S IBT(IDX+10)="",IDX=IDX+10
"RTN","IBTUBUL",112,0)
 . Q
"RTN","IBTUBUL",113,0)
 ;
"RTN","IBTUBUL",114,0)
 I IBSEL[2 D
"RTN","IBTUBUL",115,0)
 . S IBT(IDX+1)="    Outpatient Care:"
"RTN","IBTUBUL",116,0)
 . S IBT(IDX+2)="      Number of Unbilled Outpatient Cases     : "_$J(+$G(IBUNB(IBDIV,"ENCNTRS")),11)
"RTN","IBTUBUL",117,0)
 . S IBT(IDX+3)="      Number of Unbilled CPT Codes            : "_$J(+$G(IBUNB(IBDIV,"CPTMS-I"))+$G(IBUNB(IBDIV,"CPTMS-P")),11)
"RTN","IBTUBUL",118,0)
 . S IBT(IDX+4)="      Number of MRA Unbilled CPT Codes        : "_$J(+$G(IBUNB(IBDIV,"CPTMS-I-MRA"))+$G(IBUNB(IBDIV,"CPTMS-P-MRA")),11)
"RTN","IBTUBUL",119,0)
 . S IBT(IDX+5)="      Total Unbilled Outpatient Care          : "_$J($G(IBUNB(IBDIV,"UNBILOP")),11,2)
"RTN","IBTUBUL",120,0)
 . S IBT(IDX+6)="      Total MRA Unbilled Outpatient Care      : "_$J($G(IBUNB(IBDIV,"UNBILOP-MRA")),11,2)
"RTN","IBTUBUL",121,0)
 . S IBT(IDX+7)="",IDX=IDX+7
"RTN","IBTUBUL",122,0)
 . Q
"RTN","IBTUBUL",123,0)
 ;
"RTN","IBTUBUL",124,0)
 I IBSEL[3 D
"RTN","IBTUBUL",125,0)
 . S IBT(IDX+1)="    Prescriptions:"
"RTN","IBTUBUL",126,0)
 . S IBT(IDX+2)="      Number of Unbilled Prescriptions        : "_$J(+$G(IBUNB(IBDIV,"PRESCRP")),11)
"RTN","IBTUBUL",127,0)
 . S IBT(IDX+3)="      Number of MRA Unbilled Prescriptions    : "_$J(+$G(IBUNB(IBDIV,"PRESCRP-MRA")),11)
"RTN","IBTUBUL",128,0)
 . S IBT(IDX+4)="      Total Unbilled Prescriptions            : "_$J($G(IBUNB(IBDIV,"UNBILRX")),11,2)
"RTN","IBTUBUL",129,0)
 . S IBT(IDX+5)="      Total MRA Unbilled Prescriptions        : "_$J($G(IBUNB(IBDIV,"UNBILRX-MRA")),11,2)
"RTN","IBTUBUL",130,0)
 . S IBT(IDX+6)="",IDX=IDX+6
"RTN","IBTUBUL",131,0)
 . Q
"RTN","IBTUBUL",132,0)
 ;
"RTN","IBTUBUL",133,0)
 Q
"RTN","IBTUBUL",134,0)
 ;
"RTN","IBTUBUL",135,0)
BULL3 ; concluding notes.
"RTN","IBTUBUL",136,0)
 ;
"RTN","IBTUBUL",137,0)
 I IBSEL="1,2,3" D
"RTN","IBTUBUL",138,0)
 . S IBT(IDX+1)="    Total Unbilled Amount (all care)          : "_$J($G(IBUNB("UNBILTL")),11,2)
"RTN","IBTUBUL",139,0)
 . S IBT(IDX+2)="    Total MRA Unbilled Amount (all care)      : "_$J($G(IBUNB("UNBILTL-MRA")),11,2)
"RTN","IBTUBUL",140,0)
 . S IDX(IDX+3)="",IDX=IDX+3
"RTN","IBTUBUL",141,0)
 . Q
"RTN","IBTUBUL",142,0)
 ;
"RTN","IBTUBUL",143,0)
 S IBT(IDX+1)="",IDX=IDX+1
"RTN","IBTUBUL",144,0)
 ;
"RTN","IBTUBUL",145,0)
 I IBSEL[1 D
"RTN","IBTUBUL",146,0)
 . S IBT(IDX+1)="Note:  Average bill Amount is based on Bills Authorized during the 12"
"RTN","IBTUBUL",147,0)
 . S IBT(IDX+2)="       months preceding the month of this report."
"RTN","IBTUBUL",148,0)
 . S IDX=IDX+2
"RTN","IBTUBUL",149,0)
 . Q
"RTN","IBTUBUL",150,0)
 ;
"RTN","IBTUBUL",151,0)
 S IBT(IDX+1)="Note:  Number of cases is insured cases in Claims Tracking that are"
"RTN","IBTUBUL",152,0)
 S IBT(IDX+2)="       not billed (or bill not authorized/req MRA) but appear to be billable."
"RTN","IBTUBUL",153,0)
 ;
"RTN","IBTUBUL",154,0)
 Q
"RTN","IBTUBUL",155,0)
 ;
"RTN","IBTUBUL",156,0)
SEND ; - Send bulletin.
"RTN","IBTUBUL",157,0)
 K XMY
"RTN","IBTUBUL",158,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="IBT("
"RTN","IBTUBUL",159,0)
 S XMN=0,IBGRP=$P($G(^XMB(3.8,+$P($G(^IBE(350.9,1,6)),"^",25),0)),"^")
"RTN","IBTUBUL",160,0)
 I $G(IBCOMP),IBGRP]"" S XMY("G."_IBGRP_"@"_^XMB("NETNAME"))=""
"RTN","IBTUBUL",161,0)
 I '$G(IBCOMP) S XMY(DUZ)=""
"RTN","IBTUBUL",162,0)
 D ^XMD
"RTN","IBTUBUL",163,0)
 Q
"RTN","IBTUBUL",164,0)
 ;
"RTN","IBTUBUL",165,0)
TESTV ; - Set up test variables.
"RTN","IBTUBUL",166,0)
 S IBTIMON=9999999
"RTN","IBTUBUL",167,0)
 S IBUNB(999999,"CPTMS-I")=11111
"RTN","IBTUBUL",168,0)
 S IBUNB(999999,"CPTMS-I-MRA")=22222
"RTN","IBTUBUL",169,0)
 S IBUNB(999999,"CPTMS-P")=0
"RTN","IBTUBUL",170,0)
 S IBUNB(999999,"CPTMS-P-MRA")=0
"RTN","IBTUBUL",171,0)
 S IBUNB(999999,"ENCNTRS")=11111
"RTN","IBTUBUL",172,0)
 S IBUNB(999999,"EPISM-A")=11111
"RTN","IBTUBUL",173,0)
 S IBUNB(999999,"EPISM-A-MRA")=22222
"RTN","IBTUBUL",174,0)
 S IBUNB(999999,"EPISM-I")=11111
"RTN","IBTUBUL",175,0)
 S IBUNB(999999,"EPISM-P")=0
"RTN","IBTUBUL",176,0)
 S IBUNB(999999,"PRESCRP")=11111
"RTN","IBTUBUL",177,0)
 S IBUNB(999999,"PRESCRP-MRA")=22222
"RTN","IBTUBUL",178,0)
 S IBUNB(999999,"UNBILIP")=99999.99
"RTN","IBTUBUL",179,0)
 S IBUNB(999999,"UNBILIP-MRA")=77777.77
"RTN","IBTUBUL",180,0)
 S IBUNB(999999,"UNBILOP")=99999.99
"RTN","IBTUBUL",181,0)
 S IBUNB(999999,"UNBILOP-MRA")=77777.77
"RTN","IBTUBUL",182,0)
 S IBUNB(999999,"UNBILRX")=11111
"RTN","IBTUBUL",183,0)
 S IBUNB(999999,"UNBILRX-MRA")=22222
"RTN","IBTUBUL",184,0)
 ;
"RTN","IBTUBUL",185,0)
 S IBUNB("UNBILTL")=99999.99
"RTN","IBTUBUL",186,0)
 S IBUNB("UNBILTL-MRA")=77777.77
"RTN","IBTUBUL",187,0)
 Q
"RTN","IBY608PO")
0^^B25506190^n/a
"RTN","IBY608PO",1,0)
IBY608PO ;ALB/KDM - POST-INSTALL FOR IB*2.0*608 ;13-DEC-2017
"RTN","IBY608PO",2,0)
 ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 90
"RTN","IBY608PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY608PO",4,0)
 ;
"RTN","IBY608PO",5,0)
 ;KDM 12/2017 US1909 
"RTN","IBY608PO",6,0)
 ; run report of all insurance companies that have the current setting for Transmit Electronically set to zero- which is NO
"RTN","IBY608PO",7,0)
 ; send email of report to eBiz rapid response group
"RTN","IBY608PO",8,0)
 N IBA,RNAME
"RTN","IBY608PO",9,0)
 S RNAME="IBY608PO"
"RTN","IBY608PO",10,0)
 K ^TMP(RNAME,$J)
"RTN","IBY608PO",11,0)
 S IBA(2)="IB*2*608 Post-Install...",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY608PO",12,0)
 D MES^XPDUTL(">> Running Insurance Company EDI Parameter Report...please stand by....")
"RTN","IBY608PO",13,0)
 D RPT
"RTN","IBY608PO",14,0)
 D MES^XPDUTL(">> Report Completed.")
"RTN","IBY608PO",15,0)
 D CMNCPT
"RTN","IBY608PO",16,0)
 D:$$PROD^XUPROD(1) EMAIL     ;LIVE
"RTN","IBY608PO",17,0)
 S IBA(2)="IB*2*608 Post-Install Complete.",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY608PO",18,0)
 Q
"RTN","IBY608PO",19,0)
 ;
"RTN","IBY608PO",20,0)
RPT ; Get all Insurance companies that have the 3.01- transmit electronically field blank or set to No.
"RTN","IBY608PO",21,0)
 ;N IBADDRESS,IBCITY,IBNAME,IBPIEN,IBSTATE,STATE,TRANSCD,TRANSMIT
"RTN","IBY608PO",22,0)
 N IBADDRESS,IBCITY,IBNAME,IBPIEN,IBSTATE,INACTFLG,STATE,TRANSMIT
"RTN","IBY608PO",23,0)
 S IBNAME=""
"RTN","IBY608PO",24,0)
 F  S IBNAME=$O(^DIC(36,"B",IBNAME)) Q:IBNAME=""  D
"RTN","IBY608PO",25,0)
 . S IBPIEN=0
"RTN","IBY608PO",26,0)
 . F  S IBPIEN=$O(^DIC(36,"B",IBNAME,IBPIEN)) Q:'+IBPIEN  D
"RTN","IBY608PO",27,0)
 . . S TRANSMIT=$$GET1^DIQ(36,IBPIEN,3.01,"I")
"RTN","IBY608PO",28,0)
 . . Q:+TRANSMIT  ;Only want to report the insurance companies that have a setting of 0 or NULL
"RTN","IBY608PO",29,0)
 . . S (IBADDRESS,IBCITY,IBSTATE,INACTFLG,STATE)=""
"RTN","IBY608PO",30,0)
 . . S IBADDRESS=$$GET1^DIQ(36,IBPIEN,.111)
"RTN","IBY608PO",31,0)
 . . S IBCITY=$$GET1^DIQ(36,IBPIEN,.114)
"RTN","IBY608PO",32,0)
 . . S IBSTATE=$$GET1^DIQ(36,IBPIEN,.115,"I")
"RTN","IBY608PO",33,0)
 . . I +IBSTATE S STATE=$$GET1^DIQ(5,+IBSTATE,1)
"RTN","IBY608PO",34,0)
 . . S INACTFLG=$$GET1^DIQ(36,IBPIEN,.05)
"RTN","IBY608PO",35,0)
 . . I INACTFLG="" S INACTFLG=""
"RTN","IBY608PO",36,0)
 . . S ^TMP(RNAME,$J,IBNAME,IBPIEN)=IBADDRESS_U_IBCITY_U_STATE_U_INACTFLG_U_$S(TRANSMIT="":"",1:"NO")
"RTN","IBY608PO",37,0)
 Q
"RTN","IBY608PO",38,0)
 ;
"RTN","IBY608PO",39,0)
EMAIL ; Send an email message to eBiz Rapid Response group with the report.
"RTN","IBY608PO",40,0)
 N ADDRESS,CITY,DATA,FULLADD,IBNAME,IBNAMEX,IBPIEN,INACTFLG,LN,MSG
"RTN","IBY608PO",41,0)
 N SPACES,SITE,SITENAME,SITENO,STATE,STATION,SUBJ,TOTAL,TRANS,TRANSCD,XMINSTR,XMTO
"RTN","IBY608PO",42,0)
 D BMES^XPDUTL(">> Sending Email...")
"RTN","IBY608PO",43,0)
 D MES^XPDUTL("-------------")
"RTN","IBY608PO",44,0)
 D MES^XPDUTL("Sending email notification to eBiz Rapid response group ... ")
"RTN","IBY608PO",45,0)
 ;S SPACES=$J(" ",100)
"RTN","IBY608PO",46,0)
 S $P(SPACES,"_",100)="_"
"RTN","IBY608PO",47,0)
 S SITE=$$SITE^VASITE,SITENAME=$P(SITE,U,2),SITENO=$P(SITE,U,1),STATION=$P(SITE,U,3)
"RTN","IBY608PO",48,0)
 S SUBJ="PATCH IB*2.0*608 - Insurance Company EDI Report"_" for Station# "_$P(SITE,U,3)_" - "_$P(SITE,U,2)
"RTN","IBY608PO",49,0)
 S SUBJ=$E(SUBJ,1,65)
"RTN","IBY608PO",50,0)
 S MSG(1)="PATCH IB*2.0*608 - Insurance Company EDI Parameter Report"
"RTN","IBY608PO",51,0)
 S MSG(2)=""
"RTN","IBY608PO",52,0)
 S MSG(3)="Site: "_SITENO_" "_SITENAME_" - Station "_STATION
"RTN","IBY608PO",53,0)
 S MSG(4)="Domain: "_$G(^XMB("NETNAME"))
"RTN","IBY608PO",54,0)
 S MSG(5)="Date/Time: "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","IBY608PO",55,0)
 S MSG(6)=""
"RTN","IBY608PO",56,0)
 S MSG(7)="INSURANCE COMPANY__________________ADDRESS__________________________________________________________INACTIVE____EDI-TRANSMIT"
"RTN","IBY608PO",57,0)
 S MSG(8)="============================================================================================================================"
"RTN","IBY608PO",58,0)
 S MSG(9)=""
"RTN","IBY608PO",59,0)
 S LN=10,IBNAME="",TOTAL=0
"RTN","IBY608PO",60,0)
 F  S IBNAME=$O(^TMP(RNAME,$J,IBNAME)) Q:IBNAME=""  D
"RTN","IBY608PO",61,0)
 . S IBPIEN=""
"RTN","IBY608PO",62,0)
 . F  S IBPIEN=$O(^TMP(RNAME,$J,IBNAME,IBPIEN)) Q:IBPIEN=""  D
"RTN","IBY608PO",63,0)
 . . S DATA=^TMP(RNAME,$J,IBNAME,IBPIEN)
"RTN","IBY608PO",64,0)
 . . S IBNAMEX=$$UNSPACE($E(IBNAME,1,30))
"RTN","IBY608PO",65,0)
 . . S ADDRESS=$$UNSPACE($E($P(DATA,U,1),1,30)),CITY=$$UNSPACE($E($P(DATA,U,2),1,25)),STATE=$$UNSPACE($P(DATA,U,3))
"RTN","IBY608PO",66,0)
 . . S FULLADD=ADDRESS_", "_CITY_", "_STATE
"RTN","IBY608PO",67,0)
 . . I '$L(ADDRESS),'$L(CITY),'$L(STATE) S FULLADD=""
"RTN","IBY608PO",68,0)
 . . S INACTFLG=$P(DATA,U,4)
"RTN","IBY608PO",69,0)
 . . S TRANS=$P(DATA,U,5)
"RTN","IBY608PO",70,0)
 . . S LN=LN+1,MSG(LN)=IBNAMEX_$E(SPACES,1,35-$L(IBNAMEX))_FULLADD_$E(SPACES,1,68-$L(FULLADD))
"RTN","IBY608PO",71,0)
 . . S MSG(LN)=MSG(LN)_INACTFLG_$E(SPACES,1,15-$L(INACTFLG))_TRANS
"RTN","IBY608PO",72,0)
 . . S TOTAL=TOTAL+1
"RTN","IBY608PO",73,0)
 S LN=LN+1,MSG(LN)=""
"RTN","IBY608PO",74,0)
 S LN=LN+1,MSG(LN)="Total: "_+TOTAL
"RTN","IBY608PO",75,0)
 S LN=LN+1,MSG(LN)=""
"RTN","IBY608PO",76,0)
 S LN=LN+1,MSG(LN)="End of Report"
"RTN","IBY608PO",77,0)
 ;
"RTN","IBY608PO",78,0)
 ; ***testing email to vito,anne,cj,jane vs live*** must change back to live before putting in build ***
"RTN","IBY608PO",79,0)
 ;S XMTO("vito.d'amico@domain.ext")=""
"RTN","IBY608PO",80,0)
 ;S XMTO("anne.debacker@domain.ext")=""
"RTN","IBY608PO",81,0)
 ;S XMTO("cherie.minch@domain.ext")=""
"RTN","IBY608PO",82,0)
 ;S XMTO("jane.balchunas@domain.ext")=""
"RTN","IBY608PO",83,0)
 ;S XMTO("william.jutzi@domain.ext")=""
"RTN","IBY608PO",84,0)
 S XMTO("VHAeBillingRR@domain.ext")=""
"RTN","IBY608PO",85,0)
 ;
"RTN","IBY608PO",86,0)
 S XMINSTR("FROM")="VistA-eBilling"
"RTN","IBY608PO",87,0)
 D SENDMSG^XMXAPI(DUZ,SUBJ,"MSG",.XMTO,.XMINSTR)
"RTN","IBY608PO",88,0)
 ;
"RTN","IBY608PO",89,0)
EMAILX ;
"RTN","IBY608PO",90,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY608PO",91,0)
 D CLEAN^DILF
"RTN","IBY608PO",92,0)
 Q
"RTN","IBY608PO",93,0)
 ;
"RTN","IBY608PO",94,0)
UNSPACE(FLDX) ; Eliminate spaces at the end of the field.
"RTN","IBY608PO",95,0)
 N I
"RTN","IBY608PO",96,0)
 F  S I=$L(FLDX) Q:($E(FLDX,I)'=" ")  I $E(FLDX,I)=" " S FLDX=$E(FLDX,1,I-1)
"RTN","IBY608PO",97,0)
 Q FLDX
"RTN","IBY608PO",98,0)
 ;
"RTN","IBY608PO",99,0)
CMNCPT ;Set CMN CPT CODES in IB System Parameters
"RTN","IBY608PO",100,0)
 D MES^XPDUTL("Setting CMN CPT Codes in IB SITE PARAMETER file.....")
"RTN","IBY608PO",101,0)
 N CODES,CPTCD,CPTIEN,CPTS,DA,DIC,DIE,DR,ERRMSG,FDA,I,RETIEN
"RTN","IBY608PO",102,0)
 S CODES=""
"RTN","IBY608PO",103,0)
 F I=1:1 S CPTS=$P($T(CPTCD+I),";;",2) Q:CPTS=""  S CODES=$S(CODES="":CPTS,1:CODES_U_CPTS)
"RTN","IBY608PO",104,0)
 F I=1:1 S CPTCD=$P(CODES,U,I) Q:CPTCD=""  D
"RTN","IBY608PO",105,0)
 . S CPTIEN=$$FIND1^DIC(81,,"X",CPTCD) Q:'CPTIEN
"RTN","IBY608PO",106,0)
 . I $D(^IBE(350.9,1,16,"B",CPTIEN)) Q
"RTN","IBY608PO",107,0)
 . K FDA,ERRMSG,RETIEN
"RTN","IBY608PO",108,0)
 . S FDA(350.916,"+1,1,",.01)=CPTIEN
"RTN","IBY608PO",109,0)
 . D UPDATE^DIE("","FDA","RETIEN","ERRMSG")
"RTN","IBY608PO",110,0)
 D MES^XPDUTL(".....CMN CPT Codes set. ")
"RTN","IBY608PO",111,0)
 Q
"RTN","IBY608PO",112,0)
 ;
"RTN","IBY608PO",113,0)
CPTCD ;
"RTN","IBY608PO",114,0)
 ;;B4102^B4103^B4104^B4149^B4150^B4152^B4153^B4154^B4155^B4157^B4158^B4159^B4160^B4161^B4162^B4164^B4168
"RTN","IBY608PO",115,0)
 ;;B4172^B4176^B4178^B4180^B4185^B4189^B4193^B4197^B4199^B4216^B5000^B5100^B5200^B9002^B9004^B9006^E0424
"RTN","IBY608PO",116,0)
 ;;E0431^E0433^E0434^E0439^E0441^E0442^E0443^E0444^E0776^E0791^E1390^E1391^E1392^E1405^E1406^K0738
"RTN","IBY608PO",117,0)
 ;
"RTN","IBY608PR")
0^^B11561553^n/a
"RTN","IBY608PR",1,0)
IBY608PR ;EDE/JRA - Pre-Installation for IB patch 608 ; 10/12/17 2:12 pm
"RTN","IBY608PR",2,0)
 ;;2.0;INTEGRATED BILLING;**608**;21-MAR-94;Build 90
"RTN","IBY608PR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY608PR",4,0)
 ;
"RTN","IBY608PR",5,0)
 ; delete all output formatter (O.F.) data elements included in build
"RTN","IBY608PR",6,0)
 D DELOF
"RTN","IBY608PR",7,0)
 Q
"RTN","IBY608PR",8,0)
 ;
"RTN","IBY608PR",9,0)
INCLUDE(FILE,Y) ; function to determine if O.F. entry should be included in the build
"RTN","IBY608PR",10,0)
 ; FILE=5,6,7 indicating file 364.x or FILE=8 indicating file 350.8 (IB ERROR)
"RTN","IBY608PR",11,0)
 ; Y=ien to file
"RTN","IBY608PR",12,0)
 NEW OK,LN,TAG,DATA
"RTN","IBY608PR",13,0)
 S OK=0
"RTN","IBY608PR",14,0)
 F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
"RTN","IBY608PR",15,0)
 Q OK
"RTN","IBY608PR",16,0)
 ;
"RTN","IBY608PR",17,0)
 ;Delete edited entries to insure clean install of new entries
"RTN","IBY608PR",18,0)
 ;Delete obsolete entries.
"RTN","IBY608PR",19,0)
DELOF   ; Delete included OF entries
"RTN","IBY608PR",20,0)
 NEW FILE,DIK,LN,TAG,TAGLN,DATA,PCE,DA,Y
"RTN","IBY608PR",21,0)
 F FILE=5:1:8 S DIK=$S(FILE=8:"^IBE(350.",1:"^IBA(364.")_FILE_"," D
"RTN","IBY608PR",22,0)
 . F TAG="ENT"_FILE,"DEL"_FILE D
"RTN","IBY608PR",23,0)
 .. F LN=2:1 S TAGLN=TAG_"+"_LN,DATA=$P($T(@TAGLN),";;",2) Q:DATA=""  D
"RTN","IBY608PR",24,0)
 ... F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  D
"RTN","IBY608PR",25,0)
 .... I FILE=8,$D(^IBE(350.8,DA,0)) D ^DIK
"RTN","IBY608PR",26,0)
 .... Q:FILE=8
"RTN","IBY608PR",27,0)
 .... I $D(^IBA("364."_FILE,DA,0)) D ^DIK
"RTN","IBY608PR",28,0)
 Q
"RTN","IBY608PR",29,0)
 ;
"RTN","IBY608PR",30,0)
 ; Example for ENT5, ENT6, ENT7, ENT8, DEL5, DEL6, and DEL7:
"RTN","IBY608PR",31,0)
 ;;^195^254^259^269^324^325^
"RTN","IBY608PR",32,0)
 ; Note:  Must have beginning and ending up-carat
"RTN","IBY608PR",33,0)
 ;
"RTN","IBY608PR",34,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",35,0)
 ; 364.5 O.F. entries added:
"RTN","IBY608PR",36,0)
 ;
"RTN","IBY608PR",37,0)
 ;  225  N-COB CLAIM LEVEL AMOUNTS 'COB1-1.9' (US2486)
"RTN","IBY608PR",38,0)
 ;  226  N-MEDICARE INPT CLAIM COB AMTS 'MIA1-1.9' (US2486)
"RTN","IBY608PR",39,0)
 ;  227  N-MEDICARE OUTPT CLAIM COB AMT 'MOA1-1.9' (US2486)
"RTN","IBY608PR",40,0)
 ;  228  N-COB CLAIM LEVEL ADJUSTMENTS 'CCAS-1.9' (US2486)
"RTN","IBY608PR",41,0)
 ;  396  N-CMN RECORD ID 'LQ  '
"RTN","IBY608PR",42,0)
 ;  438  N-CMN RECORD ID 'FRM '
"RTN","IBY608PR",43,0)
 ;  440  N-CMN RECORD ID 'CMN '
"RTN","IBY608PR",44,0)
 ;  442  N-CMN RECORD ID 'MEA '
"RTN","IBY608PR",45,0)
 ;  
"RTN","IBY608PR",46,0)
ENT5 ;O.F. entries in file 364.5 to be added
"RTN","IBY608PR",47,0)
 ;
"RTN","IBY608PR",48,0)
 ;;^225^226^227^228^396^438^440^442^
"RTN","IBY608PR",49,0)
 ;
"RTN","IBY608PR",50,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",51,0)
 ; 364.6 O.F. entries added:
"RTN","IBY608PR",52,0)
 ;
"RTN","IBY608PR",53,0)
 ;  2383 CMN RECORD ID 'LQ  '
"RTN","IBY608PR",54,0)
 ;  2384 CMN FORM TYPE QUALIFIER
"RTN","IBY608PR",55,0)
 ;  2385 SERVICE LINE #
"RTN","IBY608PR",56,0)
 ;  2387 CMN INDUSTRY CODE
"RTN","IBY608PR",57,0)
 ;  2388 CMN CERTIFICATION TYPE
"RTN","IBY608PR",58,0)
 ;  2390 CMN CERTIFICATION TYPE QUAL
"RTN","IBY608PR",59,0)
 ;  2392 CMN MEASUREMENT REFERENCE ID CODE
"RTN","IBY608PR",60,0)
 ;  2393 CMN PATIENT WEIGHT (LBS)
"RTN","IBY608PR",61,0)
 ;  2394 CMN PATIENT WEIGHT MODIFIER
"RTN","IBY608PR",62,0)
 ;  2395 CMN MONTHS DME EQUIPMENT NEEDED
"RTN","IBY608PR",63,0)
 ;  2396 CMN DATE THERAPY STARTED
"RTN","IBY608PR",64,0)
 ;  2397 CMN DATE THERAPY STARTED QUALIFIER
"RTN","IBY608PR",65,0)
 ;  2398 CMN LAST CERTIFICATION DATE
"RTN","IBY608PR",66,0)
 ;  2399 CMN LAST CERTIFICATION DATE QUALIFIER
"RTN","IBY608PR",67,0)
 ;  2400 CMN RECERTIFICATION/REVISION DATE
"RTN","IBY608PR",68,0)
 ;  2401 CMN REPLACEMENT ITEM?
"RTN","IBY608PR",69,0)
 ;  2433 LQ DATA EXTRACT
"RTN","IBY608PR",70,0)
 ;  2436 FRM DATA EXTRACT
"RTN","IBY608PR",71,0)
 ;  2438 CMN RECORD ID 'FRM '
"RTN","IBY608PR",72,0)
 ;  2439 SERVICE LINE #
"RTN","IBY608PR",73,0)
 ;  2442 CMN QUESTION NUMBER/LETTER
"RTN","IBY608PR",74,0)
 ;  2443 CMN QUESTION RESPONSE Y/N
"RTN","IBY608PR",75,0)
 ;  2444 CMN QUESTION RESPONSE REF ID
"RTN","IBY608PR",76,0)
 ;  2445 CMN QUESTION RESPONSE DATE
"RTN","IBY608PR",77,0)
 ;  2446 CMN QUESTION RESPONSE % & DECIMAL
"RTN","IBY608PR",78,0)
 ;  2447 SERVICE LINE #
"RTN","IBY608PR",79,0)
 ;  2448 CMN DATA EXTRACT
"RTN","IBY608PR",80,0)
 ;  2449 CMN RECORD ID 'CMN '
"RTN","IBY608PR",81,0)
 ;  2451 CMN UNIT OR BASIS FOR MEASUREMENT CODE
"RTN","IBY608PR",82,0)
 ;  2452 CMN CERTIFICATION CONDITION INDICATOR
"RTN","IBY608PR",83,0)
 ;  2453 CMN CONDITION INDICATOR
"RTN","IBY608PR",84,0)
 ;  2454 CMN ATTACHMENT REPORT TYPE CODE
"RTN","IBY608PR",85,0)
 ;  2455 CMN ATTACHMENT TRANSMISSION CODE
"RTN","IBY608PR",86,0)
 ;  2456 CMN CODE CATEGORY
"RTN","IBY608PR",87,0)
 ;  2457 CMN RECORD ID 'MEA '
"RTN","IBY608PR",88,0)
 ;  2458 MEA DATA EXTRACT
"RTN","IBY608PR",89,0)
 ;  2461 SERVICE LINE #
"RTN","IBY608PR",90,0)
 ;  2462 CMN MEASUREMENT QUALIFIER
"RTN","IBY608PR",91,0)
 ;  2463 CMN TEST RESULTS
"RTN","IBY608PR",92,0)
 ;
"RTN","IBY608PR",93,0)
ENT6 ;O.F. entries in file 364.6 to be added
"RTN","IBY608PR",94,0)
 ;
"RTN","IBY608PR",95,0)
 ;;^2383^2384^2385^2387^2388^2390^2392^2393^2394^2395^2396^2397^2398^
"RTN","IBY608PR",96,0)
 ;;^2399^2400^2401^2433^2436^2438^2439^2442^2443^2444^2445^2446^2447^
"RTN","IBY608PR",97,0)
 ;;^2448^2449^2451^2452^2453^2454^2455^2456^2457^2458^2461^2462^2463^
"RTN","IBY608PR",98,0)
 ;
"RTN","IBY608PR",99,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",100,0)
 ; 364.7 O.F. entries added:
"RTN","IBY608PR",101,0)
 ;
"RTN","IBY608PR",102,0)
 ;  105  VC1 VALUE CODE (837 Transaction) (PC 2) (US9)
"RTN","IBY608PR",103,0)
 ;  176  INS SERVICE LINE COUNTER (PC 2) (US9)
"RTN","IBY608PR",104,0)
 ;  178  INS SERVICE UNIT COUNT (PC 5) (US9)
"RTN","IBY608PR",105,0)
 ;  179  INS BLANK (PC 6) (US9)
"RTN","IBY608PR",106,0)
 ;  180  INS SERVICE LINE CHARGE AMT (PC 9) (US9)
"RTN","IBY608PR",107,0)
 ;  181  INS PROCEDURE MODIFIER (1) (PC 7) (US9)
"RTN","IBY608PR",108,0)
 ;  189  INS PROCEDURE CODE (PC 4) (US9)
"RTN","IBY608PR",109,0)
 ;  478  BGN N-RECORD ID (PC1) (US9)
"RTN","IBY608PR",110,0)
 ;  482  INS SERVICE LINE NON-COVERED CHARGE AMT (PC 12) (US9)
"RTN","IBY608PR",111,0)
 ;  805  INS UNITS/BASIS FOR MEASUREMENT CODE (PC 13) (US9)
"RTN","IBY608PR",112,0)
 ;  985  N-GET FROM PREVIOUS EXTRACT 'LCOB-1.9' - US2486
"RTN","IBY608PR",113,0)
 ; 1015  GEN-7
"RTN","IBY608PR",114,0)
 ; 1751  LDATE SERVICE LINE COUNTER (PC 2)
"RTN","IBY608PR",115,0)
 ; 1752  LDAT DATA EXTRACT (837 Transaction) (PC 1.9) (US9)
"RTN","IBY608PR",116,0)
 ; 1765  LDAT CLEANUP (837 Transaction) (PC 99.9) (US9)
"RTN","IBY608PR",117,0)
 ; 1969  CMN RECORD ID 'LQ  '
"RTN","IBY608PR",118,0)
 ; 1970  SERVICE LINE #
"RTN","IBY608PR",119,0)
 ; 1971  CMN FORM TYPE QUALIFIER
"RTN","IBY608PR",120,0)
 ; 1973  CMN INDUSTRY CODE
"RTN","IBY608PR",121,0)
 ; 1974  CMN CERTIFICATION TYPE
"RTN","IBY608PR",122,0)
 ; 1975  CMN CERTIFICATION TYPE QUAL
"RTN","IBY608PR",123,0)
 ; 1977  CMN MEASUREMENT REFERENCE ID CODE
"RTN","IBY608PR",124,0)
 ; 1978  CMN PATIENT WEIGHT (LBS)
"RTN","IBY608PR",125,0)
 ; 1979  CMN PATIENT WEIGHT MODIFIER
"RTN","IBY608PR",126,0)
 ; 1980  CMN MONTHS DME EQUIPMENT NEEDED
"RTN","IBY608PR",127,0)
 ; 1981  CMN DATE THERAPY STARTED
"RTN","IBY608PR",128,0)
 ; 1982  CMN DATE THERAPY STARTED QUALIFIER
"RTN","IBY608PR",129,0)
 ; 1983  CMN LAST CERTIFICATION DATE
"RTN","IBY608PR",130,0)
 ; 1984  CMN LAST CERTIFICATION DATE QUALIFIER
"RTN","IBY608PR",131,0)
 ; 1985  CMN RECERTIFICATION/REVISION DATE
"RTN","IBY608PR",132,0)
 ; 1986  CMN REPLACEMENT ITEM?
"RTN","IBY608PR",133,0)
 ; 2018  LQ DATA EXTRACT
"RTN","IBY608PR",134,0)
 ; 2019  FRM DATA EXTRACT
"RTN","IBY608PR",135,0)
 ; 2020  CMN RECORD ID 'FRM '
"RTN","IBY608PR",136,0)
 ; 2021  CMN QUESTION NUMBER/LETTER
"RTN","IBY608PR",137,0)
 ; 2022  CMN QUESTION RESPONSE Y/N
"RTN","IBY608PR",138,0)
 ; 2023  CMN QUESTION RESPONSE REF ID
"RTN","IBY608PR",139,0)
 ; 2024  CMN QUESTION RESPONSE DATE
"RTN","IBY608PR",140,0)
 ; 2025  CMN QUESTION RESPONSE % & DECIMAL
"RTN","IBY608PR",141,0)
 ; 2026  SERVICE LINE #
"RTN","IBY608PR",142,0)
 ; 2027  SERVICE LINE #
"RTN","IBY608PR",143,0)
 ; 2028  CMN DATA EXTRACT
"RTN","IBY608PR",144,0)
 ; 2029  CMN RECORD ID 'CMN '
"RTN","IBY608PR",145,0)
 ; 2030  CMN UNIT OR BASIS FOR MEASUREMENT CODE
"RTN","IBY608PR",146,0)
 ; 2031  CMN CERTIFICATION CONDITION INDICATOR
"RTN","IBY608PR",147,0)
 ; 2032  CMN ATTACHMENT REPORT TYPE CODE
"RTN","IBY608PR",148,0)
 ; 2033  CMN ATTACHMENT TRANSMISSION CODE
"RTN","IBY608PR",149,0)
 ; 2034  CMN CODE CATEGORY
"RTN","IBY608PR",150,0)
 ; 2035  CMN CONDITION INDICATOR
"RTN","IBY608PR",151,0)
 ; 2038  CMN RECORD ID 'MEA '
"RTN","IBY608PR",152,0)
 ; 2039  MEA DATA EXTRACT
"RTN","IBY608PR",153,0)
 ; 2040  SERVICE LINE #
"RTN","IBY608PR",154,0)
 ; 2041  CMN MEASUREMENT QUALIFIER
"RTN","IBY608PR",155,0)
 ; 2042  CMN TEST RESULTS
"RTN","IBY608PR",156,0)
 ;
"RTN","IBY608PR",157,0)
ENT7 ; O.F. entries in file 364.7 to be added
"RTN","IBY608PR",158,0)
 ;
"RTN","IBY608PR",159,0)
 ;;^105^176^178^179^180^181^189^478^482^805^985^1015^1751^1752^1765^
"RTN","IBY608PR",160,0)
 ;;^1969^1970^1971^1973^1974^1975^1977^1978^1979^1980^1981^
"RTN","IBY608PR",161,0)
 ;;^1982^1983^1984^1985^1986^2018^2019^2020^2021^2022^2023^
"RTN","IBY608PR",162,0)
 ;;^2024^2025^2026^2027^2028^2029^2030^2031^2032^2033^2034^
"RTN","IBY608PR",163,0)
 ;;^2035^2038^2039^2040^2041^2042^
"RTN","IBY608PR",164,0)
 ;
"RTN","IBY608PR",165,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",166,0)
 ; 350.8 O.F. entries added:
"RTN","IBY608PR",167,0)
 ;
"RTN","IBY608PR",168,0)
 ; 239   IB CMN NOT REQ BUT DATA  (IB901)
"RTN","IBY608PR",169,0)
 ; 240   IB CMN FORM TYPE  (IB902)
"RTN","IBY608PR",170,0)
 ; 241   IB CMN NO DATA NODE  (IB903)
"RTN","IBY608PR",171,0)
 ; 243   IB CMN BAD DATA NODE  (IB904)
"RTN","IBY608PR",172,0)
 ; 244   IB CMN CERT TYPE  (IB905)
"RTN","IBY608PR",173,0)
 ; 246   IB CMN THERAPY DT  (IB907)
"RTN","IBY608PR",174,0)
 ; 247   IB CMN LAST CERT DT  (IB908)
"RTN","IBY608PR",175,0)
 ; 248   IB CMN RECERT/REVISION DT  (IB909)
"RTN","IBY608PR",176,0)
 ; 259   IB CMN ABG SAT DT  (IB912)
"RTN","IBY608PR",177,0)
 ; 271   IB CMN 4 LPM DATE  (IB914)
"RTN","IBY608PR",178,0)
 ; 272   IB CMN ERRORS HEADER  (IB915)
"RTN","IBY608PR",179,0)
 ; 273   IB CMN PEB (IB906)
"RTN","IBY608PR",180,0)
 ;
"RTN","IBY608PR",181,0)
ENT8 ;O.F. entries in file 350.8 to be added
"RTN","IBY608PR",182,0)
 ;
"RTN","IBY608PR",183,0)
 ;;^239^240^241^243^244^246^247^248^259^271^272^273^
"RTN","IBY608PR",184,0)
 ;
"RTN","IBY608PR",185,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",186,0)
 ; 364.5 entries deleted:
"RTN","IBY608PR",187,0)
 ;
"RTN","IBY608PR",188,0)
DEL5    ; remove O.F. entries in file 364.5 (not re-added)
"RTN","IBY608PR",189,0)
 ;
"RTN","IBY608PR",190,0)
 ;;
"RTN","IBY608PR",191,0)
 ;
"RTN","IBY608PR",192,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",193,0)
 ; 364.6 entries deleted:
"RTN","IBY608PR",194,0)
 ;
"RTN","IBY608PR",195,0)
DEL6    ; remove O.F. entries in file 364.6 (not re-added)
"RTN","IBY608PR",196,0)
 ;
"RTN","IBY608PR",197,0)
 ;;
"RTN","IBY608PR",198,0)
 ;
"RTN","IBY608PR",199,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",200,0)
 ; 364.7 entries deleted:
"RTN","IBY608PR",201,0)
 ;
"RTN","IBY608PR",202,0)
 ;
"RTN","IBY608PR",203,0)
DEL7    ; remove O.F. entries in file 364.7 (not re-added)
"RTN","IBY608PR",204,0)
 ;
"RTN","IBY608PR",205,0)
 ;;
"RTN","IBY608PR",206,0)
 ;
"RTN","IBY608PR",207,0)
 ;-----------------------------------------------------------------------
"RTN","IBY608PR",208,0)
 ; 350.8 Entries deleted:
"RTN","IBY608PR",209,0)
 ;
"RTN","IBY608PR",210,0)
 ;  238  IB CMN REQ
"RTN","IBY608PR",211,0)
 ;
"RTN","IBY608PR",212,0)
DEL8    ; remove entries from 350.8 (IB ERROR)
"RTN","IBY608PR",213,0)
 ;
"RTN","IBY608PR",214,0)
 ;;
"RTN","IBY608PR",215,0)
 ;
"SEC","^DIC",399.6,399.6,0,"AUDIT")
@
"SEC","^DIC",399.6,399.6,0,"DD")
@
"SEC","^DIC",399.6,399.6,0,"DEL")
@
"SEC","^DIC",399.6,399.6,0,"LAYGO")
@
"SEC","^DIC",399.6,399.6,0,"RD")
@
"SEC","^DIC",399.6,399.6,0,"WR")
@
"UP",350.9,350.916,-1)
350.9^16
"UP",350.9,350.916,0)
350.916
"UP",350.9,350.928,-1)
350.9^28
"UP",350.9,350.928,0)
350.928
"UP",350.9,350.929,-1)
350.9^29
"UP",350.9,350.929,0)
350.929
"UP",399,399.0304,-1)
399^CP
"UP",399,399.0304,0)
399.0304
"VER")
8.0^22.2
"^DD",36,36,3.01,0)
TRANSMIT ELECTRONICALLY^RSXa^1:YES-LIVE;2:YES-TEST;^3;1^K:'$$EDIKEY^IBCNSC X
"^DD",36,36,3.01,3)
Enter 1 to bill electronically 2 to only transmit for testing
"^DD",36,36,3.01,21,0)
^.001^2^2^3171211^^^^
"^DD",36,36,3.01,21,1,0)
This field determines whether an electronic claim to this insurance 
"^DD",36,36,3.01,21,2,0)
company is sent as a test or a production claim.
"^DD",36,36,3.01,"AUDIT")
y
"^DD",36,36,3.01,"DT")
3180829
"^DD",350.8,350.8,0)
FIELD^^10^7
"^DD",350.8,350.8,0,"DDA")
N
"^DD",350.8,350.8,0,"DT")
2930322
"^DD",350.8,350.8,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",350.8,350.8,0,"IX","AC",350.8,.03)

"^DD",350.8,350.8,0,"IX","B",350.8,.01)

"^DD",350.8,350.8,0,"IX","C",350.8,.03)

"^DD",350.8,350.8,0,"NM","IB ERROR")
 
"^DD",350.8,350.8,0,"PT",399,36)

"^DD",350.8,350.8,0,"VRPK")
IB
"^DD",350.8,350.8,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",350.8,350.8,.01,1,0)
^.1
"^DD",350.8,350.8,.01,1,1,0)
350.8^B
"^DD",350.8,350.8,.01,1,1,1)
S ^IBE(350.8,"B",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.01,1,1,2)
K ^IBE(350.8,"B",$E(X,1,30),DA)
"^DD",350.8,350.8,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",350.8,350.8,.01,21,0)
^^2^2^2910305^^
"^DD",350.8,350.8,.01,21,1,0)
This is a free text name of the entry.  It should be namespaced with
"^DD",350.8,350.8,.01,21,2,0)
the namespace of the package reporting the error.
"^DD",350.8,350.8,.02,0)
ERROR MESSAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",350.8,350.8,.02,3)
Answer must be 3-80 characters in length.
"^DD",350.8,350.8,.02,21,0)
^^3^3^2940209^^^^
"^DD",350.8,350.8,.02,21,1,0)
This is the text of the message as it will be displayed to a user or
"^DD",350.8,350.8,.02,21,2,0)
posted in a bulletin.  It should be as meaningful as possible to the
"^DD",350.8,350.8,.02,21,3,0)
person seeing the message.
"^DD",350.8,350.8,.03,0)
ERROR CODE^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
"^DD",350.8,350.8,.03,1,0)
^.1
"^DD",350.8,350.8,.03,1,1,0)
350.8^AC
"^DD",350.8,350.8,.03,1,1,1)
S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,1,2)
K ^IBE(350.8,"AC",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,1,2,0)
350.8^C
"^DD",350.8,350.8,.03,1,2,1)
S ^IBE(350.8,"C",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,2,2)
K ^IBE(350.8,"C",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,3)
Answer must be 1-9 characters in length.
"^DD",350.8,350.8,.03,21,0)
^^9^9^2920219^^^^
"^DD",350.8,350.8,.03,21,1,0)
This is the error code that will be passed to or determined by
"^DD",350.8,350.8,.03,21,2,0)
Integrated Billing.  The format for the Error Code should be
"^DD",350.8,350.8,.03,21,3,0)
nnxxx, where nn is the reporting package namespace and xxx are numeric
"^DD",350.8,350.8,.03,21,4,0)
values.
"^DD",350.8,350.8,.03,21,5,0)
 
"^DD",350.8,350.8,.03,21,6,0)
This is the error code that will be passed as the second piece of
"^DD",350.8,350.8,.03,21,7,0)
the variable Y to IB when +Y=-1.  More than one error code can be
"^DD",350.8,350.8,.03,21,8,0)
placed in the second ^ piece of Y delimited by semi-colons.  Applications
"^DD",350.8,350.8,.03,21,9,0)
may call ^IBAERR to display the error message(s).
"^DD",350.8,350.8,.03,"DT")
2920219
"^DD",350.8,350.8,.04,0)
PACKAGE REPORTING ERROR^S^1:INTEGRATED BILLING;2:ACCOUNTS RECEIVABLE;3:PHARMACY;^0;4^Q
"^DD",350.8,350.8,.04,21,0)
^^2^2^2920415^^^
"^DD",350.8,350.8,.04,21,1,0)
This is the package that requested this entry in this file and will
"^DD",350.8,350.8,.04,21,2,0)
report it to IB as an error if the conditions are detected.
"^DD",350.8,350.8,.05,0)
ERROR ACTION^S^1:DISPLAY MESSAGE;2:SEND BULLETIN;3:EDIT FILE;^0;5^Q
"^DD",350.8,350.8,.05,21,0)
^^6^6^2910227^
"^DD",350.8,350.8,.05,21,1,0)
This is the type of action that should be taken when this error is
"^DD",350.8,350.8,.05,21,2,0)
reported to IB.  If action other than displaying a message is indicated
"^DD",350.8,350.8,.05,21,3,0)
then the MUMPS code in the ERROR ACTION field will be executed.
"^DD",350.8,350.8,.05,21,4,0)
 
"^DD",350.8,350.8,.05,21,5,0)
Currently only display actions are implemented.  Please contact the 
"^DD",350.8,350.8,.05,21,6,0)
developing ISC if other action types are desired.
"^DD",350.8,350.8,.06,0)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"^DD",350.8,350.8,.06,21,0)
^^1^1^2940209^
"^DD",350.8,350.8,.06,21,1,0)
This is the type of alert that should be sent when this error occurs.
"^DD",350.8,350.8,.06,"DT")
2930322
"^DD",350.8,350.8,10,0)
EXECUTABLE LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",350.8,350.8,10,3)
This is Standard MUMPS code.
"^DD",350.8,350.8,10,21,0)
^^2^2^2910227^
"^DD",350.8,350.8,10,21,1,0)
This is the MUMPS code that will be executed if an error is reported
"^DD",350.8,350.8,10,21,2,0)
with an ERROR ACTION of other than to display a message.
"^DD",350.9,350.9,16,0)
CMN CPT CODES^350.916PA^^16;0
"^DD",350.9,350.9,28,0)
NON-MCCF RATE TYPES FOR PTP^350.928PA^^28;0
"^DD",350.9,350.9,28,21,0)
^^3^3^3180227^^
"^DD",350.9,350.9,28,21,1,0)
This contains the Non-MCCF Rate Types that are related to the Non-MCCF 
"^DD",350.9,350.9,28,21,2,0)
Pay-To Providers.  If a claim has one of the rate types in this multiple 
"^DD",350.9,350.9,28,21,3,0)
field, the claim is considered to be a Non-MCCF Claim.
"^DD",350.9,350.9,29,0)
TRICARE PAY-TO PROVIDERS^350.929P^^29;0
"^DD",350.9,350.9,29,21,0)
^^2^2^3180222^
"^DD",350.9,350.9,29,21,1,0)
This multiple contains the list of Non-MCCF-specific Pay-To Providers for 
"^DD",350.9,350.9,29,21,2,0)
this VistA database.
"^DD",350.9,350.916,0)
CMN CPT CODES SUB-FIELD^^.01^1
"^DD",350.9,350.916,0,"DT")
3190124
"^DD",350.9,350.916,0,"IX","B",350.916,.01)

"^DD",350.9,350.916,0,"NM","CMN CPT CODES")

"^DD",350.9,350.916,0,"UP")
350.9
"^DD",350.9,350.916,.01,0)
CMN CPT CODES^P81'^ICPT(^0;1^Q
"^DD",350.9,350.916,.01,1,0)
^.1
"^DD",350.9,350.916,.01,1,1,0)
350.916^B
"^DD",350.9,350.916,.01,1,1,1)
S ^IBE(350.9,DA(1),16,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.916,.01,1,1,2)
K ^IBE(350.9,DA(1),16,"B",$E(X,1,30),DA)
"^DD",350.9,350.916,.01,3)
Enter a CPT code which should prompt biller for CMN.
"^DD",350.9,350.916,.01,"DT")
3180221
"^DD",350.9,350.928,0)
NON-MCCF RATE TYPES FOR PTP SUB-FIELD^^.01^1
"^DD",350.9,350.928,0,"DT")
3190124
"^DD",350.9,350.928,0,"IX","B",350.928,.01)

"^DD",350.9,350.928,0,"NM","NON-MCCF RATE TYPES FOR PTP")

"^DD",350.9,350.928,0,"UP")
350.9
"^DD",350.9,350.928,.01,0)
NON-MCCF RATE TYPES FOR PTP^MP399.3'^DGCR(399.3,^0;1^Q
"^DD",350.9,350.928,.01,1,0)
^.1
"^DD",350.9,350.928,.01,1,1,0)
350.928^B
"^DD",350.9,350.928,.01,1,1,1)
S ^IBE(350.9,DA(1),28,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.928,.01,1,1,2)
K ^IBE(350.9,DA(1),28,"B",$E(X,1,30),DA)
"^DD",350.9,350.928,.01,3)
Enter Rate Types for which non-MCCF Pay to Provider should be used.
"^DD",350.9,350.928,.01,21,0)
^^2^2^3180227^
"^DD",350.9,350.928,.01,21,1,0)
Each multiple field should be a Non-MCCF Rate Type.  It is used to 
"^DD",350.9,350.928,.01,21,2,0)
determine if a claim is a Non-MCCF Claim.
"^DD",350.9,350.928,.01,"DT")
3180227
"^DD",350.9,350.929,0)
TRICARE PAY-TO PROVIDERS SUB-FIELD^^1.05^10
"^DD",350.9,350.929,0,"NM","TRICARE PAY-TO PROVIDERS")

"^DD",350.9,350.929,.01,0)
TC FACILITY^*P4'^DIC(4,^0;1^S DIC("S")="I $$SCRN4^IBJPS4(Y)" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",350.9,350.929,.01,1,0)
^.1
"^DD",350.9,350.929,.01,1,1,0)
350.929^B
"^DD",350.9,350.929,.01,1,1,1)
S ^IBE(350.9,DA(1),29,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.929,.01,1,1,2)
K ^IBE(350.9,DA(1),29,"B",$E(X,1,30),DA)
"^DD",350.9,350.929,.01,3)
Please choose the Non-MCCF-specific Pay-To Provider from the Institution file.
"^DD",350.9,350.929,.01,12)
Inactive, not national, and pharmacy entries are screened out.
"^DD",350.9,350.929,.01,12.1)
S DIC("S")="I $$SCRN4^IBJPS4(Y)"
"^DD",350.9,350.929,.01,21,0)
^^7^7^3180222^
"^DD",350.9,350.929,.01,21,1,0)
Enter a Non-MCCF-specific Pay-to Provider.  Usually, a Pay-to
"^DD",350.9,350.929,.01,21,2,0)
Provider is a medical center (e.g. VAMC, M&ROC, etc.).  If you
"^DD",350.9,350.929,.01,21,3,0)
enter only one Non-MCCF-specific Pay-to Provider, it will be the 
"^DD",350.9,350.929,.01,21,4,0)
default Pay-to Provider for all Non-MCCF claims and you would not 
"^DD",350.9,350.929,.01,21,5,0)
need to associate divisions with the default.  Multiple Non-MCCF- 
"^DD",350.9,350.929,.01,21,6,0)
specific Pay-to Providers must be associated with the divisions 
"^DD",350.9,350.929,.01,21,7,0)
to which they apply.
"^DD",350.9,350.929,.01,"DT")
3180222
"^DD",350.9,350.929,.02,0)
TC NAME^RF^^0;2^K:$L(X)>35!($L(X)<1) X
"^DD",350.9,350.929,.02,.1)
Non-MCCF Pay-to Provider Name
"^DD",350.9,350.929,.02,3)
Answer must be 1-35 characters in length.
"^DD",350.9,350.929,.02,21,0)
^^2^2^3180222^
"^DD",350.9,350.929,.02,21,1,0)
You may modify the Non-MCCF-specific Pay-to Provider name for use on 
"^DD",350.9,350.929,.02,21,2,0)
electronic or printed claims.
"^DD",350.9,350.929,.02,23,0)
^.001^1^1^3180222^^^^
"^DD",350.9,350.929,.02,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,.02,"DT")
3180222
"^DD",350.9,350.929,.03,0)
TC FEDERAL TAX NUMBER^F^^0;3^K:$L(X)>10!($L(X)<10)!'(X?2N1"-"7N) X
"^DD",350.9,350.929,.03,.1)
Non-MCCF Pay-to Provider Federal Tax ID Number
"^DD",350.9,350.929,.03,3)
Answer must be 10 characters in the format NN-NNNNNNN.
"^DD",350.9,350.929,.03,21,0)
^^4^4^3180222^
"^DD",350.9,350.929,.03,21,1,0)
Enter the Federal Tax ID for the Non-MCCF-specific Pay-to Provider.  Make 
"^DD",350.9,350.929,.03,21,2,0)
sure you enter the Tax ID Number for the Non-MCCF Pay-to Provider, which 
"^DD",350.9,350.929,.03,21,3,0)
may be different from your site's Tax ID.  Enter 10 characters in the
"^DD",350.9,350.929,.03,21,4,0)
format NN-NNNNNNN.
"^DD",350.9,350.929,.03,23,0)
^.001^3^3^3180222^^^
"^DD",350.9,350.929,.03,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field if the .01 
"^DD",350.9,350.929,.03,23,2,0)
field is the same institution as defined in the IB site parameters field 
"^DD",350.9,350.929,.03,23,3,0)
350.9, .02.
"^DD",350.9,350.929,.03,"DT")
3180222
"^DD",350.9,350.929,.04,0)
TC TELEPHONE NUMBER^F^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",350.9,350.929,.04,.1)
Non-MCCF Pay-to Provider Phone Number
"^DD",350.9,350.929,.04,3)
Answer must be 1-30 characters in length.
"^DD",350.9,350.929,.04,21,0)
^^3^3^3180222^
"^DD",350.9,350.929,.04,21,1,0)
Enter the phone number to be used on electronic or printed claims.  This 
"^DD",350.9,350.929,.04,21,2,0)
is the number you would want a payer to use to contact the site about a 
"^DD",350.9,350.929,.04,21,3,0)
Non-MCCF claim.
"^DD",350.9,350.929,.04,"DT")
3180222
"^DD",350.9,350.929,.05,0)
TC PARENT PAY-TO PROVIDER^NJ4,0^^0;5^K:+X'=X!(X>9999)!(X<1)!(X?.E1"."1N.N) X
"^DD",350.9,350.929,.05,3)
Type a number between 1 and 9999, 0 decimal digits.
"^DD",350.9,350.929,.05,21,0)
^^13^13^3180222^
"^DD",350.9,350.929,.05,21,1,0)
This field determines if this entry in the sub-file is a Non-MCCF Pay-to 
"^DD",350.9,350.929,.05,21,2,0)
Provider institution or if it is a Division being linked to the parent 
"^DD",350.9,350.929,.05,21,3,0)
Non-MCCF Pay-to Provider institution, that is, another sub-file entry.
"^DD",350.9,350.929,.05,21,4,0)
 
"^DD",350.9,350.929,.05,21,5,0)
If this field is defined, then it holds the IEN in this sub-file of the 
"^DD",350.9,350.929,.05,21,6,0)
parent Non-MCCF Pay-to Provider institution for this specific division.
"^DD",350.9,350.929,.05,21,7,0)
 
"^DD",350.9,350.929,.05,21,8,0)
If this field is nil, then this sub-file entry is the parent Non-MCCF 
"^DD",350.9,350.929,.05,21,9,0)
Pay-to Provider institution.
"^DD",350.9,350.929,.05,21,10,0)
 
"^DD",350.9,350.929,.05,21,11,0)
This field should not be set via FileMan.  The application in the IB Site 
"^DD",350.9,350.929,.05,21,12,0)
Paremeter edit option will set this field appropriately based on user 
"^DD",350.9,350.929,.05,21,13,0)
input.
"^DD",350.9,350.929,.05,"DT")
3180222
"^DD",350.9,350.929,1.01,0)
TC STREET ADDRESS 1^F^^1;1^K:$L(X)>55!($L(X)<1) X
"^DD",350.9,350.929,1.01,.1)
Non-MCCF Pay-to Provider Address Line 1
"^DD",350.9,350.929,1.01,3)
Answer must be 1-55 characters in length.
"^DD",350.9,350.929,1.01,21,0)
^^2^2^3180222^
"^DD",350.9,350.929,1.01,21,1,0)
You may modify the Non-MCCF-specific Pay-To Provider Address for use on 
"^DD",350.9,350.929,1.01,21,2,0)
electronic or printed claims.  You may enter a P.O. Box.
"^DD",350.9,350.929,1.01,23,0)
^^1^1^3180222^^
"^DD",350.9,350.929,1.01,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,1.01,"DT")
3180222
"^DD",350.9,350.929,1.02,0)
TC STREET ADDRESS 2^F^^1;2^K:$L(X)>55!($L(X)<1) X
"^DD",350.9,350.929,1.02,.1)
Non-MCCF Pay-to Provider Address Line 2
"^DD",350.9,350.929,1.02,3)
Answer must be 1-55 characters in length.
"^DD",350.9,350.929,1.02,21,0)
^^1^1^3180222^^
"^DD",350.9,350.929,1.02,21,1,0)
Enter additional address information, if needed.
"^DD",350.9,350.929,1.02,23,0)
^^1^1^3180222^^
"^DD",350.9,350.929,1.02,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,1.02,"DT")
3180222
"^DD",350.9,350.929,1.03,0)
TC CITY^F^^1;3^K:$L(X)>40!($L(X)<2) X
"^DD",350.9,350.929,1.03,.1)
Non-MCCF Pay-to Provider City
"^DD",350.9,350.929,1.03,3)
Answer must be 2-40 characters in length.
"^DD",350.9,350.929,1.03,21,0)
^^2^2^3180222^
"^DD",350.9,350.929,1.03,21,1,0)
You may modify the Non-MCCF Pay-to Provider address for use on electronic 
"^DD",350.9,350.929,1.03,21,2,0)
or printed claims.
"^DD",350.9,350.929,1.03,23,0)
^^1^1^3180222^^
"^DD",350.9,350.929,1.03,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,1.03,"DT")
3180222
"^DD",350.9,350.929,1.04,0)
TC STATE^P5'^DIC(5,^1;4^Q
"^DD",350.9,350.929,1.04,.1)
Non-MCCF Pay-to Provider State
"^DD",350.9,350.929,1.04,3)
Answer with State Number, or Name, or Abbreviation.
"^DD",350.9,350.929,1.04,21,0)
^^2^2^3180222^
"^DD",350.9,350.929,1.04,21,1,0)
You may modify the Non-MCCF Pay-to Provider address for use on electronic 
"^DD",350.9,350.929,1.04,21,2,0)
or printed claims.
"^DD",350.9,350.929,1.04,23,0)
^.001^1^1^3180222^^^
"^DD",350.9,350.929,1.04,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,1.04,"DT")
3180222
"^DD",350.9,350.929,1.05,0)
TC ZIP^F^^1;5^K:$L(X)>15!($L(X)<3) X
"^DD",350.9,350.929,1.05,.1)
Non-MCCF Pay-to Provider Zip Code
"^DD",350.9,350.929,1.05,3)
Answer must be 3-15 characters in length.
"^DD",350.9,350.929,1.05,21,0)
^^2^2^3180222^
"^DD",350.9,350.929,1.05,21,1,0)
You may modify the Non-MCCF Pay-to Provider address for use on electronic 
"^DD",350.9,350.929,1.05,21,2,0)
or printed claims.
"^DD",350.9,350.929,1.05,23,0)
^.001^1^1^3180222^^^
"^DD",350.9,350.929,1.05,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.929,1.05,"DT")
3180222
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)

"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")

"^DD",364.5,364.5,0,"PT",364.7,.03)

"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.04^1
"^DD",364.5,364.5,.06,5,2,0)
364.5^.03^2
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")

"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3071126
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>40!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1^^0
"^DD",364.6,364.6,.1,3)
Answer must be 1-40 characters in length
"^DD",364.6,364.6,.1,21,0)
^^2^2^3071126^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
3080310
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DD",399,399.0304,23,0)
CMN REQUIRED?^RS^0:NO;1:YES;^CMN;1^Q
"^DD",399,399.0304,23,.1)
CMN Required?
"^DD",399,399.0304,23,3)
Enter 'Yes' (1) if this procedure requires a Certificate of Medical Necessity, or 'No' (0) if it does not.
"^DD",399,399.0304,23,21,0)
^^2^2^3171115^
"^DD",399,399.0304,23,21,1,0)
This field indicates whether a Certificate of Medical Necessity must be 
"^DD",399,399.0304,23,21,2,0)
submitted with this procedure.
"^DD",399,399.0304,23,"DT")
3171115
"^DD",399,399.0304,24,0)
CMN FORM TYPE^P399.6'^IBE(399.6,^CMN;2^Q
"^DD",399,399.0304,24,.1)
CMN Form type
"^DD",399,399.0304,24,3)
Select the REQUIRED CMN form type that will be sent with this procedure.
"^DD",399,399.0304,24,21,0)
^.001^2^2^3180503^^^
"^DD",399,399.0304,24,21,1,0)
This field indicates the Certificate of Medical Necessity form type
"^DD",399,399.0304,24,21,2,0)
that is to be submitted with this procedure.
"^DD",399,399.0304,24,23,0)
^.001^2^2^3180503^^^^
"^DD",399,399.0304,24,23,1,0)
If the CMN Required? field is set to "Y"es, this field must be an entry in
"^DD",399,399.0304,24,23,2,0)
the CMS FORM TYPES file #399.6.
"^DD",399,399.0304,24,"DT")
3180308
"^DD",399,399.0304,24.01,0)
CMN CERTIFICATION TYPE^S^I:INITIAL;R:RENEWAL;S:REVISED;^CMN;3^Q
"^DD",399,399.0304,24.01,.1)
Certification Type
"^DD",399,399.0304,24.01,3)
Select the REQUIRED Type of Certification requested.
"^DD",399,399.0304,24.01,21,0)
^.001^1^1^3180308^^^^
"^DD",399,399.0304,24.01,21,1,0)
This field indicates the type of Certification that is being requested.
"^DD",399,399.0304,24.01,"DT")
3180308
"^DD",399,399.0304,24.02,0)
CMN PATIENT HEIGHT (IN)^NJ3,0X^^CMN;4^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.02,.1)
Patient Height (in)
"^DD",399,399.0304,24.02,3)
Enter the Patient's height in whole numbers representing inches.
"^DD",399,399.0304,24.02,11,0)
^.2LAP
"^DD",399,399.0304,24.02,21,0)
^^2^2^3180403^
"^DD",399,399.0304,24.02,21,1,0)
This field indicates the Patient's height in whole numbers representing 
"^DD",399,399.0304,24.02,21,2,0)
inches.
"^DD",399,399.0304,24.02,"DT")
3180403
"^DD",399,399.0304,24.03,0)
CMN PATIENT WEIGHT (LBS)^NJ3,0X^^CMN;5^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.03,.1)
Patient Weight (lbs)
"^DD",399,399.0304,24.03,3)
Enter the Patient's weight in whole numbers representing pounds.
"^DD",399,399.0304,24.03,21,0)
^.001^2^2^3171118^^^^
"^DD",399,399.0304,24.03,21,1,0)
This field indicates the Patient's weight in whole numbers representing 
"^DD",399,399.0304,24.03,21,2,0)
pounds.
"^DD",399,399.0304,24.03,"DT")
3180302
"^DD",399,399.0304,24.04,0)
CMN MONTHS DME EQUIP NEEDED^NJ2,0^^CMN;6^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.04,.1)
Months DME Equipment Needed
"^DD",399,399.0304,24.04,3)
Enter the number of MONTHS the patient will need the DME Equipment.  Enter 1-99 with 99 equal to a lifetime.
"^DD",399,399.0304,24.04,21,0)
^.001^2^2^3171114^^^^
"^DD",399,399.0304,24.04,21,1,0)
This field indicates the number of MONTHS that the Patient will need the 
"^DD",399,399.0304,24.04,21,2,0)
DME Equipment.  '99' represents a lifetime.
"^DD",399,399.0304,24.04,"DT")
3171114
"^DD",399,399.0304,24.05,0)
CMN DATE THERAPY STARTED^D^^CMN;7^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,24.05,.1)
Date Therapy Started
"^DD",399,399.0304,24.05,3)
Enter the REQUIRED date the therapy began.
"^DD",399,399.0304,24.05,21,0)
^.001^1^1^3180308^^^^
"^DD",399,399.0304,24.05,21,1,0)
This field indicates the date the therapy began.
"^DD",399,399.0304,24.05,"DT")
3180308
"^DD",399,399.0304,24.06,0)
CMN LAST CERTIFICATION DATE^D^^CMN;8^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,24.06,.1)
Last Certification Date
"^DD",399,399.0304,24.06,3)
Enter the REQUIRED date the physician signed the Certificate of Medical Necessity.
"^DD",399,399.0304,24.06,21,0)
^.001^2^2^3180308^^^^
"^DD",399,399.0304,24.06,21,1,0)
This field indicates the date the physician signed the Certificate of 
"^DD",399,399.0304,24.06,21,2,0)
Medical Necessity.
"^DD",399,399.0304,24.06,"DT")
3180308
"^DD",399,399.0304,24.07,0)
CMN RECERTIFICATION/REVISN DT^D^^CMN;9^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,24.07,.1)
Recertification/Revision Date
"^DD",399,399.0304,24.07,3)
If the Certification Type is a Renewal or Revised, enter a REQUIRED Recertification/Revision date.
"^DD",399,399.0304,24.07,21,0)
^.001^2^2^3180308^^^^
"^DD",399,399.0304,24.07,21,1,0)
If the Certification Type is a Renewal or Revised, this field is REQUIRED 
"^DD",399,399.0304,24.07,21,2,0)
and indicates the date of the Recertification/Renewal.
"^DD",399,399.0304,24.07,"DT")
3171114
"^DD",399,399.0304,24.08,0)
CMN REPLACEMENT ITEM?^S^0:NO;1:YES;^CMN;10^Q
"^DD",399,399.0304,24.08,.1)
Replacement Item?
"^DD",399,399.0304,24.08,3)
Enter 'Yes' (1) if this item is being billed as a replacement item, or 'No' (0) if it is not.
"^DD",399,399.0304,24.08,21,0)
^^2^2^3171122^
"^DD",399,399.0304,24.08,21,1,0)
This field indicates whether or not the item being billed is a 
"^DD",399,399.0304,24.08,21,2,0)
Replacement item.
"^DD",399,399.0304,24.08,"DT")
3171114
"^DD",399,399.0304,24.1,0)
CMN ABG PO2 (MMHG)^NJ3,0X^^CMN-484;16^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.1,.1)
ABG PO2 (mmHg)
"^DD",399,399.0304,24.1,3)
Enter the result of the most recent ABG test.  Enter a whole Number which will be reported as mmHg.
"^DD",399,399.0304,24.1,11,0)
^.2LAP
"^DD",399,399.0304,24.1,21,0)
^.001^2^2^3180403^^^^
"^DD",399,399.0304,24.1,21,1,0)
This field indicates the result of the most recent ABG test.  The Number 
"^DD",399,399.0304,24.1,21,2,0)
entered will be reported as mmHg.
"^DD",399,399.0304,24.1,"DT")
3180302
"^DD",399,399.0304,24.102,0)
CMN O2 SATURATION %^NJ3,0X^^CMN-484;2^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.102,.1)
O2 Saturation (%)
"^DD",399,399.0304,24.102,3)
Enter the result of the most recent Oxygen saturation test.  Enter a whole number which will be reported as %.
"^DD",399,399.0304,24.102,21,0)
^.001^2^2^3171114^^^
"^DD",399,399.0304,24.102,21,1,0)
This field indicates the result of the most recent Oxygen saturation 
"^DD",399,399.0304,24.102,21,2,0)
test.  The number entered will be reported as %.
"^DD",399,399.0304,24.102,"DT")
3180302
"^DD",399,399.0304,24.103,0)
CMN DT LAST ABG PO2 AND O2 SAT^D^^CMN-484;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,24.103,.1)
Date of Last ABG PO2 and/or O2 Saturation Test(s)
"^DD",399,399.0304,24.103,3)
Enter the REQUIRED date for the most recent ABG PO2 and/or O2 Saturation Test(s).
"^DD",399,399.0304,24.103,21,0)
^^2^2^3180314^
"^DD",399,399.0304,24.103,21,1,0)
This field indicates the Date for the most recent ABG PO2 and/or O2
"^DD",399,399.0304,24.103,21,2,0)
Saturation test(s).
"^DD",399,399.0304,24.103,"DT")
3180314
"^DD",399,399.0304,24.104,0)
CMN EDEMA DUE TO CHF PRESENT?^S^0:NO;1:YES;^CMN-484;4^Q
"^DD",399,399.0304,24.104,.1)
Edema due to CHF Present?
"^DD",399,399.0304,24.104,3)
Enter 'Yes' (1) if Edema being due to CHF being Present, or 'No' (0) if it is not.
"^DD",399,399.0304,24.104,21,0)
^.001^2^2^3171114^^^
"^DD",399,399.0304,24.104,21,1,0)
This field indicates whether or not the patient has dependent Edema due 
"^DD",399,399.0304,24.104,21,2,0)
to Congestive Heart Failure.
"^DD",399,399.0304,24.104,"DT")
3171114
"^DD",399,399.0304,24.105,0)
CMN COR PULMONARY HYPERTENSN?^S^0:NO;1:YES;^CMN-484;5^Q
"^DD",399,399.0304,24.105,.1)
COR Pulmonale/Pulmonary Hypertension Present?
"^DD",399,399.0304,24.105,3)
Enter 'Yes' (1) if COR Pulmonale or Pulmonary Hypertension is Present, or 'No' (0) if it is not.
"^DD",399,399.0304,24.105,21,0)
^^4^4^3171122^
"^DD",399,399.0304,24.105,21,1,0)
This field indicates whether or not the patient has cor pulmonate or 
"^DD",399,399.0304,24.105,21,2,0)
pulmonary hypertension documented by P pulmonale on an EKG or
"^DD",399,399.0304,24.105,21,3,0)
echocardiogram, gated blood pool scan or direct pulmonary artery pressure
"^DD",399,399.0304,24.105,21,4,0)
measurement.
"^DD",399,399.0304,24.105,"DT")
3171114
"^DD",399,399.0304,24.106,0)
CMN HEMATOCRIT > 56%?^S^0:NO;1:YES;^CMN-484;6^Q
"^DD",399,399.0304,24.106,.1)
Hematocrit > 56%?
"^DD",399,399.0304,24.106,3)
Enter 'Yes' (1) if the patient has a Hematocrit level greater that 56% or 'No' (0) if not.
"^DD",399,399.0304,24.106,21,0)
^^2^2^3171122^
"^DD",399,399.0304,24.106,21,1,0)
This field indicates whether or not the patient has a Hematocrit level 
"^DD",399,399.0304,24.106,21,2,0)
greater than 56%.
"^DD",399,399.0304,24.106,"DT")
3171114
"^DD",399,399.0304,24.107,0)
CMN PT CONDITION AT TEST TIME^S^1:CHRONIC AND STABLE AS OUTPT;2:W/I TWO DAYS PRIOR TO D/C FROM INPT FACILITY;3:UNDER OTHER CIRCUMSTANCES;^CMN-484;7^Q
"^DD",399,399.0304,24.107,.1)
Patient Condition At Test Time
"^DD",399,399.0304,24.107,3)
Enter the patient's condition at the time of the ABG and/or O2 Saturation test(s).
"^DD",399,399.0304,24.107,21,0)
^.001^2^2^3180124^^^^
"^DD",399,399.0304,24.107,21,1,0)
This field indicates the patient's condition at the time of the ABG 
"^DD",399,399.0304,24.107,21,2,0)
and/or O2 Saturation test(s).
"^DD",399,399.0304,24.107,"DT")
3171114
"^DD",399,399.0304,24.108,0)
CMN TEST CONDITIONS^S^1:AT REST;2:DURING EXERCISE;3:DURING SLEEP;^CMN-484;8^Q
"^DD",399,399.0304,24.108,.1)
Test Conditions
"^DD",399,399.0304,24.108,3)
Enter the conditions for the ABG and/or O2 Saturation test(s).
"^DD",399,399.0304,24.108,21,0)
^.001^2^2^3180103^^^^
"^DD",399,399.0304,24.108,21,1,0)
This field indicates the condition for the ABG and/or O2 Saturation 
"^DD",399,399.0304,24.108,21,2,0)
test(s).
"^DD",399,399.0304,24.108,"DT")
3171114
"^DD",399,399.0304,24.109,0)
CMN PORTABLE O2 INDICATOR^S^Y:PATIENT MOBILE WITHIN HOME;N:PATIENT NOT MOBILE WITHIN HOME;D:NOT ORDERING PORTABLE OXYGEN;^CMN-484;9^Q
"^DD",399,399.0304,24.109,.1)
Portable O2 Indicator
"^DD",399,399.0304,24.109,3)
Enter the patient's mobility if ordering portable oxygen or indicate if not ordering portable oxygen.
"^DD",399,399.0304,24.109,21,0)
^.001^2^2^3180103^^^^
"^DD",399,399.0304,24.109,21,1,0)
This field indicates the patient's mobility concerning the ordering of 
"^DD",399,399.0304,24.109,21,2,0)
portable oxygen.
"^DD",399,399.0304,24.109,"DT")
3171114
"^DD",399,399.0304,24.11,0)
CMN HIGHEST O2 FLOW RATE^FJ50X^^CMN-484;10^K:$L(X)>50!($L(X)<1) X
"^DD",399,399.0304,24.11,.1)
Highest O2 Flow Rate
"^DD",399,399.0304,24.11,3)
Enter the highest oxygen flow rate ordered for this patient in liters per minute (LPM).  Enter a number.  If oxygen rate is less than 1 LPM, enter 'X'.
"^DD",399,399.0304,24.11,21,0)
^.001^3^3^3171114^^^^
"^DD",399,399.0304,24.11,21,1,0)
This field indicates the highest oxygen flow rate ordered for this Patient
"^DD",399,399.0304,24.11,21,2,0)
in liters per minute (LPM).  The value is either a number, or if the value
"^DD",399,399.0304,24.11,21,3,0)
is less than 1 LPM, it should be entered as an "X".
"^DD",399,399.0304,24.11,"DT")
3180302
"^DD",399,399.0304,24.111,0)
CMN LAST 4 LPM ABG PO2 (MMHG)^NJ3,0X^^CMN-484;11^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.111,.1)
Latest 4 LPM ABG PO2 (mmHg)
"^DD",399,399.0304,24.111,3)
Enter the result of the most recent ABG test taken on 4 LPM.  Enter a whole number which will be reported as mmHg.
"^DD",399,399.0304,24.111,21,0)
^.001^2^2^3171114^^^^
"^DD",399,399.0304,24.111,21,1,0)
This field indicates the result of the most recent ABG test taken on 4 
"^DD",399,399.0304,24.111,21,2,0)
LPM.  The number entered will be reported as mmHg.
"^DD",399,399.0304,24.111,"DT")
3180302
"^DD",399,399.0304,24.113,0)
CMN LAST 4 LPM O2 SATURATION %^NJ3,0X^^CMN-484;13^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.113,.1)
Latest 4 LPM O2 Saturation (%)
"^DD",399,399.0304,24.113,3)
Enter the result of the most recent Oxygen saturation test.  Enter a whole number which will be reported as %.
"^DD",399,399.0304,24.113,21,0)
^.001^2^2^3171114^^^^
"^DD",399,399.0304,24.113,21,1,0)
This field indicates the result of the most recent Oxygen saturation 
"^DD",399,399.0304,24.113,21,2,0)
test.  The number entered will be reported as %.
"^DD",399,399.0304,24.113,"DT")
3180302
"^DD",399,399.0304,24.114,0)
CMN DATE OF LAST 4 LPM TESTS^D^^CMN-484;14^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,24.114,.1)
Date of the Latest 4 LPM Test(s)
"^DD",399,399.0304,24.114,3)
Enter the REQUIRED date for the most recent 4 LPM Test(s).
"^DD",399,399.0304,24.114,21,0)
^.001^2^2^3181017^^^
"^DD",399,399.0304,24.114,21,1,0)
This field indicates the Date for the most recent ABG PO2 and/or
"^DD",399,399.0304,24.114,21,2,0)
O2 Saturation test(s) taken on 4 LPM.
"^DD",399,399.0304,24.114,"DT")
3180314
"^DD",399,399.0304,24.115,0)
CMN EQUIPMENT/COST DESCRIPTION^FJ50^^CMN-484;15^K:$L(X)>50!($L(X)<1) X
"^DD",399,399.0304,24.115,.1)
Equipment/Cost Description
"^DD",399,399.0304,24.115,3)
Enter a 1-50 character free text description of items, accessories, and options ordered, suppliers charge and Medicare Fee Schedule allowance for each item, accessory and option.
"^DD",399,399.0304,24.115,21,0)
^.001^3^3^3171114^^^^
"^DD",399,399.0304,24.115,21,1,0)
This field indicates the description of the items, accessories, and 
"^DD",399,399.0304,24.115,21,2,0)
options ordered, suppliers charge and Medicare Fee Schedule Allowance for
"^DD",399,399.0304,24.115,21,3,0)
each item, accessory and option.  
"^DD",399,399.0304,24.115,"DT")
3171114
"^DD",399,399.0304,24.201,0)
CMN SM BOWEL ABSORPTION DOC?^S^0:NO;1:YES;^CMN-10126;1^Q
"^DD",399,399.0304,24.201,.1)
Small Bowel Absorption Documentation Present?
"^DD",399,399.0304,24.201,3)
Enter 'Yes' (1) if there is documentation on file for Small Bowel Absorption, or 'No' (0) if there is not.
"^DD",399,399.0304,24.201,21,0)
^.001^4^4^3171114^^^
"^DD",399,399.0304,24.201,21,1,0)
This field indicates whether or not there is documentation in the medical 
"^DD",399,399.0304,24.201,21,2,0)
record that supports the patient's permanent non-function or disease of 
"^DD",399,399.0304,24.201,21,3,0)
the structures that permit food to reach or be absorbed from the small 
"^DD",399,399.0304,24.201,21,4,0)
bowel.
"^DD",399,399.0304,24.201,"DT")
3171114
"^DD",399,399.0304,24.202,0)
CMN ENTERAL NUTRITION BY TUBE?^S^0:NO;1:YES;^CMN-10126;2^Q
"^DD",399,399.0304,24.202,.1)
Enteral Nutrition by Tube?
"^DD",399,399.0304,24.202,3)
Enter 'Yes' (1) if the Enteral Nutrition is being administered by a tube, or 'No' (0) if it is not.
"^DD",399,399.0304,24.202,21,0)
^^2^2^3171121^
"^DD",399,399.0304,24.202,21,1,0)
This field indicates whether or not the Enteral Nutrition is being 
"^DD",399,399.0304,24.202,21,2,0)
administered via a tube (Example: gastrostomy tube).
"^DD",399,399.0304,24.202,"DT")
3171121
"^DD",399,399.0304,24.203,0)
CMN PROCEDURE A CALORIES^NJ4,0X^^CMN-10126;3^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.203,.1)
Procedure A Calories
"^DD",399,399.0304,24.203,3)
Enter the calories per day associated with Procedure A.
"^DD",399,399.0304,24.203,21,0)
^^1^1^3180420^
"^DD",399,399.0304,24.203,21,1,0)
This field indicates the calories per day associated with Procedure A.
"^DD",399,399.0304,24.203,"DT")
3180420
"^DD",399,399.0304,24.204,0)
CMN PROCEDURE A^P81'^ICPT(^CMN-10126;4^Q
"^DD",399,399.0304,24.204,.1)
Procedure A
"^DD",399,399.0304,24.204,3)
Enter first procedure with associated calories.
"^DD",399,399.0304,24.204,21,0)
^^2^2^3180423^
"^DD",399,399.0304,24.204,21,1,0)
This is the procedure code to which the "Procedure A Calories" field
"^DD",399,399.0304,24.204,21,2,0)
corresponds.
"^DD",399,399.0304,24.204,"DT")
3180420
"^DD",399,399.0304,24.205,0)
CMN METHOD OF ADMINISTRATION^S^1:SYRINGE;2:GRAVITY;3:PUMP;4:ORAL;^CMN-10126;5^Q
"^DD",399,399.0304,24.205,.1)
Method of Administration
"^DD",399,399.0304,24.205,3)
Select the appropriate method by which the service was administered.
"^DD",399,399.0304,24.205,21,0)
^.001^1^1^3180103^^^^
"^DD",399,399.0304,24.205,21,1,0)
This field indicates the method by which the service was administered.
"^DD",399,399.0304,24.205,"DT")
3171115
"^DD",399,399.0304,24.206,0)
CMN DAYS PER WEEK ADMINISTERED^NJ1,0^^CMN-10126;6^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.206,.1)
Days/Week Administered
"^DD",399,399.0304,24.206,3)
Enter the number of days per week that the nutrition is administered or infused.
"^DD",399,399.0304,24.206,21,0)
^.001^2^2^3171114^^^
"^DD",399,399.0304,24.206,21,1,0)
This field indicates the number of days per week that the nutrition is 
"^DD",399,399.0304,24.206,21,2,0)
administered or infused.
"^DD",399,399.0304,24.206,"DT")
3171114
"^DD",399,399.0304,24.207,0)
CMN SEVERE MALABSORPTION DOC?^S^0:NO;1:YES;^CMN-10126;7^Q
"^DD",399,399.0304,24.207,.1)
Severe Malabsorption Documentation Present?
"^DD",399,399.0304,24.207,3)
Enter 'Yes' (1) if there is documentation on file for Severe Malabsorption, or 'No' (0) if there is not.
"^DD",399,399.0304,24.207,21,0)
^.001^4^4^3171114^^
"^DD",399,399.0304,24.207,21,1,0)
This field indicates whether or not there is documentation in the medical 
"^DD",399,399.0304,24.207,21,2,0)
record that supports the patient having permanent disease of the
"^DD",399,399.0304,24.207,21,3,0)
gastrointestinal tract causing malabsorption severe enough to prevent
"^DD",399,399.0304,24.207,21,4,0)
maintenance of weight and strength.
"^DD",399,399.0304,24.207,"DT")
3171114
"^DD",399,399.0304,24.208,0)
CMN AMINO ACID (ML/DAY)^NJ3,0X^^CMN-10126;8^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.208,.1)
Amino Acid (ml/day)
"^DD",399,399.0304,24.208,3)
Enter the number of milliliters of the component Amino Acid that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.208,21,0)
^.001^2^2^3171122^^^
"^DD",399,399.0304,24.208,21,1,0)
This field indicates the number of milliliters of the component Amino
"^DD",399,399.0304,24.208,21,2,0)
Acid that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.208,"DT")
3180302
"^DD",399,399.0304,24.209,0)
CMN AMINO ACID CONCENTRATION %^NJ3,0X^^CMN-10126;9^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.209,.1)
Amino Acid Concentration (%)
"^DD",399,399.0304,24.209,3)
Enter the percent concentration of Amino Acids in this nutritional formula.
"^DD",399,399.0304,24.209,21,0)
^.001^2^2^3171122^^
"^DD",399,399.0304,24.209,21,1,0)
This field indicates the percent concentration of Amino Acids in this 
"^DD",399,399.0304,24.209,21,2,0)
nutritional formula.
"^DD",399,399.0304,24.209,"DT")
3180302
"^DD",399,399.0304,24.21,0)
CMN AMINO ACID PROTEIN (GM/DY)^NJ3,0X^^CMN-10126;10^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.21,.1)
Amino Acid Protein (gm/day)
"^DD",399,399.0304,24.21,3)
Enter the amount of protein administered in grams/day in this nutritional formula.
"^DD",399,399.0304,24.21,21,0)
^.001^2^2^3171114^^
"^DD",399,399.0304,24.21,21,1,0)
This field indicates the amount of protein administered in grams/day in 
"^DD",399,399.0304,24.21,21,2,0)
this nutritional formula.
"^DD",399,399.0304,24.21,"DT")
3180302
"^DD",399,399.0304,24.211,0)
CMN DEXTROSE (ML/DAY)^NJ3,0X^^CMN-10126;11^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.211,.1)
Dextrose (ml/day)
"^DD",399,399.0304,24.211,3)
Enter the number of milliliters of the component Dextrose that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.211,21,0)
^.001^2^2^3171114^^
"^DD",399,399.0304,24.211,21,1,0)
This field indicates the number of milliliters of the component Dextrose 
"^DD",399,399.0304,24.211,21,2,0)
that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.211,"DT")
3180302
"^DD",399,399.0304,24.212,0)
CMN DEXTROSE CONCENTRATE %^NJ3,0X^^CMN-10126;12^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.212,.1)
Dextrose Concentrate (%)
"^DD",399,399.0304,24.212,3)
Enter the percent concentration of Dextrose in this nutritional formula.
"^DD",399,399.0304,24.212,21,0)
^.001^2^2^3171114^^
"^DD",399,399.0304,24.212,21,1,0)
This field indicates the percent concentration of Dextrose in this 
"^DD",399,399.0304,24.212,21,2,0)
nutritional formula.
"^DD",399,399.0304,24.212,"DT")
3180302
"^DD",399,399.0304,24.213,0)
CMN LIPIDS (ML/DAY)^NJ3,0X^^CMN-10126;13^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.213,.1)
Lipids (ml/day)
"^DD",399,399.0304,24.213,3)
Enter the number of milliliters of the component Lipids that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.213,21,0)
^.001^2^2^3171114^^^
"^DD",399,399.0304,24.213,21,1,0)
This field indicates the number of milliliters of the component Lipids 
"^DD",399,399.0304,24.213,21,2,0)
that are administered per day in this nutritional formula.
"^DD",399,399.0304,24.213,"DT")
3180302
"^DD",399,399.0304,24.214,0)
CMN ROUTE OF ADMINISTRATION^S^1:CENTRAL LINE (INCLUDES PICC);2:HEMODIALYSIS ACCESS LINE;3:PERITONEAL CATHETER;^CMN-10126;14^Q
"^DD",399,399.0304,24.214,.1)
Route of Administration
"^DD",399,399.0304,24.214,3)
Enter the number that represents the appropriate route by which the nutrition was administered.
"^DD",399,399.0304,24.214,21,0)
^.001^1^1^3180103^^^^
"^DD",399,399.0304,24.214,21,1,0)
This field indicates the route by which the nutrition was administered.
"^DD",399,399.0304,24.214,"DT")
3171114
"^DD",399,399.0304,24.215,0)
CMN LIPIDS (DAYS/WEEK)^NJ1,0^^CMN-10126;15^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.215,.1)
Lipids (days/wk)
"^DD",399,399.0304,24.215,3)
Enter the number of days per week the component lipids are administered in this nutritional formula.
"^DD",399,399.0304,24.215,21,0)
^.001^2^2^3171114^^
"^DD",399,399.0304,24.215,21,1,0)
This field indicates the number of days per week the component Lipids are 
"^DD",399,399.0304,24.215,21,2,0)
administered in this nutritional formula.
"^DD",399,399.0304,24.215,"DT")
3171114
"^DD",399,399.0304,24.216,0)
CMN LIPIDS CONCENTRATE %^NJ3,0X^^CMN-10126;16^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.216,.1)
Lipids Concentrate (%)
"^DD",399,399.0304,24.216,3)
Enter the percent concentration of Lipids in this nutritional formula.
"^DD",399,399.0304,24.216,21,0)
^.001^2^2^3171122^^^
"^DD",399,399.0304,24.216,21,1,0)
This field indicates the percent concentration of Lipids in this 
"^DD",399,399.0304,24.216,21,2,0)
nutritional formula.
"^DD",399,399.0304,24.216,"DT")
3180302
"^DD",399,399.0304,24.217,0)
CMN PARENTERAL/ENTERAL/BOTH^S^P:PARENTERAL;E:ENTERAL;B:BOTH;^CMN-10126;17^Q
"^DD",399,399.0304,24.217,.1)
Is this for Parenteral nutrition, Enteral nutrition, or Both?
"^DD",399,399.0304,24.217,3)
Is this CMN for Parenteral nutrition, enteral nutrition, or both?
"^DD",399,399.0304,24.217,21,0)
^^2^2^3180423^
"^DD",399,399.0304,24.217,21,1,0)
This field designates whether this CMN form is for Parenteral nutrition, 
"^DD",399,399.0304,24.217,21,2,0)
enteral nutrition, or both.
"^DD",399,399.0304,24.217,"DT")
3180423
"^DD",399,399.0304,24.218,0)
CMN PROCEDURE B CALORIES^NJ6,0X^^CMN-10126;18^K:+X'=X!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.0304,24.218,.1)
Procedure B Calories
"^DD",399,399.0304,24.218,3)
Enter the calories per day associated with Procedure B.
"^DD",399,399.0304,24.218,21,0)
^.001^1^1^3180423^^^
"^DD",399,399.0304,24.218,21,1,0)
This field indicates the calories per day associated with Procedure B.
"^DD",399,399.0304,24.218,"DT")
3180423
"^DD",399,399.0304,24.219,0)
CMN PROCEDURE B^P81'^ICPT(^CMN-10126;19^Q
"^DD",399,399.0304,24.219,.1)
Procedure B
"^DD",399,399.0304,24.219,3)
Enter second procedure with associated calories.
"^DD",399,399.0304,24.219,21,0)
^^2^2^3180423^
"^DD",399,399.0304,24.219,21,1,0)
This is the procedure code to which the "Procedure B Calories" field
"^DD",399,399.0304,24.219,21,2,0)
corresponds.
"^DD",399,399.0304,24.219,"DT")
3180420
"^DD",399.6,399.6,0)
FIELD^^3^4
"^DD",399.6,399.6,0,"DT")
3190124
"^DD",399.6,399.6,0,"IX","B",399.6,.01)

"^DD",399.6,399.6,0,"NM","CMN FORM TYPES")

"^DD",399.6,399.6,0,"PT",399.0304,24)

"^DD",399.6,399.6,0,"VRPK")
IB
"^DD",399.6,399.6,.01,0)
NAME^RFJ50^^0;1^K:$L(X)>50!($L(X)<3)!'(X'?1P.E) X
"^DD",399.6,399.6,.01,1,0)
^.1^^-1
"^DD",399.6,399.6,.01,1,1,0)
399.6^B
"^DD",399.6,399.6,.01,1,1,1)
S ^IBE(399.6,"B",$E(X,1,30),DA)=""
"^DD",399.6,399.6,.01,1,1,2)
K ^IBE(399.6,"B",$E(X,1,30),DA)
"^DD",399.6,399.6,.01,3)
Answer must be 3-50 characters in length.
"^DD",399.6,399.6,.01,"DT")
3180215
"^DD",399.6,399.6,1,0)
DESCRIPTION^FJ80^^0;2^K:$L(X)>80!($L(X)<1) X
"^DD",399.6,399.6,1,3)
Enter a brief description of the Form Type
"^DD",399.6,399.6,1,21,0)
^.001^1^1^3171121^^
"^DD",399.6,399.6,1,21,1,0)
Enter a description of the CMN form type.
"^DD",399.6,399.6,1,"DT")
3171121
"^DD",399.6,399.6,2,0)
INDUSTRY CODE^RFJ15^^0;3^K:$L(X)>15!($L(X)<1) X
"^DD",399.6,399.6,2,3)
Enter the Industry Code associated with this CMN form type.
"^DD",399.6,399.6,2,"DT")
3171121
"^DD",399.6,399.6,3,0)
DATA NODE^RFJ20^^0;4^K:$L(X)>20!($L(X)<7) X
"^DD",399.6,399.6,3,3)
This is the node in ^DGCR where data for this form is stored.
"^DD",399.6,399.6,3,21,0)
^.001^3^3^3180503^^^^
"^DD",399.6,399.6,3,21,1,0)
This is the node in ^DGCR where the CMN data for a particular form is 
"^DD",399.6,399.6,3,21,2,0)
stored.  For the "484" form, the data node MUST be 'CMN-484' and for the 
"^DD",399.6,399.6,3,21,3,0)
"10126" form, the data node MUST be 'CMN-10126'.
"^DD",399.6,399.6,3,"DT")
3180503
"^DIC",350.8,350.8,0)
IB ERROR
"^DIC",350.8,350.8,0,"GL")
^IBE(350.8,
"^DIC",350.8,350.8,"%D",0)
^^11^11^2940214^^^^
"^DIC",350.8,350.8,"%D",1,0)
This file contains errors for billing functions.  It may be used by
"^DIC",350.8,350.8,"%D",2,0)
applications, IB or AR.  The normal format for a routine to return
"^DIC",350.8,350.8,"%D",3,0)
an error is to return the variable:
"^DIC",350.8,350.8,"%D",4,0)
  Y=1^... a successful event occured
"^DIC",350.8,350.8,"%D",5,0)
  Y=-1^error code[;error code;error code...]^additional text
"^DIC",350.8,350.8,"%D",6,0)
The error messages can be displayed by calling routine ^IBAERR.  If
"^DIC",350.8,350.8,"%D",7,0)
the error occurs in a tasked job ($D(ZTQUEUED)'=0) the routine will
"^DIC",350.8,350.8,"%D",8,0)
put the error message in a bulletin and post it to the group defined
"^DIC",350.8,350.8,"%D",9,0)
in the IB SITE PARAMETER FILE.
"^DIC",350.8,350.8,"%D",10,0)
 
"^DIC",350.8,350.8,"%D",11,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",350.8,"B","IB ERROR",350.8)

"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"^DIC",399.6,399.6,0)
CMN FORM TYPES^399.6
"^DIC",399.6,399.6,0,"GL")
^IBE(399.6,
"^DIC",399.6,"B","CMN FORM TYPES",399.6)

"BLD",10813,6)
^583
**END**
**END**

