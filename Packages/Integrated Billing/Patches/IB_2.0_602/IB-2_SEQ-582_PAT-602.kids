Released IB*2*602 SEQ #582
Extracted from mail message
**KIDS**:IB*2.0*602^

**INSTALL NAME**
IB*2.0*602
"BLD",11105,0)
IB*2.0*602^INTEGRATED BILLING^0^3190221^y
"BLD",11105,4,0)
^9.64PA^^
"BLD",11105,6)
10^
"BLD",11105,6.3)
22
"BLD",11105,"INID")
^n
"BLD",11105,"INIT")
IBY602PO
"BLD",11105,"KRN",0)
^9.67PA^779.2^20
"BLD",11105,"KRN",.4,0)
.4
"BLD",11105,"KRN",.4,"NM",0)
^9.68A^^
"BLD",11105,"KRN",.401,0)
.401
"BLD",11105,"KRN",.402,0)
.402
"BLD",11105,"KRN",.403,0)
.403
"BLD",11105,"KRN",.5,0)
.5
"BLD",11105,"KRN",.84,0)
.84
"BLD",11105,"KRN",3.6,0)
3.6
"BLD",11105,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",11105,"KRN",3.8,0)
3.8
"BLD",11105,"KRN",9.2,0)
9.2
"BLD",11105,"KRN",9.8,0)
9.8
"BLD",11105,"KRN",9.8,"NM",0)
^9.68A^20^19
"BLD",11105,"KRN",9.8,"NM",1,0)
IBCNAU3^^0^B12969808
"BLD",11105,"KRN",9.8,"NM",2,0)
IBCNBOA^^0^B68100333
"BLD",11105,"KRN",9.8,"NM",3,0)
IBCNBOF^^0^B33394771
"BLD",11105,"KRN",9.8,"NM",4,0)
IBCNERP3^^0^B102128247
"BLD",11105,"KRN",9.8,"NM",5,0)
IBCNERPD^^0^B126523871
"BLD",11105,"KRN",9.8,"NM",6,0)
IBCNSP^^0^B77777224
"BLD",11105,"KRN",9.8,"NM",7,0)
IBCNSUR^^0^B131418993
"BLD",11105,"KRN",9.8,"NM",8,0)
IBCOC1^^0^B24512676
"BLD",11105,"KRN",9.8,"NM",9,0)
IBCOMD1^^0^B37249446
"BLD",11105,"KRN",9.8,"NM",10,0)
IBCOMN1^^0^B18271189
"BLD",11105,"KRN",9.8,"NM",11,0)
IBCNEKIT^^0^B164496028
"BLD",11105,"KRN",9.8,"NM",12,0)
IBCNSMM^^0^B19438322
"BLD",11105,"KRN",9.8,"NM",14,0)
IBCNSMM2^^0^B15234233
"BLD",11105,"KRN",9.8,"NM",15,0)
IBCNBOE^^0^B112716320
"BLD",11105,"KRN",9.8,"NM",16,0)
IBCNSMM1^^0^B27788048
"BLD",11105,"KRN",9.8,"NM",17,0)
IBY602PO^^0^B43687115
"BLD",11105,"KRN",9.8,"NM",18,0)
IBCNEUT5^^0^B65444390
"BLD",11105,"KRN",9.8,"NM",19,0)
IBCNEDE4^^0^B61826620
"BLD",11105,"KRN",9.8,"NM",20,0)
IBCNEHL3^^0^B172950682
"BLD",11105,"KRN",9.8,"NM","B","IBCNAU3",1)

"BLD",11105,"KRN",9.8,"NM","B","IBCNBOA",2)

"BLD",11105,"KRN",9.8,"NM","B","IBCNBOE",15)

"BLD",11105,"KRN",9.8,"NM","B","IBCNBOF",3)

"BLD",11105,"KRN",9.8,"NM","B","IBCNEDE4",19)

"BLD",11105,"KRN",9.8,"NM","B","IBCNEHL3",20)

"BLD",11105,"KRN",9.8,"NM","B","IBCNEKIT",11)

"BLD",11105,"KRN",9.8,"NM","B","IBCNERP3",4)

"BLD",11105,"KRN",9.8,"NM","B","IBCNERPD",5)

"BLD",11105,"KRN",9.8,"NM","B","IBCNEUT5",18)

"BLD",11105,"KRN",9.8,"NM","B","IBCNSMM",12)

"BLD",11105,"KRN",9.8,"NM","B","IBCNSMM1",16)

"BLD",11105,"KRN",9.8,"NM","B","IBCNSMM2",14)

"BLD",11105,"KRN",9.8,"NM","B","IBCNSP",6)

"BLD",11105,"KRN",9.8,"NM","B","IBCNSUR",7)

"BLD",11105,"KRN",9.8,"NM","B","IBCOC1",8)

"BLD",11105,"KRN",9.8,"NM","B","IBCOMD1",9)

"BLD",11105,"KRN",9.8,"NM","B","IBCOMN1",10)

"BLD",11105,"KRN",9.8,"NM","B","IBY602PO",17)

"BLD",11105,"KRN",19,0)
19
"BLD",11105,"KRN",19,"NM",0)
^9.68A^24^24
"BLD",11105,"KRN",19,"NM",1,0)
IBCN LIST INACTIVE INS W/PAT^^4^
"BLD",11105,"KRN",19,"NM",2,0)
IBCN EXPIRE GROUP SUBSCRIBERS^^0
"BLD",11105,"KRN",19,"NM",3,0)
IBCN INSURANCE MGMT MENU^^0
"BLD",11105,"KRN",19,"NM",4,0)
IBCN INSURANCE CO EDIT^^4^
"BLD",11105,"KRN",19,"NM",5,0)
IBCN PATIENT INSURANCE^^4^
"BLD",11105,"KRN",19,"NM",6,0)
IBCN VIEW PATIENT INSURANCE^^4^
"BLD",11105,"KRN",19,"NM",7,0)
IBCN VIEW INSURANCE CO^^4^
"BLD",11105,"KRN",19,"NM",8,0)
IBCN LIST NEW NOT VER^^4^
"BLD",11105,"KRN",19,"NM",9,0)
IBCN LIST PLANS BY INS CO^^4^
"BLD",11105,"KRN",19,"NM",10,0)
IBCN INSURANCE BUFFER PROCESS^^4^
"BLD",11105,"KRN",19,"NM",11,0)
IBCN POL W/NO EFF DATE REPORT^^4^
"BLD",11105,"KRN",19,"NM",12,0)
IBCN ID DUP INSURANCE ENTRIES^^4^
"BLD",11105,"KRN",19,"NM",13,0)
IBCN MOVE SUBSCRIB TO PLAN^^4^
"BLD",11105,"KRN",19,"NM",14,0)
IBCN NO COVERAGE VERIFIED^^4^
"BLD",11105,"KRN",19,"NM",15,0)
IBCN PT W/WO INSURANCE REPORT^^4^
"BLD",11105,"KRN",19,"NM",16,0)
IBCN REMOTE INSURANCE QUERY^^4^
"BLD",11105,"KRN",19,"NM",17,0)
IBCNE IIV MENU^^4^
"BLD",11105,"KRN",19,"NM",18,0)
IBCNE PAYER MAINTENANCE MENU^^4^
"BLD",11105,"KRN",19,"NM",19,0)
IBCNR E-PHARMACY MENU^^4^
"BLD",11105,"KRN",19,"NM",20,0)
IBCN INSURANCE EDI REPORT^^4^
"BLD",11105,"KRN",19,"NM",21,0)
IBCN INS RPTS^^4^
"BLD",11105,"KRN",19,"NM",22,0)
IBCN INTERFACILITY INS UPDATE^^4^
"BLD",11105,"KRN",19,"NM",23,0)
IBCN HPID CLAIM RPT^^4^
"BLD",11105,"KRN",19,"NM",24,0)
IBCN INS PLANS MISSING DATA^^4^
"BLD",11105,"KRN",19,"NM","B","IBCN EXPIRE GROUP SUBSCRIBERS",2)

"BLD",11105,"KRN",19,"NM","B","IBCN HPID CLAIM RPT",23)

"BLD",11105,"KRN",19,"NM","B","IBCN ID DUP INSURANCE ENTRIES",12)

"BLD",11105,"KRN",19,"NM","B","IBCN INS PLANS MISSING DATA",24)

"BLD",11105,"KRN",19,"NM","B","IBCN INS RPTS",21)

"BLD",11105,"KRN",19,"NM","B","IBCN INSURANCE BUFFER PROCESS",10)

"BLD",11105,"KRN",19,"NM","B","IBCN INSURANCE CO EDIT",4)

"BLD",11105,"KRN",19,"NM","B","IBCN INSURANCE EDI REPORT",20)

"BLD",11105,"KRN",19,"NM","B","IBCN INSURANCE MGMT MENU",3)

"BLD",11105,"KRN",19,"NM","B","IBCN INTERFACILITY INS UPDATE",22)

"BLD",11105,"KRN",19,"NM","B","IBCN LIST INACTIVE INS W/PAT",1)

"BLD",11105,"KRN",19,"NM","B","IBCN LIST NEW NOT VER",8)

"BLD",11105,"KRN",19,"NM","B","IBCN LIST PLANS BY INS CO",9)

"BLD",11105,"KRN",19,"NM","B","IBCN MOVE SUBSCRIB TO PLAN",13)

"BLD",11105,"KRN",19,"NM","B","IBCN NO COVERAGE VERIFIED",14)

"BLD",11105,"KRN",19,"NM","B","IBCN PATIENT INSURANCE",5)

"BLD",11105,"KRN",19,"NM","B","IBCN POL W/NO EFF DATE REPORT",11)

"BLD",11105,"KRN",19,"NM","B","IBCN PT W/WO INSURANCE REPORT",15)

"BLD",11105,"KRN",19,"NM","B","IBCN REMOTE INSURANCE QUERY",16)

"BLD",11105,"KRN",19,"NM","B","IBCN VIEW INSURANCE CO",7)

"BLD",11105,"KRN",19,"NM","B","IBCN VIEW PATIENT INSURANCE",6)

"BLD",11105,"KRN",19,"NM","B","IBCNE IIV MENU",17)

"BLD",11105,"KRN",19,"NM","B","IBCNE PAYER MAINTENANCE MENU",18)

"BLD",11105,"KRN",19,"NM","B","IBCNR E-PHARMACY MENU",19)

"BLD",11105,"KRN",19.1,0)
19.1
"BLD",11105,"KRN",101,0)
101
"BLD",11105,"KRN",409.61,0)
409.61
"BLD",11105,"KRN",771,0)
771
"BLD",11105,"KRN",779.2,0)
779.2
"BLD",11105,"KRN",870,0)
870
"BLD",11105,"KRN",8989.51,0)
8989.51
"BLD",11105,"KRN",8989.52,0)
8989.52
"BLD",11105,"KRN",8994,0)
8994
"BLD",11105,"KRN","B",.4,.4)

"BLD",11105,"KRN","B",.401,.401)

"BLD",11105,"KRN","B",.402,.402)

"BLD",11105,"KRN","B",.403,.403)

"BLD",11105,"KRN","B",.5,.5)

"BLD",11105,"KRN","B",.84,.84)

"BLD",11105,"KRN","B",3.6,3.6)

"BLD",11105,"KRN","B",3.8,3.8)

"BLD",11105,"KRN","B",9.2,9.2)

"BLD",11105,"KRN","B",9.8,9.8)

"BLD",11105,"KRN","B",19,19)

"BLD",11105,"KRN","B",19.1,19.1)

"BLD",11105,"KRN","B",101,101)

"BLD",11105,"KRN","B",409.61,409.61)

"BLD",11105,"KRN","B",771,771)

"BLD",11105,"KRN","B",779.2,779.2)

"BLD",11105,"KRN","B",870,870)

"BLD",11105,"KRN","B",8989.51,8989.51)

"BLD",11105,"KRN","B",8989.52,8989.52)

"BLD",11105,"KRN","B",8994,8994)

"BLD",11105,"QDEF")
^^^^NO^^^^YES^^YES
"BLD",11105,"QUES",0)
^9.62^^
"BLD",11105,"REQB",0)
^9.611^2^1
"BLD",11105,"REQB",2,0)
IB*2.0*621^1
"BLD",11105,"REQB","B","IB*2.0*621",2)

"INIT")
IBY602PO
"KRN",19,2913770,-1)
0^3
"KRN",19,2913770,0)
IBCN INSURANCE MGMT MENU^Patient Insurance Menu^^M^^^^^^^^
"KRN",19,2913770,1,0)
^19.06^1^1^3180314^^^^
"KRN",19,2913770,1,1,0)
This is the main menu to edit, view, and print insurance information.
"KRN",19,2913770,10,0)
^19.01IP^25^25
"KRN",19,2913770,10,2,0)
2913771^EI^3
"KRN",19,2913770,10,2,"^")
IBCN INSURANCE CO EDIT
"KRN",19,2913770,10,3,0)
2913772^PI^1
"KRN",19,2913770,10,3,"^")
IBCN PATIENT INSURANCE
"KRN",19,2913770,10,4,0)
2913773^VP^2
"KRN",19,2913770,10,4,"^")
IBCN VIEW PATIENT INSURANCE
"KRN",19,2913770,10,5,0)
2913774^VI^4
"KRN",19,2913770,10,5,"^")
IBCN VIEW INSURANCE CO
"KRN",19,2913770,10,6,0)
2913790^LC^49
"KRN",19,2913770,10,6,"^")
IBCN LIST INACTIVE INS W/PAT
"KRN",19,2913770,10,7,0)
2913792^NV
"KRN",19,2913770,10,7,"^")
IBCN LIST NEW NOT VER
"KRN",19,2913770,10,8,0)
2915092^LP^53
"KRN",19,2913770,10,8,"^")
IBCN LIST PLANS BY INS CO
"KRN",19,2913770,10,9,0)
2917882^BI^21
"KRN",19,2913770,10,9,"^")
IBCN INSURANCE BUFFER PROCESS
"KRN",19,2913770,10,10,0)
2918301^NE
"KRN",19,2913770,10,10,"^")
IBCN POL W/NO EFF DATE REPORT
"KRN",19,2913770,10,11,0)
2918300^ID^37
"KRN",19,2913770,10,11,"^")
IBCN ID DUP INSURANCE ENTRIES
"KRN",19,2913770,10,12,0)
2918302^MV^61
"KRN",19,2913770,10,12,"^")
IBCN MOVE SUBSCRIB TO PLAN
"KRN",19,2913770,10,13,0)
2918304^NC
"KRN",19,2913770,10,13,"^")
IBCN NO COVERAGE VERIFIED
"KRN",19,2913770,10,15,0)
2918303^WO
"KRN",19,2913770,10,15,"^")
IBCN PT W/WO INSURANCE REPORT
"KRN",19,2913770,10,16,0)
2919241^RQI
"KRN",19,2913770,10,16,"^")
IBCN REMOTE INSURANCE QUERY
"KRN",19,2913770,10,17,0)
2919334^EIV^25
"KRN",19,2913770,10,17,"^")
IBCNE IIV MENU
"KRN",19,2913770,10,18,0)
2919335^PM
"KRN",19,2913770,10,18,"^")
IBCNE PAYER MAINTENANCE MENU
"KRN",19,2913770,10,19,0)
2919873^EPH^29
"KRN",19,2913770,10,19,"^")
IBCNR E-PHARMACY MENU
"KRN",19,2913770,10,20,0)
2920073^EPR^17
"KRN",19,2913770,10,20,"^")
IBCN INSURANCE EDI REPORT
"KRN",19,2913770,10,21,0)
2922289^INSR^45
"KRN",19,2913770,10,21,"^")
IBCN INS RPTS
"KRN",19,2913770,10,22,0)
2922293^IFIU^41
"KRN",19,2913770,10,22,"^")
IBCN INTERFACILITY INS UPDATE
"KRN",19,2913770,10,23,0)
2922294^HPID^33
"KRN",19,2913770,10,23,"^")
IBCN HPID CLAIM RPT
"KRN",19,2913770,10,24,0)
2922342^MD^57
"KRN",19,2913770,10,24,"^")
IBCN INS PLANS MISSING DATA
"KRN",19,2913770,10,25,0)
2922538^XPIR^65
"KRN",19,2913770,10,25,"^")
IBCN EXPIRE GROUP SUBSCRIBERS
"KRN",19,2913770,99)
65021,30381
"KRN",19,2913770,99.1)
65064,40236
"KRN",19,2913770,"U")
PATIENT INSURANCE MENU
"KRN",19,2913771,-1)
4^4
"KRN",19,2913771,0)
IBCN INSURANCE CO EDIT
"KRN",19,2913772,-1)
4^5
"KRN",19,2913772,0)
IBCN PATIENT INSURANCE
"KRN",19,2913773,-1)
4^6
"KRN",19,2913773,0)
IBCN VIEW PATIENT INSURANCE
"KRN",19,2913774,-1)
4^7
"KRN",19,2913774,0)
IBCN VIEW INSURANCE CO
"KRN",19,2913790,-1)
4^1
"KRN",19,2913790,0)
IBCN LIST INACTIVE INS W/PAT
"KRN",19,2913792,-1)
4^8
"KRN",19,2913792,0)
IBCN LIST NEW NOT VER
"KRN",19,2915092,-1)
4^9
"KRN",19,2915092,0)
IBCN LIST PLANS BY INS CO
"KRN",19,2917882,-1)
4^10
"KRN",19,2917882,0)
IBCN INSURANCE BUFFER PROCESS
"KRN",19,2918300,-1)
4^12
"KRN",19,2918300,0)
IBCN ID DUP INSURANCE ENTRIES
"KRN",19,2918301,-1)
4^11
"KRN",19,2918301,0)
IBCN POL W/NO EFF DATE REPORT
"KRN",19,2918302,-1)
4^13
"KRN",19,2918302,0)
IBCN MOVE SUBSCRIB TO PLAN
"KRN",19,2918303,-1)
4^15
"KRN",19,2918303,0)
IBCN PT W/WO INSURANCE REPORT
"KRN",19,2918304,-1)
4^14
"KRN",19,2918304,0)
IBCN NO COVERAGE VERIFIED
"KRN",19,2919241,-1)
4^16
"KRN",19,2919241,0)
IBCN REMOTE INSURANCE QUERY
"KRN",19,2919334,-1)
4^17
"KRN",19,2919334,0)
IBCNE IIV MENU
"KRN",19,2919335,-1)
4^18
"KRN",19,2919335,0)
IBCNE PAYER MAINTENANCE MENU
"KRN",19,2919873,-1)
4^19
"KRN",19,2919873,0)
IBCNR E-PHARMACY MENU
"KRN",19,2920073,-1)
4^20
"KRN",19,2920073,0)
IBCN INSURANCE EDI REPORT
"KRN",19,2922289,-1)
4^21
"KRN",19,2922289,0)
IBCN INS RPTS
"KRN",19,2922293,-1)
4^22
"KRN",19,2922293,0)
IBCN INTERFACILITY INS UPDATE
"KRN",19,2922294,-1)
4^23
"KRN",19,2922294,0)
IBCN HPID CLAIM RPT
"KRN",19,2922342,-1)
4^24
"KRN",19,2922342,0)
IBCN INS PLANS MISSING DATA
"KRN",19,2922538,-1)
0^2
"KRN",19,2922538,0)
IBCN EXPIRE GROUP SUBSCRIBERS^Expire Group Plan^^R^^^^^^^n^INTEGRATED BILLING
"KRN",19,2922538,1,0)
^^3^3^3180406^
"KRN",19,2922538,1,1,0)
This option allows users to enter an expiration date to expire all
"KRN",19,2922538,1,2,0)
subscriber policies associated with a group plan without requiring 
"KRN",19,2922538,1,3,0)
them to be moved to a new plan.
"KRN",19,2922538,10.1)
Expire Group Plan
"KRN",19,2922538,25)
EXPGRP^IBCNSUR
"KRN",19,2922538,"U")
EXPIRE GROUP PLAN
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
602^3190221^217
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
19
"RTN","IBCNAU3")
0^1^B12969808^B12671484
"RTN","IBCNAU3",1,0)
IBCNAU3 ;ALB/KML/AWC - eIV USER EDIT REPORT (PRINT) ;6-APRIL-2015
"RTN","IBCNAU3",2,0)
 ;;2.0;INTEGRATED BILLING;**528,602**;21-MAR-94;Build 22
"RTN","IBCNAU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNAU3",4,0)
 ;
"RTN","IBCNAU3",5,0)
 ;  Required variable input:  ALLUSERS, ALLINS, PLANS, ALLPLANS, EXCEL
"RTN","IBCNAU3",6,0)
 ;  ^TMP("IBINC",$J) 
"RTN","IBCNAU3",7,0)
 ;  ^TMP("IBUSER",$J) 
"RTN","IBCNAU3",8,0)
 ;  DATE("START") and DATE("END") required array elements if all dates not selected
"RTN","IBCNAU3",9,0)
 Q
"RTN","IBCNAU3",10,0)
 ;
"RTN","IBCNAU3",11,0)
EN(ALLPLANS,PLANS) ;
"RTN","IBCNAU3",12,0)
 ; Print the report.
"RTN","IBCNAU3",13,0)
 ;                  
"RTN","IBCNAU3",14,0)
 I EXCEL D EXCEL(PLANS) Q
"RTN","IBCNAU3",15,0)
 N IBI,IBJ,IBK,IBL,IBM,IB01,IB02,IBQUIT,IBPAG,IBPD,IBHDT
"RTN","IBCNAU3",16,0)
 S (IB02,IBQUIT,IBPAG)=0
"RTN","IBCNAU3",17,0)
 S IBHDT=$$FMTE^XLFDT($$NOW^XLFDT())
"RTN","IBCNAU3",18,0)
 ;
"RTN","IBCNAU3",19,0)
 D HDR(ALLPLANS,PLANS)
"RTN","IBCNAU3",20,0)
 I '$D(^TMP("IBPR",$J)) W !!,"User Edits do not exist per the selected filters." D PAUSE Q
"RTN","IBCNAU3",21,0)
 ;
"RTN","IBCNAU3",22,0)
 F IB01=0,1 F  S IB02=$O(^TMP("IBPR",$J,IB01,IB02)) Q:'IB02  Q:IBQUIT  S IBPD=$G(^TMP("IBPR",$J,IB01,IB02)) D  Q:IBQUIT
"RTN","IBCNAU3",23,0)
 . I $Y>(IOSL-5) D PAUSE Q:IBQUIT  D HDR(ALLPLANS,PLANS)
"RTN","IBCNAU3",24,0)
 . D PLAN
"RTN","IBCNAU3",25,0)
 W !!,"END OF REPORT" D PAUSE
"RTN","IBCNAU3",26,0)
 Q
"RTN","IBCNAU3",27,0)
 ;
"RTN","IBCNAU3",28,0)
 ;
"RTN","IBCNAU3",29,0)
HDR(ALLPLANS,PLANS) ; Print REPORT header
"RTN","IBCNAU3",30,0)
 I $E(IOST,1,2)="C-"!(IBPAG) W @IOF
"RTN","IBCNAU3",31,0)
 S IBPAG=IBPAG+1
"RTN","IBCNAU3",32,0)
 W !,"USER EDIT REPORT"
"RTN","IBCNAU3",33,0)
 W ?IOM-34,IBHDT,?IOM-10,"Page: ",IBPAG
"RTN","IBCNAU3",34,0)
 W !?5,"Insurance Company"
"RTN","IBCNAU3",35,0)
 I PLANS W ?42,"Group Name"
"RTN","IBCNAU3",36,0)
 W !!?5,"User",?25,"Date/Time of Change",?49,"Modified Field",?75,"Previous Value of Data",?100,"Modified Value of Data"
"RTN","IBCNAU3",37,0)
 W !,$TR($J(" ",IOM)," ","_"),!
"RTN","IBCNAU3",38,0)
 Q
"RTN","IBCNAU3",39,0)
 ;
"RTN","IBCNAU3",40,0)
PLAN ; Print plan information.
"RTN","IBCNAU3",41,0)
 N USER,DATE
"RTN","IBCNAU3",42,0)
 S USER=$$GET1^DIQ(200,$P(IBPD,U,3)_",",.01)
"RTN","IBCNAU3",43,0)
 S DATE=$$FMTE^XLFDT($P(IBPD,U,4),2),DATE=$TR(DATE,"@"," ")
"RTN","IBCNAU3",44,0)
 W !?5,$P(IBPD,U),?42,$S('IB01:"",1:$P(IBPD,U,2))
"RTN","IBCNAU3",45,0)
 W !?5,USER,?25,DATE,?49,$P(IBPD,U,7),?75,$S($P(IBPD,U,5)="":"<no previous value>",1:$P(IBPD,U,5)),?100,$P(IBPD,U,6),!!
"RTN","IBCNAU3",46,0)
 Q
"RTN","IBCNAU3",47,0)
 ;
"RTN","IBCNAU3",48,0)
PAUSE ; Pause for screen output.
"RTN","IBCNAU3",49,0)
 Q:$E(IOST,1,2)'["C-"
"RTN","IBCNAU3",50,0)
 S DIR(0)="E" D ^DIR K DIR I $D(DIRUT)!($D(DUOUT)) S IBQUIT=1 K DIRUT,DTOUT,DUOUT
"RTN","IBCNAU3",51,0)
 Q
"RTN","IBCNAU3",52,0)
 ;
"RTN","IBCNAU3",53,0)
EXCEL(PLANS) ; user selected format that can be viewed in MS Excel
"RTN","IBCNAU3",54,0)
 N IBI,IBJ,IBK,IBL,IBM,IB01,IB02,USER,DATE
"RTN","IBCNAU3",55,0)
 S (IB01,IB02)=0
"RTN","IBCNAU3",56,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets 
"RTN","IBCNAU3",57,0)
 W !,"USER EDIT REPORT^"_$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCNAU3",58,0)
 ; IB*602/HN end  
"RTN","IBCNAU3",59,0)
 ; 
"RTN","IBCNAU3",60,0)
 I PLANS W !,"Insurance Company^Group Name^User^Date/Time of Change^Modified Field^Previous Value of Data^Modified Value of Data",!
"RTN","IBCNAU3",61,0)
 E  W !,"Insurance Company^User^Date/Time of Change^Modified Field^Previous Value of Data^Modified Value of Data",!
"RTN","IBCNAU3",62,0)
 ;
"RTN","IBCNAU3",63,0)
 F IB01=0,1 F  S IB02=$O(^TMP("IBPR",$J,IB01,IB02)) Q:'IB02  S IBPD=$G(^TMP("IBPR",$J,IB01,IB02)) D
"RTN","IBCNAU3",64,0)
 . S USER=$$GET1^DIQ(200,$P(IBPD,U,3)_",",.01)
"RTN","IBCNAU3",65,0)
 . S DATE=$$FMTE^XLFDT($P(IBPD,U,4),2)
"RTN","IBCNAU3",66,0)
 . I IB01=0 W $P(IBPD,U)_U_USER_U_DATE_U_$P(IBPD,U,7)_U_$S($P(IBPD,U,5)="":"<no previous value>",1:$P(IBPD,U,5))_U_$P(IBPD,U,6)
"RTN","IBCNAU3",67,0)
 . E  W $P(IBPD,U)_U_$P(IBPD,U,2)_U_USER_U_DATE_U_$P(IBPD,U,7)_U_$S($P(IBPD,U,5)="":"<no previous value>",1:$P(IBPD,U,5))_U_$P(IBPD,U,6)
"RTN","IBCNAU3",68,0)
 . W !
"RTN","IBCNAU3",69,0)
 ; -- write to screen
"RTN","IBCNAU3",70,0)
 I $E(IOST,1,2)["C-" W !,"[END OF REPORT]",! S DIR("A")="Press RETURN to continue" D PAUSE
"RTN","IBCNAU3",71,0)
 Q
"RTN","IBCNBOA")
0^2^B68100333^B66757822
"RTN","IBCNBOA",1,0)
IBCNBOA ;ALB/ARH - Ins Buffer: Activity Report ;1 Jun 97
"RTN","IBCNBOA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,305,528,602**;21-MAR-94;Build 22
"RTN","IBCNBOA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBOA",4,0)
 ;
"RTN","IBCNBOA",5,0)
EN ;get parameters then run the report
"RTN","IBCNBOA",6,0)
 ;
"RTN","IBCNBOA",7,0)
 K ^TMP($J) D HOME^%ZIS S IBHDR="INSURANCE BUFFER ACTIVITY REPORT" W @IOF,!!,?25,IBHDR
"RTN","IBCNBOA",8,0)
 W !!,"This report contains the counts and time statistics for all activity in the",!,"Insurance Buffer.",!!
"RTN","IBCNBOA",9,0)
 ;
"RTN","IBCNBOA",10,0)
 S IBBEG=$$DATES^IBCNBOE("Beginning") G:'IBBEG EXIT
"RTN","IBCNBOA",11,0)
 S IBEND=$$DATES^IBCNBOE("Ending",IBBEG) G:'IBEND EXIT  W !!
"RTN","IBCNBOA",12,0)
 ;
"RTN","IBCNBOA",13,0)
 S IBMONTH=$$MONTH^IBCNBOE G:IBMONTH="" EXIT  W !!
"RTN","IBCNBOA",14,0)
 ;
"RTN","IBCNBOA",15,0)
 S IBOUT=$$OUT^IBCNBOE G:IBOUT="" EXIT
"RTN","IBCNBOA",16,0)
 ;
"RTN","IBCNBOA",17,0)
DEV ;get the device
"RTN","IBCNBOA",18,0)
 S %ZIS="QM",%ZIS("A")="OUTPUT DEVICE: " D ^%ZIS G:POP EXIT
"RTN","IBCNBOA",19,0)
 I $D(IO("Q")) S ZTRTN="RPT^IBCNBOA",ZTDESC=IBHDR,ZTSAVE("IB*")="" D ^%ZTLOAD K IO("Q") G EXIT
"RTN","IBCNBOA",20,0)
 U IO
"RTN","IBCNBOA",21,0)
 ;
"RTN","IBCNBOA",22,0)
RPT ; run report
"RTN","IBCNBOA",23,0)
 S IBQUIT=0
"RTN","IBCNBOA",24,0)
 ;
"RTN","IBCNBOA",25,0)
 ;Patch 305- QUIT in line below inserted for transmission to ARC
"RTN","IBCNBOA",26,0)
 D SEARCH(IBBEG,IBEND,IBMONTH) Q:$G(IBARFLAG)  G:IBQUIT EXIT
"RTN","IBCNBOA",27,0)
 D PRINT(IBBEG,IBEND,IBOUT)
"RTN","IBCNBOA",28,0)
 ;
"RTN","IBCNBOA",29,0)
EXIT K ^TMP($J),IBHDR,IBBEG,IBEND,IBMONTH,IBOUT,IBQUIT
"RTN","IBCNBOA",30,0)
 Q:$D(ZTQUEUED)
"RTN","IBCNBOA",31,0)
 D ^%ZISC
"RTN","IBCNBOA",32,0)
 Q
"RTN","IBCNBOA",33,0)
 ;
"RTN","IBCNBOA",34,0)
SEARCH(IBBEG,IBEND,IBMONTH) ; search/sort statistics for activity report
"RTN","IBCNBOA",35,0)
 N IBXST,IBXDT,IBBUFDA,IBB0,IBSTAT,IBTIME,IBS3,IBDATE,IBVER,IBDT2 S IBQUIT=""
"RTN","IBCNBOA",36,0)
 S IBBEG=$G(IBBEG)-.01,IBEND=$S('$G(IBEND):9999999,1:$P(IBEND,".")+.9)
"RTN","IBCNBOA",37,0)
 ;
"RTN","IBCNBOA",38,0)
 S IBXST="" F  S IBXST=$O(^IBA(355.33,"AFST",IBXST)) Q:IBXST=""  D   Q:IBQUIT
"RTN","IBCNBOA",39,0)
 . S IBXDT=+IBBEG F  S IBXDT=$O(^IBA(355.33,"AFST",IBXST,IBXDT)) Q:'IBXDT!(IBXDT>IBEND)  D  S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOA",40,0)
 .. S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AFST",IBXST,IBXDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBOA",41,0)
 ... ;
"RTN","IBCNBOA",42,0)
 ... S IBB0=$G(^IBA(355.33,IBBUFDA,0)),IBSTAT=$P(IBB0,U,4),IBVER=$P(IBB0,U,10)
"RTN","IBCNBOA",43,0)
 ... ;
"RTN","IBCNBOA",44,0)
 ... ; entered
"RTN","IBCNBOA",45,0)
 ... I IBXST="E" S IBDATE=+IBB0 I +IBDATE,IBDATE>IBBEG,IBDATE<IBEND D
"RTN","IBCNBOA",46,0)
 .... S IBDT2=+$P(IBB0,U,10) I 'IBDT2 S IBDT2=+$P(IBB0,U,5) I 'IBDT2 S IBDT2=$$NOW^XLFDT
"RTN","IBCNBOA",47,0)
 .... S IBTIME=+$$FMDIFF^XLFDT(IBDT2,IBDATE,2),IBSTAT="ENTERED",IBS3=1
"RTN","IBCNBOA",48,0)
 .... I +$G(IBMONTH) D SET(IBSTAT,$E(IBDATE,1,5),IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",49,0)
 .... D SET(IBSTAT,99999,IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",50,0)
 ... ;
"RTN","IBCNBOA",51,0)
 ... ; verified
"RTN","IBCNBOA",52,0)
 ... I IBXST="V" S IBDATE=+$P(IBB0,U,10) I +IBDATE,IBDATE>IBBEG,IBDATE<IBEND D
"RTN","IBCNBOA",53,0)
 .... S IBTIME=+$$FMDIFF^XLFDT(IBDATE,+IBB0,2),IBSTAT="VERIFIED",IBS3=2
"RTN","IBCNBOA",54,0)
 .... I +$G(IBMONTH) D SET(IBSTAT,$E(IBDATE,1,5),IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",55,0)
 .... D SET(IBSTAT,99999,IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",56,0)
 ... ;
"RTN","IBCNBOA",57,0)
 ... ; processed
"RTN","IBCNBOA",58,0)
 ... I IBXST="A"!(IBXST="R") S IBDATE=+$P(IBB0,U,5) I +IBDATE,IBDATE>IBBEG,IBDATE<IBEND D
"RTN","IBCNBOA",59,0)
 .... S IBDT2=+IBVER I 'IBVER S IBDT2=+IBB0
"RTN","IBCNBOA",60,0)
 .... S IBTIME=+$$FMDIFF^XLFDT(IBDATE,+IBDT2,2),IBSTAT="UNKNOWN",IBS3=6
"RTN","IBCNBOA",61,0)
 .... I $P(IBB0,U,4)="A" S IBS3=3,IBSTAT="ACCEPTED" I 'IBVER S IBS3=4,IBSTAT=IBSTAT_" (&V)"
"RTN","IBCNBOA",62,0)
 .... I $P(IBB0,U,4)="R" S IBS3=5,IBSTAT="REJECTED" I +IBVER S IBS3=6,IBSTAT=IBSTAT_" (V)"
"RTN","IBCNBOA",63,0)
 .... I +$G(IBMONTH) D SET(IBSTAT,$E(IBDATE,1,5),IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",64,0)
 .... D SET(IBSTAT,99999,IBS3,IBTIME,IBB0)
"RTN","IBCNBOA",65,0)
 ;
"RTN","IBCNBOA",66,0)
 Q
"RTN","IBCNBOA",67,0)
 ;
"RTN","IBCNBOA",68,0)
SET(STAT,S1,S3,TIME,IBB0) ;
"RTN","IBCNBOA",69,0)
 D TMP("IBCNBOA",S1,1,S3,TIME,STAT)
"RTN","IBCNBOA",70,0)
 I S3<3 D TMP("IBCNBOA",S1,2,1,TIME,"NOT PROCESSED")
"RTN","IBCNBOA",71,0)
 I S3>2 D TMP("IBCNBOA",S1,2,2,TIME,"PROCESSED")
"RTN","IBCNBOA",72,0)
 D TMP("IBCNBOA",S1,2,9,TIME,"TOTAL")
"RTN","IBCNBOA",73,0)
 ;
"RTN","IBCNBOA",74,0)
 Q:$E(STAT)'="A"
"RTN","IBCNBOA",75,0)
 ;
"RTN","IBCNBOA",76,0)
 D TMP1("IBCNBOAC",S1,+$P(IBB0,U,7),+$P(IBB0,U,8),+$P(IBB0,U,9))
"RTN","IBCNBOA",77,0)
 Q
"RTN","IBCNBOA",78,0)
 ;
"RTN","IBCNBOA",79,0)
TMP(XREF,S1,S2,S3,TIME,NAME) ;
"RTN","IBCNBOA",80,0)
 S ^TMP($J,XREF,S1,S2,S3)=NAME
"RTN","IBCNBOA",81,0)
 S ^TMP($J,XREF,S1,S2,S3,"CNT")=$G(^TMP($J,XREF,S1,S2,S3,"CNT"))+1
"RTN","IBCNBOA",82,0)
 S ^TMP($J,XREF,S1,S2,S3,"TM")=$G(^TMP($J,XREF,S1,S2,S3,"TM"))+TIME
"RTN","IBCNBOA",83,0)
 I '$G(^TMP($J,XREF,S1,S2,S3,"HG"))!($G(^TMP($J,XREF,S1,S2,S3,"HG"))<TIME) S ^TMP($J,XREF,S1,S2,S3,"HG")=TIME
"RTN","IBCNBOA",84,0)
 I '$G(^TMP($J,XREF,S1,S2,S3,"LS"))!($G(^TMP($J,XREF,S1,S2,S3,"LS"))>TIME) S ^TMP($J,XREF,S1,S2,S3,"LS")=TIME
"RTN","IBCNBOA",85,0)
 Q
"RTN","IBCNBOA",86,0)
 ;
"RTN","IBCNBOA",87,0)
TMP1(XREF,S1,IC,GC,PC) ;
"RTN","IBCNBOA",88,0)
 I +IC S ^TMP($J,XREF,S1,"I")=$G(^TMP($J,XREF,S1,"I"))+1
"RTN","IBCNBOA",89,0)
 I +GC S ^TMP($J,XREF,S1,"G")=$G(^TMP($J,XREF,S1,"G"))+1
"RTN","IBCNBOA",90,0)
 I +PC S ^TMP($J,XREF,S1,"P")=$G(^TMP($J,XREF,S1,"P"))+1
"RTN","IBCNBOA",91,0)
 S ^TMP($J,XREF,S1,"CNT")=$G(^TMP($J,XREF,S1,"CNT"))+1
"RTN","IBCNBOA",92,0)
 Q
"RTN","IBCNBOA",93,0)
 ;
"RTN","IBCNBOA",94,0)
 ;
"RTN","IBCNBOA",95,0)
 ;
"RTN","IBCNBOA",96,0)
PRINT(IBBEG,IBEND,IBOUT) ;
"RTN","IBCNBOA",97,0)
 N IBXREF,IBLABLE,IBS1,IBS2,IBS3,IBINS,IBGRP,IBPOL,IBCNT,IBIP,IBGP,IBPP,IBRDT,IBPGN,IBRANGE,IBLN,IBI
"RTN","IBCNBOA",98,0)
 ;
"RTN","IBCNBOA",99,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNBOA",100,0)
 S IBRANGE=$$FMTE^XLFDT(+IBBEG)_" - "_$$FMTE^XLFDT(IBEND)
"RTN","IBCNBOA",101,0)
 S IBRDT=$$FMTE^XLFDT($J($$NOW^XLFDT,0,4),2),IBRDT=$TR(IBRDT,"@"," "),(IBLN,IBPGN)=0
"RTN","IBCNBOA",102,0)
 ;
"RTN","IBCNBOA",103,0)
 ; Excel output
"RTN","IBCNBOA",104,0)
 I IBOUT="E" D PHDL D  S IBI=$$PAUSE Q
"RTN","IBCNBOA",105,0)
 . S IBXREF="IBCNBOA",IBS1="" F  S IBS1=$O(^TMP($J,IBXREF,IBS1)) Q:IBS1=""  D
"RTN","IBCNBOA",106,0)
 .. S IBLABLE=$S(IBS1=99999:"TOTALS",($E(IBBEG,1,5)<IBS1)&($E(IBEND,1,5)>IBS1):$$FMTE^XLFDT(IBS1_"00"),1:"")
"RTN","IBCNBOA",107,0)
 .. I IBLABLE="" S IBLABLE=$$FMTE^XLFDT($S($E(IBBEG,1,5)<IBS1:IBS1_"01",1:IBBEG))_" - "_$$FMTE^XLFDT($S($E(IBEND,1,5)>IBS1:$$SCH^XLFDT("1M(L)",IBS1_11),1:IBEND))
"RTN","IBCNBOA",108,0)
 .. S IBS2=0 F  S IBS2=$O(^TMP($J,IBXREF,IBS1,IBS2)) Q:IBS2=""  D
"RTN","IBCNBOA",109,0)
 ... S IBS3="" F  S IBS3=$O(^TMP($J,IBXREF,IBS1,IBS2,IBS3)) Q:'IBS3  D PRTLN
"RTN","IBCNBOA",110,0)
 .. ;
"RTN","IBCNBOA",111,0)
 .. S IBINS=+$G(^TMP($J,"IBCNBOAC",IBS1,"I")),IBGRP=+$G(^TMP($J,"IBCNBOAC",IBS1,"G"))
"RTN","IBCNBOA",112,0)
 .. S IBPOL=+$G(^TMP($J,"IBCNBOAC",IBS1,"P")),IBCNT=+$G(^TMP($J,"IBCNBOAC",IBS1,"CNT"))
"RTN","IBCNBOA",113,0)
 .. S (IBIP,IBGP,IBPP)=0 I IBCNT'=0 S IBIP=((IBINS/IBCNT)*100)\1,IBGP=((IBGRP/IBCNT)*100)\1,IBPP=((IBPOL/IBCNT)*100)\1
"RTN","IBCNBOA",114,0)
 .. W U_IBINS_U_IBIP_"%"_U_IBGRP_U_IBGP_"%"_U_IBPOL_U_IBPP_"%"
"RTN","IBCNBOA",115,0)
 ;
"RTN","IBCNBOA",116,0)
 D HDR
"RTN","IBCNBOA",117,0)
 ;
"RTN","IBCNBOA",118,0)
 S IBXREF="IBCNBOA",IBS1="" F  S IBS1=$O(^TMP($J,IBXREF,IBS1)) Q:IBS1=""  D:IBLN>(IOSL-17) HDR Q:IBQUIT  D  S IBLN=IBLN+7
"RTN","IBCNBOA",119,0)
 . S IBLABLE=$S(IBS1=99999:"TOTALS",($E(IBBEG,1,5)<IBS1)&($E(IBEND,1,5)>IBS1):$$FMTE^XLFDT(IBS1_"00"),1:"")
"RTN","IBCNBOA",120,0)
 . I IBLABLE="" S IBLABLE=$$FMTE^XLFDT($S($E(IBBEG,1,5)<IBS1:IBS1_"01",1:IBBEG))_" - "_$$FMTE^XLFDT($S($E(IBEND,1,5)>IBS1:$$SCH^XLFDT("1M(L)",IBS1_11),1:IBEND))
"RTN","IBCNBOA",121,0)
 . W !,?(40-($L(IBLABLE)/2)),IBLABLE,!
"RTN","IBCNBOA",122,0)
 . W !,?43,"AVERAGE",?56,"LONGEST",?68,"SHORTEST"
"RTN","IBCNBOA",123,0)
 . W !,"STATUS",?22,"COUNT",?30,"PERCENT",?43,"# DAYS",?56,"# DAYS",?68,"# DAYS"
"RTN","IBCNBOA",124,0)
 . ;
"RTN","IBCNBOA",125,0)
 . S IBS2=0 F  S IBS2=$O(^TMP($J,IBXREF,IBS1,IBS2)) Q:IBS2=""  D  S IBLN=IBLN+1
"RTN","IBCNBOA",126,0)
 .. W !,"-----------------------------------------------------------------------------"
"RTN","IBCNBOA",127,0)
 .. S IBS3="" F  S IBS3=$O(^TMP($J,IBXREF,IBS1,IBS2,IBS3)) Q:'IBS3  D PRTLN  S IBLN=IBLN+1
"RTN","IBCNBOA",128,0)
 . ;
"RTN","IBCNBOA",129,0)
 . S IBINS=+$G(^TMP($J,"IBCNBOAC",IBS1,"I")),IBGRP=+$G(^TMP($J,"IBCNBOAC",IBS1,"G"))
"RTN","IBCNBOA",130,0)
 . S IBPOL=+$G(^TMP($J,"IBCNBOAC",IBS1,"P")),IBCNT=+$G(^TMP($J,"IBCNBOAC",IBS1,"CNT"))
"RTN","IBCNBOA",131,0)
 . S (IBIP,IBGP,IBPP)=0 I IBCNT'=0 S IBIP=((IBINS/IBCNT)*100)\1,IBGP=((IBGRP/IBCNT)*100)\1,IBPP=((IBPOL/IBCNT)*100)\1
"RTN","IBCNBOA",132,0)
 . W !!,?2,IBINS," New Compan",$S(IBINS=1:"y",1:"ies")," (",IBIP,"%), "
"RTN","IBCNBOA",133,0)
 . W IBGRP," New Group/Plan",$S(IBGRP=1:"",1:"s")," (",IBGP,"%), "
"RTN","IBCNBOA",134,0)
 . W IBPOL," New Patient Polic",$S(IBPOL=1:"y",1:"ies")," (",IBPP,"%)",!
"RTN","IBCNBOA",135,0)
 ;
"RTN","IBCNBOA",136,0)
 I 'IBQUIT S IBI=$$PAUSE
"RTN","IBCNBOA",137,0)
 Q
"RTN","IBCNBOA",138,0)
 ;
"RTN","IBCNBOA",139,0)
PRTLN ;
"RTN","IBCNBOA",140,0)
 N IBSTX,IBCNT,IBTM,IBHG,IBLS,IBTCNT
"RTN","IBCNBOA",141,0)
 ;
"RTN","IBCNBOA",142,0)
 S IBSTX=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3))
"RTN","IBCNBOA",143,0)
 S IBCNT=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"CNT")) Q:'IBCNT
"RTN","IBCNBOA",144,0)
 S IBTM=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"TM"))
"RTN","IBCNBOA",145,0)
 S IBHG=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"HG"))
"RTN","IBCNBOA",146,0)
 S IBLS=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"LS"))
"RTN","IBCNBOA",147,0)
 S IBTCNT=$G(^TMP($J,IBXREF,IBS1,2,9,"CNT")) Q:'IBTCNT
"RTN","IBCNBOA",148,0)
 ;
"RTN","IBCNBOA",149,0)
 ; Excel output
"RTN","IBCNBOA",150,0)
 I IBOUT="E" W !,IBLABLE_U_IBSTX_U_$FN(IBCNT,",")_U_((IBCNT/IBTCNT)*100)_"%"_U_$$STD((IBTM/IBCNT))_U_$$STD(IBHG)_U_$$STD(IBLS) Q
"RTN","IBCNBOA",151,0)
 ;
"RTN","IBCNBOA",152,0)
 ; Report output
"RTN","IBCNBOA",153,0)
 W !,IBSTX,?20,$J($FN(IBCNT,","),7),?30,$J(((IBCNT/IBTCNT)*100),6,1),"%",?43,$J($$STD((IBTM/IBCNT)),6,1),?56,$J($$STD(IBHG),6,1),?68,$J($$STD(IBLS),6,1)
"RTN","IBCNBOA",154,0)
 Q
"RTN","IBCNBOA",155,0)
 ;
"RTN","IBCNBOA",156,0)
STD(SEC) ; convert seconds to days
"RTN","IBCNBOA",157,0)
 N IBX,IBD,IBS,IBH,DAYS S DAYS="" G:'$G(SEC) STDQ
"RTN","IBCNBOA",158,0)
 S IBD=(SEC/86400),IBD=+$P(IBD,".")
"RTN","IBCNBOA",159,0)
 S IBS=SEC-(IBD*86400)
"RTN","IBCNBOA",160,0)
 S IBH=((IBS/60)/60),IBH=+$J(IBH,0,2)
"RTN","IBCNBOA",161,0)
 S DAYS=IBD+(IBH/24)
"RTN","IBCNBOA",162,0)
STDQ Q DAYS
"RTN","IBCNBOA",163,0)
 ;
"RTN","IBCNBOA",164,0)
HDR ;print the report header
"RTN","IBCNBOA",165,0)
 S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOA",166,0)
 I IBPGN>0 S IBQUIT=$$PAUSE Q:IBQUIT
"RTN","IBCNBOA",167,0)
 S IBPGN=IBPGN+1,IBLN=4 I IBPGN>1!($E(IOST,1,2)["C-") W @IOF
"RTN","IBCNBOA",168,0)
 W !,"INSURANCE BUFFER ACTIVITY REPORT   ",IBRANGE," "
"RTN","IBCNBOA",169,0)
 W ?(IOM-22),IBRDT,?(IOM-7)," PAGE ",IBPGN,!
"RTN","IBCNBOA",170,0)
 S IBI="",$P(IBI,"-",IOM+1)="" W IBI,!
"RTN","IBCNBOA",171,0)
 Q
"RTN","IBCNBOA",172,0)
 ;
"RTN","IBCNBOA",173,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNBOA",174,0)
 N X
"RTN","IBCNBOA",175,0)
 ; ; IB*602/HN ; Add report headers to Excel Spreadsheets 
"RTN","IBCNBOA",176,0)
 W !,"INSURANCE BUFFER ACTIVITY REPORT^",IBRANGE_"^"_$$FMTE^XLFDT($$NOW^XLFDT,1),!
"RTN","IBCNBOA",177,0)
 ; IB*602/HN end 
"RTN","IBCNBOA",178,0)
 S X="MONTH^STATUS^COUNT^PERCENT^AVERAGE # DAYS^LONGEST # DAYS^SHORTEST # DAYS^New Companies^% New Companies^New Group/Plans^% New Group/Plans^New Patient Policies^% New Patient Policies"
"RTN","IBCNBOA",179,0)
 W X
"RTN","IBCNBOA",180,0)
 K X
"RTN","IBCNBOA",181,0)
 Q
"RTN","IBCNBOA",182,0)
 ;
"RTN","IBCNBOA",183,0)
PAUSE() ;pause at end of screen if being displayed on a terminal
"RTN","IBCNBOA",184,0)
 N IBX,DIR,DIRUT,X,Y S IBX=0
"RTN","IBCNBOA",185,0)
 I $E(IOST,1,2)["C-" W !! S DIR(0)="E" D ^DIR K DIR I $D(DUOUT)!($D(DIRUT)) S IBX=1
"RTN","IBCNBOA",186,0)
 Q IBX
"RTN","IBCNBOA",187,0)
 ;
"RTN","IBCNBOA",188,0)
STOP() ;determine if user has requested the queued report to stop
"RTN","IBCNBOA",189,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S ZTSTOP=1 K ZTREQ I +$G(IBPGN) W !,"***TASK STOPPED BY USER***"
"RTN","IBCNBOA",190,0)
 Q +$G(ZTSTOP)
"RTN","IBCNBOA",191,0)
 ;
"RTN","IBCNBOA",192,0)
IBAR(IBBEG,IBEND) ;Entry point for Vista IB AR data to ARC
"RTN","IBCNBOA",193,0)
 ;patch 305 - called by IBRFN4
"RTN","IBCNBOA",194,0)
 N IBMONTH,IBARFLAG,IBARDATA,IBTM,IBCNT
"RTN","IBCNBOA",195,0)
 S IBMONTH=0,IBARFLAG=1 K ^TMP($J)
"RTN","IBCNBOA",196,0)
 D RPT
"RTN","IBCNBOA",197,0)
 S IBTM=$G(^TMP($J,"IBCNBOA",99999,2,2,"TM"))
"RTN","IBCNBOA",198,0)
 S IBCNT=$G(^TMP($J,"IBCNBOA",99999,2,2,"CNT"))
"RTN","IBCNBOA",199,0)
 I 'IBCNT S IBARDATA=0 G IBARQ
"RTN","IBCNBOA",200,0)
 S IBARDATA=$FN($$STD((IBTM/IBCNT)),"",1)
"RTN","IBCNBOA",201,0)
 K ^TMP($J)
"RTN","IBCNBOA",202,0)
IBARQ Q IBARDATA
"RTN","IBCNBOE")
0^15^B112716320^B109925669
"RTN","IBCNBOE",1,0)
IBCNBOE ;ALB/ARH - Ins Buffer: Employee Report ;1 Jun 97
"RTN","IBCNBOE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,528,602**;21-MAR-94;Build 22
"RTN","IBCNBOE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBOE",4,0)
 ;
"RTN","IBCNBOE",5,0)
EN ;get parameters then run the report
"RTN","IBCNBOE",6,0)
 N IBX S IBX=$$WR Q:'IBX  I IBX=1 G ^IBCNBOF ; WHICH REPORT?  entered or processed
"RTN","IBCNBOE",7,0)
 ;
"RTN","IBCNBOE",8,0)
 ;
"RTN","IBCNBOE",9,0)
 K ^TMP($J) D HOME^%ZIS S IBHDR="INSURANCE BUFFER INSURANCE EMPLOYEE REPORT" W @IOF,!!,?17,IBHDR
"RTN","IBCNBOE",10,0)
 W !!,"This report produces counts and time statistics for Insurance Employees that",!,"have either Verified or Processed (Accept/Reject) an Insurance Buffer entry.",!!
"RTN","IBCNBOE",11,0)
 ;
"RTN","IBCNBOE",12,0)
 S IBEMPL=$$EMPL G:IBEMPL="" EXIT  W !!
"RTN","IBCNBOE",13,0)
 ;
"RTN","IBCNBOE",14,0)
 I +IBEMPL S IBEMPL=$$SELEMPL("Verifies or Processes") G:IBEMPL="" EXIT  W !!
"RTN","IBCNBOE",15,0)
 ;
"RTN","IBCNBOE",16,0)
 S IBBEG=$$DATES("Beginning") G:'IBBEG EXIT
"RTN","IBCNBOE",17,0)
 S IBEND=$$DATES("Ending",IBBEG) G:'IBEND EXIT  W !!
"RTN","IBCNBOE",18,0)
 ;
"RTN","IBCNBOE",19,0)
 S IBMONTH=$$MONTH G:IBMONTH="" EXIT  W !!
"RTN","IBCNBOE",20,0)
 ;
"RTN","IBCNBOE",21,0)
 S IBOUT=$$OUT G:IBOUT="" EXIT
"RTN","IBCNBOE",22,0)
 ;
"RTN","IBCNBOE",23,0)
DEV ;get the device
"RTN","IBCNBOE",24,0)
 S %ZIS="QM",%ZIS("A")="OUTPUT DEVICE: " D ^%ZIS G:POP EXIT
"RTN","IBCNBOE",25,0)
 I $D(IO("Q")) S ZTRTN="RPT^IBCNBOE",ZTDESC=IBHDR,ZTSAVE("IB*")="" D ^%ZTLOAD K IO("Q") G EXIT
"RTN","IBCNBOE",26,0)
 U IO
"RTN","IBCNBOE",27,0)
 ;
"RTN","IBCNBOE",28,0)
RPT ; run report
"RTN","IBCNBOE",29,0)
 S IBQUIT=0
"RTN","IBCNBOE",30,0)
 ;
"RTN","IBCNBOE",31,0)
 D SEARCH(IBBEG,IBEND,IBMONTH,IBEMPL) G:IBQUIT EXIT
"RTN","IBCNBOE",32,0)
 D PRINT(IBBEG,IBEND,IBEMPL,IBOUT)
"RTN","IBCNBOE",33,0)
 ;
"RTN","IBCNBOE",34,0)
EXIT K ^TMP($J),IBHDR,IBBEG,IBEND,IBMONTH,IBOUT,IBQUIT,IBEMPL
"RTN","IBCNBOE",35,0)
 Q:$D(ZTQUEUED)
"RTN","IBCNBOE",36,0)
 D ^%ZISC
"RTN","IBCNBOE",37,0)
 Q
"RTN","IBCNBOE",38,0)
 ;
"RTN","IBCNBOE",39,0)
SEARCH(IBBEG,IBEND,IBMONTH,IBEMPL) ; search/sort statistics for activity report
"RTN","IBCNBOE",40,0)
 N IBXST,IBXDT,IBBUFDA,IBB0,IBDATE,IBEMP,IBTIME,IBSTAT,IBDT2,IBVER,IBS3 S IBQUIT=""
"RTN","IBCNBOE",41,0)
 S IBBEG=$G(IBBEG)-.01,IBEND=$S('$G(IBEND):9999999,1:$P(IBEND,".")+.9)
"RTN","IBCNBOE",42,0)
 ;
"RTN","IBCNBOE",43,0)
 F IBXST="A","R","V"  D  Q:IBQUIT
"RTN","IBCNBOE",44,0)
 . S IBXDT=IBBEG F  S IBXDT=$O(^IBA(355.33,"AFST",IBXST,IBXDT)) Q:'IBXDT!(IBXDT>IBEND)  D  S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOE",45,0)
 .. S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AFST",IBXST,IBXDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBOE",46,0)
 ... ;
"RTN","IBCNBOE",47,0)
 ... S IBB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNBOE",48,0)
 ... ;
"RTN","IBCNBOE",49,0)
 ... ; verified
"RTN","IBCNBOE",50,0)
 ... I IBXST="V" S IBDATE=+$P(IBB0,U,10) I +IBDATE,IBDATE>IBBEG,IBDATE<IBEND D
"RTN","IBCNBOE",51,0)
 .... S IBEMP=+$P(IBB0,U,11) I +IBEMPL,IBEMPL'=IBEMP Q
"RTN","IBCNBOE",52,0)
 .... S IBTIME=$$FMDIFF^XLFDT(IBDATE,+IBB0,2),IBSTAT="VERIFIED",IBS3=1
"RTN","IBCNBOE",53,0)
 .... D SET(IBSTAT,IBEMP,$E(IBDATE,1,5),IBS3,IBTIME,IBB0,$G(IBMONTH))
"RTN","IBCNBOE",54,0)
 ... ;
"RTN","IBCNBOE",55,0)
 ... ; processed
"RTN","IBCNBOE",56,0)
 ... I IBXST="A"!(IBXST="R") S IBDATE=+$P(IBB0,U,5) I +IBDATE,IBDATE>IBBEG,IBDATE<IBEND D
"RTN","IBCNBOE",57,0)
 .... S IBEMP=+$P(IBB0,U,6) I +IBEMPL,IBEMPL'=IBEMP Q
"RTN","IBCNBOE",58,0)
 .... S IBVER=$P(IBB0,U,10),IBSTAT="UNKNOWN",IBS3=6
"RTN","IBCNBOE",59,0)
 .... S IBDT2=$S(+IBVER:+IBVER,1:+IBB0),IBTIME=$$FMDIFF^XLFDT(IBDATE,+IBDT2,2)
"RTN","IBCNBOE",60,0)
 .... ;
"RTN","IBCNBOE",61,0)
 .... I $P(IBB0,U,4)="A" S IBS3=2,IBSTAT="ACCEPTED" I 'IBVER S IBS3=3,IBSTAT=IBSTAT_" (&V)"
"RTN","IBCNBOE",62,0)
 .... I $P(IBB0,U,4)="R" S IBS3=4,IBSTAT="REJECTED" I +IBVER S IBS3=5,IBSTAT=IBSTAT_" (V)"
"RTN","IBCNBOE",63,0)
 .... D SET(IBSTAT,IBEMP,$E(IBDATE,1,5),IBS3,IBTIME,IBB0,$G(IBMONTH))
"RTN","IBCNBOE",64,0)
 ;
"RTN","IBCNBOE",65,0)
 Q
"RTN","IBCNBOE",66,0)
 ;
"RTN","IBCNBOE",67,0)
SET(STAT,IBEMP,IBDATE,S3,TIME,IBB0,IBMONTH) ;
"RTN","IBCNBOE",68,0)
 I +$G(IBMONTH) D SET1(IBSTAT,IBEMP,$E(IBDATE,1,5),S3,IBTIME,IBB0)
"RTN","IBCNBOE",69,0)
 D SET1(IBSTAT,IBEMP,99999,S3,IBTIME,IBB0)
"RTN","IBCNBOE",70,0)
 D SET1(IBSTAT,"~",99999,S3,IBTIME,IBB0)
"RTN","IBCNBOE",71,0)
 Q
"RTN","IBCNBOE",72,0)
 ;
"RTN","IBCNBOE",73,0)
SET1(STAT,S1,S2,S3,TIME,IBB0) ;
"RTN","IBCNBOE",74,0)
 ;
"RTN","IBCNBOE",75,0)
 D TMP("IBCNBOE",S1,S2,S3,TIME,STAT)
"RTN","IBCNBOE",76,0)
 D TMP("IBCNBOE",S1,S2,9,TIME,"TOTAL")
"RTN","IBCNBOE",77,0)
 ;
"RTN","IBCNBOE",78,0)
 Q:$E(STAT)'="A"
"RTN","IBCNBOE",79,0)
 ;
"RTN","IBCNBOE",80,0)
 D TMP1("IBCNBOEC",S1,S2,+$P(IBB0,U,7),+$P(IBB0,U,8),+$P(IBB0,U,9))
"RTN","IBCNBOE",81,0)
 Q
"RTN","IBCNBOE",82,0)
 ;
"RTN","IBCNBOE",83,0)
TMP(XREF,S1,S2,S3,TIME,NAME) ;
"RTN","IBCNBOE",84,0)
 S ^TMP($J,XREF,S1,S2,S3)=NAME
"RTN","IBCNBOE",85,0)
 S ^TMP($J,XREF,S1,S2,S3,"CNT")=$G(^TMP($J,XREF,S1,S2,S3,"CNT"))+1
"RTN","IBCNBOE",86,0)
 S ^TMP($J,XREF,S1,S2,S3,"TM")=$G(^TMP($J,XREF,S1,S2,S3,"TM"))+TIME
"RTN","IBCNBOE",87,0)
 I '$G(^TMP($J,XREF,S1,S2,S3,"HG"))!($G(^TMP($J,XREF,S1,S2,S3,"HG"))<TIME) S ^TMP($J,XREF,S1,S2,S3,"HG")=TIME
"RTN","IBCNBOE",88,0)
 I '$G(^TMP($J,XREF,S1,S2,S3,"LS"))!($G(^TMP($J,XREF,S1,S2,S3,"LS"))>TIME) S ^TMP($J,XREF,S1,S2,S3,"LS")=TIME
"RTN","IBCNBOE",89,0)
 Q
"RTN","IBCNBOE",90,0)
 ;
"RTN","IBCNBOE",91,0)
TMP1(XREF,S1,S2,IC,GC,PC) ;
"RTN","IBCNBOE",92,0)
 I +IC S ^TMP($J,XREF,S1,S2,"I")=$G(^TMP($J,XREF,S1,S2,"I"))+1
"RTN","IBCNBOE",93,0)
 I +GC S ^TMP($J,XREF,S1,S2,"G")=$G(^TMP($J,XREF,S1,S2,"G"))+1
"RTN","IBCNBOE",94,0)
 I +PC S ^TMP($J,XREF,S1,S2,"P")=$G(^TMP($J,XREF,S1,S2,"P"))+1
"RTN","IBCNBOE",95,0)
 S ^TMP($J,XREF,S1,S2,"CNT")=$G(^TMP($J,XREF,S1,S2,"CNT"))+1
"RTN","IBCNBOE",96,0)
 Q
"RTN","IBCNBOE",97,0)
 ;
"RTN","IBCNBOE",98,0)
 ;
"RTN","IBCNBOE",99,0)
 ;
"RTN","IBCNBOE",100,0)
PRINT(IBBEG,IBEND,IBEMPL,IBOUT) ;
"RTN","IBCNBOE",101,0)
 N IBXREF,IBLABLE,IBEMPN,IBS1,IBS2,IBS3,IBINS,IBGRP,IBPOL,IBCNT,IBIP,IBGP,IBPP,IBRDT,IBPGN,IBRANGE,IBLN,IBI
"RTN","IBCNBOE",102,0)
 ;
"RTN","IBCNBOE",103,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNBOE",104,0)
 S IBRANGE=$$FMTE^XLFDT(IBBEG)_" - "_$$FMTE^XLFDT(IBEND)
"RTN","IBCNBOE",105,0)
 S IBRDT=$$FMTE^XLFDT($J($$NOW^XLFDT,0,4),2),IBRDT=$TR(IBRDT,"@"," "),(IBLN,IBPGN)=0
"RTN","IBCNBOE",106,0)
 ;
"RTN","IBCNBOE",107,0)
 ; Excel output
"RTN","IBCNBOE",108,0)
 I IBOUT="E" D PHDL D  S IBI=$$PAUSE Q
"RTN","IBCNBOE",109,0)
 . S IBXREF="IBCNBOE",IBS1="" F  S IBS1=$O(^TMP($J,IBXREF,IBS1)) Q:IBS1=""  D
"RTN","IBCNBOE",110,0)
 .. S IBS2=0 F  S IBS2=$O(^TMP($J,IBXREF,IBS1,IBS2)) Q:IBS2=""  D
"RTN","IBCNBOE",111,0)
 ... S IBLABLE=$S(IBS2=99999:"TOTALS",($E(IBBEG,1,5)<IBS2)&($E(IBEND,1,5)>IBS2):$$FMTE^XLFDT(IBS2_"00"),1:"")
"RTN","IBCNBOE",112,0)
 ... I IBLABLE="" S IBLABLE=$$FMTE^XLFDT($S($E(IBBEG,1,5)<IBS2:IBS2_"01",1:IBBEG))_" - "_$$FMTE^XLFDT($S($E(IBEND,1,5)>IBS2:$$SCH^XLFDT("1M(L)",IBS2_11),1:IBEND))
"RTN","IBCNBOE",113,0)
 ... S IBEMPN=$P($G(^VA(200,IBS1,0)),U,1)
"RTN","IBCNBOE",114,0)
 ... S IBS3="" F  S IBS3=$O(^TMP($J,IBXREF,IBS1,IBS2,IBS3)) Q:'IBS3  D PRTLN
"RTN","IBCNBOE",115,0)
 ... ;
"RTN","IBCNBOE",116,0)
 ... S IBINS=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"I")),IBGRP=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"G"))
"RTN","IBCNBOE",117,0)
 ... S IBPOL=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"P")),IBCNT=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"CNT"))
"RTN","IBCNBOE",118,0)
 ... S (IBIP,IBGP,IBPP)=0 I IBCNT'=0 S IBIP=((IBINS/IBCNT)*100)\1,IBGP=((IBGRP/IBCNT)*100)\1,IBPP=((IBPOL/IBCNT)*100)\1
"RTN","IBCNBOE",119,0)
 ... W U_IBINS_U_IBIP_"%"_U_IBGRP_U_IBGP_"%"_U_IBPOL_U_IBPP_"%"
"RTN","IBCNBOE",120,0)
 ;
"RTN","IBCNBOE",121,0)
 D HDR
"RTN","IBCNBOE",122,0)
 ;
"RTN","IBCNBOE",123,0)
 S IBXREF="IBCNBOE",IBS1="" F  S IBS1=$O(^TMP($J,IBXREF,IBS1)) Q:IBS1=""  D  Q:IBQUIT
"RTN","IBCNBOE",124,0)
 . ;
"RTN","IBCNBOE",125,0)
 . S IBS2=0 F  S IBS2=$O(^TMP($J,IBXREF,IBS1,IBS2)) Q:IBS2=""  D:IBLN>(IOSL-15) HDR Q:IBQUIT  D  S IBLN=IBLN+8
"RTN","IBCNBOE",126,0)
 .. S IBLABLE=$S(IBS2=99999:"TOTALS",($E(IBBEG,1,5)<IBS2)&($E(IBEND,1,5)>IBS2):$$FMTE^XLFDT(IBS2_"00"),1:"")
"RTN","IBCNBOE",127,0)
 .. I IBLABLE="" S IBLABLE=$$FMTE^XLFDT($S($E(IBBEG,1,5)<IBS2:IBS2_1,1:IBBEG))_" - "_$$FMTE^XLFDT($S($E(IBEND,1,5)>IBS2:$$SCH^XLFDT("1M(L)",IBS2_11),1:IBEND))
"RTN","IBCNBOE",128,0)
 .. S IBLABLE=$P($G(^VA(200,IBS1,0)),U,1)_"  "_IBLABLE
"RTN","IBCNBOE",129,0)
 .. W !,?(40-($L(IBLABLE)/2)),IBLABLE,!
"RTN","IBCNBOE",130,0)
 .. W !,?43,"AVERAGE",?56,"LONGEST",?68,"SHORTEST"
"RTN","IBCNBOE",131,0)
 .. W !,"STATUS",?22,"COUNT",?30,"PERCENT",?43,"# DAYS",?56,"# DAYS",?68,"# DAYS"
"RTN","IBCNBOE",132,0)
 .. W !,"-----------------------------------------------------------------------------"
"RTN","IBCNBOE",133,0)
 .. ;
"RTN","IBCNBOE",134,0)
 .. S IBS3="" F  S IBS3=$O(^TMP($J,IBXREF,IBS1,IBS2,IBS3)) Q:'IBS3  D PRTLN  S IBLN=IBLN+1
"RTN","IBCNBOE",135,0)
 .. ;
"RTN","IBCNBOE",136,0)
 .. S IBINS=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"I")),IBGRP=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"G"))
"RTN","IBCNBOE",137,0)
 .. S IBPOL=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"P")),IBCNT=+$G(^TMP($J,"IBCNBOEC",IBS1,IBS2,"CNT"))
"RTN","IBCNBOE",138,0)
 .. S (IBIP,IBGP,IBPP)=0 I IBCNT'=0 S IBIP=((IBINS/IBCNT)*100)\1,IBGP=((IBGRP/IBCNT)*100)\1,IBPP=((IBPOL/IBCNT)*100)\1
"RTN","IBCNBOE",139,0)
 .. W !!,?2,IBINS," New Compan",$S(IBINS=1:"y",1:"ies")," (",IBIP,"%), "
"RTN","IBCNBOE",140,0)
 .. W IBGRP," New Group/Plan",$S(IBGRP=1:"",1:"s")," (",IBGP,"%), "
"RTN","IBCNBOE",141,0)
 .. W IBPOL," New Patient Polic",$S(IBPOL=1:"y",1:"ies")," (",IBPP,"%)",!
"RTN","IBCNBOE",142,0)
 ;
"RTN","IBCNBOE",143,0)
 I 'IBQUIT S IBI=$$PAUSE
"RTN","IBCNBOE",144,0)
 Q
"RTN","IBCNBOE",145,0)
 ;
"RTN","IBCNBOE",146,0)
PRTLN ;
"RTN","IBCNBOE",147,0)
 N IBSTX,IBCNT,IBTM,IBHG,IBLS,IBTCNT
"RTN","IBCNBOE",148,0)
 ;
"RTN","IBCNBOE",149,0)
 S IBSTX=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3))
"RTN","IBCNBOE",150,0)
 S IBCNT=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"CNT")) Q:'IBCNT
"RTN","IBCNBOE",151,0)
 S IBTM=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"TM"))
"RTN","IBCNBOE",152,0)
 S IBHG=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"HG"))
"RTN","IBCNBOE",153,0)
 S IBLS=$G(^TMP($J,IBXREF,IBS1,IBS2,IBS3,"LS"))
"RTN","IBCNBOE",154,0)
 S IBTCNT=$G(^TMP($J,IBXREF,IBS1,IBS2,9,"CNT")) Q:'IBTCNT
"RTN","IBCNBOE",155,0)
 ;
"RTN","IBCNBOE",156,0)
 ; Excel output
"RTN","IBCNBOE",157,0)
 I IBOUT="E" W !,IBEMPN_U_IBLABLE_U_IBSTX_U_$FN(IBCNT,",")_U_((IBCNT/IBTCNT)*100)_"%"_U_$$STD((IBTM/IBCNT))_U_$$STD(IBHG)_U_$$STD(IBLS) Q
"RTN","IBCNBOE",158,0)
 ;
"RTN","IBCNBOE",159,0)
 ; Report output
"RTN","IBCNBOE",160,0)
 W !,IBSTX,?20,$J($FN(IBCNT,","),7),?30,$J(((IBCNT/IBTCNT)*100),6,1),"%",?43,$J($$STD((IBTM/IBCNT)),6,1),?56,$J($$STD(IBHG),6,1),?68,$J($$STD(IBLS),6,1)
"RTN","IBCNBOE",161,0)
 Q
"RTN","IBCNBOE",162,0)
 ;
"RTN","IBCNBOE",163,0)
STD(SEC) ; convert seconds to days
"RTN","IBCNBOE",164,0)
 N IBX,IBD,IBS,IBH,DAYS S DAYS="" G:'$G(SEC) STDQ
"RTN","IBCNBOE",165,0)
 S IBD=(SEC/86400),IBD=+$P(IBD,".")
"RTN","IBCNBOE",166,0)
 S IBS=SEC-(IBD*86400)
"RTN","IBCNBOE",167,0)
 S IBH=((IBS/60)/60),IBH=+$J(IBH,0,2)
"RTN","IBCNBOE",168,0)
 S DAYS=IBD+(IBH/24)
"RTN","IBCNBOE",169,0)
STDQ Q DAYS
"RTN","IBCNBOE",170,0)
 ;
"RTN","IBCNBOE",171,0)
HDR ;print the report header
"RTN","IBCNBOE",172,0)
 S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOE",173,0)
 I IBPGN>0 S IBQUIT=$$PAUSE Q:IBQUIT
"RTN","IBCNBOE",174,0)
 S IBPGN=IBPGN+1,IBLN=5 I IBPGN>1!($E(IOST,1,2)["C-") W @IOF
"RTN","IBCNBOE",175,0)
 W !,"INSURANCE BUFFER EMPLOYEE REPORT   ",IBRANGE," "
"RTN","IBCNBOE",176,0)
 W ?(IOM-22),IBRDT,?(IOM-7)," PAGE ",IBPGN,!
"RTN","IBCNBOE",177,0)
 I +$G(IBEMPL) W !,"EMPLOYEE:  ",$P($G(^VA(200,+IBEMPL,0)),U,1),!
"RTN","IBCNBOE",178,0)
 S IBI="",$P(IBI,"-",IOM+1)="" W IBI,!
"RTN","IBCNBOE",179,0)
 Q
"RTN","IBCNBOE",180,0)
 ;
"RTN","IBCNBOE",181,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNBOE",182,0)
 N X
"RTN","IBCNBOE",183,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets 
"RTN","IBCNBOE",184,0)
 W !,"INSURANCE BUFFER EMPLOYEE REPORT^"_IBRANGE_"^"_$$FMTE^XLFDT($$NOW^XLFDT,1),!
"RTN","IBCNBOE",185,0)
 I +$G(IBEMPL) W "EMPLOYEE:  ",$P($G(^VA(200,+IBEMPL,0)),U,1),!
"RTN","IBCNBOE",186,0)
 ; IB*602/HN end  
"RTN","IBCNBOE",187,0)
 S X="EMPLOYEE^MONTH^STATUS^COUNT^PERCENT^AVERAGE # DAYS^LONGEST # DAYS^SHORTEST # DAYS^New Companies^% New Companies^New Group/Plans^% New Group/Plans^New Patient Policies^% New Patient Policies"
"RTN","IBCNBOE",188,0)
 W X
"RTN","IBCNBOE",189,0)
 K X
"RTN","IBCNBOE",190,0)
 Q
"RTN","IBCNBOE",191,0)
 ;
"RTN","IBCNBOE",192,0)
PAUSE() ;pause at end of screen if beeing displayed on a terminal
"RTN","IBCNBOE",193,0)
 N IBX,DIR,DIRUT,X,Y S IBX=0
"RTN","IBCNBOE",194,0)
 I $E(IOST,1,2)["C-" W !! S DIR(0)="E" D ^DIR K DIR I $D(DUOUT)!($D(DIRUT)) S IBX=1
"RTN","IBCNBOE",195,0)
 Q IBX
"RTN","IBCNBOE",196,0)
 ;
"RTN","IBCNBOE",197,0)
STOP() ;determine if user has requested the queued report to stop
"RTN","IBCNBOE",198,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S ZTSTOP=1 K ZTREQ I +$G(IBPGN) W !,"***TASK STOPPED BY USER***"
"RTN","IBCNBOE",199,0)
 Q +$G(ZTSTOP)
"RTN","IBCNBOE",200,0)
 ;
"RTN","IBCNBOE",201,0)
WR() ; which report
"RTN","IBCNBOE",202,0)
 N DIR,X,Y,DIRUT,DUOUT,IBX S IBX=""
"RTN","IBCNBOE",203,0)
 S DIR("?")="Enter 'V' for a report based on employees that verify or process (accept/reject) buffer entries."
"RTN","IBCNBOE",204,0)
 S DIR("?",5)="Enter 'E' for a report based on employees that create new buffer entries."
"RTN","IBCNBOE",205,0)
 S DIR("?",1)="This report may be printed for those employees that create Buffer entries,"
"RTN","IBCNBOE",206,0)
 S DIR("?",2)="primarily non-Insurance personnel or for those employees that verify and process",DIR("?",3)="(accept/reject) Buffer entries, primarily Insurance Personnel.",DIR("?",4)=" "
"RTN","IBCNBOE",207,0)
 S DIR("A")="Include which Type of Employee",DIR(0)="SO^1:Entered By;2:Verified/Processed By" D ^DIR
"RTN","IBCNBOE",208,0)
 S IBX=$S(Y>0:+Y,1:"")
"RTN","IBCNBOE",209,0)
 Q IBX
"RTN","IBCNBOE",210,0)
 ;
"RTN","IBCNBOE",211,0)
EMPL() ; print a single or all employees?
"RTN","IBCNBOE",212,0)
 N DIR,X,Y,DIRUT,DUOUT,IBX S IBX=""
"RTN","IBCNBOE",213,0)
 S DIR("?",1)="Report of activity in the Buffer file by Employee and date range."
"RTN","IBCNBOE",214,0)
 S DIR("?",2)="Enter 'S' to include only a single employee in the report."
"RTN","IBCNBOE",215,0)
 S DIR("?")="Enter 'A' to include all employees in the report."
"RTN","IBCNBOE",216,0)
 S DIR("A")="Include Selected or All Employees"
"RTN","IBCNBOE",217,0)
 S DIR("B")="All",DIR(0)="SO^A:All Employees;S:Selected Employee" D ^DIR
"RTN","IBCNBOE",218,0)
 S IBX=$S(Y="S":1,Y="A":0,1:"")
"RTN","IBCNBOE",219,0)
 Q IBX
"RTN","IBCNBOE",220,0)
 ;
"RTN","IBCNBOE",221,0)
SELEMPL(TYPE) ; get the name of an employee
"RTN","IBCNBOE",222,0)
 N DIC,X,Y,DTOUT,DUOUT,IBX S IBX=""
"RTN","IBCNBOE",223,0)
 S DIC("A")="Select an Employee that "_TYPE_" Buffer entries: "
"RTN","IBCNBOE",224,0)
 S DIC="^VA(200,",DIC(0)="AEMQ" D ^DIC S IBX=+Y I $D(DTOUT)!$D(DUOUT)!(Y<1) S IBX=""
"RTN","IBCNBOE",225,0)
 Q IBX
"RTN","IBCNBOE",226,0)
 ;
"RTN","IBCNBOE",227,0)
DATES(LABLE,IBBEG) ;
"RTN","IBCNBOE",228,0)
 N DIR,X,Y,DIRUT,DUOUT,IBX,IBB,IBD S IBX="",IBB=$P($S(+$G(IBBEG):IBBEG,1:+$O(^IBA(355.33,"B",0))),"."),IBD=$S(+$G(IBBEG):DT,1:IBB)
"RTN","IBCNBOE",229,0)
 S DIR("?")="Enter the "_LABLE_" date to include in the report."
"RTN","IBCNBOE",230,0)
 S DIR("?",1)="Enter a date from the date of the first Buffer entry to today."
"RTN","IBCNBOE",231,0)
 S DIR("A")=LABLE_" Date",DIR("B")=$$FMTE^XLFDT(IBD)
"RTN","IBCNBOE",232,0)
 S DIR(0)="DO^"_IBB_":"_DT_":EX" D ^DIR S IBX=Y I $D(DIRUT)!$D(DUOUT) S IBX=""
"RTN","IBCNBOE",233,0)
 Q IBX
"RTN","IBCNBOE",234,0)
 ;
"RTN","IBCNBOE",235,0)
MONTH() ;
"RTN","IBCNBOE",236,0)
 N DIR,X,Y,DIRUT,DUOUT,IBX S IBX=""
"RTN","IBCNBOE",237,0)
 S DIR("?")="Enter No if only totals for the date range should be reported."
"RTN","IBCNBOE",238,0)
 S DIR("?",1)="Enter Yes if the report should be broken down by month."
"RTN","IBCNBOE",239,0)
 S DIR("A")="Report By Month",DIR(0)="Y",DIR("B")="No" D ^DIR
"RTN","IBCNBOE",240,0)
 S IBX=$S(Y=1:Y,Y=0:Y,1:"")
"RTN","IBCNBOE",241,0)
 Q IBX
"RTN","IBCNBOE",242,0)
 ;
"RTN","IBCNBOE",243,0)
OUT() ;
"RTN","IBCNBOE",244,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNBOE",245,0)
 W !
"RTN","IBCNBOE",246,0)
 S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCNBOE",247,0)
 S DIR("A")="(E)xcel Format or (R)eport Format: "
"RTN","IBCNBOE",248,0)
 S DIR("B")="Report"
"RTN","IBCNBOE",249,0)
 D ^DIR I $D(DIRUT) Q ""
"RTN","IBCNBOE",250,0)
 Q Y
"RTN","IBCNBOF")
0^3^B33394771^B32265412
"RTN","IBCNBOF",1,0)
IBCNBOF ;ALB/ARH - Ins Buffer: Employee Report (Entered);1 Jun 97
"RTN","IBCNBOF",2,0)
 ;;2.0;INTEGRATED BILLING;**82,528,602**;21-MAR-94;Build 22
"RTN","IBCNBOF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBOF",4,0)
 ;
"RTN","IBCNBOF",5,0)
EN ;get parameters then run the report
"RTN","IBCNBOF",6,0)
 ;
"RTN","IBCNBOF",7,0)
 K ^TMP($J) D HOME^%ZIS S IBHDR="INSURANCE BUFFER EMPLOYEE REPORT" W @IOF,!!,?25,IBHDR
"RTN","IBCNBOF",8,0)
 W !!,"This report produces a count of the number of entries added to the Buffer",!,"file for a specified date range sorted by employee.  Also included are",!,"sub-totals and percentages based on the current status of those entries."
"RTN","IBCNBOF",9,0)
 ;
"RTN","IBCNBOF",10,0)
 S IBEMPL=+$$EMPL^IBCNBOE G:IBEMPL="" EXIT  W !!
"RTN","IBCNBOF",11,0)
 I +IBEMPL S IBEMPL=$$SELEMPL^IBCNBOE("Enters/Creates") G:IBEMPL="" EXIT  W !!
"RTN","IBCNBOF",12,0)
 ;
"RTN","IBCNBOF",13,0)
 S IBBEG=$$DATES^IBCNBOE("Beginning") G:'IBBEG EXIT
"RTN","IBCNBOF",14,0)
 S IBEND=$$DATES^IBCNBOE("Ending",IBBEG) G:'IBEND EXIT  W !!
"RTN","IBCNBOF",15,0)
 ;
"RTN","IBCNBOF",16,0)
 S IBMONTH=$$MONTH^IBCNBOE G:IBMONTH="" EXIT  W !!
"RTN","IBCNBOF",17,0)
 ;
"RTN","IBCNBOF",18,0)
 S IBOUT=$$OUT^IBCNBOE G:IBOUT="" EXIT
"RTN","IBCNBOF",19,0)
 ;
"RTN","IBCNBOF",20,0)
DEV ;get the device
"RTN","IBCNBOF",21,0)
 I IBOUT="R" W !,"Report requires 132 columns."
"RTN","IBCNBOF",22,0)
 S %ZIS="QM",%ZIS("A")="OUTPUT DEVICE: " D ^%ZIS G:POP EXIT
"RTN","IBCNBOF",23,0)
 I $D(IO("Q")) S ZTRTN="RPT^IBCNBOF",ZTDESC=IBHDR,ZTSAVE("IB*")="" D ^%ZTLOAD K IO("Q") G EXIT
"RTN","IBCNBOF",24,0)
 U IO
"RTN","IBCNBOF",25,0)
 ;
"RTN","IBCNBOF",26,0)
RPT ; run report
"RTN","IBCNBOF",27,0)
 S IBQUIT=0
"RTN","IBCNBOF",28,0)
 ;
"RTN","IBCNBOF",29,0)
 D SEARCH(IBBEG,IBEND,IBMONTH,IBEMPL) G:IBQUIT EXIT
"RTN","IBCNBOF",30,0)
 D PRINT(IBBEG,IBEND,IBMONTH,IBEMPL,IBOUT)
"RTN","IBCNBOF",31,0)
 ;
"RTN","IBCNBOF",32,0)
EXIT K ^TMP($J),IBHDR,IBBEG,IBEND,IBMONTH,IBOUT,IBQUIT,IBEMPL
"RTN","IBCNBOF",33,0)
 Q:$D(ZTQUEUED)
"RTN","IBCNBOF",34,0)
 D ^%ZISC
"RTN","IBCNBOF",35,0)
 Q
"RTN","IBCNBOF",36,0)
 ;
"RTN","IBCNBOF",37,0)
SEARCH(IBBEG,IBEND,IBMONTH,IBEMPL) ; search/sort statistics for employee report
"RTN","IBCNBOF",38,0)
 N IBXDT,IBBUFDA,IBB0,IBXREF,IBS1,IBEMP
"RTN","IBCNBOF",39,0)
 S IBBEG=$G(IBBEG)-.01,IBEND=$S('$G(IBEND):9999999,1:$P(IBEND,".")+.9)
"RTN","IBCNBOF",40,0)
 ;
"RTN","IBCNBOF",41,0)
 S IBXDT=IBBEG F  S IBXDT=$O(^IBA(355.33,"B",IBXDT)) Q:'IBXDT!(IBXDT>IBEND)  D  S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOF",42,0)
 . S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"B",IBXDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBOF",43,0)
 .. ;
"RTN","IBCNBOF",44,0)
 .. S IBB0=$G(^IBA(355.33,IBBUFDA,0)),IBEMP=+$P(IBB0,U,2) I 'IBEMP Q
"RTN","IBCNBOF",45,0)
 .. I +IBEMPL,IBEMPL'=IBEMP Q
"RTN","IBCNBOF",46,0)
 .. ;
"RTN","IBCNBOF",47,0)
 .. I $G(IBMONTH) D SET("IBCNBOF",IBEMP,$E(+IBB0,1,5),$P(IBB0,U,4),+$P(IBB0,U,7),+$P(IBB0,U,8),+$P(IBB0,U,9))
"RTN","IBCNBOF",48,0)
 .. D SET("IBCNBOF",IBEMP,99999,$P(IBB0,U,4),+$P(IBB0,U,7),+$P(IBB0,U,8),+$P(IBB0,U,9))
"RTN","IBCNBOF",49,0)
 .. D SET("IBCNBOF","~",99999,$P(IBB0,U,4),+$P(IBB0,U,7),+$P(IBB0,U,8),+$P(IBB0,U,9))
"RTN","IBCNBOF",50,0)
 ;
"RTN","IBCNBOF",51,0)
 Q
"RTN","IBCNBOF",52,0)
 ;
"RTN","IBCNBOF",53,0)
SET(XREF,S1,S2,STAT,NC,NG,NP) ;
"RTN","IBCNBOF",54,0)
 S ^TMP($J,XREF,S1,S2,"CNT")=$G(^TMP($J,XREF,S1,S2,"CNT"))+1
"RTN","IBCNBOF",55,0)
 I STAT="E" S ^TMP($J,XREF,S1,S2,"EN")=$G(^TMP($J,XREF,S1,S2,"EN"))+1
"RTN","IBCNBOF",56,0)
 I STAT="R" S ^TMP($J,XREF,S1,S2,"RJ")=$G(^TMP($J,XREF,S1,S2,"RJ"))+1
"RTN","IBCNBOF",57,0)
 I STAT="A" S ^TMP($J,XREF,S1,S2,"AC")=$G(^TMP($J,XREF,S1,S2,"AC"))+1
"RTN","IBCNBOF",58,0)
 I +NC S ^TMP($J,XREF,S1,S2,"NC")=$G(^TMP($J,XREF,S1,S2,"NC"))+1
"RTN","IBCNBOF",59,0)
 I +NG S ^TMP($J,XREF,S1,S2,"NG")=$G(^TMP($J,XREF,S1,S2,"NG"))+1
"RTN","IBCNBOF",60,0)
 I +NP S ^TMP($J,XREF,S1,S2,"NP")=$G(^TMP($J,XREF,S1,S2,"NP"))+1
"RTN","IBCNBOF",61,0)
 Q
"RTN","IBCNBOF",62,0)
 ;
"RTN","IBCNBOF",63,0)
 ;
"RTN","IBCNBOF",64,0)
PRINT(IBBEG,IBEND,IBMONTH,IBEMPL,IBOUT) ;
"RTN","IBCNBOF",65,0)
 N IBXREF,IBS1,IBS2,IBRDT,IBPGN,IBRANGE,IBLN,IBI
"RTN","IBCNBOF",66,0)
 ;
"RTN","IBCNBOF",67,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNBOF",68,0)
 S IBRANGE=$$FMTE^XLFDT(IBBEG)_" - "_$$FMTE^XLFDT(IBEND)
"RTN","IBCNBOF",69,0)
 S IBRDT=$$FMTE^XLFDT($J($$NOW^XLFDT,0,4),2),IBRDT=$TR(IBRDT,"@"," "),(IBLN,IBPGN)=0
"RTN","IBCNBOF",70,0)
 ;
"RTN","IBCNBOF",71,0)
 D HDR:IBOUT="R",PHDL:IBOUT="E"
"RTN","IBCNBOF",72,0)
 ;
"RTN","IBCNBOF",73,0)
 S IBXREF="IBCNBOF",IBS1="" F  S IBS1=$O(^TMP($J,IBXREF,IBS1)) Q:IBS1=""  D  Q:IBQUIT
"RTN","IBCNBOF",74,0)
 . I +$G(IBMONTH),(IBOUT="R") W ! S IBLN=IBLN+1
"RTN","IBCNBOF",75,0)
 . ;
"RTN","IBCNBOF",76,0)
 . S IBS2=0 F  S IBS2=$O(^TMP($J,IBXREF,IBS1,IBS2)) Q:IBS2=""  D:IBLN>(IOSL-3)&(IBOUT="R") HDR Q:IBQUIT  D
"RTN","IBCNBOF",77,0)
 .. D PRTLN  S IBLN=IBLN+1
"RTN","IBCNBOF",78,0)
 ;
"RTN","IBCNBOF",79,0)
 I 'IBQUIT S IBI=$$PAUSE
"RTN","IBCNBOF",80,0)
 Q
"RTN","IBCNBOF",81,0)
 ;
"RTN","IBCNBOF",82,0)
PRTLN ;
"RTN","IBCNBOF",83,0)
 N IBEMP,IBCNT,IBEN,IBAC,IBRJ,IBNC,IBNG,IBNP,DATM
"RTN","IBCNBOF",84,0)
 ;
"RTN","IBCNBOF",85,0)
 S IBEMP=$P($G(^VA(200,+IBS1,0)),U,1) I IBS1="~" S IBEMP="TOTAL"
"RTN","IBCNBOF",86,0)
 S IBCNT=$G(^TMP($J,IBXREF,IBS1,IBS2,"CNT")) Q:'IBCNT
"RTN","IBCNBOF",87,0)
 S IBEN=$G(^TMP($J,IBXREF,IBS1,IBS2,"EN"))
"RTN","IBCNBOF",88,0)
 S IBAC=$G(^TMP($J,IBXREF,IBS1,IBS2,"AC"))
"RTN","IBCNBOF",89,0)
 S IBRJ=$G(^TMP($J,IBXREF,IBS1,IBS2,"RJ"))
"RTN","IBCNBOF",90,0)
 S IBNC=$G(^TMP($J,IBXREF,IBS1,IBS2,"NC"))
"RTN","IBCNBOF",91,0)
 S IBNG=$G(^TMP($J,IBXREF,IBS1,IBS2,"NG"))
"RTN","IBCNBOF",92,0)
 S IBNP=$G(^TMP($J,IBXREF,IBS1,IBS2,"NP"))
"RTN","IBCNBOF",93,0)
 S DATM=$S(IBS2=99999:"TOTAL",1:$$FMTE^XLFDT(IBS2_"00"))
"RTN","IBCNBOF",94,0)
 ;
"RTN","IBCNBOF",95,0)
 ; Excel output
"RTN","IBCNBOF",96,0)
 I IBOUT="E" D  Q
"RTN","IBCNBOF",97,0)
 .W !,IBEMP_U_DATM_U_$FN(IBCNT,",")_U_$FN(IBEN,",")_U_$FN(((IBEN/IBCNT)*100),",",1)_"%"_U_$FN(IBAC,",")_U_$FN(((IBAC/IBCNT)*100),",",1)_"%"
"RTN","IBCNBOF",98,0)
 .W U_$FN(IBRJ,",")_U_$FN(((IBRJ/IBCNT)*100),",",1)_"%"_U_$FN(IBNC,",")_U_$FN(IBNG,",")_U_$FN(IBNP,",")
"RTN","IBCNBOF",99,0)
 ;
"RTN","IBCNBOF",100,0)
 ; Report output
"RTN","IBCNBOF",101,0)
 W !,$E(IBEMP,1,15),?17,DATM,?25,$J($FN(IBCNT,","),7)
"RTN","IBCNBOF",102,0)
 W ?35,$J($FN(IBEN,","),7),?43,$J("("_$FN(((IBEN/IBCNT)*100),",",1)_"%)",8)
"RTN","IBCNBOF",103,0)
 W ?54,$J($FN(IBAC,","),7),?62,$J("("_$FN(((IBAC/IBCNT)*100),",",1)_"%)",8)
"RTN","IBCNBOF",104,0)
 W ?73,$J($FN(IBRJ,","),7),?81,$J("("_$FN(((IBRJ/IBCNT)*100),",",1)_"%)",8)
"RTN","IBCNBOF",105,0)
 W ?92,$J($FN(IBNC,","),7),?102,$J($FN(IBNG,","),7),?112,$J($FN(IBNP,","),7)
"RTN","IBCNBOF",106,0)
 Q
"RTN","IBCNBOF",107,0)
 ;
"RTN","IBCNBOF",108,0)
HDR ;print the report header
"RTN","IBCNBOF",109,0)
 S IBQUIT=$$STOP Q:IBQUIT
"RTN","IBCNBOF",110,0)
 I IBPGN>0 S IBQUIT=$$PAUSE Q:IBQUIT
"RTN","IBCNBOF",111,0)
 S IBPGN=IBPGN+1,IBLN=5 I IBPGN>1!($E(IOST,1,2)["C-") W @IOF
"RTN","IBCNBOF",112,0)
 W !,"INSURANCE BUFFER (ENTERING) EMPLOYEE REPORT   ",IBRANGE," "
"RTN","IBCNBOF",113,0)
 W ?(IOM-22),IBRDT,?(IOM-7)," PAGE ",IBPGN,!,?39,"NOT YET",?93,"NEW",?104,"NEW",?113,"NEW"
"RTN","IBCNBOF",114,0)
 W !,"EMPLOYEE",?17,"MONTH",?27,"TOTAL",?39,"PROCESSED",?58,"ACCEPTED",?77,"REJECTED",?93,"INS CO",?104,"GROUP",?113,"POLICY",!
"RTN","IBCNBOF",115,0)
 S IBI="",$P(IBI,"-",IOM+1)="" W IBI
"RTN","IBCNBOF",116,0)
 Q
"RTN","IBCNBOF",117,0)
 ;
"RTN","IBCNBOF",118,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNBOF",119,0)
 N X
"RTN","IBCNBOF",120,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets 
"RTN","IBCNBOF",121,0)
 W !,"INSURANCE BUFFER (ENTERING) EMPLOYEE REPORT^"_IBRANGE_"^"_$$FMTE^XLFDT($$NOW^XLFDT,1),!
"RTN","IBCNBOF",122,0)
 ; IB*602/HN end  
"RTN","IBCNBOF",123,0)
 S X="EMPLOYEE^MONTH^TOTAL^NOT YET PROCESSED^% NOT YET PROCESSED^ACCEPTED^% ACCEPTED^REJECTED^% REJECTED^NEW INS CO^NEW GROUP^NEW POLICY"
"RTN","IBCNBOF",124,0)
 W X
"RTN","IBCNBOF",125,0)
 K X
"RTN","IBCNBOF",126,0)
 Q
"RTN","IBCNBOF",127,0)
 ;
"RTN","IBCNBOF",128,0)
PAUSE() ;pause at end of screen if beeing displayed on a terminal
"RTN","IBCNBOF",129,0)
 N IBX,DIR,DIRUT,DUOUT,X,Y S IBX=0
"RTN","IBCNBOF",130,0)
 I $E(IOST,1,2)["C-" W !! S DIR(0)="E" D ^DIR K DIR I $D(DUOUT)!($D(DIRUT)) S IBX=1
"RTN","IBCNBOF",131,0)
 Q IBX
"RTN","IBCNBOF",132,0)
 ;
"RTN","IBCNBOF",133,0)
STOP() ;determine if user has requested the queued report to stop
"RTN","IBCNBOF",134,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S ZTSTOP=1 K ZTREQ I +$G(IBPGN) W !,"***TASK STOPPED BY USER***"
"RTN","IBCNBOF",135,0)
 Q +$G(ZTSTOP)
"RTN","IBCNEDE4")
0^19^B61826620^B60089694
"RTN","IBCNEDE4",1,0)
IBCNEDE4 ;AITC/DM - EICD (Electronic Insurance Coverage Discovery) extract;24-JUN-2002
"RTN","IBCNEDE4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,621,602**;21-MAR-94;Build 22
"RTN","IBCNEDE4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE4",4,0)
 ;
"RTN","IBCNEDE4",5,0)
 ; **Program Description**
"RTN","IBCNEDE4",6,0)
 ; The Electronic Insurance Coverage Discovery a.k.a EICD extract (#4)
"RTN","IBCNEDE4",7,0)
 ; is called from the nightly job - IBCNEDE.
"RTN","IBCNEDE4",8,0)
 ;
"RTN","IBCNEDE4",9,0)
 ; Formerly known as "No Insurance", we are reworking the entire logic for 
"RTN","IBCNEDE4",10,0)
 ; determining insurance for those who don't have active policies with patch IB*2.0*621.
"RTN","IBCNEDE4",11,0)
 ;
"RTN","IBCNEDE4",12,0)
 Q
"RTN","IBCNEDE4",13,0)
 ;
"RTN","IBCNEDE4",14,0)
EN ; EICD extract entry 
"RTN","IBCNEDE4",15,0)
 N CLNC,DATA1,DATA2,DATA5,DFN,EACTIVE,ELG,FRESHDT,IBACTV,IBAPPTDT
"RTN","IBCNEDE4",16,0)
 N IBBEGDT,IBCSIEN,IBDFNDONE,IBEFF,IBEICDPAY,IBENDDT,IBERR,IBEXP,IBFDA
"RTN","IBCNEDE4",17,0)
 N IBFREQ,IBIDX,IBINSNM,IBMSG,IBSDA,IBTASKTOT,IBTOPIEN,IBTQCNT,IBTQIEN
"RTN","IBCNEDE4",18,0)
 N IBTQSTAT,IBWK1,IBWK2,IBWKIEN,MAXCNT,OK
"RTN","IBCNEDE4",19,0)
 ;
"RTN","IBCNEDE4",20,0)
 ;  Get Extract parameters
"RTN","IBCNEDE4",21,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(4)
"RTN","IBCNEDE4",22,0)
 I 'EACTIVE G ENQQ ; not active, or required fields missing
"RTN","IBCNEDE4",23,0)
 S MAXCNT=$P(EACTIVE,U,4) ; throttle daily extract queries
"RTN","IBCNEDE4",24,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE4",25,0)
 S IBWK1=$P(EACTIVE,U,6) ; start days
"RTN","IBCNEDE4",26,0)
 S IBBEGDT=$$FMADD^XLFDT(DT,IBWK1) ; begin date = today + start days
"RTN","IBCNEDE4",27,0)
 S IBENDDT=$$FMADD^XLFDT(DT,IBWK1+$P(EACTIVE,U,7)) ; end date = today + start days + days after start
"RTN","IBCNEDE4",28,0)
 S IBFREQ=$P(EACTIVE,U,8) ; frequency
"RTN","IBCNEDE4",29,0)
 S FRESHDT=$$FMADD^XLFDT(DT,-IBFREQ)
"RTN","IBCNEDE4",30,0)
 S IBCSIEN=$$FIND1^DIC(355.12,,"X","CONTRACT SERVICES","C")
"RTN","IBCNEDE4",31,0)
 S IBTQSTAT=$$FIND1^DIC(365.14,,"X","Ready to Transmit","B")
"RTN","IBCNEDE4",32,0)
 ;
"RTN","IBCNEDE4",33,0)
 ; see if the EICD PAYER site parameter has been populated
"RTN","IBCNEDE4",34,0)
 ; and is nationally and locally active, if not, quietly quit 
"RTN","IBCNEDE4",35,0)
 S IBEICDPAY=+$$GET1^DIQ(350.9,"1,",51.31,"I") ; "EICD PAYER"
"RTN","IBCNEDE4",36,0)
 I 'IBEICDPAY G ENQQ
"RTN","IBCNEDE4",37,0)
 I '($$GET1^DIQ(365.121,"1,"_IBEICDPAY_",",.02,"I")) G ENQQ ; "NATIONAL ACTIVE"
"RTN","IBCNEDE4",38,0)
 I '($$GET1^DIQ(365.121,"1,"_IBEICDPAY_",",.03,"I")) G ENQQ ; "LOCAL ACTIVE"
"RTN","IBCNEDE4",39,0)
 ;
"RTN","IBCNEDE4",40,0)
 ; gather the non-active insurance company names
"RTN","IBCNEDE4",41,0)
 ; we will strip all blanks from the names, so dashes ('-') are treated properly for a compare 
"RTN","IBCNEDE4",42,0)
 F IBIDX=2:1 S IBWK1=$P($T(NAINSCO+IBIDX),";;",2) Q:IBWK1=""  S IBINSNM($TR(IBWK1," ",""))=""
"RTN","IBCNEDE4",43,0)
 ;
"RTN","IBCNEDE4",44,0)
 ; gather the non-active type of plan iens
"RTN","IBCNEDE4",45,0)
 F IBIDX=2:1 S IBWK1=$P($T(NATPLANS+IBIDX),";;",2) Q:IBWK1=""  D
"RTN","IBCNEDE4",46,0)
 . S IBWK2=+$$FIND1^DIC(355.1,,"BQX",IBWK1)
"RTN","IBCNEDE4",47,0)
 . Q:'IBWK2
"RTN","IBCNEDE4",48,0)
 . S IBTOPIEN(IBWK2)=""
"RTN","IBCNEDE4",49,0)
 ;
"RTN","IBCNEDE4",50,0)
 S IBTASKTOT=0 ; Taskman check
"RTN","IBCNEDE4",51,0)
 S IBTQCNT=0 ; TQ entry count 
"RTN","IBCNEDE4",52,0)
 K ^TMP($J,"SDAMA301"),^TMP($J,"IBCNEDE4"),IBDFNDONE
"RTN","IBCNEDE4",53,0)
 ;
"RTN","IBCNEDE4",54,0)
 ; Loop through clinics 
"RTN","IBCNEDE4",55,0)
 S CLNC=0 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC  D
"RTN","IBCNEDE4",56,0)
 . D CLINICEX^IBCNEDE2 Q:'OK  ; clinic excluded
"RTN","IBCNEDE4",57,0)
 . S ^TMP($J,"IBCNEDE4",CLNC)=""
"RTN","IBCNEDE4",58,0)
 ;
"RTN","IBCNEDE4",59,0)
 ; Set up variables for scheduling api and call
"RTN","IBCNEDE4",60,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE4",61,0)
 S IBSDA(1)=IBBEGDT_";"_IBENDDT
"RTN","IBCNEDE4",62,0)
 S IBSDA(2)="^TMP($J,""IBCNEDE4"","
"RTN","IBCNEDE4",63,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE4",64,0)
 S OK=$$SDAPI^SDAMA301(.IBSDA) I OK<1 D:OK<0 ERRMSG G ENQQ
"RTN","IBCNEDE4",65,0)
 ;
"RTN","IBCNEDE4",66,0)
 ; loop through returned clinics
"RTN","IBCNEDE4",67,0)
 S CLNC=0
"RTN","IBCNEDE4",68,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  G ENQQ:$G(ZTSTOP)!(IBTQCNT'<MAXCNT)
"RTN","IBCNEDE4",69,0)
 . ;
"RTN","IBCNEDE4",70,0)
 . ; Loop through patients returned
"RTN","IBCNEDE4",71,0)
 . S DFN=0
"RTN","IBCNEDE4",72,0)
 . F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN  D  Q:$G(ZTSTOP)!(IBTQCNT'<MAXCNT)
"RTN","IBCNEDE4",73,0)
 .. ;
"RTN","IBCNEDE4",74,0)
 .. ; CHECK DFN STUFF
"RTN","IBCNEDE4",75,0)
 .. Q:$D(IBDFNDONE(DFN))  ; DFN has been handled
"RTN","IBCNEDE4",76,0)
 .. ;
"RTN","IBCNEDE4",77,0)
 .. S OK=1
"RTN","IBCNEDE4",78,0)
 .. S IBWK1=+$$GET1^DIQ(2,DFN_",",.6,"I") ; "TEST PATIENT INDICATOR"
"RTN","IBCNEDE4",79,0)
 .. S:IBWK1 OK=0
"RTN","IBCNEDE4",80,0)
 .. ;
"RTN","IBCNEDE4",81,0)
 .. S IBWK1=+$$GET1^DIQ(2,DFN_",",2001,"I") ; "DATE LAST EICD RUN" from PATIENT INS node
"RTN","IBCNEDE4",82,0)
 .. I IBWK1,(IBWK1>FRESHDT) S OK=0
"RTN","IBCNEDE4",83,0)
 .. ; 
"RTN","IBCNEDE4",84,0)
 .. S IBWK1=+$$GET1^DIQ(2,DFN_",",.351,"I") ; "DATE OF DEATH" 
"RTN","IBCNEDE4",85,0)
 .. S:IBWK1 OK=0
"RTN","IBCNEDE4",86,0)
 .. ;
"RTN","IBCNEDE4",87,0)
 .. ; any value for CITY is valid, HL7 will replace a "" with "UNKNOWN" 
"RTN","IBCNEDE4",88,0)
 .. S IBWK1=$$GET1^DIQ(2,DFN_",",.115) ; "STATE"
"RTN","IBCNEDE4",89,0)
 .. S:IBWK1="" OK=0
"RTN","IBCNEDE4",90,0)
 .. S IBWK1=$$GET1^DIQ(2,DFN_",",.116) ; "ZIP CODE"
"RTN","IBCNEDE4",91,0)
 .. S:IBWK1="" OK=0
"RTN","IBCNEDE4",92,0)
 .. ;
"RTN","IBCNEDE4",93,0)
 .. I 'OK S IBDFNDONE(DFN)="" Q  ; patient requirements not met 
"RTN","IBCNEDE4",94,0)
 .. ;   
"RTN","IBCNEDE4",95,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE4",96,0)
 .. S IBAPPTDT=IBBEGDT
"RTN","IBCNEDE4",97,0)
 .. F  S IBAPPTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,IBAPPTDT)) Q:('IBAPPTDT)!((IBAPPTDT\1)>IBENDDT)  D  Q:$G(ZTSTOP)!(IBTQCNT'<MAXCNT)
"RTN","IBCNEDE4",98,0)
 ... ;
"RTN","IBCNEDE4",99,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE4",100,0)
 ... S IBTASKTOT=IBTASKTOT+1
"RTN","IBCNEDE4",101,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",102,0)
 ... I $D(ZTQUEUED),IBTASKTOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",103,0)
 ... ;
"RTN","IBCNEDE4",104,0)
 ... Q:$D(IBDFNDONE(DFN))  ; we've already seen this DFN
"RTN","IBCNEDE4",105,0)
 ... ;
"RTN","IBCNEDE4",106,0)
 ... S IBWK1=$G(^TMP($J,"SDAMA301",CLNC,DFN,IBAPPTDT))
"RTN","IBCNEDE4",107,0)
 ... S ELG=$P(IBWK1,U,8)
"RTN","IBCNEDE4",108,0)
 ... S:ELG="" ELG=$$GET1^DIQ(2,DFN_",",.361) ; "PRIMARY ELIGIBILITY CODE" 
"RTN","IBCNEDE4",109,0)
 ... D ELG^IBCNEDE2 Q:'OK  ; eligibility exclusion
"RTN","IBCNEDE4",110,0)
 ... ;
"RTN","IBCNEDE4",111,0)
 ... ; skip any patient with "active" insurance 
"RTN","IBCNEDE4",112,0)
 ... S IBACTV=0
"RTN","IBCNEDE4",113,0)
 ... S IBIDX=0 ; check policies for "active" insurance 
"RTN","IBCNEDE4",114,0)
 ... F  S IBIDX=$O(^DPT(DFN,.312,IBIDX)) Q:('IBIDX)!IBACTV  D
"RTN","IBCNEDE4",115,0)
 .... S IBWKIEN=IBIDX_","_DFN_","
"RTN","IBCNEDE4",116,0)
 .... S IBEFF=+$$GET1^DIQ(2.312,IBWKIEN,8,"I") ; effective date 
"RTN","IBCNEDE4",117,0)
 .... S IBEXP=+$$GET1^DIQ(2.312,IBWKIEN,3,"I") ; expiration date
"RTN","IBCNEDE4",118,0)
 .... I 'IBEFF Q  ; non-active
"RTN","IBCNEDE4",119,0)
 .... I IBEXP,(IBEXP<(IBAPPTDT\1)) Q  ; non-active
"RTN","IBCNEDE4",120,0)
 .... ; 
"RTN","IBCNEDE4",121,0)
 .... S IBWK1=$TR($$GET1^DIQ(2.312,IBWKIEN,.01,"E")," ","") ; insurance company name
"RTN","IBCNEDE4",122,0)
 .... ; IB*2.0*602/TAZ Screen out bad pointers to File 36
"RTN","IBCNEDE4",123,0)
 .... I IBWK1="" Q  ; bad pointer to INSURANCE COMPANY File (#36)
"RTN","IBCNEDE4",124,0)
 .... I $D(IBINSNM(IBWK1)) Q  ; matches non-active insurance
"RTN","IBCNEDE4",125,0)
 .... S IBWK1=$$GET1^DIQ(2.312,IBWKIEN,.18,"I")   ; group plan ien 
"RTN","IBCNEDE4",126,0)
 .... S IBWK2=$$GET1^DIQ(355.3,IBWK1_",",.09,"I") ; type of plan ien
"RTN","IBCNEDE4",127,0)
 .... ; no type of plan is considered active 
"RTN","IBCNEDE4",128,0)
 .... I IBWK2'="",$D(IBTOPIEN(IBWK2)) Q  ; matches non-active type of plan
"RTN","IBCNEDE4",129,0)
 .... ; 
"RTN","IBCNEDE4",130,0)
 .... ; 'IBEXP is considered active at this point 
"RTN","IBCNEDE4",131,0)
 .... S IBACTV=1 Q  ; active 
"RTN","IBCNEDE4",132,0)
 ... ;
"RTN","IBCNEDE4",133,0)
 ... I IBACTV Q  ; next clinic appt 
"RTN","IBCNEDE4",134,0)
 ... ; 
"RTN","IBCNEDE4",135,0)
 ... ; This DFN is considered non-active, we'll attempt a TQ entry
"RTN","IBCNEDE4",136,0)
 ... S IBDFNDONE(DFN)=""  ; ok to flag DFN as handled now 
"RTN","IBCNEDE4",137,0)
 ... ; there should be no TQ entry for this DFN, consider it a safety check 
"RTN","IBCNEDE4",138,0)
 ... I '$$ADDTQ^IBCNEUT5(DFN,IBEICDPAY,DT,IBFREQ,1) Q
"RTN","IBCNEDE4",139,0)
 ... ; SET prepare and file the TQ
"RTN","IBCNEDE4",140,0)
 ... ; DFN:Patient IEN
"RTN","IBCNEDE4",141,0)
 ... ; IBEICDPAY:EICD payer IEN
"RTN","IBCNEDE4",142,0)
 ... ; IBTQSTAT:TQ STATUS IEN - Ready to Transmit 
"RTN","IBCNEDE4",143,0)
 ... ; FRESHDT:Freshness date 
"RTN","IBCNEDE4",144,0)
 ... ; 4:EICD data extract (#4)
"RTN","IBCNEDE4",145,0)
 ... ; I:Identification 
"RTN","IBCNEDE4",146,0)
 ... ; DT:Todays date 
"RTN","IBCNEDE4",147,0)
 ... ; IBCSIEN:Source of Information IEN - Contract Services    
"RTN","IBCNEDE4",148,0)
 ... S DATA1=DFN_U_IBEICDPAY_U_IBTQSTAT_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE4",149,0)
 ... S DATA2=4_U_"I"_U_DT
"RTN","IBCNEDE4",150,0)
 ... S DATA5=IBCSIEN
"RTN","IBCNEDE4",151,0)
 ... S IBTQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,,,DATA5) ; Sets in TQ
"RTN","IBCNEDE4",152,0)
 ... I IBTQIEN="" K IBDFNDONE(DFN) Q   ; didn't file, unmark DFN 
"RTN","IBCNEDE4",153,0)
 ... S IBTQCNT=IBTQCNT+1               ; increment the TQ count
"RTN","IBCNEDE4",154,0)
 ... ; place a stub into EIV EICD TRACKING (#365.18)
"RTN","IBCNEDE4",155,0)
 ... K IBFDA,IBERR
"RTN","IBCNEDE4",156,0)
 ... ; EIV EICD TRACKING, .01:TRANSMISSION .02:DATE CREATED .03:PAYER .05:PATIENT
"RTN","IBCNEDE4",157,0)
 ... S IBFDA(365.18,"+1,",.01)=IBTQIEN,IBFDA(365.18,"+1,",.02)=DT
"RTN","IBCNEDE4",158,0)
 ... S IBFDA(365.18,"+1,",.03)=IBEICDPAY,IBFDA(365.18,"+1,",.05)=DFN
"RTN","IBCNEDE4",159,0)
 ... D UPDATE^DIE(,"IBFDA",,"IBERR")
"RTN","IBCNEDE4",160,0)
 ... I $G(IBERR("DIERR",1,"TEXT",1))'="" D  Q
"RTN","IBCNEDE4",161,0)
 .... S IBMSG=""
"RTN","IBCNEDE4",162,0)
 .... D MSG002^IBCNEMS1(.IBMSG,.IBERR,IBTQIEN)
"RTN","IBCNEDE4",163,0)
 .... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV Problem: Error writing EIV EICD TRACKING (#365.18)","IBMSG(")
"RTN","IBCNEDE4",164,0)
 ... Q  ; next clinic appt
"RTN","IBCNEDE4",165,0)
 ... ; 
"RTN","IBCNEDE4",166,0)
ENQQ ; clean and quit 
"RTN","IBCNEDE4",167,0)
 K ^TMP($J,"SDAMA301"),^TMP($J,"IBCNEDE2")
"RTN","IBCNEDE4",168,0)
 Q
"RTN","IBCNEDE4",169,0)
 ;
"RTN","IBCNEDE4",170,0)
ERRMSG ; Send a message indicating an extract error has occurred
"RTN","IBCNEDE4",171,0)
 S IBMSG=""
"RTN","IBCNEDE4",172,0)
 D MSG001^IBCNEMS1(.IBMSG,"EICD")
"RTN","IBCNEDE4",173,0)
 D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV Problem: EICD Extract","IBMSG(")
"RTN","IBCNEDE4",174,0)
 ;
"RTN","IBCNEDE4",175,0)
 Q
"RTN","IBCNEDE4",176,0)
 ;
"RTN","IBCNEDE4",177,0)
NAINSCO ; Non-active Insurance companies
"RTN","IBCNEDE4",178,0)
 ;
"RTN","IBCNEDE4",179,0)
 ;;MEDICARE (WNR)
"RTN","IBCNEDE4",180,0)
 ;;VACAA-WNR  
"RTN","IBCNEDE4",181,0)
 ;;CAMP LEJEUNE - WNR
"RTN","IBCNEDE4",182,0)
 ;;IVF - WNR
"RTN","IBCNEDE4",183,0)
 ;;VHA DIRECTIVE 1029 WNR
"RTN","IBCNEDE4",184,0)
 ;
"RTN","IBCNEDE4",185,0)
NATPLANS ; Non-active Type of Plans
"RTN","IBCNEDE4",186,0)
 ;
"RTN","IBCNEDE4",187,0)
 ;;ACCIDENT AND HEALTH INSURANCE
"RTN","IBCNEDE4",188,0)
 ;;AUTOMOBILE
"RTN","IBCNEDE4",189,0)
 ;;AVIATION TRIP INSURANCE
"RTN","IBCNEDE4",190,0)
 ;;CATASTROPHIC INSURANCE
"RTN","IBCNEDE4",191,0)
 ;;CHAMPVA
"RTN","IBCNEDE4",192,0)
 ;;COINSURANCE
"RTN","IBCNEDE4",193,0)
 ;;DENTAL INSURANCE
"RTN","IBCNEDE4",194,0)
 ;;DUAL COVERAGE
"RTN","IBCNEDE4",195,0)
 ;;INCOME PROTECTION (INDEMNITY)
"RTN","IBCNEDE4",196,0)
 ;;KEY-MAN HEALTH INSURANCE
"RTN","IBCNEDE4",197,0)
 ;;LABS, PROCEDURES, X-RAY, ETC. (ONLY)
"RTN","IBCNEDE4",198,0)
 ;;MEDI-CAL
"RTN","IBCNEDE4",199,0)
 ;;MEDICAID
"RTN","IBCNEDE4",200,0)
 ;;MEDICARE (M)
"RTN","IBCNEDE4",201,0)
 ;;MEDICARE/MEDICAID (MEDI-CAL)
"RTN","IBCNEDE4",202,0)
 ;;MENTAL HEALTH
"RTN","IBCNEDE4",203,0)
 ;;NO-FAULT INSURANCE
"RTN","IBCNEDE4",204,0)
 ;;PRESCRIPTION
"RTN","IBCNEDE4",205,0)
 ;;QUALIFIED IMPAIRMENT INSURANCE
"RTN","IBCNEDE4",206,0)
 ;;SPECIAL CLASS INSURANCE
"RTN","IBCNEDE4",207,0)
 ;;SPECIAL RISK INSURANCE
"RTN","IBCNEDE4",208,0)
 ;;SPECIFIED DISEASE INSURANCE
"RTN","IBCNEDE4",209,0)
 ;;Substance abuse only
"RTN","IBCNEDE4",210,0)
 ;;TORT FEASOR
"RTN","IBCNEDE4",211,0)
 ;;TRICARE
"RTN","IBCNEDE4",212,0)
 ;;TRICARE SUPPLEMENTAL
"RTN","IBCNEDE4",213,0)
 ;;VA SPECIAL CLASS
"RTN","IBCNEDE4",214,0)
 ;;VISION
"RTN","IBCNEDE4",215,0)
 ;;WORKERS' COMPENSATION INSURANCE
"RTN","IBCNEDE4",216,0)
 ;
"RTN","IBCNEDE4",217,0)
 Q
"RTN","IBCNEDE4",218,0)
 ;
"RTN","IBCNEHL3")
0^20^B172950682^B172154152
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,497,506,595,621,602**;21-MAR-94;Build 22
"RTN","IBCNEHL3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for eIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from eIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ;/Removed the following lines of code as part of IB*2.0*506 but wanted to
"RTN","IBCNEHL3",27,0)
 ;/leave this code available if it should be needed in the future.
"RTN","IBCNEHL3",28,0)
 ; Scenarios:
"RTN","IBCNEHL3",29,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",30,0)
 ; Original Transaction" - set TQ
"RTN","IBCNEHL3",31,0)
 ; Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",32,0)
 ;I ERACT="R"!(ERACT="P") D G ERRORX
"RTN","IBCNEHL3",33,0)
 ;. I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D Q ; first time payer asked us to resubmit
"RTN","IBCNEHL3",34,0)
 ;. . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",35,0)
 ;. . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",36,0)
 ;. . ;
"RTN","IBCNEHL3",37,0)
 ;. ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",38,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",39,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",40,0)
 ;. ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",41,0)
 ;. S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",42,0)
 ;
"RTN","IBCNEHL3",43,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",44,0)
 ; Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",45,0)
 ;I ERACT="W" D G ERRORX
"RTN","IBCNEHL3",46,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",47,0)
 ;. D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",48,0)
 ;
"RTN","IBCNEHL3",49,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",50,0)
 ; Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",51,0)
 ;I ERACT="X" D G ERRORX
"RTN","IBCNEHL3",52,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",53,0)
 ;. D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",54,0)
 ;
"RTN","IBCNEHL3",55,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",56,0)
 ; "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",57,0)
 ; - set TQ Status to "Response Received"
"RTN","IBCNEHL3",58,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",59,0)
 ;I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",60,0)
 ;I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D G ERRORX
"RTN","IBCNEHL3",61,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",62,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",63,0)
 ;
"RTN","IBCNEHL3",64,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",65,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",66,0)
 ;/End of removed code for IB*2.0*506
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNEHL3",69,0)
 ; For all Scenarios 1 thru 5, set TQ Status to "Response Received"
"RTN","IBCNEHL3",70,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",71,0)
 I ",R,P,W,X,N,Y,S,C,"[(","_ERACT_",") D  G ERRORX
"RTN","IBCNEHL3",72,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",73,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",74,0)
 ; /IB*2.0*506 End
"RTN","IBCNEHL3",75,0)
 ;
"RTN","IBCNEHL3",76,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",77,0)
 Q
"RTN","IBCNEHL3",78,0)
 ;
"RTN","IBCNEHL3",79,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",80,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",81,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",82,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",83,0)
 ; Input Variables
"RTN","IBCNEHL3",84,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",85,0)
 ;
"RTN","IBCNEHL3",86,0)
 ; Output Variables
"RTN","IBCNEHL3",87,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",88,0)
 ;
"RTN","IBCNEHL3",89,0)
 ; Init optional param
"RTN","IBCNEHL3",90,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",91,0)
 ;
"RTN","IBCNEHL3",92,0)
 ; Init vars
"RTN","IBCNEHL3",93,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",94,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",97,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",98,0)
 ;
"RTN","IBCNEHL3",99,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",100,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",103,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",104,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",105,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",106,0)
 ;
"RTN","IBCNEHL3",107,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",108,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",109,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",110,0)
 ;
"RTN","IBCNEHL3",111,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",112,0)
 ;
"RTN","IBCNEHL3",113,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",114,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",115,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",116,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",117,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",118,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",119,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",120,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",121,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",122,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",123,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",124,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",125,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",126,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",127,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",128,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",129,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",130,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",131,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",132,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",133,0)
 ;
"RTN","IBCNEHL3",134,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",135,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",136,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",137,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",138,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",139,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",140,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",141,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",142,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",143,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",144,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",145,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",146,0)
 ;
"RTN","IBCNEHL3",147,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",148,0)
 ;
"RTN","IBCNEHL3",149,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",150,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",151,0)
 ;
"RTN","IBCNEHL3",152,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",153,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",154,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",155,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",156,0)
 . D ^DIE
"RTN","IBCNEHL3",157,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",158,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",159,0)
 . D ^DIE
"RTN","IBCNEHL3",160,0)
 ;
"RTN","IBCNEHL3",161,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",162,0)
 Q
"RTN","IBCNEHL3",163,0)
 ;
"RTN","IBCNEHL3",164,0)
PCK ; Payer Check
"RTN","IBCNEHL3",165,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",166,0)
 ;
"RTN","IBCNEHL3",167,0)
 ; Input Variables
"RTN","IBCNEHL3",168,0)
 ; MSGID
"RTN","IBCNEHL3",169,0)
 ;
"RTN","IBCNEHL3",170,0)
 ; Output Variables
"RTN","IBCNEHL3",171,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",172,0)
 ;
"RTN","IBCNEHL3",173,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",174,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",175,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",176,0)
 ;
"RTN","IBCNEHL3",177,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",178,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",179,0)
 ;
"RTN","IBCNEHL3",180,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",181,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",182,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",183,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",184,0)
 . ;
"RTN","IBCNEHL3",185,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",186,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",187,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",188,0)
 . S IN1DATA=$S(EVENTYP=1:"",1:$$GIN1()) ; IB*2.0*621
"RTN","IBCNEHL3",189,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",190,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",191,0)
 . ;
"RTN","IBCNEHL3",192,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",193,0)
 . ;
"RTN","IBCNEHL3",194,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",195,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",196,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",197,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",198,0)
 ..;
"RTN","IBCNEHL3",199,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",200,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",201,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",202,0)
 . ; 
"RTN","IBCNEHL3",203,0)
 . ; If payer response received to ~NO PAYER, update eIV Response file
"RTN","IBCNEHL3",204,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",205,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",206,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",207,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",208,0)
 ;
"RTN","IBCNEHL3",209,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",210,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",211,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",212,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",213,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",214,0)
 . ;
"RTN","IBCNEHL3",215,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",216,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",217,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",218,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",219,0)
 . ;I MDTM="" S MDTM=$$NOW^XLFDT
"RTN","IBCNEHL3",220,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",221,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",222,0)
 ;
"RTN","IBCNEHL3",223,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",224,0)
 ; IB*2*595/DM correctly identify a payer when the payer name begins with numbers 
"RTN","IBCNEHL3",225,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,RIEN,0)),U,3)="" D
"RTN","IBCNEHL3",226,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03////^S X=PIEN" D ^DIE ;stuff internal value for payer
"RTN","IBCNEHL3",227,0)
 Q
"RTN","IBCNEHL3",228,0)
 ;
"RTN","IBCNEHL3",229,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",230,0)
 ;
"RTN","IBCNEHL3",231,0)
 ; Input Variables
"RTN","IBCNEHL3",232,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",233,0)
 ;
"RTN","IBCNEHL3",234,0)
 ; Output Variables
"RTN","IBCNEHL3",235,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",236,0)
 ;
"RTN","IBCNEHL3",237,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",238,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",239,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",240,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",241,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",242,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",243,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",244,0)
 K SYMBOL
"RTN","IBCNEHL3",245,0)
 Q
"RTN","IBCNEHL3",246,0)
 ;
"RTN","IBCNEHL3",247,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",248,0)
 ; Input Variables
"RTN","IBCNEHL3",249,0)
 ; BUFF
"RTN","IBCNEHL3",250,0)
 ;
"RTN","IBCNEHL3",251,0)
 ; Output Variables
"RTN","IBCNEHL3",252,0)
 ; SYMBOL
"RTN","IBCNEHL3",253,0)
 ;
"RTN","IBCNEHL3",254,0)
 N IDUZ,UP
"RTN","IBCNEHL3",255,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",256,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",257,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHL3",258,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",259,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",260,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",261,0)
 Q
"RTN","IBCNEHL3",262,0)
 ;
"RTN","IBCNEHL3",263,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",264,0)
 ;
"RTN","IBCNEHL3",265,0)
 ; Input Variables
"RTN","IBCNEHL3",266,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",267,0)
 ;
"RTN","IBCNEHL3",268,0)
 ; Output Variables
"RTN","IBCNEHL3",269,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",270,0)
 ;
"RTN","IBCNEHL3",271,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",272,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",273,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",274,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",275,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",276,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",277,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",278,0)
 Q
"RTN","IBCNEHL3",279,0)
 ;
"RTN","IBCNEHL3",280,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",281,0)
 ;
"RTN","IBCNEHL3",282,0)
 ; Input Variables
"RTN","IBCNEHL3",283,0)
 ; HCT
"RTN","IBCNEHL3",284,0)
 ;
"RTN","IBCNEHL3",285,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",286,0)
 ;
"RTN","IBCNEHL3",287,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",288,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",289,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",290,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",291,0)
 Q SEGMT
"RTN","IBCNEHL3",292,0)
 ;
"RTN","IBCNEHL3",293,0)
 ; =================================================================
"RTN","IBCNEHL3",294,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL3",295,0)
 ;
"RTN","IBCNEHL3",296,0)
 ; Input Variables
"RTN","IBCNEHL3",297,0)
 ; ERROR, TRACE
"RTN","IBCNEHL3",298,0)
 ;
"RTN","IBCNEHL3",299,0)
 ; Output Variables
"RTN","IBCNEHL3",300,0)
 ; ERFLG=1
"RTN","IBCNEHL3",301,0)
 ;
"RTN","IBCNEHL3",302,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL3",303,0)
 S VEN=0,MCT=9,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL3",304,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL3",305,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL3",306,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL3",307,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL3",308,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL3",309,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL3",310,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL3",311,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL3",312,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",313,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL3",314,0)
 .S MCT=MCT+1,MSG(MCT)="Error:"
"RTN","IBCNEHL3",315,0)
 .F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL3",316,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",317,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FILE"))'="" S MCT=MCT+1,MSG(MCT)="File: "_ERROR("DIERR",VEN,"PARAM","FILE")
"RTN","IBCNEHL3",318,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","IENS"))'="" S MCT=MCT+1,MSG(MCT)="IENS: "_ERROR("DIERR",VEN,"PARAM","IENS")
"RTN","IBCNEHL3",319,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FIELD"))'="" S MCT=MCT+1,MSG(MCT)="Field: "_ERROR("DIERR",VEN,"PARAM","FIELD")
"RTN","IBCNEHL3",320,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",321,0)
 .Q
"RTN","IBCNEHL3",322,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",323,0)
 Q
"RTN","IBCNEHL3",324,0)
 ;
"RTN","IBCNEHL3",325,0)
 ; =================================================================
"RTN","IBCNEHL3",326,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL3",327,0)
 ; encountered problem filing date
"RTN","IBCNEHL3",328,0)
 ;
"RTN","IBCNEHL3",329,0)
 ; Input Variables
"RTN","IBCNEHL3",330,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL3",331,0)
 ;
"RTN","IBCNEHL3",332,0)
 ; Output Variables
"RTN","IBCNEHL3",333,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL3",334,0)
 ;
"RTN","IBCNEHL3",335,0)
 N DFN,SYMBOL
"RTN","IBCNEHL3",336,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL3",337,0)
 ;
"RTN","IBCNEHL3",338,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL3",339,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL3",340,0)
 ;
"RTN","IBCNEHL3",341,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL3",342,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL3",343,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL3",344,0)
 ;
"RTN","IBCNEHL3",345,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL3",346,0)
 ; create buffer entry
"RTN","IBCNEHL3",347,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL3",348,0)
 ;
"RTN","IBCNEHL3",349,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL3",350,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL3",351,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL3",352,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL3",353,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL3",354,0)
 ;
"RTN","IBCNEHL3",355,0)
 ;Update buffer symbol
"RTN","IBCNEHL3",356,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL3",357,0)
 ;
"RTN","IBCNEHL3",358,0)
 Q
"RTN","IBCNEHL3",359,0)
 ;
"RTN","IBCNEHL3",360,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL3",361,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",362,0)
 ;
"RTN","IBCNEHL3",363,0)
 ; returns 1 if given policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",364,0)
 N RES
"RTN","IBCNEHL3",365,0)
 S RES=0
"RTN","IBCNEHL3",366,0)
 I $P(RDATA13,U,2)'=$P(IDATA7,U,2) G CHK1X  ; Subscriber ID doesn't match   ; IB*2.0*497 compare subscriber ID data at their new locations
"RTN","IBCNEHL3",367,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL3",368,0)
 I '$$NAMECMP^IBCNEHLU($P(RDATA13,U),$P(IDATA7,U)) G CHK1X  ; Insured's name doesn't match  ; IB*2.0*497 compare name of insured data at their new locations
"RTN","IBCNEHL3",369,0)
 S RES=1
"RTN","IBCNEHL3",370,0)
CHK1X ;
"RTN","IBCNEHL3",371,0)
 Q RES
"RTN","IBCNEHL3",372,0)
 ;
"RTN","IBCNEHL3",373,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL3",374,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",375,0)
 ;
"RTN","IBCNEHL3",376,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",377,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL3",378,0)
 S RES=0
"RTN","IBCNEHL3",379,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL3",380,0)
 S IENS=IEN2_","
"RTN","IBCNEHL3",381,0)
 S ID=$P(RDATA13,U,2)    ; IB*2.0*497 Subscriber ID needs to be retrieved from its new location
"RTN","IBCNEHL3",382,0)
 I ID'=$P(IDATA7,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match ; IB*2.0*497 compare subscriber ID at new locations
"RTN","IBCNEHL3",383,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL3",384,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL3",385,0)
 S NAME=$P(RDATA13,U),PNAME=$$GET1^DIQ(2,IENS,.01)   ; IB*2.0*497 get name of insured at its new location
"RTN","IBCNEHL3",386,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA7,U)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match ; IB*2*497
"RTN","IBCNEHL3",387,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNEHL3",388,0)
 S RES=1
"RTN","IBCNEHL3",389,0)
CHK2X ;
"RTN","IBCNEHL3",390,0)
 Q RES
"RTN","IBCNEHL3",391,0)
 ;
"RTN","IBCNEHL3",392,0)
UPDIREC(RIEN,IEN312) ; IB*2*595/DM update INSUR RECORD IEN in the response file (#365,.12) 
"RTN","IBCNEHL3",393,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL3",394,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL3",395,0)
 ;
"RTN","IBCNEHL3",396,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL3",397,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL3",398,0)
 ; IB*2*595/DM do not update TQ file. 
"RTN","IBCNEHL3",399,0)
 ; The proper INSUR RECORD IEN field is now located in the response file 
"RTN","IBCNEHL3",400,0)
 ;S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL3",401,0)
 ;S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL3",402,0)
 S DATA(365,RIEN_",",.12)=IEN312
"RTN","IBCNEHL3",403,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL3",404,0)
 Q
"RTN","IBCNEHL3",405,0)
 ;
"RTN","IBCNEHL3",406,0)
LCKERR ; send locking error message
"RTN","IBCNEHL3",407,0)
 N MSG,XMY
"RTN","IBCNEHL3",408,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from the EC"
"RTN","IBCNEHL3",409,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNEHL3",410,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNEHL3",411,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNEHL3",412,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNEHL3",413,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNEHL3",414,0)
 S MSG(7)=" "
"RTN","IBCNEHL3",415,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNEHL3",416,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",417,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",418,0)
 Q
"RTN","IBCNEHL3",419,0)
 ;
"RTN","IBCNEKIT")
0^11^B164496028^B147072833
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE eIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,549,595,621,602**;21-MAR-94;Build 22
"RTN","IBCNEKIT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the eIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; eIV Transmission Queue file (#365.1), the eIV Response file (#365) and
"RTN","IBCNEKIT",7,0)
 ; the EIV EICD TRACKING file (#365.18) IB*2.0*621/DM
"RTN","IBCNEKIT",8,0)
 ; User can pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",9,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",10,0)
 ; task after hours (8:00pm).
"RTN","IBCNEKIT",11,0)
 ;
"RTN","IBCNEKIT",12,0)
EN ;
"RTN","IBCNEKIT",13,0)
 NEW STOP,BEGDT,ENDDT,STATLIST,IBVER
"RTN","IBCNEKIT",14,0)
 S IBVER=1
"RTN","IBCNEKIT",15,0)
 D INIT I STOP G EXIT       ; initialize/calculate default dates
"RTN","IBCNEKIT",16,0)
 D DEFLT I STOP G EXIT      ; allow user to change default end date if test system ;IB*2.0*621
"RTN","IBCNEKIT",17,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",18,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",19,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",20,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",21,0)
EXIT ;
"RTN","IBCNEKIT",22,0)
 Q
"RTN","IBCNEKIT",23,0)
 ;
"RTN","IBCNEKIT",24,0)
EN1 ; Automated Monthly Purge *IB*2*595
"RTN","IBCNEKIT",25,0)
 NEW STOP,BEGDT,ENDDT,STATLIST,IBVER
"RTN","IBCNEKIT",26,0)
 S IBVER=2
"RTN","IBCNEKIT",27,0)
 D INIT I STOP G EXIT1       ; initialize/calculate default dates
"RTN","IBCNEKIT",28,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",29,0)
EXIT1 ;
"RTN","IBCNEKIT",30,0)
 Q
"RTN","IBCNEKIT",31,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",32,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",33,0)
 ;
"RTN","IBCNEKIT",34,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",35,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",36,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",37,0)
 ;
"RTN","IBCNEKIT",38,0)
 ; First loop through the eIV Transmission Queue file and delete all
"RTN","IBCNEKIT",39,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",40,0)
 ;
"RTN","IBCNEKIT",41,0)
 N CNT,DA,DATE,DIK,HLIEN,PFLAG,TQIEN,TQS   ;IB*2.0*549 added PFLAG
"RTN","IBCNEKIT",42,0)
 N IBWEXT,IBIORV
"RTN","IBCNEKIT",43,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",44,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",45,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",46,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",47,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)     ; trans queue status
"RTN","IBCNEKIT",48,0)
 . S IBWEXT=$P($G(^IBCN(365.1,TQIEN,0)),U,10) ; IB*2.0*621/DM WHICH EXTRACT
"RTN","IBCNEKIT",49,0)
 . S IBIORV=$P($G(^IBCN(365.1,TQIEN,0)),U,11) ; IB*2.0*621/DM QUERY FLAG
"RTN","IBCNEKIT",50,0)
 . I IBWEXT=4,IBIORV="V" Q                    ; skip EICD Verification entries as they 
"RTN","IBCNEKIT",51,0)
 . ;                                            will be addressed with EICD Identifications
"RTN","IBCNEKIT",52,0)
 . I '$F(STATLIST,","_TQS_",") Q              ; must be in the list
"RTN","IBCNEKIT",53,0)
 . I IBWEXT=4,IBIORV="I" D CHKTRK(TQIEN) Q    ; check EIV EICD TRACKING for purge
"RTN","IBCNEKIT",54,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",55,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",56,0)
 . ; IB*2.0*621/DM Preserve any TQ and response that has DO NOT PURGE set to 1 (YES)
"RTN","IBCNEKIT",57,0)
 . S PFLAG=0,HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",58,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",59,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) Q:'DA
"RTN","IBCNEKIT",60,0)
 .. I +$$GET1^DIQ(365,DA_",",.11,"I") S PFLAG=1 Q  ;"DO NOT PURGE"
"RTN","IBCNEKIT",61,0)
 .. D ^DIK
"RTN","IBCNEKIT",62,0)
 .. Q
"RTN","IBCNEKIT",63,0)
 . ;
"RTN","IBCNEKIT",64,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",65,0)
 . ; as long as there was no DO NOT PURGE responses IB*2.0*621/DM 
"RTN","IBCNEKIT",66,0)
 . I 'PFLAG S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK K DA,DIK
"RTN","IBCNEKIT",67,0)
 . Q
"RTN","IBCNEKIT",68,0)
 ;
"RTN","IBCNEKIT",69,0)
 ; Check for a stop request
"RTN","IBCNEKIT",70,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",71,0)
 ;
"RTN","IBCNEKIT",72,0)
 ; Now we must loop through the eIV Response file itself to purge any
"RTN","IBCNEKIT",73,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",74,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",75,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",76,0)
 ; check the status. For this loop, start from the very beginning of
"RTN","IBCNEKIT",77,0)
 ; the file.
"RTN","IBCNEKIT",78,0)
 ;
"RTN","IBCNEKIT",79,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",80,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",81,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",82,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",83,0)
 . ;
"RTN","IBCNEKIT",84,0)
 . ; IB*2.0*602/TAZ never drop a DO NOT PURGE response
"RTN","IBCNEKIT",85,0)
 . Q:+$$GET1^DIQ(365,DA_",",.11,"I")
"RTN","IBCNEKIT",86,0)
 . ; If there is a pointer to the transmission queue file,
"RTN","IBCNEKIT",87,0)
 . ; make sure the transmission queue record actually exists.
"RTN","IBCNEKIT",88,0)
 . ; If the TQ exists, quit this loop, if not, remove this response.
"RTN","IBCNEKIT",89,0)
 . ;
"RTN","IBCNEKIT",90,0)
 . S TQIEN=+$$GET1^DIQ(365,DA_",",.05,"I")
"RTN","IBCNEKIT",91,0)
 . D ^DIK
"RTN","IBCNEKIT",92,0)
 . Q
"RTN","IBCNEKIT",93,0)
 ;
"RTN","IBCNEKIT",94,0)
 K DA,DIK
"RTN","IBCNEKIT",95,0)
PURGEX ;
"RTN","IBCNEKIT",96,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",97,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",98,0)
 Q
"RTN","IBCNEKIT",99,0)
 ;
"RTN","IBCNEKIT",100,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",101,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",102,0)
 ;
"RTN","IBCNEKIT",103,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS,IBHL7,IBDNP
"RTN","IBCNEKIT",104,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",105,0)
 ;
"RTN","IBCNEKIT",106,0)
 S STOP=0
"RTN","IBCNEKIT",107,0)
 ;
"RTN","IBCNEKIT",108,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",109,0)
 ;   3=Response Received
"RTN","IBCNEKIT",110,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",111,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",112,0)
 S STATLIST=","_$$FIND1^DIC(365.14,,"B","Response Received")
"RTN","IBCNEKIT",113,0)
 S STATLIST=STATLIST_","_$$FIND1^DIC(365.14,,"B","Communication Failure")
"RTN","IBCNEKIT",114,0)
 S STATLIST=STATLIST_","_$$FIND1^DIC(365.14,,"B","Cancelled")_","
"RTN","IBCNEKIT",115,0)
 ;
"RTN","IBCNEKIT",116,0)
 ; Try to find a beginning date in the eIV Transmission Queue file
"RTN","IBCNEKIT",117,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",118,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",119,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",120,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKIT",121,0)
 . ;IB*2.0*602/DM make sure the default earliest date is not a DO NOT PURGE entry 
"RTN","IBCNEKIT",122,0)
 . ;check the HL7 messages multiple to see if DO NOT PURGE is set on any response
"RTN","IBCNEKIT",123,0)
 . S (IBDNP,IBHL7)=0
"RTN","IBCNEKIT",124,0)
 . F  S IBHL7=$O(^IBCN(365.1,TQIEN,2,IBHL7)) Q:'IBHL7!IBDNP  D
"RTN","IBCNEKIT",125,0)
 .. S RPIEN=$P($G(^IBCN(365.1,TQIEN,2,IBHL7,0)),U,3) Q:'RPIEN
"RTN","IBCNEKIT",126,0)
 .. I +$$GET1^DIQ(365,RPIEN_",","DO NOT PURGE","I") S IBDNP=1
"RTN","IBCNEKIT",127,0)
 .. Q
"RTN","IBCNEKIT",128,0)
 . ;
"RTN","IBCNEKIT",129,0)
 . I IBDNP,IBVER=2 Q 
"RTN","IBCNEKIT",130,0)
 . I IBDNP W !,"Please wait, checking for the earliest purge date ...",! Q
"RTN","IBCNEKIT",131,0)
 . ;
"RTN","IBCNEKIT",132,0)
 . S FOUND=1
"RTN","IBCNEKIT",133,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",134,0)
 . Q
"RTN","IBCNEKIT",135,0)
 ;
"RTN","IBCNEKIT",136,0)
 ; If not successful, try to find a beginning date in the eIV Response file.
"RTN","IBCNEKIT",137,0)
 I 'FOUND D
"RTN","IBCNEKIT",138,0)
 . S DATE=""
"RTN","IBCNEKIT",139,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",140,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",141,0)
 .. I '$F(STATLIST,","_RPS_",") Q
"RTN","IBCNEKIT",142,0)
 .. ;IB*2.0*602/DM do not choose a DO NOT PURGE response 
"RTN","IBCNEKIT",143,0)
 .. I +$$GET1^DIQ(365,RPIEN_",","DO NOT PURGE","I") Q
"RTN","IBCNEKIT",144,0)
 .. S FOUND=1
"RTN","IBCNEKIT",145,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",146,0)
 .. Q
"RTN","IBCNEKIT",147,0)
 . Q
"RTN","IBCNEKIT",148,0)
 ;
"RTN","IBCNEKIT",149,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",150,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",151,0)
 ;
"RTN","IBCNEKIT",152,0)
 ;I IBVER=1,'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX ; IB*2.0*621
"RTN","IBCNEKIT",153,0)
 I IBVER=1,'FOUND,'$$PROD^XUPROD(1)!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",154,0)
 . W !!?5,"Purging of eIV data is not possible at this time."
"RTN","IBCNEKIT",155,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",156,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",157,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",158,0)
 . Q
"RTN","IBCNEKIT",159,0)
 I IBVER=2,'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",160,0)
 .; Send a MailMan message with Eligible Purge counts ; IB*2.0*621 - Updated Message
"RTN","IBCNEKIT",161,0)
 .N MGRP,MSG,IBXMY
"RTN","IBCNEKIT",162,0)
 .S MSG(1)="Purge Electronic Insurance Verification (eIV) Data Files did not find records"
"RTN","IBCNEKIT",163,0)
 .S MSG(2)="for station "_+$$SITE^VASITE()_"."
"RTN","IBCNEKIT",164,0)
 .S MSG(3)=""
"RTN","IBCNEKIT",165,0)
 .S MSG(4)="The option runs automatically on a monthly basis and purges data from the"
"RTN","IBCNEKIT",166,0)
 .S MSG(5)="IIV RESPONSE file (#365), the IIV TRANSMISSION QUEUE file (#365.1), and the"
"RTN","IBCNEKIT",167,0)
 .S MSG(6)="EIV EICD TRACKING file (#365.18).  The data must be at least six months old"
"RTN","IBCNEKIT",168,0)
 .S MSG(7)="before it can be purged.  Only insurance transactions that have a transmission"
"RTN","IBCNEKIT",169,0)
 .S MSG(8)="status of ""Response Received"", ""Communication Failure"", or ""Cancelled"""
"RTN","IBCNEKIT",170,0)
 .S MSG(9)="may be purged."
"RTN","IBCNEKIT",171,0)
 .; Set to IB site parameter MAILGROUP - IBCNE EIV MESSAGE
"RTN","IBCNEKIT",172,0)
 .S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEKIT",173,0)
 .S IBXMY("VHAEINSURANCERR@domain.ext")=""
"RTN","IBCNEKIT",174,0)
 .D MSG^IBCNEUT5(MGRP,"eIV Purge No Data Found for Station "_+$$SITE^VASITE(),"MSG(",,.IBXMY)
"RTN","IBCNEKIT",175,0)
 .; Duplicate message to Outlook group
"RTN","IBCNEKIT",176,0)
 .; S MGRP="G.VHAEINSURANCERR@domain.ext"
"RTN","IBCNEKIT",177,0)
 .; D MSG^IBCNEUT5(MGRP,"eIV Data Background Purge","MSG(")
"RTN","IBCNEKIT",178,0)
 .Q
"RTN","IBCNEKIT",179,0)
 ;
"RTN","IBCNEKIT",180,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",181,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",182,0)
 I IBVER=2 G INITX
"RTN","IBCNEKIT",183,0)
 W @IOF
"RTN","IBCNEKIT",184,0)
 W !?8,"Purge Electronic Insurance Verification (eIV) Data Files"
"RTN","IBCNEKIT",185,0)
 W !!!," This option will allow you to purge data from the eIV Response File (#365)"
"RTN","IBCNEKIT",186,0)
 W !," and the eIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",187,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",188,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",189,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",190,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",191,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",192,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",193,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",194,0)
 W !!
"RTN","IBCNEKIT",195,0)
INITX ;
"RTN","IBCNEKIT",196,0)
 Q
"RTN","IBCNEKIT",197,0)
 ;
"RTN","IBCNEKIT",198,0)
DEFLT ;  IB*621/DW Added to assist with testing
"RTN","IBCNEKIT",199,0)
 I IBVER=1,('$$PROD^XUPROD(1)) D
"RTN","IBCNEKIT",200,0)
 . W ?5,"*** For Test Purposes Only:"
"RTN","IBCNEKIT",201,0)
 . W !!?5,"In test systems one may override the DEFAULT end date."
"RTN","IBCNEKIT",202,0)
 . W !!?5,"Current default end date is TODAY - 182 DAYS: "_$$FMTE^XLFDT(ENDDT,"5Z"),!!
"RTN","IBCNEKIT",203,0)
 . NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",204,0)
 . S DIR(0)="DOA^"_BEGDT_":"_DT_":AEX"
"RTN","IBCNEKIT",205,0)
 . S DIR("A")="Enter the purge default date: "
"RTN","IBCNEKIT",206,0)
 . S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",207,0)
 . S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(DT,"5Z")_"."
"RTN","IBCNEKIT",208,0)
 . D ^DIR K DIR
"RTN","IBCNEKIT",209,0)
 . I $D(DIRUT)!'Y S STOP=1 G DEFLTX
"RTN","IBCNEKIT",210,0)
 . S ENDDT=Y
"RTN","IBCNEKIT",211,0)
 W !!!
"RTN","IBCNEKIT",212,0)
DEFLTX ;
"RTN","IBCNEKIT",213,0)
 Q
"RTN","IBCNEKIT",214,0)
 ;
"RTN","IBCNEKIT",215,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",216,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",217,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",218,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",219,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",220,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",221,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",222,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",223,0)
 S BEGDT=Y
"RTN","IBCNEKIT",224,0)
BEGDTX ;
"RTN","IBCNEKIT",225,0)
 Q
"RTN","IBCNEKIT",226,0)
 ;
"RTN","IBCNEKIT",227,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",228,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",229,0)
 W !
"RTN","IBCNEKIT",230,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",231,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",232,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",233,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",234,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",235,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",236,0)
 S ENDDT=Y
"RTN","IBCNEKIT",237,0)
ENDDTX ;
"RTN","IBCNEKIT",238,0)
 Q
"RTN","IBCNEKIT",239,0)
 ;
"RTN","IBCNEKIT",240,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",241,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",242,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",243,0)
 W !!!," You want to purge all eIV data created between "
"RTN","IBCNEKIT",244,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",245,0)
 W !
"RTN","IBCNEKIT",246,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",247,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",248,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",249,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",250,0)
CONFX ;
"RTN","IBCNEKIT",251,0)
 Q
"RTN","IBCNEKIT",252,0)
 ;
"RTN","IBCNEKIT",253,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",254,0)
 ; The concept for queuing the purge came from the insurance buffer
"RTN","IBCNEKIT",255,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",256,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",257,0)
 ;
"RTN","IBCNEKIT",258,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",259,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",260,0)
 ;
"RTN","IBCNEKIT",261,0)
 ; IB*621/DW Added loop below to assist with testing
"RTN","IBCNEKIT",262,0)
 I IBVER=1,('$$PROD^XUPROD(1)) D  I Y D PURGE^IBCNEKIT G QUEUEX
"RTN","IBCNEKIT",263,0)
 . W !!!!,"*** TEST System only - you may run this immediately",!
"RTN","IBCNEKIT",264,0)
 . S DIR("A")="Do you want to run this now instead of tasking it for 8:00pm"
"RTN","IBCNEKIT",265,0)
 . S DIR(0)="Y",DIR("B")="YES"
"RTN","IBCNEKIT",266,0)
 . D ^DIR
"RTN","IBCNEKIT",267,0)
 . I Y="^" S STOP=1
"RTN","IBCNEKIT",268,0)
 ;
"RTN","IBCNEKIT",269,0)
 I STOP G QUEUEX              ; IB*2.0*621
"RTN","IBCNEKIT",270,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",271,0)
 S ZTDESC="Purge eIV Data"    ; Task description
"RTN","IBCNEKIT",272,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",273,0)
 S ZTIO=""
"RTN","IBCNEKIT",274,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",275,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",276,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",277,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",278,0)
 I IBVER=2 G QUEUEX
"RTN","IBCNEKIT",279,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the eIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",280,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",281,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",282,0)
QUEUEX ;
"RTN","IBCNEKIT",283,0)
 Q
"RTN","IBCNEKIT",284,0)
 ;
"RTN","IBCNEKIT",285,0)
CHKTRK(IBTQ1) ; IB*621, Evaluate associated records for one EICD transaction
"RTN","IBCNEKIT",286,0)
 ; IBTQ1 = EICD Identification TQ IEN
"RTN","IBCNEKIT",287,0)
 ;
"RTN","IBCNEKIT",288,0)
 N FILE,HLIEN,IBTQIEN1,IBTQIEN2,IBFIELDS,IBPURGE,IBSKIP,IBTQIEN,IBTQS
"RTN","IBCNEKIT",289,0)
 N IBTRKIEN,PFLAG
"RTN","IBCNEKIT",290,0)
 ;
"RTN","IBCNEKIT",291,0)
 S (IBSKIP,PFLAG)=0
"RTN","IBCNEKIT",292,0)
 K IBPURGE
"RTN","IBCNEKIT",293,0)
 S IBTQIEN1=+$$FIND1^DIC(365.18,,"QX",IBTQ1,"B")
"RTN","IBCNEKIT",294,0)
 Q:'IBTQIEN1  ; the passed TQ IEN is not in the tracking file
"RTN","IBCNEKIT",295,0)
 S IBPURGE("EICD",365.1,IBTQ1)=""               ;EICD TQ for identifications
"RTN","IBCNEKIT",296,0)
 S IBTQIEN=+$$GET1^DIQ(365.18,IBTQIEN1,.06,"I") ;EICD RESPONSE for identifications
"RTN","IBCNEKIT",297,0)
 I IBTQIEN S IBPURGE("EICD",365,IBTQIEN)=""
"RTN","IBCNEKIT",298,0)
 ; 
"RTN","IBCNEKIT",299,0)
 ; loop through the EICD verification entries looking for exclusions  
"RTN","IBCNEKIT",300,0)
 S IBTRKIEN=0 F  S IBTRKIEN=$O(^IBCN(365.18,IBTQIEN1,"INS-FND",IBTRKIEN)) Q:'IBTRKIEN  D  Q:IBSKIP
"RTN","IBCNEKIT",301,0)
 . ;
"RTN","IBCNEKIT",302,0)
 . ; check the 1 node data for associated TQs & their responses
"RTN","IBCNEKIT",303,0)
 . S IBTQIEN2=IBTRKIEN_","_IBTQIEN1_","
"RTN","IBCNEKIT",304,0)
 . K IBFIELDS D GETS^DIQ(365.185,IBTQIEN2,"1.01:1.04","I","IBFIELDS")
"RTN","IBCNEKIT",305,0)
 . ;
"RTN","IBCNEKIT",306,0)
 . I IBFIELDS(365.185,IBTQIEN2,1.02,"I")="" Q                ; No TQ was created
"RTN","IBCNEKIT",307,0)
 . I IBFIELDS(365.185,IBTQIEN2,1.02,"I")>ENDDT S IBSKIP=1 Q  ; TQ not old enough 
"RTN","IBCNEKIT",308,0)
 . S IBTQIEN=+IBFIELDS(365.185,IBTQIEN2,1.01,"I")            ; EICD VER INQ TQ
"RTN","IBCNEKIT",309,0)
 . S IBTQS=+$$GET1^DIQ(365.1,IBTQIEN_",",.04,"I")            ; TQ Transmission Status 
"RTN","IBCNEKIT",310,0)
 . I IBTQS,('$F(STATLIST,","_IBTQS_",")) S IBSKIP=1 Q        ; must be in the list
"RTN","IBCNEKIT",311,0)
 . ;
"RTN","IBCNEKIT",312,0)
 . ; Loop thru all EICD Verifications if any are DO NOT PURGE then kill
"RTN","IBCNEKIT",313,0)
 . ; nothing associated with it
"RTN","IBCNEKIT",314,0)
 . S HLIEN=0
"RTN","IBCNEKIT",315,0)
 . F  S HLIEN=$O(^IBCN(365.1,IBTQIEN,2,HLIEN)) Q:'HLIEN!PFLAG  D
"RTN","IBCNEKIT",316,0)
 .. S DA=$P($G(^IBCN(365.1,IBTQIEN,2,HLIEN,0)),U,3) Q:'DA
"RTN","IBCNEKIT",317,0)
 .. I +$$GET1^DIQ(365,DA_",",.11,"I") S PFLAG=1 Q  ;"DO NOT PURGE"
"RTN","IBCNEKIT",318,0)
 .. S IBPURGE("EICD",365,DA)=""  ; array of Verifications to purge (responses)
"RTN","IBCNEKIT",319,0)
 . I PFLAG Q
"RTN","IBCNEKIT",320,0)
 . S IBPURGE("EICD",365.1,IBTQIEN)="" ; array of Verifications to purge (inquiries)
"RTN","IBCNEKIT",321,0)
 ;
"RTN","IBCNEKIT",322,0)
 I PFLAG!IBSKIP K IBPURGE  ; DO NOT PURGE is set or Not all records are old enough
"RTN","IBCNEKIT",323,0)
 ;
"RTN","IBCNEKIT",324,0)
 I '$D(IBPURGE) Q  ; No records associated with this entry to purge
"RTN","IBCNEKIT",325,0)
 S IBPURGE("EICD",365.18,IBTQ1)=""
"RTN","IBCNEKIT",326,0)
 S FILE="" F  S FILE=$O(IBPURGE("EICD",FILE)) Q:'FILE  D
"RTN","IBCNEKIT",327,0)
 . S DIK="^IBCN("_FILE_","
"RTN","IBCNEKIT",328,0)
 . S DA="" F  S DA=$O(IBPURGE("EICD",FILE,DA)) Q:'DA  D
"RTN","IBCNEKIT",329,0)
 .. D ^DIK
"RTN","IBCNEKIT",330,0)
 K IBPURGE,DA,DIK
"RTN","IBCNEKIT",331,0)
 Q
"RTN","IBCNEKIT",332,0)
 ;
"RTN","IBCNERP3")
0^4^B102128247^B79824613
"RTN","IBCNERP3",1,0)
IBCNERP3 ;DAOU/BHS - IBCNE eIV RESPONSE REPORT PRINT ;03-JUN-2002
"RTN","IBCNERP3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,528,602**;21-MAR-94;Build 22
"RTN","IBCNERP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERP3",4,0)
 ;
"RTN","IBCNERP3",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERP3",6,0)
 ;
"RTN","IBCNERP3",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP3",8,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERP3",9,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERP3",10,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERP3",11,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERP3",12,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERP3",13,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERP3",14,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERP3",15,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERP3",16,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERP3",17,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP3",18,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous
"RTN","IBCNERP3",19,0)
 ;   Report (2).
"RTN","IBCNERP3",20,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP3",21,0)
 ;  IBOUT="R" for Report format or "E" for Excel format
"RTN","IBCNERP3",22,0)
 ;
"RTN","IBCNERP3",23,0)
 ;  Based on structure of eIV Response File (#365)
"RTN","IBCNERP3",24,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERP3",25,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERP3",26,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERP3",27,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERP3",28,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERP3",29,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERP3",30,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERP3",31,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERP3",32,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERP3",33,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERP3",34,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERP3",35,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERP3",36,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,5,CT)= based on # lines of comments reqd
"RTN","IBCNERP3",37,0)
 ;   CT=1 to display future retransmission date
"RTN","IBCNERP3",38,0)
 ; Must call at appropriate tag
"RTN","IBCNERP3",39,0)
 Q
"RTN","IBCNERP3",40,0)
 ;
"RTN","IBCNERP3",41,0)
PRINT(RTN,BDT,EDT,PYR,PAT,TYP,SRT,PGC,PXT,MAX,CRT,TRC,EXP,IPRF,IBRDT,IBOUT) ; Print data
"RTN","IBCNERP3",42,0)
 ; Input: RTN="IBCENRP1", BDT=start dt, EDT=end dt, PYR=pyr ien,
"RTN","IBCNERP3",43,0)
 ;  PAT= pat ien, TYP=A/M, SRT=1/2, PGC=page ct, PXT=exit flg,
"RTN","IBCNERP3",44,0)
 ; MAX=max line ct/pg, CRT=1/0, TRC=trc#, EXP=earliest expiration date,IBRDT=today's date/time formatted 
"RTN","IBCNERP3",45,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,CNFLG,ERFLG,PRT1,PRT2,DISPDATA
"RTN","IBCNERP3",46,0)
 N OPRT1,OPRT2 ; Original values for PRT1 and PRT2, respectively
"RTN","IBCNERP3",47,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP3",48,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP3",49,0)
 S (SORT1,SORT2)=""
"RTN","IBCNERP3",50,0)
 ;
"RTN","IBCNERP3",51,0)
 D PHDL:IBOUT="E" I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",52,0)
 ;
"RTN","IBCNERP3",53,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERP3",54,0)
 I '$D(^TMP($J,RTN)) W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERP3",55,0)
 ;
"RTN","IBCNERP3",56,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",57,0)
 . S (OPRT1,PRT1)=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP3",58,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",59,0)
 . . S (OPRT2,PRT2)=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP3",60,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",61,0)
 . . . I IBOUT="E" D XLDATA Q
"RTN","IBCNERP3",62,0)
 . . . D SSDB ; add SSN (from ^DPT) and DOB to patient header info
"RTN","IBCNERP3",63,0)
 . . . D HEADER
"RTN","IBCNERP3",64,0)
 . . . I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",65,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERP3",66,0)
 . . . D DATA^IBCNERPE(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERP3",67,0)
 ;
"RTN","IBCNERP3",68,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",69,0)
 S (CNFLG,ERFLG)=0
"RTN","IBCNERP3",70,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",71,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP3",72,0)
PRINTX ;
"RTN","IBCNERP3",73,0)
 Q
"RTN","IBCNERP3",74,0)
 ;
"RTN","IBCNERP3",75,0)
XLDATA ; Excel output  ; 528
"RTN","IBCNERP3",76,0)
 N PYRNM,PTNM,DFN,PTSSN,PTDOB,REFQ,REFID,RFIDSC,PROCD,REFID2,PRIDC,MLIST,EMPST,GOVAFL,DTMP,SRVRNK,MDESC,RPTDATA
"RTN","IBCNERP3",77,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERP3",78,0)
 S PYRNM=$P(RPTDATA(0),U,3),PYRNM=$$GET1^DIQ(365.12,PYRNM,.01)
"RTN","IBCNERP3",79,0)
 S DFN=$P(RPTDATA(0),U,2),PTNM=$$GET1^DIQ(2,DFN,.01)
"RTN","IBCNERP3",80,0)
 S PTSSN=$E($$GETSSN^IBCNEDE5(DFN),6,9),PTDOB=$$GETDOB^IBCNEDEQ(DFN)
"RTN","IBCNERP3",81,0)
 W !,$S(SRT=1:PYRNM,1:PTNM)_U_$S(SRT=1:PTNM,1:PYRNM)_U_PTSSN_U_PTDOB_U_$P(RPTDATA(13),U)_U_$P(RPTDATA(13),U,2)_U_$P(RPTDATA(1),U,2)_U_$P(RPTDATA(1),U,3)_U_$P(RPTDATA(1),U,4)_U_$P(RPTDATA(14),U)_U_$P(RPTDATA(14),U,2)_U_$P(RPTDATA(1),U,8)
"RTN","IBCNERP3",82,0)
 W U_RPTDATA(8)_U_$P(RPTDATA(1),U,18)_U_$P(RPTDATA(1),U,13)_U_$P(RPTDATA(1),U,10)_U_$P(RPTDATA(1),U,16)_U_$P(RPTDATA(1),U,11)_U_$P(RPTDATA(1),U,17)
"RTN","IBCNERP3",83,0)
 W U_$P(RPTDATA(1),U,12)_U_$P(RPTDATA(1),U,19)_U_$P(RPTDATA(0),U,7)_U_$P(RPTDATA(0),U,9)_U_$P(RPTDATA(1),U,20)_U
"RTN","IBCNERP3",84,0)
 D DATA^IBCNERPE(.DISPDATA)   ; Build Elig. Ben. global
"RTN","IBCNERP3",85,0)
 D GTDT
"RTN","IBCNERP3",86,0)
 W $G(REFQ)_U_$G(REFID)_U_$G(RFIDSC)_U_$G(PROCD)_U_$G(REFID2)_U_$G(PRIDC)_U_$G(MLIST)_U_$G(EMPST)_U_$G(GOVAFL)_U_$G(DTMP)_U_$G(SRVRNK)_U_$G(MDESC)
"RTN","IBCNERP3",87,0)
 Q
"RTN","IBCNERP3",88,0)
 ;
"RTN","IBCNERP3",89,0)
GTDT ; Get Eligibility/Group Plan Information
"RTN","IBCNERP3",90,0)
 ;^TMP("EIV RESP. EB DATA",$J,"DISP",1,0) 
"RTN","IBCNERP3",91,0)
 ;S SEL=$$TRIM^XLFSTR($E(Y(0),1,30),"R")
"RTN","IBCNERP3",92,0)
 N LN,OUT,DATA
"RTN","IBCNERP3",93,0)
 S (REFID,REFQ,RFIDSC,PROCD,REFID2,PRIDC,EMPST,MLIST,DTMP,GOVAFL,SRVRNK,MDESC)=""
"RTN","IBCNERP3",94,0)
 S LN=0
"RTN","IBCNERP3",95,0)
 F  S LN=$O(^TMP("EIV RESP. EB DATA",$J,"DISP",LN)) Q:LN=""  D
"RTN","IBCNERP3",96,0)
 . S OUT=$G(^TMP("EIV RESP. EB DATA",$J,"DISP",LN,0))
"RTN","IBCNERP3",97,0)
 . ;
"RTN","IBCNERP3",98,0)
 . I OUT["Reference ID Qualifier:" D
"RTN","IBCNERP3",99,0)
 . . S DATA=$P(OUT,"Reference ID Qualifier:",2)
"RTN","IBCNERP3",100,0)
 . . S REFID=$$TRIM^XLFSTR($P(DATA,"Reference ID:",2),"R")
"RTN","IBCNERP3",101,0)
 . . S REFQ=$$TRIM^XLFSTR($P(DATA,"Reference ID:",1),"R")
"RTN","IBCNERP3",102,0)
 . I OUT["Reference ID description:" D
"RTN","IBCNERP3",103,0)
 . . S DATA=$P(OUT,"Reference ID description:",2)
"RTN","IBCNERP3",104,0)
 . . S RFIDSC=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",105,0)
 . I OUT["Provider Code:" D
"RTN","IBCNERP3",106,0)
 . . S DATA=$P(OUT,"Provider Code:",2)
"RTN","IBCNERP3",107,0)
 . . S PROCD=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",108,0)
 . I OUT["Reference ID:" D
"RTN","IBCNERP3",109,0)
 . . S DATA=$P(OUT,"Reference ID:",2)
"RTN","IBCNERP3",110,0)
 . . S REFID2=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",111,0)
 . I OUT["Primary Diagnosis Code:" D
"RTN","IBCNERP3",112,0)
 . . S DATA=$P(OUT,"Primary Diagnosis Code:",2)
"RTN","IBCNERP3",113,0)
 . . S PRIDC=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",114,0)
 . I OUT["Military Info Status:" D
"RTN","IBCNERP3",115,0)
 . . S DATA=$P(OUT,"Military Info Status:",2)
"RTN","IBCNERP3",116,0)
 . . S EMPST=$$TRIM^XLFSTR($P(DATA,"Employment Status:",2),"R")
"RTN","IBCNERP3",117,0)
 . . S MLIST=$$TRIM^XLFSTR($P(DATA,"Employment Status:",1),"R")
"RTN","IBCNERP3",118,0)
 . I OUT["Government Affiliation:" D
"RTN","IBCNERP3",119,0)
 . . S DATA=$P(OUT,"Government Affiliation:",2)
"RTN","IBCNERP3",120,0)
 . . S DTMP=$$TRIM^XLFSTR($P(DATA,"Date Time Period:",2),"R")
"RTN","IBCNERP3",121,0)
 . . S GOVAFL=$$TRIM^XLFSTR($P(DATA,"Date Time Period:",1),"R")
"RTN","IBCNERP3",122,0)
 . I OUT["Service Rank:" D
"RTN","IBCNERP3",123,0)
 . . S DATA=$P(OUT,"Service Rank:",2)
"RTN","IBCNERP3",124,0)
 . . S SRVRNK=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",125,0)
 . I OUT["Desc:" D
"RTN","IBCNERP3",126,0)
 . . S DATA=$P(OUT,"Desc:",2)
"RTN","IBCNERP3",127,0)
 . . S MDESC=$$TRIM^XLFSTR(DATA,"R")
"RTN","IBCNERP3",128,0)
 Q
"RTN","IBCNERP3",129,0)
 ;
"RTN","IBCNERP3",130,0)
HEADER ; Print hdr info
"RTN","IBCNERP3",131,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERP3",132,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP3",133,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP3",134,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP3",135,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERP3",136,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP3",137,0)
 ;
"RTN","IBCNERP3",138,0)
 S PGC=PGC+1
"RTN","IBCNERP3",139,0)
 W @IOF,!,?1,$S($G(IPRF)=1:"eIV Inactive Policy Report",$G(IPRF)=2:"eIV Ambiguous Policy Report",1:"eIV Response Report") I TRC'="" W " by Trace #"
"RTN","IBCNERP3",140,0)
 ;
"RTN","IBCNERP3",141,0)
 S HDR=IBRDT_"  Page: "_PGC,OFFSET=79-$L(HDR)
"RTN","IBCNERP3",142,0)
 W ?OFFSET,HDR
"RTN","IBCNERP3",143,0)
 ;
"RTN","IBCNERP3",144,0)
 I TRC'="" S HDR="Trace #: "_TRC,OFFSET=80-$L(HDR)\2 W !,?OFFSET,HDR
"RTN","IBCNERP3",145,0)
 I TRC="" D
"RTN","IBCNERP3",146,0)
 . W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Patient")_" Name"
"RTN","IBCNERP3",147,0)
 . S HDR="Responses Displayed: "_$S(TYP="M":"Most Recent",1:"All")
"RTN","IBCNERP3",148,0)
 . S OFFSET=79-$L(HDR)
"RTN","IBCNERP3",149,0)
 . W ?OFFSET,HDR
"RTN","IBCNERP3",150,0)
 . I $G(IPRF)=1 W !,?1,"Earliest Policy Expiration Date: ",$$FMTE^XLFDT(EXP,"5Z"),!
"RTN","IBCNERP3",151,0)
 . S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP3",152,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",153,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",154,0)
 . ; Disp SORT1 rng
"RTN","IBCNERP3",155,0)
 . S HDR=""
"RTN","IBCNERP3",156,0)
 . I SRT=1,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",157,0)
 . I SRT=2,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",158,0)
 . I HDR="" D
"RTN","IBCNERP3",159,0)
 ..  I SRT=1 S HDR=$P($G(^IBE(365.12,PYR,0)),U,1) Q
"RTN","IBCNERP3",160,0)
 ..  S HDR=$P($G(^DPT(PAT,0)),U,1)
"RTN","IBCNERP3",161,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",162,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",163,0)
 . ; Disp SORT2 rng
"RTN","IBCNERP3",164,0)
 . S HDR=""
"RTN","IBCNERP3",165,0)
 . I SRT=1,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",166,0)
 . I SRT=2,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",167,0)
 . I HDR="" D
"RTN","IBCNERP3",168,0)
 .. I SRT=1 S HDR=$P($G(^DPT(PAT,0)),U,1) Q
"RTN","IBCNERP3",169,0)
 .. S HDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP3",170,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",171,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",172,0)
 W !
"RTN","IBCNERP3",173,0)
 ; Build disp
"RTN","IBCNERP3",174,0)
 I SORT1'="",SORT2'="" D
"RTN","IBCNERP3",175,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"  Payer: ",1:"Patient: "),9)_$E(PRT1,1,69)
"RTN","IBCNERP3",176,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"Patient: ",1:"  Payer: "),9)_$E(PRT2,1,69)
"RTN","IBCNERP3",177,0)
 . W !
"RTN","IBCNERP3",178,0)
HEADERX ;
"RTN","IBCNERP3",179,0)
 Q
"RTN","IBCNERP3",180,0)
 ;
"RTN","IBCNERP3",181,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERP3",182,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERP3",183,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP3",184,0)
 S (CNFLG,ERFLG,NWPG)=0
"RTN","IBCNERP3",185,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP3",186,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",187,0)
 . I DISPDATA(LNCT)="Contact Information:"!(DISPDATA(LNCT)="Error Information:"),$Y+3>MAX S (CNFLG,ERFLG)=0 D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",188,0)
 . I CNFLG,DISPDATA(LNCT)="",$G(DISPDATA(LNCT+1))="Error Information:" S CNFLG=0
"RTN","IBCNERP3",189,0)
 . I NWPG,CNFLG W !,?1,"Contact Information: (cont'd)",!
"RTN","IBCNERP3",190,0)
 . I NWPG,ERFLG W !,?1,"Error Information: (cont'd)",!
"RTN","IBCNERP3",191,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERP3",192,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP3",193,0)
 . I DISPDATA(LNCT)["Contact Information:" S ERFLG=0,CNFLG=1
"RTN","IBCNERP3",194,0)
 . I DISPDATA(LNCT)["Error Information:" S CNFLG=0,ERFLG=1
"RTN","IBCNERP3",195,0)
 . Q
"RTN","IBCNERP3",196,0)
 S (CNFLG,ERFLG)=0
"RTN","IBCNERP3",197,0)
LINEX ; 
"RTN","IBCNERP3",198,0)
 Q
"RTN","IBCNERP3",199,0)
 ;
"RTN","IBCNERP3",200,0)
SSDB ; Display last 4 digits of SSN and DOB to facilitate pt. identification
"RTN","IBCNERP3",201,0)
 ; $$SSN^IBCNEDEQ(DFN) returns SSN followed by DOB
"RTN","IBCNERP3",202,0)
 ;
"RTN","IBCNERP3",203,0)
 N DFN
"RTN","IBCNERP3",204,0)
 S DFN=$P($G(^TMP($J,RTN,SORT1,SORT2,CNT,0)),U,2)
"RTN","IBCNERP3",205,0)
 I DFN D
"RTN","IBCNERP3",206,0)
 . I SRT=1!TRC S PRT2=OPRT2_$$SSN^IBCNEDEQ(DFN) Q
"RTN","IBCNERP3",207,0)
 . S PRT1=OPRT1_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNERP3",208,0)
 Q
"RTN","IBCNERP3",209,0)
 ;
"RTN","IBCNERP3",210,0)
PHDL ; - Print the header line for the Excel spreadsheet  ; 528
"RTN","IBCNERP3",211,0)
 N X
"RTN","IBCNERP3",212,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets
"RTN","IBCNERP3",213,0)
 S EHDR=$S($G(IPRF)=1:"eIV Inactive Policy Report",$G(IPRF)=2:"eIV Ambiguous Policy Report",1:"eIV Response Report") I TRC'="" S EHDR=EHDR_"^by Trace #"
"RTN","IBCNERP3",214,0)
 W !,EHDR_"^"_$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCNERP3",215,0)
 ;
"RTN","IBCNERP3",216,0)
 I TRC'="" S HDR="Trace #: "_TRC W !,HDR
"RTN","IBCNERP3",217,0)
 I TRC="" D
"RTN","IBCNERP3",218,0)
 . S EHDR="Sorted by: "_$S(SRT=1:"Payer",1:"Patient")_" Name"
"RTN","IBCNERP3",219,0)
 . S EHDR=EHDR_"^Responses Displayed: "_$S(TYP="M":"Most Recent",1:"All")
"RTN","IBCNERP3",220,0)
 . W !,EHDR S EHDR=""
"RTN","IBCNERP3",221,0)
 . I $G(IPRF)=1 W !,"Earliest Policy Expiration Date: ",$$FMTE^XLFDT(EXP,"5Z")
"RTN","IBCNERP3",222,0)
 . S EHDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP3",223,0)
 . W !,EHDR
"RTN","IBCNERP3",224,0)
 . ; Disp SORT1 rng
"RTN","IBCNERP3",225,0)
 . S EHDR=""
"RTN","IBCNERP3",226,0)
 . I SRT=1,PYR="" S EHDR="All Payers"
"RTN","IBCNERP3",227,0)
 . I SRT=2,PAT="" S EHDR="All Patients"
"RTN","IBCNERP3",228,0)
 . I EHDR="" D
"RTN","IBCNERP3",229,0)
 .. I SRT=1 S EHDR=$P($G(^IBE(365.12,PYR,0)),U,1) Q
"RTN","IBCNERP3",230,0)
 .. S EHDR=$P($G(^DPT(PAT,0)),U,1)
"RTN","IBCNERP3",231,0)
 . W !,EHDR
"RTN","IBCNERP3",232,0)
 . ; Disp SORT2 rng
"RTN","IBCNERP3",233,0)
 . S EHDR=""
"RTN","IBCNERP3",234,0)
 . I SRT=1,PAT="" S EHDR="All Patients"
"RTN","IBCNERP3",235,0)
 . I SRT=2,PYR="" S EHDR="All Payers"
"RTN","IBCNERP3",236,0)
 . I EHDR="" D
"RTN","IBCNERP3",237,0)
 .. I SRT=1 S EHDR=$P($G(^DPT(PAT,0)),U,1) Q
"RTN","IBCNERP3",238,0)
 .. S EHDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP3",239,0)
  . W !,EHDR
"RTN","IBCNERP3",240,0)
 W !
"RTN","IBCNERP3",241,0)
 ; Build disp
"RTN","IBCNERP3",242,0)
 I SORT1'="",SORT2'="" D
"RTN","IBCNERP3",243,0)
 . W !,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):" Payer: ",1:"Patient: "),9)_$E(PRT1,1,69)
"RTN","IBCNERP3",244,0)
 . W !,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"Patient: ",1:" Payer: "),9)_$E(PRT2,1,69)
"RTN","IBCNERP3",245,0)
 . W !
"RTN","IBCNERP3",246,0)
 K EHDR
"RTN","IBCNERP3",247,0)
 ; IB*602/HN end
"RTN","IBCNERP3",248,0)
 S PGC=1
"RTN","IBCNERP3",249,0)
 S X=$S(SRT=1:"Payer",1:"Patient")_U_$S(SRT=1:"Patient",1:"Payer")_"^Patient SSN^Patient DOB^Subscriber^Subscriber ID^Subscriber DOB^Subscriber SSN^Subscriber Sex^Group Name^Group ID"
"RTN","IBCNERP3",250,0)
 S X=X_"^Whose Insurance^Pt Relationship to Subscriber^Member ID^COB^Service Date^Date of Death^Effective Date^Certification Date^Expiration Date^Payer Updated Policy"
"RTN","IBCNERP3",251,0)
 S X=X_"^Response Date^Trace #^Policy Number^Reference ID Qualifier^Reference ID^Reference ID Description^Provider Code^Reference ID^Primary Diagnosis Code^Military Info Status"
"RTN","IBCNERP3",252,0)
 W X
"RTN","IBCNERP3",253,0)
 S X="^Employment Status^Government Affiliation^Date Time Period^Service Rank^Desc"
"RTN","IBCNERP3",254,0)
 W X
"RTN","IBCNERP3",255,0)
 Q
"RTN","IBCNERPD")
0^5^B126523871^B110303722
"RTN","IBCNERPD",1,0)
IBCNERPD ;DAOU/RO - eIV PAYER LINK REPORT PRINT;AUG-2003
"RTN","IBCNERPD",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,416,521,528,595,602**;21-MAR-94;Build 22
"RTN","IBCNERPD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPD",4,0)
 ;
"RTN","IBCNERPD",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERPD",6,0)
 ;
"RTN","IBCNERPD",7,0)
 ; Called by IBCNERPB
"RTN","IBCNERPD",8,0)
 ; Input from IBCNERPB/C:
"RTN","IBCNERPD",9,0)
 ;  
"RTN","IBCNERPD",10,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0)
"RTN","IBCNERPD",11,0)
 ;    IBCNERTN="IBCNERPB", 
"RTN","IBCNERPD",12,0)
 ;    CT=Seq ct
"RTN","IBCNERPD",13,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) 
"RTN","IBCNERPD",14,0)
 ;  IBOUT
"RTN","IBCNERPD",15,0)
 ;
"RTN","IBCNERPD",16,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  
"RTN","IBCNERPD",17,0)
 N IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPD",18,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IBMAT,IBREP,IBDET,IBPPYR,ZZ
"RTN","IBCNERPD",19,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPD",20,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPD",21,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPD",22,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPD",23,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPD",24,0)
 ; Ins Report
"RTN","IBCNERPD",25,0)
 I IBREP=2 D
"RTN","IBCNERPD",26,0)
 . S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPD",27,0)
 . S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPD",28,0)
 . S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPD",29,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPD",30,0)
 ; Determine IO params
"RTN","IBCNERPD",31,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNERPD",32,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPD",33,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPD",34,0)
 D PRINT(IBCNERTN,IBREP,IBDET,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBOUT)
"RTN","IBCNERPD",35,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPD",36,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPD",37,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPD",38,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",39,0)
EXIT3 ; Exit pt
"RTN","IBCNERPD",40,0)
 Q
"RTN","IBCNERPD",41,0)
 ;
"RTN","IBCNERPD",42,0)
PRINT(RTN,REP,DET,TYP,SRT,PGC,PXT,MAX,CRT,IBOUT) ; Print data
"RTN","IBCNERPD",43,0)
 ; Input: RTN="IBCENRPB", PGC=page ct,
"RTN","IBCNERPD",44,0)
 ;   PXT=exit flg, MAX=max line ct/pg,
"RTN","IBCNERPD",45,0)
 ;  CRT=1/0, IBOUT="R"/"E"
"RTN","IBCNERPD",46,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,DASH
"RTN","IBCNERPD",47,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPD",48,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPD",49,0)
 S (SORT1,SORT2)="",$P(DASH,"-",133)=""
"RTN","IBCNERPD",50,0)
 ;
"RTN","IBCNERPD",51,0)
 ;Excel header
"RTN","IBCNERPD",52,0)
 I IBOUT="E" D PHDL
"RTN","IBCNERPD",53,0)
 ;
"RTN","IBCNERPD",54,0)
 I '$D(^TMP($J,RTN)) D HEADER:(IBOUT="R") W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERPD",55,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",56,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",57,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",58,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERPD",59,0)
 . . . D DATA(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERPD",60,0)
 ;
"RTN","IBCNERPD",61,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",62,0)
 I IBOUT="R" D
"RTN","IBCNERPD",63,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",64,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERPD",65,0)
PRINTX ;
"RTN","IBCNERPD",66,0)
 Q
"RTN","IBCNERPD",67,0)
 ;
"RTN","IBCNERPD",68,0)
HEADER ; Print hdr info
"RTN","IBCNERPD",69,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERPD",70,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERPD",71,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERPD",72,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",73,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERPD",74,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERPD",75,0)
 S PGC=PGC+1
"RTN","IBCNERPD",76,0)
 W @IOF,!,?1,"eIV Payer Link Report"
"RTN","IBCNERPD",77,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=131-$L(HDR)
"RTN","IBCNERPD",78,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",79,0)
 W !,?1,"Report Option: "_$S(REP=1:"Payer List",1:"Insurance Company List")
"RTN","IBCNERPD",80,0)
 I REP=1 D
"RTN","IBCNERPD",81,0)
 . S HDR=$S(TYP=1:"Unlinked Payers Only",TYP=2:"Linked Payers Only",1:"All Payers")
"RTN","IBCNERPD",82,0)
 . I TYP=3 S HDR=HDR_", "_$S(DET=1:"With Ins. Co. Detail",1:"Without Ins. Co. Detail")
"RTN","IBCNERPD",83,0)
 I REP=2 D
"RTN","IBCNERPD",84,0)
 . S HDR=$S(TYP=1:"Unlinked Insurance Companies Only",TYP=2:"Linked Insurance Companies Only",1:"All Insurance Companies")
"RTN","IBCNERPD",85,0)
 S OFFSET=79-$L(HDR)
"RTN","IBCNERPD",86,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",87,0)
 ; IB*2.0*521 add validated HPID to report
"RTN","IBCNERPD",88,0)
 I REP=2 W !,"'*' indicates the Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",89,0)
 I REP=1,DET=1 W !,"'*' indicates the Linked Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",90,0)
 W !
"RTN","IBCNERPD",91,0)
 I REP=1 D
"RTN","IBCNERPD",92,0)
 . I IBPPYR'="" W ?1,"For Single Payer: ",$P(IBPPYR,"^",2)
"RTN","IBCNERPD",93,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",94,0)
 . ;W !?39,"National",?54,"# Linked",?64,"Nationally",?77,"Locally",?87,"Prof.",?104,"Inst." W:DET=1 ?121,"HPID/"
"RTN","IBCNERPD",95,0)
 . ;W !,"Payer Name:",?39,"Payer ID",?54,"Ins. Co.",?65,"Active?",?77,"Active?",?87,"EDI#",?104,"EDI#" W:DET=1 ?121,"OEID"
"RTN","IBCNERPD",96,0)
 . W !?31,"National",?46,"# Linked",?56,"Nationally",?69,"Locally",?78,"FSC",?87,"Prof.",?104,"Inst." W:DET=1 ?121,"HPID/"
"RTN","IBCNERPD",97,0)
 . W !,"Payer Name:",?31,"Payer ID",?46,"Ins. Co.",?57,"Active?",?69,"Active?",?78,"Trusted?",?87,"EDI#",?104,"EDI#" W:DET=1 ?121,"OEID"
"RTN","IBCNERPD",98,0)
 I REP=2 D
"RTN","IBCNERPD",99,0)
 . I IBMAT'="" W ?1,"Only Insurance Companies that match: ",IBMAT
"RTN","IBCNERPD",100,0)
 . ; IB*2.0*528 add Trusted flag and Number of Active Groups to report
"RTN","IBCNERPD",101,0)
 . ;W !?56,"Nat.",?71,"Loc.",?83,"Prof.",?104,"Inst.",?121,"HPID/"
"RTN","IBCNERPD",102,0)
 . ;W !,"Insurance Company:",?56,"Act?",?71,"Act?",?83,"EDI#",?104,"EDI#",?121,"OEID"
"RTN","IBCNERPD",103,0)
 . W !?32,"# Active",?56,"Nat.",?66,"Loc.",?73,"FSC",?83,"Prof.",?104,"Inst.",?121,"HPID/"
"RTN","IBCNERPD",104,0)
 . W !,"Insurance Company:",?33,"Groups",?56,"Act?",?66,"Act?",?73,"Trusted?",?83,"EDI#",?104,"EDI#",?121,"OEID"
"RTN","IBCNERPD",105,0)
 . I TYP'=1 W !,"   Payer:",?44,"VA ID"
"RTN","IBCNERPD",106,0)
 W !,DASH
"RTN","IBCNERPD",107,0)
HEADERX ;
"RTN","IBCNERPD",108,0)
 Q
"RTN","IBCNERPD",109,0)
 ;
"RTN","IBCNERPD",110,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERPD",111,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERPD",112,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERPD",113,0)
 S NWPG=0
"RTN","IBCNERPD",114,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERPD",115,0)
 . I IBOUT="R" D
"RTN","IBCNERPD",116,0)
 . . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERPD",117,0)
 . W ! W:IBOUT="R" ?1 W DISPDATA(LNCT) Q
"RTN","IBCNERPD",118,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERPD",119,0)
 . I NWPG S NWPG=0
"RTN","IBCNERPD",120,0)
 . Q
"RTN","IBCNERPD",121,0)
LINEX Q
"RTN","IBCNERPD",122,0)
 ;
"RTN","IBCNERPD",123,0)
DATA(DISPDATA) ;  Build disp lines
"RTN","IBCNERPD",124,0)
 N LCT,CT,CT2,RPTDATA,WW,XX,YY,ZZ,IBHPD
"RTN","IBCNERPD",125,0)
 ; Merge into local array
"RTN","IBCNERPD",126,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPD",127,0)
 ; Build
"RTN","IBCNERPD",128,0)
 ;
"RTN","IBCNERPD",129,0)
 ; PAYER REPORT
"RTN","IBCNERPD",130,0)
 I REP=1 D
"RTN","IBCNERPD",131,0)
 . ; Excel format
"RTN","IBCNERPD",132,0)
 . I IBOUT="E" D  Q
"RTN","IBCNERPD",133,0)
 . . ; IB*2*595/DM for Excel, properly display the locally active status  
"RTN","IBCNERPD",134,0)
 . . S LCT=0,DISPDATA(1)=SORT2_U_$P(RPTDATA,U)_U_$P(RPTDATA,U,6)_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,5)=1:"YES",1:"NO")_U_$P(RPTDATA,U,7)_U_$P(RPTDATA,U,2)_U_$P(RPTDATA,U,3)
"RTN","IBCNERPD",135,0)
 . . I DET=1 S WW=DISPDATA(1) D DET
"RTN","IBCNERPD",136,0)
 . ;
"RTN","IBCNERPD",137,0)
 . ; 1st line is payer
"RTN","IBCNERPD",138,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",139,0)
 . ;S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,35,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"        "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),12,"L")
"RTN","IBCNERPD",140,0)
 . ;S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),8,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),16,"L")_" "_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")
"RTN","IBCNERPD",141,0)
 . S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,27,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"        "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),12,"L")
"RTN","IBCNERPD",142,0)
 . S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),9,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,7),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),16,"L")_" "_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")
"RTN","IBCNERPD",143,0)
 . ; See if detail is required
"RTN","IBCNERPD",144,0)
 . I DET=1 D
"RTN","IBCNERPD",145,0)
 . . I $O(RPTDATA(""))'="" S LCT=LCT+1,DISPDATA(LCT)="   Linked Insurance Companies:"
"RTN","IBCNERPD",146,0)
 . . S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",147,0)
 . . . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",148,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)="   "_$$FO^IBCNEUT1(XX,35,"L")_"  "_$$FO^IBCNEUT1($P(ZZ,U,1),20,"L")_" "_$E($P(ZZ,U,4),1,15)
"RTN","IBCNERPD",149,0)
 . . . ; don't display ','s if no address/state on file
"RTN","IBCNERPD",150,0)
 . . . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",151,0)
 . . . ; IB*2.0*521 add validated HPID to report
"RTN","IBCNERPD",152,0)
 . . . S IBHPD=$$HPD^IBCNHUT1(YY,1)
"RTN","IBCNERPD",153,0)
 . . . ;S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",93-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",154,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",86-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",155,0)
 . . . ; display EDI#'s
"RTN","IBCNERPD",156,0)
 . . . ;S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,8),16,"L")
"RTN","IBCNERPD",157,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),16,"L")_" "_$$FO^IBCNEUT1($P(ZZ,U,8),16,"L")_" "_IBHPD
"RTN","IBCNERPD",158,0)
 ;
"RTN","IBCNERPD",159,0)
 ; Insurance Company Report
"RTN","IBCNERPD",160,0)
 I REP=2 D
"RTN","IBCNERPD",161,0)
 . ; Excel format
"RTN","IBCNERPD",162,0)
 . I IBOUT="E" D  Q
"RTN","IBCNERPD",163,0)
 . . ;S LCT=1,DISPDATA(1)=SORT2_U_$P(RPTDATA,U,1)_U_$P(RPTDATA,U,6)_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$P(RPTDATA,U,7)_U_$P(RPTDATA,U,2)_U_$P(RPTDATA,U,3)
"RTN","IBCNERPD",164,0)
 . . S LCT=1,DISPDATA(1)=SORT2_U_$P(RPTDATA,U,10)_U_$P(RPTDATA,U,13)
"RTN","IBCNERPD",165,0)
 . . I $P(RPTDATA,U,14)'="" S DISPDATA(1)=DISPDATA(1)_", "_$P($G(^DIC(5,$P(RPTDATA,U,14)+0,0)),U,2)_" "_$P(RPTDATA,U,15)
"RTN","IBCNERPD",166,0)
 . . S IBHPD=$$HPD^IBCNHUT1(CNT,1),ZZ=$P(RPTDATA,"~",2)
"RTN","IBCNERPD",167,0)
 . . S DISPDATA(1)=DISPDATA(1)_U_$P(RPTDATA,U,8)_U_$P(ZZ,U,2)_U_$P(ZZ,U,4)_U_IBHPD_U
"RTN","IBCNERPD",168,0)
 . . I $P(RPTDATA,U)="" S:TYP'=1 DISPDATA(1)=DISPDATA(1)_"** NOT CURRENTLY LINKED **" Q
"RTN","IBCNERPD",169,0)
 . . S DISPDATA(1)=DISPDATA(1)_$P(RPTDATA,U,1,2)_U_$S($P(RPTDATA,U,5)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,6)=1:"YES",1:"NO")_U_$P(RPTDATA,U,9)_U_$P(RPTDATA,U,3,4)
"RTN","IBCNERPD",170,0)
 . ;
"RTN","IBCNERPD",171,0)
 . ; Ins carrier
"RTN","IBCNERPD",172,0)
 . ; IB*2.0*528 add number of active groups to report
"RTN","IBCNERPD",173,0)
 . S DISPDATA(1)=$$FO^IBCNEUT1(SORT2,30,"L")_"  "_$$FO^IBCNEUT1($P(RPTDATA,U,8),5,"R")_$$FO^IBCNEUT1(" ",45,"L")
"RTN","IBCNERPD",174,0)
 . ; Ins address
"RTN","IBCNERPD",175,0)
 . S IBHPD=$$HPD^IBCNHUT1(CNT,1)
"RTN","IBCNERPD",176,0)
 . S ZZ=$P(RPTDATA,"~",2),DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($P(ZZ,U,2),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,4),16,"L")_" "_IBHPD
"RTN","IBCNERPD",177,0)
 . S DISPDATA(2)="        "_$P(RPTDATA,U,10)_"  "_$P(RPTDATA,U,13)
"RTN","IBCNERPD",178,0)
 . ; Add state/zip if defined
"RTN","IBCNERPD",179,0)
 . I $P(RPTDATA,U,14)'="" S DISPDATA(2)=DISPDATA(2)_", "_$P($G(^DIC(5,$P(RPTDATA,U,14)+0,0)),U,2)_" "_$$FO^IBCNEUT1($P(RPTDATA,U,15),5,"L")
"RTN","IBCNERPD",180,0)
 . ; if no payer is linked AND displaying payers
"RTN","IBCNERPD",181,0)
 . I $P(RPTDATA,U)="",TYP'=1 S DISPDATA(3)="   ** NOT CURRENTLY LINKED **",LCT=4,DISPDATA(4)="  " Q
"RTN","IBCNERPD",182,0)
 . ; if no payer and not displaying then quit
"RTN","IBCNERPD",183,0)
 . I $P(RPTDATA,U)="" S LCT=3,DISPDATA(3)="  " Q
"RTN","IBCNERPD",184,0)
 . ; Display Payer Info Line
"RTN","IBCNERPD",185,0)
 . S DISPDATA(3)="  "_$$FO^IBCNEUT1($P(RPTDATA,U,1),35,"L")_"      "_$$FO^IBCNEUT1($P(RPTDATA,U,2),12,"L")_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),10,"L")
"RTN","IBCNERPD",186,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",187,0)
 . ;S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),12,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")
"RTN","IBCNERPD",188,0)
 . S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,9),10,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")
"RTN","IBCNERPD",189,0)
 . S LCT=4,DISPDATA(4)=" "
"RTN","IBCNERPD",190,0)
 S LCT=LCT+1
"RTN","IBCNERPD",191,0)
 Q
"RTN","IBCNERPD",192,0)
 ;
"RTN","IBCNERPD",193,0)
DET ; - Print insurance company detail in Excel Payer report
"RTN","IBCNERPD",194,0)
 S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",195,0)
 . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",196,0)
 . S LCT=LCT+1,DISPDATA(LCT)=WW_U_XX_U_$P(ZZ,U,1)_U_$P(ZZ,U,4)
"RTN","IBCNERPD",197,0)
 . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",198,0)
 . S IBHPD=$$HPD^IBCNHUT1(YY,1)
"RTN","IBCNERPD",199,0)
 . S DISPDATA(LCT)=DISPDATA(LCT)_U_$P(ZZ,U,7)_U_$P(ZZ,U,8)_U_IBHPD
"RTN","IBCNERPD",200,0)
 Q
"RTN","IBCNERPD",201,0)
 ;
"RTN","IBCNERPD",202,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNERPD",203,0)
 N X
"RTN","IBCNERPD",204,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets
"RTN","IBCNERPD",205,0)
 S X="eIV Payer Link Report^"_$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCNERPD",206,0)
 W X
"RTN","IBCNERPD",207,0)
 S X="Report Option: "_$S(REP=1:"Payer List",1:"Insurance Company List")
"RTN","IBCNERPD",208,0)
 W !,X
"RTN","IBCNERPD",209,0)
 I REP=1 D
"RTN","IBCNERPD",210,0)
 . S HDR=$S(TYP=1:"Unlinked Payers Only",TYP=2:"Linked Payers Only",1:"All Payers")
"RTN","IBCNERPD",211,0)
 . I TYP=3 S HDR=HDR_"^"_$S(DET=1:"With Ins. Co. Detail",1:"Without Ins. Co. Detail")
"RTN","IBCNERPD",212,0)
 I REP=2 D
"RTN","IBCNERPD",213,0)
 . S HDR=$S(TYP=1:"Unlinked Insurance Companies Only",TYP=2:"Linked Insurance Companies Only",1:"All Insurance Companies")
"RTN","IBCNERPD",214,0)
 W "^"_HDR
"RTN","IBCNERPD",215,0)
 I REP=2 W !,"'*' indicates the Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",216,0)
 I REP=1,DET=1 W !,"'*' indicates the Linked Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",217,0)
 I REP=1,IBPPYR'="" W !,"For Single Payer:"_"^"_$P(IBPPYR,"^",2)
"RTN","IBCNERPD",218,0)
 I REP=2,IBMAT'="" W !,"Only Insurance Companies that match:"_"^"_IBMAT
"RTN","IBCNERPD",219,0)
 ; IB*602/HN end
"RTN","IBCNERPD",220,0)
 I REP=1 D
"RTN","IBCNERPD",221,0)
 .S X="Payer Name^National Payer ID^# Linked Ins. Co.^Nationally Active?^Locally Active?^FSC Trusted?^Professional EDI#^Institutional EDI#"
"RTN","IBCNERPD",222,0)
 .I DET=1 S X=X_"^Linked Insurance Company Name^Street Address^City, ST^Professional EDI#^Institutional EDI#^HPID/OEID"
"RTN","IBCNERPD",223,0)
 I REP=2 D
"RTN","IBCNERPD",224,0)
 .S X="Insurance Company Name^Street Address^City, ST Zip^# Active Groups^Professional EDI#^Institutional EDI#^HPID/OEID^"
"RTN","IBCNERPD",225,0)
 .S X=X_"Linked Payer^VA ID^Nationally Active?^Locally Active?^FSC Trusted?^Professional EDI#^Institutional EDI#"
"RTN","IBCNERPD",226,0)
 W !,X
"RTN","IBCNERPD",227,0)
 Q
"RTN","IBCNEUT5")
0^18^B65444390^B63252821
"RTN","IBCNEUT5",1,0)
IBCNEUT5 ;DAOU/ALA - eIV MISC. UTILITIES ;20-JUN-2002
"RTN","IBCNEUT5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,284,271,416,621,602**;21-MAR-94;Build 22
"RTN","IBCNEUT5",3,0)
 ;;Per VHA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT5",4,0)
 ;
"RTN","IBCNEUT5",5,0)
 ;**Program Description**
"RTN","IBCNEUT5",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT5",7,0)
 ;
"RTN","IBCNEUT5",8,0)
 Q
"RTN","IBCNEUT5",9,0)
 ;
"RTN","IBCNEUT5",10,0)
MSG(MGRP,XMSUB,XMTEXT,FROMFLAG,XMY) ;  Send a MailMan Message
"RTN","IBCNEUT5",11,0)
 ;
"RTN","IBCNEUT5",12,0)
 ;  Input Parameters
"RTN","IBCNEUT5",13,0)
 ;   MGRP = Mailgroup Name (optional)
"RTN","IBCNEUT5",14,0)
 ;   XMSUB = Subject Line (required)
"RTN","IBCNEUT5",15,0)
 ;   XMTEXT = Message Text Array Name in open format:  "MSG(" (required)
"RTN","IBCNEUT5",16,0)
 ;   FROMFLAG = Flag indicating from whom the message is sent (optional)
"RTN","IBCNEUT5",17,0)
 ;         false/undefined:  from the specific, non-human eIV user
"RTN","IBCNEUT5",18,0)
 ;                    true:  from the actual user (DUZ)
"RTN","IBCNEUT5",19,0)
 ;   XMY = recipients array; pass by reference (optional)
"RTN","IBCNEUT5",20,0)
 ;         The possible recipients are the sender, the Mail Group in the
"RTN","IBCNEUT5",21,0)
 ;         first parameter, and anybody else already defined in the XMY 
"RTN","IBCNEUT5",22,0)
 ;         array when this parameter is used.
"RTN","IBCNEUT5",23,0)
 ;
"RTN","IBCNEUT5",24,0)
 ; New MailMan variables and also some FileMan variables.  The FileMan
"RTN","IBCNEUT5",25,0)
 ; variables are used and not cleaned up when sending to external
"RTN","IBCNEUT5",26,0)
 ; internet addresses.
"RTN","IBCNEUT5",27,0)
 NEW DIFROM,XMDUZ,XMDUN,XMZ,XMMG,XMSTRIP,XMROU,XMYBLOB
"RTN","IBCNEUT5",28,0)
 NEW D0,D1,D2,DG,DIC,DICR,DISYS,DIW
"RTN","IBCNEUT5",29,0)
 NEW TMPSUB,TMPTEXT,TMPY,XX
"RTN","IBCNEUT5",30,0)
 ;
"RTN","IBCNEUT5",31,0)
 I $G(FROMFLAG),$G(DUZ) S XMDUZ=DUZ
"RTN","IBCNEUT5",32,0)
 E  S XMDUZ="eIV INTERFACE (IB)"
"RTN","IBCNEUT5",33,0)
 I $G(MGRP)'="" S XMY("G."_MGRP)=""
"RTN","IBCNEUT5",34,0)
 ; If no recipients are defined, send to postmaster
"RTN","IBCNEUT5",35,0)
 I '$D(XMY) S XMY(.5)=""
"RTN","IBCNEUT5",36,0)
 I $G(DUZ) S XMY(DUZ)=""
"RTN","IBCNEUT5",37,0)
 ; Store off subject, array reference and array of recipients
"RTN","IBCNEUT5",38,0)
 S TMPSUB=XMSUB,TMPTEXT=XMTEXT
"RTN","IBCNEUT5",39,0)
 M TMPY=XMY
"RTN","IBCNEUT5",40,0)
 D ^XMD
"RTN","IBCNEUT5",41,0)
 ;
"RTN","IBCNEUT5",42,0)
 ; Error logic
"RTN","IBCNEUT5",43,0)
 ; If there's an error message and the message was not originally sent
"RTN","IBCNEUT5",44,0)
 ; to the postmaster, then send a message to the postmaster with this
"RTN","IBCNEUT5",45,0)
 ; error message.
"RTN","IBCNEUT5",46,0)
 ;
"RTN","IBCNEUT5",47,0)
 I $D(XMMG),'$D(TMPY(.5)) D
"RTN","IBCNEUT5",48,0)
 . S XMY(.5)=""
"RTN","IBCNEUT5",49,0)
 . S XMTEXT=TMPTEXT,XMSUB="MailMan Error"
"RTN","IBCNEUT5",50,0)
 . ; Add XMMG error message as the first line of the message
"RTN","IBCNEUT5",51,0)
 . S XX=999999
"RTN","IBCNEUT5",52,0)
 . F  S XX=$O(@(XMTEXT_"XX)"),-1) Q:'XX  S @(XMTEXT_"XX+3)")=@(XMTEXT_"XX)")
"RTN","IBCNEUT5",53,0)
 . S @(XMTEXT_"1)")="   MailMan Error:  "_XMMG
"RTN","IBCNEUT5",54,0)
 . S @(XMTEXT_"2)")="Original Subject:  "_TMPSUB
"RTN","IBCNEUT5",55,0)
 . S @(XMTEXT_"3)")="------Original Message------"
"RTN","IBCNEUT5",56,0)
 . D ^XMD
"RTN","IBCNEUT5",57,0)
 . Q
"RTN","IBCNEUT5",58,0)
 Q
"RTN","IBCNEUT5",59,0)
 ;
"RTN","IBCNEUT5",60,0)
 ;
"RTN","IBCNEUT5",61,0)
BFEXIST(DFN,INSNAME) ; Function returns 1 if an Entered Ins Buffer File 
"RTN","IBCNEUT5",62,0)
 ; entry exists with the same DFN and INSNAME, otherwise it returns a 0
"RTN","IBCNEUT5",63,0)
 ;
"RTN","IBCNEUT5",64,0)
 ; DFN - Patient DFN
"RTN","IBCNEUT5",65,0)
 ; INSNAME - Insurance Company Name File 36 - Field .01
"RTN","IBCNEUT5",66,0)
 ;
"RTN","IBCNEUT5",67,0)
 NEW BUFFNAME,EXIST,IEN ; IB*2.0*602
"RTN","IBCNEUT5",68,0)
 S EXIST=0
"RTN","IBCNEUT5",69,0)
 S INSNAME=$$UP^XLFSTR(INSNAME),INSNAME=$$TRIM^XLFSTR(INSNAME)  ; trimmed *IB*2.0*602
"RTN","IBCNEUT5",70,0)
 I ('DFN)!(INSNAME="") G BFEXIT
"RTN","IBCNEUT5",71,0)
 ;
"RTN","IBCNEUT5",72,0)
 S IEN=0
"RTN","IBCNEUT5",73,0)
 F  S IEN=$O(^IBA(355.33,"C",DFN,IEN)) Q:'IEN!EXIST  D
"RTN","IBCNEUT5",74,0)
 .  ; Quit if status is NOT 'Entered'
"RTN","IBCNEUT5",75,0)
 .  I $P($G(^IBA(355.33,IEN,0)),U,4)'="E" Q
"RTN","IBCNEUT5",76,0)
 .  ; Quit if Ins Buffer Ins Co Name (trimmed) is NOT EQUAL to 
"RTN","IBCNEUT5",77,0)
 .  ;  the Ins Co Name parameter (trimmed)
"RTN","IBCNEUT5",78,0)
 .  ; IB*2.0*602 in case the input template for that field changes in the future (TRIM & UP)
"RTN","IBCNEUT5",79,0)
 .  S BUFFNAME=$$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U))
"RTN","IBCNEUT5",80,0)
 .  I $$UP^XLFSTR(BUFFNAME)'=INSNAME Q
"RTN","IBCNEUT5",81,0)
 .  ; Match found
"RTN","IBCNEUT5",82,0)
 .  S EXIST=1
"RTN","IBCNEUT5",83,0)
 .  Q
"RTN","IBCNEUT5",84,0)
BFEXIT ;
"RTN","IBCNEUT5",85,0)
 Q EXIST
"RTN","IBCNEUT5",86,0)
 ;
"RTN","IBCNEUT5",87,0)
 ;
"RTN","IBCNEUT5",88,0)
MGRP() ; Get the Mail Group for the eIV Interface - IB Site Parameters (51.04)
"RTN","IBCNEUT5",89,0)
 Q $$GET1^DIQ(350.9,"1,",51.04,"E")
"RTN","IBCNEUT5",90,0)
 ;
"RTN","IBCNEUT5",91,0)
 ;
"RTN","IBCNEUT5",92,0)
PYRAPP(APP,PAYERIEN) ; Get the Payer Application multiple IEN
"RTN","IBCNEUT5",93,0)
 ; based on the payer application name and payer ien.
"RTN","IBCNEUT5",94,0)
 ;
"RTN","IBCNEUT5",95,0)
 NEW MIEN,APPIEN,DISYS
"RTN","IBCNEUT5",96,0)
 S MIEN=""
"RTN","IBCNEUT5",97,0)
 S APPIEN=$$FIND1^DIC(365.13,,"X",APP,"B")
"RTN","IBCNEUT5",98,0)
 I 'APPIEN G PYRAPPX
"RTN","IBCNEUT5",99,0)
 I '$G(PAYERIEN) G PYRAPPX
"RTN","IBCNEUT5",100,0)
 S MIEN=$O(^IBE(365.12,PAYERIEN,1,"B",APPIEN,""))
"RTN","IBCNEUT5",101,0)
PYRAPPX ;
"RTN","IBCNEUT5",102,0)
 Q MIEN
"RTN","IBCNEUT5",103,0)
 ;
"RTN","IBCNEUT5",104,0)
 ;
"RTN","IBCNEUT5",105,0)
ACTAPP(IEN) ; Active payer applications
"RTN","IBCNEUT5",106,0)
 ; This function will return 1 if any of the payer applications for 
"RTN","IBCNEUT5",107,0)
 ; this payer (being passed in by the payer IEN) are NOT deactivated.
"RTN","IBCNEUT5",108,0)
 ; This should not be confused with the other payer application fields
"RTN","IBCNEUT5",109,0)
 ; such as national active or local active.  The deactivated field is
"RTN","IBCNEUT5",110,0)
 ; the .11 field in the payer application multiple.
"RTN","IBCNEUT5",111,0)
 ;
"RTN","IBCNEUT5",112,0)
 ; This function is invoked by the FileMan data dictionary as a screen
"RTN","IBCNEUT5",113,0)
 ; for the Payer field (#3.1) in the Insurance company file (#36).
"RTN","IBCNEUT5",114,0)
 ;
"RTN","IBCNEUT5",115,0)
 NEW APPIEN,ACTAPP,APPDATA
"RTN","IBCNEUT5",116,0)
 S APPIEN=0,ACTAPP="",IEN=+$G(IEN)
"RTN","IBCNEUT5",117,0)
 F  S APPIEN=$O(^IBE(365.12,IEN,1,APPIEN)) Q:'APPIEN  D  Q:ACTAPP
"RTN","IBCNEUT5",118,0)
 . S APPDATA=$G(^IBE(365.12,IEN,1,APPIEN,0))
"RTN","IBCNEUT5",119,0)
 . I $P(APPDATA,U,11) Q
"RTN","IBCNEUT5",120,0)
 . I $P(APPDATA,U,12) Q
"RTN","IBCNEUT5",121,0)
 . S ACTAPP=1
"RTN","IBCNEUT5",122,0)
 . Q
"RTN","IBCNEUT5",123,0)
 Q ACTAPP
"RTN","IBCNEUT5",124,0)
 ;
"RTN","IBCNEUT5",125,0)
ADDTQ(DFN,PAYER,SRVDT,FDAYS,EICDEXT) ; Function  - Returns flag (0/1)
"RTN","IBCNEUT5",126,0)
 ; 1 - TQ File entry can be added as the service date for the patient 
"RTN","IBCNEUT5",127,0)
 ;     and payer >= MAX TQ service date + Freshness Days
"RTN","IBCNEUT5",128,0)
 ; 0 - otherwise
"RTN","IBCNEUT5",129,0)
 ;
"RTN","IBCNEUT5",130,0)
 ; Input:
"RTN","IBCNEUT5",131,0)
 ;  DFN   - Patient DFN (File #2)
"RTN","IBCNEUT5",132,0)
 ;  PAYER - Payer IEN (File #365.12)
"RTN","IBCNEUT5",133,0)
 ;  SRVDT - Service dt for potential TQ entry
"RTN","IBCNEUT5",134,0)
 ;  FDAYS - Freshness Days param (by extract type)
"RTN","IBCNEUT5",135,0)
 ;  EICDEXT - 1 OR 0 (Is this from the EICD extract?) ;IB*2.0*621 - Renamed parameter to EICD extract
"RTN","IBCNEUT5",136,0)
 ;
"RTN","IBCNEUT5",137,0)
 N ADDTQ,MAXDT
"RTN","IBCNEUT5",138,0)
 ; 
"RTN","IBCNEUT5",139,0)
 S ADDTQ=1
"RTN","IBCNEUT5",140,0)
 I ($G(DFN)="")!($G(SRVDT)="")!($G(FDAYS)="") S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",141,0)
 I ($G(EICDEXT)="")!($G(PAYER)="") S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",142,0)
 ;
"RTN","IBCNEUT5",143,0)
 ; MAX TQ Service Date
"RTN","IBCNEUT5",144,0)
 S MAXDT=$$TQMAXSV(DFN,$G(PAYER),$G(EICDEXT))
"RTN","IBCNEUT5",145,0)
 I MAXDT="" G ADDTQX
"RTN","IBCNEUT5",146,0)
 ; If Service Date < Max Service Date + Freshness Days, do not add
"RTN","IBCNEUT5",147,0)
 I SRVDT'>$$FMADD^XLFDT(MAXDT,FDAYS) S ADDTQ=0
"RTN","IBCNEUT5",148,0)
 ;
"RTN","IBCNEUT5",149,0)
ADDTQX ; ADDTQ exit pt
"RTN","IBCNEUT5",150,0)
 Q ADDTQ
"RTN","IBCNEUT5",151,0)
 ;
"RTN","IBCNEUT5",152,0)
TQUPDSV(DFN,PAYER,SRVDT) ; Update service dates & freshness dates for TQ
"RTN","IBCNEUT5",153,0)
 ; entries awaiting transmission
"RTN","IBCNEUT5",154,0)
 ;
"RTN","IBCNEUT5",155,0)
 N SVDT,STS,ERACT,CSRVDT,CSPAN,SPAN,DA,HL7IEN,RIEN
"RTN","IBCNEUT5",156,0)
 ;
"RTN","IBCNEUT5",157,0)
 I ($G(DFN)="")!($G(PAYER)="")!($G(SRVDT)="") G TQUPDSVX
"RTN","IBCNEUT5",158,0)
 ;
"RTN","IBCNEUT5",159,0)
 ; Loop thru all inquiries to be transmitted to update the service date
"RTN","IBCNEUT5",160,0)
 ; Statuses:  Ready to Transmit(1), Hold(4) and Retry(6)
"RTN","IBCNEUT5",161,0)
 S SVDT=""
"RTN","IBCNEUT5",162,0)
 F  S SVDT=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT)) Q:'SVDT  D
"RTN","IBCNEUT5",163,0)
 . S DA=0
"RTN","IBCNEUT5",164,0)
 . F  S DA=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT,DA)) Q:'DA  D
"RTN","IBCNEUT5",165,0)
 .. ; TQ Status
"RTN","IBCNEUT5",166,0)
 .. S STS=$P($G(^IBCN(365.1,DA,0)),U,4)
"RTN","IBCNEUT5",167,0)
 .. ; Check to see if record is still scheduled to be transmitted.
"RTN","IBCNEUT5",168,0)
 .. ; If so, update the service date if the new service date and current
"RTN","IBCNEUT5",169,0)
 .. ; service date are both in the past or future and the new service
"RTN","IBCNEUT5",170,0)
 .. ; date is closer to Today.  Also, if the current service date is in
"RTN","IBCNEUT5",171,0)
 .. ; the future and the new service date is in the past, update with the
"RTN","IBCNEUT5",172,0)
 .. ; new service date.
"RTN","IBCNEUT5",173,0)
 .. ; If not Ready to Transmit(1), Hold(4) and Retry(6), quit
"RTN","IBCNEUT5",174,0)
 .. I STS'=1,STS'=4,STS'=6 Q
"RTN","IBCNEUT5",175,0)
 .. ; If Hold and last Response returned Error Action - Please resubmit
"RTN","IBCNEUT5",176,0)
 .. ; Original Transaction (P) - do not update
"RTN","IBCNEUT5",177,0)
 .. I STS=4 S ERACT="" D  I ERACT="P" Q
"RTN","IBCNEUT5",178,0)
 .. . ; Last msg sent
"RTN","IBCNEUT5",179,0)
 .. . S HL7IEN=$O(^IBCN(365.1,DA,2," "),-1) Q:'HL7IEN
"RTN","IBCNEUT5",180,0)
 .. . ; Assoc eIV Response IEN
"RTN","IBCNEUT5",181,0)
 .. . S RIEN=$P($G(^IBCN(365.1,DA,2,HL7IEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT5",182,0)
 .. . ; Error Action IEN (365.018)
"RTN","IBCNEUT5",183,0)
 .. . S ERACT=$P($G(^IBCN(365,RIEN,1)),U,15) Q:'ERACT
"RTN","IBCNEUT5",184,0)
 .. . S ERACT=$P($G(^IBE(365.018,ERACT,0)),U,1)
"RTN","IBCNEUT5",185,0)
 .. ;
"RTN","IBCNEUT5",186,0)
 .. ; Current service date for TQ entry
"RTN","IBCNEUT5",187,0)
 .. S CSRVDT=$P($G(^IBCN(365.1,DA,0)),U,12)
"RTN","IBCNEUT5",188,0)
 .. ; If current service date is today (DT), do not update
"RTN","IBCNEUT5",189,0)
 .. I CSRVDT=DT Q
"RTN","IBCNEUT5",190,0)
 .. ; If new service date is in the future and current service date is in
"RTN","IBCNEUT5",191,0)
 .. ; the past, do not update
"RTN","IBCNEUT5",192,0)
 .. I SRVDT>DT,CSRVDT<DT Q
"RTN","IBCNEUT5",193,0)
 .. ; If new service date is today, update
"RTN","IBCNEUT5",194,0)
 .. I SRVDT=DT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",195,0)
 .. ; If both current and new service dates are in the past or future,
"RTN","IBCNEUT5",196,0)
 .. ; only update, when new service date is closer to today (DT).
"RTN","IBCNEUT5",197,0)
 .. I ((CSRVDT<DT)&(SRVDT<DT))!((CSRVDT>DT)&(SRVDT>DT)) D  Q
"RTN","IBCNEUT5",198,0)
 .. . S CSPAN=$$FMDIFF^XLFDT(CSRVDT,DT,1),SPAN=$$FMDIFF^XLFDT(SRVDT,DT,1)
"RTN","IBCNEUT5",199,0)
 .. . I CSPAN<0 S CSPAN=-CSPAN
"RTN","IBCNEUT5",200,0)
 .. . I SPAN<0 S SPAN=-SPAN
"RTN","IBCNEUT5",201,0)
 .. . I SPAN<CSPAN D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1))
"RTN","IBCNEUT5",202,0)
 .. ; If new service date is in the past and current service date is in
"RTN","IBCNEUT5",203,0)
 .. ; the future, update
"RTN","IBCNEUT5",204,0)
 .. I SRVDT<CSRVDT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",205,0)
 .. Q
"RTN","IBCNEUT5",206,0)
TQUPDSVX ; TQUPDSV exit pt
"RTN","IBCNEUT5",207,0)
 Q
"RTN","IBCNEUT5",208,0)
 ;
"RTN","IBCNEUT5",209,0)
TQMAXSV(DFN,PAYER,EICDEXT) ; Returns MAX(TQ Service Date) for Patient & Payer
"RTN","IBCNEUT5",210,0)
 ; Input: 
"RTN","IBCNEUT5",211,0)
 ;  DFN     - Patient DFN (2)
"RTN","IBCNEUT5",212,0)
 ;  PAYER   - Payer IEN (365.12) (If no PAYER passed in, check them all)
"RTN","IBCNEUT5",213,0)
 ;  EICDEXT - 1 OR 0 (Is this from the EICD extract?)
"RTN","IBCNEUT5",214,0)
 ;
"RTN","IBCNEUT5",215,0)
 ; Output:
"RTN","IBCNEUT5",216,0)
 ;  TQMAXSV - MAX (most recent) service date from TQ entry for Patient &
"RTN","IBCNEUT5",217,0)
 ;            Payer
"RTN","IBCNEUT5",218,0)
 ;
"RTN","IBCNEUT5",219,0)
 ; IB*621 reworked this function to ignore TQ entries with statuses of
"RTN","IBCNEUT5",220,0)
 ;  "Response Received" for EICD for which the Response indicated a "Clearinghouse Timeout"
"RTN","IBCNEUT5",221,0)
 N TQMAXSV
"RTN","IBCNEUT5",222,0)
 S TQMAXSV=""
"RTN","IBCNEUT5",223,0)
 I $G(DFN)="" G TQMAXSVX
"RTN","IBCNEUT5",224,0)
 ;
"RTN","IBCNEUT5",225,0)
 N ERTXT,IBSKIP,IBTQS,IENS,LASTBYP,STATLIST,TQIEN
"RTN","IBCNEUT5",226,0)
 ; This is the list of statuses that are to be ignored for EICD extract only
"RTN","IBCNEUT5",227,0)
 ;   3=Response Received
"RTN","IBCNEUT5",228,0)
 S STATLIST=",3,"
"RTN","IBCNEUT5",229,0)
 ;
"RTN","IBCNEUT5",230,0)
 S LASTBYP=""
"RTN","IBCNEUT5",231,0)
 F  S LASTBYP=$O(^IBCN(365.1,"AD",DFN,PAYER,LASTBYP)) Q:LASTBYP=""  D
"RTN","IBCNEUT5",232,0)
 . S TQIEN=""
"RTN","IBCNEUT5",233,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AD",DFN,PAYER,LASTBYP,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEUT5",234,0)
 .. S IBSKIP=0
"RTN","IBCNEUT5",235,0)
 .. I EICDEXT D  Q:IBSKIP
"RTN","IBCNEUT5",236,0)
 .. . S IBTQS=+$$GET1^DIQ(365.1,TQIEN_",",.04,"I")    ; TQ Transmission Status 
"RTN","IBCNEUT5",237,0)
 .. . I IBTQS,'($F(STATLIST,","_IBTQS_",")) Q
"RTN","IBCNEUT5",238,0)
 .. . S IENS="1,"_TQIEN_",",RIEN=$$GET1^DIQ(365.16,IENS,.03,"I")
"RTN","IBCNEUT5",239,0)
 .. . S ERTXT=$$GET1^DIQ(365,RIEN_",",4.01) I $$UP^XLFSTR(ERTXT)["TIMEOUT" S IBSKIP=1 ; keep looking
"RTN","IBCNEUT5",240,0)
 .. I LASTBYP>TQMAXSV S TQMAXSV=LASTBYP
"RTN","IBCNEUT5",241,0)
 ;
"RTN","IBCNEUT5",242,0)
TQMAXSVX ; TQMAXSV exit pt
"RTN","IBCNEUT5",243,0)
 Q TQMAXSV
"RTN","IBCNEUT5",244,0)
 ;
"RTN","IBCNEUT5",245,0)
SAVFRSH(TQIEN,DTDIFF) ; Update TQ freshness date based on service date diff
"RTN","IBCNEUT5",246,0)
 ;
"RTN","IBCNEUT5",247,0)
 N DIE,DA,FDT,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT5",248,0)
 I $G(TQIEN)="" Q
"RTN","IBCNEUT5",249,0)
 S FDT=$P($G(^IBCN(365.1,TQIEN,0)),U,17)
"RTN","IBCNEUT5",250,0)
 ; Note - will only update if FDT > 0.
"RTN","IBCNEUT5",251,0)
 S FDT=$$FMADD^XLFDT(FDT,+DTDIFF)
"RTN","IBCNEUT5",252,0)
 S DIE="^IBCN(365.1,",DA=TQIEN,DR=".17////"_FDT
"RTN","IBCNEUT5",253,0)
 D ^DIE
"RTN","IBCNEUT5",254,0)
 Q
"RTN","IBCNEUT5",255,0)
 ;
"RTN","IBCNSMM")
0^12^B19438322^B19301339
"RTN","IBCNSMM",1,0)
IBCNSMM ;ALB/CMS -MEDICARE INSURANCE INTAKE ; 18-OCT-98
"RTN","IBCNSMM",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,184,516,601,595,602**;21-MAR-94;Build 22
"RTN","IBCNSMM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSMM",4,0)
 Q
"RTN","IBCNSMM",5,0)
 ;
"RTN","IBCNSMM",6,0)
EN ; -- Entry point from Medicare Intake Standalone option
"RTN","IBCNSMM",7,0)
 N DIC,DIR,DA,%A,DFN,X,Y,IBQUIT,IBCNSP,IBSOURCE
"RTN","IBCNSMM",8,0)
 S (IBQUIT,IBCNSP)=0 D GETWNR I IBQUIT G ENQ
"RTN","IBCNSMM",9,0)
 ;
"RTN","IBCNSMM",10,0)
 ; - allow the user to enter the Source of Information for the policies
"RTN","IBCNSMM",11,0)
 W !!,"You may enter the 'Source of Information' that will be filed with all"
"RTN","IBCNSMM",12,0)
 W !,"Medicare insurance coverage policies that are created.",!
"RTN","IBCNSMM",13,0)
 ;
"RTN","IBCNSMM",14,0)
 S DIR(0)="2.312,1.09"
"RTN","IBCNSMM",15,0)
 S DIR("A")="Enter Source of Information"
"RTN","IBCNSMM",16,0)
 S DIR("B")="INTERVIEW"
"RTN","IBCNSMM",17,0)
 D ^DIR K DUOUT,DTOUT,DIRUT,DIROUT,DIR
"RTN","IBCNSMM",18,0)
 S IBSOURCE=+Y I Y<1 G ENQ
"RTN","IBCNSMM",19,0)
 W !
"RTN","IBCNSMM",20,0)
 ;
"RTN","IBCNSMM",21,0)
 ; - loop to select patients
"RTN","IBCNSMM",22,0)
ENA S DIC(0)="AEQMN",DIC="^DPT(" D ^DIC
"RTN","IBCNSMM",23,0)
 I +Y<1 G ENQ
"RTN","IBCNSMM",24,0)
 S DFN=+Y
"RTN","IBCNSMM",25,0)
 I $G(^DPT(DFN,.35)) W *7,!!,?10,"Patient Expired on ",$$FMTE^XLFDT($P(^DPT(DFN,.35),U))
"RTN","IBCNSMM",26,0)
 W ! D DISP^IBCNS W !,?3 S X="",$P(X,"=",76)="" W X
"RTN","IBCNSMM",27,0)
 D ENR(DFN,IBSOURCE,1) K DIC W !! G ENA
"RTN","IBCNSMM",28,0)
 ;
"RTN","IBCNSMM",29,0)
ENQ Q
"RTN","IBCNSMM",30,0)
 ;
"RTN","IBCNSMM",31,0)
 ;
"RTN","IBCNSMM",32,0)
ENR(DFN,IBSOUR,IBOPT) ; -- Entry point from IBCNBME Patient Registration or Pre-Registration
"RTN","IBCNSMM",33,0)
 ;    Input Variable DFN Required and IBSOUR =Source of Information
"RTN","IBCNSMM",34,0)
 ;                   IBOPT =1 if coming from MII Standalone Option
"RTN","IBCNSMM",35,0)
 ;
"RTN","IBCNSMM",36,0)
 N D,DIE,DA,DIR,DIC,E,IBCPOL,IBCNSP,IBCDFN,IBQUIT,IBOK,IBC0,IBAD,IBGRP,IBADPOL
"RTN","IBCNSMM",37,0)
 N IBNAME,IBHICN,IBAEFF,IBBEFF,IBCOVP,IBGNA,IBGNU,IBBUF,IBNEW,IBP,X,Y
"RTN","IBCNSMM",38,0)
 N IBPOLA,IBPOLB,IBARR,IBHIT,IBHITA,IBHITB,IBCOB,IBCOBI
"RTN","IBCNSMM",39,0)
 ;
"RTN","IBCNSMM",40,0)
 ; IB*602 - IBHICN could also be a Medicare Beneficiary ID
"RTN","IBCNSMM",41,0)
 S (IBAEFF,IBBEFF,IBCNSP,IBCDFN,IBNEW,IBQUIT)=0,IBADPOL=1
"RTN","IBCNSMM",42,0)
 S (IBNAME,IBHICN)=""
"RTN","IBCNSMM",43,0)
 ;
"RTN","IBCNSMM",44,0)
 ; -- Get Standard Medicare Insurance Company and plans in IBCNSP
"RTN","IBCNSMM",45,0)
 D GETWNR I IBQUIT G ENRQ
"RTN","IBCNSMM",46,0)
 ;
"RTN","IBCNSMM",47,0)
 ; -- get the patient's Medicare policies
"RTN","IBCNSMM",48,0)
 S (IBPOLA,IBPOLB)=0
"RTN","IBCNSMM",49,0)
 S IBCDFN=0 F  S IBCDFN=$O(^DPT(DFN,.312,"B",+IBCNSP,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSMM",50,0)
 .;IB*2.0*516/TAZ - Retrieve Data from HIPAA compliant fields.
"RTN","IBCNSMM",51,0)
 .;S IBCPOL=$G(^DPT(DFN,.312,IBCDFN,0))  ;516 - baa
"RTN","IBCNSMM",52,0)
 .S IBCPOL=$$ZND^IBCNS1(DFN,IBCDFN)  ;516 - baa
"RTN","IBCNSMM",53,0)
 .;
"RTN","IBCNSMM",54,0)
 .; - is the policy for Part A?
"RTN","IBCNSMM",55,0)
 .I $P(IBCNSP,U,3)=$P(IBCPOL,U,18) D  Q
"RTN","IBCNSMM",56,0)
 ..S IBPOLA=IBPOLA+1,IBARR("A",IBPOLA)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",57,0)
 .;
"RTN","IBCNSMM",58,0)
 .; - is the policy for Part B?
"RTN","IBCNSMM",59,0)
 .I $P(IBCNSP,U,5)=$P(IBCPOL,U,18) D
"RTN","IBCNSMM",60,0)
 ..S IBPOLB=IBPOLB+1,IBARR("B",IBPOLB)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",61,0)
 ;
"RTN","IBCNSMM",62,0)
 ; - can't edit here if there is more than one policy
"RTN","IBCNSMM",63,0)
 I $D(IBARR("A",2)) K IBARR("A") D
"RTN","IBCNSMM",64,0)
 .W !!,"This patient has more than one Part A policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",65,0)
 ;
"RTN","IBCNSMM",66,0)
 I $D(IBARR("B",2)) K IBARR("B") D
"RTN","IBCNSMM",67,0)
 .W !!,"This patient has more than one Part B policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",68,0)
 ;
"RTN","IBCNSMM",69,0)
 I (IBPOLA!IBPOLB),'$D(IBARR) G ENRQ
"RTN","IBCNSMM",70,0)
 ;
"RTN","IBCNSMM",71,0)
 ; -- Ask for Medicare Insurance Card information
"RTN","IBCNSMM",72,0)
 ;    Return IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOB/IBCOBI
"RTN","IBCNSMM",73,0)
 D MII^IBCNSMM2 I IBQUIT G ENRQ
"RTN","IBCNSMM",74,0)
 ;
"RTN","IBCNSMM",75,0)
 ; - if Part A or B exists, but no changes, quit
"RTN","IBCNSMM",76,0)
 I $D(IBARR("A",1)) D COM($P(IBARR("A",1),"^",2,99),"A") I IBHIT D
"RTN","IBCNSMM",77,0)
 .S IBHITA=1 W !,"  * No Part A changes made..."
"RTN","IBCNSMM",78,0)
 ;
"RTN","IBCNSMM",79,0)
 I $D(IBARR("B",1)) D COM($P(IBARR("B",1),"^",2,99),"B") I IBHIT D
"RTN","IBCNSMM",80,0)
 .S IBHITB=1 W !,"  * No Part B changes made..."
"RTN","IBCNSMM",81,0)
 ;
"RTN","IBCNSMM",82,0)
 I $G(IBHITA),$G(IBHITB) G ENRQ
"RTN","IBCNSMM",83,0)
 I $G(IBHITA),'$G(IBBEFF) G ENRQ
"RTN","IBCNSMM",84,0)
 I $G(IBHITB),'$G(IBAEFF) G ENRQ
"RTN","IBCNSMM",85,0)
 ;
"RTN","IBCNSMM",86,0)
 ;IB*595 Removed ability to file directly into Insurance Type File
"RTN","IBCNSMM",87,0)
 I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",88,0)
 I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",89,0)
 ;
"RTN","IBCNSMM",90,0)
 ; -- If user not holding key set data in Buffer File
"RTN","IBCNSMM",91,0)
 ;I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D G ENRQ
"RTN","IBCNSMM",92,0)
 ;.I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",93,0)
 ;.I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",94,0)
 ;
"RTN","IBCNSMM",95,0)
 ; -- Otherwise, set data into permanent files
"RTN","IBCNSMM",96,0)
 ;I IBAEFF,'$G(IBHITA) D
"RTN","IBCNSMM",97,0)
 ;.I IBPOLA,'$D(IBARR("A")) Q ; can't update Part A policy
"RTN","IBCNSMM",98,0)
 ;.I '$D(IBARR("A",1)) D ADDP("A") Q
"RTN","IBCNSMM",99,0)
 ;.S IBCDFN=+IBARR("A",1) D SETP^IBCNSMM1("A")
"RTN","IBCNSMM",100,0)
 ;I IBBEFF,'$G(IBHITB) D
"RTN","IBCNSMM",101,0)
 ;.I IBPOLB,'$D(IBARR("B")) Q ; can't update Part B policy
"RTN","IBCNSMM",102,0)
 ;.I '$D(IBARR("B",1)) D ADDP("B") Q
"RTN","IBCNSMM",103,0)
 ;.S IBCDFN=+IBARR("B",1) D SETP^IBCNSMM1("B")
"RTN","IBCNSMM",104,0)
 ;IB*595 END
"RTN","IBCNSMM",105,0)
 ;
"RTN","IBCNSMM",106,0)
ENRQ W ! Q
"RTN","IBCNSMM",107,0)
 ;
"RTN","IBCNSMM",108,0)
 ;
"RTN","IBCNSMM",109,0)
 ;
"RTN","IBCNSMM",110,0)
ADDP(IBP) ; -- Create a new patient policy
"RTN","IBCNSMM",111,0)
 ;    Input: DFN
"RTN","IBCNSMM",112,0)
 ;           IBCNSP=MED WNR INS IEN^MEDICARE (WNR)
"RTN","IBCNSMM",113,0)
 ;                  ^PART A IEN^PART A
"RTN","IBCNSMM",114,0)
 ;                  ^PART B IEN^PART A
"RTN","IBCNSMM",115,0)
 ;           IBP = "A" or "B" for medicare part
"RTN","IBCNSMM",116,0)
 ;           IBSOUR = Source of Information
"RTN","IBCNSMM",117,0)
 ;   Return: IBCDFN=-1 could not add OR Policy ien
"RTN","IBCNSMM",118,0)
 ;           IBCOVP= Covered by Health Insurance
"RTN","IBCNSMM",119,0)
 ;
"RTN","IBCNSMM",120,0)
 N X,Y,DO,DD,DA,DR,DIC,DIE,DIK,DIR,DIRUT,IBSPEC
"RTN","IBCNSMM",121,0)
 ; -- Create a New patient policy
"RTN","IBCNSMM",122,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM",123,0)
 ;
"RTN","IBCNSMM",124,0)
 D FIELD^DID(2,.3121,"","SPECIFIER","IBSPEC")
"RTN","IBCNSMM",125,0)
 S DIC("DR")="1.09////"_IBSOUR_";1.05///NOW;1.06////"_DUZ,DIC("P")=$G(IBSPEC("SPECIFIER"))
"RTN","IBCNSMM",126,0)
 K DD,DO S DA(1)=DFN,DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=+IBCNSP,DLAYGO=2.312
"RTN","IBCNSMM",127,0)
 D FILE^DICN K DD,DO,DLAYGO,DIC
"RTN","IBCNSMM",128,0)
 S IBCDFN=+Y
"RTN","IBCNSMM",129,0)
 I IBCDFN<1 W !!,*7,"  <Could not create new policy at this time.  Try Later!>",! G ADDPQ
"RTN","IBCNSMM",130,0)
 ;
"RTN","IBCNSMM",131,0)
 ; -- Set Medicare policy data
"RTN","IBCNSMM",132,0)
 D SETP^IBCNSMM1(IBP)
"RTN","IBCNSMM",133,0)
ADDPQ Q
"RTN","IBCNSMM",134,0)
 ;
"RTN","IBCNSMM",135,0)
 ;
"RTN","IBCNSMM",136,0)
GETWNR ;
"RTN","IBCNSMM",137,0)
 ; -- Get Medicare (WNR) insurance company and plan data
"RTN","IBCNSMM",138,0)
 ;    Returns IBCNSP or IBQUIT
"RTN","IBCNSMM",139,0)
 ;    IBCNSP="Error: Medicare (WNR) ... not setup properly" 
"RTN","IBCNSMM",140,0)
 ;           if Medicare WNR entry or plans not setup properly
"RTN","IBCNSMM",141,0)
 ;
"RTN","IBCNSMM",142,0)
 ;    IBCNSP=INS CO. (36) IEN^"MEDICARE (WNR)"
"RTN","IBCNSMM",143,0)
 ;           ^PLAN (355.3) PARTA IEN^"PART A"
"RTN","IBCNSMM",144,0)
 ;           ^PLAN (355.3) PARTB IEN^"PART B"
"RTN","IBCNSMM",145,0)
 ;
"RTN","IBCNSMM",146,0)
 I 'IBCNSP S IBCNSP=$$GETWNR^IBCNSMM1
"RTN","IBCNSMM",147,0)
 I 'IBCNSP W !!,*7,?3,IBCNSP S IBQUIT=1
"RTN","IBCNSMM",148,0)
 Q
"RTN","IBCNSMM",149,0)
 ;
"RTN","IBCNSMM",150,0)
VALHIC(X) ; Edits for validating HIC #
"RTN","IBCNSMM",151,0)
 ; X = the HIC # to be validated
"RTN","IBCNSMM",152,0)
 ;IB*2.0*601 JRA Remove special HIC # validation - use existing error messages IB356/IB357/IB358 when the
"RTN","IBCNSMM",153,0)
 ; Primary/Secondary/Tertiary insurance subscriber's ID number is missing (as with other insurances).
"RTN","IBCNSMM",154,0)
 ; 
"RTN","IBCNSMM",155,0)
 ;IB*2.0*601 JRA QUIT '1' to remove special validation for HIC #, which will prevent the display of IB Error
"RTN","IBCNSMM",156,0)
 ; message IB215 and the HIC # help text at HLP^IBCNSM32.
"RTN","IBCNSMM",157,0)
 Q 1  ;IB*2.0*601 JRA
"RTN","IBCNSMM",158,0)
 N VAL
"RTN","IBCNSMM",159,0)
 S VAL=1
"RTN","IBCNSMM",160,0)
 I X'?9N1A.1AN,X'?1.3A6N,X'?1.3A9N S VAL=0
"RTN","IBCNSMM",161,0)
 Q VAL
"RTN","IBCNSMM",162,0)
 ;
"RTN","IBCNSMM",163,0)
COM(X,Y) ; Compare X with the intake variables.
"RTN","IBCNSMM",164,0)
 ;    Input: X => 0th node of policy in file #2.312
"RTN","IBCNSMM",165,0)
 ;           Y => A (Part A) or B (part B)
"RTN","IBCNSMM",166,0)
 ;   Output: IBHIT=1 (no changes made)
"RTN","IBCNSMM",167,0)
 S IBHIT=0
"RTN","IBCNSMM",168,0)
 I $P(X,"^",17)'=IBNAME G COMQ
"RTN","IBCNSMM",169,0)
 I $P(X,"^",2)'=IBHICN G COMQ
"RTN","IBCNSMM",170,0)
 I $P(X,"^",8)'=$S(Y="A":IBAEFF,1:IBBEFF) G COMQ
"RTN","IBCNSMM",171,0)
 I $P(X,"^",20)'=IBCOBI G COMQ
"RTN","IBCNSMM",172,0)
 ;
"RTN","IBCNSMM",173,0)
 S IBHIT=1
"RTN","IBCNSMM",174,0)
COMQ Q
"RTN","IBCNSMM1")
0^16^B27788048^B27818840
"RTN","IBCNSMM1",1,0)
IBCNSMM1 ;ALB/CMS -MEDICARE INSURANCE INTAKE (CONT) ; 11/8/06 9:32am
"RTN","IBCNSMM1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,359,497,602**;21-MAR-94;Build 22
"RTN","IBCNSMM1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSMM1",4,0)
 ;;(THIS ROUTINE WAS DEACTIVATED VIA PATCH 497...AND SHOULD BE RESEARCHED
"RTN","IBCNSMM1",5,0)
 ;;IF REACTIVATED...REFER TO FIELDS (40.02, 40.03, 60.04, 60.07 OF THE
"RTN","IBCNSMM1",6,0)
 ;;355.33 FILE.)
"RTN","IBCNSMM1",7,0)
 Q
"RTN","IBCNSMM1",8,0)
 ;
"RTN","IBCNSMM1",9,0)
SETP(IBP) ; -- Stuff data fields in patient policy
"RTN","IBCNSMM1",10,0)
 ;  Required Input:
"RTN","IBCNSMM1",11,0)
 ;  IBP =A for Part A, B for Part B
"RTN","IBCNSMM1",12,0)
 ;  DFN =pt. ien
"RTN","IBCNSMM1",13,0)
 ;  IBCDFN =patient policy ien
"RTN","IBCNSMM1",14,0)
 ;  IBNAME =Name of Insured
"RTN","IBCNSMM1",15,0)
 ;  IBHICN =Subscriber ID - as of IB*601 could also be a MBI Number
"RTN","IBCNSMM1",16,0)
 ;  IBAEFF =Effective Date of Plan A
"RTN","IBCNSMM1",17,0)
 ;  IBBEFF =Effective Date of Plan B
"RTN","IBCNSMM1",18,0)
 ;  IBCNSP =Medicare (WNR) ien ^Part A ien ^Part B ien
"RTN","IBCNSMM1",19,0)
 ;  IBCOBI =Coordination of Benefits (Internal value)
"RTN","IBCNSMM1",20,0)
 ;
"RTN","IBCNSMM1",21,0)
 N D,DA,DIE,DR,IBBDA,X,Y
"RTN","IBCNSMM1",22,0)
 I '$D(^DPT(DFN,.312,+IBCDFN,0)) G SETPQ
"RTN","IBCNSMM1",23,0)
 ;
"RTN","IBCNSMM1",24,0)
 ; -- Stuff the pt. policy fields
"RTN","IBCNSMM1",25,0)
 ;   #2  *Group Number              #.18  Group Plan
"RTN","IBCNSMM1",26,0)
 ;   #6  Whose Ins.                 #.2   COB
"RTN","IBCNSMM1",27,0)
 ;   #8  Effective Date of Policy   #7.02    Sub. ID
"RTN","IBCNSMM1",28,0)
 ;   #15 *Group Name                #7.01   Name of Insured
"RTN","IBCNSMM1",29,0)
 ;   #16 Pt. Relationship to Insured
"RTN","IBCNSMM1",30,0)
 ;
"RTN","IBCNSMM1",31,0)
 S DIE="^DPT("_DFN_",.312,",DA=+IBCDFN,DA(1)=DFN
"RTN","IBCNSMM1",32,0)
 S DR="2///"_$S(IBP="A":$P(IBCNSP,U,4),IBP="B":$P(IBCNSP,U,6),1:"")
"RTN","IBCNSMM1",33,0)
 S DR=DR_";7.01///"_IBNAME_";7.02///"_IBHICN       ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",34,0)
 S DR=DR_";6///v;8///"_$S(IBP="A":$G(IBAEFF),IBP="B":$G(IBBEFF),1:"")
"RTN","IBCNSMM1",35,0)
 S DR=DR_";.2////"_IBCOBI_";15///"_$S(IBP="A":"PART A",IBP="B":"PART B",1:"")
"RTN","IBCNSMM1",36,0)
 S DR=DR_";16///01;.18////"_$S(IBP="A":+$P(IBCNSP,U,3),IBP="B":+$P(IBCNSP,U,5),1:"")
"RTN","IBCNSMM1",37,0)
 D ^DIE
"RTN","IBCNSMM1",38,0)
 ;
"RTN","IBCNSMM1",39,0)
 ;  -- Update Insurance Event
"RTN","IBCNSMM1",40,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM1",41,0)
 D BEFORE^IBCNSEVT S IBNEW=1
"RTN","IBCNSMM1",42,0)
 ;
"RTN","IBCNSMM1",43,0)
 ; -- Ask to Verify at this time
"RTN","IBCNSMM1",44,0)
 K DIR S DIR("A")="Verify Medicare (WNR) Part "_IBP_" Coverage Now"
"RTN","IBCNSMM1",45,0)
 S DIR("?")="Enter 'No' to not Verify Coverage at this time."
"RTN","IBCNSMM1",46,0)
 W ! S IBOK=0 D OK I 'IBOK G SETEV
"RTN","IBCNSMM1",47,0)
 ;
"RTN","IBCNSMM1",48,0)
 ; -- Check to see if Pt. Name = name of Insured
"RTN","IBCNSMM1",49,0)
 I IBNAME'=$P($G(^DPT(DFN,0)),U,1) D
"RTN","IBCNSMM1",50,0)
 .W !!,"WARNING: Patient Name: '"_$P($G(^DPT(DFN,0)),U,1)_"'  DOES NOT MATCH"
"RTN","IBCNSMM1",51,0)
 .W !,"      Name of Insured: '"_IBNAME_"'.",!
"RTN","IBCNSMM1",52,0)
 ;
"RTN","IBCNSMM1",53,0)
 ; -- verify policy
"RTN","IBCNSMM1",54,0)
 S DIE="^DPT("_DFN_",.312,",DA=IBCDFN,DA(1)=DFN
"RTN","IBCNSMM1",55,0)
 S DR="1.03///NOW;1.04////"_DUZ D ^DIE
"RTN","IBCNSMM1",56,0)
 W !,"  PART "_IBP_" COVERAGE VERIFIED."
"RTN","IBCNSMM1",57,0)
 ;
"RTN","IBCNSMM1",58,0)
SETEV ; -- Update Insurance event
"RTN","IBCNSMM1",59,0)
 N X,Y
"RTN","IBCNSMM1",60,0)
 D COVERED^IBCNSM31(DFN,IBCOVP)
"RTN","IBCNSMM1",61,0)
 I $G(IBCDFN)>0,IBNEW=1 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSMM1",62,0)
 ;
"RTN","IBCNSMM1",63,0)
SETPQ Q
"RTN","IBCNSMM1",64,0)
 ;
"RTN","IBCNSMM1",65,0)
 ;
"RTN","IBCNSMM1",66,0)
BUFF(IBP) ; -- Set IBBUF array with policy info for Buffer File
"RTN","IBCNSMM1",67,0)
 ; Return: IBBUF array
"RTN","IBCNSMM1",68,0)
 ;    IBBUF(355.33 field #s)=corresponding policy, plan and company data
"RTN","IBCNSMM1",69,0)
 ;    i.e.  IBBUF(20.01)=Insurance Company Name
"RTN","IBCNSMM1",70,0)
 ;          IBBUF(90.01)=Group Name
"RTN","IBCNSMM1",71,0)
 ;          IBBUF(60.01)=DFN
"RTN","IBCNSMM1",72,0)
 ;
"RTN","IBCNSMM1",73,0)
 ; Input: DFN, IBCNSP, IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOBI
"RTN","IBCNSMM1",74,0)
 ;           
"RTN","IBCNSMM1",75,0)
 ; Auto stuff other fields
"RTN","IBCNSMM1",76,0)
 ;
"RTN","IBCNSMM1",77,0)
 N IBP0 K IBBUF S IBBUF=""
"RTN","IBCNSMM1",78,0)
 S IBBUF(.03)=$G(IBSOUR)
"RTN","IBCNSMM1",79,0)
 S IBBUF(20.01)=$P(IBCNSP,U,2)
"RTN","IBCNSMM1",80,0)
 S IBBUF(90.01)=$S(IBP="A":$P(IBCNSP,U,4),IBP="B":$P(IBCNSP,U,6),1:"")   ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",81,0)
 S IBBUF(90.02)=IBBUF(90.01)           ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",82,0)
 S IBBUF(60.01)=+DFN
"RTN","IBCNSMM1",83,0)
 S IBBUF(60.02)=$S(IBP="A":IBAEFF,IBP="B":IBBEFF,1:"")
"RTN","IBCNSMM1",84,0)
 S IBBUF(90.03)=IBHICN                 ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",85,0)
 S IBBUF(60.05)="v"
"RTN","IBCNSMM1",86,0)
 S IBBUF(60.06)="01"
"RTN","IBCNSMM1",87,0)
 S IBBUF(91.01)=IBNAME                 ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",88,0)
 S IBBUF(60.12)=IBCOBI
"RTN","IBCNSMM1",89,0)
 S IBBDA=$$ADDSTF^IBCNBES(1,DFN,.IBBUF)
"RTN","IBCNSMM1",90,0)
 I +IBBDA W !,?3,$P(IBCNSP,U,2)," PART "_IBP_" entry #"_+IBBDA_" added to Insurance Buffer File."
"RTN","IBCNSMM1",91,0)
 I 'IBBDA W !,*7,?3,"Warning: Could not add new policy Part "_IBP_" in Buffer File.",!,?13,"("_$P(IBBDA,U,2)_")",!
"RTN","IBCNSMM1",92,0)
 Q
"RTN","IBCNSMM1",93,0)
 ;
"RTN","IBCNSMM1",94,0)
OK ; -- ask okay
"RTN","IBCNSMM1",95,0)
 N DTOUT,DIROUT,DIRUT,DUOUT,X,Y
"RTN","IBCNSMM1",96,0)
 ; Returns:
"RTN","IBCNSMM1",97,0)
 ; IBQUIT=1 Exit user timedout
"RTN","IBCNSMM1",98,0)
 ;   IBOK=1 Yes
"RTN","IBCNSMM1",99,0)
 ;   IBOK=0 No
"RTN","IBCNSMM1",100,0)
 S IBQUIT=0,DIR(0)="Y",DIR("B")="YES" W !
"RTN","IBCNSMM1",101,0)
 I $G(DIR("A"))="" S DIR("A")="Is this Data Correct"
"RTN","IBCNSMM1",102,0)
 I $G(DIR("?"))="" S DIR("?")="Enter 'No' to edit Medicare Card information"
"RTN","IBCNSMM1",103,0)
 D ^DIR K DIR
"RTN","IBCNSMM1",104,0)
 I $D(DTOUT) S IBQUIT=1
"RTN","IBCNSMM1",105,0)
 S IBOK=$G(Y) I IBOK["^" S IBQUIT=1
"RTN","IBCNSMM1",106,0)
 Q
"RTN","IBCNSMM1",107,0)
 ;
"RTN","IBCNSMM1",108,0)
GETWNR() ; -- Find and return the MEDICARE (WNR) ien
"RTN","IBCNSMM1",109,0)
 ;         -- Returns Error message or
"RTN","IBCNSMM1",110,0)
 ;            DIC(36 IEN ^"MEDICARE (WNR)"^IBA(355.3 PART A IEN ^"PART A"^ IBA(355.3 PART B IEN ^"PART B"
"RTN","IBCNSMM1",111,0)
 ;
"RTN","IBCNSMM1",112,0)
 N IBWNR,IB0,IBP0,IBQ,IBPQ,IBPX,IBX,IBY,IBPGN
"RTN","IBCNSMM1",113,0)
 S IBY="MEDICARE (WNR)",IBQ=0
"RTN","IBCNSMM1",114,0)
 S IBX=0 F  S IBX=$O(^DIC(36,"B",IBY,IBX)) Q:('IBX)  D  Q:IBQ
"RTN","IBCNSMM1",115,0)
 .S IB0=$G(^DIC(36,IBX,0))
"RTN","IBCNSMM1",116,0)
 .K IBWNR("INS")
"RTN","IBCNSMM1",117,0)
 .I $P(IB0,U,1)'=IBY Q  ;name
"RTN","IBCNSMM1",118,0)
 .I $P(IB0,U,2)'="N" Q  ;Reimb?
"RTN","IBCNSMM1",119,0)
 .;I '$P(IB0,U,3) Q  ;Sig Req.  --> removed edit, cm, 5/18/99
"RTN","IBCNSMM1",120,0)
 .I $P(IB0,U,5) Q  ;Inactive
"RTN","IBCNSMM1",121,0)
 .I $P($G(^IBE(355.2,+$P(IB0,U,13),0)),U)'="MEDICARE" Q  ;Major Cat.
"RTN","IBCNSMM1",122,0)
 .S IBWNR("INS")=IBX_U_IBY
"RTN","IBCNSMM1",123,0)
 .;
"RTN","IBCNSMM1",124,0)
 .; -- Must have Active Group Plan Category Medicare Part A and B
"RTN","IBCNSMM1",125,0)
 .;
"RTN","IBCNSMM1",126,0)
 .K IBWNR("A"),IBWNR("B")
"RTN","IBCNSMM1",127,0)
 .S IBPX=0 F  S IBPX=$O(^IBA(355.3,"B",IBX,IBPX)) Q:('IBPX)!(IBQ)  D
"RTN","IBCNSMM1",128,0)
 ..S IBP0=$G(^IBA(355.3,IBPX,0))
"RTN","IBCNSMM1",129,0)
 ..I $P(IBP0,U,11) Q  ;Inactive
"RTN","IBCNSMM1",130,0)
 ..I $P(IBP0,U,14)'="A",$P(IBP0,U,14)'="B" Q  ;Not Plan Category Part A or B 
"RTN","IBCNSMM1",131,0)
 ..S IBPGN=$TR($P(IBP0,U,3),"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBCNSMM1",132,0)
 ..I IBPGN'="PART A",IBPGN'="PART B" Q  ;excludes non PART A and PART B plans
"RTN","IBCNSMM1",133,0)
 ..S IBWNR($P(IBP0,U,14))=IBPX_U_$P(IBP0,U,3)
"RTN","IBCNSMM1",134,0)
 ..I $G(IBWNR("A")),$G(IBWNR("B")) S IBQ=1
"RTN","IBCNSMM1",135,0)
 ;
"RTN","IBCNSMM1",136,0)
 S IBX=$G(IBWNR("INS"))_U_$G(IBWNR("A"))_U_$G(IBWNR("B"))
"RTN","IBCNSMM1",137,0)
 I 'IBX S IBX="Error: Standard Medicare (WNR) Insurance Company not setup properly." G GETWNRQ
"RTN","IBCNSMM1",138,0)
 I '$P(IBX,U,3) S IBX="Error: Standard Medicare (WNR) plan PART A not setup properly." G GETWNRQ
"RTN","IBCNSMM1",139,0)
 I '$G(IBWNR("B")) S IBX="Error: Standard Medicare (WNR) plan PART B not setup properly."
"RTN","IBCNSMM1",140,0)
GETWNRQ Q IBX
"RTN","IBCNSMM2")
0^14^B15234233^B16871457
"RTN","IBCNSMM2",1,0)
IBCNSMM2 ;ALB/CMS -MEDICARE INSURANCE INTAKE (CONT) ; 18-MAY-99
"RTN","IBCNSMM2",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,602**;21-MAR-94;Build 22
"RTN","IBCNSMM2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSMM2",4,0)
 Q
"RTN","IBCNSMM2",5,0)
 ;
"RTN","IBCNSMM2",6,0)
 ;
"RTN","IBCNSMM2",7,0)
MII ; -- Ask Medicare Insurance Card questions
"RTN","IBCNSMM2",8,0)
 ;  
"RTN","IBCNSMM2",9,0)
 ;  Output Variables:
"RTN","IBCNSMM2",10,0)
 ;  IBNAME = Name of Insured
"RTN","IBCNSMM2",11,0)
 ;  IBHICN = Subscriber ID as of IB*601 could also be a MBI Number
"RTN","IBCNSMM2",12,0)
 ;  IBAEFF = Effective Date for Part A
"RTN","IBCNSMM2",13,0)
 ;  IBBEFF = Effective Date for Part B
"RTN","IBCNSMM2",14,0)
 ;  IBCOB/IBCOBI = Coordination of Benefits
"RTN","IBCNSMM2",15,0)
 ;  IBQUIT=1 User timed-out or entered ^
"RTN","IBCNSMM2",16,0)
 ;
"RTN","IBCNSMM2",17,0)
 N DIR,DTOUT,DUOUT,DIROUT,DIRUT,X,Y,IBX
"RTN","IBCNSMM2",18,0)
 ;
"RTN","IBCNSMM2",19,0)
MIIA ; -- Ask user for Information
"RTN","IBCNSMM2",20,0)
 ;
"RTN","IBCNSMM2",21,0)
 W ! S DIR("A")="NAME OF BENEFICIARY"
"RTN","IBCNSMM2",22,0)
 S IBX=$P($G(IBARR("A",1)),"^",18) I IBX="" S IBX=$P($G(IBARR("B",1)),"^",18)
"RTN","IBCNSMM2",23,0)
 S DIR("B")=$S($G(IBNAME)'="":IBNAME,IBX'="":IBX,1:$P(^DPT(DFN,0),U))
"RTN","IBCNSMM2",24,0)
 S DIR(0)="F^3:30^K:X'?1E.E1"","".1E.E X"
"RTN","IBCNSMM2",25,0)
 S DIR("?")="Enter the Name of Beneficiary (Last name, First) from the Medicare Insurance Card.  This name should be 3 to 30 characters in length."
"RTN","IBCNSMM2",26,0)
 D ^DIR K DIR
"RTN","IBCNSMM2",27,0)
 I $D(DTOUT)!$D(DUOUT) K DUOUT,DTOUT,DIROUT,DIRUT S IBQUIT=1 G MIIQ
"RTN","IBCNSMM2",28,0)
 S IBNAME=Y
"RTN","IBCNSMM2",29,0)
 ;
"RTN","IBCNSMM2",30,0)
 S DIR("A")="MEDICARE CLAIM NUMBER"
"RTN","IBCNSMM2",31,0)
 S IBX=$P($G(IBARR("A",1)),"^",3) I IBX="" S IBX=$P($G(IBARR("B",1)),"^",3)
"RTN","IBCNSMM2",32,0)
 I $G(IBHICN)'="" S DIR("B")=IBHICN
"RTN","IBCNSMM2",33,0)
 I IBX'="",'$D(DIR("B")) S DIR("B")=IBX
"RTN","IBCNSMM2",34,0)
 ;S DIR(0)="F^7:15^I '$$VALHIC^IBCNSMM($TR(X,""-"")) K X" ; IB*602
"RTN","IBCNSMM2",35,0)
 S DIR(0)="F^3:20" ;IB*602
"RTN","IBCNSMM2",36,0)
 S DIR("?")="^D HICH^IBCNSMM2"
"RTN","IBCNSMM2",37,0)
 D ^DIR K DIR
"RTN","IBCNSMM2",38,0)
 I $D(DTOUT)!$D(DUOUT) K DUOUT,DTOUT,DIROUT,DIRUT S IBQUIT=1 G MIIQ
"RTN","IBCNSMM2",39,0)
 S IBHICN=$TR(Y,"-") ; Strip off any '-'
"RTN","IBCNSMM2",40,0)
 ;
"RTN","IBCNSMM2",41,0)
 ; - don't allow editing Part A date if more than one policy
"RTN","IBCNSMM2",42,0)
 I IBPOLA,'$D(IBARR("A",1)) G MIIPB
"RTN","IBCNSMM2",43,0)
 S DIR("A")="HOSPITAL INSURANCE (PART A) EFFECTIVE DATE"
"RTN","IBCNSMM2",44,0)
 S IBX=$P($G(IBARR("A",1)),"^",9)
"RTN","IBCNSMM2",45,0)
 I $G(IBAEFF) S Y=IBAEFF D D^DIQ S DIR("B")=Y
"RTN","IBCNSMM2",46,0)
 I IBX'="",'$D(DIR("B")) S Y=IBX D D^DIQ S DIR("B")=Y
"RTN","IBCNSMM2",47,0)
 S DIR(0)="DO^::E"
"RTN","IBCNSMM2",48,0)
 S DIR("?")="Enter PART A Effective Date if shown on Medicare Insurance Card."
"RTN","IBCNSMM2",49,0)
 D ^DIR K DIR
"RTN","IBCNSMM2",50,0)
 I $D(DTOUT)!$D(DUOUT) K DUOUT,DTOUT,DIROUT,DIRUT S IBQUIT=1 G MIIQ
"RTN","IBCNSMM2",51,0)
 S IBAEFF=Y
"RTN","IBCNSMM2",52,0)
 ;
"RTN","IBCNSMM2",53,0)
MIIPB ; - don't allow editing Part B date if more than one policy
"RTN","IBCNSMM2",54,0)
 I IBPOLB,'$D(IBARR("B",1)) G MIIC
"RTN","IBCNSMM2",55,0)
 S DIR("A")="MEDICAL INSURANCE (PART B) EFFECTIVE DATE"
"RTN","IBCNSMM2",56,0)
 S IBX=$P($G(IBARR("B",1)),"^",9)
"RTN","IBCNSMM2",57,0)
 I $G(IBBEFF) S Y=IBBEFF D D^DIQ S DIR("B")=Y
"RTN","IBCNSMM2",58,0)
 I IBX'="",'$D(DIR("B")) S Y=IBX D D^DIQ S DIR("B")=Y
"RTN","IBCNSMM2",59,0)
 S DIR(0)="DO^::E"
"RTN","IBCNSMM2",60,0)
 S DIR("?")="Enter PART B Effective Date if shown on Medicare Insurance Card."
"RTN","IBCNSMM2",61,0)
 D ^DIR K DIR
"RTN","IBCNSMM2",62,0)
 I $D(DTOUT)!$D(DUOUT) K DUOUT,DTOUT,DIROUT,DIRUT S IBQUIT=1 G MIIQ
"RTN","IBCNSMM2",63,0)
 S IBBEFF=Y
"RTN","IBCNSMM2",64,0)
 ;
"RTN","IBCNSMM2",65,0)
MIIC ; - check effective dates before COB prompt
"RTN","IBCNSMM2",66,0)
 I '$G(IBAEFF),'$G(IBBEFF) S IBQUIT=1 D  G MIIQ
"RTN","IBCNSMM2",67,0)
 .W !!,*7,?5,"No data can be filed without Part A or B Effective Dates."
"RTN","IBCNSMM2",68,0)
 ;
"RTN","IBCNSMM2",69,0)
 ; - Coordination of Benefits prompt
"RTN","IBCNSMM2",70,0)
 S DIR("A")="COORDINATION OF BENEFITS: "
"RTN","IBCNSMM2",71,0)
 S IBX=$P($G(IBARR("A",1)),"^",21) I 'IBX S IBX=$P($G(IBARR("B",1)),"^",21)
"RTN","IBCNSMM2",72,0)
 I IBX S IBX=$S(IBX=1:"PRIMARY",IBX=2:"SECONDARY",3:"TERTIARY",1:"")
"RTN","IBCNSMM2",73,0)
 S DIR("B")=$S($G(IBCOB)'="":IBCOB,IBX'="":IBX,1:"PRIMARY")
"RTN","IBCNSMM2",74,0)
 S DIR(0)="SA^1:PRIMARY;2:SECONDARY;3:TERTIARY"
"RTN","IBCNSMM2",75,0)
 S DIR("?")="Enter the Coordination of Benefits as Primary, Secondary, or Tertiary."
"RTN","IBCNSMM2",76,0)
 D ^DIR K DIR
"RTN","IBCNSMM2",77,0)
 I $D(DTOUT)!$D(DUOUT) K DUOUT,DTOUT,DIROUT,DIRUT S IBQUIT=1 G MIIQ
"RTN","IBCNSMM2",78,0)
 S IBCOBI=Y,IBCOB=$S(Y=3:"TERTIARY",Y=2:"SECONDARY",1:"PRIMARY")
"RTN","IBCNSMM2",79,0)
 ;
"RTN","IBCNSMM2",80,0)
 ; -- Ask if Data Okay
"RTN","IBCNSMM2",81,0)
 S IBOK=0 K DIR D OK^IBCNSMM1 I IBOK=0 K DIR,Y G MIIA
"RTN","IBCNSMM2",82,0)
 I IBOK["^" S IBQUIT=1
"RTN","IBCNSMM2",83,0)
MIIQ Q
"RTN","IBCNSMM2",84,0)
 ;
"RTN","IBCNSMM2",85,0)
 ;
"RTN","IBCNSMM2",86,0)
HICH ; Help text for the HIC number prompt.
"RTN","IBCNSMM2",87,0)
 W !,"Enter the Medicare Claim Number (Subscriber ID) exactly as it appears" ; IB*602
"RTN","IBCNSMM2",88,0)
 W !,"on the Medicare Insurance Card, excluding special characters."
"RTN","IBCNSMM2",89,0)
 W !,"Entry must be 3-20 characters."
"RTN","IBCNSMM2",90,0)
 Q
"RTN","IBCNSP")
0^6^B77777224^B77034837
"RTN","IBCNSP",1,0)
IBCNSP ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,43,52,85,251,363,371,416,497,516,528,549,602**;21-MAR-94;Build 22
"RTN","IBCNSP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP",4,0)
% ;
"RTN","IBCNSP",5,0)
EN ; -- main entry point for IBCNS EXPANDED POLICY
"RTN","IBCNSP",6,0)
 N IB1ST
"RTN","IBCNSP",7,0)
 K VALMQUIT,IBPPOL,IBTOP
"RTN","IBCNSP",8,0)
 S IBTOP="IBCNSP"
"RTN","IBCNSP",9,0)
 D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSP",10,0)
 Q
"RTN","IBCNSP",11,0)
 ;
"RTN","IBCNSP",12,0)
HDR ; -- header code
"RTN","IBCNSP",13,0)
 N DOD,IBDOB,IBNAME,W,X,Y,Z                 ; IB*2.0*549 Added DOD
"RTN","IBCNSP",14,0)
 S IBNAME=^DPT(DFN,0)                       ; Direct global read on file 2 supported by IA 10035
"RTN","IBCNSP",15,0)
 S IBDOB=$P(IBNAME,"^",3)
"RTN","IBCNSP",16,0)
 S IBNAME=$E($P(IBNAME,U),1,20)
"RTN","IBCNSP",17,0)
 ;
"RTN","IBCNSP",18,0)
 ; IB*2.0*549 Shortened 'Expanded Policy Information For ' to 'For: ' below
"RTN","IBCNSP",19,0)
 S VALMHDR(1)="For: "_IBNAME_"  "_$P($$PT^IBEFUNC(DFN),U,2)_"  "_$$FMTE^XLFDT(IBDOB,"5DZ")
"RTN","IBCNSP",20,0)
 ;
"RTN","IBCNSP",21,0)
 ; IB*2.0*549 Added next 4 lines
"RTN","IBCNSP",22,0)
 S DOD=$$GET1^DIQ(2,DFN_",",.351,"I")
"RTN","IBCNSP",23,0)
 I DOD'="" D
"RTN","IBCNSP",24,0)
 . S DOD=$$FMTE^XLFDT(DOD,"5DZ")
"RTN","IBCNSP",25,0)
 . ;IB*2.0*602/DM display DoD properly with long patient name
"RTN","IBCNSP",26,0)
 . S VALMHDR(1)=VALMHDR(1)_"   DoD: "_DOD
"RTN","IBCNSP",27,0)
 S Z=$G(^DPT(DFN,.312,+$P(IBPPOL,U,4),0))
"RTN","IBCNSP",28,0)
 S W=$P($G(^IBA(355.3,+$P(Z,U,18),0)),U,11)
"RTN","IBCNSP",29,0)
 S Y=$E($P($G(^DIC(36,+Z,0)),U),1,20)_" Insurance Company"
"RTN","IBCNSP",30,0)
 S X="** Plan Currently "_$S(W:"Ina",1:"A")_"ctive **"
"RTN","IBCNSP",31,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,Y,48,29)
"RTN","IBCNSP",32,0)
 Q
"RTN","IBCNSP",33,0)
 ;
"RTN","IBCNSP",34,0)
INIT ; -- init variables and list array
"RTN","IBCNSP",35,0)
 K VALMQUIT
"RTN","IBCNSP",36,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSP",37,0)
 I '$D(IBPPOL) D PPOL Q:$D(VALMQUIT)
"RTN","IBCNSP",38,0)
 D BLD,HDR
"RTN","IBCNSP",39,0)
 Q
"RTN","IBCNSP",40,0)
 ;
"RTN","IBCNSP",41,0)
BLD ; -- list builder
"RTN","IBCNSP",42,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPDX",$J)
"RTN","IBCNSP",43,0)
 D KILL^VALM10()
"RTN","IBCNSP",44,0)
 N IBCDFND,IBCDFND1,IBCDFND2,IBCDFND4,IBCDFND5,IBCDFND7
"RTN","IBCNSP",45,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,U,4),0)),IBCDFND1=$G(^(1)),IBCDFND2=$G(^(2)),IBCDFND4=$G(^(4)),IBCDFND5=$G(^(5)),IBCDFND7=$G(^(7))
"RTN","IBCNSP",46,0)
 ; MRD;IB*2.0*516 - Use $$ZND^IBCNS1 to pull zero node of 2.312.
"RTN","IBCNSP",47,0)
 S IBCDFND=$$ZND^IBCNS1(DFN,$P(IBPPOL,U,4))
"RTN","IBCNSP",48,0)
 S IBCPOL=+$P(IBCDFND,U,18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,U,4)
"RTN","IBCNSP",49,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,U,18),0)),IBCPOLD1=$G(^(1))
"RTN","IBCNSP",50,0)
 S IBCPOLD2=$G(^IBA(355.3,+$G(IBCPOL),6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSP",51,0)
 S IBCPOLDL=$G(^IBA(355.3,+$G(IBCPOL),2))  ;IB*2*497  new group name and group number locations
"RTN","IBCNSP",52,0)
 ;
"RTN","IBCNSP",53,0)
 D INS^IBCNSP0                      ; insurance company
"RTN","IBCNSP",54,0)
 D POLICY^IBCNSP0                   ; plan information
"RTN","IBCNSP",55,0)
 D UR                               ; utilization review info
"RTN","IBCNSP",56,0)
 D EFFECT                           ; effective dates & source of info
"RTN","IBCNSP",57,0)
 D SUBSC^IBCNSP01                   ; subscriber info
"RTN","IBCNSP",58,0)
 D EMP                              ; subscriber's employer info
"RTN","IBCNSP",59,0)
 D PRV^IBCNSP01                     ; subscriber's provider contact info ;IB*2*497
"RTN","IBCNSP",60,0)
 D SPON^IBCNSP0                     ; insured person's info
"RTN","IBCNSP",61,0)
 D ID^IBCNSP01                      ; ins co ID numbers (IB*2*371)
"RTN","IBCNSP",62,0)
 D PLIM                             ; plan coverage limitations
"RTN","IBCNSP",63,0)
 D VER^IBCNSP01                     ; user/verifier/editor info
"RTN","IBCNSP",64,0)
 ;
"RTN","IBCNSP",65,0)
 ;IB*2.0*549 Removed next line
"RTN","IBCNSP",66,0)
 ;D CONTACT^IBCNSP0                  ; last insurance contact
"RTN","IBCNSP",67,0)
 D COMMENT                          ; comments - policy & plan
"RTN","IBCNSP",68,0)
 D RIDER^IBCNSP01                   ; policy rider info
"RTN","IBCNSP",69,0)
 ;
"RTN","IBCNSP",70,0)
 S VALMCNT=+$O(^TMP("IBCNSVP",$J,""),-1)
"RTN","IBCNSP",71,0)
 Q
"RTN","IBCNSP",72,0)
 ;
"RTN","IBCNSP",73,0)
COMMENT ; -- Comment region
"RTN","IBCNSP",74,0)
 ; Input:   DFN                 - IEN of the currently selected patient
"RTN","IBCNSP",75,0)
 ;          IBCPOL              -
"RTN","IBCNSP",76,0)
 ;          IBPPOL              - O node of the selected Patient Policy
"RTN","IBCNSP",77,0)
 ;          ^TMP("IBCNSVP",$J)  - Current global Array of display lines
"RTN","IBCNSP",78,0)
 ; Output:  IB1ST("COMMENT")    - 1st line of comments display
"RTN","IBCNSP",79,0)
 ;          ^TMP("IBCNSVP",$J)  - Updated global Array of display lines
"RTN","IBCNSP",80,0)
 ;
"RTN","IBCNSP",81,0)
 ;IB*2.0*549 Moved Group Plan Comment above Patient Policy Comment. Changed
"RTN","IBCNSP",82,0)
 ;           Patient Policy Comment to display the two most recent comments
"RTN","IBCNSP",83,0)
 ;           in the patient policy comment multiple (2.342,1.18)
"RTN","IBCNSP",84,0)
 N COMDT,COMIEN,COMCTR,COMSTOP,IBI,IBIIEN,IBL,OFFSET,XX
"RTN","IBCNSP",85,0)
 S IBL=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",86,0)
 S IB1ST("COMMENT")=IBL
"RTN","IBCNSP",87,0)
 ;
"RTN","IBCNSP",88,0)
 ; Display Group Plan Comment 
"RTN","IBCNSP",89,0)
 D SET(IBL,OFFSET," Comment -- Group Plan ",IORVON,IORVOFF)
"RTN","IBCNSP",90,0)
 S IBI=0
"RTN","IBCNSP",91,0)
 F  S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:IBI<1  D
"RTN","IBCNSP",92,0)
 . S IBL=IBL+1
"RTN","IBCNSP",93,0)
 . D SET(IBL,OFFSET," "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSP",94,0)
 S IBL=IBL+1
"RTN","IBCNSP",95,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",96,0)
 ;
"RTN","IBCNSP",97,0)
 ; Display Last two Patient Policy Comments
"RTN","IBCNSP",98,0)
 S IBIIEN=$P(IBPPOL,"^",4),IBL=IBL+1
"RTN","IBCNSP",99,0)
 D SET(IBL,OFFSET," Comment -- Patient Policy ",IORVON,IORVOFF)
"RTN","IBCNSP",100,0)
 S IBL=IBL+1,XX=" Dt Entered  Entered By                Method     Person Contacted"
"RTN","IBCNSP",101,0)
 S XX=XX_$J("",78-$L(XX))
"RTN","IBCNSP",102,0)
 D SET(IBL,OFFSET,XX,IOUON,IOUOFF)
"RTN","IBCNSP",103,0)
 S COMDT="",(COMCTR,COMSTOP)=0
"RTN","IBCNSP",104,0)
 F  D  Q:(COMDT="")!COMSTOP
"RTN","IBCNSP",105,0)
 . S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT),-1)
"RTN","IBCNSP",106,0)
 . Q:COMDT=""
"RTN","IBCNSP",107,0)
 . S COMIEN=""
"RTN","IBCNSP",108,0)
 . F  D  Q:(COMIEN="")!COMSTOP
"RTN","IBCNSP",109,0)
 . . S COMIEN=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,COMIEN),-1)
"RTN","IBCNSP",110,0)
 . . Q:COMIEN=""
"RTN","IBCNSP",111,0)
 . . S COMCTR=COMCTR+1
"RTN","IBCNSP",112,0)
 . . I COMCTR>2 S COMSTOP=1 Q
"RTN","IBCNSP",113,0)
 . . I COMCTR=2 D
"RTN","IBCNSP",114,0)
 . . . S IBL=IBL+1
"RTN","IBCNSP",115,0)
 . . . D SET(IBL,OFFSET," ")
"RTN","IBCNSP",116,0)
 . . D DISPPPC(.IBL,DFN,IBIIEN,COMIEN)          ; Display Patient Policy Comment
"RTN","IBCNSP",117,0)
 ;
"RTN","IBCNSP",118,0)
 ; Add two blank lines at end
"RTN","IBCNSP",119,0)
 S IBL=IBL+1
"RTN","IBCNSP",120,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",121,0)
 S IBL=IBL+1
"RTN","IBCNSP",122,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",123,0)
 Q
"RTN","IBCNSP",124,0)
 ;
"RTN","IBCNSP",125,0)
DISPPPC(IBL,DFN,IBIIEN,COMIEN) ; Display one Patient Policy Comment
"RTN","IBCNSP",126,0)
 ;IB*2.0*549 - Added sub-routine
"RTN","IBCNSP",127,0)
 ; Input:   IBL                 - Current Display Line Counter
"RTN","IBCNSP",128,0)
 ;          DFN                 - IEN of the currently selected patient
"RTN","IBCNSP",129,0)
 ;          IBIIEN              - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNSP",130,0)
 ;                                multiple IEN of the selected patient policy
"RTN","IBCNSP",131,0)
 ;          COMIEN              - ^DPT(DFN,.312,IBIIEN,13,COMIEN,0) Where 
"RTN","IBCNSP",132,0)
 ;                                COMIEN is the multiple IEN of the selected
"RTN","IBCNSP",133,0)
 ;                                Patient Policy Comment
"RTN","IBCNSP",134,0)
 ;          ^TMP("IBCNSVP",$J)  - Current global Array of display lines
"RTN","IBCNSP",135,0)
 ; Output:  IBL                 - Updated Display Line Counter
"RTN","IBCNSP",136,0)
 ;          ^TMP("IBCNSVP",$J)  - Updated global Array of display lines
"RTN","IBCNSP",137,0)
 N COMDATA,LINE,XX,ZZ
"RTN","IBCNSP",138,0)
 S COMDATA=$$GETONEC^IBCNCH2(DFN,IBIIEN,COMIEN,0,77,0,1)
"RTN","IBCNSP",139,0)
 S LINE=$P(COMDATA,"^",1)_"    "
"RTN","IBCNSP",140,0)
 S XX=$P(COMDATA,"^",2),ZZ=$J("",26-$L(XX))
"RTN","IBCNSP",141,0)
 S LINE=LINE_XX_ZZ
"RTN","IBCNSP",142,0)
 S XX=$P(COMDATA,"^",4),ZZ=$J("",11-$L(XX))
"RTN","IBCNSP",143,0)
 S LINE=LINE_XX_ZZ_$P(COMDATA,"^",3),IBL=IBL+1
"RTN","IBCNSP",144,0)
 D SET(IBL,OFFSET,LINE)
"RTN","IBCNSP",145,0)
 S IBL=IBL+1,LINE=" "_$P(COMDATA,"^",8)
"RTN","IBCNSP",146,0)
 D SET(IBL,OFFSET,LINE)
"RTN","IBCNSP",147,0)
 Q
"RTN","IBCNSP",148,0)
 ;
"RTN","IBCNSP",149,0)
EFFECT ; -- Effective date region
"RTN","IBCNSP",150,0)
 N START,OFFSET
"RTN","IBCNSP",151,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-6  ;ib*2*497 lines need to be displayed alongside UR region
"RTN","IBCNSP",152,0)
 S OFFSET=45
"RTN","IBCNSP",153,0)
 D SET(START,OFFSET-4," Effective Dates & Source ",IORVON,IORVOFF)
"RTN","IBCNSP",154,0)
 D SET(START+1,OFFSET," Effective Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,8)))
"RTN","IBCNSP",155,0)
 D SET(START+2,OFFSET,"Expiration Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,4)))
"RTN","IBCNSP",156,0)
 D SET(START+3,OFFSET," Source of Info: "_$$EXPAND^IBTRE(2.312,1.09,$P($G(IBCDFND1),U,9)))
"RTN","IBCNSP",157,0)
 ;
"RTN","IBCNSP",158,0)
 ;IB*2.0*549 Changed OFFSET-4 to OFFSET-8
"RTN","IBCNSP",159,0)
 ;           Changed 'Policy Not Billable' to 'Stop Policy From Billing'
"RTN","IBCNSP",160,0)
 D SET(START+4,OFFSET-9,"Stop Policy From Billing: "_$S($P($G(^DPT(DFN,.312,IBCDFN,3)),"^",4):"YES",1:"NO"))
"RTN","IBCNSP",161,0)
 Q
"RTN","IBCNSP",162,0)
 ;
"RTN","IBCNSP",163,0)
UR ; -- UR of insurance region
"RTN","IBCNSP",164,0)
 N START,OFFSET
"RTN","IBCNSP",165,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2  ;IB*2*497
"RTN","IBCNSP",166,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSP",167,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,U,5)))
"RTN","IBCNSP",168,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,U,12)))
"RTN","IBCNSP",169,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,U,6)))
"RTN","IBCNSP",170,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,U,7)))
"RTN","IBCNSP",171,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,U,8)))
"RTN","IBCNSP",172,0)
 D SET(START+6,2," ")
"RTN","IBCNSP",173,0)
 Q
"RTN","IBCNSP",174,0)
EMP ; -- Insurance Employer Region   
"RTN","IBCNSP",175,0)
 ; ib*2*497 move employer lines around
"RTN","IBCNSP",176,0)
 N OFFSET,START,IBADD,COL2
"RTN","IBCNSP",177,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",178,0)
 D SET(START,OFFSET," Subscriber's Employer Information ",IORVON,IORVOFF)
"RTN","IBCNSP",179,0)
 D SET(START+1,OFFSET,$$RJ^XLFSTR(" Employment Status: ",20)_$$EXPAND^IBTRE(2.312,2.11,$P(IBCDFND2,U,11)))
"RTN","IBCNSP",180,0)
 S COL2=START+1
"RTN","IBCNSP",181,0)
 D SET(START+2,OFFSET,$$RJ^XLFSTR("Employer: ",20)_$P(IBCDFND2,U,9))
"RTN","IBCNSP",182,0)
 D SET(START+3,OFFSET,$$RJ^XLFSTR("Street: ",20)_$P(IBCDFND2,U,2)) S IBADD=1
"RTN","IBCNSP",183,0)
 I $P(IBCDFND2,U,3)'="" D SET(START+4,OFFSET,$$RJ^XLFSTR("Street 2: ",20)_$P(IBCDFND2,U,3)) S IBADD=2
"RTN","IBCNSP",184,0)
 I $P(IBCDFND2,U,4)'="" D SET(START+5,OFFSET,$$RJ^XLFSTR("Street 3: ",20)_$P(IBCDFND2,U,4)) S IBADD=3
"RTN","IBCNSP",185,0)
 D SET(START+3+IBADD,OFFSET,$$RJ^XLFSTR("City/State: ",20)_$E($P(IBCDFND2,U,5),1,15)_$S($P(IBCDFND2,U,5)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFND2,U,6),0)),U,2)_" "_$E($P(IBCDFND2,U,7),1,5))
"RTN","IBCNSP",186,0)
 D SET(START+4+IBADD,OFFSET,$$RJ^XLFSTR("Phone: ",20)_$P(IBCDFND2,U,8))
"RTN","IBCNSP",187,0)
 D SET(START+5+IBADD,OFFSET," ")  ; ib*2*497  only 1 blank line to end the section
"RTN","IBCNSP",188,0)
 ;
"RTN","IBCNSP",189,0)
 S START=COL2,OFFSET=40
"RTN","IBCNSP",190,0)
 D SET(START,OFFSET,"Emp Sponsored Plan: "_$S(+$P(IBCDFND2,U,10):"Yes",1:"No"))
"RTN","IBCNSP",191,0)
 D SET(START+1,OFFSET,"Claims to Employer: "_$S(+IBCDFND2:"Yes, Send to Employer",1:"No, Send to Insurance Company"))
"RTN","IBCNSP",192,0)
 D SET(START+2,OFFSET,"   Retirement Date: "_$$DAT1^IBOUTL($P(IBCDFND2,U,12)))
"RTN","IBCNSP",193,0)
 ;
"RTN","IBCNSP",194,0)
EMPQ Q
"RTN","IBCNSP",195,0)
 ;
"RTN","IBCNSP",196,0)
PLIM ; plan coverage limitations/plan limitation category display
"RTN","IBCNSP",197,0)
 N START,END S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP",198,0)
 S IB1ST("PLIM")=START
"RTN","IBCNSP",199,0)
 D LIMBLD^IBCNSC41(START,2)
"RTN","IBCNSP",200,0)
 S END=$O(^TMP("IBCNSVP",$J,""),-1)  ; last line constructed
"RTN","IBCNSP",201,0)
 D SET(END+1,2," ")    ; 2 blank lines to end this section
"RTN","IBCNSP",202,0)
 D SET(END+2,2," ")
"RTN","IBCNSP",203,0)
PLIMX ;
"RTN","IBCNSP",204,0)
 Q
"RTN","IBCNSP",205,0)
 ; 
"RTN","IBCNSP",206,0)
HELP ; -- help code
"RTN","IBCNSP",207,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSP",208,0)
 Q
"RTN","IBCNSP",209,0)
 ;
"RTN","IBCNSP",210,0)
EXIT ; -- exit code
"RTN","IBCNSP",211,0)
 K IBPPOL,VALMQUIT,IBCNS,IBCDFN,IBCPOL,IBCPOLD,IBCPOLD1,IBCPOLD2,IBCPOLDL,IBCDFND,IBCDFND1,IBCDFND2,IBVPCLBG,IBVPCLEN
"RTN","IBCNSP",212,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSP",213,0)
 Q
"RTN","IBCNSP",214,0)
 ;
"RTN","IBCNSP",215,0)
EXPND ; -- expand code
"RTN","IBCNSP",216,0)
 Q
"RTN","IBCNSP",217,0)
 ;
"RTN","IBCNSP",218,0)
PPOL ; -- select patient, select policy
"RTN","IBCNSP",219,0)
 I '$D(DFN) D  G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",220,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP",221,0)
 .S DFN=+Y
"RTN","IBCNSP",222,0)
 I $G(DFN)<1 S VALMQUIT="" G PPOLQ
"RTN","IBCNSP",223,0)
 ;
"RTN","IBCNSP",224,0)
 I '$O(^DPT(DFN,.312,0)) W !!,"Patient doesn't have Insurance" K DFN G PPOL
"RTN","IBCNSP",225,0)
 ;
"RTN","IBCNSP",226,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQMN",DIC("A")="Select Patient Policy: "
"RTN","IBCNSP",227,0)
 D ^DIC I +Y<1 S VALMQUIT=""
"RTN","IBCNSP",228,0)
 G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",229,0)
 S IBPPOL="^2^"_DFN_U_+Y_U_$G(^DPT(DFN,.312,+Y,0))
"RTN","IBCNSP",230,0)
PPOLQ K DIC Q
"RTN","IBCNSP",231,0)
 ;
"RTN","IBCNSP",232,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP",233,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP",234,0)
 Q
"RTN","IBCNSP",235,0)
 ;
"RTN","IBCNSP",236,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP",237,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSP",238,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP",239,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP",240,0)
 W:'(LINE#5) "."
"RTN","IBCNSP",241,0)
 Q
"RTN","IBCNSP",242,0)
 ;
"RTN","IBCNSUR")
0^7^B131418993^B24782605
"RTN","IBCNSUR",1,0)
IBCNSUR ;ALB/CPM/CMS - MOVE SUBSCRIBERS TO DIFFERENT PLAN ;09-SEP-96
"RTN","IBCNSUR",2,0)
 ;;2.0;INTEGRATED BILLING;**103,276,506,516,549,602**;21-MAR-94;Build 22
"RTN","IBCNSUR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR",4,0)
 Q
"RTN","IBCNSUR",5,0)
 ;
"RTN","IBCNSUR",6,0)
EN ; Entry point from option. Main processing loop.
"RTN","IBCNSUR",7,0)
 I $S('($D(DUZ)#2):1,'$D(^VA(200,+DUZ,0)):1,1:0) W !!?3,"The variable DUZ must be set to an active user code before continuing." G ENQ
"RTN","IBCNSUR",8,0)
 W !!,?5,"MOVE SUBSCRIBERS OF ONE PLAN TO ANOTHER PLAN"
"RTN","IBCNSUR",9,0)
 W !,?5,"This option may be used to move subscribers from a selected Plan"
"RTN","IBCNSUR",10,0)
 W !,?5,"to a different Plan. The plans may be associated with the same"
"RTN","IBCNSUR",11,0)
 W !,?5,"Insurance Company or a different one. Plan and Annual Benefit"
"RTN","IBCNSUR",12,0)
 W !,?5,"information may be moved as well. Users of this option should"
"RTN","IBCNSUR",13,0)
 W !,?5,"be knowledgeable of the VistA Patient Insurance management options."
"RTN","IBCNSUR",14,0)
 W !
"RTN","IBCNSUR",15,0)
 W !,?5,"This option also gives the user the option to expire the old plan or"
"RTN","IBCNSUR",16,0)
 W !,?5,"replace it completely in the patient insurance profile.  The reason"
"RTN","IBCNSUR",17,0)
 W !,?5,"to expire the old plan is intended for use when Insurance groups change"
"RTN","IBCNSUR",18,0)
 W !,?5,"PBMs for processing electronic Pharmacy claims.  By leaving the old"
"RTN","IBCNSUR",19,0)
 W !,?5,"plan information intact (i.e. do not replace), the user will be able"
"RTN","IBCNSUR",20,0)
 W !,?5,"to monitor PBM changes  that affect the electronic Pharmacy claims."
"RTN","IBCNSUR",21,0)
 ;
"RTN","IBCNSUR",22,0)
 W !!,$TR($J("",75)," ","-")
"RTN","IBCNSUR",23,0)
 S IBSTOP=0 F  D PROC^IBCNSUR1 Q:IBSTOP
"RTN","IBCNSUR",24,0)
ENQ K IBSTOP
"RTN","IBCNSUR",25,0)
 Q
"RTN","IBCNSUR",26,0)
 ;
"RTN","IBCNSUR",27,0)
PROC ; - Process continuation from IBCNSUR1. 
"RTN","IBCNSUR",28,0)
 ; - display old plan attributes; allow new plan to be edited
"RTN","IBCNSUR",29,0)
 D PL^IBCNSUR2
"RTN","IBCNSUR",30,0)
 R !!,?10,"Press any key to continue.    ",IBX:DTIME
"RTN","IBCNSUR",31,0)
 ;
"RTN","IBCNSUR",32,0)
 ; - display coverage limitations; allow add/edit of plan 2 limitations
"RTN","IBCNSUR",33,0)
 D LIM^IBCNSUR2
"RTN","IBCNSUR",34,0)
 ;
"RTN","IBCNSUR",35,0)
 I $P($G(^IBA(355.3,IBP1,0)),"^",11) W !!,"Please note that ",IBC1N,"'s",!,"plan, subscribers were moved from, is already inactive." G PROCDP
"RTN","IBCNSUR",36,0)
 ;
"RTN","IBCNSUR",37,0)
 ; - does the user wish to inactivate the old plan?
"RTN","IBCNSUR",38,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to inactivate "_IBC1N_"'s plan subscribers were moved from"
"RTN","IBCNSUR",39,0)
 S DIR("?")="If you wish to inactivate the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",40,0)
 D ^DIR K DIR I 'Y W !," <The old plan is still active>" G PROCQ
"RTN","IBCNSUR",41,0)
 ;
"RTN","IBCNSUR",42,0)
 D IRACT^IBCNSJ(IBP1,1) W !!,"The plan has been inactivated."
"RTN","IBCNSUR",43,0)
 ;
"RTN","IBCNSUR",44,0)
PROCDP ; - does the user wish to delete the old plan?
"RTN","IBCNSUR",45,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to delete this plan"
"RTN","IBCNSUR",46,0)
 S DIR("?")="If you wish to delete the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",47,0)
 D ^DIR K DIR I 'Y G PROCQ
"RTN","IBCNSUR",48,0)
 ;
"RTN","IBCNSUR",49,0)
 D DEL^IBCNSJ(IBP1) W !!,"The plan has been deleted."
"RTN","IBCNSUR",50,0)
 ;
"RTN","IBCNSUR",51,0)
PROCQ Q
"RTN","IBCNSUR",52,0)
 ;
"RTN","IBCNSUR",53,0)
 ;
"RTN","IBCNSUR",54,0)
SEL(IBNP) ; Select a company and plan.
"RTN","IBCNSUR",55,0)
 ;   Input:     IBNP  --  If set to 1, allows adding a new plan and
"RTN","IBCNSUR",56,0)
 ;                    --  Screen Inactive Companies
"RTN","IBCNSUR",57,0)
 ;                    --  If set to 0, must have at least one group plan
"RTN","IBCNSUR",58,0)
 ;  Output:   IBCNS  --  Pointer to selected company in file #36
"RTN","IBCNSUR",59,0)
 ;           IBPLAN  --  Pointer to selected/added plan in file #355.3
"RTN","IBCNSUR",60,0)
 ;           IBQUIT  --  Set to 1 if the user wants to quit.
"RTN","IBCNSUR",61,0)
 ;
"RTN","IBCNSUR",62,0)
 N X,Y K DIC,DIR
"RTN","IBCNSUR",63,0)
 S DIC(0)="QEAMZ",DIC="^DIC(36,"
"RTN","IBCNSUR",64,0)
 I 'IBNP S DIC("S")="I $$ANYGP^IBCNSJ(+Y,0,1)"
"RTN","IBCNSUR",65,0)
 I IBNP S DIC("S")="I '$P($G(^DIC(36,+Y,0)),U,5)"
"RTN","IBCNSUR",66,0)
 S DIC("A")="Select INSURANCE COMPANY: "
"RTN","IBCNSUR",67,0)
 D ^DIC K DIC S IBCNS=+Y
"RTN","IBCNSUR",68,0)
 I Y<0 W "   <No Insurance Company selected>" S IBQUIT=1 G SELQ
"RTN","IBCNSUR",69,0)
 ;
"RTN","IBCNSUR",70,0)
 ; - if a new plan may be added, allow adding
"RTN","IBCNSUR",71,0)
 I IBNP D  I (IBPLAN)!(IBQUIT) G SELQ
"RTN","IBCNSUR",72,0)
 .W !!,"You may add a new Plan at this time or select an existing Plan."
"RTN","IBCNSUR",73,0)
 .; IB*2.0*506 added IBKEY parameter (4th) to the NEW^IBCNSJ3 call (check user's security keys)
"RTN","IBCNSUR",74,0)
 .D NEW^IBCNSJ3(IBCNS,.IBPLAN,1,1)
"RTN","IBCNSUR",75,0)
 .I 'IBPLAN,'$$ANYGP^IBCNSJ(+IBCNS,0,1) W !!,*7,"Insurance Company receiving subscribers must have a Plan." S IBQUIT=1
"RTN","IBCNSUR",76,0)
 ;
"RTN","IBCNSUR",77,0)
 ; - see if user wants to select the plan
"RTN","IBCNSUR",78,0)
 W !!,"You may select an existing Plan from a list or enter a specific Plan.",!
"RTN","IBCNSUR",79,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you wish to enter a specific plan"
"RTN","IBCNSUR",80,0)
 S DIR("?")="The look-up facility to select a group plan has been enhanced to use the List Manager.  Enter 'NO' if you wish to select a plan from this look-up, or 'YES' to directly enter a plan."
"RTN","IBCNSUR",81,0)
 D ^DIR K DIR I $D(DIRUT) S IBQUIT=1 G SELQ
"RTN","IBCNSUR",82,0)
 ;
"RTN","IBCNSUR",83,0)
 ; - invoke the plan look-up
"RTN","IBCNSUR",84,0)
 I 'Y D  G SELQ
"RTN","IBCNSUR",85,0)
 . N IBTITLE
"RTN","IBCNSUR",86,0)
 . S IBTITLE="Group Plan Lookup"
"RTN","IBCNSUR",87,0)
 . W "   ..."
"RTN","IBCNSUR",88,0)
 . S IBPLAN=0
"RTN","IBCNSUR",89,0)
 . D LKP^IBCNSU2(IBCNS,0,0,.IBPLAN,0,1,IBTITLE)
"RTN","IBCNSUR",90,0)
 . I 'IBPLAN W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",91,0)
 ;
"RTN","IBCNSUR",92,0)
 ; - allow a FileMan look-up
"RTN","IBCNSUR",93,0)
 ; MRD;IB*2.0*516 - Display new Group Name and Number fields.
"RTN","IBCNSUR",94,0)
 S DIC("A")="Select a GROUP PLAN: "
"RTN","IBCNSUR",95,0)
 S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I +^(0)=IBCNS,$P(^(0),U,2)"
"RTN","IBCNSUR",96,0)
 ;S DIC("W")="N IBX S IBX=$G(^(0)) W ""   Name: "",$E($S($P(IBX,U,3)]"""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""   Number: "",$S($P(IBX,U,4)]"""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSUR",97,0)
 S DIC("W")="N IBX S IBX=$G(^(2)) W ""   Name: "",$E($S($P(IBX,U,1)]"""":$P(IBX,U,1),1:""<none>"")_$J("""",20),1,20),""   Number: "",$E($S($P(IBX,U,2)]"""":$P(IBX,U,2),1:""<none>""),1,14)"
"RTN","IBCNSUR",98,0)
 D ^DIC K DIC S IBPLAN=+Y
"RTN","IBCNSUR",99,0)
 I Y<0 W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",100,0)
 ;
"RTN","IBCNSUR",101,0)
SELQ K DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSUR",102,0)
 Q
"RTN","IBCNSUR",103,0)
 ;
"RTN","IBCNSUR",104,0)
EXPGRP ; EP for [IBCN EXPIRE GROUP SUBSCRIBERS]
"RTN","IBCNSUR",105,0)
 ; IB*2.0*602/DM implement expire group plan 
"RTN","IBCNSUR",106,0)
 N X,Y,DIC,DIR,DTA,ERR,REF,IBLN,XMDUZ,XMTEXT,XMSUB,XMY
"RTN","IBCNSUR",107,0)
 N IBQUIT,IBCNS,IBPLAN,IBSUB,IBEXP,DFN,IBIPOL,IBIENWK
"RTN","IBCNSUR",108,0)
 N IBINSNM,IBGRPNM,IBGRPNO,IBEXPOK,IBEXPERR,IBSUPRES,IBCBI
"RTN","IBCNSUR",109,0)
 ;
"RTN","IBCNSUR",110,0)
 W !!,?5,"EXPIRE ALL SUBSCRIBERS WITHIN A GROUP PLAN"
"RTN","IBCNSUR",111,0)
 W !,?5,"You can use this option to specify an expiration date for all subscriber"
"RTN","IBCNSUR",112,0)
 W !,?5,"policies in a group plan without moving the subscribers to another group"
"RTN","IBCNSUR",113,0)
 W !,?5,"plan. If the group plan status is currently ""active"", you can also choose"
"RTN","IBCNSUR",114,0)
 W !,?5,"to ""inactivate"" the group plan."
"RTN","IBCNSUR",115,0)
 W !!,$TR($J("",75)," ","-")
"RTN","IBCNSUR",116,0)
 S IBQUIT=1
"RTN","IBCNSUR",117,0)
 ;
"RTN","IBCNSUR",118,0)
NXTGRP ; EP for next expire group process
"RTN","IBCNSUR",119,0)
 K ^TMP($J,"IBCNSUR") ; subscribers
"RTN","IBCNSUR",120,0)
 K ^TMP($J,"IBCNSURBLL") ; bulletin  
"RTN","IBCNSUR",121,0)
 I 'IBQUIT D
"RTN","IBCNSUR",122,0)
 . W !!,"=========================================="
"RTN","IBCNSUR",123,0)
 . W !,"EXPIRE ALL SUBSCRIBERS WITHIN A GROUP PLAN"
"RTN","IBCNSUR",124,0)
 . W !,"==========================================",!
"RTN","IBCNSUR",125,0)
 ; get insco and plan
"RTN","IBCNSUR",126,0)
 S IBQUIT=0
"RTN","IBCNSUR",127,0)
 D SEL^IBCNSUR(0) I IBQUIT Q
"RTN","IBCNSUR",128,0)
 ;
"RTN","IBCNSUR",129,0)
 ; Make sure plan has at least one subscriber
"RTN","IBCNSUR",130,0)
 I '$$SUBS^IBCNSJ(IBCNS,IBPLAN,0,,1) W !!,?5,*7,"* This group plan has no subscribers!",! G NXTGRP
"RTN","IBCNSUR",131,0)
 ;
"RTN","IBCNSUR",132,0)
 S IBINSNM=$$GET1^DIQ(36,IBCNS_",","NAME")
"RTN","IBCNSUR",133,0)
 S IBGRPNM=$$GET1^DIQ(355.3,IBPLAN_",","GROUP NAME")
"RTN","IBCNSUR",134,0)
 S IBGRPNO=$$GET1^DIQ(355.3,IBPLAN_",","GROUP NUMBER")
"RTN","IBCNSUR",135,0)
 ;
"RTN","IBCNSUR",136,0)
 W !!,"Collecting Subscribers ..."
"RTN","IBCNSUR",137,0)
 S IBSUB=$$SUBS^IBCNSJ(IBCNS,IBPLAN,0,"^TMP($J,""IBCNSUR"")")
"RTN","IBCNSUR",138,0)
 W !!,"This group plan has "_+IBSUB_" subscribers. All subscribers will be expired.",!
"RTN","IBCNSUR",139,0)
 S DIR(0)="Y"
"RTN","IBCNSUR",140,0)
 S DIR("A")="Do you want to expire all subscribers' policies for this plan"
"RTN","IBCNSUR",141,0)
 S DIR("?",1)="You will be asked for an expiration date to terminate the attached policies."
"RTN","IBCNSUR",142,0)
 S DIR("?",2)="You will have an opportunity to stop if desired."
"RTN","IBCNSUR",143,0)
 S DIR("?")="Enter 'Yes' to continue, or 'No' to stop the process now."
"RTN","IBCNSUR",144,0)
 D ^DIR K DIR
"RTN","IBCNSUR",145,0)
 I 'Y!$D(DIRUT) G NXTGRP
"RTN","IBCNSUR",146,0)
 ;
"RTN","IBCNSUR",147,0)
 W !
"RTN","IBCNSUR",148,0)
 ; get the expiration date
"RTN","IBCNSUR",149,0)
 S DIR(0)="D",DIR("A")="Enter expiration date (applies to all subscribers in this plan)"
"RTN","IBCNSUR",150,0)
 S DIR("?")="Each active policy will be expired with the expiration date entered."
"RTN","IBCNSUR",151,0)
 D ^DIR K DIR
"RTN","IBCNSUR",152,0)
 I 'Y!$D(DIRUT) G NXTGRP
"RTN","IBCNSUR",153,0)
 S IBEXP=Y
"RTN","IBCNSUR",154,0)
 ;
"RTN","IBCNSUR",155,0)
 W !!,"You selected to expire "_+IBSUB_" subscriber(s) with Expiration Date "_$$FMTE^XLFDT(IBEXP)_" for:"
"RTN","IBCNSUR",156,0)
 W !,?5,"Insurance Company "_IBINSNM
"RTN","IBCNSUR",157,0)
 W !,?5,"Plan Name "_IBGRPNM_"    Number "_IBGRPNO
"RTN","IBCNSUR",158,0)
 W !!,"Please Note that the policy will be EXPIRED in the patient profile!!",!
"RTN","IBCNSUR",159,0)
 ; 
"RTN","IBCNSUR",160,0)
 S DIR(0)="Y",DIR("A")="Okay to continue"
"RTN","IBCNSUR",161,0)
 S DIR("?",1)="If you wish to expire the policies for these subscribers, enter 'Yes'."
"RTN","IBCNSUR",162,0)
 S DIR("?")="Otherwise, enter 'No' to exit."
"RTN","IBCNSUR",163,0)
 D ^DIR K DIR
"RTN","IBCNSUR",164,0)
 I 'Y!$D(DIRUT) G NXTGRP
"RTN","IBCNSUR",165,0)
 ;
"RTN","IBCNSUR",166,0)
 ; expire the plan subscribers
"RTN","IBCNSUR",167,0)
 ; as we process the policies, we'll set the ^TMP nodes to 'O'k or 'E'rror
"RTN","IBCNSUR",168,0)
 W !!,"Expiring Policies...",!
"RTN","IBCNSUR",169,0)
 S IBSUPRES=1 ; tell COVERED^IBCNSM31 to be quiet
"RTN","IBCNSUR",170,0)
 S (IBEXPOK,IBEXPERR)=0
"RTN","IBCNSUR",171,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"IBCNSUR",DFN)) Q:'DFN  D
"RTN","IBCNSUR",172,0)
 . S IBIPOL=0 F  S IBIPOL=$O(^TMP($J,"IBCNSUR",DFN,IBIPOL)) Q:IBIPOL=""  D
"RTN","IBCNSUR",173,0)
 .. S IBIENWK=IBIPOL_","_DFN_","
"RTN","IBCNSUR",174,0)
 .. Q:$$GET1^DIQ(2.312,IBIENWK,"GROUP PLAN","I")'=IBPLAN
"RTN","IBCNSUR",175,0)
 .. Q:+$$GET1^DIQ(2.312,IBIENWK,"INSURANCE EXPIRATION","I")
"RTN","IBCNSUR",176,0)
 .. I $$GET1^DIQ(2.312,IBIENWK,"EFFECTIVE DATE OF POLICY","I")>IBEXP S ^TMP($J,"IBCNSUR",DFN,IBIPOL)="E",IBEXPERR=IBEXPERR+1 Q
"RTN","IBCNSUR",177,0)
 .. S IBCBI=$$GET1^DIQ(2,DFN_",","COVERED BY HEALTH INSURANCE?","I")
"RTN","IBCNSUR",178,0)
 .. K DTA,ERR
"RTN","IBCNSUR",179,0)
 .. S DTA(2.312,IBIENWK,3)=IBEXP ; set the expiration date
"RTN","IBCNSUR",180,0)
 .. S DTA(2.312,IBIENWK,1.05)=$$NOW^XLFDT() ; last edited
"RTN","IBCNSUR",181,0)
 .. S DTA(2.312,IBIENWK,1.06)=DUZ ; by
"RTN","IBCNSUR",182,0)
 .. D FILE^DIE("","DTA","ERR")
"RTN","IBCNSUR",183,0)
 .. I $D(ERR) S ^TMP($J,"IBCNSUR",DFN,IBIPOL)="E",IBEXPERR=IBEXPERR+1 Q
"RTN","IBCNSUR",184,0)
 .. S ^TMP($J,"IBCNSUR",DFN,IBIPOL)="O",IBEXPOK=IBEXPOK+1
"RTN","IBCNSUR",185,0)
 .. D COVERED^IBCNSM31(DFN,IBCBI) ; set covered by insurance 
"RTN","IBCNSUR",186,0)
 ;
"RTN","IBCNSUR",187,0)
 W !,"Done. "_IBEXPOK_" Subscribers' policies were expired as of "_$$FMTE^XLFDT(IBEXP)_"."
"RTN","IBCNSUR",188,0)
 W !,"A Bulletin was sent to you and members of 'IB NEW INSURANCE' Mail Group."
"RTN","IBCNSUR",189,0)
 ;
"RTN","IBCNSUR",190,0)
 ; prepare the bulletin
"RTN","IBCNSUR",191,0)
 S IBLN=0,REF=$NA(^TMP($J,"IBCNSURBLL"))
"RTN","IBCNSUR",192,0)
 D ADD^IBCNSUR3(1,"EXPIRE ALL SUBSCRIBERS WITHIN A GROUP PLAN")
"RTN","IBCNSUR",193,0)
 D ADD^IBCNSUR3()
"RTN","IBCNSUR",194,0)
 D ADD^IBCNSUR3(1,"You selected to expire ",IBSUB," subscriber(s)")
"RTN","IBCNSUR",195,0)
 D ADD^IBCNSUR3()
"RTN","IBCNSUR",196,0)
 D ADD^IBCNSUR3(1,"FROM Insurance Company ",IBINSNM)
"RTN","IBCNSUR",197,0)
 D ADD^IBCNSUR3(1,"Plan Name ",IBGRPNM,"    Number ",IBGRPNO)
"RTN","IBCNSUR",198,0)
 D ADD^IBCNSUR3()
"RTN","IBCNSUR",199,0)
 D ADD^IBCNSUR3(1,"Policies will be expired as of ",$$FMTE^XLFDT(IBEXP),".")
"RTN","IBCNSUR",200,0)
 D ADD^IBCNSUR3()
"RTN","IBCNSUR",201,0)
 ;
"RTN","IBCNSUR",202,0)
 I IBEXPERR D
"RTN","IBCNSUR",203,0)
 . D ADD^IBCNSUR3(1,"* These ",IBEXPERR," entries could not be processed, they'll need to be adjusted manually")
"RTN","IBCNSUR",204,0)
 . W !!,@REF@(IBLN)
"RTN","IBCNSUR",205,0)
 . D ADD^IBCNSUR3(1,"-------------------------------------------------------------------------------")
"RTN","IBCNSUR",206,0)
 . W !,@REF@(IBLN)
"RTN","IBCNSUR",207,0)
 . D ADD^IBCNSUR3(1,"Patient Name/ID             Whose    Employer              Effective   Expires")
"RTN","IBCNSUR",208,0)
 . W !,@REF@(IBLN),!
"RTN","IBCNSUR",209,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"IBCNSUR",DFN)) Q:'DFN  D
"RTN","IBCNSUR",210,0)
 .. S IBIPOL=0 F  S IBIPOL=$O(^TMP($J,"IBCNSUR",DFN,IBIPOL)) Q:IBIPOL=""  D
"RTN","IBCNSUR",211,0)
 ... I ^TMP($J,"IBCNSUR",DFN,IBIPOL)'="E" Q
"RTN","IBCNSUR",212,0)
 ... D ADS^IBCNSUR3(DFN,IBIPOL)
"RTN","IBCNSUR",213,0)
 ... W !,@REF@(IBLN)
"RTN","IBCNSUR",214,0)
 . D ADD^IBCNSUR3(1,"============================")
"RTN","IBCNSUR",215,0)
 . D ADD^IBCNSUR3()
"RTN","IBCNSUR",216,0)
 . W !!,"Examine the entries that could not be processed."
"RTN","IBCNSUR",217,0)
 ;
"RTN","IBCNSUR",218,0)
 I IBEXPOK D
"RTN","IBCNSUR",219,0)
 . D ADD^IBCNSUR3(1,"These ",IBEXPOK," policies were processed successfully")
"RTN","IBCNSUR",220,0)
 . D ADD^IBCNSUR3(1,"-------------------------------------------------------------------------------")
"RTN","IBCNSUR",221,0)
 . D ADD^IBCNSUR3(1,"Patient Name/ID             Whose    Employer              Effective   Expires")
"RTN","IBCNSUR",222,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"IBCNSUR",DFN)) Q:'DFN  D
"RTN","IBCNSUR",223,0)
 .. S IBIPOL=0 F  S IBIPOL=$O(^TMP($J,"IBCNSUR",DFN,IBIPOL)) Q:IBIPOL=""  D
"RTN","IBCNSUR",224,0)
 ... I ^TMP($J,"IBCNSUR",DFN,IBIPOL)'="O" Q
"RTN","IBCNSUR",225,0)
 ... D ADS^IBCNSUR3(DFN,IBIPOL)
"RTN","IBCNSUR",226,0)
 . D ADD^IBCNSUR3(1,"============================")
"RTN","IBCNSUR",227,0)
 . D ADD^IBCNSUR3()
"RTN","IBCNSUR",228,0)
 ;
"RTN","IBCNSUR",229,0)
 I 'IBEXPOK,'IBEXPERR D
"RTN","IBCNSUR",230,0)
 . D ADD^IBCNSUR3(1,"============================")
"RTN","IBCNSUR",231,0)
 . D ADD^IBCNSUR3(1,"After processing, no changes were needed, no policies were expired.")
"RTN","IBCNSUR",232,0)
 . W !!,@REF@(IBLN)
"RTN","IBCNSUR",233,0)
 . D ADD^IBCNSUR3(1,"============================")
"RTN","IBCNSUR",234,0)
 . D ADD^IBCNSUR3()
"RTN","IBCNSUR",235,0)
 ;
"RTN","IBCNSUR",236,0)
 W !
"RTN","IBCNSUR",237,0)
 S DIR(0)="EA",DIR("A")="Press RETURN to continue." D ^DIR K DIR
"RTN","IBCNSUR",238,0)
 ;
"RTN","IBCNSUR",239,0)
 I +$$GET1^DIQ(355.3,IBPLAN_",","INACTIVE","I") D  G NXTGRP
"RTN","IBCNSUR",240,0)
 . D ADD^IBCNSUR3(1,"Please note the ",IBGRPNM," plan is already inactive.")
"RTN","IBCNSUR",241,0)
 . W !!,@REF@(IBLN),!
"RTN","IBCNSUR",242,0)
 . D SNDBULL
"RTN","IBCNSUR",243,0)
 ;
"RTN","IBCNSUR",244,0)
 W !
"RTN","IBCNSUR",245,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCNSUR",246,0)
 I IBEXPERR D
"RTN","IBCNSUR",247,0)
 . S DIR("A",1)="       ***********************************************"
"RTN","IBCNSUR",248,0)
 . S DIR("A",2)="       *                   WARNING                   *"
"RTN","IBCNSUR",249,0)
 . S DIR("A",3)="       *     There are still active subscribers      *"
"RTN","IBCNSUR",250,0)
 . S DIR("A",4)="       *   that will need to be adjusted manually    *"
"RTN","IBCNSUR",251,0)
 . S DIR("A",5)="       ***********************************************"
"RTN","IBCNSUR",252,0)
 . S DIR("A",6)=" "
"RTN","IBCNSUR",253,0)
 S DIR("A")="Do you wish to inactivate plan "_IBGRPNM
"RTN","IBCNSUR",254,0)
 D ^DIR K DIR
"RTN","IBCNSUR",255,0)
 I 'Y!$D(DIRUT) D  G NXTGRP
"RTN","IBCNSUR",256,0)
 . D ADD^IBCNSUR3(1,"The ",IBGRPNM," plan is still active.")
"RTN","IBCNSUR",257,0)
 . W !!,@REF@(IBLN),!
"RTN","IBCNSUR",258,0)
 . D SNDBULL
"RTN","IBCNSUR",259,0)
 ; inactivate the plan
"RTN","IBCNSUR",260,0)
 S IBIENWK=IBPLAN_","
"RTN","IBCNSUR",261,0)
 K DTA,ERR
"RTN","IBCNSUR",262,0)
 S DTA(355.3,IBIENWK,.11)=1 ; inactive
"RTN","IBCNSUR",263,0)
 S DTA(355.3,IBIENWK,1.05)=$$NOW^XLFDT() ; last edited
"RTN","IBCNSUR",264,0)
 S DTA(355.3,IBIENWK,1.06)=DUZ ; by
"RTN","IBCNSUR",265,0)
 D FILE^DIE("","DTA","ERR")
"RTN","IBCNSUR",266,0)
 I $D(ERR) D  G NXTGRP
"RTN","IBCNSUR",267,0)
 . D ADD^IBCNSUR3(1,"There was an issue inactivating the ",IBGRPNM," plan.")
"RTN","IBCNSUR",268,0)
 . W !!,@REF@(IBLN),!
"RTN","IBCNSUR",269,0)
 . D SNDBULL
"RTN","IBCNSUR",270,0)
 D ADD^IBCNSUR3(1,"The ",IBGRPNM," plan has been inactivated.")
"RTN","IBCNSUR",271,0)
 W !!,@REF@(IBLN),!
"RTN","IBCNSUR",272,0)
 D SNDBULL
"RTN","IBCNSUR",273,0)
 G NXTGRP
"RTN","IBCNSUR",274,0)
 ;
"RTN","IBCNSUR",275,0)
SNDBULL ; send out the bulletin 
"RTN","IBCNSUR",276,0)
 I '$G(IBLN) Q
"RTN","IBCNSUR",277,0)
 D ADD^IBCNSUR3()
"RTN","IBCNSUR",278,0)
 D ADD^IBCNSUR3(1,"THE PROCESS COMPLETED SUCCESSFULLY ON "_$$DAT1^IBOUTL($$NOW^XLFDT(),1))
"RTN","IBCNSUR",279,0)
 S XMSUB="SUBSCRIPTION LIST FOR INACTIVATED PLAN"
"RTN","IBCNSUR",280,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="^TMP("_$J_",""IBCNSURBLL"","
"RTN","IBCNSUR",281,0)
 S XMY(DUZ)=""
"RTN","IBCNSUR",282,0)
 S XMY("G.IB NEW INSURANCE")=""
"RTN","IBCNSUR",283,0)
 D ^XMD
"RTN","IBCNSUR",284,0)
 Q
"RTN","IBCOC1")
0^8^B24512676^B21404907
"RTN","IBCOC1",1,0)
IBCOC1 ;ALB/NLR - NEW, NOT VERIFIED INS. ENTRIES ;24-NOV-93
"RTN","IBCOC1",2,0)
 ;;2.0;INTEGRATED BILLING;**528,602**;21-MAR-94;Build 22
"RTN","IBCOC1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOC1",4,0)
 ;
"RTN","IBCOC1",5,0)
% ;
"RTN","IBCOC1",6,0)
 N POP,ZTQUEUED,ZTREQ
"RTN","IBCOC1",7,0)
 ; -- fileman print of new, not verified insurance entries
"RTN","IBCOC1",8,0)
 ;
"RTN","IBCOC1",9,0)
 W !!,"Print List of New, Not Verified Insurance Entries"
"RTN","IBCOC1",10,0)
 ;
"RTN","IBCOC1",11,0)
 ; Report or Excel format
"RTN","IBCOC1",12,0)
 S IBOUT=$$OUT G:IBOUT="" END
"RTN","IBCOC1",13,0)
 I IBOUT="E" G EXCEL
"RTN","IBCOC1",14,0)
 ;
"RTN","IBCOC1",15,0)
 W !!,"You will need a 132 column printer for this report!",!!
"RTN","IBCOC1",16,0)
 ;
"RTN","IBCOC1",17,0)
 S DIC="^DPT(",FLDS="[IBNOTVER]",BY="[IBNOTVER1]"
"RTN","IBCOC1",18,0)
 D ASK G:$G(IBQ)=1 END
"RTN","IBCOC1",19,0)
 S DHD="REPORT OF NEW, NOT VERIFIED INSURANCE ENTRIES FROM: "_FR(1)_" TO: "_TO(1)
"RTN","IBCOC1",20,0)
 D EN1^DIP,ASK^IBCOMC2
"RTN","IBCOC1",21,0)
 ;
"RTN","IBCOC1",22,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCOC1",23,0)
 D ^%ZISC
"RTN","IBCOC1",24,0)
END K DIC,FLDS,BY,FR,TO,IBOUT,IBQ,DHD
"RTN","IBCOC1",25,0)
 Q
"RTN","IBCOC1",26,0)
ASK ;
"RTN","IBCOC1",27,0)
 N IBBDT,IBEDT
"RTN","IBCOC1",28,0)
 D DATE^IBOUTL
"RTN","IBCOC1",29,0)
 I (IBBDT<1)!(IBEDT<1) S IBQ=1
"RTN","IBCOC1",30,0)
 S FR=",,"_IBBDT_",?",TO=",,"_IBEDT_",?"
"RTN","IBCOC1",31,0)
 S FR(1)=$$DAT1^IBOUTL(IBBDT),TO(1)=$$DAT1^IBOUTL(IBEDT)
"RTN","IBCOC1",32,0)
 Q
"RTN","IBCOC1",33,0)
 ;
"RTN","IBCOC1",34,0)
OUT() ;
"RTN","IBCOC1",35,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOC1",36,0)
 W !
"RTN","IBCOC1",37,0)
 S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCOC1",38,0)
 S DIR("A")="(E)xcel Format or (R)eport Format: "
"RTN","IBCOC1",39,0)
 S DIR("B")="Report"
"RTN","IBCOC1",40,0)
 D ^DIR I $D(DIRUT) Q ""
"RTN","IBCOC1",41,0)
 Q Y
"RTN","IBCOC1",42,0)
 ;
"RTN","IBCOC1",43,0)
EXCEL ;
"RTN","IBCOC1",44,0)
 ; Ask for Date Entered range
"RTN","IBCOC1",45,0)
 N IBBDT,IBEDT,IBRF,IBRL,IBQUIT
"RTN","IBCOC1",46,0)
 S IBQUIT=0
"RTN","IBCOC1",47,0)
 D DATE^IBOUTL
"RTN","IBCOC1",48,0)
 I (IBBDT<1)!(IBEDT<1) G XLQUIT
"RTN","IBCOC1",49,0)
 ;
"RTN","IBCOC1",50,0)
 D NR G:IBQUIT XLQUIT
"RTN","IBCOC1",51,0)
 ;
"RTN","IBCOC1",52,0)
 W !! D QUE
"RTN","IBCOC1",53,0)
 ;
"RTN","IBCOC1",54,0)
XLQUIT ;
"RTN","IBCOC1",55,0)
 K IBBDT,IBEDT,IBRF,IBRL,IBOUT,IBQUIT
"RTN","IBCOC1",56,0)
 Q
"RTN","IBCOC1",57,0)
 ;
"RTN","IBCOC1",58,0)
NR ; Ask Name Range
"RTN","IBCOC1",59,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOC1",60,0)
NRR S DIR(0)="FO",DIR("B")="FIRST",DIR("A")="      START WITH NAME"
"RTN","IBCOC1",61,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOC1",62,0)
 S:Y="FIRST" Y="A" S IBRF=Y
"RTN","IBCOC1",63,0)
 S DIR(0)="FO",DIR("B")="LAST",DIR("A")="      GO TO NAME"
"RTN","IBCOC1",64,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOC1",65,0)
 S:Y="LAST" Y="zzzzzz" S IBRL=Y
"RTN","IBCOC1",66,0)
 I $G(IBRL)']$G(IBRF) W !!,?5,"* The Go to Patient Name must follow after the Start with Name. *",! G NRR
"RTN","IBCOC1",67,0)
 Q
"RTN","IBCOC1",68,0)
 ;
"RTN","IBCOC1",69,0)
QUE ; Ask Device for Excel Output
"RTN","IBCOC1",70,0)
 N %ZIS,ZTRTN,ZTSAVE,ZTDESC
"RTN","IBCOC1",71,0)
 S %ZIS="QM" D ^%ZIS G:POP QUEQ
"RTN","IBCOC1",72,0)
 I $D(IO("Q")) K IO("Q") D  G QUEQ
"RTN","IBCOC1",73,0)
 .S ZTRTN="COMPXL^IBCOC1",ZTSAVE("IBRF")="",ZTSAVE("IBRL")=""
"RTN","IBCOC1",74,0)
 .S ZTSAVE("IBBDT")="",ZTSAVE("IBEDT")=""
"RTN","IBCOC1",75,0)
 .S ZTDESC="IB - List New not Verified Policies"
"RTN","IBCOC1",76,0)
 .D ^%ZTLOAD K ZTSK D HOME^%ZIS
"RTN","IBCOC1",77,0)
 ;
"RTN","IBCOC1",78,0)
 U IO
"RTN","IBCOC1",79,0)
 D COMPXL
"RTN","IBCOC1",80,0)
 ;
"RTN","IBCOC1",81,0)
QUEQ ; Exit clean-up
"RTN","IBCOC1",82,0)
 W ! D ^%ZISC K IBBDT,IBEDT,IBOUT,IBRF,IBRL,VA,VAERR,VADM,VAPA,^TMP("IBCOC1",$J)
"RTN","IBCOC1",83,0)
 Q
"RTN","IBCOC1",84,0)
 ;
"RTN","IBCOC1",85,0)
COMPXL ; Compile Excel data
"RTN","IBCOC1",86,0)
 ; Input variables:
"RTN","IBCOC1",87,0)
 ; IBRF  - Required.  Name Range Start value
"RTN","IBCOC1",88,0)
 ; IBRL  - Required.  Name Range Go To value
"RTN","IBCOC1",89,0)
 ; IBBDT - Required.  Begining Entered Date Range
"RTN","IBCOC1",90,0)
 ; IBEDT - Required.  Ending Entered Date Range
"RTN","IBCOC1",91,0)
 ;
"RTN","IBCOC1",92,0)
 N IBC,IBCDA,IBCDA0,IBCDA1,IBSSN,IBINS,IBSUBID,IBENDT,IBENUSR,DFN,VA,VADM,VAERR,VAPA
"RTN","IBCOC1",93,0)
 K ^TMP("IBCOC1",$J)
"RTN","IBCOC1",94,0)
 S IBC=0 F  S IBC=$O(^DPT("AB",IBC)) Q:'IBC  D
"RTN","IBCOC1",95,0)
 .S DFN=0 F  S DFN=$O(^DPT("AB",IBC,DFN)) Q:'DFN  D
"RTN","IBCOC1",96,0)
 ..K VA,VADM,VAERR,VAPA
"RTN","IBCOC1",97,0)
 ..D DEM^VADPT,ADD^VADPT
"RTN","IBCOC1",98,0)
 ..;
"RTN","IBCOC1",99,0)
 ..;  I Pt. name out of range quit
"RTN","IBCOC1",100,0)
 ..S VADM(1)=$P($G(VADM(1)),U,1) I VADM(1)="" Q
"RTN","IBCOC1",101,0)
 ..I VADM(1)]IBRL Q
"RTN","IBCOC1",102,0)
 ..I IBRF]VADM(1) Q
"RTN","IBCOC1",103,0)
 ..;
"RTN","IBCOC1",104,0)
 ..S IBCDA=0 F  S IBCDA=$O(^DPT("AB",IBC,DFN,IBCDA)) Q:'IBCDA  D
"RTN","IBCOC1",105,0)
 ...S IBCDA0=$$ZND^IBCNS1(DFN,IBCDA)  ;516 - baa
"RTN","IBCOC1",106,0)
 ...;
"RTN","IBCOC1",107,0)
 ...;  I Verification Date populated quit
"RTN","IBCOC1",108,0)
 ...S IBCDA1=$G(^DPT(DFN,.312,IBCDA,1))
"RTN","IBCOC1",109,0)
 ...I $P(IBCDA1,U,3) Q
"RTN","IBCOC1",110,0)
 ...;
"RTN","IBCOC1",111,0)
 ...;  I Entered Date out of range quit
"RTN","IBCOC1",112,0)
 ...I +$P(IBCDA1,U)>IBEDT Q
"RTN","IBCOC1",113,0)
 ...I +$P(IBCDA1,U)<IBBDT Q
"RTN","IBCOC1",114,0)
 ...;
"RTN","IBCOC1",115,0)
 ...;  Get data fields
"RTN","IBCOC1",116,0)
 ...S IBSSN=$$GET1^DIQ(2,DFN,.09)
"RTN","IBCOC1",117,0)
 ...S IBINS=$$GET1^DIQ(2.312,IBCDA_","_DFN_",",.01)
"RTN","IBCOC1",118,0)
 ...S IBSUBID=$$GET1^DIQ(2.312,IBCDA_","_DFN_",",7.02)
"RTN","IBCOC1",119,0)
 ...S IBENUSR=$$GET1^DIQ(2.312,IBCDA_","_DFN_",",1.02)
"RTN","IBCOC1",120,0)
 ...S IBENDT=$$FMTE^XLFDT($P(IBCDA1,U),1)
"RTN","IBCOC1",121,0)
 ...;
"RTN","IBCOC1",122,0)
 ...;  Set global array
"RTN","IBCOC1",123,0)
 ...S ^TMP("IBCOC1",$J,VADM(1),IBCDA)=VADM(1)_U_IBSSN_U_IBINS_U_IBSUBID_U_IBENUSR_U_IBENDT
"RTN","IBCOC1",124,0)
 ;
"RTN","IBCOC1",125,0)
 ;IB*2.0*602 Add title to Excel Report
"RTN","IBCOC1",126,0)
 W "REPORT OF NEW, NOT VERIFIED INSURANCE ENTRIES FROM: ",$$DAT1^IBOUTL(IBBDT)," TO: ",$$DAT1^IBOUTL(IBEDT)
"RTN","IBCOC1",127,0)
 W !,"NAMES RANGING FROM ",$S(IBRF="A":"FIRST",1:IBRF)," TO ",$S(IBRL="zzzzzz":"LAST",1:IBRL)_"^"_$$FMTE^XLFDT($$NOW^XLFDT,"Z"),! ; IB*2.0*602
"RTN","IBCOC1",128,0)
 ; IB*602/HN end 
"RTN","IBCOC1",129,0)
 W "PATIENT^PATIENT ID^INSURANCE CO^SUBSCRIBER ID^WHO ENTERED^DATE ENTERED"
"RTN","IBCOC1",130,0)
 I '$D(^TMP("IBCOC1",$J)) W !!,"** NO RECORDS FOUND **" D ASK^IBCOMC2 Q
"RTN","IBCOC1",131,0)
 D WRT,ASK^IBCOMC2
"RTN","IBCOC1",132,0)
 ;
"RTN","IBCOC1",133,0)
 Q
"RTN","IBCOC1",134,0)
 ;
"RTN","IBCOC1",135,0)
WRT ; Print Excel data
"RTN","IBCOC1",136,0)
 N IBPAT,IBINSTYP
"RTN","IBCOC1",137,0)
 S (IBPAT,IBINSTYP)=""
"RTN","IBCOC1",138,0)
 F  S IBPAT=$O(^TMP("IBCOC1",$J,IBPAT)) Q:IBPAT=""  D
"RTN","IBCOC1",139,0)
 .F  S IBINSTYP=$O(^TMP("IBCOC1",$J,IBPAT,IBINSTYP)) Q:'IBINSTYP  W !,^TMP("IBCOC1",$J,IBPAT,IBINSTYP)
"RTN","IBCOC1",140,0)
 Q
"RTN","IBCOMD1")
0^9^B37249446^B27677991
"RTN","IBCOMD1",1,0)
IBCOMD1 ;ALB/CMS - GENERATE INSURANCE COMPANY LISTINGS ;03-AUG-98
"RTN","IBCOMD1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,528,602**;21-MAR-94;Build 22
"RTN","IBCOMD1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOMD1",4,0)
 Q
"RTN","IBCOMD1",5,0)
 ;
"RTN","IBCOMD1",6,0)
BEG ; Queued entry point.
"RTN","IBCOMD1",7,0)
 ;  Input variables:
"RTN","IBCOMD1",8,0)
 ;
"RTN","IBCOMD1",9,0)
 ;  IBCASE(n) = x ^ y ^ z  (Optional), where
"RTN","IBCOMD1",10,0)
 ;     n = 1-4  (1:Name, 2:Street, 3:City, 4:State)
"RTN","IBCOMD1",11,0)
 ;     x = C (Contains), or R (RANGE)
"RTN","IBCOMD1",12,0)
 ;     y = Pointer to the STATE (#5) file, if n=4
"RTN","IBCOMD1",13,0)
 ;         The 'Contains' value, if x = C
"RTN","IBCOMD1",14,0)
 ;         The 'Start From' value, if x = R
"RTN","IBCOMD1",15,0)
 ;     z = The 'Go To' value, if x = R
"RTN","IBCOMD1",16,0)
 ;
"RTN","IBCOMD1",17,0)
 ;  IBFLD(n) = x  (Required), where
"RTN","IBCOMD1",18,0)
 ;     n = 1-4  (1:Name, 2:Street, 3:City, 4:State)
"RTN","IBCOMD1",19,0)
 ;     x = NAME (n=1), STREET (n=2), CITY (n=3), STATE (n=4)
"RTN","IBCOMD1",20,0)
 ;
"RTN","IBCOMD1",21,0)
 ;  IBAIB - Required.   Include Active Insurance
"RTN","IBCOMD1",22,0)
 ;          1= Active Ins.   2= Inactive Ins. 3= Both
"RTN","IBCOMD1",23,0)
 ;  IBOUT - Required.   Output format
"RTN","IBCOMD1",24,0)
 ;          "R"= report format         "E"= Excel format
"RTN","IBCOMD1",25,0)
 ;
"RTN","IBCOMD1",26,0)
 N IBDA,IBDA0,IBDA11,IBDA13,IBI,IBPAGE,IBTMP,IBX,X,Y,IBJ,IBNOT
"RTN","IBCOMD1",27,0)
 ;
"RTN","IBCOMD1",28,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCOMD1",29,0)
 K ^TMP("IBCOMD",$J) S IBPAGE=0
"RTN","IBCOMD1",30,0)
 ;
"RTN","IBCOMD1",31,0)
 ; - must look at all entries in file #36
"RTN","IBCOMD1",32,0)
 S IBDA=0 F  S IBDA=$O(^DIC(36,IBDA)) Q:'IBDA  S IBDA0=$G(^(IBDA,0)) D
"RTN","IBCOMD1",33,0)
 .;
"RTN","IBCOMD1",34,0)
 .; - screen out active/inactive companies
"RTN","IBCOMD1",35,0)
 .I IBAIB=1,$P(IBDA0,U,5) Q
"RTN","IBCOMD1",36,0)
 .I IBAIB=2,'$P(IBDA0,U,5) Q
"RTN","IBCOMD1",37,0)
 .;
"RTN","IBCOMD1",38,0)
 .S IBDA11=$G(^DIC(36,IBDA,.11)),IBDA13=$G(^(.13))
"RTN","IBCOMD1",39,0)
 .;
"RTN","IBCOMD1",40,0)
 .; - screen out entries based on user-selected field screens
"RTN","IBCOMD1",41,0)
 .S (IBJ,IBNOT)=0 F  S IBJ=$O(IBCASE(IBJ)) Q:'IBJ  D  Q:IBNOT
"RTN","IBCOMD1",42,0)
 ..N IBD,VAL S IBD=IBCASE(IBJ)
"RTN","IBCOMD1",43,0)
 ..;
"RTN","IBCOMD1",44,0)
 ..; - check state first
"RTN","IBCOMD1",45,0)
 ..I IBJ=4 S:$P(IBDA11,"^",5)'=$P(IBD,"^",2) IBNOT=1 Q
"RTN","IBCOMD1",46,0)
 ..;
"RTN","IBCOMD1",47,0)
 ..; - find the field value to be evaluated
"RTN","IBCOMD1",48,0)
 ..S VAL=$S(IBJ=1:$P(IBDA0,"^"),1:$P(IBDA11,"^",$S(IBJ=2:1,1:4)))
"RTN","IBCOMD1",49,0)
 ..;
"RTN","IBCOMD1",50,0)
 ..; - check 'contains' values
"RTN","IBCOMD1",51,0)
 ..I $P(IBD,"^")="C" S:VAL'[$P(IBD,"^",2) IBNOT=1 Q
"RTN","IBCOMD1",52,0)
 ..;
"RTN","IBCOMD1",53,0)
 ..; - check 'range' values
"RTN","IBCOMD1",54,0)
 ..I VAL="" S IBNOT=1 Q  ; VAL must have a value in a range
"RTN","IBCOMD1",55,0)
 ..I $P(IBD,"^",2)]VAL S IBNOT=1 Q  ; VAL doesn't follow Start value
"RTN","IBCOMD1",56,0)
 ..I VAL]$P(IBD,"^",3) S IBNOT=1 ;    VAL follows the Go To value
"RTN","IBCOMD1",57,0)
 .;
"RTN","IBCOMD1",58,0)
 .Q:IBNOT  ; entry does not meet criteria
"RTN","IBCOMD1",59,0)
 .;
"RTN","IBCOMD1",60,0)
 .;
"RTN","IBCOMD1",61,0)
 .; - set entry in global
"RTN","IBCOMD1",62,0)
 .S IBTMP=$P(IBDA0,U,1)_U
"RTN","IBCOMD1",63,0)
 .S IBX=$P(IBDA0,U,2) S $P(IBTMP,U,2)=$S(IBX]"":$E($$EXPAND^IBTRE(36,1,IBX),1,20),1:"")_U
"RTN","IBCOMD1",64,0)
 .F IBX=1:1:6 S IBTMP=IBTMP_$P(IBDA11,U,IBX)_U
"RTN","IBCOMD1",65,0)
 .S IBX=$P(IBTMP,U,7) S $P(IBTMP,U,7)=$S(IBX]"":$$STATE^IBCF2(IBX),1:"")_U
"RTN","IBCOMD1",66,0)
 .S $P(IBTMP,U,9)=$P(IBDA13,U,1)
"RTN","IBCOMD1",67,0)
 .S ^TMP("IBCOMD",$J,+$P(IBDA0,U,5),$S($P(IBDA0,U,1)]"":$P(IBDA0,U,1),1:"ZZZZ"),+IBDA)=IBTMP
"RTN","IBCOMD1",68,0)
 ;
"RTN","IBCOMD1",69,0)
 I '$D(^TMP("IBCOMD",$J)) D HD W !!,"** NO RECORDS FOUND **" D ASK G QUEQ
"RTN","IBCOMD1",70,0)
 D HD:IBOUT="E",WRT
"RTN","IBCOMD1",71,0)
 ;
"RTN","IBCOMD1",72,0)
 ; Exit clean-UP
"RTN","IBCOMD1",73,0)
QUEQ K IBAIB,IBCASE,IBFLD,IBOUT,IBQUIT,^TMP("IBCOMD",$J)
"RTN","IBCOMD1",74,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCOMD1",75,0)
 W ! D ^%ZISC
"RTN","IBCOMD1",76,0)
 Q
"RTN","IBCOMD1",77,0)
 ;
"RTN","IBCOMD1",78,0)
 ;
"RTN","IBCOMD1",79,0)
HD ; Write Heading
"RTN","IBCOMD1",80,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCOMD1",81,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets
"RTN","IBCOMD1",82,0)
 I IBOUT="E" D  Q
"RTN","IBCOMD1",83,0)
 .W !,"Generate Insurance Company Listings^"_$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCOMD1",84,0)
 .W !,"List of ",$S(IBAIB=1:"Active",IBAIB=2:"Inactive",1:"All")," Insurance Companies"
"RTN","IBCOMD1",85,0)
 .;
"RTN","IBCOMD1",86,0)
 .; - display definition of screens
"RTN","IBCOMD1",87,0)
 .I $D(IBCASE) W "^where" D
"RTN","IBCOMD1",88,0)
 ..N I,H
"RTN","IBCOMD1",89,0)
 ..S (H,I)=0 F  S I=$O(IBCASE(I)) Q:'I  D
"RTN","IBCOMD1",90,0)
 ...I H W "^and"
"RTN","IBCOMD1",91,0)
 ...S H=1 W "^"_IBFLD(I)
"RTN","IBCOMD1",92,0)
 ...W $S(I=4:"^Equals ",$P(IBCASE(I),"^")="C":"^Contains ",1:"^Between ")
"RTN","IBCOMD1",93,0)
 ...W $S(I=4:$P($G(^DIC(5,+$P(IBCASE(I),"^",2),0)),"^"),$P(IBCASE(I),"^",2)="":"^'FIRST'",1:$P(IBCASE(I),"^",2))
"RTN","IBCOMD1",94,0)
 ...I $P(IBCASE(I),"^")="R" W "^and ",$S($P(IBCASE(I),"^",3)="zzzzzz":"^'LAST'",1:$P(IBCASE(I),"^",3)) ; **IB*2.0*602
"RTN","IBCOMD1",95,0)
 .;
"RTN","IBCOMD1",96,0)
 .W !,"Active/Inactive^Insurance Name^Reimburse?^Street Address 1^Street Address 2^Street Address 3^City^State^ZIP^Phone Number"
"RTN","IBCOMD1",97,0)
 ; IB*602/HN end 
"RTN","IBCOMD1",98,0)
 ;
"RTN","IBCOMD1",99,0)
 I IBOUT="E" W:($E(IOST,1,2)["C-") ! W "Active/Inactive^Insurance Name^Reimburse?^Street Address 1^Street Address 2^Street Address 3^City^State^ZIP^Phone Number" Q
"RTN","IBCOMD1",100,0)
 W @IOF,"Generate Insurance Company Listings",?50,$$FMTE^XLFDT($$NOW^XLFDT,"Z"),?70," Page ",IBPAGE
"RTN","IBCOMD1",101,0)
 W !,"List of ",$S(IBAIB=1:"Active",IBAIB=2:"Inactive",1:"All")," Insurance Companies"
"RTN","IBCOMD1",102,0)
 ;
"RTN","IBCOMD1",103,0)
 ; - display definition of screens
"RTN","IBCOMD1",104,0)
 I $D(IBCASE) W ", where" D
"RTN","IBCOMD1",105,0)
 .N I,H
"RTN","IBCOMD1",106,0)
 .S (H,I)=0 F  S I=$O(IBCASE(I)) Q:'I  D
"RTN","IBCOMD1",107,0)
 ..W ! I H W ?3,"and"
"RTN","IBCOMD1",108,0)
 ..S H=1 W ?8,IBFLD(I)," "
"RTN","IBCOMD1",109,0)
 ..W $S(I=4:"Equals ",$P(IBCASE(I),"^")="C":"Contains ",1:"Between ")
"RTN","IBCOMD1",110,0)
 ..W $S(I=4:$P($G(^DIC(5,+$P(IBCASE(I),"^",2),0)),"^"),$P(IBCASE(I),"^",2)="":"'FIRST'",1:$P(IBCASE(I),"^",2))
"RTN","IBCOMD1",111,0)
 ..I $P(IBCASE(I),"^")="R" W " and ",$S($P(IBCASE(I),"^",3)="zzzzzz":"'LAST'",1:$P(IBCASE(I),"^",3))
"RTN","IBCOMD1",112,0)
 ;
"RTN","IBCOMD1",113,0)
 W !,"Insurance Name/Address",?33,"Reimburse?",?56,"Phone Number"
"RTN","IBCOMD1",114,0)
 W ! F IBX=1:1:79 W "="
"RTN","IBCOMD1",115,0)
 Q
"RTN","IBCOMD1",116,0)
 ;
"RTN","IBCOMD1",117,0)
WRT ; Write data lines
"RTN","IBCOMD1",118,0)
 N IBA,IBNA,IBOFF,IBACT,X,Y S IBQUIT=0
"RTN","IBCOMD1",119,0)
 S IBA="" F  S IBA=$O(^TMP("IBCOMD",$J,IBA)) Q:(IBA="")!(IBQUIT=1)  D
"RTN","IBCOMD1",120,0)
 .I IBPAGE,(IBOUT="R") D ASK I IBQUIT=1 Q
"RTN","IBCOMD1",121,0)
 .; Excel Output
"RTN","IBCOMD1",122,0)
 .I IBOUT="E" S IBACT=$S(IBA=1:"Inactive",1:"Active")
"RTN","IBCOMD1",123,0)
 .; Report Output
"RTN","IBCOMD1",124,0)
 .I IBOUT="R" D HD W !,$S(IBA=1:"Inactive Companies",1:"Active Companies"),!
"RTN","IBCOMD1",125,0)
 .S IBNA="" F  S IBNA=$O(^TMP("IBCOMD",$J,IBA,IBNA)) Q:(IBNA="")!(IBQUIT=1)  D
"RTN","IBCOMD1",126,0)
 ..S IBDA="" F  S IBDA=$O(^TMP("IBCOMD",$J,IBA,IBNA,IBDA)) Q:('IBDA)!(IBQUIT=1)  D
"RTN","IBCOMD1",127,0)
 ...S IBTMP=^TMP("IBCOMD",$J,IBA,IBNA,IBDA)
"RTN","IBCOMD1",128,0)
 ...S IBOFF=$S($P(IBTMP,U,4)]""!($P(IBTMP,U,5)]""):7,1:6)
"RTN","IBCOMD1",129,0)
 ...I ($Y+IBOFF)>IOSL,(IBOUT="R") D  I IBQUIT=1 Q
"RTN","IBCOMD1",130,0)
 ....D ASK I IBQUIT=1 Q
"RTN","IBCOMD1",131,0)
 ....D HD
"RTN","IBCOMD1",132,0)
 ...S IBTMP=^TMP("IBCOMD",$J,IBA,IBNA,IBDA)
"RTN","IBCOMD1",133,0)
 ...; Excel Output
"RTN","IBCOMD1",134,0)
 ...I IBOUT="E" W !,IBACT_U_IBTMP Q
"RTN","IBCOMD1",135,0)
 ...; Report Output
"RTN","IBCOMD1",136,0)
 ...W !!,$P(IBTMP,U,1),?33,$P(IBTMP,U,2),?56,$P(IBTMP,U,9)
"RTN","IBCOMD1",137,0)
 ...I $P(IBTMP,U,3)]"" W !,$P(IBTMP,U,3)
"RTN","IBCOMD1",138,0)
 ...I $P(IBTMP,U,4)]""!($P(IBTMP,U,5)]"") W !,$P(IBTMP,U,4) W:$P(IBTMP,U,4)]""&($P(IBTMP,U,5)]"") ", " W $P(IBTMP,U,5)
"RTN","IBCOMD1",139,0)
 ...W !,$P(IBTMP,U,6) W:$P(IBTMP,U,6)]""&($P(IBTMP,U,7)]"") ", " W $P(IBTMP,U,7),"  ",$P(IBTMP,U,8)
"RTN","IBCOMD1",140,0)
 I 'IBQUIT D ASK
"RTN","IBCOMD1",141,0)
 Q
"RTN","IBCOMD1",142,0)
 ;
"RTN","IBCOMD1",143,0)
ASK ; Ask to Continue with display
"RTN","IBCOMD1",144,0)
 ; Returns IBQUIT=1 if user Timed out or entered ^
"RTN","IBCOMD1",145,0)
 I $E(IOST,1,2)'["C-" Q
"RTN","IBCOMD1",146,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,IBI,X,Y
"RTN","IBCOMD1",147,0)
 S DIR(0)="E" D ^DIR
"RTN","IBCOMD1",148,0)
 I ($D(DIRUT))!($D(DUOUT)) S IBQUIT=1
"RTN","IBCOMD1",149,0)
 Q
"RTN","IBCOMN1")
0^10^B18271189^B14298599
"RTN","IBCOMN1",1,0)
IBCOMN1 ;ALB/CMS - PATIENTS NO COVERAGE VERIFIED REPORT (CON'T);10-09-98
"RTN","IBCOMN1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,528,602**;21-MAR-94;Build 22
"RTN","IBCOMN1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOMN1",4,0)
 Q
"RTN","IBCOMN1",5,0)
 ;
"RTN","IBCOMN1",6,0)
BEG ; Entry to run Patients w/no Coverage Verification Report
"RTN","IBCOMN1",7,0)
 ; Input variables:
"RTN","IBCOMN1",8,0)
 ; IBAIB - Required.    How to sort
"RTN","IBCOMN1",9,0)
 ;         1= Patient Name Range      2= Terminal Digit Range
"RTN","IBCOMN1",10,0)
 ;
"RTN","IBCOMN1",11,0)
 ; IBRF  - Required.  Name or Terminal Digit Range Start value
"RTN","IBCOMN1",12,0)
 ; IBRL  - Required.  Name or Terminal Digit Range Go to value
"RTN","IBCOMN1",13,0)
 ; IBBDT - Required.  Begining Verification Date Range
"RTN","IBCOMN1",14,0)
 ; IBEDT - Required.  Ending Verification Date Range
"RTN","IBCOMN1",15,0)
 ; IBOUT - Required.  Output format
"RTN","IBCOMN1",16,0)
 ;         "R"= report format        "E"= Excel format
"RTN","IBCOMN1",17,0)
 ;
"RTN","IBCOMN1",18,0)
 N DFN,IBDT,IBGP,IBI,IBQUIT,IBPAGE,IBTMP,IBTD,IBX,VA,VADM,VAERR,X,Y
"RTN","IBCOMN1",19,0)
 ;
"RTN","IBCOMN1",20,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCOMN1",21,0)
 K ^TMP("IBCOMN",$J) S IBPAGE=0,IBQUIT=0
"RTN","IBCOMN1",22,0)
 S IBDT=IBBDT F  S IBDT=$O(^IBA(354,"AVDT",IBDT)) Q:('IBDT)!(IBDT>IBEDT)  D
"RTN","IBCOMN1",23,0)
 .S DFN=0 F  S DFN=$O(^IBA(354,"AVDT",IBDT,DFN)) Q:'DFN  D
"RTN","IBCOMN1",24,0)
 ..K VA,VADM,VAERR,VAPA
"RTN","IBCOMN1",25,0)
 ..D DEM^VADPT,ADD^VADPT
"RTN","IBCOMN1",26,0)
 ..;
"RTN","IBCOMN1",27,0)
 ..;  I Pt. name out of range quit
"RTN","IBCOMN1",28,0)
 ..S VADM(1)=$P($G(VADM(1)),U,1) I VADM(1)="" Q
"RTN","IBCOMN1",29,0)
 ..I IBAIB=1,VADM(1)]IBRL Q
"RTN","IBCOMN1",30,0)
 ..I IBAIB=1,IBRF]VADM(1) Q
"RTN","IBCOMN1",31,0)
 ..;
"RTN","IBCOMN1",32,0)
 ..;  I Terminal Digit out of range quit
"RTN","IBCOMN1",33,0)
 ..I IBAIB=2 S IBTD=$$TERMDG^IBCONS2(DFN) I (+IBTD>IBRL)!(IBRF>+IBTD) Q
"RTN","IBCOMN1",34,0)
 ..;
"RTN","IBCOMN1",35,0)
 ..; Fix subscript error if terminal digit is null
"RTN","IBCOMN1",36,0)
 ..I IBAIB=2,IBTD="" S IBTD=" "
"RTN","IBCOMN1",37,0)
 ..;
"RTN","IBCOMN1",38,0)
 ..;   set data line, set global * if deceased
"RTN","IBCOMN1",39,0)
 ..;S IBTMP=PT NAME^SSN^AGE^DOB^HOME PHONE^VERIFICATION NO COV
"RTN","IBCOMN1",40,0)
 ..S IBTMP=$S($G(VADM(6)):"*",1:"")_VADM(1)_U_$P($P(VADM(2),U,2),"-",3)_U_+VADM(4)_U_$$FMTE^XLFDT(VADM(3),"5ZD")_U_$P(VAPA(8),U,1)_U_$$FMTE^XLFDT(IBDT,"5ZD")
"RTN","IBCOMN1",41,0)
 ..S ^TMP("IBCOMN",$J,$S(IBAIB=2:IBTD,1:VADM(1)),DFN)=IBTMP
"RTN","IBCOMN1",42,0)
 ..;
"RTN","IBCOMN1",43,0)
 ;
"RTN","IBCOMN1",44,0)
 I '$D(^TMP("IBCOMN",$J)) D HD W !!,"** NO RECORDS FOUND **" D ASK G QUEQ
"RTN","IBCOMN1",45,0)
 D HD,WRT
"RTN","IBCOMN1",46,0)
 ;
"RTN","IBCOMN1",47,0)
QUEQ ; Exit clean-UP
"RTN","IBCOMN1",48,0)
 W ! D ^%ZISC K IBTMP,IBAIB,IBOUT,IBRF,IBRL,VA,VAERR,VADM,VAPA,^TMP("IBCOMN",$J)
"RTN","IBCOMN1",49,0)
 Q
"RTN","IBCOMN1",50,0)
 ;
"RTN","IBCOMN1",51,0)
HD ;Write Heading
"RTN","IBCOMN1",52,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCOMN1",53,0)
 ; IB*602/HN ; Add report headers to Excel Spreadsheets 
"RTN","IBCOMN1",54,0)
 I IBOUT="E" D  W:($E(IOST,1,2)["C-") ! W "Patient Name^SSN^Age^DOB^Phone^Verified" Q
"RTN","IBCOMN1",55,0)
 .W !,"Patients w/No Coverage Verification Date Report^"_$$FMTE^XLFDT($$NOW^XLFDT,"Z")
"RTN","IBCOMN1",56,0)
 .W !,"Verification Date Range: "_$$FMTE^XLFDT(IBBDT,"Z")_" to "_$$FMTE^XLFDT(IBEDT,"Z")
"RTN","IBCOMN1",57,0)
 .W !," Sorted by: "_$S(IBAIB=1:"Patient Name",1:"Terminal Digit")_" Range: "_$S(IBRF="A":"FIRST",1:IBRF)_" to "_$S(IBRL="zzzzzz":"LAST",1:IBRL)
"RTN","IBCOMN1",58,0)
 .W !,"(* - Patient Deceased)"
"RTN","IBCOMN1",59,0)
 ; IB*602/HN end 
"RTN","IBCOMN1",60,0)
 I IBOUT="E" W:($E(IOST,1,2)["C-") ! W "Patient Name^SSN^Age^DOB^Phone^Verified" Q
"RTN","IBCOMN1",61,0)
 W @IOF,!,"Patients w/No Coverage Verification Date Report",?50,$$FMTE^XLFDT($$NOW^XLFDT,"Z"),?70," Page ",IBPAGE
"RTN","IBCOMN1",62,0)
 W !,?5,"Verification Date Range: "_$$FMTE^XLFDT(IBBDT,"Z")_" to "_$$FMTE^XLFDT(IBEDT,"Z")
"RTN","IBCOMN1",63,0)
 W !,?5,"  Sorted by: "_$S(IBAIB=1:"Patient Name",1:"Terminal Digit")_"  Range: "_$S(IBRF="A":"FIRST",1:IBRF)_" to "_$S(IBRL="zzzzzz":"LAST",1:IBRL)
"RTN","IBCOMN1",64,0)
 W !,?20,"(*  - Patient Deceased)"
"RTN","IBCOMN1",65,0)
 W !,"Patient Name",?31,"SSN",?38,"Age",?43,"DOB",?55,"Phone",?70,"Verified"
"RTN","IBCOMN1",66,0)
 W ! F IBX=1:1:79 W "="
"RTN","IBCOMN1",67,0)
 Q
"RTN","IBCOMN1",68,0)
 ;
"RTN","IBCOMN1",69,0)
WRT ;Write data lines
"RTN","IBCOMN1",70,0)
 N IBA,IBDFN,IBPT,X,Y S IBQUIT=0
"RTN","IBCOMN1",71,0)
 S IBA="" F  S IBA=$O(^TMP("IBCOMN",$J,IBA)) Q:(IBA="")!(IBQUIT=1)  D
"RTN","IBCOMN1",72,0)
 .S IBDFN=0 F  S IBDFN=$O(^TMP("IBCOMN",$J,IBA,IBDFN)) Q:('IBDFN)!(IBQUIT=1)  D
"RTN","IBCOMN1",73,0)
 ..S IBPT=$G(^TMP("IBCOMN",$J,IBA,IBDFN))
"RTN","IBCOMN1",74,0)
 ..;
"RTN","IBCOMN1",75,0)
 ..I ($Y+5)>IOSL,(IBOUT="R") D  I IBQUIT=1 Q
"RTN","IBCOMN1",76,0)
 ...D ASK I IBQUIT=1 Q
"RTN","IBCOMN1",77,0)
 ...D HD
"RTN","IBCOMN1",78,0)
 ..;
"RTN","IBCOMN1",79,0)
 ..; Excel Output
"RTN","IBCOMN1",80,0)
 ..I IBOUT="E" W !,$P(IBPT,U,1)_U_$E($P(IBPT,U,1),1,1)_$P(IBPT,U,2)_U_$P(IBPT,U,3,6) Q
"RTN","IBCOMN1",81,0)
 ..; Report Output
"RTN","IBCOMN1",82,0)
 ..W !,$E($P(IBPT,U,1),1,30),?31,$E($P(IBPT,U,1),1,1),$P(IBPT,U,2),?38,$J($P(IBPT,U,3),3),?43,$P(IBPT,U,4),?55,$E($P(IBPT,U,5),1,15),?70,$P(IBPT,U,6)
"RTN","IBCOMN1",83,0)
 ..;
"RTN","IBCOMN1",84,0)
 I 'IBQUIT D ASK
"RTN","IBCOMN1",85,0)
 Q
"RTN","IBCOMN1",86,0)
 ;
"RTN","IBCOMN1",87,0)
ASK ; Ask to Continue with display
"RTN","IBCOMN1",88,0)
 I $E(IOST,1,2)'["C-" Q
"RTN","IBCOMN1",89,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOMN1",90,0)
 S DIR(0)="E" D ^DIR
"RTN","IBCOMN1",91,0)
 I ($D(DIRUT))!($D(DUOUT)) S IBQUIT=1
"RTN","IBCOMN1",92,0)
 Q
"RTN","IBY602PO")
0^17^B43687115^n/a
"RTN","IBY602PO",1,0)
IBY602PO ;EDE/DM - Post-Installation for IB*2.8*602 ; 23-MAR-2018
"RTN","IBY602PO",2,0)
 ;;2.0;INTEGRATED BILLING;**602**;09-AUG-2018;Build 22
"RTN","IBY602PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY602PO",4,0)
 ;
"RTN","IBY602PO",5,0)
POST ; POST ROUTINE(S)
"RTN","IBY602PO",6,0)
 N IBXPD,XPDIDTOT
"RTN","IBY602PO",7,0)
 S XPDIDTOT=1
"RTN","IBY602PO",8,0)
 ;
"RTN","IBY602PO",9,0)
 ; Task FIXTQ  
"RTN","IBY602PO",10,0)
 D TSKFIXTQ(1)
"RTN","IBY602PO",11,0)
 ;
"RTN","IBY602PO",12,0)
 ; Done...
"RTN","IBY602PO",13,0)
 D MES^XPDUTL("")
"RTN","IBY602PO",14,0)
 D MES^XPDUTL("POST-Install Completed.")
"RTN","IBY602PO",15,0)
 Q
"RTN","IBY602PO",16,0)
 ;
"RTN","IBY602PO",17,0)
TSKFIXTQ(IBXPD) ; task the FIXTQ routine
"RTN","IBY602PO",18,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY602PO",19,0)
 D MES^XPDUTL("-------------")
"RTN","IBY602PO",20,0)
 D MES^XPDUTL("Tasking Examine/Clean IIV Response & IIV Transmission Queue ... ")
"RTN","IBY602PO",21,0)
 N MSG,ZTDESC,ZTRTN,ZTQUEUED
"RTN","IBY602PO",22,0)
 S ZTQUEUED=1
"RTN","IBY602PO",23,0)
 S ZTDESC="IBCN EXAMINE #365 & #365.1 FILES"
"RTN","IBY602PO",24,0)
 S ZTRTN="FIXTQ^IBY602PO"
"RTN","IBY602PO",25,0)
 S MSG=$$TASK("T@2000",ZTDESC,ZTRTN)
"RTN","IBY602PO",26,0)
 D MES^XPDUTL(MSG)
"RTN","IBY602PO",27,0)
 Q
"RTN","IBY602PO",28,0)
 ;
"RTN","IBY602PO",29,0)
TASK(X,ZTDESC,ZTRTN) ;bypass for queued task
"RTN","IBY602PO",30,0)
 N Y,IDT,XDT,TSK,MSG,ZTIO,ZTSK,%DT
"RTN","IBY602PO",31,0)
 S %DT="FR"
"RTN","IBY602PO",32,0)
 D ^%DT
"RTN","IBY602PO",33,0)
 S IDT=Y D DD^%DT S XDT=Y
"RTN","IBY602PO",34,0)
 ;
"RTN","IBY602PO",35,0)
 ;Check if task already scheduled for date/time
"RTN","IBY602PO",36,0)
 S TSK=$$GETTASK(IDT)
"RTN","IBY602PO",37,0)
 I TSK D  Q MSG
"RTN","IBY602PO",38,0)
 . S Y=$P(TSK,U,2) D DD^%DT
"RTN","IBY602PO",39,0)
 . S MSG=" Task (#"_+TSK_") already scheduled to run on "_Y
"RTN","IBY602PO",40,0)
 ;
"RTN","IBY602PO",41,0)
 ;Schedule the task
"RTN","IBY602PO",42,0)
 S TSK=$$SCHED(IDT)
"RTN","IBY602PO",43,0)
 ;
"RTN","IBY602PO",44,0)
 ;Check for scheduling problem
"RTN","IBY602PO",45,0)
 I '$G(TSK) S MSG=" Task Could Not Be Scheduled" Q MSG
"RTN","IBY602PO",46,0)
 ;
"RTN","IBY602PO",47,0)
 ;Send successful schedule message
"RTN","IBY602PO",48,0)
 S MSG=" Examine/Clean IIV Transmission Queue Scheduled for "_XDT
"RTN","IBY602PO",49,0)
 Q MSG
"RTN","IBY602PO",50,0)
 ;
"RTN","IBY602PO",51,0)
GETTASK(IDT) ;
"RTN","IBY602PO",52,0)
 N TASK,TASKNO,TDT,XUSUCI,Y,ZTSK0
"RTN","IBY602PO",53,0)
 ;
"RTN","IBY602PO",54,0)
 ;Retrieve UCI
"RTN","IBY602PO",55,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBY602PO",56,0)
 ; 
"RTN","IBY602PO",57,0)
 S (TASK,TDT)=0,TASKNO=""
"RTN","IBY602PO",58,0)
 F  S TASK=$O(^%ZTSK(TASK)) Q:'TASK  D  Q:TASKNO
"RTN","IBY602PO",59,0)
 .I $G(^%ZTSK(TASK,.03))[ZTDESC D
"RTN","IBY602PO",60,0)
 ..S ZTSK0=$G(^%ZTSK(TASK,0))
"RTN","IBY602PO",61,0)
 ..;
"RTN","IBY602PO",62,0)
 ..;Exclude tasks scheduled by TaskMan
"RTN","IBY602PO",63,0)
 ..Q:ZTSK0["ZTSK^XQ1"
"RTN","IBY602PO",64,0)
 ..;
"RTN","IBY602PO",65,0)
 ..;Exclude tasks in other ucis
"RTN","IBY602PO",66,0)
 ..Q:(($P(ZTSK0,U,11)_","_$P(ZTSK0,U,12))'=XUSUCI)
"RTN","IBY602PO",67,0)
 ..;
"RTN","IBY602PO",68,0)
 ..;Check for correct date and time
"RTN","IBY602PO",69,0)
 ..S TDT=$$HTFM^XLFDT($P(ZTSK0,"^",6))
"RTN","IBY602PO",70,0)
 ..;I TDT=IDT S TASKNO=TASK
"RTN","IBY602PO",71,0)
 Q TASKNO_U_TDT
"RTN","IBY602PO",72,0)
 ;
"RTN","IBY602PO",73,0)
SCHED(ZTDTH) ;
"RTN","IBY602PO",74,0)
 N XUSUCI,ZTIO,ZTSK
"RTN","IBY602PO",75,0)
 ;Retrieve UCI
"RTN","IBY602PO",76,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBY602PO",77,0)
 S ZTIO=""
"RTN","IBY602PO",78,0)
 D ^%ZTLOAD
"RTN","IBY602PO",79,0)
 Q ZTSK
"RTN","IBY602PO",80,0)
 ;
"RTN","IBY602PO",81,0)
FIXTQ(IBXPD) ; clean/report abnormal IIV TRANSMISSION QUEUE (#365.1) records
"RTN","IBY602PO",82,0)
 N DA,DIK,HLIEN,DNP,TQIEN,ENDDT,WKDT,WKZZ
"RTN","IBY602PO",83,0)
 N STATLIST,STAGE,TCNT,ACNT,MCNT,DONE
"RTN","IBY602PO",84,0)
 N BAD,TQS,TQD,TQQ,MSG,IBXMY
"RTN","IBY602PO",85,0)
 ;
"RTN","IBY602PO",86,0)
 S STATLIST=","_$$FIND1^DIC(365.14,,"B","Response Received")
"RTN","IBY602PO",87,0)
 S STATLIST=STATLIST_","_$$FIND1^DIC(365.14,,"B","Communication Failure")
"RTN","IBY602PO",88,0)
 S STATLIST=STATLIST_","_$$FIND1^DIC(365.14,,"B","Cancelled")_","
"RTN","IBY602PO",89,0)
 S (TQIEN,TCNT,STAGE,ACNT,MCNT,DONE)=0
"RTN","IBY602PO",90,0)
 S MSG=""
"RTN","IBY602PO",91,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182) ; about 6 months
"RTN","IBY602PO",92,0)
 ; STAGE=0, delete abnormal < T-182
"RTN","IBY602PO",93,0)
 ; STAGE=1, report abnormal from T-182 through T-32
"RTN","IBY602PO",94,0)
 ;
"RTN","IBY602PO",95,0)
 D FIXRESP
"RTN","IBY602PO",96,0)
 ;
"RTN","IBY602PO",97,0)
 F  S TQIEN=$O(^IBCN(365.1,TQIEN)) Q:'TQIEN!DONE!$G(ZTSTOP)  D
"RTN","IBY602PO",98,0)
 . S TCNT=TCNT+1
"RTN","IBY602PO",99,0)
 . I $D(ZTQUEUED),TCNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBY602PO",100,0)
 . S TQD=$$GET1^DIQ(365.1,TQIEN_",",.06,"I") ; DATE/TIME CREATED
"RTN","IBY602PO",101,0)
 . S WKDT=+$P(TQD,".",1)
"RTN","IBY602PO",102,0)
 . I WKDT>ENDDT,STAGE S DONE=1 Q
"RTN","IBY602PO",103,0)
 . I WKDT>ENDDT S STAGE=1,ENDDT=$$FMADD^XLFDT(DT,-32)
"RTN","IBY602PO",104,0)
 . I WKDT>ENDDT S DONE=1 Q 
"RTN","IBY602PO",105,0)
 . ; check for abnormal 
"RTN","IBY602PO",106,0)
 . S BAD=0
"RTN","IBY602PO",107,0)
 . S TQS=$$GET1^DIQ(365.1,TQIEN_",",.04,"I") ; TRANSMISSION STATUS
"RTN","IBY602PO",108,0)
 . S TQQ=$$GET1^DIQ(365.1,TQIEN_",",.11,"I") ; QUERY FLAG 
"RTN","IBY602PO",109,0)
 . ; If the QUERY FLAG IS "I" and not an EICD Transaction entry will purge/report.
"RTN","IBY602PO",110,0)
 . S:TQQ="I"&'$D(^IBCN(365.18,"B",TQIEN)) BAD=1
"RTN","IBY602PO",111,0)
 . ; If the QUERY FLAG is null OR the DATE/TIME CREATED is null or 
"RTN","IBY602PO",112,0)
 . ; TRANSMISSION STATUS not in STATLIST entry will purge/report
"RTN","IBY602PO",113,0)
 . S:(TQQ="")!('TQD)!('$F(STATLIST,","_TQS_",")) BAD=1
"RTN","IBY602PO",114,0)
 . Q:'BAD
"RTN","IBY602PO",115,0)
 . I STAGE=0 D
"RTN","IBY602PO",116,0)
 .. ; loop through the HL7 messages multiple and kill any response
"RTN","IBY602PO",117,0)
 .. ; records that are found for this transmission queue entry.
"RTN","IBY602PO",118,0)
 .. ; Preserve the TQ and any response that has DO NOT PURGE set to 1 (YES) 
"RTN","IBY602PO",119,0)
 .. S DNP=0,HLIEN=0,DIK="^IBCN(365,"
"RTN","IBY602PO",120,0)
 .. F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBY602PO",121,0)
 ... S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) Q:'DA
"RTN","IBY602PO",122,0)
 ... I +$$GET1^DIQ(365,DA_",",.11,"I") S DNP=1 Q 
"RTN","IBY602PO",123,0)
 ... D ^DIK
"RTN","IBY602PO",124,0)
 ... Q
"RTN","IBY602PO",125,0)
 .. ; now we can kill the TQ entry itself 
"RTN","IBY602PO",126,0)
 .. ; as long as there was no DO NOT PURGE responses
"RTN","IBY602PO",127,0)
 .. I 'DNP S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBY602PO",128,0)
 .. Q
"RTN","IBY602PO",129,0)
 . Q:'STAGE  ; not reporting abnormal yet
"RTN","IBY602PO",130,0)
 . S ACNT=ACNT+1 ; abnormal count 
"RTN","IBY602PO",131,0)
 . Q:MCNT>9  ; msg count, only want 10
"RTN","IBY602PO",132,0)
 . S MCNT=MCNT+1
"RTN","IBY602PO",133,0)
 . ;example of a detail line on the email 
"RTN","IBY602PO",134,0)
 . ;FEB 22, 2017@10:44:08 T#:xxxxxxxxxx *xxxxxxxxxxxxxxxxxxxxx *NO QFLAG 
"RTN","IBY602PO",135,0)
 . I 'TQD S $E(MSG(MCNT+2),1)="*NO DATE"
"RTN","IBY602PO",136,0)
 . I TQD S $E(MSG(MCNT+2),1)=$$GET1^DIQ(365.1,TQIEN_",",.06,"E") ;DATE/TIME CREATED
"RTN","IBY602PO",137,0)
 . S $E(MSG(MCNT+2),23)="T#:"_TQIEN
"RTN","IBY602PO",138,0)
 . I '$F(STATLIST,","_TQS_",") S $E(MSG(MCNT+2),40)=" *"_$$GET1^DIQ(365.1,TQIEN_",",.04,"E")
"RTN","IBY602PO",139,0)
 . S WKZZ=""
"RTN","IBY602PO",140,0)
 . I TQQ="" S WKZZ=" *NO QUERY FLAG"
"RTN","IBY602PO",141,0)
 . I TQQ="I" S WKZZ=" *QUERY FLAG: 'I'"
"RTN","IBY602PO",142,0)
 . S $E(MSG(MCNT+2),60)=WKZZ
"RTN","IBY602PO",143,0)
 ; send mailman msg
"RTN","IBY602PO",144,0)
 S WKDT=$$SITE^VASITE()
"RTN","IBY602PO",145,0)
 S MSG(1)="Patch IB*2.0*602 Post Install Issue Summary for station "_$P(WKDT,U,3)_":"_$P(WKDT,U,2)
"RTN","IBY602PO",146,0)
 S MSG(2)="-------------------------------------------------------------------------------"
"RTN","IBY602PO",147,0)
 I 'ACNT S MSG(3)=" NO ISSUES FOUND"
"RTN","IBY602PO",148,0)
 I ACNT D
"RTN","IBY602PO",149,0)
 . S MSG(MCNT+3)=""
"RTN","IBY602PO",150,0)
 . S MSG(MCNT+4)="TOTAL ISSUES DETECTED: "_ACNT
"RTN","IBY602PO",151,0)
 S IBXMY("vhaeinsurancerr@domain.ext")=""
"RTN","IBY602PO",152,0)
 D MSG^IBCNEUT5(,"Patch IB*2.0*602 Post Install Issue Summary ("_$P(WKDT,U,3)_")","MSG(",,.IBXMY)
"RTN","IBY602PO",153,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBY602PO",154,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBY602PO",155,0)
 Q
"RTN","IBY602PO",156,0)
 ;
"RTN","IBY602PO",157,0)
FIXRESP ;Populate Response entries with null date/time created.
"RTN","IBY602PO",158,0)
 N DIE,DR,DTM,RDTM,RIEN,RPDTM
"RTN","IBY602PO",159,0)
 S RIEN=0,RPDTM=$$FMADD^XLFDT(DT,-182)
"RTN","IBY602PO",160,0)
 F  S RIEN=$O(^IBCN(365,RIEN)) Q:'RIEN  D
"RTN","IBY602PO",161,0)
 . S TCNT=TCNT+1
"RTN","IBY602PO",162,0)
 . I $D(ZTQUEUED),TCNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBY602PO",163,0)
 . ;
"RTN","IBY602PO",164,0)
 . S DTM=$$GET1^DIQ(365,RIEN_",",.08,"I") I DTM Q
"RTN","IBY602PO",165,0)
 . S RDTM=$$GET1^DIQ(365,RIEN_",",.07,"I")
"RTN","IBY602PO",166,0)
 . I RDTM>RPDTM D
"RTN","IBY602PO",167,0)
 .. S ACNT=ACNT+1
"RTN","IBY602PO",168,0)
 .. I MCNT<6 D
"RTN","IBY602PO",169,0)
 ... S MCNT=MCNT+1
"RTN","IBY602PO",170,0)
 ... S $E(MSG(MCNT+2),1)="*NO DATE/TIME CR"
"RTN","IBY602PO",171,0)
 ... S $E(MSG(MCNT+2),23)="R#:"_$$GET1^DIQ(365,RIEN_",",.01)  ;MESSAGE CONTROL ID
"RTN","IBY602PO",172,0)
 ... S $E(MSG(MCNT+2),40)=" *"_$$GET1^DIQ(365,RIEN_",",.06)  ;TRANSMISSION STATUS
"RTN","IBY602PO",173,0)
 ... S $E(MSG(MCNT+2),60)=" *"_$$GET1^DIQ(365,RIEN_",",.1) ;RESPONSE TYPE
"RTN","IBY602PO",174,0)
 . S DTM=$S(RDTM:RDTM,1:"NOW")
"RTN","IBY602PO",175,0)
 . S DIE=365,DA=RIEN,DR=".08///"_DTM
"RTN","IBY602PO",176,0)
 . D ^DIE
"RTN","IBY602PO",177,0)
 Q
"RTN","IBY602PO",178,0)
 ;
"VER")
8.0^22.2
"BLD",11105,6)
^582
**END**
**END**

