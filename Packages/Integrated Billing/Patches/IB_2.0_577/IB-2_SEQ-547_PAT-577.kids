Released IB*2*577 SEQ #547
Extracted from mail message
**KIDS**:IB*2.0*577^

**INSTALL NAME**
IB*2.0*577
"BLD",10550,0)
IB*2.0*577^INTEGRATED BILLING^0^3170822^y
"BLD",10550,4,0)
^9.64PA^36^7
"BLD",10550,4,36,0)
36
"BLD",10550,4,36,2,0)
^9.641^36^2
"BLD",10550,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",10550,4,36,2,36,1,0)
^9.6411^.186^6
"BLD",10550,4,36,2,36,1,.116,0)
ZIP CODE
"BLD",10550,4,36,2,36,1,.126,0)
CLAIMS (INPT) PROCESS ZIP
"BLD",10550,4,36,2,36,1,.146,0)
APPEALS ADDRESS ZIP
"BLD",10550,4,36,2,36,1,.156,0)
INQUIRY ADDRESS ZIP CODE
"BLD",10550,4,36,2,36,1,.166,0)
CLAIMS (OPT) PROCESS ZIP
"BLD",10550,4,36,2,36,1,.186,0)
CLAIMS (RX) ZIP
"BLD",10550,4,36,2,36.017,0)
277EDI ID NUMBER  (sub-file)
"BLD",10550,4,36,2,36.017,1,0)
^9.6411^^
"BLD",10550,4,36,222)
y^y^p^^^^n^^n
"BLD",10550,4,36,224)

"BLD",10550,4,350.8,0)
350.8
"BLD",10550,4,350.8,222)
n^n^f^^n^^y^o^n
"BLD",10550,4,350.8,224)
I $$INC3508^IBY577PR(Y)
"BLD",10550,4,350.9,0)
350.9
"BLD",10550,4,350.9,2,0)
^9.641^350.9004^1
"BLD",10550,4,350.9,2,350.9004,0)
PAY-TO PROVIDERS  (sub-file)
"BLD",10550,4,350.9,2,350.9004,1,0)
^9.6411^1.02^2
"BLD",10550,4,350.9,2,350.9004,1,1.01,0)
STREET ADDRESS 1
"BLD",10550,4,350.9,2,350.9004,1,1.02,0)
STREET ADDRESS 2
"BLD",10550,4,350.9,222)
y^y^p^^^^n^^n
"BLD",10550,4,350.9,224)

"BLD",10550,4,355.93,0)
355.93
"BLD",10550,4,355.93,2,0)
^9.641^355.93^1
"BLD",10550,4,355.93,2,355.93,0)
IB NON/OTHER VA BILLING PROVIDER  (File-top level)
"BLD",10550,4,355.93,2,355.93,1,0)
^9.6411^.05^2
"BLD",10550,4,355.93,2,355.93,1,.01,0)
NAME
"BLD",10550,4,355.93,2,355.93,1,.05,0)
STREET ADDRESS
"BLD",10550,4,355.93,222)
y^y^p^^^^n^^n
"BLD",10550,4,355.93,224)

"BLD",10550,4,364.6,0)
364.6
"BLD",10550,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",10550,4,364.6,223)

"BLD",10550,4,364.6,224)
I $$INCLUDE^IBY577PR(6,Y)
"BLD",10550,4,364.7,0)
364.7
"BLD",10550,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",10550,4,364.7,223)

"BLD",10550,4,364.7,224)
I $$INCLUDE^IBY577PR(7,Y)
"BLD",10550,4,399,0)
399
"BLD",10550,4,399,2,0)
^9.641^399.0304^2
"BLD",10550,4,399,2,399,0)
BILL/CLAIMS  (File-top level)
"BLD",10550,4,399,2,399,1,0)
^9.6411^278^13
"BLD",10550,4,399,2,399,1,.21,0)
CURRENT BILL PAYER SEQUENCE
"BLD",10550,4,399,2,399,1,163,0)
TREATMENT AUTHORIZATION CODE
"BLD",10550,4,399,2,399,1,202,0)
OFFSET AMOUNT
"BLD",10550,4,399,2,399,1,230,0)
SECONDARY AUTHORIZATION CODE
"BLD",10550,4,399,2,399,1,231,0)
TERTIARY AUTHORIZATION CODE
"BLD",10550,4,399,2,399,1,253,0)
PRIMARY REFERRAL NUMBER
"BLD",10550,4,399,2,399,1,254,0)
SECONDARY REFERRAL NUMBER
"BLD",10550,4,399,2,399,1,255,0)
TERTIARY REFERRAL NUMBER
"BLD",10550,4,399,2,399,1,261,0)
PROPERTY/CASUALTY CLAIM NUMBER
"BLD",10550,4,399,2,399,1,271,0)
AMBULANCE P/U ADDRESS 1
"BLD",10550,4,399,2,399,1,272,0)
AMBULANCE P/U ADDRESS 2
"BLD",10550,4,399,2,399,1,277,0)
AMBULANCE D/O ADDRESS 1
"BLD",10550,4,399,2,399,1,278,0)
AMBULANCE D/O ADDRESS 2
"BLD",10550,4,399,2,399.0304,0)
PROCEDURES  (sub-file)
"BLD",10550,4,399,2,399.0304,1,0)
^9.6411^53^3
"BLD",10550,4,399,2,399.0304,1,52,0)
UNITS/BASIS OF MEASUREMENT
"BLD",10550,4,399,2,399.0304,1,53,0)
NDC
"BLD",10550,4,399,2,399.0304,1,54,0)
UNITS
"BLD",10550,4,399,222)
y^y^p^^^^n^^n
"BLD",10550,4,399,224)

"BLD",10550,4,"APDD",36,36)

"BLD",10550,4,"APDD",36,36,.116)

"BLD",10550,4,"APDD",36,36,.126)

"BLD",10550,4,"APDD",36,36,.146)

"BLD",10550,4,"APDD",36,36,.156)

"BLD",10550,4,"APDD",36,36,.166)

"BLD",10550,4,"APDD",36,36,.186)

"BLD",10550,4,"APDD",36,36.017)

"BLD",10550,4,"APDD",350.9,350.9004)

"BLD",10550,4,"APDD",350.9,350.9004,1.01)

"BLD",10550,4,"APDD",350.9,350.9004,1.02)

"BLD",10550,4,"APDD",355.93,355.93)

"BLD",10550,4,"APDD",355.93,355.93,.01)

"BLD",10550,4,"APDD",355.93,355.93,.05)

"BLD",10550,4,"APDD",399,399)

"BLD",10550,4,"APDD",399,399,.21)

"BLD",10550,4,"APDD",399,399,163)

"BLD",10550,4,"APDD",399,399,202)

"BLD",10550,4,"APDD",399,399,230)

"BLD",10550,4,"APDD",399,399,231)

"BLD",10550,4,"APDD",399,399,253)

"BLD",10550,4,"APDD",399,399,254)

"BLD",10550,4,"APDD",399,399,255)

"BLD",10550,4,"APDD",399,399,261)

"BLD",10550,4,"APDD",399,399,271)

"BLD",10550,4,"APDD",399,399,272)

"BLD",10550,4,"APDD",399,399,277)

"BLD",10550,4,"APDD",399,399,278)

"BLD",10550,4,"APDD",399,399.0304)

"BLD",10550,4,"APDD",399,399.0304,52)

"BLD",10550,4,"APDD",399,399.0304,53)

"BLD",10550,4,"APDD",399,399.0304,54)

"BLD",10550,4,"B",36,36)

"BLD",10550,4,"B",350.8,350.8)

"BLD",10550,4,"B",350.9,350.9)

"BLD",10550,4,"B",355.93,355.93)

"BLD",10550,4,"B",364.6,364.6)

"BLD",10550,4,"B",364.7,364.7)

"BLD",10550,4,"B",399,399)

"BLD",10550,6)
11^
"BLD",10550,6.3)
38
"BLD",10550,"ABPKG")
n
"BLD",10550,"INI")
IBY577PR
"BLD",10550,"INIT")
IBY577PO
"BLD",10550,"KRN",0)
^9.67PA^779.2^20
"BLD",10550,"KRN",.4,0)
.4
"BLD",10550,"KRN",.401,0)
.401
"BLD",10550,"KRN",.402,0)
.402
"BLD",10550,"KRN",.403,0)
.403
"BLD",10550,"KRN",.5,0)
.5
"BLD",10550,"KRN",.84,0)
.84
"BLD",10550,"KRN",3.6,0)
3.6
"BLD",10550,"KRN",3.8,0)
3.8
"BLD",10550,"KRN",9.2,0)
9.2
"BLD",10550,"KRN",9.8,0)
9.8
"BLD",10550,"KRN",9.8,"NM",0)
^9.68A^14^14
"BLD",10550,"KRN",9.8,"NM",1,0)
IBCU7^^0^B116490042
"BLD",10550,"KRN",9.8,"NM",2,0)
IBCBB1^^0^B125745915
"BLD",10550,"KRN",9.8,"NM",3,0)
IBCBB11^^0^B112052327
"BLD",10550,"KRN",9.8,"NM",4,0)
IBCEF11^^0^B86419290
"BLD",10550,"KRN",9.8,"NM",5,0)
IBCF23A^^0^B39049121
"BLD",10550,"KRN",9.8,"NM",6,0)
IBCEF22^^0^B97383500
"BLD",10550,"KRN",9.8,"NM",7,0)
IBCF33^^0^B35272389
"BLD",10550,"KRN",9.8,"NM",8,0)
IBCEF77^^0^B27726430
"BLD",10550,"KRN",9.8,"NM",9,0)
IBJPS3^^0^B122000376
"BLD",10550,"KRN",9.8,"NM",10,0)
IBCSC9^^0^B9101884
"BLD",10550,"KRN",9.8,"NM",11,0)
IBCSC8^^0^B9956514
"BLD",10550,"KRN",9.8,"NM",12,0)
IBCEST^^0^B96695131
"BLD",10550,"KRN",9.8,"NM",13,0)
IBCERP7^^0^B32855168
"BLD",10550,"KRN",9.8,"NM",14,0)
IBCCC2^^0^B116481460
"BLD",10550,"KRN",9.8,"NM","B","IBCBB1",2)

"BLD",10550,"KRN",9.8,"NM","B","IBCBB11",3)

"BLD",10550,"KRN",9.8,"NM","B","IBCCC2",14)

"BLD",10550,"KRN",9.8,"NM","B","IBCEF11",4)

"BLD",10550,"KRN",9.8,"NM","B","IBCEF22",6)

"BLD",10550,"KRN",9.8,"NM","B","IBCEF77",8)

"BLD",10550,"KRN",9.8,"NM","B","IBCERP7",13)

"BLD",10550,"KRN",9.8,"NM","B","IBCEST",12)

"BLD",10550,"KRN",9.8,"NM","B","IBCF23A",5)

"BLD",10550,"KRN",9.8,"NM","B","IBCF33",7)

"BLD",10550,"KRN",9.8,"NM","B","IBCSC8",11)

"BLD",10550,"KRN",9.8,"NM","B","IBCSC9",10)

"BLD",10550,"KRN",9.8,"NM","B","IBCU7",1)

"BLD",10550,"KRN",9.8,"NM","B","IBJPS3",9)

"BLD",10550,"KRN",19,0)
19
"BLD",10550,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",10550,"KRN",19,"NM",1,0)
IB HCCH PAYER ID REPORT^^0
"BLD",10550,"KRN",19,"NM",2,0)
IB SYSTEM DEFINITION MENU^^2
"BLD",10550,"KRN",19,"NM","B","IB HCCH PAYER ID REPORT",1)

"BLD",10550,"KRN",19,"NM","B","IB SYSTEM DEFINITION MENU",2)

"BLD",10550,"KRN",19.1,0)
19.1
"BLD",10550,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",10550,"KRN",101,0)
101
"BLD",10550,"KRN",101,"NM",0)
^9.68A^7^7
"BLD",10550,"KRN",101,"NM",1,0)
IBJP IB PAY-TO ASSOCIATIONS MENU^^0
"BLD",10550,"KRN",101,"NM",2,0)
IBJP IB PAY-TO DIVISION ADD^^0
"BLD",10550,"KRN",101,"NM",3,0)
IBJP IB PAY-TO PROVIDER ADD^^0
"BLD",10550,"KRN",101,"NM",4,0)
IBJP IB PAY-TO PROVIDER DEL^^0
"BLD",10550,"KRN",101,"NM",5,0)
IBJP IB PAY-TO PROVIDER DIVISIONS^^0
"BLD",10550,"KRN",101,"NM",6,0)
IBJP IB PAY-TO PROVIDER EDIT^^0
"BLD",10550,"KRN",101,"NM",7,0)
IBJP IB PAY-TO PROVIDERS MENU^^0
"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO ASSOCIATIONS MENU",1)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO DIVISION ADD",2)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO PROVIDER ADD",3)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO PROVIDER DEL",4)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO PROVIDER DIVISIONS",5)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO PROVIDER EDIT",6)

"BLD",10550,"KRN",101,"NM","B","IBJP IB PAY-TO PROVIDERS MENU",7)

"BLD",10550,"KRN",409.61,0)
409.61
"BLD",10550,"KRN",771,0)
771
"BLD",10550,"KRN",779.2,0)
779.2
"BLD",10550,"KRN",870,0)
870
"BLD",10550,"KRN",8989.51,0)
8989.51
"BLD",10550,"KRN",8989.52,0)
8989.52
"BLD",10550,"KRN",8994,0)
8994
"BLD",10550,"KRN","B",.4,.4)

"BLD",10550,"KRN","B",.401,.401)

"BLD",10550,"KRN","B",.402,.402)

"BLD",10550,"KRN","B",.403,.403)

"BLD",10550,"KRN","B",.5,.5)

"BLD",10550,"KRN","B",.84,.84)

"BLD",10550,"KRN","B",3.6,3.6)

"BLD",10550,"KRN","B",3.8,3.8)

"BLD",10550,"KRN","B",9.2,9.2)

"BLD",10550,"KRN","B",9.8,9.8)

"BLD",10550,"KRN","B",19,19)

"BLD",10550,"KRN","B",19.1,19.1)

"BLD",10550,"KRN","B",101,101)

"BLD",10550,"KRN","B",409.61,409.61)

"BLD",10550,"KRN","B",771,771)

"BLD",10550,"KRN","B",779.2,779.2)

"BLD",10550,"KRN","B",870,870)

"BLD",10550,"KRN","B",8989.51,8989.51)

"BLD",10550,"KRN","B",8989.52,8989.52)

"BLD",10550,"KRN","B",8994,8994)

"BLD",10550,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10550,"QUES",0)
^9.62^^
"BLD",10550,"REQB",0)
^9.611^6^6
"BLD",10550,"REQB",1,0)
IB*2.0*522^1
"BLD",10550,"REQB",2,0)
IB*2.0*547^1
"BLD",10550,"REQB",3,0)
IB*2.0*550^1
"BLD",10550,"REQB",4,0)
IB*2.0*554^1
"BLD",10550,"REQB",5,0)
IB*2.0*407^1
"BLD",10550,"REQB",6,0)
IB*2.0*576^1
"BLD",10550,"REQB","B","IB*2.0*407",5)

"BLD",10550,"REQB","B","IB*2.0*522",1)

"BLD",10550,"REQB","B","IB*2.0*547",2)

"BLD",10550,"REQB","B","IB*2.0*550",3)

"BLD",10550,"REQB","B","IB*2.0*554",4)

"BLD",10550,"REQB","B","IB*2.0*576",6)

"DATA",350.8,295,0)
IB365^Units & Units/Basis of Measurement are Required if NDC exists.^IB365^1^1
"DATA",364.6,170,0)
8^N^^55^1^^0^2^60^Lab/Facility Name^^1
"DATA",364.6,171,0)
8^N^^55^1^^0^3^55^Lab/Facility Address 1^^1
"DATA",364.6,956,0)
8^N^^107^1^^0^9^50^Other Payer Prior Auth/Referral #^^1
"DATA",364.6,957,0)
8^N^^36^1^^0^4^50^Prior Authorization #^^1
"DATA",364.6,970,0)
8^N^^57^1^^0^13^10^CLIA #^0^1
"DATA",364.6,1930,0)
8^N^^16^1^^0^7^55^Pay-To Provider Address 1^^1
"DATA",364.6,1931,0)
8^N^^16^1^^0^8^55^Pay-To Provider Address 2^^1
"DATA",364.6,1940,0)
8^N^^104.8^1^^0^3^55^Ambulance Address 1^0^1^0
"DATA",364.6,1941,0)
8^N^^104.8^1^^0^4^55^Ambulance Address 2^0^1^0
"DATA",364.6,1968,0)
8^N^^36^1^^0^9^50^Referral Number^^1
"DATA",364.6,1975,0)
8^N^^45^1^^0^6^50^Prop/Cas Claim Number^^1
"DATA",364.6,2025,0)
8^N^^112^1^^^12^50^Other Payer Referral Number^0
"DATA",364.6,2371,0)
8^N^^55^1^^0^8^1^BLANK^^1
"DATA",364.7,804,0)
808^N^5^^^^N
"DATA",364.7,804,1)
N Z,IBZ K IBXDATA S (Z,IBZ)=0 F  S IBZ=$O(IBXSAVE("CCOB",IBZ)) Q:'IBZ  I IBZ<$$COBN^IBCEF(IBXIEN) S Z=Z+1,IBXDATA(Z)=$E("PST",IBZ) I Z>1 D ID^IBCEF2(Z,"COB1")
"DATA",364.7,804,3,0)
^364.73^5^5^3170417^^^^
"DATA",364.7,804,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,804,3,2,0)
possible for the data element in the IBXDATA array.  It relies on the
"DATA",364.7,804,3,3,0)
existence of the IBXSAVE("CCOB",COBSEQ) array that was previously extracted.
"DATA",364.7,804,3,4,0)
For other than the first occurrence, the RECORD ID 'COB1' must be output.
"DATA",364.7,804,3,5,0)
Only output 1 record per COB sequence.
"DATA",364.7,939,0)
977^N^5^^^^N
"DATA",364.7,939,1)
K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P(IBXSAVE("OUTPT",Z),U,16)'="" S IBXDATA(Z)=+$TR($J($P(IBXSAVE("OUTPT",Z),U,16),11,3)," .")
"DATA",364.7,939,3,0)
^364.73^1^1^3170508^^^^
"DATA",364.7,939,3,1,0)
This element is blank.
"DATA",364.7,941,0)
979^N^5^^^^N
"DATA",364.7,941,1)
K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P(IBXSAVE("OUTPT",Z),U,16)'="" S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U,17) I IBXDATA(Z)="" S IBXDATA(Z)="UN"
"DATA",364.7,941,3,0)
^364.73^1^1^3170413^^^^
"DATA",364.7,941,3,1,0)
This element is blank.
"DATA",364.7,1015,0)
1014^N^5^^^^N
"DATA",364.7,1015,1)
S IBXDATA="577.0" I '$$PROD^XUPROD(1) S $E(IBXDATA,11)="D"
"DATA",364.7,1015,3,0)
^364.73^7^7^3170417^^^^
"DATA",364.7,1015,3,1,0)
This field contains the VistA IB patch# that pertains to the
"DATA",364.7,1015,3,2,0)
applicable changes in the claim map.  Austin uses this field to determine
"DATA",364.7,1015,3,3,0)
which set of EDI claim maps to use when processing the EDI claims.
"DATA",364.7,1015,3,4,0)

"DATA",364.7,1015,3,5,0)
If the EDI claims are being transmitted from a non-production account,
"DATA",364.7,1015,3,6,0)
then the "D" in the 11th position indicates to Austin that it is test
"DATA",364.7,1015,3,7,0)
data.
"DATA",364.7,1406,0)
1706^N^5^^^^N
"DATA",364.7,1406,1)
N Z,A,B,C F Z=1:1 Q:'$D(^TMP($J,"IBC-RC",Z))  S B=^(Z),C=$$B43^IBCEF77(B),A=$S(+B=1:$S(C]"":C,1:$E($P(B,U,3),1,24)),+B=2:$S(C]"":C,1:$E($P(B,U,2),6,30)),1:$S(C]"":C,1:$E($P(B,U,2),1,25))) S:Z'>22 IBXDATA(Z)=A D:Z>22 CKREV^IBCEF3(Z,A)
"DATA",364.7,1406,3,0)
^364.73^12^12^3170504^^^
"DATA",364.7,1406,3,1,0)
This data element is a group data element where more than one occurrence
"DATA",364.7,1406,3,2,0)
might be expected.  It relies on the presence of data in array
"DATA",364.7,1406,3,3,0)
IBXSAVE("REV",n) extracted previously.  The first '^' piece of the array
"DATA",364.7,1406,3,4,0)
indicates whether this is a 'normal' service data line (=1) or a text line
"DATA",364.7,1406,3,5,0)
(=2 or =3).  For a normal service line, the data is found in the third '^'
"DATA",364.7,1406,3,6,0)
piece of the array.  For text line where the first piece = 2, the text is
"DATA",364.7,1406,3,7,0)
assumed TO start in column 1, so the data is extracted from positions 
"DATA",364.7,1406,3,8,0)
6-30. For text line where the first piece = 3, the text is assumed to
"DATA",364.7,1406,3,9,0)
start in column 6, so the data for this field is extracted from positions
"DATA",364.7,1406,3,10,0)
1-25. Since only 22 lines of service line can appear on one form, if there
"DATA",364.7,1406,3,11,0)
are more than 22 lines, subsequent pages are forced for the remaining data
"DATA",364.7,1406,3,12,0)
lines after 22.
"DATA",364.7,1537,0)
1837^N^5^^^^N
"DATA",364.7,1537,1)
N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U,3)
"DATA",364.7,1538,0)
1838^N^5^^^^N
"DATA",364.7,1538,1)
N Z K IBXDATA F Z=1,2 S IBXDATA(Z)=$P($G(IBXSAVE("OI_PSIDS",Z)),U,4)
"DATA",364.7,1551,0)
1851^N^5^^^^N
"DATA",364.7,1551,1)
D CLEANUP^IBCEF78(.IBXSAVE)
"DATA",364.7,1927,0)
2227^N^56^^^^N
"DATA",364.7,1927,1)
N Z,Z1,IBZ M IBZ=IBXDATA K IBXDATA Q:$$COBN^IBCEF(IBXIEN)=1  F Z=1,2 Q:Z=2&($$COBN^IBCEF(IBXIEN)=2)  I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$G(IBZ(Z))'="" S IBXDATA(Z)=IBZ(Z)
"DATA",364.7,1927,3,0)
^364.73^10^10^3170417^^^^
"DATA",364.7,1927,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1927,3,2,0)
possible for the data element in the IBXDATA array. If any other insurance
"DATA",364.7,1927,3,3,0)
form locator 64 data is found, the data is output.
"DATA",364.7,1927,3,4,0)
  
"DATA",364.7,1927,3,5,0)
 This is OI1A-03 also known as the ICN/DCN for the MRA secondary claims. 
"DATA",364.7,1927,3,6,0)
If there is data here in OI1A-03, then we cannot transmit the Other Payer
"DATA",364.7,1927,3,7,0)
secondary ID and qualifier #2.  This is in the OI6 segment, pieces 7 and 
"DATA",364.7,1927,3,8,0)
8. For this calculation, OI6-6.9 is set-up very similar to this OI1A-03
"DATA",364.7,1927,3,9,0)
piece to see if there is an ICN/DCN present.   So any changes here should
"DATA",364.7,1927,3,10,0)
also be made to OI6-6.9 as a calculate only field.
"DATA",364.7,1949,0)
2236^N^5^^^^N^0
"DATA",364.7,1949,1)
K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  I $P(IBXSAVE("INPT",Z),U,12)'="" S IBXDATA(Z)=+$TR($J($P(IBXSAVE("INPT",Z),U,12),11,3)," .")
"DATA",364.7,1949,3,0)
^364.73^2^2^3170508^^^
"DATA",364.7,1949,3,1,0)
If the user added an NDC to this line of the claim, they are then allowed 
"DATA",364.7,1949,3,2,0)
to enter a unit. MRD;IB*2.0*516
"DATA",364.7,1950,0)
2237^N^5^^^^N^0
"DATA",364.7,1950,1)
K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  I $P(IBXSAVE("INPT",Z),U,12)'="" S IBXDATA(Z)=$P(IBXSAVE("INPT",Z),U,13) I IBXDATA(Z)="" S IBXDATA(Z)="UN"
"DATA",364.7,1950,3,0)
^364.73^3^3^3170413^^^
"DATA",364.7,1950,3,1,0)
If the user added an NDC to this line of the claim, there should also be 
"DATA",364.7,1950,3,2,0)
a value in the unit field ($P(IBXSAVE("INPT",Z),U,12), and if there is, 
"DATA",364.7,1950,3,3,0)
then this field should be 'UN'. MRD;IB*2.0*516
"DATA",364.7,1955,0)
2257^N^101^^^^N
"DATA",364.7,1955,1)
N IBZ,IBW,Z,Z0 D F^IBCEF("N-ALL AUTH CODES","IBW") M IBZ=IBXDATA K IBXDATA I $O(IBXSAVE(1,0)) S (Z,Z0)=0 F  S Z=$O(IBXSAVE(1,Z)),Z0=Z0+1 Q:'Z  I Z<($F("PST",IBXSAVE(1))-1)!($G(IBW(Z))]"") S IBXDATA(Z0)=IBXSAVE(1,Z) I Z0>1 D ID^IBCEF2(Z0,"OI1A")
"DATA",364.7,1955,3,0)
^364.73^8^8^3170417^^^^
"DATA",364.7,1955,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1955,3,2,0)
possible for the data element in the IBXDATA array.  The IBXSAVE(1) 
"DATA",364.7,1955,3,3,0)
variable holds the indicator of which insurance
"DATA",364.7,1955,3,4,0)
[(P)rimary/(S)econdary/(T)ertiary] is currently responsible for the
"DATA",364.7,1955,3,5,0)
bill.    Using this data as a guide, the next insurance for the primary is
"DATA",364.7,1955,3,6,0)
secondary, then tertiary.  For secondary, it's primary then tertiary, and
"DATA",364.7,1955,3,7,0)
for tertiary, it's primary, then secondary. For other than the first
"DATA",364.7,1955,3,8,0)
occurrence, the RECORD ID 'OI1A' must be output.
"DATA",364.7,1956,0)
2371^N^5^^^^N
"DATA",364.7,1956,1)
S IBXDATA=""
"DATA",364.7,1956,3,0)
^364.73^2^2^3170510^^
"DATA",364.7,1956,3,1,0)
JRA IB*2.0*577 Created to replace SUB (Seq 55), field 8 (CLIA #) which was
"DATA",364.7,1956,3,2,0)
moved to SUB2 (Seq 57), field 13.
"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^y^p^^^^n^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,.116)

"FIA",36,36,.126)

"FIA",36,36,.146)

"FIA",36,36,.156)

"FIA",36,36,.166)

"FIA",36,36,.186)

"FIA",36,36,17)

"FIA",36,36.017)
0
"FIA",350.8)
IB ERROR
"FIA",350.8,0)
^IBE(350.8,
"FIA",350.8,0,0)
350.8I
"FIA",350.8,0,1)
n^n^f^^n^^y^o^n
"FIA",350.8,0,10)

"FIA",350.8,0,11)
I $$INC3508^IBY577PR(Y)
"FIA",350.8,0,"RLRO")

"FIA",350.8,0,"VR")
2.0^IB
"FIA",350.8,350.8)
0
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9004)
1
"FIA",350.9,350.9004,1.01)

"FIA",350.9,350.9004,1.02)

"FIA",355.93)
IB NON/OTHER VA BILLING PROVIDER
"FIA",355.93,0)
^IBA(355.93,
"FIA",355.93,0,0)
355.93I
"FIA",355.93,0,1)
y^y^p^^^^n^^n
"FIA",355.93,0,10)

"FIA",355.93,0,11)

"FIA",355.93,0,"RLRO")

"FIA",355.93,0,"VR")
2.0^IB
"FIA",355.93,355.93)
1
"FIA",355.93,355.93,.01)

"FIA",355.93,355.93,.05)

"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I $$INCLUDE^IBY577PR(6,Y)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $$INCLUDE^IBY577PR(7,Y)
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^y^p^^^^n^^n
"FIA",399,0,10)

"FIA",399,0,11)

"FIA",399,0,"RLRO")

"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399,.21)

"FIA",399,399,163)

"FIA",399,399,202)

"FIA",399,399,230)

"FIA",399,399,231)

"FIA",399,399,253)

"FIA",399,399,254)

"FIA",399,399,255)

"FIA",399,399,261)

"FIA",399,399,271)

"FIA",399,399,272)

"FIA",399,399,277)

"FIA",399,399,278)

"FIA",399,399.0304)
1
"FIA",399,399.0304,52)

"FIA",399,399.0304,53)

"FIA",399,399.0304,54)

"INI")
IBY577PR
"INIT")
IBY577PO
"IX",36,36,"AEDIX",0)
36^AEDIX^277STAT TRANSACTION PAYER STORAGE US129^MU^^R^IR^W^36.017^^^^^S
"IX",36,36,"AEDIX",.1,0)
^^2^2^3170508^
"IX",36,36,"AEDIX",.1,1,0)
This cross reference allows for reporting of 277STAT updates to the EDI 
"IX",36,36,"AEDIX",.1,2,0)
number to determine the correct Payer ID.
"IX",36,36,"AEDIX",1)
S ^DIC(36,"AEDIX",X(1),DA(1),X(2),X(3))=X(4)
"IX",36,36,"AEDIX",1.4)
S X=(X(1)]""&(X(2)]"")&(X(3)]""))
"IX",36,36,"AEDIX",2)
Q
"IX",36,36,"AEDIX",11.1,0)
^.114IA^4^4
"IX",36,36,"AEDIX",11.1,1,0)
1^F^36.017^.02^10^^F
"IX",36,36,"AEDIX",11.1,2,0)
2^F^36.017^.01^30^^F
"IX",36,36,"AEDIX",11.1,3,0)
3^F^36.017^.03^1^^F
"IX",36,36,"AEDIX",11.1,4,0)
4^F^36.017^.04^30^^F
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"C",0)
364.6^C^Field name lookup^R^^F^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"C",1)
S ^IBA(364.6,"C",$E(X,1,40),DA)=""
"IX",364.6,364.6,"C",2)
K ^IBA(364.6,"C",$E(X,1,40),DA)
"IX",364.6,364.6,"C",2.5)
K ^IBA(364.6,"C")
"IX",364.6,364.6,"C",11.1,0)
^.114IA^1^1
"IX",364.6,364.6,"C",11.1,1,0)
1^F^364.6^.1^40^1^F
"IX",364.6,364.6,"C",11.1,1,2)
S X=$$UP^XLFSTR(X)
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"KRN",19,3102,-1)
2^2
"KRN",19,3102,0)
IB SYSTEM DEFINITION MENU^MCCR System Definition Menu^^M^568^IB SUPERVISOR^^^^^y^230
"KRN",19,3102,10,0)
^19.01PI^22^22
"KRN",19,3102,10,22,0)
2922455^HID
"KRN",19,3102,10,22,"^")
IB HCCH PAYER ID REPORT
"KRN",19,3102,"U")
MCCR SYSTEM DEFINITION MENU
"KRN",19,2922455,-1)
0^1
"KRN",19,2922455,0)
IB HCCH PAYER ID REPORT^HCCH Payer ID Report^^R^^^^^^^^INTEGRATED BILLING^^
"KRN",19,2922455,1,0)
^19.06^3^3^3170509^^
"KRN",19,2922455,1,1,0)
This is a report based on the 277STAT transactions
"KRN",19,2922455,1,2,0)
from Health Care Clearing House to determine if it updated or 
"KRN",19,2922455,1,3,0)
attempted to update the Payer Id.
"KRN",19,2922455,10.1)

"KRN",19,2922455,20)

"KRN",19,2922455,25)
ENT^IBCERP7
"KRN",19,2922455,99)
64412,68000
"KRN",19,2922455,"U")
HCCH PAYER ID REPORT
"KRN",101,7457,-1)
0^5
"KRN",101,7457,0)
IBJP IB PAY-TO PROVIDER DIVISIONS^Associate Divisions^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,7457,4)
^^^AD
"KRN",101,7457,20)
D EN^IBJPS4(0)
"KRN",101,7457,99)
64461,70041
"KRN",101,7458,-1)
0^6
"KRN",101,7458,0)
IBJP IB PAY-TO PROVIDER EDIT^Edit Provider^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,7458,4)
^^^EP
"KRN",101,7458,20)
D PRVEDIT^IBJPS3(0)
"KRN",101,7458,99)
64461,70041
"KRN",101,7459,-1)
0^4
"KRN",101,7459,0)
IBJP IB PAY-TO PROVIDER DEL^Delete Provider^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,7459,4)
^^^DP
"KRN",101,7459,20)
D PRVDEL^IBJPS3(0)
"KRN",101,7459,99)
64461,70041
"KRN",101,7460,-1)
0^3
"KRN",101,7460,0)
IBJP IB PAY-TO PROVIDER ADD^Add Provider^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,7460,4)
^^^AP
"KRN",101,7460,20)
D PRVADD^IBJPS3(0)
"KRN",101,7460,99)
64461,70041
"KRN",101,7461,-1)
0^7
"KRN",101,7461,0)
IBJP IB PAY-TO PROVIDERS MENU^Pay-To Providers Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,7461,4)
26^4
"KRN",101,7461,10,0)
^101.01PA^4^4
"KRN",101,7461,10,1,0)
7460^AP^2^
"KRN",101,7461,10,1,"^")
IBJP IB PAY-TO PROVIDER ADD
"KRN",101,7461,10,2,0)
7459^DP^7^
"KRN",101,7461,10,2,"^")
IBJP IB PAY-TO PROVIDER DEL
"KRN",101,7461,10,3,0)
7458^EP^5^
"KRN",101,7461,10,3,"^")
IBJP IB PAY-TO PROVIDER EDIT
"KRN",101,7461,10,4,0)
7457^AS^8^
"KRN",101,7461,10,4,"^")
IBJP IB PAY-TO PROVIDER DIVISIONS
"KRN",101,7461,24)
I $D(^XUSEC("IB EDIT PAY-TO",DUZ))
"KRN",101,7461,26)
D SHOW^VALM
"KRN",101,7461,99)
64461,70041
"KRN",101,7462,-1)
0^2
"KRN",101,7462,0)
IBJP IB PAY-TO DIVISION ADD^Associate Division^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,7462,4)
^^^AD
"KRN",101,7462,20)
D DIVADD^IBJPS4(0)
"KRN",101,7462,99)
64461,70041
"KRN",101,7463,-1)
0^1
"KRN",101,7463,0)
IBJP IB PAY-TO ASSOCIATIONS MENU^Pay-To Associations Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,7463,4)
40^4
"KRN",101,7463,10,0)
^101.01PA^1^1
"KRN",101,7463,10,1,0)
7462^AS^3^
"KRN",101,7463,10,1,"^")
IBJP IB PAY-TO DIVISION ADD
"KRN",101,7463,26)
D SHOW^VALM
"KRN",101,7463,99)
64461,70041
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
577^3170822^520824635
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","IBCBB1")
0^2^B125745915^B124097608
"RTN","IBCBB1",1,0)
IBCBB1 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
"RTN","IBCBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232,280,155,320,343,349,363,371,395,384,432,447,488,554,577**;21-MAR-94;Build 38
"RTN","IBCBB1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB1",4,0)
 ;
"RTN","IBCBB1",5,0)
 ; *** Begin IB*2.0*488 VD  (Issue 46 RBN)
"RTN","IBCBB1",6,0)
 N I
"RTN","IBCBB1",7,0)
 S I=""
"RTN","IBCBB1",8,0)
 S X=+$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCBB1",9,0)
 I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
"RTN","IBCBB1",10,0)
 I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,1:4))
"RTN","IBCBB1",11,0)
 S I=$$UP^XLFSTR(I)
"RTN","IBCBB1",12,0)
 I (I'=""&(I["PRNT")&($G(IBER)'["IB488")) D 
"RTN","IBCBB1",13,0)
 . S IBER=$G(IBER)_"IB488;"
"RTN","IBCBB1",14,0)
 ;
"RTN","IBCBB1",15,0)
 ; Cause an error if FORCED TO PRINT TO CLEARINGHOUSE
"RTN","IBCBB1",16,0)
 I $P($G(^DGCR(399,IBIFN,"TX")),U,8)=2 D
"RTN","IBCBB1",17,0)
 . S IBER=$G(IBER)_"IB489;"
"RTN","IBCBB1",18,0)
 ;
"RTN","IBCBB1",19,0)
 ; Cause a fatal error if the claim has no procedures & is NOT a UB-04 Inpatient claim.
"RTN","IBCBB1",20,0)
 I +$O(^DGCR(399,IBIFN,"CP",0))=0 D
"RTN","IBCBB1",21,0)
 .I $$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) Q   ; inpatient UB-04 check
"RTN","IBCBB1",22,0)
 .I '$$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) D  Q      ; Outpatient Institutional Claim.
"RTN","IBCBB1",23,0)
 ..I IBER["IB352" Q
"RTN","IBCBB1",24,0)
 ..S IBER=IBER_"IB352;"
"RTN","IBCBB1",25,0)
 .;
"RTN","IBCBB1",26,0)
 .; Professional claim
"RTN","IBCBB1",27,0)
 .I IBER["IB353" Q
"RTN","IBCBB1",28,0)
 .S IBER=IBER_"IB353;"
"RTN","IBCBB1",29,0)
 .Q
"RTN","IBCBB1",30,0)
 ; *** End IB*2.0*488 -- VD
"RTN","IBCBB1",31,0)
 ;
"RTN","IBCBB1",32,0)
 ;MAP TO DGCRBB1
"RTN","IBCBB1",33,0)
 ;
"RTN","IBCBB1",34,0)
% ;Bill Status
"RTN","IBCBB1",35,0)
 N Z,Z0,Z1,IBFT
"RTN","IBCBB1",36,0)
 I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
"RTN","IBCBB1",37,0)
 ;
"RTN","IBCBB1",38,0)
 ;Statement Covers From
"RTN","IBCBB1",39,0)
 I IBFDT="" S IBER=IBER_"IB061;"
"RTN","IBCBB1",40,0)
 I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
"RTN","IBCBB1",41,0)
 I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
"RTN","IBCBB1",42,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",43,0)
 ; if inpat - from date must not be prior to admit date.
"RTN","IBCBB1",44,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
"RTN","IBCBB1",45,0)
 ;
"RTN","IBCBB1",46,0)
 ;Statement Covers To
"RTN","IBCBB1",47,0)
 I IBTDT="" S IBER=IBER_"IB062;"
"RTN","IBCBB1",48,0)
 I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
"RTN","IBCBB1",49,0)
 I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
"RTN","IBCBB1",50,0)
 S IBTFY=$$FY^IBOUTL(IBTDT)
"RTN","IBCBB1",51,0)
 ;
"RTN","IBCBB1",52,0)
 ;Total Charges
"RTN","IBCBB1",53,0)
 ; IB*2.0*447/TAZ Removed this error so that zero dollar revenue codes can process on the 837
"RTN","IBCBB1",54,0)
 ;I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
"RTN","IBCBB1",55,0)
 ;
"RTN","IBCBB1",56,0)
 ;Billable charges for secondary claim
"RTN","IBCBB1",57,0)
 I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
"RTN","IBCBB1",58,0)
 ;Fiscal Year 1
"RTN","IBCBB1",59,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",60,0)
 ;
"RTN","IBCBB1",61,0)
 ;Check provider link for current user, enterer, reviewer and Authorizor
"RTN","IBCBB1",62,0)
 I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",63,0)
 I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",64,0)
 I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
"RTN","IBCBB1",65,0)
 I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
"RTN","IBCBB1",66,0)
 ;
"RTN","IBCBB1",67,0)
 I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
"RTN","IBCBB1",68,0)
 ; If ins bill, must have valid COB sequence
"RTN","IBCBB1",69,0)
 I $P(IBND0,U,11)="i",$S($P(IBND0,U,21)="":1,1:"PST"'[$P(IBND0,U,21)) S IBER=IBER_"IB324;"
"RTN","IBCBB1",70,0)
 ;
"RTN","IBCBB1",71,0)
 ; Check for valid sec provider id for current ins
"RTN","IBCBB1",72,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'="" D
"RTN","IBCBB1",73,0)
 . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TERTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
"RTN","IBCBB1",74,0)
 ; Check NPIs
"RTN","IBCBB1",75,0)
 D NPICHK^IBCBB11
"RTN","IBCBB1",76,0)
 ;
"RTN","IBCBB1",77,0)
 ; Check multiple rx NPIs
"RTN","IBCBB1",78,0)
 D RXNPI^IBCBB11(IBIFN)
"RTN","IBCBB1",79,0)
 ;
"RTN","IBCBB1",80,0)
 ; Check taxonomies
"RTN","IBCBB1",81,0)
 D TAXCHK^IBCBB11
"RTN","IBCBB1",82,0)
 ;
"RTN","IBCBB1",83,0)
 ; Check for Physician Name
"RTN","IBCBB1",84,0)
 K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
"RTN","IBCBB1",85,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",86,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCBB1",87,0)
 I IBFT'=2,$P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
"RTN","IBCBB1",88,0)
 ;
"RTN","IBCBB1",89,0)
 N FUNCTION,IBINS
"RTN","IBCBB1",90,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",91,0)
 ;S FUNCTION=$S($$FT^IBCEF(IBIFN)=3:4,1:3)
"RTN","IBCBB1",92,0)
 S FUNCTION=$S(IBFT=3:4,1:3)
"RTN","IBCBB1",93,0)
 I IBFT'=2,IBER'["IB303;" D
"RTN","IBCBB1",94,0)
 . F IBINS=1:1:3 D
"RTN","IBCBB1",95,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS)
"RTN","IBCBB1",96,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB1",97,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB1",98,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB1",99,0)
 ... S IBOK=0
"RTN","IBCBB1",100,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB1",101,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB236;",IBINS=2:"IB237;",IBINS=3:"IB238;",1:"")
"RTN","IBCBB1",102,0)
 ;
"RTN","IBCBB1",103,0)
 ; Patch 432 enh5:The IB system shall no longer prevent users from authorizing(fatal error message)a claim because the system cannot find the providersSSNorEIN
"RTN","IBCBB1",104,0)
 ; D PRIIDCHK^IBCBB11
"RTN","IBCBB1",105,0)
 ;
"RTN","IBCBB1",106,0)
 N IBM,IBM1
"RTN","IBCBB1",107,0)
 S IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCBB1",108,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCBB1",109,0)
 I $P(IBM,U),$P($G(^DIC(36,$P(IBM,U),4)),U,6),$P(IBM1,U,2)="" S IBER=IBER_"IB244;"
"RTN","IBCBB1",110,0)
 I $P(IBM,U,2),$P($G(^DIC(36,$P(IBM,U,2),4)),U,6),$P(IBM1,U,3)="" S IBER=IBER_"IB245;"
"RTN","IBCBB1",111,0)
 I $P(IBM,U,3),$P($G(^DIC(36,$P(IBM,U,3),4)),U,6),$P(IBM1,U,4)="" S IBER=IBER_"IB246;"
"RTN","IBCBB1",112,0)
 ;
"RTN","IBCBB1",113,0)
 ; If outside facility, check for ID and qualifier in 355.93
"RTN","IBCBB1",114,0)
 ; 5/15/06 - esg - hard error IB243 turned into warning message instead
"RTN","IBCBB1",115,0)
 S Z=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCBB1",116,0)
 I Z D
"RTN","IBCBB1",117,0)
 . I $P($G(^IBA(355.93,Z,0)),U,9)=""!($P($G(^IBA(355.93,Z,0)),U,13)="") D
"RTN","IBCBB1",118,0)
 .. N Z1,Z2
"RTN","IBCBB1",119,0)
 .. S Z1="Missing Lab or Facility Primary ID for non-VA facility, "
"RTN","IBCBB1",120,0)
 .. S Z2=$$EXTERNAL^DILFD(399,232,,Z)
"RTN","IBCBB1",121,0)
 .. I $L(Z2)'>19 D WARN^IBCBB11(Z1_Z2) Q
"RTN","IBCBB1",122,0)
 .. D WARN^IBCBB11(Z1),WARN^IBCBB11("     "_Z2)
"RTN","IBCBB1",123,0)
 .. Q
"RTN","IBCBB1",124,0)
 . Q
"RTN","IBCBB1",125,0)
 ;
"RTN","IBCBB1",126,0)
 ; Must be one and only one division on bill
"RTN","IBCBB1",127,0)
 S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
"RTN","IBCBB1",128,0)
 ; I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",129,0)
 ; Allow multi-divisional for OP instutional claims
"RTN","IBCBB1",130,0)
 I IBZ,$$INPAT^IBCEF(IBIFN)!'($$INSPRF^IBCEF(IBIFN)) S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",131,0)
 ; Still need error msg on OP Institutional if No Default division
"RTN","IBCBB1",132,0)
 I IBZ=3,'$$INPAT^IBCEF(IBIFN),$$INSPRF^IBCEF(IBIFN) S IBER=IBER_"IB105;"
"RTN","IBCBB1",133,0)
 ; Division address must be defined in institution file
"RTN","IBCBB1",134,0)
 I $P(IBND0,U,22) D
"RTN","IBCBB1",135,0)
 . N Z,Z0,Z1
"RTN","IBCBB1",136,0)
 . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
"RTN","IBCBB1",137,0)
 . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
"RTN","IBCBB1",138,0)
 . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",139,0)
 . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",140,0)
 ;
"RTN","IBCBB1",141,0)
 ; IB*2.0*432 Check ambulance addresses, COB Non-covered amt. & Attachment Control
"RTN","IBCBB1",142,0)
 I $$AMBCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB329;"
"RTN","IBCBB1",143,0)
 I $$COBAMT^IBCBB11(IBIFN)=1 S IBER=IBER_"IB330;"
"RTN","IBCBB1",144,0)
 I $$TMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"
"RTN","IBCBB1",145,0)
 I $$ACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"
"RTN","IBCBB1",146,0)
 I $$COBMRA^IBCBB11(IBIFN)=1 S IBER=IBER_"IB342;"
"RTN","IBCBB1",147,0)
 I $$COBSEC^IBCBB11(IBIFN)=1 S IBER=IBER_"IB343;"
"RTN","IBCBB1",148,0)
 ;
"RTN","IBCBB1",149,0)
 ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
"RTN","IBCBB1",150,0)
 S (IBRTCHV,IBPICHV)=0
"RTN","IBCBB1",151,0)
 I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
"RTN","IBCBB1",152,0)
 I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
"RTN","IBCBB1",153,0)
 I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
"RTN","IBCBB1",154,0)
 ;
"RTN","IBCBB1",155,0)
 ;Non-VA bill must use FEE REIMB INS rate type; FEE REIMB INS rate type can only be used for Non-VA bill
"RTN","IBCBB1",156,0)
 ;IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",157,0)
 ;N IBNVART,IBNVAST
"RTN","IBCBB1",158,0)
 ;S (IBNVART,IBNVAST)=0
"RTN","IBCBB1",159,0)
 ;I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="FEE REIMB INS" S IBNVART=1
"RTN","IBCBB1",160,0)
 ;S IBNVAST=$$NONVAFLG(IBIFN)
"RTN","IBCBB1",161,0)
 ;I IBNVART,'IBNVAST S IBER=IBER_"IB360;"  ;Non-VA rate type used for bill that is not Non-VA
"RTN","IBCBB1",162,0)
 ;I 'IBNVART,IBNVAST S IBER=IBER_"IB361;"  ;Non-VA rate type not used for bill that is Non-VA
"RTN","IBCBB1",163,0)
 ;
"RTN","IBCBB1",164,0)
 N IBZPRC,IBZPRCUB
"RTN","IBCBB1",165,0)
 D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
"RTN","IBCBB1",166,0)
 ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
"RTN","IBCBB1",167,0)
 I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
"RTN","IBCBB1",168,0)
 . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
"RTN","IBCBB1",169,0)
 .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
"RTN","IBCBB1",170,0)
 .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
"RTN","IBCBB1",171,0)
 .. I '$P(Z0,U,7) S ZE=1
"RTN","IBCBB1",172,0)
 ;
"RTN","IBCBB1",173,0)
 ; Extract procedures for UB-04
"RTN","IBCBB1",174,0)
 D F^IBCEF("N-UB-04 PROCEDURES","IBZPRCUB",,IBIFN)
"RTN","IBCBB1",175,0)
 ; Does this bill have ANY prescriptions associated with it?
"RTN","IBCBB1",176,0)
 ; Must bill prescriptions separately from other charges
"RTN","IBCBB1",177,0)
 ;
"RTN","IBCBB1",178,0)
 ; DEM;432 - Call line level provider edit checks.
"RTN","IBCBB1",179,0)
 D LNPROV^IBCBB12(IBIFN)  ; DEM;432 - If there are line provider edits, then routine LNPROV^IBCBB12(IBIFN) updates IBER string.
"RTN","IBCBB1",180,0)
 ; DEM;432 - Call to Other Operating/Operating Provider edit checks.
"RTN","IBCBB1",181,0)
 I $$OPPROVCK^IBCBB12(IBIFN)=1 S IBER=IBER_"IB337;"  ; DEM;432
"RTN","IBCBB1",182,0)
 ; DEM;432 - Line level Attachment Control edits.
"RTN","IBCBB1",183,0)
 I $$LNTMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"  ; DEM;432
"RTN","IBCBB1",184,0)
 I $$LNACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"  ; DEM;432
"RTN","IBCBB1",185,0)
 ;
"RTN","IBCBB1",186,0)
 ; vd/Beginning of IB*2*577 - Validate Line Level NDC edits.
"RTN","IBCBB1",187,0)
 I $$LNNDCCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB365;"  ;IB*2*577
"RTN","IBCBB1",188,0)
 ; vd/End of IB*2*577
"RTN","IBCBB1",189,0)
 I $$ISRX^IBCEF1(IBIFN) D
"RTN","IBCBB1",190,0)
 . N IBZ,IBRXDEF
"RTN","IBCBB1",191,0)
 . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
"RTN","IBCBB1",192,0)
 . F  S IBZ=$O(IBZPRCUB(IBZ)) Q:'IBZ  I IBZPRCUB(IBZ),+$P(IBZPRCUB(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
"RTN","IBCBB1",193,0)
 . K IBZ
"RTN","IBCBB1",194,0)
 ;
"RTN","IBCBB1",195,0)
 ; Check that COB sequences are not skipped
"RTN","IBCBB1",196,0)
 K Z
"RTN","IBCBB1",197,0)
 F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
"RTN","IBCBB1",198,0)
 F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
"RTN","IBCBB1",199,0)
 K Z
"RTN","IBCBB1",200,0)
 ; HD64676  IB*2*371 - OK for payer sequence to be blank when the Rate
"RTN","IBCBB1",201,0)
 ;    Type is either Interagency or Sharing Agreement
"RTN","IBCBB1",202,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,21)="",$P($G(^DGCR(399,IBIFN,0)),U,7)'=4,$P($G(^DGCR(399,IBIFN,0)),U,7)'=9 S IBER=IBER_"IB323;"
"RTN","IBCBB1",203,0)
 K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
"RTN","IBCBB1",204,0)
 ; Coding method should agree with types of procedure codes
"RTN","IBCBB1",205,0)
 S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
"RTN","IBCBB1",206,0)
 I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK=0 Q
"RTN","IBCBB1",207,0)
 I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
"RTN","IBCBB1",208,0)
 D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
"RTN","IBCBB1",209,0)
 Q:$G(IBQUIT)
"RTN","IBCBB1",210,0)
 ;
"RTN","IBCBB1",211,0)
 ;Other things that could be added:  Rev Code - calculating charges
"RTN","IBCBB1",212,0)
 ;        Diagnosis Coding, if MT copay - check for other co-payments
"RTN","IBCBB1",213,0)
 ;
"RTN","IBCBB1",214,0)
 I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
"RTN","IBCBB1",215,0)
 I $P(IBNDTX,U,8)!$P(IBNDTX,U,9) D
"RTN","IBCBB1",216,0)
 . Q:$P(IBNDTX,U,8)=2    ; Don't want to do this for option 2 any more.
"RTN","IBCBB1",217,0)
 . D WARN^IBCBB11($S($$REQMRA^IBEFUNC(IBIFN)&($P(IBNDTX,U,9)):"MRA Secondary ",1:"")_"Bill has been forced to print "_$S($P(IBNDTX,U,8)=1!($P(IBNDTX,U,9)=1):"locally",1:"at clearinghouse"))
"RTN","IBCBB1",218,0)
 N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IBA(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
"RTN","IBCBB1",219,0)
 . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
"RTN","IBCBB1",220,0)
 ;
"RTN","IBCBB1",221,0)
 D VALNDC^IBCBB11(IBIFN,DFN)  ;validate NDC#
"RTN","IBCBB1",222,0)
 ;
"RTN","IBCBB1",223,0)
 ;Build AR array if no errors and MRA not needed or already rec'd
"RTN","IBCBB1",224,0)
 I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
"RTN","IBCBB1",225,0)
 ;
"RTN","IBCBB1",226,0)
 ;Check ROI
"RTN","IBCBB1",227,0)
 N ROIERR
"RTN","IBCBB1",228,0)
 S ROIERR=0 I $P($G(^DGCR(399,IBIFN,"U")),U,5)=1,+$P($G(^DGCR(399,IBIFN,"U")),U,7)=0 S ROIERR=1 ; screen 7 sensitive record and no ROI
"RTN","IBCBB1",229,0)
 I $$ROICHK^IBCBB11(IBIFN,DFN,+IBNDMP) S ROIERR=1 ; check file for sensitive Rx and missing ROI
"RTN","IBCBB1",230,0)
 I ROIERR S IBER=IBER_"IB328;"
"RTN","IBCBB1",231,0)
 ;
"RTN","IBCBB1",232,0)
 ;Verify Line Charges Match Claim Total Charge. IB*2.0*447 BI
"RTN","IBCBB1",233,0)
 I +$$GET1^DIQ(399,IBIFN_",",201)'=+$$IBLNTOT^IBCBB13(IBIFN) S IBER=IBER_"IB344;"
"RTN","IBCBB1",234,0)
 ;
"RTN","IBCBB1",235,0)
 ;Test for valid EIN/SY ID Values. IB*2.0*447 BI
"RTN","IBCBB1",236,0)
 I $$IBSYEI^IBCBB13(IBIFN) S IBER=IBER_"IB345;"
"RTN","IBCBB1",237,0)
 ;
"RTN","IBCBB1",238,0)
 ;Test for a missing ICN. IB*2.0*447 BI
"RTN","IBCBB1",239,0)
 I $$IBMICN^IBCBB13(IBIFN) S IBER=IBER_"IB346;"
"RTN","IBCBB1",240,0)
 ;
"RTN","IBCBB1",241,0)
 ;Test for a ZERO charge amounts. IB*2.0*447 BI
"RTN","IBCBB1",242,0)
 I $$IBRCCHK^IBCBB13(IBIFN) D WARN^IBCBB11("Claim contains revenue codes with no associated charges.")
"RTN","IBCBB1",243,0)
 ;
"RTN","IBCBB1",244,0)
 ;Test for missing "Patient reason for visit". IB*2.0*447 BI
"RTN","IBCBB1",245,0)
 I $$FT^IBCEF(IBIFN)=3,'$$INPAT^IBCEF(IBIFN),$$IBPRV3^IBCBB13(IBIFN) S IBER=IBER_"IB347;"
"RTN","IBCBB1",246,0)
 ;
"RTN","IBCBB1",247,0)
 ;Test for missing Payer ID. IB*2.0*447 BI
"RTN","IBCBB1",248,0)
 ;I $$IBMPID^IBCBB13(IBIFN) S IBER=IBER_"IB348;"
"RTN","IBCBB1",249,0)
 ;Changed Error to Warning. IB*2.0*447 TAZ
"RTN","IBCBB1",250,0)
 I $$IBMPID^IBCBB13(IBIFN) D WARN^IBCBB11("Not all payers have Payer IDs.")
"RTN","IBCBB1",251,0)
 ;
"RTN","IBCBB1",252,0)
 ;Test for missing "Priority (Type) of Admission" for UB-04. IB*2.0*447 BI
"RTN","IBCBB1",253,0)
 I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(399,IBIFN_",",158)="" S IBER=IBER_"IB349;"
"RTN","IBCBB1",254,0)
 ;
"RTN","IBCBB1",255,0)
END ;Don't kill IBIFN, IBER, DFN
"RTN","IBCBB1",256,0)
 I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
"RTN","IBCBB1",257,0)
 K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
"RTN","IBCBB1",258,0)
 K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
"RTN","IBCBB1",259,0)
 I $D(IBER),IBER="" W !,"No Errors found for National edits"
"RTN","IBCBB1",260,0)
 Q
"RTN","IBCBB1",261,0)
 ;
"RTN","IBCBB1",262,0)
ARRAY ;Build PRCASV(array)
"RTN","IBCBB1",263,0)
 N IBCOBN,X
"RTN","IBCBB1",264,0)
 K PRCASV
"RTN","IBCBB1",265,0)
 Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
"RTN","IBCBB1",266,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCBB1",267,0)
 S X=IBIFN
"RTN","IBCBB1",268,0)
 S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
"RTN","IBCBB1",269,0)
 S PRCASV("APR")=DUZ
"RTN","IBCBB1",270,0)
 S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
"RTN","IBCBB1",271,0)
 I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
"RTN","IBCBB1",272,0)
 S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
"RTN","IBCBB1",273,0)
 S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
"RTN","IBCBB1",274,0)
 S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
"RTN","IBCBB1",275,0)
 ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11)]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
"RTN","IBCBB1",276,0)
PLUS I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
"RTN","IBCBB1",277,0)
 I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
"RTN","IBCBB1",278,0)
 ;
"RTN","IBCBB1",279,0)
 N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
"RTN","IBCBB1",280,0)
 N IBNDI1
"RTN","IBCBB1",281,0)
 Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
"RTN","IBCBB1",282,0)
 S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
"RTN","IBCBB1",283,0)
 S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
"RTN","IBCBB1",284,0)
 S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
"RTN","IBCBB1",285,0)
 S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
"RTN","IBCBB1",286,0)
 ; Check that this is a secondary or tertiary bill and insurance for previous
"RTN","IBCBB1",287,0)
 ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
"RTN","IBCBB1",288,0)
 I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
"RTN","IBCBB1",289,0)
 Q
"RTN","IBCBB1",290,0)
 ;
"RTN","IBCBB1",291,0)
MRA N IBEOB S IBEOB=0
"RTN","IBCBB1",292,0)
 ;
"RTN","IBCBB1",293,0)
 K PRCASV("MEDURE"),PRCASV("MEDCA")
"RTN","IBCBB1",294,0)
 ; Get EOB data
"RTN","IBCBB1",295,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCBB1",296,0)
 . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
"RTN","IBCBB1",297,0)
 Q  ;MRA
"RTN","IBCBB1",298,0)
 ;
"RTN","IBCBB1",299,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB1",300,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB1",301,0)
 ;
"RTN","IBCBB1",302,0)
NONVAFLG(IBIFN) ; Check if Non-VA bill
"RTN","IBCBB1",303,0)
 ; Function returns 1 if Non-VA bill
"RTN","IBCBB1",304,0)
 ; IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",305,0)
 N FLAG,PTF
"RTN","IBCBB1",306,0)
 S FLAG=0
"RTN","IBCBB1",307,0)
 I $P($G(^DGCR(399,IBIFN,"U2")),U,10)]"" S FLAG=1 ;Non-VA provider defined
"RTN","IBCBB1",308,0)
 S PTF=$P($G(^DGCR(399,IBIFN,0)),U,8)
"RTN","IBCBB1",309,0)
 I PTF,$P($G(^DGPT(PTF,0)),U,4)=1 S FLAG=1 ;PTF entry indicates Non-VA
"RTN","IBCBB1",310,0)
 Q FLAG
"RTN","IBCBB11")
0^3^B112052327^B96464375
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS/OIFO-BP/PIJ - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371,395,392,401,384,400,436,432,516,550,577**;21-MAR-94;Build 38
"RTN","IBCBB11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
NPICHK ; Check for required NPIs
"RTN","IBCBB11",30,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z,IBNFI,IBTF,IBWC,IBXSAVE,IBPRV,IBLINE
"RTN","IBCBB11",31,0)
 ;*** pij start IB*20*436 ***
"RTN","IBCBB11",32,0)
 N IBRATYPE,IBLEGAL
"RTN","IBCBB11",33,0)
 S (IBRATYPE,IBLEGAL)=""
"RTN","IBCBB11",34,0)
 S IBRATYPE=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCBB11",35,0)
 ; Legal types for this use.
"RTN","IBCBB11",36,0)
 ;  7=NO FAULT INS.
"RTN","IBCBB11",37,0)
 ; 10=TORT FEASOR
"RTN","IBCBB11",38,0)
 ; 11=WORKERS' COMP.
"RTN","IBCBB11",39,0)
 S IBNFI=$O(^DGCR(399.3,"B","NO FAULT INS.",0)) S:'IBNFI IBNFI=7
"RTN","IBCBB11",40,0)
 S IBTF=$O(^DGCR(399.3,"B","TORT FEASOR",0)) S:'IBTF IBTF=10
"RTN","IBCBB11",41,0)
 S IBWC=$O(^DGCR(399.3,"B","WORKERS' COMP.",0)) S:'IBWC IBWC=11
"RTN","IBCBB11",42,0)
 ;
"RTN","IBCBB11",43,0)
 I IBRATYPE=IBNFI!(IBRATYPE=IBTF)!(IBRATYPE=IBWC) D
"RTN","IBCBB11",44,0)
 . ; One of the legal types - force local print
"RTN","IBCBB11",45,0)
 . S IBLEGAL=1
"RTN","IBCBB11",46,0)
 ;*** pij end ***
"RTN","IBCBB11",47,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",48,0)
 ; Check providers
"RTN","IBCBB11",49,0)
 ; IB*2.0*432 changed the NPI check to the new Provider Array
"RTN","IBCBB11",50,0)
 ;S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",51,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",52,0)
 S IBPRV=""
"RTN","IBCBB11",53,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",54,0)
 . I $P($G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",55,0)
 S IBLINE=""
"RTN","IBCBB11",56,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",57,0)
 . S IBPRV=""
"RTN","IBCBB11",58,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",59,0)
 .. I $P($G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",60,0)
 I $D(IBNONPI) S IBPRV="" F  S IBPRV=$O(IBNONPI(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",61,0)
 . S IBER=IBER_"IB"_(140+IBPRV)_";" Q  ; If required, set error IB*2*516
"RTN","IBCBB11",62,0)
 ; Check organizations
"RTN","IBCBB11",63,0)
 S IBNONPI=""
"RTN","IBCBB11",64,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",65,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",66,0)
 . S IBER=IBER_$P("IB339;^IB340;^IB341;",U,$P(IBNONPI,U,Z))  ; DEM;432 Added NPI errors.
"RTN","IBCBB11",67,0)
 Q
"RTN","IBCBB11",68,0)
 ;
"RTN","IBCBB11",69,0)
TAXCHK ; Check for required taxonomies
"RTN","IBCBB11",70,0)
 N IBDT,IBLINE,IBNOTAX,IBPRV,IBTAXS,IBXSAVE,Z
"RTN","IBCBB11",71,0)
 ;
"RTN","IBCBB11",72,0)
 ; MRD;IB*2.0*516 - This check is now moot; 'today' is always on or
"RTN","IBCBB11",73,0)
 ; after May 23, 2008, so taxonomy codes are always required
"RTN","IBCBB11",74,0)
 ; for certain providers.
"RTN","IBCBB11",75,0)
 ;S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",76,0)
 ;
"RTN","IBCBB11",77,0)
 ; Check providers
"RTN","IBCBB11",78,0)
 ; IB*2.0*432 changed the Taxonomy check to the new Provider Array
"RTN","IBCBB11",79,0)
 ;S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",80,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",81,0)
 S IBPRV=""
"RTN","IBCBB11",82,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",83,0)
 . I $G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,"TAXONOMY"))="" S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",84,0)
 . Q
"RTN","IBCBB11",85,0)
 ;
"RTN","IBCBB11",86,0)
 S IBLINE=""
"RTN","IBCBB11",87,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",88,0)
 . S IBPRV=""
"RTN","IBCBB11",89,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",90,0)
 . . I $G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,"TAXONOMY"))="" S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",91,0)
 . . Q
"RTN","IBCBB11",92,0)
 . Q
"RTN","IBCBB11",93,0)
 ;
"RTN","IBCBB11",94,0)
 ; IB251 = Referring provider taxonomy missing.
"RTN","IBCBB11",95,0)
 ; IB253 = Rendering provider taxonomy missing.
"RTN","IBCBB11",96,0)
 ; IB254 = Attending provider taxonomy missing.
"RTN","IBCBB11",97,0)
 ;
"RTN","IBCBB11",98,0)
 I $D(IBNOTAX) S IBPRV="" F  S IBPRV=$O(IBNOTAX(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",99,0)
 . ; Only Referring, Rendering and Attending are currently sent to the payer
"RTN","IBCBB11",100,0)
 . ;I IBTAXREQ,"134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",101,0)
 . I "134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; If required, set error and quit
"RTN","IBCBB11",102,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,IBPRV)_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",103,0)
 . Q
"RTN","IBCBB11",104,0)
 ;
"RTN","IBCBB11",105,0)
 ; Check organizations.  The function ORGTAX will set IBNOTAX to be a
"RTN","IBCBB11",106,0)
 ; list of entities missing taxonomy codes, if any (n, n^m, n^m^p,
"RTN","IBCBB11",107,0)
 ; where each 1 is service facility, 2 is non-VA service facility and
"RTN","IBCBB11",108,0)
 ; 3 is billing provider.
"RTN","IBCBB11",109,0)
 ;
"RTN","IBCBB11",110,0)
 S IBNOTAX=""
"RTN","IBCBB11",111,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",112,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",113,0)
 . ; IB167 = Billing Provider taxonomy missing.
"RTN","IBCBB11",114,0)
 . ;I IBTAXREQ,$P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",115,0)
 . I $P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q
"RTN","IBCBB11",116,0)
 . ; MRD;IB*2.0*516 - Remove warning message for missing taxonomy code for lab or facility.
"RTN","IBCBB11",117,0)
 . ; D WARN("Taxonomy for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",118,0)
 . Q
"RTN","IBCBB11",119,0)
 ;
"RTN","IBCBB11",120,0)
 Q
"RTN","IBCBB11",121,0)
 ;
"RTN","IBCBB11",122,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB11",123,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB11",124,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB11",125,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB11",126,0)
 N IBX,IBRXCOL
"RTN","IBCBB11",127,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB11",128,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB11",129,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB11",130,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB11",131,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB11",132,0)
 Q
"RTN","IBCBB11",133,0)
 ;
"RTN","IBCBB11",134,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",135,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",136,0)
 ; 
"RTN","IBCBB11",137,0)
 N IBI,IBZ
"RTN","IBCBB11",138,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",139,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",140,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",141,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",142,0)
 Q
"RTN","IBCBB11",143,0)
 ;
"RTN","IBCBB11",144,0)
RXNPI(IBIFN) ; check for multiple pharmacy npi's on the same bill
"RTN","IBCBB11",145,0)
 N IBORG,IBRXNPI,IBX,IBY
"RTN","IBCBB11",146,0)
 S IBORG=$$RXSITE^IBCEF73A(IBIFN,.IBORG)
"RTN","IBCBB11",147,0)
 S IBX=0 F  S IBX=$O(IBORG(IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(IBORG(IBX,IBY)) Q:'IBY  S IBRXNPI(+IBORG(IBX,IBY))=""
"RTN","IBCBB11",148,0)
 S (IBX,IBY)=0 F  S IBX=$O(IBRXNPI(IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCBB11",149,0)
 I IBY>1 D WARN("Bill has prescriptions resulting from "_IBY_" different NPI locations")
"RTN","IBCBB11",150,0)
 Q
"RTN","IBCBB11",151,0)
 ;
"RTN","IBCBB11",152,0)
ROICHK(IBIFN,IBDFN,IBINS) ; IB*2.0*384 - check prescriptions that contain the
"RTN","IBCBB11",153,0)
 ; SENSITIVE DIAGNOSIS DRUG field #87 in the DRUG File #50 set to 1 against
"RTN","IBCBB11",154,0)
 ; the Claims Tracking ROI file (#356.25) to see if an ROI is on file
"RTN","IBCBB11",155,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",156,0)
 ;         IBDFN = IEN of the patient
"RTN","IBCBB11",157,0)
 ;         IBINS = IEN of the payer insurance company (#36)
"RTN","IBCBB11",158,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",159,0)
 ;          1 = a prescription is sensitive and there is no ROI on file
"RTN","IBCBB11",160,0)
 ;
"RTN","IBCBB11",161,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ
"RTN","IBCBB11",162,0)
 S ROIQ=0
"RTN","IBCBB11",163,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",IBIFN,IBX)) Q:'IBX  D
"RTN","IBCBB11",164,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBCBB11",165,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBCBB11",166,0)
 .D ZERO^IBRXUTL(IBDRUG)
"RTN","IBCBB11",167,0)
 .I $$SENS^IBNCPDR(IBDRUG) D  ; Sensitive Diagnosis Drug - check for ROI
"RTN","IBCBB11",168,0)
 .. I $$ROI^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q  ;ROI is on file
"RTN","IBCBB11",169,0)
 .. D WARN("ROI not on file for prescription "_$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E"))
"RTN","IBCBB11",170,0)
 .. S ROIQ=1
"RTN","IBCBB11",171,0)
ROICHKQ ;
"RTN","IBCBB11",172,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCBB11",173,0)
 Q ROIQ
"RTN","IBCBB11",174,0)
 ;
"RTN","IBCBB11",175,0)
AMBCK(IBIFN)    ; IB*2.0*432 - if ambulance location defined, address must be defined
"RTN","IBCBB11",176,0)
 ; if there is anything entered in any of the address fields (either p/up or drop/off fields), than there needs to be: 
"RTN","IBCBB11",177,0)
 ; Address 1, State and ZIP unless the State is not a US state or possession, then zip code is not needed (CMS1500 only)
"RTN","IBCBB11",178,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",179,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",180,0)
 ;          1 = Error
"RTN","IBCBB11",181,0)
 ;
"RTN","IBCBB11",182,0)
 N IBPAMB,IBDAMB,IBAMBR,IBCK
"RTN","IBCBB11",183,0)
 S IBAMBR=0
"RTN","IBCBB11",184,0)
 Q:$$INSPRF^IBCEF(IBIFN)'=0 IBAMBR
"RTN","IBCBB11",185,0)
 S IBPAMB=$G(^DGCR(399,IBIFN,"U5")),IBDAMB=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCBB11",186,0)
 S IBCK(5)=$$NOPUNCT^IBCEF($P(IBPAMB,U,2,6),1),IBCK(6)=$$NOPUNCT^IBCEF($P(IBDAMB,U,1,6),1)
"RTN","IBCBB11",187,0)
 I IBCK(5)="",IBCK(6)="" Q IBAMBR
"RTN","IBCBB11",188,0)
 ; at this point we know that at least one ambulance field has data, so check to see if all have data
"RTN","IBCBB11",189,0)
 I IBCK(5)'="" F I=2,4,5 I $P(IBPAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",190,0)
 I IBCK(6)'="" F I=1,2,4,5 I $P(IBDAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",191,0)
 Q:IBAMBR=1 IBAMBR
"RTN","IBCBB11",192,0)
 ; now check zip code.  OK to be null if state is not a US Posession
"RTN","IBCBB11",193,0)
 F I="IBPAMB","IBDAMB" I $P(I,U,5)'="",$P($G(^DIC(5,$P(I,U,5),0)),U,6)=1,$P(I,U,6)="" S IBAMBR=1
"RTN","IBCBB11",194,0)
 Q IBAMBR
"RTN","IBCBB11",195,0)
 ;
"RTN","IBCBB11",196,0)
COBAMT(IBIFN)   ; IB*2.0*432 - IF there is a COB amt. it must equal the Total Claim Charge Amount
"RTN","IBCBB11",197,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",198,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",199,0)
 ;          1 = Error
"RTN","IBCBB11",200,0)
 ;
"RTN","IBCBB11",201,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",202,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",203,0)
 Q:+$P($G(^DGCR(399,IBIFN,"U1")),U)'=+$P($G(^DGCR(399,IBIFN,"U4")),U) 1
"RTN","IBCBB11",204,0)
 Q 0
"RTN","IBCBB11",205,0)
 ;
"RTN","IBCBB11",206,0)
COBMRA(IBIFN)   ; IB*2.0*432 - If there is a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",207,0)
 ; Primary Insurance must be Medicare that never went to Medicare, and this must be a 2ndary or tertiary claim
"RTN","IBCBB11",208,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",209,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",210,0)
 ;          1 = Error
"RTN","IBCBB11",211,0)
 ;
"RTN","IBCBB11",212,0)
 N IBP
"RTN","IBCBB11",213,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",214,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",215,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",216,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$$COBN^IBCEF(IBIFN)>1 Q 0
"RTN","IBCBB11",217,0)
 Q 1
"RTN","IBCBB11",218,0)
 ;
"RTN","IBCBB11",219,0)
COBSEC(IBIFN)   ; IB*2.0*432 - If there is NOT a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",220,0)
 ; and Primary Insurance is Medicare that never went to Medicare, 2ndary or tertiary claim cannot be set to transmit
"RTN","IBCBB11",221,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",222,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",223,0)
 ;          1 = Error
"RTN","IBCBB11",224,0)
 ;
"RTN","IBCBB11",225,0)
 N IBP
"RTN","IBCBB11",226,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",227,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)'="" 0
"RTN","IBCBB11",228,0)
 Q:$$COBN^IBCEF(IBIFN)<2 0
"RTN","IBCBB11",229,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",230,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$P($G(^DGCR(399,IBIFN,"TX")),U,8)'=1 Q 1
"RTN","IBCBB11",231,0)
 Q 0
"RTN","IBCBB11",232,0)
 ;
"RTN","IBCBB11",233,0)
TMCK(IBIFN) ;  IB*2.0*432 - Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",234,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",235,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",236,0)
 ;          1 = Error
"RTN","IBCBB11",237,0)
 ;
"RTN","IBCBB11",238,0)
 N IBAC
"RTN","IBCBB11",239,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",240,0)
 F I=1,3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",241,0)
 Q:IBAC(3)="" 0
"RTN","IBCBB11",242,0)
 Q:IBAC(1)'="" 0
"RTN","IBCBB11",243,0)
 Q:IBAC(3)="AA" 0
"RTN","IBCBB11",244,0)
 Q 1
"RTN","IBCBB11",245,0)
 ;
"RTN","IBCBB11",246,0)
ACCK(IBIFN) ; IB*2.0*432 If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",247,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",248,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",249,0)
 ;          1 = Error
"RTN","IBCBB11",250,0)
 ;
"RTN","IBCBB11",251,0)
 N IBAC
"RTN","IBCBB11",252,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",253,0)
 F I=1:1:3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",254,0)
 ; All fields null, no error
"RTN","IBCBB11",255,0)
 I IBAC(1)="",IBAC(2)="",IBAC(3)="" Q 0
"RTN","IBCBB11",256,0)
 ; Both required fields complete, no error
"RTN","IBCBB11",257,0)
 I IBAC(2)'="",IBAC(3)'="" Q 0
"RTN","IBCBB11",258,0)
 ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",259,0)
 Q 1
"RTN","IBCBB11",260,0)
 ;
"RTN","IBCBB11",261,0)
LNTMCK(IBIFN) ;  DEM;IB*2.0*432 - (Line Level) Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",262,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",263,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",264,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",265,0)
 ;
"RTN","IBCBB11",266,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",267,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",268,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",269,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",270,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",271,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",272,0)
 . F I=1,3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",273,0)
 . I IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",274,0)
 . I IBAC(1)'="" S IBLNERR=0 Q
"RTN","IBCBB11",275,0)
 . I (IBAC(3)="AA") S IBLNERR=0 Q
"RTN","IBCBB11",276,0)
 . S IBLNERR=1
"RTN","IBCBB11",277,0)
 . Q
"RTN","IBCBB11",278,0)
 ;
"RTN","IBCBB11",279,0)
 Q IBLNERR
"RTN","IBCBB11",280,0)
 ;
"RTN","IBCBB11",281,0)
LNACCK(IBIFN) ; DEM;IB*2.0*432 (Line Level) If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",282,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",283,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",284,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",285,0)
 ;
"RTN","IBCBB11",286,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",287,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",288,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",289,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",290,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",291,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",292,0)
 . F I=1:1:3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",293,0)
 . ; All fields null, no error
"RTN","IBCBB11",294,0)
 . I IBAC(1)="",IBAC(2)="",IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",295,0)
 . ; Both required fields complete, no error
"RTN","IBCBB11",296,0)
 . I IBAC(2)'="",IBAC(3)'="" S IBLNERR=0 Q
"RTN","IBCBB11",297,0)
 . ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",298,0)
 . S IBLNERR=1
"RTN","IBCBB11",299,0)
 . Q
"RTN","IBCBB11",300,0)
 ;
"RTN","IBCBB11",301,0)
 Q IBLNERR
"RTN","IBCBB11",302,0)
 ;
"RTN","IBCBB11",303,0)
 ;vd/Beginning of IB*2*577 - Validate Line Level for NDC
"RTN","IBCBB11",304,0)
LNNDCCK(IBIFN) ;IB*2*577 (Line Level) The Units and Units/Basis of Measurement fields are required if the NDC field is populated.
"RTN","IBCBB11",305,0)
 ; INPUT  - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",306,0)
 ; OUTPUT - IBLNERR = 0 = no error
"RTN","IBCBB11",307,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",308,0)
 ;
"RTN","IBCBB11",309,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",310,0)
 S IBLNERR=0  ; IB*2*577 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",311,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",312,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",313,0)
 . Q:($$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","NDC","I")="")   ; IB*2*577 - No NDC Code
"RTN","IBCBB11",314,0)
 . ; If there is an NDC Code, then the UNITS and UNITS/BASIS OF MEASUREMENT are Required.
"RTN","IBCBB11",315,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS/BASIS OF MEASUREMENT","I")="" S IBLNERR=1 Q
"RTN","IBCBB11",316,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS","I")="" S IBLNERR=1 Q  ;Units (Quantity) is required if there is an NDC Code.
"RTN","IBCBB11",317,0)
 . Q
"RTN","IBCBB11",318,0)
 ;
"RTN","IBCBB11",319,0)
 Q IBLNERR
"RTN","IBCBB11",320,0)
 ;vd/End of IB*2*577
"RTN","IBCCC2")
0^14^B116481460^B113680571
"RTN","IBCCC2",1,0)
IBCCC2 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
"RTN","IBCCC2",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296,320,348,349,371,400,433,432,447,516,577**;21-MAR-94;Build 38
"RTN","IBCCC2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCC2",4,0)
 ;
"RTN","IBCCC2",5,0)
 ;MAP TO DGCRCC2
"RTN","IBCCC2",6,0)
 ;
"RTN","IBCCC2",7,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC2",8,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC2",9,0)
 ;
"RTN","IBCCC2",10,0)
STEP5 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBCCC2",11,0)
 ; NOTE:  any new or changed data nodes may also need to be updated in IBNCPDP5
"RTN","IBCCC2",12,0)
 ;move pure data nodes
"RTN","IBCCC2",13,0)
 ; MRD;IB*2.0*516 - Added "In7" nodes.
"RTN","IBCCC2",14,0)
 F I="I1","I17","I2","I27","I3","I37","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",15,0)
 ;
"RTN","IBCCC2",16,0)
 ;move top level data node. ;Do not move 'TX' node EXCEPT piece 8 (added with IB*2.0*432)
"RTN","IBCCC2",17,0)
 ;F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",18,0)
 ; add new data nodes introduced with IB*2.0*432
"RTN","IBCCC2",19,0)
 F I="TX","U","U1","U2","U3","U4","U5","U6","U7","U8","UF2","UF3","UF31","UF32","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",20,0)
 ;
"RTN","IBCCC2",21,0)
 ;move multiple level data
"RTN","IBCCC2",22,0)
 ;F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",23,0)
 ; add new data nodes introduced with IB*2.0*447 BI
"RTN","IBCCC2",24,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV","U9" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",25,0)
 ;
"RTN","IBCCC2",26,0)
 ; IB*2.0*432  ADDED IBSILENT flag so that this can be processed in background
"RTN","IBCCC2",27,0)
 D FTPRV^IBCEU5(IBIFN,$G(IBSILENT)) ; Ask change prov type if form type not the same
"RTN","IBCCC2",28,0)
 D COBCHG(IBIFN,,.IBCOB)
"RTN","IBCCC2",29,0)
 ;
"RTN","IBCCC2",30,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBCCC2",31,0)
 ;
"RTN","IBCCC2",32,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBCCC2",33,0)
 D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBCCC2",34,0)
 ;
"RTN","IBCCC2",35,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ) G END
"RTN","IBCCC2",36,0)
 ;
"RTN","IBCCC2",37,0)
STEP6 N IBGOEND
"RTN","IBCCC2",38,0)
 ; need to kill CRD flag prior to entering billing screens in case a copy for corresponding claim is needed
"RTN","IBCCC2",39,0)
 K IBCNCRD
"RTN","IBCCC2",40,0)
 ; don't call IB bill edit screens if this is non-MRA background processing
"RTN","IBCCC2",41,0)
 I $G(IBSTSM)=1 G END
"RTN","IBCCC2",42,0)
 I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
"RTN","IBCCC2",43,0)
 ;
"RTN","IBCCC2",44,0)
 ;
"RTN","IBCCC2",45,0)
END K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARST,IBCOB,IBCNCOPY,IBCBCOPY,IBCNCRD,IBKEY
"RTN","IBCCC2",46,0)
 K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,IBCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
"RTN","IBCCC2",47,0)
 K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
"RTN","IBCCC2",48,0)
 Q
"RTN","IBCCC2",49,0)
 ;
"RTN","IBCCC2",50,0)
 ;
"RTN","IBCCC2",51,0)
IBSCEDT ; call the IB bill edit screens and validate the data
"RTN","IBCCC2",52,0)
 N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
"RTN","IBCCC2",53,0)
 ; if the user came from CBW->PC and this is a non-MRA claim w/a paper EOB, set force print flag IB*2.0*432
"RTN","IBCCC2",54,0)
 ; also, if the user came from CBW->PC and this is a non-MRA claim and the only EEOB we have has filing errors, set force print flag
"RTN","IBCCC2",55,0)
 I $G(IBMRANOT)=1,$$COBN^IBCEF(IBIFN)>1,$G(IBFROM)=2 D 
"RTN","IBCCC2",56,0)
 .I $G(IBDA)="" D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",57,0)
 .I $D(^IBM(361.1,IBDA,"ERR")) D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",58,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCCC2",59,0)
ST1 S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
"RTN","IBCCC2",60,0)
 S IBAC=1
"RTN","IBCCC2",61,0)
 D ^IBCB1
"RTN","IBCCC2",62,0)
 I $G(IBCIREDT) G ST1
"RTN","IBCCC2",63,0)
IBSCX ;
"RTN","IBCCC2",64,0)
 Q
"RTN","IBCCC2",65,0)
 ;
"RTN","IBCCC2",66,0)
 ;
"RTN","IBCCC2",67,0)
TX F J=8 I $P(IBND("TX"),"^",J)]"" S $P(^DGCR(399,IBIFN,"TX"),"^",J)=$P(IBND("TX"),"^",J)
"RTN","IBCCC2",68,0)
 Q
"RTN","IBCCC2",69,0)
U F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
"RTN","IBCCC2",70,0)
 Q
"RTN","IBCCC2",71,0)
U1 F J=1:1:3,15 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
"RTN","IBCCC2",72,0)
 Q
"RTN","IBCCC2",73,0)
U2 F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
"RTN","IBCCC2",74,0)
 Q
"RTN","IBCCC2",75,0)
U3 F J=1:1:11 I $P(IBND("U3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U3"),"^",J)=$P(IBND("U3"),"^",J)
"RTN","IBCCC2",76,0)
 Q
"RTN","IBCCC2",77,0)
UF2 F J=1,3 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
"RTN","IBCCC2",78,0)
 Q
"RTN","IBCCC2",79,0)
UF3 F J=4:1:6 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
"RTN","IBCCC2",80,0)
 Q
"RTN","IBCCC2",81,0)
U4 F J=1:1:14 I $P(IBND("U4"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U4"),"^",J)=$P(IBND("U4"),"^",J)
"RTN","IBCCC2",82,0)
 Q
"RTN","IBCCC2",83,0)
U5 F J=1:1:6 I $P(IBND("U5"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U5"),"^",J)=$P(IBND("U5"),"^",J)
"RTN","IBCCC2",84,0)
 Q
"RTN","IBCCC2",85,0)
U6 F J=1:1:6 I $P(IBND("U6"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U6"),"^",J)=$P(IBND("U6"),"^",J)
"RTN","IBCCC2",86,0)
 Q
"RTN","IBCCC2",87,0)
U7 F J=1:1:5 I $P(IBND("U7"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U7"),"^",J)=$P(IBND("U7"),"^",J)
"RTN","IBCCC2",88,0)
 Q
"RTN","IBCCC2",89,0)
U8 F J=1:1:3 I $P(IBND("U8"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U8"),"^",J)=$P(IBND("U8"),"^",J)
"RTN","IBCCC2",90,0)
 Q
"RTN","IBCCC2",91,0)
UF31 F J=3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
"RTN","IBCCC2",92,0)
 Q
"RTN","IBCCC2",93,0)
UF32 F J=1:1:3 I $P(IBND("UF32"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF32"),"^",J)=$P(IBND("UF32"),"^",J)
"RTN","IBCCC2",94,0)
 Q
"RTN","IBCCC2",95,0)
C F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
"RTN","IBCCC2",96,0)
 I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
"RTN","IBCCC2",97,0)
 Q
"RTN","IBCCC2",98,0)
M F J=1:1:9,11:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
"RTN","IBCCC2",99,0)
 Q
"RTN","IBCCC2",100,0)
CC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",101,0)
 S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",102,0)
OP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",103,0)
 S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",104,0)
 Q
"RTN","IBCCC2",105,0)
OC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",106,0)
 S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",107,0)
 Q
"RTN","IBCCC2",108,0)
OT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",109,0)
 S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",110,0)
 Q
"RTN","IBCCC2",111,0)
CV ; Don't copy value codes from inpatient inst to inpatient prof bills
"RTN","IBCCC2",112,0)
 I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
"RTN","IBCCC2",113,0)
 S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",114,0)
 S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",115,0)
 Q
"RTN","IBCCC2",116,0)
RC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",117,0)
 S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:16 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
"RTN","IBCCC2",118,0)
 Q
"RTN","IBCCC2",119,0)
CP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",120,0)
 I +$G(IBNOCPT) Q
"RTN","IBCCC2",121,0)
 ;WCJ;IB*2.0*577 - Added 2-node - IBND("CP2")
"RTN","IBCCC2",122,0)
 S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP1")=$G(^(1)),IBND("CP2")=$G(^(2)),IBND("CP-AUX")=$G(^("AUX")) D
"RTN","IBCCC2",123,0)
 . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
"RTN","IBCCC2",124,0)
 . ; IB*2.0*432 add new 1 node
"RTN","IBCCC2",125,0)
 . ; MRD;IB*2.0*516 - Added pieces 7 & 8 (NDC, Units) to 1-node.
"RTN","IBCCC2",126,0)
 . F K=1:1:8 S $P(^DGCR(399,IBIFN,I,J,1),"^",K)=$P(IBND("CP1"),"^",K)
"RTN","IBCCC2",127,0)
 . ; WCJ;IB*2.0*577 - Added piece 1 (UNITS/BASIS OF MEASUREMENT) to 2-node.
"RTN","IBCCC2",128,0)
 . F K=1:1:1 S $P(^DGCR(399,IBIFN,I,J,2),"^",K)=$P(IBND("CP2"),"^",K)
"RTN","IBCCC2",129,0)
 . ; esg - 11/2/06 - IB*2*348 - 50.09 field was added - AUX piece [9]
"RTN","IBCCC2",130,0)
 . I IBND("CP-AUX")'="" F K=1:1:9 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
"RTN","IBCCC2",131,0)
 . ; IB*2.0*432 add new LNPRV multiple
"RTN","IBCCC2",132,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"LNPRV",0)) S ^DGCR(399,IBIFN,I,J,"LNPRV",0)=^DGCR(399,IBIFN1,I,J,"LNPRV",0) D
"RTN","IBCCC2",133,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"LNPRV",K)) Q:'K  D
"RTN","IBCCC2",134,0)
 ... S ^DGCR(399,IBIFN,I,J,"LNPRV",K,0)=^DGCR(399,IBIFN1,I,J,"LNPRV",K,0)
"RTN","IBCCC2",135,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
"RTN","IBCCC2",136,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
"RTN","IBCCC2",137,0)
 ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier from inst to prof bill
"RTN","IBCCC2",138,0)
 ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
"RTN","IBCCC2",139,0)
CP1 S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
"RTN","IBCCC2",140,0)
 I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D FILE
"RTN","IBCCC2",141,0)
 I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D FILE
"RTN","IBCCC2",142,0)
 I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D FILE
"RTN","IBCCC2",143,0)
 Q
"RTN","IBCCC2",144,0)
 ;
"RTN","IBCCC2",145,0)
PRV ; Copy providers for cloned claim
"RTN","IBCCC2",146,0)
 N Z,Z0,CNT
"RTN","IBCCC2",147,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19),CNT=0
"RTN","IBCCC2",148,0)
 S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
"RTN","IBCCC2",149,0)
 . I $$GETNPI^IBCEF73A($P(^DGCR(399,IBIFN1,I,J,0),U,2))="" Q  ;Don't file provider if no NPI - IB*2*516
"RTN","IBCCC2",150,0)
 . S CNT=CNT+1,^DGCR(399,IBIFN,I,CNT,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",151,0)
 . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,CNT,0),U)=(Z0+1)
"RTN","IBCCC2",152,0)
 I CNT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0),$P(^DGCR(399,IBIFN,I,0),U,3)=CNT,$P(^DGCR(399,IBIFN,I,0),U,4)=CNT
"RTN","IBCCC2",153,0)
 Q
"RTN","IBCCC2",154,0)
 ;
"RTN","IBCCC2",155,0)
U9 ; Added for new data elements in IB*2.0*447 BI
"RTN","IBCCC2",156,0)
 M ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",157,0)
 Q
"RTN","IBCCC2",158,0)
 ;
"RTN","IBCCC2",159,0)
COB S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
"RTN","IBCCC2",160,0)
 Q
"RTN","IBCCC2",161,0)
 ;
"RTN","IBCCC2",162,0)
FILE N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
"RTN","IBCCC2",163,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCC2",164,0)
 S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
"RTN","IBCCC2",165,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
"RTN","IBCCC2",166,0)
 K DGPROCDT
"RTN","IBCCC2",167,0)
 Q
"RTN","IBCCC2",168,0)
 ;
"RTN","IBCCC2",169,0)
INDEX ;index entire file (set logic)
"RTN","IBCCC2",170,0)
 N IBMAED D SAVERC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",171,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
"RTN","IBCCC2",172,0)
 D RESTRC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",173,0)
 Q
"RTN","IBCCC2",174,0)
 ;
"RTN","IBCCC2",175,0)
PRIOR(IBIFN) ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
"RTN","IBCCC2",176,0)
 N IBSEQ,IBSEQN,IBM1,I,IBIFN1
"RTN","IBCCC2",177,0)
 S IBSEQ=$$COB^IBCEF(IBIFN)
"RTN","IBCCC2",178,0)
 S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
"RTN","IBCCC2",179,0)
 ;
"RTN","IBCCC2",180,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
"RTN","IBCCC2",181,0)
 F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
"RTN","IBCCC2",182,0)
 Q
"RTN","IBCCC2",183,0)
 ;
"RTN","IBCCC2",184,0)
COBCHG(IBIFN,IBINS,IBCOB) ; Make changes for a new COB payer for bill
"RTN","IBCCC2",185,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCCC2",186,0)
 ; IBINS = ien of bill's current insurance (optional)
"RTN","IBCCC2",187,0)
 ; IBCOB = array subscripted by node,piece of COB data field change
"RTN","IBCCC2",188,0)
 ;
"RTN","IBCCC2",189,0)
 N I,IBFRMTYP,IBTAXLST
"RTN","IBCCC2",190,0)
 ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
"RTN","IBCCC2",191,0)
 F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
"RTN","IBCCC2",192,0)
 ;
"RTN","IBCCC2",193,0)
 I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
"RTN","IBCCC2",194,0)
 . ;MCRWNR is current insurance ... move payer only
"RTN","IBCCC2",195,0)
 . N IBCOBN,IBX
"RTN","IBCCC2",196,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCCC2",197,0)
 . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
"RTN","IBCCC2",198,0)
 . S IBCOB("M1",IBCOBN+4)=IBIFN
"RTN","IBCCC2",199,0)
 . S IBCOB("TX",1)="",IBCOB("TX",2)=""
"RTN","IBCCC2",200,0)
 . S IBX=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCCC2",201,0)
 . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
"RTN","IBCCC2",202,0)
 . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
"RTN","IBCCC2",203,0)
 . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
"RTN","IBCCC2",204,0)
 . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
"RTN","IBCCC2",205,0)
 . D PRIOR(IBIFN)
"RTN","IBCCC2",206,0)
 . Q
"RTN","IBCCC2",207,0)
 ;
"RTN","IBCCC2",208,0)
 ;reset fields for next Sequence Payer
"RTN","IBCCC2",209,0)
 F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
"RTN","IBCCC2",210,0)
 ;
"RTN","IBCCC2",211,0)
 ; IB*2.0*211
"RTN","IBCCC2",212,0)
 ; save off Form Type
"RTN","IBCCC2",213,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC2",214,0)
 ; Save off Taxonomies for providers.
"RTN","IBCCC2",215,0)
 S I=0 F  S I=$O(^DGCR(399,IBIFN,"PRV",I)) Q:'I  S IBTAXLST(I)=$P($G(^DGCR(399,IBIFN,"PRV",I,0)),U,15)
"RTN","IBCCC2",216,0)
 ;
"RTN","IBCCC2",217,0)
 ; fire xrefs set logic
"RTN","IBCCC2",218,0)
 D INDEX
"RTN","IBCCC2",219,0)
 ;
"RTN","IBCCC2",220,0)
 ; Restore Form Type if changed, but don't restore Form Type if
"RTN","IBCCC2",221,0)
 ;   creating CMS-1500 claim from CTCOPY1^IBCCCB
"RTN","IBCCC2",222,0)
 I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D ^DIE
"RTN","IBCCC2",223,0)
 ;
"RTN","IBCCC2",224,0)
 ; Restore Claim MRA Status field since triggers in fields 101 & 102
"RTN","IBCCC2",225,0)
 ;   will overwrite the correct value when processing the MRA/EOB.
"RTN","IBCCC2",226,0)
 ; If we're processing the MRA/EOB, then a valid MRA has been received.
"RTN","IBCCC2",227,0)
 I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
"RTN","IBCCC2",228,0)
 ;
"RTN","IBCCC2",229,0)
 ; Only if cloning, then restore Taxonomies in fields 243 and 244 and 252.
"RTN","IBCCC2",230,0)
 I '$G(IBINS),'$G(IBPRCOB) D
"RTN","IBCCC2",231,0)
 . S I=$P($G(IBND("U3")),U,2)
"RTN","IBCCC2",232,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,2) D
"RTN","IBCCC2",233,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="243////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",234,0)
 . ;
"RTN","IBCCC2",235,0)
 . S I=$P($G(IBND("U3")),U,3)
"RTN","IBCCC2",236,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,3) D
"RTN","IBCCC2",237,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="244////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",238,0)
 . ;
"RTN","IBCCC2",239,0)
 . S I=$P($G(IBND("U3")),U,11)
"RTN","IBCCC2",240,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,11) D
"RTN","IBCCC2",241,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="252////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",242,0)
 . Q
"RTN","IBCCC2",243,0)
 ;
"RTN","IBCCC2",244,0)
 ; Restore Taxonomies in field .15 in sub-file 399.0222.
"RTN","IBCCC2",245,0)
 S IBTAXLST=0 F  S IBTAXLST=$O(IBTAXLST(IBTAXLST)) Q:'IBTAXLST  D
"RTN","IBCCC2",246,0)
 . S I=IBTAXLST(IBTAXLST)
"RTN","IBCCC2",247,0)
 . I I=$P($G(^DGCR(399,IBIFN,"PRV",IBTAXLST,0)),U,15) Q  ; No change
"RTN","IBCCC2",248,0)
 . N DA,DIE,DR
"RTN","IBCCC2",249,0)
 . S DA(1)=IBIFN,DA=IBTAXLST
"RTN","IBCCC2",250,0)
 . S DIE="^DGCR(399,"_DA(1)_",""PRV"",",DR=".15////"_$S(I'="":I,1:"@")
"RTN","IBCCC2",251,0)
 . D ^DIE
"RTN","IBCCC2",252,0)
 . Q
"RTN","IBCCC2",253,0)
 ;
"RTN","IBCCC2",254,0)
 K IBCOB("TX")
"RTN","IBCCC2",255,0)
 Q
"RTN","IBCCC2",256,0)
 ;
"RTN","IBCCC2",257,0)
SAVERC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",258,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",259,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",260,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",261,0)
 F  S IBCNT=$O(^DGCR(399,IBIFN,"RC",IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",262,0)
 . S IBMAED(IBCNT)=$P($G(^DGCR(399,IBIFN,"RC",IBCNT,0)),U,16)
"RTN","IBCCC2",263,0)
 Q
"RTN","IBCCC2",264,0)
 ;
"RTN","IBCCC2",265,0)
RESTRC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node after re-indexing.
"RTN","IBCCC2",266,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",267,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",268,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",269,0)
 F  S IBCNT=$O(IBMAED(IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",270,0)
 . S $P(^DGCR(399,IBIFN,"RC",IBCNT,0),U,16)=IBMAED(IBCNT)
"RTN","IBCCC2",271,0)
 Q
"RTN","IBCEF11")
0^4^B86419290^B80990662
"RTN","IBCEF11",1,0)
IBCEF11 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371,432,447,473,516,577**;21-MAR-94;Build 38
"RTN","IBCEF11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF11",4,0)
 ;
"RTN","IBCEF11",5,0)
BOX24D(A,IB) ; Returns the lines for boxes 19-24 of the CMS-1500 display
"RTN","IBCEF11",6,0)
 ; IB = flag is 1 if only box 24 is needed
"RTN","IBCEF11",7,0)
 Q $S('$G(IB):"36",1:"44")_"^55"
"RTN","IBCEF11",8,0)
 ;
"RTN","IBCEF11",9,0)
RCBOX() ; Returns the lines for revenue code boxes of the UB-04 display
"RTN","IBCEF11",10,0)
 Q "19^41"
"RTN","IBCEF11",11,0)
 ;
"RTN","IBCEF11",12,0)
OUTPT(IBIFN,IBPRINT) ; Returns an array of service line data from
"RTN","IBCEF11",13,0)
 ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
"RTN","IBCEF11",14,0)
 ; IBPRINT = print flag  1: return print fields
"RTN","IBCEF11",15,0)
 ;                       0: return EDI fields
"RTN","IBCEF11",16,0)
 ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
"RTN","IBCEF11",17,0)
 ;   if it already exists. If not, it builds it from N-DIAGNOSES element
"RTN","IBCEF11",18,0)
 ;
"RTN","IBCEF11",19,0)
 ; For EDI call: Returns IBXDATA(n)=
"RTN","IBCEF11",20,0)
 ;   begin date(YYYYMMDD) ^ end date(YYYYMMDD) ^ pos ^ tos ^
"RTN","IBCEF11",21,0)
 ;   proc code/revenue code - if no procedure (not the pointers) ^
"RTN","IBCEF11",22,0)
 ;   type of code ^ dx pointer(s ) ^ unit charge ^ units ^ modifiers separated by ;
"RTN","IBCEF11",23,0)
 ;   ^ purchased charge amount ^ anesthesia minutes ^ emergency indicator ^
"RTN","IBCEF11",24,0)
 ;   lab-type service flag ^ NDC ^ Units/Quantity ^ Unit/Basis of Measurement (vd/IB*2*577)
"RTN","IBCEF11",25,0)
 ;
"RTN","IBCEF11",26,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF11",27,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF11",28,0)
 ;      line in the first '^' piece followed by the '0' node data of file
"RTN","IBCEF11",29,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF11",30,0)
 ;       COB = COB sequence # of adjustment's ins co, m = seq #
"RTN","IBCEF11",31,0)
 ;         -- AND --
"RTN","IBCEF11",32,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF11",33,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEF11",34,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEF11",35,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF11",36,0)
 ;
"RTN","IBCEF11",37,0)
 ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
"RTN","IBCEF11",38,0)
 ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
"RTN","IBCEF11",39,0)
 ;   or procedure code(not the pointer)^ ... refer to EDI call results
"RTN","IBCEF11",40,0)
 ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
"RTN","IBCEF11",41,0)
 ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
"RTN","IBCEF11",42,0)
 ;
"RTN","IBCEF11",43,0)
 ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
"RTN","IBCEF11",44,0)
 ;      -- AND --
"RTN","IBCEF11",45,0)
 ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
"RTN","IBCEF11",46,0)
 ;                   ^chrge^ien of file 362.4^NDC format
"RTN","IBCEF11",47,0)
 ;           If line references a prescription
"RTN","IBCEF11",48,0)
 ;      -- AND --
"RTN","IBCEF11",49,0)
 ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
"RTN","IBCEF11",50,0)
 ;      -- AND --
"RTN","IBCEF11",51,0)
 ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
"RTN","IBCEF11",52,0)
 ;
"RTN","IBCEF11",53,0)
 ; Also returns IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF11",54,0)
 ;
"RTN","IBCEF11",55,0)
 N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
"RTN","IBCEF11",56,0)
 ;
"RTN","IBCEF11",57,0)
 K ^TMP($J,"IBITEM")
"RTN","IBCEF11",58,0)
 S ^TMP($J,"IBITEM")=""
"RTN","IBCEF11",59,0)
 ; Build diagnosis array if not already built
"RTN","IBCEF11",60,0)
 I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
"RTN","IBCEF11",61,0)
 .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCEF11",62,0)
 .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,$P(IBXDATA(Z),U,2))=Z
"RTN","IBCEF11",63,0)
 ;
"RTN","IBCEF11",64,0)
 S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
"RTN","IBCEF11",65,0)
 S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
"RTN","IBCEF11",66,0)
 I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
"RTN","IBCEF11",67,0)
 I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
"RTN","IBCEF11",68,0)
 ; Returns IBFLD(24) = begin date ^ end date ^ pos ^ tos ^
"RTN","IBCEF11",69,0)
 ;     proc/bedsection/revenue code ^ dx pointer ^ unit charge ^
"RTN","IBCEF11",70,0)
 ;     units ^ modifiers ^ purchased charge amount ^ anesthesia minutes ^
"RTN","IBCEF11",71,0)
 ;     emergency indicator ^ soft pointer to PROCEDURES multiple in file 399 ^
"RTN","IBCEF11",72,0)
 ;     NDC ^ Units
"RTN","IBCEF11",73,0)
 ;         IBFLD(24,n,type,item)=""
"RTN","IBCEF11",74,0)
 ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
"RTN","IBCEF11",75,0)
 ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
"RTN","IBCEF11",76,0)
 ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
"RTN","IBCEF11",77,0)
 ;                            (can be null)
"RTN","IBCEF11",78,0)
 ;
"RTN","IBCEF11",79,0)
 D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
"RTN","IBCEF11",80,0)
 ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
"RTN","IBCEF11",81,0)
 I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
"RTN","IBCEF11",82,0)
 . N IBRXH
"RTN","IBCEF11",83,0)
 . S IBRXH=IBRX(IBRX,IBRX0)
"RTN","IBCEF11",84,0)
 . ; **IB*2.0*432** added _U_$P(IBRXH,U,9) (Rx Date) to Output Formatter
"RTN","IBCEF11",85,0)
 . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U,6)_U_+IBRXH_U_$P(IBRXH,U,8)_U_$P(IBRXH,U,9)
"RTN","IBCEF11",86,0)
 K IBRX
"RTN","IBCEF11",87,0)
 ;
"RTN","IBCEF11",88,0)
 ; for EDI, remove any $0 line items from the IBFLD array before 
"RTN","IBCEF11",89,0)
 ; dropping down into the next loop (IB*2*371)
"RTN","IBCEF11",90,0)
 ; Start IB*2.0*447 BI - Code removed to allow 0 dollars to print.
"RTN","IBCEF11",91,0)
 ;I '$G(IBPRINT) D
"RTN","IBCEF11",92,0)
 ;. NEW IBZ,IBI,Z
"RTN","IBCEF11",93,0)
 ;. M IBZ=IBFLD K IBFLD
"RTN","IBCEF11",94,0)
 ;. S (IBI,Z)=0
"RTN","IBCEF11",95,0)
 ;. F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",96,0)
 ;.. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
"RTN","IBCEF11",97,0)
 ;.. S Z=Z+1
"RTN","IBCEF11",98,0)
 ;.. M IBFLD(24,Z)=IBZ(24,IBI)
"RTN","IBCEF11",99,0)
 ;.. S IBFLD(24)=Z
"RTN","IBCEF11",100,0)
 ;.. Q
"RTN","IBCEF11",101,0)
 ;. Q
"RTN","IBCEF11",102,0)
 ; End IB*2.0*447 BI
"RTN","IBCEF11",103,0)
 ;
"RTN","IBCEF11",104,0)
 S IBI=0
"RTN","IBCEF11",105,0)
 F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",106,0)
 . S IBRX1=0
"RTN","IBCEF11",107,0)
 . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
"RTN","IBCEF11",108,0)
 . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
"RTN","IBCEF11",109,0)
 . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
"RTN","IBCEF11",110,0)
 . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
"RTN","IBCEF11",111,0)
 . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
"RTN","IBCEF11",112,0)
 . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim,
"RTN","IBCEF11",113,0)
 . ; pieces 14 & 15 of IBFLD, pieces 15 & 16 of IBXDATA. Print
"RTN","IBCEF11",114,0)
 . ; in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",115,0)
 . ;S $P(IBXDATA(IBI),U,15,16)=$P(IBFLD(24,IBI),U,14,15)
"RTN","IBCEF11",116,0)
 . ;I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" UN"_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",117,0)
 . ; vd/IB*2*577 - Added Unit/Basis of Measurement to line level of claim,
"RTN","IBCEF11",118,0)
 . ; piece 16 of IBFLD, piece 17 of IBXDATA.
"RTN","IBCEF11",119,0)
 . ; Print in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",120,0)
 . S $P(IBXDATA(IBI),U,15,17)=$P(IBFLD(24,IBI),U,14,16)
"RTN","IBCEF11",121,0)
 . I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" "_$P(IBFLD(24,IBI),U,16)_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",122,0)
 . ;
"RTN","IBCEF11",123,0)
 . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
"RTN","IBCEF11",124,0)
 .. S IBRX1=1
"RTN","IBCEF11",125,0)
 .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text allowed for rx's
"RTN","IBCEF11",126,0)
 .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
"RTN","IBCEF11",127,0)
 ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
"RTN","IBCEF11",128,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2),.01)),1,30)
"RTN","IBCEF11",129,0)
 ... K IBRX1(+IBFLD(24,IBI,"RX"))
"RTN","IBCEF11",130,0)
 ... ; No soft link - must find the first Rx with the same charge
"RTN","IBCEF11",131,0)
 .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
"RTN","IBCEF11",132,0)
 ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",133,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX) Q
"RTN","IBCEF11",134,0)
 ... Q
"RTN","IBCEF11",135,0)
 .. Q
"RTN","IBCEF11",136,0)
 . ;
"RTN","IBCEF11",137,0)
 . ; MRD;IB*2.0*516 - If additional service line comments to appear in
"RTN","IBCEF11",138,0)
 . ; Box 24, concatenate to front if something (NDC) is already there.
"RTN","IBCEF11",139,0)
 . I $G(IBFLD(24,IBI,"AUX"))'="" D
"RTN","IBCEF11",140,0)
 .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" D
"RTN","IBCEF11",141,0)
 ... I $G(IBXDATA(IBI,"TEXT"))'="" S IBXDATA(IBI,"TEXT")=$E($P(IBFLD(24,IBI,"AUX"),U,8)_" "_IBXDATA(IBI,"TEXT"),1,59)
"RTN","IBCEF11",142,0)
 ... E  S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8)
"RTN","IBCEF11",143,0)
 ... S $P(IBFLD(24,IBI,"AUX"),U,8)=""
"RTN","IBCEF11",144,0)
 ... Q
"RTN","IBCEF11",145,0)
 .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
"RTN","IBCEF11",146,0)
 .. Q
"RTN","IBCEF11",147,0)
 . ;
"RTN","IBCEF11",148,0)
 . I $G(IBPRINT) D
"RTN","IBCEF11",149,0)
 .. ; START IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",150,0)
 .. ; I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",151,0)
 .. I $P(IBXDATA(IBI),U,8)="",'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",152,0)
 ... ; END IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",153,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",154,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
"RTN","IBCEF11",155,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",156,0)
 ... Q
"RTN","IBCEF11",157,0)
 .. ;
"RTN","IBCEF11",158,0)
 .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
"RTN","IBCEF11",159,0)
 ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
"RTN","IBCEF11",160,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",161,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
"RTN","IBCEF11",162,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",163,0)
 ... Q
"RTN","IBCEF11",164,0)
 .. ;
"RTN","IBCEF11",165,0)
 .. S IBRX=$G(IBXDATA(IBI,"RX"))
"RTN","IBCEF11",166,0)
 .. I IBRX'="" D  ;Format Rx detail
"RTN","IBCEF11",167,0)
 ... N Z
"RTN","IBCEF11",168,0)
 ... S Z=$P(IBRX,U)
"RTN","IBCEF11",169,0)
 ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
"RTN","IBCEF11",170,0)
 ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: "_$P(IBRX,U,7)
"RTN","IBCEF11",171,0)
 ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
"RTN","IBCEF11",172,0)
 ... Q
"RTN","IBCEF11",173,0)
 .. Q
"RTN","IBCEF11",174,0)
 . S IBXDATA(IBI,"CPLNK")=$P(IBFLD(24,IBI),U,13)
"RTN","IBCEF11",175,0)
 . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
"RTN","IBCEF11",176,0)
 . Q
"RTN","IBCEF11",177,0)
 ;
"RTN","IBCEF11",178,0)
 I $G(IBPRINT) D
"RTN","IBCEF11",179,0)
 . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
"RTN","IBCEF11",180,0)
 .. S IBI=+$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",181,0)
 .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
"RTN","IBCEF11",182,0)
 .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBRX),U,3)
"RTN","IBCEF11",183,0)
 .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",184,0)
 .. S IBXDATA(IBI,"ARX")=""
"RTN","IBCEF11",185,0)
 .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",186,0)
 .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX)
"RTN","IBCEF11",187,0)
 .. Q
"RTN","IBCEF11",188,0)
 . Q
"RTN","IBCEF11",189,0)
 ;
"RTN","IBCEF11",190,0)
 I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
"RTN","IBCEF11",191,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCEF11",192,0)
 Q
"RTN","IBCEF11",193,0)
 ;
"RTN","IBCEF11",194,0)
ISLAB(LDATA) ; Returns 0/1 if line item data indicates the item is a lab (1)
"RTN","IBCEF11",195,0)
 ; 'LAB' is defined here as type of service = 5
"RTN","IBCEF11",196,0)
 Q $E($P(LDATA,U,4))="5"
"RTN","IBCEF11",197,0)
 ;
"RTN","IBCEF11",198,0)
FMT(DATA,DLEN,FLEN) ; Returns a string in DATA with a max length of DLEN
"RTN","IBCEF11",199,0)
 ;  and a field length of FLEN
"RTN","IBCEF11",200,0)
 Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
"RTN","IBCEF11",201,0)
 ;
"RTN","IBCEF11",202,0)
DATE(X,DEL) ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
"RTN","IBCEF11",203,0)
 S DEL=$G(DEL)
"RTN","IBCEF11",204,0)
 S X=$$DATE^IBCF2(X,1,1)
"RTN","IBCEF11",205,0)
 I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
"RTN","IBCEF11",206,0)
 Q X
"RTN","IBCEF11",207,0)
 ;
"RTN","IBCEF11",208,0)
BATCH() ; Sets up record for and stores/returns the next batch number
"RTN","IBCEF11",209,0)
 N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
"RTN","IBCEF11",210,0)
 ;Keep latest batch number for view/print edi bill extract data option
"RTN","IBCEF11",211,0)
 I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
"RTN","IBCEF11",212,0)
 ;Check for batch resubmit - if yes, use same number as original batch
"RTN","IBCEF11",213,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
"RTN","IBCEF11",214,0)
 L +^IBA(364.1,0):5 I '$T Q 0
"RTN","IBCEF11",215,0)
 S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",216,0)
 I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
"RTN","IBCEF11",217,0)
 . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
"RTN","IBCEF11",218,0)
 . S NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",219,0)
 F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
"RTN","IBCEF11",220,0)
 K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
"RTN","IBCEF11",221,0)
 L -^IBA(364.1,0)
"RTN","IBCEF11",222,0)
BATCHQ Q NUM
"RTN","IBCEF11",223,0)
 ;
"RTN","IBCEF11",224,0)
GETLDAT(IBXIEN) ; Extract data for 837 transmission LDAT record
"RTN","IBCEF11",225,0)
 ; IBXIEN - ien in file 399
"RTN","IBCEF11",226,0)
 ; Sets up IBXSAVE("LDAT",n) array:
"RTN","IBCEF11",227,0)
 ; Attachment report type ^ Attachment report transmission code ^ Attachment control number ^ 
"RTN","IBCEF11",228,0)
 ; OB Anesthesia Additional Units ^ Purchase Service Provider ID ^ Purchase Service Amount ^
"RTN","IBCEF11",229,0)
 N CPIEN,FTYPE,IBXDATA,IDS,IBIDS,NODE1,PSAMNT,PSPID,Z,PCE1,LINE
"RTN","IBCEF11",230,0)
 I '+$G(IBXIEN) Q
"RTN","IBCEF11",231,0)
 K IBXSAVE("LDAT")
"RTN","IBCEF11",232,0)
 S FTYPE=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF11",233,0)
 I FTYPE=2 D OUTPT(IBXIEN,0)
"RTN","IBCEF11",234,0)
 I FTYPE=3 D HOS^IBCEF2(IBXIEN)
"RTN","IBCEF11",235,0)
 D ALLIDS^IBCEFP(IBXIEN,.IDS,1)
"RTN","IBCEF11",236,0)
 S (PSPID,PSAMNT)=""
"RTN","IBCEF11",237,0)
 ; IB*2.0*473/TAZ - Convert PROVIDER code to function call to PSID^IBCEFP
"RTN","IBCEF11",238,0)
 I $$SUB1OK^IBCEP8A(IBXIEN),(FTYPE=2) D
"RTN","IBCEF11",239,0)
 . D PSID^IBCEFP(IBXIEN,.IDS,.IBIDS)
"RTN","IBCEF11",240,0)
 . S PSPID=$G(IBIDS(0)) I PSPID="" S PSPID=$P($G(IBIDS(1)),U,1)
"RTN","IBCEF11",241,0)
 ;IB*2.0*473/TAZ - END
"RTN","IBCEF11",242,0)
 S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
"RTN","IBCEF11",243,0)
 . S CPIEN=+$G(IBXDATA(Z,"CPLNK")) ;I 'CPIEN Q
"RTN","IBCEF11",244,0)
 . I FTYPE=2,$$SUB1OK^IBCEP8A(IBXIEN) S PSAMNT=$$DOLLAR^IBCEFG1($P($G(IBXDATA(Z)),U,11))
"RTN","IBCEF11",245,0)
 . S (PCE1,NODE1)=""
"RTN","IBCEF11",246,0)
 . I CPIEN D
"RTN","IBCEF11",247,0)
 . . S NODE1=$G(^DGCR(399,IBXIEN,"CP",CPIEN,1))
"RTN","IBCEF11",248,0)
 . . S PCE1=$$GET1^DIQ(399.0304,CPIEN_","_IBXIEN_",",71)
"RTN","IBCEF11",249,0)
 . . Q
"RTN","IBCEF11",250,0)
 . ; MRD;IB*2.0*516 - Added addl. procedure description as piece 7 
"RTN","IBCEF11",251,0)
 . ; of IBXSAVE, which will exist only if the procedure ends in '99'
"RTN","IBCEF11",252,0)
 . ; or is an 'NOC/NOS' procedure.
"RTN","IBCEF11",253,0)
 . S IBXSAVE("LDAT",Z)=PCE1_U_$P(NODE1,U,3)_U_$P(NODE1,U)_U_$P(NODE1,U,5)_U_$G(PSPID)_U_$G(PSAMNT)_U_$P(NODE1,U,4)
"RTN","IBCEF11",254,0)
 . Q
"RTN","IBCEF11",255,0)
 Q
"RTN","IBCEF22")
0^6^B97383500^B90984490
"RTN","IBCEF22",1,0)
IBCEF22 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;06-FEB-96
"RTN","IBCEF22",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,135,155,309,349,389,432,488,516,577**;21-MAR-94;Build 38
"RTN","IBCEF22",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF22",4,0)
 ;
"RTN","IBCEF22",5,0)
 ;  OVERFLOW FROM ROUTINE IBCEF2
"RTN","IBCEF22",6,0)
HOS(IBIFN) ; Extract rev codes for episode billed on a UB-04 into IBXDATA
"RTN","IBCEF22",7,0)
 ; IBIFN = bill ien
"RTN","IBCEF22",8,0)
 ; Format: IBXDATA(n) =
"RTN","IBCEF22",9,0)
 ;  rev cd ptr ^ CPT CODE ptr ^ unit chg ^ units ^ tot charge
"RTN","IBCEF22",10,0)
 ;    ^ tot uncov ^ FL49 value
"RTN","IBCEF22",11,0)
 ;    ^ ien of rev code multiple entry(s) (separated by ";")
"RTN","IBCEF22",12,0)
 ;    ^ modifiers specific to rev code/proc (separated by ",")
"RTN","IBCEF22",13,0)
 ;    ^ rev code date, if it can be determined by a corresponding proc
"RTN","IBCEF22",14,0)
 ;    ^ NDC from "CP" node of claim ^ Units/Quantity from "CP" node  - vd/IB*2*577
"RTN","IBCEF22",15,0)
 ;    ^ Units/Basis of Measurement for Drugs  - vd/IB*2*577
"RTN","IBCEF22",16,0)
 ;
"RTN","IBCEF22",17,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF22",18,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF22",19,0)
 ;      line in the first '^' piece followed by the '0' node of file
"RTN","IBCEF22",20,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF22",21,0)
 ;       COB = COB seq # of adjustment's ins co, m = seq #
"RTN","IBCEF22",22,0)
 ;         -- AND --
"RTN","IBCEF22",23,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF22",24,0)
 ;           the '0' node for each subordinate entry of file
"RTN","IBCEF22",25,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837)
"RTN","IBCEF22",26,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF22",27,0)
 ;
"RTN","IBCEF22",28,0)
 ;         -- AND --
"RTN","IBCEF22",29,0)
 ;    IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF22",30,0)
 ;
"RTN","IBCEF22",31,0)
 N IBDA,IBCOMB,IBINPAT,IBLN,IBX,IBY,IBZ,IBS,IBSS,IBXTRA,IBX1,IBXS,IBP,IBPO,IBP1,IBDEF,Z,Z0,Z1,ZX,QQ,IBMOD,LST
"RTN","IBCEF22",32,0)
 S IBINPAT=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF22",33,0)
 I 'IBINPAT D F^IBCEF("N-STATEMENT COVERS FROM DATE","IBZ",,IBIFN)
"RTN","IBCEF22",34,0)
 S IBDEF=$G(IBZ),LST=""
"RTN","IBCEF22",35,0)
 ;
"RTN","IBCEF22",36,0)
 ; Loop through lines of claim beneath ^DGCR(399,IBIFN,"CP") and build
"RTN","IBCEF22",37,0)
 ; the array IBP to be used below.
"RTN","IBCEF22",38,0)
 ;    IBP(Procedure ^ Modifiers, Print Order, Line#) = Procedure Date
"RTN","IBCEF22",39,0)
 ;
"RTN","IBCEF22",40,0)
 S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"CP",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ D
"RTN","IBCEF22",41,0)
 . S IBP(+$P(IBZ,U)_U_$$GETMOD^IBEFUNC(IBIFN,IBDA,1),$S($P(IBZ,U,4):$P(IBZ,U,4),1:999),IBDA)=$P(IBZ,U,2)
"RTN","IBCEF22",42,0)
 ;
"RTN","IBCEF22",43,0)
 ; Loop through the revenue codes beneath ^DGCR(399,IBIFN,"RC") and
"RTN","IBCEF22",44,0)
 ; build the array IBX to be used below.
"RTN","IBCEF22",45,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#) =
"RTN","IBCEF22",46,0)
 ;          ^DGCR(399.2, Revenue Code IEN, 0)
"RTN","IBCEF22",47,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "DT") = Procedure Date
"RTN","IBCEF22",48,0)
 ;    IBX(" "_Revenue Code, Print Order, Revenue Line#, "MOD") = Modifiers
"RTN","IBCEF22",49,0)
 ;
"RTN","IBCEF22",50,0)
 S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"RC",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I IBZ S IBMOD="" D
"RTN","IBCEF22",51,0)
 . S IBX=$G(^DGCR(399.2,+IBZ,0)),IBX1="",IBPO=0
"RTN","IBCEF22",52,0)
 . ; Auto-added procedure charge
"RTN","IBCEF22",53,0)
 . I $P(IBZ,U,10)=4,$P(IBZ,U,11) D  ; Soft link to proc
"RTN","IBCEF22",54,0)
 .. S Z=$G(^DGCR(399,IBIFN,"CP",$P(IBZ,U,11),0))
"RTN","IBCEF22",55,0)
 .. Q:Z=""
"RTN","IBCEF22",56,0)
 .. S ZX=+Z_U_$$GETMOD^IBEFUNC(IBIFN,$P(IBZ,U,11),1)
"RTN","IBCEF22",57,0)
 .. Q:'$O(IBP(ZX,0))&'$O(IBP1(ZX,0))
"RTN","IBCEF22",58,0)
 .. I $P(IBZ,U,6) Q:$S($P(Z,U)'["ICPT":1,1:+$P(Z,U)'=$P(IBZ,U,6))
"RTN","IBCEF22",59,0)
 .. S Z0=$S($D(IBP(ZX)):$O(IBP(ZX,0)),1:$O(IBP1(ZX,0)))
"RTN","IBCEF22",60,0)
 .. S:'Z0 Z0=999
"RTN","IBCEF22",61,0)
 .. Q:'$D(IBP(ZX,+Z0,$P(IBZ,U,11)))&'$D(IBP1(ZX,+Z0,$P(IBZ,U,11)))
"RTN","IBCEF22",62,0)
 .. I '$D(IBP1(ZX,+Z0,$P(IBZ,U,11))) S IBP1(ZX,+Z0,$P(IBZ,U,11))=IBP(ZX,+Z0,$P(IBZ,U,11)) K IBP(ZX,+Z0,$P(IBZ,U,11))
"RTN","IBCEF22",63,0)
 .. S IBX1=$P(Z,U,2),IBPO=+Z0,IBMOD=$P(ZX,U,2)
"RTN","IBCEF22",64,0)
 . ; Manually added charge with a procedure
"RTN","IBCEF22",65,0)
 . I $P(IBZ,U,6),$S($P(IBZ,U,10)=4:'$P(IBZ,U,11),1:1),+$O(IBP($P(IBZ,U,6)))=$P(IBZ,U,6) D
"RTN","IBCEF22",66,0)
 .. ; No direct link, but a proc exists on rev code and in procedure mult without and then with modifiers
"RTN","IBCEF22",67,0)
 .. S ZX=$O(IBP($P(IBZ,U,6)))
"RTN","IBCEF22",68,0)
 .. F QQ=1,2 Q:IBPO  S Z="" F  S Z=$O(IBP(ZX,Z),-1) Q:'Z!(IBPO)  S Z0=0 F  S Z0=$O(IBP(ZX,Z,Z0)) Q:'Z0  S Z1=$G(^DGCR(399,IBIFN,"CP",Z0,0)) D  Q:IBPO
"RTN","IBCEF22",69,0)
 ... ; Ignore if not a CPT or a modifier exists and this is first pass
"RTN","IBCEF22",70,0)
 ... S IBMOD=$$GETMOD^IBEFUNC(IBIFN,Z0,1)
"RTN","IBCEF22",71,0)
 ... Q:$S($P(Z1,U)'["ICPT":1,QQ=1:IBMOD'="",1:0)
"RTN","IBCEF22",72,0)
 ... S IBPO=+$P(Z1,U,4),IBX1=$P(Z1,U,2)
"RTN","IBCEF22",73,0)
 ... K IBP(+Z1_U_IBMOD,Z,Z0)
"RTN","IBCEF22",74,0)
 . ;
"RTN","IBCEF22",75,0)
 . I IBX'="" D  ; revenue code is valid
"RTN","IBCEF22",76,0)
 .. S LST=$S(LST="":900,1:LST+1)
"RTN","IBCEF22",77,0)
 .. F Z=LST:1 S Z0=$S(IBPO:IBPO,$D(IBX(" "_$P(IBX,U),Z)):0,1:Z) I Z0 S (LST,IBPO)=Z0 Q
"RTN","IBCEF22",78,0)
 .. S IBX(" "_$P(IBX,U),IBPO,IBDA)=IBX,IBX(" "_$P(IBX,U),IBPO,IBDA,"DT")=$S(IBX1:IBX1,1:IBDEF),IBX(" "_$P(IBX,U),IBPO,IBDA,"MOD")=IBMOD
"RTN","IBCEF22",79,0)
 ;
"RTN","IBCEF22",80,0)
 ; Loop through revenue codes in IBX and build the array IBX1.
"RTN","IBCEF22",81,0)
 ;
"RTN","IBCEF22",82,0)
 S IBS="" F  S IBS=$O(IBX(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX(IBS,IBPO)) Q:'IBPO  D
"RTN","IBCEF22",83,0)
 . S IBDA=0 F  S IBDA=$O(IBX(IBS,IBPO,IBDA)) Q:'IBDA  S IBX=$G(IBX(IBS,IBPO,IBDA)),IBZ=$G(^DGCR(399,IBIFN,"RC",IBDA,0)) I IBX'="" D
"RTN","IBCEF22",84,0)
 .. ;S IBXS=$P(IBZ,U,2)_U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD"))
"RTN","IBCEF22",85,0)
 .. S IBXS=U_$P(IBZ,U,6)_U_$G(IBX(IBS,IBPO,IBDA,"MOD")) ;combine same proc and modifiers regardless of rate
"RTN","IBCEF22",86,0)
 .. S:IBPO'<900&'$$ACCRV($P(IBS," ",2))&$S(IBINPAT:$P(IBZ,U,6),1:1) IBCOMB(IBS,IBXS,IBPO)=IBDA
"RTN","IBCEF22",87,0)
 .. S:'$D(IBX1(IBS,IBPO,IBXS,1)) IBX1(IBS,IBPO,IBXS,1)=IBX,IBX1(IBS,IBPO,IBXS,2)=IBZ
"RTN","IBCEF22",88,0)
 .. S $P(IBX1(IBS,IBPO,IBXS),U)=$P($G(IBX1(IBS,IBPO,IBXS)),U)+$P(IBZ,U,3)
"RTN","IBCEF22",89,0)
 .. S $P(IBX1(IBS,IBPO,IBXS),U,2)=$P($G(IBX1(IBS,IBPO,IBXS)),U,2)+$P(IBZ,U,4)
"RTN","IBCEF22",90,0)
 .. S IBX1(IBS,IBPO,IBXS,"DT")=$G(IBX(IBS,IBPO,IBDA,"DT")),IBX1(IBS,IBPO,IBXS,"IEN")=$G(IBX1(IBS,IBPO,IBXS,"IEN"))_$S($G(IBX1(IBS,IBPO,IBXS,"IEN")):";",1:"")_IBDA
"RTN","IBCEF22",91,0)
 ;
"RTN","IBCEF22",92,0)
 S IBS="" F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=899 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  D  ; Check to combine like rev codes without print order
"RTN","IBCEF22",93,0)
 . N Q,Q0,Q1,Z,Z0,Z1,Z2,IBZ1,IBZ2
"RTN","IBCEF22",94,0)
 . S Z=""
"RTN","IBCEF22",95,0)
 . N IBACC
"RTN","IBCEF22",96,0)
 . F  S Z=$O(IBX1(IBS,IBPO,Z)) Q:Z=""  S Q=IBPO F  S Q=$O(IBCOMB(IBS,Z,Q)) Q:'Q  I Q'=IBPO S IBZ1=$G(IBX1(IBS,IBPO,Z,1)),IBZ2=$G(IBX1(IBS,IBPO,Z,2)) D
"RTN","IBCEF22",97,0)
 .. Q:$G(IBX1(IBS,IBPO,Z,1))'=$G(IBX1(IBS,Q,Z,1))
"RTN","IBCEF22",98,0)
 .. S Q1=1,IBACC=$$ACCRV(+$P(IBS," ",2))
"RTN","IBCEF22",99,0)
 .. F Q0=1,5:1:7,10:1:13,15 D  Q:'Q1
"RTN","IBCEF22",100,0)
 ... I IBACC Q:Q0=5!(Q0>6)
"RTN","IBCEF22",101,0)
 ... I (Q0=11!(Q0=15))&($P($G(IBX1(IBS,Q,Z,2)),U,10)=3) Q
"RTN","IBCEF22",102,0)
 ... I Q0=5,'IBINPAT Q
"RTN","IBCEF22",103,0)
 ... I $P($G(IBX1(IBS,IBPO,Z,2)),U,Q0)'=$P($G(IBX1(IBS,Q,Z,2)),U,Q0) S Q1=0
"RTN","IBCEF22",104,0)
 .. Q:'Q1
"RTN","IBCEF22",105,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,3)=$P(IBX1(IBS,IBPO,Z,2),U,3)+$P(IBX1(IBS,Q,Z,2),U,3)
"RTN","IBCEF22",106,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,4)=$P(IBX1(IBS,IBPO,Z,2),U,4)+$P(IBX1(IBS,Q,Z,2),U,4)
"RTN","IBCEF22",107,0)
 .. S $P(IBX1(IBS,IBPO,Z,2),U,9)=$P(IBX1(IBS,IBPO,Z,2),U,9)+$P(IBX1(IBS,Q,Z,2),U,9)
"RTN","IBCEF22",108,0)
 .. S IBX1(IBS,IBPO,Z)=$P(IBX1(IBS,IBPO,Z,2),U,3)_U_$P(IBX1(IBS,IBPO,Z,2),U,4)
"RTN","IBCEF22",109,0)
 .. S IBX1(IBS,IBPO,Z,"IEN")=IBX1(IBS,IBPO,Z,"IEN")_";"_IBX1(IBS,Q,Z,"IEN")
"RTN","IBCEF22",110,0)
 .. K IBX1(IBS,Q,Z)
"RTN","IBCEF22",111,0)
 ;
"RTN","IBCEF22",112,0)
 D SPLIT  ; 488 ; baa
"RTN","IBCEF22",113,0)
 ;
"RTN","IBCEF22",114,0)
 ; Loop through IBX1 and build the array IBXDATA. Everything in the
"RTN","IBCEF22",115,0)
 ; array IBXDATA comes from the array IBX1.
"RTN","IBCEF22",116,0)
 ;
"RTN","IBCEF22",117,0)
 S IBS="",IBLN=0
"RTN","IBCEF22",118,0)
 F  S IBS=$O(IBX1(IBS)) Q:IBS=""  S IBPO=0 F  S IBPO=$O(IBX1(IBS,IBPO)) Q:'IBPO  S IBSS="" F  S IBSS=$O(IBX1(IBS,IBPO,IBSS)) Q:IBSS=""  D
"RTN","IBCEF22",119,0)
 . S IBX=$G(IBX1(IBS,IBPO,IBSS,1)),IBZ=$G(IBX1(IBS,IBPO,IBSS,2))
"RTN","IBCEF22",120,0)
 . S IBLN=$G(IBLN)+1,IBXDATA(IBLN)=$P(IBX,U)_U_$P(IBZ,U,6)_U_$P(IBZ,U,2)_U_+IBX1(IBS,IBPO,IBSS)_U_+$P(IBX1(IBS,IBPO,IBSS),U,2),$P(IBXDATA(IBLN),U,10)=$G(IBX1(IBS,IBPO,IBSS,"DT"))
"RTN","IBCEF22",121,0)
 . S $P(IBXDATA(IBLN),U,6)=$P(IBZ,U,9),$P(IBXDATA(IBLN),U,7)=$P(IBZ,U,13),$P(IBXDATA(IBLN),U,8)=$G(IBX1(IBS,IBPO,IBSS,"IEN")),$P(IBXDATA(IBLN),U,9)=$P($P(IBSS,U,3),",",1,2)
"RTN","IBCEF22",122,0)
 . S IBXDATA(IBLN,"CPLNK")=$$RC2CP(IBIFN,$P($P(IBXDATA(IBLN),U,8),";"))
"RTN","IBCEF22",123,0)
 . ;
"RTN","IBCEF22",124,0)
 . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
"RTN","IBCEF22",125,0)
 . ;I IBXDATA(IBLN,"CPLNK") S $P(IBXDATA(IBLN),U,11,12)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")
"RTN","IBCEF22",126,0)
 . ; VAD;IB*2.0*577 - Added Unit/Basis of Measurement to line level of claim.
"RTN","IBCEF22",127,0)
 . I IBXDATA(IBLN,"CPLNK") D
"RTN","IBCEF22",128,0)
 . . S $P(IBXDATA(IBLN),U,11,13)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,"CP",IBXDATA(IBLN,"CPLNK"),2)),U)
"RTN","IBCEF22",129,0)
 . . I +$P(IBXDATA(IBLN),U,12) S $P(IBXDATA(IBLN),U,12)=$S($P(IBXDATA(IBLN),U,12)#1:+$J($P(IBXDATA(IBLN),U,12),0,3),1:$P(IBXDATA(IBLN),U,12))
"RTN","IBCEF22",130,0)
 . ;
"RTN","IBCEF22",131,0)
 . ; Extract line lev COB data for sec or tert bill
"RTN","IBCEF22",132,0)
 . I $$COBN^IBCEF(IBIFN)>1 D COBLINE^IBCEU6(IBIFN,IBLN,.IBXDATA,,.IBXTRA) I $D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,1) ;Handle bundled/unbundled
"RTN","IBCEF22",133,0)
 ;
"RTN","IBCEF22",134,0)
 I $D(^IBA(362.4,"AIFN"_IBIFN))!$D(^IBA(362.5,"AIFN"_IBIFN)) D
"RTN","IBCEF22",135,0)
 . N IBARRAY,IBX,IBZ,IBRX,IBLCNT
"RTN","IBCEF22",136,0)
 . S IBLCNT=0
"RTN","IBCEF22",137,0)
 . ; Print prescriptions, prosthetics on front of UB-04
"RTN","IBCEF22",138,0)
 . D SET^IBCSC5A(IBIFN,.IBARRAY)
"RTN","IBCEF22",139,0)
 . I $P(IBARRAY,U,2) D
"RTN","IBCEF22",140,0)
 .. S IBX=+$P(IBARRAY,U,2)+2
"RTN","IBCEF22",141,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=""
"RTN","IBCEF22",142,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)="PRESCRIPTION REFILLS:",IBLCNT=2
"RTN","IBCEF22",143,0)
 .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  S IBRX=IBARRAY(IBX,IBY) D
"RTN","IBCEF22",144,0)
 ... D ZERO^IBRXUTL(+$P(IBRX,U,2))
"RTN","IBCEF22",145,0)
 ... S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=IBX_$J(" ",(11-$L(IBX)))_" "_$J($S($P(IBRX,U,6):"$"_$FN($P(IBRX,U,6),",",2),1:""),10)_"  "_$J($$FMTE^XLFDT(IBY,2),8)_"  "_$G(^TMP($J,"IBDRUG",+$P(IBRX,U,2),.01))
"RTN","IBCEF22",146,0)
 ... S IBZ=$S(+$P(IBRX,U,4):"QTY: "_$P(IBRX,U,4)_" ",1:"")_$S(+$P(IBRX,U,3):"for "_$P(IBRX,U,3)_" days supply ",1:"") I IBZ'="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35)_IBZ
"RTN","IBCEF22",147,0)
 ... S IBZ=$S($P(IBRX,U,5)'="":"NDC #: "_$P(IBRX,U,5),1:"") I IBZ'="" S IBLCNT=IBLCNT+1,IBXSAVE("RX-UB-04",IBLCNT)=$J(" ",35)_IBZ
"RTN","IBCEF22",148,0)
 ... K ^TMP($J,"IBDRUG")
"RTN","IBCEF22",149,0)
 ... Q
"RTN","IBCEF22",150,0)
 . ;
"RTN","IBCEF22",151,0)
 . D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF22",152,0)
 . I $P(IBARRAY,U,2) D
"RTN","IBCEF22",153,0)
 .. S IBLCNT=0
"RTN","IBCEF22",154,0)
 .. S IBX=+$P(IBARRAY,U,2)+2
"RTN","IBCEF22",155,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=""
"RTN","IBCEF22",156,0)
 .. S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)="PROSTHETIC REFILLS:",IBLCNT=2
"RTN","IBCEF22",157,0)
 .. S IBX=0 F  S IBX=$O(IBARRAY(IBX)) Q:IBX=""  S IBY=0 F  S IBY=$O(IBARRAY(IBX,IBY)) Q:'IBY  D
"RTN","IBCEF22",158,0)
 ... S IBLCNT=IBLCNT+1,IBXSAVE("PROS-UB-04",IBLCNT)=$$FMTE^XLFDT(IBX,2)_" "_$J($S($P(IBARRAY(IBX,IBY),U,2):"$"_$FN($P(IBARRAY(IBX,IBY),U,2),",",2),1:""),10)_"  "_$E($$PINB^IBCSC5B(+IBARRAY(IBX,IBY)),1,54)
"RTN","IBCEF22",159,0)
 Q
"RTN","IBCEF22",160,0)
 ;
"RTN","IBCEF22",161,0)
ACCRV(X) ; Returns 1 if X is an accomodation RC, 0 if not
"RTN","IBCEF22",162,0)
 Q ((X'<100&(X'>219))!(X=224))
"RTN","IBCEF22",163,0)
 ;
"RTN","IBCEF22",164,0)
RC2CP(IBIFN,IBRCIEN) ; returns "CP" multiple pointer that corresponds to a given "RC" multiple pointer in file 399
"RTN","IBCEF22",165,0)
 ; IBIFN - ien in file 399, top level
"RTN","IBCEF22",166,0)
 ; IBRCIEN, ien in sub-file 399.042 (REVENUE CODE)
"RTN","IBCEF22",167,0)
 ;
"RTN","IBCEF22",168,0)
 ; returns pointer to sub-file 399.0304 (PROCEDURES) or 0 if no valid pointer can be found.
"RTN","IBCEF22",169,0)
 ;
"RTN","IBCEF22",170,0)
 N IBRC0,IBCPIEN
"RTN","IBCEF22",171,0)
 I +IBIFN'>0 Q 0
"RTN","IBCEF22",172,0)
 I +IBRCIEN'>0 Q 0
"RTN","IBCEF22",173,0)
 S IBRC0=$G(^DGCR(399,IBIFN,"RC",IBRCIEN,0)),IBCPIEN=0
"RTN","IBCEF22",174,0)
 I $P(IBRC0,U,10)=4 S IBCPIEN=+$P(IBRC0,U,11) ; type = CPT
"RTN","IBCEF22",175,0)
 I $P(IBRC0,U,10)=3 S IBCPIEN=+$P(IBRC0,U,15) ; type = RX
"RTN","IBCEF22",176,0)
 I 'IBCPIEN D
"RTN","IBCEF22",177,0)
 . S IBRC=$P(IBRC0,U,6)
"RTN","IBCEF22",178,0)
 . N IBCPTIEN S IBCPTIEN=IBRC
"RTN","IBCEF22",179,0)
 . F  S IBCPTIEN=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN)) Q:(+IBCPTIEN'=IBRC)!IBCPIEN  D
"RTN","IBCEF22",180,0)
 .. N OK,Z S OK="",Z=""
"RTN","IBCEF22",181,0)
 .. S Z=$O(^DGCR(399,IBIFN,"CP","B",IBCPTIEN,Z)) Q:'Z!OK  D
"RTN","IBCEF22",182,0)
 ... N CNTR S CNTR=0
"RTN","IBCEF22",183,0)
 ... F  S CNTR=$O(IBXDATA(CNTR)) Q:'CNTR!'OK  D
"RTN","IBCEF22",184,0)
 .... I $G(IBXDATA(CNTR,"CPLNK"))=Z S OK=0 Q
"RTN","IBCEF22",185,0)
 ... I OK="" S OK=1,IBCPIEN=Z
"RTN","IBCEF22",186,0)
 I IBCPIEN,'$D(^DGCR(399,IBIFN,"CP",IBCPIEN)) S IBCPIEN=0
"RTN","IBCEF22",187,0)
 Q IBCPIEN
"RTN","IBCEF22",188,0)
 ;
"RTN","IBCEF22",189,0)
SPLIT    ; Split codes into multiple lines as needed => baa ; 488
"RTN","IBCEF22",190,0)
 ; The max line $ amount for a printed claim is less than the max line $ amount for an electronically transmitted claim.
"RTN","IBCEF22",191,0)
 ; However, since the clearinghouse can drop to print for a myriad of reasons at any time, the lines may need to be split
"RTN","IBCEF22",192,0)
 ; so they can all fit on a printed claim line just in case. In addition, since some claims are sent to primary payers as 
"RTN","IBCEF22",193,0)
 ; electronic claims but printed for secondary claims, the lines numbers need to be the same going out to ensure the 
"RTN","IBCEF22",194,0)
 ; COB data is correct applied (previous payments adj, etc are applied to the correct line.)
"RTN","IBCEF22",195,0)
 N IBS,IBSS,DATA,CHRG,UNTS,TOT,LNS,MOD,CPT,LNK,RLNK,IBSS1,LTOT,LUNT,REC,LST,FST
"RTN","IBCEF22",196,0)
 S IBS="",IBLN=0
"RTN","IBCEF22",197,0)
 F  S IBS=$O(IBX1(IBS)) Q:IBS=""  D
"RTN","IBCEF22",198,0)
 . S LST=$O(IBX1(IBS,""),-1)  ;we have to go through each level so must reset for each
"RTN","IBCEF22",199,0)
 . S LNK=0
"RTN","IBCEF22",200,0)
 . F  S LNK=$O(IBX1(IBS,LNK)) Q:('LNK!(LNK>LST))  S IBSS="" F  S IBSS=$O(IBX1(IBS,LNK,IBSS)) Q:IBSS=""  D
"RTN","IBCEF22",201,0)
 .. S DATA=IBX1(IBS,LNK,IBSS,2)
"RTN","IBCEF22",202,0)
 .. S CHRG=$P(DATA,U,2)
"RTN","IBCEF22",203,0)
 .. S UNTS=$P(DATA,U,3)
"RTN","IBCEF22",204,0)
 .. I UNTS=1 Q  ; if only one unit can't split
"RTN","IBCEF22",205,0)
 .. S TOT=UNTS*CHRG
"RTN","IBCEF22",206,0)
 .. I TOT<=9999999.99 Q  ; if the total is less tham max we don't need to split
"RTN","IBCEF22",207,0)
 .. S LNS=TOT\9999999.99
"RTN","IBCEF22",208,0)
 .. S MOD=TOT#9999999.99
"RTN","IBCEF22",209,0)
 .. I MOD S LNS=LNS+1
"RTN","IBCEF22",210,0)
 .. I CHRG>4999999.995 S LNS=UNTS  ; if the charge is greater than half the mas can't put more than one on a line.
"RTN","IBCEF22",211,0)
 .. S LUNT=UNTS\LNS
"RTN","IBCEF22",212,0)
 .. S MOD=UNTS#LNS
"RTN","IBCEF22",213,0)
 .. I MOD S LUNT=LUNT+1
"RTN","IBCEF22",214,0)
 .. F L=1:1:LNS D
"RTN","IBCEF22",215,0)
 ... N Q
"RTN","IBCEF22",216,0)
 ... S Q=$O(IBX1(IBS,""),-1)+1
"RTN","IBCEF22",217,0)
 ... I L=1 S Q=LNK
"RTN","IBCEF22",218,0)
 ... M IBX1(IBS,Q,IBSS)=IBX1(IBS,LNK,IBSS)
"RTN","IBCEF22",219,0)
 ... S $P(IBX1(IBS,Q,IBSS,2),U,3)=LUNT,$P(IBX1(IBS,Q,IBSS,2),U,4)=LUNT*CHRG
"RTN","IBCEF22",220,0)
 ... S $P(IBX1(IBS,Q,IBSS),U,1)=LUNT,$P(IBX1(IBS,Q,IBSS),U,2)=LUNT*CHRG
"RTN","IBCEF22",221,0)
 ... I L>1 S $P(IBX1(IBS,Q,IBSS,2),U,9)=""
"RTN","IBCEF22",222,0)
 ... S UNTS=UNTS-LUNT,LUNT=$S(UNTS>LUNT:LUNT,1:UNTS)
"RTN","IBCEF22",223,0)
 Q
"RTN","IBCEF77")
0^8^B27726430^B27920356
"RTN","IBCEF77",1,0)
IBCEF77 ;WOIFO/SS - FORMATTER/EXTRACT BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF77",2,0)
 ;;2.0;INTEGRATED BILLING;**232,280,155,290,291,320,348,349,516,577**;21-MAR-94;Build 38
"RTN","IBCEF77",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF77",4,0)
 ;
"RTN","IBCEF77",5,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC,IBSEQ,IBLIMIT) ;
"RTN","IBCEF77",6,0)
 N IBXIEN,IBXDATA,IBNET,IBTRI,IB1,IB2,IBID,Z,IBZ,IBZ1,IBSVP
"RTN","IBCEF77",7,0)
 S (IB1,IB2,IBZ,IBZ1,IBTRI)=""
"RTN","IBCEF77",8,0)
 D F^IBCEF("N-ALL ATT/RENDERING PROV SSN","IBZ",,IB399)
"RTN","IBCEF77",9,0)
 S IBZ1=$$ALLPTYP^IBCEF3(IB399)
"RTN","IBCEF77",10,0)
 F Z=1:1:3 S $P(IBZ1,U,Z)=$S($P(IBZ1,U,Z)="CH":1,1:"") S:$P(IBZ1,U,Z) IBTRI=1
"RTN","IBCEF77",11,0)
 S IBNET=$$NETID^IBCEP() ; netwrk id type
"RTN","IBCEF77",12,0)
 I $G(IBN) D
"RTN","IBCEF77",13,0)
 . S Z=0 F  S Z=$O(IBDST(IBPRNUM,IBPRTYP,Z)) Q:'Z  S IBID(+$P(IBDST(IBPRNUM,IBPRTYP,Z),U,9))=""
"RTN","IBCEF77",14,0)
 F  S IB1=$O(IBSRC(IB1)) Q:IB1=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF77",15,0)
 . N OK,IBSTLIC
"RTN","IBCEF77",16,0)
 . S IBSTLIC=""
"RTN","IBCEF77",17,0)
 . F  S IB2=$O(IBSRC(IB1,IB2)) Q:IB2=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF77",18,0)
 . . S IBSVP=$P(IBSRC(IB1,IB2),U)
"RTN","IBCEF77",19,0)
 . . ; If ID overridden, output no others of this type
"RTN","IBCEF77",20,0)
 . . I $G(IBEXC),$P($G(IBSRC(IB1,IB2)),U,9)=IBEXC Q
"RTN","IBCEF77",21,0)
 . . ; Ck state of care/lic match if st lic#
"RTN","IBCEF77",22,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="0B" S OK=1 D  Q:'OK
"RTN","IBCEF77",23,0)
 . . . I +$$CAREST^IBCEP2A(IB399)'=$P(IBSRC(IB1,IB2),U,7) S IBSTLIC=1 Q
"RTN","IBCEF77",24,0)
 . . . I $G(IBSTLIC(0))'="" S OK=0 Q
"RTN","IBCEF77",25,0)
 . . . S IBSTLIC(0)=$G(IBSRC(IB1,IB2)),OK=0
"RTN","IBCEF77",26,0)
 . . ; Exclude SSN from sec ids unless required
"RTN","IBCEF77",27,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="SY" Q
"RTN","IBCEF77",28,0)
 . . ; Only 1 of each prov id type
"RTN","IBCEF77",29,0)
 . . Q:$D(IBID(+$P($G(IBSRC(IB1,IB2)),U,9)))
"RTN","IBCEF77",30,0)
 . . S IBN=IBN+1,IBID(+$P($G(IBSRC(IB1,IB2)),U,9))=""
"RTN","IBCEF77",31,0)
 . . S IBDST(IBPRNUM,IBPRTYP,IBN)=$G(IBSRC(IB1,IB2))
"RTN","IBCEF77",32,0)
 . I IBN'=IBLIMIT,'$G(IBSTLIC),$G(IBSTLIC(0))'="" S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=IBSTLIC(0)
"RTN","IBCEF77",33,0)
 I $$FT^IBCEF(IB399)=2,$G(IBID(IBNET))="",IBTRI,$P(IBZ1,U,IBSEQ) D    ; WCJ 02/13/2006
"RTN","IBCEF77",34,0)
 . Q:$P(IBZ,U,IBPRTYP)=""
"RTN","IBCEF77",35,0)
 . ; here, no network id & TRICARE ins co.
"RTN","IBCEF77",36,0)
 . N Z
"RTN","IBCEF77",37,0)
 . S Z=+$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0)),Z=$P($G(^DGCR(399,IB399,"PRV",Z,0)),U,2)
"RTN","IBCEF77",38,0)
 . S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=Z_U_+$$POLICY^IBCEF(IB399,1,IBSEQ)_U_$P($G(^IBE(355.97,IBNET,0)),U,3)_U_$P(IBZ,U,IBPRTYP)_U_"0^0^^^"_IBNET
"RTN","IBCEF77",39,0)
 Q
"RTN","IBCEF77",40,0)
 ;
"RTN","IBCEF77",41,0)
 ; esg - 8/25/06 - IB*2*348 - CFIDS function
"RTN","IBCEF77",42,0)
 ;
"RTN","IBCEF77",43,0)
CFIDS(IBIFN,PRVTYP,ALLOWIDS) ; Claim Form IDs for human providers
"RTN","IBCEF77",44,0)
 ; Function returns a 3 piece string:  [1] default secondary ID qual
"RTN","IBCEF77",45,0)
 ;                                     [2] default secondary ID
"RTN","IBCEF77",46,0)
 ;                                     [3] NPI
"RTN","IBCEF77",47,0)
 ; Input:   IBIFN - internal claim#
"RTN","IBCEF77",48,0)
 ;         PRVTYP - internal provider type ID number
"RTN","IBCEF77",49,0)
 ;                - 1:REFER;2:OPER;3:REND;4:ATT;5:SUPER;9:OTHER
"RTN","IBCEF77",50,0)
 ;                - if blank, then default Att/Rend based on form type
"RTN","IBCEF77",51,0)
 ;         ALLOWIDS - List of allowable Secondary IDS ^ delimited. 
"RTN","IBCEF77",52,0)
 ;                  ex "^1A^1B^1C^1H^G2^LU^N5^"
"RTN","IBCEF77",53,0)
 ;                  UB-04 only wants IDs provided by the payer, not the providers own IDS
"RTN","IBCEF77",54,0)
 ;                  Also, they want the qualifier to be G2 (Commercial)
"RTN","IBCEF77",55,0)
 ;                  if it is a payer provided ID
"RTN","IBCEF77",56,0)
 NEW ID,FT,IBZ,IBQ,IBSID,IBNPI,I,OK
"RTN","IBCEF77",57,0)
 S ID=""
"RTN","IBCEF77",58,0)
 I '$G(IBIFN) G CFIDSX
"RTN","IBCEF77",59,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCEF77",60,0)
 I '$G(PRVTYP) S PRVTYP=3 I FT=3 S PRVTYP=4
"RTN","IBCEF77",61,0)
 D ALLIDS^IBCEF75(IBIFN,.IBZ,1)
"RTN","IBCEF77",62,0)
 S OK=0 I $G(ALLOWIDS)="" S OK=1
"RTN","IBCEF77",63,0)
 F I=1:1 D  Q:OK
"RTN","IBCEF77",64,0)
 . S IBQ=$P($G(IBZ("PROVINF",IBIFN,"C",1,PRVTYP,I)),U,3)    ; qualifier
"RTN","IBCEF77",65,0)
 . S IBSID=$P($G(IBZ("PROVINF",IBIFN,"C",1,PRVTYP,I)),U,4)  ; ID#
"RTN","IBCEF77",66,0)
 . I IBQ="",IBSID="" S OK=1 Q
"RTN","IBCEF77",67,0)
 . Q:OK
"RTN","IBCEF77",68,0)
 . I $G(ALLOWIDS)[(U_IBQ_U) S OK=1,IBQ="G2" Q
"RTN","IBCEF77",69,0)
 . S (IBQ,IBSID)=""
"RTN","IBCEF77",70,0)
 S IBNPI=""
"RTN","IBCEF77",71,0)
 D F^IBCEF("N-PROVIDER NPI CODES","IBNPI",,IBIFN)
"RTN","IBCEF77",72,0)
 S IBNPI=$P(IBNPI,U,PRVTYP)                               ; NPI
"RTN","IBCEF77",73,0)
 ;
"RTN","IBCEF77",74,0)
 ; special check for the referring doc
"RTN","IBCEF77",75,0)
 I PRVTYP=1,$D(IBZ("PROVINF",IBIFN,"C",1,PRVTYP)),IBQ="",IBSID="" S IBQ="1G",IBSID="VAD000"
"RTN","IBCEF77",76,0)
 ;
"RTN","IBCEF77",77,0)
 ; If UB-04 and no IDs, use VA UPIN as deafult
"RTN","IBCEF77",78,0)
 I $D(IBZ("PROVINF",IBIFN,"C",1,PRVTYP)),FT=3,IBQ="",IBSID="" S IBQ="1G",IBSID="VAD000"
"RTN","IBCEF77",79,0)
 ;
"RTN","IBCEF77",80,0)
 ; determine if legacy ID's should be displayed
"RTN","IBCEF77",81,0)
 I '$$PRTLID(IBIFN,IBNPI) S (IBQ,IBSID)=""
"RTN","IBCEF77",82,0)
 ;
"RTN","IBCEF77",83,0)
 S ID=IBQ_U_IBSID_U_IBNPI
"RTN","IBCEF77",84,0)
CFIDSX ;
"RTN","IBCEF77",85,0)
 Q ID
"RTN","IBCEF77",86,0)
 ;
"RTN","IBCEF77",87,0)
DOL(AMT,LEN,DEC) ; format dollar amounts for printed claim forms
"RTN","IBCEF77",88,0)
 ; AMT = amount to be formatted
"RTN","IBCEF77",89,0)
 ; LEN = length of field - right justified to this length
"RTN","IBCEF77",90,0)
 ; DEC = flag to include the decimal point or not
"RTN","IBCEF77",91,0)
 ;       DEFAULT value is to not include the decimal point
"RTN","IBCEF77",92,0)
 ;       if DEC is not defined or 0, assume no decimal point
"RTN","IBCEF77",93,0)
 ;       so 15 will be returned as 1500, 6.77 will be returned as 677
"RTN","IBCEF77",94,0)
 ;       if DEC is 1, then the decimal point will be included
"RTN","IBCEF77",95,0)
 ;
"RTN","IBCEF77",96,0)
 S LEN=$G(LEN,10),DEC=$G(DEC,0)     ; defaults
"RTN","IBCEF77",97,0)
 S AMT=$FN(+$G(AMT),"",2)           ; format # with 2 decimals
"RTN","IBCEF77",98,0)
 I 'DEC S AMT=$TR(AMT,".")          ; strip or leave decimal
"RTN","IBCEF77",99,0)
 S AMT=$J(AMT,LEN)                  ; right justify
"RTN","IBCEF77",100,0)
 Q AMT
"RTN","IBCEF77",101,0)
 ;
"RTN","IBCEF77",102,0)
PRTLID(IBIFN,NPI) ; YMG; Print Legacy IDs on the CMS-1500 or UB-04 form
"RTN","IBCEF77",103,0)
 ; Function fetches form type associated with given claim number
"RTN","IBCEF77",104,0)
 ; (values: 2 - CMS-1500 form, 3 - UB-04 form), then looks at
"RTN","IBCEF77",105,0)
 ; "Print Legacy ID" site parameter for this particular form type.
"RTN","IBCEF77",106,0)
 ; 
"RTN","IBCEF77",107,0)
 ; Possible site parameter values are:
"RTN","IBCEF77",108,0)
 ;   "Y" - always print Legacy ID
"RTN","IBCEF77",109,0)
 ;   "N" - never print Legacy ID
"RTN","IBCEF77",110,0)
 ;   "C" - only print Legacy ID if NPI is not available.
"RTN","IBCEF77",111,0)
 ;   
"RTN","IBCEF77",112,0)
 ; This information is used to determine if Legacy ID should be printed
"RTN","IBCEF77",113,0)
 ; for claim number in question.
"RTN","IBCEF77",114,0)
 ; 
"RTN","IBCEF77",115,0)
 ; Note: Situation when "Print Legacy ID" site parameter is not set is treated
"RTN","IBCEF77",116,0)
 ;       as if this parameter was set to "Y" - always print Legacy ID.
"RTN","IBCEF77",117,0)
 ; 
"RTN","IBCEF77",118,0)
 ; Input:
"RTN","IBCEF77",119,0)
 ;             IBIFN - internal claim number
"RTN","IBCEF77",120,0)
 ;       NPI   - NPI number (or "" if no NPI is available)
"RTN","IBCEF77",121,0)
 ; 
"RTN","IBCEF77",122,0)
 ; Returns:
"RTN","IBCEF77",123,0)
 ;       0  - Legacy ID should not be printed
"RTN","IBCEF77",124,0)
 ;       1  - Legacy ID should be printed
"RTN","IBCEF77",125,0)
 ;
"RTN","IBCEF77",126,0)
 Q $S(NPI="":"YC",1:"Y")[$P($G(^IBE(350.9,1,1)),U,$S($$FT^IBCEF(IBIFN)=2:32,1:33))
"RTN","IBCEF77",127,0)
 ;
"RTN","IBCEF77",128,0)
REMARK(IBIFN,IBXDATA,OFLG) ; procedure to return array of UB-04 remark text
"RTN","IBCEF77",129,0)
 ; for claim IBIFN.  Data pulled from field# 402 of file 399 and
"RTN","IBCEF77",130,0)
 ; formatted into an array IBXDATA(n) where each line is not greater
"RTN","IBCEF77",131,0)
 ; than 24 characters long.  This will fit into UB-04 FL-80.
"RTN","IBCEF77",132,0)
 ;
"RTN","IBCEF77",133,0)
 ; OFLG=1 only when called in the output formatter.  In this case, only
"RTN","IBCEF77",134,0)
 ; 4 lines in IBXDATA will be returned.
"RTN","IBCEF77",135,0)
 ;
"RTN","IBCEF77",136,0)
 NEW TEXT,LEN,IBZ,J,PCE,CHS,NEWCHS,IBK,J,TX,IBCP1
"RTN","IBCEF77",137,0)
 K IBXDATA
"RTN","IBCEF77",138,0)
 ;
"RTN","IBCEF77",139,0)
 ; MRD;IB*2.0*516 - Pull the Bill Remarks for the claim.  If this was
"RTN","IBCEF77",140,0)
 ; called from the Output Formatter, then look at lines of claim for
"RTN","IBCEF77",141,0)
 ; NDC's.  If any are found, they should be added to the end of TEXT.
"RTN","IBCEF77",142,0)
 ;
"RTN","IBCEF77",143,0)
 S TEXT=$P($G(^DGCR(399,+$G(IBIFN),"UF2")),U,3)
"RTN","IBCEF77",144,0)
 ; VAD/ Begin of IB*2*577 changes
"RTN","IBCEF77",145,0)
 ; NDC, Quantity, and Unit of Measure now printed in FL-43
"RTN","IBCEF77",146,0)
 ; instead of here in FL-80
"RTN","IBCEF77",147,0)
 ;I $G(OFLG) D
"RTN","IBCEF77",148,0)
 ;. S J=0
"RTN","IBCEF77",149,0)
 ;. F  S J=$O(^DGCR(399,+$G(IBIFN),"CP",J)) Q:'J  S IBCP1=$G(^(J,1)) I $P(IBCP1,U,7)'="" D
"RTN","IBCEF77",150,0)
 ;. . I TEXT'="" S TEXT=TEXT_" "
"RTN","IBCEF77",151,0)
 ;. . S TEXT=TEXT_"N4"_$TR($P(IBCP1,U,7),"-")_" UN"_$P(IBCP1,U,8)
"RTN","IBCEF77",152,0)
 ;. . Q
"RTN","IBCEF77",153,0)
 ;. Q
"RTN","IBCEF77",154,0)
 ; VAD/ End of IB*2*577 changes
"RTN","IBCEF77",155,0)
 ;
"RTN","IBCEF77",156,0)
 ; If there's nothing in TEXT, then Quit.
"RTN","IBCEF77",157,0)
 ;
"RTN","IBCEF77",158,0)
 I TEXT="" Q
"RTN","IBCEF77",159,0)
 ;
"RTN","IBCEF77",160,0)
 ; need to break up large words for word wrapping purposes to get
"RTN","IBCEF77",161,0)
 ; as many characters as possible in the box.
"RTN","IBCEF77",162,0)
 S LEN=17
"RTN","IBCEF77",163,0)
 F PCE=1:1 Q:PCE>$L(TEXT," ")  S CHS=$P(TEXT," ",PCE) I $L(CHS)>LEN D
"RTN","IBCEF77",164,0)
 . S NEWCHS=$E(CHS,1,LEN)_" "_$E(CHS,LEN+1,999)
"RTN","IBCEF77",165,0)
 . S $P(TEXT," ",PCE)=NEWCHS
"RTN","IBCEF77",166,0)
 . Q
"RTN","IBCEF77",167,0)
 ;
"RTN","IBCEF77",168,0)
 ; When calling FSTRNG^IBJU1 which calls ^DIWP, FileMan builds the
"RTN","IBCEF77",169,0)
 ; array with strings of max length=1 less than what you tell it.
"RTN","IBCEF77",170,0)
 ;
"RTN","IBCEF77",171,0)
 S LEN=20                             ; line 1 is 19 chars
"RTN","IBCEF77",172,0)
 D FSTRNG^IBJU1(TEXT,LEN,.IBZ)        ; build IBZ array
"RTN","IBCEF77",173,0)
 S IBK=$$TRIM^XLFSTR($G(IBZ(1)))      ; save off the first line
"RTN","IBCEF77",174,0)
 S TEXT=$P(TEXT,IBK,2,99)             ; restore the rest of the text
"RTN","IBCEF77",175,0)
 S TEXT=$$TRIM^XLFSTR(TEXT)           ; trim spaces
"RTN","IBCEF77",176,0)
 ;
"RTN","IBCEF77",177,0)
 S LEN=25                             ; the rest is 24 chars
"RTN","IBCEF77",178,0)
 D FSTRNG^IBJU1(TEXT,LEN,.IBZ)        ; build IBZ array
"RTN","IBCEF77",179,0)
 S IBXDATA(1)="     "_IBK             ; line 1
"RTN","IBCEF77",180,0)
 S J=0 F  S J=$O(IBZ(J)) Q:'J  D      ; lines 2-n
"RTN","IBCEF77",181,0)
 . I J>3,$G(OFLG) Q                   ; only 4 lines for output formatter
"RTN","IBCEF77",182,0)
 . S TX=$$TRIM^XLFSTR($G(IBZ(J)))
"RTN","IBCEF77",183,0)
 . I TX'="" S IBXDATA(J+1)=TX
"RTN","IBCEF77",184,0)
 . Q
"RTN","IBCEF77",185,0)
 Q
"RTN","IBCEF77",186,0)
 ;
"RTN","IBCEF77",187,0)
B43(NDCDATA) ; This is passed a string and properly formats if there is NDC drug information.
"RTN","IBCEF77",188,0)
 ; The drug information is in pieces 21-23 of that string.
"RTN","IBCEF77",189,0)
 ; It was part of the output formatter entry 364.7[1406] used for FL43 but that got too big for a FileMan Mumps data element
"RTN","IBCEF77",190,0)
 ; It returns a string with N4 - the NDC Drug qualifier
"RTN","IBCEF77",191,0)
 ;                        NDC Code without the hyphens
"RTN","IBCEF77",192,0)
 ;                        a space
"RTN","IBCEF77",193,0)
 ;                        Units qualifier
"RTN","IBCEF77",194,0)
 ;                        Units
"RTN","IBCEF77",195,0)
 ; Ex "N412345678901 ML1.5"
"RTN","IBCEF77",196,0)
 I NDCDATA="" Q ""
"RTN","IBCEF77",197,0)
 S NDCDATA=$P(NDCDATA,U,21,23)
"RTN","IBCEF77",198,0)
 Q:$P(NDCDATA,U)="" ""
"RTN","IBCEF77",199,0)
 Q "N4"_$TR($P(NDCDATA,U),"-")_" "_$TR($P(NDCDATA,U,2,3),U)
"RTN","IBCEF77",200,0)
 ;
"RTN","IBCERP7")
0^13^B32855168^n/a
"RTN","IBCERP7",1,0)
IBCERP7 ;AITC/KDM - HID   HCCH Payer ID Report ;5/4/2017
"RTN","IBCERP7",2,0)
 ;;2.0;INTEGRATED BILLING;**577**;21-MAR-94;Build 38
"RTN","IBCERP7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCERP7",4,0)
 ; This report is a PAYER ID report based on the 277stat msg responses from the clearing house
"RTN","IBCERP7",5,0)
 ; This report will give a snap shot view of what is on file at the time of running.
"RTN","IBCERP7",6,0)
 ; The results may vary each running depending on the timing of transactions posted to the file   
"RTN","IBCERP7",7,0)
 ; Refer to US976
"RTN","IBCERP7",8,0)
 ; Called by IB BILLING SUPERVISOR MENU, Opt:SYST, Opt:HID
"RTN","IBCERP7",9,0)
 ;
"RTN","IBCERP7",10,0)
ENT ; Menu Option Entry Point
"RTN","IBCERP7",11,0)
 N BEGDT,BEGIN,DT,END,ENDDT,HDR1,HDR2,HDR3,IBABEG,IBAEND,IBEOB,IBIFN,IBQUIT,LNTOT,MAX,PAGES,PGC,RNAME,U,Y
"RTN","IBCERP7",12,0)
 N CNT,DASH,EORMSG,NONEMSG,POP
"RTN","IBCERP7",13,0)
 S IBQUIT=0,RNAME="IBCERP7"
"RTN","IBCERP7",14,0)
 D DATES Q:IBQUIT  Q:'Y
"RTN","IBCERP7",15,0)
 D DEVICE Q:POP  Q:IBQUIT
"RTN","IBCERP7",16,0)
QUE ; Queued Entry Point
"RTN","IBCERP7",17,0)
 K ^TMP(RNAME,$J)
"RTN","IBCERP7",18,0)
 D GATHER
"RTN","IBCERP7",19,0)
 D HDRINIT
"RTN","IBCERP7",20,0)
 D HEADER Q:IBQUIT
"RTN","IBCERP7",21,0)
 D PRINT
"RTN","IBCERP7",22,0)
 D EXIT
"RTN","IBCERP7",23,0)
 Q
"RTN","IBCERP7",24,0)
DATES ;  Enter the from and to dates for this report
"RTN","IBCERP7",25,0)
 ;
"RTN","IBCERP7",26,0)
 N DIR
"RTN","IBCERP7",27,0)
 W ! S DIR(0)="DA^:DT:EX",DIR("A")="Enter Earliest Date: ",DIR("B")=$$HTE^XLFDT($H-30),DIR("?")="Enter the earliest transaction date for the transaction report."
"RTN","IBCERP7",28,0)
 D ^DIR K DIR Q:'Y  S IBABEG=+Y,BEGIN=Y(0),BEGDT=$$FMTE^XLFDT(IBABEG,2)
"RTN","IBCERP7",29,0)
 ;
"RTN","IBCERP7",30,0)
 W ! S DIR(0)="DA^"_+Y_":DT:EX",DIR("A")="Enter Latest Date: ",DIR("B")=$$FMTE^XLFDT(DT,1)
"RTN","IBCERP7",31,0)
 ; DIR("?")="Enter the latest date for the transaction report."
"RTN","IBCERP7",32,0)
 D ^DIR K DIR Q:'Y  S IBAEND=+Y,END=Y(0),ENDDT=$$FMTE^XLFDT(IBAEND,2)
"RTN","IBCERP7",33,0)
 ;
"RTN","IBCERP7",34,0)
 Q
"RTN","IBCERP7",35,0)
 ;
"RTN","IBCERP7",36,0)
DEVICE ; - Ask device
"RTN","IBCERP7",37,0)
 ;
"RTN","IBCERP7",38,0)
 N %ZIS,ZTDESC,ZTIO,ZTQUEUED,ZTRTN,ZTSAVE
"RTN","IBCERP7",39,0)
 W !!!,"You will need a 132 column printer for this report",!
"RTN","IBCERP7",40,0)
 S %ZIS="QM" D ^%ZIS S:POP IBQUIT=1 Q:POP
"RTN","IBCERP7",41,0)
 I $D(IO("Q")) D  S IBQUIT=1 Q
"RTN","IBCERP7",42,0)
 . S ZTRTN="QUE^IBCERP7",ZTDESC="HCCH Payer ID Report"
"RTN","IBCERP7",43,0)
 . S ZTSAVE("BEGIN")=""
"RTN","IBCERP7",44,0)
 . S ZTSAVE("END")=""
"RTN","IBCERP7",45,0)
 . S ZTSAVE("IBABEG")=""
"RTN","IBCERP7",46,0)
 . S ZTSAVE("IBAEND")=""
"RTN","IBCERP7",47,0)
 . S ZTSAVE("BEGDT")=""
"RTN","IBCERP7",48,0)
 . S ZTSAVE("ENDDT")=""
"RTN","IBCERP7",49,0)
 . S ZTSAVE("RNAME")=""
"RTN","IBCERP7",50,0)
 . S ZTSAVE("IBQUIT")=""
"RTN","IBCERP7",51,0)
 . D ^%ZTLOAD
"RTN","IBCERP7",52,0)
 . W !!,$S($D(ZTSK):"Your task number "_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCERP7",53,0)
 . K ZTSK D HOME^%ZIS
"RTN","IBCERP7",54,0)
 . W !!! I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR    ;pause to see task no.
"RTN","IBCERP7",55,0)
 U IO
"RTN","IBCERP7",56,0)
 Q
"RTN","IBCERP7",57,0)
 ;
"RTN","IBCERP7",58,0)
GATHER ;GO GET THE INFO BASED ON THE DATES ENTERED
"RTN","IBCERP7",59,0)
 ; uses ^DIC(36,"AEDIX",DATE,INSURANCE IEN,) to get data within date range.  
"RTN","IBCERP7",60,0)
 ; If data is within date range sets up ^TMP($J file with all data needed for the report.
"RTN","IBCERP7",61,0)
 ; ^DIC(36,"AEDIX",DATE,INSURANCE IEN ,EDI ID NUMBER,TYPE "P" OR "I")=EDI ID NUMBER ON FILE ;
"RTN","IBCERP7",62,0)
 ;
"RTN","IBCERP7",63,0)
 ;(If  EDI NUMBER ON FILE is null- it is considered  updated, not attempted)
"RTN","IBCERP7",64,0)
 ;
"RTN","IBCERP7",65,0)
 ;  Uses the insurance ien from Cross ref to extract the name, address, city, and state from the ^DIC(36,IEN)
"RTN","IBCERP7",66,0)
 ;  Uses the Type from cross ref as the EDI PayerID for the report. For printing the I="Inst";P="Prof"
"RTN","IBCERP7",67,0)
 ;  Uses the EDI ID NUMBER from Cross ref to be the NewValue on report.
"RTN","IBCERP7",68,0)
 ;  Uses the EDI ID NUMBER ON FILE from cross ref to be the OldValue on report
"RTN","IBCERP7",69,0)
 ;  If the EDI ID NUMBER ON FILE from cross ref is null- set the "updated" value for report to be "Yes", otherwise "No"
"RTN","IBCERP7",70,0)
 ;
"RTN","IBCERP7",71,0)
 ;
"RTN","IBCERP7",72,0)
 N DATE,EDIONFILE,EDINO,IBADDRESS,IBCITY,IBNAME,IBSTATE,IBPIEN,LNCNT,TYPE
"RTN","IBCERP7",73,0)
 S $P(DASH,"_",132)=""
"RTN","IBCERP7",74,0)
 S U="^",LNTOT=0,PGC=1,MAX=IOSL
"RTN","IBCERP7",75,0)
 S DATE=IBABEG-1
"RTN","IBCERP7",76,0)
 F  S DATE=$O(^DIC(36,"AEDIX",DATE)) Q:DATE=""  Q:DATE>IBAEND  D
"RTN","IBCERP7",77,0)
 . S IBPIEN="" F  S IBPIEN=$O(^DIC(36,"AEDIX",DATE,IBPIEN)) Q:IBPIEN=""  D
"RTN","IBCERP7",78,0)
 .. S EDINO="" F  S EDINO=$O(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO)) Q:EDINO=""  D
"RTN","IBCERP7",79,0)
 ... S TYPE="" F  S TYPE=$O(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO,TYPE)) Q:TYPE=""  D
"RTN","IBCERP7",80,0)
 .... S EDIONFILE=$G(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO,TYPE))
"RTN","IBCERP7",81,0)
 .... S IBNAME=$$GET1^DIQ(36,IBPIEN,.01)
"RTN","IBCERP7",82,0)
 .... S IBADDRESS=$$GET1^DIQ(36,IBPIEN,.111)
"RTN","IBCERP7",83,0)
 .... S IBCITY=$$GET1^DIQ(36,IBPIEN,.114)
"RTN","IBCERP7",84,0)
 .... S IBSTATE=$$GET1^DIQ(36,IBPIEN,.115,"I")
"RTN","IBCERP7",85,0)
 .... S ^TMP(RNAME,$J,IBNAME,DATE,EDINO,TYPE)=IBPIEN_U_IBADDRESS_U_IBCITY_U_IBSTATE_U_EDIONFILE
"RTN","IBCERP7",86,0)
 .... S LNTOT=LNTOT+1
"RTN","IBCERP7",87,0)
 Q
"RTN","IBCERP7",88,0)
 ;
"RTN","IBCERP7",89,0)
PRINT ;  Print data
"RTN","IBCERP7",90,0)
 ;  PGC=page ct,LNTOT=no of lines to be printed,LNCNT=when to page break
"RTN","IBCERP7",91,0)
 ;  MAX=IOSL (device length)
"RTN","IBCERP7",92,0)
 ;
"RTN","IBCERP7",93,0)
 N ADDRESS,CITY,DATE,EDINO,EDIONFILE,IEN,NAME,PID,STATE,TYPE,UPDATE
"RTN","IBCERP7",94,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCERP7",95,0)
 S NONEMSG="* * * N O   D A T A   T O   P R I N T * * *"
"RTN","IBCERP7",96,0)
 ;
"RTN","IBCERP7",97,0)
 I '$D(^TMP(RNAME,$J)) W !!!,NONEMSG D END Q
"RTN","IBCERP7",98,0)
 S NAME="" F  S NAME=$O(^TMP(RNAME,$J,NAME)) Q:NAME=""  D
"RTN","IBCERP7",99,0)
 . S DATE="" F  S DATE=$O(^TMP(RNAME,$J,NAME,DATE)) Q:DATE=""  D
"RTN","IBCERP7",100,0)
 .. S EDINO="" F  S EDINO=$O(^TMP(RNAME,$J,NAME,DATE,EDINO)) Q:EDINO=""  D
"RTN","IBCERP7",101,0)
 ... S TYPE="" F  S TYPE=$O(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE)) Q:TYPE=""  Q:IBQUIT  D
"RTN","IBCERP7",102,0)
 .... S PID=$S(TYPE="I":"Inst",1:"Prof")
"RTN","IBCERP7",103,0)
 .... ;S NAME=$P(^TMP(RNAME,$J,DATE,IEN,EDINO,TYPE),U,1)
"RTN","IBCERP7",104,0)
 .... S ADDRESS=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,2)
"RTN","IBCERP7",105,0)
 .... S CITY=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,3)
"RTN","IBCERP7",106,0)
 .... S STATE=$P(^DIC(5,$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,4),0),U,2)
"RTN","IBCERP7",107,0)
 .... S EDIONFILE=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,5)
"RTN","IBCERP7",108,0)
 .... S UPDATE=$S(EDIONFILE="":"Yes",1:"No")
"RTN","IBCERP7",109,0)
 .... I LNCNT>MAX D HEADER Q:IBQUIT
"RTN","IBCERP7",110,0)
 .... W !,$E(NAME,1,30),?33,$E(ADDRESS,1,35)," ",CITY,", ",STATE,?73,$$FMTE^XLFDT(DATE,2),?84,PID,?97,EDIONFILE,?109,EDINO,?121,UPDATE
"RTN","IBCERP7",111,0)
 .... S LNCNT=LNCNT+1
"RTN","IBCERP7",112,0)
 I LNCNT>MAX D HEADER
"RTN","IBCERP7",113,0)
 Q:IBQUIT
"RTN","IBCERP7",114,0)
END W !!!,?49,EORMSG,!!!
"RTN","IBCERP7",115,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR    ;pause at end of report
"RTN","IBCERP7",116,0)
 Q
"RTN","IBCERP7",117,0)
 ;
"RTN","IBCERP7",118,0)
HDRINIT ; Initial setting
"RTN","IBCERP7",119,0)
 ;
"RTN","IBCERP7",120,0)
 S LNCNT=0
"RTN","IBCERP7",121,0)
 I PGC=1,$E(IOST,1,2)["C-" W @IOF  ; refresh terminal screen on 1st hdr
"RTN","IBCERP7",122,0)
 I 'LNTOT S PAGES=1
"RTN","IBCERP7",123,0)
 I LNTOT,PGC=1 D
"RTN","IBCERP7",124,0)
 . S LNCNT=0
"RTN","IBCERP7",125,0)
 . S PAGES=LNTOT/(MAX-10) I PAGES<1 S PAGES=1
"RTN","IBCERP7",126,0)
 . I PAGES["." S PAGES=$P(PAGES+1,".")    ; if more than one page set whole number
"RTN","IBCERP7",127,0)
 S HDR1="Clearinghouse Payer ID Report"
"RTN","IBCERP7",128,0)
 S HDR2=$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCERP7",129,0)
 Q
"RTN","IBCERP7",130,0)
 ;
"RTN","IBCERP7",131,0)
HEADER ; Print Header info
"RTN","IBCERP7",132,0)
 ;
"RTN","IBCERP7",133,0)
 N DIR,DUOUT
"RTN","IBCERP7",134,0)
 S LNCNT=0
"RTN","IBCERP7",135,0)
 I PGC'=1 D  Q:IBQUIT
"RTN","IBCERP7",136,0)
 . W !
"RTN","IBCERP7",137,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR I $D(DUOUT) S IBQUIT=1 Q:IBQUIT
"RTN","IBCERP7",138,0)
 . W @IOF   ; refresh terminal screen on hdr
"RTN","IBCERP7",139,0)
 W !,HDR1,?43,HDR2,?98,"  Page: "_PGC_" of "_PAGES
"RTN","IBCERP7",140,0)
 W !,"Timeframe: "_BEGDT_" thru "_ENDDT
"RTN","IBCERP7",141,0)
 W !!
"RTN","IBCERP7",142,0)
 W !,"Insurance Co",?33,"Address",?73,"Date",?84,"EDI-PayerID",?97,"OldValue",?109,"NewValue",?121,"Updated"
"RTN","IBCERP7",143,0)
 W !,DASH
"RTN","IBCERP7",144,0)
 S LNCNT=LNCNT+10,PGC=PGC+1
"RTN","IBCERP7",145,0)
 Q
"RTN","IBCERP7",146,0)
EXIT() ;clean up and quit
"RTN","IBCERP7",147,0)
 N ZTREQ
"RTN","IBCERP7",148,0)
 ; Force a form feed at end of a printer report
"RTN","IBCERP7",149,0)
 I $E(IOST,1,2)'["C-" W @IOF
"RTN","IBCERP7",150,0)
 ; handle device closing before exiting
"RTN","IBCERP7",151,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCERP7",152,0)
 I '$D(ZTQUEUED) D ^%ZISC
"RTN","IBCERP7",153,0)
 K ^TMP(RNAME,$J)
"RTN","IBCERP7",154,0)
 K BEGIN,BEGDT,ENDDT,IBABEG,IBAEND,IBQUIT,IEN,LNCNT,Y
"RTN","IBCERP7",155,0)
 Q
"RTN","IBCEST")
0^12^B96695131^B76027306
"RTN","IBCEST",1,0)
IBCEST ;ALB/TMP - 837 EDI STATUS MESSAGE PROCESSING ;17-APR-96
"RTN","IBCEST",2,0)
 ;;2.0;INTEGRATED BILLING;**137,189,197,135,283,320,368,397,407,577**;21-MAR-94;Build 38
"RTN","IBCEST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEST",4,0)
 ; IA 4043 for call to AUDITX^PRCAUDT
"RTN","IBCEST",5,0)
 Q
"RTN","IBCEST",6,0)
 ;
"RTN","IBCEST",7,0)
UPD361(IBTDA) ; Update IB BILL STATUS MESSAGES file
"RTN","IBCEST",8,0)
 ; IBTDA = ien of return message in file 364.2
"RTN","IBCEST",9,0)
 ;
"RTN","IBCEST",10,0)
 N IB,IB0,IBSEQ,IB00,IBBILL,IBBTCH,IBMNUM,IBDATE,IBTYP
"RTN","IBCEST",11,0)
 ;
"RTN","IBCEST",12,0)
 I '$$LOCK^IBCEM(IBTDA) G UPDQ ;Lock message in file 364.2
"RTN","IBCEST",13,0)
 ;
"RTN","IBCEST",14,0)
 S IB0=$G(^IBA(364.2,IBTDA,0))
"RTN","IBCEST",15,0)
 S IBMNUM=$P(IB0,U) ; Message number
"RTN","IBCEST",16,0)
 S IB00=$G(^IBA(364,+$P(IB0,U,5),0)) ; Transmit bill entry
"RTN","IBCEST",17,0)
 S IBBILL=+IB00 ; Actual bill ien in file 399
"RTN","IBCEST",18,0)
 S IBBTCH=$P(IB0,U,4) ; Batch #
"RTN","IBCEST",19,0)
 ;
"RTN","IBCEST",20,0)
 ; Auto-audit bills based on status code on '10' record of status msg
"RTN","IBCEST",21,0)
 ; flat file
"RTN","IBCEST",22,0)
 I IBBILL,$P($T(PRCAUDT+1^PRCAUDT),"**",2)[",173" D
"RTN","IBCEST",23,0)
 . N Z,Z0,Z1,OK
"RTN","IBCEST",24,0)
 . Q:+$$STA^PRCAFN(IBBILL)'=104
"RTN","IBCEST",25,0)
 . S (Z,OK)=0
"RTN","IBCEST",26,0)
 . F  S Z=$O(^IBA(364.2,IBTDA,2,Z)) Q:'Z  S Z0=$P($G(^(Z,0)),"##RAW DATA: ",2) I +Z0=10 S Z0=$P(Z0,U,5) D  Q:OK
"RTN","IBCEST",27,0)
 .. ; Strip leading spaces
"RTN","IBCEST",28,0)
 .. S Z0=$$TRIM^XLFSTR(Z0)
"RTN","IBCEST",29,0)
 .. Q:Z0=""
"RTN","IBCEST",30,0)
 .. I $$SCODE^IBCEST1(Z0),$P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBBILL,0)),U,7),0)),U,11) D AUDITX^PRCAUDT(IBBILL) S OK=1 ; IA 4043
"RTN","IBCEST",31,0)
 ;
"RTN","IBCEST",32,0)
 I $S(IBMNUM="":1,1:'IBBILL&(IBBTCH="")) D DELMSG^IBCESRV2(IBTDA) G UPDQ
"RTN","IBCEST",33,0)
 ;
"RTN","IBCEST",34,0)
 ; Individual bill   ; KDM US129 IB*2*577 rework Individual vs. Batch to Correct Storage of Payer ID
"RTN","IBCEST",35,0)
 I IBBILL D UPDTBILL() G UPDQ
"RTN","IBCEST",36,0)
 ;
"RTN","IBCEST",37,0)
 ; Batch - update each bill separately
"RTN","IBCEST",38,0)
 S IBBILL=""
"RTN","IBCEST",39,0)
 F  S IBBILL=$O(^IBA(364,"ABABI",+IBBTCH,IBBILL)) Q:'IBBILL  D
"RTN","IBCEST",40,0)
 . Q:$D(^TMP("IBCONF",$J,IBBILL))  ;Bill was rejected
"RTN","IBCEST",41,0)
 . S IB=$O(^IBA(364,"ABABI",+IBBTCH,IBBILL,0))
"RTN","IBCEST",42,0)
 . Q:'IB
"RTN","IBCEST",43,0)
 . D UPDTBILL()     ;KDM US129 IB*2*577 Correct Storage of PAYER ID
"RTN","IBCEST",44,0)
 ;
"RTN","IBCEST",45,0)
 Q
"RTN","IBCEST",46,0)
 ;
"RTN","IBCEST",47,0)
UPDTBILL()     ;KDM US129 IB*2*577 New section to Correct Storage of PAYER ID
"RTN","IBCEST",48,0)
 N IBA1,IBMSG0,IBPID
"RTN","IBCEST",49,0)
 S IBPID="",IBA1=0
"RTN","IBCEST",50,0)
 ;
"RTN","IBCEST",51,0)
 F  S IBA1=$O(^IBA(364.2,IBTDA,2,IBA1)) Q:'IBA1  D  Q:IBPID]""
"RTN","IBCEST",52,0)
 . S IBMSG0=$P($G(^(IBA1,0)),"##RAW DATA: ",2)
"RTN","IBCEST",53,0)
 . I +IBMSG0=277,$P(IBMSG0,U,5)="N" S IBPID=$P(IBMSG0,U,11)
"RTN","IBCEST",54,0)
 ;
"RTN","IBCEST",55,0)
 S IBSEQ=$P(IB00,U,8) S:IBSEQ="" IBSEQ="P"
"RTN","IBCEST",56,0)
 D STORE(IB0,IBBTCH,IBMNUM,IBTDA,IBBILL,IBSEQ,IBPID,1)
"RTN","IBCEST",57,0)
 Q
"RTN","IBCEST",58,0)
 ;
"RTN","IBCEST",59,0)
STORE(IB0,IBBTCH,IBMNUM,IBTDA,IBBILL,IBSEQ,IBPID,IB1) ;
"RTN","IBCEST",60,0)
 ;
"RTN","IBCEST",61,0)
 ; IB0 = 0-node of message in file 364.2
"RTN","IBCEST",62,0)
 ; IBBTCH = ien of batch in file 364.1
"RTN","IBCEST",63,0)
 ; IBMNUM = actual message number
"RTN","IBCEST",64,0)
 ; IBTDA = ien of message in file 364.2
"RTN","IBCEST",65,0)
 ; IBBILL = ien of bill in 399
"RTN","IBCEST",66,0)
 ; IBSEQ = P/S/T/ for COB sequence related to message
"RTN","IBCEST",67,0)
 ; IBPID = the payer id returned from clearinghouse for the claim
"RTN","IBCEST",68,0)
 ; IB1 = flag that says if the message was for a single bill or a batch.
"RTN","IBCEST",69,0)
 ;       Batch statuses have an additional standard text entry.
"RTN","IBCEST",70,0)
 ;       1 = single bill 0 = batch
"RTN","IBCEST",71,0)
 ; 
"RTN","IBCEST",72,0)
 N DA,DIK,DIE,DIC,X,Y,DR,DO,DD,DLAYGO,Z,Z0,Z1,Z2,Z3,IBT,IBDUP,IBFLDS,IBY,IBAUTO,IBLN
"RTN","IBCEST",73,0)
 ;
"RTN","IBCEST",74,0)
 S X=IBBILL,IBDUP=0
"RTN","IBCEST",75,0)
 ;
"RTN","IBCEST",76,0)
 S IBFLDS=".02////"_$P(IB0,U,3)
"RTN","IBCEST",77,0)
 S IBFLDS=IBFLDS_";.03////"_$S($$EXTERNAL^DILFD(364.2,.02,"U",$P(IB0,U,2))["REJ":"R",1:"I")_";.05////"_IBBTCH_";.06////"_IBMNUM_";.04////"_+$P(IB0,U,8)_";.07////"_IBSEQ_$S($P(IB0,U,5):";.11////"_$P(IB0,U,5),1:"")
"RTN","IBCEST",78,0)
 S IBFLDS=IBFLDS_";.12////"_$P(IB0,U,10)_";.09////0"
"RTN","IBCEST",79,0)
 S IBFLDS=IBFLDS_";.15////"_$$CHKSUM^IBCEST1("^IBA(364.2,"_IBTDA_",2)")
"RTN","IBCEST",80,0)
 I IBPID'="" D
"RTN","IBCEST",81,0)
 . S IBPID("TYPE")=$S($$FT^IBCEF(IBBILL)=2:"P",1:"I")
"RTN","IBCEST",82,0)
 . D UPDINS(.IBPID,$$POLICY^IBCEF(IBBILL,1,$TR(IBSEQ,"PST","123")),IBBILL,IBTDA)      ;KDM US129 IB*2*577
"RTN","IBCEST",83,0)
 ;
"RTN","IBCEST",84,0)
 I IBDUP D  I $D(Y) G UPDQ
"RTN","IBCEST",85,0)
 . ; Stuff fields into existing entry
"RTN","IBCEST",86,0)
 . ; (may be needed for reprocessing of aborted updates)
"RTN","IBCEST",87,0)
 . S DIE="^IBM(361,",DA=IBDUP,DR=IBFLDS_";1///@"
"RTN","IBCEST",88,0)
 . D ^DIE
"RTN","IBCEST",89,0)
 . I $D(Y) S IBY=-1 Q  ;Update not successful
"RTN","IBCEST",90,0)
 . S IBY=IBDUP
"RTN","IBCEST",91,0)
 ;
"RTN","IBCEST",92,0)
 K IBT
"RTN","IBCEST",93,0)
 I 'IBDUP D  ; Create new entry and stuff fields
"RTN","IBCEST",94,0)
 . S DIC(0)="L",DIC="^IBM(361,",DLAYGO=361
"RTN","IBCEST",95,0)
 . S DIC("DR")=IBFLDS
"RTN","IBCEST",96,0)
 . D FILE^DICN
"RTN","IBCEST",97,0)
 . K DO,DD,DLAYGO,DIC
"RTN","IBCEST",98,0)
 . S IBY=+Y
"RTN","IBCEST",99,0)
 . Q:IBY'>0
"RTN","IBCEST",100,0)
 . ;
"RTN","IBCEST",101,0)
 . ; IB*2*320 - Check for duplicate status message
"RTN","IBCEST",102,0)
 . NEW IBNEW,IBOLD,PCE,Z,DIK,DA
"RTN","IBCEST",103,0)
 . S IBNEW=""
"RTN","IBCEST",104,0)
 . F PCE=3,4,5,7,8,11,15 S IBNEW=IBNEW_$P($G(^IBM(361,IBY,0)),U,PCE)_U
"RTN","IBCEST",105,0)
 . S Z=0
"RTN","IBCEST",106,0)
 . F  S Z=$O(^IBM(361,"B",IBBILL,Z)) Q:'Z  I Z'=IBY D  Q:IBY'>0
"RTN","IBCEST",107,0)
 .. S IBOLD=""
"RTN","IBCEST",108,0)
 .. F PCE=3,4,5,7,8,11,15 S IBOLD=IBOLD_$P($G(^IBM(361,Z,0)),U,PCE)_U
"RTN","IBCEST",109,0)
 .. I IBNEW'=IBOLD Q   ; no duplicate so get the next one
"RTN","IBCEST",110,0)
 .. S DIK="^IBM(361,",DA=IBY,IBY=-1 D ^DIK D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEST",111,0)
 .. Q
"RTN","IBCEST",112,0)
 . Q
"RTN","IBCEST",113,0)
 ;
"RTN","IBCEST",114,0)
 I IBY>0 D  ;Move text over
"RTN","IBCEST",115,0)
 . K IBT
"RTN","IBCEST",116,0)
 . ;
"RTN","IBCEST",117,0)
 . D BLDMSG(IB1,IBTDA,.IBT,.IBAUTO)
"RTN","IBCEST",118,0)
 . ;
"RTN","IBCEST",119,0)
 . ; IB*2*368 - ymg - 2Q,RE,RP messages will be filed as informational
"RTN","IBCEST",120,0)
 . ; Z0 is the flag for 2Q code
"RTN","IBCEST",121,0)
 . ; Z1 is the flag for RE code
"RTN","IBCEST",122,0)
 . ; Z2 is the flag for RP code
"RTN","IBCEST",123,0)
 . ; Z3 is the flag for autofiling the message
"RTN","IBCEST",124,0)
 . I $P($G(^IBM(361,+IBY,0)),U,3)="R" D
"RTN","IBCEST",125,0)
 .. S Z="",(Z0,Z1,Z2,Z3)=0 F  S Z=$O(IBT(Z)) Q:Z=""!(Z3=1)  D
"RTN","IBCEST",126,0)
 ... S IBLN=$$UP^XLFSTR($G(IBT(Z)))
"RTN","IBCEST",127,0)
 ... I (Z0!Z1!Z2)=0 D
"RTN","IBCEST",128,0)
 .... S:IBLN?.E1"CODE:".P1"2Q".E Z0=1
"RTN","IBCEST",129,0)
 .... S:IBLN?.E1"CODE:".P1"RE".E Z1=1
"RTN","IBCEST",130,0)
 .... S:IBLN?.E1"CODE:".P1"RP".E Z2=1
"RTN","IBCEST",131,0)
 ... I Z0=1 S:IBLN?.P1"CLAIM".P1"REJECTED".P1"BY".P1"CLEARINGHOUSE".E Z3=1
"RTN","IBCEST",132,0)
 ... I Z1=1 S:IBLN?.P1"ELECTRONIC".P1"CLAIM".P1"REJECTED".P1"BY".P1"EMDEON".E Z3=1
"RTN","IBCEST",133,0)
 ... I Z2=1 S:IBLN?.P1"PAPER".P1"CLAIM".P1"REJECTED".P1"BY".P1"EMDEON".E Z3=1
"RTN","IBCEST",134,0)
 .. I Z3=1 S IBAUTO=1,DIE=361,DA=+IBY,DR=".03////I" D ^DIE
"RTN","IBCEST",135,0)
 .. Q
"RTN","IBCEST",136,0)
 . ;
"RTN","IBCEST",137,0)
 . ; if info msg, ck for no review needed based on first line of text
"RTN","IBCEST",138,0)
 . I $G(IBAUTO),$P($G(^IBM(361,+IBY,0)),U,3)="I" D
"RTN","IBCEST",139,0)
 .. S DIE="^IBM(361,",DR=".09////2;.14////1;.1////F",DA=+IBY D ^DIE
"RTN","IBCEST",140,0)
 .. I IB1,$P($G(^IBM(361,+IBY,0)),U,11) S Z="",Z0=0 F  S Z=$O(IBT(Z)) Q:Z=""!(Z0=1)  D
"RTN","IBCEST",141,0)
 ... S Z0=$$PRINTUPD^IBCEU0($$UP^XLFSTR($G(IBT(Z))),$P($G(^IBM(361,+IBY,0)),U,11))
"RTN","IBCEST",142,0)
 . ;
"RTN","IBCEST",143,0)
 . D MSGLNSZ(.IBT) ; Convert Message Lines in IBT to be no longer than 70 chars
"RTN","IBCEST",144,0)
 . D WP^DIE(361,+IBY_",",1,"A","IBT")    ; file message text
"RTN","IBCEST",145,0)
 . ;
"RTN","IBCEST",146,0)
 . ; Delete message after it successfully updates the database.
"RTN","IBCEST",147,0)
 . D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEST",148,0)
 . Q
"RTN","IBCEST",149,0)
 ;
"RTN","IBCEST",150,0)
UPDQ L -^IBA(364.2,IBTDA,0)
"RTN","IBCEST",151,0)
 Q
"RTN","IBCEST",152,0)
 ;
"RTN","IBCEST",153,0)
BLDMSG(IB1,IBTDA,IBT,IBAUTO) ; Builds message text
"RTN","IBCEST",154,0)
 ; IB1 = flag for batch message
"RTN","IBCEST",155,0)
 ; IBTDA = ien of entry in file 364.2
"RTN","IBCEST",156,0)
 ; IBT = array returned with message text
"RTN","IBCEST",157,0)
 ; IBAUTO = if passed by reference, returns 1 if text indicates review
"RTN","IBCEST",158,0)
 ;          not needed
"RTN","IBCEST",159,0)
 N IBDATA,IBCK,IBZ,IBZ0,IBZ1,Z
"RTN","IBCEST",160,0)
 S (IBZ,IBZ0,IBDATA,IBAUTO,IBCK)=0
"RTN","IBCEST",161,0)
 I 'IB1 S IBT(1)="Status message received for batch "_$P($G(^IBA(364.1,IBBTCH,0)),U)_" dated "_$$FMTE^XLFDT($P($G(^IBA(364.2,IBTDA,0)),U,10),2),IBZ0=1
"RTN","IBCEST",162,0)
 ; Don't move the raw data over, just move the text of the message
"RTN","IBCEST",163,0)
 F  S IBZ=$O(^IBA(364.2,IBTDA,2,IBZ)) Q:'IBZ  S IBZ1=$G(^(IBZ,0)) S IBDATA=($E(IBZ1,1,2)="##") Q:IBDATA  S IBZ0=IBZ0+1,IBT(IBZ0)=IBZ1 I 'IBCK S Z=$$CKREVU^IBCEM4(IBZ1,,,.IBCK),IBAUTO=$S(IBCK:0,Z:1,1:IBAUTO)
"RTN","IBCEST",164,0)
 Q
"RTN","IBCEST",165,0)
 ;
"RTN","IBCEST",166,0)
UPDINS(IBPID,IBINS,IBIFN,IBTDA)     ;KDM US129 IB*2*577
"RTN","IBCEST",167,0)
 ; Update the insurance id or the bill printed at
"RTN","IBCEST",168,0)
 ;    the EDI contractor's print shop and mailed to the ins co.
"RTN","IBCEST",169,0)
 ; IBPID = the id returned from the EDI contractor for the ins co
"RTN","IBCEST",170,0)
 ;      ("TYPE") = P if professional id or I if institutional id
"RTN","IBCEST",171,0)
 ; IBINS = the ien of the insurance co it was sent to (file 36)
"RTN","IBCEST",172,0)
 ; IBIFN = the ien of the claim (file 399)
"RTN","IBCEST",173,0)
 ; IBTDA = ien of entry in file 364.2     ;KDM US129 IB*2*577
"RTN","IBCEST",174,0)
 ;
"RTN","IBCEST",175,0)
 N IBID,IBIDFLD,IBPRT,IBLOOK,DA,DR,DIE,X,Y,Z,UPD     ;KDM US129 IB*2*577
"RTN","IBCEST",176,0)
 ;
"RTN","IBCEST",177,0)
 Q:'$G(IBINS)!($G(IBPID)="")
"RTN","IBCEST",178,0)
 ;
"RTN","IBCEST",179,0)
 ; Strip spaces off the end of data
"RTN","IBCEST",180,0)
 S IBLOOK=""
"RTN","IBCEST",181,0)
 I $L(IBPID) F Z=$L(IBPID):-1:1 I $E(IBPID,Z)'=" " S IBLOOK=$E(IBPID,1,Z) Q
"RTN","IBCEST",182,0)
 ;
"RTN","IBCEST",183,0)
 S IBPRT=($E(IBLOOK,2,5)="PRNT")
"RTN","IBCEST",184,0)
 I IBPRT D  ; Set printed via EDI field on bill
"RTN","IBCEST",185,0)
 . S DA=IBIFN,DIE="^DGCR(399,",DR="26////1" D ^DIE
"RTN","IBCEST",186,0)
 ;
"RTN","IBCEST",187,0)
 ; KDM US129 IB*2*577  correct payer ID storage
"RTN","IBCEST",188,0)
 ;S IBLOOK=$E($S('IBPRT:$P(IBLOOK,"PAYID=",2),1:""),1,5)
"RTN","IBCEST",189,0)
 ;Q:IBLOOK=""!($E(IBLOOK,2,5)="PRNT")
"RTN","IBCEST",190,0)
 I IBPRT Q
"RTN","IBCEST",191,0)
 I IBLOOK'["PAYID=",IBLOOK'["COBID=" Q     ;KDM US129 IB*2*577
"RTN","IBCEST",192,0)
 S IBLOOK=$E($P(IBLOOK,"ID=",2),1,5)
"RTN","IBCEST",193,0)
 Q:IBLOOK=""
"RTN","IBCEST",194,0)
 ;
"RTN","IBCEST",195,0)
 S IBIDFLD="3.0"_$S($G(IBPID("TYPE"))="I":4,1:2)
"RTN","IBCEST",196,0)
 S IBID=$P($G(^DIC(36,+IBINS,3)),U,IBIDFLD*100#100)
"RTN","IBCEST",197,0)
 Q:IBID=IBLOOK
"RTN","IBCEST",198,0)
 S IBDATE=DT,IBTYP=$G(IBPID("TYPE"))     ;KDM  US129 IB*2*577
"RTN","IBCEST",199,0)
 I IBID="" D  G UPDINSQ ; Update insurance co electronic id # if blank
"RTN","IBCEST",200,0)
 . S DIE="^DIC(36,",DR=IBIDFLD_"////"_IBLOOK,DA=IBINS D ^DIE
"RTN","IBCEST",201,0)
 . D UPDLOG(1,IBDATE,IBINS,IBLOOK,IBTYP,IBID)     ;KDM US129 IB*2*577
"RTN","IBCEST",202,0)
 I IBID'="",IBLOOK'="" D  ; Bulletin that the id on file and id returned
"RTN","IBCEST",203,0)
 . ; are different
"RTN","IBCEST",204,0)
 . N XMTO,XMDUZ,XMBODY,IBXM,XMSUBJ,XMZ
"RTN","IBCEST",205,0)
 . S XMTO("I:G.IB EDI")=""
"RTN","IBCEST",206,0)
 . S XMDUZ="",XMBODY="IBXM",XMSUBJ="PAYER ID RETURNED IS DIFFERENT THAN PAYER ID ON FILE"
"RTN","IBCEST",207,0)
 . S IBXM(1)="BILL #     : "_$P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBCEST",208,0)
 . S IBXM(2)="PAYER      : "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEST",209,0)
 . S IBXM(3)="BILL TYPE  : "_$S($G(IBPID("TYPE"))="I":"INSTITUT",1:"PROFESS")_"IONAL"
"RTN","IBCEST",210,0)
 . S IBXM(4)="ID ON FILE : "_IBID
"RTN","IBCEST",211,0)
 . S IBXM(5)="ID RETURNED: "_IBLOOK
"RTN","IBCEST",212,0)
 . S IBXM(6)=" ",IBXM(7)="   Please determine which id number is correct and correct the id in the",IBXM(8)="insurance file for this payer, if needed"
"RTN","IBCEST",213,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCEST",214,0)
 . D UPDLOG(0,IBDATE,IBINS,IBLOOK,IBTYP,IBID)     ;KDM US129, US976 IB*2*577
"RTN","IBCEST",215,0)
 ;
"RTN","IBCEST",216,0)
UPDINSQ Q
"RTN","IBCEST",217,0)
 ;
"RTN","IBCEST",218,0)
UPDLOG(UPD,IBDATE,IBINS,IBLOOK,IBTYP,IBID)    ;KDM US129, US976 IB*2*577 New section for New Payer Report 
"RTN","IBCEST",219,0)
 ; store flds for reporting purposes when updating or attempting to update Payer information (US129)
"RTN","IBCEST",220,0)
 ; ^DIC(36 -17.0 277EDI ID Number
"RTN","IBCEST",221,0)
 ;          17.01 277EDI ID Number
"RTN","IBCEST",222,0)
 ;          17.02 277Date EDI ID Number
"RTN","IBCEST",223,0)
 ;          17.03 277EDI Type (P)ROF or (I)nst
"RTN","IBCEST",224,0)
 ;          17.04 277EDI ID NUMBER ON FILE ;if blank it was an update otherwise it was an attempted update. 
"RTN","IBCEST",225,0)
 ;
"RTN","IBCEST",226,0)
 Q:(($D(^DIC(36,"AEDIX",IBDATE,IBINS,IBLOOK,IBTYP)))&(UPD=0))     ;store only one attempt a day
"RTN","IBCEST",227,0)
 N ERROR,IBFDA,LEV
"RTN","IBCEST",228,0)
 S LEV="+2,"_IBINS_","
"RTN","IBCEST",229,0)
 S IBFDA(36.017,LEV,.01)=IBLOOK     ;New Value from 277STAT
"RTN","IBCEST",230,0)
 S IBFDA(36.017,LEV,.02)=IBDATE     ;Date transaction is processed
"RTN","IBCEST",231,0)
 S IBFDA(36.017,LEV,.03)=IBTYP      ;"P" or "I"
"RTN","IBCEST",232,0)
 S IBFDA(36.017,LEV,.04)=$G(IBID)   ;Value already on file- if blank it was an update, otherwise attempted update
"RTN","IBCEST",233,0)
 D UPDATE^DIE("","IBFDA","","ERROR")
"RTN","IBCEST",234,0)
 Q
"RTN","IBCEST",235,0)
 ;
"RTN","IBCEST",236,0)
MSGLNSZ(MSG) ; Change Input Message Lines to be no more than 70 characters long each
"RTN","IBCEST",237,0)
 ;
"RTN","IBCEST",238,0)
 ; Input/Output:   MSG  - array of Input Message Lines; this is also the Output Message
"RTN","IBCEST",239,0)
 ; which is an array of Converted Message Lines (with lines no more than 70 chars each)
"RTN","IBCEST",240,0)
 ;
"RTN","IBCEST",241,0)
 N LN,XARY,XARYLN,CNT,OUTMSG,TMPMSG,LDNGSP,LDNGSPN
"RTN","IBCEST",242,0)
 S LN="",CNT=0 F  S LN=$O(MSG(LN)) Q:LN=""  D  ;
"RTN","IBCEST",243,0)
 . ; Find any leading spaces in original message line, 
"RTN","IBCEST",244,0)
 . ; to be used if line got split below
"RTN","IBCEST",245,0)
 . S TMPMSG=$$TRIM^XLFSTR(MSG(LN),"L"," ")  ;Trim Leading Spaces
"RTN","IBCEST",246,0)
 . S LDNGSP=$P(MSG(LN),TMPMSG,1)  ;get leading spaces if any
"RTN","IBCEST",247,0)
 . S LDNGSPN=$L(LDNGSP) S:LDNGSPN>30 LDNGSP=$E(LDNGSP,1,30) ;make sure there are no more than 30 leading spaces 
"RTN","IBCEST",248,0)
 . ; Converts a single line to multiple lines with a maximum width of 70 each
"RTN","IBCEST",249,0)
 . ; If line is 70 chars or less, this call returns the exact line
"RTN","IBCEST",250,0)
 . K XARY D FSTRNG^IBJU1(TMPMSG,70-LDNGSPN,.XARY)
"RTN","IBCEST",251,0)
 . ; Scan lines and merge them into the final output array (OUTMSG)
"RTN","IBCEST",252,0)
 . ; On lines 2 and higher, add Leading Spaces found above, if any.
"RTN","IBCEST",253,0)
 . S XARYLN="" F  S XARYLN=$O(XARY(XARYLN)) Q:XARYLN=""  S CNT=CNT+1,OUTMSG(CNT)=LDNGSP_XARY(XARYLN)
"RTN","IBCEST",254,0)
 ;
"RTN","IBCEST",255,0)
 ; Move the final Message Lines (OUTMSG) into MSG array to be returned
"RTN","IBCEST",256,0)
 K MSG M MSG=OUTMSG
"RTN","IBCEST",257,0)
 Q
"RTN","IBCEST",258,0)
 ;
"RTN","IBCF23A")
0^5^B39049121^B37854610
"RTN","IBCF23A",1,0)
IBCF23A ;ALB/ARH - HCFA 1500 19-90 DATA - Split from IBCF23 ;12-JUN-93
"RTN","IBCF23A",2,0)
 ;;2.0;INTEGRATED BILLING;**51,432,516,547,577**;21-MAR-94;Build 38
"RTN","IBCF23A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCF23A",4,0)
 ;
"RTN","IBCF23A",5,0)
 ; $$INSTALDT^XPDUTL(IBPATCH,.IBARY) - ICR 10141
"RTN","IBCF23A",6,0)
 ;
"RTN","IBCF23A",7,0)
B24 ; set individual entries in print array, external format
"RTN","IBCF23A",8,0)
 ; IBAUX = additional data for EDI output
"RTN","IBCF23A",9,0)
 ; IBRXF = array of RX procedures
"RTN","IBCF23A",10,0)
 N IBX,Z,IBD1,IBD2,IBCPLINK
"RTN","IBCF23A",11,0)
 S IBI=IBI+1,IBPROC=$P(IBSS,U,2),IBD1=$$DATE^IBCF23(IBDT1),IBD2=$S(IBDT1'=IBDT2:$$DATE^IBCF23(IBDT2),1:"")
"RTN","IBCF23A",12,0)
 I '$D(IBXIEN) S IBD1=$E(IBD1,5,8)_$E(IBD1,1,4),IBD2=$E(IBD2,5,8)_$E(IBD2,1,4)
"RTN","IBCF23A",13,0)
 S IBFLD(24,IBI)=IBD1_U_IBD2_U_$P($G(^IBE(353.1,+$P(IBSS,U,6),0)),U)_U_$P($G(^IBE(353.2,+$P(IBSS,U,7),0)),U)
"RTN","IBCF23A",14,0)
 I +IBPROC D
"RTN","IBCF23A",15,0)
 . S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P($$PRCD^IBCEF1(IBPROC,1),U,2) S:$P(IBPROC,";",2)'["ICPT" IBFLD(24,IBI_"X")=""
"RTN","IBCF23A",16,0)
 I 'IBPROC S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$S('$D(IBXIEN):IBPROC,1:+IBREV),IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",17,0)
 I $D(IBRXF),IBCHARG="" S IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",18,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P(IBSS,U,5)_U_IBCHARG_U_IBUNIT_U_$P(IBSS,U,8)_U_$G(IBPCHG)_U_$G(IBMIN)_U_$G(IBEMG)
"RTN","IBCF23A",19,0)
 I $D(IBSS("L")) S Z=0 F  S Z=$O(IBSS("L",Z)) Q:'Z  S IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2))=$G(IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2)))+1
"RTN","IBCF23A",20,0)
 S:$TR($G(IBAUX),U)'="" IBFLD(24,IBI,"AUX")=$G(IBAUX)
"RTN","IBCF23A",21,0)
 S:$D(IBRXF) IBFLD(24,IBI,"RX")=IBRXF
"RTN","IBCF23A",22,0)
 K IBPROC,IBSS("L")
"RTN","IBCF23A",23,0)
 S IBCPLINK=$P(IBSS,U,$L(IBSS,U))
"RTN","IBCF23A",24,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_IBCPLINK
"RTN","IBCF23A",25,0)
 ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
"RTN","IBCF23A",26,0)
 ;I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,15)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")
"RTN","IBCF23A",27,0)
 ; vd/Beginning of IB*2*577 - Added Unit/Basis of Measurment to line level of claim.
"RTN","IBCF23A",28,0)
 I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,16)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,2)),U)
"RTN","IBCF23A",29,0)
 ; vd/End of IB*2*577
"RTN","IBCF23A",30,0)
 Q
"RTN","IBCF23A",31,0)
 ;
"RTN","IBCF23A",32,0)
AUXOK(IBSS,IBSS1) ; Check all other flds are the same to combine procs
"RTN","IBCF23A",33,0)
 ; IBSS = subscript of IBCP to check for dups to combine - pass by ref
"RTN","IBCF23A",34,0)
 ; IBSS(IBSS,"AUX-X",n) = all the previously extracted line items for the
"RTN","IBCF23A",35,0)
 ;  same set of basic data, but having different "AUX" data
"RTN","IBCF23A",36,0)
 ; IBSS1 = the "AUX" data of the current IBCP entry
"RTN","IBCF23A",37,0)
 ;
"RTN","IBCF23A",38,0)
 ; Returns entry # in IBSS array if match found, or 0 if no match
"RTN","IBCF23A",39,0)
 ; Set the IBSS "AUX-X" node for no match
"RTN","IBCF23A",40,0)
 N Z,Z0
"RTN","IBCF23A",41,0)
 S Z=0 F  S Z=$O(IBSS(IBSS,"AUX-X",Z)) Q:'Z  I IBSS1=IBSS(IBSS,"AUX-X",Z) Q
"RTN","IBCF23A",42,0)
 I 'Z S Z0=+$O(IBSS(IBSS,"AUX-X",""),-1)+1,IBSS(IBSS,"AUX-X",Z0)=IBSS1
"RTN","IBCF23A",43,0)
 Q +Z
"RTN","IBCF23A",44,0)
 ;
"RTN","IBCF23A",45,0)
PRC ; Extract procedure data for HCFA 1500
"RTN","IBCF23A",46,0)
 ; IBRC(IBSS) = #rev codes with same billing criteria (IBSS)
"RTN","IBCF23A",47,0)
 ; IBLINK('CP' ien,'RC' ien) = IBSS including modifiers,rx seq in pc 7,8
"RTN","IBCF23A",48,0)
 ; IBLINK1(IBSS, 'RC' ien) =  auto (1)^ 'CP' ien (soft link)
"RTN","IBCF23A",49,0)
 ;
"RTN","IBCF23A",50,0)
 ; proc array w/chrg
"RTN","IBCF23A",51,0)
 N IBPR,IBP
"RTN","IBCF23A",52,0)
 S IBI=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:'IBI  S IBLN=^(IBI,0),IBAUXLN=$G(^("AUX")) D
"RTN","IBCF23A",53,0)
 . N Z,Z0,Z1,Q1
"RTN","IBCF23A",54,0)
 . S IBPDT=$P(IBLN,U,2)
"RTN","IBCF23A",55,0)
 . S IBSS=$$IBSS(IBI,.IBDXI,IBLN)
"RTN","IBCF23A",56,0)
 . S IBPO=$S($P(IBLN,U,4):+$P(IBLN,U,4),1:IBI+1000) ;Set print order
"RTN","IBCF23A",57,0)
 . S IBCP(IBPO)=IBPDT_"^"_IBSS,IBCP(IBPO,"AUX")=IBAUXLN
"RTN","IBCF23A",58,0)
 . S IBCP(IBPO,"LNK")=IBI
"RTN","IBCF23A",59,0)
 . ; Rx
"RTN","IBCF23A",60,0)
 . N IBZ,IBITEM
"RTN","IBCF23A",61,0)
 . S IBZ=$S($P(IBSS,U):$P(IBSS,U),1:"")
"RTN","IBCF23A",62,0)
 . I IBZ'="",$D(IBLINKRX(IBZ,IBI)) D  Q:IBCHARG'=""
"RTN","IBCF23A",63,0)
 .. S IBPO1=IBPO
"RTN","IBCF23A",64,0)
 .. S IBITEM=+$O(IBLINKRX(IBZ,IBI,0)),IBRV=$G(IBLINKRX(IBZ,IBI,IBITEM))
"RTN","IBCF23A",65,0)
 .. Q:$S(IBRV="":1,1:'$G(IBRC(IBRV)))
"RTN","IBCF23A",66,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",67,0)
 .. S $P(IBCP(IBPO1),U,9)=IBCHARG,IBCP(IBPO1,"RX")=IBITEM K IBLINKRX(IBZ,IBI,IBITEM)
"RTN","IBCF23A",68,0)
 . ; find chrgs directly linked to proc
"RTN","IBCF23A",69,0)
 . S IBK=0 F  S IBK=$O(IBLINK(IBI,IBK)) Q:'IBK  S IBRV1=IBLINK(IBI,IBK),IBRV=$P(IBRV1,U,1,6) I +IBRC(IBRV1) D
"RTN","IBCF23A",70,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV1)=IBRC(IBRV1)-1
"RTN","IBCF23A",71,0)
 .. I IBCHARG'="" S $P(IBSS,U,8)=IBCHARG,IBCP(IBPO)=IBPDT_"^"_IBSS,IBPO=IBPO+.1
"RTN","IBCF23A",72,0)
 ;
"RTN","IBCF23A",73,0)
 ; add chrgs associated with a proc (not a direct link)
"RTN","IBCF23A",74,0)
 ; find chrg associated with proc, if any (match proc,div,+/-basc)
"RTN","IBCF23A",75,0)
 K IBP(0)
"RTN","IBCF23A",76,0)
 F IBP=3,2 Q:$D(IBP(0))  S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",77,0)
 . S IBSS=$P(IBCP(IBPO),U,2,9)
"RTN","IBCF23A",78,0)
 . S IBCHARG="",(IBRV,IBSS)=$P(IBSS,U,1,IBP) F  S IBRV=$O(IBRC(IBRV)) Q:$P(IBRV,U,1,IBP)'=IBSS  S IBP(0)=0 I +IBRC(IBRV) D  Q
"RTN","IBCF23A",79,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",80,0)
 .. I IBRC(IBRV) S Z=0 F  S Z=$O(IBCP(IBPO,Z)) Q:'Z  S IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",81,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",82,0)
 . I IBCHARG'="" S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",83,0)
 ;
"RTN","IBCF23A",84,0)
 ; add chrgs not associated with a proc to first proc with no chrg
"RTN","IBCF23A",85,0)
 ; Aggggh!!! TP
"RTN","IBCF23A",86,0)
 S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",87,0)
 . S IBCHARG="",IBRV="^" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""!+IBRV  I +IBRC(IBRV) D  Q
"RTN","IBCF23A",88,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",89,0)
 .. S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",90,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",91,0)
 ;
"RTN","IBCF23A",92,0)
 Q
"RTN","IBCF23A",93,0)
IBSS(IBI,IBDXI,IBLN) ; Creates index sequence for procedure
"RTN","IBCF23A",94,0)
 N IBPC,IBJ,IBSS,IBLPI,IBX,IBLPAR
"RTN","IBCF23A",95,0)
 S (IBPC,IBLPI)=0
"RTN","IBCF23A",96,0)
 F IBJ=1,6,5,0,9,10 S IBPC=IBPC+1 S:IBJ $P(IBSS,U,IBPC,IBPC+1)=($P(IBLN,U,IBJ)_U)
"RTN","IBCF23A",97,0)
 S $P(IBSS,U,7)=($$GETMOD^IBEFUNC(IBIFN,IBI)_U) ;Modifiers
"RTN","IBCF23A",98,0)
 ;IB*547/TAZ - IBDXI not defined, use internal DX pointer
"RTN","IBCF23A",99,0)
 I '$G(IBNWPTCH) F IBJ=11:1:14 I $P(IBLN,U,IBJ) S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(+$P(IBLN,U,IBJ))) ; dx
"RTN","IBCF23A",100,0)
 I $G(IBNWPTCH) F IBJ=11:1:14 S IBX=$P(IBLN,U,IBJ) I IBX S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(IBX),IBX) ; dx
"RTN","IBCF23A",101,0)
 S $P(IBSS,U,10)=$P(IBLN,U,16),$P(IBSS,U,9)=$P(IBLN,U,19),$P(IBSS,U,11)=+$P(IBLN,U,17)
"RTN","IBCF23A",102,0)
 G:'$G(IBNWPTCH) IBSSX
"RTN","IBCF23A",103,0)
 ;IB*547/TAZ - Add additional fields for roll-up compare
"RTN","IBCF23A",104,0)
 S $P(IBSS,U,21)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ASSOCIATED CLINIC","I")
"RTN","IBCF23A",105,0)
 S $P(IBSS,U,22)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","TYPE OF SERVICE","I")
"RTN","IBCF23A",106,0)
 S $P(IBSS,U,23)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ATTACHMENT CONTROL NUMBER","I")
"RTN","IBCF23A",107,0)
 S $P(IBSS,U,24)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","NDC","I")
"RTN","IBCF23A",108,0)
 S $P(IBSS,U,25)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","PROCEDURE DESCRIPTION","I")
"RTN","IBCF23A",109,0)
 S $P(IBSS,U,26)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ADDITIONAL OB MINUTES","I")
"RTN","IBCF23A",110,0)
 ;Add Provider info in pieces 41-49
"RTN","IBCF23A",111,0)
 M IBLPAR=^DGCR(399,IBIFN,"CP",IBI,"LNPRV")
"RTN","IBCF23A",112,0)
 F  S IBLPI=$O(IBLPAR(IBLPI)) Q:'IBLPI  S IBX=IBLPAR(IBLPI,0),$P(IBSS,U,40+IBX)=$TR(IBX,"^","~")
"RTN","IBCF23A",113,0)
 K IBLPAR
"RTN","IBCF23A",114,0)
IBSSX ;
"RTN","IBCF23A",115,0)
 Q IBSS
"RTN","IBCF23A",116,0)
 ;
"RTN","IBCF23A",117,0)
IBNWPTCH(IBIFN,IBPATCH) ;
"RTN","IBCF23A",118,0)
 ;Checks the date the primary claim was 1st transmitted and returns 1 if the transmitted date is after the patch
"RTN","IBCF23A",119,0)
 ;referenced in variable IBPATCH was released. This allows the MRA/EOBs returning to roll up procedures the same
"RTN","IBCF23A",120,0)
 ;way as they went out.  Otherwise the order changes and the MRA/EOB won't match up.
"RTN","IBCF23A",121,0)
 ;
"RTN","IBCF23A",122,0)
 N IBARY,IBIDT,IBPFN,IBEFN,IBBN,IBX,IBBDT
"RTN","IBCF23A",123,0)
 S IBX=0
"RTN","IBCF23A",124,0)
 I $$INSTALDT^XPDUTL(IBPATCH,.IBARY) D   ;ICR 10141
"RTN","IBCF23A",125,0)
 . S IBX=1
"RTN","IBCF23A",126,0)
 . S IBIDT=$O(IBARY(""))
"RTN","IBCF23A",127,0)
 . ; Get Primary Bill Number. This will insure COB data is consistent across all bills.
"RTN","IBCF23A",128,0)
 . S IBPFN=$$GET1^DIQ(399,IBIFN_",","PRIMARY BILL #","I") I 'IBPFN S IBPFN=IBIFN
"RTN","IBCF23A",129,0)
 . ; Find 1st Accepted Entry (A1, A2, or Z) of Primary Bill in EDI TRANSMIT BILL FILE (364) to determine Batch Number
"RTN","IBCF23A",130,0)
 . S (IBEFN,IBBN)=0 F  S IBEFN=$O(^IBA(364,"B",IBPFN,IBEFN)) Q:'IBEFN  D  I IBBN Q
"RTN","IBCF23A",131,0)
 .. I ",A1,A2,Z,"'[(","_$$GET1^DIQ(364,IBEFN_",","TRANSMISSION STATUS","I")_",") Q
"RTN","IBCF23A",132,0)
 .. S IBBN=$$GET1^DIQ(364,IBEFN_",","BATCH NUMBER","I")
"RTN","IBCF23A",133,0)
 . ;Retrieve the date the batch was 1st sent.  If IBBN="" IBBDT will be null
"RTN","IBCF23A",134,0)
 . S IBBDT=$$GET1^DIQ(364.1,$$GET1^DIQ(364,IBBN_",","BATCH NUMBER","I")_",","DATE FIRST SENT","I")
"RTN","IBCF23A",135,0)
 . I IBBDT,(IBBDT<IBIDT) S IBX=0
"RTN","IBCF23A",136,0)
 Q IBX
"RTN","IBCF33")
0^7^B35272389^B31973795
"RTN","IBCF33",1,0)
IBCF33 ;ALB/ARH - UB-04 CMS-1450 (GATHER CODES) ;25-AUG-1993
"RTN","IBCF33",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,109,51,230,349,577**;21-MAR-94;Build 38
"RTN","IBCF33",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","IBCF33",4,0)
 ;
"RTN","IBCF33",5,0)
 ;IBIFN required
"RTN","IBCF33",6,0)
 ;
"RTN","IBCF33",7,0)
 ; Not all free text prints in these blocks as of MRA/EDI - only print
"RTN","IBCF33",8,0)
 ;   REVENUE CODES and associated data, Rx's and prosthetics
"RTN","IBCF33",9,0)
 ;   and last line to indicate multiple pages
"RTN","IBCF33",10,0)
 N IBI,IBJ,IBCU2,IBCOL,IBSTATE,IBCBILL,IBINPAT,IBX,IBY,Z,IBZ,IBLPG
"RTN","IBCF33",11,0)
 S IBLINES=22,IBCU2=$G(^DGCR(399,IBIFN,"U2")),IBCOL=1,IBNOCOM=0
"RTN","IBCF33",12,0)
 K IBXSAVE("RX-UB-04"),IBXSAVE("PROS-UB-04")
"RTN","IBCF33",13,0)
 D HOS^IBCEF22(IBIFN)
"RTN","IBCF33",14,0)
 ;
"RTN","IBCF33",15,0)
 I $$TXMT^IBCEF4(IBIFN) S IBNOCOM=1
"RTN","IBCF33",16,0)
 S Z="",IBNOCHG=0
"RTN","IBCF33",17,0)
 ; Add total line as last entry, if not already there
"RTN","IBCF33",18,0)
 ;S IBLCT=$O(IBXDATA(""),-1)
"RTN","IBCF33",19,0)
 ;I IBLCT,$P(IBXDATA(IBLCT),U)'="001" S IBXDATA(IBLCT+1)="001"
"RTN","IBCF33",20,0)
 ;S IBLCT=0
"RTN","IBCF33",21,0)
 S IBLPG=($O(IBXDATA(""),-1)+$O(IBXSAVE("RX-UB-04",""),-1)+$O(IBXSAVE("PROS-UB-04",""),-1))/22,IBLPG=IBLPG\1+$S($P(IBLPG,".",2):1,1:0)
"RTN","IBCF33",22,0)
 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
"RTN","IBCF33",23,0)
 . N IBZ1
"RTN","IBCF33",24,0)
 . ;I $P(IBXDATA(Z),U)="001",'$O(IBXDATA(Z)) S IBZ="001",$P(IBZ,U,4)=$P(IBCBCOMM,U,1),IBDA=0 S:IBNOCHG $P(IBZ,U,9)=$G(IBNOCHG) S IBXDATA(Z)=IBZ D SET1 Q
"RTN","IBCF33",25,0)
 . ;Get modifiers
"RTN","IBCF33",26,0)
 . S IBZ1=$G(^DGCR(399,IBIFN,"RC",+$P(IBXDATA(Z),U,8),0)),IBMOD=""
"RTN","IBCF33",27,0)
 . I $P(IBZ1,U,6),$S($P(IBZ1,U,10)=4:$P(IBZ1,U,11),1:'$P(IBZ1,U,10)) S $P(IBXDATA(Z),U,9)=$$MOD(IBZ1,IBIFN)
"RTN","IBCF33",28,0)
 . S IBZ=$P(IBXDATA(Z),U)_U_$P(IBXDATA(Z),U,3,5)_"^^"_$P(IBXDATA(Z),U,2),$P(IBZ,U,9)=$P(IBXDATA(Z),U,6),$P(IBZ,U,13)=$P(IBXDATA(Z),U,7),$P(IBZ,U,10)=$P(IBXDATA(Z),U,9),$P(IBZ,U,14)=$P(IBXDATA(Z),U,10)
"RTN","IBCF33",29,0)
 . ; VAD-IB*2*577 - Add "NDC#", "Unit/Basis of Measure", and "Units/Qty" to pieces 20,21,22 of IBZ, respectively
"RTN","IBCF33",30,0)
 . S $P(IBZ,U,20)=$P(IBXDATA(Z),U,11),$P(IBZ,U,21)=$P(IBXDATA(Z),U,13),$P(IBZ,U,22)=$P(IBXDATA(Z),U,12)
"RTN","IBCF33",31,0)
 . I IBZ S IBNOCHG=IBNOCHG+$P(IBXDATA(Z),U,6),IBDA=$P(IBXDATA(Z),U,8) D SET1
"RTN","IBCF33",32,0)
 . ;S IBLCT=IBLCT+1
"RTN","IBCF33",33,0)
 I $D(IBXSAVE("RX-UB-04"))!$D(IBXSAVE("PROS-UB-04")) D
"RTN","IBCF33",34,0)
 . N Z
"RTN","IBCF33",35,0)
 . S Z=0 F  S Z=$O(IBXSAVE("RX-UB-04",Z)) Q:'Z  S IBZ=IBXSAVE("RX-UB-04",Z) D SET2
"RTN","IBCF33",36,0)
 . S Z=0 F  S Z=$O(IBXSAVE("PROS-UB-04",Z)) Q:'Z  S IBZ=IBXSAVE("PROS-UB-04",Z) D SET2
"RTN","IBCF33",37,0)
 D END
"RTN","IBCF33",38,0)
 Q
"RTN","IBCF33",39,0)
 ;
"RTN","IBCF33",40,0)
RV ;rev codes sorted by bedsection - no longer used as of patch IB*2*51
"RTN","IBCF33",41,0)
 S (IBBSN,IBBS,IBNOCHG)=0 F  S IBBS=$O(^DGCR(399,IBIFN,"RC","ABS",IBBS)) Q:'IBBS  D
"RTN","IBCF33",42,0)
 . S IBRV=0 F  S IBRV=$O(^DGCR(399,IBIFN,"RC","ABS",IBBS,IBRV)) Q:'IBRV  D
"RTN","IBCF33",43,0)
 .. S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"RC","ABS",IBBS,IBRV,IBDA)) Q:'IBDA  D
"RTN","IBCF33",44,0)
 ... S IBX=$G(^DGCR(399,IBIFN,"RC",IBDA,0))
"RTN","IBCF33",45,0)
 ... S IBZ=$P($G(^DGCR(399.1,+$P(IBX,U,5),0)),U,1) S IBBSN=IBZ,IBZ=IBX,IBNOCHG=IBNOCHG+$P(IBZ,U,9) D SET1
"RTN","IBCF33",46,0)
 ;
"RTN","IBCF33",47,0)
 ;loop through all rev codes, print those with no bedsection
"RTN","IBCF33",48,0)
 S IBDA=0 F  S IBDA=$O(^DGCR(399,IBIFN,"RC",IBDA)) Q:'IBDA  S IBZ=$G(^(IBDA,0)) I +IBZ,$P(IBZ,U,5)="" S IBNOCHG=IBNOCHG+$P(IBZ,U,9) D SET1
"RTN","IBCF33",49,0)
 ;
"RTN","IBCF33",50,0)
TOTAL ;add total
"RTN","IBCF33",51,0)
 ;I +$P(IBCBCOMM,U,2) S IBZ="",$P(IBZ,U,2)="SUBTOTAL",$P(IBZ,U,4)=+$P(IBCBCOMM,U,1) D SET1
"RTN","IBCF33",52,0)
 ;
"RTN","IBCF33",53,0)
 ;S IBX=$S(+$P(IBCBCOMM,U,2):4,1:2) D SPACE
"RTN","IBCF33",54,0)
 S IBX=2 D SPACE
"RTN","IBCF33",55,0)
 ;S IBZ="" D SET2
"RTN","IBCF33",56,0)
 ;S IBJ=0 F IBI=4,5,6 S IBJ=IBJ+$P(IBCU2,U,IBI)
"RTN","IBCF33",57,0)
 ;I +$P(IBCBCOMM,U,2),+$P(IBCBCOMM,U,2)'=IBJ S (IBI,IBZ)="",$P(IBZ,U,2)="LESS "_$P(IBCBCOMM,U,3),$P(IBZ,U,4)=+$P(IBCBCOMM,U,2) D SET1 S IBZ="" D SET2
"RTN","IBCF33",58,0)
 ;
"RTN","IBCF33",59,0)
 ;S IBZ="001",$P(IBZ,U,2)="TOTAL",$P(IBZ,U,4)=IBCBCOMM-$S(IBI="":$P(IBCBCOMM,U,2),1:0) S:IBNOCHG $P(IBZ,U,9)=$G(IBNOCHG) D SET1
"RTN","IBCF33",60,0)
 ;
"RTN","IBCF33",61,0)
 ;
"RTN","IBCF33",62,0)
CPT ;add additional procedures
"RTN","IBCF33",63,0)
 ;G:$G(IBFL(80))'>6 OPV S IBX=+IBFL(80)-4 D SPACE
"RTN","IBCF33",64,0)
 ;S IBZ="" D SET2
"RTN","IBCF33",65,0)
 ;S IBZ="ADDITIONAL PROCEDURE CODES:" D SET2
"RTN","IBCF33",66,0)
 ;S IBI=6 F  S IBI=$O(IBFL(80,IBI)) Q:'IBI  D
"RTN","IBCF33",67,0)
 ;. S IBX=$P(IBFL(80,IBI),U,2),IBZ=$E(IBX,1,2)_"/"_$E(IBX,3,4)_"/"_$E(IBX,5,6)_$J(" ",5)_$P(IBFL(80,IBI),U,1) D SET2
"RTN","IBCF33",68,0)
 ;
"RTN","IBCF33",69,0)
OPV ;add outpatient visit dates
"RTN","IBCF33",70,0)
 ;G:'$O(^DGCR(399,IBIFN,"OP",0)) CONT S (IBX,IBY)=0 F  S IBX=$O(^DGCR(399,IBIFN,"OP",IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCF33",71,0)
 ;S IBX=IBY/3,IBX=IBX\1+$S(+$P(IBX,".",2):1,1:0)+1 D SPACE
"RTN","IBCF33",72,0)
 ;S IBZ="" D SET2 S IBZ="OP VISIT DATE(S) BILLED:"_$J(" ",34-24)
"RTN","IBCF33",73,0)
 ;S (IBI,IBJ)=0 F  S IBI=$O(^DGCR(399,IBIFN,"OP",IBI)) Q:'IBI  D
"RTN","IBCF33",74,0)
 ;. S Y=$G(^DGCR(399,IBIFN,"OP",IBI,0)),IBZ=IBZ_$$FMTE^XLFDT(Y,2)_$S($O(^DGCR(399,IBIFN,"OP",IBI)):", ",1:"")
"RTN","IBCF33",75,0)
 ;. S IBJ=IBJ+1 I IBJ>2 D SET2 S IBZ=$J(" ",34),IBJ=0
"RTN","IBCF33",76,0)
 ;I $L(IBZ)>34 D SET2
"RTN","IBCF33",77,0)
 ;
"RTN","IBCF33",78,0)
CONT ;D ^IBCF331 ;More free text - can no longer print on UB-04
"RTN","IBCF33",79,0)
 ;
"RTN","IBCF33",80,0)
 ; fill in rest of page
"RTN","IBCF33",81,0)
END D:'$G(IBNOCOM) FILLPG S $P(^TMP($J,"IBC-RC"),U,2)=0 S IBPG=+$G(^TMP($J,"IBC-RC")),IBX=IBPG/22,IBPG=IBX\1+$S(+$P(IBX,".",2):1,1:0)
"RTN","IBCF33",82,0)
 K IBZ,IBBSN,IBBS,IBRV,IBDA,IBLN,IBCOL,IBLINES,IBARRAY,IBNOCHG,IBNOCOM,IBXSAVE("RX-UB-04"),IBXSAVE("PROS-UB-04")
"RTN","IBCF33",83,0)
 Q
"RTN","IBCF33",84,0)
 ;
"RTN","IBCF33",85,0)
SPACE ;checks to see if IBX can fit on page, if not starts new page
"RTN","IBCF33",86,0)
 Q:'IBX  N IBLN,IBY S IBLN=+$G(^TMP($J,"IBC-RC")),IBY=IBLN#22 S:IBY=0&(IBLN'=0) IBY=22 I IBX>(IBLINES-IBY) D FILLPG
"RTN","IBCF33",87,0)
 Q
"RTN","IBCF33",88,0)
 ;
"RTN","IBCF33",89,0)
FILLPG ;fill rest of page with blank lines
"RTN","IBCF33",90,0)
 N IBI,IBLN,IBZ S IBFILL=1 F IBI=1:1:22 S IBLN=+$G(^TMP($J,"IBC-RC")) Q:'(IBLN#22)  S IBZ="" D FILLUP Q:IBFILL=2
"RTN","IBCF33",91,0)
 K IBFILL Q
"RTN","IBCF33",92,0)
 ;
"RTN","IBCF33",93,0)
SET1 ; add rev codes to array: rev cd ^ rev cd st abbrev. ^ CPT CODE ^ unit charge ^ units ^ total ^ non-cov charge ^ form locator 49 ^ rev code mult ien ^ cpt modifiers attached to revenue code/procedure (unlinked)^ outpt serv date
"RTN","IBCF33",94,0)
 ;formats for output into specific column blocks 42-48
"RTN","IBCF33",95,0)
 ;
"RTN","IBCF33",96,0)
 ;JRA;IB*2.0*577 Add Unit/Basis of Measure to array  - added after 'units' so the string above will be changed to:
"RTN","IBCF33",97,0)
 ;rev cd ^ rev cd st abbrev. ^ CPT CODE ^ unit charge ^ units (Qty) ^ unit/basis of measure ^ total ^ non-cov charge ^ form locator 49 ^ rev code mult ien ^ cpt modifiers attached to revenue code/procedure (unlinked)^ outpt serv date
"RTN","IBCF33",98,0)
 ;
"RTN","IBCF33",99,0)
 N IBX,IBY,IBLN,IBN,IBMOD
"RTN","IBCF33",100,0)
 D NEXTLN S IBY=""
"RTN","IBCF33",101,0)
 ;set up rev cd item with appropriate output values, non-rev cd entries for old bills should already be in external form
"RTN","IBCF33",102,0)
 S IBN=$P(IBZ,U,9) ;non-covered charges
"RTN","IBCF33",103,0)
 S IBMOD=$P(IBZ,U,10) I IBMOD'="" S IBMOD=$E($TR(IBMOD,",;"),1,4) ; cpt modifiers
"RTN","IBCF33",104,0)
 I +IBZ S IBX=$G(^DGCR(399.2,+IBZ,0)) Q:IBX=""  D
"RTN","IBCF33",105,0)
 . S IBY=$P(IBX,U,1)_U_$P(IBX,U,2)_U_$$PRCD^IBCEF1($P(IBZ,U,6)_";ICPT(")_IBMOD
"RTN","IBCF33",106,0)
 . S IBY=IBY_U_$P(IBZ,U,2)_U_$P(IBZ,U,3)_U_$P(IBZ,U,4)_U_IBN_U_$P(IBZ,U,13)_U_$G(IBDA)_U_U_$$DATE^IBCF2($P(IBZ,U,14),"",1)
"RTN","IBCF33",107,0)
 I IBY="" S IBY=$P(IBZ,U,1)_U_$P(IBZ,U,2)_U_U_U_$P(IBZ,U,3)_U_$P(IBZ,U,4)_U_IBN_U_$P(IBZ,U,13)_U_$G(IBDA)_U_U_$$DATE^IBCF2($P(IBZ,U,14),"",1)
"RTN","IBCF33",108,0)
 S $P(IBY,U,20,22)=$P(IBZ,U,20,22)   ;VAD Add "NDC#", "Unit/Basis of Measure", and "Units/Qty" to IBY
"RTN","IBCF33",109,0)
 S IBLN=+$G(^TMP($J,"IBC-RC"))+1,^TMP($J,"IBC-RC",IBLN)=1_U_IBY,^TMP($J,"IBC-RC")=IBLN I '(IBLN#22) S IBLINES=22
"RTN","IBCF33",110,0)
 Q
"RTN","IBCF33",111,0)
 ;
"RTN","IBCF33",112,0)
SET2 ;set free text into block 42 array
"RTN","IBCF33",113,0)
 Q:$G(IBNOCOM)  ;No comments wanted
"RTN","IBCF33",114,0)
 N IBLN D NEXTLN S IBCOL=$S('IBCOL:2,1:3)
"RTN","IBCF33",115,0)
 S IBLN=+$G(^TMP($J,"IBC-RC"))+1 I IBLN#22=1,$G(IBFILL) S IBFILL=2 Q
"RTN","IBCF33",116,0)
 S ^TMP($J,"IBC-RC",IBLN)=IBCOL_U_IBZ,^TMP($J,"IBC-RC")=IBLN I '(IBLN#22) S IBLINES=22
"RTN","IBCF33",117,0)
 Q
"RTN","IBCF33",118,0)
 ;
"RTN","IBCF33",119,0)
FILLUP ; Fill block 42 with blank lines
"RTN","IBCF33",120,0)
 N IBLN D NEXTLN S IBCOL=$S('IBCOL:2,1:3)
"RTN","IBCF33",121,0)
 S IBLN=+$G(^TMP($J,"IBC-RC"))+1 I IBLN#22=1,$G(IBFILL) S IBFILL=2 Q
"RTN","IBCF33",122,0)
 S ^TMP($J,"IBC-RC",IBLN)=IBCOL_U_IBZ,^TMP($J,"IBC-RC")=IBLN I '(IBLN#22) S IBLINES=22
"RTN","IBCF33",123,0)
 Q
"RTN","IBCF33",124,0)
 ;
"RTN","IBCF33",125,0)
NEXTLN ;checks counter for next line, resets if necessary,
"RTN","IBCF33",126,0)
 ;ie. if the line # indicated by the next line # var. has already been used then this increments the next line # var.
"RTN","IBCF33",127,0)
 S IBLN=+$G(^TMP($J,"IBC-RC"))+1 I $D(^TMP($J,"IBC-RC",IBLN)) S ^TMP($J,"IBC-RC")=IBLN S:'(IBLN#22) IBLINES=22 G NEXTLN
"RTN","IBCF33",128,0)
 Q
"RTN","IBCF33",129,0)
 ;
"RTN","IBCF33",130,0)
MOD(RCLN,IBIFN) ; return modifier(s) for a directly linked CPT charge or for an indirectly linked one
"RTN","IBCF33",131,0)
 N IBCPTN,IBMOD
"RTN","IBCF33",132,0)
 S IBMOD=""
"RTN","IBCF33",133,0)
 I $P($G(RCLN),U,10)=4 S IBCPTN=+$P(RCLN,U,11) I +IBCPTN S IBMOD=$$GETMOD^IBEFUNC(IBIFN,IBCPTN,1) ;Linked
"RTN","IBCF33",134,0)
 I IBMOD="",$P(RCLN,U,14)'="" S IBMOD=$TR($P(RCLN,U,14),";",",") ; Not linked or linked, but manually entered modifiers only
"RTN","IBCF33",135,0)
MODQ Q IBMOD
"RTN","IBCF33",136,0)
 ;
"RTN","IBCF33",137,0)
DATE45(IBIFN,IBXDATA,IBDATE) ; What prints in the service date box of UB-04
"RTN","IBCF33",138,0)
 ; INPUT:
"RTN","IBCF33",139,0)
 ;   IBIFN = ien of bill
"RTN","IBCF33",140,0)
 ;   IBDATE = the default outpt service date
"RTN","IBCF33",141,0)
 ; OUTPUT:
"RTN","IBCF33",142,0)
 ;   IBXDATA = the output formatter array with the service dates
"RTN","IBCF33",143,0)
 ;             (pass by reference)
"RTN","IBCF33",144,0)
 N Z,Z0,IBR,IBIN
"RTN","IBCF33",145,0)
 S IBIN=$$INPAT^IBCEF(IBXIEN,1)
"RTN","IBCF33",146,0)
 F Z=1:1 Q:'$D(^TMP($J,"IBC-RC",Z))  S IBR=^(Z) D
"RTN","IBCF33",147,0)
 . S Z0=$S(+IBR=1&'IBIN&(+$P(IBR,U,2)'=1):$S($P(IBR,U,12):$P(IBR,U,12),1:$G(IBDATE)),+IBR=2:$E($P(IBR,U,2),46,52),1:$E($P(IBR,U,2),41,47))
"RTN","IBCF33",148,0)
 . S:Z'>22 IBXDATA(Z)=Z0 D:Z>22 CKREV^IBCEF3(Z,Z0)
"RTN","IBCF33",149,0)
 Q
"RTN","IBCF33",150,0)
 ;
"RTN","IBCSC8")
0^11^B9956514^B9775351
"RTN","IBCSC8",1,0)
IBCSC8 ;ALB/MJB/AAS - MCCR SCREEN 8 (BILLING - CLAIM INFORMATION SCREEN) ;27 MAY 88 10:15
"RTN","IBCSC8",2,0)
 ;;2.0;INTEGRATED BILLING;**432,447,488,577**;21-MAR-94;Build 38
"RTN","IBCSC8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC8",4,0)
 ;
"RTN","IBCSC8",5,0)
 ;
"RTN","IBCSC8",6,0)
EN D ^IBCSCU S IBSR=8,IBSR1="" S IB("U2")=$G(^DGCR(399,IBIFN,"U2")),IB("U4")=$G(^DGCR(399,IBIFN,"U4")),IB("U5")=$G(^DGCR(399,IBIFN,"U5")),IB("U6")=$G(^DGCR(399,IBIFN,"U6")),IB("U8")=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCSC8",7,0)
 D H^IBCSCU
"RTN","IBCSC8",8,0)
 ; DEM - IBV is set in EDI^IBCB => S IBAC=1,IBV=0 D EN G Q:'IBAC1,EDI
"RTN","IBCSC8",9,0)
 ;       IBV=0, or IBV=1 as a flag if field on screen is required
"RTN","IBCSC8",10,0)
 ;       or not. <Field #> indicates field is not required.
"RTN","IBCSC8",11,0)
 ;       [Field #]
"RTN","IBCSC8",12,0)
 ; Make some sections NOT available for UB04 form
"RTN","IBCSC8",13,0)
 S IBT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC8",14,0)
 ;S IBV1=$S(IBT=3:"001011",IBV:"111111",1:"000000")
"RTN","IBCSC8",15,0)
 S IBV1=$S(IBT=3:"001011111",IBV:"111111111",1:"000000000")   ; IB*2.0*488 (vd)
"RTN","IBCSC8",16,0)
 ;
"RTN","IBCSC8",17,0)
 S Z=1,IBW=1 X IBWW W " COB Non-Covered Charge Amt: " S X=$P(IB("U4"),U),X2="2$" I X'="" D COMMA^%DTC W X
"RTN","IBCSC8",18,0)
 S Z=2 X IBWW W " Property Casualty Information"
"RTN","IBCSC8",19,0)
 ;W !,?4,"Claim Number:  ",$P(IB("U4"),U,2),?41,"Contact Name:  ",$P(IB("U4"),U,9)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC8",20,0)
 W !,?4,"Claim Number:  ",$P(IB("U4"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC8",21,0)
 W !,?4,"Contact Name:  ",$P(IB("U4"),U,9)  ;JRA IB*2.0*577
"RTN","IBCSC8",22,0)
 W !,?4,"Date of 1st Contact:  ",$$FMTE^XLFDT($P(IB("U4"),U,3)),?41,"Contact Phone:  ",$P(IB("U4"),U,10),"  ",$P(IB("U4"),U,11)
"RTN","IBCSC8",23,0)
 ; Start IB*2.0*447 BI
"RTN","IBCSC8",24,0)
 ;S Z=3 X IBWW W " Ambulance Information"
"RTN","IBCSC8",25,0)
 ;W !,?41,"D/O Location: ",$P(IB("U6"),U)
"RTN","IBCSC8",26,0)
 ;W !,?4,"P/U Address1:  ",$P(IB("U5"),U,2),?41,"D/O Address1:  ",$P(IB("U6"),U,2)
"RTN","IBCSC8",27,0)
 ;W !,?4,"P/U Address2:  ",$P(IB("U5"),U,3),?41,"D/O Address2:  ",$P(IB("U6"),U,3)
"RTN","IBCSC8",28,0)
 ;W !,?4,"P/U City:  ",$P(IB("U5"),U,4),?41,"D/O City:  ",$P(IB("U6"),U,4)
"RTN","IBCSC8",29,0)
 ;W !,?4,"P/U State/Zip:  " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)
"RTN","IBCSC8",30,0)
 ;W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)
"RTN","IBCSC8",31,0)
 ;W ?41,"D/O State/Zip:  " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)
"RTN","IBCSC8",32,0)
 ;W:$P(IB("U6"),U,6)]"" "/"_$P(IB("U6"),U,6)
"RTN","IBCSC8",33,0)
 ;;W !,?4,"P/U Country/SubDiv:  ",$P(IB("U5"),U),?41,"D/O Country/SubDiv:  "
"RTN","IBCSC8",34,0)
 S Z=3 X IBWW W " Surgical Codes for Anesthesia Claims"
"RTN","IBCSC8",35,0)
 W !,?4,"Primary Code:  " W:$P(IB("U4"),U,7)'="" $P($G(^ICPT($P(IB("U4"),U,7),0)),U)
"RTN","IBCSC8",36,0)
 W ?41,"Secondary Code:  " W:$P(IB("U4"),U,8)'="" $P($G(^ICPT($P(IB("U4"),U,8),0)),U)
"RTN","IBCSC8",37,0)
 S Z=4 X IBWW W " Paperwork Attachment Information"
"RTN","IBCSC8",38,0)
 W !,?4,"Report Type:  " W:$P(IB("U8"),U,2)'="" $P($G(^IBE(353.3,$P(IB("U8"),U,2),0)),U)
"RTN","IBCSC8",39,0)
 W ?41,"Transmission Method:  ",$P(IB("U8"),U,3)
"RTN","IBCSC8",40,0)
 W !,?4,"Attachment Control #:  ",$P(IB("U8"),U)
"RTN","IBCSC8",41,0)
 S Z=5 X IBWW W " Disability Start Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,4)),?41,"Disability End Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,5))
"RTN","IBCSC8",42,0)
 S Z=6 X IBWW W " Assumed Care Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,13)),?41,"Relinquished Care Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,14))
"RTN","IBCSC8",43,0)
 ; End IB*2.0*447 BI
"RTN","IBCSC8",44,0)
 ;
"RTN","IBCSC8",45,0)
 ;/ Beginning of IB*2.0*488 - code moved from IBCSC10H (vd)
"RTN","IBCSC8",46,0)
 S Z=7 X IBWW W " Special Program:  " I $P(IB("U2"),U,16)'="" S IBZ=$$EXPAND^IBTRE(399,238,$P(IB("U2"),U,16)) W $S(IBZ'="":IBZ,$$WNRBILL^IBEFUNC(IBIFN):"31",1:"")
"RTN","IBCSC8",47,0)
 S Z=8 X IBWW W " Homebound:  ",$$EXPAND^IBTRE(399,236,$P(IB("U2"),U,14))
"RTN","IBCSC8",48,0)
 S Z=9 X IBWW W " Date Last Seen:  ",$$EXPAND^IBTRE(399,237,$P(IB("U2"),U,15))
"RTN","IBCSC8",49,0)
 ;/ End of IB*2.0*488 (vd)
"RTN","IBCSC8",50,0)
REV G ^IBCSCP
"RTN","IBCSC8",51,0)
 ;IBCSC8
"RTN","IBCSC9")
0^10^B9101884^B7536045
"RTN","IBCSC9",1,0)
IBCSC9 ;ALB/BI - MCCR SCREEN 9 (AMBULANCE INFO)  ;11 MAY 2011 10:20
"RTN","IBCSC9",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,447,473,577**;11-MAY-2011;Build 38
"RTN","IBCSC9",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC9",4,0)
 ;
"RTN","IBCSC9",5,0)
EN ; Main Entry Point
"RTN","IBCSC9",6,0)
 N IBACI,IBACIX,IB,IBT
"RTN","IBCSC9",7,0)
 D ^IBCSCU
"RTN","IBCSC9",8,0)
 S IBT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC9",9,0)
 S IBSR=9,IBSR1="",IBV1=$S(IBT=3:"11",IBV:"11",1:"00")
"RTN","IBCSC9",10,0)
 S IB("U")=$G(^DGCR(399,IBIFN,"U"))
"RTN","IBCSC9",11,0)
 S IB("U1")=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBCSC9",12,0)
 S IB("U4")=$G(^DGCR(399,IBIFN,"U4"))
"RTN","IBCSC9",13,0)
 S IB("U5")=$G(^DGCR(399,IBIFN,"U5"))
"RTN","IBCSC9",14,0)
 S IB("U6")=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCSC9",15,0)
 S IB("U7")=$G(^DGCR(399,IBIFN,"U7"))
"RTN","IBCSC9",16,0)
 S IB("U8")=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCSC9",17,0)
 M IB("U9")=^DGCR(399,IBIFN,"U9")
"RTN","IBCSC9",18,0)
 D H^IBCSCU
"RTN","IBCSC9",19,0)
 S Z=1,IBW=1 X IBWW W " Ambulance Transport Data"
"RTN","IBCSC9",20,0)
 ;JRA IB*2.0*577 Rearrange Field order so that expanded 55 char PU/DO Address1 & PU/DO Address2 can be displayed
"RTN","IBCSC9",21,0)
 ;W !,?41,"D/O Location: ",$P(IB("U6"),U)  ;JRA ';' IB*2.0*577
"RTN","IBCSC9",22,0)
 ;W !,?4,"P/U Address1: ",$P(IB("U5"),U,2),?41,"D/O Address1: ",$P(IB("U6"),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",23,0)
 ;W !,?4,"P/U Address2: ",$P(IB("U5"),U,3),?41,"D/O Address2: ",$P(IB("U6"),U,3)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",24,0)
 ;W !,?4,"P/U City: ",$P(IB("U5"),U,4),?41,"D/O City: ",$P(IB("U6"),U,4)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",25,0)
 ;W !,?4,"P/U State/Zip: " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",26,0)
 ;W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",27,0)
 ;W ?41,"D/O State/Zip: " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",28,0)
 W !,?4,"P/U Address1: ",$P(IB("U5"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",29,0)
 W !,?4,"P/U Address2: ",$P(IB("U5"),U,3)  ;JRA IB*2.0*577
"RTN","IBCSC9",30,0)
 W !,?4,"P/U City: ",$P(IB("U5"),U,4)  ;JRA IB*2.0*577
"RTN","IBCSC9",31,0)
 W ?41,"P/U State/Zip: " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",32,0)
 W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)  ;JRA IB*2.0*577
"RTN","IBCSC9",33,0)
 W !,?4,"D/O Location: ",$P(IB("U6"),U)  ;JRA IB*2.0*577
"RTN","IBCSC9",34,0)
 W !,?4,"D/O Address1: ",$P(IB("U6"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",35,0)
 W !,?4,"D/O Address2: ",$P(IB("U6"),U,3)  ;JRA IB*2.0*577
"RTN","IBCSC9",36,0)
 W !,?4,"D/O City: ",$P(IB("U6"),U,4)  ;JRA IB*2.0*577
"RTN","IBCSC9",37,0)
 W ?41,"D/O State/Zip: " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",38,0)
 W:$P(IB("U6"),U,6)]"" "/"_$P(IB("U6"),U,6)
"RTN","IBCSC9",39,0)
 W !,?4,"Patient Weight: ",$P(IB("U7"),U,1),?41,"Transport Distance: ",$P(IB("U7"),U,3)
"RTN","IBCSC9",40,0)
 W !,?4,"Transport Reason: " I $P(IB("U7"),U,2)'="" D IBWP($$GET1^DIQ(353.4,$P(IB("U7"),U,2)_",",.02),22,55)
"RTN","IBCSC9",41,0)
 W !,?4,"R/T Purpose: " D IBWP($P(IB("U7"),U,4),17,60)
"RTN","IBCSC9",42,0)
 W !,?4,"Stretcher Purpose: " D IBWP($P(IB("U7"),U,5),23,54)
"RTN","IBCSC9",43,0)
 S Z=2,IBW=2 X IBWW W " Ambulance Certification Data"
"RTN","IBCSC9",44,0)
 W !,?4,"Condition Indicator:"
"RTN","IBCSC9",45,0)
 S IBACIX=0
"RTN","IBCSC9",46,0)
 F  S IBACIX=$O(IB("U9",IBACIX)) Q:+IBACIX=0  D
"RTN","IBCSC9",47,0)
 . S IBACI=IB("U9",IBACIX,0)
"RTN","IBCSC9",48,0)
 . W ?25,$$GET1^DIQ(353.5,IBACI_",",.01)," - ",$$GET1^DIQ(353.5,IBACI_",",.02),!
"RTN","IBCSC9",49,0)
 K IB("U9")
"RTN","IBCSC9",50,0)
 W !
"RTN","IBCSC9",51,0)
 G ^IBCSCP
"RTN","IBCSC9",52,0)
 Q
"RTN","IBCSC9",53,0)
 ;
"RTN","IBCSC9",54,0)
IBWP(IBX,IBLM,IBRM) ;
"RTN","IBCSC9",55,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",56,0)
 N X,Y,DIWF,DIWL,DIWR S X=IBX
"RTN","IBCSC9",57,0)
 S DIWL=1,DIWR=IBRM,DIWF="" D ^DIWP
"RTN","IBCSC9",58,0)
 I $D(^UTILITY($J,"W")) S Y=0 F  S Y=$O(^UTILITY($J,"W",1,Y)) Q:'Y  W:Y>1 !,?(IBLM) W $G(^UTILITY($J,"W",1,Y,0))
"RTN","IBCSC9",59,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",60,0)
 Q
"RTN","IBCSC9",61,0)
 ;
"RTN","IBCSC9",62,0)
SCREEN1(DA1) ;
"RTN","IBCSC9",63,0)
 N A,RESPONSE S RESPONSE=0
"RTN","IBCSC9",64,0)
 I +$P($G(^DGCR(399,DA1,"U9",0)),U,4)<5 S RESPONSE=1 Q RESPONSE
"RTN","IBCSC9",65,0)
 S A(1,"F")="!?35",A(1)="Maximum of 5 Condition Indicators allowed"
"RTN","IBCSC9",66,0)
 D EN^DDIOL(.A)
"RTN","IBCSC9",67,0)
 Q RESPONSE
"RTN","IBCSC9",68,0)
 ;IBCSC9
"RTN","IBCU7")
0^1^B116490042^B113207672
"RTN","IBCU7",1,0)
IBCU7 ;ALB/AAS - INTERCEPT SCREEN INPUT OF PROCEDURE CODES ;29-OCT-91
"RTN","IBCU7",2,0)
 ;;2.0;INTEGRATED BILLING;**62,52,106,125,51,137,210,245,228,260,348,371,432,447,488,461,516,522,577**;21-MAR-94;Build 38
"RTN","IBCU7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU7",4,0)
 ;
"RTN","IBCU7",5,0)
 ;MAP TO DGCRU7
"RTN","IBCU7",6,0)
 ;
"RTN","IBCU7",7,0)
CHKX ;  -interception of input x from Additional Procedure input
"RTN","IBCU7",8,0)
 G:X=" " CHKXQ
"RTN","IBCU7",9,0)
 I $$INPAT^IBCEF(DA(1)),'$P($G(^IBE(350.9,1,1)),"^",15),X'?1A1.2N D  G CHKXQ
"RTN","IBCU7",10,0)
 . K X
"RTN","IBCU7",11,0)
 . D EN^DDIOL("Site param does not allow entry of non-PTF procedures") ;Fileman error here will be: The previous error occurred when performing an action specified in a Pre-lookup transform (7.5 node).
"RTN","IBCU7",12,0)
 G:'$D(^UTILITY($J,"IB")) CHKXQ
"RTN","IBCU7",13,0)
 ;S M=($A($E(X,1))-64),S=+$E(X,2) Q:'$G(^UTILITY($J,"IB",M,S))  S X="`"_+^(S)
"RTN","IBCU7",14,0)
 S M=0 I X?1A1.2N S N=$G(^UTILITY($J,"IB","B",X)) S M=+N,S=+$P(N,U,2),P=X S S=$G(^UTILITY($J,"IB",M,S)) I +S S X="`"_+S I $P(N,U,3)="N" S X=""""_X_"""" S $P(^UTILITY($J,"IB","B",P),U,3)="Y"
"RTN","IBCU7",15,0)
 I +M,$D(DGPROCDT),DGPROCDT'=$P($G(^UTILITY($J,"IB",M,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) W !!,"Procedure Date: " S Y=DGPROCDT X ^DD("DD") W Y,!
"RTN","IBCU7",16,0)
CHKXQ Q
"RTN","IBCU7",17,0)
 ;
"RTN","IBCU7",18,0)
CODMUL ;Date oriented entry of procedure
"RTN","IBCU7",19,0)
DELASK I $D(IBZ20),IBZ20,IBZ20'=$P(^DGCR(399,IBIFN,0),U,9) S %=2 W !,"SINCE THE PROCEDURE CODING METHOD HAS BEEN CHANGED, DO YOU WANT TO DELETE ALL",!,"PROCEDURE CODES IN THIS BILL"
"RTN","IBCU7",20,0)
 I  D YN^DICN Q:%=-1  D:%=1 DELADD I %Y?1."?" W !!,"If you answer 'Yes', all procedure codes will be DELETED from this bill.",! G DELASK
"RTN","IBCU7",21,0)
 K %,%Y,DA,IBZ20,DIK ;W !,"Procedure Entry:"
"RTN","IBCU7",22,0)
 ;
"RTN","IBCU7",23,0)
CODDT I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",24,0)
 I $P($G(^DGCR(399,IBIFN,0)),"^",5)<3 S IBZTYPE=1 I $P($G(^UTILITY($J,"IB",1,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) D ASKCOD
"RTN","IBCU7",25,0)
 S X=$$PRCDIV^IBCU71(IBIFN) I +X W !!,$P(X,U,2),!
"RTN","IBCU7",26,0)
 N Z,Z0 S Z=$G(^DGCR(399,IBIFN,"U")),Z0=$$FMTE^XLFDT($P(Z,U),"2D")_"-"_$$FMTE^XLFDT($P(Z,U,2),"2D")
"RTN","IBCU7",27,0)
 W !,"Select PROCEDURE DATE"_$S($TR(Z0,"-")'="":" ("_Z0_")",1:"")_": " R X:DTIME G:'$T!("^"[X) CODQ D:X["?" CODHLP
"RTN","IBCU7",28,0)
 S IBEX=0 D  ; Get procedure date
"RTN","IBCU7",29,0)
 . I X=" ",$D(DGPROCDT),DGPROCDT?7N S Y=DGPROCDT D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",30,0)
 . I X=" ",+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4) S (DGPROCDT,Y)=$O(^DGCR(399,IBIFN,"OP",0)) D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",31,0)
 . S %DT="EXP",%DT(0)=-DT D ^%DT K %DT I Y<1 S IBEX=1 Q
"RTN","IBCU7",32,0)
 . I '$$OPV2^IBCU41(Y,IBIFN,1) S IBEX=1 Q
"RTN","IBCU7",33,0)
 . S:'$G(IBZTYPE) X=$$OPV^IBCU41(Y,IBIFN) S DGPROCDT=Y
"RTN","IBCU7",34,0)
 I 'IBEX D ASKCOD,ADDCPT^IBCU71:$D(DGCPT)
"RTN","IBCU7",35,0)
 K IBEX
"RTN","IBCU7",36,0)
 G CODDT
"RTN","IBCU7",37,0)
 ;
"RTN","IBCU7",38,0)
ASKCOD N Z,Z0,DA,IBACT,IBQUIT,IBLNPRV  ;WCJ;2.0*432
"RTN","IBCU7",39,0)
 N IBPOPOUT  S IBPOPOUT=0  ; IB*2.0*447 BI
"RTN","IBCU7",40,0)
 K DGCPT
"RTN","IBCU7",41,0)
 S DGCPT=0,DGCPTUP=$P($G(^IBE(350.9,1,1)),"^",19),DGADDVST=0,IBFT=$P($G(^DGCR(399,IBIFN,0)),"^",19)
"RTN","IBCU7",42,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S ^DGCR(399,IBIFN,"CP",0)=U_$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCU7",43,0)
 ;
"RTN","IBCU7",44,0)
 F  S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCU7",45,0)
 . S IBPOPOUT=0
"RTN","IBCU7",46,0)
 . D DICV ; restrict code type to PCM
"RTN","IBCU7",47,0)
 . S DIC("A")="   Select PROCEDURE: "
"RTN","IBCU7",48,0)
 . S DIC="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",49,0)
 . S DIC(0)="AEQMNL"
"RTN","IBCU7",50,0)
 . S DIC("S")="I '$D(DIV(""S""))&($P(^(0),U,2)=DGPROCDT)"
"RTN","IBCU7",51,0)
 . S DIC("DR")="1///^S X=DGPROCDT"
"RTN","IBCU7",52,0)
 . S DA(1)=IBIFN,DLAYGO=399
"RTN","IBCU7",53,0)
 . W ! D ^DIC I Y<1 S IBQUIT=1 Q
"RTN","IBCU7",54,0)
 . S IBPROCP=+Y
"RTN","IBCU7",55,0)
 . ; If we just added inactive code - it must be deleted.
"RTN","IBCU7",56,0)
 . S IBACT=0 ; Active flag
"RTN","IBCU7",57,0)
 . I Y["ICD0" S IBACT=$$ICD0ACT^IBACSV(+$P(Y,U,2),$$BDATE^IBACSV(IBIFN))
"RTN","IBCU7",58,0)
 . I Y["ICPT" S IBACT=$$CPTACT^IBACSV(+$P(Y,U,2),DGPROCDT)
"RTN","IBCU7",59,0)
 . S DGCPTNEW=$P(Y,"^",3) ;Was the procedure just added?
"RTN","IBCU7",60,0)
 . I DGCPTNEW,'IBACT D DELPROC Q
"RTN","IBCU7",61,0)
 . I 'IBACT W !,*7,"Warning:  Procedure code is inactive on this date",!
"RTN","IBCU7",62,0)
 . I DGCPTNEW,$D(^UTILITY($J,"IB")),$$INPAT^IBCEF(IBIFN),Y["ICPT(" D DATA^IBCU74(Y,.IBLNPRV)
"RTN","IBCU7",63,0)
 . S DGADDVST=$S(DGCPTNEW:1,$D(DGADDVST):DGADDVST,1:0)
"RTN","IBCU7",64,0)
 . N IBPRV,IBPRVO,IBPRVN
"RTN","IBCU7",65,0)
 . ;
"RTN","IBCU7",66,0)
 . ; Line level provider function by form type.
"RTN","IBCU7",67,0)
 . ;     CMS-1500 (FORM TYPE=2)
"RTN","IBCU7",68,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",69,0)
 . ;              and SUPERVISING PROVIDER.
"RTN","IBCU7",70,0)
 . ;     UB-04 (FORM TYPE=3)
"RTN","IBCU7",71,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",72,0)
 . ;              OPERATING PROVIDER, and OTHER OPERATING
"RTN","IBCU7",73,0)
 . ;              PROVIDER.
"RTN","IBCU7",74,0)
 . ;
"RTN","IBCU7",75,0)
 . ; Removed: Call to $$MAINPRV^IBCEU(IBIFN) is for claim
"RTN","IBCU7",76,0)
 . ;          level provider defaults.
"RTN","IBCU7",77,0)
 . ;     1. For new line level providers we don't need
"RTN","IBCU7",78,0)
 . ;        or want default claim level provider
"RTN","IBCU7",79,0)
 . ;        (requirement).
"RTN","IBCU7",80,0)
 . ;     2. We don't want to default claim level to
"RTN","IBCU7",81,0)
 . ;        line level provider (requirement).
"RTN","IBCU7",82,0)
 . ;
"RTN","IBCU7",83,0)
 . K DIC("V")  ; DEM;432 - KILL DIC("V") because this was for previous variable pointer use.
"RTN","IBCU7",84,0)
 . ;
"RTN","IBCU7",85,0)
 . N IBPROCSV  ; DEM;432 - Variable IBPROCSV is variable to preserve value of 'Y', which is procedure code info returned by call to ^DIC.
"RTN","IBCU7",86,0)
 . S IBPROCSV=Y  ; DEM;432 - Preserve value of Y for after calls to FileMan (Y = procedure code info returned by call to ^DIC).
"RTN","IBCU7",87,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",88,0)
 . ;
"RTN","IBCU7",89,0)
 . I IBPROCSV["ICD0" S DR=".01",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*461
"RTN","IBCU7",90,0)
 . I IBPROCSV["ICPT" S DR=".01;16",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*447 BI
"RTN","IBCU7",91,0)
 . ;
"RTN","IBCU7",92,0)
 . S DR=""
"RTN","IBCU7",93,0)
 . ;
"RTN","IBCU7",94,0)
 . ; MRD;IB*2.0*516 - Added line level PROCEDURE DESCRIPTION field,
"RTN","IBCU7",95,0)
 . ; asked only if the procedure is an "NOC".
"RTN","IBCU7",96,0)
 . I IBPROCSV["ICPT",$$NOCPROC(IBPROCSV) D
"RTN","IBCU7",97,0)
 . . S DA=$P(IBPROCSV,"^")  ; The line# on the bill/claim.
"RTN","IBCU7",98,0)
 . . S DR=51                ; Field# for PROCEDURE DESCRIPTION
"RTN","IBCU7",99,0)
 . . D ^DIE
"RTN","IBCU7",100,0)
 . . Q
"RTN","IBCU7",101,0)
 . ;
"RTN","IBCU7",102,0)
 . D EN^IBCU7B ; DEM;432 - Call to line level provider user input.
"RTN","IBCU7",103,0)
 . S Y=IBPROCSV  ; DEM;432 - Restore value of Y after calls to FileMan
"RTN","IBCU7",104,0)
 . K IBPROCSV
"RTN","IBCU7",105,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",106,0)
 . I IBPOPOUT Q   ; IB*2.0*447 BI
"RTN","IBCU7",107,0)
 . S DR="" I Y["ICPT" S DR="6;5//"_$$DEFDIV(IBIFN)_";"
"RTN","IBCU7",108,0)
 . S DR=DR_$S(IBFT=2:"8;9;17//NO;",1:"")_3,DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($E($G(Y))=U)
"RTN","IBCU7",109,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",110,0)
 . ;
"RTN","IBCU7",111,0)
 . ; MRD;IB*2.0*516 - Allow user to add an NDC and Units.  Ask only if
"RTN","IBCU7",112,0)
 . ; coding system is not ICD and this is not a prescription claim. If
"RTN","IBCU7",113,0)
 . ; an NDC is entered, prompt for Units.
"RTN","IBCU7",114,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,9)'=9,'$$RXLINK^IBCSC5C(IBIFN,IBPROCP) D
"RTN","IBCU7",115,0)
 . . K DA
"RTN","IBCU7",116,0)
 . . S DA=IBPROCP,DA(1)=IBIFN,DIE="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",117,0)
 . . ; vd/Beginning IB*2*577 - Added the prompt for Unit/Basis of Measurement.
"RTN","IBCU7",118,0)
 . . ; S DR="53NDC NUMBER;I X="""" S Y="""";54//1"
"RTN","IBCU7",119,0)
 . . S DR="53NDC NUMBER;I X="""" S Y="""";52R~//UN;54R~QUANTITY//1"  ;Prompt for NDC, UN & amt.
"RTN","IBCU7",120,0)
 . . ; vd/Ending IB*2*577
"RTN","IBCU7",121,0)
 . . D ^DIE
"RTN","IBCU7",122,0)
 . . Q
"RTN","IBCU7",123,0)
 . ;
"RTN","IBCU7",124,0)
 . I IBFT=3 D:'$$INPAT^IBCEF(IBIFN) ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",125,0)
 . ; DEM;432 - Add Additional OB Minutes to DR string for call to DIE.
"RTN","IBCU7",126,0)
 . S DR=$$SPCUNIT(IBIFN,IBPROCP) S:DR["15;" DR=DR_"74Additional OB Minutes" D ^DIE ; miles/minutes/hours
"RTN","IBCU7",127,0)
 . ;
"RTN","IBCU7",128,0)
 . I IBFT=2 D
"RTN","IBCU7",129,0)
 .. D DX^IBCU72(IBIFN,IBPROCP)
"RTN","IBCU7",130,0)
 .. S X=$$ADDTNL(IBIFN,.DA)
"RTN","IBCU7",131,0)
 . Q:$$INPAT^IBCEF(IBIFN)  ;only outpatient bills
"RTN","IBCU7",132,0)
 . ;add procedures to array for download to PCE: dgcpt(assoc clinic,cpt,'provider^first dx^modifiers',cnt)=""
"RTN","IBCU7",133,0)
 . S DGPROC=$G(^DGCR(399,IBIFN,"CP",+DA,0))
"RTN","IBCU7",134,0)
 . S X=$P(DGPROC,U,18)_U_+$G(^IBA(362.3,+$P(DGPROC,U,11),0))_U_$P(DGPROC,U,15)
"RTN","IBCU7",135,0)
 . I 'DGCPTNEW,$P(DGPROC,"^",7)="" S DGCPTNEW=2
"RTN","IBCU7",136,0)
 . I DGCPTUP,DGCPTNEW S DGCPT=DGCPT+1 I $P(DGPROC,"^",7) S DGCPT($P(DGPROC,"^",7),+DGPROC,X,DGCPT)=""
"RTN","IBCU7",137,0)
 . ; add visit date to bill
"RTN","IBCU7",138,0)
 . I DGADDVST S (X,DINUM)=DGPROCDT D VFILE1^IBCOPV1 K DINUM,X,DGNOADD,DGADDVST
"RTN","IBCU7",139,0)
 ; Delete modifiers with only a sequence #, no code
"RTN","IBCU7",140,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=0 F  S Z0=$O(^DGCR(399,IBIFN,"CP",Z,"MOD",Z0)) Q:'Z0  I $P($G(^(Z0,0)),U,2)="" S DA(2)=IBIFN,DA(1)=Z,DA=Z0,DIK="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""MOD""," D ^DIK
"RTN","IBCU7",141,0)
 Q
"RTN","IBCU7",142,0)
CODQ K %DT,DGPROC,DIC,DIE,DR,DGPROCDT,IBPROCP,DLAYGO
"RTN","IBCU7",143,0)
 K IBFT,DGNOADD,DGADDVST,DGCPT,DGCPTUP,IBZTYPE,DGCPTNEW
"RTN","IBCU7",144,0)
 Q
"RTN","IBCU7",145,0)
 ;
"RTN","IBCU7",146,0)
DELPROC ; Remove the selected procedure, because of inactive status (cancel selection)
"RTN","IBCU7",147,0)
 W !!,*7,"The Procedure code is inactive on ",$$DAT1^IBOUTL(DGPROCDT),"."
"RTN","IBCU7",148,0)
 W !,"Please select another Procedure."
"RTN","IBCU7",149,0)
 S DA(1)=IBIFN,DA=+Y,DIK="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",150,0)
 D ^DIK
"RTN","IBCU7",151,0)
 Q
"RTN","IBCU7",152,0)
 ;
"RTN","IBCU7",153,0)
DELADD N Z,Z0,DA,DIK,X,Y
"RTN","IBCU7",154,0)
 S DA(1)=IBIFN
"RTN","IBCU7",155,0)
 ;Delete references to proc on rev codes
"RTN","IBCU7",156,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I Z0'="",$P(Z0,U,15)!$S($P(Z0,U,10)=3:$P(Z0,U,11),1:0) S DIE="^DGCR(399,"_DA(1)_",""RC"",",DA=Z,DR=".11///@;.15///@"_$S($P(Z0,U,8):"",1:";.08////1") D ^DIE
"RTN","IBCU7",157,0)
 S DIK="^DGCR(399,"_DA(1)_",""CP""," F DA=0:0 S DA=$O(^DGCR(399,DA(1),"CP",DA)) Q:'DA  D ^DIK
"RTN","IBCU7",158,0)
 S DGRVRCAL=1
"RTN","IBCU7",159,0)
 Q
"RTN","IBCU7",160,0)
 ;
"RTN","IBCU7",161,0)
DTMES ;Message if procedure date not in date range
"RTN","IBCU7",162,0)
 Q:'$D(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"U"))  S DGNODUU=^("U")
"RTN","IBCU7",163,0)
 G:X'<$P(DGNODUU,"^")&(X'>$P(DGNODUU,"^",2)) DTMESQ
"RTN","IBCU7",164,0)
 W *7,!!?3,"Date must be within STATEMENT COVERS FROM and STATEMENT COVERS TO period."
"RTN","IBCU7",165,0)
 S Y=$P(DGNODUU,"^") X ^DD("DD")
"RTN","IBCU7",166,0)
 W !?3,"Enter a date between ",Y," and " S Y=$P(DGNODUU,"^",2) X ^DD("DD") W Y,!
"RTN","IBCU7",167,0)
 K X,Y
"RTN","IBCU7",168,0)
DTMESQ K DGNODUU Q
"RTN","IBCU7",169,0)
 ;
"RTN","IBCU7",170,0)
CODHLP ;Display Additional Procedure codes
"RTN","IBCU7",171,0)
 N I,J,Y,IBMOD
"RTN","IBCU7",172,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) W !!?5,"No Codes Entered!",! Q
"RTN","IBCU7",173,0)
 W ! F I=0:0 S I=$O(^DGCR(399,IBIFN,"CP",I)) Q:'I  S Y=$G(^(I,0)) S Z=$$PRCNM^IBCSCH1($P(Y,"^",1),$P(Y,"^",2)) W !?5,$E($P(Z,"^",2),1,33),?40,"- ",$P(Z,"^") D
"RTN","IBCU7",174,0)
 . N IBY
"RTN","IBCU7",175,0)
 . S IBY=$P(Y,U,2)
"RTN","IBCU7",176,0)
 . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,I,1)
"RTN","IBCU7",177,0)
 . I IBMOD'="" S IBMOD="/"_IBMOD W IBMOD
"RTN","IBCU7",178,0)
 . W ?60,"Date: " S Y=IBY D DT^DIQ
"RTN","IBCU7",179,0)
 W !
"RTN","IBCU7",180,0)
 ;
"RTN","IBCU7",181,0)
 K Z Q
"RTN","IBCU7",182,0)
 ;
"RTN","IBCU7",183,0)
DICV I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",184,0)
 Q
"RTN","IBCU7",185,0)
 ;
"RTN","IBCU7",186,0)
DEFDIV(IBIFN) ; Find default division for bill IBIFN
"RTN","IBCU7",187,0)
 Q $P($G(^DG(40.8,+$P($G(^DGCR(399,IBIFN,0)),U,22),0)),U)
"RTN","IBCU7",188,0)
 ;
"RTN","IBCU7",189,0)
ADDTNL(IBIFN,DA) ;
"RTN","IBCU7",190,0)
 N DR,IBOK,X,Y,DIR
"RTN","IBCU7",191,0)
 S IBOK=1
"RTN","IBCU7",192,0)
 S DR="19T;50.09T;50.08T" D ^DIE  ; WCJ;IB*2.0*488 Added Ts
"RTN","IBCU7",193,0)
 ;I '($$FT^IBCEF(IBIFN)'=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",194,0)
 I '($$FT^IBCEF(IBIFN)=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",195,0)
 I $D(Y) S IBOK=0 G ADDTNLQ
"RTN","IBCU7",196,0)
 ;/Beginning of IB*2.0*488 (vd)
"RTN","IBCU7",197,0)
 ;S DIR("B")="NO",DIR("A")="EDIT CMS-1500 SPECIAL PROGRAM FIELDS and BOX 19?: ",DIR("A",1)=" ",DIR(0)="YA"
"RTN","IBCU7",198,0)
 ;S DIR("?",1)="Respond YES only if you need to add/edit data for chiropractic visits,"
"RTN","IBCU7",199,0)
 ;S DIR("?")="EPSDT care, or if billing for HOSPICE and attending is not a hospice employee."
"RTN","IBCU7",200,0)
 ;D ^DIR K DIR
"RTN","IBCU7",201,0)
 ;I Y'=1 S IBOK=0 G ADDTNLQ
"RTN","IBCU7",202,0)
 ;S DR="W !,""  <<EPSDT>>"";50.07;W !!,""  <<HOSPICE>>"";50.03"
"RTN","IBCU7",203,0)
 S DR="50.07T;50.03T"   ;WCJ;IB*2.0*488 added Ts
"RTN","IBCU7",204,0)
 ;/End of IB*2.0*488 (vd)
"RTN","IBCU7",205,0)
 D ^DIE
"RTN","IBCU7",206,0)
 W !
"RTN","IBCU7",207,0)
ADDTNLQ Q IBOK
"RTN","IBCU7",208,0)
 ;
"RTN","IBCU7",209,0)
XTRA1(Y) ;
"RTN","IBCU7",210,0)
 K Y
"RTN","IBCU7",211,0)
 Q
"RTN","IBCU7",212,0)
 ;
"RTN","IBCU7",213,0)
SPCUNIT(IBIFN,DA) ; return fields for special units if applicable, in DR form
"RTN","IBCU7",214,0)
 N IB0,IBCPT,IBDR,IBCT,IBFT,DFN S IBDR=""
"RTN","IBCU7",215,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27),IBFT=$P(IB0,U,19),DFN=$P(IB0,U,2)
"RTN","IBCU7",216,0)
 S IBCPT=$G(^DGCR(399,+$G(IBIFN),"CP",+$G(DA),0)) I IBCPT'["ICPT" G SPCUNTQ
"RTN","IBCU7",217,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,5,IBCT) S IBDR="15;" D SROMIN^IBCU74(IBIFN,DA) G SPCUNTQ ; minutes
"RTN","IBCU7",218,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,4,IBCT) S IBDR="21;" G SPCUNTQ ; miles
"RTN","IBCU7",219,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,6,IBCT) S IBDR="22//"_$$OBSHOUR^IBCU74(DFN,$P(IBCPT,U,2))_";" G SPCUNTQ ; hours
"RTN","IBCU7",220,0)
 I +IBFT=2,$P($G(^IBE(353.2,+$P(IBCPT,U,10),0)),U,2)="ANESTHESIA" S IBDR="15;" ; minutes
"RTN","IBCU7",221,0)
SPCUNTQ Q IBDR
"RTN","IBCU7",222,0)
 ;
"RTN","IBCU7",223,0)
ATTACH ; DEM;432 - Attachment control number.
"RTN","IBCU7",224,0)
 ; Ask if user wants to enter Attachment Control Number.
"RTN","IBCU7",225,0)
 N DIR,X,Y,DA,DIE,DR
"RTN","IBCU7",226,0)
 S DIR("A")="Enter Attachment Control Number"
"RTN","IBCU7",227,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCU7",228,0)
 D ^DIR
"RTN","IBCU7",229,0)
 Q:'Y
"RTN","IBCU7",230,0)
 ; User chose to enter Attachment Control Number.
"RTN","IBCU7",231,0)
 ; User enters Attachment Control fields.
"RTN","IBCU7",232,0)
 S DA(1)=IBIFN,DA=IBPROCP
"RTN","IBCU7",233,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"","
"RTN","IBCU7",234,0)
 S DR="71Report Type;72Report Transmission Method;70Attachment Control Number"
"RTN","IBCU7",235,0)
 D ^DIE
"RTN","IBCU7",236,0)
 Q
"RTN","IBCU7",237,0)
 ;
"RTN","IBCU7",238,0)
NOCPROC(IBPROCSV) ; MRD;IB*2.0*516 - Function to determine if procedure is an
"RTN","IBCU7",239,0)
 ; "NOC".  Returns '1' if "NOC" procedure, otherwise '0'.
"RTN","IBCU7",240,0)
 ;
"RTN","IBCU7",241,0)
 N IBNOC,IBPROCEX,IBPROCIN,IBPROCNM,IBX
"RTN","IBCU7",242,0)
 S IBNOC=0
"RTN","IBCU7",243,0)
 I $G(IBPROCSV)="" G NOCPROCQ
"RTN","IBCU7",244,0)
 S IBPROCIN=$P($P(IBPROCSV,U,2),";")
"RTN","IBCU7",245,0)
 I IBPROCIN="" G NOCPROCQ
"RTN","IBCU7",246,0)
 ;
"RTN","IBCU7",247,0)
 ; If procedure code ends in '99', quit with a '1'.
"RTN","IBCU7",248,0)
 ;
"RTN","IBCU7",249,0)
 S IBPROCEX=$P($G(^ICPT(IBPROCIN,0)),U,1)
"RTN","IBCU7",250,0)
 I $E(IBPROCEX,$L(IBPROCEX)-1,$L(IBPROCEX))=99 S IBNOC=1 G NOCPROCQ
"RTN","IBCU7",251,0)
 ;
"RTN","IBCU7",252,0)
 ; Pull procedure name, then check to see if it contains one of the
"RTN","IBCU7",253,0)
 ; specified strings.
"RTN","IBCU7",254,0)
 ;
"RTN","IBCU7",255,0)
 S IBPROCNM=$P($G(^ICPT(IBPROCIN,0)),U,2)
"RTN","IBCU7",256,0)
 I IBPROCNM'="",$$NOC(IBPROCNM) S IBNOC=1 G NOCPROCQ
"RTN","IBCU7",257,0)
 ;
"RTN","IBCU7",258,0)
 S IBX=0
"RTN","IBCU7",259,0)
 F  S IBX=$O(^ICPT(IBPROCIN,"D",IBX)) Q:'IBX  D  I IBNOC=1 Q
"RTN","IBCU7",260,0)
 . S IBTEXT=$G(^ICPT(IBPROCIN,"D",IBX,0))
"RTN","IBCU7",261,0)
 . I $G(^ICPT(IBPROCIN,"D",IBX+1,0))'="" S IBTEXT=IBTEXT_" "_$G(^ICPT(IBPROCIN,"D",IBX+1,0))
"RTN","IBCU7",262,0)
 . S IBNOC=$$NOC(IBTEXT)
"RTN","IBCU7",263,0)
 . Q
"RTN","IBCU7",264,0)
 ;
"RTN","IBCU7",265,0)
NOCPROCQ ; Quit out.
"RTN","IBCU7",266,0)
 Q IBNOC
"RTN","IBCU7",267,0)
 ;
"RTN","IBCU7",268,0)
NOC(IBTEXT) ; Quit with '1' if IBTEXT contains one of the specified strings.
"RTN","IBCU7",269,0)
 ;
"RTN","IBCU7",270,0)
 S IBTEXT=$TR(IBTEXT,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBCU7",271,0)
 ;
"RTN","IBCU7",272,0)
 I IBTEXT["NOT OTHERWISE" Q 1
"RTN","IBCU7",273,0)
 I IBTEXT["NOT ELSEWHERE" Q 1
"RTN","IBCU7",274,0)
 I IBTEXT["NOT LISTED" Q 1
"RTN","IBCU7",275,0)
 I IBTEXT["UNLISTED" Q 1
"RTN","IBCU7",276,0)
 I IBTEXT["UNSPECIFIED" Q 1
"RTN","IBCU7",277,0)
 I IBTEXT["UNCLASSIFIED" Q 1
"RTN","IBCU7",278,0)
 I IBTEXT["NON-SPECIFIED" Q 1
"RTN","IBCU7",279,0)
 I IBTEXT["NOS " Q 1
"RTN","IBCU7",280,0)
 I IBTEXT["NOS;" Q 1
"RTN","IBCU7",281,0)
 I IBTEXT["NOS." Q 1
"RTN","IBCU7",282,0)
 I IBTEXT["NOS," Q 1
"RTN","IBCU7",283,0)
 I IBTEXT["NOS/" Q 1
"RTN","IBCU7",284,0)
 I IBTEXT["(NOS)" Q 1
"RTN","IBCU7",285,0)
 I IBTEXT["NOC " Q 1
"RTN","IBCU7",286,0)
 I IBTEXT["NOC;" Q 1
"RTN","IBCU7",287,0)
 I IBTEXT["NOC." Q 1
"RTN","IBCU7",288,0)
 I IBTEXT["NOC," Q 1
"RTN","IBCU7",289,0)
 I IBTEXT["NOC/" Q 1
"RTN","IBCU7",290,0)
 I IBTEXT["(NOC)" Q 1
"RTN","IBCU7",291,0)
 ;
"RTN","IBCU7",292,0)
 ; Check if last three charcters are 'NOC' or 'NOS'.
"RTN","IBCU7",293,0)
 ;
"RTN","IBCU7",294,0)
 S IBTEXT=$E(IBTEXT,$L(IBTEXT)-2,$L(IBTEXT))
"RTN","IBCU7",295,0)
 I IBTEXT="NOC" Q 1
"RTN","IBCU7",296,0)
 I IBTEXT="NOS" Q 1
"RTN","IBCU7",297,0)
 ;
"RTN","IBCU7",298,0)
 Q 0
"RTN","IBJPS3")
0^9^B122000376^B111722417
"RTN","IBJPS3",1,0)
IBJPS3 ;BP/YMG - IB Site Parameters, Pay-To Provider ;20-Oct-2008
"RTN","IBJPS3",2,0)
 ;;2.0;INTEGRATED BILLING;**400,432,516,577**;21-MAR-94;Build 38
"RTN","IBJPS3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS3",4,0)
 ;
"RTN","IBJPS3",5,0)
 ; MRD;IB*2.0*516 - Added logic pertaining to TRICARE-Specific Pay-To
"RTN","IBJPS3",6,0)
 ; Providers, which entailed adding the parameter IBTCFLAG to many
"RTN","IBJPS3",7,0)
 ; procedures here and in ^IBJPS4.
"RTN","IBJPS3",8,0)
 ;
"RTN","IBJPS3",9,0)
EN(IBTCFLAG) ; -- main entry point for IBJP IB PAY-TO PROVIDERS
"RTN","IBJPS3",10,0)
 D EN^VALM("IBJP IB "_$S(IBTCFLAG:"TRICARE PAY-TO PROVS",1:"PAY-TO PROVIDERS"))
"RTN","IBJPS3",11,0)
 Q
"RTN","IBJPS3",12,0)
 ;
"RTN","IBJPS3",13,0)
HDR(IBTCFLAG) ; -- header code
"RTN","IBJPS3",14,0)
 ; Not setting VALMHDR causes this tag to be called upon return from every action, 
"RTN","IBJPS3",15,0)
 ; this is done to keep VALMSG displayed at all times, instead of the default message on the lower bar.
"RTN","IBJPS3",16,0)
 S VALMSG="* = Default "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-to provider"
"RTN","IBJPS3",17,0)
 Q
"RTN","IBJPS3",18,0)
 ;
"RTN","IBJPS3",19,0)
INIT(IBTCFLAG) ; -- init variables and list array
"RTN","IBJPS3",20,0)
 N IBCNT,IBLN,IBSTR,PIEN,PDATA,IBNODE
"RTN","IBJPS3",21,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",22,0)
 ;
"RTN","IBJPS3",23,0)
 S (VALMCNT,IBCNT,IBLN)=0
"RTN","IBJPS3",24,0)
 S PIEN=0 F  S PIEN=$O(^IBE(350.9,1,IBNODE,PIEN)) Q:'PIEN  D
"RTN","IBJPS3",25,0)
 .I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" Q
"RTN","IBJPS3",26,0)
 .S PDATA=$$PTG(PIEN,IBTCFLAG),IBCNT=IBCNT+1
"RTN","IBJPS3",27,0)
 .S IBSTR=$$SETSTR^VALM1(IBCNT_".","",2,4)
"RTN","IBJPS3",28,0)
 .I $$ISDFLT(PIEN,IBTCFLAG) S IBSTR=$$SETSTR^VALM1("*",IBSTR,7,1)
"RTN","IBJPS3",29,0)
 .S IBSTR=$$SETSTR^VALM1("Name     : "_$P(PDATA,U),IBSTR,8,45)
"RTN","IBJPS3",30,0)
 .;S IBSTR=$$SETSTR^VALM1("State   : "_$P(PDATA,U,8),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",31,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",32,0)
 .;S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,45)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",33,0)
 .S IBSTR=$$SETSTR^VALM1("Address 1: "_$P(PDATA,U,5),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
"RTN","IBJPS3",34,0)
 .;S IBSTR=$$SETSTR^VALM1("Zip Code: "_$P(PDATA,U,9),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",35,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",36,0)
 .;S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,45)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",37,0)
 .S IBSTR=$$SETSTR^VALM1("Address 2: "_$P(PDATA,U,6),"",8,66)  ;JRA IB*2.0*577 expand to 55 chars
"RTN","IBJPS3",38,0)
 .;S IBSTR=$$SETSTR^VALM1("Phone   : "_$P(PDATA,U,4),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",39,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",40,0)
 .S IBSTR=$$SETSTR^VALM1("City     : "_$P(PDATA,U,7),"",8,45)
"RTN","IBJPS3",41,0)
 .S IBLN=$$SET(IBLN,IBSTR)
"RTN","IBJPS3",42,0)
 .;S IBSTR=$$SETSTR^VALM1("Tax ID  : "_$P(PDATA,U,3),IBSTR,54,25)  ;JRA IB*2.0*577 ';'
"RTN","IBJPS3",43,0)
 .;JRA Move State, Zip Code, Phone and Tax ID under City to allow for longer address lines
"RTN","IBJPS3",44,0)
 .S IBSTR=$$SETSTR^VALM1("State    : "_$P(PDATA,U,8),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",45,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",46,0)
 .S IBSTR=$$SETSTR^VALM1("Zip Code : "_$P(PDATA,U,9),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",47,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",48,0)
 .S IBSTR=$$SETSTR^VALM1("Phone    : "_$P(PDATA,U,4),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",49,0)
 .S IBLN=$$SET(IBLN,IBSTR)  ;JRA IB*2.0*577
"RTN","IBJPS3",50,0)
 .S IBSTR=$$SETSTR^VALM1("Tax ID   : "_$P(PDATA,U,3),IBSTR,8,25)  ;JRA IB*2.0*577
"RTN","IBJPS3",51,0)
 .S IBLN=$$SET(IBLN,IBSTR),IBLN=$$SET(IBLN,"")
"RTN","IBJPS3",52,0)
 .S @VALMAR@("ZIDX",IBCNT,PIEN)=""
"RTN","IBJPS3",53,0)
 .Q
"RTN","IBJPS3",54,0)
 ;
"RTN","IBJPS3",55,0)
 I 'IBLN S IBLN=$$SET(IBLN,$$SETSTR^VALM1("No "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-To Providers defined.","",13,40))
"RTN","IBJPS3",56,0)
 ;
"RTN","IBJPS3",57,0)
 S VALMCNT=IBLN,VALMBG=1
"RTN","IBJPS3",58,0)
 Q
"RTN","IBJPS3",59,0)
 ;
"RTN","IBJPS3",60,0)
HELP ; -- help code
"RTN","IBJPS3",61,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS3",62,0)
 Q
"RTN","IBJPS3",63,0)
 ;
"RTN","IBJPS3",64,0)
EXIT ; -- exit code
"RTN","IBJPS3",65,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBJPS3",66,0)
 Q
"RTN","IBJPS3",67,0)
 ;
"RTN","IBJPS3",68,0)
PRVADD(IBTCFLAG) ; add new pay-to provider
"RTN","IBJPS3",69,0)
 N X,Y,DIC,DA,DLAYGO,DIE,DR,DIR,DIRUT,DUOUT,DTOUT,IEN,IBNODE
"RTN","IBJPS3",70,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",71,0)
 D FULL^VALM1
"RTN","IBJPS3",72,0)
 S VALMBCK="R"
"RTN","IBJPS3",73,0)
 S DIC="^IBE(350.9,1,"_IBNODE_",",DIC(0)="AELMQ",DA(1)=1,DLAYGO=350.9
"RTN","IBJPS3",74,0)
 S DIC("A")="Enter "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-to Provider: "
"RTN","IBJPS3",75,0)
 D ^DIC S IEN=+Y
"RTN","IBJPS3",76,0)
 I IEN'>0 Q
"RTN","IBJPS3",77,0)
 D PRVEDIT1
"RTN","IBJPS3",78,0)
 I $P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)="" D PRVDEL1
"RTN","IBJPS3",79,0)
 Q
"RTN","IBJPS3",80,0)
 ;
"RTN","IBJPS3",81,0)
PRVDEL(IBTCFLAG) ; delete a pay-to provider
"RTN","IBJPS3",82,0)
 N DA,DR,DIE,X,Y,DIR,DIRUT,DUOUT,DTOUT,I,IEN,DIVS,DFLT,IBNODE,IBDISP
"RTN","IBJPS3",83,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",84,0)
 S IBDISP=$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-To Provider"
"RTN","IBJPS3",85,0)
 S VALMBCK="R"
"RTN","IBJPS3",86,0)
 D FULL^VALM1
"RTN","IBJPS3",87,0)
 S IEN=$$SEL(IBTCFLAG) Q:'IEN
"RTN","IBJPS3",88,0)
 S DFLT=$$ISDFLT(IEN,IBTCFLAG)
"RTN","IBJPS3",89,0)
 I DFLT W !!,"WARNING: This is the default "_IBDISP_"."
"RTN","IBJPS3",90,0)
 D GETDIVS^IBJPS4(IEN,.DIVS,IBTCFLAG)
"RTN","IBJPS3",91,0)
 I 'DFLT D
"RTN","IBJPS3",92,0)
 .W !!,"The following divisions are currently associated with this "_IBDISP_": "
"RTN","IBJPS3",93,0)
 .S I="" F  S I=$O(DIVS(I)) Q:I=""  W !,?5,DIVS(I)
"RTN","IBJPS3",94,0)
 .W:'$D(DIVS) "None",! W !
"RTN","IBJPS3",95,0)
 .Q
"RTN","IBJPS3",96,0)
 S DIR("?")="Enter Yes to delete this "_IBDISP_"."
"RTN","IBJPS3",97,0)
 S DIR("A")="Delete "_IBDISP_" "_$P($G(^IBE(350.9,1,IBNODE,IEN,0)),U,2)
"RTN","IBJPS3",98,0)
 S DIR(0)="YO",DIR("B")="NO" D ^DIR Q:'Y
"RTN","IBJPS3",99,0)
 I DFLT S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////@" D ^DIE
"RTN","IBJPS3",100,0)
 I $D(DIVS) K DIK S DIK="^IBE(350.9,1,"_IBNODE_",",DA(1)=1,I="" F  S I=$O(DIVS(I)) Q:I=""  S DA=I D ^DIK
"RTN","IBJPS3",101,0)
 K DIK
"RTN","IBJPS3",102,0)
PRVDEL1 ;
"RTN","IBJPS3",103,0)
 N DIK
"RTN","IBJPS3",104,0)
 K DA
"RTN","IBJPS3",105,0)
 S DIK="^IBE(350.9,1,"_IBNODE_","
"RTN","IBJPS3",106,0)
 S DA(1)=1,DA=IEN
"RTN","IBJPS3",107,0)
 D ^DIK
"RTN","IBJPS3",108,0)
 D CLEAN^VALM10,INIT(IBTCFLAG)
"RTN","IBJPS3",109,0)
 Q
"RTN","IBJPS3",110,0)
 ;
"RTN","IBJPS3",111,0)
PRVEDIT(IBTCFLAG) ; edit existing pay-to provider
"RTN","IBJPS3",112,0)
 N IEN,IBNODE
"RTN","IBJPS3",113,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",114,0)
 S VALMBCK="R"
"RTN","IBJPS3",115,0)
 D FULL^VALM1
"RTN","IBJPS3",116,0)
 S IEN=$$SEL(IBTCFLAG) Q:'IEN
"RTN","IBJPS3",117,0)
PRVEDIT1 ;
"RTN","IBJPS3",118,0)
 N DIE,DA,DR,DIR,DIRUT,DUOUT,DTOUT,X,Y
"RTN","IBJPS3",119,0)
 S DIE="^IBE(350.9,1,"_IBNODE_","
"RTN","IBJPS3",120,0)
 S DA=IEN,DA(1)=1
"RTN","IBJPS3",121,0)
 S DR=".02T;1.01T;1.02T;1.03T;1.04T;1.05T;.04T;.03T;.05///@"
"RTN","IBJPS3",122,0)
 D ^DIE
"RTN","IBJPS3",123,0)
 S DIR("?")="Enter Yes to make this entry the default "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-to Provider."
"RTN","IBJPS3",124,0)
 S DIR("A")="Is this the default "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-To Provider"
"RTN","IBJPS3",125,0)
 S DIR(0)="YO"
"RTN","IBJPS3",126,0)
 S DIR("B")="YES" I $$GETDFLT(IBTCFLAG),'$$ISDFLT(IEN,IBTCFLAG) S DIR("B")="NO"
"RTN","IBJPS3",127,0)
 D ^DIR I Y K DA S DIE="^IBE(350.9,",DA=1,DR=$S(IBTCFLAG:"11.04",1:"11.03")_"////"_IEN D ^DIE
"RTN","IBJPS3",128,0)
 D CLEAN^VALM10,INIT(IBTCFLAG)
"RTN","IBJPS3",129,0)
 Q
"RTN","IBJPS3",130,0)
 ;
"RTN","IBJPS3",131,0)
SET(IBLN,IBSTR) ; add a line to display list
"RTN","IBJPS3",132,0)
 ; returns line number added
"RTN","IBJPS3",133,0)
 S IBLN=IBLN+1 D SET^VALM10(IBLN,IBSTR)
"RTN","IBJPS3",134,0)
 Q IBLN
"RTN","IBJPS3",135,0)
 ;
"RTN","IBJPS3",136,0)
ISDFLT(PIEN,IBTCFLAG) ; returns 1 if provider with ien PIEN is the default pay-to provider, 0 otherwise
"RTN","IBJPS3",137,0)
 Q:PIEN="" 0
"RTN","IBJPS3",138,0)
 Q $$GETDFLT(IBTCFLAG)=PIEN
"RTN","IBJPS3",139,0)
 ;
"RTN","IBJPS3",140,0)
GETDFLT(IBTCFLAG) ; returns ien of default pay-to provider
"RTN","IBJPS3",141,0)
 Q $P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3))
"RTN","IBJPS3",142,0)
 ;
"RTN","IBJPS3",143,0)
SEL(IBTCFLAG) ; select pay-to provider
"RTN","IBJPS3",144,0)
 ; returns ien of selected pay-to provider, or 0 if nothing is selected
"RTN","IBJPS3",145,0)
 N DIR,IEN,MAX,X,Y
"RTN","IBJPS3",146,0)
 S IEN=0
"RTN","IBJPS3",147,0)
 I VALMLST>4 D
"RTN","IBJPS3",148,0)
 . ; there is at least one entry
"RTN","IBJPS3",149,0)
 . S MAX=$O(@VALMAR@("ZIDX",""),-1) S:MAX=1 Y=1
"RTN","IBJPS3",150,0)
 . I MAX>1 D
"RTN","IBJPS3",151,0)
 . . S DIR("A")="Select "_$S(IBTCFLAG:"TRICARE ",1:"")_"Pay-To Provider (1-"_MAX_"): "
"RTN","IBJPS3",152,0)
 . . S DIR(0)="NA^"_1_":"_MAX_":0"
"RTN","IBJPS3",153,0)
 . . D ^DIR
"RTN","IBJPS3",154,0)
 . . Q
"RTN","IBJPS3",155,0)
 . S:+Y>0 IEN=$O(@VALMAR@("ZIDX",Y,""))
"RTN","IBJPS3",156,0)
 . Q
"RTN","IBJPS3",157,0)
 Q +IEN
"RTN","IBJPS3",158,0)
 ;
"RTN","IBJPS3",159,0)
PRVDATA(IBIFN) ; Return a string of Pay-To provider information in the following format
"RTN","IBJPS3",160,0)
 ;  [1] name
"RTN","IBJPS3",161,0)
 ;  [2] npi
"RTN","IBJPS3",162,0)
 ;  [3] tax id#
"RTN","IBJPS3",163,0)
 ;  [4] phone#
"RTN","IBJPS3",164,0)
 ;  [5] street 1
"RTN","IBJPS3",165,0)
 ;  [6] street 2
"RTN","IBJPS3",166,0)
 ;  [7] city
"RTN","IBJPS3",167,0)
 ;  [8] state abbreviation
"RTN","IBJPS3",168,0)
 ;  [9] zip
"RTN","IBJPS3",169,0)
 ; [10] list of IB error messages if any of this data is missing in IBXX1;IBXX2;IBXX3;IBXX4; format
"RTN","IBJPS3",170,0)
 ; [11] Institution (File 4) ien
"RTN","IBJPS3",171,0)
 ;
"RTN","IBJPS3",172,0)
 ; **NOTE:  pieces 12,13,14 are added to this string in output formatter data element #1624 for PRV1-1.5 for PRV1
"RTN","IBJPS3",173,0)
 ; pieces 2,3,5.  If pieces are added here to this string, then adjust the code in PRV1-1.5,2,3,5 accordingly.
"RTN","IBJPS3",174,0)
 ;
"RTN","IBJPS3",175,0)
 N DATA,IB0,EVDT,IBDIV,INST,PIEN,IBER,IBTCFLAG
"RTN","IBJPS3",176,0)
 S DATA="",IBER=""
"RTN","IBJPS3",177,0)
 ;
"RTN","IBJPS3",178,0)
 S IBTCFLAG=$$TRICARE^IBJPS4(IBIFN) ; Set IBTCFLAG to '1' if TRICARE claim, otherwise '0'.
"RTN","IBJPS3",179,0)
 ;
"RTN","IBJPS3",180,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBJPS3",181,0)
 S EVDT=$P(IB0,U,3)                             ; event date on claim
"RTN","IBJPS3",182,0)
 I 'EVDT S EVDT=DT
"RTN","IBJPS3",183,0)
 S IBDIV=+$P(IB0,U,22)                          ; division on claim
"RTN","IBJPS3",184,0)
 I 'IBDIV S IBDIV=$$PRIM^VASITE(EVDT)
"RTN","IBJPS3",185,0)
 I IBDIV'>0 S IBDIV=$$PRIM^VASITE()
"RTN","IBJPS3",186,0)
 I IBDIV'>0 G PRVDATX                           ; get out if no division
"RTN","IBJPS3",187,0)
 S INST=+$$SITE^VASITE(EVDT,IBDIV)              ; inst file 4 pointer
"RTN","IBJPS3",188,0)
 I INST'>0 S INST=+$$SITE^VASITE(DT,IBDIV)
"RTN","IBJPS3",189,0)
 I INST'>0 S INST=+$$SITE^VASITE()
"RTN","IBJPS3",190,0)
 I INST'>0 G PRVDATX                            ; get out if no institution
"RTN","IBJPS3",191,0)
 ;
"RTN","IBJPS3",192,0)
 ; check to see if this institution exists as a separate Pay-To Provider subfile entry
"RTN","IBJPS3",193,0)
 S PIEN=+$O(^IBE(350.9,1,$S(IBTCFLAG:29,1:19),"B",INST,""))
"RTN","IBJPS3",194,0)
 ;
"RTN","IBJPS3",195,0)
 I 'PIEN D  G PRVDATX      ; this institution does not exist in 350.9004/350.929.
"RTN","IBJPS3",196,0)
 . ; check to see if the default Pay-To provider information is defined (350.9;11.03/11.04)
"RTN","IBJPS3",197,0)
 . S PIEN=+$P($G(^IBE(350.9,1,11)),U,$S(IBTCFLAG:4,1:3)) Q:'PIEN
"RTN","IBJPS3",198,0)
 . S DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",199,0)
 . Q
"RTN","IBJPS3",200,0)
 ;
"RTN","IBJPS3",201,0)
 ; here PIEN exists and the institution pointer was found in the 350.9004 subfile
"RTN","IBJPS3",202,0)
 ; find parent pay-to provider
"RTN","IBJPS3",203,0)
 S PIEN=$$GETPROV^IBJPS4(PIEN,IBTCFLAG) S:PIEN DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",204,0)
 ;
"RTN","IBJPS3",205,0)
PRVDATX ;
"RTN","IBJPS3",206,0)
 I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
"RTN","IBJPS3",207,0)
 Q DATA
"RTN","IBJPS3",208,0)
 ;
"RTN","IBJPS3",209,0)
PTG(PIEN,IBTCFLAG) ; gather pay-to provider info
"RTN","IBJPS3",210,0)
 N N0,N1,IBORG,NPI,STIEN,STATE,Z,IBER,IBNODE
"RTN","IBJPS3",211,0)
 ;
"RTN","IBJPS3",212,0)
 S IBNODE=$$NODE^IBJPS4(+$G(IBTCFLAG))
"RTN","IBJPS3",213,0)
 ;
"RTN","IBJPS3",214,0)
 S Z="",IBER="",PIEN=+$G(PIEN)
"RTN","IBJPS3",215,0)
 ;
"RTN","IBJPS3",216,0)
 I '$D(^IBE(350.9,1,IBNODE,PIEN)) S IBER=IBER_"IB177;",$P(Z,U,10)=IBER G PTGX
"RTN","IBJPS3",217,0)
 S N0=$G(^IBE(350.9,1,IBNODE,PIEN,0))
"RTN","IBJPS3",218,0)
 S N1=$G(^IBE(350.9,1,IBNODE,PIEN,1))
"RTN","IBJPS3",219,0)
 ;
"RTN","IBJPS3",220,0)
 ; get the NPI# from the Institution file
"RTN","IBJPS3",221,0)
 S IBORG=+$P(N0,U,1),NPI=""
"RTN","IBJPS3",222,0)
 I IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)
"RTN","IBJPS3",223,0)
 ;
"RTN","IBJPS3",224,0)
 ; get the state abbreviation
"RTN","IBJPS3",225,0)
 S STIEN=+$P(N1,U,4),STATE=""
"RTN","IBJPS3",226,0)
 I STIEN S STATE=$$GET1^DIQ(5,STIEN_",",1)
"RTN","IBJPS3",227,0)
 ;
"RTN","IBJPS3",228,0)
 ; check for missing data
"RTN","IBJPS3",229,0)
 I '$L($P(N0,U,2)) S IBER=IBER_"IB178;"     ; missing name
"RTN","IBJPS3",230,0)
 I NPI'>0 S IBER=IBER_"IB179;"              ; missing npi
"RTN","IBJPS3",231,0)
 ; Patch 432 enh5:  The IB system shall no longer prevent users from authorizing (fatal error message) a claim because the system can not find the human providers SSN or EIN
"RTN","IBJPS3",232,0)
 ;I '$L($P(N0,U,3)) S IBER=IBER_"IB180;"     ; missing tax ID
"RTN","IBJPS3",233,0)
 I '$L($P(N1,U,1))!'$L($P(N1,U,3))!'$L(STATE)!'$L($P(N1,U,5)) S IBER=IBER_"IB181;"     ; missing address part(s)
"RTN","IBJPS3",234,0)
 ;
"RTN","IBJPS3",235,0)
 S Z=$P(N0,U,2)_U_NPI_U_$P(N0,U,3)_U_$P(N0,U,4)_U_$P(N1,U,1)_U_$P(N1,U,2)_U_$P(N1,U,3)_U_STATE_U_$P(N1,U,5)_U_IBER_U_IBORG
"RTN","IBJPS3",236,0)
PTGX ;
"RTN","IBJPS3",237,0)
 Q Z
"RTN","IBJPS3",238,0)
 ;
"RTN","IBJPS3",239,0)
PRVPHONE(IBIFN) ; Return Pay-to provider phone# for a given claim
"RTN","IBJPS3",240,0)
 ; IBIFN - internal claim# (optional parameter)
"RTN","IBJPS3",241,0)
 ; If IBIFN is not passed in, then the phone# from the default pay-to provider entry will be returned.
"RTN","IBJPS3",242,0)
 ; For example, AR option 'EDI Lockbox 3rd Party Exceptions' needs the phone# for the process of transfering an
"RTN","IBJPS3",243,0)
 ; EEOB to another site, but the claim# is not available to this process.
"RTN","IBJPS3",244,0)
 N PTPP,PIEN
"RTN","IBJPS3",245,0)
 S PTPP=""
"RTN","IBJPS3",246,0)
 I +$G(IBIFN) S PTPP=$P($$PRVDATA(IBIFN),U,4) G PRVPHNX
"RTN","IBJPS3",247,0)
 ;
"RTN","IBJPS3",248,0)
 S PIEN=+$P($G(^IBE(350.9,1,11)),U,3) I 'PIEN G PRVPHNX   ; no claim#, default pay-to provider
"RTN","IBJPS3",249,0)
 S PTPP=$P($$PTG(PIEN),U,4)                               ; phone#
"RTN","IBJPS3",250,0)
 ;
"RTN","IBJPS3",251,0)
PRVPHNX ;
"RTN","IBJPS3",252,0)
 Q PTPP
"RTN","IBJPS3",253,0)
 ;
"RTN","IBJPS3",254,0)
DEF(INST,DA,IBTCFLAG) ; This procedure is called by new style x-ref in
"RTN","IBJPS3",255,0)
 ; order to default name and address fields.
"RTN","IBJPS3",256,0)
 ; INST - IEN to file #4, Institution.  This is the value in the .01
"RTN","IBJPS3",257,0)
 ;      field of the Pay-to or TRICARE Pay-to Providers sub-fil.
"RTN","IBJPS3",258,0)
 ; DA - DA array as passed in from FileMan.  DA(1) should equal 1 since
"RTN","IBJPS3",259,0)
 ;      this is the IB site params and there is only 1 entry.  DA should
"RTN","IBJPS3",260,0)
 ;      equal the IEN to the pay-to provider multiple entry
"RTN","IBJPS3",261,0)
 ; This procedure is called only if a new institution is being added to
"RTN","IBJPS3",262,0)
 ; the sub-file or an entry in the sub-file is being changed from one
"RTN","IBJPS3",263,0)
 ; institution to another.
"RTN","IBJPS3",264,0)
 ;
"RTN","IBJPS3",265,0)
 NEW NAD,IENS,ST,STIEN,IBTAXID,IBFILE
"RTN","IBJPS3",266,0)
 ;
"RTN","IBJPS3",267,0)
 I '$G(INST) G DEFX
"RTN","IBJPS3",268,0)
 ;
"RTN","IBJPS3",269,0)
 I IBTCFLAG S IBFILE=350.929
"RTN","IBJPS3",270,0)
 E  S IBFILE=350.9004
"RTN","IBJPS3",271,0)
 ;
"RTN","IBJPS3",272,0)
 S ST=$$WHAT^XUAF4(INST,.02)             ; full state name
"RTN","IBJPS3",273,0)
 S STIEN=$$FIND1^DIC(5,,"BX",ST,"B")     ; state ien
"RTN","IBJPS3",274,0)
 ;
"RTN","IBJPS3",275,0)
 ; if the selected pay-to provider institution is the same as the main
"RTN","IBJPS3",276,0)
 ; facility name field from the IB site parameters, then also default
"RTN","IBJPS3",277,0)
 ; the federal tax ID# from the IB site parameters into the pay-to
"RTN","IBJPS3",278,0)
 ; provider tax ID# field.
"RTN","IBJPS3",279,0)
 S IBTAXID=""
"RTN","IBJPS3",280,0)
 I INST=$P($G(^IBE(350.9,1,0)),U,2) S IBTAXID=$P($G(^IBE(350.9,1,1)),U,5)
"RTN","IBJPS3",281,0)
 ;
"RTN","IBJPS3",282,0)
 S IENS=DA_",1,"
"RTN","IBJPS3",283,0)
 S NAD(IBFILE,IENS,.02)=$$WHAT^XUAF4(INST,100)     ; official VA name
"RTN","IBJPS3",284,0)
 S NAD(IBFILE,IENS,.03)=IBTAXID                    ; tax#
"RTN","IBJPS3",285,0)
 S NAD(IBFILE,IENS,.04)=""                         ; phone# - blank it out
"RTN","IBJPS3",286,0)
 S NAD(IBFILE,IENS,.05)=""                         ; parent - blank it out
"RTN","IBJPS3",287,0)
 S NAD(IBFILE,IENS,1.01)=$$WHAT^XUAF4(INST,1.01)   ; address line 1
"RTN","IBJPS3",288,0)
 S NAD(IBFILE,IENS,1.02)=$$WHAT^XUAF4(INST,1.02)   ; address line 2
"RTN","IBJPS3",289,0)
 S NAD(IBFILE,IENS,1.03)=$$WHAT^XUAF4(INST,1.03)   ; city
"RTN","IBJPS3",290,0)
 I STIEN S NAD(IBFILE,IENS,1.04)=STIEN             ; state
"RTN","IBJPS3",291,0)
 S NAD(IBFILE,IENS,1.05)=$$WHAT^XUAF4(INST,1.04)   ; zip
"RTN","IBJPS3",292,0)
 D FILE^DIE(,"NAD")
"RTN","IBJPS3",293,0)
DEFX ;
"RTN","IBJPS3",294,0)
 Q
"RTN","IBJPS3",295,0)
 ;
"RTN","IBJPS3",296,0)
DIFF(IBIFN,EDI) ; This function will determine if there are any differences between
"RTN","IBJPS3",297,0)
 ; the Billing Provider name and address and the Pay-to Provider name and address.
"RTN","IBJPS3",298,0)
 ; When these two are the same, then the Pay-to Provider information is
"RTN","IBJPS3",299,0)
 ; suppressed and is not printed or transmitted.
"RTN","IBJPS3",300,0)
 ; This function returns a 1 if differences are found, and 0 if they are the same.
"RTN","IBJPS3",301,0)
 ;
"RTN","IBJPS3",302,0)
 ; EDI=1 if this is being called for the electronic claim transmission
"RTN","IBJPS3",303,0)
 ; EDI=0 if this is being called for the printed UB-04 claim form
"RTN","IBJPS3",304,0)
 ;
"RTN","IBJPS3",305,0)
 N BPZ,PTP,DIFF,BPNAME,BPAD1,BPAD2,BPCITY,BPST,BPZIP,IBZ
"RTN","IBJPS3",306,0)
 S DIFF=0,EDI=+$G(EDI)
"RTN","IBJPS3",307,0)
 S BPZ=+$$B^IBCEF79(IBIFN)            ; billing provider ien to file 4
"RTN","IBJPS3",308,0)
 S PTP=$$UP^XLFSTR($$PRVDATA(IBIFN))  ; pay-to provider information
"RTN","IBJPS3",309,0)
 ;
"RTN","IBJPS3",310,0)
 ; for EDI claims, use the GETBP utility to get the billing provider data
"RTN","IBJPS3",311,0)
 I EDI D
"RTN","IBJPS3",312,0)
 . D GETBP^IBCEF79(IBIFN,"",BPZ,"DIFF",.IBZ)
"RTN","IBJPS3",313,0)
 . S BPNAME=$$UP^XLFSTR($G(IBZ("DIFF","NAME")))
"RTN","IBJPS3",314,0)
 . S BPAD1=$$UP^XLFSTR($G(IBZ("DIFF","ADDR1")))
"RTN","IBJPS3",315,0)
 . S BPAD2=$$UP^XLFSTR($G(IBZ("DIFF","ADDR2")))
"RTN","IBJPS3",316,0)
 . S BPCITY=$$UP^XLFSTR($G(IBZ("DIFF","CITY")))
"RTN","IBJPS3",317,0)
 . S BPST=$$UP^XLFSTR($G(IBZ("DIFF","ST")))
"RTN","IBJPS3",318,0)
 . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($G(IBZ("DIFF","ZIP"))))
"RTN","IBJPS3",319,0)
 . Q
"RTN","IBJPS3",320,0)
 ;
"RTN","IBJPS3",321,0)
 ; for printed UB claims, use the Institution file for FL-1 data
"RTN","IBJPS3",322,0)
 I 'EDI D
"RTN","IBJPS3",323,0)
 . S BPNAME=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,0))
"RTN","IBJPS3",324,0)
 . S BPAD1=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,1))
"RTN","IBJPS3",325,0)
 . S BPAD2=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,2))
"RTN","IBJPS3",326,0)
 . S BPCITY=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3C"))
"RTN","IBJPS3",327,0)
 . S BPST=$$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3S"))
"RTN","IBJPS3",328,0)
 . S BPZIP=$$NOPUNCT^IBCEF($$UP^XLFSTR($$GETFAC^IBCEP8(BPZ,0,"3Z")))
"RTN","IBJPS3",329,0)
 . Q
"RTN","IBJPS3",330,0)
 ;
"RTN","IBJPS3",331,0)
 I BPNAME'=$P(PTP,U,1) S DIFF=1 G DIFFX
"RTN","IBJPS3",332,0)
 I BPAD1'=$P(PTP,U,5) S DIFF=1 G DIFFX
"RTN","IBJPS3",333,0)
 I BPAD2'=$P(PTP,U,6) S DIFF=1 G DIFFX
"RTN","IBJPS3",334,0)
 I BPCITY'=$P(PTP,U,7) S DIFF=1 G DIFFX
"RTN","IBJPS3",335,0)
 I BPST'=$P(PTP,U,8) S DIFF=1 G DIFFX
"RTN","IBJPS3",336,0)
 I BPZIP'=$$NOPUNCT^IBCEF($P(PTP,U,9)) S DIFF=1 G DIFFX
"RTN","IBJPS3",337,0)
DIFFX ;
"RTN","IBJPS3",338,0)
 Q DIFF
"RTN","IBJPS3",339,0)
 ;
"RTN","IBJPS3",340,0)
MAINPRV(IBTCFLAG) ; Return Pay-To provider information for main VAMC
"RTN","IBJPS3",341,0)
 N DATA,IBER,IEN4,PIEN,IBNODE
"RTN","IBJPS3",342,0)
 S IBNODE=$$NODE^IBJPS4(IBTCFLAG)
"RTN","IBJPS3",343,0)
 S (DATA,IBER)="",IEN4=+$$SITE^VASITE I 'IEN4 G MAINPRVX
"RTN","IBJPS3",344,0)
 S PIEN=$O(^IBE(350.9,1,IBNODE,"B",IEN4,"")) I 'PIEN G MAINPRVX
"RTN","IBJPS3",345,0)
 I $P($G(^IBE(350.9,1,IBNODE,PIEN,0)),U,5)'="" G MAINPRVX   ; if this sub-entry is not a pay-to provider, then get out
"RTN","IBJPS3",346,0)
 S DATA=$$PTG(PIEN,IBTCFLAG)
"RTN","IBJPS3",347,0)
MAINPRVX ;
"RTN","IBJPS3",348,0)
 I DATA="" S IBER=IBER_"IB177;",$P(DATA,U,10)=IBER
"RTN","IBJPS3",349,0)
 Q DATA
"RTN","IBJPS3",350,0)
 ;
"RTN","IBY577PO")
0^^B6012728^n/a
"RTN","IBY577PO",1,0)
IBY577PO ;ALB/VD - POST-INSTALL FOR IB*2.0*577 ;22-FEB-2017
"RTN","IBY577PO",2,0)
 ;;2.0;INTEGRATED BILLING;**577**;21-MAR-94;Build 38
"RTN","IBY577PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY577PO",4,0)
 ;
"RTN","IBY577PO",5,0)
 ;
"RTN","IBY577PO",6,0)
 S IBA(2)="IB*2*577 Post-Install...",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY577PO",7,0)
 D RIT
"RTN","IBY577PO",8,0)
 D:$$PROD^XUPROD(1) EMAIL
"RTN","IBY577PO",9,0)
 S IBA(2)="IB*2*577 Post-Install Complete.",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY577PO",10,0)
 Q
"RTN","IBY577PO",11,0)
 ;
"RTN","IBY577PO",12,0)
RIT ; Recompile billing screen templates due to changes to Field #399,.21 cross-references.
"RTN","IBY577PO",13,0)
 N X,Y,DMAX,IBN
"RTN","IBY577PO",14,0)
 D MES^XPDUTL(">> Recompiling Input Templates for Billing Screens ...")
"RTN","IBY577PO",15,0)
 F IBN=1:1:10,"102","10H" D
"RTN","IBY577PO",16,0)
 .S X="IBXS"_$S(IBN=10:"A",IBN="102":"A2",IBN="10H":"AH",1:IBN),Y=$$FIND1^DIC(.402,,"X","IB SCREEN"_IBN,"B"),DMAX=$$ROUSIZE^DILF
"RTN","IBY577PO",17,0)
 .I Y D EN^DIEZ
"RTN","IBY577PO",18,0)
 D MES^XPDUTL("     Recompile Completed.")
"RTN","IBY577PO",19,0)
 Q
"RTN","IBY577PO",20,0)
 ;
"RTN","IBY577PO",21,0)
EMAIL ; Send an email message to MCCF Developer Team identifying which forms [#353] are being used by this site.
"RTN","IBY577PO",22,0)
 N SITE,SUBJ,MSG,XMTO,LN,GLO,GLB,II
"RTN","IBY577PO",23,0)
 D BMES^XPDUTL(">> Checking to see which Forms are in Use at this Site...")
"RTN","IBY577PO",24,0)
 D MES^XPDUTL("-------------")
"RTN","IBY577PO",25,0)
 D MES^XPDUTL("Sending email notification to MCCF Developers ... ")
"RTN","IBY577PO",26,0)
 S SITE=$$SITE^VASITE
"RTN","IBY577PO",27,0)
 S SUBJ="Form #7 "_$S($D(^IBE(353,7)):"*IS*",1:" is not")_" used at Station# "_$P(SITE,U,3)_" - "_$P(SITE,U,2)
"RTN","IBY577PO",28,0)
 S SUBJ=$E(SUBJ,1,65)
"RTN","IBY577PO",29,0)
 S MSG(1)="The following site:"
"RTN","IBY577PO",30,0)
 S MSG(2)=""
"RTN","IBY577PO",31,0)
 S MSG(3)="        Name: "_$P(SITE,U,2)
"RTN","IBY577PO",32,0)
 S MSG(4)="    Station#: "_$P(SITE,U,3)
"RTN","IBY577PO",33,0)
 S MSG(5)="      Domain: "_$G(^XMB("NETNAME"))
"RTN","IBY577PO",34,0)
 S MSG(6)="   Date/Time: "_$$FMTE^XLFDT($$NOW^XLFDT,"5ZPM")
"RTN","IBY577PO",35,0)
 S MSG(7)=""
"RTN","IBY577PO",36,0)
 S MSG(8)="uses the following Forms:"
"RTN","IBY577PO",37,0)
 S MSG(9)=""
"RTN","IBY577PO",38,0)
 S LN=9,II=0
"RTN","IBY577PO",39,0)
 F  S II=$O(^IBE(353,II)) Q:'+II  D
"RTN","IBY577PO",40,0)
 . S LN=LN+1,MSG(LN)="  Form # "_II_" - for '"_$P($G(^IBE(353,II,0)),"^",1)_"'"
"RTN","IBY577PO",41,0)
 S LN=LN+1,MSG(LN)=""
"RTN","IBY577PO",42,0)
 S LN=LN+1,MSG(LN)="---------------"
"RTN","IBY577PO",43,0)
 ;
"RTN","IBY577PO",44,0)
 S XMTO("Vito.D'Amico@domain.ext")=""
"RTN","IBY577PO",45,0)
 S XMTO("William.Jutzi@domain.ext")=""
"RTN","IBY577PO",46,0)
 S XMTO("John.Smith5@domain.ext")=""
"RTN","IBY577PO",47,0)
 ;
"RTN","IBY577PO",48,0)
 D SENDMSG^XMXAPI(DUZ,SUBJ,"MSG",.XMTO)
"RTN","IBY577PO",49,0)
 ;
"RTN","IBY577PO",50,0)
EMAILX ;
"RTN","IBY577PO",51,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY577PO",52,0)
 D CLEAN^DILF
"RTN","IBY577PO",53,0)
 Q
"RTN","IBY577PO",54,0)
 ;
"RTN","IBY577PR")
0^^B5196967^n/a
"RTN","IBY577PR",1,0)
IBY577PR ;AITC/VD - Pre-Installation for IB patch 577 ;06-APR-2017
"RTN","IBY577PR",2,0)
 ;;2.0;INTEGRATED BILLING;**577**;21-MAR-94;Build 38
"RTN","IBY577PR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY577PR",4,0)
 ;
"RTN","IBY577PR",5,0)
 ; delete all output formatter (O.F.) data elements included in build
"RTN","IBY577PR",6,0)
 D DELOF
"RTN","IBY577PR",7,0)
 Q
"RTN","IBY577PR",8,0)
 ;
"RTN","IBY577PR",9,0)
INC3508(Y) ; function to determine if entry in IB ERROR file (350.8) should be included in the build
"RTN","IBY577PR",10,0)
 ; Y - ien to file
"RTN","IBY577PR",11,0)
 N DATA,ENTRY,LN,OK,TAG
"RTN","IBY577PR",12,0)
 S OK=0,ENTRY=U_$P($G(^IBE(350.8,Y,0)),U,3)_U
"RTN","IBY577PR",13,0)
 F LN=2:1 S TAG="ENT3508+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,ENTRY) S OK=1 Q
"RTN","IBY577PR",14,0)
 Q OK
"RTN","IBY577PR",15,0)
 ;
"RTN","IBY577PR",16,0)
INCLUDE(FILE,Y) ; function to determine if O.F. entry should be included in the build
"RTN","IBY577PR",17,0)
 ; FILE=5,6,7 indicating file 364.x
"RTN","IBY577PR",18,0)
 ; Y=ien to file
"RTN","IBY577PR",19,0)
 NEW OK,LN,TAG,DATA
"RTN","IBY577PR",20,0)
 S OK=0
"RTN","IBY577PR",21,0)
 F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
"RTN","IBY577PR",22,0)
 Q OK
"RTN","IBY577PR",23,0)
 ;
"RTN","IBY577PR",24,0)
 ;Delete edited entries to insure clean install of new entries
"RTN","IBY577PR",25,0)
 ;Delete obsolete entries.
"RTN","IBY577PR",26,0)
DELOF   ; Delete included OF entries
"RTN","IBY577PR",27,0)
 NEW FILE,DIK,LN,TAG,TAGLN,DATA,PCE,DA,Y
"RTN","IBY577PR",28,0)
 F FILE=5,6,7 S DIK="^IBA(364."_FILE_"," D
"RTN","IBY577PR",29,0)
 . F TAG="ENT"_FILE,"DEL"_FILE D
"RTN","IBY577PR",30,0)
 .. F LN=2:1 S TAGLN=TAG_"+"_LN,DATA=$P($T(@TAGLN),";;",2) Q:DATA=""  D
"RTN","IBY577PR",31,0)
 ... F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  I $D(^IBA("364."_FILE,DA,0)) D ^DIK
"RTN","IBY577PR",32,0)
 Q
"RTN","IBY577PR",33,0)
 ;
"RTN","IBY577PR",34,0)
 ; Example for ENT5, ENT6, ENT7, DEL5, DEL6, and DEL7:
"RTN","IBY577PR",35,0)
 ;;^195^254^259^269^324^325^
"RTN","IBY577PR",36,0)
 ; Note:  Must have beginning and ending up-carat
"RTN","IBY577PR",37,0)
 ;
"RTN","IBY577PR",38,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",39,0)
 ; 364.5 entries modified:
"RTN","IBY577PR",40,0)
 ;
"RTN","IBY577PR",41,0)
ENT5 ; OF entries in file 364.5 to be included
"RTN","IBY577PR",42,0)
 ;
"RTN","IBY577PR",43,0)
 ;;
"RTN","IBY577PR",44,0)
 ;
"RTN","IBY577PR",45,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",46,0)
 ; 364.6 entries modified:
"RTN","IBY577PR",47,0)
 ;
"RTN","IBY577PR",48,0)
 ;   170 - SUB-2
"RTN","IBY577PR",49,0)
 ;   171 - SUB-3
"RTN","IBY577PR",50,0)
 ;   956 - OI1A-9
"RTN","IBY577PR",51,0)
 ;   957 - CI3A-4
"RTN","IBY577PR",52,0)
 ;   970 - SUB2-13 (was SUB-8)
"RTN","IBY577PR",53,0)
 ;  1930 - PRV1-7
"RTN","IBY577PR",54,0)
 ;  1931 - PRV1-8
"RTN","IBY577PR",55,0)
 ;  1940 - AMB-3
"RTN","IBY577PR",56,0)
 ;  1941 - AMB-4
"RTN","IBY577PR",57,0)
 ;  1968 - CI3A-9
"RTN","IBY577PR",58,0)
 ;  1975 - PT2-6
"RTN","IBY577PR",59,0)
 ;  2025 - OI4-12
"RTN","IBY577PR",60,0)
 ;  2371 - SUB-8
"RTN","IBY577PR",61,0)
 ;
"RTN","IBY577PR",62,0)
ENT6 ; O.F. entries in file 364.6 to be included
"RTN","IBY577PR",63,0)
 ;
"RTN","IBY577PR",64,0)
 ;;^170^171^956^957^970^1930^1931^1940^1941^1968^1975^2025^2371^
"RTN","IBY577PR",65,0)
 ;
"RTN","IBY577PR",66,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",67,0)
 ; 364.7 entries modified:
"RTN","IBY577PR",68,0)
 ;
"RTN","IBY577PR",69,0)
 ;  804 - COB1-2
"RTN","IBY577PR",70,0)
 ;  939 - PRF-23
"RTN","IBY577PR",71,0)
 ;  941 - PRF-25
"RTN","IBY577PR",72,0)
 ; 1015 - GEN-7
"RTN","IBY577PR",73,0)
 ; 1406 - INS-15
"RTN","IBY577PR",74,0)
 ; 1537 - OI6-7
"RTN","IBY577PR",75,0)
 ; 1538 - OI6-8
"RTN","IBY577PR",76,0)
 ; 1551 - OI6-10.1
"RTN","IBY577PR",77,0)
 ; 1927 - COB1-7
"RTN","IBY577PR",78,0)
 ; 1949 - INS-16
"RTN","IBY577PR",79,0)
 ; 1950 - INS-17
"RTN","IBY577PR",80,0)
 ; 1955 - OI1A-2
"RTN","IBY577PR",81,0)
 ; 1956 - SUB-8
"RTN","IBY577PR",82,0)
 ; 
"RTN","IBY577PR",83,0)
ENT7 ; O.F. entries in file 364.7 to be included
"RTN","IBY577PR",84,0)
 ;
"RTN","IBY577PR",85,0)
 ;;^804^939^941^1015^1406^1537^1538^1551^1927^1949^1950^1955^1956^
"RTN","IBY577PR",86,0)
 ;
"RTN","IBY577PR",87,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",88,0)
 ; 364.5 entries deleted:
"RTN","IBY577PR",89,0)
 ;
"RTN","IBY577PR",90,0)
DEL5    ; remove O.F. entries in file 364.5 (not re-added)
"RTN","IBY577PR",91,0)
 ;
"RTN","IBY577PR",92,0)
 ;;
"RTN","IBY577PR",93,0)
 ;
"RTN","IBY577PR",94,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",95,0)
 ; 364.6 entries deleted:
"RTN","IBY577PR",96,0)
 ;
"RTN","IBY577PR",97,0)
 ; 1850 - OI6-6.9
"RTN","IBY577PR",98,0)
 ;
"RTN","IBY577PR",99,0)
DEL6    ; remove O.F. entries in file 364.6 (not re-added)
"RTN","IBY577PR",100,0)
 ;
"RTN","IBY577PR",101,0)
 ;;^1850^
"RTN","IBY577PR",102,0)
 ;
"RTN","IBY577PR",103,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",104,0)
 ; 364.7 entries deleted:
"RTN","IBY577PR",105,0)
 ;
"RTN","IBY577PR",106,0)
 ; 1550 - OI6-6.9
"RTN","IBY577PR",107,0)
 ;
"RTN","IBY577PR",108,0)
DEL7    ; remove O.F. entries in file 364.7 (not re-added)
"RTN","IBY577PR",109,0)
 ;
"RTN","IBY577PR",110,0)
 ;;^1550^
"RTN","IBY577PR",111,0)
 ;
"RTN","IBY577PR",112,0)
 ;-----------------------------------------------------------------------
"RTN","IBY577PR",113,0)
ENT3508 ; Add New IB Error Codes to File 350.8
"RTN","IBY577PR",114,0)
 ;
"RTN","IBY577PR",115,0)
 ;;^IB365^
"RTN","IBY577PR",116,0)
 ;
"RTN","IBY577PR",117,0)
 Q
"RTN","IBY577PR",118,0)
 ;
"UP",36,36.017,-1)
36^17
"UP",36,36.017,0)
36.017
"UP",350.9,350.9004,-1)
350.9^19
"UP",350.9,350.9004,0)
350.9004
"UP",399,399.0304,-1)
399^CP
"UP",399,399.0304,0)
399.0304
"VER")
8.0^22.2
"^DD",36,36,.116,0)
ZIP CODE^FJ10XO^^.11;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.116,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.116,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.116,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.116,21,0)
^.001^2^2^3170322^^
"^DD",36,36,.116,21,1,0)
This is the ZIP code for the payer's main mailing address. Enter a 9 or 
"^DD",36,36,.116,21,2,0)
10 character ZIP code.
"^DD",36,36,.116,"DEL",1,0)
I $D(DGINS)
"^DD",36,36,.116,"DT")
3170322
"^DD",36,36,.126,0)
CLAIMS (INPT) PROCESS ZIP^FJ10XO^^.12;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.126,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.126,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.126,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.126,21,0)
^^3^3^3170322^
"^DD",36,36,.126,21,1,0)
This is the ZIP code for the address of the inpatient claims processing 
"^DD",36,36,.126,21,2,0)
location when it differs from the payer's main mailing address. Enter a 
"^DD",36,36,.126,21,3,0)
9 or 10 character ZIP code.
"^DD",36,36,.126,"DT")
3170322
"^DD",36,36,.146,0)
APPEALS ADDRESS ZIP^FJ10XO^^.14;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.146,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.146,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.146,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.146,21,0)
^^3^3^3170322^
"^DD",36,36,.146,21,1,0)
This is the ZIP code for the address of the appeals processing location 
"^DD",36,36,.146,21,2,0)
when it differs from the payer's main mailing address. Enter a 9 or 10 
"^DD",36,36,.146,21,3,0)
character ZIP code.
"^DD",36,36,.146,"DT")
3170322
"^DD",36,36,.156,0)
INQUIRY ADDRESS ZIP CODE^FJ10XO^^.15;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.156,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.156,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.156,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.156,21,0)
^^3^3^3170322^
"^DD",36,36,.156,21,1,0)
This is the ZIP code for the address of the inquiry processing location 
"^DD",36,36,.156,21,2,0)
when it differs from the payer's main mailing address. Enter a 9 or 10 
"^DD",36,36,.156,21,3,0)
character ZIP code.
"^DD",36,36,.156,"DT")
3170322
"^DD",36,36,.166,0)
CLAIMS (OPT) PROCESS ZIP^FJ10XO^^.16;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.166,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.166,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.166,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.166,21,0)
^^3^3^3170322^
"^DD",36,36,.166,21,1,0)
This is the ZIP code for the address of the outpatient claims 
"^DD",36,36,.166,21,2,0)
processing location when it differs from the payer's main mailing 
"^DD",36,36,.166,21,3,0)
address. Enter a 9 or 10 character ZIP code.
"^DD",36,36,.166,"DT")
3170322
"^DD",36,36,.186,0)
CLAIMS (RX) ZIP^FJ10XO^^.18;6^K:($L(X)>10!($L(X)<9)) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.186,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.186,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.186,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length. The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.186,21,0)
^^3^3^3170322^^
"^DD",36,36,.186,21,1,0)
This is the ZIP code for the address of the prescription claims 
"^DD",36,36,.186,21,2,0)
processing location when it differs from the payer's main mailing 
"^DD",36,36,.186,21,3,0)
address. Enter a 9 or 10 character ZIP code.
"^DD",36,36,.186,"DT")
3170322
"^DD",36,36,17,0)
277EDI ID NUMBER^36.017A^^17;0
"^DD",36,36,17,21,0)
^^2^2^3170508^
"^DD",36,36,17,21,1,0)
This is the ID information needed to capture data for reporting purposes 
"^DD",36,36,17,21,2,0)
from processing 277stat transactions.
"^DD",36,36.017,0)
277EDI ID NUMBER SUB-FIELD^^.04^4
"^DD",36,36.017,0,"DT")
3170627
"^DD",36,36.017,0,"IX","B",36.017,.01)

"^DD",36,36.017,0,"NM","277EDI ID NUMBER")

"^DD",36,36.017,0,"UP")
36
"^DD",36,36.017,.01,0)
277EDI ID NUMBER^FJ30^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",36,36.017,.01,1,0)
^.1
"^DD",36,36.017,.01,1,1,0)
36.017^B
"^DD",36,36.017,.01,1,1,1)
S ^DIC(36,DA(1),17,"B",$E(X,1,30),DA)=""
"^DD",36,36.017,.01,1,1,2)
K ^DIC(36,DA(1),17,"B",$E(X,1,30),DA)
"^DD",36,36.017,.01,3)
Answer must be 1-30 characters in length.
"^DD",36,36.017,.01,21,0)
^^2^2^3170508^
"^DD",36,36.017,.01,21,1,0)
This is the ID number used to identify the payer on a professional or an 
"^DD",36,36.017,.01,21,2,0)
institutional claim transmission. This is for reporting purposes only.
"^DD",36,36.017,.01,"DT")
3170306
"^DD",36,36.017,.02,0)
277DATE EDI ID NUMBER^D^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",36,36.017,.02,3)
Enter the date of the 277STAT transaction from the clearing house.
"^DD",36,36.017,.02,21,0)
^^2^2^3170508^
"^DD",36,36.017,.02,21,1,0)
This is the date from the 277stat transmission from the clearing house. 
"^DD",36,36.017,.02,21,2,0)
This is for reporting purposes only.
"^DD",36,36.017,.02,"DT")
3170508
"^DD",36,36.017,.03,0)
277EDI TYPE^S^P:PROFESSIONAL;I:INSTITUTIONAL;^0;3^Q
"^DD",36,36.017,.03,3)
Enter the type of claim "P" for professional or "I" for institutional.
"^DD",36,36.017,.03,21,0)
^^2^2^3170508^
"^DD",36,36.017,.03,21,1,0)
This determines the type of claim - either "P" for professional or "I" 
"^DD",36,36.017,.03,21,2,0)
for institutional. For reporting purposes only.
"^DD",36,36.017,.03,"DT")
3170508
"^DD",36,36.017,.04,0)
277EDI ID NUMBER ON FILE^FJ30^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",36,36.017,.04,3)
Answer must be 1-30 characters in length.
"^DD",36,36.017,.04,21,0)
^.001^3^3^3170508^^
"^DD",36,36.017,.04,21,1,0)
This is the ID number that was stored on file to determine the payer on 
"^DD",36,36.017,.04,21,2,0)
a claim prior to the 277stat transaction update.  If there is no number 
"^DD",36,36.017,.04,21,3,0)
that means there will be an update.  This is for reporting purposes only.
"^DD",36,36.017,.04,"DT")
3170306
"^DD",350.8,350.8,0)
FIELD^^10^7
"^DD",350.8,350.8,0,"DDA")
N
"^DD",350.8,350.8,0,"DT")
2930322
"^DD",350.8,350.8,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",350.8,350.8,0,"IX","AC",350.8,.03)

"^DD",350.8,350.8,0,"IX","B",350.8,.01)

"^DD",350.8,350.8,0,"IX","C",350.8,.03)

"^DD",350.8,350.8,0,"NM","IB ERROR")
 
"^DD",350.8,350.8,0,"PT",399,36)

"^DD",350.8,350.8,0,"VRPK")
IB
"^DD",350.8,350.8,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",350.8,350.8,.01,1,0)
^.1
"^DD",350.8,350.8,.01,1,1,0)
350.8^B
"^DD",350.8,350.8,.01,1,1,1)
S ^IBE(350.8,"B",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.01,1,1,2)
K ^IBE(350.8,"B",$E(X,1,30),DA)
"^DD",350.8,350.8,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",350.8,350.8,.01,21,0)
^^2^2^2910305^^
"^DD",350.8,350.8,.01,21,1,0)
This is a free text name of the entry.  It should be namespaced with
"^DD",350.8,350.8,.01,21,2,0)
the namespace of the package reporting the error.
"^DD",350.8,350.8,.02,0)
ERROR MESSAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",350.8,350.8,.02,3)
Answer must be 3-80 characters in length.
"^DD",350.8,350.8,.02,21,0)
^^3^3^2940209^^^^
"^DD",350.8,350.8,.02,21,1,0)
This is the text of the message as it will be displayed to a user or
"^DD",350.8,350.8,.02,21,2,0)
posted in a bulletin.  It should be as meaningful as possible to the
"^DD",350.8,350.8,.02,21,3,0)
person seeing the message.
"^DD",350.8,350.8,.03,0)
ERROR CODE^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
"^DD",350.8,350.8,.03,1,0)
^.1
"^DD",350.8,350.8,.03,1,1,0)
350.8^AC
"^DD",350.8,350.8,.03,1,1,1)
S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,1,2)
K ^IBE(350.8,"AC",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,1,2,0)
350.8^C
"^DD",350.8,350.8,.03,1,2,1)
S ^IBE(350.8,"C",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,2,2)
K ^IBE(350.8,"C",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,3)
Answer must be 1-9 characters in length.
"^DD",350.8,350.8,.03,21,0)
^^9^9^2920219^^^^
"^DD",350.8,350.8,.03,21,1,0)
This is the error code that will be passed to or determined by
"^DD",350.8,350.8,.03,21,2,0)
Integrated Billing.  The format for the Error Code should be
"^DD",350.8,350.8,.03,21,3,0)
nnxxx, where nn is the reporting package namespace and xxx are numeric
"^DD",350.8,350.8,.03,21,4,0)
values.
"^DD",350.8,350.8,.03,21,5,0)
 
"^DD",350.8,350.8,.03,21,6,0)
This is the error code that will be passed as the second piece of
"^DD",350.8,350.8,.03,21,7,0)
the variable Y to IB when +Y=-1.  More than one error code can be
"^DD",350.8,350.8,.03,21,8,0)
placed in the second ^ piece of Y delimited by semi-colons.  Applications
"^DD",350.8,350.8,.03,21,9,0)
may call ^IBAERR to display the error message(s).
"^DD",350.8,350.8,.03,"DT")
2920219
"^DD",350.8,350.8,.04,0)
PACKAGE REPORTING ERROR^S^1:INTEGRATED BILLING;2:ACCOUNTS RECEIVABLE;3:PHARMACY;^0;4^Q
"^DD",350.8,350.8,.04,21,0)
^^2^2^2920415^^^
"^DD",350.8,350.8,.04,21,1,0)
This is the package that requested this entry in this file and will
"^DD",350.8,350.8,.04,21,2,0)
report it to IB as an error if the conditions are detected.
"^DD",350.8,350.8,.05,0)
ERROR ACTION^S^1:DISPLAY MESSAGE;2:SEND BULLETIN;3:EDIT FILE;^0;5^Q
"^DD",350.8,350.8,.05,21,0)
^^6^6^2910227^
"^DD",350.8,350.8,.05,21,1,0)
This is the type of action that should be taken when this error is
"^DD",350.8,350.8,.05,21,2,0)
reported to IB.  If action other than displaying a message is indicated
"^DD",350.8,350.8,.05,21,3,0)
then the MUMPS code in the ERROR ACTION field will be executed.
"^DD",350.8,350.8,.05,21,4,0)
 
"^DD",350.8,350.8,.05,21,5,0)
Currently only display actions are implemented.  Please contact the 
"^DD",350.8,350.8,.05,21,6,0)
developing ISC if other action types are desired.
"^DD",350.8,350.8,.06,0)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"^DD",350.8,350.8,.06,21,0)
^^1^1^2940209^
"^DD",350.8,350.8,.06,21,1,0)
This is the type of alert that should be sent when this error occurs.
"^DD",350.8,350.8,.06,"DT")
2930322
"^DD",350.8,350.8,10,0)
EXECUTABLE LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",350.8,350.8,10,3)
This is Standard MUMPS code.
"^DD",350.8,350.8,10,21,0)
^^2^2^2910227^
"^DD",350.8,350.8,10,21,1,0)
This is the MUMPS code that will be executed if an error is reported
"^DD",350.8,350.8,10,21,2,0)
with an ERROR ACTION of other than to display a message.
"^DD",350.9,350.9004,1.01,0)
STREET ADDRESS 1^FJ55^^1;1^K:$L(X)>55!($L(X)<1) X
"^DD",350.9,350.9004,1.01,.1)
Pay-to Provider Address Line 1
"^DD",350.9,350.9004,1.01,3)
Answer must be 1-55 characters in length.
"^DD",350.9,350.9004,1.01,21,0)
^.001^2^2^3170330^^
"^DD",350.9,350.9004,1.01,21,1,0)
You may modify the Pay-to Provider Address for use on electronic or
"^DD",350.9,350.9004,1.01,21,2,0)
printed claims.  You may enter a P.O. Box.
"^DD",350.9,350.9004,1.01,23,0)
^.001^1^1^3170330^^
"^DD",350.9,350.9004,1.01,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.9004,1.01,"DT")
3170427
"^DD",350.9,350.9004,1.02,0)
STREET ADDRESS 2^FJ55^^1;2^K:$L(X)>55!($L(X)<1) X
"^DD",350.9,350.9004,1.02,.1)
Pay-to Provider Address Line 2
"^DD",350.9,350.9004,1.02,3)
Answer must be 1-55 characters in length.
"^DD",350.9,350.9004,1.02,21,0)
^^1^1^3081114^
"^DD",350.9,350.9004,1.02,21,1,0)
Enter additional Address information if needed.
"^DD",350.9,350.9004,1.02,23,0)
^^1^1^3081114^
"^DD",350.9,350.9004,1.02,23,1,0)
This field is initially set by the "AC" x-ref of the .01 field.
"^DD",350.9,350.9004,1.02,"DT")
3170427
"^DD",355.93,355.93,.01,0)
NAME^RFXJ60^^0;1^K:($L(X)>60)!($L(X)<3) X I $D(X) D PRVFMT^IBCEP8
"^DD",355.93,355.93,.01,1,0)
^.1
"^DD",355.93,355.93,.01,1,1,0)
355.93^B
"^DD",355.93,355.93,.01,1,1,1)
S ^IBA(355.93,"B",$E(X,1,30),DA)=""
"^DD",355.93,355.93,.01,1,1,2)
K ^IBA(355.93,"B",$E(X,1,30),DA)
"^DD",355.93,355.93,.01,1,2,0)
^^TRIGGER^355.93^.02
"^DD",355.93,355.93,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=IBFLPFLP I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=IBFLPFLP X ^DD(355.93,.01,1,2,1.4)
"^DD",355.93,355.93,.01,1,2,1.4)
S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=355.93,DIG=.02 D ^DICR
"^DD",355.93,355.93,.01,1,2,2)
Q
"^DD",355.93,355.93,.01,1,2,3)
Do not delete
"^DD",355.93,355.93,.01,1,2,"%D",0)
^^3^3^3100720^
"^DD",355.93,355.93,.01,1,2,"%D",1,0)
Trigger to change provider type based on user input during add/edit of the
"^DD",355.93,355.93,.01,1,2,"%D",2,0)
NAME field (#.01).  Population of this field is based on the value of the
"^DD",355.93,355.93,.01,1,2,"%D",3,0)
IBFLPFLP variable returned by the NAME field input transform.
"^DD",355.93,355.93,.01,1,2,"CREATE CONDITION")
S X=IBFLPFLP
"^DD",355.93,355.93,.01,1,2,"CREATE VALUE")
S X=IBFLPFLP
"^DD",355.93,355.93,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.93,355.93,.01,1,2,"DT")
3100707
"^DD",355.93,355.93,.01,1,2,"FIELD")
PROVIDER TYPE
"^DD",355.93,355.93,.01,3)
Enter the name of a NON-VA provider/facility or other VA.  Name must start with a letter and can have letters,numbers,comma,space,dash only.  Names aren't valid if they exist in the NEW PERSON file.
"^DD",355.93,355.93,.01,21,0)
^.001^26^26^3170330^^^^
"^DD",355.93,355.93,.01,21,1,0)
This is the name of either an individual NON-VA
"^DD",355.93,355.93,.01,21,2,0)
provider or a NON-VA or another VA facility
"^DD",355.93,355.93,.01,21,3,0)
that provides services to the V.A. for which
"^DD",355.93,355.93,.01,21,4,0)
the V.A. can in turn bill an insurance company
"^DD",355.93,355.93,.01,21,5,0)
for reimbursement.  
"^DD",355.93,355.93,.01,21,6,0)
 
"^DD",355.93,355.93,.01,21,7,0)
For individual type entries:
"^DD",355.93,355.93,.01,21,8,0)
The name should be entered in LAST,FIRST MIDDLE
"^DD",355.93,355.93,.01,21,9,0)
format.  Enter only data that is actually part
"^DD",355.93,355.93,.01,21,10,0)
of the provider's name. Do not include extra
"^DD",355.93,355.93,.01,21,11,0)
titles, identification, flags, local information,
"^DD",355.93,355.93,.01,21,12,0)
etc.  All individual provider names will be
"^DD",355.93,355.93,.01,21,13,0)
converted to the 'standardized' format. 
"^DD",355.93,355.93,.01,21,14,0)
'Standardized' for individuals means all
"^DD",355.93,355.93,.01,21,15,0)
punctuation except '-' and space are removed,
"^DD",355.93,355.93,.01,21,16,0)
the name is changed to all uppercase, 2 or more
"^DD",355.93,355.93,.01,21,17,0)
successive '-' or spaces are converted to a
"^DD",355.93,355.93,.01,21,18,0)
single '-' or space and any words for birth
"^DD",355.93,355.93,.01,21,19,0)
position (1ST-10TH) are changed to their Roman
"^DD",355.93,355.93,.01,21,20,0)
numeral equivalents. 
"^DD",355.93,355.93,.01,21,21,0)
 
"^DD",355.93,355.93,.01,21,22,0)
For facility type entries:
"^DD",355.93,355.93,.01,21,23,0)
The name MUST start with an Alpha character. The
"^DD",355.93,355.93,.01,21,24,0)
name may contain numerals, spaces, commas,
"^DD",355.93,355.93,.01,21,25,0)
periods, and a hyphen or dash.  No other
"^DD",355.93,355.93,.01,21,26,0)
punctuation characters are allowed in the name.
"^DD",355.93,355.93,.01,"DT")
3170427
"^DD",355.93,355.93,.05,0)
STREET ADDRESS^RFXJ55^^0;5^S X=$$UP^XLFSTR(X) K:$L(X)>55!($L(X)<1)!$$BADADD^IBCEP8B(X) X I $D(X),$P($G(^IBA(355.93,DA,0)),U,2)'=1 K X
"^DD",355.93,355.93,.05,3)
Answer must be 1-55 characters in length. Cannot be a post office box.
"^DD",355.93,355.93,.05,5,1,0)
355.93^.02^3
"^DD",355.93,355.93,.05,21,0)
^.001^3^3^3170330^^^^
"^DD",355.93,355.93,.05,21,1,0)
This is the street address of the non-VA facility that rendered
"^DD",355.93,355.93,.05,21,2,0)
the care that is being billed by the VA.  It is only valid for FACILITY
"^DD",355.93,355.93,.05,21,3,0)
providers. It cannot be a post office box.
"^DD",355.93,355.93,.05,"DT")
3170427
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3071126
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>40!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1^^0
"^DD",364.6,364.6,.1,3)
Answer must be 1-40 characters in length
"^DD",364.6,364.6,.1,21,0)
^^2^2^3071126^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
3080310
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DD",399,399,.21,0)
CURRENT BILL PAYER SEQUENCE^*S^P:PRIMARY INSURANCE;S:SECONDARY INSURANCE;T:TERTIARY INSURANCE;A:PATIENT;^0;21^Q
"^DD",399,399,.21,1,0)
^.1
"^DD",399,399,.21,1,1,0)
^^TRIGGER^399^136
"^DD",399,399,.21,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"MP")):^("MP"),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$$BPP^IBCNS2(DA) X ^DD(399,.21,1,1,1.4)
"^DD",399,399,.21,1,1,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"MP")):^("MP"),1:""),DIV=X S $P(^("MP"),U,2)=DIV,DIH=399,DIG=136 D ^DICR
"^DD",399,399,.21,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"MP")):^("MP"),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,1,2.4)
"^DD",399,399,.21,1,1,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"MP")):^("MP"),1:""),DIV=X S $P(^("MP"),U,2)=DIV,DIH=399,DIG=136 D ^DICR
"^DD",399,399,.21,1,1,"%D",0)
^^2^2^2970821^
"^DD",399,399,.21,1,1,"%D",1,0)
Set the Bill Payer Policy to the Payer Policy corresponding to the Payer
"^DD",399,399,.21,1,1,"%D",2,0)
Sequence.
"^DD",399,399,.21,1,1,"CREATE VALUE")
S X=$$BPP^IBCNS2(DA)
"^DD",399,399,.21,1,1,"DELETE VALUE")
@
"^DD",399,399,.21,1,1,"DT")
2970821
"^DD",399,399,.21,1,1,"FIELD")
BILL PAYER POLICY
"^DD",399,399,.21,1,2,0)
^^TRIGGER^399^24
"^DD",399,399,.21,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=('$$REQMRA^IBEFUNC(DA)&$$NEEDMRA^IBEFUNC(DA)) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=0 X ^DD(399,.21,1,2,1.4)
"^DD",399,399,.21,1,2,1.4)
S DIH=$G(^DGCR(399,DIV(0),"TX")),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR
"^DD",399,399,.21,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=('$$REQMRA^IBEFUNC(DA)&$$NEEDMRA^IBEFUNC(DA)) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,2,2.4)
"^DD",399,399,.21,1,2,2.4)
S DIH=$G(^DGCR(399,DIV(0),"TX")),DIV=X S $P(^("TX"),U,5)=DIV,DIH=399,DIG=24 D ^DICR
"^DD",399,399,.21,1,2,"%D",0)
^^4^4^3041108^
"^DD",399,399,.21,1,2,"%D",1,0)
When the payer sequence changes, this trigger will detect if an MRA is no
"^DD",399,399,.21,1,2,"%D",2,0)
longer needed, but the CLAIM MRA STATUS field still indicates than an MRA
"^DD",399,399,.21,1,2,"%D",3,0)
is still needed.  In this case, the CLAIM MRA STATUS is updated to be 0 -
"^DD",399,399,.21,1,2,"%D",4,0)
NO MRA NEEDED.
"^DD",399,399,.21,1,2,"CREATE CONDITION")
('$$REQMRA^IBEFUNC(DA)&$$NEEDMRA^IBEFUNC(DA))
"^DD",399,399,.21,1,2,"CREATE VALUE")
S X=0
"^DD",399,399,.21,1,2,"DELETE CONDITION")
('$$REQMRA^IBEFUNC(DA)&$$NEEDMRA^IBEFUNC(DA))
"^DD",399,399,.21,1,2,"DELETE VALUE")
@
"^DD",399,399,.21,1,2,"DT")
3041108
"^DD",399,399,.21,1,2,"FIELD")
CLAIM MRA STATUS
"^DD",399,399,.21,1,3,0)
^^TRIGGER^399^27
"^DD",399,399,.21,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$S($$WNRBILL^IBEFUNC(DA,X):1,1:0) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,3,1.4)
"^DD",399,399,.21,1,3,1.4)
S DIH=$G(^DGCR(399,DIV(0),"TX")),DIV=X S $P(^("TX"),U,8)=DIV,DIH=399,DIG=27 D ^DICR
"^DD",399,399,.21,1,3,2)
Q
"^DD",399,399,.21,1,3,3)
Do not delete
"^DD",399,399,.21,1,3,"%D",0)
^.101^3^3^3101115^^
"^DD",399,399,.21,1,3,"%D",1,0)
If the insurance for the payer sequence is MEDICARE WNR, the
"^DD",399,399,.21,1,3,"%D",2,0)
data in field FORCE CLAIM TO PRINT must be deleted as it is not valid
"^DD",399,399,.21,1,3,"%D",3,0)
to print an MRA request.
"^DD",399,399,.21,1,3,"CREATE CONDITION")
S X=$S($$WNRBILL^IBEFUNC(DA,X):1,1:0)
"^DD",399,399,.21,1,3,"CREATE VALUE")
@
"^DD",399,399,.21,1,3,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,3,"DT")
3041119
"^DD",399,399,.21,1,3,"FIELD")
FORCE CLAIM TO PRINT
"^DD",399,399,.21,1,4,0)
^^TRIGGER^399^27
"^DD",399,399,.21,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$$CREATE^IBCEF84(DA) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(399,.21,1,4,1.4)
"^DD",399,399,.21,1,4,1.4)
S DIH=$G(^DGCR(399,DIV(0),"TX")),DIV=X S $P(^("TX"),U,8)=DIV,DIH=399,DIG=27 D ^DICR
"^DD",399,399,.21,1,4,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$$DELETE^IBCEF84(DA) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"TX")):^("TX"),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,4,2.4)
"^DD",399,399,.21,1,4,2.4)
S DIH=$G(^DGCR(399,DIV(0),"TX")),DIV=X S $P(^("TX"),U,8)=DIV,DIH=399,DIG=27 D ^DICR
"^DD",399,399,.21,1,4,"%D",0)
^^6^6^3101129^
"^DD",399,399,.21,1,4,"%D",1,0)
This trigger is designed to set the FORCE CLAIM TO PRINT field 27 equal 
"^DD",399,399,.21,1,4,"%D",2,0)
to 1 for SECONDARY MEDICARE WNR claims if the carrier field PRINT SEC MED 
"^DD",399,399,.21,1,4,"%D",3,0)
CLAIMS W/O MRA, 6.1 is set.
"^DD",399,399,.21,1,4,"%D",4,0)
If the current value of field 27, FORCE CLAIM TO PRINT is equal to 1, and 
"^DD",399,399,.21,1,4,"%D",5,0)
field .21, CURRENT BILL PAYER SEQUENCE is changed to something other than 
"^DD",399,399,.21,1,4,"%D",6,0)
"S", then the value in field 27, FORCE CLAIM TO PRINT, is deleted.
"^DD",399,399,.21,1,4,"CREATE CONDITION")
S X=$$CREATE^IBCEF84(DA)
"^DD",399,399,.21,1,4,"CREATE VALUE")
S X=1
"^DD",399,399,.21,1,4,"DELETE CONDITION")
S X=$$DELETE^IBCEF84(DA)
"^DD",399,399,.21,1,4,"DELETE VALUE")
@
"^DD",399,399,.21,1,4,"DT")
3101128
"^DD",399,399,.21,1,4,"FIELD")
FORCE CLAIM TO PRINT
"^DD",399,399,.21,1,5,0)
^^TRIGGER^399^125
"^DD",399,399,.21,1,5,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="P" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,5,1.4)
"^DD",399,399,.21,1,5,1.4)
S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,5)=DIV,DIH=399,DIG=125 D ^DICR
"^DD",399,399,.21,1,5,2)
Q
"^DD",399,399,.21,1,5,"%D",0)
^^3^3^3170417^
"^DD",399,399,.21,1,5,"%D",1,0)
This TRIGGER removes the PRIMARY BILL # when the CURRENT BILL PAYER 
"^DD",399,399,.21,1,5,"%D",2,0)
SEQUENCE is set to "P"rimary to prevent COB information from subsequent 
"^DD",399,399,.21,1,5,"%D",3,0)
claims being placed on the 837 claims transmission.
"^DD",399,399,.21,1,5,"CREATE CONDITION")
INTERNAL(CURRENT BILL PAYER SEQUENCE)="P"
"^DD",399,399,.21,1,5,"CREATE VALUE")
@
"^DD",399,399,.21,1,5,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,5,"DT")
3170417
"^DD",399,399,.21,1,5,"FIELD")
PRIMARY BILL #
"^DD",399,399,.21,1,6,0)
^^TRIGGER^399^126
"^DD",399,399,.21,1,6,1)
X ^DD(399,.21,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,6)=DIV,DIH=399,DIG=126 D ^DICR
"^DD",399,399,.21,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="P",Y(1)=$G(X),Y(2)=$G(X) S X=Y(0),X=X S X=X="S",Y=X,X=Y(1),X=X!Y
"^DD",399,399,.21,1,6,2)
Q
"^DD",399,399,.21,1,6,"%D",0)
^^4^4^3170417^
"^DD",399,399,.21,1,6,"%D",1,0)
This TRIGGER removes the SECONDARY BILL # when the CURRENT BILL PAYER 
"^DD",399,399,.21,1,6,"%D",2,0)
SEQUENCE is set to either "P"rimary or "S"econdary to prevent COB 
"^DD",399,399,.21,1,6,"%D",3,0)
information from subsequent claims being placed on the 837 claims 
"^DD",399,399,.21,1,6,"%D",4,0)
transmission.
"^DD",399,399,.21,1,6,"CREATE CONDITION")
INTERNAL(CURRENT BILL PAYER SEQUENCE)="P"!(INTERNAL(CURRENT BILL PAYER SEQUENCE)="S")
"^DD",399,399,.21,1,6,"CREATE VALUE")
@
"^DD",399,399,.21,1,6,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,6,"DT")
3170417
"^DD",399,399,.21,1,6,"FIELD")
SECONDARY BILL #
"^DD",399,399,.21,1,7,0)
^^TRIGGER^399^127
"^DD",399,399,.21,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M1")):^("M1"),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M1")),DIV=X S $P(^("M1"),U,7)=DIV,DIH=399,DIG=127 D ^DICR
"^DD",399,399,.21,1,7,2)
Q
"^DD",399,399,.21,1,7,"%D",0)
^^4^4^3170417^
"^DD",399,399,.21,1,7,"%D",1,0)
This TRIGGER removes the TERTIARY BILL # when the CURRENT BILL PAYER 
"^DD",399,399,.21,1,7,"%D",2,0)
SEQUENCE is set to either "P"rimary, "S"econdary or "T"ertiary to prevent 
"^DD",399,399,.21,1,7,"%D",3,0)
COB information from subsequent claims being placed on the 837 claims 
"^DD",399,399,.21,1,7,"%D",4,0)
transmission.
"^DD",399,399,.21,1,7,"CREATE VALUE")
@
"^DD",399,399,.21,1,7,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,7,"DT")
3170417
"^DD",399,399,.21,1,7,"FIELD")
TERTIARY BILL #
"^DD",399,399,.21,1,8,0)
^^TRIGGER^399^218
"^DD",399,399,.21,1,8,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="P" I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399,.21,1,8,1.4)
"^DD",399,399,.21,1,8,1.4)
S DIH=$G(^DGCR(399,DIV(0),"U2")),DIV=X S $P(^("U2"),U,4)=DIV,DIH=399,DIG=218 D ^DICR
"^DD",399,399,.21,1,8,2)
Q
"^DD",399,399,.21,1,8,"%D",0)
^^4^4^3170418^
"^DD",399,399,.21,1,8,"%D",1,0)
This TRIGGER removes the PRIMARY PRIOR PAYMENT when the CURRENT BILL 
"^DD",399,399,.21,1,8,"%D",2,0)
PAYER SEQUENCE is set to "P"rimary to properly adjust the calculation of 
"^DD",399,399,.21,1,8,"%D",3,0)
the OFFSET AMOUNT for subsequent claims being placed on the 837 claims 
"^DD",399,399,.21,1,8,"%D",4,0)
tranmission.
"^DD",399,399,.21,1,8,"CREATE CONDITION")
INTERNAL(CURRENT BILL PAYER SEQUENCE)="P"
"^DD",399,399,.21,1,8,"CREATE VALUE")
@
"^DD",399,399,.21,1,8,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,8,"DT")
3170418
"^DD",399,399,.21,1,8,"FIELD")
PRIMARY PRIOR PAYMENT
"^DD",399,399,.21,1,9,0)
^^TRIGGER^399^219
"^DD",399,399,.21,1,9,1)
X ^DD(399,.21,1,9,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"U2")),DIV=X S $P(^("U2"),U,5)=DIV,DIH=399,DIG=219 D ^DICR
"^DD",399,399,.21,1,9,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="P",Y(1)=$G(X),Y(2)=$G(X) S X=Y(0),X=X S X=X="S",Y=X,X=Y(1),X=X!Y
"^DD",399,399,.21,1,9,2)
Q
"^DD",399,399,.21,1,9,"%D",0)
^.101^4^4^3170418^^
"^DD",399,399,.21,1,9,"%D",1,0)
This TRIGGER removes the SECONDARY PRIOR PAYMENT when the CURRENT BILL 
"^DD",399,399,.21,1,9,"%D",2,0)
PAYER SEQUENCE is set to "P"rimary or "S"econdary to properly adjust the 
"^DD",399,399,.21,1,9,"%D",3,0)
calculation of the OFFSET AMOUNT for subsequent claims being placed on 
"^DD",399,399,.21,1,9,"%D",4,0)
the 837 claims transmission.
"^DD",399,399,.21,1,9,"CREATE CONDITION")
INTERNAL(CURRENT BILL PAYER SEQUENCE)="P"!(INTERNAL(CURRENT BILL PAYER SEQUENCE)="S")
"^DD",399,399,.21,1,9,"CREATE VALUE")
@
"^DD",399,399,.21,1,9,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,9,"DT")
3170418
"^DD",399,399,.21,1,9,"FIELD")
SECONDARY PRIOR PAYMENT
"^DD",399,399,.21,1,10,0)
^^TRIGGER^399^220
"^DD",399,399,.21,1,10,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"U2")),DIV=X S $P(^("U2"),U,6)=DIV,DIH=399,DIG=220 D ^DICR
"^DD",399,399,.21,1,10,2)
Q
"^DD",399,399,.21,1,10,"%D",0)
^^4^4^3170418^
"^DD",399,399,.21,1,10,"%D",1,0)
This TRIGGER removes the TERTIARY PRIOR PAYMENT when the CURRENT BILL 
"^DD",399,399,.21,1,10,"%D",2,0)
PAYER SEQUENCE is set to "P"rimary, "S"econdary or "T"ertiary to properly 
"^DD",399,399,.21,1,10,"%D",3,0)
adjust the calculation of the OFFSET AMOUNT for subsequent claims being 
"^DD",399,399,.21,1,10,"%D",4,0)
placed on the 837 claims transmission.
"^DD",399,399,.21,1,10,"CREATE VALUE")
@
"^DD",399,399,.21,1,10,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.21,1,10,"DT")
3170418
"^DD",399,399,.21,1,10,"FIELD")
TERTIARY PRIOR PAYMENT
"^DD",399,399,.21,3)
Enter the entity currently responsible for paying this bill.
"^DD",399,399,.21,5,1,0)
399^.11^4
"^DD",399,399,.21,12)
Primary/Secondary/Tertiary must have corresponding insurance co on bill.
"^DD",399,399,.21,12.1)
S DIC("S")="I $S(X=""P"":$D(^DGCR(399,DA,""I1"")),X=""S"":$D(^DGCR(399,DA,""I2"")),X=""T"":$D(^DGCR(399,DA,""I3"")),1:1)"
"^DD",399,399,.21,21,0)
^.001^1^1^3170302^^^^
"^DD",399,399,.21,21,1,0)
This field determines the entity currently responsible for paying this bill.
"^DD",399,399,.21,"DT")
3170418
"^DD",399,399,163,0)
TREATMENT AUTHORIZATION CODE^FJ50^^U;13^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,163,3)
Answer must be 1-50 characters in length.
"^DD",399,399,163,5,1,0)
399^112^4
"^DD",399,399,163,21,0)
^.001^5^5^3170330^^
"^DD",399,399,163,21,1,0)
This indicates that the treatment covered by this bill has been 
"^DD",399,399,163,21,2,0)
authorized by the primary payer.
"^DD",399,399,163,21,3,0)
 
"^DD",399,399,163,21,4,0)
On the CMS-1500 this is box 23, PRIOR AUTHORIZATION NUMBER.
"^DD",399,399,163,21,5,0)
On the UB-04, this is reported in FL63.
"^DD",399,399,163,"DT")
3170427
"^DD",399,399,202,0)
OFFSET AMOUNT^NJ8,2^^U1;2^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>99999)!(X<0) X
"^DD",399,399,202,1,0)
^.1
"^DD",399,399,202,1,1,0)
^^TRIGGER^399^203
"^DD",399,399,202,1,1,1)
Q
"^DD",399,399,202,1,1,2)
X ^DD(399,202,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"U1")):^("U1"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"U1")),DIV=X S $P(^("U1"),U,3)=DIV,DIH=399,DIG=203 D ^DICR
"^DD",399,399,202,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"U1")):^("U1"),1:"") S X=$P(Y(1),U,2)="",Y(2)=$G(X) S X=$P(Y(1),U,2)=0,Y=X,X=Y(2),X=X!Y
"^DD",399,399,202,1,1,2.4)
S DIH=$G(^DGCR(399,DIV(0),"U1")),DIV=X S $P(^("U1"),U,3)=DIV,DIH=399,DIG=203 D ^DICR
"^DD",399,399,202,1,1,"%D",0)
^^2^2^3170418^
"^DD",399,399,202,1,1,"%D",1,0)
When the OFFSET AMOUNT is deleted or is equal to ZERO, remove the OFFSET 
"^DD",399,399,202,1,1,"%D",2,0)
DESCRIPTION.
"^DD",399,399,202,1,1,"CREATE VALUE")
NO EFFECT
"^DD",399,399,202,1,1,"DELETE CONDITION")
OFFSET AMOUNT=""!(OFFSET AMOUNT=0)
"^DD",399,399,202,1,1,"DELETE VALUE")
@
"^DD",399,399,202,1,1,"DT")
3170418
"^DD",399,399,202,1,1,"FIELD")
#203
"^DD",399,399,202,3)
Enter the dollar amount between 0 and 99999.99 that is to be subtracted from the total charges on this bill.  Offset includes, but is not limited to, co-payments and deductibles.
"^DD",399,399,202,5,1,0)
399^218^1
"^DD",399,399,202,5,2,0)
399^219^1
"^DD",399,399,202,5,3,0)
399^220^1
"^DD",399,399,202,21,0)
^.001^3^3^3021126^^
"^DD",399,399,202,21,1,0)
This is the dollar amount which is to be subtracted from the total charges
"^DD",399,399,202,21,2,0)
on this bill. Offset includes, but is not limited to, co-payments, credits,
"^DD",399,399,202,21,3,0)
and deductibles.
"^DD",399,399,202,"DT")
3170418
"^DD",399,399,230,0)
SECONDARY AUTHORIZATION CODE^FXJ50^^U2;8^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,230,3)
Answer must be 1-50 characters in length.
"^DD",399,399,230,5,1,0)
399^113^4
"^DD",399,399,230,21,0)
^.001^5^5^3170330^^
"^DD",399,399,230,21,1,0)
This indicates that the treatment covered by this bill has been
"^DD",399,399,230,21,2,0)
authorized by the secondary payer.
"^DD",399,399,230,21,3,0)
 
"^DD",399,399,230,21,4,0)
On the CMS-1500 this is box 23, PRIOR AUTHORIZATION NUMBER.
"^DD",399,399,230,21,5,0)
On the UB-04, this is reported in FL63.
"^DD",399,399,230,"DT")
3170427
"^DD",399,399,231,0)
TERTIARY AUTHORIZATION CODE^FJ50^^U2;9^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,231,3)
Answer must be 1-50 characters in length.
"^DD",399,399,231,5,1,0)
399^114^4
"^DD",399,399,231,21,0)
^.001^5^5^3170330^^^
"^DD",399,399,231,21,1,0)
This indicates that the treatment covered by this bill has been 
"^DD",399,399,231,21,2,0)
authorized by the tertiary payer.
"^DD",399,399,231,21,3,0)
 
"^DD",399,399,231,21,4,0)
On the CMS-1500 this is box 23, PRIOR AUTHORIZATION NUMBER.
"^DD",399,399,231,21,5,0)
On the UB-04, this is reported in FL63.
"^DD",399,399,231,"DT")
3170427
"^DD",399,399,253,0)
PRIMARY REFERRAL NUMBER^FJ50^^UF32;1^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,253,3)
Answer must be 1-50 characters in length.
"^DD",399,399,253,5,1,0)
399^112^5
"^DD",399,399,253,21,0)
^.001^1^1^3170330^^^
"^DD",399,399,253,21,1,0)
This is the primary referral number assigned to the insurance.
"^DD",399,399,253,"DT")
3170427
"^DD",399,399,254,0)
SECONDARY REFERRAL NUMBER^FJ50^^UF32;2^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,254,3)
Answer must be 1-50 characters in length.
"^DD",399,399,254,5,1,0)
399^113^5
"^DD",399,399,254,21,0)
^.001^1^1^3170330^^
"^DD",399,399,254,21,1,0)
This is the secondary referral number assigned to the insurance.
"^DD",399,399,254,"DT")
3170427
"^DD",399,399,255,0)
TERTIARY REFERRAL NUMBER^FJ50^^UF32;3^K:$L(X)>50!($L(X)<1) X
"^DD",399,399,255,3)
Answer must be 1-50 characters in length.
"^DD",399,399,255,5,1,0)
399^114^5
"^DD",399,399,255,21,0)
^.001^1^1^3170330^^
"^DD",399,399,255,21,1,0)
This is the tertiary referral number assigned to the insurance.
"^DD",399,399,255,"DT")
3170427
"^DD",399,399,261,0)
PROPERTY/CASUALTY CLAIM NUMBER^FXJ50^^U4;2^K:$L(X)>50!($L(X)<1)!($TR(X," ")="")!($E(X)=" ") X
"^DD",399,399,261,3)
Answer must be 1-50 characters in length, not all spaces, no leading spaces.
"^DD",399,399,261,21,0)
^.001^1^1^3170330^^^^
"^DD",399,399,261,21,1,0)
This is a payer-assigned claim number for a property and casualty claim. 
"^DD",399,399,261,"DT")
3170427
"^DD",399,399,271,0)
AMBULANCE P/U ADDRESS 1^FJ55^^U5;2^K:$L(X)>55!($L(X)<1) X
"^DD",399,399,271,3)
Answer must be 1-55 characters in length.
"^DD",399,399,271,21,0)
^.001^2^2^3170330^^^
"^DD",399,399,271,21,1,0)
This is line one of the street address where the patient was picked up.
"^DD",399,399,271,21,2,0)
Required for ambulance transportation.
"^DD",399,399,271,"DT")
3170427
"^DD",399,399,272,0)
AMBULANCE P/U ADDRESS 2^FJ55^^U5;3^K:$L(X)>55!($L(X)<1) X
"^DD",399,399,272,3)
Answer must be 1-55 characters in length.
"^DD",399,399,272,21,0)
^.001^1^1^3170330^^^
"^DD",399,399,272,21,1,0)
This is line two of the address where the patient was picked up.
"^DD",399,399,272,"DT")
3170427
"^DD",399,399,277,0)
AMBULANCE D/O ADDRESS 1^FJ55^^U6;2^K:$L(X)>55!($L(X)<1) X
"^DD",399,399,277,3)
Answer must be 1-55 characters in length.
"^DD",399,399,277,21,0)
^.001^2^2^3170330^^^
"^DD",399,399,277,21,1,0)
This is line one of the street address where the patient was 
"^DD",399,399,277,21,2,0)
dropped off.  Required for ambulance transportation.
"^DD",399,399,277,"DT")
3170427
"^DD",399,399,278,0)
AMBULANCE D/O ADDRESS 2^FJ55^^U6;3^K:$L(X)>55!($L(X)<1) X
"^DD",399,399,278,3)
Answer must be 1-55 characters in length.
"^DD",399,399,278,21,0)
^.001^2^2^3170330^^^
"^DD",399,399,278,21,1,0)
This is line two of the address where the patient was 
"^DD",399,399,278,21,2,0)
dropped off.
"^DD",399,399,278,"DT")
3170427
"^DD",399,399.0304,52,0)
UNITS/BASIS OF MEASUREMENT^SX^F2:International Unit;GR:Gram;ME:Milligram;ML:Milliliter;UN:Unit;^2;1^Q
"^DD",399,399.0304,52,.1)
Units/Basis of Measurement
"^DD",399,399.0304,52,3)
Enter the units or basis for measurement associated with the Medication.
"^DD",399,399.0304,52,5,1,0)
399.0304^53^1
"^DD",399,399.0304,52,21,0)
^.001^2^2^3170419^^
"^DD",399,399.0304,52,21,1,0)
This field is used to associate the correct unit of measurement when 
"^DD",399,399.0304,52,21,2,0)
Medication is being specified.
"^DD",399,399.0304,52,23,0)
^.001^1^1^3170419^^
"^DD",399,399.0304,52,23,1,0)
This file is required if there is an NDC Number.
"^DD",399,399.0304,52,"DT")
3170613
"^DD",399,399.0304,53,0)
NDC^FX^^1;7^K:$L(X)>13!($L(X)<13)!'(X?5N1"-"4N1"-"2N) X
"^DD",399,399.0304,53,1,0)
^.1
"^DD",399,399.0304,53,1,1,0)
^^TRIGGER^399.0304^52
"^DD",399,399.0304,53,1,1,1)
Q
"^DD",399,399.0304,53,1,1,2)
X ^DD(399.0304,53,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,1)):^(1),1:""),Y(1)=$S($D(^DGCR(399,D0,"CP",D1,2)):^(2),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(399.0304,53,1,1,2.4)
"^DD",399,399.0304,53,1,1,2.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,1)):^(1),1:"") S X=$P(Y(1),U,7)=""
"^DD",399,399.0304,53,1,1,2.4)
S DIH=$G(^DGCR(399,DIV(0),"CP",DIV(1),2)),DIV=X S $P(^(2),U,1)=DIV,DIH=399.0304,DIG=52 D ^DICR
"^DD",399,399.0304,53,1,1,"%D",0)
^^2^2^3170413^
"^DD",399,399.0304,53,1,1,"%D",1,0)
When the NDC Code is removed, the UNITS/BASIS OF MEASUREMENT field should 
"^DD",399,399.0304,53,1,1,"%D",2,0)
be removed as well.
"^DD",399,399.0304,53,1,1,"CREATE VALUE")
NO EFFECT
"^DD",399,399.0304,53,1,1,"DELETE CONDITION")
NDC=""
"^DD",399,399.0304,53,1,1,"DELETE VALUE")
@
"^DD",399,399.0304,53,1,1,"FIELD")
UNITS/BASIS OF MEASUREMENT
"^DD",399,399.0304,53,1,2,0)
^^TRIGGER^399.0304^54
"^DD",399,399.0304,53,1,2,1)
Q
"^DD",399,399.0304,53,1,2,2)
X ^DD(399.0304,53,1,2,2.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,1)):^(1),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"CP",DIV(1),1)),DIV=X S $P(^(1),U,8)=DIV,DIH=399.0304,DIG=54 D ^DICR
"^DD",399,399.0304,53,1,2,2.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,1)):^(1),1:"") S X=$P(Y(1),U,7)=""
"^DD",399,399.0304,53,1,2,"%D",0)
^^1^1^3170413^
"^DD",399,399.0304,53,1,2,"%D",1,0)
When the NDC Code is removed, the UNITS field should be removed as well.
"^DD",399,399.0304,53,1,2,"CREATE VALUE")
NO EFFECT
"^DD",399,399.0304,53,1,2,"DELETE CONDITION")
NDC=""
"^DD",399,399.0304,53,1,2,"DELETE VALUE")
@
"^DD",399,399.0304,53,1,2,"DT")
3170413
"^DD",399,399.0304,53,1,2,"FIELD")
UNITS
"^DD",399,399.0304,53,3)
Enter a National Drug Code in a 5-4-2 format (nnnnn-nnnn-nn) if required on a non-prescription claim.
"^DD",399,399.0304,53,21,0)
^^2^2^3140707^
"^DD",399,399.0304,53,21,1,0)
Enter a National Drug Code in a 5-4-2 format (nnnnn-nnnn-nn) if 
"^DD",399,399.0304,53,21,2,0)
required on a non-prescription claim.
"^DD",399,399.0304,53,23,0)
^.001^2^2^3140707^^
"^DD",399,399.0304,53,23,1,0)
Enter a National Drug Code in a 5-4-2 format (nnnnn-nnnn-nn) if 
"^DD",399,399.0304,53,23,2,0)
required on a non-prescription claim.
"^DD",399,399.0304,53,"DT")
3170613
"^DD",399,399.0304,54,0)
UNITS^NJ15,3X^^1;8^K:+X'=X!(X>99999999999)!(X<0)!((X[".")&(X'?.11N1"."1.3N)) X
"^DD",399,399.0304,54,3)
Enter a number between 0 and 99999999999 with up to 3 decimal digits.
"^DD",399,399.0304,54,5,1,0)
399.0304^53^2
"^DD",399,399.0304,54,21,0)
^^1^1^3170421^
"^DD",399,399.0304,54,21,1,0)
Enter the number of units of the non-prescription medication administerd.
"^DD",399,399.0304,54,23,0)
^^2^2^3170421^^
"^DD",399,399.0304,54,23,1,0)
The number entered must be greater than zero and have format of 
"^DD",399,399.0304,54,23,2,0)
99999999999 and up to 3 decimal digits.
"^DD",399,399.0304,54,"DT")
3170613
"^DIC",350.8,350.8,0)
IB ERROR
"^DIC",350.8,350.8,0,"GL")
^IBE(350.8,
"^DIC",350.8,350.8,"%D",0)
^^11^11^2940214^^^^
"^DIC",350.8,350.8,"%D",1,0)
This file contains errors for billing functions.  It may be used by
"^DIC",350.8,350.8,"%D",2,0)
applications, IB or AR.  The normal format for a routine to return
"^DIC",350.8,350.8,"%D",3,0)
an error is to return the variable:
"^DIC",350.8,350.8,"%D",4,0)
  Y=1^... a successful event occured
"^DIC",350.8,350.8,"%D",5,0)
  Y=-1^error code[;error code;error code...]^additional text
"^DIC",350.8,350.8,"%D",6,0)
The error messages can be displayed by calling routine ^IBAERR.  If
"^DIC",350.8,350.8,"%D",7,0)
the error occurs in a tasked job ($D(ZTQUEUED)'=0) the routine will
"^DIC",350.8,350.8,"%D",8,0)
put the error message in a bulletin and post it to the group defined
"^DIC",350.8,350.8,"%D",9,0)
in the IB SITE PARAMETER FILE.
"^DIC",350.8,350.8,"%D",10,0)
 
"^DIC",350.8,350.8,"%D",11,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",350.8,"B","IB ERROR",350.8)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",10550,6)
^547
**END**
**END**

