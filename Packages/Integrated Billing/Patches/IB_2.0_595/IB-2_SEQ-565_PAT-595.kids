Released IB*2*595 SEQ #565
Extracted from mail message
**KIDS**:IB*2.0*595^

**INSTALL NAME**
IB*2.0*595
"BLD",10795,0)
IB*2.0*595^INTEGRATED BILLING^0^3180411^y
"BLD",10795,4,0)
^9.64PA^365^1
"BLD",10795,4,365,0)
365
"BLD",10795,4,365,2,0)
^9.641^365^1
"BLD",10795,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",10795,4,365,2,365,1,0)
^9.6411^.02^5
"BLD",10795,4,365,2,365,1,.02,0)
PATIENT
"BLD",10795,4,365,2,365,1,.03,0)
PAYER
"BLD",10795,4,365,2,365,1,.07,0)
DATE/TIME RECEIVED
"BLD",10795,4,365,2,365,1,.12,0)
INSUR RECORD IEN
"BLD",10795,4,365,2,365,1,.13,0)
EIV AUTO-UPDATE
"BLD",10795,4,365,222)
y^n^p^^^^n^^n
"BLD",10795,4,365,224)

"BLD",10795,4,"APDD",365,365)

"BLD",10795,4,"APDD",365,365,.02)

"BLD",10795,4,"APDD",365,365,.03)

"BLD",10795,4,"APDD",365,365,.07)

"BLD",10795,4,"APDD",365,365,.12)

"BLD",10795,4,"APDD",365,365,.13)

"BLD",10795,4,"B",365,365)

"BLD",10795,6)
6^
"BLD",10795,6.3)
29
"BLD",10795,"ABPKG")
n
"BLD",10795,"INID")
^n
"BLD",10795,"INIT")
IBY595PO
"BLD",10795,"KRN",0)
^9.67PA^779.2^20
"BLD",10795,"KRN",.4,0)
.4
"BLD",10795,"KRN",.4,"NM",0)
^9.68A^^
"BLD",10795,"KRN",.401,0)
.401
"BLD",10795,"KRN",.402,0)
.402
"BLD",10795,"KRN",.403,0)
.403
"BLD",10795,"KRN",.5,0)
.5
"BLD",10795,"KRN",.84,0)
.84
"BLD",10795,"KRN",3.6,0)
3.6
"BLD",10795,"KRN",3.8,0)
3.8
"BLD",10795,"KRN",9.2,0)
9.2
"BLD",10795,"KRN",9.8,0)
9.8
"BLD",10795,"KRN",9.8,"NM",0)
^9.68A^19^18
"BLD",10795,"KRN",9.8,"NM",1,0)
IBCNERPD^^0^B110303722
"BLD",10795,"KRN",9.8,"NM",2,0)
IBCNEHL3^^0^B171754905
"BLD",10795,"KRN",9.8,"NM",3,0)
IBCNEKIT^^0^B78057141
"BLD",10795,"KRN",9.8,"NM",4,0)
IBCNEKI2^^0^B9851422
"BLD",10795,"KRN",9.8,"NM",6,0)
IBCNBLL^^0^B157960738
"BLD",10795,"KRN",9.8,"NM",7,0)
IBCNEAME^^0^B13446799
"BLD",10795,"KRN",9.8,"NM",8,0)
IBCNSP01^^0^B52030470
"BLD",10795,"KRN",9.8,"NM",9,0)
IBCNEHL1^^0^B169495376
"BLD",10795,"KRN",9.8,"NM",10,0)
IBCNSMM^^0^B19301339
"BLD",10795,"KRN",9.8,"NM",11,0)
IBCNVRD1^^0^B208983433
"BLD",10795,"KRN",9.8,"NM",12,0)
IBCNBAR^^0^B66826717
"BLD",10795,"KRN",9.8,"NM",13,0)
IBCNEDST^^0^B64728722
"BLD",10795,"KRN",9.8,"NM",14,0)
IBCNERPF^^0^B38432371
"BLD",10795,"KRN",9.8,"NM",15,0)
IBCNERPG^^0^B57439598
"BLD",10795,"KRN",9.8,"NM",16,0)
IBCNERPH^^0^B52475568
"BLD",10795,"KRN",9.8,"NM",17,0)
IBCNSUR2^^0^B21196070
"BLD",10795,"KRN",9.8,"NM",18,0)
IBCNEDE2^^0^B91260138
"BLD",10795,"KRN",9.8,"NM",19,0)
IBCNEDE^^0^B48578031
"BLD",10795,"KRN",9.8,"NM","B","IBCNBAR",12)

"BLD",10795,"KRN",9.8,"NM","B","IBCNBLL",6)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEAME",7)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEDE",19)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEDE2",18)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEDST",13)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEHL1",9)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEHL3",2)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEKI2",4)

"BLD",10795,"KRN",9.8,"NM","B","IBCNEKIT",3)

"BLD",10795,"KRN",9.8,"NM","B","IBCNERPD",1)

"BLD",10795,"KRN",9.8,"NM","B","IBCNERPF",14)

"BLD",10795,"KRN",9.8,"NM","B","IBCNERPG",15)

"BLD",10795,"KRN",9.8,"NM","B","IBCNERPH",16)

"BLD",10795,"KRN",9.8,"NM","B","IBCNSMM",10)

"BLD",10795,"KRN",9.8,"NM","B","IBCNSP01",8)

"BLD",10795,"KRN",9.8,"NM","B","IBCNSUR2",17)

"BLD",10795,"KRN",9.8,"NM","B","IBCNVRD1",11)

"BLD",10795,"KRN",19,0)
19
"BLD",10795,"KRN",19,"NM",0)
^9.68A^^0
"BLD",10795,"KRN",19.1,0)
19.1
"BLD",10795,"KRN",101,0)
101
"BLD",10795,"KRN",409.61,0)
409.61
"BLD",10795,"KRN",771,0)
771
"BLD",10795,"KRN",779.2,0)
779.2
"BLD",10795,"KRN",870,0)
870
"BLD",10795,"KRN",8989.51,0)
8989.51
"BLD",10795,"KRN",8989.52,0)
8989.52
"BLD",10795,"KRN",8994,0)
8994
"BLD",10795,"KRN","B",.4,.4)

"BLD",10795,"KRN","B",.401,.401)

"BLD",10795,"KRN","B",.402,.402)

"BLD",10795,"KRN","B",.403,.403)

"BLD",10795,"KRN","B",.5,.5)

"BLD",10795,"KRN","B",.84,.84)

"BLD",10795,"KRN","B",3.6,3.6)

"BLD",10795,"KRN","B",3.8,3.8)

"BLD",10795,"KRN","B",9.2,9.2)

"BLD",10795,"KRN","B",9.8,9.8)

"BLD",10795,"KRN","B",19,19)

"BLD",10795,"KRN","B",19.1,19.1)

"BLD",10795,"KRN","B",101,101)

"BLD",10795,"KRN","B",409.61,409.61)

"BLD",10795,"KRN","B",771,771)

"BLD",10795,"KRN","B",779.2,779.2)

"BLD",10795,"KRN","B",870,870)

"BLD",10795,"KRN","B",8989.51,8989.51)

"BLD",10795,"KRN","B",8989.52,8989.52)

"BLD",10795,"KRN","B",8994,8994)

"BLD",10795,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",10795,"QUES",0)
^9.62^^
"BLD",10795,"REQB",0)
^9.611^8^3
"BLD",10795,"REQB",6,0)
IB*2.0*554^1
"BLD",10795,"REQB",7,0)
IB*2.0*601^1
"BLD",10795,"REQB",8,0)
IB*2.0*399^1
"BLD",10795,"REQB","B","IB*2.0*399",8)

"BLD",10795,"REQB","B","IB*2.0*554",6)

"BLD",10795,"REQB","B","IB*2.0*601",7)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^n^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,.02)

"FIA",365,365,.03)

"FIA",365,365,.07)

"FIA",365,365,.12)

"FIA",365,365,.13)

"INIT")
IBY595PO
"IX",365,365,"AD",0)
365^AD^Cross-reference for reports^R^^R^IR^I^365^^^^^S
"IX",365,365,"AD",.1,0)
^^1^1^3020610^
"IX",365,365,"AD",.1,1,0)
This cross-reference is used to generate reports.
"IX",365,365,"AD",1)
S ^IBCN(365,"AD",X(1),X(2),X(3),DA)=""
"IX",365,365,"AD",2)
K ^IBCN(365,"AD",X(1),X(2),X(3),DA)
"IX",365,365,"AD",2.5)
K ^IBCN(365,"AD")
"IX",365,365,"AD",11.1,0)
^.114IA^3^3
"IX",365,365,"AD",11.1,1,0)
1^F^365^.07^^1^F
"IX",365,365,"AD",11.1,1,3)

"IX",365,365,"AD",11.1,2,0)
2^F^365^.03^^2^F
"IX",365,365,"AD",11.1,2,3)

"IX",365,365,"AD",11.1,3,0)
3^F^365^.02^^3^F
"IX",365,365,"AD",11.1,3,3)

"IX",365,365,"AUTO",0)
365^AUTO^Cross reference for auto-update^R^^R^IR^I^365^^^^^S
"IX",365,365,"AUTO",.1,0)
^^2^2^3170821^
"IX",365,365,"AUTO",.1,1,0)
This cross reference is used to facilitate various
"IX",365,365,"AUTO",.1,2,0)
auto-update reporting.
"IX",365,365,"AUTO",1)
S ^IBCN(365,"AUTO",X(1),X(2),X(3),X(4),X(5),DA)=""
"IX",365,365,"AUTO",1.4)
S X=+$G(X(4))&(+$G(X(5)))
"IX",365,365,"AUTO",2)
K ^IBCN(365,"AUTO",X(1),X(2),X(3),X(4),X(5),DA)
"IX",365,365,"AUTO",2.5)
K ^IBCN(365,"AUTO")
"IX",365,365,"AUTO",11.1,0)
^.114IA^5^5
"IX",365,365,"AUTO",11.1,1,0)
1^F^365^.07^^1^F
"IX",365,365,"AUTO",11.1,1,3)

"IX",365,365,"AUTO",11.1,2,0)
2^F^365^.03^^2^F
"IX",365,365,"AUTO",11.1,2,3)

"IX",365,365,"AUTO",11.1,3,0)
3^F^365^.02^^3^F
"IX",365,365,"AUTO",11.1,3,3)

"IX",365,365,"AUTO",11.1,4,0)
4^F^365^.12^^4^F
"IX",365,365,"AUTO",11.1,4,3)

"IX",365,365,"AUTO",11.1,5,0)
5^F^365^.13^^5^F
"IX",365,365,"AUTO",11.1,5,3)

"MBREQ")
0
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
595^3180411^227
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
19
"RTN","IBCNBAR")
0^12^B66826717^B66457219
"RTN","IBCNBAR",1,0)
IBCNBAR ;ALB/ARH-Ins Buffer: process Accept and Reject ;15 Jan 2009
"RTN","IBCNBAR",2,0)
 ;;2.0;INTEGRATED BILLING;**82,240,345,413,416,497,528,554,595**;21-MAR-94;Build 29
"RTN","IBCNBAR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBAR",4,0)
 ;
"RTN","IBCNBAR",5,0)
 ;
"RTN","IBCNBAR",6,0)
ACCEPT(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBMVSUB,IBNEWINS,IBNEWGRP,IBNEWPOL,IBELIG,IBSEL,IBRIEN,IBSIEN,IBFNAM,IBVAL,IBHOLD,IBXHOLD) ; move buffer data into Insurance files then cleanup
"RTN","IBCNBAR",7,0)
 ;    1) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAR",8,0)
 ;    2) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAR",9,0)
 ;    3) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAR",10,0)
 ;    4) buffer ins/group/policy data deleted
"RTN","IBCNBAR",11,0)
 ;    5) buffer entry status updated
"RTN","IBCNBAR",12,0)
 ;
"RTN","IBCNBAR",13,0)
 N RESULT,IBSUPRES
"RTN","IBCNBAR",14,0)
 ;Set IBSUPRES to zero to not suppress I/O within Accept 
"RTN","IBCNBAR",15,0)
 S IBSUPRES=0
"RTN","IBCNBAR",16,0)
 ;
"RTN","IBCNBAR",17,0)
PROCESS ; process all changes selected by user, add/edit insurance files based
"RTN","IBCNBAR",18,0)
 ; on buffer data. Entry point for ACCEPAPI^IBCNICB (patch 413)
"RTN","IBCNBAR",19,0)
 ;
"RTN","IBCNBAR",20,0)
 N IVMINSUP,IBNEW,IBCDFN,RIEN S IBCDFN=IBPOLDA S:+IBNEWPOL IBNEW=1 D BEFORE^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",21,0)
 ;
"RTN","IBCNBAR",22,0)
 N DIR,X,Y,IBX,IBINSH,IBGRPH,IBPOLH,IBSUBH S (IBINSH,IBGRPH,IBPOLH,IBSUBH)="Updated" W:$G(IBSUPRES)'>0 " ...",!
"RTN","IBCNBAR",23,0)
 ;
"RTN","IBCNBAR",24,0)
 S RESULT(0)="-1^Add new INSURANCE COMPANY failed"
"RTN","IBCNBAR",25,0)
 I +IBNEWINS S IBINSDA=+$$NEWINS^IBCNBMN(IBBUFDA) G:'IBINSDA ACCPTQ  S IBINSH="Created",RESULT(1)="IBINSDA^"_IBINSDA
"RTN","IBCNBAR",26,0)
 ;
"RTN","IBCNBAR",27,0)
 S RESULT(0)="-1^Add new GROUP INSURANCE PLAN failed"
"RTN","IBCNBAR",28,0)
 I +IBNEWGRP S IBGRPDA=+$$NEWGRP^IBCNBMN(IBBUFDA,+IBINSDA) G:'IBGRPDA ACCPTQ S IBGRPH="Created",RESULT(2)="IBGRPDA^"_IBGRPDA
"RTN","IBCNBAR",29,0)
 ;
"RTN","IBCNBAR",30,0)
 S RESULT(0)="-1^Add new patient insurance policy failed"
"RTN","IBCNBAR",31,0)
 I +IBNEWPOL S IBPOLDA=+$$NEWPOL^IBCNBMN(IBBUFDA,+IBINSDA,+IBGRPDA) G:'IBPOLDA ACCPTQ S (IBPOLH,IBSUBH)="Created",RESULT(3)="IBPOLDA^"_IBPOLDA
"RTN","IBCNBAR",32,0)
 ;
"RTN","IBCNBAR",33,0)
 ;Only do this check for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",34,0)
 S RESULT(0)="-1^Move TYPE parameter value="_IBMVINS_" is invalid"
"RTN","IBCNBAR",35,0)
 I $G(IBSUPRES)>0,"^1^2^3^"'[("^"_IBMVINS_"^") Q
"RTN","IBCNBAR",36,0)
 ;
"RTN","IBCNBAR",37,0)
 S RESULT(0)="-1^Move buffer data to insurance files failed"
"RTN","IBCNBAR",38,0)
 I +IBINSDA,+IBMVINS D INS^IBCNBMI(IBBUFDA,IBINSDA,+IBMVINS,.RESULT) W:$G(IBSUPRES)'>0 !,"Insurance Company "_IBINSH_"..."
"RTN","IBCNBAR",39,0)
 I +IBINSDA,+IBMVGRP,+IBGRPDA D 
"RTN","IBCNBAR",40,0)
 . D GRP^IBCNBMI(IBBUFDA,IBGRPDA,+IBMVGRP,.RESULT)
"RTN","IBCNBAR",41,0)
 . ; For ICB Interface ensure INDIVIDUAL POLICY PATIENT (.1) field is
"RTN","IBCNBAR",42,0)
 . ; appropriate for IS THIS A GROUP POLICY? (.02) field
"RTN","IBCNBAR",43,0)
 . I $G(IBSUPRES)>0 D
"RTN","IBCNBAR",44,0)
 . . N IBFLDS,IBISGRP,IBPAT
"RTN","IBCNBAR",45,0)
 . . S IBISGRP=$$GET1^DIQ(355.3,IBGRPDA,.02,"I")
"RTN","IBCNBAR",46,0)
 . . S IBPAT=$$GET1^DIQ(355.3,IBGRPDA,.1,"I")
"RTN","IBCNBAR",47,0)
 . . ;Quit if Group Policy and .1 field isn't populated
"RTN","IBCNBAR",48,0)
 . . I IBISGRP>0,IBPAT'>0 Q
"RTN","IBCNBAR",49,0)
 . . ;Quit if Individual Policy and .1 field is populated.
"RTN","IBCNBAR",50,0)
 . . I IBISGRP'>0,IBPAT>0 Q
"RTN","IBCNBAR",51,0)
 . . ;Delete .1 field if Group Policy
"RTN","IBCNBAR",52,0)
 . . I IBISGRP>0 S IBFLDS(355.3,IBGRPDA_",",.1)="@"
"RTN","IBCNBAR",53,0)
 . . I IBISGRP'>0 S IBFLDS(355.3,IBGRPDA_",",.1)=DFN
"RTN","IBCNBAR",54,0)
 . . D FILE^DIE("","IBFLDS","IBERR")
"RTN","IBCNBAR",55,0)
 . W:$G(IBSUPRES)'>0 !,"Group/Plan "_IBGRPH_"..."
"RTN","IBCNBAR",56,0)
 I +IBINSDA,+IBMVPOL,+IBGRPDA,+IBPOLDA D POLICY^IBCNBMI(IBBUFDA,IBPOLDA,+IBMVPOL,.RESULT) W:$G(IBSUPRES)'>0 !,"Patient Policy "_IBPOLH_"..."
"RTN","IBCNBAR",57,0)
 ; I +IBELIG S RIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RIEN D GRPFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0),EBFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0) W:$G(IBSUPRES)'>0 !,"Eligibility/Benfits data Updated..."
"RTN","IBCNBAR",58,0)
 ;
"RTN","IBCNBAR",59,0)
 S RESULT(0)="-1^Move Patient Registration data into Insurance files failed"
"RTN","IBCNBAR",60,0)
 I +IBINSDA,+$G(IBMVSUB),+IBGRPDA,+IBPOLDA D SUB^IBCNBMI(IBBUFDA,IBPOLDA,IBRIEN,IBSEL,+IBMVSUB,.RESULT,DFN,IBFNAM,IBVAL,.IBHOLD,.IBXHOLD) W:$G(IBSUPRES)'>0 !,"Subscriber Insurance Information "_IBSUBH_"..."
"RTN","IBCNBAR",61,0)
 ;
"RTN","IBCNBAR",62,0)
 I +IBELIG S RIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RIEN D GRPFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0),EBFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0) W:$G(IBSUPRES)'>0 !,"Eligibility/Benefits data Updated..."  ;IB*2.0*554 Fix spelling error
"RTN","IBCNBAR",63,0)
 ;
"RTN","IBCNBAR",64,0)
 ;Only do this update for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",65,0)
 I $G(IBSUPRES)>0,+IBMVPOL,+IBGRPDA,+IBPOLDA,'IBNEWPOL D UPDPOL^IBCNICB(.RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBAR",66,0)
 ;
"RTN","IBCNBAR",67,0)
CLEANUP ; general updates and checks done whenever insurance is added/edited and clean up buffer file
"RTN","IBCNBAR",68,0)
 N IBSOURCE S IBSOURCE=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBAR",69,0)
 N RELHLD S RELHLD=0
"RTN","IBCNBAR",70,0)
 ;
"RTN","IBCNBAR",71,0)
 ;Don't do PAT^IBCNBMI for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",72,0)
 I $G(IBSUPRES)'>0,+IBPOLDA D PAT^IBCNBMI(DFN,IBPOLDA) ; update DOB&SSN of Pat Ins from Pat file
"RTN","IBCNBAR",73,0)
 D POL^IBCNSU41(DFN) ; update Tricare sponsor data
"RTN","IBCNBAR",74,0)
 D COVERED^IBCNSM31(DFN) ; update 'Covered by Insurance' field (2,.3192
"RTN","IBCNBAR",75,0)
 I +IBSOURCE=3 D IVM(1,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES)) ; update/notify IVM
"RTN","IBCNBAR",76,0)
 ;Suppress Write in $$DUPCO^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",77,0)
 I +IBINSDA,+IBPOLDA S IBX=$$DUPCO^IBCNSOK1(DFN,IBINSDA,IBPOLDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate policy added for patient
"RTN","IBCNBAR",78,0)
 S RESULT(0)="0"_$S($G(IBX):"^Warning - Duplicate or inconsistent insurance data",1:"")
"RTN","IBCNBAR",79,0)
 ;
"RTN","IBCNBAR",80,0)
 ;Suppress Write in $$DUPPOL^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",81,0)
 I +IBGRPDA S IBX=$$DUPPOL^IBCNSOK1(IBGRPDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate plan was added
"RTN","IBCNBAR",82,0)
 S:IBX RESULT(0)=RESULT(0)_"^Warning - Duplicate or inconsistent policy data"
"RTN","IBCNBAR",83,0)
 ;
"RTN","IBCNBAR",84,0)
 ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",85,0)
 I +IBNEWPOL I +$$PTHLD^IBOHCR(DFN,1,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",86,0)
 . W:$G(IBSUPRES)'>0 !!,"Patient's bills On Hold date updated due to new insurance."
"RTN","IBCNBAR",87,0)
 . S RESULT(0)=RESULT(0)_"^Patient's bills On Hold date updated due to new insurance"
"RTN","IBCNBAR",88,0)
 ;
"RTN","IBCNBAR",89,0)
 I $$HOLD^IBCNBLL(DFN) D
"RTN","IBCNBAR",90,0)
 . W:$G(IBSUPRES)'>0 !!,"There are bills On Hold for this patient."
"RTN","IBCNBAR",91,0)
 . S RESULT(0)=RESULT(0)_"^There are bills On Hold for this patient"
"RTN","IBCNBAR",92,0)
 ;
"RTN","IBCNBAR",93,0)
 ;Suppress DIR call functionality for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",94,0)
 D:$G(IBSUPRES)'>0
"RTN","IBCNBAR",95,0)
 . W !! S DIR(0)="FO",DIR("A")="Press 'V' to view the changes or Return to continue" D ^DIR
"RTN","IBCNBAR",96,0)
 . I Y="V"!(Y="v") D
"RTN","IBCNBAR",97,0)
 . . W !!
"RTN","IBCNBAR",98,0)
 . . D INS^IBCNBCD(IBBUFDA,IBINSDA),WAIT^IBCNBUH
"RTN","IBCNBAR",99,0)
 . . D GRP^IBCNBCD(IBBUFDA,IBGRPDA),WAIT^IBCNBUH
"RTN","IBCNBAR",100,0)
 . . D POLICY^IBCNBCD(IBBUFDA,IBPOLDA),WAIT^IBCNBUH
"RTN","IBCNBAR",101,0)
 . . S IBSIEN=$S(+IBPOLDA:IBPOLDA_","_DFN_",",1:0)
"RTN","IBCNBAR",102,0)
 . . I +IBSIEN,+$G(IBSEL) D SBDISP^IBCNBCD4(IBBUFDA,DFN,IBPOLDA,IBSEL,IBRIEN,IBSIEN,IBFNAM,IBVAL,.IBHOLD,.IBXHOLD),WAIT^IBCNBUH
"RTN","IBCNBAR",103,0)
 ;
"RTN","IBCNBAR",104,0)
 ; IB*2*595/DM if SOI is eIV, update insurance record IEN field in response file (#365/.12)
"RTN","IBCNBAR",105,0)
 I $P(^IBA(355.33,IBBUFDA,0),U,3)=$$FIND1^DIC(355.12,,,"eIV","C") D UPDIREC^IBCNEHL3($O(^IBCN(365,"AF",IBBUFDA,"")),IBPOLDA)
"RTN","IBCNBAR",106,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNBAR",107,0)
 D STATUS^IBCNBEE(IBBUFDA,"A",IBNEWINS,IBNEWGRP,IBNEWPOL) ; update buffer entry's status to accepted
"RTN","IBCNBAR",108,0)
 D DELDATA^IBCNBED(IBBUFDA) ; delete buffer's insurance/patient data
"RTN","IBCNBAR",109,0)
 ;
"RTN","IBCNBAR",110,0)
 ; IB*2.0*554
"RTN","IBCNBAR",111,0)
 I $$HOLD^IBCNBLL(DFN),'$$BUFFER^IBCNBU1(DFN) D RELHLD(DFN)
"RTN","IBCNBAR",112,0)
 ;I +DFN,RELHLD D
"RTN","IBCNBAR",113,0)
 ;. ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",114,0)
 ;. I +$$PTHLD^IBOHCR(DFN,2,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",115,0)
 ;. . I $G(IBSUPRES)'>0 W !!,"Patient has no other active Insurance.",!,"All patient bills On Hold waiting for Insurance to be released." D WAIT^IBCNBUH
"RTN","IBCNBAR",116,0)
 ;. . S RESULT=$G(RESULT)_"^Patient has no other active Insurance.  All patient bills On Hold waiting for Insurance to be released."
"RTN","IBCNBAR",117,0)
 ;
"RTN","IBCNBAR",118,0)
 S IBCDFN=IBPOLDA S:+IBSOURCE=3 IVMINSUP=1 D AFTER^IBCNSEVT,^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",119,0)
 ;
"RTN","IBCNBAR",120,0)
ACCPTQ Q
"RTN","IBCNBAR",121,0)
 ;
"RTN","IBCNBAR",122,0)
REJECT(IBBUFDA) ; process a buffer entry reject
"RTN","IBCNBAR",123,0)
 ;    1) update/notify IVM
"RTN","IBCNBAR",124,0)
 ;    2) buffer ins/group/policy data deleted
"RTN","IBCNBAR",125,0)
 ;    3) buffer entry status updated
"RTN","IBCNBAR",126,0)
 ;    4) if patient has no other active insurance then release any patient bills On Hold
"RTN","IBCNBAR",127,0)
 ;
"RTN","IBCNBAR",128,0)
 N IBSUPRES,RESULT,RELHLD
"RTN","IBCNBAR",129,0)
 ;Set IBSUPRES to 0 to not suppress I/O within REJECT
"RTN","IBCNBAR",130,0)
 S IBSUPRES=0,RELHLD=0
"RTN","IBCNBAR",131,0)
 ;
"RTN","IBCNBAR",132,0)
REJPROC ;Entry point for REJECAPI^IBCNICB (Patch 413)
"RTN","IBCNBAR",133,0)
 ;
"RTN","IBCNBAR",134,0)
 N DFN S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",135,0)
 N RELHLD S RELHLD=0
"RTN","IBCNBAR",136,0)
 S RESULT="-1^PATIENT IEN MISSING FROM BUFFER ENTRY" Q:'$G(DFN)
"RTN","IBCNBAR",137,0)
 I +$P($G(^IBA(355.33,+IBBUFDA,0)),U,3)=3 D IVM(0,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",138,0)
 ;
"RTN","IBCNBAR",139,0)
 S RESULT=0
"RTN","IBCNBAR",140,0)
 D STATUS^IBCNBEE(+IBBUFDA,"R",0,0,0),DELDATA^IBCNBED(+IBBUFDA) W:$G(IBSUPRES)'>0 " ... done."
"RTN","IBCNBAR",141,0)
 ;
"RTN","IBCNBAR",142,0)
 ; IB*2.0*554
"RTN","IBCNBAR",143,0)
 I $$HOLD^IBCNBLL(DFN),'$$BUFFER^IBCNBU1(DFN) D RELHLD(DFN)
"RTN","IBCNBAR",144,0)
 ;I +DFN,RELHLD D
"RTN","IBCNBAR",145,0)
 ;. ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",146,0)
 ;. I +$$PTHLD^IBOHCR(DFN,2,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",147,0)
 ;. . I $G(IBSUPRES)'>0 W !!,"Patient has no other active Insurance.",!,"All patient bills On Hold waiting for Insurance to be released." D WAIT^IBCNBUH
"RTN","IBCNBAR",148,0)
 ;. . S RESULT=$G(RESULT)_"^Patient has no other active Insurance.  All patient bills On Hold waiting for Insurance to be released."
"RTN","IBCNBAR",149,0)
 ;
"RTN","IBCNBAR",150,0)
 Q
"RTN","IBCNBAR",151,0)
 ;
"RTN","IBCNBAR",152,0)
 ;
"RTN","IBCNBAR",153,0)
IVM(AR,IBBUFDA,IVMREPTR,IBSUPRES) ; IVM must be notified whenever a buffer entry
"RTN","IBCNBAR",154,0)
 ; that originated in IVM is accepted or rejected. This lets IVM clean up
"RTN","IBCNBAR",155,0)
 ; its files since IVM also has a buffer type file of insurance uploaded
"RTN","IBCNBAR",156,0)
 ; from the IVM center.
"RTN","IBCNBAR",157,0)
 ; If rejected and Interactive Reads not suppressed, IVM then ask the 
"RTN","IBCNBAR",158,0)
 ; user for a reason it was rejected
"RTN","IBCNBAR",159,0)
 ; input:  AR = 1 if accepted, 0 if rejected
"RTN","IBCNBAR",160,0)
 ;    IBBUFDA = Internal Entry Number to 355.33 file
"RTN","IBCNBAR",161,0)
 ;   IVMREPTR = Internal Entry Number to 301.91 file (Optional)
"RTN","IBCNBAR",162,0)
 ;   IBSUPRES = If equals 1, suppress writes and interactive reads
"RTN","IBCNBAR",163,0)
 ;
"RTN","IBCNBAR",164,0)
 N DFN,IBX,IBY I $P($G(^IBA(355.33,+IBBUFDA,0)),U,3)'=3 Q
"RTN","IBCNBAR",165,0)
 ;
"RTN","IBCNBAR",166,0)
 S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",167,0)
 S IBX=$P($G(^IBA(355.33,+IBBUFDA,20)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,90)),U,2)  ; IB*2.0*497 (vd)
"RTN","IBCNBAR",168,0)
 ;
"RTN","IBCNBAR",169,0)
 S IBY=$$UPDATE^IVMLINS4(DFN,AR,IBX,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",170,0)
 Q
"RTN","IBCNBAR",171,0)
 ; ;IB*2.0*554
"RTN","IBCNBAR",172,0)
RELHLD(DFN) ;Check if need to release copay on hold
"RTN","IBCNBAR",173,0)
 N IBN,X3,X5,IBX,IBFR,IBAT,IBCAT,IBTALK,IBVDT
"RTN","IBCNBAR",174,0)
 S IBTALK=$S($G(IBSUPRES)>0:0,1:1)
"RTN","IBCNBAR",175,0)
 S IBN=0
"RTN","IBCNBAR",176,0)
 F  S IBN=$O(^IB("AH",DFN,IBN)) Q:IBN=""  D
"RTN","IBCNBAR",177,0)
 . S IBX=$G(^IB(IBN,0))
"RTN","IBCNBAR",178,0)
 . S X5=+$P(IBX,U,5) Q:X5'=8
"RTN","IBCNBAR",179,0)
 . S IBFR=$P(IBX,U,14)
"RTN","IBCNBAR",180,0)
 . S X3=$P(IBX,U,3)
"RTN","IBCNBAR",181,0)
 . S IBVDT=$S(IBFR'="":IBFR,1:DT),IBAT=$P(^IBE(350.1,X3,0),U,11)
"RTN","IBCNBAR",182,0)
 . S IBCAT=$S(IBAT<4:"INPATIENT",IBAT=4:"OUTPATIENT",IBAT=5:"PHARMACY",IBAT=8:"OUTPATIENT",IBAT=9:"INPATIENT",1:"")
"RTN","IBCNBAR",183,0)
 . S IBCAT=$O(^IBE(355.31,"B",IBCAT,""))
"RTN","IBCNBAR",184,0)
 . D CHKREL(DFN,IBVDT,IBN,IBCAT)
"RTN","IBCNBAR",185,0)
 Q
"RTN","IBCNBAR",186,0)
 ;
"RTN","IBCNBAR",187,0)
CHKREL(DFN,IBINDT,IBN,IBCAT) ; -- release copay
"RTN","IBCNBAR",188,0)
 ; --Input  DFN     = patient
"RTN","IBCNBAR",189,0)
 ;          IBINDT  = date to check
"RTN","IBCNBAR",190,0)
 ;          IBN     = ien of copay on hold
"RTN","IBCNBAR",191,0)
 ;          IBCAT   = category of hold
"RTN","IBCNBAR",192,0)
 ; will determine if hold should be released
"RTN","IBCNBAR",193,0)
 ;
"RTN","IBCNBAR",194,0)
 N IBCOV,IBDD,PLAN,POLCY,TRICHP,COV,CNT,TYPNAM,X,PLAN,ANYINS,INS,CHKCOV,PLNTYP
"RTN","IBCNBAR",195,0)
 S (IBCOV,CNT,COV,TRICHP,POLCY)=0
"RTN","IBCNBAR",196,0)
 I IBINDT="" S IBINDT=DT
"RTN","IBCNBAR",197,0)
 S IBINDT=IBINDT\1
"RTN","IBCNBAR",198,0)
 D ALL^IBCNS1(DFN,"IBDD",2,IBINDT) ;All active ins policies returned in IBDD array
"RTN","IBCNBAR",199,0)
 S ANYINS=($O(IBDD(0))'="")
"RTN","IBCNBAR",200,0)
 I 'ANYINS D RELEASE^IBOHCR(IBN) Q
"RTN","IBCNBAR",201,0)
 F  S POLCY=$O(IBDD(POLCY)) Q:'POLCY  D
"RTN","IBCNBAR",202,0)
 . S X=IBDD(POLCY,0)
"RTN","IBCNBAR",203,0)
 . S PLAN=$P(X,U,18) I PLAN="" Q
"RTN","IBCNBAR",204,0)
 . S INS=$P(X,U,1)_","
"RTN","IBCNBAR",205,0)
 . S COV=$$GET1^DIQ(36,INS,1,"I") S COV=$S(COV="N":0,1:1)
"RTN","IBCNBAR",206,0)
 . S TYPNAM=$$GET1^DIQ(36,INS,.13,"E"),CNT=CNT+1
"RTN","IBCNBAR",207,0)
 . S:TYPNAM["TRICARE" TRICHP=1 S:TYPNAM["CHAMPVA" TRICHP=1
"RTN","IBCNBAR",208,0)
 . I TYPNAM'["TRICARE",TYPNAM'["CHAMPVA",COV D
"RTN","IBCNBAR",209,0)
 . . I 'IBCOV S IBCOV=$$PLCOV^IBCNSU3(PLAN,IBINDT,IBCAT)
"RTN","IBCNBAR",210,0)
 ; remove hold if only has TRICARE OR CHAMPVA
"RTN","IBCNBAR",211,0)
 I $G(CNT)=1,TRICHP D RELEASE^IBOHCR(IBN) Q
"RTN","IBCNBAR",212,0)
 ; remove hold if multiple coverage and TRICARE or CHAMPVA and no ibcov
"RTN","IBCNBAR",213,0)
 I $G(CNT)>1,TRICHP I 'IBCOV D RELEASE^IBOHCR(IBN) Q
"RTN","IBCNBAR",214,0)
 ; remove hold if no TRICARE or CHAMPVA and no ibcov
"RTN","IBCNBAR",215,0)
 I 'TRICHP,'IBCOV D RELEASE^IBOHCR(IBN)
"RTN","IBCNBAR",216,0)
 Q
"RTN","IBCNBLL")
0^6^B157960738^B148784052
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438,435,506,519,528,549,601,595**;21-MAR-94;Build 29
"RTN","IBCNBLL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
 ; DBIA# 642 for call to $$LST^DGMTU
"RTN","IBCNBLL",6,0)
 ; DBIA# 4433 for call to $$SDAPI^SDAMA301
"RTN","IBCNBLL",7,0)
 ;
"RTN","IBCNBLL",8,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",9,0)
 N VIEW,AVIEW,DFLG,IBKEYS
"RTN","IBCNBLL",10,0)
 S VIEW=6,AVIEW=0 ; default to complete view ;IB*2*506/taz changed
"RTN","IBCNBLL",11,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",12,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",13,0)
 Q
"RTN","IBCNBLL",14,0)
 ;
"RTN","IBCNBLL",15,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",16,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",17,0)
 D INIT,HDR
"RTN","IBCNBLL",18,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",19,0)
 Q
"RTN","IBCNBLL",20,0)
 ;
"RTN","IBCNBLL",21,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",22,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",23,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",24,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active" ;IB*2*506/taz Only shows Verified and Active records.
"RTN","IBCNBLL",25,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active"  ;IB*2*506/taz Only shows Verified and N/Active records.
"RTN","IBCNBLL",26,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",27,0)
 I VIEW=4 S VALM("TITLE")="Failure Buffer",VALMSG="!Unable/Send"  ;IB*2*506/taz changed
"RTN","IBCNBLL",28,0)
 I VIEW=5 S VALM("TITLE")="e-Pharmacy Buffer",VALMSG="*Verified"     ; IB*2*435
"RTN","IBCNBLL",29,0)
 I VIEW=6 S VALM("TITLE")="Complete Buffer",VALMSG=""     ; IB*2*506/taz added
"RTN","IBCNBLL",30,0)
 I VIEW=7 S VALM("TITLE")="TRICARE/CHAMPVA",VALMSG=""   ;528/baa added
"RTN","IBCNBLL",31,0)
 Q
"RTN","IBCNBLL",32,0)
 ;
"RTN","IBCNBLL",33,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",34,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",35,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",36,0)
 S IBKEYS=$$GETKEYS(DUZ) ;IB*2*506/taz user must have either IB INSURANCE EDIT or IB GROUP/PLAN EDIT in order to view entries without defined insurance company entries
"RTN","IBCNBLL",37,0)
 D BLD
"RTN","IBCNBLL",38,0)
 Q
"RTN","IBCNBLL",39,0)
 ;
"RTN","IBCNBLL",40,0)
HELP ;  list manager help
"RTN","IBCNBLL",41,0)
 D FULL^VALM1
"RTN","IBCNBLL",42,0)
 S VALMBCK="R"
"RTN","IBCNBLL",43,0)
 W @IOF
"RTN","IBCNBLL",44,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",45,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",46,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",47,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",48,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",49,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",50,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",51,0)
 W !
"RTN","IBCNBLL",52,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",53,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",54,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",55,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",56,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",57,0)
 W !,"   P - Pre-Registration"
"RTN","IBCNBLL",58,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",59,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",60,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",61,0)
 W !,"   R - ICB Card Reader"
"RTN","IBCNBLL",62,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",63,0)
 W !,"   X - e-Pharmacy"           ; IB*2*435
"RTN","IBCNBLL",64,0)
 ; IB*2*595/DM K,T,U,B,O,N,S,A,J added
"RTN","IBCNBLL",65,0)
 W !,"   K - Kiosk"
"RTN","IBCNBLL",66,0)
 W !,"   F - Interfacility Insurance Update" ; IB*2*528
"RTN","IBCNBLL",67,0)
 W !,"   T - Insurance Import"
"RTN","IBCNBLL",68,0)
 W !,"   U - Purchased Care Choice"
"RTN","IBCNBLL",69,0)
 W !,"   B - Purchased Care Fee-Basis"
"RTN","IBCNBLL",70,0)
 W !,"   O - Purchased Care Other"
"RTN","IBCNBLL",71,0)
 W !,"   N - Insurance Intake"
"RTN","IBCNBLL",72,0)
 W !,"   S - Insurance Verification"
"RTN","IBCNBLL",73,0)
 W !,"   A - Veteran Appt Request"
"RTN","IBCNBLL",74,0)
 W !,"   J - MYVA Health Journal"
"RTN","IBCNBLL",75,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",76,0)
 ;
"RTN","IBCNBLL",77,0)
 I VIEW'=5 D     ; IB*2*435
"RTN","IBCNBLL",78,0)
 . W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",79,0)
 . W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",80,0)
 . Q
"RTN","IBCNBLL",81,0)
 ;
"RTN","IBCNBLL",82,0)
 I VIEW=1 D
"RTN","IBCNBLL",83,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",84,0)
 .W !,"      $ - Escalated active policy."
"RTN","IBCNBLL",85,0)
 .W !,"      * - Previously an active policy."
"RTN","IBCNBLL",86,0)
 .Q
"RTN","IBCNBLL",87,0)
 I VIEW=2 D
"RTN","IBCNBLL",88,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",89,0)
 .W !,"      * - Previously an not active policy."
"RTN","IBCNBLL",90,0)
 .Q
"RTN","IBCNBLL",91,0)
 I $F(",3,6,7,",VIEW) D   ;528/baa
"RTN","IBCNBLL",92,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",93,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",94,0)
 .W !,"      $ - Escalated Active policy."
"RTN","IBCNBLL",95,0)
 .W !,"      * - Previously either an active or not active policy."
"RTN","IBCNBLL",96,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",97,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",98,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",99,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",100,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",101,0)
 .W !,"      % - CMS responded with the patient's new MBI value."
"RTN","IBCNBLL",102,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",103,0)
 .Q
"RTN","IBCNBLL",104,0)
 I VIEW=4 D
"RTN","IBCNBLL",105,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",106,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",107,0)
 .Q
"RTN","IBCNBLL",108,0)
 ;
"RTN","IBCNBLL",109,0)
 I VIEW=5 D      ; IB*2*435
"RTN","IBCNBLL",110,0)
 . W !,"      e-Pharmacy buffer entries are not applicable for e-IV processing."
"RTN","IBCNBLL",111,0)
 . Q
"RTN","IBCNBLL",112,0)
 ;
"RTN","IBCNBLL",113,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",114,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",115,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",116,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",117,0)
 W !
"RTN","IBCNBLL",118,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",119,0)
 W !!
"RTN","IBCNBLL",120,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",121,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",122,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",123,0)
 W !!
"RTN","IBCNBLL",124,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",125,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",126,0)
 Q
"RTN","IBCNBLL",127,0)
 ;
"RTN","IBCNBLL",128,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",129,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",130,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",131,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",132,0)
 Q
"RTN","IBCNBLL",133,0)
 ;
"RTN","IBCNBLL",134,0)
BLD ;  build screen display
"RTN","IBCNBLL",135,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",136,0)
 ;
"RTN","IBCNBLL",137,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",138,0)
 ;
"RTN","IBCNBLL",139,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",140,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",141,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",142,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",143,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",144,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG) I IBLINE="" S IBCNT=IBCNT-1 Q  ; IB*2*506/taz If line is null stop processing this entry.
"RTN","IBCNBLL",145,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",146,0)
 ;
"RTN","IBCNBLL",147,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",148,0)
 Q
"RTN","IBCNBLL",149,0)
 ;
"RTN","IBCNBLL",150,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",151,0)
 N DFN,IB0,IB20,IB40,IB60,IBLINE,IBMTS,IBY,MCFLAG,VA,VADM,VAERR,VAIN,X,Y
"RTN","IBCNBLL",152,0)
 S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",153,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40)),MCFLAG=$$GTMFLG(IBBUFDA)  ;IB*2.0*549
"RTN","IBCNBLL",154,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",155,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",156,0)
 ;
"RTN","IBCNBLL",157,0)
 ;IB*2.0*549 - Replaced the following line of code:
"RTN","IBCNBLL",158,0)
 ;I 'IBKEYS,'$$ACTIVE(DFN) G BLDLNQ  ;IB*2*506/taz Only allow active insurance for users not holding IB INSURANCE EDIT or IB GROUP/PLAN EDIT keys
"RTN","IBCNBLL",159,0)
 ; With the following code that will determine if the list item is Medicare (+MCFLAG,) then include it on
"RTN","IBCNBLL",160,0)
 ; the list even if the user doesn't have the security keys and if the patient has ACTIVE or INACTIVE policies.
"RTN","IBCNBLL",161,0)
 I 'IBKEYS,'$$ACTIVE(DFN),'MCFLAG G BLDLNQ  ;IB*2.0*549
"RTN","IBCNBLL",162,0)
 ;
"RTN","IBCNBLL",163,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",164,0)
 ;
"RTN","IBCNBLL",165,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",166,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",167,0)
 ;
"RTN","IBCNBLL",168,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",169,0)
 I IBY="*" S IBY=" "  ;528/baa
"RTN","IBCNBLL",170,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",171,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",172,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",173,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",174,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",175,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",176,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",177,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",178,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",179,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",180,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",181,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",182,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",183,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",184,0)
BLDLNQ ; IB*2*506/taz Tag added
"RTN","IBCNBLL",185,0)
 Q IBLINE
"RTN","IBCNBLL",186,0)
 ;
"RTN","IBCNBLL",187,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",188,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",189,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",190,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",191,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",192,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",193,0)
 Q
"RTN","IBCNBLL",194,0)
 ;
"RTN","IBCNBLL",195,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",196,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",197,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,X,Y
"RTN","IBCNBLL",198,0)
 S IBCNT=0
"RTN","IBCNBLL",199,0)
 ;
"RTN","IBCNBLL",200,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",201,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",202,0)
 ;
"RTN","IBCNBLL",203,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",204,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",205,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",206,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",207,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",208,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",209,0)
 ..;
"RTN","IBCNBLL",210,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",211,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",212,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",213,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",214,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",215,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",216,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",217,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",218,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",219,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",220,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",221,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",222,0)
 ..;
"RTN","IBCNBLL",223,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",224,0)
 ..;
"RTN","IBCNBLL",225,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",226,0)
 ..; get future appointments
"RTN","IBCNBLL",227,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",228,0)
 ..S DFLG="" ;,APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag ;IB*2*506 appointment data removed.
"RTN","IBCNBLL",229,0)
 ..I $$INCL(VIEW,SYM,IB0) S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",230,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",231,0)
 ..Q
"RTN","IBCNBLL",232,0)
 .Q
"RTN","IBCNBLL",233,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",234,0)
 Q
"RTN","IBCNBLL",235,0)
 ;
"RTN","IBCNBLL",236,0)
INCL(VIEW,SYM,IB0) ;
"RTN","IBCNBLL",237,0)
 N INCL,IENS,IBEBI,MCFLAG
"RTN","IBCNBLL",238,0)
 S INCL=0
"RTN","IBCNBLL",239,0)
 ; IB*2*549 - Added 'MCFLAG to allow Medicare in the following line.
"RTN","IBCNBLL",240,0)
 S MCFLAG=$$GTMFLG(IBBUFDA)
"RTN","IBCNBLL",241,0)
 I 'IBKEYS,'MCFLAG,(SYM'="+") G INCLQ ; If users don't have required keys, they only see current Positive Entries.
"RTN","IBCNBLL",242,0)
 I VIEW=6 S INCL=1 G INCLQ  ;Include Everything  (Complete view)
"RTN","IBCNBLL",243,0)
 I VIEW=7,((INAME["TRICARE")!(INAME["CHAMPVA")) S INCL=1 G INCLQ  ; Tricare/Champva;528/baa 
"RTN","IBCNBLL",244,0)
 I VIEW=5,$P(IB0,U,17) S INCL=1 G INCLQ  ;Only e-Pharmacy on e-Pharmacy view (IB*2*435)
"RTN","IBCNBLL",245,0)
 I $P(IB0,U,17) G INCLQ  ;Exclude e-Pharmacy (IB*2*435)
"RTN","IBCNBLL",246,0)
 I VIEW=3,MCFLAG S INCL=1 G INCLQ ;Only Medicare View
"RTN","IBCNBLL",247,0)
 I MCFLAG G INCLQ  ;Exclude Medicare from Positive, Negative and Failure Views
"RTN","IBCNBLL",248,0)
 I VIEW=4,(SYM="!") S INCL=1 G INCLQ  ;Only failures on Failure view
"RTN","IBCNBLL",249,0)
 I VIEW=1,((SYM="+")!(SYM="$")) S INCL=1 G INCLQ  ;Positive View
"RTN","IBCNBLL",250,0)
 I VIEW=2,(SYM="-") S INCL=1 G INCLQ  ;Negative View
"RTN","IBCNBLL",251,0)
 I SYM="*" D  G INCLQ
"RTN","IBCNBLL",252,0)
 . ;find history in Response file for verified entries.
"RTN","IBCNBLL",253,0)
 . I $$GET1^DIQ(355.33,IBBUFDA,.15)="" S:(VIEW=1) INCL=1 Q  ;IIV PROCESSED DATE field is empty entry is positive
"RTN","IBCNBLL",254,0)
 . S IENS="1,"_$O(^IBCN(365,"AF",IBBUFDA,""))_","
"RTN","IBCNBLL",255,0)
 . ;the following line of code is necessary to check for both "eIV Eligibility Determination" and "IIV Eligibility Determination" (IB*2.0*506)
"RTN","IBCNBLL",256,0)
 . I $$GET1^DIQ(365.02,IENS,.06)["IV Eligibility Determination" Q
"RTN","IBCNBLL",257,0)
 . S IBEBI=$$GET1^DIQ(365.02,IENS,.02)  ;Eligibility/Benefits Info
"RTN","IBCNBLL",258,0)
 . I IBEBI=1 S:(VIEW=1) INCL=1 Q
"RTN","IBCNBLL",259,0)
 . I VIEW=2 S INCL=1 Q
"RTN","IBCNBLL",260,0)
INCLQ ;
"RTN","IBCNBLL",261,0)
 Q INCL
"RTN","IBCNBLL",262,0)
 ;
"RTN","IBCNBLL",263,0)
DATE(X) ;
"RTN","IBCNBLL",264,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",265,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",266,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",267,0)
 ;
"RTN","IBCNBLL",268,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",269,0)
 NEW IB0,SYM
"RTN","IBCNBLL",270,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",271,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",272,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",273,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",274,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",275,0)
 Q SYM
"RTN","IBCNBLL",276,0)
 ;
"RTN","IBCNBLL",277,0)
 ;
"RTN","IBCNBLL",278,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",279,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",280,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",281,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",282,0)
 ;
"RTN","IBCNBLL",283,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",284,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",285,0)
 ;
"RTN","IBCNBLL",286,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",287,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",288,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",289,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",290,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",291,0)
 ;
"RTN","IBCNBLL",292,0)
 ; if the action is EDITED then the line for the buffer entry is recompiled and the updated line is set into 
"RTN","IBCNBLL",293,0)
 ; the display array
"RTN","IBCNBLL",294,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",295,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",296,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",297,0)
 Q
"RTN","IBCNBLL",298,0)
 ;
"RTN","IBCNBLL",299,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",300,0)
 ; IB*2*595/DM T,U,B,O,N,S,A,K,J translations added
"RTN","IBCNBLL",301,0)
 N SRCSTR,CODE
"RTN","IBCNBLL",302,0)
 Q:SRC="" ""
"RTN","IBCNBLL",303,0)
 S SRCSTR="INTVW;I^DMTCH;D^IVM;V^PreRg;P^eIV;E^HMS;H^MCR;M^ICB;R^CS;C^eRxEL;X^IIU;F^INSPT;T^PCC;U^PCFB;B^PCOTR;O^INSIN;N^INSVR;S^VAR;A^KSK;K^MVAH;J"
"RTN","IBCNBLL",304,0)
 S CODE=$P($P(SRCSTR,SRC_";",2),U,1)
"RTN","IBCNBLL",305,0)
 Q CODE
"RTN","IBCNBLL",306,0)
 ;
"RTN","IBCNBLL",307,0)
 ;
"RTN","IBCNBLL",308,0)
 ;
"RTN","IBCNBLL",309,0)
GETKEYS(DUZ) ; 
"RTN","IBCNBLL",310,0)
 ;Make sure that user has the INSURANCE EDIT key and/or the GROUP/PLAN EDIT key.  User
"RTN","IBCNBLL",311,0)
 ;must have either key in order to see non_Positive Entries.
"RTN","IBCNBLL",312,0)
 N KEY1,KEY2
"RTN","IBCNBLL",313,0)
 S KEY1=$O(^DIC(19.1,"B","IB INSURANCE COMPANY EDIT","")) I KEY1 S KEY1=$D(^VA(200,DUZ,51,KEY1))
"RTN","IBCNBLL",314,0)
 S KEY2=$O(^DIC(19.1,"B","IB GROUP PLAN EDIT","")) I KEY2 S KEY2=$D(^VA(200,DUZ,51,KEY2))
"RTN","IBCNBLL",315,0)
 Q KEY1!KEY2
"RTN","IBCNBLL",316,0)
 ;
"RTN","IBCNBLL",317,0)
ACTIVE(DFN) ;Check for active insurance
"RTN","IBCNBLL",318,0)
 N IBINSCO
"RTN","IBCNBLL",319,0)
 D ALL^IBCNS1(DFN,"IBINSCO",3,DT,0)  ;IB*2.0*519 allow WNRs and Indemnity plans
"RTN","IBCNBLL",320,0)
 Q +$G(IBINSCO(0))
"RTN","IBCNBLL",321,0)
 ;
"RTN","IBCNBLL",322,0)
GTMFLG(IBBUFDA) ;Check if Medicare
"RTN","IBCNBLL",323,0)
 ; IB*2.0*549 Added method
"RTN","IBCNBLL",324,0)
 N MWNRIEN,MWNRFLG
"RTN","IBCNBLL",325,0)
 S MWNRFLG=0
"RTN","IBCNBLL",326,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",327,0)
 S MWNRFLG=0
"RTN","IBCNBLL",328,0)
 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",329,0)
 Q MWNRFLG
"RTN","IBCNEAME")
0^7^B13446799^B9090150
"RTN","IBCNEAME",1,0)
IBCNEAME ;DAOU/ESG - IIV AUTO MATCH ENTRY/EDIT ;29-APR-2002
"RTN","IBCNEAME",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,595**;21-MAR-94;Build 29
"RTN","IBCNEAME",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEAME",4,0)
 ;
"RTN","IBCNEAME",5,0)
ENTER ;
"RTN","IBCNEAME",6,0)
 NEW STOP,AMIEN,NEWENTRY,DUOUT,DTOUT
"RTN","IBCNEAME",7,0)
 D INIT
"RTN","IBCNEAME",8,0)
LOOP ;
"RTN","IBCNEAME",9,0)
 N DIR
"RTN","IBCNEAME",10,0)
 D LOOKUP() I STOP G EXIT   ; lookup or add an entry
"RTN","IBCNEAME",11,0)
 ; IB*595/HN Updates Add New Question and Delete logic
"RTN","IBCNEAME",12,0)
 I $G(NEWENTRY)=1 W !,$P(^IBCN(365.11,AMIEN,0),"^",1)_" is now associated with "_$P(^IBCN(365.11,AMIEN,0),"^",2),! G LOOP
"RTN","IBCNEAME",13,0)
 S DIR(0)="SA^E:Edit;D:Delete"
"RTN","IBCNEAME",14,0)
 S DIR("A")="Do you want to Edit or Delete this entry? "
"RTN","IBCNEAME",15,0)
 S DIR("B")="E"
"RTN","IBCNEAME",16,0)
 D ^DIR
"RTN","IBCNEAME",17,0)
 I $D(DUOUT) G LOOP
"RTN","IBCNEAME",18,0)
 I $D(DTOUT) G EXIT
"RTN","IBCNEAME",19,0)
 D @($S(Y="D":"DELETE",1:"EDIT")) I STOP G LOOP
"RTN","IBCNEAME",20,0)
 ;D EDIT I STOP G LOOP       ; edit the entry values
"RTN","IBCNEAME",21,0)
 ; IB*595 End
"RTN","IBCNEAME",22,0)
 D CONFIRM                  ; display a confirmation message
"RTN","IBCNEAME",23,0)
 G LOOP                     ; repeat
"RTN","IBCNEAME",24,0)
EXIT ;
"RTN","IBCNEAME",25,0)
 Q
"RTN","IBCNEAME",26,0)
 ;
"RTN","IBCNEAME",27,0)
 ;
"RTN","IBCNEAME",28,0)
INIT ; clear the screen; display the purpose of this option
"RTN","IBCNEAME",29,0)
 W @IOF
"RTN","IBCNEAME",30,0)
 W !?14,"Enter/Edit Insurance Company Name Auto Match Entries"
"RTN","IBCNEAME",31,0)
 W !!,"This option will allow you to enter, edit, and manage the entries in the"
"RTN","IBCNEAME",32,0)
 W !,"Insurance Company Auto Match file.  This file will aid in the proper selection"
"RTN","IBCNEAME",33,0)
 W !,"of Insurance Companies by associating together a valid, correct Insurance"
"RTN","IBCNEAME",34,0)
 W !,"Company name with an incorrect entry that a clerk may enter during data entry."
"RTN","IBCNEAME",35,0)
 W !
"RTN","IBCNEAME",36,0)
INITX ;
"RTN","IBCNEAME",37,0)
 Q
"RTN","IBCNEAME",38,0)
 ;
"RTN","IBCNEAME",39,0)
LOOKUP(DEFAULT) ; Procedure to look-up or add an entry
"RTN","IBCNEAME",40,0)
 ;
"RTN","IBCNEAME",41,0)
 ; Optional input parameter DEFAULT will be set if calling this
"RTN","IBCNEAME",42,0)
 ; procedure from routine IBCNEAMC.  Otherwise it will be undefined.
"RTN","IBCNEAME",43,0)
 ;
"RTN","IBCNEAME",44,0)
 NEW DA,DIC,DILN,DISYS,X,Y,DTOUT,DUOUT,DLAYGO
"RTN","IBCNEAME",45,0)
 S STOP=0
"RTN","IBCNEAME",46,0)
 S (AMIEN,NEWENTRY)=""
"RTN","IBCNEAME",47,0)
 S DIC="^IBCN(365.11,",DLAYGO=365.11
"RTN","IBCNEAME",48,0)
 S DIC(0)="AELMVZ"
"RTN","IBCNEAME",49,0)
 S DIC("A")="Select an Auto Match Entry: "
"RTN","IBCNEAME",50,0)
 I $G(DEFAULT)'="" S DIC("B")=DEFAULT
"RTN","IBCNEAME",51,0)
 S DIC("W")="D LIST^IBCNEAME(Y)"
"RTN","IBCNEAME",52,0)
 D ^DIC
"RTN","IBCNEAME",53,0)
 I Y=-1!$D(DTOUT)!$D(DUOUT) S STOP=1 G LOOKX
"RTN","IBCNEAME",54,0)
 S AMIEN=+Y
"RTN","IBCNEAME",55,0)
 I $P(Y,U,3) S NEWENTRY=1
"RTN","IBCNEAME",56,0)
LOOKX ;
"RTN","IBCNEAME",57,0)
 Q
"RTN","IBCNEAME",58,0)
 ;
"RTN","IBCNEAME",59,0)
EDIT ; Procedure to Edit the fields for this entry
"RTN","IBCNEAME",60,0)
 NEW DIE,DA,DR,DTOUT,D,D0,DDH,DI,DIC,DISYS,DQ,DZ,X,Y
"RTN","IBCNEAME",61,0)
 S DIE=365.11
"RTN","IBCNEAME",62,0)
 S DA=AMIEN
"RTN","IBCNEAME",63,0)
 S DR=".01;.02;.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEAME",64,0)
 I NEWENTRY D
"RTN","IBCNEAME",65,0)
 . ; if this is a new entry, then stuff in all of these fields
"RTN","IBCNEAME",66,0)
 . ; without user interaction
"RTN","IBCNEAME",67,0)
 . S DR=".03////"_$$NOW^XLFDT_";.04////"_DUZ
"RTN","IBCNEAME",68,0)
 . S DR=DR_";.05////"_$$NOW^XLFDT_";.06////"_DUZ
"RTN","IBCNEAME",69,0)
 . S DR=DR_";.07////"_$P($G(^IBCN(365.11,DA,0)),U,1)
"RTN","IBCNEAME",70,0)
 . S DR=DR_";.08////"_$P($G(^IBCN(365.11,DA,0)),U,2)
"RTN","IBCNEAME",71,0)
 . Q
"RTN","IBCNEAME",72,0)
 D ^DIE
"RTN","IBCNEAME",73,0)
 I $D(Y) W ! S STOP=1 G EDITX         ; user entered up arrow
"RTN","IBCNEAME",74,0)
 I '$D(DA) W !!?3,"This entry has been deleted.",! S STOP=1 G EDITX
"RTN","IBCNEAME",75,0)
EDITX ;
"RTN","IBCNEAME",76,0)
 Q
"RTN","IBCNEAME",77,0)
 ;
"RTN","IBCNEAME",78,0)
CONFIRM ; Display a confirmation message indicating what was filed
"RTN","IBCNEAME",79,0)
 NEW DATA
"RTN","IBCNEAME",80,0)
 I 'AMIEN G CONFX
"RTN","IBCNEAME",81,0)
 S DATA=$G(^IBCN(365.11,AMIEN,0))
"RTN","IBCNEAME",82,0)
 W !!?3,$P(DATA,U,1)," is now associated with ",$P(DATA,U,2),".",!
"RTN","IBCNEAME",83,0)
CONFX ;
"RTN","IBCNEAME",84,0)
 Q
"RTN","IBCNEAME",85,0)
 ;
"RTN","IBCNEAME",86,0)
LIST(IEN) ; FileMan lister display
"RTN","IBCNEAME",87,0)
 NEW DATA,D1,D2
"RTN","IBCNEAME",88,0)
 ; DATA=^IBCN(365.11,IEN,0)
"RTN","IBCNEAME",89,0)
 S DATA=^(0)
"RTN","IBCNEAME",90,0)
 S D1=$P(DATA,U,1),D2=$P(DATA,U,2)
"RTN","IBCNEAME",91,0)
 W $$FO^IBCNEUT1("",12-$L(D1))," is associated with ",D2
"RTN","IBCNEAME",92,0)
LISTX ;
"RTN","IBCNEAME",93,0)
 Q
"RTN","IBCNEAME",94,0)
 ;
"RTN","IBCNEAME",95,0)
DELETE ; Verify Delete
"RTN","IBCNEAME",96,0)
 N DIK,DIR
"RTN","IBCNEAME",97,0)
 S DIR(0)="Y"
"RTN","IBCNEAME",98,0)
 S DIR("A")="Are you sure you want to delete <"_$P(^IBCN(365.11,AMIEN,0),"^")_">: "
"RTN","IBCNEAME",99,0)
 S DIR("B")="N"
"RTN","IBCNEAME",100,0)
 D ^DIR
"RTN","IBCNEAME",101,0)
 I $G(Y(0))'="YES" G DELETEX
"RTN","IBCNEAME",102,0)
 S DIK="^IBCN(365.11,",DA=AMIEN D ^DIK
"RTN","IBCNEAME",103,0)
 W !,"This entry has been deleted.",!
"RTN","IBCNEAME",104,0)
DELETEX ;
"RTN","IBCNEAME",105,0)
 S STOP=1
"RTN","IBCNEAME",106,0)
 Q
"RTN","IBCNEDE")
0^19^B48578031^B35885367
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;07-MAY-2015
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,497,549,593,595**;21-MAR-94;Build 29
"RTN","IBCNEDE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 ;
"RTN","IBCNEDE",25,0)
 ; IB*2.0*549 - Quit if Nightly Extract Master switch is off
"RTN","IBCNEDE",26,0)
 Q:$$GET1^DIQ(350.9,"1,",51.28,"I")="N"
"RTN","IBCNEDE",27,0)
 ;
"RTN","IBCNEDE",28,0)
 N $ES,$ET
"RTN","IBCNEDE",29,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",30,0)
 ; Check lock
"RTN","IBCNEDE",31,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",32,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",33,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",34,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",35,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",36,0)
 ;  the existing utility
"RTN","IBCNEDE",37,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 D CHKPER ; IB*2.0*595/DM Check for New Person (#200) EIV entries 
"RTN","IBCNEDE",40,0)
 ; 
"RTN","IBCNEDE",41,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",42,0)
 ; before the extract is run
"RTN","IBCNEDE",43,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",44,0)
 ;
"RTN","IBCNEDE",45,0)
 ;IB*2.0*593/TAZ/HAN - Add job to update Covered by Health Insurance flag
"RTN","IBCNEDE",46,0)
 D EN^IBCNERTC($P($$NOW^XLFDT,"."))
"RTN","IBCNEDE",47,0)
 ;
"RTN","IBCNEDE",48,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",49,0)
 ;
"RTN","IBCNEDE",50,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",51,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",52,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",53,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",54,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",55,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",56,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",57,0)
 ; Send enrollment message
"RTN","IBCNEDE",58,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",59,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",60,0)
 I '$G(QFL) D
"RTN","IBCNEDE",61,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",62,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",63,0)
 . KILL QFL
"RTN","IBCNEDE",64,0)
 . ;
"RTN","IBCNEDE",65,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",66,0)
 ;
"RTN","IBCNEDE",67,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",68,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",69,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",70,0)
 D DSTQ        ; queue daily statistical message to FSC
"RTN","IBCNEDE",71,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",72,0)
 ;  eligible to be purged
"RTN","IBCNEDE",73,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",74,0)
 ;
"RTN","IBCNEDE",75,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",76,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",77,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",78,0)
 Q
"RTN","IBCNEDE",79,0)
 ;
"RTN","IBCNEDE",80,0)
TBLCHK() ;
"RTN","IBCNEDE",81,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",82,0)
 ; have been loaded
"RTN","IBCNEDE",83,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",84,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",85,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",86,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",87,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",88,0)
 I PAYOK D
"RTN","IBCNEDE",89,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",90,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",91,0)
 ;
"RTN","IBCNEDE",92,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",93,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",94,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",95,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",96,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",97,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",98,0)
 . Q:QFL'=""
"RTN","IBCNEDE",99,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",100,0)
 KILL CT
"RTN","IBCNEDE",101,0)
 Q
"RTN","IBCNEDE",102,0)
 ;
"RTN","IBCNEDE",103,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",104,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",105,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",106,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",107,0)
 N STALEDT
"RTN","IBCNEDE",108,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",109,0)
 Q STALEDT
"RTN","IBCNEDE",110,0)
 ;
"RTN","IBCNEDE",111,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",112,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",113,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",114,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",115,0)
 ;
"RTN","IBCNEDE",116,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",117,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",118,0)
 ;
"RTN","IBCNEDE",119,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",120,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",121,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",122,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",123,0)
 ;
"RTN","IBCNEDE",124,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",125,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",126,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",127,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",128,0)
 ;
"RTN","IBCNEDE",129,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",130,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",131,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",132,0)
 ;
"RTN","IBCNEDE",133,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",134,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",135,0)
 ;
"RTN","IBCNEDE",136,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",137,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",138,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",139,0)
 S ZTIO=""
"RTN","IBCNEDE",140,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",141,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",142,0)
 ;
"RTN","IBCNEDE",143,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",144,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",145,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",146,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",147,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",148,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",149,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",150,0)
 ;
"RTN","IBCNEDE",151,0)
MMQX ;
"RTN","IBCNEDE",152,0)
 Q
"RTN","IBCNEDE",153,0)
 ;
"RTN","IBCNEDE",154,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",155,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",156,0)
 D ^%ZTER
"RTN","IBCNEDE",157,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",158,0)
 Q
"RTN","IBCNEDE",159,0)
 ;
"RTN","IBCNEDE",160,0)
DSTQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",161,0)
 ; sending of the daily statistical message to FSC.
"RTN","IBCNEDE",162,0)
 ;
"RTN","IBCNEDE",163,0)
 N IIV,CURRTIME,MTIME,MSG,MGRP
"RTN","IBCNEDE",164,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",165,0)
 ;
"RTN","IBCNEDE",166,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",167,0)
 I '$P(IIV,U,3) G DSTQX          ; MM message time is not defined
"RTN","IBCNEDE",168,0)
 ;
"RTN","IBCNEDE",169,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",170,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",171,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",172,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",173,0)
 ;
"RTN","IBCNEDE",174,0)
 ; If the current time is after the MailMan message time, then schedule the message for tomorrow at that time.
"RTN","IBCNEDE",175,0)
 ; Otherwise, schedule it for later today.
"RTN","IBCNEDE",176,0)
 S ZTDTH=$S(CURRTIME>MTIME:$H+1,1:+$H)_","_MTIME
"RTN","IBCNEDE",177,0)
 ;
"RTN","IBCNEDE",178,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",179,0)
 S ZTRTN="EN1^IBCNEHLM"
"RTN","IBCNEDE",180,0)
 S ZTDESC="eIV Daily Statistics HL7 Message"
"RTN","IBCNEDE",181,0)
 S ZTIO=""
"RTN","IBCNEDE",182,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",183,0)
 I $G(ZTSK) G DSTQX    ; Task# is OK so get out
"RTN","IBCNEDE",184,0)
 ;
"RTN","IBCNEDE",185,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",186,0)
 S MSG(1)="TaskManager could not schedule the daily eIV Statistics HL7 message"
"RTN","IBCNEDE",187,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",188,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",189,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",190,0)
 S MGRP=$$MGRP^IBCNEUT5() I MGRP'="" D MSG^IBCNEUT5(MGRP,"eIV Statistical HL7 Message Not Sent","MSG(")
"RTN","IBCNEDE",191,0)
 ;
"RTN","IBCNEDE",192,0)
DSTQX ;
"RTN","IBCNEDE",193,0)
 Q
"RTN","IBCNEDE",194,0)
 ;
"RTN","IBCNEDE",195,0)
CHKPER ; IB*2.0*595/DM
"RTN","IBCNEDE",196,0)
 ; check for the existence of New Person: "INTERFACE,IB EIV" and/or "AUTOUPDATE,IBEIV"
"RTN","IBCNEDE",197,0)
 ; send a mailman message to "vhaeinsurancerr@domain.ext" if either/both are missing.
"RTN","IBCNEDE",198,0)
 ;
"RTN","IBCNEDE",199,0)
 N IBA,IBI,WKDT,IBMCT,MSG,MGRP,IBXMY
"RTN","IBCNEDE",200,0)
 ;
"RTN","IBCNEDE",201,0)
 S IBA=+$$FIND1^DIC(200,,"M","AUTOUPDATE,IBEIV"),IBI=+$$FIND1^DIC(200,,"M","INTERFACE,IB EIV")
"RTN","IBCNEDE",202,0)
 I IBA,IBI Q
"RTN","IBCNEDE",203,0)
 ;
"RTN","IBCNEDE",204,0)
 S WKDT=$$SITE^VASITE()
"RTN","IBCNEDE",205,0)
 S MSG(1)="Missing EIV New Person entries, for station "_$P(WKDT,U,3)_":"_$P(WKDT,U,2)
"RTN","IBCNEDE",206,0)
 S MSG(2)="-------------------------------------------------------------------------------"
"RTN","IBCNEDE",207,0)
 S IBMCT=2
"RTN","IBCNEDE",208,0)
 I 'IBA S MSG(IBMCT)="Entry for 'AUTOUPDATE,IBEIV' is missing",IBMCT=IBMCT+1
"RTN","IBCNEDE",209,0)
 I 'IBI S MSG(IBMCT)="Entry for 'INTERFACE,IB EIV' is missing",IBMCT=IBMCT+1
"RTN","IBCNEDE",210,0)
 S MSG(IBMCT)="-------------------------------------------------------------------------------"
"RTN","IBCNEDE",211,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",212,0)
 S IBXMY("vhaeinsurancerr@domain.ext")=""
"RTN","IBCNEDE",213,0)
 D MSG^IBCNEUT5(MGRP,"Missing EIV New Person entries ("_$P(WKDT,U,3)_")","MSG(",,.IBXMY)
"RTN","IBCNEDE",214,0)
 Q
"RTN","IBCNEDE2")
0^18^B91260138^B88831173
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;23-SEP-2015
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416,438,506,549,593,595**;21-MAR-94;Build 29
"RTN","IBCNEDE2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ; IB*2.0*593 - Added EXCLTOC,EXCLTOP now initialized at top. Removed YY.
"RTN","IBCNEDE2",15,0)
 ; IB*2.0*549 - Added YY,ZZ, Re-Arranged in alphabetical order
"RTN","IBCNEDE2",16,0)
 N ACTINS,APTDT,CLNC,CNT,DATA1,DATA2,DFN,DISYS,ELG,ENDDT,EXCLTOC,EXCLTOP,FOUND1,FOUND2,FRESHDAY
"RTN","IBCNEDE2",17,0)
 N FRESHDT,GIEN,IBCNETOT,IBDDI,IBINDT,IBINS,IBSDA,IBSDATA,IBOUTP,INREC,INS,INSIEN,INSNAME
"RTN","IBCNEDE2",18,0)
 N MAXCNT,MCAREFLG,NUM,OK,PATID,PAYER,PAYERID,PAYERSTR,PIEN
"RTN","IBCNEDE2",19,0)
 N SETSTR,SID,SIDACT,SIDARRAY,SIDCNT,SIDDATA,SLCCRIT1,SRVICEDT,SUPPBUFF,SYMBOL
"RTN","IBCNEDE2",20,0)
 N TODAYSDT,TQIEN,QURYFLAG,VAIN,VDATE,YY,ZZ
"RTN","IBCNEDE2",21,0)
 ;
"RTN","IBCNEDE2",22,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",23,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",24,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",25,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",27,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",29,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",30,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",31,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",32,0)
 S EXCLTOC=$$GETELST(355.2) ; Initialize excluded TYPEs OF COVERAGE IB*2.0*593
"RTN","IBCNEDE2",33,0)
 S EXCLTOP=$$GETELST(355.1) ; Initialize excluded TYPEs OF PLAN IB*2.0*593
"RTN","IBCNEDE2",34,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",35,0)
 ;
"RTN","IBCNEDE2",36,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",37,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",38,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",39,0)
 . ;
"RTN","IBCNEDE2",40,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",41,0)
 . ;
"RTN","IBCNEDE2",42,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",43,0)
 ;
"RTN","IBCNEDE2",44,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",45,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",46,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",47,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",48,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",49,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",50,0)
 ;
"RTN","IBCNEDE2",51,0)
 ;
"RTN","IBCNEDE2",52,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",53,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",54,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",55,0)
 . ;
"RTN","IBCNEDE2",56,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",57,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",58,0)
 .. ;
"RTN","IBCNEDE2",59,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",60,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",61,0)
 .. ;
"RTN","IBCNEDE2",62,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",63,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",64,0)
 ... ;
"RTN","IBCNEDE2",65,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",66,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",67,0)
 ... ;
"RTN","IBCNEDE2",68,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",69,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",70,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",71,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",72,0)
 ... ;
"RTN","IBCNEDE2",73,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",74,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",75,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",76,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",77,0)
 ... ; IB*2.0*549 removed the following line
"RTN","IBCNEDE2",78,0)
 ... ;I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",79,0)
 ... ;
"RTN","IBCNEDE2",80,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",81,0)
 ... ;
"RTN","IBCNEDE2",82,0)
 ... K ACTINS
"RTN","IBCNEDE2",83,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",84,0)
 ... ;
"RTN","IBCNEDE2",85,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",86,0)
 ... ;
"RTN","IBCNEDE2",87,0)
 ... S INREC=0 ; Record IEN
"RTN","IBCNEDE2",88,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",89,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",90,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",91,0)
 ... . ;
"RTN","IBCNEDE2",92,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Coverages
"RTN","IBCNEDE2",93,0)
 ... . ; IB*2.0*593 Moved exclusion list initialization to top execution level.
"RTN","IBCNEDE2",94,0)
 ... . S ZZ=$$GET1^DIQ(36,INSIEN_",",.13,"I")    ; Type of Coverage
"RTN","IBCNEDE2",95,0)
 ... . ;S YY=$$GETELST(355.2)                    ; Type of Coverages to exclude
"RTN","IBCNEDE2",96,0)
 ... . ;Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Coverage
"RTN","IBCNEDE2",97,0)
 ... . Q:EXCLTOC[("^"_ZZ_"^")                    ; Excluded Type of Coverage
"RTN","IBCNEDE2",98,0)
 ... . ;
"RTN","IBCNEDE2",99,0)
 ... . ; Exclude policies that have been verified within "freshness days"
"RTN","IBCNEDE2",100,0)
 ... . S VDATE=$P($G(ACTINS(INREC,1)),U,3)
"RTN","IBCNEDE2",101,0)
 ... . I VDATE'="",SRVICEDT'>$$FMADD^XLFDT(VDATE,FRESHDAY) Q
"RTN","IBCNEDE2",102,0)
 ... . ; Allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",103,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",104,0)
 ... . ; Exclude pharmacy policies IB*2.0*549 - Commented out following line
"RTN","IBCNEDE2",105,0)
 ... . ;I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",106,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",107,0)
 ... . ;
"RTN","IBCNEDE2",108,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Plans
"RTN","IBCNEDE2",109,0)
 ... . ; IB*2.0*593/TAZ Moved exclusion list initialization to top execution level.
"RTN","IBCNEDE2",110,0)
 ... . S ZZ=$$GET1^DIQ(355.3,GIEN_",",.09,"I")   ; Type of Plan
"RTN","IBCNEDE2",111,0)
 ... . ;S YY=$$GETELST(355.1)                    ; Type of Plans to exclude
"RTN","IBCNEDE2",112,0)
 ... . ;Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Plan
"RTN","IBCNEDE2",113,0)
 ... . Q:EXCLTOP[("^"_ZZ_"^")                        ; Excluded Type of Plan
"RTN","IBCNEDE2",114,0)
 ... . ;
"RTN","IBCNEDE2",115,0)
 ... . ;I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q  ; IB*2.0*549 - Removed line
"RTN","IBCNEDE2",116,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",117,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",118,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",119,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",120,0)
 ... . ;
"RTN","IBCNEDE2",121,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",122,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",123,0)
 ... . ;
"RTN","IBCNEDE2",124,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",125,0)
 ... . ;
"RTN","IBCNEDE2",126,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",127,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",128,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",129,0)
 ... . ;
"RTN","IBCNEDE2",130,0)
 ... . ; If Payer is Nationally Inactive create an Insurance Buffer record w/blank SYMBOL & quit. - IB*2.0*506
"RTN","IBCNEDE2",131,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) D  Q
"RTN","IBCNEDE2",132,0)
 ... .. S SYMBOL=""
"RTN","IBCNEDE2",133,0)
 ... .. I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",134,0)
 ... .. Q
"RTN","IBCNEDE2",135,0)
 ... . ;
"RTN","IBCNEDE2",136,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",137,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",138,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",139,0)
 ... . ;
"RTN","IBCNEDE2",140,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",141,0)
 ... . ;  date range
"RTN","IBCNEDE2",142,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",143,0)
 ... . ;
"RTN","IBCNEDE2",144,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",145,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",146,0)
 ... . ;
"RTN","IBCNEDE2",147,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",148,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",149,0)
 ... . ;
"RTN","IBCNEDE2",150,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",151,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",152,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",153,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",154,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",155,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",156,0)
 ... . ;
"RTN","IBCNEDE2",157,0)
 ... . S SID=""
"RTN","IBCNEDE2",158,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",159,0)
 ... . I SIDACT=4 D
"RTN","IBCNEDE2",160,0)
 ... . . D SET("","",PATID)
"RTN","IBCNEDE2",161,0)
 ... . . S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",162,0)
 ... . Q
"RTN","IBCNEDE2",163,0)
 ... Q
"RTN","IBCNEDE2",164,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",165,0)
 Q
"RTN","IBCNEDE2",166,0)
 ;
"RTN","IBCNEDE2",167,0)
GETELST(FILE) ; Returns a '^' delimited list of Type of Plans or Type of
"RTN","IBCNEDE2",168,0)
 ; coverages to be excluded with leading and trailing '^'s
"RTN","IBCNEDE2",169,0)
 ; IB*2.0*549 Added method
"RTN","IBCNEDE2",170,0)
 ; IB*2.0*593 Added NO-FAULT INSURANCE. Refactored.
"RTN","IBCNEDE2",171,0)
 ; Input: FILE  - 355.1 - Return a list of Type of Plans to be excluded
"RTN","IBCNEDE2",172,0)
 ;                355.2 - Return a list of Type of Coverages to be excluded
"RTN","IBCNEDE2",173,0)
 ; Returns: '^' delimited list of Type of Plans or Type of Coverages
"RTN","IBCNEDE2",174,0)
 ;          to be excluded
"RTN","IBCNEDE2",175,0)
 ;N EXCLIST,IEN,NM,XX
"RTN","IBCNEDE2",176,0)
 ;S EXCLIST="",NM("AUTOMOBILE")="",NM("MEDI-CAL")="",NM("TORT FEASOR")=""
"RTN","IBCNEDE2",177,0)
 ;S NM("WORKERS' COMPENSATION INSURANCE")="",NM("VA SPECIAL CLASS")=""
"RTN","IBCNEDE2",178,0)
 ;S NM("MEDICAID")=""
"RTN","IBCNEDE2",179,0)
 ;S XX=""
"RTN","IBCNEDE2",180,0)
 ;F  D  Q:XX=""
"RTN","IBCNEDE2",181,0)
 ;. S XX=$O(NM(XX))
"RTN","IBCNEDE2",182,0)
 ;. Q:XX=""
"RTN","IBCNEDE2",183,0)
 ;. S IEN=""
"RTN","IBCNEDE2",184,0)
 ;. F  D  Q:IEN=""
"RTN","IBCNEDE2",185,0)
 ;. . S IEN=$O(^IBE(FILE,"B",XX,IEN))
"RTN","IBCNEDE2",186,0)
 ;. . Q:IEN=""
"RTN","IBCNEDE2",187,0)
 ;. . S EXCLIST=$S(EXCLIST="":IEN,1:EXCLIST_"^"_IEN)
"RTN","IBCNEDE2",188,0)
 N EXCLIST,TYPE
"RTN","IBCNEDE2",189,0)
 S EXCLIST=""
"RTN","IBCNEDE2",190,0)
 F TYPE="AUTOMOBILE","MEDICAID","MEDI-CAL","NO-FAULT INSURANCE","TORT FEASOR","WORKERS' COMPENSATION INSURANCE","VA SPECIAL CLASS" D
"RTN","IBCNEDE2",191,0)
 . N IEN S IEN=$O(^IBE(FILE,"B",TYPE,""))
"RTN","IBCNEDE2",192,0)
 . Q:IEN=""
"RTN","IBCNEDE2",193,0)
 . S EXCLIST=$S(EXCLIST="":IEN,1:EXCLIST_"^"_IEN)
"RTN","IBCNEDE2",194,0)
 Q "^"_EXCLIST_"^"
"RTN","IBCNEDE2",195,0)
 ;
"RTN","IBCNEDE2",196,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",197,0)
 S OK=1
"RTN","IBCNEDE2",198,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",199,0)
 Q
"RTN","IBCNEDE2",200,0)
 ;
"RTN","IBCNEDE2",201,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",202,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",203,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",204,0)
 S OK=1
"RTN","IBCNEDE2",205,0)
 Q
"RTN","IBCNEDE2",206,0)
 ;
"RTN","IBCNEDE2",207,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",208,0)
 D INP^VADPT
"RTN","IBCNEDE2",209,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",210,0)
 K VAIN
"RTN","IBCNEDE2",211,0)
 S OK=1
"RTN","IBCNEDE2",212,0)
 Q
"RTN","IBCNEDE2",213,0)
 ;
"RTN","IBCNEDE2",214,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",215,0)
 ;
"RTN","IBCNEDE2",216,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",217,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",218,0)
 ;
"RTN","IBCNEDE2",219,0)
 ; IB*2*595/DM add DATA5 to the SETTQ call 
"RTN","IBCNEDE2",220,0)
 N DATA5
"RTN","IBCNEDE2",221,0)
 ;
"RTN","IBCNEDE2",222,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",223,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",224,0)
 ;
"RTN","IBCNEDE2",225,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",226,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",227,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",228,0)
 ;
"RTN","IBCNEDE2",229,0)
 S DATA5=$$FIND1^DIC(355.12,,,"eIV","C")  ; Set to IEN of "eIV" Source of Information
"RTN","IBCNEDE2",230,0)
 ;
"RTN","IBCNEDE2",231,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,,,DATA5) ; Sets in TQ
"RTN","IBCNEDE2",232,0)
 I TQIEN'="" S CNT=CNT+1                       ; If filed increment count
"RTN","IBCNEDE2",233,0)
 ;
"RTN","IBCNEDE2",234,0)
 Q
"RTN","IBCNEDE2",235,0)
 ;
"RTN","IBCNEDE2",236,0)
ERRMSG ; Send a message indicating an extract error has occurred
"RTN","IBCNEDE2",237,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",238,0)
 ;
"RTN","IBCNEDE2",239,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",240,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",241,0)
 ;
"RTN","IBCNEDE2",242,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",243,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",244,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",245,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",246,0)
 S MSG(4)=""
"RTN","IBCNEDE2",247,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",248,0)
 S MSG(6)=""
"RTN","IBCNEDE2",249,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",250,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",251,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",252,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",253,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",254,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",255,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",256,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",257,0)
 ;
"RTN","IBCNEDE2",258,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",259,0)
 ;
"RTN","IBCNEDE2",260,0)
 Q
"RTN","IBCNEDE2",261,0)
 ;
"RTN","IBCNEDE2",262,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",263,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",264,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",265,0)
 N X1,X2
"RTN","IBCNEDE2",266,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",267,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",268,0)
 Q 0
"RTN","IBCNEDST")
0^13^B64728722^B57795358
"RTN","IBCNEDST",1,0)
IBCNEDST ;ALB/YMG - HL7 Registration Message Statistics ;07-MAR-2013
"RTN","IBCNEDST",2,0)
 ;;2.0;INTEGRATED BILLING;**497,506,549,595**;21-MAR-94;Build 29
"RTN","IBCNEDST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDST",4,0)
 ;
"RTN","IBCNEDST",5,0)
 Q
"RTN","IBCNEDST",6,0)
 ;
"RTN","IBCNEDST",7,0)
GETSTAT2() ;EP
"RTN","IBCNEDST",8,0)
 ; IB*2.0*549 - Added method
"RTN","IBCNEDST",9,0)
 ; Get additional IB Site Parameter fields
"RTN","IBCNEDST",10,0)
 ; Input:   None
"RTN","IBCNEDST",11,0)
 ; Output:  A1^A2^A3^A4^A5 - Where:
"RTN","IBCNEDST",12,0)
 ;            A1 - 350.9, 51.27     - 270 MASTER SWITCH REALTIME
"RTN","IBCNEDST",13,0)
 ;            A2 - 350.9, 51.28     - 270 MASTER SWITCH NIGHTLY
"RTN","IBCNEDST",14,0)
 ;            A3 - 350.9, 51.15     - HL7 MAXIMUM NUMBER
"RTN","IBCNEDST",15,0)
 ;            A4 - 350.9002, .05    - MAXIMUM EXTRACT NUMBER (appt)
"RTN","IBCNEDST",16,0)
 ;            A5 - 350.9002, .05    - MAXIMUM EXTRACT NUMBER (buffer)
"RTN","IBCNEDST",17,0)
 ;
"RTN","IBCNEDST",18,0)
 N DATA,XX
"RTN","IBCNEDST",19,0)
 S DATA=$$GET1^DIQ(350.9,"1,",51.27,"I")            ; 270 Master Switch Realtime
"RTN","IBCNEDST",20,0)
 S $P(DATA,"^",2)=$$GET1^DIQ(350.9,"1,",51.28,"I")  ; 270 Master Switch Nightly
"RTN","IBCNEDST",21,0)
 S $P(DATA,"^",3)=$$GET1^DIQ(350.9,"1,",51.15,"I")  ; HL7 Maximum Number
"RTN","IBCNEDST",22,0)
 S XX=$O(^IBE(350.9,1,51.17,"B",2,""))              ; Find Appointment multiple
"RTN","IBCNEDST",23,0)
 S XX=$$GET1^DIQ(350.9002,XX_",1,",.05,"I")         ; Maximum Appointment Extract
"RTN","IBCNEDST",24,0)
 S $P(DATA,"^",4)=XX
"RTN","IBCNEDST",25,0)
 S XX=$O(^IBE(350.9,1,51.17,"B",1,""))              ; Find Buffer multiple
"RTN","IBCNEDST",26,0)
 S XX=$$GET1^DIQ(350.9002,XX_",1,",.05,"I")         ; Maximum Buffer Extract
"RTN","IBCNEDST",27,0)
 S $P(DATA,"^",5)=XX
"RTN","IBCNEDST",28,0)
 Q DATA
"RTN","IBCNEDST",29,0)
 ;
"RTN","IBCNEDST",30,0)
GETSTAT() ; get statistical data
"RTN","IBCNEDST",31,0)
 ; Statistics are to match the eIV Statistical Report (^IBCNEPR8)
"RTN","IBCNEDST",32,0)
 ;
"RTN","IBCNEDST",33,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",34,0)
 ;
"RTN","IBCNEDST",35,0)
 ;   piece 1  - Number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",36,0)
 ;   piece 2  - Number of automatically updated patient insurance records processed yesterday only 
"RTN","IBCNEDST",37,0)
 ;   piece 3  - Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",38,0)
 ;   piece 4  - Number of queued 270 inquiries
"RTN","IBCNEDST",39,0)
 ;   piece 5  - Number of deferred 270 inquiries
"RTN","IBCNEDST",40,0)
 ;   piece 6  - Number of insurance companies with no National ID
"RTN","IBCNEDST",41,0)
 ;   piece 7  - Number of locally disabled payers
"RTN","IBCNEDST",42,0)
 ;   piece 8  - Number of Verified (*) buffer entries
"RTN","IBCNEDST",43,0)
 ;   piece 9  - Number of buffer entries indicated as having Active insurance (+)
"RTN","IBCNEDST",44,0)
 ;   piece 10 - Number of buffer entries indicated as having Inactive insurance (-)
"RTN","IBCNEDST",45,0)
 ;   piece 11 - Number of buffer entries indicated as policy status undetermined (#)
"RTN","IBCNEDST",46,0)
 ;   piece 12 - Number of buffer entries indicated as requiring correction before 270 can be sent (!)
"RTN","IBCNEDST",47,0)
 ;   piece 13 - Number of buffer entries awaiting processing
"RTN","IBCNEDST",48,0)
 ;   piece 14 - Number of buffer entries indicated as waiting for a 271 response (?)
"RTN","IBCNEDST",49,0)
 ;   piece 15 - Number of buffer entries entered by manual process with no further processing (blank)
"RTN","IBCNEDST",50,0)
 ;   piece 16 - Number of unlinked insurance companies
"RTN","IBCNEDST",51,0)
 ;
"RTN","IBCNEDST",52,0)
 N BUFINFO,PAYINFO,RESPINFO,STARTDTTM,TQINFO,STATS
"RTN","IBCNEDST",53,0)
 ;
"RTN","IBCNEDST",54,0)
 S STARTDTTM=$$FMADD^XLFDT($$NOW^XLFDT(),,-24) ; set to current date/time - 24 hours
"RTN","IBCNEDST",55,0)
 S RESPINFO=$$RESPINFO(STARTDTTM) ; get data from file 365
"RTN","IBCNEDST",56,0)
 S TQINFO=$$TQINFO() ; get data from file 365.1
"RTN","IBCNEDST",57,0)
 S PAYINFO=$$PAYINFO() ; get data from file 36 & 365.12
"RTN","IBCNEDST",58,0)
 S BUFINFO=$$BUFINFO() ; get data from file 355.33
"RTN","IBCNEDST",59,0)
 S STATS=RESPINFO_U_TQINFO_U_$P(PAYINFO,U)_U_$P(PAYINFO,U,2)
"RTN","IBCNEDST",60,0)
 S STATS=STATS_U_BUFINFO_U_$P(PAYINFO,U,3)
"RTN","IBCNEDST",61,0)
 Q STATS
"RTN","IBCNEDST",62,0)
 ;
"RTN","IBCNEDST",63,0)
RESPINFO(DTTM) ; get data from IIV response file (file 365)
"RTN","IBCNEDST",64,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",65,0)
 ;
"RTN","IBCNEDST",66,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",67,0)
 ;   piece 1: number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",68,0)
 ;   piece 2: Number of automatically updated patient insurance records processed yesterday only
"RTN","IBCNEDST",69,0)
 ;   piece 3: Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",70,0)
 ;
"RTN","IBCNEDST",71,0)
 N AUTOUPD,DATE,DFN,EBIEN,IEN,INSNAMES,INSTYPE,INQP,POLICY,PAYER,PAYERWNR,PYRNAME,SECINS,Z
"RTN","IBCNEDST",72,0)
 S (AUTOUPD,SECINS)=0
"RTN","IBCNEDST",73,0)
 S PAYERWNR=$P($G(^IBE(350.9,1,51)),U,25) ; get Medicare payer ien from IB site parameters
"RTN","IBCNEDST",74,0)
 S AUTOUPD=$$PATINFO() ; IB*2*595/DM  
"RTN","IBCNEDST",75,0)
 S DATE=DTTM-0.000001 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",76,0)
 .;IB*2*595/DM next 4 lines no longer applicable
"RTN","IBCNEDST",77,0)
 .; if response received within the last 24 hrs, check if it auto-updated insurance policy
"RTN","IBCNEDST",78,0)
 .;S PAYER=0 F  S PAYER=$O(^IBCN(365,"AD",DATE,PAYER)) Q:PAYER=""  D
"RTN","IBCNEDST",79,0)
 .;.S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYER,DFN)) Q:DFN=""  S AUTOUPD=AUTOUPD+$$PATINFO(DFN)
"RTN","IBCNEDST",80,0)
 .;.Q
"RTN","IBCNEDST",81,0)
 .I PAYERWNR,$D(^IBCN(365,"AD",DATE,PAYERWNR)) D
"RTN","IBCNEDST",82,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN)) Q:DFN=""  D
"RTN","IBCNEDST",83,0)
 ...; create array of ins. company names for this patient (active policies only)
"RTN","IBCNEDST",84,0)
 ...K INSNAMES S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",85,0)
 ....S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",86,0)
 .....; skip policies that are not active
"RTN","IBCNEDST",87,0)
 .....I $$CHK^IBCNS1(^DPT(DFN,.312,POLICY,0),DT,1) S INSNAMES($$EXTERNAL^DILFD(2.312,.01,,INSTYPE))=""
"RTN","IBCNEDST",88,0)
 .....Q
"RTN","IBCNEDST",89,0)
 ....Q
"RTN","IBCNEDST",90,0)
 ...S IEN=0 F  S IEN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDST",91,0)
 ....S Z="" F  S Z=$O(^IBCN(365,IEN,2,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",92,0)
 .....S EBIEN=$O(^IBCN(365,IEN,2,"B",Z,""))
"RTN","IBCNEDST",93,0)
 .....; make sure eligibility code is "R"
"RTN","IBCNEDST",94,0)
 .....I $$GET1^DIQ(365.02,EBIEN_","_IEN_",",.02)'="R" Q
"RTN","IBCNEDST",95,0)
 .....S PYRNAME=$E($P($G(^IBCN(365,IEN,2,EBIEN,3)),U,3),1,30) ; grab first 30 chars to compare to 36/.01
"RTN","IBCNEDST",96,0)
 .....I PYRNAME'="",'$D(INSNAMES(PYRNAME)) S SECINS=SECINS+1
"RTN","IBCNEDST",97,0)
 .....Q
"RTN","IBCNEDST",98,0)
 ....Q
"RTN","IBCNEDST",99,0)
 ...Q
"RTN","IBCNEDST",100,0)
 ..Q
"RTN","IBCNEDST",101,0)
 .Q
"RTN","IBCNEDST",102,0)
 ;
"RTN","IBCNEDST",103,0)
 ; Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",104,0)
 S (INQP,IEN)=0 F  S IEN=$O(^IBCN(365,"AC",2,IEN)) Q:'IEN  D   ; Transmitted status = 2
"RTN","IBCNEDST",105,0)
 . S INQP=INQP+1
"RTN","IBCNEDST",106,0)
 Q SECINS_U_AUTOUPD_U_INQP
"RTN","IBCNEDST",107,0)
 ;
"RTN","IBCNEDST",108,0)
 ;PATINFO() was fully replace for IB*2*595/DM
"RTN","IBCNEDST",109,0)
 ;PATINFO(DFN) ; get data from pat. insurance multiple (file 2.312)
"RTN","IBCNEDST",110,0)
 ;; DFN - file 2 ien
"RTN","IBCNEDST",111,0)
 ;;
"RTN","IBCNEDST",112,0)
 ;; returns
"RTN","IBCNEDST",113,0)
 ;;   number of automatically updated patient insurance records for a given patient within last 24 hours
"RTN","IBCNEDST",114,0)
 ;;
"RTN","IBCNEDST",115,0)
 ;N AUTOUPD,INSTYPE,POLICY
"RTN","IBCNEDST",116,0)
 ;I 'DFN Q
"RTN","IBCNEDST",117,0)
 ;S AUTOUPD=0
"RTN","IBCNEDST",118,0)
 ;S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",119,0)
 ;.S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",120,0)
 ;..; if DATE LAST VERIFIED is no more than one day old and EIV AUTO-UPDATE is set, increment auto-update counter
"RTN","IBCNEDST",121,0)
 ;..I +$P($G(^DPT(DFN,.312,POLICY,4)),U,4),$$FMDIFF^XLFDT(DT,+$P($G(^DPT(DFN,.312,POLICY,1)),U,3),1)<2 S AUTOUPD=AUTOUPD+1
"RTN","IBCNEDST",122,0)
 ;..Q
"RTN","IBCNEDST",123,0)
 ;.Q
"RTN","IBCNEDST",124,0)
 ;Q AUTOUPD
"RTN","IBCNEDST",125,0)
 ;;
"RTN","IBCNEDST",126,0)
PATINFO() ; IB*2*595/DM 
"RTN","IBCNEDST",127,0)
 ; compile an auto-update count for all patient policies from yesterday
"RTN","IBCNEDST",128,0)
 ; read all response records from yesterday via the "AUTO" cross reference 
"RTN","IBCNEDST",129,0)
 ; return a total count of auto-updated policies
"RTN","IBCNEDST",130,0)
 ;   
"RTN","IBCNEDST",131,0)
 N IBAUTO,IBDATE,IBENDDT,IBPYRIEN,IBPATIEN,IBINSIEN
"RTN","IBCNEDST",132,0)
 S IBAUTO=0
"RTN","IBCNEDST",133,0)
 S IBDATE=$$FMADD^XLFDT($$DT^XLFDT(),-2,23,59,59)
"RTN","IBCNEDST",134,0)
 S IBENDDT=$$FMADD^XLFDT($$DT^XLFDT(),-1,23,59,59)
"RTN","IBCNEDST",135,0)
 ;
"RTN","IBCNEDST",136,0)
 F  S IBDATE=$O(^IBCN(365,"AUTO",IBDATE)) Q:'IBDATE!(IBDATE>IBENDDT)  D
"RTN","IBCNEDST",137,0)
 .S IBPYRIEN=0 F  S IBPYRIEN=$O(^IBCN(365,"AUTO",IBDATE,IBPYRIEN)) Q:'IBPYRIEN  D
"RTN","IBCNEDST",138,0)
 ..S IBPATIEN=0 F  S IBPATIEN=$O(^IBCN(365,"AUTO",IBDATE,IBPYRIEN,IBPATIEN)) Q:'IBPATIEN  D
"RTN","IBCNEDST",139,0)
 ...S IBINSIEN=0 F  S IBINSIEN=$O(^IBCN(365,"AUTO",IBDATE,IBPYRIEN,IBPATIEN,IBINSIEN)) Q:'IBINSIEN  D
"RTN","IBCNEDST",140,0)
 ....S IBAUTO=IBAUTO+1
"RTN","IBCNEDST",141,0)
 Q IBAUTO
"RTN","IBCNEDST",142,0)
 ; 
"RTN","IBCNEDST",143,0)
TQINFO() ; get data from transmission queue (file 365.1)
"RTN","IBCNEDST",144,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",145,0)
 ;   piece 1  - Number of queued 270 inquiries
"RTN","IBCNEDST",146,0)
 ;   piece 2  - Number of deferred 270 inquiries
"RTN","IBCNEDST",147,0)
 ;
"RTN","IBCNEDST",148,0)
 N INQD,INQQ,INQUIRY,INSTS,TQSTATUS
"RTN","IBCNEDST",149,0)
 S (INQD,INQQ)=0
"RTN","IBCNEDST",150,0)
 ;
"RTN","IBCNEDST",151,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and
"RTN","IBCNEDST",152,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNEDST",153,0)
 F INSTS=1,6,4 D
"RTN","IBCNEDST",154,0)
 .S INQUIRY=0 F  S INQUIRY=$O(^IBCN(365.1,"AC",INSTS,INQUIRY)) Q:'INQUIRY  D
"RTN","IBCNEDST",155,0)
 ..I INSTS'=4 S INQQ=INQQ+1 Q   ; counter for queued inquiries
"RTN","IBCNEDST",156,0)
 ..S INQD=INQD+1 ; counter for deferred inquiries
"RTN","IBCNEDST",157,0)
 ..Q
"RTN","IBCNEDST",158,0)
 .Q
"RTN","IBCNEDST",159,0)
 Q INQQ_U_INQD
"RTN","IBCNEDST",160,0)
 ;
"RTN","IBCNEDST",161,0)
PAYINFO() ; get data from payer (file 365.12) & insurance company (file #36)
"RTN","IBCNEDST",162,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",163,0)
 ;   piece 1  - Number of insurance companies with no National ID
"RTN","IBCNEDST",164,0)
 ;   piece 2  - Number of locally disabled payers
"RTN","IBCNEDST",165,0)
 ;   piece 3  - Number of unlinked insurance companies
"RTN","IBCNEDST",166,0)
 ;
"RTN","IBCNEDST",167,0)
 N ACTIVE,APP,DATA,IDLIST,INSCO,INSTID,LOCDIS,NONATID,PAYER,PROFID,UNLINK
"RTN","IBCNEDST",168,0)
 S (LOCDIS,NONATID,UNLINK)=0
"RTN","IBCNEDST",169,0)
 ;
"RTN","IBCNEDST",170,0)
 ; Determine # of locally disabled payers
"RTN","IBCNEDST",171,0)
 ; loop through PAYER file
"RTN","IBCNEDST",172,0)
 S PAYER=0 F  S PAYER=$O(^IBE(365.12,PAYER)) Q:'PAYER  D
"RTN","IBCNEDST",173,0)
 .;I '$$ACTAPP^IBCNEUT5(PAYER) Q  ; no active payer applications
"RTN","IBCNEDST",174,0)
 .; Check for National ID
"RTN","IBCNEDST",175,0)
 .S DATA=^IBE(365.12,PAYER,0)
"RTN","IBCNEDST",176,0)
 .I $P(DATA,U,2)="" Q  ;Must have National ID
"RTN","IBCNEDST",177,0)
 .;
"RTN","IBCNEDST",178,0)
 .; Check for Locally Disabled
"RTN","IBCNEDST",179,0)
 .S APP=$$PYRAPP^IBCNEUT5("IIV",PAYER) I 'APP Q
"RTN","IBCNEDST",180,0)
 .S DATA=$G(^IBE(365.12,PAYER,1,APP,0))
"RTN","IBCNEDST",181,0)
 .I $P(DATA,U,2),'$P(DATA,U,3) S LOCDIS=LOCDIS+1 ; nationally active but locally disabled payers
"RTN","IBCNEDST",182,0)
 .Q
"RTN","IBCNEDST",183,0)
 ;
"RTN","IBCNEDST",184,0)
 ; Loop through INSURANCE COMPANY file for insurance companies not linked to a payer
"RTN","IBCNEDST",185,0)
 ; and insurance companies with No National ID 
"RTN","IBCNEDST",186,0)
 ; No National ID [defined by VA CBO as no EDI IDs fields (#36,3.02) & (#36,3.04) - 3/4/14]
"RTN","IBCNEDST",187,0)
 ; This is *Not* a check for the 'VA NATIONAL ID' associated with linked payer.
"RTN","IBCNEDST",188,0)
 ; 
"RTN","IBCNEDST",189,0)
 S INSCO=0 F  S INSCO=$O(^DIC(36,INSCO)) Q:'INSCO  D
"RTN","IBCNEDST",190,0)
 .S ACTIVE=$$ACTIVE^IBCNEUT4(INSCO) Q:'ACTIVE  I $$EXCLUDE^IBCNEUT4($P(ACTIVE,U,2)) Q  ; Exclude Medicaid, etc.
"RTN","IBCNEDST",191,0)
 .S PAYER=$P($G(^DIC(36,INSCO,3)),U,10)  ; associated payer
"RTN","IBCNEDST",192,0)
 .I 'PAYER S UNLINK=UNLINK+1             ; Not linked to a payer. Increment UNLINK
"RTN","IBCNEDST",193,0)
 .I ($$GET1^DIQ(36,INSCO_",",3.02)=""),($$GET1^DIQ(36,INSCO_",",3.04)="") S NONATID=NONATID+1
"RTN","IBCNEDST",194,0)
 .Q
"RTN","IBCNEDST",195,0)
 Q NONATID_U_LOCDIS_U_UNLINK
"RTN","IBCNEDST",196,0)
 ;
"RTN","IBCNEDST",197,0)
BUFINFO() ; get data from insurance buffer (file 355.33)
"RTN","IBCNEDST",198,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",199,0)
 ;
"RTN","IBCNEDST",200,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",201,0)
 ;   piece 1 - Number of Verified (*) buffer entries within last 24 hours
"RTN","IBCNEDST",202,0)
 ;   piece 2 - Number of buffer entries indicated as having Active insurance (+) within last 24 hours
"RTN","IBCNEDST",203,0)
 ;   piece 3 - Number of buffer entries indicated as having Inactive insurance (-) within last 24 hours
"RTN","IBCNEDST",204,0)
 ;   piece 4 - Number of buffer entries indicated as policy status undetermined (#) within last 24 hours
"RTN","IBCNEDST",205,0)
 ;   piece 5 - Number of buffer entries indicated as requiring correction before 270 can be sent (!) within last 24 hours
"RTN","IBCNEDST",206,0)
 ;   piece 6 - Number of buffer entries awaiting processing within last 24 hours
"RTN","IBCNEDST",207,0)
 ;   piece 7 - Number of buffer entries indicated as waiting for a 271 response (?) within last 24 hours
"RTN","IBCNEDST",208,0)
 ;   piece 8 - Number of buffer entries entered by manual process with no further processing (blank) within last 24 hours 
"RTN","IBCNEDST",209,0)
 ;
"RTN","IBCNEDST",210,0)
 N ACTIVE,AMBIG,BUFF,DATE,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,STATUS,SYM,VERIFIED
"RTN","IBCNEDST",211,0)
 S (ACTIVE,AMBIG,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,VERIFIED)=0
"RTN","IBCNEDST",212,0)
 S DATE=0 F  S DATE=$O(^IBA(355.33,"AEST","E",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",213,0)
 .S BUFF=0 F  S BUFF=$O(^IBA(355.33,"AEST","E",DATE,BUFF)) Q:BUFF=""  D
"RTN","IBCNEDST",214,0)
 ..S SYM=$$SYMBOL^IBCNBLL(BUFF)
"RTN","IBCNEDST",215,0)
 ..I SYM="*" S VERIFIED=VERIFIED+1 Q  ; verified entries
"RTN","IBCNEDST",216,0)
 ..I SYM="+" S ACTIVE=ACTIVE+1 Q      ; active insurance
"RTN","IBCNEDST",217,0)
 ..I SYM="$" S ACTIVE=ACTIVE+1 Q      ; include "$" (Escalated entries) in with the active insurance  - IB*2.0*506 (vd)
"RTN","IBCNEDST",218,0)
 ..I SYM="-" S INACTIVE=INACTIVE+1 Q  ; inactive insurance
"RTN","IBCNEDST",219,0)
 ..I SYM="#" S AMBIG=AMBIG+1 Q        ; ambiguous response
"RTN","IBCNEDST",220,0)
 ..I SYM="!" S ERROR=ERROR+1 Q        ; entries requiring correction
"RTN","IBCNEDST",221,0)
 ..I SYM="?" S RESPWAIT=RESPWAIT+1 Q  ; awaiting response
"RTN","IBCNEDST",222,0)
 ..I SYM=" " S MANUAL=MANUAL+1        ; manually entered entries (no further processing)
"RTN","IBCNEDST",223,0)
 .S PROCWAIT=RESPWAIT+MANUAL          ; entries awaiting processing
"RTN","IBCNEDST",224,0)
 Q VERIFIED_U_ACTIVE_U_INACTIVE_U_AMBIG_U_ERROR_U_PROCWAIT_U_RESPWAIT_U_MANUAL
"RTN","IBCNEDST",225,0)
 ;
"RTN","IBCNEHL1")
0^9^B169495376^B155699201
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497,506,549,593,601,595**;21-MAR-94;Build 29
"RTN","IBCNEHL1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    ACK       - Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",13,0)
 ;    ERACT     - Error Action
"RTN","IBCNEHL1",14,0)
 ;    ERCON     - Error Condition
"RTN","IBCNEHL1",15,0)
 ;    ERFLG     - Error quit flag
"RTN","IBCNEHL1",16,0)
 ;    ERTXT     - Error Message Text
"RTN","IBCNEHL1",17,0)
 ;    HL        - Array of HL7 variables
"RTN","IBCNEHL1",18,0)
 ;    IBSEG     - Optional, array of fields in segment
"RTN","IBCNEHL1",19,0)
 ;    IIVSTAT   - EC generated flag interpreting status of response
"RTN","IBCNEHL1",20,0)
 ;                 1 = + (auto-update requirement)
"RTN","IBCNEHL1",21,0)
 ;                 6 = -
"RTN","IBCNEHL1",22,0)
 ;                 V = #
"RTN","IBCNEHL1",23,0)
 ;                 MBI% = %   ; will not receive from FSC, derived in FIL^IBCNEHL6
"RTN","IBCNEHL1",24,0)
 ;                 MBI# = #   ; will not receive from FSC, derived in FIL^IBCNEHL6
"RTN","IBCNEHL1",25,0)
 ;    MAP       - Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",26,0)
 ;    MSGID     - Original Message Control ID
"RTN","IBCNEHL1",27,0)
 ;    RIEN      - Response Record IEN
"RTN","IBCNEHL1",28,0)
 ;    SEG       - HL7 Segment Name
"RTN","IBCNEHL1",29,0)
 ;
"RTN","IBCNEHL1",30,0)
EN ; Entry Point
"RTN","IBCNEHL1",31,0)
 N ACK,AUTO,EBDA,ERACT,ERCON,ERFLG,ERROR,ERTXT,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN
"RTN","IBCNEHL1",32,0)
 N MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP
"RTN","IBCNEHL1",33,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",34,0)
 ;
"RTN","IBCNEHL1",35,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",36,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",37,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",38,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",39,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21   ; These are X12 codes mapped from EC to VistA
"RTN","IBCNEHL1",40,0)
 S MAP("MBI%")=26,MAP("MBI#")=27   ; These are NOT X12 codes from FSC - we derive them only for MBI responses
"RTN","IBCNEHL1",41,0)
 ;
"RTN","IBCNEHL1",42,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",43,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",44,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",45,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",46,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",47,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",48,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",49,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",50,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",51,0)
 .;
"RTN","IBCNEHL1",52,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",53,0)
 .;
"RTN","IBCNEHL1",54,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Contact Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Patient Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",63,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",66,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",69,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",72,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",75,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",78,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",81,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",84,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",102,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 .;
"RTN","IBCNEHL1",104,0)
 .; Notes Segment
"RTN","IBCNEHL1",105,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 .;
"RTN","IBCNEHL1",107,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",108,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",110,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",111,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",112,0)
 . ;
"RTN","IBCNEHL1",113,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",114,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",115,0)
 .;
"RTN","IBCNEHL1",116,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",117,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",118,0)
 ;
"RTN","IBCNEHL1",119,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",120,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",121,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",122,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",123,0)
 .Q
"RTN","IBCNEHL1",124,0)
 D FIL
"RTN","IBCNEHL1",125,0)
 Q
"RTN","IBCNEHL1",126,0)
 ;
"RTN","IBCNEHL1",127,0)
 ; =================================================================
"RTN","IBCNEHL1",128,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",129,0)
 ;
"RTN","IBCNEHL1",130,0)
 N BUFF,DATA,ERROR,IENS,MIL,OKAY,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,XX   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",131,0)
 ;
"RTN","IBCNEHL1",132,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",133,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",134,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",135,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",136,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",137,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",138,0)
 S XX=$$GET1^DIQ(2.312,IENS,7.01,"I")
"RTN","IBCNEHL1",139,0)
 I ISSUB,XX="" S DATA(2.312,IENS,7.01)=$P(RDATA13,U)    ; Name
"RTN","IBCNEHL1",140,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.01,"I")
"RTN","IBCNEHL1",141,0)
 I XX="" S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2)         ; DOB
"RTN","IBCNEHL1",142,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.05,"I")
"RTN","IBCNEHL1",143,0)
 I XX="" S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3)         ; SSN
"RTN","IBCNEHL1",144,0)
 S XX=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNEHL1",145,0)
 I ISSUB,XX="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8)      ; Whose insurance
"RTN","IBCNEHL1",146,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",147,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01)
"RTN","IBCNEHL1",148,0)
 S XX=$$GET1^DIQ(2.312,IENS,4.03,"I")
"RTN","IBCNEHL1",149,0)
 I ISSUB,XX="",PREL'="" D
"RTN","IBCNEHL1",150,0)
 . S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",151,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",152,0)
 ; IB*2*595/DM moved the following 4 lines below 
"RTN","IBCNEHL1",153,0)
 ;S DATA(2.312,IENS,1.03)=TSTAMP                         ; Date last verified
"RTN","IBCNEHL1",154,0)
 ;S DATA(2.312,IENS,1.04)=""                            ; Last verified by
"RTN","IBCNEHL1",155,0)
 ;S DATA(2.312,IENS,1.05)=TSTAMP                         ; Date last edited
"RTN","IBCNEHL1",156,0)
 ;S DATA(2.312,IENS,1.06)=""                            ; Last edited by
"RTN","IBCNEHL1",157,0)
 ;S DATA(2.312,IENS,1.09)=5 ; Source of info = eIV
"RTN","IBCNEHL1",158,0)
 ;IB*2.0*595/DM persist the original Source of Information
"RTN","IBCNEHL1",159,0)
 ;note: external values are used to populate DATA
"RTN","IBCNEHL1",160,0)
 I $$GET1^DIQ(2.312,IENS,1.09,"I")="" D
"RTN","IBCNEHL1",161,0)
 . S XX=$$GET1^DIQ(365.1,TQN_",1,",3.02)
"RTN","IBCNEHL1",162,0)
 . I XX="" S XX="eIV"
"RTN","IBCNEHL1",163,0)
 . S DATA(2.312,IENS,1.09)=XX
"RTN","IBCNEHL1",164,0)
 ;
"RTN","IBCNEHL1",165,0)
 ; Set Subscriber address Fields if none of the fields are currently defined
"RTN","IBCNEHL1",166,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",167,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.06,"I")       ; Current Ins Street Line 1
"RTN","IBCNEHL1",168,0)
 I XX="" D
"RTN","IBCNEHL1",169,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.07,"I")     ; Current Ins Street Line 2
"RTN","IBCNEHL1",170,0)
 . Q:XX'=""
"RTN","IBCNEHL1",171,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.08,"I")     ; Current Ins City
"RTN","IBCNEHL1",172,0)
 . Q:XX'=""
"RTN","IBCNEHL1",173,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.09,"I")     ; Current Ins State
"RTN","IBCNEHL1",174,0)
 . Q:XX'=""
"RTN","IBCNEHL1",175,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.1,"I")      ; Current Ins Zip
"RTN","IBCNEHL1",176,0)
 . Q:XX'=""
"RTN","IBCNEHL1",177,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.13,"I")     ; Current Ins Country
"RTN","IBCNEHL1",178,0)
 . Q:XX'=""
"RTN","IBCNEHL1",179,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.14,"I")     ; Current Ins Country Subdivision
"RTN","IBCNEHL1",180,0)
 . Q:XX'=""
"RTN","IBCNEHL1",181,0)
 . S DATA(2.312,IENS,3.06)=$P(RDATA5,U)     ; Street line 1
"RTN","IBCNEHL1",182,0)
 . S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2)   ; Street line 2
"RTN","IBCNEHL1",183,0)
 . S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3)   ; City
"RTN","IBCNEHL1",184,0)
 . S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4)   ; State
"RTN","IBCNEHL1",185,0)
 . S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5)    ; Zip
"RTN","IBCNEHL1",186,0)
 . S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6)   ; Country
"RTN","IBCNEHL1",187,0)
 . S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7)   ; Country subdivision
"RTN","IBCNEHL1",188,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",189,0)
 ;
"RTN","IBCNEHL1",190,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",191,0)
 I $D(DATA) D FILE^DIE("ET","DATA","ERROR") ;IB*2*595/DM make sure DATA has data  
"RTN","IBCNEHL1",192,0)
 I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",193,0)
 ; IB*2*595/DM set auto-update fields
"RTN","IBCNEHL1",194,0)
 ; the EIV AUTO-UPDATE flag is now located in the IIV Response file
"RTN","IBCNEHL1",195,0)
 ;set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",196,0)
 ;S DATA(2.312,IENS,4.04)="YES"
"RTN","IBCNEHL1",197,0)
 K DATA
"RTN","IBCNEHL1",198,0)
 S DATA(2.312,IENS,1.03)=TSTAMP                        ; Date last verified
"RTN","IBCNEHL1",199,0)
 S DATA(2.312,IENS,1.04)="AUTOUPDATE,IBEIV"            ; Last verified by ; Edit with 595 was null
"RTN","IBCNEHL1",200,0)
 S DATA(2.312,IENS,1.05)=TSTAMP                        ; Date last edited
"RTN","IBCNEHL1",201,0)
 S DATA(2.312,IENS,1.06)="AUTOUPDATE,IBEIV"            ; Last edited by ; Edit with 595 was null
"RTN","IBCNEHL1",202,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",203,0)
 I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",204,0)
 ; IB*2*595/DM set the insurance record IEN in the IIV Response file
"RTN","IBCNEHL1",205,0)
 ; to track which policy was updated based on the response
"RTN","IBCNEHL1",206,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",207,0)
 ; IB*2*595/DM set the EIV AUTO-UPDATE in the response file to signal auto-update
"RTN","IBCNEHL1",208,0)
 K DATA
"RTN","IBCNEHL1",209,0)
 S DATA(365,RIEN_",",.13)="YES"
"RTN","IBCNEHL1",210,0)
 D FILE^DIE("ET","DATA")
"RTN","IBCNEHL1",211,0)
 ;
"RTN","IBCNEHL1",212,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",213,0)
 I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",214,0)
 ; file new EB data
"RTN","IBCNEHL1",215,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",216,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",217,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",218,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",219,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",220,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",221,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",222,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",223,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",224,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",225,0)
 I BUFF D
"RTN","IBCNEHL1",226,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",227,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",228,0)
 .Q
"RTN","IBCNEHL1",229,0)
AUTOFILX ;
"RTN","IBCNEHL1",230,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",231,0)
 Q
"RTN","IBCNEHL1",232,0)
 ;
"RTN","IBCNEHL1",233,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",234,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",235,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",236,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",237,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",238,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",239,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",240,0)
 ;          1 - successful update
"RTN","IBCNEHL1",241,0)
 N DA,DATA12,DIAG,DIAG3121,ERFLG,ERROR,IENS,IENS365,IENS312,NODE,PROV,PROV332,REF,REF3129,Z,Z2
"RTN","IBCNEHL1",242,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",243,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",244,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",245,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",246,0)
 D FILE^DIE("ET","DATA12","ERROR")
"RTN","IBCNEHL1",247,0)
 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",248,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",249,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",250,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",251,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",252,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",253,0)
 ; update node 9 data
"RTN","IBCNEHL1",254,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",255,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",256,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",257,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",258,0)
 ; update node 10 data
"RTN","IBCNEHL1",259,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",260,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",261,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",262,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",263,0)
 ; update node 11 data
"RTN","IBCNEHL1",264,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",265,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",266,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",267,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",268,0)
GRPFILEX ;
"RTN","IBCNEHL1",269,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",270,0)
 ;
"RTN","IBCNEHL1",271,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",272,0)
 ; IB*2*601/DM FIL()routine moved to IBCNEHL6 to meet SAC guidelines due to size
"RTN","IBCNEHL1",273,0)
 D FIL^IBCNEHL6
"RTN","IBCNEHL1",274,0)
 Q
"RTN","IBCNEHL1",275,0)
 ;
"RTN","IBCNEHL1",276,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",277,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",278,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",279,0)
 ;
"RTN","IBCNEHL1",280,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",281,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",282,0)
 ;
"RTN","IBCNEHL1",283,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",284,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",285,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",286,0)
 ;
"RTN","IBCNEHL1",287,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",288,0)
 ;
"RTN","IBCNEHL1",289,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",290,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",291,0)
 S RES=0
"RTN","IBCNEHL1",292,0)
 I +$G(RIEN)'>0 Q RES                       ; Invalid ien for file 365
"RTN","IBCNEHL1",293,0)
 ; IB*2.0*595/DM if entry is missing from #200, file in buffer
"RTN","IBCNEHL1",294,0)
 I '$$FIND1^DIC(200,,"M","AUTOUPDATE,IBEIV") Q RES
"RTN","IBCNEHL1",295,0)
 ;
"RTN","IBCNEHL1",296,0)
 ; IB*2.0*549 - Moved up the next 5 lines.  Originally, these lines were
"RTN","IBCNEHL1",297,0)
 ;              directly after line 'I $G(IIVSTAT)'=1 Q RES'
"RTN","IBCNEHL1",298,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",299,0)
 ;
"RTN","IBCNEHL1",300,0)
 ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",301,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))
"RTN","IBCNEHL1",302,0)
 S PIEN=$P(RDATA0,U,3)
"RTN","IBCNEHL1",303,0)
 ;
"RTN","IBCNEHL1",304,0)
 ; IB*2.0*549 - Moved up the next 2 lines.  Originally, these lines were
"RTN","IBCNEHL1",305,0)
 ;              directly after 'S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES'
"RTN","IBCNEHL1",306,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",307,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",308,0)
 ;
"RTN","IBCNEHL1",309,0)
 ; IB*2.0*549 - Added ',MWNRTYP' below to only quit for non-medicare policies
"RTN","IBCNEHL1",310,0)
 I $G(IIVSTAT)'=1,'MWNRTYP Q RES            ; Only auto-update 'active policy' responses
"RTN","IBCNEHL1",311,0)
 I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",312,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",313,0)
 ;
"RTN","IBCNEHL1",314,0)
 ;IB*2.0*601/HN Don't allow any entry with HMS SOI to auto-update
"RTN","IBCNEHL1",315,0)
 ;IB*2.0*595/HN Don't allow any entry with Contract Services SOI to auto-update
"RTN","IBCNEHL1",316,0)
 I "^HMS^CONTRACT SERVICES^"[("^"_$$GET1^DIQ(355.33,+$$GET1^DIQ(365,RIEN_",","BUFFER ENTRY","I")_",","SOURCE OF INFORMATION")_"^") Q RES
"RTN","IBCNEHL1",317,0)
 ;
"RTN","IBCNEHL1",318,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",319,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",320,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",321,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",322,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",323,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",324,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",325,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",326,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",327,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",328,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",329,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",330,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",331,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",332,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",333,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",334,0)
 ..; check group number
"RTN","IBCNEHL1",335,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",336,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",337,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",338,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",339,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",340,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",341,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",342,0)
 ....Q
"RTN","IBCNEHL1",343,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",344,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",345,0)
 ....Q
"RTN","IBCNEHL1",346,0)
 ...Q
"RTN","IBCNEHL1",347,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",348,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",349,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",350,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",351,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",352,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",353,0)
 ....;           To     $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",354,0)
 ....I $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",355,0)
 ....S GOK=0
"RTN","IBCNEHL1",356,0)
 ....Q
"RTN","IBCNEHL1",357,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",358,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",359,0)
 ....;           To     $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",360,0)
 ....I $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",361,0)
 ....S GOK=0
"RTN","IBCNEHL1",362,0)
 ....Q
"RTN","IBCNEHL1",363,0)
 ...Q
"RTN","IBCNEHL1",364,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",365,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",366,0)
 ..Q
"RTN","IBCNEHL1",367,0)
 .Q
"RTN","IBCNEHL1",368,0)
 Q RES
"RTN","IBCNEHL1",369,0)
 ;
"RTN","IBCNEHL1",370,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; File eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",371,0)
 ; Input:   DFN     - Internal Patient IEN
"RTN","IBCNEHL1",372,0)
 ;          IEN312  - Insurance multiple #
"RTN","IBCNEHL1",373,0)
 ;          RIEN    - file 365 ien
"RTN","IBCNEHL1",374,0)
 ;          AFLG    - 1 if called from autoupdate
"RTN","IBCNEHL1",375,0)
 ;                    0 if called from ins. buffer process entry
"RTN","IBCNEHL1",376,0)
 ; Returns: "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR
"RTN","IBCNEHL1",377,0)
 ;          for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",378,0)
 ;
"RTN","IBCNEHL1",379,0)
 ;
"RTN","IBCNEHL1",380,0)
 Q $$EBFILE^IBCNEHL5(DFN,IEN312,RIEN,AFLG)  ;IB*2.0*549 moved because of routine size
"RTN","IBCNEHL1",381,0)
 ;
"RTN","IBCNEHL3")
0^2^B171754905^B171692667
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,497,506,595**;21-MAR-94;Build 29
"RTN","IBCNEHL3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for eIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from eIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ;/Removed the following lines of code as part of IB*2.0*506 but wanted to
"RTN","IBCNEHL3",27,0)
 ;/leave this code available if it should be needed in the future.
"RTN","IBCNEHL3",28,0)
 ; Scenarios:
"RTN","IBCNEHL3",29,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",30,0)
 ; Original Transaction" - set TQ
"RTN","IBCNEHL3",31,0)
 ; Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",32,0)
 ;I ERACT="R"!(ERACT="P") D G ERRORX
"RTN","IBCNEHL3",33,0)
 ;. I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D Q ; first time payer asked us to resubmit
"RTN","IBCNEHL3",34,0)
 ;. . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",35,0)
 ;. . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",36,0)
 ;. . ;
"RTN","IBCNEHL3",37,0)
 ;. ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",38,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",39,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",40,0)
 ;. ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",41,0)
 ;. S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",42,0)
 ;
"RTN","IBCNEHL3",43,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",44,0)
 ; Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",45,0)
 ;I ERACT="W" D G ERRORX
"RTN","IBCNEHL3",46,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",47,0)
 ;. D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",48,0)
 ;
"RTN","IBCNEHL3",49,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",50,0)
 ; Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",51,0)
 ;I ERACT="X" D G ERRORX
"RTN","IBCNEHL3",52,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",53,0)
 ;. D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",54,0)
 ;
"RTN","IBCNEHL3",55,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",56,0)
 ; "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",57,0)
 ; - set TQ Status to "Response Received"
"RTN","IBCNEHL3",58,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",59,0)
 ;I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",60,0)
 ;I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D G ERRORX
"RTN","IBCNEHL3",61,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",62,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",63,0)
 ;
"RTN","IBCNEHL3",64,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",65,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",66,0)
 ;/End of removed code for IB*2.0*506
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNEHL3",69,0)
 ; For all Scenarios 1 thru 5, set TQ Status to "Response Received"
"RTN","IBCNEHL3",70,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",71,0)
 I ",R,P,W,X,N,Y,S,C,"[(","_ERACT_",") D  G ERRORX
"RTN","IBCNEHL3",72,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",73,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",74,0)
 ; /IB*2.0*506 End
"RTN","IBCNEHL3",75,0)
 ;
"RTN","IBCNEHL3",76,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",77,0)
 Q
"RTN","IBCNEHL3",78,0)
 ;
"RTN","IBCNEHL3",79,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",80,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",81,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",82,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",83,0)
 ; Input Variables
"RTN","IBCNEHL3",84,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",85,0)
 ;
"RTN","IBCNEHL3",86,0)
 ; Output Variables
"RTN","IBCNEHL3",87,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",88,0)
 ;
"RTN","IBCNEHL3",89,0)
 ; Init optional param
"RTN","IBCNEHL3",90,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",91,0)
 ;
"RTN","IBCNEHL3",92,0)
 ; Init vars
"RTN","IBCNEHL3",93,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",94,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",97,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",98,0)
 ;
"RTN","IBCNEHL3",99,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",100,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",103,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",104,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",105,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",106,0)
 ;
"RTN","IBCNEHL3",107,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",108,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",109,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",110,0)
 ;
"RTN","IBCNEHL3",111,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",112,0)
 ;
"RTN","IBCNEHL3",113,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",114,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",115,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",116,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",117,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",118,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",119,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",120,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",121,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",122,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",123,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",124,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",125,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",126,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",127,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",128,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",129,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",130,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",131,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",132,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",133,0)
 ;
"RTN","IBCNEHL3",134,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",135,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",136,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",137,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",138,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",139,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",140,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",141,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",142,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",143,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",144,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",145,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",146,0)
 ;
"RTN","IBCNEHL3",147,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",148,0)
 ;
"RTN","IBCNEHL3",149,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",150,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",151,0)
 ;
"RTN","IBCNEHL3",152,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",153,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",154,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",155,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",156,0)
 . D ^DIE
"RTN","IBCNEHL3",157,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",158,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",159,0)
 . D ^DIE
"RTN","IBCNEHL3",160,0)
 ;
"RTN","IBCNEHL3",161,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",162,0)
 Q
"RTN","IBCNEHL3",163,0)
 ;
"RTN","IBCNEHL3",164,0)
PCK ; Payer Check
"RTN","IBCNEHL3",165,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",166,0)
 ;
"RTN","IBCNEHL3",167,0)
 ; Input Variables
"RTN","IBCNEHL3",168,0)
 ; MSGID
"RTN","IBCNEHL3",169,0)
 ;
"RTN","IBCNEHL3",170,0)
 ; Output Variables
"RTN","IBCNEHL3",171,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",172,0)
 ;
"RTN","IBCNEHL3",173,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",174,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",175,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",176,0)
 ;
"RTN","IBCNEHL3",177,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",178,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",179,0)
 ;
"RTN","IBCNEHL3",180,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",181,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",182,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",183,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",184,0)
 . ;
"RTN","IBCNEHL3",185,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",186,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",187,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",188,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",189,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",190,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",191,0)
 . ;
"RTN","IBCNEHL3",192,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",193,0)
 . ;
"RTN","IBCNEHL3",194,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",195,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",196,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",197,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",198,0)
 ..;
"RTN","IBCNEHL3",199,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",200,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",201,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",202,0)
 . ; 
"RTN","IBCNEHL3",203,0)
 . ; If payer response received to ~NO PAYER, update eIV Response file
"RTN","IBCNEHL3",204,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",205,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",206,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",207,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",208,0)
 ;
"RTN","IBCNEHL3",209,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",210,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",211,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",212,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",213,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",214,0)
 . ;
"RTN","IBCNEHL3",215,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",216,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",217,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",218,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",219,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",220,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",221,0)
 ;
"RTN","IBCNEHL3",222,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",223,0)
 ; IB*2*595/DM correctly identify a payer when the payer name begins with numbers 
"RTN","IBCNEHL3",224,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,RIEN,0)),U,3)="" D
"RTN","IBCNEHL3",225,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03////^S X=PIEN" D ^DIE ;stuff internal value for payer
"RTN","IBCNEHL3",226,0)
 Q
"RTN","IBCNEHL3",227,0)
 ;
"RTN","IBCNEHL3",228,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",229,0)
 ;
"RTN","IBCNEHL3",230,0)
 ; Input Variables
"RTN","IBCNEHL3",231,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",232,0)
 ;
"RTN","IBCNEHL3",233,0)
 ; Output Variables
"RTN","IBCNEHL3",234,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",235,0)
 ;
"RTN","IBCNEHL3",236,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",237,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",238,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",239,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",240,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",241,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",242,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",243,0)
 K SYMBOL
"RTN","IBCNEHL3",244,0)
 Q
"RTN","IBCNEHL3",245,0)
 ;
"RTN","IBCNEHL3",246,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",247,0)
 ; Input Variables
"RTN","IBCNEHL3",248,0)
 ; BUFF
"RTN","IBCNEHL3",249,0)
 ;
"RTN","IBCNEHL3",250,0)
 ; Output Variables
"RTN","IBCNEHL3",251,0)
 ; SYMBOL
"RTN","IBCNEHL3",252,0)
 ;
"RTN","IBCNEHL3",253,0)
 N IDUZ,UP
"RTN","IBCNEHL3",254,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",255,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",256,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHL3",257,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",258,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",259,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",260,0)
 Q
"RTN","IBCNEHL3",261,0)
 ;
"RTN","IBCNEHL3",262,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",263,0)
 ;
"RTN","IBCNEHL3",264,0)
 ; Input Variables
"RTN","IBCNEHL3",265,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",266,0)
 ;
"RTN","IBCNEHL3",267,0)
 ; Output Variables
"RTN","IBCNEHL3",268,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",269,0)
 ;
"RTN","IBCNEHL3",270,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",271,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",272,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",273,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",274,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",275,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",276,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",277,0)
 Q
"RTN","IBCNEHL3",278,0)
 ;
"RTN","IBCNEHL3",279,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",280,0)
 ;
"RTN","IBCNEHL3",281,0)
 ; Input Variables
"RTN","IBCNEHL3",282,0)
 ; HCT
"RTN","IBCNEHL3",283,0)
 ;
"RTN","IBCNEHL3",284,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",285,0)
 ;
"RTN","IBCNEHL3",286,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",287,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",288,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",289,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",290,0)
 Q SEGMT
"RTN","IBCNEHL3",291,0)
 ;
"RTN","IBCNEHL3",292,0)
 ; =================================================================
"RTN","IBCNEHL3",293,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL3",294,0)
 ;
"RTN","IBCNEHL3",295,0)
 ; Input Variables
"RTN","IBCNEHL3",296,0)
 ; ERROR, TRACE
"RTN","IBCNEHL3",297,0)
 ;
"RTN","IBCNEHL3",298,0)
 ; Output Variables
"RTN","IBCNEHL3",299,0)
 ; ERFLG=1
"RTN","IBCNEHL3",300,0)
 ;
"RTN","IBCNEHL3",301,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL3",302,0)
 S VEN=0,MCT=9,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL3",303,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL3",304,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL3",305,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL3",306,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL3",307,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL3",308,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL3",309,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL3",310,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL3",311,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",312,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL3",313,0)
 .S MCT=MCT+1,MSG(MCT)="Error:"
"RTN","IBCNEHL3",314,0)
 .F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL3",315,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",316,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FILE"))'="" S MCT=MCT+1,MSG(MCT)="File: "_ERROR("DIERR",VEN,"PARAM","FILE")
"RTN","IBCNEHL3",317,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","IENS"))'="" S MCT=MCT+1,MSG(MCT)="IENS: "_ERROR("DIERR",VEN,"PARAM","IENS")
"RTN","IBCNEHL3",318,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FIELD"))'="" S MCT=MCT+1,MSG(MCT)="Field: "_ERROR("DIERR",VEN,"PARAM","FIELD")
"RTN","IBCNEHL3",319,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",320,0)
 .Q
"RTN","IBCNEHL3",321,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",322,0)
 Q
"RTN","IBCNEHL3",323,0)
 ;
"RTN","IBCNEHL3",324,0)
 ; =================================================================
"RTN","IBCNEHL3",325,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL3",326,0)
 ; encountered problem filing date
"RTN","IBCNEHL3",327,0)
 ;
"RTN","IBCNEHL3",328,0)
 ; Input Variables
"RTN","IBCNEHL3",329,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL3",330,0)
 ;
"RTN","IBCNEHL3",331,0)
 ; Output Variables
"RTN","IBCNEHL3",332,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL3",333,0)
 ;
"RTN","IBCNEHL3",334,0)
 N DFN,SYMBOL
"RTN","IBCNEHL3",335,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL3",336,0)
 ;
"RTN","IBCNEHL3",337,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL3",338,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL3",339,0)
 ;
"RTN","IBCNEHL3",340,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL3",341,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL3",342,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL3",343,0)
 ;
"RTN","IBCNEHL3",344,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL3",345,0)
 ; create buffer entry
"RTN","IBCNEHL3",346,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL3",347,0)
 ;
"RTN","IBCNEHL3",348,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL3",349,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL3",350,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL3",351,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL3",352,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL3",353,0)
 ;
"RTN","IBCNEHL3",354,0)
 ;Update buffer symbol
"RTN","IBCNEHL3",355,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL3",356,0)
 ;
"RTN","IBCNEHL3",357,0)
 Q
"RTN","IBCNEHL3",358,0)
 ;
"RTN","IBCNEHL3",359,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL3",360,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",361,0)
 ;
"RTN","IBCNEHL3",362,0)
 ; returns 1 if given policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",363,0)
 N RES
"RTN","IBCNEHL3",364,0)
 S RES=0
"RTN","IBCNEHL3",365,0)
 I $P(RDATA13,U,2)'=$P(IDATA7,U,2) G CHK1X  ; Subscriber ID doesn't match   ; IB*2.0*497 compare subscriber ID data at their new locations
"RTN","IBCNEHL3",366,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL3",367,0)
 I '$$NAMECMP^IBCNEHLU($P(RDATA13,U),$P(IDATA7,U)) G CHK1X  ; Insured's name doesn't match  ; IB*2.0*497 compare name of insured data at their new locations
"RTN","IBCNEHL3",368,0)
 S RES=1
"RTN","IBCNEHL3",369,0)
CHK1X ;
"RTN","IBCNEHL3",370,0)
 Q RES
"RTN","IBCNEHL3",371,0)
 ;
"RTN","IBCNEHL3",372,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL3",373,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",374,0)
 ;
"RTN","IBCNEHL3",375,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",376,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL3",377,0)
 S RES=0
"RTN","IBCNEHL3",378,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL3",379,0)
 S IENS=IEN2_","
"RTN","IBCNEHL3",380,0)
 S ID=$P(RDATA13,U,2)    ; IB*2.0*497 Subscriber ID needs to be retrieved from its new location
"RTN","IBCNEHL3",381,0)
 I ID'=$P(IDATA7,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match ; IB*2.0*497 compare subscriber ID at new locations
"RTN","IBCNEHL3",382,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL3",383,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL3",384,0)
 S NAME=$P(RDATA13,U),PNAME=$$GET1^DIQ(2,IENS,.01)   ; IB*2.0*497 get name of insured at its new location
"RTN","IBCNEHL3",385,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA7,U)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match ; IB*2*497
"RTN","IBCNEHL3",386,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNEHL3",387,0)
 S RES=1
"RTN","IBCNEHL3",388,0)
CHK2X ;
"RTN","IBCNEHL3",389,0)
 Q RES
"RTN","IBCNEHL3",390,0)
 ;
"RTN","IBCNEHL3",391,0)
UPDIREC(RIEN,IEN312) ; IB*2*595/DM update INSUR RECORD IEN in the response file (#365,.12) 
"RTN","IBCNEHL3",392,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL3",393,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL3",394,0)
 ;
"RTN","IBCNEHL3",395,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL3",396,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL3",397,0)
 ; IB*2*595/DM do not update TQ file. 
"RTN","IBCNEHL3",398,0)
 ; The proper INSUR RECORD IEN field is now located in the response file 
"RTN","IBCNEHL3",399,0)
 ;S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL3",400,0)
 ;S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL3",401,0)
 S DATA(365,RIEN_",",.12)=IEN312
"RTN","IBCNEHL3",402,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL3",403,0)
 Q
"RTN","IBCNEHL3",404,0)
 ;
"RTN","IBCNEHL3",405,0)
LCKERR ; send locking error message
"RTN","IBCNEHL3",406,0)
 N MSG,XMY
"RTN","IBCNEHL3",407,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from the EC"
"RTN","IBCNEHL3",408,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNEHL3",409,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNEHL3",410,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNEHL3",411,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNEHL3",412,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNEHL3",413,0)
 S MSG(7)=" "
"RTN","IBCNEHL3",414,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNEHL3",415,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",416,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",417,0)
 Q
"RTN","IBCNEHL3",418,0)
 ;
"RTN","IBCNEKI2")
0^4^B9851422^B9273638
"RTN","IBCNEKI2",1,0)
IBCNEKI2 ;DAOU/BHS - PURGE eIV DATA FILES CONT'D ;11-JUL-2002
"RTN","IBCNEKI2",2,0)
 ;;2.0;INTEGRATED BILLING;**271,316,416,595**;21-MAR-94;Build 29
"RTN","IBCNEKI2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEKI2",4,0)
 ;
"RTN","IBCNEKI2",5,0)
 ; This routine holds additional procedures for purging the eIV data
"RTN","IBCNEKI2",6,0)
 ; from the Trans Queue file (365.1) and the Response file (365).
"RTN","IBCNEKI2",7,0)
 ;
"RTN","IBCNEKI2",8,0)
 ; ---------------------------------------------------
"RTN","IBCNEKI2",9,0)
MMPURGE ; This procedure is responsible for the creation and
"RTN","IBCNEKI2",10,0)
 ; sending of the MailMan message on the first day of the month
"RTN","IBCNEKI2",11,0)
 ; if the site has data eligible to be purged and if the mail group is
"RTN","IBCNEKI2",12,0)
 ; defined appropriately in the eIV site parameters.
"RTN","IBCNEKI2",13,0)
 ; Identify records eligible to be purged
"RTN","IBCNEKI2",14,0)
 ;
"RTN","IBCNEKI2",15,0)
 ; IB*595 Added Automated purge logic
"RTN","IBCNEKI2",16,0)
 D EN1^IBCNEKIT
"RTN","IBCNEKI2",17,0)
 G MMPURGX
"RTN","IBCNEKI2",18,0)
 ;
"RTN","IBCNEKI2",19,0)
 ;IB*595 - The following mail message is currently not required.  Code left in case eIns Team wants to bring it back
"RTN","IBCNEKI2",20,0)
 NEW ENDDT,STATLIST,DATE,TQIEN,TOTTQ,PURTQ,TQS
"RTN","IBCNEKI2",21,0)
 NEW HLIEN,RPIEN,RPS,TOTRP,PURRP,MSG,MGRP
"RTN","IBCNEKI2",22,0)
 ;
"RTN","IBCNEKI2",23,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKI2",24,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKI2",25,0)
 S (TOTTQ,PURTQ,TOTRP,PURRP)=0
"RTN","IBCNEKI2",26,0)
 ;
"RTN","IBCNEKI2",27,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKI2",28,0)
 ;   3=Response Received
"RTN","IBCNEKI2",29,0)
 ;   5=Communication Failure
"RTN","IBCNEKI2",30,0)
 ;   7=Cancelled
"RTN","IBCNEKI2",31,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKI2",32,0)
 ;
"RTN","IBCNEKI2",33,0)
 S DATE=""
"RTN","IBCNEKI2",34,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  S TOTTQ=TOTTQ+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",35,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKI2",36,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKI2",37,0)
 . S PURTQ=PURTQ+1
"RTN","IBCNEKI2",38,0)
 . ; Loop thru responses to count them, too
"RTN","IBCNEKI2",39,0)
 . S HLIEN=0
"RTN","IBCNEKI2",40,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKI2",41,0)
 . .  I $P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) S PURRP=PURRP+1
"RTN","IBCNEKI2",42,0)
 ;
"RTN","IBCNEKI2",43,0)
 S DATE=""
"RTN","IBCNEKI2",44,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  S TOTRP=TOTRP+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",45,0)
 . I $P($G(^IBCN(365,RPIEN,0)),U,5) Q    ; include only unsolicited
"RTN","IBCNEKI2",46,0)
 . S PURRP=PURRP+1
"RTN","IBCNEKI2",47,0)
 ;
"RTN","IBCNEKI2",48,0)
 ; Do not send message if no records are eligible
"RTN","IBCNEKI2",49,0)
 I 'PURTQ,'PURRP G MMPURGX
"RTN","IBCNEKI2",50,0)
 ;
"RTN","IBCNEKI2",51,0)
 ; Send a MailMan message with Eligible Purge counts
"RTN","IBCNEKI2",52,0)
 S MSG(1)="ATTENTION IRM:  There are eIV TRANSMISSION QUEUE and"
"RTN","IBCNEKI2",53,0)
 S MSG(2)="eIV RESPONSE records eligible to be purged."
"RTN","IBCNEKI2",54,0)
 S MSG(3)=""
"RTN","IBCNEKI2",55,0)
 S MSG(4)="File                                  Eligible   Total  "
"RTN","IBCNEKI2",56,0)
 S MSG(5)="                                       Count     Count  "
"RTN","IBCNEKI2",57,0)
 S MSG(6)="------------------------------------  --------  --------"
"RTN","IBCNEKI2",58,0)
 S MSG(7)="eIV RESPONSE FILE (#365)              "_$J(PURRP,8)_"  "_$J(TOTRP,8)
"RTN","IBCNEKI2",59,0)
 S MSG(8)="eIV TRANSMISSION QUEUE FILE (#365.1)  "_$J(PURTQ,8)_"  "_$J(TOTTQ,8)
"RTN","IBCNEKI2",60,0)
 S MSG(9)="====================================  ========  ========"
"RTN","IBCNEKI2",61,0)
 S MSG(10)="Total                                 "_$J(PURTQ+PURRP,8)_"  "_$J(TOTTQ+TOTRP,8)
"RTN","IBCNEKI2",62,0)
 S MSG(11)=""
"RTN","IBCNEKI2",63,0)
 S MSG(12)="Please run option IBCNE PURGE IIV DATA - Purge eIV Transactions,"
"RTN","IBCNEKI2",64,0)
 S MSG(13)="if you would like to purge the eligible records."
"RTN","IBCNEKI2",65,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEKI2",66,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEKI2",67,0)
 D MSG^IBCNEUT5(MGRP,"eIV Data Eligible for Purge","MSG(")
"RTN","IBCNEKI2",68,0)
 ;
"RTN","IBCNEKI2",69,0)
MMPURGX ;
"RTN","IBCNEKI2",70,0)
 Q
"RTN","IBCNEKI2",71,0)
 ;
"RTN","IBCNEKIT")
0^3^B78057141^B55673167
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE eIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,549,595**;21-MAR-94;Build 29
"RTN","IBCNEKIT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the eIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; eIV Transmission Queue file (#365.1) and in the eIV Response file (#365).
"RTN","IBCNEKIT",7,0)
 ; User can pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",8,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",9,0)
 ; task after hours (8:00pm).
"RTN","IBCNEKIT",10,0)
 ;
"RTN","IBCNEKIT",11,0)
EN ;
"RTN","IBCNEKIT",12,0)
 NEW STOP,BEGDT,ENDDT,STATLIST,IBVER
"RTN","IBCNEKIT",13,0)
 S IBVER=1
"RTN","IBCNEKIT",14,0)
 D INIT I STOP G EXIT       ; initialize/calculate default dates
"RTN","IBCNEKIT",15,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",16,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",17,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",18,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",19,0)
EXIT ;
"RTN","IBCNEKIT",20,0)
 Q
"RTN","IBCNEKIT",21,0)
 ;
"RTN","IBCNEKIT",22,0)
EN1 ; Automated Monthly Purge *IB*2*595
"RTN","IBCNEKIT",23,0)
 NEW STOP,BEGDT,ENDDT,STATLIST,IBVER
"RTN","IBCNEKIT",24,0)
 S IBVER=2
"RTN","IBCNEKIT",25,0)
 D INIT I STOP G EXIT1       ; initialize/calculate default dates
"RTN","IBCNEKIT",26,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",27,0)
EXIT1 ;
"RTN","IBCNEKIT",28,0)
 Q
"RTN","IBCNEKIT",29,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",30,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",31,0)
 ;
"RTN","IBCNEKIT",32,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",33,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",34,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",35,0)
 ;
"RTN","IBCNEKIT",36,0)
 ; First loop through the eIV Transmission Queue file and delete all
"RTN","IBCNEKIT",37,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",38,0)
 ;
"RTN","IBCNEKIT",39,0)
 N CNT,DA,DATE,DIK,HLIEN,PFLAG,TQIEN,TQS    ;IB*2.0*549 added PFLAG
"RTN","IBCNEKIT",40,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",41,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",42,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",43,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",44,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; trans queue status
"RTN","IBCNEKIT",45,0)
 . I '$F(STATLIST,","_TQS_",") Q             ; must be in the list
"RTN","IBCNEKIT",46,0)
 . S PFLAG=$$GET1^DIQ(365,TQIEN_",",.11,"I") ; Do Not Purge Flag IB*2.0*549 added line
"RTN","IBCNEKIT",47,0)
 . Q:+PFLAG                                  ; IB*2.0*549 added line
"RTN","IBCNEKIT",48,0)
 . ;
"RTN","IBCNEKIT",49,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",50,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",51,0)
 . S HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",52,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",53,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) I DA D ^DIK
"RTN","IBCNEKIT",54,0)
 .. Q
"RTN","IBCNEKIT",55,0)
 . ;
"RTN","IBCNEKIT",56,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",57,0)
 . S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBCNEKIT",58,0)
 . Q
"RTN","IBCNEKIT",59,0)
 ;
"RTN","IBCNEKIT",60,0)
 ; Check for a stop request
"RTN","IBCNEKIT",61,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",62,0)
 ;
"RTN","IBCNEKIT",63,0)
 ; Now we must loop through the eIV Response file itself to purge any
"RTN","IBCNEKIT",64,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",65,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",66,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",67,0)
 ; check the status. For this loop, start from the very beginning of
"RTN","IBCNEKIT",68,0)
 ; the file.
"RTN","IBCNEKIT",69,0)
 ;
"RTN","IBCNEKIT",70,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",71,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",72,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",73,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",74,0)
 . ;
"RTN","IBCNEKIT",75,0)
 . ; If there is a pointer to the transmission queue file, then we
"RTN","IBCNEKIT",76,0)
 . ; should get out of this loop because the purpose of this section
"RTN","IBCNEKIT",77,0)
 . ; is to purge those responses with no link to the transmission
"RTN","IBCNEKIT",78,0)
 . ; queue file.
"RTN","IBCNEKIT",79,0)
 . ;
"RTN","IBCNEKIT",80,0)
 . I $P($G(^IBCN(365,DA,0)),U,5) Q
"RTN","IBCNEKIT",81,0)
 . D ^DIK
"RTN","IBCNEKIT",82,0)
 . Q
"RTN","IBCNEKIT",83,0)
 ;
"RTN","IBCNEKIT",84,0)
PURGEX ;
"RTN","IBCNEKIT",85,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",86,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",87,0)
 Q
"RTN","IBCNEKIT",88,0)
 ;
"RTN","IBCNEKIT",89,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",90,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",91,0)
 ;
"RTN","IBCNEKIT",92,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS
"RTN","IBCNEKIT",93,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",94,0)
 ;
"RTN","IBCNEKIT",95,0)
 S STOP=0
"RTN","IBCNEKIT",96,0)
 ;
"RTN","IBCNEKIT",97,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",98,0)
 ;   3=Response Received
"RTN","IBCNEKIT",99,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",100,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",101,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKIT",102,0)
 ;
"RTN","IBCNEKIT",103,0)
 ; Try to find a beginning date in the eIV Transmission Queue file
"RTN","IBCNEKIT",104,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",105,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",106,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",107,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKIT",108,0)
 . S FOUND=1
"RTN","IBCNEKIT",109,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",110,0)
 . Q
"RTN","IBCNEKIT",111,0)
 ;
"RTN","IBCNEKIT",112,0)
 ; If not successful, try to find a beginning date in the eIV Response file.
"RTN","IBCNEKIT",113,0)
 I 'FOUND D
"RTN","IBCNEKIT",114,0)
 . S DATE=""
"RTN","IBCNEKIT",115,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",116,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",117,0)
 .. I '$F(STATLIST,","_RPS_",") Q
"RTN","IBCNEKIT",118,0)
 .. S FOUND=1
"RTN","IBCNEKIT",119,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",120,0)
 .. Q
"RTN","IBCNEKIT",121,0)
 . Q
"RTN","IBCNEKIT",122,0)
 ;
"RTN","IBCNEKIT",123,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",124,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",125,0)
 ;
"RTN","IBCNEKIT",126,0)
 I IBVER=1,'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",127,0)
 . W !!?5,"Purging of eIV data is not possible at this time."
"RTN","IBCNEKIT",128,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",129,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",130,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",131,0)
 . Q
"RTN","IBCNEKIT",132,0)
 I IBVER=2,'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",133,0)
 .; Send a MailMan message with Eligible Purge counts
"RTN","IBCNEKIT",134,0)
 .N MGRP,MSG,IBXMY
"RTN","IBCNEKIT",135,0)
 .S MSG(1)="Purge Electronic Insurance Verification (eIV) Data Files did not complete for station"
"RTN","IBCNEKIT",136,0)
 .S MSG(2)=+$$SITE^VASITE()_"."
"RTN","IBCNEKIT",137,0)
 .S MSG(3)=""
"RTN","IBCNEKIT",138,0)
 .S MSG(4)="The option runs automatically on a monthly basis and purges data from the eIV Response"
"RTN","IBCNEKIT",139,0)
 .S MSG(5)="File (#365) and the eIV Transmission Queue File (#365.1).  The data must be at least"
"RTN","IBCNEKIT",140,0)
 .S MSG(6)="six months old before it can be purged.  Only insurance transactions that have a "
"RTN","IBCNEKIT",141,0)
 .S MSG(7)="transmission status of ""Response Received"", ""Communication Failure"", or ""Cancelled"""
"RTN","IBCNEKIT",142,0)
 .S MSG(8)="may be purged."
"RTN","IBCNEKIT",143,0)
 .; Set to IB site parameter MAILGROUP - IBCNE EIV MESSAGE
"RTN","IBCNEKIT",144,0)
 .S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEKIT",145,0)
 .S IBXMY("VHAEINSURANCERR@domain.ext")=""
"RTN","IBCNEKIT",146,0)
 .D MSG^IBCNEUT5(MGRP,"eIV Purge Error Encountered for Station "_+$$SITE^VASITE(),"MSG(",,.IBXMY)
"RTN","IBCNEKIT",147,0)
 .; Duplicate message to Outlook group
"RTN","IBCNEKIT",148,0)
 .; S MGRP="G.VHAEINSURANCERR@domain.ext"
"RTN","IBCNEKIT",149,0)
 .; D MSG^IBCNEUT5(MGRP,"eIV Data Background Purge","MSG(")
"RTN","IBCNEKIT",150,0)
 .Q
"RTN","IBCNEKIT",151,0)
 ;
"RTN","IBCNEKIT",152,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",153,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",154,0)
 I IBVER=2 G INITX
"RTN","IBCNEKIT",155,0)
 W @IOF
"RTN","IBCNEKIT",156,0)
 W !?8,"Purge Electronic Insurance Verification (eIV) Data Files"
"RTN","IBCNEKIT",157,0)
 W !!!," This option will allow you to purge data from the eIV Response File (#365)"
"RTN","IBCNEKIT",158,0)
 W !," and the eIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",159,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",160,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",161,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",162,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",163,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",164,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",165,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",166,0)
 W !!
"RTN","IBCNEKIT",167,0)
INITX ;
"RTN","IBCNEKIT",168,0)
 Q
"RTN","IBCNEKIT",169,0)
 ;
"RTN","IBCNEKIT",170,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",171,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",172,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",173,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",174,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",175,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",176,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",177,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",178,0)
 S BEGDT=Y
"RTN","IBCNEKIT",179,0)
BEGDTX ;
"RTN","IBCNEKIT",180,0)
 Q
"RTN","IBCNEKIT",181,0)
 ;
"RTN","IBCNEKIT",182,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",183,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",184,0)
 W !
"RTN","IBCNEKIT",185,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",186,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",187,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",188,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",189,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",190,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",191,0)
 S ENDDT=Y
"RTN","IBCNEKIT",192,0)
ENDDTX ;
"RTN","IBCNEKIT",193,0)
 Q
"RTN","IBCNEKIT",194,0)
 ;
"RTN","IBCNEKIT",195,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",196,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",197,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",198,0)
 W !!!," You want to purge all eIV data created between "
"RTN","IBCNEKIT",199,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",200,0)
 W !
"RTN","IBCNEKIT",201,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",202,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",203,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",204,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",205,0)
CONFX ;
"RTN","IBCNEKIT",206,0)
 Q
"RTN","IBCNEKIT",207,0)
 ;
"RTN","IBCNEKIT",208,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",209,0)
 ; The concept for queuing the purge came from the insurance buffer
"RTN","IBCNEKIT",210,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",211,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",212,0)
 ;
"RTN","IBCNEKIT",213,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",214,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",215,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",216,0)
 S ZTDESC="Purge eIV Data"    ; Task description
"RTN","IBCNEKIT",217,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",218,0)
 S ZTIO=""
"RTN","IBCNEKIT",219,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",220,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",221,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",222,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",223,0)
 I IBVER=2 G QUEUEX
"RTN","IBCNEKIT",224,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the eIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",225,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",226,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",227,0)
QUEUEX ;
"RTN","IBCNEKIT",228,0)
 Q
"RTN","IBCNERPD")
0^1^B110303722^B108873361
"RTN","IBCNERPD",1,0)
IBCNERPD ;DAOU/RO - eIV PAYER LINK REPORT PRINT;AUG-2003
"RTN","IBCNERPD",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,416,521,528,595**;21-MAR-94;Build 29
"RTN","IBCNERPD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPD",4,0)
 ;
"RTN","IBCNERPD",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERPD",6,0)
 ;
"RTN","IBCNERPD",7,0)
 ; Called by IBCNERPB
"RTN","IBCNERPD",8,0)
 ; Input from IBCNERPB/C:
"RTN","IBCNERPD",9,0)
 ;  
"RTN","IBCNERPD",10,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0)
"RTN","IBCNERPD",11,0)
 ;    IBCNERTN="IBCNERPB", 
"RTN","IBCNERPD",12,0)
 ;    CT=Seq ct
"RTN","IBCNERPD",13,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) 
"RTN","IBCNERPD",14,0)
 ;  IBOUT
"RTN","IBCNERPD",15,0)
 ;
"RTN","IBCNERPD",16,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  
"RTN","IBCNERPD",17,0)
 N IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPD",18,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IBMAT,IBREP,IBDET,IBPPYR,ZZ
"RTN","IBCNERPD",19,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPD",20,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPD",21,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPD",22,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPD",23,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPD",24,0)
 ; Ins Report
"RTN","IBCNERPD",25,0)
 I IBREP=2 D
"RTN","IBCNERPD",26,0)
 . S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPD",27,0)
 . S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPD",28,0)
 . S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPD",29,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPD",30,0)
 ; Determine IO params
"RTN","IBCNERPD",31,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNERPD",32,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPD",33,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPD",34,0)
 D PRINT(IBCNERTN,IBREP,IBDET,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBOUT)
"RTN","IBCNERPD",35,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPD",36,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPD",37,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPD",38,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",39,0)
EXIT3 ; Exit pt
"RTN","IBCNERPD",40,0)
 Q
"RTN","IBCNERPD",41,0)
 ;
"RTN","IBCNERPD",42,0)
PRINT(RTN,REP,DET,TYP,SRT,PGC,PXT,MAX,CRT,IBOUT) ; Print data
"RTN","IBCNERPD",43,0)
 ; Input: RTN="IBCENRPB", PGC=page ct,
"RTN","IBCNERPD",44,0)
 ;   PXT=exit flg, MAX=max line ct/pg,
"RTN","IBCNERPD",45,0)
 ;  CRT=1/0, IBOUT="R"/"E"
"RTN","IBCNERPD",46,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,DASH
"RTN","IBCNERPD",47,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPD",48,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPD",49,0)
 S (SORT1,SORT2)="",$P(DASH,"-",133)=""
"RTN","IBCNERPD",50,0)
 ;
"RTN","IBCNERPD",51,0)
 ;Excel header
"RTN","IBCNERPD",52,0)
 I IBOUT="E" D PHDL
"RTN","IBCNERPD",53,0)
 ;
"RTN","IBCNERPD",54,0)
 I '$D(^TMP($J,RTN)) D HEADER:(IBOUT="R") W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERPD",55,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",56,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",57,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",58,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERPD",59,0)
 . . . D DATA(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERPD",60,0)
 ;
"RTN","IBCNERPD",61,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",62,0)
 I IBOUT="R" D
"RTN","IBCNERPD",63,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",64,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERPD",65,0)
PRINTX ;
"RTN","IBCNERPD",66,0)
 Q
"RTN","IBCNERPD",67,0)
 ;
"RTN","IBCNERPD",68,0)
HEADER ; Print hdr info
"RTN","IBCNERPD",69,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERPD",70,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERPD",71,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERPD",72,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",73,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERPD",74,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERPD",75,0)
 S PGC=PGC+1
"RTN","IBCNERPD",76,0)
 W @IOF,!,?1,"eIV Payer Link Report"
"RTN","IBCNERPD",77,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=131-$L(HDR)
"RTN","IBCNERPD",78,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",79,0)
 W !,?1,"Report Option: "_$S(REP=1:"Payer List",1:"Insurance Company List")
"RTN","IBCNERPD",80,0)
 I REP=1 D
"RTN","IBCNERPD",81,0)
 . S HDR=$S(TYP=1:"Unlinked Payers Only",TYP=2:"Linked Payers Only",1:"All Payers")
"RTN","IBCNERPD",82,0)
 . I TYP=3 S HDR=HDR_", "_$S(DET=1:"With Ins. Co. Detail",1:"Without Ins. Co. Detail")
"RTN","IBCNERPD",83,0)
 I REP=2 D
"RTN","IBCNERPD",84,0)
 . S HDR=$S(TYP=1:"Unlinked Insurance Companies Only",TYP=2:"Linked Insurance Companies Only",1:"All Insurance Companies")
"RTN","IBCNERPD",85,0)
 S OFFSET=79-$L(HDR)
"RTN","IBCNERPD",86,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",87,0)
 ; IB*2.0*521 add validated HPID to report
"RTN","IBCNERPD",88,0)
 I REP=2 W !,"'*' indicates the Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",89,0)
 I REP=1,DET=1 W !,"'*' indicates the Linked Insurance Company HPID/OEID failed validation checks"
"RTN","IBCNERPD",90,0)
 W !
"RTN","IBCNERPD",91,0)
 I REP=1 D
"RTN","IBCNERPD",92,0)
 . I IBPPYR'="" W ?1,"For Single Payer: ",$P(IBPPYR,"^",2)
"RTN","IBCNERPD",93,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",94,0)
 . ;W !?39,"National",?54,"# Linked",?64,"Nationally",?77,"Locally",?87,"Prof.",?104,"Inst." W:DET=1 ?121,"HPID/"
"RTN","IBCNERPD",95,0)
 . ;W !,"Payer Name:",?39,"Payer ID",?54,"Ins. Co.",?65,"Active?",?77,"Active?",?87,"EDI#",?104,"EDI#" W:DET=1 ?121,"OEID"
"RTN","IBCNERPD",96,0)
 . W !?31,"National",?46,"# Linked",?56,"Nationally",?69,"Locally",?78,"FSC",?87,"Prof.",?104,"Inst." W:DET=1 ?121,"HPID/"
"RTN","IBCNERPD",97,0)
 . W !,"Payer Name:",?31,"Payer ID",?46,"Ins. Co.",?57,"Active?",?69,"Active?",?78,"Trusted?",?87,"EDI#",?104,"EDI#" W:DET=1 ?121,"OEID"
"RTN","IBCNERPD",98,0)
 I REP=2 D
"RTN","IBCNERPD",99,0)
 . I IBMAT'="" W ?1,"Only Insurance Companies that match: ",IBMAT
"RTN","IBCNERPD",100,0)
 . ; IB*2.0*528 add Trusted flag and Number of Active Groups to report
"RTN","IBCNERPD",101,0)
 . ;W !?56,"Nat.",?71,"Loc.",?83,"Prof.",?104,"Inst.",?121,"HPID/"
"RTN","IBCNERPD",102,0)
 . ;W !,"Insurance Company:",?56,"Act?",?71,"Act?",?83,"EDI#",?104,"EDI#",?121,"OEID"
"RTN","IBCNERPD",103,0)
 . W !?32,"# Active",?56,"Nat.",?66,"Loc.",?73,"FSC",?83,"Prof.",?104,"Inst.",?121,"HPID/"
"RTN","IBCNERPD",104,0)
 . W !,"Insurance Company:",?33,"Groups",?56,"Act?",?66,"Act?",?73,"Trusted?",?83,"EDI#",?104,"EDI#",?121,"OEID"
"RTN","IBCNERPD",105,0)
 . I TYP'=1 W !,"   Payer:",?44,"VA ID"
"RTN","IBCNERPD",106,0)
 W !,DASH
"RTN","IBCNERPD",107,0)
HEADERX ;
"RTN","IBCNERPD",108,0)
 Q
"RTN","IBCNERPD",109,0)
 ;
"RTN","IBCNERPD",110,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERPD",111,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERPD",112,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERPD",113,0)
 S NWPG=0
"RTN","IBCNERPD",114,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERPD",115,0)
 . I IBOUT="R" D
"RTN","IBCNERPD",116,0)
 . . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERPD",117,0)
 . W ! W:IBOUT="R" ?1 W DISPDATA(LNCT) Q
"RTN","IBCNERPD",118,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERPD",119,0)
 . I NWPG S NWPG=0
"RTN","IBCNERPD",120,0)
 . Q
"RTN","IBCNERPD",121,0)
LINEX Q
"RTN","IBCNERPD",122,0)
 ;
"RTN","IBCNERPD",123,0)
DATA(DISPDATA) ;  Build disp lines
"RTN","IBCNERPD",124,0)
 N LCT,CT,CT2,RPTDATA,WW,XX,YY,ZZ,IBHPD
"RTN","IBCNERPD",125,0)
 ; Merge into local array
"RTN","IBCNERPD",126,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPD",127,0)
 ; Build
"RTN","IBCNERPD",128,0)
 ;
"RTN","IBCNERPD",129,0)
 ; PAYER REPORT
"RTN","IBCNERPD",130,0)
 I REP=1 D
"RTN","IBCNERPD",131,0)
 . ; Excel format
"RTN","IBCNERPD",132,0)
 . I IBOUT="E" D  Q
"RTN","IBCNERPD",133,0)
 . . ; IB*2*595/DM for Excel, properly display the locally active status  
"RTN","IBCNERPD",134,0)
 . . S LCT=0,DISPDATA(1)=SORT2_U_$P(RPTDATA,U)_U_$P(RPTDATA,U,6)_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,5)=1:"YES",1:"NO")_U_$P(RPTDATA,U,7)_U_$P(RPTDATA,U,2)_U_$P(RPTDATA,U,3)
"RTN","IBCNERPD",135,0)
 . . I DET=1 S WW=DISPDATA(1) D DET
"RTN","IBCNERPD",136,0)
 . ;
"RTN","IBCNERPD",137,0)
 . ; 1st line is payer
"RTN","IBCNERPD",138,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",139,0)
 . ;S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,35,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"        "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),12,"L")
"RTN","IBCNERPD",140,0)
 . ;S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),8,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),16,"L")_" "_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")
"RTN","IBCNERPD",141,0)
 . S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,27,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"        "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),12,"L")
"RTN","IBCNERPD",142,0)
 . S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),9,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,7),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),16,"L")_" "_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")
"RTN","IBCNERPD",143,0)
 . ; See if detail is required
"RTN","IBCNERPD",144,0)
 . I DET=1 D
"RTN","IBCNERPD",145,0)
 . . I $O(RPTDATA(""))'="" S LCT=LCT+1,DISPDATA(LCT)="   Linked Insurance Companies:"
"RTN","IBCNERPD",146,0)
 . . S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",147,0)
 . . . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",148,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)="   "_$$FO^IBCNEUT1(XX,35,"L")_"  "_$$FO^IBCNEUT1($P(ZZ,U,1),20,"L")_" "_$E($P(ZZ,U,4),1,15)
"RTN","IBCNERPD",149,0)
 . . . ; don't display ','s if no address/state on file
"RTN","IBCNERPD",150,0)
 . . . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",151,0)
 . . . ; IB*2.0*521 add validated HPID to report
"RTN","IBCNERPD",152,0)
 . . . S IBHPD=$$HPD^IBCNHUT1(YY,1)
"RTN","IBCNERPD",153,0)
 . . . ;S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",93-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",154,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",86-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",155,0)
 . . . ; display EDI#'s
"RTN","IBCNERPD",156,0)
 . . . ;S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,8),16,"L")
"RTN","IBCNERPD",157,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),16,"L")_" "_$$FO^IBCNEUT1($P(ZZ,U,8),16,"L")_" "_IBHPD
"RTN","IBCNERPD",158,0)
 ;
"RTN","IBCNERPD",159,0)
 ; Insurance Company Report
"RTN","IBCNERPD",160,0)
 I REP=2 D
"RTN","IBCNERPD",161,0)
 . ; Excel format
"RTN","IBCNERPD",162,0)
 . I IBOUT="E" D  Q
"RTN","IBCNERPD",163,0)
 . . ;S LCT=1,DISPDATA(1)=SORT2_U_$P(RPTDATA,U,1)_U_$P(RPTDATA,U,6)_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,4)=1:"YES",1:"NO")_U_$P(RPTDATA,U,7)_U_$P(RPTDATA,U,2)_U_$P(RPTDATA,U,3)
"RTN","IBCNERPD",164,0)
 . . S LCT=1,DISPDATA(1)=SORT2_U_$P(RPTDATA,U,10)_U_$P(RPTDATA,U,13)
"RTN","IBCNERPD",165,0)
 . . I $P(RPTDATA,U,14)'="" S DISPDATA(1)=DISPDATA(1)_", "_$P($G(^DIC(5,$P(RPTDATA,U,14)+0,0)),U,2)_" "_$P(RPTDATA,U,15)
"RTN","IBCNERPD",166,0)
 . . S IBHPD=$$HPD^IBCNHUT1(CNT,1),ZZ=$P(RPTDATA,"~",2)
"RTN","IBCNERPD",167,0)
 . . S DISPDATA(1)=DISPDATA(1)_U_$P(RPTDATA,U,8)_U_$P(ZZ,U,2)_U_$P(ZZ,U,4)_U_IBHPD_U
"RTN","IBCNERPD",168,0)
 . . I $P(RPTDATA,U)="" S:TYP'=1 DISPDATA(1)=DISPDATA(1)_"** NOT CURRENTLY LINKED **" Q
"RTN","IBCNERPD",169,0)
 . . S DISPDATA(1)=DISPDATA(1)_$P(RPTDATA,U,1,2)_U_$S($P(RPTDATA,U,5)=1:"YES",1:"NO")_U_$S($P(RPTDATA,U,6)=1:"YES",1:"NO")_U_$P(RPTDATA,U,9)_U_$P(RPTDATA,U,3,4)
"RTN","IBCNERPD",170,0)
 . ;
"RTN","IBCNERPD",171,0)
 . ; Ins carrier
"RTN","IBCNERPD",172,0)
 . ; IB*2.0*528 add number of active groups to report
"RTN","IBCNERPD",173,0)
 . S DISPDATA(1)=$$FO^IBCNEUT1(SORT2,30,"L")_"  "_$$FO^IBCNEUT1($P(RPTDATA,U,8),5,"R")_$$FO^IBCNEUT1(" ",45,"L")
"RTN","IBCNERPD",174,0)
 . ; Ins address
"RTN","IBCNERPD",175,0)
 . S IBHPD=$$HPD^IBCNHUT1(CNT,1)
"RTN","IBCNERPD",176,0)
 . S ZZ=$P(RPTDATA,"~",2),DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($P(ZZ,U,2),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,4),16,"L")_" "_IBHPD
"RTN","IBCNERPD",177,0)
 . S DISPDATA(2)="        "_$P(RPTDATA,U,10)_"  "_$P(RPTDATA,U,13)
"RTN","IBCNERPD",178,0)
 . ; Add state/zip if defined
"RTN","IBCNERPD",179,0)
 . I $P(RPTDATA,U,14)'="" S DISPDATA(2)=DISPDATA(2)_", "_$P($G(^DIC(5,$P(RPTDATA,U,14)+0,0)),U,2)_" "_$$FO^IBCNEUT1($P(RPTDATA,U,15),5,"L")
"RTN","IBCNERPD",180,0)
 . ; if no payer is linked AND displaying payers
"RTN","IBCNERPD",181,0)
 . I $P(RPTDATA,U)="",TYP'=1 S DISPDATA(3)="   ** NOT CURRENTLY LINKED **",LCT=4,DISPDATA(4)="  " Q
"RTN","IBCNERPD",182,0)
 . ; if no payer and not displaying then quit
"RTN","IBCNERPD",183,0)
 . I $P(RPTDATA,U)="" S LCT=3,DISPDATA(3)="  " Q
"RTN","IBCNERPD",184,0)
 . ; Display Payer Info Line
"RTN","IBCNERPD",185,0)
 . S DISPDATA(3)="  "_$$FO^IBCNEUT1($P(RPTDATA,U,1),35,"L")_"      "_$$FO^IBCNEUT1($P(RPTDATA,U,2),12,"L")_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),10,"L")
"RTN","IBCNERPD",186,0)
 . ; IB*2.0*528 add Trusted flag to report
"RTN","IBCNERPD",187,0)
 . ;S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),12,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")
"RTN","IBCNERPD",188,0)
 . S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),7,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,9),10,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")
"RTN","IBCNERPD",189,0)
 . S LCT=4,DISPDATA(4)=" "
"RTN","IBCNERPD",190,0)
 S LCT=LCT+1
"RTN","IBCNERPD",191,0)
 Q
"RTN","IBCNERPD",192,0)
 ;
"RTN","IBCNERPD",193,0)
DET ; - Print insurance company detail in Excel Payer report
"RTN","IBCNERPD",194,0)
 S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",195,0)
 . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",196,0)
 . S LCT=LCT+1,DISPDATA(LCT)=WW_U_XX_U_$P(ZZ,U,1)_U_$P(ZZ,U,4)
"RTN","IBCNERPD",197,0)
 . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",198,0)
 . S IBHPD=$$HPD^IBCNHUT1(YY,1)
"RTN","IBCNERPD",199,0)
 . S DISPDATA(LCT)=DISPDATA(LCT)_U_$P(ZZ,U,7)_U_$P(ZZ,U,8)_U_IBHPD
"RTN","IBCNERPD",200,0)
 Q
"RTN","IBCNERPD",201,0)
 ;
"RTN","IBCNERPD",202,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNERPD",203,0)
 N X
"RTN","IBCNERPD",204,0)
 I REP=1 D
"RTN","IBCNERPD",205,0)
 .S X="Payer Name^National Payer ID^# Linked Ins. Co.^Nationally Active?^Locally Active?^FSC Trusted?^Professional EDI#^Institutional EDI#"
"RTN","IBCNERPD",206,0)
 .I DET=1 S X=X_"^Linked Insurance Company Name^Street Address^City, ST^Professional EDI#^Institutional EDI#^HPID/OEID"
"RTN","IBCNERPD",207,0)
 I REP=2 D
"RTN","IBCNERPD",208,0)
 .S X="Insurance Company Name^Street Address^City, ST Zip^# Active Groups^Professional EDI#^Institutional EDI#^HPID/OEID^"
"RTN","IBCNERPD",209,0)
 .S X=X_"Linked Payer^VA ID^Nationally Active?^Locally Active?^FSC Trusted?^Professional EDI#^Institutional EDI#"
"RTN","IBCNERPD",210,0)
 W !,X
"RTN","IBCNERPD",211,0)
 Q
"RTN","IBCNERPF")
0^14^B38432371^B35587922
"RTN","IBCNERPF",1,0)
IBCNERPF ;BP/YMG - IBCNE USER INTERFACE EIV INSURANCE UPDATE REPORT ;16-SEP-2009
"RTN","IBCNERPF",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549,595**;16-SEP-09;Build 29
"RTN","IBCNERPF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPF",4,0)
 ;
"RTN","IBCNERPF",5,0)
 ; IB*2.0*549 Change value of IBCNESPC("PYR",ien)
"RTN","IBCNERPF",6,0)
 ;            Add IBCNESPC("PYR",ien,coien)
"RTN","IBCNERPF",7,0)
 ;                IBCNESPC("INSCO"))
"RTN","IBCNERPF",8,0)
 ; IB*2.0*549 Sort by payer name
"RTN","IBCNERPF",9,0)
 ; Variables:
"RTN","IBCNERPF",10,0)
 ;   IBCNERTN = "IBCNERPF" (current routine name for queueing the 
"RTN","IBCNERPF",11,0)
 ;                          COMPILE process)
"RTN","IBCNERPF",12,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPF",13,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPF",14,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPF",15,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPF",16,0)
 ;                       = (1) ^ (2)
"RTN","IBCNERPF",17,0)
 ;     (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPF",18,0)
 ;     (2) Display all or some insurance companies - A = All companies/
"RTN","IBCNERPF",19,0)
 ;                                                   S = Specified companies
"RTN","IBCNERPF",20,0)
 ;   IBCNESPC("PYR",ien,coien) - payer iens and company ien for report
"RTN","IBCNERPF",21,0)
 ;                             = Count for insurance company
"RTN","IBCNERPF",22,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPF",23,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPF",24,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPF",25,0)
 ;
"RTN","IBCNERPF",26,0)
 Q
"RTN","IBCNERPF",27,0)
EN ; entry point
"RTN","IBCNERPF",28,0)
 N IBCNERTN,IBCNESPC,IBOUT,STOP
"RTN","IBCNERPF",29,0)
 ;
"RTN","IBCNERPF",30,0)
 S STOP=0,IBCNERTN="IBCNERPF"
"RTN","IBCNERPF",31,0)
 W @IOF
"RTN","IBCNERPF",32,0)
 ; IB*2.0*549 - Change report name to eIV Auto Update Report
"RTN","IBCNERPF",33,0)
 W !,"eIV Auto Update Report"
"RTN","IBCNERPF",34,0)
 ; Prompts for eIV Update Report
"RTN","IBCNERPF",35,0)
 ; Report Type - Summary or Detailed
"RTN","IBCNERPF",36,0)
P10 D TYPE I STOP G EXIT
"RTN","IBCNERPF",37,0)
 ; Payer Selection parameter
"RTN","IBCNERPF",38,0)
P20 D PAYER I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERPF",39,0)
 ; Date Range parameters
"RTN","IBCNERPF",40,0)
P30 D DTRANGE I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERPF",41,0)
 ; Patient Selection parameter
"RTN","IBCNERPF",42,0)
P40 D PATIENT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERPF",43,0)
 ; IB*2.0*549 Set flag for all/selected insurance companies
"RTN","IBCNERPF",44,0)
P50 D INSCO
"RTN","IBCNERPF",45,0)
 ; IB*2.0*549 Sort is by payer name, so call to choose sort order not needed
"RTN","IBCNERPF",46,0)
 ; Select the output type
"RTN","IBCNERPF",47,0)
P60 S IBOUT=$$OUT^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P50
"RTN","IBCNERPF",48,0)
 ; Select the output device
"RTN","IBCNERPF",49,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC,IBOUT) I STOP G:$$STOP^IBCNERP1 EXIT G P50
"RTN","IBCNERPF",50,0)
 ;
"RTN","IBCNERPF",51,0)
EXIT ;
"RTN","IBCNERPF",52,0)
 Q
"RTN","IBCNERPF",53,0)
 ;
"RTN","IBCNERPF",54,0)
PAYER ;
"RTN","IBCNERPF",55,0)
 ; IB*2.0*549 Add PIEN for payer IEN
"RTN","IBCNERPF",56,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,PIEN,X,Y
"RTN","IBCNERPF",57,0)
 W !
"RTN","IBCNERPF",58,0)
 S DIR("A")="Run for (A)ll Payers or (S)elected Payers: "
"RTN","IBCNERPF",59,0)
 S DIR("A",1)="PAYER SELECTION:"
"RTN","IBCNERPF",60,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",61,0)
 D ^DIR
"RTN","IBCNERPF",62,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",63,0)
 I Y="A" S IBCNESPC("PYR")="A" Q  ; "All Payers" selected
"RTN","IBCNERPF",64,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",65,0)
 ; IB*2.0*549 Change prompt from "Select Insurance Company" to "Select Payer"
"RTN","IBCNERPF",66,0)
 W !
"RTN","IBCNERPF",67,0)
 S DIC("A")="Select Payer: "
"RTN","IBCNERPF",68,0)
 ; Do not allow selection of '~NO PAYER' and non-eIV payers
"RTN","IBCNERPF",69,0)
 ; IB*2.0*549 Only include payers with eIV Auto Update flag = Yes
"RTN","IBCNERPF",70,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER"") I $$AUTOUPDT^IBCNERPF($P($G(Y),U,1))"
"RTN","IBCNERPF",71,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPF",72,0)
 ;
"RTN","IBCNERPF",73,0)
PAYER1 ;
"RTN","IBCNERPF",74,0)
 D ^DIC
"RTN","IBCNERPF",75,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PYR") Q
"RTN","IBCNERPF",76,0)
 ; IB*2.0*549 Get PIEN value
"RTN","IBCNERPF",77,0)
 S PIEN=$P(Y,U,1) K IBCNESPC("PYR",PIEN) S IBCNESPC("PYR",PIEN)=""
"RTN","IBCNERPF",78,0)
 ; IB*2.0*549 Get corresponding insurance companies
"RTN","IBCNERPF",79,0)
 D GETCOMPS(PIEN,.IBCNESPC)
"RTN","IBCNERPF",80,0)
 ; IB*2.0*549 Change Select Another to Select Another Payer 
"RTN","IBCNERPF",81,0)
 W !
"RTN","IBCNERPF",82,0)
 I $$ANOTHER("Payer") W ! G PAYER1
"RTN","IBCNERPF",83,0)
 Q
"RTN","IBCNERPF",84,0)
 ;
"RTN","IBCNERPF",85,0)
INSCO ; IB*2.0*549 Setup insurance company flag
"RTN","IBCNERPF",86,0)
 N PIEN,STOP
"RTN","IBCNERPF",87,0)
 S STOP=0
"RTN","IBCNERPF",88,0)
 I '$D(IBCNESPC("PYR")) D
"RTN","IBCNERPF",89,0)
 . K IBCNESPC("INSCO")
"RTN","IBCNERPF",90,0)
 E  D
"RTN","IBCNERPF",91,0)
 . I $G(IBCNESPC("PYR"))="A" D
"RTN","IBCNERPF",92,0)
 . . S IBCNESPC("INSCO")="A"
"RTN","IBCNERPF",93,0)
 . E  D
"RTN","IBCNERPF",94,0)
 . . S PIEN=""
"RTN","IBCNERPF",95,0)
 . . F  S PIEN=$O(IBCNESPC("PYR",PIEN)) Q:PIEN=""  D  Q:STOP
"RTN","IBCNERPF",96,0)
 . . . I $D(IBCNESPC("PYR",PIEN))\10 S IBCNESPC("INSCO")="S",STOP=1 Q
"RTN","IBCNERPF",97,0)
 . . S:'STOP IBCNESPC("INSCO")="A"
"RTN","IBCNERPF",98,0)
 Q
"RTN","IBCNERPF",99,0)
 ;
"RTN","IBCNERPF",100,0)
AUTOUPDT(PIEN) ; Determine if the Auto update flag for payer = Yes
"RTN","IBCNERPF",101,0)
 ; Input:   PIEN        - IEN of the Payer (file 365.12)
"RTN","IBCNERPF",102,0)
 ; Returns  1 - Auto update flag is set to 'Y', 0 otherwise
"RTN","IBCNERPF",103,0)
 ; IB*2.0*549 Only include payers with eIV Auto Update flag = Yes
"RTN","IBCNERPF",104,0)
 N AUTOUPDT,IENS,MULT
"RTN","IBCNERPF",105,0)
 S MULT=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERPF",106,0)
 I MULT D
"RTN","IBCNERPF",107,0)
 . S IENS=MULT_","_PIEN_","
"RTN","IBCNERPF",108,0)
 . S AUTOUPDT=$$GET1^DIQ(365.121,IENS,".07","I")
"RTN","IBCNERPF",109,0)
 E  S AUTOUPDT=0
"RTN","IBCNERPF",110,0)
 Q AUTOUPDT
"RTN","IBCNERPF",111,0)
 ;
"RTN","IBCNERPF",112,0)
GETCOMPS(PIEN,IBCNESPC) ; Get companies linked to payer
"RTN","IBCNERPF",113,0)
 ; IB*2.0*549 Get associated insurance companies 
"RTN","IBCNERPF",114,0)
 ; IB*2.0*549 If user wants to display insurance companies, prompt only 
"RTN","IBCNERPF",115,0)
 ;            for those linked to payer
"RTN","IBCNERPF",116,0)
 ; IB*2.0*549 Allow the user to select none, one, or multiple insurance 
"RTN","IBCNERPF",117,0)
 ;            companies associated with a given payer
"RTN","IBCNERPF",118,0)
 ;
"RTN","IBCNERPF",119,0)
 ; IB*2.0*549 Add to IBCNESPC documentation
"RTN","IBCNERPF",120,0)
 ; Input
"RTN","IBCNERPF",121,0)
 ;  PIEN     - Payer ID
"RTN","IBCNERPF",122,0)
 ;  IBCNESPC - Array holding payer id and related insurance companies
"RTN","IBCNERPF",123,0)
 ; Output
"RTN","IBCNERPF",124,0)
 ;  IBCNESPC - Array holding payer id and related insurance companies
"RTN","IBCNERPF",125,0)
 ;  IBCNESPC("PYR",PIEN) = (1) ^ (2)
"RTN","IBCNERPF",126,0)
 ;    (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPF",127,0)
 ;    (2) Display all or some insurance companies - A = All companies/ S = Specified companies
"RTN","IBCNERPF",128,0)
 ;
"RTN","IBCNERPF",129,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,IBCNS,X,Y
"RTN","IBCNERPF",130,0)
 ; IB*2.0*549 Query to display associated insurance companies
"RTN","IBCNERPF",131,0)
 W !
"RTN","IBCNERPF",132,0)
 S DIR("A")="Do you want to display insurance company detail"
"RTN","IBCNERPF",133,0)
 S DIR("B")="NO"
"RTN","IBCNERPF",134,0)
 S DIR(0)="Y" D ^DIR
"RTN","IBCNERPF",135,0)
 Q:$D(DIRUT)
"RTN","IBCNERPF",136,0)
 ; IB*2.0*549 Display or do not display company detail
"RTN","IBCNERPF",137,0)
 S IBCNESPC("PYR",PIEN)=Y
"RTN","IBCNERPF",138,0)
 Q:'Y  ; IB*2.0*549 Do not display company detail
"RTN","IBCNERPF",139,0)
 ;
"RTN","IBCNERPF",140,0)
 W !
"RTN","IBCNERPF",141,0)
 K DIR
"RTN","IBCNERPF",142,0)
 S DIR("A")="Run for (A)ll Insurance Companies or Selected Insurance Companies: "
"RTN","IBCNERPF",143,0)
 S DIR("B")="A"
"RTN","IBCNERPF",144,0)
 S DIR(0)="SA^A:All;S:Selected" D ^DIR
"RTN","IBCNERPF",145,0)
 Q:$D(DIRUT)
"RTN","IBCNERPF",146,0)
 ; IB*2.0*549 Display all or specified companies
"RTN","IBCNERPF",147,0)
 S $P(IBCNESPC("PYR",PIEN),U,2)=Y
"RTN","IBCNERPF",148,0)
 Q:Y="A"  ; IB*2.0*549 Run for all companies
"RTN","IBCNERPF",149,0)
 ; IB*2.0*549 - Replaced dictionary look-up of Insurance Companies with
"RTN","IBCNERPF",150,0)
 ;                           call to Insurance Company look-up listman template
"RTN","IBCNERPF",151,0)
 K ^TMP("IBCNILKA",$J)
"RTN","IBCNERPF",152,0)
 D EN^IBCNILK(2,PIEN,4)
"RTN","IBCNERPF",153,0)
 I $D(^TMP("IBCNILKA",$J)) D
"RTN","IBCNERPF",154,0)
 .S IBCNS=""
"RTN","IBCNERPF",155,0)
 .F  S IBCNS=$O(^TMP("IBCNILKA",$J,IBCNS)) Q:IBCNS=""  D
"RTN","IBCNERPF",156,0)
 ..S IBCNESPC("PYR",PIEN,IBCNS)=""
"RTN","IBCNERPF",157,0)
 .K ^TMP("IBCNILKA",$J)
"RTN","IBCNERPF",158,0)
 Q
"RTN","IBCNERPF",159,0)
 ;
"RTN","IBCNERPF",160,0)
DTRANGE ;
"RTN","IBCNERPF",161,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y,IBDT180
"RTN","IBCNERPF",162,0)
 ; IB*2*595/DM default start date to T-180 
"RTN","IBCNERPF",163,0)
T180 ; 
"RTN","IBCNERPF",164,0)
 W !
"RTN","IBCNERPF",165,0)
 S IBDT180=$$FMADD^XLFDT($$DT^XLFDT(),-180)
"RTN","IBCNERPF",166,0)
 S DIR(0)="D^::EX",DIR("B")=$$FMTE^XLFDT(IBDT180,"D")
"RTN","IBCNERPF",167,0)
 S DIR("A")="Earliest Date Received"
"RTN","IBCNERPF",168,0)
 S DIR("A",1)="RESPONSE RECEIVED DATE RANGE SELECTION:"
"RTN","IBCNERPF",169,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",170,0)
 I Y<IBDT180 W !!,"Response must not be previous to "_$$FMTE^XLFDT(IBDT180,"D")_"." G T180
"RTN","IBCNERPF",171,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERPF",172,0)
 ; End date
"RTN","IBCNERPF",173,0)
DTRANGE1 ;
"RTN","IBCNERPF",174,0)
 S DIR("B")="Today"
"RTN","IBCNERPF",175,0)
 K DIR("A") S DIR("A")="  Latest Date Received"
"RTN","IBCNERPF",176,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",177,0)
 I Y<IBCNESPC("BEGDT") W !,"     Latest Date must not precede the Earliest Date." G DTRANGE1
"RTN","IBCNERPF",178,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERPF",179,0)
 Q
"RTN","IBCNERPF",180,0)
 ;
"RTN","IBCNERPF",181,0)
PATIENT ;
"RTN","IBCNERPF",182,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",183,0)
 ; summary report is always run for all patients
"RTN","IBCNERPF",184,0)
 I $G(IBCNESPC("TYPE"))="S" S IBCNESPC("PAT")="A" Q
"RTN","IBCNERPF",185,0)
 W !
"RTN","IBCNERPF",186,0)
 S DIR("A")="Run for (A)ll Patients or (S)elected Patients: "
"RTN","IBCNERPF",187,0)
 S DIR("A",1)="PATIENT SELECTION:"
"RTN","IBCNERPF",188,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",189,0)
 D ^DIR
"RTN","IBCNERPF",190,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",191,0)
 I Y="A" S IBCNESPC("PAT")="A" Q  ; "All Patients" selected
"RTN","IBCNERPF",192,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",193,0)
 S DIC("A")="Select Patient: "
"RTN","IBCNERPF",194,0)
 S DIC="^DPT("
"RTN","IBCNERPF",195,0)
PATIENT1 ;
"RTN","IBCNERPF",196,0)
 D ^DIC
"RTN","IBCNERPF",197,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PAT") Q
"RTN","IBCNERPF",198,0)
 S IBCNESPC("PAT",$P(Y,U,1))=""
"RTN","IBCNERPF",199,0)
 ; IB*2.0*549 Change Select Another to Select Another Patient
"RTN","IBCNERPF",200,0)
 I $$ANOTHER("Patient") G PATIENT1
"RTN","IBCNERPF",201,0)
 Q
"RTN","IBCNERPF",202,0)
 ;
"RTN","IBCNERPF",203,0)
ANOTHER(TYPE) ; "Select Another" prompt
"RTN","IBCNERPF",204,0)
 ;IB*2.0*549 Change Select Another to Select Another Patient
"RTN","IBCNERPF",205,0)
 ;
"RTN","IBCNERPF",206,0)
 ; returns 1, if response was "YES", returns 0 otherwise
"RTN","IBCNERPF",207,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",208,0)
 ; IB*2.0*549 Change Select Another to Select Another [Type]
"RTN","IBCNERPF",209,0)
 S DIR("A")="Select Another "_TYPE_"?" S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCNERPF",210,0)
 D ^DIR I $D(DIRUT) S STOP=1
"RTN","IBCNERPF",211,0)
 Q Y
"RTN","IBCNERPF",212,0)
 ;
"RTN","IBCNERPF",213,0)
TYPE ;
"RTN","IBCNERPF",214,0)
 ;IB*2.0*549 Sort by payer name (Delete SORT tag)
"RTN","IBCNERPF",215,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",216,0)
 W !
"RTN","IBCNERPF",217,0)
 S DIR(0)="SA^S:Summary;D:Detailed"
"RTN","IBCNERPF",218,0)
 S DIR("A")="Run a (S)ummary or (D)etailed Report: "
"RTN","IBCNERPF",219,0)
 S DIR("B")="Summary"
"RTN","IBCNERPF",220,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",221,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERPF",222,0)
 Q
"RTN","IBCNERPG")
0^15^B57439598^B51210670
"RTN","IBCNERPG",1,0)
IBCNERPG ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT COMPILE;16-SEP-2009
"RTN","IBCNERPG",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549,595**;16-SEP-09;Build 29
"RTN","IBCNERPG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPG",4,0)
 ;
"RTN","IBCNERPG",5,0)
 ; IB*2.0*549 Changes to documentation for IBCNESPC("PYR")
"RTN","IBCNERPG",6,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPG",7,0)
 ; IB*2.0*549 Add IBCNESPC("INSCO")
"RTN","IBCNERPG",8,0)
 ;
"RTN","IBCNERPG",9,0)
 ; variables from IBCNERPF:
"RTN","IBCNERPG",10,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPG",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPG",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPG",13,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPG",14,0)
 ;   IBCNESPC("PYR") - If this ="A", then include all
"RTN","IBCNERPG",15,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report
"RTN","IBCNERPG",16,0)
 ;                       = 0 = No company detail
"RTN","IBCNERPG",17,0)
 ;                       = 1^A = Company detail, all corresponding companies
"RTN","IBCNERPG",18,0)
 ;                       = 1^S = Company detail, selected corresponding companies
"RTN","IBCNERPG",19,0)
 ;   
"RTN","IBCNERPG",20,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPG",21,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPG",22,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPG",23,0)
 ;
"RTN","IBCNERPG",24,0)
 ; Output variables passed to IBCNERPH:
"RTN","IBCNERPG",25,0)
 ;   Summary report:
"RTN","IBCNERPG",26,0)
 ;     ^TMP($J,IBCNERTN)=Total Count
"RTN","IBCNERPG",27,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Payer Count
"RTN","IBCNERPG",28,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Company Count
"RTN","IBCNERPG",29,0)
 ;     SORT1 - Payer Name, SORT2 - Company Name
"RTN","IBCNERPG",30,0)
 ;
"RTN","IBCNERPG",31,0)
 ;   Detailed report:
"RTN","IBCNERPG",32,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPG",33,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count 
"RTN","IBCNERPG",34,0)
 ;     IB*2.0*595/DM remove Days old
"RTN","IBCNERPG",35,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=Payer Name ^ Insurance Company Name ^ Pat. Name ^ SSN ^
"RTN","IBCNERPG",36,0)
 ;;                                         Date Inquiry Sent ^ Date Policy Auto Updated ^ Days old ^ 
"RTN","IBCNERPG",37,0)
 ;;                                         Trace Number
"RTN","IBCNERPG",38,0)
 ;                                          Date Inquiry Sent ^ Date Policy Auto Updated@time ^ Trace Number 
"RTN","IBCNERPG",39,0)
 ;                                          
"RTN","IBCNERPG",40,0)
 ;     SORT1 - Payer Name, SORT2 - Date received, SORT3 - Count
"RTN","IBCNERPG",41,0)
 ;
"RTN","IBCNERPG",42,0)
 Q
"RTN","IBCNERPG",43,0)
 ;
"RTN","IBCNERPG",44,0)
EN(IBCNERTN,IBCNESPCI,IBOUT) ; Entry point
"RTN","IBCNERPG",45,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",46,0)
 ; IB*2.0*549 Report on selected payers and insurance companies
"RTN","IBCNERPG",47,0)
 ;
"RTN","IBCNERPG",48,0)
 ; IB*2.0*595/DM utilize the "AUTO" cross reference to populate the report, rather than "AD"
"RTN","IBCNERPG",49,0)
 ; "AD" was  DATE/TIME RECEIVED,PAYER,PATIENT,RESPONSE
"RTN","IBCNERPG",50,0)
 ; "AUTO" is DATE/TIME RECEIVED,PAYER,PATIENT,INSUR RECORD IEN,EIV AUTO-UPDATE,RESPONSE
"RTN","IBCNERPG",51,0)
 ; "AUTO" entries are also guaranteed to be AUTO-UPDATE entries, so EIV AUTO-UPDATE is always 1 
"RTN","IBCNERPG",52,0)
 ;
"RTN","IBCNERPG",53,0)
 N ALLPYR,ALLPAT,DATE,BDATE,EDATE,RPDATA,RTYPE,SORT
"RTN","IBCNERPG",54,0)
 S ALLPYR=$S($G(IBCNESPC("PYR"))="A":1,1:0)
"RTN","IBCNERPG",55,0)
 S ALLPAT=$S($G(IBCNESPC("PAT"))="A":1,1:0)
"RTN","IBCNERPG",56,0)
 S BDATE=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPG",57,0)
 S EDATE=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPG",58,0)
 I EDATE'="",$P(EDATE,".",2)="" S EDATE=$$FMADD^XLFDT(EDATE,0,23,59,59)
"RTN","IBCNERPG",59,0)
 S RTYPE=$G(IBCNESPC("TYPE"))
"RTN","IBCNERPG",60,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPG",61,0)
 I '$D(ZTQUEUED),$G(IOST)["C-",IBOUT="R" W !!,"Compiling report data ..."
"RTN","IBCNERPG",62,0)
 ; Kill scratch global
"RTN","IBCNERPG",63,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPG",64,0)
 S DATE=$O(^IBCN(365,"AUTO",BDATE),-1)
"RTN","IBCNERPG",65,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",66,0)
 F  S DATE=$O(^IBCN(365,"AUTO",DATE)) Q:'DATE!(DATE>EDATE)  D PAYERS(DATE,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",67,0)
 ; IB*2.0*549 Report all selected payers and insurance companies
"RTN","IBCNERPG",68,0)
 I RTYPE="S" D RPTSEL(.IBCNESPC,.RPDATA)
"RTN","IBCNERPG",69,0)
 M ^TMP($J,IBCNERTN)=RPDATA
"RTN","IBCNERPG",70,0)
 Q
"RTN","IBCNERPG",71,0)
 ;
"RTN","IBCNERPG",72,0)
PAYERS(DATE,ALLPYR,ALLPAT,RTYPE) ; loop through payers
"RTN","IBCNERPG",73,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",74,0)
 N PYR
"RTN","IBCNERPG",75,0)
 S PYR=""
"RTN","IBCNERPG",76,0)
 I 'ALLPYR D
"RTN","IBCNERPG",77,0)
 .I RTYPE="D" D
"RTN","IBCNERPG",78,0)
 ..F  S PYR=$O(IBCNESPC("PYR",PYR)) Q:'PYR  D:$O(^IBCN(365,"AUTO",DATE,PYR,"")) PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",79,0)
 .E  D
"RTN","IBCNERPG",80,0)
 ..F  S PYR=$O(^IBCN(365,"AUTO",DATE,PYR)) Q:'PYR  D PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",81,0)
 E  D
"RTN","IBCNERPG",82,0)
 .F  S PYR=$O(^IBCN(365,"AUTO",DATE,PYR)) Q:'PYR  D PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",83,0)
 Q
"RTN","IBCNERPG",84,0)
 ;
"RTN","IBCNERPG",85,0)
PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) ; loop through patients
"RTN","IBCNERPG",86,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",87,0)
 N PAT
"RTN","IBCNERPG",88,0)
 S PAT=""
"RTN","IBCNERPG",89,0)
 I 'ALLPAT F  S PAT=$O(IBCNESPC("PAT",PAT)) Q:'PAT  D:$O(^IBCN(365,"AUTO",DATE,PYR,PAT,"")) GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",90,0)
 I ALLPAT F  S PAT=$O(^IBCN(365,"AUTO",DATE,PYR,PAT)) Q:'PAT  D GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",91,0)
 Q
"RTN","IBCNERPG",92,0)
 ;
"RTN","IBCNERPG",93,0)
GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) ; loop through responses and compile report
"RTN","IBCNERPG",94,0)
 ; IB*2.0*549 Remove fields to be printed and variables
"RTN","IBCNERPG",95,0)
 ; IB*2.0*549 Add fields and INSCONM,DTINQSNT,DTPOLUPD,TRACENUM and others
"RTN","IBCNERPG",96,0)
 N AUTOUPD,CLNAME,DTINQSNT,DTPOLUPD,FLG,IENS2,IENS312,IIEN,INS,INSCOMNM,NOW
"RTN","IBCNERPG",97,0)
 N PATNAME,PYRNAME,RIEN,SORT1,SORT2,SORT3,SSN,TOTMES,TQ,TRACENUM,TYPE,VDATE
"RTN","IBCNERPG",98,0)
 ;
"RTN","IBCNERPG",99,0)
 ; IB*2.0*595/DM NOW is no longer needed 
"RTN","IBCNERPG",100,0)
 ;S NOW=$$NOW^XLFDT
"RTN","IBCNERPG",101,0)
 S (TOTMES,INS)=0
"RTN","IBCNERPG",102,0)
 F  S INS=$O(^IBCN(365,"AUTO",DATE,PYR,PAT,INS)) Q:'INS  D  Q:$G(ZTSTOP)
"RTN","IBCNERPG",103,0)
 .S RIEN="" F  S RIEN=$O(^IBCN(365,"AUTO",DATE,PYR,PAT,INS,1,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERPG",104,0)
 ..S TOTMES=TOTMES+1 I $D(ZTQUEUED),TOTMES#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPG",105,0)
 ..; IB*2.0*549 If summary version of report & selected ins co were chosen, do not consider others
"RTN","IBCNERPG",106,0)
 ..; IB*2.0*549 If summary version of report & selected ins co were chosen, count for payer only includes
"RTN","IBCNERPG",107,0)
 ..;                         counts for selected ins co
"RTN","IBCNERPG",108,0)
 ..S IENS2=PAT_",",IENS312=INS_","_IENS2
"RTN","IBCNERPG",109,0)
 ..S PYRNAME=$$GET1^DIQ(365.12,PYR_",",.01),PATNAME=$$GET1^DIQ(2,IENS2,.01)
"RTN","IBCNERPG",110,0)
 ..; IB*2.0*549 Add insurance company name
"RTN","IBCNERPG",111,0)
 ..S IIEN=$$GET1^DIQ(2.312,IENS312,.01,"I")
"RTN","IBCNERPG",112,0)
 ..S INSCOMNM=$$GET1^DIQ(36,IIEN,".01")
"RTN","IBCNERPG",113,0)
 ..; IB*2.0*549 Remove unnecessary variables
"RTN","IBCNERPG",114,0)
 ..; IB*2.0*549 Sort by Payer's name
"RTN","IBCNERPG",115,0)
 ..; IB*2.0*549 For summary version of report, include count for insurance company
"RTN","IBCNERPG",116,0)
 ..; IB*2.0*549 Do not display insurance company detail if user selected to not display such
"RTN","IBCNERPG",117,0)
 ..S SORT1=PYRNAME
"RTN","IBCNERPG",118,0)
 ..S TYPE=$G(IBCNESPC("PYR",PYR))
"RTN","IBCNERPG",119,0)
 ..I RTYPE="S" D  Q
"RTN","IBCNERPG",120,0)
 ...S RPDATA=$G(RPDATA)+1
"RTN","IBCNERPG",121,0)
 ...; IB*2.0*549 If all payers was not chosen; and
"RTN","IBCNERPG",122,0)
 ...;            If selected payers was chosen and this payer was not selected then quit here
"RTN","IBCNERPG",123,0)
 ...I '(ALLPYR!('ALLPYR&$D(IBCNESPC("PYR",PYR)))) Q
"RTN","IBCNERPG",124,0)
 ...S RPDATA(SORT1)=$G(RPDATA(SORT1))+1
"RTN","IBCNERPG",125,0)
 ...; IB*2.0*549 Do not display company data if:
"RTN","IBCNERPG",126,0)
 ...;              1) If the user chose to not display company data
"RTN","IBCNERPG",127,0)
 ...;              2) The use chose to display company data, and chose to 
"RTN","IBCNERPG",128,0)
 ...;                 select companies, but did not choose this company
"RTN","IBCNERPG",129,0)
 ...S FLG=$S($P(TYPE,"^",1)=0:0,(TYPE="1^S")&'$D(IBCNESPC("PYR",PYR,IIEN)):0,1:1)
"RTN","IBCNERPG",130,0)
 ...I FLG D
"RTN","IBCNERPG",131,0)
 ....S SORT2=INSCOMNM
"RTN","IBCNERPG",132,0)
 ....S RPDATA(SORT1,SORT2)=$G(RPDATA(SORT1,SORT2))+1
"RTN","IBCNERPG",133,0)
 ..S SSN=$$GET1^DIQ(2,IENS2,.09,"E")
"RTN","IBCNERPG",134,0)
 ..; IB*2.0*549 Get date eIV inquiry sent, date policy auto-updated and eIV Trace number
"RTN","IBCNERPG",135,0)
 ..S DTINQSNT=$$FMTE^XLFDT($$GET1^DIQ(365,RIEN_",",".08","I"),"2DZ")
"RTN","IBCNERPG",136,0)
 ..; IB*2.0*595/DM use the auto-update date and time 
"RTN","IBCNERPG",137,0)
 ..;S DTPOLUPD=$$FMTE^XLFDT($$GET1^DIQ(2.312,IENS312,1.05,"I"),"2DZ")
"RTN","IBCNERPG",138,0)
 ..S DTPOLUPD=$$FMTE^XLFDT(DATE,"2SZ")
"RTN","IBCNERPG",139,0)
 ..I $L(DTPOLUPD)=8 S DTPOLUPD=DTPOLUPD_"@00:00:00" ; handles 0 seconds 
"RTN","IBCNERPG",140,0)
 ..S TRACENUM=$$GET1^DIQ(365,RIEN_",",".09","I")
"RTN","IBCNERPG",141,0)
 ..; IB*2.0*549 Remove 'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPG",142,0)
 ..; IB*2.0*549 Add Insurance Company, date eIV inquiry sent,
"RTN","IBCNERPG",143,0)
 ..;            date policy auto updated and eIV Trace number
"RTN","IBCNERPG",144,0)
 ..S SORT2=DATE
"RTN","IBCNERPG",145,0)
 ..S RPDATA=$G(RPDATA)+1
"RTN","IBCNERPG",146,0)
 ..S RPDATA(SORT1)=$G(RPDATA(SORT1))+1
"RTN","IBCNERPG",147,0)
 ..; IB*2.0*549 On the detailed report do not display date eIV response
"RTN","IBCNERPG",148,0)
 ..;            received, 'Ck AB', 'Clerk/Auto' and Verified
"RTN","IBCNERPG",149,0)
 ..; IB*2.0*549 Add insurance company name, date eIV inquiry sent,
"RTN","IBCNERPG",150,0)
 ..;            date policy auto-updated, and eIV Trace number
"RTN","IBCNERPG",151,0)
 ..I TYPE="1^S",'$D(IBCNESPC("PYR",PYR,IIEN)) Q  ; If user chose selected co option, and company was not selected
"RTN","IBCNERPG",152,0)
 ..;                                               don't print company info
"RTN","IBCNERPG",153,0)
 ..S (RPDATA(SORT1,SORT2),SORT3)=$G(RPDATA(SORT1,SORT2))+1
"RTN","IBCNERPG",154,0)
 ..; IB*2.0*595/DM days between send/receive is no longer used 
"RTN","IBCNERPG",155,0)
 ..;S RPDATA(SORT1,SORT2,SORT3)=PYRNAME_U_INSCOMNM_U_PATNAME_U_SSN_U_DTINQSNT_U_DTPOLUPD
"RTN","IBCNERPG",156,0)
 ..;S RPDATA(SORT1,SORT2,SORT3)=RPDATA(SORT1,SORT2,SORT3)_U_$$FMDIFF^XLFDT(NOW,DATE)_U_TRACENUM
"RTN","IBCNERPG",157,0)
 ..S RPDATA(SORT1,SORT2,SORT3)=PYRNAME_U_INSCOMNM_U_PATNAME_U_SSN_U_DTINQSNT_U_DTPOLUPD_U_TRACENUM
"RTN","IBCNERPG",158,0)
 ..Q
"RTN","IBCNERPG",159,0)
 Q
"RTN","IBCNERPG",160,0)
 ;
"RTN","IBCNERPG",161,0)
RPTSEL(IBCNESPC,RPDATA) ; Report all selected payers/insurance companies
"RTN","IBCNERPG",162,0)
 ; IB*2.0*549 Report all selected payers/insurance companies
"RTN","IBCNERPG",163,0)
 N PYR,PYRNAME,IIEN,INSCOMNM
"RTN","IBCNERPG",164,0)
 S PYR=""
"RTN","IBCNERPG",165,0)
 F  S PYR=$O(IBCNESPC("PYR",PYR)) Q:'PYR  D
"RTN","IBCNERPG",166,0)
 .S PYRNAME=$$GET1^DIQ(365.12,PYR,".01","I")
"RTN","IBCNERPG",167,0)
 .S:'$D(RPDATA(PYRNAME)) RPDATA(PYRNAME)=0
"RTN","IBCNERPG",168,0)
 .S IIEN=""
"RTN","IBCNERPG",169,0)
 .F  S IIEN=$O(IBCNESPC("PYR",PYR,IIEN)) Q:IIEN=""  D
"RTN","IBCNERPG",170,0)
 ..S INSCOMNM=$$GET1^DIQ(36,IIEN,".01","I")
"RTN","IBCNERPG",171,0)
 ..S:'$D(RPDATA(PYRNAME,INSCOMNM)) RPDATA(PYRNAME,INSCOMNM)=0
"RTN","IBCNERPG",172,0)
 Q
"RTN","IBCNERPG",173,0)
 ;
"RTN","IBCNERPH")
0^16^B52475568^B48112420
"RTN","IBCNERPH",1,0)
IBCNERPH ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT PRINT;16-SEP-2009
"RTN","IBCNERPH",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549,595**;16-SEP-09;Build 29
"RTN","IBCNERPH",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPH",4,0)
 ;
"RTN","IBCNERPH",5,0)
 ; IB*2.0*549 Changes to documentation
"RTN","IBCNERPH",6,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPH",7,0)
 ; IB*2.0*549 Allow for new sort level
"RTN","IBCNERPH",8,0)
 ; variables from IBCNERPF and IBCNERPG:
"RTN","IBCNERPH",9,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPH",10,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPH",11,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPH",12,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPH",13,0)
 ;   IBCNESPC("PYR") - If this ="A", then include all
"RTN","IBCNERPH",14,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPH",15,0)
 ;                       = (1) ^ (2)
"RTN","IBCNERPH",16,0)
 ;     (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPH",17,0)
 ;     (2) Display all or some insurance companies - A = All companies/
"RTN","IBCNERPH",18,0)
 ;                                                   S = Specified companies
"RTN","IBCNERPH",19,0)
 ;   IBCNESPC("PYR",ien,coien) - payer iens and company ien for report
"RTN","IBCNERPH",20,0)
 ;                             = Count for insurance company
"RTN","IBCNERPH",21,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPH",22,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPH",23,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPH",24,0)
 ;
"RTN","IBCNERPH",25,0)
 ;   Summary report:
"RTN","IBCNERPH",26,0)
 ;     ^TMP($J,IBCNERTN)=Total Count
"RTN","IBCNERPH",27,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Payer Count
"RTN","IBCNERPH",28,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Company Count
"RTN","IBCNERPH",29,0)
 ;     SORT1 - Payer Name, SORT2 - Company Name
"RTN","IBCNERPH",30,0)
 ;
"RTN","IBCNERPH",31,0)
 ;   Detailed report:
"RTN","IBCNERPH",32,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPH",33,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count 
"RTN","IBCNERPH",34,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=Payer Name ^ Insurance Company Name ^ Pat. Name ^ SSN ^
"RTN","IBCNERPH",35,0)
 ;                                         IB*2.0*595/DM remove Days old
"RTN","IBCNERPH",36,0)
 ;;                                        Date Inquiry Sent ^ Date Policy Auto Updated ^ Days old ^ 
"RTN","IBCNERPH",37,0)
 ;;                                        Trace Number
"RTN","IBCNERPH",38,0)
 ;                                         Date Inquiry Sent ^ Date Policy Auto Updated@time ^ Trace Number 
"RTN","IBCNERPH",39,0)
 ;     SORT1 - Payer Name, SORT2 - Date received, SORT3 - Count
"RTN","IBCNERPH",40,0)
 ;
"RTN","IBCNERPH",41,0)
 Q
"RTN","IBCNERPH",42,0)
 ;
"RTN","IBCNERPH",43,0)
EN(IBCNERTN,IBCNESPC,IBOUT) ; Entry point
"RTN","IBCNERPH",44,0)
 ; IB*2.0*549 Delete printed fields and their variables
"RTN","IBCNERPH",45,0)
 ; IB*2.0*549 Allow for new sort level
"RTN","IBCNERPH",46,0)
 N CRT,DDATA,DLINE,EORMSG,IBPGC,IBPXT,MAXCNT,NONEMSG,NPROC,SSN,SSNLEN,SRT1,SRT2,SRT3,TSTAMP,TYPE,WIDTH,X,Y
"RTN","IBCNERPH",47,0)
 S (IBPGC,IBPXT)=0
"RTN","IBCNERPH",48,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPH",49,0)
 ; IB*2.0*549 Modify EOR msg
"RTN","IBCNERPH",50,0)
 S EORMSG="*****END OF REPORT*****"
"RTN","IBCNERPH",51,0)
 S NPROC="Not Processed"
"RTN","IBCNERPH",52,0)
 S TSTAMP=$$FMTE^XLFDT($$NOW^XLFDT,1) ; time of report
"RTN","IBCNERPH",53,0)
 S TYPE=$G(IBCNESPC("TYPE")) ; report type
"RTN","IBCNERPH",54,0)
 S WIDTH=$S(TYPE="S":79,1:131)
"RTN","IBCNERPH",55,0)
 ; Determine IO parameters
"RTN","IBCNERPH",56,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNERPH",57,0)
 S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPH",58,0)
 S:IOST["C-" MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPH",59,0)
 ; print data
"RTN","IBCNERPH",60,0)
 S SRT1=""
"RTN","IBCNERPH",61,0)
 D HEADER:IBOUT="R",PHDL:IBOUT="E" I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",62,0)
 ; IB*2.0*549 Reformat header
"RTN","IBCNERPH",63,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERPH",64,0)
 I '$D(^TMP($J,IBCNERTN)) D LINE($$FO^IBCNEUT1(NONEMSG,$L(NONEMSG),"L"),IBOUT) G EXIT
"RTN","IBCNERPH",65,0)
 I TYPE="S" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",66,0)
 .; summary report
"RTN","IBCNERPH",67,0)
 .; IB*2.0*549 Add Total Auto Updated line
"RTN","IBCNERPH",68,0)
 .D LINE("TOTAL AUTO UPDATED = "_+$G(^TMP($J,IBCNERTN)),IBOUT)
"RTN","IBCNERPH",69,0)
 .W !
"RTN","IBCNERPH",70,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",71,0)
 ..; IB*2.0*549 Add payer count
"RTN","IBCNERPH",72,0)
 ..I SRT1'="*",IBOUT="R" D LINE(SRT1_" = "_+$G(^TMP($J,IBCNERTN,SRT1)),IBOUT)
"RTN","IBCNERPH",73,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",74,0)
 ...; IB*2.0*549 Change line
"RTN","IBCNERPH",75,0)
 ...I IBOUT="E" D LINE($S(SRT1="*":"ALL",1:SRT1)_U_$S(SRT2=0:NPROC,1:SRT2)_U_^TMP($J,IBCNERTN,SRT1,SRT2),IBOUT) Q
"RTN","IBCNERPH",76,0)
 ...D LINE("       "_SRT2_" = "_+$G(^TMP($J,IBCNERTN,SRT1,SRT2)),IBOUT)
"RTN","IBCNERPH",77,0)
 ...Q
"RTN","IBCNERPH",78,0)
 ..Q
"RTN","IBCNERPH",79,0)
 .; IB*2.0*549 Add space between report and end of report line
"RTN","IBCNERPH",80,0)
 .W !
"RTN","IBCNERPH",81,0)
 .Q
"RTN","IBCNERPH",82,0)
 I TYPE="D" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",83,0)
 .; detailed report
"RTN","IBCNERPH",84,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",85,0)
 ..; IB*2.0*549 Get rid of the count line
"RTN","IBCNERPH",86,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",87,0)
 ...S SRT3="" F  S SRT3=$O(^TMP($J,IBCNERTN,SRT1,SRT2,SRT3)) Q:SRT3=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",88,0)
 ....S DDATA=$G(^TMP($J,IBCNERTN,SRT1,SRT2,SRT3)),DLINE="",SSN=$P(DDATA,U,4)
"RTN","IBCNERPH",89,0)
 ....I IBOUT="E" D XLDATA(SSN) Q
"RTN","IBCNERPH",90,0)
 ....; IB*2.0*549 For detailed version do not display date eIV response received,
"RTN","IBCNERPH",91,0)
 ....;            'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPH",92,0)
 ....; IB*2.0*549 Add fields:  Insurance Company, date eIV inquiry sent, date
"RTN","IBCNERPH",93,0)
 ....;                         policy auto updated, and eIV Trace number
"RTN","IBCNERPH",94,0)
 ....S $E(DLINE,1,24)=$E($P(DDATA,U),1,24) ;     Payer name
"RTN","IBCNERPH",95,0)
 ....S $E(DLINE,28,43)=$E($P(DDATA,U,2),1,16) ;  Insurance company name
"RTN","IBCNERPH",96,0)
 ....S $E(DLINE,46,60)=$E($P(DDATA,U,3),1,15) ;  Patient name
"RTN","IBCNERPH",97,0)
 ....S SSNLEN=$L(SSN),$E(DLINE,63,66)=$E(SSN,SSNLEN-3,SSNLEN)
"RTN","IBCNERPH",98,0)
 ....S $E(DLINE,69,76)=$E($P(DDATA,U,5),1,8) ;   Date sent
"RTN","IBCNERPH",99,0)
 ....; IB*2.0*595/DM expand date-auto-updated to include time and remove days
"RTN","IBCNERPH",100,0)
 ....S $E(DLINE,79,86)=$E($P(DDATA,U,6),1,17) ;   Date auto updated
"RTN","IBCNERPH",101,0)
 ....;S $E(DLINE,89,95)=$J($P(DDATA,U,7),4) ;     Days
"RTN","IBCNERPH",102,0)
 ....S $E(DLINE,98,107)=$E($P(DDATA,U,7),1,10) ; eIV trace number
"RTN","IBCNERPH",103,0)
 ....D LINE(DLINE,IBOUT)
"RTN","IBCNERPH",104,0)
 ....Q
"RTN","IBCNERPH",105,0)
 ...Q
"RTN","IBCNERPH",106,0)
 ..Q
"RTN","IBCNERPH",107,0)
 .; IB*2.0*549 Add space between report and end of report line
"RTN","IBCNERPH",108,0)
 .W !
"RTN","IBCNERPH",109,0)
 .Q
"RTN","IBCNERPH",110,0)
 ;
"RTN","IBCNERPH",111,0)
EXIT ;
"RTN","IBCNERPH",112,0)
 ; IB*2.0*549 Left-justify end of report message
"RTN","IBCNERPH",113,0)
 D LINE($$FO^IBCNEUT1(EORMSG,$L(EORMSG),"L"),IBOUT)
"RTN","IBCNERPH",114,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL
"RTN","IBCNERPH",115,0)
 Q
"RTN","IBCNERPH",116,0)
 ;
"RTN","IBCNERPH",117,0)
XLDATA(SSN) ; Excel detailed output
"RTN","IBCNERPH",118,0)
 W !,$P(DDATA,U,1,3)_U_$E(SSN,$L(SSN)-3,$L(SSN))_U_$P(DDATA,U,5,8)
"RTN","IBCNERPH",119,0)
 Q
"RTN","IBCNERPH",120,0)
 ;
"RTN","IBCNERPH",121,0)
EOL ; display "end of page" message and set exit flag
"RTN","IBCNERPH",122,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,LIN
"RTN","IBCNERPH",123,0)
 I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPH",124,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPH",125,0)
 I $D(DTOUT)!$D(DUOUT) S IBPXT=1
"RTN","IBCNERPH",126,0)
 Q
"RTN","IBCNERPH",127,0)
 ;
"RTN","IBCNERPH",128,0)
HEADER ; print header for each page
"RTN","IBCNERPH",129,0)
 N DASHES,DELTA,HDR,LEN,OFFSET,POS,STRING
"RTN","IBCNERPH",130,0)
 ;
"RTN","IBCNERPH",131,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL I IBPXT Q
"RTN","IBCNERPH",132,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 Q
"RTN","IBCNERPH",133,0)
 S IBPGC=IBPGC+1
"RTN","IBCNERPH",134,0)
 ; IB*2.0*549 Change report name to Auto Update Report
"RTN","IBCNERPH",135,0)
 W @IOF,!
"RTN","IBCNERPH",136,0)
 S HDR=$J("",WIDTH)
"RTN","IBCNERPH",137,0)
 S STRING=" Auto Update Report",$E(HDR,1,$L(STRING))=STRING
"RTN","IBCNERPH",138,0)
 S STRING="  Page: "_IBPGC,$E(HDR,WIDTH-$L(STRING)+1,WIDTH)=STRING
"RTN","IBCNERPH",139,0)
 S LEN=$L(TSTAMP)
"RTN","IBCNERPH",140,0)
 S DELTA=(WIDTH#2),POS=(WIDTH\2+DELTA)-(LEN\2)+1
"RTN","IBCNERPH",141,0)
 S $E(HDR,POS,POS+$L(TSTAMP)-1)=TSTAMP
"RTN","IBCNERPH",142,0)
 W HDR W:TYPE="S" !
"RTN","IBCNERPH",143,0)
 S HDR=$$FMTE^XLFDT($G(IBCNESPC("BEGDT")),"5Z")_" - "_$$FMTE^XLFDT($G(IBCNESPC("ENDDT")),"5Z")
"RTN","IBCNERPH",144,0)
 W !?1,"Response Received: ",HDR
"RTN","IBCNERPH",145,0)
 W !?2,$S(TYPE="D":"Detailed",1:"Summary")_" Report: "
"RTN","IBCNERPH",146,0)
 W $S($G(IBCNESPC("PYR"))="A":"All",1:"Selected")_" Payers"
"RTN","IBCNERPH",147,0)
 ; IB*2.0*549 For detailed version do not display date eIV response received,
"RTN","IBCNERPH",148,0)
 ;            'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPH",149,0)
 ; IB*2.0*549 Add fields:  Insurance Company, date eIV inquiry sent, date
"RTN","IBCNERPH",150,0)
 ;                         policy auto updated, and eIV Trace number
"RTN","IBCNERPH",151,0)
 I TYPE="D" D
"RTN","IBCNERPH",152,0)
 .; IB*2.0*549 Fix selected/all insurance co
"RTN","IBCNERPH",153,0)
 .W "; ",$S($G(IBCNESPC("INSCO"))="S":"Selected",1:"All")
"RTN","IBCNERPH",154,0)
 .W " Insurance Companies; "
"RTN","IBCNERPH",155,0)
 .W $S($G(IBCNESPC("PAT"))="A":"All",1:"Selected")_" Patients"
"RTN","IBCNERPH",156,0)
 .; IB*2.0*549 Fix header for screen
"RTN","IBCNERPH",157,0)
 .S STRING="Payer",$E(STRING,28,45)="Insurance Co",$E(STRING,46,62)="Patient Name"
"RTN","IBCNERPH",158,0)
 .S $E(STRING,63,68)="SSN",$E(STRING,69,78)="Dt Sent",$E(STRING,79,88)="Auto Dt"
"RTN","IBCNERPH",159,0)
 .; IB*2.0*595/DM removing days 
"RTN","IBCNERPH",160,0)
 .;S $E(STRING,89,97)="Days",$E(STRING,98,131)="eIV Trace#"
"RTN","IBCNERPH",161,0)
 .S $E(STRING,98,131)="eIV Trace#"
"RTN","IBCNERPH",162,0)
 .W !!,?1,STRING
"RTN","IBCNERPH",163,0)
 S $P(DASHES,"-",WIDTH-2)="" W !,?1,DASHES
"RTN","IBCNERPH",164,0)
 Q
"RTN","IBCNERPH",165,0)
 ;
"RTN","IBCNERPH",166,0)
LINE(LINE,IBOUT) ; Print line of data
"RTN","IBCNERPH",167,0)
 I $Y+1>MAXCNT,IBOUT="R" D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",168,0)
 W ! W:IBOUT="R" ?1 W LINE
"RTN","IBCNERPH",169,0)
 Q
"RTN","IBCNERPH",170,0)
 ;
"RTN","IBCNERPH",171,0)
CENTER(LINE) ; return length of a centered line
"RTN","IBCNERPH",172,0)
 ; LINE - line to center
"RTN","IBCNERPH",173,0)
 N LENGTH,OFFSET
"RTN","IBCNERPH",174,0)
 S LENGTH=$L(LINE),OFFSET=IOM-$L(LINE)\2
"RTN","IBCNERPH",175,0)
 Q OFFSET+LENGTH
"RTN","IBCNERPH",176,0)
 ;
"RTN","IBCNERPH",177,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNERPH",178,0)
 ; IB*2.0*549 - Add report header
"RTN","IBCNERPH",179,0)
 N HDR,IBHDT,X
"RTN","IBCNERPH",180,0)
 D NOW^%DTC
"RTN","IBCNERPH",181,0)
 S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCNERPH",182,0)
 W "Auto Update Report",?53,"Run On: ",IBHDT
"RTN","IBCNERPH",183,0)
 S HDR=$$FMTE^XLFDT($G(IBCNESPC("BEGDT")),"5Z")_" - "_$$FMTE^XLFDT($G(IBCNESPC("ENDDT")),"5Z")
"RTN","IBCNERPH",184,0)
 W !?1,"Response Received: ",HDR
"RTN","IBCNERPH",185,0)
 W !?2,$S(TYPE="D":"Detailed",1:"Summary")_" Report: "
"RTN","IBCNERPH",186,0)
 W $S($G(IBCNESPC("PYR"))="A":"All",1:"Selected")_" Payers"
"RTN","IBCNERPH",187,0)
 I TYPE="D" D
"RTN","IBCNERPH",188,0)
 .W "; ",$S($G(IBCNESPC("INSCO"))="S":"Selected",1:"All")
"RTN","IBCNERPH",189,0)
 .W " Insurance Companies; "
"RTN","IBCNERPH",190,0)
 .W $S($G(IBCNESPC("PAT"))="A":"All",1:"Selected")_" Patients"
"RTN","IBCNERPH",191,0)
 W !!
"RTN","IBCNERPH",192,0)
 S IBPGC=1
"RTN","IBCNERPH",193,0)
 D
"RTN","IBCNERPH",194,0)
 .I TYPE="S" S X="Payer Name^Insurance Co^Count" Q
"RTN","IBCNERPH",195,0)
 .I TYPE="D" D
"RTN","IBCNERPH",196,0)
 ..S X="Payer^Insurance Co^Patient Name^SSN^Dt Sent^Auto Dt"
"RTN","IBCNERPH",197,0)
 ..; IB*2.0*595/DM removing days
"RTN","IBCNERPH",198,0)
 ..;S X=X_"^Days^eIV Trace#"
"RTN","IBCNERPH",199,0)
 ..S X=X_"^eIV Trace#"
"RTN","IBCNERPH",200,0)
 W X
"RTN","IBCNERPH",201,0)
 Q
"RTN","IBCNSMM")
0^10^B19301339^B21854403
"RTN","IBCNSMM",1,0)
IBCNSMM ;ALB/CMS -MEDICARE INSURANCE INTAKE ; 18-OCT-98
"RTN","IBCNSMM",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,184,516,601,595**;21-MAR-94;Build 29
"RTN","IBCNSMM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSMM",4,0)
 Q
"RTN","IBCNSMM",5,0)
 ;
"RTN","IBCNSMM",6,0)
EN ; -- Entry point from Medicare Intake Standalone option
"RTN","IBCNSMM",7,0)
 N DIC,DIR,DA,%A,DFN,X,Y,IBQUIT,IBCNSP,IBSOURCE
"RTN","IBCNSMM",8,0)
 S (IBQUIT,IBCNSP)=0 D GETWNR I IBQUIT G ENQ
"RTN","IBCNSMM",9,0)
 ;
"RTN","IBCNSMM",10,0)
 ; - allow the user to enter the Source of Information for the policies
"RTN","IBCNSMM",11,0)
 W !!,"You may enter the 'Source of Information' that will be filed with all"
"RTN","IBCNSMM",12,0)
 W !,"Medicare insurance coverage policies that are created.",!
"RTN","IBCNSMM",13,0)
 ;
"RTN","IBCNSMM",14,0)
 S DIR(0)="2.312,1.09"
"RTN","IBCNSMM",15,0)
 S DIR("A")="Enter Source of Information"
"RTN","IBCNSMM",16,0)
 S DIR("B")="INTERVIEW"
"RTN","IBCNSMM",17,0)
 D ^DIR K DUOUT,DTOUT,DIRUT,DIROUT,DIR
"RTN","IBCNSMM",18,0)
 S IBSOURCE=+Y I Y<1 G ENQ
"RTN","IBCNSMM",19,0)
 W !
"RTN","IBCNSMM",20,0)
 ;
"RTN","IBCNSMM",21,0)
 ; - loop to select patients
"RTN","IBCNSMM",22,0)
ENA S DIC(0)="AEQMN",DIC="^DPT(" D ^DIC
"RTN","IBCNSMM",23,0)
 I +Y<1 G ENQ
"RTN","IBCNSMM",24,0)
 S DFN=+Y
"RTN","IBCNSMM",25,0)
 I $G(^DPT(DFN,.35)) W *7,!!,?10,"Patient Expired on ",$$FMTE^XLFDT($P(^DPT(DFN,.35),U))
"RTN","IBCNSMM",26,0)
 W ! D DISP^IBCNS W !,?3 S X="",$P(X,"=",76)="" W X
"RTN","IBCNSMM",27,0)
 D ENR(DFN,IBSOURCE,1) K DIC W !! G ENA
"RTN","IBCNSMM",28,0)
 ;
"RTN","IBCNSMM",29,0)
ENQ Q
"RTN","IBCNSMM",30,0)
 ;
"RTN","IBCNSMM",31,0)
 ;
"RTN","IBCNSMM",32,0)
ENR(DFN,IBSOUR,IBOPT) ; -- Entry point from IBCNBME Patient Registration or Pre-Registration
"RTN","IBCNSMM",33,0)
 ;    Input Variable DFN Required and IBSOUR =Source of Information
"RTN","IBCNSMM",34,0)
 ;                   IBOPT =1 if coming from MII Standalone Option
"RTN","IBCNSMM",35,0)
 ;
"RTN","IBCNSMM",36,0)
 N D,DIE,DA,DIR,DIC,E,IBCPOL,IBCNSP,IBCDFN,IBQUIT,IBOK,IBC0,IBAD,IBGRP,IBADPOL
"RTN","IBCNSMM",37,0)
 N IBNAME,IBHICN,IBAEFF,IBBEFF,IBCOVP,IBGNA,IBGNU,IBBUF,IBNEW,IBP,X,Y
"RTN","IBCNSMM",38,0)
 N IBPOLA,IBPOLB,IBARR,IBHIT,IBHITA,IBHITB,IBCOB,IBCOBI
"RTN","IBCNSMM",39,0)
 ;
"RTN","IBCNSMM",40,0)
 S (IBAEFF,IBBEFF,IBCNSP,IBCDFN,IBNEW,IBQUIT)=0,IBADPOL=1
"RTN","IBCNSMM",41,0)
 S (IBNAME,IBHICN)=""
"RTN","IBCNSMM",42,0)
 ;
"RTN","IBCNSMM",43,0)
 ; -- Get Standard Medicare Insurance Company and plans in IBCNSP
"RTN","IBCNSMM",44,0)
 D GETWNR I IBQUIT G ENRQ
"RTN","IBCNSMM",45,0)
 ;
"RTN","IBCNSMM",46,0)
 ; -- get the patient's Medicare policies
"RTN","IBCNSMM",47,0)
 S (IBPOLA,IBPOLB)=0
"RTN","IBCNSMM",48,0)
 S IBCDFN=0 F  S IBCDFN=$O(^DPT(DFN,.312,"B",+IBCNSP,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSMM",49,0)
 .;IB*2.0*516/TAZ - Retrieve Data from HIPAA compliant fields.
"RTN","IBCNSMM",50,0)
 .;S IBCPOL=$G(^DPT(DFN,.312,IBCDFN,0))  ;516 - baa
"RTN","IBCNSMM",51,0)
 .S IBCPOL=$$ZND^IBCNS1(DFN,IBCDFN)  ;516 - baa
"RTN","IBCNSMM",52,0)
 .;
"RTN","IBCNSMM",53,0)
 .; - is the policy for Part A?
"RTN","IBCNSMM",54,0)
 .I $P(IBCNSP,U,3)=$P(IBCPOL,U,18) D  Q
"RTN","IBCNSMM",55,0)
 ..S IBPOLA=IBPOLA+1,IBARR("A",IBPOLA)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",56,0)
 .;
"RTN","IBCNSMM",57,0)
 .; - is the policy for Part B?
"RTN","IBCNSMM",58,0)
 .I $P(IBCNSP,U,5)=$P(IBCPOL,U,18) D
"RTN","IBCNSMM",59,0)
 ..S IBPOLB=IBPOLB+1,IBARR("B",IBPOLB)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",60,0)
 ;
"RTN","IBCNSMM",61,0)
 ; - can't edit here if there is more than one policy
"RTN","IBCNSMM",62,0)
 I $D(IBARR("A",2)) K IBARR("A") D
"RTN","IBCNSMM",63,0)
 .W !!,"This patient has more than one Part A policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",64,0)
 ;
"RTN","IBCNSMM",65,0)
 I $D(IBARR("B",2)) K IBARR("B") D
"RTN","IBCNSMM",66,0)
 .W !!,"This patient has more than one Part B policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",67,0)
 ;
"RTN","IBCNSMM",68,0)
 I (IBPOLA!IBPOLB),'$D(IBARR) G ENRQ
"RTN","IBCNSMM",69,0)
 ;
"RTN","IBCNSMM",70,0)
 ; -- Ask for Medicare Insurance Card information
"RTN","IBCNSMM",71,0)
 ;    Return IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOB/IBCOBI
"RTN","IBCNSMM",72,0)
 D MII^IBCNSMM2 I IBQUIT G ENRQ
"RTN","IBCNSMM",73,0)
 ;
"RTN","IBCNSMM",74,0)
 ; - if Part A or B exists, but no changes, quit
"RTN","IBCNSMM",75,0)
 I $D(IBARR("A",1)) D COM($P(IBARR("A",1),"^",2,99),"A") I IBHIT D
"RTN","IBCNSMM",76,0)
 .S IBHITA=1 W !,"  * No Part A changes made..."
"RTN","IBCNSMM",77,0)
 ;
"RTN","IBCNSMM",78,0)
 I $D(IBARR("B",1)) D COM($P(IBARR("B",1),"^",2,99),"B") I IBHIT D
"RTN","IBCNSMM",79,0)
 .S IBHITB=1 W !,"  * No Part B changes made..."
"RTN","IBCNSMM",80,0)
 ;
"RTN","IBCNSMM",81,0)
 I $G(IBHITA),$G(IBHITB) G ENRQ
"RTN","IBCNSMM",82,0)
 I $G(IBHITA),'$G(IBBEFF) G ENRQ
"RTN","IBCNSMM",83,0)
 I $G(IBHITB),'$G(IBAEFF) G ENRQ
"RTN","IBCNSMM",84,0)
 ;
"RTN","IBCNSMM",85,0)
 ;IB*595 Removed ability to file directly into Insurance Type File
"RTN","IBCNSMM",86,0)
 I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",87,0)
 I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",88,0)
 ;
"RTN","IBCNSMM",89,0)
 ; -- If user not holding key set data in Buffer File
"RTN","IBCNSMM",90,0)
 ;I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D G ENRQ
"RTN","IBCNSMM",91,0)
 ;.I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",92,0)
 ;.I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",93,0)
 ;
"RTN","IBCNSMM",94,0)
 ; -- Otherwise, set data into permanent files
"RTN","IBCNSMM",95,0)
 ;I IBAEFF,'$G(IBHITA) D
"RTN","IBCNSMM",96,0)
 ;.I IBPOLA,'$D(IBARR("A")) Q ; can't update Part A policy
"RTN","IBCNSMM",97,0)
 ;.I '$D(IBARR("A",1)) D ADDP("A") Q
"RTN","IBCNSMM",98,0)
 ;.S IBCDFN=+IBARR("A",1) D SETP^IBCNSMM1("A")
"RTN","IBCNSMM",99,0)
 ;I IBBEFF,'$G(IBHITB) D
"RTN","IBCNSMM",100,0)
 ;.I IBPOLB,'$D(IBARR("B")) Q ; can't update Part B policy
"RTN","IBCNSMM",101,0)
 ;.I '$D(IBARR("B",1)) D ADDP("B") Q
"RTN","IBCNSMM",102,0)
 ;.S IBCDFN=+IBARR("B",1) D SETP^IBCNSMM1("B")
"RTN","IBCNSMM",103,0)
 ;IB*595 END
"RTN","IBCNSMM",104,0)
 ;
"RTN","IBCNSMM",105,0)
ENRQ W ! Q
"RTN","IBCNSMM",106,0)
 ;
"RTN","IBCNSMM",107,0)
 ;
"RTN","IBCNSMM",108,0)
 ;
"RTN","IBCNSMM",109,0)
ADDP(IBP) ; -- Create a new patient policy
"RTN","IBCNSMM",110,0)
 ;    Input: DFN
"RTN","IBCNSMM",111,0)
 ;           IBCNSP=MED WNR INS IEN^MEDICARE (WNR)
"RTN","IBCNSMM",112,0)
 ;                  ^PART A IEN^PART A
"RTN","IBCNSMM",113,0)
 ;                  ^PART B IEN^PART A
"RTN","IBCNSMM",114,0)
 ;           IBP = "A" or "B" for medicare part
"RTN","IBCNSMM",115,0)
 ;           IBSOUR = Source of Information
"RTN","IBCNSMM",116,0)
 ;   Return: IBCDFN=-1 could not add OR Policy ien
"RTN","IBCNSMM",117,0)
 ;           IBCOVP= Covered by Health Insurance
"RTN","IBCNSMM",118,0)
 ;
"RTN","IBCNSMM",119,0)
 N X,Y,DO,DD,DA,DR,DIC,DIE,DIK,DIR,DIRUT,IBSPEC
"RTN","IBCNSMM",120,0)
 ; -- Create a New patient policy
"RTN","IBCNSMM",121,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM",122,0)
 ;
"RTN","IBCNSMM",123,0)
 D FIELD^DID(2,.3121,"","SPECIFIER","IBSPEC")
"RTN","IBCNSMM",124,0)
 S DIC("DR")="1.09////"_IBSOUR_";1.05///NOW;1.06////"_DUZ,DIC("P")=$G(IBSPEC("SPECIFIER"))
"RTN","IBCNSMM",125,0)
 K DD,DO S DA(1)=DFN,DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=+IBCNSP,DLAYGO=2.312
"RTN","IBCNSMM",126,0)
 D FILE^DICN K DD,DO,DLAYGO,DIC
"RTN","IBCNSMM",127,0)
 S IBCDFN=+Y
"RTN","IBCNSMM",128,0)
 I IBCDFN<1 W !!,*7,"  <Could not create new policy at this time.  Try Later!>",! G ADDPQ
"RTN","IBCNSMM",129,0)
 ;
"RTN","IBCNSMM",130,0)
 ; -- Set Medicare policy data
"RTN","IBCNSMM",131,0)
 D SETP^IBCNSMM1(IBP)
"RTN","IBCNSMM",132,0)
ADDPQ Q
"RTN","IBCNSMM",133,0)
 ;
"RTN","IBCNSMM",134,0)
 ;
"RTN","IBCNSMM",135,0)
GETWNR ;
"RTN","IBCNSMM",136,0)
 ; -- Get Medicare (WNR) insurance company and plan data
"RTN","IBCNSMM",137,0)
 ;    Returns IBCNSP or IBQUIT
"RTN","IBCNSMM",138,0)
 ;    IBCNSP="Error: Medicare (WNR) ... not setup properly" 
"RTN","IBCNSMM",139,0)
 ;           if Medicare WNR entry or plans not setup properly
"RTN","IBCNSMM",140,0)
 ;
"RTN","IBCNSMM",141,0)
 ;    IBCNSP=INS CO. (36) IEN^"MEDICARE (WNR)"
"RTN","IBCNSMM",142,0)
 ;           ^PLAN (355.3) PARTA IEN^"PART A"
"RTN","IBCNSMM",143,0)
 ;           ^PLAN (355.3) PARTB IEN^"PART B"
"RTN","IBCNSMM",144,0)
 ;
"RTN","IBCNSMM",145,0)
 I 'IBCNSP S IBCNSP=$$GETWNR^IBCNSMM1
"RTN","IBCNSMM",146,0)
 I 'IBCNSP W !!,*7,?3,IBCNSP S IBQUIT=1
"RTN","IBCNSMM",147,0)
 Q
"RTN","IBCNSMM",148,0)
 ;
"RTN","IBCNSMM",149,0)
VALHIC(X) ; Edits for validating HIC #
"RTN","IBCNSMM",150,0)
 ; X = the HIC # to be validated
"RTN","IBCNSMM",151,0)
 ;IB*2.0*601 JRA Remove special HIC # validation - use existing error messages IB356/IB357/IB358 when the
"RTN","IBCNSMM",152,0)
 ; Primary/Secondary/Tertiary insurance subscriber's ID number is missing (as with other insurances).
"RTN","IBCNSMM",153,0)
 ; 
"RTN","IBCNSMM",154,0)
 ;IB*2.0*601 JRA QUIT '1' to remove special validation for HIC #, which will prevent the display of IB Error
"RTN","IBCNSMM",155,0)
 ; message IB215 and the HIC # help text at HLP^IBCNSM32.
"RTN","IBCNSMM",156,0)
 Q 1  ;IB*2.0*601 JRA
"RTN","IBCNSMM",157,0)
 N VAL
"RTN","IBCNSMM",158,0)
 S VAL=1
"RTN","IBCNSMM",159,0)
 I X'?9N1A.1AN,X'?1.3A6N,X'?1.3A9N S VAL=0
"RTN","IBCNSMM",160,0)
 Q VAL
"RTN","IBCNSMM",161,0)
 ;
"RTN","IBCNSMM",162,0)
COM(X,Y) ; Compare X with the intake variables.
"RTN","IBCNSMM",163,0)
 ;    Input: X => 0th node of policy in file #2.312
"RTN","IBCNSMM",164,0)
 ;           Y => A (Part A) or B (part B)
"RTN","IBCNSMM",165,0)
 ;   Output: IBHIT=1 (no changes made)
"RTN","IBCNSMM",166,0)
 S IBHIT=0
"RTN","IBCNSMM",167,0)
 I $P(X,"^",17)'=IBNAME G COMQ
"RTN","IBCNSMM",168,0)
 I $P(X,"^",2)'=IBHICN G COMQ
"RTN","IBCNSMM",169,0)
 I $P(X,"^",8)'=$S(Y="A":IBAEFF,1:IBBEFF) G COMQ
"RTN","IBCNSMM",170,0)
 I $P(X,"^",20)'=IBCOBI G COMQ
"RTN","IBCNSMM",171,0)
 ;
"RTN","IBCNSMM",172,0)
 S IBHIT=1
"RTN","IBCNSMM",173,0)
COMQ Q
"RTN","IBCNSP01")
0^8^B52030470^B52258890
"RTN","IBCNSP01",1,0)
IBCNSP01 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY  ;05-MAR-1993
"RTN","IBCNSP01",2,0)
 ;;2.0;INTEGRATED BILLING;**43,52,85,251,371,377,416,452,497,595**;21-MAR-94;Build 29
"RTN","IBCNSP01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP01",4,0)
 ;
"RTN","IBCNSP01",5,0)
 ;
"RTN","IBCNSP01",6,0)
% D SUBSC,RIDER
"RTN","IBCNSP01",7,0)
 Q
"RTN","IBCNSP01",8,0)
 ;
"RTN","IBCNSP01",9,0)
SUBSC ; -- subscriber region  ;IB*2*497 move subscriber lines around
"RTN","IBCNSP01",10,0)
 N OFFSET,START,RX,DATARRY,X1,SAV
"RTN","IBCNSP01",11,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,RX=0  ;IB*2*497  
"RTN","IBCNSP01",12,0)
 D SET^IBCNSP(START,OFFSET," Subscriber Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",13,0)
 S Y=$P(IBCDFND,U,6),C=$P(^DD(2.312,6,0),U,2) D Y^DIQ
"RTN","IBCNSP01",14,0)
 D SET^IBCNSP(START+1,OFFSET,$$RJ^XLFSTR("Whose Insurance: ",19)_Y)
"RTN","IBCNSP01",15,0)
 D SPLIT(OFFSET,$$RJ^XLFSTR("Subscriber Name: ",19),$P(IBCDFND7,U),.DATARRY)
"RTN","IBCNSP01",16,0)
 S (SAV,X1)=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",17,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",18,0)
 . D SET^IBCNSP(START,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",19,0)
 S Y=$P(IBCDFND4,U,3),C=$P(^DD(2.312,4.03,0),U,2) D Y^DIQ
"RTN","IBCNSP01",20,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",21,0)
 D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Relationship: ",19)_Y)
"RTN","IBCNSP01",22,0)
 K DATARRY D SPLIT(OFFSET,$$RJ^XLFSTR("Primary ID: ",19),$P(IBCDFND7,U,2),.DATARRY)
"RTN","IBCNSP01",23,0)
 S X1=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",24,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",25,0)
 . D SET^IBCNSP(START,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",26,0)
 S Y=$P(IBCDFND,U,20),C=$P(^DD(2.312,.2,0),U,2) D Y^DIQ
"RTN","IBCNSP01",27,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",28,0)
 D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Coord.  Benefits: ",19)_Y)
"RTN","IBCNSP01",29,0)
 ;
"RTN","IBCNSP01",30,0)
 ; IB*2*452 - esg - display Pharmacy fields if they exist
"RTN","IBCNSP01",31,0)
 I $P(IBCDFND4,U,5)'=""!($P(IBCDFND4,U,6)'="") D
"RTN","IBCNSP01",32,0)
 . N G,IBY S G=+$P(IBCDFND4,U,5),IBY=""
"RTN","IBCNSP01",33,0)
 . I G S IBY=$$GET1^DIQ(9002313.19,G_",",.01)_" - "_$$GET1^DIQ(9002313.19,G_",",.02)
"RTN","IBCNSP01",34,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",35,0)
 . D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Rx Relationship: ",19)_IBY)
"RTN","IBCNSP01",36,0)
 . D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Rx Person Code: ",19)_$P(IBCDFND4,U,6))
"RTN","IBCNSP01",37,0)
 . Q
"RTN","IBCNSP01",38,0)
 ; Two blank lines at end of section
"RTN","IBCNSP01",39,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",40,0)
 D SET^IBCNSP(START,OFFSET," ")
"RTN","IBCNSP01",41,0)
 Q
"RTN","IBCNSP01",42,0)
 ;
"RTN","IBCNSP01",43,0)
PRV ;  Provider and contact info  IB*2*497 move provider contact info so that prints after employer related info
"RTN","IBCNSP01",44,0)
 ; inputs
"RTN","IBCNSP01",45,0)
 ;       IBCDFND,IBCDFND4 - data strings equal to the 0 and 4 subscripts of the INSURANCE TYPE Subfile (2.312) entry
"RTN","IBCNSP01",46,0)
 ; output 
"RTN","IBCNSP01",47,0)
 ;       - an entry at the nth node of ^TMP("IBCNSVP",$J,n)
"RTN","IBCNSP01",48,0)
 N OFFSET,START
"RTN","IBCNSP01",49,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",50,0)
 D SET^IBCNSP(START,OFFSET,"Primary Provider: "_$P(IBCDFND4,U,1))
"RTN","IBCNSP01",51,0)
 D SET^IBCNSP(START+1,OFFSET," Prim Prov Phone: "_$P(IBCDFND4,U,2))
"RTN","IBCNSP01",52,0)
 D SET^IBCNSP(START+2,2," ")
"RTN","IBCNSP01",53,0)
 Q
"RTN","IBCNSP01",54,0)
 ;
"RTN","IBCNSP01",55,0)
VER ; -- Entered/Verfied Region
"RTN","IBCNSP01",56,0)
 N OFFSET,START,EIVFLG
"RTN","IBCNSP01",57,0)
 S EIVFLG=+$P(IBCDFND4,U,4)
"RTN","IBCNSP01",58,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",59,0)
 S IB1ST("VERIFY")=START
"RTN","IBCNSP01",60,0)
 D SET^IBCNSP(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",61,0)
 D SET^IBCNSP(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCDFND1,U,2),0)),U,1),1,20))
"RTN","IBCNSP01",62,0)
 D SET^IBCNSP(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCDFND1))
"RTN","IBCNSP01",63,0)
 ;D SET^IBCNSP(START+3,OFFSET,"Last Verified By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,U,4),0)),U,1),1,20)))
"RTN","IBCNSP01",64,0)
 D SET^IBCNSP(START+3,OFFSET,"Last Verified By: "_$E($P($G(^VA(200,+$P(IBCDFND1,U,4),0)),U,1),1,20))
"RTN","IBCNSP01",65,0)
 D SET^IBCNSP(START+4,OFFSET,"Last Verified On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,U,3)))
"RTN","IBCNSP01",66,0)
 ;D SET^IBCNSP(START+5,OFFSET," Last Updated By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,U,6),0)),U,1),1,20)))
"RTN","IBCNSP01",67,0)
 D SET^IBCNSP(START+5,OFFSET," Last Updated By: "_$E($P($G(^VA(200,+$P(IBCDFND1,U,6),0)),U,1),1,20))
"RTN","IBCNSP01",68,0)
 D SET^IBCNSP(START+6,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,U,5)))
"RTN","IBCNSP01",69,0)
 D SET^IBCNSP(START+7,2," ")   ; 2 blank lines to end section
"RTN","IBCNSP01",70,0)
 D SET^IBCNSP(START+8,2," ")
"RTN","IBCNSP01",71,0)
VERQ Q
"RTN","IBCNSP01",72,0)
 ;
"RTN","IBCNSP01",73,0)
ID ; Subscriber and patient primary and secondary ID's and qualifiers
"RTN","IBCNSP01",74,0)
 NEW START,OFFSET,IBL,G,PCE,QUAL,QUAL1
"RTN","IBCNSP01",75,0)
 S G=IBCDFND5
"RTN","IBCNSP01",76,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",77,0)
 S IB1ST("ID")=START
"RTN","IBCNSP01",78,0)
 D SET^IBCNSP(START,OFFSET," Insurance Company ID Numbers (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP01",79,0)
 D SPLIT(OFFSET,"  Subscriber ID: ",$P(IBCDFND7,U,2),.DATARRY)
"RTN","IBCNSP01",80,0)
 S (SAV,X1)=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",81,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",82,0)
 . D SET^IBCNSP(IBL,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",83,0)
 ;
"RTN","IBCNSP01",84,0)
 F PCE=3,5,7 D            ; subscriber secondary IDs
"RTN","IBCNSP01",85,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",86,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",87,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",88,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",89,0)
 . D SET^IBCNSP(IBL,OFFSET,"Subscriber Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",90,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",91,0)
 . Q
"RTN","IBCNSP01",92,0)
 ;
"RTN","IBCNSP01",93,0)
 ; patient=subscriber so skip over patient ID# display
"RTN","IBCNSP01",94,0)
 I +$P(IBCDFND,U,16)=1 G ID1
"RTN","IBCNSP01",95,0)
 ;
"RTN","IBCNSP01",96,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")   ; blank line
"RTN","IBCNSP01",97,0)
 S IBL=IBL+1
"RTN","IBCNSP01",98,0)
 D SET^IBCNSP(IBL,OFFSET,"     Patient Primary ID: "_$P(G,U,1))
"RTN","IBCNSP01",99,0)
 ;
"RTN","IBCNSP01",100,0)
 F PCE=9,11,13 D          ; patient secondary IDs
"RTN","IBCNSP01",101,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",102,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",103,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",104,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",105,0)
 . D SET^IBCNSP(IBL,OFFSET,"   Patient Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",106,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",107,0)
 . Q
"RTN","IBCNSP01",108,0)
 ;
"RTN","IBCNSP01",109,0)
ID1 ; end of section - 2 blank lines
"RTN","IBCNSP01",110,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",111,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",112,0)
IDQ ;
"RTN","IBCNSP01",113,0)
 Q
"RTN","IBCNSP01",114,0)
 ;
"RTN","IBCNSP01",115,0)
RIDER ; -- Personal policy riders
"RTN","IBCNSP01",116,0)
 N OFFSET,START,IBI,IBL,IBPR,IBPRD
"RTN","IBCNSP01",117,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,IBL=0
"RTN","IBCNSP01",118,0)
 D SET^IBCNSP(START,OFFSET," Personal Riders ",IORVON,IORVOFF)
"RTN","IBCNSP01",119,0)
 S IBI="" F  S IBI=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBI)) Q:'IBI  S IBPR=$O(^(IBI,0)),IBPRD=+$G(^IBA(355.7,IBPR,0)),IBL=IBL+1 D
"RTN","IBCNSP01",120,0)
 . D SET^IBCNSP(START+IBL,OFFSET,"   Rider #"_IBL_": "_$$EXPAND^IBTRE(355.7,.01,IBPRD))
"RTN","IBCNSP01",121,0)
 . Q
"RTN","IBCNSP01",122,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",123,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",124,0)
 Q
"RTN","IBCNSP01",125,0)
 ;
"RTN","IBCNSP01",126,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP01",127,0)
 ;    called from ai^ibcnsp1
"RTN","IBCNSP01",128,0)
 ;
"RTN","IBCNSP01",129,0)
 ; -- see if current inpatient
"RTN","IBCNSP01",130,0)
 D INP^VADPT I +VAIN(1) D
"RTN","IBCNSP01",131,0)
 .S IBTRN=$O(^IBT(356,"AD",+VAIN(1),0))
"RTN","IBCNSP01",132,0)
 ;
"RTN","IBCNSP01",133,0)
 S IBXIFN=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP01",134,0)
 ;
"RTN","IBCNSP01",135,0)
 ; -- if not tracking id allow selecting
"RTN","IBCNSP01",136,0)
 I '$G(IBTRN) D  G:IBQUIT AIQ
"RTN","IBCNSP01",137,0)
 .W !,"You can now enter a contact and relate it to a Claims Tracking Admission entry."
"RTN","IBCNSP01",138,0)
 .S DIC("A")="Select RELATED ADMISSION DATE: "
"RTN","IBCNSP01",139,0)
 .S DIC="^IBT(356,",DIC(0)="AEQ",D="ADFN"_DFN,DIC("S")="I $P(^(0),U,5)"
"RTN","IBCNSP01",140,0)
 .D IX^DIC K DA,DR,DIC,DIE I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1 Q
"RTN","IBCNSP01",141,0)
 .I +Y>1 S IBTRN=+Y
"RTN","IBCNSP01",142,0)
 ;
"RTN","IBCNSP01",143,0)
 I '$G(IBTRN) W !!,"Warning: This contact is not associated with any care in Claims Tracking.",!,"You may only edit or view this contact using this action.",!
"RTN","IBCNSP01",144,0)
 ;
"RTN","IBCNSP01",145,0)
 ; -- select date
"RTN","IBCNSP01",146,0)
 S IBOK=0,IBI=0 F  S IBI=$O(^IBT(356.2,"D",DFN,IBI)) Q:'IBI  I $P($G(^IBT(356.2,+IBI,0)),U,4)=IBXIFN,$P($G(^(1)),U,5)=IBCDFN S IBOK=1
"RTN","IBCNSP01",147,0)
 I IBOK D  G:IBQUIT AIQ
"RTN","IBCNSP01",148,0)
 .S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: "
"RTN","IBCNSP01",149,0)
 .S X="??",DIC(0)="EQ",DIC("S")="I $P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN" ;,DLAYGO=356.2
"RTN","IBCNSP01",150,0)
 .S D="ADFN"_DFN
"RTN","IBCNSP01",151,0)
 .D IX^DIC K DIC,DR,DA,DIE,D I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1
"RTN","IBCNSP01",152,0)
 ;
"RTN","IBCNSP01",153,0)
 S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: ",DIC("B")="TODAY"
"RTN","IBCNSP01",154,0)
 S DIC("DR")=".02////"_$G(IBTRN)_";.04////"_IBXIFN_";.05////"_DFN_";.19////1;1.01///NOW;1.02////"_DUZ_";1.05////"_IBCDFN
"RTN","IBCNSP01",155,0)
 S DIC(0)="AEQL",DIC("S")="I $P(^(0),U,5)=DFN,$P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN",DLAYGO=356.2
"RTN","IBCNSP01",156,0)
 D ^DIC K DIC
"RTN","IBCNSP01",157,0)
 I $D(DTOUT)!($D(DUOUT))!(+Y<1) G AIQ
"RTN","IBCNSP01",158,0)
 S IBTRC=+Y
"RTN","IBCNSP01",159,0)
 I $G(IBTRC),$G(IBTRN),'$P(^IBT(356.2,+IBTRC,0),U,2) S DA=IBTRC,DIE="^IBT(356.2,",DR=".02////"_$G(IBTRN) D ^DIE
"RTN","IBCNSP01",160,0)
 ;
"RTN","IBCNSP01",161,0)
 ; -- edit ins ver type
"RTN","IBCNSP01",162,0)
 D EDIT^IBTRCD1("[IBT INS VERIFICATION]",1)
"RTN","IBCNSP01",163,0)
AIQ Q
"RTN","IBCNSP01",164,0)
 ;
"RTN","IBCNSP01",165,0)
SPLIT(OFFSET,LABEL,DATA,DATARRY) ; ib*2*497  reformat data that is too large to fit on one line 
"RTN","IBCNSP01",166,0)
 ; 
"RTN","IBCNSP01",167,0)
 ;  INPUTS
"RTN","IBCNSP01",168,0)
 ;         OFFSET - left margin starting point (e.g., 2)
"RTN","IBCNSP01",169,0)
 ;         LABEL - the data label that gets displayed alongside the actual data (e.g."subscriber name:)
"RTN","IBCNSP01",170,0)
 ;         DATA - the value to be set for display on a line (e.g.,   IB, PATIENT")
"RTN","IBCNSP01",171,0)
 ;  OUTPUT
"RTN","IBCNSP01",172,0)
 ;         DATARRY - an array which contains the data to be displayed on more than 1 line
"RTN","IBCNSP01",173,0)
 ;
"RTN","IBCNSP01",174,0)
 N STRING,I,SAVPOS,QUIT
"RTN","IBCNSP01",175,0)
 S STRING=LABEL_DATA
"RTN","IBCNSP01",176,0)
 I $L(STRING)+OFFSET<81 S DATARRY(1)=STRING Q 
"RTN","IBCNSP01",177,0)
 S DATARRY(1)=$E(STRING,1,80-OFFSET)
"RTN","IBCNSP01",178,0)
 S SAVPOS=$L(DATARRY(1))
"RTN","IBCNSP01",179,0)
 S QUIT=0 F I=2:1 D  Q:QUIT
"RTN","IBCNSP01",180,0)
 . S DATARRY(I)=$$REPEAT^XLFSTR(" ",$L(LABEL))_$E(STRING,SAVPOS+1,$L(STRING))
"RTN","IBCNSP01",181,0)
 . I $TR(DATARRY(I)," ")']"" K DATARRY(I) S QUIT=1 Q
"RTN","IBCNSP01",182,0)
 . I $L(DATARRY(I))+OFFSET>80 S DATARRY(I)=$E(DATARRY(I),1,80-OFFSET) S SAVPOS=SAVPOS+$L(DATARRY(I)) Q
"RTN","IBCNSP01",183,0)
 . S QUIT=1
"RTN","IBCNSP01",184,0)
 Q
"RTN","IBCNSUR2")
0^17^B21196070^B18995204
"RTN","IBCNSUR2",1,0)
IBCNSUR2 ;ALB/CPM/CMS - MOVE SUBSCRIBERS TO DIFFERENT PLAN (CON'T) ; 09-SEP-96
"RTN","IBCNSUR2",2,0)
 ;;2.0;INTEGRATED BILLING;**103,238,399,595**;21-MAR-94;Build 29
"RTN","IBCNSUR2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR2",4,0)
 Q
"RTN","IBCNSUR2",5,0)
 ;
"RTN","IBCNSUR2",6,0)
PL ; Display old plan attributes; allow new plan to be edited
"RTN","IBCNSUR2",7,0)
 N IBP0,IBX,DA
"RTN","IBCNSUR2",8,0)
 W @IOF,!!,"Now you may edit specific Plan attributes and Coverage Limitations."
"RTN","IBCNSUR2",9,0)
 W !,"(Plan 1 is the plan subscribers moved from.)"
"RTN","IBCNSUR2",10,0)
 W !,"(Plan 2 is the plan subscribers moved to.)"
"RTN","IBCNSUR2",11,0)
 W !,$TR($J("",71)," ","=")
"RTN","IBCNSUR2",12,0)
 W !,"'Plan 1' Attributes for: ",IBC1N
"RTN","IBCNSUR2",13,0)
 S IBP0=$G(^IBA(355.3,IBP1,0)),DA=+IBP1
"RTN","IBCNSUR2",14,0)
 W !?9,"Plan Name: ",IBP1N,?43,"Plan Number: ",IBP1X
"RTN","IBCNSUR2",15,0)
 W !,$TR($J("",71)," ","-")
"RTN","IBCNSUR2",16,0)
 ; IB*2*595/DM display BIN and PCN number when moving subscribers 
"RTN","IBCNSUR2",17,0)
 S IBX=$$GET1^DIQ(355.3,IBP1_",","BANKING IDENTIFICATION NUMBER")
"RTN","IBCNSUR2",18,0)
 W !,"  BANKING IDENTIFICATION NUMBER:  ",$S(IBX'="":IBX,1:"<Not Specified>")
"RTN","IBCNSUR2",19,0)
 S IBX=$$GET1^DIQ(355.3,IBP1_",","PROCESSOR CONTROL NUMBER (PCN)")
"RTN","IBCNSUR2",20,0)
 W !," PROCESSOR CONTROL NUMBER (PCN):  ",$S(IBX'="":IBX,1:"<Not Specified>")
"RTN","IBCNSUR2",21,0)
 W !,?19,"TYPE OF PLAN:  ",$S($P(IBP0,"^",9):$P($G(^IBE(355.1,+$P(IBP0,"^",9),0)),"^"),1:"<Not Specified>")
"RTN","IBCNSUR2",22,0)
 W !,?11,"ELECTRONIC PLAN TYPE:  ",$$EXPAND^IBTRE(355.3,.15,$P(IBP0,U,15)) ; TJH *238
"RTN","IBCNSUR2",23,0)
 I $P(IBP0,U,14)]"" W !,?18,"PLAN CATEGORY:  ",$$EXPAND^IBTRE(355.3,.14,$P(IBP0,U,14))
"RTN","IBCNSUR2",24,0)
 W !,?9,"PLAN FILING TIME FRAME:  ",$P(IBP0,U,13) I +$P(IBP0,U,16) W "  (",$$FTFN^IBCNSU31(IBP1),")"
"RTN","IBCNSUR2",25,0)
 W !," IS UTILIZATION REVIEW REQUIRED:  ",$$YN($P(IBP0,"^",5))
"RTN","IBCNSUR2",26,0)
 W !,"  AMBULATORY CARE CERTIFICATION:  ",$$EXPAND^IBTRE(355.3,.12,$P(IBP0,U,12))
"RTN","IBCNSUR2",27,0)
 W !,"  IS PRE-CERTIFICATION REQUIRED:  ",$$YN($P(IBP0,"^",6))
"RTN","IBCNSUR2",28,0)
 W !,"EXCLUDE PRE-EXISTING CONDITIONS:  ",$$YN($P(IBP0,"^",7))
"RTN","IBCNSUR2",29,0)
 W !?12,"BENEFITS ASSIGNABLE:  ",$$YN($P(IBP0,"^",8))
"RTN","IBCNSUR2",30,0)
 W !,$TR($J("",71)," ","=")
"RTN","IBCNSUR2",31,0)
 ;
"RTN","IBCNSUR2",32,0)
 W !!,"Editing 'Plan 2' Attributes for: ",IBC2N
"RTN","IBCNSUR2",33,0)
 S IBP0=$G(^IBA(355.3,IBP2,0))
"RTN","IBCNSUR2",34,0)
 W !?9,"Plan Name: ",IBP2N,?43,"Plan Number: ",IBP2X,!
"RTN","IBCNSUR2",35,0)
 ;
"RTN","IBCNSUR2",36,0)
 S DIE="^IBA(355.3,",DA=IBP2
"RTN","IBCNSUR2",37,0)
 ; IB*2*595/DM allow users to adjust BIN and PCN number when moving subscribers
"RTN","IBCNSUR2",38,0)
 S DR="6.02;6.03;.09;.15;I $P($G(^IBE(355.1,+$P($G(^IBA(355.3,DA,0)),U,9),0)),U,3)'=5 S Y=""@10"";.14;@10;.16;I '$$FTFV^IBCNSU31(X) S Y=""@13"";.17;@13;.13;.05;.12;.06:.08"
"RTN","IBCNSUR2",39,0)
 D ^DIE K DA,DIE,DR
"RTN","IBCNSUR2",40,0)
 ;
"RTN","IBCNSUR2",41,0)
 Q
"RTN","IBCNSUR2",42,0)
 ;
"RTN","IBCNSUR2",43,0)
 ;
"RTN","IBCNSUR2",44,0)
YN(X) ; Resolve the 'Yes/No' value.
"RTN","IBCNSUR2",45,0)
 Q $S($G(X)="":"<Not Specified>",X:"YES",X=0:"NO",1:"<Not Specified>")
"RTN","IBCNSUR2",46,0)
 ;
"RTN","IBCNSUR2",47,0)
 ;
"RTN","IBCNSUR2",48,0)
LIM ; Display/Edit Coverage Limitations.
"RTN","IBCNSUR2",49,0)
 W @IOF,!,$TR($J("",71)," ","=")
"RTN","IBCNSUR2",50,0)
 D LIMDSP(IBC1,IBP1,1)
"RTN","IBCNSUR2",51,0)
 W !,$TR($J("",71)," ","-")
"RTN","IBCNSUR2",52,0)
 D LIMDSP(IBC2,IBP2,2)
"RTN","IBCNSUR2",53,0)
 W !,$TR($J("",71)," ","=")
"RTN","IBCNSUR2",54,0)
 ;
"RTN","IBCNSUR2",55,0)
 ; - does the user wish to edit the plan coverage limitations?
"RTN","IBCNSUR2",56,0)
 S DIR(0)="Y",DIR("A")="Do you wish to edit the 'Plan 2' Coverage Limitations"
"RTN","IBCNSUR2",57,0)
 S DIR("?")="If you wish to edit the coverage limitations for the new plan, enter 'Yes.'"
"RTN","IBCNSUR2",58,0)
 D ^DIR K DIR,DIRUT,DIROUT,DUOUT,DTOUT I 'Y G LIMQ
"RTN","IBCNSUR2",59,0)
 ;
"RTN","IBCNSUR2",60,0)
 ; - allow the edit of coverage limitations for plan 2
"RTN","IBCNSUR2",61,0)
 W !!,"Editing 'Plan 2' Coverage Limitations for: ",IBC2N
"RTN","IBCNSUR2",62,0)
 S IBX=$G(^IBA(355.3,IBP2,0))
"RTN","IBCNSUR2",63,0)
 W !?9,"Plan Name: ",IBP2N,?43,"Plan Number: ",IBP2X
"RTN","IBCNSUR2",64,0)
 ;
"RTN","IBCNSUR2",65,0)
 S IBCPOL=IBP2 D EDCOV^IBCNSJ51 K VALMBCK
"RTN","IBCNSUR2",66,0)
 ; The call below is to clean up List Man variables from IBCNSJ51
"RTN","IBCNSUR2",67,0)
 ; the call to FULL^VALM sets variables. Or modify IBCNSJ51
"RTN","IBCNSUR2",68,0)
 S IBROU="IBCNSJ51",IBTOP="T" D EN^VALM(IBROU,IBTOP) K IBROU,IBTOP
"RTN","IBCNSUR2",69,0)
 ;
"RTN","IBCNSUR2",70,0)
LIMQ Q
"RTN","IBCNSUR2",71,0)
 ;
"RTN","IBCNSUR2",72,0)
 ;
"RTN","IBCNSUR2",73,0)
LIMDSP(IBC,IBP,IBPNUM) ; Display coverage limitations for a company/plan.
"RTN","IBCNSUR2",74,0)
 N IBCOV,IBCOVD,IBCOVFN,IBCNT,IBP0,IBLEDT,IBLIM,IBLINE,IBX,IB0,IBS
"RTN","IBCNSUR2",75,0)
 W !!," 'Plan ",IBPNUM,"' Coverage Limitations for ",$S(IBPNUM=1:IBC1N,1:IBC2N)
"RTN","IBCNSUR2",76,0)
 S IBP0=$G(^IBA(355.3,IBP,0))
"RTN","IBCNSUR2",77,0)
 W !?9,"Plan Name: ",$S($P(IBP0,U,3)]"":$P(IBP0,U,3),1:"<Not Specified>")
"RTN","IBCNSUR2",78,0)
 W ?43,"Plan Number: ",$S($P(IBP0,U,4)]"":$P(IBP0,U,4),1:"<Not Specified>")
"RTN","IBCNSUR2",79,0)
 W !!,"  Coverage            Effective Date   Covered?       Limit Comments"
"RTN","IBCNSUR2",80,0)
 W !,"  --------            --------------   --------       --------------"
"RTN","IBCNSUR2",81,0)
 ;
"RTN","IBCNSUR2",82,0)
 ; - display limitation for each type of coverage
"RTN","IBCNSUR2",83,0)
 S IBLIM=0 F  S IBLIM=$O(^IBE(355.31,IBLIM)) Q:'IBLIM  S IBCOV=$P($G(^(IBLIM,0)),U) D
"RTN","IBCNSUR2",84,0)
 .S IBCNT=0
"RTN","IBCNSUR2",85,0)
 .S IBLEDT="" F  S IBLEDT=$O(^IBA(355.32,"APCD",IBP,IBLIM,IBLEDT)) Q:$S(IBLEDT="":IBCNT,1:0)  D  Q:IBLEDT=""
"RTN","IBCNSUR2",86,0)
 ..S IBCOVFN=+$O(^IBA(355.32,"APCD",IBP,IBLIM,+IBLEDT,"")),IBCOVD=$G(^IBA(355.32,+IBCOVFN,0))
"RTN","IBCNSUR2",87,0)
 ..S IBCNT=IBCNT+1
"RTN","IBCNSUR2",88,0)
 ..I IBCOVD="" S IBW="  "_$E(IBCOV_$J("",18),1,18)_$J("",19)_"BY DEFAULT" W !,IBW Q
"RTN","IBCNSUR2",89,0)
 ..S IBX="  "_$E($S(IBCNT=1:IBCOV,1:"")_$J("",18),1,18) ;Don't dup category
"RTN","IBCNSUR2",90,0)
 ..S IBX=IBX_"  "_$E($$DAT1^IBOUTL($P(IBLEDT,"-",2))_$J("",8),1,8)_$J("",9)_$S($P(IBCOVD,U,4):$S($P(IBCOVD,U,4)<2:"YES"_$J("",8),$P(IBCOVD,U,4)=2:"CONDITIONAL",1:"UNKNOWN    "),1:"NO"_$J("",9))_$J("",4)
"RTN","IBCNSUR2",91,0)
 ..W !,IBX
"RTN","IBCNSUR2",92,0)
 ..S (IBS,IB0)=0 F  S IB0=$O(^IBA(355.32,IBCOVFN,2,IB0)) Q:'IB0  W:IBS ! W ?54,$G(^(IB0,0)) S IBS=1
"RTN","IBCNSUR2",93,0)
 ;
"RTN","IBCNSUR2",94,0)
 Q
"RTN","IBCNVRD1")
0^11^B208983433^B219042298
"RTN","IBCNVRD1",1,0)
IBCNVRD1 ;ALB/BAA - SYSTEM SHARED VERIFIED INSURANCE -RECEIVING SITE PROCESSING ;25-FEB-15
"RTN","IBCNVRD1",2,0)
 ;;2.0;INTEGRATED BILLING;**528,595**;21-MAR-94;Build 29
"RTN","IBCNVRD1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNVRD1",4,0)
 ;;
"RTN","IBCNVRD1",5,0)
 ;
"RTN","IBCNVRD1",6,0)
 ;
"RTN","IBCNVRD1",7,0)
RPC(SSVI,IBICN,GLOB) ; Receive transmitted data form another site, process and store in 
"RTN","IBCNVRD1",8,0)
 ; Insurance Verification Processor
"RTN","IBCNVRD1",9,0)
 ;
"RTN","IBCNVRD1",10,0)
 S SSVI=""
"RTN","IBCNVRD1",11,0)
 N NOW,PAT,PREOPHF,PREOPHFD,PREOPHFK,FRESHDAY,PDOD,FRESHDT,SRVICEDT,ERROR,BUFF,CNTHL71
"RTN","IBCNVRD1",12,0)
 N DFN,PAT,NAMEINS,GROUPLAN,NAME,SSN,GENDER,RACE,INSNAME  ; INSNAME IS INSURED  NAME
"RTN","IBCNVRD1",13,0)
 N NAME,SUBSCRID,PATNAM,PTDOB,MBRID,DATELVER,IDUZ,ADUZ,OSTATION,IBERROR,LCKERR
"RTN","IBCNVRD1",14,0)
 N GNAM,GNAME,GNUM,GNUMB,GROUPLNM,INSNAMEP,STATION,DSTATION,OSTATION  ; STATIONS AS ORIGINATING SENDING FACILITY SITE'S STATION NUMBER
"RTN","IBCNVRD1",15,0)
 ;
"RTN","IBCNVRD1",16,0)
 N LASTINDT,NOWDATE,LCKERR,INSPTR,AUTO,SUB,DATA,GDATA,GIEN,GROUPNAM,GROUPNUM
"RTN","IBCNVRD1",17,0)
 N GRPLNPTR,IBD,IBP,IBSOURCE,INSPTR1,INSPTR2,ISGROUP,MGRP,NAMINS,NEWGRPLN
"RTN","IBCNVRD1",18,0)
 N PIVOTNUM,PREL,PTNAM,RECDDAT,RIEN,RSUPDT,TSTAMP,VARPTR,IENG,REIN,AUDUZ,PSSN,STATE,SUBSCRNM,COB,%
"RTN","IBCNVRD1",19,0)
 ;
"RTN","IBCNVRD1",20,0)
 S IDUZ=$$FIND1^DIC(200,"","X","POSTMASTER")
"RTN","IBCNVRD1",21,0)
 S ADUZ="AUTOUPDATE,IBEIV"
"RTN","IBCNVRD1",22,0)
 S LCKERR=0
"RTN","IBCNVRD1",23,0)
 S DFN=$$DFN^IBARXMU(IBICN) I 'DFN S IBD(0)="-1^ICN Not found" Q
"RTN","IBCNVRD1",24,0)
 S PTNAM=$$GET1^DIQ(2,DFN_",",.01),PTDOB=$$GET1^DIQ(2,DFN_",",.03)
"RTN","IBCNVRD1",25,0)
 ;
"RTN","IBCNVRD1",26,0)
 ;S GLOB(SUB,1))=NAME_"|"_NAMEINS_"|"_GROUPLAN_"|"_COORDBEN_"|"_SUBSCRID_"|"_SSN_"|"_DATELVER_"|"_
"RTN","IBCNVRD1",27,0)
 ;           GROUPNUM_"|"_INSURDOB_"|"_INSURSSN_"|"_INSGENDR_"|"_INSNAMEP
"RTN","IBCNVRD1",28,0)
 ;
"RTN","IBCNVRD1",29,0)
 ;S GLOB(SUB,2)=PTRELHIP_"|"_WHOSEINS_"|"_EFFCTDPO_"|"_GROUPNAM_"|"_PTRELINS_"|"_INSNAME_"|"_
"RTN","IBCNVRD1",30,0)
 ;          "|"_SENDBEMP_"|"_SUBEMPNM_"|"_SEMPLCLA_"|"_SEMPLCL2
"RTN","IBCNVRD1",31,0)
 ;
"RTN","IBCNVRD1",32,0)
 ;S GLOB(SUB,3)=SEMPLCL3_"|"_SEMPLCLC_"|"_SEMPLCLS_"|"_SEMPLCLZ_"|"_SEMPLCLP_"|"_ESHGP_"|"_
"RTN","IBCNVRD1",33,0)
 ;          INSEXPDT_"|"_POLNBILL_"|"_INSSTAD_"|"_INSSTAD2_"|"_INSCITY_"|"_INSSTATE_"|"_
"RTN","IBCNVRD1",34,0)
 ;          INSZIP_"|"_INSPHONE_"|"_PATIENTI
"RTN","IBCNVRD1",35,0)
 ;
"RTN","IBCNVRD1",36,0)
 ;S GLOB(SUB,4))=PAYER_"|"_PAYERNM_"|"_BN_"|"_PCN_"|"_TOPNM_"|"_DOB_"|"_GENDER_"|"_RACE_"|"_
"RTN","IBCNVRD1",37,0)
 ;           POLNBILL_"|"_GROUPLNM
"RTN","IBCNVRD1",38,0)
 ;
"RTN","IBCNVRD1",39,0)
 ;S GLOB(SUB,5)=DFN_"|"_CNTHL7_"|"_INSPTR_"|"_INSPTR1_"|"_STATION_"|"_DSTATION_"|"_RIEN_"|"_ERROR
"RTN","IBCNVRD1",40,0)
 ;
"RTN","IBCNVRD1",41,0)
 ;I GROUPLAN'="" D
"RTN","IBCNVRD1",42,0)
 ;.S ITEM=0
"RTN","IBCNVRD1",43,0)
 ;.F  S ITEM=$O(^IBA(355.3,GROUPLAN,11,ITEM)) Q:ITEM=""  D
"RTN","IBCNVRD1",44,0)
 ;..S GROUPPCM=$G(^IBA(355.3,GROUPLAN,11,ITEM,0))
"RTN","IBCNVRD1",45,0)
 ;..S GLOB(SUB,7...N)=GROUPPCM N
"RTN","IBCNVRD1",46,0)
 ; 
"RTN","IBCNVRD1",47,0)
 S SSVI(0)="STARTED"
"RTN","IBCNVRD1",48,0)
 S SUB=0
"RTN","IBCNVRD1",49,0)
 F  S SUB=$O(GLOB(SUB)) Q:SUB=""  D PROCESS(SUB)
"RTN","IBCNVRD1",50,0)
 ;
"RTN","IBCNVRD1",51,0)
 D DONE
"RTN","IBCNVRD1",52,0)
 Q
"RTN","IBCNVRD1",53,0)
 ;
"RTN","IBCNVRD1",54,0)
PROCESS(SUB) ; process insurance entries
"RTN","IBCNVRD1",55,0)
 S IBSOURCE=$O(^IBE(355.12,"C","INTERFACILITY INS UPDATE",0))
"RTN","IBCNVRD1",56,0)
 S AUTO="",ERROR=""
"RTN","IBCNVRD1",57,0)
 S SSVI(SUB)=GLOB(SUB,5)
"RTN","IBCNVRD1",58,0)
 S IBP="|"
"RTN","IBCNVRD1",59,0)
 S OSTATION=$P(GLOB(SUB,5),IBP,5)
"RTN","IBCNVRD1",60,0)
 ;
"RTN","IBCNVRD1",61,0)
 S NAME=$P(GLOB(SUB,1),IBP,1)
"RTN","IBCNVRD1",62,0)
 S MBRID=$P(GLOB(SUB,1),IBP,6)
"RTN","IBCNVRD1",63,0)
 S SUBSCRID=$P(GLOB(SUB,1),IBP,5)
"RTN","IBCNVRD1",64,0)
 S SUBSCRNM=$P(GLOB(SUB,1),IBP,12)
"RTN","IBCNVRD1",65,0)
 S DATELVER=$P(GLOB(SUB,1),IBP,7)
"RTN","IBCNVRD1",66,0)
 S NAMINS=$P(GLOB(SUB,1),IBP,2)
"RTN","IBCNVRD1",67,0)
 S GNAME=$P(GLOB(SUB,2),IBP,4)
"RTN","IBCNVRD1",68,0)
 S GNUMB=$P(GLOB(SUB,1),IBP,8)
"RTN","IBCNVRD1",69,0)
 S GROUPLNM=$P(GLOB(SUB,1),IBP,3)
"RTN","IBCNVRD1",70,0)
 S INSNAME=$P(GLOB(SUB,2),IBP,6)
"RTN","IBCNVRD1",71,0)
 S DOB=$P(GLOB(SUB,4),IBP,6)
"RTN","IBCNVRD1",72,0)
 S SSN=$P(GLOB(SUB,1),IBP,6)
"RTN","IBCNVRD1",73,0)
 ;VALIDATE INSURANCE COMPANY NAME WITH ASSOCIATED PAYER ID AND PAYER NAME
"RTN","IBCNVRD1",74,0)
 S PAYRID=$P(GLOB(SUB,4),IBP,1)
"RTN","IBCNVRD1",75,0)
 S PYRNM=$P(GLOB(SUB,4),IBP,2)
"RTN","IBCNVRD1",76,0)
 S COB=$P(GLOB(SUB,1),IBP,4)
"RTN","IBCNVRD1",77,0)
 ;
"RTN","IBCNVRD1",78,0)
 S VALIDINS=$$PAYER(NAMINS,PAYRID,PYRNM)
"RTN","IBCNVRD1",79,0)
 S IENI=$P(VALIDINS,"^",2),VALIDINS=+VALIDINS
"RTN","IBCNVRD1",80,0)
 ;
"RTN","IBCNVRD1",81,0)
 S AUTO=$$AUTOUPD(PAYRID)
"RTN","IBCNVRD1",82,0)
 I +AUTO=1 D  Q
"RTN","IBCNVRD1",83,0)
 .D:$P(AUTO,U,3)'="" UPDTPI($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNVRD1",84,0)
 .D:$P(AUTO,U,4)'="" UPDTPI($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNVRD1",85,0)
 .D STUB
"RTN","IBCNVRD1",86,0)
 .S $P(GLOB(SUB,5),"|",7)=$G(RIEN) S RIEN=""
"RTN","IBCNVRD1",87,0)
 .S $P(GLOB(SUB,5),"|",8)=$G(ERROR)
"RTN","IBCNVRD1",88,0)
 .S SSVI(SUB)=GLOB(SUB,5)
"RTN","IBCNVRD1",89,0)
 .Q
"RTN","IBCNVRD1",90,0)
 ;
"RTN","IBCNVRD1",91,0)
 I +AUTO=0!(LCKERR=1) D BUFFER
"RTN","IBCNVRD1",92,0)
 ;
"RTN","IBCNVRD1",93,0)
 S $P(GLOB(SUB,5),"|",7)=$G(RIEN)
"RTN","IBCNVRD1",94,0)
 S $P(GLOB(SUB,5),"|",8)=$G(ERROR)
"RTN","IBCNVRD1",95,0)
 S SSVI(SUB)=GLOB(SUB,5)
"RTN","IBCNVRD1",96,0)
 Q
"RTN","IBCNVRD1",97,0)
 ;
"RTN","IBCNVRD1",98,0)
 ;
"RTN","IBCNVRD1",99,0)
BUFFER ; File into buffer
"RTN","IBCNVRD1",100,0)
 ;
"RTN","IBCNVRD1",101,0)
 S IBP="|",IBERROR=""
"RTN","IBCNVRD1",102,0)
 ;S ADUZ=$$FIND1^DIC(200,"","X","AUTOUPDATE,IBEIV")
"RTN","IBCNVRD1",103,0)
 ;S IDUZ=$$FIND1^DIC(200,"","X","POSTMASTER")
"RTN","IBCNVRD1",104,0)
 ; BE SURE DEFINED RIEN (INSURANCE BUFFER ENTRY)
"RTN","IBCNVRD1",105,0)
 ;
"RTN","IBCNVRD1",106,0)
 S RIEN=""
"RTN","IBCNVRD1",107,0)
 S RIEN=+$$ADD^IBCNBEE(IBSOURCE)
"RTN","IBCNVRD1",108,0)
 I 'RIEN D  Q
"RTN","IBCNVRD1",109,0)
 .S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY"
"RTN","IBCNVRD1",110,0)
 .S $P(GLOB(SUB,5),"|",8)=IBERROR
"RTN","IBCNVRD1",111,0)
 ;
"RTN","IBCNVRD1",112,0)
 D NOW^%DTC S TSTAMP=%
"RTN","IBCNVRD1",113,0)
 ;
"RTN","IBCNVRD1",114,0)
 S RSUPDT(355.33,RIEN_",",.1)=$P(GLOB(SUB,1),IBP,7)     ; DATE VERIFIED
"RTN","IBCNVRD1",115,0)
 S RSUPDT(355.33,RIEN_",",90.03)=$S($G(SUBSCRID)'="":SUBSCRID,1:MBRID)
"RTN","IBCNVRD1",116,0)
 S RSUPDT(355.33,RIEN_",",62.01)=MBRID  ;PATIENT (MEMBER) ID
"RTN","IBCNVRD1",117,0)
 S RSUPDT(355.33,RIEN_",",90.02)=GNUMB  ;GROUP NUM
"RTN","IBCNVRD1",118,0)
 S RSUPDT(355.33,RIEN_",",90.01)=GNAME  ;GROUP NAME
"RTN","IBCNVRD1",119,0)
 S RSUPDT(355.33,RIEN_",",60.01)=DFN  ; PATIENT
"RTN","IBCNVRD1",120,0)
 S RSUPDT(355.33,RIEN_",",60.02)=$P(GLOB(SUB,2),IBP,3)  ; EFFECTIVE DATE
"RTN","IBCNVRD1",121,0)
 S RSUPDT(355.33,RIEN_",",60.03)=$P(GLOB(SUB,3),IBP,7)  ; EXPIRATION DATE
"RTN","IBCNVRD1",122,0)
 S RSUPDT(355.33,RIEN_",",60.05)=$P(GLOB(SUB,2),IBP,2)   ;WHOSEINS
"RTN","IBCNVRD1",123,0)
 S RSUPDT(355.33,RIEN_",",60.06)=$P(GLOB(SUB,2),IBP,5)   ;PTRELINS
"RTN","IBCNVRD1",124,0)
 S RSUPDT(355.33,RIEN_",",60.12)=COB  ;COORDINATION OF BENEFITS
"RTN","IBCNVRD1",125,0)
 S RSUPDT(355.33,RIEN_",",60.14)=$P(GLOB(SUB,2),IBP,1)   ;PTRELHIP
"RTN","IBCNVRD1",126,0)
 S RSUPDT(355.33,RIEN_",",20.01)=NAMINS   ; INSURANCE COMPANY NAME, VALIDATED WITH PAYRID AND PYRNM
"RTN","IBCNVRD1",127,0)
 S GRPLNPTR=$O(^DIC(36,"B",GROUPLNM,0))    ;GROUP PLAN NAME
"RTN","IBCNVRD1",128,0)
 ;I VALIDINS=0 
"RTN","IBCNVRD1",129,0)
 S RSUPDT(355.33,RIEN_",",.07)='VALIDINS  ; New Insurance Company ?
"RTN","IBCNVRD1",130,0)
 S ISGROUP=0
"RTN","IBCNVRD1",131,0)
 I GROUPLNM'="" S ISGROUP=1
"RTN","IBCNVRD1",132,0)
 S RSUPDT(355.33,RIEN_",",40.01)=ISGROUP   ; 1 FOR "YES" INSTEAD OF .08 AS NEW GROUP/PLAN
"RTN","IBCNVRD1",133,0)
 S RSUPDT(355.33,RIEN_",",40.1)=$P(GLOB(SUB,4),IBP,3)   ;B/N
"RTN","IBCNVRD1",134,0)
 S RSUPDT(355.33,RIEN_",",40.11)=$P(GLOB(SUB,4),IBP,5)  ;PCN
"RTN","IBCNVRD1",135,0)
 S RSUPDT(355.33,RIEN_",",40.09)=$P(GLOB(SUB,4),IBP,5)  ;type of plan
"RTN","IBCNVRD1",136,0)
 ;CHECK IF NEW GROUP PLAN
"RTN","IBCNVRD1",137,0)
 ;FIRST CHECK IF NOT NEW INSURANCE
"RTN","IBCNVRD1",138,0)
 S NEWGRPLN=1
"RTN","IBCNVRD1",139,0)
 I VALIDINS=1 D
"RTN","IBCNVRD1",140,0)
 .;GO THROUGH "B" CROSS REFERENCE IN GROUP PLAN FILE WITH INSURANCE COMPANY NAME
"RTN","IBCNVRD1",141,0)
 .S IENG=0
"RTN","IBCNVRD1",142,0)
 .I IENI="" Q
"RTN","IBCNVRD1",143,0)
 .F  S IENG=$O(^IBA(355.3,"B",IENI,IENG)) Q:(IENG="")!(NEWGRPLN=0)  D
"RTN","IBCNVRD1",144,0)
 ..;CHECK AGAINST GROUP NAME AND GROUP NUMBER
"RTN","IBCNVRD1",145,0)
 ..S GROUPNUM=$P($G(^IBA(355.3,IENG,0)),U,4)
"RTN","IBCNVRD1",146,0)
 ..S GROUPNAM=$P($G(^IBA(355.3,IENG,0)),U,3)
"RTN","IBCNVRD1",147,0)
 ..I (GROUPNUM=GNUMB)&(GROUPNAM=GNAME) S NEWGRPLN=0
"RTN","IBCNVRD1",148,0)
 S RSUPDT(355.33,RIEN_",",.08)=NEWGRPLN  ; NEW GROUP PLAN
"RTN","IBCNVRD1",149,0)
 S RSUPDT(355.33,RIEN_",",61.02)=$P(GLOB(SUB,2),IBP,9)  ; EMPLOYER NAME
"RTN","IBCNVRD1",150,0)
 S RSUPDT(355.33,RIEN_",",61.05)=$P(GLOB(SUB,2),IBP,8)  ; SEND BILL TO EMPLOYER
"RTN","IBCNVRD1",151,0)
 S RSUPDT(355.33,RIEN_",",61.06)=$P(GLOB(SUB,2),IBP,10)  ; EMPLOYER ADR1
"RTN","IBCNVRD1",152,0)
 S RSUPDT(355.33,RIEN_",",61.07)=$P(GLOB(SUB,2),IBP,11)  ; EMPLOYER ADR2
"RTN","IBCNVRD1",153,0)
 S RSUPDT(355.33,RIEN_",",61.08)=$P(GLOB(SUB,3),IBP,1)  ; EMPLOYER ADR3
"RTN","IBCNVRD1",154,0)
 S RSUPDT(355.33,RIEN_",",61.09)=$P(GLOB(SUB,3),IBP,2)  ; EMPLOYER CITY
"RTN","IBCNVRD1",155,0)
 S RSUPDT(355.33,RIEN_",",61.1)=$P(GLOB(SUB,3),IBP,3)   ; EMPLOYER STATE
"RTN","IBCNVRD1",156,0)
 S RSUPDT(355.33,RIEN_",",61.11)=$P(GLOB(SUB,3),IBP,4)  ; EMPLOYER ZIPCODE
"RTN","IBCNVRD1",157,0)
 S RSUPDT(355.33,RIEN_",",61.12)=$P(GLOB(SUB,3),IBP,5)  ; EMPLOYER PHONE
"RTN","IBCNVRD1",158,0)
 S RSUPDT(355.33,RIEN_",",61.01)=$P(GLOB(SUB,3),IBP,6)  ;EMPLOYER SPONSORED HEALTH GROUP PLAN
"RTN","IBCNVRD1",159,0)
 ;
"RTN","IBCNVRD1",160,0)
 S RSUPDT(355.33,RIEN_",",60.08)=$P(GLOB(SUB,1),IBP,9)   ;insured dob
"RTN","IBCNVRD1",161,0)
 S PSSN=$P(GLOB(SUB,1),IBP,10)  ;insured ssn
"RTN","IBCNVRD1",162,0)
 S PSSN=$TR(PSSN,"-","")
"RTN","IBCNVRD1",163,0)
 S RSUPDT(355.33,RIEN_",",60.09)=PSSN  ;insured ssn
"RTN","IBCNVRD1",164,0)
 S RSUPDT(355.33,RIEN_",",60.13)=$P(GLOB(SUB,1),IBP,11)  ;insured gender
"RTN","IBCNVRD1",165,0)
 S RSUPDT(355.33,RIEN_",",91.01)=$P(GLOB(SUB,2),IBP,6)   ;insured name
"RTN","IBCNVRD1",166,0)
 S RSUPDT(355.33,RIEN_",",62.02)=$P(GLOB(SUB,3),IBP,9)   ;subscriber add 1
"RTN","IBCNVRD1",167,0)
 S RSUPDT(355.33,RIEN_",",62.03)=$P(GLOB(SUB,3),IBP,10)  ;subscriber add 2
"RTN","IBCNVRD1",168,0)
 S RSUPDT(355.33,RIEN_",",62.04)=$P(GLOB(SUB,3),IBP,11)  ;subscriber city
"RTN","IBCNVRD1",169,0)
 S STATE=$P(GLOB(SUB,3),IBP,12)
"RTN","IBCNVRD1",170,0)
 I STATE'="" S STATE=$O(^DIC(5,"B",STATE,0))  ;subscriber state
"RTN","IBCNVRD1",171,0)
 S RSUPDT(355.33,RIEN_",",62.05)=STATE  ;subscriber state
"RTN","IBCNVRD1",172,0)
 S RSUPDT(355.33,RIEN_",",62.06)=$P(GLOB(SUB,3),IBP,13)  ;subscriber zip
"RTN","IBCNVRD1",173,0)
 S RSUPDT(355.33,RIEN_",",62.09)=$P(GLOB(SUB,3),IBP,14)  ;subscriber phone
"RTN","IBCNVRD1",174,0)
 S RSUPDT(355.33,RIEN_",",.01)=TSTAMP  ; DATE ENTERED
"RTN","IBCNVRD1",175,0)
 S RSUPDT(355.33,RIEN_",",.02)=IDUZ  ; ENTERED BY
"RTN","IBCNVRD1",176,0)
 S RSUPDT(355.33,RIEN_",",.03)=IBSOURCE  ; SOURCE OF INFORMATION
"RTN","IBCNVRD1",177,0)
 S RSUPDT(355.33,RIEN_",",.04)="E"  ; STATUS
"RTN","IBCNVRD1",178,0)
 S RSUPDT(355.33,RIEN_",",.05)=TSTAMP  ; DATE PROCESSED
"RTN","IBCNVRD1",179,0)
 S RSUPDT(355.33,RIEN_",",.06)=IDUZ  ; PROCESSED BY
"RTN","IBCNVRD1",180,0)
 S RSUPDT(355.33,RIEN_",",.1)=TSTAMP  ; DATE VERIFIED
"RTN","IBCNVRD1",181,0)
 S RSUPDT(355.33,RIEN_",",.11)=IDUZ  ; VERIFIED BY
"RTN","IBCNVRD1",182,0)
 S RSUPDT(355.33,RIEN_",",.12)=1  ; eIV STATUS
"RTN","IBCNVRD1",183,0)
 S RSUPDT(355.33,RIEN_",",.14)=OSTATION  ; REMOTE LOCATION
"RTN","IBCNVRD1",184,0)
 ;
"RTN","IBCNVRD1",185,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNVRD1",186,0)
 ;
"RTN","IBCNVRD1",187,0)
 I $G(ERROR)'="" S $P(GLOB(SUB,5),"|",8)=ERROR
"RTN","IBCNVRD1",188,0)
 ;
"RTN","IBCNVRD1",189,0)
 Q
"RTN","IBCNVRD1",190,0)
 ;
"RTN","IBCNVRD1",191,0)
PAYER(INSNAME,PAYRID,PYRNM) ;
"RTN","IBCNVRD1",192,0)
 N IEN,IENI,VALIDINS,PAYER,PAYERID,PAYERNM
"RTN","IBCNVRD1",193,0)
 S IEN=0
"RTN","IBCNVRD1",194,0)
 S VALIDINS=0
"RTN","IBCNVRD1",195,0)
 S IENI=""
"RTN","IBCNVRD1",196,0)
 S PAYERID=""
"RTN","IBCNVRD1",197,0)
 S PAYERNM=""
"RTN","IBCNVRD1",198,0)
 S IEN=0
"RTN","IBCNVRD1",199,0)
 F  S IEN=$O(^DIC(36,"B",INSNAME,IEN)) Q:(IEN="")!(VALIDINS=1)  D
"RTN","IBCNVRD1",200,0)
 .S PAYERID=$P($G(^DIC(36,IEN,3)),U,10)
"RTN","IBCNVRD1",201,0)
 .I PAYERID'="" S PAYERNM=$P($G(^IBE(365.12,PAYERID,0)),U)
"RTN","IBCNVRD1",202,0)
 .I (PAYERID=PAYRID)&(PAYERNM=PYRNM) S VALIDINS=1
"RTN","IBCNVRD1",203,0)
 .S IENI=IEN
"RTN","IBCNVRD1",204,0)
 Q VALIDINS_"^"_IENI
"RTN","IBCNVRD1",205,0)
 ; 
"RTN","IBCNVRD1",206,0)
AUTOUPD(PIEN) ;
"RTN","IBCNVRD1",207,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNVRD1",208,0)
 ; is eligible for auto-update, returns 0 otherwise. 
"RTN","IBCNVRD1",209,0)
 ;
"RTN","IBCNVRD1",210,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNVRD1",211,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNVRD1",212,0)
 ;
"RTN","IBCNVRD1",213,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNVRD1",214,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNVRD1",215,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNVRD1",216,0)
 ;
"RTN","IBCNVRD1",217,0)
 N GNUM1,GOK,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP,IEN36
"RTN","IBCNVRD1",218,0)
 N ONEPOL,RDATA0,RES,TQIEN,IDATA7,IDATA1
"RTN","IBCNVRD1",219,0)
 S RES=0
"RTN","IBCNVRD1",220,0)
 I PIEN<1 Q RES
"RTN","IBCNVRD1",221,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNVRD1",222,0)
 I PIEN=MWNRIEN S MWNRTYP=1
"RTN","IBCNVRD1",223,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,DFN)
"RTN","IBCNVRD1",224,0)
 ; try to find a matching pat. insurance
"RTN","IBCNVRD1",225,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNVRD1",226,0)
 .S IEN312="" F  S IEN312=$O(^DPT(DFN,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNVRD1",227,0)
 ..S IDATA0=$G(^DPT(DFN,.312,IEN312,0))
"RTN","IBCNVRD1",228,0)
 ..S IDATA3=$G(^DPT(DFN,.312,IEN312,3))
"RTN","IBCNVRD1",229,0)
 ..S IDATA7=$G(^DPT(DFN,.312,IEN312,7))
"RTN","IBCNVRD1",230,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNVRD1",231,0)
 ..; Patient is the subscriber
"RTN","IBCNVRD1",232,0)
 ..I ISSUB,'$$CHK1 Q
"RTN","IBCNVRD1",233,0)
 ..; Patient is the dependent
"RTN","IBCNVRD1",234,0)
 ..I 'ISSUB,'$$CHK2(MWNRTYP) Q
"RTN","IBCNVRD1",235,0)
 ..; check group number
"RTN","IBCNVRD1",236,0)
 ..S GIEN=+$P(IDATA0,U,18),GOK=1  ; group number needs to be retrieved from new field
"RTN","IBCNVRD1",237,0)
 ..; check non-Medicare group number
"RTN","IBCNVRD1",238,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNVRD1",239,0)
 ...I 'ONEPOL D
"RTN","IBCNVRD1",240,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNVRD1",241,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)
"RTN","IBCNVRD1",242,0)
 ....I GNUMB=""!(GNUM1="")!(GNUMB'=GNUM1) S GOK=0
"RTN","IBCNVRD1",243,0)
 ....Q
"RTN","IBCNVRD1",244,0)
 ...I ONEPOL D
"RTN","IBCNVRD1",245,0)
 ....I GNUMB'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUMB'=GNUM1 S GOK=0
"RTN","IBCNVRD1",246,0)
 ....Q
"RTN","IBCNVRD1",247,0)
 ...Q
"RTN","IBCNVRD1",248,0)
 ..; check for Medicare part A/B
"RTN","IBCNVRD1",249,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNVRD1",250,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNVRD1",251,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNVRD1",252,0)
 ...I $P(GDATA,U,14)="A" S MWNRA=IEN312 Q
"RTN","IBCNVRD1",253,0)
 ...I $P(GDATA,U,14)="B" S MWNRB=IEN312 Q
"RTN","IBCNVRD1",254,0)
 ...S GOK=0
"RTN","IBCNVRD1",255,0)
 ...Q
"RTN","IBCNVRD1",256,0)
 ..S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNVRD1",257,0)
 ..S FRESHDT=$$FMADD^XLFDT(DT,-FRESHDAY)
"RTN","IBCNVRD1",258,0)
 ..S RES=1_U_DFN_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNVRD1",259,0)
 ..S $P(RES,U,6)=ISSUB,ERROR=""
"RTN","IBCNVRD1",260,0)
 ..I DATELVER<FRESHDT S $P(RES,U,1)=2,ERROR="Date Verified less than Freshdate" Q
"RTN","IBCNVRD1",261,0)
 ..Q
"RTN","IBCNVRD1",262,0)
 .Q
"RTN","IBCNVRD1",263,0)
 Q RES
"RTN","IBCNVRD1",264,0)
 ;
"RTN","IBCNVRD1",265,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNVRD1",266,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNVRD1",267,0)
 ;
"RTN","IBCNVRD1",268,0)
 ; returns 1 if given policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNVRD1",269,0)
 N RES
"RTN","IBCNVRD1",270,0)
 S RES=0
"RTN","IBCNVRD1",271,0)
 I SUBSCRID'=$P(IDATA7,U,2) G CHK1X  ; Subscriber ID doesn't match   ; compare subscriber ID data at their new locations
"RTN","IBCNVRD1",272,0)
 I DOB'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNVRD1",273,0)
 I '$$NAMECMP^IBCNEHLU(INSNAME,$P(IDATA7,U)) G CHK1X  ; Insured's name doesn't match  ; compare name of insured data at their new locations
"RTN","IBCNVRD1",274,0)
 S RES=1
"RTN","IBCNVRD1",275,0)
CHK1X ;
"RTN","IBCNVRD1",276,0)
 Q RES
"RTN","IBCNVRD1",277,0)
 ;
"RTN","IBCNVRD1",278,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNVRD1",279,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNVRD1",280,0)
 ;
"RTN","IBCNVRD1",281,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNVRD1",282,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNVRD1",283,0)
 S RES=0
"RTN","IBCNVRD1",284,0)
 S IDATA5=$G(^DPT(DFN,.312,IEN312,5))
"RTN","IBCNVRD1",285,0)
 S IENS=DFN_","
"RTN","IBCNVRD1",286,0)
 S ID=SUBSCRID    ; Subscriber ID needs to be retrieved from its new location
"RTN","IBCNVRD1",287,0)
 I ID'=$P(IDATA7,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match ; compare subscriber ID at new locations
"RTN","IBCNVRD1",288,0)
 S DOB=$P(GLOB(SUB,4),IBP,6),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNVRD1",289,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNVRD1",290,0)
 S NAME=$P(GLOB(SUB,1),IBP,1),PNAME=$$GET1^DIQ(2,IENS,.01)   ; get name of insured at its new location
"RTN","IBCNVRD1",291,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA7,U)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match
"RTN","IBCNVRD1",292,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNVRD1",293,0)
 S RES=1
"RTN","IBCNVRD1",294,0)
CHK2X ;
"RTN","IBCNVRD1",295,0)
 Q RES
"RTN","IBCNVRD1",296,0)
 ;
"RTN","IBCNVRD1",297,0)
UPDTPI(DFN,IEN312,ISSUB) ; Update the patient insurance.
"RTN","IBCNVRD1",298,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNVRD1",299,0)
 I ISSUB S DATA(2.312,IENS,7.01)=$P(GLOB(SUB,2),IBP,6) ; name  
"RTN","IBCNVRD1",300,0)
 S DATA(2.312,IENS,3.01)=DOB ; dob
"RTN","IBCNVRD1",301,0)
 S DATA(2.312,IENS,3.05)=$TR(SSN,"-","") ; ssn
"RTN","IBCNVRD1",302,0)
 S DATA(2.312,IENS,6)=$P(GLOB(SUB,2),IBP,2) ; whose insurance
"RTN","IBCNVRD1",303,0)
 S PREL=$P(GLOB(SUB,2),IBP,1)
"RTN","IBCNVRD1",304,0)
 I PREL S DATA(2.312,IENS,4.03)=PREL
"RTN","IBCNVRD1",305,0)
 S DATA(2.312,IENS,16)=$P(GLOB(SUB,2),IBP,5)
"RTN","IBCNVRD1",306,0)
 S DATA(2.312,IENS,1.03)=TSTAMP ; date last verified
"RTN","IBCNVRD1",307,0)
 ; IB*595 - Removed reference to ADUZ, might not be the correct person. Needs to be reviwed before this routine is used by the sites
"RTN","IBCNVRD1",308,0)
 ;S DATA(2.312,IENS,1.04)=ADUZ ; last verified by AUTOUPDATE,IBEIV
"RTN","IBCNVRD1",309,0)
 S DATA(2.312,IENS,1.05)=TSTAMP ; date last edited
"RTN","IBCNVRD1",310,0)
 ;S DATA(2.312,IENS,1.06)=ADUZ ; last edited by
"RTN","IBCNVRD1",311,0)
 S DATA(2.312,IENS,1.09)=IBSOURCE ; source of info = eIV
"RTN","IBCNVRD1",312,0)
 S DATA(2.312,IENS,1.1)=TSTAMP
"RTN","IBCNVRD1",313,0)
 S DATA(2.312,IENS,7.02)=SUBSCRID
"RTN","IBCNVRD1",314,0)
 S DATA(2.312,IENS,.2)=COB
"RTN","IBCNVRD1",315,0)
 S DATA(2.312,IENS,8)=$P(GLOB(SUB,2),IBP,3) ; effective date
"RTN","IBCNVRD1",316,0)
 ;subscriber address
"RTN","IBCNVRD1",317,0)
 S DATA(2.312,IENS,3.06)=$P(GLOB(SUB,3),IBP,9) ; street line 1
"RTN","IBCNVRD1",318,0)
 S DATA(2.312,IENS,3.07)=$P(GLOB(SUB,3),IBP,10) ; street line 2
"RTN","IBCNVRD1",319,0)
 S DATA(2.312,IENS,3.08)=$P(GLOB(SUB,3),IBP,11) ; city
"RTN","IBCNVRD1",320,0)
 S STATE=$P(GLOB(SUB,3),IBP,12)
"RTN","IBCNVRD1",321,0)
 S STATE=$O(^DIC(5,"B",STATE,0))
"RTN","IBCNVRD1",322,0)
 S DATA(2.312,IENS,3.09)=STATE ; state
"RTN","IBCNVRD1",323,0)
 S DATA(2.312,IENS,3.1)=$P(GLOB(SUB,3),IBP,13) ; zip
"RTN","IBCNVRD1",324,0)
 S DATA(2.312,IENS,3.11)=$P(GLOB(SUB,3),IBP,14) ; insured's phone
"RTN","IBCNVRD1",325,0)
 ; IB*2*595/DM Although this section refers to auto update
"RTN","IBCNVRD1",326,0)
 ; it is not really going through eIV therefore, EIV AUTO-UPDATE (#365,.13) is not to be set 
"RTN","IBCNVRD1",327,0)
 ;S DATA(2.312,IENS,4.04)="YES"  ;EIV AUTO-UPDATE
"RTN","IBCNVRD1",328,0)
 ;
"RTN","IBCNVRD1",329,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR("FILE") S LCKERR=1 Q
"RTN","IBCNVRD1",330,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNVRD1",331,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNVRD1",332,0)
 Q
"RTN","IBCNVRD1",333,0)
 ;
"RTN","IBCNVRD1",334,0)
LCKERR(ERR) ; send locking error message
"RTN","IBCNVRD1",335,0)
 S IEN=$O(^XMB(3.8,"B","IB SSVI",IEN))
"RTN","IBCNVRD1",336,0)
 N MSG,XMY
"RTN","IBCNVRD1",337,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from SSVI"
"RTN","IBCNVRD1",338,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNVRD1",339,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNVRD1",340,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNVRD1",341,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNVRD1",342,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNVRD1",343,0)
 S MSG(7)=" "
"RTN","IBCNVRD1",344,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNVRD1",345,0)
 S MSG(9)=" "
"RTN","IBCNVRD1",346,0)
 I ERR="COULD NOT CREATE A NEW BUFFER ENTRY" D
"RTN","IBCNVRD1",347,0)
 .S MSG(1)="ERROR: Unable to File Buffer Entry"
"RTN","IBCNVRD1",348,0)
 .S MSG(3)="Failed to create a new Buffer Entry"
"RTN","IBCNVRD1",349,0)
 .S MSG(8)="The entry could not be filed in the buffer."
"RTN","IBCNVRD1",350,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNVRD1",351,0)
 S $P(GLOB(SUB,5),"|",8)="ERROR: Unable to File Buffer Entry"
"RTN","IBCNVRD1",352,0)
 Q
"RTN","IBCNVRD1",353,0)
 ;
"RTN","IBCNVRD1",354,0)
DONE ; Create pivot entry and file data
"RTN","IBCNVRD1",355,0)
 ;S GLOB(SUB,5)=DFN_"|"_CNTHL7_"|"_INSPTR_"|"_INSPTR1_"|"_STATION_"|"_DSTATION_"|"_RIEN_"|"_ERROR
"RTN","IBCNVRD1",356,0)
 I DFN="" Q
"RTN","IBCNVRD1",357,0)
 S VARPTR=DFN_";DPT("
"RTN","IBCNVRD1",358,0)
 ;
"RTN","IBCNVRD1",359,0)
 D NOW^%DTC S NOWDATE=%
"RTN","IBCNVRD1",360,0)
 S PIVOTNUM=+$$PIVNW^IBCNVPU0(DFN,.NOWDATE,5,VARPTR)
"RTN","IBCNVRD1",361,0)
 ;DETERMINE IB SSVI PIN/HL7 FILE RECORD NUMBER
"RTN","IBCNVRD1",362,0)
 S CNTHL71=0 S CNTHL71=$O(^IBCN(366,"D",PIVOTNUM,CNTHL71))
"RTN","IBCNVRD1",363,0)
 I CNTHL71="" Q
"RTN","IBCNVRD1",364,0)
 ;
"RTN","IBCNVRD1",365,0)
 S SUB=0
"RTN","IBCNVRD1",366,0)
 F  S SUB=$O(GLOB(SUB)) Q:SUB=""  D PIVOT(SUB)
"RTN","IBCNVRD1",367,0)
 ;
"RTN","IBCNVRD1",368,0)
 ;SET COMPLETED/RECEIVED FLAG FOR PIVOT TABLE ENTRY. TO BE USED FOR REPORTING PURPOSES
"RTN","IBCNVRD1",369,0)
 ;
"RTN","IBCNVRD1",370,0)
 D FINAL^IBCNVUT0(CNTHL71)
"RTN","IBCNVRD1",371,0)
 S SSVI(0)="COMPLETED"
"RTN","IBCNVRD1",372,0)
 Q
"RTN","IBCNVRD1",373,0)
 ;
"RTN","IBCNVRD1",374,0)
PIVOT(SUB) ; Setup pivot file
"RTN","IBCNVRD1",375,0)
 ;S GLOB(SUB,5)=DFN_"|"_CNTHL7_"|"_INSPTR_"|"_INSPTR1_"|"_STATION_"|"_DSTATION_"|"_RIEN_"|"_ERROR
"RTN","IBCNVRD1",376,0)
 S INSPTR=$P(GLOB(SUB,5),"|",3)
"RTN","IBCNVRD1",377,0)
 S INSPTR1=$P(GLOB(SUB,5),"|",4)   ;INSURANCE CO PTR TO FILE 36
"RTN","IBCNVRD1",378,0)
 S STATION=$P(GLOB(SUB,5),"|",5)   ;THIS RECEIVING STATION
"RTN","IBCNVRD1",379,0)
 S DSTATION=$P(GLOB(SUB,5),"|",6)  ;SENDING STATION
"RTN","IBCNVRD1",380,0)
 S BUFF=$P(GLOB(SUB,5),"|",7)      ;BUFFER ENTRY
"RTN","IBCNVRD1",381,0)
 S ERROR=$P(GLOB(SUB,5),"|",8)     ;ERROR
"RTN","IBCNVRD1",382,0)
 ;
"RTN","IBCNVRD1",383,0)
 ;STORE RECEIVE FLAG/DATE IN IBCN PIN/HL7 PIVOT TABLE ENTRY
"RTN","IBCNVRD1",384,0)
 ;
"RTN","IBCNVRD1",385,0)
 ;CREATE ONE FIRST ( DO NOT SET REQUIRE TRANSMISSION BITS)
"RTN","IBCNVRD1",386,0)
 ;
"RTN","IBCNVRD1",387,0)
 ;NEXT MAKE INSURANCE MULTIPLE
"RTN","IBCNVRD1",388,0)
 ;FIND INSPTR2 RECORD # PTR TO FILE 36
"RTN","IBCNVRD1",389,0)
 S INSPTR2=SUB ;INSURANCE .312 PTR
"RTN","IBCNVRD1",390,0)
 ;
"RTN","IBCNVRD1",391,0)
 D INSMUL^IBCNVUT0(CNTHL71,INSPTR2)
"RTN","IBCNVRD1",392,0)
 ;
"RTN","IBCNVRD1",393,0)
 ;NEXT WRITE INSURANCE/SENDING STATION MULTIPLE ENTRY
"RTN","IBCNVRD1",394,0)
 D TREATSIT^IBCNVUT0(CNTHL71,INSPTR2,DSTATION)
"RTN","IBCNVRD1",395,0)
 ;
"RTN","IBCNVRD1",396,0)
 ;NEXT SET RECEIVED FLAG AND "RECEIVE DATE" INTO EXISTING STATION 
"RTN","IBCNVRD1",397,0)
 D NOW^%DTC S RECDDAT=%
"RTN","IBCNVRD1",398,0)
 D TREATRED^IBCNVUT0(CNTHL71,INSPTR2,DSTATION,RECDDAT,BUFF,ERROR)  ;SET RECEIVED DATE
"RTN","IBCNVRD1",399,0)
 Q
"RTN","IBCNVRD1",400,0)
 ;
"RTN","IBCNVRD1",401,0)
STUB ; CREATE STUB FOR AUTO UPDATED ENTRIES.
"RTN","IBCNVRD1",402,0)
 S IBP="|"
"RTN","IBCNVRD1",403,0)
 ; IB*595 Removed AUDUZ and referances below.
"RTN","IBCNVRD1",404,0)
 ;S AUDUZ=$$FIND1^DIC(200,"","X","AUTOUPDATE,IBEIV")
"RTN","IBCNVRD1",405,0)
 ;S IDUZ=$$FIND1^DIC(200,"","X","POSTMASTER")
"RTN","IBCNVRD1",406,0)
 ; BE SURE DEFINED RIEN (INSURANCE BUFFER ENTRY)
"RTN","IBCNVRD1",407,0)
 ;
"RTN","IBCNVRD1",408,0)
 S RIEN=""
"RTN","IBCNVRD1",409,0)
 S RIEN=+$$ADD^IBCNBEE(IBSOURCE)
"RTN","IBCNVRD1",410,0)
 I 'RIEN D  Q
"RTN","IBCNVRD1",411,0)
 .S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY"
"RTN","IBCNVRD1",412,0)
 .S $P(GLOB(SUB,5),"|",8)=IBERROR
"RTN","IBCNVRD1",413,0)
 D NOW^%DTC S TSTAMP=%
"RTN","IBCNVRD1",414,0)
 ;
"RTN","IBCNVRD1",415,0)
 S RSUPDT(355.33,RIEN_",",.01)=TSTAMP  ; DATE ENTERED
"RTN","IBCNVRD1",416,0)
 S RSUPDT(355.33,RIEN_",",.02)=IDUZ  ; ENTERED BY
"RTN","IBCNVRD1",417,0)
 S RSUPDT(355.33,RIEN_",",.03)=IBSOURCE  ; SOURCE OF INFORMATION
"RTN","IBCNVRD1",418,0)
 S RSUPDT(355.33,RIEN_",",.04)="A"  ; STATUS
"RTN","IBCNVRD1",419,0)
 S RSUPDT(355.33,RIEN_",",.05)=TSTAMP  ; DATE PROCESSED
"RTN","IBCNVRD1",420,0)
 ;S RSUPDT(355.33,RIEN_",",.06)=AUDUZ  ; PROCESSED BY
"RTN","IBCNVRD1",421,0)
 S RSUPDT(355.33,RIEN_",",.1)=TSTAMP  ; DATE VERIFIED
"RTN","IBCNVRD1",422,0)
 ;S RSUPDT(355.33,RIEN_",",.11)=AUDUZ  ; VERIFIED BY
"RTN","IBCNVRD1",423,0)
 S RSUPDT(355.33,RIEN_",",.12)="*"  ; eIV STATUS
"RTN","IBCNVRD1",424,0)
 S RSUPDT(355.33,RIEN_",",.14)=OSTATION  ; REMOTE LOCATION
"RTN","IBCNVRD1",425,0)
 ;
"RTN","IBCNVRD1",426,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNVRD1",427,0)
 I $G(ERROR)'="" S $P(GLOB(SUB,5),"|",8)=ERROR
"RTN","IBCNVRD1",428,0)
 ;
"RTN","IBCNVRD1",429,0)
 Q 
"RTN","IBY595PO")
0^^B6003457^n/a
"RTN","IBY595PO",1,0)
IBY595PO ;EDE/DM - Post-Installation for IB patch 595 ; 01-APR-2018
"RTN","IBY595PO",2,0)
 ;;2.0;INTEGRATED BILLING;**595**;21-MAR-94;Build 29
"RTN","IBY595PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY595PO",4,0)
 ;
"RTN","IBY595PO",5,0)
POST ; POST ROUTINE(S)
"RTN","IBY595PO",6,0)
 N IBXPD,XPDIDTOT
"RTN","IBY595PO",7,0)
 S XPDIDTOT=2
"RTN","IBY595PO",8,0)
 ;
"RTN","IBY595PO",9,0)
 ; Add new Source of Information
"RTN","IBY595PO",10,0)
 D ADDSOI(1)
"RTN","IBY595PO",11,0)
 ;
"RTN","IBY595PO",12,0)
 ; Make sure the "AUTOUPDATE,IBEIV" PERSON exists
"RTN","IBY595PO",13,0)
 D CHKAU(2)
"RTN","IBY595PO",14,0)
 ;
"RTN","IBY595PO",15,0)
 D MES^XPDUTL("")
"RTN","IBY595PO",16,0)
 D MES^XPDUTL("POST-Install Completed.")
"RTN","IBY595PO",17,0)
 Q
"RTN","IBY595PO",18,0)
 ;
"RTN","IBY595PO",19,0)
ADDSOI(IBXPD) ; Add new Source of Information.
"RTN","IBY595PO",20,0)
 N IBLN,IBPCE,IBDATA,IBERR,IBIEN,IBSTR
"RTN","IBY595PO",21,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY595PO",22,0)
 D MES^XPDUTL("-------------")
"RTN","IBY595PO",23,0)
 D MES^XPDUTL("Adding new Source of Information Codes ... ")
"RTN","IBY595PO",24,0)
 F IBLN=2:1 S IBSTR=$P($T(EN35512+IBLN),";;",2) Q:IBSTR=""  D
"RTN","IBY595PO",25,0)
 . F IBPCE=1:1:3 S IBDATA(IBPCE/100)=$P(IBSTR,U,IBPCE)
"RTN","IBY595PO",26,0)
 . I $D(^IBE(355.12,"C",IBDATA(.02))) D  Q
"RTN","IBY595PO",27,0)
 .. D MES^XPDUTL("  "_IBDATA(.02)_" ALEADY EXISTS IN THE SOURCE OF INFORMATION TABLE (#355.12)") Q
"RTN","IBY595PO",28,0)
 . S IBIEN=$$ADD^IBDFDBS(355.12,,.IBDATA,.IBERR)
"RTN","IBY595PO",29,0)
 . I IBERR D  Q
"RTN","IBY595PO",30,0)
 .. D BMES^XPDUTL("*** ERROR ADDING "_IBDATA(.02)_" CODE TO THE SOURCE OF INFORMATION TABLE (#355.12) ***")
"RTN","IBY595PO",31,0)
 . D BMES^XPDUTL("  "_$$GET1^DIQ(355.12,IBIEN_",",.02)_" CODE ADDED TO THE SOURCE OF INFORMATION TABLE (#355.12)")
"RTN","IBY595PO",32,0)
 D MES^XPDUTL("STEP "_IBXPD_" of "_XPDIDTOT_" COMPLETE")
"RTN","IBY595PO",33,0)
 Q
"RTN","IBY595PO",34,0)
 ;
"RTN","IBY595PO",35,0)
CHKAU(IBXPD) ; Make sure the "AUTOUPDATE,IBEIV" PERSON exists in #200
"RTN","IBY595PO",36,0)
 N IEN200,IBAUNAME
"RTN","IBY595PO",37,0)
 S IBAUNAME="AUTOUPDATE,IBEIV"
"RTN","IBY595PO",38,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY595PO",39,0)
 D MES^XPDUTL("-------------")
"RTN","IBY595PO",40,0)
 D MES^XPDUTL("Checking for "_IBAUNAME_" in the New Person file (#200) ... ")
"RTN","IBY595PO",41,0)
 ; Supported by IA#4677.
"RTN","IBY595PO",42,0)
 S IEN200=$$CREATE^XUSAP(IBAUNAME,"")
"RTN","IBY595PO",43,0)
 I +IEN200=0 D MES^XPDUTL("  "_IBAUNAME_" exists.")
"RTN","IBY595PO",44,0)
 I +IEN200>0 D MES^XPDUTL("  "_IBAUNAME_" added.")
"RTN","IBY595PO",45,0)
 I IEN200<0 D MES^XPDUTL("*(ERROR) "_IBAUNAME_" NOT added.")
"RTN","IBY595PO",46,0)
 D MES^XPDUTL("STEP "_IBXPD_" of "_XPDIDTOT_" COMPLETE")
"RTN","IBY595PO",47,0)
 Q
"RTN","IBY595PO",48,0)
 ;
"RTN","IBY595PO",49,0)
EN35512  ; Add Source of Information Codes
"RTN","IBY595PO",50,0)
 ;
"RTN","IBY595PO",51,0)
 ;;20^MYVA HEALTH JOURNAL^MVAH
"VER")
8.0^22.2
"^DD",365,365,.02,0)
PATIENT^P2'^DPT(^0;2^Q
"^DD",365,365,.02,3)
Selected patient
"^DD",365,365,.02,21,0)
^^1^1^3020607^
"^DD",365,365,.02,21,1,0)
This the patient who was identified on the outgoing HL7 message.
"^DD",365,365,.02,"DT")
3170821
"^DD",365,365,.03,0)
PAYER^P365.12'^IBE(365.12,^0;3^Q
"^DD",365,365,.03,3)
Selected payer
"^DD",365,365,.03,21,0)
^^2^2^3020607^
"^DD",365,365,.03,21,1,0)
This is the payer that was selected for either identification or
"^DD",365,365,.03,21,2,0)
verification.
"^DD",365,365,.03,"DT")
3170821
"^DD",365,365,.07,0)
DATE/TIME RECEIVED^D^^0;7^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365,365,.07,.1)
Response Date
"^DD",365,365,.07,21,0)
^^2^2^3020607^
"^DD",365,365,.07,21,1,0)
This is the date and time that the HL7 response was received
"^DD",365,365,.07,21,2,0)
from the payer via the Eligibility Communicator.
"^DD",365,365,.07,"DT")
3170821
"^DD",365,365,.12,0)
INSUR RECORD IEN^NJ3,0^^0;12^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",365,365,.12,3)
Type a number between 1 and 999, 0 decimal digits.
"^DD",365,365,.12,21,0)
^^4^4^3170816^
"^DD",365,365,.12,21,1,0)
This field is the IEN of the insurance type
"^DD",365,365,.12,21,2,0)
record (2.312) which the code has determined
"^DD",365,365,.12,21,3,0)
is associated with this payer response. The field
"^DD",365,365,.12,21,4,0)
is used to facilitate various auto-update reporting
"^DD",365,365,.12,23,0)
^^2^2^3170816^
"^DD",365,365,.12,23,1,0)
This field is set by incoming RPI messages and
"^DD",365,365,.12,23,2,0)
accept/reject buffer processing for eIV
"^DD",365,365,.12,"DT")
3170821
"^DD",365,365,.13,0)
EIV AUTO-UPDATE^S^0:NO;1:YES;^0;13^Q
"^DD",365,365,.13,3)
Set to "YES" to indicate that this response resulted in an auto-update of the patient policy
"^DD",365,365,.13,21,0)
^^6^6^3170816^
"^DD",365,365,.13,21,1,0)
Flag that determines whether this response
"^DD",365,365,.13,21,2,0)
successfully resulted in an auto-update of
"^DD",365,365,.13,21,3,0)
the patient policy. A value of 1, "YES" means 
"^DD",365,365,.13,21,4,0)
this response did auto-update the policy. A value
"^DD",365,365,.13,21,5,0)
of 0, "NO" indicates that the policy was not 
"^DD",365,365,.13,21,6,0)
auto-updated by this response. 
"^DD",365,365,.13,23,0)
^.001^1^1^3170816^^
"^DD",365,365,.13,23,1,0)
This flag is set by the incoming RPI message processing code
"^DD",365,365,.13,"DT")
3170821
"BLD",10795,6)
^565
**END**
**END**

