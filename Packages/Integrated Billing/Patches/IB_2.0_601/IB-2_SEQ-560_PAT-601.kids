Released IB*2*601 SEQ #560
Extracted from mail message
**KIDS**:IB*2.0*601^

**INSTALL NAME**
IB*2.0*601
"BLD",10714,0)
IB*2.0*601^INTEGRATED BILLING^0^3180201^y
"BLD",10714,4,0)
^9.64PA^365.1^3
"BLD",10714,4,350.9,0)
350.9
"BLD",10714,4,350.9,2,0)
^9.641^350.9^1
"BLD",10714,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",10714,4,350.9,2,350.9,1,0)
^9.6411^51.3^1
"BLD",10714,4,350.9,2,350.9,1,51.3,0)
MBI PAYER
"BLD",10714,4,350.9,222)
y^n^p^^^^n^^n
"BLD",10714,4,350.9,224)

"BLD",10714,4,365.1,0)
365.1
"BLD",10714,4,365.1,2,0)
^9.641^365.1^1
"BLD",10714,4,365.1,2,365.1,0)
IIV TRANSMISSION QUEUE  (File-top level)
"BLD",10714,4,365.1,2,365.1,1,0)
^9.6411^3.02^1
"BLD",10714,4,365.1,2,365.1,1,3.02,0)
SOURCE OF INFORMATION
"BLD",10714,4,365.1,222)
y^n^p^^^^n^^n
"BLD",10714,4,365.1,224)

"BLD",10714,4,365.15,0)
365.15
"BLD",10714,4,365.15,222)
n^n^f^^n^^y^o^n
"BLD",10714,4,"APDD",350.9,350.9)

"BLD",10714,4,"APDD",350.9,350.9,51.3)

"BLD",10714,4,"APDD",365.1,365.1)

"BLD",10714,4,"APDD",365.1,365.1,3.02)

"BLD",10714,4,"B",350.9,350.9)

"BLD",10714,4,"B",365.1,365.1)

"BLD",10714,4,"B",365.15,365.15)

"BLD",10714,6)
4^
"BLD",10714,6.3)
14
"BLD",10714,"INID")
^n
"BLD",10714,"INIT")
POST^IBY601PO
"BLD",10714,"KRN",0)
^9.67PA^779.2^20
"BLD",10714,"KRN",.4,0)
.4
"BLD",10714,"KRN",.401,0)
.401
"BLD",10714,"KRN",.402,0)
.402
"BLD",10714,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",10714,"KRN",.402,"NM",1,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",10714,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",1)

"BLD",10714,"KRN",.403,0)
.403
"BLD",10714,"KRN",.5,0)
.5
"BLD",10714,"KRN",.84,0)
.84
"BLD",10714,"KRN",3.6,0)
3.6
"BLD",10714,"KRN",3.8,0)
3.8
"BLD",10714,"KRN",9.2,0)
9.2
"BLD",10714,"KRN",9.8,0)
9.8
"BLD",10714,"KRN",9.8,"NM",0)
^9.68A^25^25
"BLD",10714,"KRN",9.8,"NM",1,0)
IBCNBLE1^^0^B41302582
"BLD",10714,"KRN",9.8,"NM",2,0)
IBCNEDEP^^0^B94374860
"BLD",10714,"KRN",9.8,"NM",3,0)
IBCNEHL1^^0^B155699201
"BLD",10714,"KRN",9.8,"NM",4,0)
IBCNEHL6^^0^B6767366
"BLD",10714,"KRN",9.8,"NM",5,0)
IBCNEHLM^^0^B23949973
"BLD",10714,"KRN",9.8,"NM",6,0)
IBCNEHLQ^^0^B60954828
"BLD",10714,"KRN",9.8,"NM",7,0)
IBCNEPM^^0^B15040845
"BLD",10714,"KRN",9.8,"NM",8,0)
IBCNEQU^^0^B176017271
"BLD",10714,"KRN",9.8,"NM",9,0)
IBCNERTQ^^0^B48024033
"BLD",10714,"KRN",9.8,"NM",10,0)
IBCNETST^^0^B33658501
"BLD",10714,"KRN",9.8,"NM",11,0)
IBCNEUT3^^0^B57983863
"BLD",10714,"KRN",9.8,"NM",12,0)
IBCNEUT4^^0^B51389763
"BLD",10714,"KRN",9.8,"NM",13,0)
IBCNEUT7^^0^B37109575
"BLD",10714,"KRN",9.8,"NM",14,0)
IBJPI^^0^B43418759
"BLD",10714,"KRN",9.8,"NM",15,0)
IBY601PO^^0^B4376494
"BLD",10714,"KRN",9.8,"NM",16,0)
IBCNSMM^^0^B21854403
"BLD",10714,"KRN",9.8,"NM",17,0)
IBCNBLA^^0^B69810751
"BLD",10714,"KRN",9.8,"NM",18,0)
IBCNBLL^^0^B148784052
"BLD",10714,"KRN",9.8,"NM",19,0)
IBCNEHLI^^0^B8125280
"BLD",10714,"KRN",9.8,"NM",20,0)
IBCNEHLK^^0^B5561054
"BLD",10714,"KRN",9.8,"NM",21,0)
IBCNEUT1^^0^B44735114
"BLD",10714,"KRN",9.8,"NM",22,0)
IBCNEHLT^^0^B94982650
"BLD",10714,"KRN",9.8,"NM",23,0)
IBCNEDE1^^0^B50422313
"BLD",10714,"KRN",9.8,"NM",24,0)
IBCNEDE7^^0^B28965288
"BLD",10714,"KRN",9.8,"NM",25,0)
IBCNEDEQ^^0^B29176147
"BLD",10714,"KRN",9.8,"NM","B","IBCNBLA",17)

"BLD",10714,"KRN",9.8,"NM","B","IBCNBLE1",1)

"BLD",10714,"KRN",9.8,"NM","B","IBCNBLL",18)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEDE1",23)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEDE7",24)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEDEP",2)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEDEQ",25)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHL1",3)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHL6",4)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHLI",19)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHLK",20)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHLM",5)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHLQ",6)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEHLT",22)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEPM",7)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEQU",8)

"BLD",10714,"KRN",9.8,"NM","B","IBCNERTQ",9)

"BLD",10714,"KRN",9.8,"NM","B","IBCNETST",10)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEUT1",21)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEUT3",11)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEUT4",12)

"BLD",10714,"KRN",9.8,"NM","B","IBCNEUT7",13)

"BLD",10714,"KRN",9.8,"NM","B","IBCNSMM",16)

"BLD",10714,"KRN",9.8,"NM","B","IBJPI",14)

"BLD",10714,"KRN",9.8,"NM","B","IBY601PO",15)

"BLD",10714,"KRN",19,0)
19
"BLD",10714,"KRN",19.1,0)
19.1
"BLD",10714,"KRN",101,0)
101
"BLD",10714,"KRN",101,"NM",0)
^9.68A^4^4
"BLD",10714,"KRN",101,"NM",1,0)
IBCNE REVERIFY INSURANCE MENU^^0
"BLD",10714,"KRN",101,"NM",2,0)
IBCNE FAST EXIT^^4^
"BLD",10714,"KRN",101,"NM",3,0)
IBCNE MBI REQUEST^^0^
"BLD",10714,"KRN",101,"NM",4,0)
IBCNE SELECT INSURANCE^^4^
"BLD",10714,"KRN",101,"NM","B","IBCNE FAST EXIT",2)

"BLD",10714,"KRN",101,"NM","B","IBCNE MBI REQUEST",3)

"BLD",10714,"KRN",101,"NM","B","IBCNE REVERIFY INSURANCE MENU",1)

"BLD",10714,"KRN",101,"NM","B","IBCNE SELECT INSURANCE",4)

"BLD",10714,"KRN",409.61,0)
409.61
"BLD",10714,"KRN",771,0)
771
"BLD",10714,"KRN",779.2,0)
779.2
"BLD",10714,"KRN",870,0)
870
"BLD",10714,"KRN",8989.51,0)
8989.51
"BLD",10714,"KRN",8989.52,0)
8989.52
"BLD",10714,"KRN",8994,0)
8994
"BLD",10714,"KRN","B",.4,.4)

"BLD",10714,"KRN","B",.401,.401)

"BLD",10714,"KRN","B",.402,.402)

"BLD",10714,"KRN","B",.403,.403)

"BLD",10714,"KRN","B",.5,.5)

"BLD",10714,"KRN","B",.84,.84)

"BLD",10714,"KRN","B",3.6,3.6)

"BLD",10714,"KRN","B",3.8,3.8)

"BLD",10714,"KRN","B",9.2,9.2)

"BLD",10714,"KRN","B",9.8,9.8)

"BLD",10714,"KRN","B",19,19)

"BLD",10714,"KRN","B",19.1,19.1)

"BLD",10714,"KRN","B",101,101)

"BLD",10714,"KRN","B",409.61,409.61)

"BLD",10714,"KRN","B",771,771)

"BLD",10714,"KRN","B",779.2,779.2)

"BLD",10714,"KRN","B",870,870)

"BLD",10714,"KRN","B",8989.51,8989.51)

"BLD",10714,"KRN","B",8989.52,8989.52)

"BLD",10714,"KRN","B",8994,8994)

"BLD",10714,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",10714,"QUES",0)
^9.62^^
"BLD",10714,"REQB",0)
^9.611^3^3
"BLD",10714,"REQB",1,0)
IB*2.0*593^1
"BLD",10714,"REQB",2,0)
IB*2.0*516^1
"BLD",10714,"REQB",3,0)
IB*2.0*550^1
"BLD",10714,"REQB","B","IB*2.0*516",2)

"BLD",10714,"REQB","B","IB*2.0*550",3)

"BLD",10714,"REQB","B","IB*2.0*593",1)

"DATA",365.15,1,0)
B1^33^1
"DATA",365.15,1,1,0)
^^3^3^3091007^
"DATA",365.15,1,1,1,0)
eIV could not create an inquiry for this entry.  eIV could not match the
"DATA",365.15,1,1,2,0)
insurance company name in the Insurance Buffer file (#355.33) to a valid
"DATA",365.15,1,1,3,0)
insurance company name in the Insurance Company file (#36).
"DATA",365.15,1,2,0)
^^4^4^3091007^
"DATA",365.15,1,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,1,2,2,0)
in the buffer so that it matches one found in the Insurance Company file (#36).
"DATA",365.15,1,2,3,0)
Otherwise, contact the insurance company to manually verify this insurance
"DATA",365.15,1,2,4,0)
information.
"DATA",365.15,2,0)
B2^33^1
"DATA",365.15,2,1,0)
^^5^5^3091007^
"DATA",365.15,2,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,2,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one
"DATA",365.15,2,1,3,0)
uniquely named insurance company in the Insurance Company file (#36). This
"DATA",365.15,2,1,4,0)
indicates that the Auto Match check or the Synonym check yielded multiple
"DATA",365.15,2,1,5,0)
insurance companies from the Insurance Company file.
"DATA",365.15,2,2,0)
^^7^7^3091007^
"DATA",365.15,2,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,2,2,2,0)
in the buffer so that it matches one found in the Insurance Company file
"DATA",365.15,2,2,3,0)
(#36). Otherwise, contact the insurance company to manually verify this
"DATA",365.15,2,2,4,0)
insurance information. (* Advanced users: Use the option "Enter/Edit Auto
"DATA",365.15,2,2,5,0)
Match Entries" to check the entries in the Auto Match file (#365.11). Make
"DATA",365.15,2,2,6,0)
sure there is no more than one entry in the Auto Match file, if any, which
"DATA",365.15,2,2,7,0)
corresponds to the insurance company name found in this buffer entry.)
"DATA",365.15,3,0)
B3^33^1
"DATA",365.15,3,1,0)
^^4^4^3091007^
"DATA",365.15,3,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,3,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one insurance
"DATA",365.15,3,1,3,0)
company entry with the same name in the Insurance Company file (#36).  At least
"DATA",365.15,3,1,4,0)
one of these matching entries are linked to a different payer.
"DATA",365.15,3,2,0)
^^6^6^3091007^
"DATA",365.15,3,2,1,0)
Action to take:  Run the "eIV Payer Link Report" option by Insurance
"DATA",365.15,3,2,2,0)
Company List, for all linked insurance companies, using the keyword
"DATA",365.15,3,2,3,0)
feature to narrow down the search.  This will provide a report showing
"DATA",365.15,3,2,4,0)
which payer the different insurance company records are linked to.  Next,
"DATA",365.15,3,2,5,0)
use the "Insurance Company Entry/Edit" option to correct those insurance
"DATA",365.15,3,2,6,0)
companies who are linked to the wrong payer.
"DATA",365.15,4,0)
B4^33^1
"DATA",365.15,4,1,0)
^^6^6^3091007^
"DATA",365.15,4,1,1,0)
eIV could not create an inquiry for this entry. There is no link for this
"DATA",365.15,4,1,2,0)
insurance company between the Insurance Company file (#36) and the Payer
"DATA",365.15,4,1,3,0)
file (#365.12). This may occur because the insurance staff did not attempt
"DATA",365.15,4,1,4,0)
to manually link the named insurance company to the payer list or the
"DATA",365.15,4,1,5,0)
insurance staff did not find a payer in the payer list that they wanted to
"DATA",365.15,4,1,6,0)
link this insurance company to.
"DATA",365.15,4,2,0)
^^9^9^3091007^
"DATA",365.15,4,2,1,0)
Action to take:  Either contact the insurance company to manually verify
"DATA",365.15,4,2,2,0)
this insurance information or link the insurance company to a payer.
"DATA",365.15,4,2,3,0)
Steps to link an insurance company to a payer are as follows: run the
"DATA",365.15,4,2,4,0)
"eIV Payer Link Report" option by Insurance Company List, for all
"DATA",365.15,4,2,5,0)
unlinked insurance companies.  Use the keyword feature when running the
"DATA",365.15,4,2,6,0)
report to narrow down the search.  This will provide a report showing
"DATA",365.15,4,2,7,0)
which insurance companies are not linked to a payer.  Next, use the
"DATA",365.15,4,2,8,0)
"Insurance Company Entry/Edit" option to link those insurance companies
"DATA",365.15,4,2,9,0)
to the correct payer.
"DATA",365.15,5,0)
B5^33^1
"DATA",365.15,5,1,0)
^^2^2^3091007^
"DATA",365.15,5,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not
"DATA",365.15,5,1,2,0)
nationally active for eIV.
"DATA",365.15,5,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,5,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,5,2,2,0)
insurance information.
"DATA",365.15,6,0)
B6^33^1
"DATA",365.15,6,1,0)
^^2^2^3091007^
"DATA",365.15,6,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not locally
"DATA",365.15,6,1,2,0)
active for eIV.
"DATA",365.15,6,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,6,2,1,0)
Action to take:  Either use the option "Payer Edit (Activate/Inactivate)"
"DATA",365.15,6,2,2,0)
to locally activate this payer or contact the insurance company to
"DATA",365.15,6,2,3,0)
manually verify this insurance information.
"DATA",365.15,7,0)
B7^33^1
"DATA",365.15,7,1,0)
^^3^3^3091007^
"DATA",365.15,7,1,1,0)
eIV could not create an inquiry for this entry.  The payer does not accept
"DATA",365.15,7,1,2,0)
electronic insurance eligibility requests.  The eIV application data does
"DATA",365.15,7,1,3,0)
not exist in the Payer file (#365.12) for this payer.
"DATA",365.15,7,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,7,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,7,2,2,0)
insurance information.
"DATA",365.15,8,0)
A1^43^0
"DATA",365.15,8,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,8,1,1,0)
Information received via electronic inquiry indicates patient has active
"DATA",365.15,8,1,2,0)
insurance.
"DATA",365.15,8,2,0)
^365.17^2^2^3091007^^
"DATA",365.15,8,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,8,2,2,0)
before processing this buffer entry.
"DATA",365.15,9,0)
D1^45^0
"DATA",365.15,9,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,9,1,1,0)
Information received via electronic inquiry indicates patient does NOT
"DATA",365.15,9,1,2,0)
have active insurance.
"DATA",365.15,9,2,0)
^^2^2^3091007^
"DATA",365.15,9,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,9,2,2,0)
before processing this buffer entry.
"DATA",365.15,10,0)
Q1^63^0
"DATA",365.15,10,1,0)
^^3^3^3091007^
"DATA",365.15,10,1,1,0)
This buffer entry is currently still being processed by the eIV
"DATA",365.15,10,1,2,0)
application. Unless instructed otherwise, there is no reason you
"DATA",365.15,10,1,3,0)
should do anything with this buffer entry.
"DATA",365.15,10,2,0)
^365.17^1^1^3091007^^^^
"DATA",365.15,10,2,1,0)
Action to take: None.
"DATA",365.15,11,0)
B8^33^0
"DATA",365.15,11,1,0)
^365.152^2^2^3111118^^^^
"DATA",365.15,11,1,1,0)
The electronic response indicated an error of some kind that needs to be
"DATA",365.15,11,1,2,0)
corrected before the insurance inquiry can be re-transmitted.
"DATA",365.15,11,2,0)
^365.17^2^2^3111118^^^^
"DATA",365.15,11,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,11,2,2,0)
insurance information.
"DATA",365.15,12,0)
B9^33^1
"DATA",365.15,12,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,12,1,1,0)
An unknown and unforeseen error has occurred with this entry.
"DATA",365.15,12,2,0)
^^2^2^3091007^
"DATA",365.15,12,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,12,2,2,0)
number if available.
"DATA",365.15,13,0)
B10^33^1
"DATA",365.15,13,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,13,1,1,0)
eIV could not create an inquiry for this entry.  The insurance
"DATA",365.15,13,1,2,0)
company found is listed as inactive in the Insurance Company file (#36).
"DATA",365.15,13,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,13,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,13,2,2,0)
insurance information.
"DATA",365.15,14,0)
B11^33^1
"DATA",365.15,14,1,0)
^^2^2^3091007^
"DATA",365.15,14,1,1,0)
eIV could not create an inquiry for this entry.  eIV cannot send inquiries
"DATA",365.15,14,1,2,0)
to Medicaid.
"DATA",365.15,14,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,14,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,14,2,2,0)
insurance information.
"DATA",365.15,15,0)
B12^33^0
"DATA",365.15,15,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,15,1,1,0)
eIV was unable to electronically verify this insurance information due to
"DATA",365.15,15,1,2,0)
a communication failure.
"DATA",365.15,15,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,15,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,15,2,2,0)
insurance information.
"DATA",365.15,16,0)
B13^33^1
"DATA",365.15,16,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,16,1,1,0)
The insurance company name for this buffer entry is blank.
"DATA",365.15,16,2,0)
^^2^2^3091007^
"DATA",365.15,16,2,1,0)
Action to take:  Please call the Help Desk and provide them with buffer 
"DATA",365.15,16,2,2,0)
information and trace number, if available.
"DATA",365.15,17,0)
B14^33^1
"DATA",365.15,17,1,0)
^^2^2^3091007^
"DATA",365.15,17,1,1,0)
eIV could not create an inquiry for this entry.  The payer associated with
"DATA",365.15,17,1,2,0)
this insurance company has been deactivated.
"DATA",365.15,17,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,17,2,1,0)
Action to take:  Either edit this insurance company and link it to another
"DATA",365.15,17,2,2,0)
payer, using the "Insurance Company Entry/Edit" option; otherwise, contact
"DATA",365.15,17,2,3,0)
the insurance company to manually verify this insurance information.
"DATA",365.15,18,0)
B15^33^1
"DATA",365.15,18,1,0)
^^3^3^3111118^
"DATA",365.15,18,1,1,0)
eIV could not create an inquiry for this entry. This inquiry requires the 
"DATA",365.15,18,1,2,0)
Subscriber ID field to be populated before an inquiry can be transmitted 
"DATA",365.15,18,1,3,0)
electronically.
"DATA",365.15,18,2,0)
^^3^3^3111118^
"DATA",365.15,18,2,1,0)
Action to take: Update the inquiry with the missing Subscriber ID or 
"DATA",365.15,18,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,18,2,3,0)
information.
"DATA",365.15,21,0)
U1^35^0
"DATA",365.15,21,1,0)
^365.152^4^4^3091007^^^^
"DATA",365.15,21,1,1,0)
An ambiguous response has been received.  It could NOT be determined 
"DATA",365.15,21,1,2,0)
whether the insurance company identified the patient as an active member 
"DATA",365.15,21,1,3,0)
of the insurance plan.  Please contact the insurance company to manually 
"DATA",365.15,21,1,4,0)
verify this insurance information.
"DATA",365.15,21,2,0)
^^3^3^3091007^
"DATA",365.15,21,2,1,0)
Action to take:  Review the details listed in the eIV Response Report and
"DATA",365.15,21,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,21,2,3,0)
information.
"DATA",365.15,22,0)
U2^35^0
"DATA",365.15,22,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,22,1,1,0)
While processing a payer response, an unknown and unforeseen error has 
"DATA",365.15,22,1,2,0)
occurred with this entry.
"DATA",365.15,22,2,0)
^^6^6^3091007^
"DATA",365.15,22,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,22,2,2,0)
number if available. A user may process this buffer entry if a Help Desk 
"DATA",365.15,22,2,3,0)
call has been logged with the associated trace number. To process this
"DATA",365.15,22,2,4,0)
buffer entry, review the details listed in the eIV Response Report and
"DATA",365.15,22,2,5,0)
contact the insurance company to manually verify this insurance
"DATA",365.15,22,2,6,0)
information.
"DATA",365.15,23,0)
B16^33^1
"DATA",365.15,23,1,0)
^^3^3^3111118^
"DATA",365.15,23,1,1,0)
eIV could not create an inquiry for this entry. This dependant inquiry 
"DATA",365.15,23,1,2,0)
requires the Patient ID field to be populated before an inquiry can be 
"DATA",365.15,23,1,3,0)
transmitted electronically.
"DATA",365.15,23,2,0)
^^3^3^3111118^
"DATA",365.15,23,2,1,0)
Action to take:  Update the inquiry with the missing Patient ID or 
"DATA",365.15,23,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,23,2,3,0)
information.
"DATA",365.15,24,0)
C1^35^0
"DATA",365.15,24,1,0)
^^2^2^3140818
"DATA",365.15,24,1,1,0)
eIV was unable to electronically verify this insurance information
"DATA",365.15,24,1,2,0)
due to a communication failure.
"DATA",365.15,24,2,0)
^^2^2^3140818
"DATA",365.15,24,2,1,0)
Action to take:  Contact the insurance company to manually verify
"DATA",365.15,24,2,2,0)
this insurance information.
"DATA",365.15,25,0)
E1^36^0
"DATA",365.15,25,1,0)
^^3^3^3140818
"DATA",365.15,25,1,1,0)
Information received via electronic inquiry indicates patient has active
"DATA",365.15,25,1,2,0)
insurance; however, another verifier did not have the authority to
"DATA",365.15,25,1,3,0)
process this entry.
"DATA",365.15,25,2,0)
^^2^2^3140818
"DATA",365.15,25,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,25,2,2,0)
before processing this buffer entry.
"DATA",365.15,26,0)
M1^37^0
"DATA",365.15,26,1,0)
^^2^2^3171128^
"DATA",365.15,26,1,1,0)
A response was received from CMS that contains the patient's new MBI 
"DATA",365.15,26,1,2,0)
value.
"DATA",365.15,26,2,0)
^^6^6^3171128^
"DATA",365.15,26,2,1,0)
Action to take: Review the subscriber ID field to obtain the MBI to save 
"DATA",365.15,26,2,2,0)
into the patient's Medicare policies.  Users should create a new entry to
"DATA",365.15,26,2,3,0)
obtain the patient's full eligibility & benefits by placing the MBI in 
"DATA",365.15,26,2,4,0)
the subscriber ID field.  Note: MBI is only valid on Medicare Part A, 
"DATA",365.15,26,2,5,0)
Part B and Part D policies.  Medicare Replacements will not carry an MBI 
"DATA",365.15,26,2,6,0)
number.
"DATA",365.15,27,0)
U3^35^0
"DATA",365.15,27,1,0)
^^3^3^3171128^
"DATA",365.15,27,1,1,0)
MBI response received.  CMS did not recognize the patient or 
"DATA",365.15,27,1,2,0)
recognized the patient but the card with the MBI value has not yet been
"DATA",365.15,27,1,3,0)
mailed to the patient.
"DATA",365.15,27,2,0)
^365.17^1^1^3171128^^
"DATA",365.15,27,2,1,0)
Action to take: None. Please read below for further detail.
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.3)

"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^n^p^^^^n^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
1
"FIA",365.1,365.1,3.02)

"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
n^n^f^^n^^y^o^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
0
"FIA",365.15,365.152)
0
"FIA",365.15,365.17)
0
"INIT")
POST^IBY601PO
"KRN",.402,1838,-1)
0^1
"KRN",.402,1838,0)
IBEDIT INS CO1^3180127.0759^^36^^^3180129
"KRN",.402,1838,"DIAB",1,0,36,8)
EDI INST SECONDARY ID(2);"EDI - 2ND Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",1,0,36,9)
EDI ID NUMBER - PROF;"EDI - Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",1,0,36,13)
EDI PROF SECONDARY ID QUAL(2);"EDI - 2ND Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",1,0,36,19)
ATT/REND ID BILL SEC ID INST//NO;"Use Att/Rend ID as Billing Provider Sec. ID (UB)?"
"KRN",.402,1838,"DIAB",1,1,36.015,0)
.01;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.016,0)
.01;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,1838,"DIAB",2,0,36,10)
EDI PROF SECONDARY ID QUAL(1);"EDI - 1ST Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",2,0,36,17)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,1838,"DIAB",2,0,36,18)
REF PROV SEC ID DEF CMS-1500//UPIN;"Default ID (1500)"
"KRN",.402,1838,"DIAB",2,0,36,23)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,1838,"DIAB",2,1,36.015,0)
.02;"EDI - Alt Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",2,1,36.016,0)
.02;"EDI - Alt Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",3,0,36,1)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,1838,"DIAB",3,0,36,18)
REF PROV SEC ID REQ ON CLAIMS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",3,0,36,24)
INS COMPANY LINK TYPE;T
"KRN",.402,1838,"DIAB",4,0,36,3)
15;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",4,0,36,20)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,1838,"DIAB",5,0,36,5)
EDI INST SECONDARY ID(1);"EDI - 1ST Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",5,0,36,16)
BIN NUMBER;"EDI - Bin Number"
"KRN",.402,1838,"DIAB",5,0,36,18)
ATT/REND ID BILL SEC ID PROF//NO;"Use Att/Rend ID as Billing Provider Sec. ID (1500)?"
"KRN",.402,1838,"DIAB",6,0,36,2)
EDI ID NUMBER - INST;"EDI - Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",6,0,36,3)
EDI INST SECONDARY ID QUAL(1);"EDI - 1ST Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",6,0,36,6)
EDI INST SECONDARY ID QUAL(2);"EDI - 2ND Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",6,0,36,14)
EDI PROF SECONDARY ID(2);"EDI - 2ND Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",6,0,36,17)
PERF PROV SECOND ID TYPE 1500;"Default ID (1500)"
"KRN",.402,1838,"DIAB",6,0,36,25)
INS COMPANY LINK PARENT;T
"KRN",.402,1838,"DIAB",7,0,36,9)
16;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",7,0,36,11)
EDI PROF SECONDARY ID(1);"EDI - 1ST Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",7,0,36,15)
ELECTRONIC INSURANCE TYPE;"EDI - Insurance Type"
"KRN",.402,1838,"DIAB",7,0,36,17)
PERF PROV SECOND ID TYPE UB;"Default ID (UB)"
"KRN",.402,1838,"DIAB",8,0,36,17)
SECONDARY ID REQUIREMENTS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",9,0,36,16)
PRINT SEC/TERT AUTO CLAIMS?;"EDI - Print Sec/Tert Auto Claims?"
"KRN",.402,1838,"DIAB",10,0,36,16)
PRINT SEC MED CLAIMS W/O MRA;"EDI - Print Medicare Sec Claims w/o MRA?"
"KRN",.402,1838,"DIAB",11,0,36,1)
TRANSMIT ELECTRONICALLY;"EDI - Transmit?"
"KRN",.402,1838,"DIAB",12,0,36,22)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,1838,"DIAB",13,0,36,0)
STANDARD FTF;"STANDARD FILING TIME FRAME"
"KRN",.402,1838,"DIAB",16,0,36,0)
STANDARD FTF VALUE;"STANDARD FILING TIME FRAME VALUE"
"KRN",.402,1838,"DIAB",20,0,36,21)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,1838,"DIAB",24,0,36,20)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,1838,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;.18STANDARD FILING TIME FRAME~;I 'X S Y="@016";I '$$FTFV^IBCNSU31(X) S Y="@016";.19STANDARD FILING TIME FRAME VALUE~;@016;.12;.13;
"KRN",.402,1838,"DR",1,36,1)
.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@171";3.01EDI - Transmit?~;S DIPA("IBTX")=X;I X=$G(IBEDIKEY(1))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1721";
"KRN",.402,1838,"DR",1,36,2)
3.01////^S X=$G(IBEDIKEY(1));I $$EDIKEY^IBCNSC();S Y="@171";@1721;I '$G(DIPA("IBTX")) S Y="@17";3.04EDI - Inst Payer Primary ID~;I X=$G(IBEDIKEY(4))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17211";3.04////^S X=$G(IBEDIKEY(4));
"KRN",.402,1838,"DR",1,36,3)
I $$EDIKEY^IBCNSC();S Y="@171";@17211;15EDI - Alt Inst Payer Primary ID Type~;I '$G(DIPA("IBTX")) S Y="@17";6.01EDI - 1ST Inst Payer Sec. ID Qualifier~;
"KRN",.402,1838,"DR",1,36,4)
I X=""&($G(IBEDIKEY(3,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";I X=$G(IBEDIKEY(1,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17212";6.01////^S X=$G(IBEDIKEY(1,6));6.02////^S X=$G(IBEDIKEY(2,6));
"KRN",.402,1838,"DR",1,36,5)
I $$EDIKEY^IBCNSC();S Y="@171";@17212;I '$G(DIPA("IBTX")) S Y="@17";6.02EDI - 1ST Inst Payer Sec. ID~;I X=$G(IBEDIKEY(2,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17213";6.02////^S X=$G(IBEDIKEY(2,6));
"KRN",.402,1838,"DR",1,36,6)
6.01////^S X=$G(IBEDIKEY(1,6));I $$EDIKEY^IBCNSC();S Y="@171";@17213;I '$G(DIPA("IBTX")) S Y="@17";6.03EDI - 2ND Inst Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";
"KRN",.402,1838,"DR",1,36,7)
I X=$G(IBEDIKEY(3,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17214";6.03////^S X=$G(IBEDIKEY(3,6));6.04////^S X=$G(IBEDIKEY(4,6));I $$EDIKEY^IBCNSC();S Y="@171";@17214;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,8)
6.04EDI - 2ND Inst Payer Sec. ID~;I X=$G(IBEDIKEY(4,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";6.04////^S X=$G(IBEDIKEY(4,6));6.03////^S X=$G(IBEDIKEY(3,6));I $$EDIKEY^IBCNSC();S Y="@171";@1722;
"KRN",.402,1838,"DR",1,36,9)
3.02EDI - Prof Payer Primary ID~;I X=$G(IBEDIKEY(2))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17221";3.02////^S X=$G(IBEDIKEY(2));I $$EDIKEY^IBCNSC();S Y="@171";@17221;16EDI - Alt Prof Payer Primary ID Type~;
"KRN",.402,1838,"DR",1,36,10)
I '$G(DIPA("IBTX")) S Y="@17";6.05EDI - 1ST Prof Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(7,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(5,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17222";
"KRN",.402,1838,"DR",1,36,11)
6.05////^S X=$G(IBEDIKEY(5,6));6.06////^S X=$G(IBEDIKEY(6,6));I $$EDIKEY^IBCNSC();S Y="@171";@17222;I '$G(DIPA("IBTX")) S Y="@17";6.06EDI - 1ST Prof Payer Sec. ID~;
"KRN",.402,1838,"DR",1,36,12)
I X=$G(IBEDIKEY(6,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17223";6.06////^S X=$G(IBEDIKEY(6,6));6.05////^S X=$G(IBEDIKEY(5,6));I $$EDIKEY^IBCNSC();S Y="@171";@17223;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,13)
6.07EDI - 2ND Prof Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(7,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17224";6.07////^S X=$G(IBEDIKEY(7,6));
"KRN",.402,1838,"DR",1,36,14)
6.08////^S X=$G(IBEDIKEY(8,6));I $$EDIKEY^IBCNSC();S Y="@171";@17224;I '$G(DIPA("IBTX")) S Y="@17";6.08EDI - 2ND Prof Payer Sec. ID~;I X=$G(IBEDIKEY(8,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";
"KRN",.402,1838,"DR",1,36,15)
6.08////^S X=$G(IBEDIKEY(8,6));6.07////^S X=$G(IBEDIKEY(7,6));I $$EDIKEY^IBCNSC();S Y="@171";@1723;@17;3.09EDI - Insurance Type~;I X=$G(IBEDIKEY(9))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1724";3.09////^S X=$G(IBEDIKEY(9));
"KRN",.402,1838,"DR",1,36,16)
I $$EDIKEY^IBCNSC();S Y="@171";@1724;@171;3.03EDI - Bin Number~;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1725";7.01;@1725;6.09EDI - Print Sec/Tert Auto Claims?~;6.1EDI - Print Medicare Sec Claims w/o MRA?~;
"KRN",.402,1838,"DR",1,36,17)
I $G(DIPA("IBTX"))'=2 S Y="@18";3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@18;S:",6,12,"'[IBY Y="@181";W !!,"Attending/Rendering Provider Secondary ID";4.01Default ID (1500)~;4.02Default ID (UB)~;4.03Require ID on Claim~;
"KRN",.402,1838,"DR",1,36,18)
W !!,"Referring Provider Secondary ID";4.04Default ID (1500)~//UPIN;4.05Require ID on Claim~;W !!,"Billing Provider Secondary IDs";4.06Use Att/Rend ID as Billing Provider Sec. ID (1500)?~//NO;
"KRN",.402,1838,"DR",1,36,19)
4.08Use Att/Rend ID as Billing Provider Sec. ID (UB)?~//NO;W !!,"Billing Provider/Service Facility";@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";.113;@1;.114;.115;.116;.131;.119;
"KRN",.402,1838,"DR",1,36,20)
S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;S:",10,6,"'[IBY Y="@80";.168T~;
"KRN",.402,1838,"DR",1,36,21)
S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@80;S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;S:X="" Y="@6";.182;S:X="" Y="@6";
"KRN",.402,1838,"DR",1,36,22)
.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;S:IBY["4" Y="@99";@40;
"KRN",.402,1838,"DR",1,36,23)
S:",5,6,"'[IBY Y="@55";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;S:IBY["5" Y="@99";@55;S:",13,6,"'[IBY Y="@60";
"KRN",.402,1838,"DR",1,36,24)
I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@551";I $D(^DIC(36,"APC",+$G(DA))),$P($G(^DIC(36,+$G(DA),3)),U,13)="P" S Y="@551";3.13T~;S DIPA("IBLNK")=X;I X=$G(IBEDIKEY(13))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@552";
"KRN",.402,1838,"DR",1,36,25)
3.13////^S X=$G(IBEDIKEY(13));I $$EDIKEY^IBCNSC();S Y="@551";@552;I $G(DIPA("IBLNK"))'="C" S Y="@551";3.14T~;I X=$G(IBEDIKEY(14))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@553";3.14////^S X=$G(IBEDIKEY(14));I $$EDIKEY^IBCNSC();
"KRN",.402,1838,"DR",1,36,26)
S Y="@551";@553;D COPY^IBCEPCID(+$G(DA));@551;S:IBY=",13," Y="@99";@60;S IBPI=$$GET1^DIQ(36,DA,3.1,"I");S:",7,6,"'[IBY Y="@50";3.1;I X="" S Y="@50";I +$$GET1^DIQ(350.9,"1,",51.30,"I")'=X S Y="@50";3.1///@;3.1///^S X=IBPI;
"KRN",.402,1838,"DR",1,36,27)
W !,"LINKING TO THE MBI PAYER IS NOT ALLOWED";S Y="@60";@50;K IBPI;S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,1838,"DR",2,36.015)
.01EDI - Alt Inst Payer Primary ID Type~;.02EDI - Alt Inst Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.016)
.01EDI - Alt Prof Payer Primary ID Type~;.02EDI - Alt Prof Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.03)
.01
"KRN",101,6624,-1)
0^1
"KRN",101,6624,0)
IBCNE REVERIFY INSURANCE MENU^List Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,6624,4)
26^4
"KRN",101,6624,10,0)
^101.01PA^3^3
"KRN",101,6624,10,1,0)
6625^SE^1^^^Select Entry
"KRN",101,6624,10,1,1)
Select Ins Co to Reverify:
"KRN",101,6624,10,1,"^")
IBCNE SELECT INSURANCE
"KRN",101,6624,10,2,0)
6626^EX^10^
"KRN",101,6624,10,2,"^")
IBCNE FAST EXIT
"KRN",101,6624,10,3,0)
8291^MB^5^
"KRN",101,6624,10,3,"^")
IBCNE MBI REQUEST
"KRN",101,6624,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,6624,20)
K IBFASTXT
"KRN",101,6624,26)
D SHOW^VALM
"KRN",101,6624,28)
Select Action: 
"KRN",101,6624,99)
64635,37996
"KRN",101,6625,-1)
4^4
"KRN",101,6625,0)
IBCNE SELECT INSURANCE
"KRN",101,6626,-1)
4^2
"KRN",101,6626,0)
IBCNE FAST EXIT
"KRN",101,8291,-1)
0^3
"KRN",101,8291,0)
IBCNE MBI REQUEST^MBI Request^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8291,1,0)
^101.06^2^2^3171011^^
"KRN",101,8291,1,1,0)
The MBI Request action will initiate an electronic request for the 
"KRN",101,8291,1,2,0)
current patient's Medicare Beneficiary Identifier
"KRN",101,8291,2,0)
^101.02A^1^1
"KRN",101,8291,2,1,0)
MB
"KRN",101,8291,2,"B","MB",1)

"KRN",101,8291,4)
^4
"KRN",101,8291,15)
D INIT^IBCNEQU
"KRN",101,8291,20)
D MBIREQ^IBCNEQU
"KRN",101,8291,99)
64635,37996
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
601^3180201^520824649
"PKG",230,22,1,"PAH",1,1,0)
^^1^1^3171218
"PKG",230,22,1,"PAH",1,1,1,0)
IB*2.0*601 -- see patch description for implementation details. 
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
25
"RTN","IBCNBLA")
0^17^B69810751^B68621473
"RTN","IBCNBLA",1,0)
IBCNBLA ;ALB/ARH - Ins Buffer: LM action calls ;1 Jun 97
"RTN","IBCNBLA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,184,271,416,506,601**;21-MAR-94;Build 14
"RTN","IBCNBLA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLA",4,0)
 ;
"RTN","IBCNBLA",5,0)
NEWSCRN(TEMPLAT,TMPARR,IBBUFDA) ; open a new screen for a specific buffer entry, pass in LM template and the array to select from
"RTN","IBCNBLA",6,0)
 ; if temp array is defined then user selects the buffer entry, otherwise use entry passed in
"RTN","IBCNBLA",7,0)
 ;
"RTN","IBCNBLA",8,0)
 I $G(TMPARR)'="" N IBBUFDA S IBBUFDA=$$SEL(TMPARR)
"RTN","IBCNBLA",9,0)
 I +$G(IBBUFDA),$G(TEMPLAT)'="",+$$LOCK^IBCNBU1(IBBUFDA,1) D EN^VALM(TEMPLAT) D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA",10,0)
 S VALMBCK="R"
"RTN","IBCNBLA",11,0)
 Q
"RTN","IBCNBLA",12,0)
 ;
"RTN","IBCNBLA",13,0)
SEL(TMPARR) ; user selects one of the items from the list on the screen
"RTN","IBCNBLA",14,0)
 ;
"RTN","IBCNBLA",15,0)
 N VALMY,IBX,IBY,IBSELN S IBX=""
"RTN","IBCNBLA",16,0)
 I $G(TMPARR)'="",'$O(^TMP(TMPARR,$J,0)) D  G SELQ
"RTN","IBCNBLA",17,0)
 . W !!,"There are no '",$S($G(VALM("ENTITY"))'="":VALM("ENTITY"),1:"record"),"s' to select.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",18,0)
 ;
"RTN","IBCNBLA",19,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCNBLA",20,0)
 I $D(VALMY),$G(TMPARR)'="" S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA",21,0)
 . S IBX=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99)
"RTN","IBCNBLA",22,0)
 . ;
"RTN","IBCNBLA",23,0)
 . I TMPARR="IBCNBLLX" S IBY=$P($G(^IBA(355.33,+IBX,0)),U,4) I IBY'="E" D  S IBX=""
"RTN","IBCNBLA",24,0)
 .. W !!," >>> Selected entry has been ",$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN STATUS")
"RTN","IBCNBLA",25,0)
 .. W " and may no longer be edited or modified.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",26,0)
 ;
"RTN","IBCNBLA",27,0)
SELQ Q IBX
"RTN","IBCNBLA",28,0)
 ;
"RTN","IBCNBLA",29,0)
PNXTSCRN(TEMPLAT,IBBUFDA) ; open a new screen for a buffer entry, rebuild the process screen on return since it may have changed
"RTN","IBCNBLA",30,0)
 D NEWSCRN^IBCNBLA(TEMPLAT,"",IBBUFDA)
"RTN","IBCNBLA",31,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R"
"RTN","IBCNBLA",32,0)
 Q
"RTN","IBCNBLA",33,0)
 ;
"RTN","IBCNBLA",34,0)
LNXTSCRN(TEMPLAT,TMPARR,AVIEW) ; select entries from list to process/expand
"RTN","IBCNBLA",35,0)
 ;
"RTN","IBCNBLA",36,0)
 ; This procedure is called from the ListMan action protocols for
"RTN","IBCNBLA",37,0)
 ; processing and expanding buffer entries.
"RTN","IBCNBLA",38,0)
 ;    TEMPLAT - list template name for associated action
"RTN","IBCNBLA",39,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",40,0)
 ;
"RTN","IBCNBLA",41,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",42,0)
 NEW ACT,REMAIN,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNBLA",43,0)
 D FULL^VALM1
"RTN","IBCNBLA",44,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",45,0)
 I '$D(IBCNEZAR) G LNXTX
"RTN","IBCNBLA",46,0)
 ;
"RTN","IBCNBLA",47,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",48,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",49,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",50,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",51,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)    ; buffer ien
"RTN","IBCNBLA",52,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",53,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",54,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",55,0)
 .. D EN^VALM(TEMPLAT)                      ; invoke list template
"RTN","IBCNBLA",56,0)
 .. I $G(IBFASTXT) S IBCNEZQ=1 Q            ; Fast Exit processing
"RTN","IBCNBLA",57,0)
 .. S ACT="expand"
"RTN","IBCNBLA",58,0)
 .. I TEMPLAT["PROCESS" S ACT="process"
"RTN","IBCNBLA",59,0)
 .. S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",60,0)
 .. I 'REMAIN Q
"RTN","IBCNBLA",61,0)
 .. W @IOF
"RTN","IBCNBLA",62,0)
 .. W !!!,"You are ",ACT,"ing multiple insurance buffer entries."
"RTN","IBCNBLA",63,0)
 .. W !,"You just completed entry number ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,")."
"RTN","IBCNBLA",64,0)
 .. S DIR(0)="Y"
"RTN","IBCNBLA",65,0)
 .. S DIR("A")="Do you want to "_ACT_" the remaining entry"
"RTN","IBCNBLA",66,0)
 .. I REMAIN>1 S DIR("A")="Do you want to "_ACT_" the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",67,0)
 .. S DIR("B")="YES"
"RTN","IBCNBLA",68,0)
 .. W ! D ^DIR K DIR
"RTN","IBCNBLA",69,0)
 .. I 'Y S IBCNEZQ=1       ; User said NO so set the Quitting variable
"RTN","IBCNBLA",70,0)
 .. Q
"RTN","IBCNBLA",71,0)
 . ;
"RTN","IBCNBLA",72,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",73,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",74,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",75,0)
 . Q
"RTN","IBCNBLA",76,0)
LNXTX ;
"RTN","IBCNBLA",77,0)
 S VALMBCK="R"
"RTN","IBCNBLA",78,0)
 Q
"RTN","IBCNBLA",79,0)
 ;
"RTN","IBCNBLA",80,0)
LREJECT(TMPARR) ; user select entries from list then reject/delete them
"RTN","IBCNBLA",81,0)
 ;
"RTN","IBCNBLA",82,0)
 ; This procedure is called from the ListMan action protocol for
"RTN","IBCNBLA",83,0)
 ; rejecting buffer entries.
"RTN","IBCNBLA",84,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",85,0)
 ;
"RTN","IBCNBLA",86,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",87,0)
 D FULL^VALM1
"RTN","IBCNBLA",88,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",89,0)
 I '$D(IBCNEZAR) G LREJX
"RTN","IBCNBLA",90,0)
 ;
"RTN","IBCNBLA",91,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",92,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",93,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",94,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",95,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)
"RTN","IBCNBLA",96,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",97,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",98,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",99,0)
 .. W @IOF,!?2,$G(IORVON)
"RTN","IBCNBLA",100,0)
 .. W " Entry ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,") "
"RTN","IBCNBLA",101,0)
 .. W $G(IORVOFF)
"RTN","IBCNBLA",102,0)
 .. D REJECT^IBCNBLA1(IBCNEZBF,.IBCNEZQ)
"RTN","IBCNBLA",103,0)
 .. ;
"RTN","IBCNBLA",104,0)
 .. ; If the user wants to stop and we're not processing the last one,
"RTN","IBCNBLA",105,0)
 .. ; then determine if we should process the remaining entries
"RTN","IBCNBLA",106,0)
 .. ;
"RTN","IBCNBLA",107,0)
 .. I $D(IBCNEZQ),IBCNEZCT<IBCNEZGD D
"RTN","IBCNBLA",108,0)
 ... NEW REMAIN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA",109,0)
 ... S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",110,0)
 ... S DIR(0)="Y"
"RTN","IBCNBLA",111,0)
 ... S DIR("A")="Do you want to process the remaining entry"
"RTN","IBCNBLA",112,0)
 ... I REMAIN>1 S DIR("A")="Do you want to process the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",113,0)
 ... S DIR("B")="NO"
"RTN","IBCNBLA",114,0)
 ... W ! D ^DIR K DIR
"RTN","IBCNBLA",115,0)
 ... ; if user wants to continue, then kill the quitting variable
"RTN","IBCNBLA",116,0)
 ... I Y KILL IBCNEZQ
"RTN","IBCNBLA",117,0)
 ... Q
"RTN","IBCNBLA",118,0)
 .. Q
"RTN","IBCNBLA",119,0)
 . ;
"RTN","IBCNBLA",120,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",121,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",122,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",123,0)
 . Q
"RTN","IBCNBLA",124,0)
LREJX ;
"RTN","IBCNBLA",125,0)
 S VALMBCK="R"
"RTN","IBCNBLA",126,0)
 Q
"RTN","IBCNBLA",127,0)
 ;
"RTN","IBCNBLA",128,0)
 ;
"RTN","IBCNBLA",129,0)
FASTEXIT ; sets flag signaling system should be exited
"RTN","IBCNBLA",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNBLA",131,0)
 S VALMBCK="Q"
"RTN","IBCNBLA",132,0)
 D FULL^VALM1
"RTN","IBCNBLA",133,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO" D ^DIR
"RTN","IBCNBLA",134,0)
 I +Y S IBFASTXT=1
"RTN","IBCNBLA",135,0)
 Q
"RTN","IBCNBLA",136,0)
 ;
"RTN","IBCNBLA",137,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNBLA",138,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNBLA",139,0)
 ;
"RTN","IBCNBLA",140,0)
 D FULL^VALM1 W !
"RTN","IBCNBLA",141,0)
 W !,"Select the item to sort the buffer records on the buffer list screen."
"RTN","IBCNBLA",142,0)
 S DIR(0)="SO^1:Patient Name;2:Insurance Company;3:Source of Information;4:Date Entered;5:Inpatients;6:Means Test;7:On Hold;8:Verified;9:eIV Status;10:Positive Response"
"RTN","IBCNBLA",143,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBCNSORT),"^",2)
"RTN","IBCNBLA",144,0)
 D ^DIR K DIR
"RTN","IBCNBLA",145,0)
 I 'Y G SELSORTX
"RTN","IBCNBLA",146,0)
 S IBCNSORT=Y_"^"_Y(0)
"RTN","IBCNBLA",147,0)
 ;
"RTN","IBCNBLA",148,0)
 ; ESG - 6/7/02 - SDD 5.1.1
"RTN","IBCNBLA",149,0)
 ; If the user wants to sort by symbol, then ask them which
"RTN","IBCNBLA",150,0)
 ; symbol should appear first and process accordingly.
"RTN","IBCNBLA",151,0)
 ;
"RTN","IBCNBLA",152,0)
 KILL IBCNSORT(1)       ; initialize the symbol sort array
"RTN","IBCNBLA",153,0)
 I +IBCNSORT=9 D  I $D(DIRUT)!('Y) G SELSORTX
"RTN","IBCNBLA",154,0)
 . ;
"RTN","IBCNBLA",155,0)
 . ; build the array of default sort order
"RTN","IBCNBLA",156,0)
 . S IBCNSORT(1,"+")=10
"RTN","IBCNBLA",157,0)
 . S IBCNSORT(1,"$")=15 ; Added dollar sign to sort criteria
"RTN","IBCNBLA",158,0)
 . S IBCNSORT(1,"%")=18 ; IB*2*601/DM added %
"RTN","IBCNBLA",159,0)
 . S IBCNSORT(1,"-")=20
"RTN","IBCNBLA",160,0)
 . S IBCNSORT(1,"#")=25 ; Added pound to sort criteria
"RTN","IBCNBLA",161,0)
 . S IBCNSORT(1,"!")=30
"RTN","IBCNBLA",162,0)
 . S IBCNSORT(1," ")=40
"RTN","IBCNBLA",163,0)
 . S IBCNSORT(1,"?")=50
"RTN","IBCNBLA",164,0)
 . S IBCNSORT(1,"*")=60
"RTN","IBCNBLA",165,0)
 . ;
"RTN","IBCNBLA",166,0)
 . ; build the DIR array to ask the question
"RTN","IBCNBLA",167,0)
 . S DIR(0)="SO^"
"RTN","IBCNBLA",168,0)
 . ; removed blanks ; replaced tilde w/apostrophe and added pound as option 3, IB*506 added $ as option 2 and adjusted all following.
"RTN","IBCNBLA",169,0)
 . ; IB*2*601/DM added % as option 3 and adjusted all following.
"RTN","IBCNBLA",170,0)
 . F ST="1:+'A1","2:$'E1","3:%'M1","4:-'D1","5:#'U1","6:!'B1","7: '","8:?'Q1" D
"RTN","IBCNBLA",171,0)
 .. I ST="7: '" S STDES="No Problems Identified, Awaiting Electronic Processing" ; removed blanks
"RTN","IBCNBLA",172,0)
 .. E  S STDES=$$GET1^DIQ(365.15,$$FIND1^DIC(365.15,"","X",$P(ST,"'",2)),.01,"E")
"RTN","IBCNBLA",173,0)
 .. S DIR(0)=DIR(0)_$P(ST,"'")_"  "_STDES_$S(ST="7:?'Q1":"",1:";")
"RTN","IBCNBLA",174,0)
 . S DIR("A")="Which eIV Status do you want to appear first?"
"RTN","IBCNBLA",175,0)
 . S DIR("B")=1
"RTN","IBCNBLA",176,0)
 . S DIR("?",1)=" Please identify the eIV status that you want to appear first in the Insurance"
"RTN","IBCNBLA",177,0)
 . S DIR("?",2)=" Buffer listing.  The symbol appears immediately to the left of the patient"
"RTN","IBCNBLA",178,0)
 . S DIR("?",3)=" name in the list.  The default sort order for statuses is the same as"
"RTN","IBCNBLA",179,0)
 . S DIR("?",4)=" they are presented in this list below.  You may choose which status will appear"
"RTN","IBCNBLA",180,0)
 . S DIR("?",5)=" first in the list.  The remaining statuses will be sorted according to this"
"RTN","IBCNBLA",181,0)
 . S DIR("?",6)=" default sort order.  When sorting by eIV status, the secondary sort"
"RTN","IBCNBLA",182,0)
 . S DIR("?",7)=" is the entered date and the final sort is by patient name."
"RTN","IBCNBLA",183,0)
 . S DIR("?")=" "
"RTN","IBCNBLA",184,0)
 . D ^DIR K DIR
"RTN","IBCNBLA",185,0)
 . I $D(DIRUT) Q
"RTN","IBCNBLA",186,0)
 . I 'Y Q
"RTN","IBCNBLA",187,0)
 . ;
"RTN","IBCNBLA",188,0)
 . ; update the sort order array with the chosen symbol
"RTN","IBCNBLA",189,0)
 . S IBCNSORT(1,$E(Y(0)))=1
"RTN","IBCNBLA",190,0)
 . S $P(IBCNSORT,U,3)=$E(Y(0))
"RTN","IBCNBLA",191,0)
 . Q
"RTN","IBCNBLA",192,0)
 ;
"RTN","IBCNBLA",193,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNBLA",194,0)
 D INIT^IBCNBLL,HDR^IBCNBLL
"RTN","IBCNBLA",195,0)
 ;
"RTN","IBCNBLA",196,0)
SELSORTX ;
"RTN","IBCNBLA",197,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",198,0)
 Q
"RTN","IBCNBLA",199,0)
 ;
"RTN","IBCNBLA",200,0)
TGLSCRN(IBBUFDA) ; toggle process screen from policy to insurance info, glbal variable IBCNSCRN contains ins co chosen
"RTN","IBCNBLA",201,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA",202,0)
 D FULL^VALM1
"RTN","IBCNBLA",203,0)
 W !!,"Enter an Insurance Company to display the Groups/Plans for that company or ",!,"enter Return to display a patient's policies.",!!
"RTN","IBCNBLA",204,0)
 S IBCNSCRN=+$$SELINS^IBCNBU1
"RTN","IBCNBLA",205,0)
 ;
"RTN","IBCNBLA",206,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",207,0)
 Q
"RTN","IBCNBLA",208,0)
 ;
"RTN","IBCNBLA",209,0)
AMCHK ; This procedure is called from the main buffer screen as an action
"RTN","IBCNBLA",210,0)
 ; to check the insurance company names in the buffer file.  This will
"RTN","IBCNBLA",211,0)
 ; invoke another ListMan screen that shows a list of all insurance 
"RTN","IBCNBLA",212,0)
 ; company names that do not exist in File 36 either as names or as
"RTN","IBCNBLA",213,0)
 ; synonyms and also they do not exist in the Auto Match file.  These
"RTN","IBCNBLA",214,0)
 ; are bad insurance company names that need to be corrected before
"RTN","IBCNBLA",215,0)
 ; electronic insurance verification attempts can be made.
"RTN","IBCNBLA",216,0)
 ; esg - 6/20/02 - SDD 5.1.11 - Add an action on the main buffer
"RTN","IBCNBLA",217,0)
 ;       screen to call the buffer names check option
"RTN","IBCNBLA",218,0)
 ;
"RTN","IBCNBLA",219,0)
 D EN^IBCNEAMC
"RTN","IBCNBLA",220,0)
 S VALMBCK="R"
"RTN","IBCNBLA",221,0)
AMCHKX ;
"RTN","IBCNBLA",222,0)
 Q
"RTN","IBCNBLA",223,0)
 ;
"RTN","IBCNBLE1")
0^1^B41302582^B32419797
"RTN","IBCNBLE1",1,0)
IBCNBLE1 ;DAOU/ESG - Ins Buffer, Expand Entry, con't ;25-JUN-2002
"RTN","IBCNBLE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,435,467,516,601**;21-MAR-94;Build 14
"RTN","IBCNBLE1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLE1",4,0)
 ;
"RTN","IBCNBLE1",5,0)
 ; Can't be called from the top
"RTN","IBCNBLE1",6,0)
 Q
"RTN","IBCNBLE1",7,0)
 ;
"RTN","IBCNBLE1",8,0)
BLD ; Continuation of Expand Entry list build procedure
"RTN","IBCNBLE1",9,0)
 ; --- Called by IBCNBLE
"RTN","IBCNBLE1",10,0)
 ;
"RTN","IBCNBLE1",11,0)
 NEW ERR,MSG,IBL,IBY,IBLINE,IBER,IBLN,EDITED,ORIGSYME,ORIGSYMI,EEUPDATE
"RTN","IBCNBLE1",12,0)
 NEW ORIGSYMS
"RTN","IBCNBLE1",13,0)
 ;
"RTN","IBCNBLE1",14,0)
 ; save the external and internal IIV status values
"RTN","IBCNBLE1",15,0)
 S ORIGSYMS=$$SYMBOL^IBCNBLL(IBBUFDA)
"RTN","IBCNBLE1",16,0)
 S ORIGSYME=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",17,0)
 S ORIGSYMI=$P(IB0,U,12)
"RTN","IBCNBLE1",18,0)
 ;
"RTN","IBCNBLE1",19,0)
 ; Determine if Expand Entry is allowed to update the IIV Status
"RTN","IBCNBLE1",20,0)
 S EEUPDATE=1    ; default Expand Entry update flag to true
"RTN","IBCNBLE1",21,0)
 I ORIGSYMI,'$P($G(^IBE(365.15,ORIGSYMI,0)),U,3) S EEUPDATE=0
"RTN","IBCNBLE1",22,0)
 ;
"RTN","IBCNBLE1",23,0)
 ; Do not update the IIV status if manually verified
"RTN","IBCNBLE1",24,0)
 I ORIGSYMS="*" S EEUPDATE=0
"RTN","IBCNBLE1",25,0)
 ;
"RTN","IBCNBLE1",26,0)
 ; Don't let Expand Entry update the eIV status for ePharmacy buffer entries
"RTN","IBCNBLE1",27,0)
 ; esg - 10/12/10 - IB*2*435
"RTN","IBCNBLE1",28,0)
 I +$P($G(^IBA(355.33,IBBUFDA,0)),U,17) S EEUPDATE=0
"RTN","IBCNBLE1",29,0)
 ;
"RTN","IBCNBLE1",30,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLE1",31,0)
 ; invoke the function that trys to find a valid payer
"RTN","IBCNBLE1",32,0)
 I EEUPDATE D
"RTN","IBCNBLE1",33,0)
 . S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1,.MSG)
"RTN","IBCNBLE1",34,0)
 . ; If no errors, then remove the IIV Status
"RTN","IBCNBLE1",35,0)
 . I 'ERR S ERR=$$SIDERR(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLE1",36,0)
 . I 'ERR S ERR=$$PIDERR(IBBUFDA)
"RTN","IBCNBLE1",37,0)
 . I 'ERR D CLEAR^IBCNEUT4(IBBUFDA,.EDITED)
"RTN","IBCNBLE1",38,0)
 . ; If errors found, then update with the new IIV Status
"RTN","IBCNBLE1",39,0)
 . I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1)) S EDITED=1
"RTN","IBCNBLE1",40,0)
 . ; refresh the IB0 variable for the possible symbol change
"RTN","IBCNBLE1",41,0)
 . S $P(IB0,U,12)=$P($G(^IBA(355.33,IBBUFDA,0)),U,12)
"RTN","IBCNBLE1",42,0)
 . Q
"RTN","IBCNBLE1",43,0)
 ;
"RTN","IBCNBLE1",44,0)
 ; Possibly display information if the OVERRIDE FRESHNESS FLAG is on
"RTN","IBCNBLE1",45,0)
 I $P(IB0,U,13) D
"RTN","IBCNBLE1",46,0)
 . S IBL="User Requested Inquiry?: ",IBY="YES"
"RTN","IBCNBLE1",47,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,3)
"RTN","IBCNBLE1",48,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",49,0)
 . Q
"RTN","IBCNBLE1",50,0)
 ;
"RTN","IBCNBLE1",51,0)
 ; Display the Current Status line
"RTN","IBCNBLE1",52,0)
 S IBL="Current eIV Status: "
"RTN","IBCNBLE1",53,0)
 S IBY=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",54,0)
 I IBY="",$$SYMBOL^IBCNBLL(IBBUFDA)'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",55,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",56,0)
 ;
"RTN","IBCNBLE1",57,0)
 ; esg - 10/12/10 - check for epharmacy entries
"RTN","IBCNBLE1",58,0)
 I +$P($G(^IBA(355.33,IBBUFDA,0)),U,17) S IBY="N/A for e-Pharmacy buffer entries"
"RTN","IBCNBLE1",59,0)
 ;
"RTN","IBCNBLE1",60,0)
 S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",61,0)
 D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",62,0)
 ;
"RTN","IBCNBLE1",63,0)
 ; Display any text returned by the payer function
"RTN","IBCNBLE1",64,0)
 F IBER=1:1:$G(MSG) D SET^IBCNBLE(" ") F IBLN=1:1:$P($G(MSG(IBER)),U,2) D SET^IBCNBLE("  "_$G(MSG(IBER,IBLN)))
"RTN","IBCNBLE1",65,0)
 ;
"RTN","IBCNBLE1",66,0)
 ; Display the current IIV Status generic description
"RTN","IBCNBLE1",67,0)
 D SYMTXT($P(IB0,U,12),1)
"RTN","IBCNBLE1",68,0)
 D SYMTXT($P(IB0,U,12),2)
"RTN","IBCNBLE1",69,0)
 ;
"RTN","IBCNBLE1",70,0)
 ; If the IIV Status ien changed from what it once was, then display the
"RTN","IBCNBLE1",71,0)
 ; Prior Status line
"RTN","IBCNBLE1",72,0)
 I ORIGSYMI'=$P(IB0,U,12) D
"RTN","IBCNBLE1",73,0)
 . I $P(IB0,U,12) D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",74,0)
 . S IBL="Prior Status: "
"RTN","IBCNBLE1",75,0)
 . S IBY=ORIGSYME
"RTN","IBCNBLE1",76,0)
 . I IBY="",ORIGSYMS'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",77,0)
 . I ORIGSYMS="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",78,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",79,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",80,0)
 . D SYMTXT(ORIGSYMI,1)
"RTN","IBCNBLE1",81,0)
 . Q
"RTN","IBCNBLE1",82,0)
 ;
"RTN","IBCNBLE1",83,0)
 ; Display any existing EC errors
"RTN","IBCNBLE1",84,0)
 D ECERR
"RTN","IBCNBLE1",85,0)
 ; IB*2*601/DM display possible notes
"RTN","IBCNBLE1",86,0)
 D ECNOTE(IBBUFDA)
"RTN","IBCNBLE1",87,0)
 ;D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",88,0)
 ;
"RTN","IBCNBLE1",89,0)
 ; If the IIV Status was modified then refresh the visual display
"RTN","IBCNBLE1",90,0)
 I $G(EDITED) D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLE1",91,0)
BLDX ;
"RTN","IBCNBLE1",92,0)
 Q
"RTN","IBCNBLE1",93,0)
 ;
"RTN","IBCNBLE1",94,0)
SYMTXT(IEN,TYPE) ; Display the text from the IIV symbol file for this entry
"RTN","IBCNBLE1",95,0)
 ; TYPE=1 - Display Description from IIV Status Table file
"RTN","IBCNBLE1",96,0)
 ; TYPE=2 - Display Corrective Action from IIV Status Table file
"RTN","IBCNBLE1",97,0)
 NEW IBJ
"RTN","IBCNBLE1",98,0)
 I '$G(IEN) G SYMX
"RTN","IBCNBLE1",99,0)
 I '$P($G(^IBE(365.15,IEN,TYPE,0)),U,4) G SYMX
"RTN","IBCNBLE1",100,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",101,0)
 S IBJ=0
"RTN","IBCNBLE1",102,0)
 F  S IBJ=$O(^IBE(365.15,IEN,TYPE,IBJ)) Q:'IBJ  D SET^IBCNBLE("  "_$G(^IBE(365.15,IEN,TYPE,IBJ,0)))
"RTN","IBCNBLE1",103,0)
SYMX ;
"RTN","IBCNBLE1",104,0)
 Q
"RTN","IBCNBLE1",105,0)
 ;
"RTN","IBCNBLE1",106,0)
ECERR ; Display the Eligibility Communicator Error data from the
"RTN","IBCNBLE1",107,0)
 ; response file if it exists
"RTN","IBCNBLE1",108,0)
 ;
"RTN","IBCNBLE1",109,0)
 NEW RESP,RESPDATA,ERRTXT,IBY,IBLINE,ERRDATA,FUTDT,TQIEN,IBERR,IBCT
"RTN","IBCNBLE1",110,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",111,0)
 I 'RESP G ECERRX
"RTN","IBCNBLE1",112,0)
 S RESPDATA=$G(^IBCN(365,RESP,1))
"RTN","IBCNBLE1",113,0)
 S ERRTXT=$P($G(^IBCN(365,RESP,4)),U,1)
"RTN","IBCNBLE1",114,0)
 S TQIEN=+$P($G(^IBCN(365,RESP,0)),U,5)    ; Trans Queue file ien
"RTN","IBCNBLE1",115,0)
 S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9)  ; Future date to transmit
"RTN","IBCNBLE1",116,0)
 I '$P(RESPDATA,U,14),'$P(RESPDATA,U,15),ERRTXT="",'FUTDT G ECERRX
"RTN","IBCNBLE1",117,0)
 ;
"RTN","IBCNBLE1",118,0)
 ; At this point, we know there's something to get displayed
"RTN","IBCNBLE1",119,0)
 ;
"RTN","IBCNBLE1",120,0)
 ; Display section header
"RTN","IBCNBLE1",121,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",122,0)
 S IBY=$J("",19)_"Eligibility Communicator Error Information"
"RTN","IBCNBLE1",123,0)
 D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",124,0)
 ;
"RTN","IBCNBLE1",125,0)
 ; Display Error Condition data - field# 1.14
"RTN","IBCNBLE1",126,0)
 I $P(RESPDATA,U,14) D
"RTN","IBCNBLE1",127,0)
 . S ERRDATA=$G(^IBE(365.017,$P(RESPDATA,U,14),0))
"RTN","IBCNBLE1",128,0)
 . K IBERR
"RTN","IBCNBLE1",129,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Condition '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",130,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",131,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",132,0)
 . Q
"RTN","IBCNBLE1",133,0)
 ;
"RTN","IBCNBLE1",134,0)
 ; Display Error Action data - field# 1.15
"RTN","IBCNBLE1",135,0)
 I $P(RESPDATA,U,15) D
"RTN","IBCNBLE1",136,0)
 . S ERRDATA=$G(^IBE(365.018,$P(RESPDATA,U,15),0))
"RTN","IBCNBLE1",137,0)
 . K IBERR
"RTN","IBCNBLE1",138,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Action '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",139,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",140,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",141,0)
 . Q
"RTN","IBCNBLE1",142,0)
 ;
"RTN","IBCNBLE1",143,0)
 ; Display Error Text data - field# 4.01
"RTN","IBCNBLE1",144,0)
 I ERRTXT'="" D SET^IBCNBLE(ERRTXT)
"RTN","IBCNBLE1",145,0)
 ;
"RTN","IBCNBLE1",146,0)
 ; Display Date of Future Transmission - field# .09 in file 365.1
"RTN","IBCNBLE1",147,0)
 I FUTDT D
"RTN","IBCNBLE1",148,0)
 . S FUTDT=$$FMTE^XLFDT(FUTDT,"5Z")
"RTN","IBCNBLE1",149,0)
 . D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",150,0)
 . S IBLINE="     Date of Future Transmission:  "_FUTDT
"RTN","IBCNBLE1",151,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",152,0)
 . Q
"RTN","IBCNBLE1",153,0)
ECERRX ;
"RTN","IBCNBLE1",154,0)
 Q
"RTN","IBCNBLE1",155,0)
 ;
"RTN","IBCNBLE1",156,0)
ECNOTE(IBBUFDA) ; IB*2*601/DM
"RTN","IBCNBLE1",157,0)
 N IBRIEN,IBD1,IBMSG,IB1ST,IBTXT,IBCT
"RTN","IBCNBLE1",158,0)
 I '$$MBICHK^IBCNEUT7(IBBUFDA) G ECNOTEX
"RTN","IBCNBLE1",159,0)
 S IBRIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",160,0)
 I 'IBRIEN G ECNOTEX
"RTN","IBCNBLE1",161,0)
 S IB1ST=1
"RTN","IBCNBLE1",162,0)
 S IBD1=0
"RTN","IBCNBLE1",163,0)
 F  S IBD1=$O(^IBCN(365,IBRIEN,6,IBD1)) Q:'IBD1  D
"RTN","IBCNBLE1",164,0)
 .S IBMSG=0
"RTN","IBCNBLE1",165,0)
 .F  S IBMSG=$O(^IBCN(365,IBRIEN,6,IBD1,1,IBMSG)) Q:'IBMSG  D
"RTN","IBCNBLE1",166,0)
 ..S IBTXT(1)=^IBCN(365,IBRIEN,6,IBD1,1,IBMSG,0)
"RTN","IBCNBLE1",167,0)
 ..I IB1ST D 
"RTN","IBCNBLE1",168,0)
 ...S IB1ST=0
"RTN","IBCNBLE1",169,0)
 ...; Display section header
"RTN","IBCNBLE1",170,0)
 ...D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",171,0)
 ...S IBY=$J("",19)_"Eligibility Communicator Notes"
"RTN","IBCNBLE1",172,0)
 ...D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",173,0)
 ..; Display Notes
"RTN","IBCNBLE1",174,0)
 ..D TXT^IBCNEUT7("IBTXT")
"RTN","IBCNBLE1",175,0)
 ..F IBCT=1:1:$O(IBTXT(""),-1) D SET^IBCNBLE(IBTXT(IBCT))
"RTN","IBCNBLE1",176,0)
 ..Q
"RTN","IBCNBLE1",177,0)
 ;
"RTN","IBCNBLE1",178,0)
ECNOTEX ;
"RTN","IBCNBLE1",179,0)
 Q
"RTN","IBCNBLE1",180,0)
 ;
"RTN","IBCNBLE1",181,0)
SIDERR(BUF,PIEN) ;
"RTN","IBCNBLE1",182,0)
 ; If Subscriber ID is required and SSN cannot be substituted
"RTN","IBCNBLE1",183,0)
 ; and buffer does not have a sub id -> return error
"RTN","IBCNBLE1",184,0)
 ; BUF = buffer IEN
"RTN","IBCNBLE1",185,0)
 ; PIEN = payer IEN
"RTN","IBCNBLE1",186,0)
 ;
"RTN","IBCNBLE1",187,0)
 N ERR,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN
"RTN","IBCNBLE1",188,0)
 S ERR=""
"RTN","IBCNBLE1",189,0)
 ;S SID=$P($G(^IBA(355.33,BUF,60)),U,4)  ; Patch 516 - baa
"RTN","IBCNBLE1",190,0)
 S SID=$$GET1^DIQ(355.33,BUF,90.03)  ; Patch 516 - baa
"RTN","IBCNBLE1",191,0)
 I SID]"" G SIDX  ; Subscriber id is populated, further checking is moot
"RTN","IBCNBLE1",192,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNBLE1",193,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNBLE1",194,0)
 S SIDREQ=$P(SIDSTR,U,8) I 'SIDREQ G SIDX  ; if sub id is not req'd - ok
"RTN","IBCNBLE1",195,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNBLE1",196,0)
 I 'SIDSSN S ERR=18 ; if ssn cannot be used -> B15 status (IEN = 18)
"RTN","IBCNBLE1",197,0)
SIDX Q ERR
"RTN","IBCNBLE1",198,0)
 ;
"RTN","IBCNBLE1",199,0)
PIDERR(BUF) ;
"RTN","IBCNBLE1",200,0)
 ; If patient is a dependent and patient id is missing return error
"RTN","IBCNBLE1",201,0)
 ; BUF - buffer ien
"RTN","IBCNBLE1",202,0)
 ;
"RTN","IBCNBLE1",203,0)
 N ERR,PREL
"RTN","IBCNBLE1",204,0)
 S ERR=""
"RTN","IBCNBLE1",205,0)
 S PREL=$P($G(^IBA(355.33,BUF,60)),U,14)
"RTN","IBCNBLE1",206,0)
 I PREL'=18,PREL'="",$P($G(^IBA(355.33,BUF,62)),U)="" S ERR=23
"RTN","IBCNBLE1",207,0)
 Q ERR
"RTN","IBCNBLL")
0^18^B148784052^B147621313
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438,435,506,519,528,549,601**;21-MAR-94;Build 14
"RTN","IBCNBLL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
 ; DBIA# 642 for call to $$LST^DGMTU
"RTN","IBCNBLL",6,0)
 ; DBIA# 4433 for call to $$SDAPI^SDAMA301
"RTN","IBCNBLL",7,0)
 ;
"RTN","IBCNBLL",8,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",9,0)
 N VIEW,AVIEW,DFLG,IBKEYS
"RTN","IBCNBLL",10,0)
 S VIEW=6,AVIEW=0 ; default to complete view ;IB*2*506/taz changed
"RTN","IBCNBLL",11,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",12,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",13,0)
 Q
"RTN","IBCNBLL",14,0)
 ;
"RTN","IBCNBLL",15,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",16,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",17,0)
 D INIT,HDR
"RTN","IBCNBLL",18,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",19,0)
 Q
"RTN","IBCNBLL",20,0)
 ;
"RTN","IBCNBLL",21,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",22,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",23,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",24,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active" ;IB*2*506/taz Only shows Verified and Active records.
"RTN","IBCNBLL",25,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active"  ;IB*2*506/taz Only shows Verified and N/Active records.
"RTN","IBCNBLL",26,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",27,0)
 I VIEW=4 S VALM("TITLE")="Failure Buffer",VALMSG="!Unable/Send"  ;IB*2*506/taz changed
"RTN","IBCNBLL",28,0)
 I VIEW=5 S VALM("TITLE")="e-Pharmacy Buffer",VALMSG="*Verified"     ; IB*2*435
"RTN","IBCNBLL",29,0)
 I VIEW=6 S VALM("TITLE")="Complete Buffer",VALMSG=""     ; IB*2*506/taz added
"RTN","IBCNBLL",30,0)
 I VIEW=7 S VALM("TITLE")="TRICARE/CHAMPVA",VALMSG=""   ;528/baa added
"RTN","IBCNBLL",31,0)
 Q
"RTN","IBCNBLL",32,0)
 ;
"RTN","IBCNBLL",33,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",34,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",35,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",36,0)
 S IBKEYS=$$GETKEYS(DUZ) ;IB*2*506/taz user must have either IB INSURANCE EDIT or IB GROUP/PLAN EDIT in order to view entries without defined insurance company entries
"RTN","IBCNBLL",37,0)
 D BLD
"RTN","IBCNBLL",38,0)
 Q
"RTN","IBCNBLL",39,0)
 ;
"RTN","IBCNBLL",40,0)
HELP ;  list manager help
"RTN","IBCNBLL",41,0)
 D FULL^VALM1
"RTN","IBCNBLL",42,0)
 S VALMBCK="R"
"RTN","IBCNBLL",43,0)
 W @IOF
"RTN","IBCNBLL",44,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",45,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",46,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",47,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",48,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",49,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",50,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",51,0)
 W !
"RTN","IBCNBLL",52,0)
 ;D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",53,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",54,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",55,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",56,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",57,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",58,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",59,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",60,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",61,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",62,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",63,0)
 W !,"   X - e-Pharmacy"           ; IB*2*435
"RTN","IBCNBLL",64,0)
 W !,"   F - Intrafacility Insurance Update" ; IB*2*528
"RTN","IBCNBLL",65,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",66,0)
 ;
"RTN","IBCNBLL",67,0)
 I VIEW'=5 D     ; IB*2*435
"RTN","IBCNBLL",68,0)
 . W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",69,0)
 . W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",70,0)
 . Q
"RTN","IBCNBLL",71,0)
 ;
"RTN","IBCNBLL",72,0)
 I VIEW=1 D
"RTN","IBCNBLL",73,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",74,0)
 .W !,"      $ - Escalated active policy."
"RTN","IBCNBLL",75,0)
 .W !,"      * - Previously an active policy."
"RTN","IBCNBLL",76,0)
 .Q
"RTN","IBCNBLL",77,0)
 I VIEW=2 D
"RTN","IBCNBLL",78,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",79,0)
 .W !,"      * - Previously an not active policy."
"RTN","IBCNBLL",80,0)
 .Q
"RTN","IBCNBLL",81,0)
 I $F(",3,6,7,",VIEW) D   ;528/baa
"RTN","IBCNBLL",82,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",83,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",84,0)
 .W !,"      $ - Escalated Active policy."
"RTN","IBCNBLL",85,0)
 .W !,"      * - Previously either an active or not active policy."
"RTN","IBCNBLL",86,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",87,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",88,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",89,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",90,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",91,0)
 .W !,"      % - CMS responded with the patient's new MBI value."
"RTN","IBCNBLL",92,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",93,0)
 .Q
"RTN","IBCNBLL",94,0)
 I VIEW=4 D
"RTN","IBCNBLL",95,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",96,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",97,0)
 .Q
"RTN","IBCNBLL",98,0)
 ;
"RTN","IBCNBLL",99,0)
 I VIEW=5 D      ; IB*2*435
"RTN","IBCNBLL",100,0)
 . W !,"      e-Pharmacy buffer entries are not applicable for e-IV processing."
"RTN","IBCNBLL",101,0)
 . Q
"RTN","IBCNBLL",102,0)
 ;
"RTN","IBCNBLL",103,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",104,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",105,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",106,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",107,0)
 W !
"RTN","IBCNBLL",108,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",109,0)
 W !!
"RTN","IBCNBLL",110,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",111,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",112,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",113,0)
 W !!
"RTN","IBCNBLL",114,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",115,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",116,0)
 Q
"RTN","IBCNBLL",117,0)
 ;
"RTN","IBCNBLL",118,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",119,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",120,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",121,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",122,0)
 Q
"RTN","IBCNBLL",123,0)
 ;
"RTN","IBCNBLL",124,0)
BLD ;  build screen display
"RTN","IBCNBLL",125,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",126,0)
 ;
"RTN","IBCNBLL",127,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",128,0)
 ;
"RTN","IBCNBLL",129,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",130,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",131,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",132,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",133,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",134,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG) I IBLINE="" S IBCNT=IBCNT-1 Q  ; IB*2*506/taz If line is null stop processing this entry.
"RTN","IBCNBLL",135,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",136,0)
 ;
"RTN","IBCNBLL",137,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",138,0)
 Q
"RTN","IBCNBLL",139,0)
 ;
"RTN","IBCNBLL",140,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",141,0)
 N DFN,IB0,IB20,IB40,IB60,IBLINE,IBMTS,IBY,MCFLAG,VA,VADM,VAERR,VAIN,X,Y
"RTN","IBCNBLL",142,0)
 S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",143,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40)),MCFLAG=$$GTMFLG(IBBUFDA)  ;IB*2.0*549
"RTN","IBCNBLL",144,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",145,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",146,0)
 ;
"RTN","IBCNBLL",147,0)
 ;IB*2.0*549 - Replaced the following line of code:
"RTN","IBCNBLL",148,0)
 ;I 'IBKEYS,'$$ACTIVE(DFN) G BLDLNQ  ;IB*2*506/taz Only allow active insurance for users not holding IB INSURANCE EDIT or IB GROUP/PLAN EDIT keys
"RTN","IBCNBLL",149,0)
 ; With the following code that will determine if the list item is Medicare (+MCFLAG,) then include it on
"RTN","IBCNBLL",150,0)
 ; the list even if the user doesn't have the security keys and if the patient has ACTIVE or INACTIVE policies.
"RTN","IBCNBLL",151,0)
 I 'IBKEYS,'$$ACTIVE(DFN),'MCFLAG G BLDLNQ  ;IB*2.0*549
"RTN","IBCNBLL",152,0)
 ;
"RTN","IBCNBLL",153,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",154,0)
 ;
"RTN","IBCNBLL",155,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",156,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",157,0)
 ;
"RTN","IBCNBLL",158,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",159,0)
 I IBY="*" S IBY=" "  ;528/baa
"RTN","IBCNBLL",160,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",161,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",162,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",163,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",164,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",165,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",166,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",167,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",168,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",169,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",170,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",171,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",172,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",173,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",174,0)
BLDLNQ ; IB*2*506/taz Tag added
"RTN","IBCNBLL",175,0)
 Q IBLINE
"RTN","IBCNBLL",176,0)
 ;
"RTN","IBCNBLL",177,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",178,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",179,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",180,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",181,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",182,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",183,0)
 Q
"RTN","IBCNBLL",184,0)
 ;
"RTN","IBCNBLL",185,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",186,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",187,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,X,Y
"RTN","IBCNBLL",188,0)
 S IBCNT=0
"RTN","IBCNBLL",189,0)
 ;
"RTN","IBCNBLL",190,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",191,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",192,0)
 ;
"RTN","IBCNBLL",193,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",194,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",195,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",196,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",197,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",198,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",199,0)
 ..;
"RTN","IBCNBLL",200,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",201,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",202,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",203,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",204,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",205,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",206,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",207,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",208,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",209,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",210,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",211,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",212,0)
 ..;
"RTN","IBCNBLL",213,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",214,0)
 ..;
"RTN","IBCNBLL",215,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",216,0)
 ..; get future appointments
"RTN","IBCNBLL",217,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",218,0)
 ..S DFLG="" ;,APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag ;IB*2*506 appointment data removed.
"RTN","IBCNBLL",219,0)
 ..I $$INCL(VIEW,SYM,IB0) S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",220,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",221,0)
 ..Q
"RTN","IBCNBLL",222,0)
 .Q
"RTN","IBCNBLL",223,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",224,0)
 Q
"RTN","IBCNBLL",225,0)
 ;
"RTN","IBCNBLL",226,0)
INCL(VIEW,SYM,IB0) ;
"RTN","IBCNBLL",227,0)
 N INCL,IENS,IBEBI,MCFLAG
"RTN","IBCNBLL",228,0)
 S INCL=0
"RTN","IBCNBLL",229,0)
 ; IB*2*549 - Added 'MCFLAG to allow Medicare in the following line.
"RTN","IBCNBLL",230,0)
 S MCFLAG=$$GTMFLG(IBBUFDA)
"RTN","IBCNBLL",231,0)
 I 'IBKEYS,'MCFLAG,(SYM'="+") G INCLQ ; If users don't have required keys, they only see current Positive Entries.
"RTN","IBCNBLL",232,0)
 I VIEW=6 S INCL=1 G INCLQ  ;Include Everything  (Complete view)
"RTN","IBCNBLL",233,0)
 I VIEW=7,((INAME["TRICARE")!(INAME["CHAMPVA")) S INCL=1 G INCLQ  ; Tricare/Champva;528/baa 
"RTN","IBCNBLL",234,0)
 I VIEW=5,$P(IB0,U,17) S INCL=1 G INCLQ  ;Only e-Pharmacy on e-Pharmacy view (IB*2*435)
"RTN","IBCNBLL",235,0)
 I $P(IB0,U,17) G INCLQ  ;Exclude e-Pharmacy (IB*2*435)
"RTN","IBCNBLL",236,0)
 I VIEW=3,MCFLAG S INCL=1 G INCLQ ;Only Medicare View
"RTN","IBCNBLL",237,0)
 I MCFLAG G INCLQ  ;Exclude Medicare from Positive, Negative and Failure Views
"RTN","IBCNBLL",238,0)
 I VIEW=4,(SYM="!") S INCL=1 G INCLQ  ;Only failures on Failure view
"RTN","IBCNBLL",239,0)
 I VIEW=1,((SYM="+")!(SYM="$")) S INCL=1 G INCLQ  ;Positive View
"RTN","IBCNBLL",240,0)
 I VIEW=2,(SYM="-") S INCL=1 G INCLQ  ;Negative View
"RTN","IBCNBLL",241,0)
 I SYM="*" D  G INCLQ
"RTN","IBCNBLL",242,0)
 . ;find history in Response file for verified entries.
"RTN","IBCNBLL",243,0)
 . I $$GET1^DIQ(355.33,IBBUFDA,.15)="" S:(VIEW=1) INCL=1 Q  ;IIV PROCESSED DATE field is empty entry is positive
"RTN","IBCNBLL",244,0)
 . S IENS="1,"_$O(^IBCN(365,"AF",IBBUFDA,""))_","
"RTN","IBCNBLL",245,0)
 . ;the following line of code is necessary to check for both "eIV Eligibility Determination" and "IIV Eligibility Determination" (IB*2.0*506)
"RTN","IBCNBLL",246,0)
 . I $$GET1^DIQ(365.02,IENS,.06)["IV Eligibility Determination" Q
"RTN","IBCNBLL",247,0)
 . S IBEBI=$$GET1^DIQ(365.02,IENS,.02)  ;Eligibility/Benefits Info
"RTN","IBCNBLL",248,0)
 . I IBEBI=1 S:(VIEW=1) INCL=1 Q
"RTN","IBCNBLL",249,0)
 . I VIEW=2 S INCL=1 Q
"RTN","IBCNBLL",250,0)
INCLQ ;
"RTN","IBCNBLL",251,0)
 Q INCL
"RTN","IBCNBLL",252,0)
 ;
"RTN","IBCNBLL",253,0)
DATE(X) ;
"RTN","IBCNBLL",254,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",255,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",256,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",257,0)
 ;
"RTN","IBCNBLL",258,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",259,0)
 NEW IB0,SYM
"RTN","IBCNBLL",260,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",261,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",262,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",263,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",264,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",265,0)
 Q SYM
"RTN","IBCNBLL",266,0)
 ;
"RTN","IBCNBLL",267,0)
 ;
"RTN","IBCNBLL",268,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",269,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",270,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",271,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",272,0)
 ;
"RTN","IBCNBLL",273,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",274,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",275,0)
 ;
"RTN","IBCNBLL",276,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",277,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",278,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",279,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",280,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",281,0)
 ;
"RTN","IBCNBLL",282,0)
 ; if the action is EDITED then the line for the buffer entry is recompiled and the updated line is set into 
"RTN","IBCNBLL",283,0)
 ; the display array
"RTN","IBCNBLL",284,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",285,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",286,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",287,0)
 Q
"RTN","IBCNBLL",288,0)
 ;
"RTN","IBCNBLL",289,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",290,0)
 N CODSTR,I,SRCSTR,CODE
"RTN","IBCNBLL",291,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS^eRxEL^IIU"
"RTN","IBCNBLL",292,0)
 S CODSTR="I^D^V^P^E^H^M^R^C^X^F"
"RTN","IBCNBLL",293,0)
 S CODE=""
"RTN","IBCNBLL",294,0)
 I $G(SRC)'="" F I=1:1:11 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",295,0)
 Q CODE
"RTN","IBCNBLL",296,0)
 ;
"RTN","IBCNBLL",297,0)
GETKEYS(DUZ) ; 
"RTN","IBCNBLL",298,0)
 ;Make sure that user has the INSURANCE EDIT key and/or the GROUP/PLAN EDIT key.  User
"RTN","IBCNBLL",299,0)
 ;must have either key in order to see non_Positive Entries.
"RTN","IBCNBLL",300,0)
 N KEY1,KEY2
"RTN","IBCNBLL",301,0)
 S KEY1=$O(^DIC(19.1,"B","IB INSURANCE COMPANY EDIT","")) I KEY1 S KEY1=$D(^VA(200,DUZ,51,KEY1))
"RTN","IBCNBLL",302,0)
 S KEY2=$O(^DIC(19.1,"B","IB GROUP PLAN EDIT","")) I KEY2 S KEY2=$D(^VA(200,DUZ,51,KEY2))
"RTN","IBCNBLL",303,0)
 Q KEY1!KEY2
"RTN","IBCNBLL",304,0)
 ;
"RTN","IBCNBLL",305,0)
ACTIVE(DFN) ;Check for active insurance
"RTN","IBCNBLL",306,0)
 N IBINSCO
"RTN","IBCNBLL",307,0)
 D ALL^IBCNS1(DFN,"IBINSCO",3,DT,0)  ;IB*2.0*519 allow WNRs and Indemnity plans
"RTN","IBCNBLL",308,0)
 Q +$G(IBINSCO(0))
"RTN","IBCNBLL",309,0)
 ;
"RTN","IBCNBLL",310,0)
GTMFLG(IBBUFDA) ;Check if Medicare
"RTN","IBCNBLL",311,0)
 ; IB*2.0*549 Added method
"RTN","IBCNBLL",312,0)
 N MWNRIEN,MWNRFLG
"RTN","IBCNBLL",313,0)
 S MWNRFLG=0
"RTN","IBCNBLL",314,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",315,0)
 S MWNRFLG=0
"RTN","IBCNBLL",316,0)
 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",317,0)
 Q MWNRFLG
"RTN","IBCNEDE1")
0^23^B50422313^B49194842
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,435,467,497,528,549,601**;21-MAR-94;Build 14
"RTN","IBCNEDE1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when appropriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME,PREL,IFSRC
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S IFSRC=$O(^IBE(355.12,"C","INTERFACILITY INS UPDATE",""))  ;10/24/14 *528* baa
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",31,0)
 ;
"RTN","IBCNEDE1",32,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",33,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",34,0)
 ;
"RTN","IBCNEDE1",35,0)
 S LOOPDT="" ; Date used to loop through the IB global
"RTN","IBCNEDE1",36,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 . S IEN=""
"RTN","IBCNEDE1",38,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",39,0)
 .. ;
"RTN","IBCNEDE1",40,0)
 .. ; IBCN 10/24/14 *528* baa
"RTN","IBCNEDE1",41,0)
 .. ;  prevent when SOURCE OF INFORMATION field = "Inter-facility Insurance update.
"RTN","IBCNEDE1",42,0)
 .. I $P($G(^IBA(355.33,IEN,0)),U,3)=IFSRC Q
"RTN","IBCNEDE1",43,0)
 .. ; IBCN END MOD
"RTN","IBCNEDE1",44,0)
 .. ;
"RTN","IBCNEDE1",45,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",46,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",47,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",48,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",51,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",52,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",53,0)
 .. ; Don't extract ePharmacy buffer entries - IB*2*435
"RTN","IBCNEDE1",54,0)
 .. I +$P($G(^IBA(355.33,IEN,0)),U,17) Q
"RTN","IBCNEDE1",55,0)
 .. ;
"RTN","IBCNEDE1",56,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",57,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",58,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",59,0)
 .. ;
"RTN","IBCNEDE1",60,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",61,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",62,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",63,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",64,0)
 .. ;
"RTN","IBCNEDE1",65,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",66,0)
 .. S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18)
"RTN","IBCNEDE1",67,0)
 .. S:'SRVICEDT SRVICEDT=DT                         ; Service Date
"RTN","IBCNEDE1",68,0)
 .. ;
"RTN","IBCNEDE1",69,0)
 .. ; IB*2.0*549 Removed following line
"RTN","IBCNEDE1",70,0)
 .. ;I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNEDE1",71,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",72,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",73,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",74,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",75,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",76,0)
 .. ;
"RTN","IBCNEDE1",77,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",78,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",79,0)
 .. ;
"RTN","IBCNEDE1",80,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",83,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",84,0)
 .. ;
"RTN","IBCNEDE1",85,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",86,0)
 .. ;  date range
"RTN","IBCNEDE1",87,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",88,0)
 .. ;
"RTN","IBCNEDE1",89,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",90,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",91,0)
 .. ;
"RTN","IBCNEDE1",92,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",93,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",94,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",95,0)
 .. ;
"RTN","IBCNEDE1",96,0)
 .. ; set pat. relationship to "self" if it's blank
"RTN","IBCNEDE1",97,0)
 .. D SETREL(IEN)
"RTN","IBCNEDE1",98,0)
 .. ;
"RTN","IBCNEDE1",99,0)
 .. ; make sure that service type codes are set
"RTN","IBCNEDE1",100,0)
 .. I '+$G(^IBA(355.33,IEN,80)) D SETSTC^IBCNERTQ(IEN)
"RTN","IBCNEDE1",101,0)
 .. ;
"RTN","IBCNEDE1",102,0)
 .. ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNEDE1",103,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",104,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",105,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",106,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",107,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",108,0)
 .. ; not included
"RTN","IBCNEDE1",109,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",110,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",111,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",112,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",113,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",114,0)
 Q
"RTN","IBCNEDE1",115,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",116,0)
 ;
"RTN","IBCNEDE1",117,0)
 K SIDARRAY
"RTN","IBCNEDE1",118,0)
 S BSID=$P($G(^IBA(355.33,IEN,90)),U,3)   ; Subscriber ID from buffer (IB*2.0*497 - vd)
"RTN","IBCNEDE1",119,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U)    ; Patient ID from buffer
"RTN","IBCNEDE1",120,0)
 S PREL=$P($G(^IBA(355.33,IEN,60)),U,14)  ; Pat. relationship from buffer
"RTN","IBCNEDE1",121,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",122,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",123,0)
 S SIDCNT=$P(SIDDATA,U,2)                 ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",124,0)
 ;
"RTN","IBCNEDE1",125,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q   ; update buffer w/ bang & quit - no subscriber id
"RTN","IBCNEDE1",126,0)
 I PREL'=18 D  Q
"RTN","IBCNEDE1",127,0)
 .I PATID="" D BUFF^IBCNEUT2(IEN,23) Q  ; update buffer w/ bang & quit - no patient id
"RTN","IBCNEDE1",128,0)
 .D SET(IEN,OVRFRESH,1,"") ; set TQ entry
"RTN","IBCNEDE1",129,0)
 .Q
"RTN","IBCNEDE1",130,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",131,0)
 S SID=""
"RTN","IBCNEDE1",132,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",133,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",134,0)
 Q
"RTN","IBCNEDE1",135,0)
 ;
"RTN","IBCNEDE1",136,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",137,0)
 ;
"RTN","IBCNEDE1",138,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",139,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,90)) ; Original group string (IB*2.0*497 - vd)
"RTN","IBCNEDE1",140,0)
 S ORGRPNUM=$P(ORGRPSTR,U,2) ;Original group number (IB*2.0*497 - vd)
"RTN","IBCNEDE1",141,0)
 S ORGRPNAM=$P(ORGRPSTR,U,1) ;Original group name (IB*2.0*497 - vd)
"RTN","IBCNEDE1",142,0)
 S ORGSUBCR=$P(ORGRPSTR,U,3) ; Original subscriber (IB*2.0*497 - vd)
"RTN","IBCNEDE1",143,0)
 ;
"RTN","IBCNEDE1",144,0)
 Q
"RTN","IBCNEDE1",145,0)
 ;
"RTN","IBCNEDE1",146,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",147,0)
 N DATA5
"RTN","IBCNEDE1",148,0)
 D RET
"RTN","IBCNEDE1",149,0)
 ;
"RTN","IBCNEDE1",150,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",151,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",152,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",153,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",154,0)
 ;
"RTN","IBCNEDE1",155,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",156,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",157,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",158,0)
 ;
"RTN","IBCNEDE1",159,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",160,0)
 ;
"RTN","IBCNEDE1",161,0)
 S DATA5=$$GET1^DIQ(355.33,BUFFIEN_",",.03,"I") ; IB*2*601/DM copy SOI IEN to TQ
"RTN","IBCNEDE1",162,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH),DATA5) ; File TQ entry
"RTN","IBCNEDE1",163,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",164,0)
 ;
"RTN","IBCNEDE1",165,0)
 Q
"RTN","IBCNEDE1",166,0)
 ;
"RTN","IBCNEDE1",167,0)
SETREL(IEN) ; set pat. relationship to "self"
"RTN","IBCNEDE1",168,0)
 N DA,DIE,DR,X,Y
"RTN","IBCNEDE1",169,0)
 I $P($G(^IBA(355.33,IEN,60)),U,14)="" S DIE="^IBA(355.33,",DA=IEN,DR="60.14///SELF" D ^DIE
"RTN","IBCNEDE1",170,0)
 Q
"RTN","IBCNEDE7")
0^24^B28965288^B27880444
"RTN","IBCNEDE7",1,0)
IBCNEDE7 ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE7",2,0)
 ;;2.0;INTEGRATED BILLING;**271,416,438,497,601**;21-MAR-94;Build 14
"RTN","IBCNEDE7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE7",4,0)
 ;
"RTN","IBCNEDE7",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE7",6,0)
 ; 
"RTN","IBCNEDE7",7,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE7",8,0)
 ; Input Parameter:
"RTN","IBCNEDE7",9,0)
 ;
"RTN","IBCNEDE7",10,0)
 ; EXTNUM is either 1, 2, 3 to represent the different extracts
"RTN","IBCNEDE7",11,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE7",12,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE7",13,0)
 ; 3 - Non Verified
"RTN","IBCNEDE7",14,0)
 ;        IB*2*416 removed extract#4 for No Insurance
"RTN","IBCNEDE7",15,0)
 ;
"RTN","IBCNEDE7",16,0)
 ; Output:
"RTN","IBCNEDE7",17,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE7",18,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE7",19,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE7",20,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE7",21,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE7",22,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE7",23,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE7",24,0)
 ;          extract routine.
"RTN","IBCNEDE7",25,0)
 ;    Max Number of entries you are allowed to set into the eIV 
"RTN","IBCNEDE7",26,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE7",27,0)
 ;          unlimited.
"RTN","IBCNEDE7",28,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE7",29,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE7",30,0)
 ;          0 will not
"RTN","IBCNEDE7",31,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE7",32,0)
 ;
"RTN","IBCNEDE7",33,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE7",34,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE7",35,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,1:0)
"RTN","IBCNEDE7",36,0)
 I 'OK G EXIT
"RTN","IBCNEDE7",37,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE7",38,0)
 ;
"RTN","IBCNEDE7",39,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE7",40,0)
 ;
"RTN","IBCNEDE7",41,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE7",42,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE7",43,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE7",44,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE7",45,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE7",46,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE7",47,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE7",48,0)
EXIT ;
"RTN","IBCNEDE7",49,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE7",50,0)
 I EXTNUM=3 D
"RTN","IBCNEDE7",51,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE7",52,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE7",53,0)
 ;
"RTN","IBCNEDE7",54,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE,DATA5) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE7",55,0)
 ;
"RTN","IBCNEDE7",56,0)
 ; DATA1, DATA2, ORIG & DATA5 are "^" delimited variables containing the data
"RTN","IBCNEDE7",57,0)
 ; listed below
"RTN","IBCNEDE7",58,0)
 ;
"RTN","IBCNEDE7",59,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE7",60,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE7",61,0)
 ;
"RTN","IBCNEDE7",62,0)
 N BUFFIEN,FDA,IENARRAY,ERROR,TRANSNO,DFN,SRVCODE
"RTN","IBCNEDE7",63,0)
 ; do not allow "NO PAYER" entries
"RTN","IBCNEDE7",64,0)
 I $P(DATA1,U,2)=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDE7",65,0)
 ; get service code (default to 30)
"RTN","IBCNEDE7",66,0)
 S BUFFIEN=$P(DATA1,U,4),SRVCODE=$S(BUFFIEN:$P($G(^IBA(355.33,BUFFIEN,80)),U),1:29)  ; ib*2*497  replace '30' to '29' in Select statement default value.  29 is the IEN for code 30 in file 365.013
"RTN","IBCNEDE7",67,0)
 ;
"RTN","IBCNEDE7",68,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE7",69,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE7",70,0)
 ;
"RTN","IBCNEDE7",71,0)
 S DFN=$P(DATA1,U)
"RTN","IBCNEDE7",72,0)
 S FDA(365.1,"+1,",.02)=DFN                 ; patient DFN
"RTN","IBCNEDE7",73,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE7",74,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE7",75,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE7",76,0)
 S FDA(365.1,"+1,",.05)=BUFFIEN             ; ien of buffer
"RTN","IBCNEDE7",77,0)
 ;
"RTN","IBCNEDE7",78,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE7",79,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE7",80,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE7",81,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE7",82,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE7",83,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE7",84,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE7",85,0)
 S FDA(365.1,"+1,",.19)=$P(DATA1,U,8)        ; Patient ID
"RTN","IBCNEDE7",86,0)
 S FDA(365.1,"+1,",.2)=SRVCODE               ; Service code
"RTN","IBCNEDE7",87,0)
 ;
"RTN","IBCNEDE7",88,0)
 I $D(DATA2) D
"RTN","IBCNEDE7",89,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE7",90,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE7",91,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE7",92,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE7",93,0)
 ;
"RTN","IBCNEDE7",94,0)
 I $D(ORIG) D
"RTN","IBCNEDE7",95,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE7",96,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE7",97,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE7",98,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE7",99,0)
 ;
"RTN","IBCNEDE7",100,0)
 I $D(DATA5) D
"RTN","IBCNEDE7",101,0)
 . S FDA(365.1,"+1,",3.02)=$P(DATA5,U)   ; source of information ien, IB*2*601/DM
"RTN","IBCNEDE7",102,0)
 ;
"RTN","IBCNEDE7",103,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE7",104,0)
 ;
"RTN","IBCNEDE7",105,0)
 I $G(ERROR("DIERR",1,"TEXT",1))'="" D  ; MailMan msg
"RTN","IBCNEDE7",106,0)
 . N MGRP,XMSUB,MSG
"RTN","IBCNEDE7",107,0)
 . ;
"RTN","IBCNEDE7",108,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE7",109,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE7",110,0)
 . ;
"RTN","IBCNEDE7",111,0)
 . S XMSUB="eIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE7",112,0)
 . S MSG(1)="Tried to create an entry in the eIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE7",113,0)
 . S MSG(2)="success."
"RTN","IBCNEDE7",114,0)
 . S MSG(3)=""
"RTN","IBCNEDE7",115,0)
 . S MSG(4)="Error encountered: "_$G(ERROR("DIERR",1,"TEXT",1))
"RTN","IBCNEDE7",116,0)
 . S MSG(5)=""
"RTN","IBCNEDE7",117,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE7",118,0)
 . S MSG(7)=""
"RTN","IBCNEDE7",119,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE7",120,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNEDE7",121,0)
 . S MSG(10)="Extract: "_$P($G(DATA2),U,1)
"RTN","IBCNEDE7",122,0)
 . S MSG(11)="Payer: "
"RTN","IBCNEDE7",123,0)
 . S:$P(DATA1,U,2)'="" MSG(11)=MSG(11)_$P($G(^IBE(365.12,$P(DATA1,U,2),0)),U,1)
"RTN","IBCNEDE7",124,0)
 . S MSG(12)="Please call the Help Desk about this problem."
"RTN","IBCNEDE7",125,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE7",126,0)
 ;
"RTN","IBCNEDE7",127,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE7",128,0)
 ;
"RTN","IBCNEDE7",129,0)
PYRACTV(PIEN) ; check if given payer is nationally active for eIV
"RTN","IBCNEDE7",130,0)
 ; returns 1 if payer is nationally active, 0 otherwise
"RTN","IBCNEDE7",131,0)
 N APPIEN,RES
"RTN","IBCNEDE7",132,0)
 S RES=0
"RTN","IBCNEDE7",133,0)
 I +$G(PIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",134,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE7",135,0)
 I +$G(APPIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",136,0)
 I $P($G(^IBE(365.12,PIEN,1,APPIEN,0)),U,2)=1 S RES=1
"RTN","IBCNEDE7",137,0)
PYRACTVX ;
"RTN","IBCNEDE7",138,0)
 Q RES
"RTN","IBCNEDEP")
0^2^B94374860^B91001263
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;14-OCT-2015
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,506,533,549,601**;21-MAR-94;Build 14
"RTN","IBCNEDEP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    RETRYFLG = determines if a Transmitted message can be resent
"RTN","IBCNEDEP",11,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",12,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",13,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",15,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",16,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",17,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",18,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",19,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",20,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",21,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",22,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",23,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",24,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",25,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",26,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",27,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",28,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",29,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",30,0)
 ;
"RTN","IBCNEDEP",31,0)
EN ;  Entry point
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
 ;  Start processing of data
"RTN","IBCNEDEP",34,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",35,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",36,0)
 ;IB*533 RRA CREATE VARIABLES TO ACCOUNT FOR MAX SENT LIMITATIONS
"RTN","IBCNEDEP",37,0)
 N IBMAXCNT,IBSENT
"RTN","IBCNEDEP",38,0)
 S IBCNETOT=0,IBSENT=0
"RTN","IBCNEDEP",39,0)
 ;
"RTN","IBCNEDEP",40,0)
 S C1CODE=$O(^IBE(365.15,"B","C1",""))
"RTN","IBCNEDEP",41,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",42,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",43,0)
 S RETR=+$P(IBCNEP,U,6),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",44,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",45,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",46,0)
 S RETRYFLG=$P(IBCNEP,U,26)        ;set value to (#350.9, 51.26) - IB*2.0*506
"RTN","IBCNEDEP",47,0)
 S IBMAXCNT=$P(IBCNEP,U,15)   ;get HL7 MAXIMUM NUMBER - IB*533
"RTN","IBCNEDEP",48,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",49,0)
 ; Statuses
"RTN","IBCNEDEP",50,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",51,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",52,0)
 ;   4 = Hold
"RTN","IBCNEDEP",53,0)
 ;   6 = Retry
"RTN","IBCNEDEP",54,0)
 ;
"RTN","IBCNEDEP",55,0)
 ; If the status is 'HOLD' is this a 'Retry'?   -  IB*2.0*506
"RTN","IBCNEDEP",56,0)
 ;  DO HLD   ; this is not to be called unless the status of HOLD is reinstated...see HLD tag
"RTN","IBCNEDEP",57,0)
 ;  below and the code within ERROR^IBCNEHL3
"RTN","IBCNEDEP",58,0)
 ;
"RTN","IBCNEDEP",59,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",60,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",61,0)
 ;
"RTN","IBCNEDEP",62,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",63,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",64,0)
 S IEN=""
"RTN","IBCNEDEP",65,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",66,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",67,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",68,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",69,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",70,0)
 . ;
"RTN","IBCNEDEP",71,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",72,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",73,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",74,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",75,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",76,0)
 . ;
"RTN","IBCNEDEP",77,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",78,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",79,0)
 . ;
"RTN","IBCNEDEP",80,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",81,0)
 . I RETRYFLG="Y" D  Q     ; IB*2.0*506
"RTN","IBCNEDEP",82,0)
 .. ;
"RTN","IBCNEDEP",83,0)
 .. I '$$PYRACTV^IBCNEDE7(PAYR) Q    ; If Payer is not Nationally Active skip record  -  IB*2.0*506
"RTN","IBCNEDEP",84,0)
 .. ;
"RTN","IBCNEDEP",85,0)
 .. D SST^IBCNEUT2(IEN,6)    ; mark TQ entry status as 'retry'
"RTN","IBCNEDEP",86,0)
 .. Q
"RTN","IBCNEDEP",87,0)
 . ;
"RTN","IBCNEDEP",88,0)
 . D SST^IBCNEUT2(IEN,5)     ; if RETRYFLG=NO set TQ record to 'communication failure'
"RTN","IBCNEDEP",89,0)
 . ;
"RTN","IBCNEDEP",90,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",91,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",92,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",93,0)
 . ;
"RTN","IBCNEDEP",94,0)
 . ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",95,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",96,0)
 . ;
"RTN","IBCNEDEP",97,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",98,0)
 . ;
"RTN","IBCNEDEP",99,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",100,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",101,0)
 ;
"RTN","IBCNEDEP",102,0)
 ; Exit for stop request
"RTN","IBCNEDEP",103,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",104,0)
 ;
"RTN","IBCNEDEP",105,0)
RET ;  If status is 'Retry'     ; retries only exist if the RETRYFLG=YES - IB*2.0*506
"RTN","IBCNEDEP",106,0)
 S IEN=""
"RTN","IBCNEDEP",107,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",108,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",109,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",110,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",111,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",112,0)
 . ;
"RTN","IBCNEDEP",113,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",114,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",115,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",116,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",117,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",118,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",119,0)
 . ;
"RTN","IBCNEDEP",120,0)
 . ;  If retries are finished, set to communication failure  - IB*2.0*506
"RTN","IBCNEDEP",121,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",122,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",123,0)
 .. ;
"RTN","IBCNEDEP",124,0)
 .. ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",125,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",126,0)
 .. ;
"RTN","IBCNEDEP",127,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",128,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",129,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",130,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",131,0)
 .. ;
"RTN","IBCNEDEP",132,0)
 .. ;I VERID="V" D CERE^IBCNEDEQ      ; removed IB*2.0*506
"RTN","IBCNEDEP",133,0)
 . ; If generating retry, set eIV status to comm failure (5) for
"RTN","IBCNEDEP",134,0)
 . ; remaining related responses
"RTN","IBCNEDEP",135,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",136,0)
 ;
"RTN","IBCNEDEP",137,0)
 ; Exit for stop request
"RTN","IBCNEDEP",138,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",139,0)
 ;
"RTN","IBCNEDEP",140,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",141,0)
 ;
"RTN","IBCNEDEP",142,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",143,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",144,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",145,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",146,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",147,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",148,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",149,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",150,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",151,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",152,0)
 ... S VNUM=4
"RTN","IBCNEDEP",153,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",154,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",155,0)
 ... S VNUM=1
"RTN","IBCNEDEP",156,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",157,0)
 ;
"RTN","IBCNEDEP",158,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",159,0)
 ;  or identifications
"RTN","IBCNEDEP",160,0)
 N IHCNT,IBSTOP
"RTN","IBCNEDEP",161,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",162,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:$G(ZTSTOP)!$G(QFL)=1!($G(IBSTOP)=1)
"RTN","IBCNEDEP",163,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",164,0)
 . ;D ID
"RTN","IBCNEDEP",165,0)
 ;
"RTN","IBCNEDEP",166,0)
EXIT ;  Finish
"RTN","IBCNEDEP",167,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",168,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",169,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",170,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",171,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RETRYFLG,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",172,0)
 K ZMID,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",173,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA,PATID,C1CODE
"RTN","IBCNEDEP",174,0)
 Q
"RTN","IBCNEDEP",175,0)
 ;
"RTN","IBCNEDEP",176,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",177,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",178,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",179,0)
 ;
"RTN","IBCNEDEP",180,0)
 S DFN=""
"RTN","IBCNEDEP",181,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!($G(IBSTOP)=1)
"RTN","IBCNEDEP",182,0)
 . ;
"RTN","IBCNEDEP",183,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",184,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",185,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",186,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",187,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",188,0)
 . ;
"RTN","IBCNEDEP",189,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",190,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)!($G(IBSTOP)=1)
"RTN","IBCNEDEP",191,0)
 .. ;
"RTN","IBCNEDEP",192,0)
 .. ; IB*2.0*549 - quit if test site and not a valid test case
"RTN","IBCNEDEP",193,0)
 .. Q:'$$XMITOK^IBCNETST(IEN)
"RTN","IBCNEDEP",194,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",195,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",196,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",197,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",198,0)
 .. ;
"RTN","IBCNEDEP",199,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",200,0)
 .. ;
"RTN","IBCNEDEP",201,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",202,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",203,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",204,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",205,0)
 .. ;
"RTN","IBCNEDEP",206,0)
 .. ;  If not successful
"RTN","IBCNEDEP",207,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",208,0)
 .. ;  If successful
"RTN","IBCNEDEP",209,0)
 .. ; increment counter and quit if reached IBMAXCNT IB*533
"RTN","IBCNEDEP",210,0)
 .. S IBSENT=IBSENT+1
"RTN","IBCNEDEP",211,0)
 .. I IBMAXCNT'="",IBSENT+1>IBMAXCNT S IBSTOP=1
"RTN","IBCNEDEP",212,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",213,0)
 .. I BNDL D
"RTN","IBCNEDEP",214,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",215,0)
 ;
"RTN","IBCNEDEP",216,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",217,0)
 Q
"RTN","IBCNEDEP",218,0)
 ;
"RTN","IBCNEDEP",219,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",220,0)
 ;
"RTN","IBCNEDEP",221,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",222,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",223,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",224,0)
 ;
"RTN","IBCNEDEP",225,0)
 S DFN=""
"RTN","IBCNEDEP",226,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",227,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",228,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",229,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",230,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",231,0)
 . ;
"RTN","IBCNEDEP",232,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",233,0)
 . ;
"RTN","IBCNEDEP",234,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",235,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",236,0)
 . ;
"RTN","IBCNEDEP",237,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",238,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",239,0)
 .. D PROC
"RTN","IBCNEDEP",240,0)
 .. ;
"RTN","IBCNEDEP",241,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",242,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",243,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",244,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",245,0)
 .. ;
"RTN","IBCNEDEP",246,0)
 .. ;  If not successful
"RTN","IBCNEDEP",247,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",248,0)
 .. ;
"RTN","IBCNEDEP",249,0)
 .. ;  If successful
"RTN","IBCNEDEP",250,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",251,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",252,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",253,0)
 ;
"RTN","IBCNEDEP",254,0)
 Q
"RTN","IBCNEDEP",255,0)
 ;
"RTN","IBCNEDEP",256,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",257,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",258,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",259,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",260,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",261,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",262,0)
 S FRDT=$P(TRANSR,U,17),PATID=$P(TRANSR,U,19)
"RTN","IBCNEDEP",263,0)
 ;
"RTN","IBCNEDEP",264,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",265,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",266,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",267,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",268,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",269,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",270,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",271,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",272,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",273,0)
 . S CNT=CNT+1 I TOT=0 S TOT=1
"RTN","IBCNEDEP",274,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",275,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",276,0)
 ;
"RTN","IBCNEDEP",277,0)
 ;  Build multi-field NTE segment
"RTN","IBCNEDEP",278,0)
 D NTE^IBCNEHLQ(1)
"RTN","IBCNEDEP",279,0)
 ;  If build successful
"RTN","IBCNEDEP",280,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",281,0)
 ; IB*2.0*601 - Added NTE 2 & 3
"RTN","IBCNEDEP",282,0)
 D NTE^IBCNEHLQ(2)
"RTN","IBCNEDEP",283,0)
 ; If build successful Second NTE segment
"RTN","IBCNEDEP",284,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",285,0)
 D NTE^IBCNEHLQ(3)
"RTN","IBCNEDEP",286,0)
 ; set the third NTE segment
"RTN","IBCNEDEP",287,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",288,0)
 K NTE
"RTN","IBCNEDEP",289,0)
 Q
"RTN","IBCNEDEP",290,0)
 ;
"RTN","IBCNEDEP",291,0)
 ; The tag HLD was found at the top of this routine.  It was moved
"RTN","IBCNEDEP",292,0)
 ; to its own procedure because it isn't needed anymore at this time.
"RTN","IBCNEDEP",293,0)
 ; Responses will not have the status of HOLD starting with patch IB*2.0*506.
"RTN","IBCNEDEP",294,0)
 ; If HOLD is reinstated, then the logic below must be rewritten for the
"RTN","IBCNEDEP",295,0)
 ; appropriate retry logic at that time.
"RTN","IBCNEDEP",296,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",297,0)
 Q  ; Quit added as safety valve
"RTN","IBCNEDEP",298,0)
 ;S IEN=""
"RTN","IBCNEDEP",299,0)
 ;F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",300,0)
 ;. ; Update count for periodic check
"RTN","IBCNEDEP",301,0)
 ;. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",302,0)
 ;. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",303,0)
 ;. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",304,0)
 ;. ;
"RTN","IBCNEDEP",305,0)
 ;. S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",306,0)
 ;. ;
"RTN","IBCNEDEP",307,0)
 ;. ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",308,0)
 ;. ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",309,0)
 ;. ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",310,0)
 ;. I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",311,0)
 ;. ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",312,0)
 ;. ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",313,0)
 ;.. ;
"RTN","IBCNEDEP",314,0)
 ;.. D SST^IBCNEUT2(IEN,6)     ; set TQ status to 'retry'
"RTN","IBCNEDEP",315,0)
 Q
"RTN","IBCNEDEQ")
0^25^B29176147^B28120431
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process eIV Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,601**;21-MAR-94;Build 14
"RTN","IBCNEDEQ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)_"."
"RTN","IBCNEDEQ",24,0)
 S MSG(4)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",25,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",26,0)
 S XMSUB="eIV HL7 Creation Error"
"RTN","IBCNEDEQ",27,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",28,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",29,0)
 Q
"RTN","IBCNEDEQ",30,0)
 ;
"RTN","IBCNEDEQ",31,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",32,0)
 ;
"RTN","IBCNEDEQ",33,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",34,0)
 ;
"RTN","IBCNEDEQ",35,0)
 ;  Parameters
"RTN","IBCNEDEQ",36,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",37,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",38,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",39,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",40,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",41,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",42,0)
 ;
"RTN","IBCNEDEQ",43,0)
 I 'FMSG G CERRQ
"RTN","IBCNEDEQ",44,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",45,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",46,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",47,0)
 S MSG(3)="A single attempt was made to electronically confirm the insurance"
"RTN","IBCNEDEQ",48,0)
 S MSG(4)="with this payer."
"RTN","IBCNEDEQ",49,0)
 ;
"RTN","IBCNEDEQ",50,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",51,0)
 ;
"RTN","IBCNEDEQ",52,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",53,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",54,0)
CERRQ Q
"RTN","IBCNEDEQ",55,0)
 ;
"RTN","IBCNEDEQ",56,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",57,0)
 ;
"RTN","IBCNEDEQ",58,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",59,0)
 ;
"RTN","IBCNEDEQ",60,0)
 ;  Parameters
"RTN","IBCNEDEQ",61,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",62,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",63,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",64,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",65,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",66,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",67,0)
 ;
"RTN","IBCNEDEQ",68,0)
 I 'FMSG G CEREQ
"RTN","IBCNEDEQ",69,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",70,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",71,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",72,0)
 ;
"RTN","IBCNEDEQ",73,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",76,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",77,0)
CEREQ Q
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",80,0)
 ;
"RTN","IBCNEDEQ",81,0)
 ;  Called from tag SCC within this routine
"RTN","IBCNEDEQ",82,0)
 ;
"RTN","IBCNEDEQ",83,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",84,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",85,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",86,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",87,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",88,0)
 ;
"RTN","IBCNEDEQ",89,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",90,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",91,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",92,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",93,0)
 K DD,DO
"RTN","IBCNEDEQ",94,0)
 D FILE^DICN
"RTN","IBCNEDEQ",95,0)
 K DO
"RTN","IBCNEDEQ",96,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",97,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",98,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",99,0)
 ;
"RTN","IBCNEDEQ",100,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",101,0)
 Q
"RTN","IBCNEDEQ",102,0)
 ;
"RTN","IBCNEDEQ",103,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",104,0)
 ;
"RTN","IBCNEDEQ",105,0)
 ;  Called from IBCNEHL3 tag SCC within this routine
"RTN","IBCNEDEQ",106,0)
 ;
"RTN","IBCNEDEQ",107,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",108,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",109,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",110,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",111,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",112,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",113,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",114,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",115,0)
 ;
"RTN","IBCNEDEQ",116,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY,ERR
"RTN","IBCNEDEQ",117,0)
 ;
"RTN","IBCNEDEQ",118,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",119,0)
 K DD,DO
"RTN","IBCNEDEQ",120,0)
 D FILE^DICN
"RTN","IBCNEDEQ",121,0)
 K DO
"RTN","IBCNEDEQ",122,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",123,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",124,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",125,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",126,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",127,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",128,0)
 ;
"RTN","IBCNEDEQ",129,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",130,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",131,0)
 ;
"RTN","IBCNEDEQ",132,0)
 K DIERR ; IB*2*601/DM we've seen this previously set elsewhere  
"RTN","IBCNEDEQ",133,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",134,0)
 I $D(ERR("DIERR",1,"TEXT",1)) D
"RTN","IBCNEDEQ",135,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",136,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",137,0)
 .. S MCT=MCT+1,MSG(MCT)=$G(ERR("DIERR",VEN,"TEXT",1))
"RTN","IBCNEDEQ",138,0)
 . ;
"RTN","IBCNEDEQ",139,0)
 . S MCT=MCT+1,MSG(MCT)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",140,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",141,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",142,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",143,0)
 Q
"RTN","IBCNEDEQ",144,0)
 ;
"RTN","IBCNEDEQ",145,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",146,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",147,0)
 S XMSUB="eIV Communication Timeout"
"RTN","IBCNEDEQ",148,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",149,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",150,0)
 ;
"RTN","IBCNEDEQ",151,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",152,0)
 ;
"RTN","IBCNEDEQ",153,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",154,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",155,0)
 Q
"RTN","IBCNEDEQ",156,0)
 ;
"RTN","IBCNEDEQ",157,0)
SSN(DFN) ; Retrieve patient's ssn and return last 4 digits
"RTN","IBCNEDEQ",158,0)
 ; Subsequently added Date of Birth to display as well
"RTN","IBCNEDEQ",159,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDEQ",160,0)
 N SSN,DOB
"RTN","IBCNEDEQ",161,0)
 S SSN=$$GETSSN^IBCNEDE5(DFN)
"RTN","IBCNEDEQ",162,0)
 S DOB=$$GETDOB(DFN)
"RTN","IBCNEDEQ",163,0)
 I SSN="",DOB="" Q ""
"RTN","IBCNEDEQ",164,0)
 I SSN="" Q " (DOB: "_DOB_")"
"RTN","IBCNEDEQ",165,0)
 S SSN=" (SSN: xxx-xx-"_$E(SSN,6,9)
"RTN","IBCNEDEQ",166,0)
 I DOB'="" S DOB="  DOB: "_DOB
"RTN","IBCNEDEQ",167,0)
 Q SSN_DOB_")"
"RTN","IBCNEDEQ",168,0)
 ;
"RTN","IBCNEDEQ",169,0)
GETDOB(DFN) ;
"RTN","IBCNEDEQ",170,0)
 Q:'$G(DFN) "Unknown"
"RTN","IBCNEDEQ",171,0)
 N DOB
"RTN","IBCNEDEQ",172,0)
 S DOB=$P($G(^DPT(DFN,0)),U,3)
"RTN","IBCNEDEQ",173,0)
 S DOB=$S('DOB:"Unknown",1:$$FMTE^XLFDT(DOB,"5Z"))
"RTN","IBCNEDEQ",174,0)
 Q DOB
"RTN","IBCNEDEQ",175,0)
 ;
"RTN","IBCNEDEQ",176,0)
SCC ;  If successfully creates an HL7 msg
"RTN","IBCNEDEQ",177,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEQ",178,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEQ",179,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEQ",180,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEQ",181,0)
 D ^DIE
"RTN","IBCNEDEQ",182,0)
 ;
"RTN","IBCNEDEQ",183,0)
 ;  Create Response Record
"RTN","IBCNEDEQ",184,0)
 S RSTYPE="O" D RESP
"RTN","IBCNEDEQ",185,0)
 ;
"RTN","IBCNEDEQ",186,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEQ",187,0)
 D SUB
"RTN","IBCNEDEQ",188,0)
 ;
"RTN","IBCNEDEQ",189,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEQ",190,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEQ",191,0)
 Q
"RTN","IBCNEHL1")
0^3^B155699201^B188076625
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497,506,549,593,601**;21-MAR-94;Build 14
"RTN","IBCNEHL1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    ACK       - Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",13,0)
 ;    ERACT     - Error Action
"RTN","IBCNEHL1",14,0)
 ;    ERCON     - Error Condition
"RTN","IBCNEHL1",15,0)
 ;    ERFLG     - Error quit flag
"RTN","IBCNEHL1",16,0)
 ;    ERTXT     - Error Message Text
"RTN","IBCNEHL1",17,0)
 ;    HL        - Array of HL7 variables
"RTN","IBCNEHL1",18,0)
 ;    IBSEG     - Optional, array of fields in segment
"RTN","IBCNEHL1",19,0)
 ;    IIVSTAT   - EC generated flag interpreting status of response
"RTN","IBCNEHL1",20,0)
 ;                 1 = + (auto-update requirement)
"RTN","IBCNEHL1",21,0)
 ;                 6 = -
"RTN","IBCNEHL1",22,0)
 ;                 V = #
"RTN","IBCNEHL1",23,0)
 ;                 MBI% = %   ; will not receive from FSC, derived in FIL^IBCNEHL6
"RTN","IBCNEHL1",24,0)
 ;                 MBI# = #   ; will not receive from FSC, derived in FIL^IBCNEHL6
"RTN","IBCNEHL1",25,0)
 ;    MAP       - Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",26,0)
 ;    MSGID     - Original Message Control ID
"RTN","IBCNEHL1",27,0)
 ;    RIEN      - Response Record IEN
"RTN","IBCNEHL1",28,0)
 ;    SEG       - HL7 Segment Name
"RTN","IBCNEHL1",29,0)
 ;
"RTN","IBCNEHL1",30,0)
EN ; Entry Point
"RTN","IBCNEHL1",31,0)
 N ACK,AUTO,EBDA,ERACT,ERCON,ERFLG,ERROR,ERTXT,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN
"RTN","IBCNEHL1",32,0)
 N MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP
"RTN","IBCNEHL1",33,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",34,0)
 ;
"RTN","IBCNEHL1",35,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",36,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",37,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",38,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",39,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21   ; These are X12 codes mapped from EC to VistA
"RTN","IBCNEHL1",40,0)
 S MAP("MBI%")=26,MAP("MBI#")=27   ; These are NOT X12 codes from FSC - we derive them only for MBI responses
"RTN","IBCNEHL1",41,0)
 ;
"RTN","IBCNEHL1",42,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",43,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",44,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",45,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",46,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",47,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",48,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",49,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",50,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",51,0)
 .;
"RTN","IBCNEHL1",52,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",53,0)
 .;
"RTN","IBCNEHL1",54,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Contact Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Patient Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",63,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",66,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",69,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",72,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",75,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",78,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",81,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",84,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",102,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 .;
"RTN","IBCNEHL1",104,0)
 .; Notes Segment
"RTN","IBCNEHL1",105,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 .;
"RTN","IBCNEHL1",107,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",108,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",110,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",111,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",112,0)
 . ;
"RTN","IBCNEHL1",113,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",114,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",115,0)
 .;
"RTN","IBCNEHL1",116,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",117,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",118,0)
 ;
"RTN","IBCNEHL1",119,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",120,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",121,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",122,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",123,0)
 .Q
"RTN","IBCNEHL1",124,0)
 D FIL
"RTN","IBCNEHL1",125,0)
 Q
"RTN","IBCNEHL1",126,0)
 ;
"RTN","IBCNEHL1",127,0)
 ; =================================================================
"RTN","IBCNEHL1",128,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",129,0)
 ;
"RTN","IBCNEHL1",130,0)
 N BUFF,DATA,ERROR,IENS,MIL,OKAY,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,XX   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",131,0)
 ;
"RTN","IBCNEHL1",132,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",133,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",134,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",135,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",136,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",137,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",138,0)
 S XX=$$GET1^DIQ(2.312,IENS,7.01,"I")
"RTN","IBCNEHL1",139,0)
 I ISSUB,XX="" S DATA(2.312,IENS,7.01)=$P(RDATA13,U)    ; Name
"RTN","IBCNEHL1",140,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.01,"I")
"RTN","IBCNEHL1",141,0)
 I XX="" S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2)         ; DOB
"RTN","IBCNEHL1",142,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.05,"I")
"RTN","IBCNEHL1",143,0)
 I XX="" S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3)         ; SSN
"RTN","IBCNEHL1",144,0)
 S XX=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNEHL1",145,0)
 I ISSUB,XX="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8)      ; Whose insurance
"RTN","IBCNEHL1",146,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",147,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01)
"RTN","IBCNEHL1",148,0)
 S XX=$$GET1^DIQ(2.312,IENS,4.03,"I")
"RTN","IBCNEHL1",149,0)
 I ISSUB,XX="",PREL'="" D
"RTN","IBCNEHL1",150,0)
 . S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",151,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",152,0)
 S DATA(2.312,IENS,1.03)=TSTAMP                         ; Date last verified
"RTN","IBCNEHL1",153,0)
 S DATA(2.312,IENS,1.04)=""                            ; Last verified by
"RTN","IBCNEHL1",154,0)
 S DATA(2.312,IENS,1.05)=TSTAMP                         ; Date last edited
"RTN","IBCNEHL1",155,0)
 S DATA(2.312,IENS,1.06)=""                            ; Last edited by
"RTN","IBCNEHL1",156,0)
 S DATA(2.312,IENS,1.09)=5                              ; Source of info = eIV
"RTN","IBCNEHL1",157,0)
 ;
"RTN","IBCNEHL1",158,0)
 ; Set Subscriber address Fields if none of the fields are currently defined
"RTN","IBCNEHL1",159,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",160,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.06,"I")       ; Current Ins Street Line 1
"RTN","IBCNEHL1",161,0)
 I XX="" D
"RTN","IBCNEHL1",162,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.07,"I")     ; Current Ins Street Line 2
"RTN","IBCNEHL1",163,0)
 . Q:XX'=""
"RTN","IBCNEHL1",164,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.08,"I")     ; Current Ins City
"RTN","IBCNEHL1",165,0)
 . Q:XX'=""
"RTN","IBCNEHL1",166,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.09,"I")     ; Current Ins State
"RTN","IBCNEHL1",167,0)
 . Q:XX'=""
"RTN","IBCNEHL1",168,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.1,"I")      ; Current Ins Zip
"RTN","IBCNEHL1",169,0)
 . Q:XX'=""
"RTN","IBCNEHL1",170,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.13,"I")     ; Current Ins Country
"RTN","IBCNEHL1",171,0)
 . Q:XX'=""
"RTN","IBCNEHL1",172,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.14,"I")     ; Current Ins Country Subdivision
"RTN","IBCNEHL1",173,0)
 . Q:XX'=""
"RTN","IBCNEHL1",174,0)
 . S DATA(2.312,IENS,3.06)=$P(RDATA5,U)     ; Street line 1
"RTN","IBCNEHL1",175,0)
 . S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2)   ; Street line 2
"RTN","IBCNEHL1",176,0)
 . S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3)   ; City
"RTN","IBCNEHL1",177,0)
 . S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4)   ; State
"RTN","IBCNEHL1",178,0)
 . S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5)    ; Zip
"RTN","IBCNEHL1",179,0)
 . S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6)   ; Country
"RTN","IBCNEHL1",180,0)
 . S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7)   ; Country subdivision
"RTN","IBCNEHL1",181,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",182,0)
 ;
"RTN","IBCNEHL1",183,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",184,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",185,0)
 I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",186,0)
 ;
"RTN","IBCNEHL1",187,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",188,0)
 K DATA
"RTN","IBCNEHL1",189,0)
 S DATA(2.312,IENS,4.04)="YES"
"RTN","IBCNEHL1",190,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",191,0)
 I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",192,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",193,0)
 I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",194,0)
 ; file new EB data
"RTN","IBCNEHL1",195,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",196,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",197,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",198,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",199,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",200,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",201,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",202,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",203,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",204,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",205,0)
 I BUFF D
"RTN","IBCNEHL1",206,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",207,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",208,0)
 .Q
"RTN","IBCNEHL1",209,0)
AUTOFILX ;
"RTN","IBCNEHL1",210,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",211,0)
 Q
"RTN","IBCNEHL1",212,0)
 ;
"RTN","IBCNEHL1",213,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",214,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",215,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",216,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",217,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",218,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",219,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",220,0)
 ;          1 - successful update
"RTN","IBCNEHL1",221,0)
 N DA,DATA12,DIAG,DIAG3121,ERFLG,ERROR,IENS,IENS365,IENS312,NODE,PROV,PROV332,REF,REF3129,Z,Z2
"RTN","IBCNEHL1",222,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",223,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",224,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",225,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",226,0)
 D FILE^DIE("ET","DATA12","ERROR")
"RTN","IBCNEHL1",227,0)
 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",228,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",229,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",230,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",231,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",232,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",233,0)
 ; update node 9 data
"RTN","IBCNEHL1",234,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",235,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",236,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",237,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",238,0)
 ; update node 10 data
"RTN","IBCNEHL1",239,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",240,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",241,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",242,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",243,0)
 ; update node 11 data
"RTN","IBCNEHL1",244,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",245,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",246,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",247,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",248,0)
GRPFILEX ;
"RTN","IBCNEHL1",249,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",250,0)
 ;
"RTN","IBCNEHL1",251,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",252,0)
 ; IB*2*601/DM FIL()routine moved to IBCNEHL6 to meet SAC guidelines due to size
"RTN","IBCNEHL1",253,0)
 D FIL^IBCNEHL6
"RTN","IBCNEHL1",254,0)
 Q
"RTN","IBCNEHL1",255,0)
 ;
"RTN","IBCNEHL1",256,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",257,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",258,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",259,0)
 ;
"RTN","IBCNEHL1",260,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",261,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",262,0)
 ;
"RTN","IBCNEHL1",263,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",264,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",265,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",266,0)
 ;
"RTN","IBCNEHL1",267,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",268,0)
 ;
"RTN","IBCNEHL1",269,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",270,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",271,0)
 S RES=0
"RTN","IBCNEHL1",272,0)
 I +$G(RIEN)'>0 Q RES                       ; Invalid ien for file 365
"RTN","IBCNEHL1",273,0)
 ;
"RTN","IBCNEHL1",274,0)
 ; IB*2.0*549 - Moved up the next 5 lines.  Originally, these lines were
"RTN","IBCNEHL1",275,0)
 ;              directly after line 'I $G(IIVSTAT)'=1 Q RES'
"RTN","IBCNEHL1",276,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",277,0)
 ;
"RTN","IBCNEHL1",278,0)
 ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",279,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))
"RTN","IBCNEHL1",280,0)
 S PIEN=$P(RDATA0,U,3)
"RTN","IBCNEHL1",281,0)
 ;
"RTN","IBCNEHL1",282,0)
 ; IB*2.0*549 - Moved up the next 2 lines.  Originally, these lines were
"RTN","IBCNEHL1",283,0)
 ;              directly after 'S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES'
"RTN","IBCNEHL1",284,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",285,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",286,0)
 ;
"RTN","IBCNEHL1",287,0)
 ; IB*2.0*549 - Added ',MWNRTYP' below to only quit for non-medicare policies
"RTN","IBCNEHL1",288,0)
 I $G(IIVSTAT)'=1,'MWNRTYP Q RES            ; Only auto-update 'active policy' responses
"RTN","IBCNEHL1",289,0)
 I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",290,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",291,0)
 ;
"RTN","IBCNEHL1",292,0)
 ;IB*2.0*593/HN Don't allow any entry with HMS SOI to auto-update
"RTN","IBCNEHL1",293,0)
 I $$GET1^DIQ(355.33,+$$GET1^DIQ(365,RIEN_",","BUFFER ENTRY","I")_",","SOURCE OF INFORMATION")="HMS" Q RES
"RTN","IBCNEHL1",294,0)
 ;
"RTN","IBCNEHL1",295,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",296,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",297,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",298,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",299,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",300,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",301,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",302,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",303,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",304,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",305,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",306,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",307,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",308,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",309,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",310,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",311,0)
 ..; check group number
"RTN","IBCNEHL1",312,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",313,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",314,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",315,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",316,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",317,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",318,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",319,0)
 ....Q
"RTN","IBCNEHL1",320,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",321,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",322,0)
 ....Q
"RTN","IBCNEHL1",323,0)
 ...Q
"RTN","IBCNEHL1",324,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",325,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",326,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",327,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",328,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",329,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",330,0)
 ....;           To     $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",331,0)
 ....I $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",332,0)
 ....S GOK=0
"RTN","IBCNEHL1",333,0)
 ....Q
"RTN","IBCNEHL1",334,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",335,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",336,0)
 ....;           To     $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",337,0)
 ....I $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",338,0)
 ....S GOK=0
"RTN","IBCNEHL1",339,0)
 ....Q
"RTN","IBCNEHL1",340,0)
 ...Q
"RTN","IBCNEHL1",341,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",342,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",343,0)
 ..Q
"RTN","IBCNEHL1",344,0)
 .Q
"RTN","IBCNEHL1",345,0)
 Q RES
"RTN","IBCNEHL1",346,0)
 ;
"RTN","IBCNEHL1",347,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; File eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",348,0)
 ; Input:   DFN     - Internal Patient IEN
"RTN","IBCNEHL1",349,0)
 ;          IEN312  - Insurance multiple #
"RTN","IBCNEHL1",350,0)
 ;          RIEN    - file 365 ien
"RTN","IBCNEHL1",351,0)
 ;          AFLG    - 1 if called from autoupdate
"RTN","IBCNEHL1",352,0)
 ;                    0 if called from ins. buffer process entry
"RTN","IBCNEHL1",353,0)
 ; Returns: "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR
"RTN","IBCNEHL1",354,0)
 ;          for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",355,0)
 ;
"RTN","IBCNEHL1",356,0)
 ;
"RTN","IBCNEHL1",357,0)
 Q $$EBFILE^IBCNEHL5(DFN,IEN312,RIEN,AFLG)  ;IB*2.0*549 moved because of routine size
"RTN","IBCNEHL1",358,0)
 ;
"RTN","IBCNEHL6")
0^4^B6767366^n/a
"RTN","IBCNEHL6",1,0)
IBCNEHL6 ;EDE/DM - HL7 Process Incoming RPI Continued ; 19-OCT-2017
"RTN","IBCNEHL6",2,0)
 ;;2.0;INTEGRATED BILLING;**601**;21-MAR-94;Build 14
"RTN","IBCNEHL6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL6",4,0)
 ;
"RTN","IBCNEHL6",5,0)
 Q
"RTN","IBCNEHL6",6,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL6",7,0)
 ;
"RTN","IBCNEHL6",8,0)
 ; Input Variables
"RTN","IBCNEHL6",9,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL6",10,0)
 ;
"RTN","IBCNEHL6",11,0)
 ; If no record IEN, quit
"RTN","IBCNEHL6",12,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL6",13,0)
 ;
"RTN","IBCNEHL6",14,0)
 N BUFF,CALLEDBY,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT,IBISMBI
"RTN","IBCNEHL6",15,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL6",16,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL6",17,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL6",18,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL6",19,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL6",20,0)
 S IBISMBI=+$$MBICHK^IBCNEUT7(BUFF) ; IB*2*601/DM
"RTN","IBCNEHL6",21,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL6",22,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL6",23,0)
 ;
"RTN","IBCNEHL6",24,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL6",25,0)
 ; send a warning email message
"RTN","IBCNEHL6",26,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL6",27,0)
 ;
"RTN","IBCNEHL6",28,0)
 ; IB*2.0*506 Removed the following line of code to Treat all AAA Action Codes
"RTN","IBCNEHL6",29,0)
 ; as though the Payer/FSC Responded.
"RTN","IBCNEHL6",30,0)
 ;I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT^IBCNEHL3
"RTN","IBCNEHL6",31,0)
 ;
"RTN","IBCNEHL6",32,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL6",33,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL6",34,0)
 ;
"RTN","IBCNEHL6",35,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL6",36,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL6",37,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL6",38,0)
 ;
"RTN","IBCNEHL6",39,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL6",40,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL6",41,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL6",42,0)
 ;
"RTN","IBCNEHL6",43,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL6",44,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL6",45,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL6",46,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL6",47,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL6",48,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL6",49,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL6",50,0)
 ;
"RTN","IBCNEHL6",51,0)
 ;  Check for error action
"RTN","IBCNEHL6",52,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D  G:'IBISMBI FILX   ; IB*2*601/DM  If MBI response keep processing
"RTN","IBCNEHL6",53,0)
 . S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U)
"RTN","IBCNEHL6",54,0)
 . D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE)
"RTN","IBCNEHL6",55,0)
 ;
"RTN","IBCNEHL6",56,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL6",57,0)
 S FILEIT=1
"RTN","IBCNEHL6",58,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL6",59,0)
 . I TQDATA="" Q
"RTN","IBCNEHL6",60,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL6",61,0)
 . S FILEIT=0
"RTN","IBCNEHL6",62,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL6",63,0)
 ;
"RTN","IBCNEHL6",64,0)
 ; -
"RTN","IBCNEHL6",65,0)
 ; ** Very important:  Variable 'CALLEDBY' must be set for this routine so
"RTN","IBCNEHL6",66,0)
 ;    that when a payer response is saved to the buffer either as an
"RTN","IBCNEHL6",67,0)
 ;    update to an existing buffer entry or as a new buffer entry a new
"RTN","IBCNEHL6",68,0)
 ;    eIV inquiry is not automatically triggered and resent to the payer again.
"RTN","IBCNEHL6",69,0)
 ;    When certain fields are changed in file #355.33 a trigger calls routine
"RTN","IBCNEHL6",70,0)
 ;    ^IBCNERTQ which can create and send a new inquiry in real time to the payer.
"RTN","IBCNEHL6",71,0)
 ;    We want this to occur in all cases _EXCEPT_ when it is a payer response.
"RTN","IBCNEHL6",72,0)
 ;    Which means _EXCEPT_ when it is triggered as a result of this routine.
"RTN","IBCNEHL6",73,0)
 ;
"RTN","IBCNEHL6",74,0)
 S CALLEDBY="IBCNEHL1"
"RTN","IBCNEHL6",75,0)
 ;
"RTN","IBCNEHL6",76,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL6",77,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL6",78,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL6",79,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL6",80,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL6",81,0)
 ;
"RTN","IBCNEHL6",82,0)
 ; Set buffer symbol based on value returned from EC
"RTN","IBCNEHL6",83,0)
 ; IB*2*601/DM
"RTN","IBCNEHL6",84,0)
 ;S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL6",85,0)
 I 'IBISMBI S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL6",86,0)
 ; if subscriber ID is populated set SYMBOL to '%' otherwise a '#'
"RTN","IBCNEHL6",87,0)
 I IBISMBI S SYMBOL=$S($$GET1^DIQ(365,RIEN_",","SUBSCRIBER ID")'="":MAP("MBI%"),1:MAP("MBI#"))
"RTN","IBCNEHL6",88,0)
 ;
"RTN","IBCNEHL6",89,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL6",90,0)
 ;  response data
"RTN","IBCNEHL6",91,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL6",92,0)
 ;
"RTN","IBCNEHL6",93,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL6",94,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL6",95,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL6",96,0)
 ;
"RTN","IBCNEHL6",97,0)
 ; IB*2*601/DM for an MBI query, set the patient relationship to insured to "Patient"
"RTN","IBCNEHL6",98,0)
 I IBISMBI S UP(355.33,BUFF_",",60.06)="01"
"RTN","IBCNEHL6",99,0)
 ;
"RTN","IBCNEHL6",100,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL6",101,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL6",102,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL6",103,0)
FILX ;
"RTN","IBCNEHL6",104,0)
 Q
"RTN","IBCNEHL6",105,0)
 ;
"RTN","IBCNEHLI")
0^19^B8125280^B7817332
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,251,271,300,416,550,601**;21-MAR-94;Build 14
"RTN","IBCNEHLI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL,IBIEN,TQDATA,IBQFL
"RTN","IBCNEHLI",15,0)
 N DATAMFK,EPHARM
"RTN","IBCNEHLI",16,0)
 ;
"RTN","IBCNEHLI",17,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",18,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",19,0)
 . S CNT=0
"RTN","IBCNEHLI",20,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",21,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",22,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",23,0)
 ;
"RTN","IBCNEHLI",24,0)
 ;  Get the eIV user
"RTN","IBCNEHLI",25,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHLI",26,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",27,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",28,0)
 I $E(SEGMT,1,3)'="MSH" D  D ERR Q
"RTN","IBCNEHLI",29,0)
 . S MSG(1)="MSH Segment is not the first segment found"
"RTN","IBCNEHLI",30,0)
 . S MSG(2)="Please call the Help Desk and report this problem."
"RTN","IBCNEHLI",31,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",32,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",33,0)
 ;
"RTN","IBCNEHLI",34,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",35,0)
 ; IB*2.0*601 - Added logic for MFN^M01 event
"RTN","IBCNEHLI",36,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",37,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN" I '$$HL7VAL G XIT
"RTN","IBCNEHLI",38,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",39,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR G XIT
"RTN","IBCNEHLI",40,0)
 ;
"RTN","IBCNEHLI",41,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",42,0)
 D INIT^HLFNC2(IBPRTCL,.HL)
"RTN","IBCNEHLI",43,0)
 ;
"RTN","IBCNEHLI",44,0)
 ;  Call the event tag
"RTN","IBCNEHLI",45,0)
 D @TAG
"RTN","IBCNEHLI",46,0)
 ;
"RTN","IBCNEHLI",47,0)
XIT K ^TMP($J,"IBCNEHLI"),HL,HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",48,0)
 Q
"RTN","IBCNEHLI",49,0)
 ;
"RTN","IBCNEHLI",50,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",51,0)
 N IBACK
"RTN","IBCNEHLI",52,0)
 S IBACK="AE"
"RTN","IBCNEHLI",53,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",54,0)
 ;
"RTN","IBCNEHLI",55,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",56,0)
 K ERFLG
"RTN","IBCNEHLI",57,0)
 ;
"RTN","IBCNEHLI",58,0)
 D ACK^IBCNEHLK
"RTN","IBCNEHLI",59,0)
 Q
"RTN","IBCNEHLI",60,0)
 ;
"RTN","IBCNEHLI",61,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",62,0)
 D ^IBCNEHL1
"RTN","IBCNEHLI",63,0)
 ;
"RTN","IBCNEHLI",64,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",65,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",66,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",67,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",68,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",69,0)
 Q
"RTN","IBCNEHLI",70,0)
 ;
"RTN","IBCNEHLI",71,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",72,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",73,0)
 ;
"RTN","IBCNEHLI",74,0)
 Q
"RTN","IBCNEHLI",75,0)
 ;
"RTN","IBCNEHLI",76,0)
ERR ; Process an error
"RTN","IBCNEHLI",77,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",78,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING eIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",79,0)
 K MSG,MGRP
"RTN","IBCNEHLI",80,0)
 Q
"RTN","IBCNEHLI",81,0)
 ; 
"RTN","IBCNEHLI",82,0)
HL7VAL() ; Check for valid post 300 response
"RTN","IBCNEHLI",83,0)
 N X,HCT
"RTN","IBCNEHLI",84,0)
 S X=0,HCT=0
"RTN","IBCNEHLI",85,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="PRD" S X=1 Q
"RTN","IBCNEHLI",86,0)
 Q X
"RTN","IBCNEHLK")
0^20^B5561054^B906841
"RTN","IBCNEHLK",1,0)
IBCNEHLK ;DAOU/ALA - HL7 Acknowledgement Messages ;08-OCT-2002
"RTN","IBCNEHLK",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300,601**;21-MAR-94;Build 14
"RTN","IBCNEHLK",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLK",4,0)
 ;
"RTN","IBCNEHLK",5,0)
MFK ;  MFN Acknowledgement
"RTN","IBCNEHLK",6,0)
 S HCT=1
"RTN","IBCNEHLK",7,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHLK",8,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D
"RTN","IBCNEHLK",9,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLK",10,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLK",11,0)
 . ;
"RTN","IBCNEHLK",12,0)
 . I SEG="MSA" D
"RTN","IBCNEHLK",13,0)
 .. S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3))
"RTN","IBCNEHLK",14,0)
 .. ;
"RTN","IBCNEHLK",15,0)
 .. I ACK="AE" S VMFN(350.9,"1,",51.22)=0
"RTN","IBCNEHLK",16,0)
 .. I ACK="AA" S VMFN(350.9,"1,",51.22)=1
"RTN","IBCNEHLK",17,0)
 ;
"RTN","IBCNEHLK",18,0)
 D FILE^DIE("I","VMFN")
"RTN","IBCNEHLK",19,0)
 ;
"RTN","IBCNEHLK",20,0)
 K IBSEG,SEG,HCT,ACK,EVENT,HL,IBPRTCL,IDUZ,MSGID,SEGMT,TAG,VMFN
"RTN","IBCNEHLK",21,0)
 Q
"RTN","IBCNEHLK",22,0)
 ; IB*2.0*601 - Added new logic for ACK tag.
"RTN","IBCNEHLK",23,0)
ACK ; ACK Acknowledgement
"RTN","IBCNEHLK",24,0)
 N IBCNHLP,HCT,MSA,MFI,MFA,CONTROL,HLFS
"RTN","IBCNEHLK",25,0)
 K ^TMP("HLA",$J)
"RTN","IBCNEHLK",26,0)
 S HCT=0
"RTN","IBCNEHLK",27,0)
 S HLFS="|"
"RTN","IBCNEHLK",28,0)
 ;
"RTN","IBCNEHLK",29,0)
 D MSA S HCT=HCT+1,^TMP("HLA",$J,HCT)=$TR(MSA,"*","")
"RTN","IBCNEHLK",30,0)
 D MFI S HCT=HCT+1,^TMP("HLA",$J,HCT)=$TR(MFI,"*","")
"RTN","IBCNEHLK",31,0)
 D MFA S HCT=HCT+1,^TMP("HLA",$J,HCT)=$TR(MFA,"*","")
"RTN","IBCNEHLK",32,0)
 ;
"RTN","IBCNEHLK",33,0)
 D GENACK^HLMA1($$FIND1^DIC(101,,,"IBCNE IIV MFN IN","B"),HLMTIENS,$$FIND1^DIC(101,,,"IBCNE IIV TABLE","B"),"GM",1,.ERROR)
"RTN","IBCNEHLK",34,0)
 K ^TMP("HLA",$J),HL,ERROR
"RTN","IBCNEHLK",35,0)
 ;
"RTN","IBCNEHLK",36,0)
 Q
"RTN","IBCNEHLK",37,0)
MSA ; MSA Segment
"RTN","IBCNEHLK",38,0)
 N DATA,CONTROL
"RTN","IBCNEHLK",39,0)
 S CONTROL=$P($G(^TMP($J,"IBCNEHLI",1,0)),"|",10) ; Table Update Message Control ID
"RTN","IBCNEHLK",40,0)
 S MSA="MSA"_HLFS_$G(IBACK)_HLFS_CONTROL
"RTN","IBCNEHLK",41,0)
 Q
"RTN","IBCNEHLK",42,0)
 ;
"RTN","IBCNEHLK",43,0)
MFI ; MFI Segment
"RTN","IBCNEHLK",44,0)
 S MFI=$G(^TMP($J,"IBCNEHLI",2,0)) ; Return this segment.
"RTN","IBCNEHLK",45,0)
 S $P(MFI,HLFS,7)="NE"
"RTN","IBCNEHLK",46,0)
 Q
"RTN","IBCNEHLK",47,0)
MFA ; MFA Segment
"RTN","IBCNEHLK",48,0)
 N I,ECODE,DATA,IDMFA
"RTN","IBCNEHLK",49,0)
 S ECODE="",IDMFA=""
"RTN","IBCNEHLK",50,0)
 F I=1:1 Q:'$D(^TMP($J,"IBCNEHLI",I,0))  D  Q:ECODE'=""
"RTN","IBCNEHLK",51,0)
 .S DATA=^TMP($J,"IBCNEHLI",I,0)
"RTN","IBCNEHLK",52,0)
 .I $P(DATA,"|")="MFE" S ECODE=$P(DATA,"|",2),IDMFA=$P(DATA,"|",5)
"RTN","IBCNEHLK",53,0)
 S MFA="MFA"_HLFS_ECODE_HLFS_HLFS_HLFS_$S(IBACK="AA":"S",1:"U")_HLFS_IDMFA_HLFS_"CE"
"RTN","IBCNEHLK",54,0)
 Q
"RTN","IBCNEHLK",55,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLK",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLK",57,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLK",58,0)
 S XMSUB="IBCNE IIV MFN IN"
"RTN","IBCNEHLK",59,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLK",60,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLK",61,0)
 Q
"RTN","IBCNEHLM")
0^5^B23949973^B23803518
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;02-JUN-2015
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416,438,497,506,549,601**;21-MAR-94;Build 14
"RTN","IBCNEHLM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    APP = Application
"RTN","IBCNEHLM",19,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",20,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",21,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",22,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",23,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",24,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",25,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",26,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",27,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",28,0)
 ;    TIMOUT = Timeout Days Site Parameter
"RTN","IBCNEHLM",29,0)
 ;    RETRY = Retry Flag Site Parameter
"RTN","IBCNEHLM",30,0)
 ;
"RTN","IBCNEHLM",31,0)
 N IBPERSIST
"RTN","IBCNEHLM",32,0)
 S IBPERSIST="N" ; persistence flag - If "N", FSC will not use the statistics on the NTE segment
"RTN","IBCNEHLM",33,0)
 D REG
"RTN","IBCNEHLM",34,0)
 Q
"RTN","IBCNEHLM",35,0)
 ;
"RTN","IBCNEHLM",36,0)
EN1 ; TaskMan entry point
"RTN","IBCNEHLM",37,0)
 N IBPERSIST
"RTN","IBCNEHLM",38,0)
 S IBPERSIST="Y" ; persistence flag - If "Y", FSC will use NTE segment to update their copy of the site's stats
"RTN","IBCNEHLM",39,0)
 D REG
"RTN","IBCNEHLM",40,0)
 ; Purge the task record
"RTN","IBCNEHLM",41,0)
 S ZTREQ="@"
"RTN","IBCNEHLM",42,0)
 Q
"RTN","IBCNEHLM",43,0)
 ;
"RTN","IBCNEHLM",44,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",45,0)
 N APP,CNTCEM,CNTCNM,CNTCPH,CODE,EDT,EVENT,FRSH,HL,HLCDOM,HLCINS,HLCS
"RTN","IBCNEHLM",46,0)
 N HLCSTCP,HLECH,HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLNHLQ,HLPROD,HLQ,HLREP
"RTN","IBCNEHLM",47,0)
 N HLRESLT,HLSAN,HLTYPE,HLX,IBCNE,IBCNEDAT,IHLP,IHLS,IHLT,ID,INACT,IPA,IPP
"RTN","IBCNEHLM",48,0)
 N MCT,MFE,MFN,MGRP,QFL,RESP,TAXID,ZMID,%I
"RTN","IBCNEHLM",49,0)
 N IVER,RETRY,TIMOUT,VMFE         ; IB*2.0*506
"RTN","IBCNEHLM",50,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",51,0)
 ;
"RTN","IBCNEHLM",52,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",53,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",54,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",55,0)
 S FRSH=$P(IBCNE,U,1),TIMOUT=$P(IBCNE,U,5),RETRY=$P(IBCNE,U,26) ; IB*2.0*506
"RTN","IBCNEHLM",56,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",57,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",58,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14)
"RTN","IBCNEHLM",59,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 ; IB*2.0*549 Updated version to 7, Removed retrieval of Contact Name, Phone, email
"RTN","IBCNEHLM",62,0)
 ; IB*2.0*601 Updated version to 8
"RTN","IBCNEHLM",63,0)
 S IVER="8"
"RTN","IBCNEHLM",64,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",65,0)
 ;
"RTN","IBCNEHLM",66,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",67,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",68,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",69,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",70,0)
 ;
"RTN","IBCNEHLM",71,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",72,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",73,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic re-verification checks"" is blank.  "
"RTN","IBCNEHLM",74,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",75,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",76,0)
 . Q
"RTN","IBCNEHLM",77,0)
 ;
"RTN","IBCNEHLM",78,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",79,0)
 I QFL=1 Q
"RTN","IBCNEHLM",80,0)
 ;
"RTN","IBCNEHLM",81,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",82,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",83,0)
 N DSTAT,DSTAT2,VNTE,VZRR                   ; IB*2.0*549 added DSTAT2
"RTN","IBCNEHLM",84,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",87,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",88,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3),HLREP=$E(HL("ECH"),2)
"RTN","IBCNEHLM",89,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",90,0)
 ;
"RTN","IBCNEHLM",91,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",92,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",93,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",94,0)
 ;
"RTN","IBCNEHLM",95,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",96,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",97,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",98,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",99,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",100,0)
 ;
"RTN","IBCNEHLM",101,0)
 ; Set the ZRR segment
"RTN","IBCNEHLM",102,0)
 ;IB*549 Added line to send null values for removed fields so msg layout remains unchanged
"RTN","IBCNEHLM",103,0)
 S (CNTCPH,CNTCEM,CNTCNM)=""
"RTN","IBCNEHLM",104,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",105,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",106,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",107,0)
 ;
"RTN","IBCNEHLM",108,0)
 ; Set the NTE segment
"RTN","IBCNEHLM",109,0)
 S DSTAT=$$GETSTAT^IBCNEDST()
"RTN","IBCNEHLM",110,0)
 S DSTAT2=$$GETSTAT2^IBCNEDST()                 ; IB*2.0*549 Added line
"RTN","IBCNEHLM",111,0)
 S VNTE="NTE"_HLFS_"1"_HLFS_HLFS_IBPERSIST_HLREP_$TR(DSTAT,U,HLREP)
"RTN","IBCNEHLM",112,0)
 S VNTE=VNTE_HLREP_RETRY_HLREP_TIMOUT           ; IB*2.0*506
"RTN","IBCNEHLM",113,0)
 S VNTE=VNTE_HLREP_$TR(DSTAT2,U,HLREP)          ; IB*2.0*549 Added line
"RTN","IBCNEHLM",114,0)
 S ^TMP("HLS",$J,4)=VNTE
"RTN","IBCNEHLM",115,0)
 ;
"RTN","IBCNEHLM",116,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",117,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",118,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",119,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",120,0)
 . D MLMN
"RTN","IBCNEHLM",121,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",122,0)
 Q
"RTN","IBCNEHLM",123,0)
 ;
"RTN","IBCNEHLM",124,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",125,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",126,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",127,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",128,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",129,0)
 Q
"RTN","IBCNEHLQ")
0^6^B60954828^B49920378
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,361,416,438,467,497,533,516,601**;21-MAR-94;Build 14
"RTN","IBCNEHLQ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an eIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 N VAFSTR,ICN,NM,I,PID11,EDQ,IBWHO,IBDOB,PID19
"RTN","IBCNEHLQ",23,0)
 ; IB*2.0*601 
"RTN","IBCNEHLQ",24,0)
 S VAFSTR=",1,7,8,11,",DFN=+$G(DFN) I $$MBICHK^IBCNEUT7(BUFF) S VAFSTR=VAFSTR_"19,"
"RTN","IBCNEHLQ",25,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",26,0)
 S PID11=$P(PID,HLFS,12)
"RTN","IBCNEHLQ",27,0)
 I $P(PID11,HLECH,2)="""""" D
"RTN","IBCNEHLQ",28,0)
 . S $P(PID11,HLECH,2)=""
"RTN","IBCNEHLQ",29,0)
 . S $P(PID,HLFS,12)=PID11
"RTN","IBCNEHLQ",30,0)
 S PID19=$P(PID,HLFS,20)
"RTN","IBCNEHLQ",31,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",32,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",33,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",34,0)
 I DFN D
"RTN","IBCNEHLQ",35,0)
 .; try to get name of insured from NAME OF INSURED
"RTN","IBCNEHLQ",36,0)
 .I EXT'=1,$G(IRIEN)'="" D
"RTN","IBCNEHLQ",37,0)
 .. S IBWHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",38,0)
 .. I IBWHO'="",IBWHO'="v" Q
"RTN","IBCNEHLQ",39,0)
 ..;IB*2.0*601/DM for "self" appt extract, use patient's insurance insured DOB
"RTN","IBCNEHLQ",40,0)
 .. S IBDOB=$$GET1^DIQ(2.312,IRIEN_","_DFN_",","INSURED'S DOB","I")
"RTN","IBCNEHLQ",41,0)
 .. I IBDOB S $P(PID,HLFS,8)=$$HLDATE^HLFNC(IBDOB)
"RTN","IBCNEHLQ",42,0)
 .. S NM=$P($G(^DPT(DFN,.312,IRIEN,7)),U,1)
"RTN","IBCNEHLQ",43,0)
 .I EXT=1,BUFF,$G(NM)="" D
"RTN","IBCNEHLQ",44,0)
 .. S IBWHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",45,0)
 .. I IBWHO'="",IBWHO'="v" Q
"RTN","IBCNEHLQ",46,0)
 ..;IB*2.0*601/DM for "self" buffer extract, use buff's insured DOB
"RTN","IBCNEHLQ",47,0)
 ..;otherwise, use patient's insurance insured DOB, otherwise use patient's DOB 
"RTN","IBCNEHLQ",48,0)
 .. S IBDOB=$$GET1^DIQ(355.33,BUFF_",","INSURED'S DOB","I")
"RTN","IBCNEHLQ",49,0)
 .. I 'IBDOB,$G(IRIEN)'="" S IBDOB=$$GET1^DIQ(2.312,IRIEN_","_DFN_",","INSURED'S DOB","I")
"RTN","IBCNEHLQ",50,0)
 .. I IBDOB S $P(PID,HLFS,8)=$$HLDATE^HLFNC(IBDOB)
"RTN","IBCNEHLQ",51,0)
 .. S NM=$P($G(^IBA(355.33,BUFF,91)),U)
"RTN","IBCNEHLQ",52,0)
 .I $G(NM)'="" S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",53,0)
 .; if unsuccessful, get patient name from 2/.01
"RTN","IBCNEHLQ",54,0)
 .I $G(NM)="" D
"RTN","IBCNEHLQ",55,0)
 ..S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",56,0)
 ..S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",57,0)
 ..Q
"RTN","IBCNEHLQ",58,0)
 .S I=$L(NM,HLFS),NM=$$ENCHL7(NM),$P(PID,HLFS,6,5+I)=NM
"RTN","IBCNEHLQ",59,0)
 .; IB*2.0*601
"RTN","IBCNEHLQ",60,0)
 .S $P(PID,HLFS,20,99)=$$ENCHL7($P(PID,HLFS,20,99))
"RTN","IBCNEHLQ",61,0)
 .S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",62,0)
 .S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",63,0)
 .Q
"RTN","IBCNEHLQ",64,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",65,0)
 I PID19'="" S $P(PID,HLFS,13)="",$P(PID,HLFS,20)=PID19
"RTN","IBCNEHLQ",66,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",67,0)
 Q
"RTN","IBCNEHLQ",68,0)
 ;
"RTN","IBCNEHLQ",69,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",70,0)
 N WHO,NM,IDOB,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",71,0)
 ;
"RTN","IBCNEHLQ",72,0)
 S GT1=""
"RTN","IBCNEHLQ",73,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",74,0)
 ;
"RTN","IBCNEHLQ",75,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",76,0)
 I EXT=1 D
"RTN","IBCNEHLQ",77,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",78,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",79,0)
 . ;S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",80,0)
 . S NM=$$GET1^DIQ(355.33,BUFF,91.01),NM=$$NAME^IBCNEHLU(NM) ;Get HIPAA data from new fields - IB*2*516
"RTN","IBCNEHLQ",81,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",82,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",83,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",84,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",85,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",86,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",87,0)
 . Q
"RTN","IBCNEHLQ",88,0)
 ;
"RTN","IBCNEHLQ",89,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",90,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",91,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",92,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",93,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",94,0)
 . ;S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)  ; WCJ;IB*2.0*497
"RTN","IBCNEHLQ",95,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,7)),U,1)  ; WCJ;IB*2.0*497
"RTN","IBCNEHLQ",96,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",97,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",98,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",99,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",100,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",101,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",102,0)
 . ;
"RTN","IBCNEHLQ",103,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",104,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,10))
"RTN","IBCNEHLQ",105,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",106,0)
 . ;
"RTN","IBCNEHLQ",107,0)
 . D CHK
"RTN","IBCNEHLQ",108,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",109,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",110,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",111,0)
 .. S SEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12) ; get policy holder sex
"RTN","IBCNEHLQ",112,0)
 .. I SEX="" S SEX=$P(^DPT(DFN,0),U,2),SEX=$S(SEX="M":"F",1:"M") ; if null, use alternative method
"RTN","IBCNEHLQ",113,0)
 .. S $P(GT1,HLFS,9)=SEX
"RTN","IBCNEHLQ",114,0)
 ;
"RTN","IBCNEHLQ",115,0)
 I GT1="" Q
"RTN","IBCNEHLQ",116,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",117,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",118,0)
 Q
"RTN","IBCNEHLQ",119,0)
 ;
"RTN","IBCNEHLQ",120,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",121,0)
 N EFFDT,ELIGDT,EXPDT,PREL,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",122,0)
 S IN1=""
"RTN","IBCNEHLQ",123,0)
 ;
"RTN","IBCNEHLQ",124,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",125,0)
 I EXT=1 D
"RTN","IBCNEHLQ",126,0)
 .S PREL=$P($G(^IBA(355.33,BUFF,60)),U,14)
"RTN","IBCNEHLQ",127,0)
 .S ELIGDT=$P($G(TRANSR),U,12) I ELIGDT=DT S ELIGDT=""
"RTN","IBCNEHLQ",128,0)
 .S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",129,0)
 .I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",130,0)
 ..S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",131,0)
 ..S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",132,0)
 . ;IB*2.0*516/TAZ - Use HIPAA compliant fields
"RTN","IBCNEHLQ",133,0)
 .;S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",134,0)
 .;S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",135,0)
 .S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(355.33,BUFF_",",90.02))
"RTN","IBCNEHLQ",136,0)
 .S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(355.33,BUFF_",",90.01))
"RTN","IBCNEHLQ",137,0)
 .S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",138,0)
 .S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",139,0)
 .S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",140,0)
 .S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",141,0)
 .S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",142,0)
 .S $P(IN1,HLFS,26)=$$HLDATE^HLFNC(ELIGDT)
"RTN","IBCNEHLQ",143,0)
 ;
"RTN","IBCNEHLQ",144,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",145,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",146,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",147,0)
 . I $$SCRUB($G(SUBID))'=$$SCRUB($P($G(^DPT(DFN,.312,IRIEN,0)),U,2)) Q
"RTN","IBCNEHLQ",148,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",149,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",150,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",151,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",152,0)
 . S PREL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEHLQ",153,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",154,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",155,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",156,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",157,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",158,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",159,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",160,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",161,0)
 ;
"RTN","IBCNEHLQ",162,0)
 I IN1="" Q
"RTN","IBCNEHLQ",163,0)
 ;
"RTN","IBCNEHLQ",164,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",165,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",166,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",167,0)
 Q
"RTN","IBCNEHLQ",168,0)
 ;
"RTN","IBCNEHLQ",169,0)
NTE(CTR) ;  NTE Segment
"RTN","IBCNEHLQ",170,0)
 ; TRANSR is 0 node of TQ, set in PROC^IBCNEDEP
"RTN","IBCNEHLQ",171,0)
 I CTR=1 S NTE=$$EXTERNAL^DILFD(365.1,.2,,$P($G(TRANSR),U,20)) ; service code from 365.1/.2
"RTN","IBCNEHLQ",172,0)
 ; IB*2.0*601 - Added NTE2 and NTE3
"RTN","IBCNEHLQ",173,0)
 I CTR=2 D
"RTN","IBCNEHLQ",174,0)
 . S NTE=$$GET1^DIQ(365.1,IEN_",","SOURCE OF INFORMATION","I")  ; IEN = ien of TQ
"RTN","IBCNEHLQ",175,0)
 . S NTE=$$GET1^DIQ(355.12,NTE_",","IB BUFFER ACRONYM")
"RTN","IBCNEHLQ",176,0)
 I CTR=3 S NTE=$S($$MBICHK^IBCNEUT7(BUFF):"MBI",1:"ELI")
"RTN","IBCNEHLQ",177,0)
 S NTE="NTE"_HLFS_CTR_HLFS_HLFS_NTE
"RTN","IBCNEHLQ",178,0)
 K CTR
"RTN","IBCNEHLQ",179,0)
 Q
"RTN","IBCNEHLQ",180,0)
 ; 
"RTN","IBCNEHLQ",181,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",182,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",183,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",184,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",185,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",186,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",187,0)
 . ;
"RTN","IBCNEHLQ",188,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",189,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",190,0)
 . ;
"RTN","IBCNEHLQ",191,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",192,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",193,0)
 . ;
"RTN","IBCNEHLQ",194,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",195,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",196,0)
 ;
"RTN","IBCNEHLQ",197,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",198,0)
 ;
"RTN","IBCNEHLQ",199,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",200,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",201,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",202,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",203,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",204,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0)),ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3)
"RTN","IBCNEHLQ",205,0)
 I $P(RDATA,U,4)'="" N DFN S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",206,0)
 Q
"RTN","IBCNEHLQ",207,0)
 ;
"RTN","IBCNEHLQ",208,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",209,0)
 ;
"RTN","IBCNEHLQ",210,0)
 ; Input:
"RTN","IBCNEHLQ",211,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",212,0)
 ;
"RTN","IBCNEHLQ",213,0)
 ; Output Values
"RTN","IBCNEHLQ",214,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",215,0)
 ;
"RTN","IBCNEHLQ",216,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",217,0)
 ;
"RTN","IBCNEHLQ",218,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",219,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",220,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",221,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",222,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",223,0)
 . S STR=NEW
"RTN","IBCNEHLQ",224,0)
 ;
"RTN","IBCNEHLQ",225,0)
 Q STR
"RTN","IBCNEHLQ",226,0)
 ;
"RTN","IBCNEHLQ",227,0)
SCRUB(Z) ; remove all punctuation from the string and convert lowercase to uppercase
"RTN","IBCNEHLQ",228,0)
 ; IB*2*416 - used for subscriber and patient ID fields
"RTN","IBCNEHLQ",229,0)
 S Z=$$NOPUNCT^IBCEF(Z,1)
"RTN","IBCNEHLQ",230,0)
 S Z=$$UP^XLFSTR(Z)
"RTN","IBCNEHLQ",231,0)
SCRUBX ;
"RTN","IBCNEHLQ",232,0)
 Q Z
"RTN","IBCNEHLQ",233,0)
 ;
"RTN","IBCNEHLQ",234,0)
PATREL(REL) ; convert pat.relationship to insured from VistA to X12 and return X12 value
"RTN","IBCNEHLQ",235,0)
 ; REL - VistA value
"RTN","IBCNEHLQ",236,0)
 ; 
"RTN","IBCNEHLQ",237,0)
 ; VistA values of Self (18), Spouse (01), and Child (19) remain unchanged,
"RTN","IBCNEHLQ",238,0)
 ; anything else is converted to X12 value of Other Adult (34)
"RTN","IBCNEHLQ",239,0)
 ;
"RTN","IBCNEHLQ",240,0)
 Q $S($G(REL)="":"",".01.18.19."[("."_REL_"."):REL,1:34)
"RTN","IBCNEHLT")
0^22^B94982650^B93743672
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 15 Mar 2016  3:00 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300,416,438,506,549,582,601**;21-MAR-94;Build 14
"RTN","IBCNEHLT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,REQSUB,NAFLG,NPFLG,TRUSTED
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an eIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; ** With national release of IB*2*550 ePharmacy will no longer use this routine to process table
"RTN","IBCNEHLT",20,0)
 ;    updates.
"RTN","IBCNEHLT",21,0)
 ; ** Therefore, several lines of code will become obsolete as commented in this routine.
"RTN","IBCNEHLT",22,0)
 ;
"RTN","IBCNEHLT",23,0)
 ; ** Upon national release of IB*2*550 reword statement below to drop ePHARM reference
"RTN","IBCNEHLT",24,0)
 ;
"RTN","IBCNEHLT",25,0)
 ; Build local table of file numbers to determine if response is eIV or ePHARM
"RTN","IBCNEHLT",26,0)
 ; * Warning: Before adding a new table to be updated by FSC, one must get FSC
"RTN","IBCNEHLT",27,0)
 ;            to agree and the eIV ICD documentation has to be updated and 
"RTN","IBCNEHLT",28,0)
 ;            approved by the VA HL7 team. Just adding a table number here does
"RTN","IBCNEHLT",29,0)
 ;            absolutely nothing without involving the other teams.
"RTN","IBCNEHLT",30,0)
 ;
"RTN","IBCNEHLT",31,0)
 F D=11:1:18 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",32,0)
 ;F D=21:1:28 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",33,0)
 S X12TABLE(350.021)=""
"RTN","IBCNEHLT",34,0)
 S X12TABLE(350.9)=""     ; IB*2.0*506
"RTN","IBCNEHLT",35,0)
 S X12TABLE(350.9002)=""  ; IB*2.0*549
"RTN","IBCNEHLT",36,0)
 ;
"RTN","IBCNEHLT",37,0)
 ; Decide if message belongs to "E-Pharm" or "eIV"
"RTN","IBCNEHLT",38,0)
 S APP=""
"RTN","IBCNEHLT",39,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",40,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",41,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"   ; ** Obsolete line upon release of IB*2*550
"RTN","IBCNEHLT",42,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",43,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",44,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",45,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",46,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",47,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",48,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",49,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the Vista eIV payer tables may be out"
"RTN","IBCNEHLT",50,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",51,0)
 ... S MSG(4)="update message from Austin."
"RTN","IBCNEHLT",52,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",53,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",54,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",55,0)
 ;
"RTN","IBCNEHLT",56,0)
 ; ** Upon release of IB*2*550, drop the ePharm reference in the comment below
"RTN","IBCNEHLT",57,0)
 ; If neither eIV or ePHARM then quit
"RTN","IBCNEHLT",58,0)
 I APP="" Q
"RTN","IBCNEHLT",59,0)
 ;
"RTN","IBCNEHLT",60,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",61,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",62,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",63,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",64,0)
 . ;
"RTN","IBCNEHLT",65,0)
 . I APP="E-PHARM" D   ;  ** This Do-loop is obsolete upon release of IB*2*550
"RTN","IBCNEHLT",66,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",67,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",68,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",69,0)
 ... ;
"RTN","IBCNEHLT",70,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",71,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",72,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",73,0)
 ... ;
"RTN","IBCNEHLT",74,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",75,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",76,0)
 .. ;
"RTN","IBCNEHLT",77,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",78,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",79,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",80,0)
 ... ;
"RTN","IBCNEHLT",81,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",82,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",83,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",84,0)
 ... ;
"RTN","IBCNEHLT",85,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",86,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",87,0)
 ... ;
"RTN","IBCNEHLT",88,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",89,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",90,0)
 ... ;
"RTN","IBCNEHLT",91,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",92,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",93,0)
 .. ;
"RTN","IBCNEHLT",94,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",95,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",96,0)
 . ; ** end of obsolete do-loop upon national release of IB*2*550
"RTN","IBCNEHLT",97,0)
 . ;
"RTN","IBCNEHLT",98,0)
 . ;
"RTN","IBCNEHLT",99,0)
 . ;** Upon release of IB*2*550 this if statement (I APP="IIV") won't be necessary but it DOES NOT
"RTN","IBCNEHLT",100,0)
 . ;   hurt to leave it in moving forward as a safety valve.
"RTN","IBCNEHLT",101,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",102,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",103,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",104,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",105,0)
 .. ;
"RTN","IBCNEHLT",106,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",107,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",108,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",109,0)
 ... ;
"RTN","IBCNEHLT",110,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",111,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",112,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",113,0)
 .... D TFIL
"RTN","IBCNEHLT",114,0)
 ... ;
"RTN","IBCNEHLT",115,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",116,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",117,0)
 ... ; Effective Date
"RTN","IBCNEHLT",118,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",119,0)
 .. ;
"RTN","IBCNEHLT",120,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",121,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",122,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",123,0)
 .. ;
"RTN","IBCNEHLT",124,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",125,0)
 ... S STAT=$S(IBSEG(4)="Y":1,1:0)
"RTN","IBCNEHLT",126,0)
 ... S TSSN=IBSEG(5),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",127,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",128,0)
 ... S TRUSTED=$S(IBSEG(10)="N":0,1:1)
"RTN","IBCNEHLT",129,0)
 ... D PFIL
"RTN","IBCNEHLT",130,0)
 Q
"RTN","IBCNEHLT",131,0)
 ;
"RTN","IBCNEHLT",132,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",133,0)
 ;  Set the action:
"RTN","IBCNEHLT",134,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",135,0)
 N OLDAF,OLDTF
"RTN","IBCNEHLT",136,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",137,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",138,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",139,0)
 ;  IB*582/TAZ if the action is MUP and the entry doesn't exist, add the payer as new
"RTN","IBCNEHLT",140,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR,IBCNTYPE
"RTN","IBCNEHLT",141,0)
 S IBNOK=0,IBAPP=($TR(APP," ")=""),IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")=""),IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",142,0)
 I IBNOK D  G PFILX
"RTN","IBCNEHLT",143,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",144,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",145,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",146,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",147,0)
 . S MSG(4)="Payer Name : "_DESC
"RTN","IBCNEHLT",148,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",149,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",150,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",151,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",152,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",153,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",154,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",155,0)
 D FND I IEN<0 D MAD(DESC)
"RTN","IBCNEHLT",156,0)
 ;
"RTN","IBCNEHLT",157,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",158,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",159,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",160,0)
 ;
"RTN","IBCNEHLT",161,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",162,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",163,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",164,0)
 ;
"RTN","IBCNEHLT",165,0)
 ;  Check for application
"RTN","IBCNEHLT",166,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",167,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",168,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",169,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",170,0)
 . K DD,DO
"RTN","IBCNEHLT",171,0)
 . D FILE^DICN
"RTN","IBCNEHLT",172,0)
 . K DO
"RTN","IBCNEHLT",173,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",174,0)
 ;
"RTN","IBCNEHLT",175,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",176,0)
 I APIEN="" D
"RTN","IBCNEHLT",177,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",178,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",179,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",180,0)
 . K DD,DO
"RTN","IBCNEHLT",181,0)
 . D FILE^DICN
"RTN","IBCNEHLT",182,0)
 . K DO
"RTN","IBCNEHLT",183,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",184,0)
 ; get current values for Active and Trusted flags
"RTN","IBCNEHLT",185,0)
 S OLDAF=$P(^IBE(365.12,IEN,1,APIEN,0),U,2),OLDTF=$P(^IBE(365.12,IEN,1,APIEN,0),U,7)
"RTN","IBCNEHLT",186,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",187,0)
 ;
"RTN","IBCNEHLT",188,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",189,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",190,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT();.07///^S X=TRUSTED"
"RTN","IBCNEHLT",191,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",192,0)
 ;
"RTN","IBCNEHLT",193,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",194,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",195,0)
 ;
"RTN","IBCNEHLT",196,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",197,0)
 S IBACK="AA"
"RTN","IBCNEHLT",198,0)
 ; Update flag logs
"RTN","IBCNEHLT",199,0)
 I STAT'=OLDAF D UPDLOG("A",STAT,IEN,APIEN)
"RTN","IBCNEHLT",200,0)
 I TRUSTED'=OLDTF D UPDLOG("T",TRUSTED,IEN,APIEN)
"RTN","IBCNEHLT",201,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",202,0)
PFILX ;
"RTN","IBCNEHLT",203,0)
 Q
"RTN","IBCNEHLT",204,0)
 ;
"RTN","IBCNEHLT",205,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",206,0)
 ; Input: DESC  - Field Number
"RTN","IBCNEHLT",207,0)
 ;        ID    - Field Value
"RTN","IBCNEHLT",208,0)
 ;        FLN   - File Number
"RTN","IBCNEHLT",209,0)
 N DA,DIC,DIE,DLAYGO,DR,EXTRACT,IEN,MAX,XX,X,Y   ;IB*2.0*549 - Added DA,DIE,DR,EXTRACT,XX
"RTN","IBCNEHLT",210,0)
 ;
"RTN","IBCNEHLT",211,0)
 ; store the FILENAME, FIELDNAME and VALUE if the APP is IIV and FLN is 350.9.  - IB*2.0*506
"RTN","IBCNEHLT",212,0)
 ; For file #350.9, DESC represents the FIELD NUMBER and ID represents the VALUE.
"RTN","IBCNEHLT",213,0)
 I APP="IIV",FLN=350.9 D  Q
"RTN","IBCNEHLT",214,0)
 . S DIE=FLN,DA=1,DR=DESC_"///"_ID
"RTN","IBCNEHLT",215,0)
 . D ^DIE
"RTN","IBCNEHLT",216,0)
 . S IBACK="AA"
"RTN","IBCNEHLT",217,0)
 ;
"RTN","IBCNEHLT",218,0)
 ; IB*2.0*549 Added if statement 
"RTN","IBCNEHLT",219,0)
 I APP="IIV",FLN=350.9002 D  Q
"RTN","IBCNEHLT",220,0)
 . S EXTRACT=$E(DESC,1,4)                   ; Either "Buff" or "Appt"
"RTN","IBCNEHLT",221,0)
 . S XX=$S(EXTRACT="Buff":1,EXTRACT="Appt":2,1:3)
"RTN","IBCNEHLT",222,0)
 . S DESC=$E(DESC,5,99)                     ; Field number
"RTN","IBCNEHLT",223,0)
 . S DA(1)=1
"RTN","IBCNEHLT",224,0)
 . S DA=$O(^IBE(350.9,1,51.17,"B",XX,""))   ; Find correct multiple
"RTN","IBCNEHLT",225,0)
 . ;
"RTN","IBCNEHLT",226,0)
 . ; File the new value
"RTN","IBCNEHLT",227,0)
 . S DIE="^IBE(350.9,1,51.17,"
"RTN","IBCNEHLT",228,0)
 . S DR=DESC_"///"_ID
"RTN","IBCNEHLT",229,0)
 . D ^DIE
"RTN","IBCNEHLT",230,0)
 . S IBACK="AA"
"RTN","IBCNEHLT",231,0)
 ;
"RTN","IBCNEHLT",232,0)
 ;IB*582/TAZ - Add new entries and update existing entries
"RTN","IBCNEHLT",233,0)
 ;
"RTN","IBCNEHLT",234,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",235,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",236,0)
 ; don't update existing entries
"RTN","IBCNEHLT",237,0)
 ;I IEN>0 Q
"RTN","IBCNEHLT",238,0)
 ;Add new entry to table
"RTN","IBCNEHLT",239,0)
 I IEN<1 D
"RTN","IBCNEHLT",240,0)
 . S DLAYGO=FLN,DIC(0)="L"
"RTN","IBCNEHLT",241,0)
 . K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",242,0)
 ;
"RTN","IBCNEHLT",243,0)
 ;Update Description
"RTN","IBCNEHLT",244,0)
 ;
"RTN","IBCNEHLT",245,0)
 D FIELD^DID(FLN,.02,,"FIELD LENGTH","MAX")
"RTN","IBCNEHLT",246,0)
 I MAX("FIELD LENGTH")>0 S DESC=$E(DESC,1,MAX("FIELD LENGTH")) ; restriction of the field in the DD
"RTN","IBCNEHLT",247,0)
 ; add new entry to the table
"RTN","IBCNEHLT",248,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///"_DESC
"RTN","IBCNEHLT",249,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///^S X=DESC"
"RTN","IBCNEHLT",250,0)
 ;K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",251,0)
 ;IB*2*601/HN corrected use of the DR variable 
"RTN","IBCNEHLT",252,0)
 ;S DIE=DIC,DA=IEN,DIC("DR")=".02///^S X=DESC" D ^DIE
"RTN","IBCNEHLT",253,0)
 S DIE=DIC,DA=IEN,DR=".02///^S X=DESC" D ^DIE
"RTN","IBCNEHLT",254,0)
 S IBACK="AA"
"RTN","IBCNEHLT",255,0)
 Q
"RTN","IBCNEHLT",256,0)
 ;
"RTN","IBCNEHLT",257,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",258,0)
 ;IB*582/TAZ - Moved check to PFIL MAD is called for any record that is not found in the file.
"RTN","IBCNEHLT",259,0)
 ;D FND
"RTN","IBCNEHLT",260,0)
 ;I IEN>0 G MADX
"RTN","IBCNEHLT",261,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",262,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",263,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",264,0)
 K DD,DO
"RTN","IBCNEHLT",265,0)
 D FILE^DICN
"RTN","IBCNEHLT",266,0)
 K DO
"RTN","IBCNEHLT",267,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",268,0)
MADX ;
"RTN","IBCNEHLT",269,0)
 Q
"RTN","IBCNEHLT",270,0)
 ;
"RTN","IBCNEHLT",271,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",272,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",273,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",274,0)
 ;
"RTN","IBCNEHLT",275,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",276,0)
 D IX^DIC
"RTN","IBCNEHLT",277,0)
 S IEN=+Y
"RTN","IBCNEHLT",278,0)
 Q
"RTN","IBCNEHLT",279,0)
 ;
"RTN","IBCNEHLT",280,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",281,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",282,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",283,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",284,0)
 .. ;
"RTN","IBCNEHLT",285,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",286,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",287,0)
 .. ;
"RTN","IBCNEHLT",288,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",289,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",290,0)
 .. ;
"RTN","IBCNEHLT",291,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",292,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",293,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",294,0)
 .. ;
"RTN","IBCNEHLT",295,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",296,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",297,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",298,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",299,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",300,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",301,0)
 Q
"RTN","IBCNEHLT",302,0)
 ;
"RTN","IBCNEHLT",303,0)
UPDLOG(FLAG,VALUE,PIEN,APIEN) ; Update active/trusted flag logs
"RTN","IBCNEHLT",304,0)
 ; FLAG - "A" for Active flag, "T" for Trusted flag
"RTN","IBCNEHLT",305,0)
 ; VALUE - new flag value (0 or 1)
"RTN","IBCNEHLT",306,0)
 ; PIEN - ien in PAYER file (365.12)
"RTN","IBCNEHLT",307,0)
 ; APIEN - ien in APPLICATION sub-file (365.121)
"RTN","IBCNEHLT",308,0)
 ;
"RTN","IBCNEHLT",309,0)
 N FILE,IENSTR,UPDT
"RTN","IBCNEHLT",310,0)
 I $G(FLAG)=""!($G(VALUE)="") Q
"RTN","IBCNEHLT",311,0)
 I +$G(PIEN)=0!(+$G(APIEN)=0) Q
"RTN","IBCNEHLT",312,0)
 S FILE=$S(FLAG="A":"365.1212",FLAG="T":"365.1213",1:"") I FILE="" Q
"RTN","IBCNEHLT",313,0)
 S IENSTR="+1,"_APIEN_","_PIEN_","
"RTN","IBCNEHLT",314,0)
 S UPDT(FILE,IENSTR,.01)=$$NOW^XLFDT()
"RTN","IBCNEHLT",315,0)
 S UPDT(FILE,IENSTR,.02)=VALUE
"RTN","IBCNEHLT",316,0)
 D UPDATE^DIE("E","UPDT")
"RTN","IBCNEHLT",317,0)
 Q
"RTN","IBCNEPM")
0^7^B15040845^B14696239
"RTN","IBCNEPM",1,0)
IBCNEPM ;DAOU/ESG - PAYER MAINTENANCE PAYER LIST SCREEN ;22-JAN-2003
"RTN","IBCNEPM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,601**;21-MAR-94;Build 14
"RTN","IBCNEPM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEPM",4,0)
 ;
"RTN","IBCNEPM",5,0)
 Q
"RTN","IBCNEPM",6,0)
 ;
"RTN","IBCNEPM",7,0)
HDR ; -- header code
"RTN","IBCNEPM",8,0)
 S VALMHDR(1)="Payers with potential matches to active insurance companies."
"RTN","IBCNEPM",9,0)
 Q
"RTN","IBCNEPM",10,0)
 ;
"RTN","IBCNEPM",11,0)
INIT ; -- init variables and list array
"RTN","IBCNEPM",12,0)
 ;
"RTN","IBCNEPM",13,0)
 ;Create scratch global of payer w/ potential matches missing
"RTN","IBCNEPM",14,0)
 KILL ^TMP("IBCNEPM",$J)
"RTN","IBCNEPM",15,0)
 NEW INS,DATA,PROFID,INSTID,IEN,APP,ACTIVE,PAYER
"RTN","IBCNEPM",16,0)
 ;
"RTN","IBCNEPM",17,0)
 ; First build a scratch global cross reference with all existing
"RTN","IBCNEPM",18,0)
 ; professional and institutional EDI ID numbers in file 36.
"RTN","IBCNEPM",19,0)
 S INS=0
"RTN","IBCNEPM",20,0)
 F  S INS=$O(^DIC(36,INS)) Q:'INS  D
"RTN","IBCNEPM",21,0)
 . I '$$ACTIVE^IBCNEUT4(INS) Q          ; inactive ins co
"RTN","IBCNEPM",22,0)
 . S DATA=$G(^DIC(36,INS,3))
"RTN","IBCNEPM",23,0)
 . I $P(DATA,U,10)'="" Q                ; already linked to a payer
"RTN","IBCNEPM",24,0)
 . S PROFID=$P(DATA,U,2),INSTID=$P(DATA,U,4)
"RTN","IBCNEPM",25,0)
 . I PROFID'="" S ^TMP("IBCNEPM",$J,"P",PROFID,INS)=""
"RTN","IBCNEPM",26,0)
 . I INSTID'="" S ^TMP("IBCNEPM",$J,"I",INSTID,INS)=""
"RTN","IBCNEPM",27,0)
 . Q
"RTN","IBCNEPM",28,0)
 ;
"RTN","IBCNEPM",29,0)
 ; Next loop through all payers.  Count up the number of insurance 
"RTN","IBCNEPM",30,0)
 ; companies that have matching EDI ID numbers but no payer links.  
"RTN","IBCNEPM",31,0)
 ; These are possible payer-insurance company links that have not yet 
"RTN","IBCNEPM",32,0)
 ; been made.
"RTN","IBCNEPM",33,0)
 ;
"RTN","IBCNEPM",34,0)
 S IEN=0
"RTN","IBCNEPM",35,0)
 F  S IEN=$O(^IBE(365.12,IEN)) Q:'IEN  D
"RTN","IBCNEPM",36,0)
 . I IEN=$$GET1^DIQ(350.9,"1,","MBI PAYER","I") Q  ;IB*2*601/DM
"RTN","IBCNEPM",37,0)
 . S DATA=$G(^IBE(365.12,IEN,0))
"RTN","IBCNEPM",38,0)
 . ;
"RTN","IBCNEPM",39,0)
 . I '$$ACTAPP^IBCNEUT5(IEN) Q  ; no active payer applications
"RTN","IBCNEPM",40,0)
 . ;
"RTN","IBCNEPM",41,0)
 . ; must have at least 1 nationally active payer application
"RTN","IBCNEPM",42,0)
 . S APP=0,ACTIVE=0
"RTN","IBCNEPM",43,0)
 . F  S APP=$O(^IBE(365.12,IEN,1,APP)) Q:'APP!(ACTIVE)  D
"RTN","IBCNEPM",44,0)
 .. I $P($G(^IBE(365.12,IEN,1,APP,0)),U,2)=1 S ACTIVE=1
"RTN","IBCNEPM",45,0)
 . Q:'ACTIVE    ; no nationally active payer application found
"RTN","IBCNEPM",46,0)
 . ;
"RTN","IBCNEPM",47,0)
 . S PAYER=$P(DATA,U),PROFID=$P(DATA,U,5),INSTID=$P(DATA,U,6)
"RTN","IBCNEPM",48,0)
 . ;
"RTN","IBCNEPM",49,0)
 . ; Look at the payer's professional ID and see how many unique
"RTN","IBCNEPM",50,0)
 . ; insurance companies also have this professional ID
"RTN","IBCNEPM",51,0)
 . I PROFID'="",$D(^TMP("IBCNEPM",$J,"P",PROFID)) D
"RTN","IBCNEPM",52,0)
 .. S INS="" F  S INS=$O(^TMP("IBCNEPM",$J,"P",PROFID,INS)) Q:'INS  D
"RTN","IBCNEPM",53,0)
 ... S ^TMP("IBCNEPM",$J,"INS",INS,IEN)=PAYER
"RTN","IBCNEPM",54,0)
 ... I $D(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q
"RTN","IBCNEPM",55,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)=""
"RTN","IBCNEPM",56,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)=$G(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN))+1  ; increment tot
"RTN","IBCNEPM",57,0)
 . ;
"RTN","IBCNEPM",58,0)
 . ; Look at the payer's institutional ID and see how many unique
"RTN","IBCNEPM",59,0)
 . ; insurance companies also have this institutional ID
"RTN","IBCNEPM",60,0)
 . I INSTID'="",$D(^TMP("IBCNEPM",$J,"I",INSTID)) D
"RTN","IBCNEPM",61,0)
 .. S INS="" F  S INS=$O(^TMP("IBCNEPM",$J,"I",INSTID,INS)) Q:'INS  D
"RTN","IBCNEPM",62,0)
 ... S ^TMP("IBCNEPM",$J,"INS",INS,IEN)=PAYER
"RTN","IBCNEPM",63,0)
 ... I $D(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q
"RTN","IBCNEPM",64,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)=""
"RTN","IBCNEPM",65,0)
 ... S ^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)=$G(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN))+1  ; increment tot
"RTN","IBCNEPM",66,0)
 ;
"RTN","IBCNEPM",67,0)
 D BUILD
"RTN","IBCNEPM",68,0)
 ;
"RTN","IBCNEPM",69,0)
INITX ;
"RTN","IBCNEPM",70,0)
 Q
"RTN","IBCNEPM",71,0)
 ;
"RTN","IBCNEPM",72,0)
BUILD ; This procedure builds the ListMan display global based on the 
"RTN","IBCNEPM",73,0)
 ; "PYR" area of the scratch global.  
"RTN","IBCNEPM",74,0)
 ;
"RTN","IBCNEPM",75,0)
 NEW LINE,PAYER,IEN,STRING,LINKS
"RTN","IBCNEPM",76,0)
 KILL ^TMP("IBCNEPM",$J,1)
"RTN","IBCNEPM",77,0)
 S LINE=0,(PAYER,IEN)=""
"RTN","IBCNEPM",78,0)
 F  S PAYER=$O(^TMP("IBCNEPM",$J,"PYR",PAYER)) Q:PAYER=""  D
"RTN","IBCNEPM",79,0)
 . F  S IEN=$O(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)) Q:IEN=""  D
"RTN","IBCNEPM",80,0)
 .. S STRING="",LINE=LINE+1
"RTN","IBCNEPM",81,0)
 .. S ^TMP("IBCNEPM",$J,"IDX",LINE,IEN)=PAYER
"RTN","IBCNEPM",82,0)
 .. S LINKS=^TMP("IBCNEPM",$J,"PYR",PAYER,IEN)
"RTN","IBCNEPM",83,0)
 .. S STRING=$$SETFLD^VALM1(LINE,STRING,"LINE")
"RTN","IBCNEPM",84,0)
 .. S STRING=$$SETFLD^VALM1(PAYER,STRING,"PAYER")
"RTN","IBCNEPM",85,0)
 .. S STRING=$$SETFLD^VALM1(LINKS,STRING,"LINKS")
"RTN","IBCNEPM",86,0)
 .. D SET^VALM10(LINE,STRING)
"RTN","IBCNEPM",87,0)
 ;
"RTN","IBCNEPM",88,0)
 S VALMCNT=LINE
"RTN","IBCNEPM",89,0)
 I VALMCNT=0 S VALMSG=" No Active Payers with potential missing links."
"RTN","IBCNEPM",90,0)
BUILDX ;
"RTN","IBCNEPM",91,0)
 Q
"RTN","IBCNEPM",92,0)
 ;
"RTN","IBCNEPM",93,0)
 ;
"RTN","IBCNEPM",94,0)
HELP ; -- help code
"RTN","IBCNEPM",95,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","IBCNEPM",96,0)
 Q
"RTN","IBCNEPM",97,0)
 ;
"RTN","IBCNEPM",98,0)
EXIT ; -- exit code
"RTN","IBCNEPM",99,0)
 Q
"RTN","IBCNEPM",100,0)
 ;
"RTN","IBCNEPM",101,0)
EXPND ; -- expand code
"RTN","IBCNEPM",102,0)
 Q
"RTN","IBCNEPM",103,0)
 ;
"RTN","IBCNEQU")
0^8^B176017271^B126768253
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - eIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,497,582,601**;21-MAR-94;Build 14
"RTN","IBCNEQU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J),^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"When requesting an Electronic Insurance Inquiry..." ; IB*2*601/DM
"RTN","IBCNEQU",46,0)
 W !,"This screen lists all eligible (non-Medicaid) Insurance policies"
"RTN","IBCNEQU",47,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",48,0)
 W !,"entry with Source 'eIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",49,0)
 W !,"is designed to force the eIV extract to attempt to create an insurance"
"RTN","IBCNEQU",50,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",51,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",52,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",53,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",54,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",55,0)
 W !,"the patient."
"RTN","IBCNEQU",56,0)
 ; IB*2*601/DM
"RTN","IBCNEQU",57,0)
 W !!,"When requesting a MBI lookup..."
"RTN","IBCNEQU",58,0)
 W !,"Policies will be listed as described above for electronic insurance inquiry,"
"RTN","IBCNEQU",59,0)
 W !,"however, no special 'checks' will be made."
"RTN","IBCNEQU",60,0)
 W !,"The MBI request will be initiated immediately, regardless of policies above."
"RTN","IBCNEQU",61,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",62,0)
 S VALMBCK="R"
"RTN","IBCNEQU",63,0)
 Q
"RTN","IBCNEQU",64,0)
 ;
"RTN","IBCNEQU",65,0)
EXIT ; -- exit code
"RTN","IBCNEQU",66,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",67,0)
 Q
"RTN","IBCNEQU",68,0)
 ;
"RTN","IBCNEQU",69,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",70,0)
 ; Init vars
"RTN","IBCNEQU",71,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",72,0)
 ;
"RTN","IBCNEQU",73,0)
 W !
"RTN","IBCNEQU",74,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",75,0)
 S DIC(0)="AEQMN"
"RTN","IBCNEQU",76,0)
 S DIC("S")="I $G(^(""VET""))=""Y"",('$P($G(^(0)),U,21))",DIC="^DPT("
"RTN","IBCNEQU",77,0)
 D ^DIC
"RTN","IBCNEQU",78,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",79,0)
 ;
"RTN","IBCNEQU",80,0)
 Q +Y
"RTN","IBCNEQU",81,0)
 ;
"RTN","IBCNEQU",82,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",83,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",84,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",85,0)
 ;
"RTN","IBCNEQU",86,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",87,0)
 ;
"RTN","IBCNEQU",88,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",89,0)
 ;
"RTN","IBCNEQU",90,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",91,0)
 S IBIEN=0
"RTN","IBCNEQU",92,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",93,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",94,0)
 . ; Include E status only
"RTN","IBCNEQU",95,0)
 . I $P(IBBUFDT,U,4)'="E" Q
"RTN","IBCNEQU",96,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",97,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",98,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",99,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,90)),U,2))  ; ib*2*497  get group number from it's new location
"RTN","IBCNEQU",100,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",101,0)
 . Q
"RTN","IBCNEQU",102,0)
 ;
"RTN","IBCNEQU",103,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",104,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",105,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",106,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",107,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",108,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",109,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.3,+$P(IBDATA0,U,18),2)),U,2))  ; ib*2*497  get group number from it's new location
"RTN","IBCNEQU",110,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P(GRPNUM,U,2))
"RTN","IBCNEQU",111,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",112,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",113,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",114,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",115,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",116,0)
 . ; Filter Ins Co's by name - currently filter Medicaid
"RTN","IBCNEQU",117,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",118,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",119,0)
 . S STR=""
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",121,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",122,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",125,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",127,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",128,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",129,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",130,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",131,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",132,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",133,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",134,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",135,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",136,0)
 . D SET(STR)
"RTN","IBCNEQU",137,0)
 . Q
"RTN","IBCNEQU",138,0)
 ;
"RTN","IBCNEQU",139,0)
 I 'IBCT D
"RTN","IBCNEQU",140,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",141,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",142,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",143,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      No eligible insurance policies found."
"RTN","IBCNEQU",144,0)
 . Q
"RTN","IBCNEQU",145,0)
 ;
"RTN","IBCNEQU",146,0)
 S VNODT=$P($G(^IBA(354,DFN,60)),U,1) I VNODT D
"RTN","IBCNEQU",147,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",148,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",149,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",150,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")_"."
"RTN","IBCNEQU",151,0)
 . Q
"RTN","IBCNEQU",152,0)
 ;
"RTN","IBCNEQU",153,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",154,0)
 Q
"RTN","IBCNEQU",155,0)
 ;
"RTN","IBCNEQU",156,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",157,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",158,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",159,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",160,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",161,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",162,0)
 S ^TMP("IBCNEQUX",$J)=$G(^TMP("IBCNEQUX",$J))+1
"RTN","IBCNEQU",163,0)
 Q
"RTN","IBCNEQU",164,0)
 ;
"RTN","IBCNEQU",165,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",166,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",167,0)
 ;
"RTN","IBCNEQU",168,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",169,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBELIGDT,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",170,0)
 ;
"RTN","IBCNEQU",171,0)
 D FULL^VALM1
"RTN","IBCNEQU",172,0)
 S VALMBCK="R"
"RTN","IBCNEQU",173,0)
 ;
"RTN","IBCNEQU",174,0)
 I '$O(^TMP("IBCNEQUX",$J,0)) D  G SELECTX
"RTN","IBCNEQU",175,0)
 . W !!,"No Insurance policies to select."
"RTN","IBCNEQU",176,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",177,0)
 . Q
"RTN","IBCNEQU",178,0)
 ;
"RTN","IBCNEQU",179,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",180,0)
 S IBDATA=$$SEL()
"RTN","IBCNEQU",181,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",182,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",183,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",184,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",185,0)
 . S IBSYM=$P($$INSERROR^IBCNEUT3("I",IBIEN),"^",1)
"RTN","IBCNEQU",186,0)
 . S ^TMP("IBCNEQUDTS",$J)=1
"RTN","IBCNEQU",187,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",188,0)
 . ; Check for errors
"RTN","IBCNEQU",189,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",190,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",191,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",192,0)
 . K ^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",193,0)
 ;
"RTN","IBCNEQU",194,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",195,0)
 . W !!,"Payer missing. Identification inquiries not allowed."    ; IB*2*416
"RTN","IBCNEQU",196,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",197,0)
 . Q
"RTN","IBCNEQU",198,0)
 ;
"RTN","IBCNEQU",199,0)
SELECTX ;
"RTN","IBCNEQU",200,0)
 S VALMBCK="R"
"RTN","IBCNEQU",201,0)
 Q
"RTN","IBCNEQU",202,0)
 ;
"RTN","IBCNEQU",203,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",204,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",205,0)
 ;
"RTN","IBCNEQU",206,0)
 S IBSELN=""
"RTN","IBCNEQU",207,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",208,0)
 S DIR(0)="NO^1:"_$G(^TMP("IBCNEQUX",$J))_":0"
"RTN","IBCNEQU",209,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",210,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",211,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",212,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",213,0)
 S DIR("?")="  "
"RTN","IBCNEQU",214,0)
 D ^DIR K DIR
"RTN","IBCNEQU",215,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",216,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",217,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",218,0)
 I $E($P(IBSELN,U,3))="*" W ! D  S IBSELN="" G SELX
"RTN","IBCNEQU",219,0)
 .S DIR(0)="EA"
"RTN","IBCNEQU",220,0)
 .S DIR("A",1)=""
"RTN","IBCNEQU",221,0)
 .S DIR("A",2)="Selected policy has an existing buffer entry."
"RTN","IBCNEQU",222,0)
 .S DIR("A",3)="You must first process the existing buffer entry."
"RTN","IBCNEQU",223,0)
 .S DIR("A")="Press RETURN to continue " D ^DIR K DIR W !
"RTN","IBCNEQU",224,0)
 .Q
"RTN","IBCNEQU",225,0)
 ;
"RTN","IBCNEQU",226,0)
 ; Get service type code
"RTN","IBCNEQU",227,0)
 D STC
"RTN","IBCNEQU",228,0)
 I X="^" S IBSELN="" G SELX  ; '^' entered thus backup a level & re-ask Insurance question
"RTN","IBCNEQU",229,0)
 ; Get eligibility date
"RTN","IBCNEQU",230,0)
 S IBELIGDT=$$ELIGDT() I 'IBELIGDT S IBSELN="" G SELX
"RTN","IBCNEQU",231,0)
 W !
"RTN","IBCNEQU",232,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",233,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",234,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",235,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",236,0)
 D ^DIR K DIR
"RTN","IBCNEQU",237,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",238,0)
 ;
"RTN","IBCNEQU",239,0)
SELX Q IBSELN
"RTN","IBCNEQU",240,0)
 ;
"RTN","IBCNEQU",241,0)
STC ; Ask for service type code to send
"RTN","IBCNEQU",242,0)
 ; IB*582/HN - Modified Default Service Type Code to pull from the MCCF Billing Parameters File (350.9,60.01)
"RTN","IBCNEQU",243,0)
 N DIR,X,Y
"RTN","IBCNEQU",244,0)
 ; IBEISTC used as STC variable
"RTN","IBCNEQU",245,0)
 S IBEISTC=""
"RTN","IBCNEQU",246,0)
 S DIR(0)="PAO^365.013:EMZ",DIR("A")="Enter Service Type Code: "
"RTN","IBCNEQU",247,0)
 S DIR("B")=$$GET1^DIQ(350.9,1_",",60.01,"E")
"RTN","IBCNEQU",248,0)
 S DIR("??")="^D HELPSTC2^IBCNEQU"
"RTN","IBCNEQU",249,0)
STCEN ; Intital and re-enterant tag upon error
"RTN","IBCNEQU",250,0)
 D ^DIR Q:X="^"
"RTN","IBCNEQU",251,0)
 ; Check to verify code is active, if not, display error and ask again
"RTN","IBCNEQU",252,0)
 I $P($G(Y(0)),U,3)'="" W !,"Code selected is not an active code - please select another code.",! G STCEN
"RTN","IBCNEQU",253,0)
 ; If valid STC entered, set IBEISTC to be STC IEN. If no code entered, default to service code 30
"RTN","IBCNEQU",254,0)
 ;S IBEISTC=$S(+Y>0:$P(Y,U,1),1:$O(^IBE(365.013,"B",30,"")))
"RTN","IBCNEQU",255,0)
 ; If valid STC entered, set IBEISTC to be STCIEN.
"RTN","IBCNEQU",256,0)
 S IBEISTC=$P(Y,U,1)
"RTN","IBCNEQU",257,0)
 Q
"RTN","IBCNEQU",258,0)
 ;
"RTN","IBCNEQU",259,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",260,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",261,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",262,0)
 D FULL^VALM1
"RTN","IBCNEQU",263,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",264,0)
 D ^DIR
"RTN","IBCNEQU",265,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",266,0)
 Q
"RTN","IBCNEQU",267,0)
 ;
"RTN","IBCNEQU",268,0)
ADD() ;
"RTN","IBCNEQU",269,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",270,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",271,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",272,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",273,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",274,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",275,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",276,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",277,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",278,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",279,0)
 I 'OK Q 0
"RTN","IBCNEQU",280,0)
 Q 1
"RTN","IBCNEQU",281,0)
 ;
"RTN","IBCNEQU",282,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",283,0)
 Q    ; no longer allowed  IB*2*416
"RTN","IBCNEQU",284,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",285,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",286,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",287,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",288,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",289,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",290,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,"",1)
"RTN","IBCNEQU",291,0)
 Q
"RTN","IBCNEQU",292,0)
 ;
"RTN","IBCNEQU",293,0)
BLKX Q
"RTN","IBCNEQU",294,0)
 ;
"RTN","IBCNEQU",295,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",296,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",297,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",298,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",299,0)
 ;
"RTN","IBCNEQU",300,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",301,0)
 Q
"RTN","IBCNEQU",302,0)
 ;
"RTN","IBCNEQU",303,0)
HELPSTC2 ; Text to display in response to '??' entry
"RTN","IBCNEQU",304,0)
 N DIR
"RTN","IBCNEQU",305,0)
 D FULL^VALM1
"RTN","IBCNEQU",306,0)
 W @IOF
"RTN","IBCNEQU",307,0)
 W !,"Enter the single SERVICE TYPE CODE to be sent with inquiry or press 'ENTER' to"
"RTN","IBCNEQU",308,0)
 W !,"send default service type code 30 (Health Benefit Plan Coverage)."
"RTN","IBCNEQU",309,0)
 W !,"No response generated by this option will auto-update the patient file."
"RTN","IBCNEQU",310,0)
 Q
"RTN","IBCNEQU",311,0)
 ;
"RTN","IBCNEQU",312,0)
ELIGDT() ; Prompt user for eligibility date
"RTN","IBCNEQU",313,0)
 N DIR,X,Y,DIRUT,DUOUT,STARTDT,ENDDT,ELIGDT
"RTN","IBCNEQU",314,0)
 S ELIGDT=""
"RTN","IBCNEQU",315,0)
 D DT^DILF(,"T-12M",.STARTDT) ; start date within the last 12 months
"RTN","IBCNEQU",316,0)
 ; allow end date up to the end of the current month
"RTN","IBCNEQU",317,0)
 S ENDDT=$$SCH^XLFDT("1M(L@1A)",DT)\1 ; ICR#10103 this call returns the last day of the current month at 1 AM.  If not time was sent, it would actually return the next to last day at 2400 hours.
"RTN","IBCNEQU",318,0)
 S DIR(0)="DA^"_STARTDT_":"_ENDDT_":"_"EX",DIR("A")="Enter Eligibility Date: ",DIR("B")="TODAY"
"RTN","IBCNEQU",319,0)
 S DIR("?",1)="Select an eligibility date to be sent in the inquiry."
"RTN","IBCNEQU",320,0)
 S DIR("?")="Date must be within the last 12 months or up to the end of the current month."
"RTN","IBCNEQU",321,0)
 D ^DIR
"RTN","IBCNEQU",322,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) G ELIGDTX
"RTN","IBCNEQU",323,0)
 S ELIGDT=Y
"RTN","IBCNEQU",324,0)
ELIGDTX ; 
"RTN","IBCNEQU",325,0)
 Q ELIGDT
"RTN","IBCNEQU",326,0)
 ;
"RTN","IBCNEQU",327,0)
MBIREQ ; User requested a MBI lookup request
"RTN","IBCNEQU",328,0)
 N DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",329,0)
 N IBMBIPYR,IBBUF,IBFDA
"RTN","IBCNEQU",330,0)
 ;
"RTN","IBCNEQU",331,0)
 D FULL^VALM1
"RTN","IBCNEQU",332,0)
 S VALMBCK="R"
"RTN","IBCNEQU",333,0)
 K DIR
"RTN","IBCNEQU",334,0)
 ;
"RTN","IBCNEQU",335,0)
 ; see if the MBI PAYER site parameter has been populated 
"RTN","IBCNEQU",336,0)
 S IBMBIPYR=+$$GET1^DIQ(350.9,"1,","MBI PAYER","I")
"RTN","IBCNEQU",337,0)
 I 'IBMBIPYR D  G MBIREQX
"RTN","IBCNEQU",338,0)
 . W !!," The required MBI Payer site parameter is not populated; try again later",!
"RTN","IBCNEQU",339,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",340,0)
 ;
"RTN","IBCNEQU",341,0)
 I '($$GET1^DIQ(365.121,"1,"_IBMBIPYR_",",.02,"I")) D  G MBIREQX
"RTN","IBCNEQU",342,0)
 . W !!," The MBI Payer is not nationally active; try again later",!
"RTN","IBCNEQU",343,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",344,0)
 ;
"RTN","IBCNEQU",345,0)
 I '($$GET1^DIQ(365.121,"1,"_IBMBIPYR_",",.03,"I")) D  G MBIREQX
"RTN","IBCNEQU",346,0)
 . W !!," The MBI Payer LOCAL ACTIVE field is set to 'NO'; it must be 'YES' to proceed",!
"RTN","IBCNEQU",347,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",348,0)
 ;
"RTN","IBCNEQU",349,0)
 D DEM^VADPT ; ; ICR#10061
"RTN","IBCNEQU",350,0)
 I ($P(VADM(2),U)="")!($P(VADM(3),U)="") D  G MBIREQX
"RTN","IBCNEQU",351,0)
 . W !!," SSN and DOB are required fields, they must be populated in order to proceed",!
"RTN","IBCNEQU",352,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",353,0)
 ; 
"RTN","IBCNEQU",354,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",355,0)
 S DIR("A")="Are you sure you want to request this Patient's Medicare Beneficiary ID"
"RTN","IBCNEQU",356,0)
 S DIR("B")="YES"
"RTN","IBCNEQU",357,0)
 S DIR("?",1)="  If yes, a MBI request will be initiated immediately."
"RTN","IBCNEQU",358,0)
 S DIR("?")="  If no, the MBI request will be cancelled."
"RTN","IBCNEQU",359,0)
 D ^DIR K DIR
"RTN","IBCNEQU",360,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) G MBIREQX
"RTN","IBCNEQU",361,0)
 ;
"RTN","IBCNEQU",362,0)
 ;write a buffer entry 
"RTN","IBCNEQU",363,0)
 ;the real time process will set the patient relationship to self automatically
"RTN","IBCNEQU",364,0)
 ;patient fields, name, dob and ssn will be populated automatically
"RTN","IBCNEQU",365,0)
 K IBBUF
"RTN","IBCNEQU",366,0)
 S IBBUF(.02)=DUZ  ; Entered By
"RTN","IBCNEQU",367,0)
 S IBBUF(.12)=$P($$PAYER^IBCNEUT4(IBMBIPYR),U) ; Buffer Symbol 
"RTN","IBCNEQU",368,0)
 S IBBUF(20.01)=$$GET1^DIQ(350.9,"1,","MBI PAYER","E")
"RTN","IBCNEQU",369,0)
 S IBBUF(60.01)=DFN ; Patient IEN
"RTN","IBCNEQU",370,0)
 S IBBUF(90.03)="MBIrequest" ; MBI placeholder for subscriber ID
"RTN","IBCNEQU",371,0)
 S IBBUF(91.01)=VADM(1) ; patient (subscriber) name 
"RTN","IBCNEQU",372,0)
 ; the following call in-turn, calls EDITSTF^IBCNBES which will make sure to file subscriber ID last, automatically
"RTN","IBCNEQU",373,0)
 S IBFDA=$$ADDSTF^IBCNBES($$FIND1^DIC(355.12,,,"MEDICARE","C"),DFN,.IBBUF)
"RTN","IBCNEQU",374,0)
 ;
"RTN","IBCNEQU",375,0)
 W !!,"The MBI request was successful, check the buffer for results.",!
"RTN","IBCNEQU",376,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",377,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",378,0)
 Q
"RTN","IBCNEQU",379,0)
MBIREQX ;
"RTN","IBCNEQU",380,0)
 S VALMBCK="R"
"RTN","IBCNEQU",381,0)
 Q
"RTN","IBCNEQU",382,0)
 ;
"RTN","IBCNERTQ")
0^9^B48024033^B47060813
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;ALB/BI - Real-time Insurance Verification ;15-OCT-2015
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438,467,497,549,582,593,601**;21-MAR-94;Build 14
"RTN","IBCNERTQ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          90.01 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          90.02 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          90.03 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;          62.01 - PATIENT ID
"RTN","IBCNERTQ",14,0)
 ;
"RTN","IBCNERTQ",15,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",16,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",17,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",18,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",19,0)
 ;          90.03 - SUBSCRIBER ID (if patient is the subscriber)
"RTN","IBCNERTQ",20,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",21,0)
 ;          62.01 - PATIENT ID (if patient is not the subscriber)
"RTN","IBCNERTQ",22,0)
 ;
"RTN","IBCNERTQ",23,0)
 ;
"RTN","IBCNERTQ",24,0)
 N TQIEN,TQN0,NODE20,NODE60,NODE90,QF,N4,PTID,SUBID,MGRP,DFN,PREL
"RTN","IBCNERTQ",25,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",26,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",27,0)
 N DA,DB,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",28,0)
 ;
"RTN","IBCNERTQ",29,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",30,0)
 ;IB*582/HAN - Do not allow entries to process if the user is INTERFACE,IB EIV
"RTN","IBCNERTQ",31,0)
 N EIVDUZ S EIVDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNERTQ",32,0)
 ;IB*2.0*593/HN - Added to allow nightly extract entries to go out immediately.
"RTN","IBCNERTQ",33,0)
 I $G(IDUZ)'="",IDUZ=EIVDUZ,$G(CALLEDBY)'="",CALLEDBY="IBCNEHL1" Q RESPONSE
"RTN","IBCNERTQ",34,0)
 ;IB*582 - End
"RTN","IBCNERTQ",35,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",36,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",37,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",38,0)
 S NODE90=$G(^IBA(355.33,N2,90))
"RTN","IBCNERTQ",39,0)
 S PREL=$P(NODE60,U,14)
"RTN","IBCNERTQ",40,0)
 I $P(NODE20,U,1)="" Q RESPONSE                       ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",41,0)
 I $P(NODE60,U,1)="" Q RESPONSE                       ;PATIENT NAME
"RTN","IBCNERTQ",42,0)
 I $P(NODE90,U,3)="" Q RESPONSE                       ;SUBSCRIBER ID
"RTN","IBCNERTQ",43,0)
 ; exclude dependent inquiries w/o patient id or DOB
"RTN","IBCNERTQ",44,0)
 I PREL'=18,PREL'="",($P($G(^IBA(355.33,N2,62)),U)=""!($P(NODE60,U,8)="")) Q RESPONSE
"RTN","IBCNERTQ",45,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",46,0)
 I $G(IBNCPDPELIG) Q RESPONSE  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",47,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",48,0)
 ;
"RTN","IBCNERTQ",49,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",50,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",51,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",PREL="" Q RESPONSE
"RTN","IBCNERTQ",52,0)
 ;
"RTN","IBCNERTQ",53,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",54,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",55,0)
 S SUBID=$P(NODE90,U,3)
"RTN","IBCNERTQ",56,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",57,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",58,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",59,0)
 .; don't send again if there's an entry in the queue with the same subscriber id, same buffer entry, and
"RTN","IBCNERTQ",60,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",61,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",62,0)
 .Q
"RTN","IBCNERTQ",63,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",64,0)
 ;
"RTN","IBCNERTQ",65,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",66,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",67,0)
 ;
"RTN","IBCNERTQ",68,0)
 ;Store Service Type Code in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",69,0)
 I +$G(^IBA(355.33,N2,80))'>0 D SETSTC(N2)
"RTN","IBCNERTQ",70,0)
 ;
"RTN","IBCNERTQ",71,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",72,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",73,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",74,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",75,0)
 ;
"RTN","IBCNERTQ",76,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",77,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",78,0)
 ;
"RTN","IBCNERTQ",79,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",80,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",81,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",82,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",83,0)
 ;
"RTN","IBCNERTQ",84,0)
ENDTRIG ; Final Clean Up.
"RTN","IBCNERTQ",85,0)
 ;
"RTN","IBCNERTQ",86,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",87,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",88,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",89,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",90,0)
 ;
"RTN","IBCNERTQ",91,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",92,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",93,0)
 Q RESPONSE
"RTN","IBCNERTQ",94,0)
 ;
"RTN","IBCNERTQ",95,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",96,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",97,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",98,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",99,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",100,0)
 ;
"RTN","IBCNERTQ",101,0)
 S CNT=0
"RTN","IBCNERTQ",102,0)
 ;
"RTN","IBCNERTQ",103,0)
 S QUEUED=0
"RTN","IBCNERTQ",104,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",105,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",106,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",107,0)
 ;
"RTN","IBCNERTQ",108,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",109,0)
 ;
"RTN","IBCNERTQ",110,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",111,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",112,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",113,0)
 ;
"RTN","IBCNERTQ",114,0)
 ; IB*2.0*549 -  Quit if Realtime  Extract Master switch is off
"RTN","IBCNERTQ",115,0)
 ; Note: Checking here instead of the top of TRIG to check for above error conditions first
"RTN","IBCNERTQ",116,0)
 Q:$$GET1^DIQ(350.9,"1,",51.27,"I")="N" 0
"RTN","IBCNERTQ",117,0)
 ;
"RTN","IBCNERTQ",118,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",119,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",120,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",121,0)
 ;
"RTN","IBCNERTQ",122,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",123,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",124,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",125,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",126,0)
 ;
"RTN","IBCNERTQ",127,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",128,0)
 S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18) S:'SRVICEDT SRVICEDT=DT ; Service Date
"RTN","IBCNERTQ",129,0)
 ;
"RTN","IBCNERTQ",130,0)
 ; IB*2.0*549 Removed following line
"RTN","IBCNERTQ",131,0)
 ;I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNERTQ",132,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",133,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",134,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",135,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",136,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",137,0)
 ;
"RTN","IBCNERTQ",138,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",139,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",140,0)
 ;
"RTN","IBCNERTQ",141,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",142,0)
 ;
"RTN","IBCNERTQ",143,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",144,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",145,0)
 ;
"RTN","IBCNERTQ",146,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",147,0)
 ;  date range
"RTN","IBCNERTQ",148,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",149,0)
 ;
"RTN","IBCNERTQ",150,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",151,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",152,0)
 ;
"RTN","IBCNERTQ",153,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",154,0)
 ; IB*2*601/DM 
"RTN","IBCNERTQ",155,0)
 ;S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",156,0)
 ;I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",157,0)
 S INSNAME=$$GET1^DIQ(355.33,IEN_",","INSURANCE COMPANY NAME")
"RTN","IBCNERTQ",158,0)
 I '$$MBICHK^IBCNEUT7(IEN),INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",159,0)
 ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNERTQ",160,0)
 D SETREL^IBCNEDE1(IEN)
"RTN","IBCNERTQ",161,0)
 ;
"RTN","IBCNERTQ",162,0)
 ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNERTQ",163,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",164,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",165,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",166,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",167,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",168,0)
 ; not included
"RTN","IBCNERTQ",169,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",170,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",171,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",172,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",173,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",174,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",175,0)
 ;
"RTN","IBCNERTQ",176,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",177,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",178,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",179,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",180,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",181,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",182,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",183,0)
 ;
"RTN","IBCNERTQ",184,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",185,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",186,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",187,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",188,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",189,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",190,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",191,0)
 ;
"RTN","IBCNERTQ",192,0)
 ; IB*2.0*549 - quit if test site and not a valid test case
"RTN","IBCNERTQ",193,0)
 Q:'$$XMITOK^IBCNETST(IEN) 0
"RTN","IBCNERTQ",194,0)
 ;
"RTN","IBCNERTQ",195,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",196,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",197,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",198,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",199,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",200,0)
 ;  If not successful
"RTN","IBCNERTQ",201,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",202,0)
 ;  If successful
"RTN","IBCNERTQ",203,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",204,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",205,0)
 ;
"RTN","IBCNERTQ",206,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",207,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",208,0)
 ;
"RTN","IBCNERTQ",209,0)
 Q 1
"RTN","IBCNERTQ",210,0)
 ;
"RTN","IBCNERTQ",211,0)
SETSTC(BUFF) ; set service type code
"RTN","IBCNERTQ",212,0)
 N DIE,DA,DR,X,Y
"RTN","IBCNERTQ",213,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",214,0)
 ; Define Service Type Code (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",215,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",216,0)
 S DR="80.01////"_$P($G(^IBE(350.9,1,60)),U)
"RTN","IBCNERTQ",217,0)
 D ^DIE
"RTN","IBCNERTQ",218,0)
 Q
"RTN","IBCNETST")
0^10^B33658501^n/a
"RTN","IBCNETST",1,0)
IBCNETST ;DAOU/ALA - eIV Gate-keeper test scenarios ;11-OCT-2017
"RTN","IBCNETST",2,0)
 ;;2.0;INTEGRATED BILLING;**601**;21-MAR-94;Build 14
"RTN","IBCNETST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNETST",4,0)
 ;
"RTN","IBCNETST",5,0)
 ;**Program Description**
"RTN","IBCNETST",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNETST",7,0)
 ; IB*2*601/DM XMITOK() Gate-keeper routine moved from IBCNEUT7
"RTN","IBCNETST",8,0)
 ;
"RTN","IBCNETST",9,0)
 Q
"RTN","IBCNETST",10,0)
 ;
"RTN","IBCNETST",11,0)
XMITOK(TQIEN) ;EP
"RTN","IBCNETST",12,0)
 ; Checks if the site is a test site (not a production site) and if so
"RTN","IBCNETST",13,0)
 ; only allows transactions in the eIV queue that meet specific criteria
"RTN","IBCNETST",14,0)
 ; to be transmitted to FSC. Prevents invalid transmissions from a test
"RTN","IBCNETST",15,0)
 ; site to FSC which blocks the interface and need to be manually resolved
"RTN","IBCNETST",16,0)
 ; at FSC.
"RTN","IBCNETST",17,0)
 ; Input:   TQIEN   - IEN of the IIV Transmission Queue entry
"RTN","IBCNETST",18,0)
 ; Returns: 1       - Ok to add item to the eIV queue
"RTN","IBCNETST",19,0)
 ;          0       - Not ok to add item to the eIV queue
"RTN","IBCNETST",20,0)
 N GOOD,GRPNUM,IBIEN,IBCNMPI,IENS,IVPIEN,MCARE,PATDOB,PATID,PATNM,PATSEX,PAYRNM,PIEN
"RTN","IBCNETST",21,0)
 N SUBID,SUBNM,TSITE,XX
"RTN","IBCNETST",22,0)
 S MCARE=$$GET1^DIQ(350.9,"1,",51.25,"E")    ; Medicare Payer Name
"RTN","IBCNETST",23,0)
 S XX=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNETST",24,0)
 S (GRPNUM,PATID,SUBID,SUBNM)=""
"RTN","IBCNETST",25,0)
 S DFN=$$GET1^DIQ(365.1,TQIEN_",",.02,"I")   ; Patient IEN                   
"RTN","IBCNETST",26,0)
 S IBCNMPI=$$GET1^DIQ(2,DFN_",",991.01,"I")  ; Integration Control Number MPI
"RTN","IBCNETST",27,0)
 S PIEN=$$GET1^DIQ(365.1,TQIEN_",",.03,"I")  ; Payer IEN
"RTN","IBCNETST",28,0)
 S IBIEN=$$GET1^DIQ(365.1,TQIEN_",",.13,"I") ; Insurance multiple number
"RTN","IBCNETST",29,0)
 ;
"RTN","IBCNETST",30,0)
 ; If the insurance multiple is not in the transmission queue, get the
"RTN","IBCNETST",31,0)
 ; following fields from the Insurance Verification Processor file
"RTN","IBCNETST",32,0)
 I IBIEN="" D
"RTN","IBCNETST",33,0)
 . S IVPIEN=$$GET1^DIQ(365.1,TQIEN_",",.05,"I") ; IVP file IEN
"RTN","IBCNETST",34,0)
 . S GRPNUM=$$GET1^DIQ(355.33,IVPIEN_",",90.02) ; Group Plan Number
"RTN","IBCNETST",35,0)
 . S PATID=$$GET1^DIQ(355.33,IVPIEN_",",62.01)  ; Group Plan Number
"RTN","IBCNETST",36,0)
 . S SUBID=$$GET1^DIQ(355.33,IVPIEN_",",90.03)  ; Subscriber ID
"RTN","IBCNETST",37,0)
 . S SUBNM=$$GET1^DIQ(355.33,IVPIEN_",",91.01)  ; Subscriber Name
"RTN","IBCNETST",38,0)
 E  D
"RTN","IBCNETST",39,0)
 . S IENS=IBIEN_","_DFN_","
"RTN","IBCNETST",40,0)
 . S XX=$$GET1^DIQ(2.312,IENS,.18,"I")       ; IEN of the Group Plan
"RTN","IBCNETST",41,0)
 . S GRPNUM=$$GET1^DIQ(355.3,XX_",",2.02)    ; Group Plan Number
"RTN","IBCNETST",42,0)
 . S PATID=$$GET1^DIQ(2.312,IENS,5.01)       ; Patient ID
"RTN","IBCNETST",43,0)
 . S SUBID=$$GET1^DIQ(2.312,IENS,1)          ; Subscriber ID
"RTN","IBCNETST",44,0)
 . S SUBNM=$$GET1^DIQ(2.312,IENS,7.01)       ; Subscriber NM
"RTN","IBCNETST",45,0)
 ;
"RTN","IBCNETST",46,0)
 ; First check to see if the site is a test or a production site
"RTN","IBCNETST",47,0)
 S TSITE=$S($$PROD^XUPROD(1):0,1:1)
"RTN","IBCNETST",48,0)
 Q:'TSITE 1                                  ; Production site no checks done
"RTN","IBCNETST",49,0)
 ;
"RTN","IBCNETST",50,0)
 ; Quit if the Integration Control Number MPI is null - MUST be present
"RTN","IBCNETST",51,0)
 Q:IBCNMPI="" 0
"RTN","IBCNETST",52,0)
 ;
"RTN","IBCNETST",53,0)
 I (SUBID="")!(SUBNM="") Q 0                 ; Key elements not defined
"RTN","IBCNETST",54,0)
 S XX=$$GET1^DIQ(2,DFN_",",.03,"I")          ; Internal Patient DOB
"RTN","IBCNETST",55,0)
 S PATDOB=$TR($$FMTE^XLFDT(XX,"7DZ"),"/","") ; YYYYMMDD format
"RTN","IBCNETST",56,0)
 S PATSEX=$$GET1^DIQ(2,DFN_",",.02,"I")      ; Patient Sex
"RTN","IBCNETST",57,0)
 S PATNM=$$GET1^DIQ(2,DFN_",",.01,"I")       ; Patient Name
"RTN","IBCNETST",58,0)
 S PAYRNM=$$GET1^DIQ(365.12,PIEN_",",.01)    ; Payer Name
"RTN","IBCNETST",59,0)
 S PAYRNM=$$UP^XLFSTR(PAYRNM)
"RTN","IBCNETST",60,0)
 S GOOD=0
"RTN","IBCNETST",61,0)
 ;
"RTN","IBCNETST",62,0)
 I PAYRNM="CMS MBI ONLY" G MBI ; this is an MBI test 
"RTN","IBCNETST",63,0)
 ;
"RTN","IBCNETST",64,0)
 I PAYRNM="AETNA",GRPNUM="GRP NUM 13805",SUBID="111111AE" D  Q:GOOD 1
"RTN","IBCNETST",65,0)
 . Q:SUBNM'="IBSUB,ACTIVE"
"RTN","IBCNETST",66,0)
 . Q:PATDOB'="19220202"
"RTN","IBCNETST",67,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",68,0)
 . S GOOD=1
"RTN","IBCNETST",69,0)
 ;
"RTN","IBCNETST",70,0)
 I PAYRNM="AETNA",GRPNUM="GRP NUM 13188",SUBID="111111FG" D  Q:GOOD 1
"RTN","IBCNETST",71,0)
 . Q:SUBNM'="IBSUB,INACTIVE"
"RTN","IBCNETST",72,0)
 . Q:PATDOB'="19480101"
"RTN","IBCNETST",73,0)
 . Q:PATSEX'="F"
"RTN","IBCNETST",74,0)
 . S GOOD=1
"RTN","IBCNETST",75,0)
 ;
"RTN","IBCNETST",76,0)
 I PAYRNM="CIGNA",GRPNUM="GRP NUM 5442",SUBID="012345678" D  Q:GOOD 1
"RTN","IBCNETST",77,0)
 . Q:SUBNM'="IBSUB,AAAERROR"
"RTN","IBCNETST",78,0)
 . Q:PATDOB'="19470211"
"RTN","IBCNETST",79,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",80,0)
 . S GOOD=1
"RTN","IBCNETST",81,0)
 ;
"RTN","IBCNETST",82,0)
 I PAYRNM="AETNA",GRPNUM="AET1234",SUBID="W1234561111" D  Q:GOOD 1
"RTN","IBCNETST",83,0)
 . Q:SUBNM'="IBINS,ACTIVE"                  ; Note this patient is male
"RTN","IBCNETST",84,0)
 . Q:PATID'="W123452222"
"RTN","IBCNETST",85,0)
 . Q:PATNM'="IBDEP,ACTIVE"
"RTN","IBCNETST",86,0)
 . Q:PATDOB'="19900304"
"RTN","IBCNETST",87,0)
 . Q:PATSEX'="F"                            ; Note this is subscriber's spouse
"RTN","IBCNETST",88,0)
 . S GOOD=1
"RTN","IBCNETST",89,0)
 ;
"RTN","IBCNETST",90,0)
 I MCARE'="",PAYRNM=MCARE,SUBID="333113333A",SUBNM="IB,PATIENT" D  Q:GOOD 1
"RTN","IBCNETST",91,0)
 . Q:PATDOB'="19350309"
"RTN","IBCNETST",92,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",93,0)
 . S GOOD=1
"RTN","IBCNETST",94,0)
 ;
"RTN","IBCNETST",95,0)
 I MCARE'="",PAYRNM=MCARE,SUBID="111223333A",SUBNM="IBSUB,TWOTRLRS" D  Q:GOOD 1
"RTN","IBCNETST",96,0)
 . Q:PATDOB'="19550505"
"RTN","IBCNETST",97,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",98,0)
 . S GOOD=1
"RTN","IBCNETST",99,0)
 ; 
"RTN","IBCNETST",100,0)
 ; Added for testing "Stop trigger of EIV Response"
"RTN","IBCNETST",101,0)
 I PAYRNM="AETNA",GRPNUM="GRP NUM 13805",SUBID="222222AE" D  Q:GOOD 1
"RTN","IBCNETST",102,0)
 . Q:SUBNM'="IBSUB,CANNOTFIND"
"RTN","IBCNETST",103,0)
 . Q:PATDOB'="19220707"
"RTN","IBCNETST",104,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",105,0)
 . S GOOD=1
"RTN","IBCNETST",106,0)
 ;
"RTN","IBCNETST",107,0)
 ; Added for testing payers that begin with numeric values
"RTN","IBCNETST",108,0)
 I PAYRNM="CIGNA",GRPNUM="GRP NUM 5442",SUBID="222222CI" D  Q:GOOD 1
"RTN","IBCNETST",109,0)
 . Q:SUBNM'="IBSUB,ACTIVE"
"RTN","IBCNETST",110,0)
 . Q:PATDOB'="19220202"
"RTN","IBCNETST",111,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",112,0)
 . S GOOD=1
"RTN","IBCNETST",113,0)
 ;
"RTN","IBCNETST",114,0)
 Q 0
"RTN","IBCNETST",115,0)
 ;
"RTN","IBCNETST",116,0)
MBI ;
"RTN","IBCNETST",117,0)
 ; IB*2*601//DM - MBI testing scenarios
"RTN","IBCNETST",118,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",119,0)
 . Q:SUBNM'="IB,MBIPATIENTONE"
"RTN","IBCNETST",120,0)
 . Q:PATDOB'="19380311"
"RTN","IBCNETST",121,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",122,0)
 . S GOOD=1
"RTN","IBCNETST",123,0)
 ;
"RTN","IBCNETST",124,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",125,0)
 . Q:SUBNM'="IB,MBIPATIENTTWO"
"RTN","IBCNETST",126,0)
 . Q:PATDOB'="19381110"
"RTN","IBCNETST",127,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",128,0)
 . S GOOD=1
"RTN","IBCNETST",129,0)
 ;
"RTN","IBCNETST",130,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",131,0)
 . Q:SUBNM'="IB,MBIPATIENTTHREE"
"RTN","IBCNETST",132,0)
 . Q:PATDOB'="19470530"
"RTN","IBCNETST",133,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",134,0)
 . S GOOD=1
"RTN","IBCNETST",135,0)
 ;
"RTN","IBCNETST",136,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",137,0)
 . Q:SUBNM'="IB,MBIPATIENTFOUR"
"RTN","IBCNETST",138,0)
 . Q:PATDOB'="19500130"
"RTN","IBCNETST",139,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",140,0)
 . S GOOD=1
"RTN","IBCNETST",141,0)
 ;
"RTN","IBCNETST",142,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",143,0)
 . Q:SUBNM'="IB,"   ;Q:SUBNM'="IB,MBIPATIENTFIVE"   ;** melanie needed request w/ missing first name to go to FSC at FSC's request
"RTN","IBCNETST",144,0)
 . Q:PATDOB'="19500827"
"RTN","IBCNETST",145,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",146,0)
 . S GOOD=1
"RTN","IBCNETST",147,0)
 ;
"RTN","IBCNETST",148,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",149,0)
 . Q:SUBNM'="IB,MBIPATIENTSIX"
"RTN","IBCNETST",150,0)
 . Q:PATDOB'="19471022"
"RTN","IBCNETST",151,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",152,0)
 . S GOOD=1
"RTN","IBCNETST",153,0)
 ;
"RTN","IBCNETST",154,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",155,0)
 . Q:SUBNM'="IB,MBIPATIENTSEVEN"
"RTN","IBCNETST",156,0)
 . Q:PATDOB'="19490603"
"RTN","IBCNETST",157,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",158,0)
 . S GOOD=1
"RTN","IBCNETST",159,0)
 ;
"RTN","IBCNETST",160,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",161,0)
 . Q:SUBNM'="IB,MBIPATIENTEIGHT"
"RTN","IBCNETST",162,0)
 . Q:PATDOB'="19470921"
"RTN","IBCNETST",163,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",164,0)
 . S GOOD=1
"RTN","IBCNETST",165,0)
 ;
"RTN","IBCNETST",166,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",167,0)
 . Q:SUBNM'="IB,MBIPATIENTNINE"
"RTN","IBCNETST",168,0)
 . Q:PATDOB'="19430301"
"RTN","IBCNETST",169,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",170,0)
 . S GOOD=1
"RTN","IBCNETST",171,0)
 ;
"RTN","IBCNETST",172,0)
 I PAYRNM="CMS MBI ONLY",SUBID="MBIrequest" D  Q:GOOD 1
"RTN","IBCNETST",173,0)
 . Q:SUBNM'="IB,MBIPATIENTTEN"
"RTN","IBCNETST",174,0)
 . Q:PATDOB'="19580129"
"RTN","IBCNETST",175,0)
 . Q:PATSEX'="M"
"RTN","IBCNETST",176,0)
 . S GOOD=1
"RTN","IBCNETST",177,0)
 ;
"RTN","IBCNETST",178,0)
 Q 0
"RTN","IBCNETST",179,0)
 ;
"RTN","IBCNEUT1")
0^21^B44735114^B44078437
"RTN","IBCNEUT1",1,0)
IBCNEUT1 ;DAOU/ESG - IIV MISC. UTILITIES ;03-JUN-2002
"RTN","IBCNEUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,497,506,601**;21-MAR-94;Build 14
"RTN","IBCNEUT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT1",4,0)
 ;
"RTN","IBCNEUT1",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT1",6,0)
 Q
"RTN","IBCNEUT1",7,0)
 ;
"RTN","IBCNEUT1",8,0)
FO(VALUE,LENGTH,JUSTIFY,FILL,TRUNC) ; Formatted output function
"RTN","IBCNEUT1",9,0)
 ;
"RTN","IBCNEUT1",10,0)
 ; Input parameters:
"RTN","IBCNEUT1",11,0)
 ;   VALUE    the data to get formatted (required)
"RTN","IBCNEUT1",12,0)
 ;   LENGTH   the resulting length of the formatted string (required)
"RTN","IBCNEUT1",13,0)
 ;   JUSTIFY  "L" or "R" to indicate left or right justification
"RTN","IBCNEUT1",14,0)
 ;               Default is "L" if not passed
"RTN","IBCNEUT1",15,0)
 ;   FILL     the character to fill in the spaces
"RTN","IBCNEUT1",16,0)
 ;               Default is a space if not passed
"RTN","IBCNEUT1",17,0)
 ;   TRUNC    Whether or not to truncate Value if its longer than length
"RTN","IBCNEUT1",18,0)
 ;               Default is Yes, to truncate if not passed
"RTN","IBCNEUT1",19,0)
 ;
"RTN","IBCNEUT1",20,0)
 NEW PAD,Z
"RTN","IBCNEUT1",21,0)
 I LENGTH>245 S LENGTH=245
"RTN","IBCNEUT1",22,0)
 S JUSTIFY=$G(JUSTIFY,"L")               ; default Left
"RTN","IBCNEUT1",23,0)
 S FILL=$E($G(FILL)_" ")                 ; default space
"RTN","IBCNEUT1",24,0)
 S TRUNC=$G(TRUNC,1)                     ; default true
"RTN","IBCNEUT1",25,0)
 S $P(PAD,FILL,LENGTH-$L(VALUE)+1)=""
"RTN","IBCNEUT1",26,0)
 S Z=""
"RTN","IBCNEUT1",27,0)
 ;
"RTN","IBCNEUT1",28,0)
 ; Check for JUSTIFY being "R" first
"RTN","IBCNEUT1",29,0)
 I JUSTIFY["R" D  G FOXIT
"RTN","IBCNEUT1",30,0)
 . I $L(VALUE)'>LENGTH S Z=PAD_VALUE Q
"RTN","IBCNEUT1",31,0)
 . I 'TRUNC S Z=VALUE Q
"RTN","IBCNEUT1",32,0)
 . S Z=$E(VALUE,$L(VALUE)-LENGTH+1,$L(VALUE)) Q
"RTN","IBCNEUT1",33,0)
 . Q
"RTN","IBCNEUT1",34,0)
 ;
"RTN","IBCNEUT1",35,0)
 ; JUSTIFY is "L" below
"RTN","IBCNEUT1",36,0)
 I $L(VALUE)'>LENGTH S Z=$E(VALUE_PAD,1,LENGTH) G FOXIT
"RTN","IBCNEUT1",37,0)
 I 'TRUNC S Z=VALUE G FOXIT
"RTN","IBCNEUT1",38,0)
 S Z=$E(VALUE,1,LENGTH)
"RTN","IBCNEUT1",39,0)
 ;
"RTN","IBCNEUT1",40,0)
FOXIT ;
"RTN","IBCNEUT1",41,0)
 Q Z
"RTN","IBCNEUT1",42,0)
 ;
"RTN","IBCNEUT1",43,0)
 ;
"RTN","IBCNEUT1",44,0)
AMLOOK(NAME,ERRFLG,LIST) ; Look-up an ins. co. name in Auto Match
"RTN","IBCNEUT1",45,0)
 ;
"RTN","IBCNEUT1",46,0)
 ; Input parameters
"RTN","IBCNEUT1",47,0)
 ;   NAME       Insurance company name to look for (required)
"RTN","IBCNEUT1",48,0)
 ;   ERRFLG     Error flag to determine whether or not to return
"RTN","IBCNEUT1",49,0)
 ;                an array of all hits (optional)
"RTN","IBCNEUT1",50,0)
 ;   LIST       The array to be built - passed by reference
"RTN","IBCNEUT1",51,0)
 ;                (optional)
"RTN","IBCNEUT1",52,0)
 ;                LIST(ins co name)=auto match value
"RTN","IBCNEUT1",53,0)
 ;
"RTN","IBCNEUT1",54,0)
 ; Output
"RTN","IBCNEUT1",55,0)
 ;   The value of this function is either 0 or 1.
"RTN","IBCNEUT1",56,0)
 ;     0 - no matches in the Auto Match file for this name
"RTN","IBCNEUT1",57,0)
 ;     1 - at least one match was found in the Auto Match file
"RTN","IBCNEUT1",58,0)
 ;
"RTN","IBCNEUT1",59,0)
 NEW FOUND,AMIEN,INSNAME,AMV,AMVSTART,NOMATCH
"RTN","IBCNEUT1",60,0)
 S FOUND=0                         ; default to not found
"RTN","IBCNEUT1",61,0)
 KILL LIST                         ; initialize results array
"RTN","IBCNEUT1",62,0)
 S ERRFLG=+$G(ERRFLG)              ; ERRFLG default is 0 if not present
"RTN","IBCNEUT1",63,0)
 S NAME=$$TRIM^XLFSTR($G(NAME))    ; strip leading/trailing spaces
"RTN","IBCNEUT1",64,0)
 I NAME="" G AMLOOKX               ; get out if NAME not present
"RTN","IBCNEUT1",65,0)
 ;
"RTN","IBCNEUT1",66,0)
 ; First look for direct hits in the Auto Match file
"RTN","IBCNEUT1",67,0)
 S AMIEN=$O(^IBCN(365.11,"B",NAME,""))
"RTN","IBCNEUT1",68,0)
 I AMIEN D
"RTN","IBCNEUT1",69,0)
 . S FOUND=1
"RTN","IBCNEUT1",70,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",71,0)
 . S INSNAME=$P($G(^IBCN(365.11,AMIEN,0)),U,2)
"RTN","IBCNEUT1",72,0)
 . I INSNAME'="" S LIST(INSNAME)=NAME
"RTN","IBCNEUT1",73,0)
 . Q
"RTN","IBCNEUT1",74,0)
 ;
"RTN","IBCNEUT1",75,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",76,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",77,0)
 ;
"RTN","IBCNEUT1",78,0)
 ; Use the first character of the NAME as a seed value to start
"RTN","IBCNEUT1",79,0)
 ; looping through the Auto Match entries.  Only need to look at
"RTN","IBCNEUT1",80,0)
 ; entries with the "*" wildcard character.
"RTN","IBCNEUT1",81,0)
 S AMV=$E(NAME)
"RTN","IBCNEUT1",82,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'=$E(NAME)  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",83,0)
 . I AMV'["*" Q    ; only looking for wildcarded entries
"RTN","IBCNEUT1",84,0)
 . ;
"RTN","IBCNEUT1",85,0)
 . ; Ensure that the first part of NAME is the same as the first
"RTN","IBCNEUT1",86,0)
 . ; part of the Auto Match value.
"RTN","IBCNEUT1",87,0)
 . S AMVSTART=$P(AMV,"*",1)
"RTN","IBCNEUT1",88,0)
 . I AMVSTART'="",$E(NAME,1,$L(AMVSTART))'=AMVSTART Q
"RTN","IBCNEUT1",89,0)
 . ;
"RTN","IBCNEUT1",90,0)
 . ; Build the NOMATCH variable and check it
"RTN","IBCNEUT1",91,0)
 . D AMC("NAME",AMV,.NOMATCH,0)
"RTN","IBCNEUT1",92,0)
 . I @NOMATCH Q
"RTN","IBCNEUT1",93,0)
 . ;
"RTN","IBCNEUT1",94,0)
 . ; We've got a match so process this accordingly
"RTN","IBCNEUT1",95,0)
 . S FOUND=1
"RTN","IBCNEUT1",96,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",97,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",98,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",99,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",100,0)
 . Q
"RTN","IBCNEUT1",101,0)
 ;
"RTN","IBCNEUT1",102,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",103,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",104,0)
 ;
"RTN","IBCNEUT1",105,0)
 ; Now we need to look at the Auto Match entries which start with
"RTN","IBCNEUT1",106,0)
 ; the "*" wildcard character.
"RTN","IBCNEUT1",107,0)
 S AMV="*"
"RTN","IBCNEUT1",108,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'="*"  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",109,0)
 . D AMC("NAME",AMV,.NOMATCH,0)    ; build the NOMATCH variable
"RTN","IBCNEUT1",110,0)
 . I @NOMATCH Q                    ; check it
"RTN","IBCNEUT1",111,0)
 . S FOUND=1                       ; We've got a match
"RTN","IBCNEUT1",112,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",113,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",114,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",115,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",116,0)
 . Q
"RTN","IBCNEUT1",117,0)
 ;
"RTN","IBCNEUT1",118,0)
AMLOOKX ;
"RTN","IBCNEUT1",119,0)
 Q FOUND
"RTN","IBCNEUT1",120,0)
 ;
"RTN","IBCNEUT1",121,0)
 ;
"RTN","IBCNEUT1",122,0)
AMC(NAME,AMV,MATCH,FLAG) ; Auto Match check function
"RTN","IBCNEUT1",123,0)
 ;
"RTN","IBCNEUT1",124,0)
 ; NAME   - literal variable name to be matched; enclosed in quotes
"RTN","IBCNEUT1",125,0)
 ; AMV    - Auto Match Value to be pattern matched
"RTN","IBCNEUT1",126,0)
 ; MATCH  - Variable passed by reference; returns condition check command
"RTN","IBCNEUT1",127,0)
 ; FLAG   - if 1, then pattern match check is positive (default)
"RTN","IBCNEUT1",128,0)
 ;        - if 0, then pattern match check is negative
"RTN","IBCNEUT1",129,0)
 ;
"RTN","IBCNEUT1",130,0)
 NEW NUMPCE,J,PCE,PCE1
"RTN","IBCNEUT1",131,0)
 S FLAG=$G(FLAG,1)
"RTN","IBCNEUT1",132,0)
 S MATCH=NAME_$S('FLAG:"'?",1:"?")
"RTN","IBCNEUT1",133,0)
 S NUMPCE=$L(AMV,"*")
"RTN","IBCNEUT1",134,0)
 F J=1:1:NUMPCE D
"RTN","IBCNEUT1",135,0)
 . S PCE=$P(AMV,"*",J),PCE1=""
"RTN","IBCNEUT1",136,0)
 . I PCE'="" S PCE1="1"""_PCE_""""
"RTN","IBCNEUT1",137,0)
 . S MATCH=MATCH_PCE1
"RTN","IBCNEUT1",138,0)
 . I J'=NUMPCE S MATCH=MATCH_".E"
"RTN","IBCNEUT1",139,0)
 . Q
"RTN","IBCNEUT1",140,0)
AMCX ;
"RTN","IBCNEUT1",141,0)
 Q
"RTN","IBCNEUT1",142,0)
 ;
"RTN","IBCNEUT1",143,0)
 ;
"RTN","IBCNEUT1",144,0)
AMSEL(AMARRAY) ; Select an insurance company name from an Auto Match hit list
"RTN","IBCNEUT1",145,0)
 ;
"RTN","IBCNEUT1",146,0)
 ; Input
"RTN","IBCNEUT1",147,0)
 ;   Array of Auto Match hits.  The structure of this array is the
"RTN","IBCNEUT1",148,0)
 ;   same as that returned by the call to $$AMLOOK above.
"RTN","IBCNEUT1",149,0)
 ;   AMARRAY(ins co name) = Auto Match value
"RTN","IBCNEUT1",150,0)
 ;
"RTN","IBCNEUT1",151,0)
 ; Output
"RTN","IBCNEUT1",152,0)
 ;   Insurance Company name (subscript of input array), or
"RTN","IBCNEUT1",153,0)
 ;   -1 if user entered "^" or timed out, or
"RTN","IBCNEUT1",154,0)
 ;   0 if user didn't select any of these names
"RTN","IBCNEUT1",155,0)
 ;   No changes are made to the array.
"RTN","IBCNEUT1",156,0)
 ;
"RTN","IBCNEUT1",157,0)
 NEW SEL,NM,CNT,MSG,MSGNUM,CH,TXT
"RTN","IBCNEUT1",158,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNEUT1",159,0)
 S SEL=0
"RTN","IBCNEUT1",160,0)
 I '$D(AMARRAY) G AMSELX    ; Get out if array not passed in
"RTN","IBCNEUT1",161,0)
 ;
"RTN","IBCNEUT1",162,0)
 ; Display the contents of the array
"RTN","IBCNEUT1",163,0)
 S MSG(1)="Results of Auto Match search"
"RTN","IBCNEUT1",164,0)
 S MSG(2)=""
"RTN","IBCNEUT1",165,0)
 S MSG(3)="  "_$$FO("Insurance Company Name",30)_"   Auto Match Value"
"RTN","IBCNEUT1",166,0)
 S MSG(4)="  "_$$FO("----------------------",30)_"   ----------------"
"RTN","IBCNEUT1",167,0)
 S MSG(1,"F")="!!"
"RTN","IBCNEUT1",168,0)
 S NM="",MSGNUM=$O(MSG(""),-1),CNT=0,CH=""
"RTN","IBCNEUT1",169,0)
 F  S NM=$O(AMARRAY(NM)) Q:NM=""  D
"RTN","IBCNEUT1",170,0)
 . S CNT=CNT+1
"RTN","IBCNEUT1",171,0)
 . S TXT=$$FO(NM,30)_"   "_AMARRAY(NM)
"RTN","IBCNEUT1",172,0)
 . S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",173,0)
 . S MSG(MSGNUM)="  "_TXT
"RTN","IBCNEUT1",174,0)
 . I $L(CH)>440 Q
"RTN","IBCNEUT1",175,0)
 . I CH="" S CH=CNT_":"_TXT       ; building the set of codes string
"RTN","IBCNEUT1",176,0)
 . E  S CH=CH_";"_CNT_":"_TXT     ; for the DIR reader later on
"RTN","IBCNEUT1",177,0)
 . Q
"RTN","IBCNEUT1",178,0)
 ;
"RTN","IBCNEUT1",179,0)
 ; Get out if there are no entries in the list
"RTN","IBCNEUT1",180,0)
 I 'CNT G AMSELX
"RTN","IBCNEUT1",181,0)
 ;
"RTN","IBCNEUT1",182,0)
 ; One more blank line in the display
"RTN","IBCNEUT1",183,0)
 S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",184,0)
 S MSG(MSGNUM)=""
"RTN","IBCNEUT1",185,0)
 ;
"RTN","IBCNEUT1",186,0)
 ; Display the entries in the list
"RTN","IBCNEUT1",187,0)
 DO EN^DDIOL(.MSG)
"RTN","IBCNEUT1",188,0)
 ;
"RTN","IBCNEUT1",189,0)
 ; Ask the first question
"RTN","IBCNEUT1",190,0)
 S DIR(0)="YO"
"RTN","IBCNEUT1",191,0)
 S DIR("A")="Would you like to select this insurance company"
"RTN","IBCNEUT1",192,0)
 I CNT>1 S DIR("A")="Would you like to select one of these insurance companies"
"RTN","IBCNEUT1",193,0)
 S DIR("B")="Yes"
"RTN","IBCNEUT1",194,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",195,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",196,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",197,0)
 ;
"RTN","IBCNEUT1",198,0)
 ; User said Yes to the above question
"RTN","IBCNEUT1",199,0)
 ; Get out if there is only one entry in the array
"RTN","IBCNEUT1",200,0)
 I CNT=1 S SEL=$O(AMARRAY("")) G AMSELX
"RTN","IBCNEUT1",201,0)
 ;
"RTN","IBCNEUT1",202,0)
 ; At this point we know there are multiple entries in the list
"RTN","IBCNEUT1",203,0)
 S DIR(0)="SO^"_CH
"RTN","IBCNEUT1",204,0)
 S DIR("A")="Please choose an insurance company"
"RTN","IBCNEUT1",205,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",206,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",207,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",208,0)
 S SEL=$$TRIM^XLFSTR($E(Y(0),1,30),"R")    ; strip trailing spaces
"RTN","IBCNEUT1",209,0)
AMSELX ;
"RTN","IBCNEUT1",210,0)
 Q SEL
"RTN","IBCNEUT1",211,0)
 ;
"RTN","IBCNEUT1",212,0)
LENCHK(VAL,MAX,NUMFLG) ; check value length, called from input transforms on eIV fields
"RTN","IBCNEUT1",213,0)
 ; VAL - value to check
"RTN","IBCNEUT1",214,0)
 ; MAX - max. allowed length for free text field, or max. value for numeric field
"RTN","IBCNEUT1",215,0)
 ; NUMFLG - 1 if field is numeric, 0 if free text
"RTN","IBCNEUT1",216,0)
 ;
"RTN","IBCNEUT1",217,0)
 ; returns 1 if length is acceptable, 0 otherwise
"RTN","IBCNEUT1",218,0)
 N RES
"RTN","IBCNEUT1",219,0)
 S RES=1
"RTN","IBCNEUT1",220,0)
 ; check IB site parameter
"RTN","IBCNEUT1",221,0)
 I '+$P($G(^IBE(350.9,1,62)),U) G LENCHKX
"RTN","IBCNEUT1",222,0)
 I $S(NUMFLG:VAL,1:$L(VAL))>MAX S RES=0
"RTN","IBCNEUT1",223,0)
LENCHKX ;
"RTN","IBCNEUT1",224,0)
 Q RES
"RTN","IBCNEUT1",225,0)
 ;
"RTN","IBCNEUT1",226,0)
CODECK(VAL) ; validate the response for the output transforms on the CODE (.01) field in the IIV Status Table (#365.15) file.
"RTN","IBCNEUT1",227,0)
 ; VAL - value to translate
"RTN","IBCNEUT1",228,0)
 ; OUT - output value based up the value entered.
"RTN","IBCNEUT1",229,0)
 ;
"RTN","IBCNEUT1",230,0)
 N IN,OUT,STR1,STR2,IP,AP
"RTN","IBCNEUT1",231,0)
 S IN=$E(VAL)
"RTN","IBCNEUT1",232,0)
 S STR1="Response Received"
"RTN","IBCNEUT1",233,0)
 S STR2="Problem Identified"
"RTN","IBCNEUT1",234,0)
 S IP="Inactive Policy"
"RTN","IBCNEUT1",235,0)
 S AP="Active Policy"
"RTN","IBCNEUT1",236,0)
 ; IB*2*601/DM added IN="M"
"RTN","IBCNEUT1",237,0)
 S OUT=$S(IN="D":STR1_", "_IP,IN="B":STR2,IN="A":STR1_", "_AP,IN="E":STR1_", "_AP_" (Escalated)",IN="Q":"Inquiry Sent, Awaiting Response",IN="U":STR1_", Ambiguous Answer",IN="C":STR2_", Communication Failure",IN="M":STR1_", MBI Received",1:"")
"RTN","IBCNEUT1",238,0)
CODECKX ;
"RTN","IBCNEUT1",239,0)
 Q OUT
"RTN","IBCNEUT1",240,0)
 ;
"RTN","IBCNEUT3")
0^11^B57983863^B56842259
"RTN","IBCNEUT3",1,0)
IBCNEUT3 ;DAOU/AM - eIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271,416,601**;21-MAR-94;Build 14
"RTN","IBCNEUT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT3",4,0)
 ;
"RTN","IBCNEUT3",5,0)
 ; The purpose of the INSERROR utility is to identify a legitimate
"RTN","IBCNEUT3",6,0)
 ; Insurance Company name, returning the associated Payer IEN and
"RTN","IBCNEUT3",7,0)
 ; National ID.  This extrinsic function can receive either Insurance or
"RTN","IBCNEUT3",8,0)
 ; Buffer data, identified as TYPE I or B, respectively.
"RTN","IBCNEUT3",9,0)
 ;
"RTN","IBCNEUT3",10,0)
 ; The former is the simpler case.  The IEN, in this case the Insurance
"RTN","IBCNEUT3",11,0)
 ; IEN, is validated using the following criteria (some of which is
"RTN","IBCNEUT3",12,0)
 ; validated in routine IBCNEUT4) :
"RTN","IBCNEUT3",13,0)
 ;
"RTN","IBCNEUT3",14,0)
 ; [1] Does it have a National ID?
"RTN","IBCNEUT3",15,0)
 ; [2] Does the National ID have eIV defined?
"RTN","IBCNEUT3",16,0)
 ; [3] Is the Payer active (i.e. the deactivated flag is turned off)
"RTN","IBCNEUT3",17,0)
 ; [4] Is the national connection enabled?
"RTN","IBCNEUT3",18,0)
 ; [5] Is the National ID blocked by VISTA?
"RTN","IBCNEUT3",19,0)
 ;
"RTN","IBCNEUT3",20,0)
 ; If all 5 criteria are met, the Payer IEN and National ID are
"RTN","IBCNEUT3",21,0)
 ; returned.  If not, an error is generated and returned in ARRAY with
"RTN","IBCNEUT3",22,0)
 ; information specific to the type of problem encountered.
"RTN","IBCNEUT3",23,0)
 ;
"RTN","IBCNEUT3",24,0)
 ; If the TYPE passed is B for Buffer, the IEN is the Buffer IEN.
"RTN","IBCNEUT3",25,0)
 ; The Insurance Company name is retrieved from the Buffer file and
"RTN","IBCNEUT3",26,0)
 ; leading and trailing spaces are stripped.  This value is compared to
"RTN","IBCNEUT3",27,0)
 ; the entries in the "B" cross reference of the Insurance Company file
"RTN","IBCNEUT3",28,0)
 ; (whose values have also been stripped of leading and trailing spaces).
"RTN","IBCNEUT3",29,0)
 ; If a match (or several matches) is found,and a unique National ID is
"RTN","IBCNEUT3",30,0)
 ; identified, confirm the 5 set of insurance validation criteria and
"RTN","IBCNEUT3",31,0)
 ; process as above.
"RTN","IBCNEUT3",32,0)
 ;
"RTN","IBCNEUT3",33,0)
 ; If no match in the Insurance Company could be made, check the Auto
"RTN","IBCNEUT3",34,0)
 ; Match file.  If a unique IEN is identified, confirm the 5 set of
"RTN","IBCNEUT3",35,0)
 ; criteria stated above and process in kind.
"RTN","IBCNEUT3",36,0)
 ;
"RTN","IBCNEUT3",37,0)
 ; If no match could be established in both the Insurance Company and the
"RTN","IBCNEUT3",38,0)
 ; Auto Match files, check the insurance company synonym file (stripping 
"RTN","IBCNEUT3",39,0)
 ; off leading and trailing spaces) while preserving case sensitivity.
"RTN","IBCNEUT3",40,0)
 ; If a unique Insurance Company could be identified, confirm the 5 set
"RTN","IBCNEUT3",41,0)
 ; of validation criteria and process as above. 
"RTN","IBCNEUT3",42,0)
 ;
"RTN","IBCNEUT3",43,0)
 ; 
"RTN","IBCNEUT3",44,0)
 ; Can't be called from the top
"RTN","IBCNEUT3",45,0)
 Q
"RTN","IBCNEUT3",46,0)
 ;
"RTN","IBCNEUT3",47,0)
 ;
"RTN","IBCNEUT3",48,0)
INSERROR(TYPE,IEN,ERRFLG,ARRAY) ;
"RTN","IBCNEUT3",49,0)
 ; Formal parameters:
"RTN","IBCNEUT3",50,0)
 ;  TYPE:   Type of IEN passed in the second parameter.
"RTN","IBCNEUT3",51,0)
 ;          Either "B" for "Buffer" or "I" for "Insurance".
"RTN","IBCNEUT3",52,0)
 ;          Mandatory, passed by value.
"RTN","IBCNEUT3",53,0)
 ;  IEN:    IEN to perform a lookup for. Mandatory, passed by value.
"RTN","IBCNEUT3",54,0)
 ;  ERRFLG: Error flag. "" or 0 if no extended error information is
"RTN","IBCNEUT3",55,0)
 ;          requested, 1 if extended error information is requested.
"RTN","IBCNEUT3",56,0)
 ;          Optional (the default is 0), passed by value.
"RTN","IBCNEUT3",57,0)
 ;  ARRAY:  Array of error messages returned by the function.
"RTN","IBCNEUT3",58,0)
 ;          Optional, passed by reference. Whatever is passed in will be
"RTN","IBCNEUT3",59,0)
 ;          KILLed by the function. The structure of the return array is
"RTN","IBCNEUT3",60,0)
 ;          as follows:
"RTN","IBCNEUT3",61,0)
 ;          ARRAY         # of error messages passed back
"RTN","IBCNEUT3",62,0)
 ;          ARRAY(error#) Data for this error number, including error
"RTN","IBCNEUT3",63,0)
 ;          number 1 present in the value returned by the function.
"RTN","IBCNEUT3",64,0)
 ;                [1]   IEN of the error code in the symbol file
"RTN","IBCNEUT3",65,0)
 ;                [2]   # of lines in the error message text
"RTN","IBCNEUT3",66,0)
 ;          ARRAY(error #,line #) - One line of error message text
"RTN","IBCNEUT3",67,0)
 ;                                  up to 70 characters long
"RTN","IBCNEUT3",68,0)
 ;
"RTN","IBCNEUT3",69,0)
 ;          Returned value consists of the following "^"-delimited pcs:
"RTN","IBCNEUT3",70,0)
 ;           [1]   The IEN of the IIV SYMBOL File (#365.15) entry for
"RTN","IBCNEUT3",71,0)
 ;                 the first error condition encountered by the function.
"RTN","IBCNEUT3",72,0)
 ;                 This is only present if a valid Payer was not found.
"RTN","IBCNEUT3",73,0)
 ;           [2]   Payer IEN if a Payer was found, "" otherwise
"RTN","IBCNEUT3",74,0)
 ;           [3]   National ID if a Payer was found
"RTN","IBCNEUT3",75,0)
 ;
"RTN","IBCNEUT3",76,0)
 ; Initialize all variables used in this program
"RTN","IBCNEUT3",77,0)
 N INSIEN,INSNAME,NAMEARR,PAYID,PAYIEN,SYMIEN
"RTN","IBCNEUT3",78,0)
 ; Initialize return variables
"RTN","IBCNEUT3",79,0)
 S (PAYID,PAYIEN,SYMIEN)=""
"RTN","IBCNEUT3",80,0)
 ; If the calling program didn't pass the Extended Error flag, init it
"RTN","IBCNEUT3",81,0)
 S ERRFLG=+$G(ERRFLG)
"RTN","IBCNEUT3",82,0)
 ; Initialize array of extended error info to be returned
"RTN","IBCNEUT3",83,0)
 K ARRAY
"RTN","IBCNEUT3",84,0)
 ; Validate input parameters
"RTN","IBCNEUT3",85,0)
 I $G(TYPE)'="B",$G(TYPE)'="I" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN type "_$G(TYPE)_" passed to the insurance match algorithm is neither 'B' nor 'I'.") G EXIT
"RTN","IBCNEUT3",86,0)
 I $G(IEN)="" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN is not passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",87,0)
 I TYPE="B",'$D(^IBA(355.33,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Buffer IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",88,0)
 I TYPE="B",$$MBICHK^IBCNEUT7(IEN) Q $$PAYER^IBCNEUT4($$GET1^DIQ(350.9,"1,","MBI PAYER","I")) ; IB*2*601/DM
"RTN","IBCNEUT3",89,0)
 I TYPE="I",'$D(^DIC(36,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Insurance Company IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",90,0)
 ;
"RTN","IBCNEUT3",91,0)
 ; If the IEN is an Insurance Company IEN, validate it
"RTN","IBCNEUT3",92,0)
 I TYPE="I" D  G EXIT
"RTN","IBCNEUT3",93,0)
 . N TMP
"RTN","IBCNEUT3",94,0)
 . ; Check to see if ins co is ACTIVE
"RTN","IBCNEUT3",95,0)
 . S TMP=$$ACTIVE^IBCNEUT4(IEN)
"RTN","IBCNEUT3",96,0)
 . I 'TMP S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance Company "_$P(TMP,U,2)_" is not active.") Q
"RTN","IBCNEUT3",97,0)
 . D VALID^IBCNEUT4(IEN,.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",98,0)
 ;
"RTN","IBCNEUT3",99,0)
 ; Retrieve the ins co name from the Ins Buffer
"RTN","IBCNEUT3",100,0)
 S INSNAME=$$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U,1))
"RTN","IBCNEUT3",101,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B13") G EXIT
"RTN","IBCNEUT3",102,0)
 ; Retrieve all ins co IENs matching this ins co name
"RTN","IBCNEUT3",103,0)
 D INSIEN^IBCNEUT8(INSNAME,.INSIEN)
"RTN","IBCNEUT3",104,0)
 ; 
"RTN","IBCNEUT3",105,0)
 ; If one or more ins. co. name matches found, retrieve Payer info
"RTN","IBCNEUT3",106,0)
 I $D(INSIEN) D  G EXIT
"RTN","IBCNEUT3",107,0)
 . ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",108,0)
 . I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") Q
"RTN","IBCNEUT3",109,0)
 . ; Find National IDs for these ins co IENs
"RTN","IBCNEUT3",110,0)
 . D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",111,0)
 . ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",112,0)
 . I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active.") Q
"RTN","IBCNEUT3",113,0)
 . ; Quit with an error if no Payer is found for these ins cos
"RTN","IBCNEUT3",114,0)
 . I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") Q
"RTN","IBCNEUT3",115,0)
 . ; Quit with an error if more than one Payer found
"RTN","IBCNEUT3",116,0)
 . I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","There are multiple Insurance companies named "_INSNAME_" in the Insurance Company file that are linked to more than one Payer",.PAYID),PAYID="" Q
"RTN","IBCNEUT3",117,0)
 . ; Validate the found unique Payer
"RTN","IBCNEUT3",118,0)
 . D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",119,0)
 ;
"RTN","IBCNEUT3",120,0)
 ; If no exact ins co name match was found, check AutoMatch file
"RTN","IBCNEUT3",121,0)
 ; No need to filter out inactives as the AMLOOK will handle it
"RTN","IBCNEUT3",122,0)
 I $$AMLOOK^IBCNEUT1(INSNAME,1,.NAMEARR) D  I $D(INSIEN) G EXIT
"RTN","IBCNEUT3",123,0)
 . N NAME
"RTN","IBCNEUT3",124,0)
 . ; Based on the array of ins cos returned by the AutoMatch
"RTN","IBCNEUT3",125,0)
 . ; build an array of ins co IENs that they point to
"RTN","IBCNEUT3",126,0)
 . S NAME="" F  S NAME=$O(NAMEARR(NAME)) Q:NAME=""  D INSIEN^IBCNEUT8($$TRIM^XLFSTR(NAME),.INSIEN)
"RTN","IBCNEUT3",127,0)
 . ; If nothing found in the Insurance Co x-ref, quit w/o validation
"RTN","IBCNEUT3",128,0)
 . I '$D(INSIEN) Q
"RTN","IBCNEUT3",129,0)
 . ; Check if there is more than one ins co IEN that matches
"RTN","IBCNEUT3",130,0)
 . ; the entered name, in which case exit with an error
"RTN","IBCNEUT3",131,0)
 . I $O(INSIEN(""))'=$O(INSIEN(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company in the Auto Match file",.NAMEARR) Q
"RTN","IBCNEUT3",132,0)
 . ; Validate the found unique ins co IEN
"RTN","IBCNEUT3",133,0)
 . D VALID^IBCNEUT4($O(INSIEN("")),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",134,0)
 ;
"RTN","IBCNEUT3",135,0)
 ;  If the first two lookups failed, check the Ins Co Synonym file:
"RTN","IBCNEUT3",136,0)
 ; Retrieve all ins co IENs that match in the Synonym file
"RTN","IBCNEUT3",137,0)
 M INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",138,0)
 ;
"RTN","IBCNEUT3",139,0)
 ; If nothing found in the Synonym file, error out
"RTN","IBCNEUT3",140,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B1","Insurance company "_INSNAME_" could not be matched to a valid entry in the Insurance Company file.") G EXIT
"RTN","IBCNEUT3",141,0)
 ; Loop thru the ins co IENs that matched in the Synonym file
"RTN","IBCNEUT3",142,0)
 S INSIEN=0 F  S INSIEN=$O(INSIEN(INSIEN)) Q:'INSIEN  D
"RTN","IBCNEUT3",143,0)
 . N NAME
"RTN","IBCNEUT3",144,0)
 . ; Retrieve the ins co name for this IEN
"RTN","IBCNEUT3",145,0)
 . S NAME=$$TRIM^XLFSTR($P($G(^DIC(36,INSIEN,0)),U,1))
"RTN","IBCNEUT3",146,0)
 . I NAME'="" S NAMEARR(NAME)=""
"RTN","IBCNEUT3",147,0)
 ;
"RTN","IBCNEUT3",148,0)
 ; If more than one ins co name was found, error out
"RTN","IBCNEUT3",149,0)
 I $O(NAMEARR(""))'=$O(NAMEARR(""),-1) D  G EXIT
"RTN","IBCNEUT3",150,0)
 . S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company name in the Synonym cross-reference of the Insurance Company file",.NAMEARR)
"RTN","IBCNEUT3",151,0)
 ;
"RTN","IBCNEUT3",152,0)
 ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",153,0)
 I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") G EXIT
"RTN","IBCNEUT3",154,0)
 ; Find Payers for these ins co IENs
"RTN","IBCNEUT3",155,0)
 D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",156,0)
 ;
"RTN","IBCNEUT3",157,0)
 ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",158,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active."),PAYID="" G EXIT
"RTN","IBCNEUT3",159,0)
 ; If no Payer was found, error out
"RTN","IBCNEUT3",160,0)
 I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_$O(NAMEARR(""))_" is not linked to a Payer.") G EXIT
"RTN","IBCNEUT3",161,0)
 ; If multiple Payers were found, error out
"RTN","IBCNEUT3",162,0)
 I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","Insurance company "_$O(NAMEARR(""))_" is linked to more than one Payer",.PAYID),PAYID="" G EXIT
"RTN","IBCNEUT3",163,0)
 ; Validate the found unique Payer
"RTN","IBCNEUT3",164,0)
 D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",165,0)
 ;
"RTN","IBCNEUT3",166,0)
EXIT ; Main function exit point
"RTN","IBCNEUT3",167,0)
 Q SYMIEN_U_PAYIEN_U_PAYID
"RTN","IBCNEUT3",168,0)
 ;
"RTN","IBCNEUT4")
0^12^B51389763^B50266196
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - eIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416,497,601**;21-MAR-94;Build 14
"RTN","IBCNEUT4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",10,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",11,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",12,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",13,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",14,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",15,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",16,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",17,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",18,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",19,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",20,0)
ACTIVEX ;
"RTN","IBCNEUT4",21,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",22,0)
 ;
"RTN","IBCNEUT4",23,0)
 ;
"RTN","IBCNEUT4",24,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",25,0)
 ; company based on the name.
"RTN","IBCNEUT4",26,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",27,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",28,0)
 ;
"RTN","IBCNEUT4",29,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",30,0)
 NEW EXCL
"RTN","IBCNEUT4",31,0)
 S EXCL=0
"RTN","IBCNEUT4",32,0)
 ;
"RTN","IBCNEUT4",33,0)
 ; Screen out bad data
"RTN","IBCNEUT4",34,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",35,0)
 ;
"RTN","IBCNEUT4",36,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",37,0)
 I NAME["MEDICAID" S EXCL=1
"RTN","IBCNEUT4",38,0)
EXCLUDX ;
"RTN","IBCNEUT4",39,0)
 Q EXCL
"RTN","IBCNEUT4",40,0)
 ;
"RTN","IBCNEUT4",41,0)
 ;
"RTN","IBCNEUT4",42,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the eIV status field from an
"RTN","IBCNEUT4",43,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",44,0)
 ; buffer entry).  If the FORCE variable is not passed then the eIV
"RTN","IBCNEUT4",45,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",46,0)
 ;
"RTN","IBCNEUT4",47,0)
 ; Parameters
"RTN","IBCNEUT4",48,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",49,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",50,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",51,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",52,0)
 ;             eIV status field will be cleared regardless of the
"RTN","IBCNEUT4",53,0)
 ;             current status 
"RTN","IBCNEUT4",54,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",55,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",56,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",57,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",58,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",59,0)
 D ^DIE
"RTN","IBCNEUT4",60,0)
 S EDITED=1
"RTN","IBCNEUT4",61,0)
CLEARX ;
"RTN","IBCNEUT4",62,0)
 Q
"RTN","IBCNEUT4",63,0)
 ;
"RTN","IBCNEUT4",64,0)
 ;
"RTN","IBCNEUT4",65,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",66,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",67,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",68,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",69,0)
 ; Input
"RTN","IBCNEUT4",70,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",71,0)
 ; Output
"RTN","IBCNEUT4",72,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",73,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",74,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",75,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",76,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",77,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",78,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",79,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",80,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",81,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",82,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",83,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",84,0)
 ;
"RTN","IBCNEUT4",85,0)
 NEW IB0,IB20,IB90,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",86,0)
 S DATA=""
"RTN","IBCNEUT4",87,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",88,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",89,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",90,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",91,0)
 S IB90=$G(^IBA(355.33,IBBUFDA,90))    ; IB*2.0*497 (vd)
"RTN","IBCNEUT4",92,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",93,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",94,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",95,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",96,0)
 S $P(DATA,U,5)=$P(IB90,U,2)    ; group number - IB*2.0*497 (vd)
"RTN","IBCNEUT4",97,0)
 S $P(DATA,U,6)=$P(IB90,U,1)    ; group name - IB*2.0*497 (vd)
"RTN","IBCNEUT4",98,0)
 S $P(DATA,U,7)=$P(IB90,U,3)    ; subscriber id - IB*2.0*497 (vd)
"RTN","IBCNEUT4",99,0)
 ;
"RTN","IBCNEUT4",100,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",101,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",102,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",103,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",104,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",105,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",106,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",107,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",108,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",109,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",110,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",111,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",112,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",113,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",114,0)
 . Q
"RTN","IBCNEUT4",115,0)
 ;
"RTN","IBCNEUT4",116,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",117,0)
INFOX ;
"RTN","IBCNEUT4",118,0)
 Q DATA
"RTN","IBCNEUT4",119,0)
 ;
"RTN","IBCNEUT4",120,0)
 ;
"RTN","IBCNEUT4",121,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",122,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",123,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",124,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",125,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",126,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",127,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",128,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",129,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",130,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",131,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",132,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") G VALIDX
"RTN","IBCNEUT4",133,0)
 D VALPYR(INSNAME) ; Payer val'n
"RTN","IBCNEUT4",134,0)
VALIDX ;
"RTN","IBCNEUT4",135,0)
 Q
"RTN","IBCNEUT4",136,0)
 ;
"RTN","IBCNEUT4",137,0)
PAYER(PAYIEN) ;
"RTN","IBCNEUT4",138,0)
 ; Entry pt for Most Pop Payer (called by POP^IBCNEDE4)
"RTN","IBCNEUT4",139,0)
 ; IB*2*601/DM comments and adjust return to add PAYIEN
"RTN","IBCNEUT4",140,0)
 ; Additionally, called from INSERROR^IBCNEUT3() for MBI Inquiries
"RTN","IBCNEUT4",141,0)
 ; Returned value consists of the following "^"-delimited pcs:
"RTN","IBCNEUT4",142,0)
 ; [1] The IEN of the IIV SYMBOL File (#365.15) entry for
"RTN","IBCNEUT4",143,0)
 ; the first error condition encountered by the function.
"RTN","IBCNEUT4",144,0)
 ; This is only present if a valid Payer was not found.
"RTN","IBCNEUT4",145,0)
 ; [2] Payer IEN if a Payer was found, "" otherwise
"RTN","IBCNEUT4",146,0)
 ; [3] National ID if a Payer was found
"RTN","IBCNEUT4",147,0)
 N SYMIEN,PAYID
"RTN","IBCNEUT4",148,0)
 N APPDATA,APPIEN ; Set within tag VALPYR these variables are never
"RTN","IBCNEUT4",149,0)
 ;                  killed. Using tag VALID's method of NEWing variables
"RTN","IBCNEUT4",150,0)
 ;                  first will allow them to be killed appropriately.
"RTN","IBCNEUT4",151,0)
 N ARRAY ; This is an array that is set by ERROR^IBCNEUT8 but never
"RTN","IBCNEUT4",152,0)
 ;         killed.  When there is a most popular payer that is not
"RTN","IBCNEUT4",153,0)
 ;         eligible for inquiries, ARRAY would continue to grow.
"RTN","IBCNEUT4",154,0)
 S (SYMIEN,PAYID)=""
"RTN","IBCNEUT4",155,0)
 D VALPYR("")
"RTN","IBCNEUT4",156,0)
 Q SYMIEN_U_PAYIEN_U_PAYID
"RTN","IBCNEUT4",157,0)
 ;
"RTN","IBCNEUT4",158,0)
VALPYR(INSNM) ;
"RTN","IBCNEUT4",159,0)
 ; Payer Val'n - note: PAYIEN (payer IEN) must be set
"RTN","IBCNEUT4",160,0)
 ; If INSNM="" val'n is for Most Pop Payer
"RTN","IBCNEUT4",161,0)
 N PAYNM
"RTN","IBCNEUT4",162,0)
 ;
"RTN","IBCNEUT4",163,0)
 S INSNM=$G(INSNM) ; Init variable if not passed
"RTN","IBCNEUT4",164,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",165,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",166,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a Payer.") Q
"RTN","IBCNEUT4",167,0)
 ; Retrieve payer name
"RTN","IBCNEUT4",168,0)
 S PAYNM=$P($G(^IBE(365.12,PAYIEN,0)),U,1)
"RTN","IBCNEUT4",169,0)
 ; Retrieve the IEN of the eIV Application
"RTN","IBCNEUT4",170,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",171,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIV Payer Application has not been created for this site.") Q
"RTN","IBCNEUT4",172,0)
 ; Verify the existence of the application for this Payer
"RTN","IBCNEUT4",173,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not set up to accept electronic insurance eligibility requests.") Q
"RTN","IBCNEUT4",174,0)
 ; Retrieve the eIV-specific application data for this Payer
"RTN","IBCNEUT4",175,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",176,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",177,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",178,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not locally active for eIV.")
"RTN","IBCNEUT4",179,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not nationally active for eIV.")
"RTN","IBCNEUT4",180,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",181,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",182,0)
 Q
"RTN","IBCNEUT4",183,0)
 ;
"RTN","IBCNEUT4",184,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",185,0)
 ; Input parameters:
"RTN","IBCNEUT4",186,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",187,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",188,0)
 ;         names or National ID names
"RTN","IBCNEUT4",189,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",190,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",191,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",192,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",193,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",194,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",195,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",196,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",197,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",198,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",199,0)
 ;
"RTN","IBCNEUT4",200,0)
 Q COLIST_"."
"RTN","IBCNEUT4",201,0)
 ;
"RTN","IBCNEUT7")
0^13^B37109575^B82015033
"RTN","IBCNEUT7",1,0)
IBCNEUT7 ;DAOU/ALA - IIV MISC. UTILITIES ;14-OCT-2015
"RTN","IBCNEUT7",2,0)
 ;;2.0;INTEGRATED BILLING;**184,549,579,582,601**;21-MAR-94;Build 14
"RTN","IBCNEUT7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT7",4,0)
 ;
"RTN","IBCNEUT7",5,0)
 ;**Program Description**
"RTN","IBCNEUT7",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT7",7,0)
 ; IB*2*601/DM XMITOK() Gate-keeper routine moved to IBCNETST
"RTN","IBCNEUT7",8,0)
 ;
"RTN","IBCNEUT7",9,0)
 Q
"RTN","IBCNEUT7",10,0)
 ;
"RTN","IBCNEUT7",11,0)
DEATH(DFN,DOD)   ;EP
"RTN","IBCNEUT7",12,0)
 ; IB*2.0*549 added method
"RTN","IBCNEUT7",13,0)
 ; Sets the INSURANCE EXPIRATION DATE (file 2.3121, field ) for all active
"RTN","IBCNEUT7",14,0)
 ; insurances of the selected patient to be the date of death +1
"RTN","IBCNEUT7",15,0)
 ; Input:   DFN     - IEN of the patient to term insurances for
"RTN","IBCNEUT7",16,0)
 ;          DOD     - Internal date of death (file 2, field .351) of the patient
"RTN","IBCNEUT7",17,0)
 N MTIME,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEUT7",18,0)
 S MTIME=$$NOW^XLFDT()                      ; Fileman date/time
"RTN","IBCNEUT7",19,0)
 S ZTDTH=$$FMTH^XLFDT(MTIME)                ; Convert to $H format
"RTN","IBCNEUT7",20,0)
 ;
"RTN","IBCNEUT7",21,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEUT7",22,0)
 S ZTRTN="DEATH2^IBCNEUT7"
"RTN","IBCNEUT7",23,0)
 S ZTDESC="eIV Auto Termination of Policies for deceased patients"
"RTN","IBCNEUT7",24,0)
 S ZTIO=""
"RTN","IBCNEUT7",25,0)
 S ZTSAVE("DFN")="",ZTSAVE("DOD")=""
"RTN","IBCNEUT7",26,0)
 D ^%ZTLOAD ; Call TaskManager
"RTN","IBCNEUT7",27,0)
 Q
"RTN","IBCNEUT7",28,0)
 ;
"RTN","IBCNEUT7",29,0)
DEATH2 ;EP from TaskMan
"RTN","IBCNEUT7",30,0)
 ; IB*2.0*549 added method
"RTN","IBCNEUT7",31,0)
 ; Sets the INSURANCE EXPIRATION DATE (file 2.3121, field ) for all active
"RTN","IBCNEUT7",32,0)
 ; insurances of the selected patient to be the date of death +1
"RTN","IBCNEUT7",33,0)
 ; IB*2.0*579 - Also sets the 'COVERED BY HEALTH INSURANCE' to 'N' (file 2, field .3192)
"RTN","IBCNEUT7",34,0)
 ;              if it's not already set to 'N'
"RTN","IBCNEUT7",35,0)
 ; Input:   DFN     - IEN of the patient to term insurances for
"RTN","IBCNEUT7",36,0)
 ;          DOD     - Internal date of death (file 2, field .351) of the patient
"RTN","IBCNEUT7",37,0)
 N EXPDT,DA,DEACT,DODX,FDA,HCOV,IBIEN                ; IB*2.0*579 - added DEACT,HCOV
"RTN","IBCNEUT7",38,0)
 S DEACT=0                                           ; IB*2.0*579 - added line
"RTN","IBCNEUT7",39,0)
 S DODX=$P($$FMADD^XLFDT(DOD,1),".",1)               ; Date of Death +1
"RTN","IBCNEUT7",40,0)
 S IBIEN=0
"RTN","IBCNEUT7",41,0)
 F  S IBIEN=$O(^DPT(DFN,.312,IBIEN)) Q:+IBIEN=0  D
"RTN","IBCNEUT7",42,0)
 . S EXPDT=$$GET1^DIQ(2.312,IBIEN_","_DFN_",",3,"I") ; Policy Expiration Date
"RTN","IBCNEUT7",43,0)
 . Q:EXPDT'=""                                       ; Policy has an expiration date
"RTN","IBCNEUT7",44,0)
 . L +^DPT(DFN,.312,IBIEN):5
"RTN","IBCNEUT7",45,0)
 . I '$T D  Q                                        ; Send email IB SUPERVISOR users
"RTN","IBCNEUT7",46,0)
 . . N EDT,MLGRP,MSG,PNM,SSN,SUBJECT,XMY
"RTN","IBCNEUT7",47,0)
 . . S SUBJECT="eIV: Policy Expiration for deceased patient"
"RTN","IBCNEUT7",48,0)
 . . S MLGRP=$$MGRP^IBCNEUT5
"RTN","IBCNEUT7",49,0)
 . . S PNM=$$GET1^DIQ(2,DFN,.01)
"RTN","IBCNEUT7",50,0)
 . . S EDT=$$FMTE^XLFDT(DODX,"2DZ")
"RTN","IBCNEUT7",51,0)
 . . S SSN=$$GET1^DIQ(2,DFN,.09),SSN=$E(SSN,6,9)
"RTN","IBCNEUT7",52,0)
 . . S MSG(1)=PNM_" "_SSN_" was just marked as deceased. Action Needed:"
"RTN","IBCNEUT7",53,0)
 . . S MSG(2)=" Update the patient's active policies and enter and expiration date of "_EDT_"."
"RTN","IBCNEUT7",54,0)
 . . D GETPER("IB SUPERVISOR",.XMY)
"RTN","IBCNEUT7",55,0)
 . . D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEUT7",56,0)
 . ;
"RTN","IBCNEUT7",57,0)
 . ; Set Policy expiration date to be date of death +1
"RTN","IBCNEUT7",58,0)
 . S DEACT=1                                        ; IB*2.0*579 - added line
"RTN","IBCNEUT7",59,0)
 . K DA,FDA
"RTN","IBCNEUT7",60,0)
 . S DA=IBIEN,DA(1)=DFN
"RTN","IBCNEUT7",61,0)
 . S FDA(2.312,DA_","_DA(1)_",",1.05)=$$NOW^XLFDT() ; Date Last Edited
"RTN","IBCNEUT7",62,0)
 . S FDA(2.312,DA_","_DA(1)_",",1.06)=.5            ; Last Edited By
"RTN","IBCNEUT7",63,0)
 . S FDA(2.312,DA_","_DA(1)_",",3)=DODX             ; Date of Death +1
"RTN","IBCNEUT7",64,0)
 . D FILE^DIE("","FDA")
"RTN","IBCNEUT7",65,0)
 . L -^DPT(DFN,.312,IBIEN)
"RTN","IBCNEUT7",66,0)
 ;
"RTN","IBCNEUT7",67,0)
 ; IB*2.0*579 - added if statement below
"RTN","IBCNEUT7",68,0)
 ; If any policies were expired and the Covered by Health Insurance flag is set to 'Y'.
"RTN","IBCNEUT7",69,0)
 ; change it to 'N'
"RTN","IBCNEUT7",70,0)
 I DEACT D
"RTN","IBCNEUT7",71,0)
 . S HCOV=$$GET1^DIQ(2,DFN_",",.3192,"I")
"RTN","IBCNEUT7",72,0)
 . Q:HCOV'="Y"                              ; Already set to 'N'
"RTN","IBCNEUT7",73,0)
 . N IBSUPRES
"RTN","IBCNEUT7",74,0)
 . S IBSUPRES=1
"RTN","IBCNEUT7",75,0)
 . D COVERED^IBCNSM31(DFN,HCOV)             ; Set the Health Coverage flag to 'N'
"RTN","IBCNEUT7",76,0)
 Q
"RTN","IBCNEUT7",77,0)
 ;
"RTN","IBCNEUT7",78,0)
GETPER(SECKEY,XMY) ;EP
"RTN","IBCNEUT7",79,0)
 ; IB*2.0*549 Added method
"RTN","IBCNEUT7",80,0)
 ; Returns a list of users with the specified security key
"RTN","IBCNEUT7",81,0)
 ; Input: SECKEY - Security key to search for
"RTN","IBCNEUT7",82,0)
 ; Output: XMY() - Array email addresses for users who have the specified key
"RTN","IBCNEUT7",83,0)
 N XUSIEN,X
"RTN","IBCNEUT7",84,0)
 S XUSIEN=0
"RTN","IBCNEUT7",85,0)
 F  S XUSIEN=$O(^XUSEC(SECKEY,XUSIEN)) Q:'XUSIEN  D
"RTN","IBCNEUT7",86,0)
 . ;
"RTN","IBCNEUT7",87,0)
 . ; Don't return TERMINATED or DISUSERed users
"RTN","IBCNEUT7",88,0)
 . S X=$$ACTIVE^XUSER(XUSIEN)
"RTN","IBCNEUT7",89,0)
 . I X=""!($P(X,"^",1)=0) Q
"RTN","IBCNEUT7",90,0)
 . ;
"RTN","IBCNEUT7",91,0)
 . ; Put users emails into output array
"RTN","IBCNEUT7",92,0)
 . S XMY(XUSIEN)=""
"RTN","IBCNEUT7",93,0)
 Q
"RTN","IBCNEUT7",94,0)
 ;
"RTN","IBCNEUT7",95,0)
FTFIC(IBIEN,MDCALL) ;EP
"RTN","IBCNEUT7",96,0)
 ; IB*2.0*549 added function
"RTN","IBCNEUT7",97,0)
 ; Returns Timely Filing Timeframe text for a specified Insurance Company
"RTN","IBCNEUT7",98,0)
 ; translate fields 36,.18 and 36,.19 to agreed upon displayed text for
"RTN","IBCNEUT7",99,0)
 ; Insurance company Reports
"RTN","IBCNEUT7",100,0)
 ; Input:   IBIEN   - IEN of the insurance company to get data from
"RTN","IBCNEUT7",101,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",102,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",103,0)
 ; Returns: Timely Filing Timeframe text for the specified Insurance Company
"RTN","IBCNEUT7",104,0)
 ;          NOTE: If MDCALL=1 null Standard FTF Values and Qualifiers are 
"RTN","IBCNEUT7",105,0)
 ;                as '###' instead of null or 'UNKNOWN' respectively
"RTN","IBCNEUT7",106,0)
 N FTF,FTFV
"RTN","IBCNEUT7",107,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",108,0)
 Q:'$D(IBIEN) ""
"RTN","IBCNEUT7",109,0)
 S FTF=$$GET1^DIQ(36,IBIEN_",",.18,"I")     ; Standard FTF IEN (file 355.13)
"RTN","IBCNEUT7",110,0)
 S FTFV=$$GET1^DIQ(36,IBIEN_",",.19,"I")    ; Standard FTF Value
"RTN","IBCNEUT7",111,0)
 Q $$FTFMAP(FTF,FTFV,MDCALL)
"RTN","IBCNEUT7",112,0)
 ;
"RTN","IBCNEUT7",113,0)
FTFGP(GIEN,MDCALL) ;EP
"RTN","IBCNEUT7",114,0)
 ; IB*2.0*549 added function
"RTN","IBCNEUT7",115,0)
 ; Returns Timely Filing Timeframe text for a specified Group Insurance Plan
"RTN","IBCNEUT7",116,0)
 ; translate fields 355.3,.16 and 355.3,.17 to agreed upon displayed text for
"RTN","IBCNEUT7",117,0)
 ; Insurance company Reports
"RTN","IBCNEUT7",118,0)
 ; Input:   GIEN   - IEN of the group insurance plan to get data from
"RTN","IBCNEUT7",119,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",120,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",121,0)
 ; Returns: Timely Filing Timeframe text for the specified Group Insurance Plan
"RTN","IBCNEUT7",122,0)
 ;          NOTE: If MDCALL=1 null Standard FTF Values and Qualifiers are 
"RTN","IBCNEUT7",123,0)
 ;                as '###' instead of null or 'UNKNOWN' respectively
"RTN","IBCNEUT7",124,0)
 N FTF,FTFV,XX,ZZ
"RTN","IBCNEUT7",125,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",126,0)
 Q:'$D(GIEN) ""
"RTN","IBCNEUT7",127,0)
 S FTF=$$GET1^DIQ(355.3,GIEN_",",.16,"I")   ; Standard FTF IEN (file 355.13)
"RTN","IBCNEUT7",128,0)
 S FTFV=$$GET1^DIQ(355.3,GIEN_",",.17,"I")  ; Standard FTF Value
"RTN","IBCNEUT7",129,0)
 Q $$FTFMAP(FTF,FTFV,MDCALL)
"RTN","IBCNEUT7",130,0)
 ;
"RTN","IBCNEUT7",131,0)
FTFMAP(FIEN,FTFV,MDCALL) ; Returns Timely Filing Text for the specified Standard FTF
"RTN","IBCNEUT7",132,0)
 ; and Standard FTF Value
"RTN","IBCNEUT7",133,0)
 ;IB*2.0*549 added function
"RTN","IBCNEUT7",134,0)
 ; Input:   FIEN   - IEN of the Standard FTF (filer 355.13)
"RTN","IBCNEUT7",135,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",136,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",137,0)
 ; Output:  FTFV    - Standard FTF Value
"RTN","IBCNEUT7",138,0)
 ; Returns: Timely Filing Timeframe text
"RTN","IBCNEUT7",139,0)
 N FTF
"RTN","IBCNEUT7",140,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",141,0)
 I MDCALL,FTFV="" S FTFV="###"
"RTN","IBCNEUT7",142,0)
 S FTF=$$GET1^DIQ(355.13,FIEN_",",.01)       ; Standard FTF name
"RTN","IBCNEUT7",143,0)
 Q:FTF="" FTFV_" ("_$S(MDCALL:"###",1:"UNKNOWN")_")"
"RTN","IBCNEUT7",144,0)
 Q:FTF="DAYS" FTFV_" (DYS)"
"RTN","IBCNEUT7",145,0)
 Q:FTF="DAYS OF FOLLOWING YEAR" FTFV_" (DYS OF NEXT YR)"
"RTN","IBCNEUT7",146,0)
 Q:FTF="DAYS PLUS ONE YEAR" FTFV_" (DYS_1 YR)"
"RTN","IBCNEUT7",147,0)
 Q:FTF="END OF FOLLOWING YEAR" FTFV_" (END OF NEXT YR)"
"RTN","IBCNEUT7",148,0)
 Q:FTF="MONTH(S)" FTFV_" (MOS)"
"RTN","IBCNEUT7",149,0)
 Q:FTF="MONTHS OF FOLLOWING YEAR" FTFV_" (MOS OF NEXT YR)"
"RTN","IBCNEUT7",150,0)
 Q:FTF="NO FILING TIME FRAME LIMIT" FTFV_" (N/A)"
"RTN","IBCNEUT7",151,0)
 Q:FTF="YEAR(S)" FTFV_" (YRS)"
"RTN","IBCNEUT7",152,0)
 Q FTFV_" ("_$S(MDCALL:"###",1:"UNKNOWN")_")"
"RTN","IBCNEUT7",153,0)
 ;
"RTN","IBCNEUT7",154,0)
RSTA(REC) ; Update status in Response File from Transmission Queue to
"RTN","IBCNEUT7",155,0)
 ;         Communication Timeout
"RTN","IBCNEUT7",156,0)
 ;  Input Parameters
"RTN","IBCNEUT7",157,0)
 ;    REC = IEN from TQ file
"RTN","IBCNEUT7",158,0)
 ;    -- Removed 10/29/02 --WCH = Which Record 'P'=Previous, 'C'=Current
"RTN","IBCNEUT7",159,0)
 ;    -- if no Which Record passed, it will assume the current one
"RTN","IBCNEUT7",160,0)
 ;
"RTN","IBCNEUT7",161,0)
 N HIEN,RIEN
"RTN","IBCNEUT7",162,0)
 S HIEN=0
"RTN","IBCNEUT7",163,0)
 ; Loop thru HL7 messages associated with the IIV Inquiry
"RTN","IBCNEUT7",164,0)
 F  S HIEN=$O(^IBCN(365.1,REC,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEUT7",165,0)
 .  ; Determine IIV Response associated with the HL7 message
"RTN","IBCNEUT7",166,0)
 .  S RIEN=$P($G(^IBCN(365.1,REC,2,HIEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT7",167,0)
 .  ; If IIV Response status is 'Response Received', don't update it
"RTN","IBCNEUT7",168,0)
 .  I $P($G(^IBCN(365,RIEN,0)),U,6)=3 Q
"RTN","IBCNEUT7",169,0)
 .  ; Update IIV Response status to 'Communication Timeout'
"RTN","IBCNEUT7",170,0)
 .  D RSP^IBCNEUT2(RIEN,5)
"RTN","IBCNEUT7",171,0)
 .  Q
"RTN","IBCNEUT7",172,0)
 ;
"RTN","IBCNEUT7",173,0)
 Q
"RTN","IBCNEUT7",174,0)
 ;
"RTN","IBCNEUT7",175,0)
TXT(TXT) ;Parse text for wrapping
"RTN","IBCNEUT7",176,0)
 ;  Input Parameter
"RTN","IBCNEUT7",177,0)
 ;   TXT = The array name
"RTN","IBCNEUT7",178,0)
 ;
"RTN","IBCNEUT7",179,0)
 I '$D(@(TXT)) Q
"RTN","IBCNEUT7",180,0)
 ;
"RTN","IBCNEUT7",181,0)
 K ^UTILITY($J,"W")
"RTN","IBCNEUT7",182,0)
 ;
"RTN","IBCNEUT7",183,0)
 ;  Define length of text string; left is 1 and right is 78
"RTN","IBCNEUT7",184,0)
 S DIWF="",DIWL=1,DIWR=78
"RTN","IBCNEUT7",185,0)
 ;
"RTN","IBCNEUT7",186,0)
 ;  Format text into scratch file
"RTN","IBCNEUT7",187,0)
 S CT=0
"RTN","IBCNEUT7",188,0)
 F  S CT=$O(@(TXT)@(CT)) Q:'CT  D
"RTN","IBCNEUT7",189,0)
 . S X=@TXT@(CT) D ^DIWP
"RTN","IBCNEUT7",190,0)
 ;
"RTN","IBCNEUT7",191,0)
 K @(TXT)
"RTN","IBCNEUT7",192,0)
 ;
"RTN","IBCNEUT7",193,0)
 ;  Reset formatted text back to array
"RTN","IBCNEUT7",194,0)
 S CT=0
"RTN","IBCNEUT7",195,0)
 F  S CT=$O(^UTILITY($J,"W",1,CT)) Q:'CT  D
"RTN","IBCNEUT7",196,0)
 . S @(TXT)@(CT)=^UTILITY($J,"W",1,CT,0)
"RTN","IBCNEUT7",197,0)
 ;
"RTN","IBCNEUT7",198,0)
 K ^UTILITY($J,"W"),CT,DIWF,DIWL,DIWR,X,Z,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I
"RTN","IBCNEUT7",199,0)
 Q
"RTN","IBCNEUT7",200,0)
 ;
"RTN","IBCNEUT7",201,0)
ERRN(ARRAY) ;  Get the next FileMan error number from the array
"RTN","IBCNEUT7",202,0)
 ;  Input
"RTN","IBCNEUT7",203,0)
 ;    ARRAY = the array name, include "DIERR"
"RTN","IBCNEUT7",204,0)
 ;  Output
"RTN","IBCNEUT7",205,0)
 ;    IBEY = the next error number
"RTN","IBCNEUT7",206,0)
 ;
"RTN","IBCNEUT7",207,0)
 ;  Example call
"RTN","IBCNEUT7",208,0)
 ;    S IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEUT7",209,0)
 ;
"RTN","IBCNEUT7",210,0)
 NEW IBEY
"RTN","IBCNEUT7",211,0)
 ;
"RTN","IBCNEUT7",212,0)
 I '$D(@(ARRAY)) S @(ARRAY)=1 Q 1
"RTN","IBCNEUT7",213,0)
 ;
"RTN","IBCNEUT7",214,0)
 S IBEY=$P(@(ARRAY),U,1)
"RTN","IBCNEUT7",215,0)
 S IBEY=IBEY+1,$P(@(ARRAY),U,1)=IBEY
"RTN","IBCNEUT7",216,0)
 Q IBEY
"RTN","IBCNEUT7",217,0)
 ;
"RTN","IBCNEUT7",218,0)
MBICHK(BUFFIEN) ; See if the buffer entry is an MBI request
"RTN","IBCNEUT7",219,0)
 ; return 1 if the provided buffer is an MBI request; otherwise, 0
"RTN","IBCNEUT7",220,0)
 N IBINSNM
"RTN","IBCNEUT7",221,0)
 S IBINSNM=$$GET1^DIQ(355.33,BUFFIEN_",","INSURANCE COMPANY NAME")
"RTN","IBCNEUT7",222,0)
 I IBINSNM="" Q 0
"RTN","IBCNEUT7",223,0)
 Q +($$GET1^DIQ(350.9,"1,","MBI PAYER")=IBINSNM)
"RTN","IBCNSMM")
0^16^B21854403^B21594622
"RTN","IBCNSMM",1,0)
IBCNSMM ;ALB/CMS -MEDICARE INSURANCE INTAKE ; 18-OCT-98
"RTN","IBCNSMM",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,184,516,601**;21-MAR-94;Build 14
"RTN","IBCNSMM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSMM",4,0)
 Q
"RTN","IBCNSMM",5,0)
 ;
"RTN","IBCNSMM",6,0)
EN ; -- Entry point from Medicare Intake Standalone option
"RTN","IBCNSMM",7,0)
 N DIC,DIR,DA,%A,DFN,X,Y,IBQUIT,IBCNSP,IBSOURCE
"RTN","IBCNSMM",8,0)
 S (IBQUIT,IBCNSP)=0 D GETWNR I IBQUIT G ENQ
"RTN","IBCNSMM",9,0)
 ;
"RTN","IBCNSMM",10,0)
 ; - allow the user to enter the Source of Information for the policies
"RTN","IBCNSMM",11,0)
 W !!,"You may enter the 'Source of Information' that will be filed with all"
"RTN","IBCNSMM",12,0)
 W !,"Medicare insurance coverage policies that are created.",!
"RTN","IBCNSMM",13,0)
 ;
"RTN","IBCNSMM",14,0)
 S DIR(0)="2.312,1.09"
"RTN","IBCNSMM",15,0)
 S DIR("A")="Enter Source of Information"
"RTN","IBCNSMM",16,0)
 S DIR("B")="INTERVIEW"
"RTN","IBCNSMM",17,0)
 D ^DIR K DUOUT,DTOUT,DIRUT,DIROUT,DIR
"RTN","IBCNSMM",18,0)
 S IBSOURCE=+Y I Y<1 G ENQ
"RTN","IBCNSMM",19,0)
 W !
"RTN","IBCNSMM",20,0)
 ;
"RTN","IBCNSMM",21,0)
 ; - loop to select patients
"RTN","IBCNSMM",22,0)
ENA S DIC(0)="AEQMN",DIC="^DPT(" D ^DIC
"RTN","IBCNSMM",23,0)
 I +Y<1 G ENQ
"RTN","IBCNSMM",24,0)
 S DFN=+Y
"RTN","IBCNSMM",25,0)
 I $G(^DPT(DFN,.35)) W *7,!!,?10,"Patient Expired on ",$$FMTE^XLFDT($P(^DPT(DFN,.35),U))
"RTN","IBCNSMM",26,0)
 W ! D DISP^IBCNS W !,?3 S X="",$P(X,"=",76)="" W X
"RTN","IBCNSMM",27,0)
 D ENR(DFN,IBSOURCE,1) K DIC W !! G ENA
"RTN","IBCNSMM",28,0)
 ;
"RTN","IBCNSMM",29,0)
ENQ Q
"RTN","IBCNSMM",30,0)
 ;
"RTN","IBCNSMM",31,0)
 ;
"RTN","IBCNSMM",32,0)
ENR(DFN,IBSOUR,IBOPT) ; -- Entry point from IBCNBME Patient Registration or Pre-Registration
"RTN","IBCNSMM",33,0)
 ;    Input Variable DFN Required and IBSOUR =Source of Information
"RTN","IBCNSMM",34,0)
 ;                   IBOPT =1 if comming from MII Standalone Option
"RTN","IBCNSMM",35,0)
 ;
"RTN","IBCNSMM",36,0)
 N D,DIE,DA,DIR,DIC,E,IBCPOL,IBCNSP,IBCDFN,IBQUIT,IBOK,IBC0,IBAD,IBGRP,IBADPOL
"RTN","IBCNSMM",37,0)
 N IBNAME,IBHICN,IBAEFF,IBBEFF,IBCOVP,IBGNA,IBGNU,IBBUF,IBNEW,IBP,X,Y
"RTN","IBCNSMM",38,0)
 N IBPOLA,IBPOLB,IBARR,IBHIT,IBHITA,IBHITB,IBCOB,IBCOBI
"RTN","IBCNSMM",39,0)
 ;
"RTN","IBCNSMM",40,0)
 S (IBAEFF,IBBEFF,IBCNSP,IBCDFN,IBNEW,IBQUIT)=0,IBADPOL=1
"RTN","IBCNSMM",41,0)
 S (IBNAME,IBHICN)=""
"RTN","IBCNSMM",42,0)
 ;
"RTN","IBCNSMM",43,0)
 ; -- Get Standard Medicare Insurance Company and plans in IBCNSP
"RTN","IBCNSMM",44,0)
 D GETWNR I IBQUIT G ENRQ
"RTN","IBCNSMM",45,0)
 ;
"RTN","IBCNSMM",46,0)
 ; -- get the patient's Medicare policies
"RTN","IBCNSMM",47,0)
 S (IBPOLA,IBPOLB)=0
"RTN","IBCNSMM",48,0)
 S IBCDFN=0 F  S IBCDFN=$O(^DPT(DFN,.312,"B",+IBCNSP,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSMM",49,0)
 .;IB*2.0*516/TAZ - Retrieve Data from HIPAA compliant fields.
"RTN","IBCNSMM",50,0)
 .;S IBCPOL=$G(^DPT(DFN,.312,IBCDFN,0))  ;516 - baa
"RTN","IBCNSMM",51,0)
 .S IBCPOL=$$ZND^IBCNS1(DFN,IBCDFN)  ;516 - baa
"RTN","IBCNSMM",52,0)
 .;
"RTN","IBCNSMM",53,0)
 .; - is the policy for Part A?
"RTN","IBCNSMM",54,0)
 .I $P(IBCNSP,U,3)=$P(IBCPOL,U,18) D  Q
"RTN","IBCNSMM",55,0)
 ..S IBPOLA=IBPOLA+1,IBARR("A",IBPOLA)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",56,0)
 .;
"RTN","IBCNSMM",57,0)
 .; - is the policy for Part B?
"RTN","IBCNSMM",58,0)
 .I $P(IBCNSP,U,5)=$P(IBCPOL,U,18) D
"RTN","IBCNSMM",59,0)
 ..S IBPOLB=IBPOLB+1,IBARR("B",IBPOLB)=IBCDFN_"^"_IBCPOL
"RTN","IBCNSMM",60,0)
 ;
"RTN","IBCNSMM",61,0)
 ; - can't edit here if there is more than one policy
"RTN","IBCNSMM",62,0)
 I $D(IBARR("A",2)) K IBARR("A") D
"RTN","IBCNSMM",63,0)
 .W !!,"This patient has more than one Part A policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",64,0)
 ;
"RTN","IBCNSMM",65,0)
 I $D(IBARR("B",2)) K IBARR("B") D
"RTN","IBCNSMM",66,0)
 .W !!,"This patient has more than one Part B policy.  Please edit in Ins Mgmt."
"RTN","IBCNSMM",67,0)
 ;
"RTN","IBCNSMM",68,0)
 I (IBPOLA!IBPOLB),'$D(IBARR) G ENRQ
"RTN","IBCNSMM",69,0)
 ;
"RTN","IBCNSMM",70,0)
 ; -- Ask for Medicare Insurance Card information
"RTN","IBCNSMM",71,0)
 ;    Return IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOB/IBCOBI
"RTN","IBCNSMM",72,0)
 D MII^IBCNSMM2 I IBQUIT G ENRQ
"RTN","IBCNSMM",73,0)
 ;
"RTN","IBCNSMM",74,0)
 ; - if Part A or B exists, but no changes, quit
"RTN","IBCNSMM",75,0)
 I $D(IBARR("A",1)) D COM($P(IBARR("A",1),"^",2,99),"A") I IBHIT D
"RTN","IBCNSMM",76,0)
 .S IBHITA=1 W !,"  * No Part A changes made..."
"RTN","IBCNSMM",77,0)
 ;
"RTN","IBCNSMM",78,0)
 I $D(IBARR("B",1)) D COM($P(IBARR("B",1),"^",2,99),"B") I IBHIT D
"RTN","IBCNSMM",79,0)
 .S IBHITB=1 W !,"  * No Part B changes made..."
"RTN","IBCNSMM",80,0)
 ;
"RTN","IBCNSMM",81,0)
 I $G(IBHITA),$G(IBHITB) G ENRQ
"RTN","IBCNSMM",82,0)
 I $G(IBHITA),'$G(IBBEFF) G ENRQ
"RTN","IBCNSMM",83,0)
 I $G(IBHITB),'$G(IBAEFF) G ENRQ
"RTN","IBCNSMM",84,0)
 ;
"RTN","IBCNSMM",85,0)
 ; -- If user not holding key set data in Buffer File
"RTN","IBCNSMM",86,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D  G ENRQ
"RTN","IBCNSMM",87,0)
 .I IBAEFF,'$G(IBHITA) D BUFF^IBCNSMM1("A")
"RTN","IBCNSMM",88,0)
 .I IBBEFF,'$G(IBHITB) D BUFF^IBCNSMM1("B")
"RTN","IBCNSMM",89,0)
 ;
"RTN","IBCNSMM",90,0)
 ; -- Otherwise, set data into permanent files
"RTN","IBCNSMM",91,0)
 I IBAEFF,'$G(IBHITA) D
"RTN","IBCNSMM",92,0)
 .I IBPOLA,'$D(IBARR("A")) Q  ; can't update Part A policy
"RTN","IBCNSMM",93,0)
 .I '$D(IBARR("A",1)) D ADDP("A") Q
"RTN","IBCNSMM",94,0)
 .S IBCDFN=+IBARR("A",1) D SETP^IBCNSMM1("A")
"RTN","IBCNSMM",95,0)
 I IBBEFF,'$G(IBHITB) D
"RTN","IBCNSMM",96,0)
 .I IBPOLB,'$D(IBARR("B")) Q  ; can't update Part B policy
"RTN","IBCNSMM",97,0)
 .I '$D(IBARR("B",1)) D ADDP("B") Q
"RTN","IBCNSMM",98,0)
 .S IBCDFN=+IBARR("B",1) D SETP^IBCNSMM1("B")
"RTN","IBCNSMM",99,0)
 ;
"RTN","IBCNSMM",100,0)
ENRQ W ! Q
"RTN","IBCNSMM",101,0)
 ;
"RTN","IBCNSMM",102,0)
 ;
"RTN","IBCNSMM",103,0)
 ;
"RTN","IBCNSMM",104,0)
ADDP(IBP) ; -- Create a new patient policy
"RTN","IBCNSMM",105,0)
 ;    Input: DFN
"RTN","IBCNSMM",106,0)
 ;           IBCNSP=MED WNR INS IEN^MEDICARE (WNR)
"RTN","IBCNSMM",107,0)
 ;                  ^PART A IEN^PART A
"RTN","IBCNSMM",108,0)
 ;                  ^PART B IEN^PART A
"RTN","IBCNSMM",109,0)
 ;           IBP = "A" or "B" for medicare part
"RTN","IBCNSMM",110,0)
 ;           IBSOUR = Source of Information
"RTN","IBCNSMM",111,0)
 ;   Return: IBCDFN=-1 could not add OR Policy ien
"RTN","IBCNSMM",112,0)
 ;           IBCOVP= Covered by Health Insurance
"RTN","IBCNSMM",113,0)
 ;
"RTN","IBCNSMM",114,0)
 N X,Y,DO,DD,DA,DR,DIC,DIE,DIK,DIR,DIRUT,IBSPEC
"RTN","IBCNSMM",115,0)
 ; -- Create a New patient policy
"RTN","IBCNSMM",116,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM",117,0)
 ;
"RTN","IBCNSMM",118,0)
 D FIELD^DID(2,.3121,"","SPECIFIER","IBSPEC")
"RTN","IBCNSMM",119,0)
 S DIC("DR")="1.09////"_IBSOUR_";1.05///NOW;1.06////"_DUZ,DIC("P")=$G(IBSPEC("SPECIFIER"))
"RTN","IBCNSMM",120,0)
 K DD,DO S DA(1)=DFN,DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=+IBCNSP,DLAYGO=2.312
"RTN","IBCNSMM",121,0)
 D FILE^DICN K DD,DO,DLAYGO,DIC
"RTN","IBCNSMM",122,0)
 S IBCDFN=+Y
"RTN","IBCNSMM",123,0)
 I IBCDFN<1 W !!,*7,"  <Could not create new policy at this time.  Try Later!>",! G ADDPQ
"RTN","IBCNSMM",124,0)
 ;
"RTN","IBCNSMM",125,0)
 ; -- Set Medicare policy data
"RTN","IBCNSMM",126,0)
 D SETP^IBCNSMM1(IBP)
"RTN","IBCNSMM",127,0)
ADDPQ Q
"RTN","IBCNSMM",128,0)
 ;
"RTN","IBCNSMM",129,0)
 ;
"RTN","IBCNSMM",130,0)
GETWNR ;
"RTN","IBCNSMM",131,0)
 ; -- Get Medicare (WNR) insurance company and plan data
"RTN","IBCNSMM",132,0)
 ;    Returns IBCNSP or IBQUIT
"RTN","IBCNSMM",133,0)
 ;    IBCNSP="Error: Medicare (WNR) ... not setup properly" 
"RTN","IBCNSMM",134,0)
 ;           if Medicare WNR entry or plans not setup properly
"RTN","IBCNSMM",135,0)
 ;
"RTN","IBCNSMM",136,0)
 ;    IBCNSP=INS CO. (36) IEN^"MEDICARE (WNR)"
"RTN","IBCNSMM",137,0)
 ;           ^PLAN (355.3) PARTA IEN^"PART A"
"RTN","IBCNSMM",138,0)
 ;           ^PLAN (355.3) PARTB IEN^"PART B"
"RTN","IBCNSMM",139,0)
 ;
"RTN","IBCNSMM",140,0)
 I 'IBCNSP S IBCNSP=$$GETWNR^IBCNSMM1
"RTN","IBCNSMM",141,0)
 I 'IBCNSP W !!,*7,?3,IBCNSP S IBQUIT=1
"RTN","IBCNSMM",142,0)
 Q
"RTN","IBCNSMM",143,0)
 ;
"RTN","IBCNSMM",144,0)
VALHIC(X) ; Edits for validating HIC #
"RTN","IBCNSMM",145,0)
 ; X = the HIC # to be validated
"RTN","IBCNSMM",146,0)
 ;IB*2.0*601 JRA Remove special HIC # validation - use existing error messages IB356/IB357/IB358 when the
"RTN","IBCNSMM",147,0)
 ; Primary/Secondary/Tertiary insurance subscriber's ID number is missing (as with other insurances).
"RTN","IBCNSMM",148,0)
 ; 
"RTN","IBCNSMM",149,0)
 ;IB*2.0*601 JRA QUIT '1' to remove special validation for HIC #, which will prevent the display of IB Error
"RTN","IBCNSMM",150,0)
 ; message IB215 and the HIC # help text at HLP^IBCNSM32.
"RTN","IBCNSMM",151,0)
 Q 1  ;IB*2.0*601 JRA
"RTN","IBCNSMM",152,0)
 N VAL
"RTN","IBCNSMM",153,0)
 S VAL=1
"RTN","IBCNSMM",154,0)
 I X'?9N1A.1AN,X'?1.3A6N,X'?1.3A9N S VAL=0
"RTN","IBCNSMM",155,0)
 Q VAL
"RTN","IBCNSMM",156,0)
 ;
"RTN","IBCNSMM",157,0)
COM(X,Y) ; Compare X with the intake variables.
"RTN","IBCNSMM",158,0)
 ;    Input: X => 0th node of policy in file #2.312
"RTN","IBCNSMM",159,0)
 ;           Y => A (Part A) or B (part B)
"RTN","IBCNSMM",160,0)
 ;   Output: IBHIT=1 (no changes made)
"RTN","IBCNSMM",161,0)
 S IBHIT=0
"RTN","IBCNSMM",162,0)
 I $P(X,"^",17)'=IBNAME G COMQ
"RTN","IBCNSMM",163,0)
 I $P(X,"^",2)'=IBHICN G COMQ
"RTN","IBCNSMM",164,0)
 I $P(X,"^",8)'=$S(Y="A":IBAEFF,1:IBBEFF) G COMQ
"RTN","IBCNSMM",165,0)
 I $P(X,"^",20)'=IBCOBI G COMQ
"RTN","IBCNSMM",166,0)
 ;
"RTN","IBCNSMM",167,0)
 S IBHIT=1
"RTN","IBCNSMM",168,0)
COMQ Q
"RTN","IBJPI")
0^14^B43418759^B42432107
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP eIV SITE PARAMETERS SCREEN ;01-APR-2015
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,438,479,506,528,549,601**;21-MAR-94;Build 14
"RTN","IBJPI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; eIV - Electronic Insurance Verification Interface parameters
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N CTRLCOL,POP,VALMCNT,VALMHDR,X,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIV application used for electronic Insurance Verification."
"RTN","IBJPI",28,0)
 W !!,"The General Parameters section concerns overall parameters for"
"RTN","IBJPI",29,0)
 W !,"monitoring the interface and controlling eIV communication between"
"RTN","IBJPI",30,0)
 W !,"VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The Batch Extracts section concerns extract-specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active/inactive status and selection criteria."
"RTN","IBJPI",33,0)
 W !!,"The Service Type Codes section concerns specifying up to nine"
"RTN","IBJPI",34,0)
 W !,"Site Selected Service Type Codes which will be sent with"
"RTN","IBJPI",35,0)
 W !,"insurance inquiries."
"RTN","IBJPI",36,0)
 D PAUSE^VALM1
"RTN","IBJPI",37,0)
 W @IOF
"RTN","IBJPI",38,0)
 S VALMBCK="R"
"RTN","IBJPI",39,0)
 Q
"RTN","IBJPI",40,0)
 ;
"RTN","IBJPI",41,0)
EXIT ; exit
"RTN","IBJPI",42,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",43,0)
 D CLEAN^VALM10
"RTN","IBJPI",44,0)
 Q
"RTN","IBJPI",45,0)
 ;
"RTN","IBJPI",46,0)
BLD ; Creates the body of the worklist
"RTN","IBJPI",47,0)
 ; IB*2.0*549 - rewrote this entire method and all methods called from it to
"RTN","IBJPI",48,0)
 ;              change to a totally new display of fields
"RTN","IBJPI",49,0)
 N ELINEL,ELINER,SLINE,STARTR
"RTN","IBJPI",50,0)
 S VALMCNT=0,SLINE=1
"RTN","IBJPI",51,0)
 D BLDGENE(SLINE,.ELINEL)                       ; Build Editable General Parameters
"RTN","IBJPI",52,0)
 D BLDGENNL(ELINEL,.STARTR,.ELINEL)             ; Build Non-Editable Gen Param left
"RTN","IBJPI",53,0)
 D BLDGENNR(STARTR,.ELINER)                     ; Build Non-Editable Gen Param Right
"RTN","IBJPI",54,0)
 S SLINE=$S(ELINEL>ELINER:ELINEL,1:ELINER)
"RTN","IBJPI",55,0)
 D BLDGENNB(SLINE,.ELINEL)                      ; Build Non-Editable Bottom Params
"RTN","IBJPI",56,0)
 D BLDBE(ELINEL,.ELINEL)                        ; Build Batch Extract Gen Parameters
"RTN","IBJPI",57,0)
 S VALMCNT=ELINEL-1
"RTN","IBJPI",58,0)
 Q
"RTN","IBJPI",59,0)
 ;
"RTN","IBJPI",60,0)
BLDGENE(SLINE,ELINE) ; Build the General Editable Parameters Section
"RTN","IBJPI",61,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",62,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",63,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",64,0)
 ;
"RTN","IBJPI",65,0)
 N XX
"RTN","IBJPI",66,0)
 S ELINE=$$SETN("General Parameters (editable)",SLINE,1,1)
"RTN","IBJPI",67,0)
 S ELINE=$$SET("                    Medicare Payer: ",$$GET1^DIQ(350.9,"1,",51.25),ELINE,1)
"RTN","IBJPI",68,0)
 S ELINE=$$SET("                     HMS Directory: ",$$GET1^DIQ(350.9,"1,",13.01),ELINE,1)
"RTN","IBJPI",69,0)
 S ELINE=$$SET("                        EII Active: ",$$GET1^DIQ(350.9,"1,",13.02),ELINE,1)
"RTN","IBJPI",70,0)
 ;
"RTN","IBJPI",71,0)
 S XX=$$GET1^DIQ(350.9,"1,",100,"I"),XX=$S(XX:"YES",1:"NO")
"RTN","IBJPI",72,0)
 S ELINE=$$SET("                      SSVI Enabled: ",XX,ELINE,1)    ; IB*2*528/baa
"RTN","IBJPI",73,0)
 S XX=$$GET1^DIQ(350.9,"1,",103,"I")
"RTN","IBJPI",74,0)
 S ELINE=$$SET("Number of days to retain SSVI data: ",XX,ELINE,1)    ; IB*2*528/baa
"RTN","IBJPI",75,0)
 Q
"RTN","IBJPI",76,0)
 ;
"RTN","IBJPI",77,0)
BLDGENNL(SLINE,STARTR,ELINE) ; Build the Left portion of the General
"RTN","IBJPI",78,0)
 ; Non-Editable Parameters Section
"RTN","IBJPI",79,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",80,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",81,0)
 ; Output:  STARTR  - Line to start displaying General Non-Editable Right
"RTN","IBJPI",82,0)
 ;                    Section
"RTN","IBJPI",83,0)
 ;          ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",84,0)
 ;
"RTN","IBJPI",85,0)
 N XX
"RTN","IBJPI",86,0)
 S ELINE=$$SET("",$J("",40),SLINE,1)            ; Spacing Blank Line
"RTN","IBJPI",87,0)
 S ELINE=$$SETN("General Parameters (non-editable)",ELINE,1,1)
"RTN","IBJPI",88,0)
 S STARTR=ELINE                                 ; Start of Right Section
"RTN","IBJPI",89,0)
 S ELINE=$$SET("          Freshness Days: ",$$GET1^DIQ(350.9,"1,",51.01),ELINE,1)
"RTN","IBJPI",90,0)
 S ELINE=$$SET("            Timeout Days: ",$$GET1^DIQ(350.9,"1,",51.05),ELINE,1)
"RTN","IBJPI",91,0)
 S ELINE=$$SET("     Timeout Mailman Msg: ",$$GET1^DIQ(350.9,"1,",51.07),ELINE,1)
"RTN","IBJPI",92,0)
 S ELINE=$$SET("             Default STC: ",$$GET1^DIQ(350.9,"1,",60.01),ELINE,1)
"RTN","IBJPI",93,0)
 S ELINE=$$SET("  Master Switch Realtime: ",$$GET1^DIQ(350.9,"1,",51.27),ELINE,1)
"RTN","IBJPI",94,0)
 S ELINE=$$SET("           CMS MBI Payer: ",$$GET1^DIQ(350.9,"1,","MBI PAYER"),ELINE,1) ; IB*2*601/DM 
"RTN","IBJPI",95,0)
 Q
"RTN","IBJPI",96,0)
 ;
"RTN","IBJPI",97,0)
BLDGENNR(SLINE,ELINE) ; Build the Right portion of the General
"RTN","IBJPI",98,0)
 ; Non-Editable Parameters Section
"RTN","IBJPI",99,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",100,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",101,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",102,0)
 ;
"RTN","IBJPI",103,0)
 S ELINE=SLINE
"RTN","IBJPI",104,0)
 S ELINE=$$SET("   HL7 Maximum Number: ",$$GET1^DIQ(350.9,"1,",51.15),ELINE,41)
"RTN","IBJPI",105,0)
 S ELINE=$$SET("           Retry Flag: ",$$GET1^DIQ(350.9,"1,",51.26),ELINE,41)
"RTN","IBJPI",106,0)
 S ELINE=$$SET("    Number of Retries: ",$$GET1^DIQ(350.9,"1,",51.06),ELINE,41)
"RTN","IBJPI",107,0)
 S ELINE=$$SET("           Mail Group: ",$$MGRP^IBCNEUT5,ELINE,41)
"RTN","IBJPI",108,0)
 S ELINE=$$SET("Master Switch Nightly: ",$$GET1^DIQ(350.9,"1,",51.28),ELINE,41)
"RTN","IBJPI",109,0)
 Q
"RTN","IBJPI",110,0)
 ;
"RTN","IBJPI",111,0)
BLDGENNB(SLINE,ELINE) ; Build the General Non-Editable Bottom Parameters Section
"RTN","IBJPI",112,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",113,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",114,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",115,0)
 ;
"RTN","IBJPI",116,0)
 N XX
"RTN","IBJPI",117,0)
 S ELINE=$$SET("",$J("",40),SLINE,1)            ; Spacing Blank Line
"RTN","IBJPI",118,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.2)
"RTN","IBJPI",119,0)
 S:XX="" XX="NO"
"RTN","IBJPI",120,0)
 S ELINE=$$SET("Send MailMan Message if Communication Problem: ",XX,ELINE,1)
"RTN","IBJPI",121,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.02)
"RTN","IBJPI",122,0)
 S:XX="" XX="NO"
"RTN","IBJPI",123,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.02)_" at "_$$GET1^DIQ(350.9,"1,",51.03)
"RTN","IBJPI",124,0)
 S ELINE=$$SET("   Receive MailMan Message, Daily Statistical: ",XX,ELINE,1)
"RTN","IBJPI",125,0)
 Q
"RTN","IBJPI",126,0)
 ;
"RTN","IBJPI",127,0)
BLDBE(SLINE,ELINE) ; Build the Batch Extract Parameters Section
"RTN","IBJPI",128,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",129,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",130,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",131,0)
 ;
"RTN","IBJPI",132,0)
 N IBEX,IBEX1,IBEX2,IBIIVB,IBST,IEN
"RTN","IBJPI",133,0)
 S ELINE=$$SET("",$J("",40),ELINE,1)            ; Spacing Blank Line
"RTN","IBJPI",134,0)
 S ELINE=$$SETN("Batch Extracts",ELINE,1,1)
"RTN","IBJPI",135,0)
 S ELINE=$$SET(" Extract              Selection  Maximum # to","",ELINE,1)
"RTN","IBJPI",136,0)
 S ELINE=$$SETN("Name         On/Off  Criteria   Extract/Day",ELINE,1,"",1)
"RTN","IBJPI",137,0)
 ;
"RTN","IBJPI",138,0)
 ; Loop thru extracts
"RTN","IBJPI",139,0)
 S IEN=0
"RTN","IBJPI",140,0)
 F  D  Q:'IEN
"RTN","IBJPI",141,0)
 . S IEN=$O(^IBE(350.9,1,51.17,IEN))
"RTN","IBJPI",142,0)
 . Q:'IEN
"RTN","IBJPI",143,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))       ; Batch Extract multiple line
"RTN","IBJPI",144,0)
 . S IBEX=+$P(IBIIVB,"^",1)                     ; Type
"RTN","IBJPI",145,0)
 . Q:'$F(".1.2.","."_IBEX_".")
"RTN","IBJPI",146,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,"^",1)'="":$$GET1^DIQ(350.9002,IEN_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",147,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,"^",2):"ON",1:"OFF"),8)
"RTN","IBJPI",148,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,"^",3),1:$P(IBIIVB,"^",3))
"RTN","IBJPI",149,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,"^",4),1:$P(IBIIVB,"^",4))
"RTN","IBJPI",150,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"n/a",IBEX=2:IBEX1,IBEX=3:IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",151,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,"^",5):+$P(IBIIVB,"^",5),1:$P(IBIIVB,"^",5)),14)
"RTN","IBJPI",152,0)
 . S ELINE=$$SET(IBST,"",ELINE,1)
"RTN","IBJPI",153,0)
 Q
"RTN","IBJPI",154,0)
 ;
"RTN","IBJPI",155,0)
SET(LABEL,DATA,LINE,COL) ; Sets text into the body of the worklist
"RTN","IBJPI",156,0)
 ; Input:   LABEL   - Label text to set into the line
"RTN","IBJPI",157,0)
 ;          DATA    - Field Data to set into the line
"RTN","IBJPI",158,0)
 ;          LINE    - Line to set LABEL and DATA into
"RTN","IBJPI",159,0)
 ;          COL     - Starting column position in LINE to insert
"RTN","IBJPI",160,0)
 ;                    LABEL_DATA text
"RTN","IBJPI",161,0)
 ; Returns: LINE    - Updated Line by 1
"RTN","IBJPI",162,0)
 ;
"RTN","IBJPI",163,0)
 N IBY
"RTN","IBJPI",164,0)
 S IBY=LABEL_DATA
"RTN","IBJPI",165,0)
 D SET1(IBY,LINE,COL,$L(IBY))
"RTN","IBJPI",166,0)
 S LINE=LINE+1
"RTN","IBJPI",167,0)
 Q LINE
"RTN","IBJPI",168,0)
 ;
"RTN","IBJPI",169,0)
SETN(TITLE,LINE,COL,RV,ULINE) ; Sets a field Section title into the body of the worklist
"RTN","IBJPI",170,0)
 ; Input:   TITLE   - Text to be used for the field Section Title
"RTN","IBJPI",171,0)
 ;          LINE    - Line number in the body to insert the field section title
"RTN","IBJPI",172,0)
 ;          COL     - Starting Column position to set Section Title into
"RTN","IBJPI",173,0)
 ;          RV      - 1 - Set Reverse Video, 0 or null don't use Reverse Video
"RTN","IBJPI",174,0)
 ;                        Optional, defaults to ""
"RTN","IBJPI",175,0)
 ;          ULINE   - 1 - Set Underline, 0 or null don't use underline
"RTN","IBJPI",176,0)
 ;                        Optional, defaults to ""
"RTN","IBJPI",177,0)
 ; Returns: LINE    - Line number increased by 1
"RTN","IBJPI",178,0)
 ;
"RTN","IBJPI",179,0)
 N IBY
"RTN","IBJPI",180,0)
 S IBY=" "_TITLE_" "
"RTN","IBJPI",181,0)
 D SET1(IBY,LINE,COL,$L(IBY),$G(RV),$G(ULINE))
"RTN","IBJPI",182,0)
 S LINE=LINE+1
"RTN","IBJPI",183,0)
 Q LINE
"RTN","IBJPI",184,0)
 ;
"RTN","IBJPI",185,0)
SET1(TEXT,LINE,COL,WIDTH,RV,ULINE) ; Sets the TMP array with body data
"RTN","IBJPI",186,0)
 ; Input:   TEXT                - Text to be set into the specified line
"RTN","IBJPI",187,0)
 ;          LINE                - Line to set TEXT into
"RTN","IBJPI",188,0)
 ;          COL                 - Column of LINE to set TEXT into
"RTN","IBJPI",189,0)
 ;          WIDTH               - Width of the TEXT being set into line
"RTN","IBJPI",190,0)
 ;          RV                  - 1 - Set Reverse Video, 0 or null don't use
"RTN","IBJPI",191,0)
 ;                                    Reverse Video
"RTN","IBJPI",192,0)
 ;                                Optional, defaults to ""
"RTN","IBJPI",193,0)
 ;          ULINE               - 1 - Set Underline, 0 or null don't use
"RTN","IBJPI",194,0)
 ;                                    Underline
"RTN","IBJPI",195,0)
 ;                                Optional, defaults to ""
"RTN","IBJPI",196,0)
 ;          ^TMP($J,"IBJPI")   - Current ^TMP array
"RTN","IBJPI",197,0)
 ; Output:  ^TMP($J,"IBJPI")   - Updated ^TMP array
"RTN","IBJPI",198,0)
 ;
"RTN","IBJPI",199,0)
 N IBX
"RTN","IBJPI",200,0)
 S IBX=$G(^TMP($J,"IBJPI",LINE,0))
"RTN","IBJPI",201,0)
 S IBX=$$SETSTR^VALM1(TEXT,IBX,COL,WIDTH)
"RTN","IBJPI",202,0)
 D SET^VALM10(LINE,IBX)
"RTN","IBJPI",203,0)
 D:$G(RV)'="" CNTRL^VALM10(LINE,COL,WIDTH,IORVON,IORVOFF)
"RTN","IBJPI",204,0)
 D:$G(ULINE)'="" CNTRL^VALM10(LINE,COL,WIDTH,IOUON,IOUOFF)
"RTN","IBJPI",205,0)
 Q
"RTN","IBJPI",206,0)
 ; 
"RTN","IBY601PO")
0^15^B4376494^n/a
"RTN","IBY601PO",1,0)
IBY601PO ;EDE/DM - Post-Installation for IB patch 601 ; 01-NOV-2017
"RTN","IBY601PO",2,0)
 ;;2.0;INTEGRATED BILLING;**601**;21-MAR-94;Build 14
"RTN","IBY601PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY601PO",4,0)
 ;
"RTN","IBY601PO",5,0)
POST ; POST ROUTINE(S)
"RTN","IBY601PO",6,0)
 N IBXPD,XPDIDTOT
"RTN","IBY601PO",7,0)
 S XPDIDTOT=2
"RTN","IBY601PO",8,0)
 ;
"RTN","IBY601PO",9,0)
 ; Send site registration message to FSC
"RTN","IBY601PO",10,0)
 D REGMSG(1)
"RTN","IBY601PO",11,0)
 ;
"RTN","IBY601PO",12,0)
 ; Check/remove any link from an insurance to the National MBI Payer
"RTN","IBY601PO",13,0)
 D CHKLNK(2)
"RTN","IBY601PO",14,0)
 ;
"RTN","IBY601PO",15,0)
 ; Displays the 'Done' message and finishes the progress bar
"RTN","IBY601PO",16,0)
 D MES^XPDUTL("")
"RTN","IBY601PO",17,0)
 D MES^XPDUTL("POST-Install Completed.")
"RTN","IBY601PO",18,0)
 Q
"RTN","IBY601PO",19,0)
 ;
"RTN","IBY601PO",20,0)
REGMSG(IBXPD) ; send site registration message to FSC
"RTN","IBY601PO",21,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY601PO",22,0)
 D MES^XPDUTL("-------------")
"RTN","IBY601PO",23,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY601PO",24,0)
 I '$$PROD^XUPROD(1) D MES^XPDUTL(" N/A - Not a production account - No site registration message sent") G REGMSGQ
"RTN","IBY601PO",25,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY601PO",26,0)
 D ^IBCNEHLM
"RTN","IBY601PO",27,0)
 ;
"RTN","IBY601PO",28,0)
REGMSGQ ;
"RTN","IBY601PO",29,0)
 Q
"RTN","IBY601PO",30,0)
 ; 
"RTN","IBY601PO",31,0)
CHKLNK(IBXPD) ; Due to a timing issue with the National MBI Payer
"RTN","IBY601PO",32,0)
 ;It's possible that a client linked an insurance to the MBI payer
"RTN","IBY601PO",33,0)
 ;This is not allowed. Any such link will be removed
"RTN","IBY601PO",34,0)
 N IBMBIPYR,IBIEN
"RTN","IBY601PO",35,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY601PO",36,0)
 D MES^XPDUTL("-------------")
"RTN","IBY601PO",37,0)
 D MES^XPDUTL("Verifying Insurance links to payers...")
"RTN","IBY601PO",38,0)
 S IBMBIPYR=0
"RTN","IBY601PO",39,0)
 S IBMBIPYR=$O(^IBE(365.12,"B","CMS MBI ONLY",IBMBIPYR))
"RTN","IBY601PO",40,0)
 I 'IBMBIPYR D BMES^XPDUTL("MBI Payer has not been established") G CHKLNKQ
"RTN","IBY601PO",41,0)
 S IBIEN=0
"RTN","IBY601PO",42,0)
 F  S IBIEN=$O(^DIC(36,"AC",IBMBIPYR,IBIEN)) Q:'IBIEN  D
"RTN","IBY601PO",43,0)
 . S DIE="^DIC(36,",DA=IBIEN,DR="3.1///@" D ^DIE ; remove the link
"RTN","IBY601PO",44,0)
 . W !,"Insurance:"_IBIEN_" "_$$GET1^DIQ(36,IBIEN_",","NAME")
"RTN","IBY601PO",45,0)
 . K DIE,DA,DR
"RTN","IBY601PO",46,0)
 ;
"RTN","IBY601PO",47,0)
CHKLNKQ ;
"RTN","IBY601PO",48,0)
 Q
"RTN","IBY601PO",49,0)
 ;
"VER")
8.0^22.2
"^DD",350.9,350.9,51.3,0)
MBI PAYER^P365.12'^IBE(365.12,^51;30^Q
"^DD",350.9,350.9,51.3,3)
Select the CMS MBI entry from the Payer file.
"^DD",350.9,350.9,51.3,21,0)
^^6^6^3171006^
"^DD",350.9,350.9,51.3,21,1,0)
This field holds a pointer to the CMS MBI payer entry.
"^DD",350.9,350.9,51.3,21,2,0)
It is the National payer utilized when requesting
"^DD",350.9,350.9,51.3,21,3,0)
a MBI lookup for a Veteran. It is also used when
"^DD",350.9,350.9,51.3,21,4,0)
displaying the MBI payer name in the insurance buffer
"^DD",350.9,350.9,51.3,21,5,0)
list and other applications that need to display the MBI
"^DD",350.9,350.9,51.3,21,6,0)
payer name. 
"^DD",350.9,350.9,51.3,23,0)
^^5^5^3171006^
"^DD",350.9,350.9,51.3,23,1,0)
This field is set via a table update from FSC. It was 
"^DD",350.9,350.9,51.3,23,2,0)
introduced with IB*2.0*.601.It should not have to be
"^DD",350.9,350.9,51.3,23,3,0)
changed unless the MBI payer entry itself gets changed.
"^DD",350.9,350.9,51.3,23,4,0)
This field is only available for editing via FileMan.
"^DD",350.9,350.9,51.3,23,5,0)
Edit with extreme care.
"^DD",350.9,350.9,51.3,"DT")
3171006
"^DD",365.1,365.1,3.02,0)
SOURCE OF INFORMATION^P355.12'^IBE(355.12,^3;2^Q
"^DD",365.1,365.1,3.02,3)
Enter source of information code to be sent with eIV insurance inquiry.
"^DD",365.1,365.1,3.02,21,0)
^.001^2^2^3171228^^
"^DD",365.1,365.1,3.02,21,1,0)
This is the source of information for when the transmission record was 
"^DD",365.1,365.1,3.02,21,2,0)
created.
"^DD",365.1,365.1,3.02,23,0)
^^2^2^3171228^
"^DD",365.1,365.1,3.02,23,1,0)
This field will be set to the source of information whenever a inquiry 
"^DD",365.1,365.1,3.02,23,2,0)
was triggered from the option that requests Electronic Inquiry.
"^DD",365.1,365.1,3.02,"DT")
3171228
"^DD",365.15,365.15,0)
FIELD^^2^5
"^DD",365.15,365.15,0,"DDA")
N
"^DD",365.15,365.15,0,"DT")
3040607
"^DD",365.15,365.15,0,"IX","B",365.15,.01)

"^DD",365.15,365.15,0,"NM","IIV STATUS TABLE")

"^DD",365.15,365.15,0,"PT",355.33,.12)

"^DD",365.15,365.15,0,"VRPK")
IB
"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$$CODECK^IBCNEUT1(Y)
"^DD",365.15,365.15,.01,2.1)
S Y=$$CODECK^IBCNEUT1(Y)
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^.001^5^5^3040430^^^^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3130912
"^DD",365.15,365.15,.02,0)
ASCII VALUE FOR IIV STATUS^NJ3,0^^0;2^K:+X'=X!(X>126)!(X<32)!(X?.E1"."1N.N) X
"^DD",365.15,365.15,.02,3)
Type a Number between 32 and 126, 0 Decimal Digits
"^DD",365.15,365.15,.02,21,0)
^.001^5^5^3040430^^^
"^DD",365.15,365.15,.02,21,1,0)
This field is the ASCII number representation for the character
"^DD",365.15,365.15,.02,21,2,0)
which should be displayed in the IIV status column in the insurance 
"^DD",365.15,365.15,.02,21,3,0)
buffer list for this entry.  The ASCII value is being stored instead of 
"^DD",365.15,365.15,.02,21,4,0)
the character itself because of the issues involved with storing the "?" 
"^DD",365.15,365.15,.02,21,5,0)
character as a valid symbol.
"^DD",365.15,365.15,.02,"DT")
3040227
"^DD",365.15,365.15,.03,0)
EXPAND ENTRY ACTION^S^1:EE Update is Allowed;0:EE Update is Not Allowed;^0;3^Q
"^DD",365.15,365.15,.03,3)
Can the Expand Entry action overwrite this IIV status?
"^DD",365.15,365.15,.03,21,0)
^^6^6^3050208^
"^DD",365.15,365.15,.03,21,1,0)
This field will determine whether or not the IIV status associated with
"^DD",365.15,365.15,.03,21,2,0)
a buffer entry may get overwritten by the Expand Entry action in
"^DD",365.15,365.15,.03,21,3,0)
the Insurance Buffer application.  Some IIV statuses should stay as they
"^DD",365.15,365.15,.03,21,4,0)
are and not get updated by Expand Entry and other symbols should
"^DD",365.15,365.15,.03,21,5,0)
get updated, so the user knows the current status of the buffer entry
"^DD",365.15,365.15,.03,21,6,0)
with regard to the IIV process.
"^DD",365.15,365.15,.03,"DT")
3030409
"^DD",365.15,365.15,1,0)
DESCRIPTION^365.152^^1;0
"^DD",365.15,365.15,1,21,0)
^.001^3^3^3040812^^^^
"^DD",365.15,365.15,1,21,1,0)
This is the explanation of what the IIV status means.  This
"^DD",365.15,365.15,1,21,2,0)
description will appear in the Expand Entry action of the 
"^DD",365.15,365.15,1,21,3,0)
Insurance Buffer application.
"^DD",365.15,365.15,2,0)
CORRECTIVE ACTION^365.17^^2;0
"^DD",365.15,365.15,2,21,0)
^^3^3^3040812^
"^DD",365.15,365.15,2,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.15,2,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance 
"^DD",365.15,365.15,2,21,3,0)
Buffer.
"^DD",365.15,365.15,2,"DT")
3040607
"^DD",365.15,365.152,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.152,0,"DT")
3020603
"^DD",365.15,365.152,0,"NM","DESCRIPTION")

"^DD",365.15,365.152,0,"UP")
365.15
"^DD",365.15,365.152,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",365.15,365.152,.01,3)
Enter the explanation for this IIV status.
"^DD",365.15,365.152,.01,21,0)
^.001^3^3^3040812^^
"^DD",365.15,365.152,.01,21,1,0)
This is the explanation of what the IIV status means.  This description
"^DD",365.15,365.152,.01,21,2,0)
will appear in the Expand Entry action of the Insurance Buffer
"^DD",365.15,365.152,.01,21,3,0)
application.
"^DD",365.15,365.152,.01,"DT")
3040812
"^DD",365.15,365.17,0)
CORRECTIVE ACTION SUB-FIELD^^.01^1
"^DD",365.15,365.17,0,"DT")
3040607
"^DD",365.15,365.17,0,"NM","CORRECTIVE ACTION")

"^DD",365.15,365.17,0,"UP")
365.15
"^DD",365.15,365.17,.01,0)
CORRECTIVE ACTION^W^^0;1
"^DD",365.15,365.17,.01,3)
Enter the steps to follow to correct this issue in order to electronically confirm this insurance policy using IIV.
"^DD",365.15,365.17,.01,21,0)
^^3^3^3040812^
"^DD",365.15,365.17,.01,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.17,.01,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance
"^DD",365.15,365.17,.01,21,3,0)
Buffer.
"^DD",365.15,365.17,.01,"DT")
3040812
"^DIC",365.15,365.15,0)
IIV STATUS TABLE^365.15
"^DIC",365.15,365.15,0,"GL")
^IBE(365.15,
"^DIC",365.15,365.15,"%",0)
^1.005^^0
"^DIC",365.15,365.15,"%D",0)
^^7^7^3030414^
"^DIC",365.15,365.15,"%D",1,0)
This file contains the various IIV statuses for entries in the Insurance 
"^DIC",365.15,365.15,"%D",2,0)
Buffer.  Also included are the symbols that should appear in the IIV 
"^DIC",365.15,365.15,"%D",3,0)
status column in the Insurance Buffer list, and a more detailed
"^DIC",365.15,365.15,"%D",4,0)
description of the status that is used in the Expand Entry option in the 
"^DIC",365.15,365.15,"%D",5,0)
Insurance Buffer.
"^DIC",365.15,365.15,"%D",6,0)
 
"^DIC",365.15,365.15,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.15,"B","IIV STATUS TABLE",365.15)

"BLD",10714,6)
^560
**END**
**END**

