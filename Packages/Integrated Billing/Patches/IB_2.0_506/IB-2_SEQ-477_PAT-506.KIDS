Released IB*2*506 SEQ #477
Extracted from mail message
**KIDS**:IB*2.0*506^

**INSTALL NAME**
IB*2.0*506
"BLD",9260,0)
IB*2.0*506^INTEGRATED BILLING^0^3140508^y
"BLD",9260,1,0)
^^1^1^3140304^
"BLD",9260,1,1,0)
eInsurance System Modification effort
"BLD",9260,4,0)
^9.64PA^365.1^5
"BLD",9260,4,2,0)
2
"BLD",9260,4,2,2,0)
^9.641^2.312^1
"BLD",9260,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",9260,4,2,2,2.312,1,0)
^9.6411^8.02^2
"BLD",9260,4,2,2,2.312,1,8.01,0)
REQUESTED SERVICE DATE
"BLD",9260,4,2,2,2.312,1,8.02,0)
REQUESTED SERVICE TYPE
"BLD",9260,4,2,222)
y^y^p^^^^n^^n
"BLD",9260,4,2,224)

"BLD",9260,4,350.9,0)
350.9
"BLD",9260,4,350.9,2,0)
^9.641^350.9^1
"BLD",9260,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",9260,4,350.9,2,350.9,1,0)
^9.6411^51.26^1
"BLD",9260,4,350.9,2,350.9,1,51.26,0)
RETRY FLAG
"BLD",9260,4,350.9,222)
y^y^p^^^^n^^n
"BLD",9260,4,350.9,224)

"BLD",9260,4,355.33,0)
355.33
"BLD",9260,4,355.33,2,0)
^9.641^355.33^1
"BLD",9260,4,355.33,2,355.33,0)
INSURANCE VERIFICATION PROCESSOR  (File-top level)
"BLD",9260,4,355.33,2,355.33,1,0)
^9.6411^.01^1
"BLD",9260,4,355.33,2,355.33,1,.01,0)
DATE ENTERED
"BLD",9260,4,355.33,222)
y^y^p^^^^n^^n
"BLD",9260,4,355.33,224)

"BLD",9260,4,365.1,0)
365.1
"BLD",9260,4,365.1,2,0)
^9.641^365.1^1
"BLD",9260,4,365.1,2,365.1,0)
IIV TRANSMISSION QUEUE  (File-top level)
"BLD",9260,4,365.1,2,365.1,1,0)
^9.6411^.16^2
"BLD",9260,4,365.1,2,365.1,1,.16,0)
HL7 SUBSCRIBER ID FIELD
"BLD",9260,4,365.1,2,365.1,1,1.05,0)
ORIGINAL SUBSCRIBER ID
"BLD",9260,4,365.1,222)
y^y^p^^^^n^^n
"BLD",9260,4,365.1,224)

"BLD",9260,4,365.15,0)
365.15
"BLD",9260,4,365.15,2,0)
^9.641^365.15^1
"BLD",9260,4,365.15,2,365.15,0)
IIV STATUS TABLE  (File-top level)
"BLD",9260,4,365.15,2,365.15,1,0)
^9.6411^.01^1
"BLD",9260,4,365.15,2,365.15,1,.01,0)
CODE
"BLD",9260,4,365.15,222)
y^y^p^^^^n^^n
"BLD",9260,4,365.15,224)

"BLD",9260,4,"APDD",2,2.312)

"BLD",9260,4,"APDD",2,2.312,8.01)

"BLD",9260,4,"APDD",2,2.312,8.02)

"BLD",9260,4,"APDD",350.9,350.9)

"BLD",9260,4,"APDD",350.9,350.9,51.26)

"BLD",9260,4,"APDD",355.33,355.33)

"BLD",9260,4,"APDD",355.33,355.33,.01)

"BLD",9260,4,"APDD",365.1,365.1)

"BLD",9260,4,"APDD",365.1,365.1,.16)

"BLD",9260,4,"APDD",365.1,365.1,1.05)

"BLD",9260,4,"APDD",365.15,365.15)

"BLD",9260,4,"APDD",365.15,365.15,.01)

"BLD",9260,4,"B",2,2)

"BLD",9260,4,"B",350.9,350.9)

"BLD",9260,4,"B",355.33,355.33)

"BLD",9260,4,"B",365.1,365.1)

"BLD",9260,4,"B",365.15,365.15)

"BLD",9260,6.3)
74
"BLD",9260,"ABPKG")
n
"BLD",9260,"INID")
^n
"BLD",9260,"INIT")
IBY506PO
"BLD",9260,"KRN",0)
^9.67PA^779.2^20
"BLD",9260,"KRN",.4,0)
.4
"BLD",9260,"KRN",.401,0)
.401
"BLD",9260,"KRN",.402,0)
.402
"BLD",9260,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",9260,"KRN",.402,"NM",1,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",9260,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",1)

"BLD",9260,"KRN",.403,0)
.403
"BLD",9260,"KRN",.5,0)
.5
"BLD",9260,"KRN",.84,0)
.84
"BLD",9260,"KRN",3.6,0)
3.6
"BLD",9260,"KRN",3.8,0)
3.8
"BLD",9260,"KRN",9.2,0)
9.2
"BLD",9260,"KRN",9.8,0)
9.8
"BLD",9260,"KRN",9.8,"NM",0)
^9.68A^26^24
"BLD",9260,"KRN",9.8,"NM",1,0)
IBCNBLL^^0^B138729075
"BLD",9260,"KRN",9.8,"NM",2,0)
IBCNBAA^^0^B75234738
"BLD",9260,"KRN",9.8,"NM",3,0)
IBCNEDE2^^0^B63879348
"BLD",9260,"KRN",9.8,"NM",4,0)
IBCNEDEP^^0^B83976754
"BLD",9260,"KRN",9.8,"NM",5,0)
IBCNEHL3^^0^B171692667
"BLD",9260,"KRN",9.8,"NM",6,0)
IBCNEHLT^^0^B80145618
"BLD",9260,"KRN",9.8,"NM",8,0)
IBCNEHL1^^0^B215626728
"BLD",9260,"KRN",9.8,"NM",9,0)
IBCNEHLM^^0^B28096778
"BLD",9260,"KRN",9.8,"NM",10,0)
IBCNERPE^^0^B65900140
"BLD",9260,"KRN",9.8,"NM",11,0)
IBCNES^^0^B63081036
"BLD",9260,"KRN",9.8,"NM",12,0)
IBCNBLA1^^0^B100917255
"BLD",9260,"KRN",9.8,"NM",13,0)
IBJPI^^0^B19548396
"BLD",9260,"KRN",9.8,"NM",14,0)
IBCNEUT1^^0^B44078437
"BLD",9260,"KRN",9.8,"NM",15,0)
IBCNSM3^^0^B14271242
"BLD",9260,"KRN",9.8,"NM",16,0)
IBCNEDST^^0^B47395616
"BLD",9260,"KRN",9.8,"NM",17,0)
IBCNERP8^^0^B75472595
"BLD",9260,"KRN",9.8,"NM",18,0)
IBCNERP9^^0^B103562066
"BLD",9260,"KRN",9.8,"NM",19,0)
IBCNBLA^^0^B68621473
"BLD",9260,"KRN",9.8,"NM",20,0)
IBCNEDE6^^0^B33816621
"BLD",9260,"KRN",9.8,"NM",21,0)
IBCNSJ3^^0^B19317542
"BLD",9260,"KRN",9.8,"NM",23,0)
IBCNSUR^^0^B24160231
"BLD",9260,"KRN",9.8,"NM",24,0)
IBCNSJ12^^0^B21606758
"BLD",9260,"KRN",9.8,"NM",25,0)
IBCNUPD^^0^B19970193
"BLD",9260,"KRN",9.8,"NM",26,0)
IBCNEHL4^^0^B174792299
"BLD",9260,"KRN",9.8,"NM","B","IBCNBAA",2)

"BLD",9260,"KRN",9.8,"NM","B","IBCNBLA",19)

"BLD",9260,"KRN",9.8,"NM","B","IBCNBLA1",12)

"BLD",9260,"KRN",9.8,"NM","B","IBCNBLL",1)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEDE2",3)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEDE6",20)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEDEP",4)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEDST",16)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEHL1",8)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEHL3",5)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEHL4",26)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEHLM",9)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEHLT",6)

"BLD",9260,"KRN",9.8,"NM","B","IBCNERP8",17)

"BLD",9260,"KRN",9.8,"NM","B","IBCNERP9",18)

"BLD",9260,"KRN",9.8,"NM","B","IBCNERPE",10)

"BLD",9260,"KRN",9.8,"NM","B","IBCNES",11)

"BLD",9260,"KRN",9.8,"NM","B","IBCNEUT1",14)

"BLD",9260,"KRN",9.8,"NM","B","IBCNSJ12",24)

"BLD",9260,"KRN",9.8,"NM","B","IBCNSJ3",21)

"BLD",9260,"KRN",9.8,"NM","B","IBCNSM3",15)

"BLD",9260,"KRN",9.8,"NM","B","IBCNSUR",23)

"BLD",9260,"KRN",9.8,"NM","B","IBCNUPD",25)

"BLD",9260,"KRN",9.8,"NM","B","IBJPI",13)

"BLD",9260,"KRN",19,0)
19
"BLD",9260,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",9260,"KRN",19,"NM",1,0)
IBCN INSURANCE CO EDIT^^0
"BLD",9260,"KRN",19,"NM","B","IBCN INSURANCE CO EDIT",1)

"BLD",9260,"KRN",19.1,0)
19.1
"BLD",9260,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",9260,"KRN",19.1,"NM",1,0)
IB INSURANCE COMPANY EDIT^^0
"BLD",9260,"KRN",19.1,"NM",2,0)
IB GROUP PLAN EDIT^^0
"BLD",9260,"KRN",19.1,"NM","B","IB GROUP PLAN EDIT",2)

"BLD",9260,"KRN",19.1,"NM","B","IB INSURANCE COMPANY EDIT",1)

"BLD",9260,"KRN",101,0)
101
"BLD",9260,"KRN",101,"NM",0)
^9.68A^7^7
"BLD",9260,"KRN",101,"NM",1,0)
IBCNB LIST APPOINTMENTS VIEW^^1^
"BLD",9260,"KRN",101,"NM",2,0)
IBCNB LIST COMPLETE VIEW^^0
"BLD",9260,"KRN",101,"NM",3,0)
IBCNB LIST FAILURE VIEW^^0
"BLD",9260,"KRN",101,"NM",4,0)
IBCNB LIST SCREEN MENU^^2
"BLD",9260,"KRN",101,"NM",5,0)
IBCNB ENTRY SCREEN MENU^^2
"BLD",9260,"KRN",101,"NM",6,0)
IBCNB ENTRY ESCALATE^^0
"BLD",9260,"KRN",101,"NM",7,0)
IBCNB ENTRY VERIFY^^1^
"BLD",9260,"KRN",101,"NM","B","IBCNB ENTRY ESCALATE",6)

"BLD",9260,"KRN",101,"NM","B","IBCNB ENTRY SCREEN MENU",5)

"BLD",9260,"KRN",101,"NM","B","IBCNB ENTRY VERIFY",7)

"BLD",9260,"KRN",101,"NM","B","IBCNB LIST APPOINTMENTS VIEW",1)

"BLD",9260,"KRN",101,"NM","B","IBCNB LIST COMPLETE VIEW",2)

"BLD",9260,"KRN",101,"NM","B","IBCNB LIST FAILURE VIEW",3)

"BLD",9260,"KRN",101,"NM","B","IBCNB LIST SCREEN MENU",4)

"BLD",9260,"KRN",409.61,0)
409.61
"BLD",9260,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",9260,"KRN",409.61,"NM",1,0)
IBCNB INSURANCE BUFFER LIST^^0
"BLD",9260,"KRN",409.61,"NM",2,0)
IBCNB INSURANCE BUFFER ENTRY^^0
"BLD",9260,"KRN",409.61,"NM","B","IBCNB INSURANCE BUFFER ENTRY",2)

"BLD",9260,"KRN",409.61,"NM","B","IBCNB INSURANCE BUFFER LIST",1)

"BLD",9260,"KRN",771,0)
771
"BLD",9260,"KRN",771,"NM",0)
^9.68A^^
"BLD",9260,"KRN",779.2,0)
779.2
"BLD",9260,"KRN",870,0)
870
"BLD",9260,"KRN",8989.51,0)
8989.51
"BLD",9260,"KRN",8989.52,0)
8989.52
"BLD",9260,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",9260,"KRN",8994,0)
8994
"BLD",9260,"KRN","B",.4,.4)

"BLD",9260,"KRN","B",.401,.401)

"BLD",9260,"KRN","B",.402,.402)

"BLD",9260,"KRN","B",.403,.403)

"BLD",9260,"KRN","B",.5,.5)

"BLD",9260,"KRN","B",.84,.84)

"BLD",9260,"KRN","B",3.6,3.6)

"BLD",9260,"KRN","B",3.8,3.8)

"BLD",9260,"KRN","B",9.2,9.2)

"BLD",9260,"KRN","B",9.8,9.8)

"BLD",9260,"KRN","B",19,19)

"BLD",9260,"KRN","B",19.1,19.1)

"BLD",9260,"KRN","B",101,101)

"BLD",9260,"KRN","B",409.61,409.61)

"BLD",9260,"KRN","B",771,771)

"BLD",9260,"KRN","B",779.2,779.2)

"BLD",9260,"KRN","B",870,870)

"BLD",9260,"KRN","B",8989.51,8989.51)

"BLD",9260,"KRN","B",8989.52,8989.52)

"BLD",9260,"KRN","B",8994,8994)

"BLD",9260,"QDEF")
^^^^^^^^YES^^YES
"BLD",9260,"QUES",0)
^9.62^^
"BLD",9260,"REQB",0)
^9.611^8^8
"BLD",9260,"REQB",1,0)
IB*2.0*497^1
"BLD",9260,"REQB",2,0)
IB*2.0*435^1
"BLD",9260,"REQB",3,0)
IB*2.0*416^1
"BLD",9260,"REQB",4,0)
IB*2.0*438^1
"BLD",9260,"REQB",5,0)
IB*2.0*479^1
"BLD",9260,"REQB",6,0)
IB*2.0*399^1
"BLD",9260,"REQB",7,0)
IB*2.0*142^1
"BLD",9260,"REQB",8,0)
IB*2.0*276^1
"BLD",9260,"REQB","B","IB*2.0*142",7)

"BLD",9260,"REQB","B","IB*2.0*276",8)

"BLD",9260,"REQB","B","IB*2.0*399",6)

"BLD",9260,"REQB","B","IB*2.0*416",3)

"BLD",9260,"REQB","B","IB*2.0*435",2)

"BLD",9260,"REQB","B","IB*2.0*438",4)

"BLD",9260,"REQB","B","IB*2.0*479",5)

"BLD",9260,"REQB","B","IB*2.0*497",1)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,8.01)

"FIA",2,2.312,8.02)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.26)

"FIA",355.33)
INSURANCE VERIFICATION PROCESSOR
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33D
"FIA",355.33,0,1)
y^y^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,.01)

"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^y^p^^^^n^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
1
"FIA",365.1,365.1,.16)

"FIA",365.1,365.1,1.05)

"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
y^y^p^^^^n^^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
1
"FIA",365.15,365.15,.01)

"INIT")
IBY506PO
"KRN",.402,1667,-1)
0^1
"KRN",.402,1667,0)
IBCNE GENERAL PARAMETER EDIT^3140127.1529^@^350.9^^@^3130912
"KRN",.402,1667,"DIAB",1,1,200,0)
OFFICE PHONE;REQ
"KRN",.402,1667,"DIAB",2,1,200,0)
EMAIL ADDRESS;REQ
"KRN",.402,1667,"DIAB",3,0,350.9,0)
CONTACT PERSON:
"KRN",.402,1667,"DR",1,350.9)
51.04;51.16;^200^VA(200,^^S I(0,0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,16),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");51.2;
"KRN",.402,1667,"DR",2,200)
.132R~;.151R~;
"KRN",19,2437,-1)
0^1
"KRN",19,2437,0)
IBCN INSURANCE CO EDIT^Insurance Company Entry/Edit^^R^^IB INSURANCE COMPANY EDIT^^^^^^
"KRN",19,2437,1,0)
^19.06^1^1^3130805^^
"KRN",19,2437,1,1,0)
This option allows edit insurance company information
"KRN",19,2437,25)
IBCNSC
"KRN",19,2437,99)
55696,36156
"KRN",19,2437,"U")
INSURANCE COMPANY ENTRY/EDIT
"KRN",19.1,577,-1)
0^1
"KRN",19.1,577,0)
IB INSURANCE COMPANY EDIT^ALLOWS NEW INSURANCE COMPANY
"KRN",19.1,577,1,0)
^19.11^2^2^3130807^^^^
"KRN",19.1,577,1,1,0)
Key required to add insurance company to file #36. Used within the 
"KRN",19.1,577,1,2,0)
Process/Accept Insurance Buffer action.
"KRN",19.1,578,-1)
0^2
"KRN",19.1,578,0)
IB GROUP PLAN EDIT^ALLOWS NEW GROUP/PLAN
"KRN",19.1,578,1,0)
^19.11^3^3^3130807^^
"KRN",19.1,578,1,1,0)
Key required to add insurance group/plan to file #355.3. Used within the 
"KRN",19.1,578,1,2,0)
Process/Accept Insurance Buffer action and Patient Insurance Info 
"KRN",19.1,578,1,3,0)
View/Edit (when adding a policy).
"KRN",101,2394,-1)
2^4
"KRN",101,2394,0)
IBCNB LIST SCREEN MENU^List Menu^^M^123457016^^^^^^^49
"KRN",101,2394,10,0)
^101.01PA^25^25
"KRN",101,2394,10,13,0)
4515^FB^41^
"KRN",101,2394,10,13,"^")
IBCNB LIST FAILURE VIEW
"KRN",101,2394,10,14,0)
4514^CB^44^
"KRN",101,2394,10,14,"^")
IBCNB LIST COMPLETE VIEW
"KRN",101,2401,-1)
2^5
"KRN",101,2401,0)
IBCNB ENTRY SCREEN MENU^Entry Menu^^M^66481^^^^^^^49
"KRN",101,2401,10,0)
^101.01PA^9^8
"KRN",101,2401,10,9,0)
4527^ES^21^
"KRN",101,2401,10,9,"^")
IBCNB ENTRY ESCALATE
"KRN",101,4514,-1)
0^2
"KRN",101,4514,0)
IBCNB LIST COMPLETE VIEW^Complete Buffer^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4514,20)
K IBCNSORT D EN1^IBCNBLL(6)
"KRN",101,4514,99)
63055,53738
"KRN",101,4515,-1)
0^3
"KRN",101,4515,0)
IBCNB LIST FAILURE VIEW^Failure Buffer^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4515,20)
K IBCNSORT D EN1^IBCNBLL(4)
"KRN",101,4515,99)
63055,53738
"KRN",101,4527,-1)
0^6
"KRN",101,4527,0)
IBCNB ENTRY ESCALATE^Escalate Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4527,20)
D ESC^IBCNBLA1(IBBUFDA,IBKEYS)
"KRN",101,4527,99)
63069,46862
"KRN",101,4541,-1)
1^1
"KRN",101,4541,0)
IBCNB LIST APPOINTMENTS VIEW
"KRN",101,4542,-1)
1^7
"KRN",101,4542,0)
IBCNB ENTRY VERIFY
"KRN",409.61,330,-1)
0^1
"KRN",409.61,330,0)
IBCNB INSURANCE BUFFER LIST^1^^80^4^18^1^1^Buffer Entry^IBCNB LIST SCREEN MENU^Insurance Buffer List^1^^1
"KRN",409.61,330,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,330,"ARRAY")
 ^TMP("IBCNBLL",$J)
"KRN",409.61,330,"COL",0)
^409.621^8^8
"KRN",409.61,330,"COL",1,0)
NUMBER^1^4
"KRN",409.61,330,"COL",2,0)
PAT NAME^6^20^Patient Name
"KRN",409.61,330,"COL",3,0)
SSN^27^4
"KRN",409.61,330,"COL",4,0)
INS NAME^32^17^Insurance Company
"KRN",409.61,330,"COL",5,0)
SUB ID^50^13^Subscr Id
"KRN",409.61,330,"COL",6,0)
SOURCE^64^1^S
"KRN",409.61,330,"COL",7,0)
ENTERED^66^8^Entered
"KRN",409.61,330,"COL",8,0)
FLAGS^76^5^iIEYH
"KRN",409.61,330,"COL","B","ENTERED",7)

"KRN",409.61,330,"COL","B","FLAGS",8)

"KRN",409.61,330,"COL","B","INS NAME",4)

"KRN",409.61,330,"COL","B","NUMBER",1)

"KRN",409.61,330,"COL","B","PAT NAME",2)

"KRN",409.61,330,"COL","B","SOURCE",6)

"KRN",409.61,330,"COL","B","SSN",3)

"KRN",409.61,330,"COL","B","SUB ID",5)

"KRN",409.61,330,"FNL")
D EXIT^IBCNBLL
"KRN",409.61,330,"HDR")
D HDR^IBCNBLL
"KRN",409.61,330,"HLP")
D HELP^IBCNBLL
"KRN",409.61,330,"INIT")
D INIT^IBCNBLL
"KRN",409.61,332,-1)
0^2
"KRN",409.61,332,0)
IBCNB INSURANCE BUFFER ENTRY^1^^80^6^19^1^1^Entry^IBCNB ENTRY SCREEN MENU^Insurance Buffer Entry^1^^1
"KRN",409.61,332,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,332,"ARRAY")
 ^TMP("IBCNBLE",$J)
"KRN",409.61,332,"FNL")
D EXIT^IBCNBLE
"KRN",409.61,332,"HDR")
D HDR^IBCNBLE
"KRN",409.61,332,"HLP")
D HELP^IBCNBLE
"KRN",409.61,332,"INIT")
D INIT^IBCNBLE
"MBREQ")
0
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",49,-1)
1^1
"PKG",49,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",49,20,0)
^9.402P^1^1
"PKG",49,20,1,0)
2^^IBAXDR
"PKG",49,20,1,1)

"PKG",49,20,"B",2,1)

"PKG",49,22,0)
^9.49I^1^1
"PKG",49,22,1,0)
2.0^2940321^2960627
"PKG",49,22,1,"PAH",1,0)
506^3140508^123457016
"PKG",49,22,1,"PAH",1,1,0)
^^1^1^3140508
"PKG",49,22,1,"PAH",1,1,1,0)
eInsurance System Modification effort
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
25
"RTN","IBCNBAA")
0^2^B75234738^B67963575
"RTN","IBCNBAA",1,0)
IBCNBAA ;ALB/ARH-Ins Buffer: process Accept set-up ;1 Jun 97
"RTN","IBCNBAA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,416,506**;21-MAR-94;Build 74
"RTN","IBCNBAA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBAA",4,0)
 ;
"RTN","IBCNBAA",5,0)
 ;
"RTN","IBCNBAA",6,0)
ACCEPT(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA) ; process a buffer entry for acceptance then save in Insurance files
"RTN","IBCNBAA",7,0)
 ;    1) for Insurance Company, Group/Plan and Policy sets of data:
"RTN","IBCNBAA",8,0)
 ;        a) display the set of buffer data and corresponding existing selected ins data
"RTN","IBCNBAA",9,0)
 ;        b) if ins record exists confirm with user that it is the correct one to use
"RTN","IBCNBAA",10,0)
 ;        c) if ins record exists user selects method of saving to ins record: Merge/Overwrite/Replace/No Change/Individually Accept(skip blanks)
"RTN","IBCNBAA",11,0)
 ;        d) if new record needs to be created get user confirmation
"RTN","IBCNBAA",12,0)
 ;    2) display the actions that will be taken
"RTN","IBCNBAA",13,0)
 ;    3) user confirms that is correct
"RTN","IBCNBAA",14,0)
 ;    4) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAA",15,0)
 ;    5) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAA",16,0)
 ;    6) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAA",17,0)
 ;    7) buffer ins/group/policy data deleted
"RTN","IBCNBAA",18,0)
 ;    8) buffer entry status updated
"RTN","IBCNBAA",19,0)
 ;
"RTN","IBCNBAA",20,0)
 N DFN,IBX,IBELIG,IBHELP,IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL,IBACCPT,DIR,X,Y,DIRUT,IBDONE S IBDONE=0
"RTN","IBCNBAA",21,0)
 K ^TMP($J,"IB BUFFER SELECTED")  ; initialize selection file
"RTN","IBCNBAA",22,0)
 S IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA),IBPOLDA=+$G(IBPOLDA),(IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL)=0
"RTN","IBCNBAA",23,0)
 S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) I 'DFN G ACCPTQ
"RTN","IBCNBAA",24,0)
 I +IBINSDA,+IBGRPDA,'IBPOLDA S IBPOLDA=$$PTGRP^IBCNBU1(DFN,IBINSDA,IBGRPDA) ; pateint already member of plan
"RTN","IBCNBAA",25,0)
 ;
"RTN","IBCNBAA",26,0)
 I $P($G(^IBA(355.33,$G(IBBUFDA),0)),U,4)'="E" G ACCPTQ
"RTN","IBCNBAA",27,0)
 I +IBINSDA,$G(^DIC(36,IBINSDA,0))="" G ACCPTQ
"RTN","IBCNBAA",28,0)
 I +IBGRPDA,+$G(^IBA(355.3,IBGRPDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",29,0)
 I +IBGRPDA S IBX=$G(^IBA(355.3,IBGRPDA,0)) I $P(IBX,U,2)=0,+$P(IBX,U,10),$P(IBX,U,10)'=DFN G ACCPTQ
"RTN","IBCNBAA",30,0)
 I +IBPOLDA,+$G(^DPT(DFN,.312,IBPOLDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",31,0)
 I +IBPOLDA,$P($G(^DPT(DFN,.312,IBPOLDA,0)),U,18)'=IBGRPDA G ACCPTQ
"RTN","IBCNBAA",32,0)
 ;
"RTN","IBCNBAA",33,0)
ACINS ;
"RTN","IBCNBAA",34,0)
 W @IOF S IBHELP=",INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBAA",35,0)
 D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBAA",36,0)
 I +IBINSDA S IBACCPT=$$MATCH("INSURANCE COMPANY") S:'IBACCPT (IBINSDA,IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",37,0)
 I +IBINSDA D  I $D(DIRUT)!(IBMVINS="") G ACCPTQ
"RTN","IBCNBAA",38,0)
 . I '$D(^XUSEC("IB INSURANCE COMPANY EDIT",DUZ)) S IBMVINS=0 Q
"RTN","IBCNBAA",39,0)
 . S IBMVINS=$$MOVE("INSURANCE COMPANY",IBHELP)
"RTN","IBCNBAA",40,0)
 I 'IBINSDA S IBNEWINS=$$NEW("INSURANCE COMPANY"),IBMVINS=3,(IBGRPDA,IBPOLDA)=0 I 'IBNEWINS G ACCPTQ
"RTN","IBCNBAA",41,0)
 ;
"RTN","IBCNBAA",42,0)
 I +IBMVINS=4 D INS^IBCNBAC(IBBUFDA,IBINSDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",43,0)
 ;
"RTN","IBCNBAA",44,0)
ACGRP ;
"RTN","IBCNBAA",45,0)
 W @IOF S IBHELP=",GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBAA",46,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBAA",47,0)
 D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBAA",48,0)
 I +IBGRPDA S IBACCPT=$$MATCH("GROUP/PLAN") S:'IBACCPT (IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",49,0)
 I +IBGRPDA D  I $D(DIRUT)!(IBMVGRP="") G ACCPTQ
"RTN","IBCNBAA",50,0)
 . I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) S IBMVGRP=0 Q
"RTN","IBCNBAA",51,0)
 . S IBMVGRP=$$MOVE("GROUP/PLAN",IBHELP)
"RTN","IBCNBAA",52,0)
 I 'IBGRPDA S IBNEWGRP=$$NEW("GROUP/PLAN"),IBMVGRP=3,IBPOLDA=0 I 'IBNEWGRP G ACCPTQ
"RTN","IBCNBAA",53,0)
 ;
"RTN","IBCNBAA",54,0)
 I +IBMVGRP=4 D GRP^IBCNBAC(IBBUFDA,IBGRPDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",55,0)
 ;
"RTN","IBCNBAA",56,0)
ACPOL ;
"RTN","IBCNBAA",57,0)
 W @IOF S IBHELP=",POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBAA",58,0)
 I 'IBPOLDA W !,"This will be a New policy for this group and patient.",!
"RTN","IBCNBAA",59,0)
 D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBAA",60,0)
 I +IBPOLDA S IBACCPT=$$MATCH("PATIENT POLICY") S:'IBACCPT IBPOLDA=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",61,0)
 I +IBPOLDA S IBMVPOL=$$MOVE("PATIENT POLICY",IBHELP) I $D(DIRUT)!(IBMVPOL="") G ACCPTQ
"RTN","IBCNBAA",62,0)
 I 'IBPOLDA S IBNEWPOL=$$NEW("PATIENT POLICY"),IBMVPOL=3 I 'IBNEWPOL G ACCPTQ
"RTN","IBCNBAA",63,0)
 ;
"RTN","IBCNBAA",64,0)
 I +IBMVPOL=4 D POLICY^IBCNBAC(IBBUFDA,IBPOLDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",65,0)
 ;
"RTN","IBCNBAA",66,0)
ACEB ;
"RTN","IBCNBAA",67,0)
 W @IOF
"RTN","IBCNBAA",68,0)
 D ELIG^IBCNBCD(IBBUFDA,IBPOLDA) S IBELIG=$$REPL() I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",69,0)
 ;
"RTN","IBCNBAA",70,0)
CHECK ; display changes that will be made and ask user for confirmation
"RTN","IBCNBAA",71,0)
 W @IOF
"RTN","IBCNBAA",72,0)
 ;
"RTN","IBCNBAA",73,0)
 I +IBINSDA S IBX="The Buffer data will "_$P(IBMVINS,U,2)_" the existing Insurance Company data."
"RTN","IBCNBAA",74,0)
 I +IBINSDA,'IBMVINS S IBX="There will be "_$P(IBMVINS,U,2)_" to the existing Insurance Company data."
"RTN","IBCNBAA",75,0)
 I 'IBINSDA S IBX=$P(^IBA(355.33,IBBUFDA,20),U,1)_" will be added as a NEW Insurance Company."
"RTN","IBCNBAA",76,0)
 W !!,$G(IORVON)_"STEP 1: Insurance Company"_$J("",55)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",77,0)
 ;
"RTN","IBCNBAA",78,0)
 I +IBGRPDA S IBX="The Buffer data will "_$P(IBMVGRP,U,2)_" the existing Group/Plan data."
"RTN","IBCNBAA",79,0)
 I +IBGRPDA,'IBMVGRP S IBX="There will be "_$P(IBMVGRP,U,2)_" to the existing Group/Plan data."
"RTN","IBCNBAA",80,0)
 I 'IBGRPDA S IBX="A NEW Group Plan will be added to this Insurance Company."
"RTN","IBCNBAA",81,0)
 W !!,$G(IORVON)_"STEP 2: Group/Plan"_$J("",62)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",82,0)
 ;
"RTN","IBCNBAA",83,0)
 I +IBPOLDA S IBX="The Buffer data will "_$P(IBMVPOL,U,2)_" the existing Policy data."
"RTN","IBCNBAA",84,0)
 I +IBPOLDA,'IBMVPOL S IBX="There will be "_$P(IBMVPOL,U,2)_" to the existing Policy data."
"RTN","IBCNBAA",85,0)
 I 'IBPOLDA S IBX="A NEW Patient Policy will be added for this patient and this Group/Plan."
"RTN","IBCNBAA",86,0)
 W !!,$G(IORVON)_"STEP 3: Patient Policy"_$J("",58)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",87,0)
 ;
"RTN","IBCNBAA",88,0)
 I IBELIG S IBX="The Buffer data will"_$S(IBELIG:"",1:" not")_" replace the existing EB data."
"RTN","IBCNBAA",89,0)
 W !!,$G(IORVON)_"STEP 4: Eligibility/Benefits"_$J("",58)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",90,0)
 ;
"RTN","IBCNBAA",91,0)
 I +IBINSDA,$P(IBMVINS,U,1)=0,+IBGRPDA,$P(IBMVGRP,U,1)=0,+IBPOLDA,$P(IBMVPOL,U,1)=0,+IBELIG=0 W !!!,"This would result in No Change to the existing Insurance data.  Process aborted." D WAIT G ACCPTQ
"RTN","IBCNBAA",92,0)
 ;
"RTN","IBCNBAA",93,0)
 I '$$OK G ACCPTQ
"RTN","IBCNBAA",94,0)
 ;
"RTN","IBCNBAA",95,0)
PROCESS ; process all changes selected by user, add/edit insurance files based on buffer data, cleanup, ...
"RTN","IBCNBAA",96,0)
 ;
"RTN","IBCNBAA",97,0)
 D ACCEPT^IBCNBAR(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IBELIG)
"RTN","IBCNBAA",98,0)
 S IBDONE=1
"RTN","IBCNBAA",99,0)
 ;
"RTN","IBCNBAA",100,0)
ACCPTQ K ^TMP($J,"IB BUFFER SELECTED")  ; cleanup selection file
"RTN","IBCNBAA",101,0)
 Q IBDONE
"RTN","IBCNBAA",102,0)
 ;
"RTN","IBCNBAA",103,0)
 ;
"RTN","IBCNBAA",104,0)
 ;
"RTN","IBCNBAA",105,0)
MATCH(IBDESC) ; ask the user if the buffer entry is a match with the selected insurance file entry
"RTN","IBCNBAA",106,0)
 ; returns 1 if there is a match, 0 otherwise
"RTN","IBCNBAA",107,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",108,0)
 S DIR("?")="Enter Yes if this existing "_IBDESC_" corresponds to the buffer entry "_IBDESC_".  Enter No to add new "_IBDESC_"."
"RTN","IBCNBAA",109,0)
 S DIR("?",1)="Entering Yes will match this existing "_IBDESC_" with the buffer entry,"
"RTN","IBCNBAA",110,0)
 S DIR("?",2)="no new "_IBDESC_" will be created.  Any existing "_IBDESC_" data"
"RTN","IBCNBAA",111,0)
 S DIR("?",3)="changes based on the Buffer data will be applied to this "_IBDESC_"."
"RTN","IBCNBAA",112,0)
 S DIR("?",4)="Enter No to create a new "_IBDESC_" if the Buffer entry's "
"RTN","IBCNBAA",113,0)
 S DIR("?",5)=IBDESC_" data does not match any existing "_IBDESC_".",DIR("?",6)=""
"RTN","IBCNBAA",114,0)
 ;
"RTN","IBCNBAA",115,0)
 W ! S DIR(0)="YO",DIR("A")="Is this the correct "_IBDESC_" to match with this Buffer entry" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",116,0)
 Q IBX
"RTN","IBCNBAA",117,0)
 ;
"RTN","IBCNBAA",118,0)
MOVE(IBDESC,IBHELP) ; ask the user what method they want to use to transfer buffer data to the insurance files
"RTN","IBCNBAA",119,0)
 ; returns 1^merge, 2^overwrite, 3^replace, 4^individually accept (skip blanks),
"RTN","IBCNBAA",120,0)
 ;  0^no change,
"RTN","IBCNBAA",121,0)
 ;  or "" if none of the methods was chosen
"RTN","IBCNBAA",122,0)
 N DIR,X,Y,IBX S IBX=""
"RTN","IBCNBAA",123,0)
 S DIR("?")="^D HELP^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP),DIR("??")="^D HELP2^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP)
"RTN","IBCNBAA",124,0)
 S DIR("A")="Select the method to update the "_IBDESC
"RTN","IBCNBAA",125,0)
 ; DAOU/BHS - 08/28/2002 - Added INDIVIDUALLY ACCEPT methods
"RTN","IBCNBAA",126,0)
 W ! S DIR(0)="SOB^M:MERGE;O:OVERWRITE;R:REPLACE;N:NO CHANGE;I:INDIVIDUALLY ACCEPT (SKIP BLANKS)" D ^DIR
"RTN","IBCNBAA",127,0)
 S IBX=$S(Y="M":1,Y="O":2,Y="R":3,Y="I":4,Y="N":0,1:"") I IBX'="" S IBX=IBX_U_$G(Y(0))_$S(+IBX=1:" with",1:"")
"RTN","IBCNBAA",128,0)
 Q IBX
"RTN","IBCNBAA",129,0)
 ;
"RTN","IBCNBAA",130,0)
NEW(IBDESC) ; ask user if they want to add a new entry to the insurance files (36, 355.3, or 2.312)
"RTN","IBCNBAA",131,0)
 ; returns 1 if Yes create a new entry, 0 otherwise
"RTN","IBCNBAA",132,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",133,0)
 ;
"RTN","IBCNBAA",134,0)
 ; The following was changed with patch IB*2.0*506
"RTN","IBCNBAA",135,0)
 S DIR("?")="Enter Yes to create a new "_IBDESC_". Enter No to stop this process."
"RTN","IBCNBAA",136,0)
 S DIR("?",1)="Enter Yes to create a new "_IBDESC_" in the Insurance files for"
"RTN","IBCNBAA",137,0)
 S DIR("?",2)="this Buffer entry only if no existing "_IBDESC_" could be found"
"RTN","IBCNBAA",138,0)
 S DIR("?",3)="that matches this buffer entry.",DIR("?",4)=""
"RTN","IBCNBAA",139,0)
 W ! S DIR(0)="YO",DIR("A")="NO "_IBDESC_" Selected, do you need a New "_IBDESC D ^DIR I +Y=1 S IBX=1
"RTN","IBCNBAA",140,0)
 ;
"RTN","IBCNBAA",141,0)
 ;I IBDESC="INSURANCE COMPANY",'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies." D WAIT G NEWQ
"RTN","IBCNBAA",142,0)
 I IBX=1 D  G NEWQ
"RTN","IBCNBAA",143,0)
 . I IBDESC="INSURANCE COMPANY" D  Q
"RTN","IBCNBAA",144,0)
 . . I '$D(^XUSEC("IB INSURANCE COMPANY EDIT",DUZ)) W !!,"A Supervisor will need to add the "_IBDESC_" before processing can",!,"continue." S IBX=0 D WAIT Q
"RTN","IBCNBAA",145,0)
 . . W !!,"You must create an "_IBDESC_" first." S IBX=0 D WAIT
"RTN","IBCNBAA",146,0)
 . I IBDESC="GROUP/PLAN" D  Q
"RTN","IBCNBAA",147,0)
 . . I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) W !!,"A Supervisor will need to add the "_IBDESC_" before processing can continue." S IBX=0 D WAIT Q
"RTN","IBCNBAA",148,0)
 . . W !!,"You must create a "_IBDESC_" first." S IBX=0 D WAIT
"RTN","IBCNBAA",149,0)
 ;/IB*2.0*506 End
"RTN","IBCNBAA",150,0)
NEWQ Q IBX
"RTN","IBCNBAA",151,0)
 ;
"RTN","IBCNBAA",152,0)
REPL() ; ask user if they want to replace eligibility/benefits data in pt. insuarance
"RTN","IBCNBAA",153,0)
 N DIR,X,Y,IBX
"RTN","IBCNBAA",154,0)
 S IBX=0
"RTN","IBCNBAA",155,0)
 S DIR(0)="YO",DIR("A")="Replace the Pt's Eligibility/Benefits data",DIR("B")="YES"
"RTN","IBCNBAA",156,0)
 S DIR("?")="Enter Yes to replace existing Eligibility/Benefits data with one from eIV response."
"RTN","IBCNBAA",157,0)
 W ! D ^DIR I +Y=1 S IBX=1
"RTN","IBCNBAA",158,0)
 Q IBX
"RTN","IBCNBAA",159,0)
 ;
"RTN","IBCNBAA",160,0)
OK() ; ask the user if the buffer data should be moved to the insurance files
"RTN","IBCNBAA",161,0)
 ; returns 1 if yes, 0 otherwise
"RTN","IBCNBAA",162,0)
 N DIR,X,Y,IBX S IBX=0 W !!!
"RTN","IBCNBAA",163,0)
 S DIR("?")="Enter Yes to accept/verify the buffer data and move it to the insurance files.  Enter No to stop this process."
"RTN","IBCNBAA",164,0)
 S DIR("?",1)="Entering Yes will cause several things to happen:"
"RTN","IBCNBAA",165,0)
 S DIR("?",2)="  1 - the above changes will be completed and the Insurance files updated with"
"RTN","IBCNBAA",166,0)
 S DIR("?",3)="      the buffer data."
"RTN","IBCNBAA",167,0)
 S DIR("?",4)="  2 - the Insurance entries modified or added will be flagged as verified."
"RTN","IBCNBAA",168,0)
 S DIR("?",5)="  3 - most of the insurance and patient related information in the buffer entry"
"RTN","IBCNBAA",169,0)
 S DIR("?",6)="      will be deleted, leaving only a stub entry for reporting purposes.",DIR("?",7)=""
"RTN","IBCNBAA",170,0)
 S DIR(0)="YO",DIR("A")="Is this Correct, update the existing Insurance files now" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",171,0)
 Q IBX
"RTN","IBCNBAA",172,0)
 ;
"RTN","IBCNBAA",173,0)
WAIT N DIR,DIRUT,DUOUT,DTOUT,X,Y W !! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W !!
"RTN","IBCNBAA",174,0)
 Q
"RTN","IBCNBLA")
0^19^B68621473^B65832730
"RTN","IBCNBLA",1,0)
IBCNBLA ;ALB/ARH - Ins Buffer: LM action calls ;1 Jun 97
"RTN","IBCNBLA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,184,271,416,506**;21-MAR-94;Build 74
"RTN","IBCNBLA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLA",4,0)
 ;
"RTN","IBCNBLA",5,0)
NEWSCRN(TEMPLAT,TMPARR,IBBUFDA) ; open a new screen for a specific buffer entry, pass in LM template and the array to select from
"RTN","IBCNBLA",6,0)
 ; if temp array is defined then user selects the buffer entry, otherwise use entry passed in
"RTN","IBCNBLA",7,0)
 ;
"RTN","IBCNBLA",8,0)
 I $G(TMPARR)'="" N IBBUFDA S IBBUFDA=$$SEL(TMPARR)
"RTN","IBCNBLA",9,0)
 I +$G(IBBUFDA),$G(TEMPLAT)'="",+$$LOCK^IBCNBU1(IBBUFDA,1) D EN^VALM(TEMPLAT) D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA",10,0)
 S VALMBCK="R"
"RTN","IBCNBLA",11,0)
 Q
"RTN","IBCNBLA",12,0)
 ;
"RTN","IBCNBLA",13,0)
SEL(TMPARR) ; user selects one of the items from the list on the screen
"RTN","IBCNBLA",14,0)
 ;
"RTN","IBCNBLA",15,0)
 N VALMY,IBX,IBY,IBSELN S IBX=""
"RTN","IBCNBLA",16,0)
 I $G(TMPARR)'="",'$O(^TMP(TMPARR,$J,0)) D  G SELQ
"RTN","IBCNBLA",17,0)
 . W !!,"There are no '",$S($G(VALM("ENTITY"))'="":VALM("ENTITY"),1:"record"),"s' to select.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",18,0)
 ;
"RTN","IBCNBLA",19,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCNBLA",20,0)
 I $D(VALMY),$G(TMPARR)'="" S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA",21,0)
 . S IBX=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99)
"RTN","IBCNBLA",22,0)
 . ;
"RTN","IBCNBLA",23,0)
 . I TMPARR="IBCNBLLX" S IBY=$P($G(^IBA(355.33,+IBX,0)),U,4) I IBY'="E" D  S IBX=""
"RTN","IBCNBLA",24,0)
 .. W !!," >>> Selected entry has been ",$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN STATUS")
"RTN","IBCNBLA",25,0)
 .. W " and may no longer be edited or modified.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",26,0)
 ;
"RTN","IBCNBLA",27,0)
SELQ Q IBX
"RTN","IBCNBLA",28,0)
 ;
"RTN","IBCNBLA",29,0)
PNXTSCRN(TEMPLAT,IBBUFDA) ; open a new screen for a buffer entry, rebuild the process screen on return since it may have changed
"RTN","IBCNBLA",30,0)
 D NEWSCRN^IBCNBLA(TEMPLAT,"",IBBUFDA)
"RTN","IBCNBLA",31,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R"
"RTN","IBCNBLA",32,0)
 Q
"RTN","IBCNBLA",33,0)
 ;
"RTN","IBCNBLA",34,0)
LNXTSCRN(TEMPLAT,TMPARR,AVIEW) ; select entries from list to process/expand
"RTN","IBCNBLA",35,0)
 ;
"RTN","IBCNBLA",36,0)
 ; This procedure is called from the ListMan action protocols for
"RTN","IBCNBLA",37,0)
 ; processing and expanding buffer entries.
"RTN","IBCNBLA",38,0)
 ;    TEMPLAT - list template name for associated action
"RTN","IBCNBLA",39,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",40,0)
 ;
"RTN","IBCNBLA",41,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",42,0)
 NEW ACT,REMAIN,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNBLA",43,0)
 D FULL^VALM1
"RTN","IBCNBLA",44,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",45,0)
 I '$D(IBCNEZAR) G LNXTX
"RTN","IBCNBLA",46,0)
 ;
"RTN","IBCNBLA",47,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",48,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",49,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",50,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",51,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)    ; buffer ien
"RTN","IBCNBLA",52,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",53,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",54,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",55,0)
 .. D EN^VALM(TEMPLAT)                      ; invoke list template
"RTN","IBCNBLA",56,0)
 .. I $G(IBFASTXT) S IBCNEZQ=1 Q            ; Fast Exit processing
"RTN","IBCNBLA",57,0)
 .. S ACT="expand"
"RTN","IBCNBLA",58,0)
 .. I TEMPLAT["PROCESS" S ACT="process"
"RTN","IBCNBLA",59,0)
 .. S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",60,0)
 .. I 'REMAIN Q
"RTN","IBCNBLA",61,0)
 .. W @IOF
"RTN","IBCNBLA",62,0)
 .. W !!!,"You are ",ACT,"ing multiple insurance buffer entries."
"RTN","IBCNBLA",63,0)
 .. W !,"You just completed entry number ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,")."
"RTN","IBCNBLA",64,0)
 .. S DIR(0)="Y"
"RTN","IBCNBLA",65,0)
 .. S DIR("A")="Do you want to "_ACT_" the remaining entry"
"RTN","IBCNBLA",66,0)
 .. I REMAIN>1 S DIR("A")="Do you want to "_ACT_" the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",67,0)
 .. S DIR("B")="YES"
"RTN","IBCNBLA",68,0)
 .. W ! D ^DIR K DIR
"RTN","IBCNBLA",69,0)
 .. I 'Y S IBCNEZQ=1       ; User said NO so set the Quitting variable
"RTN","IBCNBLA",70,0)
 .. Q
"RTN","IBCNBLA",71,0)
 . ;
"RTN","IBCNBLA",72,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",73,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",74,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",75,0)
 . Q
"RTN","IBCNBLA",76,0)
LNXTX ;
"RTN","IBCNBLA",77,0)
 S VALMBCK="R"
"RTN","IBCNBLA",78,0)
 Q
"RTN","IBCNBLA",79,0)
 ;
"RTN","IBCNBLA",80,0)
LREJECT(TMPARR) ; user select entries from list then reject/delete them
"RTN","IBCNBLA",81,0)
 ;
"RTN","IBCNBLA",82,0)
 ; This procedure is called from the ListMan action protocol for
"RTN","IBCNBLA",83,0)
 ; rejecting buffer entries.
"RTN","IBCNBLA",84,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",85,0)
 ;
"RTN","IBCNBLA",86,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",87,0)
 D FULL^VALM1
"RTN","IBCNBLA",88,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",89,0)
 I '$D(IBCNEZAR) G LREJX
"RTN","IBCNBLA",90,0)
 ;
"RTN","IBCNBLA",91,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",92,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",93,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",94,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",95,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)
"RTN","IBCNBLA",96,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",97,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",98,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",99,0)
 .. W @IOF,!?2,$G(IORVON)
"RTN","IBCNBLA",100,0)
 .. W " Entry ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,") "
"RTN","IBCNBLA",101,0)
 .. W $G(IORVOFF)
"RTN","IBCNBLA",102,0)
 .. D REJECT^IBCNBLA1(IBCNEZBF,.IBCNEZQ)
"RTN","IBCNBLA",103,0)
 .. ;
"RTN","IBCNBLA",104,0)
 .. ; If the user wants to stop and we're not processing the last one,
"RTN","IBCNBLA",105,0)
 .. ; then determine if we should process the remaining entries
"RTN","IBCNBLA",106,0)
 .. ;
"RTN","IBCNBLA",107,0)
 .. I $D(IBCNEZQ),IBCNEZCT<IBCNEZGD D
"RTN","IBCNBLA",108,0)
 ... NEW REMAIN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA",109,0)
 ... S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",110,0)
 ... S DIR(0)="Y"
"RTN","IBCNBLA",111,0)
 ... S DIR("A")="Do you want to process the remaining entry"
"RTN","IBCNBLA",112,0)
 ... I REMAIN>1 S DIR("A")="Do you want to process the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",113,0)
 ... S DIR("B")="NO"
"RTN","IBCNBLA",114,0)
 ... W ! D ^DIR K DIR
"RTN","IBCNBLA",115,0)
 ... ; if user wants to continue, then kill the quitting variable
"RTN","IBCNBLA",116,0)
 ... I Y KILL IBCNEZQ
"RTN","IBCNBLA",117,0)
 ... Q
"RTN","IBCNBLA",118,0)
 .. Q
"RTN","IBCNBLA",119,0)
 . ;
"RTN","IBCNBLA",120,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",121,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",122,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",123,0)
 . Q
"RTN","IBCNBLA",124,0)
LREJX ;
"RTN","IBCNBLA",125,0)
 S VALMBCK="R"
"RTN","IBCNBLA",126,0)
 Q
"RTN","IBCNBLA",127,0)
 ;
"RTN","IBCNBLA",128,0)
 ;
"RTN","IBCNBLA",129,0)
FASTEXIT ; sets flag signaling system should be exited
"RTN","IBCNBLA",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNBLA",131,0)
 S VALMBCK="Q"
"RTN","IBCNBLA",132,0)
 D FULL^VALM1
"RTN","IBCNBLA",133,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO" D ^DIR
"RTN","IBCNBLA",134,0)
 I +Y S IBFASTXT=1
"RTN","IBCNBLA",135,0)
 Q
"RTN","IBCNBLA",136,0)
 ;
"RTN","IBCNBLA",137,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNBLA",138,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNBLA",139,0)
 ;
"RTN","IBCNBLA",140,0)
 D FULL^VALM1 W !
"RTN","IBCNBLA",141,0)
 W !,"Select the item to sort the buffer records on the buffer list screen."
"RTN","IBCNBLA",142,0)
 S DIR(0)="SO^1:Patient Name;2:Insurance Company;3:Source of Information;4:Date Entered;5:Inpatients;6:Means Test;7:On Hold;8:Verified;9:eIV Status;10:Positive Response"
"RTN","IBCNBLA",143,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBCNSORT),"^",2)
"RTN","IBCNBLA",144,0)
 D ^DIR K DIR
"RTN","IBCNBLA",145,0)
 I 'Y G SELSORTX
"RTN","IBCNBLA",146,0)
 S IBCNSORT=Y_"^"_Y(0)
"RTN","IBCNBLA",147,0)
 ;
"RTN","IBCNBLA",148,0)
 ; ESG - 6/7/02 - SDD 5.1.1
"RTN","IBCNBLA",149,0)
 ; If the user wants to sort by symbol, then ask them which
"RTN","IBCNBLA",150,0)
 ; symbol should appear first and process accordingly.
"RTN","IBCNBLA",151,0)
 ;
"RTN","IBCNBLA",152,0)
 KILL IBCNSORT(1)       ; initialize the symbol sort array
"RTN","IBCNBLA",153,0)
 I +IBCNSORT=9 D  I $D(DIRUT)!('Y) G SELSORTX
"RTN","IBCNBLA",154,0)
 . ;
"RTN","IBCNBLA",155,0)
 . ; build the array of default sort order
"RTN","IBCNBLA",156,0)
 . S IBCNSORT(1,"+")=10
"RTN","IBCNBLA",157,0)
 . S IBCNSORT(1,"$")=15 ; Added dollar sign to sort criteria
"RTN","IBCNBLA",158,0)
 . S IBCNSORT(1,"-")=20
"RTN","IBCNBLA",159,0)
 . S IBCNSORT(1,"#")=25 ; Added pound to sort criteria
"RTN","IBCNBLA",160,0)
 . S IBCNSORT(1,"!")=30
"RTN","IBCNBLA",161,0)
 . S IBCNSORT(1," ")=40
"RTN","IBCNBLA",162,0)
 . S IBCNSORT(1,"?")=50
"RTN","IBCNBLA",163,0)
 . S IBCNSORT(1,"*")=60
"RTN","IBCNBLA",164,0)
 . ;
"RTN","IBCNBLA",165,0)
 . ; build the DIR array to ask the question
"RTN","IBCNBLA",166,0)
 . S DIR(0)="SO^"
"RTN","IBCNBLA",167,0)
 . F ST="1:+'A1","2:$'E1","3:-'D1","4:#'U1","5:!'B1","6: '","7:?'Q1" D  ; removed blanks ; replaced tilde w/apostrophe and added pound as option 3, IB*506 added $ as option 2 and adjusted all following.
"RTN","IBCNBLA",168,0)
 .. I ST="6: '" S STDES="No Problems Identified, Awaiting Electronic Processing" ; removed blanks
"RTN","IBCNBLA",169,0)
 .. E  S STDES=$$GET1^DIQ(365.15,$$FIND1^DIC(365.15,"","X",$P(ST,"'",2)),.01,"E")
"RTN","IBCNBLA",170,0)
 .. S DIR(0)=DIR(0)_$P(ST,"'")_"  "_STDES_$S(ST="7:?'Q1":"",1:";")
"RTN","IBCNBLA",171,0)
 . S DIR("A")="Which eIV Status do you want to appear first?"
"RTN","IBCNBLA",172,0)
 . S DIR("B")=1
"RTN","IBCNBLA",173,0)
 . S DIR("?",1)=" Please identify the eIV status that you want to appear first in the Insurance"
"RTN","IBCNBLA",174,0)
 . S DIR("?",2)=" Buffer listing.  The symbol appears immediately to the left of the patient"
"RTN","IBCNBLA",175,0)
 . S DIR("?",3)=" name in the list.  The default sort order for statuses is the same as"
"RTN","IBCNBLA",176,0)
 . S DIR("?",4)=" they are presented in this list below.  You may choose which status will appear"
"RTN","IBCNBLA",177,0)
 . S DIR("?",5)=" first in the list.  The remaining statuses will be sorted according to this"
"RTN","IBCNBLA",178,0)
 . S DIR("?",6)=" default sort order.  When sorting by eIV status, the secondary sort"
"RTN","IBCNBLA",179,0)
 . S DIR("?",7)=" is the entered date and the final sort is by patient name."
"RTN","IBCNBLA",180,0)
 . S DIR("?")=" "
"RTN","IBCNBLA",181,0)
 . D ^DIR K DIR
"RTN","IBCNBLA",182,0)
 . I $D(DIRUT) Q
"RTN","IBCNBLA",183,0)
 . I 'Y Q
"RTN","IBCNBLA",184,0)
 . ;
"RTN","IBCNBLA",185,0)
 . ; update the sort order array with the chosen symbol
"RTN","IBCNBLA",186,0)
 . S IBCNSORT(1,$E(Y(0)))=1
"RTN","IBCNBLA",187,0)
 . S $P(IBCNSORT,U,3)=$E(Y(0))
"RTN","IBCNBLA",188,0)
 . Q
"RTN","IBCNBLA",189,0)
 ;
"RTN","IBCNBLA",190,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNBLA",191,0)
 D INIT^IBCNBLL,HDR^IBCNBLL
"RTN","IBCNBLA",192,0)
 ;
"RTN","IBCNBLA",193,0)
SELSORTX ;
"RTN","IBCNBLA",194,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",195,0)
 Q
"RTN","IBCNBLA",196,0)
 ;
"RTN","IBCNBLA",197,0)
TGLSCRN(IBBUFDA) ; toggle process screen from policy to insurance info, glbal variable IBCNSCRN contains ins co chosen
"RTN","IBCNBLA",198,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA",199,0)
 D FULL^VALM1
"RTN","IBCNBLA",200,0)
 W !!,"Enter an Insurance Company to display the Groups/Plans for that company or ",!,"enter Return to display a patient's policies.",!!
"RTN","IBCNBLA",201,0)
 S IBCNSCRN=+$$SELINS^IBCNBU1
"RTN","IBCNBLA",202,0)
 ;
"RTN","IBCNBLA",203,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",204,0)
 Q
"RTN","IBCNBLA",205,0)
 ;
"RTN","IBCNBLA",206,0)
AMCHK ; This procedure is called from the main buffer screen as an action
"RTN","IBCNBLA",207,0)
 ; to check the insurance company names in the buffer file.  This will
"RTN","IBCNBLA",208,0)
 ; invoke another ListMan screen that shows a list of all insurance 
"RTN","IBCNBLA",209,0)
 ; company names that do not exist in File 36 either as names or as
"RTN","IBCNBLA",210,0)
 ; synonyms and also they do not exist in the Auto Match file.  These
"RTN","IBCNBLA",211,0)
 ; are bad insurance company names that need to be corrected before
"RTN","IBCNBLA",212,0)
 ; electronic insurance verification attempts can be made.
"RTN","IBCNBLA",213,0)
 ; esg - 6/20/02 - SDD 5.1.11 - Add an action on the main buffer
"RTN","IBCNBLA",214,0)
 ;       screen to call the buffer names check option
"RTN","IBCNBLA",215,0)
 ;
"RTN","IBCNBLA",216,0)
 D EN^IBCNEAMC
"RTN","IBCNBLA",217,0)
 S VALMBCK="R"
"RTN","IBCNBLA",218,0)
AMCHKX ;
"RTN","IBCNBLA",219,0)
 Q
"RTN","IBCNBLA",220,0)
 ;
"RTN","IBCNBLA1")
0^12^B100917255^B83105620
"RTN","IBCNBLA1",1,0)
IBCNBLA1 ;ALB/ARH - Ins Buffer: LM action calls (cont) ;1 Jun 97
"RTN","IBCNBLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,133,149,184,252,271,416,438,506**;21-MAR-94;Build 74
"RTN","IBCNBLA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLA1",4,0)
 ;
"RTN","IBCNBLA1",5,0)
ADDBUF ; add a new buffer entry protocol
"RTN","IBCNBLA1",6,0)
 N DIC,DIR,DIRUT,DUOUT,X,Y,IBIN,DFN,IBBUFDA,IBDATA,AMLIST,IBHELP
"RTN","IBCNBLA1",7,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",8,0)
 ;
"RTN","IBCNBLA1",9,0)
 ; Patient lookup
"RTN","IBCNBLA1",10,0)
 S DIC(0)="AEQM",DIC="^DPT(" D ^DIC Q:Y'>0  S DFN=+Y W !
"RTN","IBCNBLA1",11,0)
 ;
"RTN","IBCNBLA1",12,0)
INS ; Insurance company lookup
"RTN","IBCNBLA1",13,0)
 S DIR("A")="Insurance Company",DIR(0)="FO^1:30"
"RTN","IBCNBLA1",14,0)
 S DIR("?",1)="Please enter the name of the insurance company that provides coverage for this"
"RTN","IBCNBLA1",15,0)
 S DIR("?",2)="patient.  This response is a free text response, however, a partial insurance"
"RTN","IBCNBLA1",16,0)
 S DIR("?")="company name look-up is available here."
"RTN","IBCNBLA1",17,0)
 ; BHS - 10/15/03 - Removed quit condition when user enters a caret
"RTN","IBCNBLA1",18,0)
 ;                  during the insurance lister and only sets IBIN
"RTN","IBCNBLA1",19,0)
 ;                  when a valid selection is made
"RTN","IBCNBLA1",20,0)
 D ^DIR K DIR Q:$D(DIRUT)  S IBIN=Y,Y=$$DICINS^IBCNBU1(Y,1,10) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",21,0)
 ;
"RTN","IBCNBLA1",22,0)
 ; ESG - 6/17/02 - Usage of Auto Match file when adding a buffer entry
"RTN","IBCNBLA1",23,0)
 ;     - SDD 5.1.3
"RTN","IBCNBLA1",24,0)
 ;
"RTN","IBCNBLA1",25,0)
 ; BHS - 10/15/03 - Added condition to allow Auto Match lookup when user
"RTN","IBCNBLA1",26,0)
 ;                  entered a caret during the insurance lister
"RTN","IBCNBLA1",27,0)
 I Y=0!(Y<0),$$AMLOOK^IBCNEUT1(IBIN,1,.AMLIST) S Y=$$AMSEL^IBCNEUT1(.AMLIST) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",28,0)
 I '$$INPTTR(355.33,20.01,$$UP^XLFSTR(IBIN)) D  G INS
"RTN","IBCNBLA1",29,0)
 . D FIELD^DID(355.33,20.01,"","HELP-PROMPT","IBHELP")
"RTN","IBCNBLA1",30,0)
 . W !?5,IBHELP("HELP-PROMPT") Q
"RTN","IBCNBLA1",31,0)
 ;
"RTN","IBCNBLA1",32,0)
 S DIR(0)="Y",DIR("A")="Add a new Insurance Buffer entry for this patient and company",DIR("B")="YES" W ! D ^DIR K DIR Q:Y'=1
"RTN","IBCNBLA1",33,0)
 ;
"RTN","IBCNBLA1",34,0)
 S IBDATA(20.01)=$$UP^XLFSTR(IBIN),IBDATA(60.01)=DFN
"RTN","IBCNBLA1",35,0)
 S IBBUFDA=+$$ADDSTF^IBCNBES(1,DFN,.IBDATA) K IBDATA Q:'IBBUFDA
"RTN","IBCNBLA1",36,0)
 ;
"RTN","IBCNBLA1",37,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBLA1",38,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",39,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",40,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",41,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))   ; symbol
"RTN","IBCNBLA1",42,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",43,0)
 ;
"RTN","IBCNBLA1",44,0)
 D INIT^IBCNBLL,HDR^IBCNBLL S VALMBCK="R"
"RTN","IBCNBLA1",45,0)
 Q
"RTN","IBCNBLA1",46,0)
 ;
"RTN","IBCNBLA1",47,0)
INSEDIT(IBBUFDA) ; edit the Insurance data of a buffer entry
"RTN","IBCNBLA1",48,0)
 ;
"RTN","IBCNBLA1",49,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",50,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",51,0)
 ;
"RTN","IBCNBLA1",52,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",53,0)
 Q
"RTN","IBCNBLA1",54,0)
 ;
"RTN","IBCNBLA1",55,0)
GRPEDIT(IBBUFDA) ; edit the Group/Plan data of a buffer entry
"RTN","IBCNBLA1",56,0)
 ;
"RTN","IBCNBLA1",57,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",58,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",59,0)
 ;
"RTN","IBCNBLA1",60,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R"
"RTN","IBCNBLA1",61,0)
 Q
"RTN","IBCNBLA1",62,0)
 ;
"RTN","IBCNBLA1",63,0)
POLEDIT(IBBUFDA) ; edit the Subscriber Policy data of a buffer entry
"RTN","IBCNBLA1",64,0)
 ;
"RTN","IBCNBLA1",65,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",66,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",67,0)
 ;
"RTN","IBCNBLA1",68,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",69,0)
 Q
"RTN","IBCNBLA1",70,0)
 ;
"RTN","IBCNBLA1",71,0)
ALLEDIT(IBBUFDA) ; edit All data of a buffer entry
"RTN","IBCNBLA1",72,0)
 ;
"RTN","IBCNBLA1",73,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",74,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",75,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",76,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",77,0)
 ;
"RTN","IBCNBLA1",78,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",79,0)
 Q
"RTN","IBCNBLA1",80,0)
 ;
"RTN","IBCNBLA1",81,0)
CMPEDIT(IBBUFDA) ; display a buffer entry and an existing ins entry for comparison, allow edit of buffer data
"RTN","IBCNBLA1",82,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",83,0)
 N IBDA,IBPOLDA,IBGRPDA,IBINSDA,DIR,DIRUT,X,Y
"RTN","IBCNBLA1",84,0)
 ;
"RTN","IBCNBLA1",85,0)
 D FULL^VALM1
"RTN","IBCNBLA1",86,0)
 ;
"RTN","IBCNBLA1",87,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX") I 'IBDA G CMPQ
"RTN","IBCNBLA1",88,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G CMPQ
"RTN","IBCNBLA1",89,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",90,0)
 ;
"RTN","IBCNBLA1",91,0)
CEINS W @IOF
"RTN","IBCNBLA1",92,0)
 I 'IBINSDA W !,"No Insurance Company Selected for Comparison."
"RTN","IBCNBLA1",93,0)
 W ! D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBLA1",94,0)
 S DIR("?")="The Buffer entry's Insurance Company data may be edited or Return advances the display to the Group/Plan data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBLA1",95,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",96,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",97,0)
 I Y'="","EEee"[Y D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA) G CEINS
"RTN","IBCNBLA1",98,0)
 ;
"RTN","IBCNBLA1",99,0)
CEGRP W @IOF
"RTN","IBCNBLA1",100,0)
 I 'IBGRPDA W !,"No Insurance Group/Plan Selected for Comparison."
"RTN","IBCNBLA1",101,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBLA1",102,0)
 W ! D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBLA1",103,0)
 S DIR("?")="The Buffer entry's Group/Plan data may be edited or Return advances the display to the Patient Policy data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBLA1",104,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",105,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",106,0)
 I Y'="","EEee"[Y D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA) G CEGRP
"RTN","IBCNBLA1",107,0)
 ;
"RTN","IBCNBLA1",108,0)
CEPOL W @IOF
"RTN","IBCNBLA1",109,0)
 I 'IBPOLDA W !,"No Patient Policy Selected for Comparison."
"RTN","IBCNBLA1",110,0)
 W ! D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",111,0)
 S DIR("?")="The Buffer entry's Patient Policy data may be edited or return to the screen display.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBLA1",112,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",113,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",114,0)
 I Y'="","EEee"[Y D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA) G CEPOL
"RTN","IBCNBLA1",115,0)
 ;
"RTN","IBCNBLA1",116,0)
CELIG W @IOF
"RTN","IBCNBLA1",117,0)
 W ! D ELIG^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",118,0)
 ;
"RTN","IBCNBLA1",119,0)
CMPQ D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",120,0)
 Q
"RTN","IBCNBLA1",121,0)
 ;
"RTN","IBCNBLA1",122,0)
VERIFY(IBBUFDA) ; verify a buffer entry
"RTN","IBCNBLA1",123,0)
 ;
"RTN","IBCNBLA1",124,0)
 N DIR,DIRUT,X,Y,IBX,IBY Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",125,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",126,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",127,0)
 ;
"RTN","IBCNBLA1",128,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)),IBY="" I +$P(IBX,U,10) S IBY="Re-" W !!,"This entry already verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),"."
"RTN","IBCNBLA1",129,0)
 ;
"RTN","IBCNBLA1",130,0)
 S DIR("?")="Enter Yes if the coverage and information in this Buffer entry has been verified to be accurate." W !!
"RTN","IBCNBLA1",131,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")=IBY_"Verify the coverage in this buffer entry"
"RTN","IBCNBLA1",132,0)
 D ^DIR
"RTN","IBCNBLA1",133,0)
 I Y=1 D
"RTN","IBCNBLA1",134,0)
 . ; WCW - 04/11/2003 Clear out IIV Status when manually verified
"RTN","IBCNBLA1",135,0)
 . D CLEAR^IBCNEUT4(IBBUFDA,.IIVERR,1) K IIVERR
"RTN","IBCNBLA1",136,0)
 . K IBX S IBX(.1)="NOW",IBX(.11)=DUZ D EDITSTF^IBCNBES(IBBUFDA,.IBX)
"RTN","IBCNBLA1",137,0)
 . D INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED") W "  Coverage Verified ..." H 2
"RTN","IBCNBLA1",138,0)
 ;
"RTN","IBCNBLA1",139,0)
 Q
"RTN","IBCNBLA1",140,0)
 ;
"RTN","IBCNBLA1",141,0)
REJECT(IBBUFDA,DIRUT) ; process a reject and then delete a buffer entry
"RTN","IBCNBLA1",142,0)
 ; Output parameter DIRUT is optional and passed in by reference.  This
"RTN","IBCNBLA1",143,0)
 ; variable will be defined if the user enters a leading up-arrow,
"RTN","IBCNBLA1",144,0)
 ; times out, or enters a null response.  This is so the calling routine
"RTN","IBCNBLA1",145,0)
 ; can detect if the user did something other than say Yes or No to
"RTN","IBCNBLA1",146,0)
 ; this question.
"RTN","IBCNBLA1",147,0)
 ;
"RTN","IBCNBLA1",148,0)
 N DIR,X,Y,IBX Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",149,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",150,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",151,0)
 W !!,"This action will delete all insurance and patient specific data from a buffer ",!,"entry without first saving that data to the insurance files, leaving a stub ",!,"entry for reporting purposes.",!
"RTN","IBCNBLA1",152,0)
 ;
"RTN","IBCNBLA1",153,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",154,0)
 ;
"RTN","IBCNBLA1",155,0)
 S DIR("?")="Enter Yes to delete this buffer entry without saving any of it's data to the Insurance files."
"RTN","IBCNBLA1",156,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Reject this buffer entry (delete without saving to Insurance files)"
"RTN","IBCNBLA1",157,0)
 D ^DIR
"RTN","IBCNBLA1",158,0)
 I $D(DIRUT) G REJX
"RTN","IBCNBLA1",159,0)
 I Y=1 D REJECT^IBCNBAR(IBBUFDA) S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"REJECTED")
"RTN","IBCNBLA1",160,0)
REJX ;
"RTN","IBCNBLA1",161,0)
 Q
"RTN","IBCNBLA1",162,0)
 ;
"RTN","IBCNBLA1",163,0)
ACCEPT(IBBUFDA) ; process a buffer entry for acceptance
"RTN","IBCNBLA1",164,0)
 ;
"RTN","IBCNBLA1",165,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",166,0)
 N IBDA,IBINSDA,IBGRPDA,IBPOLDA,IBACCEPT S IBACCEPT=0
"RTN","IBCNBLA1",167,0)
 ;
"RTN","IBCNBLA1",168,0)
 D FULL^VALM1
"RTN","IBCNBLA1",169,0)
 ;
"RTN","IBCNBLA1",170,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX")
"RTN","IBCNBLA1",171,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G ACCPTQ
"RTN","IBCNBLA1",172,0)
 I +$P(IBDA,U,3),'$P(IBDA,U,2) W !!,"Error: the selected policy has no associated plan.  Can not continue." D WAIT^IBCNBUH G ACCPTQ
"RTN","IBCNBLA1",173,0)
 ;
"RTN","IBCNBLA1",174,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",175,0)
 S:'IBINSDA (IBGRPDA,IBPOLDA)=0 S:'IBGRPDA IBPOLDA=0
"RTN","IBCNBLA1",176,0)
 ;
"RTN","IBCNBLA1",177,0)
 I 'IBINSDA,'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) D  G ACCPTQ
"RTN","IBCNBLA1",178,0)
 . W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies."
"RTN","IBCNBLA1",179,0)
 . D WAIT^IBCNBUH
"RTN","IBCNBLA1",180,0)
 ;
"RTN","IBCNBLA1",181,0)
 S IBACCEPT=$$ACCEPT^IBCNBAA(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBLA1",182,0)
 ;
"RTN","IBCNBLA1",183,0)
ACCPTQ S VALMBCK="R" I +IBACCEPT S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"ACCEPTED")
"RTN","IBCNBLA1",184,0)
 Q
"RTN","IBCNBLA1",185,0)
 ;
"RTN","IBCNBLA1",186,0)
RESP(BUFF) ; List Response Report for Trace # associated with this entry
"RTN","IBCNBLA1",187,0)
 ; BUFF = buffer IEN
"RTN","IBCNBLA1",188,0)
 N NG,IBRSP,IBSTR,IBTRC,STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNBLA1",189,0)
 ; Reset to Full Screen Mode
"RTN","IBCNBLA1",190,0)
 D FULL^VALM1
"RTN","IBCNBLA1",191,0)
 S NG=0
"RTN","IBCNBLA1",192,0)
 I $G(BUFF)="" S NG=1
"RTN","IBCNBLA1",193,0)
 I 'NG S IBRSP=$O(^IBCN(365,"AF",BUFF,"")) I IBRSP="" S NG=1
"RTN","IBCNBLA1",194,0)
 I 'NG S IBSTR=$G(^IBCN(365,IBRSP,0)),IBTRC=$P(IBSTR,U,9) I IBTRC="" S NG=1
"RTN","IBCNBLA1",195,0)
 I NG W !!,"This entry does not have an associated eIV response." D PAUSE^VALM1 G RESPX
"RTN","IBCNBLA1",196,0)
 S STOP=0,IBCNERTN="IBCNERP1",IBCNESPC("TRCN")=IBTRC_U_IBRSP
"RTN","IBCNBLA1",197,0)
 D R100^IBCNERP1
"RTN","IBCNBLA1",198,0)
RESPX S VALMBCK="R"
"RTN","IBCNBLA1",199,0)
 Q
"RTN","IBCNBLA1",200,0)
INPTTR(FILE,FLD,X) ; Does value X pass input transform for file, field?
"RTN","IBCNBLA1",201,0)
 N XCUTE
"RTN","IBCNBLA1",202,0)
 S XCUTE=$$GET1^DID(FILE,FLD,,"INPUT TRANSFORM")
"RTN","IBCNBLA1",203,0)
 X XCUTE
"RTN","IBCNBLA1",204,0)
 Q $D(X)
"RTN","IBCNBLA1",205,0)
 ;
"RTN","IBCNBLA1",206,0)
ICB(IBBUFDA) ;called by ICB to update eIV status flag (symbol) in the insurance buffer entry
"RTN","IBCNBLA1",207,0)
 ;
"RTN","IBCNBLA1",208,0)
 N SYM,ERR
"RTN","IBCNBLA1",209,0)
 S SYM=$$GET1^DIQ(355.33,IBBUFDA,.12,"I") Q:'SYM
"RTN","IBCNBLA1",210,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" Q  ;don't update if manually verified
"RTN","IBCNBLA1",211,0)
 ; Determine if Expand Entry is allowed to update the eIV Status
"RTN","IBCNBLA1",212,0)
 I '$P($G(^IBE(365.15,SYM,0)),U,3) Q
"RTN","IBCNBLA1",213,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLA1",214,0)
 ; invoke the function that tries to find a valid payer
"RTN","IBCNBLA1",215,0)
 S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1)
"RTN","IBCNBLA1",216,0)
 ; If no errors, then remove the eIV Status
"RTN","IBCNBLA1",217,0)
 I 'ERR S ERR=$$SIDERR^IBCNBLE1(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLA1",218,0)
 I 'ERR D CLEAR^IBCNEUT4(IBBUFDA)
"RTN","IBCNBLA1",219,0)
 ; If errors found, then update with the new IIV Status
"RTN","IBCNBLA1",220,0)
 I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1))
"RTN","IBCNBLA1",221,0)
 Q
"RTN","IBCNBLA1",222,0)
 ;
"RTN","IBCNBLA1",223,0)
ESC(IBBUFDA,IBKEYS) ; Escalate to user with ability to edit Insurance/Group data
"RTN","IBCNBLA1",224,0)
 N DIE,DR,DA,DIR,X,Y,IBX,CODE Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",225,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",226,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",227,0)
 I IBKEYS D  G ESCX
"RTN","IBCNBLA1",228,0)
 . W !!,"This action can only be taken by users that do not have either the IB INSURANCE",!,"COMPANY EDIT security key or the IB GROUP PLAN EDIT security key.",!
"RTN","IBCNBLA1",229,0)
 . D PAUSE^VALM1
"RTN","IBCNBLA1",230,0)
 W !!,"This action will escalate the buffer entry to a level with the ability to edit",!,"insurance and/or group data.",!
"RTN","IBCNBLA1",231,0)
 ;
"RTN","IBCNBLA1",232,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",233,0)
 ;
"RTN","IBCNBLA1",234,0)
 S DIR("?")="Enter Yes to escalate this buffer entry."
"RTN","IBCNBLA1",235,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Escalate this buffer entry"
"RTN","IBCNBLA1",236,0)
 D ^DIR
"RTN","IBCNBLA1",237,0)
 I $D(DIRUT) G ESCX
"RTN","IBCNBLA1",238,0)
 I Y=1 D
"RTN","IBCNBLA1",239,0)
 . S DIE=355.33,DA=IBBUFDA,CODE="E1"
"RTN","IBCNBLA1",240,0)
 . S DR=".12///^S X=CODE"
"RTN","IBCNBLA1",241,0)
 . D ^DIE
"RTN","IBCNBLA1",242,0)
 . S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",243,0)
ESCX ;
"RTN","IBCNBLA1",244,0)
 Q
"RTN","IBCNBLL")
0^1^B138729075^B101908545
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438,435,506**;21-MAR-94;Build 74
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
 ; DBIA# 642 for call to $$LST^DGMTU
"RTN","IBCNBLL",6,0)
 ; DBIA# 4433 for call to $$SDAPI^SDAMA301
"RTN","IBCNBLL",7,0)
 ;
"RTN","IBCNBLL",8,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",9,0)
 N VIEW,AVIEW,DFLG,IBKEYS
"RTN","IBCNBLL",10,0)
 S VIEW=6,AVIEW=0 ; default to complete view ;IB*2*506/taz changed
"RTN","IBCNBLL",11,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",12,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",13,0)
 Q
"RTN","IBCNBLL",14,0)
 ;
"RTN","IBCNBLL",15,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",16,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",17,0)
 D INIT,HDR
"RTN","IBCNBLL",18,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",19,0)
 Q
"RTN","IBCNBLL",20,0)
 ;
"RTN","IBCNBLL",21,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",22,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",23,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",24,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active" ;IB*2*506/taz Only shows Verified and Active records.
"RTN","IBCNBLL",25,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active"  ;IB*2*506/taz Only shows Verified and N/Active records.
"RTN","IBCNBLL",26,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",27,0)
 I VIEW=4 S VALM("TITLE")="Failure Buffer",VALMSG="!Unable/Send"  ;IB*2*506/taz changed
"RTN","IBCNBLL",28,0)
 I VIEW=5 S VALM("TITLE")="e-Pharmacy Buffer",VALMSG="*Verified"     ; IB*2*435
"RTN","IBCNBLL",29,0)
 I VIEW=6 S VALM("TITLE")="Complete Buffer",VALMSG=""     ; IB*2*506/taz added
"RTN","IBCNBLL",30,0)
 Q
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",33,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",34,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",35,0)
 S IBKEYS=$$GETKEYS(DUZ) ;IB*2*506/taz user must have either IB INSURANCE EDIT or IB GROUP/PLAN EDIT in order to view entries without defined insurance company entries
"RTN","IBCNBLL",36,0)
 D BLD
"RTN","IBCNBLL",37,0)
 Q
"RTN","IBCNBLL",38,0)
 ;
"RTN","IBCNBLL",39,0)
HELP ;  list manager help
"RTN","IBCNBLL",40,0)
 D FULL^VALM1
"RTN","IBCNBLL",41,0)
 S VALMBCK="R"
"RTN","IBCNBLL",42,0)
 W @IOF
"RTN","IBCNBLL",43,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",44,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",45,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",46,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",47,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",48,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",49,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",50,0)
 W !
"RTN","IBCNBLL",51,0)
 ;D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",52,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",53,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",54,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",55,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",56,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",57,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",58,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",59,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",60,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",61,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",62,0)
 W !,"   X - e-Pharmacy"           ; IB*2*435
"RTN","IBCNBLL",63,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",64,0)
 ;
"RTN","IBCNBLL",65,0)
 I VIEW'=5 D     ; IB*2*435
"RTN","IBCNBLL",66,0)
 . W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",67,0)
 . W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",68,0)
 . Q
"RTN","IBCNBLL",69,0)
 ;
"RTN","IBCNBLL",70,0)
 I VIEW=1 D
"RTN","IBCNBLL",71,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",72,0)
 .W !,"      $ - Escalated active policy."
"RTN","IBCNBLL",73,0)
 .W !,"      * - Previously an active policy."
"RTN","IBCNBLL",74,0)
 .Q
"RTN","IBCNBLL",75,0)
 I VIEW=2 D
"RTN","IBCNBLL",76,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",77,0)
 .W !,"      * - Previously an not active policy."
"RTN","IBCNBLL",78,0)
 .Q
"RTN","IBCNBLL",79,0)
 I $F(",3,6,",VIEW) D
"RTN","IBCNBLL",80,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",81,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",82,0)
 .W !,"      $ - Escalated Active policy."
"RTN","IBCNBLL",83,0)
 .W !,"      * - Previously either an active or not active policy."
"RTN","IBCNBLL",84,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",85,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",86,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",87,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",88,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",89,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",90,0)
 .Q
"RTN","IBCNBLL",91,0)
 I VIEW=4 D
"RTN","IBCNBLL",92,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",93,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",94,0)
 .Q
"RTN","IBCNBLL",95,0)
 ;
"RTN","IBCNBLL",96,0)
 I VIEW=5 D      ; IB*2*435
"RTN","IBCNBLL",97,0)
 . W !,"      e-Pharmacy buffer entries are not applicable for e-IV processing."
"RTN","IBCNBLL",98,0)
 . Q
"RTN","IBCNBLL",99,0)
 ;
"RTN","IBCNBLL",100,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",101,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",102,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",103,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",104,0)
 W !
"RTN","IBCNBLL",105,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",106,0)
 W !!
"RTN","IBCNBLL",107,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",108,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",109,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",110,0)
 W !!
"RTN","IBCNBLL",111,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",112,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",113,0)
 Q
"RTN","IBCNBLL",114,0)
 ;
"RTN","IBCNBLL",115,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",116,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",117,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",118,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",119,0)
 Q
"RTN","IBCNBLL",120,0)
 ;
"RTN","IBCNBLL",121,0)
BLD ;  build screen display
"RTN","IBCNBLL",122,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",123,0)
 ;
"RTN","IBCNBLL",124,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",125,0)
 ;
"RTN","IBCNBLL",126,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",127,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",128,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",129,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",130,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",131,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG) I IBLINE="" S IBCNT=IBCNT-1 Q  ; IB*2*506/taz If line is null stop processing this entry.
"RTN","IBCNBLL",132,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",133,0)
 ;
"RTN","IBCNBLL",134,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",135,0)
 Q
"RTN","IBCNBLL",136,0)
 ;
"RTN","IBCNBLL",137,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",138,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",139,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",140,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",141,0)
 ;
"RTN","IBCNBLL",142,0)
 I 'IBKEYS,'$$ACTIVE(DFN) G BLDLNQ  ;IB*2*506/taz Only allow active insurance for users not holding IB INSURANCE EDIT or IB GROUP/PLAN EDIT keys
"RTN","IBCNBLL",143,0)
 ;
"RTN","IBCNBLL",144,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",145,0)
 ;
"RTN","IBCNBLL",146,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",147,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",148,0)
 ;
"RTN","IBCNBLL",149,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",150,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",151,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",152,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",153,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",154,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",155,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",156,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",157,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",158,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",159,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",160,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",161,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",162,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",163,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",164,0)
BLDLNQ ; IB*2*506/taz Tag added
"RTN","IBCNBLL",165,0)
 Q IBLINE
"RTN","IBCNBLL",166,0)
 ;
"RTN","IBCNBLL",167,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",168,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",169,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",170,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",171,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",172,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",173,0)
 Q
"RTN","IBCNBLL",174,0)
 ;
"RTN","IBCNBLL",175,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",176,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",177,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,MWNRFLG,MWNRIEN,X,Y
"RTN","IBCNBLL",178,0)
 S IBCNT=0
"RTN","IBCNBLL",179,0)
 ;
"RTN","IBCNBLL",180,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",181,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",182,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",183,0)
 ;
"RTN","IBCNBLL",184,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",185,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",186,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",187,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",188,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",189,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",190,0)
 ..;
"RTN","IBCNBLL",191,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",192,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",193,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",194,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",195,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",196,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",197,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",198,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",199,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",200,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",201,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",202,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",203,0)
 ..;
"RTN","IBCNBLL",204,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",205,0)
 ..;
"RTN","IBCNBLL",206,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",207,0)
 ..; get future appointments
"RTN","IBCNBLL",208,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",209,0)
 ..S DFLG="" ;,APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag ;IB*2*506 appointment data removed.
"RTN","IBCNBLL",210,0)
 ..S MWNRFLG=0 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",211,0)
 ..I $$INCL(VIEW,MWNRFLG,SYM,IB0) S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",212,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",213,0)
 ..Q
"RTN","IBCNBLL",214,0)
 .Q
"RTN","IBCNBLL",215,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",216,0)
 Q
"RTN","IBCNBLL",217,0)
 ;
"RTN","IBCNBLL",218,0)
INCL(VIEW,MCFLAG,SYM,IB0) ;
"RTN","IBCNBLL",219,0)
 N INCL,IENS,IBEBI
"RTN","IBCNBLL",220,0)
 S INCL=0
"RTN","IBCNBLL",221,0)
 I 'IBKEYS,(SYM'="+") G INCLQ ; If users don't have the required keys, they can only see current Positive Entries
"RTN","IBCNBLL",222,0)
 I VIEW=6 S INCL=1 G INCLQ  ;Include Everything  (Complete view)
"RTN","IBCNBLL",223,0)
 I VIEW=5,$P(IB0,U,17) S INCL=1 G INCLQ  ;Only e-Pharmacy on e-Pharmacy view (IB*2*435)
"RTN","IBCNBLL",224,0)
 I $P(IB0,U,17) G INCLQ  ;Exclude e-Pharmacy (IB*2*435)
"RTN","IBCNBLL",225,0)
 I VIEW=3,MCFLAG S INCL=1 G INCLQ ;Only Medicare View
"RTN","IBCNBLL",226,0)
 I MCFLAG G INCLQ  ;Exclude Medicare from Positive, Negative and Failure Views
"RTN","IBCNBLL",227,0)
 I VIEW=4,(SYM="!") S INCL=1 G INCLQ  ;Only failures on Failure view
"RTN","IBCNBLL",228,0)
 I VIEW=1,((SYM="+")!(SYM="$")) S INCL=1 G INCLQ  ;Positive View
"RTN","IBCNBLL",229,0)
 I VIEW=2,(SYM="-") S INCL=1 G INCLQ  ;Negative View
"RTN","IBCNBLL",230,0)
 I SYM="*" D  G INCLQ
"RTN","IBCNBLL",231,0)
 . ;find history in Response file for verified entries.
"RTN","IBCNBLL",232,0)
 . I $$GET1^DIQ(355.33,IBBUFDA,.15)="" S:(VIEW=1) INCL=1 Q  ;IIV PROCESSED DATE field is empty entry is positive
"RTN","IBCNBLL",233,0)
 . S IENS="1,"_$O(^IBCN(365,"AF",IBBUFDA,""))_","
"RTN","IBCNBLL",234,0)
 . ;the following line of code is necessary to check for both "eIV Eligibility Determination" and "IIV Eligibility Determination" (IB*2.0*506)
"RTN","IBCNBLL",235,0)
 . I $$GET1^DIQ(365.02,IENS,.06)["IV Eligibility Determination" Q
"RTN","IBCNBLL",236,0)
 . S IBEBI=$$GET1^DIQ(365.02,IENS,.02)  ;Eligibility/Benefits Info
"RTN","IBCNBLL",237,0)
 . I IBEBI=1 S:(VIEW=1) INCL=1 Q
"RTN","IBCNBLL",238,0)
 . I VIEW=2 S INCL=1 Q
"RTN","IBCNBLL",239,0)
INCLQ ;
"RTN","IBCNBLL",240,0)
 Q INCL
"RTN","IBCNBLL",241,0)
 ;
"RTN","IBCNBLL",242,0)
DATE(X) ;
"RTN","IBCNBLL",243,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",244,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",245,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",246,0)
 ;
"RTN","IBCNBLL",247,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",248,0)
 NEW IB0,SYM
"RTN","IBCNBLL",249,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",250,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",251,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",252,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",253,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",254,0)
 Q SYM
"RTN","IBCNBLL",255,0)
 ;
"RTN","IBCNBLL",256,0)
 ;
"RTN","IBCNBLL",257,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",258,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",259,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",260,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",261,0)
 ;
"RTN","IBCNBLL",262,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",263,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",264,0)
 ;
"RTN","IBCNBLL",265,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",266,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",267,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",268,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",269,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",270,0)
 ;
"RTN","IBCNBLL",271,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",272,0)
 ; the display array
"RTN","IBCNBLL",273,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",274,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",275,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",276,0)
 Q
"RTN","IBCNBLL",277,0)
 ;
"RTN","IBCNBLL",278,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",279,0)
 N CODSTR,I,SRCSTR,CODE
"RTN","IBCNBLL",280,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS^eRxEL"
"RTN","IBCNBLL",281,0)
 S CODSTR="I^D^V^P^E^H^M^R^C^X"
"RTN","IBCNBLL",282,0)
 S CODE=""
"RTN","IBCNBLL",283,0)
 I $G(SRC)'="" F I=1:1:10 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",284,0)
 Q CODE
"RTN","IBCNBLL",285,0)
 ;
"RTN","IBCNBLL",286,0)
GETKEYS(DUZ) ; 
"RTN","IBCNBLL",287,0)
 ;Make sure that user has the INSURANCE EDIT key and/or the GROUP/PLAN EDIT key.  User
"RTN","IBCNBLL",288,0)
 ;must have either key in order to see non_Positive Entries.
"RTN","IBCNBLL",289,0)
 N KEY1,KEY2
"RTN","IBCNBLL",290,0)
 S KEY1=$O(^DIC(19.1,"B","IB INSURANCE COMPANY EDIT","")) I KEY1 S KEY1=$D(^VA(200,DUZ,51,KEY1))
"RTN","IBCNBLL",291,0)
 S KEY2=$O(^DIC(19.1,"B","IB GROUP PLAN EDIT","")) I KEY2 S KEY2=$D(^VA(200,DUZ,51,KEY2))
"RTN","IBCNBLL",292,0)
 Q KEY1!KEY2
"RTN","IBCNBLL",293,0)
 ;
"RTN","IBCNBLL",294,0)
ACTIVE(DFN) ;Check for active insurance
"RTN","IBCNBLL",295,0)
 N IBINSCO
"RTN","IBCNBLL",296,0)
 D ALL^IBCNS1(DFN,"IBINSCO",1,DT,0)
"RTN","IBCNBLL",297,0)
 Q +$G(IBINSCO(0))
"RTN","IBCNEDE2")
0^3^B63879348^B60928994
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416,438,506**;21-MAR-94;Build 74
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT,GIEN
"RTN","IBCNEDE2",16,0)
 N APTDT,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF,PATID
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT,VDATE
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS,NUM,MCAREFLG
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",32,0)
 ;
"RTN","IBCNEDE2",33,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",34,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",35,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",36,0)
 . ;
"RTN","IBCNEDE2",37,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",38,0)
 . ;
"RTN","IBCNEDE2",39,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",40,0)
 ;
"RTN","IBCNEDE2",41,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",42,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",43,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",44,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",45,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",46,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",47,0)
 ;
"RTN","IBCNEDE2",48,0)
 ;
"RTN","IBCNEDE2",49,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",50,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",51,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",52,0)
 . ;
"RTN","IBCNEDE2",53,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",54,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",55,0)
 .. ;
"RTN","IBCNEDE2",56,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",57,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",58,0)
 .. ;
"RTN","IBCNEDE2",59,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",60,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",61,0)
 ... ;
"RTN","IBCNEDE2",62,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",63,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",64,0)
 ... ;
"RTN","IBCNEDE2",65,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",66,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",67,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",68,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",69,0)
 ... ;
"RTN","IBCNEDE2",70,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",71,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",72,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",73,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",74,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",75,0)
 ... ;
"RTN","IBCNEDE2",76,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",77,0)
 ... ;
"RTN","IBCNEDE2",78,0)
 ... K ACTINS
"RTN","IBCNEDE2",79,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",80,0)
 ... ;
"RTN","IBCNEDE2",81,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",82,0)
 ... ;
"RTN","IBCNEDE2",83,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",84,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",85,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",86,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",87,0)
 ... . ; exclude policies that have been verified within "freshness days"
"RTN","IBCNEDE2",88,0)
 ... . S VDATE=$P($G(ACTINS(INREC,1)),U,3)
"RTN","IBCNEDE2",89,0)
 ... . I VDATE'="",SRVICEDT'>$$FMADD^XLFDT(VDATE,FRESHDAY) Q
"RTN","IBCNEDE2",90,0)
 ... . ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",91,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",92,0)
 ... . ; exclude pharmacy policies
"RTN","IBCNEDE2",93,0)
 ... . I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",94,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",95,0)
 ... . I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q
"RTN","IBCNEDE2",96,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",97,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",98,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",99,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",100,0)
 ... . ;
"RTN","IBCNEDE2",101,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",102,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",103,0)
 ... . ;
"RTN","IBCNEDE2",104,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",105,0)
 ... . ;
"RTN","IBCNEDE2",106,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",107,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",108,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",109,0)
 ... . ;
"RTN","IBCNEDE2",110,0)
 ... . ; If Payer is Nationally Inactive create an Insurance Buffer record w/blank SYMBOL & quit. - IB*2.0*506
"RTN","IBCNEDE2",111,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) D  Q
"RTN","IBCNEDE2",112,0)
 ... .. S SYMBOL=""
"RTN","IBCNEDE2",113,0)
 ... .. I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",114,0)
 ... .. Q
"RTN","IBCNEDE2",115,0)
 ... . ;
"RTN","IBCNEDE2",116,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",117,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",118,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",119,0)
 ... . ;
"RTN","IBCNEDE2",120,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",121,0)
 ... . ;  date range
"RTN","IBCNEDE2",122,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",123,0)
 ... . ;
"RTN","IBCNEDE2",124,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",125,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",126,0)
 ... . ;
"RTN","IBCNEDE2",127,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",128,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",129,0)
 ... . ;
"RTN","IBCNEDE2",130,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",131,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",132,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",133,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",134,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",135,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",136,0)
 ... . ;
"RTN","IBCNEDE2",137,0)
 ... . S SID=""
"RTN","IBCNEDE2",138,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",139,0)
 ... . I SIDACT=4 D SET("","",PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",140,0)
 ... . Q
"RTN","IBCNEDE2",141,0)
 ... Q
"RTN","IBCNEDE2",142,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",143,0)
 Q
"RTN","IBCNEDE2",144,0)
 ;
"RTN","IBCNEDE2",145,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",146,0)
 S OK=1
"RTN","IBCNEDE2",147,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",148,0)
 Q
"RTN","IBCNEDE2",149,0)
 ;
"RTN","IBCNEDE2",150,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",151,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",152,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",153,0)
 S OK=1
"RTN","IBCNEDE2",154,0)
 Q
"RTN","IBCNEDE2",155,0)
 ;
"RTN","IBCNEDE2",156,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",157,0)
 D INP^VADPT
"RTN","IBCNEDE2",158,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",159,0)
 K VAIN
"RTN","IBCNEDE2",160,0)
 S OK=1
"RTN","IBCNEDE2",161,0)
 Q
"RTN","IBCNEDE2",162,0)
 ;
"RTN","IBCNEDE2",163,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",164,0)
 ;
"RTN","IBCNEDE2",165,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",166,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",167,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",168,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",169,0)
 ;
"RTN","IBCNEDE2",170,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",171,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",172,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",173,0)
 ;
"RTN","IBCNEDE2",174,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",175,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",176,0)
 ;
"RTN","IBCNEDE2",177,0)
 Q
"RTN","IBCNEDE2",178,0)
 ;
"RTN","IBCNEDE2",179,0)
ERRMSG ; Send a message indicating an extract error has occured
"RTN","IBCNEDE2",180,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",181,0)
 ;
"RTN","IBCNEDE2",182,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",183,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",184,0)
 ;
"RTN","IBCNEDE2",185,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",186,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",187,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",188,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",189,0)
 S MSG(4)=""
"RTN","IBCNEDE2",190,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",191,0)
 S MSG(6)=""
"RTN","IBCNEDE2",192,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",193,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",194,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",195,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",196,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",197,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",198,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",199,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",200,0)
 ;
"RTN","IBCNEDE2",201,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",202,0)
 ;
"RTN","IBCNEDE2",203,0)
 Q
"RTN","IBCNEDE2",204,0)
 ;
"RTN","IBCNEDE2",205,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",206,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",207,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",208,0)
 N X1,X2
"RTN","IBCNEDE2",209,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",210,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",211,0)
 Q 0
"RTN","IBCNEDE6")
0^20^B33816621^B32414593
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416,497,506**;21-MAR-94;Build 74
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
 ; IB*2*416 removed the ability to perform Identification inquiries.
"RTN","IBCNEDE6",8,0)
 ; However, this code is being left as is for future changes.
"RTN","IBCNEDE6",9,0)
 ;
"RTN","IBCNEDE6",10,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",11,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",12,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; IB patch 416 discontinued the practice of using eIV for fishing for insurance
"RTN","IBCNEDE6",15,0)
 ; using the "No Insurance" extract or by doing Identification inquiries.
"RTN","IBCNEDE6",16,0)
 Q 0
"RTN","IBCNEDE6",17,0)
 ;
"RTN","IBCNEDE6",18,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",19,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",20,0)
 ;
"RTN","IBCNEDE6",21,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",22,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",23,0)
 ; extract was created.
"RTN","IBCNEDE6",24,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",25,0)
 ;
"RTN","IBCNEDE6",26,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",27,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",28,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",29,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",30,0)
 ;
"RTN","IBCNEDE6",31,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",32,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",33,0)
 ;
"RTN","IBCNEDE6",34,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",35,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",36,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. ;Check for Medicaid
"RTN","IBCNEDE6",39,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",42,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",43,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",44,0)
 .. ;
"RTN","IBCNEDE6",45,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",46,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",47,0)
 .. ;
"RTN","IBCNEDE6",48,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",51,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",52,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",53,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",54,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",55,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",56,0)
 .. ;
"RTN","IBCNEDE6",57,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",58,0)
 .. ;
"RTN","IBCNEDE6",59,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",60,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",61,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",62,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",64,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",65,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",66,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",67,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",68,0)
 ... ; 
"RTN","IBCNEDE6",69,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",70,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",71,0)
 K SIDARRAY
"RTN","IBCNEDE6",72,0)
INACX ;
"RTN","IBCNEDE6",73,0)
 Q FOUND
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",76,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",77,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",78,0)
 ;
"RTN","IBCNEDE6",79,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",80,0)
 Q
"RTN","IBCNEDE6",81,0)
 ;
"RTN","IBCNEDE6",82,0)
 N FRESH
"RTN","IBCNEDE6",83,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",84,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",87,0)
 ; it is.
"RTN","IBCNEDE6",88,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",89,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",90,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",91,0)
 ;
"RTN","IBCNEDE6",92,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE6",93,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 Q
"RTN","IBCNEDE6",96,0)
 ;
"RTN","IBCNEDE6",97,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",98,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",99,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",100,0)
 ; Output:
"RTN","IBCNEDE6",101,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",102,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",103,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",104,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",105,0)
 ;
"RTN","IBCNEDE6",106,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",107,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",108,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",109,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",110,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",111,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",112,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",113,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",114,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",115,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",116,0)
 . ; If zero and Service Date is less than today, reset to today
"RTN","IBCNEDE6",117,0)
 . I PDAYS=0&(SVDT<DT) S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",118,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",119,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",120,0)
 . ;  date for the payer
"RTN","IBCNEDE6",121,0)
 . I PDAYS,(SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS)) D
"RTN","IBCNEDE6",122,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS),EDTFLG=1
"RTN","IBCNEDE6",123,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",124,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",125,0)
 . ; If zero and Service Date is greater than today, reset to today
"RTN","IBCNEDE6",126,0)
 . I FDAYS=0&(SVDT>DT) S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",127,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",128,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",129,0)
 . ;  date for the payer
"RTN","IBCNEDE6",130,0)
 . I FDAYS,(SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS)) D
"RTN","IBCNEDE6",131,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS),EDTFLG=1
"RTN","IBCNEDE6",132,0)
 ;
"RTN","IBCNEDE6",133,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",134,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",135,0)
 ;
"RTN","IBCNEDE6",136,0)
 Q
"RTN","IBCNEDE6",137,0)
 ;
"RTN","IBCNEDE6",138,0)
BLANKTQ(SRVICEDT,FRESHDT,YDAYS,IBCNCNT) ; 
"RTN","IBCNEDE6",139,0)
 ; This tag is only called from PROCESS^IBCNEDE4 
"RTN","IBCNEDE6",140,0)
 ; No new records were created in file 365.1 for this DFN.
"RTN","IBCNEDE6",141,0)
 ; Need to check if an inquiry for any payer exists for this DFN within
"RTN","IBCNEDE6",142,0)
 ; the freshness period.  If it doesn't exist create a new blank inquiry
"RTN","IBCNEDE6",143,0)
 ;
"RTN","IBCNEDE6",144,0)
 ; Input
"RTN","IBCNEDE6",145,0)
 ;    SRVICEDT - Service Date
"RTN","IBCNEDE6",146,0)
 ;    FRESHDT - Freshness Date
"RTN","IBCNEDE6",147,0)
 ;    YDAYS - 
"RTN","IBCNEDE6",148,0)
 ;    IBCNCNT - updated - Counter for the extract
"RTN","IBCNEDE6",149,0)
 ;
"RTN","IBCNEDE6",150,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",151,0)
 ;          - blank or otherwise
"RTN","IBCNEDE6",152,0)
 Q
"RTN","IBCNEDE6",153,0)
 ;
"RTN","IBCNEDE6",154,0)
 I $$TFL^IBCNEDE6(DFN)=0 Q
"RTN","IBCNEDE6",155,0)
 ;
"RTN","IBCNEDE6",156,0)
 N PAYER,DATA1,DATA2,TQIEN
"RTN","IBCNEDE6",157,0)
 ;
"RTN","IBCNEDE6",158,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE6",159,0)
 ;
"RTN","IBCNEDE6",160,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE6",161,0)
 ;  date range
"RTN","IBCNEDE6",162,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",163,0)
 ;
"RTN","IBCNEDE6",164,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",165,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",166,0)
 ;
"RTN","IBCNEDE6",167,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE6",168,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS,1) G BLANKXT
"RTN","IBCNEDE6",169,0)
 ;
"RTN","IBCNEDE6",170,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",171,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",172,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE6",173,0)
 ;
"RTN","IBCNEDE6",174,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE6",175,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE6",176,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE6",177,0)
 ;
"RTN","IBCNEDE6",178,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE6",179,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",180,0)
 ;
"RTN","IBCNEDE6",181,0)
BLANKXT ;
"RTN","IBCNEDE6",182,0)
 Q
"RTN","IBCNEDE6",183,0)
 ;
"RTN","IBCNEDE6",184,0)
TFL(DFN) ; Examines treating facility list,
"RTN","IBCNEDE6",185,0)
 ; value returned is 1 if patient has visited at least one other site
"RTN","IBCNEDE6",186,0)
 N IBC,IBZ,IBS
"RTN","IBCNEDE6",187,0)
 D TFL^VAFCTFU1(.IBZ,DFN) Q:-$G(IBZ(1))=1 0
"RTN","IBCNEDE6",188,0)
 S IBS=+$P($$SITE^VASITE,"^",3),(IBZ,IBC)=0
"RTN","IBCNEDE6",189,0)
 ; Look for remote facilities of type VAMC:
"RTN","IBCNEDE6",190,0)
 F  S IBZ=$O(IBZ(IBZ)) Q:IBZ<1  I +IBZ(IBZ)>0,+IBZ(IBZ)'=IBS,$P(IBZ(IBZ),U,5)="VAMC" S IBC=1 Q
"RTN","IBCNEDE6",191,0)
 Q IBC
"RTN","IBCNEDEP")
0^4^B83976754^B86075479
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,506**;21-MAR-94;Build 74
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    RETRYFLG = determines if a Transmitted message can be resent
"RTN","IBCNEDEP",11,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",12,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",13,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",15,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",16,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",17,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",18,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",19,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",20,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",21,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",22,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",23,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",24,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",25,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",26,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",27,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",28,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",29,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",30,0)
 ;
"RTN","IBCNEDEP",31,0)
EN ;  Entry point
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
 ;  Start processing of data
"RTN","IBCNEDEP",34,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",35,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",36,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",37,0)
 ;
"RTN","IBCNEDEP",38,0)
 S C1CODE=$O(^IBE(365.15,"B","C1",""))
"RTN","IBCNEDEP",39,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",40,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",41,0)
 S RETR=+$P(IBCNEP,U,6),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",43,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",44,0)
 S RETRYFLG=$P(IBCNEP,U,26)        ;set value to (#350.9, 51.26) - IB*2.0*506
"RTN","IBCNEDEP",45,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",46,0)
 ; Statuses
"RTN","IBCNEDEP",47,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",48,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",49,0)
 ;   4 = Hold
"RTN","IBCNEDEP",50,0)
 ;   6 = Retry
"RTN","IBCNEDEP",51,0)
 ;
"RTN","IBCNEDEP",52,0)
 ; If the status is 'HOLD' is this a 'Retry'?   -  IB*2.0*506
"RTN","IBCNEDEP",53,0)
 ;  DO HLD   ; this is not to be called unless the status of HOLD is reinstated...see HLD tag
"RTN","IBCNEDEP",54,0)
 ;  below and the code within ERROR^IBCNEHL3
"RTN","IBCNEDEP",55,0)
 ;
"RTN","IBCNEDEP",56,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",57,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",58,0)
 ;
"RTN","IBCNEDEP",59,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",60,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",61,0)
 S IEN=""
"RTN","IBCNEDEP",62,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",63,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",64,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",65,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",66,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",67,0)
 . ;
"RTN","IBCNEDEP",68,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",69,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",70,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",71,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",72,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",73,0)
 . ;
"RTN","IBCNEDEP",74,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",75,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",76,0)
 . ;
"RTN","IBCNEDEP",77,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",78,0)
 . I RETRYFLG="Y" D  Q     ; IB*2.0*506
"RTN","IBCNEDEP",79,0)
 .. ;
"RTN","IBCNEDEP",80,0)
 .. I '$$PYRACTV^IBCNEDE7(PAYR) Q    ; If Payer is not Nationally Active skip record  -  IB*2.0*506
"RTN","IBCNEDEP",81,0)
 .. ;
"RTN","IBCNEDEP",82,0)
 .. D SST^IBCNEUT2(IEN,6)    ; mark TQ entry status as 'retry'
"RTN","IBCNEDEP",83,0)
 .. Q
"RTN","IBCNEDEP",84,0)
 . ;
"RTN","IBCNEDEP",85,0)
 . D SST^IBCNEUT2(IEN,5)     ; if RETRYFLG=NO set TQ record to 'communication faliure'
"RTN","IBCNEDEP",86,0)
 . ;
"RTN","IBCNEDEP",87,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",88,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",89,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",90,0)
 . ;
"RTN","IBCNEDEP",91,0)
 . ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",92,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",93,0)
 . ;
"RTN","IBCNEDEP",94,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",95,0)
 . ;
"RTN","IBCNEDEP",96,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",97,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",98,0)
 ;
"RTN","IBCNEDEP",99,0)
 ; Exit for stop request
"RTN","IBCNEDEP",100,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",101,0)
 ;
"RTN","IBCNEDEP",102,0)
RET ;  If status is 'Retry'     ; retries only exist if the RETRYFLG=YES - IB*2.0*506
"RTN","IBCNEDEP",103,0)
 S IEN=""
"RTN","IBCNEDEP",104,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",105,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",106,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",107,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",108,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",109,0)
 . ;
"RTN","IBCNEDEP",110,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",111,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",112,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",113,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",114,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",115,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",116,0)
 . ;
"RTN","IBCNEDEP",117,0)
 . ;  If retries are finished, set to communication failure  - IB*2.0*506
"RTN","IBCNEDEP",118,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",119,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",120,0)
 .. ;
"RTN","IBCNEDEP",121,0)
 .. ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",122,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",123,0)
 .. ;
"RTN","IBCNEDEP",124,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",125,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",126,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",127,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",128,0)
 .. ;
"RTN","IBCNEDEP",129,0)
 .. ;I VERID="V" D CERE^IBCNEDEQ      ; removed IB*2.0*506
"RTN","IBCNEDEP",130,0)
 . ; If generating retry, set eIV status to comm failure (5) for
"RTN","IBCNEDEP",131,0)
 . ; remaining related responses
"RTN","IBCNEDEP",132,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",133,0)
 ;
"RTN","IBCNEDEP",134,0)
 ; Exit for stop request
"RTN","IBCNEDEP",135,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",136,0)
 ;
"RTN","IBCNEDEP",137,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",138,0)
 ;
"RTN","IBCNEDEP",139,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",140,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",141,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",142,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",143,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",144,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",145,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",146,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",147,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",148,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",149,0)
 ... S VNUM=4
"RTN","IBCNEDEP",150,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",151,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",152,0)
 ... S VNUM=1
"RTN","IBCNEDEP",153,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",154,0)
 ;
"RTN","IBCNEDEP",155,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",156,0)
 ;  or identifications
"RTN","IBCNEDEP",157,0)
 N IHCNT
"RTN","IBCNEDEP",158,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",159,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",160,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",161,0)
 . ;D ID
"RTN","IBCNEDEP",162,0)
 ;
"RTN","IBCNEDEP",163,0)
EXIT ;  Finish
"RTN","IBCNEDEP",164,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",165,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",166,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",167,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",168,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RETRYFLG,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",169,0)
 K ZMID,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",170,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA,PATID,C1CODE
"RTN","IBCNEDEP",171,0)
 Q
"RTN","IBCNEDEP",172,0)
 ;
"RTN","IBCNEDEP",173,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",174,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",175,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",176,0)
 ;
"RTN","IBCNEDEP",177,0)
 S DFN=""
"RTN","IBCNEDEP",178,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",179,0)
 . ;
"RTN","IBCNEDEP",180,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",181,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",182,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",183,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",184,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",185,0)
 . ;
"RTN","IBCNEDEP",186,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",187,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",188,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",189,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",190,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",191,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",192,0)
 .. ;
"RTN","IBCNEDEP",193,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",194,0)
 .. ;
"RTN","IBCNEDEP",195,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",196,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",197,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",198,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",199,0)
 .. ;
"RTN","IBCNEDEP",200,0)
 .. ;  If not successful
"RTN","IBCNEDEP",201,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",202,0)
 .. ;  If successful
"RTN","IBCNEDEP",203,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",204,0)
 .. I BNDL D
"RTN","IBCNEDEP",205,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",206,0)
 ;
"RTN","IBCNEDEP",207,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",208,0)
 Q
"RTN","IBCNEDEP",209,0)
 ;
"RTN","IBCNEDEP",210,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",211,0)
 ;
"RTN","IBCNEDEP",212,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",213,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",214,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",215,0)
 ;
"RTN","IBCNEDEP",216,0)
 S DFN=""
"RTN","IBCNEDEP",217,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",218,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",219,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",220,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",221,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",222,0)
 . ;
"RTN","IBCNEDEP",223,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",224,0)
 . ;
"RTN","IBCNEDEP",225,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",226,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",227,0)
 . ;
"RTN","IBCNEDEP",228,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",229,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",230,0)
 .. D PROC
"RTN","IBCNEDEP",231,0)
 .. ;
"RTN","IBCNEDEP",232,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",233,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",234,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",235,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",236,0)
 .. ;
"RTN","IBCNEDEP",237,0)
 .. ;  If not successful
"RTN","IBCNEDEP",238,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",239,0)
 .. ;
"RTN","IBCNEDEP",240,0)
 .. ;  If successful
"RTN","IBCNEDEP",241,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",242,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",243,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",244,0)
 ;
"RTN","IBCNEDEP",245,0)
 Q
"RTN","IBCNEDEP",246,0)
 ;
"RTN","IBCNEDEP",247,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",248,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",249,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",250,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",251,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",252,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",253,0)
 S FRDT=$P(TRANSR,U,17),PATID=$P(TRANSR,U,19)
"RTN","IBCNEDEP",254,0)
 ;
"RTN","IBCNEDEP",255,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",256,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",257,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",258,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",259,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",260,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",261,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",262,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",263,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",264,0)
 . S CNT=CNT+1 I TOT=0 S TOT=1
"RTN","IBCNEDEP",265,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",266,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",267,0)
 ;
"RTN","IBCNEDEP",268,0)
 ;  Build multi-field NTE segment
"RTN","IBCNEDEP",269,0)
 D NTE^IBCNEHLQ
"RTN","IBCNEDEP",270,0)
 ;  If build successful
"RTN","IBCNEDEP",271,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",272,0)
 K NTE
"RTN","IBCNEDEP",273,0)
 Q
"RTN","IBCNEDEP",274,0)
 ;
"RTN","IBCNEDEP",275,0)
 ; The tag HLD was found at the top of this routine.  It was moved
"RTN","IBCNEDEP",276,0)
 ; to its own procedure because it isn't needed anymore at this time.
"RTN","IBCNEDEP",277,0)
 ; Responses will not have the status of HOLD starting with patch IB*2.0*506.
"RTN","IBCNEDEP",278,0)
 ; If HOLD is reinstated, then the logic below must be rewritten for the
"RTN","IBCNEDEP",279,0)
 ; appropriate retry logic at that time.
"RTN","IBCNEDEP",280,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",281,0)
 Q  ; Quit added as safety valve
"RTN","IBCNEDEP",282,0)
 ;S IEN=""
"RTN","IBCNEDEP",283,0)
 ;F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",284,0)
 ;. ; Update count for periodic check
"RTN","IBCNEDEP",285,0)
 ;. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",286,0)
 ;. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",287,0)
 ;. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",288,0)
 ;. ;
"RTN","IBCNEDEP",289,0)
 ;. S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",290,0)
 ;. ;
"RTN","IBCNEDEP",291,0)
 ;. ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",292,0)
 ;. ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",293,0)
 ;. ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",294,0)
 ;. I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",295,0)
 ;. ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",296,0)
 ;. ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",297,0)
 ;.. ;
"RTN","IBCNEDEP",298,0)
 ;.. D SST^IBCNEUT2(IEN,6)     ; set TQ status to 'retry'
"RTN","IBCNEDEP",299,0)
 Q
"RTN","IBCNEDST")
0^16^B47395616^B52803166
"RTN","IBCNEDST",1,0)
IBCNEDST ;Harris/YMG - HL7 Registration Message Statistics ;07-MAR-2013
"RTN","IBCNEDST",2,0)
 ;;2.0;INTEGRATED BILLING;**497,506**;21-MAR-94;Build 74
"RTN","IBCNEDST",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDST",4,0)
 ;
"RTN","IBCNEDST",5,0)
 Q
"RTN","IBCNEDST",6,0)
GETSTAT() ; get statistical data
"RTN","IBCNEDST",7,0)
 ; Statistics are to match the eIV Statistical Report (^IBCNEPR8)
"RTN","IBCNEDST",8,0)
 ;
"RTN","IBCNEDST",9,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",10,0)
 ;
"RTN","IBCNEDST",11,0)
 ;   piece 1  - Number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",12,0)
 ;   piece 2  - Number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",13,0)
 ;   piece 3  - Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",14,0)
 ;   piece 4  - Number of queued 270 inquiries
"RTN","IBCNEDST",15,0)
 ;   piece 5  - Number of deferred 270 inquiries
"RTN","IBCNEDST",16,0)
 ;   piece 6  - Number of insurance companies with no National ID
"RTN","IBCNEDST",17,0)
 ;   piece 7  - Number of locally disabled payers
"RTN","IBCNEDST",18,0)
 ;   piece 8  - Number of Verified (*) buffer entries
"RTN","IBCNEDST",19,0)
 ;   piece 9  - Number of buffer entries indicated as having Active insurance (+)
"RTN","IBCNEDST",20,0)
 ;   piece 10 - Number of buffer entries indicated as having Inactive insurance (-)
"RTN","IBCNEDST",21,0)
 ;   piece 11 - Number of buffer entries indicated as policy status undetermined (#)
"RTN","IBCNEDST",22,0)
 ;   piece 12 - Number of buffer entries indicated as requiring correction before 270 can be sent (!)
"RTN","IBCNEDST",23,0)
 ;   piece 13 - Number of buffer entries awaiting processing
"RTN","IBCNEDST",24,0)
 ;   piece 14 - Number of buffer entries indicated as waiting for a 271 response (?)
"RTN","IBCNEDST",25,0)
 ;   piece 15 - Number of buffer entries entered by manual process with no further processing (blank)
"RTN","IBCNEDST",26,0)
 ;   piece 16 - Number of unlinked insurance companies
"RTN","IBCNEDST",27,0)
 ;
"RTN","IBCNEDST",28,0)
 N BUFINFO,PAYINFO,RESPINFO,STARTDTTM,TQINFO,STATS
"RTN","IBCNEDST",29,0)
 ;
"RTN","IBCNEDST",30,0)
 S STARTDTTM=$$FMADD^XLFDT($$NOW^XLFDT(),,-24) ; set to current date/time - 24 hours
"RTN","IBCNEDST",31,0)
 S RESPINFO=$$RESPINFO(STARTDTTM) ; get data from file 365
"RTN","IBCNEDST",32,0)
 S TQINFO=$$TQINFO() ; get data from file 365.1
"RTN","IBCNEDST",33,0)
 S PAYINFO=$$PAYINFO() ; get data from file 36 & 365.12
"RTN","IBCNEDST",34,0)
 S BUFINFO=$$BUFINFO() ; get data from file 355.33
"RTN","IBCNEDST",35,0)
 S STATS=RESPINFO_U_TQINFO_U_$P(PAYINFO,U)_U_$P(PAYINFO,U,2)
"RTN","IBCNEDST",36,0)
 S STATS=STATS_U_BUFINFO_U_$P(PAYINFO,U,3)
"RTN","IBCNEDST",37,0)
 Q STATS
"RTN","IBCNEDST",38,0)
 ;
"RTN","IBCNEDST",39,0)
RESPINFO(DTTM) ; get data from IIV response file (file 365)
"RTN","IBCNEDST",40,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",41,0)
 ;
"RTN","IBCNEDST",42,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",43,0)
 ;   piece 1: number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",44,0)
 ;   piece 2: number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",45,0)
 ;   piece 3: Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",46,0)
 ;
"RTN","IBCNEDST",47,0)
 N AUTOUPD,DATE,DFN,EBIEN,IEN,INSNAMES,INSTYPE,INQP,POLICY,PAYER,PAYERWNR,PYRNAME,SECINS,Z
"RTN","IBCNEDST",48,0)
 S (AUTOUPD,SECINS)=0
"RTN","IBCNEDST",49,0)
 S PAYERWNR=$P($G(^IBE(350.9,1,51)),U,25) ; get Medicare payer ien from IB site parameters
"RTN","IBCNEDST",50,0)
 S DATE=DTTM-0.000001 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",51,0)
 .; if response received within the last 24 hrs, check if it auto-updated insurance policy
"RTN","IBCNEDST",52,0)
 .S PAYER=0 F  S PAYER=$O(^IBCN(365,"AD",DATE,PAYER)) Q:PAYER=""  D
"RTN","IBCNEDST",53,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYER,DFN)) Q:DFN=""  S AUTOUPD=AUTOUPD+$$PATINFO(DFN)
"RTN","IBCNEDST",54,0)
 ..Q
"RTN","IBCNEDST",55,0)
 .I PAYERWNR,$D(^IBCN(365,"AD",DATE,PAYERWNR)) D
"RTN","IBCNEDST",56,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN)) Q:DFN=""  D
"RTN","IBCNEDST",57,0)
 ...; create array of ins. company names for this patient (active policies only)
"RTN","IBCNEDST",58,0)
 ...K INSNAMES S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",59,0)
 ....S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",60,0)
 .....; skip policies that are not active
"RTN","IBCNEDST",61,0)
 .....I $$CHK^IBCNS1(^DPT(DFN,.312,POLICY,0),DT,1) S INSNAMES($$EXTERNAL^DILFD(2.312,.01,,INSTYPE))=""
"RTN","IBCNEDST",62,0)
 .....Q
"RTN","IBCNEDST",63,0)
 ....Q
"RTN","IBCNEDST",64,0)
 ...S IEN=0 F  S IEN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDST",65,0)
 ....S Z="" F  S Z=$O(^IBCN(365,IEN,2,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",66,0)
 .....S EBIEN=$O(^IBCN(365,IEN,2,"B",Z,""))
"RTN","IBCNEDST",67,0)
 .....; make sure eligibility code is "R"
"RTN","IBCNEDST",68,0)
 .....I $$GET1^DIQ(365.02,EBIEN_","_IEN_",",.02)'="R" Q
"RTN","IBCNEDST",69,0)
 .....S PYRNAME=$E($P($G(^IBCN(365,IEN,2,EBIEN,3)),U,3),1,30) ; grab first 30 chars to compare to 36/.01
"RTN","IBCNEDST",70,0)
 .....I PYRNAME'="",'$D(INSNAMES(PYRNAME)) S SECINS=SECINS+1
"RTN","IBCNEDST",71,0)
 .....Q
"RTN","IBCNEDST",72,0)
 ....Q
"RTN","IBCNEDST",73,0)
 ...Q
"RTN","IBCNEDST",74,0)
 ..Q
"RTN","IBCNEDST",75,0)
 .Q
"RTN","IBCNEDST",76,0)
 ;
"RTN","IBCNEDST",77,0)
 ; Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",78,0)
 S (INQP,IEN)=0 F  S IEN=$O(^IBCN(365,"AC",2,IEN)) Q:'IEN  D   ; Transmitted status = 2
"RTN","IBCNEDST",79,0)
 . S INQP=INQP+1
"RTN","IBCNEDST",80,0)
 Q SECINS_U_AUTOUPD_U_INQP
"RTN","IBCNEDST",81,0)
 ;
"RTN","IBCNEDST",82,0)
PATINFO(DFN) ; get data from pat. insurance multiple (file 2.312)
"RTN","IBCNEDST",83,0)
 ; DFN - file 2 ien
"RTN","IBCNEDST",84,0)
 ;
"RTN","IBCNEDST",85,0)
 ; returns
"RTN","IBCNEDST",86,0)
 ;   number of automatically updated patient insurance records for a given patient within last 24 hours
"RTN","IBCNEDST",87,0)
 ;
"RTN","IBCNEDST",88,0)
 N AUTOUPD,INSTYPE,POLICY
"RTN","IBCNEDST",89,0)
 I 'DFN Q
"RTN","IBCNEDST",90,0)
 S AUTOUPD=0
"RTN","IBCNEDST",91,0)
 S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",92,0)
 .S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",93,0)
 ..; if DATE LAST VERIFIED is no more than one day old and EIV AUTO-UPDATE is set, increment auto-update counter
"RTN","IBCNEDST",94,0)
 ..I +$P($G(^DPT(DFN,.312,POLICY,4)),U,4),$$FMDIFF^XLFDT(DT,+$P($G(^DPT(DFN,.312,POLICY,1)),U,3),1)<2 S AUTOUPD=AUTOUPD+1
"RTN","IBCNEDST",95,0)
 ..Q
"RTN","IBCNEDST",96,0)
 .Q
"RTN","IBCNEDST",97,0)
 Q AUTOUPD
"RTN","IBCNEDST",98,0)
 ;
"RTN","IBCNEDST",99,0)
TQINFO() ; get data from transmission queue (file 365.1)
"RTN","IBCNEDST",100,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",101,0)
 ;   piece 1  - Number of queued 270 inquiries
"RTN","IBCNEDST",102,0)
 ;   piece 2  - Number of deferred 270 inquiries
"RTN","IBCNEDST",103,0)
 ;
"RTN","IBCNEDST",104,0)
 N INQD,INQQ,INQUIRY,INSTS,TQSTATUS
"RTN","IBCNEDST",105,0)
 S (INQD,INQQ)=0
"RTN","IBCNEDST",106,0)
 ;
"RTN","IBCNEDST",107,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and
"RTN","IBCNEDST",108,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNEDST",109,0)
 F INSTS=1,6,4 D
"RTN","IBCNEDST",110,0)
 .S INQUIRY=0 F  S INQUIRY=$O(^IBCN(365.1,"AC",INSTS,INQUIRY)) Q:'INQUIRY  D
"RTN","IBCNEDST",111,0)
 ..I INSTS'=4 S INQQ=INQQ+1 Q   ; counter for queued inquiries
"RTN","IBCNEDST",112,0)
 ..S INQD=INQD+1 ; counter for deferred inquiries
"RTN","IBCNEDST",113,0)
 ..Q
"RTN","IBCNEDST",114,0)
 .Q
"RTN","IBCNEDST",115,0)
 Q INQQ_U_INQD
"RTN","IBCNEDST",116,0)
 ;
"RTN","IBCNEDST",117,0)
PAYINFO() ; get data from payer (file 365.12) & insurance company (file #36)
"RTN","IBCNEDST",118,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",119,0)
 ;   piece 1  - Number of insurance companies with no National ID
"RTN","IBCNEDST",120,0)
 ;   piece 2  - Number of locally disabled payers
"RTN","IBCNEDST",121,0)
 ;   piece 3  - Number of unlinked insurance companies
"RTN","IBCNEDST",122,0)
 ;
"RTN","IBCNEDST",123,0)
 N ACTIVE,APP,DATA,IDLIST,INSCO,INSTID,LOCDIS,NONATID,PAYER,PROFID,UNLINK
"RTN","IBCNEDST",124,0)
 S (LOCDIS,NONATID,UNLINK)=0
"RTN","IBCNEDST",125,0)
 ;
"RTN","IBCNEDST",126,0)
 ; Determine # of locally disabled payers
"RTN","IBCNEDST",127,0)
 ; loop through PAYER file
"RTN","IBCNEDST",128,0)
 S PAYER=0 F  S PAYER=$O(^IBE(365.12,PAYER)) Q:'PAYER  D
"RTN","IBCNEDST",129,0)
 .;I '$$ACTAPP^IBCNEUT5(PAYER) Q  ; no active payer applications
"RTN","IBCNEDST",130,0)
 .; Check for National ID
"RTN","IBCNEDST",131,0)
 .S DATA=^IBE(365.12,PAYER,0)
"RTN","IBCNEDST",132,0)
 .I $P(DATA,U,2)="" Q  ;Must have National ID
"RTN","IBCNEDST",133,0)
 .;
"RTN","IBCNEDST",134,0)
 .; Check for Locally Disabled
"RTN","IBCNEDST",135,0)
 .S APP=$$PYRAPP^IBCNEUT5("IIV",PAYER) I 'APP Q
"RTN","IBCNEDST",136,0)
 .S DATA=$G(^IBE(365.12,PAYER,1,APP,0))
"RTN","IBCNEDST",137,0)
 .I $P(DATA,U,2),'$P(DATA,U,3) S LOCDIS=LOCDIS+1 ; nationally active but locally disabled payers
"RTN","IBCNEDST",138,0)
 .Q
"RTN","IBCNEDST",139,0)
 ;
"RTN","IBCNEDST",140,0)
 ; Loop through INSURANCE COMPANY file for insurance companies not linked to a payer
"RTN","IBCNEDST",141,0)
 ; and insurance companies with No National ID 
"RTN","IBCNEDST",142,0)
 ; No National ID [defined by VA CBO as no EDI IDs fields (#36,3.02) & (#36,3.04) - 3/4/14]
"RTN","IBCNEDST",143,0)
 ; This is *Not* a check for the 'VA NATIONAL ID' associated with linked payer.
"RTN","IBCNEDST",144,0)
 ; 
"RTN","IBCNEDST",145,0)
 S INSCO=0 F  S INSCO=$O(^DIC(36,INSCO)) Q:'INSCO  D
"RTN","IBCNEDST",146,0)
 .S ACTIVE=$$ACTIVE^IBCNEUT4(INSCO) Q:'ACTIVE  I $$EXCLUDE^IBCNEUT4($P(ACTIVE,U,2)) Q  ; Exclude Medicaid, etc.
"RTN","IBCNEDST",147,0)
 .S PAYER=$P($G(^DIC(36,INSCO,3)),U,10)  ; associated payer
"RTN","IBCNEDST",148,0)
 .I 'PAYER S UNLINK=UNLINK+1             ; Not linked to a payer. Increment UNLINK
"RTN","IBCNEDST",149,0)
 .I ($$GET1^DIQ(36,INSCO_",",3.02)=""),($$GET1^DIQ(36,INSCO_",",3.04)="") S NONATID=NONATID+1
"RTN","IBCNEDST",150,0)
 .Q
"RTN","IBCNEDST",151,0)
 Q NONATID_U_LOCDIS_U_UNLINK
"RTN","IBCNEDST",152,0)
 ;
"RTN","IBCNEDST",153,0)
BUFINFO() ; get data from insurance buffer (file 355.33)
"RTN","IBCNEDST",154,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",155,0)
 ;
"RTN","IBCNEDST",156,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",157,0)
 ;   piece 1 - Number of Verified (*) buffer entries within last 24 hours
"RTN","IBCNEDST",158,0)
 ;   piece 2 - Number of buffer entries indicated as having Active insurance (+) within last 24 hours
"RTN","IBCNEDST",159,0)
 ;   piece 3 - Number of buffer entries indicated as having Inactive insurance (-) within last 24 hours
"RTN","IBCNEDST",160,0)
 ;   piece 4 - Number of buffer entries indicated as policy status undetermined (#) within last 24 hours
"RTN","IBCNEDST",161,0)
 ;   piece 5 - Number of buffer entries indicated as requiring correction before 270 can be sent (!) within last 24 hours
"RTN","IBCNEDST",162,0)
 ;   piece 6 - Number of buffer entries awaiting processing within last 24 hours
"RTN","IBCNEDST",163,0)
 ;   piece 7 - Number of buffer entries indicated as waiting for a 271 response (?) within last 24 hours
"RTN","IBCNEDST",164,0)
 ;   piece 8 - Number of buffer entries entered by manual process with no further processing (blank) within last 24 hours 
"RTN","IBCNEDST",165,0)
 ;
"RTN","IBCNEDST",166,0)
 N ACTIVE,AMBIG,BUFF,DATE,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,STATUS,SYM,VERIFIED
"RTN","IBCNEDST",167,0)
 S (ACTIVE,AMBIG,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,VERIFIED)=0
"RTN","IBCNEDST",168,0)
 S DATE=0 F  S DATE=$O(^IBA(355.33,"AEST","E",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",169,0)
 .S BUFF=0 F  S BUFF=$O(^IBA(355.33,"AEST","E",DATE,BUFF)) Q:BUFF=""  D
"RTN","IBCNEDST",170,0)
 ..S SYM=$$SYMBOL^IBCNBLL(BUFF)
"RTN","IBCNEDST",171,0)
 ..I SYM="*" S VERIFIED=VERIFIED+1 Q  ; verified entries
"RTN","IBCNEDST",172,0)
 ..I SYM="+" S ACTIVE=ACTIVE+1 Q      ; active insurance
"RTN","IBCNEDST",173,0)
 ..I SYM="$" S ACTIVE=ACTIVE+1 Q      ; include "$" (Escalated entries) in with the active insurance  - IB*2.0*506 (vd)
"RTN","IBCNEDST",174,0)
 ..I SYM="-" S INACTIVE=INACTIVE+1 Q  ; inactive insurance
"RTN","IBCNEDST",175,0)
 ..I SYM="#" S AMBIG=AMBIG+1 Q        ; ambiguous response
"RTN","IBCNEDST",176,0)
 ..I SYM="!" S ERROR=ERROR+1 Q        ; entries requiring correction
"RTN","IBCNEDST",177,0)
 ..I SYM="?" S RESPWAIT=RESPWAIT+1 Q  ; awaiting response
"RTN","IBCNEDST",178,0)
 ..I SYM=" " S MANUAL=MANUAL+1        ; manually entered entries (no further processing)
"RTN","IBCNEDST",179,0)
 .S PROCWAIT=RESPWAIT+MANUAL          ; entries awaiting processing
"RTN","IBCNEDST",180,0)
 Q VERIFIED_U_ACTIVE_U_INACTIVE_U_AMBIG_U_ERROR_U_PROCWAIT_U_RESPWAIT_U_MANUAL
"RTN","IBCNEHL1")
0^8^B215626728^B206919324
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497,506**;21-MAR-94;Build 74
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",13,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",14,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",15,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",16,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",17,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",18,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",19,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",20,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",21,0)
 ;              1 = + (auto-update requirement)
"RTN","IBCNEHL1",22,0)
 ;              6 = -
"RTN","IBCNEHL1",23,0)
 ;              V = #
"RTN","IBCNEHL1",24,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",25,0)
 ;
"RTN","IBCNEHL1",26,0)
EN ; Entry Point
"RTN","IBCNEHL1",27,0)
 N AUTO,EBDA,ERFLG,ERROR,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",28,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",29,0)
 ;
"RTN","IBCNEHL1",30,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",31,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",32,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",33,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",34,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",35,0)
 ;
"RTN","IBCNEHL1",36,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",37,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",38,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",39,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",40,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",41,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",42,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",43,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",44,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",45,0)
 .;
"RTN","IBCNEHL1",46,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",47,0)
 .;
"RTN","IBCNEHL1",48,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",49,0)
 .;
"RTN","IBCNEHL1",50,0)
 .;  Contact Segment
"RTN","IBCNEHL1",51,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",52,0)
 .;
"RTN","IBCNEHL1",53,0)
 .;  Patient Segment
"RTN","IBCNEHL1",54,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",63,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",66,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",69,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",72,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",75,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",78,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",81,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",84,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Notes Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",102,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",104,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",105,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 . ;
"RTN","IBCNEHL1",107,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",108,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 .;
"RTN","IBCNEHL1",110,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",111,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",112,0)
 ;
"RTN","IBCNEHL1",113,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",114,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",115,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",116,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",117,0)
 .Q
"RTN","IBCNEHL1",118,0)
 D FIL
"RTN","IBCNEHL1",119,0)
 Q
"RTN","IBCNEHL1",120,0)
 ;
"RTN","IBCNEHL1",121,0)
 ; =================================================================
"RTN","IBCNEHL1",122,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",123,0)
 ;
"RTN","IBCNEHL1",124,0)
 N BUFF,DATA,ERROR,IENS,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,MIL,OKAY   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",125,0)
 ;
"RTN","IBCNEHL1",126,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",127,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",128,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",129,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",130,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",131,0)
 I ISSUB S DATA(2.312,IENS,7.01)=$P(RDATA13,U) ; name     - IB*2.0*497 (vd)
"RTN","IBCNEHL1",132,0)
 S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2) ; dob
"RTN","IBCNEHL1",133,0)
 S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3) ; ssn
"RTN","IBCNEHL1",134,0)
 I ISSUB,$P(RDATA1,U,8)'="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8) ; whose insurance
"RTN","IBCNEHL1",135,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",136,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01) I ISSUB,PREL'="" S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",137,0)
 S DATA(2.312,IENS,1.03)=TSTAMP ; date last verified
"RTN","IBCNEHL1",138,0)
 S DATA(2.312,IENS,1.04)="" ; last verified by
"RTN","IBCNEHL1",139,0)
 S DATA(2.312,IENS,1.05)=TSTAMP ; date last edited
"RTN","IBCNEHL1",140,0)
 S DATA(2.312,IENS,1.06)="" ; last edited by
"RTN","IBCNEHL1",141,0)
 S DATA(2.312,IENS,1.09)=5 ; source of info = eIV
"RTN","IBCNEHL1",142,0)
 ;subscriber address
"RTN","IBCNEHL1",143,0)
 S DATA(2.312,IENS,3.06)=$P(RDATA5,U) ; street line 1
"RTN","IBCNEHL1",144,0)
 S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2) ; street line 2
"RTN","IBCNEHL1",145,0)
 S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3) ; city
"RTN","IBCNEHL1",146,0)
 S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4) ; state
"RTN","IBCNEHL1",147,0)
 S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5) ; zip
"RTN","IBCNEHL1",148,0)
 S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6) ; country
"RTN","IBCNEHL1",149,0)
 S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7) ; country subdivision
"RTN","IBCNEHL1",150,0)
 ;
"RTN","IBCNEHL1",151,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",152,0)
 D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",153,0)
 ;
"RTN","IBCNEHL1",154,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",155,0)
 K DATA S DATA(2.312,IENS,4.04)="YES" D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",156,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1) I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",157,0)
 ; file new EB data
"RTN","IBCNEHL1",158,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",159,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",160,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",161,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",162,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",163,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",164,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",165,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",166,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",167,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",168,0)
 I BUFF D
"RTN","IBCNEHL1",169,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",170,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",171,0)
 .Q
"RTN","IBCNEHL1",172,0)
AUTOFILX ;
"RTN","IBCNEHL1",173,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",174,0)
 Q
"RTN","IBCNEHL1",175,0)
 ;
"RTN","IBCNEHL1",176,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",177,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",178,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",179,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",180,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",181,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",182,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",183,0)
 ;          1 - successful update
"RTN","IBCNEHL1",184,0)
 N DA,Z,Z2,DATA12,IENS,IENS365,IENS312,REF,PROV,DIAG,REF3129,PROV332,DIAG3121,NODE,ERROR,ERFLG
"RTN","IBCNEHL1",185,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",186,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",187,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",188,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",189,0)
 D FILE^DIE("ET","DATA12","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",190,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",191,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",192,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",193,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",194,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",195,0)
 ; update node 9 data
"RTN","IBCNEHL1",196,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",197,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",198,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",199,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",200,0)
 ; update node 10 data
"RTN","IBCNEHL1",201,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",202,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",203,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",204,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",205,0)
 ; update node 11 data
"RTN","IBCNEHL1",206,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",207,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",208,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",209,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",210,0)
GRPFILEX ;
"RTN","IBCNEHL1",211,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",212,0)
 ;
"RTN","IBCNEHL1",213,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",214,0)
 ;
"RTN","IBCNEHL1",215,0)
 ; Input Variables
"RTN","IBCNEHL1",216,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",217,0)
 ;
"RTN","IBCNEHL1",218,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",219,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",220,0)
 ;
"RTN","IBCNEHL1",221,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",222,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",223,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",224,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",225,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",226,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",227,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",228,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",229,0)
 ;
"RTN","IBCNEHL1",230,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",231,0)
 ; send a warning email message
"RTN","IBCNEHL1",232,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",233,0)
 ;
"RTN","IBCNEHL1",234,0)
 ; IB*2.0*506 Removed the following line of code to Treat all AAA Action Codes
"RTN","IBCNEHL1",235,0)
 ; as though the Payer/FSC Responded.
"RTN","IBCNEHL1",236,0)
 ;I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT^IBCNEHL3
"RTN","IBCNEHL1",237,0)
 ;
"RTN","IBCNEHL1",238,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",239,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",240,0)
 ;
"RTN","IBCNEHL1",241,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",242,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",243,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",244,0)
 ;
"RTN","IBCNEHL1",245,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",246,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",247,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",248,0)
 ;
"RTN","IBCNEHL1",249,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",250,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",251,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",252,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",253,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",254,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",255,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",256,0)
 ;
"RTN","IBCNEHL1",257,0)
 ;  Check for error action
"RTN","IBCNEHL1",258,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U) D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",259,0)
 ;
"RTN","IBCNEHL1",260,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",261,0)
 S FILEIT=1
"RTN","IBCNEHL1",262,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",263,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",264,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",265,0)
 . S FILEIT=0
"RTN","IBCNEHL1",266,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",267,0)
 ;
"RTN","IBCNEHL1",268,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",269,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",270,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",271,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",272,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",273,0)
 ;
"RTN","IBCNEHL1",274,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",275,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",276,0)
 ;
"RTN","IBCNEHL1",277,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",278,0)
 ;  response data
"RTN","IBCNEHL1",279,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",280,0)
 ;
"RTN","IBCNEHL1",281,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",282,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",283,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",284,0)
 ;
"RTN","IBCNEHL1",285,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",286,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",287,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",288,0)
FILX ;
"RTN","IBCNEHL1",289,0)
 Q
"RTN","IBCNEHL1",290,0)
 ;
"RTN","IBCNEHL1",291,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",292,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",293,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",294,0)
 ;
"RTN","IBCNEHL1",295,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",296,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",297,0)
 ;
"RTN","IBCNEHL1",298,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",299,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",300,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",301,0)
 ;
"RTN","IBCNEHL1",302,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",303,0)
 ;
"RTN","IBCNEHL1",304,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",305,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",306,0)
 S RES=0
"RTN","IBCNEHL1",307,0)
 I +$G(RIEN)'>0 Q RES  ; invalid ien for file 365
"RTN","IBCNEHL1",308,0)
 I $G(IIVSTAT)'=1 Q RES ; only auto-update 'active policy' responses
"RTN","IBCNEHL1",309,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",310,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))   ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",311,0)
 S PIEN=$P(RDATA0,U,3) I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",312,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",313,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",314,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",315,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",316,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",317,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",318,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",319,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",320,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",321,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",322,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",323,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",324,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",325,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",326,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",327,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",328,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",329,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",330,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",331,0)
 ..; check group number
"RTN","IBCNEHL1",332,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",333,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",334,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",335,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",336,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",337,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",338,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",339,0)
 ....Q
"RTN","IBCNEHL1",340,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",341,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",342,0)
 ....Q
"RTN","IBCNEHL1",343,0)
 ...Q
"RTN","IBCNEHL1",344,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",345,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",346,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",347,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",348,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",349,0)
 ....I $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",350,0)
 ....S GOK=0
"RTN","IBCNEHL1",351,0)
 ....Q
"RTN","IBCNEHL1",352,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",353,0)
 ....I $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",354,0)
 ....S GOK=0
"RTN","IBCNEHL1",355,0)
 ....Q
"RTN","IBCNEHL1",356,0)
 ...Q
"RTN","IBCNEHL1",357,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",358,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",359,0)
 ..Q
"RTN","IBCNEHL1",360,0)
 .Q
"RTN","IBCNEHL1",361,0)
 Q RES
"RTN","IBCNEHL1",362,0)
 ;
"RTN","IBCNEHL1",363,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; file eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",364,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",365,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",366,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHL1",367,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",368,0)
 ; Returns "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",369,0)
 ;
"RTN","IBCNEHL1",370,0)
 ;
"RTN","IBCNEHL1",371,0)
 N DA,DIK,DATA,DATA1,EBIENS,ERFLG,ERROR,GIEN,GSKIP,IENROOT,IENS,IENSTR,TYPE,TYPE1,Z,Z1,Z2
"RTN","IBCNEHL1",372,0)
 ; delete existing EB data
"RTN","IBCNEHL1",373,0)
 S DIK="^DPT("_DFN_",.312,"_IEN312_",6,",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",374,0)
 S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,6,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",375,0)
 ;
"RTN","IBCNEHL1",376,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNEHL1",377,0)
 ; File the new Requested Service Date field (file #2.312,8.01) from the file #365,1.1 field,
"RTN","IBCNEHL1",378,0)
 ; if the Service Date is not present, then use the Eligibility Date which would be from the file #365,1.11 field
"RTN","IBCNEHL1",379,0)
 ; ALSO, file the new Requested Service Type field (file #2.312,8.02) from the file #365.02,.04 field.
"RTN","IBCNEHL1",380,0)
 N DIE,DR,NODE0,RSRVDT,RSTYPE,TQIEN
"RTN","IBCNEHL1",381,0)
 S TQIEN=$P($G(^IBCN(365,RIEN,0)),U,5),NODE0=$G(^IBCN(365.1,TQIEN,0)),RSTYPE=$P(NODE0,U,20)
"RTN","IBCNEHL1",382,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10) I RSRVDT="" S RSRVDT=$P(NODE0,U,12)
"RTN","IBCNEHL1",383,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IEN312,DR="8.01///"_RSRVDT_";8.02///"_RSTYPE
"RTN","IBCNEHL1",384,0)
 D ^DIE
"RTN","IBCNEHL1",385,0)
 ; /IB*2.0*506 End
"RTN","IBCNEHL1",386,0)
 ;
"RTN","IBCNEHL1",387,0)
 ; file new EB data
"RTN","IBCNEHL1",388,0)
 S IENSTR=IEN312_","_DFN_","
"RTN","IBCNEHL1",389,0)
 S GIEN=+$P($G(^DPT(DFN,.312,IEN312,0)),U,18)
"RTN","IBCNEHL1",390,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!$G(ERFLG)  D
"RTN","IBCNEHL1",391,0)
 .S EBIENS=$O(^IBCN(365,RIEN,2,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",392,0)
 .; if filing Medicare Part A/B data, make sure we only file the correct EB group
"RTN","IBCNEHL1",393,0)
 .S GSKIP=0 I GIEN>0 D
"RTN","IBCNEHL1",394,0)
 ..S TYPE=$$GET1^DIQ(365.02,EBIENS,.05)
"RTN","IBCNEHL1",395,0)
 ..S TYPE1=$P($G(^IBA(355.3,GIEN,0)),U,14)
"RTN","IBCNEHL1",396,0)
 ..I TYPE="MA",TYPE1="B" S GSKIP=1
"RTN","IBCNEHL1",397,0)
 ..I TYPE="MB",TYPE1="A" S GSKIP=1
"RTN","IBCNEHL1",398,0)
 ..Q
"RTN","IBCNEHL1",399,0)
 .I GSKIP Q  ; wrong Medicare Part A/B EB group - skip it
"RTN","IBCNEHL1",400,0)
 .D GETS^DIQ(365.02,EBIENS,"**",,"DATA","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL1",401,0)
 .; make sure we have data to file
"RTN","IBCNEHL1",402,0)
 .I '$D(DATA(365.02)) Q
"RTN","IBCNEHL1",403,0)
 .S IENS="+1,"_IENSTR,Z1=$O(DATA(365.02,"")) M DATA1(2.322,IENS)=DATA(365.02,Z1)
"RTN","IBCNEHL1",404,0)
 .D UPDATE^DIE("E","DATA1","IENROOT","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL1",405,0)
 .S IENS="+1,"_IENROOT(1)_","_IENSTR K DATA1,IENROOT
"RTN","IBCNEHL1",406,0)
 .S Z2="" F  S Z2=$O(DATA(365.26,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",407,0)
 ..M DATA1(2.3226,IENS)=DATA(365.26,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",408,0)
 ..Q
"RTN","IBCNEHL1",409,0)
 .S Z2="" F  S Z2=$O(DATA(365.27,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",410,0)
 ..M DATA1(2.3227,IENS)=DATA(365.27,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",411,0)
 ..Q
"RTN","IBCNEHL1",412,0)
 .S Z2="" F  S Z2=$O(DATA(365.28,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",413,0)
 ..M DATA1(2.3228,IENS)=DATA(365.28,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",414,0)
 ..Q
"RTN","IBCNEHL1",415,0)
 .S Z2="" F  S Z2=$O(DATA(365.29,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",416,0)
 ..M DATA1(2.3229,IENS)=DATA(365.29,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",417,0)
 ..Q
"RTN","IBCNEHL1",418,0)
 .S Z2="" F  S Z2=$O(DATA(365.291,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",419,0)
 ..M DATA1(2.32291,IENS)=DATA(365.291,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",420,0)
 ..Q
"RTN","IBCNEHL1",421,0)
 .S Z2="" F  S Z2=$O(DATA(365.292,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",422,0)
 ..M DATA1(2.32292,IENS)=DATA(365.292,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",423,0)
 ..Q
"RTN","IBCNEHL1",424,0)
 .K DATA
"RTN","IBCNEHL1",425,0)
 .Q
"RTN","IBCNEHL1",426,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",427,0)
 ;
"RTN","IBCNEHL3")
0^5^B171692667^B168485042
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,497,506**;21-MAR-94;Build 74
"RTN","IBCNEHL3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for eIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from eIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ;/Removed the following lines of code as part of IB*2.0*506 but wanted to
"RTN","IBCNEHL3",27,0)
 ;/leave this code available if it should be needed in the future.
"RTN","IBCNEHL3",28,0)
 ; Scenarios:
"RTN","IBCNEHL3",29,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",30,0)
 ; Original Transaction" - set TQ
"RTN","IBCNEHL3",31,0)
 ; Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",32,0)
 ;I ERACT="R"!(ERACT="P") D G ERRORX
"RTN","IBCNEHL3",33,0)
 ;. I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D Q ; first time payer asked us to resubmit
"RTN","IBCNEHL3",34,0)
 ;. . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",35,0)
 ;. . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",36,0)
 ;. . ;
"RTN","IBCNEHL3",37,0)
 ;. ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",38,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",39,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",40,0)
 ;. ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",41,0)
 ;. S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",42,0)
 ;
"RTN","IBCNEHL3",43,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",44,0)
 ; Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",45,0)
 ;I ERACT="W" D G ERRORX
"RTN","IBCNEHL3",46,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",47,0)
 ;. D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",48,0)
 ;
"RTN","IBCNEHL3",49,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",50,0)
 ; Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",51,0)
 ;I ERACT="X" D G ERRORX
"RTN","IBCNEHL3",52,0)
 ;. ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",53,0)
 ;. D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",54,0)
 ;
"RTN","IBCNEHL3",55,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",56,0)
 ; "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",57,0)
 ; - set TQ Status to "Response Received"
"RTN","IBCNEHL3",58,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",59,0)
 ;I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",60,0)
 ;I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D G ERRORX
"RTN","IBCNEHL3",61,0)
 ;. ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",62,0)
 ;. D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",63,0)
 ;
"RTN","IBCNEHL3",64,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",65,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",66,0)
 ;/End of removed code for IB*2.0*506
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNEHL3",69,0)
 ; For all Scenarios 1 thru 5, set TQ Status to "Response Received"
"RTN","IBCNEHL3",70,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",71,0)
 I ",R,P,W,X,N,Y,S,C,"[(","_ERACT_",") D  G ERRORX
"RTN","IBCNEHL3",72,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",73,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",74,0)
 ; /IB*2.0*506 End
"RTN","IBCNEHL3",75,0)
 ;
"RTN","IBCNEHL3",76,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",77,0)
 Q
"RTN","IBCNEHL3",78,0)
 ;
"RTN","IBCNEHL3",79,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",80,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",81,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",82,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",83,0)
 ; Input Variables
"RTN","IBCNEHL3",84,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",85,0)
 ;
"RTN","IBCNEHL3",86,0)
 ; Output Variables
"RTN","IBCNEHL3",87,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",88,0)
 ;
"RTN","IBCNEHL3",89,0)
 ; Init optional param
"RTN","IBCNEHL3",90,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",91,0)
 ;
"RTN","IBCNEHL3",92,0)
 ; Init vars
"RTN","IBCNEHL3",93,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",94,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",97,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",98,0)
 ;
"RTN","IBCNEHL3",99,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",100,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",103,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",104,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",105,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",106,0)
 ;
"RTN","IBCNEHL3",107,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",108,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",109,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",110,0)
 ;
"RTN","IBCNEHL3",111,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",112,0)
 ;
"RTN","IBCNEHL3",113,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",114,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",115,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",116,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",117,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",118,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",119,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",120,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",121,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",122,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",123,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",124,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",125,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",126,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",127,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",128,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",129,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",130,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",131,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",132,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",133,0)
 ;
"RTN","IBCNEHL3",134,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",135,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",136,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",137,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",138,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",139,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",140,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",141,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",142,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",143,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",144,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",145,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",146,0)
 ;
"RTN","IBCNEHL3",147,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",148,0)
 ;
"RTN","IBCNEHL3",149,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",150,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",151,0)
 ;
"RTN","IBCNEHL3",152,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",153,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",154,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",155,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",156,0)
 . D ^DIE
"RTN","IBCNEHL3",157,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",158,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",159,0)
 . D ^DIE
"RTN","IBCNEHL3",160,0)
 ;
"RTN","IBCNEHL3",161,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",162,0)
 Q
"RTN","IBCNEHL3",163,0)
 ;
"RTN","IBCNEHL3",164,0)
PCK ; Payer Check
"RTN","IBCNEHL3",165,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",166,0)
 ;
"RTN","IBCNEHL3",167,0)
 ; Input Variables
"RTN","IBCNEHL3",168,0)
 ; MSGID
"RTN","IBCNEHL3",169,0)
 ;
"RTN","IBCNEHL3",170,0)
 ; Output Variables
"RTN","IBCNEHL3",171,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",172,0)
 ;
"RTN","IBCNEHL3",173,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",174,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",175,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",176,0)
 ;
"RTN","IBCNEHL3",177,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",178,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",179,0)
 ;
"RTN","IBCNEHL3",180,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",181,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",182,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",183,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",184,0)
 . ;
"RTN","IBCNEHL3",185,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",186,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",187,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",188,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",189,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",190,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",191,0)
 . ;
"RTN","IBCNEHL3",192,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",193,0)
 . ;
"RTN","IBCNEHL3",194,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",195,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",196,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",197,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",198,0)
 ..;
"RTN","IBCNEHL3",199,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",200,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",201,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",202,0)
 . ; 
"RTN","IBCNEHL3",203,0)
 . ; If payer response received to ~NO PAYER, update eIV Response file
"RTN","IBCNEHL3",204,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",205,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",206,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",207,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",208,0)
 ;
"RTN","IBCNEHL3",209,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",210,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",211,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",212,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",213,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",214,0)
 . ;
"RTN","IBCNEHL3",215,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",216,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",217,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",218,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",219,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",220,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",221,0)
 ;
"RTN","IBCNEHL3",222,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",223,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,PIEN,0)),U,3)="" D
"RTN","IBCNEHL3",224,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",225,0)
 Q
"RTN","IBCNEHL3",226,0)
 ;
"RTN","IBCNEHL3",227,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",228,0)
 ;
"RTN","IBCNEHL3",229,0)
 ; Input Variables
"RTN","IBCNEHL3",230,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",231,0)
 ;
"RTN","IBCNEHL3",232,0)
 ; Output Variables
"RTN","IBCNEHL3",233,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",234,0)
 ;
"RTN","IBCNEHL3",235,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",236,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",237,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",238,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",239,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",240,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",241,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",242,0)
 K SYMBOL
"RTN","IBCNEHL3",243,0)
 Q
"RTN","IBCNEHL3",244,0)
 ;
"RTN","IBCNEHL3",245,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",246,0)
 ; Input Variables
"RTN","IBCNEHL3",247,0)
 ; BUFF
"RTN","IBCNEHL3",248,0)
 ;
"RTN","IBCNEHL3",249,0)
 ; Output Variables
"RTN","IBCNEHL3",250,0)
 ; SYMBOL
"RTN","IBCNEHL3",251,0)
 ;
"RTN","IBCNEHL3",252,0)
 N IDUZ,UP
"RTN","IBCNEHL3",253,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",254,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",255,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHL3",256,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",257,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",258,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",259,0)
 Q
"RTN","IBCNEHL3",260,0)
 ;
"RTN","IBCNEHL3",261,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",262,0)
 ;
"RTN","IBCNEHL3",263,0)
 ; Input Variables
"RTN","IBCNEHL3",264,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",265,0)
 ;
"RTN","IBCNEHL3",266,0)
 ; Output Variables
"RTN","IBCNEHL3",267,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",268,0)
 ;
"RTN","IBCNEHL3",269,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",270,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",271,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",272,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",273,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",274,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",275,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",276,0)
 Q
"RTN","IBCNEHL3",277,0)
 ;
"RTN","IBCNEHL3",278,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",279,0)
 ;
"RTN","IBCNEHL3",280,0)
 ; Input Variables
"RTN","IBCNEHL3",281,0)
 ; HCT
"RTN","IBCNEHL3",282,0)
 ;
"RTN","IBCNEHL3",283,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",284,0)
 ;
"RTN","IBCNEHL3",285,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",286,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",287,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",288,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",289,0)
 Q SEGMT
"RTN","IBCNEHL3",290,0)
 ;
"RTN","IBCNEHL3",291,0)
 ; =================================================================
"RTN","IBCNEHL3",292,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL3",293,0)
 ;
"RTN","IBCNEHL3",294,0)
 ; Input Variables
"RTN","IBCNEHL3",295,0)
 ; ERROR, TRACE
"RTN","IBCNEHL3",296,0)
 ;
"RTN","IBCNEHL3",297,0)
 ; Output Variables
"RTN","IBCNEHL3",298,0)
 ; ERFLG=1
"RTN","IBCNEHL3",299,0)
 ;
"RTN","IBCNEHL3",300,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL3",301,0)
 S VEN=0,MCT=9,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL3",302,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL3",303,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL3",304,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL3",305,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL3",306,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL3",307,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL3",308,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL3",309,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL3",310,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",311,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL3",312,0)
 .S MCT=MCT+1,MSG(MCT)="Error:"
"RTN","IBCNEHL3",313,0)
 .F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL3",314,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",315,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FILE"))'="" S MCT=MCT+1,MSG(MCT)="File: "_ERROR("DIERR",VEN,"PARAM","FILE")
"RTN","IBCNEHL3",316,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","IENS"))'="" S MCT=MCT+1,MSG(MCT)="IENS: "_ERROR("DIERR",VEN,"PARAM","IENS")
"RTN","IBCNEHL3",317,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FIELD"))'="" S MCT=MCT+1,MSG(MCT)="Field: "_ERROR("DIERR",VEN,"PARAM","FIELD")
"RTN","IBCNEHL3",318,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",319,0)
 .Q
"RTN","IBCNEHL3",320,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",321,0)
 Q
"RTN","IBCNEHL3",322,0)
 ;
"RTN","IBCNEHL3",323,0)
 ; =================================================================
"RTN","IBCNEHL3",324,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL3",325,0)
 ; encountered problem filing date
"RTN","IBCNEHL3",326,0)
 ;
"RTN","IBCNEHL3",327,0)
 ; Input Variables
"RTN","IBCNEHL3",328,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL3",329,0)
 ;
"RTN","IBCNEHL3",330,0)
 ; Output Variables
"RTN","IBCNEHL3",331,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL3",332,0)
 ;
"RTN","IBCNEHL3",333,0)
 N DFN,SYMBOL
"RTN","IBCNEHL3",334,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL3",335,0)
 ;
"RTN","IBCNEHL3",336,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL3",337,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL3",338,0)
 ;
"RTN","IBCNEHL3",339,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL3",340,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL3",341,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL3",342,0)
 ;
"RTN","IBCNEHL3",343,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL3",344,0)
 ; create buffer entry
"RTN","IBCNEHL3",345,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL3",346,0)
 ;
"RTN","IBCNEHL3",347,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL3",348,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL3",349,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL3",350,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL3",351,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL3",352,0)
 ;
"RTN","IBCNEHL3",353,0)
 ;Update buffer symbol
"RTN","IBCNEHL3",354,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL3",355,0)
 ;
"RTN","IBCNEHL3",356,0)
 Q
"RTN","IBCNEHL3",357,0)
 ;
"RTN","IBCNEHL3",358,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL3",359,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",360,0)
 ;
"RTN","IBCNEHL3",361,0)
 ; returns 1 if given policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",362,0)
 N RES
"RTN","IBCNEHL3",363,0)
 S RES=0
"RTN","IBCNEHL3",364,0)
 I $P(RDATA13,U,2)'=$P(IDATA7,U,2) G CHK1X  ; Subscriber ID doesn't match   ; IB*2.0*497 compare subscriber ID data at their new locations
"RTN","IBCNEHL3",365,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL3",366,0)
 I '$$NAMECMP^IBCNEHLU($P(RDATA13,U),$P(IDATA7,U)) G CHK1X  ; Insured's name doesn't match  ; IB*2.0*497 compare name of insured data at their new locations
"RTN","IBCNEHL3",367,0)
 S RES=1
"RTN","IBCNEHL3",368,0)
CHK1X ;
"RTN","IBCNEHL3",369,0)
 Q RES
"RTN","IBCNEHL3",370,0)
 ;
"RTN","IBCNEHL3",371,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL3",372,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",373,0)
 ;
"RTN","IBCNEHL3",374,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",375,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL3",376,0)
 S RES=0
"RTN","IBCNEHL3",377,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL3",378,0)
 S IENS=IEN2_","
"RTN","IBCNEHL3",379,0)
 S ID=$P(RDATA13,U,2)    ; IB*2.0*497 Subscriber ID needs to be retrieved from its new location
"RTN","IBCNEHL3",380,0)
 I ID'=$P(IDATA7,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match ; IB*2.0*497 compare subscriber ID at new locations
"RTN","IBCNEHL3",381,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL3",382,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL3",383,0)
 S NAME=$P(RDATA13,U),PNAME=$$GET1^DIQ(2,IENS,.01)   ; IB*2.0*497 get name of insured at its new location
"RTN","IBCNEHL3",384,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA7,U)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match ; IB*2*497
"RTN","IBCNEHL3",385,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNEHL3",386,0)
 S RES=1
"RTN","IBCNEHL3",387,0)
CHK2X ;
"RTN","IBCNEHL3",388,0)
 Q RES
"RTN","IBCNEHL3",389,0)
 ;
"RTN","IBCNEHL3",390,0)
UPDIREC(RIEN,IEN312) ; update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNEHL3",391,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL3",392,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL3",393,0)
 ;
"RTN","IBCNEHL3",394,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL3",395,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL3",396,0)
 S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL3",397,0)
 S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL3",398,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL3",399,0)
 Q
"RTN","IBCNEHL3",400,0)
 ;
"RTN","IBCNEHL3",401,0)
LCKERR ; send locking error message
"RTN","IBCNEHL3",402,0)
 N MSG,XMY
"RTN","IBCNEHL3",403,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from the EC"
"RTN","IBCNEHL3",404,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNEHL3",405,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNEHL3",406,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNEHL3",407,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNEHL3",408,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNEHL3",409,0)
 S MSG(7)=" "
"RTN","IBCNEHL3",410,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNEHL3",411,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",412,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",413,0)
 Q
"RTN","IBCNEHL4")
0^26^B174792299^B174356077
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,438,497*506**;21-MAR-94;Build 74
"RTN","IBCNEHL4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",29,0)
 ;
"RTN","IBCNEHL4",30,0)
 ;  Input:
"RTN","IBCNEHL4",31,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",32,0)
 ;
"RTN","IBCNEHL4",33,0)
 ;  Output:
"RTN","IBCNEHL4",34,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",35,0)
 ;
"RTN","IBCNEHL4",36,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",37,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",38,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",39,0)
 ;
"RTN","IBCNEHL4",40,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",41,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",42,0)
 ;
"RTN","IBCNEHL4",43,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",44,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",45,0)
 ;
"RTN","IBCNEHL4",46,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",47,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",48,0)
 ;
"RTN","IBCNEHL4",49,0)
 ; Update record w/info
"RTN","IBCNEHL4",50,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",51,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",52,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",53,0)
 ;
"RTN","IBCNEHL4",54,0)
 ; Update w/internal values
"RTN","IBCNEHL4",55,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",56,0)
 ;
"RTN","IBCNEHL4",57,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 ; Update w/external values
"RTN","IBCNEHL4",60,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",61,0)
MSAX ;
"RTN","IBCNEHL4",62,0)
 Q
"RTN","IBCNEHL4",63,0)
 ;
"RTN","IBCNEHL4",64,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",69,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",70,0)
 ;
"RTN","IBCNEHL4",71,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",72,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",73,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",74,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",75,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",76,0)
 I TRACE="" D
"RTN","IBCNEHL4",77,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",78,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the Help Desk."
"RTN","IBCNEHL4",79,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",80,0)
 Q
"RTN","IBCNEHL4",81,0)
 ;
"RTN","IBCNEHL4",82,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",83,0)
 N DFN,DOB,DOD,FLD,ICN,IENSTR,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,STATE,XDFN,IDLIST
"RTN","IBCNEHL4",84,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",85,0)
 ;
"RTN","IBCNEHL4",86,0)
 S ERFLG=0
"RTN","IBCNEHL4",87,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",88,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",89,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",90,0)
 ;
"RTN","IBCNEHL4",91,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",92,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",93,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",94,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",95,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",96,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",97,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",98,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",99,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",100,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 ;
"RTN","IBCNEHL4",102,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",103,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",104,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",105,0)
 ;
"RTN","IBCNEHL4",106,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",107,0)
 I ICN'="" D
"RTN","IBCNEHL4",108,0)
 .S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",109,0)
 .; if unsuccessful, wait 5 sec and try one more time
"RTN","IBCNEHL4",110,0)
 .I +$G(XDFN)'>0 H 5 S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",111,0)
 .Q
"RTN","IBCNEHL4",112,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",113,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",114,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",115,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",116,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIV was unable to file the response information."
"RTN","IBCNEHL4",117,0)
 ;
"RTN","IBCNEHL4",118,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",119,0)
 ;
"RTN","IBCNEHL4",120,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",121,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",122,0)
 ;
"RTN","IBCNEHL4",123,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",124,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,IENSTR,.02)=DFN
"RTN","IBCNEHL4",125,0)
 S RSUPDT(365,IENSTR,1.02)=DOB,RSUPDT(365,IENSTR,1.04)=SEX
"RTN","IBCNEHL4",126,0)
 S RSUPDT(365,IENSTR,1.03)=SSN,RSUPDT(365,IENSTR,1.16)=DOD
"RTN","IBCNEHL4",127,0)
 S RSUPDT(365,IENSTR,1.08)="v"
"RTN","IBCNEHL4",128,0)
 S RSUPDT(365,IENSTR,1.09)="01"
"RTN","IBCNEHL4",129,0)
 ; Subscriber address
"RTN","IBCNEHL4",130,0)
 S FLD=$G(IBSEG(12))
"RTN","IBCNEHL4",131,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",132,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",133,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",134,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",135,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",136,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",137,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",138,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",139,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",140,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",141,0)
 K RSUPDT
"RTN","IBCNEHL4",142,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",143,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",144,0)
PIDX ;
"RTN","IBCNEHL4",145,0)
 Q
"RTN","IBCNEHL4",146,0)
 ;
"RTN","IBCNEHL4",147,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",148,0)
 ;
"RTN","IBCNEHL4",149,0)
 ; Input:
"RTN","IBCNEHL4",150,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",151,0)
 ;
"RTN","IBCNEHL4",152,0)
 ; Output:
"RTN","IBCNEHL4",153,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",154,0)
 ;
"RTN","IBCNEHL4",155,0)
 N DOB,IENSTR,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",156,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",157,0)
 S SSN=$G(IBSEG(13)) ; fsc NO LONGER SENDS SSN
"RTN","IBCNEHL4",158,0)
 ; 
"RTN","IBCNEHL4",159,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",160,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",161,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",162,0)
 ;
"RTN","IBCNEHL4",163,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",164,0)
 ;
"RTN","IBCNEHL4",165,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",166,0)
 S RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",167,0)
 S:DOB'="" RSUPDT(365,IENSTR,1.02)=DOB
"RTN","IBCNEHL4",168,0)
 S RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",169,0)
 S RSUPDT(365,IENSTR,1.03)=SSN
"RTN","IBCNEHL4",170,0)
 S RSUPDT(365,IENSTR,1.18)=SUBID
"RTN","IBCNEHL4",171,0)
 ; Subscriber address
"RTN","IBCNEHL4",172,0)
 S FLD=$G(IBSEG(6))
"RTN","IBCNEHL4",173,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",174,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",175,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",176,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",177,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",178,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",179,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",180,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",181,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",182,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",183,0)
 K RSUPDT
"RTN","IBCNEHL4",184,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",185,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",186,0)
GT1X ;
"RTN","IBCNEHL4",187,0)
 Q
"RTN","IBCNEHL4",188,0)
 ;
"RTN","IBCNEHL4",189,0)
ZHS(EBDA,ERROR,IBSEG,RIEN) ; Process ZHS Healthcare services delivery segment
"RTN","IBCNEHL4",190,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",191,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",192,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",193,0)
 S RSUPDT(365.27,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,7,"B",""),-1)+1 ; ZHS sequence
"RTN","IBCNEHL4",194,0)
 ; Benefit quantity & qualifier
"RTN","IBCNEHL4",195,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",196,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.02)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",197,0)
 ; Sampling frequency & qualifier
"RTN","IBCNEHL4",198,0)
 S QUAL=$P($G(IBSEG(5)),HLCMP),VALUE=$G(IBSEG(6))
"RTN","IBCNEHL4",199,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.04)=VALUE,RSUPDT(365.27,IENSTR,.05)=QUAL
"RTN","IBCNEHL4",200,0)
 ; Time period & qualifier
"RTN","IBCNEHL4",201,0)
 S QUAL=$P($G(IBSEG(7)),HLCMP),VALUE=$G(IBSEG(8))
"RTN","IBCNEHL4",202,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.06)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.07)=QUAL
"RTN","IBCNEHL4",203,0)
 S RSUPDT(365.27,IENSTR,.08)=$P($G(IBSEG(9)),HLCMP) ; Delivery frequency
"RTN","IBCNEHL4",204,0)
 S RSUPDT(365.27,IENSTR,.09)=$P($G(IBSEG(10)),HLCMP) ; Delivery pattern
"RTN","IBCNEHL4",205,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",206,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",207,0)
 Q
"RTN","IBCNEHL4",208,0)
 ;
"RTN","IBCNEHL4",209,0)
ZRF(EBDA,ERROR,IBSEG,RIEN) ; Process ZRF Reference identification segment
"RTN","IBCNEHL4",210,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",211,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",212,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",213,0)
 S RSUPDT(365.291,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,10,"B",""),-1)+1 ; ZRF sequence
"RTN","IBCNEHL4",214,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",215,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",216,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.291,IENSTR,.02)=VALUE,RSUPDT(365.291,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",217,0)
 S RSUPDT(365.291,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL4",218,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",219,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",220,0)
 Q
"RTN","IBCNEHL4",221,0)
 ;
"RTN","IBCNEHL4",222,0)
ZSD(EBDA,ERROR,IBSEG,RIEN) ; Process ZSD Subscriber date segment
"RTN","IBCNEHL4",223,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",224,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",225,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",226,0)
 S RSUPDT(365.28,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,8,"B",""),-1)+1 ; ZSD sequence
"RTN","IBCNEHL4",227,0)
 ; Date & qualifier
"RTN","IBCNEHL4",228,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL4",229,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.28,IENSTR,.02)=VALUE,RSUPDT(365.28,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",230,0)
 S RSUPDT(365.28,IENSTR,.04)=$P($G(IBSEG(4)),HLCMP) ; Date format
"RTN","IBCNEHL4",231,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",232,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",233,0)
 Q
"RTN","IBCNEHL4",234,0)
 ;
"RTN","IBCNEHL4",235,0)
ZII(EBDA,ERROR,IBSEG,RIEN) ; Process ZII Subscriber additional info segment
"RTN","IBCNEHL4",236,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",237,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",238,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",239,0)
 S RSUPDT(365.29,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,9,"B",""),-1)+1 ; ZII sequence
"RTN","IBCNEHL4",240,0)
 ; place of service or diagnosis (if qualifier is "BF" or "BK") & qualifier
"RTN","IBCNEHL4",241,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",242,0)
 ; IB*2*497 set up for Nature of Injury type qualifiers "GR", "NI", or null value
"RTN","IBCNEHL4",243,0)
 I (QUAL="")!(".GR.NI."[("."_QUAL_".")) D
"RTN","IBCNEHL4",244,0)
 . S RSUPDT(365.29,IENSTR,.05)=$P($G(IBSEG(5)),U,2) ;nature of injury code
"RTN","IBCNEHL4",245,0)
 . S RSUPDT(365.29,IENSTR,.06)=$P($G(IBSEG(6)),U,2) ; nature of injury code category
"RTN","IBCNEHL4",246,0)
 . S RSUPDT(365.29,IENSTR,.07)=$G(IBSEG(7))  ; nature of injury code free text description
"RTN","IBCNEHL4",247,0)
 E  S RSUPDT(365.29,IENSTR,$S(".BF.BK."[("."_QUAL_"."):.03,1:.02))=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL4",248,0)
 S RSUPDT(365.29,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",249,0)
 D CODECHK^IBCNEHLU(.RSUPDT) ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",250,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",251,0)
 Q
"RTN","IBCNEHL4",252,0)
 ;
"RTN","IBCNEHL4",253,0)
ZTY(EBDA,ERROR,IBSEG,RIEN) ; Process ZTY Benefit related entity segment
"RTN","IBCNEHL4",254,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",255,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",256,0)
 S IENSTR=EBDA_","_RIEN_","
"RTN","IBCNEHL4",257,0)
 ; Entity id code & qualifier
"RTN","IBCNEHL4",258,0)
 S QUAL=$P($G(IBSEG(4)),HLCMP),VALUE=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",259,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.01)=VALUE,RSUPDT(365.02,IENSTR,3.02)=QUAL
"RTN","IBCNEHL4",260,0)
 ; Entity name
"RTN","IBCNEHL4",261,0)
 S FLD=$G(IBSEG(5))
"RTN","IBCNEHL4",262,0)
 ;S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)
"RTN","IBCNEHL4",263,0)
 S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_" "_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)  ;ib*2*497  prevent orphan commas
"RTN","IBCNEHL4",264,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",265,0)
 ;I $TR(RSUPDT(365.02,IENSTR,3.03),", ")="" K RSUPDT(365.02,IENSTR,3.03)
"RTN","IBCNEHL4",266,0)
 I $TR(RSUPDT(365.02,IENSTR,3.03)," ")="" K RSUPDT(365.02,IENSTR,3.03)  ;ib*2*497  remove comma from $TR statement
"RTN","IBCNEHL4",267,0)
 ; Entity id & qualifier
"RTN","IBCNEHL4",268,0)
 S QUAL=$P($G(IBSEG(6)),HLCMP),VALUE=$G(IBSEG(7))
"RTN","IBCNEHL4",269,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.04)=VALUE,RSUPDT(365.02,IENSTR,3.05)=QUAL
"RTN","IBCNEHL4",270,0)
 ; IB*2*497 - entity relationship code
"RTN","IBCNEHL4",271,0)
 S RSUPDT(365.02,IENSTR,3.06)=$G(IBSEG(14))
"RTN","IBCNEHL4",272,0)
 ; Entity address
"RTN","IBCNEHL4",273,0)
 S FLD=$G(IBSEG(8))
"RTN","IBCNEHL4",274,0)
 S RSUPDT(365.02,IENSTR,4.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",275,0)
 S RSUPDT(365.02,IENSTR,4.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",276,0)
 S RSUPDT(365.02,IENSTR,4.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",277,0)
 S VALUE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I VALUE>0 S RSUPDT(365.02,IENSTR,4.04)=VALUE ; state
"RTN","IBCNEHL4",278,0)
 S RSUPDT(365.02,IENSTR,4.05)=$P(FLD,HLCMP,5) ; zip / postal code
"RTN","IBCNEHL4",279,0)
 S RSUPDT(365.02,IENSTR,4.06)=$P(FLD,HLCMP,6) ; country code
"RTN","IBCNEHL4",280,0)
 S RSUPDT(365.02,IENSTR,4.09)=$P(FLD,HLCMP,8) ; country subdivision code
"RTN","IBCNEHL4",281,0)
 ; Entity location & qualifier
"RTN","IBCNEHL4",282,0)
 S QUAL=$G(IBSEG(9)),VALUE=$G(IBSEG(10))
"RTN","IBCNEHL4",283,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,4.07)=VALUE,RSUPDT(365.02,IENSTR,4.08)=QUAL
"RTN","IBCNEHL4",284,0)
 ; Provider code
"RTN","IBCNEHL4",285,0)
 S RSUPDT(365.02,IENSTR,5.01)=$P($G(IBSEG(11)),HLCMP)
"RTN","IBCNEHL4",286,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",287,0)
 S QUAL=$P($G(IBSEG(12)),HLCMP),VALUE=$G(IBSEG(13))
"RTN","IBCNEHL4",288,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,5.02)=VALUE,RSUPDT(365.02,IENSTR,5.03)=QUAL
"RTN","IBCNEHL4",289,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",290,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",291,0)
 Q
"RTN","IBCNEHL4",292,0)
 ;
"RTN","IBCNEHL4",293,0)
G2OCTD(EBDA,ERROR,IBSEG,RIEN) ; Process G2O.CTD Benefit related entity contact data segment
"RTN","IBCNEHL4",294,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",295,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",296,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",297,0)
 S RSUPDT(365.26,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,6,"B",""),-1)+1 ; G2O.CTD sequence
"RTN","IBCNEHL4",298,0)
 ; Contact name
"RTN","IBCNEHL4",299,0)
 S FLD=$G(IBSEG(3))
"RTN","IBCNEHL4",300,0)
 S RSUPDT(365.26,IENSTR,.02)=$P(FLD,HLCMP,5)_" "_$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)_" "_$P(FLD,HLCMP,6)
"RTN","IBCNEHL4",301,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",302,0)
 I $TR(RSUPDT(365.26,IENSTR,.02),", ")="" K RSUPDT(365.26,IENSTR,.02)
"RTN","IBCNEHL4",303,0)
 ; Contact number & qualifier
"RTN","IBCNEHL4",304,0)
 S FLD=$G(IBSEG(6)),QUAL=$P(FLD,HLCMP,9),VALUE=$P(FLD,HLCMP)
"RTN","IBCNEHL4",305,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.26,IENSTR,1)=VALUE,RSUPDT(365.26,IENSTR,.04)=QUAL ;ib*2*497  stuff COMMUNICATION NUMBER data into its new location (365.26,1) 
"RTN","IBCNEHL4",306,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",307,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",308,0)
 Q
"RTN","IBCNEHL4",309,0)
 ;
"RTN","IBCNEHL4",310,0)
ERR(ERDA,ERROR,IBSEG,RIEN) ; Process ERR Reject reasons segment
"RTN","IBCNEHL4",311,0)
 N I,IENARR,IENSTR,FLD,LOC,RSUPDT,VAL
"RTN","IBCNEHL4",312,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",313,0)
 S RSUPDT(365.06,IENSTR,.01)=+$O(^IBCN(365,RIEN,6,"B",""),-1)+1 ; ERR sequence
"RTN","IBCNEHL4",314,0)
 S FLD=$G(IBSEG(3)),LOC=$P(FLD,HLCMP)
"RTN","IBCNEHL4",315,0)
 F I=2:1:6 S VAL=$P(FLD,HLCMP,2) I VAL'="" S LOC=LOC_$S(I=2!(I=4):"("_VAL_")",1:"."_VAL_".")
"RTN","IBCNEHL4",316,0)
 S RSUPDT(365.06,IENSTR,.02)=LOC ; Error location (HL7)
"RTN","IBCNEHL4",317,0)
 S RSUPDT(365.06,IENSTR,.03)=$P($G(IBSEG(6)),HLCMP) ; Reject reason
"RTN","IBCNEHL4",318,0)
 S RSUPDT(365.06,IENSTR,.04)=$G(IBSEG(9)) ; Action code
"RTN","IBCNEHL4",319,0)
 S RSUPDT(365.06,IENSTR,.05)=$G(IBSEG(8)) ; Loop id
"RTN","IBCNEHL4",320,0)
 S RSUPDT(365.06,IENSTR,.06)=$P($G(IBSEG(6)),HLCMP,3) ; Source
"RTN","IBCNEHL4",321,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",322,0)
 D UPDATE^DIE("E","RSUPDT","IENARR","ERROR")
"RTN","IBCNEHL4",323,0)
 S ERDA=IENARR(1)
"RTN","IBCNEHL4",324,0)
 Q
"RTN","IBCNEHL4",325,0)
 ;
"RTN","IBCNEHL4",326,0)
NTE(ERDA,ERROR,IBSEG,RIEN) ; Process NTE segment
"RTN","IBCNEHL4",327,0)
 N DA,IENS,MSG,MSGSTR,RSUPDT,Z
"RTN","IBCNEHL4",328,0)
 S DA(1)=RIEN,DA=ERDA
"RTN","IBCNEHL4",329,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL4",330,0)
 S MSGSTR=$G(IBSEG(4))
"RTN","IBCNEHL4",331,0)
 F Z=1:1 S MSG=$P(MSGSTR,HLREP,Z) Q:MSG=""  S RSUPDT(365.061,"+"_Z_","_IENS,".01")=MSG  ;IB*506  Q:'MSG
"RTN","IBCNEHL4",332,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",333,0)
 Q
"RTN","IBCNEHL4",334,0)
 ;
"RTN","IBCNEHL4",335,0)
ZTP(ERROR,IBSEG,RIEN) ; Process ZTP Subscriber date (subscriber level) segment
"RTN","IBCNEHL4",336,0)
 N IENSTR,QUAL,RSUPDT,VALUE,Z
"RTN","IBCNEHL4",337,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",338,0)
 S RSUPDT(365.07,IENSTR,.01)=+$O(^IBCN(365,RIEN,7,"B",""),-1)+1 ; ZTP sequence
"RTN","IBCNEHL4",339,0)
 ; Date & qualifier
"RTN","IBCNEHL4",340,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($P($G(IBSEG(4)),HLCMP),HLSCMP)
"RTN","IBCNEHL4",341,0)
 S Z=$P($P($G(IBSEG(4)),HLCMP,2),HLSCMP) I Z'="" S VALUE=VALUE_" - "_Z
"RTN","IBCNEHL4",342,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.07,IENSTR,.02)=VALUE,RSUPDT(365.07,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",343,0)
 S RSUPDT(365.07,IENSTR,.04)=$G(IBSEG(5)) ; Loop id
"RTN","IBCNEHL4",344,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",345,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",346,0)
 Q
"RTN","IBCNEHLM")
0^9^B28096778^B26579443
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416,438,497,506**;21-MAR-94;Build 74
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",26,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",27,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",28,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",29,0)
 ;    TIMOUT = Timeout Days Site Parameter
"RTN","IBCNEHLM",30,0)
 ;    RETRY = Retry Flag Site Parameter
"RTN","IBCNEHLM",31,0)
 ;
"RTN","IBCNEHLM",32,0)
 N IBPERSIST
"RTN","IBCNEHLM",33,0)
 S IBPERSIST="N" ; persistence flag - If "N", FSC will not use the statistics on the NTE segment
"RTN","IBCNEHLM",34,0)
 D REG
"RTN","IBCNEHLM",35,0)
 Q
"RTN","IBCNEHLM",36,0)
 ;
"RTN","IBCNEHLM",37,0)
EN1 ; TaskMan entry point
"RTN","IBCNEHLM",38,0)
 N IBPERSIST
"RTN","IBCNEHLM",39,0)
 S IBPERSIST="Y" ; persistence flag - If "Y", FSC will use NTE segment to update their copy of the site's stats
"RTN","IBCNEHLM",40,0)
 D REG
"RTN","IBCNEHLM",41,0)
 ; Purge the task record
"RTN","IBCNEHLM",42,0)
 S ZTREQ="@"
"RTN","IBCNEHLM",43,0)
 Q
"RTN","IBCNEHLM",44,0)
 ;
"RTN","IBCNEHLM",45,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",46,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",47,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",48,0)
 NEW HLEID,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR,HLREP
"RTN","IBCNEHLM",49,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",50,0)
 NEW VMFE,IVER,TIMOUT,RETRY         ; IB*2.0*506
"RTN","IBCNEHLM",51,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",52,0)
 ;
"RTN","IBCNEHLM",53,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",54,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",55,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",56,0)
 S FRSH=$P(IBCNE,U,1),TIMOUT=$P(IBCNE,U,5),RETRY=$P(IBCNE,U,26) ; IB*2.0*506
"RTN","IBCNEHLM",57,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",58,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",59,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",60,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",61,0)
 S IVER="6"
"RTN","IBCNEHLM",62,0)
 ;
"RTN","IBCNEHLM",63,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",64,0)
 ;
"RTN","IBCNEHLM",65,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",66,0)
 I CNTC'="" D
"RTN","IBCNEHLM",67,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",68,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",69,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",70,0)
 ;
"RTN","IBCNEHLM",71,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",72,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the eIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",73,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the eIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",74,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the eIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",75,0)
 ;
"RTN","IBCNEHLM",76,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",77,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",78,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",79,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",80,0)
 ;
"RTN","IBCNEHLM",81,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",82,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",83,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic re-verification checks"" is blank.  "
"RTN","IBCNEHLM",84,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",85,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",86,0)
 . Q
"RTN","IBCNEHLM",87,0)
 ;
"RTN","IBCNEHLM",88,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",89,0)
 I QFL=1 Q
"RTN","IBCNEHLM",90,0)
 ;
"RTN","IBCNEHLM",91,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",92,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",93,0)
 N DSTAT,VNTE,VZRR
"RTN","IBCNEHLM",94,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",95,0)
 ;
"RTN","IBCNEHLM",96,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",97,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",98,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3),HLREP=$E(HL("ECH"),2)
"RTN","IBCNEHLM",99,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",100,0)
 ;
"RTN","IBCNEHLM",101,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",102,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",103,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",104,0)
 ;
"RTN","IBCNEHLM",105,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",106,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",107,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",108,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",109,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",110,0)
 ;
"RTN","IBCNEHLM",111,0)
 ;  Set the ZRR segment
"RTN","IBCNEHLM",112,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",113,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",114,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",115,0)
 ;
"RTN","IBCNEHLM",116,0)
 ; Set the NTE segment
"RTN","IBCNEHLM",117,0)
 S DSTAT=$$GETSTAT^IBCNEDST()
"RTN","IBCNEHLM",118,0)
 S VNTE="NTE"_HLFS_"1"_HLFS_HLFS_IBPERSIST_HLREP_$TR(DSTAT,U,HLREP)
"RTN","IBCNEHLM",119,0)
 S VNTE=VNTE_HLREP_RETRY_HLREP_TIMOUT          ;IB*2.0*506
"RTN","IBCNEHLM",120,0)
 S ^TMP("HLS",$J,4)=VNTE
"RTN","IBCNEHLM",121,0)
 ;
"RTN","IBCNEHLM",122,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",123,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",124,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",125,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",126,0)
 . D MLMN
"RTN","IBCNEHLM",127,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",128,0)
 Q
"RTN","IBCNEHLM",129,0)
 ;
"RTN","IBCNEHLM",130,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",131,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",132,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",133,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",134,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",135,0)
 Q
"RTN","IBCNEHLT")
0^6^B80145618^B77895122
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 09 Dec 2005  3:30 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300,416,438,506**;21-MAR-94;Build 74
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,REQSUB,NAFLG,NPFLG,TRUSTED
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an eIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; Build local table of file numbers to determine if response is eIV or ePHARM
"RTN","IBCNEHLT",20,0)
 F D=11:1:18 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",21,0)
 F D=21:1:28 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",22,0)
 S X12TABLE(350.9)=""      ; IB*2.0*506
"RTN","IBCNEHLT",23,0)
 ;
"RTN","IBCNEHLT",24,0)
 ; Decide if message belongs to "E-Pharm" or "eIV"
"RTN","IBCNEHLT",25,0)
 S APP=""
"RTN","IBCNEHLT",26,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",27,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",28,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"
"RTN","IBCNEHLT",29,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",30,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",31,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",32,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",33,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",34,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",35,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",36,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the eIV payer tables may be out"
"RTN","IBCNEHLT",37,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",38,0)
 ... S MSG(4)="from Austin."
"RTN","IBCNEHLT",39,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",40,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",41,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",42,0)
 ; If neither eIV or ePHARM then quit
"RTN","IBCNEHLT",43,0)
 I APP="" Q
"RTN","IBCNEHLT",44,0)
 ;
"RTN","IBCNEHLT",45,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",46,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",47,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",48,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",49,0)
 . ;
"RTN","IBCNEHLT",50,0)
 . I APP="E-PHARM" D
"RTN","IBCNEHLT",51,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",52,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",53,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",54,0)
 ... ;
"RTN","IBCNEHLT",55,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",56,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",57,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",58,0)
 ... ;
"RTN","IBCNEHLT",59,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",60,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",61,0)
 .. ;
"RTN","IBCNEHLT",62,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",63,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",64,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",65,0)
 ... ;
"RTN","IBCNEHLT",66,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",67,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",68,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",69,0)
 ... ;
"RTN","IBCNEHLT",70,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",71,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",72,0)
 ... ;
"RTN","IBCNEHLT",73,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",74,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",75,0)
 ... ;
"RTN","IBCNEHLT",76,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",77,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",78,0)
 .. ;
"RTN","IBCNEHLT",79,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",80,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",81,0)
 . ;
"RTN","IBCNEHLT",82,0)
 . ;
"RTN","IBCNEHLT",83,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",84,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",85,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",86,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",87,0)
 .. ;
"RTN","IBCNEHLT",88,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",89,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",90,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",91,0)
 ... ;
"RTN","IBCNEHLT",92,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",93,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",94,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",95,0)
 .... D TFIL
"RTN","IBCNEHLT",96,0)
 ... ;
"RTN","IBCNEHLT",97,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",98,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",99,0)
 ... ; Effective Date
"RTN","IBCNEHLT",100,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",101,0)
 .. ;
"RTN","IBCNEHLT",102,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",103,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",104,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",105,0)
 .. ;
"RTN","IBCNEHLT",106,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",107,0)
 ... S STAT=$S(IBSEG(4)="Y":1,1:0)
"RTN","IBCNEHLT",108,0)
 ... S TSSN=IBSEG(5),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",109,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",110,0)
 ... S TRUSTED=$S(IBSEG(10)="N":0,1:1)
"RTN","IBCNEHLT",111,0)
 ... D PFIL
"RTN","IBCNEHLT",112,0)
 Q
"RTN","IBCNEHLT",113,0)
 ;
"RTN","IBCNEHLT",114,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",115,0)
 ;  Set the action:
"RTN","IBCNEHLT",116,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",117,0)
 N OLDAF,OLDTF
"RTN","IBCNEHLT",118,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",119,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",120,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",121,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",122,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",123,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",124,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",125,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",126,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",127,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",128,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",129,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",130,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",131,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",132,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",133,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",134,0)
 N IBCNTYPE
"RTN","IBCNEHLT",135,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",136,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",137,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",138,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",139,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",140,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",141,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",142,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",143,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",144,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",145,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",146,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",147,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",148,0)
 ;
"RTN","IBCNEHLT",149,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",150,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",151,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",152,0)
 ;
"RTN","IBCNEHLT",153,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",154,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",155,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",156,0)
 ;
"RTN","IBCNEHLT",157,0)
 ;  Check for application
"RTN","IBCNEHLT",158,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",159,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",160,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",161,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",162,0)
 . K DD,DO
"RTN","IBCNEHLT",163,0)
 . D FILE^DICN
"RTN","IBCNEHLT",164,0)
 . K DO
"RTN","IBCNEHLT",165,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",166,0)
 ;
"RTN","IBCNEHLT",167,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",168,0)
 I APIEN="" D
"RTN","IBCNEHLT",169,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",170,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",171,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",172,0)
 . K DD,DO
"RTN","IBCNEHLT",173,0)
 . D FILE^DICN
"RTN","IBCNEHLT",174,0)
 . K DO
"RTN","IBCNEHLT",175,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",176,0)
 ; get current values for Active and Trusted flags
"RTN","IBCNEHLT",177,0)
 S OLDAF=$P(^IBE(365.12,IEN,1,APIEN,0),U,2),OLDTF=$P(^IBE(365.12,IEN,1,APIEN,0),U,7)
"RTN","IBCNEHLT",178,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",179,0)
 ;
"RTN","IBCNEHLT",180,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",181,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",182,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT();.07///^S X=TRUSTED"
"RTN","IBCNEHLT",183,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",184,0)
 ;
"RTN","IBCNEHLT",185,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",186,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",187,0)
 ;
"RTN","IBCNEHLT",188,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",189,0)
 ; Update flag logs
"RTN","IBCNEHLT",190,0)
 I STAT'=OLDAF D UPDLOG("A",STAT,IEN,APIEN)
"RTN","IBCNEHLT",191,0)
 I TRUSTED'=OLDTF D UPDLOG("T",TRUSTED,IEN,APIEN)
"RTN","IBCNEHLT",192,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",193,0)
PFILX ;
"RTN","IBCNEHLT",194,0)
 Q
"RTN","IBCNEHLT",195,0)
 ;
"RTN","IBCNEHLT",196,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",197,0)
 NEW DIC,X,DLAYGO,Y,IEN,MAX
"RTN","IBCNEHLT",198,0)
 ;
"RTN","IBCNEHLT",199,0)
 ; store the FILENAME, FIELDNAME and VALUE if the APP is IIV and FLN is 350.9.  - IB*2.0*506
"RTN","IBCNEHLT",200,0)
 ; For file #350.9, DESC represents the FIELD NUMBER and ID represents the VALUE.
"RTN","IBCNEHLT",201,0)
 I APP="IIV",FLN=350.9 D  Q
"RTN","IBCNEHLT",202,0)
 . S DIE=FLN,DA=1,DR=DESC_"///"_ID
"RTN","IBCNEHLT",203,0)
 . D ^DIE
"RTN","IBCNEHLT",204,0)
 ;
"RTN","IBCNEHLT",205,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",206,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",207,0)
 ; don't update existing entries
"RTN","IBCNEHLT",208,0)
 I IEN>0 Q
"RTN","IBCNEHLT",209,0)
 ;
"RTN","IBCNEHLT",210,0)
 D FIELD^DID(FLN,.02,,"FIELD LENGTH","MAX")
"RTN","IBCNEHLT",211,0)
 I MAX("FIELD LENGTH")>0 S DESC=$E(DESC,1,MAX("FIELD LENGTH")) ; restriction of the field in the DD
"RTN","IBCNEHLT",212,0)
 ; add new entry to the table
"RTN","IBCNEHLT",213,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///"_DESC
"RTN","IBCNEHLT",214,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///^S X=DESC"
"RTN","IBCNEHLT",215,0)
 K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",216,0)
 Q
"RTN","IBCNEHLT",217,0)
 ;
"RTN","IBCNEHLT",218,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",219,0)
 D FND
"RTN","IBCNEHLT",220,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",221,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",222,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",223,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",224,0)
 K DD,DO
"RTN","IBCNEHLT",225,0)
 D FILE^DICN
"RTN","IBCNEHLT",226,0)
 K DO
"RTN","IBCNEHLT",227,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",228,0)
MADX ;
"RTN","IBCNEHLT",229,0)
 Q
"RTN","IBCNEHLT",230,0)
 ;
"RTN","IBCNEHLT",231,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",232,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",233,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",234,0)
 ;
"RTN","IBCNEHLT",235,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",236,0)
 D IX^DIC
"RTN","IBCNEHLT",237,0)
 S IEN=+Y
"RTN","IBCNEHLT",238,0)
 Q
"RTN","IBCNEHLT",239,0)
 ;
"RTN","IBCNEHLT",240,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",241,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",242,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",243,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",244,0)
 .. ;
"RTN","IBCNEHLT",245,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",246,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",247,0)
 .. ;
"RTN","IBCNEHLT",248,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",249,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",250,0)
 .. ;
"RTN","IBCNEHLT",251,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",252,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",253,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",254,0)
 .. ;
"RTN","IBCNEHLT",255,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",256,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",257,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",258,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",259,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",260,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",261,0)
 Q
"RTN","IBCNEHLT",262,0)
 ;
"RTN","IBCNEHLT",263,0)
UPDLOG(FLAG,VALUE,PIEN,APIEN) ; Update active/trusted flag logs
"RTN","IBCNEHLT",264,0)
 ; FLAG - "A" for Active flag, "T" for Trusted flag
"RTN","IBCNEHLT",265,0)
 ; VALUE - new flag value (0 or 1)
"RTN","IBCNEHLT",266,0)
 ; PIEN - ien in PAYER file (365.12)
"RTN","IBCNEHLT",267,0)
 ; APIEN - ien in APPLICATION sub-file (365.121)
"RTN","IBCNEHLT",268,0)
 ;
"RTN","IBCNEHLT",269,0)
 N FILE,IENSTR,UPDT
"RTN","IBCNEHLT",270,0)
 I $G(FLAG)=""!($G(VALUE)="") Q
"RTN","IBCNEHLT",271,0)
 I +$G(PIEN)=0!(+$G(APIEN)=0) Q
"RTN","IBCNEHLT",272,0)
 S FILE=$S(FLAG="A":"365.1212",FLAG="T":"365.1213",1:"") I FILE="" Q
"RTN","IBCNEHLT",273,0)
 S IENSTR="+1,"_APIEN_","_PIEN_","
"RTN","IBCNEHLT",274,0)
 S UPDT(FILE,IENSTR,.01)=$$NOW^XLFDT()
"RTN","IBCNEHLT",275,0)
 S UPDT(FILE,IENSTR,.02)=VALUE
"RTN","IBCNEHLT",276,0)
 D UPDATE^DIE("E","UPDT")
"RTN","IBCNEHLT",277,0)
 Q
"RTN","IBCNERP8")
0^17^B75472595^B66453982
"RTN","IBCNERP8",1,0)
IBCNERP8 ;DAOU/BHS - IBCNE eIV STATISTICAL REPORT COMPILE ;11-JUN-2002
"RTN","IBCNERP8",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416,506**;21-MAR-94;Build 74
"RTN","IBCNERP8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP8",4,0)
 ;
"RTN","IBCNERP8",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP8",6,0)
 ;
"RTN","IBCNERP8",7,0)
 ;Input vars from IBCNERP7:
"RTN","IBCNERP8",8,0)
 ; IBCNERTN = "IBCNERP7"
"RTN","IBCNERP8",9,0)
 ; **IBCNESPC array ONLY passed by reference **
"RTN","IBCNERP8",10,0)
 ; IBCNESPC("BEGDTM") = Start Dt/Tm for rpt range
"RTN","IBCNERP8",11,0)
 ; IBCNESPC("ENDDTM") = End Dt/Tm for rpt range
"RTN","IBCNERP8",12,0)
 ; IBCNESPC("SECTS")  = 1 - All sections OR ',' sep'd list of 1 or more
"RTN","IBCNERP8",13,0)
 ;  of the following (not all)
"RTN","IBCNERP8",14,0)
 ;  2 - Outgoing data, inq trans stats
"RTN","IBCNERP8",15,0)
 ;  3 - Incoming data, resps rec'd stats
"RTN","IBCNERP8",16,0)
 ;  4 - Current status, pending resps, queued inqs, deferred inqs, payer
"RTN","IBCNERP8",17,0)
 ;      stats, ins buf stats
"RTN","IBCNERP8",18,0)
 ; IBCNESPC("MM") = "" - do not generate MailMan message OR MAILGROUP to
"RTN","IBCNERP8",19,0)
 ;  send report to Mail Group as defined in the IB site parameters
"RTN","IBCNERP8",20,0)
 ;Output vars:
"RTN","IBCNERP8",21,0)
 ; Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP8",22,0)
 ; may be built
"RTN","IBCNERP8",23,0)
 ; 1 OR contains 2 --> 
"RTN","IBCNERP8",24,0)
 ; ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",25,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",26,0)
 ; 1 OR contains 3 --> 
"RTN","IBCNERP8",27,0)
 ; ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",28,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",29,0)
 ; 1 OR contains 4 --> 
"RTN","IBCNERP8",30,0)
 ; ^TMP($J,RTN,"CUR")=TotPendingResponses^TotQueuedInquiries^...
"RTN","IBCNERP8",31,0)
 ;  TotDeferredInquiries(Hold)^TotInsCosw/oNationalID^...
"RTN","IBCNERP8",32,0)
 ;  ToteIVPyrsDisabldLocally^TotUserActReq^TotInsBufVerified^TotalManVerified...
"RTN","IBCNERP8",33,0)
 ;  TotaleIVVerified^TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP8",34,0)
 ;  ? InsBufSubtotal^- InsBufSubtotal^Other InsBufSubtotal^...
"RTN","IBCNERP8",35,0)
 ;  $ EscolatedBufSubtotal
"RTN","IBCNERP8",36,0)
 ; 1 OR contains 4 -->
"RTN","IBCNERP8",37,0)
 ; ^TMP($J,RTN,"PYR",PAYER,IEN)=""  (list of new payers)
"RTN","IBCNERP8",38,0)
 ;
"RTN","IBCNERP8",39,0)
 ; Must call at EN
"RTN","IBCNERP8",40,0)
 Q
"RTN","IBCNERP8",41,0)
 ;
"RTN","IBCNERP8",42,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP8",43,0)
 ; Init vars
"RTN","IBCNERP8",44,0)
 N IBBDT,IBEDT,IBSCT,IBTOT,PIECES,VALUE,CT
"RTN","IBCNERP8",45,0)
 ;
"RTN","IBCNERP8",46,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP8",47,0)
 ;
"RTN","IBCNERP8",48,0)
 S IBTOT=0
"RTN","IBCNERP8",49,0)
 ;
"RTN","IBCNERP8",50,0)
 ; Kill scratch global
"RTN","IBCNERP8",51,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERP8",52,0)
 ;
"RTN","IBCNERP8",53,0)
 ; Init looping vars
"RTN","IBCNERP8",54,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP8",55,0)
 S IBSCT=$G(IBCNESPC("SECTS"))
"RTN","IBCNERP8",56,0)
 ;
"RTN","IBCNERP8",57,0)
 I IBSCT=1!$F(IBSCT,",2,") D OUT(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",58,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",59,0)
 I IBSCT=1!$F(IBSCT,",3,") D IN(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",60,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",61,0)
 I IBSCT=1!$F(IBSCT,",4,") D CUR(IBCNERTN,IBBDT,IBEDT,.IBTOT),PYR^IBCNERP0(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",62,0)
 ;
"RTN","IBCNERP8",63,0)
EXIT ; EN Exit pt
"RTN","IBCNERP8",64,0)
 Q
"RTN","IBCNERP8",65,0)
 ;
"RTN","IBCNERP8",66,0)
IN(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP8",67,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP8",68,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP8",69,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP8",70,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"IN") as follows:
"RTN","IBCNERP8",71,0)
 ;  1=total Resps rec'd for date/time range
"RTN","IBCNERP8",72,0)
 ;  2=Ins Buf extract subtotal
"RTN","IBCNERP8",73,0)
 ;  3=Pre-Reg extract subtotal
"RTN","IBCNERP8",74,0)
 ;  4=Non-ver extract subtotal
"RTN","IBCNERP8",75,0)
 ;  5=No Act Ins subtotal
"RTN","IBCNERP8",76,0)
 ;
"RTN","IBCNERP8",77,0)
 ; Init vars
"RTN","IBCNERP8",78,0)
 N IBDT,PYRIEN,PATIEN,IBPTR,IBTYP,RPTDATA,TRANSIEN
"RTN","IBCNERP8",79,0)
 ;
"RTN","IBCNERP8",80,0)
 ; Loop thru the eIV Resp File (#365) x-ref on Date/Time Resp Rec'd
"RTN","IBCNERP8",81,0)
 S IBDT=$O(^IBCN(365,"AD",BDT),-1)
"RTN","IBCNERP8",82,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",83,0)
 . S PYRIEN=0
"RTN","IBCNERP8",84,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",85,0)
 . . S PATIEN=0
"RTN","IBCNERP8",86,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",87,0)
 . . . S IBPTR=0
"RTN","IBCNERP8",88,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",89,0)
 . . . . S TOT=TOT+1
"RTN","IBCNERP8",90,0)
 . . . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",91,0)
 . . . . ; Update total
"RTN","IBCNERP8",92,0)
 . . . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",93,0)
 . . . . ; Update extract type total
"RTN","IBCNERP8",94,0)
 . . . . ; Get the data for the report - build RPTDATA
"RTN","IBCNERP8",95,0)
 . . . . S IBTYP=5,TRANSIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",96,0)
 . . . . I TRANSIEN'="" S IBTYP=$P($G(^IBCN(365.1,TRANSIEN,0)),U,10) I IBTYP'="" S:+IBTYP<4 $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",97,0)
 ;
"RTN","IBCNERP8",98,0)
 I $G(ZTSTOP) G INX
"RTN","IBCNERP8",99,0)
 ;
"RTN","IBCNERP8",100,0)
 ; Save data to global
"RTN","IBCNERP8",101,0)
 S ^TMP($J,RTN,"IN")=$G(RPTDATA)
"RTN","IBCNERP8",102,0)
 ;
"RTN","IBCNERP8",103,0)
INX ; IN exit pt
"RTN","IBCNERP8",104,0)
 Q
"RTN","IBCNERP8",105,0)
 ;
"RTN","IBCNERP8",106,0)
OUT(RTN,BDT,EDT,TOT) ; Outgoing Data
"RTN","IBCNERP8",107,0)
 ;Input params:  RTN-routine name used as subscript in ^TMP($J),
"RTN","IBCNERP8",108,0)
 ; BDT-start date/time, EDT-end date/time, **TOT-total recs searched-used
"RTN","IBCNERP8",109,0)
 ; only for status checks when process is queued (passed by reference)
"RTN","IBCNERP8",110,0)
 ;Output vars: Set pcs of ^TMP($J,RTN,"OUT") as follows:
"RTN","IBCNERP8",111,0)
 ; 1=total Inqs transmitted for timeframe
"RTN","IBCNERP8",112,0)
 ; 2=Ins Buffer extract subtotal
"RTN","IBCNERP8",113,0)
 ; 3=Pre-Reg extract subtotal
"RTN","IBCNERP8",114,0)
 ; 4=Non-Ver extract subtotal
"RTN","IBCNERP8",115,0)
 ; 5=No Act Ins subtotal
"RTN","IBCNERP8",116,0)
 ;
"RTN","IBCNERP8",117,0)
 ; Init vars
"RTN","IBCNERP8",118,0)
 N IBDT,IBPTR,IBTYP,RPTDATA,TQIEN
"RTN","IBCNERP8",119,0)
 ;
"RTN","IBCNERP8",120,0)
 ; Loop thru the eIV Resp File (#365) by x-ref on Date/Time Resp Created
"RTN","IBCNERP8",121,0)
 ;  Only count responses for unique HL7 message IDs - filter out
"RTN","IBCNERP8",122,0)
 ;  unsolicited responses as they artificially inflate the Outgoing Count
"RTN","IBCNERP8",123,0)
 S IBDT=$O(^IBCN(365,"AE",BDT),-1)
"RTN","IBCNERP8",124,0)
 F  S IBDT=$O(^IBCN(365,"AE",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",125,0)
 . S IBPTR=0
"RTN","IBCNERP8",126,0)
 . F  S IBPTR=$O(^IBCN(365,"AE",IBDT,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",127,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",128,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",129,0)
 . . ; Quit, if response was not O - original
"RTN","IBCNERP8",130,0)
 . . I $P($G(^IBCN(365,IBPTR,0)),U,10)'="O" Q
"RTN","IBCNERP8",131,0)
 . . ; Update total
"RTN","IBCNERP8",132,0)
 . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",133,0)
 . . ; Update extract type total (1,2,3,4)
"RTN","IBCNERP8",134,0)
 . . S TQIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",135,0)
 . . I TQIEN="" Q
"RTN","IBCNERP8",136,0)
 . . S IBTYP=$P($G(^IBCN(365.1,TQIEN,0)),U,10)
"RTN","IBCNERP8",137,0)
 . . I IBTYP'="" S:IBTYP<4 $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",138,0)
 ;
"RTN","IBCNERP8",139,0)
 I $G(ZTSTOP) G OUTX
"RTN","IBCNERP8",140,0)
 ;
"RTN","IBCNERP8",141,0)
 ; Save data to global array
"RTN","IBCNERP8",142,0)
 S ^TMP($J,RTN,"OUT")=$G(RPTDATA)
"RTN","IBCNERP8",143,0)
 ;
"RTN","IBCNERP8",144,0)
OUTX ; OUT exit pt
"RTN","IBCNERP8",145,0)
 Q
"RTN","IBCNERP8",146,0)
 ;
"RTN","IBCNERP8",147,0)
CUR(RTN,BDT,EDT,TOT) ; Current Status - stats - timeframe independent
"RTN","IBCNERP8",148,0)
 ; Input params: RTN-routine name as subs in ^TMP($J), **TOT-total recs
"RTN","IBCNERP8",149,0)
 ;  searched - used only for status checks when the process is queued
"RTN","IBCNERP8",150,0)
 ;  passed by reference
"RTN","IBCNERP8",151,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"CUR") as follows:
"RTN","IBCNERP8",152,0)
 ;  1=total Pending Resps (Transmitted-2)
"RTN","IBCNERP8",153,0)
 ;  2=total Queued Inqs (Ready to Transmit-1/Retry-6)
"RTN","IBCNERP8",154,0)
 ;  3=total Deferred Inqs (Hold-4)
"RTN","IBCNERP8",155,0)
 ;  4=Ins Cos w/o National ID
"RTN","IBCNERP8",156,0)
 ;  5=Payers w/eIV disabled locally
"RTN","IBCNERP8",157,0)
 ;  6=total user action required (symbol'='*' or '#' or '!' or '?' or '-')
"RTN","IBCNERP8",158,0)
 ;  7=total Man. Ver'd Ins Buf entries (symbol='*')
"RTN","IBCNERP8",159,0)
 ;  8=total eIV Processed Ver. (symbol='+')
"RTN","IBCNERP8",160,0)
 ;  9=total awaiting processing (symbol='?' or BLANK)
"RTN","IBCNERP8",161,0)
 ;  10=total Ins Buf entries w/symbol='#'
"RTN","IBCNERP8",162,0)
 ;  11=total Ins Buf entries w/symbol='!'
"RTN","IBCNERP8",163,0)
 ;  12=total Ins Buf entries w/symbol='?'
"RTN","IBCNERP8",164,0)
 ;  13=total Ins Buf entries w/symbol='-'
"RTN","IBCNERP8",165,0)
 ;  14=total Ins Buffer entries w/symbol not in ('*','#','!','?','-')
"RTN","IBCNERP8",166,0)
 ;  15=total Ins Buffer entries w/symbol='$'
"RTN","IBCNERP8",167,0)
 ;  
"RTN","IBCNERP8",168,0)
 ;  ^TMP($J,RTN,"CUR","FLAGS","A",Payer name,N) = active flag timestamp ^ active flag setting
"RTN","IBCNERP8",169,0)
 ;  ^TMP($J,RTN,"CUR","FLAGS","T",Payer name,N) = trusted flag timestamp ^ trusted flag setting
"RTN","IBCNERP8",170,0)
 ;
"RTN","IBCNERP8",171,0)
 ; Init vars
"RTN","IBCNERP8",172,0)
 N RIEN,TQIEN,ICIEN,IBIEN,RPTDATA,IEN,IBSYMBOL,PIECE,IBSTS,APPIEN
"RTN","IBCNERP8",173,0)
 N PIEN,TMP,APPDATA,XDT,PDATA
"RTN","IBCNERP8",174,0)
 ;
"RTN","IBCNERP8",175,0)
 S RPTDATA=""
"RTN","IBCNERP8",176,0)
 ;
"RTN","IBCNERP8",177,0)
 ; Responses pending (Transmitted - 2)
"RTN","IBCNERP8",178,0)
 S RIEN=0
"RTN","IBCNERP8",179,0)
 F  S RIEN=$O(^IBCN(365,"AC",2,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",180,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",181,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",182,0)
 .  S $P(RPTDATA,U,1)=$P(RPTDATA,U,1)+1
"RTN","IBCNERP8",183,0)
 ;
"RTN","IBCNERP8",184,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",185,0)
 ;
"RTN","IBCNERP8",186,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and 
"RTN","IBCNERP8",187,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNERP8",188,0)
 F IBSTS=1,6,4 D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",189,0)
 . S TQIEN=0
"RTN","IBCNERP8",190,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",IBSTS,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",191,0)
 . .  S TOT=TOT+1
"RTN","IBCNERP8",192,0)
 . .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",193,0)
 . .  I IBSTS'=4 S $P(RPTDATA,U,2)=$P(RPTDATA,U,2)+1 Q
"RTN","IBCNERP8",194,0)
 . .  S $P(RPTDATA,U,3)=$P(RPTDATA,U,3)+1
"RTN","IBCNERP8",195,0)
 ;
"RTN","IBCNERP8",196,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",197,0)
 ;
"RTN","IBCNERP8",198,0)
 ; Payer stats
"RTN","IBCNERP8",199,0)
 ; Ins cos w/o National ID
"RTN","IBCNERP8",200,0)
 S ICIEN=0,$P(RPTDATA,U,4)=0
"RTN","IBCNERP8",201,0)
 F  S ICIEN=$O(^DIC(36,ICIEN)) Q:'ICIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",202,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",203,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",204,0)
 .  ; Exclude inactive
"RTN","IBCNERP8",205,0)
 .  S TMP=$$ACTIVE^IBCNEUT4(ICIEN) I 'TMP Q
"RTN","IBCNERP8",206,0)
 .  ; Exclude Medicaid, etc.
"RTN","IBCNERP8",207,0)
 .  I $$EXCLUDE^IBCNEUT4($P(TMP,U,2)) Q
"RTN","IBCNERP8",208,0)
 .  ; Does a NATIONAL ID exist?
"RTN","IBCNERP8",209,0)
 .  ; VA CBO defines 'No National ID' as lack of EDI IDs - fields (#36,3.02) & (#36,3.04) 3/4/14
"RTN","IBCNERP8",210,0)
 .  ; This is *NOT* a check for the 'VA NATIONAL ID' associated with the linked payer
"RTN","IBCNERP8",211,0)
 .  I ($$GET1^DIQ(36,ICIEN_",",3.02)="")&($$GET1^DIQ(36,ICIEN_",",3.04)="") S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",212,0)
 .  Q
"RTN","IBCNERP8",213,0)
 .  ; Determine assoc Payer
"RTN","IBCNERP8",214,0)
 .  ;S PIEN=$P($G(^DIC(36,ICIEN,3)),U,10)
"RTN","IBCNERP8",215,0)
 .  ; Missing payer link
"RTN","IBCNERP8",216,0)
 .  ;I 'PIEN S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",217,0)
 .  ; Does a VA NATIONAL ID exist?
"RTN","IBCNERP8",218,0)
 .  ;I $P($G(^IBE(365.12,PIEN,0)),U,2)'="" Q
"RTN","IBCNERP8",219,0)
 .  ;S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1
"RTN","IBCNERP8",220,0)
 ;
"RTN","IBCNERP8",221,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",222,0)
 ;
"RTN","IBCNERP8",223,0)
 ; eIV Payers disabled locally
"RTN","IBCNERP8",224,0)
 S PIEN=0
"RTN","IBCNERP8",225,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",226,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",227,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",228,0)
 .  S PDATA=$G(^IBE(365.12,PIEN,0))
"RTN","IBCNERP8",229,0)
 .  ; Must have National ID
"RTN","IBCNERP8",230,0)
 .  I $P(PDATA,U,2)="" Q
"RTN","IBCNERP8",231,0)
 .  ; Get Payer app multiple IEN
"RTN","IBCNERP8",232,0)
 .  S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP8",233,0)
 .  ; Must have eIV application
"RTN","IBCNERP8",234,0)
 .  I 'APPIEN Q
"RTN","IBCNERP8",235,0)
 .  ; Get Active/Trusted flag logs
"RTN","IBCNERP8",236,0)
 .  D GETFLAGS(PIEN,APPIEN,PDATA,BDT,EDT,.RPTDATA)
"RTN","IBCNERP8",237,0)
 .  ;
"RTN","IBCNERP8",238,0)
 .  S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP8",239,0)
 .  ; Must be Nationally Active
"RTN","IBCNERP8",240,0)
 .  I '$P(APPDATA,U,2) Q
"RTN","IBCNERP8",241,0)
 .  ; Must not be Locally Active
"RTN","IBCNERP8",242,0)
 .  I $P(APPDATA,U,3) Q
"RTN","IBCNERP8",243,0)
 .  S $P(RPTDATA,U,5)=$P(RPTDATA,U,5)+1
"RTN","IBCNERP8",244,0)
 ;
"RTN","IBCNERP8",245,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",246,0)
 ;
"RTN","IBCNERP8",247,0)
 ; Buffer stats
"RTN","IBCNERP8",248,0)
 ; Loop thru the Ins Buffer File (#355.33)
"RTN","IBCNERP8",249,0)
 S IBIEN=0,XDT=0
"RTN","IBCNERP8",250,0)
 F  S XDT=$O(^IBA(355.33,"AEST","E",XDT)) Q:XDT=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",251,0)
 . F  S IBIEN=$O(^IBA(355.33,"AEST","E",XDT,IBIEN)) Q:IBIEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",252,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",253,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",254,0)
 . . S IBSYMBOL=$$SYMBOL^IBCNBLL(IBIEN)
"RTN","IBCNERP8",255,0)
 . . ; Determine piece to update based on symbol
"RTN","IBCNERP8",256,0)
 . . ; ('*') = Man. Verified,  ('#','!','-','?',blank/null) = eIV Processing
"RTN","IBCNERP8",257,0)
 . . ; ('+') = eIV Processed, ('$') = Escalated, Active policy
"RTN","IBCNERP8",258,0)
 . . ; IB*2.0*506/taz Node 15 added.
"RTN","IBCNERP8",259,0)
 . . S PIECE=$S(IBSYMBOL="*":7,IBSYMBOL="+":8,IBSYMBOL="#":10,IBSYMBOL="!":11,IBSYMBOL="-":13,IBSYMBOL="?":12,IBSYMBOL="$":15,1:14)
"RTN","IBCNERP8",260,0)
 . . I PIECE=12!(PIECE=14) S $P(RPTDATA,U,9)=$P($G(RPTDATA),U,9)+1
"RTN","IBCNERP8",261,0)
 . . E  S $P(RPTDATA,U,6)=$P($G(RPTDATA),U,6)+1
"RTN","IBCNERP8",262,0)
 . . S $P(RPTDATA,U,PIECE)=$P($G(RPTDATA),U,PIECE)+1
"RTN","IBCNERP8",263,0)
 ;
"RTN","IBCNERP8",264,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",265,0)
 ;
"RTN","IBCNERP8",266,0)
 ; Save data to global
"RTN","IBCNERP8",267,0)
 M ^TMP($J,RTN,"CUR")=RPTDATA
"RTN","IBCNERP8",268,0)
 ;
"RTN","IBCNERP8",269,0)
CURX ; CUR exit point
"RTN","IBCNERP8",270,0)
 Q
"RTN","IBCNERP8",271,0)
 ;
"RTN","IBCNERP8",272,0)
GETFLAGS(PIEN,APPIEN,PDATA,BDT,EDT,RPTDATA) ; get Active/Trusted flag logs
"RTN","IBCNERP8",273,0)
 ; PIEN - Payer ien in file 365.12
"RTN","IBCNERP8",274,0)
 ; APPIEN - Application ien in subfile 365.121
"RTN","IBCNERP8",275,0)
 ; PDATA - 0 node of Payer file entry
"RTN","IBCNERP8",276,0)
 ; BDT - Start date/time
"RTN","IBCNERP8",277,0)
 ; EDT - End date/time
"RTN","IBCNERP8",278,0)
 ; RPTDATA - output array, passed by reference
"RTN","IBCNERP8",279,0)
 ; 
"RTN","IBCNERP8",280,0)
 N FLAGS,IEN,PNAME,TYP,TM,VAL,Z
"RTN","IBCNERP8",281,0)
 S PNAME=$P(PDATA,U)
"RTN","IBCNERP8",282,0)
 F TYP=2,3 S TM=EDT,Z=0 F  S TM=$O(^IBE(365.12,PIEN,1,APPIEN,TYP,"B",TM),-1) Q:TM=""!($$FMDIFF^XLFDT(TM,BDT,2)'>0)  D
"RTN","IBCNERP8",283,0)
 .S IEN=$O(^IBE(365.12,PIEN,1,APPIEN,TYP,"B",TM,""))
"RTN","IBCNERP8",284,0)
 .S VAL=$$EXTERNAL^DILFD("365.121"_TYP,.02,,$P(^IBE(365.12,PIEN,1,APPIEN,TYP,IEN,0),U,2))
"RTN","IBCNERP8",285,0)
 .S Z=Z+1,RPTDATA("FLAGS",$S(TYP=2:"A",1:"T"),PNAME,Z)=$$FMTE^XLFDT(TM,"5ZS")_"^"_VAL
"RTN","IBCNERP8",286,0)
 .Q
"RTN","IBCNERP8",287,0)
 Q
"RTN","IBCNERP9")
0^18^B103562066^B102330381
"RTN","IBCNERP9",1,0)
IBCNERP9 ;DAOU/BHS - eIV STATISTICAL REPORT PRINT ;12-JUN-2002
"RTN","IBCNERP9",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,506**;21-MAR-94;Build 74
"RTN","IBCNERP9",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP9",4,0)
 ;
"RTN","IBCNERP9",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP9",6,0)
 ;
"RTN","IBCNERP9",7,0)
 ; Input variables from IBCNERP7:
"RTN","IBCNERP9",8,0)
 ;  IBCNERTN = "IBCNERP7"
"RTN","IBCNERP9",9,0)
 ; **IBCNESPC array ONLY passed by reference
"RTN","IBCNERP9",10,0)
 ;  IBCNESPC("BEGDTM") = Start Date/Time for date/time report range
"RTN","IBCNERP9",11,0)
 ;  IBCNESPC("ENDDTM") = End Date/Time for date/time report range
"RTN","IBCNERP9",12,0)
 ;  IBCNESPC("SECTS") = 1 - All, includes all sections OR
"RTN","IBCNERP9",13,0)
 ;   list of one or more of the following:
"RTN","IBCNERP9",14,0)
 ;   2 - Outgoing Data, Inquiry Transmission data,
"RTN","IBCNERP9",15,0)
 ;   3 - Incoming Data, Inquiry Response data,
"RTN","IBCNERP9",16,0)
 ;   4 - General Data, Insurance Buffer data,
"RTN","IBCNERP9",17,0)
 ;   Communication Failures, Outstanding Inquiries
"RTN","IBCNERP9",18,0)
 ;   IBCNESPC("MM") = "", do not generate MailMan message OR
"RTN","IBCNERP9",19,0)
 ;                    MAILGROUP, mailgroup to send MailMan message to
"RTN","IBCNERP9",20,0)
 ;                               based on IB site parameter
"RTN","IBCNERP9",21,0)
 ;   Assumes report data exists in ^TMP($J,IBCNERTN,...)
"RTN","IBCNERP9",22,0)
 ;   Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP9",23,0)
 ;   will be built
"RTN","IBCNERP9",24,0)
 ;   1 OR contains 2 --> 
"RTN","IBCNERP9",25,0)
 ;    ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",26,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",27,0)
 ;   1 OR contains 3 --> 
"RTN","IBCNERP9",28,0)
 ;    ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",29,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",30,0)
 ;   1 OR contains 4 --> 
"RTN","IBCNERP9",31,0)
 ;    ^TMP($J,RTN,"CUR")=TotOutstandingInq^TotInqRetries^...
"RTN","IBCNERP9",32,0)
 ;                       TotInqCommFailure^TotInsBufVerified^...
"RTN","IBCNERP9",33,0)
 ;                       ManVerifedSubtotal^eIVProcessedSubtotal...
"RTN","IBCNERP9",34,0)
 ;                       TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP9",35,0)
 ;                       ? InsBufSubtotal^- InsBufSubtotal^...
"RTN","IBCNERP9",36,0)
 ;                       Other InsBufSubtotal^TQReadyToTransmit^...
"RTN","IBCNERP9",37,0)
 ;                       TQHold^TQRetry
"RTN","IBCNERP9",38,0)
 ;    and ^TMP($J,RTN","PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP9",39,0)
 ;
"RTN","IBCNERP9",40,0)
 ; Must call at EN
"RTN","IBCNERP9",41,0)
 Q
"RTN","IBCNERP9",42,0)
 ;
"RTN","IBCNERP9",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP9",44,0)
 ;
"RTN","IBCNERP9",45,0)
 ; Init vars
"RTN","IBCNERP9",46,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBSCT,IBMM,RETRY,OUTINQ,ATTEMPT
"RTN","IBCNERP9",47,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN
"RTN","IBCNERP9",48,0)
 ;
"RTN","IBCNERP9",49,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP9",50,0)
 S IBSCT=$G(IBCNESPC("SECTS")),IBMM=$G(IBCNESPC("MM"))
"RTN","IBCNERP9",51,0)
 ;
"RTN","IBCNERP9",52,0)
 S (IBPXT,IBPGC,CRT,MAXCNT)=0
"RTN","IBCNERP9",53,0)
 ;
"RTN","IBCNERP9",54,0)
 ; Determine IO parameters if output device is NOT MailMan message
"RTN","IBCNERP9",55,0)
 I IBMM="" D
"RTN","IBCNERP9",56,0)
 . I IOST["C-" S MAXCNT=IOSL-3,CRT=1 Q
"RTN","IBCNERP9",57,0)
 . S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERP9",58,0)
 ;
"RTN","IBCNERP9",59,0)
 D PRINT(IBCNERTN,IBBDT,IBEDT,IBSCT,IBMM,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERP9",60,0)
 I $G(ZTSTOP)!IBPXT G EXIT
"RTN","IBCNERP9",61,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D  G EXIT
"RTN","IBCNERP9",62,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERP9",63,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP9",64,0)
 ;
"RTN","IBCNERP9",65,0)
EXIT ; Exit pt
"RTN","IBCNERP9",66,0)
 Q
"RTN","IBCNERP9",67,0)
 ;
"RTN","IBCNERP9",68,0)
 ;
"RTN","IBCNERP9",69,0)
PRINT(RTN,BDT,EDT,SCT,MM,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP9",70,0)
 ; Init vars
"RTN","IBCNERP9",71,0)
 N EORMSG,NONEMSG,LINECT,DISPDATA,HDRDATA,OFFSET,TMP,DTMRNG,SITE
"RTN","IBCNERP9",72,0)
 ;
"RTN","IBCNERP9",73,0)
 S LINECT=0
"RTN","IBCNERP9",74,0)
 ;
"RTN","IBCNERP9",75,0)
 ; Build End-Of-Report Message for display
"RTN","IBCNERP9",76,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP9",77,0)
 S OFFSET=80-$L(EORMSG)\2
"RTN","IBCNERP9",78,0)
 S EORMSG=$$FO^IBCNEUT1(EORMSG,OFFSET+$L(EORMSG),"R")
"RTN","IBCNERP9",79,0)
 ; Build No-Data-Found Message for display
"RTN","IBCNERP9",80,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP9",81,0)
 S OFFSET=80-$L(NONEMSG)\2
"RTN","IBCNERP9",82,0)
 S NONEMSG=$$FO^IBCNEUT1(NONEMSG,OFFSET+$L(NONEMSG),"R")
"RTN","IBCNERP9",83,0)
 ; Build Site for display
"RTN","IBCNERP9",84,0)
 S SITE=$P($$SITE^VASITE,U,2)
"RTN","IBCNERP9",85,0)
 ; Build Date/Time Range for display
"RTN","IBCNERP9",86,0)
 ;  Build Date/Time display for Starting date/time
"RTN","IBCNERP9",87,0)
 S TMP=$$FMTE^XLFDT(BDT,"5Z")
"RTN","IBCNERP9",88,0)
 S DTMRNG=$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",89,0)
 ;  Calculate Date/Time display for Ending date/time
"RTN","IBCNERP9",90,0)
 S TMP=$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP9",91,0)
 S DTMRNG=DTMRNG_" - "_$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",92,0)
 ;
"RTN","IBCNERP9",93,0)
 ; Print header to DISPDATA for MailMan message ONLY
"RTN","IBCNERP9",94,0)
 D HEADER^IBCNERP0(.HDRDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",95,0)
 I MM'="" M DISPDATA=HDRDATA S LINECT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",96,0)
 I MM="" KILL HDRDATA
"RTN","IBCNERP9",97,0)
 ;
"RTN","IBCNERP9",98,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERP9",99,0)
 I '$D(^TMP($J,RTN)) S LINECT=LINECT+1,DISPDATA(LINECT)=NONEMSG G PRINT2
"RTN","IBCNERP9",100,0)
 ;
"RTN","IBCNERP9",101,0)
 ; Display Outgoing Data - if selected
"RTN","IBCNERP9",102,0)
 I SCT=1!(SCT[2) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",103,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",104,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"OUT",MM)
"RTN","IBCNERP9",105,0)
 ;
"RTN","IBCNERP9",106,0)
 ; Display Incoming Data - if selected
"RTN","IBCNERP9",107,0)
 I SCT=1!(SCT[3) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",108,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",109,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"IN",MM)
"RTN","IBCNERP9",110,0)
 ;
"RTN","IBCNERP9",111,0)
 ; Display General Data - if selected
"RTN","IBCNERP9",112,0)
 I SCT=1!(SCT[4) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",113,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",114,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"CUR",MM)
"RTN","IBCNERP9",115,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"PYR",MM)
"RTN","IBCNERP9",116,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"FLG",MM)
"RTN","IBCNERP9",117,0)
 ;
"RTN","IBCNERP9",118,0)
PRINT2 S LINECT=LINECT+1
"RTN","IBCNERP9",119,0)
 S DISPDATA(LINECT)=EORMSG
"RTN","IBCNERP9",120,0)
 ;
"RTN","IBCNERP9",121,0)
 I MM="" D LINE(.DISPDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",122,0)
 ; Generate MailMan message, if flag is set
"RTN","IBCNERP9",123,0)
 I MM'="" D MSG^IBCNEUT5(MM,"** eIV Statistical Rpt **","DISPDATA(")
"RTN","IBCNERP9",124,0)
 ;
"RTN","IBCNERP9",125,0)
PRINTX ; PRINT exit pt
"RTN","IBCNERP9",126,0)
 Q
"RTN","IBCNERP9",127,0)
 ;
"RTN","IBCNERP9",128,0)
LINE(DISPDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print line of data
"RTN","IBCNERP9",129,0)
 ; Init vars
"RTN","IBCNERP9",130,0)
 N CT,II,ARRAY,NWPG
"RTN","IBCNERP9",131,0)
 ;
"RTN","IBCNERP9",132,0)
 S NWPG=0
"RTN","IBCNERP9",133,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",134,0)
 I $Y+1+CT>MAX,PGC>1 D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) G LINEX
"RTN","IBCNERP9",135,0)
 F II=1:1:CT D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP9",136,0)
 . I $Y+1>MAX!('PGC) D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) Q
"RTN","IBCNERP9",137,0)
 . I 'NWPG!(NWPG&(DISPDATA(II)'="")) W !,?1,DISPDATA(II)
"RTN","IBCNERP9",138,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP9",139,0)
 ;
"RTN","IBCNERP9",140,0)
LINEX ; LINE exit pt
"RTN","IBCNERP9",141,0)
 Q
"RTN","IBCNERP9",142,0)
 ;
"RTN","IBCNERP9",143,0)
DATA(DISPDATA,LINECT,RTN,TYPE,MM) ; Format lines of data to be printed
"RTN","IBCNERP9",144,0)
 ; Init vars
"RTN","IBCNERP9",145,0)
 N DASHES,PEND,RPTDATA,CT,DEFINQ,INSCOS,PAYERS,QUEINQ,TXT
"RTN","IBCNERP9",146,0)
 ;
"RTN","IBCNERP9",147,0)
 S $P(DASHES,"=",15)=""
"RTN","IBCNERP9",148,0)
 I LINECT>0,MM="" S LINECT=LINECT+1,DISPDATA(LINECT)=""
"RTN","IBCNERP9",149,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",150,0)
 S DISPDATA(LINECT)=$S(TYPE="OUT":"Outgoing Data",TYPE="IN":"Incoming Data",1:"Current Status")
"RTN","IBCNERP9",151,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",152,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP9",153,0)
 ; Copy report data to local variable
"RTN","IBCNERP9",154,0)
 S RPTDATA=$G(^TMP($J,RTN,TYPE))      ; does not work for "PYR"
"RTN","IBCNERP9",155,0)
 ; Outgoing and Incoming Totals
"RTN","IBCNERP9",156,0)
 I TYPE="OUT"!(TYPE="IN") D  G DATAX
"RTN","IBCNERP9",157,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",158,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1($S(TYPE="OUT":"Inquiries Sent:",1:"Responses Received:"),36)_$$FO^IBCNEUT1(+$P(RPTDATA,U,1),9,"R")
"RTN","IBCNERP9",159,0)
 . F CT=1:1:3 D
"RTN","IBCNERP9",160,0)
 . . S TYPE="  "_$S(CT=1:"Insurance Buffer",CT=2:"Appointment",1:"Non-verified Insurance")
"RTN","IBCNERP9",161,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",162,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT+1),9,"R")
"RTN","IBCNERP9",163,0)
 ;
"RTN","IBCNERP9",164,0)
 ; General Data
"RTN","IBCNERP9",165,0)
 I TYPE="CUR" D  G DATAX
"RTN","IBCNERP9",166,0)
 . ; Responses Pending
"RTN","IBCNERP9",167,0)
 . S PEND=+$P(RPTDATA,U,1)
"RTN","IBCNERP9",168,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",169,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Responses Pending:",36)_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP9",170,0)
 . ; Queued Inqs
"RTN","IBCNERP9",171,0)
 . S QUEINQ=+$P(RPTDATA,U,2)
"RTN","IBCNERP9",172,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",173,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Queued Inquiries:",36)_$$FO^IBCNEUT1(QUEINQ,9,"R")
"RTN","IBCNERP9",174,0)
 . ; Deferred Inqs
"RTN","IBCNERP9",175,0)
 . S DEFINQ=+$P(RPTDATA,U,3)
"RTN","IBCNERP9",176,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",177,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Deferred Inquiries:",36)_$$FO^IBCNEUT1(DEFINQ,9,"R")
"RTN","IBCNERP9",178,0)
 . ; Ins Cos w/o Nat ID
"RTN","IBCNERP9",179,0)
 . S INSCOS=+$P(RPTDATA,U,4)
"RTN","IBCNERP9",180,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",181,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Companies w/o National ID:",36)_$$FO^IBCNEUT1(INSCOS,9,"R")
"RTN","IBCNERP9",182,0)
 . ; Payers disabled locally
"RTN","IBCNERP9",183,0)
 . S PAYERS=+$P(RPTDATA,U,5)
"RTN","IBCNERP9",184,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",185,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("eIV Payers Disabled Locally:",36)_$$FO^IBCNEUT1(PAYERS,9,"R")
"RTN","IBCNERP9",186,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",187,0)
 . S DISPDATA(LINECT)=""
"RTN","IBCNERP9",188,0)
 . ; Insurance Buffer statistics
"RTN","IBCNERP9",189,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",190,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Buffer Entries: ",36)_$$FO^IBCNEUT1(($P(RPTDATA,U,6)+$P(RPTDATA,U,9)),9,"R")
"RTN","IBCNERP9",191,0)
 . ; *,+,#,! or -  symbol entries - User action required
"RTN","IBCNERP9",192,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",193,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  User Action Required: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,6),9,"R")
"RTN","IBCNERP9",194,0)
 . F CT=7,8,15,13,10,11 D
"RTN","IBCNERP9",195,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",196,0)
 . . ; Added # to report
"RTN","IBCNERP9",197,0)
 . . S TYPE="    # of "
"RTN","IBCNERP9",198,0)
 . . I CT=7 S TXT="* entries (User Verified policy)"
"RTN","IBCNERP9",199,0)
 . . I CT=8 S TXT="+ entries (Payer indicated Active policy)"
"RTN","IBCNERP9",200,0)
 . . I CT=10 S TXT="# entries (Policy status undetermined)"
"RTN","IBCNERP9",201,0)
 . . I CT=11 S TXT="! entries (eIV needs user assistance for entry)"
"RTN","IBCNERP9",202,0)
 . . I CT=13 S TXT="- entries (Payer indicated Inactive policy)"
"RTN","IBCNERP9",203,0)
 . . I CT=15 S TXT="$ entries (Escalated, Active policy)"
"RTN","IBCNERP9",204,0)
 . . S TYPE=TYPE_TXT
"RTN","IBCNERP9",205,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT),9,"R")
"RTN","IBCNERP9",206,0)
 . ;
"RTN","IBCNERP9",207,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",208,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  Entries Awaiting Processing: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,9),9,"R")
"RTN","IBCNERP9",209,0)
 . ; Subtotal of ? entries (eIV is waiting for a response)
"RTN","IBCNERP9",210,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",211,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of ? entries (eIV is waiting for a response)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,12),9,"R")
"RTN","IBCNERP9",212,0)
 . ; Subtotal of blank entries (yet to be processed or accepted)
"RTN","IBCNERP9",213,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",214,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of blank entries (yet to be processed or accepted)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,14),9,"R")
"RTN","IBCNERP9",215,0)
 ;
"RTN","IBCNERP9",216,0)
 ; New Payers added to File 365.12
"RTN","IBCNERP9",217,0)
 I TYPE="PYR" D  G DATAX
"RTN","IBCNERP9",218,0)
 . ; Payers added to file 365.12
"RTN","IBCNERP9",219,0)
 . D DATAX
"RTN","IBCNERP9",220,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",221,0)
 . S DISPDATA(LINECT)="New eIV Payers received during report date range:"
"RTN","IBCNERP9",222,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",223,0)
 . I '$D(^TMP($J,RTN,TYPE)) S DISPDATA(LINECT)="    No new Payers added" Q
"RTN","IBCNERP9",224,0)
 . S DISPDATA(LINECT)="  Please link the associated active insurance companies to these payers at your"
"RTN","IBCNERP9",225,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  earliest convenience.  Locally activate the payers after you link insurance"
"RTN","IBCNERP9",226,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  companies to them.  For further details regarding this process, please refer"
"RTN","IBCNERP9",227,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  to the Integrated Billing eIV Interface User Guide."
"RTN","IBCNERP9",228,0)
 . N PYR,PIEN
"RTN","IBCNERP9",229,0)
 . S PYR="",PIEN="" F  S PYR=$O(^TMP($J,RTN,TYPE,PYR)) Q:PYR=""  D
"RTN","IBCNERP9",230,0)
 . . F  S PIEN=$O(^TMP($J,RTN,TYPE,PYR,PIEN)) Q:'PIEN  S LINECT=LINECT+1,DISPDATA(LINECT)="    "_PYR
"RTN","IBCNERP9",231,0)
 ;
"RTN","IBCNERP9",232,0)
 ; Active/Trusted flag logs
"RTN","IBCNERP9",233,0)
 I TYPE="FLG" D  G DATAX
"RTN","IBCNERP9",234,0)
 .N DATA,PNAME,Z,FLG
"RTN","IBCNERP9",235,0)
 .F FLG="A","T" D
"RTN","IBCNERP9",236,0)
 ..S LINECT=LINECT+1,DISPDATA(LINECT)="",LINECT=LINECT+1
"RTN","IBCNERP9",237,0)
 ..I FLG="A" D
"RTN","IBCNERP9",238,0)
 ...S DISPDATA(LINECT)="National Payers - ACTIVE flag changes at FSC"
"RTN","IBCNERP9",239,0)
 ...S LINECT=LINECT+1
"RTN","IBCNERP9",240,0)
 ...S DISPDATA(LINECT)="============================================"
"RTN","IBCNERP9",241,0)
 ...Q
"RTN","IBCNERP9",242,0)
 ..I FLG="T" D
"RTN","IBCNERP9",243,0)
 ...S DISPDATA(LINECT)="Nationally Active Payers - TRUSTED flag changes at FSC"
"RTN","IBCNERP9",244,0)
 ...S LINECT=LINECT+1
"RTN","IBCNERP9",245,0)
 ...S DISPDATA(LINECT)="======================================================"
"RTN","IBCNERP9",246,0)
 ...Q
"RTN","IBCNERP9",247,0)
 ..I '$D(^TMP($J,RTN,"CUR","FLAGS",FLG)) S LINECT=LINECT+1,DISPDATA(LINECT)=" No information available" Q
"RTN","IBCNERP9",248,0)
 ..S PNAME="" F  S PNAME=$O(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME)) Q:PNAME=""  D
"RTN","IBCNERP9",249,0)
 ...S Z="" F  S Z=$O(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME,Z)) Q:Z=""  D
"RTN","IBCNERP9",250,0)
 ....S DATA=$G(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME,Z))
"RTN","IBCNERP9",251,0)
 ....S LINECT=LINECT+1
"RTN","IBCNERP9",252,0)
 ....S DISPDATA(LINECT)=$$FO^IBCNEUT1(" "_PNAME,47)_$$FO^IBCNEUT1($P(DATA,U),19)_" Set: "_$P(DATA,U,2)
"RTN","IBCNERP9",253,0)
 ....Q
"RTN","IBCNERP9",254,0)
 ...Q
"RTN","IBCNERP9",255,0)
 ..Q
"RTN","IBCNERP9",256,0)
 .Q
"RTN","IBCNERP9",257,0)
DATAX ; DATA exit pt
"RTN","IBCNERP9",258,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",259,0)
 S DISPDATA(LINECT)=""
"RTN","IBCNERP9",260,0)
 Q
"RTN","IBCNERP9",261,0)
 ;
"RTN","IBCNERP9",262,0)
 ;
"RTN","IBCNERPE")
0^10^B65900140^B60593817
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300,416,438,497,506**;21-MAR-94;Build 74
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N %,CNPTR,CT,DIW,DIWI,DIWT,DIWTC,DIWX,DN,EACT,ELOC,ESRC,ETXT,DQUAL,DTYPE,FUTDT,IENS,II,LOOP,NODE0,PC,TQIEN,Z
"RTN","IBCNERPE",13,0)
 ;
"RTN","IBCNERPE",14,0)
 ; Insured Info from eIV Response #365
"RTN","IBCNERPE",15,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",16,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",17,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",18,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",19,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",20,0)
 S IENS=IEN_","
"RTN","IBCNERPE",21,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IENS,1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IENS,1.13,"E")  ; COB
"RTN","IBCNERPE",23,0)
 S RPTDATA(8)=$$GET1^DIQ(365,IENS,8.01,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 ; if pt. rel is empty, try to get value from the old field 365/1.09
"RTN","IBCNERPE",25,0)
 I RPTDATA(8)="" S RPTDATA(8)=$$GET1^DIQ(365,IENS,1.09,"E")
"RTN","IBCNERPE",26,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",28,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",29,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",30,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",31,0)
 ;
"RTN","IBCNERPE",32,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",33,0)
 S CT=0
"RTN","IBCNERPE",34,0)
 F  S CT=$O(^IBCN(365,IEN,3,CT)) Q:'CT  D
"RTN","IBCNERPE",35,0)
 .S RPTDATA(3,CT)=$G(^IBCN(365,IEN,3,CT,0))
"RTN","IBCNERPE",36,0)
 .; Obtain the various Communication Text fields
"RTN","IBCNERPE",37,0)
 .F II=1:1:3 S RPTDATA(3,CT,II)=$G(^IBCN(365,IEN,3,CT,II))
"RTN","IBCNERPE",38,0)
 .; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",39,0)
 . I $P(RPTDATA(3,CT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CT),U)=""
"RTN","IBCNERPE",40,0)
 .; Comm Qual #1-3
"RTN","IBCNERPE",41,0)
 .F II=1:1:3 D
"RTN","IBCNERPE",42,0)
 ..S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CT),U,II*2))
"RTN","IBCNERPE",43,0)
 ..;;;I CNPTR'="" S $P(RPTDATA(3,CT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CT),U,II*2+1),$P(RPTDATA(3,CT),U,II*2+1)=""
"RTN","IBCNERPE",44,0)
 ..I CNPTR'="" S RPTDATA(3,CT,II)=CNPTR_": "_$G(RPTDATA(3,CT,II))
"RTN","IBCNERPE",45,0)
 ;
"RTN","IBCNERPE",46,0)
 ; Subscriber level dates (ZTP segments)
"RTN","IBCNERPE",47,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,7,CT)) Q:'CT  D
"RTN","IBCNERPE",48,0)
 .S NODE0=$G(^IBCN(365,IEN,7,CT,0))
"RTN","IBCNERPE",49,0)
 .S DQUAL=$P(NODE0,U,3) I 'DQUAL Q
"RTN","IBCNERPE",50,0)
 .S LOOP=$$GET1^DIQ(365.027,$P(NODE0,U,4)_",",.01)
"RTN","IBCNERPE",51,0)
 .S DTYPE=$S(LOOP["C":"S",LOOP["D":"P",1:"O")
"RTN","IBCNERPE",52,0)
 .S RPTDATA(7,DTYPE,CT)=$$X12^IBCNERP2(365.026,DQUAL)_U_$P(NODE0,U,2)
"RTN","IBCNERPE",53,0)
 .Q
"RTN","IBCNERPE",54,0)
 ;
"RTN","IBCNERPE",55,0)
 ; Reject reasons
"RTN","IBCNERPE",56,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,6,CT)) Q:'CT  D
"RTN","IBCNERPE",57,0)
 .S NODE0=$G(^IBCN(365,IEN,6,CT,0)) I '$P(NODE0,U,3) Q
"RTN","IBCNERPE",58,0)
 .S ETXT=$$X12^IBCNERP2(365.017,$P(NODE0,U,3))
"RTN","IBCNERPE",59,0)
 .S ELOC=$P(NODE0,U,2) S:ELOC="" ELOC="N/A"
"RTN","IBCNERPE",60,0)
 .S EACT=$$X12^IBCNERP2(365.018,$P(NODE0,U,4)) S:EACT="" EACT="N/A"
"RTN","IBCNERPE",61,0)
 .S LOOP=$$X12^IBCNERP2(365.027,$P(NODE0,U,5)) S:LOOP="" LOOP="N/A"
"RTN","IBCNERPE",62,0)
 .S ESRC=$P(NODE0,U,6) S:ESRC="" ESRC="N/A"
"RTN","IBCNERPE",63,0)
 .;IB*2*497   modify existing line below to retrieve external value of ERROR CODE and ACTION CODE
"RTN","IBCNERPE",64,0)
 . ;and build as part of the composite string at RPTDATA(6,CT).
"RTN","IBCNERPE",65,0)
 .S RPTDATA(6,CT)=ELOC_U_$$GET1^DIQ(365.017,$P(NODE0,U,3)_",",.01)_U_ETXT_U_$$GET1^DIQ(365.018,$P(NODE0,U,4)_",",.01)_U_EACT_U_LOOP_U_ESRC
"RTN","IBCNERPE",66,0)
 .; IB*2*497  retrieve additional messages
"RTN","IBCNERPE",67,0)
 .S Z=0 F  S Z=$O(^IBCN(365,IEN,6,CT,1,Z)) Q:'Z  S RPTDATA(6,CT,"AMSG",Z)=$P($G(^IBCN(365,IEN,6,CT,1,Z,0)),U)
"RTN","IBCNERPE",68,0)
 .Q
"RTN","IBCNERPE",69,0)
 ;
"RTN","IBCNERPE",70,0)
 ; Subscriber Data
"RTN","IBCNERPE",71,0)
 S RPTDATA(13)=$G(^IBCN(365,IEN,13))
"RTN","IBCNERPE",72,0)
 ;
"RTN","IBCNERPE",73,0)
 ; Group Data
"RTN","IBCNERPE",74,0)
 S RPTDATA(14)=$G(^IBCN(365,IEN,14))
"RTN","IBCNERPE",75,0)
 ;
"RTN","IBCNERPE",76,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",77,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",78,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",79,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",80,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",81,0)
 ;
"RTN","IBCNERPE",82,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",83,0)
 Q
"RTN","IBCNERPE",84,0)
 ;
"RTN","IBCNERPE",85,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",86,0)
 ;
"RTN","IBCNERPE",87,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",88,0)
 N LCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA,DCT,DTYPE
"RTN","IBCNERPE",89,0)
 ; Merge into local array
"RTN","IBCNERPE",90,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",91,0)
 ; Build
"RTN","IBCNERPE",92,0)
 S LCT=1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.01),17,"R")_$P(RPTDATA(13),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",93,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.02),17,"R")_$P(RPTDATA(13),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",94,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),17,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",95,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",96,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.01),17,"R")_$P(RPTDATA(14),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",97,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.02),17,"R")_$P(RPTDATA(14),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",98,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,8.01),22,"R")_RPTDATA(8)
"RTN","IBCNERPE",99,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",100,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",101,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",102,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",103,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",104,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",105,0)
 ;
"RTN","IBCNERPE",106,0)
 ; Dates
"RTN","IBCNERPE",107,0)
 F DTYPE="S","P","O" D
"RTN","IBCNERPE",108,0)
 .I '$D(RPTDATA(7,DTYPE)) Q
"RTN","IBCNERPE",109,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",110,0)
 .S LCT=LCT+1,DISPDATA(LCT)=$S(DTYPE="S":"Subscriber",DTYPE="P":"Patient",1:"Other")_" Dates:"
"RTN","IBCNERPE",111,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",112,0)
 .S DCT="" F  S DCT=$O(RPTDATA(7,DTYPE,DCT)) Q:DCT=""  D
"RTN","IBCNERPE",113,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($P(RPTDATA(7,DTYPE,DCT),U)_": ",40)_$P(RPTDATA(7,DTYPE,DCT),U,2)
"RTN","IBCNERPE",114,0)
 ..Q
"RTN","IBCNERPE",115,0)
 .Q
"RTN","IBCNERPE",116,0)
 ;
"RTN","IBCNERPE",117,0)
 ; Contacts
"RTN","IBCNERPE",118,0)
CONT ;
"RTN","IBCNERPE",119,0)
 N TEXT
"RTN","IBCNERPE",120,0)
 S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",121,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",122,0)
 S LCT=LCT+1,DISPDATA(LCT)="CONTACT INFORMATION:"
"RTN","IBCNERPE",123,0)
 ; Build
"RTN","IBCNERPE",124,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",125,0)
 . S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",126,0)
 . S LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",127,0)
 . S SEGCT=$O(RPTDATA(3,CT,""),-1)
"RTN","IBCNERPE",128,0)
 . S TEXT=""
"RTN","IBCNERPE",129,0)
 . I $L($P(RPTDATA(3,CT),U,1)) S TEXT=$P(RPTDATA(3,CT),U,1)
"RTN","IBCNERPE",130,0)
 . F CT2=1:1:SEGCT S ITEM=$G(RPTDATA(3,CT,CT2)) D
"RTN","IBCNERPE",131,0)
 . . Q:'$L(ITEM)
"RTN","IBCNERPE",132,0)
 . . S TEXT=$S($L(TEXT):" "_TEXT_",  ",1:" ")_ITEM
"RTN","IBCNERPE",133,0)
 . . F  D  Q:'$L(TEXT)
"RTN","IBCNERPE",134,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)=$E(TEXT,1,74)
"RTN","IBCNERPE",135,0)
 . . . I $L(TEXT)>74 S TEXT=$E(TEXT,75,$L(TEXT)) Q
"RTN","IBCNERPE",136,0)
 . . . S TEXT=""
"RTN","IBCNERPE",137,0)
 . . . Q
"RTN","IBCNERPE",138,0)
 . . Q
"RTN","IBCNERPE",139,0)
 ; Err Info
"RTN","IBCNERPE",140,0)
ERR S ERCT=+$O(RPTDATA(6,""),-1) I 'ERCT G DATAX
"RTN","IBCNERPE",141,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",142,0)
 S LCT=LCT+1,DISPDATA(LCT)="ERROR INFORMATION:"
"RTN","IBCNERPE",143,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",144,0)
 F CT=1:1:ERCT D
"RTN","IBCNERPE",145,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Code: "_$P(RPTDATA(6,CT),U,2) ; ib*2*497
"RTN","IBCNERPE",146,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Text: "_$P(RPTDATA(6,CT),U,3) ; ib*2*497
"RTN","IBCNERPE",147,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code:   "_$P(RPTDATA(6,CT),U,4)   ; ib*2*497
"RTN","IBCNERPE",148,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code Text: "_$P(RPTDATA(6,CT),U,5)  ;IB*2*497
"RTN","IBCNERPE",149,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HIPAA Loop:    "_$P(RPTDATA(6,CT),U,6)   ; ib*2*497
"RTN","IBCNERPE",150,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HL7 Location:  "_$P(RPTDATA(6,CT),U)
"RTN","IBCNERPE",151,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Error Source:  "_$P(RPTDATA(6,CT),U,7)   ; ib*2*497
"RTN","IBCNERPE",152,0)
 .I $D(RPTDATA(6,CT,"AMSG")) D
"RTN","IBCNERPE",153,0)
 ..I ERCT>0 S LCT=LCT+1,DISPDATA(LCT)=""  ; IB*506
"RTN","IBCNERPE",154,0)
 ..S LCT=LCT+1,DISPDATA(LCT)="Additional Messages:"
"RTN","IBCNERPE",155,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",156,0)
 ..S Z=0 F  S Z=$O(RPTDATA(6,CT,"AMSG",Z)) Q:'Z  S LCT=LCT+1,DISPDATA(LCT)=RPTDATA(6,CT,"AMSG",Z)
"RTN","IBCNERPE",157,0)
 ..Q
"RTN","IBCNERPE",158,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",159,0)
 .Q
"RTN","IBCNERPE",160,0)
 ;
"RTN","IBCNERPE",161,0)
DATAX ;
"RTN","IBCNERPE",162,0)
 N RIBVDA,RSPIENS
"RTN","IBCNERPE",163,0)
 S RIBVDA=$P(RPTDATA(0),U,4)
"RTN","IBCNERPE",164,0)
 S RSPIENS=$O(^IBCN(365,"AF",+$G(RIBVDA),""),-1)
"RTN","IBCNERPE",165,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",166,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",167,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",168,0)
 .. S LCT=LCT+1,DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT))
"RTN","IBCNERPE",169,0)
 ;
"RTN","IBCNERPE",170,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNERPE",171,0)
 ; Added the Elig. Ben. info to print at the end of the patient's display on the e-IV Response Report.
"RTN","IBCNERPE",172,0)
 S LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",173,0)
 K ^TMP("EIV RESP. EB DATA",$J)
"RTN","IBCNERPE",174,0)
 D INIT^IBCNES(365.02,RSPIENS_",","A",1,"EIV RESP. EB DATA")
"RTN","IBCNERPE",175,0)
 N TCTR
"RTN","IBCNERPE",176,0)
 S TCTR=""
"RTN","IBCNERPE",177,0)
 F  S TCTR=$O(^TMP("EIV RESP. EB DATA",$J,"DISP",TCTR)) Q:TCTR=""  D
"RTN","IBCNERPE",178,0)
 . S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($G(^TMP("EIV RESP. EB DATA",$J,"DISP",TCTR,0)),76)
"RTN","IBCNERPE",179,0)
 ; /IB*2.0*506 End
"RTN","IBCNERPE",180,0)
 ;
"RTN","IBCNERPE",181,0)
 Q
"RTN","IBCNERPE",182,0)
 ;
"RTN","IBCNERPE",183,0)
WRAPIT(ITEM,RCTR,DARRAY,MAX,INDENT) ; Module to wrap text into a display array.
"RTN","IBCNERPE",184,0)
 ;   ITEM = Text to be wrapped.
"RTN","IBCNERPE",185,0)
 ;   RCTR = Current Record counter.
"RTN","IBCNERPE",186,0)
 ;   DARRAY = Current Display Array.
"RTN","IBCNERPE",187,0)
 ;   MAX = Maximum number of characters for one line before wrapping.
"RTN","IBCNERPE",188,0)
 ;   INDENT = Character position to indent extra text when wrapping.
"RTN","IBCNERPE",189,0)
 ;
"RTN","IBCNERPE",190,0)
 N TXT,I,SPACE
"RTN","IBCNERPE",191,0)
 S TXT=ITEM,$P(SPACE," ",INDENT)=" "
"RTN","IBCNERPE",192,0)
 F  D  Q:'$L(TXT)
"RTN","IBCNERPE",193,0)
 .S DARRAY(RCTR)=$E(TXT,1,MAX)
"RTN","IBCNERPE",194,0)
 .S TXT=$E(TXT,MAX+1,$L(TXT)) Q:'$L(TXT)
"RTN","IBCNERPE",195,0)
 .S RCTR=RCTR+1
"RTN","IBCNERPE",196,0)
 .S TXT=SPACE_TXT
"RTN","IBCNERPE",197,0)
 Q
"RTN","IBCNES")
0^11^B63081036^B28429551
"RTN","IBCNES",1,0)
IBCNES ;ALB/ESG - eIV elig/Benefit screen ;14-Jul-2009
"RTN","IBCNES",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438,497,506**;21-MAR-94;Build 74
"RTN","IBCNES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES",4,0)
 ;
"RTN","IBCNES",5,0)
 Q
"RTN","IBCNES",6,0)
 ;
"RTN","IBCNES",7,0)
EB(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; entry point for main list display
"RTN","IBCNES",8,0)
 ; see below at tag INIT for a description of the parameters
"RTN","IBCNES",9,0)
 ; IBVSUB is required at this entry point because the ListMan array uses this variable
"RTN","IBCNES",10,0)
 ;
"RTN","IBCNES",11,0)
 D EN^VALM("IBCNE ELIGIBILITY/BENEFIT INFO")
"RTN","IBCNES",12,0)
EBX ;
"RTN","IBCNES",13,0)
 Q
"RTN","IBCNES",14,0)
 ;
"RTN","IBCNES",15,0)
HDR ; -- header code - called by ListManager
"RTN","IBCNES",16,0)
 ; build the header area based on the values of IBVF and IBVIENS
"RTN","IBCNES",17,0)
 ;
"RTN","IBCNES",18,0)
 ; pt. insurance
"RTN","IBCNES",19,0)
 I IBVF=2.322 D
"RTN","IBCNES",20,0)
 . N DFN,IBCDFN,PNB,PN,LPID,INS,INSNM,IENS,RSDATE,RSTYPE
"RTN","IBCNES",21,0)
 . S DFN=+$P(IBVIENS,",",2)
"RTN","IBCNES",22,0)
 . S IBCDFN=+$P(IBVIENS,",",1)
"RTN","IBCNES",23,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",24,0)
 . S PN=$P(PNB,U,1)    ; pt name
"RTN","IBCNES",25,0)
 . S LPID=$P(PNB,U,2)  ; pt id
"RTN","IBCNES",26,0)
 . S INS=+$P($G(^DPT(DFN,.312,IBCDFN,0)),U,1),INSNM=""
"RTN","IBCNES",27,0)
 . I INS S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNES",28,0)
 . S IENS=IBCDFN_","_DFN_","
"RTN","IBCNES",29,0)
 . S RSDATE=$$GET1^DIQ(2.312,IENS,8.01,"I"),RSTYPE=$$GET1^DIQ(2.312,IENS,8.02,"I")
"RTN","IBCNES",30,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",31,0)
 . S VALMHDR(2)="** Based on service date "_$S(RSDATE:$$FMTE^XLFDT(RSDATE,"5Z"),1:"UNKNOWN")_" and service type: "_$S(RSTYPE:$P($G(^IBE(365.013,RSTYPE,0)),U,2),1:"UNKNOWN")_" **"
"RTN","IBCNES",32,0)
 . Q
"RTN","IBCNES",33,0)
 ;
"RTN","IBCNES",34,0)
 ; eIV response file
"RTN","IBCNES",35,0)
 I IBVF=365.02 D
"RTN","IBCNES",36,0)
 . N RSPIEN,IBX,DFN,INS,PNB,PN,LPID,INSNM,TQIEN,NODE0,RSTYPE,RSDATE
"RTN","IBCNES",37,0)
 . S RSPIEN=+IBVIENS
"RTN","IBCNES",38,0)
 . S IBX=$G(^IBCN(365,RSPIEN,0))
"RTN","IBCNES",39,0)
 . S TQIEN=$P(IBX,U,5),NODE0=$G(^IBCN(365.1,TQIEN,0)),RSTYPE=$P(NODE0,U,20)
"RTN","IBCNES",40,0)
 . S RSDATE=$P($G(^IBCN(365,RSPIEN,1)),U,10) I RSDATE="" S RSDATE=$P(NODE0,U,12)
"RTN","IBCNES",41,0)
 . S DFN=+$P(IBX,U,2)   ; pt ien
"RTN","IBCNES",42,0)
 . S INS=+$P(IBX,U,3)   ; payer ien
"RTN","IBCNES",43,0)
 . S INSNM=""
"RTN","IBCNES",44,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",45,0)
 . S PN=$P(PNB,U,1)     ; pt name
"RTN","IBCNES",46,0)
 . S LPID=$P(PNB,U,2)   ; pt id
"RTN","IBCNES",47,0)
 . I INS S INSNM=$P($G(^IBE(365.12,INS,0)),U,1)   ; payer name
"RTN","IBCNES",48,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",49,0)
 . S VALMHDR(2)="** Based on service date "_$S(RSDATE:$$FMTE^XLFDT(RSDATE,"5Z"),1:"UNKNOWN")_" and service type: "_$S(RSTYPE:$P($G(^IBE(365.013,RSTYPE,0)),U,2),1:"UNKNOWN")_" **"
"RTN","IBCNES",50,0)
 . Q
"RTN","IBCNES",51,0)
 ;
"RTN","IBCNES",52,0)
 I $G(IBBUFDA) D
"RTN","IBCNES",53,0)
 .N SRVARRAY,Z
"RTN","IBCNES",54,0)
 .D SERVLN^IBCNBLE(IBBUFDA,.SRVARRAY) I SRVARRAY F Z=1:1:SRVARRAY S VALMHDR(Z+1)=SRVARRAY(Z)
"RTN","IBCNES",55,0)
 .Q
"RTN","IBCNES",56,0)
 Q
"RTN","IBCNES",57,0)
 ;
"RTN","IBCNES",58,0)
INIT(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; List Entry
"RTN","IBCNES",59,0)
 ;
"RTN","IBCNES",60,0)
 ;     IBVF = file# 2.322 or 365.02 (required)
"RTN","IBCNES",61,0)
 ;  IBVIENS = std IENS list of internal entry numbers - NOT including any EB iens (required)
"RTN","IBCNES",62,0)
 ; IBVEBFLG = flag indicating which EB records to pull
"RTN","IBCNES",63,0)
 ;            "A" - all of them
"RTN","IBCNES",64,0)
 ;            "L" - only the last one (default)
"RTN","IBCNES",65,0)
 ;            "F" - only the first one
"RTN","IBCNES",66,0)
 ;            "M" - multiple, pass IBEBFLG by reference and include the IB iens in
"RTN","IBCNES",67,0)
 ;                  an array as follows:
"RTN","IBCNES",68,0)
 ;                  IBVEBFLG="M"
"RTN","IBCNES",69,0)
 ;                  IBVEBFLG(3)=""
"RTN","IBCNES",70,0)
 ;                  IBVEBFLG(5)=""
"RTN","IBCNES",71,0)
 ;     IBVV = Video attributes flag
"RTN","IBCNES",72,0)
 ;            1 = reverse video (default)
"RTN","IBCNES",73,0)
 ;            2 = bold
"RTN","IBCNES",74,0)
 ;            3 = underline
"RTN","IBCNES",75,0)
 ;   IBVSUB = literal subscript to use in the display scratch global
"RTN","IBCNES",76,0)
 ;
"RTN","IBCNES",77,0)
 N IBVDA,GLO,IBVLIST,IEN,IBVEBIEN,IBVEBTOT,IBVEBCNT
"RTN","IBCNES",78,0)
 N IBECODE,IIVSTAT,PLNDESC,IBINSTYP,OTHINS,MWNRIEN     ;IB*2.0*506
"RTN","IBCNES",79,0)
 ;
"RTN","IBCNES",80,0)
 S OTHINS=0 ;IB*2.0*506/TAZ Initialize Other Insurance variable
"RTN","IBCNES",81,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25) ;IB*2.0*506/TAZ Initialize Medicare WNR payer IEN
"RTN","IBCNES",82,0)
 S IBVSUB=$G(IBVSUB)
"RTN","IBCNES",83,0)
 I IBVSUB="" S IBVSUB="EB ELIG/BEN"
"RTN","IBCNES",84,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",85,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",86,0)
 ;
"RTN","IBCNES",87,0)
 D DA^DILF(IBVIENS,.IBVDA)    ; build the IBVDA array for the iens
"RTN","IBCNES",88,0)
 I '$D(IBVDA) D NODATA G INITX
"RTN","IBCNES",89,0)
 ;
"RTN","IBCNES",90,0)
 I $D(VALMEVL),'$G(IBVV) S IBVV=1    ; default reverse video for ListMan
"RTN","IBCNES",91,0)
 I '$D(VALMEVL) S IBVV=""            ; no video attributes for non-ListMan
"RTN","IBCNES",92,0)
 ;
"RTN","IBCNES",93,0)
 D RPDM^IBCNES3($S(IBVF=365.02:365,1:2.312),.IBVDA,IBVV,IBVSUB)  ; IB*2*497  display group level eligibility information
"RTN","IBCNES",94,0)
 ;
"RTN","IBCNES",95,0)
 I IBVF=2.322 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA),6))   ; pt. insurance
"RTN","IBCNES",96,0)
 I IBVF=365.02 S GLO=$NA(^IBCN(365,+$G(IBVDA),2))                ; response file
"RTN","IBCNES",97,0)
 I $G(GLO)="" D NODATA G INITX
"RTN","IBCNES",98,0)
 ;
"RTN","IBCNES",99,0)
 S IBVEBFLG=$G(IBVEBFLG,"L")
"RTN","IBCNES",100,0)
 K IBVLIST
"RTN","IBCNES",101,0)
 I IBVEBFLG="L" S IEN=+$O(@GLO@(" "),-1) I IEN S IBVLIST(IEN)=""            ; last EB ien on file
"RTN","IBCNES",102,0)
 I IBVEBFLG="F" S IEN=+$O(@GLO@(0)) I IEN S IBVLIST(IEN)=""                 ; first EB ien on file
"RTN","IBCNES",103,0)
 I IBVEBFLG="A" S IEN=0 F  S IEN=$O(@GLO@(IEN)) Q:'IEN  S IBVLIST(IEN)=""   ; all EB iens on file
"RTN","IBCNES",104,0)
 I IBVEBFLG="M" S IEN=0 F  S IEN=$O(IBVEBFLG(IEN)) Q:'IEN  I $D(@GLO@(IEN)) S IBVLIST(IEN)=""   ; multiple
"RTN","IBCNES",105,0)
 ;
"RTN","IBCNES",106,0)
 I '$D(IBVLIST) D NODATA G INITX
"RTN","IBCNES",107,0)
 ;
"RTN","IBCNES",108,0)
 ; count them
"RTN","IBCNES",109,0)
 S IEN=0 F IBVEBTOT=0:1 S IEN=$O(IBVLIST(IEN)) Q:'IEN
"RTN","IBCNES",110,0)
 I 'IBVEBTOT D NODATA G INITX
"RTN","IBCNES",111,0)
 ;
"RTN","IBCNES",112,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNES",113,0)
 ; Count EBs and gather EB Summary Data
"RTN","IBCNES",114,0)
 ; IIVSTAT will tell us the coverage status 1,6, or V (File #365.011)
"RTN","IBCNES",115,0)
 ; Flag related to IBINSTYP will tell us the insurance type (File #365.014)
"RTN","IBCNES",116,0)
 ; OTHINS will tell us if Other Insurance was indicated on the response
"RTN","IBCNES",117,0)
 ;
"RTN","IBCNES",118,0)
 S (IEN,IBVEBTOT,OTHINS)=0,(IIVSTAT,IBINSTYP,PLNDESC)=""
"RTN","IBCNES",119,0)
 F  S IEN=$O(IBVLIST(IEN)) D  Q:'IEN
"RTN","IBCNES",120,0)
 . Q:'IEN
"RTN","IBCNES",121,0)
 . S IBVEBTOT=IBVEBTOT+1   ; total # of EBs
"RTN","IBCNES",122,0)
 . I IBVEBTOT=1 D
"RTN","IBCNES",123,0)
 . . S IBECODE=$P($G(@GLO@(1,0)),U,2)    ; Eligibility/Benefits Code
"RTN","IBCNES",124,0)
 . . S PLNDESC=$P($G(@GLO@(1,0)),U,6)    ; Plan Description
"RTN","IBCNES",125,0)
 . . I PLNDESC'="eIV Eligibility Determination" S IIVSTAT="V"
"RTN","IBCNES",126,0)
 . . I IBECODE=1 S IIVSTAT=1              ; active
"RTN","IBCNES",127,0)
 . . I IBECODE=6 S IIVSTAT=6              ; inactive
"RTN","IBCNES",128,0)
 . . I IIVSTAT="" S IIVSTAT="V"           ; ambigious
"RTN","IBCNES",129,0)
 . . ;
"RTN","IBCNES",130,0)
 . I IBINSTYP="" D
"RTN","IBCNES",131,0)
 . . S IBINSTYP=$P($G(@GLO@(IEN,0)),U,5) ; Insurance Type (check all EBs, get 1st occurrence)
"RTN","IBCNES",132,0)
 . . I IBINSTYP="" Q   ; no insurance type found 
"RTN","IBCNES",133,0)
 . . S IBINSTYP=$$GET1^DIQ(365.014,IBINSTYP,.02)
"RTN","IBCNES",134,0)
 . ;
"RTN","IBCNES",135,0)
 . ;Screen out non_Medicare records
"RTN","IBCNES",136,0)
 . S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25) ; Initialize Medicare WNR payer IEN
"RTN","IBCNES",137,0)
 . I IBVF=2.322,($$GET1^DIQ(36,$P(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA),0),U,1)_",",3.1,"I")'=MWNRIEN) Q
"RTN","IBCNES",138,0)
 . I IBVF=365.02,($P(^IBCN(365,+$G(IBVDA),0),U,3)'=MWNRIEN) Q
"RTN","IBCNES",139,0)
 . ;
"RTN","IBCNES",140,0)
 . N IBEIEN,IBELIG
"RTN","IBCNES",141,0)
 . S IBEIEN=0
"RTN","IBCNES",142,0)
 . F  S IBEIEN=$O(@GLO@(IBEIEN)) Q:'IBEIEN  D  I OTHINS Q
"RTN","IBCNES",143,0)
 .. ;Get Eligibility Code.  We want R codes only.
"RTN","IBCNES",144,0)
 .. S IBELIG=$P($G(@GLO@(IBEIEN,0)),U,2) I $P($G(^IBE(365.011,IBELIG,0)),U,1)="R" S OTHINS=1
"RTN","IBCNES",145,0)
 ;
"RTN","IBCNES",146,0)
 I IBVEBTOT D SUMMARY(IIVSTAT,IBINSTYP,OTHINS)
"RTN","IBCNES",147,0)
 ; /IB*2.0*506 End
"RTN","IBCNES",148,0)
 ;
"RTN","IBCNES",149,0)
 I 'IBVEBTOT D NODATA G INITX
"RTN","IBCNES",150,0)
 ;
"RTN","IBCNES",151,0)
 S (IBVEBIEN,IBVEBCNT)=0
"RTN","IBCNES",152,0)
 F  S IBVEBIEN=$O(IBVLIST(IBVEBIEN)) Q:'IBVEBIEN  D
"RTN","IBCNES",153,0)
 . S IBVEBCNT=IBVEBCNT+1
"RTN","IBCNES",154,0)
 . N TXVIENS
"RTN","IBCNES",155,0)
 . ;
"RTN","IBCNES",156,0)
 . ; if there is more than 1 EB group, then display a header line for separation
"RTN","IBCNES",157,0)
 . I IBVEBTOT>1 D
"RTN","IBCNES",158,0)
 .. N DSP,LN,IBZ
"RTN","IBCNES",159,0)
 .. S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))
"RTN","IBCNES",160,0)
 .. S LN=+$O(@DSP@(""),-1)
"RTN","IBCNES",161,0)
 .. S IBZ="eIV Eligibility/Benefit Data Group# "_IBVEBCNT_" of "_IBVEBTOT
"RTN","IBCNES",162,0)
 .. S IBZ=$$FO^IBCNEUT1($J("",20)_IBZ,80)
"RTN","IBCNES",163,0)
 .. S LN=LN+1 D SET^IBCNES1(LN,1,IBZ,,IBVV)
"RTN","IBCNES",164,0)
 .. S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",165,0)
 .. Q
"RTN","IBCNES",166,0)
 . ;
"RTN","IBCNES",167,0)
 . ; add this EB ien to the list of iens
"RTN","IBCNES",168,0)
 . S TXVIENS=IBVEBIEN_","_IBVIENS
"RTN","IBCNES",169,0)
 . ;
"RTN","IBCNES",170,0)
 . ; call the screen sections to build the display
"RTN","IBCNES",171,0)
 . D EB^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",172,0)
 . D CMPI^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",173,0)
 . D HCSD^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",174,0)
 . D NTE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",175,0)
 . D BRE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",176,0)
 . ;
"RTN","IBCNES",177,0)
 . Q
"RTN","IBCNES",178,0)
 ;
"RTN","IBCNES",179,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",180,0)
 ;
"RTN","IBCNES",181,0)
INITX ;
"RTN","IBCNES",182,0)
 Q
"RTN","IBCNES",183,0)
 ;
"RTN","IBCNES",184,0)
SUMMARY(IIVSTAT,IBINSTYP,OTHINS) ; (New w/ IB*2.0*506) key data from the Eligibility Benefit Information
"RTN","IBCNES",185,0)
 N DSP,LN,IBZ
"RTN","IBCNES",186,0)
 ;
"RTN","IBCNES",187,0)
 S IIVSTAT=$S(IIVSTAT=1:"ACTIVE",IIVSTAT=6:"INACTIVE",1:"AMBIGUOUS")
"RTN","IBCNES",188,0)
 ;
"RTN","IBCNES",189,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))
"RTN","IBCNES",190,0)
 S LN=+$O(@DSP@(""),-1)
"RTN","IBCNES",191,0)
 S IBZ="Summary of eIV Eligibility/Benefit Data"
"RTN","IBCNES",192,0)
 S IBZ=$$FO^IBCNEUT1($J("",20)_IBZ,80)
"RTN","IBCNES",193,0)
 S LN=LN+1 D SET^IBCNES1(LN,1,IBZ,,IBVV)
"RTN","IBCNES",194,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",195,0)
 ;
"RTN","IBCNES",196,0)
 S LN=LN+1 D SET^IBCNES1(LN,1,"Coverage Status",IIVSTAT)
"RTN","IBCNES",197,0)
 S LN=LN+1 D SET^IBCNES1(LN,1,"Insurance Type",IBINSTYP)
"RTN","IBCNES",198,0)
 ;
"RTN","IBCNES",199,0)
 I OTHINS S LN=LN+1 D SET^IBCNES1(LN,1,"Other insurance was potentially found")
"RTN","IBCNES",200,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",201,0)
 Q
"RTN","IBCNES",202,0)
 ;
"RTN","IBCNES",203,0)
NODATA ; display no data found
"RTN","IBCNES",204,0)
 N DSP,LN
"RTN","IBCNES",205,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES",206,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES",207,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",208,0)
 S LN=LN+1 D SET^IBCNES1(LN,5,"No eIV Eligibility/Benefit Data Found")
"RTN","IBCNES",209,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",210,0)
NODATAX ;
"RTN","IBCNES",211,0)
 Q
"RTN","IBCNES",212,0)
 ;
"RTN","IBCNES",213,0)
HELP ; -- help code
"RTN","IBCNES",214,0)
 S X="?",VALMANS="??" D DISP^XQORM1 W !!
"RTN","IBCNES",215,0)
 Q
"RTN","IBCNES",216,0)
 ;
"RTN","IBCNES",217,0)
EXIT ; -- exit code
"RTN","IBCNES",218,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",219,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",220,0)
 Q
"RTN","IBCNES",221,0)
 ;
"RTN","IBCNEUT1")
0^14^B44078437^B35326232
"RTN","IBCNEUT1",1,0)
IBCNEUT1 ;DAOU/ESG - IIV MISC. UTILITIES ;03-JUN-2002
"RTN","IBCNEUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,497,506**;21-MAR-94;Build 74
"RTN","IBCNEUT1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT1",4,0)
 ;
"RTN","IBCNEUT1",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT1",6,0)
 Q
"RTN","IBCNEUT1",7,0)
 ;
"RTN","IBCNEUT1",8,0)
FO(VALUE,LENGTH,JUSTIFY,FILL,TRUNC) ; Formatted output function
"RTN","IBCNEUT1",9,0)
 ;
"RTN","IBCNEUT1",10,0)
 ; Input parameters:
"RTN","IBCNEUT1",11,0)
 ;   VALUE    the data to get formatted (required)
"RTN","IBCNEUT1",12,0)
 ;   LENGTH   the resulting length of the formatted string (required)
"RTN","IBCNEUT1",13,0)
 ;   JUSTIFY  "L" or "R" to indicate left or right justification
"RTN","IBCNEUT1",14,0)
 ;               Default is "L" if not passed
"RTN","IBCNEUT1",15,0)
 ;   FILL     the character to fill in the spaces
"RTN","IBCNEUT1",16,0)
 ;               Default is a space if not passed
"RTN","IBCNEUT1",17,0)
 ;   TRUNC    Whether or not to truncate Value if its longer than length
"RTN","IBCNEUT1",18,0)
 ;               Default is Yes, to truncate if not passed
"RTN","IBCNEUT1",19,0)
 ;
"RTN","IBCNEUT1",20,0)
 NEW PAD,Z
"RTN","IBCNEUT1",21,0)
 I LENGTH>245 S LENGTH=245
"RTN","IBCNEUT1",22,0)
 S JUSTIFY=$G(JUSTIFY,"L")               ; default Left
"RTN","IBCNEUT1",23,0)
 S FILL=$E($G(FILL)_" ")                 ; default space
"RTN","IBCNEUT1",24,0)
 S TRUNC=$G(TRUNC,1)                     ; default true
"RTN","IBCNEUT1",25,0)
 S $P(PAD,FILL,LENGTH-$L(VALUE)+1)=""
"RTN","IBCNEUT1",26,0)
 S Z=""
"RTN","IBCNEUT1",27,0)
 ;
"RTN","IBCNEUT1",28,0)
 ; Check for JUSTIFY being "R" first
"RTN","IBCNEUT1",29,0)
 I JUSTIFY["R" D  G FOXIT
"RTN","IBCNEUT1",30,0)
 . I $L(VALUE)'>LENGTH S Z=PAD_VALUE Q
"RTN","IBCNEUT1",31,0)
 . I 'TRUNC S Z=VALUE Q
"RTN","IBCNEUT1",32,0)
 . S Z=$E(VALUE,$L(VALUE)-LENGTH+1,$L(VALUE)) Q
"RTN","IBCNEUT1",33,0)
 . Q
"RTN","IBCNEUT1",34,0)
 ;
"RTN","IBCNEUT1",35,0)
 ; JUSTIFY is "L" below
"RTN","IBCNEUT1",36,0)
 I $L(VALUE)'>LENGTH S Z=$E(VALUE_PAD,1,LENGTH) G FOXIT
"RTN","IBCNEUT1",37,0)
 I 'TRUNC S Z=VALUE G FOXIT
"RTN","IBCNEUT1",38,0)
 S Z=$E(VALUE,1,LENGTH)
"RTN","IBCNEUT1",39,0)
 ;
"RTN","IBCNEUT1",40,0)
FOXIT ;
"RTN","IBCNEUT1",41,0)
 Q Z
"RTN","IBCNEUT1",42,0)
 ;
"RTN","IBCNEUT1",43,0)
 ;
"RTN","IBCNEUT1",44,0)
AMLOOK(NAME,ERRFLG,LIST) ; Look-up an ins. co. name in Auto Match
"RTN","IBCNEUT1",45,0)
 ;
"RTN","IBCNEUT1",46,0)
 ; Input parameters
"RTN","IBCNEUT1",47,0)
 ;   NAME       Insurance company name to look for (required)
"RTN","IBCNEUT1",48,0)
 ;   ERRFLG     Error flag to determine whether or not to return
"RTN","IBCNEUT1",49,0)
 ;                an array of all hits (optional)
"RTN","IBCNEUT1",50,0)
 ;   LIST       The array to be built - passed by reference
"RTN","IBCNEUT1",51,0)
 ;                (optional)
"RTN","IBCNEUT1",52,0)
 ;                LIST(ins co name)=auto match value
"RTN","IBCNEUT1",53,0)
 ;
"RTN","IBCNEUT1",54,0)
 ; Output
"RTN","IBCNEUT1",55,0)
 ;   The value of this function is either 0 or 1.
"RTN","IBCNEUT1",56,0)
 ;     0 - no matches in the Auto Match file for this name
"RTN","IBCNEUT1",57,0)
 ;     1 - at least one match was found in the Auto Match file
"RTN","IBCNEUT1",58,0)
 ;
"RTN","IBCNEUT1",59,0)
 NEW FOUND,AMIEN,INSNAME,AMV,AMVSTART,NOMATCH
"RTN","IBCNEUT1",60,0)
 S FOUND=0                         ; default to not found
"RTN","IBCNEUT1",61,0)
 KILL LIST                         ; initialize results array
"RTN","IBCNEUT1",62,0)
 S ERRFLG=+$G(ERRFLG)              ; ERRFLG default is 0 if not present
"RTN","IBCNEUT1",63,0)
 S NAME=$$TRIM^XLFSTR($G(NAME))    ; strip leading/trailing spaces
"RTN","IBCNEUT1",64,0)
 I NAME="" G AMLOOKX               ; get out if NAME not present
"RTN","IBCNEUT1",65,0)
 ;
"RTN","IBCNEUT1",66,0)
 ; First look for direct hits in the Auto Match file
"RTN","IBCNEUT1",67,0)
 S AMIEN=$O(^IBCN(365.11,"B",NAME,""))
"RTN","IBCNEUT1",68,0)
 I AMIEN D
"RTN","IBCNEUT1",69,0)
 . S FOUND=1
"RTN","IBCNEUT1",70,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",71,0)
 . S INSNAME=$P($G(^IBCN(365.11,AMIEN,0)),U,2)
"RTN","IBCNEUT1",72,0)
 . I INSNAME'="" S LIST(INSNAME)=NAME
"RTN","IBCNEUT1",73,0)
 . Q
"RTN","IBCNEUT1",74,0)
 ;
"RTN","IBCNEUT1",75,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",76,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",77,0)
 ;
"RTN","IBCNEUT1",78,0)
 ; Use the first character of the NAME as a seed value to start
"RTN","IBCNEUT1",79,0)
 ; looping through the Auto Match entries.  Only need to look at
"RTN","IBCNEUT1",80,0)
 ; entries with the "*" wildcard character.
"RTN","IBCNEUT1",81,0)
 S AMV=$E(NAME)
"RTN","IBCNEUT1",82,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'=$E(NAME)  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",83,0)
 . I AMV'["*" Q    ; only looking for wildcarded entries
"RTN","IBCNEUT1",84,0)
 . ;
"RTN","IBCNEUT1",85,0)
 . ; Ensure that the first part of NAME is the same as the first
"RTN","IBCNEUT1",86,0)
 . ; part of the Auto Match value.
"RTN","IBCNEUT1",87,0)
 . S AMVSTART=$P(AMV,"*",1)
"RTN","IBCNEUT1",88,0)
 . I AMVSTART'="",$E(NAME,1,$L(AMVSTART))'=AMVSTART Q
"RTN","IBCNEUT1",89,0)
 . ;
"RTN","IBCNEUT1",90,0)
 . ; Build the NOMATCH variable and check it
"RTN","IBCNEUT1",91,0)
 . D AMC("NAME",AMV,.NOMATCH,0)
"RTN","IBCNEUT1",92,0)
 . I @NOMATCH Q
"RTN","IBCNEUT1",93,0)
 . ;
"RTN","IBCNEUT1",94,0)
 . ; We've got a match so process this accordingly
"RTN","IBCNEUT1",95,0)
 . S FOUND=1
"RTN","IBCNEUT1",96,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",97,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",98,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",99,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",100,0)
 . Q
"RTN","IBCNEUT1",101,0)
 ;
"RTN","IBCNEUT1",102,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",103,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",104,0)
 ;
"RTN","IBCNEUT1",105,0)
 ; Now we need to look at the Auto Match entries which start with
"RTN","IBCNEUT1",106,0)
 ; the "*" wildcard character.
"RTN","IBCNEUT1",107,0)
 S AMV="*"
"RTN","IBCNEUT1",108,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'="*"  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",109,0)
 . D AMC("NAME",AMV,.NOMATCH,0)    ; build the NOMATCH variable
"RTN","IBCNEUT1",110,0)
 . I @NOMATCH Q                    ; check it
"RTN","IBCNEUT1",111,0)
 . S FOUND=1                       ; We've got a match
"RTN","IBCNEUT1",112,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",113,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",114,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",115,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",116,0)
 . Q
"RTN","IBCNEUT1",117,0)
 ;
"RTN","IBCNEUT1",118,0)
AMLOOKX ;
"RTN","IBCNEUT1",119,0)
 Q FOUND
"RTN","IBCNEUT1",120,0)
 ;
"RTN","IBCNEUT1",121,0)
 ;
"RTN","IBCNEUT1",122,0)
AMC(NAME,AMV,MATCH,FLAG) ; Auto Match check function
"RTN","IBCNEUT1",123,0)
 ;
"RTN","IBCNEUT1",124,0)
 ; NAME   - literal variable name to be matched; enclosed in quotes
"RTN","IBCNEUT1",125,0)
 ; AMV    - Auto Match Value to be pattern matched
"RTN","IBCNEUT1",126,0)
 ; MATCH  - Variable passed by reference; returns condition check command
"RTN","IBCNEUT1",127,0)
 ; FLAG   - if 1, then pattern match check is positive (default)
"RTN","IBCNEUT1",128,0)
 ;        - if 0, then pattern match check is negative
"RTN","IBCNEUT1",129,0)
 ;
"RTN","IBCNEUT1",130,0)
 NEW NUMPCE,J,PCE,PCE1
"RTN","IBCNEUT1",131,0)
 S FLAG=$G(FLAG,1)
"RTN","IBCNEUT1",132,0)
 S MATCH=NAME_$S('FLAG:"'?",1:"?")
"RTN","IBCNEUT1",133,0)
 S NUMPCE=$L(AMV,"*")
"RTN","IBCNEUT1",134,0)
 F J=1:1:NUMPCE D
"RTN","IBCNEUT1",135,0)
 . S PCE=$P(AMV,"*",J),PCE1=""
"RTN","IBCNEUT1",136,0)
 . I PCE'="" S PCE1="1"""_PCE_""""
"RTN","IBCNEUT1",137,0)
 . S MATCH=MATCH_PCE1
"RTN","IBCNEUT1",138,0)
 . I J'=NUMPCE S MATCH=MATCH_".E"
"RTN","IBCNEUT1",139,0)
 . Q
"RTN","IBCNEUT1",140,0)
AMCX ;
"RTN","IBCNEUT1",141,0)
 Q
"RTN","IBCNEUT1",142,0)
 ;
"RTN","IBCNEUT1",143,0)
 ;
"RTN","IBCNEUT1",144,0)
AMSEL(AMARRAY) ; Select an insurance company name from an Auto Match hit list
"RTN","IBCNEUT1",145,0)
 ;
"RTN","IBCNEUT1",146,0)
 ; Input
"RTN","IBCNEUT1",147,0)
 ;   Array of Auto Match hits.  The structure of this array is the
"RTN","IBCNEUT1",148,0)
 ;   same as that returned by the call to $$AMLOOK above.
"RTN","IBCNEUT1",149,0)
 ;   AMARRAY(ins co name) = Auto Match value
"RTN","IBCNEUT1",150,0)
 ;
"RTN","IBCNEUT1",151,0)
 ; Output
"RTN","IBCNEUT1",152,0)
 ;   Insurance Company name (subscript of input array), or
"RTN","IBCNEUT1",153,0)
 ;   -1 if user entered "^" or timed out, or
"RTN","IBCNEUT1",154,0)
 ;   0 if user didn't select any of these names
"RTN","IBCNEUT1",155,0)
 ;   No changes are made to the array.
"RTN","IBCNEUT1",156,0)
 ;
"RTN","IBCNEUT1",157,0)
 NEW SEL,NM,CNT,MSG,MSGNUM,CH,TXT
"RTN","IBCNEUT1",158,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNEUT1",159,0)
 S SEL=0
"RTN","IBCNEUT1",160,0)
 I '$D(AMARRAY) G AMSELX    ; Get out if array not passed in
"RTN","IBCNEUT1",161,0)
 ;
"RTN","IBCNEUT1",162,0)
 ; Display the contents of the array
"RTN","IBCNEUT1",163,0)
 S MSG(1)="Results of Auto Match search"
"RTN","IBCNEUT1",164,0)
 S MSG(2)=""
"RTN","IBCNEUT1",165,0)
 S MSG(3)="  "_$$FO("Insurance Company Name",30)_"   Auto Match Value"
"RTN","IBCNEUT1",166,0)
 S MSG(4)="  "_$$FO("----------------------",30)_"   ----------------"
"RTN","IBCNEUT1",167,0)
 S MSG(1,"F")="!!"
"RTN","IBCNEUT1",168,0)
 S NM="",MSGNUM=$O(MSG(""),-1),CNT=0,CH=""
"RTN","IBCNEUT1",169,0)
 F  S NM=$O(AMARRAY(NM)) Q:NM=""  D
"RTN","IBCNEUT1",170,0)
 . S CNT=CNT+1
"RTN","IBCNEUT1",171,0)
 . S TXT=$$FO(NM,30)_"   "_AMARRAY(NM)
"RTN","IBCNEUT1",172,0)
 . S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",173,0)
 . S MSG(MSGNUM)="  "_TXT
"RTN","IBCNEUT1",174,0)
 . I $L(CH)>440 Q
"RTN","IBCNEUT1",175,0)
 . I CH="" S CH=CNT_":"_TXT       ; building the set of codes string
"RTN","IBCNEUT1",176,0)
 . E  S CH=CH_";"_CNT_":"_TXT     ; for the DIR reader later on
"RTN","IBCNEUT1",177,0)
 . Q
"RTN","IBCNEUT1",178,0)
 ;
"RTN","IBCNEUT1",179,0)
 ; Get out if there are no entries in the list
"RTN","IBCNEUT1",180,0)
 I 'CNT G AMSELX
"RTN","IBCNEUT1",181,0)
 ;
"RTN","IBCNEUT1",182,0)
 ; One more blank line in the display
"RTN","IBCNEUT1",183,0)
 S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",184,0)
 S MSG(MSGNUM)=""
"RTN","IBCNEUT1",185,0)
 ;
"RTN","IBCNEUT1",186,0)
 ; Display the entries in the list
"RTN","IBCNEUT1",187,0)
 DO EN^DDIOL(.MSG)
"RTN","IBCNEUT1",188,0)
 ;
"RTN","IBCNEUT1",189,0)
 ; Ask the first question
"RTN","IBCNEUT1",190,0)
 S DIR(0)="YO"
"RTN","IBCNEUT1",191,0)
 S DIR("A")="Would you like to select this insurance company"
"RTN","IBCNEUT1",192,0)
 I CNT>1 S DIR("A")="Would you like to select one of these insurance companies"
"RTN","IBCNEUT1",193,0)
 S DIR("B")="Yes"
"RTN","IBCNEUT1",194,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",195,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",196,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",197,0)
 ;
"RTN","IBCNEUT1",198,0)
 ; User said Yes to the above question
"RTN","IBCNEUT1",199,0)
 ; Get out if there is only one entry in the array
"RTN","IBCNEUT1",200,0)
 I CNT=1 S SEL=$O(AMARRAY("")) G AMSELX
"RTN","IBCNEUT1",201,0)
 ;
"RTN","IBCNEUT1",202,0)
 ; At this point we know there are multiple entries in the list
"RTN","IBCNEUT1",203,0)
 S DIR(0)="SO^"_CH
"RTN","IBCNEUT1",204,0)
 S DIR("A")="Please choose an insurance company"
"RTN","IBCNEUT1",205,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",206,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",207,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",208,0)
 S SEL=$$TRIM^XLFSTR($E(Y(0),1,30),"R")    ; strip trailing spaces
"RTN","IBCNEUT1",209,0)
AMSELX ;
"RTN","IBCNEUT1",210,0)
 Q SEL
"RTN","IBCNEUT1",211,0)
 ;
"RTN","IBCNEUT1",212,0)
LENCHK(VAL,MAX,NUMFLG) ; check value length, called from input transforms on eIV fields
"RTN","IBCNEUT1",213,0)
 ; VAL - value to check
"RTN","IBCNEUT1",214,0)
 ; MAX - max. allowed length for free text field, or max. value for numeric field
"RTN","IBCNEUT1",215,0)
 ; NUMFLG - 1 if field is numeric, 0 if free text
"RTN","IBCNEUT1",216,0)
 ;
"RTN","IBCNEUT1",217,0)
 ; returns 1 if length is acceptable, 0 otherwise
"RTN","IBCNEUT1",218,0)
 N RES
"RTN","IBCNEUT1",219,0)
 S RES=1
"RTN","IBCNEUT1",220,0)
 ; check IB site parameter
"RTN","IBCNEUT1",221,0)
 I '+$P($G(^IBE(350.9,1,62)),U) G LENCHKX
"RTN","IBCNEUT1",222,0)
 I $S(NUMFLG:VAL,1:$L(VAL))>MAX S RES=0
"RTN","IBCNEUT1",223,0)
LENCHKX ;
"RTN","IBCNEUT1",224,0)
 Q RES
"RTN","IBCNEUT1",225,0)
 ;
"RTN","IBCNEUT1",226,0)
CODECK(VAL) ; validate the response for the output transforms on the CODE (.01) field in the IIV Status Table (#365.15) file.
"RTN","IBCNEUT1",227,0)
 ; VAL - value to translate
"RTN","IBCNEUT1",228,0)
 ; OUT - output value based up the value entered.
"RTN","IBCNEUT1",229,0)
 ;
"RTN","IBCNEUT1",230,0)
 N IN,OUT,STR1,STR2
"RTN","IBCNEUT1",231,0)
 S IN=$E(VAL)
"RTN","IBCNEUT1",232,0)
 S STR1="Response Received"
"RTN","IBCNEUT1",233,0)
 S STR2="Problem Identified"
"RTN","IBCNEUT1",234,0)
 S OUT=$S(IN="D":STR1_", Inactive Policy",IN="B":STR2,IN="A":STR1_", Active Policy",IN="E":STR1_", Active Policy (Escalated)",IN="Q":"Inquiry Sent, Awaiting Response",IN="U":STR1_", Ambiguous Answer",IN="C":STR2_", Communication Failure",1:"")
"RTN","IBCNEUT1",235,0)
CODECKX ;
"RTN","IBCNEUT1",236,0)
 Q OUT
"RTN","IBCNEUT1",237,0)
 ;
"RTN","IBCNSJ12")
0^24^B21606758^B20812349
"RTN","IBCNSJ12",1,0)
IBCNSJ12 ;ALB/CPM - INACTIVATE AN INSURANCE PLAN (CON'T) ; 18-JAN-95
"RTN","IBCNSJ12",2,0)
 ;;2.0;INTEGRATED BILLING;**28,62,142,506**;21-MAR-94;Build 74
"RTN","IBCNSJ12",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSJ12",4,0)
 ;
"RTN","IBCNSJ12",5,0)
GETPL ; Select an active group plan or add a new one.
"RTN","IBCNSJ12",6,0)
 ;  Required variable input:
"RTN","IBCNSJ12",7,0)
 ;     IBCNS  --  Pointer to the company in file #36 offering the plan
"RTN","IBCNSJ12",8,0)
 ;    IBPLAN  --  Pointer to the current plan in file #355.3
"RTN","IBCNSJ12",9,0)
 ;      IBFG  --  [Optional] -> set to 1 to force creation, if
"RTN","IBCNSJ12",10,0)
 ;                necessary, of a group plan
"RTN","IBCNSJ12",11,0)
 ;
"RTN","IBCNSJ12",12,0)
 ;  Variable output:
"RTN","IBCNSJ12",13,0)
 ;    IBCPOL  --  0   if no plan was selected/added, or
"RTN","IBCNSJ12",14,0)
 ;                >0  points to the added/selected plan in file #355.3
"RTN","IBCNSJ12",15,0)
 ;    IBNEWP  --  [optional]: set to 1 if a new plan was added.
"RTN","IBCNSJ12",16,0)
 ;
"RTN","IBCNSJ12",17,0)
 N IBALR
"RTN","IBCNSJ12",18,0)
 S IBCPOL=0,IBALR=IBPLAN
"RTN","IBCNSJ12",19,0)
 I '$$ANYGP^IBCNSJ(IBCNS,IBPLAN) W !!,$P($G(^DIC(36,IBCNS,0)),"^")," offers no other active group plans!" G ADD
"RTN","IBCNSJ12",20,0)
 ;
"RTN","IBCNSJ12",21,0)
 ; - select an active group plan
"RTN","IBCNSJ12",22,0)
 S IBCPOL=$$LK^IBCNSM31(IBCNS) I 'IBCPOL W !,"No plan selected!",!
"RTN","IBCNSJ12",23,0)
 ;
"RTN","IBCNSJ12",24,0)
ADD ; - propose to add a new plan to which the patient may subscribe
"RTN","IBCNSJ12",25,0)
 I 'IBCPOL D
"RTN","IBCNSJ12",26,0)
 .W !,"You may ",$S($G(IBREP):"repoint these policies",1:"change the policy plan")," to a newly-added plan."
"RTN","IBCNSJ12",27,0)
 .; IB*2.0*506 added IBKEY parameter (4th) to the NEW^IBCNSJ3 call (check user's security keys)
"RTN","IBCNSJ12",28,0)
 .D NEW^IBCNSJ3(IBCNS,.IBCPOL,+$G(IBFG),1) W ! I IBCPOL S IBNEWP=1
"RTN","IBCNSJ12",29,0)
 I 'IBCPOL W !,"No Insurance Plan has been added or selected."
"RTN","IBCNSJ12",30,0)
 Q
"RTN","IBCNSJ12",31,0)
 ;
"RTN","IBCNSJ12",32,0)
NAC(IBPLAN,IBPR,IBDEL,IBQ) ; Inactivate the plan.
"RTN","IBCNSJ12",33,0)
 ;  Input:  IBPLAN  --  Pointer to the plan in file #355.3
"RTN","IBCNSJ12",34,0)
 ;            IBPR  --  Prompt for the Reader call
"RTN","IBCNSJ12",35,0)
 ;           IBDEL  --  [optional]: set to 1 if the plan may be deleted
"RTN","IBCNSJ12",36,0)
 ; Output:     IBQ  --  set to 1 if the plan is not inactivated
"RTN","IBCNSJ12",37,0)
 ;
"RTN","IBCNSJ12",38,0)
 N DIR,DIRUT,DIROUT,DUOUT,DTOUT
"RTN","IBCNSJ12",39,0)
 I '$G(IBPLAN) G NACQ
"RTN","IBCNSJ12",40,0)
 S IBQ=0,DIR(0)="Y",DIR("?")="To inactivate this plan, answer 'YES.'  Otherwise, answer 'NO.'"
"RTN","IBCNSJ12",41,0)
 S DIR("A")=$S($G(IBPR)]"":IBPR,1:"Is it okay to inactivate this plan")
"RTN","IBCNSJ12",42,0)
 W ! D ^DIR I 'Y W !,"The plan was not inactivated." D DELP^IBCNSJ11 S IBQ=1 G NACQ
"RTN","IBCNSJ12",43,0)
 W !,"Inactivating the plan... " D IRACT^IBCNSJ(IBPLAN,1) W "done."
"RTN","IBCNSJ12",44,0)
 I $G(IBDEL) D DEL^IBCNSJ11(IBPLAN)
"RTN","IBCNSJ12",45,0)
NACQ Q
"RTN","IBCNSJ12",46,0)
 ;
"RTN","IBCNSJ12",47,0)
MSG(IBCNS,IBPLAN) ; Send the subscription list to the user.
"RTN","IBCNSJ12",48,0)
 ;  Input:   IBCNS  --  Pointer to the company in file #36 offering the plan
"RTN","IBCNSJ12",49,0)
 ;          IBPLAN  --  Pointer to the current plan in file #355.3
"RTN","IBCNSJ12",50,0)
 ;
"RTN","IBCNSJ12",51,0)
 N DFN,IBCDFN,IBCDFND,IBPLAND,IBC,IBSUB1,VA,VAOA,VAERR,XMDUZ,XMTEXT,XMY,XMSUB,IBX
"RTN","IBCNSJ12",52,0)
 I '$G(IBCNS)!'$G(IBPLAN) G MSGQ
"RTN","IBCNSJ12",53,0)
 S IBPLAND=$G(^IBA(355.3,IBPLAN,0)) I 'IBPLAND G MSGQ
"RTN","IBCNSJ12",54,0)
 W !,"Building the list of inactivated subscriptions to send to you..."
"RTN","IBCNSJ12",55,0)
 ;
"RTN","IBCNSJ12",56,0)
 ; - build message header
"RTN","IBCNSJ12",57,0)
 K ^TMP($J,"IBSUB-LIST")
"RTN","IBCNSJ12",58,0)
 S XMSUB="SUBSCRIPTION LIST FOR INACTIVATED PLAN"
"RTN","IBCNSJ12",59,0)
 S ^TMP($J,"IBSUB-LIST",1)="The following plan offered by "_$E($P($G(^DIC(36,+IBCNS,0)),"^"),1,20)_" has been inactivated:"
"RTN","IBCNSJ12",60,0)
 S ^TMP($J,"IBSUB-LIST",2)=" "
"RTN","IBCNSJ12",61,0)
 S IBX="   Group Plan Number: "_$S($P(IBPLAND,"^",4)]"":$P(IBPLAND,"^",4),1:"<no number>")
"RTN","IBCNSJ12",62,0)
 S ^TMP($J,"IBSUB-LIST",3)=$E(IBX_$J("",25),1,43)_"Plan Number: "_$S($P(IBPLAND,"^",3)]"":$P(IBPLAND,"^",3),1:"<no name>")
"RTN","IBCNSJ12",63,0)
 S ^TMP($J,"IBSUB-LIST",4)=" "
"RTN","IBCNSJ12",64,0)
 S ^TMP($J,"IBSUB-LIST",5)="The following plan subscriptions, which may have been active, were"
"RTN","IBCNSJ12",65,0)
 S ^TMP($J,"IBSUB-LIST",6)="automatically inactivated:"
"RTN","IBCNSJ12",66,0)
 S ^TMP($J,"IBSUB-LIST",7)=" "
"RTN","IBCNSJ12",67,0)
 S ^TMP($J,"IBSUB-LIST",8)="Patient Name/ID             Whose    Employer              Effective  Expires"
"RTN","IBCNSJ12",68,0)
 S ^TMP($J,"IBSUB-LIST",9)=" ",IBC=9
"RTN","IBCNSJ12",69,0)
 ;
"RTN","IBCNSJ12",70,0)
 ; - build message subscription list
"RTN","IBCNSJ12",71,0)
 K ^TMP($J,"IBSUBS")
"RTN","IBCNSJ12",72,0)
 S IBSUB1=$$SUBS^IBCNSJ(IBCNS,IBPLAN,0,"^TMP($J,""IBSUBS"")")
"RTN","IBCNSJ12",73,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"IBSUBS",DFN)) Q:'DFN  D
"RTN","IBCNSJ12",74,0)
 .D COV^IBCNSJ(DFN)
"RTN","IBCNSJ12",75,0)
 .S X=$$PT^IBEFUNC(DFN),IBM=1
"RTN","IBCNSJ12",76,0)
 .S X=$E($P(X,"^"),1,20)_" "_$P(X,"^",3)
"RTN","IBCNSJ12",77,0)
 .S IBC=IBC+1,^TMP($J,"IBSUB-LIST",IBC)=$E(X_$J("",28),1,28)
"RTN","IBCNSJ12",78,0)
 .S IBCDFN=0 F  S IBCDFN=$O(^TMP($J,"IBSUBS",DFN,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSJ12",79,0)
 ..S IBCDFND=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSJ12",80,0)
 ..I 'IBM S IBC=IBC+1,^TMP($J,"IBSUB-LIST",IBC)=$J("",28) S IBM=1
"RTN","IBCNSJ12",81,0)
 ..S X=$$EXPAND^IBTRE(2.312,6,$P(IBCDFND,"^",6))
"RTN","IBCNSJ12",82,0)
 ..S IBX=^TMP($J,"IBSUB-LIST",IBC)
"RTN","IBCNSJ12",83,0)
 ..S IBX=IBX_$E(X_$J("",9),1,9)
"RTN","IBCNSJ12",84,0)
 ..S VAOA("A")=$S($P(IBCDFND,"^",6)="s":6,1:5) D OAD^VADPT
"RTN","IBCNSJ12",85,0)
 ..S IBX=IBX_$E($E(VAOA(9),1,21)_$J("",22),1,22)
"RTN","IBCNSJ12",86,0)
 ..S IBX=IBX_$E($$DAT1^IBOUTL($P(IBCDFND,"^",8))_$J("",10),1,10)
"RTN","IBCNSJ12",87,0)
 ..S IBX=IBX_$E($$DAT1^IBOUTL($P(IBCDFND,"^",4))_$J("",10),1,10)
"RTN","IBCNSJ12",88,0)
 ..S ^TMP($J,"IBSUB-LIST",IBC)=IBX
"RTN","IBCNSJ12",89,0)
 ;
"RTN","IBCNSJ12",90,0)
 ; - build message trailer and transmit
"RTN","IBCNSJ12",91,0)
 S IBC=IBC+1,^TMP($J,"IBSUB-LIST",IBC)=" "
"RTN","IBCNSJ12",92,0)
 S IBC=IBC+1,^TMP($J,"IBSUB-LIST",IBC)="You should review this list and change the policy plan for any of"
"RTN","IBCNSJ12",93,0)
 S IBC=IBC+1,^TMP($J,"IBSUB-LIST",IBC)="these subscriptions if necessary."
"RTN","IBCNSJ12",94,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="^TMP($J,""IBSUB-LIST"","
"RTN","IBCNSJ12",95,0)
 K XMY S XMY(DUZ)=""
"RTN","IBCNSJ12",96,0)
 D ^XMD
"RTN","IBCNSJ12",97,0)
MSGQ K ^TMP($J,"IBSUBS"),^TMP($J,"IBSUB-LIST")
"RTN","IBCNSJ12",98,0)
 Q
"RTN","IBCNSJ3")
0^21^B19317542^B17659726
"RTN","IBCNSJ3",1,0)
IBCNSJ3 ;ALB/CPM - ADD NEW INSURANCE PLAN ; 11-JAN-95
"RTN","IBCNSJ3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,497,506**;21-MAR-94;Build 74
"RTN","IBCNSJ3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSJ3",4,0)
 ;
"RTN","IBCNSJ3",5,0)
NEW(IBCNS,IBCPOL,IBFG,IBKEY) ; Add a new insurance plan
"RTN","IBCNSJ3",6,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",7,0)
 ;            IBFG  --  [Optional] -> Set to 1 to force creation
"RTN","IBCNSJ3",8,0)
 ;                      of a group plan
"RTN","IBCNSJ3",9,0)
 ;           IBKEY  --  [Optional] -> Set to 1 to check for security key
"RTN","IBCNSJ3",10,0)
 ; Output:  IBCPOL  --  0, if a new plan was not added, or
"RTN","IBCNSJ3",11,0)
 ;                      >0 => pointer to the new plan in file #355.3
"RTN","IBCNSJ3",12,0)
 ;
"RTN","IBCNSJ3",13,0)
 N DA,DIR,DIRUT,DIROUT,DTOUT,DUOUT,IBTL,IBGRP,IBGNA,IBGNU,X,Y
"RTN","IBCNSJ3",14,0)
 S IBCPOL=0
"RTN","IBCNSJ3",15,0)
 I '$G(IBCNS) G NEWQ
"RTN","IBCNSJ3",16,0)
 ;
"RTN","IBCNSJ3",17,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Do you wish to add a new Insurance Plan"
"RTN","IBCNSJ3",18,0)
 S DIR("?")="If you have identified a new plan that has not been previously entered, and you wish to add it, answer 'YES'.  If you do not wish to add a new plan, enter 'NO'."
"RTN","IBCNSJ3",19,0)
 D ^DIR K DIR I Y<1!($D(DIRUT)) G NEWQ
"RTN","IBCNSJ3",20,0)
 ;
"RTN","IBCNSJ3",21,0)
 ; IB*2.0*506 Added the following line.
"RTN","IBCNSJ3",22,0)
 I $G(IBKEY),'$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) W !!,"Sorry, you are not authorized to create a new Insurance Plan" D WAIT^IBCNBAA G NEWQ
"RTN","IBCNSJ3",23,0)
 ;
"RTN","IBCNSJ3",24,0)
 ; - collect plan characteristics
"RTN","IBCNSJ3",25,0)
 I $G(IBFG) S IBGRP=1 G MORE
"RTN","IBCNSJ3",26,0)
 S DIR(0)="355.3,.02",DIR("A")="  IS THIS A GROUP PLAN" D ^DIR K DIR S IBGRP=Y
"RTN","IBCNSJ3",27,0)
 I $D(DIRUT) G NEWQ
"RTN","IBCNSJ3",28,0)
 ;
"RTN","IBCNSJ3",29,0)
MORE S IBTL="  "_$S(IBGRP:"GROUP",1:"INDIVIDUAL")_" PLAN "
"RTN","IBCNSJ3",30,0)
 S DIR(0)="355.3,2.01",DIR("A")=IBTL_"NAME" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNA=Y
"RTN","IBCNSJ3",31,0)
 S DIR(0)="355.3,2.02",DIR("A")=IBTL_"NUMBER" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNU=Y
"RTN","IBCNSJ3",32,0)
 ;
"RTN","IBCNSJ3",33,0)
 ; - check for duplicates and file the plan
"RTN","IBCNSJ3",34,0)
 I $$CHECK(IBCNS,IBGNA,IBGNU) S IBCPOL=$$ADDH^IBCNSU(IBCNS,IBGRP,IBGNA,IBGNU)
"RTN","IBCNSJ3",35,0)
NEWQ Q
"RTN","IBCNSJ3",36,0)
 ;
"RTN","IBCNSJ3",37,0)
 ;
"RTN","IBCNSJ3",38,0)
CHECK(IBCNS,IBGNA,IBGNU) ; Check for potential duplicate plans
"RTN","IBCNSJ3",39,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",40,0)
 ;           IBGNA  --  Plan Name for potential new plan
"RTN","IBCNSJ3",41,0)
 ;           IBGNU  --  Plan Number for potential new plan
"RTN","IBCNSJ3",42,0)
 ; Output:   IBANS  --  1 ->  Okay to add the new plan
"RTN","IBCNSJ3",43,0)
 ;                      0 ->  Don't add the new plan.
"RTN","IBCNSJ3",44,0)
 ;
"RTN","IBCNSJ3",45,0)
 N IBANS,IBCT,IBCNSD
"RTN","IBCNSJ3",46,0)
 S (IBANS,IBCT)=1
"RTN","IBCNSJ3",47,0)
 S IBCNSD=$G(^DIC(36,+$G(IBCNS),0)) I IBCNSD="" G CHECKQ
"RTN","IBCNSJ3",48,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",49,0)
 W !!,"  Searching for potential duplicate plans offered by ",$E($P(IBCNSD,"^"),1,20),"..."
"RTN","IBCNSJ3",50,0)
 I '$D(^IBA(355.3,"B",IBCNS)) G CHECKQ
"RTN","IBCNSJ3",51,0)
 ;
"RTN","IBCNSJ3",52,0)
 ; - look for potential duplicate plans
"RTN","IBCNSJ3",53,0)
 D:$G(IBGNA)]"" FIND(IBCNS,IBGNA)
"RTN","IBCNSJ3",54,0)
 D:$G(IBGNU)]"" FIND(IBCNS,IBGNU)
"RTN","IBCNSJ3",55,0)
 ;
"RTN","IBCNSJ3",56,0)
 ; - display potential duplicates and see if plan should be filed
"RTN","IBCNSJ3",57,0)
 I $D(^TMP($J,"DUP")) D LIST
"RTN","IBCNSJ3",58,0)
 ;
"RTN","IBCNSJ3",59,0)
CHECKQ I '$D(^TMP($J,"DUP")) W !!,"  No potential duplicate plans have been identified."
"RTN","IBCNSJ3",60,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",61,0)
 Q IBANS
"RTN","IBCNSJ3",62,0)
 ;
"RTN","IBCNSJ3",63,0)
 ;
"RTN","IBCNSJ3",64,0)
FIND(IBCNS,IBGN) ; Check cross-references for duplicate plans
"RTN","IBCNSJ3",65,0)
 ;  Input:  IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCNSJ3",66,0)
 ;           IBGN  --  value to use to find duplicates
"RTN","IBCNSJ3",67,0)
 ;
"RTN","IBCNSJ3",68,0)
 N INP,LEN,SUB,TYPE
"RTN","IBCNSJ3",69,0)
 F SUB="AGNA","AGNU","ACCP" D
"RTN","IBCNSJ3",70,0)
 .I SUB="ACCP" S IBGN=$$COMP^IBCNSJ(IBGN)
"RTN","IBCNSJ3",71,0)
 .S INP=IBGN,LEN=$L(INP) Q:LEN<2!(LEN>20)
"RTN","IBCNSJ3",72,0)
 .S TYPE=$S(IBGN?1N.N:"NUM",1:"STR")
"RTN","IBCNSJ3",73,0)
 .I $D(^IBA(355.3,SUB,IBCNS,INP)) D GDATA
"RTN","IBCNSJ3",74,0)
 .I TYPE="STR" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:$E(INP,1,LEN)'=IBGN  D GDATA
"RTN","IBCNSJ3",75,0)
 .I TYPE="NUM" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:INP=""  I $E(INP,1,LEN)=IBGN D GDATA
"RTN","IBCNSJ3",76,0)
 Q
"RTN","IBCNSJ3",77,0)
 ;
"RTN","IBCNSJ3",78,0)
GDATA ; Place potential duplicate plan into an array.
"RTN","IBCNSJ3",79,0)
 N X,Y,Y2 S X=0       ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",80,0)
 F  S X=$O(^IBA(355.3,SUB,IBCNS,INP,X)) Q:'X  I '$D(^TMP($J,"DUP",X)) D
"RTN","IBCNSJ3",81,0)
 .S Y=$G(^IBA(355.3,X,0)),Y2=$G(^IBA(355.3,X,2)),IBCT=IBCT+1    ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",82,0)
 .S ^TMP($J,"DUP",X)="",^TMP($J,"DUP1",IBCT)=$P(Y2,"^",2)_U_$P(Y2,"^",1)_U_$P(Y,"^",2)_U_$P(Y,"^",11)  ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",83,0)
 Q
"RTN","IBCNSJ3",84,0)
 ;
"RTN","IBCNSJ3",85,0)
LIST ; List potential duplicates to screen and prompt to add plan.
"RTN","IBCNSJ3",86,0)
 W !!,"  The following plans have been identified as potential duplicates:"
"RTN","IBCNSJ3",87,0)
 W !!,?3,"PLAN",?22,"PLAN",?45,"GROUP",?55,"ACTIVE",!,?2,"NUMBER",?22,"NAME",?45,"PLAN?",?55,"PLAN?",!
"RTN","IBCNSJ3",88,0)
 S IBCT=0 F  S IBCT=$O(^TMP($J,"DUP1",IBCT)) Q:'IBCT  D
"RTN","IBCNSJ3",89,0)
 .S IBST=$G(^TMP($J,"DUP1",IBCT))
"RTN","IBCNSJ3",90,0)
 .W !?2,$S($P(IBST,"^")'="":$P(IBST,"^"),1:"<NO PLAN NUM>"),?22,$S($P(IBST,"^",2)'="":$P(IBST,"^",2),1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",91,0)
 .W ?45,$S($P(IBST,"^",3)'="":$$EXPAND^IBTRE(355.3,.02,$P(IBST,"^",3)),1:"<UNK>"),?55,$S($P(IBST,"^",4):"NO",1:"YES")
"RTN","IBCNSJ3",92,0)
 ;
"RTN","IBCNSJ3",93,0)
 ; - see if it is okay to add the plan
"RTN","IBCNSJ3",94,0)
 S DIR(0)="Y",DIR("A",1)="Do you still want to add a new plan with Plan Name "_$S(IBGNA'="":IBGNA,1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",95,0)
 S DIR("A")="and Plan Number "_$S(IBGNU'="":IBGNU,1:"<NO PLAN NUMBER>")
"RTN","IBCNSJ3",96,0)
 S DIR("B")="NO"
"RTN","IBCNSJ3",97,0)
 W ! D ^DIR K DIR S IBANS=Y
"RTN","IBCNSJ3",98,0)
 Q
"RTN","IBCNSM3")
0^15^B14271242^B14041849
"RTN","IBCNSM3",1,0)
IBCNSM3 ;ALB/AAS - INSURANCE MANAGEMENT - OUTPUTS ; 4/7/03 9:56am
"RTN","IBCNSM3",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,85,211,251,399,506**;21-MAR-94;Build 74
"RTN","IBCNSM3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSM3",4,0)
 ;
"RTN","IBCNSM3",5,0)
% G EN^IBCNSM
"RTN","IBCNSM3",6,0)
 ;
"RTN","IBCNSM3",7,0)
AD ; -- Add new insurance policy
"RTN","IBCNSM3",8,0)
 N X,Y,DO,DD,DA,DR,DIC,DIE,DIK,DIR,DIRUT,IBCNSP,IBCPOL,IBQUIT,IBOK,IBCDFN,IBAD,IBGRP,IBADPOL,IBCOVP,ANS,IBGNA,IBGNU
"RTN","IBCNSM3",9,0)
 S IBCNSEH=$P($G(^IBE(350.9,1,4)),"^",1),IBQUIT=0,IBADPOL=1
"RTN","IBCNSM3",10,0)
 D FULL^VALM1
"RTN","IBCNSM3",11,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),"^",11)
"RTN","IBCNSM3",12,0)
 I '$D(^DPT(DFN,.312,0)) S ^DPT(DFN,.312,0)="^2.312PAI^^"
"RTN","IBCNSM3",13,0)
 ;
"RTN","IBCNSM3",14,0)
 D INS^IBCNSEH
"RTN","IBCNSM3",15,0)
 ; -- Select insurance company
"RTN","IBCNSM3",16,0)
 ;    If one already exists for same co. ask are you sure you are
"RTN","IBCNSM3",17,0)
 ;    adding a new one
"RTN","IBCNSM3",18,0)
 S DIR(0)="350.9,4.06"
"RTN","IBCNSM3",19,0)
 S DIR("A")="Select INSURANCE COMPANY",DIR("??")="^D ADH^IBCNSM3"
"RTN","IBCNSM3",20,0)
 S DIR("?")="Select the Insurance Company for the policy you are entering"
"RTN","IBCNSM3",21,0)
 D ^DIR K DIR S IBCNSP=+Y I Y<1 G ADQ
"RTN","IBCNSM3",22,0)
 I $P($G(^DIC(36,+IBCNSP,0)),"^",2)="N" W !,"This company does not reimburse.  "
"RTN","IBCNSM3",23,0)
 I $P($G(^DIC(36,+IBCNSP,0)),"^",5) W !,*7,"Warning: Inactive Company" H 3 K IBCNSP G ADQ
"RTN","IBCNSM3",24,0)
 I $$DUPCO^IBCNSOK1(DFN,IBCNSP,"",1) H 3
"RTN","IBCNSM3",25,0)
 ;
"RTN","IBCNSM3",26,0)
 ; -- see if can use existing policy
"RTN","IBCNSM3",27,0)
 D SEL^IBCNSEH
"RTN","IBCNSM3",28,0)
 S IBCPOL=$$LK^IBCNSM31(IBCNSP)
"RTN","IBCNSM3",29,0)
 ;
"RTN","IBCNSM3",30,0)
 ; IB*2.0*506 added IBKEY parameter (4th) to the NEW^IBCNSJ3 call (check user's security keys)
"RTN","IBCNSM3",31,0)
 I IBCPOL<1 D NEW^IBCNSJ3(IBCNSP,.IBCPOL,,1)
"RTN","IBCNSM3",32,0)
 I IBCPOL<1 G ADQ
"RTN","IBCNSM3",33,0)
 ;
"RTN","IBCNSM3",34,0)
 ; -- file new patient policy
"RTN","IBCNSM3",35,0)
 S DIC("DR")=".18////"_IBCPOL_";1.09////1;1.05///NOW;1.06////"_DUZ
"RTN","IBCNSM3",36,0)
 K DD,DO S DA(1)=DFN,DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=IBCNSP D FILE^DICN K DIC S IBCDFN=+Y,IBNEW=1 I +Y<1 G ADQ
"RTN","IBCNSM3",37,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSM3",38,0)
 ;
"RTN","IBCNSM3",39,0)
 ; -- Edit patient policy data
"RTN","IBCNSM3",40,0)
 D PAT^IBCNSEH,PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSM3",41,0)
 ;
"RTN","IBCNSM3",42,0)
 ; -- edit PLAN data if hold key
"RTN","IBCNSM3",43,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) G ADQ
"RTN","IBCNSM3",44,0)
 I '$G(IBQUIT) D POL^IBCNSEH,EDPOL(IBCDFN)
"RTN","IBCNSM3",45,0)
 I '$G(IBNEW) D AI^IBCNSP1
"RTN","IBCNSM3",46,0)
 G ADQ
"RTN","IBCNSM3",47,0)
 ;
"RTN","IBCNSM3",48,0)
ADQ D COVERED^IBCNSM31(DFN,IBCOVP)
"RTN","IBCNSM3",49,0)
 I $G(IBCDFN)>0 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSM3",50,0)
 I $G(IBCPOL)>0 D BLD^IBCNSM
"RTN","IBCNSM3",51,0)
 S VALMBCK="R"
"RTN","IBCNSM3",52,0)
 Q
"RTN","IBCNSM3",53,0)
 ;
"RTN","IBCNSM3",54,0)
EDPOL(IBCDFN) ; -- Edit GROUP PLAN specific info
"RTN","IBCNSM3",55,0)
 I '$G(IBCDFN) G EDPOLQ
"RTN","IBCNSM3",56,0)
 N DA,DR,DIE,DIC,IBAD,IBCPOL,IBDIF
"RTN","IBCNSM3",57,0)
 S IBCPOL=$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)
"RTN","IBCNSM3",58,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G EDPOLQ
"RTN","IBCNSM3",59,0)
 I IBCPOL D
"RTN","IBCNSM3",60,0)
 .D SAVE^IBCNSP3(IBCPOL)
"RTN","IBCNSM3",61,0)
 .S DIE="^IBA(355.3,",DA=IBCPOL
"RTN","IBCNSM3",62,0)
 .;
"RTN","IBCNSM3",63,0)
 .S DR="S IBAD=$P($G(^IBA(355.3,DA,0)),U,2),Y=$S(IBAD=0:""@55"",IBAD="""":""@1"",1:""@25"");@1;.02;@25;.03;.04;@55;6.02;6.03;.09;"
"RTN","IBCNSM3",64,0)
 .S DR=DR_".15;S Y=$S($$CATOK^IBCEMRA($P(^(0),U,14)):""@60"",1:""@65"");@60;.14;@65;.16;I '$$FTFV^IBCNSU31(X) S Y=""@66"";.17;@66;.13;.05;.12;.06;.07;.08//YES;"
"RTN","IBCNSM3",65,0)
 .;
"RTN","IBCNSM3",66,0)
 .I $D(IBREG),'$G(IBNEWP) S DR="S IBAD=$P($G(^IBA(355.3,DA,0)),U,2),Y=$S(IBAD=0:""@55"",IBAD="""":""@1"",1:""@25"");@1;.02;@25;D 3^IBCNSM31;D 4^IBCNSM31;@55;6.02;6.03;.09;"
"RTN","IBCNSM3",67,0)
 .I $D(IBREG),'$G(IBNEWP) S DR=DR_".15;S Y=$S($$CATOK^IBCEMRA($P(^(0),U,14)):""@60"",1:""@65"");@60;.14;@65;.16;I '$$FTFV^IBCNSU31(X) S Y=""@66"";.17;@66;.13;.05;.12;.06;.07;.08//YES;"
"RTN","IBCNSM3",68,0)
 .;
"RTN","IBCNSM3",69,0)
 .D ^DIE
"RTN","IBCNSM3",70,0)
 .D COMP^IBCNSP3(IBCPOL)
"RTN","IBCNSM3",71,0)
 .I IBDIF D UPDATE^IBCNSP3(IBCPOL),UPDATPT^IBCNSP3(DFN,IBCDFN) I $$DUPPOL^IBCNSOK1(IBCPOL,1)
"RTN","IBCNSM3",72,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSM3",73,0)
EDPOLQ Q
"RTN","IBCNSM3",74,0)
 ;
"RTN","IBCNSM3",75,0)
OK ; -- ask okay
"RTN","IBCNSM3",76,0)
 S IBQUIT=0,DIR(0)="Y",DIR("A")="       ...OK",DIR("B")="YES" D ^DIR K DIR
"RTN","IBCNSM3",77,0)
 I $D(DIRUT) S IBQUIT=1
"RTN","IBCNSM3",78,0)
 S IBOK=Y
"RTN","IBCNSM3",79,0)
 Q
"RTN","IBCNSM3",80,0)
 ;
"RTN","IBCNSM3",81,0)
ADH ; -- show existing policies for help
"RTN","IBCNSM3",82,0)
 N DIR,DA,%A
"RTN","IBCNSM3",83,0)
 W !!,"The patient currently has the following Insurance Policies"
"RTN","IBCNSM3",84,0)
 D DISP^IBCNS
"RTN","IBCNSM3",85,0)
 Q
"RTN","IBCNSUR")
0^23^B24160231^B23131946
"RTN","IBCNSUR",1,0)
IBCNSUR ;ALB/CPM/CMS - MOVE SUBSCRIBERS TO DIFFERENT PLAN ;09-SEP-96
"RTN","IBCNSUR",2,0)
 ;;2.0;INTEGRATED BILLING;**103,276,506**;21-MAR-94;Build 74
"RTN","IBCNSUR",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSUR",4,0)
 Q
"RTN","IBCNSUR",5,0)
 ;
"RTN","IBCNSUR",6,0)
EN ; Entry point from option. Main processing loop.
"RTN","IBCNSUR",7,0)
 I $S('($D(DUZ)#2):1,'$D(^VA(200,+DUZ,0)):1,1:0) W !!?3,"The variable DUZ must be set to an active user code before continuing." G ENQ
"RTN","IBCNSUR",8,0)
 W !!,?5,"MOVE SUBSCRIBERS OF ONE PLAN TO ANOTHER PLAN"
"RTN","IBCNSUR",9,0)
 W !,?5,"This option may be used to move subscribers from a selected Plan"
"RTN","IBCNSUR",10,0)
 W !,?5,"to a different Plan. The plans may be associated with the same"
"RTN","IBCNSUR",11,0)
 W !,?5,"Insurance Company or a different one. Plan and Annual Benefit"
"RTN","IBCNSUR",12,0)
 W !,?5,"information may be moved as well. Users of this option should"
"RTN","IBCNSUR",13,0)
 W !,?5,"be knowledgeable of the VistA Patient Insurance management options."
"RTN","IBCNSUR",14,0)
 W !
"RTN","IBCNSUR",15,0)
 W !,?5,"This option also gives the user the option to expire the old plan or"
"RTN","IBCNSUR",16,0)
 W !,?5,"replace it completely in the patient insurance profile.  The reason"
"RTN","IBCNSUR",17,0)
 W !,?5,"to expire the old plan is intended for use when Insurance groups change"
"RTN","IBCNSUR",18,0)
 W !,?5,"PBMs for processing electronic Pharmacy claims.  By leaving the old"
"RTN","IBCNSUR",19,0)
 W !,?5,"plan information intact (i.e. do not replace), the user will be able"
"RTN","IBCNSUR",20,0)
 W !,?5,"to monitor PBM changes  that affect the electronic Pharmacy claims."
"RTN","IBCNSUR",21,0)
 ;
"RTN","IBCNSUR",22,0)
 W !!,$TR($J("",75)," ","-")
"RTN","IBCNSUR",23,0)
 S IBSTOP=0 F  D PROC^IBCNSUR1 Q:IBSTOP
"RTN","IBCNSUR",24,0)
ENQ K IBSTOP
"RTN","IBCNSUR",25,0)
 Q
"RTN","IBCNSUR",26,0)
 ;
"RTN","IBCNSUR",27,0)
PROC ; - Process continuation from IBCNSUR1. 
"RTN","IBCNSUR",28,0)
 ; - display old plan attributes; allow new plan to be edited
"RTN","IBCNSUR",29,0)
 D PL^IBCNSUR2
"RTN","IBCNSUR",30,0)
 R !!,?10,"Press any key to continue.    ",IBX:DTIME
"RTN","IBCNSUR",31,0)
 ;
"RTN","IBCNSUR",32,0)
 ; - display coverage limitations; allow add/edit of plan 2 limitations
"RTN","IBCNSUR",33,0)
 D LIM^IBCNSUR2
"RTN","IBCNSUR",34,0)
 ;
"RTN","IBCNSUR",35,0)
 I $P($G(^IBA(355.3,IBP1,0)),"^",11) W !!,"Please note that ",IBC1N,"'s",!,"plan, subscribers were moved from, is already inactive." G PROCDP
"RTN","IBCNSUR",36,0)
 ;
"RTN","IBCNSUR",37,0)
 ; - does the user wish to inactivate the old plan?
"RTN","IBCNSUR",38,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to inactivate "_IBC1N_"'s plan subscribers were moved from"
"RTN","IBCNSUR",39,0)
 S DIR("?")="If you wish to inactivate the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",40,0)
 D ^DIR K DIR I 'Y W !," <The old plan is still active>" G PROCQ
"RTN","IBCNSUR",41,0)
 ;
"RTN","IBCNSUR",42,0)
 D IRACT^IBCNSJ(IBP1,1) W !!,"The plan has been inactivated."
"RTN","IBCNSUR",43,0)
 ;
"RTN","IBCNSUR",44,0)
PROCDP ; - does the user wish to delete the old plan?
"RTN","IBCNSUR",45,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to delete this plan"
"RTN","IBCNSUR",46,0)
 S DIR("?")="If you wish to delete the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",47,0)
 D ^DIR K DIR I 'Y G PROCQ
"RTN","IBCNSUR",48,0)
 ;
"RTN","IBCNSUR",49,0)
 D DEL^IBCNSJ(IBP1) W !!,"The plan has been deleted."
"RTN","IBCNSUR",50,0)
 ;
"RTN","IBCNSUR",51,0)
PROCQ Q
"RTN","IBCNSUR",52,0)
 ;
"RTN","IBCNSUR",53,0)
 ;
"RTN","IBCNSUR",54,0)
SEL(IBNP) ; Select a company and plan.
"RTN","IBCNSUR",55,0)
 ;   Input:     IBNP  --  If set to 1, allows adding a new plan and
"RTN","IBCNSUR",56,0)
 ;                    --  Screen Inactive Companies
"RTN","IBCNSUR",57,0)
 ;                    --  If set to 0, must have at least one group plan
"RTN","IBCNSUR",58,0)
 ;  Output:   IBCNS  --  Pointer to selected company in file #36
"RTN","IBCNSUR",59,0)
 ;           IBPLAN  --  Pointer to selected/added plan in file #355.3
"RTN","IBCNSUR",60,0)
 ;           IBQUIT  --  Set to 1 if the user wants to quit.
"RTN","IBCNSUR",61,0)
 ;
"RTN","IBCNSUR",62,0)
 N X,Y K DIC,DIR
"RTN","IBCNSUR",63,0)
 S DIC(0)="QEAMZ",DIC="^DIC(36,"
"RTN","IBCNSUR",64,0)
 I 'IBNP S DIC("S")="I $$ANYGP^IBCNSJ(+Y,0,1)"
"RTN","IBCNSUR",65,0)
 I IBNP S DIC("S")="I '$P($G(^DIC(36,+Y,0)),U,5)"
"RTN","IBCNSUR",66,0)
 S DIC("A")="Select INSURANCE COMPANY: "
"RTN","IBCNSUR",67,0)
 D ^DIC K DIC S IBCNS=+Y
"RTN","IBCNSUR",68,0)
 I Y<0 W "   <No Insurance Company selected>" S IBQUIT=1 G SELQ
"RTN","IBCNSUR",69,0)
 ;
"RTN","IBCNSUR",70,0)
 ; - if a new plan may be added, allow adding
"RTN","IBCNSUR",71,0)
 I IBNP D  I (IBPLAN)!(IBQUIT) G SELQ
"RTN","IBCNSUR",72,0)
 .W !!,"You may add a new Plan at this time or select an existing Plan."
"RTN","IBCNSUR",73,0)
 .; IB*2.0*506 added IBKEY parameter (4th) to the NEW^IBCNSJ3 call (check user's security keys)
"RTN","IBCNSUR",74,0)
 .D NEW^IBCNSJ3(IBCNS,.IBPLAN,1,1)
"RTN","IBCNSUR",75,0)
 .I 'IBPLAN,'$$ANYGP^IBCNSJ(+IBCNS,0,1) W !!,*7,"Insurance Company receiving subscribers must have a Plan." S IBQUIT=1
"RTN","IBCNSUR",76,0)
 ;
"RTN","IBCNSUR",77,0)
 ; - see if user wants to select the plan
"RTN","IBCNSUR",78,0)
 W !!,"You may select an existing Plan from a list or enter a specific Plan.",!
"RTN","IBCNSUR",79,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you wish to enter a specific plan"
"RTN","IBCNSUR",80,0)
 S DIR("?")="The look-up facility to select a group plan has been enhanced to use the List Manager.  Enter 'NO' if you wish to select a plan from this look-up, or 'YES' to directly enter a plan."
"RTN","IBCNSUR",81,0)
 D ^DIR K DIR I $D(DIRUT) S IBQUIT=1 G SELQ
"RTN","IBCNSUR",82,0)
 ;
"RTN","IBCNSUR",83,0)
 ; - invoke the plan look-up
"RTN","IBCNSUR",84,0)
 I 'Y D  G SELQ
"RTN","IBCNSUR",85,0)
 .W "   ..." S IBPLAN=0 D LKP^IBCNSU2(IBCNS,0,0,.IBPLAN,0,1)
"RTN","IBCNSUR",86,0)
 .I 'IBPLAN W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",87,0)
 ;
"RTN","IBCNSUR",88,0)
 ; - allow a FileMan look-up
"RTN","IBCNSUR",89,0)
 S DIC("A")="Select a GROUP PLAN: "
"RTN","IBCNSUR",90,0)
 S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I +^(0)=IBCNS,$P(^(0),U,2)"
"RTN","IBCNSUR",91,0)
 S DIC("W")="N IBX S IBX=$G(^(0)) W ""   Name: "",$E($S($P(IBX,U,3)]"""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""   Number: "",$S($P(IBX,U,4)]"""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSUR",92,0)
 D ^DIC K DIC S IBPLAN=+Y
"RTN","IBCNSUR",93,0)
 I Y<0 W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",94,0)
 ;
"RTN","IBCNSUR",95,0)
SELQ K DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSUR",96,0)
 Q
"RTN","IBCNUPD")
0^25^B19970193^B15205533
"RTN","IBCNUPD",1,0)
IBCNUPD ;ALB/TAZ - UPDATE SUBCRIBER INFO FOR SELECTED PATIENTS ; 07 Mar 2013  14:44 PM
"RTN","IBCNUPD",2,0)
 ;;2.0;INTEGRATED BILLING;**497,506**;21-MAR-94;Build 74
"RTN","IBCNUPD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNUPD",4,0)
 ;
"RTN","IBCNUPD",5,0)
 ; Call at tags only
"RTN","IBCNUPD",6,0)
 Q
"RTN","IBCNUPD",7,0)
 ;
"RTN","IBCNUPD",8,0)
 ;
"RTN","IBCNUPD",9,0)
EN ; Entry Point for TaskMan.  The routine should be called at label TASK since it will take awhile to complete.
"RTN","IBCNUPD",10,0)
 ;
"RTN","IBCNUPD",11,0)
 N DFN,FILE,INS,IBREL,IBVAL,IENS,FIELD,DATA,DA,DR,DIE,EXPDT,X,Y
"RTN","IBCNUPD",12,0)
 K ^TMP($J,"IBCNUPD")
"RTN","IBCNUPD",13,0)
 S DFN=0
"RTN","IBCNUPD",14,0)
 S FILE=2.312
"RTN","IBCNUPD",15,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D
"RTN","IBCNUPD",16,0)
 . K ^UTILITY("VAPA",$J),^UTILITY("VADM",$J)
"RTN","IBCNUPD",17,0)
 . S INS=0
"RTN","IBCNUPD",18,0)
 . F  S INS=$O(^DPT(DFN,.312,INS)) Q:'INS  D
"RTN","IBCNUPD",19,0)
 .. I '$D(^DPT(DFN,.312,INS,0)) Q  ;Don't process bad nodes.
"RTN","IBCNUPD",20,0)
 .. S IENS=INS_","_DFN_","
"RTN","IBCNUPD",21,0)
 .. S EXPDT=+$$GET1^DIQ(FILE,IENS,3,"I")
"RTN","IBCNUPD",22,0)
 .. I EXPDT,EXPDT<DT Q  ;insurance expiration date exists and it's a past date which means inactive policy
"RTN","IBCNUPD",23,0)
 .. I $$GET1^DIQ(FILE,IENS,4.03)'="SELF" Q
"RTN","IBCNUPD",24,0)
 .. S IBREL=$$GET1^DIQ(FILE,IENS,4.03,"I")
"RTN","IBCNUPD",25,0)
 .. F FIELD=7.01,3.01,3.02,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12 D      ; IB*2.0*497 (vd)
"RTN","IBCNUPD",26,0)
 ... S DATA=$$GET1^DIQ(FILE,IENS,FIELD) I DATA'="" Q
"RTN","IBCNUPD",27,0)
 ... S IBVAL=$$PIDEF^IBCNSP1(IBREL,FIELD,DFN,0) I IBVAL="" Q
"RTN","IBCNUPD",28,0)
 ... S DIE="^DPT("_DFN_",.312,"
"RTN","IBCNUPD",29,0)
 ... S DA(1)=DFN,DA=INS
"RTN","IBCNUPD",30,0)
 ... S DR=FIELD_"///^S X=IBVAL"
"RTN","IBCNUPD",31,0)
 ... D ^DIE
"RTN","IBCNUPD",32,0)
 ;Send completion message
"RTN","IBCNUPD",33,0)
 D MAIL
"RTN","IBCNUPD",34,0)
 ;
"RTN","IBCNUPD",35,0)
ENQ Q
"RTN","IBCNUPD",36,0)
 ;
"RTN","IBCNUPD",37,0)
OPT ; Enter from the option
"RTN","IBCNUPD",38,0)
 W !,$$TASK()
"RTN","IBCNUPD",39,0)
OPTQ ;
"RTN","IBCNUPD",40,0)
 Q
"RTN","IBCNUPD",41,0)
 ;
"RTN","IBCNUPD",42,0)
TASK(IBQ) ;Set up task to run the option
"RTN","IBCNUPD",43,0)
 N X,Y,IDT,XDT,TSK,MSG,DTOUT,DUOUT
"RTN","IBCNUPD",44,0)
 ;
"RTN","IBCNUPD",45,0)
 ;If option is queued, set up queue date/time and bypass prompt
"RTN","IBCNUPD",46,0)
 I $G(IBQ) D  G TASK1
"RTN","IBCNUPD",47,0)
 . S X="T+1@2100"
"RTN","IBCNUPD",48,0)
 . S %DT="FR"
"RTN","IBCNUPD",49,0)
 . D ^%DT
"RTN","IBCNUPD",50,0)
 ;
"RTN","IBCNUPD",51,0)
 W !,"*************************** IMPORTANT!! ********************************"
"RTN","IBCNUPD",52,0)
 W !,"This option will scan through the entire Patient File for patients with "
"RTN","IBCNUPD",53,0)
 W !,"insurance where the relationship to insured is self.  Certain fields in "
"RTN","IBCNUPD",54,0)
 W !,"Insurance Type sub-file will be updated to match the patient data if it "
"RTN","IBCNUPD",55,0)
 W !,"does not already exist.  This will take awhile and must be queued to run"
"RTN","IBCNUPD",56,0)
 W !,"in the background when there are few users on the system. The default is"
"RTN","IBCNUPD",57,0)
 W !,"Tomorrow at 9:00 p.m."
"RTN","IBCNUPD",58,0)
 W !
"RTN","IBCNUPD",59,0)
 ;
"RTN","IBCNUPD",60,0)
 ;Set Date and Time
"RTN","IBCNUPD",61,0)
 K %DT
"RTN","IBCNUPD",62,0)
 S %DT="AEFR"
"RTN","IBCNUPD",63,0)
 S %DT("A")="Enter date/time to queue the option: "
"RTN","IBCNUPD",64,0)
 S %DT("B")="T+1@2100"
"RTN","IBCNUPD",65,0)
 S %DT(0)="NOW"  ; prevent past date/time being entered
"RTN","IBCNUPD",66,0)
 D ^%DT
"RTN","IBCNUPD",67,0)
 I $D(DTOUT)!$D(DUOUT)!(Y<0) S MSG="Task Aborted. Option NOT scheduled." G TASKQ
"RTN","IBCNUPD",68,0)
 ;
"RTN","IBCNUPD",69,0)
TASK1 ;bypass for queued task
"RTN","IBCNUPD",70,0)
 S IDT=Y D DD^%DT S XDT=Y
"RTN","IBCNUPD",71,0)
 ;
"RTN","IBCNUPD",72,0)
 ;Check if task already scheduled for date/time
"RTN","IBCNUPD",73,0)
 S TSK=$$GETTASK(IDT)
"RTN","IBCNUPD",74,0)
 I TSK D  G TASKQ
"RTN","IBCNUPD",75,0)
 . S Y=$P(TSK,U,2) D DD^%DT
"RTN","IBCNUPD",76,0)
 . S MSG=" Task (#"_+TSK_") already scheduled to run on "_Y
"RTN","IBCNUPD",77,0)
 ;
"RTN","IBCNUPD",78,0)
 ;Schedule the task
"RTN","IBCNUPD",79,0)
 S TSK=$$SCHED(IDT)
"RTN","IBCNUPD",80,0)
 ;
"RTN","IBCNUPD",81,0)
 ;Check for scheduling problem
"RTN","IBCNUPD",82,0)
 I 'TSK S MSG=" Task Could Not Be Scheduled" G TASKQ
"RTN","IBCNUPD",83,0)
 ;
"RTN","IBCNUPD",84,0)
 ;Send successful schedule message
"RTN","IBCNUPD",85,0)
 S MSG=" Update Subscriber Information Scheduled for "_XDT
"RTN","IBCNUPD",86,0)
 ;
"RTN","IBCNUPD",87,0)
TASKQ ;
"RTN","IBCNUPD",88,0)
 Q MSG
"RTN","IBCNUPD",89,0)
 ;
"RTN","IBCNUPD",90,0)
GETTASK(IDT) ;
"RTN","IBCNUPD",91,0)
 N TASK,TASKNO,TDT,XUSUCI,Y,ZTSK0
"RTN","IBCNUPD",92,0)
 ;
"RTN","IBCNUPD",93,0)
 ;Retrieve UCI
"RTN","IBCNUPD",94,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBCNUPD",95,0)
 ;       
"RTN","IBCNUPD",96,0)
 S (TASK,TDT)=0,TASKNO=""
"RTN","IBCNUPD",97,0)
 F  S TASK=$O(^%ZTSK(TASK)) Q:'TASK  D  Q:TASKNO
"RTN","IBCNUPD",98,0)
 .I $G(^%ZTSK(TASK,.03))["IBCN SUBSCRIBER UPDATE" D
"RTN","IBCNUPD",99,0)
 ..S ZTSK0=$G(^%ZTSK(TASK,0))
"RTN","IBCNUPD",100,0)
 ..;
"RTN","IBCNUPD",101,0)
 ..;Exclude tasks scheduled by TaskMan
"RTN","IBCNUPD",102,0)
 ..Q:ZTSK0["ZTSK^XQ1"
"RTN","IBCNUPD",103,0)
 ..;
"RTN","IBCNUPD",104,0)
 ..;Exclude tasks in other ucis
"RTN","IBCNUPD",105,0)
 ..Q:(($P(ZTSK0,U,11)_","_$P(ZTSK0,U,12))'=XUSUCI)
"RTN","IBCNUPD",106,0)
 ..;
"RTN","IBCNUPD",107,0)
 ..;Check for correct date and time
"RTN","IBCNUPD",108,0)
 ..S TDT=$$HTFM^XLFDT($P(ZTSK0,"^",6))
"RTN","IBCNUPD",109,0)
 ..;I TDT=IDT S TASKNO=TASK
"RTN","IBCNUPD",110,0)
 Q TASKNO_U_TDT
"RTN","IBCNUPD",111,0)
 ;
"RTN","IBCNUPD",112,0)
 ;Schedule Task
"RTN","IBCNUPD",113,0)
 ;
"RTN","IBCNUPD",114,0)
SCHED(ZTDTH) ;
"RTN","IBCNUPD",115,0)
 N ZTRTN,ZTDESC,ZTIO,ZTSK
"RTN","IBCNUPD",116,0)
 S ZTRTN="EN^IBCNUPD"
"RTN","IBCNUPD",117,0)
 S ZTDESC="IBCN SUBSCRIBER UPDATE"
"RTN","IBCNUPD",118,0)
 S ZTIO=""
"RTN","IBCNUPD",119,0)
 D ^%ZTLOAD
"RTN","IBCNUPD",120,0)
 Q ZTSK
"RTN","IBCNUPD",121,0)
 ;
"RTN","IBCNUPD",122,0)
MAIL ;Send completion message
"RTN","IBCNUPD",123,0)
 NEW XMDUZ,XMSUBJ,XMBODY,MSG,XMTO,DA,DIE,DR
"RTN","IBCNUPD",124,0)
 S XMDUZ=DUZ,XMSUBJ="Subscriber Update Has Completed",XMBODY="MSG"
"RTN","IBCNUPD",125,0)
 S MSG(1)="The Subscriber Update Option has completed at "
"RTN","IBCNUPD",126,0)
 S MSG(2)=" "
"RTN","IBCNUPD",127,0)
 S MSG(3)="     "_$$SITE^VASITE
"RTN","IBCNUPD",128,0)
 ;
"RTN","IBCNUPD",129,0)
 ; recipients of message
"RTN","IBCNUPD",130,0)
 S XMTO(DUZ)=""
"RTN","IBCNUPD",131,0)
 S XMTO("G.PATCHES")=""
"RTN","IBCNUPD",132,0)
 S XMTO("G.IB EDI")=""
"RTN","IBCNUPD",133,0)
 S XMTO("G.IB EDI SUPERVISOR")=""
"RTN","IBCNUPD",134,0)
 ;
"RTN","IBCNUPD",135,0)
 D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO)
"RTN","IBCNUPD",136,0)
 ;
"RTN","IBCNUPD",137,0)
 Q
"RTN","IBJPI")
0^13^B19548396^B21978399
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP eIV SITE PARAMETERS SCREEN ;14-JUN-2002
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,438,479,506**;21-MAR-94;Build 74
"RTN","IBJPI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; eIV - Electronic Insurance Verification Interface parameters
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIV application used for electronic Insurance Verification."
"RTN","IBJPI",28,0)
 W !!,"The General Parameters section concerns overall parameters for"
"RTN","IBJPI",29,0)
 W !,"monitoring the interface and controlling eIV communication between"
"RTN","IBJPI",30,0)
 W !,"VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The Batch Extracts section concerns extract-specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active/inactive status and selection criteria."
"RTN","IBJPI",33,0)
 W !!,"The Service Type Codes section concerns specifying up to nine"
"RTN","IBJPI",34,0)
 W !,"Site Selected Service Type Codes which will be sent with"
"RTN","IBJPI",35,0)
 W !,"insurance inquiries."
"RTN","IBJPI",36,0)
 D PAUSE^VALM1
"RTN","IBJPI",37,0)
 W @IOF
"RTN","IBJPI",38,0)
 S VALMBCK="R"
"RTN","IBJPI",39,0)
 Q
"RTN","IBJPI",40,0)
 ;
"RTN","IBJPI",41,0)
EXIT ; exit
"RTN","IBJPI",42,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",43,0)
 D CLEAN^VALM10
"RTN","IBJPI",44,0)
 Q
"RTN","IBJPI",45,0)
 ;
"RTN","IBJPI",46,0)
BLD ; build screen array
"RTN","IBJPI",47,0)
 N IBLN,IBCOL,IBWID,IBIIV,IBIIVB,IBIEN,CT,IBEX1,IBEX2,IBEX,IEN
"RTN","IBJPI",48,0)
 N IBST,IBDATA,DISYS,X,STATUS,AIEN,ADATA
"RTN","IBJPI",49,0)
 ;
"RTN","IBJPI",50,0)
 S (IBLN,VALMCNT)=0,IBCOL=3,IBIIV=$G(^IBE(350.9,1,51))
"RTN","IBJPI",51,0)
 ; -- Gen Params
"RTN","IBJPI",52,0)
 S IBWID=49
"RTN","IBJPI",53,0)
 S IBLN=$$SETN("General Parameters",IBLN,IBCOL,1,)
"RTN","IBJPI",54,0)
 S IBLN=$$SET("Days between electronic re-verification checks:  ",$P(IBIIV,U,1),IBLN,IBWID)
"RTN","IBJPI",55,0)
 S IBLN=$$SET("Send daily statistical report via MailMan:  ",$S($P(IBIIV,U,2):"YES",$P(IBIIV,U,2)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",56,0)
 I $P(IBIIV,U,2) S IBLN=$$SET("Time of day for daily statistical report:  ",$P(IBIIV,U,3),IBLN,IBWID)
"RTN","IBJPI",57,0)
 S IBLN=$$SET("Mail Group for eIV messages:  ",$$MGRP^IBCNEUT5,IBLN,IBWID)
"RTN","IBJPI",58,0)
 ;
"RTN","IBJPI",59,0)
 S IBLN=$$SET("Contact Person:  ",$S($P(IBIIV,U,16)'="":$$GET1^DIQ(200,$P(IBIIV,U,16)_",",.01,"E"),1:""),IBLN,IBWID)
"RTN","IBJPI",60,0)
 S IBLN=$$SET("Send MailMan message if communication problem:  ",$S($P(IBIIV,U,20):"YES",$P(IBIIV,U,20)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",61,0)
 ;
"RTN","IBJPI",62,0)
 ; Skip lines in between sections
"RTN","IBJPI",63,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",64,0)
 ;
"RTN","IBJPI",65,0)
 ; -- Batch Extracts
"RTN","IBJPI",66,0)
 S IBWID=43
"RTN","IBJPI",67,0)
 S IBLN=$$SETN("Batch Extracts",IBLN,IBCOL,1,)
"RTN","IBJPI",68,0)
 S IBLN=$$SET("Extract               Selection  Maximum # to","",IBLN,IBWID)
"RTN","IBJPI",69,0)
 S IBLN=$$SETN(" Name          On/Off  Criteria   Extract/Day",IBLN,IBCOL+1,,1)
"RTN","IBJPI",70,0)
 ;S IBLN=$$SETN(" Extract Name      On/Off      Selection Criteria",IBLN,IBCOL+1,,1)
"RTN","IBJPI",71,0)
 ; Loop thru extracts
"RTN","IBJPI",72,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBJPI",73,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBJPI",74,0)
 . S IBEX=+$P(IBIIVB,U,1)  ; Type
"RTN","IBJPI",75,0)
 . I '$F(".1.2.","."_IBEX_".") Q
"RTN","IBJPI",76,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,U,1)'="":$$GET1^DIQ(350.9002,IEN_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",77,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,2):"ON",1:"OFF"),8)
"RTN","IBJPI",78,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,U,3),1:$P(IBIIVB,U,3))
"RTN","IBJPI",79,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,U,4),1:$P(IBIIVB,U,4))
"RTN","IBJPI",80,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"n/a",IBEX=2:IBEX1,IBEX=3:IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",81,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,5):+$P(IBIIVB,U,5),1:$P(IBIIVB,U,5)),14)
"RTN","IBJPI",82,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",83,0)
 . Q
"RTN","IBJPI",84,0)
 ;S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",85,0)
 S VALMCNT=IBLN
"RTN","IBJPI",86,0)
 Q
"RTN","IBJPI",87,0)
 ;
"RTN","IBJPI",88,0)
SET(TTL,DATA,LN,WID) ;
"RTN","IBJPI",89,0)
 ; TTL = caption for field
"RTN","IBJPI",90,0)
 ; DATA = field value
"RTN","IBJPI",91,0)
 ; LN = current line #
"RTN","IBJPI",92,0)
 ; WID = right justify width
"RTN","IBJPI",93,0)
 N IBY
"RTN","IBJPI",94,0)
 ; update line ct
"RTN","IBJPI",95,0)
 S LN=LN+1
"RTN","IBJPI",96,0)
 ; offset line by 3 spaces
"RTN","IBJPI",97,0)
 S IBY="   "_$J(TTL,WID)_DATA D SET1(IBY,LN,0,$L(IBY))
"RTN","IBJPI",98,0)
 Q LN
"RTN","IBJPI",99,0)
 ;
"RTN","IBJPI",100,0)
SETN(TTL,LN,COL,RV,UN) ;
"RTN","IBJPI",101,0)
 ; TTL = caption for field
"RTN","IBJPI",102,0)
 ; LN = current line #
"RTN","IBJPI",103,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",104,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",105,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",106,0)
 N IBY
"RTN","IBJPI",107,0)
 ; update line ct
"RTN","IBJPI",108,0)
 S LN=LN+1
"RTN","IBJPI",109,0)
 ; offset line by 2 spaces
"RTN","IBJPI",110,0)
 S IBY="  "_TTL D SET1(IBY,LN,COL,$L(TTL),$G(RV),$G(UN))
"RTN","IBJPI",111,0)
 Q LN
"RTN","IBJPI",112,0)
 ;
"RTN","IBJPI",113,0)
SET1(STR,LN,COL,WD,RV,UN) ; Set up ^TMP array with screen data
"RTN","IBJPI",114,0)
 ; STR = line text
"RTN","IBJPI",115,0)
 ; LN = current line #
"RTN","IBJPI",116,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",117,0)
 ; WD = width of video attribute
"RTN","IBJPI",118,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",119,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",120,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI",121,0)
 I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJPI",122,0)
 I $G(UN)'="" D CNTRL^VALM10(LN,COL,WD-1,IOUON,IOUOFF)
"RTN","IBJPI",123,0)
 Q
"RTN","IBJPI",124,0)
 ;
"RTN","IBY506PO")
0^^B23493376^n/a
"RTN","IBY506PO",1,0)
IBY506PO ;ALB/VD - IB*2*506 POST-INSTALL ;23-AUG-2000
"RTN","IBY506PO",2,0)
 ;;2.0;INTEGRATED BILLING;**506**;21-MAR-94;Build 74
"RTN","IBY506PO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBY506PO",4,0)
 ;ICR - 10140
"RTN","IBY506PO",5,0)
 ;
"RTN","IBY506PO",6,0)
EN ;Post Install Routine primary entry point
"RTN","IBY506PO",7,0)
 N IBY,Y,QUIT,ROUT
"RTN","IBY506PO",8,0)
 S QUIT=0
"RTN","IBY506PO",9,0)
 F IBY="BLD","SITEPARM","HOLDLP","NEWSTAT","ESCALATE","UPDATE" D  I QUIT Q
"RTN","IBY506PO",10,0)
 . S ROUT=IBY_"^IBY506PO"
"RTN","IBY506PO",11,0)
 . S Y=$$NEWCP^XPDUTL(IBY,ROUT)
"RTN","IBY506PO",12,0)
 . I 'Y D BMES^XPDUTL("ERROR Creating "_IBY_" Checkpoint.") S QUIT=1 Q
"RTN","IBY506PO",13,0)
 Q
"RTN","IBY506PO",14,0)
 ;
"RTN","IBY506PO",15,0)
BLD ; Update ^XUTL("XQORM" for menu protocols. ICR - 10140
"RTN","IBY506PO",16,0)
 N IBX,IBY,X,Y
"RTN","IBY506PO",17,0)
 D MES^XPDUTL("Rebuilding Protocol Menus.")
"RTN","IBY506PO",18,0)
 F IBX="IBCNB LIST SCREEN MENU","IBCNB ENTRY SCREEN MENU" D
"RTN","IBY506PO",19,0)
 .S DIC="^ORD(101,",DIC(0)="F",X=IBX D ^DIC K DIC S IBY=+Y
"RTN","IBY506PO",20,0)
 .I IBY>0 S XQORM=IBY_";ORD(101," D XREF^XQORM
"RTN","IBY506PO",21,0)
 K ORULT,XQORM
"RTN","IBY506PO",22,0)
 Q
"RTN","IBY506PO",23,0)
 ;
"RTN","IBY506PO",24,0)
SITEPARM ; initialize site parameters
"RTN","IBY506PO",25,0)
 ; set eIV site parameter # OF RETRIES to "1"
"RTN","IBY506PO",26,0)
 ; set eIV site parameter RETRY FLAG to "0" (NO)
"RTN","IBY506PO",27,0)
 ; set eIV site parameter FRESHNESS DAYS to "180"
"RTN","IBY506PO",28,0)
 ; set eIV site parameter TIMEOUT DAYS to "5"
"RTN","IBY506PO",29,0)
 ; set eIV site parameter HL7 RESPONSE PROCESSING to "I" (IMMEDIATE)
"RTN","IBY506PO",30,0)
 D MES^XPDUTL("Reset/Initialize values of eIV site parameters")
"RTN","IBY506PO",31,0)
 N DIE,DA,DR,X,Y
"RTN","IBY506PO",32,0)
 S DIE=350.9,DA=1,DR="51.06///1;51.26///N;51.01///180;51.05///5;51.13///I"
"RTN","IBY506PO",33,0)
 D ^DIE
"RTN","IBY506PO",34,0)
 Q
"RTN","IBY506PO",35,0)
 ;
"RTN","IBY506PO",36,0)
HOLDLP ; loop through all TQ entries that have a status of HOLD and mark them as communication failure.
"RTN","IBY506PO",37,0)
 D MES^XPDUTL("Search through all of the TRANSMISSION QUEUE entries for those having a status")
"RTN","IBY506PO",38,0)
 D MES^XPDUTL("of HOLD and mark them as COMMUNICATION FAILURE.")
"RTN","IBY506PO",39,0)
 N IEN,BUFF,CCODE
"RTN","IBY506PO",40,0)
 S CCODE=$O(^IBE(365.15,"B","C1",""))
"RTN","IBY506PO",41,0)
 ; file 365.1, IIV Transmission Queue
"RTN","IBY506PO",42,0)
 S IEN=""
"RTN","IBY506PO",43,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D    ; node 4 is for only HOLD status.
"RTN","IBY506PO",44,0)
 . S BUFF=$P($G(^IBCN(365.1,IEN,0)),U,5)
"RTN","IBY506PO",45,0)
 . ;
"RTN","IBY506PO",46,0)
 . ; set TQ record to 'communication failure'
"RTN","IBY506PO",47,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBY506PO",48,0)
 . ;
"RTN","IBY506PO",49,0)
 . ; For msg in the Response file set the status to 'Comm Failure'
"RTN","IBY506PO",50,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBY506PO",51,0)
 . ;
"RTN","IBY506PO",52,0)
 . ; Set Buffer symbol to 'C1' (Comm Failure)
"RTN","IBY506PO",53,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,CCODE)    ;set to "#" communication failure
"RTN","IBY506PO",54,0)
 Q
"RTN","IBY506PO",55,0)
 ;
"RTN","IBY506PO",56,0)
NEWSTAT ; add a new code to the IIV STATUS TABLE (#365.15) for COMMUNICATION FAILURE
"RTN","IBY506PO",57,0)
 D MES^XPDUTL("Add a new COMMUNICATION FAILURE code to the IIV STATUS TABLE")
"RTN","IBY506PO",58,0)
 N IBACTN,IBDATA,IBDESC,IBERR,IBIEN
"RTN","IBY506PO",59,0)
 I $D(^IBE(365.15,"B","C1")) D BMES^XPDUTL("*** NEW 'C1' CODE NOT ADDED TO IIV STATUS TABLE...ALREADY EXISTS ***") G NEWSTATX
"RTN","IBY506PO",60,0)
 ;
"RTN","IBY506PO",61,0)
 ;Set up WP Arrays
"RTN","IBY506PO",62,0)
 S IBDESC("WP",1)="eIV was unable to electronically verify this insurance information"
"RTN","IBY506PO",63,0)
 S IBDESC("WP",2)="due to a communication failure."
"RTN","IBY506PO",64,0)
 ;
"RTN","IBY506PO",65,0)
 S IBACTN("WP",1)="Action to take:  Contact the insurance company to manually verify"
"RTN","IBY506PO",66,0)
 S IBACTN("WP",2)="this insurance information."
"RTN","IBY506PO",67,0)
 ;
"RTN","IBY506PO",68,0)
 ;Set up File Nodes
"RTN","IBY506PO",69,0)
 S IBDATA(.01)="C1"
"RTN","IBY506PO",70,0)
 S IBDATA(.02)=35
"RTN","IBY506PO",71,0)
 S IBDATA(.03)=0
"RTN","IBY506PO",72,0)
 S IBDATA(1)=$NA(IBDESC("WP"))
"RTN","IBY506PO",73,0)
 S IBDATA(2)=$NA(IBACTN("WP"))
"RTN","IBY506PO",74,0)
 S IBIEN=$$ADD^IBDFDBS(365.15,,.IBDATA,.IBERR)
"RTN","IBY506PO",75,0)
 I IBERR D BMES^XPDUTL("*** ERROR ADDING 'C1' CODE TO THE IIV STATUS TABLE (#365.15) ***") G NEWSTATX
"RTN","IBY506PO",76,0)
 D BMES^XPDUTL("   NEW 'C1' CODE SUCCESSFULLY ADDED TO IIV STATUS TABLE")
"RTN","IBY506PO",77,0)
NEWSTATX ;
"RTN","IBY506PO",78,0)
 Q
"RTN","IBY506PO",79,0)
 ;
"RTN","IBY506PO",80,0)
ESCALATE ;Add Escalate Code "$" to the IIV STATUS TABLE (#365.15)
"RTN","IBY506PO",81,0)
 D MES^XPDUTL("Add a new ESCALATE code to the IIV STATUS TABLE")
"RTN","IBY506PO",82,0)
 N IBACTN,IBDATA,IBDESC,IBERR,IBIEN
"RTN","IBY506PO",83,0)
 I $D(^IBE(365.15,"B","E1")) D BMES^XPDUTL("*** NEW 'E1' CODE NOT ADDED TO IIV STATUS TABLE...ALREADY EXISTS ***") G ESCX
"RTN","IBY506PO",84,0)
 ;
"RTN","IBY506PO",85,0)
 ;Set up WP Arrays
"RTN","IBY506PO",86,0)
 S IBDESC("WP",1)="Information received via electronic inquiry indicates patient has active"
"RTN","IBY506PO",87,0)
 S IBDESC("WP",2)="insurance; however, another verifier did not have the authority to"
"RTN","IBY506PO",88,0)
 S IBDESC("WP",3)="process this entry."
"RTN","IBY506PO",89,0)
 ;
"RTN","IBY506PO",90,0)
 S IBACTN("WP",1)="Action to take:  Review the details listed in the eIV Response Report"
"RTN","IBY506PO",91,0)
 S IBACTN("WP",2)="before processing this buffer entry."
"RTN","IBY506PO",92,0)
 ;
"RTN","IBY506PO",93,0)
 ;Set up File Nodes
"RTN","IBY506PO",94,0)
 S IBDATA(.01)="E1"
"RTN","IBY506PO",95,0)
 S IBDATA(.02)=36
"RTN","IBY506PO",96,0)
 S IBDATA(.03)=0
"RTN","IBY506PO",97,0)
 S IBDATA(1)=$NA(IBDESC("WP"))
"RTN","IBY506PO",98,0)
 S IBDATA(2)=$NA(IBACTN("WP"))
"RTN","IBY506PO",99,0)
 S IBIEN=$$ADD^IBDFDBS(365.15,,.IBDATA,.IBERR)
"RTN","IBY506PO",100,0)
 I IBERR D BMES^XPDUTL("*** ERROR ADDING 'E1' CODE TO THE IIV STATUS TABLE (#365.15) ***") G ESCX
"RTN","IBY506PO",101,0)
 D BMES^XPDUTL("   NEW 'E1' CODE SUCCESSFULLY ADDED TO IIV STATUS TABLE")
"RTN","IBY506PO",102,0)
ESCX ;
"RTN","IBY506PO",103,0)
 Q
"RTN","IBY506PO",104,0)
 ;
"RTN","IBY506PO",105,0)
UPDATE ;Call option to update Insurance Type File
"RTN","IBY506PO",106,0)
 ; Schedule through TaskMan to run at night?
"RTN","IBY506PO",107,0)
 N MSG
"RTN","IBY506PO",108,0)
 D MES^XPDUTL("Creating Task to update the Insurance Type File... ")
"RTN","IBY506PO",109,0)
 U IO(0)
"RTN","IBY506PO",110,0)
UPDATE1 S MSG=$$TASK^IBCNUPD($D(ZTQUEUED)) I MSG["Aborted" D  G UPDATE1
"RTN","IBY506PO",111,0)
 . S MSG="You MUST schedule this task in order to continue." D MES^XPDUTL(MSG) H 3
"RTN","IBY506PO",112,0)
 U IO
"RTN","IBY506PO",113,0)
 D BMES^XPDUTL(MSG)
"RTN","IBY506PO",114,0)
 Q
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"VER")
8.0^22.0
"^DD",2,2.312,8.01,0)
REQUESTED SERVICE DATE^D^^8;1^S %DT="E" D ^%DT S X=Y K:X<1 X
"^DD",2,2.312,8.01,.1)
SERVICE DATE
"^DD",2,2.312,8.01,3)
Enter the Service Date of the Response.
"^DD",2,2.312,8.01,21,0)
^^3^3^3130912^^
"^DD",2,2.312,8.01,21,1,0)
This is the Eligibility/Service Date that is received on the eIV 
"^DD",2,2.312,8.01,21,2,0)
Response message.  If it is not present on the Response message then this 
"^DD",2,2.312,8.01,21,3,0)
is the Eligibility Date that was sent on the Inquiry message.
"^DD",2,2.312,8.01,23,0)
^^4^4^3130912^^^
"^DD",2,2.312,8.01,23,1,0)
The Service Date associated with the Eligibility Benefits when the 
"^DD",2,2.312,8.01,23,2,0)
Eligibility Benefits are saved from the Insurance Buffer to the Patient's 
"^DD",2,2.312,8.01,23,3,0)
Policy. This is the Service Date the Payer responded to at the top of the 
"^DD",2,2.312,8.01,23,4,0)
Eligibility Benefit section above the Insurance Status.
"^DD",2,2.312,8.01,"DT")
3130912
"^DD",2,2.312,8.02,0)
REQUESTED SERVICE TYPE^P365.013'^IBE(365.013,^8;2^Q
"^DD",2,2.312,8.02,.1)
SERVICE TYPE
"^DD",2,2.312,8.02,3)
Enter the Service Type of the Response
"^DD",2,2.312,8.02,21,0)
^^1^1^3130912^
"^DD",2,2.312,8.02,21,1,0)
This is the Service Type that is received on the Response message.
"^DD",2,2.312,8.02,23,0)
^^4^4^3130731^^
"^DD",2,2.312,8.02,23,1,0)
The Service Type that was inquired about when the Eligibility Benefits 
"^DD",2,2.312,8.02,23,2,0)
are saved from the Insurance Buffer to the Patient's Policy. This is the 
"^DD",2,2.312,8.02,23,3,0)
Service Type inquired about at the top of the Eligibility Benefit section 
"^DD",2,2.312,8.02,23,4,0)
above the Insurance Status.
"^DD",2,2.312,8.02,"DT")
3130912
"^DD",350.9,350.9,51.26,0)
RETRY FLAG^S^Y:YES;N:NO;^51;26^Q
"^DD",350.9,350.9,51.26,3)
Should an eIV Inquiry retransmit if no response is received?
"^DD",350.9,350.9,51.26,21,0)
^^2^2^3130912^
"^DD",350.9,350.9,51.26,21,1,0)
A 'Y'es value indicates that an eIV Inquiry will retransmit if no 
"^DD",350.9,350.9,51.26,21,2,0)
response is received within the number of TIMEOUT DAYS (51.05) field.
"^DD",350.9,350.9,51.26,"DT")
3130912
"^DD",355.33,355.33,.01,0)
DATE ENTERED^RD^^0;1^S %DT="ETXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.33,355.33,.01,1,0)
^.1
"^DD",355.33,355.33,.01,1,1,0)
355.33^B
"^DD",355.33,355.33,.01,1,1,1)
S ^IBA(355.33,"B",$E(X,1,30),DA)=""
"^DD",355.33,355.33,.01,1,1,2)
K ^IBA(355.33,"B",$E(X,1,30),DA)
"^DD",355.33,355.33,.01,1,2,0)
^^TRIGGER^355.33^.02
"^DD",355.33,355.33,.01,1,2,1)
X ^DD(355.33,.01,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(355.33,.01,1,2,1.4)
"^DD",355.33,355.33,.01,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$S('$D(^VA(200,+$P(Y(1),U,2),0)):"",1:$P(^(0),U,1))=""
"^DD",355.33,355.33,.01,1,2,1.4)
S DIH=$S($D(^IBA(355.33,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=355.33,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",355.33,355.33,.01,1,2,2)
Q
"^DD",355.33,355.33,.01,1,2,"%D",0)
^^1^1^2980210^
"^DD",355.33,355.33,.01,1,2,"%D",1,0)
Set Entered By to the user who created the entry.
"^DD",355.33,355.33,.01,1,2,"CREATE CONDITION")
ENTERED BY=""
"^DD",355.33,355.33,.01,1,2,"CREATE VALUE")
S X=DUZ
"^DD",355.33,355.33,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,.01,1,2,"DT")
2980210
"^DD",355.33,355.33,.01,1,2,"FIELD")
ENTERED BY
"^DD",355.33,355.33,.01,1,3,0)
^^TRIGGER^355.33^.04
"^DD",355.33,355.33,.01,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(355.33,.01,1,3,69.2) S X=X="" I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="E" X ^DD(355.33,.01,1,3,1.4)
"^DD",355.33,355.33,.01,1,3,1.4)
S DIH=$S($D(^IBA(355.33,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=355.33,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",355.33,355.33,.01,1,3,2)
Q
"^DD",355.33,355.33,.01,1,3,69.2)
S Y(2)=$C(59)_$S($D(^DD(355.33,.04,0)):$P(^(0),U,3),1:""),Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P($P(Y(2),$C(59)_$P(Y(1),U,4)_":",2),$C(59),1)
"^DD",355.33,355.33,.01,1,3,"%D",0)
^^1^1^2980211^
"^DD",355.33,355.33,.01,1,3,"%D",1,0)
Set initial Status to Entered.
"^DD",355.33,355.33,.01,1,3,"CREATE CONDITION")
STATUS=""
"^DD",355.33,355.33,.01,1,3,"CREATE VALUE")
S X="E"
"^DD",355.33,355.33,.01,1,3,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,.01,1,3,"DT")
2980211
"^DD",355.33,355.33,.01,1,3,"FIELD")
STATUS
"^DD",355.33,355.33,.01,1,4,0)
355.33^AEST^MUMPS
"^DD",355.33,355.33,.01,1,4,1)
I $P($G(^IBA(355.33,DA,0)),U,4)'="" S ^IBA(355.33,"AEST",$P(^(0),U,4),X,DA)=""
"^DD",355.33,355.33,.01,1,4,2)
I $P($G(^IBA(355.33,DA,0)),U,4)'="" K ^IBA(355.33,"AEST",$P(^(0),U,4),X,DA)
"^DD",355.33,355.33,.01,1,4,"%D",0)
^^1^1^2980218^^
"^DD",355.33,355.33,.01,1,4,"%D",1,0)
Cross reference by Status and Date Entered.
"^DD",355.33,355.33,.01,1,4,"DT")
2980218
"^DD",355.33,355.33,.01,1,5,0)
355.33^AFST^MUMPS
"^DD",355.33,355.33,.01,1,5,1)
S ^IBA(355.33,"AFST","E",X,DA)=""
"^DD",355.33,355.33,.01,1,5,2)
K ^IBA(355.33,"AFST","E",X,DA)
"^DD",355.33,355.33,.01,1,5,"%D",0)
^^1^1^2980909^^^^
"^DD",355.33,355.33,.01,1,5,"%D",1,0)
Cross reference of all entries by action and date of action.
"^DD",355.33,355.33,.01,1,5,"DT")
2980909
"^DD",355.33,355.33,.01,3)
Enter the date this entry is added to the Insurance Buffer file.
"^DD",355.33,355.33,.01,21,0)
^^1^1^2980209^
"^DD",355.33,355.33,.01,21,1,0)
This is the date this entry is added to the buffer file.
"^DD",355.33,355.33,.01,"DT")
2980909
"^DD",365.1,365.1,.16,0)
HL7 SUBSCRIBER ID FIELD^F^^0;16^K:$L(X)>80!($L(X)<1) X
"^DD",365.1,365.1,.16,3)
Answer must be 1-80 characters in length.
"^DD",365.1,365.1,.16,21,0)
^^3^3^3140325^
"^DD",365.1,365.1,.16,21,1,0)
This is the data that will be used to populate the Subscriber ID field in 
"^DD",365.1,365.1,.16,21,2,0)
the HL7 message for the electronic Insurance Identification and 
"^DD",365.1,365.1,.16,21,3,0)
Verification project.
"^DD",365.1,365.1,.16,"DT")
3140325
"^DD",365.1,365.1,1.05,0)
ORIGINAL SUBSCRIBER ID^F^^1;5^K:$L(X)>80!($L(X)<1) X
"^DD",365.1,365.1,1.05,3)
Answer must be 1-80 characters in length.
"^DD",365.1,365.1,1.05,21,0)
^^3^3^3140324^
"^DD",365.1,365.1,1.05,21,1,0)
If the transmission record is created from an Insurance Buffer
"^DD",365.1,365.1,1.05,21,2,0)
entry, this is the data value of the equivalent field at time
"^DD",365.1,365.1,1.05,21,3,0)
of creation.
"^DD",365.1,365.1,1.05,"DT")
3140324
"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$$CODECK^IBCNEUT1(Y)
"^DD",365.15,365.15,.01,2.1)
S Y=$$CODECK^IBCNEUT1(Y)
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^.001^5^5^3040430^^^^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3130912
"BLD",9260,6)
^477
**END**
**END**

