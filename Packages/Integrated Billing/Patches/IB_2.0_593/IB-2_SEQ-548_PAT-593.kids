Released IB*2*593 SEQ #548
Extracted from mail message
**KIDS**:IB*2.0*593^

**INSTALL NAME**
IB*2.0*593
"BLD",10511,0)
IB*2.0*593^INTEGRATED BILLING^0^3171013^y
"BLD",10511,4,0)
^9.64PA^2^1
"BLD",10511,4,2,0)
2
"BLD",10511,4,2,2,0)
^9.641^2.312^1
"BLD",10511,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",10511,4,2,2,2.312,1,0)
^9.6411^3^2
"BLD",10511,4,2,2,2.312,1,3,0)
INSURANCE EXPIRATION DATE
"BLD",10511,4,2,2,2.312,1,8,0)
EFFECTIVE DATE OF POLICY
"BLD",10511,4,2,222)
y^n^p^^^^n^^n
"BLD",10511,4,2,224)

"BLD",10511,4,"APDD",2,2.312)

"BLD",10511,4,"APDD",2,2.312,3)

"BLD",10511,4,"APDD",2,2.312,8)

"BLD",10511,4,"B",2,2)

"BLD",10511,6)
7^
"BLD",10511,6.3)
31
"BLD",10511,"ABPKG")
n
"BLD",10511,"INI")

"BLD",10511,"INID")
^n^
"BLD",10511,"INIT")
POST^IBY593PR
"BLD",10511,"KRN",0)
^9.67PA^779.2^20
"BLD",10511,"KRN",.4,0)
.4
"BLD",10511,"KRN",.401,0)
.401
"BLD",10511,"KRN",.402,0)
.402
"BLD",10511,"KRN",.403,0)
.403
"BLD",10511,"KRN",.5,0)
.5
"BLD",10511,"KRN",.84,0)
.84
"BLD",10511,"KRN",3.6,0)
3.6
"BLD",10511,"KRN",3.8,0)
3.8
"BLD",10511,"KRN",9.2,0)
9.2
"BLD",10511,"KRN",9.8,0)
9.8
"BLD",10511,"KRN",9.8,"NM",0)
^9.68A^8^7
"BLD",10511,"KRN",9.8,"NM",1,0)
IBY593PR^^0^B17631808
"BLD",10511,"KRN",9.8,"NM",2,0)
IBCNEDE2^^0^B88831173
"BLD",10511,"KRN",9.8,"NM",3,0)
IBCNEHL1^^0^B188076625
"BLD",10511,"KRN",9.8,"NM",4,0)
IBCNERTC^^0^B9367965
"BLD",10511,"KRN",9.8,"NM",5,0)
IBCNERTQ^^0^B47060813
"BLD",10511,"KRN",9.8,"NM",6,0)
IBCNEDE^^0^B35885367
"BLD",10511,"KRN",9.8,"NM",8,0)
IBCNRDV^^0^B144659738
"BLD",10511,"KRN",9.8,"NM","B","IBCNEDE",6)

"BLD",10511,"KRN",9.8,"NM","B","IBCNEDE2",2)

"BLD",10511,"KRN",9.8,"NM","B","IBCNEHL1",3)

"BLD",10511,"KRN",9.8,"NM","B","IBCNERTC",4)

"BLD",10511,"KRN",9.8,"NM","B","IBCNERTQ",5)

"BLD",10511,"KRN",9.8,"NM","B","IBCNRDV",8)

"BLD",10511,"KRN",9.8,"NM","B","IBY593PR",1)

"BLD",10511,"KRN",19,0)
19
"BLD",10511,"KRN",19,"NM",0)
^9.68A^^
"BLD",10511,"KRN",19.1,0)
19.1
"BLD",10511,"KRN",101,0)
101
"BLD",10511,"KRN",409.61,0)
409.61
"BLD",10511,"KRN",771,0)
771
"BLD",10511,"KRN",779.2,0)
779.2
"BLD",10511,"KRN",870,0)
870
"BLD",10511,"KRN",8989.51,0)
8989.51
"BLD",10511,"KRN",8989.52,0)
8989.52
"BLD",10511,"KRN",8994,0)
8994
"BLD",10511,"KRN","B",.4,.4)

"BLD",10511,"KRN","B",.401,.401)

"BLD",10511,"KRN","B",.402,.402)

"BLD",10511,"KRN","B",.403,.403)

"BLD",10511,"KRN","B",.5,.5)

"BLD",10511,"KRN","B",.84,.84)

"BLD",10511,"KRN","B",3.6,3.6)

"BLD",10511,"KRN","B",3.8,3.8)

"BLD",10511,"KRN","B",9.2,9.2)

"BLD",10511,"KRN","B",9.8,9.8)

"BLD",10511,"KRN","B",19,19)

"BLD",10511,"KRN","B",19.1,19.1)

"BLD",10511,"KRN","B",101,101)

"BLD",10511,"KRN","B",409.61,409.61)

"BLD",10511,"KRN","B",771,771)

"BLD",10511,"KRN","B",779.2,779.2)

"BLD",10511,"KRN","B",870,870)

"BLD",10511,"KRN","B",8989.51,8989.51)

"BLD",10511,"KRN","B",8989.52,8989.52)

"BLD",10511,"KRN","B",8994,8994)

"BLD",10511,"QUES",0)
^9.62^^
"BLD",10511,"REQB",0)
^9.611^4^4
"BLD",10511,"REQB",1,0)
IB*2.0*549^1
"BLD",10511,"REQB",2,0)
IB*2.0*582^1
"BLD",10511,"REQB",3,0)
IB*2.0*497^1
"BLD",10511,"REQB",4,0)
IB*2.0*452^1
"BLD",10511,"REQB","B","IB*2.0*452",4)

"BLD",10511,"REQB","B","IB*2.0*497",3)

"BLD",10511,"REQB","B","IB*2.0*549",1)

"BLD",10511,"REQB","B","IB*2.0*582",2)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,3)

"FIA",2,2.312,8)

"INIT")
POST^IBY593PR
"IX",2,2,"ACHI",0)
2^ACHI^Covered by Health Insurance^MU^^R^IR^W^2.312^^^^^S
"IX",2,2,"ACHI",.1,0)
^^5^5^3170316^^
"IX",2,2,"ACHI",.1,1,0)
eInsurance User Story 118 will automatically update the Covered by Health 
"IX",2,2,"ACHI",.1,2,0)
Insurance flag.  This index contains both the effective date and 
"IX",2,2,"ACHI",.1,3,0)
expiration date of policies on the patient.  A nightly background process 
"IX",2,2,"ACHI",.1,4,0)
will run based on this date to determine how the Covered by Health 
"IX",2,2,"ACHI",.1,5,0)
Insurance flag should be set.
"IX",2,2,"ACHI",1)
I X(1)!X(2) S X=$S($G(X(1))'="":X(1),1:X(2)),^DPT("ACHI",X,DA(1))="" Q
"IX",2,2,"ACHI",2)
I X(1)!X(2) S X=$S($G(X(1))'="":X(1),1:X(2)) K ^DPT("ACHI",X,DA(1)) Q
"IX",2,2,"ACHI",2.5)
K ^DPT("ACHI") Q
"IX",2,2,"ACHI",11.1,0)
^.114IA^2^2
"IX",2,2,"ACHI",11.1,1,0)
1^F^2.312^3^^^F
"IX",2,2,"ACHI",11.1,1,2)
I X S X=$$FMADD^XLFDT(X,1)
"IX",2,2,"ACHI",11.1,2,0)
2^F^2.312^8^^^F
"MBREQ")
0
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
593^3171013^227
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","IBCNEDE")
0^6^B35885367^B35084322
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;07-MAY-2015
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,497,549,593**;21-MAR-94;Build 31
"RTN","IBCNEDE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 ;
"RTN","IBCNEDE",25,0)
 ; IB*2.0*549 - Quit if Nightly Extract Master switch is off
"RTN","IBCNEDE",26,0)
 Q:$$GET1^DIQ(350.9,"1,",51.28,"I")="N"
"RTN","IBCNEDE",27,0)
 ;
"RTN","IBCNEDE",28,0)
 N $ES,$ET
"RTN","IBCNEDE",29,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",30,0)
 ; Check lock
"RTN","IBCNEDE",31,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",32,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",33,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",34,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",35,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",36,0)
 ;  the existing utility
"RTN","IBCNEDE",37,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",40,0)
 ; before the extract is run
"RTN","IBCNEDE",41,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",42,0)
 ;
"RTN","IBCNEDE",43,0)
 ;IB*2.0*593/TAZ/HAN - Add job to update Covered by Health Insurance flag
"RTN","IBCNEDE",44,0)
 D EN^IBCNERTC($P($$NOW^XLFDT,"."))
"RTN","IBCNEDE",45,0)
 ;
"RTN","IBCNEDE",46,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",47,0)
 ;
"RTN","IBCNEDE",48,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",49,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",50,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",51,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",52,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",53,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",54,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",55,0)
 ; Send enrollment message
"RTN","IBCNEDE",56,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",57,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",58,0)
 I '$G(QFL) D
"RTN","IBCNEDE",59,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",60,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",61,0)
 . KILL QFL
"RTN","IBCNEDE",62,0)
 . ;
"RTN","IBCNEDE",63,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",64,0)
 ;
"RTN","IBCNEDE",65,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",66,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",67,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",68,0)
 D DSTQ        ; queue daily statistical message to FSC
"RTN","IBCNEDE",69,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",70,0)
 ;  eligible to be purged
"RTN","IBCNEDE",71,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",72,0)
 ;
"RTN","IBCNEDE",73,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",74,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",75,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",76,0)
 Q
"RTN","IBCNEDE",77,0)
 ;
"RTN","IBCNEDE",78,0)
TBLCHK() ;
"RTN","IBCNEDE",79,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",80,0)
 ; have been loaded
"RTN","IBCNEDE",81,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",82,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",83,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",84,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",85,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",86,0)
 I PAYOK D
"RTN","IBCNEDE",87,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",88,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",89,0)
 ;
"RTN","IBCNEDE",90,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",91,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",92,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",93,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",94,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",95,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",96,0)
 . Q:QFL'=""
"RTN","IBCNEDE",97,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",98,0)
 KILL CT
"RTN","IBCNEDE",99,0)
 Q
"RTN","IBCNEDE",100,0)
 ;
"RTN","IBCNEDE",101,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",102,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",103,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",104,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",105,0)
 N STALEDT
"RTN","IBCNEDE",106,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",107,0)
 Q STALEDT
"RTN","IBCNEDE",108,0)
 ;
"RTN","IBCNEDE",109,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",110,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",111,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",112,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",113,0)
 ;
"RTN","IBCNEDE",114,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",115,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",116,0)
 ;
"RTN","IBCNEDE",117,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",118,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",119,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",120,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",121,0)
 ;
"RTN","IBCNEDE",122,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",123,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",124,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",125,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",126,0)
 ;
"RTN","IBCNEDE",127,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",128,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",129,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",130,0)
 ;
"RTN","IBCNEDE",131,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",132,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",133,0)
 ;
"RTN","IBCNEDE",134,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",135,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",136,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",137,0)
 S ZTIO=""
"RTN","IBCNEDE",138,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",139,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",140,0)
 ;
"RTN","IBCNEDE",141,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",142,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",143,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",144,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",145,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",146,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",147,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",148,0)
 ;
"RTN","IBCNEDE",149,0)
MMQX ;
"RTN","IBCNEDE",150,0)
 Q
"RTN","IBCNEDE",151,0)
 ;
"RTN","IBCNEDE",152,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",153,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",154,0)
 D ^%ZTER
"RTN","IBCNEDE",155,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",156,0)
 Q
"RTN","IBCNEDE",157,0)
 ;
"RTN","IBCNEDE",158,0)
DSTQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",159,0)
 ; sending of the daily statistical message to FSC.
"RTN","IBCNEDE",160,0)
 ;
"RTN","IBCNEDE",161,0)
 N IIV,CURRTIME,MTIME,MSG,MGRP
"RTN","IBCNEDE",162,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",163,0)
 ;
"RTN","IBCNEDE",164,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",165,0)
 I '$P(IIV,U,3) G DSTQX          ; MM message time is not defined
"RTN","IBCNEDE",166,0)
 ;
"RTN","IBCNEDE",167,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",168,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",169,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",170,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",171,0)
 ;
"RTN","IBCNEDE",172,0)
 ; If the current time is after the MailMan message time, then schedule the message for tomorrow at that time.
"RTN","IBCNEDE",173,0)
 ; Otherwise, schedule it for later today.
"RTN","IBCNEDE",174,0)
 S ZTDTH=$S(CURRTIME>MTIME:$H+1,1:+$H)_","_MTIME
"RTN","IBCNEDE",175,0)
 ;
"RTN","IBCNEDE",176,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",177,0)
 S ZTRTN="EN1^IBCNEHLM"
"RTN","IBCNEDE",178,0)
 S ZTDESC="eIV Daily Statistics HL7 Message"
"RTN","IBCNEDE",179,0)
 S ZTIO=""
"RTN","IBCNEDE",180,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",181,0)
 I $G(ZTSK) G DSTQX    ; Task# is OK so get out
"RTN","IBCNEDE",182,0)
 ;
"RTN","IBCNEDE",183,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",184,0)
 S MSG(1)="TaskManager could not schedule the daily eIV Statistics HL7 message"
"RTN","IBCNEDE",185,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",186,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",187,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",188,0)
 S MGRP=$$MGRP^IBCNEUT5() I MGRP'="" D MSG^IBCNEUT5(MGRP,"eIV Statistical HL7 Message Not Sent","MSG(")
"RTN","IBCNEDE",189,0)
 ;
"RTN","IBCNEDE",190,0)
DSTQX ;
"RTN","IBCNEDE",191,0)
 Q
"RTN","IBCNEDE2")
0^2^B88831173^B81972539
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;23-SEP-2015
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416,438,506,549,593**;21-MAR-94;Build 31
"RTN","IBCNEDE2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ; IB*2.0*593 - Added EXCLTOC,EXCLTOP now initialized at top. Removed YY.
"RTN","IBCNEDE2",15,0)
 ; IB*2.0*549 - Added YY,ZZ, Re-Arranged in alphabetical order
"RTN","IBCNEDE2",16,0)
 N ACTINS,APTDT,CLNC,CNT,DATA1,DATA2,DFN,DISYS,ELG,ENDDT,EXCLTOC,EXCLTOP,FOUND1,FOUND2,FRESHDAY
"RTN","IBCNEDE2",17,0)
 N FRESHDT,GIEN,IBCNETOT,IBDDI,IBINDT,IBINS,IBSDA,IBSDATA,IBOUTP,INREC,INS,INSIEN,INSNAME
"RTN","IBCNEDE2",18,0)
 N MAXCNT,MCAREFLG,NUM,OK,PATID,PAYER,PAYERID,PAYERSTR,PIEN
"RTN","IBCNEDE2",19,0)
 N SETSTR,SID,SIDACT,SIDARRAY,SIDCNT,SIDDATA,SLCCRIT1,SRVICEDT,SUPPBUFF,SYMBOL
"RTN","IBCNEDE2",20,0)
 N TODAYSDT,TQIEN,QURYFLAG,VAIN,VDATE,YY,ZZ
"RTN","IBCNEDE2",21,0)
 ;
"RTN","IBCNEDE2",22,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",23,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",24,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",25,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",27,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",29,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",30,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",31,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",32,0)
 S EXCLTOC=$$GETELST(355.2) ; Initialize excluded TYPEs OF COVERAGE IB*2.0*593
"RTN","IBCNEDE2",33,0)
 S EXCLTOP=$$GETELST(355.1) ; Initialize excluded TYPEs OF PLAN IB*2.0*593
"RTN","IBCNEDE2",34,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",35,0)
 ;
"RTN","IBCNEDE2",36,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",37,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",38,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",39,0)
 . ;
"RTN","IBCNEDE2",40,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",41,0)
 . ;
"RTN","IBCNEDE2",42,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",43,0)
 ;
"RTN","IBCNEDE2",44,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",45,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",46,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",47,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",48,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",49,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",50,0)
 ;
"RTN","IBCNEDE2",51,0)
 ;
"RTN","IBCNEDE2",52,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",53,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",54,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",55,0)
 . ;
"RTN","IBCNEDE2",56,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",57,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",58,0)
 .. ;
"RTN","IBCNEDE2",59,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",60,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",61,0)
 .. ;
"RTN","IBCNEDE2",62,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",63,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",64,0)
 ... ;
"RTN","IBCNEDE2",65,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",66,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",67,0)
 ... ;
"RTN","IBCNEDE2",68,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",69,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",70,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",71,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",72,0)
 ... ;
"RTN","IBCNEDE2",73,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",74,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",75,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",76,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",77,0)
 ... ; IB*2.0*549 removed the following line
"RTN","IBCNEDE2",78,0)
 ... ;I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",79,0)
 ... ;
"RTN","IBCNEDE2",80,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",81,0)
 ... ;
"RTN","IBCNEDE2",82,0)
 ... K ACTINS
"RTN","IBCNEDE2",83,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",84,0)
 ... ;
"RTN","IBCNEDE2",85,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",86,0)
 ... ;
"RTN","IBCNEDE2",87,0)
 ... S INREC=0 ; Record IEN
"RTN","IBCNEDE2",88,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",89,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",90,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",91,0)
 ... . ;
"RTN","IBCNEDE2",92,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Coverages
"RTN","IBCNEDE2",93,0)
 ... . ; IB*2.0*593 Moved exclusion list initialization to top execution level.
"RTN","IBCNEDE2",94,0)
 ... . S ZZ=$$GET1^DIQ(36,INSIEN_",",.13,"I")    ; Type of Coverage
"RTN","IBCNEDE2",95,0)
 ... . ;S YY=$$GETELST(355.2)                    ; Type of Coverages to exclude
"RTN","IBCNEDE2",96,0)
 ... . ;Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Coverage
"RTN","IBCNEDE2",97,0)
 ... . Q:EXCLTOC[("^"_ZZ_"^")                    ; Excluded Type of Coverage
"RTN","IBCNEDE2",98,0)
 ... . ;
"RTN","IBCNEDE2",99,0)
 ... . ; Exclude policies that have been verified within "freshness days"
"RTN","IBCNEDE2",100,0)
 ... . S VDATE=$P($G(ACTINS(INREC,1)),U,3)
"RTN","IBCNEDE2",101,0)
 ... . I VDATE'="",SRVICEDT'>$$FMADD^XLFDT(VDATE,FRESHDAY) Q
"RTN","IBCNEDE2",102,0)
 ... . ; Allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",103,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",104,0)
 ... . ; Exclude pharmacy policies IB*2.0*549 - Commented out following line
"RTN","IBCNEDE2",105,0)
 ... . ;I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",106,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",107,0)
 ... . ;
"RTN","IBCNEDE2",108,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Plans
"RTN","IBCNEDE2",109,0)
 ... . ; IB*2.0*593/TAZ Moved exclusion list initialization to top execution level.
"RTN","IBCNEDE2",110,0)
 ... . S ZZ=$$GET1^DIQ(355.3,GIEN_",",.09,"I")   ; Type of Plan
"RTN","IBCNEDE2",111,0)
 ... . ;S YY=$$GETELST(355.1)                    ; Type of Plans to exclude
"RTN","IBCNEDE2",112,0)
 ... . ;Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Plan
"RTN","IBCNEDE2",113,0)
 ... . Q:EXCLTOP[("^"_ZZ_"^")                        ; Excluded Type of Plan
"RTN","IBCNEDE2",114,0)
 ... . ;
"RTN","IBCNEDE2",115,0)
 ... . ;I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q  ; IB*2.0*549 - Removed line
"RTN","IBCNEDE2",116,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",117,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",118,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",119,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",120,0)
 ... . ;
"RTN","IBCNEDE2",121,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",122,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",123,0)
 ... . ;
"RTN","IBCNEDE2",124,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",125,0)
 ... . ;
"RTN","IBCNEDE2",126,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",127,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",128,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",129,0)
 ... . ;
"RTN","IBCNEDE2",130,0)
 ... . ; If Payer is Nationally Inactive create an Insurance Buffer record w/blank SYMBOL & quit. - IB*2.0*506
"RTN","IBCNEDE2",131,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) D  Q
"RTN","IBCNEDE2",132,0)
 ... .. S SYMBOL=""
"RTN","IBCNEDE2",133,0)
 ... .. I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",134,0)
 ... .. Q
"RTN","IBCNEDE2",135,0)
 ... . ;
"RTN","IBCNEDE2",136,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",137,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",138,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",139,0)
 ... . ;
"RTN","IBCNEDE2",140,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",141,0)
 ... . ;  date range
"RTN","IBCNEDE2",142,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",143,0)
 ... . ;
"RTN","IBCNEDE2",144,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",145,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",146,0)
 ... . ;
"RTN","IBCNEDE2",147,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",148,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",149,0)
 ... . ;
"RTN","IBCNEDE2",150,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",151,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",152,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",153,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",154,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",155,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",156,0)
 ... . ;
"RTN","IBCNEDE2",157,0)
 ... . S SID=""
"RTN","IBCNEDE2",158,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",159,0)
 ... . I SIDACT=4 D
"RTN","IBCNEDE2",160,0)
 ... . . D SET("","",PATID)
"RTN","IBCNEDE2",161,0)
 ... . . S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",162,0)
 ... . Q
"RTN","IBCNEDE2",163,0)
 ... Q
"RTN","IBCNEDE2",164,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",165,0)
 Q
"RTN","IBCNEDE2",166,0)
 ;
"RTN","IBCNEDE2",167,0)
GETELST(FILE) ; Returns a '^' delimited list of Type of Plans or Type of
"RTN","IBCNEDE2",168,0)
 ; coverages to be excluded with leading and trailing '^'s
"RTN","IBCNEDE2",169,0)
 ; IB*2.0*549 Added method
"RTN","IBCNEDE2",170,0)
 ; IB*2.0*593 Added NO-FAULT INSURANCE. Refactored.
"RTN","IBCNEDE2",171,0)
 ; Input: FILE  - 355.1 - Return a list of Type of Plans to be excluded
"RTN","IBCNEDE2",172,0)
 ;                355.2 - Return a list of Type of Coverages to be excluded
"RTN","IBCNEDE2",173,0)
 ; Returns: '^' delimited list of Type of Plans or Type of Coverages
"RTN","IBCNEDE2",174,0)
 ;          to be excluded
"RTN","IBCNEDE2",175,0)
 ;N EXCLIST,IEN,NM,XX
"RTN","IBCNEDE2",176,0)
 ;S EXCLIST="",NM("AUTOMOBILE")="",NM("MEDI-CAL")="",NM("TORT FEASOR")=""
"RTN","IBCNEDE2",177,0)
 ;S NM("WORKERS' COMPENSATION INSURANCE")="",NM("VA SPECIAL CLASS")=""
"RTN","IBCNEDE2",178,0)
 ;S NM("MEDICAID")=""
"RTN","IBCNEDE2",179,0)
 ;S XX=""
"RTN","IBCNEDE2",180,0)
 ;F  D  Q:XX=""
"RTN","IBCNEDE2",181,0)
 ;. S XX=$O(NM(XX))
"RTN","IBCNEDE2",182,0)
 ;. Q:XX=""
"RTN","IBCNEDE2",183,0)
 ;. S IEN=""
"RTN","IBCNEDE2",184,0)
 ;. F  D  Q:IEN=""
"RTN","IBCNEDE2",185,0)
 ;. . S IEN=$O(^IBE(FILE,"B",XX,IEN))
"RTN","IBCNEDE2",186,0)
 ;. . Q:IEN=""
"RTN","IBCNEDE2",187,0)
 ;. . S EXCLIST=$S(EXCLIST="":IEN,1:EXCLIST_"^"_IEN)
"RTN","IBCNEDE2",188,0)
 N EXCLIST,TYPE
"RTN","IBCNEDE2",189,0)
 S EXCLIST=""
"RTN","IBCNEDE2",190,0)
 F TYPE="AUTOMOBILE","MEDICAID","MEDI-CAL","NO-FAULT INSURANCE","TORT FEASOR","WORKERS' COMPENSATION INSURANCE","VA SPECIAL CLASS" D
"RTN","IBCNEDE2",191,0)
 . N IEN S IEN=$O(^IBE(FILE,"B",TYPE,""))
"RTN","IBCNEDE2",192,0)
 . Q:IEN=""
"RTN","IBCNEDE2",193,0)
 . S EXCLIST=$S(EXCLIST="":IEN,1:EXCLIST_"^"_IEN)
"RTN","IBCNEDE2",194,0)
 Q "^"_EXCLIST_"^"
"RTN","IBCNEDE2",195,0)
 ;
"RTN","IBCNEDE2",196,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",197,0)
 S OK=1
"RTN","IBCNEDE2",198,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",199,0)
 Q
"RTN","IBCNEDE2",200,0)
 ;
"RTN","IBCNEDE2",201,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",202,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",203,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",204,0)
 S OK=1
"RTN","IBCNEDE2",205,0)
 Q
"RTN","IBCNEDE2",206,0)
 ;
"RTN","IBCNEDE2",207,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",208,0)
 D INP^VADPT
"RTN","IBCNEDE2",209,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",210,0)
 K VAIN
"RTN","IBCNEDE2",211,0)
 S OK=1
"RTN","IBCNEDE2",212,0)
 Q
"RTN","IBCNEDE2",213,0)
 ;
"RTN","IBCNEDE2",214,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",215,0)
 ;
"RTN","IBCNEDE2",216,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",217,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",218,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",219,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",220,0)
 ;
"RTN","IBCNEDE2",221,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",222,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",223,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",224,0)
 ;
"RTN","IBCNEDE2",225,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",226,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",227,0)
 ;
"RTN","IBCNEDE2",228,0)
 Q
"RTN","IBCNEDE2",229,0)
 ;
"RTN","IBCNEDE2",230,0)
ERRMSG ; Send a message indicating an extract error has occurred
"RTN","IBCNEDE2",231,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",232,0)
 ;
"RTN","IBCNEDE2",233,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",234,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",235,0)
 ;
"RTN","IBCNEDE2",236,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",237,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",238,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",239,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",240,0)
 S MSG(4)=""
"RTN","IBCNEDE2",241,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",242,0)
 S MSG(6)=""
"RTN","IBCNEDE2",243,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",244,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",245,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",246,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",247,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",248,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",249,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",250,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",251,0)
 ;
"RTN","IBCNEDE2",252,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",253,0)
 ;
"RTN","IBCNEDE2",254,0)
 Q
"RTN","IBCNEDE2",255,0)
 ;
"RTN","IBCNEDE2",256,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",257,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",258,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",259,0)
 N X1,X2
"RTN","IBCNEDE2",260,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",261,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",262,0)
 Q 0
"RTN","IBCNEHL1")
0^3^B188076625^B181786202
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497,506,549,593**;21-MAR-94;Build 31
"RTN","IBCNEHL1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    ACK       - Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",13,0)
 ;    ERACT     - Error Action
"RTN","IBCNEHL1",14,0)
 ;    ERCON     - Error Condition
"RTN","IBCNEHL1",15,0)
 ;    ERFLG     - Error quit flag
"RTN","IBCNEHL1",16,0)
 ;    ERTXT     - Error Message Text
"RTN","IBCNEHL1",17,0)
 ;    HL        - Array of HL7 variables
"RTN","IBCNEHL1",18,0)
 ;    IBSEG     - Optional, array of fields in segment
"RTN","IBCNEHL1",19,0)
 ;    IIVSTAT   - EC generated flag interpreting status of response
"RTN","IBCNEHL1",20,0)
 ;                 1 = + (auto-update requirement)
"RTN","IBCNEHL1",21,0)
 ;                 6 = -
"RTN","IBCNEHL1",22,0)
 ;                 V = #
"RTN","IBCNEHL1",23,0)
 ;    MAP       - Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",24,0)
 ;    MSGID     - Original Message Control ID
"RTN","IBCNEHL1",25,0)
 ;    RIEN      - Response Record IEN
"RTN","IBCNEHL1",26,0)
 ;    SEG       - HL7 Segment Name
"RTN","IBCNEHL1",27,0)
 ;
"RTN","IBCNEHL1",28,0)
EN ; Entry Point
"RTN","IBCNEHL1",29,0)
 N ACK,AUTO,EBDA,ERACT,ERCON,ERFLG,ERROR,ERTXT,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN
"RTN","IBCNEHL1",30,0)
 N MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP
"RTN","IBCNEHL1",31,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",32,0)
 ;
"RTN","IBCNEHL1",33,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",34,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",35,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",36,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",37,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",38,0)
 ;
"RTN","IBCNEHL1",39,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",40,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",41,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",42,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",43,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",44,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",45,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",46,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",47,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",48,0)
 .;
"RTN","IBCNEHL1",49,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",50,0)
 .;
"RTN","IBCNEHL1",51,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",52,0)
 .;
"RTN","IBCNEHL1",53,0)
 .;  Contact Segment
"RTN","IBCNEHL1",54,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Patient Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",63,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",66,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",69,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",72,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",75,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",78,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",81,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",84,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Notes Segment
"RTN","IBCNEHL1",102,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 .;
"RTN","IBCNEHL1",104,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",105,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",107,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",108,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 . ;
"RTN","IBCNEHL1",110,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",111,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",112,0)
 .;
"RTN","IBCNEHL1",113,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",114,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",115,0)
 ;
"RTN","IBCNEHL1",116,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",117,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",118,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",119,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",120,0)
 .Q
"RTN","IBCNEHL1",121,0)
 D FIL
"RTN","IBCNEHL1",122,0)
 Q
"RTN","IBCNEHL1",123,0)
 ;
"RTN","IBCNEHL1",124,0)
 ; =================================================================
"RTN","IBCNEHL1",125,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",126,0)
 ;
"RTN","IBCNEHL1",127,0)
 N BUFF,DATA,ERROR,IENS,MIL,OKAY,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,XX   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",128,0)
 ;
"RTN","IBCNEHL1",129,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",130,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",131,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",132,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",133,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",134,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",135,0)
 S XX=$$GET1^DIQ(2.312,IENS,7.01,"I")
"RTN","IBCNEHL1",136,0)
 I ISSUB,XX="" S DATA(2.312,IENS,7.01)=$P(RDATA13,U)    ; Name
"RTN","IBCNEHL1",137,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.01,"I")
"RTN","IBCNEHL1",138,0)
 I XX="" S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2)         ; DOB
"RTN","IBCNEHL1",139,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.05,"I")
"RTN","IBCNEHL1",140,0)
 I XX="" S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3)         ; SSN
"RTN","IBCNEHL1",141,0)
 S XX=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNEHL1",142,0)
 I ISSUB,XX="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8)      ; Whose insurance
"RTN","IBCNEHL1",143,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",144,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01)
"RTN","IBCNEHL1",145,0)
 S XX=$$GET1^DIQ(2.312,IENS,4.03,"I")
"RTN","IBCNEHL1",146,0)
 I ISSUB,XX="",PREL'="" D
"RTN","IBCNEHL1",147,0)
 . S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",148,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",149,0)
 S DATA(2.312,IENS,1.03)=TSTAMP                         ; Date last verified
"RTN","IBCNEHL1",150,0)
 S DATA(2.312,IENS,1.04)=""                            ; Last verified by
"RTN","IBCNEHL1",151,0)
 S DATA(2.312,IENS,1.05)=TSTAMP                         ; Date last edited
"RTN","IBCNEHL1",152,0)
 S DATA(2.312,IENS,1.06)=""                            ; Last edited by
"RTN","IBCNEHL1",153,0)
 S DATA(2.312,IENS,1.09)=5                              ; Source of info = eIV
"RTN","IBCNEHL1",154,0)
 ;
"RTN","IBCNEHL1",155,0)
 ; Set Subscriber address Fields if none of the fields are currently defined
"RTN","IBCNEHL1",156,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",157,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.06,"I")       ; Current Ins Street Line 1
"RTN","IBCNEHL1",158,0)
 I XX="" D
"RTN","IBCNEHL1",159,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.07,"I")     ; Current Ins Street Line 2
"RTN","IBCNEHL1",160,0)
 . Q:XX'=""
"RTN","IBCNEHL1",161,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.08,"I")     ; Current Ins City
"RTN","IBCNEHL1",162,0)
 . Q:XX'=""
"RTN","IBCNEHL1",163,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.09,"I")     ; Current Ins State
"RTN","IBCNEHL1",164,0)
 . Q:XX'=""
"RTN","IBCNEHL1",165,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.1,"I")      ; Current Ins Zip
"RTN","IBCNEHL1",166,0)
 . Q:XX'=""
"RTN","IBCNEHL1",167,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.13,"I")     ; Current Ins Country
"RTN","IBCNEHL1",168,0)
 . Q:XX'=""
"RTN","IBCNEHL1",169,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.14,"I")     ; Current Ins Country Subdivision
"RTN","IBCNEHL1",170,0)
 . Q:XX'=""
"RTN","IBCNEHL1",171,0)
 . S DATA(2.312,IENS,3.06)=$P(RDATA5,U)     ; Street line 1
"RTN","IBCNEHL1",172,0)
 . S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2)   ; Street line 2
"RTN","IBCNEHL1",173,0)
 . S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3)   ; City
"RTN","IBCNEHL1",174,0)
 . S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4)   ; State
"RTN","IBCNEHL1",175,0)
 . S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5)    ; Zip
"RTN","IBCNEHL1",176,0)
 . S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6)   ; Country
"RTN","IBCNEHL1",177,0)
 . S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7)   ; Country subdivision
"RTN","IBCNEHL1",178,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",179,0)
 ;
"RTN","IBCNEHL1",180,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",181,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",182,0)
 I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",183,0)
 ;
"RTN","IBCNEHL1",184,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",185,0)
 K DATA
"RTN","IBCNEHL1",186,0)
 S DATA(2.312,IENS,4.04)="YES"
"RTN","IBCNEHL1",187,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",188,0)
 I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",189,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",190,0)
 I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",191,0)
 ; file new EB data
"RTN","IBCNEHL1",192,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",193,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",194,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",195,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",196,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",197,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",198,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",199,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",200,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",201,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",202,0)
 I BUFF D
"RTN","IBCNEHL1",203,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",204,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",205,0)
 .Q
"RTN","IBCNEHL1",206,0)
AUTOFILX ;
"RTN","IBCNEHL1",207,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",208,0)
 Q
"RTN","IBCNEHL1",209,0)
 ;
"RTN","IBCNEHL1",210,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",211,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",212,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",213,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",214,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",215,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",216,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",217,0)
 ;          1 - successful update
"RTN","IBCNEHL1",218,0)
 N DA,DATA12,DIAG,DIAG3121,ERFLG,ERROR,IENS,IENS365,IENS312,NODE,PROV,PROV332,REF,REF3129,Z,Z2
"RTN","IBCNEHL1",219,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",220,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",221,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",222,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",223,0)
 D FILE^DIE("ET","DATA12","ERROR")
"RTN","IBCNEHL1",224,0)
 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",225,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",226,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",227,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",228,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",229,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",230,0)
 ; update node 9 data
"RTN","IBCNEHL1",231,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",232,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",233,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",234,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",235,0)
 ; update node 10 data
"RTN","IBCNEHL1",236,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",237,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",238,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",239,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",240,0)
 ; update node 11 data
"RTN","IBCNEHL1",241,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",242,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",243,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",244,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",245,0)
GRPFILEX ;
"RTN","IBCNEHL1",246,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",247,0)
 ;
"RTN","IBCNEHL1",248,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",249,0)
 ;
"RTN","IBCNEHL1",250,0)
 ; Input Variables
"RTN","IBCNEHL1",251,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",252,0)
 ;
"RTN","IBCNEHL1",253,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",254,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",255,0)
 ;
"RTN","IBCNEHL1",256,0)
 N BUFF,CALLEDBY,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",257,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",258,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",259,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",260,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",261,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",262,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",263,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",264,0)
 ;
"RTN","IBCNEHL1",265,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",266,0)
 ; send a warning email message
"RTN","IBCNEHL1",267,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",268,0)
 ;
"RTN","IBCNEHL1",269,0)
 ; IB*2.0*506 Removed the following line of code to Treat all AAA Action Codes
"RTN","IBCNEHL1",270,0)
 ; as though the Payer/FSC Responded.
"RTN","IBCNEHL1",271,0)
 ;I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT^IBCNEHL3
"RTN","IBCNEHL1",272,0)
 ;
"RTN","IBCNEHL1",273,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",274,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",275,0)
 ;
"RTN","IBCNEHL1",276,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",277,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",278,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",279,0)
 ;
"RTN","IBCNEHL1",280,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",281,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",282,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",283,0)
 ;
"RTN","IBCNEHL1",284,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",285,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",286,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",287,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",288,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",289,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",290,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",291,0)
 ;
"RTN","IBCNEHL1",292,0)
 ;  Check for error action
"RTN","IBCNEHL1",293,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U) D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",294,0)
 ;
"RTN","IBCNEHL1",295,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",296,0)
 S FILEIT=1
"RTN","IBCNEHL1",297,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",298,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",299,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",300,0)
 . S FILEIT=0
"RTN","IBCNEHL1",301,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",302,0)
 ;
"RTN","IBCNEHL1",303,0)
 ; -
"RTN","IBCNEHL1",304,0)
 ; ** Very important:  Variable 'CALLEDBY' must be set for this routine so
"RTN","IBCNEHL1",305,0)
 ;    that when a payer response is saved to the buffer either as an
"RTN","IBCNEHL1",306,0)
 ;    update to an existing buffer entry or as a new buffer entry a new
"RTN","IBCNEHL1",307,0)
 ;    eIV inquiry is not automatically triggered and resent to the payer again.
"RTN","IBCNEHL1",308,0)
 ;    When certain fields are changed in file #355.33 a trigger calls routine
"RTN","IBCNEHL1",309,0)
 ;    ^IBCNERTQ which can create and send a new inquiry in real time to the payer.
"RTN","IBCNEHL1",310,0)
 ;    We want this to occur in all cases _EXCEPT_ when it is a payer response.
"RTN","IBCNEHL1",311,0)
 ;    Which means _EXCEPT_ when it is triggered as a result of this routine.
"RTN","IBCNEHL1",312,0)
 ;
"RTN","IBCNEHL1",313,0)
 S CALLEDBY="IBCNEHL1"
"RTN","IBCNEHL1",314,0)
 ;
"RTN","IBCNEHL1",315,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",316,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",317,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",318,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",319,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",320,0)
 ;
"RTN","IBCNEHL1",321,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",322,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",323,0)
 ;
"RTN","IBCNEHL1",324,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",325,0)
 ;  response data
"RTN","IBCNEHL1",326,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",327,0)
 ;
"RTN","IBCNEHL1",328,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",329,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",330,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",331,0)
 ;
"RTN","IBCNEHL1",332,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",333,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",334,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",335,0)
FILX ;
"RTN","IBCNEHL1",336,0)
 Q
"RTN","IBCNEHL1",337,0)
 ;
"RTN","IBCNEHL1",338,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",339,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",340,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",341,0)
 ;
"RTN","IBCNEHL1",342,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",343,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",344,0)
 ;
"RTN","IBCNEHL1",345,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",346,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",347,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",348,0)
 ;
"RTN","IBCNEHL1",349,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",350,0)
 ;
"RTN","IBCNEHL1",351,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",352,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",353,0)
 S RES=0
"RTN","IBCNEHL1",354,0)
 I +$G(RIEN)'>0 Q RES                       ; Invalid ien for file 365
"RTN","IBCNEHL1",355,0)
 ;
"RTN","IBCNEHL1",356,0)
 ; IB*2.0*549 - Moved up the next 5 lines.  Originally, these lines were
"RTN","IBCNEHL1",357,0)
 ;              directly after line 'I $G(IIVSTAT)'=1 Q RES'
"RTN","IBCNEHL1",358,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",359,0)
 ;
"RTN","IBCNEHL1",360,0)
 ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",361,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))
"RTN","IBCNEHL1",362,0)
 S PIEN=$P(RDATA0,U,3)
"RTN","IBCNEHL1",363,0)
 ;
"RTN","IBCNEHL1",364,0)
 ; IB*2.0*549 - Moved up the next 2 lines.  Originally, these lines were
"RTN","IBCNEHL1",365,0)
 ;              directly after 'S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES'
"RTN","IBCNEHL1",366,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",367,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",368,0)
 ;
"RTN","IBCNEHL1",369,0)
 ; IB*2.0*549 - Added ',MWNRTYP' below to only quit for non-medicare policies
"RTN","IBCNEHL1",370,0)
 I $G(IIVSTAT)'=1,'MWNRTYP Q RES            ; Only auto-update 'active policy' responses
"RTN","IBCNEHL1",371,0)
 I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",372,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",373,0)
 ;
"RTN","IBCNEHL1",374,0)
 ;IB*2.0*593/HN Don't allow any entry with HMS SOI to auto-update
"RTN","IBCNEHL1",375,0)
 I $$GET1^DIQ(355.33,+$$GET1^DIQ(365,RIEN_",","BUFFER ENTRY","I")_",","SOURCE OF INFORMATION")="HMS" Q RES
"RTN","IBCNEHL1",376,0)
 ;
"RTN","IBCNEHL1",377,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",378,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",379,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",380,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",381,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",382,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",383,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",384,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",385,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",386,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",387,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",388,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",389,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",390,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",391,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",392,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",393,0)
 ..; check group number
"RTN","IBCNEHL1",394,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",395,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",396,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",397,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",398,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",399,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",400,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",401,0)
 ....Q
"RTN","IBCNEHL1",402,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",403,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",404,0)
 ....Q
"RTN","IBCNEHL1",405,0)
 ...Q
"RTN","IBCNEHL1",406,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",407,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",408,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",409,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",410,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",411,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",412,0)
 ....;           To     $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",413,0)
 ....I $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",414,0)
 ....S GOK=0
"RTN","IBCNEHL1",415,0)
 ....Q
"RTN","IBCNEHL1",416,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",417,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",418,0)
 ....;           To     $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",419,0)
 ....I $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",420,0)
 ....S GOK=0
"RTN","IBCNEHL1",421,0)
 ....Q
"RTN","IBCNEHL1",422,0)
 ...Q
"RTN","IBCNEHL1",423,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",424,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",425,0)
 ..Q
"RTN","IBCNEHL1",426,0)
 .Q
"RTN","IBCNEHL1",427,0)
 Q RES
"RTN","IBCNEHL1",428,0)
 ;
"RTN","IBCNEHL1",429,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; File eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",430,0)
 ; Input:   DFN     - Internal Patient IEN
"RTN","IBCNEHL1",431,0)
 ;          IEN312  - Insurance multiple #
"RTN","IBCNEHL1",432,0)
 ;          RIEN    - file 365 ien
"RTN","IBCNEHL1",433,0)
 ;          AFLG    - 1 if called from autoupdate
"RTN","IBCNEHL1",434,0)
 ;                    0 if called from ins. buffer process entry
"RTN","IBCNEHL1",435,0)
 ; Returns: "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR
"RTN","IBCNEHL1",436,0)
 ;          for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",437,0)
 ;
"RTN","IBCNEHL1",438,0)
 ;
"RTN","IBCNEHL1",439,0)
 Q $$EBFILE^IBCNEHL5(DFN,IEN312,RIEN,AFLG)  ;IB*2.0*549 moved because of routine size
"RTN","IBCNEHL1",440,0)
 ;
"RTN","IBCNERTC")
0^4^B9367965^n/a
"RTN","IBCNERTC",1,0)
IBCNERTC ;AITC/HN - Covered by Health Insurance ;03-MAR-2017
"RTN","IBCNERTC",2,0)
 ;;2.0;INTEGRATED BILLING;**593**;21-MAR-94;Build 31
"RTN","IBCNERTC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERTC",4,0)
 ;
"RTN","IBCNERTC",5,0)
 ;**Program Description**
"RTN","IBCNERTC",6,0)
 ;  This program will loop through the ACHI Index of the Patient (2) file to update the 
"RTN","IBCNERTC",7,0)
 ;  Covered by Health Insurance (2.3192) field based on current active policies.
"RTN","IBCNERTC",8,0)
 ;
"RTN","IBCNERTC",9,0)
 ;  This option is designed to run through TaskMan after midnight.  It shouldn't take long since there
"RTN","IBCNERTC",10,0)
 ;  should not be many entries in the ACHI index per day.
"RTN","IBCNERTC",11,0)
 ;
"RTN","IBCNERTC",12,0)
 ;  UPATF should be used with care since it will process the entire Patient File
"RTN","IBCNERTC",13,0)
 ;
"RTN","IBCNERTC",14,0)
 Q
"RTN","IBCNERTC",15,0)
 ;
"RTN","IBCNERTC",16,0)
EN(IBDT) ;From Taskman nightly job.  Call from label TASK.
"RTN","IBCNERTC",17,0)
 N DFN
"RTN","IBCNERTC",18,0)
 S DFN=""
"RTN","IBCNERTC",19,0)
 F  S DFN=$O(^DPT("ACHI",IBDT,DFN)) Q:'DFN  D INS(DFN,IBDT)
"RTN","IBCNERTC",20,0)
 Q
"RTN","IBCNERTC",21,0)
 ;
"RTN","IBCNERTC",22,0)
INS(DFN,IBDT) ;Check insurance
"RTN","IBCNERTC",23,0)
 N DA,DIE,IBCOV,IBIND,IBINS,IBNCOV,DR,IBINSD,IENS,EFFDT,IBIENS,DEFIND,IBIEN,IBSYM
"RTN","IBCNERTC",24,0)
 S (IBCOV,IBNCOV)=$$GET1^DIQ(2,DFN_",","COVERED BY HEALTH INSURANCE?","I")
"RTN","IBCNERTC",25,0)
 D ALL^IBCNS1(DFN,"IBINS",2,IBDT) S IBINSD=+$G(IBINS(0))
"RTN","IBCNERTC",26,0)
 ;
"RTN","IBCNERTC",27,0)
 ; -- initial value ="" or Unknown
"RTN","IBCNERTC",28,0)
 I $TR(IBCOV,"U","")']"" S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"U",IBINSD:"Y",1:"N")
"RTN","IBCNERTC",29,0)
 ; -- initial value = YES or NO (treat the same)
"RTN","IBCNERTC",30,0)
 I "YN"[IBCOV S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"N",IBINSD:"Y",1:"N")
"RTN","IBCNERTC",31,0)
 ;
"RTN","IBCNERTC",32,0)
 I IBCOV'=IBNCOV S DIE="^DPT(",DR=".3192///"_IBNCOV,DA=DFN D ^DIE
"RTN","IBCNERTC",33,0)
 ;
"RTN","IBCNERTC",34,0)
 ; Create Buffer entry for those whose Effective Date = IBDT
"RTN","IBCNERTC",35,0)
 ;
"RTN","IBCNERTC",36,0)
 S DA=0 F  S DA=$O(IBINS(DA)) Q:'DA  D
"RTN","IBCNERTC",37,0)
 . S IBIEN=+IBINS(DA,0)
"RTN","IBCNERTC",38,0)
 . S IBIENS=DA_","_DFN_","
"RTN","IBCNERTC",39,0)
 . S EFFDT=$$GET1^DIQ(2.312,IBIENS,8,"I")
"RTN","IBCNERTC",40,0)
 . I EFFDT'=IBDT Q
"RTN","IBCNERTC",41,0)
 . ; Add check to see if already in buffer
"RTN","IBCNERTC",42,0)
 . S DEFIND=$$BFEXIST(DFN,IBIEN) Q:DEFIND=1
"RTN","IBCNERTC",43,0)
 . S IBSYM=$P($$INSERROR^IBCNEUT3("I",IBIEN),"^",1)
"RTN","IBCNERTC",44,0)
 . D PT^IBCNEBF(DFN,DA,IBSYM,,1)
"RTN","IBCNERTC",45,0)
 Q
"RTN","IBCNERTC",46,0)
 ;
"RTN","IBCNERTC",47,0)
UPATF ;Update the entire Patient File
"RTN","IBCNERTC",48,0)
 ; This should be tasked for late evening since it will take awhile to run.
"RTN","IBCNERTC",49,0)
 N DFN,IENS
"RTN","IBCNERTC",50,0)
 S DFN=0
"RTN","IBCNERTC",51,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D
"RTN","IBCNERTC",52,0)
 . D INS(DFN,DT)
"RTN","IBCNERTC",53,0)
 Q
"RTN","IBCNERTC",54,0)
 ;
"RTN","IBCNERTC",55,0)
BFEXIST(DFN,INSNAME) ; Function returns 1 if an Entered Ins Buffer File 
"RTN","IBCNERTC",56,0)
 ; entry exists with the same DFN and INSNAME, otherwise it returns a 0
"RTN","IBCNERTC",57,0)
 ;
"RTN","IBCNERTC",58,0)
 ; DFN - Patient DFN
"RTN","IBCNERTC",59,0)
 ; INSNAME - Insurance Company Name File 36 - Field .01
"RTN","IBCNERTC",60,0)
 ;
"RTN","IBCNERTC",61,0)
 NEW EXIST,IEN,EDATE
"RTN","IBCNERTC",62,0)
 S EXIST=0
"RTN","IBCNERTC",63,0)
 S INSNAME=$P($G(^DIC(36,IBIEN,0)),U) ;$$TRIM^XLFSTR(INSNAME)  ; trimmed
"RTN","IBCNERTC",64,0)
 I ('DFN)!(INSNAME="") G BFEXIT
"RTN","IBCNERTC",65,0)
 ;
"RTN","IBCNERTC",66,0)
 S IEN=0
"RTN","IBCNERTC",67,0)
 F  S IEN=$O(^IBA(355.33,"C",DFN,IEN)) Q:'IEN!EXIST  D
"RTN","IBCNERTC",68,0)
 .  ; Quit if status is NOT 'Entered'
"RTN","IBCNERTC",69,0)
 .  I $$GET1^DIQ(355.33,IEN_",","STATUS","I")'="E" Q
"RTN","IBCNERTC",70,0)
 .  ; Quit if Ins Buffer Ins Co Name (trimmed) is NOT EQUAL to 
"RTN","IBCNERTC",71,0)
 .  ;  the Ins Co Name parameter (trimmed)
"RTN","IBCNERTC",72,0)
 .  I $$TRIM^XLFSTR($$GET1^DIQ(355.33,IEN_",","INSURANCE COMPANY NAME"))'=INSNAME Q
"RTN","IBCNERTC",73,0)
 .  ; Quit if Date Enterd Matches
"RTN","IBCNERTC",74,0)
 .  S EDATE=$P($$GET1^DIQ(355.33,IEN_",","DATE ENTERED","I"),".")
"RTN","IBCNERTC",75,0)
 .  I IBDT'=EDATE Q
"RTN","IBCNERTC",76,0)
 .  ; Match found
"RTN","IBCNERTC",77,0)
 .  S EXIST=1
"RTN","IBCNERTC",78,0)
 .  Q
"RTN","IBCNERTC",79,0)
BFEXIT ;
"RTN","IBCNERTC",80,0)
 Q EXIST
"RTN","IBCNERTC",81,0)
 ;
"RTN","IBCNERTC",82,0)
XREF ;Build the "ACHI" cross reference
"RTN","IBCNERTC",83,0)
 N CNT,DA,DFN,FILE,DIK,X,Y
"RTN","IBCNERTC",84,0)
 S DFN=0
"RTN","IBCNERTC",85,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D
"RTN","IBCNERTC",86,0)
 . I $$GET1^DIQ(2,DFN_","_"DATE OF DEATH") Q  ;Patient Deceased
"RTN","IBCNERTC",87,0)
 . S DA(1)=DFN
"RTN","IBCNERTC",88,0)
 . S DIK="^DPT("_DA(1)_",.312,"
"RTN","IBCNERTC",89,0)
 . S DIK(1)="3^ACHI"
"RTN","IBCNERTC",90,0)
 . D ENALL^DIK
"RTN","IBCNERTC",91,0)
 . S DIK(1)="8^ACHI"
"RTN","IBCNERTC",92,0)
 . D ENALL^DIK
"RTN","IBCNERTC",93,0)
 Q
"RTN","IBCNERTQ")
0^5^B47060813^B46541707
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;ALB/BI - Real-time Insurance Verification ;15-OCT-2015
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438,467,497,549,582,593**;21-MAR-94;Build 31
"RTN","IBCNERTQ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          90.01 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          90.02 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          90.03 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;          62.01 - PATIENT ID
"RTN","IBCNERTQ",14,0)
 ;
"RTN","IBCNERTQ",15,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",16,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",17,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",18,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",19,0)
 ;          90.03 - SUBSCRIBER ID (if patient is the subscriber)
"RTN","IBCNERTQ",20,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",21,0)
 ;          62.01 - PATIENT ID (if patient is not the subscriber)
"RTN","IBCNERTQ",22,0)
 ;
"RTN","IBCNERTQ",23,0)
 ;
"RTN","IBCNERTQ",24,0)
 N TQIEN,TQN0,NODE20,NODE60,NODE90,QF,N4,PTID,SUBID,MGRP,DFN,PREL
"RTN","IBCNERTQ",25,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",26,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",27,0)
 N DA,DB,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",28,0)
 ;
"RTN","IBCNERTQ",29,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",30,0)
 ;IB*582/HAN - Do not allow entries to process if the user is INTERFACE,IB EIV
"RTN","IBCNERTQ",31,0)
 N EIVDUZ S EIVDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNERTQ",32,0)
 ;IB*2.0*593/HN - Added to allow nightly extract entries to go out immediately.
"RTN","IBCNERTQ",33,0)
 I $G(IDUZ)'="",IDUZ=EIVDUZ,$G(CALLEDBY)'="",CALLEDBY="IBCNEHL1" Q RESPONSE
"RTN","IBCNERTQ",34,0)
 ;IB*582 - End
"RTN","IBCNERTQ",35,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",36,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",37,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",38,0)
 S NODE90=$G(^IBA(355.33,N2,90))
"RTN","IBCNERTQ",39,0)
 S PREL=$P(NODE60,U,14)
"RTN","IBCNERTQ",40,0)
 I $P(NODE20,U,1)="" Q RESPONSE                       ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",41,0)
 I $P(NODE60,U,1)="" Q RESPONSE                       ;PATIENT NAME
"RTN","IBCNERTQ",42,0)
 I $P(NODE90,U,3)="" Q RESPONSE                       ;SUBSCRIBER ID
"RTN","IBCNERTQ",43,0)
 ; exclude dependent inquiries w/o patient id or DOB
"RTN","IBCNERTQ",44,0)
 I PREL'=18,PREL'="",($P($G(^IBA(355.33,N2,62)),U)=""!($P(NODE60,U,8)="")) Q RESPONSE
"RTN","IBCNERTQ",45,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",46,0)
 I $G(IBNCPDPELIG) Q RESPONSE  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",47,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",48,0)
 ;
"RTN","IBCNERTQ",49,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",50,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",51,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",PREL="" Q RESPONSE
"RTN","IBCNERTQ",52,0)
 ;
"RTN","IBCNERTQ",53,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",54,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",55,0)
 S SUBID=$P(NODE90,U,3)
"RTN","IBCNERTQ",56,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",57,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",58,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",59,0)
 .; don't send again if there's an entry in the queue with the same subscriber id, same buffer entry, and
"RTN","IBCNERTQ",60,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",61,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",62,0)
 .Q
"RTN","IBCNERTQ",63,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",64,0)
 ;
"RTN","IBCNERTQ",65,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",66,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",67,0)
 ;
"RTN","IBCNERTQ",68,0)
 ;Store Service Type Code in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",69,0)
 I +$G(^IBA(355.33,N2,80))'>0 D SETSTC(N2)
"RTN","IBCNERTQ",70,0)
 ;
"RTN","IBCNERTQ",71,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",72,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",73,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",74,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",75,0)
 ;
"RTN","IBCNERTQ",76,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",77,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",78,0)
 ;
"RTN","IBCNERTQ",79,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",80,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",81,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",82,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",83,0)
 ;
"RTN","IBCNERTQ",84,0)
ENDTRIG ; Final Clean Up.
"RTN","IBCNERTQ",85,0)
 ;
"RTN","IBCNERTQ",86,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",87,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",88,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",89,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",90,0)
 ;
"RTN","IBCNERTQ",91,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",92,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",93,0)
 Q RESPONSE
"RTN","IBCNERTQ",94,0)
 ;
"RTN","IBCNERTQ",95,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",96,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",97,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",98,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",99,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",100,0)
 ;
"RTN","IBCNERTQ",101,0)
 S CNT=0
"RTN","IBCNERTQ",102,0)
 ;
"RTN","IBCNERTQ",103,0)
 S QUEUED=0
"RTN","IBCNERTQ",104,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",105,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",106,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",107,0)
 ;
"RTN","IBCNERTQ",108,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",109,0)
 ;
"RTN","IBCNERTQ",110,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",111,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",112,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",113,0)
 ;
"RTN","IBCNERTQ",114,0)
 ; IB*2.0*549 -  Quit if Realtime  Extract Master switch is off
"RTN","IBCNERTQ",115,0)
 ; Note: Checking here instead of the top of TRIG to check for above error conditions first
"RTN","IBCNERTQ",116,0)
 Q:$$GET1^DIQ(350.9,"1,",51.27,"I")="N" 0
"RTN","IBCNERTQ",117,0)
 ;
"RTN","IBCNERTQ",118,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",119,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",120,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",121,0)
 ;
"RTN","IBCNERTQ",122,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",123,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",124,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",125,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",126,0)
 ;
"RTN","IBCNERTQ",127,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",128,0)
 S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18) S:'SRVICEDT SRVICEDT=DT ; Service Date
"RTN","IBCNERTQ",129,0)
 ;
"RTN","IBCNERTQ",130,0)
 ; IB*2.0*549 Removed following line
"RTN","IBCNERTQ",131,0)
 ;I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNERTQ",132,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",133,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",134,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",135,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",136,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",137,0)
 ;
"RTN","IBCNERTQ",138,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",139,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",140,0)
 ;
"RTN","IBCNERTQ",141,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",142,0)
 ;
"RTN","IBCNERTQ",143,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",144,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",145,0)
 ;
"RTN","IBCNERTQ",146,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",147,0)
 ;  date range
"RTN","IBCNERTQ",148,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",149,0)
 ;
"RTN","IBCNERTQ",150,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",151,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",152,0)
 ;
"RTN","IBCNERTQ",153,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",154,0)
 S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",155,0)
 I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",156,0)
 ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNERTQ",157,0)
 D SETREL^IBCNEDE1(IEN)
"RTN","IBCNERTQ",158,0)
 ;
"RTN","IBCNERTQ",159,0)
 ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNERTQ",160,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",161,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",162,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",163,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",164,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",165,0)
 ; not included
"RTN","IBCNERTQ",166,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",167,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",168,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",169,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",170,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",171,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",172,0)
 ;
"RTN","IBCNERTQ",173,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",174,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",175,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",176,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",177,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",178,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",179,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",180,0)
 ;
"RTN","IBCNERTQ",181,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",182,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",183,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",184,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",185,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",186,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",187,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",188,0)
 ;
"RTN","IBCNERTQ",189,0)
 ; IB*2.0*549 - quit if test site and not a valid test case
"RTN","IBCNERTQ",190,0)
 Q:'$$XMITOK^IBCNEUT7(IEN) 0
"RTN","IBCNERTQ",191,0)
 ;
"RTN","IBCNERTQ",192,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",193,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",194,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",195,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",196,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",197,0)
 ;  If not successful
"RTN","IBCNERTQ",198,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",199,0)
 ;  If successful
"RTN","IBCNERTQ",200,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",201,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",202,0)
 ;
"RTN","IBCNERTQ",203,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",204,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",205,0)
 ;
"RTN","IBCNERTQ",206,0)
 Q 1
"RTN","IBCNERTQ",207,0)
 ;
"RTN","IBCNERTQ",208,0)
SETSTC(BUFF) ; set service type code
"RTN","IBCNERTQ",209,0)
 N DIE,DA,DR,X,Y
"RTN","IBCNERTQ",210,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",211,0)
 ; Define Service Type Code (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",212,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",213,0)
 S DR="80.01////"_$P($G(^IBE(350.9,1,60)),U)
"RTN","IBCNERTQ",214,0)
 D ^DIE
"RTN","IBCNERTQ",215,0)
 Q
"RTN","IBCNRDV")
0^8^B144659738^B68041959
"RTN","IBCNRDV",1,0)
IBCNRDV ;OAKFO/ELZ - INSURANCE INFORMATION EXCHANGE VIA RDV ;27-MAR-03
"RTN","IBCNRDV",2,0)
 ;;2.0;INTEGRATED BILLING;**214,231,361,371,452,593**;21-MAR-94;Build 31
"RTN","IBCNRDV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNRDV",4,0)
 ;
"RTN","IBCNRDV",5,0)
 ; This routine is used to exchange insurance information between
"RTN","IBCNRDV",6,0)
 ; facilities.
"RTN","IBCNRDV",7,0)
OPT ; Menu option entry point.  This is used to select a patient to request
"RTN","IBCNRDV",8,0)
 ; information about from the remote treating facilities.
"RTN","IBCNRDV",9,0)
 N DFN,DIC,X,Y,DTOUT,DUOUT,IBT,%,%Y,IBX,VADM,IBB,IBD,IBH,IBI,IBICN,IBR,IBRZ,IBX,IBY,IBZ,IBWAIT,IBL,DO,IBTYPE,IB1
"RTN","IBCNRDV",10,0)
 ;
"RTN","IBCNRDV",11,0)
 ; prompt for patient
"RTN","IBCNRDV",12,0)
AGAIN S DIC="^DPT(",DIC(0)="AEMNQ" D ^DIC Q:Y<1  S DFN=+Y
"RTN","IBCNRDV",13,0)
 ;
"RTN","IBCNRDV",14,0)
BACKGND ; background/tasked entry point
"RTN","IBCNRDV",15,0)
 ; IBTYPE is being used as a flag to indicate this is running in background
"RTN","IBCNRDV",16,0)
 ;
"RTN","IBCNRDV",17,0)
 ; look up treating facilities
"RTN","IBCNRDV",18,0)
 K IBT S IBT=$$TFL^IBARXMU(DFN,.IBT)
"RTN","IBCNRDV",19,0)
 I IBT<1,'$D(IBTYPE) W !!,"This patient has no remote treating facilities to query." G AGAIN
"RTN","IBCNRDV",20,0)
 I IBT<1 Q
"RTN","IBCNRDV",21,0)
 ;
"RTN","IBCNRDV",22,0)
 ; display and verify we want to do this
"RTN","IBCNRDV",23,0)
 I '$D(IBTYPE) D DEM^VADPT W !!,"The patient ",VADM(1)," has the following ",IBT," remote facilitie(s)",! S IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1  W !?10,$P(IBT(IBX),"^",2)
"RTN","IBCNRDV",24,0)
 I '$D(IBTYPE) W !!,"Do you want to perform this Remote Query" S %=1 D YN^DICN G:%'=1 AGAIN
"RTN","IBCNRDV",25,0)
 ;
"RTN","IBCNRDV",26,0)
 ; get ICN
"RTN","IBCNRDV",27,0)
 S IBICN=$$ICN^IBARXMU(DFN) I 'IBICN,'$D(IBTYPE) W !!,"No ICN for this patient" G AGAIN
"RTN","IBCNRDV",28,0)
 I 'IBICN Q
"RTN","IBCNRDV",29,0)
 ;
"RTN","IBCNRDV",30,0)
 ; sent off the remote queries and get back handles
"RTN","IBCNRDV",31,0)
 S IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1  D
"RTN","IBCNRDV",32,0)
 . D SEND(.IBH,IBX,IBICN,$S($D(IBTYPE):"IBCN INSURANCE QUERY TASK",1:"IBCN INSURANCE QUERY"))
"RTN","IBCNRDV",33,0)
 . X $S(IBH(0)'="":"S $P(IBT(IBX),U,5)=IBH(0)",1:"W:'$D(IBTYPE) !,""No handle returned for "",$P(IBT(IBX),U,2) K IBT(IBX)")
"RTN","IBCNRDV",34,0)
 ;
"RTN","IBCNRDV",35,0)
 ; no handles returned
"RTN","IBCNRDV",36,0)
 I $D(IBT)<9,'$D(IBTYPE) W !!,"Unable to perform any remote queries.",! G AGAIN
"RTN","IBCNRDV",37,0)
 I $D(IBT)<9 Q
"RTN","IBCNRDV",38,0)
 ;
"RTN","IBCNRDV",39,0)
 ;Create Duplicate Check Index
"RTN","IBCNRDV",40,0)
 D INDEX(DFN)
"RTN","IBCNRDV",41,0)
 ;
"RTN","IBCNRDV",42,0)
 ; go through every IBT()
"RTN","IBCNRDV",43,0)
 S IBP="|",IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1!($D(IBT)<9)  D
"RTN","IBCNRDV",44,0)
 . ;
"RTN","IBCNRDV",45,0)
 . ; do I have a return data.
"RTN","IBCNRDV",46,0)
 . F IBWAIT=1:1:60 W:'$D(IBTYPE) "." H 1 D CHECK(.IBR,$P(IBT(IBX),"^",5)) I $G(IBR(0))["Done" Q
"RTN","IBCNRDV",47,0)
 . I $G(IBR(0))'["Done" W:'$D(IBTYPE) !!,"Unable to communicate with ",$P(IBT(IBX),U,2) Q
"RTN","IBCNRDV",48,0)
 . K IBR
"RTN","IBCNRDV",49,0)
 . D RETURN(.IBR,$P(IBT(IBX),"^",5))
"RTN","IBCNRDV",50,0)
 . ;
"RTN","IBCNRDV",51,0)
 . ; no data returned or error message
"RTN","IBCNRDV",52,0)
 . S IBRZ=$S(-1=+$G(IBR):IBR,$G(IBR(0))="":$G(IBR(1)),1:$G(IBR(0)))
"RTN","IBCNRDV",53,0)
 . ;
"RTN","IBCNRDV",54,0)
 . ; no info to proceed
"RTN","IBCNRDV",55,0)
 . I IBRZ<1 W:'$D(IBTYPE) !,"Response from ",$P(IBT(IBX),U,2),!,$P(IBRZ,"^",2) K IBT(IBX) D:IBRZ="-1^No insurance on file" FILE(0) Q
"RTN","IBCNRDV",56,0)
 . ;
"RTN","IBCNRDV",57,0)
 . ; received insurance info, need to file and display message
"RTN","IBCNRDV",58,0)
 . W:'$D(IBTYPE) !,"Received ",$G(IBR(0))," insurance companies from ",$P(IBT(IBX),U,2) D FILE(+IBR(0))
"RTN","IBCNRDV",59,0)
 . ;
"RTN","IBCNRDV",60,0)
 . S IBY=0 F  S IBY=$O(IBR(IBY))  Q:IBY<1  D
"RTN","IBCNRDV",61,0)
 .. F IBL=5:1  S IBT=$P($T(MAP+IBL),";",3) Q:IBT=""  D
"RTN","IBCNRDV",62,0)
 ... ;
"RTN","IBCNRDV",63,0)
 ... ; am I on the right MAP line
"RTN","IBCNRDV",64,0)
 ... I $P(IBT,IBP,3)=$S(IBY#6:IBY#6,1:6) S IBZ=$P(IBR(IBY),"^",$P(IBT,IBP,4)) I $L(IBZ) D
"RTN","IBCNRDV",65,0)
 .... ;
"RTN","IBCNRDV",66,0)
 .... ; xecute code to change external to internal
"RTN","IBCNRDV",67,0)
 .... X:$L($P(IBT,IBP,7)) $P(IBT,IBP,7)
"RTN","IBCNRDV",68,0)
 .... ;
"RTN","IBCNRDV",69,0)
 .... ; put the info in the array for the buffer file
"RTN","IBCNRDV",70,0)
 .... S:$D(IBZ) IBB($P(IBT,IBP,5))=IBZ
"RTN","IBCNRDV",71,0)
 .. ;
"RTN","IBCNRDV",72,0)
 .. ; need to avoid duplicates if possible.
"RTN","IBCNRDV",73,0)
 .. ;I $G(IBB(20.01))["MEDICARE (WNR)" S X=0 F  S X=$O(^DPT(DFN,.312,X)) Q:X<1  I $P($G(^DIC(36,+$P($G(^DPT(DFN,.312,X,0)),"^"),0)),"^")["MEDICARE (WNR)" K IBB Q
"RTN","IBCNRDV",74,0)
 .. ;
"RTN","IBCNRDV",75,0)
 .. ; file in the buffer file & where else needed
"RTN","IBCNRDV",76,0)
 .. I IBY#6=0 D
"RTN","IBCNRDV",77,0)
 ... I $L($G(IBB(20.01))) D
"RTN","IBCNRDV",78,0)
 .... N IBOK S IBOK=1
"RTN","IBCNRDV",79,0)
 .... S IBB(.14)=$$IEN^XUAF4(+IBT(IBX))
"RTN","IBCNRDV",80,0)
 .... S IBB(.03)=$O(^IBE(355.12,"C","INSURANCE IMPORT",""))
"RTN","IBCNRDV",81,0)
 .... D VCHECK(.IBB) I 'IBOK Q
"RTN","IBCNRDV",82,0)
 .... S IBB=$$ADDSTF^IBCNBES($G(IBB(.03),1),DFN,.IBB)
"RTN","IBCNRDV",83,0)
 ... I '$D(IB1),$D(IBTYPE),$L($G(IBB(20.01))) D SCH^IBTUTL2(DFN,$G(IBSAVEI),$G(IBSAVEJ)):IBTYPE="TRKR",ADM^IBTUTL($G(IBSAVE1),$G(IBSAVE2),$G(IBSAVE3),$G(IBSAVE4)):IBTYPE="ADM" S IB1=1
"RTN","IBCNRDV",84,0)
 ... W:'$D(IBTYPE)&($L($G(IBB(20.01)))) !,$P($G(IBB),"^")," Buffer File entry for ",$G(IBB(20.01))
"RTN","IBCNRDV",85,0)
 ... K IBB
"RTN","IBCNRDV",86,0)
 ;
"RTN","IBCNRDV",87,0)
 ; flag so I don't do this patient again within 90 days
"RTN","IBCNRDV",88,0)
 S ^IBT(356,"ARDV",DFN,$$FMADD^XLFDT(DT,90))=""
"RTN","IBCNRDV",89,0)
 ;
"RTN","IBCNRDV",90,0)
 ; Clean up ^TMP global
"RTN","IBCNRDV",91,0)
 K ^TMP("IBCNRDV",$J)
"RTN","IBCNRDV",92,0)
 ;
"RTN","IBCNRDV",93,0)
 Q
"RTN","IBCNRDV",94,0)
 ;
"RTN","IBCNRDV",95,0)
VCHECK(IBB) ; Check to make sure the record is not duplicate and passes validity check.
"RTN","IBCNRDV",96,0)
 ;
"RTN","IBCNRDV",97,0)
 ;Check for duplicates
"RTN","IBCNRDV",98,0)
 I $$DUP(.IBB) S IBOK=0 G VCHECKX
"RTN","IBCNRDV",99,0)
 ; Validate entries to insure we are only getting the data we want.
"RTN","IBCNRDV",100,0)
 I '$$VALID(.IBB) S IBOK=0 G VCHECKX
"RTN","IBCNRDV",101,0)
 ;Add to index
"RTN","IBCNRDV",102,0)
 N IBDOB,IBGRP,IBINSNM,IBNAME,IBSUBID
"RTN","IBCNRDV",103,0)
 S IBINSNM=$G(IBB(20.01)) I IBINSNM']"" S IBINSNM=" "
"RTN","IBCNRDV",104,0)
 S IBGRP=$G(IBB(40.03)) I IBGRP']"" S IBGRP=" "
"RTN","IBCNRDV",105,0)
 S IBSUBID=$G(IBB(60.04)) I IBSUBID']"" S IBSUBID=" "
"RTN","IBCNRDV",106,0)
 S IBNAME=$P($G(IBB(60.07))," ") I IBNAME']"" S IBNAME=" "  ;Only match on LAST,FIRST
"RTN","IBCNRDV",107,0)
 S IBDOB=$G(IBB(60.08)) I 'IBDOB S IBDOB=" "
"RTN","IBCNRDV",108,0)
 S ^TMP("IBCNRDV",$J,IBINSNM,IBGRP,IBSUBID,IBNAME,IBDOB)=""
"RTN","IBCNRDV",109,0)
 ;
"RTN","IBCNRDV",110,0)
VCHECKX ;
"RTN","IBCNRDV",111,0)
 Q
"RTN","IBCNRDV",112,0)
 ;
"RTN","IBCNRDV",113,0)
INDEX(DFN) ;
"RTN","IBCNRDV",114,0)
 K ^TMP("IBCNRDV",$J)
"RTN","IBCNRDV",115,0)
 N IBBUFDA,IBIEN
"RTN","IBCNRDV",116,0)
 ; From Buffer
"RTN","IBCNRDV",117,0)
 S IBBUFDA=0
"RTN","IBCNRDV",118,0)
 F  S IBBUFDA=$O(^IBA(355.33,"C",DFN,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNRDV",119,0)
 . N IBDOB,IBGRP,IBINSNM,IBNAME,IBSUBID
"RTN","IBCNRDV",120,0)
 . S IBINSNM=$$GET1^DIQ(355.33,IBBUFDA_",","INSURANCE COMPANY NAME") I IBINSNM']"" S IBINSNM=" "
"RTN","IBCNRDV",121,0)
 . S IBGRP=$$GET1^DIQ(355.33,IBBUFDA_",","GROUP NUMBER") I IBGRP']"" S IBGRP=" "
"RTN","IBCNRDV",122,0)
 . S IBSUBID=$$GET1^DIQ(355.33,IBBUFDA_",","SUBSCRIBER ID") I IBSUBID']"" S IBSUBID=" "
"RTN","IBCNRDV",123,0)
 . S IBNAME=$P($$GET1^DIQ(355.33,IBBUFDA_",","NAME OF INSURED")," ") I IBNAME']"" S IBNAME=" "  ;Only match on LAST,FIRST
"RTN","IBCNRDV",124,0)
 . S IBDOB=$$GET1^DIQ(355.33,IBBUFDA_",","INSURED'S DOB","I") I 'IBDOB S IBDOB=" "
"RTN","IBCNRDV",125,0)
 . S ^TMP("IBCNRDV",$J,IBINSNM,IBGRP,IBSUBID,IBNAME,IBDOB)=""
"RTN","IBCNRDV",126,0)
 ; From active Insurance
"RTN","IBCNRDV",127,0)
 K IBINS
"RTN","IBCNRDV",128,0)
 D ALL^IBCNS1(DFN,"IBINS",2) ; Get all active insurance
"RTN","IBCNRDV",129,0)
 I $G(IBINS(0)) S IBIEN=0 F  S IBIEN=$O(IBINS(IBIEN)) Q:'IBIEN  D
"RTN","IBCNRDV",130,0)
 . N IBDOB,IBGRP,IBINSIEN,IBINSNM,IBNAME,IBSUBID
"RTN","IBCNRDV",131,0)
 . S IBINSIEN=+$P($G(IBINS(IBIEN,0)),U,1)
"RTN","IBCNRDV",132,0)
 . S IBINSNM=$$GET1^DIQ(36,IBINSIEN_",","NAME") I IBINSNM']"" S IBINSNM=" "
"RTN","IBCNRDV",133,0)
 . S IBGRP=$P($G(IBINS(IBIEN,355.3)),U,4) I IBGRP']"" S IBGRP=" "
"RTN","IBCNRDV",134,0)
 . S IBSUBID=$P($G(IBINS(IBIEN,7)),U,2) I IBSUBID']"" S IBSUBID=" "
"RTN","IBCNRDV",135,0)
 . S IBNAME=$P($P($G(IBINS(IBIEN,7)),U)," ") I IBNAME']"" S IBNAME=" "
"RTN","IBCNRDV",136,0)
 . S IBDOB=$P($G(IBINS(IBIEN,3)),U) I 'IBDOB S IBDOB=" "
"RTN","IBCNRDV",137,0)
 . S ^TMP("IBCNRDV",$J,IBINSNM,IBGRP,IBSUBID,IBNAME,IBDOB)=""
"RTN","IBCNRDV",138,0)
 K IBINS
"RTN","IBCNRDV",139,0)
 ;
"RTN","IBCNRDV",140,0)
 Q
"RTN","IBCNRDV",141,0)
 ;
"RTN","IBCNRDV",142,0)
RPC(IBD,IBICN) ; RPC entry for looking up insurance info
"RTN","IBCNRDV",143,0)
 N DFN,IBZ,IBX,IBY,IBP,IBI,IBT,IBZ
"RTN","IBCNRDV",144,0)
 S DFN=$$DFN^IBARXMU(IBICN) I 'DFN S IBD(0)="-1^ICN Not found" Q
"RTN","IBCNRDV",145,0)
 D ALL^IBCNS1(DFN,"IBY",3)
"RTN","IBCNRDV",146,0)
 I '$D(IBY) S IBD(0)="-1^No insurance on file" Q
"RTN","IBCNRDV",147,0)
 ; set up return format
"RTN","IBCNRDV",148,0)
 ; IBD(0)   = # of insurance companies
"RTN","IBCNRDV",149,0)
 S IBD(0)=$G(IBY(0))
"RTN","IBCNRDV",150,0)
 ;
"RTN","IBCNRDV",151,0)
 ; where n starts at 1 and increments to 7 for each insurance company
"RTN","IBCNRDV",152,0)
 ; IBD(n) = 355.33, zero node format
"RTN","IBCNRDV",153,0)
 ; IBD(n+1) = 355.33, 20 node format
"RTN","IBCNRDV",154,0)
 ; IBD(n+2) = 355.33, 21 node format
"RTN","IBCNRDV",155,0)
 ; IBD(n+3) = 355.33, 40 node format
"RTN","IBCNRDV",156,0)
 ; IBD(n+4) = 355.33, 60 node format
"RTN","IBCNRDV",157,0)
 ; IBD(n+5) = 355.33, 61 node format
"RTN","IBCNRDV",158,0)
 ; IBD(n+6) = 355.33, 62 node format
"RTN","IBCNRDV",159,0)
 ;
"RTN","IBCNRDV",160,0)
 S IBP="|"
"RTN","IBCNRDV",161,0)
 S IBI=0 F  S IBI=$O(IBY(IBI))  Q:IBI<1  F IBL=5:1 S IBT=$P($T(MAP+IBL),";",3) Q:IBT=""  D
"RTN","IBCNRDV",162,0)
 . S IBZ=$P($G(IBY(IBI,+IBT)),"^",$P(IBT,IBP,2)) ; set the existing data
"RTN","IBCNRDV",163,0)
 . I $L($P(IBT,IBP,6)) X $P(IBT,IBP,6) ; output transform
"RTN","IBCNRDV",164,0)
 . S $P(IBD(IBI-1*7+$P(IBT,IBP,3)),"^",$P(IBT,IBP,4))=IBZ ; set data IBD
"RTN","IBCNRDV",165,0)
 Q
"RTN","IBCNRDV",166,0)
 ;
"RTN","IBCNRDV",167,0)
MAP ; this is a mapping of data returned from ALL^IBCNS1 to the buffer file
"RTN","IBCNRDV",168,0)
 ; format is:  node number | piece | extract node | extract piece
"RTN","IBCNRDV",169,0)
 ;             | 355.33 field number | format out code (if any)
"RTN","IBCNRDV",170,0)
 ;             | format in code (if any)
"RTN","IBCNRDV",171,0)
 ; the extract nodes will be sequential to match buffer file DD
"RTN","IBCNRDV",172,0)
 ;;0|1|2|1|20.01|N Z X "F Z=0,.11,.13 S IBY(IBI,36+Z)=$G(^DIC(36,IBZ,Z))" S IBZ=$P(IBY(IBI,36),"^");ins co name
"RTN","IBCNRDV",173,0)
 ;;0|2|5|4|60.04;subscriber id
"RTN","IBCNRDV",174,0)
 ;;0|4|5|3|60.03;experation date
"RTN","IBCNRDV",175,0)
 ;;0|6|5|5|60.05;who's insurance
"RTN","IBCNRDV",176,0)
 ;;0|8|5|2|60.02;effective date
"RTN","IBCNRDV",177,0)
 ;;0|16|5|6|60.06;pt relationship to insured
"RTN","IBCNRDV",178,0)
 ;;0|17|5|7|60.07;name of insured
"RTN","IBCNRDV",179,0)
 ;;0|20|5|12|60.12;coordination of benefits
"RTN","IBCNRDV",180,0)
 ;;1|1|1|1|.01||I IBZ<$$FMADD^XLFDT(DT,-180) K IBZ;date entered ;IB*593/TAZ
"RTN","IBCNRDV",181,0)
 ;;1|3|1|10|.1||I IBZ<$$FMADD^XLFDT(DT,-180) K IBZ;date (last) verified
"RTN","IBCNRDV",182,0)
 ;;1|9|1|3|.03||S IBZ=$O(^IBE(355.12,"C","INSURANCE IMPORT",""));source of information ; Patch #593 Set to INSPT
"RTN","IBCNRDV",183,0)
 ;;2|1|6|5|61.05;send bill to employer
"RTN","IBCNRDV",184,0)
 ;;2|2|6|6|61.06;employer claims street address (line 1)
"RTN","IBCNRDV",185,0)
 ;;2|3|6|7|61.07;employer claims street address line 2
"RTN","IBCNRDV",186,0)
 ;;2|4|6|8|61.08;employer claims street address line 3
"RTN","IBCNRDV",187,0)
 ;;2|5|6|9|61.09;employer claims city
"RTN","IBCNRDV",188,0)
 ;;2|6|6|10|61.1|S IBZ=$$EXTERNAL^DILFD(2.312,2.06,"",IBZ)|N DIC,X,Y S DIC="^DIC(5,",X=IBZ,DIC(0)="OX" D ^DIC K:+Y<1 IBZ S:+Y>0 IBZ=+Y;employer claims state
"RTN","IBCNRDV",189,0)
 ;;2|7|6|11|61.11;employer claims zip code
"RTN","IBCNRDV",190,0)
 ;;2|8|6|12|61.12;employer claims phone
"RTN","IBCNRDV",191,0)
 ;;2|10|6|1|61.01;esghp
"RTN","IBCNRDV",192,0)
 ;;2|11|6|3|61.03;employment status
"RTN","IBCNRDV",193,0)
 ;;2|12|6|4|61.04;retirement date
"RTN","IBCNRDV",194,0)
 ;;3|1|5|8|60.08;insured's dob
"RTN","IBCNRDV",195,0)
 ;;3|5|5|9|60.09;insured's ssn
"RTN","IBCNRDV",196,0)
 ;;3|12|5|13|60.13;insured's sex
"RTN","IBCNRDV",197,0)
 ;;4|1|5|10|60.1;primary care provider
"RTN","IBCNRDV",198,0)
 ;;4|2|5|11|60.11;primary provider phone
"RTN","IBCNRDV",199,0)
 ;;4|5|5|15|60.15;pharmacy relationship code
"RTN","IBCNRDV",200,0)
 ;;4|6|5|16|60.16;pharmacy person code
"RTN","IBCNRDV",201,0)
 ;;5|1|7|1|62.01;patient id
"RTN","IBCNRDV",202,0)
 ;;355.3|2|4|1|40.01;is this a group policy
"RTN","IBCNRDV",203,0)
 ;;355.3|3|4|2|40.02;group name
"RTN","IBCNRDV",204,0)
 ;;355.3|4|4|3|40.03;group number
"RTN","IBCNRDV",205,0)
 ;;355.3|5|4|4|40.04;(is) utilization required
"RTN","IBCNRDV",206,0)
 ;;355.3|6|4|5|40.05;(is) pre-certification required
"RTN","IBCNRDV",207,0)
 ;;355.3|7|4|7|40.07;exclude pre-existing condition
"RTN","IBCNRDV",208,0)
 ;;355.3|8|4|8|40.08;benefits assignable
"RTN","IBCNRDV",209,0)
 ;;355.3|9|4|9|40.09;type of plan
"RTN","IBCNRDV",210,0)
 ;;355.3|12|4|6|40.06;ambulatory care certification
"RTN","IBCNRDV",211,0)
 ;;36|2|2|5|20.05;reimburse
"RTN","IBCNRDV",212,0)
 ;;36.11|1|3|1|21.01;street address line 1
"RTN","IBCNRDV",213,0)
 ;;36.11|2|3|2|21.02;street address line 2
"RTN","IBCNRDV",214,0)
 ;;36.11|3|3|3|21.03;street address line 3
"RTN","IBCNRDV",215,0)
 ;;36.11|4|3|4|21.04;city
"RTN","IBCNRDV",216,0)
 ;;36.11|5|3|5|21.05|S IBZ=$$EXTERNAL^DILFD(36,.115,"",IBZ)|N DIC,X,Y S DIC="^DIC(5,",X=IBZ,DIC(0)="OX" D ^DIC K:+Y<1 IBZ S:+Y>0 IBZ=+Y;state
"RTN","IBCNRDV",217,0)
 ;;36.11|6|3|6|21.06;zip code
"RTN","IBCNRDV",218,0)
 ;;36.13|1|2|2|20.02;phone number
"RTN","IBCNRDV",219,0)
 ;;36.13|2|2|3|20.03;billing phone number
"RTN","IBCNRDV",220,0)
 ;;36.13|3|2|4|20.04;precertification phone number
"RTN","IBCNRDV",221,0)
 ;;
"RTN","IBCNRDV",222,0)
 ;
"RTN","IBCNRDV",223,0)
SEND(IBH,IBX,IBICN,IBRPC) ; called to send off queries
"RTN","IBCNRDV",224,0)
 D EN1^XWB2HL7(.IBH,IBX,IBRPC,"",IBICN)
"RTN","IBCNRDV",225,0)
 Q
"RTN","IBCNRDV",226,0)
 ;
"RTN","IBCNRDV",227,0)
CHECK(IBR,IBH) ; called to check the return status of an RPC
"RTN","IBCNRDV",228,0)
 D RPCCHK^XWB2HL7(.IBR,IBH)
"RTN","IBCNRDV",229,0)
 Q
"RTN","IBCNRDV",230,0)
 ;
"RTN","IBCNRDV",231,0)
RETURN(IBR,IBH) ; called to get the return data and clear the broker
"RTN","IBCNRDV",232,0)
 N IBZ
"RTN","IBCNRDV",233,0)
 D RTNDATA^XWBDRPC(.IBR,IBH),CLEAR^XWBDRPC(.IBZ,IBH)
"RTN","IBCNRDV",234,0)
 Q
"RTN","IBCNRDV",235,0)
 ;
"RTN","IBCNRDV",236,0)
TASK ; queue off task job
"RTN","IBCNRDV",237,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK,ZTSAVE
"RTN","IBCNRDV",238,0)
 S ZTRTN="BACKGND^IBCNRDV",ZTDESC="Query Remote Facilities for Insurance",ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT),(ZTIO,ZTSAVE("DFN"),ZTSAVE("IBSAVE*"),ZTSAVE("IBTYPE"))="" D ^%ZTLOAD
"RTN","IBCNRDV",239,0)
 Q
"RTN","IBCNRDV",240,0)
 ;
"RTN","IBCNRDV",241,0)
TRKR(DFN,IBSAVEI,IBSAVEJ,IBDUZ) ; claims tracking entry
"RTN","IBCNRDV",242,0)
 N IBTYPE,IBT
"RTN","IBCNRDV",243,0)
 Q:$D(^IBT(356,"ARDV",DFN))  ; have already done recently
"RTN","IBCNRDV",244,0)
 Q:'$$TFL^IBARXMU(DFN,.IBT)  ; no remote facilities
"RTN","IBCNRDV",245,0)
 S IBTYPE="TRKR" D
"RTN","IBCNRDV",246,0)
 . I DUZ=.5 N DUZ S DUZ=+$G(IBDUZ),DUZ(2)=+$$SITE^VASITE
"RTN","IBCNRDV",247,0)
 . D TASK
"RTN","IBCNRDV",248,0)
 Q
"RTN","IBCNRDV",249,0)
 ;
"RTN","IBCNRDV",250,0)
ADM(DFN,IBSAVE1,IBSAVE2,IBSAVE3,IBSAVE4) ; admit event entry
"RTN","IBCNRDV",251,0)
 N IBTYPE S IBTYPE="ADM" D TASK
"RTN","IBCNRDV",252,0)
 Q
"RTN","IBCNRDV",253,0)
 ;
"RTN","IBCNRDV",254,0)
FILE(IBX) ; updates data into the log file
"RTN","IBCNRDV",255,0)
 ;IBX = number of insurance co's found
"RTN","IBCNRDV",256,0)
 N DIC,DA,DIE,IBM,DO,X,Y,IBZ,DR
"RTN","IBCNRDV",257,0)
 S IBM=$E($$DT^XLFDT,1,5)_"00",DA=+$O(^IBA(355.34,"B",IBM,0))
"RTN","IBCNRDV",258,0)
 I 'DA K DA L +^IBA(355.34,"B",IBM):10 S X=IBM,DIC="^IBA(355.34,",DIC(0)="F" D FILE^DICN S DA=+Y L -^IBA(355.34,"B",IBM)
"RTN","IBCNRDV",259,0)
 L +^IBA(355.34,DA):10
"RTN","IBCNRDV",260,0)
 S IBZ=^IBA(355.34,DA,0),DIE="^IBA(355.34,"
"RTN","IBCNRDV",261,0)
 S DR=".02///"_($P(IBZ,"^",2)+1)_";.03///"_($P(IBZ,"^",3)+IBX) D ^DIE
"RTN","IBCNRDV",262,0)
 L -^IBA(355.34,DA)
"RTN","IBCNRDV",263,0)
 Q
"RTN","IBCNRDV",264,0)
 ;
"RTN","IBCNRDV",265,0)
VALID(IBARY) ; Check for invalid entries in the incoming data
"RTN","IBCNRDV",266,0)
 ;Screen for Active Policy
"RTN","IBCNRDV",267,0)
 ;Screen for EXPIRATION DATE - Don't file expired policies
"RTN","IBCNRDV",268,0)
 N DATA,EXCLUDE,IBEFFDT,IBEXPDT,IBTOP,LN,TAG,VALID
"RTN","IBCNRDV",269,0)
 S VALID=1
"RTN","IBCNRDV",270,0)
 ; Check for expired policy
"RTN","IBCNRDV",271,0)
 S IBEXPDT=$G(IBARY(60.03))
"RTN","IBCNRDV",272,0)
 I IBEXPDT'="",($$FMDIFF^XLFDT(DT,IBEXPDT,1)>0) S VALID=0 G VALIDQ
"RTN","IBCNRDV",273,0)
 I IBEXPDT="" D  I 'VALID G VALIDQ
"RTN","IBCNRDV",274,0)
 . ;Use LAST VERIFIED
"RTN","IBCNRDV",275,0)
 . I $G(IBARY(.1)) D  Q
"RTN","IBCNRDV",276,0)
 .. I $$FMDIFF^XLFDT(DT,IBARY(.1),1)>730 S VALID=0 ;POLICY GREATER THAN 2 YEARS OLD.
"RTN","IBCNRDV",277,0)
 . ;Use Date Entered 
"RTN","IBCNRDV",278,0)
 . I $G(IBARY(.01)),$$FMDIFF^XLFDT(DT,$G(IBARY(.01)),1)>730 S VALID=0 ;POLICY GREATER THAN 2 YEARS OLD.
"RTN","IBCNRDV",279,0)
 ;
"RTN","IBCNRDV",280,0)
 ;Screen EFFECTIVE DATE - Cannot be blank or future
"RTN","IBCNRDV",281,0)
 S IBEFFDT=$G(IBARY(60.02))
"RTN","IBCNRDV",282,0)
 I IBEFFDT="" S VALID=0 G VALIDQ ;BLANK EFFECTIVE DATE IS INVALID
"RTN","IBCNRDV",283,0)
 I IBEFFDT'="",($$FMDIFF^XLFDT(DT,IBEFFDT,1)<0) S VALID=0  G VALIDQ ;FUTURE EFFECTIVE DATE IS INVALID
"RTN","IBCNRDV",284,0)
 ;
"RTN","IBCNRDV",285,0)
 ;Screen Type of Plan
"RTN","IBCNRDV",286,0)
 S EXCLUDE="^"
"RTN","IBCNRDV",287,0)
 F LN=2:1 S TAG="EXCTOP+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  S EXCLUDE=EXCLUDE_$$FIND1^DIC(355.1,"","X",DATA)_"^"
"RTN","IBCNRDV",288,0)
 S IBTOP=$G(IBARY(40.09))
"RTN","IBCNRDV",289,0)
 I IBTOP'="",$F(EXCLUDE,(U_IBTOP_U)) S VALID=0 G VALIDQ
"RTN","IBCNRDV",290,0)
 ;
"RTN","IBCNRDV",291,0)
 ; Re-Initialize variables for filing.
"RTN","IBCNRDV",292,0)
 S IBARY(.01)=DT    ;Set DATE ENTERED = today's date
"RTN","IBCNRDV",293,0)
 S IBARY(.02)=""    ;Set ENTERED BY = NULL
"RTN","IBCNRDV",294,0)
 S IBARY(.1)=""     ;Set DATE VERIFIED = NULL
"RTN","IBCNRDV",295,0)
 S IBARY(.11)=""    ;Set VERIFIED BY = NULL
"RTN","IBCNRDV",296,0)
 ;
"RTN","IBCNRDV",297,0)
VALIDQ ;
"RTN","IBCNRDV",298,0)
 I 'VALID K IBARY
"RTN","IBCNRDV",299,0)
 Q VALID
"RTN","IBCNRDV",300,0)
 ;
"RTN","IBCNRDV",301,0)
DUP(IBARY) ; Check for duplicate in the incoming data
"RTN","IBCNRDV",302,0)
 N IBDOB,IBGRP,IBINSNM,IBNAME,IBSUBID
"RTN","IBCNRDV",303,0)
 S IBINSNM=$G(IBARY(20.01)) I IBINSNM']"" S IBINSNM=" "
"RTN","IBCNRDV",304,0)
 S IBGRP=$G(IBARY(40.03)) I IBGRP']"" S IBGRP=" "
"RTN","IBCNRDV",305,0)
 S IBSUBID=$G(IBARY(60.04)) I IBSUBID']"" S IBSUBID=" "
"RTN","IBCNRDV",306,0)
 S IBNAME=$P($G(IBARY(60.07))," ") I IBNAME']"" S IBNAME=" "  ;Only match on LAST,FIRST
"RTN","IBCNRDV",307,0)
 S IBDOB=$G(IBARY(60.08)) I 'IBDOB S IBDOB=" "
"RTN","IBCNRDV",308,0)
 Q $D(^TMP("IBCNRDV",$J,IBINSNM,IBGRP,IBSUBID,IBNAME,IBDOB))
"RTN","IBCNRDV",309,0)
 ;
"RTN","IBCNRDV",310,0)
EXCTOP ;Plan Types to Exclude
"RTN","IBCNRDV",311,0)
 ;
"RTN","IBCNRDV",312,0)
 ;;ACCIDENT AND HEALTH INSURANCE
"RTN","IBCNRDV",313,0)
 ;;AUTOMOBILE
"RTN","IBCNRDV",314,0)
 ;;AVIATION TRIP INSURANCE
"RTN","IBCNRDV",315,0)
 ;;CATASTROPHIC INSURANCE
"RTN","IBCNRDV",316,0)
 ;;COINSURANCE
"RTN","IBCNRDV",317,0)
 ;;DUAL COVERAGE
"RTN","IBCNRDV",318,0)
 ;;HOSPITAL-MEDICAL INSURANCE
"RTN","IBCNRDV",319,0)
 ;;INCOME PROTECTION (INDEMNITY)
"RTN","IBCNRDV",320,0)
 ;;KEY-MAN HEALTH INSURANCE
"RTN","IBCNRDV",321,0)
 ;;MAJOR MEDICAL EXPENSE INSURANCE
"RTN","IBCNRDV",322,0)
 ;;MEDI-CAL
"RTN","IBCNRDV",323,0)
 ;;MEDICAID
"RTN","IBCNRDV",324,0)
 ;;MEDICARE/MEDICAID (MEDI-CAL)
"RTN","IBCNRDV",325,0)
 ;;NO-FAULT INSURANCE
"RTN","IBCNRDV",326,0)
 ;;QUALIFIED IMPAIRMENT INSURANCE
"RTN","IBCNRDV",327,0)
 ;;SPECIAL CLASS INSURANCE
"RTN","IBCNRDV",328,0)
 ;;SPECIAL RISK INSURANCE
"RTN","IBCNRDV",329,0)
 ;;SPECIFIED DISEASE INSURANCE
"RTN","IBCNRDV",330,0)
 ;;TORT FEASOR
"RTN","IBCNRDV",331,0)
 ;;WORKERS' COMPENSATION INSURANCE
"RTN","IBCNRDV",332,0)
 ;
"RTN","IBY593PR")
0^1^B17631808^n/a
"RTN","IBY593PR",1,0)
IBY593PR ;EDE/HN - Pre-Installation for IB patch 593 ; 17-APR-2017
"RTN","IBY593PR",2,0)
 ;;2.0;INTEGRATED BILLING;**593**;21-MAR-94;Build 31
"RTN","IBY593PR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY593PR",4,0)
 ;
"RTN","IBY593PR",5,0)
 ; post routine stuff is below
"RTN","IBY593PR",6,0)
POST ; POST ROUTINE(S)
"RTN","IBY593PR",7,0)
 N IBXPD,IBPRD,XPDIDTOT
"RTN","IBY593PR",8,0)
 S XPDIDTOT=3
"RTN","IBY593PR",9,0)
 ;
"RTN","IBY593PR",10,0)
 ; Determine if we're in a TEST or a PRODUCTION environment.
"RTN","IBY593PR",11,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","IBY593PR",12,0)
 ;
"RTN","IBY593PR",13,0)
 ; Reindex Patient File for fields 2.312,3 and 2.312,8
"RTN","IBY593PR",14,0)
 D REINDEX(1)
"RTN","IBY593PR",15,0)
 D PATIENT(2)
"RTN","IBY593PR",16,0)
 D ADDSOI(3)
"RTN","IBY593PR",17,0)
 D DONE
"RTN","IBY593PR",18,0)
 Q
"RTN","IBY593PR",19,0)
 ;
"RTN","IBY593PR",20,0)
DONE ; Displays the 'Done' message and finishes the progress bar
"RTN","IBY593PR",21,0)
 D MES^XPDUTL("")
"RTN","IBY593PR",22,0)
 D MES^XPDUTL("POST-Install Completed.")
"RTN","IBY593PR",23,0)
 Q
"RTN","IBY593PR",24,0)
 ;
"RTN","IBY593PR",25,0)
REINDEX(IBXPD) ; Run new indices.  This is needed for entries at site not in file coming across.
"RTN","IBY593PR",26,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY593PR",27,0)
 D MES^XPDUTL("-------------")
"RTN","IBY593PR",28,0)
 D MES^XPDUTL("Building new ACHI index in the background ")
"RTN","IBY593PR",29,0)
 N MSG,ZTDESC,ZTRTN,ZTQUEUED
"RTN","IBY593PR",30,0)
 S ZTQUEUED=""
"RTN","IBY593PR",31,0)
 S ZTDESC="IBCN CREATE ACHI INDEX"
"RTN","IBY593PR",32,0)
 S ZTRTN="XREF^IBCNERTC"
"RTN","IBY593PR",33,0)
 S MSG=$$TASK("NOW",ZTDESC,ZTRTN)
"RTN","IBY593PR",34,0)
 D MES^XPDUTL(MSG)
"RTN","IBY593PR",35,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY593PR",36,0)
 Q
"RTN","IBY593PR",37,0)
 ;
"RTN","IBY593PR",38,0)
PATIENT(IBXPD) ; Kick off Patient file update of Covered by Health Insurance flag (2.3192)
"RTN","IBY593PR",39,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY593PR",40,0)
 D MES^XPDUTL("-------------")
"RTN","IBY593PR",41,0)
 D MES^XPDUTL("Tasking Covered by Health Insurance update ... ")
"RTN","IBY593PR",42,0)
 N MSG,ZTDESC,ZTRTN,ZTQUEUED
"RTN","IBY593PR",43,0)
 S ZTQUEUED=1
"RTN","IBY593PR",44,0)
 S ZTDESC="IBCN COVERED BY HEALTH INSURANCE FLAG UPDATE"
"RTN","IBY593PR",45,0)
 S ZTRTN="UPATF^IBCNERTC"
"RTN","IBY593PR",46,0)
 S MSG=$$TASK("T@2100",ZTDESC,ZTRTN)
"RTN","IBY593PR",47,0)
 D MES^XPDUTL(MSG)
"RTN","IBY593PR",48,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY593PR",49,0)
 Q
"RTN","IBY593PR",50,0)
 ;
"RTN","IBY593PR",51,0)
ADDSOI(IBXPD) ; Add new Source of Information.
"RTN","IBY593PR",52,0)
 N IBLN,IBPCE,IBDATA,IBERR,IBIEN,IBSTR
"RTN","IBY593PR",53,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY593PR",54,0)
 D MES^XPDUTL("-------------")
"RTN","IBY593PR",55,0)
 D MES^XPDUTL("Adding New Source of Information Codes ... ")
"RTN","IBY593PR",56,0)
 F IBLN=2:1 S IBSTR=$P($T(EN35512+IBLN),";;",2) Q:IBSTR=""  D
"RTN","IBY593PR",57,0)
 . F IBPCE=1:1:3 S IBDATA(IBPCE/100)=$P(IBSTR,U,IBPCE)
"RTN","IBY593PR",58,0)
 . I $D(^IBE(355.12,"C",IBDATA(.02))) D  Q
"RTN","IBY593PR",59,0)
 .. D MES^XPDUTL("  "_IBDATA(.02)_" ALEADY EXISTS IN THE SOURCE OF INFORMATION TABLE (#355.12)") Q
"RTN","IBY593PR",60,0)
 . S IBIEN=$$ADD^IBDFDBS(355.12,,.IBDATA,.IBERR)
"RTN","IBY593PR",61,0)
 . I IBERR D  Q
"RTN","IBY593PR",62,0)
 .. D BMES^XPDUTL("*** ERROR ADDING "_IBDATA(.02)_" CODE TO THE SOURCE OF INFORMATION TABLE (#355.12) ***")
"RTN","IBY593PR",63,0)
 . D BMES^XPDUTL("  "_$$GET1^DIQ(355.12,IBIEN_",",.02)_" CODE ADDED TO THE SOURCE OF INFORMATION TABLE (#355.12)")
"RTN","IBY593PR",64,0)
 D MES^XPDUTL("STEP "_IBXPD_" of "_XPDIDTOT_" COMPLETE")
"RTN","IBY593PR",65,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY593PR",66,0)
 Q
"RTN","IBY593PR",67,0)
 ;
"RTN","IBY593PR",68,0)
EN35512 ; Add Source of Information Codes
"RTN","IBY593PR",69,0)
 ;
"RTN","IBY593PR",70,0)
 ;;13^INSURANCE IMPORT^INSPT
"RTN","IBY593PR",71,0)
 ;;14^PURCHASED CARE CHOICE^PCC
"RTN","IBY593PR",72,0)
 ;;15^PURCHASED CARE FEE-BASIS^PCFB
"RTN","IBY593PR",73,0)
 ;;16^PURCHASED CARE OTHER^PCOTR
"RTN","IBY593PR",74,0)
 ;;17^INSURANCE INTAKE^INSIN
"RTN","IBY593PR",75,0)
 ;;18^INSURANCE VERIFICATION^INSVR
"RTN","IBY593PR",76,0)
 ;;19^VETERAN APPT REQUEST^VAR
"RTN","IBY593PR",77,0)
 ;
"RTN","IBY593PR",78,0)
 Q
"RTN","IBY593PR",79,0)
 ;
"RTN","IBY593PR",80,0)
TASK(X,ZTDESC,ZTRTN) ;bypass for queued task
"RTN","IBY593PR",81,0)
 N Y,IDT,XDT,TSK,MSG,ZTIO,ZTSK
"RTN","IBY593PR",82,0)
 S %DT="FR"
"RTN","IBY593PR",83,0)
 D ^%DT
"RTN","IBY593PR",84,0)
 S IDT=Y D DD^%DT S XDT=Y
"RTN","IBY593PR",85,0)
 ;
"RTN","IBY593PR",86,0)
 ;Check if task already scheduled for date/time
"RTN","IBY593PR",87,0)
 S TSK=$$GETTASK(IDT)
"RTN","IBY593PR",88,0)
 I TSK D  G TASKQ
"RTN","IBY593PR",89,0)
 . S Y=$P(TSK,U,2) D DD^%DT
"RTN","IBY593PR",90,0)
 . S MSG=" Task (#"_+TSK_") already scheduled to run on "_Y
"RTN","IBY593PR",91,0)
 ;
"RTN","IBY593PR",92,0)
 ;Schedule the task
"RTN","IBY593PR",93,0)
 S TSK=$$SCHED(IDT)
"RTN","IBY593PR",94,0)
 ;
"RTN","IBY593PR",95,0)
 ;Check for scheduling problem
"RTN","IBY593PR",96,0)
 I '$G(TSK) S MSG=" Task Could Not Be Scheduled" G TASKQ
"RTN","IBY593PR",97,0)
 ;
"RTN","IBY593PR",98,0)
 ;Send successful schedule message
"RTN","IBY593PR",99,0)
 S MSG=" Update Covered by Health Insurance Flag Scheduled for "_XDT
"RTN","IBY593PR",100,0)
 ;
"RTN","IBY593PR",101,0)
TASKQ ;
"RTN","IBY593PR",102,0)
 Q MSG
"RTN","IBY593PR",103,0)
 ;
"RTN","IBY593PR",104,0)
GETTASK(IDT) ;
"RTN","IBY593PR",105,0)
 N TASK,TASKNO,TDT,XUSUCI,Y,ZTSK0
"RTN","IBY593PR",106,0)
 ;
"RTN","IBY593PR",107,0)
 ;Retrieve UCI
"RTN","IBY593PR",108,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBY593PR",109,0)
 ;       
"RTN","IBY593PR",110,0)
 S (TASK,TDT)=0,TASKNO=""
"RTN","IBY593PR",111,0)
 F  S TASK=$O(^%ZTSK(TASK)) Q:'TASK  D  Q:TASKNO
"RTN","IBY593PR",112,0)
 .I $G(^%ZTSK(TASK,.03))[ZTDESC D
"RTN","IBY593PR",113,0)
 ..S ZTSK0=$G(^%ZTSK(TASK,0))
"RTN","IBY593PR",114,0)
 ..;
"RTN","IBY593PR",115,0)
 ..;Exclude tasks scheduled by TaskMan
"RTN","IBY593PR",116,0)
 ..Q:ZTSK0["ZTSK^XQ1"
"RTN","IBY593PR",117,0)
 ..;
"RTN","IBY593PR",118,0)
 ..;Exclude tasks in other ucis
"RTN","IBY593PR",119,0)
 ..Q:(($P(ZTSK0,U,11)_","_$P(ZTSK0,U,12))'=XUSUCI)
"RTN","IBY593PR",120,0)
 ..;
"RTN","IBY593PR",121,0)
 ..;Check for correct date and time
"RTN","IBY593PR",122,0)
 ..S TDT=$$HTFM^XLFDT($P(ZTSK0,"^",6))
"RTN","IBY593PR",123,0)
 ..;I TDT=IDT S TASKNO=TASK
"RTN","IBY593PR",124,0)
 Q TASKNO_U_TDT
"RTN","IBY593PR",125,0)
 ;
"RTN","IBY593PR",126,0)
SCHED(ZTDTH) ;
"RTN","IBY593PR",127,0)
 N XUSUCI,ZTIO,ZTSK
"RTN","IBY593PR",128,0)
 ;Retrieve UCI
"RTN","IBY593PR",129,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBY593PR",130,0)
 S ZTIO=""
"RTN","IBY593PR",131,0)
 D ^%ZTLOAD
"RTN","IBY593PR",132,0)
 Q ZTSK
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"VER")
8.0^22.2
"^DD",2,2.312,3,0)
INSURANCE EXPIRATION DATE^DXa^^0;4^S %DT="E" D ^%DT S X=Y K:((Y<1)!(X<$P($G(^DPT(DA(1),.312,DA,0)),"^",8))) X
"^DD",2,2.312,3,1,0)
^.1
"^DD",2,2.312,3,1,1,0)
2.312^ADGRU3123^MUMPS
"^DD",2,2.312,3,1,1,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,3,1,1,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,3,1,1,"%D",0)
^^2^2^3000420^
"^DD",2,2.312,3,1,1,"%D",1,0)
RAI/MDS: field monitored for changes.
"^DD",2,2.312,3,1,1,"%D",2,0)
Cross reference also needed to force filing so input transform works.
"^DD",2,2.312,3,1,1,"DT")
3000420
"^DD",2,2.312,3,1,2,0)
2.312^AENR3^MUMPS
"^DD",2,2.312,3,1,2,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,3,1,2,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,3,1,2,3)
 DO NOT DELETE
"^DD",2,2.312,3,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,3,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,3,1,2,"%D",2,0)
enrollment.
"^DD",2,2.312,3,1,2,"DT")
3050913
"^DD",2,2.312,3,3)

"^DD",2,2.312,3,21,0)
^^2^2^2930820^^^^
"^DD",2,2.312,3,21,1,0)
If this insurance policy under which this applicant is covered expires on
"^DD",2,2.312,3,21,2,0)
a specified date enter that date, otherwise, leave this field blank.
"^DD",2,2.312,3,"AUDIT")
y
"^DD",2,2.312,3,"DT")
3170517
"^DD",2,2.312,8,0)
EFFECTIVE DATE OF POLICY^DX^^0;8^S %DT="E" D ^%DT S X=Y K:(Y<1) X I $D(X),$P($G(^DPT(DA(1),.312,DA,0)),"^",4)'="",X>$P($G(^DPT(DA(1),.312,DA,0)),"^",4) K X
"^DD",2,2.312,8,1,0)
^.1
"^DD",2,2.312,8,1,1,0)
2.312^ADGRU3128^MUMPS
"^DD",2,2.312,8,1,1,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,8,1,1,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,8,1,1,"%D",0)
^^2^2^3000420^
"^DD",2,2.312,8,1,1,"%D",1,0)
RAI/MDS: field monitored for changes.
"^DD",2,2.312,8,1,1,"%D",2,0)
Cross reference also needed to force filing so input transform works.
"^DD",2,2.312,8,1,1,"DT")
3000420
"^DD",2,2.312,8,1,2,0)
2.312^AENR8^MUMPS
"^DD",2,2.312,8,1,2,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,8,1,2,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,8,1,2,3)
 DO NOT DELETE
"^DD",2,2.312,8,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,8,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,8,1,2,"%D",2,0)
enrollment.
"^DD",2,2.312,8,1,2,"DT")
3050913
"^DD",2,2.312,8,3)
ANSWER MUST BE 3-10 CHARACTERS IN LENGTH
"^DD",2,2.312,8,21,0)
^^2^2^2930823^^
"^DD",2,2.312,8,21,1,0)
Enter the date that this insurance policy initially went into effect (the
"^DD",2,2.312,8,21,2,0)
date the patient acquired this policy).
"^DD",2,2.312,8,"DT")
3170517
"BLD",10511,6)
^548
**END**
**END**

