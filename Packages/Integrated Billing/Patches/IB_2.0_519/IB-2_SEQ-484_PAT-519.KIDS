Released IB*2*519 SEQ #484
Extracted from mail message
**KIDS**:IB*2.0*519^

**INSTALL NAME**
IB*2.0*519
"BLD",9338,0)
IB*2.0*519^INTEGRATED BILLING^0^3141008^y
"BLD",9338,1,0)
^^21^21^3140325^
"BLD",9338,1,1,0)
The Health Plan Identifier (HPID) project implements a new national 
"BLD",9338,1,2,0)
standard of having a single identifier to use on electronic transmissions
"BLD",9338,1,3,0)
pertaining to health care. All entities that are financially responsible
"BLD",9338,1,4,0)
for care are assigned a HPID or Other Entity Identifier (OEID), used for
"BLD",9338,1,5,0)
entities that aren't traditional health plans. This new standard increases
"BLD",9338,1,6,0)
interoperability by replacing clearinghouse-specific identifiers for 
"BLD",9338,1,7,0)
health plans.
"BLD",9338,1,8,0)
 
"BLD",9338,1,9,0)
This patch updates the Integrated Billing (IB) package to enable it to
"BLD",9338,1,10,0)
store these new HPIDs and OEIDs, and to associate the entries in the local
"BLD",9338,1,11,0)
Insurance Company file (#36) with a new National Insurance File (NIF),
"BLD",9338,1,12,0)
owned by the Financial Services Center (FSC), which will centrally manage
"BLD",9338,1,13,0)
distribution of HPID/OEID data.
"BLD",9338,1,14,0)
 
"BLD",9338,1,15,0)
In order to accomplish this, this patch introduces a new HL7 interface
"BLD",9338,1,16,0)
for exchanging insurance information with the NIF. Included with this new
"BLD",9338,1,17,0)
interface is a logging function which generates (periodically purged)
"BLD",9338,1,18,0)
transaction records, allowing troubleshooting.
"BLD",9338,1,19,0)
 
"BLD",9338,1,20,0)
When installed, this patch will create a flat-file extract that can be
"BLD",9338,1,21,0)
sent to the FSC in order to assist in setup of the NIF.
"BLD",9338,4,0)
^9.64PA^364.6^6
"BLD",9338,4,36,0)
36
"BLD",9338,4,36,2,0)
^9.641^36^1
"BLD",9338,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",9338,4,36,2,36,1,0)
^9.6411^8.04^4
"BLD",9338,4,36,2,36,1,8.01,0)
HPID/OEID
"BLD",9338,4,36,2,36,1,8.02,0)
CHP/SHP
"BLD",9338,4,36,2,36,1,8.03,0)
PARENT CHP (HPID)
"BLD",9338,4,36,2,36,1,8.04,0)
NIF ID
"BLD",9338,4,36,222)
y^y^p^^^^n^^n
"BLD",9338,4,36,224)

"BLD",9338,4,350.9,0)
350.9
"BLD",9338,4,350.9,2,0)
^9.641^350.9^1
"BLD",9338,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",9338,4,350.9,2,350.9,1,0)
^9.6411^70.01^1
"BLD",9338,4,350.9,2,350.9,1,70.01,0)
HPID/OEID ACTIVE?
"BLD",9338,4,350.9,222)
y^y^p^^^^n^^n
"BLD",9338,4,350.9,224)

"BLD",9338,4,364.6,0)
364.6
"BLD",9338,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",9338,4,364.6,224)
I Y=1487
"BLD",9338,4,367,0)
367
"BLD",9338,4,367,222)
y^y^f^^^^n
"BLD",9338,4,367.1,0)
367.1
"BLD",9338,4,367.1,222)
y^y^f^^^^n
"BLD",9338,4,367.11,0)
367.11
"BLD",9338,4,367.11,222)
y^y^f^^n^^y^o^n
"BLD",9338,4,"APDD",36,36)

"BLD",9338,4,"APDD",36,36,8.01)

"BLD",9338,4,"APDD",36,36,8.02)

"BLD",9338,4,"APDD",36,36,8.03)

"BLD",9338,4,"APDD",36,36,8.04)

"BLD",9338,4,"APDD",350.9,350.9)

"BLD",9338,4,"APDD",350.9,350.9,70.01)

"BLD",9338,4,"B",36,36)

"BLD",9338,4,"B",350.9,350.9)

"BLD",9338,4,"B",364.6,364.6)

"BLD",9338,4,"B",367,367)

"BLD",9338,4,"B",367.1,367.1)

"BLD",9338,4,"B",367.11,367.11)

"BLD",9338,6)
13^
"BLD",9338,6.3)
56
"BLD",9338,"ABPKG")
n
"BLD",9338,"INID")
^n
"BLD",9338,"INIT")
IBY519PO
"BLD",9338,"KRN",0)
^9.67PA^779.2^20
"BLD",9338,"KRN",.4,0)
.4
"BLD",9338,"KRN",.401,0)
.401
"BLD",9338,"KRN",.402,0)
.402
"BLD",9338,"KRN",.403,0)
.403
"BLD",9338,"KRN",.5,0)
.5
"BLD",9338,"KRN",.84,0)
.84
"BLD",9338,"KRN",3.6,0)
3.6
"BLD",9338,"KRN",3.8,0)
3.8
"BLD",9338,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",9338,"KRN",3.8,"NM",1,0)
NIFQRY^^0
"BLD",9338,"KRN",3.8,"NM","B","NIFQRY",1)

"BLD",9338,"KRN",9.2,0)
9.2
"BLD",9338,"KRN",9.8,0)
9.8
"BLD",9338,"KRN",9.8,"NM",0)
^9.68A^18^16
"BLD",9338,"KRN",9.8,"NM",1,0)
IBY519PO^^0^B40291795
"BLD",9338,"KRN",9.8,"NM",2,0)
IBAMTC^^0^B26484499
"BLD",9338,"KRN",9.8,"NM",3,0)
IBCNHUT1^^0^B19672959
"BLD",9338,"KRN",9.8,"NM",4,0)
IBCNSC01^^0^B59075221
"BLD",9338,"KRN",9.8,"NM",5,0)
IBCNHUT2^^0^B47011114
"BLD",9338,"KRN",9.8,"NM",6,0)
IBCNSJ3^^0^B20256950
"BLD",9338,"KRN",9.8,"NM",7,0)
IBCNSC1^^0^B90495985
"BLD",9338,"KRN",9.8,"NM",8,0)
IBCNHHLO^^0^B10205311
"BLD",9338,"KRN",9.8,"NM",9,0)
IBCNHHLI^^0^B10645426
"BLD",9338,"KRN",9.8,"NM",11,0)
IBCNERPE^^0^B70614398
"BLD",9338,"KRN",9.8,"NM",12,0)
IBCNEHL4^^0^B176214857
"BLD",9338,"KRN",9.8,"NM",14,0)
IBCNBLL^^0^B139954762
"BLD",9338,"KRN",9.8,"NM",15,0)
IBCNBMN^^0^B8591639
"BLD",9338,"KRN",9.8,"NM",16,0)
IBCNBLE^^0^B108261556
"BLD",9338,"KRN",9.8,"NM",17,0)
IBCEU3^^0^B106673839
"BLD",9338,"KRN",9.8,"NM",18,0)
IBCNHSRV^^0^B2517223
"BLD",9338,"KRN",9.8,"NM","B","IBAMTC",2)

"BLD",9338,"KRN",9.8,"NM","B","IBCEU3",17)

"BLD",9338,"KRN",9.8,"NM","B","IBCNBLE",16)

"BLD",9338,"KRN",9.8,"NM","B","IBCNBLL",14)

"BLD",9338,"KRN",9.8,"NM","B","IBCNBMN",15)

"BLD",9338,"KRN",9.8,"NM","B","IBCNEHL4",12)

"BLD",9338,"KRN",9.8,"NM","B","IBCNERPE",11)

"BLD",9338,"KRN",9.8,"NM","B","IBCNHHLI",9)

"BLD",9338,"KRN",9.8,"NM","B","IBCNHHLO",8)

"BLD",9338,"KRN",9.8,"NM","B","IBCNHSRV",18)

"BLD",9338,"KRN",9.8,"NM","B","IBCNHUT1",3)

"BLD",9338,"KRN",9.8,"NM","B","IBCNHUT2",5)

"BLD",9338,"KRN",9.8,"NM","B","IBCNSC01",4)

"BLD",9338,"KRN",9.8,"NM","B","IBCNSC1",7)

"BLD",9338,"KRN",9.8,"NM","B","IBCNSJ3",6)

"BLD",9338,"KRN",9.8,"NM","B","IBY519PO",1)

"BLD",9338,"KRN",19,0)
19
"BLD",9338,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",9338,"KRN",19,"NM",1,0)
IBCNH HPID NIF BATCH QUERY^^0
"BLD",9338,"KRN",19,"NM","B","IBCNH HPID NIF BATCH QUERY",1)

"BLD",9338,"KRN",19.1,0)
19.1
"BLD",9338,"KRN",101,0)
101
"BLD",9338,"KRN",101,"NM",0)
^9.68A^4^4
"BLD",9338,"KRN",101,"NM",1,0)
IB NIF QUERY DRIVER^^0
"BLD",9338,"KRN",101,"NM",2,0)
IB NIF QUERY SUBSCRIPTION^^0
"BLD",9338,"KRN",101,"NM",3,0)
IB NIF RESPONSE DRIVER^^0
"BLD",9338,"KRN",101,"NM",4,0)
IB NIF RESPONSE SUBSCRIPTION^^0
"BLD",9338,"KRN",101,"NM","B","IB NIF QUERY DRIVER",1)

"BLD",9338,"KRN",101,"NM","B","IB NIF QUERY SUBSCRIPTION",2)

"BLD",9338,"KRN",101,"NM","B","IB NIF RESPONSE DRIVER",3)

"BLD",9338,"KRN",101,"NM","B","IB NIF RESPONSE SUBSCRIPTION",4)

"BLD",9338,"KRN",409.61,0)
409.61
"BLD",9338,"KRN",771,0)
771
"BLD",9338,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",9338,"KRN",771,"NM",1,0)
NIF VISTA^^0
"BLD",9338,"KRN",771,"NM",2,0)
NIF FSC^^0
"BLD",9338,"KRN",771,"NM","B","NIF FSC",2)

"BLD",9338,"KRN",771,"NM","B","NIF VISTA",1)

"BLD",9338,"KRN",779.2,0)
779.2
"BLD",9338,"KRN",870,0)
870
"BLD",9338,"KRN",870,"NM",0)
^9.68A^1^1
"BLD",9338,"KRN",870,"NM",1,0)
IB NIF TCP^^0
"BLD",9338,"KRN",870,"NM","B","IB NIF TCP",1)

"BLD",9338,"KRN",8989.51,0)
8989.51
"BLD",9338,"KRN",8989.52,0)
8989.52
"BLD",9338,"KRN",8994,0)
8994
"BLD",9338,"KRN","B",.4,.4)

"BLD",9338,"KRN","B",.401,.401)

"BLD",9338,"KRN","B",.402,.402)

"BLD",9338,"KRN","B",.403,.403)

"BLD",9338,"KRN","B",.5,.5)

"BLD",9338,"KRN","B",.84,.84)

"BLD",9338,"KRN","B",3.6,3.6)

"BLD",9338,"KRN","B",3.8,3.8)

"BLD",9338,"KRN","B",9.2,9.2)

"BLD",9338,"KRN","B",9.8,9.8)

"BLD",9338,"KRN","B",19,19)

"BLD",9338,"KRN","B",19.1,19.1)

"BLD",9338,"KRN","B",101,101)

"BLD",9338,"KRN","B",409.61,409.61)

"BLD",9338,"KRN","B",771,771)

"BLD",9338,"KRN","B",779.2,779.2)

"BLD",9338,"KRN","B",870,870)

"BLD",9338,"KRN","B",8989.51,8989.51)

"BLD",9338,"KRN","B",8989.52,8989.52)

"BLD",9338,"KRN","B",8994,8994)

"BLD",9338,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9338,"QUES",0)
^9.62^^
"BLD",9338,"REQB",0)
^9.611^9^7
"BLD",9338,"REQB",2,0)
IB*2.0*400^1
"BLD",9338,"REQB",4,0)
IB*2.0*457^1
"BLD",9338,"REQB",5,0)
IB*2.0*494^1
"BLD",9338,"REQB",6,0)
IB*2.0*497^1
"BLD",9338,"REQB",7,0)
IB*2.0*506^1
"BLD",9338,"REQB",8,0)
IB*2.0*211^1
"BLD",9338,"REQB",9,0)
IB*2.0*488^1
"BLD",9338,"REQB","B","IB*2.0*211",8)

"BLD",9338,"REQB","B","IB*2.0*400",2)

"BLD",9338,"REQB","B","IB*2.0*457",4)

"BLD",9338,"REQB","B","IB*2.0*488",9)

"BLD",9338,"REQB","B","IB*2.0*494",5)

"BLD",9338,"REQB","B","IB*2.0*497",6)

"BLD",9338,"REQB","B","IB*2.0*506",7)

"DATA",364.6,1487,0)
2^N^^1^44^^1^50^8^CHARGES (BX-24F)
"DATA",367.11,1,0)
EDI ID NUMBER - PROF^ID Number for professional claim transmissions
"DATA",367.11,2,0)
EDI ID NUMBER - INST^ID Number for institutional claim transmissions
"DATA",367.11,3,0)
EDI PROF SECONDARY ID(1)^Secondary payer ID number
"DATA",367.11,4,0)
EDI PROF SECONDARY ID(2)^Secondary payer ID number
"DATA",367.11,5,0)
EDI INST SECONDARY ID(1)^Secondary payer ID number
"DATA",367.11,6,0)
EDI INST SECONDARY ID(2)^Secondary payer ID number
"DATA",367.11,7,0)
VA NATIONAL ID^Unique Insurance Payer Identifier
"DATA",367.11,8,0)
NIF ID^Entry number in the FSC NIF (National Insurance File)
"DATA",367.11,9,0)
HPID/OEID^Unique Identifier for each Insurance Company
"DATA",367.11,10,0)
VISTA UNIQUE ID^Vista Station Number_"."_Insurance Company ien
"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^y^p^^^^n^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,8.01)

"FIA",36,36,8.02)

"FIA",36,36,8.03)

"FIA",36,36,8.04)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,70.01)

"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I Y=1487
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",367)
HPID/OEID RESPONSE
"FIA",367,0)
^IBCNH(367,
"FIA",367,0,0)
367O
"FIA",367,0,1)
y^y^f^^^^n
"FIA",367,0,10)

"FIA",367,0,11)

"FIA",367,0,"RLRO")

"FIA",367,0,"VR")
2.0^IB
"FIA",367,367)
0
"FIA",367,367.01)
0
"FIA",367.1)
HPID/OEID TRANSMISSION QUEUE
"FIA",367.1,0)
^IBCNH(367.1,
"FIA",367.1,0,0)
367.1O
"FIA",367.1,0,1)
y^y^f^^^^n
"FIA",367.1,0,10)

"FIA",367.1,0,11)

"FIA",367.1,0,"RLRO")

"FIA",367.1,0,"VR")
2.0^IB
"FIA",367.1,367.1)
0
"FIA",367.1,367.12)
0
"FIA",367.11)
INSURANCE COMPANY ID TYPE
"FIA",367.11,0)
^IBE(367.11,
"FIA",367.11,0,0)
367.11O
"FIA",367.11,0,1)
y^y^f^^n^^y^o^n
"FIA",367.11,0,10)

"FIA",367.11,0,11)

"FIA",367.11,0,"RLRO")

"FIA",367.11,0,"VR")
2.0^IB
"FIA",367.11,367.11)
0
"INIT")
IBY519PO
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"C",0)
364.6^C^Field name lookup^R^^F^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"C",1)
S ^IBA(364.6,"C",$E(X,1,40),DA)=""
"IX",364.6,364.6,"C",2)
K ^IBA(364.6,"C",$E(X,1,40),DA)
"IX",364.6,364.6,"C",2.5)
K ^IBA(364.6,"C")
"IX",364.6,364.6,"C",11.1,0)
^.114IA^1^1
"IX",364.6,364.6,"C",11.1,1,0)
1^F^364.6^.1^40^1^F
"IX",364.6,364.6,"C",11.1,1,2)
S X=$$UP^XLFSTR(X)
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"KRN",3.8,6257,-1)
0^1
"KRN",3.8,6257,0)
NIFQRY^PU^n^^^^
"KRN",3.8,6257,2,0)
^3.801^3^3^3141003^^^
"KRN",3.8,6257,2,1,0)
The mail group to receive requests from the FSC or eBusiness Team to 
"KRN",3.8,6257,2,2,0)
activate communication with the NIF, beginning with a batch query to 
"KRN",3.8,6257,2,3,0)
catch the system up to the current state of the NIF.
"KRN",3.8,6257,3)

"KRN",19,13817,-1)
0^1
"KRN",19,13817,0)
IBCNH HPID NIF BATCH QUERY^Send HPID/OEID Batch Queries^^S^^^^^^^n^INTEGRATED BILLING
"KRN",19,13817,1,0)
^19.06^11^11^3141003^^^^
"KRN",19,13817,1,1,0)
This option does not appear on any VistA user menu and is for one-time
"KRN",19,13817,1,2,0)
use with IB*2.0*519.  Once the data extract from this patch has been
"KRN",19,13817,1,3,0)
received and processed at the NIF, a VistA user will run this option to
"KRN",19,13817,1,4,0)
retrieve the NIF ID's and HPID/OEID data from the NIF into their VISTA
"KRN",19,13817,1,5,0)
system.  This option will kick off one HL7 message per insurance company.
"KRN",19,13817,1,6,0)
DO NOT run this option unless instructed to do so by FSC and DO NOT run
"KRN",19,13817,1,7,0)
this option more than once.
"KRN",19,13817,1,8,0)
Running this option will set the HPID/OEID Active? flag in the IB SITE
"KRN",19,13817,1,9,0)
PARAMETERS file to 1 for Active which will indicate to Vista that the
"KRN",19,13817,1,10,0)
NIF is ready to send and receive Insurance Company HL7 updates to and
"KRN",19,13817,1,11,0)
from your site.
"KRN",19,13817,25)
SERVER^IBCNHSRV
"KRN",19,13817,220)
^R^^N^Y^N
"KRN",19,13817,"U")
SEND HPID/OEID BATCH QUERIES
"KRN",101,4584,-1)
0^1
"KRN",101,4584,0)
IB NIF QUERY DRIVER^^^E^^^^^^^^
"KRN",101,4584,770)
NIF VISTA^^QBP^Q11^164^^^AL^NE^2.5.1^
"KRN",101,4584,775,0)
^101.0775PA^1^1
"KRN",101,4584,775,1,0)
4585
"KRN",101,4584,775,1,"^")
IB NIF QUERY SUBSCRIPTION
"KRN",101,4585,-1)
0^2
"KRN",101,4585,0)
IB NIF QUERY SUBSCRIPTION^^^S^^^^^^^^
"KRN",101,4585,770)
^NIF FSC^^K11^^^IB NIF TCP^^^^RSP
"KRN",101,4585,771)
D RCV^IBCNHHLI
"KRN",101,4585,773)
1^1^0
"KRN",101,4586,-1)
0^4
"KRN",101,4586,0)
IB NIF RESPONSE SUBSCRIPTION^^^S^^^^^^^^
"KRN",101,4586,770)
^NIF VISTA^^K11^^^IB NIF TCP^^^^RSP
"KRN",101,4586,771)
D RCV^IBCNHHLI
"KRN",101,4586,773)
1^1^0^^
"KRN",101,4587,-1)
0^3
"KRN",101,4587,0)
IB NIF RESPONSE DRIVER^^^E^^^^^^^^
"KRN",101,4587,770)
NIF FSC^^RSP^K11^182^^^AL^AL^2.5.1^
"KRN",101,4587,775,0)
^101.0775PA^1^1
"KRN",101,4587,775,1,0)
4586
"KRN",101,4587,775,1,"^")
IB NIF RESPONSE SUBSCRIPTION
"KRN",771,214,-1)
0^1
"KRN",771,214,0)
NIF VISTA^a^^^^^USA
"KRN",771,214,"EC")
^~\&
"KRN",771,214,"FS")
|
"KRN",771,215,-1)
0^2
"KRN",771,215,0)
NIF FSC^a^^^^^USA
"KRN",771,215,"EC")
^~\&
"KRN",771,215,"FS")
|
"KRN",870,135,-1)
0^1
"KRN",870,135,0)
IB NIF TCP^^TCP^^^^^ECOMMLLPTST.FSC.DOMAIN.EXT^^^^^^^^^^^^^10
"KRN",870,135,200)
^^254^^120^^^^^I
"KRN",870,135,400)
^9346^C^N^^^N^^
"MBREQ")
0
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",13,870)
870;13;1;;HLLL^XPDTA1;;HLLLE^XPDIA1;;;HLLLDEL^XPDIA1(%)
"ORD",13,870,0)
HL LOGICAL LINK
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
519^3141008^101107
"PKG",200,22,1,"PAH",1,1,0)
^^21^21^3141008
"PKG",200,22,1,"PAH",1,1,1,0)
The Health Plan Identifier (HPID) project implements a new national 
"PKG",200,22,1,"PAH",1,1,2,0)
standard of having a single identifier to use on electronic transmissions
"PKG",200,22,1,"PAH",1,1,3,0)
pertaining to health care. All entities that are financially responsible
"PKG",200,22,1,"PAH",1,1,4,0)
for care are assigned a HPID or Other Entity Identifier (OEID), used for
"PKG",200,22,1,"PAH",1,1,5,0)
entities that aren't traditional health plans. This new standard increases
"PKG",200,22,1,"PAH",1,1,6,0)
interoperability by replacing clearinghouse-specific identifiers for 
"PKG",200,22,1,"PAH",1,1,7,0)
health plans.
"PKG",200,22,1,"PAH",1,1,8,0)
 
"PKG",200,22,1,"PAH",1,1,9,0)
This patch updates the Integrated Billing (IB) package to enable it to
"PKG",200,22,1,"PAH",1,1,10,0)
store these new HPIDs and OEIDs, and to associate the entries in the local
"PKG",200,22,1,"PAH",1,1,11,0)
Insurance Company file (#36) with a new National Insurance File (NIF),
"PKG",200,22,1,"PAH",1,1,12,0)
owned by the Financial Services Center (FSC), which will centrally manage
"PKG",200,22,1,"PAH",1,1,13,0)
distribution of HPID/OEID data.
"PKG",200,22,1,"PAH",1,1,14,0)
 
"PKG",200,22,1,"PAH",1,1,15,0)
In order to accomplish this, this patch introduces a new HL7 interface
"PKG",200,22,1,"PAH",1,1,16,0)
for exchanging insurance information with the NIF. Included with this new
"PKG",200,22,1,"PAH",1,1,17,0)
interface is a logging function which generates (periodically purged)
"PKG",200,22,1,"PAH",1,1,18,0)
transaction records, allowing troubleshooting.
"PKG",200,22,1,"PAH",1,1,19,0)
 
"PKG",200,22,1,"PAH",1,1,20,0)
When installed, this patch will create a flat-file extract that can be
"PKG",200,22,1,"PAH",1,1,21,0)
sent to the FSC in order to assist in setup of the NIF.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","IBAMTC")
0^2^B26484499^B26047773
"RTN","IBAMTC",1,0)
IBAMTC ;ALB/CPM-MEANS TEST NIGHTLY COMPILATION JOB ;09-OCT-91
"RTN","IBAMTC",2,0)
V ;;2.0;INTEGRATED BILLING;**34,52,70,93,100,118,115,132,150,153,137,176,215,275,321,312,457,519**;21-MAR-94;Build 56
"RTN","IBAMTC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBAMTC",4,0)
 ;
"RTN","IBAMTC",5,0)
INIT ; Entry point - initialize variables and parameters
"RTN","IBAMTC",6,0)
 ;
"RTN","IBAMTC",7,0)
 ;***
"RTN","IBAMTC",8,0)
 ;S XRTL=$ZU(0),XRTN="IBAMTC-1" D T0^%ZOSV ;start rt clock
"RTN","IBAMTC",9,0)
 ;
"RTN","IBAMTC",10,0)
 D UPDT^IBARXEPS($$FMADD^XLFDT(DT,-30),DT,1)
"RTN","IBAMTC",11,0)
 ;
"RTN","IBAMTC",12,0)
 D NIGHTLY^IBTRKR ; claims tracking nightly update
"RTN","IBAMTC",13,0)
 ;
"RTN","IBAMTC",14,0)
 D ^IBCD ; automated biller
"RTN","IBAMTC",15,0)
 ;
"RTN","IBAMTC",16,0)
 D RELPR^IBAMTV3 ; auto-release patient charges on hold at least 60 days
"RTN","IBAMTC",17,0)
 ;
"RTN","IBAMTC",18,0)
 D EN^IBOHRL ; auto-release patient charges on hold longer than 90 days
"RTN","IBAMTC",19,0)
 ;
"RTN","IBAMTC",20,0)
 K IBDT D BJ^IBJDE  ; Automated DM extract monthly background job.
"RTN","IBAMTC",21,0)
 ;
"RTN","IBAMTC",22,0)
 ; - transfer pricing background job
"RTN","IBAMTC",23,0)
 I '+$$SWSTAT^IBBAPI() D ^IBATEI1                           ;IB*2.0*312
"RTN","IBAMTC",24,0)
 ;
"RTN","IBAMTC",25,0)
 D NIGHT^IBARXMA ; transmit copay cap info
"RTN","IBAMTC",26,0)
 ;
"RTN","IBAMTC",27,0)
 D NOW^%DTC S IBAFY=$$FY^IBOUTL(X),DT=X,U="^"
"RTN","IBAMTC",28,0)
 S (IBERRN,IBWHER,IBJOB,IBY,Y)=1,IBCNT=0 K ^TMP($J,"IBAMTC")
"RTN","IBAMTC",29,0)
 D SITE^IBAUTL I Y<1 S IBY=Y D ERR G CLEAN
"RTN","IBAMTC",30,0)
 D SERV^IBAUTL2 I IBY<1 D ERR G CLEAN
"RTN","IBAMTC",31,0)
 ;
"RTN","IBAMTC",32,0)
 ; Compile Means Test copay and per diem charges for all inpatients
"RTN","IBAMTC",33,0)
 ; Check PFSS Switch                                        ;IB*2.0*312
"RTN","IBAMTC",34,0)
 I '+$$SWSTAT^IBBAPI() S (IBWARD,DFN)="" F  S IBWARD=$O(^DPT("CN",IBWARD)) Q:IBWARD=""  F  S DFN=$O(^DPT("CN",IBWARD,DFN)) Q:'DFN  W !,DFN S IBA=^(DFN),IBY=1 D PROC
"RTN","IBAMTC",35,0)
 ;
"RTN","IBAMTC",36,0)
 ;send inpatients' CV (CombatVet) expiration e-mail alert
"RTN","IBAMTC",37,0)
 D CVEXMAIL^IBACV(DT)
"RTN","IBAMTC",38,0)
 ;
"RTN","IBAMTC",39,0)
 ;check & start LTC Monthly Job LTC if necessary
"RTN","IBAMTC",40,0)
 ; This code may need to be expanded, IF we don't          ;IB*2.0*312 
"RTN","IBAMTC",41,0)
 ; implement on the 1st of the month, for a clean cut over ;IB*2.0*312
"RTN","IBAMTC",42,0)
 I '+$$SWSTAT^IBBAPI() D NJ^IBAECN1                        ;IB*2.0*312
"RTN","IBAMTC",43,0)
 ;
"RTN","IBAMTC",44,0)
 D EN^IBCE ; Transmit electronic bills
"RTN","IBAMTC",45,0)
 ; Clean up expired Means Test billing clocks
"RTN","IBAMTC",46,0)
CLEAN S %H=+$H-1 D YMD^%DTC S IBDT=X,(IBN,DFN)=0,IBWHER=23
"RTN","IBAMTC",47,0)
 F  S DFN=$O(^IBE(351,"ACT",DFN)) Q:'DFN  D
"RTN","IBAMTC",48,0)
 . F  S IBN=$O(^IBE(351,"ACT",DFN,IBN)) Q:'IBN  D
"RTN","IBAMTC",49,0)
 ..  S IBY=1,X1=IBDT,(X2,IBCLDT)=+$P($G(^IBE(351,+IBN,0)),"^",3) D ^%DTC
"RTN","IBAMTC",50,0)
 ..  I X>364 S IBCLDA=IBN D CLOCKCL^IBAUTL3,ERR:IBY<1
"RTN","IBAMTC",51,0)
 ;
"RTN","IBAMTC",52,0)
 ; Close out incomplete events where the patient has been discharged,
"RTN","IBAMTC",53,0)
 ; pass the related charges if they appear correct, and send a bulletin
"RTN","IBAMTC",54,0)
 ; - also, send bulletins on old incomplete charges where there is no
"RTN","IBAMTC",55,0)
 ; incomplete event
"RTN","IBAMTC",56,0)
 D MAIN^IBAMTC2
"RTN","IBAMTC",57,0)
 ;
"RTN","IBAMTC",58,0)
 ;D ^IBAMTC1
"RTN","IBAMTC",59,0)
 ;
"RTN","IBAMTC",60,0)
 ; Send bulletin reporting job completion
"RTN","IBAMTC",61,0)
 I '+$$SWSTAT^IBBAPI() D BULL^IBAMTC1                     ;IB*2.0*312
"RTN","IBAMTC",62,0)
 ;
"RTN","IBAMTC",63,0)
 ; -- purge alerts
"RTN","IBAMTC",64,0)
 D PURGE^IBAERR3
"RTN","IBAMTC",65,0)
 ;
"RTN","IBAMTC",66,0)
 ; purge HPID files -- IB*2.0*519
"RTN","IBAMTC",67,0)
 D PUR^IBCNHUT2
"RTN","IBAMTC",68,0)
 ;
"RTN","IBAMTC",69,0)
 ; Monitor special inpatient billing cases
"RTN","IBAMTC",70,0)
 D BGJ^IBAMTI
"RTN","IBAMTC",71,0)
 ;
"RTN","IBAMTC",72,0)
 ; Print Pharmacy Copay Exemption Income Test Reminder Letters
"RTN","IBAMTC",73,0)
 D EN^IBARXEL
"RTN","IBAMTC",74,0)
 ;
"RTN","IBAMTC",75,0)
 ; Send HMS extract files to AITC DMI queues
"RTN","IBAMTC",76,0)
 D SENDEII^IBCNFSND
"RTN","IBAMTC",77,0)
 ;
"RTN","IBAMTC",78,0)
 ; Kill variables and quit.
"RTN","IBAMTC",79,0)
 D KILL1
"RTN","IBAMTC",80,0)
 ;
"RTN","IBAMTC",81,0)
 I $D(ZTQUEUED),$G(ZTSK) D KILL^%ZTLOAD
"RTN","IBAMTC",82,0)
 ;***
"RTN","IBAMTC",83,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBAMTC" D T1^%ZOSV ;stop rt clock
"RTN","IBAMTC",84,0)
 ;
"RTN","IBAMTC",85,0)
 Q
"RTN","IBAMTC",86,0)
 ;
"RTN","IBAMTC",87,0)
 ;
"RTN","IBAMTC",88,0)
PROC ; Process all currently admitted patients.
"RTN","IBAMTC",89,0)
 ;
"RTN","IBAMTC",90,0)
 D IFCVEXP^IBACV(DFN,DT,IBA) ;if CV has expired (see CVEXMAIL^IBACV)
"RTN","IBAMTC",91,0)
 ;--
"RTN","IBAMTC",92,0)
 ;1) checks effective date for LTC legislation.
"RTN","IBAMTC",93,0)
 ;2) determine current treating specialty (TS) for the 
"RTN","IBAMTC",94,0)
 ;"original" admission.
"RTN","IBAMTC",95,0)
 ;if TS is LTC: 
"RTN","IBAMTC",96,0)
 ;  - creates new LTC #350 parent event entry if necessary.
"RTN","IBAMTC",97,0)
 ;NOTE: It doesn't stop MT billing for LTC. CALC^IBAUTL4 does it.
"RTN","IBAMTC",98,0)
 I $$ISLTCADM^IBAECN1(DFN,IBA)
"RTN","IBAMTC",99,0)
 ;--
"RTN","IBAMTC",100,0)
 D ORIG  ; find "original" admission date
"RTN","IBAMTC",101,0)
 Q:$$BILST^DGMTUB(DFN)<IBADMDT  ; pat. was last billable before admission
"RTN","IBAMTC",102,0)
 Q:IBADMDT\1=DT  ; patient was admitted today - process tomorrow
"RTN","IBAMTC",103,0)
 Q:+$$MVT^DGPMOBS(IBA)  ; admitted for Observation & Examination
"RTN","IBAMTC",104,0)
 Q:$O(^IBE(351.2,"AC",IBA,0))  ; skip special inpatient admissions
"RTN","IBAMTC",105,0)
 ;
"RTN","IBAMTC",106,0)
 ; - if vet is SC, create a Special Inpatient Billing Case
"RTN","IBAMTC",107,0)
 ;   in file #351.2 (use code 3 for SC, as it is changed to 4 in IBAMTI)
"RTN","IBAMTC",108,0)
 D ELIG^VADPT I VAEL(3) D ADM^IBAMTI(DFN,IBA,3) Q
"RTN","IBAMTC",109,0)
 ;
"RTN","IBAMTC",110,0)
 ; - gather event information
"RTN","IBAMTC",111,0)
 D EVFIND^IBAUTL3 I 'IBEVDA D BSEC Q:'IBBS  ; wasn't billable yesterday
"RTN","IBAMTC",112,0)
 S X=IBADMDT D H^%DTC S IBBDT=%H D:'IBEVDA LAST^IBAUTL5
"RTN","IBAMTC",113,0)
 I IBEVDA,IBEVCAL S X1=IBEVCAL,X2=1 D C^%DTC S IBBDT=%H
"RTN","IBAMTC",114,0)
 S IBEDT=+$H-1
"RTN","IBAMTC",115,0)
 ; - gather clock information
"RTN","IBAMTC",116,0)
 S IBWHER=24 D CLOCK^IBAUTL3 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",117,0)
 I IBCLDA S X=IBCLDT D H^%DTC S IBCLCT=IBBDT-%H
"RTN","IBAMTC",118,0)
 ; - build charges for inpatient days
"RTN","IBAMTC",119,0)
 D ^IBAUTL4 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",120,0)
 ; - pass per diem if over 30 days old, or both per diem and the copay
"RTN","IBAMTC",121,0)
 ; - if 4 days from patient's statement date; update event, clock
"RTN","IBAMTC",122,0)
 S IBWHER=22
"RTN","IBAMTC",123,0)
 I $G(IBCHPDA),$P($G(^IB(+IBCHPDA,0)),"^",6)>30!($$STD^IBAUTL5(DFN)) S IBNOS=IBCHPDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",124,0)
 I $G(IBCHCDA),$$STD^IBAUTL5(DFN) S IBNOS=IBCHCDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",125,0)
 I IBEVDA,$D(IBDT) S IBEVCLD=IBDT D EVUPD^IBAUTL3
"RTN","IBAMTC",126,0)
 I IBCLDA D CLUPD^IBAUTL3
"RTN","IBAMTC",127,0)
PROCQ D KILL Q
"RTN","IBAMTC",128,0)
 ;
"RTN","IBAMTC",129,0)
BSEC ; Determine patient's bedsection for the previous day.
"RTN","IBAMTC",130,0)
 S X1=DT,X2=-1 D C^%DTC
"RTN","IBAMTC",131,0)
 S VAIP("D")=X_.2359 D IN5^VADPT S IBBS=$$SECT^IBAUTL5(+VAIP(8)) Q
"RTN","IBAMTC",132,0)
 ;
"RTN","IBAMTC",133,0)
ERR ; Error processing.  Input:  IBY, IBWHER, IBCNT
"RTN","IBAMTC",134,0)
 S IBDUZ=DUZ,IBCNT=IBCNT+1 D ^IBAERR1 K IBDUZ Q
"RTN","IBAMTC",135,0)
 ;S ^TMP($J,"IBAMTC","E",IBERRN)=$P(IBY,"^",2)_"^"_$S($D(DFN):DFN,1:"")_"^"_IBWHER,IBERRN=IBERRN+1 Q
"RTN","IBAMTC",136,0)
 ;
"RTN","IBAMTC",137,0)
ORIG ; Find first admission date, considering ASIH movements
"RTN","IBAMTC",138,0)
 ;  Input:  IBA    Output:  IBADMDT
"RTN","IBAMTC",139,0)
 N X,Y,Z S Z=IBA
"RTN","IBAMTC",140,0)
 F  S X=$G(^DGPM(Z,0)),Y=$P(X,"^",21) Q:Y=""  S Z=+$P($G(^DGPM(Y,0)),"^",14)
"RTN","IBAMTC",141,0)
 S IBADMDT=+X Q
"RTN","IBAMTC",142,0)
 ;
"RTN","IBAMTC",143,0)
KILL1 ; Kill all IB variables.
"RTN","IBAMTC",144,0)
 K VAERR,VAEL,VAIP,IBA,IBADMDT,IBAFY,IBATYP,IBBDT,IBBS,IBCHARG,IBCHG,IBCNT,IBCUR,IBDESC,IBDISDT,IBDT,IBDUZ,IBFAC,IBI,IBIL,IBJOB,IBLC,IBMAX
"RTN","IBAMTC",145,0)
 K IBN,IBNOS,IBSAVBS,IBSEQNO,IBSERV,IBSITE,IBSL,IBTRAN,IBX,IBY,IBWHER,IBWARD,IBEDT,IBCHCTY,IBCHPDE,IBERRN,IBASIH,IBRTED
"RTN","IBAMTC",146,0)
KILL ; Kill all IB variables needed to build charges.
"RTN","IBAMTC",147,0)
 K IBCLCT,IBCLDA,IBCLDT,IBCLDAY,IBCLDOL,IBCHPDA,IBCHCDA,IBCHG,IBCHFR,IBCHTO,IBCHTOTL,IBBS,IBNH
"RTN","IBAMTC",148,0)
 K IBEVDA,IBEVDT,IBEVCLD,IBEVCAL,IBEVNEW,IBEVOLD,IBMED,IBTOTL,IBDESC,IBIL,IBTRAN,IBATYP,IBDATE
"RTN","IBAMTC",149,0)
 Q
"RTN","IBCEU3")
0^17^B106673839^B105297417
"RTN","IBCEU3",1,0)
IBCEU3 ;ALB/TMP - EDI UTILITIES FOR 1500 CLAIM FORM ;12/29/05 9:58am
"RTN","IBCEU3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,323,348,371,400,432,488,519**;21-MAR-94;Build 56
"RTN","IBCEU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU3",4,0)
 ;
"RTN","IBCEU3",5,0)
BOX19(IBIFN) ; New Box 19 added for patch 488.  This is for workman's comp?
"RTN","IBCEU3",6,0)
 ; This returns the Paperwork Attachment 
"RTN","IBCEU3",7,0)
 ;     Information in the following format:
"RTN","IBCEU3",8,0)
 ;   PWKNNFX12348907CHEY<3 Spaces>Next set if more than one on claim
"RTN","IBCEU3",9,0)
 ; PWK is the qualifier for data, followed by the appropriate Report Type 
"RTN","IBCEU3",10,0)
 ;Code, the appropriate Transmission Type Code, then the Attachment Control 
"RTN","IBCEU3",11,0)
 ;Number.  Do not enter spaces between qualifiers and data.
"RTN","IBCEU3",12,0)
 ;
"RTN","IBCEU3",13,0)
 ; This information can be at either the Line Level or the Claim Level.
"RTN","IBCEU3",14,0)
 ; Check all Lines first and print as many as possible - 71 characters 
"RTN","IBCEU3",15,0)
 ; maximum.  Then check the Claim Level
"RTN","IBCEU3",16,0)
 N IBRTP,LN,U8,IBBX19,IB19,DATA,I,DEL
"RTN","IBCEU3",17,0)
 S IB19="",DEL="   ",LN=0
"RTN","IBCEU3",18,0)
 ; Get rate type
"RTN","IBCEU3",19,0)
 S IBRTP=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCEU3",20,0)
 ; Get data entered for box 19
"RTN","IBCEU3",21,0)
 S IBBX19=$P($G(^DGCR(399,IBIFN,"UF31")),U,3)
"RTN","IBCEU3",22,0)
 ; check the line Level first
"RTN","IBCEU3",23,0)
 I IBRTP=11 D
"RTN","IBCEU3",24,0)
 .F  S LN=$O(^DGCR(399,IBIFN,"CP",LN)) Q:LN=""  Q:LN'?.N  D
"RTN","IBCEU3",25,0)
 ..S DATA=$G(^DGCR(399,IBIFN,"CP",LN,1))
"RTN","IBCEU3",26,0)
 ..I $P(DATA,U,2)'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",27,0)
 .; check the Claim Level next
"RTN","IBCEU3",28,0)
 .S DATA=""
"RTN","IBCEU3",29,0)
 .S DATA=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCEU3",30,0)
 .I DATA'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",31,0)
 ; If any room left add user entered box 19 info
"RTN","IBCEU3",32,0)
 I IBBX19'="",IB19'="",$L(IB19)<84 D
"RTN","IBCEU3",33,0)
 .F I=1:1:$L(IBBX19,DEL) S DATA=$P(IBBX19,DEL,I) I DATA'="" D
"RTN","IBCEU3",34,0)
 ..I $L(IB19_DEL_DATA)<84 S IB19=IB19_$S(IB19="":"",1:DEL)_DATA
"RTN","IBCEU3",35,0)
 I IB19="",IBBX19'="" S IB19=IBBX19
"RTN","IBCEU3",36,0)
 ;
"RTN","IBCEU3",37,0)
 Q IB19
"RTN","IBCEU3",38,0)
 ;
"RTN","IBCEU3",39,0)
FORMAT(DATA) ; format data for ouput
"RTN","IBCEU3",40,0)
 N ART,OUT
"RTN","IBCEU3",41,0)
 S ART=$P(DATA,U,2)
"RTN","IBCEU3",42,0)
 S ART=$P(^IBE(353.3,ART,0),U,1)
"RTN","IBCEU3",43,0)
 S OUT="PWK"_ART_$P(DATA,U,3)_$P(DATA,U,1)
"RTN","IBCEU3",44,0)
 Q OUT
"RTN","IBCEU3",45,0)
 ;
"RTN","IBCEU3",46,0)
 ; BELOW NO LONGER USED -> BAA *488*
"RTN","IBCEU3",47,0)
OBOX19(IBIFN) ; THIS IS NOLONGER USED.  IT WAS REPLACE WITH ABOVE.
"RTN","IBCEU3",48,0)
 ; Returns the text that should print in box 19 of the CMS-1500
"RTN","IBCEU3",49,0)
 ;   for bill ien IBIFN
"RTN","IBCEU3",50,0)
 ; Data is derived from a combo of data throughout
"RTN","IBCEU3",51,0)
 ; the system and is limited to 80 characters.  The hierarchy for
"RTN","IBCEU3",52,0)
 ; including data is as follows (until 80 characters have been used):
"RTN","IBCEU3",53,0)
 ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
"RTN","IBCEU3",54,0)
 ;                      specialty codes = 025,065,073,067,048
"RTN","IBCEU3",55,0)
 ;   LAST X-RAY DATE (chiropractic) specialty code = 35
"RTN","IBCEU3",56,0)
 ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
"RTN","IBCEU3",57,0)
 ;                        a specimen from a homebound patient)
"RTN","IBCEU3",58,0)
 ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
"RTN","IBCEU3",59,0)
 ;   Hearing aid testing (if applicable)
"RTN","IBCEU3",60,0)
 ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
"RTN","IBCEU3",61,0)
 ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
"RTN","IBCEU3",62,0)
 ;                   lung volume reduction surgery study is set
"RTN","IBCEU3",63,0)
 ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
"RTN","IBCEU3",64,0)
 ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
"RTN","IBCEU3",65,0)
 ;     DETAIL
"RTN","IBCEU3",66,0)
 ;
"RTN","IBCEU3",67,0)
 N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM,IBSPI
"RTN","IBCEU3",68,0)
 S IB19="",IBGO=1
"RTN","IBCEU3",69,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEU3",70,0)
 I $D(IBXSAVE(IBSUB)) N IBXSAVE
"RTN","IBCEU3",71,0)
 S IBPRT=(IBSUB["24")
"RTN","IBCEU3",72,0)
 ;
"RTN","IBCEU3",73,0)
 S IBSPEC=$$BILLSPEC(IBIFN)
"RTN","IBCEU3",74,0)
 G:'IBPRT NPRT
"RTN","IBCEU3",75,0)
 ; Check for chiropractic services
"RTN","IBCEU3",76,0)
 I $P($G(^DGCR(399,IBIFN,"U3")),U,5)'="" S:$P($G(^DGCR(399,IBIFN,"U3")),U,4)'="" IBGO=$$LENOK("Last X-ray: "_$TR($$DATE^IBCF2($P(^DGCR(399,IBIFN,"U3"),U,4))," ","/"),.IB19)
"RTN","IBCEU3",77,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",78,0)
 ;
"RTN","IBCEU3",79,0)
 I "^25^65^73^67^48^"[(U_IBSPEC_U) D
"RTN","IBCEU3",80,0)
 . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
"RTN","IBCEU3",81,0)
 . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB19)
"RTN","IBCEU3",82,0)
 .. ; Only print if specialty is OT or PT or proc for routine foot care
"RTN","IBCEU3",83,0)
 .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
"RTN","IBCEU3",84,0)
 ;
"RTN","IBCEU3",85,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",86,0)
 K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
"RTN","IBCEU3",87,0)
 I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
"RTN","IBCEU3",88,0)
 ;
"RTN","IBCEU3",89,0)
 K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
"RTN","IBCEU3",90,0)
 I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
"RTN","IBCEU3",91,0)
 ;
"RTN","IBCEU3",92,0)
 I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
"RTN","IBCEU3",93,0)
 ;
"RTN","IBCEU3",94,0)
 S (IBHAID,IBHOSP,IBXRAY)=0
"RTN","IBCEU3",95,0)
 ;
"RTN","IBCEU3",96,0)
 S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
"RTN","IBCEU3",97,0)
 . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" Units:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
"RTN","IBCEU3",98,0)
 . ;
"RTN","IBCEU3",99,0)
 . Q:'IBGO
"RTN","IBCEU3",100,0)
 . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
"RTN","IBCEU3",101,0)
 .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
"RTN","IBCEU3",102,0)
 . ;
"RTN","IBCEU3",103,0)
 . Q:'IBGO
"RTN","IBCEU3",104,0)
 . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19) Q
"RTN","IBCEU3",105,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",106,0)
 K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
"RTN","IBCEU3",107,0)
 I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
"RTN","IBCEU3",108,0)
 ;
"RTN","IBCEU3",109,0)
 ; SPECIAL PROGRAM INDICATOR field code.
"RTN","IBCEU3",110,0)
 S IBSPI=$$GET1^DIQ(399,IBIFN_",",238,"E")
"RTN","IBCEU3",111,0)
 I IBSPI'="" S IBGO=$$LENOK(IBSPI,.IB19)
"RTN","IBCEU3",112,0)
 ;
"RTN","IBCEU3",113,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",114,0)
NPRT K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
"RTN","IBCEU3",115,0)
 S IBREM=0
"RTN","IBCEU3",116,0)
 I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
"RTN","IBCEU3",117,0)
 K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
"RTN","IBCEU3",118,0)
 I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
"RTN","IBCEU3",119,0)
 ;
"RTN","IBCEU3",120,0)
BOX19Q Q IB19
"RTN","IBCEU3",121,0)
 ; ALL OF THE ABOVE TO OBOX19 IS NO LONGER USED *488*
"RTN","IBCEU3",122,0)
 ;
"RTN","IBCEU3",123,0)
LENOK(IBDATA,IB19) ; Add text IBDATA to box 19 string (IB19 passed by ref)
"RTN","IBCEU3",124,0)
 ; Check length of box 19 data - truncate at 71 (max length)
"RTN","IBCEU3",125,0)
 ; Returns 0 if max length reached or exceeded, otherwise, 1
"RTN","IBCEU3",126,0)
 ; Changed 96 to 71 for new 1500 form
"RTN","IBCEU3",127,0)
 N OK
"RTN","IBCEU3",128,0)
 S OK=1
"RTN","IBCEU3",129,0)
 S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
"RTN","IBCEU3",130,0)
 I $L(IB19)'<83 S OK=0,IB19=$E(IB19,1,71) G LENOKQ
"RTN","IBCEU3",131,0)
LENOKQ Q OK
"RTN","IBCEU3",132,0)
 ;
"RTN","IBCEU3",133,0)
ASK19(IBIFN) ; Ask to display CMS-1500 box 19 data for current IBIFN
"RTN","IBCEU3",134,0)
 ;  changed to 71 length.
"RTN","IBCEU3",135,0)
 N DIR,DIC,X,Y,DIE,DR,Z
"RTN","IBCEU3",136,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL CMS-1500 BOX 19?: "
"RTN","IBCEU3",137,0)
 D ^DIR
"RTN","IBCEU3",138,0)
 K DIR("B")
"RTN","IBCEU3",139,0)
 I Y=1 D
"RTN","IBCEU3",140,0)
 .S Z=$$BOX19(IBIFN) W !!,?4,"19",?45,$E(Z,1,23) W:$L(Z)>23 !,?4,$E(Z,24,71),!
"RTN","IBCEU3",141,0)
 .S DIR(0)="E",DIR("A")="Enter <RET> to Continue " W ! D ^DIR K DIR
"RTN","IBCEU3",142,0)
 Q
"RTN","IBCEU3",143,0)
 ;
"RTN","IBCEU3",144,0)
ONLAB(IBIFN) ; Functions returns 1 if the bill IBIFN is outside non-lab
"RTN","IBCEU3",145,0)
 N IBP,IBPUR
"RTN","IBCEU3",146,0)
 S IBP=0
"RTN","IBCEU3",147,0)
 S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU3",148,0)
 I IBPUR,"13"[IBPUR S IBP=1
"RTN","IBCEU3",149,0)
 Q IBP
"RTN","IBCEU3",150,0)
 ;
"RTN","IBCEU3",151,0)
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) ; Format the text line of box 24 by fld
"RTN","IBCEU3",152,0)
 ; INPUT:
"RTN","IBCEU3",153,0)
 ;   FLD = the letter of the field in box 24 (A-J)
"RTN","IBCEU3",154,0)
 ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
"RTN","IBCEU3",155,0)
 ;   IBSUB = the subscript of the IBXSAVE array to use.
"RTN","IBCEU3",156,0)
 ;           If null, use "BOX24"
"RTN","IBCEU3",157,0)
 ; OUTPUT:
"RTN","IBCEU3",158,0)
 ;   IBXDATA = passed by reference, set to the correct part of the
"RTN","IBCEU3",159,0)
 ;             text that will print in the field's positions
"RTN","IBCEU3",160,0)
 ;
"RTN","IBCEU3",161,0)
 ; esg - 8/14/06 - modified for the new cms-1500 form - IB*2*348
"RTN","IBCEU3",162,0)
 ;
"RTN","IBCEU3",163,0)
 N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ,IBREN,IBRENQ,IBRENNPI,IBRENSID
"RTN","IBCEU3",164,0)
 K IBXDATA
"RTN","IBCEU3",165,0)
 S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
"RTN","IBCEU3",166,0)
 ;
"RTN","IBCEU3",167,0)
 I FLD="I"!(FLD="J") D   ; extract the Rendering provider data
"RTN","IBCEU3",168,0)
 . I '$G(IBXIEN) Q       ; assume that the claim# exists
"RTN","IBCEU3",169,0)
 . S IBREN=$$CFIDS^IBCEF77(IBXIEN)
"RTN","IBCEU3",170,0)
 . S IBRENQ=$P(IBREN,U,1)    ; qual
"RTN","IBCEU3",171,0)
 . S IBRENSID=$P(IBREN,U,2)  ; id
"RTN","IBCEU3",172,0)
 . S IBRENNPI=$P(IBREN,U,3)  ; npi
"RTN","IBCEU3",173,0)
 . Q
"RTN","IBCEU3",174,0)
 ;
"RTN","IBCEU3",175,0)
 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
"RTN","IBCEU3",176,0)
 . S IBDAT=$G(IBXSAVE(IBSUB,Z))
"RTN","IBCEU3",177,0)
 . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
"RTN","IBCEU3",178,0)
 . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
"RTN","IBCEU3",179,0)
 . S IBZ=$P(IBAUX,U,9)
"RTN","IBCEU3",180,0)
 . I IBZ="" S IBZ="  "
"RTN","IBCEU3",181,0)
 . S IBTEXT=IBZ_IBTEXT
"RTN","IBCEU3",182,0)
 . ;
"RTN","IBCEU3",183,0)
 . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S IBTEXT=""
"RTN","IBCEU3",184,0)
 . ;
"RTN","IBCEU3",185,0)
 . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9 D   ; From date of service
"RTN","IBCEU3",186,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",187,0)
 .. Q
"RTN","IBCEU3",188,0)
 . ;
"RTN","IBCEU3",189,0)
 . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18 D    ; To date of service
"RTN","IBCEU3",190,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",191,0)
 .. Q
"RTN","IBCEU3",192,0)
 . ;
"RTN","IBCEU3",193,0)
 . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21   ; place of service
"RTN","IBCEU3",194,0)
 . I FLD="C" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=22,IBE=24   ; emergency indicator
"RTN","IBCEU3",195,0)
 . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=44 D   ; procedures and modifiers
"RTN","IBCEU3",196,0)
 .. N M S M=$$MODLST^IBEFUNC($P(IBDAT,U,10))       ; modifier list
"RTN","IBCEU3",197,0)
 .. S IBVAL=$$FO^IBCNEUT1(IBVAL,6)_"  "            ; procedure code
"RTN","IBCEU3",198,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",1),3)     ; mod#1
"RTN","IBCEU3",199,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",2),3)     ; mod#2
"RTN","IBCEU3",200,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",3),3)     ; mod#3
"RTN","IBCEU3",201,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",4),3)     ; mod#4
"RTN","IBCEU3",202,0)
 .. Q
"RTN","IBCEU3",203,0)
 . ;
"RTN","IBCEU3",204,0)
 . I FLD="E" D
"RTN","IBCEU3",205,0)
 .. N NUM,IN,OUT,LET
"RTN","IBCEU3",206,0)
 .. S IN="1,2,3,4,5,6,7,8,9"
"RTN","IBCEU3",207,0)
 .. S OUT="A,B,C,D,E,F,G,H,I"
"RTN","IBCEU3",208,0)
 .. S IBVAL=$P(IBDAT,U,7)
"RTN","IBCEU3",209,0)
 .. F I=1:1:4 S NUM=$P(IBVAL,",",I) D
"RTN","IBCEU3",210,0)
 ... I NUM<10 S $P(LET,",",I)=$TR(NUM,IN,OUT)
"RTN","IBCEU3",211,0)
 ... I NUM=10 S $P(LET,",",I)="J"
"RTN","IBCEU3",212,0)
 ... I NUM=11 S $P(LET,",",I)="K"
"RTN","IBCEU3",213,0)
 ... I NUM=12 S $P(LET,",",I)="L"
"RTN","IBCEU3",214,0)
 .. S IBVAL=$TR(LET,","),IBS=45,IBE=48  ; diagnosis pointer
"RTN","IBCEU3",215,0)
 . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=57 D
"RTN","IBCEU3",216,0)
 .. ; total charges  **519 returned field length back to 8, 9 is too long for BOX24F
"RTN","IBCEU3",217,0)
 .. S IBVAL=$$DOL^IBCEF77(IBVAL,8)
"RTN","IBCEU3",218,0)
 .. I $L(IBVAL)>8 S IBVAL=$E(IBVAL,$L(IBVAL)-7,$L(IBVAL))
"RTN","IBCEU3",219,0)
 .. Q
"RTN","IBCEU3",220,0)
 . ;
"RTN","IBCEU3",221,0)
 . I FLD="G" S IBVAL=$S($P(IBDAT,U,12):$P(IBDAT,U,12),1:$P(IBDAT,U,9)),IBS=58,IBE=61 D
"RTN","IBCEU3",222,0)
 .. ; days or units or anesthesia minutes
"RTN","IBCEU3",223,0)
 .. S IBVAL=$J(+IBVAL,4)
"RTN","IBCEU3",224,0)
 .. Q
"RTN","IBCEU3",225,0)
 . ;
"RTN","IBCEU3",226,0)
 . ; columns H,I,J don't have any free text supplemental information
"RTN","IBCEU3",227,0)
 . ;
"RTN","IBCEU3",228,0)
 . I FLD="H" D     ; epsdt family plan
"RTN","IBCEU3",229,0)
 .. S IBVAL=$P(IBAUX,U,7),IBS=0,IBE=0,IBTEXT=""   ; line 1 blank
"RTN","IBCEU3",230,0)
 .. I IBVAL S IBVAL="Y"
"RTN","IBCEU3",231,0)
 .. Q
"RTN","IBCEU3",232,0)
 . I FLD="I" D     ; ID qualifier for rendering provider
"RTN","IBCEU3",233,0)
 .. S IBVAL="",IBS=1,IBE=2   ; line 2 blank
"RTN","IBCEU3",234,0)
 .. S IBTEXT=$G(IBRENQ)      ; qualifier on line 1
"RTN","IBCEU3",235,0)
 .. Q
"RTN","IBCEU3",236,0)
 . I FLD="J" D     ; rendering provider ID and NPI
"RTN","IBCEU3",237,0)
 .. S IBTEXT=$G(IBRENSID),IBS=1,IBE=11   ; secondary ID line 1
"RTN","IBCEU3",238,0)
 .. S IBVAL=$G(IBRENNPI)                 ; NPI# line 2
"RTN","IBCEU3",239,0)
 .. Q
"RTN","IBCEU3",240,0)
 . ;
"RTN","IBCEU3",241,0)
 . S IBLINE=IBLINE+1                      ; top line
"RTN","IBCEU3",242,0)
 . S IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE)   ; text in shaded area (top)
"RTN","IBCEU3",243,0)
 . S IBLINE=IBLINE+1             ; bottom line
"RTN","IBCEU3",244,0)
 . S IBXDATA(IBLINE)=IBVAL       ; field value in unshaded area (bottom)
"RTN","IBCEU3",245,0)
 . Q
"RTN","IBCEU3",246,0)
 ;
"RTN","IBCEU3",247,0)
 Q
"RTN","IBCEU3",248,0)
 ;
"RTN","IBCEU3",249,0)
LINSPEC(IBIFN) ; Checks the specialities of line and claim level providers
"RTN","IBCEU3",250,0)
 ; called from IBCBB2 to check for Chiro codes & IBCBB9 to check for 99's on Medicare
"RTN","IBCEU3",251,0)
 ; Default = 99 if no valid SPEC code found for line and claim level provider
"RTN","IBCEU3",252,0)
 ; Get rendering for professional, attending for institutional
"RTN","IBCEU3",253,0)
 ; If multiple lines w/ rendering or attending, returns a string of spec codes
"RTN","IBCEU3",254,0)
 N Z,IBSPEC,IBINS,IBDT,IBCP,IBSPC
"RTN","IBCEU3",255,0)
 S IBSPC=""
"RTN","IBCEU3",256,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",257,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",258,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",259,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",260,0)
 ; check claim level
"RTN","IBCEU3",261,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",262,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) I IBSPEC'="" S IBSPC=IBSPC_U_IBSPEC Q
"RTN","IBCEU3",263,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",264,0)
 . I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC=99 S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",265,0)
 ; Check line level
"RTN","IBCEU3",266,0)
 S IBCP=0 F  S IBCP=$O(^DGCR(399,IBIFN,"CP",IBCP)) Q:'IBCP  D
"RTN","IBCEU3",267,0)
 .S Z0=+$O(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV","B",Z,0))
"RTN","IBCEU3",268,0)
 .I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC="99" S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",269,0)
 S:IBSPC="" IBSPC=99
"RTN","IBCEU3",270,0)
 Q IBSPC
"RTN","IBCEU3",271,0)
 ;
"RTN","IBCEU3",272,0)
BILLSPEC(IBIFN,IBPRV) ;  Returns the specialty of the provider on bill IBIFN
"RTN","IBCEU3",273,0)
 ; If IBPRV is supplied, returns the data for that provider, otherwise,
"RTN","IBCEU3",274,0)
 ;  returns the specialty of the 'main/required' provider on the bill.
"RTN","IBCEU3",275,0)
 ;  Default = 99 if no valid code found
"RTN","IBCEU3",276,0)
 ; IBPRV = vp of provider (file 200 or 355.93)
"RTN","IBCEU3",277,0)
 N Z,IBSPEC,IBINS,IBDT
"RTN","IBCEU3",278,0)
 S IBSPEC="",IBPRV=$G(IBPRV)
"RTN","IBCEU3",279,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",280,0)
 ;
"RTN","IBCEU3",281,0)
 I $G(IBPRV) D  G SPECQ
"RTN","IBCEU3",282,0)
 . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
"RTN","IBCEU3",283,0)
 ;
"RTN","IBCEU3",284,0)
 ;Get rendering for professional, attending for institutional,
"RTN","IBCEU3",285,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",286,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",287,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",288,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",289,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
"RTN","IBCEU3",290,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",291,0)
 . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
"RTN","IBCEU3",292,0)
 ;
"RTN","IBCEU3",293,0)
SPECQ I IBSPEC="" S IBSPEC="99"
"RTN","IBCEU3",294,0)
 Q IBSPEC
"RTN","IBCEU3",295,0)
 ;
"RTN","IBCEU3",296,0)
CHAMPVA(IBIFN) ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
"RTN","IBCEU3",297,0)
 Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
"RTN","IBCEU3",298,0)
 ;
"RTN","IBCEU3",299,0)
FAC(IBIFN) ; Obsolete function.  Used by old output formatter field and data element N-RENDERING INSTITUTION
"RTN","IBCEU3",300,0)
 Q ""
"RTN","IBCEU3",301,0)
 ;
"RTN","IBCEU3",302,0)
MCR24K(IBIFN,IBPRV) ;Function returns MEDICARE id# for professional (CMS-1500) box 24k for bill IBIFN if appropriate
"RTN","IBCEU3",303,0)
 ;*432/TAZ - Added IBPRV to allow circumvent the call to F^IBCEF("N-SPECIALTY CODE","IBZ",,IBIFN) in MCRSPEC^IBCEU4
"RTN","IBCEU3",304,0)
 Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCNBLE")
0^16^B108261556^B105786784
"RTN","IBCNBLE",1,0)
IBCNBLE ;ALB/ARH - Ins Buffer: LM buffer entry screen ;1-Jun-97
"RTN","IBCNBLE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,231,184,251,371,416,435,452,497,519**;21-MAR-94;Build 56
"RTN","IBCNBLE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLE",4,0)
 ;
"RTN","IBCNBLE",5,0)
EN ; - main entry point for list manager display
"RTN","IBCNBLE",6,0)
 N DFN
"RTN","IBCNBLE",7,0)
 D EN^VALM("IBCNB INSURANCE BUFFER ENTRY")
"RTN","IBCNBLE",8,0)
 Q
"RTN","IBCNBLE",9,0)
 ;
"RTN","IBCNBLE",10,0)
HDR ; - header code for list manager display
"RTN","IBCNBLE",11,0)
 N IBX,IB0,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLE",12,0)
 I +$G(DFN) D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLE",13,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLE",14,0)
 S IB0=$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNBLE",15,0)
 S IBX=$E($P($G(^VA(200,+$P(IB0,U,2),0)),U,1),1,27)_" ("_$E($$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3)),1,11)_")"
"RTN","IBCNBLE",16,0)
 S IBX="Buffer entry created on "_$$DATE(+IB0)_" by "_IBX,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",17,0)
 S VALMHDR(2)=IBX
"RTN","IBCNBLE",18,0)
 S IBX="" I +$P(IB0,U,10) S IBX="Buffer entry verified on "_$$DATE(+$P(IB0,U,10))_" by "_$E($P($G(^VA(200,+$P(IB0,U,11),0)),U,1),1,27),IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",19,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLE",20,0)
 Q
"RTN","IBCNBLE",21,0)
 ;
"RTN","IBCNBLE",22,0)
INIT ; - initialization of list manager screen, ifn of record to display required IBBUFDA
"RTN","IBCNBLE",23,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",24,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLE",25,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLE",26,0)
 D BLD
"RTN","IBCNBLE",27,0)
 Q
"RTN","IBCNBLE",28,0)
 ;
"RTN","IBCNBLE",29,0)
HELP ; - help text for list manager screen
"RTN","IBCNBLE",30,0)
 D FULL^VALM1
"RTN","IBCNBLE",31,0)
 W !!,"This screen displays all data in a Buffer File entry."
"RTN","IBCNBLE",32,0)
 W !!,"The actions allow editing of all data and verification of coverage."
"RTN","IBCNBLE",33,0)
 W !!,"It is not necessary to use the Verify Entry action, this action is optional.",!,"If the Verify Entry action is not used, the policy will be automatically flagged",!,"as verified when it is Accepted and stored in the main Insurance files."
"RTN","IBCNBLE",34,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLE",35,0)
 Q
"RTN","IBCNBLE",36,0)
 ;
"RTN","IBCNBLE",37,0)
EXIT ; - exit list manager screen
"RTN","IBCNBLE",38,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",39,0)
 D CLEAR^VALM1
"RTN","IBCNBLE",40,0)
 Q
"RTN","IBCNBLE",41,0)
 ;
"RTN","IBCNBLE",42,0)
BLD ; display buffer entry
"RTN","IBCNBLE",43,0)
 N DFN,CLIEN,CLDT,IB0,IB20,IB40,IB60,IB61,IB62,IB90,IB91,IBL,IBLINE,ADDR,IBI,IBY,SRVARRAY
"RTN","IBCNBLE",44,0)
 S VALMCNT=0
"RTN","IBCNBLE",45,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNBLE",46,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60)),IB61=$G(^IBA(355.33,IBBUFDA,61)),IB62=$G(^IBA(355.33,IBBUFDA,62))
"RTN","IBCNBLE",47,0)
 S IB90=$G(^IBA(355.33,IBBUFDA,90)),IB91=$G(^IBA(355.33,IBBUFDA,91))
"RTN","IBCNBLE",48,0)
 ; check if we are coming from appointments view
"RTN","IBCNBLE",49,0)
 I $G(AVIEW) D
"RTN","IBCNBLE",50,0)
 .D SET(" ") S IBY=$J("",26)_"Appointment Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",51,0)
 .S DFN=+IB60
"RTN","IBCNBLE",52,0)
 .S CLIEN="" F  S CLIEN=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN)) Q:CLIEN=""  D
"RTN","IBCNBLE",53,0)
 ..S CLDT="" F  S CLDT=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT)) Q:CLDT=""  D
"RTN","IBCNBLE",54,0)
 ...S IBL="Clinic: ",IBY=$P($P(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT),U,2),";",2)
"RTN","IBCNBLE",55,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,10,30)
"RTN","IBCNBLE",56,0)
 ...S IBL="Appt. D/T: ",IBY=$$FMTE^XLFDT(CLDT)
"RTN","IBCNBLE",57,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,50,22)
"RTN","IBCNBLE",58,0)
 ...D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",59,0)
 ...Q
"RTN","IBCNBLE",60,0)
 ..Q
"RTN","IBCNBLE",61,0)
 .Q
"RTN","IBCNBLE",62,0)
 ;
"RTN","IBCNBLE",63,0)
 I +$P(IB0,U,17) D EN^IBCNBLE2    ; IB*2*435 - Display e-Pharmacy ELIG response data
"RTN","IBCNBLE",64,0)
 ;
"RTN","IBCNBLE",65,0)
 D SET(" ") S IBY=$J("",26)_"Insurance Company Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",66,0)
 S IBL="Name: ",IBY=$P(IB20,U,1) S IBLINE=$$SETL("",IBY,IBL,10,30)
"RTN","IBCNBLE",67,0)
 S IBL="Reimburse?: ",IBY=$$EXPAND^IBTRE(355.33,20.05,$P(IB20,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",68,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",69,0)
 S IBL="Phone: ",IBY=$P(IB20,U,2) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,20)
"RTN","IBCNBLE",70,0)
 S IBL="Billing Phone: ",IBY=$P(IB20,U,3) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",71,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",72,0)
 S IBL="Precert Phone: ",IBY=$P(IB20,U,4) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",73,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",74,0)
 S IBL="Remote Query From: ",IBY=$$EXTERNAL^DILFD(355.33,.14,"",$P(IB0,"^",14)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",75,0)
 D SET(IBLINE) S IBLINE="" D ADDR(21,1)
"RTN","IBCNBLE",76,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69)
"RTN","IBCNBLE",77,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",78,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",79,0)
 D SET(" ") S IBY=$J("",29)_"Group/Plan Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",80,0)
 S IBL="Group Plan?: ",IBY=$$YN($P(IB40,U,1)) S IBLINE=$$SETL("",IBY,IBL,16,3)
"RTN","IBCNBLE",81,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",82,0)
 S IBL="Group Name: ",IBY=$P(IB90,U,1) S IBLINE=$$SETL("",IBY,IBL,16,58) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",83,0)
 I $TR($E(IBY,59,80)," ","")'="" S IBLINE=$$SETL("",$E(IBY,59,80),"",16,22) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",84,0)
 ;
"RTN","IBCNBLE",85,0)
 S IBL="Group Number: ",IBY=$P(IB90,U,2) S IBLINE=$$SETL("",IBY,IBL,16,55)
"RTN","IBCNBLE",86,0)
 ;;Daou/EEN - Adding BIN and PCN
"RTN","IBCNBLE",87,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",88,0)
 S IBL="BIN: ",IBY=$P(IB40,U,10) S IBLINE=$$SETL("",IBY,IBL,16,10)
"RTN","IBCNBLE",89,0)
 S IBL="Require UR: ",IBY=$$YN($P(IB40,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",90,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",91,0)
 S IBL="PCN: ",IBY=$P(IB40,U,11) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",92,0)
 S IBL="Require Amb Cert: ",IBY=$$YN($P(IB40,U,6)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",93,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",94,0)
 S IBL="Require Pre-Cert: ",IBY=$$YN($P(IB40,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",95,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",96,0)
 ;
"RTN","IBCNBLE",97,0)
 S IBL="Type of Plan: ",IBY=$P($G(^IBE(355.1,+$P(IB40,U,9),0)),U,1) S IBLINE=$$SETL("",IBY,IBL,16,25)
"RTN","IBCNBLE",98,0)
 S IBL="Exclude Pre-Cond: ",IBY=$$YN($P(IB40,U,7)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",99,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",100,0)
 S IBL="Benefits Assignable: ",IBY=$$YN($P(IB40,U,8)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",101,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",102,0)
 ;
"RTN","IBCNBLE",103,0)
 D SET(" ") S IBY=$J("",26)_"Policy/Subscriber Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",104,0)
 S IBL="Whose Insurance: ",IBY=$$EXPAND^IBTRE(355.33,60.05,$P(IB60,U,5)) S IBLINE=$$SETL("",IBY,IBL,18,7)
"RTN","IBCNBLE",105,0)
 S IBL="Effective: ",IBY=$$DATE($P(IB60,U,2)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,8)
"RTN","IBCNBLE",106,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",107,0)
 S IBL="Expiration: ",IBY=$$DATE($P(IB60,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",108,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",109,0)
 S IBL="Insured's Name: ",IBY=$P(IB91,U,1) S IBLINE=$$SETL("",IBY,IBL,18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",110,0)
 I $TR($E(IBY,57,130)," ","")'="" S IBLINE=$$SETL("",$E(IBY,57,130),"",18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",111,0)
 I $TR($E(IBY,113,130)," ","")'="" S IBLINE=$$SETL("",$E(IBY,113,130),"",18,18) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",112,0)
 S IBL="Subscriber Id: ",IBY=$P(IB90,U,3) S IBLINE=$$SETL("",IBY,IBL,18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",113,0)
 I $TR($E(IBY,57,80)," ","")'="" S IBLINE=$$SETL("",$E(IBY,57,80),"",18,24) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",114,0)
 ;
"RTN","IBCNBLE",115,0)
 S IBL="Relationship: ",IBY=$$EXPAND^IBTRE(355.33,60.06,$P(IB60,U,6)) S IBLINE=$$SETL("",IBY,IBL,18,16)
"RTN","IBCNBLE",116,0)
 S IBL="Primary Provider: ",IBY=$P(IB60,U,10) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",117,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",118,0)
 S IBL="Provider Phone: ",IBY=$P(IB60,U,11) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",119,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",120,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,8)'="") S IBL="Insured's DOB: ",IBY=$$DATE($P(IB60,U,8)) S IBLINE=$$SETL("",IBY,IBL,18,8)
"RTN","IBCNBLE",121,0)
 S IBL="Coord of Benefits: ",IBY=$$EXPAND^IBTRE(355.33,60.12,$P(IB60,U,12)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",122,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",123,0)
 ;
"RTN","IBCNBLE",124,0)
 I $P(IB60,U,15)'=""!($P(IB60,U,16)'="") D      ; IB*2*452 - esg - display Pharmacy fields if they exist
"RTN","IBCNBLE",125,0)
 . S IBL="Rx Relationship: ",IBY=""
"RTN","IBCNBLE",126,0)
 . N G S G=+$P(IB60,U,15)
"RTN","IBCNBLE",127,0)
 . I G S IBY=$$GET1^DIQ(9002313.19,G_",",.01)_" - "_$$GET1^DIQ(9002313.19,G_",",.02)
"RTN","IBCNBLE",128,0)
 . S IBLINE=$$SETL("",IBY,IBL,18,20)
"RTN","IBCNBLE",129,0)
 . S IBL="Rx Person Code: ",IBY=$P(IB60,U,16),IBLINE=$$SETL(IBLINE,IBY,IBL,62,10)
"RTN","IBCNBLE",130,0)
 . D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",131,0)
 . Q
"RTN","IBCNBLE",132,0)
 ;
"RTN","IBCNBLE",133,0)
 I $P(IB62,U,1)'="" S IBL="Patient Id: ",IBY=$P(IB62,U,1) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",134,0)
 I IBLINE'="" D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",135,0)
 ;
"RTN","IBCNBLE",136,0)
 I '$P(IB61,U,1) D SET(" ") S IBL="Employer Sponsored Group Health Plan?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,40,3) D SET(IBLINE) S IBLINE="" G NXT
"RTN","IBCNBLE",137,0)
 ;
"RTN","IBCNBLE",138,0)
 D ADDR(61,6)
"RTN","IBCNBLE",139,0)
 D SET(" ") S IBY=$J("",24)_"Subscriber's Employer Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",140,0)
 S IBL="Employer Sponsored?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",141,0)
 S IBL="Employment Status: ",IBY=$$EXPAND^IBTRE(355.33,61.03,$P(IB61,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",142,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",143,0)
 S IBL="Claim to Employer: ",IBY=$$YN($P(IB61,U,5)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",144,0)
 S IBL="Retirement Date: ",IBY=$$DATE($P(IB61,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,8)
"RTN","IBCNBLE",145,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",146,0)
 S IBL="Employer Name: ",IBY=$P(IB61,U,2) S IBLINE=$$SETL("",IBY,IBL,16,30)
"RTN","IBCNBLE",147,0)
 S IBL="Employer Phone: ",IBY=$P(IB61,U,12) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",148,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",149,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64)
"RTN","IBCNBLE",150,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",151,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",152,0)
 ;
"RTN","IBCNBLE",153,0)
NXT ;
"RTN","IBCNBLE",154,0)
 D SET(" ") S IBY=$J("",26)_"Buffer Entry Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",155,0)
 S IBL="Date Entered: ",IBY=$$FMTE^XLFDT($P(IB0,U,1),2) S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",156,0)
 S IBL="Date Verified: ",IBY=$$FMTE^XLFDT($P(IB0,U,10),2) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",157,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",158,0)
 S IBL="Entered By: ",IBY=$$EXPAND^IBTRE(355.33,.02,$P(IB0,U,2)) S IBLINE=$$SETL("",IBY,IBL,18,40)
"RTN","IBCNBLE",159,0)
 S IBL="Verified By: ",IBY=$$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",160,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",161,0)
 ; service date / service code
"RTN","IBCNBLE",162,0)
 D SERVLN(IBBUFDA,.SRVARRAY) I SRVARRAY F IBI=1:1:SRVARRAY D SET(SRVARRAY(IBI))
"RTN","IBCNBLE",163,0)
 K SRVARRAY
"RTN","IBCNBLE",164,0)
 ;
"RTN","IBCNBLE",165,0)
 S IBLINE=$$TRACE(IBLINE,IBBUFDA)       ; eIIV trace #
"RTN","IBCNBLE",166,0)
 S IBL="eIV Processed Date: ",IBY=$S($P(IB0,U,15)="":"",1:$$FMTE^XLFDT($P(IB0,U,15),"2M"))
"RTN","IBCNBLE",167,0)
 S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",168,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",169,0)
 S IBL="Source: ",IBY=$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBLE",170,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",171,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",172,0)
 ;
"RTN","IBCNBLE",173,0)
 ; Call another routine for continuation of list build
"RTN","IBCNBLE",174,0)
 D BLD^IBCNBLE1
"RTN","IBCNBLE",175,0)
 ;
"RTN","IBCNBLE",176,0)
BLDQ Q
"RTN","IBCNBLE",177,0)
 ;
"RTN","IBCNBLE",178,0)
 ;
"RTN","IBCNBLE",179,0)
SETL(LINE,DATA,LABEL,COL,LNG) ;
"RTN","IBCNBLE",180,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNBLE",181,0)
 Q LINE
"RTN","IBCNBLE",182,0)
 ;
"RTN","IBCNBLE",183,0)
SET(LINE,SPEC) ;
"RTN","IBCNBLE",184,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLE",185,0)
 S ^TMP("IBCNBLE",$J,VALMCNT,0)=LINE
"RTN","IBCNBLE",186,0)
 I $G(SPEC)="B" D CNTRL^VALM10(VALMCNT,1,80,IOINHI,IOINORM)
"RTN","IBCNBLE",187,0)
 Q
"RTN","IBCNBLE",188,0)
 ;
"RTN","IBCNBLE",189,0)
DATE(X) ;
"RTN","IBCNBLE",190,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLE",191,0)
 Q Y
"RTN","IBCNBLE",192,0)
 ;
"RTN","IBCNBLE",193,0)
YN(X) ;
"RTN","IBCNBLE",194,0)
 N Y S X=$G(X),Y=$S(X=1:"Yes",X=0:"No",1:"")
"RTN","IBCNBLE",195,0)
 Q Y
"RTN","IBCNBLE",196,0)
 ;
"RTN","IBCNBLE",197,0)
ADDR(NODE,FLD) ; format address for output
"RTN","IBCNBLE",198,0)
 N IBY,IB0,IBCS,IBST,IBZIP,IBJ,IBZ,IBX K ADDR S ADDR(1)=""
"RTN","IBCNBLE",199,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,NODE))
"RTN","IBCNBLE",200,0)
 S IBCS=$P(IB0,U,FLD+3),IBST=$P($G(^DIC(5,+$P(IB0,U,FLD+4),0)),U,2),IBZIP=$P(IB0,U,FLD+5)
"RTN","IBCNBLE",201,0)
 S IBZIP=$E(IBZIP,1,5)_$S($E(IBZIP,6,9)'="":"-"_$E(IBZIP,6,9),1:"")
"RTN","IBCNBLE",202,0)
 S IBST=IBST_$S(IBST=""!(IBZIP=""):"",1:"  ")_IBZIP
"RTN","IBCNBLE",203,0)
 S IBCS=IBCS_$S(IBCS=""!(IBST=""):"",1:", ")_IBST
"RTN","IBCNBLE",204,0)
 ;
"RTN","IBCNBLE",205,0)
 S IBJ=1 F IBY=$P(IB0,U,FLD),$P(IB0,U,(FLD+1)),$P(IB0,U,(FLD+2)),IBCS I IBY'="" S IBX=$G(ADDR(IBJ)),IBZ=", " D
"RTN","IBCNBLE",206,0)
 . S:IBX="" IBZ="" S:($L(IBX)+2+$L(IBY))>64 IBZ="",IBJ=IBJ+1
"RTN","IBCNBLE",207,0)
 . S ADDR(IBJ)=$G(ADDR(IBJ))_IBZ_IBY
"RTN","IBCNBLE",208,0)
 Q
"RTN","IBCNBLE",209,0)
 ;
"RTN","IBCNBLE",210,0)
TRACE(IBLINE,IBBUFDA) ; Add the eIIV Trace Number to the display
"RTN","IBCNBLE",211,0)
 NEW RESP,TRACENUM,IBL,IBY
"RTN","IBCNBLE",212,0)
 I '$G(IBBUFDA) G TRACEX
"RTN","IBCNBLE",213,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)          ; response ien
"RTN","IBCNBLE",214,0)
 S TRACENUM=""
"RTN","IBCNBLE",215,0)
 I RESP S TRACENUM=$P($G(^IBCN(365,RESP,0)),U,9)   ; trace# field
"RTN","IBCNBLE",216,0)
 S IBL="eIV Trace #: ",IBY=TRACENUM               ; field label/data
"RTN","IBCNBLE",217,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)             ; add it
"RTN","IBCNBLE",218,0)
TRACEX ;
"RTN","IBCNBLE",219,0)
 Q IBLINE
"RTN","IBCNBLE",220,0)
 ;
"RTN","IBCNBLE",221,0)
SERVLN(IBBUFDA,SRVARRAY) ; create a service date/service type line for the display
"RTN","IBCNBLE",222,0)
 N NODE0,RIEN,SRVCODE,SRVDT,SRVSTR,TQIEN
"RTN","IBCNBLE",223,0)
 S SRVSTR=""
"RTN","IBCNBLE",224,0)
 I '$G(IBBUFDA) G SERVLNX
"RTN","IBCNBLE",225,0)
 ;IB*2.0*519 Start: Fix retrieving RIEN and TQIEN so display gets correct values
"RTN","IBCNBLE",226,0)
 S RIEN=+$O(^IBCN(365,"AF",IBBUFDA,""))
"RTN","IBCNBLE",227,0)
 S TQIEN=+$O(^IBCN(365.1,"D",IBBUFDA,""),-1)
"RTN","IBCNBLE",228,0)
 I TQIEN=0 S TQIEN=$P($G(^IBCN(365,RIEN,0)),U,5)
"RTN","IBCNBLE",229,0)
 ;IB*2.0*519 End: Fix retrieving RIEN and TQIEN so display gets correct values
"RTN","IBCNBLE",230,0)
 ;
"RTN","IBCNBLE",231,0)
 S (SRVDT,SRVCODE)="" I TQIEN D
"RTN","IBCNBLE",232,0)
 .S NODE0=$G(^IBCN(365.1,TQIEN,0)),SRVCODE=$P(NODE0,U,20)
"RTN","IBCNBLE",233,0)
 .;S RIEN=+$O(^IBCN(365,"AF",IBBUFDA,""))  ;IB*2.0*519: RIEN already retrieved above
"RTN","IBCNBLE",234,0)
 .I RIEN S SRVDT=$P($G(^IBCN(365,RIEN,1)),U,10) ; try to get service date from file 365
"RTN","IBCNBLE",235,0)
 .I SRVDT="" S SRVDT=$P(NODE0,U,12) ; if unsuccessful, get it from file 365.1
"RTN","IBCNBLE",236,0)
 .Q
"RTN","IBCNBLE",237,0)
 S SRVSTR="** This response is based on service date "_$S(SRVDT:$$FMTE^XLFDT(SRVDT,"5Z"),1:"UNKNOWN")
"RTN","IBCNBLE",238,0)
 S SRVSTR=SRVSTR_" and service type: "_$S(SRVCODE:$P($G(^IBE(365.013,SRVCODE,0)),U,2),1:"UNKNOWN")_" **"
"RTN","IBCNBLE",239,0)
SERVLNX ;
"RTN","IBCNBLE",240,0)
 D FSTRNG^IBJU1(SRVSTR,79,.SRVARRAY)
"RTN","IBCNBLE",241,0)
 Q
"RTN","IBCNBLL")
0^14^B139954762^B138729075
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438,435,506,519**;21-MAR-94;Build 56
"RTN","IBCNBLL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
 ; DBIA# 642 for call to $$LST^DGMTU
"RTN","IBCNBLL",6,0)
 ; DBIA# 4433 for call to $$SDAPI^SDAMA301
"RTN","IBCNBLL",7,0)
 ;
"RTN","IBCNBLL",8,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",9,0)
 N VIEW,AVIEW,DFLG,IBKEYS
"RTN","IBCNBLL",10,0)
 S VIEW=6,AVIEW=0 ; default to complete view ;IB*2*506/taz changed
"RTN","IBCNBLL",11,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",12,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",13,0)
 Q
"RTN","IBCNBLL",14,0)
 ;
"RTN","IBCNBLL",15,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",16,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",17,0)
 D INIT,HDR
"RTN","IBCNBLL",18,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",19,0)
 Q
"RTN","IBCNBLL",20,0)
 ;
"RTN","IBCNBLL",21,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",22,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",23,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",24,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active" ;IB*2*506/taz Only shows Verified and Active records.
"RTN","IBCNBLL",25,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active"  ;IB*2*506/taz Only shows Verified and N/Active records.
"RTN","IBCNBLL",26,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",27,0)
 I VIEW=4 S VALM("TITLE")="Failure Buffer",VALMSG="!Unable/Send"  ;IB*2*506/taz changed
"RTN","IBCNBLL",28,0)
 I VIEW=5 S VALM("TITLE")="e-Pharmacy Buffer",VALMSG="*Verified"     ; IB*2*435
"RTN","IBCNBLL",29,0)
 I VIEW=6 S VALM("TITLE")="Complete Buffer",VALMSG=""     ; IB*2*506/taz added
"RTN","IBCNBLL",30,0)
 Q
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",33,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",34,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",35,0)
 S IBKEYS=$$GETKEYS(DUZ) ;IB*2*506/taz user must have either IB INSURANCE EDIT or IB GROUP/PLAN EDIT in order to view entries without defined insurance company entries
"RTN","IBCNBLL",36,0)
 D BLD
"RTN","IBCNBLL",37,0)
 Q
"RTN","IBCNBLL",38,0)
 ;
"RTN","IBCNBLL",39,0)
HELP ;  list manager help
"RTN","IBCNBLL",40,0)
 D FULL^VALM1
"RTN","IBCNBLL",41,0)
 S VALMBCK="R"
"RTN","IBCNBLL",42,0)
 W @IOF
"RTN","IBCNBLL",43,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",44,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",45,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",46,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",47,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",48,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",49,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",50,0)
 W !
"RTN","IBCNBLL",51,0)
 ;D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",52,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",53,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",54,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",55,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",56,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",57,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",58,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",59,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",60,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",61,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",62,0)
 W !,"   X - e-Pharmacy"           ; IB*2*435
"RTN","IBCNBLL",63,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",64,0)
 ;
"RTN","IBCNBLL",65,0)
 I VIEW'=5 D     ; IB*2*435
"RTN","IBCNBLL",66,0)
 . W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",67,0)
 . W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",68,0)
 . Q
"RTN","IBCNBLL",69,0)
 ;
"RTN","IBCNBLL",70,0)
 I VIEW=1 D
"RTN","IBCNBLL",71,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",72,0)
 .W !,"      $ - Escalated active policy."
"RTN","IBCNBLL",73,0)
 .W !,"      * - Previously an active policy."
"RTN","IBCNBLL",74,0)
 .Q
"RTN","IBCNBLL",75,0)
 I VIEW=2 D
"RTN","IBCNBLL",76,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",77,0)
 .W !,"      * - Previously an not active policy."
"RTN","IBCNBLL",78,0)
 .Q
"RTN","IBCNBLL",79,0)
 I $F(",3,6,",VIEW) D
"RTN","IBCNBLL",80,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",81,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",82,0)
 .W !,"      $ - Escalated Active policy."
"RTN","IBCNBLL",83,0)
 .W !,"      * - Previously either an active or not active policy."
"RTN","IBCNBLL",84,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",85,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",86,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",87,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",88,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",89,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",90,0)
 .Q
"RTN","IBCNBLL",91,0)
 I VIEW=4 D
"RTN","IBCNBLL",92,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",93,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",94,0)
 .Q
"RTN","IBCNBLL",95,0)
 ;
"RTN","IBCNBLL",96,0)
 I VIEW=5 D      ; IB*2*435
"RTN","IBCNBLL",97,0)
 . W !,"      e-Pharmacy buffer entries are not applicable for e-IV processing."
"RTN","IBCNBLL",98,0)
 . Q
"RTN","IBCNBLL",99,0)
 ;
"RTN","IBCNBLL",100,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",101,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",102,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",103,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",104,0)
 W !
"RTN","IBCNBLL",105,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",106,0)
 W !!
"RTN","IBCNBLL",107,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",108,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",109,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",110,0)
 W !!
"RTN","IBCNBLL",111,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",112,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",113,0)
 Q
"RTN","IBCNBLL",114,0)
 ;
"RTN","IBCNBLL",115,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",116,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",117,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",118,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",119,0)
 Q
"RTN","IBCNBLL",120,0)
 ;
"RTN","IBCNBLL",121,0)
BLD ;  build screen display
"RTN","IBCNBLL",122,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",123,0)
 ;
"RTN","IBCNBLL",124,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",125,0)
 ;
"RTN","IBCNBLL",126,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",127,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",128,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",129,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",130,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",131,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG) I IBLINE="" S IBCNT=IBCNT-1 Q  ; IB*2*506/taz If line is null stop processing this entry.
"RTN","IBCNBLL",132,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",133,0)
 ;
"RTN","IBCNBLL",134,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",135,0)
 Q
"RTN","IBCNBLL",136,0)
 ;
"RTN","IBCNBLL",137,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",138,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",139,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",140,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",141,0)
 ;
"RTN","IBCNBLL",142,0)
 I 'IBKEYS,'$$ACTIVE(DFN) G BLDLNQ  ;IB*2*506/taz Only allow active insurance for users not holding IB INSURANCE EDIT or IB GROUP/PLAN EDIT keys
"RTN","IBCNBLL",143,0)
 ;
"RTN","IBCNBLL",144,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",145,0)
 ;
"RTN","IBCNBLL",146,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",147,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",148,0)
 ;
"RTN","IBCNBLL",149,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",150,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",151,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",152,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",153,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",154,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",155,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",156,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",157,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",158,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",159,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",160,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",161,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",162,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",163,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",164,0)
BLDLNQ ; IB*2*506/taz Tag added
"RTN","IBCNBLL",165,0)
 Q IBLINE
"RTN","IBCNBLL",166,0)
 ;
"RTN","IBCNBLL",167,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",168,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",169,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",170,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",171,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",172,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",173,0)
 Q
"RTN","IBCNBLL",174,0)
 ;
"RTN","IBCNBLL",175,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",176,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",177,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,MWNRFLG,MWNRIEN,X,Y
"RTN","IBCNBLL",178,0)
 S IBCNT=0
"RTN","IBCNBLL",179,0)
 ;
"RTN","IBCNBLL",180,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",181,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",182,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",183,0)
 ;
"RTN","IBCNBLL",184,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",185,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",186,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",187,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",188,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",189,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",190,0)
 ..;
"RTN","IBCNBLL",191,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",192,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",193,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",194,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",195,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",196,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",197,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",198,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",199,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",200,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",201,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",202,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",203,0)
 ..;
"RTN","IBCNBLL",204,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",205,0)
 ..;
"RTN","IBCNBLL",206,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",207,0)
 ..; get future appointments
"RTN","IBCNBLL",208,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",209,0)
 ..S DFLG="" ;,APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag ;IB*2*506 appointment data removed.
"RTN","IBCNBLL",210,0)
 ..S MWNRFLG=0 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",211,0)
 ..I $$INCL(VIEW,MWNRFLG,SYM,IB0) S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",212,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",213,0)
 ..Q
"RTN","IBCNBLL",214,0)
 .Q
"RTN","IBCNBLL",215,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",216,0)
 Q
"RTN","IBCNBLL",217,0)
 ;
"RTN","IBCNBLL",218,0)
INCL(VIEW,MCFLAG,SYM,IB0) ;
"RTN","IBCNBLL",219,0)
 N INCL,IENS,IBEBI
"RTN","IBCNBLL",220,0)
 S INCL=0
"RTN","IBCNBLL",221,0)
 I 'IBKEYS,(SYM'="+") G INCLQ ; If users don't have the required keys, they can only see current Positive Entries
"RTN","IBCNBLL",222,0)
 I VIEW=6 S INCL=1 G INCLQ  ;Include Everything  (Complete view)
"RTN","IBCNBLL",223,0)
 I VIEW=5,$P(IB0,U,17) S INCL=1 G INCLQ  ;Only e-Pharmacy on e-Pharmacy view (IB*2*435)
"RTN","IBCNBLL",224,0)
 I $P(IB0,U,17) G INCLQ  ;Exclude e-Pharmacy (IB*2*435)
"RTN","IBCNBLL",225,0)
 I VIEW=3,MCFLAG S INCL=1 G INCLQ ;Only Medicare View
"RTN","IBCNBLL",226,0)
 I MCFLAG G INCLQ  ;Exclude Medicare from Positive, Negative and Failure Views
"RTN","IBCNBLL",227,0)
 I VIEW=4,(SYM="!") S INCL=1 G INCLQ  ;Only failures on Failure view
"RTN","IBCNBLL",228,0)
 I VIEW=1,((SYM="+")!(SYM="$")) S INCL=1 G INCLQ  ;Positive View
"RTN","IBCNBLL",229,0)
 I VIEW=2,(SYM="-") S INCL=1 G INCLQ  ;Negative View
"RTN","IBCNBLL",230,0)
 I SYM="*" D  G INCLQ
"RTN","IBCNBLL",231,0)
 . ;find history in Response file for verified entries.
"RTN","IBCNBLL",232,0)
 . I $$GET1^DIQ(355.33,IBBUFDA,.15)="" S:(VIEW=1) INCL=1 Q  ;IIV PROCESSED DATE field is empty entry is positive
"RTN","IBCNBLL",233,0)
 . S IENS="1,"_$O(^IBCN(365,"AF",IBBUFDA,""))_","
"RTN","IBCNBLL",234,0)
 . ;the following line of code is necessary to check for both "eIV Eligibility Determination" and "IIV Eligibility Determination" (IB*2.0*506)
"RTN","IBCNBLL",235,0)
 . I $$GET1^DIQ(365.02,IENS,.06)["IV Eligibility Determination" Q
"RTN","IBCNBLL",236,0)
 . S IBEBI=$$GET1^DIQ(365.02,IENS,.02)  ;Eligibility/Benefits Info
"RTN","IBCNBLL",237,0)
 . I IBEBI=1 S:(VIEW=1) INCL=1 Q
"RTN","IBCNBLL",238,0)
 . I VIEW=2 S INCL=1 Q
"RTN","IBCNBLL",239,0)
INCLQ ;
"RTN","IBCNBLL",240,0)
 Q INCL
"RTN","IBCNBLL",241,0)
 ;
"RTN","IBCNBLL",242,0)
DATE(X) ;
"RTN","IBCNBLL",243,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",244,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",245,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",246,0)
 ;
"RTN","IBCNBLL",247,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",248,0)
 NEW IB0,SYM
"RTN","IBCNBLL",249,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",250,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",251,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",252,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",253,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",254,0)
 Q SYM
"RTN","IBCNBLL",255,0)
 ;
"RTN","IBCNBLL",256,0)
 ;
"RTN","IBCNBLL",257,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",258,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",259,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",260,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",261,0)
 ;
"RTN","IBCNBLL",262,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",263,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",264,0)
 ;
"RTN","IBCNBLL",265,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",266,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",267,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",268,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",269,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",270,0)
 ;
"RTN","IBCNBLL",271,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",272,0)
 ; the display array
"RTN","IBCNBLL",273,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",274,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",275,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",276,0)
 Q
"RTN","IBCNBLL",277,0)
 ;
"RTN","IBCNBLL",278,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",279,0)
 N CODSTR,I,SRCSTR,CODE
"RTN","IBCNBLL",280,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS^eRxEL"
"RTN","IBCNBLL",281,0)
 S CODSTR="I^D^V^P^E^H^M^R^C^X"
"RTN","IBCNBLL",282,0)
 S CODE=""
"RTN","IBCNBLL",283,0)
 I $G(SRC)'="" F I=1:1:10 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",284,0)
 Q CODE
"RTN","IBCNBLL",285,0)
 ;
"RTN","IBCNBLL",286,0)
GETKEYS(DUZ) ; 
"RTN","IBCNBLL",287,0)
 ;Make sure that user has the INSURANCE EDIT key and/or the GROUP/PLAN EDIT key.  User
"RTN","IBCNBLL",288,0)
 ;must have either key in order to see non_Positive Entries.
"RTN","IBCNBLL",289,0)
 N KEY1,KEY2
"RTN","IBCNBLL",290,0)
 S KEY1=$O(^DIC(19.1,"B","IB INSURANCE COMPANY EDIT","")) I KEY1 S KEY1=$D(^VA(200,DUZ,51,KEY1))
"RTN","IBCNBLL",291,0)
 S KEY2=$O(^DIC(19.1,"B","IB GROUP PLAN EDIT","")) I KEY2 S KEY2=$D(^VA(200,DUZ,51,KEY2))
"RTN","IBCNBLL",292,0)
 Q KEY1!KEY2
"RTN","IBCNBLL",293,0)
 ;
"RTN","IBCNBLL",294,0)
ACTIVE(DFN) ;Check for active insurance
"RTN","IBCNBLL",295,0)
 N IBINSCO
"RTN","IBCNBLL",296,0)
 D ALL^IBCNS1(DFN,"IBINSCO",3,DT,0)  ;IB*2.0*519 allow WNRs and Indemnity plans
"RTN","IBCNBLL",297,0)
 Q +$G(IBINSCO(0))
"RTN","IBCNBMN")
0^15^B8591639^B7906645
"RTN","IBCNBMN",1,0)
IBCNBMN ;ALB/ARH-Ins Buffer: add new insurance file entrys ; 4/22/03 10:00am
"RTN","IBCNBMN",2,0)
 ;;2.0;INTEGRATED BILLING;**82,211,519**;21-MAR-94;Build 56
"RTN","IBCNBMN",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBMN",4,0)
 ;
"RTN","IBCNBMN",5,0)
 ;
"RTN","IBCNBMN",6,0)
NEWINS(IBBUFDA) ; add new insurance carrier entry in Insurance Company (#36) file
"RTN","IBCNBMN",7,0)
 ;
"RTN","IBCNBMN",8,0)
 N DIC,DA,DIE,DR,X,Y,DLAYGO,IBINSDA,IB20,IBINSNM,IBREIMB S IBINSDA=0,IB20=$G(^IBA(355.33,+$G(IBBUFDA),20))
"RTN","IBCNBMN",9,0)
 S IBINSNM=$P(IB20,U,1) I IBINSNM="" G NIQ
"RTN","IBCNBMN",10,0)
 ;
"RTN","IBCNBMN",11,0)
 S IBREIMB=$P(IB20,U,5) I IBREIMB'="" S DIC("DR")="1///"_IBREIMB ;                     will reimburse?
"RTN","IBCNBMN",12,0)
 K DD,DO S DIC="^DIC(36,",DIC(0)="L",X=IBINSNM,DLAYGO=36 D FILE^DICN I +Y>0  S IBINSDA=+Y
"RTN","IBCNBMN",13,0)
 ;
"RTN","IBCNBMN",14,0)
NIQ Q IBINSDA
"RTN","IBCNBMN",15,0)
 ;
"RTN","IBCNBMN",16,0)
NEWGRP(IBBUFDA,IBINSDA) ; add a new group/plan to the Group Insurance Plan (#355.3) file, also add standard fields
"RTN","IBCNBMN",17,0)
 ;
"RTN","IBCNBMN",18,0)
 N DIC,DA,DR,DIE,X,Y,DLAYGO,IBGRPDA,IB40,IBFIELDS,IBERR,IBXIFN S IBGRPDA=0,IB40=$G(^IBA(355.33,+$G(IBBUFDA),40))
"RTN","IBCNBMN",19,0)
 I '$D(^DIC(36,+$G(IBINSDA),0)) G NGQ
"RTN","IBCNBMN",20,0)
 I $P(IB40,U,1)=0,'$G(^IBA(355.33,+$G(IBBUFDA),60)) G NGQ
"RTN","IBCNBMN",21,0)
 ;
"RTN","IBCNBMN",22,0)
 K DA,DO S DIC="^IBA(355.3,",DIC(0)="L",X=IBINSDA,DLAYGO=355.3 D FILE^DICN I +Y'>0 G NGQ
"RTN","IBCNBMN",23,0)
 S IBGRPDA=+Y,IBXIFN=IBGRPDA_","
"RTN","IBCNBMN",24,0)
 ;
"RTN","IBCNBMN",25,0)
 S IBFIELDS(355.3,IBXIFN,.02)=$P(IB40,U,1) ;                                           group plan?
"RTN","IBCNBMN",26,0)
 I $P(IB40,U,1)=0 S IBFIELDS(355.3,IBXIFN,.1)=+$G(^IBA(355.33,+$G(IBBUFDA),60)) ;   individual plan patient
"RTN","IBCNBMN",27,0)
 D FILE^DIE("","IBFIELDS","IBERR")
"RTN","IBCNBMN",28,0)
 ;
"RTN","IBCNBMN",29,0)
 ; IB*2.0*519: If new group added, check to see if we already have a NIF ID for this insurance company.
"RTN","IBCNBMN",30,0)
 ; if no NIF and we have not yet requested one, send an HL7
"RTN","IBCNBMN",31,0)
 I '$$NIF^IBCNHUT1(+$G(IBINSDA)),'$D(^IBCNH(367.1,"INS",+$G(IBINSDA))) D SEND^IBCNHHLO(+$G(IBINSDA))
"RTN","IBCNBMN",32,0)
 ;
"RTN","IBCNBMN",33,0)
NGQ Q IBGRPDA
"RTN","IBCNBMN",34,0)
 ;
"RTN","IBCNBMN",35,0)
NEWPOL(IBBUFDA,IBINSDA,IBGRPDA) ; add a new patient policy to the Patient's Insurance Policys (2.312), also add standard fields
"RTN","IBCNBMN",36,0)
 ;
"RTN","IBCNBMN",37,0)
 N DIC,DA,DR,DIE,X,Y,IBPOLDA,IBFIELDS,IBERR,DFN,IBGRP,IBXIFN S IBPOLDA=0
"RTN","IBCNBMN",38,0)
 I '$D(^DIC(36,+$G(IBINSDA),0)) G NPQ
"RTN","IBCNBMN",39,0)
 S IBGRP=$G(^IBA(355.3,+$G(IBGRPDA),0)) I +IBGRP'=IBINSDA G NPQ
"RTN","IBCNBMN",40,0)
 S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) I 'DFN G NPQ
"RTN","IBCNBMN",41,0)
 I $P(IBGRP,U,10)'="",$P(IBGRP,U,10)'=DFN G NPQ
"RTN","IBCNBMN",42,0)
 ;
"RTN","IBCNBMN",43,0)
 ; IB*2*211
"RTN","IBCNBMN",44,0)
 L +^DPT(DFN,.312):5 I '$T D LOCKED^IBTRCD1 G NPQ
"RTN","IBCNBMN",45,0)
 I $G(^DPT(DFN,.312,0))="" S ^DPT(DFN,.312,0)="^2.312PAI^^"
"RTN","IBCNBMN",46,0)
 ;
"RTN","IBCNBMN",47,0)
 K DA,DO S DIC="^DPT("_DFN_",.312,",DIC(0)="L",X=IBINSDA,DA(1)=DFN D FILE^DICN I +Y'>0 G NPQ
"RTN","IBCNBMN",48,0)
 S IBPOLDA=+Y,IBXIFN=IBPOLDA_","_DFN_","
"RTN","IBCNBMN",49,0)
 ;
"RTN","IBCNBMN",50,0)
 S IBFIELDS(2.312,IBXIFN,.18)=IBGRPDA ;                                                 policy's group/plan
"RTN","IBCNBMN",51,0)
 S IBFIELDS(2.312,IBXIFN,1.09)=$P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,3) ;                source
"RTN","IBCNBMN",52,0)
 S IBFIELDS(2.312,IBXIFN,1.1)=+$G(^IBA(355.33,+$G(IBBUFDA),0)) ;                        source date
"RTN","IBCNBMN",53,0)
 D FILE^DIE("","IBFIELDS","IBERR")
"RTN","IBCNBMN",54,0)
 L -^DPT(DFN,.312)
"RTN","IBCNBMN",55,0)
 ;
"RTN","IBCNBMN",56,0)
NPQ Q IBPOLDA
"RTN","IBCNEHL4")
0^12^B176214857^B174792299
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,438,497,506,519**;21-MAR-94;Build 56
"RTN","IBCNEHL4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
 ; IB*2*519  Only fixed line 2 of the routine. Changed "..497*506" to "..497,506"
"RTN","IBCNEHL4",29,0)
 ; 
"RTN","IBCNEHL4",30,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",31,0)
 ;
"RTN","IBCNEHL4",32,0)
 ;  Input:
"RTN","IBCNEHL4",33,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",34,0)
 ;
"RTN","IBCNEHL4",35,0)
 ;  Output:
"RTN","IBCNEHL4",36,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",37,0)
 ;
"RTN","IBCNEHL4",38,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",39,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",40,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",41,0)
 ;
"RTN","IBCNEHL4",42,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",43,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",44,0)
 ;
"RTN","IBCNEHL4",45,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",46,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",47,0)
 ;
"RTN","IBCNEHL4",48,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",49,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",50,0)
 ;
"RTN","IBCNEHL4",51,0)
 ; Update record w/info
"RTN","IBCNEHL4",52,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",53,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",54,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",55,0)
 ;
"RTN","IBCNEHL4",56,0)
 ; Update w/internal values
"RTN","IBCNEHL4",57,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",60,0)
 ;
"RTN","IBCNEHL4",61,0)
 ; Update w/external values
"RTN","IBCNEHL4",62,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",63,0)
MSAX ;
"RTN","IBCNEHL4",64,0)
 Q
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",69,0)
 ;
"RTN","IBCNEHL4",70,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",71,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",72,0)
 ;
"RTN","IBCNEHL4",73,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",74,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",75,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",76,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",77,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",78,0)
 I TRACE="" D
"RTN","IBCNEHL4",79,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",80,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the Help Desk."
"RTN","IBCNEHL4",81,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",82,0)
 Q
"RTN","IBCNEHL4",83,0)
 ;
"RTN","IBCNEHL4",84,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",85,0)
 N DFN,DOB,DOD,FLD,ICN,IENSTR,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,STATE,XDFN,IDLIST
"RTN","IBCNEHL4",86,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",87,0)
 ;
"RTN","IBCNEHL4",88,0)
 S ERFLG=0
"RTN","IBCNEHL4",89,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",90,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",91,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",92,0)
 ;
"RTN","IBCNEHL4",93,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",94,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",95,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",96,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",97,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",98,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",99,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",100,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",102,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",103,0)
 ;
"RTN","IBCNEHL4",104,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",105,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",106,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",107,0)
 ;
"RTN","IBCNEHL4",108,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",109,0)
 I ICN'="" D
"RTN","IBCNEHL4",110,0)
 .S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",111,0)
 .; if unsuccessful, wait 5 sec and try one more time
"RTN","IBCNEHL4",112,0)
 .I +$G(XDFN)'>0 H 5 S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",113,0)
 .Q
"RTN","IBCNEHL4",114,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",115,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",116,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",117,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",118,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIV was unable to file the response information."
"RTN","IBCNEHL4",119,0)
 ;
"RTN","IBCNEHL4",120,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",121,0)
 ;
"RTN","IBCNEHL4",122,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",123,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",124,0)
 ;
"RTN","IBCNEHL4",125,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",126,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,IENSTR,.02)=DFN
"RTN","IBCNEHL4",127,0)
 S RSUPDT(365,IENSTR,1.02)=DOB,RSUPDT(365,IENSTR,1.04)=SEX
"RTN","IBCNEHL4",128,0)
 S RSUPDT(365,IENSTR,1.03)=SSN,RSUPDT(365,IENSTR,1.16)=DOD
"RTN","IBCNEHL4",129,0)
 S RSUPDT(365,IENSTR,1.08)="v"
"RTN","IBCNEHL4",130,0)
 S RSUPDT(365,IENSTR,1.09)="01"
"RTN","IBCNEHL4",131,0)
 ; Subscriber address
"RTN","IBCNEHL4",132,0)
 S FLD=$G(IBSEG(12))
"RTN","IBCNEHL4",133,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",134,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",135,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",136,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",137,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",138,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",139,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",140,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",141,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",142,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",143,0)
 K RSUPDT
"RTN","IBCNEHL4",144,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",145,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",146,0)
PIDX ;
"RTN","IBCNEHL4",147,0)
 Q
"RTN","IBCNEHL4",148,0)
 ;
"RTN","IBCNEHL4",149,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",150,0)
 ;
"RTN","IBCNEHL4",151,0)
 ; Input:
"RTN","IBCNEHL4",152,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",153,0)
 ;
"RTN","IBCNEHL4",154,0)
 ; Output:
"RTN","IBCNEHL4",155,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",156,0)
 ;
"RTN","IBCNEHL4",157,0)
 N DOB,IENSTR,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",158,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",159,0)
 S SSN=$G(IBSEG(13)) ; fsc NO LONGER SENDS SSN
"RTN","IBCNEHL4",160,0)
 ; 
"RTN","IBCNEHL4",161,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",162,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",163,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",164,0)
 ;
"RTN","IBCNEHL4",165,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",166,0)
 ;
"RTN","IBCNEHL4",167,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",168,0)
 S RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",169,0)
 S:DOB'="" RSUPDT(365,IENSTR,1.02)=DOB
"RTN","IBCNEHL4",170,0)
 S RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",171,0)
 S RSUPDT(365,IENSTR,1.03)=SSN
"RTN","IBCNEHL4",172,0)
 S RSUPDT(365,IENSTR,1.18)=SUBID
"RTN","IBCNEHL4",173,0)
 ; Subscriber address
"RTN","IBCNEHL4",174,0)
 S FLD=$G(IBSEG(6))
"RTN","IBCNEHL4",175,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",176,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",177,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",178,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",179,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",180,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",181,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",182,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",183,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",184,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",185,0)
 K RSUPDT
"RTN","IBCNEHL4",186,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",187,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",188,0)
GT1X ;
"RTN","IBCNEHL4",189,0)
 Q
"RTN","IBCNEHL4",190,0)
 ;
"RTN","IBCNEHL4",191,0)
ZHS(EBDA,ERROR,IBSEG,RIEN) ; Process ZHS Healthcare services delivery segment
"RTN","IBCNEHL4",192,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",193,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",194,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",195,0)
 S RSUPDT(365.27,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,7,"B",""),-1)+1 ; ZHS sequence
"RTN","IBCNEHL4",196,0)
 ; Benefit quantity & qualifier
"RTN","IBCNEHL4",197,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",198,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.02)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",199,0)
 ; Sampling frequency & qualifier
"RTN","IBCNEHL4",200,0)
 S QUAL=$P($G(IBSEG(5)),HLCMP),VALUE=$G(IBSEG(6))
"RTN","IBCNEHL4",201,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.04)=VALUE,RSUPDT(365.27,IENSTR,.05)=QUAL
"RTN","IBCNEHL4",202,0)
 ; Time period & qualifier
"RTN","IBCNEHL4",203,0)
 S QUAL=$P($G(IBSEG(7)),HLCMP),VALUE=$G(IBSEG(8))
"RTN","IBCNEHL4",204,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.06)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.07)=QUAL
"RTN","IBCNEHL4",205,0)
 S RSUPDT(365.27,IENSTR,.08)=$P($G(IBSEG(9)),HLCMP) ; Delivery frequency
"RTN","IBCNEHL4",206,0)
 S RSUPDT(365.27,IENSTR,.09)=$P($G(IBSEG(10)),HLCMP) ; Delivery pattern
"RTN","IBCNEHL4",207,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",208,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",209,0)
 Q
"RTN","IBCNEHL4",210,0)
 ;
"RTN","IBCNEHL4",211,0)
ZRF(EBDA,ERROR,IBSEG,RIEN) ; Process ZRF Reference identification segment
"RTN","IBCNEHL4",212,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",213,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",214,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",215,0)
 S RSUPDT(365.291,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,10,"B",""),-1)+1 ; ZRF sequence
"RTN","IBCNEHL4",216,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",217,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",218,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.291,IENSTR,.02)=VALUE,RSUPDT(365.291,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",219,0)
 S RSUPDT(365.291,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL4",220,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",221,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",222,0)
 Q
"RTN","IBCNEHL4",223,0)
 ;
"RTN","IBCNEHL4",224,0)
ZSD(EBDA,ERROR,IBSEG,RIEN) ; Process ZSD Subscriber date segment
"RTN","IBCNEHL4",225,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",226,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",227,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",228,0)
 S RSUPDT(365.28,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,8,"B",""),-1)+1 ; ZSD sequence
"RTN","IBCNEHL4",229,0)
 ; Date & qualifier
"RTN","IBCNEHL4",230,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL4",231,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.28,IENSTR,.02)=VALUE,RSUPDT(365.28,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",232,0)
 S RSUPDT(365.28,IENSTR,.04)=$P($G(IBSEG(4)),HLCMP) ; Date format
"RTN","IBCNEHL4",233,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",234,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",235,0)
 Q
"RTN","IBCNEHL4",236,0)
 ;
"RTN","IBCNEHL4",237,0)
ZII(EBDA,ERROR,IBSEG,RIEN) ; Process ZII Subscriber additional info segment
"RTN","IBCNEHL4",238,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",239,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",240,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",241,0)
 S RSUPDT(365.29,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,9,"B",""),-1)+1 ; ZII sequence
"RTN","IBCNEHL4",242,0)
 ; place of service or diagnosis (if qualifier is "BF" or "BK") & qualifier
"RTN","IBCNEHL4",243,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",244,0)
 ; IB*2*497 set up for Nature of Injury type qualifiers "GR", "NI", or null value
"RTN","IBCNEHL4",245,0)
 I (QUAL="")!(".GR.NI."[("."_QUAL_".")) D
"RTN","IBCNEHL4",246,0)
 . S RSUPDT(365.29,IENSTR,.05)=$P($G(IBSEG(5)),U,2) ;nature of injury code
"RTN","IBCNEHL4",247,0)
 . S RSUPDT(365.29,IENSTR,.06)=$P($G(IBSEG(6)),U,2) ; nature of injury code category
"RTN","IBCNEHL4",248,0)
 . S RSUPDT(365.29,IENSTR,.07)=$G(IBSEG(7))  ; nature of injury code free text description
"RTN","IBCNEHL4",249,0)
 E  S RSUPDT(365.29,IENSTR,$S(".BF.BK."[("."_QUAL_"."):.03,1:.02))=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL4",250,0)
 S RSUPDT(365.29,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",251,0)
 D CODECHK^IBCNEHLU(.RSUPDT) ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",252,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",253,0)
 Q
"RTN","IBCNEHL4",254,0)
 ;
"RTN","IBCNEHL4",255,0)
ZTY(EBDA,ERROR,IBSEG,RIEN) ; Process ZTY Benefit related entity segment
"RTN","IBCNEHL4",256,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",257,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",258,0)
 S IENSTR=EBDA_","_RIEN_","
"RTN","IBCNEHL4",259,0)
 ; Entity id code & qualifier
"RTN","IBCNEHL4",260,0)
 S QUAL=$P($G(IBSEG(4)),HLCMP),VALUE=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",261,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.01)=VALUE,RSUPDT(365.02,IENSTR,3.02)=QUAL
"RTN","IBCNEHL4",262,0)
 ; Entity name
"RTN","IBCNEHL4",263,0)
 S FLD=$G(IBSEG(5))
"RTN","IBCNEHL4",264,0)
 ;S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)
"RTN","IBCNEHL4",265,0)
 S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_" "_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)  ;ib*2*497  prevent orphan commas
"RTN","IBCNEHL4",266,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",267,0)
 ;I $TR(RSUPDT(365.02,IENSTR,3.03),", ")="" K RSUPDT(365.02,IENSTR,3.03)
"RTN","IBCNEHL4",268,0)
 I $TR(RSUPDT(365.02,IENSTR,3.03)," ")="" K RSUPDT(365.02,IENSTR,3.03)  ;ib*2*497  remove comma from $TR statement
"RTN","IBCNEHL4",269,0)
 ; Entity id & qualifier
"RTN","IBCNEHL4",270,0)
 S QUAL=$P($G(IBSEG(6)),HLCMP),VALUE=$G(IBSEG(7))
"RTN","IBCNEHL4",271,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.04)=VALUE,RSUPDT(365.02,IENSTR,3.05)=QUAL
"RTN","IBCNEHL4",272,0)
 ; IB*2*497 - entity relationship code
"RTN","IBCNEHL4",273,0)
 S RSUPDT(365.02,IENSTR,3.06)=$G(IBSEG(14))
"RTN","IBCNEHL4",274,0)
 ; Entity address
"RTN","IBCNEHL4",275,0)
 S FLD=$G(IBSEG(8))
"RTN","IBCNEHL4",276,0)
 S RSUPDT(365.02,IENSTR,4.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",277,0)
 S RSUPDT(365.02,IENSTR,4.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",278,0)
 S RSUPDT(365.02,IENSTR,4.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",279,0)
 S VALUE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I VALUE>0 S RSUPDT(365.02,IENSTR,4.04)=VALUE ; state
"RTN","IBCNEHL4",280,0)
 S RSUPDT(365.02,IENSTR,4.05)=$P(FLD,HLCMP,5) ; zip / postal code
"RTN","IBCNEHL4",281,0)
 S RSUPDT(365.02,IENSTR,4.06)=$P(FLD,HLCMP,6) ; country code
"RTN","IBCNEHL4",282,0)
 S RSUPDT(365.02,IENSTR,4.09)=$P(FLD,HLCMP,8) ; country subdivision code
"RTN","IBCNEHL4",283,0)
 ; Entity location & qualifier
"RTN","IBCNEHL4",284,0)
 S QUAL=$G(IBSEG(9)),VALUE=$G(IBSEG(10))
"RTN","IBCNEHL4",285,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,4.07)=VALUE,RSUPDT(365.02,IENSTR,4.08)=QUAL
"RTN","IBCNEHL4",286,0)
 ; Provider code
"RTN","IBCNEHL4",287,0)
 S RSUPDT(365.02,IENSTR,5.01)=$P($G(IBSEG(11)),HLCMP)
"RTN","IBCNEHL4",288,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",289,0)
 S QUAL=$P($G(IBSEG(12)),HLCMP),VALUE=$G(IBSEG(13))
"RTN","IBCNEHL4",290,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,5.02)=VALUE,RSUPDT(365.02,IENSTR,5.03)=QUAL
"RTN","IBCNEHL4",291,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",292,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",293,0)
 Q
"RTN","IBCNEHL4",294,0)
 ;
"RTN","IBCNEHL4",295,0)
G2OCTD(EBDA,ERROR,IBSEG,RIEN) ; Process G2O.CTD Benefit related entity contact data segment
"RTN","IBCNEHL4",296,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",297,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",298,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",299,0)
 S RSUPDT(365.26,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,6,"B",""),-1)+1 ; G2O.CTD sequence
"RTN","IBCNEHL4",300,0)
 ; Contact name
"RTN","IBCNEHL4",301,0)
 S FLD=$G(IBSEG(3))
"RTN","IBCNEHL4",302,0)
 S RSUPDT(365.26,IENSTR,.02)=$P(FLD,HLCMP,5)_" "_$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)_" "_$P(FLD,HLCMP,6)
"RTN","IBCNEHL4",303,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",304,0)
 I $TR(RSUPDT(365.26,IENSTR,.02),", ")="" K RSUPDT(365.26,IENSTR,.02)
"RTN","IBCNEHL4",305,0)
 ; Contact number & qualifier
"RTN","IBCNEHL4",306,0)
 S FLD=$G(IBSEG(6)),QUAL=$P(FLD,HLCMP,9),VALUE=$P(FLD,HLCMP)
"RTN","IBCNEHL4",307,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.26,IENSTR,1)=VALUE,RSUPDT(365.26,IENSTR,.04)=QUAL ;ib*2*497  stuff COMMUNICATION NUMBER data into its new location (365.26,1) 
"RTN","IBCNEHL4",308,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",309,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",310,0)
 Q
"RTN","IBCNEHL4",311,0)
 ;
"RTN","IBCNEHL4",312,0)
ERR(ERDA,ERROR,IBSEG,RIEN) ; Process ERR Reject reasons segment
"RTN","IBCNEHL4",313,0)
 N I,IENARR,IENSTR,FLD,LOC,RSUPDT,VAL
"RTN","IBCNEHL4",314,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",315,0)
 S RSUPDT(365.06,IENSTR,.01)=+$O(^IBCN(365,RIEN,6,"B",""),-1)+1 ; ERR sequence
"RTN","IBCNEHL4",316,0)
 S FLD=$G(IBSEG(3)),LOC=$P(FLD,HLCMP)
"RTN","IBCNEHL4",317,0)
 F I=2:1:6 S VAL=$P(FLD,HLCMP,2) I VAL'="" S LOC=LOC_$S(I=2!(I=4):"("_VAL_")",1:"."_VAL_".")
"RTN","IBCNEHL4",318,0)
 S RSUPDT(365.06,IENSTR,.02)=LOC ; Error location (HL7)
"RTN","IBCNEHL4",319,0)
 S RSUPDT(365.06,IENSTR,.03)=$P($G(IBSEG(6)),HLCMP) ; Reject reason
"RTN","IBCNEHL4",320,0)
 S RSUPDT(365.06,IENSTR,.04)=$G(IBSEG(9)) ; Action code
"RTN","IBCNEHL4",321,0)
 S RSUPDT(365.06,IENSTR,.05)=$G(IBSEG(8)) ; Loop id
"RTN","IBCNEHL4",322,0)
 S RSUPDT(365.06,IENSTR,.06)=$P($G(IBSEG(6)),HLCMP,3) ; Source
"RTN","IBCNEHL4",323,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",324,0)
 D UPDATE^DIE("E","RSUPDT","IENARR","ERROR")
"RTN","IBCNEHL4",325,0)
 S ERDA=IENARR(1)
"RTN","IBCNEHL4",326,0)
 Q
"RTN","IBCNEHL4",327,0)
 ;
"RTN","IBCNEHL4",328,0)
NTE(ERDA,ERROR,IBSEG,RIEN) ; Process NTE segment
"RTN","IBCNEHL4",329,0)
 N DA,IENS,MSG,MSGSTR,RSUPDT,Z
"RTN","IBCNEHL4",330,0)
 S DA(1)=RIEN,DA=ERDA
"RTN","IBCNEHL4",331,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL4",332,0)
 S MSGSTR=$G(IBSEG(4))
"RTN","IBCNEHL4",333,0)
 F Z=1:1 S MSG=$P(MSGSTR,HLREP,Z) Q:MSG=""  S RSUPDT(365.061,"+"_Z_","_IENS,".01")=MSG  ;IB*506  Q:'MSG
"RTN","IBCNEHL4",334,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",335,0)
 Q
"RTN","IBCNEHL4",336,0)
 ;
"RTN","IBCNEHL4",337,0)
ZTP(ERROR,IBSEG,RIEN) ; Process ZTP Subscriber date (subscriber level) segment
"RTN","IBCNEHL4",338,0)
 N IENSTR,QUAL,RSUPDT,VALUE,Z
"RTN","IBCNEHL4",339,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",340,0)
 S RSUPDT(365.07,IENSTR,.01)=+$O(^IBCN(365,RIEN,7,"B",""),-1)+1 ; ZTP sequence
"RTN","IBCNEHL4",341,0)
 ; Date & qualifier
"RTN","IBCNEHL4",342,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($P($G(IBSEG(4)),HLCMP),HLSCMP)
"RTN","IBCNEHL4",343,0)
 S Z=$P($P($G(IBSEG(4)),HLCMP,2),HLSCMP) I Z'="" S VALUE=VALUE_" - "_Z
"RTN","IBCNEHL4",344,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.07,IENSTR,.02)=VALUE,RSUPDT(365.07,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",345,0)
 S RSUPDT(365.07,IENSTR,.04)=$G(IBSEG(5)) ; Loop id
"RTN","IBCNEHL4",346,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",347,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",348,0)
 Q
"RTN","IBCNERPE")
0^11^B70614398^B65900140
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300,416,438,497,506,519**;21-MAR-94;Build 56
"RTN","IBCNERPE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N %,CNPTR,CT,DIW,DIWI,DIWT,DIWTC,DIWX,DN,EACT,ELOC,ESRC,ETXT,DQUAL,DTYPE,FUTDT,IENS,II,LOOP,NODE0,PC,TQIEN,Z
"RTN","IBCNERPE",13,0)
 ;
"RTN","IBCNERPE",14,0)
 ; Insured Info from eIV Response #365
"RTN","IBCNERPE",15,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",16,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",17,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",18,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",19,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",20,0)
 S IENS=IEN_","
"RTN","IBCNERPE",21,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IENS,1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IENS,1.13,"E")  ; COB
"RTN","IBCNERPE",23,0)
 S RPTDATA(8)=$$GET1^DIQ(365,IENS,8.01,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 ; if pt. rel is empty, try to get value from the old field 365/1.09
"RTN","IBCNERPE",25,0)
 I RPTDATA(8)="" S RPTDATA(8)=$$GET1^DIQ(365,IENS,1.09,"E")
"RTN","IBCNERPE",26,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",28,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",29,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",30,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",31,0)
 ;
"RTN","IBCNERPE",32,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",33,0)
 S CT=0
"RTN","IBCNERPE",34,0)
 F  S CT=$O(^IBCN(365,IEN,3,CT)) Q:'CT  D
"RTN","IBCNERPE",35,0)
 .S RPTDATA(3,CT)=$G(^IBCN(365,IEN,3,CT,0))
"RTN","IBCNERPE",36,0)
 .; Obtain the various Communication Text fields
"RTN","IBCNERPE",37,0)
 .F II=1:1:3 S RPTDATA(3,CT,II)=$G(^IBCN(365,IEN,3,CT,II))
"RTN","IBCNERPE",38,0)
 .; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",39,0)
 . I $P(RPTDATA(3,CT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CT),U)=""
"RTN","IBCNERPE",40,0)
 .; Comm Qual #1-3
"RTN","IBCNERPE",41,0)
 .F II=1:1:3 D
"RTN","IBCNERPE",42,0)
 ..S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CT),U,II*2))
"RTN","IBCNERPE",43,0)
 ..;;;I CNPTR'="" S $P(RPTDATA(3,CT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CT),U,II*2+1),$P(RPTDATA(3,CT),U,II*2+1)=""
"RTN","IBCNERPE",44,0)
 ..I CNPTR'="" S RPTDATA(3,CT,II)=CNPTR_": "_$G(RPTDATA(3,CT,II))
"RTN","IBCNERPE",45,0)
 ;
"RTN","IBCNERPE",46,0)
 ; Subscriber level dates (ZTP segments)
"RTN","IBCNERPE",47,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,7,CT)) Q:'CT  D
"RTN","IBCNERPE",48,0)
 .S NODE0=$G(^IBCN(365,IEN,7,CT,0))
"RTN","IBCNERPE",49,0)
 .S DQUAL=$P(NODE0,U,3) I 'DQUAL Q
"RTN","IBCNERPE",50,0)
 .S LOOP=$$GET1^DIQ(365.027,$P(NODE0,U,4)_",",.01)
"RTN","IBCNERPE",51,0)
 .S DTYPE=$S(LOOP["C":"S",LOOP["D":"P",1:"O")
"RTN","IBCNERPE",52,0)
 .S RPTDATA(7,DTYPE,CT)=$$X12^IBCNERP2(365.026,DQUAL)_U_$P(NODE0,U,2)
"RTN","IBCNERPE",53,0)
 .Q
"RTN","IBCNERPE",54,0)
 ;
"RTN","IBCNERPE",55,0)
 ; Reject reasons
"RTN","IBCNERPE",56,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,6,CT)) Q:'CT  D
"RTN","IBCNERPE",57,0)
 .S NODE0=$G(^IBCN(365,IEN,6,CT,0)) I '$P(NODE0,U,3) Q
"RTN","IBCNERPE",58,0)
 .S ETXT=$$X12^IBCNERP2(365.017,$P(NODE0,U,3))
"RTN","IBCNERPE",59,0)
 .S ELOC=$P(NODE0,U,2) S:ELOC="" ELOC="N/A"
"RTN","IBCNERPE",60,0)
 .S EACT=$$X12^IBCNERP2(365.018,$P(NODE0,U,4)) S:EACT="" EACT="N/A"
"RTN","IBCNERPE",61,0)
 .S LOOP=$$X12^IBCNERP2(365.027,$P(NODE0,U,5)) S:LOOP="" LOOP="N/A"
"RTN","IBCNERPE",62,0)
 .S ESRC=$P(NODE0,U,6) S:ESRC="" ESRC="N/A"
"RTN","IBCNERPE",63,0)
 .;IB*2*497   modify existing line below to retrieve external value of ERROR CODE and ACTION CODE
"RTN","IBCNERPE",64,0)
 . ;and build as part of the composite string at RPTDATA(6,CT).
"RTN","IBCNERPE",65,0)
 .S RPTDATA(6,CT)=ELOC_U_$$GET1^DIQ(365.017,$P(NODE0,U,3)_",",.01)_U_ETXT_U_$$GET1^DIQ(365.018,$P(NODE0,U,4)_",",.01)_U_EACT_U_LOOP_U_ESRC
"RTN","IBCNERPE",66,0)
 .; IB*2*497  retrieve additional messages
"RTN","IBCNERPE",67,0)
 .S Z=0 F  S Z=$O(^IBCN(365,IEN,6,CT,1,Z)) Q:'Z  S RPTDATA(6,CT,"AMSG",Z)=$P($G(^IBCN(365,IEN,6,CT,1,Z,0)),U)
"RTN","IBCNERPE",68,0)
 .Q
"RTN","IBCNERPE",69,0)
 ;
"RTN","IBCNERPE",70,0)
 ; Subscriber Data
"RTN","IBCNERPE",71,0)
 S RPTDATA(13)=$G(^IBCN(365,IEN,13))
"RTN","IBCNERPE",72,0)
 ;
"RTN","IBCNERPE",73,0)
 ; Group Data
"RTN","IBCNERPE",74,0)
 S RPTDATA(14)=$G(^IBCN(365,IEN,14))
"RTN","IBCNERPE",75,0)
 ;
"RTN","IBCNERPE",76,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",77,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",78,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",79,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",80,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",81,0)
 ;
"RTN","IBCNERPE",82,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",83,0)
 Q
"RTN","IBCNERPE",84,0)
 ;
"RTN","IBCNERPE",85,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",86,0)
 ;
"RTN","IBCNERPE",87,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",88,0)
 N LCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA,DCT,DTYPE
"RTN","IBCNERPE",89,0)
 ; Merge into local array
"RTN","IBCNERPE",90,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",91,0)
 ; Build
"RTN","IBCNERPE",92,0)
 S LCT=1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.01),17,"R")_$P(RPTDATA(13),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",93,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.02),17,"R")_$P(RPTDATA(13),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",94,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),17,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",95,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",96,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.01),17,"R")_$P(RPTDATA(14),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",97,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.02),17,"R")_$P(RPTDATA(14),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",98,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,8.01),22,"R")_RPTDATA(8)
"RTN","IBCNERPE",99,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",100,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",101,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",102,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",103,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",104,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",105,0)
 ;
"RTN","IBCNERPE",106,0)
 ; Dates
"RTN","IBCNERPE",107,0)
 F DTYPE="S","P","O" D
"RTN","IBCNERPE",108,0)
 .I '$D(RPTDATA(7,DTYPE)) Q
"RTN","IBCNERPE",109,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",110,0)
 .S LCT=LCT+1,DISPDATA(LCT)=$S(DTYPE="S":"Subscriber",DTYPE="P":"Patient",1:"Other")_" Dates:"
"RTN","IBCNERPE",111,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",112,0)
 .S DCT="" F  S DCT=$O(RPTDATA(7,DTYPE,DCT)) Q:DCT=""  D
"RTN","IBCNERPE",113,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($P(RPTDATA(7,DTYPE,DCT),U)_": ",40)_$P(RPTDATA(7,DTYPE,DCT),U,2)
"RTN","IBCNERPE",114,0)
 ..Q
"RTN","IBCNERPE",115,0)
 .Q
"RTN","IBCNERPE",116,0)
 ;
"RTN","IBCNERPE",117,0)
 ; Contacts
"RTN","IBCNERPE",118,0)
CONT ;
"RTN","IBCNERPE",119,0)
 N TEXT
"RTN","IBCNERPE",120,0)
 S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",121,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",122,0)
 S LCT=LCT+1,DISPDATA(LCT)="CONTACT INFORMATION:"
"RTN","IBCNERPE",123,0)
 ; Build
"RTN","IBCNERPE",124,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",125,0)
 . S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",126,0)
 . S LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",127,0)
 . S SEGCT=$O(RPTDATA(3,CT,""),-1)
"RTN","IBCNERPE",128,0)
 . S TEXT=""
"RTN","IBCNERPE",129,0)
 . I $L($P(RPTDATA(3,CT),U,1)) S TEXT=$P(RPTDATA(3,CT),U,1)
"RTN","IBCNERPE",130,0)
 . F CT2=1:1:SEGCT S ITEM=$G(RPTDATA(3,CT,CT2)) D
"RTN","IBCNERPE",131,0)
 . . Q:'$L(ITEM)
"RTN","IBCNERPE",132,0)
 . . S TEXT=$S($L(TEXT):" "_TEXT_",  ",1:" ")_ITEM
"RTN","IBCNERPE",133,0)
 . . F  D  Q:'$L(TEXT)
"RTN","IBCNERPE",134,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)=$E(TEXT,1,74)
"RTN","IBCNERPE",135,0)
 . . . I $L(TEXT)>74 S TEXT=$E(TEXT,75,$L(TEXT)) Q
"RTN","IBCNERPE",136,0)
 . . . S TEXT=""
"RTN","IBCNERPE",137,0)
 . . . Q
"RTN","IBCNERPE",138,0)
 . . Q
"RTN","IBCNERPE",139,0)
 ; Err Info
"RTN","IBCNERPE",140,0)
ERR S ERCT=+$O(RPTDATA(6,""),-1) I 'ERCT G DATAX
"RTN","IBCNERPE",141,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",142,0)
 S LCT=LCT+1,DISPDATA(LCT)="ERROR INFORMATION:"
"RTN","IBCNERPE",143,0)
 S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",144,0)
 F CT=1:1:ERCT D
"RTN","IBCNERPE",145,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Code: "_$P(RPTDATA(6,CT),U,2) ; ib*2*497
"RTN","IBCNERPE",146,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Text: "_$P(RPTDATA(6,CT),U,3) ; ib*2*497
"RTN","IBCNERPE",147,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code:   "_$P(RPTDATA(6,CT),U,4)   ; ib*2*497
"RTN","IBCNERPE",148,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code Text: "_$P(RPTDATA(6,CT),U,5)  ;IB*2*497
"RTN","IBCNERPE",149,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HIPAA Loop:    "_$P(RPTDATA(6,CT),U,6)   ; ib*2*497
"RTN","IBCNERPE",150,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HL7 Location:  "_$P(RPTDATA(6,CT),U)
"RTN","IBCNERPE",151,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Error Source:  "_$P(RPTDATA(6,CT),U,7)   ; ib*2*497
"RTN","IBCNERPE",152,0)
 .I $D(RPTDATA(6,CT,"AMSG")) D
"RTN","IBCNERPE",153,0)
 ..I ERCT>0 S LCT=LCT+1,DISPDATA(LCT)=""  ; IB*506
"RTN","IBCNERPE",154,0)
 ..S LCT=LCT+1,DISPDATA(LCT)="Additional Messages:"
"RTN","IBCNERPE",155,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",156,0)
 ..S Z=0 F  S Z=$O(RPTDATA(6,CT,"AMSG",Z)) Q:'Z  S LCT=LCT+1,DISPDATA(LCT)=RPTDATA(6,CT,"AMSG",Z)
"RTN","IBCNERPE",157,0)
 ..Q
"RTN","IBCNERPE",158,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",159,0)
 .Q
"RTN","IBCNERPE",160,0)
 ;
"RTN","IBCNERPE",161,0)
DATAX ;
"RTN","IBCNERPE",162,0)
 N RIBVDA,RSPIENS
"RTN","IBCNERPE",163,0)
 S RIBVDA=$P(RPTDATA(0),U,4)
"RTN","IBCNERPE",164,0)
 S RSPIENS=$O(^IBCN(365,"AF",+$G(RIBVDA),""),-1)
"RTN","IBCNERPE",165,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",166,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",167,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",168,0)
 .. S LCT=LCT+1,DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT))
"RTN","IBCNERPE",169,0)
 ;
"RTN","IBCNERPE",170,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNERPE",171,0)
 ; Added the Elig. Ben. info to print at the end of the patient's display on the e-IV Response Report.
"RTN","IBCNERPE",172,0)
 S LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",173,0)
 K ^TMP("EIV RESP. EB DATA",$J)
"RTN","IBCNERPE",174,0)
 N VALMEVL    ; Important as the INIT^IBCNES kills an array we need to keep if VALMEVL is defined  (IB*519)
"RTN","IBCNERPE",175,0)
 ; save off certain VALM variables because call to IBCNES changes them and throws off page counter when returning to EE screen (IB*519)
"RTN","IBCNERPE",176,0)
 N IBVLSV S IBVLSV=VALMCNT_U_VALM("LINES")_U_$G(^TMP("IBCNBLE",$J,VALMCNT,0))
"RTN","IBCNERPE",177,0)
 D INIT^IBCNES(365.02,RSPIENS_",","A",1,"EIV RESP. EB DATA")
"RTN","IBCNERPE",178,0)
 N TCTR
"RTN","IBCNERPE",179,0)
 S TCTR=""
"RTN","IBCNERPE",180,0)
 F  S TCTR=$O(^TMP("EIV RESP. EB DATA",$J,"DISP",TCTR)) Q:TCTR=""  D
"RTN","IBCNERPE",181,0)
 . S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($G(^TMP("EIV RESP. EB DATA",$J,"DISP",TCTR,0)),76)
"RTN","IBCNERPE",182,0)
 ; restore VALM page-counter values to pre-IBCNES values (IB*519)
"RTN","IBCNERPE",183,0)
 S VALM("LINES")=$P(IBVLSV,U,2),VALMCNT=$P(IBVLSV,U),^TMP("IBCNBLE",$J,VALMCNT,0)=$P(IBVLSV,U,3) K IBVLSV
"RTN","IBCNERPE",184,0)
 ; /IB*2.0*506 End
"RTN","IBCNERPE",185,0)
 ;
"RTN","IBCNERPE",186,0)
 Q
"RTN","IBCNERPE",187,0)
 ;
"RTN","IBCNERPE",188,0)
WRAPIT(ITEM,RCTR,DARRAY,MAX,INDENT) ; Module to wrap text into a display array.
"RTN","IBCNERPE",189,0)
 ;   ITEM = Text to be wrapped.
"RTN","IBCNERPE",190,0)
 ;   RCTR = Current Record counter.
"RTN","IBCNERPE",191,0)
 ;   DARRAY = Current Display Array.
"RTN","IBCNERPE",192,0)
 ;   MAX = Maximum number of characters for one line before wrapping.
"RTN","IBCNERPE",193,0)
 ;   INDENT = Character position to indent extra text when wrapping.
"RTN","IBCNERPE",194,0)
 ;
"RTN","IBCNERPE",195,0)
 N TXT,I,SPACE
"RTN","IBCNERPE",196,0)
 S TXT=ITEM,$P(SPACE," ",INDENT)=" "
"RTN","IBCNERPE",197,0)
 F  D  Q:'$L(TXT)
"RTN","IBCNERPE",198,0)
 .S DARRAY(RCTR)=$E(TXT,1,MAX)
"RTN","IBCNERPE",199,0)
 .S TXT=$E(TXT,MAX+1,$L(TXT)) Q:'$L(TXT)
"RTN","IBCNERPE",200,0)
 .S RCTR=RCTR+1
"RTN","IBCNERPE",201,0)
 .S TXT=SPACE_TXT
"RTN","IBCNERPE",202,0)
 Q
"RTN","IBCNHHLI")
0^9^B10645426^n/a
"RTN","IBCNHHLI",1,0)
IBCNHHLI ;ALB/ZEB - HL7 Receiver for NIF transmissions ;25-FEB-14
"RTN","IBCNHHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBCNHHLI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHHLI",4,0)
 ;**Program Description**
"RTN","IBCNHHLI",5,0)
 ;  This program will process incoming NIF response messages.
"RTN","IBCNHHLI",6,0)
 ; Call at tags only
"RTN","IBCNHHLI",7,0)
 Q
"RTN","IBCNHHLI",8,0)
RCV ; assumes the following from HL7: HLERR,HLNODE,HLQUIT,HLNEXT,HL,HLMTIENS
"RTN","IBCNHHLI",9,0)
 Q:+$P($G(^IBE(350.9,1,70)),U,1)'=1  ;abort if secret HL7 flag isn't set
"RTN","IBCNHHLI",10,0)
 N MSGID,INSIDS,INSQLS,RTY,PSTAT,RID,RDATA,TID
"RTN","IBCNHHLI",11,0)
 N IDCNT,IDTMP,ID,IDS,TYPE,PC,UPDDT
"RTN","IBCNHHLI",12,0)
 N HLFS,HLCS,HLRS,ACK,SEG
"RTN","IBCNHHLI",13,0)
 K HLERR  ;make sure HL7 error flag isn't set
"RTN","IBCNHHLI",14,0)
 S HLFS=HL("FS")
"RTN","IBCNHHLI",15,0)
 S HLCS=$E(HL("ECH"),1)
"RTN","IBCNHHLI",16,0)
 S HLRS=$E(HL("ECH"),2)
"RTN","IBCNHHLI",17,0)
 N DIC,%,%H,%I D NOW^%DTC S UPDDT=%
"RTN","IBCNHHLI",18,0)
 S INSIDS="",INSQLS="",RDATA=""
"RTN","IBCNHHLI",19,0)
 S RTY="U",RID="",TID="",PSTAT="R"  ;default values if we manage to not get an MSA or QAK
"RTN","IBCNHHLI",20,0)
 ;process HL7 segments, build arguments to filing routines
"RTN","IBCNHHLI",21,0)
 F  X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNHHLI",22,0)
 . S SEG=$S($E(HLNODE,1)=$C(10):$E(HLNODE,2,4),1:$E(HLNODE,1,3))  ;deal with messages with CRLF (why?!)
"RTN","IBCNHHLI",23,0)
 . I SEG="MSA" D  I 1
"RTN","IBCNHHLI",24,0)
 . . S MSGID=$P(HLNODE,HLFS,3)
"RTN","IBCNHHLI",25,0)
 . . I MSGID]"" D
"RTN","IBCNHHLI",26,0)
 . . . S RTY="R"
"RTN","IBCNHHLI",27,0)
 . . . S RID=$O(^IBCNH(367,"B",MSGID,""))
"RTN","IBCNHHLI",28,0)
 . . . S:RID="" RID=$O(^IBCNH(367,"B",$E(MSGID,$L($P($$SITE^VASITE(),U,3))+1,$L(MSGID)),""))
"RTN","IBCNHHLI",29,0)
 . . . S TID=$S(RID="":"",1:$P($G(^IBCNH(367,RID,0)),U,2))
"RTN","IBCNHHLI",30,0)
 . . S ACK=$P(HLNODE,HLFS,2),PSTAT=$S(ACK="AE":"X",ACK="AR":"EXR",1:"R")
"RTN","IBCNHHLI",31,0)
 . I SEG="QAK" D  I 1
"RTN","IBCNHHLI",32,0)
 . . I $P($P(HLNODE,HLFS,4),HLCS,1)="ZHPID02" S RTY="U",RID="",TID=""  ;set this on top of set from MSA
"RTN","IBCNHHLI",33,0)
 . E  I SEG="IN1" D
"RTN","IBCNHHLI",34,0)
 . . S $P(RDATA,U,4)=$P(HLNODE,HLFS,5)
"RTN","IBCNHHLI",35,0)
 . . S IDS=$P(HLNODE,HLFS,4)
"RTN","IBCNHHLI",36,0)
 . . F IDCNT=1:1 S IDTMP=$P(IDS,HLRS,IDCNT) Q:IDTMP=""  D
"RTN","IBCNHHLI",37,0)
 . . . S ID=$P(IDTMP,HLCS,1)
"RTN","IBCNHHLI",38,0)
 . . . S TYPE=$P(IDTMP,HLCS,5)
"RTN","IBCNHHLI",39,0)
 . . . I TYPE="INS" S $P(RDATA,U,7)=ID,$P(INSIDS,U,10)=ID Q
"RTN","IBCNHHLI",40,0)
 . . . I TYPE="NIF" S $P(INSIDS,U,8)=ID Q
"RTN","IBCNHHLI",41,0)
 . . . I TYPE="HPIDC" S $P(RDATA,U,9)="C",$P(INSIDS,U,9)=ID Q
"RTN","IBCNHHLI",42,0)
 . . . I TYPE="HPIDS" S $P(RDATA,U,9)="S",$P(INSIDS,U,9)=ID Q
"RTN","IBCNHHLI",43,0)
 . . . I TYPE="OEID" S $P(RDATA,U,9)="@",$P(INSIDS,U,9)=ID,$P(RDATA,U,8)="@" Q
"RTN","IBCNHHLI",44,0)
 . . . I TYPE="VA" S $P(INSIDS,U,7)=ID Q
"RTN","IBCNHHLI",45,0)
 . . . I TYPE="PROF" S $P(INSIDS,U,1)=ID Q
"RTN","IBCNHHLI",46,0)
 . . . I TYPE="INST" S $P(INSIDS,U,2)=ID Q
"RTN","IBCNHHLI",47,0)
 . . . I TYPE="PARNT" S $P(RDATA,U,8)=ID Q
"RTN","IBCNHHLI",48,0)
 . . . I "^2UP^FYP^NFP^TJP^"[(U_TYPE_U) S PC=$S($P(INSIDS,U,3)]"":4,1:3),$P(INSIDS,U,PC)=ID,$P(INSQLS,U,PC)=$E(TYPE,1,2) Q
"RTN","IBCNHHLI",49,0)
 . . . I "^2UI^FYI^NFI^TJI^"[(U_TYPE_U) S PC=$S($P(INSIDS,U,5)]"":6,1:5),$P(INSIDS,U,PC)=ID,$P(INSQLS,U,PC)=$E(TYPE,1,2) Q
"RTN","IBCNHHLI",50,0)
 I (PSTAT="R")&($P(INSIDS,U,9)="") S $P(INSIDS,U,9)="@",$P(RDATA,U,8)="@",$P(RDATA,U,9)="@"  ;delete existing HPID/OEID if we get an update without one
"RTN","IBCNHHLI",51,0)
 S $P(RDATA,U,1)=HLMTIENS  ;don't overwrite sets from optional IN1
"RTN","IBCNHHLI",52,0)
 S $P(RDATA,U,2)=TID
"RTN","IBCNHHLI",53,0)
 S $P(RDATA,U,3)=RTY
"RTN","IBCNHHLI",54,0)
 S $P(RDATA,U,5)=PSTAT
"RTN","IBCNHHLI",55,0)
 S $P(RDATA,U,6)=UPDDT
"RTN","IBCNHHLI",56,0)
 ;file the response and the data from it
"RTN","IBCNHHLI",57,0)
 ;this routine will perform the check to see if we need to file this message
"RTN","IBCNHHLI",58,0)
 S %=$$FM367^IBCNHUT2(RID,RDATA,INSIDS,INSQLS)
"RTN","IBCNHHLI",59,0)
 Q
"RTN","IBCNHHLO")
0^8^B10205311^n/a
"RTN","IBCNHHLO",1,0)
IBCNHHLO ;ALB/ZEB - HL7 Sender for NIF transmissions ;25-FEB-14
"RTN","IBCNHHLO",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBCNHHLO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHHLO",4,0)
 ;**Program Description**
"RTN","IBCNHHLO",5,0)
 ;  This program will process outgoing NIF query messages.
"RTN","IBCNHHLO",6,0)
 ; Call at tags only
"RTN","IBCNHHLO",7,0)
 Q
"RTN","IBCNHHLO",8,0)
SEND(INSCO) ;INSCO: IEN of Insurance Company record to send
"RTN","IBCNHHLO",9,0)
 Q:+$P($G(^IBE(350.9,1,70)),U,1)'=1  ;abort if secret HL7 flag isn't set
"RTN","IBCNHHLO",10,0)
 K HLA,HLEVN
"RTN","IBCNHHLO",11,0)
 N CNT,HL,HLFS,HLCS,HLRS,LN,INS,HLRSLT,HLCS11,HLCSCNT,TOC,PHN,HLCS4
"RTN","IBCNHHLO",12,0)
 S CNT=0
"RTN","IBCNHHLO",13,0)
 ;set up environment for message
"RTN","IBCNHHLO",14,0)
 D INIT^HLFNC2("IB NIF QUERY DRIVER",.HL)
"RTN","IBCNHHLO",15,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","IBCNHHLO",16,0)
 S HLCS=$E(HL("ECH"),1)
"RTN","IBCNHHLO",17,0)
 S HLCS4=HLCS
"RTN","IBCNHHLO",18,0)
 F HLCSCNT=1:1:3 S HLCS4=HLCS4_HLCS
"RTN","IBCNHHLO",19,0)
 S HLCS11=HLCS4
"RTN","IBCNHHLO",20,0)
 F HLCSCNT=1:1:7 S HLCS11=HLCS11_HLCS
"RTN","IBCNHHLO",21,0)
 S HLRS=$E(HL("ECH"),2)
"RTN","IBCNHHLO",22,0)
 D R36^IBCNHUT2(INSCO,.INS)  ;get info from ins. co. record
"RTN","IBCNHHLO",23,0)
 ;Add message txt to HLA array
"RTN","IBCNHHLO",24,0)
 ; add QPD segment
"RTN","IBCNHHLO",25,0)
 S CNT=CNT+1,HLA("HLS",CNT)="QPD"_HLFS_"ZHPID01"_HLCS_"HPID Insurance Inquiry"
"RTN","IBCNHHLO",26,0)
 ; add an empty RCP segment
"RTN","IBCNHHLO",27,0)
 S CNT=CNT+1,HLA("HLS",CNT)="RCP"_HLFS_"I"
"RTN","IBCNHHLO",28,0)
 ; add IN1 segment
"RTN","IBCNHHLO",29,0)
 S LN=0
"RTN","IBCNHHLO",30,0)
 S CNT=CNT+1,HLA("HLS",CNT)="IN1"_HLFS
"RTN","IBCNHHLO",31,0)
 S LN=LN+1,HLA("HLS",CNT,LN)="0001"_HLFS_"VA"_HLCS_"Department of Veterans Affairs"_HLFS
"RTN","IBCNHHLO",32,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P($$SITE^VASITE,U,3)_"."_INSCO_HLCS4_"INS"
"RTN","IBCNHHLO",33,0)
 I $P(INS(2),U,1)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,1)_HLCS4_"PROF"
"RTN","IBCNHHLO",34,0)
 I $P(INS(2),U,2)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,2)_HLCS4_"INST"
"RTN","IBCNHHLO",35,0)
 I $P(INS(2),U,3)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,3)_HLCS4_$P(INS(3),U,3)_"P"
"RTN","IBCNHHLO",36,0)
 I $P(INS(2),U,4)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,4)_HLCS4_$P(INS(3),U,4)_"P"
"RTN","IBCNHHLO",37,0)
 I $P(INS(2),U,5)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,5)_HLCS4_$P(INS(3),U,5)_"I"
"RTN","IBCNHHLO",38,0)
 I $P(INS(2),U,6)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,6)_HLCS4_$P(INS(3),U,6)_"I"
"RTN","IBCNHHLO",39,0)
 I $P(INS(2),U,7)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(2),U,7)_HLCS4_"VA"
"RTN","IBCNHHLO",40,0)
 I $P(INS(0),U,5)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(0),U,5)_HLCS4_"NIF"
"RTN","IBCNHHLO",41,0)
 I $P(INS(0),U,6)]"" S LN=LN+1,HLA("HLS",CNT,LN)=HLRS_$P(INS(0),U,6)_HLCS4_"HPID"
"RTN","IBCNHHLO",42,0)
 S HLA("HLS",CNT,LN)=HLA("HLS",CNT,LN)_HLFS
"RTN","IBCNHHLO",43,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P(INS(0),U,2)_HLFS
"RTN","IBCNHHLO",44,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P(INS(1),U,1)_HLCS_$P(INS(1),U,2)_HLCS
"RTN","IBCNHHLO",45,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P(INS(1),U,3)_HLCS_$P($G(^DIC(5,+$P(INS(1),U,4),0)),U,1)_HLCS
"RTN","IBCNHHLO",46,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P(INS(1),U,5)_HLCS_HLCS_HLFS_HLFS
"RTN","IBCNHHLO",47,0)
 S PHN=$P(INS(1),U,8)
"RTN","IBCNHHLO",48,0)
 S:PHN]"" PHN=HLCS11_PHN
"RTN","IBCNHHLO",49,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=PHN_HLFS_HLFS_HLFS_HLFS_HLFS_HLFS_HLFS_HLFS
"RTN","IBCNHHLO",50,0)
 S TOC=$P(INS(1),U,7)
"RTN","IBCNHHLO",51,0)
 S:TOC="" TOC=1
"RTN","IBCNHHLO",52,0)
 S LN=LN+1,HLA("HLS",CNT,LN)=$P($G(^IBE(355.2,TOC,0)),U,1)
"RTN","IBCNHHLO",53,0)
 ;
"RTN","IBCNHHLO",54,0)
 ;CALL HL7 TO TRANSMIT SINGLE MESSAGE
"RTN","IBCNHHLO",55,0)
 D GENERATE^HLMA("IB NIF QUERY DRIVER","LM",1,.HLRSLT)
"RTN","IBCNHHLO",56,0)
 S %=$$FM71^IBCNHUT2(INSCO,$P(HLRSLT,U,1))  ;update transmission queue in #367.1
"RTN","IBCNHHLO",57,0)
 Q
"RTN","IBCNHSRV")
0^18^B2517223^n/a
"RTN","IBCNHSRV",1,0)
IBCNHSRV ;ALB/ZEB - HL7 Receiver for NIF transmissions ;03-OCT-14
"RTN","IBCNHSRV",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBCNHSRV",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHSRV",4,0)
 ;**Program Description**
"RTN","IBCNHSRV",5,0)
 ;  This program will process incoming requests for NIF Batch Queries
"RTN","IBCNHSRV",6,0)
 ; Call at tags only
"RTN","IBCNHSRV",7,0)
 Q
"RTN","IBCNHSRV",8,0)
SERVER ; Entry point for server option to kick off batch query
"RTN","IBCNHSRV",9,0)
 ; ID of triggering message is in assumed variable XMZ
"RTN","IBCNHSRV",10,0)
 ; Call to XMXAPI covered by IA #2729
"RTN","IBCNHSRV",11,0)
 ; Call to XMXUTIL2 covered by IA #2736
"RTN","IBCNHSRV",12,0)
 N IBXMZ,IBRUNDT,X,Y,DIE,DR,DA
"RTN","IBCNHSRV",13,0)
 S IBXMZ=$G(XMZ)
"RTN","IBCNHSRV",14,0)
 Q:IBXMZ=""  ;message does't actually exist
"RTN","IBCNHSRV",15,0)
 ; only trigger the query if message has "TRIGGER BATCH QUERY" in the subject
"RTN","IBCNHSRV",16,0)
 D:$$SUBJ^XMXUTIL2($G(^XMB(3.9,IBXMZ,0)))["TRIGGER BATCH QUERY"
"RTN","IBCNHSRV",17,0)
 . D EXT^IBCNHUT2  ; Kick off batch query
"RTN","IBCNHSRV",18,0)
 . ;disable menu option as we only need each site to do this once
"RTN","IBCNHSRV",19,0)
 . N DIC,%,%H,%I D NOW^%DTC S Y=%  ;Y is now internal form of current date/time
"RTN","IBCNHSRV",20,0)
 . D DD^%DT  ;replaces Y with external date
"RTN","IBCNHSRV",21,0)
 . S IBRUNDT="One-time use only; used on "_$P(Y,"@",1)_"."
"RTN","IBCNHSRV",22,0)
 . N Y
"RTN","IBCNHSRV",23,0)
 . S DIC="^DIC(19,",DIC(0)="LS" S X="IBCNH HPID NIF BATCH QUERY" D ^DIC
"RTN","IBCNHSRV",24,0)
 . I Y'=-1 S DIE=DIC,DA=+Y,DR="2///^S X=IBRUNDT" K DIC D ^DIE
"RTN","IBCNHSRV",25,0)
 N ZTREQ
"RTN","IBCNHSRV",26,0)
 D ZAPSERV^XMXAPI("S.IBCNH HPID NIF BATCH QUERY",IBXMZ)
"RTN","IBCNHSRV",27,0)
 S ZTREQ="@"
"RTN","IBCNHSRV",28,0)
 Q
"RTN","IBCNHSRV",29,0)
 ;
"RTN","IBCNHUT1")
0^3^B19672959^n/a
"RTN","IBCNHUT1",1,0)
IBCNHUT1 ;ALB/GEF - HPID/OEID UTILITIES ;11-MAR-14
"RTN","IBCNHUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBCNHUT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHUT1",4,0)
 ;
"RTN","IBCNHUT1",5,0)
 ; this routine contains various utilities for the HPID project.
"RTN","IBCNHUT1",6,0)
 Q
"RTN","IBCNHUT1",7,0)
 ;
"RTN","IBCNHUT1",8,0)
HOD(ID,INS,IBHD) ; function to determine if the data is an HPID, an OEID, or an invalid ID
"RTN","IBCNHUT1",9,0)
 ; HPID/OEID is a 10 character string with the 1st digit being 7 for HPID & 6 for OEID
"RTN","IBCNHUT1",10,0)
 ; and the 10th digit being a LUHN Check digit. If the optional INS value is passed, an 
"RTN","IBCNHUT1",11,0)
 ; additional validation check will be done, comparing the ID to what is currently on file 
"RTN","IBCNHUT1",12,0)
 ; for that insurance company ien. 
"RTN","IBCNHUT1",13,0)
 ;
"RTN","IBCNHUT1",14,0)
 ; returns data string:    H for HPID, O for OEID, -1 for Invalid ID                   
"RTN","IBCNHUT1",15,0)
 ; to call:  W $$HOD^IBCNHUT1(X,INS) or I $$HOD^IBCNHUT1(X,INS) it is not a valid ID
"RTN","IBCNHUT1",16,0)
 ;
"RTN","IBCNHUT1",17,0)
 ; ID = data string to validate (required)
"RTN","IBCNHUT1",18,0)
 ; INS = insurance co. ien (optional)
"RTN","IBCNHUT1",19,0)
 ; IBHD = Insurance co HPID in file 36 (optional)
"RTN","IBCNHUT1",20,0)
 ;
"RTN","IBCNHUT1",21,0)
 Q:ID'?10N "-1^HPID/OEID^*"
"RTN","IBCNHUT1",22,0)
 ; verify the 10th digit is the Luhn check-digit
"RTN","IBCNHUT1",23,0)
 Q:$E(ID,10)'=$$CKDGT($E(ID,1,9)) "-1^HPID/OEID^*"
"RTN","IBCNHUT1",24,0)
 ; verify the ID matches what is in the insurance file
"RTN","IBCNHUT1",25,0)
 I $G(INS)'="",$G(IBHD)="" S IBHD=$$HPD(INS)
"RTN","IBCNHUT1",26,0)
 I $G(IBHD)>0,IBHD'=ID Q "-1^HPID/OEID^*"
"RTN","IBCNHUT1",27,0)
 Q:$E(ID)=7 "H^     HPID^"
"RTN","IBCNHUT1",28,0)
 Q:$E(ID)=6 "O^     OEID^"
"RTN","IBCNHUT1",29,0)
 Q "-1^HPID/OEID^*"
"RTN","IBCNHUT1",30,0)
 ;
"RTN","IBCNHUT1",31,0)
HPD(INS,V) ; this function returns the HPID/OEID for an insurance company
"RTN","IBCNHUT1",32,0)
 ; The user must pass INS = Insurance Company ien in file 36
"RTN","IBCNHUT1",33,0)
 ; V = 1 means run validation checks (not required).  Will append an '*'  to the HPID if it does NOT pass validation checks
"RTN","IBCNHUT1",34,0)
 ;
"RTN","IBCNHUT1",35,0)
 N IBHPD
"RTN","IBCNHUT1",36,0)
 Q:$G(INS)="" ""
"RTN","IBCNHUT1",37,0)
 S IBHPD=$P($G(^DIC(36,INS,8)),U) Q:IBHPD="" ""
"RTN","IBCNHUT1",38,0)
 Q $S($G(V)=1:IBHPD_$P($$HOD(IBHPD,INS,IBHPD),U,3),1:IBHPD)
"RTN","IBCNHUT1",39,0)
 Q ""
"RTN","IBCNHUT1",40,0)
 ;
"RTN","IBCNHUT1",41,0)
INS(ID,TYP,IBID) ; this function finds the ien of the insurance company entry in file 36 using the NIF ID or the HPID/OEID
"RTN","IBCNHUT1",42,0)
 ; TYPE=N for NIF or H for HPID/OEID
"RTN","IBCNHUT1",43,0)
 ; returns data array:  IBID(0)=number of entries with this ID, IBID(n)=IEN^ID^Insurance Company name
"RTN","IBCNHUT1",44,0)
 ; TO CALL:  $$INS^IBCNHUT1(ID,TYP,.ARRAY NAME)
"RTN","IBCNHUT1",45,0)
 ;
"RTN","IBCNHUT1",46,0)
 N C,IEN
"RTN","IBCNHUT1",47,0)
 S IBID(0)=0,IBID=""
"RTN","IBCNHUT1",48,0)
 Q:$G(ID)<1 IBID
"RTN","IBCNHUT1",49,0)
 I $E(TYP)="N" D
"RTN","IBCNHUT1",50,0)
 .S IEN=0,C=0 F  S IEN=$O(^DIC(36,"NIF",ID,IEN)) Q:'IEN  D
"RTN","IBCNHUT1",51,0)
 ..S C=C+1,IBID(0)=C,IBID(C)=IEN_U_ID_U_$P($G(^DIC(36,IEN,0)),U)
"RTN","IBCNHUT1",52,0)
 I $E(TYP)="H" D
"RTN","IBCNHUT1",53,0)
 .S IEN=0,C=0 F  S IEN=$O(^DIC(36,"HOD",ID,IEN)) Q:'IEN  D
"RTN","IBCNHUT1",54,0)
 ..S C=C+1,IBID(0)=C,IBID(C)=IEN_U_ID_U_$P($G(^DIC(36,IEN,0)),U)
"RTN","IBCNHUT1",55,0)
 Q IBID
"RTN","IBCNHUT1",56,0)
 ;
"RTN","IBCNHUT1",57,0)
NIF(INS) ; this function finds the NIF ID for an insurance company using the ien 
"RTN","IBCNHUT1",58,0)
 ; INS=Insurance Company ien in file 36
"RTN","IBCNHUT1",59,0)
 ;
"RTN","IBCNHUT1",60,0)
 Q:$G(INS)="" ""
"RTN","IBCNHUT1",61,0)
 Q $P($G(^DIC(36,INS,8)),U,4)
"RTN","IBCNHUT1",62,0)
 Q ""
"RTN","IBCNHUT1",63,0)
 ;
"RTN","IBCNHUT1",64,0)
SHP(INS) ; this function determines if the entry is a CHP or SHP
"RTN","IBCNHUT1",65,0)
 ; INS = insurance company ien in file 36.  Returns C for CHP (Controlling Health Plan) and S for SHP (Sub-Health Plan)
"RTN","IBCNHUT1",66,0)
 ;
"RTN","IBCNHUT1",67,0)
 Q:$G(INS)="" ""
"RTN","IBCNHUT1",68,0)
 Q $P($G(^DIC(36,INS,8)),U,2)
"RTN","IBCNHUT1",69,0)
 Q ""
"RTN","IBCNHUT1",70,0)
 ;
"RTN","IBCNHUT1",71,0)
PHP(INS) ; this function returns the parent HPID insurance company if applicable
"RTN","IBCNHUT1",72,0)
 ;
"RTN","IBCNHUT1",73,0)
 Q:$G(INS)="" ""
"RTN","IBCNHUT1",74,0)
 Q $P($G(^DIC(36,INS,8)),U,3)
"RTN","IBCNHUT1",75,0)
 Q ""
"RTN","IBCNHUT1",76,0)
 ;
"RTN","IBCNHUT1",77,0)
VID(INS) ; this function gets the VA National ID for the insurance company/payer
"RTN","IBCNHUT1",78,0)
 ; 
"RTN","IBCNHUT1",79,0)
 N IBAPP,IBPYR,IBPY0
"RTN","IBCNHUT1",80,0)
 ; get the ien of the IIV payer application
"RTN","IBCNHUT1",81,0)
 S IBAPP=$O(^IBE(365.13,"B","IIV","")) Q:IBAPP="" ""
"RTN","IBCNHUT1",82,0)
 ; find the payer
"RTN","IBCNHUT1",83,0)
 S IBPYR=$P($G(^DIC(36,INS,3)),U,10) Q:IBPYR="" ""
"RTN","IBCNHUT1",84,0)
 S IBPY0=$G(^IBE(365.12,IBPYR,1,IBAPP,0)) I $P(IBPY0,U,2)=1,$P(IBPY0,U,3)=1 Q $P($G(^IBE(365.12,IBPYR,0)),U,2)
"RTN","IBCNHUT1",85,0)
 Q ""
"RTN","IBCNHUT1",86,0)
 ;
"RTN","IBCNHUT1",87,0)
UID(INS) ; this function creates the Vista Unique Site ID to send to the NIF
"RTN","IBCNHUT1",88,0)
 ; returns station#_"."_insurance company ien
"RTN","IBCNHUT1",89,0)
 Q:INS="" ""
"RTN","IBCNHUT1",90,0)
 Q $P($$SITE^VASITE(),U,3)_"."_INS
"RTN","IBCNHUT1",91,0)
 ;
"RTN","IBCNHUT1",92,0)
TRG1(IEN,ST) ; this function sets the trigger for the DATE OF FUTURE PURGE (.1) field in file #367.1 
"RTN","IBCNHUT1",93,0)
 ;(HPID/OEID TRANSMISSION QUEUE).  If the PROCESSING STATUS (.05) = R for Response Recieved or EXR
"RTN","IBCNHUT1",94,0)
 ; for Exception Report Reject and the response included a NIF ID, set the purge date to T+14
"RTN","IBCNHUT1",95,0)
 ; called from field .05 (PROCESSING STATUS ) of file 367 (HPID/OEID RESPONSE).
"RTN","IBCNHUT1",96,0)
 ; IEN = entry number in file 367, ST=Transmission status being set
"RTN","IBCNHUT1",97,0)
 ;
"RTN","IBCNHUT1",98,0)
 N RSP,ID
"RTN","IBCNHUT1",99,0)
 ; as of 6/23/14, no longer purging EXR
"RTN","IBCNHUT1",100,0)
 ;I $E(ST)'="R"&(ST'="EXR") Q ""
"RTN","IBCNHUT1",101,0)
 Q:$E(ST)'="R" ""
"RTN","IBCNHUT1",102,0)
 ; if response type is UNSOLICITED, set purge date (don't care about NIF ID for these)
"RTN","IBCNHUT1",103,0)
 Q:$P($G(^IBCNH(367,IEN,0)),U,3)="U" $$FMADD^XLFDT($$NOW^XLFDT,+14)
"RTN","IBCNHUT1",104,0)
 ; also don't care about NIF ID if EXR
"RTN","IBCNHUT1",105,0)
 ; as of 6/23/14, don't set purge data for EXR
"RTN","IBCNHUT1",106,0)
 ;Q:ST="EXR" $$FMADD^XLFDT($$NOW^XLFDT,+14)
"RTN","IBCNHUT1",107,0)
 ; check response in file 367 for NIF ID, if response contains NIF ID, set future purge date
"RTN","IBCNHUT1",108,0)
 ; format of D xref:  ^IBCNH(367,"D",8 (for NIF ID),ien in file 367,ID multiple ien)=""
"RTN","IBCNHUT1",109,0)
 Q:'$D(^IBCNH(367,"D",8,IEN)) ""
"RTN","IBCNHUT1",110,0)
 S ID=$O(^IBCNH(367,"D",8,IEN,"")) Q:$P($G(^IBCNH(367,IEN,1,ID,0)),U,2)="" ""
"RTN","IBCNHUT1",111,0)
 Q $$FMADD^XLFDT($$NOW^XLFDT,+14)
"RTN","IBCNHUT1",112,0)
 ;
"RTN","IBCNHUT1",113,0)
UNSOL(HLID,RTY,ID,DATA) ; this code handles unsolicited responses which only have the NIF ID, no insurance ien
"RTN","IBCNHUT1",114,0)
 ; If there are multiple entries in file 36 with the same NIF ID, this code will update all of them.
"RTN","IBCNHUT1",115,0)
 ;
"RTN","IBCNHUT1",116,0)
 N DIC,X,Y,DIE,DA,DR,I,C,INS,PS,ARRAY,DLAYGO
"RTN","IBCNHUT1",117,0)
 Q:RTY'="U" "-1^ED^Error:  Not an unsolicited response!"
"RTN","IBCNHUT1",118,0)
 ; create new entry in 367 for unsolicited responses
"RTN","IBCNHUT1",119,0)
 S DIC="^IBCNH(367,",DIC(0)="LS",X=HLID,DLAYGO=367 D ^DIC S IEN=+Y Q:Y=-1 "-1^ED^DATABASE Error:  HPID RESPONSE entry NOT added!"
"RTN","IBCNHUT1",120,0)
 S DIE=DIC,DA=IEN,DR=".01///"_HLID_";.03///"_RTY K DIC D ^DIE
"RTN","IBCNHUT1",121,0)
 ; Now find every entry in file 36 that has this NIF ID and update it
"RTN","IBCNHUT1",122,0)
 S X=$$INS($P(ID,U,8),"N",.ARRAY)
"RTN","IBCNHUT1",123,0)
 ; loop through each entry and update file 36
"RTN","IBCNHUT1",124,0)
 S C=$G(ARRAY(0)) S:C<1 PS=IEN_"^ED^DATABASE Error:  NIF ID does not exist at this site!"
"RTN","IBCNHUT1",125,0)
 F I=1:1:C S INS=$P($G(ARRAY(I)),U),PS=$$FM36^IBCNHUT2(INS,$P(ID,U,9)_U_$P(DATA,U,9)_U_$P(DATA,U,8)_U_$P(ID,U,8))
"RTN","IBCNHUT1",126,0)
 ; update field .05 in file 367 (PROCESSING STATUS)
"RTN","IBCNHUT1",127,0)
 Q $$STAT(IEN,$P(PS,U,2))
"RTN","IBCNHUT1",128,0)
 ;
"RTN","IBCNHUT1",129,0)
STAT(IEN,STAT) ; updates field .05 in file 367 (PROCESSING STATUS)
"RTN","IBCNHUT1",130,0)
 N DIC,DA,DR
"RTN","IBCNHUT1",131,0)
 S DIE="^IBCNH(367,",DA=IEN,DR=".05///"_STAT D ^DIE
"RTN","IBCNHUT1",132,0)
 K DIC,DA,DR
"RTN","IBCNHUT1",133,0)
 Q IEN
"RTN","IBCNHUT1",134,0)
 ;
"RTN","IBCNHUT1",135,0)
CKDGT(ID) ; Function to calculate and return the check digit of an HPID
"RTN","IBCNHUT1",136,0)
 ;  The check digit is calculated using the Luhn Formula for
"RTN","IBCNHUT1",137,0)
 ;  Modulus 10 "double-add-double" Check Digit.  A value of 24 is
"RTN","IBCNHUT1",138,0)
 ;  added to the total to account for the implied USA (80840) prefix.
"RTN","IBCNHUT1",139,0)
 ;
"RTN","IBCNHUT1",140,0)
 N IBCTOT,IBCN,IBCDIG,IBI
"RTN","IBCNHUT1",141,0)
 S IBCTOT=24
"RTN","IBCNHUT1",142,0)
 F IBI=9:-2:1 S IBCN=2*$E(ID,IBI),IBCTOT=IBCTOT+$E(IBCN)+$E(IBCN,2)+$E(ID,IBI-1)
"RTN","IBCNHUT1",143,0)
 S IBCDIG=150-IBCTOT
"RTN","IBCNHUT1",144,0)
 Q $E(IBCDIG,$L(IBCDIG))
"RTN","IBCNHUT1",145,0)
 ;
"RTN","IBCNHUT1",146,0)
EXR(INS) ; Purge EXR records if the EDI numbers get updated.
"RTN","IBCNHUT1",147,0)
 ; if the insurance company has an EXR response (Exception Report Reject), and the EDI#'s
"RTN","IBCNHUT1",148,0)
 ; get updated, purge the EXR response.
"RTN","IBCNHUT1",149,0)
 Q:INS=""
"RTN","IBCNHUT1",150,0)
 N DA,TQIEN,RSIEN,DIK
"RTN","IBCNHUT1",151,0)
 S TQIEN="" F  S TQIEN=$O(^IBCNH(367.1,"INS",INS,TQIEN)) Q:'TQIEN  D
"RTN","IBCNHUT1",152,0)
 .S RSIEN=$P($G(^IBCNH(367.1,TQIEN,0)),U,7) Q:RSIEN=""
"RTN","IBCNHUT1",153,0)
 .Q:$P($G(^IBCNH(367,RSIEN,0)),U,5)'="EXR"
"RTN","IBCNHUT1",154,0)
 .S DA=TQIEN,DIK="^IBCNH(367.1," D ^DIK
"RTN","IBCNHUT1",155,0)
 .S DA=RSIEN,DIK="^IBCNH(367," D ^DIK
"RTN","IBCNHUT1",156,0)
 K DA,TQIEN,RSIEN,DIK
"RTN","IBCNHUT1",157,0)
 Q
"RTN","IBCNHUT2")
0^5^B47011114^n/a
"RTN","IBCNHUT2",1,0)
IBCNHUT2 ;ALB/GEF - HPID/OEID UTILITIES ;11-MAR-14
"RTN","IBCNHUT2",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBCNHUT2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHUT2",4,0)
 ;
"RTN","IBCNHUT2",5,0)
 ; this routine contains HL7 utilities for the HPID project.
"RTN","IBCNHUT2",6,0)
 Q
"RTN","IBCNHUT2",7,0)
 ;
"RTN","IBCNHUT2",8,0)
PUR ;
"RTN","IBCNHUT2",9,0)
 ; This section handles the purging of the HPID/OEID data stored in the
"RTN","IBCNHUT2",10,0)
 ; HPID/OEID Transmission Queue file (#367.1) and in the HPID/OEID Response file (#367).
"RTN","IBCNHUT2",11,0)
 ; This is called from a nightly tasked routine IBAMTC.  Data created within the last 2 weeks
"RTN","IBCNHUT2",12,0)
 ; cannot be purged. Only requested data that has a NIF-ID response received will be purged.
"RTN","IBCNHUT2",13,0)
 ; Unsolicited responses will also be purged as will those with a status of EXR (Exception 
"RTN","IBCNHUT2",14,0)
 ; Report Reject), whether they have a NIF ID or not.
"RTN","IBCNHUT2",15,0)
 ; The system will not purge entries with no response, entries that have dropped to 
"RTN","IBCNHUT2",16,0)
 ; an exception queue, or entries with a response less than 14 days old.
"RTN","IBCNHUT2",17,0)
 ; Uses this x-ref on file 367:  ^IBCNH(367,"E",future purge date/time,ien)=""
"RTN","IBCNHUT2",18,0)
 ; and finds the corresponding entry in file 367.1 with:  ^IBCNH(367,ien,0)=2nd piece is ien in 367.1
"RTN","IBCNHUT2",19,0)
 ;
"RTN","IBCNHUT2",20,0)
 N ENDDT,TQIEN,RSIEN,DA,DIK,RDTA,STDT,RST,TST,ID,RTYP
"RTN","IBCNHUT2",21,0)
 S ENDDT=$$FMADD^XLFDT(DT,-15)
"RTN","IBCNHUT2",22,0)
 S STDT="" F  S STDT=$O(^IBCNH(367,"E",STDT)) Q:STDT=""!($P(STDT,".",1)>ENDDT)  D
"RTN","IBCNHUT2",23,0)
 .S RSIEN="" F  S RSIEN=$O(^IBCNH(367,"E",STDT,RSIEN)) Q:RSIEN=""  D
"RTN","IBCNHUT2",24,0)
 ..; double check to make sure they are both correct status with status R having a NIF ID before deleting
"RTN","IBCNHUT2",25,0)
 ..S RDTA=$G(^IBCNH(367,RSIEN,0))
"RTN","IBCNHUT2",26,0)
 ..S RST=$P(RDTA,U,5),RTYP=$P(RDTA,U,3)
"RTN","IBCNHUT2",27,0)
 ..I $E(RST)'="R"&(RST'="EXR") Q
"RTN","IBCNHUT2",28,0)
 ..; as of 6/23/14, do not purge EXR
"RTN","IBCNHUT2",29,0)
 ..Q:RST="EXR"
"RTN","IBCNHUT2",30,0)
 ..S TQIEN=$P(RDTA,U,2)
"RTN","IBCNHUT2",31,0)
 ..I TQIEN'="" S TST=$P($G(^IBCNH(367.1,TQIEN,0)),U,4) I $E(TST)'="R" Q
"RTN","IBCNHUT2",32,0)
 ..; if this is a requested response, make sure we got a NIF
"RTN","IBCNHUT2",33,0)
 ..I RTYP="R",RST="R" Q:'$D(^IBCNH(367,"D",8,RSIEN))
"RTN","IBCNHUT2",34,0)
 ..I RTYP="R",RST="R" S ID=$O(^IBCNH(367,"D",8,RSIEN,"")) Q:$P($G(^IBCNH(367,RSIEN,1,ID,0)),U,2)=""
"RTN","IBCNHUT2",35,0)
 ..; OK TO DELETE
"RTN","IBCNHUT2",36,0)
 ..S DA=RSIEN,DIK="^IBCNH(367," D ^DIK
"RTN","IBCNHUT2",37,0)
 ..Q:TQIEN=""
"RTN","IBCNHUT2",38,0)
 ..S DA=TQIEN,DIK="^IBCNH(367.1," D ^DIK
"RTN","IBCNHUT2",39,0)
 K ENDDT,TQIEN,RSIEN,DA,DIK,RDTA,STDT,ID,RTYP
"RTN","IBCNHUT2",40,0)
 Q
"RTN","IBCNHUT2",41,0)
 ;
"RTN","IBCNHUT2",42,0)
EXT ; kick off HL7 queries of each insurance company sent to the NIF for the initial HPID extract
"RTN","IBCNHUT2",43,0)
 ; called from option IBCNH HPID NIF BATCH QUERY.  To be run once FSC notifies site that they are
"RTN","IBCNHUT2",44,0)
 ; ready - ie. they have received and processed the data extracts and have the NIF ID's for each
"RTN","IBCNHUT2",45,0)
 ; insurance company.
"RTN","IBCNHUT2",46,0)
 ;
"RTN","IBCNHUT2",47,0)
 N IBN,DIE,DA,DR,C
"RTN","IBCNHUT2",48,0)
 ; activate HPID/OEID flag in IB SITE PARAMS
"RTN","IBCNHUT2",49,0)
 S DIE="^IBE(350.9,",DA=$P($G(^IBE(350.9,0)),U,3),DR=70.01_"///"_1 D ^DIE
"RTN","IBCNHUT2",50,0)
 S IBN=0,C=0 F  S IBN=$O(^DIC(36,IBN)) Q:'IBN  D
"RTN","IBCNHUT2",51,0)
 .; update display with status
"RTN","IBCNHUT2",52,0)
 .S C=C+1 I C#20 W "."
"RTN","IBCNHUT2",53,0)
 .; don't send if we already have a pending message for this insurance company
"RTN","IBCNHUT2",54,0)
 .Q:$D(^IBCNH(367.1,"INS",IBN))
"RTN","IBCNHUT2",55,0)
 .; don't send if we already have a NIF ID for this insurance company
"RTN","IBCNHUT2",56,0)
 .Q:$$NIF^IBCNHUT1(IBN)
"RTN","IBCNHUT2",57,0)
 .; don't send if there are no patients associated with this ins.co. OR if there are no groups associated with this insurance co.
"RTN","IBCNHUT2",58,0)
 .Q:'$D(^DPT("AB",IBN))
"RTN","IBCNHUT2",59,0)
 .Q:'$D(^IBA(355.3,"B",IBN))
"RTN","IBCNHUT2",60,0)
 .; only active insurance companies
"RTN","IBCNHUT2",61,0)
 .Q:$P($G(^DIC(36,IBN,0)),U,5)=1
"RTN","IBCNHUT2",62,0)
 .; from here we can kick off the HL7 message.  
"RTN","IBCNHUT2",63,0)
 .D SEND^IBCNHHLO(IBN)
"RTN","IBCNHUT2",64,0)
 K IBN,DIE,DA,DR,C
"RTN","IBCNHUT2",65,0)
 Q
"RTN","IBCNHUT2",66,0)
 ;
"RTN","IBCNHUT2",67,0)
FM36(INS,DATA,TQN) ; updates file 36, 8 node with data recieved from the NIF
"RTN","IBCNHUT2",68,0)
 ; INS = insurance company ien (REQUIRED)
"RTN","IBCNHUT2",69,0)
 ; DATA=String containing HPID data in this format:  HPID^CHP/SHP^PARENT^NIF ID
"RTN","IBCNHUT2",70,0)
 ;  NIF = NIF ID for insurance company
"RTN","IBCNHUT2",71,0)
 ; TQN=ien of entry in file 367.1 (if data came from a requested response)
"RTN","IBCNHUT2",72,0)
 ; returns "-1^Error code^Error reason" if entry not added and Processing Status if added/updated
"RTN","IBCNHUT2",73,0)
 ;
"RTN","IBCNHUT2",74,0)
 N DIC,DR,DA,DIE,I,X
"RTN","IBCNHUT2",75,0)
 Q:INS="" "-1^ED^DATABASE Error:  Not a valid Insurance Company ien!"
"RTN","IBCNHUT2",76,0)
 ; validate Vista Unique ID and HPID data format
"RTN","IBCNHUT2",77,0)
 Q:'$D(^DIC(36,INS)) "-1^ED^Error:  Insurance ien does NOT exist at this site!"
"RTN","IBCNHUT2",78,0)
 ; don't update insurance file if Legacy ID's have changed since we sent the request
"RTN","IBCNHUT2",79,0)
 Q:$$LEG($G(TQN),INS) "-1^EL^LEGACY ID Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",80,0)
 ; ready to update file 36, fields 8.01, 8.02, 8.03 and 8.04 with DATA
"RTN","IBCNHUT2",81,0)
 S DIE="^DIC(36,",DA=INS,DR="" K DIC
"RTN","IBCNHUT2",82,0)
 F I=2:1:4 S DR=DR_"8.0"_I_"///^S X=$P(DATA,U,"_I_");"
"RTN","IBCNHUT2",83,0)
 D ^DIE
"RTN","IBCNHUT2",84,0)
 ; add HPID seperately since if it fails input transform nothing else updates
"RTN","IBCNHUT2",85,0)
 S DR="8.01///^S X=$P(DATA,U)" D ^DIE
"RTN","IBCNHUT2",86,0)
 K DIE,DR,I,INS,X,LID,DIC
"RTN","IBCNHUT2",87,0)
 Q DA_"^R^RESPONSE PROCESSED:  File 36 Updated"
"RTN","IBCNHUT2",88,0)
 ;
"RTN","IBCNHUT2",89,0)
FM71(INS,HLID) ; adds entry to file 367.1 (HPID/OEID TRANSMISSION QUEUE) and file 367 (HPID/OEID RESPONSE) 
"RTN","IBCNHUT2",90,0)
 ; INS =insurance company ien (required)
"RTN","IBCNHUT2",91,0)
 ; HLID =  message control ID number assigned by HL7 when HL7 message was created (required)
"RTN","IBCNHUT2",92,0)
 ; returns ien of entry added to file 367.1
"RTN","IBCNHUT2",93,0)
 ;
"RTN","IBCNHUT2",94,0)
 N DIC,DR,DA,DIE,Y,IDN,DATA,TQN,RSN,X,DLAYGO
"RTN","IBCNHUT2",95,0)
 Q:INS="" "-1^Error:  Not a valid Insurance Company ien!"
"RTN","IBCNHUT2",96,0)
 Q:HLID="" "-1^Error:  No HL7 Control Number defined!"
"RTN","IBCNHUT2",97,0)
 S DIC="^IBCNH(367.1,",DIC(0)="LS",X=$P($G(^IBCNH(367.1,0)),U,3)+1,DLAYGO=367.1 D ^DIC
"RTN","IBCNHUT2",98,0)
 Q:Y=-1 "-1^Error:  HPID QUEUE entry NOT added!"
"RTN","IBCNHUT2",99,0)
 S TQN=+Y
"RTN","IBCNHUT2",100,0)
 ; add stub record in file 367
"RTN","IBCNHUT2",101,0)
 S DIC="^IBCNH(367,",DIC(0)="LS",X=HLID,DLAYGO=367 D ^DIC
"RTN","IBCNHUT2",102,0)
 ; update 367 with additional fields.
"RTN","IBCNHUT2",103,0)
 S RSN=+Y
"RTN","IBCNHUT2",104,0)
 I Y>0 S DIE=DIC,DA=+Y,DR=".01///"_HLID_";.02///"_TQN_";.03///R" K DIC D ^DIE
"RTN","IBCNHUT2",105,0)
 ; now update new 367.1 entry with insurance company data fields on 2 node, response info and status of A for AWAITING RESPONSE
"RTN","IBCNHUT2",106,0)
 Q:'$$R36(INS,.DATA)
"RTN","IBCNHUT2",107,0)
 S DIE="^IBCNH(367.1,",DA=TQN,DR="" K DIC
"RTN","IBCNHUT2",108,0)
 S DR=".02///"_INS_";"_".04///"_"A"_";.07///"_RSN
"RTN","IBCNHUT2",109,0)
 F I=1:1:8 S DR=DR_";2.0"_I_"///^S X=$P(DATA(1),U,"_I_")"
"RTN","IBCNHUT2",110,0)
 D ^DIE
"RTN","IBCNHUT2",111,0)
 ; update ID multiple with ID data
"RTN","IBCNHUT2",112,0)
 F IDN=1:1:10 I $P($G(DATA(2)),U,IDN)'="" D
"RTN","IBCNHUT2",113,0)
 .; create ID multiple
"RTN","IBCNHUT2",114,0)
 .S DIC="^IBCNH(367.1,"_TQN_",1,",DA(1)=TQN,DIC(0)="LS" S X="`"_IDN,DLAYGO=367.1 D ^DIC Q:Y=-1
"RTN","IBCNHUT2",115,0)
 .; add ID data to new multiple entry
"RTN","IBCNHUT2",116,0)
 .S DIE=DIC,DA=+Y,DR=".01///"_IDN_";.02///^S X=$P($G(DATA(2)),U,"_IDN_");.03///"_$P($G(DATA(3)),U,IDN) K DIC
"RTN","IBCNHUT2",117,0)
 .D ^DIE
"RTN","IBCNHUT2",118,0)
 K DIC,DR,DA,DIE,Y,IDN,DATA,RSN,X,DLAYGO
"RTN","IBCNHUT2",119,0)
 Q TQN
"RTN","IBCNHUT2",120,0)
 ;
"RTN","IBCNHUT2",121,0)
FM367(IEN,DATA,ID,QL) ; updates entry to file 367 (HPID/OEID RESPONSE) for requested responses,
"RTN","IBCNHUT2",122,0)
 ; or creates a new entry for unsolicited responses.
"RTN","IBCNHUT2",123,0)
 ; IEN = ien of existing entry in file 367 (will only exist for requested responses)
"RTN","IBCNHUT2",124,0)
 ; DATA = data string containing response data for 0 node (NOTE:  You do not have to pass all this data, but it must be in this format):
"RTN","IBCNHUT2",125,0)
 ; HLID^TQN^RTY^INS NAME^NPS^STAT D/T^UID^PARENT HPID^CHP or SHP
"RTN","IBCNHUT2",126,0)
 ;      TQN = Transaction ien in file 367.1 (HPID/OEID TRANSMISSION QUEUE), null for unsolicited responses 
"RTN","IBCNHUT2",127,0)
 ;      RTY = Response Type:  R for Requested or U for Unsolicited
"RTN","IBCNHUT2",128,0)
 ;      NPS = Processing status at NIF, either R for Response Processed or X for Exception Report or EXR for Rejected
"RTN","IBCNHUT2",129,0)
 ;  HLID = control ID of HL7 message (required if this is an unsolicited response, not req'd if you have ien)
"RTN","IBCNHUT2",130,0)
 ; ID = Data string of ID data sent from NIF.  MUST BE in this format: 
"RTN","IBCNHUT2",131,0)
 ;(ie.  HPID must always be 9th piece, NIF must be 8, If no EDI numbers received, those pieces will be null, etc):
"RTN","IBCNHUT2",132,0)
 ; EDI ID NUMBER-PROF^EDI ID NUMBER-INST^EDI PROF SECONDARY ID(1)^EDI PROF SECONDARY ID(2)^EDI INST SECONDARY ID(1)^EDI INST SECONDARY ID(2)^VA NATIONAL ID^NIF ID^HPID/OEID^VISTA UNIQUE ID    
"RTN","IBCNHUT2",133,0)
 ; QL=string of secondary ID qualifiers, in this format:  ^^QUAL1(PS1)^QUAL2(PS2)^QAUL3(IS1)^QUAL4(IS2)
"RTN","IBCNHUT2",134,0)
 ; RETURNS:  IEN of file 367 entry that was updated, or -1 for error condition
"RTN","IBCNHUT2",135,0)
 ;
"RTN","IBCNHUT2",136,0)
 N DIC,DR,DA,DIE,Y,IDN,HLID,RTY,INS,TQN,PS,NPS,DLAYGO
"RTN","IBCNHUT2",137,0)
 S DATA=$G(DATA),ID=$G(ID),QL=$G(QL)
"RTN","IBCNHUT2",138,0)
 S HLID=$P($G(DATA),U),RTY=$P($G(DATA),U,3)
"RTN","IBCNHUT2",139,0)
 I RTY="R",$G(IEN)="" Q "-1^Error:  No HPID/OEID Response ien!"
"RTN","IBCNHUT2",140,0)
 I $G(IEN)="",$G(HLID)="" Q "-1^Error:  No HPID/OEID Response and no HL7 ien!"
"RTN","IBCNHUT2",141,0)
 ; if NIF proccesing status is not R, update response status only and quit
"RTN","IBCNHUT2",142,0)
 Q:$P(DATA,U,5)'="R" $$STAT^IBCNHUT1(IEN,$P(DATA,U,5))
"RTN","IBCNHUT2",143,0)
 ; create new entry in 367 for unsolicited responses and update file 36 using NIF ID
"RTN","IBCNHUT2",144,0)
 I RTY="U" S IEN=$$UNSOL^IBCNHUT1(HLID,RTY,ID,DATA)
"RTN","IBCNHUT2",145,0)
 Q:$P(IEN,U)=-1 "-1^Error:  HPID RESPONSE entry NOT added!"
"RTN","IBCNHUT2",146,0)
 ; create and update ID multiple
"RTN","IBCNHUT2",147,0)
 F IDN=1:1:10 I $P(ID,U,IDN)'="" D
"RTN","IBCNHUT2",148,0)
 .S DIC="^IBCNH(367,"_IEN_",1,",DA(1)=IEN,DIC(0)="LS",X="`"_IDN,DLAYGO=367 D ^DIC Q:Y=-1
"RTN","IBCNHUT2",149,0)
 .S DIE=DIC,DA=+Y,DR=".01///"_IDN_";.02///^S X=$P(ID,U,"_IDN_");.03///"_$P(QL,U,IDN) K DIC
"RTN","IBCNHUT2",150,0)
 .D ^DIE
"RTN","IBCNHUT2",151,0)
 ; update 367 with additional fields.
"RTN","IBCNHUT2",152,0)
 S DIE="^IBCNH(367,",DA=IEN,DR=""
"RTN","IBCNHUT2",153,0)
 F I=3,4,7,8,9 S DR=DR_".0"_I_"///^S X=$P(DATA,U,"_I_");"
"RTN","IBCNHUT2",154,0)
 D ^DIE
"RTN","IBCNHUT2",155,0)
 ; now update the insurance company entry in file 36 for requested responses.  Use the insurance
"RTN","IBCNHUT2",156,0)
 ; ien that was sent in the original request.  
"RTN","IBCNHUT2",157,0)
 ; Unsolicited response are updated via previous call to $$UNSOL^IBCNHUT1
"RTN","IBCNHUT2",158,0)
 Q:RTY="U" IEN
"RTN","IBCNHUT2",159,0)
 S INS="",TQN=$P($G(^IBCNH(367,IEN,0)),U,2) S:TQN'="" INS=$P(^IBCNH(367.1,TQN,0),U,2)
"RTN","IBCNHUT2",160,0)
 S PS=$$FM36(INS,$P(ID,U,9)_U_$P(DATA,U,9)_U_$P(DATA,U,8)_U_$P(ID,U,8),TQN)
"RTN","IBCNHUT2",161,0)
 ; update field .05 in file 367 (PROCESSING STATUS)
"RTN","IBCNHUT2",162,0)
 Q $$STAT^IBCNHUT1(IEN,$P(PS,U,2))
"RTN","IBCNHUT2",163,0)
 ;
"RTN","IBCNHUT2",164,0)
R36(INS,DATA) ; this function gathers all the insurance company data we need to send to the NIF
"RTN","IBCNHUT2",165,0)
 ; INS= ien of insurance company entry (required)
"RTN","IBCNHUT2",166,0)
 ; DATA=name of array to store data results in
"RTN","IBCNHUT2",167,0)
 ; Returns:  DATA(0) = Insurance Ien^Insurance Company Name^INACTIVE FLAG^UID^NIF ID^HPID/OEID^CHP/SHP^PARENT HPID
"RTN","IBCNHUT2",168,0)
 ;           DATA(1) = STREET ADDRESS 1^STR AD2^CITY^STATE^ZIP^BILLING CO NAME^TYPE OF COVERAGE^PHONE#
"RTN","IBCNHUT2",169,0)
 ;           DATA(2) = string of ID's in this format: 
"RTN","IBCNHUT2",170,0)
 ; EDI ID NUMBER-PROF^EDI ID NUMBER-INST^EDI PROF SECONDARY ID(1)^EDI PROF SECONDARY ID(2)^EDI INST SECONDARY ID(1)^EDI INST SECONDARY ID(2)^VA NATIONAL ID^NIF ID^HPID/OEID^VISTA UNIQUE ID
"RTN","IBCNHUT2",171,0)
 ;           DATA(3) = string of ID qualifiers in this format:   ^^QUAL1(PS1)^QUAL2(PS2)^QAUL3(IS1)^QUAL4(IS2)
"RTN","IBCNHUT2",172,0)
 ;
"RTN","IBCNHUT2",173,0)
 N ID,QL,I,ND
"RTN","IBCNHUT2",174,0)
 F I=0:1:3 S DATA(I)=""
"RTN","IBCNHUT2",175,0)
 S ND(.11)=$G(^DIC(36,INS,.11)),ND(0)=$G(^DIC(36,INS,0))
"RTN","IBCNHUT2",176,0)
 F I=1,2,4:1:7 S DATA(1)=DATA(1)_$P(ND(.11),U,I)_U
"RTN","IBCNHUT2",177,0)
 S DATA(1)=DATA(1)_$P(ND(0),U,13)_U_$P($G(^DIC(36,INS,.13)),U)
"RTN","IBCNHUT2",178,0)
 S ID(7)=$$VID^IBCNHUT1(INS),ND(6)=$G(^DIC(36,INS,6)),ND(3)=$G(^DIC(36,INS,3))
"RTN","IBCNHUT2",179,0)
 S ID(3)=$P(ND(6),U,6),ID(4)=$P(ND(6),U,8),ID(5)=$P(ND(6),U,2),ID(6)=$P(ND(6),U,4)
"RTN","IBCNHUT2",180,0)
 S QL(3)=$P(ND(6),U,5),QL(4)=$P(ND(6),U,7),QL(5)=$P(ND(6),U),QL(6)=$P(ND(6),U,3)
"RTN","IBCNHUT2",181,0)
 S ID(1)=$P(ND(3),U,2),ID(2)=$P(ND(3),U,4),ID(10)=$$UID^IBCNHUT1(INS)
"RTN","IBCNHUT2",182,0)
 S DATA(0)=INS_U_$P(ND(0),U)_U_$P(ND(0),U,5)_U_$$UID^IBCNHUT1(INS)_U_$$NIF^IBCNHUT1(INS)_U_$$HPD^IBCNHUT1(INS)_U_$$SHP^IBCNHUT1(INS)_U_$$PHP^IBCNHUT1(INS)
"RTN","IBCNHUT2",183,0)
 S ID(8)=$P(DATA(0),U,5),ID(9)=$P(DATA(0),U,6)
"RTN","IBCNHUT2",184,0)
 F I=1:1:10 S DATA(2)=DATA(2)_$G(ID(I))_U
"RTN","IBCNHUT2",185,0)
 F I=1:1:6 S DATA(3)=DATA(3)_$G(QL(I))_U
"RTN","IBCNHUT2",186,0)
 K ID,QL,I,ND
"RTN","IBCNHUT2",187,0)
 Q 1
"RTN","IBCNHUT2",188,0)
LEG(TQN,INS) ; function to determine if legacy ID's changed since we sent them out
"RTN","IBCNHUT2",189,0)
 ; returns a 0 if Legacy ID has not changed and a "1^EL^Error:  Legacy ID Changed!" if it has.
"RTN","IBCNHUT2",190,0)
 ;
"RTN","IBCNHUT2",191,0)
 N N,TID,I
"RTN","IBCNHUT2",192,0)
 Q:TQN="" 0
"RTN","IBCNHUT2",193,0)
 Q:INS="" 0
"RTN","IBCNHUT2",194,0)
 F I=1,2 D
"RTN","IBCNHUT2",195,0)
 .S N=$O(^IBCNH(367.1,TQN,1,"B",I,"")) Q:N=""
"RTN","IBCNHUT2",196,0)
 .S TID(I)=$P($G(^IBCNH(367.1,TQN,1,N,0)),U,2)
"RTN","IBCNHUT2",197,0)
 Q:$G(TID(1))'=$P($G(^DIC(36,INS,3)),U,2) "1^EL^Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",198,0)
 Q:$G(TID(2))'=$P($G(^DIC(36,INS,3)),U,4) "1^EL^Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",199,0)
 K N,TID,I
"RTN","IBCNHUT2",200,0)
 Q 0
"RTN","IBCNSC01")
0^4^B59075221^B57572758
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371,399,416,432,494,519**;21-MAR-94;Build 56
"RTN","IBCNSC01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3,IBHPD
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 ;
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+4,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+5,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+8,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12)_$S(+$P(IBCNS0,"^",18):" ("_$$FTFN^IBCNSU31(,+IBCNS)_")",1:""))
"RTN","IBCNSC01",21,0)
 ;
"RTN","IBCNSC01",22,0)
 S OFFSET=45
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+1,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",28,0)
 I +IBCNS3=2 D SET^IBCNSP(START+6,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",29,0)
 ;
"RTN","IBCNSC01",30,0)
 S START=11,OFFSET=2
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",34,0)
 D SET^IBCNSP(START+3,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+4,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
"RTN","IBCNSC01",36,0)
 D SET^IBCNSP(START+5,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
"RTN","IBCNSC01",37,0)
 D SET^IBCNSP(START+6,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
"RTN","IBCNSC01",38,0)
 D SET^IBCNSP(START+7,OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3)) ;
"RTN","IBCNSC01",39,0)
 ;ib*2.0*519 
"RTN","IBCNSC01",40,0)
 S IBHPD=$$HPD^IBCNHUT1(+IBCNS)
"RTN","IBCNSC01",41,0)
 D SET^IBCNSP(START+8,OFFSET+13,$P($$HOD^IBCNHUT1(IBHPD),U,2)_": "_IBHPD)
"RTN","IBCNSC01",42,0)
 ;
"RTN","IBCNSC01",43,0)
 S OFFSET=41
"RTN","IBCNSC01",44,0)
 D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",45,0)
 D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",46,0)
 D SET^IBCNSP(START+3,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
"RTN","IBCNSC01",47,0)
 D SET^IBCNSP(START+4,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
"RTN","IBCNSC01",48,0)
 D SET^IBCNSP(START+5,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
"RTN","IBCNSC01",49,0)
 D SET^IBCNSP(START+6,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
"RTN","IBCNSC01",50,0)
 ;IB*2.0*432/TAZ Added fields 6.09 and 6.1
"RTN","IBCNSC01",51,0)
 D SET^IBCNSP(START+7,OFFSET-3," Prnt Sec/Tert Auto Claims: "_$$GET1^DIQ(36,+IBCNS,6.09))
"RTN","IBCNSC01",52,0)
 D SET^IBCNSP(START+8,OFFSET-5," Prnt Med Sec Claims w/o MRA: "_$$GET1^DIQ(36,+IBCNS,6.1))
"RTN","IBCNSC01",53,0)
 Q
"RTN","IBCNSC01",54,0)
 ;
"RTN","IBCNSC01",55,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",56,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",57,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",58,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",59,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",60,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",61,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",62,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",63,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",64,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",65,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",66,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",67,0)
PHONEQ Q IBX
"RTN","IBCNSC01",68,0)
 ;
"RTN","IBCNSC01",69,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",70,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",71,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",72,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",73,0)
 S START=21,OFFSET=25
"RTN","IBCNSC01",74,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",75,0)
 N OFFSET S OFFSET=2
"RTN","IBCNSC01",76,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",77,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",78,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",79,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",80,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC01",81,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",82,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",83,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",84,0)
 Q
"RTN","IBCNSC01",85,0)
 ;
"RTN","IBCNSC01",86,0)
 ;
"RTN","IBCNSC01",87,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",88,0)
 ; this insurance company.
"RTN","IBCNSC01",89,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",90,0)
 ;     -  9/9/09 - eIV updated
"RTN","IBCNSC01",91,0)
 ;     -  2/4/13 - remove ePharmacy references (IB*2*494)
"RTN","IBCNSC01",92,0)
 ;
"RTN","IBCNSC01",93,0)
 NEW PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",94,0)
 NEW START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",95,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",96,0)
 I PAYERIEN D
"RTN","IBCNSC01",97,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",98,0)
 . S APP=0
"RTN","IBCNSC01",99,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",100,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",101,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",102,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",103,0)
 .. I APPNAME="IIV" S APPNAME="eIV"   ; IB*2*416 - change external display to be eIV
"RTN","IBCNSC01",104,0)
 .. I APPNAME="E-PHARM" Q             ; IB*2*494 - don't display ePharmacy application data
"RTN","IBCNSC01",105,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",106,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",107,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",108,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",109,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",110,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID (*416 field not used)
"RTN","IBCNSC01",111,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID (*416 field not used)
"RTN","IBCNSC01",112,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN (*416 field not used)
"RTN","IBCNSC01",113,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",114,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",115,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",116,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",117,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",118,0)
 .. Q
"RTN","IBCNSC01",119,0)
 . Q
"RTN","IBCNSC01",120,0)
 ;
"RTN","IBCNSC01",121,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC01",122,0)
 S IB1ST("PAYER")=START
"RTN","IBCNSC01",123,0)
 S TITLE=" Payer Information:  e-IV "     ; esg - IB*2*494 - remove ePharmacy reference
"RTN","IBCNSC01",124,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",125,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",126,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",127,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",128,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",129,0)
 S IBLINE=START+2
"RTN","IBCNSC01",130,0)
 ;
"RTN","IBCNSC01",131,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",132,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",133,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",134,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",135,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",136,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",137,0)
 . Q
"RTN","IBCNSC01",138,0)
 ;
"RTN","IBCNSC01",139,0)
 ; Display all the applications
"RTN","IBCNSC01",140,0)
 S APPNAME=""
"RTN","IBCNSC01",141,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",142,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",143,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",144,0)
 . ;
"RTN","IBCNSC01",145,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",146,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",147,0)
 . D SET^IBCNSP(IBLINE,51,"FSC Auto-Update: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",148,0)
 . ;
"RTN","IBCNSC01",149,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",150,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",151,0)
 . D SET^IBCNSP(IBLINE,55,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",152,0)
 . ;
"RTN","IBCNSC01",153,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",154,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",155,0)
 . ;
"RTN","IBCNSC01",156,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",157,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",158,0)
 . ;
"RTN","IBCNSC01",159,0)
 . D SET^IBCNSP(IBLINE,50,"Date Deactivated: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",160,0)
 . ;
"RTN","IBCNSC01",161,0)
 . Q
"RTN","IBCNSC01",162,0)
PAYERX ;
"RTN","IBCNSC01",163,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",164,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",165,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",166,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",167,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",168,0)
 Q
"RTN","IBCNSC01",169,0)
 ;
"RTN","IBCNSC01",170,0)
 ;
"RTN","IBCNSC01",171,0)
REMARKS ;
"RTN","IBCNSC01",172,0)
 ;
"RTN","IBCNSC01",173,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",174,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",175,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",176,0)
 ;
"RTN","IBCNSC01",177,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",178,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",179,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",180,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",181,0)
 . Q
"RTN","IBCNSC01",182,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",183,0)
 Q
"RTN","IBCNSC01",184,0)
 ;
"RTN","IBCNSC01",185,0)
SYN ;
"RTN","IBCNSC01",186,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",187,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",188,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",189,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",190,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",191,0)
 Q
"RTN","IBCNSC01",192,0)
 ;
"RTN","IBCNSC1")
0^7^B90495985^B88597979
"RTN","IBCNSC1",1,0)
IBCNSC1 ;ALB/NLR - IBCNS INSURANCE COMPANY ;23-MAR-93
"RTN","IBCNSC1",2,0)
 ;;2.0;INTEGRATED BILLING;**62,137,232,291,320,348,349,371,400,519**;21-MAR-94;Build 56
"RTN","IBCNSC1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC1",4,0)
 ;
"RTN","IBCNSC1",5,0)
% G EN^IBCNSC
"RTN","IBCNSC1",6,0)
 ;
"RTN","IBCNSC1",7,0)
AI ; -- (In)Activate Company
"RTN","IBCNSC1",8,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",9,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY G EXIT
"RTN","IBCNSC1",10,0)
 D ^IBCNSC2
"RTN","IBCNSC1",11,0)
 G EXIT
"RTN","IBCNSC1",12,0)
CC ; -- Change Insurance Company
"RTN","IBCNSC1",13,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",14,0)
 S IBCNS1=IBCNS K IBCNS D INSCO^IBCNSC
"RTN","IBCNSC1",15,0)
 I '$D(IBCNS) S IBCNS=IBCNS1
"RTN","IBCNSC1",16,0)
 K IBCNS1,VALMQUIT
"RTN","IBCNSC1",17,0)
 G EXIT
"RTN","IBCNSC1",18,0)
EA ; -- Billing,Claims,Appeals,Inquiry,Telephone,Main,Remarks,Synonyms
"RTN","IBCNSC1",19,0)
 D FULL^VALM1
"RTN","IBCNSC1",20,0)
 ;
"RTN","IBCNSC1",21,0)
 ; IB*2*320 - check key for associate company action
"RTN","IBCNSC1",22,0)
 I $G(IBY)=",13,",'$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G EXIT
"RTN","IBCNSC1",23,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC1",24,0)
 . D PAUSE^VALM1
"RTN","IBCNSC1",25,0)
 . Q
"RTN","IBCNSC1",26,0)
 ;
"RTN","IBCNSC1",27,0)
 W !!
"RTN","IBCNSC1",28,0)
 D MAIN
"RTN","IBCNSC1",29,0)
 ;
"RTN","IBCNSC1",30,0)
 ; -- was company deleted
"RTN","IBCNSC1",31,0)
 I '$D(^DIC(36,IBCNS)) W !!,"<DELETED>",!! S VALMQUIT="" Q
"RTN","IBCNSC1",32,0)
 ;
"RTN","IBCNSC1",33,0)
EXIT ;
"RTN","IBCNSC1",34,0)
 D HDR^IBCNSC,BLD^IBCNSC
"RTN","IBCNSC1",35,0)
 S VALMBCK="R"
"RTN","IBCNSC1",36,0)
 Q
"RTN","IBCNSC1",37,0)
MAIN ; -- Call edit template
"RTN","IBCNSC1",38,0)
 N IBEDIKEY,Z
"RTN","IBCNSC1",39,0)
 L +^DIC(36,+IBCNS):5 I '$T D LOCKED^IBTRCD1 G MAINQ
"RTN","IBCNSC1",40,0)
 I $G(IBY)=",12," D FACID
"RTN","IBCNSC1",41,0)
 F Z=1,2,4,9,13,14 S IBEDIKEY(Z)=$P($G(^DIC(36,+IBCNS,3)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",42,0)
 F Z=1:1:8 S IBEDIKEY(Z,6)=$P($G(^DIC(36,+IBCNS,6)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",43,0)
 I $G(IBY)'=",12," N DIE,DA,DR S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="[IBEDIT INS CO1]" D ^DIE K DIE S:$D(Y) IB("^")=1 D:$TR($P($G(^DIC(36,IBCNS,6)),U,1,8),U)]"" CUIDS(IBCNS)
"RTN","IBCNSC1",44,0)
 I $G(IBY)=",12," D EDITID^IBCEP(+IBCNS)
"RTN","IBCNSC1",45,0)
 I $F(",6,13,",$G(IBY)) D PARENT^IBCNSC02(+IBCNS)   ; parent/child management
"RTN","IBCNSC1",46,0)
 L -^DIC(36,+IBCNS)
"RTN","IBCNSC1",47,0)
 ; IB*2.0*519:  If field 3.02 or 3.04 has changed, trigger HL7 to update the NIF
"RTN","IBCNSC1",48,0)
 I (IBEDIKEY(2)'=$P($G(^DIC(36,+IBCNS,3)),U,2))!(IBEDIKEY(4)'=$P($G(^DIC(36,+IBCNS,3)),U,4)) D EXR^IBCNHUT1(IBCNS),SEND^IBCNHHLO(IBCNS)
"RTN","IBCNSC1",49,0)
MAINQ Q
"RTN","IBCNSC1",50,0)
 ;
"RTN","IBCNSC1",51,0)
FACID ; -- Edit facility ids
"RTN","IBCNSC1",52,0)
 D FACID^IBCEP2B(+IBCNS,"E")
"RTN","IBCNSC1",53,0)
 Q
"RTN","IBCNSC1",54,0)
 ;
"RTN","IBCNSC1",55,0)
SORRY ; -- can't inactivate, don't have key
"RTN","IBCNSC1",56,0)
 W !!,"You do not have access to Inactivate entries.  See your application coordinator.",! D PAUSE^VALM1
"RTN","IBCNSC1",57,0)
 Q
"RTN","IBCNSC1",58,0)
PRESCR ;
"RTN","IBCNSC1",59,0)
 N OFFSET,START,IBCNS18,IBADD
"RTN","IBCNSC1",60,0)
 S IBCNS18=$$ADDRESS^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSC1",61,0)
 S START=41,OFFSET=2
"RTN","IBCNSC1",62,0)
 D SET^IBCNSP(START,OFFSET+19," Prescription Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC1",63,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS18,"^",7),0)),"^",1))
"RTN","IBCNSC1",64,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS18,"^",1))
"RTN","IBCNSC1",65,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS18,"^",2))
"RTN","IBCNSC1",66,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS18,"^",11))
"RTN","IBCNSC1",67,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC1",68,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS18,"^",3)) S IBADD=1
"RTN","IBCNSC1",69,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS18,"^",4),1,15)_$S($P(IBCNS18,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS18,"^",5),0)),"^",2)_" "_$E($P(IBCNS18,"^",6),1,5))
"RTN","IBCNSC1",70,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS18,"^",8))
"RTN","IBCNSC1",71,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS18,"^",9))
"RTN","IBCNSC1",72,0)
 Q
"RTN","IBCNSC1",73,0)
 ;
"RTN","IBCNSC1",74,0)
PROVID N OFFSET,START,IBCNS4,IBCNS3,IBDISP,Z,LINE
"RTN","IBCNSC1",75,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC1",76,0)
 S (IB1ST("PROVID"),LINE)=START
"RTN","IBCNSC1",77,0)
 S OFFSET=2,IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3))
"RTN","IBCNSC1",78,0)
 ;       
"RTN","IBCNSC1",79,0)
 D SET^IBCNSP(LINE,OFFSET+25,"Provider IDs",IORVON,IORVOFF)
"RTN","IBCNSC1",80,0)
 N OFFSET
"RTN","IBCNSC1",81,0)
 S LINE=LINE+1,OFFSET=1
"RTN","IBCNSC1",82,0)
 D SET^IBCNSP(LINE,OFFSET,"Billing Provider Secondary ID")
"RTN","IBCNSC1",83,0)
 ;
"RTN","IBCNSC1",84,0)
 N Z,Z0,Z1,IBS,I,DIV,FT,CU,CUF,DIVISION,FORMTYPE,PIDT
"RTN","IBCNSC1",85,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",86,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",87,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",88,0)
 . Q:'($P(Z0,U,8)="E")
"RTN","IBCNSC1",89,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,3),+$P(Z0,U,4))=$P(Z0,U,6)_U_$P(Z0,U,7)
"RTN","IBCNSC1",90,0)
 ;
"RTN","IBCNSC1",91,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",92,0)
 . S DIVISION=$$DIV^IBCEP7(DIV)
"RTN","IBCNSC1",93,0)
 . S CU="",CUF=0 F  S CU=$O(IBS(DIV,CU)) Q:CU=""  D
"RTN","IBCNSC1",94,0)
 .. S FT="" F  S FT=$O(IBS(DIV,CU,FT)) Q:FT=""  D
"RTN","IBCNSC1",95,0)
 ... S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",96,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",97,0)
 ... I 'CUF,+CU S CUF=1 S TEXT=$P(DIVISION,"/")_" Care Units :",OFFSET=5 D SET^IBCNSP(LINE,OFFSET,TEXT) S LINE=LINE+1
"RTN","IBCNSC1",98,0)
 ... I CU=0 S TEXT=DIVISION_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=2
"RTN","IBCNSC1",99,0)
 ... I +CU S TEXT=$$EXPAND^IBTRE(355.92,.03,CU)_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=5
"RTN","IBCNSC1",100,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",101,0)
 ;
"RTN","IBCNSC1",102,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",103,0)
 ;
"RTN","IBCNSC1",104,0)
 K IBS
"RTN","IBCNSC1",105,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",106,0)
 D SET^IBCNSP(LINE,OFFSET,"Additional Billing Provider Secondary IDs")
"RTN","IBCNSC1",107,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",108,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",109,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",110,0)
 . Q:'($P(Z0,U,8)="A")
"RTN","IBCNSC1",111,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",112,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",113,0)
 ;
"RTN","IBCNSC1",114,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",115,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",116,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",117,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",118,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",119,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",120,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",121,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",122,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",123,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",124,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",125,0)
 ;
"RTN","IBCNSC1",126,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",127,0)
 ;
"RTN","IBCNSC1",128,0)
 K IBS
"RTN","IBCNSC1",129,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",130,0)
 D SET^IBCNSP(LINE,OFFSET,"VA-Laboratory or Facility Secondary IDs")
"RTN","IBCNSC1",131,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",132,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",133,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",134,0)
 . Q:'($P(Z0,U,8)="LF")
"RTN","IBCNSC1",135,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",136,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",137,0)
 ;
"RTN","IBCNSC1",138,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",139,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",140,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",141,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",142,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",143,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",144,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",145,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",146,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",147,0)
 ... ;S TEXT=$$EXPAND^IBTRE(355.92,.06,PIDT)_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",148,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",149,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",150,0)
 ;
"RTN","IBCNSC1",151,0)
 ;
"RTN","IBCNSC1",152,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",153,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",154,0)
 S OFFSET=2
"RTN","IBCNSC1",155,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,OFFSET+25,"ID Parameters",IORVON,IORVOFF)
"RTN","IBCNSC1",156,0)
 ;
"RTN","IBCNSC1",157,0)
 S IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3)),OFFSET=1
"RTN","IBCNSC1",158,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.01,+$P(IBCNS4,U))
"RTN","IBCNSC1",159,0)
 S LINE=LINE+1
"RTN","IBCNSC1",160,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",161,0)
 ;
"RTN","IBCNSC1",162,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (UB-04): "_$$EXPAND^IBTRE(36,4.02,+$P(IBCNS4,U,2))
"RTN","IBCNSC1",163,0)
 S LINE=LINE+1
"RTN","IBCNSC1",164,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",165,0)
 ;
"RTN","IBCNSC1",166,0)
 S TEXT="Attending/Rendering Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.03,+$P(IBCNS4,U,3))
"RTN","IBCNSC1",167,0)
 S LINE=LINE+1
"RTN","IBCNSC1",168,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",169,0)
 ;
"RTN","IBCNSC1",170,0)
 S TEXT="Referring Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.04,+$P(IBCNS4,U,4))
"RTN","IBCNSC1",171,0)
 S LINE=LINE+1
"RTN","IBCNSC1",172,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",173,0)
 ;
"RTN","IBCNSC1",174,0)
 S TEXT="Referring Provider Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.05,+$P(IBCNS4,U,5))
"RTN","IBCNSC1",175,0)
 S LINE=LINE+1
"RTN","IBCNSC1",176,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",177,0)
 ;
"RTN","IBCNSC1",178,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (1500): "_$$EXPAND^IBTRE(36,4.06,+$P(IBCNS4,U,6))
"RTN","IBCNSC1",179,0)
 S LINE=LINE+1
"RTN","IBCNSC1",180,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",181,0)
 ;
"RTN","IBCNSC1",182,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (UB-04): "_$$EXPAND^IBTRE(36,4.08,+$P(IBCNS4,U,8))
"RTN","IBCNSC1",183,0)
 S LINE=LINE+1
"RTN","IBCNSC1",184,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",185,0)
 ;
"RTN","IBCNSC1",186,0)
 S TEXT="Always use main VAMC as Billing Provider (1500)?: "_$$EXPAND^IBTRE(36,4.11,+$P(IBCNS4,U,11))
"RTN","IBCNSC1",187,0)
 S LINE=LINE+1
"RTN","IBCNSC1",188,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",189,0)
 ;
"RTN","IBCNSC1",190,0)
 S TEXT="Always use main VAMC as Billing Provider (UB-04)?: "_$$EXPAND^IBTRE(36,4.12,+$P(IBCNS4,U,12))
"RTN","IBCNSC1",191,0)
 S LINE=LINE+1
"RTN","IBCNSC1",192,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",193,0)
 ;
"RTN","IBCNSC1",194,0)
 I $P(IBCNS4,U,11)!($P(IBCNS4,U,12)) D
"RTN","IBCNSC1",195,0)
 .S TEXT="Send VA Lab/Facility IDs or Facility Data for VAMC?: "_$$EXPAND^IBTRE(36,4.07,+$P(IBCNS4,U,7))
"RTN","IBCNSC1",196,0)
 .S LINE=LINE+1
"RTN","IBCNSC1",197,0)
 .D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",198,0)
 .;
"RTN","IBCNSC1",199,0)
 .S TEXT="Use the Billing Provider (VAMC) Name and Street Address?: "_$$EXPAND^IBTRE(36,4.13,+$P(IBCNS4,U,13))
"RTN","IBCNSC1",200,0)
 .S LINE=LINE+1
"RTN","IBCNSC1",201,0)
 .D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",202,0)
 .Q
"RTN","IBCNSC1",203,0)
 ;
"RTN","IBCNSC1",204,0)
 S TEXT="Transmit no Billing Provider Sec. ID for the Electronic Plan Types: "
"RTN","IBCNSC1",205,0)
 S LINE=LINE+1
"RTN","IBCNSC1",206,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",207,0)
 ;
"RTN","IBCNSC1",208,0)
 N TAR,ERR,IBCT
"RTN","IBCNSC1",209,0)
 D LIST^DIC(36.013,","_IBCNS_",",".01",,10,,,,,,"TAR","ERR")
"RTN","IBCNSC1",210,0)
 F IBCT=1:1:+$G(TAR("DILIST",0)) D
"RTN","IBCNSC1",211,0)
 . S TEXT=TAR("DILIST",1,IBCT)
"RTN","IBCNSC1",212,0)
 . S LINE=LINE+1
"RTN","IBCNSC1",213,0)
 . D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",214,0)
 ;
"RTN","IBCNSC1",215,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",216,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",217,0)
 Q
"RTN","IBCNSC1",218,0)
 ;       
"RTN","IBCNSC1",219,0)
INSDEF(IBINS,IBPTYP) ; Returns the default id # for an ins co, if possible
"RTN","IBCNSC1",220,0)
 N X
"RTN","IBCNSC1",221,0)
 S X=""
"RTN","IBCNSC1",222,0)
 I IBINS,IBPTYP S X=$P($G(^IBA(355.91,+$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*","")),0)),U,7)
"RTN","IBCNSC1",223,0)
 Q X
"RTN","IBCNSC1",224,0)
 ;
"RTN","IBCNSC1",225,0)
CUIDS(IBCNS) ;
"RTN","IBCNSC1",226,0)
 N DIE,DA,DR,PIECE,DAT6,Y
"RTN","IBCNSC1",227,0)
 S DAT6=$P(^DIC(36,IBCNS,6),U,1,8) ; get the Payer IDs
"RTN","IBCNSC1",228,0)
 ;
"RTN","IBCNSC1",229,0)
 ; Make sure each qualifier has an ID and vice versa
"RTN","IBCNSC1",230,0)
 F PIECE=1,3,5,7 D
"RTN","IBCNSC1",231,0)
 . I $TR($P(DAT6,U,PIECE,PIECE+1),U)="" Q  ; both blank
"RTN","IBCNSC1",232,0)
 . I $P(DAT6,U,PIECE)]"",$P(DAT6,U,PIECE+1)]"" Q  ; both have data
"RTN","IBCNSC1",233,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="6.0"_$S($P(DAT6,U,PIECE)]"":PIECE,1:PIECE+1)_"////@"
"RTN","IBCNSC1",234,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",235,0)
 ;
"RTN","IBCNSC1",236,0)
 S DAT6=$P($G(^DIC(36,IBCNS,6)),U,1,8) ; get the Payer IDs again since they may have changed above.
"RTN","IBCNSC1",237,0)
 ;
"RTN","IBCNSC1",238,0)
 ; Make sure the first pair of ID/Qual are populated if the 2nd pair is.  If not, move em over.
"RTN","IBCNSC1",239,0)
 ; This is done for institutional then professional
"RTN","IBCNSC1",240,0)
 F PIECE=1,5 D
"RTN","IBCNSC1",241,0)
 . I $P(DAT6,U,PIECE)]"" Q  ; already has set one
"RTN","IBCNSC1",242,0)
 . I $P(DAT6,U,PIECE+2)="" Q  ; has no second set
"RTN","IBCNSC1",243,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS
"RTN","IBCNSC1",244,0)
 . ; deleting the qualifier triggers deletion of the ID
"RTN","IBCNSC1",245,0)
 . S DR="6.0"_PIECE_"////"_$P(DAT6,U,PIECE+2)_";6.0"_(PIECE+1)_"////"_$P(DAT6,U,PIECE+3)_";6.0"_(PIECE+2)_"////@"
"RTN","IBCNSC1",246,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",247,0)
 Q
"RTN","IBCNSJ3")
0^6^B20256950^B19317542
"RTN","IBCNSJ3",1,0)
IBCNSJ3 ;ALB/CPM - ADD NEW INSURANCE PLAN ; 11-JAN-95
"RTN","IBCNSJ3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,497,506,519**;21-MAR-94;Build 56
"RTN","IBCNSJ3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSJ3",4,0)
 ;
"RTN","IBCNSJ3",5,0)
NEW(IBCNS,IBCPOL,IBFG,IBKEY) ; Add a new insurance plan
"RTN","IBCNSJ3",6,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",7,0)
 ;            IBFG  --  [Optional] -> Set to 1 to force creation
"RTN","IBCNSJ3",8,0)
 ;                      of a group plan
"RTN","IBCNSJ3",9,0)
 ;           IBKEY  --  [Optional] -> Set to 1 to check for security key
"RTN","IBCNSJ3",10,0)
 ; Output:  IBCPOL  --  0, if a new plan was not added, or
"RTN","IBCNSJ3",11,0)
 ;                      >0 => pointer to the new plan in file #355.3
"RTN","IBCNSJ3",12,0)
 ;
"RTN","IBCNSJ3",13,0)
 N DA,DIR,DIRUT,DIROUT,DTOUT,DUOUT,IBTL,IBGRP,IBGNA,IBGNU,X,Y
"RTN","IBCNSJ3",14,0)
 S IBCPOL=0
"RTN","IBCNSJ3",15,0)
 I '$G(IBCNS) G NEWQ
"RTN","IBCNSJ3",16,0)
 ;
"RTN","IBCNSJ3",17,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Do you wish to add a new Insurance Plan"
"RTN","IBCNSJ3",18,0)
 S DIR("?")="If you have identified a new plan that has not been previously entered, and you wish to add it, answer 'YES'.  If you do not wish to add a new plan, enter 'NO'."
"RTN","IBCNSJ3",19,0)
 D ^DIR K DIR I Y<1!($D(DIRUT)) G NEWQ
"RTN","IBCNSJ3",20,0)
 ;
"RTN","IBCNSJ3",21,0)
 ; IB*2.0*506 Added the following line.
"RTN","IBCNSJ3",22,0)
 I $G(IBKEY),'$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) W !!,"Sorry, you are not authorized to create a new Insurance Plan" D WAIT^IBCNBAA G NEWQ
"RTN","IBCNSJ3",23,0)
 ;
"RTN","IBCNSJ3",24,0)
 ; - collect plan characteristics
"RTN","IBCNSJ3",25,0)
 I $G(IBFG) S IBGRP=1 G MORE
"RTN","IBCNSJ3",26,0)
 S DIR(0)="355.3,.02",DIR("A")="  IS THIS A GROUP PLAN" D ^DIR K DIR S IBGRP=Y
"RTN","IBCNSJ3",27,0)
 I $D(DIRUT) G NEWQ
"RTN","IBCNSJ3",28,0)
 ;
"RTN","IBCNSJ3",29,0)
MORE S IBTL="  "_$S(IBGRP:"GROUP",1:"INDIVIDUAL")_" PLAN "
"RTN","IBCNSJ3",30,0)
 S DIR(0)="355.3,2.01",DIR("A")=IBTL_"NAME" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNA=Y
"RTN","IBCNSJ3",31,0)
 S DIR(0)="355.3,2.02",DIR("A")=IBTL_"NUMBER" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNU=Y
"RTN","IBCNSJ3",32,0)
 ;
"RTN","IBCNSJ3",33,0)
 ; - check for duplicates and file the plan
"RTN","IBCNSJ3",34,0)
 I $$CHECK(IBCNS,IBGNA,IBGNU) S IBCPOL=$$ADDH^IBCNSU(IBCNS,IBGRP,IBGNA,IBGNU)
"RTN","IBCNSJ3",35,0)
 ; IB*2.0*519: If new group added, check to see if we already have a NIF ID for this insurance company.
"RTN","IBCNSJ3",36,0)
 Q:IBCPOL<1
"RTN","IBCNSJ3",37,0)
 Q:$$NIF^IBCNHUT1(IBCNS)
"RTN","IBCNSJ3",38,0)
 ; if no NIF and we have not yet requested one, send an HL7
"RTN","IBCNSJ3",39,0)
 I '$D(^IBCNH(367.1,"INS",IBCNS)) D SEND^IBCNHHLO(IBCNS)
"RTN","IBCNSJ3",40,0)
NEWQ Q
"RTN","IBCNSJ3",41,0)
 ;
"RTN","IBCNSJ3",42,0)
 ;
"RTN","IBCNSJ3",43,0)
CHECK(IBCNS,IBGNA,IBGNU) ; Check for potential duplicate plans
"RTN","IBCNSJ3",44,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",45,0)
 ;           IBGNA  --  Plan Name for potential new plan
"RTN","IBCNSJ3",46,0)
 ;           IBGNU  --  Plan Number for potential new plan
"RTN","IBCNSJ3",47,0)
 ; Output:   IBANS  --  1 ->  Okay to add the new plan
"RTN","IBCNSJ3",48,0)
 ;                      0 ->  Don't add the new plan.
"RTN","IBCNSJ3",49,0)
 ;
"RTN","IBCNSJ3",50,0)
 N IBANS,IBCT,IBCNSD
"RTN","IBCNSJ3",51,0)
 S (IBANS,IBCT)=1
"RTN","IBCNSJ3",52,0)
 S IBCNSD=$G(^DIC(36,+$G(IBCNS),0)) I IBCNSD="" G CHECKQ
"RTN","IBCNSJ3",53,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",54,0)
 W !!,"  Searching for potential duplicate plans offered by ",$E($P(IBCNSD,"^"),1,20),"..."
"RTN","IBCNSJ3",55,0)
 I '$D(^IBA(355.3,"B",IBCNS)) G CHECKQ
"RTN","IBCNSJ3",56,0)
 ;
"RTN","IBCNSJ3",57,0)
 ; - look for potential duplicate plans
"RTN","IBCNSJ3",58,0)
 D:$G(IBGNA)]"" FIND(IBCNS,IBGNA)
"RTN","IBCNSJ3",59,0)
 D:$G(IBGNU)]"" FIND(IBCNS,IBGNU)
"RTN","IBCNSJ3",60,0)
 ;
"RTN","IBCNSJ3",61,0)
 ; - display potential duplicates and see if plan should be filed
"RTN","IBCNSJ3",62,0)
 I $D(^TMP($J,"DUP")) D LIST
"RTN","IBCNSJ3",63,0)
 ;
"RTN","IBCNSJ3",64,0)
CHECKQ I '$D(^TMP($J,"DUP")) W !!,"  No potential duplicate plans have been identified."
"RTN","IBCNSJ3",65,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",66,0)
 Q IBANS
"RTN","IBCNSJ3",67,0)
 ;
"RTN","IBCNSJ3",68,0)
 ;
"RTN","IBCNSJ3",69,0)
FIND(IBCNS,IBGN) ; Check cross-references for duplicate plans
"RTN","IBCNSJ3",70,0)
 ;  Input:  IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCNSJ3",71,0)
 ;           IBGN  --  value to use to find duplicates
"RTN","IBCNSJ3",72,0)
 ;
"RTN","IBCNSJ3",73,0)
 N INP,LEN,SUB,TYPE
"RTN","IBCNSJ3",74,0)
 F SUB="AGNA","AGNU","ACCP" D
"RTN","IBCNSJ3",75,0)
 .I SUB="ACCP" S IBGN=$$COMP^IBCNSJ(IBGN)
"RTN","IBCNSJ3",76,0)
 .S INP=IBGN,LEN=$L(INP) Q:LEN<2!(LEN>20)
"RTN","IBCNSJ3",77,0)
 .S TYPE=$S(IBGN?1N.N:"NUM",1:"STR")
"RTN","IBCNSJ3",78,0)
 .I $D(^IBA(355.3,SUB,IBCNS,INP)) D GDATA
"RTN","IBCNSJ3",79,0)
 .I TYPE="STR" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:$E(INP,1,LEN)'=IBGN  D GDATA
"RTN","IBCNSJ3",80,0)
 .I TYPE="NUM" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:INP=""  I $E(INP,1,LEN)=IBGN D GDATA
"RTN","IBCNSJ3",81,0)
 Q
"RTN","IBCNSJ3",82,0)
 ;
"RTN","IBCNSJ3",83,0)
GDATA ; Place potential duplicate plan into an array.
"RTN","IBCNSJ3",84,0)
 N X,Y,Y2 S X=0       ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",85,0)
 F  S X=$O(^IBA(355.3,SUB,IBCNS,INP,X)) Q:'X  I '$D(^TMP($J,"DUP",X)) D
"RTN","IBCNSJ3",86,0)
 .S Y=$G(^IBA(355.3,X,0)),Y2=$G(^IBA(355.3,X,2)),IBCT=IBCT+1    ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",87,0)
 .S ^TMP($J,"DUP",X)="",^TMP($J,"DUP1",IBCT)=$P(Y2,"^",2)_U_$P(Y2,"^",1)_U_$P(Y,"^",2)_U_$P(Y,"^",11)  ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",88,0)
 Q
"RTN","IBCNSJ3",89,0)
 ;
"RTN","IBCNSJ3",90,0)
LIST ; List potential duplicates to screen and prompt to add plan.
"RTN","IBCNSJ3",91,0)
 W !!,"  The following plans have been identified as potential duplicates:"
"RTN","IBCNSJ3",92,0)
 W !!,?3,"PLAN",?22,"PLAN",?45,"GROUP",?55,"ACTIVE",!,?2,"NUMBER",?22,"NAME",?45,"PLAN?",?55,"PLAN?",!
"RTN","IBCNSJ3",93,0)
 S IBCT=0 F  S IBCT=$O(^TMP($J,"DUP1",IBCT)) Q:'IBCT  D
"RTN","IBCNSJ3",94,0)
 .S IBST=$G(^TMP($J,"DUP1",IBCT))
"RTN","IBCNSJ3",95,0)
 .W !?2,$S($P(IBST,"^")'="":$P(IBST,"^"),1:"<NO PLAN NUM>"),?22,$S($P(IBST,"^",2)'="":$P(IBST,"^",2),1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",96,0)
 .W ?45,$S($P(IBST,"^",3)'="":$$EXPAND^IBTRE(355.3,.02,$P(IBST,"^",3)),1:"<UNK>"),?55,$S($P(IBST,"^",4):"NO",1:"YES")
"RTN","IBCNSJ3",97,0)
 ;
"RTN","IBCNSJ3",98,0)
 ; - see if it is okay to add the plan
"RTN","IBCNSJ3",99,0)
 S DIR(0)="Y",DIR("A",1)="Do you still want to add a new plan with Plan Name "_$S(IBGNA'="":IBGNA,1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",100,0)
 S DIR("A")="and Plan Number "_$S(IBGNU'="":IBGNU,1:"<NO PLAN NUMBER>")
"RTN","IBCNSJ3",101,0)
 S DIR("B")="NO"
"RTN","IBCNSJ3",102,0)
 W ! D ^DIR K DIR S IBANS=Y
"RTN","IBCNSJ3",103,0)
 Q
"RTN","IBY519PO")
0^1^B40291795^n/a
"RTN","IBY519PO",1,0)
IBY519PO ;ALB/GEF - Post install routine for patch 519 ; 21-FEB-14
"RTN","IBY519PO",2,0)
 ;;2.0;INTEGRATED BILLING;**519**;21-MAR-94;Build 56
"RTN","IBY519PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY519PO",4,0)
 ;
"RTN","IBY519PO",5,0)
 ; Call to XUPROD is allowed with IA#4440
"RTN","IBY519PO",6,0)
 ; XPDUTL calls are DBIA#10141
"RTN","IBY519PO",7,0)
 ; ZTQUEUED is a KIDS variable that indicates if the user queued the install.  This variable should not
"RTN","IBY519PO",8,0)
 ; be killed or newed here
"RTN","IBY519PO",9,0)
 ;
"RTN","IBY519PO",10,0)
 D EN
"RTN","IBY519PO",11,0)
 Q
"RTN","IBY519PO",12,0)
DOC ; This routine will Create Data Extract EMAILS from Each VAMC to FSC for Initial Seeding of NIF
"RTN","IBY519PO",13,0)
 ;
"RTN","IBY519PO",14,0)
 ; Each VistA site will submit a data extract in the form of one or more emails as defined in
"RTN","IBY519PO",15,0)
 ; the ICD.  This data extract is to happen only once at each of the VAMC after the patch 
"RTN","IBY519PO",16,0)
 ; IB*2.0*519 is nationally released upon direction of the VA's Chief Business Office's (CBO) 
"RTN","IBY519PO",17,0)
 ; eInsurance team.  FSC will load the data from these flat files into the FSC Staging table.  
"RTN","IBY519PO",18,0)
 ; The data within the FSC Staging table will be used to identify a consolidated list of payers 
"RTN","IBY519PO",19,0)
 ;(insurance companies) across all VAMCs which will then be used to initially populated (seed) 
"RTN","IBY519PO",20,0)
 ; the VA National Insurance File (NIF).
"RTN","IBY519PO",21,0)
 ;
"RTN","IBY519PO",22,0)
 ; Types of Records:  HEADER (HDR), PAYER (INS), TRAILER (EOF)    
"RTN","IBY519PO",23,0)
 ; * Each VAMC will have 1 HEADER record and 1 TRAILER record, with 1 to many PAYER records in between the two.
"RTN","IBY519PO",24,0)
 ; Delimiter = "^"
"RTN","IBY519PO",25,0)
 ;
"RTN","IBY519PO",26,0)
 ; Data output: 
"RTN","IBY519PO",27,0)
 ; HDR^Station #^Site name
"RTN","IBY519PO",28,0)
 ; INS^Stn#^Ins.Co.ien^NAME^EDI PROF^EDI INST^QUAL^2NDARY I1^QUAL^2ND I2^QUAL^2ND P1^QUAL^2ND P2^VA NTL ID^STR ADR 1^ADR2^CITY^ST^ZIP^BILL NM^PH^TYP OF COVG
"RTN","IBY519PO",29,0)
 ; EOF^Stn#^Site
"RTN","IBY519PO",30,0)
 ;
"RTN","IBY519PO",31,0)
 ; Search criteria:
"RTN","IBY519PO",32,0)
 ; 1.  Insurance Company entry in file #36 must be ACTIVE (field #.05 '=1)
"RTN","IBY519PO",33,0)
 ; 2.  There must be patients associated with the Ins.Co. (^DPT("AB",INS))
"RTN","IBY519PO",34,0)
 ; 3.  There must be groups associated with the Ins. Co. (^IBA(355.3,"B",INS))
"RTN","IBY519PO",35,0)
 ;
"RTN","IBY519PO",36,0)
 ; note the following:
"RTN","IBY519PO",37,0)
 ; 3.1  PAYER (*P365.12'), [3;10] populate with VA NATIONAL ID only if 
"RTN","IBY519PO",38,0)
 ; Payer file #365.13 application "IIV" is locally & nationally active 
"RTN","IBY519PO",39,0)
 ;
"RTN","IBY519PO",40,0)
 Q
"RTN","IBY519PO",41,0)
EN ; Post Install Routine primary entry point
"RTN","IBY519PO",42,0)
 ;
"RTN","IBY519PO",43,0)
 N IBPRD,DIC,X,Y,DIE,DR,DA
"RTN","IBY519PO",44,0)
 ; Call to XUPROD allowed by IA#4440
"RTN","IBY519PO",45,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","IBY519PO",46,0)
 ;Stuff FSC domain into link
"RTN","IBY519PO",47,0)
 S DIC="^HLCS(870,",DIC(0)="LS" S X="IB NIF TCP" D ^DIC
"RTN","IBY519PO",48,0)
 ; For test environments, use the FSC test domain
"RTN","IBY519PO",49,0)
 I IBPRD="T",Y'=-1 S DIE=DIC,DA=+Y,DR=".08///ECOMMLLPTST.FSC.DOMAIN.EXT;400.02///9346;4.5///1" K DIC D ^DIE
"RTN","IBY519PO",50,0)
 ; For Production environments, use the FSC PRD domain
"RTN","IBY519PO",51,0)
 I IBPRD="P",Y'=-1 S DIE=DIC,DA=+Y,DR=".08///ECOMMLLPPRD.FSC.DOMAIN.EXT;400.02///9346;4.5///1" K DIC D ^DIE
"RTN","IBY519PO",52,0)
 K DA,DIE,DR,X,Y
"RTN","IBY519PO",53,0)
 ;Set up NIFQRY mail group to trigger batch query for this environment
"RTN","IBY519PO",54,0)
 N DO,DD,DA,DLAYGO,DIC,X,RCSITE
"RTN","IBY519PO",55,0)
 S RCSITE=$G(^XMB("NETNAME"))  Q:RCSITE=""   ; SITE DOMAIN NAME
"RTN","IBY519PO",56,0)
 S X="S.IBCNH HPID NIF BATCH QUERY@"_RCSITE             ; SERVER NAME WITH SITE DOMAIN NAME
"RTN","IBY519PO",57,0)
 S DA(1)=$O(^XMB(3.8,"B","NIFQRY",0))           ; MAIL GROUP IEN
"RTN","IBY519PO",58,0)
 I $D(^XMB(3.8,DA(1),6,"B",$E(X,1,30))) Q    ; MAIL ADDRESS ALREADY EXISTS.
"RTN","IBY519PO",59,0)
 S DLAYGO=3.812,DIC(0)="L",DIC="^XMB(3.8,"_DA(1)_",6,"
"RTN","IBY519PO",60,0)
 D FILE^DICN                                 ; FILE THE ADDRESS
"RTN","IBY519PO",61,0)
 ;Do not run extract if this patch has already been installed once - DBIA#10141
"RTN","IBY519PO",62,0)
 I $$INSTALDT^XPDUTL("IB*2.0*519")>0 D:'$D(ZTQUEUED) BMES^XPDUTL("Post-Install already performed.  No need to run again.") Q
"RTN","IBY519PO",63,0)
 ;  08/29/14 No longer run extract in test environments
"RTN","IBY519PO",64,0)
 I IBPRD="T" D:'$D(ZTQUEUED) BMES^XPDUTL("Post-Install extract will not be run in a non-Production environment.") Q
"RTN","IBY519PO",65,0)
 ; if the user queued the patch install, just run it for now, skip the tasking prompt
"RTN","IBY519PO",66,0)
 I $D(ZTQUEUED) D TSK Q 
"RTN","IBY519PO",67,0)
 ; start here if you need to manually run the extract
"RTN","IBY519PO",68,0)
EXT ;
"RTN","IBY519PO",69,0)
 N IBA,ZTRTN,ZTDESC,ZTSK,ZTIO
"RTN","IBY519PO",70,0)
 S ZTRTN="TSK^IBY519PO",ZTIO="",ZTDESC="Insurance Company Data Extract for NIF Seeding"
"RTN","IBY519PO",71,0)
 S IBA(1)="",IBA(2)="    Tasking Post-Install Insurance Company Data Extract.....",IBA(3)="" D MES^XPDUTL(.IBA) K IBA
"RTN","IBY519PO",72,0)
 D ^%ZTLOAD
"RTN","IBY519PO",73,0)
 ; If tasking failed, need to notify someone 
"RTN","IBY519PO",74,0)
 I '$D(ZTSK) S IBA(1)="",IBA(2)="    Tasking Data Extract FAILED.....",IBA(3)="" D MES^XPDUTL(.IBA) K IBA Q
"RTN","IBY519PO",75,0)
 S IBA(1)="",IBA(2)="    Task #:  "_ZTSK,IBA(3)="" D MES^XPDUTL(.IBA) K IBA
"RTN","IBY519PO",76,0)
 K ZTRTN,ZTDESC,ZTSK,ZTIO,ZTSAVE
"RTN","IBY519PO",77,0)
 Q
"RTN","IBY519PO",78,0)
 ;
"RTN","IBY519PO",79,0)
TSK ; taskman and queued install comes here
"RTN","IBY519PO",80,0)
 N IBN,IBDTA,IBND,IBVID,I,MAXSIZE,COUNT,IBSIZE,IBRTN,IBSTN,DTTM,MSGCNT,IBEOL,TOTREC,IBPRD
"RTN","IBY519PO",81,0)
 K ^TMP("IBY519PO",$J)
"RTN","IBY519PO",82,0)
 ; Call to XUPROD allowed by IA#4440
"RTN","IBY519PO",83,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","IBY519PO",84,0)
 S IBSTN=$$SITE^VASITE(),IBSTN=$P(IBSTN,U,3)_U_$P(IBSTN,U,2)
"RTN","IBY519PO",85,0)
 ; Set end of line character
"RTN","IBY519PO",86,0)
 S IBEOL="~"
"RTN","IBY519PO",87,0)
 ; for testing, set maxsize low - for production Set to 300000
"RTN","IBY519PO",88,0)
 S MAXSIZE=$S(IBPRD="P":300000,1:100000)
"RTN","IBY519PO",89,0)
 ; Set record, size and message counters
"RTN","IBY519PO",90,0)
 S COUNT=1,IBSIZE=0,MSGCNT=0,TOTREC=0,IBRTN="IBY519PO",DTTM=$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","IBY519PO",91,0)
 S IBN=0 F  S IBN=$O(^DIC(36,IBN)) Q:'IBN  D
"RTN","IBY519PO",92,0)
 .; don't print if there are no patients associated with this ins.co. OR if there are no groups associated with this insurance co.
"RTN","IBY519PO",93,0)
 .Q:'$D(^DPT("AB",IBN))
"RTN","IBY519PO",94,0)
 .Q:'$D(^IBA(355.3,"B",IBN))
"RTN","IBY519PO",95,0)
 .S IBDTA(0)=$G(^DIC(36,IBN,0))
"RTN","IBY519PO",96,0)
 .; only active insurance companies
"RTN","IBY519PO",97,0)
 .Q:$P(IBDTA(0),U,5)=1
"RTN","IBY519PO",98,0)
 .F IBND=.11,.13,3,6 S IBDTA(IBND)=$G(^DIC(36,IBN,IBND))
"RTN","IBY519PO",99,0)
 .; Get VA National ID
"RTN","IBY519PO",100,0)
 .S IBVID=$$VID^IBCNHUT1(IBN)
"RTN","IBY519PO",101,0)
 .K DATA
"RTN","IBY519PO",102,0)
 .S COUNT=COUNT+1,TOTREC=TOTREC+1,DATA="INS"_U_$P(IBSTN,U)_U_IBN_U_$P(IBDTA(0),U)
"RTN","IBY519PO",103,0)
 .F I=2,4 S DATA=DATA_U_$P(IBDTA(3),U,I)
"RTN","IBY519PO",104,0)
 .F I=1:1:8 S DATA=DATA_U_$P(IBDTA(6),U,I)
"RTN","IBY519PO",105,0)
 .S DATA=DATA_U_IBVID
"RTN","IBY519PO",106,0)
 .F I=1,2,4 S DATA=DATA_U_$P(IBDTA(.11),U,I)
"RTN","IBY519PO",107,0)
 .S DATA=DATA_U_$P($G(^DIC(5,+$P(IBDTA(.11),U,5),0)),U)
"RTN","IBY519PO",108,0)
 .F I=6,7 S DATA=DATA_U_$P(IBDTA(.11),U,I)
"RTN","IBY519PO",109,0)
 .S DATA=DATA_U_$P(IBDTA(.13),U)_U_$P($G(^IBE(355.2,+$P(IBDTA(0),U,13),0)),U)
"RTN","IBY519PO",110,0)
 .S ^TMP(IBRTN,$J,COUNT)=DATA_U_IBEOL,IBSIZE=IBSIZE+$L(^TMP(IBRTN,$J,COUNT))
"RTN","IBY519PO",111,0)
 .K DATA
"RTN","IBY519PO",112,0)
 .; if we have exceeded max mail message size, start a new one
"RTN","IBY519PO",113,0)
 .I IBSIZE>MAXSIZE D 
"RTN","IBY519PO",114,0)
 ..D EOF,MAIL(IBRTN,"R")
"RTN","IBY519PO",115,0)
 ..K ^TMP(IBRTN,$J)
"RTN","IBY519PO",116,0)
 ..S COUNT=1,IBSIZE=0
"RTN","IBY519PO",117,0)
 ; send final email if it has records, then cleanup
"RTN","IBY519PO",118,0)
 D EOF I $G(COUNT)>1 D MAIL(IBRTN,"R")
"RTN","IBY519PO",119,0)
 K ^TMP(IBRTN,$J)
"RTN","IBY519PO",120,0)
 ; send summary email
"RTN","IBY519PO",121,0)
 S ^TMP("IBSUM",$J,1)=$P(IBSTN,U,2)_" ("_$P(IBSTN,U)_") "_$S(IBPRD="P":"Prod",1:"Test")_" Extract SUMMARY     Complete Date/Time:  "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","IBY519PO",122,0)
 S ^TMP("IBSUM",$J,2)=""
"RTN","IBY519PO",123,0)
 S ^TMP("IBSUM",$J,MSGCNT+3)="==============================================================================="
"RTN","IBY519PO",124,0)
 S ^TMP("IBSUM",$J,MSGCNT+4)="Total Record Count: "_TOTREC
"RTN","IBY519PO",125,0)
 D MAIL("IBSUM","S")
"RTN","IBY519PO",126,0)
 K IBN,IBDTA,IBND,IBVID,I,MAXSIZE,COUNT,IBSIZE,IBRTN,IBSTN,DTTM,MSGCNT,IBEOL,TOTREC,XMTEXT,IBPRD
"RTN","IBY519PO",127,0)
 Q
"RTN","IBY519PO",128,0)
 ;
"RTN","IBY519PO",129,0)
EOF ; end one message
"RTN","IBY519PO",130,0)
 Q:COUNT=1
"RTN","IBY519PO",131,0)
 S MSGCNT=MSGCNT+1
"RTN","IBY519PO",132,0)
 S ^TMP(IBRTN,$J,1)="HDR"_U_IBSTN_U_"Message Number: "_MSGCNT_U_"Line Count: "_COUNT_U_DTTM_U_IBRTN_U_IBPRD_U_IBEOL
"RTN","IBY519PO",133,0)
 S ^TMP("IBSUM",$J,MSGCNT+2)="Message Number: "_MSGCNT_"     Line Count: "_$J(COUNT,6)_"     Sent at:  "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","IBY519PO",134,0)
 S COUNT=COUNT+1
"RTN","IBY519PO",135,0)
 S ^TMP(IBRTN,$J,COUNT)="EOF"_U_IBSTN_U_IBEOL
"RTN","IBY519PO",136,0)
 Q
"RTN","IBY519PO",137,0)
 ;
"RTN","IBY519PO",138,0)
MAIL(NODE,TYP) ; email message
"RTN","IBY519PO",139,0)
 N XMSUB,XMZ,XMMG,DIFROM,XMEXT,XMY
"RTN","IBY519PO",140,0)
 ; this is the mail group to send the extract to in Production
"RTN","IBY519PO",141,0)
 I IBPRD="P" S:TYP="S" XMY("VHACBONIFINSExtract@domain.ext")=""
"RTN","IBY519PO",142,0)
 I IBPRD="P" S:TYP'="S" XMY("XXX@Q-NPS.DOMAIN.EXT")=""
"RTN","IBY519PO",143,0)
 ; for testing, send to these email addresses
"RTN","IBY519PO",144,0)
 I IBPRD="T" S XMY("GRACE.FIAMENGO@DOMAIN.EXT")="",XMY("FIAMENGO,GRACE")="",XMY("CHRISTOPHER.THAYER@DOMAIN.EXT")="",XMY("THAYER,CHRISTOPHER")=""
"RTN","IBY519PO",145,0)
 S XMTEXT="^TMP("""_NODE_""","_$J_","
"RTN","IBY519PO",146,0)
 S XMSUB=$P(IBSTN,U,2)_" ("_$P(IBSTN,U)_") "_$S(IBPRD="P":"Prod",1:"Test")_" Extract "_$S(TYP="R":"Run Date/Time:  "_DTTM,1:"Complete at:  "_$$FMTE^XLFDT($$NOW^XLFDT))
"RTN","IBY519PO",147,0)
 D ^XMD
"RTN","IBY519PO",148,0)
 Q
"RTN","IBY519PO",149,0)
 ;
"SEC","^DIC",367,367,0,"DD")
@
"SEC","^DIC",367.1,367.1,0,"DD")
@
"SEC","^DIC",367.11,367.11,0,"AUDIT")

"SEC","^DIC",367.11,367.11,0,"DD")
@
"SEC","^DIC",367.11,367.11,0,"DEL")
@
"SEC","^DIC",367.11,367.11,0,"LAYGO")
@
"SEC","^DIC",367.11,367.11,0,"RD")

"SEC","^DIC",367.11,367.11,0,"WR")
@
"VER")
8.0^22.0
"^DD",36,36,8.01,0)
HPID/OEID^F^^8;1^K:$L(X)>10!($L(X)<1) X
"^DD",36,36,8.01,.1)
Health Plan/Other Entity Identifier
"^DD",36,36,8.01,1,0)
^.1
"^DD",36,36,8.01,1,1,0)
36^HOD
"^DD",36,36,8.01,1,1,1)
S ^DIC(36,"HOD",$E(X,1,30),DA)=""
"^DD",36,36,8.01,1,1,2)
K ^DIC(36,"HOD",$E(X,1,30),DA)
"^DD",36,36,8.01,1,1,"%D",0)
^^2^2^3140619^
"^DD",36,36,8.01,1,1,"%D",1,0)
This cross-reference will be used to find an Insurance Company using the 
"^DD",36,36,8.01,1,1,"%D",2,0)
HPID/OEID (Health Plan or Other Entity Identifier).  
"^DD",36,36,8.01,1,1,"DT")
3140619
"^DD",36,36,8.01,3)
Answer must be 1-10 digits in length.
"^DD",36,36,8.01,21,0)
^.001^10^10^3140619^^
"^DD",36,36,8.01,21,1,0)
The HPID/OEID is a 10-digit, all-numeric identifier following the ISO 
"^DD",36,36,8.01,21,2,0)
Standard 7812 format with a Luhn check-digit as the tenth digit. The 
"^DD",36,36,8.01,21,3,0)
start digit of the HPID/OEID signals whether the identifier has been 
"^DD",36,36,8.01,21,4,0)
provided to a health plan and not to an "other entity". If the start 
"^DD",36,36,8.01,21,5,0)
digit is a seven (7) then it is an HPID and identifies a health plan, 
"^DD",36,36,8.01,21,6,0)
a six (6) indicates an "other entity" (OEID). The OEID serves as the 
"^DD",36,36,8.01,21,7,0)
identifier for entities that are not health plans, healthcare 
"^DD",36,36,8.01,21,8,0)
providers, or individuals (persons) who are not eligible for the HPID 
"^DD",36,36,8.01,21,9,0)
or National Provider Identifier (NPI),yet they need to be identified 
"^DD",36,36,8.01,21,10,0)
in standard transactions and for other lawful purposes. 
"^DD",36,36,8.01,"DT")
3140619
"^DD",36,36,8.02,0)
CHP/SHP^S^C:Controlling Health Plan (CHP);S:Subhealth Plan (SHP);^8;2^Q
"^DD",36,36,8.02,3)
Enter the type of plan; Controlling Health Plan (CHP) or a Sub-health Plan.
"^DD",36,36,8.02,21,0)
^^5^5^3140619^
"^DD",36,36,8.02,21,1,0)
Define whether this health plan is a Controlling Health Plan (CHP) or 
"^DD",36,36,8.02,21,2,0)
a Sub-health Plan (SHP). CHP is a health plan that controls its own 
"^DD",36,36,8.02,21,3,0)
business activities, actions, or policies. A plan can have 0 to many 
"^DD",36,36,8.02,21,4,0)
sub-health plans associated to it. SHP is a health plan whose business 
"^DD",36,36,8.02,21,5,0)
activities, actions, or policies are directed by a CHP. 
"^DD",36,36,8.02,"DT")
3140619
"^DD",36,36,8.03,0)
PARENT CHP (HPID)^F^^8;3^K:$L(X)>10!($L(X)<1) X
"^DD",36,36,8.03,.1)
Parent CHP (HPID)
"^DD",36,36,8.03,3)
Answer must be 1-10 digits in length.
"^DD",36,36,8.03,21,0)
^.001^3^3^3140619^^
"^DD",36,36,8.03,21,1,0)
Only enter data IF this insurance company entry is NOT the parent CHP 
"^DD",36,36,8.03,21,2,0)
for this HPID/OEID.  This would be the HPID of the parent Insurance
"^DD",36,36,8.03,21,3,0)
Company.  
"^DD",36,36,8.03,"DT")
3140619
"^DD",36,36,8.04,0)
NIF ID^F^^8;4^K:$L(X)>20!($L(X)<1) X
"^DD",36,36,8.04,1,0)
^.1
"^DD",36,36,8.04,1,1,0)
36^NIF
"^DD",36,36,8.04,1,1,1)
S ^DIC(36,"NIF",$E(X,1,30),DA)=""
"^DD",36,36,8.04,1,1,2)
K ^DIC(36,"NIF",$E(X,1,30),DA)
"^DD",36,36,8.04,1,1,"%D",0)
^^2^2^3140619^
"^DD",36,36,8.04,1,1,"%D",1,0)
This cross-reference will be used to find an insurance company using the 
"^DD",36,36,8.04,1,1,"%D",2,0)
NIF ID (National Insurance File Identifier). 
"^DD",36,36,8.04,1,1,"DT")
3140619
"^DD",36,36,8.04,3)
Answer must be 1-20 characters in length.
"^DD",36,36,8.04,21,0)
^^4^4^3140619^
"^DD",36,36,8.04,21,1,0)
This is the internal identifier of the correlated entry in the FSC NIF.  
"^DD",36,36,8.04,21,2,0)
The NIF ID associates the new HPID/OEID data element with their 
"^DD",36,36,8.04,21,3,0)
correlated entry in the NIF (National Insurance File) so that there will 
"^DD",36,36,8.04,21,4,0)
be a linkage between VA/VistA  and the FSC's NIF.  
"^DD",36,36,8.04,"DT")
3140619
"^DD",350.9,350.9,70.01,0)
HPID/OEID ACTIVE?^S^0:Not Active;1:Active;^70;1^Q
"^DD",350.9,350.9,70.01,3)
Enter 'Active' if your NIF link is active.
"^DD",350.9,350.9,70.01,21,0)
^^2^2^3140424^
"^DD",350.9,350.9,70.01,21,1,0)
This parameter indicates whether or not the National Insurance File
"^DD",350.9,350.9,70.01,21,2,0)
(NIF) is ready to communicate with your VISTA site.
"^DD",350.9,350.9,70.01,"DT")
3140424
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3071126
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>40!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1^^0
"^DD",364.6,364.6,.1,3)
Answer must be 1-40 characters in length
"^DD",364.6,364.6,.1,21,0)
^^2^2^3071126^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
3080310
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",367,367,0)
FIELD^^.1^11
"^DD",367,367,0,"DDA")
N
"^DD",367,367,0,"DT")
3140520
"^DD",367,367,0,"IX","B",367,.01)

"^DD",367,367,0,"IX","C",367,.02)

"^DD",367,367,0,"IX","D",367.01,.01)

"^DD",367,367,0,"IX","E",367,.1)

"^DD",367,367,0,"IX","UID",367,.07)

"^DD",367,367,0,"NM","HPID/OEID RESPONSE")

"^DD",367,367,0,"PT",367.1,.07)

"^DD",367,367,0,"VRPK")
IB
"^DD",367,367,.01,0)
MESSAGE CONTROL ID^RF^^0;1^K:$L(X)>60!($L(X)<1)!'(X'?1P.E) X
"^DD",367,367,.01,.1)
Message Control ID
"^DD",367,367,.01,1,0)
^.1
"^DD",367,367,.01,1,1,0)
367^B
"^DD",367,367,.01,1,1,1)
S ^IBCNH(367,"B",$E(X,1,30),DA)=""
"^DD",367,367,.01,1,1,2)
K ^IBCNH(367,"B",$E(X,1,30),DA)
"^DD",367,367,.01,3)
Answer must be 1-60 characters in length.
"^DD",367,367,.01,21,0)
^.001^2^2^3140520^^
"^DD",367,367,.01,21,1,0)
This is the message control ID number assigned by the HL7 package when
"^DD",367,367,.01,21,2,0)
a message is created.
"^DD",367,367,.01,"DT")
3140520
"^DD",367,367,.02,0)
TRANSMISSION QUEUE^P367.1'^IBCNH(367.1,^0;2^Q
"^DD",367,367,.02,.1)
Transmission Queue
"^DD",367,367,.02,1,0)
^.1
"^DD",367,367,.02,1,1,0)
367^C
"^DD",367,367,.02,1,1,1)
S ^IBCNH(367,"C",$E(X,1,30),DA)=""
"^DD",367,367,.02,1,1,2)
K ^IBCNH(367,"C",$E(X,1,30),DA)
"^DD",367,367,.02,1,1,"%D",0)
^^2^2^3140310^
"^DD",367,367,.02,1,1,"%D",1,0)
This cross-reference is used to quickly find the transaction associated
"^DD",367,367,.02,1,1,"%D",2,0)
with a response (entry in file #367.1).
"^DD",367,367,.02,1,1,"DT")
3140310
"^DD",367,367,.02,3)
Enter the HPID/OEID Transmission Queue entry for this response, if applicable.
"^DD",367,367,.02,21,0)
^.001^3^3^3140325^^^^
"^DD",367,367,.02,21,1,0)
This field is used to link the response with its corresponding entry in the
"^DD",367,367,.02,21,2,0)
HPID/OEID TRANSMISSION QUEUE file. It will not be populated for 
"^DD",367,367,.02,21,3,0)
unsolicited messages.
"^DD",367,367,.02,"DT")
3140312
"^DD",367,367,.03,0)
RESPONSE TYPE^RS^R:REQUESTED;U:UNSOLICITED;^0;3^Q
"^DD",367,367,.03,.1)
Response Type
"^DD",367,367,.03,1,0)
^.1^^0
"^DD",367,367,.03,3)
Enter whether this was an unsolicited or requested response.
"^DD",367,367,.03,21,0)
^.001^2^2^3140319^^
"^DD",367,367,.03,21,1,0)
This field indicates whether the response was requested by VISTA or
"^DD",367,367,.03,21,2,0)
was unsolicited from the NIF (National Insurance File).
"^DD",367,367,.03,"DT")
3140319
"^DD",367,367,.04,0)
INSURANCE COMPANY^F^^0;4^K:$L(X)>30!($L(X)<1) X
"^DD",367,367,.04,.1)
Insurance Company
"^DD",367,367,.04,3)
Answer must be 1-30 characters in length.
"^DD",367,367,.04,21,0)
^.001^1^1^3140324^^^
"^DD",367,367,.04,21,1,0)
This is the Insurance Company name in the received response.
"^DD",367,367,.04,"DT")
3140317
"^DD",367,367,.05,0)
PROCESSING STATUS^S^R:RESPONSE PROCESSED;X:EXCEPTION REPORT;EL:ERROR WITH LEGACY IDS;ED:ERROR WITH DATA;EXR:ERROR - EXCEPTION REPORT REJECT;^0;5^Q
"^DD",367,367,.05,.1)
Processing Status
"^DD",367,367,.05,1,0)
^.1
"^DD",367,367,.05,1,1,0)
^^TRIGGER^367.1^.04
"^DD",367,367,.05,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 X ^DD(367,.05,1,1,89.2) S Y(101)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,4)_":",2),$C(59)) S D0=I(0,0) S DIU=X K Y S X=DIV S X=DIV,X=X X ^DD(367,.05,1,1,1.4)
"^DD",367,367,.05,1,1,1.4)
S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X I $D(^(0)) S $P(^(0),U,4)=DIV,DIH=367.1,DIG=.04 D ^DICR
"^DD",367,367,.05,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 X ^DD(367,.05,1,1,89.2) S Y(101)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,4)_":",2),$C(59)) S D0=I(0,0) S DIU=X K Y X ^DD(367,.05,1,1,2.1) X ^DD(367,.05,1,1,2.4)
"^DD",367,367,.05,1,1,2.1)
S X=DIV S Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X
"^DD",367,367,.05,1,1,2.4)
S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X I $D(^(0)) S $P(^(0),U,4)=DIV,DIH=367.1,DIG=.04 D ^DICR
"^DD",367,367,.05,1,1,89.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:""),D0=$P(Y(1),U,2) S:'D0!'$D(^IBCNH(367.1,+D0,0)) D0=-1 S DIV(0)=D0 S Y(102)=$C(59)_$P($G(^DD(367.1,.04,0)),U,3)
"^DD",367,367,.05,1,1,"%D",0)
^^2^2^3140626^
"^DD",367,367,.05,1,1,"%D",1,0)
Updates the Transmission Queue status (file 367.1, field #.04) 
"^DD",367,367,.05,1,1,"%D",2,0)
whenever the Response status is updated. 
"^DD",367,367,.05,1,1,"CREATE VALUE")
INTERNAL(PROCESSING STATUS)
"^DD",367,367,.05,1,1,"DELETE VALUE")
INTERNAL(PROCESSING STATUS)
"^DD",367,367,.05,1,1,"DT")
3140626
"^DD",367,367,.05,1,1,"FIELD")
TRANSMISSION QUEUE:TRANSMISSION STATUS
"^DD",367,367,.05,1,2,0)
^^TRIGGER^367^.06
"^DD",367,367,.05,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367,DIV(0),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=367,DIG=.06 D ^DICR
"^DD",367,367,.05,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367,DIV(0),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=367,DIG=.06 D ^DICR
"^DD",367,367,.05,1,2,"%D",0)
^^2^2^3140312^
"^DD",367,367,.05,1,2,"%D",1,0)
Sets the status date/time to equal NOW whenever the PROCESSING STATUS
"^DD",367,367,.05,1,2,"%D",2,0)
field changes.
"^DD",367,367,.05,1,2,"CREATE VALUE")
NOW
"^DD",367,367,.05,1,2,"DELETE VALUE")
NOW
"^DD",367,367,.05,1,2,"DT")
3140312
"^DD",367,367,.05,1,2,"FIELD")
STATUS DATE/TIME
"^DD",367,367,.05,1,3,0)
^^TRIGGER^367^.1
"^DD",367,367,.05,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S X=$$TRG1^IBCNHUT1(DA,X) S DIH=$G(^IBCNH(367,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=367,DIG=.1 D ^DICR
"^DD",367,367,.05,1,3,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV S X=$$TRG1^IBCNHUT1(DA,X) S DIH=$G(^IBCNH(367,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=367,DIG=.1 D ^DICR
"^DD",367,367,.05,1,3,"%D",0)
^.101^5^5^3140421^^
"^DD",367,367,.05,1,3,"%D",1,0)
When the processing status is set to R for Response Processed 
"^DD",367,367,.05,1,3,"%D",2,0)
or EXR for Exception Report Reject and the
"^DD",367,367,.05,1,3,"%D",3,0)
response contains a NIF ID, the future purge date will be set to T+14.
"^DD",367,367,.05,1,3,"%D",4,0)
If this was an unsolicited response, the future purge date is set to
"^DD",367,367,.05,1,3,"%D",5,0)
T+14 even if it does not have a NIF ID.
"^DD",367,367,.05,1,3,"CREATE VALUE")
S X=$$TRG1^IBCNHUT1(DA,X)
"^DD",367,367,.05,1,3,"DELETE VALUE")
S X=$$TRG1^IBCNHUT1(DA,X)
"^DD",367,367,.05,1,3,"DT")
3140314
"^DD",367,367,.05,1,3,"FIELD")
DATE OF FUTURE PURGE
"^DD",367,367,.05,3)
Enter the processing status of the response received.
"^DD",367,367,.05,21,0)
^.001^3^3^3140421^^^^
"^DD",367,367,.05,21,1,0)
This field tracks the processing status of the response received.
"^DD",367,367,.05,21,2,0)
Changes to this field will update the STATUS DATE/TIME field and 
"^DD",367,367,.05,21,3,0)
the TRANSMISSION STATUS in the HPID/OEID TRANSMISSION QUEUE file.
"^DD",367,367,.05,23,0)
^.001^3^3^3140421^^^
"^DD",367,367,.05,23,1,0)
This is the processing status of the response received.
"^DD",367,367,.05,23,2,0)
Triggers the setting of the STATUS DATE/TIME field (.06).
"^DD",367,367,.05,23,3,0)
Also triggers the TRANSMISSION STATUS (.04) field of file 367.1.
"^DD",367,367,.05,"DT")
3140626
"^DD",367,367,.06,0)
STATUS DATE/TIME^D^^0;6^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",367,367,.06,3)
Enter the date and time that the response record was received.
"^DD",367,367,.06,5,1,0)
367^.05^2
"^DD",367,367,.06,21,0)
^^1^1^3140306^
"^DD",367,367,.06,21,1,0)
This is the date and time that the response record was received.  
"^DD",367,367,.06,"DT")
3140306
"^DD",367,367,.07,0)
VISTA UNIQUE ID^F^^0;7^K:$L(X)>30!($L(X)<1) X
"^DD",367,367,.07,.1)
VISTA Unique ID
"^DD",367,367,.07,1,0)
^.1
"^DD",367,367,.07,1,1,0)
367^UID
"^DD",367,367,.07,1,1,1)
S ^IBCNH(367,"UID",$E(X,1,30),DA)=""
"^DD",367,367,.07,1,1,2)
K ^IBCNH(367,"UID",$E(X,1,30),DA)
"^DD",367,367,.07,1,1,"%D",0)
^.101^2^2^3140312^^
"^DD",367,367,.07,1,1,"%D",1,0)
This cross-reference allows the user to find all responses for a site's 
"^DD",367,367,.07,1,1,"%D",2,0)
particular Insurance Company entry.
"^DD",367,367,.07,1,1,"DT")
3140306
"^DD",367,367,.07,3)
Answer must be 1-30 characters in length in the following format: Station#.IEN.
"^DD",367,367,.07,21,0)
^.001^3^3^3140324^^^^
"^DD",367,367,.07,21,1,0)
This is the VAMC Station number and Internal Entry Number of the
"^DD",367,367,.07,21,2,0)
Insurance Company in this site's INSURANCE COMPANY file in the following format:
"^DD",367,367,.07,21,3,0)
STATION#.IEN in INSURANCE COMPANY file
"^DD",367,367,.07,"DT")
3140324
"^DD",367,367,.08,0)
PARENT CHP (HPID)^F^^0;8^K:$L(X)>10!($L(X)<10) X
"^DD",367,367,.08,.1)
Parent CHP (HPID)
"^DD",367,367,.08,3)
Enter the 10 digit HPID/OEID number for the Parent CHP, if applicable.
"^DD",367,367,.08,21,0)
^.001^1^1^3140324^^^^
"^DD",367,367,.08,21,1,0)
This is the HPID of the Parent CHP, if applicable.
"^DD",367,367,.08,"DT")
3140319
"^DD",367,367,.09,0)
CHP/SHP^S^C:CHP;S:SHP;^0;9^Q
"^DD",367,367,.09,.1)
Controlling Plan/Sub-health Plan
"^DD",367,367,.09,3)
Enter a C if this is a Controlling Health Plan or an S if this is a sub-health plan.
"^DD",367,367,.09,21,0)
^.001^6^6^3140317^^
"^DD",367,367,.09,21,1,0)
Defines whether this health plan is a Controlling Health Plan (CHP) or a
"^DD",367,367,.09,21,2,0)
 Sub-health Plan (SHP).  CHP is a health plan that controls its own business
"^DD",367,367,.09,21,3,0)
 activities, actions or policies. A plan can have 0 to many sub-health plans
"^DD",367,367,.09,21,4,0)
 associated to it. SHP is a health plan whose business activities, actions
"^DD",367,367,.09,21,5,0)
 or policies are directed by a CHP.  This field does NOT apply to OEIDs, 
"^DD",367,367,.09,21,6,0)
only insurance companies with HPIDs can be designated as CHPs or SHPs.
"^DD",367,367,.09,"DT")
3140317
"^DD",367,367,.1,0)
DATE OF FUTURE PURGE^D^^0;10^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",367,367,.1,.1)
Date of Future Purge
"^DD",367,367,.1,1,0)
^.1
"^DD",367,367,.1,1,1,0)
367^E
"^DD",367,367,.1,1,1,1)
S ^IBCNH(367,"E",$E(X,1,30),DA)=""
"^DD",367,367,.1,1,1,2)
K ^IBCNH(367,"E",$E(X,1,30),DA)
"^DD",367,367,.1,1,1,"%D",0)
^^2^2^3140314^
"^DD",367,367,.1,1,1,"%D",1,0)
This cross-reference is used by the nightly routine PUR^IBCNHUT2 to
"^DD",367,367,.1,1,1,"%D",2,0)
purge all applicable entries in file 367 and file 367.1.
"^DD",367,367,.1,1,1,"DT")
3140314
"^DD",367,367,.1,3)
Enter the date this record can be purged.
"^DD",367,367,.1,5,1,0)
367^.05^3
"^DD",367,367,.1,21,0)
^^2^2^3140324^
"^DD",367,367,.1,21,1,0)
This field contains the date that the response and, if applicable, its
"^DD",367,367,.1,21,2,0)
corresponding HPID/OEID TRANSMISSION QUEUE entry may be purged.
"^DD",367,367,.1,23,0)
^.001^7^7^3140324^^
"^DD",367,367,.1,23,1,0)
This field contains the date that the response and, if applicable, its
"^DD",367,367,.1,23,2,0)
 transaction queue  entry (#367.1)may be purged.  This is triggered to be
"^DD",367,367,.1,23,3,0)
 set ONLY when the PROCESSING STATUS field (.05) is set to R for RESPONSE
"^DD",367,367,.1,23,4,0)
 PROCESSED and only if the solicited response included a NIF ID.
"^DD",367,367,.1,23,5,0)
 Unsolicited responses will be purged regardless of whether they have a
"^DD",367,367,.1,23,6,0)
 NIF ID or not.  The date is set to response receipt date +14 days.
"^DD",367,367,.1,23,7,0)
The purge process runs nightly via routine PUR^IBCNHUT2.  
"^DD",367,367,.1,"DT")
3140314
"^DD",367,367,1,0)
IDENTIFIERS^367.01PA^^1;0
"^DD",367,367,1,21,0)
^.001^2^2^3140324^^^^
"^DD",367,367,1,21,1,0)
This is a record of all INSURANCE COMPANY IDs received in the response
"^DD",367,367,1,21,2,0)
from the NIF (National Insurance File).
"^DD",367,367.01,0)
IDENTIFIERS SUB-FIELD^^.03^3
"^DD",367,367.01,0,"DT")
3140306
"^DD",367,367.01,0,"IX","B",367.01,.01)

"^DD",367,367.01,0,"NM","IDENTIFIERS")

"^DD",367,367.01,0,"UP")
367
"^DD",367,367.01,.01,0)
INSURANCE COMPANY ID TYPE^P367.11'^IBE(367.11,^0;1^Q
"^DD",367,367.01,.01,.1)
Insurance Company ID Type
"^DD",367,367.01,.01,1,0)
^.1
"^DD",367,367.01,.01,1,1,0)
367.01^B
"^DD",367,367.01,.01,1,1,1)
S ^IBCNH(367,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",367,367.01,.01,1,1,2)
K ^IBCNH(367,DA(1),1,"B",$E(X,1,30),DA)
"^DD",367,367.01,.01,1,2,0)
367^D
"^DD",367,367.01,.01,1,2,1)
S ^IBCNH(367,"D",$E(X,1,30),DA(1),DA)=""
"^DD",367,367.01,.01,1,2,2)
K ^IBCNH(367,"D",$E(X,1,30),DA(1),DA)
"^DD",367,367.01,.01,1,2,"DT")
3140310
"^DD",367,367.01,.01,3)
Enter the type of Insurance Company ID received in the response from the NIF.
"^DD",367,367.01,.01,21,0)
^.001^2^2^3140324^^^^
"^DD",367,367.01,.01,21,1,0)
This is the type of INSURANCE COMPANY ID received in the response
"^DD",367,367.01,.01,21,2,0)
from the NIF (National Insurance File).
"^DD",367,367.01,.01,"DT")
3140310
"^DD",367,367.01,.02,0)
ID^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",367,367.01,.02,.1)
Identifiers
"^DD",367,367.01,.02,3)
Answer must be 1-30 characters in length.
"^DD",367,367.01,.02,21,0)
^.001^2^2^3140319^^
"^DD",367,367.01,.02,21,1,0)
This is the Insurance Company ID sent from the NIF.  The data can be an
"^DD",367,367.01,.02,21,2,0)
EDI number, a VA National ID, a NIF ID or an HPID/OEID.
"^DD",367,367.01,.02,"DT")
3140319
"^DD",367,367.01,.03,0)
SECONDARY ID QUALIFIER^S^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^0;3^Q
"^DD",367,367.01,.03,.1)
EDI Secondary ID Qualifier
"^DD",367,367.01,.03,3)
If the ID is a Secondary Payer ID, enter the Qualifier
"^DD",367,367.01,.03,21,0)
^.001^3^3^3140306^^
"^DD",367,367.01,.03,21,1,0)
If the ID type is a SECONDARY ID, you must enter a qualifier to 
"^DD",367,367.01,.03,21,2,0)
indicate the type of secondary payer ID that it is.  You can not use the same qualifier 
"^DD",367,367.01,.03,21,3,0)
multiple times for the same secondary ID type.
"^DD",367,367.01,.03,"DT")
3140306
"^DD",367.1,367.1,0)
FIELD^^1^15
"^DD",367.1,367.1,0,"DDA")
N
"^DD",367.1,367.1,0,"DT")
3140421
"^DD",367.1,367.1,0,"IX","B",367.1,.01)

"^DD",367.1,367.1,0,"IX","INS",367.1,.02)

"^DD",367.1,367.1,0,"NM","HPID/OEID TRANSMISSION QUEUE")

"^DD",367.1,367.1,0,"PT",367,.02)

"^DD",367.1,367.1,0,"VRPK")
IB
"^DD",367.1,367.1,.01,0)
TRANSACTION NUMBER^RNJ9,0^^0;1^K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",367.1,367.1,.01,.1)
HPID Transmission number
"^DD",367.1,367.1,.01,1,0)
^.1
"^DD",367.1,367.1,.01,1,1,0)
367.1^B
"^DD",367.1,367.1,.01,1,1,1)
S ^IBCNH(367.1,"B",$E(X,1,30),DA)=""
"^DD",367.1,367.1,.01,1,1,2)
K ^IBCNH(367.1,"B",$E(X,1,30),DA)
"^DD",367.1,367.1,.01,1,2,0)
^^TRIGGER^367.1^.03
"^DD",367.1,367.1,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=367.1,DIG=.03 D ^DICR
"^DD",367.1,367.1,.01,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=367.1,DIG=.03 D ^DICR
"^DD",367.1,367.1,.01,1,2,"%D",0)
^^2^2^3140313^
"^DD",367.1,367.1,.01,1,2,"%D",1,0)
When the transaction is created, this field will be stuffed with the
"^DD",367.1,367.1,.01,1,2,"%D",2,0)
current date and time.
"^DD",367.1,367.1,.01,1,2,"CREATE VALUE")
NOW
"^DD",367.1,367.1,.01,1,2,"DELETE VALUE")
NOW
"^DD",367.1,367.1,.01,1,2,"DT")
3140313
"^DD",367.1,367.1,.01,1,2,"FIELD")
DATE/TIME CREATED
"^DD",367.1,367.1,.01,3)
Type a number between 1 and 999999999, 0 decimal digits.
"^DD",367.1,367.1,.01,21,0)
^^2^2^3140306^
"^DD",367.1,367.1,.01,21,1,0)
This field is a sequential number used to uniquely identify a record
"^DD",367.1,367.1,.01,21,2,0)
when creating an entry in this file.  
"^DD",367.1,367.1,.01,"DT")
3140313
"^DD",367.1,367.1,.02,0)
INSURANCE COMPANY^P36'^DIC(36,^0;2^Q
"^DD",367.1,367.1,.02,.1)
Insurance Company
"^DD",367.1,367.1,.02,1,0)
^.1
"^DD",367.1,367.1,.02,1,1,0)
367.1^INS
"^DD",367.1,367.1,.02,1,1,1)
S ^IBCNH(367.1,"INS",$E(X,1,30),DA)=""
"^DD",367.1,367.1,.02,1,1,2)
K ^IBCNH(367.1,"INS",$E(X,1,30),DA)
"^DD",367.1,367.1,.02,1,1,"%D",0)
^.101^2^2^3140324^^
"^DD",367.1,367.1,.02,1,1,"%D",1,0)
This cross-reference allows you to find all transmissions for a 
"^DD",367.1,367.1,.02,1,1,"%D",2,0)
particular insurance company ien.
"^DD",367.1,367.1,.02,1,1,"DT")
3140306
"^DD",367.1,367.1,.02,3)
Enter the Insurance Company that this message pertains to
"^DD",367.1,367.1,.02,21,0)
^.001^1^1^3140324^^
"^DD",367.1,367.1,.02,21,1,0)
This field is a pointer to the Insurance Company file (file #36).
"^DD",367.1,367.1,.02,"DT")
3140324
"^DD",367.1,367.1,.03,0)
DATE/TIME CREATED^D^^0;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",367.1,367.1,.03,.1)
Date/time created
"^DD",367.1,367.1,.03,3)
Enter the date and time that the transmission record was created
"^DD",367.1,367.1,.03,5,1,0)
367.1^.01^2
"^DD",367.1,367.1,.03,21,0)
^.001^4^4^3140324^^^
"^DD",367.1,367.1,.03,21,1,0)
This is the date and time that the transmission record was created.
"^DD",367.1,367.1,.03,21,2,0)
Records are created when certain fields in an Insurance Company entry
"^DD",367.1,367.1,.03,21,3,0)
are edited, so that the NIF is notified of new Insurance Company entries
"^DD",367.1,367.1,.03,21,4,0)
at the site or changes in key fields.
"^DD",367.1,367.1,.03,"DT")
3140324
"^DD",367.1,367.1,.04,0)
TRANSMISSION STATUS^S^A:AWAITING RESPONSE;R:RESPONSE PROCESSED;X:EXCEPTION REPORT;EL:ERROR WITH LEGACY IDS;ED:ERROR WITH DATA;EXR:ERROR - EXCEPTION REPORT REJECT;^0;4^Q
"^DD",367.1,367.1,.04,.1)
Transmission Status
"^DD",367.1,367.1,.04,1,0)
^.1^^-1
"^DD",367.1,367.1,.04,1,1,0)
^^TRIGGER^367.1^.05
"^DD",367.1,367.1,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=367.1,DIG=.05 D ^DICR
"^DD",367.1,367.1,.04,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBCNH(367.1,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV N %I,%H,% D NOW^%DTC S X=% S DIH=$G(^IBCNH(367.1,DIV(0),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=367.1,DIG=.05 D ^DICR
"^DD",367.1,367.1,.04,1,1,"CREATE VALUE")
NOW
"^DD",367.1,367.1,.04,1,1,"DELETE VALUE")
NOW
"^DD",367.1,367.1,.04,1,1,"FIELD")
STATUS DATE/TIME
"^DD",367.1,367.1,.04,3)
Enter the status of the transmission.
"^DD",367.1,367.1,.04,5,1,0)
367^.05^1
"^DD",367.1,367.1,.04,21,0)
^.001^6^6^3140421^^^^
"^DD",367.1,367.1,.04,21,1,0)
This is the status of the transmission.  It lets us know if the
"^DD",367.1,367.1,.04,21,2,0)
message was sent (A), if the NIF processed the response (R), and if they 
"^DD",367.1,367.1,.04,21,3,0)
placed it on the NIF exception report(X).  There are also error statuses of:
"^DD",367.1,367.1,.04,21,4,0)
EL - Error w/ Legacy IDs, ED - Error w/Data & EXR - Exception Report Reject.
"^DD",367.1,367.1,.04,21,5,0)
 If the status is R or EXR, the purge date
"^DD",367.1,367.1,.04,21,6,0)
field will be set allowing this completed transmission to be purged.
"^DD",367.1,367.1,.04,"DT")
3140421
"^DD",367.1,367.1,.05,0)
STATUS DATE/TIME^D^^0;5^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",367.1,367.1,.05,.1)
Status Date/Time
"^DD",367.1,367.1,.05,3)
Enter the date/time the TRANSMISSION STATUS field was updated.
"^DD",367.1,367.1,.05,5,1,0)
367.1^.04^1
"^DD",367.1,367.1,.05,21,0)
^.001^1^1^3140325^^
"^DD",367.1,367.1,.05,21,1,0)
This is the date/time that the TRANSMISSION STATUS field was updated.
"^DD",367.1,367.1,.05,"DT")
3140325
"^DD",367.1,367.1,.07,0)
RESPONSE^P367^IBCNH(367,^0;7^Q
"^DD",367.1,367.1,.07,.1)
Response
"^DD",367.1,367.1,.07,1,0)
^.1^^0
"^DD",367.1,367.1,.07,3)
Enter the HPID/OEID Response entry associated with this transaction.
"^DD",367.1,367.1,.07,21,0)
^.001^2^2^3140317^^
"^DD",367.1,367.1,.07,21,1,0)
When an HL7 message is created, a corresponding "stub" response message will 
"^DD",367.1,367.1,.07,21,2,0)
be created at the same time.  This is a pointer to that "stub" message.
"^DD",367.1,367.1,.07,"DT")
3140317
"^DD",367.1,367.1,1,0)
IDENTIFIERS^367.12PA^^1;0
"^DD",367.1,367.1,1,21,0)
^.001^2^2^3140324^^
"^DD",367.1,367.1,1,21,1,0)
This is a record of all INSURANCE COMPANY IDs sent to the
"^DD",367.1,367.1,1,21,2,0)
NIF (National Insurance File). 
"^DD",367.1,367.1,2.01,0)
STREET ADDRESS [LINE 1]^F^^2;1^K:$L(X)>35!($L(X)<3) X
"^DD",367.1,367.1,2.01,.1)
Street Address [Line 1]
"^DD",367.1,367.1,2.01,3)
Answer must be 3-35 characters in length.
"^DD",367.1,367.1,2.01,21,0)
^.001^2^2^3140324^^^^
"^DD",367.1,367.1,2.01,21,1,0)
This is the first line of this company's street address in  
"^DD",367.1,367.1,2.01,21,2,0)
the INSURANCE COMPANY file that was sent to the NIF (National Insurance File).
"^DD",367.1,367.1,2.01,23,0)
^.001^1^1^3140324^^
"^DD",367.1,367.1,2.01,23,1,0)
Field # .111 in file 36.
"^DD",367.1,367.1,2.01,"DT")
3140312
"^DD",367.1,367.1,2.02,0)
STREET ADDRESS [LINE 2]^F^^2;2^K:$L(X)>30!($L(X)<3) X
"^DD",367.1,367.1,2.02,.1)
Street Address [Line 2]
"^DD",367.1,367.1,2.02,3)
Answer must be 3-30 characters in length.
"^DD",367.1,367.1,2.02,21,0)
^.001^4^4^3140324^^
"^DD",367.1,367.1,2.02,21,1,0)
This is the second line of this Insurance Company's street address in 
"^DD",367.1,367.1,2.02,21,2,0)
the INSURANCE COMPANY file that was sent to the NIF (National Insurance File).
"^DD",367.1,367.1,2.02,21,3,0)
It can not be the same as Line 1 and only contains data if the 
"^DD",367.1,367.1,2.02,21,4,0)
Street Address is longer than one line.
"^DD",367.1,367.1,2.02,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.02,23,1,0)
Field # .112 from file #36.
"^DD",367.1,367.1,2.02,"DT")
3140324
"^DD",367.1,367.1,2.03,0)
CITY^F^^2;3^K:$L(X)>25!($L(X)<2) X
"^DD",367.1,367.1,2.03,.1)
City
"^DD",367.1,367.1,2.03,3)
Answer must be 2-25 characters in length.
"^DD",367.1,367.1,2.03,21,0)
^.001^1^1^3140324^^^
"^DD",367.1,367.1,2.03,21,1,0)
The city of the mailing address for this insurance carrier.
"^DD",367.1,367.1,2.03,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.03,23,1,0)
Corresponds to field #.114 in file #36.
"^DD",367.1,367.1,2.03,"DT")
3140312
"^DD",367.1,367.1,2.04,0)
STATE^P5'^DIC(5,^2;4^Q
"^DD",367.1,367.1,2.04,.1)
State
"^DD",367.1,367.1,2.04,3)
Enter the state of the Insurance Company's mailing address.
"^DD",367.1,367.1,2.04,21,0)
^.001^1^1^3140324^^^^
"^DD",367.1,367.1,2.04,21,1,0)
The state of the mailing address for this insurance carrier.
"^DD",367.1,367.1,2.04,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.04,23,1,0)
Corresponds to field #.115 in file #36.
"^DD",367.1,367.1,2.04,"DT")
3140312
"^DD",367.1,367.1,2.05,0)
ZIP CODE^FXO^^2;5^K:$L(X)>20!($L(X)<5) X I $D(X) D ZIPIN^VAFADDR
"^DD",367.1,367.1,2.05,.1)
Zip Code
"^DD",367.1,367.1,2.05,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",367.1,367.1,2.05,2.1)
D ZIPOUT^VAFADDR
"^DD",367.1,367.1,2.05,3)
Enter the 5 or 9 digit zip code, with or without the hyphen.
"^DD",367.1,367.1,2.05,21,0)
^.001^2^2^3140324^^^^
"^DD",367.1,367.1,2.05,21,1,0)
The zip code of the mailing address for this insurance carrier.  User
"^DD",367.1,367.1,2.05,21,2,0)
may enter the 5 or 9 digit zip code, with or without the hyphen.
"^DD",367.1,367.1,2.05,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.05,23,1,0)
Corresponds to field #.116 in file #36.
"^DD",367.1,367.1,2.05,"DT")
3140306
"^DD",367.1,367.1,2.06,0)
BILLING COMPANY NAME^F^^2;6^K:$L(X)>30!($L(X)<3) X
"^DD",367.1,367.1,2.06,.1)
Billing Company Name
"^DD",367.1,367.1,2.06,3)
Answer must be 3-30 characters in length.
"^DD",367.1,367.1,2.06,21,0)
^.001^1^1^3140324^^^
"^DD",367.1,367.1,2.06,21,1,0)
The name of the insurance carrier's billing company.
"^DD",367.1,367.1,2.06,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.06,23,1,0)
Corresponds to field #.117 in file #36.
"^DD",367.1,367.1,2.06,"DT")
3140312
"^DD",367.1,367.1,2.07,0)
TYPE OF COVERAGE^P355.2'^IBE(355.2,^2;7^Q
"^DD",367.1,367.1,2.07,.1)
Type Of Coverage
"^DD",367.1,367.1,2.07,3)
Select the entry that best describes this carriers type of coverage.
"^DD",367.1,367.1,2.07,21,0)
^.001^3^3^3140324^^^^
"^DD",367.1,367.1,2.07,21,1,0)
If this insurance carrier provides only one type of coverage then select the entry that
"^DD",367.1,367.1,2.07,21,2,0)
best describes this carriers type of coverage. 
"^DD",367.1,367.1,2.07,21,3,0)
If this carrier provides more than one type of coverage then select HEALTH INSURANCE.  
"^DD",367.1,367.1,2.07,23,0)
^^1^1^3140324^
"^DD",367.1,367.1,2.07,23,1,0)
Corresponds to field #.13 in file #36.
"^DD",367.1,367.1,2.07,"DT")
3140306
"^DD",367.1,367.1,2.08,0)
PHONE NUMBER^F^^2;8^K:$L(X)>20!($L(X)<7) X
"^DD",367.1,367.1,2.08,.1)
Phone Number
"^DD",367.1,367.1,2.08,3)
Answer must be 7-20 characters in length.
"^DD",367.1,367.1,2.08,21,0)
^.001^2^2^3140325^^^
"^DD",367.1,367.1,2.08,21,1,0)
The phone number at which this insurance carrier can be reached.  
"^DD",367.1,367.1,2.08,21,2,0)
Examples:  800-555-1212 or 303-555-1212 ext 123 or 18665551212 x123
"^DD",367.1,367.1,2.08,23,0)
^^1^1^3140325^
"^DD",367.1,367.1,2.08,23,1,0)
Corresponds to field #.131 in file #36.
"^DD",367.1,367.1,2.08,"DT")
3140312
"^DD",367.1,367.12,0)
IDENTIFIERS SUB-FIELD^^.03^3
"^DD",367.1,367.12,0,"DT")
3140313
"^DD",367.1,367.12,0,"IX","B",367.12,.01)

"^DD",367.1,367.12,0,"NM","IDENTIFIERS")

"^DD",367.1,367.12,0,"UP")
367.1
"^DD",367.1,367.12,.01,0)
INSURANCE COMPANY ID TYPE^P367.11'^IBE(367.11,^0;1^Q
"^DD",367.1,367.12,.01,.1)
Insurance Company ID Type
"^DD",367.1,367.12,.01,1,0)
^.1
"^DD",367.1,367.12,.01,1,1,0)
367.12^B
"^DD",367.1,367.12,.01,1,1,1)
S ^IBCNH(367.1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",367.1,367.12,.01,1,1,2)
K ^IBCNH(367.1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",367.1,367.12,.01,3)
Enter the type of INSURANCE COMPANY ID sent in the inquiry to the NIF.
"^DD",367.1,367.12,.01,21,0)
^.001^2^2^3140324^^^
"^DD",367.1,367.12,.01,21,1,0)
This is the type of Insurance Company ID sent to the NIF.
"^DD",367.1,367.12,.01,21,2,0)
The data can be an EDI number, a VA National ID, a NIF ID or an HPID/OEID.
"^DD",367.1,367.12,.01,"DT")
3140324
"^DD",367.1,367.12,.02,0)
ID^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",367.1,367.12,.02,.1)
Identifier
"^DD",367.1,367.12,.02,3)
Answer must be 1-30 characters in length.
"^DD",367.1,367.12,.02,21,0)
^.001^2^2^3140324^^
"^DD",367.1,367.12,.02,21,1,0)
This is the actual data sent to the NIF from the insurance company
"^DD",367.1,367.12,.02,21,2,0)
entry in the INSURANCE COMPANY file.
"^DD",367.1,367.12,.02,23,0)
^^5^5^3140324^
"^DD",367.1,367.12,.02,23,1,0)
Here are the possible data fields that could be sent from file #36:
"^DD",367.1,367.12,.02,23,2,0)
(#3.02) EDI ID NUMBER - PROF,      (#3.04) EDI ID NUMBER - INST
"^DD",367.1,367.12,.02,23,3,0)
(#6.02) EDI INST SECONDARY ID(1),  (#6.04) EDI INST SECONDARY ID(2),
"^DD",367.1,367.12,.02,23,4,0)
(#6.06) EDI PROF SECONDARY ID(1),  (#6.08) EDI PROF SECONDARY ID(2), 
"^DD",367.1,367.12,.02,23,5,0)
(#8.01) HPID/OEID, (#8.04) NIF ID, (#3.1) VA NATIONAL ID.
"^DD",367.1,367.12,.02,"DT")
3140324
"^DD",367.1,367.12,.03,0)
SECONDARY ID QUALIFIER^S^2U:PAYER ID #;FY:CLAIM OFFICE #;NF:NAIC CODE;TJ:FED TAXPAYER #;^0;3^Q
"^DD",367.1,367.12,.03,3)
If the ID is a Secondary Payer ID, enter the qualifier.
"^DD",367.1,367.12,.03,21,0)
^^3^3^3140313^
"^DD",367.1,367.12,.03,21,1,0)
If the ID type is a SECONDARY ID, you must enter a qualifier to indicate
"^DD",367.1,367.12,.03,21,2,0)
 the type of secondary  payer ID that it is.  You can not use the same
"^DD",367.1,367.12,.03,21,3,0)
 qualifier multiple times for the same secondary ID type.  
"^DD",367.1,367.12,.03,"DT")
3140313
"^DD",367.11,367.11,0)
FIELD^^1^2
"^DD",367.11,367.11,0,"DDA")
N
"^DD",367.11,367.11,0,"DT")
3140305
"^DD",367.11,367.11,0,"IX","B",367.11,.01)

"^DD",367.11,367.11,0,"NM","INSURANCE COMPANY ID TYPE")

"^DD",367.11,367.11,0,"PT",367.01,.01)

"^DD",367.11,367.11,0,"PT",367.12,.01)

"^DD",367.11,367.11,0,"VRPK")
IB
"^DD",367.11,367.11,.01,0)
NAME^RF^^0;1^K:$L(X)>24!($L(X)<6)!'(X'?1P.E) X
"^DD",367.11,367.11,.01,.1)
ID NAME
"^DD",367.11,367.11,.01,1,0)
^.1
"^DD",367.11,367.11,.01,1,1,0)
367.11^B
"^DD",367.11,367.11,.01,1,1,1)
S ^IBE(367.11,"B",$E(X,1,30),DA)=""
"^DD",367.11,367.11,.01,1,1,2)
K ^IBE(367.11,"B",$E(X,1,30),DA)
"^DD",367.11,367.11,.01,3)
Answer must be 6-24 characters in length.
"^DD",367.11,367.11,.01,21,0)
^.001^1^1^3140305^^
"^DD",367.11,367.11,.01,21,1,0)
This is the name of the ID type.
"^DD",367.11,367.11,.01,"DT")
3140305
"^DD",367.11,367.11,1,0)
DESCRIPTION^F^^0;2^K:$L(X)>60!($L(X)<3) X
"^DD",367.11,367.11,1,.1)
ID DESCRIPTION
"^DD",367.11,367.11,1,3)
Answer must be 3-60 characters in length.
"^DD",367.11,367.11,1,21,0)
^.001^1^1^3140305^^^
"^DD",367.11,367.11,1,21,1,0)
This is the description of what the ID is.
"^DD",367.11,367.11,1,"DT")
3140305
"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",367,367,0)
HPID/OEID RESPONSE^367
"^DIC",367,367,0,"GL")
^IBCNH(367,
"^DIC",367,367,"%D",0)
^1.001^4^4^3140306^^
"^DIC",367,367,"%D",1,0)
This file contains responses associated with inquiries from the 
"^DIC",367,367,"%D",2,0)
HPID/OEID TRANSMISSION QUEUE file (file #367.1).
"^DIC",367,367,"%D",3,0)
 
"^DIC",367,367,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified. 
"^DIC",367,"B","HPID/OEID RESPONSE",367)

"^DIC",367.1,367.1,0)
HPID/OEID TRANSMISSION QUEUE^367.1
"^DIC",367.1,367.1,0,"GL")
^IBCNH(367.1,
"^DIC",367.1,367.1,"%D",0)
^1.001^5^5^3140306^^
"^DIC",367.1,367.1,"%D",1,0)
This file contains records which have been selected based on 
"^DIC",367.1,367.1,"%D",2,0)
specific criteria to generate an HL7 message.  These messages will be sent to 
"^DIC",367.1,367.1,"%D",3,0)
the National Insurance File (NIF) for processing.
"^DIC",367.1,367.1,"%D",4,0)
 
"^DIC",367.1,367.1,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.  
"^DIC",367.1,"B","HPID/OEID TRANSMISSION QUEUE",367.1)

"^DIC",367.11,367.11,0)
INSURANCE COMPANY ID TYPE^367.11
"^DIC",367.11,367.11,0,"GL")
^IBE(367.11,
"^DIC",367.11,367.11,"%",0)
^1.005^^0
"^DIC",367.11,367.11,"%D",0)
^^4^4^3140305^
"^DIC",367.11,367.11,"%D",1,0)
This file contains the possible ID types that could be received from
"^DIC",367.11,367.11,"%D",2,0)
the National Insurance file (NIF) for an Insurance Company entry.
"^DIC",367.11,367.11,"%D",3,0)
 
"^DIC",367.11,367.11,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",367.11,"B","INSURANCE COMPANY ID TYPE",367.11)

"BLD",9338,6)
^484
**END**
**END**

