Released VDEF*1*14 SEQ #5
Extracted from mail message
**KIDS**:VDEF*1.0*14^

**INSTALL NAME**
VDEF*1.0*14
"BLD",10294,0)
VDEF*1.0*14^VDEF^0^3160629^y
"BLD",10294,1,0)
^^6^6^3160627^
"BLD",10294,1,1,0)
This patch will fix the VDEF Request Processor so that when it
"BLD",10294,1,2,0)
encounters a VDEF REQUEST QUEUE file (#579.3) record NAME 
"BLD",10294,1,3,0)
VALUE PAIRS MULTIPLE (#579.311) with an internal entry 
"BLD",10294,1,4,0)
number value other than a one (1) or two (2) it will continue
"BLD",10294,1,5,0)
processing as long as the data associated with each respective
"BLD",10294,1,6,0)
node is valid.
"BLD",10294,4,0)
^9.64PA^^
"BLD",10294,6.3)
3
"BLD",10294,"KRN",0)
^9.67PA^779.2^20
"BLD",10294,"KRN",.4,0)
.4
"BLD",10294,"KRN",.401,0)
.401
"BLD",10294,"KRN",.402,0)
.402
"BLD",10294,"KRN",.403,0)
.403
"BLD",10294,"KRN",.5,0)
.5
"BLD",10294,"KRN",.84,0)
.84
"BLD",10294,"KRN",3.6,0)
3.6
"BLD",10294,"KRN",3.8,0)
3.8
"BLD",10294,"KRN",9.2,0)
9.2
"BLD",10294,"KRN",9.8,0)
9.8
"BLD",10294,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",10294,"KRN",9.8,"NM",1,0)
VDEFREQ^^0^B33587823
"BLD",10294,"KRN",9.8,"NM","B","VDEFREQ",1)

"BLD",10294,"KRN",19,0)
19
"BLD",10294,"KRN",19.1,0)
19.1
"BLD",10294,"KRN",101,0)
101
"BLD",10294,"KRN",409.61,0)
409.61
"BLD",10294,"KRN",771,0)
771
"BLD",10294,"KRN",779.2,0)
779.2
"BLD",10294,"KRN",870,0)
870
"BLD",10294,"KRN",8989.51,0)
8989.51
"BLD",10294,"KRN",8989.52,0)
8989.52
"BLD",10294,"KRN",8994,0)
8994
"BLD",10294,"KRN","B",.4,.4)

"BLD",10294,"KRN","B",.401,.401)

"BLD",10294,"KRN","B",.402,.402)

"BLD",10294,"KRN","B",.403,.403)

"BLD",10294,"KRN","B",.5,.5)

"BLD",10294,"KRN","B",.84,.84)

"BLD",10294,"KRN","B",3.6,3.6)

"BLD",10294,"KRN","B",3.8,3.8)

"BLD",10294,"KRN","B",9.2,9.2)

"BLD",10294,"KRN","B",9.8,9.8)

"BLD",10294,"KRN","B",19,19)

"BLD",10294,"KRN","B",19.1,19.1)

"BLD",10294,"KRN","B",101,101)

"BLD",10294,"KRN","B",409.61,409.61)

"BLD",10294,"KRN","B",771,771)

"BLD",10294,"KRN","B",779.2,779.2)

"BLD",10294,"KRN","B",870,870)

"BLD",10294,"KRN","B",8989.51,8989.51)

"BLD",10294,"KRN","B",8989.52,8989.52)

"BLD",10294,"KRN","B",8994,8994)

"BLD",10294,"QUES",0)
^9.62^^
"BLD",10294,"REQB",0)
^9.611^1^1
"BLD",10294,"REQB",1,0)
VDEF*1.0*3^1
"BLD",10294,"REQB","B","VDEF*1.0*3",1)

"MBREQ")
0
"PKG",573,-1)
1^1
"PKG",573,0)
VDEF^VDEF^VISTA Data Extraction Framework
"PKG",573,20,0)
^9.402P^^
"PKG",573,22,0)
^9.49I^1^1
"PKG",573,22,1,0)
1.0^3041228^3050518^66481
"PKG",573,22,1,"PAH",1,0)
14^3160629
"PKG",573,22,1,"PAH",1,1,0)
^^6^6^3160629
"PKG",573,22,1,"PAH",1,1,1,0)
This patch will fix the VDEF Request Processor so that when it
"PKG",573,22,1,"PAH",1,1,2,0)
encounters a VDEF REQUEST QUEUE file (#579.3) record NAME 
"PKG",573,22,1,"PAH",1,1,3,0)
VALUE PAIRS MULTIPLE (#579.311) with an internal entry 
"PKG",573,22,1,"PAH",1,1,4,0)
number value other than a one (1) or two (2) it will continue
"PKG",573,22,1,"PAH",1,1,5,0)
processing as long as the data associated with each respective
"PKG",573,22,1,"PAH",1,1,6,0)
node is valid.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","VDEFREQ")
0^1^B33587823^B31819768
"RTN","VDEFREQ",1,0)
VDEFREQ ;INTEGIC/AM & BPOIFO/JG - VDEF Request Processor ;15 Nov 2005  3:00 PM
"RTN","VDEFREQ",2,0)
 ;;1.0;VDEF;**3,14**;Dec 28, 2004;Build 3
"RTN","VDEFREQ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","VDEFREQ",4,0)
 ;
"RTN","VDEFREQ",5,0)
 ; IA: 10063 - $$S^%ZTLOAD
"RTN","VDEFREQ",6,0)
 ;     10063 - $$ASKSTOP^%ZTLOAD
"RTN","VDEFREQ",7,0)
 ;
"RTN","VDEFREQ",8,0)
 Q  ; No bozos
"RTN","VDEFREQ",9,0)
 ;
"RTN","VDEFREQ",10,0)
EN ; Main entry point for the Request Queue processor from TaskMan
"RTN","VDEFREQ",11,0)
 ;
"RTN","VDEFREQ",12,0)
 ; Input parameter:
"RTN","VDEFREQ",13,0)
 ;   QIEN - Request Queue IEN passed in by TaskMan
"RTN","VDEFREQ",14,0)
 ;
"RTN","VDEFREQ",15,0)
 ; Output parameters:
"RTN","VDEFREQ",16,0)
 ;   ZTSTOP - flag indicating whether to stop processing: 0 by default
"RTN","VDEFREQ",17,0)
 ;    1 if an outside request to stop the Processor or internal error
"RTN","VDEFREQ",18,0)
 ;    2 if VistA HL7 API errored out
"RTN","VDEFREQ",19,0)
 ;   ZTREQ  - Tells the Submanager to delete this task's record if "@"
"RTN","VDEFREQ",20,0)
 ;
"RTN","VDEFREQ",21,0)
 N DSTDATA,DSTIEN,ERR,FDA,NVPIEN,QUEUE,SCHED,IEN,VDEFWAIT,VDEFTSK
"RTN","VDEFREQ",22,0)
 S VDEFTSK=ZTSK
"RTN","VDEFREQ",23,0)
 ;
"RTN","VDEFREQ",24,0)
 ; Lock this Request Queue from other processors. If it's already locked,
"RTN","VDEFREQ",25,0)
 ; another process has it.
"RTN","VDEFREQ",26,0)
 L +^VDEFHL7(579.3,"QUEUE",QIEN):1 G EXIT:'$T
"RTN","VDEFREQ",27,0)
 ;
"RTN","VDEFREQ",28,0)
EN1 ; Re-entry point after the wait period has expired
"RTN","VDEFREQ",29,0)
 ;
"RTN","VDEFREQ",30,0)
 ; Quit if there has been a request to stop processing
"RTN","VDEFREQ",31,0)
 S ZTSTOP=$$S^%ZTLOAD() G EXIT:ZTSTOP
"RTN","VDEFREQ",32,0)
 ;
"RTN","VDEFREQ",33,0)
 ; Get the queue data
"RTN","VDEFREQ",34,0)
 S QUEUE=$G(^VDEFHL7(579.3,QIEN,0))
"RTN","VDEFREQ",35,0)
 ;
"RTN","VDEFREQ",36,0)
 ; Quit if this Request Queue is suspended
"RTN","VDEFREQ",37,0)
 G EXIT:$P(QUEUE,U,9)="S"
"RTN","VDEFREQ",38,0)
 ;
"RTN","VDEFREQ",39,0)
 ; Set the wait period to the REQUEST QUEUE WAKEUP
"RTN","VDEFREQ",40,0)
 S VDEFWAIT=+$P(QUEUE,U,2)
"RTN","VDEFREQ",41,0)
 ;
"RTN","VDEFREQ",42,0)
 ; See if current time is in a scheduling rule
"RTN","VDEFREQ",43,0)
 S SCHED=$$SCHEDULE^VDEFQM(QIEN,$H) G EN2:'SCHED
"RTN","VDEFREQ",44,0)
 ;
"RTN","VDEFREQ",45,0)
 ; If current time is in a suspend rule, set wait period to
"RTN","VDEFREQ",46,0)
 ; the next start time or the basic wakeup period whichever is longer.
"RTN","VDEFREQ",47,0)
 I $P(SCHED,U)="S",$P(SCHED,U,2)>VDEFWAIT S VDEFWAIT=$P(SCHED,U,2) G WAITLOOP
"RTN","VDEFREQ",48,0)
 ;
"RTN","VDEFREQ",49,0)
EN2 ; Update the Request Queue definition with the current task #
"RTN","VDEFREQ",50,0)
 K FDA S FDA(1,579.3,QIEN_",",.11)=VDEFTSK D FILE^DIE("","FDA(1)","ERR(1)")
"RTN","VDEFREQ",51,0)
 ;
"RTN","VDEFREQ",52,0)
 ; Store VDEF Destination data in a local array
"RTN","VDEFREQ",53,0)
 S DSTIEN=0 F  S DSTIEN=$O(^VDEFHL7(579.2,DSTIEN)) Q:'DSTIEN  D
"RTN","VDEFREQ",54,0)
 . S DSTDATA(DSTIEN)=$G(^VDEFHL7(579.2,DSTIEN,0))
"RTN","VDEFREQ",55,0)
 ;
"RTN","VDEFREQ",56,0)
 ; Loop through the Queued Up requests for this queue
"RTN","VDEFREQ",57,0)
 S (ZTSTOP,IEN)=0
"RTN","VDEFREQ",58,0)
 F  S IEN=$O(^VDEFHL7(579.3,"C","Q",QIEN,IEN)) Q:IEN=""  D  Q:ZTSTOP
"RTN","VDEFREQ",59,0)
 . ;
"RTN","VDEFREQ",60,0)
 . ; Quit if there has been a request to stop processing
"RTN","VDEFREQ",61,0)
 . S ZTSTOP=$$S^%ZTLOAD() Q:ZTSTOP
"RTN","VDEFREQ",62,0)
 . I $P($G(^VDEFHL7(579.3,QIEN,0)),U,9)="S" S ZTSTOP=1 Q
"RTN","VDEFREQ",63,0)
 . N DSTPROT,DSTTYP,DYNAMIC,ERR,SITEPARM,VDEFN
"RTN","VDEFREQ",64,0)
 . N FDA,VDEFHL,HLA,HLCS,IEN577,IENS,II,HL
"RTN","VDEFREQ",65,0)
 . N NAMEVAL,PAIR,REQUEST,SUBT,VAL,VDEFERR
"RTN","VDEFREQ",66,0)
 . S IENS=IEN_","_QIEN_"," ; Request Queue IEN string
"RTN","VDEFREQ",67,0)
 . L +^VDEFHL7(579.3,QIEN,IEN):5 Q:'$T
"RTN","VDEFREQ",68,0)
 . M VAL=^VDEFHL7(579.3,QIEN,1,IEN) S REQUEST=$G(VAL(0))
"RTN","VDEFREQ",69,0)
 . M NAMEVAL=VAL(.05) ; Name Value pairs
"RTN","VDEFREQ",70,0)
 . M DYNAMIC=VAL(.19) ; Dynamic Addressing information
"RTN","VDEFREQ",71,0)
 . K VAL
"RTN","VDEFREQ",72,0)
 . ;
"RTN","VDEFREQ",73,0)
 . ; Check for an incomplete record
"RTN","VDEFREQ",74,0)
 . ;VDEF*14 - should not rely on global structure
"RTN","VDEFREQ",75,0)
 . ;I '$D(NAMEVAL(1)) L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",76,0)
 . ;
"RTN","VDEFREQ",77,0)
 . ; Change request status from "Q"ueued Up to "C"hecked Out
"RTN","VDEFREQ",78,0)
 . S FDA(1,579.31,IENS,.02)="C" D FILE^DIE("","FDA(1)") K FDA
"RTN","VDEFREQ",79,0)
 . ;
"RTN","VDEFREQ",80,0)
 . ; VDEF*14 loop through the NAMEVAL array - regardless of ien
"RTN","VDEFREQ",81,0)
 . S (SUBT,NVPIEN)="",VDEFN=0
"RTN","VDEFREQ",82,0)
 . F  S VDEFN=$O(NAMEVAL(VDEFN)) Q:VDEFN=""  D
"RTN","VDEFREQ",83,0)
 .. S PAIR=$P($G(NAMEVAL(VDEFN,0)),U,2)
"RTN","VDEFREQ",84,0)
 .. I PAIR["SUBTYPE" S SUBT=$P(PAIR,"=",2)
"RTN","VDEFREQ",85,0)
 .. I PAIR["IEN" S NVPIEN=$P(PAIR,"=",2)
"RTN","VDEFREQ",86,0)
 .. Q
"RTN","VDEFREQ",87,0)
 . ;VDEF*14 quit if unable to determine subtype or ien
"RTN","VDEFREQ",88,0)
 . I SUBT="" D ERR("Subtype missing from Name/Value Pair") L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",89,0)
 . I NVPIEN="" D ERR("IEN missing from Name/Value Pair") L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",90,0)
 . ;
"RTN","VDEFREQ",91,0)
 . ; Retrieve the Destination information for this request
"RTN","VDEFREQ",92,0)
 . S DSTIEN=$P(REQUEST,U,7),DSTTYP=$P($G(DSTDATA(+DSTIEN)),U,2)
"RTN","VDEFREQ",93,0)
 . ;
"RTN","VDEFREQ",94,0)
 . ; Get the VDEF Event IEN
"RTN","VDEFREQ",95,0)
 . S IEN577=$P(REQUEST,U,18)
"RTN","VDEFREQ",96,0)
 . ;
"RTN","VDEFREQ",97,0)
 . ; Get the VISTA HL7 Protocol
"RTN","VDEFREQ",98,0)
 . S DSTPROT=$P($G(^VDEFHL7(577,IEN577,0)),U,7)
"RTN","VDEFREQ",99,0)
 . I DSTPROT="" D ERR("Protocol not defined in VDEF event file") S ZTSTOP=1 L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",100,0)
 . ;
"RTN","VDEFREQ",101,0)
 . ; Create delimiter structure to use when building segments
"RTN","VDEFREQ",102,0)
 . D INIT^HLFNC2(DSTPROT,.VDEFHL)
"RTN","VDEFREQ",103,0)
 . I '$D(VDEFHL) D ERR("No HL7 parameters for this Protocol") S ZTSTOP=1 L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",104,0)
 . S HLCS=$E(VDEFHL("ECH")) M HL=VDEFHL ; Some called routines use 'HL' array
"RTN","VDEFREQ",105,0)
 . ;
"RTN","VDEFREQ",106,0)
 . ; Get the site parameters
"RTN","VDEFREQ",107,0)
 . S SITEPARM=$$PARAM^HLCS2
"RTN","VDEFREQ",108,0)
 . ;
"RTN","VDEFREQ",109,0)
 . ; If no IEN don't generate an HL7 message
"RTN","VDEFREQ",110,0)
 . I $G(NVPIEN)="" D STATUS^VDEFREQ1(IENS,"P"),ERR("Invalid IEN") S ZTSTOP=1 L -^VDEFHL7(579.3,QIEN,IEN) Q
"RTN","VDEFREQ",111,0)
 . D NOW^%DTC S FDA(1,579.31,IENS,.09)=%
"RTN","VDEFREQ",112,0)
 . ;
"RTN","VDEFREQ",113,0)
 . ; Update this Request record with the current date & time
"RTN","VDEFREQ",114,0)
 . D FILE^DIE("","FDA(1)","ERR(1)") K FDA
"RTN","VDEFREQ",115,0)
 . ;
"RTN","VDEFREQ",116,0)
 . ; Generate HL7 message for this request
"RTN","VDEFREQ",117,0)
 . D GENERATE^VDEFREQ1(NVPIEN,.HLA,HLCS,IEN577,SUBT,DSTPROT,DSTTYP,.ZTSTOP,.VDEFHL,.DYNAMIC)
"RTN","VDEFREQ",118,0)
 . ;
"RTN","VDEFREQ",119,0)
 . ; Update request status from Checked Out to Processed or Errored Out
"RTN","VDEFREQ",120,0)
 . ; Leave Request Checked Out if VistA HL7 errored out (ZTSTOP=2)
"RTN","VDEFREQ",121,0)
 . I ZTSTOP'=2 D STATUS^VDEFREQ1(IENS,$S(ZTSTOP=1:"E",1:"P")) S ZTSTOP=0
"RTN","VDEFREQ",122,0)
 . I ZTSTOP=2 S ZTSTOP=0 ; If VistA HL7 errored out, continue processing
"RTN","VDEFREQ",123,0)
 . ;
"RTN","VDEFREQ",124,0)
 . ; Unlock the record
"RTN","VDEFREQ",125,0)
 . L -^VDEFHL7(579.3,QIEN,IEN)
"RTN","VDEFREQ",126,0)
 ;
"RTN","VDEFREQ",127,0)
 ; Quit if necessary.
"RTN","VDEFREQ",128,0)
 G EXIT:ZTSTOP
"RTN","VDEFREQ",129,0)
 ; Wait for the next time to run.
"RTN","VDEFREQ",130,0)
 ; The wait process is in a loop so it can check if there
"RTN","VDEFREQ",131,0)
 ; has been a request to stop processing before the wait expires.
"RTN","VDEFREQ",132,0)
WAITLOOP N I S ZTSTOP=0 F I=1:1:VDEFWAIT D  Q:ZTSTOP
"RTN","VDEFREQ",133,0)
 . S ZTSTOP=$$S^%ZTLOAD() Q:ZTSTOP
"RTN","VDEFREQ",134,0)
 . I $P(^VDEFHL7(579.3,QIEN,0),U,9)="S" S ZTSTOP=1 Q
"RTN","VDEFREQ",135,0)
 . H 1
"RTN","VDEFREQ",136,0)
 ;
"RTN","VDEFREQ",137,0)
 ; Quit or resume processing
"RTN","VDEFREQ",138,0)
 I 'ZTSTOP K I G EN1
"RTN","VDEFREQ",139,0)
 ;
"RTN","VDEFREQ",140,0)
 ; Quit
"RTN","VDEFREQ",141,0)
 ; Unlock the record in case it left the loop with an error
"RTN","VDEFREQ",142,0)
EXIT L -^VDEFHL7(579.3,"QUEUE",QIEN),-^VDEFHL7(579.3,QIEN,IEN)
"RTN","VDEFREQ",143,0)
 D ALERT^VDEFUTIL("VDEF REQUEST QUEUE PROCESSOR FOR "_$P(QUEUE,U)_" HAS EXITED.")
"RTN","VDEFREQ",144,0)
 ;
"RTN","VDEFREQ",145,0)
 ; Stop the task and delete this task's record
"RTN","VDEFREQ",146,0)
 N X,I S ZTSK=VDEFTSK,X=$$ASKSTOP^%ZTLOAD(ZTSK),ZTREQ="@"
"RTN","VDEFREQ",147,0)
 F I=1:1:5 D STAT^%ZTLOAD Q:ZTSK(1)=0!(ZTSK(1)>2)  H 1
"RTN","VDEFREQ",148,0)
 K X,I
"RTN","VDEFREQ",149,0)
 Q
"RTN","VDEFREQ",150,0)
 ;
"RTN","VDEFREQ",151,0)
ERR(TEXT) ; Error processing
"RTN","VDEFREQ",152,0)
 N FDA,ERR
"RTN","VDEFREQ",153,0)
 S VDEFERR=$TR(TEXT,"^"),FDA(1,579.31,IENS,.17)=VDEFERR
"RTN","VDEFREQ",154,0)
 D FILE^DIE("","FDA(1)","ERR")
"RTN","VDEFREQ",155,0)
 Q
"VER")
8.0^22.0
"BLD",10294,6)
^5
**END**
**END**

