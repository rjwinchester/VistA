Released VPR*1*16 SEQ #14
Extracted from mail message
**KIDS**:VPR*1.0*16^

**INSTALL NAME**
VPR*1.0*16
"BLD",9478,0)
VPR*1.0*16^VIRTUAL PATIENT RECORD^0^3190729^y
"BLD",9478,4,0)
^9.64PA^^
"BLD",9478,6.3)
3
"BLD",9478,"INIT")
POST^VPRP16
"BLD",9478,"KRN",0)
^9.67PA^1.5^24
"BLD",9478,"KRN",.4,0)
.4
"BLD",9478,"KRN",.401,0)
.401
"BLD",9478,"KRN",.402,0)
.402
"BLD",9478,"KRN",.403,0)
.403
"BLD",9478,"KRN",.5,0)
.5
"BLD",9478,"KRN",.84,0)
.84
"BLD",9478,"KRN",1.5,0)
1.5
"BLD",9478,"KRN",1.5,"NM",0)
^9.68A^10^10
"BLD",9478,"KRN",1.5,"NM",1,0)
VPR FACILITY ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",2,0)
VPR INSURED ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",3,0)
VPR INS COMPANY ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",4,0)
VPR PATIENT ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",5,0)
VPR PATIENT BIRTHPLACE^^0
"BLD",9478,"KRN",1.5,"NM",6,0)
VPR PATIENT ECON ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",7,0)
VPR PATIENT EMPLOYER ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",8,0)
VPR PATIENT LANGUAGE^^0
"BLD",9478,"KRN",1.5,"NM",9,0)
VPR PATIENT NOK ADDRESS^^0
"BLD",9478,"KRN",1.5,"NM",10,0)
VPR TEAM MEMBER^^0
"BLD",9478,"KRN",1.5,"NM","B","VPR FACILITY ADDRESS",1)

"BLD",9478,"KRN",1.5,"NM","B","VPR INS COMPANY ADDRESS",3)

"BLD",9478,"KRN",1.5,"NM","B","VPR INSURED ADDRESS",2)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT ADDRESS",4)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT BIRTHPLACE",5)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT ECON ADDRESS",6)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT EMPLOYER ADDRESS",7)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT LANGUAGE",8)

"BLD",9478,"KRN",1.5,"NM","B","VPR PATIENT NOK ADDRESS",9)

"BLD",9478,"KRN",1.5,"NM","B","VPR TEAM MEMBER",10)

"BLD",9478,"KRN",1.6,0)
1.6
"BLD",9478,"KRN",1.61,0)
1.61
"BLD",9478,"KRN",1.62,0)
1.62
"BLD",9478,"KRN",3.6,0)
3.6
"BLD",9478,"KRN",3.8,0)
3.8
"BLD",9478,"KRN",9.2,0)
9.2
"BLD",9478,"KRN",9.8,0)
9.8
"BLD",9478,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",9478,"KRN",9.8,"NM",1,0)
VPRHS^^0^B67709194
"BLD",9478,"KRN",9.8,"NM",2,0)
VPRSDA^^0^B243968845
"BLD",9478,"KRN",9.8,"NM",3,0)
VPRP16^^0^B4532811
"BLD",9478,"KRN",9.8,"NM","B","VPRHS",1)

"BLD",9478,"KRN",9.8,"NM","B","VPRP16",3)

"BLD",9478,"KRN",9.8,"NM","B","VPRSDA",2)

"BLD",9478,"KRN",19,0)
19
"BLD",9478,"KRN",19.1,0)
19.1
"BLD",9478,"KRN",101,0)
101
"BLD",9478,"KRN",409.61,0)
409.61
"BLD",9478,"KRN",771,0)
771
"BLD",9478,"KRN",779.2,0)
779.2
"BLD",9478,"KRN",870,0)
870
"BLD",9478,"KRN",8989.51,0)
8989.51
"BLD",9478,"KRN",8989.52,0)
8989.52
"BLD",9478,"KRN",8994,0)
8994
"BLD",9478,"KRN","B",.4,.4)

"BLD",9478,"KRN","B",.401,.401)

"BLD",9478,"KRN","B",.402,.402)

"BLD",9478,"KRN","B",.403,.403)

"BLD",9478,"KRN","B",.5,.5)

"BLD",9478,"KRN","B",.84,.84)

"BLD",9478,"KRN","B",1.5,1.5)

"BLD",9478,"KRN","B",1.6,1.6)

"BLD",9478,"KRN","B",1.61,1.61)

"BLD",9478,"KRN","B",1.62,1.62)

"BLD",9478,"KRN","B",3.6,3.6)

"BLD",9478,"KRN","B",3.8,3.8)

"BLD",9478,"KRN","B",9.2,9.2)

"BLD",9478,"KRN","B",9.8,9.8)

"BLD",9478,"KRN","B",19,19)

"BLD",9478,"KRN","B",19.1,19.1)

"BLD",9478,"KRN","B",101,101)

"BLD",9478,"KRN","B",409.61,409.61)

"BLD",9478,"KRN","B",771,771)

"BLD",9478,"KRN","B",779.2,779.2)

"BLD",9478,"KRN","B",870,870)

"BLD",9478,"KRN","B",8989.51,8989.51)

"BLD",9478,"KRN","B",8989.52,8989.52)

"BLD",9478,"KRN","B",8994,8994)

"BLD",9478,"QUES",0)
^9.62^^
"BLD",9478,"REQB",0)
^9.611^1^1
"BLD",9478,"REQB",1,0)
VPR*1.0*15^2
"BLD",9478,"REQB","B","VPR*1.0*15",1)

"INIT")
POST^VPRP16
"KRN",1.5,45,-1)
0^4
"KRN",1.5,45,0)
VPR PATIENT ADDRESS^2^^^^S
"KRN",1.5,45,.1)
Address
"KRN",1.5,45,1,0)
^1.51^6^5
"KRN",1.5,45,1,1,0)
Street^4^S^2^.111
"KRN",1.5,45,1,1,6)
S VALUE=$G(VAPA(1)) I $L(VALUE) N I F I=2,3 S:$L($G(VAPA(I))) VALUE=VALUE_";"_VAPA(I)
"KRN",1.5,45,1,2,0)
City^5^E^2^.114^^^VPR CODE ONLY
"KRN",1.5,45,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,45,1,2,6)
S VALUE=$G(VAPA(4))
"KRN",1.5,45,1,3,0)
State^6^E^2^.115^^1^VPR STATE
"KRN",1.5,45,1,3,6)
S VALUE=$P($G(VAPA(5)),U)
"KRN",1.5,45,1,4,0)
Zip^7^E^2^.1112^^^VPR CODE ONLY
"KRN",1.5,45,1,4,6)
S VALUE=$G(VAPA(6))
"KRN",1.5,45,1,6,0)
Country^8^E^2^.1173^^1^VPR COUNTRY
"KRN",1.5,45,1,"B","City",2)

"KRN",1.5,45,1,"B","Country",6)

"KRN",1.5,45,1,"B","State",3)

"KRN",1.5,45,1,"B","Street",1)

"KRN",1.5,45,1,"B","Zip",4)

"KRN",1.5,45,1,"SEQ",4,1)

"KRN",1.5,45,1,"SEQ",5,2)

"KRN",1.5,45,1,"SEQ",6,3)

"KRN",1.5,45,1,"SEQ",7,4)

"KRN",1.5,45,1,"SEQ",8,6)

"KRN",1.5,45,2)
S DFN=DIEN,VAPA("P")="" D ADD^VADPT
"KRN",1.5,45,3)
K VAPA
"KRN",1.5,45,19,0)
^^2^2^3180606^
"KRN",1.5,45,19,1,0)
This entity supports VPR PATIENT, and expects the Patient file #2 ien
"KRN",1.5,45,19,2,0)
as the ID.
"KRN",1.5,88,-1)
0^2
"KRN",1.5,88,0)
VPR INSURED ADDRESS^2.312^^^^S
"KRN",1.5,88,.1)
Address
"KRN",1.5,88,1,0)
^1.51^5^5
"KRN",1.5,88,1,1,0)
Street^4^S^2.312^3.06
"KRN",1.5,88,1,2,0)
City^5^E^2.312^3.08^^^VPR CODE ONLY
"KRN",1.5,88,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,88,1,3,0)
State^6^E^2.312^3.09^^1^VPR STATE
"KRN",1.5,88,1,4,0)
Zip^7^E^2.312^3.1^^^VPR CODE ONLY
"KRN",1.5,88,1,5,0)
Country^8^E^2.312^3.13^^^VPR COUNTRY
"KRN",1.5,88,1,5,4)
N Y S Y=$$FIND1^DIC(779.004,,,VALUE) S:Y VALUE=Y
"KRN",1.5,88,1,"B","City",2)

"KRN",1.5,88,1,"B","Country",5)

"KRN",1.5,88,1,"B","State",3)

"KRN",1.5,88,1,"B","Street",1)

"KRN",1.5,88,1,"B","Zip",4)

"KRN",1.5,88,1,"SEQ",4,1)

"KRN",1.5,88,1,"SEQ",5,2)

"KRN",1.5,88,1,"SEQ",6,3)

"KRN",1.5,88,1,"SEQ",7,4)

"KRN",1.5,88,1,"SEQ",8,5)

"KRN",1.5,90,-1)
0^3
"KRN",1.5,90,0)
VPR INS COMPANY ADDRESS^36^^^^S
"KRN",1.5,90,.1)
Address
"KRN",1.5,90,1,0)
^1.51^4^4
"KRN",1.5,90,1,1,0)
Street^4^S^36^.111
"KRN",1.5,90,1,1,6)
S VALUE=$G(VPRINS(VPRP,2))
"KRN",1.5,90,1,2,0)
City^5^E^36^.114^^^VPR CODE ONLY
"KRN",1.5,90,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,90,1,2,6)
S VALUE=$G(VPRINS(VPRP,3))
"KRN",1.5,90,1,3,0)
State^6^E^36^.115^^1^VPR STATE
"KRN",1.5,90,1,3,6)
S VALUE=$P($G(VPRINS(VPRP,4)),U)
"KRN",1.5,90,1,4,0)
Zip^7^E^36^.116^^^VPR CODE ONLY
"KRN",1.5,90,1,4,6)
S VALUE=$G(VPRINS(VPRP,5))
"KRN",1.5,90,1,"B","City",2)

"KRN",1.5,90,1,"B","State",3)

"KRN",1.5,90,1,"B","Street",1)

"KRN",1.5,90,1,"B","Zip",4)

"KRN",1.5,90,1,"SEQ",4,1)

"KRN",1.5,90,1,"SEQ",5,2)

"KRN",1.5,90,1,"SEQ",6,3)

"KRN",1.5,90,1,"SEQ",7,4)

"KRN",1.5,94,-1)
0^5
"KRN",1.5,94,0)
VPR PATIENT BIRTHPLACE^2^^^^S
"KRN",1.5,94,.1)
Address
"KRN",1.5,94,1,0)
^1.51^2^2
"KRN",1.5,94,1,1,0)
City^2^E^2^.092^^^VPR CODE ONLY
"KRN",1.5,94,1,1,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,94,1,1,6)
S VALUE=$G(VAPD(1))
"KRN",1.5,94,1,2,0)
State^3^E^2^.093^^1^VPR STATE
"KRN",1.5,94,1,2,6)
S VALUE=$P($G(VAPD(2)),U)
"KRN",1.5,94,1,"B","City",1)

"KRN",1.5,94,1,"B","State",2)

"KRN",1.5,94,1,"SEQ",2,1)

"KRN",1.5,94,1,"SEQ",3,2)

"KRN",1.5,94,19,0)
^^2^2^3180606^
"KRN",1.5,94,19,1,0)
This entity supports VPR PATIENT, and expects the Patient file #2 ien
"KRN",1.5,94,19,2,0)
as the ID.
"KRN",1.5,96,-1)
0^9
"KRN",1.5,96,0)
VPR PATIENT NOK ADDRESS^2^^^^S
"KRN",1.5,96,.1)
Address
"KRN",1.5,96,1,0)
^1.51^4^4
"KRN",1.5,96,1,1,0)
Street^4^S^2^.213
"KRN",1.5,96,1,1,6)
S VALUE=$G(VAOA(1)) I $L(VALUE) N I F I=2,3 S:$L($G(VAOA(I))) VALUE=VALUE_";"_VAOA(I)
"KRN",1.5,96,1,2,0)
City^5^E^2^.216^^^VPR CODE ONLY
"KRN",1.5,96,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,96,1,2,6)
S VALUE=$G(VAOA(4))
"KRN",1.5,96,1,3,0)
State^6^E^2^.217^^1^VPR STATE
"KRN",1.5,96,1,3,6)
S VALUE=$P($G(VAOA(5)),U)
"KRN",1.5,96,1,4,0)
Zip^7^E^2^.218^^^VPR CODE ONLY
"KRN",1.5,96,1,4,6)
S VALUE=$G(VAOA(6))
"KRN",1.5,96,1,"B","City",2)

"KRN",1.5,96,1,"B","State",3)

"KRN",1.5,96,1,"B","Street",1)

"KRN",1.5,96,1,"B","Zip",4)

"KRN",1.5,96,1,"SEQ",4,1)

"KRN",1.5,96,1,"SEQ",5,2)

"KRN",1.5,96,1,"SEQ",6,3)

"KRN",1.5,96,1,"SEQ",7,4)

"KRN",1.5,96,19,0)
^^2^2^3180606^
"KRN",1.5,96,19,1,0)
This entity supports VPR PATIENT, and expects the Patient file #2 ien
"KRN",1.5,96,19,2,0)
as the ID. It returns the address of the patient's Next of Kin.
"KRN",1.5,98,-1)
0^6
"KRN",1.5,98,0)
VPR PATIENT ECON ADDRESS^2^^^^S
"KRN",1.5,98,.1)
Address
"KRN",1.5,98,1,0)
^1.51^4^4
"KRN",1.5,98,1,1,0)
Street^4^S^2^.333
"KRN",1.5,98,1,1,6)
S VALUE=$G(VAOA(1)) I $L(VALUE) N I F I=2,3 S:$L($G(VAOA(I))) VALUE=VALUE_";"_VAOA(I)
"KRN",1.5,98,1,2,0)
City^5^E^2^.336^^^VPR CODE ONLY
"KRN",1.5,98,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,98,1,2,6)
S VALUE=$G(VAOA(4))
"KRN",1.5,98,1,3,0)
State^6^E^2^.337^^1^VPR STATE
"KRN",1.5,98,1,3,6)
S VALUE=$P($G(VAOA(5)),U)
"KRN",1.5,98,1,4,0)
Zip^7^E^2^.338^^^VPR CODE ONLY
"KRN",1.5,98,1,4,6)
S VALUE=$G(VAOA(6))
"KRN",1.5,98,1,"B","City",2)

"KRN",1.5,98,1,"B","State",3)

"KRN",1.5,98,1,"B","Street",1)

"KRN",1.5,98,1,"B","Zip",4)

"KRN",1.5,98,1,"SEQ",4,1)

"KRN",1.5,98,1,"SEQ",5,2)

"KRN",1.5,98,1,"SEQ",6,3)

"KRN",1.5,98,1,"SEQ",7,4)

"KRN",1.5,98,19,0)
^^2^2^3180606^
"KRN",1.5,98,19,1,0)
This entity supports VPR PATIENT, and expects the Patient file #2 ien
"KRN",1.5,98,19,2,0)
as the ID. It returns the address of the patient's Emergency Contact.
"KRN",1.5,100,-1)
0^7
"KRN",1.5,100,0)
VPR PATIENT EMPLOYER ADDRESS^2^^^^S
"KRN",1.5,100,.1)
Address
"KRN",1.5,100,1,0)
^1.51^4^4
"KRN",1.5,100,1,1,0)
Street^4^S^2^.3113
"KRN",1.5,100,1,1,6)
S VALUE=$G(VAOA(1)) I $L(VALUE) N I F I=2,3 S:$L($G(VAOA(I))) VALUE=VALUE_";"_VAOA(I)
"KRN",1.5,100,1,2,0)
City^5^E^2^.3116^^^VPR CODE ONLY
"KRN",1.5,100,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,100,1,2,6)
S VALUE=$G(VAOA(4))
"KRN",1.5,100,1,3,0)
State^6^E^2^.3117^^1^VPR STATE
"KRN",1.5,100,1,3,6)
S VALUE=$P($G(VAOA(5)),U)
"KRN",1.5,100,1,4,0)
Zip^7^E^2^.3118^^^VPR CODE ONLY
"KRN",1.5,100,1,4,6)
S VALUE=$G(VAOA(6))
"KRN",1.5,100,1,"B","City",2)

"KRN",1.5,100,1,"B","State",3)

"KRN",1.5,100,1,"B","Street",1)

"KRN",1.5,100,1,"B","Zip",4)

"KRN",1.5,100,1,"SEQ",4,1)

"KRN",1.5,100,1,"SEQ",5,2)

"KRN",1.5,100,1,"SEQ",6,3)

"KRN",1.5,100,1,"SEQ",7,4)

"KRN",1.5,100,19,0)
^^2^2^3180606^
"KRN",1.5,100,19,1,0)
This entity supports VPR PATIENT, and expects the Patient file #2 ien
"KRN",1.5,100,19,2,0)
as the ID. It returns the address of the patient's employer.
"KRN",1.5,168,-1)
0^10
"KRN",1.5,168,0)
VPR TEAM MEMBER^200^^^^S
"KRN",1.5,168,.1)
CareProvider
"KRN",1.5,168,1,0)
^1.51^11^11
"KRN",1.5,168,1,1,0)
Code^4^I
"KRN",1.5,168,1,2,0)
Description^5^F^^
"KRN",1.5,168,1,2,6)
S VALUE=$G(VPROLE)
"KRN",1.5,168,1,3,0)
SDACodingStandard^1^F
"KRN",1.5,168,1,3,2)
VA200
"KRN",1.5,168,1,4,0)
Name^6^E^200^.01^^^VPR NAME
"KRN",1.5,168,1,5,0)
ContactInfo^8^C
"KRN",1.5,168,1,5,3,0)
^1.513I^3^3
"KRN",1.5,168,1,5,3,1,0)
3^WorkPhoneNumber
"KRN",1.5,168,1,5,3,2,0)
4^MobilePhoneNumber
"KRN",1.5,168,1,5,3,3,0)
5^EmailAddress
"KRN",1.5,168,1,5,3,"B",3,1)

"KRN",1.5,168,1,5,3,"B",4,2)

"KRN",1.5,168,1,5,3,"B",5,3)

"KRN",1.5,168,1,6,0)
WorkPhoneNumber^^S^200^.132
"KRN",1.5,168,1,7,0)
MobilePhoneNumber^^S^200^.137
"KRN",1.5,168,1,8,0)
EmailAddress^^S^200^.151
"KRN",1.5,168,1,9,0)
CareProviderType^9^E^200^^^^VPR PERSON CLASS
"KRN",1.5,168,1,9,6)
S DATA=$$TAXIND^XUSTAX(DIEN) I DATA'="^",$P(DATA,U)'=-1 S VALUE=$P(DATA,U,2)
"KRN",1.5,168,1,10,0)
AtOrganization^12^E^200^^^^VPR FACILITY
"KRN",1.5,168,1,10,6)
S VALUE=$G(VASITE)
"KRN",1.5,168,1,11,0)
Extension^3^E^200^^^^VPR PROVIDER EXTENSION
"KRN",1.5,168,1,11,6)
S VALUE=DIEN
"KRN",1.5,168,1,"B","AtOrganization",10)

"KRN",1.5,168,1,"B","CareProviderType",9)

"KRN",1.5,168,1,"B","Code",1)

"KRN",1.5,168,1,"B","ContactInfo",5)

"KRN",1.5,168,1,"B","Description",2)

"KRN",1.5,168,1,"B","EmailAddress",8)

"KRN",1.5,168,1,"B","Extension",11)

"KRN",1.5,168,1,"B","MobilePhoneNumber",7)

"KRN",1.5,168,1,"B","Name",4)

"KRN",1.5,168,1,"B","SDACodingStandard",3)

"KRN",1.5,168,1,"B","WorkPhoneNumber",6)

"KRN",1.5,168,1,"SEQ",1,3)

"KRN",1.5,168,1,"SEQ",3,11)

"KRN",1.5,168,1,"SEQ",4,1)

"KRN",1.5,168,1,"SEQ",5,2)

"KRN",1.5,168,1,"SEQ",6,4)

"KRN",1.5,168,1,"SEQ",8,5)

"KRN",1.5,168,1,"SEQ",9,9)

"KRN",1.5,168,1,"SEQ",12,10)

"KRN",1.5,168,3)
K VPROLE
"KRN",1.5,168,4)
S VPROLE=$P(DIEN,U,2),DIEN=+DIEN S:'DIEN DDEOUT=1
"KRN",1.5,169,-1)
0^1
"KRN",1.5,169,0)
VPR FACILITY ADDRESS^4^^^^S
"KRN",1.5,169,.1)
Address
"KRN",1.5,169,1,0)
^1.51^4^4
"KRN",1.5,169,1,1,0)
Street^4^S^4^1.01
"KRN",1.5,169,1,1,6)
S VALUE=$P($G(VAPA),U)
"KRN",1.5,169,1,2,0)
City^5^E^4^1.03^^^VPR CODE ONLY
"KRN",1.5,169,1,2,4)
S VALUE=$E(VALUE,1,50)
"KRN",1.5,169,1,2,6)
S VALUE=$P($G(VAPA),U,2)
"KRN",1.5,169,1,3,0)
State^6^E^4^.02^^1^VPR STATE
"KRN",1.5,169,1,3,6)
Q  ;S VALUE=$P($G(VAPA),U,3)
"KRN",1.5,169,1,4,0)
Zip^7^E^4^1.04^^^VPR CODE ONLY
"KRN",1.5,169,1,4,6)
S VALUE=$P($G(VAPA),U,4)
"KRN",1.5,169,1,"B","City",2)

"KRN",1.5,169,1,"B","State",3)

"KRN",1.5,169,1,"B","Street",1)

"KRN",1.5,169,1,"B","Zip",4)

"KRN",1.5,169,1,"SEQ",4,1)

"KRN",1.5,169,1,"SEQ",5,2)

"KRN",1.5,169,1,"SEQ",6,3)

"KRN",1.5,169,1,"SEQ",7,4)

"KRN",1.5,169,3)
K VAPA
"KRN",1.5,169,4)
S VAPA=$$PADD^XUAF4(DIEN)
"KRN",1.5,169,19,0)
^1.519^2^2^3181130^^
"KRN",1.5,169,19,1,0)
This entity supports VPR FAMILY DOCTOR, and expects the Institution file #4
"KRN",1.5,169,19,2,0)
ien as the ID.
"KRN",1.5,172,-1)
0^8
"KRN",1.5,172,0)
VPR PATIENT LANGUAGE^2.07^^^^S
"KRN",1.5,172,.1)
PatientLanguage
"KRN",1.5,172,1,0)
^1.51^3^3
"KRN",1.5,172,1,1,0)
PreferredLanguage^7^E^2.07^.02^^^VPR LANGUAGE
"KRN",1.5,172,1,1,4)
S DATA=VALUE,VALUE=$$FIND1^DIC(.85,,"X",VALUE)
"KRN",1.5,172,1,1,6)
S VALUE=$P($G(VADM(13,1)),U,2)
"KRN",1.5,172,1,2,0)
Use^8^F
"KRN",1.5,172,1,2,6)
S VALUE=$G(VASTN)
"KRN",1.5,172,1,3,0)
EnteredOn^9^S^2.07^.01^^1
"KRN",1.5,172,1,3,4)
S VALUE=$$DATE^VPRSDA(VALUE)
"KRN",1.5,172,1,3,6)
S VALUE=$P($G(VADM(13)),U) I VALUE,(VALUE<1500000)!(VALUE>DT) S VALUE=$$GET1^DIQ(2,DFN,.097,"I") S:VALUE VALUE=VALUE_".12"
"KRN",1.5,172,1,"B","EnteredOn",3)

"KRN",1.5,172,1,"B","PreferredLanguage",1)

"KRN",1.5,172,1,"B","Use",2)

"KRN",1.5,172,1,"SEQ",7,1)

"KRN",1.5,172,1,"SEQ",8,2)

"KRN",1.5,172,1,"SEQ",9,3)

"KRN",1.5,172,19,0)
^^3^3^3181221^
"KRN",1.5,172,19,1,0)
This entity supports VPR PATIENT, returning the patient's preferred
"KRN",1.5,172,19,2,0)
language from the Language Date/Time sub-file. It expects the VADM array
"KRN",1.5,172,19,3,0)
to be defined.
"MBREQ")
0
"ORD",28,1.5)
1.5;28;;;ENT^XPDTA2;ENTF1^XPDIA0;ENTE1^XPDIA0;ENTF2^XPDIA0;;ENTDEL^XPDIA0(%)
"ORD",28,1.5,0)
ENTITY
"PKG",571,-1)
1^1
"PKG",571,0)
VIRTUAL PATIENT RECORD^VPR^Utilities to manage a virtual copy of the patient record
"PKG",571,22,0)
^9.49I^1^1
"PKG",571,22,1,0)
1.0^3110804^3110901^1
"PKG",571,22,1,"PAH",1,0)
16^3190729
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","VPRHS")
0^1^B67709194^B45375819
"RTN","VPRHS",1,0)
VPRHS ;SLC/MKB -- HealthShare utilities ;10/25/18  15:29
"RTN","VPRHS",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**8,10,15,16**;Sep 01, 2011;Build 3
"RTN","VPRHS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","VPRHS",4,0)
 ;
"RTN","VPRHS",5,0)
 ; External References          DBIA#
"RTN","VPRHS",6,0)
 ; -------------------          -----
"RTN","VPRHS",7,0)
 ; ^DDE                          7014
"RTN","VPRHS",8,0)
 ; ^DGS(41.1                     3796
"RTN","VPRHS",9,0)
 ; ^DPT                         10035
"RTN","VPRHS",10,0)
 ; %ZTLOAD                      10063
"RTN","VPRHS",11,0)
 ; DDE                           7008
"RTN","VPRHS",12,0)
 ; MPIF001                       2701
"RTN","VPRHS",13,0)
 ; SDAMA301                      4433
"RTN","VPRHS",14,0)
 ; VADPT                         3744
"RTN","VPRHS",15,0)
 ; XLFDT                        10103
"RTN","VPRHS",16,0)
 ; XLFSTR                       10104
"RTN","VPRHS",17,0)
 ; XUPROD                        4440
"RTN","VPRHS",18,0)
 ;
"RTN","VPRHS",19,0)
 Q
"RTN","VPRHS",20,0)
 ;
"RTN","VPRHS",21,0)
ON() ; -- return 1 or 0, if monitoring is on
"RTN","VPRHS",22,0)
 Q $P($G(^VPR(1,0)),U,2)
"RTN","VPRHS",23,0)
 ;
"RTN","VPRHS",24,0)
EN(DFN) ; -- subscribe a patient for data event monitoring
"RTN","VPRHS",25,0)
 Q:'$G(DFN)  Q:$D(^VPR(1,2,+DFN,0))
"RTN","VPRHS",26,0)
 S ^VPR(1,2,+DFN,0)=+DFN,^VPR(1,2,"B",+DFN,+DFN)=""
"RTN","VPRHS",27,0)
 ;N X,Y,DA,DIC,DINUM
"RTN","VPRHS",28,0)
 ;S DIC="^VPR(1,2,",DIC(0)="UL",DA(1)=1,(DINUM,X)=+DFN
"RTN","VPRHS",29,0)
 ;D FILE^DICN
"RTN","VPRHS",30,0)
 Q
"RTN","VPRHS",31,0)
 ;
"RTN","VPRHS",32,0)
UN(DFN) ; -- unsubscribe
"RTN","VPRHS",33,0)
 Q:'$G(DFN)  Q:'$D(^VPR(1,2,+DFN,0))
"RTN","VPRHS",34,0)
 K ^VPR(1,2,+DFN,0),^VPR(1,2,"B",+DFN,+DFN)
"RTN","VPRHS",35,0)
 ;N DA,DIK
"RTN","VPRHS",36,0)
 ;S DA(1)=1,DA=+DFN,DIK="^VPR(1,2,"
"RTN","VPRHS",37,0)
 ;D ^DIK
"RTN","VPRHS",38,0)
 Q
"RTN","VPRHS",39,0)
 ;
"RTN","VPRHS",40,0)
SUBS(DFN) ; -- return 1 or 0, if patient is subscribed or not
"RTN","VPRHS",41,0)
 Q $D(^VPR(1,2,+$G(DFN),0))
"RTN","VPRHS",42,0)
 ;
"RTN","VPRHS",43,0)
QUE(DFN) ; -- create task to POST a Patient update
"RTN","VPRHS",44,0)
 Q:'$P($G(^VPR(1,0)),U,2)       ;monitoring disabled
"RTN","VPRHS",45,0)
 Q:DFN<1  Q:'$$SUBS(DFN)        ;not subscribed
"RTN","VPRHS",46,0)
 Q:$P($G(^VPR(1,2,DFN,0)),U,2)  ;task exists
"RTN","VPRHS",47,0)
 ; create task
"RTN","VPRHS",48,0)
 N ZTRTN,ZTDTH,ZTDESC,ZTIO,ZTSAVE,ZTUCI,ZTCPU,ZTPRI,ZTKIL,ZTSYNC,ZTSK
"RTN","VPRHS",49,0)
 S ZTRTN="PAT^VPRHS",ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,,,10)
"RTN","VPRHS",50,0)
 S ZTDESC="Task single VPR SDA Patient Container update"
"RTN","VPRHS",51,0)
 S ZTIO="",ZTSAVE("DFN")="" D ^%ZTLOAD
"RTN","VPRHS",52,0)
 S:$G(ZTSK)>0 $P(^VPR(1,2,DFN,0),U,2)=ZTSK
"RTN","VPRHS",53,0)
 Q
"RTN","VPRHS",54,0)
 ;
"RTN","VPRHS",55,0)
PAT ; -- post Patient update
"RTN","VPRHS",56,0)
 D POST^VPRHS(DFN,"Patient",DFN_";2")
"RTN","VPRHS",57,0)
 S $P(^VPR(1,2,DFN,0),U,2)="",ZTREQ="@"
"RTN","VPRHS",58,0)
 Q
"RTN","VPRHS",59,0)
 ;
"RTN","VPRHS",60,0)
POST(DFN,TYPE,ID,ACT,VST) ; -- post an update to
"RTN","VPRHS",61,0)
 ;  ^VPR(1,2,DFN,"AVPR",TYPE,ID) = seq# ^ U/D ^ VISIT#
"RTN","VPRHS",62,0)
 ;  ^VPR("AVPR",seq#,DFN) = ICN ^ TYPE ^ ID ^ U/D ^ VISIT#
"RTN","VPRHS",63,0)
 Q:'$P($G(^VPR(1,0)),U,2)                   ;monitoring disabled
"RTN","VPRHS",64,0)
 S DFN=+$G(DFN),TYPE=$G(TYPE),ID=$G(ID)
"RTN","VPRHS",65,0)
 Q:DFN<1  Q:TYPE=""                         ;incomplete request
"RTN","VPRHS",66,0)
 I $$TESTPAT^VADPT(DFN),$$PROD^XUPROD Q     ;no test pats in prod
"RTN","VPRHS",67,0)
 I $$MERGED(DFN) Q                          ;no merged-from pats
"RTN","VPRHS",68,0)
 N ICN S ICN=$$GETICN^MPIF001(DFN) Q:ICN<0  ;ICN required
"RTN","VPRHS",69,0)
 ; add to ^VPR if not subscribed, not dead
"RTN","VPRHS",70,0)
 I '$$SUBS(DFN),'$G(^DPT(DFN,.35)) D NEW(DFN,ICN) Q
"RTN","VPRHS",71,0)
 S ACT=$S($G(ACT)="@":"D",1:"U")
"RTN","VPRHS",72,0)
P1 ;may enter here from VPRHSX manual update option
"RTN","VPRHS",73,0)
 N SEQ S SEQ=$$NUM
"RTN","VPRHS",74,0)
 S ^VPR("AVPR",SEQ,DFN)=ICN_U_$G(TYPE)_U_$G(ID)_U_$G(ACT)_U_$G(VST)
"RTN","VPRHS",75,0)
 ; use * for subscript (whole container) if ID is null
"RTN","VPRHS",76,0)
 S ^VPR(1,2,DFN,"AVPR",TYPE,$S($G(ID)="":"*",1:ID))=SEQ_U_$G(ACT)_U_$G(VST)
"RTN","VPRHS",77,0)
 Q
"RTN","VPRHS",78,0)
 ;
"RTN","VPRHS",79,0)
NUM() ; -- return existing SEQ of record, or increment
"RTN","VPRHS",80,0)
 N X,Y S X=$S(ID="":"*",1:ID)
"RTN","VPRHS",81,0)
 S Y=+$G(^VPR(1,2,DFN,"AVPR",TYPE,X)) I '$D(^VPR("AVPR",Y,DFN)) S Y=0
"RTN","VPRHS",82,0)
 I Y'>0 S Y=$I(^VPR(1,1))
"RTN","VPRHS",83,0)
 Q Y
"RTN","VPRHS",84,0)
 ;
"RTN","VPRHS",85,0)
NEW(DFN,ICN) ; -- post a new patient to 
"RTN","VPRHS",86,0)
 ; ^VPR(1,2,DFN,"ANEW")  = seq#
"RTN","VPRHS",87,0)
 ; ^VPR("ANEW",seq#,DFN) = ICN
"RTN","VPRHS",88,0)
 Q:$G(DFN)<1  Q:$G(^VPR(1,2,DFN,"ANEW"))
"RTN","VPRHS",89,0)
 I $G(ICN)<1 S ICN=$$GETICN^MPIF001(DFN) Q:ICN<0
"RTN","VPRHS",90,0)
 N SEQ S SEQ=$I(^VPR(1,1))
"RTN","VPRHS",91,0)
 S ^VPR("ANEW",SEQ,DFN)=ICN,^VPR(1,2,DFN,"ANEW")=SEQ
"RTN","VPRHS",92,0)
 Q
"RTN","VPRHS",93,0)
 ;
"RTN","VPRHS",94,0)
DEL(LIST,SEQ) ; -- remove ^VPR(LIST,SEQ) nodes
"RTN","VPRHS",95,0)
 N DFN,DATA,TYPE,ID
"RTN","VPRHS",96,0)
 S LIST=$G(LIST),SEQ=+$G(SEQ) Q:LIST=""  Q:SEQ<1
"RTN","VPRHS",97,0)
 S DFN=+$O(^VPR(LIST,SEQ,0)) I DFN<1 Q
"RTN","VPRHS",98,0)
 I LIST="ANEW" K ^VPR("ANEW",SEQ,DFN),^VPR(1,2,DFN,"ANEW") Q
"RTN","VPRHS",99,0)
 S DATA=$G(^VPR(LIST,SEQ,DFN)) K ^VPR("AVPR",SEQ,DFN)
"RTN","VPRHS",100,0)
 S TYPE=$P(DATA,U,2) Q:TYPE=""  ;error
"RTN","VPRHS",101,0)
 S ID=$P(DATA,U,3) S:ID="" ID="*"
"RTN","VPRHS",102,0)
 K ^VPR(1,2,DFN,"AVPR",TYPE,ID)
"RTN","VPRHS",103,0)
 Q
"RTN","VPRHS",104,0)
 ;
"RTN","VPRHS",105,0)
MERGED(DFN) ; -- return 1 or 0, if patient is being merged
"RTN","VPRHS",106,0)
 I $P($G(^DPT(+$G(DFN),0)),U)["MERGING INTO" Q 1
"RTN","VPRHS",107,0)
 I $G(^DPT(+$G(DFN),-9)) Q 1
"RTN","VPRHS",108,0)
 Q 0
"RTN","VPRHS",109,0)
 ;
"RTN","VPRHS",110,0)
GET(DFN,NAME,ID,VPRQ,MTYPE,VPRY,VPRR) ; -- return VistA data in @VPRY@(#)
"RTN","VPRHS",111,0)
 N ICN,VPRNM,VPRFN,VPRE,VPRI,VPRJ,VPRN,VPRX,VPRZ,VPRMAX
"RTN","VPRHS",112,0)
 ;
"RTN","VPRHS",113,0)
 ; define default return arrays
"RTN","VPRHS",114,0)
 S VPRY=$G(VPRY,$NA(^TMP("VPR GET",$J))),VPRI=0 K @VPRY
"RTN","VPRHS",115,0)
 S VPRR=$G(VPRR,$NA(^TMP("VPR ERR",$J))),VPRJ=0 K @VPRR
"RTN","VPRHS",116,0)
 ;
"RTN","VPRHS",117,0)
 ; validate/set up input parameters
"RTN","VPRHS",118,0)
 S DFN=$G(DFN),ICN=$P(DFN,";",2),DFN=+DFN
"RTN","VPRHS",119,0)
 I DFN<1!'$D(^DPT(DFN)) D ERROR("Invalid patient DFN") G GTQ
"RTN","VPRHS",120,0)
 I $P($G(^DPT(DFN,0)),U)["MERGING INTO" D ERROR($P($G(^DPT(DFN,0)),U)) G GTQ
"RTN","VPRHS",121,0)
 I $G(^DPT(DFN,-9)) D ERROR("MERGED INTO `"_$G(^DPT(DFN,-9))) G GTQ
"RTN","VPRHS",122,0)
 S VPRQ("patient")=DFN
"RTN","VPRHS",123,0)
 ;
"RTN","VPRHS",124,0)
 S VPRNM=$G(NAME) I VPRNM="" D ERROR("Undefined container") G GTQ
"RTN","VPRHS",125,0)
 S ID=$G(ID),MTYPE=$G(MTYPE,1) ;XML
"RTN","VPRHS",126,0)
 I VPRNM="Patient",'ID&DFN S ID=DFN_";2"
"RTN","VPRHS",127,0)
 I $G(VPRQ("max")) S VPRMAX=VPRQ("max")
"RTN","VPRHS",128,0)
 ;
"RTN","VPRHS",129,0)
GT1 ; update one record for ECR
"RTN","VPRHS",130,0)
 I ID'="" D  G GTQ
"RTN","VPRHS",131,0)
 . S VPRFN=$P(ID,";",2),ID=$P(ID,";")
"RTN","VPRHS",132,0)
 . S VPRE=+$O(^DDE("SDA",VPRNM,VPRFN,0))
"RTN","VPRHS",133,0)
 . I 'VPRE D ERROR("Missing Entity for "_VPRNM_" file #"_VPRFN) Q
"RTN","VPRHS",134,0)
 . S VPRI=VPRI+1,@VPRY@(VPRI)=$$GET1^DDE(VPRE,ID,.VPRQ,MTYPE,.VPRR)
"RTN","VPRHS",135,0)
 . S VPRJ=+$O(@VPRR@("A"),-1) ;#errors
"RTN","VPRHS",136,0)
 ;
"RTN","VPRHS",137,0)
 ; pre-load of whole container for patient
"RTN","VPRHS",138,0)
 S VPRX=$NA(^TMP("VPRHS",$J)),VPRZ=$NA(^TMP("VPRHS ERR",$J))
"RTN","VPRHS",139,0)
 S VPRFN=0 F  S VPRFN=$O(^DDE("SDA",VPRNM,VPRFN)) Q:VPRFN<1  D
"RTN","VPRHS",140,0)
 . S VPRE=$O(^DDE("SDA",VPRNM,VPRFN,0)) K @VPRX,@VPRZ
"RTN","VPRHS",141,0)
 . I 'VPRE D ERROR("Missing Entity for "_VPRNM_" file #"_VPRFN) Q
"RTN","VPRHS",142,0)
 . D GET^DDE(VPRE,,.VPRQ,MTYPE,.VPRMAX,.VPRX,.VPRZ)
"RTN","VPRHS",143,0)
 . S VPRN=0 F  S VPRN=$O(@VPRX@(VPRN)) Q:VPRN<1  S VPRI=VPRI+1,@VPRY@(VPRI)=@VPRX@(VPRN)
"RTN","VPRHS",144,0)
 . S VPRN=0 F  S VPRN=$O(@VPRZ@(VPRN)) Q:VPRN<1  S VPRJ=VPRJ+1,@VPRR@(VPRJ)=@VPRZ@(VPRN)
"RTN","VPRHS",145,0)
 K @VPRX,@VPRZ
"RTN","VPRHS",146,0)
 ;
"RTN","VPRHS",147,0)
GTQ ; return data and exit
"RTN","VPRHS",148,0)
 S @VPRY@(0)=VPRI,@VPRR@(0)=VPRJ
"RTN","VPRHS",149,0)
 Q
"RTN","VPRHS",150,0)
 ;
"RTN","VPRHS",151,0)
UPD(DFN,NAME,ID,VPRQ,MTYPE,VPRY,VPRR) ; -- return VistA data in @VPRY@(#)
"RTN","VPRHS",152,0)
 ; Used with patch update Entities to fix data cache
"RTN","VPRHS",153,0)
 N ICN,VPRNM,VPRPCH,VPRCNTR,VPRE,VPRI,VPRJ,VPRN,VPRX,VPRZ,VPRMAX
"RTN","VPRHS",154,0)
 ;
"RTN","VPRHS",155,0)
 ; define default return arrays
"RTN","VPRHS",156,0)
 S VPRY=$G(VPRY,$NA(^TMP("VPR GET",$J))),VPRI=0 K @VPRY
"RTN","VPRHS",157,0)
 S VPRR=$G(VPRR,$NA(^TMP("VPR ERR",$J))),VPRJ=0 K @VPRR
"RTN","VPRHS",158,0)
 ;
"RTN","VPRHS",159,0)
 ; validate/set up input parameters
"RTN","VPRHS",160,0)
 S DFN=$G(DFN),ICN=$P(DFN,";",2),DFN=+DFN
"RTN","VPRHS",161,0)
 I DFN<1!'$D(^DPT(DFN)) D ERROR("Invalid patient DFN") G UPQ
"RTN","VPRHS",162,0)
 I $P($G(^DPT(DFN,0)),U)["MERGING INTO" D ERROR($P($G(^DPT(DFN,0)),U)) G UPQ
"RTN","VPRHS",163,0)
 I $G(^DPT(DFN,-9)) D ERROR("MERGED INTO `"_$G(^DPT(DFN,-9))) G UPQ
"RTN","VPRHS",164,0)
 S VPRQ("patient")=DFN
"RTN","VPRHS",165,0)
 ;
"RTN","VPRHS",166,0)
 S VPRNM=$G(NAME) I VPRNM="" D ERROR("Undefined container") G UPQ
"RTN","VPRHS",167,0)
 S ID=$G(ID),MTYPE=$G(MTYPE,1) ;XML
"RTN","VPRHS",168,0)
 I $G(VPRQ("max")) S VPRMAX=VPRQ("max")
"RTN","VPRHS",169,0)
 ;
"RTN","VPRHS",170,0)
UP1 ; always return full Patient container
"RTN","VPRHS",171,0)
 I VPRNM="Patient" D  G UPQ
"RTN","VPRHS",172,0)
 . S VPRE=$O(^DDE("B","VPR PATIENT",0))
"RTN","VPRHS",173,0)
 . I 'VPRE D ERROR("Missing Entity VPR PATIENT file #2") Q
"RTN","VPRHS",174,0)
 . D GET^DDE(VPRE,DFN,.VPRQ,MTYPE,.VPRMAX,.VPRY,.VPRR)
"RTN","VPRHS",175,0)
 . S VPRI=+$O(@VPRY@("A"),-1) ;#results
"RTN","VPRHS",176,0)
 . S VPRJ=+$O(@VPRR@("A"),-1) ;#errors
"RTN","VPRHS",177,0)
 ;
"RTN","VPRHS",178,0)
 ; re-load container for patient
"RTN","VPRHS",179,0)
 S VPRX=$NA(^TMP("VPRHS",$J)),VPRZ=$NA(^TMP("VPRHS ERR",$J))
"RTN","VPRHS",180,0)
 S VPRPCH=$G(VPRQ("patch")) I VPRPCH="" D ERROR("Missing patch identifier") G UPQ
"RTN","VPRHS",181,0)
 S VPRCNTR="VPR "_VPRPCH_" "_$$UP^XLFSTR(VPRNM)
"RTN","VPRHS",182,0)
 S VPRNM=$E(VPRCNTR,1,$L(VPRCNTR)-1)
"RTN","VPRHS",183,0)
 F  S VPRNM=$O(^DDE("B",VPRNM)) Q:VPRNM=""  Q:VPRNM'[VPRCNTR  D
"RTN","VPRHS",184,0)
 . S VPRE=$O(^DDE("B",VPRNM,0)) K @VPRX,@VPRZ
"RTN","VPRHS",185,0)
 . I 'VPRE D ERROR("Missing Entity for "_VPRNM_" file #"_VPRFN) Q
"RTN","VPRHS",186,0)
 . D GET^DDE(VPRE,,.VPRQ,MTYPE,.VPRMAX,.VPRX,.VPRZ)
"RTN","VPRHS",187,0)
 . S VPRN=0 F  S VPRN=$O(@VPRX@(VPRN)) Q:VPRN<1  S VPRI=VPRI+1,@VPRY@(VPRI)=@VPRX@(VPRN)
"RTN","VPRHS",188,0)
 . S VPRN=0 F  S VPRN=$O(@VPRZ@(VPRN)) Q:VPRN<1  S VPRJ=VPRJ+1,@VPRR@(VPRJ)=@VPRZ@(VPRN)
"RTN","VPRHS",189,0)
 K @VPRX,@VPRZ
"RTN","VPRHS",190,0)
 ;
"RTN","VPRHS",191,0)
UPQ ;return data and exit
"RTN","VPRHS",192,0)
 S @VPRY@(0)=VPRI,@VPRR@(0)=VPRJ
"RTN","VPRHS",193,0)
 Q
"RTN","VPRHS",194,0)
 ;
"RTN","VPRHS",195,0)
ERROR(MSG) ; -- return error MSG
"RTN","VPRHS",196,0)
 S VPRJ=+$G(VPRJ)+1
"RTN","VPRHS",197,0)
 S @VPRR@(VPRJ)=$G(MSG)
"RTN","VPRHS",198,0)
 Q
"RTN","VPRHS",199,0)
 ;
"RTN","VPRHS",200,0)
ACTIVE ; -- find currently non-deceased, active patients
"RTN","VPRHS",201,0)
 N DFN S DFN=0
"RTN","VPRHS",202,0)
 F  S DFN=$O(^DPT(DFN)) Q:DFN<1  I '$G(^DPT(DFN,.35)) D
"RTN","VPRHS",203,0)
 . I $G(^DPT(DFN,.105)) D POST(DFN,"*") Q
"RTN","VPRHS",204,0)
 . I $O(^DPT(DFN,"S",DT)) D POST(DFN,"*")
"RTN","VPRHS",205,0)
 Q
"RTN","VPRHS",206,0)
 ;
"RTN","VPRHS",207,0)
APPTS(BEG,END,VPRY) ; -- return patients w/appointments
"RTN","VPRHS",208,0)
 N VPRX,VPRN,DFN,VPRDT,VPRI,VPRA
"RTN","VPRHS",209,0)
 S VPRY=$G(VPRY,$NA(^TMP("VPR PATS",$J))) K @VPRY
"RTN","VPRHS",210,0)
 I '$G(BEG) D   ;default = tomorrow, if not passed in
"RTN","VPRHS",211,0)
 . S BEG=$$FMADD^XLFDT(DT,1),END=BEG
"RTN","VPRHS",212,0)
 ; find patients with appointments
"RTN","VPRHS",213,0)
 S END=$G(END,BEG),VPRX(1)=BEG_";"_END
"RTN","VPRHS",214,0)
 S VPRX("SORT")="P",VPRX("FLDS")=1,VPRX(3)="R;I;NT"
"RTN","VPRHS",215,0)
 S VPRI=$$SDAPI^SDAMA301(.VPRX),VPRN=0 K VPRX
"RTN","VPRHS",216,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",DFN)) Q:DFN<1  S VPRX(DFN)=""
"RTN","VPRHS",217,0)
 ; find patients scheduled for admission
"RTN","VPRHS",218,0)
 S VPRDT=0 F  S VPRDT=$O(^DGS(41.1,"C",VPRDT)) Q:VPRDT<1!(VPRDT>END)  D
"RTN","VPRHS",219,0)
 . S VPRI=0 F  S VPRI=$O(^DGS(41.1,"C",VPRDT,VPRI)) Q:VPRI<1  D
"RTN","VPRHS",220,0)
 .. S VPRA=$G(^DGS(41.1,VPRI))
"RTN","VPRHS",221,0)
 .. Q:$P(VPRA,U,13)  Q:$P(VPRA,U,17)  ;cancelled or admitted
"RTN","VPRHS",222,0)
 .. S DFN=+VPRA S:DFN VPRX(DFN)=""
"RTN","VPRHS",223,0)
 ; build return array
"RTN","VPRHS",224,0)
 S (DFN,VPRN)=0
"RTN","VPRHS",225,0)
 F  S DFN=$O(VPRX(DFN)) Q:DFN<1  S VPRN=VPRN+1,@VPRY@(VPRN)=DFN
"RTN","VPRHS",226,0)
 S @VPRY@(0)=VPRN
"RTN","VPRHS",227,0)
 K ^TMP($J,"SDAMA301")
"RTN","VPRHS",228,0)
 Q
"RTN","VPRHS",229,0)
 ;
"RTN","VPRHS",230,0)
INPTS(VPRY) ; -- return current inpatients
"RTN","VPRHS",231,0)
 N DGPM,DFN,VPRN
"RTN","VPRHS",232,0)
 S VPRY=$G(VPRY,$NA(^TMP("VPR PATS",$J))),VPRN=0 K @VPRY
"RTN","VPRHS",233,0)
 S DGPM=0 F  S DGPM=$O(^DPT("ACA",DGPM)) Q:DGPM<1  D
"RTN","VPRHS",234,0)
 . S DFN=0 F  S DFN=$O(^DPT("ACA",DGPM,DFN)) Q:DFN<1  S VPRN=VPRN+1,@VPRY@(VPRN)=DFN
"RTN","VPRHS",235,0)
 S @VPRY@(0)=VPRN
"RTN","VPRHS",236,0)
 Q
"RTN","VPRP16")
0^3^B4532811^n/a
"RTN","VPRP16",1,0)
VPRP16 ;SLC/MKB -- SDA utilities for patch 16 ;11/8/18  14:11
"RTN","VPRP16",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**16**;Sep 01, 2011;Build 3
"RTN","VPRP16",3,0)
 ;;Per VHA Directive 6402, this routine should not be modified.
"RTN","VPRP16",4,0)
 ;
"RTN","VPRP16",5,0)
 ; External References          DBIA#
"RTN","VPRP16",6,0)
 ; -------------------          -----
"RTN","VPRP16",7,0)
 ; %ZTLOAD                      10063
"RTN","VPRP16",8,0)
 ; XLFDT                        10103
"RTN","VPRP16",9,0)
 ; XPDUTL                       10141
"RTN","VPRP16",10,0)
 ; XUPROD                        4440
"RTN","VPRP16",11,0)
 ;
"RTN","VPRP16",12,0)
 ;
"RTN","VPRP16",13,0)
POST ; -- postinit tasks
"RTN","VPRP16",14,0)
 D TASK
"RTN","VPRP16",15,0)
 Q
"RTN","VPRP16",16,0)
 ;
"RTN","VPRP16",17,0)
TASK ; -- task job to clean up ^VPR
"RTN","VPRP16",18,0)
 I '$$PROD^XUPROD D MES^XPDUTL("No task queued: not a production system") Q
"RTN","VPRP16",19,0)
 I '$D(^VPR("AVPR")),'$D(^VPR("ANEW")) D MES^XPDUTL("No task queued: no entries in update lists.") Q
"RTN","VPRP16",20,0)
 ;
"RTN","VPRP16",21,0)
 N ZTRTN,ZTDTH,ZTDESC,ZTIO,ZTSAVE,ZTUCI,ZTCPU,ZTPRI,ZTKIL,ZTSYNC,ZTSK
"RTN","VPRP16",22,0)
 S ZTRTN="LIST^VPRP16",ZTDTH=$$NOW^XLFDT,ZTIO=""
"RTN","VPRP16",23,0)
 S ZTDESC="Remove test patients from VPR update lists"
"RTN","VPRP16",24,0)
 D ^%ZTLOAD I '$G(ZTSK) D MES^XPDUTL("Unable to queue clean up task.") Q
"RTN","VPRP16",25,0)
 D MES^XPDUTL("Task #"_ZTSK_" was queued to clean up ^VPR")
"RTN","VPRP16",26,0)
 Q
"RTN","VPRP16",27,0)
 ;
"RTN","VPRP16",28,0)
LIST ; -- clean up ^VPR update lists for TEST and MERGED patients
"RTN","VPRP16",29,0)
 N DFN,SEQ,TYPE,ID
"RTN","VPRP16",30,0)
 ;
"RTN","VPRP16",31,0)
 S DFN=0 F  S DFN=$O(^DPT(DFN)) Q:DFN<1  D
"RTN","VPRP16",32,0)
 . I '$D(^VPR(1,2,DFN)) Q  ;not subscribed
"RTN","VPRP16",33,0)
 . I '$$TESTPAT^VADPT(DFN),'$$MERGED^VPRHS(DFN) Q  ;ok
"RTN","VPRP16",34,0)
 . ; remove entries for test or merged patients
"RTN","VPRP16",35,0)
 . D ANEW,AVPR
"RTN","VPRP16",36,0)
 Q
"RTN","VPRP16",37,0)
 ;
"RTN","VPRP16",38,0)
ANEW ; ANEW = new subscribe
"RTN","VPRP16",39,0)
 S SEQ=$G(^VPR(1,2,DFN,"ANEW"))
"RTN","VPRP16",40,0)
 I SEQ K ^VPR("ANEW",SEQ,DFN),^VPR(1,2,DFN,"ANEW")
"RTN","VPRP16",41,0)
 Q
"RTN","VPRP16",42,0)
 ;
"RTN","VPRP16",43,0)
AVPR ; AVPR = data updates
"RTN","VPRP16",44,0)
 S TYPE="" F  S TYPE=$O(^VPR(1,2,DFN,"AVPR",TYPE)) Q:TYPE=""  D
"RTN","VPRP16",45,0)
 . S ID="" F  S ID=$O(^VPR(1,2,DFN,"AVPR",TYPE,ID)) Q:ID=""  S SEQ=+$G(^(ID)) D
"RTN","VPRP16",46,0)
 .. K ^VPR("AVPR",SEQ,DFN)
"RTN","VPRP16",47,0)
 .. K ^VPR(1,2,DFN,"AVPR",TYPE,ID)
"RTN","VPRP16",48,0)
 Q
"RTN","VPRSDA")
0^2^B243968845^B238403489
"RTN","VPRSDA",1,0)
VPRSDA ;SLC/MKB -- SDA utilities ;10/25/18  15:29
"RTN","VPRSDA",2,0)
 ;;1.0;VIRTUAL PATIENT RECORD;**8,10,16**;Sep 01, 2011;Build 3
"RTN","VPRSDA",3,0)
 ;;Per VHA Directive 6402, this routine should not be modified.
"RTN","VPRSDA",4,0)
 ;
"RTN","VPRSDA",5,0)
 ; External References          DBIA#
"RTN","VPRSDA",6,0)
 ; -------------------          -----
"RTN","VPRSDA",7,0)
 ; ^AUPNPROB                     5703
"RTN","VPRSDA",8,0)
 ; ^AUPNVSIT                     2028
"RTN","VPRSDA",9,0)
 ; ^DDE                          7008
"RTN","VPRSDA",10,0)
 ; ^DGPM                         1865
"RTN","VPRSDA",11,0)
 ; ^DIC(42                      10039
"RTN","VPRSDA",12,0)
 ; ^DPT                         10035
"RTN","VPRSDA",13,0)
 ; ^LAB(60                      10054
"RTN","VPRSDA",14,0)
 ; ^LR                            525
"RTN","VPRSDA",15,0)
 ; ^OR(100                       5771
"RTN","VPRSDA",16,0)
 ; ^ORD(100.98                   6982
"RTN","VPRSDA",17,0)
 ; ^ORD(101.43                   2843
"RTN","VPRSDA",18,0)
 ; ^SC                          10040
"RTN","VPRSDA",19,0)
 ; ^SCE("AVSIT"                  2045
"RTN","VPRSDA",20,0)
 ; ^SRF                          5675
"RTN","VPRSDA",21,0)
 ; ^TIU(8925.1                   5677
"RTN","VPRSDA",22,0)
 ; %DT                          10003
"RTN","VPRSDA",23,0)
 ; DILFD                         2055
"RTN","VPRSDA",24,0)
 ; DIQ                           2056
"RTN","VPRSDA",25,0)
 ; ETSLNC                        6731
"RTN","VPRSDA",26,0)
 ; ETSRXN                        6758
"RTN","VPRSDA",27,0)
 ; GMRCGUIB                      2980
"RTN","VPRSDA",28,0)
 ; GMRVUT0, ^UTILITY($J          1446
"RTN","VPRSDA",29,0)
 ; GMVGETVT                      5047
"RTN","VPRSDA",30,0)
 ; GMVUTL                        5046
"RTN","VPRSDA",31,0)
 ; ICDEX                         5747
"RTN","VPRSDA",32,0)
 ; LEXTRAN                       4912
"RTN","VPRSDA",33,0)
 ; LR7OSUM, ^TMP("LR"*,$J        2766
"RTN","VPRSDA",34,0)
 ; LR7OU1                        2955
"RTN","VPRSDA",35,0)
 ; LRPXAPIU                      4246
"RTN","VPRSDA",36,0)
 ; ORX8                          3071
"RTN","VPRSDA",37,0)
 ; PXAPI, ^TMP("PXKENC",$J       1894
"RTN","VPRSDA",38,0)
 ; RMIMRP                        4745
"RTN","VPRSDA",39,0)
 ; SCAPMC                        1916
"RTN","VPRSDA",40,0)
 ; SDAMA301, ^TMP($J             4433
"RTN","VPRSDA",41,0)
 ; SDOE                          2546
"RTN","VPRSDA",42,0)
 ; SDUTL3                        1252
"RTN","VPRSDA",43,0)
 ; TIULQ                         2693
"RTN","VPRSDA",44,0)
 ; VADPT                        10061
"RTN","VPRSDA",45,0)
 ; XLFNAME                       3065
"RTN","VPRSDA",46,0)
 ;
"RTN","VPRSDA",47,0)
INTDATE(X) ; -- Return internal form of date X
"RTN","VPRSDA",48,0)
 N %DT,Y
"RTN","VPRSDA",49,0)
 S %DT="TSX" D ^%DT
"RTN","VPRSDA",50,0)
 Q Y
"RTN","VPRSDA",51,0)
 ;
"RTN","VPRSDA",52,0)
DATE(X,DTO) ; -- return FM date X as SDA Timestamp
"RTN","VPRSDA",53,0)
 N D,T,Y
"RTN","VPRSDA",54,0)
 S X=$G(X) I X'?7N.1".".7N Q ""
"RTN","VPRSDA",55,0)
 S D=$P(X,"."),T=$P(X,".",2)
"RTN","VPRSDA",56,0)
 ; validate date
"RTN","VPRSDA",57,0)
 I '$$VALID(D) Q ""
"RTN","VPRSDA",58,0)
 S Y=(1700+$E(D,1,3))_"-"_$E(D,4,5)_"-"_$E(D,6,7)
"RTN","VPRSDA",59,0)
 ; if imprecise, add month or day of 01
"RTN","VPRSDA",60,0)
 F I=2,3 I $P(Y,"-",I)="00" S $P(Y,"-",I)="01"
"RTN","VPRSDA",61,0)
 I $G(DTO) Q Y  ;date only
"RTN","VPRSDA",62,0)
 ;
"RTN","VPRSDA",63,0)
 ; validate T = time
"RTN","VPRSDA",64,0)
 I T=24 S T=235959 ;for SDA
"RTN","VPRSDA",65,0)
 S:$L(T)<6 T=$E((T_"000000"),1,6)  ;pad the time to 6 digits
"RTN","VPRSDA",66,0)
 I $E(T,1,2)>23 S T="000000"       ;invalid hours >> remove time
"RTN","VPRSDA",67,0)
 I $E(T,3,4)>59 S $E(T,3,6)="0000" ;strip invalid minutes/seconds
"RTN","VPRSDA",68,0)
 I $E(T,5,6)>59 S $E(T,5,6)="00"   ;strip invalid seconds
"RTN","VPRSDA",69,0)
 S Y=Y_"T"_$E(T,1,2)_":"_$E(T,3,4)_":"_$E(T,5,6)
"RTN","VPRSDA",70,0)
 Q Y
"RTN","VPRSDA",71,0)
 ;
"RTN","VPRSDA",72,0)
VALID(X) ; -- returns 1 or 0, if valid FM date
"RTN","VPRSDA",73,0)
 N %DT,Y S %DT="",X=$G(X) D ^%DT
"RTN","VPRSDA",74,0)
 I X["." S X=$P(X,".") ;ck date only
"RTN","VPRSDA",75,0)
 I Y<1 Q 0
"RTN","VPRSDA",76,0)
 ; check if out of HL7 range
"RTN","VPRSDA",77,0)
 I (Y<1410102)!(Y>4141015) Q 0
"RTN","VPRSDA",78,0)
 Q 1
"RTN","VPRSDA",79,0)
 ;
"RTN","VPRSDA",80,0)
NAMECOMP(NAME) ; -- return name as string of component pieces
"RTN","VPRSDA",81,0)
 ; NAME -> FAMILY^GIVEN^MIDDLE^SUFFIX
"RTN","VPRSDA",82,0)
 D NAMECOMP^XLFNAME(.NAME)
"RTN","VPRSDA",83,0)
 N I,Y S Y=$G(NAME("FAMILY"))
"RTN","VPRSDA",84,0)
 F I="GIVEN","MIDDLE","SUFFIX" S Y=Y_U_$G(NAME(I))
"RTN","VPRSDA",85,0)
 Q Y
"RTN","VPRSDA",86,0)
 ;
"RTN","VPRSDA",87,0)
WP(ORIFN,ID) ; -- return a WP value from an order response as a string
"RTN","VPRSDA",88,0)
 N DA,I,X,Y S Y=""
"RTN","VPRSDA",89,0)
 S DA=+$O(^OR(100,+$G(ORIFN),4.5,"ID",ID,0))
"RTN","VPRSDA",90,0)
 S I=0 F  S I=$O(^OR(100,+$G(ORIFN),4.5,DA,2,I)) Q:'I  S X=$G(^(I,0)) D
"RTN","VPRSDA",91,0)
 . I '$L(Y) Q:(X="")!(X?1." ")  S Y=X Q
"RTN","VPRSDA",92,0)
 . I $E(X)=" " S Y=Y_$C(13,10)_X Q
"RTN","VPRSDA",93,0)
 . S Y=Y_$S($E(Y,$L(Y))=" ":"",1:" ")_X
"RTN","VPRSDA",94,0)
 Q Y
"RTN","VPRSDA",95,0)
 ;
"RTN","VPRSDA",96,0)
CODED ; -- ck Code Table ID for internal^external format
"RTN","VPRSDA",97,0)
 Q:$G(ID)=""  Q:$L(ID,"^")>1  ;ok
"RTN","VPRSDA",98,0)
 N X,NM S NM=ID
"RTN","VPRSDA",99,0)
 I $G(FILE),$G(FIELD) D
"RTN","VPRSDA",100,0)
 . S X=$$EXTERNAL^DILFD(FILE,FIELD,,ID)
"RTN","VPRSDA",101,0)
 . S:X'="" NM=X
"RTN","VPRSDA",102,0)
 S ID=ID_U_NM
"RTN","VPRSDA",103,0)
 Q
"RTN","VPRSDA",104,0)
 ;
"RTN","VPRSDA",105,0)
CODE(IEN,FILE,CSYS) ; -- find CSYS code for IEN in FILE
"RTN","VPRSDA",106,0)
 ; CSYS can be string of abbreviations to look for, in order
"RTN","VPRSDA",107,0)
 N FLD,VPRC,SFN,S,SYS,NAMES,IENS,SFN1,I,X,Y S Y=""
"RTN","VPRSDA",108,0)
 S FLD=$$FLDNUM^DILFD(FILE,"CODING SYSTEM") Q:'FLD ""
"RTN","VPRSDA",109,0)
 D GETS^DIQ(FILE,IEN_",",FLD_"*","NR","VPRC")
"RTN","VPRSDA",110,0)
 S SFN=+$O(VPRC(0)) Q:'SFN ""  ;Sub-file# = Coding System multiple
"RTN","VPRSDA",111,0)
 F S=1:1 S SYS=$P(CSYS,U,S) Q:SYS=""  D  Q:$L(Y)
"RTN","VPRSDA",112,0)
 . S NAMES=$S(SYS="RXN":"RxNorm^RXNORM",SYS="NDF":"NDF-RT^NDFRT^NDF",SYS="SCT":"SNOMED CT^SNOMED-CT^SCT",SYS="LNC":"LOINC^LNC",SYS="UNI":"UNII^UNI",1:SYS)
"RTN","VPRSDA",113,0)
 . S IENS="" F  S IENS=$O(VPRC(SFN,IENS)) Q:IENS=""  D  Q:$L(Y)
"RTN","VPRSDA",114,0)
 .. S X=$G(VPRC(SFN,IENS,"CODING SYSTEM")) Q:X=""  Q:NAMES'[X
"RTN","VPRSDA",115,0)
 .. S SFN1=$O(VPRC(SFN)),I=$O(VPRC(SFN1,""))
"RTN","VPRSDA",116,0)
 .. S:I Y=$G(VPRC(SFN1,I,"CODE")) ;first code for system
"RTN","VPRSDA",117,0)
 . I $L(Y) S Y=Y_U_$$DESC(Y)_U_$P(NAMES,U)
"RTN","VPRSDA",118,0)
 Q Y
"RTN","VPRSDA",119,0)
 ;
"RTN","VPRSDA",120,0)
DESC(CODE) ; -- called from CODE, to return coding system text
"RTN","VPRSDA",121,0)
 ; Expects all the variables used in CODE()
"RTN","VPRSDA",122,0)
 N X,Y,LEX S Y=""
"RTN","VPRSDA",123,0)
 I SYS="SCT" D
"RTN","VPRSDA",124,0)
 . S X=$$CODE^LEXTRAN(CODE,"SCT",DT)
"RTN","VPRSDA",125,0)
 . S:X>0 Y=$G(LEX("P")) ;preferred term
"RTN","VPRSDA",126,0)
 I SYS="RXN",$L($T(CSDATA^ETSRXN)) D
"RTN","VPRSDA",127,0)
 . S X=$$CSDATA^ETSRXN(CODE,"RXN",DT,.LEX)
"RTN","VPRSDA",128,0)
 . S:X>0 Y=$P($G(LEX("LEX",1)),U,2)
"RTN","VPRSDA",129,0)
 I SYS="LNC",$L($T(GETNAME^ETSLNC)) D
"RTN","VPRSDA",130,0)
 . S X=$$GETNAME^ETSLNC(CODE,"C",.LEX)
"RTN","VPRSDA",131,0)
 . S:X>0 Y=$G(LEX("LONGNAME"))
"RTN","VPRSDA",132,0)
 I '$L($G(Y)) S Y=$$GET1^DIQ(FILE,IEN_",",.01)
"RTN","VPRSDA",133,0)
 Q Y
"RTN","VPRSDA",134,0)
 ;
"RTN","VPRSDA",135,0)
CONSNAME(IEN) ; -- return full display name using fields
"RTN","VPRSDA",136,0)
 ; To Service (#1) & Procedure/Request Type (#4)
"RTN","VPRSDA",137,0)
 N X,Y S X=$G(VPRCONS(0))
"RTN","VPRSDA",138,0)
 S Y=$P(X,U,5)
"RTN","VPRSDA",139,0)
 I $L($P(X,U,8)) S Y=Y_" "_$P(X,U,8)_" Proc"
"RTN","VPRSDA",140,0)
 E  S Y=Y_" Cons"
"RTN","VPRSDA",141,0)
 Q Y
"RTN","VPRSDA",142,0)
 ;
"RTN","VPRSDA",143,0)
PROVDX(IEN) ; -- return full Consult ProvDx string, or null
"RTN","VPRSDA",144,0)
 N X,Y,VPRDX S X=$G(VPRCONS(30.1)),Y=""
"RTN","VPRSDA",145,0)
 I $L(X,U)<3 S DDEOUT=1 Q ""
"RTN","VPRSDA",146,0)
 I $E(X)=U S DDEOUT=1 Q ""
"RTN","VPRSDA",147,0)
 S:$P(X,U,2)="" $P(X,U,2)=DT
"RTN","VPRSDA",148,0)
 S:$P(X,U,3)="" $P(X,U,3)="ICD"
"RTN","VPRSDA",149,0)
 I $$ICDD^ICDEX($P(X,U),.VPRDX,$P(X,U,2),$P(X,U,3))>0 D
"RTN","VPRSDA",150,0)
 . S Y=$P(X,U)_U_VPRDX(1)_U_$$SNAM^ICDEX($$SYS^ICDEX($P(X,U,3)))
"RTN","VPRSDA",151,0)
 Q Y
"RTN","VPRSDA",152,0)
 ;
"RTN","VPRSDA",153,0)
PROBCMT(IEN) ; -- return list of comments in
"RTN","VPRSDA",154,0)
 ; DLIST(#) = id ^ date ^ user ^ type ^ facility ^ text
"RTN","VPRSDA",155,0)
 N I,J,N,X,FAC S N=0
"RTN","VPRSDA",156,0)
 S I=0 F  S I=$O(^AUPNPROB(IEN,11,I)) Q:I<1  S FAC=$G(^(I,0)) D
"RTN","VPRSDA",157,0)
 . S J=0 F  S J=$O(^AUPNPROB(IEN,11,I,11,J)) Q:J<1  S X=$G(^(J,0)) D
"RTN","VPRSDA",158,0)
 .. Q:$P(X,U,4)'="A"
"RTN","VPRSDA",159,0)
 .. S Y=$P(X,U,5)_U_$P(X,U,6)_U_U_FAC_U_$P(X,U,3)
"RTN","VPRSDA",160,0)
 .. S N=N+1,DLIST(N)=J_","_I_","_IEN_U_Y
"RTN","VPRSDA",161,0)
 Q
"RTN","VPRSDA",162,0)
 ;
"RTN","VPRSDA",163,0)
SCTTEXT(CODE,IEN) ; -- get Preferred Text for SCT Code
"RTN","VPRSDA",164,0)
 N Y,GMPDT,LEX,LEXY S Y=""
"RTN","VPRSDA",165,0)
 S GMPDT=$P($G(^AUPNPROB(IEN,0)),U,8) S:'GMPDT GMPDT=DT
"RTN","VPRSDA",166,0)
 S LEXY=$$CODE^LEXTRAN(CODE,"SCT",GMPDT)
"RTN","VPRSDA",167,0)
 S:LEXY>0 Y=$G(LEX("P")) ;preferred term
"RTN","VPRSDA",168,0)
 Q Y
"RTN","VPRSDA",169,0)
 ;
"RTN","VPRSDA",170,0)
POVNARR() ; -- build Original Text for POV
"RTN","VPRSDA",171,0)
 N NARR,MOD,Y S Y=""
"RTN","VPRSDA",172,0)
 S NARR=$G(VPRPOV("PROVIDER NARRATIVE")),MOD=$G(VPRPOV("MODIFIER"))
"RTN","VPRSDA",173,0)
 S:NARR Y=$$GET1^DIQ(9999999.27,NARR_",",.01)
"RTN","VPRSDA",174,0)
 I $L(MOD),$L(Y) S Y=$$EXTERNAL^DILFD(9000010.07,.06,,MOD)_" "_Y
"RTN","VPRSDA",175,0)
 Q Y
"RTN","VPRSDA",176,0)
 ;
"RTN","VPRSDA",177,0)
AD(ID) ; -- get info for one Adv Directive
"RTN","VPRSDA",178,0)
 K VPRTIU S ID=$G(ID)
"RTN","VPRSDA",179,0)
 D EXTRACT^TIULQ(+ID,"VPRTIU",,".01:.05;1201;1212;1301;1302",,1,"I")
"RTN","VPRSDA",180,0)
 S:'DFN DFN=+$G(VPRTIU(+ID,.02,"I"))
"RTN","VPRSDA",181,0)
 I DFN,'$D(^TMP("TIUPPCV",$J)) D  ;one, do query
"RTN","VPRSDA",182,0)
 . N DLIST,I,X
"RTN","VPRSDA",183,0)
 . D ADVDIR^VPRSDAQ
"RTN","VPRSDA",184,0)
 . S I=0 F  S I=$O(DLIST(I)) Q:I<1  S X=$G(DLIST(I)) I +X=+ID S ID=X Q
"RTN","VPRSDA",185,0)
 S VPRADV=ID,ID=+ID
"RTN","VPRSDA",186,0)
 Q
"RTN","VPRSDA",187,0)
 ;
"RTN","VPRSDA",188,0)
TIULNC(IEN) ; -- convert 8925.1 IEN to 8926.1 IEN
"RTN","VPRSDA",189,0)
 ;  Returns   DATA = code ^ [description] ^ system
"RTN","VPRSDA",190,0)
 ;          TIUTTL = local title name
"RTN","VPRSDA",191,0)
 N TIUNATL S IEN=+$G(IEN),DATA=""
"RTN","VPRSDA",192,0)
 ; VPRNATL set in VPR DOCUMENT EXTENSION
"RTN","VPRSDA",193,0)
 S TIUNATL=$S($G(VPRNATL):VPRNATL,1:+$G(^TIU(8925.1,IEN,15)))
"RTN","VPRSDA",194,0)
 S TIUTTL=$P($G(^TIU(8925.1,IEN,0)),U)
"RTN","VPRSDA",195,0)
 ; if no national mapping, return local title
"RTN","VPRSDA",196,0)
 I 'TIUNATL D  Q
"RTN","VPRSDA",197,0)
 . I $P(TIUTTL," ")="LR" D  Q:$L(DATA)
"RTN","VPRSDA",198,0)
 .. N TTL S TTL=$E($P(TIUTTL," ",2),1,2)
"RTN","VPRSDA",199,0)
 .. S DATA=$S(TTL="AU":"18743-5^AUTOPSY REPORT",TTL="CY":"26438-2^CYTOLOGY STUDIES",TTL="EL":"50668-3^MICROSCOPY STUDIES",TTL="SU":"27898-6^PATHOLOGY STUDIES",1:"")
"RTN","VPRSDA",200,0)
 .. I $L(DATA) S DATA=DATA_"^LOINC" Q
"RTN","VPRSDA",201,0)
 . S DATA=IEN_U_TIUTTL_"^VA8925.1"
"RTN","VPRSDA",202,0)
 ; get LOINC or VUID
"RTN","VPRSDA",203,0)
 S IEN=TIUNATL,DATA=$$CODE(IEN,8926.1,"LNC")
"RTN","VPRSDA",204,0)
 I DATA="" S DATA=$$VUID^VPRD(IEN,8926.1) S:DATA DATA=DATA_"^^VHAT"
"RTN","VPRSDA",205,0)
 ; else default = 8926.1 ien as per usual
"RTN","VPRSDA",206,0)
 Q
"RTN","VPRSDA",207,0)
 ;
"RTN","VPRSDA",208,0)
TIUTYPE(IEN) ; -- return code^name for document type/class
"RTN","VPRSDA",209,0)
 N X,Y S Y=""
"RTN","VPRSDA",210,0)
 S X=$$CATG^VPRDTIU(IEN) I X="PN" D
"RTN","VPRSDA",211,0)
 . N NATL,SVC
"RTN","VPRSDA",212,0)
 . S NATL=+$G(^TIU(8925.1,+$G(IEN),15)) Q:'NATL
"RTN","VPRSDA",213,0)
 . S SVC=$$GET1^DIQ(8926.1,NATL_",",.07) Q:SVC=""
"RTN","VPRSDA",214,0)
 . I SVC["HISTORY & PHYSICAL"!(SVC["HISTORY AND PHYSICAL") S Y="HP^History & Physical" Q
"RTN","VPRSDA",215,0)
 . I SVC["COMPENSATION & PENSION" S Y="CM^Compensation & Pension" Q
"RTN","VPRSDA",216,0)
 S:'$L(Y) Y=X_U_$$TYPE^VPRDJ08(X)
"RTN","VPRSDA",217,0)
 Q Y
"RTN","VPRSDA",218,0)
 ;
"RTN","VPRSDA",219,0)
TIUSIG() ; -- return date of authorization
"RTN","VPRSDA",220,0)
 N Y S Y=""
"RTN","VPRSDA",221,0)
 I $G(VPRTIU(DIEN,1501,"I")) S Y=VPRTIU(DIEN,1501,"I") ;Signed
"RTN","VPRSDA",222,0)
 I $G(VPRTIU(DIEN,1507,"I")) S Y=VPRTIU(DIEN,1507,"I") ;Co-signed
"RTN","VPRSDA",223,0)
 I $G(VPRTIU(DIEN,1606,"I")) S Y=VPRTIU(DIEN,1606,"I") ;Admin Closure
"RTN","VPRSDA",224,0)
 Q Y
"RTN","VPRSDA",225,0)
 ;
"RTN","VPRSDA",226,0)
TIUCOMP(IEN,STS) ; -- return 1 or 0, if document is complete
"RTN","VPRSDA",227,0)
 S IEN=+$G(IEN) I IEN<1 Q ""
"RTN","VPRSDA",228,0)
 S STS=+$G(STS) I STS<1 D
"RTN","VPRSDA",229,0)
 . N VPRTIU D EXTRACT^TIULQ(IEN,"VPRTIU",,.05,,,"I")
"RTN","VPRSDA",230,0)
 . S STS=+$G(VPRTIU(IEN,.05,"I"))
"RTN","VPRSDA",231,0)
 N Y S Y=$S(STS=7:1,STS=8:1,1:0)
"RTN","VPRSDA",232,0)
 Q Y
"RTN","VPRSDA",233,0)
 ;
"RTN","VPRSDA",234,0)
LRTIU(IDT,SUB) ; -- return TIU ien of lab report
"RTN","VPRSDA",235,0)
 N I,IEN,X,Y S IDT=$G(IDT),SUB=$G(SUB)
"RTN","VPRSDA",236,0)
 S Y=IDT_";"_SUB
"RTN","VPRSDA",237,0)
 S I=0 F  S I=$O(^LR(LRDFN,SUB,IDT,.05,I)) Q:I<1  S IEN=+$P($G(^(I,0)),U,2),X=+$$GET1^DIQ(8925,IEN,.05,"I") I (X=7)!(X=8) S Y=IEN_";TIU" Q
"RTN","VPRSDA",238,0)
 Q Y
"RTN","VPRSDA",239,0)
 ;
"RTN","VPRSDA",240,0)
LRAP1(ID) ; -- parse ID for AP,MI report
"RTN","VPRSDA",241,0)
 ; Returns DIFN, VPRSUB, updated ID, LR0=^LR(LRDFN,SUB,IDT,0)
"RTN","VPRSDA",242,0)
 S ID=$G(ID),VPRSUB=$P(ID,"~",2),ID=$P(ID,"~")
"RTN","VPRSDA",243,0)
 I VPRSUB D  ;sub-file#
"RTN","VPRSDA",244,0)
 . S DIFN=VPRSUB,VPRSUB=$S(DIFN=63.05:"MI",DIFN=63.09:"CY",DIFN=63.02:"EM",DIFN=63.08:"SP",1:"AP")
"RTN","VPRSDA",245,0)
 E  S DIFN=$S(VPRSUB="MI":63.05,VPRSUB="CY":63.09,VPRSUB="EM":63.02,VPRSUB="SP":63.08,1:0)
"RTN","VPRSDA",246,0)
 I DIFN<1 S DDEOUT=1 Q
"RTN","VPRSDA",247,0)
 S:'$G(LRDFN) LRDFN=+$P(ID,",",2)
"RTN","VPRSDA",248,0)
 S LR0=$G(^LR(LRDFN,VPRSUB,+ID,0))
"RTN","VPRSDA",249,0)
 Q
"RTN","VPRSDA",250,0)
 ;
"RTN","VPRSDA",251,0)
LRPT(SUB,IDT) ; -- return report text in WP(), expects DFN
"RTN","VPRSDA",252,0)
 N I,DATE,NAME,VPRS,VPRY,X,LRAU
"RTN","VPRSDA",253,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","VPRSDA",254,0)
 S DATE=9999999-+$G(IDT),NAME=$S(SUB="EM":"EM",1:$$NAME^VPRDLRA(SUB)),VPRS(NAME)=""
"RTN","VPRSDA",255,0)
 D EN^LR7OSUM(.VPRY,DFN,DATE,DATE,,,.VPRS)
"RTN","VPRSDA",256,0)
 S I=+$G(^TMP("LRH",$J,NAME)) ;LRH=header
"RTN","VPRSDA",257,0)
 F  S I=$O(^TMP("LRC",$J,I)) Q:I<1  S X=$G(^(I,0)) Q:X?1."="  S WP(I)=X
"RTN","VPRSDA",258,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","VPRSDA",259,0)
 Q
"RTN","VPRSDA",260,0)
 ;
"RTN","VPRSDA",261,0)
LRSLT ; -- get Entity for LabOrder Result
"RTN","VPRSDA",262,0)
 ; Returns ENTITY, VPRSUB, DATA
"RTN","VPRSDA",263,0)
 S:'$D(ORPK) ORPK=$$PKGID^ORX8(DIEN)
"RTN","VPRSDA",264,0)
 I $L(ORPK,";")<5 S DDEOUT=1 Q  ;no results yet
"RTN","VPRSDA",265,0)
 S VPRSUB=$P(ORPK,";",4),VALUE=$P(ORPK,";",5)_","_+$G(LRDFN)
"RTN","VPRSDA",266,0)
 S ENTITY="VPR LR"_VPRSUB_" RESULT"
"RTN","VPRSDA",267,0)
 S ENTITY=+$O(^DDE("B",ENTITY,0)) I ENTITY<1 S DDEOUT=1 Q
"RTN","VPRSDA",268,0)
 S DATA=+$P($G(ORIT),U,3) ;#60 ien ordered
"RTN","VPRSDA",269,0)
 Q
"RTN","VPRSDA",270,0)
 ;
"RTN","VPRSDA",271,0)
LRDFN(ORIFN) ; -- set up LRDFN for Lab Order
"RTN","VPRSDA",272,0)
 I 'DFN,$G(ORIFN) S DFN=+$$GET1^DIQ(100,+ORIFN_",",.02,"I")
"RTN","VPRSDA",273,0)
 S LRDFN=$$LRDFN^LRPXAPIU(DFN)
"RTN","VPRSDA",274,0)
 Q
"RTN","VPRSDA",275,0)
 ;
"RTN","VPRSDA",276,0)
LRCH(TEST) ; -- builds DLIST(#) of result nodes for TEST
"RTN","VPRSDA",277,0)
 ; called from ResultItems in VPR LRCH RESULT, expects DIEN
"RTN","VPRSDA",278,0)
 N T,X S TEST=+$G(TEST)
"RTN","VPRSDA",279,0)
 D EXPAND^LR7OU1(TEST,.DLIST)
"RTN","VPRSDA",280,0)
 S T=0 F  S T=$O(DLIST(T)) Q:T<1  D
"RTN","VPRSDA",281,0)
 . S X=$P($G(^LAB(60,T,0)),U,3) I X'="O",X'="B" Q  ;not displayable
"RTN","VPRSDA",282,0)
 . ; DLIST(60 ien) = CH data node#,LRIDT,LRDFN
"RTN","VPRSDA",283,0)
 . S DLIST(T)=$$LRDN^LRPXAPIU(T)_","_DIEN
"RTN","VPRSDA",284,0)
 Q
"RTN","VPRSDA",285,0)
 ;
"RTN","VPRSDA",286,0)
ORDG(DG) ; -- return ien^name^VA100.98 for a DG abbreviation
"RTN","VPRSDA",287,0)
 N X,Y S X=$O(^ORD(100.98,"B",DG,0)),Y=""
"RTN","VPRSDA",288,0)
 S:X Y=X_U_$P(^ORD(100.98,X,0),U)_"^VA100.98"
"RTN","VPRSDA",289,0)
 Q Y
"RTN","VPRSDA",290,0)
 ;
"RTN","VPRSDA",291,0)
LRDG(DG) ; -- convert DG to section, if generic LAB
"RTN","VPRSDA",292,0)
 Q:$P($G(^ORD(100.98,+$G(DG),0)),U,3)'="LAB"  ;ok
"RTN","VPRSDA",293,0)
 N X,Y S X=$P($G(^ORD(101.43,+$G(ORIT),"LR")),U,6),Y=0
"RTN","VPRSDA",294,0)
 I X'="" S Y=$O(^ORD(100.98,"B",X,0)) S:Y DG=Y
"RTN","VPRSDA",295,0)
 Q
"RTN","VPRSDA",296,0)
 ;
"RTN","VPRSDA",297,0)
WARDFAC(IEN) ; -- return #4 ien for a Ward Location
"RTN","VPRSDA",298,0)
 N HLOC,Y
"RTN","VPRSDA",299,0)
 S HLOC=+$G(^DIC(42,+$G(IEN),44)),Y=""
"RTN","VPRSDA",300,0)
 S:HLOC Y=$P($G(^SC(HLOC,0)),U,4)
"RTN","VPRSDA",301,0)
 Q Y
"RTN","VPRSDA",302,0)
 ;
"RTN","VPRSDA",303,0)
VST(VISIT) ; -- get info for a VISIT in @VPRVST
"RTN","VPRSDA",304,0)
 S VISIT=+$G(VISIT) Q:VISIT<1
"RTN","VPRSDA",305,0)
 D ENCEVENT^PXAPI(VISIT)
"RTN","VPRSDA",306,0)
 S VPRVST=$NA(^TMP("PXKENC",$J,VISIT,"VST",VISIT))
"RTN","VPRSDA",307,0)
 ; validate Check-Out D/T
"RTN","VPRSDA",308,0)
 N D S D=$P($G(@VPRVST@(0)),U,18)
"RTN","VPRSDA",309,0)
 I D,'$$VALID(D) S $P(@VPRVST@(0),U,18)=""
"RTN","VPRSDA",310,0)
 Q
"RTN","VPRSDA",311,0)
 ;
"RTN","VPRSDA",312,0)
VAIP(MVT,DFN) ; -- get admission info & Visit#
"RTN","VPRSDA",313,0)
 ; Return VAIP(#)= array of movements
"RTN","VPRSDA",314,0)
 ;        VPRVST = Visit#
"RTN","VPRSDA",315,0)
 S MVT=$G(MVT),DFN=+$G(DFN)
"RTN","VPRSDA",316,0)
 S VPRVST=+$P(MVT,"~",2),MVT=+MVT
"RTN","VPRSDA",317,0)
 S:'DFN DFN=+$$GET1^DIQ(405,MVT_",",.03,"I")
"RTN","VPRSDA",318,0)
 I 'DFN!'MVT S DDEOUT=1 Q
"RTN","VPRSDA",319,0)
 N VAERR,VADMVT K VAIP
"RTN","VPRSDA",320,0)
 S:MVT'=+$G(^DPT(DFN,.105)) VAIP("E")=MVT
"RTN","VPRSDA",321,0)
 D IN5^VADPT
"RTN","VPRSDA",322,0)
 S:'VPRVST VPRVST=$$VNUM(+$G(VAIP(13)))
"RTN","VPRSDA",323,0)
 Q
"RTN","VPRSDA",324,0)
 ;
"RTN","VPRSDA",325,0)
VNUM(ADM) ; -- find Visit# for an admission
"RTN","VPRSDA",326,0)
 N VAINDT,X,Y
"RTN","VPRSDA",327,0)
 S X=+$G(^DGPM(+$G(ADM),0)),VAINDT=(9999999-$P(X,"."))_"."_$P(X,".",2)
"RTN","VPRSDA",328,0)
 S Y=$O(^AUPNVSIT("AAH",DFN,VAINDT,0))
"RTN","VPRSDA",329,0)
 Q Y
"RTN","VPRSDA",330,0)
 ;
"RTN","VPRSDA",331,0)
SPEC ; -- build DLIST(#)=45.7 iens using VAIP array
"RTN","VPRSDA",332,0)
 N I,X,SPEC
"RTN","VPRSDA",333,0)
 F I=13:1:17 S X=$G(VAIP(I,6)) S:X SPEC(+X)=""
"RTN","VPRSDA",334,0)
 S (I,X)=0 F  S X=$O(SPEC(X)) Q:X<1  S I=I+1,DLIST(I)=X
"RTN","VPRSDA",335,0)
 Q
"RTN","VPRSDA",336,0)
 ;
"RTN","VPRSDA",337,0)
VSTR() ; -- build Visit string of Type;date.time[;location]
"RTN","VPRSDA",338,0)
 N Y S Y=""
"RTN","VPRSDA",339,0)
 I $G(VAIP(13)) S Y="H;"_+VAIP(13)
"RTN","VPRSDA",340,0)
 E  S X=$G(@VPRVST@(0)),Y=$P(X,U,7)_";"_+X_";"_$P(X,U,22)
"RTN","VPRSDA",341,0)
 Q Y
"RTN","VPRSDA",342,0)
 ;
"RTN","VPRSDA",343,0)
VPRV(VISIT) ; -- build DLIST(n)=#200 ien for V Providers
"RTN","VPRSDA",344,0)
 N I,X,R S I=0
"RTN","VPRSDA",345,0)
 F  S I=$O(^TMP("PXKENC",$J,VISIT,"PRV",I)) Q:I<1  S X=$G(^(I,0)) D
"RTN","VPRSDA",346,0)
 . S R=$P(X,U,4)
"RTN","VPRSDA",347,0)
 . S DLIST(I)=+X_U_$S(R="P":"PRIMARY",R="S":"SECONDARY",1:"")
"RTN","VPRSDA",348,0)
 Q
"RTN","VPRSDA",349,0)
 ;
"RTN","VPRSDA",350,0)
APPT1(VPRID) ; -- get ^TMP node for single appt, returns VPRAPPT
"RTN","VPRSDA",351,0)
 N DFN,VPRDT
"RTN","VPRSDA",352,0)
 S DFN=$P(VPRID,",",2),VPRDT=$P(VPRID,",")
"RTN","VPRSDA",353,0)
 I '$D(^TMP($J,"SDAMA301",DFN)) D
"RTN","VPRSDA",354,0)
 . N VPRX,VPRNUM
"RTN","VPRSDA",355,0)
 . S VPRX(1)=VPRDT_";"_VPRDT,VPRX(4)=DFN
"RTN","VPRSDA",356,0)
 . S VPRX("FLDS")="1;2;3;10;11",VPRX("SORT")="P"
"RTN","VPRSDA",357,0)
 . S VPRNUM=$$SDAPI^SDAMA301(.VPRX)
"RTN","VPRSDA",358,0)
 S VPRAPPT=$G(^TMP($J,"SDAMA301",DFN,VPRDT))
"RTN","VPRSDA",359,0)
 S:VPRAPPT="" VPRAPPT=VPRDT_U_$P($G(^DPT(DFN,"S",VPRDT,0)),U,1,2) ;DDEOUT=1
"RTN","VPRSDA",360,0)
 Q
"RTN","VPRSDA",361,0)
 ;
"RTN","VPRSDA",362,0)
VTO(VISIT) ; -- determine ToTime for a visit based on type
"RTN","VPRSDA",363,0)
 N TYPE,INPT,Y S Y=""
"RTN","VPRSDA",364,0)
 S TYPE=$P($G(@VPRVST@(0)),U,7),INPT=$P($G(@VPRVST@(150)),U,2)
"RTN","VPRSDA",365,0)
 ; should not have any inpatient episodes here, handled via DGPM
"RTN","VPRSDA",366,0)
 I "H^R"[TYPE,INPT Q Y
"RTN","VPRSDA",367,0)
 ; look for an appointment check-out time
"RTN","VPRSDA",368,0)
 I "A^I^O"[TYPE S Y=$$CKOUT(VISIT) I Y Q Y
"RTN","VPRSDA",369,0)
 ; check Surgery for Time Out of OR
"RTN","VPRSDA",370,0)
 I TYPE="S" D  I Y Q Y
"RTN","VPRSDA",371,0)
 . N I S I=$O(^SRF("AV",VISIT,0))
"RTN","VPRSDA",372,0)
 . S:I Y=$$GET1^DIQ(130,I_",",.232,"I")
"RTN","VPRSDA",373,0)
 ; otherwise use the Visit Time
"RTN","VPRSDA",374,0)
 I "H^R^A^I^O^S"'[TYPE!(+$G(@VPRVST@(0))<DT) S Y=+$G(@VPRVST@(0))
"RTN","VPRSDA",375,0)
 Q Y
"RTN","VPRSDA",376,0)
 ;
"RTN","VPRSDA",377,0)
CKOUT(VISIT) ; -- get Check-out date from Outpt Enc file
"RTN","VPRSDA",378,0)
 N X,Y,IEN
"RTN","VPRSDA",379,0)
 S IEN=$O(^SCE("AVSIT",VISIT,0)),(X,Y)=""
"RTN","VPRSDA",380,0)
 S:IEN X=$$GETOE^SDOE(IEN),Y=$P(X,U,7)
"RTN","VPRSDA",381,0)
 Q Y
"RTN","VPRSDA",382,0)
 ;
"RTN","VPRSDA",383,0)
CP1(IEN) ; -- get MD nodes for procedure
"RTN","VPRSDA",384,0)
 ; VPRCP = ^TMP("MDHSP",$J,I)
"RTN","VPRSDA",385,0)
 ; VPRCN = ^GMR(123,consult,0)
"RTN","VPRSDA",386,0)
 ; VPRTIU(field#,"I") = TIU data field
"RTN","VPRSDA",387,0)
 I '$D(^TMP("MDHSP",$J)) D
"RTN","VPRSDA",388,0)
 . S:'DFN DFN=+$$GET1^DIQ(702,IEN,.01,"I")
"RTN","VPRSDA",389,0)
 . N DLIST D CPROCS^VPRSDAQ
"RTN","VPRSDA",390,0)
 S I=+$G(^TMP("MDHSP",$J,"IEN",IEN)),VPRCP=$G(^TMP("MDHSP",$J,I))
"RTN","VPRSDA",391,0)
 I VPRCP="" Q  ;S DDEOUT=1 Q
"RTN","VPRSDA",392,0)
 ; undo date formatting
"RTN","VPRSDA",393,0)
 N X,Y,%DT,VPRD
"RTN","VPRSDA",394,0)
 S X=$P(VPRCP,U,6) I $L(X) S %DT="STX" D ^%DT S:Y>0 $P(VPRCP,U,6)=Y
"RTN","VPRSDA",395,0)
 ; get supporting data from Consult, TIU note
"RTN","VPRSDA",396,0)
 S X=+$P(VPRCP,U,13) I X D  K VPRD
"RTN","VPRSDA",397,0)
 . D DOCLIST^GMRCGUIB(.VPRD,X) S VPRCN=$G(VPRD(0)) M VPRCN=VPRD(50)
"RTN","VPRSDA",398,0)
 S X=+$P(VPRCP,U,14) I X D  K VPRD
"RTN","VPRSDA",399,0)
 . D EXTRACT^TIULQ(X,"VPRD",,".03;.05;1202;1211;1212",,,"I")
"RTN","VPRSDA",400,0)
 . M VPRTIU=VPRD(X)
"RTN","VPRSDA",401,0)
 Q
"RTN","VPRSDA",402,0)
 ;
"RTN","VPRSDA",403,0)
SRPTS(IEN) ; -- put Op Reports into DLIST(#) = TIU ien
"RTN","VPRSDA",404,0)
 S I=0 F  S I=$O(VPRSR(IEN,I)) Q:I<1  S X=$G(VPRSR(IEN,I)) I X D
"RTN","VPRSDA",405,0)
 . ;X = ien ^ $$RESOLVE^TIUSRVLO data string
"RTN","VPRSDA",406,0)
 . I $P(X,U,7)'="completed",$P(X,U,7)'="amended" Q
"RTN","VPRSDA",407,0)
 . I $P(X,U,2)["Addendum to " Q
"RTN","VPRSDA",408,0)
 . S DLIST(I)=+X_";TIU"
"RTN","VPRSDA",409,0)
 . ; X["OPERATION REPORT"!(X["PROCEDURE REPORT") S SURG("opReport")=X
"RTN","VPRSDA",410,0)
 Q
"RTN","VPRSDA",411,0)
 ;
"RTN","VPRSDA",412,0)
SRF(IEN) ; -- procedure
"RTN","VPRSDA",413,0)
 N X,SROP
"RTN","VPRSDA",414,0)
 S X=$P(VPRSR(IEN),U,2)
"RTN","VPRSDA",415,0)
 ; Use CPT ien if defined
"RTN","VPRSDA",416,0)
 S SROP=$$GET1^DIQ(136,IEN_",",.02,"I")
"RTN","VPRSDA",417,0)
 S:'SROP SROP=$P($G(^SRF(IEN,"OP")),U,2)
"RTN","VPRSDA",418,0)
 I SROP S VALUE=$$CPT^VPRDSR(SROP)_"^CPT-4",DATA=X Q
"RTN","VPRSDA",419,0)
 ; else use procedure name
"RTN","VPRSDA",420,0)
 S VALUE=X_U_X
"RTN","VPRSDA",421,0)
 Q
"RTN","VPRSDA",422,0)
 ;
"RTN","VPRSDA",423,0)
VIT1(IEN) ; -- get info for one Vital measurement, returns VPRGMV
"RTN","VPRSDA",424,0)
 S IEN=$G(IEN) I IEN="" S DDEOUT=1 Q
"RTN","VPRSDA",425,0)
 D GETREC^GMVUTL(.VPRV,IEN,1)
"RTN","VPRSDA",426,0)
 S VPRGMV=$G(VPRV(0)) I '$G(VPRV(0)) S DDEOUT=1 Q
"RTN","VPRSDA",427,0)
 S VPRTYPE=$$FIELD^GMVGETVT(+$P(VPRGMV,U,3),2)
"RTN","VPRSDA",428,0)
 I VPRTYPE="WT" D  ;get BMI for weight record
"RTN","VPRSDA",429,0)
 . I $G(^TMP("VPRGMV",$J,IEN)) S $P(VPRGMV,U,14)=$P(^(IEN),U,14) Q
"RTN","VPRSDA",430,0)
 . ; get BMI from query array if available, else call GMRVUT0
"RTN","VPRSDA",431,0)
 . N GMRVSTR,DFN,IDT,BMI
"RTN","VPRSDA",432,0)
 . S GMRVSTR=VPRTYPE,GMRVSTR(0)=+VPRGMV_U_+VPRGMV_"^1^1",DFN=+$P(VPRGMV,U,2)
"RTN","VPRSDA",433,0)
 . D EN1^GMRVUT0 S IDT=9999999-(+VPRGMV)
"RTN","VPRSDA",434,0)
 . S BMI=$P($G(^UTILITY($J,"GMRVD",IDT,VPRTYPE,IEN)),U,14)
"RTN","VPRSDA",435,0)
 . S:BMI'="" $P(VPRGMV,U,14)=BMI
"RTN","VPRSDA",436,0)
 . K ^UTILITY($J,"GMRVD")
"RTN","VPRSDA",437,0)
 S VPRANGE=$$RANGE^VPRDGMV(VPRTYPE)
"RTN","VPRSDA",438,0)
 Q
"RTN","VPRSDA",439,0)
 ;
"RTN","VPRSDA",440,0)
VITQUAL ; -- build DLIST(#)=Qualifiers [code^name]
"RTN","VPRSDA",441,0)
 N I,X,QUALS
"RTN","VPRSDA",442,0)
 S QUALS=$G(VPRV(5))
"RTN","VPRSDA",443,0)
 F I=1:1 S X=$P(QUALS,U,I) Q:X=""  S DLIST(I)=X
"RTN","VPRSDA",444,0)
 Q
"RTN","VPRSDA",445,0)
 ;
"RTN","VPRSDA",446,0)
VITCODE(IEN,SFN) ; -- return [first] code for vital type
"RTN","VPRSDA",447,0)
 ; SubFileNumber = 120.518 for Vital Type
"RTN","VPRSDA",448,0)
 ;                 120.522 for Vital Qualifier
"RTN","VPRSDA",449,0)
 N VPRC,IENS,Y
"RTN","VPRSDA",450,0)
 D GETS^DIQ(SFN,"1,"_IEN_",","**",,"VPRC")
"RTN","VPRSDA",451,0)
 S IENS=$O(VPRC(SFN_1,""))
"RTN","VPRSDA",452,0)
 S Y=$S($L(IENS):$G(VPRC(SFN_1,IENS,.01,"I")),1:"")
"RTN","VPRSDA",453,0)
 Q Y
"RTN","VPRSDA",454,0)
 ;
"RTN","VPRSDA",455,0)
FIM1(IEN) ; -- get info for one set of measurements
"RTN","VPRSDA",456,0)
 I '$D(VPRSITE) D PRM^RMIMRP(.VPRSITE) I '$O(VPRSITE(1)) S DDEOUT=1 Q
"RTN","VPRSDA",457,0)
 D GC^RMIMRP(.VPRM,IEN)
"RTN","VPRSDA",458,0)
 ; S:'$G(DFN) ??
"RTN","VPRSDA",459,0)
 N NOTE S NOTE=+$P($G(VPRM(1)),U,12) K VPRTIU
"RTN","VPRSDA",460,0)
 D EXTRACT^TIULQ(NOTE,"VPRTIU",,"1201;1202;1302",,,"I")
"RTN","VPRSDA",461,0)
 M VPRM("TIU")=VPRTIU(NOTE)
"RTN","VPRSDA",462,0)
 Q
"RTN","VPRSDA",463,0)
 ;
"RTN","VPRSDA",464,0)
FIMS ; -- get DLIST(#)=name^value of each score
"RTN","VPRSDA",465,0)
 ; Returns VPRFIMS = Assessment type(s) for ProblemDetail
"RTN","VPRSDA",466,0)
 N I,J,N,X,NAMES,SCORES,SUM,TYPE
"RTN","VPRSDA",467,0)
 S N=0,VPRFIMS=""
"RTN","VPRSDA",468,0)
 S NAMES="Eating^Grooming^Bathing^Dressing - Upper Body^Dressing - Lower Body^Toileting^Bladder Management^Bowel Management^Bed, Chair, Wheelchair^Toilet^Tub, Shower^Walk/Wheelchair^Stairs"
"RTN","VPRSDA",469,0)
 S NAMES=NAMES_"^Comprehension^Expression^Social Interaction^Problem Solving^Memory"
"RTN","VPRSDA",470,0)
 S NAMES=NAMES_"^walkMode^comprehendMode^expressMode^Z"
"RTN","VPRSDA",471,0)
 F I=5:1:9 I VPRM(I)'?1."^" D  ;has data
"RTN","VPRSDA",472,0)
 . S SCORES=VPRM(I),SUM=$$TOTAL(SCORES) Q:'SUM
"RTN","VPRSDA",473,0)
 . S TYPE=$S(I=5:"Admission",I=6:"Discharge",I=7:"Interim",I=8:"Follow up",1:"Goals")
"RTN","VPRSDA",474,0)
 . S VPRFIMS=VPRFIMS_$S(VPRFIMS'="":", ",1:"")_TYPE
"RTN","VPRSDA",475,0)
 . ; add score set to list
"RTN","VPRSDA",476,0)
 . S N=N+1,DLIST(N)="Assessment Type^"_TYPE
"RTN","VPRSDA",477,0)
 . F J=1:1:21 S X=$P(SCORES,U,J),N=N+1,DLIST(N)=$P(NAMES,U,J)_U_X
"RTN","VPRSDA",478,0)
 . S N=N+1,DLIST(N)="FIM Total^"_SUM
"RTN","VPRSDA",479,0)
 S:$L(VPRFIMS) VPRFIMS=VPRFIMS_" Assessment"_$S(VPRFIMS[",":"s",1:"")
"RTN","VPRSDA",480,0)
 Q
"RTN","VPRSDA",481,0)
 ;
"RTN","VPRSDA",482,0)
TOTAL(NODE) ; -- Return total of scores, or "" if incomplete
"RTN","VPRSDA",483,0)
 N SUM,I,X
"RTN","VPRSDA",484,0)
 S SUM=0 F I=1:1:18 S X=$P(NODE,U,I) S:X SUM=SUM+X I X<1 S SUM="" Q
"RTN","VPRSDA",485,0)
 Q SUM
"RTN","VPRSDA",486,0)
 ;
"RTN","VPRSDA",487,0)
PRF1(ID) ; -- set up one patient record flag assignment
"RTN","VPRSDA",488,0)
 ; Returns VPRF1("NAME")=VALUE
"RTN","VPRSDA",489,0)
 S:'$G(DFN) DFN=+$P(ID,"~",2)
"RTN","VPRSDA",490,0)
 I '$G(DFN)!'$G(ID) S DDEOUT=1 Q
"RTN","VPRSDA",491,0)
 D:'$D(VPRF)  K VPRF1
"RTN","VPRSDA",492,0)
 . N DLIST D PRF^VPRSDAQ
"RTN","VPRSDA",493,0)
 N I S I=+$G(VPRF("IDX",+ID))
"RTN","VPRSDA",494,0)
 I I M VPRF1=VPRF(I)
"RTN","VPRSDA",495,0)
 Q
"RTN","VPRSDA",496,0)
 ;
"RTN","VPRSDA",497,0)
PCMM ; -- get DLIST(#)=ien^role of PCP, PC Team members
"RTN","VPRSDA",498,0)
 ; Expects DFN, VPRTEAM = ien^name of PCTeam
"RTN","VPRSDA",499,0)
 N PCP,X,N,VPRT,IDX,ROLE
"RTN","VPRSDA",500,0)
 S PCP=$$OUTPTPR^SDUTL3(DFN),N=0 S:PCP>0 N=1,DLIST(1)=+PCP_"^PRIMARY CARE PROVIDER"
"RTN","VPRSDA",501,0)
 S X=$$PRTM^SCAPMC(+$G(VPRTEAM),,,,.VPRT) I X D
"RTN","VPRSDA",502,0)
 . S IDX=$NA(@VPRT@("SCPR")) Q:IDX=""
"RTN","VPRSDA",503,0)
 . F  S IDX=$Q(@IDX) Q:IDX=""  Q:$QS(IDX,3)'="SCPR"  I $QS(IDX,4)'=+PCP D
"RTN","VPRSDA",504,0)
 .. S ROLE=$$GET1^DIQ(404.57,+$QS(IDX,5),.01)
"RTN","VPRSDA",505,0)
 .. S N=N+1,DLIST(N)=$QS(IDX,4)_U_ROLE ;provider ien ^ position name
"RTN","VPRSDA",506,0)
 Q
"VER")
8.0^22.2
"BLD",9478,6)
^14
**END**
**END**

