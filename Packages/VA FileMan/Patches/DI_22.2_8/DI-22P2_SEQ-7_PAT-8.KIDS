Released DI*22.2*8 SEQ #7
Extracted from mail message
**KIDS**:DI*22.2*8^

**INSTALL NAME**
DI*22.2*8
"BLD",9419,0)
DI*22.2*8^VA FILEMAN^0^3170509^y
"BLD",9419,1,0)
^^1^1^3170309^^
"BLD",9419,1,1,0)
Please refer to the Description in Forum Patch Module for details.
"BLD",9419,4,0)
^9.64PA^1.62^3
"BLD",9419,4,1.6,0)
1.6
"BLD",9419,4,1.6,222)
y^y^f^^^^n
"BLD",9419,4,1.61,0)
1.61
"BLD",9419,4,1.61,222)
y^y^f^^^^n
"BLD",9419,4,1.62,0)
1.62
"BLD",9419,4,1.62,222)
y^y^f^^n^^y^o^n
"BLD",9419,4,1.62,224)
I Y<1000
"BLD",9419,4,"B",1.6,1.6)

"BLD",9419,4,"B",1.61,1.61)

"BLD",9419,4,"B",1.62,1.62)

"BLD",9419,6.3)
19
"BLD",9419,"ABPKG")
n
"BLD",9419,"KRN",0)
^9.67PA^1.5^24
"BLD",9419,"KRN",.4,0)
.4
"BLD",9419,"KRN",.4,"NM",0)
^9.68A^1^1
"BLD",9419,"KRN",.4,"NM",1,0)
DIAC ACTIONS    FILE #1.61^1.61^0
"BLD",9419,"KRN",.4,"NM","B","DIAC ACTIONS    FILE #1.61",1)

"BLD",9419,"KRN",.401,0)
.401
"BLD",9419,"KRN",.401,"NM",0)
^9.68A^^
"BLD",9419,"KRN",.402,0)
.402
"BLD",9419,"KRN",.402,"NM",0)
^9.68A^^0
"BLD",9419,"KRN",.403,0)
.403
"BLD",9419,"KRN",.403,"NM",0)
^9.68A^4^3
"BLD",9419,"KRN",.403,"NM",2,0)
DIAC POLICY    FILE #1.6^1.6^0
"BLD",9419,"KRN",.403,"NM",3,0)
DIAC RULE    FILE #1.6^1.6^0
"BLD",9419,"KRN",.403,"NM",4,0)
DIAC SET    FILE #1.6^1.6^0
"BLD",9419,"KRN",.403,"NM","B","DIAC POLICY    FILE #1.6",2)

"BLD",9419,"KRN",.403,"NM","B","DIAC RULE    FILE #1.6",3)

"BLD",9419,"KRN",.403,"NM","B","DIAC SET    FILE #1.6",4)

"BLD",9419,"KRN",.5,0)
.5
"BLD",9419,"KRN",.84,0)
.84
"BLD",9419,"KRN",1.5,0)
1.5
"BLD",9419,"KRN",1.6,0)
1.6
"BLD",9419,"KRN",1.61,0)
1.61
"BLD",9419,"KRN",1.62,0)
1.62
"BLD",9419,"KRN",1.62,"NM",0)
^9.68A^^
"BLD",9419,"KRN",3.6,0)
3.6
"BLD",9419,"KRN",3.8,0)
3.8
"BLD",9419,"KRN",9.2,0)
9.2
"BLD",9419,"KRN",9.8,0)
9.8
"BLD",9419,"KRN",9.8,"NM",0)
^9.68A^30^11
"BLD",9419,"KRN",9.8,"NM",19,0)
DIAC1^^0^B60228827
"BLD",9419,"KRN",9.8,"NM",20,0)
DIAC1T^^0^B47977715
"BLD",9419,"KRN",9.8,"NM",21,0)
DIACLM^^0^B8416953
"BLD",9419,"KRN",9.8,"NM",22,0)
DIACLM1^^0^B88255480
"BLD",9419,"KRN",9.8,"NM",23,0)
DIACX^^0^B15814572
"BLD",9419,"KRN",9.8,"NM",24,0)
DIACP^^0^B49134619
"BLD",9419,"KRN",9.8,"NM",26,0)
DIACOPT^^0^B1762073
"BLD",9419,"KRN",9.8,"NM",27,0)
DII1^^0^B2105841
"BLD",9419,"KRN",9.8,"NM",28,0)
DIR2^^0^B27040742
"BLD",9419,"KRN",9.8,"NM",29,0)
DIALOG^^0^B28415998
"BLD",9419,"KRN",9.8,"NM",30,0)
DIALOGU^^0^B4301510
"BLD",9419,"KRN",9.8,"NM","B","DIAC1",19)

"BLD",9419,"KRN",9.8,"NM","B","DIAC1T",20)

"BLD",9419,"KRN",9.8,"NM","B","DIACLM",21)

"BLD",9419,"KRN",9.8,"NM","B","DIACLM1",22)

"BLD",9419,"KRN",9.8,"NM","B","DIACOPT",26)

"BLD",9419,"KRN",9.8,"NM","B","DIACP",24)

"BLD",9419,"KRN",9.8,"NM","B","DIACX",23)

"BLD",9419,"KRN",9.8,"NM","B","DIALOG",29)

"BLD",9419,"KRN",9.8,"NM","B","DIALOGU",30)

"BLD",9419,"KRN",9.8,"NM","B","DII1",27)

"BLD",9419,"KRN",9.8,"NM","B","DIR2",28)

"BLD",9419,"KRN",19,0)
19
"BLD",9419,"KRN",19,"NM",0)
^9.68A^10^9
"BLD",9419,"KRN",19,"NM",2,0)
DIAC ACTIONS^^0
"BLD",9419,"KRN",19,"NM",3,0)
DIAC DELETE^^0
"BLD",9419,"KRN",19,"NM",4,0)
DIAC DISABLE^^0
"BLD",9419,"KRN",19,"NM",5,0)
DIAC EDIT^^0
"BLD",9419,"KRN",19,"NM",6,0)
DIAC FUNCTIONS^^0
"BLD",9419,"KRN",19,"NM",7,0)
DIAC PRINT^^0
"BLD",9419,"KRN",19,"NM",8,0)
DIAC TEST^^0
"BLD",9419,"KRN",19,"NM",9,0)
DIACCESS^^0
"BLD",9419,"KRN",19,"NM",10,0)
DIOTHER^^2
"BLD",9419,"KRN",19,"NM","B","DIAC ACTIONS",2)

"BLD",9419,"KRN",19,"NM","B","DIAC DELETE",3)

"BLD",9419,"KRN",19,"NM","B","DIAC DISABLE",4)

"BLD",9419,"KRN",19,"NM","B","DIAC EDIT",5)

"BLD",9419,"KRN",19,"NM","B","DIAC FUNCTIONS",6)

"BLD",9419,"KRN",19,"NM","B","DIAC PRINT",7)

"BLD",9419,"KRN",19,"NM","B","DIAC TEST",8)

"BLD",9419,"KRN",19,"NM","B","DIACCESS",9)

"BLD",9419,"KRN",19,"NM","B","DIOTHER",10)

"BLD",9419,"KRN",19.1,0)
19.1
"BLD",9419,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9419,"KRN",101,0)
101
"BLD",9419,"KRN",101,"NM",0)
^9.68A^13^13
"BLD",9419,"KRN",101,"NM",1,0)
DIAC ACTION MENU^^0
"BLD",9419,"KRN",101,"NM",2,0)
DIAC BLANK LINE^^0
"BLD",9419,"KRN",101,"NM",3,0)
DIAC CHANGE^^0
"BLD",9419,"KRN",101,"NM",4,0)
DIAC DELETE^^0
"BLD",9419,"KRN",101,"NM",5,0)
DIAC DISABLE^^0
"BLD",9419,"KRN",101,"NM",6,0)
DIAC EDIT^^0
"BLD",9419,"KRN",101,"NM",7,0)
DIAC EXPAND^^0
"BLD",9419,"KRN",101,"NM",8,0)
DIAC FUNCTIONS^^0
"BLD",9419,"KRN",101,"NM",9,0)
DIAC INQUIRE^^0
"BLD",9419,"KRN",101,"NM",10,0)
DIAC LINK ACTION^^0
"BLD",9419,"KRN",101,"NM",11,0)
DIAC MEMBERS^^0
"BLD",9419,"KRN",101,"NM",12,0)
DIAC QUIT^^0
"BLD",9419,"KRN",101,"NM",13,0)
DIAC TEST^^0
"BLD",9419,"KRN",101,"NM","B","DIAC ACTION MENU",1)

"BLD",9419,"KRN",101,"NM","B","DIAC BLANK LINE",2)

"BLD",9419,"KRN",101,"NM","B","DIAC CHANGE",3)

"BLD",9419,"KRN",101,"NM","B","DIAC DELETE",4)

"BLD",9419,"KRN",101,"NM","B","DIAC DISABLE",5)

"BLD",9419,"KRN",101,"NM","B","DIAC EDIT",6)

"BLD",9419,"KRN",101,"NM","B","DIAC EXPAND",7)

"BLD",9419,"KRN",101,"NM","B","DIAC FUNCTIONS",8)

"BLD",9419,"KRN",101,"NM","B","DIAC INQUIRE",9)

"BLD",9419,"KRN",101,"NM","B","DIAC LINK ACTION",10)

"BLD",9419,"KRN",101,"NM","B","DIAC MEMBERS",11)

"BLD",9419,"KRN",101,"NM","B","DIAC QUIT",12)

"BLD",9419,"KRN",101,"NM","B","DIAC TEST",13)

"BLD",9419,"KRN",409.61,0)
409.61
"BLD",9419,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",9419,"KRN",409.61,"NM",1,0)
DIAC POLICY EDITOR^^0
"BLD",9419,"KRN",409.61,"NM","B","DIAC POLICY EDITOR",1)

"BLD",9419,"KRN",771,0)
771
"BLD",9419,"KRN",779.2,0)
779.2
"BLD",9419,"KRN",870,0)
870
"BLD",9419,"KRN",8989.51,0)
8989.51
"BLD",9419,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",9419,"KRN",8989.52,0)
8989.52
"BLD",9419,"KRN",8994,0)
8994
"BLD",9419,"KRN","B",.4,.4)

"BLD",9419,"KRN","B",.401,.401)

"BLD",9419,"KRN","B",.402,.402)

"BLD",9419,"KRN","B",.403,.403)

"BLD",9419,"KRN","B",.5,.5)

"BLD",9419,"KRN","B",.84,.84)

"BLD",9419,"KRN","B",1.5,1.5)

"BLD",9419,"KRN","B",1.6,1.6)

"BLD",9419,"KRN","B",1.61,1.61)

"BLD",9419,"KRN","B",1.62,1.62)

"BLD",9419,"KRN","B",3.6,3.6)

"BLD",9419,"KRN","B",3.8,3.8)

"BLD",9419,"KRN","B",9.2,9.2)

"BLD",9419,"KRN","B",9.8,9.8)

"BLD",9419,"KRN","B",19,19)

"BLD",9419,"KRN","B",19.1,19.1)

"BLD",9419,"KRN","B",101,101)

"BLD",9419,"KRN","B",409.61,409.61)

"BLD",9419,"KRN","B",771,771)

"BLD",9419,"KRN","B",779.2,779.2)

"BLD",9419,"KRN","B",870,870)

"BLD",9419,"KRN","B",8989.51,8989.51)

"BLD",9419,"KRN","B",8989.52,8989.52)

"BLD",9419,"KRN","B",8994,8994)

"BLD",9419,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9419,"QUES",0)
^9.62^^
"BLD",9419,"REQB",0)
^9.611^1^1
"BLD",9419,"REQB",1,0)
DI*22.2*5^2
"BLD",9419,"REQB","B","DI*22.2*5",1)

"DATA",1.62,1,0)
DI FIRST APPLICABLE^First Applicable^R
"DATA",1.62,1,1)
I DIRESULT'="" S Y=1
"DATA",1.62,1,2,0)
^1.622^1^1^3170117^^^^
"DATA",1.62,1,2,1,0)
Quit when any result is determined
"DATA",1.62,2,0)
DI DENY OVERRIDE^Deny Override^R
"DATA",1.62,2,1)
I DIRESULT="D" S Y=1
"DATA",1.62,2,2,0)
^1.622^1^1^3170117^^^
"DATA",1.62,2,2,1,0)
Quit when a Deny result is found
"DATA",1.62,3,0)
DI DENY UNLESS PERMIT^Deny Unless Permit^R^D
"DATA",1.62,3,1)
I DIRESULT="P" S Y=1
"DATA",1.62,3,2,0)
^1.622^2^2^3170117^^^^
"DATA",1.62,3,2,1,0)
Quit when a Permit result is found; if no result can be determined,
"DATA",1.62,3,2,2,0)
return a Deny result
"DATA",1.62,4,0)
DI PERMIT OVERRIDE^Permit Override^R
"DATA",1.62,4,1)
I DIRESULT="P" S Y=1
"DATA",1.62,4,2,0)
^1.622^1^1^3170117^^
"DATA",1.62,4,2,1,0)
Quit when a Permit result is found
"DATA",1.62,5,0)
DI PERMIT UNLESS DENY^Permit Unless Deny^R^P
"DATA",1.62,5,1)
I DIRESULT="D" S Y=1
"DATA",1.62,5,2,0)
^1.622^2^2^3170117^^
"DATA",1.62,5,2,1,0)
Quit when a Deny result is found; if no result can be determined,
"DATA",1.62,5,2,2,0)
return a Permit result
"DATA",1.62,6,0)
DI HAS KEY^User Holds Key^C
"DATA",1.62,6,1)
S Y=$D(^XUSEC(X,+DIUSR))
"DATA",1.62,6,2,0)
^1.622^2^2^3170117^^^^
"DATA",1.62,6,2,1,0)
Requires X = Security Key #19.1 Name
"DATA",1.62,6,2,2,0)
Returns  Y = $D(^XUSEC(X,+DIUSER))
"DATA",1.62,7,0)
DI PERSON CLASS^User is Class Member^C
"DATA",1.62,7,1)
S Y=$$PCLS^DIACX(X,DIUSR)
"DATA",1.62,7,2,0)
^1.622^2^2^3170411^^^
"DATA",1.62,7,2,1,0)
Requires X = Person Class #8932.1 IEN or VA Code
"DATA",1.62,7,2,2,0)
Returns  Y = 1 or 0, if X matches DIUSR's current class assignment
"FIA",1.6)
POLICY
"FIA",1.6,0)
^DIAC(1.6,
"FIA",1.6,0,0)
1.6I
"FIA",1.6,0,1)
y^y^f^^^^n
"FIA",1.6,0,10)

"FIA",1.6,0,11)

"FIA",1.6,0,"RLRO")

"FIA",1.6,0,"VR")
22.2^DI
"FIA",1.6,1.6)
0
"FIA",1.6,1.601)
0
"FIA",1.6,1.6011)
0
"FIA",1.6,1.602)
0
"FIA",1.6,1.603)
0
"FIA",1.6,1.605)
0
"FIA",1.61)
APPLICATION ACTION
"FIA",1.61,0)
^DIAC(1.61,
"FIA",1.61,0,0)
1.61I
"FIA",1.61,0,1)
y^y^f^^^^n
"FIA",1.61,0,10)

"FIA",1.61,0,11)

"FIA",1.61,0,"RLRO")

"FIA",1.61,0,"VR")
22.2^DI
"FIA",1.61,1.61)
0
"FIA",1.61,1.615)
0
"FIA",1.62)
POLICY FUNCTION
"FIA",1.62,0)
^DIAC(1.62,
"FIA",1.62,0,0)
1.62I
"FIA",1.62,0,1)
y^y^f^^n^^y^o^n
"FIA",1.62,0,10)

"FIA",1.62,0,11)
I Y<1000
"FIA",1.62,0,"RLRO")

"FIA",1.62,0,"VR")
22.2^DI
"FIA",1.62,1.62)
0
"FIA",1.62,1.622)
0
"IX",1.6,1.601,"AC",0)
1.601^AC^Find Members by Sequence^R^^R^IR^I^1.601^^^^^S
"IX",1.6,1.601,"AC",.1,0)
^^2^2^3161020^
"IX",1.6,1.601,"AC",.1,1,0)
Used in policy evaluation, to find and process member policies in the 
"IX",1.6,1.601,"AC",.1,2,0)
specified sequence.
"IX",1.6,1.601,"AC",1)
S ^DIAC(1.6,DA(1),10,"AC",X(1),X(2),DA)=""
"IX",1.6,1.601,"AC",2)
K ^DIAC(1.6,DA(1),10,"AC",X(1),X(2),DA)
"IX",1.6,1.601,"AC",2.5)
K ^DIAC(1.6,DA(1),10,"AC")
"IX",1.6,1.601,"AC",11.1,0)
^.114IA^2^2
"IX",1.6,1.601,"AC",11.1,1,0)
1^F^1.601^.02^^1^F
"IX",1.6,1.601,"AC",11.1,2,0)
2^F^1.601^.01^^2^F
"IX",1.6,1.602,"AKEY",0)
1.602^AKEY^List target keys and values^R^^R^IR^I^1.602^^^^^S
"IX",1.6,1.602,"AKEY",.1,0)
^^2^2^3161020^
"IX",1.6,1.602,"AKEY",.1,1,0)
Used in policy evaluation, to quickly find and match the target attributes
"IX",1.6,1.602,"AKEY",.1,2,0)
to the record values in DIVAL(attribute)=value.
"IX",1.6,1.602,"AKEY",1)
S ^DIAC(1.6,DA(1),2,"AKEY",$E(X(1),1,30),$E(X(2),1,30),DA)=""
"IX",1.6,1.602,"AKEY",2)
K ^DIAC(1.6,DA(1),2,"AKEY",$E(X(1),1,30),$E(X(2),1,30),DA)
"IX",1.6,1.602,"AKEY",2.5)
K ^DIAC(1.6,DA(1),2,"AKEY")
"IX",1.6,1.602,"AKEY",11.1,0)
^.114IA^2^2
"IX",1.6,1.602,"AKEY",11.1,1,0)
1^F^1.602^.02^30^1^F
"IX",1.6,1.602,"AKEY",11.1,2,0)
2^F^1.602^.03^30^2^F
"IX",1.61,1.61,"C",0)
1.61^C^Find an action by File# and API Name^R^^R^IR^I^1.61^^^^^LS
"IX",1.61,1.61,"C",.1,0)
^^2^2^3161020^
"IX",1.61,1.61,"C",.1,1,0)
Used in policy evaluation, to find the primary or default policy given
"IX",1.61,1.61,"C",.1,2,0)
the sub/file number and requested action.
"IX",1.61,1.61,"C",1)
S ^DIAC(1.61,"C",X(1),$E(X(2),1,30),DA)=""
"IX",1.61,1.61,"C",2)
K ^DIAC(1.61,"C",X(1),$E(X(2),1,30),DA)
"IX",1.61,1.61,"C",2.5)
K ^DIAC(1.61,"C")
"IX",1.61,1.61,"C",11.1,0)
^.114IA^2^2
"IX",1.61,1.61,"C",11.1,1,0)
1^F^1.61^.02^^1^F
"IX",1.61,1.61,"C",11.1,2,0)
2^F^1.61^.03^30^2^F
"IX",1.61,1.61,"C",11.1,2,2)
S X=$$UP^XLFSTR(X)
"KRN",.4,2616,-1)
0^1
"KRN",.4,2616,0)
DIAC ACTIONS^3170207.1324^@^1.61^^@^3170308
"KRN",.4,2616,"F",2)
.01;C1;L30~.02;C32;L10~.03;C43;L10~.05;C54;L25~
"KRN",.4,2616,"H")
APPLICATION ACTION LIST
"KRN",.403,139,-1)
0^2
"KRN",.403,139,0)
DIAC POLICY^@^@^^3160930.0859^^^1.6^0^0^1
"KRN",.403,139,40,0)
^.4031I^4^4
"KRN",.403,139,40,1,0)
1^^1,1^2^3
"KRN",.403,139,40,1,1)
Page 1
"KRN",.403,139,40,1,40,0)
^.4032IP^523^4
"KRN",.403,139,40,1,40,512,0)
DIAC POLICY HEADER^1^1,1^d
"KRN",.403,139,40,1,40,513,0)
DIAC POLICY 1^2^1,1^e
"KRN",.403,139,40,1,40,516,0)
DIAC TARGETS^3^8,1^e
"KRN",.403,139,40,1,40,516,2)
7^B^f
"KRN",.403,139,40,1,40,516,12)
D REQTCONJ^DIACX
"KRN",.403,139,40,1,40,516,"COMP MUL")

"KRN",.403,139,40,1,40,516,"COMP MUL PTR")

"KRN",.403,139,40,1,40,523,0)
DIAC POLICY 1A^4^16,1^e
"KRN",.403,139,40,1,40,523,11)

"KRN",.403,139,40,2,0)
2^^1,1^3^1
"KRN",.403,139,40,2,1)
Page 2
"KRN",.403,139,40,2,40,0)
^.4032IP^517^3
"KRN",.403,139,40,2,40,512,0)
DIAC POLICY HEADER^1^1,1^e
"KRN",.403,139,40,2,40,514,0)
DIAC POLICY 2^3^1,1^e
"KRN",.403,139,40,2,40,517,0)
DIAC MEMBERS^2^5,1^e
"KRN",.403,139,40,2,40,517,2)
10^AC^f^^
"KRN",.403,139,40,2,40,517,"COMP MUL")

"KRN",.403,139,40,2,40,517,"COMP MUL PTR")

"KRN",.403,139,40,3,0)
3^^1,1^1^2
"KRN",.403,139,40,3,1)
Page 3
"KRN",.403,139,40,3,40,0)
^.4032IP^515^2
"KRN",.403,139,40,3,40,512,0)
DIAC POLICY HEADER^1^1,1^e
"KRN",.403,139,40,3,40,515,0)
DIAC POLICY 3^2^1,1^e
"KRN",.403,139,40,4,0)
3.1^^10,10^^^1^17,75
"KRN",.403,139,40,4,1)
Page 3.1
"KRN",.403,139,40,4,40,0)
^.4032IP^524^1
"KRN",.403,139,40,4,40,524,0)
DIAC POLICY 3.1^1^2,2^e
"KRN",.403,140,-1)
0^4
"KRN",.403,140,0)
DIAC SET^@^@^^3161007.1551^^^1.6^0^0^1
"KRN",.403,140,40,0)
^.4031I^4^4
"KRN",.403,140,40,1,0)
1^^1,1^2^3
"KRN",.403,140,40,1,1)
Page 1
"KRN",.403,140,40,1,40,0)
^.4032IP^523^4
"KRN",.403,140,40,1,40,513,0)
DIAC POLICY 1^2^1,1^e
"KRN",.403,140,40,1,40,516,0)
DIAC TARGETS^3^8,1^e
"KRN",.403,140,40,1,40,516,2)
7^B^f
"KRN",.403,140,40,1,40,516,12)
D REQTCONJ^DIACX
"KRN",.403,140,40,1,40,516,"COMP MUL")

"KRN",.403,140,40,1,40,516,"COMP MUL PTR")

"KRN",.403,140,40,1,40,518,0)
DIAC SET HEADER^1^1,1^d
"KRN",.403,140,40,1,40,523,0)
DIAC POLICY 1A^4^16,1^e
"KRN",.403,140,40,2,0)
2^^1,1^3^1
"KRN",.403,140,40,2,1)
Page 2
"KRN",.403,140,40,2,40,0)
^.4032IP^517^3
"KRN",.403,140,40,2,40,517,0)
DIAC MEMBERS^2^5,1^e
"KRN",.403,140,40,2,40,517,2)
10^AC^f
"KRN",.403,140,40,2,40,517,"COMP MUL")

"KRN",.403,140,40,2,40,517,"COMP MUL PTR")

"KRN",.403,140,40,2,40,518,0)
DIAC SET HEADER^1^1,1^d
"KRN",.403,140,40,2,40,519,0)
DIAC SET 2^3^1,1^e
"KRN",.403,140,40,3,0)
3^^1,1^1^2
"KRN",.403,140,40,3,1)
Page 3
"KRN",.403,140,40,3,40,0)
^.4032IP^515^2
"KRN",.403,140,40,3,40,515,0)
DIAC POLICY 3^2^1,1^e
"KRN",.403,140,40,3,40,518,0)
DIAC SET HEADER^1^1,1^d
"KRN",.403,140,40,4,0)
3.1^^10,10^^^1^17,75
"KRN",.403,140,40,4,1)
Page 3.1
"KRN",.403,140,40,4,40,0)
^.4032IP^524^1
"KRN",.403,140,40,4,40,524,0)
DIAC POLICY 3.1^1^2,2^e
"KRN",.403,141,-1)
0^3
"KRN",.403,141,0)
DIAC RULE^@^@^^3161007.1613^^^1.6^0^0^1
"KRN",.403,141,40,0)
^.4031I^4^4
"KRN",.403,141,40,1,0)
1^^1,1^2^3
"KRN",.403,141,40,1,1)
Page 1
"KRN",.403,141,40,1,40,0)
^.4032IP^523^4
"KRN",.403,141,40,1,40,513,0)
DIAC POLICY 1^2^1,1^e
"KRN",.403,141,40,1,40,516,0)
DIAC TARGETS^3^8,1^e
"KRN",.403,141,40,1,40,516,2)
7^B^f
"KRN",.403,141,40,1,40,516,12)
D REQTCONJ^DIACX
"KRN",.403,141,40,1,40,516,"COMP MUL")

"KRN",.403,141,40,1,40,516,"COMP MUL PTR")

"KRN",.403,141,40,1,40,520,0)
DIAC RULE HEADER^1^1,1^d
"KRN",.403,141,40,1,40,523,0)
DIAC POLICY 1A^4^16,1^e
"KRN",.403,141,40,2,0)
2^^1,1^3^1
"KRN",.403,141,40,2,1)
Page 2
"KRN",.403,141,40,2,40,0)
^.4032IP^522^3
"KRN",.403,141,40,2,40,520,0)
DIAC RULE HEADER^1^1,1^d
"KRN",.403,141,40,2,40,521,0)
DIAC RULE 2^3^1,1^e
"KRN",.403,141,40,2,40,522,0)
DIAC CONDITIONS^2^5,1^e
"KRN",.403,141,40,2,40,522,2)
10^B^f
"KRN",.403,141,40,2,40,522,12)
D REQCCONJ^DIACX
"KRN",.403,141,40,2,40,522,"COMP MUL")

"KRN",.403,141,40,2,40,522,"COMP MUL PTR")

"KRN",.403,141,40,3,0)
3^^1,1^1^2
"KRN",.403,141,40,3,1)
Page 3
"KRN",.403,141,40,3,40,0)
^.4032IP^515^2
"KRN",.403,141,40,3,40,515,0)
DIAC POLICY 3^2^1,1^e
"KRN",.403,141,40,3,40,520,0)
DIAC RULE HEADER^1^1,1^d
"KRN",.403,141,40,4,0)
3.1^^10,10^^^1^17,75
"KRN",.403,141,40,4,1)
Page 3.1
"KRN",.403,141,40,4,40,0)
^.4032IP^524^1
"KRN",.403,141,40,4,40,524,0)
DIAC POLICY 3.1^1^2,2^e
"KRN",.404,512,0)
DIAC POLICY HEADER^1.6^
"KRN",.404,512,40,0)
^.4044I^4^4
"KRN",.404,512,40,1,0)
1^Edit Policy ^1
"KRN",.404,512,40,1,2)
^^1,35
"KRN",.404,512,40,2,0)
2^NAME^3
"KRN",.404,512,40,2,1)
.01
"KRN",.404,512,40,2,2)
2,7^30^2,1
"KRN",.404,512,40,2,4)
1^^^1
"KRN",.404,512,40,3,0)
3^Page   of 3^1
"KRN",.404,512,40,3,2)
^^2,69
"KRN",.404,512,40,4,0)
4^!M^1
"KRN",.404,512,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,512,40,4,2)
^^3,1
"KRN",.404,513,0)
DIAC POLICY 1^1.6^
"KRN",.404,513,40,0)
^.4044I^6^4
"KRN",.404,513,40,1,0)
1^1^1
"KRN",.404,513,40,1,2)
^^2,74
"KRN",.404,513,40,2,0)
2^NAME^3
"KRN",.404,513,40,2,1)
.01
"KRN",.404,513,40,2,2)
4,21^30^4,15
"KRN",.404,513,40,3,0)
3^DESCRIPTION^3
"KRN",.404,513,40,3,1)
1
"KRN",.404,513,40,3,2)
5,21^1^5,8
"KRN",.404,513,40,6,0)
6^#  Attribute Name                  Value^1
"KRN",.404,513,40,6,2)
^^7,3
"KRN",.404,514,0)
DIAC POLICY 2^1.6
"KRN",.404,514,40,0)
^.4044I^3^3
"KRN",.404,514,40,1,0)
1^2^1
"KRN",.404,514,40,1,2)
^^2,74
"KRN",.404,514,40,2,0)
2^RESULT FUNCTION^3
"KRN",.404,514,40,2,1)
.07
"KRN",.404,514,40,2,2)
16,18^30^16,1
"KRN",.404,514,40,2,4)
1
"KRN",.404,514,40,2,10)
D RESULT^DIACX
"KRN",.404,514,40,3,0)
3^Rules                              Seq^1
"KRN",.404,514,40,3,2)
^^4,1
"KRN",.404,515,0)
DIAC POLICY 3^1.6
"KRN",.404,515,40,0)
^.4044I^7^7
"KRN",.404,515,40,1,0)
1^3^1
"KRN",.404,515,40,1,2)
^^2,74
"KRN",.404,515,40,2,0)
2^ON DENY - FUNCTION^3
"KRN",.404,515,40,2,1)
7
"KRN",.404,515,40,2,2)
5,23^30^5,3
"KRN",.404,515,40,3,0)
3^MESSAGE^3
"KRN",.404,515,40,3,1)
7.1
"KRN",.404,515,40,3,2)
6,23^57^6,14
"KRN",.404,515,40,4,0)
4^ON PERMIT - FUNCTION^3
"KRN",.404,515,40,4,1)
8
"KRN",.404,515,40,4,2)
10,23^30^10,1
"KRN",.404,515,40,5,0)
5^MESSAGE^3
"KRN",.404,515,40,5,1)
8.1
"KRN",.404,515,40,5,2)
11,23^57^11,14
"KRN",.404,515,40,6,0)
6^AVAILABLE FIELDS^3
"KRN",.404,515,40,6,1)
5
"KRN",.404,515,40,6,2)
12,23^57^12,5
"KRN",.404,515,40,7,0)
7^Select ADDL FIELDS^3
"KRN",.404,515,40,7,1)
5.1
"KRN",.404,515,40,7,2)
13,23^15^13,3
"KRN",.404,515,40,7,7)
^3.1
"KRN",.404,516,0)
DIAC TARGETS^1.602
"KRN",.404,516,40,0)
^.4044I^3^3
"KRN",.404,516,40,1,0)
1^^3
"KRN",.404,516,40,1,1)
.01
"KRN",.404,516,40,1,2)
1,1^3
"KRN",.404,516,40,1,4)
1^^1
"KRN",.404,516,40,2,0)
2^^3
"KRN",.404,516,40,2,1)
.02
"KRN",.404,516,40,2,2)
1,6^30
"KRN",.404,516,40,3,0)
3^^3
"KRN",.404,516,40,3,1)
.03
"KRN",.404,516,40,3,2)
1,38^35
"KRN",.404,517,0)
DIAC MEMBERS^1.601
"KRN",.404,517,40,0)
^.4044I^2^2
"KRN",.404,517,40,1,0)
1^^3
"KRN",.404,517,40,1,1)
.01
"KRN",.404,517,40,1,2)
1,1^30
"KRN",.404,517,40,2,0)
2^^3
"KRN",.404,517,40,2,1)
.02
"KRN",.404,517,40,2,2)
1,36^3
"KRN",.404,517,40,2,4)
^^1
"KRN",.404,518,0)
DIAC SET HEADER^1.6^
"KRN",.404,518,40,0)
^.4044I^4^4
"KRN",.404,518,40,1,0)
1^Edit Set^1
"KRN",.404,518,40,1,2)
^^1,36
"KRN",.404,518,40,2,0)
2^NAME^3
"KRN",.404,518,40,2,1)
.01
"KRN",.404,518,40,2,2)
2,7^30^2,1
"KRN",.404,518,40,2,4)
^^^1
"KRN",.404,518,40,3,0)
3^Page   of 3^1
"KRN",.404,518,40,3,2)
^^2,69
"KRN",.404,518,40,4,0)
4^!M^1
"KRN",.404,518,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,518,40,4,2)
^^3,1
"KRN",.404,519,0)
DIAC SET 2^1.6
"KRN",.404,519,40,0)
^.4044I^3^3
"KRN",.404,519,40,1,0)
1^2^1
"KRN",.404,519,40,1,2)
^^2,74
"KRN",.404,519,40,2,0)
2^RESULT FUNCTION^3
"KRN",.404,519,40,2,1)
.07
"KRN",.404,519,40,2,2)
16,18^30^16,1
"KRN",.404,519,40,2,4)
1
"KRN",.404,519,40,2,10)
D RESULT^DIACX
"KRN",.404,519,40,3,0)
3^Policies                           Seq^1
"KRN",.404,519,40,3,2)
^^4,1
"KRN",.404,520,0)
DIAC RULE HEADER^1.6^
"KRN",.404,520,40,0)
^.4044I^4^4
"KRN",.404,520,40,1,0)
1^Edit Rule^1
"KRN",.404,520,40,1,2)
^^1,35
"KRN",.404,520,40,2,0)
2^NAME^3
"KRN",.404,520,40,2,1)
.01
"KRN",.404,520,40,2,2)
2,7^30^2,1
"KRN",.404,520,40,2,4)
1^^^1
"KRN",.404,520,40,3,0)
3^Page   of 3^1
"KRN",.404,520,40,3,2)
^^2,69
"KRN",.404,520,40,4,0)
4^!M^1
"KRN",.404,520,40,4,.1)
S $P(Y,"-",80)=""
"KRN",.404,520,40,4,2)
^^3,1
"KRN",.404,521,0)
DIAC RULE 2^1.6
"KRN",.404,521,40,0)
^.4044I^4^4
"KRN",.404,521,40,1,0)
1^2^1
"KRN",.404,521,40,1,2)
^^2,74
"KRN",.404,521,40,2,0)
2^RESULT^3
"KRN",.404,521,40,2,1)
.08
"KRN",.404,521,40,2,2)
16,14^6^16,6
"KRN",.404,521,40,2,4)
1
"KRN",.404,521,40,2,10)
D EFFECT^DIACX
"KRN",.404,521,40,3,0)
3^CONJUNCTION^3
"KRN",.404,521,40,3,1)
.06
"KRN",.404,521,40,3,2)
17,14^3^17,1
"KRN",.404,521,40,3,10)
D CKCCONJ^DIACX
"KRN",.404,521,40,4,0)
4^#  Condition                       Parameter^1
"KRN",.404,521,40,4,2)
^^4,3
"KRN",.404,522,0)
DIAC CONDITIONS^1.603
"KRN",.404,522,40,0)
^.4044I^3^3
"KRN",.404,522,40,1,0)
1^^3
"KRN",.404,522,40,1,1)
.01
"KRN",.404,522,40,1,2)
1,1^3
"KRN",.404,522,40,1,4)
1^^1
"KRN",.404,522,40,2,0)
2^^3
"KRN",.404,522,40,2,1)
.02
"KRN",.404,522,40,2,2)
1,6^30
"KRN",.404,522,40,3,0)
3^^3
"KRN",.404,522,40,3,1)
.03
"KRN",.404,522,40,3,2)
1,38^35
"KRN",.404,523,0)
DIAC POLICY 1A^1.6
"KRN",.404,523,40,0)
^.4044I^2^2
"KRN",.404,523,40,1,0)
1^ATTRIBUTE FUNCTION^3
"KRN",.404,523,40,1,1)
.04
"KRN",.404,523,40,1,2)
1,21^30^1,1
"KRN",.404,523,40,2,0)
2^CONJUNCTION^3
"KRN",.404,523,40,2,1)
.05
"KRN",.404,523,40,2,2)
2,21^3^2,8
"KRN",.404,523,40,2,10)
D CKTCONJ^DIACX
"KRN",.404,524,0)
DIAC POLICY 3.1^1.605
"KRN",.404,524,40,0)
^.4044I^5^5
"KRN",.404,524,40,1,0)
1^SUBFILE FIELDS OR CONTINUATION STRINGS^1
"KRN",.404,524,40,1,2)
^^1,1
"KRN",.404,524,40,2,0)
2^SUB/FILE#^3
"KRN",.404,524,40,2,1)
.01
"KRN",.404,524,40,2,2)
3,12^15^3,1
"KRN",.404,524,40,3,0)
3^LEVEL^3
"KRN",.404,524,40,3,1)
.02
"KRN",.404,524,40,3,2)
3,39^1^3,32
"KRN",.404,524,40,4,0)
4^SEQUENCE^3
"KRN",.404,524,40,4,1)
.03
"KRN",.404,524,40,4,2)
4,12^2^4,2
"KRN",.404,524,40,5,0)
5^DR^3
"KRN",.404,524,40,5,1)
.04
"KRN",.404,524,40,5,2)
6,12^53^6,8
"KRN",19,5148,-1)
2^10
"KRN",19,5148,0)
DIOTHER^Other Options^^M^1114^^^^^^^^^
"KRN",19,5148,10,0)
^19.01IP^11^11
"KRN",19,5148,10,10,0)
14397^^10
"KRN",19,5148,10,10,"^")
DIACCESS
"KRN",19,5148,"U")
OTHER OPTIONS
"KRN",19,14397,-1)
0^9
"KRN",19,14397,0)
DIACCESS^Data Access Control^^M^^^^^^^^
"KRN",19,14397,1,0)
^19.06^2^2^3170215^^^
"KRN",19,14397,1,1,0)
This menu contains options that allow creation and management of Data
"KRN",19,14397,1,2,0)
Access Control policies for VistA files.
"KRN",19,14397,10,0)
^19.01IP^7^7
"KRN",19,14397,10,1,0)
14398^^2
"KRN",19,14397,10,1,"^")
DIAC EDIT
"KRN",19,14397,10,2,0)
14399^^3
"KRN",19,14397,10,2,"^")
DIAC TEST
"KRN",19,14397,10,3,0)
14404^^4
"KRN",19,14397,10,3,"^")
DIAC DISABLE
"KRN",19,14397,10,4,0)
14400^^5
"KRN",19,14397,10,4,"^")
DIAC DELETE
"KRN",19,14397,10,5,0)
14401^^6
"KRN",19,14397,10,5,"^")
DIAC PRINT
"KRN",19,14397,10,6,0)
14403^^7
"KRN",19,14397,10,6,"^")
DIAC FUNCTIONS
"KRN",19,14397,10,7,0)
14402^^1
"KRN",19,14397,10,7,"^")
DIAC ACTIONS
"KRN",19,14397,99)
64331,51193
"KRN",19,14397,"U")
DATA ACCESS CONTROL
"KRN",19,14398,-1)
0^5
"KRN",19,14398,0)
DIAC EDIT^Edit/Create an Action Policy^^R^^^^^^^^^^
"KRN",19,14398,1,0)
^19.06^1^1^3170215^^^^
"KRN",19,14398,1,1,0)
This option provides access to the DAC Policy Editor.
"KRN",19,14398,20)

"KRN",19,14398,25)
EN^DIACLM
"KRN",19,14398,"U")
EDIT/CREATE AN ACTION POLICY
"KRN",19,14399,-1)
0^8
"KRN",19,14399,0)
DIAC TEST^Test a Policy^^A^^^^^^^^^^1^1
"KRN",19,14399,1,0)
^19.06^1^1^3170207^^
"KRN",19,14399,1,1,0)
This option allows a user to test a DAC policy.
"KRN",19,14399,15)
K DITOP
"KRN",19,14399,20)
S DITOP=$$SELECT^DIACLM Q:DITOP<1  D EN^DIAC1T
"KRN",19,14399,"U")
TEST A POLICY
"KRN",19,14400,-1)
0^3
"KRN",19,14400,0)
DIAC DELETE^Delete a Policy^^A^^^^^^^^^^1^1
"KRN",19,14400,1,0)
^19.06^1^1^3170208^^
"KRN",19,14400,1,1,0)
This option allows deleting a policy.
"KRN",19,14400,15)
K DA
"KRN",19,14400,20)
S DA=+$$SELECT^DIACLM Q:DA<1  D DEL^DIACLM1
"KRN",19,14400,"U")
DELETE A POLICY
"KRN",19,14401,-1)
0^7
"KRN",19,14401,0)
DIAC PRINT^Print Actions/Policies^^R^^^^^^^^
"KRN",19,14401,1,0)
^^2^2^3170217^
"KRN",19,14401,1,1,0)
This option allows printing a list of application actions and policies,
"KRN",19,14401,1,2,0)
or details of one policy.
"KRN",19,14401,25)
EN^DIACP
"KRN",19,14401,"U")
PRINT ACTIONS/POLICIES
"KRN",19,14402,-1)
0^2
"KRN",19,14402,0)
DIAC ACTIONS^Set Up Application Actions^^R^^^^^^^^
"KRN",19,14402,1,0)
^19.06^1^1^3170215^^
"KRN",19,14402,1,1,0)
This option provides access to the Application Action file.
"KRN",19,14402,25)
ACTIONS^DIACLM1
"KRN",19,14402,"U")
SET UP APPLICATION ACTIONS
"KRN",19,14403,-1)
0^6
"KRN",19,14403,0)
DIAC FUNCTIONS^Policy Functions^^R^^^^^^^^
"KRN",19,14403,1,0)
^^1^1^3170208^
"KRN",19,14403,1,1,0)
This option provides access to the Policy Function file.
"KRN",19,14403,25)
FCNS^DIACLM1
"KRN",19,14403,"U")
POLICY FUNCTIONS
"KRN",19,14404,-1)
0^4
"KRN",19,14404,0)
DIAC DISABLE^Disable a Policy^^A^^^^^^^^^^1^1
"KRN",19,14404,1,0)
^19.06^1^1^3170208^^^
"KRN",19,14404,1,1,0)
This option provides a way to quickly disable a policy.
"KRN",19,14404,15)
K DA
"KRN",19,14404,20)
S DA=+$$SELECT^DIACLM Q:DA<1  D DIS^DIACLM1
"KRN",19,14404,50)

"KRN",19,14404,51)

"KRN",19,14404,"U")
DISABLE A POLICY
"KRN",101,6149,-1)
0^11
"KRN",101,6149,0)
DIAC MEMBERS^Add/Remove Members^^A^^^^^^^^
"KRN",101,6149,20)
D ADD^DIACLM1
"KRN",101,6149,99)
64330,29967
"KRN",101,6150,-1)
0^3
"KRN",101,6150,0)
DIAC CHANGE^Select New Policy^^A^^^^^^^^
"KRN",101,6150,20)
D CHANGE^DIACLM1
"KRN",101,6150,99)
64119,39989
"KRN",101,6151,-1)
0^4
"KRN",101,6151,0)
DIAC DELETE^Delete a Policy^^A^^^^^^^^
"KRN",101,6151,20)
D DELETE^DIACLM1
"KRN",101,6151,99)
64330,30062
"KRN",101,6152,-1)
0^9
"KRN",101,6152,0)
DIAC INQUIRE^Inquiry^^A^^^^^^^^
"KRN",101,6152,20)
D DETAIL^DIACLM1
"KRN",101,6152,99)
64119,40130
"KRN",101,6153,-1)
0^10
"KRN",101,6153,0)
DIAC LINK ACTION^Link to Appl Action^^A^^^^^^^^
"KRN",101,6153,20)
D FULL^VALM1,LINK^DIACLM1 S VALMBCK="R"
"KRN",101,6153,99)
64330,29785
"KRN",101,6154,-1)
0^8
"KRN",101,6154,0)
DIAC FUNCTIONS^Functions^^A^^^^^^^^
"KRN",101,6154,20)
D FULL^VALM1,FCNS^DIACLM1 S VALMBCK="R"
"KRN",101,6154,99)
64119,40179
"KRN",101,6155,-1)
0^6
"KRN",101,6155,0)
DIAC EDIT^Edit a Policy^^A^^^^^^^^
"KRN",101,6155,20)
D EDIT^DIACLM1
"KRN",101,6155,99)
64330,30054
"KRN",101,6156,-1)
0^7
"KRN",101,6156,0)
DIAC EXPAND^Expand/Collapse^^A^^^^^^^^
"KRN",101,6156,20)
D EXPAND^DIACLM1
"KRN",101,6156,99)
64119,40261
"KRN",101,6158,-1)
0^12
"KRN",101,6158,0)
DIAC QUIT^Quit^^A^^^^^^^^
"KRN",101,6158,20)
D EXIT^DIACLM1
"KRN",101,6158,99)
64119,40293
"KRN",101,6159,-1)
0^13
"KRN",101,6159,0)
DIAC TEST^Test Policy^^A^^^^^^^^
"KRN",101,6159,20)
D TEST^DIACLM1
"KRN",101,6159,24)
I $O(^DIAC(1.61,"D",+$G(DITOP),0))
"KRN",101,6159,99)
64119,40311
"KRN",101,6161,-1)
0^1
"KRN",101,6161,0)
DIAC ACTION MENU^Policy Action Menu^^M^^^^^^^^
"KRN",101,6161,4)
26^5
"KRN",101,6161,10,0)
^101.01PA^13^12
"KRN",101,6161,10,1,0)
6149^^11^
"KRN",101,6161,10,1,"^")
DIAC MEMBERS
"KRN",101,6161,10,2,0)
6155^^12^
"KRN",101,6161,10,2,"^")
DIAC EDIT
"KRN",101,6161,10,3,0)
6151^^13^
"KRN",101,6161,10,3,"^")
DIAC DELETE
"KRN",101,6161,10,4,0)
6156^^21^
"KRN",101,6161,10,4,"^")
DIAC EXPAND
"KRN",101,6161,10,5,0)
6152^^22^
"KRN",101,6161,10,5,"^")
DIAC INQUIRE
"KRN",101,6161,10,7,0)
6150^^33^
"KRN",101,6161,10,7,"^")
DIAC CHANGE
"KRN",101,6161,10,8,0)
6158^^34^
"KRN",101,6161,10,8,"^")
DIAC QUIT
"KRN",101,6161,10,9,0)
6159^^31^
"KRN",101,6161,10,9,"^")
DIAC TEST
"KRN",101,6161,10,10,0)
6153^^24^
"KRN",101,6161,10,10,"^")
DIAC LINK ACTION
"KRN",101,6161,10,11,0)
6154^^23^
"KRN",101,6161,10,11,"^")
DIAC FUNCTIONS
"KRN",101,6161,10,12,0)
6185^^14^^^   
"KRN",101,6161,10,12,"^")
DIAC BLANK LINE
"KRN",101,6161,10,13,0)
6186^^32^
"KRN",101,6161,10,13,"^")
DIAC DISABLE
"KRN",101,6161,24)

"KRN",101,6161,26)
D SHOW^VALM
"KRN",101,6161,28)
Select Action: 
"KRN",101,6161,99)
64330,30321
"KRN",101,6185,-1)
0^2
"KRN",101,6185,0)
DIAC BLANK LINE^Blank Line^^A^^^^^^^^
"KRN",101,6185,20)
Q
"KRN",101,6185,99)
64239,45498
"KRN",101,6186,-1)
0^5
"KRN",101,6186,0)
DIAC DISABLE^Disable a Policy^^A^^^^^^^^
"KRN",101,6186,20)
D DISABLE^DIACLM1
"KRN",101,6186,99)
64330,30074
"KRN",409.61,811,-1)
0^1
"KRN",409.61,811,0)
DIAC POLICY EDITOR^1^^80^5^18^0^1^Item^DIAC ACTION MENU^Data Access Control^1^^1
"KRN",409.61,811,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,811,"ARRAY")
 ^TMP("DIAC",$J)
"KRN",409.61,811,"COL",0)
^409.621^4^4
"KRN",409.61,811,"COL",1,0)
NUMBER^1^5
"KRN",409.61,811,"COL",2,0)
NAME^6^40^ Name
"KRN",409.61,811,"COL",3,0)
RESULT^60^19^Result
"KRN",409.61,811,"COL",4,0)
TYPE^50^9^Type
"KRN",409.61,811,"COL","B","NAME",2)

"KRN",409.61,811,"COL","B","NUMBER",1)

"KRN",409.61,811,"COL","B","RESULT",3)

"KRN",409.61,811,"COL","B","TYPE",4)

"KRN",409.61,811,"FNL")
D EXIT^DIACLM
"KRN",409.61,811,"HDR")
D HDR^DIACLM
"KRN",409.61,811,"HLP")
D HELP^DIACLM
"KRN",409.61,811,"INIT")
D INIT^DIACLM
"MBREQ")
0
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",11,-1)
1^1
"PKG",11,0)
VA FILEMAN^DI^FM INIT
"PKG",11,22,0)
^9.49I^1^1
"PKG",11,22,1,0)
22.2^3160105^3170227^1114
"PKG",11,22,1,"PAH",1,0)
8^3170509
"PKG",11,22,1,"PAH",1,1,0)
^^1^1^3170509
"PKG",11,22,1,"PAH",1,1,1,0)
Please refer to the Description in Forum Patch Module for details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
11
"RTN","DIAC1")
0^19^B60228827^n/a
"RTN","DIAC1",1,0)
DIAC1 ;SLCISC/KCM,MKB - Policy Evaluation API's ;17FEB2017
"RTN","DIAC1",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIAC1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIAC1",4,0)
 ;
"RTN","DIAC1",5,0)
CANDO(DIFN,DIENS,DIACTN,DIUSR,DIVAL,DIFLDS,DITXT,DIERROR) ;main API
"RTN","DIAC1",6,0)
 ; Can user take requested action on [given record in] this file?
"RTN","DIAC1",7,0)
 ; 
"RTN","DIAC1",8,0)
 ; Returns 1 = Yes (permit)
"RTN","DIAC1",9,0)
 ;         0 = No  (deny)
"RTN","DIAC1",10,0)
 ;        "" = Undetermined/no applicable policy
"RTN","DIAC1",11,0)
 ;        -1 = Error
"RTN","DIAC1",12,0)
 ;
"RTN","DIAC1",13,0)
 N DIPOL,DIACT,DIUSRNM,DIRESULT,Y
"RTN","DIAC1",14,0)
 D CLEAN^DILF K DIFLDS
"RTN","DIAC1",15,0)
 S DIRESULT=""
"RTN","DIAC1",16,0)
 ;
"RTN","DIAC1",17,0)
 ; validate input parameters
"RTN","DIAC1",18,0)
 S:$G(DIUSR)="" DIUSR=DUZ
"RTN","DIAC1",19,0)
 I '$D(^VA(200,+DIUSR,0)) D ERROR(202,"USER") Q
"RTN","DIAC1",20,0)
 S DIUSRNM=$P($G(^VA(200,+DIUSR,0)),U)
"RTN","DIAC1",21,0)
 ;
"RTN","DIAC1",22,0)
 I $G(DIACTN),DIACTN=+DIACTN D  G CQ:$G(DIERR),C1 ;IEN vs name
"RTN","DIAC1",23,0)
 . N X0 S X0=$G(^DIAC(1.61,+DIACTN,0))
"RTN","DIAC1",24,0)
 . I X0="" D ERROR(202,"ACTION") Q
"RTN","DIAC1",25,0)
 . S DIACT=+DIACTN,DIACTN=$P(X0,U,3),DIPOL=$P(X0,U,5)
"RTN","DIAC1",26,0)
 . S:'$G(DIFN) DIFN=$P(X0,U,2)
"RTN","DIAC1",27,0)
 ;
"RTN","DIAC1",28,0)
 I $G(DIFN)="" D ERROR(202,"FILE") G CQ
"RTN","DIAC1",29,0)
 I '$$VFILE^DILFD(DIFN) D ERROR(401,DIFN) G CQ
"RTN","DIAC1",30,0)
 I $G(DIENS),'$$VIENS(DIENS,DIFN) G CQ
"RTN","DIAC1",31,0)
 I $G(DIACTN)="" D ERROR(202,"ACTION") G CQ
"RTN","DIAC1",32,0)
 ;
"RTN","DIAC1",33,0)
C1 ; find & evaluate policy
"RTN","DIAC1",34,0)
 S:'$G(DIPOL) DIPOL=$$FIND(DIFN,DIACTN),DIACT=+$P(DIPOL,U,2)
"RTN","DIAC1",35,0)
 I DIPOL S DIPOL=+DIPOL D EN
"RTN","DIAC1",36,0)
 ;
"RTN","DIAC1",37,0)
CQ ;return result
"RTN","DIAC1",38,0)
 S Y=$S($G(DIERR):-1,DIRESULT="P":1,DIRESULT="D":0,1:"")
"RTN","DIAC1",39,0)
 I Y>0,'$L($G(DIFLDS)) D FIELDS(DIACT,1.61)
"RTN","DIAC1",40,0)
 Q Y
"RTN","DIAC1",41,0)
 ;
"RTN","DIAC1",42,0)
FIND(FILE,ACTION) ; -- find matching Event, return Policy^Event iens
"RTN","DIAC1",43,0)
 N I,X,Y S Y=""
"RTN","DIAC1",44,0)
 I $G(FILE)<1!($G(ACTION)="") G FQ
"RTN","DIAC1",45,0)
 S I=0 F  S I=+$O(^DIAC(1.61,"C",FILE,$$UP^XLFSTR(ACTION),I)) Q:I<1  D  Q:Y
"RTN","DIAC1",46,0)
 . S X=$P(^DIAC(1.61,I,0),U,5) ;default policy for event
"RTN","DIAC1",47,0)
 . I X S Y=X_U_I
"RTN","DIAC1",48,0)
FQ Q Y
"RTN","DIAC1",49,0)
 ;
"RTN","DIAC1",50,0)
EN ; -- process policy DIPOL, returns DIRESULT (P/D)
"RTN","DIAC1",51,0)
 ; Expects all input parameters from $$CANDO to be defined and valid
"RTN","DIAC1",52,0)
 ; If DIZTRACE = true, the execution trace will be captured
"RTN","DIAC1",53,0)
 ;
"RTN","DIAC1",54,0)
 I +$G(DIPOL)'>0 D ERROR(330,$G(DIPOL),"POLICY") Q
"RTN","DIAC1",55,0)
 I $$DISABLED(DIPOL) D:$G(DIZTRACE) TRACE(DIPOL,0,-1) Q  ;error??
"RTN","DIAC1",56,0)
 ;
"RTN","DIAC1",57,0)
 N DIFCN,DITYPE,DISTK,DISEQ,DIACMSG
"RTN","DIAC1",58,0)
 S:'$L($G(DITXT)) DITXT=$NA(^TMP("DIMSG",$J))
"RTN","DIAC1",59,0)
 ;
"RTN","DIAC1",60,0)
 D FCN(DIPOL)
"RTN","DIAC1",61,0)
 S DITYPE=$P($G(^DIAC(1.6,DIPOL,0)),U,2),DISTK=0
"RTN","DIAC1",62,0)
 I DITYPE="P" S DIRESULT=$$POLICY(DIPOL) G ENQ
"RTN","DIAC1",63,0)
 I DITYPE'="S" D ERROR(330,$G(DIPOL),"primary policy") Q
"RTN","DIAC1",64,0)
 D:$G(DIZTRACE) TRACE(DIPOL,DISTK,1)
"RTN","DIAC1",65,0)
 ;
"RTN","DIAC1",66,0)
 ; initialize stack if a set, loop until DONE
"RTN","DIAC1",67,0)
 ;   DISTK = stack level being processed
"RTN","DIAC1",68,0)
 ;   DISTK(DISTK) = parent Policy IEN ^ SEQ of last member processed
"RTN","DIAC1",69,0)
 S DISTK=1,DISTK(DISTK)=DIPOL_"^0",DISTK(0)=0,DISEQ=0
"RTN","DIAC1",70,0)
 F  S DISEQ=$O(^DIAC(1.6,+DISTK(DISTK),10,"AC",DISEQ)) D @$S($$DONE(+DISTK(DISTK)):"POP",+DISEQ'>0:"POP",1:"PROC") Q:DISTK<1
"RTN","DIAC1",71,0)
 ;
"RTN","DIAC1",72,0)
ENQ ; exit
"RTN","DIAC1",73,0)
 I DIRESULT="" S DIRESULT=$G(DIFCN(DIPOL,"NULL"))
"RTN","DIAC1",74,0)
 I DIRESULT'="",$D(DIACMSG(DIRESULT)) D  ;get messages
"RTN","DIAC1",75,0)
 . S DIMSG=+$G(DIACMSG(DIRESULT)) Q:DIMSG<1
"RTN","DIAC1",76,0)
 . M @DITXT=DIACMSG(DIRESULT)
"RTN","DIAC1",77,0)
 Q
"RTN","DIAC1",78,0)
 ;
"RTN","DIAC1",79,0)
POP ; -- pop the stack [set]
"RTN","DIAC1",80,0)
 D:$G(DIZTRACE) TRACE(+DISTK(DISTK),DISTK-1,2)
"RTN","DIAC1",81,0)
 ;
"RTN","DIAC1",82,0)
 ; tie up current level
"RTN","DIAC1",83,0)
 I DIRESULT="" S DIRESULT=$G(DIFCN(+DISTK(DISTK),"NULL"))
"RTN","DIAC1",84,0)
 I $L(DIRESULT) D ADDMSG(+DISTK(DISTK),DIRESULT),OBLIG(+DISTK(DISTK),DIRESULT),FIELDS(+DISTK(DISTK),1.6)
"RTN","DIAC1",85,0)
 ;
"RTN","DIAC1",86,0)
 ; pop the stack
"RTN","DIAC1",87,0)
 S DISTK=DISTK-1,DISEQ=$P(DISTK(DISTK),U,2)
"RTN","DIAC1",88,0)
 Q
"RTN","DIAC1",89,0)
 ;
"RTN","DIAC1",90,0)
PROC ; -- process member
"RTN","DIAC1",91,0)
 N DIEM
"RTN","DIAC1",92,0)
 S $P(DISTK(DISTK),U,2)=DISEQ
"RTN","DIAC1",93,0)
 S DIEM=+$O(^DIAC(1.6,+DISTK(DISTK),10,"AC",DISEQ,0)) Q:DIEM<1
"RTN","DIAC1",94,0)
 D FCN(DIEM)
"RTN","DIAC1",95,0)
 ;
"RTN","DIAC1",96,0)
 ; if target doesn't match, save item in Trace & quit to next sibling
"RTN","DIAC1",97,0)
 I '$$MATCH(DIEM) D:$G(DIZTRACE) TRACE(DIEM,DISTK,0) Q
"RTN","DIAC1",98,0)
 I $$DISABLED(DIEM) D:$G(DIZTRACE) TRACE(DIEM,DISTK,-1) Q
"RTN","DIAC1",99,0)
 ;
"RTN","DIAC1",100,0)
 ; if policy set, push stack and reset member loop
"RTN","DIAC1",101,0)
 I $P($G(^DIAC(1.6,DIEM,0)),U,2)="S" D  Q
"RTN","DIAC1",102,0)
 . D:$G(DIZTRACE) TRACE(DIEM,DISTK,1)
"RTN","DIAC1",103,0)
 . S DISTK=DISTK+1,DISTK(DISTK)=DIEM_"^0",DISEQ=0
"RTN","DIAC1",104,0)
 ;
"RTN","DIAC1",105,0)
 ; else evaluate policy
"RTN","DIAC1",106,0)
 S DIRESULT=$$POLICY(DIEM)
"RTN","DIAC1",107,0)
 Q
"RTN","DIAC1",108,0)
 ;
"RTN","DIAC1",109,0)
POLICY(DIEN) ; -- loop on matching rules of policy DIEN
"RTN","DIAC1",110,0)
 N DIRESULT,DISEQ,DIRULE,DIEFFECT Q:$G(DIEN)<1
"RTN","DIAC1",111,0)
 D:$G(DIZTRACE) TRACE(DIEN,DISTK,1)
"RTN","DIAC1",112,0)
 ;
"RTN","DIAC1",113,0)
 S DISEQ=0,DIRESULT="" ;loop on rules, process if target matches:
"RTN","DIAC1",114,0)
 F  S DISEQ=$O(^DIAC(1.6,DIEN,10,"AC",DISEQ)) Q:DISEQ<1  D  I $$DONE(DIEN) D:$G(DIZTRACE) TRACE(DIEN,DISTK,2) Q
"RTN","DIAC1",115,0)
 . S DIRULE=+$O(^DIAC(1.6,DIEN,10,"AC",DISEQ,0)) Q:DIRULE<1
"RTN","DIAC1",116,0)
 . D FCN(DIRULE)
"RTN","DIAC1",117,0)
 . I '$$MATCH(DIRULE) D:$G(DIZTRACE) TRACE(DIRULE,DISTK+1,0) Q
"RTN","DIAC1",118,0)
 . I $$DISABLED(DIRULE) D:$G(DIZTRACE) TRACE(DIRULE,DISTK+1,-1) Q
"RTN","DIAC1",119,0)
 . D:$G(DIZTRACE) TRACE(DIRULE,DISTK+1,1)
"RTN","DIAC1",120,0)
 . ;
"RTN","DIAC1",121,0)
 . S DIEFFECT=$P($G(^DIAC(1.6,DIRULE,0)),U,8)
"RTN","DIAC1",122,0)
 . I $$COND(DIRULE) S DIRESULT=DIEFFECT  ; true -> return Effect
"RTN","DIAC1",123,0)
 . E  S DIRESULT=$TR(DIEFFECT,"PD","DP") ;false -> return opposite
"RTN","DIAC1",124,0)
 . ;
"RTN","DIAC1",125,0)
 . I $L(DIRESULT) D ADDMSG(DIRULE,DIRESULT),OBLIG(DIRULE,DIRESULT),FIELDS(DIRULE,1.6)
"RTN","DIAC1",126,0)
 . S:$G(DIZTRACE) $P(DIZTRACE(DIZ),U,4)=DIRESULT
"RTN","DIAC1",127,0)
 I DISEQ<1 D:$G(DIZTRACE) TRACE(DIEN,DISTK,2) ;capture trace I '$$DONE
"RTN","DIAC1",128,0)
 ;
"RTN","DIAC1",129,0)
 ; check for quit value (if null), or Deny Message
"RTN","DIAC1",130,0)
 I DIRESULT="" S DIRESULT=$G(DIFCN(DIEN,"NULL"))
"RTN","DIAC1",131,0)
 I $L(DIRESULT) D ADDMSG(DIEN,DIRESULT),OBLIG(DIEN,DIRESULT),FIELDS(DIEN,1.6)
"RTN","DIAC1",132,0)
 Q DIRESULT
"RTN","DIAC1",133,0)
 ;
"RTN","DIAC1",134,0)
MATCH(IEN) ; -- return 1 or 0, if target matches
"RTN","DIAC1",135,0)
 N X,Y,CONJ,KEY,DONE
"RTN","DIAC1",136,0)
 S IEN=+$G(IEN),CONJ=$P($G(^DIAC(1.6,IEN,0)),U,5),Y=1,DONE=0
"RTN","DIAC1",137,0)
 S KEY="" F  S KEY=$O(^DIAC(1.6,IEN,2,"AKEY",KEY)) Q:KEY=""  D  Q:DONE
"RTN","DIAC1",138,0)
 . S X=$G(DIVAL(KEY))
"RTN","DIAC1",139,0)
 . I $L(X),$D(^DIAC(1.6,IEN,2,"AKEY",KEY,X)) S Y=1
"RTN","DIAC1",140,0)
 . E  S Y=0
"RTN","DIAC1",141,0)
 . S DONE=$S(CONJ="!"&Y:1,CONJ="&"&'Y:1,CONJ="":Y,1:0)
"RTN","DIAC1",142,0)
MQ ;done
"RTN","DIAC1",143,0)
 Q Y
"RTN","DIAC1",144,0)
 ;
"RTN","DIAC1",145,0)
DISABLED(IEN) ; -- return 1 or 0, if item is disabled
"RTN","DIAC1",146,0)
 Q +$P($G(^DIAC(1.6,+$G(IEN),0)),U,3)
"RTN","DIAC1",147,0)
 ;
"RTN","DIAC1",148,0)
FCN(IEN) ; -- run attribute function to accummulate DIVAL(key)=value
"RTN","DIAC1",149,0)
 N FCN,CODE S IEN=+$G(IEN)
"RTN","DIAC1",150,0)
 S FCN=+$P($G(^DIAC(1.6,IEN,0)),U,4) ;attributes
"RTN","DIAC1",151,0)
 I FCN S CODE=$G(^DIAC(1.62,FCN,1)) X:$L(CODE) CODE
"RTN","DIAC1",152,0)
 ;
"RTN","DIAC1",153,0)
 ; and stash quit condition code in DIFCN(IEN) for reuse in Member loop
"RTN","DIAC1",154,0)
 S FCN=+$P($G(^DIAC(1.6,IEN,0)),U,7) Q:FCN<1
"RTN","DIAC1",155,0)
 S DIFCN(IEN)=$G(^DIAC(1.62,FCN,1)) ;Result Function code
"RTN","DIAC1",156,0)
 S DIFCN(IEN,"NULL")=$P($G(^DIAC(1.62,FCN,0)),U,4)
"RTN","DIAC1",157,0)
 Q
"RTN","DIAC1",158,0)
 ;
"RTN","DIAC1",159,0)
DONE(IEN) ; -- return 1 or 0, if quit condition is met for policy IEN
"RTN","DIAC1",160,0)
 N Y,CODE
"RTN","DIAC1",161,0)
 S IEN=+$G(IEN),Y=0
"RTN","DIAC1",162,0)
 S CODE=$G(DIFCN(IEN)) X:$L(CODE) CODE ;must set Y
"RTN","DIAC1",163,0)
 ;i.e., I DIRESULT="D" S Y=1
"RTN","DIAC1",164,0)
 Q $G(Y)
"RTN","DIAC1",165,0)
 ;
"RTN","DIAC1",166,0)
COND(IEN) ; -- evaluate any rule IEN conditions [return boolean in Y]
"RTN","DIAC1",167,0)
 N CONJ,DONE,Y,DII,DA,X,X0,FCN,CODE
"RTN","DIAC1",168,0)
 S IEN=+$G(IEN),CONJ=$P($G(^DIAC(1.6,IEN,0)),U,6),DONE=0
"RTN","DIAC1",169,0)
 S Y=1,DII=0 ;return true if no conditions
"RTN","DIAC1",170,0)
 F  S DII=$O(^DIAC(1.6,IEN,3,"B",DII)) Q:DII<1  S DA=+$O(^(DII,0)) D  Q:DONE
"RTN","DIAC1",171,0)
 . S X0=$G(^DIAC(1.6,IEN,3,DA,0)),X=$P(X0,U,3)
"RTN","DIAC1",172,0)
 . ; Operator function may use X, must return boolean in Y
"RTN","DIAC1",173,0)
 . S FCN=+$P(X0,U,2) I FCN D
"RTN","DIAC1",174,0)
 .. S CODE=$G(^DIAC(1.62,FCN,1)) X:$L(CODE) CODE
"RTN","DIAC1",175,0)
 .. D:$G(DIZTRACE) TRACE(DA,DISTK+2,Y,DII)
"RTN","DIAC1",176,0)
 . S DONE=$S(CONJ="!"&Y:1,CONJ="&"&'Y:1,CONJ="":Y,1:0)
"RTN","DIAC1",177,0)
 Q Y
"RTN","DIAC1",178,0)
 ;
"RTN","DIAC1",179,0)
ADDMSG(IEN,RES) ; -- add line to DIMSG array
"RTN","DIAC1",180,0)
 N I,N,X,Y Q:'$L($G(RES))
"RTN","DIAC1",181,0)
 S N=$S(RES="D":7,RES="P":8,1:"") Q:N<1
"RTN","DIAC1",182,0)
 S X=$P($G(^DIAC(1.6,+$G(IEN),N)),U,2) Q:'$L(X)
"RTN","DIAC1",183,0)
 I X["|" D  ;look for |VAR|
"RTN","DIAC1",184,0)
 . F I=2:2:$L(X,"|") S Y=$P(X,"|",I) I Y?1.A D
"RTN","DIAC1",185,0)
 .. I $D(@Y) S $P(X,"|",I)=@Y Q
"RTN","DIAC1",186,0)
 .. I $D(DIVAL(Y)) S $P(X,"|",I)=DIVAL(Y) Q
"RTN","DIAC1",187,0)
 . S X=$TR(X,"|","")
"RTN","DIAC1",188,0)
 ; DIMSG=+$G(DIMSG)+1,@DITXT@(DIMSG)=X
"RTN","DIAC1",189,0)
 S DIACMSG(RES,$$MSG)=X
"RTN","DIAC1",190,0)
 Q
"RTN","DIAC1",191,0)
MSG() ;
"RTN","DIAC1",192,0)
 N I S I=+$G(DIACMSG(RES))+1
"RTN","DIAC1",193,0)
 S DIACMSG(RES)=I
"RTN","DIAC1",194,0)
 Q I
"RTN","DIAC1",195,0)
 ;
"RTN","DIAC1",196,0)
OBLIG(IEN,RES) ; -- execute obligation code
"RTN","DIAC1",197,0)
 N N,FCN,CODE Q:'$L($G(RES))
"RTN","DIAC1",198,0)
 S N=$S(RES="D":7,RES="P":8,1:"") Q:N<1
"RTN","DIAC1",199,0)
 S FCN=+$G(^DIAC(1.6,+$G(IEN),N))
"RTN","DIAC1",200,0)
 I FCN S CODE=$G(^DIAC(1.62,FCN,1)) X:$L(CODE) CODE
"RTN","DIAC1",201,0)
 Q
"RTN","DIAC1",202,0)
 ;
"RTN","DIAC1",203,0)
FIELDS(IEN,FN) ; -- return available fields in DIFLDS
"RTN","DIAC1",204,0)
 Q:$G(DIRESULT)'="P"  ;on permit only
"RTN","DIAC1",205,0)
 Q:$G(DIFLDS)'=""     ;lowest level takes precedence
"RTN","DIAC1",206,0)
 Q:'$L($G(^DIAC(+$G(FN),+$G(IEN),5)))
"RTN","DIAC1",207,0)
 N I,L,S,DR S DIFLDS=$G(^DIAC(FN,IEN,5)),I=0
"RTN","DIAC1",208,0)
 F  S I=$O(^DIAC(FN,IEN,5.1,I)) Q:I<1  S X=$G(^(I,0)) I X D
"RTN","DIAC1",209,0)
 . S L=+$P(X,U,2),S=$P(X,U,3),DR=$P(X,U,4) Q:DR=""
"RTN","DIAC1",210,0)
 . I S>0 S DIFLDS(L,+X,+S)=DR
"RTN","DIAC1",211,0)
 . E  S DIFLDS(L,+X)=DR
"RTN","DIAC1",212,0)
 S:$G(DIZTRACE) DIZTRACE("FLDS")=FN_U_IEN
"RTN","DIAC1",213,0)
 Q
"RTN","DIAC1",214,0)
 ;
"RTN","DIAC1",215,0)
VIENS(IENS,FN) ; -- validate IENS string for file# FN
"RTN","DIAC1",216,0)
 N GBL S GBL=$$ROOT^DILFD(FN,IENS,,1)
"RTN","DIAC1",217,0)
 I $G(DIERR) D:$D(DIERROR)  Q 0
"RTN","DIAC1",218,0)
 . ;add message to end of provided array
"RTN","DIAC1",219,0)
 . N I S I=+$O(@DIERROR@(""),-1)
"RTN","DIAC1",220,0)
 . S:I I=I+1,@DIERROR@(I)=" "
"RTN","DIAC1",221,0)
 . S @DIERROR@(I+1)=$G(^TMP("DIERR",$J,1,"TEXT",1))
"RTN","DIAC1",222,0)
 I '$D(@(GBL_+IENS_")")) D ERROR(601) Q 0
"RTN","DIAC1",223,0)
 Q 1
"RTN","DIAC1",224,0)
 ;
"RTN","DIAC1",225,0)
ERROR(CODE,PARAM,TYPE) ; -- create error message
"RTN","DIAC1",226,0)
 I '$L($G(TYPE)) D BLD^DIALOG(CODE,$G(PARAM),,$G(DIERROR)) Q
"RTN","DIAC1",227,0)
 N DIX S DIX(1)=$G(PARAM),DIX(2)=$G(TYPE)
"RTN","DIAC1",228,0)
 D BLD^DIALOG(CODE,.DIX,,$G(DIERROR))
"RTN","DIAC1",229,0)
 Q
"RTN","DIAC1",230,0)
 ;
"RTN","DIAC1",231,0)
TRACE(IEN,STK,ACT,COND) ; -- set trace array
"RTN","DIAC1",232,0)
 ; DIZTRACE(#)   = PolicyIEN ^ stack level ^ match? (1/0)
"RTN","DIAC1",233,0)
 ;       or      = PolicyIEN ^ stack level ^ done (2) ^ ResultFcnIEN
"RTN","DIAC1",234,0)
 ; DIZTRACE(#,c) = ConditionDA ^ stack level ^ result (1/0)
"RTN","DIAC1",235,0)
 ;
"RTN","DIAC1",236,0)
 I $G(COND) S DIZTRACE(+$G(DIZ),COND)=$G(IEN)_U_$G(STK)_U_$G(ACT) Q
"RTN","DIAC1",237,0)
 N RES S RES=$S($G(ACT)=2:$P($G(^DIAC(1.6,+$G(IEN),0)),U,7),1:"")
"RTN","DIAC1",238,0)
 S DIZTRACE($$NXT)=$G(IEN)_U_$G(STK)_U_$G(ACT)_U_RES
"RTN","DIAC1",239,0)
 Q
"RTN","DIAC1",240,0)
 ;
"RTN","DIAC1",241,0)
NXT() ; -- increment trace array subscript
"RTN","DIAC1",242,0)
 S DIZ=+$G(DIZ)+1
"RTN","DIAC1",243,0)
 Q DIZ
"RTN","DIAC1T")
0^20^B47977715^n/a
"RTN","DIAC1T",1,0)
DIAC1T ;SLCISC/MKB - Test utility for Policies ;17FEB2017
"RTN","DIAC1T",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIAC1T",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIAC1T",4,0)
 ;
"RTN","DIAC1T",5,0)
EN ; -- test the current policy set [expects DITOP]
"RTN","DIAC1T",6,0)
 N DIACT,DIPOL,DIFN,DIACTN,DIENS,DIUSR,DIUSRNM,DIZ,DIZTRACE,DIVAL,DITXT,DIRESULT,DIMSG,DIERR,DIFLDS
"RTN","DIAC1T",7,0)
 S DIPOL=+$G(DITOP) I DIPOL<1 S VALMBCK="" Q
"RTN","DIAC1T",8,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","DIAC1T",9,0)
 S DIACT=$$ACTION Q:DIACT="^"
"RTN","DIAC1T",10,0)
 I DIACT<1 W !!,"NOTE: This policy is not tied to an Application Action (file and action)."
"RTN","DIAC1T",11,0)
 S DIFN=$P($G(^DIAC(1.61,+DIACT,0)),U,2),DIACTN=$P($G(^(0)),U,3)
"RTN","DIAC1T",12,0)
 ;
"RTN","DIAC1T",13,0)
 W !!,"Enter values to use for testing evaluation of "_$P(DITOP,U,2)_","
"RTN","DIAC1T",14,0)
 W !,"either a valid IENS string and/or target attributes.",!
"RTN","DIAC1T",15,0)
 S DIENS=$$IENS(DIFN) Q:DIENS="^"
"RTN","DIAC1T",16,0)
 D ATTRBS                  ;get DIVAL(att)=value
"RTN","DIAC1T",17,0)
 I DIENS<1,'$D(DIVAL) Q    ;no values to test against
"RTN","DIAC1T",18,0)
 S DIUSR=$$USER Q:DIUSR<1  ;=NP#200 ien
"RTN","DIAC1T",19,0)
 S DIUSRNM=$P($G(^VA(200,+DIUSR,0)),U)
"RTN","DIAC1T",20,0)
 ;
"RTN","DIAC1T",21,0)
 S DIZTRACE=$$TRACE Q:"^"[DIZTRACE
"RTN","DIAC1T",22,0)
 S DIRESULT="" D EN^DIAC1
"RTN","DIAC1T",23,0)
 I DIRESULT="P",'$L($G(DIFLDS)) D FIELDS^DIAC1(DIACT,1.61)
"RTN","DIAC1T",24,0)
 ;
"RTN","DIAC1T",25,0)
 ; build output array ^TMP("DIACT",$J) and display
"RTN","DIAC1T",26,0)
 N DIT K ^TMP("DIACT",$J)
"RTN","DIAC1T",27,0)
 I $G(DIZTRACE) D SHOWVAR,SHOWTRC,OUT("")
"RTN","DIAC1T",28,0)
 D OUT("Result: "_$S(DIRESULT="P":"PERMIT",DIRESULT="D":"DENY",$G(DIERR):"ERROR",1:"INDETERMINATE"))
"RTN","DIAC1T",29,0)
 I $G(DIERR) D SHOWTMP("DIERR")
"RTN","DIAC1T",30,0)
 I $G(DIMSG) D SHOWTMP("DIMSG")
"RTN","DIAC1T",31,0)
 I $L($G(DIFLDS)) D SHOWFLDS
"RTN","DIAC1T",32,0)
 I $$TEST^DDBRT D BROWSE Q
"RTN","DIAC1T",33,0)
 D WRITE
"RTN","DIAC1T",34,0)
 Q
"RTN","DIAC1T",35,0)
 ;
"RTN","DIAC1T",36,0)
ACTION() ; -- select App Action to use for testing
"RTN","DIAC1T",37,0)
 N I,X,Y,CNT,DIR,DIACT
"RTN","DIAC1T",38,0)
 S (I,CNT)=0 F  S I=$O(^DIAC(1.61,"D",DIPOL,I)) Q:I<1  D
"RTN","DIAC1T",39,0)
 . S CNT=CNT+1,X=$G(^DIAC(1.61,I,0)),Y=$G(^(1)),DIACT(CNT)=I
"RTN","DIAC1T",40,0)
 . S:Y="" Y=$P(X,U)_" (#"_$P(X,U,2)_$S($L($P(X,U,3)):" "_$P(X,U,3),1:"")_")"
"RTN","DIAC1T",41,0)
 . S DIR("A",CNT)=$$RJ^XLFSTR(CNT,3)_" "_Y
"RTN","DIAC1T",42,0)
 I CNT<1 S Y=""
"RTN","DIAC1T",43,0)
 I CNT=1 S Y=+$G(DIACT(1))
"RTN","DIAC1T",44,0)
 I CNT>1 D  S:Y>0 Y=+$G(DIACT(Y))
"RTN","DIAC1T",45,0)
 . S DIR(0)="NAO^1:"_CNT,DIR("A")="Use action: " K X,Y
"RTN","DIAC1T",46,0)
 . S DIR("?")="This policy is linked to multiple actions; select the one to use for this test."
"RTN","DIAC1T",47,0)
 . D ^DIR I Y<1 S Y="^"
"RTN","DIAC1T",48,0)
 Q Y
"RTN","DIAC1T",49,0)
 ;
"RTN","DIAC1T",50,0)
IENS(FN) ; -- get IENS string for file number FN [lookup if FN?]
"RTN","DIAC1T",51,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIAC1T",52,0)
I1 S DIR(0)="FAO^1:30",DIR("A")="IENS: " D ^DIR
"RTN","DIAC1T",53,0)
 I $G(Y),$G(FN),'$$VIENS(Y,FN) G I1
"RTN","DIAC1T",54,0)
 Q Y
"RTN","DIAC1T",55,0)
 ;
"RTN","DIAC1T",56,0)
VIENS(IENS,FN) ; -- validate IENS string for file# FN
"RTN","DIAC1T",57,0)
 N GBL,DIERR S GBL=$$ROOT^DILFD(FN,IENS,,1)
"RTN","DIAC1T",58,0)
 I $G(DIERR) W !,$G(^TMP("DIERR",$J,1,"TEXT",1)) Q 0
"RTN","DIAC1T",59,0)
 I '$D(@(GBL_+IENS_")")) D  Q 0
"RTN","DIAC1T",60,0)
 . W "The entry identified by "_FN_" and "_IENS
"RTN","DIAC1T",61,0)
 . W " does not exist in the database."
"RTN","DIAC1T",62,0)
 Q 1
"RTN","DIAC1T",63,0)
 ;
"RTN","DIAC1T",64,0)
ATTRBS ; -- prompt for test attributes
"RTN","DIAC1T",65,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIAC1T",66,0)
 N ATT,DILIST D LIST
"RTN","DIAC1T",67,0)
 S DIR(0)="FAO^1:30" F  D  Q:"^"[Y
"RTN","DIAC1T",68,0)
 . S DIR("?")="^D HELPATT^DIAC1T"
"RTN","DIAC1T",69,0)
 . S DIR("A")="ATTRIBUTE: " D ^DIR Q:"^"[Y
"RTN","DIAC1T",70,0)
 . S ATT=Y,DIR("A")="    VALUE: " K X,Y D ^DIR
"RTN","DIAC1T",71,0)
 . S:"^"'[Y DIVAL(ATT)=Y K ATT
"RTN","DIAC1T",72,0)
 Q
"RTN","DIAC1T",73,0)
 ;
"RTN","DIAC1T",74,0)
LIST ; -- return DILIST("attribute") of targets used by DIPOL
"RTN","DIAC1T",75,0)
 N DISTK,DIMEM K DILIST
"RTN","DIAC1T",76,0)
 S DISTK=1,DISTK(DISTK)=DIPOL_"^0",DISTK(0)=0,DIMEM=0
"RTN","DIAC1T",77,0)
 F  S DIMEM=$O(^DIAC(1.6,+DISTK(DISTK),10,DIMEM)) D @$S(+DIMEM'>0:"POP",1:"PROC") Q:DISTK<1
"RTN","DIAC1T",78,0)
 Q
"RTN","DIAC1T",79,0)
 ;
"RTN","DIAC1T",80,0)
POP ; -- pop the stack [set]
"RTN","DIAC1T",81,0)
 S DISTK=DISTK-1,DIMEM=$P(DISTK(DISTK),U,2)
"RTN","DIAC1T",82,0)
 Q
"RTN","DIAC1T",83,0)
 ;
"RTN","DIAC1T",84,0)
PROC ; -- process member DIMEM
"RTN","DIAC1T",85,0)
 N DIEN,I,X
"RTN","DIAC1T",86,0)
 S $P(DISTK(DISTK),U,2)=DIMEM
"RTN","DIAC1T",87,0)
 S DIEN=+$G(^DIAC(1.6,+DISTK(DISTK),10,DIMEM,0))
"RTN","DIAC1T",88,0)
 S I=0 F  S I=$O(^DIAC(1.6,DIEN,2,I)) Q:I<1  S X=$G(^(I,0)) I $L($P(X,U,2)) D
"RTN","DIAC1T",89,0)
 . S DILIST($P(X,U,2))=""
"RTN","DIAC1T",90,0)
 . S:$L($P(X,U,3)) DILIST($P(X,U,2),$P(X,U,3))=""
"RTN","DIAC1T",91,0)
 S DISTK=DISTK+1,DISTK(DISTK)=DIEN_"^0",DIMEM=0
"RTN","DIAC1T",92,0)
 Q
"RTN","DIAC1T",93,0)
 ;
"RTN","DIAC1T",94,0)
HELPATT ; -- help for ATTRBS
"RTN","DIAC1T",95,0)
 W !,"Enter an attribute/value pair for testing evaluation of this policy."
"RTN","DIAC1T",96,0)
 Q:'$D(DILIST)  I '$D(ATT) D  Q  ;show attributes
"RTN","DIAC1T",97,0)
 . W !,"Target attributes used within this policy are:"
"RTN","DIAC1T",98,0)
 . N I S I="" F  S I=$O(DILIST(I)) Q:I=""  W !?5,I
"RTN","DIAC1T",99,0)
 I $L(ATT),$D(DILIST(ATT)) D  ;show values for ATTribute
"RTN","DIAC1T",100,0)
 . W !,"Values used with this attribute are:"
"RTN","DIAC1T",101,0)
 . N I S I="" F  S I=$O(DILIST(ATT,I)) Q:I=""  W !?5,I
"RTN","DIAC1T",102,0)
 Q
"RTN","DIAC1T",103,0)
 ;
"RTN","DIAC1T",104,0)
USER() ; -- select test user from #200
"RTN","DIAC1T",105,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIAC1T",106,0)
 N DIVAL ;protect from embedded ^DIC call
"RTN","DIAC1T",107,0)
 S DIR(0)="PAO^200:AEQM",DIR("A")="Select Test User: "
"RTN","DIAC1T",108,0)
 S DIR("B")=$P($G(^VA(200,DUZ,0)),U)
"RTN","DIAC1T",109,0)
 S DIR("?")="Select a user for testing evaluation of this policy."
"RTN","DIAC1T",110,0)
 W ! D ^DIR
"RTN","DIAC1T",111,0)
 Q +Y
"RTN","DIAC1T",112,0)
 ;
"RTN","DIAC1T",113,0)
TRACE() ; -- show trace of policies/rules evaluated?
"RTN","DIAC1T",114,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIAC1T",115,0)
 S DIR(0)="Y",DIR("A")="Show a trace of all policies and rules evaluated"
"RTN","DIAC1T",116,0)
 S DIR("?")="Enter YES to see all rules and results displayed as they are processed."
"RTN","DIAC1T",117,0)
 D ^DIR
"RTN","DIAC1T",118,0)
 Q Y
"RTN","DIAC1T",119,0)
 ;
"RTN","DIAC1T",120,0)
SHOWVAR ; -- show variables
"RTN","DIAC1T",121,0)
 N X
"RTN","DIAC1T",122,0)
 F X="DIACT","DIACTN","DIENS","DIFN","DIPOL","DIUSR" D OUT(X_" = "_$S($D(@X):@X,1:"<undefined>"))
"RTN","DIAC1T",123,0)
 S X="" F  S X=$O(DIVAL(X)) Q:X=""  D OUT("DIVAL("""_X_""") = "_DIVAL(X))
"RTN","DIAC1T",124,0)
 Q
"RTN","DIAC1T",125,0)
 ;
"RTN","DIAC1T",126,0)
SHOWTMP(TYPE) ; -- display messages from ^TMP
"RTN","DIAC1T",127,0)
 Q:'$L($G(TYPE))
"RTN","DIAC1T",128,0)
 N I,J D OUT(""),OUT(TYPE_": "_@TYPE)
"RTN","DIAC1T",129,0)
 S I=0 F  S I=$O(^TMP(TYPE,$J,I)) Q:I<1  D
"RTN","DIAC1T",130,0)
 . I TYPE="DIMSG" D OUT($G(^TMP(TYPE,$J,I))) Q
"RTN","DIAC1T",131,0)
 . S J=0 F  S J=$O(^TMP(TYPE,$J,I,"TEXT",J)) Q:J<1  D OUT(^(J))
"RTN","DIAC1T",132,0)
 Q
"RTN","DIAC1T",133,0)
 ;
"RTN","DIAC1T",134,0)
SHOWTRC ; -- display DIZTRACE of processing
"RTN","DIAC1T",135,0)
 ; DIZTRACE(DIZ) = PolicyIEN ^ stack level ^ match? (1/0) ^ result (P/D)
"RTN","DIAC1T",136,0)
 ;       or      = PolicyIEN ^ stack level ^ done (2) ^ ResultFcnIEN
"RTN","DIAC1T",137,0)
 ; DIZTRACE(#,i) = ConditionDA ^ stack level ^ result (1/0)
"RTN","DIAC1T",138,0)
 ;
"RTN","DIAC1T",139,0)
 N DII,DIJ,DISTK,X,Y,DIEN,DIX D OUT("")
"RTN","DIAC1T",140,0)
 F DII=1:1:DIZ I $D(DIZTRACE(DII)) D
"RTN","DIAC1T",141,0)
 . S X=$G(DIZTRACE(DII)),DIEN=+X,DISTK=$P(X,U,2)
"RTN","DIAC1T",142,0)
 . S DIX=$$REPEAT^XLFSTR(" ",DISTK*3)_$P($G(^DIAC(1.6,DIEN,0)),U)_": "
"RTN","DIAC1T",143,0)
 . I $P(X,U,3)<0 D OUT(DIX_"<disabled>") Q
"RTN","DIAC1T",144,0)
 . I $P(X,U,3)=0 D OUT(DIX_"<not a match>") Q
"RTN","DIAC1T",145,0)
 . I $P(X,U,3)=2 D OUT(DIX_$P($G(^DIAC(1.62,+$P(X,U,4),0)),U,2)) Q
"RTN","DIAC1T",146,0)
 . I DIEN=+$G(DITOP) S DIX=DIX_"DIPOL="_DIEN S:$G(DIFN) DIX=DIX_" (DIFN="_DIFN_" & DIACTN="_DIACTN_")"
"RTN","DIAC1T",147,0)
 . E  S DIX=DIX_$$TARGET(DIEN)
"RTN","DIAC1T",148,0)
 . D OUT(DIX)
"RTN","DIAC1T",149,0)
 . ;show conditions, if DIEN is a rule
"RTN","DIAC1T",150,0)
 . S DIJ=0 F  S DIJ=$O(DIZTRACE(DII,DIJ)) Q:DIJ<1  D
"RTN","DIAC1T",151,0)
 .. S Y=$G(DIZTRACE(DII,DIJ)),DISTK=$P(Y,U,2)
"RTN","DIAC1T",152,0)
 .. S DIX=$$REPEAT^XLFSTR(" ",DISTK*3)_$$FCNM(DIEN,+Y)_": "_$P(Y,U,3)
"RTN","DIAC1T",153,0)
 .. D OUT(DIX)
"RTN","DIAC1T",154,0)
 . I $L($P(X,U,4)) S DIX=$$REPEAT^XLFSTR(" ",DISTK*3)_"DIRESULT: "_$P(X,U,4) D OUT(DIX)
"RTN","DIAC1T",155,0)
 Q
"RTN","DIAC1T",156,0)
 ;
"RTN","DIAC1T",157,0)
FCNM(IEN,CON) ; -- return NAME(X1,X2,X3) for a function in use
"RTN","DIAC1T",158,0)
 N X0,X,Y
"RTN","DIAC1T",159,0)
 S X0=$G(^DIAC(1.6,IEN,3,CON,0))
"RTN","DIAC1T",160,0)
 S Y=$P($G(^DIAC(1.62,+$P(X0,U,2),0)),U)
"RTN","DIAC1T",161,0)
 S X=$P(X0,U,3) I $L(X) S Y=Y_"("_X_")"
"RTN","DIAC1T",162,0)
 Q Y
"RTN","DIAC1T",163,0)
 ;
"RTN","DIAC1T",164,0)
TARGET(IEN) ; -- return target(s) that matched
"RTN","DIAC1T",165,0)
 N X,Y,CONJ,KEY,DONE
"RTN","DIAC1T",166,0)
 S Y="",CONJ=$P($G(^DIAC(1.6,IEN,0)),U,5),DONE=0
"RTN","DIAC1T",167,0)
 S KEY="" F  S KEY=$O(^DIAC(1.6,IEN,2,"AKEY",KEY)) Q:KEY=""  D  Q:DONE
"RTN","DIAC1T",168,0)
 . S X=$G(DIVAL(KEY))
"RTN","DIAC1T",169,0)
 . I $L(X),$D(^DIAC(1.6,IEN,2,"AKEY",KEY,X)) S Y=Y_$S($L(Y):" & ",1:"")_KEY_"="_X
"RTN","DIAC1T",170,0)
 . I $L(Y),CONJ'="&" S DONE=1
"RTN","DIAC1T",171,0)
 Q Y
"RTN","DIAC1T",172,0)
 ;
"RTN","DIAC1T",173,0)
SHOWFLDS ; -- display DIFLDS string of available fields to access
"RTN","DIAC1T",174,0)
 ; DIZTRACE("DR") = ien ^ file# returning the string
"RTN","DIAC1T",175,0)
 ; DIFLDS = DR string
"RTN","DIAC1T",176,0)
 ; DIFLDS(level,subfile#,n) = DR string
"RTN","DIAC1T",177,0)
 ;
"RTN","DIAC1T",178,0)
 Q:'$L($G(DIFLDS))
"RTN","DIAC1T",179,0)
 N I,X,FN,IEN
"RTN","DIAC1T",180,0)
 S X=$G(DIZTRACE("FLDS")),FN=+X,IEN=+$P(X,U,2)
"RTN","DIAC1T",181,0)
 D OUT(""),OUT("DIFLDS("_$P($G(^DIAC(FN,IEN,0)),U)_"): "_$G(DIFLDS))
"RTN","DIAC1T",182,0)
 S I="DIFLDS" F  S I=$Q(@I) Q:I'?1"DIFLDS(".E  D OUT(I_": "_@I)
"RTN","DIAC1T",183,0)
 Q
"RTN","DIAC1T",184,0)
 ;
"RTN","DIAC1T",185,0)
OUT(X) ; -- add line to output
"RTN","DIAC1T",186,0)
 S DIT=+$G(DIT)+1,^TMP("DIACT",$J,DIT)=$G(X)
"RTN","DIAC1T",187,0)
 Q
"RTN","DIAC1T",188,0)
 ;
"RTN","DIAC1T",189,0)
WRITE ; -- write ^TMP output to screen
"RTN","DIAC1T",190,0)
 N I,LCNT,STOP S I=0,LCNT=2,STOP=0
"RTN","DIAC1T",191,0)
 W !!,$$REPEAT^XLFSTR(" ",29-$L($P(DITOP,U,2)))
"RTN","DIAC1T",192,0)
 W "---------- "_$P(DITOP,U,2)_" ----------",!
"RTN","DIAC1T",193,0)
 F  S I=$O(^TMP("DIACT",$J,I)) Q:I<1  D  Q:STOP
"RTN","DIAC1T",194,0)
 . S LCNT=LCNT+1 I LCNT>23 D WAIT Q:STOP  S LCNT=1
"RTN","DIAC1T",195,0)
 . W !,^TMP("DIACT",$J,I)
"RTN","DIAC1T",196,0)
 I 'STOP D WAIT
"RTN","DIAC1T",197,0)
 Q
"RTN","DIAC1T",198,0)
 ;
"RTN","DIAC1T",199,0)
WAIT ; -- wait for ok [returns STOP]
"RTN","DIAC1T",200,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIAC1T",201,0)
 S DIR(0)="E" D ^DIR ;Y=1 to continue
"RTN","DIAC1T",202,0)
 S STOP='Y
"RTN","DIAC1T",203,0)
 Q
"RTN","DIAC1T",204,0)
 ;
"RTN","DIAC1T",205,0)
BROWSE ; -- use Browser to show output
"RTN","DIAC1T",206,0)
 D BROWSE^DDBR("^TMP(""DIACT"",$J)","N",$P(DITOP,U,2))
"RTN","DIAC1T",207,0)
 Q
"RTN","DIACLM")
0^21^B8416953^n/a
"RTN","DIACLM",1,0)
DIACLM ;SLCISC/MKB - Policy Editor driver ;17FEB2017
"RTN","DIACLM",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIACLM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIACLM",4,0)
 ;
"RTN","DIACLM",5,0)
EN ; -- main entry point for DIAC POLICY EDITOR
"RTN","DIACLM",6,0)
 S DITOP=$$SELECT Q:DITOP<1
"RTN","DIACLM",7,0)
 K ^TMP("DIACX",$J) S ^($J,+DITOP)=""
"RTN","DIACLM",8,0)
 D EN^VALM("DIAC POLICY EDITOR")
"RTN","DIACLM",9,0)
 Q
"RTN","DIACLM",10,0)
 ;
"RTN","DIACLM",11,0)
HDR ; -- header code
"RTN","DIACLM",12,0)
 N I,X,Y,X0,F,DIACT
"RTN","DIACLM",13,0)
 S Y=0 F  S Y=+$O(^DIAC(1.61,"D",+DITOP,Y)) Q:Y<1  D
"RTN","DIACLM",14,0)
 . S X0=$G(^DIAC(1.61,Y,0)),X=$G(^(1)) S:X="" X=$P(X0,U,3)
"RTN","DIACLM",15,0)
 . ; DIACT(file#,ien)=description or name
"RTN","DIACLM",16,0)
 . S DIACT(+$P(X0,U,2),Y)=X
"RTN","DIACLM",17,0)
 I '$O(DIACT(0)) S VALMHDR(1)="For: <no linked Application Action>" Q
"RTN","DIACLM",18,0)
 ;
"RTN","DIACLM",19,0)
 S (I,F)=0 F  S F=$O(DIACT(F)) Q:F<1  D
"RTN","DIACLM",20,0)
 . S X="#"_F,Y=0
"RTN","DIACLM",21,0)
 . F  S Y=$O(DIACT(F,Y)) Q:Y<1  S X=X_", "_DIACT(F,Y)
"RTN","DIACLM",22,0)
 . S I=I+1,VALMHDR(I)=$S(I=1:"For: ",1:"     ")_$E(X,1,75)
"RTN","DIACLM",23,0)
 Q
"RTN","DIACLM",24,0)
 ;
"RTN","DIACLM",25,0)
INIT ; -- init variables and list array
"RTN","DIACLM",26,0)
 N SEQ,STK K ^TMP("DIAC",$J)
"RTN","DIACLM",27,0)
 S VALMCNT=0,STK=0 D ADD(+DITOP)
"RTN","DIACLM",28,0)
 S STK=1,STK(STK)=+DITOP_"^0",STK(0)=0
"RTN","DIACLM",29,0)
 ; expand members, if in DIACX list
"RTN","DIACLM",30,0)
 I $D(^TMP("DIACX",$J,+DITOP)) S SEQ=0 F  S SEQ=$O(^DIAC(1.6,+STK(STK),10,"AC",SEQ)) D @$S(SEQ'>0:"POP",1:"PROC") Q:STK<1
"RTN","DIACLM",31,0)
 S ^TMP("DIAC",$J,0)=VALMCNT_U_+DITOP
"RTN","DIACLM",32,0)
 S VALMBCK="R",VALMBG=1
"RTN","DIACLM",33,0)
 Q
"RTN","DIACLM",34,0)
 ;
"RTN","DIACLM",35,0)
POP ; -- pop the stack
"RTN","DIACLM",36,0)
 S STK=STK-1,SEQ=$P(STK(STK),U,2)
"RTN","DIACLM",37,0)
 Q
"RTN","DIACLM",38,0)
PROC ; -- process member
"RTN","DIACLM",39,0)
 N IEN S $P(STK(STK),U,2)=SEQ
"RTN","DIACLM",40,0)
 S IEN=+$O(^DIAC(1.6,+STK(STK),10,"AC",SEQ,0)) D ADD(IEN)
"RTN","DIACLM",41,0)
 ; push stack, if expanding policy/set
"RTN","DIACLM",42,0)
 I $D(^TMP("DIACX",$J,IEN)) S STK=STK+1,STK(STK)=IEN_"^0",SEQ=0
"RTN","DIACLM",43,0)
 Q
"RTN","DIACLM",44,0)
 ;
"RTN","DIACLM",45,0)
ADD(DA) ; -- add row
"RTN","DIACLM",46,0)
 N PREFIX,X0,NAME,TYPE,EFFECT,LINE
"RTN","DIACLM",47,0)
 S PREFIX=$S('$O(^DIAC(1.6,DA,10,0)):" ",$D(^TMP("DIACX",$J,DA)):"-",1:"+")
"RTN","DIACLM",48,0)
 S X0=$G(^DIAC(1.6,DA,0)),NAME=$P(X0,U)
"RTN","DIACLM",49,0)
 I $P(X0,U,3) S NAME="("_NAME_")" ;disabled
"RTN","DIACLM",50,0)
 S NAME=PREFIX_NAME S:$G(STK) NAME=$$REPEAT^XLFSTR(" ",STK*2)_NAME
"RTN","DIACLM",51,0)
 S TYPE=$$EXTERNAL^DILFD(1.6,.02,,$P(X0,U,2))
"RTN","DIACLM",52,0)
 I $P(X0,U,7) S EFFECT=$P(^DIAC(1.62,+$P(X0,U,7),0),U,2)
"RTN","DIACLM",53,0)
 E  S EFFECT=$$EXTERNAL^DILFD(1.6,.08,,$P(X0,U,8))
"RTN","DIACLM",54,0)
 S VALMCNT=VALMCNT+1,LINE=$$SETFLD^VALM1(VALMCNT,"","NUMBER")
"RTN","DIACLM",55,0)
 S LINE=$$SETFLD^VALM1(NAME,LINE,"NAME")
"RTN","DIACLM",56,0)
 S LINE=$$SETFLD^VALM1(TYPE,LINE,"TYPE")
"RTN","DIACLM",57,0)
 S LINE=$$SETFLD^VALM1(EFFECT,LINE,"RESULT")
"RTN","DIACLM",58,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","DIACLM",59,0)
 S ^TMP("DIAC",$J,"IEN",VALMCNT)=DA_U_$P(X0,U)
"RTN","DIACLM",60,0)
 Q
"RTN","DIACLM",61,0)
 ;
"RTN","DIACLM",62,0)
HELP ; -- help code
"RTN","DIACLM",63,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","DIACLM",64,0)
 Q
"RTN","DIACLM",65,0)
 ;
"RTN","DIACLM",66,0)
EXIT ; -- exit code
"RTN","DIACLM",67,0)
 K ^TMP("DIAC",$J),^TMP("DIACX",$J),DITOP
"RTN","DIACLM",68,0)
 Q
"RTN","DIACLM",69,0)
 ;
"RTN","DIACLM",70,0)
EXPND ; -- expand code
"RTN","DIACLM",71,0)
 Q
"RTN","DIACLM",72,0)
 ;
"RTN","DIACLM",73,0)
SELECT() ; -- select a policy/set
"RTN","DIACLM",74,0)
 N X,Y,DIC,DLAYGO
"RTN","DIACLM",75,0)
 S DIC=1.6,DLAYGO=1.6,DIC(0)="AEQL",DIC("A")="Select POLICY: "
"RTN","DIACLM",76,0)
 S DIC("?")="Select or create a policy to view and manage."
"RTN","DIACLM",77,0)
 D FULL^VALM1,^DIC
"RTN","DIACLM",78,0)
 S VALMBCK="R"
"RTN","DIACLM",79,0)
 Q Y
"RTN","DIACLM1")
0^22^B88255480^n/a
"RTN","DIACLM1",1,0)
DIACLM1 ;SLCISC/MKB - Policy Editor actions ;17FEB2017
"RTN","DIACLM1",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIACLM1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIACLM1",4,0)
 ;
"RTN","DIACLM1",5,0)
ADD ; -- add/remove members
"RTN","DIACLM1",6,0)
 N X,Y,DAD,TYPE,DONE,DIFF,ITM,DIE,DA,DR,DIC S VALMBCK=""
"RTN","DIACLM1",7,0)
 L +^DIAC(1.6,0):DILOCKTM I '$T W !,"Another user is editing policies." H 2 Q
"RTN","DIACLM1",8,0)
 I VALMCNT=1 S DAD=+$G(^TMP("DIAC",$J,"IEN",1)) Q:DAD<1
"RTN","DIACLM1",9,0)
 E  S DAD=+$$SELECT("To policy") Q:DAD<1
"RTN","DIACLM1",10,0)
 I $P($G(^DIAC(1.6,DAD,0)),U,2)="R" W !,"Rules may not have members.",! H 2 Q
"RTN","DIACLM1",11,0)
 L +^DIAC(1.6,DAD):DILOCKTM I '$T W !,"Another user is editing "_$P(DAD,U,2) H 2 Q
"RTN","DIACLM1",12,0)
 S TYPE=$P($G(^DIAC(1.6,DAD,0)),U,2),(DONE,DIFF)=0
"RTN","DIACLM1",13,0)
 ;
"RTN","DIACLM1",14,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","DIACLM1",15,0)
 F  D  Q:DONE
"RTN","DIACLM1",16,0)
 . S ITM=$$DIR I ITM<1 S DONE=1 Q
"RTN","DIACLM1",17,0)
 . I $P(ITM,U,3) D  Q:'$D(DA)  ;deleted
"RTN","DIACLM1",18,0)
 .. S DR=".01;2;I $P($G(^DIAC(1.6,+DA,2,0)),U,4)<2 S Y=""@1"";.05R;@1;"
"RTN","DIACLM1",19,0)
 .. I $G(TYPE)="P" S DR=DR_"3;I $P($G(^DIAC(1.6,+DA,3,0)),U,4)<2 S Y=""@2"";.06R;@2;.08R;7.1;7;8.1;8"
"RTN","DIACLM1",20,0)
 .. E  S DR=DR_".07R;7.1;7;8.1;8"
"RTN","DIACLM1",21,0)
 .. K DA,DIC S DIE="^DIAC(1.6,",DA=+ITM D ^DIE
"RTN","DIACLM1",22,0)
 . ;
"RTN","DIACLM1",23,0)
 . K DA,DIC S DA=$O(^DIAC(1.6,DAD,10,"B",+ITM,0)),DA(1)=+DAD,DIFF=1
"RTN","DIACLM1",24,0)
 . I 'DA D  Q  ;add new member
"RTN","DIACLM1",25,0)
 .. N LAST S LAST=$O(^DIAC(1.6,DA(1),10,"AC",""),-1)\1 ;integer
"RTN","DIACLM1",26,0)
 .. S DIC="^DIAC(1.6,"_DA(1)_",10,",DIC(0)="AEQ",X=+ITM,DIC("DR")=".02//"_(LAST+1)
"RTN","DIACLM1",27,0)
 .. D FILE^DICN S DA=+Y
"RTN","DIACLM1",28,0)
 . S DR=".01;.02",DIE="^DIAC(1.6,"_DA(1)_",10," D ^DIE
"RTN","DIACLM1",29,0)
 ;
"RTN","DIACLM1",30,0)
 L -^DIAC(1.6,DAD),-^DIAC(1.6,0)
"RTN","DIACLM1",31,0)
 I DIFF S ^TMP("DIACX",$J,+DAD)="" D INIT^DIACLM ;rebuild
"RTN","DIACLM1",32,0)
 Q
"RTN","DIACLM1",33,0)
 ;
"RTN","DIACLM1",34,0)
DIR() ; -- find member policy (return X & Y as if ^DIC)
"RTN","DIACLM1",35,0)
 N X,Y,DIR
"RTN","DIACLM1",36,0)
 S DIR(0)="FAO^3:30^D DIC^DIACLM1"
"RTN","DIACLM1",37,0)
 S DIR("A")="Select MEMBER: "
"RTN","DIACLM1",38,0)
 S DIR("?")="Enter a unique name, 3-30 characters, beginning with the package namespace"
"RTN","DIACLM1",39,0)
 S DIR("??")="^D MEMHLP^DIACLM1"
"RTN","DIACLM1",40,0)
 W ! D ^DIR
"RTN","DIACLM1",41,0)
 Q Y
"RTN","DIACLM1",42,0)
 ;
"RTN","DIACLM1",43,0)
DIC ; -- input transform to look up X in #1.6, return Y=ien^name[^1]
"RTN","DIACLM1",44,0)
 N DIC,DLAYGO,DA
"RTN","DIACLM1",45,0)
 S DIC=1.6,DIC(0)="ELQZ",DLAYGO=1.6,DA(1)=DAD
"RTN","DIACLM1",46,0)
 S DIC("S")="I $P(^(0),U,2)"_$S(TYPE="P":"=""R""",1:"'=""R"",'$$TREE^DIACX")
"RTN","DIACLM1",47,0)
 S DIC("DR")=$S(TYPE="P":".02////R",1:".02;I X=""R"" W !,""A Rule may not be a member of a set!"" S Y=.02")
"RTN","DIACLM1",48,0)
 D ^DIC I Y<1 K X Q
"RTN","DIACLM1",49,0)
 S X=$P(Y,U,2) ;return Y=ien^name[^1 if new]
"RTN","DIACLM1",50,0)
 Q
"RTN","DIACLM1",51,0)
 ;
"RTN","DIACLM1",52,0)
MEMHLP ; -- Xecutable help to show current members of policy DAD
"RTN","DIACLM1",53,0)
 N X,Y,D,DZ,DIC
"RTN","DIACLM1",54,0)
 S DIC="^DIAC(1.6,"_DAD_",10,",DIC(0)="EQ",D="B",DZ="??" D DQ^DICQ
"RTN","DIACLM1",55,0)
 W !?8,"You may enter a new MEMBER, if you wish."
"RTN","DIACLM1",56,0)
 W !?8,"Enter a policy, set, or rule that is not an ancestor of this item."
"RTN","DIACLM1",57,0)
 W !?8,"Members of a policy must be rules; sets may include policies or sets.",!
"RTN","DIACLM1",58,0)
 S DIC("S")="I $P(^(0),U,2)"_$S($G(TYPE)="P":"=",1:"'=")_"""R"""
"RTN","DIACLM1",59,0)
 S DIC="^DIAC(1.6,",X="?" K DZ D ^DIC
"RTN","DIACLM1",60,0)
 Q
"RTN","DIACLM1",61,0)
 ;
"RTN","DIACLM1",62,0)
EDIT ; -- edit item
"RTN","DIACLM1",63,0)
 N VALMY,DDSFILE,DDSPARM,DDSCHANG,DII,DA,DR,DIFF,DTOUT
"RTN","DIACLM1",64,0)
 D EN^VALM2(XQORNOD(0)) I '$O(VALMY(0)) S VALMBCK="" Q
"RTN","DIACLM1",65,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","DIACLM1",66,0)
 S DDSFILE=1.6,DDSPARM="C",DIFF=0
"RTN","DIACLM1",67,0)
 S DII=0 F  S DII=$O(VALMY(DII)) Q:DII<1  D
"RTN","DIACLM1",68,0)
 . S DA=+$G(^TMP("DIAC",$J,"IEN",DII)) Q:DA<1
"RTN","DIACLM1",69,0)
 . L +^DIAC(1.6,DA):DILOCKTM I '$T W !,"Another user is editing #"_I H 2 Q
"RTN","DIACLM1",70,0)
 . S DR="[DIAC "_$$UP^XLFSTR($$GET1^DIQ(1.6,DA_",",.02))_"]" K DDSCHANG
"RTN","DIACLM1",71,0)
 . W !,"Loading form to edit #"_DII_" ..." H 1
"RTN","DIACLM1",72,0)
 . D ^DDS S:$G(DDSCHANG) DIFF=1 I '$G(DA) D  ;deleted
"RTN","DIACLM1",73,0)
 .. S DA=+$G(^TMP("DIAC",$J,"IEN",DII)),DIFF=1 Q:DA<1
"RTN","DIACLM1",74,0)
 .. D DELDAD(DA)  ;remove members
"RTN","DIACLM1",75,0)
 .. Q:DA'=+DITOP  ;select a new policy to display, if needed
"RTN","DIACLM1",76,0)
 .. S DITOP=$$SELECT^DIACLM I DITOP<1 S VALMBCK="Q" Q
"RTN","DIACLM1",77,0)
 .. K VALMHDR,^TMP("DIACX",$J)
"RTN","DIACLM1",78,0)
 .. S VALMBCK="R",^TMP("DIACX",$J,+DITOP)=""
"RTN","DIACLM1",79,0)
 . L -^DIAC(1.6,DA)
"RTN","DIACLM1",80,0)
 D:DIFF INIT^DIACLM
"RTN","DIACLM1",81,0)
 Q
"RTN","DIACLM1",82,0)
 ;
"RTN","DIACLM1",83,0)
DELETE ; -- delete item
"RTN","DIACLM1",84,0)
 N DA S VALMBCK=""
"RTN","DIACLM1",85,0)
 S DA=+$$SELECT Q:DA<1
"RTN","DIACLM1",86,0)
 I $O(^DIAC(1.6,"AD",DA,0))!(DA=+DITOP) D FULL^VALM1 S VALMBCK="R"
"RTN","DIACLM1",87,0)
 D DEL Q:$D(^DIAC(1.6,DA,0))  ;quit - not deleted
"RTN","DIACLM1",88,0)
 S VALMBCK="R"
"RTN","DIACLM1",89,0)
 I DA=+DITOP D  Q:VALMBCK="Q"  ; select a new policy to display, if needed
"RTN","DIACLM1",90,0)
 . S DITOP=$$SELECT^DIACLM I DITOP<1 S VALMBCK="Q" Q
"RTN","DIACLM1",91,0)
 . K VALMHDR,^TMP("DIACX",$J)
"RTN","DIACLM1",92,0)
 . S VALMBCK="R",^TMP("DIACX",$J,+DITOP)=""
"RTN","DIACLM1",93,0)
 D INIT^DIACLM
"RTN","DIACLM1",94,0)
 Q
"RTN","DIACLM1",95,0)
DEL ; enter here from option with DA
"RTN","DIACLM1",96,0)
 N DIK,DAD,DAC
"RTN","DIACLM1",97,0)
 I $O(^DIAC(1.6,"AD",DA,0)) D  W !
"RTN","DIACLM1",98,0)
 . W !,$P($G(^DIAC(1.6,DA,0)),U)_" will also be removed as a member from:"
"RTN","DIACLM1",99,0)
 . S DAD=0 F  S DAD=$O(^DIAC(1.6,"AD",DA,DAD)) Q:DAD<1  W !?3,$P(^DIAC(1.6,DAD,0),U)
"RTN","DIACLM1",100,0)
 I $O(^DIAC(1.61,"D",DA,0)) D  W !
"RTN","DIACLM1",101,0)
 . W !,$P($G(^DIAC(1.6,DA,0)),U)_" will also be unlinked as a policy for:"
"RTN","DIACLM1",102,0)
 . S DAC=0 F  S DAC=$O(^DIAC(1.61,"D",DA,DAC)) Q:DAC<1  W !?3,$P(^DIAC(1.61,DAC,0),U)
"RTN","DIACLM1",103,0)
 I '$$SURE(DA) W !,"Nothing deleted!" Q
"RTN","DIACLM1",104,0)
 L +^DIAC(1.6,0):DILOCKTM I '$T W !,"Another user is editing policies." H 2 Q
"RTN","DIACLM1",105,0)
 L +^DIAC(1.6,DA):DILOCKTM I '$T W !,"Another user is editing this policy." H 2 Q
"RTN","DIACLM1",106,0)
 S DIK="^DIAC(1.6," D ^DIK
"RTN","DIACLM1",107,0)
 L -^DIAC(1.6,DA)
"RTN","DIACLM1",108,0)
 D DELDAD(DA)   ;clean up ancestors
"RTN","DIACLM1",109,0)
 D DELACT(DA)   ;clean up actions
"RTN","DIACLM1",110,0)
 L -^DIAC(1.6,0)
"RTN","DIACLM1",111,0)
 Q
"RTN","DIACLM1",112,0)
DELDAD(IEN) ; -- remove IEN as a member from parent policies
"RTN","DIACLM1",113,0)
 N DA,DIK,DAD S DAD=0
"RTN","DIACLM1",114,0)
 F  S DAD=$O(^DIAC(1.6,"AD",+$G(IEN),DAD)) Q:DAD<1  S DA=+$O(^(DAD,0)) D
"RTN","DIACLM1",115,0)
 . L +^DIAC(1.6,DAD):DILOCKTM I '$T W !,"Another user is editing policy #"_DAD H 2 Q
"RTN","DIACLM1",116,0)
 . S DA(1)=DAD,DIK="^DIAC(1.6,"_DA(1)_",10,"
"RTN","DIACLM1",117,0)
 . D ^DIK
"RTN","DIACLM1",118,0)
 . L -^DIAC(1.6,DAD)
"RTN","DIACLM1",119,0)
 Q
"RTN","DIACLM1",120,0)
DELACT(IEN) ; -- remove IEN as a policy for Application Actions
"RTN","DIACLM1",121,0)
 N DA,DIE,DR S DA=0
"RTN","DIACLM1",122,0)
 F  S DA=$O(^DIAC(1.61,"D",+$G(IEN),DA)) Q:DA<1  D
"RTN","DIACLM1",123,0)
 . L +^DIAC(1.61,DA):DILOCKTM I '$T W !,"Another user is editing action #"_DA H 2 Q
"RTN","DIACLM1",124,0)
 . S DIE="^DIAC(1.61,",DR=".05////@"
"RTN","DIACLM1",125,0)
 . D ^DIE
"RTN","DIACLM1",126,0)
 . L -^DIAC(1.61,DA)
"RTN","DIACLM1",127,0)
 Q
"RTN","DIACLM1",128,0)
 ;
"RTN","DIACLM1",129,0)
SURE(IEN) ; -- are you sure?
"RTN","DIACLM1",130,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIACLM1",131,0)
 S DIR(0)="YA",DIR("A")="Are you sure? ",DIR("B")="NO"
"RTN","DIACLM1",132,0)
 S DIR("?",1)="Enter NO if you only want to remove this item as a member of a policy."
"RTN","DIACLM1",133,0)
 S DIR("?")="Enter YES to delete this item from the file"
"RTN","DIACLM1",134,0)
 I $G(IEN),$O(^DIAC(1.6,"AD",IEN,0)) S DIR("?")=DIR("?")_"; it will also be removed as a Member from its parent policies"
"RTN","DIACLM1",135,0)
 S DIR("?")=DIR("?")_".",DIR("?",2)="   "
"RTN","DIACLM1",136,0)
 D ^DIR
"RTN","DIACLM1",137,0)
 Q +Y
"RTN","DIACLM1",138,0)
 ;
"RTN","DIACLM1",139,0)
DISABLE ; -- disable item
"RTN","DIACLM1",140,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","DIACLM1",141,0)
 N DA S DA=+$$SELECT Q:DA<1
"RTN","DIACLM1",142,0)
 D DIS,INIT^DIACLM
"RTN","DIACLM1",143,0)
 Q
"RTN","DIACLM1",144,0)
DIS ;enter here from option with DA
"RTN","DIACLM1",145,0)
 N X,Y,DIE,DR,DUOUT,DTOUT,DIRUT
"RTN","DIACLM1",146,0)
 W !!,"WARNING: Disabling a policy will prevent it and ALL its members from being"
"RTN","DIACLM1",147,0)
 W !,"processed when data access is being evaluated!",!
"RTN","DIACLM1",148,0)
 L +^DIAC(1.6,DA):DILOCKTM I '$T W !,"Another user is editing this policy." H 2 Q
"RTN","DIACLM1",149,0)
 S DIE="^DIAC(1.6,",DR=.03 D ^DIE
"RTN","DIACLM1",150,0)
 L -^DIAC(1.6,DA)
"RTN","DIACLM1",151,0)
 Q
"RTN","DIACLM1",152,0)
 ;
"RTN","DIACLM1",153,0)
EXPAND ; -- expand/collapse items
"RTN","DIACLM1",154,0)
 N I,VALMY,DA
"RTN","DIACLM1",155,0)
 D EN^VALM2(XQORNOD(0)) I '$O(VALMY(0)) S VALMBCK="" Q
"RTN","DIACLM1",156,0)
 S I=0 F  S I=$O(VALMY(I)) Q:I<1  D
"RTN","DIACLM1",157,0)
 . S DA=+$G(^TMP("DIAC",$J,"IEN",I)) Q:DA<1
"RTN","DIACLM1",158,0)
 . Q:'$O(^DIAC(1.6,DA,10,0))  ;no members
"RTN","DIACLM1",159,0)
 . I $D(^TMP("DIACX",$J,DA)) K ^(DA)
"RTN","DIACLM1",160,0)
 . E  S ^TMP("DIACX",$J,DA)=""
"RTN","DIACLM1",161,0)
 W !!,"Re-building the list..." H 1
"RTN","DIACLM1",162,0)
 D INIT^DIACLM S VALMBCK="R"
"RTN","DIACLM1",163,0)
 Q
"RTN","DIACLM1",164,0)
 ;
"RTN","DIACLM1",165,0)
DETAIL ; -- show details
"RTN","DIACLM1",166,0)
 N DA,DIC,DAD
"RTN","DIACLM1",167,0)
 S DIC="^DIAC(1.6,",VALMBCK=""
"RTN","DIACLM1",168,0)
 S DA=+$$SELECT Q:DA<1
"RTN","DIACLM1",169,0)
 W ! D FULL^VALM1,EN^DIQ
"RTN","DIACLM1",170,0)
 I $O(^DIAC(1.6,"AD",DA,0)) D
"RTN","DIACLM1",171,0)
 . W !,"MEMBER OF: "
"RTN","DIACLM1",172,0)
 . S DAD=0 F  S DAD=$O(^DIAC(1.6,"AD",DA,DAD)) Q:DAD<1  W !?3,$P(^DIAC(1.6,DAD,0),U)
"RTN","DIACLM1",173,0)
 D WAIT S VALMBCK="R"
"RTN","DIACLM1",174,0)
 Q
"RTN","DIACLM1",175,0)
 ;
"RTN","DIACLM1",176,0)
CHANGE ; -- select a different policy/set to manage
"RTN","DIACLM1",177,0)
 S VALMBCK=""
"RTN","DIACLM1",178,0)
 N X S X=$$SELECT^DIACLM Q:X<1  Q:+X=+DITOP
"RTN","DIACLM1",179,0)
 K VALMHDR,^TMP("DIACX",$J)
"RTN","DIACLM1",180,0)
 S DITOP=X,VALMBCK="R",^TMP("DIACX",$J,+DITOP)=""
"RTN","DIACLM1",181,0)
 D INIT^DIACLM
"RTN","DIACLM1",182,0)
 Q
"RTN","DIACLM1",183,0)
 ;
"RTN","DIACLM1",184,0)
TYPE() ; -- select type
"RTN","DIACLM1",185,0)
 N X,Y,DIR
"RTN","DIACLM1",186,0)
 S DIR(0)="1.6,.02" D ^DIR
"RTN","DIACLM1",187,0)
 I Y?1U S Y=Y_U_Y(0)
"RTN","DIACLM1",188,0)
 Q Y
"RTN","DIACLM1",189,0)
 ;
"RTN","DIACLM1",190,0)
SELECT(PROMPT) ; -- select 1 item from list
"RTN","DIACLM1",191,0)
 N X,Y,DIR
"RTN","DIACLM1",192,0)
 S DIR("A")=$S($L($G(PROMPT)):PROMPT,1:"Select Item")_" (1-"_VALMCNT_"): "
"RTN","DIACLM1",193,0)
 S DIR(0)="NAO^1:"_VALMCNT D ^DIR
"RTN","DIACLM1",194,0)
 I Y S Y=$G(^TMP("DIAC",$J,"IEN",Y)) W "   "_$P(Y,U,2)
"RTN","DIACLM1",195,0)
 E  S Y=""
"RTN","DIACLM1",196,0)
 Q Y
"RTN","DIACLM1",197,0)
 ;
"RTN","DIACLM1",198,0)
WAIT ; -- hold screen
"RTN","DIACLM1",199,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","DIACLM1",200,0)
 S DIR(0)="E" D ^DIR
"RTN","DIACLM1",201,0)
 S VALMBCK=$S(Y="":"Q",1:"R")
"RTN","DIACLM1",202,0)
 Q
"RTN","DIACLM1",203,0)
 ;
"RTN","DIACLM1",204,0)
TEST ; -- test current policy
"RTN","DIACLM1",205,0)
 D EN^DIAC1T S VALMBCK="R"
"RTN","DIACLM1",206,0)
 Q
"RTN","DIACLM1",207,0)
 ;
"RTN","DIACLM1",208,0)
EXIT ; -- exit editor
"RTN","DIACLM1",209,0)
 S VALMBCK="Q"
"RTN","DIACLM1",210,0)
 Q
"RTN","DIACLM1",211,0)
 ;
"RTN","DIACLM1",212,0)
LINK ; -- link policy to actions
"RTN","DIACLM1",213,0)
 N X,Y,DLAYGO,DIC,DIE,DR,DA
"RTN","DIACLM1",214,0)
 I '$O(^DIAC(1.61,"D",+DITOP,0)) W !!,"No Application Actions are linked to "_$P(DITOP,U,2)_"."
"RTN","DIACLM1",215,0)
 E  D
"RTN","DIACLM1",216,0)
 . W !!,"The following Application Actions are linked to policy "_$P(DITOP,U,2)_":"
"RTN","DIACLM1",217,0)
 . S Y=0 F  S Y=$O(^DIAC(1.61,"D",+DITOP,Y)) Q:Y<1  D
"RTN","DIACLM1",218,0)
 .. S X=$G(^DIAC(1.61,Y,0))
"RTN","DIACLM1",219,0)
 .. W !?3,$P(X,U)_"     "_$P(X,U,2)_"     "_$P(X,U,3)
"RTN","DIACLM1",220,0)
 L +^DIAC(1.61,0):DILOCKTM I '$T W !,"Another user is editing Application Actions." H 2 Q
"RTN","DIACLM1",221,0)
L1 ;loop back
"RTN","DIACLM1",222,0)
 S DIC=1.61,DIC(0)="AELMQ",DLAYGO=1.61,DIC("DR")=".02:.04;1"
"RTN","DIACLM1",223,0)
 W ! D ^DIC I Y<1 L -^DIAC(1.61,0) Q
"RTN","DIACLM1",224,0)
 S DIE=DIC,DA=+Y,DR=.05 D ^DIE
"RTN","DIACLM1",225,0)
 K X,Y,DR,VALMHDR
"RTN","DIACLM1",226,0)
 G L1
"RTN","DIACLM1",227,0)
 Q
"RTN","DIACLM1",228,0)
 ;
"RTN","DIACLM1",229,0)
ACTIONS ; -- edit Actions [Option]
"RTN","DIACLM1",230,0)
 N X,Y,DIC,DIE,DA,DR,DLAYGO
"RTN","DIACLM1",231,0)
 L +^DIAC(1.61,0):DILOCKTM I '$T W !,"Another user is editing Application Actions." H 2 Q
"RTN","DIACLM1",232,0)
ACT1 ; loop back here
"RTN","DIACLM1",233,0)
 S DIC=1.61,DIC(0)="AEQL",DLAYGO=1.61,DIC("A")="Select APPLICATION ACTION: "
"RTN","DIACLM1",234,0)
 D ^DIC I Y<1 L -^DIAC(1.61,0) Q
"RTN","DIACLM1",235,0)
 S DA=+Y I '$P(Y,U,3) W ! D EN^DIQ ;display
"RTN","DIACLM1",236,0)
 S DIE=DIC,DR=".01:.04;1;5;I X="""" S Y="""";5.1" D ^DIE
"RTN","DIACLM1",237,0)
 K X,Y,DLAYGO,DIC,DIE,DA,DR
"RTN","DIACLM1",238,0)
 W ! G ACT1
"RTN","DIACLM1",239,0)
 Q
"RTN","DIACLM1",240,0)
 ;
"RTN","DIACLM1",241,0)
FCNS ; -- edit Functions
"RTN","DIACLM1",242,0)
 N X,Y,DIC,DIE,DA,DR,DLAYGO,TYPE
"RTN","DIACLM1",243,0)
 L +^DIAC(1.62,0):DILOCKTM I '$T W !,"Another user is editing Functions." H 2 Q
"RTN","DIACLM1",244,0)
FC1 ; loop back here
"RTN","DIACLM1",245,0)
 S DIC=1.62,DIC(0)="AEQLZ",DLAYGO=1.62,DIC("A")="Select POLICY FUNCTION: "
"RTN","DIACLM1",246,0)
 D ^DIC I Y<1 L -^DIAC(1.62,0) Q
"RTN","DIACLM1",247,0)
 S TYPE=$P(Y(0),U,3)
"RTN","DIACLM1",248,0)
 S DA=+Y I '$P(Y,U,3) W ! D EN^DIQ ;display
"RTN","DIACLM1",249,0)
 I DA<1000 W $C(7),!,"VA FILEMAN functions are uneditable!"
"RTN","DIACLM1",250,0)
 E  S DIE=DIC,DR=".01;.02;I X'=""R"" S Y=1;.04;1;2" D ^DIE K X,Y,DLAYGO,DIC,DR
"RTN","DIACLM1",251,0)
 I $G(DA),$$ASSIGN(TYPE) D ADDPOL(TYPE)
"RTN","DIACLM1",252,0)
 W !! G FC1
"RTN","DIACLM1",253,0)
 Q
"RTN","DIACLM1",254,0)
 ;
"RTN","DIACLM1",255,0)
ADDPOL(T) ; -- add a function to a policy
"RTN","DIACLM1",256,0)
 N X,Y,DIC,DA,DR,DIE,DONE,DIAT S DIAT=$G(T)
"RTN","DIACLM1",257,0)
 S DR=$S(DIAT="A":.04,DIAT="R":.07,DIAT="O":"7;8",DIAT="C":3,1:"")
"RTN","DIACLM1",258,0)
 S:DIAT="C" DIC("S")="I $P(^(0),U,2)=""R"""
"RTN","DIACLM1",259,0)
 S:DIAT="R" DIC("S")="I $P(^(0),U,2)'=""R"""
"RTN","DIACLM1",260,0)
 S DONE=0 F  D  Q:DONE
"RTN","DIACLM1",261,0)
 . S DIC=1.6,DIC(0)="AEQZ" W !
"RTN","DIACLM1",262,0)
 . D ^DIC I $G(Y)<1 S DONE=1 Q
"RTN","DIACLM1",263,0)
 . S DIE="^DIAC(1.6,",DA=+Y D ^DIE
"RTN","DIACLM1",264,0)
 D:DIAT="R" INIT^DIACLM
"RTN","DIACLM1",265,0)
 Q
"RTN","DIACLM1",266,0)
 ;
"RTN","DIACLM1",267,0)
ASSIGN(T) ; -- want to assign a function to a policy?
"RTN","DIACLM1",268,0)
 N X,Y,DIR,NAME S T=$G(T)
"RTN","DIACLM1",269,0)
 S NAME=$S(T="A":"ATTRIBUTE",T="R":"RESULT",T="O":"OBLIGATION",T="C":"CONDITION",1:"")
"RTN","DIACLM1",270,0)
 S DIR("?")="Enter YES to edit the "_NAME_" FUNCTION of selected policies"
"RTN","DIACLM1",271,0)
 S DIR("A")="Do you want to assign this "_NAME_" function to a policy? "
"RTN","DIACLM1",272,0)
 S DIR(0)="YAO" W ! D ^DIR
"RTN","DIACLM1",273,0)
 Q +Y
"RTN","DIACOPT")
0^26^B1762073^n/a
"RTN","DIACOPT",1,0)
DIACOPT ;SFISC/RSD,MKB - Data Access Control Options ;18JAN2012
"RTN","DIACOPT",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIACOPT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIACOPT",4,0)
 ;
"RTN","DIACOPT",5,0)
0 S DIC="^DOPT(""DIAC"","
"RTN","DIACOPT",6,0)
 G OPT:$D(^DOPT("DIAC",7)) S ^(0)="DATA ACCESS CONTROL OPTION^1.01" K ^("B")
"RTN","DIACOPT",7,0)
 F X=1:1:7 S ^DOPT("DIAC",X,0)=$P($T(@X),";;",2)
"RTN","DIACOPT",8,0)
 S DIK=DIC D IXALL^DIK
"RTN","DIACOPT",9,0)
OPT ;
"RTN","DIACOPT",10,0)
 S DIC(0)="AEQIZ" D ^DIC G Q:Y<0 S DI=+Y D EN G 0
"RTN","DIACOPT",11,0)
 ;
"RTN","DIACOPT",12,0)
EN ;Entry point for all data access control options
"RTN","DIACOPT",13,0)
 D @DI W !!
"RTN","DIACOPT",14,0)
Q K %,DI,DIC,DIK,X,Y Q
"RTN","DIACOPT",15,0)
 ;
"RTN","DIACOPT",16,0)
1 ;;SET UP APPLICATION ACTIONS
"RTN","DIACOPT",17,0)
 G ACTIONS^DIACLM1
"RTN","DIACOPT",18,0)
 ;
"RTN","DIACOPT",19,0)
2 ;;EDIT/CREATE AN ACTION POLICY
"RTN","DIACOPT",20,0)
 G EN^DIACLM
"RTN","DIACOPT",21,0)
 ;
"RTN","DIACOPT",22,0)
3 ;;TEST A POLICY
"RTN","DIACOPT",23,0)
 S DITOP=$$SELECT^DIACLM Q:DITOP<1  D EN^DIAC1T K DITOP Q
"RTN","DIACOPT",24,0)
 ;
"RTN","DIACOPT",25,0)
4 ;;DISABLE A POLICY
"RTN","DIACOPT",26,0)
 S DA=+$$SELECT^DIACLM Q:DA<1  D DIS^DIACLM1 K DA Q
"RTN","DIACOPT",27,0)
 ;
"RTN","DIACOPT",28,0)
5 ;;DELETE A POLICY
"RTN","DIACOPT",29,0)
 S DA=+$$SELECT^DIACLM Q:DA<1  D DEL^DIACLM1 K DA Q
"RTN","DIACOPT",30,0)
 ;
"RTN","DIACOPT",31,0)
6 ;;PRINT ACTIONS/POLICIES
"RTN","DIACOPT",32,0)
 G EN^DIACP
"RTN","DIACOPT",33,0)
 ;
"RTN","DIACOPT",34,0)
7 ;;POLICY FUNCTIONS
"RTN","DIACOPT",35,0)
 G FCNS^DIACLM1
"RTN","DIACP")
0^24^B49134619^n/a
"RTN","DIACP",1,0)
DIACP ;SLCISC/MKB - Print Policy Documentation ;17FEB2017
"RTN","DIACP",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIACP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIACP",4,0)
 ;
"RTN","DIACP",5,0)
EN ; -- start here
"RTN","DIACP",6,0)
 N TYPE S TYPE=$$REPORT Q:TYPE="^"
"RTN","DIACP",7,0)
 D @("EN"_TYPE)
"RTN","DIACP",8,0)
 Q
"RTN","DIACP",9,0)
 ;
"RTN","DIACP",10,0)
REPORT() ; -- select report type
"RTN","DIACP",11,0)
 N X,Y,DIR,DUOUT,DTOUT
"RTN","DIACP",12,0)
 S DIR(0)="SAO^1:SUMMARY;2:DETAILED"
"RTN","DIACP",13,0)
 S DIR("A")="Print (S)ummary by Application Action, or (D)etails of a Policy? "
"RTN","DIACP",14,0)
 S DIR("?",1)="Choose Summary to print a list of application actions and their policies,"
"RTN","DIACP",15,0)
 S DIR("?")="or Details to show the full contents of a single policy."
"RTN","DIACP",16,0)
 D ^DIR I Y<1 S Y="^"
"RTN","DIACP",17,0)
 Q Y
"RTN","DIACP",18,0)
 ;
"RTN","DIACP",19,0)
EN1 ; -- print summary list of Events
"RTN","DIACP",20,0)
 N DIC,L,FLDS
"RTN","DIACP",21,0)
 S DIC=1.61,L="LIST ACTIONS",FLDS="[DIAC ACTIONS]"
"RTN","DIACP",22,0)
 D EN1^DIP
"RTN","DIACP",23,0)
 Q
"RTN","DIACP",24,0)
 ;
"RTN","DIACP",25,0)
SELECT() ; -- select a Policy
"RTN","DIACP",26,0)
 N X,Y,DIC
"RTN","DIACP",27,0)
 S DIC=1.6,DIC(0)="AEQM" D ^DIC
"RTN","DIACP",28,0)
 Q $S(Y>0:Y,1:"^")
"RTN","DIACP",29,0)
 ;
"RTN","DIACP",30,0)
EN2 ; -- print Policy details
"RTN","DIACP",31,0)
 N DIPOL S DIPOL=$$SELECT Q:DIPOL<1
"RTN","DIACP",32,0)
 ;
"RTN","DIACP",33,0)
 ;Device
"RTN","DIACP",34,0)
 S %ZIS=$S($D(^%ZTSK):"Q",1:"")
"RTN","DIACP",35,0)
 W ! D ^%ZIS K %ZIS I $G(POP) K POP Q
"RTN","DIACP",36,0)
 K POP
"RTN","DIACP",37,0)
 ;
"RTN","DIACP",38,0)
 ;Queue report?
"RTN","DIACP",39,0)
 I $D(IO("Q")),$D(^%ZTSK) D  G END
"RTN","DIACP",40,0)
 . N ZTRTN,ZTDESC,ZTSAVE
"RTN","DIACP",41,0)
 . S ZTRTN="MAIN^DIACP"
"RTN","DIACP",42,0)
 . S ZTDESC="Report of Policy "_$P(DIPOL,U,2)
"RTN","DIACP",43,0)
 . S ZTSAVE("DIPOL")=""
"RTN","DIACP",44,0)
 . D ^%ZTLOAD
"RTN","DIACP",45,0)
 . I $D(ZTSK)#2 W !,"Report queued!",!,"Task number: "_$G(ZTSK),!
"RTN","DIACP",46,0)
 . E  W !,"Report canceled!",!
"RTN","DIACP",47,0)
 . K ZTSK
"RTN","DIACP",48,0)
 . S IOP="HOME" D ^%ZIS
"RTN","DIACP",49,0)
 ;
"RTN","DIACP",50,0)
 U IO
"RTN","DIACP",51,0)
 ;
"RTN","DIACP",52,0)
MAIN ;entry point for queued report
"RTN","DIACP",53,0)
 N DISTK,DISEQ,DIFCN,DIACHDR,DIACRT,DIACPG
"RTN","DIACP",54,0)
 ;
"RTN","DIACP",55,0)
 D INIT
"RTN","DIACP",56,0)
 D @("HDR"_(2-DIACRT))
"RTN","DIACP",57,0)
 D ACTION
"RTN","DIACP",58,0)
 ;
"RTN","DIACP",59,0)
 ;Unwind members
"RTN","DIACP",60,0)
 S DISTK=0,DISTK(0)=0 D ITEM(+DIPOL) Q:$D(DIRUT)
"RTN","DIACP",61,0)
 S DISTK=1,DISTK(DISTK)=+DIPOL_"^0",DISEQ=0
"RTN","DIACP",62,0)
 F  S DISEQ=$O(^DIAC(1.6,+DISTK(DISTK),10,"AC",DISEQ)) D @$S(+DISEQ'>0:"POP",1:"PROC") Q:DISTK<1  Q:$D(DIRUT)
"RTN","DIACP",63,0)
 ;
"RTN","DIACP",64,0)
 I '$D(DIRUT) D FCNS
"RTN","DIACP",65,0)
 ;
"RTN","DIACP",66,0)
END ;Finish up
"RTN","DIACP",67,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","DIACP",68,0)
 E  X $G(^%ZIS("C"))
"RTN","DIACP",69,0)
 K DIRUT,DUOUT,DTOUT
"RTN","DIACP",70,0)
 Q
"RTN","DIACP",71,0)
 ;
"RTN","DIACP",72,0)
POP ; pop the stack
"RTN","DIACP",73,0)
 S DISTK=DISTK-1,DISEQ=$P(DISTK(DISTK),U,2)
"RTN","DIACP",74,0)
 Q
"RTN","DIACP",75,0)
 ;
"RTN","DIACP",76,0)
PROC ; process member
"RTN","DIACP",77,0)
 N DIEN
"RTN","DIACP",78,0)
 S $P(DISTK(DISTK),U,2)=DISEQ
"RTN","DIACP",79,0)
 S DIEN=+$O(^DIAC(1.6,+DISTK(DISTK),10,"AC",DISEQ,0)) Q:DIEN<1
"RTN","DIACP",80,0)
 D ITEM(DIEN)
"RTN","DIACP",81,0)
 ; push the stack
"RTN","DIACP",82,0)
 S DISTK=DISTK+1,DISTK(DISTK)=DIEN_"^0",DISEQ=0
"RTN","DIACP",83,0)
 Q
"RTN","DIACP",84,0)
 ;
"RTN","DIACP",85,0)
ITEM(IEN) ; -- top of item
"RTN","DIACP",86,0)
 N X0,X,TYPE,I,DA,T0,NM,VAL
"RTN","DIACP",87,0)
 S X0=$G(^DIAC(1.6,IEN,0)),TYPE=$P(X0,U,2)
"RTN","DIACP",88,0)
 S X=$S($G(DISEQ):DISEQ,TYPE="S":"POLICY SET",TYPE="R":"RULE",1:"POLICY")
"RTN","DIACP",89,0)
 D PG Q:$D(DIRUT)
"RTN","DIACP",90,0)
 W !?((DISTK-1)*3),X_": "_$P(X0,U),?48,"RESULT: "
"RTN","DIACP",91,0)
 I TYPE="R" W $$EFFECT($P(X0,U,8))
"RTN","DIACP",92,0)
 I TYPE'="R",$P(X0,U,7) W $$FNAME($P(X0,U,7)) S DIFCN("R",$P(X0,U,7))=""
"RTN","DIACP",93,0)
 I $P(X0,U,3) D PG Q:$D(DIRUT)  W !?(DISTK*3),"** DISABLED **"
"RTN","DIACP",94,0)
 I $P(X0,U,4) D  Q:$D(DIRUT)
"RTN","DIACP",95,0)
 . D PG Q:$D(DIRUT)
"RTN","DIACP",96,0)
 . W !?(DISTK*3),"ATTRIBUTES: "_$$FNAME($P(X0,U,4))
"RTN","DIACP",97,0)
 . S DIFCN("A",$P(X0,U,4))=""
"RTN","DIACP",98,0)
 ;
"RTN","DIACP",99,0)
 ; targets
"RTN","DIACP",100,0)
 I $O(^DIAC(1.6,IEN,2,0)) D  Q:$D(DIRUT)
"RTN","DIACP",101,0)
 . D PG Q:$D(DIRUT)
"RTN","DIACP",102,0)
 . W !?(DISTK*3),"TARGETS"_$$CONJ($P(X0,U,5))_": "
"RTN","DIACP",103,0)
 . S I=0 F  S I=$O(^DIAC(1.6,IEN,2,"B",I)) Q:I<1  S DA=+$O(^(I,0)) D  Q:$D(DIRUT)
"RTN","DIACP",104,0)
 .. S T0=$G(^DIAC(1.6,IEN,2,DA,0)),NM=$P(T0,U,2),VAL=$P(T0,U,3)
"RTN","DIACP",105,0)
 .. D PG Q:$D(DIRUT)
"RTN","DIACP",106,0)
 .. W !?(DISTK*3),I_":",?((DISTK+1)*3),NM_" = "_VAL
"RTN","DIACP",107,0)
 ;
"RTN","DIACP",108,0)
 ; conditions
"RTN","DIACP",109,0)
 I $O(^DIAC(1.6,IEN,3,0)) D  Q:$D(DIRUT)
"RTN","DIACP",110,0)
 . D PG Q:$D(DIRUT)
"RTN","DIACP",111,0)
 . W !?(DISTK*3),"CONDITIONS"_$$CONJ($P(X0,U,6))_": "
"RTN","DIACP",112,0)
 . S I=0 F  S I=$O(^DIAC(1.6,IEN,3,"B",I)) Q:I<1  S DA=+$O(^(I,0)) D  Q:$D(DIRUT)
"RTN","DIACP",113,0)
 .. S T0=$G(^DIAC(1.6,IEN,3,DA,0)),NM=$P(T0,U,2),VAL=$P(T0,U,3) Q:NM<1
"RTN","DIACP",114,0)
 .. D PG Q:$D(DIRUT)
"RTN","DIACP",115,0)
 .. W !?(DISTK*3),I_":",?((DISTK+1)*3),$$FNAME(NM)_$S($L(VAL):" ("_VAL_")",1:"")
"RTN","DIACP",116,0)
 .. S DIFCN("C",$P(T0,U,2))=""
"RTN","DIACP",117,0)
 ;
"RTN","DIACP",118,0)
 ; messages & functions
"RTN","DIACP",119,0)
 S X=$G(^DIAC(1.6,IEN,7)) ;deny
"RTN","DIACP",120,0)
 I X D PG Q:$D(DIRUT)  W !?(DISTK*3),"DENY FUNCTION: "_$$FNAME(+X) S DIFCN("O",+X)=""
"RTN","DIACP",121,0)
 I $L($P(X,U,2)) D PG Q:$D(DIRUT)  W !?(DISTK*3),"DENY MESSAGE: "_$P(X,U,2)
"RTN","DIACP",122,0)
 S X=$G(^DIAC(1.6,IEN,8)) ;permit
"RTN","DIACP",123,0)
 I X D PG Q:$D(DIRUT)  W !?(DISTK*3),"PERMIT FUNCTION: "_$$FNAME(+X) S DIFCN("O",+X)=""
"RTN","DIACP",124,0)
 I $L($P(X,U,2)) D PG Q:$D(DIRUT)  W !?(DISTK*3),"PERMIT MESSAGE: "_$P(X,U,2)
"RTN","DIACP",125,0)
 ;
"RTN","DIACP",126,0)
 ; available fields
"RTN","DIACP",127,0)
 S X=$G(^DIAC(1.6,IEN,5)) I $L(X) D  Q:$D(DIRUT)
"RTN","DIACP",128,0)
 . D PG Q:$D(DIRUT)
"RTN","DIACP",129,0)
 . W !?(DISTK*3),"FIELDS: "_X
"RTN","DIACP",130,0)
 . S I=0 F  S I=$O(^DIAC(1.6,IEN,5.1,I)) Q:I<1  S X0=$G(^(I,0)) D
"RTN","DIACP",131,0)
 .. S X="("_$P(X0,U)_$S($P(X0,U,3):","_$P(X0,U,3),1:"")_")"
"RTN","DIACP",132,0)
 .. D PG Q:$D(DIRUT)
"RTN","DIACP",133,0)
 .. W !?(DISTK*3),X_": "_$P(X0,U,4)
"RTN","DIACP",134,0)
 ;
"RTN","DIACP",135,0)
 D PG Q:$D(DIRUT)  W !
"RTN","DIACP",136,0)
 ;
"RTN","DIACP",137,0)
 I TYPE'="R",$O(^DIAC(1.6,IEN,10,0)) D  ;caption for next stack level
"RTN","DIACP",138,0)
 . D PG Q:$D(DIRUT)
"RTN","DIACP",139,0)
 . W !?(DISTK*3),$S(TYPE="P":"RULES",1:"POLICIES")_": "
"RTN","DIACP",140,0)
 Q
"RTN","DIACP",141,0)
 ;
"RTN","DIACP",142,0)
CONJ(X) ; -- return name of conjunction
"RTN","DIACP",143,0)
 N Y S Y=$S(X="!":"OR",X="&":"AND",1:"")
"RTN","DIACP",144,0)
 S:$L(Y) Y=" ("_Y_")"
"RTN","DIACP",145,0)
 Q Y
"RTN","DIACP",146,0)
 ;
"RTN","DIACP",147,0)
EFFECT(X) ; -- return Effect name
"RTN","DIACP",148,0)
 N Y S X=$G(X)
"RTN","DIACP",149,0)
 S Y=$S(X="P":"PERMIT",X="D":"DENY",1:"")
"RTN","DIACP",150,0)
 Q Y
"RTN","DIACP",151,0)
 ;
"RTN","DIACP",152,0)
FNAME(X) ; -- return Function name
"RTN","DIACP",153,0)
 Q $P($G(^DIAC(1.62,+$G(X),0)),U)
"RTN","DIACP",154,0)
 ;
"RTN","DIACP",155,0)
FCNS ; -- display functions
"RTN","DIACP",156,0)
 N DITYP,DIEN,X0
"RTN","DIACP",157,0)
 F DITYP="A","C","O","R" D  Q:$D(DIRUT)
"RTN","DIACP",158,0)
 . S DIEN=0 F  S DIEN=$O(DIFCN(DITYP,DIEN)) Q:DIEN<1  D  Q:$D(DIRUT)
"RTN","DIACP",159,0)
 .. S X0=$G(^DIAC(1.62,DIEN,0)) Q:X0=""
"RTN","DIACP",160,0)
 .. D PG Q:$D(DIRUT)  W !,"FUNCTION: "_$P(X0,U)
"RTN","DIACP",161,0)
 .. W ?50,"TYPE: ",$$EXTERNAL^DILFD(1.62,.03,,$P(X0,U,3))
"RTN","DIACP",162,0)
 .. D PG Q:$D(DIRUT)  W !,"  DISPLAY NAME: "_$P(X0,U,2)
"RTN","DIACP",163,0)
 .. I DITYP="R",$L($P(X0,U,4)) D
"RTN","DIACP",164,0)
 ... N X S X=$P(X0,U,4)
"RTN","DIACP",165,0)
 ... W ?44,"NULL VALUE: "_$S(X="P":"PERMIT",X="D":"DENY",1:"")
"RTN","DIACP",166,0)
 .. D PG Q:$D(DIRUT)  W !,"  EXECUTE CODE: "_$G(^DIAC(1.62,DIEN,1))
"RTN","DIACP",167,0)
 .. I $O(^DIAC(1.62,DIEN,2,0)) D DESC(DIEN) Q:$D(DIRUT)
"RTN","DIACP",168,0)
 .. D PG Q:$D(DIRUT)  W !
"RTN","DIACP",169,0)
 Q
"RTN","DIACP",170,0)
 ;
"RTN","DIACP",171,0)
DESC(DA) ; -- write Function Description
"RTN","DIACP",172,0)
 Q:'$O(^DIAC(1.62,+$G(DA),2,0))
"RTN","DIACP",173,0)
 N DII,X
"RTN","DIACP",174,0)
 D PG Q:$D(DIRUT)  W !," DESCRIPTION: "
"RTN","DIACP",175,0)
 S DII=0 F  S DII=$O(^DIAC(1.62,DA,2,DII)) Q:DII<1  S X=$G(^(DII,0)) D PG Q:$D(DIRUT)  W !?1,X
"RTN","DIACP",176,0)
 Q
"RTN","DIACP",177,0)
 ;
"RTN","DIACP",178,0)
INIT ; -- Setup
"RTN","DIACP",179,0)
 N %,%H,X,Y
"RTN","DIACP",180,0)
 S %H=$H D YX^%DTC
"RTN","DIACP",181,0)
 S DIACHDR=$P(Y,"@")_"  "_$P($P(Y,"@",2),":",1,2)_"    PAGE "
"RTN","DIACP",182,0)
 S DIACRT=$E(IOST,1,2)="C-"
"RTN","DIACP",183,0)
 K DIRUT,DUOUT,DTOUT
"RTN","DIACP",184,0)
 Q
"RTN","DIACP",185,0)
 ;
"RTN","DIACP",186,0)
ACTION ; -- display action
"RTN","DIACP",187,0)
 I '$O(^DIAC(1.61,"D",+DIPOL,0)) W !,"APPLICATION ACTION: <none linked>",! Q
"RTN","DIACP",188,0)
 N X0,I,X,DIACT
"RTN","DIACP",189,0)
 S DIACT=0 F  S DIACT=+$O(^DIAC(1.61,"D",+DIPOL,DIACT)) Q:DIACT<1  D
"RTN","DIACP",190,0)
 . S X0=$G(^DIAC(1.61,DIACT,0))
"RTN","DIACP",191,0)
 . W !,"APPLICATION ACTION: ",$P(X0,U),?50,"TYPE: ",$$ACTYP($P(X0,U,4))
"RTN","DIACP",192,0)
 . W !?13,"FILE#: ",$P(X0,U,2),?46,"API NAME: ",$P(X0,U,3)
"RTN","DIACP",193,0)
 . W:$L($G(^DIAC(1.61,DIACT,1))) !," SHORT DESCRIPTION: ",^(1)
"RTN","DIACP",194,0)
 . W:$L($G(^DIAC(1.61,DIACT,5))) !,"  AVAILABLE FIELDS: ",^(5)
"RTN","DIACP",195,0)
 . S I=0 F  S I=$O(^DIAC(1.61,DIACT,5.1,I)) Q:I<1  S X0=$G(^(I,0)) D
"RTN","DIACP",196,0)
 .. S X="("_$P(X0,U)_$S($P(X0,U,3):","_$P(X0,U,3),1:"")_")"
"RTN","DIACP",197,0)
 .. W !,$$RJ^XLFSTR(X,18)_": "_$P(X0,U,4)
"RTN","DIACP",198,0)
 . W !
"RTN","DIACP",199,0)
 Q
"RTN","DIACP",200,0)
 ;
"RTN","DIACP",201,0)
ACTYP(X) ; -- return action type name
"RTN","DIACP",202,0)
 N Y S X=$G(X)
"RTN","DIACP",203,0)
 S Y=$S(X="C":"CREATE",X="R":"READ",X="U":"UPDATE",X="D":"DELETE",1:"")
"RTN","DIACP",204,0)
 Q Y
"RTN","DIACP",205,0)
 ;
"RTN","DIACP",206,0)
PG ; -- check line count for new page
"RTN","DIACP",207,0)
 I $Y+3'<IOSL D HEADER Q:$D(DIRUT)
"RTN","DIACP",208,0)
 Q
"RTN","DIACP",209,0)
 ;
"RTN","DIACP",210,0)
HEADER ; -- all headers except first
"RTN","DIACP",211,0)
 I DIACRT D  Q:$D(DIRUT)
"RTN","DIACP",212,0)
 . N DIR,X,Y
"RTN","DIACP",213,0)
 . S DIR(0)="E" W ! D ^DIR
"RTN","DIACP",214,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S (ZTSTOP,DIRUT)=1 Q
"RTN","DIACP",215,0)
HDR1 ;first header for CRTs
"RTN","DIACP",216,0)
 W @IOF
"RTN","DIACP",217,0)
HDR2 ;first header for non-CRTs
"RTN","DIACP",218,0)
 S DIACPG=$G(DIACPG)+1
"RTN","DIACP",219,0)
 ;I $G(DIACT),$L($G(^DIAC(1.61,+$G(DIACT),1))) W ^(1)
"RTN","DIACP",220,0)
 W !,$P(DIPOL,U,2),?(IOM-$L(DIACHDR)-$L(DIACPG)-1),DIACHDR_DIACPG
"RTN","DIACP",221,0)
 W !,$TR($J("",IOM-1)," ","-"),!
"RTN","DIACP",222,0)
 Q
"RTN","DIACX")
0^23^B15814572^n/a
"RTN","DIACX",1,0)
DIACX ;SLCISC/KCM,MKB - Policy utilities ;17FEB2017
"RTN","DIACX",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DIACX",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIACX",4,0)
 ;
"RTN","DIACX",5,0)
 ; External References          ICR#
"RTN","DIACX",6,0)
 ; -------------------          ----
"RTN","DIACX",7,0)
 ; ^XUSEC                      10076
"RTN","DIACX",8,0)
 ; XUA4A72                      1625
"RTN","DIACX",9,0)
 ;
"RTN","DIACX",10,0)
SCR() ; -- set Member screen to ensure type is compatible w/parent
"RTN","DIACX",11,0)
 N DAD,Y
"RTN","DIACX",12,0)
 S DAD=$P($G(^DIAC(1.6,+$G(DA(1)),0)),U,2),Y="I 1"
"RTN","DIACX",13,0)
 I DAD="R" S Y="I 0"                   ;  Rule: no members
"RTN","DIACX",14,0)
 I DAD="P" S Y="I $P(^(0),U,2)=""R"""  ;Policy: Rules only
"RTN","DIACX",15,0)
 I DAD="S" S Y="I $S($P(^(0),U,2)=""R"":0,$P(^(0),U,2)=""P"":1,1:'$$TREE^DIACX)"
"RTN","DIACX",16,0)
 Q Y
"RTN","DIACX",17,0)
 ;
"RTN","DIACX",18,0)
TREE() ; -- look back up tree to make sure item is not ancestor
"RTN","DIACX",19,0)
 N DIACDAD,DDI,Z
"RTN","DIACX",20,0)
 S DIACDAD=DA(1) I Y=DIACDAD Q 1          ;parent
"RTN","DIACX",21,0)
 ; $O(^DIAC(1.6,DIACDAD,10,"B",Y,0)) Q 1  ;sibling?
"RTN","DIACX",22,0)
 S Z=0 D TR1                              ;ancestors
"RTN","DIACX",23,0)
 Q Z
"RTN","DIACX",24,0)
TR1 F DDI=0:0 S DDI=$O(^DIAC(1.6,"AD",DIACDAD,DDI)) Q:DDI'>0  S:DDI=Y Z=1 Q:Z  D TR2
"RTN","DIACX",25,0)
 Q
"RTN","DIACX",26,0)
TR2 N DIACDAD S DIACDAD=DDI N DDI D TR1
"RTN","DIACX",27,0)
 Q
"RTN","DIACX",28,0)
 ;
"RTN","DIACX",29,0)
CHKNAME(FN) ;CHECK A NAME, AND DISPLAY APPROPRIATE MESSAGE
"RTN","DIACX",30,0)
 I $D(^DIAC(FN,"B",X)) D EN^DDIOL("   Duplicate names not allowed.") K X Q
"RTN","DIACX",31,0)
 N %,%1 D NAME E  D EN^DDIOL("Not a known package or a local namespace.") Q
"RTN","DIACX",32,0)
 D EN^DDIOL("  Located in the "_$E(X,1,%)_" ("_%1_") namespace.")
"RTN","DIACX",33,0)
 Q
"RTN","DIACX",34,0)
NAME ;CHECK NAMESPACING IN PACKAGE FILE.
"RTN","DIACX",35,0)
 I $E(X,1)="A"!($E(X,1)="Z") S %=1,%1="Local" Q
"RTN","DIACX",36,0)
 F %=4:-1:2 G:$D(^DIC(9.4,"C",$E(X,1,%))) NAMEOK
"RTN","DIACX",37,0)
 I 0
"RTN","DIACX",38,0)
 Q
"RTN","DIACX",39,0)
NAMEOK ;FOUND
"RTN","DIACX",40,0)
 S %1=$O(^DIC(9.4,"C",$E(X,1,%),0))
"RTN","DIACX",41,0)
 I %1 S:$D(^DIC(9.4,%1,0)) %1=$P(^(0),U) I 1 Q
"RTN","DIACX",42,0)
 I 0
"RTN","DIACX",43,0)
 Q
"RTN","DIACX",44,0)
TEST ;TEST CHKNAME
"RTN","DIACX",45,0)
 W !,"Enter a name, and the computer will respond with the namespace to which"
"RTN","DIACX",46,0)
 W !,"that name belongs.  It does this by looking at the package file.",!!
"RTN","DIACX",47,0)
T1 R !,"NAME: ",X:DTIME,"  " Q:$G(X)=""
"RTN","DIACX",48,0)
 D CHKNAME G T1
"RTN","DIACX",49,0)
 Q
"RTN","DIACX",50,0)
 ;
"RTN","DIACX",51,0)
ORPHANS  ; -- find orphan entries [rule w/o a policy, pol/set w/o parent or event]
"RTN","DIACX",52,0)
 N I,X S I=0
"RTN","DIACX",53,0)
 F  S I=$O(^DIAC(1.6,I)) Q:I<1  S X=$G(^(I,0)) I '$O(^DIAC(1.6,"AD",I,0))  D
"RTN","DIACX",54,0)
 . I $P(X,U,2)="R" W !,I,?10,$P(X,U),?40,"-- rule w/o policy" Q
"RTN","DIACX",55,0)
 . I '$O(^DIAC(1.61,"D",I,0)) W !,I,?10,$P(X,U),?40,"-- no parent policy/set or event"
"RTN","DIACX",56,0)
 Q
"RTN","DIACX",57,0)
 ;
"RTN","DIACX",58,0)
SEQ ; -- Xecutable help to show Member sequence numbers in use
"RTN","DIACX",59,0)
 W !?3,"Sequence numbers already in use:"
"RTN","DIACX",60,0)
 N SEQ,IEN
"RTN","DIACX",61,0)
 S SEQ=0 F  S SEQ=$O(^DIAC(1.6,DA(1),10,"AC",SEQ)) Q:SEQ<1  D
"RTN","DIACX",62,0)
 . S IEN=0 F  S IEN=$O(^DIAC(1.6,DA(1),10,"AC",SEQ,IEN)) Q:IEN<1  D
"RTN","DIACX",63,0)
 .. W !?3,SEQ,?10,$P($G(^DIAC(1.6,IEN,0)),U)
"RTN","DIACX",64,0)
 W !
"RTN","DIACX",65,0)
 Q
"RTN","DIACX",66,0)
 ;
"RTN","DIACX",67,0)
 ; -- ScreenMan form utilities:
"RTN","DIACX",68,0)
 ;
"RTN","DIACX",69,0)
REQTCONJ ; -- require conjunction? [Target block post-action]
"RTN","DIACX",70,0)
 N X0,IENS,X
"RTN","DIACX",71,0)
 S X0=@(DIE_"0)"),IENS=DA(1)_",",X=$S($P(X0,U,4)>1:1,1:0)
"RTN","DIACX",72,0)
 D REQ^DDSUTL("CONJUNCTION","DIAC POLICY 1A",1,X,IENS)
"RTN","DIACX",73,0)
 Q
"RTN","DIACX",74,0)
 ;
"RTN","DIACX",75,0)
CKTCONJ ; -- ask Conjunction again? [branching logic]
"RTN","DIACX",76,0)
 I $G(X)="",$P($G(^DIAC(1.6,+$G(DA),2,0)),U,4)>1 D
"RTN","DIACX",77,0)
 . D HLP^DDSUTL("Conjunction is required for multiple attributes.")
"RTN","DIACX",78,0)
 . S DDSBR="CONJUNCTION"
"RTN","DIACX",79,0)
 Q
"RTN","DIACX",80,0)
 ;
"RTN","DIACX",81,0)
REQCCONJ ; -- require conjunction? [Condition block post-action]
"RTN","DIACX",82,0)
 N X0,IENS,X
"RTN","DIACX",83,0)
 S X0=@(DIE_"0)"),IENS=DA(1)_",",X=$S($P(X0,U,4)>1:1,1:0)
"RTN","DIACX",84,0)
 D REQ^DDSUTL("CONJUNCTION","DIAC RULE 2",2,X,IENS)
"RTN","DIACX",85,0)
 Q
"RTN","DIACX",86,0)
 ;
"RTN","DIACX",87,0)
CKCCONJ ; -- ask Conjunction again? [branching logic]
"RTN","DIACX",88,0)
 I $G(X)="",$P($G(^DIAC(1.6,+$G(DA),3,0)),U,4)>1 D
"RTN","DIACX",89,0)
 . D HLP^DDSUTL("Conjunction is required for multiple conditions.")
"RTN","DIACX",90,0)
 . S DDSBR="CONJUNCTION"
"RTN","DIACX",91,0)
 Q
"RTN","DIACX",92,0)
 ;
"RTN","DIACX",93,0)
EFFECT ; -- ask Effect/Result again? [branching logic]
"RTN","DIACX",94,0)
 I $G(X)="" D
"RTN","DIACX",95,0)
 . D HLP^DDSUTL("Result is required; please select Permit or Deny.")
"RTN","DIACX",96,0)
 . S DDSBR="RESULT"
"RTN","DIACX",97,0)
 Q
"RTN","DIACX",98,0)
 ;
"RTN","DIACX",99,0)
RESULT ; -- ask Result Function again? [branching logic]
"RTN","DIACX",100,0)
 I $G(X)="" D
"RTN","DIACX",101,0)
 . D HLP^DDSUTL("Result Function is required for policies and sets.")
"RTN","DIACX",102,0)
 . S DDSBR="RESULT FUNCTION"
"RTN","DIACX",103,0)
 Q
"RTN","DIACX",104,0)
 ;
"RTN","DIACX",105,0)
 ; -- Policy Functions:
"RTN","DIACX",106,0)
 ;
"RTN","DIACX",107,0)
HASKEY ; -- does user hold key X?
"RTN","DIACX",108,0)
 S Y=$D(^XUSEC(X,+$G(DIUSR)))
"RTN","DIACX",109,0)
 Q
"RTN","DIACX",110,0)
 ;
"RTN","DIACX",111,0)
BOOL ; -- evaluates DIVAL(X) as a boolean, returns 1 or 0 in Y
"RTN","DIACX",112,0)
 S Y=$S(+$G(DIVAL(X)):1,1:0)
"RTN","DIACX",113,0)
 Q
"RTN","DIACX",114,0)
 ;
"RTN","DIACX",115,0)
PCLS(CLASS,USER) ; -- is user a member of Person Class X?
"RTN","DIACX",116,0)
 ; X = IEN or VA Code for Person Class #8932.1
"RTN","DIACX",117,0)
 N Y
"RTN","DIACX",118,0)
 S Y=$$GET^XUA4A72(+$G(USER)),CLASS=$G(CLASS)
"RTN","DIACX",119,0)
 I +CLASS=CLASS,CLASS=+Y Q 1 ;IEN
"RTN","DIACX",120,0)
 I CLASS=$P(Y,U,7) Q 1       ;VA Code
"RTN","DIACX",121,0)
 Q 0
"RTN","DIALOG")
0^29^B28415998^B28460894
"RTN","DIALOG",1,0)
DIALOG ;SFISC/TKW - BUILD FILEMAN DIALOGUE ;2014-12-19  12:39 PM
"RTN","DIALOG",2,0)
V ;;22.2;VA FileMan;**7,8**;Jan 05, 2016;Build 19
"RTN","DIALOG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIALOG",4,0)
 ;;Submitted to OSEHRA 5 January 2015 by the VISTA Expertise Network.
"RTN","DIALOG",5,0)
 ;;Based on Medsphere Systems Corporation's MSC FileMan 1051.
"RTN","DIALOG",6,0)
 ;;Licensed under the terms of the Apache License, Version 2.0.
"RTN","DIALOG",7,0)
 ;
"RTN","DIALOG",8,0)
 G GO
"RTN","DIALOG",9,0)
 ;
"RTN","DIALOG",10,0)
EN(DIANUM,DIPI) ;
"RTN","DIALOG",11,0)
GO N DIERR,DIMSG,DIHELP,DIT Q:'$D(^DI(.84,DIANUM,0))  S DIT=$P(^(0),U,2)
"RTN","DIALOG",12,0)
 K ^TMP($S(DIT=1:"DIERR",DIT=2:"DIMSG",1:"DIHELP"),$J)
"RTN","DIALOG",13,0)
 S IOM=$G(IOM,80)
"RTN","DIALOG",14,0)
 D BLD(DIANUM,.DIPI),MSG("W"_$E("EMH",DIT),,IOM,1)
"RTN","DIALOG",15,0)
 Q
"RTN","DIALOG",16,0)
 ;
"RTN","DIALOG",17,0)
BLD(D0,DIPI,DIPE,DIALOGO,DIFLAG) ;BUILD FILEMAN DIALOG
"RTN","DIALOG",18,0)
 ;1)DIALOG file IEN, 2)Internal params, 3)External params, 4)Output array name, 5)S=Suppress blank line between messages, F=Format output like ^TMP
"RTN","DIALOG",19,0)
 ;N DINAKED S DINAKED=$NA(^(0))
"RTN","DIALOG",20,0)
 N DINAKED S DINAKED=$$LGR^%ZOSV ;p7
"RTN","DIALOG",21,0)
 I $G(^DI(.84,+$G(D0),0))="" G Q1
"RTN","DIALOG",22,0)
 N E,I,J,K,L,M,N,P,R,S,X,O,DILANG S DILANG=+$G(DUZ("LANG")),DIFLAG=$G(DIFLAG)
"RTN","DIALOG",23,0)
 I $G(DIPE)]"",$O(DIPE(""))="" S DIPE(1)=DIPE
"RTN","DIALOG",24,0)
 I '$O(^DI(.84,D0,4,DILANG,1,0))!('DILANG) S DILANG=1
"RTN","DIALOG",25,0)
 S P=$P(^DI(.84,+D0,0),U,3)["y",R=$P(^(0),U,2) S:'R R=1
"RTN","DIALOG",26,0)
 S O=$G(DIALOGO) S:O="" O="^TMP(",DIFLAG=DIFLAG_"F" D  S DIALOGO=O
"RTN","DIALOG",27,0)
 . S I=$E(O,$L(O)) I $E(O,1,4)="DIR(" S DIFLAG=$TR(DIFLAG,"F","")
"RTN","DIALOG",28,0)
 . I DIFLAG'["F" S O=$E(O,1,($L(O)-1))_$S(I="(":"",I=",":")",1:I) Q
"RTN","DIALOG",29,0)
 . S O=$P(O,")",1)_$S("(,"[I:"",O'["(":"(",1:",")_""""_$P("DIERR^DIMSG^DIHELP",U,R)_""""_$P(","""_$J_"""",U,O["^TMP(")_")" ;WORRIED THAT $J WOULD NOT BE NUMERIC
"RTN","DIALOG",30,0)
 . Q
"RTN","DIALOG",31,0)
 S N=$O(@DIALOGO@(":"),-1)
"RTN","DIALOG",32,0)
 S N=N+1,(I,J,M)=0 S:R>1!(DIFLAG'["F") J=N-1
"RTN","DIALOG",33,0)
 I R=1,DIFLAG["F" S O=$P(O,")",1)_","_N_",""TEXT"")"
"RTN","DIALOG",34,0)
 I DILANG>1 F  S I=$O(^DI(.84,D0,4,DILANG,1,I)) Q:'I  S M=M+1,K(M)=$G(^(I,0)) I P S L=0 D PARAM
"RTN","DIALOG",35,0)
 I DILANG'>1 F  S I=$O(^DI(.84,D0,2,I)) Q:'I  S M=M+1,K(M)=$G(^(I,0)) I P S L=0 D PARAM
"RTN","DIALOG",36,0)
 G:'M Q2 D
"RTN","DIALOG",37,0)
 . N X S X=M
"RTN","DIALOG",38,0)
 . I N>1,DIFLAG'["S" I DIFLAG'["F"!(R>1) S J=J+1,@O@(J)=" ",X=X+1
"RTN","DIALOG",39,0)
 . I DIALOGO'["DIR" S:R=1 DIERR=($P($G(DIERR),U)+1)_U_($P($G(DIERR),U,2)+X) S:R=2 DIMSG=$G(DIMSG)+X S:R=3 DIHELP=$G(DIHELP)+X
"RTN","DIALOG",40,0)
 . D BTXT Q
"RTN","DIALOG",41,0)
 I (DIALOGO["DIR")!(R'=1)!(DIFLAG'["F") G Q2
"RTN","DIALOG",42,0)
 S @DIALOGO@(N)=D0
"RTN","DIALOG",43,0)
 S I="",J=0 F  S I=$O(DIPE(I)) Q:I=""  I $G(DIPE(I))]"" S @DIALOGO@(N,"PARAM",I)=DIPE(I),J=J+1
"RTN","DIALOG",44,0)
 I J S @DIALOGO@(N,"PARAM",0)=J
"RTN","DIALOG",45,0)
 S @DIALOGO@("E",D0,N)=""
"RTN","DIALOG",46,0)
 ;
"RTN","DIALOG",47,0)
Q2 I $G(^DI(.84,D0,6))]"" X ^(6)
"RTN","DIALOG",48,0)
Q1 I DINAKED]"" S DINAKED=$S(DINAKED["""""":$O(@DINAKED),1:$D(@DINAKED)) ;p8
"RTN","DIALOG",49,0)
 Q
"RTN","DIALOG",50,0)
 ;
"RTN","DIALOG",51,0)
PARAM S S=$F(K(M),"|",L) G:'S QP S E=$F(K(M),"|",S) G:'E QP
"RTN","DIALOG",52,0)
 S X=$E(K(M),S,E-2) G:X="" PARAM
"RTN","DIALOG",53,0)
 S DIPI(X)=$S($G(DIPI(X))]"":DIPI(X),1:$G(DIPI)),L=S+$L(DIPI(X))-$L(X)
"RTN","DIALOG",54,0)
 I ($L(K(M))+$L(DIPI(X)))<245 S K(M)=$E(K(M),1,S-2)_DIPI(X)_$E(K(M),E,9999) G:K(M)]"" PARAM K K(M) S M=M-1 G QP
"RTN","DIALOG",55,0)
 I $L($E(K(M),1,S-2))+$L(DIPI(X))<245 S K(M+1)=$E(K(M),E,9999),K(M)=$E(K(M),1,S-2)_DIPI(X),M=M+1,L=0 G PARAM
"RTN","DIALOG",56,0)
 I $L(DIPI(X))+$L($E(K(M),E,9999))<245 S K(M+1)=DIPI(X)_$E(K(M),E,9999),K(M)=$E(K(M),1,S-2),M=M+1,L=0 G PARAM
"RTN","DIALOG",57,0)
 S K(M+1)=DIPI(X),K(M+2)=$E(K(M),E,9999),K(M)=$E(K(M),1,S-2),M=M+2,L=0
"RTN","DIALOG",58,0)
 G PARAM
"RTN","DIALOG",59,0)
QP Q
"RTN","DIALOG",60,0)
 ;
"RTN","DIALOG",61,0)
BTXT N M
"RTN","DIALOG",62,0)
 F M=0:0 S M=$O(K(M)) Q:'M  S J=J+1 D
"RTN","DIALOG",63,0)
 .I DIALOGO'["DIR" S @O@(J)=K(M) Q
"RTN","DIALOG",64,0)
 .I '$O(K(M)),'$O(^DI(.84,D0,2,I)) S @DIALOGO=K(M) Q
"RTN","DIALOG",65,0)
 .S @DIALOGO@(J)=K(M) Q
"RTN","DIALOG",66,0)
 Q
"RTN","DIALOG",67,0)
 ;
"RTN","DIALOG",68,0)
EZBLD(D0,DIPI) ;RETURN SINGLE LINE OF TEXT FROM DIALOG FILE.
"RTN","DIALOG",69,0)
 ;D0 = DIALOG file IEN, DIPI = Input Params
"RTN","DIALOG",70,0)
 ;N DINAKED S DINAKED=$NA(^(0)) I $G(^DI(.84,+$G(D0),0))="" D Q1 Q "" ;p7
"RTN","DIALOG",71,0)
 N DINAKED S DINAKED=$$LGR^%ZOSV I $G(^DI(.84,+$G(D0),0))="" D Q1 Q ""
"RTN","DIALOG",72,0)
 N DILANG S DILANG=+$G(DUZ("LANG"))
"RTN","DIALOG",73,0)
 N X I DILANG>1 S X=$O(^DI(.84,+D0,4,DILANG,1,0)) S:X X=$G(^(X,0))
"RTN","DIALOG",74,0)
 I $G(X)']"" S X=$O(^DI(.84,+D0,2,0)) S:X X=$G(^(X,0))
"RTN","DIALOG",75,0)
 I ($P(^DI(.84,+D0,0),"^",3)'["y"!($G(X)="")) S X=$G(X) G QEZ
"RTN","DIALOG",76,0)
 N K,S,L,M,I,E S M=1,L=0,K(M)=X
"RTN","DIALOG",77,0)
 I $G(DIPI)]"",$O(DIPI(""))="" S DIPI(1)=DIPI
"RTN","DIALOG",78,0)
 D PARAM S X=$G(K(1))
"RTN","DIALOG",79,0)
QEZ D  Q X
"RTN","DIALOG",80,0)
 . N X D Q2 Q
"RTN","DIALOG",81,0)
 ;
"RTN","DIALOG",82,0)
 ;
"RTN","DIALOG",83,0)
MSG(DIFLGS,DIOUT,DIMARGIN,DICOLUMN,DIINNAME) ;WRITE MESSAGES OR MOVE THEM TO SIMPLE ARRAY.
"RTN","DIALOG",84,0)
 ;1)Flags, 2)Output array name, 3)Margin width of text, 4)Starting column no., 5)Input array name.
"RTN","DIALOG",85,0)
 ;N Z,%,X,Y,I,J,K,N,DITYP,DIWIDTH,DITMP,DIIN,DINAKED S DINAKED=$NA(^(0))
"RTN","DIALOG",86,0)
 N Z,%,X,Y,I,J,K,N,DITYP,DIWIDTH,DITMP,DIIN,DINAKED S DINAKED=$$LGR^%ZOSV ;p7
"RTN","DIALOG",87,0)
 S:$G(DIFLGS)="" DIFLGS="W" D
"RTN","DIALOG",88,0)
 . S DITMP=0 I $G(DIINNAME)="" S DIINNAME="^TMP(",DITMP=1 Q
"RTN","DIALOG",89,0)
 . N % S %=DIINNAME I %'["(" S DIINNAME=DIINNAME_"(" Q
"RTN","DIALOG",90,0)
 . Q:$E(%,$L(%))=","
"RTN","DIALOG",91,0)
 . I $E(%,$L(%))=")" S DIINNAME=$P(%,")",1)_"," Q
"RTN","DIALOG",92,0)
 . S DIINNAME=%_"," Q
"RTN","DIALOG",93,0)
 S DITYP="",%=0 D
"RTN","DIALOG",94,0)
 . F Z="E","H","M" S %=%+1 I DIFLGS[Z,$D(@(DIINNAME_""""_$P("DIERR^DIHELP^DIMSG",U,%)_""""_$P(","""_$J_"""",U,(DITMP>0))_")")) S $P(DITYP,U,%)=$P("DIERR^DIHELP^DIMSG",U,%)
"RTN","DIALOG",95,0)
 . I DITYP="",$D(@(DIINNAME_"""DIERR"""_$P(","""_$J_"""",U,(DITMP>0))_")")) S DITYP="DIERR"
"RTN","DIALOG",96,0)
 . Q
"RTN","DIALOG",97,0)
 S DIWIDTH=$S($G(DIMARGIN):DIMARGIN,$G(IOM):(IOM-5),1:75),DICOLUMN=+$G(DICOLUMN)
"RTN","DIALOG",98,0)
 K:DIFLGS["A" DIOUT S (K,Z)=0
"RTN","DIALOG",99,0)
AWS S K=K+1 I K>3 G Q1
"RTN","DIALOG",100,0)
 G:$P(DITYP,U,K)="" AWS
"RTN","DIALOG",101,0)
 S DIIN=DIINNAME_""""_$P(DITYP,U,K)_"""" S:DITMP DIIN=DIIN_","""_$J_""""
"RTN","DIALOG",102,0)
 S (I,N)=0
"RTN","DIALOG",103,0)
 F  S N=$O(@(DIIN_")")@(N)) Q:'N  S:K>1 X=$G(@(DIIN_","_N_")")) D:K>1  I K=1 D:I&(DIFLGS'["B") LN S I=1,J=0 F  S J=$O(@(DIIN_")")@(N,"TEXT",J)) Q:'J  S X=$G(@(DIIN_","_N_",""TEXT"","_J_")")) D
"RTN","DIALOG",104,0)
 . I DIFLGS["A",'$G(DIMARGIN) S Z=Z+1,DIOUT(Z)=X
"RTN","DIALOG",105,0)
 . I DIFLGS'["W",'$G(DIMARGIN) Q
"RTN","DIALOG",106,0)
 . S Y=X D:X=""  F  Q:X=""  F %=$L(X," "):-1:1 S:%=1&($L($P(X," ",1,%))>DIWIDTH) X=$E(X,1,(DIWIDTH-1))_" "_$E(X,DIWIDTH,$L(X)),%=%+1 I $L($P(X," ",1,%))'>DIWIDTH S Y=$P(X," ",1,%) D  S X=$P(X," ",%+1,$L(X," ")) Q
"RTN","DIALOG",107,0)
 .. W:DIFLGS["W" !?DICOLUMN,Y S:DIFLGS["A"&$G(DIMARGIN) Z=Z+1,DIOUT(Z)=Y
"RTN","DIALOG",108,0)
 .. Q
"RTN","DIALOG",109,0)
 . Q
"RTN","DIALOG",110,0)
 F I=K:1:2 I $P(DITYP,U,I+1)]"" D LN Q
"RTN","DIALOG",111,0)
 I DIFLGS["A",DIFLGS["T" S DIOUT=Z
"RTN","DIALOG",112,0)
 I DIFLGS'["S" K @(DIIN_")"),@($P(DITYP,U,K))
"RTN","DIALOG",113,0)
 G AWS
"RTN","DIALOG",114,0)
 ;
"RTN","DIALOG",115,0)
LN W:DIFLGS["W" ! S:(DIFLGS["A")&Z Z=Z+1,DIOUT(Z)="" Q
"RTN","DIALOGU")
0^30^B4301510^B4304241
"RTN","DIALOGU",1,0)
DIALOGU ;SFISC/MMW - FUNCTIONS FOR DIALOGS ;24MAR2010
"RTN","DIALOGU",2,0)
 ;;22.2;VA FileMan;**7,8**;Jan 05, 2016;Build 19
"RTN","DIALOGU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIALOGU",4,0)
 ;;Submitted to OSEHRA 5 January 2015 by the VISTA Expertise Network.
"RTN","DIALOGU",5,0)
 ;;Based on Medsphere Systems Corporation's MSC FileMan 1051.
"RTN","DIALOGU",6,0)
 ;;Licensed under the terms of the Apache License, Version 2.0.
"RTN","DIALOGU",7,0)
 ;
"RTN","DIALOGU",8,0)
 Q  ;not for interactive use
"RTN","DIALOGU",9,0)
OUT(Y,DIALF,%F) ;convert FileMan Data to language dependant output format
"RTN","DIALOGU",10,0)
 ;Y is the value to transform, DIALF is the type of data
"RTN","DIALOGU",11,0)
 ;%F Only for "FMTE" node. Passed from FMTE^DILIBF, indicates date format.
"RTN","DIALOGU",12,0)
 ;DIALF must correspond to at least a subscript in the language file
"RTN","DIALOGU",13,0)
 ;for the english language (entry #1) but may also have corresponding
"RTN","DIALOGU",14,0)
 ;entries for other languages
"RTN","DIALOGU",15,0)
 I $D(Y)[0!($G(DIALF)="") Q ""
"RTN","DIALOGU",16,0)
 ;N DINAKED,DIY S DINAKED=$NA(^(0))
"RTN","DIALOGU",17,0)
 N DINAKED,DIY S DINAKED=$$LGR^%ZOSV ;p7
"RTN","DIALOGU",18,0)
 N DILANG S DILANG=+$G(DUZ("LANG")) S:DILANG<1 DILANG=1
"RTN","DIALOGU",19,0)
 S DIY=$G(^DI(.85,DILANG,DIALF)) I DIY="" S:DILANG'=1 DIY=$G(^DI(.85,1,DIALF)) I DIY="" S Y="" G Q
"RTN","DIALOGU",20,0)
 X DIY
"RTN","DIALOGU",21,0)
Q S:DINAKED]"" DINAKED=$S(DINAKED["""""":$O(@DINAKED),1:$D(@DINAKED)) ;p8
"RTN","DIALOGU",22,0)
 Q Y
"RTN","DIALOGU",23,0)
 ;
"RTN","DIALOGU",24,0)
PRS(D0,X) ;parse language dependant user input
"RTN","DIALOGU",25,0)
 ;D0 is an entry in the DIALOG file
"RTN","DIALOGU",26,0)
 ;X is the user input
"RTN","DIALOGU",27,0)
 ;the function returns the number of the matching command word
"RTN","DIALOGU",28,0)
 ;plus the corresponding english text. If no match was found -1 will
"RTN","DIALOGU",29,0)
 ;be returned. If there is no user input the function returns the
"RTN","DIALOGU",30,0)
 ;null string.
"RTN","DIALOGU",31,0)
 ;N DINAKED,Y S DINAKED=$NA(^(0))
"RTN","DIALOGU",32,0)
 N DINAKED,Y S DINAKED=$$LGR^%ZOSV ;P7
"RTN","DIALOGU",33,0)
 I '$D(^DI(.84,+$G(D0)))!($G(X)']"") S Y=0 G Q
"RTN","DIALOGU",34,0)
 N R,I,I1,IL,T,W,%,DILANG
"RTN","DIALOGU",35,0)
 S DILANG=+$G(DUZ("LANG")) S:DILANG<1 DILANG=1
"RTN","DIALOGU",36,0)
 I DILANG>1,'$O(^DI(.84,D0,4,DILANG,1,0)) S DILANG=1
"RTN","DIALOGU",37,0)
 S X=$$OUT(X,"UC"),U="^"
"RTN","DIALOGU",38,0)
 S R=$S(DILANG=1:"^DI(.84,"_D0_",2)",1:"^DI(.84,"_D0_",4,"_DILANG_",1)")
"RTN","DIALOGU",39,0)
 S (I,I1,%)=0 F  S I=$O(@R@(I)) Q:'I!%  S T=$$OUT(@R@(I,0),"UC") D
"RTN","DIALOGU",40,0)
 .F IL=1:1 S W=$P(T,U,IL) Q:W=""!%  S I1=I1+1 S:$E(W,1,$L(X))=X %=I1_U_$P(@R@(I,0),U,IL)
"RTN","DIALOGU",41,0)
 I '% S Y=-1 G Q
"RTN","DIALOGU",42,0)
 I DILANG=1 S Y=% G Q
"RTN","DIALOGU",43,0)
 S (I,I1)=0,%=+% F  S I=$O(^DI(.84,D0,2,I)) Q:'I!(I1=%)  S T=^(I,0) D
"RTN","DIALOGU",44,0)
 .F IL=1:1 Q:$P(T,U,IL)=""!(I1=%)  S I1=I1+1,W=$P(T,U,IL)
"RTN","DIALOGU",45,0)
 S Y=%_U_$G(W) G Q
"RTN","DII1")
0^27^B2105841^B1965958
"RTN","DII1",1,0)
DII1 ;SFISC/XAK-OTHER OPTIONS ;7/25/96  14:15
"RTN","DII1",2,0)
 ;;22.2;VA FileMan;**8**;Jan 05, 2016;Build 19
"RTN","DII1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DII1",4,0)
 ;;Submitted to OSEHRA 5 January 2015 by the VISTA Expertise Network.
"RTN","DII1",5,0)
 ;;Based on Medsphere Systems Corporation's MSC FileMan 1051.
"RTN","DII1",6,0)
 ;;Licensed under the terms of the Apache License, Version 2.0.
"RTN","DII1",7,0)
 ;
"RTN","DII1",8,0)
0 S DIC="^DOPT(""DII1"","
"RTN","DII1",9,0)
 G OPT:$D(^DOPT("DII1",10)) S ^(0)="OTHER OPTION^1.01" K ^("B")
"RTN","DII1",10,0)
 F X=1:1:10 S ^DOPT("DII1",X,0)=$P($T(@X),";;",2)
"RTN","DII1",11,0)
 S DIK=DIC D IXALL^DIK
"RTN","DII1",12,0)
OPT ;
"RTN","DII1",13,0)
 S DIC(0)="AEQIZ" D ^DIC G Q:Y<0 S DI=+Y D EN G 0
"RTN","DII1",14,0)
 ;
"RTN","DII1",15,0)
EN ;
"RTN","DII1",16,0)
 D @DI W !!
"RTN","DII1",17,0)
Q K %,DIC,DIK,DI,DA,I,J,X,Y Q
"RTN","DII1",18,0)
 ;
"RTN","DII1",19,0)
1 ;;FILEGRAMS
"RTN","DII1",20,0)
 G ^DIFGO
"RTN","DII1",21,0)
 ;
"RTN","DII1",22,0)
2 ;;ARCHIVING
"RTN","DII1",23,0)
 G NOKL^DIAR
"RTN","DII1",24,0)
 ;
"RTN","DII1",25,0)
3 ;;AUDITING
"RTN","DII1",26,0)
 G ^DIAU
"RTN","DII1",27,0)
 ;
"RTN","DII1",28,0)
4 ;;SCREENMAN
"RTN","DII1",29,0)
 G ^DDSOPT
"RTN","DII1",30,0)
 ;
"RTN","DII1",31,0)
5 ;;STATISTICS
"RTN","DII1",32,0)
 G ^DIX
"RTN","DII1",33,0)
 ;
"RTN","DII1",34,0)
6 ;;EXTRACT DATA TO FILEMAN FILE
"RTN","DII1",35,0)
 G ^DIAX
"RTN","DII1",36,0)
 ;
"RTN","DII1",37,0)
7 ;;DATA EXPORT TO FOREIGN FORMAT
"RTN","DII1",38,0)
 G NOKL^DDXP
"RTN","DII1",39,0)
 ;
"RTN","DII1",40,0)
8 ;;IMPORT DATA
"RTN","DII1",41,0)
 G EN^DDMPU
"RTN","DII1",42,0)
 ;
"RTN","DII1",43,0)
9 ;;BROWSER
"RTN","DII1",44,0)
 G ^DDBR
"RTN","DII1",45,0)
 ;
"RTN","DII1",46,0)
10 ;;DATA ACCESS CONTROL
"RTN","DII1",47,0)
 G ^DIACOPT
"RTN","DIR2")
0^28^B27040742^B25407011
"RTN","DIR2",1,0)
DIR2 ;SFISC/XAK - READER (SETUP VARS,REPLACE...WITH) ;2DEC2016
"RTN","DIR2",2,0)
 ;;22.2;VA FileMan;**2,5,8**;Jan 05, 2016;Build 19
"RTN","DIR2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","DIR2",4,0)
 ;;Submitted to OSEHRA 5 January 2015 by the VISTA Expertise Network.
"RTN","DIR2",5,0)
 ;;Based on Medsphere Systems Corporation's MSC FileMan 1051.
"RTN","DIR2",6,0)
 ;;Licensed under the terms of the Apache License, Version 2.0.
"RTN","DIR2",7,0)
 ;CALLED FROM THE TOP OF THE READER (DIR)   %P WILL NOT BE DEFINED.
"RTN","DIR2",8,0)
 K Y,% S U="^"
"RTN","DIR2",9,0)
 D  ;p8
"RTN","DIR2",10,0)
 .N DINAKED S DINAKED=$$LGR^%ZOSV
"RTN","DIR2",11,0)
 .D DIR("A"),DIR("?"),DIR("L"),DIR("B")
"RTN","DIR2",12,0)
 .I DINAKED]"" S DINAKED=$S(DINAKED["""""":$O(@DINAKED),1:$D(@DINAKED))
"RTN","DIR2",13,0)
 .Q
"RTN","DIR2",14,0)
 S %T=$E(DIR(0)),%A=$P(DIR(0),U),%B=$P(DIR(0),U,2),%N=%A'["V"
"RTN","DIR2",15,0)
 K:$D(DIR("A"))=10 DIR("A") K:$D(DIR("?"))=10 DIR("?")
"RTN","DIR2",16,0)
 S %W0=$S($D(DIR("?")):DIR("?"),%T'?.AN:"",'$P($T(@(%T_1)),";",5):"",1:$$EZBLD^DIALOG($P($T(@(%T_1)),";",5)))
"RTN","DIR2",17,0)
 S %A0=$$EZBLD^DIALOG(8041) ;'REQUIRED RESPONSE'
"RTN","DIR2",18,0)
FIELD I %A?.NP1",".ANP S %B1=$P(%A,","),%B2=+$P(%A,",",2) D  G EO:'$D(%A),NN ;SPECIFICATION OF READ IS 'DATA DICTIONARY', SO GET FIELD PROPERTIES
"RTN","DIR2",19,0)
 .I '$D(^DD(%B1,%B2,0)) K %A Q
"RTN","DIR2",20,0)
 .S %B3=^(0),%B=$P(%B3,U,2) I %B["C"!%B K %A Q  ;%B IS USED LATER, IN DIR1 ROUTINE
"RTN","DIR2",21,0)
 .D:'$D(DIR("B")) DA^DIRQ:$D(DA)#2
"RTN","DIR2",22,0)
 .S:'$D(DIR("A")) %P=$$LABEL^DIALOGZ(%B1,%B2)_": " S:$P(%B3,U,2)'["R" %A=%A_"O"
"RTN","DIR2",23,0)
 .S %T=1 ;IN DIR1, "1"=DATA DICTIONARY
"RTN","DIR2",24,0)
 .N I S I=+$P(%B,"t",2),I=$P($G(^DI(.81,I,0)),U,2) I I="S" S I=$$GETPROP^DIETLIBF(%B1,%B2,"SET OF CODES") D:I]"" S0(I):%A'["A" ;if this a user-defined data type read
"RTN","DIR2",25,0)
 I "FSYENDLP"'[%T G EO
"RTN","DIR2",26,0)
 S %B1=$P(%B,":"),%B2=$P(%B,":",2),%B3=$P(%B,":",3)
"RTN","DIR2",27,0)
 S:'$L(%B2) %B2=$S(%T="D":9991231,%T="F":245,1:999999999999)
"RTN","DIR2",28,0)
 I %T="F",%B2>245 S %B2=245
"RTN","DIR2",29,0)
 I %T="Y" S %B=$$EZBLD^DIALOG(7003)
"RTN","DIR2",30,0)
 I %T="D" S %DT=$P(%B3,"A")_$P(%B3,"A",2)
"RTN","DIR2",31,0)
 I %T="D",'$D(DIR("?")) S %W0=%W0_$S(%B3["R":$$EZBLD^DIALOG(8043),%B3["T":$$EZBLD^DIALOG(8044),1:"")
"RTN","DIR2",32,0)
 I %T="D" S %D1=%B1,%D2=%B2 I %B["NOW"!(%B["DT") D NOW^%DTC K %I,%H S DT=X S:%B1["NOW" %B1=% S:%B1["DT" %B1=X S:%B2["NOW" %B2=% S:%B2["DT" %B2=X K %
"RTN","DIR2",33,0)
 I %T="P" S %B1=$S('%B1:U_%B1,'$D(^DIC(+%B1,0,"GL")):U,1:^("GL")) G EO:%B1=U,EO:'$D(@(%B1_"0)")) I '$D(DIR("A")) S %P=$$EZBLD^DIALOG(8042,$O(^DD(+$P(^(0),U,2),0,"NM",0))) Q
"RTN","DIR2",34,0)
NN I %T="S" D S0(%B):%A'["A"
"RTN","DIR2",35,0)
 Q:$D(%P)
"RTN","DIR2",36,0)
 S %P="" I %A["A" S:$D(DIR("A")) %P=DIR("A") Q
"RTN","DIR2",37,0)
 I '$D(DIR("A")) S %P=$$EZBLD^DIALOG($P($T(@%T),";",4)) I %T="D" S %P=%P_$S(%B3["R":$$EZBLD^DIALOG(8043),%B3["T":$$EZBLD^DIALOG(8044),1:"")
"RTN","DIR2",38,0)
 S:$D(DIR("A")) %P=$S(%T="Y":DIR("A")_"? ",%T="S":$$EZBLD^DIALOG(8045,DIR("A")),1:DIR("A")_": ")
"RTN","DIR2",39,0)
 I "LND"'[%T Q  ;'LIST', 'NUMERIC', 'DATE' types
"RTN","DIR2",40,0)
 I $L(%B1) S %P=%P_" ("_$S(%T="D":$$DATE^DIUTL(%B1)_"-"_$$DATE^DIUTL(%B2),1:%B1_"-"_%B2)_")" ;**
"RTN","DIR2",41,0)
 S %P=%P_$S("?: "[$E(%P,$L(%P)):"",1:":")_" "
"RTN","DIR2",42,0)
 Q
"RTN","DIR2",43,0)
 ;
"RTN","DIR2",44,0)
 ;
"RTN","DIR2",45,0)
S0(%B) ;CREATE PROMPT FOR READING A 'SET' TYPE.  %B is the SET OF CODES
"RTN","DIR2",46,0)
 I '$D(%P) S %P=$S($D(DIR("A")):DIR("A")_": ",%A["B":$$EZBLD^DIALOG(8046),1:$$EZBLD^DIALOG($P($T(S),";",4)))
"RTN","DIR2",47,0)
 Q:%A'["B"  ;"B" PARAMETER SHOWS THE CHOICES SEPARATED BY "/"S
"RTN","DIR2",48,0)
 S %P=%P_" ("
"RTN","DIR2",49,0)
 I %B'[":",$O(DIR("C",""))]"" S %I="" F  S %I=$O(DIR("C",%I)) Q:%I=""  D
"RTN","DIR2",50,0)
 . N Y S Y=$P(DIR("C",%I),":") Q:Y=""
"RTN","DIR2",51,0)
 . I $D(DIR("S"))#2 X DIR("S") E  Q
"RTN","DIR2",52,0)
 . S %P=%P_Y_"/"
"RTN","DIR2",53,0)
 E  F %I=1:1 Q:$P(%B,";",%I,999)=""  D
"RTN","DIR2",54,0)
 . N Y S Y=$P($P(%B,";",%I),":") Q:Y=""
"RTN","DIR2",55,0)
 . I $D(DIR("S"))#2 X DIR("S") E  Q
"RTN","DIR2",56,0)
 . S %P=%P_Y_"/"
"RTN","DIR2",57,0)
 S %P=$E(%P,1,$L(%P)-(%P?.E1"/"))_"): "
"RTN","DIR2",58,0)
 Q
"RTN","DIR2",59,0)
 ;
"RTN","DIR2",60,0)
 ;
"RTN","DIR2",61,0)
EO S %T="",Y=-1 Q  ;ABORT
"RTN","DIR2",62,0)
 ;
"RTN","DIR2",63,0)
DIR(DIALA) ;** INSERTS DIALOGS INTO DIR ARRAY
"RTN","DIR2",64,0)
 N DIALN,DIALP
"RTN","DIR2",65,0)
 S DIALN=$G(DIR("DIALOG",DIALA))
"RTN","DIR2",66,0)
 Q:'$D(^DI(.84,0))  Q:+DIALN'=DIALN  Q:'$D(^(DIALN,2))  ;GIVES US A MAKED REFERENCE PRIOR TO CALLING $$EZBLD^DIALOG
"RTN","DIR2",67,0)
 I $D(DIR("DIALOG",DIALA))>9 M DIALP=DIR("DIALOG",DIALA)
"RTN","DIR2",68,0)
 K DIR(DIALA) D BLD^DIALOG(DIALN,.DIALP,,"DIR(DIALA)","F")
"RTN","DIR2",69,0)
 Q
"RTN","DIR2",70,0)
 ;
"RTN","DIR2",71,0)
 ;
"RTN","DIR2",72,0)
RW ; Replace...With...   ENTER WITH 'Y', EXIT WITH 'Y' CHANGED.   CALLED FROM MANY ROUTINES
"RTN","DIR2",73,0)
 N %,L,DINAKED S DINAKED=$NA(^(0)),DG=Y S:$D(DTIME)[0 DTIME=999
"RTN","DIR2",74,0)
A W:$X>50 ! K DTOUT W $$EZBLD^DIALOG(8047) R X:DTIME E  S DTOUT=1,X=""
"RTN","DIR2",75,0)
 G B:X="",Q:X?1."^",Q:$E(X)=U&($D(DIRWP)[0)&(Y'[X),Q:X?."?",Q:X="@"
"RTN","DIR2",76,0)
 I X="END"!(X="end")!(X=$$UP^DILIBF($$EZBLD^DIALOG(7097))) S L=0 D H S:'%&'$D(DTOUT) Y=Y_X G A ;**CCO/NI 'END'
"RTN","DIR2",77,0)
 I Y[X S D=X,L=$L(X) D H S:'%&'$D(DTOUT) Y=$P(Y,D,1)_X_$P(Y,D,2,999) G A
"RTN","DIR2",78,0)
 S D=$P(X,"...",1),DH=$F(Y,D) I DH S X=$P(X,"...",2,99),X=$S(X="":$L(Y)+1,1:$F(Y,X,DH)) I X S DH=DH-$L(D)-1,D=X,L=D-DH-1 D H S:'%&'$D(DTOUT) Y=$E(Y,1,DH)_X_$E(Y,D,999) G A
"RTN","DIR2",79,0)
 W $C(7)," ??" G A
"RTN","DIR2",80,0)
 ;
"RTN","DIR2",81,0)
H N DIMAX
"RTN","DIR2",82,0)
WITH W $$EZBLD^DIALOG(8048) R X:DTIME E  S DTOUT=1,X="",%=0 W $C(7)," ??" Q
"RTN","DIR2",83,0)
 S DIMAX=$G(^DD("STRING_LIMIT"),255)-10,%=$L(Y)-L+$L(X)>DIMAX
"RTN","DIR2",84,0)
 I % W $C(7),$S($L(Y)-L'>DIMAX:$$EZBLD^DIALOG(349,($L(Y)-L+$L(X)-DIMAX)),X'=U:$$EZBLD^DIALOG(350),1:" ??") Q:$L(Y)-L>DIMAX&(X=U)  G WITH
"RTN","DIR2",85,0)
 Q:X?.ANP  W $C(7)," ??" G WITH
"RTN","DIR2",86,0)
 ;
"RTN","DIR2",87,0)
B W:$D(DTOUT) $C(7) I DG'=Y S X=Y W !?3 W X I X="" S X="@"
"RTN","DIR2",88,0)
 S:DINAKED]"" DINAKED=$S(DINAKED["""""":$O(@DINAKED),1:$D(@DINAKED)) ;p8
"RTN","DIR2",89,0)
Q Q
"RTN","DIR2",90,0)
 ;
"RTN","DIR2",91,0)
F ;;Enter response: ;8051
"RTN","DIR2",92,0)
S ;;Enter response: ;8051
"RTN","DIR2",93,0)
Y ;;Enter Yes or No: ;8052
"RTN","DIR2",94,0)
E ;;Press RETURN to continue or '^' to exit: ;8053
"RTN","DIR2",95,0)
N ;;Enter a number;8054
"RTN","DIR2",96,0)
D ;;Enter a date;8055
"RTN","DIR2",97,0)
L ;;Enter a list or range of numbers;8056
"RTN","DIR2",98,0)
P ;;Select: ;8057
"RTN","DIR2",99,0)
F1 ;;;This response can be free text;9031
"RTN","DIR2",100,0)
S1 ;;;Enter a code from the list.;9032
"RTN","DIR2",101,0)
Y1 ;;;Enter either 'Y' or 'N'.;9040
"RTN","DIR2",102,0)
E1 ;;;Enter either RETURN or '^';9033
"RTN","DIR2",103,0)
N1 ;;;This response must be a number;9034
"RTN","DIR2",104,0)
D1 ;;;This response must be a date;9035
"RTN","DIR2",105,0)
L1 ;;;This response must be a list or range, e.g., 1,3,5 or 2-4,8;9036
"RTN","DIR2",106,0)
 ;
"RTN","DIR2",107,0)
 ;#349   String too long by |nuber| character(s)!
"RTN","DIR2",108,0)
 ;#350   String too long! '^' to quit.
"RTN","DIR2",109,0)
 ;#8041  This is a required response...
"RTN","DIR2",110,0)
 ;#8042  Select |1|
"RTN","DIR2",111,0)
 ;#8043  and time
"RTN","DIR2",112,0)
 ;#8044  and optional time
"RTN","DIR2",113,0)
 ;#8045  Enter |1|
"RTN","DIR2",114,0)
 ;#8046  Select one of the following
"RTN","DIR2",115,0)
 ;#8047  Replace
"RTN","DIR2",116,0)
 ;#8048  With
"SEC","^DIC",1.6,1.6,0,"DD")
@
"SEC","^DIC",1.6,1.6,0,"DEL")
@
"SEC","^DIC",1.6,1.6,0,"LAYGO")
#
"SEC","^DIC",1.6,1.6,0,"WR")
#
"SEC","^DIC",1.61,1.61,0,"DD")
@
"SEC","^DIC",1.61,1.61,0,"DEL")
@
"SEC","^DIC",1.61,1.61,0,"LAYGO")
#
"SEC","^DIC",1.61,1.61,0,"WR")
#
"SEC","^DIC",1.62,1.62,0,"DD")
@
"SEC","^DIC",1.62,1.62,0,"DEL")
@
"SEC","^DIC",1.62,1.62,0,"LAYGO")
#
"SEC","^DIC",1.62,1.62,0,"WR")
#
"VER")
8.0^22.2
"^DD",1.6,1.6,0)
FIELD^^5.1^18
"^DD",1.6,1.6,0,"DT")
3170208
"^DD",1.6,1.6,0,"ID",.02)
W "   ",@("$P($P($C(59)_$S($D(^DD(1.6,.02,0)):$P(^(0),U,3),1:0)_$E("_DIC_"Y,0),0),$C(59)_$P(^(0),U,2)_"":"",2),$C(59),1)")
"^DD",1.6,1.6,0,"IX","AD",1.601,.01)

"^DD",1.6,1.6,0,"IX","B",1.6,.01)

"^DD",1.6,1.6,0,"NM","POLICY")

"^DD",1.6,1.6,0,"PT",1.601,.01)

"^DD",1.6,1.6,0,"PT",1.61,.05)

"^DD",1.6,1.6,.01,0)
NAME^RFJ30X^^0;1^D CHKNAME^DIACX(1.6) I $D(X) K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",1.6,1.6,.01,1,0)
^.1
"^DD",1.6,1.6,.01,1,1,0)
1.6^B
"^DD",1.6,1.6,.01,1,1,1)
S ^DIAC(1.6,"B",$E(X,1,30),DA)=""
"^DD",1.6,1.6,.01,1,1,2)
K ^DIAC(1.6,"B",$E(X,1,30),DA)
"^DD",1.6,1.6,.01,3)
Enter a unique name, 3-30 characters, beginning with the package namespace.
"^DD",1.6,1.6,.01,21,0)
^.001^2^2^3160729^^
"^DD",1.6,1.6,.01,21,1,0)
The formal unique name of the policy, prefaced with the package namespace
"^DD",1.6,1.6,.01,21,2,0)
specified in the PACKAGE file, or the letter Z or A.
"^DD",1.6,1.6,.01,"DT")
3161222
"^DD",1.6,1.6,.02,0)
TYPE^RS^R:rule;P:policy;S:set;^0;2^Q
"^DD",1.6,1.6,.02,3)
Specify a type for this policy.
"^DD",1.6,1.6,.02,21,0)
^.001^6^6^3170221^^^^
"^DD",1.6,1.6,.02,21,1,0)
This field determines the type of policy to be evaluated. This file is a
"^DD",1.6,1.6,.02,21,2,0)
self-referring hierarchy, grouped via Members by type:
"^DD",1.6,1.6,.02,21,3,0)
 R = Rule, a single logical statement that evaluates to true or false,
"^DD",1.6,1.6,.02,21,4,0)
permitting or denying access to the record
"^DD",1.6,1.6,.02,21,5,0)
 P = Policy, a collection of rules that define access to the record
"^DD",1.6,1.6,.02,21,6,0)
 S = Set, a collection of policies or other sets as needed
"^DD",1.6,1.6,.02,"DT")
3160913
"^DD",1.6,1.6,.03,0)
DISABLE^S^1:YES;0:NO;^0;3^Q
"^DD",1.6,1.6,.03,3)
Enter YES to disable use of this policy and its members.
"^DD",1.6,1.6,.03,21,0)
^.001^7^7^3170221^^^^
"^DD",1.6,1.6,.03,21,1,0)
A true (1) value indicates that this policy or rule is not to be used.
"^DD",1.6,1.6,.03,21,2,0)
  
"^DD",1.6,1.6,.03,21,3,0)
If it is encountered while processing an ancestor policy or set, this
"^DD",1.6,1.6,.03,21,4,0)
policy and its descendants will be ignored and the result unchanged.
"^DD",1.6,1.6,.03,21,5,0)
  
"^DD",1.6,1.6,.03,21,6,0)
If this policy is the primary or default for an action, no processing
"^DD",1.6,1.6,.03,21,7,0)
will occur and the result will be indeterminate.
"^DD",1.6,1.6,.03,"DT")
3170208
"^DD",1.6,1.6,.04,0)
ATTRIBUTE FUNCTION^*P1.62'^DIAC(1.62,^0;4^S DIC("S")="I $P(^(0),U,3)=""A""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.6,.04,3)
Select the function that pulls needed values from each record.
"^DD",1.6,1.6,.04,12)
Only Attribute Functions may be selected.
"^DD",1.6,1.6,.04,12.1)
S DIC("S")="I $P(^(0),U,3)=""A"""
"^DD",1.6,1.6,.04,21,0)
^.001^5^5^3161028^^^^
"^DD",1.6,1.6,.04,21,1,0)
This is an application-defined function that will populate the DIVAL array
"^DD",1.6,1.6,.04,21,2,0)
with target values from the record that are needed to evaluate the policy,
"^DD",1.6,1.6,.04,21,3,0)
in the form DIVAL("attribute")="value". Because the Target attributes
"^DD",1.6,1.6,.04,21,4,0)
must have a value defined, use a string such as 'null' to represent the
"^DD",1.6,1.6,.04,21,5,0)
empty string.
"^DD",1.6,1.6,.04,"DT")
3161115
"^DD",1.6,1.6,.05,0)
TARGET CONJUNCTION^S^&:AND;!:OR;^0;5^Q
"^DD",1.6,1.6,.05,3)
Indicate if all targets must match (&) or if any one (!) will suffice.
"^DD",1.6,1.6,.05,21,0)
^.001^4^4^3161013^^
"^DD",1.6,1.6,.05,21,1,0)
The conjunction indicates how multiple target attributes will be
"^DD",1.6,1.6,.05,21,2,0)
handled, when determining if a policy applies to a record. AND will
"^DD",1.6,1.6,.05,21,3,0)
require all targets to match the record, otherwise the policy will
"^DD",1.6,1.6,.05,21,4,0)
not apply; OR will be satisfied if any one of the values matches.
"^DD",1.6,1.6,.05,"DT")
3160729
"^DD",1.6,1.6,.06,0)
CONDITION CONJUNCTION^S^&:AND;!:OR;^0;6^Q
"^DD",1.6,1.6,.06,3)
Indicate if all conditions must be true (&) or if any one (!) will suffice.
"^DD",1.6,1.6,.06,21,0)
^^4^4^3160729^
"^DD",1.6,1.6,.06,21,1,0)
The conjunction indicates how multiple condition results will be
"^DD",1.6,1.6,.06,21,2,0)
handled, when determining the result of a rule. AND will require
"^DD",1.6,1.6,.06,21,3,0)
all results to be true, otherwise the rule will fail; OR will
"^DD",1.6,1.6,.06,21,4,0)
be satisfied if any one of the conditions is true.
"^DD",1.6,1.6,.06,"DT")
3160729
"^DD",1.6,1.6,.07,0)
RESULT FUNCTION^*P1.62'^DIAC(1.62,^0;7^S DIC("S")="I $P(^(0),U,3)=""R""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.6,.07,3)
Select the function that determines when processing for this policy is done.
"^DD",1.6,1.6,.07,12)
Only Result Functions may be selected.
"^DD",1.6,1.6,.07,12.1)
S DIC("S")="I $P(^(0),U,3)=""R"""
"^DD",1.6,1.6,.07,21,0)
^.001^4^4^3161013^^^
"^DD",1.6,1.6,.07,21,1,0)
This is a function that determines when processing of the current policy
"^DD",1.6,1.6,.07,21,2,0)
or set should cease. It is executed after each member rule or policy is
"^DD",1.6,1.6,.07,21,3,0)
processed, using the value of the DIRESULT variable; some functions may
"^DD",1.6,1.6,.07,21,4,0)
also assign a default value to DIRESULT, if it is undetermined or null.
"^DD",1.6,1.6,.07,"DT")
3160729
"^DD",1.6,1.6,.08,0)
RESULT^S^P:PERMIT;D:DENY;^0;8^Q
"^DD",1.6,1.6,.08,3)
Select the result to return, if the rule evaluates to true.
"^DD",1.6,1.6,.08,21,0)
^.001^2^2^3161201^^^^
"^DD",1.6,1.6,.08,21,1,0)
This is the effect of the rule, i.e. the result to be returned, if the
"^DD",1.6,1.6,.08,21,2,0)
rule is determined to be true.
"^DD",1.6,1.6,.08,"DT")
3161201
"^DD",1.6,1.6,1,0)
DESCRIPTION^1.6011^^1;0
"^DD",1.6,1.6,1,21,0)
^^1^1^3160729^
"^DD",1.6,1.6,1,21,1,0)
This field contains a brief description of the rule or policy.
"^DD",1.6,1.6,2,0)
TARGETS^1.602I^^2;0
"^DD",1.6,1.6,2,21,0)
^.001^3^3^3161028^^^^
"^DD",1.6,1.6,2,21,1,0)
This sub-file is a list of attributes, or targets, that must match the
"^DD",1.6,1.6,2,21,2,0)
record for this policy to apply. A member policy or rule with no targets
"^DD",1.6,1.6,2,21,3,0)
will be evaluated as a match and applied to the record.
"^DD",1.6,1.6,2,"DT")
3160708
"^DD",1.6,1.6,3,0)
CONDITIONS^1.603I^^3;0
"^DD",1.6,1.6,3,21,0)
^.001^2^2^3161205^^^^
"^DD",1.6,1.6,3,21,1,0)
This sub-file is a list of conditions to be evaluated, for rules that
"^DD",1.6,1.6,3,21,2,0)
apply to the record.
"^DD",1.6,1.6,3,"DT")
3160708
"^DD",1.6,1.6,5,0)
AVAILABLE FIELDS^FJ245^^5;1^K:$L(X)>245!($L(X)<1) X
"^DD",1.6,1.6,5,3)
Enter a valid DR string, up to 245 characters.
"^DD",1.6,1.6,5,21,0)
^.001^10^10^3170221^^^
"^DD",1.6,1.6,5,21,1,0)
This is a string of field numbers, delimited by semi-colons, that can be 
"^DD",1.6,1.6,5,21,2,0)
used as the DR variable for FileMan api's; see the VA FileMan Programmer
"^DD",1.6,1.6,5,21,3,0)
Manual for further details.
"^DD",1.6,1.6,5,21,4,0)
 
"^DD",1.6,1.6,5,21,5,0)
This string will be returned to the client if a permit result is found, to
"^DD",1.6,1.6,5,21,6,0)
identify the fields that are allowed to be viewed or acted on. It does 
"^DD",1.6,1.6,5,21,7,0)
not need to be set at every level of a policy; the lowest level of the 
"^DD",1.6,1.6,5,21,8,0)
hierarchy will take precedence, for example the DR string saved with the 
"^DD",1.6,1.6,5,21,9,0)
rule that granted permission would be returned over a default string 
"^DD",1.6,1.6,5,21,10,0)
saved with the primary policy or associated Application Action.
"^DD",1.6,1.6,5,"DT")
3161019
"^DD",1.6,1.6,5.1,0)
ADDITIONAL FIELDS^1.605A^^5.1;0
"^DD",1.6,1.6,5.1,21,0)
^.001^3^3^3170221^^^^
"^DD",1.6,1.6,5.1,21,1,0)
This multiple holds additional DR strings as needed, such as the fields
"^DD",1.6,1.6,5.1,21,2,0)
that may be accessed in a sub-file. To save a continuation string for
"^DD",1.6,1.6,5.1,21,3,0)
the top-level file, enter the primary file number for this policy.
"^DD",1.6,1.6,7,0)
DENY FUNCTION^*P1.62'^DIAC(1.62,^7;1^S DIC("S")="I $P(^(0),U,3)=""O""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.6,7,3)
Select the function that performs needed tasks on a deny result.
"^DD",1.6,1.6,7,12)
Only Obligation Functions may be selected.
"^DD",1.6,1.6,7,12.1)
S DIC("S")="I $P(^(0),U,3)=""O"""
"^DD",1.6,1.6,7,21,0)
^.001^2^2^3161201^^^^
"^DD",1.6,1.6,7,21,1,0)
This is an application-defined function that performs needed tasks on a
"^DD",1.6,1.6,7,21,2,0)
given result, such as logging access to a file.
"^DD",1.6,1.6,7,"DT")
3161201
"^DD",1.6,1.6,7.1,0)
DENY MESSAGE^FJ200^^7;2^K:$L(X)>200!($L(X)<1) X
"^DD",1.6,1.6,7.1,3)
Enter text to be returned on a deny result, up to 200 characters.
"^DD",1.6,1.6,7.1,21,0)
^.001^4^4^3160912^^^
"^DD",1.6,1.6,7.1,21,1,0)
This is text that will be returned in ^TMP("DIMSG",$J) if the result
"^DD",1.6,1.6,7.1,21,2,0)
is Deny. All applicable messages will be included, beginning with the
"^DD",1.6,1.6,7.1,21,3,0)
determining rule and continuing back up the hierarchy in order through
"^DD",1.6,1.6,7.1,21,4,0)
its ancestor policies and sets.
"^DD",1.6,1.6,7.1,"DT")
3161020
"^DD",1.6,1.6,8,0)
PERMIT FUNCTION^*P1.62'^DIAC(1.62,^8;1^S DIC("S")="I $P(^(0),U,3)=""O""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.6,8,3)
Select the function that performs needed tasks on a permit result.
"^DD",1.6,1.6,8,12)
Only Obligation Functions may be selected.
"^DD",1.6,1.6,8,12.1)
S DIC("S")="I $P(^(0),U,3)=""O"""
"^DD",1.6,1.6,8,21,0)
^.001^2^2^3161201^^^^
"^DD",1.6,1.6,8,21,1,0)
This is an application-defined function that performs needed tasks on a
"^DD",1.6,1.6,8,21,2,0)
given result, such as logging access to a file.
"^DD",1.6,1.6,8,"DT")
3161201
"^DD",1.6,1.6,8.1,0)
PERMIT MESSAGE^FJ200^^8;2^K:$L(X)>200!($L(X)<1) X
"^DD",1.6,1.6,8.1,3)
Enter text to be returned on a permit result, up to 200 characters.
"^DD",1.6,1.6,8.1,21,0)
^.001^4^4^3160912^^^
"^DD",1.6,1.6,8.1,21,1,0)
This is text that will be returned in ^TMP("DIMSG",$J) if the result
"^DD",1.6,1.6,8.1,21,2,0)
is Permit. All applicable messages will be included, beginning with the
"^DD",1.6,1.6,8.1,21,3,0)
determining rule and continuing back up the hierarchy in order through
"^DD",1.6,1.6,8.1,21,4,0)
its ancestor policies and sets.
"^DD",1.6,1.6,8.1,"DT")
3161020
"^DD",1.6,1.6,10,0)
MEMBERS^1.601P^^10;0
"^DD",1.6,1.6,10,21,0)
^.001^2^2^3161214^^^^
"^DD",1.6,1.6,10,21,1,0)
This sub-file is a list of self-referring pointers, the collection of
"^DD",1.6,1.6,10,21,2,0)
rules for a policy or policies/sets that make up a policy set.
"^DD",1.6,1.601,0)
MEMBERS SUB-FIELD^^.02^2
"^DD",1.6,1.601,0,"DT")
3161214
"^DD",1.6,1.601,0,"IX","B",1.601,.01)

"^DD",1.6,1.601,0,"NM","MEMBERS")

"^DD",1.6,1.601,0,"UP")
1.6
"^DD",1.6,1.601,.01,0)
MEMBER^M*P1.6'^DIAC(1.6,^0;1^S DIC("S")=$$SCR^DIACX D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.601,.01,1,0)
^.1
"^DD",1.6,1.601,.01,1,1,0)
1.601^B
"^DD",1.6,1.601,.01,1,1,1)
S ^DIAC(1.6,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",1.6,1.601,.01,1,1,2)
K ^DIAC(1.6,DA(1),10,"B",$E(X,1,30),DA)
"^DD",1.6,1.601,.01,1,2,0)
1.6^AD
"^DD",1.6,1.601,.01,1,2,1)
S ^DIAC(1.6,"AD",$E(X,1,30),DA(1),DA)=""
"^DD",1.6,1.601,.01,1,2,2)
K ^DIAC(1.6,"AD",$E(X,1,30),DA(1),DA)
"^DD",1.6,1.601,.01,1,2,"%D",0)
^^2^2^3161020^
"^DD",1.6,1.601,.01,1,2,"%D",1,0)
Links members to a parent policy, for looking up the tree; used by the
"^DD",1.6,1.601,.01,1,2,"%D",2,0)
Input Transform to prevent an infinite loop in the hierarchy.
"^DD",1.6,1.601,.01,1,2,"DT")
3160708
"^DD",1.6,1.601,.01,3)
Enter a policy, set, or rule that is not an ancestor of this item.
"^DD",1.6,1.601,.01,12)
Members of a policy must be rules; sets may include policies or other sets. Rules may not have members.
"^DD",1.6,1.601,.01,12.1)
S DIC("S")=$$SCR^DIACX
"^DD",1.6,1.601,.01,21,0)
^.001^3^3^3161107^^^^
"^DD",1.6,1.601,.01,21,1,0)
This is a Policy entry that is subordinate to the current policy or set.
"^DD",1.6,1.601,.01,21,2,0)
A Policy may only have Rules for members, while a Policy Set may contain
"^DD",1.6,1.601,.01,21,3,0)
either policies or other sets; Rules do not have members.
"^DD",1.6,1.601,.01,"DT")
3161116
"^DD",1.6,1.601,.02,0)
SEQUENCE^RNJ6,2X^^0;2^K:+X'=X!(X>999)!(X<1)!(X?.E1"."3N.N)!$D(^DIAC(1.6,DA(1),10,"AC",X)) X
"^DD",1.6,1.601,.02,3)
Type a unique number between 1 and 999, 2 decimal digits.
"^DD",1.6,1.601,.02,4)
D SEQ^DIACX
"^DD",1.6,1.601,.02,21,0)
^.001^4^4^3161118^^^
"^DD",1.6,1.601,.02,21,1,0)
This is the order in which these rules or policies should be evaluated.
"^DD",1.6,1.601,.02,21,2,0)
If a member rule or policy is not applicable, or the result function is
"^DD",1.6,1.601,.02,21,3,0)
not satisfied after evaluation, processing will continue onto the next
"^DD",1.6,1.601,.02,21,4,0)
sibling member in sequence order.
"^DD",1.6,1.601,.02,"DT")
3161214
"^DD",1.6,1.6011,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",1.6,1.6011,0,"DT")
3160729
"^DD",1.6,1.6011,0,"NM","DESCRIPTION")

"^DD",1.6,1.6011,0,"UP")
1.6
"^DD",1.6,1.6011,.01,0)
DESCRIPTION^Wx^^0;1^Q
"^DD",1.6,1.6011,.01,3)
Enter a description of this policy.
"^DD",1.6,1.6011,.01,21,0)
^^1^1^3160729^
"^DD",1.6,1.6011,.01,21,1,0)
This field contains a brief description of the rule or policy.
"^DD",1.6,1.6011,.01,"DT")
3160729
"^DD",1.6,1.602,0)
TARGETS SUB-FIELD^^.03^3
"^DD",1.6,1.602,0,"DT")
3161117
"^DD",1.6,1.602,0,"ID","W1")
W $P(^(0),U,2),"   ",$P(^(0),U,3)
"^DD",1.6,1.602,0,"IX","B",1.602,.01)

"^DD",1.6,1.602,0,"NM","TARGETS")

"^DD",1.6,1.602,0,"UP")
1.6
"^DD",1.6,1.602,.01,0)
TARGET^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.6,1.602,.01,1,0)
^.1
"^DD",1.6,1.602,.01,1,1,0)
1.602^B
"^DD",1.6,1.602,.01,1,1,1)
S ^DIAC(1.6,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",1.6,1.602,.01,1,1,2)
K ^DIAC(1.6,DA(1),2,"B",$E(X,1,30),DA)
"^DD",1.6,1.602,.01,3)
Enter a number from 1-999 to identify this target attribute and value.
"^DD",1.6,1.602,.01,21,0)
^^3^3^3160729^
"^DD",1.6,1.602,.01,21,1,0)
This is a number that simply serves as an identifier for this target;
"^DD",1.6,1.602,.01,21,2,0)
it has no inherent meaning or other use besides facilitating management
"^DD",1.6,1.602,.01,21,3,0)
of multiple targets, especially with OR'd values for the same attribute.
"^DD",1.6,1.602,.01,"DT")
3161020
"^DD",1.6,1.602,.02,0)
ATTRIBUTE^RFJ30^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",1.6,1.602,.02,3)
Answer must be 1-30 characters in length.
"^DD",1.6,1.602,.02,21,0)
^.001^3^3^3161020^^^^
"^DD",1.6,1.602,.02,21,1,0)
This is the name of an attribute in the record being evaluated. It should
"^DD",1.6,1.602,.02,21,2,0)
be the same as the subscript used by the Attribute Function to populate
"^DD",1.6,1.602,.02,21,3,0)
the DIVAL("attribute")="value" array.
"^DD",1.6,1.602,.02,"DT")
3161117
"^DD",1.6,1.602,.03,0)
VALUE^RFJ60^^0;3^K:$L(X)>60!($L(X)<1) X
"^DD",1.6,1.602,.03,3)
Answer must be 1-60 characters in length.
"^DD",1.6,1.602,.03,21,0)
^.001^3^3^3161028^^^^
"^DD",1.6,1.602,.03,21,1,0)
This is the desired or relevant value of the target attribute, that must
"^DD",1.6,1.602,.03,21,2,0)
match the record for the rule or policy to be applied. Every attribute must
"^DD",1.6,1.602,.03,21,3,0)
have a value; use a string such as 'null' to represent the emptry string.
"^DD",1.6,1.602,.03,"DT")
3161117
"^DD",1.6,1.603,0)
CONDITIONS SUB-FIELD^^.03^3
"^DD",1.6,1.603,0,"DT")
3161205
"^DD",1.6,1.603,0,"ID","W1")
W $P(^(0),U,2),"   ",$P(^(0),U,3)
"^DD",1.6,1.603,0,"IX","B",1.603,.01)

"^DD",1.6,1.603,0,"NM","CONDITIONS")

"^DD",1.6,1.603,0,"UP")
1.6
"^DD",1.6,1.603,.01,0)
CONDITION^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.6,1.603,.01,1,0)
^.1
"^DD",1.6,1.603,.01,1,1,0)
1.603^B
"^DD",1.6,1.603,.01,1,1,1)
S ^DIAC(1.6,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",1.6,1.603,.01,1,1,2)
K ^DIAC(1.6,DA(1),3,"B",$E(X,1,30),DA)
"^DD",1.6,1.603,.01,3)
Enter a number from 1-999 to identify this condition.
"^DD",1.6,1.603,.01,21,0)
^.001^3^3^3161104^^^
"^DD",1.6,1.603,.01,21,1,0)
This is a number that simply serves as an identifier for this condition;
"^DD",1.6,1.603,.01,21,2,0)
it has no inherent meaning or other use besides facilitating management
"^DD",1.6,1.603,.01,21,3,0)
of multiple conditions, especially with OR'd values for the same function.
"^DD",1.6,1.603,.01,"DT")
3161020
"^DD",1.6,1.603,.02,0)
FUNCTION^R*P1.62'^DIAC(1.62,^0;2^S DIC("S")="I $P(^(0),U,3)=""C""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.6,1.603,.02,3)
Select the function that performs the desired check or comparison.
"^DD",1.6,1.603,.02,12)
Only Condition Functions may be selected.
"^DD",1.6,1.603,.02,12.1)
S DIC("S")="I $P(^(0),U,3)=""C"""
"^DD",1.6,1.603,.02,21,0)
^.001^4^4^3161013^^
"^DD",1.6,1.603,.02,21,1,0)
This is a function that performs a check or comparison other than strict
"^DD",1.6,1.603,.02,21,2,0)
equality; it may check if a date is in the past, or see if a user holds
"^DD",1.6,1.603,.02,21,3,0)
a given key, for example. Applications may define their own functions to
"^DD",1.6,1.603,.02,21,4,0)
look for needed conditions.
"^DD",1.6,1.603,.02,"DT")
3161205
"^DD",1.6,1.603,.03,0)
VALUE^FJ60^^0;3^K:$L(X)>60!($L(X)<1) X
"^DD",1.6,1.603,.03,3)
Enter the desired value for this condition, up to 60 characters.
"^DD",1.6,1.603,.03,21,0)
^.001^2^2^3161020^^
"^DD",1.6,1.603,.03,21,1,0)
This is the optional value that the function will make a comparison to,
"^DD",1.6,1.603,.03,21,2,0)
usually an attribute external to the data record.
"^DD",1.6,1.603,.03,"DT")
3161020
"^DD",1.6,1.605,0)
ADDITIONAL FIELDS SUB-FIELD^^.04^4
"^DD",1.6,1.605,0,"DT")
3170120
"^DD",1.6,1.605,0,"IX","B",1.605,.01)

"^DD",1.6,1.605,0,"NM","ADDITIONAL FIELDS")

"^DD",1.6,1.605,0,"UP")
1.6
"^DD",1.6,1.605,.01,0)
SUBFILE#^MNJ15,7^^0;1^K:+X'=X!(X>9999999.9999999)!(X<0)!(X?.E1"."8N.N) X
"^DD",1.6,1.605,.01,1,0)
^.1
"^DD",1.6,1.605,.01,1,1,0)
1.605^B
"^DD",1.6,1.605,.01,1,1,1)
S ^DIAC(1.6,DA(1),5.1,"B",$E(X,1,30),DA)=""
"^DD",1.6,1.605,.01,1,1,2)
K ^DIAC(1.6,DA(1),5.1,"B",$E(X,1,30),DA)
"^DD",1.6,1.605,.01,3)
Enter a valid VistA file or sub-file number, up to 9999999.9999999.
"^DD",1.6,1.605,.01,21,0)
^.001^1^1^3161223^^
"^DD",1.6,1.605,.01,21,1,0)
This is a number that represents a valid VistA file or sub-file.
"^DD",1.6,1.605,.01,"DT")
3161223
"^DD",1.6,1.605,.02,0)
LEVEL^RNJ1,0^^0;2^K:+X'=X!(X>9)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.6,1.605,.02,3)
Type a number between 1 and 9, 0 decimal digits.
"^DD",1.6,1.605,.02,21,0)
^.001^3^3^3170221^^^^
"^DD",1.6,1.605,.02,21,1,0)
This integer is the file level, relative to the FILE# of the action.
"^DD",1.6,1.605,.02,21,2,0)
Enter 1 if this is a continuation string for FILE#, 2 if this is a
"^DD",1.6,1.605,.02,21,3,0)
DR string for a sub-file, etc.
"^DD",1.6,1.605,.02,"DT")
3170120
"^DD",1.6,1.605,.03,0)
SEQUENCE^NJ2,0^^0;3^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.6,1.605,.03,3)
Type a number between 1 and 99, 0 decimal digits.
"^DD",1.6,1.605,.03,21,0)
^^2^2^3170120^
"^DD",1.6,1.605,.03,21,1,0)
This is the sequence number for the DR array, if this is a continuation
"^DD",1.6,1.605,.03,21,2,0)
string.
"^DD",1.6,1.605,.03,"DT")
3170120
"^DD",1.6,1.605,.04,0)
DR^FJ400^^0;4^K:$L(X)>400!($L(X)<1) X
"^DD",1.6,1.605,.04,3)
Answer must be 1-400 characters in length.
"^DD",1.6,1.605,.04,21,0)
^^4^4^3170120^
"^DD",1.6,1.605,.04,21,1,0)
This is a string of field numbers, delimited by semi-colons, that can be
"^DD",1.6,1.605,.04,21,2,0)
used as the DR variable for FileMan api's; see the VA FileMan Programmer
"^DD",1.6,1.605,.04,21,3,0)
Manual for further details. These strings are intended to supplement the
"^DD",1.6,1.605,.04,21,4,0)
Available Fields value, as sub-file or continuation strings.
"^DD",1.6,1.605,.04,"DT")
3170120
"^DD",1.61,1.61,0)
FIELD^^5.1^8
"^DD",1.61,1.61,0,"DT")
3170221
"^DD",1.61,1.61,0,"ID","W1")
W "   ",$P(^(0),U,2),"   ",$P(^(0),U,3)
"^DD",1.61,1.61,0,"IX","B",1.61,.01)

"^DD",1.61,1.61,0,"IX","D",1.61,.05)

"^DD",1.61,1.61,0,"NM","APPLICATION ACTION")

"^DD",1.61,1.61,0,"PT",1.5,19.1)

"^DD",1.61,1.61,0,"PT",1.5,19.2)

"^DD",1.61,1.61,0,"PT",1.5,19.3)

"^DD",1.61,1.61,0,"PT",1.5,19.4)

"^DD",1.61,1.61,.01,0)
NAME^RFJ30X^^0;1^D CHKNAME^DIACX(1.61) I $D(X) K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",1.61,1.61,.01,1,0)
^.1
"^DD",1.61,1.61,.01,1,1,0)
1.61^B
"^DD",1.61,1.61,.01,1,1,1)
S ^DIAC(1.61,"B",$E(X,1,30),DA)=""
"^DD",1.61,1.61,.01,1,1,2)
K ^DIAC(1.61,"B",$E(X,1,30),DA)
"^DD",1.61,1.61,.01,3)
Enter a unique name, 3-30 characters, beginning with the package namespace.
"^DD",1.61,1.61,.01,21,0)
^.001^2^2^3170221^^
"^DD",1.61,1.61,.01,21,1,0)
The formal unique name of the action, prefaced with the package namespace
"^DD",1.61,1.61,.01,21,2,0)
specified in the PACKAGE file, or the letter Z or A.
"^DD",1.61,1.61,.01,"DT")
3161223
"^DD",1.61,1.61,.02,0)
FILE#^RNJ15,7X^^0;2^K:+X'=X!(X>9999999.9999999)!(X<0)!(X?.E1"."8N.N)!'$$VFILE^DILFD(X) X
"^DD",1.61,1.61,.02,3)
Enter a valid VistA file or sub-file number, up to 9999999.9999999.
"^DD",1.61,1.61,.02,21,0)
^^1^1^3161017^
"^DD",1.61,1.61,.02,21,1,0)
This is a number that represents a valid VistA file or sub-file.
"^DD",1.61,1.61,.02,"DT")
3161020
"^DD",1.61,1.61,.03,0)
API NAME^RFJ30^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",1.61,1.61,.03,3)
Answer must be 1-30 characters in length.
"^DD",1.61,1.61,.03,21,0)
^.001^4^4^3170209^^
"^DD",1.61,1.61,.03,21,1,0)
This is the name of an action that the VistA application supports on the
"^DD",1.61,1.61,.03,21,2,0)
sub/file. This string may be used as the ACTION parameter of the Policy
"^DD",1.61,1.61,.03,21,3,0)
Evaluation API. Some examples include read or view, create, edit, sign,
"^DD",1.61,1.61,.03,21,4,0)
cancel, etc.
"^DD",1.61,1.61,.03,"DT")
3170209
"^DD",1.61,1.61,.04,0)
TYPE^S^C:CREATE;R:READ;U:UPDATE;D:DELETE;^0;4^Q
"^DD",1.61,1.61,.04,3)
Select the kind of action this item represents.
"^DD",1.61,1.61,.04,21,0)
^^1^1^3161017^
"^DD",1.61,1.61,.04,21,1,0)
This is the basic category the action belongs to.
"^DD",1.61,1.61,.04,"DT")
3170221
"^DD",1.61,1.61,.05,0)
POLICY^*P1.6^DIAC(1.6,^0;5^S DIC("S")="I $P(^(0),U,2)'=""R""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",1.61,1.61,.05,1,0)
^.1
"^DD",1.61,1.61,.05,1,1,0)
1.61^D
"^DD",1.61,1.61,.05,1,1,1)
S ^DIAC(1.61,"D",$E(X,1,30),DA)=""
"^DD",1.61,1.61,.05,1,1,2)
K ^DIAC(1.61,"D",$E(X,1,30),DA)
"^DD",1.61,1.61,.05,1,1,"%D",0)
^.101^1^1^3170221^^^
"^DD",1.61,1.61,.05,1,1,"%D",1,0)
Find File# & Action actions by associated Policy ien.
"^DD",1.61,1.61,.05,1,1,"DT")
3160722
"^DD",1.61,1.61,.05,3)
Select the policy or set that should be evaluated when this action occurs.
"^DD",1.61,1.61,.05,12)
Only policies or sets (no rules) may be selected.
"^DD",1.61,1.61,.05,12.1)
S DIC("S")="I $P(^(0),U,2)'=""R"""
"^DD",1.61,1.61,.05,21,0)
^^3^3^3170217^
"^DD",1.61,1.61,.05,21,1,0)
When the policy evaluation API is invoked, the file# and action passed
"^DD",1.61,1.61,.05,21,2,0)
in will be used to find a match in this file; the Policy pointed to by
"^DD",1.61,1.61,.05,21,3,0)
this field will then be evaluated for an access result.
"^DD",1.61,1.61,.05,"DT")
3170217
"^DD",1.61,1.61,1,0)
SHORT DESCRIPTION^FJ80^^1;1^K:$L(X)>80!($L(X)<1) X
"^DD",1.61,1.61,1,3)
Answer must be 1-80 characters in length.
"^DD",1.61,1.61,1,21,0)
^.001^1^1^3170221^^
"^DD",1.61,1.61,1,21,1,0)
This field contains a brief description of the action.
"^DD",1.61,1.61,1,"DT")
3160722
"^DD",1.61,1.61,5,0)
AVAILABLE FIELDS^FJ245^^5;1^K:$L(X)>245!($L(X)<1) X
"^DD",1.61,1.61,5,3)
Enter a valid DR string, up to 245 characters.
"^DD",1.61,1.61,5,21,0)
^.001^8^8^3170221^^^
"^DD",1.61,1.61,5,21,1,0)
This is a string of field numbers, delimited by semi-colons, that can be 
"^DD",1.61,1.61,5,21,2,0)
used as the DR variable for FileMan api's; see the VA FileMan Programmer
"^DD",1.61,1.61,5,21,3,0)
Manual for further details.
"^DD",1.61,1.61,5,21,4,0)
 
"^DD",1.61,1.61,5,21,5,0)
This string will be returned to the client if a permit result is found, to
"^DD",1.61,1.61,5,21,6,0)
identify the fields that are allowed to be viewed or acted on. The value
"^DD",1.61,1.61,5,21,7,0)
saved here will be the default string for this action; it may be overridden
"^DD",1.61,1.61,5,21,8,0)
by a string saved at a finer level within the default policy.
"^DD",1.61,1.61,5,"DT")
3161019
"^DD",1.61,1.61,5.1,0)
ADDITIONAL FIELDS^1.615A^^5.1;0
"^DD",1.61,1.61,5.1,21,0)
^.001^3^3^3170221^^^^
"^DD",1.61,1.61,5.1,21,1,0)
This multiple holds additional DR strings as needed, such as the fields
"^DD",1.61,1.61,5.1,21,2,0)
that may be accessed in a sub-file. To save a continuation string for
"^DD",1.61,1.61,5.1,21,3,0)
the top-level file, enter the primary file number for this action.
"^DD",1.61,1.615,0)
ADDITIONAL FIELDS SUB-FIELD^^.04^4
"^DD",1.61,1.615,0,"DT")
3170120
"^DD",1.61,1.615,0,"IX","B",1.615,.01)

"^DD",1.61,1.615,0,"NM","ADDITIONAL FIELDS")

"^DD",1.61,1.615,0,"UP")
1.61
"^DD",1.61,1.615,.01,0)
SUBFILE#^MNJ15,7^^0;1^K:+X'=X!(X>9999999.9999999)!(X<0)!(X?.E1"."8N.N) X
"^DD",1.61,1.615,.01,1,0)
^.1
"^DD",1.61,1.615,.01,1,1,0)
1.615^B
"^DD",1.61,1.615,.01,1,1,1)
S ^DIAC(1.61,DA(1),5.1,"B",$E(X,1,30),DA)=""
"^DD",1.61,1.615,.01,1,1,2)
K ^DIAC(1.61,DA(1),5.1,"B",$E(X,1,30),DA)
"^DD",1.61,1.615,.01,3)
Enter a valid VistA file or sub-file number, up to 9999999.9999999.
"^DD",1.61,1.615,.01,21,0)
^.001^1^1^3170120^^^^
"^DD",1.61,1.615,.01,21,1,0)
This is a number that represents a valid VistA file or sub-file.
"^DD",1.61,1.615,.01,"DT")
3161223
"^DD",1.61,1.615,.02,0)
LEVEL^RNJ1,0^^0;2^K:+X'=X!(X>9)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.61,1.615,.02,3)
Type a number between 1 and 9, 0 decimal digits.
"^DD",1.61,1.615,.02,21,0)
^.001^3^3^3170221^^
"^DD",1.61,1.615,.02,21,1,0)
This integer is the file level, relative to the FILE# of the action.
"^DD",1.61,1.615,.02,21,2,0)
Enter 1 if this is a continuation string for FILE#, 2 if this is a
"^DD",1.61,1.615,.02,21,3,0)
DR string for a sub-file, etc.
"^DD",1.61,1.615,.02,"DT")
3170120
"^DD",1.61,1.615,.03,0)
SEQUENCE^NJ2,0^^0;3^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",1.61,1.615,.03,3)
Type a number between 1 and 99, 0 decimal digits.
"^DD",1.61,1.615,.03,21,0)
^^2^2^3170120^
"^DD",1.61,1.615,.03,21,1,0)
This is the sequence number for the DR array, if this is a continuation
"^DD",1.61,1.615,.03,21,2,0)
string.
"^DD",1.61,1.615,.03,"DT")
3170120
"^DD",1.61,1.615,.04,0)
DR^FJ400^^0;4^K:$L(X)>400!($L(X)<1) X
"^DD",1.61,1.615,.04,3)
Answer must be 1-400 characters in length.
"^DD",1.61,1.615,.04,21,0)
^^4^4^3170120^
"^DD",1.61,1.615,.04,21,1,0)
This is a string of field numbers, delimited by semi-colons, that can be
"^DD",1.61,1.615,.04,21,2,0)
used as the DR variable for FileMan api's; see the VA FileMan Programmer
"^DD",1.61,1.615,.04,21,3,0)
Manual for further details. These strings are intended to supplement the
"^DD",1.61,1.615,.04,21,4,0)
Available Fields value, as sub-file or continuation strings.
"^DD",1.61,1.615,.04,"DT")
3170120
"^DD",1.62,1.62,0)
FIELD^^.001^7
"^DD",1.62,1.62,0,"DT")
3161130
"^DD",1.62,1.62,0,"ID",.03)
W "   ",@("$P($P($C(59)_$S($D(^DD(1.62,.03,0)):$P(^(0),U,3),1:0)_$E("_DIC_"Y,0),0),$C(59)_$P(^(0),U,3)_"":"",2),$C(59),1)")
"^DD",1.62,1.62,0,"IX","B",1.62,.01)

"^DD",1.62,1.62,0,"NM","POLICY FUNCTION")

"^DD",1.62,1.62,0,"PT",1.6,.04)

"^DD",1.62,1.62,0,"PT",1.6,.07)

"^DD",1.62,1.62,0,"PT",1.6,7)

"^DD",1.62,1.62,0,"PT",1.6,8)

"^DD",1.62,1.62,0,"PT",1.603,.02)

"^DD",1.62,1.62,.001,0)
NUMBER^NJ7,0X^^ ^K:+X'=X!(X>9999999)!(('$G(DIFROM))&(X<1001))!(X?.E1"."1N.N) X
"^DD",1.62,1.62,.001,3)
Type a number between 1001 and 9999999, 0 decimal digits.
"^DD",1.62,1.62,.001,21,0)
^^2^2^3161128^
"^DD",1.62,1.62,.001,21,1,0)
This is a number that uniquely identifies the function. Values less than
"^DD",1.62,1.62,.001,21,2,0)
1000 are reserved for FileMan use.
"^DD",1.62,1.62,.001,"DT")
3161128
"^DD",1.62,1.62,.01,0)
NAME^RFJ30X^^0;1^D CHKNAME^DIACX(1.62) I $D(X) K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",1.62,1.62,.01,1,0)
^.1
"^DD",1.62,1.62,.01,1,1,0)
1.62^B
"^DD",1.62,1.62,.01,1,1,1)
S ^DIAC(1.62,"B",$E(X,1,30),DA)=""
"^DD",1.62,1.62,.01,1,1,2)
K ^DIAC(1.62,"B",$E(X,1,30),DA)
"^DD",1.62,1.62,.01,3)
Enter a unique name, 3-30 characters, beginning with the package namespace.
"^DD",1.62,1.62,.01,21,0)
^.001^2^2^3161205^^^
"^DD",1.62,1.62,.01,21,1,0)
The formal unique name of the function, prefaced with the package namespace
"^DD",1.62,1.62,.01,21,2,0)
specified in the PACKAGE file, or the letter Z or A.
"^DD",1.62,1.62,.01,"DEL",1,0)
I DA<1000
"^DD",1.62,1.62,.01,"DT")
3161130
"^DD",1.62,1.62,.02,0)
DISPLAY NAME^FJ30^^0;2^K:$L(X)>30!($L(X)<3) X
"^DD",1.62,1.62,.02,3)
Answer must be 3-30 characters in length.
"^DD",1.62,1.62,.02,21,0)
^^2^2^3160803^
"^DD",1.62,1.62,.02,21,1,0)
This is the name of the function as it should be displayed to the user in
"^DD",1.62,1.62,.02,21,2,0)
the Policy Editor.
"^DD",1.62,1.62,.02,"DT")
3160707
"^DD",1.62,1.62,.03,0)
TYPE^S^A:ATTRIBUTE;C:CONDITION;R:RESULT;O:OBLIGATION;^0;3^Q
"^DD",1.62,1.62,.03,3)
Select the type or usage of this function.
"^DD",1.62,1.62,.03,21,0)
^.001^3^3^3161020^^
"^DD",1.62,1.62,.03,21,1,0)
This field indicates the expected usage of this function; it will be used
"^DD",1.62,1.62,.03,21,2,0)
to screen potential selections for the various function fields of a policy
"^DD",1.62,1.62,.03,21,3,0)
in the Policy Editor.
"^DD",1.62,1.62,.03,"DT")
3161115
"^DD",1.62,1.62,.04,0)
NULL VALUE^S^P:PERMIT;D:DENY;^0;4^Q
"^DD",1.62,1.62,.04,3)
For Result functions, select the value to return in place of null.
"^DD",1.62,1.62,.04,21,0)
^.001^6^6^3161020^^
"^DD",1.62,1.62,.04,21,1,0)
This field is only used with Result functions, when a specific result must
"^DD",1.62,1.62,.04,21,2,0)
be returned for the policy; if a permit or deny result could not be
"^DD",1.62,1.62,.04,21,3,0)
determined for the policy or set, the value saved in this field will be
"^DD",1.62,1.62,.04,21,4,0)
returned as the result. It is recommended to use result functions with
"^DD",1.62,1.62,.04,21,5,0)
a null value with top-level policies, otherwise processing logic within
"^DD",1.62,1.62,.04,21,6,0)
a policy could be inadvertently altered.
"^DD",1.62,1.62,.04,"DT")
3160803
"^DD",1.62,1.62,1,0)
EXECUTE CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",1.62,1.62,1,3)
This is Standard MUMPS code.
"^DD",1.62,1.62,1,9)
@
"^DD",1.62,1.62,1,21,0)
^^6^6^3160803^
"^DD",1.62,1.62,1,21,1,0)
This is the M code that will be executed for this function. See the VA
"^DD",1.62,1.62,1,21,2,0)
FileMan Programmer Manual for full details on available variables and
"^DD",1.62,1.62,1,21,3,0)
expected output. Attribute functions should set any needed record
"^DD",1.62,1.62,1,21,4,0)
elements in the DIVAL("attribute")="value" array; Condition and Result
"^DD",1.62,1.62,1,21,5,0)
functions should return a boolean value in Y. Obligation functions may
"^DD",1.62,1.62,1,21,6,0)
perform any tasks needed by the application.
"^DD",1.62,1.62,1,"DT")
3160707
"^DD",1.62,1.62,2,0)
DESCRIPTION^1.622^^2;0
"^DD",1.62,1.62,2,21,0)
^.001^3^3^3160803^^
"^DD",1.62,1.62,2,21,1,0)
This field contains a brief description of the function; it should include
"^DD",1.62,1.62,2,21,2,0)
any input variables required, the expected output, and any possible error
"^DD",1.62,1.62,2,21,3,0)
messages.
"^DD",1.62,1.622,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",1.62,1.622,0,"DT")
3160803
"^DD",1.62,1.622,0,"NM","DESCRIPTION")

"^DD",1.62,1.622,0,"UP")
1.62
"^DD",1.62,1.622,.01,0)
DESCRIPTION^Wx^^0;1^Q
"^DD",1.62,1.622,.01,3)
Enter a description of this function, including input and output variables.
"^DD",1.62,1.622,.01,21,0)
^.001^3^3^3160803^^
"^DD",1.62,1.622,.01,21,1,0)
This field contains a brief description of the function; it should include
"^DD",1.62,1.622,.01,21,2,0)
any input variables required, the expected output, and any possible error
"^DD",1.62,1.622,.01,21,3,0)
messages.
"^DD",1.62,1.622,.01,"DT")
3160803
"^DIC",1.6,1.6,0)
POLICY^1.6
"^DIC",1.6,1.6,0,"GL")
^DIAC(1.6,
"^DIC",1.6,1.6,"%D",0)
^^14^14^3170221^
"^DIC",1.6,1.6,"%D",1,0)
This file holds sets of rules that define a user's authorization to access
"^DIC",1.6,1.6,"%D",2,0)
data stored in VistA. It supports an attribute-based utility that VistA
"^DIC",1.6,1.6,"%D",3,0)
applications can use to permit or deny access to an individual record in a
"^DIC",1.6,1.6,"%D",4,0)
file. Rules can be combined as needed to create simple or very complex
"^DIC",1.6,1.6,"%D",5,0)
policies; policies can themselves be organized into policy sets.
"^DIC",1.6,1.6,"%D",6,0)
 
"^DIC",1.6,1.6,"%D",7,0)
A policy or set can be tied to an action on a particular VistA file in the
"^DIC",1.6,1.6,"%D",8,0)
Application Action file #1.61; member policies are then evaluated in
"^DIC",1.6,1.6,"%D",9,0)
sequence, drilling down the Member hierarchy to each rule. Every policy or
"^DIC",1.6,1.6,"%D",10,0)
rule whose 'target' attributes match the record will be applied; those
"^DIC",1.6,1.6,"%D",11,0)
that do not match are simply skipped. Matching rules may have additional
"^DIC",1.6,1.6,"%D",12,0)
conditions that are evaluated, to determine a result of Permit or Deny.
"^DIC",1.6,1.6,"%D",13,0)
Each policy can have a result function that determines when evaluation is
"^DIC",1.6,1.6,"%D",14,0)
satisfied (for example, as soon as a rule returns Permit).
"^DIC",1.6,"B","POLICY",1.6)

"^DIC",1.61,1.61,0)
APPLICATION ACTION^1.61
"^DIC",1.61,1.61,0,"GL")
^DIAC(1.61,
"^DIC",1.61,1.61,"%D",0)
^1.001^7^7^3170308^^
"^DIC",1.61,1.61,"%D",1,0)
This file contains the actions that users may take on a record in a 
"^DIC",1.61,1.61,"%D",2,0)
specific VistA file or sub-file; these should be the actions provided by 
"^DIC",1.61,1.61,"%D",3,0)
and supported in the application that owns the designated file.
"^DIC",1.61,1.61,"%D",4,0)
 
"^DIC",1.61,1.61,"%D",5,0)
When the policy evaluation API is invoked, the File# and API Name passed
"^DIC",1.61,1.61,"%D",6,0)
in will be used to find a match in this file; its associated Policy will
"^DIC",1.61,1.61,"%D",7,0)
then be evaluated to return an access result of Permit or Deny.
"^DIC",1.61,"B","APPLICATION ACTION",1.61)

"^DIC",1.62,1.62,0)
POLICY FUNCTION^1.62
"^DIC",1.62,1.62,0,"GL")
^DIAC(1.62,
"^DIC",1.62,1.62,"%D",0)
^1.001^16^16^3161020^^^
"^DIC",1.62,1.62,"%D",1,0)
This file contains the functions needed to support evaluation of data access
"^DIC",1.62,1.62,"%D",2,0)
Policies in file #1.6. See the VA FileMan Programmer Manual for full details
"^DIC",1.62,1.62,"%D",3,0)
of local variables available to use, and output requirements of each type.
"^DIC",1.62,1.62,"%D",4,0)
 
"^DIC",1.62,1.62,"%D",5,0)
Attribute functions may use variables such as the current file (DIFN) and
"^DIC",1.62,1.62,"%D",6,0)
record number (DIENS) to set DIVAL("attribute")="value" with the attributes
"^DIC",1.62,1.62,"%D",7,0)
that will be needed to evaluate the policy.
"^DIC",1.62,1.62,"%D",8,0)
 
"^DIC",1.62,1.62,"%D",9,0)
Condition functions often look beyond the record, at a user's keys or role
"^DIC",1.62,1.62,"%D",10,0)
for example, and should return a boolean result in Y.
"^DIC",1.62,1.62,"%D",11,0)
 
"^DIC",1.62,1.62,"%D",12,0)
Result functions may look at the DIRESULT variable, if it is set to P or D,
"^DIC",1.62,1.62,"%D",13,0)
and should return a boolean value in Y indicating if processing is done.
"^DIC",1.62,1.62,"%D",14,0)
 
"^DIC",1.62,1.62,"%D",15,0)
Obligation functions may perform any tasks needed by the application, such
"^DIC",1.62,1.62,"%D",16,0)
as logging access granted to a file, and do not need to return a value.
"^DIC",1.62,"B","POLICY FUNCTION",1.62)

"BLD",9419,6)
^7
**END**
**END**

