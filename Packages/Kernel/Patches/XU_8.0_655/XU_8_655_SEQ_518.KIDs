Released XU*8*655 SEQ #518
Extracted from mail message
**KIDS**:XU*8.0*655^

**INSTALL NAME**
XU*8.0*655
"BLD",1532,0)
XU*8.0*655^KERNEL^0^3150331^y
"BLD",1532,1,0)
^^27^27^3150330^
"BLD",1532,1,1,0)
Please see description of patch on FORUM.
"BLD",1532,1,2,0)
 
"BLD",1532,1,3,0)
This patch provides utilities to Identify and Authenticate VistA users
"BLD",1532,1,4,0)
from sources external to VistA.
"BLD",1532,1,5,0)
 
"BLD",1532,1,6,0)
Identity and Access Management (IAM)
"BLD",1532,1,7,0)
- Provide a centralized authentication service for single sign-on to 
"BLD",1532,1,8,0)
  multiple VA applications, including VistA and applications that access 
"BLD",1532,1,9,0)
  VistA.
"BLD",1532,1,10,0)
 
"BLD",1532,1,11,0)
VistA Service Assembler (VSA) 
"BLD",1532,1,12,0)
 
"BLD",1532,1,13,0)
VistA Integration Adapter (VIA)
"BLD",1532,1,14,0)
 
"BLD",1532,1,15,0)
VistA Access Enhancements (VAE)
"BLD",1532,1,16,0)
 
"BLD",1532,1,17,0)
Electronic Health Management Platform (eHMP)
"BLD",1532,1,18,0)
 
"BLD",1532,1,19,0)
VistA.js/EWD.js
"BLD",1532,1,20,0)
 
"BLD",1532,1,21,0)
RPC Broker
"BLD",1532,1,22,0)
 
"BLD",1532,1,23,0)
Veterans Access, Choice, and Accountability Act of 2014 (VACAA)
"BLD",1532,1,24,0)
- Public Law 9P. L.) 113-146, VACAA, which was enacted on August 7, 2014
"BLD",1532,1,25,0)
  and amended through the Department of Veterans Affairs Expiring
"BLD",1532,1,26,0)
  Authorities Act of 2014 (P.L. 113-175), improves the access of eligible
"BLD",1532,1,27,0)
  Veterans to health care through non-VA entities and providers.
"BLD",1532,4,0)
^9.64PA^200^1
"BLD",1532,4,200,0)
200
"BLD",1532,4,200,2,0)
^9.641^200^1
"BLD",1532,4,200,2,200,0)
NEW PERSON  (File-top level)
"BLD",1532,4,200,2,200,1,0)
^9.6411^501.1^6
"BLD",1532,4,200,2,200,1,205.1,0)
SECID
"BLD",1532,4,200,2,200,1,205.2,0)
SUBJECT ORGANIZATION
"BLD",1532,4,200,2,200,1,205.3,0)
SUBJECT ORGANIZATION ID
"BLD",1532,4,200,2,200,1,205.4,0)
UNIQUE USER ID
"BLD",1532,4,200,2,200,1,205.5,0)
ADUPN
"BLD",1532,4,200,2,200,1,501.1,0)
NETWORK USERNAME
"BLD",1532,4,200,222)
y^y^p^^^^n^^n
"BLD",1532,4,200,224)

"BLD",1532,4,"APDD",200,200)

"BLD",1532,4,"APDD",200,200,205.1)

"BLD",1532,4,"APDD",200,200,205.2)

"BLD",1532,4,"APDD",200,200,205.3)

"BLD",1532,4,"APDD",200,200,205.4)

"BLD",1532,4,"APDD",200,200,205.5)

"BLD",1532,4,"APDD",200,200,501.1)

"BLD",1532,4,"B",200,200)

"BLD",1532,6.3)
16
"BLD",1532,"ABPKG")
n
"BLD",1532,"INID")
n^n
"BLD",1532,"INIT")
XU8PS655
"BLD",1532,"KRN",0)
^9.67PA^9002226^22
"BLD",1532,"KRN",.4,0)
.4
"BLD",1532,"KRN",.4,"NM",0)
^9.68A^2^2
"BLD",1532,"KRN",.4,"NM",1,0)
XUS VISIT USERS    FILE #200^200^0
"BLD",1532,"KRN",.4,"NM",2,0)
XUSEC REMOTE ACCESS    FILE #3.081^3.081^0
"BLD",1532,"KRN",.4,"NM","B","XUS VISIT USERS    FILE #200",1)

"BLD",1532,"KRN",.4,"NM","B","XUSEC REMOTE ACCESS    FILE #3.081",2)

"BLD",1532,"KRN",.401,0)
.401
"BLD",1532,"KRN",.401,"NM",0)
^9.68A^2^2
"BLD",1532,"KRN",.401,"NM",1,0)
XUS VISIT USERS    FILE #200^200^0
"BLD",1532,"KRN",.401,"NM",2,0)
XUSEC REMOTE ACCESS    FILE #3.081^3.081^0
"BLD",1532,"KRN",.401,"NM","B","XUS VISIT USERS    FILE #200",1)

"BLD",1532,"KRN",.401,"NM","B","XUSEC REMOTE ACCESS    FILE #3.081",2)

"BLD",1532,"KRN",.402,0)
.402
"BLD",1532,"KRN",.403,0)
.403
"BLD",1532,"KRN",.403,"NM",0)
^9.68A^1^1
"BLD",1532,"KRN",.403,"NM",1,0)
XUEDIT CHARACTERISTICS    FILE #200^200^0
"BLD",1532,"KRN",.403,"NM","B","XUEDIT CHARACTERISTICS    FILE #200",1)

"BLD",1532,"KRN",.5,0)
.5
"BLD",1532,"KRN",.84,0)
.84
"BLD",1532,"KRN",3.6,0)
3.6
"BLD",1532,"KRN",3.8,0)
3.8
"BLD",1532,"KRN",9.2,0)
9.2
"BLD",1532,"KRN",9.8,0)
9.8
"BLD",1532,"KRN",9.8,"NM",0)
^9.68A^10^10
"BLD",1532,"KRN",9.8,"NM",1,0)
XUESSO2^^0^B108993229
"BLD",1532,"KRN",9.8,"NM",2,0)
XUESSO3^^0^B206943521
"BLD",1532,"KRN",9.8,"NM",3,0)
XUSHSH^^0^B31040658
"BLD",1532,"KRN",9.8,"NM",4,0)
XUESSO1^^0^B77693554
"BLD",1532,"KRN",9.8,"NM",5,0)
XLFNAME^^0^B55907833
"BLD",1532,"KRN",9.8,"NM",6,0)
XU8PS655^^0^B102640640
"BLD",1532,"KRN",9.8,"NM",7,0)
XUSAML^^0^B78896546
"BLD",1532,"KRN",9.8,"NM",8,0)
XUSER1^^0^B12036496
"BLD",1532,"KRN",9.8,"NM",9,0)
XUPSQRY^^0^B37071844
"BLD",1532,"KRN",9.8,"NM",10,0)
XU8PE655^^0^B53655876
"BLD",1532,"KRN",9.8,"NM","B","XLFNAME",5)

"BLD",1532,"KRN",9.8,"NM","B","XU8PE655",10)

"BLD",1532,"KRN",9.8,"NM","B","XU8PS655",6)

"BLD",1532,"KRN",9.8,"NM","B","XUESSO1",4)

"BLD",1532,"KRN",9.8,"NM","B","XUESSO2",1)

"BLD",1532,"KRN",9.8,"NM","B","XUESSO3",2)

"BLD",1532,"KRN",9.8,"NM","B","XUPSQRY",9)

"BLD",1532,"KRN",9.8,"NM","B","XUSAML",7)

"BLD",1532,"KRN",9.8,"NM","B","XUSER1",8)

"BLD",1532,"KRN",9.8,"NM","B","XUSHSH",3)

"BLD",1532,"KRN",19,0)
19
"BLD",1532,"KRN",19,"NM",0)
^9.68A^5^5
"BLD",1532,"KRN",19,"NM",1,0)
XUOPTUSER^^3
"BLD",1532,"KRN",19,"NM",2,0)
XUS VISIT USERS^^0
"BLD",1532,"KRN",19,"NM",3,0)
XUSEC REMOTE ACCESS^^0
"BLD",1532,"KRN",19,"NM",4,0)
XUS IAM USER PROVISIONING^^0
"BLD",1532,"KRN",19,"NM",5,0)
XUS IAM USER BINDING^^0
"BLD",1532,"KRN",19,"NM","B","XUOPTUSER",1)

"BLD",1532,"KRN",19,"NM","B","XUS IAM USER BINDING",5)

"BLD",1532,"KRN",19,"NM","B","XUS IAM USER PROVISIONING",4)

"BLD",1532,"KRN",19,"NM","B","XUS VISIT USERS",2)

"BLD",1532,"KRN",19,"NM","B","XUSEC REMOTE ACCESS",3)

"BLD",1532,"KRN",19.1,0)
19.1
"BLD",1532,"KRN",101,0)
101
"BLD",1532,"KRN",409.61,0)
409.61
"BLD",1532,"KRN",771,0)
771
"BLD",1532,"KRN",779.2,0)
779.2
"BLD",1532,"KRN",870,0)
870
"BLD",1532,"KRN",8989.51,0)
8989.51
"BLD",1532,"KRN",8989.52,0)
8989.52
"BLD",1532,"KRN",8993,0)
8993
"BLD",1532,"KRN",8994,0)
8994
"BLD",1532,"KRN",8994,"NM",0)
^9.68A^6^6
"BLD",1532,"KRN",8994,"NM",1,0)
XUS IAM ADD USER^^0
"BLD",1532,"KRN",8994,"NM",2,0)
XUS IAM EDIT USER^^0
"BLD",1532,"KRN",8994,"NM",3,0)
XUS IAM FIND USER^^0
"BLD",1532,"KRN",8994,"NM",4,0)
XUS IAM DISPLAY USER^^0
"BLD",1532,"KRN",8994,"NM",5,0)
XUS ESSO VALIDATE^^0
"BLD",1532,"KRN",8994,"NM",6,0)
XUS IAM BIND USER^^0
"BLD",1532,"KRN",8994,"NM","B","XUS ESSO VALIDATE",5)

"BLD",1532,"KRN",8994,"NM","B","XUS IAM ADD USER",1)

"BLD",1532,"KRN",8994,"NM","B","XUS IAM BIND USER",6)

"BLD",1532,"KRN",8994,"NM","B","XUS IAM DISPLAY USER",4)

"BLD",1532,"KRN",8994,"NM","B","XUS IAM EDIT USER",2)

"BLD",1532,"KRN",8994,"NM","B","XUS IAM FIND USER",3)

"BLD",1532,"KRN",9002226,0)
9002226
"BLD",1532,"KRN","B",.4,.4)

"BLD",1532,"KRN","B",.401,.401)

"BLD",1532,"KRN","B",.402,.402)

"BLD",1532,"KRN","B",.403,.403)

"BLD",1532,"KRN","B",.5,.5)

"BLD",1532,"KRN","B",.84,.84)

"BLD",1532,"KRN","B",3.6,3.6)

"BLD",1532,"KRN","B",3.8,3.8)

"BLD",1532,"KRN","B",9.2,9.2)

"BLD",1532,"KRN","B",9.8,9.8)

"BLD",1532,"KRN","B",19,19)

"BLD",1532,"KRN","B",19.1,19.1)

"BLD",1532,"KRN","B",101,101)

"BLD",1532,"KRN","B",409.61,409.61)

"BLD",1532,"KRN","B",771,771)

"BLD",1532,"KRN","B",779.2,779.2)

"BLD",1532,"KRN","B",870,870)

"BLD",1532,"KRN","B",8989.51,8989.51)

"BLD",1532,"KRN","B",8989.52,8989.52)

"BLD",1532,"KRN","B",8993,8993)

"BLD",1532,"KRN","B",8994,8994)

"BLD",1532,"KRN","B",9002226,9002226)

"BLD",1532,"PRE")
XU8PE655
"BLD",1532,"QUES",0)
^9.62^^
"BLD",1532,"REQB",0)
^9.611^^0
"FIA",200)
NEW PERSON
"FIA",200,0)
^VA(200,
"FIA",200,0,0)
200I
"FIA",200,0,1)
y^y^p^^^^n^^n
"FIA",200,0,10)

"FIA",200,0,11)

"FIA",200,0,"RLRO")

"FIA",200,0,"VR")
8.0^XU
"FIA",200,200)
1
"FIA",200,200,205.1)

"FIA",200,200,205.2)

"FIA",200,200,205.3)

"FIA",200,200,205.4)

"FIA",200,200,205.5)

"FIA",200,200,501.1)

"INIT")
XU8PS655
"IX",200,200,"AOIUID",0)
200^AOIUID^This is a regular index of OID+UID (205.3+205.4)^R^^R^IR^I^200^^^^^S
"IX",200,200,"AOIUID",.1,0)
^^4^4^3150112^
"IX",200,200,"AOIUID",.1,1,0)
The combination of the SUBJECT ORGANIZATION ID field (#205.3) and the 
"IX",200,200,"AOIUID",.1,2,0)
UNIQUE USER ID field (#205.4) creates a unique identifier when used to 
"IX",200,200,"AOIUID",.1,3,0)
identify external users such as those from non-VA organizations that have
"IX",200,200,"AOIUID",.1,4,0)
some connection with a patient record.
"IX",200,200,"AOIUID",1)
S ^VA(200,"AOIUID",$E(X(1),1,30),$E(X(2),1,30),DA)=""
"IX",200,200,"AOIUID",2)
K ^VA(200,"AOIUID",$E(X(1),1,30),$E(X(2),1,30),DA)
"IX",200,200,"AOIUID",2.5)
K ^VA(200,"AOIUID")
"IX",200,200,"AOIUID",11.1,0)
^.114IA^2^2
"IX",200,200,"AOIUID",11.1,1,0)
1^F^200^205.3^30^1^F
"IX",200,200,"AOIUID",11.1,2,0)
2^F^200^205.4^30^2^F
"KRN",.4,70,-1)
0^2
"KRN",.4,70,0)
XUSEC REMOTE ACCESS^3121214.1211^@^3.081^^@^3121214
"KRN",.4,70,"F",2)
0;"SIGNED ON"~99~.01~14~
"KRN",.4,70,"H")
Remote Access User Sign-On Log
"KRN",.4,72,-1)
0^1
"KRN",.4,72,0)
XUS VISIT USERS^3121214.1207^^200^^@^3121214
"KRN",.4,72,"F",2)
.01~8910,1;C5;S1~8910,3~8910,4~
"KRN",.4,72,"H")
Users with Foreign Visits
"KRN",.401,41,-1)
0^2
"KRN",.401,41,0)
XUSEC REMOTE ACCESS^3121214.1212^@^3.081^^@^3121214
"KRN",.401,41,2,0)
^.4014^2^2
"KRN",.401,41,2,1,0)
3.081^0^DATE/TIME^^^^D^^^1
"KRN",.401,41,2,1,"ASK")
1
"KRN",.401,41,2,1,"F")
3120100.999999^Jan 1,2012^Jan 1,2012
"KRN",.401,41,2,1,"QCON")
I D0]]3120100.999999
"KRN",.401,41,2,1,"SER")
0.0000^0.0000
"KRN",.401,41,2,1,"T")
z^
"KRN",.401,41,2,1,"TXT")
DATE/TIME from Jan 1,2012
"KRN",.401,41,2,2,0)
3.081^14^REMOTE STATION ID^^^^^^^4
"KRN",.401,41,2,2,"GET")
S DISX(2)=$P($G(^XUSEC(0,D0,0)),U,14)
"KRN",.401,41,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,41,2,2,"SER")
1.0000^1.0000
"KRN",.401,41,2,2,"TXT")
REMOTE STATION ID not null
"KRN",.401,41,2,"B",3.081,1)

"KRN",.401,41,2,"B",3.081,2)

"KRN",.401,41,"%D",0)
^.4012^2^2^3121214^^^
"KRN",.401,41,"%D",1,0)
This SORT template is used to find the entries in the sign-on log created
"KRN",.401,41,"%D",2,0)
by Remote User Access.  This could be from ESSO or Remote RPC's.
"KRN",.401,42,-1)
0^1
"KRN",.401,42,0)
XUS VISIT USERS^3121214.1207^^200^^@^3121214
"KRN",.401,42,2,0)
^.4014^3^3
"KRN",.401,42,2,1,0)
200^^COUNT(VISITED FROM)>0^"@B^;L1^^^^^4
"KRN",.401,42,2,1,3,0)
^.401419^3^3
"KRN",.401,42,2,1,3,1,0)
OVF0^9.2
"KRN",.401,42,2,1,3,1,"OVF0")
F D=0:0 S (D,D1)=$O(^VA(200,D0,8910,"B",DICOB,D)) Q:D'>0  I $D(^VA(200,D0,8910,D,0))#2 S X=$P(^(0),U) S:X'?." " Y(1)=Y(1)+1 Q:'$D(D)  S D=D1
"KRN",.401,42,2,1,3,2,0)
OVF0^9.3
"KRN",.401,42,2,1,3,2,"OVF0")
N DICOB S DICOB="" F  S DICOB=$O(^VA(200,D0,8910,"B",DICOB)) Q:DICOB=""   X DPP(1,"OVF0",9.2) Q:'$D(D)
"KRN",.401,42,2,1,3,3,0)
OVF0^9.4
"KRN",.401,42,2,1,3,3,"OVF0")
S I(1,0)=$G(D1) X DPP(1,"OVF0",9.3):D0>0 S X="" S D1=I(1,0)
"KRN",.401,42,2,1,3,"B","OVF0",1)

"KRN",.401,42,2,1,3,"B","OVF0",2)

"KRN",.401,42,2,1,3,"B","OVF0",3)

"KRN",.401,42,2,1,"CM")
S Y(1)="" X DPP(1,"OVF0",9.4) S X=+Y(1)>0 I D0>0 S DISX(1)=X
"KRN",.401,42,2,1,"F")
0
"KRN",.401,42,2,1,"GET")
S Y(1)="" X DPP(1,"OVF0",9.4) S X=+Y(1)>0 I D0>0 S DISX(1)=X
"KRN",.401,42,2,1,"QCON")
I DISX(1)
"KRN",.401,42,2,1,"T")
1
"KRN",.401,42,2,1,"TXT")
COUNT(VISITED FROM)>0
"KRN",.401,42,2,2,0)
200^.01^NAME^^^^^^^4
"KRN",.401,42,2,2,"GET")
S DISX(2)=$P($G(^VA(200,D0,0)),U)
"KRN",.401,42,2,2,"IX")
^VA(200,"B",^VA(200,^2
"KRN",.401,42,2,2,"QCON")
I DISX(2)'=""
"KRN",.401,42,2,2,"SER")
0^0
"KRN",.401,42,2,2,"TXT")
NAME not null
"KRN",.401,42,2,3,0)
200.06^4^LAST VISITED^''^^^^^^1
"KRN",.401,42,2,3,1,0)
^.40141^1^1
"KRN",.401,42,2,3,1,1,0)
200^8910
"KRN",.401,42,2,3,1,"B",200,1)

"KRN",.401,42,2,3,"ASK")
1
"KRN",.401,42,2,3,"F")
3120100.999999^Jan 1,2012^Jan 1,2012
"KRN",.401,42,2,3,"GET")
S DISX(3)=$P($G(^VA(200,D0,8910,D1,0)),U,5)
"KRN",.401,42,2,3,"QCON")
I DISX(3)]]3120100.999999
"KRN",.401,42,2,3,"T")
z^
"KRN",.401,42,2,3,"TXT")
LAST VISITED from Jan 1,2012
"KRN",.401,42,2,"B",200,1)

"KRN",.401,42,2,"B",200,2)

"KRN",.401,42,2,"B",200.06,3)

"KRN",.401,42,"%D",0)
^.4012^1^1^3121214^^^
"KRN",.401,42,"%D",1,0)
This Template finds NPF entries that have VISIT data from another site.
"KRN",.403,2,-1)
0^1
"KRN",.403,2,0)
XUEDIT CHARACTERISTICS^^^^2901206^^^200^0^0^1
"KRN",.403,2,40,0)
^.4031I^1^1
"KRN",.403,2,40,1,0)
1^XUEDIT CHARACTERISTICS HDR^1,1^^^^^^
"KRN",.403,2,40,1,1)
Page 1 of 1
"KRN",.403,2,40,1,40,0)
^.4032PI^27^1
"KRN",.403,2,40,1,40,27,0)
XUEDIT CHARACTERISTICS^1^5,1^e
"KRN",.404,26,0)
XUEDIT CHARACTERISTICS HDR^200^0^^
"KRN",.404,26,40,0)
^.4044I^4^4
"KRN",.404,26,40,1,0)
1^EDIT USER CHARACTERISTICS^1^
"KRN",.404,26,40,1,2)
^^1,28^
"KRN",.404,26,40,2,0)
2^NAME^3^
"KRN",.404,26,40,2,1)
.01
"KRN",.404,26,40,2,2)
2,7^30^2,1
"KRN",.404,26,40,3,0)
3^PAGE 1 OF 1^1^
"KRN",.404,26,40,3,2)
^^2,69^
"KRN",.404,26,40,4,0)
4^_______________________________________________________________________________^1^
"KRN",.404,26,40,4,2)
^^3,1^
"KRN",.404,27,0)
XUEDIT CHARACTERISTICS^200^^^
"KRN",.404,27,15,0)
1^^1^1^2930813^^^^
"KRN",.404,27,15,1,0)
Part of KERNEL.
"KRN",.404,27,40,0)
^.4044I^17^15
"KRN",.404,27,40,1,0)
1^INITIAL^3
"KRN",.404,27,40,1,1)
1
"KRN",.404,27,40,1,2)
1,16^5^1,7
"KRN",.404,27,40,1,11)
N T S T(1)="To Exit form and save changes, enter: <PF1>E",T(2)="To Quit form without saving changes, enter: <PF1>Q" D HLP^DDSUTL(.T)
"KRN",.404,27,40,3,0)
2^PHONE^3
"KRN",.404,27,40,3,1)
.131
"KRN",.404,27,40,3,2)
1,62^15^1,55
"KRN",.404,27,40,4,0)
4^OFFICE PHONE^3
"KRN",.404,27,40,4,1)
.132
"KRN",.404,27,40,4,2)
2,62^15^2,48
"KRN",.404,27,40,5,0)
7^ASK DEVICE TYPE AT SIGN-ON^3
"KRN",.404,27,40,5,1)
200.05
"KRN",.404,27,40,5,2)
5,33^9^5,5
"KRN",.404,27,40,6,0)
8^AUTO MENU^3
"KRN",.404,27,40,6,1)
200.06
"KRN",.404,27,40,6,2)
6,33^20^6,22
"KRN",.404,27,40,7,0)
9^TYPE-AHEAD^3
"KRN",.404,27,40,7,1)
200.09
"KRN",.404,27,40,7,2)
7,33^11^7,21
"KRN",.404,27,40,8,0)
10^TEXT TERMINATOR^3
"KRN",.404,27,40,8,1)
31.2
"KRN",.404,27,40,8,2)
8,33^5^8,16
"KRN",.404,27,40,9,0)
11^PREFERRED EDITOR^3
"KRN",.404,27,40,9,1)
31.3
"KRN",.404,27,40,9,2)
9,33^30^9,15
"KRN",.404,27,40,10,0)
13^Want to edit VERIFY CODE (Y/N)^3
"KRN",.404,27,40,10,1)
11.1
"KRN",.404,27,40,10,2)
13,33^3^13,1
"KRN",.404,27,40,11,0)
5^VOICE PAGER^3
"KRN",.404,27,40,11,1)
.137
"KRN",.404,27,40,11,2)
3,62^15^3,49
"KRN",.404,27,40,12,0)
6^DIGITAL PAGER^3
"KRN",.404,27,40,12,1)
.138
"KRN",.404,27,40,12,2)
4,62^15^4,47
"KRN",.404,27,40,13,0)
12^NETWORK USERNAME^3
"KRN",.404,27,40,13,1)
501.1
"KRN",.404,27,40,13,2)
10,33^15^10,15
"KRN",.404,27,40,14,0)
14^TITLE^3
"KRN",.404,27,40,14,1)
8
"KRN",.404,27,40,14,2)
3,16^30^3,9
"KRN",.404,27,40,15,0)
15^ELECTRONIC SIGNATURE CODE^3
"KRN",.404,27,40,15,1)
20.4
"KRN",.404,27,40,15,2)
11,33^20^11,6
"KRN",.404,27,40,17,0)
3^NICK NAME^3
"KRN",.404,27,40,17,1)
13
"KRN",.404,27,40,17,2)
2,16^10^2,5
"KRN",19,148,-1)
3^1
"KRN",19,148,0)
XUOPTUSER^User Management Menu^^M^^^^^^^^KERNEL^y
"KRN",19,148,1,0)
^19.06^2^2^3121214^^^
"KRN",19,148,1,1,0)
This menu contains various Kernel options that have to do with managing
"KRN",19,148,1,2,0)
individual users.
"KRN",19,148,10,0)
^19.01IP^11^11
"KRN",19,148,10,10,0)
1654
"KRN",19,148,10,10,"^")
XUS VISIT USERS
"KRN",19,148,10,11,0)
1655
"KRN",19,148,10,11,"^")
XUSEC REMOTE ACCESS
"KRN",19,148,99)
62805,43469
"KRN",19,148,"U")
USER MANAGEMENT MENU
"KRN",19,1654,-1)
0^2
"KRN",19,1654,0)
XUS VISIT USERS^Users with Foreign Visits^^P^^^^^^^^KERNEL
"KRN",19,1654,1,0)
^^2^2^3121214^
"KRN",19,1654,1,1,0)
Menu option created by patch XU*8*612 using sort and print templates from 
"KRN",19,1654,1,2,0)
patch XU*8*165. Shows NPF entries that have been VISITORS to this site.
"KRN",19,1654,60)
VA(200,
"KRN",19,1654,62)
0
"KRN",19,1654,63)
[XUS VISIT USERS]
"KRN",19,1654,64)
[XUS VISIT USERS]
"KRN",19,1654,65)

"KRN",19,1654,66)

"KRN",19,1654,"U")
USERS WITH FOREIGN VISITS
"KRN",19,1655,-1)
0^3
"KRN",19,1655,0)
XUSEC REMOTE ACCESS^Remote Access User Sign-on Log^^P^^^^^^^^KERNEL
"KRN",19,1655,1,0)
^^2^2^3121214^
"KRN",19,1655,1,1,0)
Menu option created by patch XU*8*612 using sort and print templates from 
"KRN",19,1655,1,2,0)
patch XU*8*165. Prints Sign-on log entries from remote users.
"KRN",19,1655,60)
XUSEC(0,
"KRN",19,1655,62)
0
"KRN",19,1655,63)
[XUSEC REMOTE ACCESS]
"KRN",19,1655,64)
[XUSEC REMOTE ACCESS]
"KRN",19,1655,65)

"KRN",19,1655,66)

"KRN",19,1655,"U")
REMOTE ACCESS USER SIGN-ON LOG
"KRN",19,1698,-1)
0^4
"KRN",19,1698,0)
XUS IAM USER PROVISIONING^IAM User Provisioning^^B^^^^^^^^KERNEL
"KRN",19,1698,1,0)
^^6^6^3150210^
"KRN",19,1698,1,1,0)
This Broker (Client/Server) menu option is used exclusively by the 
"KRN",19,1698,1,2,0)
Identity and Access Management (IAM) Provisioning application.
"KRN",19,1698,1,3,0)
 
"KRN",19,1698,1,4,0)
The XUSHOWSSN Security Key is required to lookup users based on PII (SSN 
"KRN",19,1698,1,5,0)
and DoB) and to display SSN and DoB information about users. The XUSPF200
"KRN",19,1698,1,6,0)
Security Key is required to add and edit users.
"KRN",19,1698,"RPC",0)
^19.05P^4^4
"KRN",19,1698,"RPC",1,0)
XUS IAM ADD USER^XUSPF200
"KRN",19,1698,"RPC",2,0)
XUS IAM EDIT USER^XUSPF200
"KRN",19,1698,"RPC",3,0)
XUS IAM FIND USER
"KRN",19,1698,"RPC",4,0)
XUS IAM DISPLAY USER
"KRN",19,1698,"U")
IAM USER PROVISIONING
"KRN",19,1706,-1)
0^5
"KRN",19,1706,0)
XUS IAM USER BINDING^IAM User Binding App^^B^^^^^^^^KERNEL
"KRN",19,1706,1,0)
^^2^2^3150311^
"KRN",19,1706,1,1,0)
This Broker (Client/Server) menu option is used exclusively by the 
"KRN",19,1706,1,2,0)
Identity and Access Management (IAM) Binding application.
"KRN",19,1706,"RPC",0)
^19.05P^1^1
"KRN",19,1706,"RPC",1,0)
XUS IAM BIND USER
"KRN",19,1706,"U")
IAM USER BINDING APP
"KRN",8994,332,-1)
0^1
"KRN",8994,332,0)
XUS IAM ADD USER^IAMAU^XUESSO3^1^R^^^^1^^0
"KRN",8994,332,1,0)
^^6^6^3150211^
"KRN",8994,332,1,1,0)
This restricted RPC is used exclusively by the Identity and Access 
"KRN",8994,332,1,2,0)
Management (IAM) Provisioning application to add a new user to the VistA 
"KRN",8994,332,1,3,0)
NEW PERSON file (#200).
"KRN",8994,332,1,4,0)
 
"KRN",8994,332,1,5,0)
The XUSPF200 Security Key is required to add a user without an SSN (file 
"KRN",8994,332,1,6,0)
#200 special privileges).
"KRN",8994,332,2,0)
^8994.02A^8^8
"KRN",8994,332,2,1,0)
NAME^1^35^1^1
"KRN",8994,332,2,1,1,0)
^^2^2^3150206^
"KRN",8994,332,2,1,1,1,0)
NAME field (#.01) in the NEW PERSON file (#200) to match the SubjectID in 
"KRN",8994,332,2,1,1,2,0)
the user's SAML Token.
"KRN",8994,332,2,2,0)
SECID^1^30^1^2
"KRN",8994,332,2,2,1,0)
^8994.021^2^2^3150210^^
"KRN",8994,332,2,2,1,1,0)
SECID field (#205.1) in the NEW PERSON file (#200) to match the SecID in 
"KRN",8994,332,2,2,1,2,0)
the user's SAML Token.
"KRN",8994,332,2,3,0)
EMAIL^1^50^0^3
"KRN",8994,332,2,3,1,0)
^^1^1^3150206^
"KRN",8994,332,2,3,1,1,0)
EMAIL field (#.151) in the NEW PERSON file (#200).
"KRN",8994,332,2,4,0)
ADUPN^1^50^0^4
"KRN",8994,332,2,4,1,0)
^8994.021^2^2^3150211^^
"KRN",8994,332,2,4,1,1,0)
Active Directory User Principal Name ADUPN field (#205.5) in the NEW
"KRN",8994,332,2,4,1,2,0)
PERSON file (#200) to match user's Active Directory UPN.
"KRN",8994,332,2,4,2)

"KRN",8994,332,2,5,0)
SSN^1^9^0^5
"KRN",8994,332,2,5,1,0)
^^4^4^3150206^
"KRN",8994,332,2,5,1,1,0)
SSN field (#9) in the NEW PERSON file (#200) to match the user's Social 
"KRN",8994,332,2,5,1,2,0)
Security Number or Taxpayer Identification Number. While not required to 
"KRN",8994,332,2,5,1,3,0)
provision a VistA user, not populating this field with a valid SSN could
"KRN",8994,332,2,5,1,4,0)
prevent access to some applications and data in VistA.
"KRN",8994,332,2,6,0)
DOB^1^20^0^6
"KRN",8994,332,2,6,1,0)
^^2^2^3150206^
"KRN",8994,332,2,6,1,1,0)
DOB field (#5) in the NEW PERSON file (#200) to match the user's Date of 
"KRN",8994,332,2,6,1,2,0)
Birth.
"KRN",8994,332,2,7,0)
STATION^1^20^0^7
"KRN",8994,332,2,7,1,0)
^8994.021^3^3^3150210^^
"KRN",8994,332,2,7,1,1,0)
DIVISION field (#.01) of the DIVISION multiple (#16) in the NEW PERSON 
"KRN",8994,332,2,7,1,2,0)
file (#200). The name of a Division that this user may sign on to. The 
"KRN",8994,332,2,7,1,3,0)
Division should be an active treating facility.
"KRN",8994,332,2,8,0)
AUTHCODE^1^80^1^8
"KRN",8994,332,2,8,1,0)
^^1^1^3150210^
"KRN",8994,332,2,8,1,1,0)
Security Phrase for IAM Provisioning Application.
"KRN",8994,332,2,"B","ADUPN",4)

"KRN",8994,332,2,"B","AUTHCODE",8)

"KRN",8994,332,2,"B","DOB",6)

"KRN",8994,332,2,"B","EMAIL",3)

"KRN",8994,332,2,"B","NAME",1)

"KRN",8994,332,2,"B","SECID",2)

"KRN",8994,332,2,"B","SSN",5)

"KRN",8994,332,2,"B","STATION",7)

"KRN",8994,332,2,"PARAMSEQ",1,1)

"KRN",8994,332,2,"PARAMSEQ",2,2)

"KRN",8994,332,2,"PARAMSEQ",3,3)

"KRN",8994,332,2,"PARAMSEQ",4,4)

"KRN",8994,332,2,"PARAMSEQ",5,5)

"KRN",8994,332,2,"PARAMSEQ",6,6)

"KRN",8994,332,2,"PARAMSEQ",7,7)

"KRN",8994,332,2,"PARAMSEQ",8,8)

"KRN",8994,332,3,0)
^8994.03^2^2^3150211^^^
"KRN",8994,332,3,1,0)
Fail    Y="-1^Error Message"
"KRN",8994,332,3,2,0)
Success Y="DUZ^DIVISION"
"KRN",8994,333,-1)
0^2
"KRN",8994,333,0)
XUS IAM EDIT USER^IAMEU^XUESSO3^1^R^^^^1^^0
"KRN",8994,333,1,0)
^^10^10^3150211^
"KRN",8994,333,1,1,0)
This restricted RPC is used exclusively by the Identity and Access 
"KRN",8994,333,1,2,0)
Management (IAM) Provisioning application to edit an existing user in the 
"KRN",8994,333,1,3,0)
VistA NEW PERSON file (#200).
"KRN",8994,333,1,4,0)
 
"KRN",8994,333,1,5,0)
The XUSHOWSSN Security Key is required to edit Personally Identifiable 
"KRN",8994,333,1,6,0)
Information (PII) such as Social Security Number (SSN) or Date of Birth 
"KRN",8994,333,1,7,0)
(DOB).
"KRN",8994,333,1,8,0)
 
"KRN",8994,333,1,9,0)
The XUSPF200 Security Key is required to edit a user without an SSN (file 
"KRN",8994,333,1,10,0)
#200 special privileges).
"KRN",8994,333,2,0)
^8994.02A^2^2
"KRN",8994,333,2,1,0)
INARRY^2^240^1^1
"KRN",8994,333,2,1,1,0)
^^1^1^3150128^
"KRN",8994,333,2,1,1,1,0)
The IAM RSD is unclear what the input data is or how it will be formatted.
"KRN",8994,333,2,2,0)
AUTHCODE^1^80^1^2
"KRN",8994,333,2,2,1,0)
^8994.021^1^1^3150211^^
"KRN",8994,333,2,2,1,1,0)
Security Phrase for IAM Provisioning Application.
"KRN",8994,333,2,"B","AUTHCODE",2)

"KRN",8994,333,2,"B","INARRY",1)

"KRN",8994,333,2,"PARAMSEQ",1,1)

"KRN",8994,333,2,"PARAMSEQ",2,2)

"KRN",8994,333,3,0)
^8994.03^2^2^3150211^^
"KRN",8994,333,3,1,0)
Fail    Y="-1^Error Message"
"KRN",8994,333,3,2,0)
Success Y=The IAM RSD is unclear what is expected of a successful edit.
"KRN",8994,334,-1)
0^3
"KRN",8994,334,0)
XUS IAM FIND USER^IAMFU^XUESSO3^2^R^^^^1^^0
"KRN",8994,334,1,0)
^8994.01^8^8^3150211^^^^
"KRN",8994,334,1,1,0)
This restricted RPC is used exclusively by the Identity and Access 
"KRN",8994,334,1,2,0)
Management (IAM) Provisioning application to find a list of users that 
"KRN",8994,334,1,3,0)
satisfy a collection of input criteria.
"KRN",8994,334,1,4,0)
 
"KRN",8994,334,1,5,0)
One or more of the input array values must be set by the calling 
"KRN",8994,334,1,6,0)
application. The XUSHOWSSN Security Key is required to do lookups using 
"KRN",8994,334,1,7,0)
Personally Identifiable Information (PII) such as Social Security Number 
"KRN",8994,334,1,8,0)
(SSN) or Date of Birth (DOB).
"KRN",8994,334,2,0)
^8994.02A^6^6
"KRN",8994,334,2,1,0)
NAME^1^35^0^1
"KRN",8994,334,2,1,1,0)
^^1^1^3150128^
"KRN",8994,334,2,1,1,1,0)
Search on user name.
"KRN",8994,334,2,2,0)
SSN^1^9^0^2
"KRN",8994,334,2,2,1,0)
^^2^2^3150210^
"KRN",8994,334,2,2,1,1,0)
Search on user Social Security Number (SSN). The user calling this RPC
"KRN",8994,334,2,2,1,2,0)
must hold the XUSHOWSSN Security Key to search using SSN.
"KRN",8994,334,2,3,0)
DOB^1^15^0^3
"KRN",8994,334,2,3,1,0)
^^2^2^3150210^
"KRN",8994,334,2,3,1,1,0)
Search on user Date of Birth (DOB). The user calling this RPC must hold 
"KRN",8994,334,2,3,1,2,0)
the XUSHOWSSN Security Key to search using DOB.
"KRN",8994,334,2,4,0)
ADUPN^1^50^0^4
"KRN",8994,334,2,4,1,0)
^8994.021^1^1^3150206^^
"KRN",8994,334,2,4,1,1,0)
Search on user Active Directory UPN.
"KRN",8994,334,2,5,0)
SECID^1^30^0^5
"KRN",8994,334,2,5,1,0)
^8994.021^1^1^3150210^^
"KRN",8994,334,2,5,1,1,0)
Search on user Security ID.
"KRN",8994,334,2,6,0)
AUTHCODE^1^80^1^6
"KRN",8994,334,2,6,1,0)
^8994.021^1^1^3150211^^^
"KRN",8994,334,2,6,1,1,0)
Security Phrase for IAM Provisioning Application.
"KRN",8994,334,2,"B","ADUPN",4)

"KRN",8994,334,2,"B","AUTHCODE",6)

"KRN",8994,334,2,"B","DOB",3)

"KRN",8994,334,2,"B","NAME",1)

"KRN",8994,334,2,"B","SECID",5)

"KRN",8994,334,2,"B","SSN",2)

"KRN",8994,334,2,"PARAMSEQ",1,1)

"KRN",8994,334,2,"PARAMSEQ",2,2)

"KRN",8994,334,2,"PARAMSEQ",3,3)

"KRN",8994,334,2,"PARAMSEQ",4,4)

"KRN",8994,334,2,"PARAMSEQ",5,5)

"KRN",8994,334,2,"PARAMSEQ",6,6)

"KRN",8994,334,3,0)
^8994.03^3^3^3150211^^^^
"KRN",8994,334,3,1,0)
Fail    R(0)="-1^Error Message"
"KRN",8994,334,3,2,0)
Success R(0)=total number of entries found, from "0" to "n".
"KRN",8994,334,3,3,0)
        R(1) through R(n)="DUZ^Name^SSN^Dob^AD UPN^SecID"
"KRN",8994,337,-1)
0^4
"KRN",8994,337,0)
XUS IAM DISPLAY USER^IAMDU^XUESSO3^2^R^^^^1^^0
"KRN",8994,337,1,0)
^8994.01^6^6^3150311^^
"KRN",8994,337,1,1,0)
This restricted PRC is used exclusively by the Identity and Access 
"KRN",8994,337,1,2,0)
Management (IAM) Provisioning application to display a VistA user.
"KRN",8994,337,1,3,0)
 
"KRN",8994,337,1,4,0)
The XUSHOWSSN Security Key is required to display Personally Identifiable 
"KRN",8994,337,1,5,0)
Information (PII) such as Social Security Number (SSN) or Date of Birth 
"KRN",8994,337,1,6,0)
(DOB).
"KRN",8994,337,2,0)
^8994.02A^2^2
"KRN",8994,337,2,1,0)
DISPDUZ^1^20^1^1
"KRN",8994,337,2,1,1,0)
^8994.021^1^1^3150210^^
"KRN",8994,337,2,1,1,1,0)
DUZ (IEN) of user to be displayed.
"KRN",8994,337,2,2,0)
AUTHCODE^1^80^1^2
"KRN",8994,337,2,2,1,0)
^8994.021^1^1^3150311^^^
"KRN",8994,337,2,2,1,1,0)
Security Phrase for IAM Provisioning Application.
"KRN",8994,337,2,"B","AUTHCODE",2)

"KRN",8994,337,2,"B","DISPDUZ",1)

"KRN",8994,337,2,"PARAMSEQ",1,1)

"KRN",8994,337,2,"PARAMSEQ",2,2)

"KRN",8994,337,3,0)
^^27^27^3150311^
"KRN",8994,337,3,1,0)
Fail    Y(0)  ="-1^Error Message"
"KRN",8994,337,3,2,0)
Success Y(0)  = 1
"KRN",8994,337,3,3,0)
        Y(1)  = NAME
"KRN",8994,337,3,4,0)
        Y(2)  = INITIAL
"KRN",8994,337,3,5,0)
        Y(3)  = TITLE
"KRN",8994,337,3,6,0)
        Y(4)  = NICK NAME
"KRN",8994,337,3,7,0)
        Y(5)  = SSN (<Hidden> if caller does not hold XUSHOWSSN key)
"KRN",8994,337,3,8,0)
        Y(6)  = DOB (<Hidden> if caller does not hold XUSHOWSSN key)
"KRN",8994,337,3,9,0)
        Y(7)  = DEGREE
"KRN",8994,337,3,10,0)
        Y(8)  = MAIL CODE
"KRN",8994,337,3,11,0)
        Y(9)  = DISUSER
"KRN",8994,337,3,12,0)
        Y(10) = TERMINATION DATE
"KRN",8994,337,3,13,0)
        Y(11) = TERMINATION REASON
"KRN",8994,337,3,14,0)
        Y(12) = PRIMARY MENU OPTION
"KRN",8994,337,3,15,0)
        Y(13,0) = SECONDARY MENU OPTION (number of entries)
"KRN",8994,337,3,16,0)
        Y(13,1) to Y(13,n) = SECONDARY MENU OPTION entries
"KRN",8994,337,3,17,0)
        Y(14) = FILE MANAGER ACCESS CODE
"KRN",8994,337,3,18,0)
        Y(15,0) = DIVISION (number of entries)
"KRN",8994,337,3,19,0)
        Y(15,1) to Y(15,n) = DIVISION entries
"KRN",8994,337,3,20,0)
        Y(16) = SERVICE/SECTION
"KRN",8994,337,3,21,0)
        Y(17) = SUBJECT ALTERNATIVE NAME (from PIV CARD)
"KRN",8994,337,3,22,0)
        Y(18) = SECID
"KRN",8994,337,3,23,0)
        Y(19) = SUBJECT ORGANIZATION
"KRN",8994,337,3,24,0)
        Y(20) = SUBJECT ORGANIZATION ID
"KRN",8994,337,3,25,0)
        Y(21) = UNIQUE USER ID
"KRN",8994,337,3,26,0)
        Y(22) = NETWORK USERNAME
"KRN",8994,337,3,27,0)
        Y(23) = AD UPN 
"KRN",8994,338,-1)
0^5
"KRN",8994,338,0)
XUS ESSO VALIDATE^ESSO^XUESSO3^2^R^^^^1^^0
"KRN",8994,338,1,0)
^^2^2^3150305^
"KRN",8994,338,1,1,0)
This API/RPC uses the VA Identity and Access Management (IAM) SAML token
"KRN",8994,338,1,2,0)
definition version 1.2 attributes from a SAML token for user sign-on.
"KRN",8994,338,2,0)
^8994.02A^1^1
"KRN",8994,338,2,1,0)
DOC^1^30^1^1
"KRN",8994,338,2,1,1,0)
^^4^4^3150305^
"KRN",8994,338,2,1,1,1,0)
Input:   DOC = Closed reference to global root containing XML document 
"KRN",8994,338,2,1,1,2,0)
               (loaded STS SAML Token). See $$EN^MXMLDOM instructions in
"KRN",8994,338,2,1,1,3,0)
               the VistA Kernel Developers Guide for required format of
"KRN",8994,338,2,1,1,4,0)
               the DOC global.
"KRN",8994,338,2,"B","DOC",1)

"KRN",8994,338,2,"PARAMSEQ",1,1)

"KRN",8994,338,3,0)
^8994.03^6^6^3150305^^^^
"KRN",8994,338,3,1,0)
R(1) = (0=OK, 1,2...=Can't sign on for some reason).
"KRN",8994,338,3,2,0)
R(2) = Verify Code needs changing.
"KRN",8994,338,3,3,0)
R(3) = Message.
"KRN",8994,338,3,4,0)
R(4) = 0
"KRN",8994,338,3,5,0)
R(5) = count of the number of lines of text, zero if none.
"KRN",8994,338,3,6,0)
R(5+n) = message text.
"KRN",8994,339,-1)
0^6
"KRN",8994,339,0)
XUS IAM BIND USER^IAMBU^XUESSO3^1^R^^^^1^^0
"KRN",8994,339,1,0)
^^3^3^3150311^
"KRN",8994,339,1,1,0)
This restricted RPC is used exclusively by the Identity and Access 
"KRN",8994,339,1,2,0)
Management (IAM) Binding application to set the Security ID (SecID) in 
"KRN",8994,339,1,3,0)
the VistA NEW PERSON file (#200) for Single Sign-On Internal (SSOi).
"KRN",8994,339,2,0)
^8994.02A^2^2
"KRN",8994,339,2,1,0)
SECID^1^40^1^1
"KRN",8994,339,2,1,1,0)
^^1^1^3150311^
"KRN",8994,339,2,1,1,1,0)
Unique Security ID [SecID, assigned by Identity and Access Management]
"KRN",8994,339,2,2,0)
AUTHCODE^1^80^1^2
"KRN",8994,339,2,2,1,0)
^^1^1^3150311^
"KRN",8994,339,2,2,1,1,0)
Security Phrase for IAM Binding Application
"KRN",8994,339,2,"B","AUTHCODE",2)

"KRN",8994,339,2,"B","SECID",1)

"KRN",8994,339,2,"PARAMSEQ",1,1)

"KRN",8994,339,2,"PARAMSEQ",2,2)

"KRN",8994,339,3,0)
^^2^2^3150311^
"KRN",8994,339,3,1,0)
Return: Fail    Y = "-1^Error Message"
"KRN",8994,339,3,2,0)
        Success Y = DUZ
"MBREQ")
0
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",6,.401)
.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"ORD",6,.401,0)
SORT TEMPLATE
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
655^3150331
"PKG",3,22,1,"PAH",1,1,0)
^^27^27^3150331
"PKG",3,22,1,"PAH",1,1,1,0)
Please see description of patch on FORUM.
"PKG",3,22,1,"PAH",1,1,2,0)
 
"PKG",3,22,1,"PAH",1,1,3,0)
This patch provides utilities to Identify and Authenticate VistA users
"PKG",3,22,1,"PAH",1,1,4,0)
from sources external to VistA.
"PKG",3,22,1,"PAH",1,1,5,0)
 
"PKG",3,22,1,"PAH",1,1,6,0)
Identity and Access Management (IAM)
"PKG",3,22,1,"PAH",1,1,7,0)
- Provide a centralized authentication service for single sign-on to 
"PKG",3,22,1,"PAH",1,1,8,0)
  multiple VA applications, including VistA and applications that access 
"PKG",3,22,1,"PAH",1,1,9,0)
  VistA.
"PKG",3,22,1,"PAH",1,1,10,0)
 
"PKG",3,22,1,"PAH",1,1,11,0)
VistA Service Assembler (VSA) 
"PKG",3,22,1,"PAH",1,1,12,0)
 
"PKG",3,22,1,"PAH",1,1,13,0)
VistA Integration Adapter (VIA)
"PKG",3,22,1,"PAH",1,1,14,0)
 
"PKG",3,22,1,"PAH",1,1,15,0)
VistA Access Enhancements (VAE)
"PKG",3,22,1,"PAH",1,1,16,0)
 
"PKG",3,22,1,"PAH",1,1,17,0)
Electronic Health Management Platform (eHMP)
"PKG",3,22,1,"PAH",1,1,18,0)
 
"PKG",3,22,1,"PAH",1,1,19,0)
VistA.js/EWD.js
"PKG",3,22,1,"PAH",1,1,20,0)
 
"PKG",3,22,1,"PAH",1,1,21,0)
RPC Broker
"PKG",3,22,1,"PAH",1,1,22,0)
 
"PKG",3,22,1,"PAH",1,1,23,0)
Veterans Access, Choice, and Accountability Act of 2014 (VACAA)
"PKG",3,22,1,"PAH",1,1,24,0)
- Public Law 9P. L.) 113-146, VACAA, which was enacted on August 7, 2014
"PKG",3,22,1,"PAH",1,1,25,0)
  and amended through the Department of Veterans Affairs Expiring
"PKG",3,22,1,"PAH",1,1,26,0)
  Authorities Act of 2014 (P.L. 113-175), improves the access of eligible
"PKG",3,22,1,"PAH",1,1,27,0)
  Veterans to health care through non-VA entities and providers.
"PRE")
XU8PE655
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
10
"RTN","XLFNAME")
0^5^B55907833^B54765617
"RTN","XLFNAME",1,0)
XLFNAME ;CIOFO-SF/TKW,MKO-Utilities for person name fields ;03/31/15  09:30
"RTN","XLFNAME",2,0)
 ;;8.0;KERNEL;**134,211,240,655**;Jul 10, 1995;Build 16
"RTN","XLFNAME",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XLFNAME",4,0)
 ;
"RTN","XLFNAME",5,0)
STDNAME(XUNAME,XUFLAG,XUAUD) ;Standardize name XUNAME
"RTN","XLFNAME",6,0)
 ; XUNAME - In, name to be standardized. Out, standardized name
"RTN","XLFNAME",7,0)
 ; XUFLAG - In, "C" : return components in XUNAME array
"RTN","XLFNAME",8,0)
 ;              "F" : Assume input is in general form
"RTN","XLFNAME",9,0)
 ;                     Family,Given Middle Suffix
"RTN","XLFNAME",10,0)
 ;              "G" : Don't return XUAUD("GIVEN")
"RTN","XLFNAME",11,0)
 ;              "P" : Remove parenthetical text
"RTN","XLFNAME",12,0)
 ;.XUAUD  - Out:
"RTN","XLFNAME",13,0)
 ;           XUAUD = original name passed in
"RTN","XLFNAME",14,0)
 ;           XUAUD(subsc)="" if problems
"RTN","XLFNAME",15,0)
 ;
"RTN","XLFNAME",16,0)
 N I,XUFAM,XUNM,XUOUT,XUMOV,XUREST,XUSP
"RTN","XLFNAME",17,0)
 S XUOUT=$G(XUFLAG)["C"
"RTN","XLFNAME",18,0)
 N:XUOUT XUFAMO,XURESTO
"RTN","XLFNAME",19,0)
 S XUNAME=$TR(XUNAME,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XLFNAME",20,0)
 K XUAUD S XUAUD=XUNAME
"RTN","XLFNAME",21,0)
 ;
"RTN","XLFNAME",22,0)
 F I="FAMILY","GIVEN","MIDDLE","SUFFIX" S XUNM(I)="" S:XUOUT XUOUT(I)=""
"RTN","XLFNAME",23,0)
 S:XUNAME?.E1" TEST" XUNAME=$E(XUNAME,1,$L(XUNAME)-5)
"RTN","XLFNAME",24,0)
 ;
"RTN","XLFNAME",25,0)
 I $G(XUFLAG)["P",XUNAME?.E1(1"(",1"[",1"{").E D
"RTN","XLFNAME",26,0)
 . S XUNAME=$$PARENS^XLFNAME1(XUNAME)
"RTN","XLFNAME",27,0)
 . S:XUAUD'=XUNAME XUAUD("STRIP")=""
"RTN","XLFNAME",28,0)
 ;
"RTN","XLFNAME",29,0)
 S:XUNAME?1"EEE".E!(XUNAME?.E1" FEE")!(XUNAME?1A1"-".E) XUAUD("NOTE")=""
"RTN","XLFNAME",30,0)
 ;
"RTN","XLFNAME",31,0)
 ;If no comma, assume given name first (also no "F")
"RTN","XLFNAME",32,0)
 I XUNAME'[",",$G(XUFLAG)'["F" G GIVFRST
"RTN","XLFNAME",33,0)
 ;
"RTN","XLFNAME",34,0)
 ;Standardize Family
"RTN","XLFNAME",35,0)
 ;(don't remove internal spaces or convert suffixes yet)
"RTN","XLFNAME",36,0)
 I $E(XUNAME,1,3)="ST." S XUAUD("FAMILY")=""
"RTN","XLFNAME",37,0)
 S XUFAM=$$CLEANC^XLFNAME1($P(XUNAME,","),"FI",.XUAUD)
"RTN","XLFNAME",38,0)
 S XUFAM=$$PUNC(XUFAM,.XUAUD)
"RTN","XLFNAME",39,0)
 D:XUOUT
"RTN","XLFNAME",40,0)
 . S XUFAMO=$$CLEANC^XLFNAME1($P(XUNAME,","),"FO",.XUAUD)
"RTN","XLFNAME",41,0)
 . S XUFAMO=$$PUNC(XUFAMO,.XUAUD)
"RTN","XLFNAME",42,0)
 ;
"RTN","XLFNAME",43,0)
 ;Look for suffixes at end of Family
"RTN","XLFNAME",44,0)
 D SUFEND^XLFNAME1(.XUFAM,.XUFAMO,.XUNM,.XUOUT,.XUAUD)
"RTN","XLFNAME",45,0)
 S:XUNM("SUFFIX")]"" XUAUD("SUFFIX")=""
"RTN","XLFNAME",46,0)
 S XUNM("FAMILY")=XUFAM S:XUOUT XUOUT("FAMILY")=XUFAMO
"RTN","XLFNAME",47,0)
 ;
"RTN","XLFNAME",48,0)
 ;Parse rest of name
"RTN","XLFNAME",49,0)
 S XUREST=$P(XUNAME,",",2,999)
"RTN","XLFNAME",50,0)
 S XUSP=XUREST?1" "1.E
"RTN","XLFNAME",51,0)
 D:XUOUT
"RTN","XLFNAME",52,0)
 . S XURESTO=$$CLEANC^XLFNAME1(XUREST,"O",.XUAUD)
"RTN","XLFNAME",53,0)
 . S XURESTO=$$PUNC(XUREST,.XUAUD)
"RTN","XLFNAME",54,0)
 S XUREST=$$CLEANC^XLFNAME1(XUREST,"I",.XUAUD)
"RTN","XLFNAME",55,0)
 S XUREST=$$PUNC(XUREST,.XUAUD)
"RTN","XLFNAME",56,0)
 D MOVSUF(.XUREST,.XUOUT,.XURESTO,.XUAUD,.XUMOV)
"RTN","XLFNAME",57,0)
 D N2(XUREST,.XUNM,.XUOUT,$G(XURESTO),.XUAUD)
"RTN","XLFNAME",58,0)
 ;
"RTN","XLFNAME",59,0)
 ;Account for names that look like only Family and Suffix(es)
"RTN","XLFNAME",60,0)
 I XUNM("MIDDLE")="",$$CHKSUF^XLFNAME1(XUNM("GIVEN"))]"" D
"RTN","XLFNAME",61,0)
 . N XUCNT,XUSUF1,XUSUF2
"RTN","XLFNAME",62,0)
 . I 'XUSP Q:$E(XUNM("GIVEN"))'?1N
"RTN","XLFNAME",63,0)
 . S XUCNT=$L(XUNM("SUFFIX")," ")
"RTN","XLFNAME",64,0)
 . S XUSUF1=$P(XUNM("SUFFIX")," ",XUCNT-XUMOV+1,XUCNT)
"RTN","XLFNAME",65,0)
 . S XUSUF2=$P(XUNM("SUFFIX")," ",1,XUCNT-XUMOV)
"RTN","XLFNAME",66,0)
 . S XUNM("SUFFIX")=$$JOIN($$JOIN(XUSUF1,$$ROMAN^XLFNAME1(XUNM("GIVEN"))),XUSUF2)
"RTN","XLFNAME",67,0)
 . S XUNM("GIVEN")=""
"RTN","XLFNAME",68,0)
 . D:XUOUT
"RTN","XLFNAME",69,0)
 .. S XUSUF1=$P(XUOUT("SUFFIX")," ",XUCNT-XUMOV+1,XUCNT)
"RTN","XLFNAME",70,0)
 .. S XUSUF2=$P(XUOUT("SUFFIX")," ",1,XUCNT-XUMOV)
"RTN","XLFNAME",71,0)
 .. S XUOUT("SUFFIX")=$$JOIN($$JOIN(XUSUF1,XUOUT("GIVEN")),XUSUF2)
"RTN","XLFNAME",72,0)
 .. S XUOUT("GIVEN")=""
"RTN","XLFNAME",73,0)
 ;
"RTN","XLFNAME",74,0)
 D BLDSTD(.XUNAME,.XUNM,.XUOUT,.XUAUD)
"RTN","XLFNAME",75,0)
 K:$G(XUFLAG)["G" XUAUD("GIVEN")
"RTN","XLFNAME",76,0)
 Q
"RTN","XLFNAME",77,0)
 ;
"RTN","XLFNAME",78,0)
BLDSTD(XUNAME,XUNM,XUOUT,XUAUD) ;Build standard name in XUNAME
"RTN","XLFNAME",79,0)
 ;Put components in XUNAME array
"RTN","XLFNAME",80,0)
 N I,J
"RTN","XLFNAME",81,0)
 K XUNAME M:XUOUT XUNAME=XUOUT
"RTN","XLFNAME",82,0)
 ;
"RTN","XLFNAME",83,0)
 S XUNAME=XUNM("FAMILY")_","
"RTN","XLFNAME",84,0)
 S:XUNAME[" " XUNAME=$TR(XUNAME," "),XUAUD("SPACE")=""
"RTN","XLFNAME",85,0)
 ;
"RTN","XLFNAME",86,0)
 I XUNM("GIVEN")]"" S XUNAME=XUNAME_XUNM("GIVEN")
"RTN","XLFNAME",87,0)
 E  S XUAUD("GIVEN")=""
"RTN","XLFNAME",88,0)
 S:XUNM("MIDDLE")]"" XUNAME=XUNAME_" "_XUNM("MIDDLE")
"RTN","XLFNAME",89,0)
 S:XUNM("SUFFIX")]"" XUNAME=XUNAME_" "_XUNM("SUFFIX")
"RTN","XLFNAME",90,0)
 S:XUNAME?.E1"," XUNAME=$E(XUNAME,1,$L(XUNAME)-1)
"RTN","XLFNAME",91,0)
 S:XUNAME?.E1N.E XUAUD("NUMBER")=""
"RTN","XLFNAME",92,0)
 ;
"RTN","XLFNAME",93,0)
 ;Remove spaces after periods, and ~ and ^, in name components
"RTN","XLFNAME",94,0)
 I XUOUT S I="" F  S I=$O(XUNAME(I)) Q:I=""  D
"RTN","XLFNAME",95,0)
 . S XUNAME(I)=$TR(XUNAME(I),"`^") Q:XUNAME(I)'[". "
"RTN","XLFNAME",96,0)
 . N J S J=0 F  S J=$F(XUNAME(I),". ",J) Q:'J  S $E(XUNAME(I),J-1)=""
"RTN","XLFNAME",97,0)
 Q
"RTN","XLFNAME",98,0)
 ;
"RTN","XLFNAME",99,0)
GIVFRST ;Come here if name has no comma.
"RTN","XLFNAME",100,0)
 N XUCNT,XUNAM,XUNAMO
"RTN","XLFNAME",101,0)
 ;
"RTN","XLFNAME",102,0)
 ;Do initial standardizing
"RTN","XLFNAME",103,0)
 S XUNAM=$$CLEANC^XLFNAME1(XUNAME,"I",.XUAUD)
"RTN","XLFNAME",104,0)
 S XUNAM=$$PUNC(XUNAME,.XUAUD)
"RTN","XLFNAME",105,0)
 D:XUOUT
"RTN","XLFNAME",106,0)
 . S XUNAMO=$$CLEANC^XLFNAME1(XUNAME,"O",.XUAUD)
"RTN","XLFNAME",107,0)
 . S XUNAMO=$$PUNC(XUNAMO,.XUAUD)
"RTN","XLFNAME",108,0)
 ;
"RTN","XLFNAME",109,0)
 ;Look for suffixes at end
"RTN","XLFNAME",110,0)
 D SUFEND^XLFNAME1(.XUNAM,.XUNAMO,.XUNM,.XUOUT,.XUAUD)
"RTN","XLFNAME",111,0)
 S XUCNT=$L(XUNAM," ")
"RTN","XLFNAME",112,0)
 ;
"RTN","XLFNAME",113,0)
 ;If name contains only suffixes, make first suffix the Family Name
"RTN","XLFNAME",114,0)
 I XUCNT=0 D  Q
"RTN","XLFNAME",115,0)
 . S XUNM("FAMILY")=$P(XUNM("SUFFIX")," ")
"RTN","XLFNAME",116,0)
 . S XUNM("SUFFIX")=$P(XUNM("SUFFIX")," ",2,999)
"RTN","XLFNAME",117,0)
 . S:$G(XUFLAG)'["G" XUAUD("GIVEN")=""
"RTN","XLFNAME",118,0)
 . D:XUOUT
"RTN","XLFNAME",119,0)
 .. S XUOUT("FAMILY")=$P(XUOUT("SUFFIX")," ")
"RTN","XLFNAME",120,0)
 .. S XUOUT("SUFFIX")=$P(XUOUT("SUFFIX")," ",2,999)
"RTN","XLFNAME",121,0)
 . D BLDSTD(.XUNAME,.XUNM,.XUOUT,.XUAUD)
"RTN","XLFNAME",122,0)
 ;
"RTN","XLFNAME",123,0)
 ;Set Family and rest of name
"RTN","XLFNAME",124,0)
 S XUNM("FAMILY")=$P(XUNAM," ",XUCNT),XUREST=$P(XUNAM," ",1,XUCNT-1)
"RTN","XLFNAME",125,0)
 S:XUOUT XUOUT("FAMILY")=$P(XUNAMO," ",XUCNT),XURESTO=$P(XUNAMO," ",1,XUCNT-1)
"RTN","XLFNAME",126,0)
 ;
"RTN","XLFNAME",127,0)
 ;Process rest of name (don't look for suffixes)
"RTN","XLFNAME",128,0)
 D N2(XUREST,.XUNM,.XUOUT,$G(XURESTO),.XUAUD,"s")
"RTN","XLFNAME",129,0)
 D BLDSTD(.XUNAME,.XUNM,.XUOUT,.XUAUD)
"RTN","XLFNAME",130,0)
 K:$G(XUFLAG)["G" XUAUD("GIVEN")
"RTN","XLFNAME",131,0)
 Q
"RTN","XLFNAME",132,0)
 ;
"RTN","XLFNAME",133,0)
NAMECOMP(XUNM) ;Build components from standard name
"RTN","XLFNAME",134,0)
 S XUNM("FAMILY")=$P(XUNM,",")
"RTN","XLFNAME",135,0)
 D N2($P(XUNM,",",2,999),.XUNM)
"RTN","XLFNAME",136,0)
 S XUNM("MIDDLE")=$G(XUNM("MIDDLE"))
"RTN","XLFNAME",137,0)
 S XUNM("SUFFIX")=$G(XUNM("SUFFIX"))
"RTN","XLFNAME",138,0)
 Q
"RTN","XLFNAME",139,0)
 ;
"RTN","XLFNAME",140,0)
MOVSUF(XUREST,XUOUT,XURESTO,XUAUD,XUMOV) ;Move suffixes immediately in front to the end
"RTN","XLFNAME",141,0)
 N XUI,XUCNT
"RTN","XLFNAME",142,0)
 S XUCNT=$L(XUREST," "),XUMOV=0
"RTN","XLFNAME",143,0)
 F XUI=1:1:XUCNT I $$CHKSUF1^XLFNAME1($P(XUREST," ",XUI))="" S XUI=XUI-1 Q
"RTN","XLFNAME",144,0)
 I XUI,XUI<XUCNT D
"RTN","XLFNAME",145,0)
 . S XUMOV=XUI
"RTN","XLFNAME",146,0)
 . S XUREST=$P(XUREST," ",XUI+1,999)_" "_$P(XUREST," ",1,XUI)
"RTN","XLFNAME",147,0)
 . S:XUOUT XURESTO=$P(XURESTO," ",XUI+1,999)_" "_$P(XURESTO," ",1,XUI)
"RTN","XLFNAME",148,0)
 . S XUAUD("SUFFIX")=""
"RTN","XLFNAME",149,0)
 Q
"RTN","XLFNAME",150,0)
 ;
"RTN","XLFNAME",151,0)
PUNC(XUNAME,XUAUD) ;Remove name pieces that are purely punctuation
"RTN","XLFNAME",152,0)
 N XUC,XUI,XUNEW
"RTN","XLFNAME",153,0)
 S XUNEW=""
"RTN","XLFNAME",154,0)
 F XUI=1:1:$L(XUNAME," ") D
"RTN","XLFNAME",155,0)
 . S XUC=$P(XUNAME," ",XUI)
"RTN","XLFNAME",156,0)
 . I XUC?1.P S:XUC'?1."." XUAUD("PUNC")="" Q
"RTN","XLFNAME",157,0)
 . S XUNEW=$$JOIN(XUNEW,XUC)
"RTN","XLFNAME",158,0)
 Q XUNEW
"RTN","XLFNAME",159,0)
 ;
"RTN","XLFNAME",160,0)
N2(XUREST,XUNM,XUOUT,XURESTO,XUAUD,XUFLAG) ;Build components from non-family name
"RTN","XLFNAME",161,0)
 N XUCNT,XUGIVEN,XUI,XUMIDDLE,XUSUF,XUSUFFIX,XUX,X
"RTN","XLFNAME",162,0)
 S XUOUT=$G(XUOUT) N:XUOUT XUGIVENO,XUMIDO,XUSUFO,XUXO
"RTN","XLFNAME",163,0)
 S XUCNT=$L(XUREST," ")
"RTN","XLFNAME",164,0)
 ;
"RTN","XLFNAME",165,0)
 ;Get Given from 1st space-piece, quit if only name
"RTN","XLFNAME",166,0)
 S XUNM("GIVEN")=$P(XUREST," ") S:XUOUT XUOUT("GIVEN")=$P(XURESTO," ")
"RTN","XLFNAME",167,0)
 Q:XUCNT<2
"RTN","XLFNAME",168,0)
 ;
"RTN","XLFNAME",169,0)
 S (XUSUF,XUMIDDLE,XUGIVEN)="" S:XUOUT (XUSUFO,XUMIDO,XUGIVENO)=""
"RTN","XLFNAME",170,0)
 ;
"RTN","XLFNAME",171,0)
 F XUI=XUCNT:-1:2 D
"RTN","XLFNAME",172,0)
 . S XUX=$P(XUREST," ",XUI)
"RTN","XLFNAME",173,0)
 . S:XUOUT XUXO=$P(XURESTO," ",XUI)
"RTN","XLFNAME",174,0)
 . ;
"RTN","XLFNAME",175,0)
 . ;If no middle yet, check for suffix
"RTN","XLFNAME",176,0)
 . I XUMIDDLE="",$G(XUFLAG)'["s" D  Q:XUSUFFIX]""
"RTN","XLFNAME",177,0)
 .. S XUSUFFIX=""
"RTN","XLFNAME",178,0)
 .. I XUI=2,"I^V^X"[XUX S XUAUD("SUFFIX")="" Q
"RTN","XLFNAME",179,0)
 .. I XUI>2,XUX="D",$P(XUREST," ",XUI-1)="M" S XUAUD("SUFFIX")="" Q
"RTN","XLFNAME",180,0)
 .. S XUSUFFIX=$$CHKSUF^XLFNAME1(XUX) Q:XUSUFFIX=""
"RTN","XLFNAME",181,0)
 .. S X=XUSUFFIX,XUSUFFIX=$$ROMAN^XLFNAME1(XUSUFFIX)
"RTN","XLFNAME",182,0)
 .. I XUI=2,X=XUSUFFIX S XUAUD("SUFFIX")=""
"RTN","XLFNAME",183,0)
 .. S XUSUF=$$JOIN(XUSUFFIX,XUSUF)
"RTN","XLFNAME",184,0)
 .. S:XUOUT XUSUFO=$$JOIN(XUXO,XUSUFO)
"RTN","XLFNAME",185,0)
 . ;
"RTN","XLFNAME",186,0)
 . ;If not suffix, and no middle, set middle
"RTN","XLFNAME",187,0)
 . I XUMIDDLE="" S XUMIDDLE=XUX S:XUOUT XUMIDO=XUXO Q
"RTN","XLFNAME",188,0)
 . ;
"RTN","XLFNAME",189,0)
 . ;Otherwise, put in Given
"RTN","XLFNAME",190,0)
 . S:XUI=2 XUAUD("MIDDLE")=""
"RTN","XLFNAME",191,0)
 . S XUGIVEN=$$JOIN(XUX,XUGIVEN)
"RTN","XLFNAME",192,0)
 . S:XUOUT XUGIVENO=$$JOIN(XUXO,XUGIVENO)
"RTN","XLFNAME",193,0)
 ;
"RTN","XLFNAME",194,0)
 D:XUSUF]""
"RTN","XLFNAME",195,0)
 . S XUNM("SUFFIX")=$$JOIN($G(XUNM("SUFFIX")),XUSUF)
"RTN","XLFNAME",196,0)
 . S:XUOUT XUOUT("SUFFIX")=$$JOIN($G(XUOUT("SUFFIX")),XUSUFO)
"RTN","XLFNAME",197,0)
 ;
"RTN","XLFNAME",198,0)
 S XUNM("MIDDLE")=XUMIDDLE
"RTN","XLFNAME",199,0)
 S:XUOUT XUOUT("MIDDLE")=XUMIDO
"RTN","XLFNAME",200,0)
 D:"^NMI^NMN^"[(U_XUNM("MIDDLE")_U)
"RTN","XLFNAME",201,0)
 . S XUNM("MIDDLE")="" S:XUOUT XUOUT("MIDDLE")=""
"RTN","XLFNAME",202,0)
 . S XUAUD("NM")=""
"RTN","XLFNAME",203,0)
 ;
"RTN","XLFNAME",204,0)
 D:XUGIVEN]""
"RTN","XLFNAME",205,0)
 . S XUNM("GIVEN")=XUNM("GIVEN")_" "_XUGIVEN
"RTN","XLFNAME",206,0)
 . S:XUOUT XUOUT("GIVEN")=XUOUT("GIVEN")_" "_XUGIVENO
"RTN","XLFNAME",207,0)
 Q
"RTN","XLFNAME",208,0)
 ;
"RTN","XLFNAME",209,0)
JOIN(S1,S2) ;Return S1 joined with S2 (separate by a space)
"RTN","XLFNAME",210,0)
 Q $G(S1)_$E(" ",$G(S1)]""&($G(S2)]""))_$G(S2)
"RTN","XLFNAME",211,0)
 ;
"RTN","XLFNAME",212,0)
NAMEFMT(XUNAME,XUFMT,XUFLAG,XUDLM) ;Name formatting routine
"RTN","XLFNAME",213,0)
 G NAMEFMTX^XLFNAME1
"RTN","XLFNAME",214,0)
 ;
"RTN","XLFNAME",215,0)
CLEANC(XUPART,XUFLAG,XUAUD) ;Component standardization
"RTN","XLFNAME",216,0)
 G CLEANCX^XLFNAME1
"RTN","XLFNAME",217,0)
 ;
"RTN","XLFNAME",218,0)
BLDNAME(XUNC,XUMAX) ;Build standard name from components
"RTN","XLFNAME",219,0)
 Q $$NAMEFMT(.XUNC,"F","CSL"_+$G(XUMAX))
"RTN","XLFNAME",220,0)
 ;
"RTN","XLFNAME",221,0)
HLNAME(XUNAME,XUFLAG,XUDLM) ;Convert name to HL7 format
"RTN","XLFNAME",222,0)
 N XUF
"RTN","XLFNAME",223,0)
 S XUF=$E("S",$G(XUFLAG)["S")
"RTN","XLFNAME",224,0)
 S:$G(XUFLAG)["L" XUF=XUF_"L"_+$P(XUFLAG,"L",2)
"RTN","XLFNAME",225,0)
 Q $$NAMEFMT^XLFNAME(.XUNAME,"H",XUF,$G(XUDLM))
"RTN","XLFNAME",226,0)
 ;
"RTN","XLFNAME",227,0)
FMNAME(XUNAME,XUFLAG,XUDLM) ;Convert HL7 name string to standard name or name components
"RTN","XLFNAME",228,0)
 G F^XLFNAME6
"RTN","XLFNAME",229,0)
 ;
"RTN","XLFNAME",230,0)
PRE ;Pre-install for patch XU*8.0*134
"RTN","XLFNAME",231,0)
 G PRE^XLFNAME3
"RTN","XLFNAME",232,0)
 ;
"RTN","XLFNAME",233,0)
POST ;Post-install for XU*8.0*134 (conversion)
"RTN","XLFNAME",234,0)
 G POST^XLFNAME3
"RTN","XLFNAME",235,0)
 ;
"RTN","XLFNAME",236,0)
GENERATE ;Generate information in ^XTMP about changes that will take
"RTN","XLFNAME",237,0)
 ;place when CONVERT^XLFNAME is run
"RTN","XLFNAME",238,0)
 G GENERATE^XLFNAME5
"RTN","XLFNAME",239,0)
 ;
"RTN","XLFNAME",240,0)
PRINT ;Print the information in ^XTMP
"RTN","XLFNAME",241,0)
 G PRINT^XLFNAME4
"RTN","XLFNAME",242,0)
 ;
"RTN","XLFNAME",243,0)
CONVERT ;Convert the Names in the New Person file
"RTN","XLFNAME",244,0)
 G CONVERT^XLFNAME5
"RTN","XU8PE655")
0^10^B53655876^n/a
"RTN","XU8PE655",1,0)
XU8PE655 ;ISD/HGW Patch XU*8*655 Environment Check Routine ;03/26/15  12:04
"RTN","XU8PE655",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XU8PE655",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XU8PE655",4,0)
 ;
"RTN","XU8PE655",5,0)
ENV ; Environment Check
"RTN","XU8PE655",6,0)
 ;
"RTN","XU8PE655",7,0)
 ;   General
"RTN","XU8PE655",8,0)
 ;
"RTN","XU8PE655",9,0)
 N XUXPTYPE,XUXLREV,XUXREQP,XUXBUILD,XUXIGHF,XUXFY,XUXQTR,XUXG,XUXB,XUXE,XUXR,XUXSTR,XUXOK
"RTN","XU8PE655",10,0)
 D IMP
"RTN","XU8PE655",11,0)
 K XPDDIQ("XPZ1","B"),XPDDIQ("XPI1","B") S XPDDIQ("XPZ1","B")="NO",XPDDIQ("XPI1","B")="NO"
"RTN","XU8PE655",12,0)
 S XUXSTR=$G(XUXPTYPE)
"RTN","XU8PE655",13,0)
 D BM(XUXSTR),M("")
"RTN","XU8PE655",14,0)
 S U="^"
"RTN","XU8PE655",15,0)
 ;     No user
"RTN","XU8PE655",16,0)
 D:+($$UR)'>0 ET("User not defined (DUZ)")
"RTN","XU8PE655",17,0)
 ;     No IO
"RTN","XU8PE655",18,0)
 D:+($$SY)'>0 ET("Undefined IO variable(s)")
"RTN","XU8PE655",19,0)
 I $D(XUXE) D ABRT Q
"RTN","XU8PE655",20,0)
 ;
"RTN","XU8PE655",21,0)
 ;   Load Distribution
"RTN","XU8PE655",22,0)
 ;
"RTN","XU8PE655",23,0)
 ;     XPDENV = 0 Environment Check during Load
"RTN","XU8PE655",24,0)
 ;
"RTN","XU8PE655",25,0)
 N XUXOK,XUXG,XUXR,XUXB
"RTN","XU8PE655",26,0)
 ;       Check Required Patches
"RTN","XU8PE655",27,0)
 D:$O(XUXREQP(0))'>0 IMP I $O(XUXREQP(0))>0 D
"RTN","XU8PE655",28,0)
 . W ! N XUXPAT,XUXI,XUXPN,XUXP,XUXR,XUXC,XUXO,XUXC1,XUXC2,XUXC3,XUXC4,XUX
"RTN","XU8PE655",29,0)
 . S (XUXR,XUXC)=0 S XUXC1=3,XUXC2=23,XUXC3=35,XUXC4=47
"RTN","XU8PE655",30,0)
 . S XUXI=0  F  S XUXI=$O(XUXREQP(XUXI)) Q:+XUXI'>0  D
"RTN","XU8PE655",31,0)
 . . S XUXC=XUXC+1,XUXPAT=$G(XUXREQP(XUXI))
"RTN","XU8PE655",32,0)
 . S XUXI=0  F  S XUXI=$O(XUXREQP(XUXI)) Q:+XUXI'>0  D
"RTN","XU8PE655",33,0)
 . . N XUXPAT,XUXREL,XUXINS,XUXCOM,XUXINE,XUXREQ,XUXTX S XUXREQ=$G(XUXREQP(XUXI))
"RTN","XU8PE655",34,0)
 . . S XUXPAT=$P(XUXREQ,"^",1),XUXREL=$P(XUXREQ,"^",2),XUXCOM=$P(XUXREQ,"^",3)
"RTN","XU8PE655",35,0)
 . . S XUXPN=$$INS(XUXPAT) S XUXINS=$$INSD(XUXPAT),XUXINE=$P(XUXINS,"^",2)
"RTN","XU8PE655",36,0)
 . . I XUXI=1 D
"RTN","XU8PE655",37,0)
 . . . W !,?XUXC1,"Checking for ",!
"RTN","XU8PE655",38,0)
 . . . W !,?XUXC1,"Patch",?XUXC2,"Released",?XUXC3,"Installed",?XUXC4,"Content"
"RTN","XU8PE655",39,0)
 . . S XUXTX=$J(" ",XUXC1)_XUXPAT
"RTN","XU8PE655",40,0)
 . . S XUXTX=XUXTX_$J(" ",(XUXC2-$L(XUXTX)))
"RTN","XU8PE655",41,0)
 . . S:XUXREL?7N XUXTX=XUXTX_$P($$FMTE^XLFDT(XUXREL,"5DZ"),"@",1)
"RTN","XU8PE655",42,0)
 . . S XUXTX=XUXTX_$J(" ",(XUXC3-$L(XUXTX)))
"RTN","XU8PE655",43,0)
 . . I +XUXPN>0 D
"RTN","XU8PE655",44,0)
 . . . H 1 S XUXO=+($G(XUXO))+1 S:$L($G(XUXINE)) XUXTX=XUXTX_XUXINE
"RTN","XU8PE655",45,0)
 . . . S XUXTX=XUXTX_$J(" ",(XUXC4-$L(XUXTX)))
"RTN","XU8PE655",46,0)
 . . . S:$L(XUXCOM) XUXTX=XUXTX_XUXCOM
"RTN","XU8PE655",47,0)
 . . D M(XUXTX)
"RTN","XU8PE655",48,0)
 . . I +XUXPN'>0 D ET((" "_XUXPAT_" not found, please install "_XUXPAT_" before continuing"))
"RTN","XU8PE655",49,0)
 . W:+($G(XUXO))'=XUXC !
"RTN","XU8PE655",50,0)
 I $D(XUXE) D M(),ABRT Q
"RTN","XU8PE655",51,0)
 ;
"RTN","XU8PE655",52,0)
 I '$$PROD^XUPROD D QUIT Q  ;Quit if test account, no need to load global
"RTN","XU8PE655",53,0)
 ;
"RTN","XU8PE655",54,0)
 S XUXG=$$RGBL
"RTN","XU8PE655",55,0)
 I $D(XUXE)&(+XUXG=0) D ABRT Q
"RTN","XU8PE655",56,0)
 I $D(XUXE)&(+XUXG<0) D ABRT Q
"RTN","XU8PE655",57,0)
 I '$D(XUXFULL)&(+($G(XPDENV))'=1) D QUIT Q
"RTN","XU8PE655",58,0)
 ;
"RTN","XU8PE655",59,0)
 ;   Quit, Exit or Abort
"RTN","XU8PE655",60,0)
 ;
"RTN","XU8PE655",61,0)
QUIT ;     Quit   Passed Environment Check
"RTN","XU8PE655",62,0)
 K XUXFULL D OK
"RTN","XU8PE655",63,0)
 I $G(XPDENV)=1 S XPDDIQ("XPZ1")=0 ;Do not disable options/protocols
"RTN","XU8PE655",64,0)
 Q
"RTN","XU8PE655",65,0)
EXIT ;     Exit   Failed Environment Check
"RTN","XU8PE655",66,0)
 D:$D(XUXE) ED S XPDQUIT=2 K XUXE,XUXFULL Q
"RTN","XU8PE655",67,0)
ABRT ;     Abort  Failed Environment Check, KILL the distribution
"RTN","XU8PE655",68,0)
 D:$D(XUXE) ED S XPDABORT=1,XPDQUIT=1 S:$L($G(XUXBUILD)) XPDQUIT(XUXBUILD)=1
"RTN","XU8PE655",69,0)
 K XUXE,XUXFULL
"RTN","XU8PE655",70,0)
 Q
"RTN","XU8PE655",71,0)
T1 ; Environment Check #1 (for testing only)
"RTN","XU8PE655",72,0)
 K XPDENV D ENV
"RTN","XU8PE655",73,0)
 Q
"RTN","XU8PE655",74,0)
T2 ; Environment Check #2 (for testing only)
"RTN","XU8PE655",75,0)
 N XPDENV S XPDENV=1 D ENV
"RTN","XU8PE655",76,0)
 Q
"RTN","XU8PE655",77,0)
 ;
"RTN","XU8PE655",78,0)
 ; Checks
"RTN","XU8PE655",79,0)
 ;
"RTN","XU8PE655",80,0)
RGBL(X) ;   Check for required globals
"RTN","XU8PE655",81,0)
 N XUXCPD,XUXS,XUXI,XUXX,XUXEC,XUXGBL,XUXRT,XUXT,XUXF,XUXB1,XUXB2
"RTN","XU8PE655",82,0)
 S XUXCPD=$$CPD,XUXS="",X=1 F XUXI=1:1 D  Q:'$L(XUXX)
"RTN","XU8PE655",83,0)
 . S XUXX="" S XUXEC="S XUXX=$T(GD+"_XUXI_")" X XUXEC S XUXX=$$TRIM(XUXX) Q:'$L(XUXX)  Q:'$L($TR(XUXX,";",""))
"RTN","XU8PE655",84,0)
 . S XUXGBL=$P(XUXX,";",3) Q:+XUXCPD>0&(XUXGBL="^XUXM(0)")  S XUXRT=$P(XUXX,";",4),XUXT=$P(XUXX,";",5),XUXF=$P(XUXX,";",6)
"RTN","XU8PE655",85,0)
 . S (XUXB1,XUXB2)="",$P(XUXB1," ",(15-$L(XUXRT)))="",$P(XUXB2," ",(28-$L(XUXT)))=""
"RTN","XU8PE655",86,0)
 . I '$D(@XUXGBL) S:XUXS'[XUXRT XUXS=XUXS_", "_XUXRT S X=-1 S:XUXGBL["XUXM("&(X=1) X=0
"RTN","XU8PE655",87,0)
 I $L(XUXS),X'>0 D
"RTN","XU8PE655",88,0)
 . S:XUXS[", " XUXS=$P(XUXS,", ",1,($L(XUXS,", ")-1))_" and "_$P(XUXS,", ",$L(XUXS,", "))
"RTN","XU8PE655",89,0)
 . S:$E(XUXS,1,2)=", " XUXS=$E(XUXS,3,$L(XUXS)) S:$E(XUXS,1,7)[" and " XUXS=$P(XUXS," and ",2)
"RTN","XU8PE655",90,0)
 . D:X=-1 ET(("Global"_$S(XUXS[", "!(XUXS[" and "):"s",1:"")_" "_XUXS_" either not found or incomplete."))
"RTN","XU8PE655",91,0)
 . D:X=0 CM
"RTN","XU8PE655",92,0)
 Q X
"RTN","XU8PE655",93,0)
INS(X) ;   Installed
"RTN","XU8PE655",94,0)
 N XUX,XUXP,XUXV,XUXI,XUXS S XUX=$P($G(X)," ",1) I $L(XUX,"*")=3 S X=$$PATCH^XPDUTL(XUX) Q X
"RTN","XU8PE655",95,0)
 S XUXP=$$PKG^XPDUTL(XUX),XUXV=$$VER^XPDUTL(XUX),XUXI=$$VERSION^XPDUTL(XUXP)
"RTN","XU8PE655",96,0)
 Q:+XUXV>0&(XUXV=XUXI) 1
"RTN","XU8PE655",97,0)
 Q 0
"RTN","XU8PE655",98,0)
INSD(X)  ;   Installed on
"RTN","XU8PE655",99,0)
 N DA,XUX,XUXDA,XUXE,XUXI,XUXMSG,XUXNS,XUXOUT,XUXPI,XUXPN,XUXSCR,XUXVI,XUXVD,XUXVI,XUXVR S XUX=$G(X)
"RTN","XU8PE655",100,0)
 S XUXNS=$$PKG^XPDUTL(XUX),XUXVR=$$VER^XPDUTL(XUX),XUXPN=$P(X,"*",3)
"RTN","XU8PE655",101,0)
 Q:'$L(XUXNS) ""  S XUXVR=+XUXVR Q:XUXVR'>0 ""  S XUXPN=+XUXPN S:XUXVR'["." XUXVR=XUXVR_".0"
"RTN","XU8PE655",102,0)
 S XUXSCR="I $G(^DIC(9.4,+($G(Y)),""VERSION""))="""_XUXVR_""""
"RTN","XU8PE655",103,0)
 D FIND^DIC(9.4,,.01,"O",XUXNS,10,"C",XUXSCR,,"XUXOUT","XUXMSG")
"RTN","XU8PE655",104,0)
 S XUXPI=$G(XUXOUT("DILIST",2,1)) K XUXOUT,XUXMSG Q:+XUXPI'>0 ""  Q:'$D(@("^DIC(9.4,"_XUXPI_",22)")) ""
"RTN","XU8PE655",105,0)
 K DA S DA(1)=XUXPI S XUXDA=$$IENS^DILF(.DA)
"RTN","XU8PE655",106,0)
 D FIND^DIC(9.49,XUXDA,".01;1I;2I","O",XUXVR,10,"B",,,"XUXOUT","XUXMSG")
"RTN","XU8PE655",107,0)
 S XUXVD=$G(XUXOUT("DILIST","ID",1,2)) I $E(XUXVD,1,7)?7N&(+XUXPN'>0) D  Q X
"RTN","XU8PE655",108,0)
 . S X=$E(XUXVD,1,7)_"^"_$TR($$FMTE^XLFDT($E(XUXVD,1,7),"5DZ"),"@"," ")
"RTN","XU8PE655",109,0)
 S:$E(XUXVD,1,7)'?7N XUXVD=$G(XUXOUT("DILIST","ID",1,1)) I $E(XUXVD,1,7)?7N&(+XUXPN'>0) D  Q X
"RTN","XU8PE655",110,0)
 . S X=$E(XUXVD,1,7)_"^"_$TR($$FMTE^XLFDT($E(XUXVD,1,7),"5DZ"),"@"," ")
"RTN","XU8PE655",111,0)
 Q:+XUXPN'>0 ""  S XUXVI=$G(XUXOUT("DILIST",2,1)) K XUXOUT,XUXMSG
"RTN","XU8PE655",112,0)
 Q:+XUXVI'>0 ""  Q:'$D(@("^DIC(9.4,"_XUXPI_",22,"_XUXVI_",""PAH"")")) ""
"RTN","XU8PE655",113,0)
 K DA S DA(2)=XUXPI,DA(1)=XUXVI S XUXDA=$$IENS^DILF(.DA)
"RTN","XU8PE655",114,0)
 S XUXSCR="I $G(^DIC(9.4,"_XUXPI_",22,"_XUXVI_",""PAH"",+($G(Y)),0))[""SEQ #"""
"RTN","XU8PE655",115,0)
 D FIND^DIC(9.4901,XUXDA,".01;.02I",,XUXPN,10,"B",XUXSCR,,"XUXOUT","XUXMSG")
"RTN","XU8PE655",116,0)
 S XUXI=$G(XUXOUT("DILIST","ID",1,.02)) I '$L(XUXI) D
"RTN","XU8PE655",117,0)
 . S XUXSCR="" D FIND^DIC(9.4901,XUXDA,".01;.02I",,XUXPN,10,"B",XUXSCR,,"XUXOUT","XUXMSG")
"RTN","XU8PE655",118,0)
 . S XUXI=$G(XUXOUT("DILIST","ID",1,.02))
"RTN","XU8PE655",119,0)
 Q:'$L(XUXI) ""  Q:$P(XUXI,".",1)'?7N ""  S XUXE=$TR($$FMTE^XLFDT(XUXI,"5DZ"),"@"," ")
"RTN","XU8PE655",120,0)
 Q:'$L(XUXE) ""  S X=XUXI_"^"_XUXE
"RTN","XU8PE655",121,0)
 Q X
"RTN","XU8PE655",122,0)
SY(X) ;   Check System variables
"RTN","XU8PE655",123,0)
 Q:'$D(IO)!('$D(IOF))!('$D(IOM))!('$D(ION))!('$D(IOSL))!('$D(IOST)) 0
"RTN","XU8PE655",124,0)
 Q 1
"RTN","XU8PE655",125,0)
UR(X) ;   Check User variables
"RTN","XU8PE655",126,0)
 Q:'$L($G(DUZ(0))) 0
"RTN","XU8PE655",127,0)
 Q:+($G(DUZ))=0!($$NOTDEF(+$G(DUZ))) 0
"RTN","XU8PE655",128,0)
 Q 1
"RTN","XU8PE655",129,0)
CPD(X) ;   Check Current Patched Data is installed
"RTN","XU8PE655",130,0)
 N INS S INS=1
"RTN","XU8PE655",131,0)
 Q 0
"RTN","XU8PE655",132,0)
 ;
"RTN","XU8PE655",133,0)
 ; Error messages
"RTN","XU8PE655",134,0)
 ;
"RTN","XU8PE655",135,0)
CM ;   Missing ^XU8P655
"RTN","XU8PE655",136,0)
 N XUXPTYPE,XUXLREV,XUXREQP,XUXBUILD,XUXIGHF,XUXFY,XUXQTR D IMP D ET(""),ET("Missing import global ^XU8P655.") D CO
"RTN","XU8PE655",137,0)
 Q
"RTN","XU8PE655",138,0)
CO ;   Obtain new global
"RTN","XU8PE655",139,0)
 N XUXPTYPE,XUXLREV,XUXREQP,XUXBUILD,XUXIGHF,XUXFY,XUXQTR D IMP
"RTN","XU8PE655",140,0)
 D ET(""),ET("    Please obtain a copy of the import global ^XU8P655 contained in the ")
"RTN","XU8PE655",141,0)
 D ET(("    global host file "_XUXIGHF_" before continuing with the "_XUXBUILD))
"RTN","XU8PE655",142,0)
 D ET(("    installation."))
"RTN","XU8PE655",143,0)
 Q
"RTN","XU8PE655",144,0)
ET(X) ;   Error Text
"RTN","XU8PE655",145,0)
 N XUXI S XUXI=+($G(XUXE(0))),XUXI=XUXI+1,XUXE(XUXI)="    "_$G(X),XUXE(0)=XUXI
"RTN","XU8PE655",146,0)
 Q
"RTN","XU8PE655",147,0)
ED ;   Error Display
"RTN","XU8PE655",148,0)
 N XUXI S XUXI=0 F  S XUXI=$O(XUXE(XUXI)) Q:+XUXI=0  D M(XUXE(XUXI))
"RTN","XU8PE655",149,0)
 D M(" ") K XUXE Q
"RTN","XU8PE655",150,0)
 ;
"RTN","XU8PE655",151,0)
 ; Miscellaneous
"RTN","XU8PE655",152,0)
 ;
"RTN","XU8PE655",153,0)
NOTDEF(IEN) ;   Check to see if user is defined
"RTN","XU8PE655",154,0)
 N DA,DR,DIQ,XUX,DIC S DA=IEN,DR=.01,DIC=200,DIQ="XUX" D EN^DIQ1 Q '$D(XUX)
"RTN","XU8PE655",155,0)
OK ;   Environment is OK
"RTN","XU8PE655",156,0)
 N XUXPTYPE,XUXLREV,XUXREQP,XUXBUILD,XUXIGHF,XUXFY,XUXQTR,XUXT
"RTN","XU8PE655",157,0)
 D IMP S XUXT="  Environment "_$S($L(XUXBUILD):("for patch/build "_XUXBUILD_" "),1:"")_"is ok"
"RTN","XU8PE655",158,0)
 D BM(XUXT),M(" ")
"RTN","XU8PE655",159,0)
 Q
"RTN","XU8PE655",160,0)
BM(X) ;   Blank Line with Message
"RTN","XU8PE655",161,0)
 S X=$G(X) S:$E(X,1)'=" " X=" "_X D BMES^XPDUTL(X) Q
"RTN","XU8PE655",162,0)
M(X) ;   Message
"RTN","XU8PE655",163,0)
 S X=$G(X) S:$E(X,1)'=" " X=" "_X D MES^XPDUTL(X) Q
"RTN","XU8PE655",164,0)
TRIM(X) ;   Trim Spaces
"RTN","XU8PE655",165,0)
 S X=$G(X) F  Q:$E(X,1)'=" "  S X=$E(X,2,$L(X))
"RTN","XU8PE655",166,0)
 F  Q:$E(X,$L(X))'=" "  S X=$E(X,1,($L(X)-1))
"RTN","XU8PE655",167,0)
 Q X
"RTN","XU8PE655",168,0)
IMP ;   Import names
"RTN","XU8PE655",169,0)
 ;ZEXCEPT: XUXBUILD,XUXIGHF,XUXLREV,XUXPTYPE,XUXREQP ;global variables within this routine
"RTN","XU8PE655",170,0)
 S XUXPTYPE="VistA Kernel Patch XU*8.0*655"
"RTN","XU8PE655",171,0)
 ;     Revision
"RTN","XU8PE655",172,0)
 S XUXLREV=655
"RTN","XU8PE655",173,0)
 ;     Required Builds Array
"RTN","XU8PE655",174,0)
 ;        XUX(1)=build SEQ #^released date^subject
"RTN","XU8PE655",175,0)
 ;        XUX(n)=build SEQ #^released date^subject
"RTN","XU8PE655",176,0)
 S XUXREQP(1)="XU*8.0*240 SEQ #237^3030313^STDNAME~XLFNAME: CHECK FOR SUFFIX"
"RTN","XU8PE655",177,0)
 S XUXREQP(2)="XU*8.0*325 SEQ #337^3060526^XUPS PERSON QUERY"
"RTN","XU8PE655",178,0)
 S XUXREQP(3)="XU*8.0*514 SEQ #428^3100113^MISC KERNEL FIXES"
"RTN","XU8PE655",179,0)
 S XUXREQP(4)="XU*8.0*523 SEQ #433^3100428^BSE FOR IMAGING"
"RTN","XU8PE655",180,0)
 ;     This Build Name
"RTN","XU8PE655",181,0)
 S XUXBUILD="XU*8.0*655"
"RTN","XU8PE655",182,0)
 ;     This Build's Export Global Host Filename
"RTN","XU8PE655",183,0)
 S XUXIGHF="XU_8_655.GBL"
"RTN","XU8PE655",184,0)
 Q
"RTN","XU8PE655",185,0)
EF ;   Exported Files
"RTN","XU8PE655",186,0)
 ;;^XU8P655("VACAA");^XU8P655("VACAA");Kernel;200
"RTN","XU8PE655",187,0)
 Q
"RTN","XU8PE655",188,0)
GD ;   Global Data
"RTN","XU8PE655",189,0)
 ;;^XU8P655("VACAA");^XU8P655("VACAA");Kernel;200
"RTN","XU8PS655")
0^6^B102640640^n/a
"RTN","XU8PS655",1,0)
XU8PS655 ;ISD/HGW - Post-Install for 655 ;03/30/15  11:55
"RTN","XU8PS655",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XU8PS655",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XU8PS655",4,0)
 ;
"RTN","XU8PS655",5,0)
 ;  Post Installation Routine for patch XU*8.0*655
"RTN","XU8PS655",6,0)
 ;  EXTERNAL REFERENCES
"RTN","XU8PS655",7,0)
 ;    BMES^XPDUTL 10141
"RTN","XU8PS655",8,0)
 ;    $$FIND1^DIC
"RTN","XU8PS655",9,0)
 ;    UPDATE^DIE 2053
"RTN","XU8PS655",10,0)
 ;
"RTN","XU8PS655",11,0)
MAIN ; Control subroutine
"RTN","XU8PS655",12,0)
 N XU8ERRX,XU8DATA
"RTN","XU8PS655",13,0)
 ;  Install entry into the REMOTE APPLICATION file (#8994.5)
"RTN","XU8PS655",14,0)
 S XU8DATA(1)="IAM PROVISIONING" ; Name
"RTN","XU8PS655",15,0)
 S XU8DATA(2)="XUS IAM USER PROVISIONING" ; ContextOption Name
"RTN","XU8PS655",16,0)
 S XU8DATA(3)="IAM User Provisioning" ; ContextOption Menu Text
"RTN","XU8PS655",17,0)
 S XU8DATA(4)="put butter square hat" ; Security phrase
"RTN","XU8PS655",18,0)
 ; For TYPE multiple, each entry should be XU8DATA(n)=CallBackType^CallBackPort^CallBackServer^URLString
"RTN","XU8PS655",19,0)
 ; where n is 5, 6, 7, 8 etc.
"RTN","XU8PS655",20,0)
 S XU8DATA(5)="H"_"^"_"80"_"^"_"WWW.DOMAIN"_"^"_"/IAM/Web/Validate.aspx"
"RTN","XU8PS655",21,0)
 S XU8ERRX=$$OPTION(.XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS655",22,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS655",23,0)
 S XU8ERRX=$$CREATE(.XU8DATA) ; Create REMOTE APPLICATION entry
"RTN","XU8PS655",24,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS655",25,0)
 ;
"RTN","XU8PS655",26,0)
 ;  Install entry into the REMOTE APPLICATION file (#8994.5)
"RTN","XU8PS655",27,0)
 S XU8DATA(1)="IAM BINDING" ; Name
"RTN","XU8PS655",28,0)
 S XU8DATA(2)="XUS IAM USER BINDING" ; ContextOption Name
"RTN","XU8PS655",29,0)
 S XU8DATA(3)="IAM User Binding App" ; ContextOption Menu Text
"RTN","XU8PS655",30,0)
 S XU8DATA(4)="de$lAyING55AMO)BAe29" ; Security phrase
"RTN","XU8PS655",31,0)
 ; For TYPE multiple, each entry should be XU8DATA(n)=CallBackType^CallBackPort^CallBackServer^URLString
"RTN","XU8PS655",32,0)
 ; where n is 5, 6, 7, 8 etc.
"RTN","XU8PS655",33,0)
 S XU8DATA(5)="H"_"^"_"80"_"^"_"WWW.DOMAIN"_"^"_"/IAM/Web/Validate.aspx"
"RTN","XU8PS655",34,0)
 S XU8ERRX=$$OPTION(.XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS655",35,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS655",36,0)
 S XU8ERRX=$$CREATE(.XU8DATA) ; Create REMOTE APPLICATION entry
"RTN","XU8PS655",37,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS655",38,0)
 ;
"RTN","XU8PS655",39,0)
 D VACAA ;Load non-VA providers
"RTN","XU8PS655",40,0)
 Q
"RTN","XU8PS655",41,0)
 ;
"RTN","XU8PS655",42,0)
OPTION(XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS655",43,0)
 N XU8ERR,XU8FDA,XU8IEN,XU8MSG
"RTN","XU8PS655",44,0)
 S XU8IEN=$$FIND1^DIC(19,"","X",XU8DATA(2),"B")
"RTN","XU8PS655",45,0)
 S XU8ERR="Error message: "_XU8IEN
"RTN","XU8PS655",46,0)
 I +XU8IEN>0 S XU8ERR="OPTION exists at IEN = "_XU8IEN
"RTN","XU8PS655",47,0)
 I +XU8IEN=0 S XU8ERR="OPTION "_XU8DATA(2)_" created" D
"RTN","XU8PS655",48,0)
 . S XU8FDA(19,"?+1,",.01)=XU8DATA(2)
"RTN","XU8PS655",49,0)
 . S XU8FDA(19,"?+1,",1)=XU8DATA(3)
"RTN","XU8PS655",50,0)
 . S XU8FDA(19,"?+1,",4)="B" ; B:Broker (Client/Server)
"RTN","XU8PS655",51,0)
 . D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS655",52,0)
 . I $D(XU8MSG) S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to create OPTION entry "_XU8DATA(2)
"RTN","XU8PS655",53,0)
 D CLEAN^DILF
"RTN","XU8PS655",54,0)
 Q XU8ERR
"RTN","XU8PS655",55,0)
 ;
"RTN","XU8PS655",56,0)
CREATE(XU8DATA) ; Create new REMOTE APPLICATION entry
"RTN","XU8PS655",57,0)
 N XU8ERR,XU8FDA,XU8IEN,XU8MSG,XU8I,XU8IENS,DA,DIK
"RTN","XU8PS655",58,0)
 ; Delete existing entry if it exists, before creating updated entry
"RTN","XU8PS655",59,0)
 S XU8IEN=$$FIND1^DIC(8994.5,"","X",XU8DATA(1),"B")
"RTN","XU8PS655",60,0)
 I $G(XU8IEN)>0 D
"RTN","XU8PS655",61,0)
 . S DIK="^XWB(8994.5,",DA=XU8IEN
"RTN","XU8PS655",62,0)
 . D ^DIK
"RTN","XU8PS655",63,0)
 . K XU8IEN
"RTN","XU8PS655",64,0)
 S XU8ERR="   REMOTE APPLICATION entry created: "_XU8DATA(1)
"RTN","XU8PS655",65,0)
 S XU8FDA(8994.5,"?+1,",.01)=XU8DATA(1) ; NAME
"RTN","XU8PS655",66,0)
 S XU8FDA(8994.5,"?+1,",.02)=$$FIND1^DIC(19,"","X",XU8DATA(2),"B") ; CONTEXTOPTION
"RTN","XU8PS655",67,0)
 S XU8FDA(8994.5,"?+1,",.03)=$$EN^XUSHSH(XU8DATA(4)) ; APPLICATIONCODE
"RTN","XU8PS655",68,0)
 D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS655",69,0)
 I $D(XU8MSG) D
"RTN","XU8PS655",70,0)
 . S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to create REMOTE APPLICATION "_XU8DATA(1)
"RTN","XU8PS655",71,0)
 ; Find the REMOTE APPLICATION
"RTN","XU8PS655",72,0)
 S XU8IENS=$$FIND1^DIC(8994.5,"","X",XU8DATA(1),"B")
"RTN","XU8PS655",73,0)
 I +XU8IENS<1 S XU8ERR=XU8IENS Q XU8ERR
"RTN","XU8PS655",74,0)
 ; Fill in CALLBACKTYPE multiple
"RTN","XU8PS655",75,0)
 S XU8I=4 F  S XU8I=$O(XU8DATA(XU8I)) Q:XU8I=""  D
"RTN","XU8PS655",76,0)
 . N XU8FDA,XU8IEN,XU8MSG,XU8TEST,XU8J,XU8FLAG
"RTN","XU8PS655",77,0)
 . ; Check for duplicates (loop through CALLBACKTYPE for this entry)
"RTN","XU8PS655",78,0)
 . S XU8J=0 F  S XU8J=$O(^XWB(8994.5,XU8IENS,1,"B",$E(XU8DATA(XU8I),1,1),XU8J)) Q:(XU8J="")!($D(XU8FLAG))  D
"RTN","XU8PS655",79,0)
 . . I $G(XU8DATA(XU8I))=$G(^XWB(8994.5,XU8IENS,1,XU8J,0)) S XU8FLAG=1
"RTN","XU8PS655",80,0)
 . I '$D(XU8FLAG) D
"RTN","XU8PS655",81,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.01)=$P(XU8DATA(XU8I),"^",1) ; CALLBACKTYPE
"RTN","XU8PS655",82,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.02)=$P(XU8DATA(XU8I),"^",2) ; CALLBACKPORT
"RTN","XU8PS655",83,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.03)=$P(XU8DATA(XU8I),"^",3) ; CALLBACKSERVER
"RTN","XU8PS655",84,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.04)=$P(XU8DATA(XU8I),"^",4) ; URLSTRING
"RTN","XU8PS655",85,0)
 . . D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS655",86,0)
 . . I $D(XU8MSG) D
"RTN","XU8PS655",87,0)
 . . . S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to update REMOTE APPLICATION "_XU8DATA(1)
"RTN","XU8PS655",88,0)
 ;
"RTN","XU8PS655",89,0)
 D CLEAN^DILF
"RTN","XU8PS655",90,0)
 Q XU8ERR
"RTN","XU8PS655",91,0)
 ;
"RTN","XU8PS655",92,0)
VACAA ;Load non-VA providers to file #200
"RTN","XU8PS655",93,0)
 ; Identify unique provider using NPI.
"RTN","XU8PS655",94,0)
 ;^XU8P655("VACAA",j,0)="VISN^UID^NAME (encrypted)^DEGREE^SEX^ADDR1^ADDR2^ADDR3^CITY^STATE^ZIP^NPI^TAX ID^DEA^TW or HN"
"RTN","XU8PS655",95,0)
 ;ZEXCEPT: XPDIDTOT,XPDNM ;environment variables for KIDS install
"RTN","XU8PS655",96,0)
 N AUTHCODE,INARRAY,INDATA,INDEXB,INDEXG,INDEXU,J,M,X,XSTATE,UGLYFLAG,VISN
"RTN","XU8PS655",97,0)
 Q:'$$PROD^XUPROD                                ;Quit if test account
"RTN","XU8PS655",98,0)
 S DUZ(0)="@"
"RTN","XU8PS655",99,0)
 S AUTHCODE="This entry point is for VACAA only. No morons."
"RTN","XU8PS655",100,0)
 S INARRAY=""
"RTN","XU8PS655",101,0)
 S VISN=$P($$PRNT^XUAF4($P($$NS^XUAF4($$KSP^XUPARAM("INST")),U,2)),U,3) ;Lookup IEN, then Station, then VISN (returns "VISN ##")
"RTN","XU8PS655",102,0)
 S VISN=$TR(VISN,"VISN ") ;Return VISN number (no text)
"RTN","XU8PS655",103,0)
 K ^XU8P655("THEGOOD")
"RTN","XU8PS655",104,0)
 K ^XU8P655("THEBAD")
"RTN","XU8PS655",105,0)
 K ^XU8P655("THEUGLY")
"RTN","XU8PS655",106,0)
 S (INDEXG,INDEXB,INDEXU)=0 ;Initialize the "good, bad, and ugly" indexes
"RTN","XU8PS655",107,0)
 S J=0,X="-1^Can't add provider"
"RTN","XU8PS655",108,0)
 S XPDIDTOT=81513 ; put total number of entries in spreadsheet here
"RTN","XU8PS655",109,0)
 F  D  Q:J=""
"RTN","XU8PS655",110,0)
 . S J=$O(^XU8P655("VACAA",J)) Q:J=""
"RTN","XU8PS655",111,0)
 . S INDATA=$G(^XU8P655("VACAA",J,0))
"RTN","XU8PS655",112,0)
 . I $D(XPDNM)&'(J#10) D UPDATE^XPDID(J) ;Update progress bar
"RTN","XU8PS655",113,0)
 . ; Only load data appropriate for the site's VISN
"RTN","XU8PS655",114,0)
 . I VISN=$P(INDATA,U,1) D
"RTN","XU8PS655",115,0)
 . . ; Decrypt NAME
"RTN","XU8PS655",116,0)
 . . S $P(INDATA,U,3)=$$AESDECR^XUSHSH($$B64DECD^XUSHSH($P(INDATA,U,3)),"BaDcefghijklmnop")
"RTN","XU8PS655",117,0)
 . . S INARRAY(1)=$P(INDATA,U,3) ;NAME
"RTN","XU8PS655",118,0)
 . . S INARRAY(2)=$P(INDATA,U,4) ;DEGREE
"RTN","XU8PS655",119,0)
 . . S INARRAY(3)=$P(INDATA,U,5) ;SEX
"RTN","XU8PS655",120,0)
 . . S INARRAY(4)=$P(INDATA,U,6) ;STREET ADDRESS 1
"RTN","XU8PS655",121,0)
 . . S INARRAY(5)=$P(INDATA,U,7) ;STREET ADDRESS 2
"RTN","XU8PS655",122,0)
 . . S INARRAY(6)=$P(INDATA,U,8) ;STREET ADDRESS 3
"RTN","XU8PS655",123,0)
 . . S INARRAY(7)=$P(INDATA,U,9) ;CITY
"RTN","XU8PS655",124,0)
 . . S INARRAY(8)=$P(INDATA,U,10) ;STATE
"RTN","XU8PS655",125,0)
 . . S INARRAY(9)=$P(INDATA,U,11) ;ZIP
"RTN","XU8PS655",126,0)
 . . S INARRAY(10)=$P(INDATA,U,12) ;NPI
"RTN","XU8PS655",127,0)
 . . S INARRAY(11)=$P(INDATA,U,13) ;TAX ID
"RTN","XU8PS655",128,0)
 . . S INARRAY(12)=$P(INDATA,U,14) ;DEA #
"RTN","XU8PS655",129,0)
 . . S INARRAY(13)=$P(INDATA,U,15) ;TW or HN
"RTN","XU8PS655",130,0)
 . . S X=$$VACAA^XUESSO3(.INARRAY,AUTHCODE)
"RTN","XU8PS655",131,0)
 . . ;Collect the good (success), the bad (fail), and the ugly (requires manual review) in separate globals
"RTN","XU8PS655",132,0)
 . . I +X<0 D
"RTN","XU8PS655",133,0)
 . . . S INDEXB=INDEXB+1
"RTN","XU8PS655",134,0)
 . . . S ^XU8P655("THEBAD",INDEXB,0)=$J($E($P(X,U,2),1,18),18)_" "_$J($E($P(INDATA,U,3),1,35),35)
"RTN","XU8PS655",135,0)
 . . I +X>0 D
"RTN","XU8PS655",136,0)
 . . . S UGLYFLAG=0
"RTN","XU8PS655",137,0)
 . . . I $P(INDATA,U,3)'=$P($G(^VA(200,X,0)),U,1) D THEUGLY(.INDEXU,.UGLYFLAG,"NPI/NAME mismatch",X,$P(INDATA,U,3)) ;NAME
"RTN","XU8PS655",138,0)
 . . . I $E($P(INDATA,U,6),1,50)'=$P($G(^VA(200,X,.11)),U,1) D THEUGLY(.INDEXU,.UGLYFLAG,"Bad Address",X,$P(INDATA,U,3)) ;STREET ADDRESS 1
"RTN","XU8PS655",139,0)
 . . . I $P(INDATA,U,9)'=$P($G(^VA(200,X,.11)),U,4) D THEUGLY(.INDEXU,.UGLYFLAG,"Mismatch city",X,$P(INDATA,U,3)) ;CITY
"RTN","XU8PS655",140,0)
 . . . S XSTATE=$P($G(^VA(200,X,.11)),U,5) ;STATE pointer
"RTN","XU8PS655",141,0)
 . . . I $G(XSTATE)'="" D
"RTN","XU8PS655",142,0)
 . . . . I $P(INDATA,U,10)'=$P($G(^DIC(5,XSTATE,0)),U,2) D THEUGLY(.INDEXU,.UGLYFLAG,"Mismatch state",X,$P(INDATA,U,3)) ; STATE
"RTN","XU8PS655",143,0)
 . . . I $P(INDATA,U,11)'=$P($G(^VA(200,X,.11)),U,6) D THEUGLY(.INDEXU,.UGLYFLAG,"Mismatch zip",X,$P(INDATA,U,3)) ;ZIP CODE
"RTN","XU8PS655",144,0)
 . . . I $P(INDATA,U,14)'=$P($G(^VA(200,X,"PS")),U,2) D THEUGLY(.INDEXU,.UGLYFLAG,"Bad DEA#",X,$P(INDATA,U,3)) ;DEA #
"RTN","XU8PS655",145,0)
 . . . I 'UGLYFLAG D
"RTN","XU8PS655",146,0)
 . . . . S INDEXG=INDEXG+1
"RTN","XU8PS655",147,0)
 . . . . S ^XU8P655("THEGOOD",INDEXG,0)=$J($E(X,1,15),15)_" "_$J($E($P(INDATA,U,3),1,35),35)
"RTN","XU8PS655",148,0)
 ; Send mail alerts to G.PATCHES for the good, the bad, and the ugly
"RTN","XU8PS655",149,0)
 S M=$$BULL("THEGOOD")
"RTN","XU8PS655",150,0)
 D BMES^XPDUTL("MailMan message #"_M_" lists non-VA Providers successfully loaded")
"RTN","XU8PS655",151,0)
 S M=$$BULL("THEBAD")
"RTN","XU8PS655",152,0)
 D BMES^XPDUTL("MailMan message #"_M_" lists non-VA Providers that failed to load")
"RTN","XU8PS655",153,0)
 S M=$$BULL("THEUGLY")
"RTN","XU8PS655",154,0)
 D BMES^XPDUTL("MailMan message #"_M_" lists non-VA Providers loaded, requiring manual review")
"RTN","XU8PS655",155,0)
 K ^XU8P655("VACAA")
"RTN","XU8PS655",156,0)
 K ^XU8P655("THEGOOD")
"RTN","XU8PS655",157,0)
 K ^XU8P655("THEBAD")
"RTN","XU8PS655",158,0)
 K ^XU8P655("THEUGLY")
"RTN","XU8PS655",159,0)
 Q
"RTN","XU8PS655",160,0)
THEUGLY(I,FLAG,MSG,XDUZ,PROV) ;Set ugly data
"RTN","XU8PS655",161,0)
 S FLAG=1
"RTN","XU8PS655",162,0)
 S I=I+1
"RTN","XU8PS655",163,0)
 S ^XU8P655("THEUGLY",I,0)=$J($E(MSG,1,18),18)_$J($E(XDUZ,1,15),15)_" "_$J($E(PROV,1,35),35)
"RTN","XU8PS655",164,0)
 Q
"RTN","XU8PS655",165,0)
BULL(TYPE) ;Send local e-mail
"RTN","XU8PS655",166,0)
 ; Returns: Message number
"RTN","XU8PS655",167,0)
 N DIFROM,I,J,XMB,XMDUZ,XMSUB,XMTEXT,XMY,XMZ,XUTEXT
"RTN","XU8PS655",168,0)
 S XUTEXT(4)=" "
"RTN","XU8PS655",169,0)
 S XUTEXT(5)="On August 7, 2014, the President signed into law PL 113-146, the Veterans"
"RTN","XU8PS655",170,0)
 S XUTEXT(6)="Access, Choice, and Accountability Act of 2014 (VACAA). The law offers an"
"RTN","XU8PS655",171,0)
 S XUTEXT(7)="additional authority for VHA to expand current capacity and ensure that"
"RTN","XU8PS655",172,0)
 S XUTEXT(8)="Veterans have timely access to high-quality care. The law creates a new"
"RTN","XU8PS655",173,0)
 S XUTEXT(9)="paradigm for providing health care, set forth in the Veterans Choice program"
"RTN","XU8PS655",174,0)
 S XUTEXT(10)="provisions within Title I Section 101 of VACAA. VA is utilizing a Contractor"
"RTN","XU8PS655",175,0)
 S XUTEXT(11)="to provide health care and third party administrative (TPA) services set forth"
"RTN","XU8PS655",176,0)
 S XUTEXT(12)="through VACAA Section 101. As a result of this law, VA must upload a list of"
"RTN","XU8PS655",177,0)
 S XUTEXT(13)="non-VA medical care providers into the VistA system in order to maintain an"
"RTN","XU8PS655",178,0)
 S XUTEXT(14)="accurate and updated list of non-VA providers in the Choice program."
"RTN","XU8PS655",179,0)
 S XUTEXT(15)=" "
"RTN","XU8PS655",180,0)
 S XUTEXT(16)="Refer to the Non-VA Care Provider SharePoint site for further information:"
"RTN","XU8PS655",181,0)
 S XUTEXT(17)="https://vaww.dwh.cdw.aaadomain.ext/sites/Non-VA%20Care%20PC3%20and%20Choice/SitePages/Home.aspx"
"RTN","XU8PS655",182,0)
 S XUTEXT(18)=" "
"RTN","XU8PS655",183,0)
 S I=0,J=21
"RTN","XU8PS655",184,0)
 I TYPE="THEGOOD" D
"RTN","XU8PS655",185,0)
 . S XMSUB="XU*8.0*655: The Good"
"RTN","XU8PS655",186,0)
 . S XUTEXT(1)="This message lists Non-VA Providers successfully uploaded into the VISTA"
"RTN","XU8PS655",187,0)
 . S XUTEXT(2)="NEW PERSON file (#200) for VACAA (described below)."
"RTN","XU8PS655",188,0)
 . S XUTEXT(3)=" "
"RTN","XU8PS655",189,0)
 . S XUTEXT(19)="            DUZ                            Provider"
"RTN","XU8PS655",190,0)
 . S XUTEXT(20)="            ---                            --------"
"RTN","XU8PS655",191,0)
 . F  D  Q:I=""
"RTN","XU8PS655",192,0)
 . . S I=$O(^XU8P655("THEGOOD",I)) Q:I=""
"RTN","XU8PS655",193,0)
 . . S XUTEXT(J)=$G(^XU8P655("THEGOOD",I,0))
"RTN","XU8PS655",194,0)
 . . S J=J+1
"RTN","XU8PS655",195,0)
 I TYPE="THEBAD" D
"RTN","XU8PS655",196,0)
 . S XMSUB="XU*8.0*655: The Bad"
"RTN","XU8PS655",197,0)
 . S XUTEXT(1)="This message lists Non-VA Providers that failed to load into the VISTA"
"RTN","XU8PS655",198,0)
 . S XUTEXT(2)="NEW PERSON file (#200) for VACAA (described below)."
"RTN","XU8PS655",199,0)
 . S XUTEXT(3)=" "
"RTN","XU8PS655",200,0)
 . S XUTEXT(19)="     Error Message                            Provider"
"RTN","XU8PS655",201,0)
 . S XUTEXT(20)="     -------------                            --------"
"RTN","XU8PS655",202,0)
 . F  D  Q:I=""
"RTN","XU8PS655",203,0)
 . . S I=$O(^XU8P655("THEBAD",I)) Q:I=""
"RTN","XU8PS655",204,0)
 . . S XUTEXT(J)=$G(^XU8P655("THEBAD",I,0))
"RTN","XU8PS655",205,0)
 . . S J=J+1
"RTN","XU8PS655",206,0)
 I TYPE="THEUGLY" D
"RTN","XU8PS655",207,0)
 . S XMSUB="XU*8.0*655: The Ugly"
"RTN","XU8PS655",208,0)
 . S XUTEXT(1)="This message lists Non-VA Providers successfully loaded into the VISTA"
"RTN","XU8PS655",209,0)
 . S XUTEXT(2)="NEW PERSON file (#200) for VACAA (described below), but which may"
"RTN","XU8PS655",210,0)
 . S XUTEXT(3)="require manual review due to data discrepancies."
"RTN","XU8PS655",211,0)
 . S XUTEXT(19)="     Error Message            DUZ                            Provider"
"RTN","XU8PS655",212,0)
 . S XUTEXT(20)="     -------------            ---                            --------"
"RTN","XU8PS655",213,0)
 . F  D  Q:I=""
"RTN","XU8PS655",214,0)
 . . S I=$O(^XU8P655("THEUGLY",I)) Q:I=""
"RTN","XU8PS655",215,0)
 . . S XUTEXT(J)=$G(^XU8P655("THEUGLY",I,0))
"RTN","XU8PS655",216,0)
 . . S J=J+1
"RTN","XU8PS655",217,0)
 S XMTEXT="XUTEXT("
"RTN","XU8PS655",218,0)
 S XMDUZ=DUZ
"RTN","XU8PS655",219,0)
 S XMY(DUZ)=""
"RTN","XU8PS655",220,0)
 S XMY("G.PATCHES")=""
"RTN","XU8PS655",221,0)
 D ^XMD
"RTN","XU8PS655",222,0)
 Q $G(XMZ)
"RTN","XUESSO1")
0^4^B77693554^B41206647
"RTN","XUESSO1",1,0)
XUESSO1 ;SEA/LUKE,ISD/HGW Single Sign-on Utilities ;03/20/15  09:24
"RTN","XUESSO1",2,0)
 ;;8.0;KERNEL;**165,183,196,245,254,269,337,395,466,523,655**;Jul 10, 1995;Build 16
"RTN","XUESSO1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUESSO1",4,0)
 ;
"RTN","XUESSO1",5,0)
GET(INDUZ) ;Gather identifying data from user's home site.
"RTN","XUESSO1",6,0)
 ;Called by SETVISIT^XUSBSE1 (Get visitor info for TOKEN)
"RTN","XUESSO1",7,0)
 ;Called by SNDQRY^DGROHLS (Retrieve user info) and SETUP^XWB2HL7 (Get visitor info)
"RTN","XUESSO1",8,0)
 ;To visit a remote site, user must have: Name, Access/Verify Codes, SSN (no pseudo), Station Name, Site Number
"RTN","XUESSO1",9,0)
 ;The following data is optional: Phone, SecID, Network Username
"RTN","XUESSO1",10,0)
 N %,NAME,SITE,SSN,PHONE,X,N,NETWORK
"RTN","XUESSO1",11,0)
 I '$D(DUZ) Q "-1^Insufficient info to allow visiting:  No DUZ"
"RTN","XUESSO1",12,0)
 I '$D(DUZ(2)) Q "-1^Insufficient info to allow visiting:  Missing DUZ(2)"
"RTN","XUESSO1",13,0)
 S N=$G(^VA(200,DUZ,0))
"RTN","XUESSO1",14,0)
 I '$L(N) Q "-1^Insufficient info to allow visiting:  Missing NPF Zero Node"
"RTN","XUESSO1",15,0)
 S %=$P(N,U,3) I $L(%)<1 Q "-1^Insufficient info to allow visiting:  No Access Code"
"RTN","XUESSO1",16,0)
 S %=$P($G(^VA(200,DUZ,.1)),U,2) I $L(%)<1 Q "-1^Insufficient info to allow visiting:  No Verify Code"
"RTN","XUESSO1",17,0)
 S %=$P(N,U,11) I $L(%)>1,(DT>%) Q "-1^Insufficient info to allow visiting:  Terminated User"
"RTN","XUESSO1",18,0)
 I $P($$ACTIVE^XUSER(DUZ),U,1)'=1 Q "-1^Insufficient info to allow visiting:  Not an active user"
"RTN","XUESSO1",19,0)
 S NAME=$P(N,U)
"RTN","XUESSO1",20,0)
 I '$L(NAME) Q "-1^Insufficient info to allow visiting:  No User Name"
"RTN","XUESSO1",21,0)
 ;
"RTN","XUESSO1",22,0)
 S SITE=$$NS^XUAF4(DUZ(2)) ;Site is name^station#
"RTN","XUESSO1",23,0)
 I $P(SITE,U,2)="" Q "-1^Insufficient info to allow visiting:  Missing Station Number"
"RTN","XUESSO1",24,0)
 ;
"RTN","XUESSO1",25,0)
 S SSN=$P($G(^VA(200,DUZ,1)),U,9)
"RTN","XUESSO1",26,0)
 I $$SPECIAL($P(SITE,"^",2)) S SSN=999999999 ;Manila RO doesn't need SSN
"RTN","XUESSO1",27,0)
 I 'SSN Q "-1^Insufficient info to allow visiting:  Missing SSN"
"RTN","XUESSO1",28,0)
 I $E(SSN,10)="P" Q "-1^Insufficient info to allow visiting:  User has a pseudo SSN"
"RTN","XUESSO1",29,0)
 I '$$SSNCHECK(SSN) Q "-1^Insufficient info to allow visiting:  User does not have a valid SSN"
"RTN","XUESSO1",30,0)
 ;
"RTN","XUESSO1",31,0)
 S PHONE=$$PH
"RTN","XUESSO1",32,0)
 S X=SSN_U_NAME_U_SITE_U_DUZ
"RTN","XUESSO1",33,0)
 I $L(PHONE)>2&($L(PHONE<20)) S X=X_U_PHONE
"RTN","XUESSO1",34,0)
 S $P(X,U,7)=$P($G(^VA(200,DUZ,205.1)),U) ;p655 SecID
"RTN","XUESSO1",35,0)
 S $P(X,U,8)=$P($G(^VA(200,DUZ,501)),U) ;p655 Network Username
"RTN","XUESSO1",36,0)
 ;X=ssn^name^station name^station number^DUZ^phone^SecID^network username
"RTN","XUESSO1",37,0)
 Q X
"RTN","XUESSO1",38,0)
 ;
"RTN","XUESSO1",39,0)
PH() ; Try for a phone number or pager
"RTN","XUESSO1",40,0)
 N %,X
"RTN","XUESSO1",41,0)
 S %=""
"RTN","XUESSO1",42,0)
 S X=$G(^VA(200,DUZ,.13))
"RTN","XUESSO1",43,0)
 I '$L(X) Q ""
"RTN","XUESSO1",44,0)
 S %=$P(X,U,5) I $L(%)>6 Q %  ;Commercial #
"RTN","XUESSO1",45,0)
 S %=$P(X,U,2) I $L(%)>2 Q %  ;Office
"RTN","XUESSO1",46,0)
 S %=$P(X,U,8) I $L(%)>6 Q %  ;Digital Pager
"RTN","XUESSO1",47,0)
 S %=$P(X,U,7) I $L(%)>6 Q %  ;Pager
"RTN","XUESSO1",48,0)
 S %=$P(X,U,3) I $L(%)>2 Q %  ;Phone #3
"RTN","XUESSO1",49,0)
 S %=$P(X,U,4) I $L(%)>2 Q %  ;Phone #4
"RTN","XUESSO1",50,0)
 S %=$P(X,U,1) I $L(%)>2 Q %  ;Home Phone
"RTN","XUESSO1",51,0)
 Q "" ;Couldn't find one.
"RTN","XUESSO1",52,0)
 ;
"RTN","XUESSO1",53,0)
SPECIAL(SN) ;INTRINSIC. Special Manila RO site
"RTN","XUESSO1",54,0)
 ; Returns 1 if SN is "358"
"RTN","XUESSO1",55,0)
 Q 358=SN
"RTN","XUESSO1",56,0)
 ;
"RTN","XUESSO1",57,0)
PUT(DATIN) ;;Setup data from authenticating site GET() at receiving site
"RTN","XUESSO1",58,0)
 ;Called by OLDCAPRI^XUSBSE1 (Old Capri) and SETUP^XUSBSE1 (BSE)
"RTN","XUESSO1",59,0)
 ;Called by DIQ^DGROHLU (Sensitive Patient access) and REMOTE^XWB2HL7 (Visitor access via HL7)
"RTN","XUESSO1",60,0)
 ;Return: 0=fail, 1=OK
"RTN","XUESSO1",61,0)
 N NEWDUZ,FDR,TODAY,IEN,DIC,USER,X,%T,XSITEIEN
"RTN","XUESSO1",62,0)
 N SSN,NAME,SITE,SITENUM,RMTDUZ,PHONE,SECID,XUMF,NETWORK
"RTN","XUESSO1",63,0)
 S U="^",TODAY=$$HTFM^XLFDT($H),DT=$P(TODAY,"."),NEWDUZ=0
"RTN","XUESSO1",64,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO1",65,0)
 ;
"RTN","XUESSO1",66,0)
 S SSN=$P(DATIN,U,1),NAME=$P(DATIN,U,2),SITE=$P(DATIN,U,3)
"RTN","XUESSO1",67,0)
 S SITENUM=$P(DATIN,U,4),RMTDUZ=$P(DATIN,U,5),PHONE=$P(DATIN,U,6)
"RTN","XUESSO1",68,0)
 S SECID=$P(DATIN,U,7) ;p655
"RTN","XUESSO1",69,0)
 S NETWORK=$P(DATIN,U,8) ;p655
"RTN","XUESSO1",70,0)
 ;Format checks
"RTN","XUESSO1",71,0)
 I NAME'?1U.E1","1U.E Q 0
"RTN","XUESSO1",72,0)
 I SSN'?9N Q 0
"RTN","XUESSO1",73,0)
 I '$L(SITE)!('$L(SITENUM)) Q 0
"RTN","XUESSO1",74,0)
 S XUMF=1 D CHK^DIE(4,99,,SITENUM,.%T) I %T=U Q 0 ;p533
"RTN","XUESSO1",75,0)
 D CHK^DIE(200.06,1,,SITE,.%T) I %T=U Q 0 ;p533
"RTN","XUESSO1",76,0)
 I RMTDUZ'>0 Q 0 ;p337
"RTN","XUESSO1",77,0)
 ;      The following lines of code were added to provide additional security by verifying that the authenticating
"RTN","XUESSO1",78,0)
 ;      was not a "rogue" system but was an active site identified in the INSTITUTION file (#4). However, it cannot
"RTN","XUESSO1",79,0)
 ;      be activated at this time as there are active VA systems being used for authentication that are not listed
"RTN","XUESSO1",80,0)
 ;      in file #4.
"RTN","XUESSO1",81,0)
 ;Check if visitor is from a valid active site
"RTN","XUESSO1",82,0)
 ;S XSITEIEN=$$IEN^XUAF4(SITENUM) I XSITEIEN="" Q 0 ;p655
"RTN","XUESSO1",83,0)
 ;I '$$ACTIVE^XUAF4(XSITEIEN) Q 0 ;p612
"RTN","XUESSO1",84,0)
 ;I $P($$NS^XUAF4(XSITEIEN),"^",1)'=SITE Q 0 ;p655
"RTN","XUESSO1",85,0)
 ;Get a LOCK. Block if can't get.
"RTN","XUESSO1",86,0)
 L +^VA(200,"HL7"):10 Q:'$T 0
"RTN","XUESSO1",87,0)
 S %T=$$TALL($G(DUZ,0)) L -^VA(200,"HL7")
"RTN","XUESSO1",88,0)
 I %T Q $$SET(NEWDUZ) ;Return 1 if OK.
"RTN","XUESSO1",89,0)
 Q 0
"RTN","XUESSO1",90,0)
 ;
"RTN","XUESSO1",91,0)
TALL(DUZ) ;INTRINSIC. Test for existing user or adds a new one
"RTN","XUESSO1",92,0)
 ; ZEXCEPT: NAME,NEWDUZ,PHONE,RMTDUZ,SITE,SITENUM,SSN,XSSN,TODAY,SECID,NETWORK ;global variables within this routine
"RTN","XUESSO1",93,0)
 ; ZEXCEPT: DIC ;turn off DIC(0) for ^XUA4A7 (work around)
"RTN","XUESSO1",94,0)
 N FLAG,NEWREC
"RTN","XUESSO1",95,0)
 S FLAG=0,DUZ(0)="@" ;Make sure we can add the entry
"RTN","XUESSO1",96,0)
 ;See if match SECID. Only use for lookup. Do not load SECID's.
"RTN","XUESSO1",97,0)
 I $L(SECID) D
"RTN","XUESSO1",98,0)
 . S NEWDUZ=+$$SECMATCH^XUESSO2(SECID) Q:NEWDUZ<1  ;p655
"RTN","XUESSO1",99,0)
 . I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",100,0)
 . D ADDW,UPDT
"RTN","XUESSO1",101,0)
 . S FLAG=1,DUZ(0)=$P($G(^VA(200,NEWDUZ,0)),U,4)
"RTN","XUESSO1",102,0)
 . Q
"RTN","XUESSO1",103,0)
 I FLAG Q 1 ;Quit here if we found a match on SECID
"RTN","XUESSO1",104,0)
 ;See if the SSN is in the NPF cross reference
"RTN","XUESSO1",105,0)
 I $D(^VA(200,"SSN",SSN)),$$SSNCHECK(SSN),'$$SPECIAL(SITENUM) D
"RTN","XUESSO1",106,0)
 . N XUEIEN,XUEAUSER
"RTN","XUESSO1",107,0)
 . S XUEIEN=0,NEWDUZ=0
"RTN","XUESSO1",108,0)
 . F  S XUEIEN=$O(^VA(200,"SSN",SSN,XUEIEN)) Q:(XUEIEN="")!(NEWDUZ>0)  D
"RTN","XUESSO1",109,0)
 . . N XUENAME S XUENAME=$P($G(^VA(200,XUEIEN,0)),U)
"RTN","XUESSO1",110,0)
 . . S NEWDUZ=XUEIEN
"RTN","XUESSO1",111,0)
 . . ;Update name if names don't match, user has visited before, and user is not an active local user
"RTN","XUESSO1",112,0)
 . . I (XUENAME'=NAME)&(XUEIEN=$O(^VA(200,"AVISIT",SITENUM,RMTDUZ,0)))&(('$$ACTIVE^XUSER(XUEIEN))) D ADDN
"RTN","XUESSO1",113,0)
 . Q:NEWDUZ'>0
"RTN","XUESSO1",114,0)
 . I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",115,0)
 . D ADDW,UPDT
"RTN","XUESSO1",116,0)
 . S FLAG=1,DUZ(0)=$P($G(^VA(200,NEWDUZ,0)),U,4)
"RTN","XUESSO1",117,0)
 . Q
"RTN","XUESSO1",118,0)
 I FLAG Q 1 ;Quit here if we found a match for SSN
"RTN","XUESSO1",119,0)
 ;See if in the AVISIT cross reference (Manila only)
"RTN","XUESSO1",120,0)
 I $$SPECIAL(SITENUM) D
"RTN","XUESSO1",121,0)
 . S NEWDUZ=$O(^VA(200,"AVISIT",SITENUM,RMTDUZ,0))
"RTN","XUESSO1",122,0)
 . Q:NEWDUZ'>0  ;User must have visited from Manila at least once to be found by this test
"RTN","XUESSO1",123,0)
 . D ADDW,UPDT S FLAG=1,DUZ(0)=$P($G(^VA(200,NEWDUZ,0)),U,4)
"RTN","XUESSO1",124,0)
 . Q
"RTN","XUESSO1",125,0)
 I FLAG Q 1 ;Quit here if we found a match for AVISIT
"RTN","XUESSO1",126,0)
 ;Try for a NAME match in "B"
"RTN","XUESSO1",127,0)
 N XUEIEN,XUESSN
"RTN","XUESSO1",128,0)
 S NAME=$$UP^XLFSTR(NAME)
"RTN","XUESSO1",129,0)
 I $D(^VA(200,"B",NAME)) D
"RTN","XUESSO1",130,0)
 . S XUEIEN=0,NEWDUZ=0
"RTN","XUESSO1",131,0)
 . F  S XUEIEN=$O(^VA(200,"B",NAME,XUEIEN)) Q:(XUEIEN="")!(NEWDUZ>0)  D
"RTN","XUESSO1",132,0)
 . . S XUESSN=$P($G(^VA(200,XUEIEN,1)),U,9)
"RTN","XUESSO1",133,0)
 . . I (XUESSN'=SSN)&($L(XUESSN)>8) Q  ;Do not use if name has a different SSN
"RTN","XUESSO1",134,0)
 . . S NEWDUZ=XUEIEN
"RTN","XUESSO1",135,0)
 . I NEWDUZ>0 D
"RTN","XUESSO1",136,0)
 . . D ADDS
"RTN","XUESSO1",137,0)
 . . I '$D(^VA(200,NEWDUZ,8910,"B",SITENUM)) D VISM
"RTN","XUESSO1",138,0)
 . . D ADDW,UPDT
"RTN","XUESSO1",139,0)
 . . S FLAG=1,DUZ(0)=$P($G(^VA(200,NEWDUZ,0)),U,4)
"RTN","XUESSO1",140,0)
 . Q
"RTN","XUESSO1",141,0)
 I FLAG Q 1 ;Quit here if we found an exact match for NAME (w/o SSN)
"RTN","XUESSO1",142,0)
 ;
"RTN","XUESSO1",143,0)
 ;We didn't find anybody under VPID,SSN,VISITED FROM, or NAME so we add a new user
"RTN","XUESSO1",144,0)
 S DIC(0)="" ;Turn off ^XUA4A7 (work around)
"RTN","XUESSO1",145,0)
 ;Put the name in the .01 field first.
"RTN","XUESSO1",146,0)
 D ADDU ;ADDU will set NEWDUZ
"RTN","XUESSO1",147,0)
 I NEWDUZ=0 Q 0  ;If NEWDUZ is still 0, the User add didn't work so exit.
"RTN","XUESSO1",148,0)
 D ADDS,ADDA ;(p337) Add SSN and "VISITOR" Alias.
"RTN","XUESSO1",149,0)
 D ADDW ; Add NETWORK USERNAME
"RTN","XUESSO1",150,0)
 D VISM,UPDT ; Fill in the  VISITED FROM multiple
"RTN","XUESSO1",151,0)
 I NEWDUZ=0 Q 0 ;Couldn't update user
"RTN","XUESSO1",152,0)
 I $D(^TMP("DIERR",$J)) Q 0  ;FileMan Error
"RTN","XUESSO1",153,0)
 ;
"RTN","XUESSO1",154,0)
 S FLAG=$$BULL(NAME,NEWDUZ,SITE,SITENUM,RMTDUZ,PHONE,TODAY)
"RTN","XUESSO1",155,0)
 S DUZ(0)=$P($G(^VA(200,NEWDUZ,0)),U,4)
"RTN","XUESSO1",156,0)
 Q 1  ;Every thing OK
"RTN","XUESSO1",157,0)
 ;
"RTN","XUESSO1",158,0)
SET(NEWDUZ) ;INTRINSIC. Set the user up to go
"RTN","XUESSO1",159,0)
 ; ZEXCEPT: RMTDUZ,SITENUM ;global variables within this routine
"RTN","XUESSO1",160,0)
 ;Return: 0=fail, 1=OK
"RTN","XUESSO1",161,0)
 Q:NEWDUZ'>0 0
"RTN","XUESSO1",162,0)
 N XUSER,XOPT
"RTN","XUESSO1",163,0)
 S DUZ=NEWDUZ,U="^",DUZ("VISITOR")=SITENUM_U_RMTDUZ ;p533
"RTN","XUESSO1",164,0)
 D DUZ^XUS1A
"RTN","XUESSO1",165,0)
 Q 1
"RTN","XUESSO1",166,0)
 ;
"RTN","XUESSO1",167,0)
ADDU ;SR. Add a new name to the New Person File
"RTN","XUESSO1",168,0)
 ; ZEXCEPT: FDR,NAME,NEWDUZ,NEWREC ;global variables within this routine
"RTN","XUESSO1",169,0)
 N DD,DO,DIC,DA,X,Y
"RTN","XUESSO1",170,0)
 S NEWDUZ=0
"RTN","XUESSO1",171,0)
 S DIC="^VA(200,",DIC(0)="F",X=NAME,NEWREC=1 ;p533
"RTN","XUESSO1",172,0)
 D FILE^DICN
"RTN","XUESSO1",173,0)
 S:Y>0 NEWDUZ=+Y
"RTN","XUESSO1",174,0)
 Q
"RTN","XUESSO1",175,0)
 ;
"RTN","XUESSO1",176,0)
ADDS ;SR. Add a SSN to the New Person File
"RTN","XUESSO1",177,0)
 ; ZEXCEPT: FDR,NEWDUZ,SSN,SITENUM ;global variables within this routine
"RTN","XUESSO1",178,0)
 N IEN
"RTN","XUESSO1",179,0)
 Q:$$SPECIAL(SITENUM)  ;don't add SSN if from Manila
"RTN","XUESSO1",180,0)
 Q:$D(^VA(200,"SSN",SSN))  ;don't try to add a duplicate SSN
"RTN","XUESSO1",181,0)
 Q:'$$SSNCHECK(SSN)  ;only add a valid SSN
"RTN","XUESSO1",182,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO1",183,0)
 S FDR(200,IEN,9)=SSN
"RTN","XUESSO1",184,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",185,0)
 Q
"RTN","XUESSO1",186,0)
 ;
"RTN","XUESSO1",187,0)
ADDN ;SR. Update the NAME in the New Person File
"RTN","XUESSO1",188,0)
 ; ZEXCEPT: FDR,NEWDUZ,NAME,RMTDUZ,SITENUM ;global variables within this routine
"RTN","XUESSO1",189,0)
 N IEN
"RTN","XUESSO1",190,0)
 Q:NAME=$P($G(^VA(200,NEWDUZ,0)),U,1)  ; name is unchanged, do nothing
"RTN","XUESSO1",191,0)
 I NEWDUZ'=$O(^VA(200,"AVISIT",SITENUM,RMTDUZ,0)) Q  ; user hasn't visited before, so this is not a valid name change
"RTN","XUESSO1",192,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO1",193,0)
 S FDR(200,IEN,.01)=NAME
"RTN","XUESSO1",194,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",195,0)
 Q
"RTN","XUESSO1",196,0)
 ;
"RTN","XUESSO1",197,0)
ADDA ;SR. Add a new Alias to file 200.04
"RTN","XUESSO1",198,0)
 ; ZEXCEPT: FDR,NEWDUZ ;global variables within this routine
"RTN","XUESSO1",199,0)
 N IEN
"RTN","XUESSO1",200,0)
 Q:$D(^VA(200,NEWDUZ,3,"B","VISITOR"))  ; Quit if user is already marked as visitor
"RTN","XUESSO1",201,0)
 S IEN="+2,"_NEWDUZ_","
"RTN","XUESSO1",202,0)
 S FDR(200.04,IEN,.01)="VISITOR"
"RTN","XUESSO1",203,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",204,0)
 Q
"RTN","XUESSO1",205,0)
 ;
"RTN","XUESSO1",206,0)
ADDW ;SR. Add NETWORK USERNAME to the New Person File
"RTN","XUESSO1",207,0)
 ; ZEXCEPT: FDR,NEWDUZ,NETWORK ;global variables within this routine
"RTN","XUESSO1",208,0)
 N IEN
"RTN","XUESSO1",209,0)
 Q:$G(^VA(200,NEWDUZ,501))'=""  ; Quit if user already has a NETWORK USERNAME
"RTN","XUESSO1",210,0)
 Q:$L($G(NETWORK))<12  ; Quit if NETWORK USERNAME is too short
"RTN","XUESSO1",211,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO1",212,0)
 S FDR(200,IEN,501.1)=$G(NETWORK)
"RTN","XUESSO1",213,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",214,0)
 Q
"RTN","XUESSO1",215,0)
 ;
"RTN","XUESSO1",216,0)
VISM ;SR. Create a multiple for this site number in the VISITED FROM file
"RTN","XUESSO1",217,0)
 ; ZEXCEPT: FDR,NEWDUZ,RMTDUZ,SITE,SITENUM,TODAY ;global variables within this routine
"RTN","XUESSO1",218,0)
 N IEN
"RTN","XUESSO1",219,0)
 S IEN="+3,"_NEWDUZ_","
"RTN","XUESSO1",220,0)
 S FDR(200.06,IEN,.01)=SITENUM
"RTN","XUESSO1",221,0)
 S FDR(200.06,IEN,1)=SITE
"RTN","XUESSO1",222,0)
 S FDR(200.06,IEN,2)=RMTDUZ
"RTN","XUESSO1",223,0)
 S FDR(200.06,IEN,3)=TODAY
"RTN","XUESSO1",224,0)
 ;Do update for all data in UPDT
"RTN","XUESSO1",225,0)
 Q
"RTN","XUESSO1",226,0)
 ;
"RTN","XUESSO1",227,0)
UPDT ;SR. Update all data fields
"RTN","XUESSO1",228,0)
 ; Sets: NEWDUZ=0 if failed to complete update
"RTN","XUESSO1",229,0)
 ; ZEXCEPT: FDR,NAME,NEWDUZ,SITE,SITENUM,PHONE,TODAY,DATIN,NEWREC ;global variables within this routine
"RTN","XUESSO1",230,0)
 N IEN,FDQ
"RTN","XUESSO1",231,0)
 I $D(FDR(200.06)) S IEN=$O(FDR(200.06,""))
"RTN","XUESSO1",232,0)
 E  S IEN=$O(^VA(200,NEWDUZ,8910,"B",SITENUM,0))_","_NEWDUZ_","
"RTN","XUESSO1",233,0)
 S FDR(200.06,IEN,4)=TODAY
"RTN","XUESSO1",234,0)
 I $D(PHONE),($L(PHONE)>4) S FDR(200.06,IEN,5)=PHONE ;p466 Update the phone each time
"RTN","XUESSO1",235,0)
 I $D(SITE) S FDR(200.06,IEN,1)=SITE ;p655 Update the site each time (name changes in INSTITUTION file)
"RTN","XUESSO1",236,0)
 K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO1",237,0)
 I $D(^TMP("DIERR",$J)) D  Q
"RTN","XUESSO1",238,0)
 . N DIK,DA,Y
"RTN","XUESSO1",239,0)
 . I $D(NEWREC) S DIK="^VA(200,",DA=NEWDUZ D ^DIK ;Remove partial entry ;p533
"RTN","XUESSO1",240,0)
 . S NEWDUZ=0 ;Tell failed
"RTN","XUESSO1",241,0)
 Q
"RTN","XUESSO1",242,0)
 ;
"RTN","XUESSO1",243,0)
BULL(NAME,NEWDUZ,SITE,SITENUM,RMTDUZ,PHONE,TODAY) ;INTRINSIC. Send local bulletin if user added
"RTN","XUESSO1",244,0)
 ; Returns: 0 if failed to send bulletin, 1 if success
"RTN","XUESSO1",245,0)
 ; ZEXCEPT: XTMUNIT ;set for unit testing
"RTN","XUESSO1",246,0)
 N XMB
"RTN","XUESSO1",247,0)
 I ($G(NAME)="")!($G(NEWDUZ)="")!($G(SITE)="")!($G(SITENUM)="") Q 0
"RTN","XUESSO1",248,0)
 I ($G(RMTDUZ)="")!($G(PHONE)="")!($G(TODAY)="") Q 0
"RTN","XUESSO1",249,0)
 S XMB="XUVISIT"
"RTN","XUESSO1",250,0)
 S XMB(1)=$$FMTE^XLFDT(TODAY)
"RTN","XUESSO1",251,0)
 S XMB(2)=NAME,XMB(3)=NEWDUZ,XMB(4)=SITE
"RTN","XUESSO1",252,0)
 S XMB(5)=SITENUM,XMB(6)=RMTDUZ,XMB(7)=PHONE
"RTN","XUESSO1",253,0)
 I '$D(XTMUNIT) D ^XMB
"RTN","XUESSO1",254,0)
 Q 1
"RTN","XUESSO1",255,0)
 ;
"RTN","XUESSO1",256,0)
SSNCHECK(SSN) ;INTRINSIC. Check for valid SSN
"RTN","XUESSO1",257,0)
 ; Input: SSN in format "nnnnnnnnn" or "nnn-nn-nnnn"
"RTN","XUESSO1",258,0)
 ; Returns: 0 if SSN is invalid, 1 if success
"RTN","XUESSO1",259,0)
 ; Valid SSN range 001-01-0001 to 899-99-9999 with exceptions (rule as of 2011)
"RTN","XUESSO1",260,0)
 ; Valid Individual Taxpayer Identification Number range 900-01-0001 to 999-99-9999 with exceptions (rule as of 1966)
"RTN","XUESSO1",261,0)
 N X
"RTN","XUESSO1",262,0)
 S X=$TR(SSN,"-")
"RTN","XUESSO1",263,0)
 I $L(X)'=9 Q 0
"RTN","XUESSO1",264,0)
 I $E(X,1,3)'>0 Q 0   ;1st 3 digits cannot be 000
"RTN","XUESSO1",265,0)
 I $E(X,4,5)'>0 Q 0   ;digits 4-5 cannot be 00
"RTN","XUESSO1",266,0)
 I $E(X,6,9)'>0 Q 0   ;digits 6-9 cannot be 0000
"RTN","XUESSO1",267,0)
 I $E(X,1,3)=666 Q 0  ;1st 3 digits cannot be 666
"RTN","XUESSO1",268,0)
 I (X>987654319)&(X<987654330) Q 0  ;SSN range reserved for advertising
"RTN","XUESSO1",269,0)
 I ($E(X,1,3)>899)&($E(X,4,5)=89) Q 0  ;digits 4-5 of ITIN cannot be 89
"RTN","XUESSO1",270,0)
 I ($E(X,1,3)>899)&($E(X,4,5)=93) Q 0  ;digits 4-5 of ITIN cannot be 93
"RTN","XUESSO1",271,0)
 Q 1
"RTN","XUESSO2")
0^1^B108993229^n/a
"RTN","XUESSO2",1,0)
XUESSO2 ;ISD/HGW Enhanced Single Sign-On Utilities ;03/16/15  12:30
"RTN","XUESSO2",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XUESSO2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUESSO2",4,0)
 ;
"RTN","XUESSO2",5,0)
 ; This utility will identify a VistA user for auditing and HIPAA requirements.
"RTN","XUESSO2",6,0)
 ;   NONE of the fields listed below can contain a caret (^) character as it is used as a delimiter in VistA!
"RTN","XUESSO2",7,0)
 ;
"RTN","XUESSO2",8,0)
 ; $$FINDUSER() - At least one of the following attributes is required to uniquely identify an existing user in the
"RTN","XUESSO2",9,0)
 ;                NEW PERSON file (#200):
"RTN","XUESSO2",10,0)
 ;
"RTN","XUESSO2",11,0)
 ;   XATR(7) = unique Security ID [SecID, assigned by Identity and Access Management]
"RTN","XUESSO2",12,0)
 ;   XATR(8) = unique National Provider Identifier [assigned by Centers for Medicare and Medicaid Services (CMS)]
"RTN","XUESSO2",13,0)
 ;   XATR(9) = unique Social Security (SSN) or Taxpayer Identification Number (TIN) [assigned by the Social Security Administration]
"RTN","XUESSO2",14,0)
 ;   XATR(2) and XATR(3) = combination of a unique Subject Organization ID (OID) with a Unique User ID (UID) [see below]
"RTN","XUESSO2",15,0)
 ;
"RTN","XUESSO2",16,0)
 ; $$ADDUSER() - If an existing user is not found in the NEW PERSON file (#200), then the following minimum attributes
"RTN","XUESSO2",17,0)
 ;               are required to provision a new user:
"RTN","XUESSO2",18,0)
 ;
"RTN","XUESSO2",19,0)
 ;   XATR(1) = Subject Organization [free text, 3-50 characters]
"RTN","XUESSO2",20,0)
 ;   XATR(2) = Subject Organization ID [free text, 1-50 characters, unique to Subject Organization]
"RTN","XUESSO2",21,0)
 ;   XATR(3) = Unique User ID [free text, 1-40 characters, unique within OID]
"RTN","XUESSO2",22,0)
 ;   XATR(4) = Subject ID [person's name, to be entered into the NAME field (#.01) of the NEW PERSON file (#200)]
"RTN","XUESSO2",23,0)
 ;
"RTN","XUESSO2",24,0)
 ; The following attributes are optional for adding or updating a user, but may be required by a particular VistA application
"RTN","XUESSO2",25,0)
 ;               for further Identity and Access Management:
"RTN","XUESSO2",26,0)
 ;
"RTN","XUESSO2",27,0)
 ;   XATR(5) = Application ID [Security Phrase to identify and authenticate the client application and establish the context option]
"RTN","XUESSO2",28,0)
 ;   XATR(6) = Network Username [Active Directory Login]
"RTN","XUESSO2",29,0)
 ;   XATR(9) = unique Social Security (SSN) or Taxpayer Identification Number (TIN) [assigned by the Social Security Administration]
"RTN","XUESSO2",30,0)
 ;   XATR(10)= AD UPN [Active Directory User Principle Name (UPN)]
"RTN","XUESSO2",31,0)
 ;   XATR(11)= E-Mail Address
"RTN","XUESSO2",32,0)
 Q
"RTN","XUESSO2",33,0)
 ;
"RTN","XUESSO2",34,0)
FINDUSER(XATR) ;Function. Find user using minimum attributes for user identification
"RTN","XUESSO2",35,0)
 ; Input:  XATR    = Array containing user attributes (see above).
"RTN","XUESSO2",36,0)
 ; Return: Fail    = "-1^Error Message"
"RTN","XUESSO2",37,0)
 ;         Success = IEN of NEW PERSON file (#200) entry (Note: this routine will NOT set DUZ to the identified IEN)
"RTN","XUESSO2",38,0)
 ;
"RTN","XUESSO2",39,0)
 N NEWDUZ,TODAY,DT,IEN,DIC,XUNAME,ERRMSG
"RTN","XUESSO2",40,0)
 S U="^",TODAY=$$HTFM^XLFDT($H),DT=$P(TODAY,"."),NEWDUZ=0,ERRMSG=""
"RTN","XUESSO2",41,0)
 ; Check for unique identifier (SecID, NPI, SSN, or OID+UID)
"RTN","XUESSO2",42,0)
 I ($G(XATR(7))="")&($G(XATR(8))="")&($G(XATR(9))="")&(($G(XATR(2))="")&($G(XATR(3))="")) Q "-1^Array does not contain a unique identifier"
"RTN","XUESSO2",43,0)
 ; Format user attributes to match FileMan fields
"RTN","XUESSO2",44,0)
 S XATR(1)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))                      ;Subject Organization
"RTN","XUESSO2",45,0)
 S XATR(2)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))                        ;Subject Organization ID
"RTN","XUESSO2",46,0)
 S XATR(3)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%")           ;Unique User ID
"RTN","XUESSO2",47,0)
 I $G(XATR(4))'="" D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",48,0)
 . S XUNAME=XATR(4) S XATR(4)=$$FORMAT^XLFNAME7(.XUNAME,3,35,,0,,,2) ;Subject ID converted to standard format
"RTN","XUESSO2",49,0)
 . I $G(XATR(4))'?1U.E1","1U.E S ERRMSG="-1^Subject ID could not be converted to 'LAST,FIRST MIDDLE SUFFIX' VistA standard format"
"RTN","XUESSO2",50,0)
 S XATR(6)=$$UP^XLFSTR($E($G(XATR(6)),1,15))                         ;AD Network Username
"RTN","XUESSO2",51,0)
 S XATR(7)=$TR($E($G(XATR(7)),1,40),"^","%")                         ;SecID
"RTN","XUESSO2",52,0)
 Q $$TALL(.XATR)
"RTN","XUESSO2",53,0)
 ;
"RTN","XUESSO2",54,0)
TALL(XATR) ;Function. Find an existing user.
"RTN","XUESSO2",55,0)
 N OID,UID,SECID,NPI,SSN,NEWDUZ,ERRMSG,AOIUID,X,Y,Z
"RTN","XUESSO2",56,0)
 S X=$ST($ST-1,"PLACE"),Y=$P(X,"+"),Z=$P(X,"^",2),X=Y_"^"_$P(Z," ")
"RTN","XUESSO2",57,0)
 I X'="FINDUSER^XUESSO2" Q "-1^Not authorized"
"RTN","XUESSO2",58,0)
 S OID=$G(XATR(2))
"RTN","XUESSO2",59,0)
 S UID=$G(XATR(3))
"RTN","XUESSO2",60,0)
 S SECID=$G(XATR(7))
"RTN","XUESSO2",61,0)
 S NPI=$G(XATR(8))
"RTN","XUESSO2",62,0)
 S SSN=$G(XATR(9))
"RTN","XUESSO2",63,0)
 S ERRMSG="",NEWDUZ=0,Y=0
"RTN","XUESSO2",64,0)
 ;See if match SECID, to be assigned by Identification and Access Management (IAM) services.
"RTN","XUESSO2",65,0)
 I $L(SECID)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",66,0)
 . S Y=$$SECMATCH(SECID) Q:Y<1
"RTN","XUESSO2",67,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",68,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by SecID" Q
"RTN","XUESSO2",69,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",70,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by SecID" Q
"RTN","XUESSO2",71,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",72,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",73,0)
 . Q
"RTN","XUESSO2",74,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on SECID
"RTN","XUESSO2",75,0)
 ;See if match NPI
"RTN","XUESSO2",76,0)
 I $L(NPI)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",77,0)
 . S Y=+$O(^VA(200,"ANPI",NPI,0)) Q:Y<1
"RTN","XUESSO2",78,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",79,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by NPI" Q
"RTN","XUESSO2",80,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",81,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by NPI" Q
"RTN","XUESSO2",82,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",83,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",84,0)
 . Q
"RTN","XUESSO2",85,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on NPI
"RTN","XUESSO2",86,0)
 ;See if match SSN
"RTN","XUESSO2",87,0)
 I $L(SSN)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",88,0)
 . S Y=+$O(^VA(200,"SSN",SSN,0)) Q:Y<1
"RTN","XUESSO2",89,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",90,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by SSN" Q
"RTN","XUESSO2",91,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",92,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by SSN" Q
"RTN","XUESSO2",93,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",94,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",95,0)
 . Q
"RTN","XUESSO2",96,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on SSN
"RTN","XUESSO2",97,0)
 ;See if match OID+UID ("AOIUID" cross-reference).
"RTN","XUESSO2",98,0)
 S Y=$$AOIUID(OID,UID) I Y>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",99,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",100,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",101,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",102,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",103,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",104,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",105,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",106,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",107,0)
 . Q
"RTN","XUESSO2",108,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on OID+UID
"RTN","XUESSO2",109,0)
 Q "-1^User not found"
"RTN","XUESSO2",110,0)
 ;
"RTN","XUESSO2",111,0)
ADDUSER(XATR) ;Function. Add user using minimum attributes for user identification
"RTN","XUESSO2",112,0)
 ; Input:  XATR    = Array containing user attributes (see above).
"RTN","XUESSO2",113,0)
 ; Return: Fail    = "-1^Error Message"
"RTN","XUESSO2",114,0)
 ;         Success = IEN of NEW PERSON file (#200) entry (Note: this routine will NOT set DUZ to the identified IEN)
"RTN","XUESSO2",115,0)
 ;
"RTN","XUESSO2",116,0)
 N SID,NEWDUZ,ERRMSG
"RTN","XUESSO2",117,0)
 I '$$AUTH() Q "-1^Not an authorized calling routine"
"RTN","XUESSO2",118,0)
 S ERRMSG=""
"RTN","XUESSO2",119,0)
 ;Minimum 4 Attributes are required to add a new user
"RTN","XUESSO2",120,0)
 I $G(XATR(1))="" Q "-1^Subject Organization is required to add a new user"
"RTN","XUESSO2",121,0)
 I $G(XATR(2))="" Q "-1^Subject Organization ID is required to add a new user"
"RTN","XUESSO2",122,0)
 I $G(XATR(3))="" Q "-1^Unique User ID is required to add a new user"
"RTN","XUESSO2",123,0)
 I $G(XATR(4))="" Q "-1^Subject ID is required to add a new user"
"RTN","XUESSO2",124,0)
 ; Format user attributes to match FileMan fields
"RTN","XUESSO2",125,0)
 S XATR(1)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))                      ;Subject Organization
"RTN","XUESSO2",126,0)
 S XATR(2)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))                        ;Subject Organization ID
"RTN","XUESSO2",127,0)
 S XATR(3)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%")           ;Unique User ID
"RTN","XUESSO2",128,0)
 I $G(XATR(4))'="" D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",129,0)
 . S SID=XATR(4) S XATR(4)=$$FORMAT^XLFNAME7(.SID,3,35,,0,,,2) ; Subject ID converted to standard format
"RTN","XUESSO2",130,0)
 . I $G(XATR(4))'?1U.E1","1U.E S ERRMSG="-1^Subject ID could not be converted to 'LAST,FIRST MIDDLE SUFFIX' VistA standard format"
"RTN","XUESSO2",131,0)
 S XATR(6)=$$UP^XLFSTR($E($G(XATR(6)),1,15))                         ;AD Network Username
"RTN","XUESSO2",132,0)
 S XATR(7)=$TR($E($G(XATR(7)),1,40),"^","%")                         ;SecID
"RTN","XUESSO2",133,0)
 S NEWDUZ=$$ADDU(XATR(4)) ;Put the name in the .01 field first
"RTN","XUESSO2",134,0)
 I +NEWDUZ<1 Q "-1^Create of new user record failed"
"RTN","XUESSO2",135,0)
 S ERRMSG=$$UPDU(.XATR,NEWDUZ) ;Then update the remaining fields
"RTN","XUESSO2",136,0)
 I +ERRMSG<0 D CLEAN(NEWDUZ) Q ERRMSG ;Delete the added user if update fails (incomplete record)
"RTN","XUESSO2",137,0)
 I +NEWDUZ<1 Q "-1^Create or update of user record failed"
"RTN","XUESSO2",138,0)
 Q NEWDUZ  ;Every thing OK
"RTN","XUESSO2",139,0)
 ;
"RTN","XUESSO2",140,0)
SECMATCH(SECID) ;Function. Find match for SECID.
"RTN","XUESSO2",141,0)
 N W,Y,Z
"RTN","XUESSO2",142,0)
 I $G(SECID)="" Q ""
"RTN","XUESSO2",143,0)
 S W=$E(SECID,1,30),Y=0,Z=0
"RTN","XUESSO2",144,0)
 F  D  Q:Y=""
"RTN","XUESSO2",145,0)
 . S Y=$O(^VA(200,"ASECID",$G(SECID),Y))
"RTN","XUESSO2",146,0)
 . I Y>0 D  Q
"RTN","XUESSO2",147,0)
 . . I SECID=$P($G(^VA(200,Y,205)),U,1) S Z=Y,Y=""
"RTN","XUESSO2",148,0)
 Q Z
"RTN","XUESSO2",149,0)
 ;
"RTN","XUESSO2",150,0)
AOIUID(OID,UID) ;Function. Find match for OID+UID cross-reference.
"RTN","XUESSO2",151,0)
 N W,X,Y,Z
"RTN","XUESSO2",152,0)
 I ($G(OID)="")!($G(UID)="") Q ""
"RTN","XUESSO2",153,0)
 S W=$E(OID,1,30),X=$E(UID,1,30),Y=0,Z=0
"RTN","XUESSO2",154,0)
 F  D  Q:Y=""
"RTN","XUESSO2",155,0)
 . S Y=$O(^VA(200,"AOIUID",W,X,Y))
"RTN","XUESSO2",156,0)
 . I Y>0 D  Q
"RTN","XUESSO2",157,0)
 . . I (OID=$P($G(^VA(200,Y,205)),U,3))&(UID=$P($G(^VA(200,Y,205)),U,4)) S Z=Y,Y=""
"RTN","XUESSO2",158,0)
 Q Z
"RTN","XUESSO2",159,0)
 ;
"RTN","XUESSO2",160,0)
ADDU(XUNAME) ;Function. Add a new name to the NPF
"RTN","XUESSO2",161,0)
 N DD,DO,DIC,DA,X,Y,DUZZERO
"RTN","XUESSO2",162,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO2",163,0)
 S DIC="^VA(200,",DIC(0)="F",X=XUNAME
"RTN","XUESSO2",164,0)
 ; Get a LOCK. Block if can't get.
"RTN","XUESSO2",165,0)
 L +^VA(200,"HL7"):10 Q:'$T "-1^Addition of new users is blocked"
"RTN","XUESSO2",166,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can add the entry
"RTN","XUESSO2",167,0)
 D FILE^DICN
"RTN","XUESSO2",168,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",169,0)
 L -^VA(200,"HL7")
"RTN","XUESSO2",170,0)
 Q +Y
"RTN","XUESSO2",171,0)
 ;
"RTN","XUESSO2",172,0)
UPDU(XATR,NEWDUZ) ;Function. Update user in the NPF
"RTN","XUESSO2",173,0)
 N DUZZERO,DIC,ERRMSG,FDR,IEN,XUCODE,XUENTRY
"RTN","XUESSO2",174,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO2",175,0)
 S DIC(0)="",ERRMSG=""
"RTN","XUESSO2",176,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO2",177,0)
 I ($G(XATR(1))'="")&($P($G(^VA(200,NEWDUZ,205)),U,2)="") S FDR(200,IEN,205.2)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))  ;Add SORG if missing
"RTN","XUESSO2",178,0)
 I ($G(XATR(2))'="")&($P($G(^VA(200,NEWDUZ,205)),U,3)="") S FDR(200,IEN,205.3)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))    ;Add OID if missing
"RTN","XUESSO2",179,0)
 I ($G(XATR(3))'="")&($P($G(^VA(200,NEWDUZ,205)),U,4)="") S FDR(200,IEN,205.4)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%") ;Add UID if missing
"RTN","XUESSO2",180,0)
 I ($G(XATR(6))'="")&($P($G(^VA(200,NEWDUZ,501)),U,1)="") S FDR(200,IEN,501.1)=$$UP^XLFSTR($E($G(XATR(6)),1,15))     ;Add NETWORK USERNAME if missing
"RTN","XUESSO2",181,0)
 I ($G(XATR(7))'="")&($P($G(^VA(200,NEWDUZ,205.1)),U,1)="") S FDR(200,IEN,205.1)=$TR($E($G(XATR(7)),1,40),"^","%")   ;Add SecID if missing
"RTN","XUESSO2",182,0)
 I ($G(XATR(8))'="")&($P($G(^VA(200,NEWDUZ,"NPI")),U,1)="") S FDR(200,IEN,41.99)=$G(XATR(8))                         ;Add NPI if missing
"RTN","XUESSO2",183,0)
 I ($G(XATR(9))'="")&($P($G(^VA(200,NEWDUZ,1)),U,9)="") D  Q:ERRMSG'="" ERRMSG                                       ;Add SSN if missing
"RTN","XUESSO2",184,0)
 . S ERRMSG=$$ADDS(.FDR,NEWDUZ,$G(XATR(9)))
"RTN","XUESSO2",185,0)
 . I ERRMSG'="" Q
"RTN","XUESSO2",186,0)
 I ($G(XATR(10))'="")&($P($G(^VA(200,NEWDUZ,205)),U,5)="") S FDR(200,IEN,205.5)=$$LOW^XLFSTR($G(XATR(10)))           ;Add ADUPN if missing
"RTN","XUESSO2",187,0)
 I ($G(XATR(11))'="")&($P($G(^VA(200,NEWDUZ,.15)),U,1)="") S FDR(200,IEN,.151)=$$LOW^XLFSTR($G(XATR(11)))            ;Add e-mail if missing
"RTN","XUESSO2",188,0)
 I $G(XATR(5))'="" D  Q:ERRMSG'="" ERRMSG  ;Assign Context Option
"RTN","XUESSO2",189,0)
 . S ERRMSG=$$SETCNTXT(NEWDUZ,$G(XATR(5)))
"RTN","XUESSO2",190,0)
 . I ERRMSG'="" Q
"RTN","XUESSO2",191,0)
 ; Apply all the changes
"RTN","XUESSO2",192,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO2",193,0)
 I $D(FDR) K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO2",194,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",195,0)
 I $D(^TMP("DIERR",$J)) Q "-1^FileMan error"  ;FileMan Error
"RTN","XUESSO2",196,0)
 I +ERRMSG<1 Q ERRMSG ;Couldn't update user
"RTN","XUESSO2",197,0)
 I +NEWDUZ<1 Q "-1^Update of user record failed"
"RTN","XUESSO2",198,0)
 Q ""
"RTN","XUESSO2",199,0)
 ;
"RTN","XUESSO2",200,0)
ADDS(FDR,NEWDUZ,SSN) ;Function. Add a SSN to the NPF
"RTN","XUESSO2",201,0)
 N IEN,ERRMSG
"RTN","XUESSO2",202,0)
 S IEN=NEWDUZ_",",ERRMSG=""
"RTN","XUESSO2",203,0)
 I '$$SSNCHECK^XUESSO1(SSN) Q "-1^SSN is not valid per SSA criteria"
"RTN","XUESSO2",204,0)
 S FDR(200,IEN,9)=SSN
"RTN","XUESSO2",205,0)
 Q ERRMSG
"RTN","XUESSO2",206,0)
 ;
"RTN","XUESSO2",207,0)
CLEAN(Y) ;Subroutine. Clean up (delete) incomplete record in NPF
"RTN","XUESSO2",208,0)
 ; ZEXCEPT: DA,DIK
"RTN","XUESSO2",209,0)
 N DUZZERO
"RTN","XUESSO2",210,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO2",211,0)
 I +Y>0 D
"RTN","XUESSO2",212,0)
 . K DA,DIK S DIK="^VA(200,",DA=+Y D ^DIK
"RTN","XUESSO2",213,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",214,0)
 Q
"RTN","XUESSO2",215,0)
 ;
"RTN","XUESSO2",216,0)
SETCNTXT(NEWDUZ,XAPHRASE) ;Function. Assign Context Option to user Secondary Menu Options
"RTN","XUESSO2",217,0)
 N OPT,XUENTRY,XOPT,XUCONTXT,X
"RTN","XUESSO2",218,0)
 S XUENTRY=$$GETCNTXT(XAPHRASE) I +XUENTRY<0 Q XUENTRY
"RTN","XUESSO2",219,0)
 S XOPT=$P($G(^XWB(8994.5,XUENTRY,0)),U,2)
"RTN","XUESSO2",220,0)
 I XOPT'>0 Q "-1^Context Option must be identified in the REMOTE APPLICATION file"
"RTN","XUESSO2",221,0)
 S XUCONTXT="`"_XOPT
"RTN","XUESSO2",222,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 Q "-1^Context Option not in OPTION file"
"RTN","XUESSO2",223,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUESSO2",224,0)
 I '$D(^VA(200,NEWDUZ,203,"B",XOPT)) D
"RTN","XUESSO2",225,0)
 . ; Have to give the user a delegated option
"RTN","XUESSO2",226,0)
 . N XARR S XARR(200.19,"+1,"_NEWDUZ_",",.01)=XUCONTXT
"RTN","XUESSO2",227,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUESSO2",228,0)
 . ; And now user can give self the context option
"RTN","XUESSO2",229,0)
 . K XARR S XARR(200.03,"+1,"_NEWDUZ_",",.01)=XUCONTXT
"RTN","XUESSO2",230,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUESSO2",231,0)
 . ; But now we have to remove the delegated option
"RTN","XUESSO2",232,0)
 . S OPT=$$FIND1^DIC(200.19,","_NEWDUZ_",","X",XUCONTXT)
"RTN","XUESSO2",233,0)
 . I OPT>0 D
"RTN","XUESSO2",234,0)
 . . K XARR S XARR(200.19,(OPT_","_NEWDUZ_","),.01)="@"
"RTN","XUESSO2",235,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUESSO2",236,0)
 . . Q
"RTN","XUESSO2",237,0)
 . Q
"RTN","XUESSO2",238,0)
 Q ""
"RTN","XUESSO2",239,0)
 ;
"RTN","XUESSO2",240,0)
GETCNTXT(XAPHRASE) ;Function. Identify the REMOTE APPLICATION
"RTN","XUESSO2",241,0)
 N XUCODE,XUENTRY
"RTN","XUESSO2",242,0)
 ;***** When REMOTE APPLICATION file is fixed, change to SHA-256 hash and use new field
"RTN","XUESSO2",243,0)
 S XUCODE=$$EN^XUSHSH($G(XAPHRASE)) ; IA# 10045
"RTN","XUESSO2",244,0)
 S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE") ; Identify Remote Application
"RTN","XUESSO2",245,0)
 I XUENTRY'>0 Q "-1^Application ID must be registered in the REMOTE APPLICATION file"
"RTN","XUESSO2",246,0)
 Q XUENTRY
"RTN","XUESSO2",247,0)
 ;
"RTN","XUESSO2",248,0)
AUTH() ;Function. Check if calling routine is authorized
"RTN","XUESSO2",249,0)
 ; ^XUESSO2 does not address the security issue of user authentication, so a restriction is placed on the calling routine.
"RTN","XUESSO2",250,0)
 ; ZEXCEPT: XTMUNIT,XTU ;set for unit testing
"RTN","XUESSO2",251,0)
 N X,Z
"RTN","XUESSO2",252,0)
 S X=$ST($ST-2,"PLACE"),Z=$P(X,"^",2),X="^"_$P(Z," ")
"RTN","XUESSO2",253,0)
 I X="^XUESSO3" Q 1          ;Authorized Kernel access
"RTN","XUESSO2",254,0)
 I X="^XUSAML" Q 1           ;Authorized for processing SAML Token
"RTN","XUESSO2",255,0)
 I $D(XTMUNIT)!$G(XTU) Q 1   ;Kernel Unit Testing
"RTN","XUESSO2",256,0)
 Q 0
"RTN","XUESSO2",257,0)
 ;
"RTN","XUESSO3")
0^2^B206943521^n/a
"RTN","XUESSO3",1,0)
XUESSO3 ;ISD/HGW Enhanced Single Sign-On Utilities ;03/30/15  11:52
"RTN","XUESSO3",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XUESSO3",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUESSO3",4,0)
 ;
"RTN","XUESSO3",5,0)
 Q
"RTN","XUESSO3",6,0)
IAMFU(Y,NAME,SSN,DOB,ADUPN,SECID,AUTHCODE) ;RPC. XUS IAM FIND USER
"RTN","XUESSO3",7,0)
 ;Identity and Access Management Find User RPC for SSOi provisioning
"RTN","XUESSO3",8,0)
 ; The XUSHOWSSN key is required to do lookups using PII (SSN or DoB).
"RTN","XUESSO3",9,0)
 ; Input:  One or more of Name, SSN, DoB, AD UPN, and/or SecID must be provided.
"RTN","XUESSO3",10,0)
 ;           AUTHCODE    = Security Phrase for IAM Provisioning Application
"RTN","XUESSO3",11,0)
 ; Return: Array of values, where
"RTN","XUESSO3",12,0)
 ;           Fail    Y(0)="-1^Error Message"
"RTN","XUESSO3",13,0)
 ;           Success Y(0)=total number of entries found, from "0" to "n".
"RTN","XUESSO3",14,0)
 ;                   Y(1) through Y(n)="DUZ^Name^SSN^Dob^AD UPN^SecID"
"RTN","XUESSO3",15,0)
 ;
"RTN","XUESSO3",16,0)
 ; ZEXCEPT: %DT
"RTN","XUESSO3",17,0)
 N X,XARRY,XCOUNT,XI,XJ,XNAME,XRESULT,XSHOWSSN,XTEMP,XUENTRY
"RTN","XUESSO3",18,0)
 I DUZ'>1 S Y(0)="-1^Unauthorized access" Q
"RTN","XUESSO3",19,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO3",20,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM PROVISIONING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",21,0)
 S XSHOWSSN=$$KCHK^XUSRB("XUSHOWSSN")
"RTN","XUESSO3",22,0)
 S XCOUNT=0
"RTN","XUESSO3",23,0)
 ; 1. Search by NAME
"RTN","XUESSO3",24,0)
 I $G(NAME)'="" D
"RTN","XUESSO3",25,0)
 . S XNAME=NAME
"RTN","XUESSO3",26,0)
 . S NAME=$$FORMAT^XLFNAME7(.XNAME,3,35,,0,,,2) ; NAME converted to standard format
"RTN","XUESSO3",27,0)
 . D LIST^DIC(200,"","@;.01","","","",NAME,"","","","XTEMP")
"RTN","XUESSO3",28,0)
 . S XJ=+$G(XTEMP("DILIST",0))
"RTN","XUESSO3",29,0)
 . I XJ>0 S XI=1 F  D  Q:+XI'>0
"RTN","XUESSO3",30,0)
 . . S XI=$O(XTEMP("DILIST",XI)) Q:+XI'>0
"RTN","XUESSO3",31,0)
 . . S XJ=0 F  D  Q:+XJ'>0
"RTN","XUESSO3",32,0)
 . . . S XJ=$O(XTEMP("DILIST",XI,XJ)) Q:+XJ'>0
"RTN","XUESSO3",33,0)
 . . . S XRESULT=$G(XTEMP("DILIST",XI,XJ))
"RTN","XUESSO3",34,0)
 . . . I XRESULT>0 D ADDTOLST(.Y,.XCOUNT,XSHOWSSN,XRESULT)
"RTN","XUESSO3",35,0)
 ; 2. Search by SSN
"RTN","XUESSO3",36,0)
 I ($G(SSN)'="")&($G(XSHOWSSN)=1) D
"RTN","XUESSO3",37,0)
 . S XARRY(9)=SSN
"RTN","XUESSO3",38,0)
 . S XRESULT=$$FINDUSER^XUESSO2(.XARRY)
"RTN","XUESSO3",39,0)
 . I +XRESULT>0 D ADDTOLST(.Y,.XCOUNT,XSHOWSSN,XRESULT)
"RTN","XUESSO3",40,0)
 . K XARRY(9)
"RTN","XUESSO3",41,0)
 ; 3. Search by DOB
"RTN","XUESSO3",42,0)
 I ($G(DOB)'="")&($G(XSHOWSSN)=1) D
"RTN","XUESSO3",43,0)
 . S X=DOB,%DT="PX" D ^%DT S X=Y,XRESULT=0
"RTN","XUESSO3",44,0)
 . F  D  Q:XRESULT=""
"RTN","XUESSO3",45,0)
 . . S XRESULT=$O(^VA(200,XRESULT)) Q:XRESULT=""
"RTN","XUESSO3",46,0)
 . . I $P($G(^VA(200,XRESULT,1)),U,3)=X D ADDTOLST(.Y,.XCOUNT,XSHOWSSN,XRESULT)
"RTN","XUESSO3",47,0)
 ; 4. Search by ADUPN
"RTN","XUESSO3",48,0)
 I $G(ADUPN)'="" D
"RTN","XUESSO3",49,0)
 . S X=$$LOW^XLFSTR(ADUPN),XRESULT=0
"RTN","XUESSO3",50,0)
 . F  D  Q:XRESULT=""
"RTN","XUESSO3",51,0)
 . . S XRESULT=$O(^VA(200,"ADUPN",X,XRESULT))
"RTN","XUESSO3",52,0)
 . . I XRESULT>0 D ADDTOLST(.Y,.XCOUNT,XSHOWSSN,XRESULT)
"RTN","XUESSO3",53,0)
 ; 5. Search by SECID
"RTN","XUESSO3",54,0)
 I $G(SECID)'="" D
"RTN","XUESSO3",55,0)
 . S XARRY(7)=SECID
"RTN","XUESSO3",56,0)
 . S XRESULT=$$FINDUSER^XUESSO2(.XARRY)
"RTN","XUESSO3",57,0)
 . I +XRESULT>0 D ADDTOLST(.Y,.XCOUNT,XSHOWSSN,XRESULT)
"RTN","XUESSO3",58,0)
 . K XARRY(7)
"RTN","XUESSO3",59,0)
 ; 6. Return results
"RTN","XUESSO3",60,0)
 S Y(0)=XCOUNT
"RTN","XUESSO3",61,0)
 Q
"RTN","XUESSO3",62,0)
 ;
"RTN","XUESSO3",63,0)
IAMDU(Y,DISPDUZ,AUTHCODE) ;RPC. XUS IAM DISPLAY USER
"RTN","XUESSO3",64,0)
 ;Identity and Access Management Display User RPC for SSOi provisioning
"RTN","XUESSO3",65,0)
 ; Input:  DISPDUZ         = DUZ (IEN) of user to be displayed
"RTN","XUESSO3",66,0)
 ;         AUTHCODE        = Security Phrase for IAM Provisioning Application
"RTN","XUESSO3",67,0)
 ; Return: Array of values, where
"RTN","XUESSO3",68,0)
 ;           Fail    Y(0)  ="-1^Error Message"
"RTN","XUESSO3",69,0)
 ;           Success Y(0)  = 1
"RTN","XUESSO3",70,0)
 ;                   Y(1)  = NAME
"RTN","XUESSO3",71,0)
 ;                   Y(2)  = INITIAL
"RTN","XUESSO3",72,0)
 ;                   Y(3)  = TITLE
"RTN","XUESSO3",73,0)
 ;                   Y(4)  = NICK NAME
"RTN","XUESSO3",74,0)
 ;                   Y(5)  = SSN (<Hidden> if caller does not have XUSHOWSSN key)
"RTN","XUESSO3",75,0)
 ;                   Y(6)  = DOB (<Hidden> if caller does not have XUSHOWSSN key)
"RTN","XUESSO3",76,0)
 ;                   Y(7)  = DEGREE
"RTN","XUESSO3",77,0)
 ;                   Y(8)  = MAIL CODE
"RTN","XUESSO3",78,0)
 ;                   Y(9)  = DISUSER
"RTN","XUESSO3",79,0)
 ;                   Y(10) = TERMINATION DATE
"RTN","XUESSO3",80,0)
 ;                   Y(11) = TERMINATION REASON
"RTN","XUESSO3",81,0)
 ;                   Y(12) = PRIMARY MENU OPTION
"RTN","XUESSO3",82,0)
 ;                   Y(13,0) = SECONDARY MENU OPTION (number of entries)
"RTN","XUESSO3",83,0)
 ;                   Y(13,1) to Y(13,n) = SECONDARY MENU OPTION entries
"RTN","XUESSO3",84,0)
 ;                   Y(14) = FILE MANAGER ACCESS CODE
"RTN","XUESSO3",85,0)
 ;                   Y(15,0) = DIVISION (number of entries)
"RTN","XUESSO3",86,0)
 ;                   Y(15,1) to Y(15,n) = DIVISION entries
"RTN","XUESSO3",87,0)
 ;                   Y(16) = SERVICE/SECTION
"RTN","XUESSO3",88,0)
 ;                   Y(17) = SUBJECT ALTERNATIVE NAME (PIV CARD)
"RTN","XUESSO3",89,0)
 ;                   Y(18) = SECID
"RTN","XUESSO3",90,0)
 ;                   Y(19) = SUBJECT ORGANIZATION
"RTN","XUESSO3",91,0)
 ;                   Y(20) = SUBJECT ORGANIZATION ID
"RTN","XUESSO3",92,0)
 ;                   Y(21) = UNIQUE USER ID
"RTN","XUESSO3",93,0)
 ;                   Y(22) = NETWORK USERNAME
"RTN","XUESSO3",94,0)
 ;                   Y(23) = AD UPN
"RTN","XUESSO3",95,0)
 ;
"RTN","XUESSO3",96,0)
 N XI,XJ,XSHOWSSN,XTMP,XTMP1,XTMP205,XTMP5,XTMP501,XUENTRY
"RTN","XUESSO3",97,0)
 I DUZ'>1 S Y(0)="-1^Unauthorized access" Q
"RTN","XUESSO3",98,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO3",99,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM PROVISIONING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",100,0)
 I $G(DISPDUZ)'>0 S Y(0)="-1^User not selected" Q
"RTN","XUESSO3",101,0)
 I $G(^VA(200,DISPDUZ,0))="" S Y(0)="-1^User not found" Q
"RTN","XUESSO3",102,0)
 S XSHOWSSN=$$KCHK^XUSRB("XUSHOWSSN")
"RTN","XUESSO3",103,0)
 S XTMP=$G(^VA(200,DISPDUZ,0))
"RTN","XUESSO3",104,0)
 S XTMP1=$G(^VA(200,DISPDUZ,1))
"RTN","XUESSO3",105,0)
 S XTMP5=$G(^VA(200,DISPDUZ,5))
"RTN","XUESSO3",106,0)
 S XTMP205=$G(^VA(200,DISPDUZ,205))
"RTN","XUESSO3",107,0)
 S XTMP501=$G(^VA(200,DISPDUZ,501))
"RTN","XUESSO3",108,0)
 S Y(0)=1
"RTN","XUESSO3",109,0)
 S Y(1)=$P($G(XTMP),U,1)
"RTN","XUESSO3",110,0)
 S Y(2)=$P($G(XTMP),U,2)
"RTN","XUESSO3",111,0)
 S Y(3)=$P($G(XTMP),U,9)
"RTN","XUESSO3",112,0)
 I $G(Y(3))>0 S Y(3)=$P($G(^DIC(3.1,Y(3),0)),U,1)
"RTN","XUESSO3",113,0)
 S Y(4)=$P($G(^VA(200,DISPDUZ,.1)),U,4)
"RTN","XUESSO3",114,0)
 S Y(5)="<Hidden>" I $G(XSHOWSSN)=1 S Y(5)=$P($G(XTMP1),U,9)
"RTN","XUESSO3",115,0)
 S Y(6)="<Hidden>" I $G(XSHOWSSN)=1 S Y(6)=$$FMTE^XLFDT($P($G(XTMP1),U,3),"D")
"RTN","XUESSO3",116,0)
 S Y(7)=$P($G(^VA(200,DISPDUZ,3.1)),U,6)
"RTN","XUESSO3",117,0)
 S Y(8)=$P($G(XTMP5),U,2)
"RTN","XUESSO3",118,0)
 S Y(9)=$P($G(XTMP),U,7)
"RTN","XUESSO3",119,0)
 S Y(10)=$P($G(XTMP),U,11)
"RTN","XUESSO3",120,0)
 S Y(11)=$P($G(XTMP),U,13)
"RTN","XUESSO3",121,0)
 S Y(12)=$P($G(^VA(200,DISPDUZ,201)),U,1)
"RTN","XUESSO3",122,0)
 I $G(Y(12))>0 S Y(12)=$P($G(^DIC(19,Y(12),0)),U,1)
"RTN","XUESSO3",123,0)
 S Y(13,0)=$P($G(^VA(200,DISPDUZ,203,0)),U,4) ;number of entries
"RTN","XUESSO3",124,0)
 I Y(13,0)>0 S (XI,XJ)=0 F  D  Q:XI=""
"RTN","XUESSO3",125,0)
 . S XJ=XJ+1,XI=$O(^VA(200,DISPDUZ,203,XI))
"RTN","XUESSO3",126,0)
 . I XI'="" S Y(13,XJ)=$P($G(^VA(200,DISPDUZ,203,XI,0)),U,1)
"RTN","XUESSO3",127,0)
 . I $G(Y(13,XJ))>0 S Y(13,XJ)=$P($G(^DIC(19,Y(13,XJ),0)),U,1)
"RTN","XUESSO3",128,0)
 S Y(14)=$P($G(XTMP),U,4)
"RTN","XUESSO3",129,0)
 S Y(15,0)=$P($G(^VA(200,DISPDUZ,2,0)),U,4) ;number of entries
"RTN","XUESSO3",130,0)
 I Y(15,0)>0 S (XI,XJ)=0 F  D  Q:XI=""
"RTN","XUESSO3",131,0)
 . S XJ=XJ+1,XI=$O(^VA(200,DISPDUZ,2,XI))
"RTN","XUESSO3",132,0)
 . I XI'="" S Y(15,XJ)=$P($G(^VA(200,DISPDUZ,2,XI,0)),U,1)
"RTN","XUESSO3",133,0)
 . I $G(Y(15,XJ))>0 S Y(15,XJ)=$P($G(^DIC(4,Y(15,XJ),0)),U,1)
"RTN","XUESSO3",134,0)
 S Y(16)=$P($G(XTMP5),U,1)
"RTN","XUESSO3",135,0)
 I $G(Y(16))>0 S Y(16)=$P($G(^DIC(49,Y(16),0)),U,1)
"RTN","XUESSO3",136,0)
 S Y(17)=$P($G(XTMP501),U,2)
"RTN","XUESSO3",137,0)
 S Y(18)=$TR($P($G(XTMP205),U,1),"%","^")
"RTN","XUESSO3",138,0)
 S Y(19)=$P($G(XTMP205),U,2)
"RTN","XUESSO3",139,0)
 S Y(20)=$P($G(XTMP205),U,3)
"RTN","XUESSO3",140,0)
 S Y(21)=$P($G(XTMP205),U,4)
"RTN","XUESSO3",141,0)
 S Y(22)=$P($G(XTMP501),U,1)
"RTN","XUESSO3",142,0)
 S Y(23)=$P($G(XTMP205),U,5)
"RTN","XUESSO3",143,0)
 Q
"RTN","XUESSO3",144,0)
 ;
"RTN","XUESSO3",145,0)
IAMAU(Y,NAME,SECID,EMAIL,ADUPN,SSN,DOB,STATION,AUTHCODE) ;RPC. XUS IAM ADD USER
"RTN","XUESSO3",146,0)
 ;Identity and Access Management Add User RPC for SSOi provisioning
"RTN","XUESSO3",147,0)
 ; The XUSPF200 security key is required to add a user without an SSN (file #200 special privileges).
"RTN","XUESSO3",148,0)
 ; Input:  NAME      = SubjectID to be used in SAML Token
"RTN","XUESSO3",149,0)
 ;         SECID     = UniqueUserID to be used in SSOi or SSOe SAML Token
"RTN","XUESSO3",150,0)
 ;         EMAIL     = User's e-mail address
"RTN","XUESSO3",151,0)
 ;         ADUPN     = Active Directory User Principle Name
"RTN","XUESSO3",152,0)
 ;         SSN       = User's Social Security Number or Taxpayer Identification Number
"RTN","XUESSO3",153,0)
 ;         DOB       = User's Date of Birth
"RTN","XUESSO3",154,0)
 ;         STATION   = NEW PERSON file (#200) DIVISION
"RTN","XUESSO3",155,0)
 ;         AUTHCODE  = Security Phrase for IAM Provisioning Application
"RTN","XUESSO3",156,0)
 ; Return: Fail    Y = "-1^Error Message"
"RTN","XUESSO3",157,0)
 ;         Success Y = "DUZ^DIVISION"
"RTN","XUESSO3",158,0)
 ;
"RTN","XUESSO3",159,0)
 ; ZEXCEPT: %DT
"RTN","XUESSO3",160,0)
 N DIC,DUZZERO,ERRMSG,FDR,IEN,NEWDUZ,X,XARRAY,XDIV,XUENTRY,Y
"RTN","XUESSO3",161,0)
 I DUZ'>1 S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",162,0)
 I '+$$ACTIVE^XUSER(DUZ) S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",163,0)
 I ('$$SSNCHECK^XUESSO1($G(SSN)))&('$$KCHK^XUSRB("XUSPF200")) S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",164,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO3",165,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM PROVISIONING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",166,0)
 I $G(NAME)="" S Y="-1^Missing SubjectID" Q
"RTN","XUESSO3",167,0)
 I $G(SECID)="" S Y="-1^Missing SecID" Q
"RTN","XUESSO3",168,0)
 S XARRAY(1)="Department of Veterans Affairs"
"RTN","XUESSO3",169,0)
 S XARRAY(2)="urn:oid:2.16.840.1.113883.4.349"
"RTN","XUESSO3",170,0)
 S XARRAY(3)=SECID
"RTN","XUESSO3",171,0)
 S XARRAY(4)=NAME
"RTN","XUESSO3",172,0)
 S XARRAY(7)=SECID
"RTN","XUESSO3",173,0)
 S XARRAY(9)=$G(SSN)
"RTN","XUESSO3",174,0)
 S Y=$$FINDUSER^XUESSO2(.XARRAY) ;See if user already exists
"RTN","XUESSO3",175,0)
 I +Y<0 I $P(Y,U,2)'="User not found" Q
"RTN","XUESSO3",176,0)
 I +Y>0 S Y="-1^User already exists" Q
"RTN","XUESSO3",177,0)
 S Y=$$ADDUSER^XUESSO2(.XARRAY) ;Add the user
"RTN","XUESSO3",178,0)
 I +Y<0 Q
"RTN","XUESSO3",179,0)
 S NEWDUZ=Y
"RTN","XUESSO3",180,0)
 ;Use FM calls to edit the user with the remaining information
"RTN","XUESSO3",181,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO3",182,0)
 S DIC(0)="",ERRMSG=""
"RTN","XUESSO3",183,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO3",184,0)
 I $G(EMAIL)'="" S FDR(200,IEN,.151)=$$LOW^XLFSTR(EMAIL)
"RTN","XUESSO3",185,0)
 I $G(ADUPN)'="" S FDR(200,IEN,205.5)=$$LOW^XLFSTR(ADUPN)
"RTN","XUESSO3",186,0)
 I $G(DOB)'="" S X=DOB S %DT="EX" D ^%DT S DOB=Y S FDR(200,IEN,5)=DOB
"RTN","XUESSO3",187,0)
 I $G(STATION)'="" D
"RTN","XUESSO3",188,0)
 . S XDIV="" S XDIV=$O(^DIC(4,"B",$G(STATION),XDIV))
"RTN","XUESSO3",189,0)
 . I XDIV'="" D
"RTN","XUESSO3",190,0)
 . . S FDR(200.02,"+3,"_IEN,.01)=XDIV
"RTN","XUESSO3",191,0)
 . . S FDR(200.02,"+3,"_IEN,.02)=1
"RTN","XUESSO3",192,0)
 ; Apply all the changes
"RTN","XUESSO3",193,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO3",194,0)
 I $D(FDR) K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO3",195,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO3",196,0)
 I $D(^TMP("DIERR",$J)) S Y="-1^FileMan error for DUZ="_NEWDUZ Q  ;FileMan Error
"RTN","XUESSO3",197,0)
 I +ERRMSG<0 S Y=ERRMSG_" for DUZ="_NEWDUZ Q  ;Couldn't update user
"RTN","XUESSO3",198,0)
 I +NEWDUZ<1 S Y="-1^Update failed for DUZ="_NEWDUZ Q
"RTN","XUESSO3",199,0)
 S Y=NEWDUZ_U_STATION
"RTN","XUESSO3",200,0)
 Q
"RTN","XUESSO3",201,0)
 ;
"RTN","XUESSO3",202,0)
IAMEU(Y,INARRY,AUTHCODE) ;RPC. XUS IAM EDIT USER
"RTN","XUESSO3",203,0)
 ;Identity and Access Management Edit User RPC for SSOi provisioning
"RTN","XUESSO3",204,0)
 ; The XUSPF200 security key is required to edit a user without an SSN (file #200 special privileges).
"RTN","XUESSO3",205,0)
 ; The XUSHOWSSN security key is required allow lookup, display, and edit of PII (SSN and DoB).
"RTN","XUESSO3",206,0)
 ; Input:  INARRY    = Array: The IAM RSD is unclear what that data is or how it will be formatted.
"RTN","XUESSO3",207,0)
 ;         AUTHCODE  = Security Phrase for IAM Provisioning Application
"RTN","XUESSO3",208,0)
 ; Return: Fail    Y = "-1^Error Message"
"RTN","XUESSO3",209,0)
 ;         Success Y = The IAM RSD is unclear what is expected of a successful edit.
"RTN","XUESSO3",210,0)
 ;
"RTN","XUESSO3",211,0)
 N XUENTRY
"RTN","XUESSO3",212,0)
 I DUZ'>1 S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",213,0)
 I '+$$ACTIVE^XUSER(DUZ) S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",214,0)
 I '$$KCHK^XUSRB("XUSHOWSSN") S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",215,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO3",216,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM PROVISIONING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",217,0)
 ;***** Set up call to find an existing user
"RTN","XUESSO3",218,0)
 ;S Y=$$FINDUSER^XUESSO2(.XARRAY) ;Example call to identify user
"RTN","XUESSO3",219,0)
 ;***** Or (preferred), look up user by DUZ (require application to do a FIND, select, and DISPLAY before EDIT)
"RTN","XUESSO3",220,0)
 ;***** If SSN is not passed, look up SSN of current user and check for security key. Also check format of SSN.
"RTN","XUESSO3",221,0)
 ;I ('$$SSNCHECK^XUESSO1($G(SSN)))&('$$KCHK^XUSRB("XUSPF200")) S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",222,0)
 ;***** Make sure fields are formatted correctly for Update into NPF
"RTN","XUESSO3",223,0)
 ;***** Use FM calls to edit the user with the remaining information
"RTN","XUESSO3",224,0)
 ;***** Must include a means to change name and to delete (empty) fields with erroneous info
"RTN","XUESSO3",225,0)
 S Y="-1^Not implemented yet"
"RTN","XUESSO3",226,0)
 Q
"RTN","XUESSO3",227,0)
 ;
"RTN","XUESSO3",228,0)
IAMBU(Y,SECID,AUTHCODE) ;RPC. XUS IAM BIND USER
"RTN","XUESSO3",229,0)
 ;Identity and Access Management Edit User RPC for SSOi binding
"RTN","XUESSO3",230,0)
 ; Input:  SECID     = unique Security ID [SecID, assigned by Identity and Access Management]
"RTN","XUESSO3",231,0)
 ;         AUTHCODE  = Security Phrase for IAM Binding Application
"RTN","XUESSO3",232,0)
 ; Return: Fail    Y = "-1^Error Message"
"RTN","XUESSO3",233,0)
 ;         Success Y = DUZ
"RTN","XUESSO3",234,0)
 ;
"RTN","XUESSO3",235,0)
 N XARRY,XRESULT,XUENTRY
"RTN","XUESSO3",236,0)
 I DUZ'>1 S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",237,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO3",238,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM BINDING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO3",239,0)
 S XARRY(1)="Department of Veterans Affairs" ;Subject Organization
"RTN","XUESSO3",240,0)
 S XARRY(2)="urn:oid:2.16.840.1.113883.4.349" ;Subject Organization ID
"RTN","XUESSO3",241,0)
 S XARRY(3)=$G(SECID) ;Unique User ID
"RTN","XUESSO3",242,0)
 S XARRY(7)=$G(SECID) ;SecID
"RTN","XUESSO3",243,0)
 I $G(SECID)'="" S XRESULT=$$FINDUSER^XUESSO2(.XARRY)
"RTN","XUESSO3",244,0)
 I XRESULT'=DUZ S Y="-1^Another user has the same SecID" Q
"RTN","XUESSO3",245,0)
 S Y=XRESULT
"RTN","XUESSO3",246,0)
 Q
"RTN","XUESSO3",247,0)
 ;
"RTN","XUESSO3",248,0)
ESSO(RET,DOC) ; RPC. XUS ESSO VALIDATE
"RTN","XUESSO3",249,0)
 ;This API/RPC uses the VA Identity and Access Management (IAM) SAML token definition version 1.2 attributes
"RTN","XUESSO3",250,0)
 ; from a STS SAML token for user sign-on.
"RTN","XUESSO3",251,0)
 ; Input:     DOC    = Closed reference to global root containing XML document (loaded STS SAML Token).
"RTN","XUESSO3",252,0)
 ;                     See $$EN^MXMLDOM instructions in the VistA Kernel Developers Guide for required
"RTN","XUESSO3",253,0)
 ;                     format of the DOC global.
"RTN","XUESSO3",254,0)
 ; Return:    RET(0) = DUZ if sign-on was OK, zero if not OK.
"RTN","XUESSO3",255,0)
 ;            RET(1) = (0=OK, 1,2...=Can't sign on for some reason).
"RTN","XUESSO3",256,0)
 ;            RET(2) = Verify Code needs changing.
"RTN","XUESSO3",257,0)
 ;            RET(3) = Message.
"RTN","XUESSO3",258,0)
 ;            RET(4) = 0
"RTN","XUESSO3",259,0)
 ;            RET(5) = count of the number of lines of text, zero if none.
"RTN","XUESSO3",260,0)
 ;            RET(5+n) = message text.
"RTN","XUESSO3",261,0)
 ;
"RTN","XUESSO3",262,0)
 N VCCH,XARRY,XDIV,XDIVA,XOPT,XUDEV,XUF,XUHOME,XUM,XUMSG,XUVOL,X,Y
"RTN","XUESSO3",263,0)
 S U="^",RET(0)=0,RET(5)=0,XUF=$G(XUF,0),XUM=0,XUMSG=0,XUDEV=0
"RTN","XUESSO3",264,0)
 ; Begin user sign-on
"RTN","XUESSO3",265,0)
 S DUZ=0,DUZ(0)="",VCCH=0 D NOW^XUSRB
"RTN","XUESSO3",266,0)
 S XOPT=$$STATE^XWBSEC("XUS XOPT")
"RTN","XUESSO3",267,0)
 S XUVOL=^%ZOSF("VOL"),XUMSG=$$INHIBIT^XUSRB() I XUMSG S XUM=1 G VAX^XUSRB ;Logon inhibited
"RTN","XUESSO3",268,0)
 ;3 Strikes
"RTN","XUESSO3",269,0)
 I $$LKCHECK^XUSTZIP($G(IO("IP"))) S XUMSG=7 G VAX^XUSRB ;IP locked
"RTN","XUESSO3",270,0)
 S DUZ=$$EN^XUSAML(DOC) ;Process SAML token
"RTN","XUESSO3",271,0)
 I DUZ'>0,$$FAIL^XUS3 D  G VAX^XUSRB
"RTN","XUESSO3",272,0)
 . S XUM=1,XUMSG=7,X=$$RA^XUSTZ H 5 ;3 Strikes
"RTN","XUESSO3",273,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX^XUSRB ;Check if user is locked out, terminated, or disusered
"RTN","XUESSO3",274,0)
 S VCCH=$$VCVALID^XUSRB() ;Check if VC needs changing
"RTN","XUESSO3",275,0)
 I DUZ>0 S XUMSG=$$POST^XUSRB(1)
"RTN","XUESSO3",276,0)
 I XUMSG>0 S DUZ=0,VCCH=0 ;If can't sign-on, don't tell need to change VC
"RTN","XUESSO3",277,0)
 I 'XUMSG,VCCH S XUMSG=12 D SET^XWBSEC("XUS DUZ",DUZ) ;Need to change VC
"RTN","XUESSO3",278,0)
 S RET(0)=DUZ
"RTN","XUESSO3",279,0)
 G VAX^XUSRB ;Fork to normal sign-on
"RTN","XUESSO3",280,0)
 Q
"RTN","XUESSO3",281,0)
 ;
"RTN","XUESSO3",282,0)
ADDTOLST(XR,XCOUNT,XSHOWSSN,XRESULT) ;Subroutine. To be used exclusively by IAMFU^XUESSO3.
"RTN","XUESSO3",283,0)
 N XFLAG,XI,XODOB,XONME,XOSEC,XOSSN,XOUPN
"RTN","XUESSO3",284,0)
 S XFLAG=0
"RTN","XUESSO3",285,0)
 F XI=1:1:XCOUNT D
"RTN","XUESSO3",286,0)
 . I XRESULT=$P($G(XR(XI)),U,1) S XFLAG=1 ;Already in list, do not add again
"RTN","XUESSO3",287,0)
 I XFLAG=0 D
"RTN","XUESSO3",288,0)
 . S XCOUNT=XCOUNT+1
"RTN","XUESSO3",289,0)
 . S XONME=$$NAME^XUSER(XRESULT,"F") ;Name
"RTN","XUESSO3",290,0)
 . S XOSSN="<Hidden>" I $G(XSHOWSSN)=1 S XOSSN=$P($G(^VA(200,XRESULT,1)),U,9) ;SSN
"RTN","XUESSO3",291,0)
 . S XODOB="<Hidden>" I $G(XSHOWSSN)=1 S XODOB=$$FMTE^XLFDT($P($G(^VA(200,XRESULT,1)),U,3),"D") ;DoB
"RTN","XUESSO3",292,0)
 . S XOUPN=$P($G(^VA(200,XRESULT,205)),U,5) ;AD UPN
"RTN","XUESSO3",293,0)
 . S XOSEC=$TR($P($G(^VA(200,XRESULT,205)),U,1),"%","^") ;SecID
"RTN","XUESSO3",294,0)
 . S XR(XCOUNT)=XRESULT_"^"_XONME_"^"_XOSSN_"^"_XODOB_"^"_XOUPN_"^"_XOSEC
"RTN","XUESSO3",295,0)
 Q
"RTN","XUESSO3",296,0)
 ;
"RTN","XUESSO3",297,0)
VACAA(INARRAY,AUTHCODE) ; Veterans Access, Choice, and Accountability Act of 2014 (VACAA)
"RTN","XUESSO3",298,0)
 ; One-time use for XU*8*655, remove with next patch.
"RTN","XUESSO3",299,0)
 ; VACAA will access this function from a KIDS post-install routine.
"RTN","XUESSO3",300,0)
 ; Input:  INARRAY(1)  = NAME
"RTN","XUESSO3",301,0)
 ;         INARRAY(2)  = DEGREE
"RTN","XUESSO3",302,0)
 ;         INARRAY(3)  = SEX
"RTN","XUESSO3",303,0)
 ;         INARRAY(4)  = STREET ADDRESS 1
"RTN","XUESSO3",304,0)
 ;         INARRAY(5)  = STREET ADDRESS 2
"RTN","XUESSO3",305,0)
 ;         INARRAY(6)  = STREET ADDRESS 3
"RTN","XUESSO3",306,0)
 ;         INARRAY(7)  = CITY
"RTN","XUESSO3",307,0)
 ;         INARRAY(8)  = STATE
"RTN","XUESSO3",308,0)
 ;         INARRAY(9)  = ZIP
"RTN","XUESSO3",309,0)
 ;         INARRAY(10) = NPI
"RTN","XUESSO3",310,0)
 ;         INARRAY(11) = (Optional) TAX ID
"RTN","XUESSO3",311,0)
 ;         INARRAY(12) = DEA #
"RTN","XUESSO3",312,0)
 ;         INARRAY(13) = TW or HN
"RTN","XUESSO3",313,0)
 ;         AUTHCODE    = String authorization phrase
"RTN","XUESSO3",314,0)
 ; Return: Fail        = "-1^Error Message"
"RTN","XUESSO3",315,0)
 ;         Success     = IEN of NEW PERSON file (#200) entry (Note: this routine will NOT set DUZ to the identified IEN)
"RTN","XUESSO3",316,0)
 ;
"RTN","XUESSO3",317,0)
 ; ZEXCEPT: DA,DD,DIC,DIE,DINUM,DLAYGO,DO,DR
"RTN","XUESSO3",318,0)
 N FADA,FDR,IEN,X,XATTRIB,XDUZ,XIP,XSEC,XSTATE,XTAXID,Y
"RTN","XUESSO3",319,0)
 I $$SHAHASH^XUSHSH(256,AUTHCODE)'="69AB5CA7FF413ACA7422D52E466B0C1220BE64C25AFB354E2915A572E251E560" Q "-1^Unauthorized access"
"RTN","XUESSO3",320,0)
 I $G(INARRAY(1))="" Q "-1^Missing Name"
"RTN","XUESSO3",321,0)
 I $G(INARRAY(4))="" Q "-1^Missing Street Addr"
"RTN","XUESSO3",322,0)
 I $G(INARRAY(7))="" Q "-1^Missing City"
"RTN","XUESSO3",323,0)
 I $G(INARRAY(8))="" Q "-1^Missing State"
"RTN","XUESSO3",324,0)
 I $G(INARRAY(9))="" Q "-1^Missing Zip Code"
"RTN","XUESSO3",325,0)
 I $G(INARRAY(10))="" Q "-1^Missing NPI"
"RTN","XUESSO3",326,0)
 I '$$CHKDGT^XUSNPI($G(INARRAY(10))) Q "-1^Invalid NPI"
"RTN","XUESSO3",327,0)
 S XATTRIB(8)=$G(INARRAY(10)) ; NPI
"RTN","XUESSO3",328,0)
 S XDUZ=$$FINDUSER^XUESSO2(.XATTRIB) ; First find user based on NPI alone
"RTN","XUESSO3",329,0)
 ;Set minimum 4 attributes
"RTN","XUESSO3",330,0)
 I $G(INARRAY(13))="TW" S XATTRIB(1)="TriWest Healthcare Alliance" S XATTRIB(2)="http://www.triwest.com" ; Subject Organization and OID
"RTN","XUESSO3",331,0)
 I $G(INARRAY(13))="HN" S XATTRIB(1)="Health Net, Inc." S XATTRIB(2)="http://www.healthnet.com" ; Subject Organization and OID
"RTN","XUESSO3",332,0)
 S XATTRIB(3)=XATTRIB(8) ; Unique User ID = NPI per NHIN standard
"RTN","XUESSO3",333,0)
 S XATTRIB(4)=INARRAY(1) ; Subject ID = NAME
"RTN","XUESSO3",334,0)
 I (+XDUZ>0)&('+$$ACTIVE^XUSER(XDUZ)) S XDUZ=$$FINDUSER^XUESSO2(.XATTRIB) ; If not active user, lookup on NPI again, update M4A
"RTN","XUESSO3",335,0)
 I +XDUZ<1 S XDUZ=$$ADDUSER^XUESSO2(.XATTRIB) ;Add the new user with M4A
"RTN","XUESSO3",336,0)
 I +XDUZ<1 Q XDUZ  ;Quit with error code from ^XUESSO2
"RTN","XUESSO3",337,0)
 S IEN=XDUZ_","
"RTN","XUESSO3",338,0)
 I ($G(INARRAY(2))'="")&($P($G(^VA(200,XDUZ,3.1)),U,6)="") S FDR(200,IEN,10.6)=$E($G(INARRAY(2)),1,10)  ; DEGREE
"RTN","XUESSO3",339,0)
 I (($G(INARRAY(3))="M")!($G(INARRAY(3))="F"))&($P($G(^VA(200,XDUZ,1)),U,2)="") S FDR(200,IEN,4)=$E($G(INARRAY(3)),1,1)  ; SEX
"RTN","XUESSO3",340,0)
 I ($L($G(INARRAY(4)))>2)&($P($G(^VA(200,XDUZ,.11)),U,1)="") S FDR(200,IEN,.111)=$E($G(INARRAY(4)),1,50)  ; STREET ADDRESS 1
"RTN","XUESSO3",341,0)
 I ($L($G(INARRAY(5)))>2)&($P($G(^VA(200,XDUZ,.11)),U,2)="") S FDR(200,IEN,.112)=$E($G(INARRAY(5)),1,50)  ; STREET ADDRESS 2
"RTN","XUESSO3",342,0)
 I ($L($G(INARRAY(6)))>2)&($P($G(^VA(200,XDUZ,.11)),U,3)="") S FDR(200,IEN,.113)=$E($G(INARRAY(6)),1,50)  ; STREET ADDRESS 3
"RTN","XUESSO3",343,0)
 I ($L($G(INARRAY(7)))>2)&($P($G(^VA(200,XDUZ,.11)),U,4)="") S FDR(200,IEN,.114)=$E($G(INARRAY(7)),1,30)  ; CITY
"RTN","XUESSO3",344,0)
 I ($G(INARRAY(8))'="")&($P($G(^VA(200,XDUZ,.11)),U,5)="") D
"RTN","XUESSO3",345,0)
 . I $L($G(INARRAY(8)))>2 S XSTATE="" S XSTATE=$O(^DIC(5,"B",$G(INARRAY(8)),XSTATE))
"RTN","XUESSO3",346,0)
 . I $L($G(INARRAY(8)))=2 D
"RTN","XUESSO3",347,0)
 . . S XIP=""
"RTN","XUESSO3",348,0)
 . . D POSTAL^XIPUTIL($G(INARRAY(9)),.XIP)
"RTN","XUESSO3",349,0)
 . . S XSTATE=$G(XIP("STATE POINTER"))
"RTN","XUESSO3",350,0)
 . I XSTATE'="" S FDR(200,IEN,.115)=XSTATE ; STATE (pointer to ^DIC(5))
"RTN","XUESSO3",351,0)
 I ($G(INARRAY(9))'="")&($P($G(^VA(200,XDUZ,.11)),U,6)="") S FDR(200,IEN,.116)=$G(INARRAY(9))  ; ZIP CODE
"RTN","XUESSO3",352,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO3",353,0)
 S XTAXID=$TR($G(INARRAY(11)),"-","")
"RTN","XUESSO3",354,0)
 I XTAXID'="" D
"RTN","XUESSO3",355,0)
 . S XTAXID=$E(XTAXID,1,2)_"-"_$E(XTAXID,3,9)
"RTN","XUESSO3",356,0)
 . S XTAXID=$TR(XTAXID," ","0")
"RTN","XUESSO3",357,0)
 I (XTAXID'="")&($P($G(^VA(200,XDUZ,"TPB")),U,2)="") S FDR(200,IEN,53.92)=XTAXID  ; TAX ID
"RTN","XUESSO3",358,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO3",359,0)
 I $P($G(^VA(200,XDUZ,"TPB")),U,1)="" S FDR(200,IEN,53.91)=1 ; NON-VA PRESCRIBER: (1=YES)
"RTN","XUESSO3",360,0)
 I $P($G(^VA(200,XDUZ,"PS")),U,6)="" S FDR(200,IEN,53.6)=4 ; PROVIDER TYPE: (4=FEE BASIS)
"RTN","XUESSO3",361,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO3",362,0)
 I '+$$ACTIVE^XUSER(XDUZ)'="" D  ;Could not get UPDATE^DIE to work consistently for these fields
"RTN","XUESSO3",363,0)
 . I $G(INARRAY(12))'="" D
"RTN","XUESSO3",364,0)
 . . S FDR(200,IEN,53.1)=1 ; AUTHORIZED TO WRITE MED ORDERS: (1=YES)
"RTN","XUESSO3",365,0)
 . . D APPLY(.FDR,IEN)
"RTN","XUESSO3",366,0)
 . . S DIE="^VA(200,",DA=XDUZ,DR="53.2////"_INARRAY(12) ; DEA # (stuff, due to duplicate DEA#s and user name changes)
"RTN","XUESSO3",367,0)
 . . L +^VA(200,XDUZ):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) D ^DIE L -^VA(200,XDUZ)
"RTN","XUESSO3",368,0)
 . I $D(^VA(200,XDUZ,"PS")) D
"RTN","XUESSO3",369,0)
 . . I '$P(^VA(200,XDUZ,"PS"),"^",4)!($P(^VA(200,XDUZ,"PS"),"^",4)>DT) D  ;Give user "XUORES" key if not an active user
"RTN","XUESSO3",370,0)
 . . . S DA=XDUZ
"RTN","XUESSO3",371,0)
 . . . K DIC S DIC="^DIC(19.1,",DIC(0)="MZ",X="XUORES" D ^DIC
"RTN","XUESSO3",372,0)
 . . . K DIC S FADA=XDUZ
"RTN","XUESSO3",373,0)
 . . . I +Y>0 S X=+Y D
"RTN","XUESSO3",374,0)
 . . . . S:'$D(^VA(200,FADA,51,0)) ^VA(200,FADA,51,0)="^"_$P(^DD(200,51,0),"^",2)_"^^"
"RTN","XUESSO3",375,0)
 . . . . S DIC="^VA(200,"_FADA_",51,",DIC(0)="LM",DIC("DR")="1////"_$S($G(DUZ):DUZ,1:"")_";2///"_DT,DLAYGO=200.051,DINUM=X,DA(1)=FADA
"RTN","XUESSO3",376,0)
 . . . . L +^VA(200,FADA):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) K DD,DO D FILE^DICN L -^VA(200,FADA) K DIC,DR,X,Y
"RTN","XUESSO3",377,0)
 . . I $P($G(^VA(200,XDUZ,"PS")),"^",5)="" D  ; PROVIDER CLASS (pointer to ^DIC(7))
"RTN","XUESSO3",378,0)
 . . . S X=0
"RTN","XUESSO3",379,0)
 . . . S X=$O(^DIC(7,"B","PHYSICIAN",X))
"RTN","XUESSO3",380,0)
 . . . I X>0 D
"RTN","XUESSO3",381,0)
 . . . . S DIE="^VA(200,",DA=XDUZ,DR="53.5////"_X
"RTN","XUESSO3",382,0)
 . . . . L +^VA(200,XDUZ):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) D ^DIE L -^VA(200,XDUZ)
"RTN","XUESSO3",383,0)
 Q XDUZ
"RTN","XUESSO3",384,0)
APPLY(FDR,IEN) ; Apply the changes, used by "VACAA", remove with next patch
"RTN","XUESSO3",385,0)
 ;ZEXCEPT: DIC
"RTN","XUESSO3",386,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO3",387,0)
 S DIC(0)=""
"RTN","XUESSO3",388,0)
 I $D(FDR) K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO3",389,0)
 Q
"RTN","XUPSQRY")
0^9^B37071844^B35986409
"RTN","XUPSQRY",1,0)
XUPSQRY ;EDS/GRR - Query New Person file ;03/17/15  08:30
"RTN","XUPSQRY",2,0)
 ;;8.0;KERNEL;**325,655**; Jul 10, 1995;Build 16
"RTN","XUPSQRY",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUPSQRY",4,0)
 ;;Input Parameter:
"RTN","XUPSQRY",5,0)
 ;;   XUPSECID - SecID of the user, internal format with "^"
"RTN","XUPSQRY",6,0)
 ;;              replaced with "%" (Required for lookup by SecID)
"RTN","XUPSQRY",7,0)
 ;;   XUPSLNAM - Part or all of the last name to use for basis
"RTN","XUPSQRY",8,0)
 ;;              of query (Required for lookup by name)
"RTN","XUPSQRY",9,0)
 ;;   XUPSFNAM - Part or all of the first name to use for basis
"RTN","XUPSQRY",10,0)
 ;;              of query filter (optional, can be null)
"RTN","XUPSQRY",11,0)
 ;;   XUPSSSN  - Social Security Number (null or full 9 digits) to
"RTN","XUPSQRY",12,0)
 ;;              use as additional filter for query
"RTN","XUPSQRY",13,0)
 ;;   XUPSPROV - If value set to "P", screen for only providers
"RTN","XUPSQRY",14,0)
 ;;              (only persons with active person class)
"RTN","XUPSQRY",15,0)
 ;;   XUPSSTN  - Filter persons based on station number entered
"RTN","XUPSQRY",16,0)
 ;;              (optional, can be null)
"RTN","XUPSQRY",17,0)
 ;;   XUPSMNM  - Maximum Number of entries to return
"RTN","XUPSQRY",18,0)
 ;;              (Number between 1 and 50.  Null defaults to 50)
"RTN","XUPSQRY",19,0)
 ;;   XUPSDATE - Date to be used to determine whether person has
"RTN","XUPSQRY",20,0)
 ;;              active person class.  If null, current date is used.
"RTN","XUPSQRY",21,0)
 ;;
"RTN","XUPSQRY",22,0)
 ;;Output:
"RTN","XUPSQRY",23,0)
 ;;   RESULT - Name of global array were output data is stored
"RTN","XUPSQRY",24,0)
 ;;            ^TMP($J,"XUPSQRY",1) - 1 if found, 0 if not found
"RTN","XUPSQRY",25,0)
 ;;            ^TMP($J,"XUPSQRY",n,0) - SecID^IEN^Last Name~First Name~
"RTN","XUPSQRY",26,0)
 ;;                                      Middle Name^SSN^DOB^SEX^
"RTN","XUPSQRY",27,0)
 ;;            ^TMP($J,"XUPSQRY",n,1) - Provider Type^
"RTN","XUPSQRY",28,0)
 ;;            ^TMP($J,"XUPSQRY",n,2) - Provider Classification^
"RTN","XUPSQRY",29,0)
 ;;            ^TMP($J,"XUPSQRY",n,3) - Provider Area of Specialization^
"RTN","XUPSQRY",30,0)
 ;;            ^TMP($J,"XUPSQRY",n,4) - VA CODE^X12 CODE^Specialty Code^
"RTN","XUPSQRY",31,0)
 ;;                                      end-of-record character "|"
"RTN","XUPSQRY",32,0)
 ;;
"RTN","XUPSQRY",33,0)
EN1(RESULT,XUPSECID,XUPSLNAM,XUPSFNAM,XUPSSSN,XUPSPROV,XUPSSTN,XUPSMNM,XUPSDATE) ;
"RTN","XUPSQRY",34,0)
 N %,XUPSNDAT
"RTN","XUPSQRY",35,0)
 K ^TMP($J,"XUPSQRY")
"RTN","XUPSQRY",36,0)
 K RESULT
"RTN","XUPSQRY",37,0)
 S RESULT=$NA(^TMP($J,"XUPSQRY")) ;set variable to name of global array where output data will be stored
"RTN","XUPSQRY",38,0)
 S ^TMP($J,"XUPSQRY",1)=0 ;initialize to not found
"RTN","XUPSQRY",39,0)
 I $G(XUPSLNAM)="",($G(XUPSECID)="") Q  ;last name parameter empty, and is required
"RTN","XUPSQRY",40,0)
 S XUPSFNAM=$G(XUPSFNAM)  ;Set to null if missing
"RTN","XUPSQRY",41,0)
 S XUPSSSN=$G(XUPSSSN)  ;Set to null if missing
"RTN","XUPSQRY",42,0)
 S XUPSPROV=$G(XUPSPROV)  ;Set to null if missing
"RTN","XUPSQRY",43,0)
 S XUPSSTN=$G(XUPSSTN)  ;Set to null if missing
"RTN","XUPSQRY",44,0)
 I $G(XUPSDATE)="" S XUPSDATE="" ;set to null if missing
"RTN","XUPSQRY",45,0)
 D NOW^%DTC S XUPSNDAT=%\1 ;set date to today and truncate time
"RTN","XUPSQRY",46,0)
 S XUPSDATE=$S(XUPSDATE="":XUPSNDAT,1:$$FMDATE^HLFNC(XUPSDATE)) ;change date from hl7 format to fileman format
"RTN","XUPSQRY",47,0)
 N XUPSCNT,XUPSNAME,XUPSIEN,XUPSDOB,XUPSSEX,XUPSPC,XUPSX12,XUPSPASS ;initialize new set of variables
"RTN","XUPSQRY",48,0)
 S:$G(XUPSMNM)="" XUPSMNM=50 ;set to default
"RTN","XUPSQRY",49,0)
 S XUPSCNT=0 ;Initialize variable
"RTN","XUPSQRY",50,0)
 ;
"RTN","XUPSQRY",51,0)
 ;Lookup by SecID
"RTN","XUPSQRY",52,0)
 I $G(XUPSECID)'="" D  Q
"RTN","XUPSQRY",53,0)
 .S XUPSIEN=$$SECMATCH^XUESSO2(XUPSECID)
"RTN","XUPSQRY",54,0)
 .I +XUPSIEN>0 D
"RTN","XUPSQRY",55,0)
 ..D FILTER
"RTN","XUPSQRY",56,0)
 ..Q:XUPSPASS=0
"RTN","XUPSQRY",57,0)
 ..S XUPSCNT=XUPSCNT+1
"RTN","XUPSQRY",58,0)
 ..D FOUND(XUPSCNT,XUPSIEN,XUPSDATE) ;set array with person data
"RTN","XUPSQRY",59,0)
 ;
"RTN","XUPSQRY",60,0)
 S XUPSIEN=0,XUPSNAME=XUPSLNAM ;initialize variables
"RTN","XUPSQRY",61,0)
 ;;
"RTN","XUPSQRY",62,0)
 ;;Loop through the Name index, quit if name is null or beginning portion of name not equal parameter passed or maximum number of entries reached
"RTN","XUPSQRY",63,0)
 ;;
"RTN","XUPSQRY",64,0)
 F  S XUPSNAME=$O(^VA(200,"B",XUPSNAME)) Q:XUPSNAME=""!($E(XUPSNAME,1,$L(XUPSLNAM))'[XUPSLNAM)!(XUPSCNT+1>XUPSMNM)  S XUPSIEN=0 F  S XUPSIEN=$O(^VA(200,"B",XUPSNAME,XUPSIEN)) Q:XUPSIEN=""  D
"RTN","XUPSQRY",65,0)
 .D FILTER
"RTN","XUPSQRY",66,0)
 .Q:XUPSPASS=0
"RTN","XUPSQRY",67,0)
 .S XUPSCNT=XUPSCNT+1
"RTN","XUPSQRY",68,0)
 .D FOUND(XUPSCNT,XUPSIEN,XUPSDATE) ;set array with person data
"RTN","XUPSQRY",69,0)
 Q
"RTN","XUPSQRY",70,0)
FILTER ;
"RTN","XUPSQRY",71,0)
 ; ZEXCEPT: XUPSDATE,XUPSFNAM,XUPSIEN,XUPSPASS,XUPSPROV,XUPSSSN,XUPSSTN ;global variables within this routine
"RTN","XUPSQRY",72,0)
 S XUPSPASS=1 ;initialize found flag to found
"RTN","XUPSQRY",73,0)
 I '$$ACTIVE^XUSER(XUPSIEN),($O(^VA(200,XUPSIEN,8910,0))>0) S XUPSPASS=0 Q  ;skip visitors
"RTN","XUPSQRY",74,0)
 I XUPSFNAM]"" S XUPSPASS=$$NMATCH^XUPSUTL1(XUPSIEN,XUPSFNAM) ;check if matches name filter
"RTN","XUPSQRY",75,0)
 Q:'XUPSPASS  ;failed to match
"RTN","XUPSQRY",76,0)
 I XUPSSSN]"",($P($G(^VA(200,XUPSIEN,1)),"^",9)'=XUPSSSN) S XUPSPASS=0 Q  ;check ssn filter
"RTN","XUPSQRY",77,0)
 I XUPSSTN]"" S XUPSPASS=$$STNMAT^XUPSUTL1(XUPSIEN,XUPSSTN) ;check station number
"RTN","XUPSQRY",78,0)
 Q:'XUPSPASS  ;failed match
"RTN","XUPSQRY",79,0)
 I XUPSPROV]"",($$GET^XUA4A72(XUPSIEN,XUPSDATE)<0) S XUPSPASS=0 Q  ;check if active person class
"RTN","XUPSQRY",80,0)
 Q
"RTN","XUPSQRY",81,0)
FOUND(XUPSCNT,XUPSIEN,XUPSDATE) ;format output array
"RTN","XUPSQRY",82,0)
 ; ZEXCEPT: XUPSPC,XUPSX12 ;global variables within this routine
"RTN","XUPSQRY",83,0)
 N XUPSNAME,XUPSSSN,XUPSECID,XUPSSEX,XUPSDOB,I,Y
"RTN","XUPSQRY",84,0)
 S Y=$P(^VA(200,XUPSIEN,0),"^",1) ;get full name
"RTN","XUPSQRY",85,0)
 S XUPSNAME=$$HLNAME^HLFNC(Y,"~|\/") ;format name into last name~first name~middle name
"RTN","XUPSQRY",86,0)
 I $L(XUPSNAME,"~")<3 S $P(XUPSNAME,"~",3)="" ;make sure formatted name has all 3 pieces
"RTN","XUPSQRY",87,0)
 S Y=$G(^VA(200,XUPSIEN,1)) ;get ssn,dob,sex
"RTN","XUPSQRY",88,0)
 S XUPSSSN=$P(Y,"^",9) ;ssn
"RTN","XUPSQRY",89,0)
 S XUPSECID=$P(Y,"^",1) ;secid
"RTN","XUPSQRY",90,0)
 S XUPSSEX=$P(Y,"^",2) ;sex
"RTN","XUPSQRY",91,0)
 S XUPSDOB=$P(Y,"^",3) ;dob fileman format
"RTN","XUPSQRY",92,0)
 I XUPSDOB]"" S XUPSDOB=$$HLDATE^HLFNC(XUPSDOB,"DT") ;format dob to correct hl7 format yyyymmdd
"RTN","XUPSQRY",93,0)
 S ^TMP($J,"XUPSQRY",1)=1 ;set to indicate match found
"RTN","XUPSQRY",94,0)
 S ^TMP($J,"XUPSQRY",XUPSCNT,0)=XUPSECID_"^"_XUPSIEN_"^"_XUPSNAME_"^"_XUPSSSN_"^"_XUPSDOB_"^"_XUPSSEX_"^"
"RTN","XUPSQRY",95,0)
 S XUPSPC=$$GET^XUA4A72(XUPSIEN,XUPSDATE) ;get active person class data
"RTN","XUPSQRY",96,0)
 S:XUPSPC<0 XUPSPC="" ;no active person class
"RTN","XUPSQRY",97,0)
 F I=1:1:3 S ^TMP($J,"XUPSQRY",XUPSCNT,I)=$P(XUPSPC,"^",(1+I))_"^" ;put provider type, provider class, and are of specialization in output array
"RTN","XUPSQRY",98,0)
 S XUPSX12=$S(XUPSPC="":"",1:$P(^USC(8932.1,+XUPSPC,0),"^",7)) ;get x12 code which is not returned by api
"RTN","XUPSQRY",99,0)
 S ^TMP($J,"XUPSQRY",XUPSCNT,4)=$P(XUPSPC,"^",7)_"^"_XUPSX12_"^"_$P(XUPSPC,"^",8)_"^|" ;put va code, x12 code, specialty code, and end-of-record character in output array
"RTN","XUPSQRY",100,0)
 Q
"RTN","XUSAML")
0^7^B78896546^n/a
"RTN","XUSAML",1,0)
XUSAML ;ISD/HGW Kernel SAML Token Implementation ;03/25/15  07:46
"RTN","XUSAML",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XUSAML",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUSAML",4,0)
 ;
"RTN","XUSAML",5,0)
 ; Implements the Kernel SAML Token message framework for the Identification and
"RTN","XUSAML",6,0)
 ; Access Management (IAM) Single Sign-On (SSO) security model.
"RTN","XUSAML",7,0)
 ;
"RTN","XUSAML",8,0)
 Q
"RTN","XUSAML",9,0)
EN(DOC) ;Function. Main entry point
"RTN","XUSAML",10,0)
 ;This function parses and processes the VA Identity and Access Management (IAM) STS SAML token
"RTN","XUSAML",11,0)
 ; (version 1.2) and returns the DUZ of the user, if found. It does not log the user into VistA.
"RTN","XUSAML",12,0)
 ; Input:     DOC     = Closed reference to global root containing XML document (loaded STS SAML Token)
"RTN","XUSAML",13,0)
 ;                      or filename and path reference identifying the document on the host system (for testing).
"RTN","XUSAML",14,0)
 ;                      See $$EN^MXMLDOM instructions in the VistA Kernel Developers Guide for required
"RTN","XUSAML",15,0)
 ;                      format of the DOC global.
"RTN","XUSAML",16,0)
 ;                      Example: S Y=$$EN^XUSAML($NA(^TMP($J,1)))
"RTN","XUSAML",17,0)
 ; Return:    Fail    = "-1^Error Message"
"RTN","XUSAML",18,0)
 ;            Success = DUZ
"RTN","XUSAML",19,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",20,0)
 N HDL,XASSRT,XUPN,Y
"RTN","XUSAML",21,0)
 S Y="-1^Error parsing STS SAML Token",XUPN="",XASSRT=""
"RTN","XUSAML",22,0)
 S XOBDATA("XOB RPC","SECURITY","STATE")="notauthenticated"
"RTN","XUSAML",23,0)
 S XOBDATA("XOB RPC","SAML","ASSERTION")="notvalidated"
"RTN","XUSAML",24,0)
 ;--- Call parser
"RTN","XUSAML",25,0)
 S HDL=$$EN^MXMLDOM(DOC,"W")
"RTN","XUSAML",26,0)
 I HDL>0 D
"RTN","XUSAML",27,0)
 . D ND(HDL,1,1,.XUPN,.XASSRT) ;Traverse and process document
"RTN","XUSAML",28,0)
 . S Y="-1^Invalid SAML assertion"
"RTN","XUSAML",29,0)
 . D VALASSRT(.XASSRT) ;Validate SAML assertion
"RTN","XUSAML",30,0)
 . I $G(XOBDATA("XOB RPC","SAML","ASSERTION"))="validated" D
"RTN","XUSAML",31,0)
 . . S Y=$$FINDUSER()
"RTN","XUSAML",32,0)
 . D DELETE^MXMLDOM(HDL)
"RTN","XUSAML",33,0)
 I +Y>0 S XOBDATA("XOB RPC","SECURITY","STATE")="authenticated"
"RTN","XUSAML",34,0)
 K ^TMP("XUSAML",$J)
"RTN","XUSAML",35,0)
 Q Y
"RTN","XUSAML",36,0)
ND(HDL,ND,FS,XUPN,XASSRT) ;SR. Traverse tree
"RTN","XUSAML",37,0)
 N CH,SIB,TX
"RTN","XUSAML",38,0)
 D SH(HDL,ND,.XUPN,.XASSRT)
"RTN","XUSAML",39,0)
 S CH=0
"RTN","XUSAML",40,0)
 S CH=$$CHILD^MXMLDOM(HDL,ND,CH)
"RTN","XUSAML",41,0)
 I CH D ND(HDL,CH,1,.XUPN,.XASSRT)
"RTN","XUSAML",42,0)
 Q:'FS  ;Don't follow the siblings of siblings
"RTN","XUSAML",43,0)
 S SIB=ND
"RTN","XUSAML",44,0)
 F  S SIB=$$SIBLING^MXMLDOM(HDL,SIB) Q:'SIB  D ND(HDL,SIB,0,.XUPN,.XASSRT)
"RTN","XUSAML",45,0)
 Q
"RTN","XUSAML",46,0)
SH(HDL,ND,XUPN,XASSRT) ;SR. Process node elements
"RTN","XUSAML",47,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",48,0)
 N ELE,NM,V
"RTN","XUSAML",49,0)
 S ELE=$$NAME^MXMLDOM(HDL,ND)
"RTN","XUSAML",50,0)
 ;I ELE="saml:Assertion" D  Q
"RTN","XUSAML",51,0)
 ;. ;TBD
"RTN","XUSAML",52,0)
 ;I ELE="saml:Issuer" D  Q
"RTN","XUSAML",53,0)
 ;. ;TBD
"RTN","XUSAML",54,0)
 ;I ELE="ds:Signature" D  Q
"RTN","XUSAML",55,0)
 ;. ;TBD - 3.2.4.4 in NHIN standard for example
"RTN","XUSAML",56,0)
 ;
"RTN","XUSAML",57,0)
 ; --------------------  saml:Subject Event Processing  --------------------------------
"RTN","XUSAML",58,0)
 I ELE="saml:Subject" D  Q  ;a Subject element is required
"RTN","XUSAML",59,0)
 . S XASSRT("Subject")="yes"
"RTN","XUSAML",60,0)
 ;I ELE="saml:NameID" D  Q
"RTN","XUSAML",61,0)
 ;. ;TBD
"RTN","XUSAML",62,0)
 ;I ELE="saml:SubjectConfirmation" D  Q
"RTN","XUSAML",63,0)
 ;. ;TBD
"RTN","XUSAML",64,0)
 ;*****For IAM STS Token validation, need to capture (from X.509 certificate?):
"RTN","XUSAML",65,0)
 ;***** Subject::SubjectConfirmation::SubjectConfirmationData@Address
"RTN","XUSAML",66,0)
 ;***** Subject::SubjectConfirmation::SubjectConfirmationData@Recipient
"RTN","XUSAML",67,0)
 ;      <saml:SubjectConfirmationData>
"RTN","XUSAML",68,0)
 ;        <ds:KeyInfo>
"RTN","XUSAML",69,0)
 ;          <ds:X509Data>
"RTN","XUSAML",70,0)
 ;            <!-- principal's X.509 cert -->
"RTN","XUSAML",71,0)
 ;            <ds:X509Certificate>
"RTN","XUSAML",72,0)
 ;              MIIciDCCAXACCQDE+9eiWrm64 etc.
"RTN","XUSAML",73,0)
 ;            </ds:X509Certificate>
"RTN","XUSAML",74,0)
 ;          </ds:X509Data>
"RTN","XUSAML",75,0)
 ;        </ds:KeyInfo>
"RTN","XUSAML",76,0)
 ; *or*
"RTN","XUSAML",77,0)
 ;        <ds:KeyInfo>
"RTN","XUSAML",78,0)
 ;          <wsse:SecurityTokenReference
"RTN","XUSAML",79,0)
 ;            wsu:Id="uuid_2ca69267-90bd-4785-a28e-ad9cee6d962e"
"RTN","XUSAML",80,0)
 ;            wsse11:TokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0">
"RTN","XUSAML",81,0)
 ;            <wsse:KeyIdentifier
"RTN","XUSAML",82,0)
 ;              ValueType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID">
"RTN","XUSAML",83,0)
 ;              ed62b6fb-4d73-4011-9f7c-43e0575b6317
"RTN","XUSAML",84,0)
 ;            </wsse:KeyIdentifier>
"RTN","XUSAML",85,0)
 ;          </wsse:SecurityTokenReference>
"RTN","XUSAML",86,0)
 ;        </ds:KeyInfo>
"RTN","XUSAML",87,0)
 ;      </saml:SubjectConfirmationData>
"RTN","XUSAML",88,0)
 ;I ELE="saml:SubjectConfirmationData" D  Q
"RTN","XUSAML",89,0)
 ;. ;TBD
"RTN","XUSAML",90,0)
 ;I ELE="ds:KeyInfo" D  Q
"RTN","XUSAML",91,0)
 ;. ;TBD
"RTN","XUSAML",92,0)
 ;I ELE="ds:X509Data" D  Q
"RTN","XUSAML",93,0)
 ;. ;TBD
"RTN","XUSAML",94,0)
 ;I ELE="ds:X509Certificate" D  Q  ;X.509 encrypted digital certificate
"RTN","XUSAML",95,0)
 ;. ;TBD
"RTN","XUSAML",96,0)
 ;
"RTN","XUSAML",97,0)
 ; --------------------  saml:Conditions Event Processing  -------------------------
"RTN","XUSAML",98,0)
 I ELE="saml:Conditions" D  Q
"RTN","XUSAML",99,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",100,0)
 . S XASSRT("NotBefore")=$O(^TMP("XUSAML",$J,"NotBefore",""))
"RTN","XUSAML",101,0)
 . S XASSRT("NotOnOrAfter")=$O(^TMP("XUSAML",$J,"NotOnOrAfter",""))
"RTN","XUSAML",102,0)
 ;
"RTN","XUSAML",103,0)
 ; --------------------  saml:AuthnStatement Event Processing  -------------------------
"RTN","XUSAML",104,0)
 I ELE="saml:AuthnStatement" D  Q
"RTN","XUSAML",105,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",106,0)
 . S XASSRT("AuthnInstant")=$O(^TMP("XUSAML",$J,"AuthnInstant",""))
"RTN","XUSAML",107,0)
 ;I ELE="saml:SubjectLocality" D  Q
"RTN","XUSAML",108,0)
 ;. ;TBD
"RTN","XUSAML",109,0)
 ;I ELE="saml:AuthnContext" D  Q
"RTN","XUSAML",110,0)
 ;. ;TBD
"RTN","XUSAML",111,0)
 I ELE="saml:AuthnContextClassRef" D  Q
"RTN","XUSAML",112,0)
 . S XUPN="AuthnContextClassRef"
"RTN","XUSAML",113,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",114,0)
 . S XASSRT("AuthnContextClassRef")=$G(^TMP("XUSAML",$J,"AuthnContextClassRef"))
"RTN","XUSAML",115,0)
 ;
"RTN","XUSAML",116,0)
 ; --------------------  saml:AttributeStatement Event Processing  ------------------
"RTN","XUSAML",117,0)
 I ELE="saml:AttributeStatement" D  Q
"RTN","XUSAML",118,0)
 . ;TBD
"RTN","XUSAML",119,0)
 I ELE="saml:Attribute" D  Q
"RTN","XUSAML",120,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",121,0)
 I ELE="saml:AttributeValue" D  Q
"RTN","XUSAML",122,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",123,0)
 I ELE="SECID" D  Q
"RTN","XUSAML",124,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",125,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",126,0)
 I ELE="NPI" D  Q
"RTN","XUSAML",127,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",128,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",129,0)
 I ELE="applicationPassPhrase" D  Q
"RTN","XUSAML",130,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",131,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",132,0)
 Q
"RTN","XUSAML",133,0)
CH(HDL,ND,XUPN) ;SR. Process text node
"RTN","XUSAML",134,0)
 N I,NM,VV,Y
"RTN","XUSAML",135,0)
 I $G(XUPN)'="" D
"RTN","XUSAML",136,0)
 . S Y=""
"RTN","XUSAML",137,0)
 . D TEXT^MXMLDOM(HDL,ND,$NA(VV))
"RTN","XUSAML",138,0)
 . I $D(VV)>2 F I=1:1 Q:'$D(VV(I))  S Y=Y_VV(I)
"RTN","XUSAML",139,0)
 . I $P(XUPN,"^",2)="" D
"RTN","XUSAML",140,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1))=Y
"RTN","XUSAML",141,0)
 . E  D
"RTN","XUSAML",142,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1),$P(XUPN,"^",2))=Y
"RTN","XUSAML",143,0)
 Q
"RTN","XUSAML",144,0)
EL(HDL,ND,NM,XUPN) ;SR. Process element
"RTN","XUSAML",145,0)
 K XUPN S (NM,XUPN)=""
"RTN","XUSAML",146,0)
 F  S NM=$$ATTRIB^MXMLDOM(HDL,ND,NM) Q:'$L(NM)  D
"RTN","XUSAML",147,0)
 . I $L(NM) S XUPN=NM_"^"_$$VALUE^MXMLDOM(HDL,ND,NM)
"RTN","XUSAML",148,0)
 . I $P(XUPN,"^",2)="" D
"RTN","XUSAML",149,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1))=""
"RTN","XUSAML",150,0)
 . E  D
"RTN","XUSAML",151,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1),$P(XUPN,"^",2))=""
"RTN","XUSAML",152,0)
 Q
"RTN","XUSAML",153,0)
FINDUSER() ;Function. Identify user
"RTN","XUSAML",154,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",155,0)
 N X,XARRY,XUHOME,Y,Z,XAUTH
"RTN","XUSAML",156,0)
 S X=$ST($ST-1,"PLACE"),Y=$P(X,"+"),Z=$P(X,"^",2),X=Y_"^"_$P(Z," ")
"RTN","XUSAML",157,0)
 I X'="EN^XUSAML" Q "-1^Not authorized"
"RTN","XUSAML",158,0)
 S Y="-1^User could not be identified"
"RTN","XUSAML",159,0)
 S XARRY(1)=$$TITLE^XLFSTR($E($G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:organization")),1,50)) ;Subject Organization
"RTN","XUSAML",160,0)
 S XARRY(2)=$$LOW^XLFSTR($E($G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:organization-id")),1,50)) ;Subject Organization ID
"RTN","XUSAML",161,0)
 S XARRY(3)=$G(^TMP("XUSAML",$J,"Name","uniqueUserId")) ;Unique User ID
"RTN","XUSAML",162,0)
 S XARRY(4)=$G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:subject-id")) ;Subject ID
"RTN","XUSAML",163,0)
 S XARRY(5)=$G(^TMP("XUSAML",$J,"Name","applicationPassPhrase")) ;Application ID
"RTN","XUSAML",164,0)
 S XARRY(6)=$G(^TMP("XUSAML",$J,"Name","urn:va:ad:samaccountname")) ;Network Username
"RTN","XUSAML",165,0)
 S XARRY(7)=$G(^TMP("XUSAML",$J,"Name","urn:va:vrm:iam:secid")) ;SecID
"RTN","XUSAML",166,0)
 S XARRY(8)=$G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:2.0:subject:npi")) ;NPI
"RTN","XUSAML",167,0)
 ;S XARRY(9)=$G(^TMP("XUSAML",$J,"Name","")) ;SSN - Currently not an entry in token for SSN
"RTN","XUSAML",168,0)
 S XARRY(10)=$G(^TMP("XUSAML",$J,"Name","upn")) ;Active Directory User Principle Name (UPN)
"RTN","XUSAML",169,0)
 S XARRY(11)=$G(^TMP("XUSAML",$J,"Name","email")) ;E-Mail Address
"RTN","XUSAML",170,0)
 S XAUTH=$$LOW^XLFSTR($G(^TMP("XUSAML",$J,"Name","authnsystem"))) ;SSOi, SSOe, or Other authentication
"RTN","XUSAML",171,0)
 S XUHOME=$$LOW^XLFSTR($G(^TMP("XUSAML",$J,"Name","urn:nhin:names:saml:homeCommunityId"))) ;Home Community ID
"RTN","XUSAML",172,0)
 I (XUHOME="urn:oid:2.16.840.1.113883.4.349")&((XAUTH="ssoi")!(XAUTH="ssoe")) D  ;SSOi and SSOe
"RTN","XUSAML",173,0)
 . S XARRY(3)=XARRY(7) ;SSOi and SSOe: UID=SecID
"RTN","XUSAML",174,0)
 . S Y=$$FINDUSER^XUESSO2(.XARRY) ;Identify user
"RTN","XUSAML",175,0)
 . ;I (+Y<0)&(XARRY(1)="Department Of Veterans Affairs")&(XAUTH="ssoi") S Y=$$ADDUSER^XUESSO2(.XARRY)  ;If not found, add the SSOi user
"RTN","XUSAML",176,0)
 . ;I (+Y<0)&(XARRY(1)'="Department Of Veterans Affairs")&(XAUTH="ssoe") S Y=$$ADDUSER^XUESSO2(.XARRY)  ;If not found, add the SSOe user
"RTN","XUSAML",177,0)
 E  I (XARRY(2)["http://")!(XARRY(2)["https://")!((XARRY(2)["urn:oid:")&(XARRY(2)'="urn:oid:2.16.840.1.113883.4.349")) D  ; NHIN
"RTN","XUSAML",178,0)
 . I $G(XARRY(3))="" S XARRY(3)=XARRY(8) ;NHIN: UID is NPI if available (preferred)
"RTN","XUSAML",179,0)
 . I $G(XARRY(3))="" S XARRY(3)=XARRY(11) ;NHIN: UID is e-mail if available (alternative to NPI)
"RTN","XUSAML",180,0)
 . S Y=$$FINDUSER^XUESSO2(.XARRY) ;Identify user by NPI or Unique User ID
"RTN","XUSAML",181,0)
 . I +Y<0 D
"RTN","XUSAML",182,0)
 . . S XARRY(8)=""
"RTN","XUSAML",183,0)
 . . S Y=$$FINDUSER^XUESSO2(.XARRY) ;Identify user by Unique User ID only
"RTN","XUSAML",184,0)
 . ;I +Y<0 S Y=$$ADDUSER^XUESSO2(.XARRY) ;If not found, add the NHIN user
"RTN","XUSAML",185,0)
 Q Y
"RTN","XUSAML",186,0)
VALASSRT(XASSRT) ;SR. Validate SAML assertion
"RTN","XUSAML",187,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",188,0)
 N XD,XNOW
"RTN","XUSAML",189,0)
 K XOBDATA("XOB RPC","SAML","AUTHENTICATION TYPE")
"RTN","XUSAML",190,0)
 S XOBDATA("XOB RPC","SAML","AUTHENTICATION TYPE")=$G(^TMP("XUSAML",$J,"Name","authenticationtype"))
"RTN","XUSAML",191,0)
 K XOBDATA("XOB RPC","SAML","PROOFING AUTHORITY")
"RTN","XUSAML",192,0)
 S XOBDATA("XOB RPC","SAML","PROOFING AUTHORITY")=$G(^TMP("XUSAML",$J,"Name","proofingauthority"))
"RTN","XUSAML",193,0)
 ;***** IAM RSD 2.3.2.1 Validation of Issuer
"RTN","XUSAML",194,0)
 ;      * Directly trust the issuer's certificate. In this case, the certificate is received using
"RTN","XUSAML",195,0)
 ;        a secure out-of-band mechanism and tagged as trusted.
"RTN","XUSAML",196,0)
 ;   or * Indirect trust through an agreement with a trusted third party.This is typically an
"RTN","XUSAML",197,0)
 ;        agreement regarding issuing Certificate Authority. Also commonly combined with limiting
"RTN","XUSAML",198,0)
 ;        access by SubjectDN of the signer certificate.
"RTN","XUSAML",199,0)
 ; Verify PKI certificate (check trust chain and revocation)
"RTN","XUSAML",200,0)
 ; - TBD
"RTN","XUSAML",201,0)
 ;
"RTN","XUSAML",202,0)
 ;***** IAM RSD 2.3.2.2 Validation of Token Digital Signature
"RTN","XUSAML",203,0)
 ;      * VistA shall be configured to use the Extensible Markup Language (XML) Digital Signature
"RTN","XUSAML",204,0)
 ;        standard to process the signature element within the token.
"RTN","XUSAML",205,0)
 ; Verify XML signature of token
"RTN","XUSAML",206,0)
 ; - TBD
"RTN","XUSAML",207,0)
 ;
"RTN","XUSAML",208,0)
 ;***** IAM RSD 2.3.2.3 Evaluation of Data within the Token
"RTN","XUSAML",209,0)
 ;      * VistA shall validate timestamps (e.g., NotBefore, NotOnOrAfter)
"RTN","XUSAML",210,0)
 S XNOW=$$NOW^XLFDT
"RTN","XUSAML",211,0)
 S XD=$$CONVTIME($G(XASSRT("AuthnInstant"))) I XD=-1 Q  ;invalid timestamp
"RTN","XUSAML",212,0)
 S XD=$$CONVTIME($G(XASSRT("NotBefore"))) I (XD=-1)!(XD>XNOW) Q  ;token not valid yet
"RTN","XUSAML",213,0)
 S XD=$$CONVTIME($G(XASSRT("NotOnOrAfter"))) I (XD=-1)!(XD'>XNOW) Q  ;token expired
"RTN","XUSAML",214,0)
 ;      * VistA shall perform Validation of endpoints (Optional based on scenario)
"RTN","XUSAML",215,0)
 ;        a) Validate Subject::SubjectConfirmation::SubjectConfirmationData@Address
"RTN","XUSAML",216,0)
 ;           matches the requestor (e.g., common name in this attribute matches that
"RTN","XUSAML",217,0)
 ;           from the certificate which secured the session). Note: This Subject will
"RTN","XUSAML",218,0)
 ;           be the system that requested the token - it may or may not be the System
"RTN","XUSAML",219,0)
 ;           handing the token to VistA.
"RTN","XUSAML",220,0)
 I '$D(XASSRT("Subject")) Q  ;very basic check for "Subject" tag
"RTN","XUSAML",221,0)
 ; - TBD
"RTN","XUSAML",222,0)
 I '$D(XASSRT("AuthnContextClassRef")) Q
"RTN","XUSAML",223,0)
 ;        b) Validate Service Endpoint using
"RTN","XUSAML",224,0)
 ;           Subject::SubjectConfirmation::SubjectConfirmationData@Recipient
"RTN","XUSAML",225,0)
 ;           VistA shall accept an endpoint of "domain"
"RTN","XUSAML",226,0)
 ;
"RTN","XUSAML",227,0)
 ; Verify assurance level (VA requires LOA-1 through LOA-3)
"RTN","XUSAML",228,0)
 K XOBDATA("XOB RPC","SAML","ASSURANCE LEVEL")
"RTN","XUSAML",229,0)
 S XD=$G(^TMP("XUSAML",$J,"Name","assurancelevel")) I (+XD<1)!(+XD>3)!(+XD="") Q
"RTN","XUSAML",230,0)
 S XOBDATA("XOB RPC","SAML","ASSURANCE LEVEL")=XD
"RTN","XUSAML",231,0)
 ; Token has been validated
"RTN","XUSAML",232,0)
 S XOBDATA("XOB RPC","SAML","ASSERTION")="validated"
"RTN","XUSAML",233,0)
 Q
"RTN","XUSAML",234,0)
CONVTIME(TIME) ;Function. Convert XML time to FileMan format
"RTN","XUSAML",235,0)
 ;ZEXCEPT: %DT ;environment variable
"RTN","XUSAML",236,0)
 N X,XD,XOUT,XT,XZ,Y
"RTN","XUSAML",237,0)
 S XZ=0 I $G(TIME)["Z" S XZ=1 ;Zulu time (GMT)
"RTN","XUSAML",238,0)
 S XD=$P($G(TIME),"T",1) ;Date
"RTN","XUSAML",239,0)
 S XD=$P(XD,"-",2)_"/"_$P(XD,"-",3)_"/"_$P(XD,"-",1) ;Convert date to MM/DD/YYYY
"RTN","XUSAML",240,0)
 S XT=$P($G(TIME),"T",2) ;Time
"RTN","XUSAML",241,0)
 I XZ=1 S XT=$P(XT,"Z",1) ;Strip "Z" from time
"RTN","XUSAML",242,0)
 S X=XD_"@"_XT S %DT="RTS"
"RTN","XUSAML",243,0)
 D ^%DT S XOUT=Y
"RTN","XUSAML",244,0)
 I XZ=1 S XOUT=$$FMADD^XLFDT(XOUT,0,+$E($$TZ^XLFDT,1,3),0,0) ;Adjust from GMT
"RTN","XUSAML",245,0)
 K %DT(0)
"RTN","XUSAML",246,0)
 Q XOUT
"RTN","XUSER1")
0^8^B12036496^B10316909
"RTN","XUSER1",1,0)
XUSER1 ;ISF/RWF - User file Utilities ;03/17/15  08:19
"RTN","XUSER1",2,0)
 ;;8.0;KERNEL;**169,210,222,514,655**;Jul 10, 1995;Build 16
"RTN","XUSER1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUSER1",4,0)
 Q
"RTN","XUSER1",5,0)
 ;
"RTN","XUSER1",6,0)
PAGE() ;Do a page break; Return 0 if ok to continue, 1 if to abort
"RTN","XUSER1",7,0)
 ; ZEXCEPT: IOF,IOST
"RTN","XUSER1",8,0)
 N DIR
"RTN","XUSER1",9,0)
 S DIR(0)="E" D ^DIR:($E(IOST,1,2)["C-")
"RTN","XUSER1",10,0)
 Q:$D(DIRUT) 1 W @IOF S ($X,$Y)=0
"RTN","XUSER1",11,0)
 Q 0
"RTN","XUSER1",12,0)
 ;
"RTN","XUSER1",13,0)
GKEYS(IE,XUA) ;Get the keys held. IE=user
"RTN","XUSER1",14,0)
 N %,V,XUB
"RTN","XUSER1",15,0)
 S %=0 ;Sort list alphabetical
"RTN","XUSER1",16,0)
 F  S %=$O(^VA(200,IE,51,%)) Q:(%'>0)  S V=$P($G(^DIC(19.1,%,0)),U,1) I $L(V) S XUB(V)=""
"RTN","XUSER1",17,0)
 S V="" ;return to user
"RTN","XUSER1",18,0)
 F %=1:1 S V=$O(XUB(V)) Q:'$L(V)  S XUA(%)=V
"RTN","XUSER1",19,0)
 Q
"RTN","XUSER1",20,0)
 ;
"RTN","XUSER1",21,0)
SHLIST(ARRAY,LM,SP) ; Show a list, Array=list, LM=Left Margin, SP=spacing
"RTN","XUSER1",22,0)
 ;Set DN=0 to get FM22 to stop the print
"RTN","XUSER1",23,0)
 ; ZEXCEPT: DN,IOM,IOSL
"RTN","XUSER1",24,0)
 N %,Y2,Y4,Y5,Y6,DIR
"RTN","XUSER1",25,0)
 I $Y+4>IOSL,$$PAGE S DN=0 Q
"RTN","XUSER1",26,0)
 S Y4=-1,%=0,Y2=IOM-LM\SP,Y5=0
"RTN","XUSER1",27,0)
 F  S %=$O(ARRAY(%)),Y4=Y4+1 Q:(%'>0)!$D(DIRUT)  S Y6=$G(ARRAY(%)) D:$L(Y6)
"RTN","XUSER1",28,0)
 . S:Y4'<SP Y4=0 S Y5=(Y4*Y2+LM)
"RTN","XUSER1",29,0)
 . I $X>0,Y5+$L(Y6)'<IOM S Y4=0,Y5=(Y4*Y2+LM)
"RTN","XUSER1",30,0)
 . I 'Y4 W ! I $Y+3>IOSL S Y4=0,Y5=(Y4*Y2+LM) I $$PAGE S DN=0 Q
"RTN","XUSER1",31,0)
 . W ?Y5,Y6 S:(($X+1)>(Y5+Y2)) Y4=Y4+1
"RTN","XUSER1",32,0)
 . Q
"RTN","XUSER1",33,0)
 Q
"RTN","XUSER1",34,0)
 ;
"RTN","XUSER1",35,0)
SHPC(IE) ;Show the Person Class
"RTN","XUSER1",36,0)
 N %,Y S:'$D(DT) DT=$$DT^XLFDT
"RTN","XUSER1",37,0)
 S %=$X,Y=$$GET^XUA4A72(IE,DT)
"RTN","XUSER1",38,0)
 I $L(Y) W $P(Y,U,2) I $L($P(Y,U,3)) W !,?(%+2),$P(Y,U,3) I $L($P(Y,U,4)) W !,?(%+4),$P(Y,U,4)
"RTN","XUSER1",39,0)
 Q
"RTN","XUSER1",40,0)
GMG(IE,XUA) ;Get mail groups
"RTN","XUSER1",41,0)
 N %,Y,XUI,Y4,Y2,XUK
"RTN","XUSER1",42,0)
 S %=0
"RTN","XUSER1",43,0)
 F  S %=$O(^XMB(3.8,"AB",IE,%)) Q:%'>0  S XUA(%)=$P($G(^XMB(3.8,%,0)),U,1)
"RTN","XUSER1",44,0)
 Q
"RTN","XUSER1",45,0)
GPARAM(IE,PRAM,XUA) ;Get an entry from the Parameter tool
"RTN","XUSER1",46,0)
 ;IE is the user to get the list for. PARAM what parameter, XUA return array.
"RTN","XUSER1",47,0)
 ; ZEXCEPT: %
"RTN","XUSER1",48,0)
 N XUENT,XUX,XUERR,XU1
"RTN","XUSER1",49,0)
 S XUENT=IE_";VA(200,"_$S($G(^VA(200,IE,5)):"^SRV.`"_+$G(^(5)),1:""),XUA=""
"RTN","XUSER1",50,0)
 D GETLST^XPAR(.XUX,XUENT,PRAM,"E",.XUERR)
"RTN","XUSER1",51,0)
 Q:XUX'>0
"RTN","XUSER1",52,0)
 S XUA(.5)=PRAM_":"
"RTN","XUSER1",53,0)
 F %=1:1:XUX S XUA(%)=$P(XUX(%),U,2)
"RTN","XUSER1",54,0)
 Q
"RTN","XUSER1",55,0)
 ;
"RTN","XUSER1",56,0)
DIVCHG ;Allow user to change Division [DUZ(2)] value
"RTN","XUSER1",57,0)
 ;Called from option: XUSER DIV CHG
"RTN","XUSER1",58,0)
 N Y,X,DIC,I,CD
"RTN","XUSER1",59,0)
 I '$D(^VA(200,+$G(DUZ),0))#2 W !,"You are not a valid user.",!!,$C(7) Q
"RTN","XUSER1",60,0)
 I $G(DUZ(2))="" D  ;Should not happen
"RTN","XUSER1",61,0)
 . N XOPT D XOPT^XUS1A S DUZ(2)=$P(XOPT,U,17)
"RTN","XUSER1",62,0)
 S CD=$$NS^XUAF4(DUZ(2))
"RTN","XUSER1",63,0)
 W !,"Your current Division is ",$P(CD,U)_"  "_$P(CD,U,2)
"RTN","XUSER1",64,0)
 S X=+$O(^VA(200,DUZ,2,0)),Y=+$O(^(X))
"RTN","XUSER1",65,0)
 I 'Y W !,"You do not have any choices. ",!," Change is not possible.",!! Q
"RTN","XUSER1",66,0)
 K DIC S DIC="^VA(200,DUZ,2,",DIC(0)="AEMNQ"
"RTN","XUSER1",67,0)
 S DIC("S")="I $G(^DIC(4,+Y,99))"
"RTN","XUSER1",68,0)
 ;Check if user has a default
"RTN","XUSER1",69,0)
 S X=$O(^VA(200,DUZ,2,"AX1",1,0)) S:X>0 DIC("B")=$P($$NS^XUAF4(X),U)
"RTN","XUSER1",70,0)
 D ^DIC K DIC
"RTN","XUSER1",71,0)
 I Y'>0 D  Q
"RTN","XUSER1",72,0)
 .W !,$C(7),"Division Unchanged - Currently you are assigned to "
"RTN","XUSER1",73,0)
 .W $P(CD,U)_"  "_$P(CD,U,2),!
"RTN","XUSER1",74,0)
 S DUZ(2)=+Y,CD=$$NS^XUAF4(DUZ(2))
"RTN","XUSER1",75,0)
 W !?5,"Division is now set to [ ",$P(CD,U)_"  "_$P(CD,U,2)," ]",!
"RTN","XUSER1",76,0)
 Q
"RTN","XUSER1",77,0)
 ;
"RTN","XUSER1",78,0)
NETNM(NM,IEN) ;Check NetName, Called from input transform for field 501.1 NPF.
"RTN","XUSER1",79,0)
 ;Return 1 to abort, 0 to allow
"RTN","XUSER1",80,0)
 N NPF,OV
"RTN","XUSER1",81,0)
 I $L(NM)<9,DUZ(0)'["@",'$D(^XUSEC("XUMGR",DUZ)) Q 1 ;P655
"RTN","XUSER1",82,0)
 I $L(NM)<9 D EN^DDIOL("WARNING: The entered text is less than 9 characters.","") ;P655
"RTN","XUSER1",83,0)
 S NPF(0)=$P($G(^VA(200,IEN,0)),U,1),OV=0
"RTN","XUSER1",84,0)
 I $E(NM,1,3)'="VHA" D EN^DDIOL("WARNING: Prefix not VHA.","") S OV=1
"RTN","XUSER1",85,0)
 S NPF(1)=$E($P(NPF(0),","),1,5)_$E($P(NPF(0),",",2),1)
"RTN","XUSER1",86,0)
 I $E(NM,7,6+$L(NPF(1)))'=NPF(1) D EN^DDIOL("WARNING: Missing "_NPF(1)_" from username.","") S OV=1
"RTN","XUSER1",87,0)
 I OV S OV='((DUZ(0)["@")!$D(^XUSEC("XUMGR",DUZ)))
"RTN","XUSER1",88,0)
 Q OV
"RTN","XUSER1",89,0)
 ;
"RTN","XUSHSH")
0^3^^
"RTN","XUSHSH",1,0)
XUSHSH ;SF-ISC/STAFF - PASSWORD ENCRYPTION ;3/23/89  15:09 ;  
"RTN","XUSHSH",2,0)
 ;;8.0;KERNEL;**655**;Jul 10, 1995;Build 16
"RTN","XUSHSH",3,0)
 ;; This is the public domain version of the VA Kernel.
"RTN","XUSHSH",4,0)
 ;; Use this routine for your own encryption algorithm
"RTN","XUSHSH",5,0)
 ;; Input in X
"RTN","XUSHSH",6,0)
 ;; Output in X
"RTN","XUSHSH",7,0)
A Q
"RTN","XUSHSH",8,0)
EN(X) Q X
"VER")
8.0^22.0
"^DD",200,200,205.1,0)
SECID^F^^205;1^K:$L(X)>40!($L(X)<3) X
"^DD",200,200,205.1,.1)
SecID
"^DD",200,200,205.1,1,0)
^.1
"^DD",200,200,205.1,1,1,0)
200^ASECID
"^DD",200,200,205.1,1,1,1)
S ^VA(200,"ASECID",$E(X,1,30),DA)=""
"^DD",200,200,205.1,1,1,2)
K ^VA(200,"ASECID",$E(X,1,30),DA)
"^DD",200,200,205.1,1,1,"%D",0)
^^2^2^3150330^
"^DD",200,200,205.1,1,1,"%D",1,0)
Index of entries by SecID. Will be used to identify a user for Single 
"^DD",200,200,205.1,1,1,"%D",2,0)
Sign-On Internal (SSOi) and Single Sign-On External (SSOe).
"^DD",200,200,205.1,1,1,"DT")
3150209
"^DD",200,200,205.1,3)
Answer must be 3-40 characters in length. This field should never be edited directly.
"^DD",200,200,205.1,9)
^
"^DD",200,200,205.1,21,0)
^.001^5^5^3150304^^^
"^DD",200,200,205.1,21,1,0)
Identity and Access Management SECID field used to uniquely identify a 
"^DD",200,200,205.1,21,2,0)
VistA user by Security ID.
"^DD",200,200,205.1,21,3,0)
 
"^DD",200,200,205.1,21,4,0)
*** This field should never be edited directly - do not remove WRITE 
"^DD",200,200,205.1,21,5,0)
ACCESS!
"^DD",200,200,205.1,"DT")
3150304
"^DD",200,200,205.2,0)
SUBJECT ORGANIZATION^F^^205;2^K:$L(X)>50!($L(X)<3) X
"^DD",200,200,205.2,.1)
Subject Organization
"^DD",200,200,205.2,3)
Answer must be 3-50 characters in length. This field should never be edited directly.
"^DD",200,200,205.2,9)
^
"^DD",200,200,205.2,21,0)
^^6^6^3150209^
"^DD",200,200,205.2,21,1,0)
Identity and Access Management SUBJECT ORGANIZATION field used to 
"^DD",200,200,205.2,21,2,0)
identify the Organization of an externally authenticated user (Subject). 
"^DD",200,200,205.2,21,3,0)
Examples: "Department of Veterans Affairs" or "Department of Defense"
"^DD",200,200,205.2,21,4,0)
 
"^DD",200,200,205.2,21,5,0)
*** This field should never be edited directly - do not remove WRITE 
"^DD",200,200,205.2,21,6,0)
ACCESS!
"^DD",200,200,205.2,"DT")
3150209
"^DD",200,200,205.3,0)
SUBJECT ORGANIZATION ID^F^^205;3^K:$L(X)>50!($L(X)<1) X
"^DD",200,200,205.3,.1)
Subject Organization ID
"^DD",200,200,205.3,3)
Answer must be 1-50 characters in length. This field should never be edited directly.
"^DD",200,200,205.3,9)
^
"^DD",200,200,205.3,21,0)
^^12^12^3150209^
"^DD",200,200,205.3,21,1,0)
Identity and Access Management SUBJECT ORGANIZATION ID field used to 
"^DD",200,200,205.3,21,2,0)
uniquely identify the Organization that is providing the identification 
"^DD",200,200,205.3,21,3,0)
for an externally authenticated user (Subject). The organization ID 
"^DD",200,200,205.3,21,4,0)
may be an Object Identifier (OID), using the urn format (that is, 
"^DD",200,200,205.3,21,5,0)
"urn:oid:" appended with the OID); or it may be a URL assigned to 
"^DD",200,200,205.3,21,6,0)
that organization. For SSOi this will be hard-coded to Department of 
"^DD",200,200,205.3,21,7,0)
Veterans Affairs official Home Community ID. NHIN standards specify that
"^DD",200,200,205.3,21,8,0)
the web address of the Subject Organization is typically stored in this
"^DD",200,200,205.3,21,9,0)
field (example: http://familymedicalclinic.org).
"^DD",200,200,205.3,21,10,0)
 
"^DD",200,200,205.3,21,11,0)
*** This field should never be edited directly - do not remove WRITE 
"^DD",200,200,205.3,21,12,0)
ACCESS!
"^DD",200,200,205.3,"DT")
3150209
"^DD",200,200,205.4,0)
UNIQUE USER ID^F^^205;4^K:$L(X)>40!($L(X)<3) X
"^DD",200,200,205.4,.1)
Unique User ID
"^DD",200,200,205.4,3)
Answer must be 3-40 characters in length. This field should never be edited directly.
"^DD",200,200,205.4,9)
^
"^DD",200,200,205.4,21,0)
^.001^9^9^3150304^^
"^DD",200,200,205.4,21,1,0)
Identity and Access Management UNIQUE USER ID field used to uniquely 
"^DD",200,200,205.4,21,2,0)
identify a user (Subject) within the Subject Organization. The combination
"^DD",200,200,205.4,21,3,0)
of Subject Organization ID (OID) and Unique User ID (UID) is
"^DD",200,200,205.4,21,4,0)
cross-referenced in VistA and must be unique. For VA SSOi, this will be 
"^DD",200,200,205.4,21,5,0)
the user SecID. Within NHIN this could be the subject of the NHIN SAML 
"^DD",200,200,205.4,21,6,0)
token which would contain email address of a X.509 name.
"^DD",200,200,205.4,21,7,0)
 
"^DD",200,200,205.4,21,8,0)
*** This field should never be edited directly - do not remove WRITE 
"^DD",200,200,205.4,21,9,0)
ACCESS!
"^DD",200,200,205.4,"DT")
3150304
"^DD",200,200,205.5,0)
ADUPN^F^^205;5^K:$L(X)>50!($L(X)<3) X
"^DD",200,200,205.5,.1)
Active Directory UPN
"^DD",200,200,205.5,1,0)
^.1
"^DD",200,200,205.5,1,1,0)
200^ADUPN
"^DD",200,200,205.5,1,1,1)
S ^VA(200,"ADUPN",$E(X,1,30),DA)=""
"^DD",200,200,205.5,1,1,2)
K ^VA(200,"ADUPN",$E(X,1,30),DA)
"^DD",200,200,205.5,1,1,"%D",0)
^^4^4^3150330^
"^DD",200,200,205.5,1,1,"%D",1,0)
Index of entries by Active Directory UPN. Will be used by Identity and 
"^DD",200,200,205.5,1,1,"%D",2,0)
Access Management (IAM) Provisioning application when searching for and 
"^DD",200,200,205.5,1,1,"%D",3,0)
provisioning a VistA user to match the user with an Active Directory 
"^DD",200,200,205.5,1,1,"%D",4,0)
account.
"^DD",200,200,205.5,1,1,"DT")
3150209
"^DD",200,200,205.5,3)
Answer must be 3-50 characters in length. This field should never be edited directly.
"^DD",200,200,205.5,9)
^
"^DD",200,200,205.5,21,0)
^.001^2^2^3150209^^
"^DD",200,200,205.5,21,1,0)
Identity and Access Management Active Directory User Principle Name (AD 
"^DD",200,200,205.5,21,2,0)
UPN) field.
"^DD",200,200,205.5,"DT")
3150209
"^DD",200,200,501.1,0)
NETWORK USERNAME^FX^^501;1^K:$L(X)>15 X I $D(X) S X=$$UP^XLFSTR(X) K:$$NETNM^XUSER1(X,DA) X
"^DD",200,200,501.1,.1)
Network Username
"^DD",200,200,501.1,3)
Enter the Active Directory Username (9-15 characters).
"^DD",200,200,501.1,21,0)
^.001^4^4^3150317^^
"^DD",200,200,501.1,21,1,0)
This is the username that is used by the Windows Active Directory.
"^DD",200,200,501.1,21,2,0)
It should be 'VHA' + 3 char station ID + first 5 of last name + first
"^DD",200,200,501.1,21,3,0)
character of first name.
"^DD",200,200,501.1,21,4,0)
Holders of the XUMGR key can override this.
"^DD",200,200,501.1,23,0)
^.001^2^2^3150317^^
"^DD",200,200,501.1,23,1,0)
Holders of the XUMGR key can override the syntax check.
"^DD",200,200,501.1,23,2,0)
Users with DUZ(0)="@" can override the syntax check.
"^DD",200,200,501.1,"DT")
3150317
"BLD",1532,6)
^518
**END**
**END**


