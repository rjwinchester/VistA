Released XU*8*630 SEQ #537
Extracted from mail message
**KIDS**:XU*8.0*630^

**INSTALL NAME**
XU*8.0*630
"BLD",1586,0)
XU*8.0*630^KERNEL^0^3170705^y
"BLD",1586,1,0)
^^25^25^3170613^
"BLD",1586,1,1,0)
Joint Legacy Viewer (JLV) is a joint VA and DoD graphical web based 
"BLD",1586,1,2,0)
application that is used by both VA providers as well as DoD providers.  
"BLD",1586,1,3,0)
The JLV web based application displays all clinical information on a
"BLD",1586,1,4,0)
patient from VA and DoD sources.
"BLD",1586,1,5,0)
 
"BLD",1586,1,6,0)
This patch provides a means for uniquely identifying non-VA users 
"BLD",1586,1,7,0)
accessing VistA through the JLV application using National Health 
"BLD",1586,1,8,0)
Information Network (NHIN) standards for user identification.
"BLD",1586,1,9,0)
 
"BLD",1586,1,10,0)
This patch adds an entry in the REMOTE APPLICATION file (#8994.5) for the
"BLD",1586,1,11,0)
JLV application. The entry in this file will allow the Kernel Broker code
"BLD",1586,1,12,0)
in the host VistA system to Janus JLV authentication requests for remote
"BLD",1586,1,13,0)
user access, and is done in accordance with instructions on the use of the
"BLD",1586,1,14,0)
Broker Security Enhancement (BSE) as provided by the VistA Infrastructure
"BLD",1586,1,15,0)
team and RPC Broker software documentation. The Kernel Sign-on Log will 
"BLD",1586,1,16,0)
show when the JLV application is used to access VistA.
"BLD",1586,1,17,0)
    
"BLD",1586,1,18,0)
By using BSE, JLV can discontinue use of the MDWS style of authentication,
"BLD",1586,1,19,0)
which has been deprecated and will be permanently disabled at a future
"BLD",1586,1,20,0)
date. The file entry contains the name of the application, the application
"BLD",1586,1,21,0)
code (hashed), context option, and method of visitor authentication.
"BLD",1586,1,22,0)
 
"BLD",1586,1,23,0)
The menu option "JLV GUI Menu Option" [JLV WEB SERVICES] in the OPTION
"BLD",1586,1,24,0)
file (#19) contains the Remote Procedure Calls (RPCs) for the JLV
"BLD",1586,1,25,0)
application.
"BLD",1586,4,0)
^9.64PA^^
"BLD",1586,6.3)
13
"BLD",1586,"ABPKG")
n
"BLD",1586,"INID")
^y
"BLD",1586,"INIT")
XU8PS630
"BLD",1586,"KRN",0)
^9.67PA^1.61^25
"BLD",1586,"KRN",.4,0)
.4
"BLD",1586,"KRN",.4,"NM",0)
^9.68A^1^1
"BLD",1586,"KRN",.4,"NM",1,0)
XUSEC LIST    FILE #3.081^3.081^0
"BLD",1586,"KRN",.4,"NM","B","XUSEC LIST    FILE #3.081",1)

"BLD",1586,"KRN",.401,0)
.401
"BLD",1586,"KRN",.402,0)
.402
"BLD",1586,"KRN",.403,0)
.403
"BLD",1586,"KRN",.5,0)
.5
"BLD",1586,"KRN",.84,0)
.84
"BLD",1586,"KRN",1.6,0)
1.6
"BLD",1586,"KRN",1.61,0)
1.61
"BLD",1586,"KRN",1.62,0)
1.62
"BLD",1586,"KRN",3.6,0)
3.6
"BLD",1586,"KRN",3.8,0)
3.8
"BLD",1586,"KRN",9.2,0)
9.2
"BLD",1586,"KRN",9.8,0)
9.8
"BLD",1586,"KRN",9.8,"NM",0)
^9.68A^6^5
"BLD",1586,"KRN",9.8,"NM",1,0)
XU8PS630^^0^B20353233
"BLD",1586,"KRN",9.8,"NM",2,0)
XUESSO4^^0^B62316901
"BLD",1586,"KRN",9.8,"NM",4,0)
XUSAML^^0^B106243736
"BLD",1586,"KRN",9.8,"NM",5,0)
XUSBSE1^^0^B155496043
"BLD",1586,"KRN",9.8,"NM",6,0)
XUESSO2^^0^B120490166
"BLD",1586,"KRN",9.8,"NM","B","XU8PS630",1)

"BLD",1586,"KRN",9.8,"NM","B","XUESSO2",6)

"BLD",1586,"KRN",9.8,"NM","B","XUESSO4",2)

"BLD",1586,"KRN",9.8,"NM","B","XUSAML",4)

"BLD",1586,"KRN",9.8,"NM","B","XUSBSE1",5)

"BLD",1586,"KRN",19,0)
19
"BLD",1586,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",1586,"KRN",19,"NM",1,0)
JLV WEB SERVICES^^0
"BLD",1586,"KRN",19,"NM","B","JLV WEB SERVICES",1)

"BLD",1586,"KRN",19.1,0)
19.1
"BLD",1586,"KRN",101,0)
101
"BLD",1586,"KRN",409.61,0)
409.61
"BLD",1586,"KRN",771,0)
771
"BLD",1586,"KRN",779.2,0)
779.2
"BLD",1586,"KRN",870,0)
870
"BLD",1586,"KRN",8989.51,0)
8989.51
"BLD",1586,"KRN",8989.52,0)
8989.52
"BLD",1586,"KRN",8993,0)
8993
"BLD",1586,"KRN",8994,0)
8994
"BLD",1586,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",1586,"KRN",8994,"NM",1,0)
XUS BSE TOKEN^^0
"BLD",1586,"KRN",8994,"NM","B","XUS BSE TOKEN",1)

"BLD",1586,"KRN",9002226,0)
9002226
"BLD",1586,"KRN","B",.4,.4)

"BLD",1586,"KRN","B",.401,.401)

"BLD",1586,"KRN","B",.402,.402)

"BLD",1586,"KRN","B",.403,.403)

"BLD",1586,"KRN","B",.5,.5)

"BLD",1586,"KRN","B",.84,.84)

"BLD",1586,"KRN","B",1.6,1.6)

"BLD",1586,"KRN","B",1.61,1.61)

"BLD",1586,"KRN","B",1.62,1.62)

"BLD",1586,"KRN","B",3.6,3.6)

"BLD",1586,"KRN","B",3.8,3.8)

"BLD",1586,"KRN","B",9.2,9.2)

"BLD",1586,"KRN","B",9.8,9.8)

"BLD",1586,"KRN","B",19,19)

"BLD",1586,"KRN","B",19.1,19.1)

"BLD",1586,"KRN","B",101,101)

"BLD",1586,"KRN","B",409.61,409.61)

"BLD",1586,"KRN","B",771,771)

"BLD",1586,"KRN","B",779.2,779.2)

"BLD",1586,"KRN","B",870,870)

"BLD",1586,"KRN","B",8989.51,8989.51)

"BLD",1586,"KRN","B",8989.52,8989.52)

"BLD",1586,"KRN","B",8993,8993)

"BLD",1586,"KRN","B",8994,8994)

"BLD",1586,"KRN","B",9002226,9002226)

"BLD",1586,"QUES",0)
^9.62^^
"BLD",1586,"REQB",0)
^9.611^1^1
"BLD",1586,"REQB",1,0)
XU*8.0*659^1
"BLD",1586,"REQB","B","XU*8.0*659",1)

"INIT")
XU8PS630
"KRN",.4,3,-1)
0^1
"KRN",.4,3,0)
XUSEC LIST^3161006.062^^3.081^^@^3170428
"KRN",.4,3,"F",2)
0;"Sign-on time"~99;R9~.01;L17~S X=$I W X K DIP;L9;Z;"$I"~10~100;L40~101;"LOA"~18;L28~
"KRN",.4,3,"H")
USERS WHO HAVE SIGNED ONTO THE COMPUTER
"KRN",.4,3,"HLANG")
1
"KRN",19,1742,-1)
0^1
"KRN",19,1742,0)
JLV WEB SERVICES^JLV GUI Menu Option^^B^^^^^^^^
"KRN",19,1742,1,0)
^19.06^1^1^3170705^^^^
"KRN",19,1742,1,1,0)
Joint Legacy Viewer context option.
"KRN",19,1742,"RPC",0)
^19.05P^54^54
"KRN",19,1742,"RPC",1,0)
ORWPT ADMITLST
"KRN",19,1742,"RPC",2,0)
ORQOR DETAIL
"KRN",19,1742,"RPC",3,0)
ORQQAL DETAIL
"KRN",19,1742,"RPC",4,0)
ORQQAL LIST REPORT
"KRN",19,1742,"RPC",5,0)
ORQQCN DETAIL
"KRN",19,1742,"RPC",6,0)
ORQQPL DETAIL
"KRN",19,1742,"RPC",7,0)
ORQQPL PROB COMMENTS
"KRN",19,1742,"RPC",8,0)
ORQQPP LIST
"KRN",19,1742,"RPC",9,0)
ORQQPX REMINDER DETAIL
"KRN",19,1742,"RPC",10,0)
ORQQVS VISITS/APPTS
"KRN",19,1742,"RPC",11,0)
ORWPS DETAIL
"KRN",19,1742,"RPC",12,0)
ORWPT PTINQ
"KRN",19,1742,"RPC",13,0)
ORWPT SELECT
"KRN",19,1742,"RPC",14,0)
ORWPT1 PRCARE
"KRN",19,1742,"RPC",15,0)
ORWRP REPORT TEXT
"KRN",19,1742,"RPC",16,0)
TIU GET RECORD TEXT
"KRN",19,1742,"RPC",17,0)
TIU NOTES BY VISIT
"KRN",19,1742,"RPC",18,0)
VPR GET PATIENT DATA
"KRN",19,1742,"RPC",19,0)
XUS BSE TOKEN
"KRN",19,1742,"RPC",20,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,1742,"RPC",21,0)
XUS AV CODE
"KRN",19,1742,"RPC",22,0)
XUS CVC
"KRN",19,1742,"RPC",23,0)
XUS ESSO VALIDATE
"KRN",19,1742,"RPC",24,0)
XUS GET TOKEN
"KRN",19,1742,"RPC",25,0)
XUS GET USER INFO
"KRN",19,1742,"RPC",26,0)
XUS SIGNON SETUP
"KRN",19,1742,"RPC",27,0)
XWB CREATE CONTEXT
"KRN",19,1742,"RPC",28,0)
DVBAB RESTRICTED LIST PATIENTS
"KRN",19,1742,"RPC",29,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,1742,"RPC",30,0)
ORQPT TEAM PATIENTS
"KRN",19,1742,"RPC",31,0)
ORQQCN GET CONSULT
"KRN",19,1742,"RPC",32,0)
ORQQCN LIST
"KRN",19,1742,"RPC",33,0)
ORQQPL PROBLEM LIST
"KRN",19,1742,"RPC",34,0)
ORQQPX IMMUN LIST
"KRN",19,1742,"RPC",35,0)
ORQQPX REMINDERS LIST
"KRN",19,1742,"RPC",36,0)
ORQQVI VITALS
"KRN",19,1742,"RPC",37,0)
ORWLRR INTERIM
"KRN",19,1742,"RPC",38,0)
ORWPS MEDHIST
"KRN",19,1742,"RPC",39,0)
ORWPT ID INFO
"KRN",19,1742,"RPC",40,0)
ORWRA IMAGING EXAMS1
"KRN",19,1742,"RPC",41,0)
ORWRP REPORT LISTS
"KRN",19,1742,"RPC",42,0)
ORWU NEWPERS
"KRN",19,1742,"RPC",43,0)
ORWU NPHASKEY
"KRN",19,1742,"RPC",44,0)
ORWU USERINFO
"KRN",19,1742,"RPC",45,0)
ORWU VALIDSIG
"KRN",19,1742,"RPC",46,0)
ORWPCE PCE4NOTE
"KRN",19,1742,"RPC",47,0)
ORQQAL LIST
"KRN",19,1742,"RPC",48,0)
ORQQPXRM REMINDER DETAIL
"KRN",19,1742,"RPC",49,0)
ORWCV VST
"KRN",19,1742,"RPC",50,0)
ORWPT FULLSSN
"KRN",19,1742,"RPC",51,0)
ORWPT LAST5
"KRN",19,1742,"RPC",52,0)
ORWPT LIST ALL
"KRN",19,1742,"RPC",53,0)
TIU DOCUMENTS BY CONTEXT
"KRN",19,1742,"RPC",54,0)
VAFCTFU CONVERT DFN TO ICN
"KRN",19,1742,"U")
JLV GUI MENU OPTION
"KRN",8994,347,-1)
0^1
"KRN",8994,347,0)
XUS BSE TOKEN^BSETOKEN^XUSBSE1^1^S^^^^1^^0
"KRN",8994,347,1,0)
^^13^13^3170124^
"KRN",8994,347,1,1,0)
 
"KRN",8994,347,1,2,0)
RPC ICR #6695 - API ICR #none
"KRN",8994,347,1,3,0)
 
"KRN",8994,347,1,4,0)
This API/RPC returns a string from the current user authentication that 
"KRN",8994,347,1,5,0)
can be used to authenticate the user on a visited system. The application
"KRN",8994,347,1,6,0)
is identified by a security phrase that, when hashed, matches the stored
"KRN",8994,347,1,7,0)
hash of an authorized application in the REMOTE APPLICATION file 
"KRN",8994,347,1,8,0)
(#8994.5).
"KRN",8994,347,1,9,0)
 
"KRN",8994,347,1,10,0)
It is used exclusively for the Station-number callback type, and will not 
"KRN",8994,347,1,11,0)
work with Delphi RPC Broker clients compiled with the Broker Development
"KRN",8994,347,1,12,0)
Kit (BDK). It is intended for non-Delphi clients connecting with the XUS 
"KRN",8994,347,1,13,0)
SIGNON SETUP RPC.
"KRN",8994,347,2,0)
^8994.02A^1^1
"KRN",8994,347,2,1,0)
XPHRASE^1^90^1^1
"KRN",8994,347,2,1,1,0)
^^2^2^3160105^
"KRN",8994,347,2,1,1,1,0)
Input:   XPHRASE = Security phrase to be used to authenticate and identify
"KRN",8994,347,2,1,1,2,0)
the application.
"KRN",8994,347,2,"B","XPHRASE",1)

"KRN",8994,347,2,"PARAMSEQ",1,1)

"KRN",8994,347,3,0)
^8994.03^3^3^3170124^^^
"KRN",8994,347,3,1,0)
RET = Complete BSE login string (no processing required by middleware or 
"KRN",8994,347,3,2,0)
client) to be passed to the XWBUSRNM input parameter of the XUS SIGNON 
"KRN",8994,347,3,3,0)
SETUP remote procedure.
"MBREQ")
0
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
630^3170705
"PKG",3,22,1,"PAH",1,1,0)
^^25^25^3170705
"PKG",3,22,1,"PAH",1,1,1,0)
Joint Legacy Viewer (JLV) is a joint VA and DoD graphical web based 
"PKG",3,22,1,"PAH",1,1,2,0)
application that is used by both VA providers as well as DoD providers.  
"PKG",3,22,1,"PAH",1,1,3,0)
The JLV web based application displays all clinical information on a
"PKG",3,22,1,"PAH",1,1,4,0)
patient from VA and DoD sources.
"PKG",3,22,1,"PAH",1,1,5,0)
 
"PKG",3,22,1,"PAH",1,1,6,0)
This patch provides a means for uniquely identifying non-VA users 
"PKG",3,22,1,"PAH",1,1,7,0)
accessing VistA through the JLV application using National Health 
"PKG",3,22,1,"PAH",1,1,8,0)
Information Network (NHIN) standards for user identification.
"PKG",3,22,1,"PAH",1,1,9,0)
 
"PKG",3,22,1,"PAH",1,1,10,0)
This patch adds an entry in the REMOTE APPLICATION file (#8994.5) for the
"PKG",3,22,1,"PAH",1,1,11,0)
JLV application. The entry in this file will allow the Kernel Broker code
"PKG",3,22,1,"PAH",1,1,12,0)
in the host VistA system to Janus JLV authentication requests for remote
"PKG",3,22,1,"PAH",1,1,13,0)
user access, and is done in accordance with instructions on the use of the
"PKG",3,22,1,"PAH",1,1,14,0)
Broker Security Enhancement (BSE) as provided by the VistA Infrastructure
"PKG",3,22,1,"PAH",1,1,15,0)
team and RPC Broker software documentation. The Kernel Sign-on Log will 
"PKG",3,22,1,"PAH",1,1,16,0)
show when the JLV application is used to access VistA.
"PKG",3,22,1,"PAH",1,1,17,0)
    
"PKG",3,22,1,"PAH",1,1,18,0)
By using BSE, JLV can discontinue use of the MDWS style of authentication,
"PKG",3,22,1,"PAH",1,1,19,0)
which has been deprecated and will be permanently disabled at a future
"PKG",3,22,1,"PAH",1,1,20,0)
date. The file entry contains the name of the application, the application
"PKG",3,22,1,"PAH",1,1,21,0)
code (hashed), context option, and method of visitor authentication.
"PKG",3,22,1,"PAH",1,1,22,0)
 
"PKG",3,22,1,"PAH",1,1,23,0)
The menu option "JLV GUI Menu Option" [JLV WEB SERVICES] in the OPTION
"PKG",3,22,1,"PAH",1,1,24,0)
file (#19) contains the Remote Procedure Calls (RPCs) for the JLV
"PKG",3,22,1,"PAH",1,1,25,0)
application.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","XU8PS630")
0^1^B20353233^n/a
"RTN","XU8PS630",1,0)
XU8PS630 ;ISD/HGW - Post-Install for 630 ;04/28/17  12:11
"RTN","XU8PS630",2,0)
 ;;8.0;KERNEL;**630**;Jul 10, 1995;Build 13
"RTN","XU8PS630",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XU8PS630",4,0)
 ;  Post Installation Routine for patch XU*8.0*630
"RTN","XU8PS630",5,0)
 ;
"RTN","XU8PS630",6,0)
 ;  Installs entry into the REMOTE APPLICATION file (#8994.5)
"RTN","XU8PS630",7,0)
 ;
"RTN","XU8PS630",8,0)
 ;  EXTERNAL REFERENCES
"RTN","XU8PS630",9,0)
 ;    BMES^XPDUTL 10141
"RTN","XU8PS630",10,0)
 ;    $$FIND1^DIC
"RTN","XU8PS630",11,0)
 ;    UPDATE^DIE 2053
"RTN","XU8PS630",12,0)
 ;
"RTN","XU8PS630",13,0)
MAIN ; Control subroutine
"RTN","XU8PS630",14,0)
 N XU8ERRX,XU8DATA
"RTN","XU8PS630",15,0)
 ;
"RTN","XU8PS630",16,0)
 ; "JLV BSE" to record JLV VISITOR access in the SIGN-ON LOG... JLV determines pass phrase
"RTN","XU8PS630",17,0)
 S XU8DATA(1)="JLV BSE" ; Name
"RTN","XU8PS630",18,0)
 S XU8DATA(2)="JLV WEB SERVICES" ; ContextOption Name
"RTN","XU8PS630",19,0)
 S XU8DATA(3)="JLV GUI Menu Option" ; ContextOption Menu Text
"RTN","XU8PS630",20,0)
 S XU8DATA(4)="janusJLVD0n0tl00K" ; Security phrase (case sensitive)
"RTN","XU8PS630",21,0)
 S XU8DATA(5)="S"_"^"_"-1"_"^"_""_"^"_""
"RTN","XU8PS630",22,0)
 S XU8ERRX=$$OPTION(.XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS630",23,0)
 S XU8ERRX=$$CREATE(.XU8DATA) ; Create REMOTE APPLICATION entry
"RTN","XU8PS630",24,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS630",25,0)
 ;
"RTN","XU8PS630",26,0)
 ; "JLV NHIN" to record DoD access in the SIGN-ON LOG... NHIN token determines pass phrase
"RTN","XU8PS630",27,0)
 K XU8DATA
"RTN","XU8PS630",28,0)
 S XU8DATA(1)="JLV NHIN" ; Name
"RTN","XU8PS630",29,0)
 S XU8DATA(2)="JLV WEB SERVICES" ; ContextOption Name
"RTN","XU8PS630",30,0)
 S XU8DATA(3)="JLV GUI Menu Option" ; ContextOption Menu Text
"RTN","XU8PS630",31,0)
 S XU8DATA(4)="joint_legacy_viewer/jlv.exe" ; Security phrase (case sensitive)
"RTN","XU8PS630",32,0)
 S XU8DATA(5)="S"_"^"_"-1"_"^"_""_"^"_""
"RTN","XU8PS630",33,0)
 S XU8ERRX=$$OPTION(.XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS630",34,0)
 S XU8ERRX=$$CREATE(.XU8DATA) ; Create REMOTE APPLICATION entry
"RTN","XU8PS630",35,0)
 D BMES^XPDUTL(XU8ERRX) ; XU8ERRX is "Success message" or "Error text"
"RTN","XU8PS630",36,0)
 ;
"RTN","XU8PS630",37,0)
 ; "JLV" to record SSOi access in the SIGN-ON LOG... SSOi token determines pass phrase
"RTN","XU8PS630",38,0)
 ;TBD
"RTN","XU8PS630",39,0)
 ;
"RTN","XU8PS630",40,0)
 ; "CAPRI GUI" to record CAPRI access in the SIGN-ON LOG
"RTN","XU8PS630",41,0)
 K XU8DATA
"RTN","XU8PS630",42,0)
 S XU8DATA(1)="CAPRI GUI" ; Name
"RTN","XU8PS630",43,0)
 S XU8DATA(4)="delphi_rpc_broker/capri.exe" ; Security phrase (case sensitive)
"RTN","XU8PS630",44,0)
 S XU8DATA(5)="S"_"^"_"-1"_"^"_""_"^"_""
"RTN","XU8PS630",45,0)
 S XU8ERRX=$$CREATE(.XU8DATA) ; Create REMOTE APPLICATION entry
"RTN","XU8PS630",46,0)
 ;
"RTN","XU8PS630",47,0)
 Q
"RTN","XU8PS630",48,0)
 ;
"RTN","XU8PS630",49,0)
OPTION(XU8DATA) ; Create CONTEXTOPTION if doesn't exist
"RTN","XU8PS630",50,0)
 N XU8ERR,XU8FDA,XU8IEN,XU8MSG
"RTN","XU8PS630",51,0)
 S XU8IEN=$$FIND1^DIC(19,"","X",XU8DATA(2),"B")
"RTN","XU8PS630",52,0)
 S XU8ERR="Error message: "_XU8IEN
"RTN","XU8PS630",53,0)
 I +XU8IEN>0 S XU8ERR="OPTION exists at IEN = "_XU8IEN
"RTN","XU8PS630",54,0)
 I +XU8IEN=0 S XU8ERR="OPTION "_XU8DATA(2)_" created" D
"RTN","XU8PS630",55,0)
 . S XU8FDA(19,"?+1,",.01)=XU8DATA(2)
"RTN","XU8PS630",56,0)
 . S XU8FDA(19,"?+1,",1)=XU8DATA(3)
"RTN","XU8PS630",57,0)
 . S XU8FDA(19,"?+1,",4)="B" ; B:Broker (Client/Server)
"RTN","XU8PS630",58,0)
 . D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS630",59,0)
 . I $D(XU8MSG) S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to create OPTION entry "_XU8DATA(2)
"RTN","XU8PS630",60,0)
 D CLEAN^DILF
"RTN","XU8PS630",61,0)
 Q XU8ERR
"RTN","XU8PS630",62,0)
 ;
"RTN","XU8PS630",63,0)
CREATE(XU8DATA) ; Create new REMOTE APPLICATION entry
"RTN","XU8PS630",64,0)
 N XU8ERR,XU8FDA,XU8IEN,XU8MSG,XU8I,XU8IENS,DA,DIK
"RTN","XU8PS630",65,0)
 ; Delete existing entry if it exists, before creating updated entry
"RTN","XU8PS630",66,0)
 S XU8IEN=$$FIND1^DIC(8994.5,"","X",XU8DATA(1),"B")
"RTN","XU8PS630",67,0)
 I $G(XU8IEN)>0 D
"RTN","XU8PS630",68,0)
 . S DIK="^XWB(8994.5,",DA=XU8IEN
"RTN","XU8PS630",69,0)
 . D ^DIK
"RTN","XU8PS630",70,0)
 . K XU8IEN
"RTN","XU8PS630",71,0)
 S XU8ERR="   REMOTE APPLICATION entry created: "_XU8DATA(1)
"RTN","XU8PS630",72,0)
 S XU8FDA(8994.5,"?+1,",.01)=XU8DATA(1) ; NAME
"RTN","XU8PS630",73,0)
 I $D(XU8DATA(2)) S XU8FDA(8994.5,"?+1,",.02)=$$FIND1^DIC(19,"","X",XU8DATA(2),"B") ; CONTEXTOPTION
"RTN","XU8PS630",74,0)
 S XU8FDA(8994.5,"?+1,",.03)=$$SHAHASH^XUSHSH(256,XU8DATA(4),"B") ; APPLICATIONCODE
"RTN","XU8PS630",75,0)
 D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS630",76,0)
 I $D(XU8MSG) D
"RTN","XU8PS630",77,0)
 . S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to create REMOTE APPLICATION "_XU8DATA(1)
"RTN","XU8PS630",78,0)
 ; Find the REMOTE APPLICATION
"RTN","XU8PS630",79,0)
 S XU8IENS=$$FIND1^DIC(8994.5,"","X",XU8DATA(1),"B")
"RTN","XU8PS630",80,0)
 I +XU8IENS<1 S XU8ERR=XU8IENS Q XU8ERR
"RTN","XU8PS630",81,0)
 ; Fill in CALLBACKTYPE multiple
"RTN","XU8PS630",82,0)
 S XU8I=4 F  S XU8I=$O(XU8DATA(XU8I)) Q:XU8I=""  D
"RTN","XU8PS630",83,0)
 . N XU8FDA,XU8IEN,XU8MSG,XU8TEST,XU8J,XU8FLAG
"RTN","XU8PS630",84,0)
 . ; Check for duplicates (loop through CALLBACKTYPE for this entry)
"RTN","XU8PS630",85,0)
 . S XU8J=0 F  S XU8J=$O(^XWB(8994.5,XU8IENS,1,"B",$E(XU8DATA(XU8I),1,1),XU8J)) Q:(XU8J="")!($D(XU8FLAG))  D
"RTN","XU8PS630",86,0)
 . . I $G(XU8DATA(XU8I))=$G(^XWB(8994.5,XU8IENS,1,XU8J,0)) S XU8FLAG=1
"RTN","XU8PS630",87,0)
 . I '$D(XU8FLAG) D
"RTN","XU8PS630",88,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.01)=$P(XU8DATA(XU8I),"^",1) ; CALLBACKTYPE
"RTN","XU8PS630",89,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.02)=$P(XU8DATA(XU8I),"^",2) ; CALLBACKPORT
"RTN","XU8PS630",90,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.03)=$P(XU8DATA(XU8I),"^",3) ; CALLBACKSERVER
"RTN","XU8PS630",91,0)
 . . S XU8FDA(8994.51,"+2,"_XU8IENS_",",.04)=$P(XU8DATA(XU8I),"^",4) ; URLSTRING
"RTN","XU8PS630",92,0)
 . . D UPDATE^DIE("","XU8FDA","XU8IEN","XU8MSG")
"RTN","XU8PS630",93,0)
 . . I $D(XU8MSG) D
"RTN","XU8PS630",94,0)
 . . . S XU8ERR="   **ERROR** "_$G(XU8MSG("DIERR",1))_" Unable to update REMOTE APPLICATION "_XU8DATA(1)
"RTN","XU8PS630",95,0)
 ;
"RTN","XU8PS630",96,0)
 D CLEAN^DILF
"RTN","XU8PS630",97,0)
 Q XU8ERR
"RTN","XUESSO2")
0^6^B120490166^B117714262
"RTN","XUESSO2",1,0)
XUESSO2 ;ISD/HGW Enhanced Single Sign-On Utilities ;04/28/17  11:49
"RTN","XUESSO2",2,0)
 ;;8.0;KERNEL;**655,659,630**;Jul 10, 1995;Build 13
"RTN","XUESSO2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUESSO2",4,0)
 ;
"RTN","XUESSO2",5,0)
 ; This utility will identify a VistA user for auditing and HIPAA requirements.
"RTN","XUESSO2",6,0)
 ;   NONE of the fields listed below can contain a caret (^) character as it is used as a delimiter in VistA!
"RTN","XUESSO2",7,0)
 ;
"RTN","XUESSO2",8,0)
 ; $$FINDUSER() - At least one of the following attributes is required to uniquely identify an existing user in the
"RTN","XUESSO2",9,0)
 ;                NEW PERSON file (#200):
"RTN","XUESSO2",10,0)
 ;
"RTN","XUESSO2",11,0)
 ;   XATR(7) = unique Security ID [SecID, assigned by Identity and Access Management]
"RTN","XUESSO2",12,0)
 ;   XATR(8) = unique National Provider Identifier [assigned by Centers for Medicare and Medicaid Services (CMS)]
"RTN","XUESSO2",13,0)
 ;   XATR(9) = unique Social Security (SSN) or Taxpayer Identification Number (TIN) [assigned by the Social Security Administration]
"RTN","XUESSO2",14,0)
 ;   XATR(2) and XATR(3) = combination of a unique Subject Organization ID (OID) with a Unique User ID (UID) [see below]
"RTN","XUESSO2",15,0)
 ;
"RTN","XUESSO2",16,0)
 ; $$ADDUSER() - If an existing user is not found in the NEW PERSON file (#200), then the following minimum attributes
"RTN","XUESSO2",17,0)
 ;               are required to provision a new user:
"RTN","XUESSO2",18,0)
 ;
"RTN","XUESSO2",19,0)
 ;   XATR(1) = Subject Organization [free text, 3-50 characters]
"RTN","XUESSO2",20,0)
 ;   XATR(2) = Subject Organization ID [free text, 1-50 characters, unique to Subject Organization]
"RTN","XUESSO2",21,0)
 ;   XATR(3) = Unique User ID [free text, 1-40 characters, unique within OID]
"RTN","XUESSO2",22,0)
 ;   XATR(4) = Subject ID [person's name, to be entered into the NAME field (#.01) of the NEW PERSON file (#200)]
"RTN","XUESSO2",23,0)
 ;
"RTN","XUESSO2",24,0)
 ; The following attributes are optional for adding or updating a user, but may be required by a particular VistA application
"RTN","XUESSO2",25,0)
 ;               for further Identity and Access Management:
"RTN","XUESSO2",26,0)
 ;
"RTN","XUESSO2",27,0)
 ;   XATR(5) = Application ID [Security Phrase to identify and authenticate the client application and establish the context option]
"RTN","XUESSO2",28,0)
 ;   XATR(6) = Network Username [Active Directory Login]
"RTN","XUESSO2",29,0)
 ;   XATR(9) = unique Social Security (SSN) or Taxpayer Identification Number (TIN) [assigned by the Social Security Administration]
"RTN","XUESSO2",30,0)
 ;   XATR(10)= AD UPN [Active Directory User Principle Name (UPN)]
"RTN","XUESSO2",31,0)
 ;   XATR(11)= E-Mail Address
"RTN","XUESSO2",32,0)
 Q
"RTN","XUESSO2",33,0)
 ;
"RTN","XUESSO2",34,0)
FINDUSER(XATR) ;Function. Find user using minimum attributes for user identification
"RTN","XUESSO2",35,0)
 ; Input:  XATR    = Array containing user attributes (see above).
"RTN","XUESSO2",36,0)
 ; Return: Fail    = "-1^Error Message"
"RTN","XUESSO2",37,0)
 ;         Success = IEN of NEW PERSON file (#200) entry (Note: this routine will NOT set DUZ to the identified IEN)
"RTN","XUESSO2",38,0)
 ;
"RTN","XUESSO2",39,0)
 N TODAY,DT,IEN,DIC,XUNAME,ERRMSG
"RTN","XUESSO2",40,0)
 S U="^",TODAY=$$HTFM^XLFDT($H),DT=$P(TODAY,"."),ERRMSG=""
"RTN","XUESSO2",41,0)
 ; Check for unique identifier (SecID, NPI, SSN, or OID+UID)
"RTN","XUESSO2",42,0)
 I ($G(XATR(7))="")&($G(XATR(8))="")&($G(XATR(9))="")&(($G(XATR(2))="")&($G(XATR(3))="")) Q "-1^Array does not contain a unique identifier"
"RTN","XUESSO2",43,0)
 ; Format user attributes to match FileMan fields
"RTN","XUESSO2",44,0)
 S XATR(1)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))                      ;Subject Organization
"RTN","XUESSO2",45,0)
 S XATR(2)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))                        ;Subject Organization ID
"RTN","XUESSO2",46,0)
 S XATR(3)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%")           ;Unique User ID
"RTN","XUESSO2",47,0)
 I $G(XATR(4))'="" D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",48,0)
 . S XUNAME=XATR(4) S XATR(4)=$$FORMAT^XLFNAME7(.XUNAME,3,35,,0,,,2) ;Subject ID converted to standard format
"RTN","XUESSO2",49,0)
 . I $G(XATR(4))'?1U.E1","1U.E S ERRMSG="-1^Subject ID could not be converted to 'LAST,FIRST MIDDLE SUFFIX' VistA standard format"
"RTN","XUESSO2",50,0)
 S XATR(6)=$$UP^XLFSTR($E($G(XATR(6)),1,50))                         ;AD Network Username
"RTN","XUESSO2",51,0)
 S XATR(7)=$TR($E($G(XATR(7)),1,40),"^","%")                         ;SecID
"RTN","XUESSO2",52,0)
 Q $$TALL(.XATR)
"RTN","XUESSO2",53,0)
 ;
"RTN","XUESSO2",54,0)
TALL(XATR) ;Function. Find an existing user.
"RTN","XUESSO2",55,0)
 N OID,UID,SECID,NPI,SSN,NEWDUZ,ERRMSG,AOIUID,X,Y,Z
"RTN","XUESSO2",56,0)
 S $ECODE="" ;look at current stack, not error stack
"RTN","XUESSO2",57,0)
 S X=$ST($ST-1,"PLACE"),Y=$P(X,"+"),Z=$P(X,"^",2),X=Y_"^"_$P(Z," ")
"RTN","XUESSO2",58,0)
 I X'="FINDUSER^XUESSO2" Q "-1^Not authorized"
"RTN","XUESSO2",59,0)
 I $G(DUZ("LOA"))<2 Q "-1^Not authorized"
"RTN","XUESSO2",60,0)
 S OID=$G(XATR(2))
"RTN","XUESSO2",61,0)
 S UID=$G(XATR(3))
"RTN","XUESSO2",62,0)
 S SECID=$G(XATR(7))
"RTN","XUESSO2",63,0)
 S NPI=$G(XATR(8))
"RTN","XUESSO2",64,0)
 S SSN=$G(XATR(9))
"RTN","XUESSO2",65,0)
 S ERRMSG="",NEWDUZ=0,Y=0
"RTN","XUESSO2",66,0)
 ;See if match SECID, to be assigned by Identification and Access Management (IAM) services.
"RTN","XUESSO2",67,0)
 I $L(SECID)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",68,0)
 . S Y=$$SECMATCH(SECID) Q:Y<1
"RTN","XUESSO2",69,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",70,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by SecID" Q
"RTN","XUESSO2",71,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",72,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by SecID" Q
"RTN","XUESSO2",73,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",74,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",75,0)
 . Q
"RTN","XUESSO2",76,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on SECID
"RTN","XUESSO2",77,0)
 ;See if match NPI
"RTN","XUESSO2",78,0)
 I $L(NPI)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",79,0)
 . S Y=+$O(^VA(200,"ANPI",NPI,0)) Q:Y<1
"RTN","XUESSO2",80,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",81,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by NPI" Q
"RTN","XUESSO2",82,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",83,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by NPI" Q
"RTN","XUESSO2",84,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",85,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",86,0)
 . Q
"RTN","XUESSO2",87,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on NPI
"RTN","XUESSO2",88,0)
 ;See if match SSN
"RTN","XUESSO2",89,0)
 I $L(SSN)>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",90,0)
 . S Y=+$O(^VA(200,"SSN",SSN,0)) Q:Y<1
"RTN","XUESSO2",91,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",92,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by SSN" Q
"RTN","XUESSO2",93,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",94,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by SSN" Q
"RTN","XUESSO2",95,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",96,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",97,0)
 . Q
"RTN","XUESSO2",98,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on SSN
"RTN","XUESSO2",99,0)
 ;See if match OID+UID ("AOIUID" cross-reference).
"RTN","XUESSO2",100,0)
 S Y=$$AOIUID(OID,UID) I Y>0 D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",101,0)
 . I SECID'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",102,0)
 . . I $$SECMATCH(SECID)<1 S ERRMSG="-1^SecID mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",103,0)
 . I NPI'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",104,0)
 . . I NPI'=$P($G(^VA(200,Y,"NPI")),U) S ERRMSG="-1^NPI mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",105,0)
 . I SSN'="" D  Q:ERRMSG'=""
"RTN","XUESSO2",106,0)
 . . I SSN'=$P($G(^VA(200,Y,1)),U,9) S ERRMSG="-1^SSN mismatch for user ID'd by OID+UID" Q
"RTN","XUESSO2",107,0)
 . S NEWDUZ=Y
"RTN","XUESSO2",108,0)
 . S ERRMSG=$$UPDU(.XATR,NEWDUZ) ; Update fields if changes are needed
"RTN","XUESSO2",109,0)
 . Q
"RTN","XUESSO2",110,0)
 I NEWDUZ>0 Q NEWDUZ ;Quit here if we found a match on OID+UID
"RTN","XUESSO2",111,0)
 Q "-1^User not found"
"RTN","XUESSO2",112,0)
 ;
"RTN","XUESSO2",113,0)
ADDUSER(XATR) ;Function. Add user using minimum attributes for user identification
"RTN","XUESSO2",114,0)
 ; Input:  XATR    = Array containing user attributes (see above).
"RTN","XUESSO2",115,0)
 ; Return: Fail    = "-1^Error Message"
"RTN","XUESSO2",116,0)
 ;         Success = IEN of NEW PERSON file (#200) entry (Note: this routine will NOT set DUZ to the identified IEN)
"RTN","XUESSO2",117,0)
 ;
"RTN","XUESSO2",118,0)
 N SID,NEWDUZ,ERRMSG
"RTN","XUESSO2",119,0)
 I '$$AUTH() Q "-1^Not an authorized calling routine"
"RTN","XUESSO2",120,0)
 I $G(DUZ("LOA"))<2 Q "-1^Not authorized"
"RTN","XUESSO2",121,0)
 S ERRMSG=""
"RTN","XUESSO2",122,0)
 ;Minimum 4 Attributes are required to add a new user
"RTN","XUESSO2",123,0)
 I ($G(XATR(1))="")!($L($G(XATR(1)))<4) Q "-1^Subject Organization is required to add a new user"
"RTN","XUESSO2",124,0)
 I ($G(XATR(2))="")!($L($G(XATR(2)))<4) Q "-1^Subject Organization ID is required to add a new user"
"RTN","XUESSO2",125,0)
 I $G(XATR(3))="" Q "-1^Unique User ID is required to add a new user"
"RTN","XUESSO2",126,0)
 I $G(XATR(4))="" Q "-1^Subject ID is required to add a new user"
"RTN","XUESSO2",127,0)
 ; Format user attributes to match FileMan fields
"RTN","XUESSO2",128,0)
 S XATR(1)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))                      ;Subject Organization
"RTN","XUESSO2",129,0)
 S XATR(2)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))                        ;Subject Organization ID
"RTN","XUESSO2",130,0)
 S XATR(3)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%")           ;Unique User ID
"RTN","XUESSO2",131,0)
 I $G(XATR(4))'="" D  Q:ERRMSG'="" ERRMSG
"RTN","XUESSO2",132,0)
 . S SID=XATR(4) S XATR(4)=$$FORMAT^XLFNAME7(.SID,3,35,,0,,,2) ; Subject ID converted to standard format
"RTN","XUESSO2",133,0)
 . I $G(XATR(4))'?1U.E1","1U.E S ERRMSG="-1^Subject ID could not be converted to 'LAST,FIRST MIDDLE SUFFIX' VistA standard format"
"RTN","XUESSO2",134,0)
 S XATR(6)=$$UP^XLFSTR($E($G(XATR(6)),1,15))                         ;AD Network Username
"RTN","XUESSO2",135,0)
 S XATR(7)=$TR($E($G(XATR(7)),1,40),"^","%")                         ;SecID
"RTN","XUESSO2",136,0)
 S NEWDUZ=$$ADDU(XATR(4)) ;Put the name in the .01 field first
"RTN","XUESSO2",137,0)
 I +NEWDUZ<1 Q "-1^Create of new user record failed"
"RTN","XUESSO2",138,0)
 S ERRMSG=$$UPDU(.XATR,NEWDUZ) ;Then update the remaining fields
"RTN","XUESSO2",139,0)
 I +ERRMSG<0 D CLEAN(NEWDUZ) Q ERRMSG ;Delete the added user if update fails (incomplete record)
"RTN","XUESSO2",140,0)
 I +NEWDUZ<1 Q "-1^Create or update of user record failed"
"RTN","XUESSO2",141,0)
 Q NEWDUZ  ;Every thing OK
"RTN","XUESSO2",142,0)
 ;
"RTN","XUESSO2",143,0)
SECMATCH(SECID) ;Function. Find match for SECID.
"RTN","XUESSO2",144,0)
 N Y,Z
"RTN","XUESSO2",145,0)
 I $G(SECID)="" Q ""
"RTN","XUESSO2",146,0)
 S Y=0,Z=0
"RTN","XUESSO2",147,0)
 F  D  Q:Y=""
"RTN","XUESSO2",148,0)
 . S Y=$O(^VA(200,"ASECID",$E(SECID,1,30),Y))
"RTN","XUESSO2",149,0)
 . I Y>0 D  Q
"RTN","XUESSO2",150,0)
 . . I SECID=$P($G(^VA(200,Y,205)),U,1) S Z=Y,Y=""
"RTN","XUESSO2",151,0)
 Q Z
"RTN","XUESSO2",152,0)
 ;
"RTN","XUESSO2",153,0)
UPNMATCH(ADUPN) ;Function. Find match for ADUPN.
"RTN","XUESSO2",154,0)
 N W,Y,Z
"RTN","XUESSO2",155,0)
 I $G(ADUPN)="" Q ""
"RTN","XUESSO2",156,0)
 S W=$E(ADUPN,1,30),Y=0,Z=0
"RTN","XUESSO2",157,0)
 F  D  Q:Y=""
"RTN","XUESSO2",158,0)
 . S Y=$O(^VA(200,"ADUPN",$G(ADUPN),Y))
"RTN","XUESSO2",159,0)
 . I Y>0 D  Q
"RTN","XUESSO2",160,0)
 . . I ADUPN=$P($G(^VA(200,Y,205)),U,5) S Z=Y,Y=""
"RTN","XUESSO2",161,0)
 Q Z
"RTN","XUESSO2",162,0)
 ;
"RTN","XUESSO2",163,0)
AOIUID(OID,UID) ;Function. Find match for OID+UID cross-reference.
"RTN","XUESSO2",164,0)
 N W,X,Y,Z
"RTN","XUESSO2",165,0)
 I ($G(OID)="")!($G(UID)="") Q ""
"RTN","XUESSO2",166,0)
 S W=$E(OID,1,30),X=$E(UID,1,30),Y=0,Z=0
"RTN","XUESSO2",167,0)
 F  D  Q:Y=""
"RTN","XUESSO2",168,0)
 . S Y=$O(^VA(200,"AOIUID",W,X,Y))
"RTN","XUESSO2",169,0)
 . I Y>0 D  Q
"RTN","XUESSO2",170,0)
 . . I (OID=$P($G(^VA(200,Y,205)),U,3))&(UID=$P($G(^VA(200,Y,205)),U,4)) S Z=Y,Y=""
"RTN","XUESSO2",171,0)
 Q Z
"RTN","XUESSO2",172,0)
 ;
"RTN","XUESSO2",173,0)
ADDU(XUNAME) ;Function. Add a new name to the NPF
"RTN","XUESSO2",174,0)
 N DD,DO,DIC,DA,X,Y,DUZZERO
"RTN","XUESSO2",175,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO2",176,0)
 S DIC="^VA(200,",DIC(0)="F",X=XUNAME
"RTN","XUESSO2",177,0)
 ; Get a LOCK. Block if can't get.
"RTN","XUESSO2",178,0)
 L +^VA(200,"HL7"):10 Q:'$T "-1^Addition of new users is blocked"
"RTN","XUESSO2",179,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can add the entry
"RTN","XUESSO2",180,0)
 D FILE^DICN
"RTN","XUESSO2",181,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",182,0)
 L -^VA(200,"HL7")
"RTN","XUESSO2",183,0)
 Q +Y
"RTN","XUESSO2",184,0)
 ;
"RTN","XUESSO2",185,0)
UPDU(XATR,NEWDUZ) ;Function. Update user in the NPF
"RTN","XUESSO2",186,0)
 N DUZZERO,DIC,ERRMSG,FDR,IEN,XUCODE,XUENTRY
"RTN","XUESSO2",187,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO2",188,0)
 S DIC(0)="",ERRMSG=""
"RTN","XUESSO2",189,0)
 S IEN=NEWDUZ_","
"RTN","XUESSO2",190,0)
 I ($G(XATR(1))'="")&($P($G(^VA(200,NEWDUZ,205)),U,2)="") S FDR(200,IEN,205.2)=$$TITLE^XLFSTR($E($G(XATR(1)),1,50))  ;Add SORG if missing
"RTN","XUESSO2",191,0)
 I ($G(XATR(2))'="")&($P($G(^VA(200,NEWDUZ,205)),U,3)="") S FDR(200,IEN,205.3)=$$LOW^XLFSTR($E($G(XATR(2)),1,50))    ;Add OID if missing
"RTN","XUESSO2",192,0)
 I ($G(XATR(3))'="")&($P($G(^VA(200,NEWDUZ,205)),U,4)="") S FDR(200,IEN,205.4)=$TR($$LOW^XLFSTR($E($G(XATR(3)),1,40)),"^","%") ;Add UID if missing
"RTN","XUESSO2",193,0)
 I ($G(XATR(6))'="")&($P($G(^VA(200,NEWDUZ,501)),U,1)="") S FDR(200,IEN,501.1)=$$UP^XLFSTR($E($G(XATR(6)),1,15))     ;Add NETWORK USERNAME if missing
"RTN","XUESSO2",194,0)
 I ($G(XATR(7))'="")&($P($G(^VA(200,NEWDUZ,205)),U,1)="") S FDR(200,IEN,205.1)=$TR($E($G(XATR(7)),1,40),"^","%")     ;Add SecID if missing
"RTN","XUESSO2",195,0)
 I ($G(XATR(8))'="")&($P($G(^VA(200,NEWDUZ,"NPI")),U,1)="") S FDR(200,IEN,41.99)=$G(XATR(8))                         ;Add NPI if missing
"RTN","XUESSO2",196,0)
 I ($G(XATR(9))'="")&($P($G(^VA(200,NEWDUZ,1)),U,9)="") D  Q:ERRMSG'="" ERRMSG                                       ;Add SSN if missing
"RTN","XUESSO2",197,0)
 . S ERRMSG=$$ADDS(.FDR,NEWDUZ,$G(XATR(9)))
"RTN","XUESSO2",198,0)
 . I ERRMSG'="" Q
"RTN","XUESSO2",199,0)
 I ($G(XATR(10))'="")&($P($G(^VA(200,NEWDUZ,205)),U,5)="") S FDR(200,IEN,205.5)=$$LOW^XLFSTR($G(XATR(10)))           ;Add ADUPN if missing
"RTN","XUESSO2",200,0)
 I ($G(XATR(11))'="")&($P($G(^VA(200,NEWDUZ,.15)),U,1)="") S FDR(200,IEN,.151)=$$LOW^XLFSTR($G(XATR(11)))            ;Add e-mail if missing
"RTN","XUESSO2",201,0)
 I $G(XATR(5))'="" D  Q:ERRMSG'="" ERRMSG  ;Assign Context Option
"RTN","XUESSO2",202,0)
 . S ERRMSG=$$SETCNTXT(NEWDUZ,$G(XATR(5)))
"RTN","XUESSO2",203,0)
 . I ERRMSG'="" Q
"RTN","XUESSO2",204,0)
 ; Apply all the changes
"RTN","XUESSO2",205,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO2",206,0)
 I $D(FDR) K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO2",207,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",208,0)
 I $D(^TMP("DIERR",$J)) Q "-1^FileMan error"  ;FileMan Error
"RTN","XUESSO2",209,0)
 I +ERRMSG<1 Q ERRMSG ;Couldn't update user
"RTN","XUESSO2",210,0)
 I +NEWDUZ<1 Q "-1^Update of user record failed"
"RTN","XUESSO2",211,0)
 Q ""
"RTN","XUESSO2",212,0)
 ;
"RTN","XUESSO2",213,0)
ADDS(FDR,NEWDUZ,SSN) ;Function. Add a SSN to the NPF
"RTN","XUESSO2",214,0)
 N IEN,ERRMSG
"RTN","XUESSO2",215,0)
 S IEN=NEWDUZ_",",ERRMSG=""
"RTN","XUESSO2",216,0)
 I '$$SSNCHECK^XUESSO1(SSN) Q "-1^SSN is not valid per SSA criteria"
"RTN","XUESSO2",217,0)
 S FDR(200,IEN,9)=SSN
"RTN","XUESSO2",218,0)
 Q ERRMSG
"RTN","XUESSO2",219,0)
 ;
"RTN","XUESSO2",220,0)
CLEAN(Y) ;Subroutine. Clean up (delete) incomplete record in NPF
"RTN","XUESSO2",221,0)
 ; ZEXCEPT: DA,DIK
"RTN","XUESSO2",222,0)
 N DUZZERO
"RTN","XUESSO2",223,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO2",224,0)
 I +Y>0 D
"RTN","XUESSO2",225,0)
 . K DA,DIK S DIK="^VA(200,",DA=+Y D ^DIK
"RTN","XUESSO2",226,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO2",227,0)
 Q
"RTN","XUESSO2",228,0)
 ;
"RTN","XUESSO2",229,0)
SETCNTXT(NEWDUZ,XAPHRASE) ;Function. Assign Context Option to user Secondary Menu Options
"RTN","XUESSO2",230,0)
 N OPT,XUENTRY,XOPT,XUCONTXT,X
"RTN","XUESSO2",231,0)
 S XUENTRY=$$GETCNTXT(XAPHRASE) I +XUENTRY<0 Q XUENTRY
"RTN","XUESSO2",232,0)
 S DUZ("REMAPP")=XUENTRY_U_$$GET1^DIQ(8994.5,XUENTRY_",",.01)
"RTN","XUESSO2",233,0)
 S XOPT=$P($G(^XWB(8994.5,XUENTRY,0)),U,2)
"RTN","XUESSO2",234,0)
 I XOPT'>0 Q "-1^Context Option must be identified in the REMOTE APPLICATION file"
"RTN","XUESSO2",235,0)
 S XUCONTXT="`"_XOPT
"RTN","XUESSO2",236,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 Q "-1^Context Option not in OPTION file"
"RTN","XUESSO2",237,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUESSO2",238,0)
 I '$D(^VA(200,NEWDUZ,203,"B",XOPT)) D
"RTN","XUESSO2",239,0)
 . ; Have to give the user a delegated option
"RTN","XUESSO2",240,0)
 . N XARR S XARR(200.19,"+1,"_NEWDUZ_",",.01)=XUCONTXT
"RTN","XUESSO2",241,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUESSO2",242,0)
 . ; And now user can give self the context option
"RTN","XUESSO2",243,0)
 . K XARR S XARR(200.03,"+1,"_NEWDUZ_",",.01)=XUCONTXT
"RTN","XUESSO2",244,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUESSO2",245,0)
 . ; But now we have to remove the delegated option
"RTN","XUESSO2",246,0)
 . S OPT=$$FIND1^DIC(200.19,","_NEWDUZ_",","X",XUCONTXT)
"RTN","XUESSO2",247,0)
 . I OPT>0 D
"RTN","XUESSO2",248,0)
 . . K XARR S XARR(200.19,(OPT_","_NEWDUZ_","),.01)="@"
"RTN","XUESSO2",249,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUESSO2",250,0)
 . . Q
"RTN","XUESSO2",251,0)
 . Q
"RTN","XUESSO2",252,0)
 Q ""
"RTN","XUESSO2",253,0)
 ;
"RTN","XUESSO2",254,0)
GETCNTXT(XAPHRASE) ;Function. Identify the REMOTE APPLICATION
"RTN","XUESSO2",255,0)
 N XUCODE,XUENTRY
"RTN","XUESSO2",256,0)
 ;Identify Remote Application with SHA256 hash
"RTN","XUESSO2",257,0)
 S XUCODE=$$SHAHASH^XUSHSH(256,$G(XAPHRASE),"B") ; ICR #6189
"RTN","XUESSO2",258,0)
 S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE")
"RTN","XUESSO2",259,0)
 ;If not found, check with old hash and replace with SHA256 hash if found
"RTN","XUESSO2",260,0)
 I XUENTRY'>0 D
"RTN","XUESSO2",261,0)
 . S XUCODE=$$EN^XUSHSH($G(XAPHRASE)) ; IA #10045
"RTN","XUESSO2",262,0)
 . S XUENTRY=$$FIND1^DIC(8994.5,"","X",XUCODE,"ACODE")
"RTN","XUESSO2",263,0)
 . I XUENTRY>0 D
"RTN","XUESSO2",264,0)
 . . S XUCODE=$$SHAHASH^XUSHSH(256,$G(XAPHRASE),"B") ; ICR #6189
"RTN","XUESSO2",265,0)
 . . N FDR
"RTN","XUESSO2",266,0)
 . . S FDR(8994.5,XUENTRY_",",.03)=XUCODE
"RTN","XUESSO2",267,0)
 . . D FILE^DIE("E","FDR")
"RTN","XUESSO2",268,0)
 I XUENTRY'>0 Q "-1^Application ID must be registered in the REMOTE APPLICATION file"
"RTN","XUESSO2",269,0)
 Q XUENTRY
"RTN","XUESSO2",270,0)
 ;
"RTN","XUESSO2",271,0)
AUTH() ;Function. Check if calling routine is authorized
"RTN","XUESSO2",272,0)
 ; ^XUESSO2 does not address the security issue of user authentication, so a restriction is placed on the calling routine.
"RTN","XUESSO2",273,0)
 N X,Z
"RTN","XUESSO2",274,0)
 S $ECODE="" ;look at current stack, not error stack
"RTN","XUESSO2",275,0)
 S X=$ST($ST-2,"PLACE"),Z=$P(X,"^",2),X="^"_$P(Z," ")
"RTN","XUESSO2",276,0)
 I $E(X,1,3)="^XU" Q 1          ;Authorized Kernel access
"RTN","XUESSO2",277,0)
 Q 0
"RTN","XUESSO2",278,0)
 ;
"RTN","XUESSO4")
0^2^B62316901^B61505269
"RTN","XUESSO4",1,0)
XUESSO4 ;ISD/HGW Enhanced Single Sign-On Utilities ;04/12/17  10:23
"RTN","XUESSO4",2,0)
 ;;8.0;KERNEL;**659,630**;Jul 10, 1995;Build 13
"RTN","XUESSO4",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUESSO4",4,0)
 ;
"RTN","XUESSO4",5,0)
 Q
"RTN","XUESSO4",6,0)
 ;
"RTN","XUESSO4",7,0)
IAMBU(Y,SECID,AUTHCODE,ADUPN) ;RPC. XUS IAM BIND USER - ICR #6294
"RTN","XUESSO4",8,0)
 ;Identity and Access Management Edit User RPC for SSOi binding
"RTN","XUESSO4",9,0)
 ; Input:  SECID     = unique Security ID [SecID, assigned by Identity and Access Management]
"RTN","XUESSO4",10,0)
 ;         AUTHCODE  = Security Phrase for IAM Binding Application
"RTN","XUESSO4",11,0)
 ;         ADUPN     = Active Directory UPN
"RTN","XUESSO4",12,0)
 ; Return: Fail    Y = "-1^Error Message"
"RTN","XUESSO4",13,0)
 ;         Success Y = DUZ
"RTN","XUESSO4",14,0)
 ;
"RTN","XUESSO4",15,0)
 ; ZEXCEPT: DIERR ;FileMan special variables
"RTN","XUESSO4",16,0)
 N DUZZERO,FDR,IEN,XARRY,XRESULT,XUENTRY,XUIAM
"RTN","XUESSO4",17,0)
 I DUZ'>1 S Y="-1^Unauthorized access" Q
"RTN","XUESSO4",18,0)
 I $G(SECID)="" S Y="-1^Missing Security ID (SecID)" Q
"RTN","XUESSO4",19,0)
 I $G(AUTHCODE)="" S Y="-1^Missing Security Phrase" Q
"RTN","XUESSO4",20,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($G(AUTHCODE)) I +XUENTRY<0 S Y=XUENTRY Q
"RTN","XUESSO4",21,0)
 I $P($G(^XWB(8994.5,XUENTRY,0)),U,1)'="IAM BINDING" S Y="-1^Unauthorized access" Q
"RTN","XUESSO4",22,0)
 S XUIAM=1 ;Do not trigger IAM updates
"RTN","XUESSO4",23,0)
 S XARRY(7)=$G(SECID) ;SecID
"RTN","XUESSO4",24,0)
 I $G(SECID)'="" S XRESULT=$$FINDUSER^XUESSO2(.XARRY)
"RTN","XUESSO4",25,0)
 I (+XRESULT>0)&(XRESULT'=DUZ) S Y="-1^This SecID has already been assigned to another user" Q
"RTN","XUESSO4",26,0)
 ;Use FM calls to edit the user
"RTN","XUESSO4",27,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO4",28,0)
 S IEN=DUZ_","
"RTN","XUESSO4",29,0)
 S FDR(200,IEN,205.1)=$TR($E($G(SECID),1,40),"^","%")              ;SecID
"RTN","XUESSO4",30,0)
 S FDR(200,IEN,205.2)=$P($G(^XTV(8989.3,1,200)),U,2)               ;Subject Organization
"RTN","XUESSO4",31,0)
 S FDR(200,IEN,205.3)=$P($G(^XTV(8989.3,1,200)),U,3)               ;Subject Organization ID
"RTN","XUESSO4",32,0)
 S FDR(200,IEN,205.4)=$TR($E($G(SECID),1,40),"^","%")              ;Unique User ID
"RTN","XUESSO4",33,0)
 I $D(ADUPN) S FDR(200,IEN,205.5)=$$LOW^XLFSTR($E($G(ADUPN),1,50)) ;ADUPN
"RTN","XUESSO4",34,0)
 ; Apply all the changes: File valid values and reject invalid values (no "T" flag).
"RTN","XUESSO4",35,0)
 S DUZZERO=DUZ(0),DUZ(0)="@" ;Make sure we can update the entry
"RTN","XUESSO4",36,0)
 I $D(FDR) D FILE^DIE("ET","FDR") ;File all the data
"RTN","XUESSO4",37,0)
 S DUZ(0)=DUZZERO ;Restore original FM access
"RTN","XUESSO4",38,0)
 I $D(DIERR) S Y="-1^Error binding VistA user to IAM" Q
"RTN","XUESSO4",39,0)
 S Y=DUZ
"RTN","XUESSO4",40,0)
 Q
"RTN","XUESSO4",41,0)
 ;
"RTN","XUESSO4",42,0)
VACAA(INARRAY,AUTHCODE) ; Veterans Access, Choice, and Accountability Act of 2014 (VACAA)
"RTN","XUESSO4",43,0)
 ; Bulk-load non-VA provider information.
"RTN","XUESSO4",44,0)
 ; This interface is available under a private Integration Agreement (#6230) for support
"RTN","XUESSO4",45,0)
 ; of VACAA only, and should not be used under any other circumstances.
"RTN","XUESSO4",46,0)
 ; Input:  INARRAY(0)  = VISN
"RTN","XUESSO4",47,0)
 ;         INARRAY(1)  = NAME
"RTN","XUESSO4",48,0)
 ;         INARRAY(2)  = DEGREE
"RTN","XUESSO4",49,0)
 ;         INARRAY(3)  = SEX
"RTN","XUESSO4",50,0)
 ;         INARRAY(4)  = STREET ADDRESS 1
"RTN","XUESSO4",51,0)
 ;         INARRAY(5)  = STREET ADDRESS 2
"RTN","XUESSO4",52,0)
 ;         INARRAY(6)  = STREET ADDRESS 3
"RTN","XUESSO4",53,0)
 ;         INARRAY(7)  = CITY
"RTN","XUESSO4",54,0)
 ;         INARRAY(8)  = STATE
"RTN","XUESSO4",55,0)
 ;         INARRAY(9)  = ZIP
"RTN","XUESSO4",56,0)
 ;         INARRAY(10) = NPI
"RTN","XUESSO4",57,0)
 ;         INARRAY(11) = (Optional) TAX ID
"RTN","XUESSO4",58,0)
 ;         INARRAY(12) = DEA #
"RTN","XUESSO4",59,0)
 ;         INARRAY(13) = Subject Organization
"RTN","XUESSO4",60,0)
 ;         INARRAY(14) = Subject Organization ID
"RTN","XUESSO4",61,0)
 ; Return: Fail        = "-1^Error Message"
"RTN","XUESSO4",62,0)
 ;         Neutral     = 0 (not an error, but entry should not be made at this site)
"RTN","XUESSO4",63,0)
 ;         Success     = IEN of NEW PERSON file (#200) entry
"RTN","XUESSO4",64,0)
 ;
"RTN","XUESSO4",65,0)
 ; ZEXCEPT: DA,DD,DIC,DIE,DINUM,DLAYGO,DO,DR
"RTN","XUESSO4",66,0)
 N FADA,FDR,IEN,VIEN,VISN,X,XATTRIB,XDUZ,XIP,XSEC,XSTATE,XTAXID,XUIAM,XUVISN,Y
"RTN","XUESSO4",67,0)
 I $$SHAHASH^XUSHSH(256,AUTHCODE)'="69AB5CA7FF413ACA7422D52E466B0C1220BE64C25AFB354E2915A572E251E560" Q "-1^Unauthorized access"
"RTN","XUESSO4",68,0)
 I '$$PROD^XUPROD Q "-1^Not a production account"
"RTN","XUESSO4",69,0)
 I $G(INARRAY(0))="" Q "-1^Missing VISN"
"RTN","XUESSO4",70,0)
 I $G(INARRAY(1))="" Q "-1^Missing Name"
"RTN","XUESSO4",71,0)
 I $G(INARRAY(4))="" Q "-1^Missing Street Addr"
"RTN","XUESSO4",72,0)
 I $G(INARRAY(7))="" Q "-1^Missing City"
"RTN","XUESSO4",73,0)
 I $G(INARRAY(8))="" Q "-1^Missing State"
"RTN","XUESSO4",74,0)
 I $G(INARRAY(9))="" Q "-1^Missing Zip Code"
"RTN","XUESSO4",75,0)
 I $G(INARRAY(10))="" Q "-1^Missing NPI"
"RTN","XUESSO4",76,0)
 I $G(INARRAY(13))="" Q "-1^Missing Subject Organization"
"RTN","XUESSO4",77,0)
 I $G(INARRAY(14))="" Q "-1^Missing Subject Organization ID"
"RTN","XUESSO4",78,0)
 I '$$CHKDGT^XUSNPI($G(INARRAY(10))) Q "-1^Invalid NPI"
"RTN","XUESSO4",79,0)
 D PARENT^XUAF4("XUVISN","`"_DUZ(2),"VISN") ;Returns XUVISN("P",pien)="VISN #^"
"RTN","XUESSO4",80,0)
 S VIEN=$O(XUVISN("P",0)) S VISN=$TR($P($G(XUVISN("P",VIEN)),U),"VISN ") ;Return VISN number (no text)
"RTN","XUESSO4",81,0)
 I VISN'=INARRAY(0) Q 0  ; Only load data appropriate for the site's VISN (not an error)
"RTN","XUESSO4",82,0)
 S DUZ(0)="@",XUIAM=1 ;Temporary high-level access to edit NPF, do not trigger IAM updates
"RTN","XUESSO4",83,0)
 S XATTRIB(8)=INARRAY(10) ; NPI
"RTN","XUESSO4",84,0)
 S XDUZ=$$FINDUSER^XUESSO2(.XATTRIB) ; First find user based on NPI alone
"RTN","XUESSO4",85,0)
 ;Set minimum 4 attributes
"RTN","XUESSO4",86,0)
 S XATTRIB(1)=INARRAY(13) ; Subject Organization
"RTN","XUESSO4",87,0)
 S XATTRIB(2)=INARRAY(14) ; Subject Organization ID
"RTN","XUESSO4",88,0)
 S XATTRIB(3)=XATTRIB(8) ; Unique User ID = NPI per NHIN standard
"RTN","XUESSO4",89,0)
 S XATTRIB(4)=INARRAY(1) ; Subject ID = NAME
"RTN","XUESSO4",90,0)
 I (+XDUZ>0)&('+$$ACTIVE^XUSER(XDUZ)) S XDUZ=$$FINDUSER^XUESSO2(.XATTRIB) ; If not active user, lookup on NPI again, update M4A
"RTN","XUESSO4",91,0)
 I +XDUZ<1 S XDUZ=$$ADDUSER^XUESSO2(.XATTRIB) ;Add the new user with M4A
"RTN","XUESSO4",92,0)
 I +XDUZ<1 Q XDUZ  ;Quit with error code from ^XUESSO2
"RTN","XUESSO4",93,0)
 S IEN=XDUZ_","
"RTN","XUESSO4",94,0)
 I $G(INARRAY(2))'="" S FDR(200,IEN,10.6)=$E($G(INARRAY(2)),1,10)  ; DEGREE
"RTN","XUESSO4",95,0)
 I (($G(INARRAY(3))="M")!($G(INARRAY(3))="F")) S FDR(200,IEN,4)=$E($G(INARRAY(3)),1,1)  ; SEX
"RTN","XUESSO4",96,0)
 I $L($G(INARRAY(4)))>2 S FDR(200,IEN,.111)=$E($G(INARRAY(4)),1,50)  ; STREET ADDRESS 1
"RTN","XUESSO4",97,0)
 I $L($G(INARRAY(5)))>2 S FDR(200,IEN,.112)=$E($G(INARRAY(5)),1,50)  ; STREET ADDRESS 2
"RTN","XUESSO4",98,0)
 I $L($G(INARRAY(6)))>2 S FDR(200,IEN,.113)=$E($G(INARRAY(6)),1,50)  ; STREET ADDRESS 3
"RTN","XUESSO4",99,0)
 I $L($G(INARRAY(7)))>2 S FDR(200,IEN,.114)=$E($G(INARRAY(7)),1,30)  ; CITY
"RTN","XUESSO4",100,0)
 I $G(INARRAY(8))'="" D
"RTN","XUESSO4",101,0)
 . I $L($G(INARRAY(8)))>2 S XSTATE="" S XSTATE=$O(^DIC(5,"B",$G(INARRAY(8)),XSTATE))
"RTN","XUESSO4",102,0)
 . I $L($G(INARRAY(8)))=2 D
"RTN","XUESSO4",103,0)
 . . S XIP=""
"RTN","XUESSO4",104,0)
 . . D POSTAL^XIPUTIL($G(INARRAY(9)),.XIP)
"RTN","XUESSO4",105,0)
 . . S XSTATE=$G(XIP("STATE POINTER"))
"RTN","XUESSO4",106,0)
 . I XSTATE'="" S FDR(200,IEN,.115)=XSTATE ; STATE (pointer to ^DIC(5))
"RTN","XUESSO4",107,0)
 I $G(INARRAY(9))'="" S FDR(200,IEN,.116)=$G(INARRAY(9))  ; ZIP CODE
"RTN","XUESSO4",108,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO4",109,0)
 S XTAXID=$TR($G(INARRAY(11)),"-","")
"RTN","XUESSO4",110,0)
 I XTAXID'="" D
"RTN","XUESSO4",111,0)
 . S XTAXID=$E(XTAXID,1,2)_"-"_$E(XTAXID,3,9)
"RTN","XUESSO4",112,0)
 . S XTAXID=$TR(XTAXID," ","0")
"RTN","XUESSO4",113,0)
 I (XTAXID'="")&($P($G(^VA(200,XDUZ,"TPB")),U,2)="") S FDR(200,IEN,53.92)=XTAXID  ; TAX ID
"RTN","XUESSO4",114,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO4",115,0)
 I $P($G(^VA(200,XDUZ,"TPB")),U,1)="" S FDR(200,IEN,53.91)=1 ; NON-VA PRESCRIBER: (1=YES)
"RTN","XUESSO4",116,0)
 I $P($G(^VA(200,XDUZ,"PS")),U,6)="" S FDR(200,IEN,53.6)=4 ; PROVIDER TYPE: (4=FEE BASIS)
"RTN","XUESSO4",117,0)
 D APPLY(.FDR,IEN) K FDR S IEN=XDUZ_","
"RTN","XUESSO4",118,0)
 I '+$$ACTIVE^XUSER(XDUZ)'="" D  ;Could not get UPDATE^DIE to work consistently for these fields
"RTN","XUESSO4",119,0)
 . I $G(INARRAY(12))'="" D
"RTN","XUESSO4",120,0)
 . . S FDR(200,IEN,53.1)=1 ; AUTHORIZED TO WRITE MED ORDERS: (1=YES)
"RTN","XUESSO4",121,0)
 . . D APPLY(.FDR,IEN)
"RTN","XUESSO4",122,0)
 . . S DIE="^VA(200,",DA=XDUZ,DR="53.2////"_INARRAY(12) ; DEA # (stuff, due to duplicate DEA#s and user name changes)
"RTN","XUESSO4",123,0)
 . . L +^VA(200,XDUZ):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) D ^DIE L -^VA(200,XDUZ)
"RTN","XUESSO4",124,0)
 . I $D(^VA(200,XDUZ,"PS")) D
"RTN","XUESSO4",125,0)
 . . I '$P(^VA(200,XDUZ,"PS"),"^",4)!($P(^VA(200,XDUZ,"PS"),"^",4)>DT) D  ;Give user "XUORES" key if not an active user
"RTN","XUESSO4",126,0)
 . . . S DA=XDUZ
"RTN","XUESSO4",127,0)
 . . . K DIC S DIC="^DIC(19.1,",DIC(0)="MZ",X="XUORES" D ^DIC
"RTN","XUESSO4",128,0)
 . . . K DIC S FADA=XDUZ
"RTN","XUESSO4",129,0)
 . . . I +Y>0 S X=+Y D
"RTN","XUESSO4",130,0)
 . . . . S:'$D(^VA(200,FADA,51,0)) ^VA(200,FADA,51,0)="^"_$P(^DD(200,51,0),"^",2)_"^^"
"RTN","XUESSO4",131,0)
 . . . . S DIC="^VA(200,"_FADA_",51,",DIC(0)="LM",DIC("DR")="1////"_$S($G(DUZ):DUZ,1:"")_";2///"_DT,DLAYGO=200.051,DINUM=X,DA(1)=FADA
"RTN","XUESSO4",132,0)
 . . . . L +^VA(200,FADA):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) K DD,DO D FILE^DICN L -^VA(200,FADA) K DIC,DR,X,Y
"RTN","XUESSO4",133,0)
 . . I $P($G(^VA(200,XDUZ,"PS")),"^",5)="" D  ; PROVIDER CLASS (pointer to ^DIC(7))
"RTN","XUESSO4",134,0)
 . . . S X=0
"RTN","XUESSO4",135,0)
 . . . S X=$O(^DIC(7,"B","PHYSICIAN",X))
"RTN","XUESSO4",136,0)
 . . . I X>0 D
"RTN","XUESSO4",137,0)
 . . . . S DIE="^VA(200,",DA=XDUZ,DR="53.5////"_X
"RTN","XUESSO4",138,0)
 . . . . L +^VA(200,XDUZ):$S(+$G(^DD("DILOCKTM"))>0:+^DD("DILOCKTM"),1:3) D ^DIE L -^VA(200,XDUZ)
"RTN","XUESSO4",139,0)
 S DUZ(0)=$P($G(^VA(200,DUZ,0)),U,4)
"RTN","XUESSO4",140,0)
 Q XDUZ
"RTN","XUESSO4",141,0)
 ;
"RTN","XUESSO4",142,0)
APPLY(FDR,IEN) ; Apply the changes, used by "VACAA"
"RTN","XUESSO4",143,0)
 ;ZEXCEPT: DIC
"RTN","XUESSO4",144,0)
 K ^TMP("DIERR",$J)
"RTN","XUESSO4",145,0)
 S DIC(0)=""
"RTN","XUESSO4",146,0)
 I $D(FDR) K IEN D UPDATE^DIE("E","FDR","IEN") ;File all the data
"RTN","XUESSO4",147,0)
 Q
"RTN","XUESSO4",148,0)
 ;
"RTN","XUESSO4",149,0)
ESSO(RET,DOC) ; RPC. XUS ESSO VALIDATE - IA #6295
"RTN","XUESSO4",150,0)
 ;This API/RPC uses the VA Identity and Access Management (IAM) SAML token definition version 1.2 attributes
"RTN","XUESSO4",151,0)
 ; from a STS SAML token for user sign-on.
"RTN","XUESSO4",152,0)
 ; Input:     DOC    = Closed reference to global root containing XML document (loaded STS SAML Token).
"RTN","XUESSO4",153,0)
 ;                     See $$EN^MXMLDOM instructions in the VistA Kernel Developers Guide for required
"RTN","XUESSO4",154,0)
 ;                     format of the DOC global.
"RTN","XUESSO4",155,0)
 ; Return:    RET(0) = DUZ if sign-on was OK, zero if not OK.
"RTN","XUESSO4",156,0)
 ;            RET(1) = (0=OK, 1,2...=Can't sign on for some reason).
"RTN","XUESSO4",157,0)
 ;            RET(2) = 0
"RTN","XUESSO4",158,0)
 ;            RET(3) = Message.
"RTN","XUESSO4",159,0)
 ;            RET(4) = 0
"RTN","XUESSO4",160,0)
 ;            RET(5) = count of the number of lines of text, zero if none.
"RTN","XUESSO4",161,0)
 ;            RET(5+n) = message text.
"RTN","XUESSO4",162,0)
 ;
"RTN","XUESSO4",163,0)
 N VCCH,XARRY,XDIV,XDIVA,XOPT,XUDEV,XUF,XUHOME,XOPTION,XUM,XUMSG,XUVOL,X,Y
"RTN","XUESSO4",164,0)
 S U="^",RET(0)=0,RET(5)=0,XUF=$G(XUF,0),XUM=0,XUMSG=0,XUDEV=0
"RTN","XUESSO4",165,0)
 ; Begin user sign-on
"RTN","XUESSO4",166,0)
 S DUZ=0,DUZ(0)="" D NOW^XUSRB
"RTN","XUESSO4",167,0)
 S VCCH=0 ;VC not needed per: Password Policy When Alternate Authentication Is Available (VAIQ #7781071)
"RTN","XUESSO4",168,0)
 S XOPT=$$STATE^XWBSEC("XUS XOPT")
"RTN","XUESSO4",169,0)
 S XUVOL=^%ZOSF("VOL")
"RTN","XUESSO4",170,0)
 S XUMSG=$$INHIBIT^XUSRB() I XUMSG S XUM=1 G VAX^XUSRB ;Logon inhibited
"RTN","XUESSO4",171,0)
 ;3 Strikes
"RTN","XUESSO4",172,0)
 I $$LKCHECK^XUSTZIP($G(IO("IP"))) S XUMSG=7 G VAX^XUSRB ;IP locked
"RTN","XUESSO4",173,0)
 S DUZ=$$EN^XUSAML(DOC) ;Process SAML token
"RTN","XUESSO4",174,0)
 I DUZ'>0,$$FAIL^XUS3 D  G VAX^XUSRB
"RTN","XUESSO4",175,0)
 . S XUM=1,XUMSG=7,X=$$RA^XUSTZ H 5 ;3 Strikes
"RTN","XUESSO4",176,0)
 I DUZ'>0 S XUMSG=63 G VAX^XUSRB
"RTN","XUESSO4",177,0)
 D USER^XUS(DUZ) ;Build USER
"RTN","XUESSO4",178,0)
 S XUMSG=$$UVALID^XUS() G:XUMSG VAX^XUSRB ;Check if user is locked out, terminated, or disusered
"RTN","XUESSO4",179,0)
 I DUZ>0 S XUMSG=$$POST^XUSRB(1)
"RTN","XUESSO4",180,0)
 I XUMSG>0 S DUZ=0
"RTN","XUESSO4",181,0)
 D:DUZ>0 POST2^XUSRB
"RTN","XUESSO4",182,0)
 I +$G(DUZ("REMAPP"))>0 D  ;Role-based access
"RTN","XUESSO4",183,0)
 . S XOPTION=$P($G(^XWB(8994.5,+DUZ("REMAPP"),0)),U,2)
"RTN","XUESSO4",184,0)
 . I XOPTION>0 D SETCNTXT^XUSBSE1(XOPTION)
"RTN","XUESSO4",185,0)
 S RET(0)=DUZ,RET(1)=XUM,RET(2)=0,RET(3)=$S(XUMSG:$$TXT^XUS3(XUMSG),1:""),RET(4)=0
"RTN","XUESSO4",186,0)
 Q
"RTN","XUESSO4",187,0)
 ;
"RTN","XUSAML")
0^4^B106243736^B87822485
"RTN","XUSAML",1,0)
XUSAML ;ISD/HGW Kernel SAML Token Implementation ;07/05/17  12:53
"RTN","XUSAML",2,0)
 ;;8.0;KERNEL;**655,659,630**;Jul 10, 1995;Build 13
"RTN","XUSAML",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUSAML",4,0)
 ;
"RTN","XUSAML",5,0)
 ; Implements the Kernel SAML Token message framework for the Identification and
"RTN","XUSAML",6,0)
 ; Access Management (IAM) Single Sign-On (SSO) security model.
"RTN","XUSAML",7,0)
 ;
"RTN","XUSAML",8,0)
 ; External References:
"RTN","XUSAML",9,0)
 ;     ^%DT                Supported ICR #10003
"RTN","XUSAML",10,0)
 ;     $$ATTRIB^MXMLDOM    Supported ICR #3561
"RTN","XUSAML",11,0)
 ;     $$CHILD^MXMLDOM     Supported ICR #3561
"RTN","XUSAML",12,0)
 ;     $$EN^MXMLDOM        Supported ICR #3561
"RTN","XUSAML",13,0)
 ;     $$NAME^MXMLDOM      Supported ICR #3561
"RTN","XUSAML",14,0)
 ;     $$SIBLING^MXMLDOM   Supported ICR #3561
"RTN","XUSAML",15,0)
 ;     $$TEXT^MXMLDOM      Supported ICR #3561
"RTN","XUSAML",16,0)
 ;     $$VALUE^MXMLDOM     Supported ICR #3561
"RTN","XUSAML",17,0)
 ;     DELETE^MXMLDOM      Supported ICR #3561
"RTN","XUSAML",18,0)
 ;     TEXT^MXMLDOM        Supported ICR #3561
"RTN","XUSAML",19,0)
 ;     $$FMADD^XLFDT       Supported ICR #10103
"RTN","XUSAML",20,0)
 ;     $$NOW^XLFDT         Supported ICR #10103
"RTN","XUSAML",21,0)
 ;     $$TZ^XLFDT          Supported ICR #10103
"RTN","XUSAML",22,0)
 ;     $$TITLE^XLFSTR      Supported ICR #10104
"RTN","XUSAML",23,0)
 ;     $$LOW^XLFSTR        Supported ICR #10104
"RTN","XUSAML",24,0)
 ;     $$INVERT^XLFSTR     Supported ICR #10104
"RTN","XUSAML",25,0)
 ;     $$UP^XLFSTR         Supported ICR #10104
"RTN","XUSAML",26,0)
 ;     $$VALIDATE^XUCERT   Private (XU to XU)
"RTN","XUSAML",27,0)
 ;     $$AUTH^XUESSO2      Private (XU to XU)
"RTN","XUSAML",28,0)
 ;
"RTN","XUSAML",29,0)
 Q
"RTN","XUSAML",30,0)
EN(DOC) ;Function. Main entry point
"RTN","XUSAML",31,0)
 ;This function parses and processes the VA Identity and Access Management (IAM) STS SAML token
"RTN","XUSAML",32,0)
 ; (version 2.0) and returns the DUZ of the user, if found. It does not log the user into VistA.
"RTN","XUSAML",33,0)
 ; Input:     DOC     = Closed reference to global root containing XML document (loaded STS SAML Token)
"RTN","XUSAML",34,0)
 ;                      Example: S Y=$$EN^XUSAML($NA(^TMP($J,1)))
"RTN","XUSAML",35,0)
 ; Return:    Fail    = "-1^Error Message"
"RTN","XUSAML",36,0)
 ;            Success = DUZ
"RTN","XUSAML",37,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",38,0)
 N HDL,XASSRT,XUPN,Y
"RTN","XUSAML",39,0)
 K ^TMP("XUSAML",$J)
"RTN","XUSAML",40,0)
 S Y="-1^Error parsing STS SAML Token",XUPN="",XASSRT=""
"RTN","XUSAML",41,0)
 S XOBDATA("XOB RPC","SECURITY","STATE")="notauthenticated"
"RTN","XUSAML",42,0)
 S XOBDATA("XOB RPC","SAML","ASSERTION")="notvalidated"
"RTN","XUSAML",43,0)
 ;--- Call parser
"RTN","XUSAML",44,0)
 S HDL=$$EN^MXMLDOM(DOC,"W")
"RTN","XUSAML",45,0)
 I HDL>0 D
"RTN","XUSAML",46,0)
 . D ND(HDL,1,1,.XUPN,.XASSRT) ;Traverse and process document
"RTN","XUSAML",47,0)
 . S Y="-1^Invalid SAML assertion"
"RTN","XUSAML",48,0)
  . D VALASSRT(.XASSRT,DOC) ;Validate SAML assertion
"RTN","XUSAML",49,0)
  . I $G(XOBDATA("XOB RPC","SAML","ASSERTION"))="validated" D
"RTN","XUSAML",50,0)
  . . S Y=$$FINDUSER()
"RTN","XUSAML",51,0)
 . D DELETE^MXMLDOM(HDL)
"RTN","XUSAML",52,0)
 I +Y>0 S XOBDATA("XOB RPC","SECURITY","STATE")="authenticated"
"RTN","XUSAML",53,0)
 K ^TMP("XUSAML",$J)
"RTN","XUSAML",54,0)
 Q Y
"RTN","XUSAML",55,0)
ND(HDL,ND,FS,XUPN,XASSRT) ;SR. Traverse tree
"RTN","XUSAML",56,0)
 N CH,SIB,TX
"RTN","XUSAML",57,0)
 D SH(HDL,ND,.XUPN,.XASSRT)
"RTN","XUSAML",58,0)
 S CH=0
"RTN","XUSAML",59,0)
 S CH=$$CHILD^MXMLDOM(HDL,ND,CH)
"RTN","XUSAML",60,0)
 I CH D ND(HDL,CH,1,.XUPN,.XASSRT)
"RTN","XUSAML",61,0)
 Q:'FS  ;Don't follow the siblings of siblings
"RTN","XUSAML",62,0)
 S SIB=ND
"RTN","XUSAML",63,0)
 F  S SIB=$$SIBLING^MXMLDOM(HDL,SIB) Q:'SIB  D ND(HDL,SIB,0,.XUPN,.XASSRT)
"RTN","XUSAML",64,0)
 Q
"RTN","XUSAML",65,0)
SH(HDL,ND,XUPN,XASSRT) ;SR. Process node elements
"RTN","XUSAML",66,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",67,0)
 N ELE,I,NM,V,VV,XCHILD,XERR,XTEXT,XVALUE
"RTN","XUSAML",68,0)
 S ELE=$$NAME^MXMLDOM(HDL,ND)
"RTN","XUSAML",69,0)
 ; --------------------  saml:Subject Event Processing  ---------------------------
"RTN","XUSAML",70,0)
 I (ELE="Subject")!(ELE="saml:Subject")!(ELE="ns2:Subject") D  Q  ;Subject element is required
"RTN","XUSAML",71,0)
 . S XASSRT("Subject")="yes"
"RTN","XUSAML",72,0)
 ;
"RTN","XUSAML",73,0)
 ; --------------------  saml:Subject Confirmation Data Event Processing  ----------
"RTN","XUSAML",74,0)
 I (ELE="SubjectConfirmationData")!(ELE="saml:SubjectConfirmationData")!(ELE="ns2:SubjectConfirmationData") D  Q
"RTN","XUSAML",75,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",76,0)
 . S XASSRT("Recipient")=$O(^TMP("XUSAML",$J,"Recipient",""))
"RTN","XUSAML",77,0)
 . S XASSRT("Address")=$O(^TMP("XUSAML",$J,"Address",""))
"RTN","XUSAML",78,0)
 ;
"RTN","XUSAML",79,0)
 ; --------------------  saml:Conditions Event Processing  -------------------------
"RTN","XUSAML",80,0)
 I (ELE="Conditions")!(ELE="saml:Conditions")!(ELE="ns2:Conditions") D  Q
"RTN","XUSAML",81,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",82,0)
 . S XASSRT("NotBefore")=$O(^TMP("XUSAML",$J,"NotBefore",""))
"RTN","XUSAML",83,0)
 . S XASSRT("NotOnOrAfter")=$O(^TMP("XUSAML",$J,"NotOnOrAfter",""))
"RTN","XUSAML",84,0)
 ;
"RTN","XUSAML",85,0)
 ; --------------------  saml:AuthnStatement Event Processing  ---------------------
"RTN","XUSAML",86,0)
 I (ELE="AuthnStatement")!(ELE="saml:AuthnStatement")!(ELE="ns2:AuthnStatement") D  Q
"RTN","XUSAML",87,0)
 . D EL(HDL,ND,.NM,.XUPN)
"RTN","XUSAML",88,0)
 . S XASSRT("AuthnInstant")=$O(^TMP("XUSAML",$J,"AuthnInstant",""))
"RTN","XUSAML",89,0)
 I (ELE="AuthnContextClassRef")!(ELE="saml:AuthnContextClassRef")!(ELE="ns2:AuthnContextClassRef") D  Q
"RTN","XUSAML",90,0)
 . S XUPN="AuthnContextClassRef"
"RTN","XUSAML",91,0)
 . D CH(HDL,ND,XUPN)
"RTN","XUSAML",92,0)
 . S XASSRT("AuthnContextClassRef")=$G(^TMP("XUSAML",$J,"AuthnContextClassRef"))
"RTN","XUSAML",93,0)
 ;
"RTN","XUSAML",94,0)
 ; --------------------  saml:Attribute Event Processing  --------------------------
"RTN","XUSAML",95,0)
 I (ELE="Attribute")!(ELE="saml:Attribute")!(ELE="ns2:Attribute") D  Q
"RTN","XUSAML",96,0)
 . S XCHILD=$$CHILD^MXMLDOM(HDL,ND) ;Identify child (AttributeValue) of node ND
"RTN","XUSAML",97,0)
 . S XTEXT="" S XERR=$$TEXT^MXMLDOM(HDL,XCHILD,$NA(VV)) ;Get text of AttributeValue
"RTN","XUSAML",98,0)
 . I XERR=1 F I=1:1 Q:'$D(VV(I))  S XTEXT=XTEXT_VV(I)
"RTN","XUSAML",99,0)
 . S NM=""
"RTN","XUSAML",100,0)
 . F  S NM=$$ATTRIB^MXMLDOM(HDL,ND,NM) Q:'$L(NM)  D  ;Get name of Attribute
"RTN","XUSAML",101,0)
 . . I $G(NM)="Name" D
"RTN","XUSAML",102,0)
 . . . S XVALUE=$$VALUE^MXMLDOM(HDL,ND,NM)
"RTN","XUSAML",103,0)
 . . . S ^TMP("XUSAML",$J,NM,XVALUE)=XTEXT ;Set up the ^TMP global for the Attribute
"RTN","XUSAML",104,0)
 Q
"RTN","XUSAML",105,0)
CH(HDL,ND,XUPN) ;SR. Process text node
"RTN","XUSAML",106,0)
 N I,VV,Y
"RTN","XUSAML",107,0)
 I $G(XUPN)'="" D
"RTN","XUSAML",108,0)
 . S Y=""
"RTN","XUSAML",109,0)
 . D TEXT^MXMLDOM(HDL,ND,$NA(VV))
"RTN","XUSAML",110,0)
 . I $D(VV)>2 F I=1:1 Q:'$D(VV(I))  S Y=Y_VV(I)
"RTN","XUSAML",111,0)
 . I $P(XUPN,"^",2)="" D
"RTN","XUSAML",112,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1))=Y
"RTN","XUSAML",113,0)
 . E  D
"RTN","XUSAML",114,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1),$P(XUPN,"^",2))=Y
"RTN","XUSAML",115,0)
 Q
"RTN","XUSAML",116,0)
EL(HDL,ND,NM,XUPN) ;SR. Process element
"RTN","XUSAML",117,0)
 K XUPN S (NM,XUPN)=""
"RTN","XUSAML",118,0)
 F  S NM=$$ATTRIB^MXMLDOM(HDL,ND,NM) Q:'$L(NM)  D
"RTN","XUSAML",119,0)
 . I $L(NM) S XUPN=NM_"^"_$$VALUE^MXMLDOM(HDL,ND,NM)
"RTN","XUSAML",120,0)
 . I $P(XUPN,"^",2)="" D
"RTN","XUSAML",121,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1))=""
"RTN","XUSAML",122,0)
 . E  D
"RTN","XUSAML",123,0)
 . . S ^TMP("XUSAML",$J,$P(XUPN,"^",1),$P(XUPN,"^",2))=""
"RTN","XUSAML",124,0)
 Q
"RTN","XUSAML",125,0)
FINDUSER() ;Function. Identify user
"RTN","XUSAML",126,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",127,0)
 N VISTAID,X,XARRY,XAUTH,XCTXT,XDUZ,XEDIPI,XPASS,XC,XT,XUHOME,XUIAM,Z
"RTN","XUSAML",128,0)
 I '$$AUTH^XUESSO2() Q "-1^Not an authorized calling routine"
"RTN","XUSAML",129,0)
 S Y="-1^User could not be identified"
"RTN","XUSAML",130,0)
 S XERR=""
"RTN","XUSAML",131,0)
 S DUZ("REMAPP")=""
"RTN","XUSAML",132,0)
 S XUIAM=1 ;Do not trigger IAM updates
"RTN","XUSAML",133,0)
 S XARRY(1)=$$TITLE^XLFSTR($E($G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:organization")),1,50)) ;Subject Organization
"RTN","XUSAML",134,0)
 S XARRY(2)=$$LOW^XLFSTR($E($G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:organization-id")),1,50)) ;Subject Organization ID
"RTN","XUSAML",135,0)
 S XARRY(3)=$G(^TMP("XUSAML",$J,"Name","uniqueUserId")) ;Unique User ID
"RTN","XUSAML",136,0)
 S XARRY(4)=$G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:1.0:subject:subject-id")) ;Subject ID
"RTN","XUSAML",137,0)
 S XPASS=$$IDPASS($G(XASSRT("Recipient"))) ;Application ID
"RTN","XUSAML",138,0)
 I $G(XPASS)'="" D
"RTN","XUSAML",139,0)
 . S XT=$$GETCNTXT^XUESSO2(XPASS)
"RTN","XUSAML",140,0)
 . I +XT>0 D
"RTN","XUSAML",141,0)
 . . S DUZ("REMAPP")=XT_"^"_$P($G(^XWB(8994.5,XT,0)),U)  ;Identify remote application
"RTN","XUSAML",142,0)
 . . S XCTXT=$P($G(^XWB(8994.5,XT,0)),U,2)
"RTN","XUSAML",143,0)
 . . I $G(XCTXT)'="" S XARRY(5)=XPASS
"RTN","XUSAML",144,0)
 E  S XARRY(5)="" ;Application ID
"RTN","XUSAML",145,0)
 S XARRY(6)=$G(^TMP("XUSAML",$J,"Name","urn:va:ad:samaccountname")) ;Network Username
"RTN","XUSAML",146,0)
 S XARRY(7)=$G(^TMP("XUSAML",$J,"Name","urn:va:vrm:iam:secid")) ;SecID
"RTN","XUSAML",147,0)
 S XARRY(8)=$G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xspa:2.0:subject:npi")) ;NPI
"RTN","XUSAML",148,0)
 ;S XARRY(9)=$G(^TMP("XUSAML",$J,"Name","SSN")) ;SSN is not part of STS Token specification v2.0
"RTN","XUSAML",149,0)
 S XARRY(10)=$G(^TMP("XUSAML",$J,"Name","upn")) ;Active Directory User Principle Name (UPN)
"RTN","XUSAML",150,0)
 S XARRY(11)=$G(^TMP("XUSAML",$J,"Name","email")) ;E-Mail Address
"RTN","XUSAML",151,0)
 ;S ???=$G(^TMP("XUSAML",$J,"Name","urn:oasis:names:tc:xacml:2.0:subject:role")) ;Role-based access is not yet implemented
"RTN","XUSAML",152,0)
 S XAUTH=$$LOW^XLFSTR($G(^TMP("XUSAML",$J,"Name","authnsystem"))) ;SSOi, SSOe, or Other authentication
"RTN","XUSAML",153,0)
 S XUHOME=$$LOW^XLFSTR($G(^TMP("XUSAML",$J,"Name","urn:nhin:names:saml:homeCommunityId"))) ;Home Community ID
"RTN","XUSAML",154,0)
 S XEDIPI=$G(^TMP("XUSAML",$J,"Name","edipi")) ;DoD CAC card identifier
"RTN","XUSAML",155,0)
 S DUZ("MVIICN")=$G(^TMP("XUSAML",$J,"Name","urn:va:vrn:iam:mviicn")) ;ICN
"RTN","XUSAML",156,0)
 ;
"RTN","XUSAML",157,0)
 I (XUHOME=$P($G(^XTV(8989.3,1,200)),U,3))&(XAUTH="ssoi") D  ;SSOi
"RTN","XUSAML",158,0)
 . S XARRY(3)=XARRY(7) ;UID=SecID
"RTN","XUSAML",159,0)
 . S XDUZ=$$FINDUSER^XUESSO2(.XARRY) ;Identify existing user
"RTN","XUSAML",160,0)
 . ;Do not add new SSOi user on the fly (by design). Use IAM Provisioning application.
"RTN","XUSAML",161,0)
 . S DUZ("AUTHENTICATION")="SSOI"
"RTN","XUSAML",162,0)
 E  I (XUHOME=$P($G(^XTV(8989.3,1,200)),U,3))&(XAUTH="ssoe") D  ;SSOe
"RTN","XUSAML",163,0)
 . I ($L($G(XARRY(1)))<3)!($L($G(XARRY(2)))<3) S XDUZ="-1^Invalid SORG or SORGID" Q
"RTN","XUSAML",164,0)
 . S XARRY(3)=XARRY(7) ;UID=SecID
"RTN","XUSAML",165,0)
 . I +DUZ("REMAPP")>0 D
"RTN","XUSAML",166,0)
 . . S XDUZ=$$FINDUSER^XUESSO2(.XARRY) ;Identify existing user
"RTN","XUSAML",167,0)
 . . I (+XDUZ<0)&($G(XARRY(5))'="") S XDUZ=$$ADDUSER^XUESSO2(.XARRY) ;Add new user on the fly
"RTN","XUSAML",168,0)
 . . S DUZ("AUTHENTICATION")="SSOE"
"RTN","XUSAML",169,0)
 E  I (XARRY(2)["http://")!(XARRY(2)["https://")!((XARRY(2)["urn:oid:")&(XARRY(2)'=$P($G(^XTV(8989.3,1,200)),U,3))) D  ; NHIN
"RTN","XUSAML",170,0)
 . I (+DUZ("REMAPP")>0)&(XAUTH="nhin") D
"RTN","XUSAML",171,0)
 . . I $G(XARRY(3))="" S XARRY(3)=XARRY(8) ;NHIN: UID is NPI if available (preferred)
"RTN","XUSAML",172,0)
 . . I $G(XARRY(3))="" S XARRY(3)=XEDIPI ;NHIN: DoD CAC card identifier
"RTN","XUSAML",173,0)
 . . I $G(XARRY(3))="" S XARRY(3)=XARRY(11) ;NHIN: UID is e-mail if available (alternative to NPI)
"RTN","XUSAML",174,0)
 . . S XDUZ=$$FINDUSER^XUESSO2(.XARRY) ;Identify user by NPI or Unique User ID
"RTN","XUSAML",175,0)
 . . I +XDUZ<0 D
"RTN","XUSAML",176,0)
 . . . S XARRY(8)=""
"RTN","XUSAML",177,0)
 . . . S XDUZ=$$FINDUSER^XUESSO2(.XARRY) ;Identify user by Unique User ID only
"RTN","XUSAML",178,0)
 . . I (+XDUZ<0)&($G(XARRY(5))'="") S XDUZ=$$ADDUSER^XUESSO2(.XARRY) ;Add new user on the fly
"RTN","XUSAML",179,0)
 . . S DUZ("AUTHENTICATION")="NHIN"
"RTN","XUSAML",180,0)
 Q XDUZ
"RTN","XUSAML",181,0)
VALASSRT(XASSRT,DOC) ;Intrinsic Subroutine. Validate SAML assertion
"RTN","XUSAML",182,0)
 ;ZEXCEPT: XOBDATA ;environment variable
"RTN","XUSAML",183,0)
 N XAUTH,XD,XNOW,XPROOF,XQ
"RTN","XUSAML",184,0)
 S XOBDATA("XOB RPC","SAML","AUTHENTICATION TYPE")=$G(^TMP("XUSAML",$J,"Name","authenticationtype"))
"RTN","XUSAML",185,0)
 S XOBDATA("XOB RPC","SAML","PROOFING AUTHORITY")=$G(^TMP("XUSAML",$J,"Name","proofingauthority"))
"RTN","XUSAML",186,0)
 S XAUTH=$$LOW^XLFSTR($G(^TMP("XUSAML",$J,"Name","authnsystem")))
"RTN","XUSAML",187,0)
 S XPROOF=XOBDATA("XOB RPC","SAML","PROOFING AUTHORITY")
"RTN","XUSAML",188,0)
 ; Verify Level of Assurance (VA requires LOA-1 through LOA-3, but higher levels are accepted)
"RTN","XUSAML",189,0)
 K XOBDATA("XOB RPC","SAML","ASSURANCE LEVEL")
"RTN","XUSAML",190,0)
 S XD=$G(^TMP("XUSAML",$J,"Name","assurancelevel")) I (+XD<1)!(+XD="") S XD=1
"RTN","XUSAML",191,0)
 S XOBDATA("XOB RPC","SAML","ASSURANCE LEVEL")=XD
"RTN","XUSAML",192,0)
 S DUZ("LOA")=XD ;Set LOA environment variable for SIGN-ON log and permissions
"RTN","XUSAML",193,0)
 I (XAUTH'="nhin")&(XPROOF'="VA-JLV") D  Q:XQ  ;temporary for pre-SSOe JLV non-VA users
"RTN","XUSAML",194,0)
 . S XQ=0
"RTN","XUSAML",195,0)
 . ;Validate time stamps (e.g., NotBefore, NotOnOrAfter)
"RTN","XUSAML",196,0)
 . S XNOW=$$NOW^XLFDT
"RTN","XUSAML",197,0)
 . S XD=$$CONVTIME($G(XASSRT("AuthnInstant"))) I XD=-1 D  Q  ;invalid time stamp
"RTN","XUSAML",198,0)
 . . S XQ=1
"RTN","XUSAML",199,0)
 . S XD=$$CONVTIME($G(XASSRT("NotBefore"))) I (XD=-1)!(XD>XNOW) D  Q  ;token not valid yet
"RTN","XUSAML",200,0)
 . . S XQ=1
"RTN","XUSAML",201,0)
 . S XD=$$CONVTIME($G(XASSRT("NotOnOrAfter"))) I (XD=-1)!(XD'>XNOW) D  Q  ;token expired
"RTN","XUSAML",202,0)
 . . S XQ=1
"RTN","XUSAML",203,0)
 . I '$D(XASSRT("AuthnContextClassRef")) D  Q
"RTN","XUSAML",204,0)
 . . S XQ=1
"RTN","XUSAML",205,0)
 . ;Validate Digital Signature
"RTN","XUSAML",206,0)
 . I '$$VALIDATE^XUCERT(DOC) D  Q
"RTN","XUSAML",207,0)
 . . S XQ=1
"RTN","XUSAML",208,0)
 . ;Validate Token Issuer (Subject of X509 Certificate used to sign token)
"RTN","XUSAML",209,0)
 . I '($G(XOBDATA("XOB RPC","SAML","ISSUER"))[$P($G(^XTV(8989.3,1,200)),U,1)) D  Q
"RTN","XUSAML",210,0)
 . . S XQ=1
"RTN","XUSAML",211,0)
 . ;Token has been validated
"RTN","XUSAML",212,0)
 S XOBDATA("XOB RPC","SAML","ASSERTION")="validated"
"RTN","XUSAML",213,0)
 Q
"RTN","XUSAML",214,0)
IDPASS(XUA) ;Intrinsic Function. Extract Application ID
"RTN","XUSAML",215,0)
 N RETURN,XTD,XTE
"RTN","XUSAML",216,0)
 S RETURN=$P($G(XUA),"/",4,99)
"RTN","XUSAML",217,0)
 S XTD=$$DT^XLFDT
"RTN","XUSAML",218,0)
 S XTE=$$FMADD^XLFDT(XTD,7)
"RTN","XUSAML",219,0)
 I $G(RETURN)'="" D
"RTN","XUSAML",220,0)
 . S ^XTMP("XUSAMLAPPID",0)=XTE_"^"_XTD_"^SAML Application ID" ;capture and log application ID from SAML token
"RTN","XUSAML",221,0)
 . S ^XTMP("XUSAMLAPPID",0,RETURN)=""
"RTN","XUSAML",222,0)
 . S RETURN=$$LOW^XLFSTR(RETURN)
"RTN","XUSAML",223,0)
 Q RETURN
"RTN","XUSAML",224,0)
CONVTIME(TIME) ;Intrinsic Function. Convert XML time to FileMan format
"RTN","XUSAML",225,0)
 ;ZEXCEPT: %DT ;environment variable
"RTN","XUSAML",226,0)
 N X,XD,XOUT,XT,XZ,Y
"RTN","XUSAML",227,0)
 S XZ=0 I $G(TIME)["Z" S XZ=1 ;Zulu time (GMT)
"RTN","XUSAML",228,0)
 S XD=$P($G(TIME),"T",1) ;Date
"RTN","XUSAML",229,0)
 S XD=$P(XD,"-",2)_"/"_$P(XD,"-",3)_"/"_$P(XD,"-",1) ;Convert date to MM/DD/YYYY
"RTN","XUSAML",230,0)
 S XT=$P($G(TIME),"T",2) ;Time
"RTN","XUSAML",231,0)
 I XZ=1 S XT=$P(XT,"Z",1) ;Strip "Z" from time
"RTN","XUSAML",232,0)
 S X=XD_"@"_XT S %DT="RTS"
"RTN","XUSAML",233,0)
 D ^%DT S XOUT=Y
"RTN","XUSAML",234,0)
 I XOUT=-1 Q XOUT ;Invalid date/time
"RTN","XUSAML",235,0)
 I XZ=1 S XOUT=$$FMADD^XLFDT(XOUT,0,+$E($$TZ^XLFDT,1,3),0,0) ;Adjust from GMT
"RTN","XUSAML",236,0)
 K %DT(0)
"RTN","XUSAML",237,0)
 Q XOUT
"RTN","XUSBSE1")
0^5^B155496043^B158984065
"RTN","XUSBSE1",1,0)
XUSBSE1 ;ISF/JLI,ISD/HGW - MODIFICATIONS FOR BSE ;01/25/17  7:52
"RTN","XUSBSE1",2,0)
 ;;8.0;KERNEL;**404,439,523,595,522,638,659,630**;Jul 10, 1995;Build 13
"RTN","XUSBSE1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","XUSBSE1",4,0)
 ;
"RTN","XUSBSE1",5,0)
 Q
"RTN","XUSBSE1",6,0)
SETVISIT(RES) ; RPC. XUS SET VISITOR - ICR #5501
"RTN","XUSBSE1",7,0)
 ;Returns a BSE TOKEN
"RTN","XUSBSE1",8,0)
 N TOKEN,O,X
"RTN","XUSBSE1",9,0)
 S X=$$ACTIVE^XUSER(DUZ) I $P(X,U)<1 S RES=X Q  ;User must be active
"RTN","XUSBSE1",10,0)
 S TOKEN=$$HANDLE^XUSRB4("XUSBSE",1)
"RTN","XUSBSE1",11,0)
 S ^XTMP(TOKEN,1)=$$ENCRYP^XUSRB1($$GET^XUESSO1(DUZ))
"RTN","XUSBSE1",12,0)
 S ^XTMP(TOKEN,3)=+$H ;Set expiration day
"RTN","XUSBSE1",13,0)
 L -^XTMP(TOKEN) ;Lock set in $$HANDLE^XUSRB4
"RTN","XUSBSE1",14,0)
 S RES=TOKEN
"RTN","XUSBSE1",15,0)
 Q
"RTN","XUSBSE1",16,0)
 ;
"RTN","XUSBSE1",17,0)
GETVISIT(RES,TOKEN) ; RPC. XUS GET VISITOR - ICR #5532
"RTN","XUSBSE1",18,0)
 ;Returns demographics for user indicated by TOKEN
"RTN","XUSBSE1",19,0)
 ;  or "-1^error message" if user is not permitted to visit
"RTN","XUSBSE1",20,0)
 ;   input  - TOKEN - token value returned by remote site
"RTN","XUSBSE1",21,0)
 ;   output - RES - passed by reference, contains user demographics on return
"RTN","XUSBSE1",22,0)
 N O,X
"RTN","XUSBSE1",23,0)
 S RES="",O=0
"RTN","XUSBSE1",24,0)
 I TOKEN="" S X=$$LOGERR("BSE NULL TOKEN") Q  ;Shouldn't come in with a null token
"RTN","XUSBSE1",25,0)
 L +^XTMP(TOKEN):10 I '$T Q  ; If ^XTMP is purged, token context will be lost
"RTN","XUSBSE1",26,0)
 I ($G(^XTMP(TOKEN,3))-$H) K ^XTMP(TOKEN) Q  ;Check expiration time, and if it has passed
"RTN","XUSBSE1",27,0)
 S RES=$G(^XTMP(TOKEN,1)) S:$L(RES) RES=$$DECRYP^XUSRB1(RES)
"RTN","XUSBSE1",28,0)
 L -^XTMP(TOKEN) ;Lock set in $$HANDLE^XUSRB4
"RTN","XUSBSE1",29,0)
 S:'$L(RES) X=$$LOGERR("BSE GET USER ID") ;p595
"RTN","XUSBSE1",30,0)
 Q
"RTN","XUSBSE1",31,0)
 ;
"RTN","XUSBSE1",32,0)
MDWS(XWBUSRNM) ; Intrinsic. Old CAPRI code, currently used by MDWS: Disable with system parameter XU522.
"RTN","XUSBSE1",33,0)
 ; Return 1 if a valid user, else 0.
"RTN","XUSBSE1",34,0)
 ;**********************************************************************************************************************
"RTN","XUSBSE1",35,0)
 ;***** This interface is deprecated as of patch XU*8.0*522 and will be permanently disabled with patch XU*8.0*617 *****
"RTN","XUSBSE1",36,0)
 ;**********************************************************************************************************************
"RTN","XUSBSE1",37,0)
 ; ZEXCEPT: DTIME - Kernel exemption
"RTN","XUSBSE1",38,0)
 N XVAL,XOPTION,XVAL522,XAPP
"RTN","XUSBSE1",39,0)
 S XVAL522=$$GET^XPAR("SYS","XU522",1,"Q")  ; p522 system parameter XU522 controls MDWS login disabling, logging
"RTN","XUSBSE1",40,0)
 D:(XVAL522="E"!(XVAL522="L")) APPERROR^%ZTER("MDWS LOGIN ATTEMPT")  ; p522 record MDWS login attempt if XU522 = E or L
"RTN","XUSBSE1",41,0)
 Q:(XVAL522'="L")&(XVAL522'="N") 0  ; p522 fully activate BSE unless parameter XU522 = N or L
"RTN","XUSBSE1",42,0)
 S DUZ("LOA")=1,DUZ("AUTHENTICATION")="NONE"
"RTN","XUSBSE1",43,0)
 S XAPP=+$$FIND1^DIC(8994.5,,"B","MEDICAL DOMAIN WEB SERVICES") I XAPP<1 S XAPP=""
"RTN","XUSBSE1",44,0)
 S DUZ("REMAPP")=XAPP_"^MEDICAL DOMAIN WEB SERVICES" ;p630
"RTN","XUSBSE1",45,0)
 S XVAL=$$PUT^XUESSO1($P(XWBUSRNM,U,3,99)) ; Sign in as Visitor
"RTN","XUSBSE1",46,0)
 I XVAL D
"RTN","XUSBSE1",47,0)
 . S XOPTION=$$FIND1^DIC(19,"","X","DVBA CAPRI GUI")
"RTN","XUSBSE1",48,0)
 . D SETCNTXT(XOPTION)
"RTN","XUSBSE1",49,0)
 . S DTIME=$$DTIME^XUP(DUZ)
"RTN","XUSBSE1",50,0)
 . S DUZ(0)=""
"RTN","XUSBSE1",51,0)
 . I $$USERTYPE^XUSAP(DUZ,"APPLICATION PROXY") H $R(5)
"RTN","XUSBSE1",52,0)
 Q $S(XVAL>0:1,1:0)
"RTN","XUSBSE1",53,0)
 ;
"RTN","XUSBSE1",54,0)
CHKUSER(INPUTSTR) ; Extrinsic. Determines if a BSE sign-on is valid - called from XUSRB
"RTN","XUSBSE1",55,0)
 ;   INPUTSTR - input - String of characters from client
"RTN","XUSBSE1",56,0)
 ;   return value - 1 if a valid user and application, else 0
"RTN","XUSBSE1",57,0)
 ; ZEXCEPT: DTIME - Kernel exemption
"RTN","XUSBSE1",58,0)
 N X,XUCODE,XUENTRY,XUSTR,XUTOKEN
"RTN","XUSBSE1",59,0)
 ;I +INPUTSTR=-31,INPUTSTR["DVBA_" Q 0  ; permanently shut down MDWS visitor interface
"RTN","XUSBSE1",60,0)
 I +INPUTSTR=-31,INPUTSTR["DVBA_" Q $$MDWS(INPUTSTR)
"RTN","XUSBSE1",61,0)
 I +INPUTSTR'=-35 S X=$$LOGERR("BSE LOGIN ERROR") Q 0  ; not a BSE login
"RTN","XUSBSE1",62,0)
 S INPUTSTR=$P(INPUTSTR,U,2,99)
"RTN","XUSBSE1",63,0)
 K ^TMP("XUSBSE1",$J)
"RTN","XUSBSE1",64,0)
 S XUCODE=$$DECRYP^XUSRB1(INPUTSTR)
"RTN","XUSBSE1",65,0)
 S XUENTRY=$$GETCNTXT^XUESSO2($P(XUCODE,U))
"RTN","XUSBSE1",66,0)
 I XUENTRY'>0 S X=$$LOGERR("BSE LOGIN ERROR - REMAPP") Q 0  ; invalid remote application
"RTN","XUSBSE1",67,0)
 S DUZ("LOA")=2,DUZ("AUTHENTICATION")="BSETOKEN"
"RTN","XUSBSE1",68,0)
 S DUZ("REMAPP")=XUENTRY_U_$$GET1^DIQ(8994.5,XUENTRY_",",.01)
"RTN","XUSBSE1",69,0)
 S XUTOKEN=$P(XUCODE,U,2)
"RTN","XUSBSE1",70,0)
 S XUSTR=$P(XUCODE,U,3,4)
"RTN","XUSBSE1",71,0)
 S XUENTRY=$$BSEUSER(XUENTRY,XUTOKEN,XUSTR)
"RTN","XUSBSE1",72,0)
 S DTIME=$$DTIME^XUP(DUZ)
"RTN","XUSBSE1",73,0)
 I XUENTRY'>0 S X=$$LOGERR("BSE LOGIN ERROR - USER") Q 0  ; invalid user
"RTN","XUSBSE1",74,0)
 Q XUENTRY
"RTN","XUSBSE1",75,0)
 ;
"RTN","XUSBSE1",76,0)
BSEUSER(ENTRY,TOKEN,STR) ; Intrinsic. Returns internal entry number for authenticated user
"RTN","XUSBSE1",77,0)
 ;   ENTRY - input - internal entry number in REMOTE APPLICATION file
"RTN","XUSBSE1",78,0)
 ;   TOKEN - input - token from authenticating site
"RTN","XUSBSE1",79,0)
 ;   STR   - input - remainder of input string (station #^TCP/IP port for station-based authentication)
"RTN","XUSBSE1",80,0)
 ;   returns - IEN for authenticated user, or 0 if not authenticated
"RTN","XUSBSE1",81,0)
 ; ZEXCEPT: XWBSEC - Kernel exemption, contains error message returned to GUI application
"RTN","XUSBSE1",82,0)
 N X,XUIEN,XUCONTXT,XUDEMOG,XCNT,XVAL,ARRAY,XUCACHE,XUCONTXT
"RTN","XUSBSE1",83,0)
 S XUIEN=0,XUDEMOG="",XUCONTXT=0
"RTN","XUSBSE1",84,0)
 ; Check for cached user authentication (p638)
"RTN","XUSBSE1",85,0)
 I $D(^XTMP("XUSBSE1",TOKEN)) D
"RTN","XUSBSE1",86,0)
 . S XUCACHE=$G(^XTMP("XUSBSE1",TOKEN)) ; Retrieve cached values
"RTN","XUSBSE1",87,0)
 . I $P($P(XUCACHE,U,1),".",1)<$$DT^XLFDT() K ^XTMP("XUSBSE1",TOKEN) Q  ; Do not use if expired (not from today)
"RTN","XUSBSE1",88,0)
 . I $P(XUCACHE,U,1)=$$HADD^XLFDT($$NOW^XLFDT(),0,0,0,600) K ^XTMP("XUSBSE1",TOKEN) Q  ; Do not use if expired (older than 600s)
"RTN","XUSBSE1",89,0)
 . S XUDEMOG=$P(XUCACHE,U,3,99) ; Get demographics of authenticated user
"RTN","XUSBSE1",90,0)
 . I '$$PUT^XUESSO1(XUDEMOG) Q  ; Set VISITOR entry, quit if failed
"RTN","XUSBSE1",91,0)
 . S XUIEN=$G(DUZ)
"RTN","XUSBSE1",92,0)
 . S XUCONTXT=$P(XUCACHE,U,2),^XUTL("XQ",$J,"DUZ(BSE)")=XUCONTXT ; Set Context Option
"RTN","XUSBSE1",93,0)
 . S:(XUIEN>0) ^XTMP("XUSBSE1",TOKEN)=$$NOW^XLFDT()_"^"_$G(XUCONTXT)_"^"_XUDEMOG ; Reset cache to keep authentication alive
"RTN","XUSBSE1",94,0)
 I (XUIEN>0)&(XUCONTXT>0) Q XUIEN  ; p638 Use cached authentication
"RTN","XUSBSE1",95,0)
 ;
"RTN","XUSBSE1",96,0)
 S XCNT=0 F  S XCNT=$O(^XWB(8994.5,ENTRY,1,XCNT)) Q:XCNT'>0  S XVAL=^(XCNT,0) D  Q:XUDEMOG'=""
"RTN","XUSBSE1",97,0)
 . ; CODE TO HANDLE CONNECTION TYPE AND CONNECTIONS
"RTN","XUSBSE1",98,0)
 . I $P(XVAL,U)="S" S XUDEMOG=$$HOME(TOKEN,XVAL,STR) Q  ; Station-number authentication
"RTN","XUSBSE1",99,0)
 . I $P(XVAL,U)="R" S XUDEMOG=$$XWB($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) Q  ; RPC-Broker authentication
"RTN","XUSBSE1",100,0)
 . I $P(XVAL,U)="H" S XUDEMOG=$$POST1^XUSBSE2(.ARRAY,$P(XVAL,U,3),$P(XVAL,U,2),$P(XVAL,U,4),"xVAL="_TOKEN) Q  ; HTTP authentication
"RTN","XUSBSE1",101,0)
 . I $P(XVAL,U)="M" S XUDEMOG=$$M2M($P(XVAL,U,3),$P(XVAL,U,2),TOKEN) D CLOSE^XWBM2MC() Q  ; M2M-Broker authentication
"RTN","XUSBSE1",102,0)
 . Q
"RTN","XUSBSE1",103,0)
 ; if invalid set XWBSEC so an error is reported in the GUI application
"RTN","XUSBSE1",104,0)
 I +XUDEMOG=-1 S XWBSEC="BSE ERROR - "_$P(XUDEMOG,"^",2)
"RTN","XUSBSE1",105,0)
 I $L(XUDEMOG,"^")>2 D
"RTN","XUSBSE1",106,0)
 . S XUCONTXT=$P($G(^XWB(8994.5,ENTRY,0)),U,2)
"RTN","XUSBSE1",107,0)
 . S XUIEN=$$SETUP(XUDEMOG,XUCONTXT)
"RTN","XUSBSE1",108,0)
 S:(XUIEN>0) ^XTMP("XUSBSE1",TOKEN)=$$NOW^XLFDT()_"^"_$G(XUCONTXT)_"^"_XUDEMOG ; p638 Cache user authentication
"RTN","XUSBSE1",109,0)
 Q $S(XUIEN'>0:0,1:XUIEN)
"RTN","XUSBSE1",110,0)
 ;
"RTN","XUSBSE1",111,0)
XWB(SERVER,PORT,TOKEN) ; Special Broker service
"RTN","XUSBSE1",112,0)
 N DEMOSTR,IO,XWBTDEV,XWBRBUF
"RTN","XUSBSE1",113,0)
 Q $$CALLBSE^XWBTCPM2(SERVER,PORT,TOKEN)
"RTN","XUSBSE1",114,0)
 ;
"RTN","XUSBSE1",115,0)
M2M(SERVER,PORT,TOKEN) ; M2M Broker
"RTN","XUSBSE1",116,0)
 N DEMOGSTR,XWBCRLFL,RETRNVAL,XUSBSARR
"RTN","XUSBSE1",117,0)
 S DEMOGSTR=""
"RTN","XUSBSE1",118,0)
 N XWBSTAT,XWBPARMS,XWBTDEV,XWBNULL
"RTN","XUSBSE1",119,0)
 S XWBPARMS("ADDRESS")=SERVER,XWBPARMS("PORT")=PORT
"RTN","XUSBSE1",120,0)
 S XWBPARMS("RETRIES")=3 ;Retries 3 times to open
"RTN","XUSBSE1",121,0)
 ;
"RTN","XUSBSE1",122,0)
 I '$$OPEN^XWBRL(.XWBPARMS) Q "NO OPEN"
"RTN","XUSBSE1",123,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",124,0)
 D CLEARP^XWBM2MEZ
"RTN","XUSBSE1",125,0)
 D SETPARAM^XWBM2MEZ(1,"STRING",TOKEN)
"RTN","XUSBSE1",126,0)
 S XWBPARMS("URI")="XUS GET VISITOR"
"RTN","XUSBSE1",127,0)
 S XWBPARMS("RESULTS")=$NA(^TMP("XUSBSE1",$J))
"RTN","XUSBSE1",128,0)
 S XWBCRLFL=0
"RTN","XUSBSE1",129,0)
 D REQUEST^XWBRPCC(.XWBPARMS)
"RTN","XUSBSE1",130,0)
 I XWBCRLFL S RETRNVAL="XWBCRLFL IS TRUE" G M2MEXIT
"RTN","XUSBSE1",131,0)
 ;
"RTN","XUSBSE1",132,0)
 I '$$EXECUTE^XWBVLC(.XWBPARMS) S RETRNVAL="FAILURE ON EXECUTE" G M2MEXIT ;Run RPC and place raw XML results in ^TMP("XWBM2MVLC"
"RTN","XUSBSE1",133,0)
 D PARSE^XWBRPC(.XWBPARMS,"XUSBSARR") ;Parse out raw XML and place results in ^TMP("XWBM2MRPC"
"RTN","XUSBSE1",134,0)
 S RETRNVAL=$G(XUSBSARR(1))
"RTN","XUSBSE1",135,0)
M2MEXIT ;
"RTN","XUSBSE1",136,0)
 D CLOSE^XWBM2MEZ
"RTN","XUSBSE1",137,0)
 Q RETRNVAL
"RTN","XUSBSE1",138,0)
 ;
"RTN","XUSBSE1",139,0)
HOME(TOKEN,RAD,BSE) ; Call home station for token.
"RTN","XUSBSE1",140,0)
 ;   input TOKEN  - token to identify user to authenticating server
"RTN","XUSBSE1",141,0)
 ;   input RAD    - Zero node of application data from REMOTE APPLICATION file (#8994.5)
"RTN","XUSBSE1",142,0)
 ;   input BSE    - Station #^TCP/IP port
"RTN","XUSBSE1",143,0)
 ; returns        - string of demographic characteristics or "-1^error message"
"RTN","XUSBSE1",144,0)
 N X,XUESSO,PORT,STN,IP,STNIEN,STNPRNT
"RTN","XUSBSE1",145,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("ENTERED HOME BSE: "_BSE) ; DEBUG
"RTN","XUSBSE1",146,0)
 Q:$P(RAD,U,2)'=-1 "" ;Not setup right
"RTN","XUSBSE1",147,0)
 ;Set Station #, port from passed in data
"RTN","XUSBSE1",148,0)
 S STN=$P(BSE,U),PORT=$P(BSE,U,2),XUESSO=""
"RTN","XUSBSE1",149,0)
 ; Check if STN is a valid station number in the INSTITUTION file (security check)
"RTN","XUSBSE1",150,0)
 S STNIEN=$$LKUP^XUAF4(STN) I STNIEN=0 S XUESSO="-1^"_STN_" WAS NOT FOUND IN FILE 4" Q XUESSO
"RTN","XUSBSE1",151,0)
 ; Check if STN is an active facility (security check)
"RTN","XUSBSE1",152,0)
 I '$$ACTIVE^XUAF4(STNIEN) S XUESSO="-1^"_STN_" IS NOT AN ACTIVE VA FACILITY" Q XUESSO
"RTN","XUSBSE1",153,0)
 S IP=""
"RTN","XUSBSE1",154,0)
 ; Look for a valid cached DNS address (less than 1800 seconds old)
"RTN","XUSBSE1",155,0)
 S STNPRNT=$P($$PRNT^XUAF4(STN),U,2) S:'+$G(STNPRNT) STNPRNT=STN ; Convert subdivision to parent station
"RTN","XUSBSE1",156,0)
 S XUCACHE=$G(^XTMP("XUSBSE1",STNPRNT))
"RTN","XUSBSE1",157,0)
 I '$L(IP) S IP=$$IPFLOC(STNPRNT) ; Get the IP address from  HL LOGICAL LINK file (#870)
"RTN","XUSBSE1",158,0)
 I '$L(IP) S IP=$$SITESVC(STNPRNT) ; Get the IP address from VASITESERVICE
"RTN","XUSBSE1",159,0)
 I '$L(IP) S XUESSO="-1^ADDRESS FOR STN "_STN_" NOT FOUND"
"RTN","XUSBSE1",160,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("HOME BSE IP: "_IP_" PORT:"_PORT)
"RTN","XUSBSE1",161,0)
 I $L(IP) S XUESSO=$$CALLBSE^XWBTCPM2(IP,PORT,TOKEN,STN)
"RTN","XUSBSE1",162,0)
 D:$G(XWBDEBUG) LOG^XWBDLOG("LEAVING HOME XUESSO: "_XUESSO)
"RTN","XUSBSE1",163,0)
 I XUESSO="Didn't open connection." S XUESSO="-1^COULD NOT CONNECT TO STN "_STN_" USING PORT "_PORT
"RTN","XUSBSE1",164,0)
 I XUESSO="No Response" S XUESSO="-1^BSE TOKEN EXPIRED"
"RTN","XUSBSE1",165,0)
 Q XUESSO
"RTN","XUSBSE1",166,0)
 ;
"RTN","XUSBSE1",167,0)
IPFLOC(STN) ;Get the address from the station number from HL LOGICAL LINK file (#870)
"RTN","XUSBSE1",168,0)
 ;   input    STN - station number
"RTN","XUSBSE1",169,0)
 ;   returns      - IP address or null
"RTN","XUSBSE1",170,0)
 N XUSBSE,I,RET,ADD,IP,STNPRNT
"RTN","XUSBSE1",171,0)
 S STNPRNT=$P($$PRNT^XUAF4(STN),U,2) S:'+$G(STNPRNT) STNPRNT=STN ; Convert subdivision to parent station
"RTN","XUSBSE1",172,0)
 ; Look for station number in HL LOGICAL LINK file (#870)
"RTN","XUSBSE1",173,0)
 D FIND^DIC(870,,".03;.08","X",STNPRNT,,"C",,,"XUSBSE") ; ICR# 5449 "C" index lookup
"RTN","XUSBSE1",174,0)
 Q:+$G(XUSBSE("DILIST",0))=0 ""
"RTN","XUSBSE1",175,0)
 S I=0,ADD="",IP=""
"RTN","XUSBSE1",176,0)
 F  S I=$O(XUSBSE("DILIST","ID",I)) Q:'I  D  Q:IP
"RTN","XUSBSE1",177,0)
 . ;HL LOGICAL LINK file (#870) DNS DOMAIN field (#.08)
"RTN","XUSBSE1",178,0)
 . S ADD=XUSBSE("DILIST","ID",I,.08) I $L(ADD) D  Q:IP'=""
"RTN","XUSBSE1",179,0)
 . . I $$VALIDATE^XLFIPV(ADD) S IP=ADD Q  ;ICR #5844
"RTN","XUSBSE1",180,0)
 . . S IP=$$ADDRESS^XLFNSLK(ADD) S:IP="" IP=$$ADDRESS^XLFNSLK(ADD,"A") ; Make 2 attempts to get IP, force IPv4 on second attempt
"RTN","XUSBSE1",181,0)
 . . Q
"RTN","XUSBSE1",182,0)
 . ;HL LOGICAL LINK file (#870) MAILMAIN DOMAIN field (#.03)
"RTN","XUSBSE1",183,0)
 . S ADD=XUSBSE("DILIST","ID",I,.03) I $L(ADD) D  Q:IP'=""
"RTN","XUSBSE1",184,0)
 . . I $$VALIDATE^XLFIPV(ADD) S IP=ADD Q  ;ICR #5844
"RTN","XUSBSE1",185,0)
 . . S IP=$$ADDRESS^XLFNSLK("VISTA."_ADD) S:IP="" IP=$$ADDRESS^XLFNSLK("VISTA."_ADD,"A") ; Make 2 attempts to get IP, force IPv4 on second attempt
"RTN","XUSBSE1",186,0)
 . . Q
"RTN","XUSBSE1",187,0)
 I $L(IP) S ^XTMP("XUSBSE1",STNPRNT)=IP_"^"_$H ; Cache the IP address
"RTN","XUSBSE1",188,0)
 Q IP
"RTN","XUSBSE1",189,0)
 ;
"RTN","XUSBSE1",190,0)
SITESVC(STN) ;Get IP from the stn# from VISTASITESERVICE
"RTN","XUSBSE1",191,0)
 ;   input   STN - station number
"RTN","XUSBSE1",192,0)
 ;   returns     - IP address or null
"RTN","XUSBSE1",193,0)
 N DNSADD,IP,STNPRNT
"RTN","XUSBSE1",194,0)
 S IP=""
"RTN","XUSBSE1",195,0)
 S STNPRNT=$P($$PRNT^XUAF4(STN),U,2) S:'+$G(STNPRNT) STNPRNT=STN ; Convert subdivision to parent station
"RTN","XUSBSE1",196,0)
 S DNSADD=$$WEBADDRS(STNPRNT)
"RTN","XUSBSE1",197,0)
 I $L(DNSADD) S IP=$$ADDRESS^XLFNSLK(DNSADD) S:IP="" IP=$$ADDRESS^XLFNSLK(DNSADD,"A") ; Make 2 attempts to get IP, force IPv4 on second attempt
"RTN","XUSBSE1",198,0)
 I $L(IP) S ^XTMP("XUSBSE1",STNPRNT)=IP_"^"_$H ; Cache the IP address
"RTN","XUSBSE1",199,0)
 Q IP
"RTN","XUSBSE1",200,0)
 ;
"RTN","XUSBSE1",201,0)
WEBADDRS(STNNUM) ;
"RTN","XUSBSE1",202,0)
 N IP,URL,XUSBSE,RESULTS,I,X,POP
"RTN","XUSBSE1",203,0)
 D FIND^DIC(2005.2,,"1","MO","VISTASITESERVICE",,,,,"XUSBSE")
"RTN","XUSBSE1",204,0)
 S URL=$G(XUSBSE("DILIST","ID",1,1))
"RTN","XUSBSE1",205,0)
 D EN1^XUSBSE2(URL_"/getSite?siteID="_STNNUM,.RESULTS)
"RTN","XUSBSE1",206,0)
 S X="" F I=1:1 Q:'$D(RESULTS(I))  I RESULTS(I)["hostname>" S X=$P($P(RESULTS(I),"<hostname>",2),"</hostname>") Q
"RTN","XUSBSE1",207,0)
 Q X
"RTN","XUSBSE1",208,0)
 ;
"RTN","XUSBSE1",209,0)
SETUP(XUDEMOG,XUCONTXT) ; Setup user as visitor, add context option
"RTN","XUSBSE1",210,0)
 ;   input XUDEMOG  - string of demographic characteristics
"RTN","XUSBSE1",211,0)
 ;   input XUCONTXT - context option to be given to user
"RTN","XUSBSE1",212,0)
 ; return value = internal entry number for user, or 0
"RTN","XUSBSE1",213,0)
 I '$$PUT^XUESSO1(XUDEMOG) Q 0
"RTN","XUSBSE1",214,0)
 I $G(DUZ)'>0 Q 0
"RTN","XUSBSE1",215,0)
 D SETCNTXT(XUCONTXT)
"RTN","XUSBSE1",216,0)
 Q DUZ
"RTN","XUSBSE1",217,0)
 ;
"RTN","XUSBSE1",218,0)
SETCNTXT(XOPT) ;
"RTN","XUSBSE1",219,0)
 N OPT,XUCONTXT,X
"RTN","XUSBSE1",220,0)
 S XUCONTXT="`"_XOPT
"RTN","XUSBSE1",221,0)
 I $$FIND1^DIC(19,"","X",XUCONTXT)'>0 S X=$$LOGERR("BSE LOGIN ERROR - CONTEXT") Q  ;Context option not in option file
"RTN","XUSBSE1",222,0)
 I $G(DUZ("LOA"))=1 H $R(5)
"RTN","XUSBSE1",223,0)
 ;Have to use $D because of screen in 200.03 keeps FIND1^DIC from working.
"RTN","XUSBSE1",224,0)
 I '$D(^VA(200,DUZ,203,"B",XOPT)) D
"RTN","XUSBSE1",225,0)
 . ; Have to give the user a delegated option
"RTN","XUSBSE1",226,0)
 . N XARR S XARR(200.19,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",227,0)
 . D UPDATE^DIE("E","XARR")
"RTN","XUSBSE1",228,0)
 . ; And now she can give himself the context option
"RTN","XUSBSE1",229,0)
 . K XARR S XARR(200.03,"+1,"_DUZ_",",.01)=XUCONTXT
"RTN","XUSBSE1",230,0)
 . D UPDATE^DIE("E","XARR") ; Give context option as a secondary menu item
"RTN","XUSBSE1",231,0)
 . S ^XUTL("XQ",$J,"DUZ(BSE)")=XUCONTXT
"RTN","XUSBSE1",232,0)
 . ; But now we have to remove the delegated option
"RTN","XUSBSE1",233,0)
 . S OPT=$$FIND1^DIC(200.19,","_DUZ_",","X",XUCONTXT)
"RTN","XUSBSE1",234,0)
 . I OPT>0 D
"RTN","XUSBSE1",235,0)
 . . K XARR S XARR(200.19,(OPT_","_DUZ_","),.01)="@"
"RTN","XUSBSE1",236,0)
 . . D FILE^DIE("E","XARR")
"RTN","XUSBSE1",237,0)
 . . Q
"RTN","XUSBSE1",238,0)
 . Q
"RTN","XUSBSE1",239,0)
 Q
"RTN","XUSBSE1",240,0)
 ;
"RTN","XUSBSE1",241,0)
STNTEST ; tests station#-to-IP conversion (IPFLOC,WEBADDRS) used by HOME station#-based callback
"RTN","XUSBSE1",242,0)
 N XUSLSTI,XUSLSTV,XUSSTN,XUSIP1,XUSIP2,XUSBSE
"RTN","XUSBSE1",243,0)
 W !,"Broker Security Enhancement (BSE) Station Number-to-IP conversion test (for BSE"
"RTN","XUSBSE1",244,0)
 W !,"callbacks to home system). Note: It is not necessarily wrong if results differ"
"RTN","XUSBSE1",245,0)
 W !,"or are blank. 2 methods' results are listed: HL LOGICAL LINK/VISTASITESERVICE"
"RTN","XUSBSE1",246,0)
 ;
"RTN","XUSBSE1",247,0)
 D FIND^DIC(2005.2,,"1","MO","VISTASITESERVICE",,,,,"XUSBSE")
"RTN","XUSBSE1",248,0)
 W !!," local VISTASITESERVICE server:",!," ",$G(XUSBSE("DILIST","ID",1,1)),"",!
"RTN","XUSBSE1",249,0)
 K ^TMP($J,"XUSBSE1")
"RTN","XUSBSE1",250,0)
 DO LIST^DIC(4,,"@;.01;11;99;101","IP",,,,"D",,,$NA(^TMP($J,"XUSBSE1")))
"RTN","XUSBSE1",251,0)
 S XUSLSTI=0 F  S XUSLSTI=$O(^TMP($J,"XUSBSE1","DILIST",XUSLSTI)) Q:'+XUSLSTI  D
"RTN","XUSBSE1",252,0)
 . S XUSLSTV=^TMP($J,"XUSBSE1","DILIST",XUSLSTI,0)
"RTN","XUSBSE1",253,0)
 . Q:+$P(XUSLSTV,U,5)
"RTN","XUSBSE1",254,0)
 . S XUSSTN=$P(XUSLSTV,U,4) Q:'$$TF^XUAF4(XUSSTN)
"RTN","XUSBSE1",255,0)
 . S XUSIP1=$$IPFLOC(XUSSTN),XUSIP2=$$SITESVC(XUSSTN)
"RTN","XUSBSE1",256,0)
 . I $L(XUSIP1)!$L(XUSIP2) D
"RTN","XUSBSE1",257,0)
 . . W !,XUSSTN,?8,"(",$P(XUSLSTV,U,2),"): " W $S($L(XUSIP1):XUSIP1,1:"blank"),"/",$S($L(XUSIP2):XUSIP2,1:"blank")
"RTN","XUSBSE1",258,0)
 . . I $L(XUSIP1),$L(XUSIP2),(XUSIP1'=XUSIP2) W " ***DIFFERENT***"
"RTN","XUSBSE1",259,0)
 K ^TMP($J,"XUSBSE1")
"RTN","XUSBSE1",260,0)
 Q
"RTN","XUSBSE1",261,0)
LOGERR(XUSETXT) ; log an error in error trap for failed login attempts ; p595
"RTN","XUSBSE1",262,0)
 ; XUSETXT is the error subject line $ZE
"RTN","XUSBSE1",263,0)
 ; The function returns 0 if the error was screened, and 1 if an error was trapped
"RTN","XUSBSE1",264,0)
 N XUSAPP
"RTN","XUSBSE1",265,0)
 ; ZEXCEPT: XWBSEC,XUDEMOG - Kernel global variables
"RTN","XUSBSE1",266,0)
 S XUSAPP=$P($G(DUZ("REMAPP")),U,2)
"RTN","XUSBSE1",267,0)
 I $P($G(XUDEMOG),U,2)="BSE TOKEN EXPIRED" Q 0  ; screen out "TOKEN EXPIRED" errors
"RTN","XUSBSE1",268,0)
 I $G(XWBSEC)="BSE ERROR - BSE TOKEN EXPIRED" Q 0  ; screen out "TOKEN EXPIRED" errors
"RTN","XUSBSE1",269,0)
 I XUSAPP'="" S XUSETXT=XUSETXT_" ("_XUSAPP_")"
"RTN","XUSBSE1",270,0)
 D APPERROR^%ZTER($E(XUSETXT,1,32))
"RTN","XUSBSE1",271,0)
 Q 1
"RTN","XUSBSE1",272,0)
BSETOKEN(RET,XPHRASE) ; RPC. XUS BSE TOKEN - IA #6695
"RTN","XUSBSE1",273,0)
 ;Returns a string that can be passed as the XUBUSRNM parameter to the
"RTN","XUSBSE1",274,0)
 ;XUS SIGNON SETUP rpc to authenticate a user on a remote system. The input
"RTN","XUSBSE1",275,0)
 ;is an application identifier (pass phrase) that, when hashed,
"RTN","XUSBSE1",276,0)
 ;matches the stored hash of an authorized application in the REMOTE
"RTN","XUSBSE1",277,0)
 ;APPLICATION file (#8994.5) APPLICATIONCODE field (#.03)
"RTN","XUSBSE1",278,0)
 ; - Input - Application pass phrase
"RTN","XUSBSE1",279,0)
 N XAPP,XPORT,XSTA,XSTATION,XSTRING,XTOKEN
"RTN","XUSBSE1",280,0)
 S XAPP=$G(XPHRASE)
"RTN","XUSBSE1",281,0)
 I XAPP="" S RET="-1^NOT AUTHENTICATED" Q  ;Application must be authenticated
"RTN","XUSBSE1",282,0)
 S XAPP=$$GETCNTXT^XUESSO2(XPHRASE)
"RTN","XUSBSE1",283,0)
 I +XAPP=-1 S RET="-1^NOT AUTHENTICATED" Q  ;Application must be authenticated
"RTN","XUSBSE1",284,0)
 S XAPP=XPHRASE
"RTN","XUSBSE1",285,0)
 D SETVISIT(.XTOKEN)
"RTN","XUSBSE1",286,0)
 I +$G(XTOKEN)=-1 S RET="-1^NOT AUTHENTICATED" Q  ;User must be authenticated
"RTN","XUSBSE1",287,0)
 I $G(DUZ(2))="" S RET="-1^HOME STATION NOT IDENTIFIED" Q  ;User must be authenticated on valid home station
"RTN","XUSBSE1",288,0)
 S XSTA=$$NS^XUAF4(DUZ(2))
"RTN","XUSBSE1",289,0)
 S XSTATION=$P(XSTA,U,2)
"RTN","XUSBSE1",290,0)
 I XSTA="" S RET="-1^HOME STATION NOT IDENTIFIED" Q  ;User must be authenticated on valid home station
"RTN","XUSBSE1",291,0)
 S XPORT=$G(^XTMP("XUSBSE1","RPCBrokerPort"))
"RTN","XUSBSE1",292,0)
 I XPORT="" D
"RTN","XUSBSE1",293,0)
 . ; Do a VistA Exchange Site Service lookup for current station (once daily)
"RTN","XUSBSE1",294,0)
 . N IP,URL,XUSBSE,RESULTS,I,X,POP
"RTN","XUSBSE1",295,0)
 . D FIND^DIC(2005.2,,"1","MO","VISTASITESERVICE",,,,,"XUSBSE")
"RTN","XUSBSE1",296,0)
 . S URL=$G(XUSBSE("DILIST","ID",1,1))
"RTN","XUSBSE1",297,0)
 . D EN1^XUSBSE2(URL_"/getSite?siteID="_XSTATION,.RESULTS)
"RTN","XUSBSE1",298,0)
 . S X="" F I=1:1 Q:'$D(RESULTS(I))  I RESULTS(I)["port>" S X=$P($P(RESULTS(I),"<port>",2),"</port>") Q
"RTN","XUSBSE1",299,0)
 . S XPORT=X
"RTN","XUSBSE1",300,0)
 . I XPORT'="" S ^XTMP("XUSBSE1","RPCBrokerPort")=X
"RTN","XUSBSE1",301,0)
 I XPORT="" S RET="-1^RPC BROKER PORT NOT AVAILABLE" Q  ;Could not obtain port from VistA Exchange Site Service lookup
"RTN","XUSBSE1",302,0)
 S XSTRING=XAPP_"^"_XTOKEN_"^"_XSTATION_"^"_XPORT
"RTN","XUSBSE1",303,0)
 S RET="-35^"_$$ENCRYP^XUSRB1(XSTRING)
"RTN","XUSBSE1",304,0)
 Q
"RTN","XUSBSE1",305,0)
 ;
"VER")
8.0^22.2
"BLD",1586,6)
^537
**END**
**END**

