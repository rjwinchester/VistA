Released PRS*4*150 SEQ #139
Extracted from mail message
**KIDS**:PRS*4.0*150^

**INSTALL NAME**
PRS*4.0*150
"BLD",10616,0)
PRS*4.0*150^PAID^0^3170717^y
"BLD",10616,1,0)
^^11^11^3170717^^
"BLD",10616,1,1,0)
This patch will address three issues:
"BLD",10616,1,2,0)
 
"BLD",10616,1,3,0)
1. A subscript error occurs in the Memoranda Report [PRSP PS MR] 
"BLD",10616,1,4,0)
   option after a site converts to the Veterans Affairs Time and 
"BLD",10616,1,5,0)
   Attendance System (VATAS).
"BLD",10616,1,6,0)
 
"BLD",10616,1,7,0)
2. The Memoranda Report [PRSP PS MR] option does not display 
"BLD",10616,1,8,0)
   2018 pay periods.
"BLD",10616,1,9,0)
 
"BLD",10616,1,10,0)
3. The Monthly Calendar [PRS MONTH CALENDAR] is only coded to
"BLD",10616,1,11,0)
   calculate pay periods through 2017, and holidays through 2018.
"BLD",10616,4,0)
^9.64PA^^
"BLD",10616,6.3)
1
"BLD",10616,"INID")
^n
"BLD",10616,"INIT")
START^PRS4P150
"BLD",10616,"KRN",0)
^9.67PA^779.2^20
"BLD",10616,"KRN",.4,0)
.4
"BLD",10616,"KRN",.401,0)
.401
"BLD",10616,"KRN",.402,0)
.402
"BLD",10616,"KRN",.403,0)
.403
"BLD",10616,"KRN",.5,0)
.5
"BLD",10616,"KRN",.84,0)
.84
"BLD",10616,"KRN",3.6,0)
3.6
"BLD",10616,"KRN",3.8,0)
3.8
"BLD",10616,"KRN",9.2,0)
9.2
"BLD",10616,"KRN",9.8,0)
9.8
"BLD",10616,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",10616,"KRN",9.8,"NM",1,0)
PRSPUT3^^0^B61563877
"BLD",10616,"KRN",9.8,"NM",2,0)
PRSAPPU^^0^B38436229
"BLD",10616,"KRN",9.8,"NM",3,0)
PRSLIB01^^0^B52487407
"BLD",10616,"KRN",9.8,"NM",4,0)
PRS4P150^^0^B13117283
"BLD",10616,"KRN",9.8,"NM","B","PRS4P150",4)

"BLD",10616,"KRN",9.8,"NM","B","PRSAPPU",2)

"BLD",10616,"KRN",9.8,"NM","B","PRSLIB01",3)

"BLD",10616,"KRN",9.8,"NM","B","PRSPUT3",1)

"BLD",10616,"KRN",19,0)
19
"BLD",10616,"KRN",19.1,0)
19.1
"BLD",10616,"KRN",101,0)
101
"BLD",10616,"KRN",409.61,0)
409.61
"BLD",10616,"KRN",771,0)
771
"BLD",10616,"KRN",779.2,0)
779.2
"BLD",10616,"KRN",870,0)
870
"BLD",10616,"KRN",8989.51,0)
8989.51
"BLD",10616,"KRN",8989.52,0)
8989.52
"BLD",10616,"KRN",8994,0)
8994
"BLD",10616,"KRN","B",.4,.4)

"BLD",10616,"KRN","B",.401,.401)

"BLD",10616,"KRN","B",.402,.402)

"BLD",10616,"KRN","B",.403,.403)

"BLD",10616,"KRN","B",.5,.5)

"BLD",10616,"KRN","B",.84,.84)

"BLD",10616,"KRN","B",3.6,3.6)

"BLD",10616,"KRN","B",3.8,3.8)

"BLD",10616,"KRN","B",9.2,9.2)

"BLD",10616,"KRN","B",9.8,9.8)

"BLD",10616,"KRN","B",19,19)

"BLD",10616,"KRN","B",19.1,19.1)

"BLD",10616,"KRN","B",101,101)

"BLD",10616,"KRN","B",409.61,409.61)

"BLD",10616,"KRN","B",771,771)

"BLD",10616,"KRN","B",779.2,779.2)

"BLD",10616,"KRN","B",870,870)

"BLD",10616,"KRN","B",8989.51,8989.51)

"BLD",10616,"KRN","B",8989.52,8989.52)

"BLD",10616,"KRN","B",8994,8994)

"BLD",10616,"QDEF")
^^^^^^^^^^YES
"BLD",10616,"QUES",0)
^9.62^^
"BLD",10616,"REQB",0)
^9.611^3^3
"BLD",10616,"REQB",1,0)
PRS*4.0*112^2
"BLD",10616,"REQB",2,0)
PRS*4.0*136^2
"BLD",10616,"REQB",3,0)
PRS*4.0*137^2
"BLD",10616,"REQB","B","PRS*4.0*112",1)

"BLD",10616,"REQB","B","PRS*4.0*136",2)

"BLD",10616,"REQB","B","PRS*4.0*137",3)

"INIT")
START^PRS4P150
"MBREQ")
0
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
150^3170717
"PKG",408,22,1,"PAH",1,1,0)
^^11^11^3170717
"PKG",408,22,1,"PAH",1,1,1,0)
This patch will address three issues:
"PKG",408,22,1,"PAH",1,1,2,0)
 
"PKG",408,22,1,"PAH",1,1,3,0)
1. A subscript error occurs in the Memoranda Report [PRSP PS MR] 
"PKG",408,22,1,"PAH",1,1,4,0)
   option after a site converts to the Veterans Affairs Time and 
"PKG",408,22,1,"PAH",1,1,5,0)
   Attendance System (VATAS).
"PKG",408,22,1,"PAH",1,1,6,0)
 
"PKG",408,22,1,"PAH",1,1,7,0)
2. The Memoranda Report [PRSP PS MR] option does not display 
"PKG",408,22,1,"PAH",1,1,8,0)
   2018 pay periods.
"PKG",408,22,1,"PAH",1,1,9,0)
 
"PKG",408,22,1,"PAH",1,1,10,0)
3. The Monthly Calendar [PRS MONTH CALENDAR] is only coded to
"PKG",408,22,1,"PAH",1,1,11,0)
   calculate pay periods through 2017, and holidays through 2018.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","PRS4P150")
0^4^B13117283^n/a
"RTN","PRS4P150",1,0)
PRS4P150 ;ALB/DBE - CORRECT ESR PAY PERIODS ;07/13/2017
"RTN","PRS4P150",2,0)
 ;;4.0;PAID;**150**;Sep 21, 1995;Build 1
"RTN","PRS4P150",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","PRS4P150",4,0)
 ;
"RTN","PRS4P150",5,0)
 Q
"RTN","PRS4P150",6,0)
 ;
"RTN","PRS4P150",7,0)
 ; This routine will correct PT Physician Memorandums with incorrect 
"RTN","PRS4P150",8,0)
 ; pay period designations.
"RTN","PRS4P150",9,0)
 ;
"RTN","PRS4P150",10,0)
START ; Main Driver
"RTN","PRS4P150",11,0)
 ;
"RTN","PRS4P150",12,0)
 K ^TMP($J)
"RTN","PRS4P150",13,0)
 N DA,DR,DIE,PRSMIEN,PRSOLDPPD,PRSNEWPPD,PRSPPIEN,PRSDASH,PRSTIME,Y,PRSPTP,PRSPTPNAME,%
"RTN","PRS4P150",14,0)
 D NOW^%DTC S Y=%
"RTN","PRS4P150",15,0)
 D DD^%DT S PRSTIME=Y
"RTN","PRS4P150",16,0)
 D BMES^XPDUTL("Routine PRS4P150 beginning at "_PRSTIME_".")
"RTN","PRS4P150",17,0)
 D MEMO
"RTN","PRS4P150",18,0)
 I $D(^TMP($J)) D DISPLAY
"RTN","PRS4P150",19,0)
 D BMES^XPDUTL("Routine PRS4P150 processing complete.")
"RTN","PRS4P150",20,0)
 K DA,DR,DIE,PRSMIEN,PRSOLDPPD,PRSNEWPPD,PRSPPIEN,PRSDASH,PRSTIME,Y,PRSPTP,^TMP($J),%,PRSPTPNAME
"RTN","PRS4P150",21,0)
 Q
"RTN","PRS4P150",22,0)
 ;
"RTN","PRS4P150",23,0)
MEMO ; Loop through memos - correct bad pay period records
"RTN","PRS4P150",24,0)
 K DA,DR,DIE
"RTN","PRS4P150",25,0)
 S PRSMIEN=0,PRSOLDPPD="",PRSIEN=""
"RTN","PRS4P150",26,0)
 F  S PRSMIEN=$O(^PRST(458.7,PRSMIEN)) Q:'PRSMIEN  D
"RTN","PRS4P150",27,0)
 .I '$D(^PRST(458.7,PRSMIEN,9)) Q
"RTN","PRS4P150",28,0)
 .F  S PRSOLDPPD=$O(^PRST(458.7,PRSMIEN,9,"B",PRSOLDPPD)) Q:PRSOLDPPD=""  S PRSPPIEN="" D
"RTN","PRS4P150",29,0)
  ..I PRSOLDPPD'["17-" Q
"RTN","PRS4P150",30,0)
  ..I PRSOLDPPD']"17-26" Q
"RTN","PRS4P150",31,0)
  ..S PRSPPIEN=$O(^PRST(458.7,PRSMIEN,9,"B",PRSOLDPPD,PRSPPIEN)) Q:PRSPPIEN=""
"RTN","PRS4P150",32,0)
  ..S PRSNEWPPD="" D  Q:PRSNEWPPD=""
"RTN","PRS4P150",33,0)
   ...S PRSNEWPPD=$S(PRSOLDPPD="17-27":"18-01",PRSOLDPPD="17-28":"18-02",PRSOLDPPD="17-29":"18-03",PRSOLDPPD="17-30":"18-04",PRSOLDPPD="17-31":"18-05",PRSOLDPPD="17-32":"18-06",PRSOLDPPD="17-33":"18-07",PRSOLDPPD="17-34":"18-08",1:PRSNEWPPD)
"RTN","PRS4P150",34,0)
   ...S PRSNEWPPD=$S(PRSOLDPPD="17-35":"18-09",PRSOLDPPD="17-36":"18-10",PRSOLDPPD="17-37":"18-11",PRSOLDPPD="17-38":"18-12",PRSOLDPPD="17-39":"18-13",PRSOLDPPD="17-40":"18-14",PRSOLDPPD="17-41":"18-15",PRSOLDPPD="17-42":"18-16",1:PRSNEWPPD)
"RTN","PRS4P150",35,0)
   ...S PRSNEWPPD=$S(PRSOLDPPD="17-43":"18-17",PRSOLDPPD="17-44":"18-18",PRSOLDPPD="17-45":"18-19",PRSOLDPPD="17-46":"18-20",PRSOLDPPD="17-47":"18-21",PRSOLDPPD="17-48":"18-22",PRSOLDPPD="17-49":"18-23",PRSOLDPPD="17-50":"18-24",1:PRSNEWPPD)
"RTN","PRS4P150",36,0)
   ...S PRSNEWPPD=$S(PRSOLDPPD="17-51":"18-25",PRSOLDPPD="17-52":"18-26",1:PRSNEWPPD)
"RTN","PRS4P150",37,0)
  ..S DA=PRSPPIEN,DA(1)=PRSMIEN,DR=".01///^S X=PRSNEWPPD",DIE="^PRST(458.7,PRSMIEN,9,"
"RTN","PRS4P150",38,0)
  ..D ^DIE
"RTN","PRS4P150",39,0)
  ..K DA,DR,DIE
"RTN","PRS4P150",40,0)
  ..N PRSIEN,PRSPPI
"RTN","PRS4P150",41,0)
  ..S PRSIEN=$P(^PRST(458.7,PRSMIEN,0),"^",1),PRSPPI=$O(^PRST(458,"B",PRSNEWPPD,"")) D
"RTN","PRS4P150",42,0)
   ...Q:PRSPPI=""
"RTN","PRS4P150",43,0)
   ...I PRSNEWPPD["18-" D PTP^PRSASR1(PRSIEN,PRSPPI) ;UPDATE MEMO WITH ESR HOURS
"RTN","PRS4P150",44,0)
  ..S ^TMP($J,PRSMIEN)=$P(^PRST(458.7,PRSMIEN,0),"^",1)
"RTN","PRS4P150",45,0)
 Q
"RTN","PRS4P150",46,0)
 ;
"RTN","PRS4P150",47,0)
DISPLAY ; Display PT Physicians with corrected memorandums
"RTN","PRS4P150",48,0)
 S $P(PRSDASH,"-",53)="",PRSMIEN=""
"RTN","PRS4P150",49,0)
 D BMES^XPDUTL("Pay periods corrected for these Part-Time Physicians")
"RTN","PRS4P150",50,0)
 D MES^XPDUTL(PRSDASH)
"RTN","PRS4P150",51,0)
 ; Note naked reference to ^TMP($J) in loop body
"RTN","PRS4P150",52,0)
 F  S PRSMIEN=$O(^TMP($J,PRSMIEN)) Q:PRSMIEN=""  D
"RTN","PRS4P150",53,0)
 .S PRSPTP=^(PRSMIEN) D MES^XPDUTL($P($G(^PRSPC(PRSPTP,0)),"^",1))
"RTN","PRS4P150",54,0)
 Q
"RTN","PRS4P150",55,0)
 ;
"RTN","PRSAPPU")
0^2^B38436229^B38465710
"RTN","PRSAPPU",1,0)
PRSAPPU ; HISC/REL,WIRMFO/JAH - Calculate Pay Period; 22-JAN-1998
"RTN","PRSAPPU",2,0)
 ;;4.0;PAID;**19,22,35,136,150**;Sep 21, 1995;Build 1
"RTN","PRSAPPU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified 
"RTN","PRSAPPU",4,0)
 ;====================================================================
"RTN","PRSAPPU",5,0)
PP ;Calculate Pay Period from a FileMan date.
"RTN","PRSAPPU",6,0)
 ;
"RTN","PRSAPPU",7,0)
 ; Input :  D1 = FileMan Date
"RTN","PRSAPPU",8,0)
 ; Output : D1 - unchanged
"RTN","PRSAPPU",9,0)
 ;          PPI = internal entry of pay period if available else undef.
"RTN","PRSAPPU",10,0)
 ;          PPE = Pay period that D1 falls in, formatted yy-pp.
"RTN","PRSAPPU",11,0)
 ;          PP4Y = Pay period with 4 digit year: yyyy-pp.
"RTN","PRSAPPU",12,0)
 ;          DAY = Day # of D1 within PPE
"RTN","PRSAPPU",13,0)
 ;
"RTN","PRSAPPU",14,0)
 ;   1.  Get 1st day of leave year (X2) that the date D1 falls in.
"RTN","PRSAPPU",15,0)
 ;   2.  Reserve 2 and 4 digit year to build pay period.
"RTN","PRSAPPU",16,0)
 ;   3.  Find # of days between 1st day & D1 and divide by 14
"RTN","PRSAPPU",17,0)
 ;       to determine pay period #.  Mod to find day w/in pp.
"RTN","PRSAPPU",18,0)
 ;   4.  Build Pay period with year and pay period #.
"RTN","PRSAPPU",19,0)
 ;
"RTN","PRSAPPU",20,0)
 N Y,K,X1,X2,X
"RTN","PRSAPPU",21,0)
 ;
"RTN","PRSAPPU",22,0)
 S Y=$P($T(DAT),";;",2)
"RTN","PRSAPPU",23,0)
 F K=1:1:28 Q:D1<$P(Y,",",K)
"RTN","PRSAPPU",24,0)
 S X2=$P(Y,",",K-1)
"RTN","PRSAPPU",25,0)
 ;
"RTN","PRSAPPU",26,0)
 S PPE=$E(X2,2,3),PP4Y=$E(X2,1,3)+1700
"RTN","PRSAPPU",27,0)
 ;
"RTN","PRSAPPU",28,0)
 S X1=D1
"RTN","PRSAPPU",29,0)
 D ^%DTC
"RTN","PRSAPPU",30,0)
 S Y=X\14+1,DAY=X#14+1
"RTN","PRSAPPU",31,0)
 ;
"RTN","PRSAPPU",32,0)
 S PPE=PPE_"-"_$S(Y<10:"0"_Y,1:Y)
"RTN","PRSAPPU",33,0)
 S PPI=$O(^PRST(458,"B",PPE,0))
"RTN","PRSAPPU",34,0)
 S PP4Y=PP4Y_"-"_$P(PPE,"-",2)
"RTN","PRSAPPU",35,0)
 ;
"RTN","PRSAPPU",36,0)
 Q
"RTN","PRSAPPU",37,0)
 ;====================================================================
"RTN","PRSAPPU",38,0)
NX ; Calculate Date of 1st day of Pay Period.
"RTN","PRSAPPU",39,0)
 ;
"RTN","PRSAPPU",40,0)
 ; INPUT:   PPE = Pay Period formatted YY-PP.
"RTN","PRSAPPU",41,0)
 ; OUTPUT:  D1 = FileMan Date of 1st day of pay period.
"RTN","PRSAPPU",42,0)
 ;
"RTN","PRSAPPU",43,0)
 N Y,K,X1,X2
"RTN","PRSAPPU",44,0)
 ;
"RTN","PRSAPPU",45,0)
 S Y=$P($T(DAT),";;",2)
"RTN","PRSAPPU",46,0)
 F K=1:1:28 Q:$E($P(Y,",",K),2,3)=$E(PPE,1,2)
"RTN","PRSAPPU",47,0)
 S X1=$P(Y,",",K),X2=14*($E(PPE,4,5)-1) D C^%DTC
"RTN","PRSAPPU",48,0)
 S D1=X Q
"RTN","PRSAPPU",49,0)
 ;====================================================================
"RTN","PRSAPPU",50,0)
DTP ; Printable Date
"RTN","PRSAPPU",51,0)
 S %=X,Y=$J(+$E(X,6,7),2)_"-"_$P("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec"," ",+$E(X,4,5))_"-"_$E(X,2,3)
"RTN","PRSAPPU",52,0)
 K % Q
"RTN","PRSAPPU",53,0)
 ;====================================================================
"RTN","PRSAPPU",54,0)
 ;These FileMan dates correspond to 1st day of pay period #1
"RTN","PRSAPPU",55,0)
 ;of respective years. *150 - updated to extend to 2023
"RTN","PRSAPPU",56,0)
 ;
"RTN","PRSAPPU",57,0)
DAT ;;2960107,2970105,2980104,2990103,3000102,3010114,3020113,3030112,3040111,3050109,3060108,3070107,3080106,3090104,3100103,3110102,3120101,3130113,3140112,3150111,3160110,3170108,3180107,3190106,3200105,3210103,3220102,3230101
"RTN","PRSAPPU",58,0)
 ;
"RTN","PRSAPPU",59,0)
 ;====================================================================
"RTN","PRSAPPU",60,0)
PREP(CURP) ;given a pay period, return the previous pay period.
"RTN","PRSAPPU",61,0)
 ;  WARNING: This call only valid for years that are in the seed
"RTN","PRSAPPU",62,0)
 ;           range of the FileMan dates on the DAT^PRSAPPU line.
"RTN","PRSAPPU",63,0)
 ;           If pay period passed is out of this range then
"RTN","PRSAPPU",64,0)
 ;           0 is returned.
"RTN","PRSAPPU",65,0)
 ;
"RTN","PRSAPPU",66,0)
 ;Input:   CURP =  Pay period, passed in format YY-PP or YYYY-PP
"RTN","PRSAPPU",67,0)
 ;Output:  function returns previous pay period in YYYY-PP format.
"RTN","PRSAPPU",68,0)
 ;
"RTN","PRSAPPU",69,0)
 N PPE,PPI,D1,DAY,INYR,RANGE,FIRSTPP,INPP
"RTN","PRSAPPU",70,0)
 ;
"RTN","PRSAPPU",71,0)
 ;validate input - pay period and year
"RTN","PRSAPPU",72,0)
 ;
"RTN","PRSAPPU",73,0)
 Q:'$$VALIDPP(CURP) 0
"RTN","PRSAPPU",74,0)
 S INPP=$P(CURP,"-",2)
"RTN","PRSAPPU",75,0)
 S INYR=$P(CURP,"-")
"RTN","PRSAPPU",76,0)
 S INYR=$E(INYR,$L(INYR)-1,$L(INYR))
"RTN","PRSAPPU",77,0)
 S PPE=INYR_"-"_INPP
"RTN","PRSAPPU",78,0)
 ;
"RTN","PRSAPPU",79,0)
 ; Handle special case of 1ST PAY PERIOD iN the VALID RANGE
"RTN","PRSAPPU",80,0)
 S RANGE=$P($T(DAT),";;",2)
"RTN","PRSAPPU",81,0)
 S FIRSTPP=$E($P(RANGE,","),2,3)_"-01"
"RTN","PRSAPPU",82,0)
 Q:(PPE=FIRSTPP) $E($P(RANGE,","),1,3)+1700_"-26"
"RTN","PRSAPPU",83,0)
 ;
"RTN","PRSAPPU",84,0)
 ;Get 1st date of input pay period.
"RTN","PRSAPPU",85,0)
 ;
"RTN","PRSAPPU",86,0)
 D NX
"RTN","PRSAPPU",87,0)
 ;
"RTN","PRSAPPU",88,0)
 ;Subtract 14 days from current to get 1st day of previous pay period.
"RTN","PRSAPPU",89,0)
 S X1=D1,X2=-14 D C^%DTC S D1=X
"RTN","PRSAPPU",90,0)
 D PP
"RTN","PRSAPPU",91,0)
 Q PP4Y
"RTN","PRSAPPU",92,0)
 ;
"RTN","PRSAPPU",93,0)
 ;====================================================================
"RTN","PRSAPPU",94,0)
NXTPP(CURP) ;given a payperiod, return the NEXT payperiod. YYYY-PP
"RTN","PRSAPPU",95,0)
 ;  WARNING: This call only valid for years that are in the seed
"RTN","PRSAPPU",96,0)
 ;           range of the FileMan dates on the DAT^PRSAPPU line.
"RTN","PRSAPPU",97,0)
 ;           If pay period passed is out of this range then
"RTN","PRSAPPU",98,0)
 ;           0 is returned.
"RTN","PRSAPPU",99,0)
 ;
"RTN","PRSAPPU",100,0)
 ;Input:   CURP =  Pay period, passed in format YY-PP or YYYY-PP
"RTN","PRSAPPU",101,0)
 ;Output:  function returns previous pay period in YYYY-PP format.
"RTN","PRSAPPU",102,0)
 ;
"RTN","PRSAPPU",103,0)
 N PPE,PPI,D1,X1,X2,INPP,INYR,D1
"RTN","PRSAPPU",104,0)
 ;
"RTN","PRSAPPU",105,0)
 Q:'$$VALIDPP(CURP) 0
"RTN","PRSAPPU",106,0)
 ;
"RTN","PRSAPPU",107,0)
 ;Get 1st date of current pay period.
"RTN","PRSAPPU",108,0)
 S INPP=$P(CURP,"-",2)
"RTN","PRSAPPU",109,0)
 S INYR=$P(CURP,"-")
"RTN","PRSAPPU",110,0)
 S INYR=$E(INYR,$L(INYR)-1,$L(INYR))
"RTN","PRSAPPU",111,0)
 S PPE=INYR_"-"_INPP
"RTN","PRSAPPU",112,0)
 D NX
"RTN","PRSAPPU",113,0)
 ;
"RTN","PRSAPPU",114,0)
 ;Add 14 days to current to get 1st day of next pay period.
"RTN","PRSAPPU",115,0)
 S X1=D1,X2=14 D C^%DTC S D1=X
"RTN","PRSAPPU",116,0)
 D PP
"RTN","PRSAPPU",117,0)
 Q PP4Y
"RTN","PRSAPPU",118,0)
 ;====================================================================
"RTN","PRSAPPU",119,0)
VALIDPP(PP) ;Valid pay period must be in form YY-PP or YYYY-PP where
"RTN","PRSAPPU",120,0)
 ;        pp is pay periods 01-26 and
"RTN","PRSAPPU",121,0)
 ;        yy or yyyy are years in the FileMan dates at DAT^PRSAPPU
"RTN","PRSAPPU",122,0)
 ;
"RTN","PRSAPPU",123,0)
 N VALID,INVALID,VALYRS,RANGE,INCR,INPP,INYR,TESTYR
"RTN","PRSAPPU",124,0)
 S VALID=1,INVALID=0
"RTN","PRSAPPU",125,0)
 ;
"RTN","PRSAPPU",126,0)
 ;validate input - year and pay period
"RTN","PRSAPPU",127,0)
 ;
"RTN","PRSAPPU",128,0)
 S VALYRS=","
"RTN","PRSAPPU",129,0)
 S RANGE=$P($T(DAT),";;",2)
"RTN","PRSAPPU",130,0)
 F INCR=1:1:$L(RANGE,",") S VALYRS=VALYRS_$E($P(RANGE,",",INCR),2,3)_","
"RTN","PRSAPPU",131,0)
 S INYR=$P(PP,"-")
"RTN","PRSAPPU",132,0)
 I '(($L(INYR)=2)!($L(INYR)=4)) Q INVALID
"RTN","PRSAPPU",133,0)
 S INYR=$E(INYR,$L(INYR)-1,$L(INYR))
"RTN","PRSAPPU",134,0)
 S TESTYR=","_INYR_","
"RTN","PRSAPPU",135,0)
 I VALYRS'[TESTYR Q INVALID
"RTN","PRSAPPU",136,0)
 ;
"RTN","PRSAPPU",137,0)
 S INPP=$P(PP,"-",2)
"RTN","PRSAPPU",138,0)
 ;
"RTN","PRSAPPU",139,0)
 S VALPPS=",01,02,03,04,05,06,07,08,09,"
"RTN","PRSAPPU",140,0)
 S TESTINPP=","_INPP_","
"RTN","PRSAPPU",141,0)
 I '((VALPPS[TESTINPP)!((INPP>9)&(INPP<28))) Q INVALID
"RTN","PRSAPPU",142,0)
 ;
"RTN","PRSAPPU",143,0)
 ; pay period 27 is not always valid.
"RTN","PRSAPPU",144,0)
 ;
"RTN","PRSAPPU",145,0)
 I INPP=27 I $P($$NXTPP(INYR_"-26"),"-",2)'=27 Q INVALID
"RTN","PRSAPPU",146,0)
 Q VALID
"RTN","PRSAPPU",147,0)
 ;
"RTN","PRSAPPU",148,0)
 ;====================================================================
"RTN","PRSAPPU",149,0)
PPRANGE(STARTPP,ENDPP,STPP4Y,ENDPP4Y) ;get a pay period range from input.
"RTN","PRSAPPU",150,0)
 ;  INPUT: none
"RTN","PRSAPPU",151,0)
 ;  OUTPUT:  STARTPP = 1st pay period in range.  0 on abnormal exit.
"RTN","PRSAPPU",152,0)
 ;           ENDPP   = 2ND pay period in range.  0 on abnormal exit.
"RTN","PRSAPPU",153,0)
 ; 
"RTN","PRSAPPU",154,0)
 ; -Ask user to select beginning and ending pay periods from the 
"RTN","PRSAPPU",155,0)
 ;  pay periods that are on file.
"RTN","PRSAPPU",156,0)
 ; -Compare dates of 1st day of each of the input pay periods
"RTN","PRSAPPU",157,0)
 ;  to ensure that the beginning pay period input is LESS THAN OR = TO
"RTN","PRSAPPU",158,0)
 ;  the ending pay period input.
"RTN","PRSAPPU",159,0)
 ;
"RTN","PRSAPPU",160,0)
 N OUT,OK
"RTN","PRSAPPU",161,0)
 S (OUT,OK)=0
"RTN","PRSAPPU",162,0)
 ;
"RTN","PRSAPPU",163,0)
 F I=0:0 Q:(OK!OUT)  D
"RTN","PRSAPPU",164,0)
 .N DIC,FR,X,Y,TO,DAY,PPE,PPI,PP4Y,D1,STRTDAY1,ENDDAY1
"RTN","PRSAPPU",165,0)
 .S (STARTPP,ENDPP)=0
"RTN","PRSAPPU",166,0)
 .;
"RTN","PRSAPPU",167,0)
 .S D1=DT D PP S DIC("B")=$E($$PREP(PPE),3,7)
"RTN","PRSAPPU",168,0)
 .S DIC="^PRST(458,"
"RTN","PRSAPPU",169,0)
 .S DIC(0)="AEQZ",DIC("A")="Enter Beginning Pay Period: "
"RTN","PRSAPPU",170,0)
 .D ^DIC I $D(DTOUT)!$D(DUOUT)!(Y<0) S OUT=1
"RTN","PRSAPPU",171,0)
 .Q:OUT
"RTN","PRSAPPU",172,0)
 .S STARTPP=Y(0,0)
"RTN","PRSAPPU",173,0)
 .;
"RTN","PRSAPPU",174,0)
 .; ask user for 2nd pay period in range. Use default of
"RTN","PRSAPPU",175,0)
 .; the pay period they selected for the 1st pp.
"RTN","PRSAPPU",176,0)
 .;
"RTN","PRSAPPU",177,0)
 .S DIC("B")=STARTPP,DIC("A")="Enter Ending Pay Period: "
"RTN","PRSAPPU",178,0)
 .D ^DIC I $D(DTOUT)!$D(DUOUT) S OUT=1
"RTN","PRSAPPU",179,0)
 .Q:OUT
"RTN","PRSAPPU",180,0)
 .S ENDPP=Y(0,0)
"RTN","PRSAPPU",181,0)
 .;
"RTN","PRSAPPU",182,0)
 .;Get 1st day of selected pay periods. Compare the dates to ensure
"RTN","PRSAPPU",183,0)
 .;that a valid range has been entered.
"RTN","PRSAPPU",184,0)
 .;
"RTN","PRSAPPU",185,0)
 .S PPE=STARTPP D NX S STRTDAY1=D1
"RTN","PRSAPPU",186,0)
 .S PPE=ENDPP D NX S ENDDAY1=D1
"RTN","PRSAPPU",187,0)
 .I ENDDAY1-STRTDAY1<0 D
"RTN","PRSAPPU",188,0)
 .. W !,"Invalid pay period range."
"RTN","PRSAPPU",189,0)
 .. W !,"Ending pay period should be later than or equal to beginning pay period."
"RTN","PRSAPPU",190,0)
 .E  D
"RTN","PRSAPPU",191,0)
 ..  S D1=STRTDAY1 D PP^PRSAPPU S STPP4Y=PP4Y
"RTN","PRSAPPU",192,0)
 ..  S D1=ENDDAY1 D PP S ENDPP4Y=PP4Y
"RTN","PRSAPPU",193,0)
 ..  S OK=1
"RTN","PRSAPPU",194,0)
 I OUT S (STARTPP,ENDPP,ENDPP4Y,STPP4Y)=0
"RTN","PRSAPPU",195,0)
 ;
"RTN","PRSAPPU",196,0)
 Q
"RTN","PRSAPPU",197,0)
 ;==============================================================
"RTN","PRSAPPU",198,0)
IC(YY,FMT,FW,BDT) ;Infer Century from 2-digit year
"RTN","PRSAPPU",199,0)
 ; YY  - 2 digit year
"RTN","PRSAPPU",200,0)
 ; FMT - (optional) format of returned value (DEFAULT 3)
"RTN","PRSAPPU",201,0)
 ;       3 for YYY (fileman year .i.e. first numbers of fileman date)
"RTN","PRSAPPU",202,0)
 ;       4 for YYYY (standard year)
"RTN","PRSAPPU",203,0)
 ; FW  - (optional) # of future years from base in window (DEFAULT 20)
"RTN","PRSAPPU",204,0)
 ; BDT - (optional) base date (fileman) for sliding window (DEFAULT DT)
"RTN","PRSAPPU",205,0)
 ;
"RTN","PRSAPPU",206,0)
 N FMY
"RTN","PRSAPPU",207,0)
 I YY'?2N Q "" ; invalid 2-digit year - return null value
"RTN","PRSAPPU",208,0)
 I $G(FMT)'=3&($G(FMT)'=4) S FMT=3
"RTN","PRSAPPU",209,0)
 I $G(FW)'?1.2N S FW=20
"RTN","PRSAPPU",210,0)
 I $G(BDT)'?7N S BDT=DT
"RTN","PRSAPPU",211,0)
 I BDT'>1000000 Q "" ; invalid base date
"RTN","PRSAPPU",212,0)
 ; start with century of base date and adjust if necessary
"RTN","PRSAPPU",213,0)
 S FMY=$E(BDT)+$S($E(BDT,2,3)-YY>(99-FW):1,$E(BDT,2,3)-YY<-FW:-1,1:0)_YY
"RTN","PRSAPPU",214,0)
 Q $S(FMT=4:FMY+1700,1:FMY)
"RTN","PRSAPPU",215,0)
 ;
"RTN","PRSAPPU",216,0)
 ;PRSZ
"RTN","PRSAPPU",217,0)
 ;==============================================================
"RTN","PRSAPPU",218,0)
P35POST ;PRS*4.0*35 post install - execute set logic on new AB x-ref.
"RTN","PRSAPPU",219,0)
 ;
"RTN","PRSAPPU",220,0)
 I $$PATCH^XPDUTL("PRS*4.0*35") D MSSG(0) Q
"RTN","PRSAPPU",221,0)
 N FILE D MSSG(1) F FILE=458,459 D XREF4YR(FILE)
"RTN","PRSAPPU",222,0)
 Q
"RTN","PRSAPPU",223,0)
 ;==============================================================
"RTN","PRSAPPU",224,0)
MSSG(FLAG) ;PRS*4.0*35 - OUTPUT POST INSTALLATION MESSAGE.
"RTN","PRSAPPU",225,0)
 N MSSG
"RTN","PRSAPPU",226,0)
 I FLAG S MSSG="Updating AB cross reference in Files 458 and 459."
"RTN","PRSAPPU",227,0)
 E  S MSSG="AB X-ref NOT built. Built during earlier PRS*4.0*35 install."
"RTN","PRSAPPU",228,0)
 D MES^XPDUTL("      "_MSSG)
"RTN","PRSAPPU",229,0)
 Q
"RTN","PRSAPPU",230,0)
 ;==============================================================
"RTN","PRSAPPU",231,0)
XREF4YR(F) ;SET AB 4DIGIT YEAR XREF OF FILE 458 OR 459.
"RTN","PRSAPPU",232,0)
 ;
"RTN","PRSAPPU",233,0)
 Q:'((F=458)!(F=459))
"RTN","PRSAPPU",234,0)
 N DIK S DIK="^PRST("_F_",",DIK(1)=".01^AB" D ENALL^DIK
"RTN","PRSAPPU",235,0)
 Q
"RTN","PRSLIB01")
0^3^B52487407^B52519137
"RTN","PRSLIB01",1,0)
PRSLIB01 ;JAH/WCIOFO-PAID UTILITIES AND LIBRARY 01 ;Mar 25, 2005
"RTN","PRSLIB01",2,0)
 ;;4.0;PAID;**45,93,137,150**;Sep 21, 1995;Build 1
"RTN","PRSLIB01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","PRSLIB01",4,0)
 Q
"RTN","PRSLIB01",5,0)
MAIN ;DISPLAY MONTHLY CALENDAR FOR ANY DATE
"RTN","PRSLIB01",6,0)
 N OUT
"RTN","PRSLIB01",7,0)
 F  D CALENDAR(.OUT) Q:OUT
"RTN","PRSLIB01",8,0)
 Q
"RTN","PRSLIB01",9,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = 
"RTN","PRSLIB01",10,0)
CALENDAR(OUT) ;
"RTN","PRSLIB01",11,0)
 ;  Ask user for a date and quit if not a valid date.
"RTN","PRSLIB01",12,0)
 ;  Get # of days in the month the user has selected.
"RTN","PRSLIB01",13,0)
 ;  Get the weekday for the 1st day of the selected month.
"RTN","PRSLIB01",14,0)
 ;  If necessary get days elapsed from jan 1 to 1st day of selected mo.
"RTN","PRSLIB01",15,0)
 ;  Display the month.
"RTN","PRSLIB01",16,0)
 ;
"RTN","PRSLIB01",17,0)
 S OUT=1
"RTN","PRSLIB01",18,0)
 N ZFMDATE,%DT,DAY1,Y,MONTH,DAYS,YEAR,FIRSTDAY,LASTDAY,SHOWJULI,HIGHLITE
"RTN","PRSLIB01",19,0)
 N COUNT,HDR
"RTN","PRSLIB01",20,0)
 ;
"RTN","PRSLIB01",21,0)
 S %DT="AE" D ^%DT S ZFMDATE=Y ;          Ask date.
"RTN","PRSLIB01",22,0)
 Q:Y<1
"RTN","PRSLIB01",23,0)
 ; if picked month has today-highlight
"RTN","PRSLIB01",24,0)
 S HIGHLITE=0
"RTN","PRSLIB01",25,0)
 I $E(Y,1,5)=$E(DT,1,5) S HIGHLITE=+$E(DT,6,7)
"RTN","PRSLIB01",26,0)
 ;
"RTN","PRSLIB01",27,0)
 ; Ask if they want to see the elapsed days calendar.
"RTN","PRSLIB01",28,0)
 S SHOWJULI=$$ASKJULIA()
"RTN","PRSLIB01",29,0)
 Q:Y<0
"RTN","PRSLIB01",30,0)
 ;
"RTN","PRSLIB01",31,0)
 ;                                        Days in the month.
"RTN","PRSLIB01",32,0)
 S MONTH=$E(ZFMDATE,4,5),YEAR=$E(ZFMDATE,1,3)+1700
"RTN","PRSLIB01",33,0)
 S DAYS=$$DAYSINMO(YEAR,MONTH)
"RTN","PRSLIB01",34,0)
 ;
"RTN","PRSLIB01",35,0)
 S FIRSTDAY=$E(ZFMDATE,1,5)_"01",LASTDAY=$E(ZFMDATE,1,5)_DAYS
"RTN","PRSLIB01",36,0)
 ;
"RTN","PRSLIB01",37,0)
 ;Get the day #s of pay periods in this month
"RTN","PRSLIB01",38,0)
 N PPS
"RTN","PRSLIB01",39,0)
 I FIRSTDAY<3220000 D GETPPS(FIRSTDAY,LASTDAY)
"RTN","PRSLIB01",40,0)
 ;
"RTN","PRSLIB01",41,0)
 S DAY1=$$WEEKDAY1(ZFMDATE) ;             Weekday of the 1st.
"RTN","PRSLIB01",42,0)
 ;
"RTN","PRSLIB01",43,0)
 ;
"RTN","PRSLIB01",44,0)
 S HDR=$$GETHEAD(Y)
"RTN","PRSLIB01",45,0)
 W @IOF,!
"RTN","PRSLIB01",46,0)
 W "---------------",HDR,"------------"
"RTN","PRSLIB01",47,0)
 D DISPMO(DAY1,DAYS,HIGHLITE) ;                    Display month.
"RTN","PRSLIB01",48,0)
 I SHOWJULI D
"RTN","PRSLIB01",49,0)
 .   N JULID1
"RTN","PRSLIB01",50,0)
 .   S JULID1=$$GETJULI(FIRSTDAY,YEAR)
"RTN","PRSLIB01",51,0)
 .   W !!,"-------Elapsed Days Calendar---------"
"RTN","PRSLIB01",52,0)
 .   D DISPJULI(DAY1,DAYS,JULID1)
"RTN","PRSLIB01",53,0)
 W !,"---------------Holidays------------",!
"RTN","PRSLIB01",54,0)
 ;
"RTN","PRSLIB01",55,0)
 ;DISPLAY HOLIDAYS
"RTN","PRSLIB01",56,0)
 ;
"RTN","PRSLIB01",57,0)
 N HO,HD,PRS8D,HOLIDAY
"RTN","PRSLIB01",58,0)
 S PRS8D=$E(ZFMDATE,2,3) D EN^PRS8HD
"RTN","PRSLIB01",59,0)
 S FIRSTDAY=$E(FIRSTDAY,1,5)_"00"
"RTN","PRSLIB01",60,0)
 S HOLIDAY=FIRSTDAY
"RTN","PRSLIB01",61,0)
 S COUNT=0
"RTN","PRSLIB01",62,0)
 I FIRSTDAY<3230000 D
"RTN","PRSLIB01",63,0)
 .F  S HOLIDAY=$O(HD(HOLIDAY)) Q:HOLIDAY>LASTDAY!(HOLIDAY="")  D
"RTN","PRSLIB01",64,0)
 .. W !,?2,$P(HD(HOLIDAY),"^",2)," ",+$E(HOLIDAY,6,7),?15,$P(HD(HOLIDAY),"^")
"RTN","PRSLIB01",65,0)
 .. S COUNT=COUNT+1
"RTN","PRSLIB01",66,0)
 E  W "  Sorry, Can't find holidays past 2022." S COUNT=COUNT+1
"RTN","PRSLIB01",67,0)
 I COUNT<1 W !,"  No Holidays this month."
"RTN","PRSLIB01",68,0)
 W !,"-----------------------------------",!
"RTN","PRSLIB01",69,0)
 S OUT=0
"RTN","PRSLIB01",70,0)
 Q
"RTN","PRSLIB01",71,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",72,0)
 ;
"RTN","PRSLIB01",73,0)
SILMO(PRSDT) ;SILENT CALL TO DISPLAY MONTH
"RTN","PRSLIB01",74,0)
 ;  INPUT: PRSDT - must be fileman date
"RTN","PRSLIB01",75,0)
 ;
"RTN","PRSLIB01",76,0)
 N X,Y,%DT,DAY1,Y,MONTH,DAYS,YEAR,FIRSTDAY,LASTDAY,HIGHLITE,COUNT,HDR
"RTN","PRSLIB01",77,0)
 S X=PRSDT D ^%DT Q:Y<0
"RTN","PRSLIB01",78,0)
 ; if month has today-highlight
"RTN","PRSLIB01",79,0)
 S HIGHLITE=0
"RTN","PRSLIB01",80,0)
 I $E(Y,1,5)=$E(DT,1,5) S HIGHLITE=+$E(DT,6,7)
"RTN","PRSLIB01",81,0)
 S MONTH=$E(PRSDT,4,5),YEAR=$E(PRSDT,1,3)+1700
"RTN","PRSLIB01",82,0)
 S DAYS=$$DAYSINMO(YEAR,MONTH)
"RTN","PRSLIB01",83,0)
 S FIRSTDAY=$E(PRSDT,1,5)_"01",LASTDAY=$E(PRSDT,1,5)_DAYS
"RTN","PRSLIB01",84,0)
 ;
"RTN","PRSLIB01",85,0)
 ;Get day #s of pps in month
"RTN","PRSLIB01",86,0)
 N PPS
"RTN","PRSLIB01",87,0)
 I FIRSTDAY<3220000 D GETPPS(FIRSTDAY,LASTDAY)
"RTN","PRSLIB01",88,0)
 S DAY1=$$WEEKDAY1(PRSDT)
"RTN","PRSLIB01",89,0)
 S HDR=$$GETHEAD(Y)
"RTN","PRSLIB01",90,0)
 W @IOF,!,"---------------",HDR,"------------"
"RTN","PRSLIB01",91,0)
 D DISPMO(DAY1,DAYS,HIGHLITE)
"RTN","PRSLIB01",92,0)
 W !,"---------------Holidays------------",!
"RTN","PRSLIB01",93,0)
 ;
"RTN","PRSLIB01",94,0)
 ;holidays
"RTN","PRSLIB01",95,0)
 N HO,HD,PRS8D,HOLIDAY
"RTN","PRSLIB01",96,0)
 S PRS8D=$E(PRSDT,2,3) D EN^PRS8HD
"RTN","PRSLIB01",97,0)
 S FIRSTDAY=$E(FIRSTDAY,1,5)_"00"
"RTN","PRSLIB01",98,0)
 S HOLIDAY=FIRSTDAY
"RTN","PRSLIB01",99,0)
 S COUNT=0
"RTN","PRSLIB01",100,0)
 I FIRSTDAY<3230000 D
"RTN","PRSLIB01",101,0)
 .F  S HOLIDAY=$O(HD(HOLIDAY)) Q:HOLIDAY>LASTDAY!(HOLIDAY="")  D
"RTN","PRSLIB01",102,0)
 .. W !,?2,$P(HD(HOLIDAY),"^",2)," ",+$E(HOLIDAY,6,7),?15,$P(HD(HOLIDAY),"^")
"RTN","PRSLIB01",103,0)
 .. S COUNT=COUNT+1
"RTN","PRSLIB01",104,0)
 E  W "  Sorry, Can't find holidays past 2022." S COUNT=COUNT+1
"RTN","PRSLIB01",105,0)
 I COUNT<1 W !,"  No Holidays this month."
"RTN","PRSLIB01",106,0)
 W !,"-----------------------------------",!
"RTN","PRSLIB01",107,0)
 Q
"RTN","PRSLIB01",108,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",109,0)
 ;
"RTN","PRSLIB01",110,0)
GETPPS(FIRSTDAY,LASTDAY) ;
"RTN","PRSLIB01",111,0)
 N D1,PPE,PPDAY,PPI,PP4Y
"RTN","PRSLIB01",112,0)
 S D1=FIRSTDAY D PP^PRSAPPU
"RTN","PRSLIB01",113,0)
 D NX^PRSAPPU
"RTN","PRSLIB01",114,0)
 I D1<FIRSTDAY S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSLIB01",115,0)
 S PPDAY=+$E(D1,6,7)
"RTN","PRSLIB01",116,0)
 S PPS(PPDAY)=PPE
"RTN","PRSLIB01",117,0)
 F  D  Q:D1>LASTDAY
"RTN","PRSLIB01",118,0)
 .  S PPE=$E($$NXTPP^PRSAPPU(PPE),3,7) D NX^PRSAPPU
"RTN","PRSLIB01",119,0)
 .  Q:D1>LASTDAY
"RTN","PRSLIB01",120,0)
 .  S PPDAY=+$E(D1,6,7)
"RTN","PRSLIB01",121,0)
 .  S PPS(PPDAY)=PPE
"RTN","PRSLIB01",122,0)
 Q
"RTN","PRSLIB01",123,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",124,0)
 ;
"RTN","PRSLIB01",125,0)
GETHEAD(Y) ;
"RTN","PRSLIB01",126,0)
 N YEAR,MONTH,HDR,LENOFDT
"RTN","PRSLIB01",127,0)
 S HDR=$$FMTE^XLFDT(Y,"1D")
"RTN","PRSLIB01",128,0)
 S MONTH=$P(HDR," ")
"RTN","PRSLIB01",129,0)
 S LENOFDT=$L(HDR," ")
"RTN","PRSLIB01",130,0)
 S YEAR=$P(HDR," ",LENOFDT)
"RTN","PRSLIB01",131,0)
 Q MONTH_" "_YEAR
"RTN","PRSLIB01",132,0)
 ;
"RTN","PRSLIB01",133,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",134,0)
 ;
"RTN","PRSLIB01",135,0)
WEEKDAY1(ZDATE) ;get the weekday of the 1st day of the month
"RTN","PRSLIB01",136,0)
 ; INPUT:   ZDATE   - FileMan date, used as the month to display
"RTN","PRSLIB01",137,0)
 ; OUTPUT:  return - Integer corresponding to day of week 
"RTN","PRSLIB01",138,0)
 ;                   (i.e. Sunday[1], Monday[2]) for the 1st day of
"RTN","PRSLIB01",139,0)
 ;                   the month
"RTN","PRSLIB01",140,0)
 S ZDATE=$E(ZDATE,1,5)_"01"
"RTN","PRSLIB01",141,0)
 Q $$DOW^XLFDT(ZDATE,1)
"RTN","PRSLIB01",142,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",143,0)
 ;
"RTN","PRSLIB01",144,0)
DISPMO(DAYNO,NODAYS,HL) ;DISPLAY ENTIRE MONTH
"RTN","PRSLIB01",145,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",146,0)
 ;                                 beginning on Wednesday.
"RTN","PRSLIB01",147,0)
 ;
"RTN","PRSLIB01",148,0)
 ;Set up reverse video ON & OFF for today highlight
"RTN","PRSLIB01",149,0)
 I $G(HL)>0 N IORVOFF,IORVON S X="IORVOFF;IORVON" D ENDR^%ZISS
"RTN","PRSLIB01",150,0)
 ;
"RTN","PRSLIB01",151,0)
 N DAYS,DAYPOS,I,PPOFFSET,CNTDWN,BLDTAB
"RTN","PRSLIB01",152,0)
 S PPOFFSET=6,(BLDTAB,CNTDWN)=0
"RTN","PRSLIB01",153,0)
 S DAYS="SUN MON TUE WED THU FRI SAT"
"RTN","PRSLIB01",154,0)
 W !,?PPOFFSET,"  ",DAYS,!
"RTN","PRSLIB01",155,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",156,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",157,0)
 . I DAYPOS=0 W ! I $G(PPS(I))'="" W PPS(I)
"RTN","PRSLIB01",158,0)
 . I ($G(HL)=I)!($G(CNTDWN)>0) D
"RTN","PRSLIB01",159,0)
 ..  I $G(HL)=I D
"RTN","PRSLIB01",160,0)
 ...   S BLDTAB=(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)))
"RTN","PRSLIB01",161,0)
 ...   W ?BLDTAB,IORVON,I,IORVOFF
"RTN","PRSLIB01",162,0)
 ...   S BLDTAB=($X-BLDTAB)-$L(I)
"RTN","PRSLIB01",163,0)
 ...;   S BLDTAB=($X-BLDTAB)-1
"RTN","PRSLIB01",164,0)
 ...   S CNTDWN=6-DAYPOS
"RTN","PRSLIB01",165,0)
 ..  E  D
"RTN","PRSLIB01",166,0)
 ...   W ?(BLDTAB+(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)))),I
"RTN","PRSLIB01",167,0)
 ...   S CNTDWN=CNTDWN-1
"RTN","PRSLIB01",168,0)
 . E  D
"RTN","PRSLIB01",169,0)
 ..  W ?(PPOFFSET+((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0))),I
"RTN","PRSLIB01",170,0)
 Q
"RTN","PRSLIB01",171,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",172,0)
 ;=======================
"RTN","PRSLIB01",173,0)
 ;
"RTN","PRSLIB01",174,0)
ASKJULIA() ;RETURN RESPONSE--DO YOU WANT A CALENDAR A with dates
"RTN","PRSLIB01",175,0)
 ; expressed as the number of days elapsed since January 1?
"RTN","PRSLIB01",176,0)
 N DIR,DIRUT,Y
"RTN","PRSLIB01",177,0)
 W !!
"RTN","PRSLIB01",178,0)
 S DIR("A")="Include Calendar with elapsed days since Jan 1."
"RTN","PRSLIB01",179,0)
 S DIR(0)="Y"
"RTN","PRSLIB01",180,0)
 S DIR("B")="Y"
"RTN","PRSLIB01",181,0)
 S DIR("?",1)="Hit return to display a calendar with dates expressed as"
"RTN","PRSLIB01",182,0)
 S DIR("?",2)="the number of days elapsed since January 1."
"RTN","PRSLIB01",183,0)
 S DIR("?",3)="Days are numbered sequentially from 1 to 365 or 366 in a"
"RTN","PRSLIB01",184,0)
 S DIR("?",4)="leap year.  January 1st is day number 1 and December 31st"
"RTN","PRSLIB01",185,0)
 S DIR("?",5)="is day 365 in a non leap year.  This calendar is often"
"RTN","PRSLIB01",186,0)
 S DIR("?",6)="(but incorrectly), called a Julian Calendar."
"RTN","PRSLIB01",187,0)
 S DIR("?",7)="------------------------------------------------------"
"RTN","PRSLIB01",188,0)
 S DIR("?",8)="Julian Calendar"
"RTN","PRSLIB01",189,0)
 S DIR("?",9)="==============="
"RTN","PRSLIB01",190,0)
 S DIR("?",10)="  The solar calendar introduced by Julius Caesar in Rome "
"RTN","PRSLIB01",191,0)
 S DIR("?",11)="  in 46 B.C., having a year of 12 months and 365 days and"
"RTN","PRSLIB01",192,0)
 S DIR("?",12)="  a leap year of 366 days every fourth year. It was"
"RTN","PRSLIB01",193,0)
 S DIR("?",13)="  eventually replaced by the Gregorian calendar."
"RTN","PRSLIB01",194,0)
 S DIR("?",14)="------------------------------------------------------"
"RTN","PRSLIB01",195,0)
 S DIR("?")=" Hit return to include the elapsed days calendar."
"RTN","PRSLIB01",196,0)
 D ^DIR
"RTN","PRSLIB01",197,0)
 Q Y
"RTN","PRSLIB01",198,0)
 ;=======================
"RTN","PRSLIB01",199,0)
DISPJULI(DAYNO,NODAYS,JULIAND1) ;
"RTN","PRSLIB01",200,0)
 ; DISPLAY GREGORIAN AND JULIAN CALENDAR SIDE BY SIDE
"RTN","PRSLIB01",201,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",202,0)
 ;                                 beginning on Wednesday.
"RTN","PRSLIB01",203,0)
 ;
"RTN","PRSLIB01",204,0)
 N DAYS,DAYPOS,I,PPOFFSET
"RTN","PRSLIB01",205,0)
 S PPOFFSET=6
"RTN","PRSLIB01",206,0)
 W !
"RTN","PRSLIB01",207,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",208,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",209,0)
 . I DAYPOS=0 W ! I $G(PPS(I))'="" W PPS(I)
"RTN","PRSLIB01",210,0)
 . W ?(PPOFFSET+((DAYPOS+1)*4-($L(I+JULIAND1)-1))),I+JULIAND1
"RTN","PRSLIB01",211,0)
 Q
"RTN","PRSLIB01",212,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",213,0)
 ;
"RTN","PRSLIB01",214,0)
PAYROLMO(DAYNO,NODAYS) ;PAYROLL STYLE DISPLAY OF ENTIRE MONTH
"RTN","PRSLIB01",215,0)
 ;SAMPLE CALL:  D DISPMO(4,30) Produces a 30 month with day 1
"RTN","PRSLIB01",216,0)
 ;                                 beginning on Wednessday.
"RTN","PRSLIB01",217,0)
 ;
"RTN","PRSLIB01",218,0)
 N DAYS,DAYPOS,I
"RTN","PRSLIB01",219,0)
 S DAYS="SUN MON TUE WED THU FRI SAT"
"RTN","PRSLIB01",220,0)
 W !,"  ",DAYS,!
"RTN","PRSLIB01",221,0)
 F I=1:1:NODAYS D
"RTN","PRSLIB01",222,0)
 . S DAYPOS=(DAYNO+I-1)#7
"RTN","PRSLIB01",223,0)
 . I DAYPOS=0 W !
"RTN","PRSLIB01",224,0)
 . W ?((DAYPOS+1)*(4)-$S($L(I)=2:1,1:0)),I
"RTN","PRSLIB01",225,0)
 Q
"RTN","PRSLIB01",226,0)
DAYSINMO(Y,M) ; Return number of days in month based on year and month
"RTN","PRSLIB01",227,0)
 ;  Input:  Y = year in 4 digit format between 1700 and 3000
"RTN","PRSLIB01",228,0)
 ;          M = month expressed as an integer from 1 to 12 (Jan - Dec)
"RTN","PRSLIB01",229,0)
 ;
"RTN","PRSLIB01",230,0)
 N GOODY,GOODM S (GOODY,GOODM)=0
"RTN","PRSLIB01",231,0)
 I Y<2700,Y>1700 S GOODY=1
"RTN","PRSLIB01",232,0)
 I M>0,M<13 S GOODM=1
"RTN","PRSLIB01",233,0)
 Q:'(GOODM&GOODY) 0
"RTN","PRSLIB01",234,0)
 Q $P("31^"_(28+$$LEAPYR^PRSLIB00(YEAR))_"^31^30^31^30^31^31^30^31^30^31",U,MONTH)
"RTN","PRSLIB01",235,0)
 ;= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
"RTN","PRSLIB01",236,0)
GETJULI(ZFMDATE,YEAR) ;
"RTN","PRSLIB01",237,0)
 N X1,X2
"RTN","PRSLIB01",238,0)
 S X2=YEAR-1700_"0101"
"RTN","PRSLIB01",239,0)
 S X1=ZFMDATE
"RTN","PRSLIB01",240,0)
 D ^%DTC
"RTN","PRSLIB01",241,0)
 Q X
"RTN","PRSPUT3")
0^1^B61563877^B60317840
"RTN","PRSPUT3",1,0)
PRSPUT3 ;WOIFO/MGD,JAH - PART TIME PHYSICIAN UTILITIES #1 ;03/23/07
"RTN","PRSPUT3",2,0)
 ;;4.0;PAID;**93,112,150**;Sep 21, 1995;Build 1
"RTN","PRSPUT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified 
"RTN","PRSPUT3",4,0)
 ;
"RTN","PRSPUT3",5,0)
 ;Utilities for Part Time Physician patch PRS*4.0*93.
"RTN","PRSPUT3",6,0)
 ;
"RTN","PRSPUT3",7,0)
PTP(PRSIEN) ;Check for potential PTP (has a memo on file)
"RTN","PRSPUT3",8,0)
 ; input PRSIEN = employee IEN (file 450)
"RTN","PRSPUT3",9,0)
 ; result = 1 or 0, true (1) if employee has any memos on file
"RTN","PRSPUT3",10,0)
 Q $S($O(^PRST(458.7,"B",PRSIEN,0)):1,1:0)
"RTN","PRSPUT3",11,0)
 ;
"RTN","PRSPUT3",12,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",13,0)
 ; Display PTP AL info
"RTN","PRSPUT3",14,0)
 ; Input: PRSIEN - IEN of PT Physician
"RTN","PRSPUT3",15,0)
 ;         ARRAY - Array where leave info is stored. (Optional) If not 
"RTN","PRSPUT3",16,0)
 ;                 specified, no array is created.
"RTN","PRSPUT3",17,0)
 ;         INDEX - Index to start array. (optional) set to 1 if not spec
"RTN","PRSPUT3",18,0)
 ; Output: 2 line summary-current AL bal, fut reqs and potential loss.
"RTN","PRSPUT3",19,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",20,0)
AL(PRSIEN,ARRAY,INDEX) ;
"RTN","PRSPUT3",21,0)
 Q:'PRSIEN
"RTN","PRSPUT3",22,0)
 I $G(INDEX)="",($G(ARRAY)'="") D INDEX^PRSPUT1
"RTN","PRSPUT3",23,0)
 N AINC,ALBAL,ALTBL,APALHRS,EOLYD,LVG,TEXT,X,X1,X2,Y,MAYLOSE,LDPINV
"RTN","PRSPUT3",24,0)
 ;
"RTN","PRSPUT3",25,0)
 ; Max Carryover
"RTN","PRSPUT3",26,0)
 S MAXOVER=240
"RTN","PRSPUT3",27,0)
 ;
"RTN","PRSPUT3",28,0)
 ; current AL bal
"RTN","PRSPUT3",29,0)
 S ALBAL=$P($G(^PRSPC(PRSIEN,"ANNUAL")),U,3)
"RTN","PRSPUT3",30,0)
 ;
"RTN","PRSPUT3",31,0)
 ; last day of curr leave yr
"RTN","PRSPUT3",32,0)
 S EOLYD=$$GETLDOYR()
"RTN","PRSPUT3",33,0)
 ;
"RTN","PRSPUT3",34,0)
 ; last day proc from 459 & inverse
"RTN","PRSPUT3",35,0)
 ;S LDP=$P($G(^PRST(458,$O(^PRST(458,"AB",$O(^PRST(459,"AB",""),-1),0)),1)),U,14)
"RTN","PRSPUT3",36,0)
 S LDP=$P($G(^PRST(458,$O(^PRST(458,"AB",$O(^PRST(458,"AB",""),-1),0)),1)),U,14) ;150-modified to use 458 "AB" cross reference for vatas compatibility
"RTN","PRSPUT3",37,0)
 S LDPINV=9999999-LDP
"RTN","PRSPUT3",38,0)
 ;
"RTN","PRSPUT3",39,0)
 ; future al approved (ranges from LastDayProcessed459-EndOfLeaveYear)
"RTN","PRSPUT3",40,0)
 ; This is an estimate since we count all hrs for reqs that begin in 
"RTN","PRSPUT3",41,0)
 ; the current yr but cross into next
"RTN","PRSPUT3",42,0)
 S APALHRS=$$GETAPALH(PRSIEN,LDPINV,EOLYD)
"RTN","PRSPUT3",43,0)
 ;
"RTN","PRSPUT3",44,0)
 ; accrual from last pp proc to EOY
"RTN","PRSPUT3",45,0)
 S ACCRUAL=$$GETACCRU(PRSIEN,EOLYD,LDP)
"RTN","PRSPUT3",46,0)
 ;
"RTN","PRSPUT3",47,0)
 ; potential loss
"RTN","PRSPUT3",48,0)
 S MAYLOSE=$$GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER)
"RTN","PRSPUT3",49,0)
 ;
"RTN","PRSPUT3",50,0)
 ; Display
"RTN","PRSPUT3",51,0)
 S TEXT=""
"RTN","PRSPUT3",52,0)
 D A1^PRSPUT1 ; Blank line
"RTN","PRSPUT3",53,0)
 S TEXT="AL Bal: "_$J(ALBAL,6,2)
"RTN","PRSPUT3",54,0)
 S $E(TEXT,17)="",TEXT=TEXT_"Approved future AL thru Leave Year: "
"RTN","PRSPUT3",55,0)
 S TEXT=TEXT_$J(APALHRS,6,2)
"RTN","PRSPUT3",56,0)
 S $E(TEXT,60)="",TEXT=TEXT_"Max carryover: "_MAXOVER
"RTN","PRSPUT3",57,0)
 D A1^PRSPUT1 ; Line #1
"RTN","PRSPUT3",58,0)
 S Y=EOLYD
"RTN","PRSPUT3",59,0)
 D DD^%DT
"RTN","PRSPUT3",60,0)
 S TEXT="Potential AL hours to be lost by "_Y_" excluding Approved AL: "
"RTN","PRSPUT3",61,0)
 S TEXT=TEXT_MAYLOSE
"RTN","PRSPUT3",62,0)
 D A1^PRSPUT1 ; Line #2
"RTN","PRSPUT3",63,0)
 K INDEX
"RTN","PRSPUT3",64,0)
 Q
"RTN","PRSPUT3",65,0)
 ;
"RTN","PRSPUT3",66,0)
GETACCRU(PRSIEN,EOLYD,LDP) ; Calculate AL accrucal from last day of 
"RTN","PRSPUT3",67,0)
 ; pp processed in 459 (LDP) to end of leave year (EOLYD)
"RTN","PRSPUT3",68,0)
 ;
"RTN","PRSPUT3",69,0)
 N CO,LVG,NH,DB,AINC,X1,X2,INC
"RTN","PRSPUT3",70,0)
 ;
"RTN","PRSPUT3",71,0)
 S C0=$G(^PRSPC(PRSIEN,0)),LVG=$P(C0,"^",15),NH=+$P(C0,"^",16)
"RTN","PRSPUT3",72,0)
 S DB=$P(C0,"^",10),AINC=""
"RTN","PRSPUT3",73,0)
 Q:LVG'?1N!("123"'[LVG) 0
"RTN","PRSPUT3",74,0)
 I LVG=1 D  ; Leave Group 1
"RTN","PRSPUT3",75,0)
 . S AINC=$S(DB=1:4,1:NH+AINC/20\1)
"RTN","PRSPUT3",76,0)
 I LVG=2 D  ; Leave Group 2
"RTN","PRSPUT3",77,0)
 . S AINC=$S(DB=1:6,1:NH+AINC/13\1)
"RTN","PRSPUT3",78,0)
 I LVG=3 D  ; Leave Group 3
"RTN","PRSPUT3",79,0)
 . S AINC=$S(DB=1:8,1:NH+AINC/10\1)
"RTN","PRSPUT3",80,0)
 S X1=EOLYD,X2=LDP
"RTN","PRSPUT3",81,0)
 D ^%DTC
"RTN","PRSPUT3",82,0)
 S INC=X+13\14*AINC
"RTN","PRSPUT3",83,0)
 Q INC
"RTN","PRSPUT3",84,0)
 ;
"RTN","PRSPUT3",85,0)
GETLOSE(APALHRS,ALBAL,ACCRUAL,MAXOVER) ; Calculate potential hours to be lost
"RTN","PRSPUT3",86,0)
 N ALTBL
"RTN","PRSPUT3",87,0)
 S ALTBL=ALBAL+ACCRUAL-MAXOVER-APALHRS
"RTN","PRSPUT3",88,0)
 Q $S(ALTBL<0:0,1:ALTBL)
"RTN","PRSPUT3",89,0)
 ;
"RTN","PRSPUT3",90,0)
GETLDOYR() ; Calculate last day of the last pp of current year (EOLY)
"RTN","PRSPUT3",91,0)
 N X,I,X1,X2,NEXTYR,PRSYRDT
"RTN","PRSPUT3",92,0)
 S PRSYRDT=$P($T(DAT^PRSAPPU),";;",2)
"RTN","PRSPUT3",93,0)
 F I=1:1 S NEXTYR=$P(PRSYRDT,",",I) Q:NEXTYR>DT!(NEXTYR="")
"RTN","PRSPUT3",94,0)
 I NEXTYR="" Q DT
"RTN","PRSPUT3",95,0)
 S X1=NEXTYR,X2=-1
"RTN","PRSPUT3",96,0)
 D C^%DTC
"RTN","PRSPUT3",97,0)
 Q X
"RTN","PRSPUT3",98,0)
 ;
"RTN","PRSPUT3",99,0)
GETAPALH(PRSIEN,PPPIN,EOLYD) ; Approved AL hrs
"RTN","PRSPUT3",100,0)
 ;
"RTN","PRSPUT3",101,0)
 N APALHRS,EOLYDINV,LREND,LRIEN,LRSTRT,LRDATA
"RTN","PRSPUT3",102,0)
 ;
"RTN","PRSPUT3",103,0)
 S APALHRS=0 ; COUNTER-APproved Annual Leave HouR
"RTN","PRSPUT3",104,0)
 S EOLYDINV=9999999-EOLYD
"RTN","PRSPUT3",105,0)
 ;
"RTN","PRSPUT3",106,0)
 ; use inverse dt to loop chrono from future requests to recent ones
"RTN","PRSPUT3",107,0)
 ; Quit when end date hits last proc pp. Don't include canceled & other
"RTN","PRSPUT3",108,0)
 ; leave type reqs from AD index.
"RTN","PRSPUT3",109,0)
 ;
"RTN","PRSPUT3",110,0)
 S LREND=0
"RTN","PRSPUT3",111,0)
 F  S LREND=$O(^PRST(458.1,"AD",PRSIEN,LREND)) Q:(LREND'>0)!(LREND>PPPIN)  D
"RTN","PRSPUT3",112,0)
 . S LRIEN=0
"RTN","PRSPUT3",113,0)
 . F  S LRIEN=$O(^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)) Q:LRIEN'>0  D
"RTN","PRSPUT3",114,0)
 . . S LRSTRT=^PRST(458.1,"AD",PRSIEN,LREND,LRIEN)
"RTN","PRSPUT3",115,0)
 . . S LRSTRT=9999999-LRSTRT
"RTN","PRSPUT3",116,0)
 . . ;
"RTN","PRSPUT3",117,0)
 . . ; skip if lv doesn't start in range-last pp proc to EOLY
"RTN","PRSPUT3",118,0)
 . . Q:LRSTRT'<PPPIN!(LRSTRT'>EOLYDINV)
"RTN","PRSPUT3",119,0)
 . . ; skip if not AL or App
"RTN","PRSPUT3",120,0)
 . . S LRDATA=$G(^PRST(458.1,LRIEN,0))
"RTN","PRSPUT3",121,0)
 . . Q:$P(LRDATA,U,7)'="AL"!($P(LRDATA,U,9)'="A")
"RTN","PRSPUT3",122,0)
 . . S APALHRS=APALHRS+$P(LRDATA,U,15)
"RTN","PRSPUT3",123,0)
 Q APALHRS
"RTN","PRSPUT3",124,0)
 ;
"RTN","PRSPUT3",125,0)
 ;-----------------------------------------------------------------------
"RTN","PRSPUT3",126,0)
 ; Utility updates ESR Status and autopost any holidays
"RTN","PRSPUT3",127,0)
 ;
"RTN","PRSPUT3",128,0)
 ; Input:
"RTN","PRSPUT3",129,0)
 ;       PPI - The internal entry number of the PP
"RTN","PRSPUT3",130,0)
 ;    PRSIEN - The internal entry number of the PT Phy
"RTN","PRSPUT3",131,0)
 ;       DAY - (optional) If passed in the specific date (1-14) that
"RTN","PRSPUT3",132,0)
 ;               needs to be updated.  If a specific date is not
"RTN","PRSPUT3",133,0)
 ;               passed in all 14 days will be reviewed and updated
"RTN","PRSPUT3",134,0)
 ;               as necessary.
"RTN","PRSPUT3",135,0)
 ;
"RTN","PRSPUT3",136,0)
 ; HOL and PDT need to be set by calling ^PRSAPPH prior to making this
"RTN","PRSPUT3",137,0)
 ; call.
"RTN","PRSPUT3",138,0)
 ;
"RTN","PRSPUT3",139,0)
ESRUPDT(PPI,PRSIEN,DAY) ;
"RTN","PRSPUT3",140,0)
 ;
"RTN","PRSPUT3",141,0)
 N END,HTOUR,IENS,MT,PRSFDA,START,STATUS,STOP,TOUR
"RTN","PRSPUT3",142,0)
 S DAY=$G(DAY,"")
"RTN","PRSPUT3",143,0)
 S START=$S(DAY:DAY,1:1)
"RTN","PRSPUT3",144,0)
 S END=$S(DAY:DAY,1:14)
"RTN","PRSPUT3",145,0)
 F DAY=START:1:END D
"RTN","PRSPUT3",146,0)
 . S TOUR=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",147,0)
 . S STATUS=$S(TOUR>1:1,1:6)
"RTN","PRSPUT3",148,0)
 . S IENS=DAY_","_PRSIEN_","_PPI_","
"RTN","PRSPUT3",149,0)
 . K PRSFDA
"RTN","PRSPUT3",150,0)
 . S PRSFDA(458.02,IENS,146)=STATUS
"RTN","PRSPUT3",151,0)
 . I $D(HOL($P(PDT,U,DAY))) D
"RTN","PRSPUT3",152,0)
 . . S HTOUR=$G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,1))
"RTN","PRSPUT3",153,0)
 . . Q:HTOUR=""
"RTN","PRSPUT3",154,0)
 . . S MT=$P($G(^PRST(458,PPI,"E",PRSIEN,"D",DAY,0)),U,2)
"RTN","PRSPUT3",155,0)
 . . S MT=$P($G(^PRST(457.1,MT,0)),U,3)
"RTN","PRSPUT3",156,0)
 . . F I=0:1:6 Q:$P(HTOUR,U,(3*I)+1)=""  D
"RTN","PRSPUT3",157,0)
 . . . S START=$P(HTOUR,U,(3*I)+1),STOP=$P(HTOUR,U,(3*I)+2)
"RTN","PRSPUT3",158,0)
 . . . S PRSFDA(458.02,IENS,110+(5*I))=START
"RTN","PRSPUT3",159,0)
 . . . S PRSFDA(458.02,IENS,111+(5*I))=STOP
"RTN","PRSPUT3",160,0)
 . . . S PRSFDA(458.02,IENS,112+(5*I))="HX"
"RTN","PRSPUT3",161,0)
 . . S PRSFDA(458.02,IENS,146)=4 ; ESR DAILY STATUS = SIGNED
"RTN","PRSPUT3",162,0)
 . . S PRSFDA(458.02,IENS,101)="" ; Reset timecard status to unposted.
"RTN","PRSPUT3",163,0)
 . . S PRSFDA(458.02,IENS,114)=MT ; Meal time for 1st segment
"RTN","PRSPUT3",164,0)
 . . S PRSFDA(458.02,IENS,147)=$$NOW^XLFDT() ; Date/Time stamp
"RTN","PRSPUT3",165,0)
 . . S PRSFDA(458.02,IENS,149)=4 ; ESR Signed by Holiday
"RTN","PRSPUT3",166,0)
 . D UPDATE^DIE("","PRSFDA","IENS"),MSG^DIALOG()
"RTN","PRSPUT3",167,0)
 Q
"RTN","PRSPUT3",168,0)
 ;
"RTN","PRSPUT3",169,0)
MEMCPP(MIEN) ; Memo Certified PP
"RTN","PRSPUT3",170,0)
 ; This utility determine the last certified PP and the number of
"RTN","PRSPUT3",171,0)
 ; certified PPs for a given memo.
"RTN","PRSPUT3",172,0)
 ; input
"RTN","PRSPUT3",173,0)
 ;   MIEN - internal entry number of a memo in file 458.7
"RTN","PRSPUT3",174,0)
 ; returns a string value
"RTN","PRSPUT3",175,0)
 ;   = last certified PP (external value)^number of certified PPs
"RTN","PRSPUT3",176,0)
 ;   example "05-01^3"
"RTN","PRSPUT3",177,0)
 ;
"RTN","PRSPUT3",178,0)
 N LASTPP,MPPIEN,PPC,PRSX
"RTN","PRSPUT3",179,0)
 I '$G(MIEN) Q "^"
"RTN","PRSPUT3",180,0)
 ;
"RTN","PRSPUT3",181,0)
 S LASTPP="" ; last PP
"RTN","PRSPUT3",182,0)
 S PPC=0 ; pp counter
"RTN","PRSPUT3",183,0)
 ; loop thru PPs in memo
"RTN","PRSPUT3",184,0)
 S MPPIEN=0 F  S MPPIEN=$O(^PRST(458.7,MIEN,9,MPPIEN)) Q:'MPPIEN  D
"RTN","PRSPUT3",185,0)
 . S PRSX=$G(^PRST(458.7,MIEN,9,MPPIEN,0))
"RTN","PRSPUT3",186,0)
 . Q:$P(PRSX,U,2)=""  ; REG HOURS is null so PP never certified
"RTN","PRSPUT3",187,0)
 . S LASTPP=$P(PRSX,U,1)
"RTN","PRSPUT3",188,0)
 . S PPC=PPC+1
"RTN","PRSPUT3",189,0)
 ;
"RTN","PRSPUT3",190,0)
 Q LASTPP_"^"_PPC
"RTN","PRSPUT3",191,0)
 ;
"RTN","PRSPUT3",192,0)
PP8BAMT(PPAMT,PPI,PRSIEN) ; array TIMEAMTS passed by reference
"RTN","PRSPUT3",193,0)
 ; subscripted w/ types of time CODE and type of time activity 
"RTN","PRSPUT3",194,0)
 ; from PRS8VW2 table.  This routine sets each node of TIMEAMTS array
"RTN","PRSPUT3",195,0)
 ; to the total hours (week one and two) in the pp 
"RTN","PRSPUT3",196,0)
 ; for that type of time activity.
"RTN","PRSPUT3",197,0)
 ;
"RTN","PRSPUT3",198,0)
 ; SAMPLE CALL:
"RTN","PRSPUT3",199,0)
 ; S TAMTS("WP","Leave Without Pay")="" D PP8BTOT(.TAMTS,PPI,PRSIEN)
"RTN","PRSPUT3",200,0)
 ;
"RTN","PRSPUT3",201,0)
 ; SAMPLE RETURN ARRAY
"RTN","PRSPUT3",202,0)
 ; TAMTS("WP","Leave Without Pay")=12.5
"RTN","PRSPUT3",203,0)
 ;
"RTN","PRSPUT3",204,0)
 N TT,STR8B,TC,TA,WK1CD,WK2CD,AMT1,AMT2
"RTN","PRSPUT3",205,0)
 S STR8B=$$GET8B(PPI,PRSIEN)
"RTN","PRSPUT3",206,0)
 S TC=""
"RTN","PRSPUT3",207,0)
 F  S TC=$O(PPAMT(TC)) Q:TC=""  D
"RTN","PRSPUT3",208,0)
 .  S TA=""
"RTN","PRSPUT3",209,0)
 .  F  S TA=$O(PPAMT(TC,TA)) Q:TA=""  D
"RTN","PRSPUT3",210,0)
 ..    S WK1CD=$$WKTT(TC,TA,1)
"RTN","PRSPUT3",211,0)
 ..    S WK2CD=$$WKTT(TC,TA,2)
"RTN","PRSPUT3",212,0)
 ..    S AMT1=$$EXTR8BT(STR8B,WK1CD)
"RTN","PRSPUT3",213,0)
 ..    S AMT2=$$EXTR8BT(STR8B,WK2CD)
"RTN","PRSPUT3",214,0)
 ..    S PPAMT(TC,TA)=AMT1+AMT2
"RTN","PRSPUT3",215,0)
 Q
"RTN","PRSPUT3",216,0)
GET8B(PPI,PRSIEN) ; get 8b from 5 node unless corrected timecard 
"RTN","PRSPUT3",217,0)
 ;                 has been done then we need to recompute 8B
"RTN","PRSPUT3",218,0)
 N S8B
"RTN","PRSPUT3",219,0)
 I $$CORRECT(PPI,PRSIEN) D
"RTN","PRSPUT3",220,0)
 .  N DFN,PY,VAL
"RTN","PRSPUT3",221,0)
 .; new variables used BY callers to this API because the decomp
"RTN","PRSPUT3",222,0)
 .;  kills everything in its path.
"RTN","PRSPUT3",223,0)
 .  N QT,PP,%,C0,CNT,CT,D,DAY,HDR,I,K,MEAL,SSN,ST,TT,TYP,X,X1,Y,Y1,Z,ML,Z0,Z1
"RTN","PRSPUT3",224,0)
 .  S DFN=PRSIEN
"RTN","PRSPUT3",225,0)
 .  S PY=PPI
"RTN","PRSPUT3",226,0)
 .  D ONE^PRS8
"RTN","PRSPUT3",227,0)
 .  S S8B=$E($G(VAL),33,999)
"RTN","PRSPUT3",228,0)
 E  D
"RTN","PRSPUT3",229,0)
 .  S S8B=$E($G(^PRST(458,PPI,"E",PRSIEN,5)),33,999)
"RTN","PRSPUT3",230,0)
 Q S8B
"RTN","PRSPUT3",231,0)
CORRECT(PPI,PRSIEN) ; return true if any corrected timecards exist for 
"RTN","PRSPUT3",232,0)
 ;this emp's pp that were approved by the final level supr apprl
"RTN","PRSPUT3",233,0)
 N CORRECT,STATUS,TCD
"RTN","PRSPUT3",234,0)
 S CORRECT=0
"RTN","PRSPUT3",235,0)
 Q:($G(PPI)'>0)!($G(PRSIEN)'>0)
"RTN","PRSPUT3",236,0)
 S TCD=0
"RTN","PRSPUT3",237,0)
 F  S TCD=$O(^PRST(458,PPI,"E",PRSIEN,"X",TCD)) Q:TCD'>0!(CORRECT)  D
"RTN","PRSPUT3",238,0)
 .  S STATUS=$P($G(^PRST(458,PPI,"E",PRSIEN,"X",TCD,0)),U,5)
"RTN","PRSPUT3",239,0)
 .  I STATUS="P"!(STATUS="S") S CORRECT=1
"RTN","PRSPUT3",240,0)
 Q CORRECT
"RTN","PRSPUT3",241,0)
EXTR8BT(S,T) ; EXTRACT THE 8B TYPE OF TIME FROM THE STUB AND RETURN THE 
"RTN","PRSPUT3",242,0)
 ; AMOUNT OF TIME FROM WEEK ONE AND TWO FOR THIS TYPE OF TIME
"RTN","PRSPUT3",243,0)
 ; INPUT: S-8B STUB
"RTN","PRSPUT3",244,0)
 ;        T-TYPE OF TIME TO FIND ^ LENGTH OF DATA IN 8B
"RTN","PRSPUT3",245,0)
 N AMT,LEN,POS,QH,HRS
"RTN","PRSPUT3",246,0)
 S AMT="0.0"
"RTN","PRSPUT3",247,0)
 S POS=$F(S,$P(T,U))
"RTN","PRSPUT3",248,0)
 I POS D
"RTN","PRSPUT3",249,0)
 .  S LEN=$P(T,U,2)
"RTN","PRSPUT3",250,0)
 .  S AMT=$E(S,POS,POS-1+LEN)
"RTN","PRSPUT3",251,0)
 .  S HRS=+$E(AMT,1,LEN-1)
"RTN","PRSPUT3",252,0)
 .  S QH=+$E(AMT,LEN,LEN)
"RTN","PRSPUT3",253,0)
 .  S QH=$S(QH=1:".25",QH=2:".5",QH=3:".75",1:".0")
"RTN","PRSPUT3",254,0)
 .  S AMT=HRS_QH
"RTN","PRSPUT3",255,0)
 Q AMT
"RTN","PRSPUT3",256,0)
 ;
"RTN","PRSPUT3",257,0)
WKTT(T,TA,WK) ; GET 8B STRING TIMECODE FOR WEEK ONE OR TWO AND LENGTH OF 
"RTN","PRSPUT3",258,0)
 ; THE DATA IN THE 8B STRING
"RTN","PRSPUT3",259,0)
 ;  Input:
"RTN","PRSPUT3",260,0)
 ;    T- type of time code from file 457.3
"RTN","PRSPUT3",261,0)
 ;    TA-time activity from the table in PRS8VW2 (e.g. Leave Without Pay)
"RTN","PRSPUT3",262,0)
 ;    WK-1 or 2 for the desired timecode week
"RTN","PRSPUT3",263,0)
 ;
"RTN","PRSPUT3",264,0)
 S WK=$S($G(WK)=2:2,1:1)
"RTN","PRSPUT3",265,0)
 Q:$G(T)=""
"RTN","PRSPUT3",266,0)
 N TCH1,TTEXT,CHKLN,I,FOUND,E,TTABLE,CHUNK,TABLEI,WKTTCODE
"RTN","PRSPUT3",267,0)
 S FOUND=0
"RTN","PRSPUT3",268,0)
 ;
"RTN","PRSPUT3",269,0)
 S TCH1=$E(T,1,1)
"RTN","PRSPUT3",270,0)
 D E2^PRS8VW
"RTN","PRSPUT3",271,0)
 S CHKLN=$P($T(@(TCH1)+0^PRS8VW2),";;",2)
"RTN","PRSPUT3",272,0)
 F I=1:1:$L(CHKLN,"^") D  Q:FOUND
"RTN","PRSPUT3",273,0)
 .  S CHUNK=$P(CHKLN,U,I)
"RTN","PRSPUT3",274,0)
 .  S TABLEI=$P(CHUNK,":",2)
"RTN","PRSPUT3",275,0)
 .  S WKTTCODE=TCH1_$P(CHUNK,":")
"RTN","PRSPUT3",276,0)
 .  S TTABLE=$P($T(TYP+TABLEI^PRS8VW2),";;",2)
"RTN","PRSPUT3",277,0)
 .  I TTABLE=TA,$F(E(WK),WKTTCODE) D
"RTN","PRSPUT3",278,0)
 ..   S FOUND=1
"RTN","PRSPUT3",279,0)
 ..;  When found in PRS8VW2 table return code and length
"RTN","PRSPUT3",280,0)
 ..   S WKTTCODE=WKTTCODE_U_$P(CHUNK,":",3)
"RTN","PRSPUT3",281,0)
 I 'FOUND S WKTTCODE=0
"RTN","PRSPUT3",282,0)
 Q WKTTCODE
"VER")
8.0^22.2
"BLD",10616,6)
^139
**END**
**END**

