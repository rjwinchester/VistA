EMERGENCY Released SD*5.3*707 SEQ #586
Extracted from mail message
**KIDS**:SD*5.3*707^

**INSTALL NAME**
SD*5.3*707
"BLD",11162,0)
SD*5.3*707^SCHEDULING^0^3190729^y
"BLD",11162,1,0)
^^2^2^3190610^
"BLD",11162,1,1,0)
CCRA-HSRM Scheduling HL7 Interfaces for processing Make
"BLD",11162,1,2,0)
Appointment: SIU-S12, CANCEL: SIU-S15, and NOSHOW: SIU-S26 messages.
"BLD",11162,4,0)
^9.64PA^^
"BLD",11162,6)
17^
"BLD",11162,6.3)
57
"BLD",11162,"ABPKG")
n
"BLD",11162,"INI")
LINK^SDPRE707
"BLD",11162,"INID")
^^n
"BLD",11162,"INIT")
 
"BLD",11162,"KRN",0)
^9.67PA^779.2^20
"BLD",11162,"KRN",.4,0)
.4
"BLD",11162,"KRN",.401,0)
.401
"BLD",11162,"KRN",.402,0)
.402
"BLD",11162,"KRN",.403,0)
.403
"BLD",11162,"KRN",.5,0)
.5
"BLD",11162,"KRN",.84,0)
.84
"BLD",11162,"KRN",3.6,0)
3.6
"BLD",11162,"KRN",3.8,0)
3.8
"BLD",11162,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",11162,"KRN",3.8,"NM",1,0)
GMRC HSRM SIU HL7 MESSAGES^^0
"BLD",11162,"KRN",3.8,"NM","B","GMRC HSRM SIU HL7 MESSAGES",1)
 
"BLD",11162,"KRN",9.2,0)
9.2
"BLD",11162,"KRN",9.8,0)
9.8
"BLD",11162,"KRN",9.8,"NM",0)
^9.68A^12^5
"BLD",11162,"KRN",9.8,"NM",3,0)
SDCCRCOR^^0^B91692691
"BLD",11162,"KRN",9.8,"NM",5,0)
SDCCRGAP^^0^B27289606
"BLD",11162,"KRN",9.8,"NM",10,0)
SDCCRSCU^^0^B91336223
"BLD",11162,"KRN",9.8,"NM",11,0)
SDCCRSEN^^0^B147345634
"BLD",11162,"KRN",9.8,"NM",12,0)
SDPRE707^^0^B12266652
"BLD",11162,"KRN",9.8,"NM","B","SDCCRCOR",3)
 
"BLD",11162,"KRN",9.8,"NM","B","SDCCRGAP",5)
 
"BLD",11162,"KRN",9.8,"NM","B","SDCCRSCU",10)
 
"BLD",11162,"KRN",9.8,"NM","B","SDCCRSEN",11)
 
"BLD",11162,"KRN",9.8,"NM","B","SDPRE707",12)
 
"BLD",11162,"KRN",19,0)
19
"BLD",11162,"KRN",19,"NM",0)
^9.68A^^
"BLD",11162,"KRN",19.1,0)
19.1
"BLD",11162,"KRN",101,0)
101
"BLD",11162,"KRN",101,"NM",0)
^9.68A^6^6
"BLD",11162,"KRN",101,"NM",1,0)
CCRA HSRM SIU-S12 CLIENT^^0
"BLD",11162,"KRN",101,"NM",2,0)
CCRA HSRM SIU-S12 SERVER^^0
"BLD",11162,"KRN",101,"NM",3,0)
CCRA HSRM SIU-S15 CLIENT^^0
"BLD",11162,"KRN",101,"NM",4,0)
CCRA HSRM SIU-S15 SERVER^^0
"BLD",11162,"KRN",101,"NM",5,0)
CCRA HSRM SIU-S26 CLIENT^^0
"BLD",11162,"KRN",101,"NM",6,0)
CCRA HSRM SIU-S26 SERVER^^0
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S12 CLIENT",1)
 
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S12 SERVER",2)
 
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S15 CLIENT",3)
 
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S15 SERVER",4)
 
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S26 CLIENT",5)
 
"BLD",11162,"KRN",101,"NM","B","CCRA HSRM SIU-S26 SERVER",6)
 
"BLD",11162,"KRN",409.61,0)
409.61
"BLD",11162,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",11162,"KRN",771,0)
771
"BLD",11162,"KRN",771,"NM",0)
^9.68A^2^2
"BLD",11162,"KRN",771,"NM",1,0)
SD-CCRA-HSRM^^0
"BLD",11162,"KRN",771,"NM",2,0)
SD-CCRA-VISTA^^0
"BLD",11162,"KRN",771,"NM","B","SD-CCRA-HSRM",1)
 
"BLD",11162,"KRN",771,"NM","B","SD-CCRA-VISTA",2)
 
"BLD",11162,"KRN",779.2,0)
779.2
"BLD",11162,"KRN",870,0)
870
"BLD",11162,"KRN",870,"NM",0)
^9.68A^^0
"BLD",11162,"KRN",8989.51,0)
8989.51
"BLD",11162,"KRN",8989.52,0)
8989.52
"BLD",11162,"KRN",8994,0)
8994
"BLD",11162,"KRN","B",.4,.4)
 
"BLD",11162,"KRN","B",.401,.401)
 
"BLD",11162,"KRN","B",.402,.402)
 
"BLD",11162,"KRN","B",.403,.403)
 
"BLD",11162,"KRN","B",.5,.5)
 
"BLD",11162,"KRN","B",.84,.84)
 
"BLD",11162,"KRN","B",3.6,3.6)
 
"BLD",11162,"KRN","B",3.8,3.8)
 
"BLD",11162,"KRN","B",9.2,9.2)
 
"BLD",11162,"KRN","B",9.8,9.8)
 
"BLD",11162,"KRN","B",19,19)
 
"BLD",11162,"KRN","B",19.1,19.1)
 
"BLD",11162,"KRN","B",101,101)
 
"BLD",11162,"KRN","B",409.61,409.61)
 
"BLD",11162,"KRN","B",771,771)
 
"BLD",11162,"KRN","B",779.2,779.2)
 
"BLD",11162,"KRN","B",870,870)
 
"BLD",11162,"KRN","B",8989.51,8989.51)
 
"BLD",11162,"KRN","B",8989.52,8989.52)
 
"BLD",11162,"KRN","B",8994,8994)
 
"BLD",11162,"QUES",0)
^9.62^^0
"BLD",11162,"REQB",0)
^9.611^2^2
"BLD",11162,"REQB",1,0)
GMRC*3.0*99^2
"BLD",11162,"REQB",2,0)
GMRC*3.0*106^2
"BLD",11162,"REQB","B","GMRC*3.0*106",2)
 
"BLD",11162,"REQB","B","GMRC*3.0*99",1)
 
"INI")
LINK^SDPRE707
"KRN",3.8,1498,-1)
0^1
"KRN",3.8,1498,0)
GMRC HSRM SIU HL7 MESSAGES^PU^^^^^
"KRN",3.8,1498,3)
 
"KRN",101,8482,-1)
0^2
"KRN",101,8482,0)
CCRA HSRM SIU-S12 SERVER^^^E^^^^^^^^
"KRN",101,8482,1,0)
^^1^1^3181001^
"KRN",101,8482,1,1,0)
Receives HL7 SIU^S12 v2.5.1 messages from HSRM app.
"KRN",101,8482,770)
SD-CCRA-HSRM^^SIU^S12^^^^AL^NE^2.5.1^
"KRN",101,8482,775,0)
^101.0775PA^1^1
"KRN",101,8482,775,1,0)
8483
"KRN",101,8482,775,1,"^")
CCRA HSRM SIU-S12 CLIENT
"KRN",101,8483,-1)
0^1
"KRN",101,8483,0)
CCRA HSRM SIU-S12 CLIENT^^^S^^^^^^^^
"KRN",101,8483,1,0)
^^1^1^3181001^
"KRN",101,8483,1,1,0)
Sends ACK for HL7 SIU^S12 v2.5.1 messages received from HSRM app.
"KRN",101,8483,770)
^SD-CCRA-VISTA^^S12^^^CCRA-NAK^^^^ACK
"KRN",101,8483,771)
D EN^SDCCRSEN
"KRN",101,8483,773)
1^1
"KRN",101,8484,-1)
0^3
"KRN",101,8484,0)
CCRA HSRM SIU-S15 CLIENT^^^S^^^^^^^^
"KRN",101,8484,1,0)
^^1^1^3181001^
"KRN",101,8484,1,1,0)
Sends ACK for HL7 SIU^S15 v2.5.1 messages received from HSRM Application.
"KRN",101,8484,770)
^SD-CCRA-VISTA^^S15^^^CCRA-NAK^^^^ACK
"KRN",101,8484,771)
D EN^SDCCRSEN
"KRN",101,8484,773)
1^1
"KRN",101,8485,-1)
0^5
"KRN",101,8485,0)
CCRA HSRM SIU-S26 CLIENT^^^S^^^^^^^^
"KRN",101,8485,1,0)
^^1^1^3181116^
"KRN",101,8485,1,1,0)
Sends ACK for HL7 SIU^S26 v2.5.1 messages received from HSRM Application.
"KRN",101,8485,770)
^SD-CCRA-VISTA^^S26^^^CCRA-NAK^^^^ACK
"KRN",101,8485,771)
D EN^SDCCRSEN
"KRN",101,8485,773)
1^1
"KRN",101,8486,-1)
0^4
"KRN",101,8486,0)
CCRA HSRM SIU-S15 SERVER^^^E^^^^^^^^
"KRN",101,8486,1,0)
^^1^1^3181001^
"KRN",101,8486,1,1,0)
Receives HL7 SIU^S15 v2.5.1 messages from HSRM application.
"KRN",101,8486,770)
SD-CCRA-HSRM^^SIU^S15^^^^AL^NE^2.5.1^
"KRN",101,8486,775,0)
^101.0775PA^1^1
"KRN",101,8486,775,1,0)
8484
"KRN",101,8486,775,1,"^")
CCRA HSRM SIU-S15 CLIENT
"KRN",101,8487,-1)
0^6
"KRN",101,8487,0)
CCRA HSRM SIU-S26 SERVER^^^E^^^^^^^^
"KRN",101,8487,1,0)
^^1^1^3181001^
"KRN",101,8487,1,1,0)
Receives HL7 SIU^S26 v2.5.1 messages from HSRM application.
"KRN",101,8487,770)
SD-CCRA-HSRM^^SIU^S26^^^^AL^NE^2.5.1^
"KRN",101,8487,775,0)
^101.0775PA^1^1
"KRN",101,8487,775,1,0)
8485
"KRN",101,8487,775,1,"^")
CCRA HSRM SIU-S26 CLIENT
"KRN",771,284,-1)
0^1
"KRN",771,284,0)
SD-CCRA-HSRM^a^200^^^^USA
"KRN",771,284,"EC")
^~\&
"KRN",771,284,"FS")
|
"KRN",771,285,-1)
0^2
"KRN",771,285,0)
SD-CCRA-VISTA^a^442^^^^USA
"KRN",771,285,"EC")
^~\&
"KRN",771,285,"FS")
|
"MBREQ")
0
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",14,771)
771;14;;;HLAP^XPDTA1;HLAPF1^XPDIA1;HLAPE1^XPDIA1;HLAPF2^XPDIA1;;HLAPDEL^XPDIA1(%)
"ORD",14,771,0)
HL7 APPLICATION PARAMETER
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,22,0)
^9.49I^1^1
"PKG",16,22,1,0)
5.3^2930813^2930930
"PKG",16,22,1,"PAH",1,0)
707^3190729^520824644
"PKG",16,22,1,"PAH",1,1,0)
^^2^2^3190729
"PKG",16,22,1,"PAH",1,1,1,0)
CCRA-HSRM Scheduling HL7 Interfaces for processing Make
"PKG",16,22,1,"PAH",1,1,2,0)
Appointment: SIU-S12, CANCEL: SIU-S15, and NOSHOW: SIU-S26 messages.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")
 
"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","SDCCRCOR")
0^3^B91692691^n/a
"RTN","SDCCRCOR",1,0)
SDCCRCOR ;CCRA/LB,PB - Core Tags;APR 4, 2019
"RTN","SDCCRCOR",2,0)
 ;;5.3;Scheduling;**707**;APR 4, 2019;Build 57
"RTN","SDCCRCOR",3,0)
 ;;Per VA directive 6402, this routine should not be modified.
"RTN","SDCCRCOR",4,0)
 Q
"RTN","SDCCRCOR",5,0)
 ;
"RTN","SDCCRCOR",6,0)
HL72VATS(HL7TS) ; Converts HL7 formatted timestamps to VA format
"RTN","SDCCRCOR",7,0)
 ;  HL7TS - date/time stamp in 24H HL7 format (YYYYMMDDHHMMSS)
"RTN","SDCCRCOR",8,0)
 Q $$HL7TFM^XLFDT($G(HL7TS))
"RTN","SDCCRCOR",9,0)
VA2HL7TS(VATS) ; Converts VA formatted timestamps to HL7 format
"RTN","SDCCRCOR",10,0)
 ;  VATS - date/time stamp in VA format (YYYMMDD.HHMMSS)
"RTN","SDCCRCOR",11,0)
 Q $$FMTHL7^XLFDT($G(VATS))
"RTN","SDCCRCOR",12,0)
GETPTIEN(PATNAME) ; Returns patient ID or null, name must be perfect match
"RTN","SDCCRCOR",13,0)
 ; PATNAME - Patient name - must be exact LAST,FIRST
"RTN","SDCCRCOR",14,0)
 N IEN
"RTN","SDCCRCOR",15,0)
 I $G(PATNAME)="" Q ""
"RTN","SDCCRCOR",16,0)
 I $D(^DPT("B",PATNAME)) D
"RTN","SDCCRCOR",17,0)
 . S IEN=$O(^DPT("B",PATNAME,""))
"RTN","SDCCRCOR",18,0)
 Q $G(IEN)
"RTN","SDCCRCOR",19,0)
GETPTNM(DFN) ; Returns patient name from ^DPT global, given a valid DFN
"RTN","SDCCRCOR",20,0)
 ; DFN - Patient ID to look for
"RTN","SDCCRCOR",21,0)
 N PATNAME
"RTN","SDCCRCOR",22,0)
 I $G(DFN)="" Q ""
"RTN","SDCCRCOR",23,0)
 I $D(^DPT(DFN,0)) D
"RTN","SDCCRCOR",24,0)
 . S PATNAME=$P(^DPT(DFN,0),"^",1)
"RTN","SDCCRCOR",25,0)
 Q $G(PATNAME)
"RTN","SDCCRCOR",26,0)
GETLCIEN(LOCNAME) ; Returns Location ID or null, name must be perfect match
"RTN","SDCCRCOR",27,0)
 ; PATNAME - Location name - must be exact
"RTN","SDCCRCOR",28,0)
 N IEN
"RTN","SDCCRCOR",29,0)
 I $G(LOCNAME)="" Q ""
"RTN","SDCCRCOR",30,0)
 I $D(^SC("B",LOCNAME)) D
"RTN","SDCCRCOR",31,0)
 . S IEN=$O(^SC("B",LOCNAME,""))
"RTN","SDCCRCOR",32,0)
 Q $G(IEN)
"RTN","SDCCRCOR",33,0)
GETLCNM(LOCID) ; Returns location name from clinic file 44 given a valid clinic IEN
"RTN","SDCCRCOR",34,0)
 ; LOCID - Location ID to look for
"RTN","SDCCRCOR",35,0)
 Q $$GET1^DIQ(44,$G(LOCID),.01)
"RTN","SDCCRCOR",36,0)
GETNMPRV(CLINIC) ; Returns the number of providers associated with a clinic
"RTN","SDCCRCOR",37,0)
 ; CLINIC - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRCOR",38,0)
 Q $P(^SC($G(CLINIC),"PR",0),"^",4) ;Piece 3 is most recently assigned number, piece 4 is total active.
"RTN","SDCCRCOR",39,0)
GETCNGNM(CLINICGROUP) ; Returns the Name of a Clinic's group
"RTN","SDCCRCOR",40,0)
 ; CLINICGROUP - The Clinic Group IEN
"RTN","SDCCRCOR",41,0)
 Q $P(^SD(409.67,$G(CLINICGROUP),0),"^",1)
"RTN","SDCCRCOR",42,0)
GETPRVNM(PROVIEN) ; Returns the provider name, given a provider ID
"RTN","SDCCRCOR",43,0)
 ; PROVIEN - The Provider IEN
"RTN","SDCCRCOR",44,0)
 Q $P(^VA(200,$G(PROVIEN),0),"^")
"RTN","SDCCRCOR",45,0)
ICLNDPRV(CLINIC,PROVIEN) ; Determines if the provider is the default provider for the clinic
"RTN","SDCCRCOR",46,0)
 ; CLINIC - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRCOR",47,0)
 ; PROVIEN - The Provider IEN
"RTN","SDCCRCOR",48,0)
 Q $P(^SC($G(CLINIC),"PR",$$CLNPVIND($G(CLINIC),$G(PROVIEN)),0),"^",2)
"RTN","SDCCRCOR",49,0)
CLNPVIND(CLINIC,PROVIEN) ; Determines the line number the provider is listed on for a clinic
"RTN","SDCCRCOR",50,0)
 ; CLINIC - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRCOR",51,0)
 ; PROVIEN - The Provider IEN
"RTN","SDCCRCOR",52,0)
 Q +$QS($Q(^SC($G(CLINIC),"PR","B",$G(PROVIEN))),5)
"RTN","SDCCRCOR",53,0)
GTCANRSN(PATIENTIEN,APPTDT) ; Returns the discrete cancellation reason
"RTN","SDCCRCOR",54,0)
 ; PATIEN (I,REQ)- Patient ID as in DPT(PATIEN,"S",APPTDAT
"RTN","SDCCRCOR",55,0)
 ; APPTDAT (I,REQ) - Appointment date
"RTN","SDCCRCOR",56,0)
 Q $P(^SD(409.2,$$APTNODEP^SDCCRGAP($G(PATIENTIEN),$G(APPTDT),0,15),0),"^",1)
"RTN","SDCCRCOR",57,0)
GTCNRNTP(PATIENTIEN,APPTDT) ; Gets the cancelation reason type.
"RTN","SDCCRCOR",58,0)
 ; PATIEN - Patient ID as in DPT(PATIEN,"S",APPTDAT
"RTN","SDCCRCOR",59,0)
 ; APPTDAT - Appointment date
"RTN","SDCCRCOR",60,0)
 N VAL,CANTYPE
"RTN","SDCCRCOR",61,0)
 S CANTYPE=$$APTNODEP^SDCCRGAP($G(PATIENTIEN),$G(APPTDT),0,15)
"RTN","SDCCRCOR",62,0)
 S VAL=$P($G(^SD(409.2,$G(CANTYPE),0)),"^",2)
"RTN","SDCCRCOR",63,0)
 Q $S($G(VAL)="B":"C",1:$G(VAL))
"RTN","SDCCRCOR",64,0)
ORD2CONS(ORDERID) ;Returns the consult ID linked to the given order
"RTN","SDCCRCOR",65,0)
 ; ORDERID       - Order ID
"RTN","SDCCRCOR",66,0)
 N CNSLTLNK
"RTN","SDCCRCOR",67,0)
 I $G(ORDERID)="" Q ""
"RTN","SDCCRCOR",68,0)
 S CNSLTLNK=$G(^OR(100,ORDERID,4))
"RTN","SDCCRCOR",69,0)
 I $P(CNSLTLNK,";",2)="GMRC" Q $P(CNSLTLNK,";",1)
"RTN","SDCCRCOR",70,0)
 Q ""
"RTN","SDCCRCOR",71,0)
INSTRING(VALUE,LIST,DELIM) ; compare a string value to see if it is a list given a particular delimiter
"RTN","SDCCRCOR",72,0)
 ; VALUE - value to find in the list.
"RTN","SDCCRCOR",73,0)
 ; LIST - The list to check
"RTN","SDCCRCOR",74,0)
 ; DELIM - Delimiter that separates the data in the list. Default = ","
"RTN","SDCCRCOR",75,0)
 Q $S($G(DELIM)="":(","_$G(LIST)_",")[(","_$G(VALUE)_","),1:($G(DELIM)_$G(LIST)_$G(DELIM))[($G(DELIM)_$G(VALUE)_$G(DELIM)))
"RTN","SDCCRCOR",76,0)
INITINC ; Sets temp global that indicates this process is filing an incoming message
"RTN","SDCCRCOR",77,0)
 S ^TMP($J,"CCRA-INCINTF")=1
"RTN","SDCCRCOR",78,0)
 Q
"RTN","SDCCRCOR",79,0)
DONEINC ; Clears temp global that indicates this process is filing an incoming message
"RTN","SDCCRCOR",80,0)
 K ^TMP($J,"CCRA-INCINTF")
"RTN","SDCCRCOR",81,0)
 Q
"RTN","SDCCRCOR",82,0)
INCINTF() ; Checks temp global that indicates whether the process is filing an incoming message
"RTN","SDCCRCOR",83,0)
 Q +$G(^TMP($J,"CCRA-INCINTF"))
"RTN","SDCCRCOR",84,0)
SETMSGET()    ;SEND AN ERROR MESSAGE OUT AND LOG THE CACHE ERROR+STACK TO ^ERRORS
"RTN","SDCCRCOR",85,0)
 N $ETRAP
"RTN","SDCCRCOR",86,0)
 S $ETRAP="LOGSEND^SDCCRCOR"
"RTN","SDCCRCOR",87,0)
 Q
"RTN","SDCCRCOR",88,0)
FMTPHONE(PHONE,EXT) ; Formats a VistA telephone number into an HL7-compliant format
"RTN","SDCCRCOR",89,0)
 ; Formats include: (nnn)nnn-nnnn and nnn-nnnn, depending on whether or not there is an area code.
"RTN","SDCCRCOR",90,0)
 ; If the number is not in an a valid format, does not attempt to do any formatting.
"RTN","SDCCRCOR",91,0)
 ; Returns 1 if the number was formatted, 0 otherwise.
"RTN","SDCCRCOR",92,0)
 ;
"RTN","SDCCRCOR",93,0)
 ; PHONE - Phone number to be formatted
"RTN","SDCCRCOR",94,0)
 ; EXT   - Phone number extension (if specified)
"RTN","SDCCRCOR",95,0)
 ;
"RTN","SDCCRCOR",96,0)
 I $G(PHONE)="" Q 0
"RTN","SDCCRCOR",97,0)
 N TEMP,LENGTH
"RTN","SDCCRCOR",98,0)
 ;
"RTN","SDCCRCOR",99,0)
 ; Extract phone number
"RTN","SDCCRCOR",100,0)
 S TEMP=$$STRIP^XLFSTR(PHONE,"-()")  ; Strip certain delimiters
"RTN","SDCCRCOR",101,0)
 S TEMP=$TR(TEMP,"x","X")            ; Standardize extension delimiter
"RTN","SDCCRCOR",102,0)
 S EXT=$P(TEMP,"X",2)                ; Pull out the extension (if it exists)
"RTN","SDCCRCOR",103,0)
 S TEMP=$P(TEMP,"X",1)
"RTN","SDCCRCOR",104,0)
 ;
"RTN","SDCCRCOR",105,0)
 ; Format based on length
"RTN","SDCCRCOR",106,0)
 S LENGTH=$L(TEMP)
"RTN","SDCCRCOR",107,0)
 I '$$INSTRING^SDCCRCOR(LENGTH,"7,10",",") Q 0                           ; Length not 7 or 10
"RTN","SDCCRCOR",108,0)
 I LENGTH=7 S TEMP=$E(TEMP,1,3)_"-"_$E(TEMP,4,7)                         ; No area code: nnn-nnnn
"RTN","SDCCRCOR",109,0)
 I LENGTH=10 S TEMP="("_$E(TEMP,1,3)_")"_$E(TEMP,4,6)_"-"_$E(TEMP,7,10)  ; Area code: (nnn)nnn-nnnn
"RTN","SDCCRCOR",110,0)
 ;
"RTN","SDCCRCOR",111,0)
 ; Save output
"RTN","SDCCRCOR",112,0)
 S PHONE=TEMP
"RTN","SDCCRCOR",113,0)
 Q 1
"RTN","SDCCRCOR",114,0)
GETLEN(SCH,AIP,AIG) ;Translates duration into Minutes. Assumes minutes unless set to S or SEC for the units
"RTN","SDCCRCOR",115,0)
 ;  Only one parameter at a time should be passed-in, depending on what segment is calling this tag
"RTN","SDCCRCOR",116,0)
 ;  SCH (I/OPT) - SCH message segment data
"RTN","SDCCRCOR",117,0)
 ;  AIP (I/OPT) - AIP message segment data
"RTN","SDCCRCOR",118,0)
 ;  AIG (I/OPT) - AIG message segment data
"RTN","SDCCRCOR",119,0)
 N DURATION,UNIT
"RTN","SDCCRCOR",120,0)
 I $D(SCH) D
"RTN","SDCCRCOR",121,0)
 . S DURATION=+$$GET^SDCCRSCU(.SCH,9,1)  ;SCH-9
"RTN","SDCCRCOR",122,0)
 . I DURATION=0 D ACK("CE",MID,"SCH",9,1,304,"NO APPOINTMENT DURATION RECIEVED IN SCH",1) S ABORT="1^NO APPOINTMENT DURATION RECIEVED IN SCH" Q 
"RTN","SDCCRCOR",123,0)
 . S UNIT=$$GET^SDCCRSCU(.SCH,10,1)     ;SCH-10
"RTN","SDCCRCOR",124,0)
 E  I $D(AIP) D
"RTN","SDCCRCOR",125,0)
 . S DURATION=+$$GET^SDCCRSCU(.AIP,9,1)  ;AIP-9
"RTN","SDCCRCOR",126,0)
 . I DURATION=0 D ACK("CE",MID,"AIP",9,1,304,"NO APPOINTMENT DURATION RECIEVED IN AIP",1) S ABORT="1^NO APPOINTMENT DURATION RECIEVED IN AIP" Q
"RTN","SDCCRCOR",127,0)
 . S UNIT=$$GET^SDCCRSCU(.AIP,10,1)     ;AIP-10
"RTN","SDCCRCOR",128,0)
 E  I $D(AIG) D
"RTN","SDCCRCOR",129,0)
 . S DURATION=+$$GET^SDCCRSCU(.AIG,11,1)  ;AIG-11
"RTN","SDCCRCOR",130,0)
 . I DURATION=0 D ACK("CE",MID,"AIG",11,1,304,"NO APPOINTMENT DURATION RECIEVED IN AIG",1) S ABORT="1^NO APPOINTMENT DURATION RECIEVED IN AIG" Q
"RTN","SDCCRCOR",131,0)
 . ;S UNIT=$$GET^SDCCRSCU(.AIG,12,1)     ;AIG-12
"RTN","SDCCRCOR",132,0)
 ; Translate to minutes
"RTN","SDCCRCOR",133,0)
 I $$INSTRING^SDCCRCOR(UNIT,"S,SEC") S DURATION=DURATION/60
"RTN","SDCCRCOR",134,0)
 Q $G(DURATION)
"RTN","SDCCRCOR",135,0)
COPYMSG(Y) ; Copy HL7 Message to array Y (by reference)
"RTN","SDCCRCOR",136,0)
 ; Based on HL*1.6*56 VISTA HL7 Site Manager & Developer Manual
"RTN","SDCCRCOR",137,0)
 ; Paragraph 9.7, page 9-4
"RTN","SDCCRCOR",138,0)
 I $L($G(HLNEXT)) ;HL7 context
"RTN","SDCCRCOR",139,0)
 E  Q
"RTN","SDCCRCOR",140,0)
 N I,J
"RTN","SDCCRCOR",141,0)
 F I=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","SDCCRCOR",142,0)
 .S Y(I)=HLNODE,J=0
"RTN","SDCCRCOR",143,0)
 .F  S J=$O(HLNODE(J)) Q:'J  D
"RTN","SDCCRCOR",144,0)
 ..S Y(I)=Y(I)_HLNODE(J)
"RTN","SDCCRCOR",145,0)
 Q
"RTN","SDCCRCOR",146,0)
 ;
"RTN","SDCCRCOR",147,0)
CHKMSG(Y) ; Check Message for all required segments
"RTN","SDCCRCOR",148,0)
 N QUIT,REQSEG,SEGFND,I,SEGTYP,ICN,DFN,ERRMSG,MSGEVN
"RTN","SDCCRCOR",149,0)
 S QUIT=0
"RTN","SDCCRCOR",150,0)
 F REQSEG="MSH","SCH","PID","PV1","RGS","AIS","AIG","AIL","AIP" D  Q:QUIT
"RTN","SDCCRCOR",151,0)
 .S (SEGFND,I)=0
"RTN","SDCCRCOR",152,0)
 .F  S I=$O(Y(I)) Q:'I!(SEGFND)  D
"RTN","SDCCRCOR",153,0)
 ..S SEGTYP=$E(Y(I),1,3)
"RTN","SDCCRCOR",154,0)
 ..I SEGTYP=REQSEG S SEGFND=1
"RTN","SDCCRCOR",155,0)
 ..I SEGTYP="MSH" D
"RTN","SDCCRCOR",156,0)
 ... I $P(Y(I),FS,10)="" D
"RTN","SDCCRCOR",157,0)
 .... S QUIT=1
"RTN","SDCCRCOR",158,0)
 .... D ACK("CE",MID,"MSH","",10,101,"MESSAGE CONTROL ID MISSING")
"RTN","SDCCRCOR",159,0)
 .... S ABORT="1^MESSAGE CONTROL ID MISSING"
"RTN","SDCCRCOR",160,0)
 .... Q:QUIT
"RTN","SDCCRCOR",161,0)
 ... I $P($P(Y(I),FS,9),CS,1)'="SIU" D
"RTN","SDCCRCOR",162,0)
 .... S QUIT=1
"RTN","SDCCRCOR",163,0)
 .... S ERRMSG="Scheduling Message TYPE not received on CCRA scheduling interface. Message type received:"_$P($P(Y(I),FS,9),CS,1)
"RTN","SDCCRCOR",164,0)
 .... S ERRMSG=ERRMSG_" for MESSAGE CONTROL ID:"_$P(Y(I),FS,10)
"RTN","SDCCRCOR",165,0)
 .... D ACK("CE",MID,"MSH","",9,200,ERRMSG)
"RTN","SDCCRCOR",166,0)
 .... S ABORT="1^"_$G(ERRMSG)
"RTN","SDCCRCOR",167,0)
 .... Q:QUIT
"RTN","SDCCRCOR",168,0)
 ... ;determine scheduling action event from message event
"RTN","SDCCRCOR",169,0)
 ... S MSGEVN=$P($P(Y(I),FS,9),CS,2) I $$SETEVENT^SDCCRSEN($G(MSGEVN),.MSGARY)=0 D
"RTN","SDCCRCOR",170,0)
 .... S QUIT=1
"RTN","SDCCRCOR",171,0)
 .... S ERRMSG="Scheduling Message EVENT could not be determined. Message event received:"_$P($P(Y(I),FS,9),CS,2)
"RTN","SDCCRCOR",172,0)
 .... S ERRMSG=ERRMSG_" for MESSAGE CONTROL ID:"_$P(Y(I),FS,10)
"RTN","SDCCRCOR",173,0)
 .... D ACK("CE",MID,"MSH","",9,201,ERRMSG)
"RTN","SDCCRCOR",174,0)
 .... S ABORT="1^"_$G(ERRMSG)
"RTN","SDCCRCOR",175,0)
 .... Q:QUIT
"RTN","SDCCRCOR",176,0)
 ... S HDRTIME=$P(Y(I),FS,7)
"RTN","SDCCRCOR",177,0)
 .I 'SEGFND D
"RTN","SDCCRCOR",178,0)
 ..S QUIT=1
"RTN","SDCCRCOR",179,0)
 ..D ACK("CE",MID,REQSEG,"","",100,REQSEG_" SEGMENT MISSING OR OUT OF ORDER")
"RTN","SDCCRCOR",180,0)
 .. S ABORT="1^"_$G(REQSEG)_" SEGMENT MISSING OR OUT OF ORDER"
"RTN","SDCCRCOR",181,0)
 Q QUIT
"RTN","SDCCRCOR",182,0)
ACK(STAT,MID,SID,SEG,FLD,CD,TXT,ACKTYP) ; Creates ACKs for HL7 Message
"RTN","SDCCRCOR",183,0)
 ;STAT = Status (Acknowledgment Code) (REQUIRED)
"RTN","SDCCRCOR",184,0)
 ;MID = Message ID (REQUIRED)
"RTN","SDCCRCOR",185,0)
 ;SID = Segment ID (set if ERR occurred in segment) (OPTIONAL)
"RTN","SDCCRCOR",186,0)
 ;SEG = Segment location of error (OPTIONAL)
"RTN","SDCCRCOR",187,0)
 ;FLD = Field location of error (OPTIONAL)
"RTN","SDCCRCOR",188,0)
 ;CD = Error Code (OPTIONAL)
"RTN","SDCCRCOR",189,0)
 ;TXT = Text describing error (OPTIONAL)
"RTN","SDCCRCOR",190,0)
 ;ACKTYP = Acknowledgment Type (OPTIONAL)
"RTN","SDCCRCOR",191,0)
 ;
"RTN","SDCCRCOR",192,0)
 N HLA,EID,EIDS,RES,ERRI
"RTN","SDCCRCOR",193,0)
 ;
"RTN","SDCCRCOR",194,0)
 ;Make sure the parameters are defined
"RTN","SDCCRCOR",195,0)
 S STAT=$G(STAT),MID=$G(MID),SID=$G(SID),SEG=$G(SEG)
"RTN","SDCCRCOR",196,0)
 S FLD=$G(FLD),CD=$G(CD),TXT=$G(TXT)
"RTN","SDCCRCOR",197,0)
 ;
"RTN","SDCCRCOR",198,0)
 ;Create MSA Segment
"RTN","SDCCRCOR",199,0)
 S HLA("HLA",1)="MSA"_FS_STAT_FS_MID
"RTN","SDCCRCOR",200,0)
 S EID=$G(HL("EID"))
"RTN","SDCCRCOR",201,0)
 S EIDS=$G(HL("EIDS"))
"RTN","SDCCRCOR",202,0)
 Q:((EID="")!($G(HLMTIENS)="")!(EIDS=""))
"RTN","SDCCRCOR",203,0)
 ;
"RTN","SDCCRCOR",204,0)
 S RES=""
"RTN","SDCCRCOR",205,0)
 ;If Segment ID (SID) is set, create ERR segment
"RTN","SDCCRCOR",206,0)
 D:$L(SID)>0
"RTN","SDCCRCOR",207,0)
 . K ERRARY
"RTN","SDCCRCOR",208,0)
 . S HLA("HLA",2)="ERR"
"RTN","SDCCRCOR",209,0)
 . S $P(HLA("HLA",2),FS,3)=SID_CS_SEG_CS_FLD
"RTN","SDCCRCOR",210,0)
 . S $P(HLA("HLA",2),FS,5)="E"
"RTN","SDCCRCOR",211,0)
 . ;
"RTN","SDCCRCOR",212,0)
 . ; Commit Error
"RTN","SDCCRCOR",213,0)
 . I '+$G(ACKTYP) D
"RTN","SDCCRCOR",214,0)
 .. S $P(HLA("HLA",2),FS,4)=CD_CS_TXT_CS_"0357"
"RTN","SDCCRCOR",215,0)
 . ;
"RTN","SDCCRCOR",216,0)
 . ; Application Error
"RTN","SDCCRCOR",217,0)
 . I +$G(ACKTYP)=1 D
"RTN","SDCCRCOR",218,0)
 .. S ERRI=0
"RTN","SDCCRCOR",219,0)
 .. S $P(HLA("HLA",2),FS,6)=CS_CS_CS_CD_CS_TXT
"RTN","SDCCRCOR",220,0)
 .. ;Process Error
"RTN","SDCCRCOR",221,0)
 .. S ERRI=ERRI+1
"RTN","SDCCRCOR",222,0)
 .. S ERRARY(ERRI,2)=$P($G(HLA("HLA",2)),"|",3)
"RTN","SDCCRCOR",223,0)
 .. I $P($G(HLA("HLA",2)),"|",6)'="" D  ;
"RTN","SDCCRCOR",224,0)
 ... S ERRARY(ERRI,3)=$P($P($G(HLA("HLA",2)),"|",6),"^",4)_"^"_$P($P($G(HLA("HLA",2)),"|",6),"^",5)
"RTN","SDCCRCOR",225,0)
 .. I $P($G(HLA("HLA",2)),"|",6)="" S ERRARY(ERRI,3)=$P($G(HLA("HLA",2)),"|",4)
"RTN","SDCCRCOR",226,0)
 . ;I $D(ERRARY) D MESSAGE(MID,.ERRARY)
"RTN","SDCCRCOR",227,0)
 . ; build message for MailMan
"RTN","SDCCRCOR",228,0)
 D GENACK^HLMA1(EID,$G(HLMTIENS),EIDS,"LM",1,.RES)
"RTN","SDCCRCOR",229,0)
 Q
"RTN","SDCCRCOR",230,0)
 ;
"RTN","SDCCRCOR",231,0)
APPMSG(MSGID,ABORT) ; Send a MailMan Message with the errors
"RTN","SDCCRCOR",232,0)
 N MSGTEXT,DUZ,XMDUZ,XMSUB,XMTEXT,XMY,XMMG,XMSTRIP,XMROU,DIFROM,XMYBLOB,XMZ,XMMG,DATE,J
"RTN","SDCCRCOR",233,0)
 S DATE=$$FMTE^XLFDT($$FMDATE^HLFNC($P(HL("DTM"),"-",1)))
"RTN","SDCCRCOR",234,0)
 S XMSUB="Consult: "_$G(CONSULTID)_" - GMRC CCRA Scheduling Issue from HSRM"
"RTN","SDCCRCOR",235,0)
 S MSGTEXT(1)=" "
"RTN","SDCCRCOR",236,0)
 S MSGTEXT(2)="An error in making a community care appointment for consult ID: "_$G(CONSULTID)
"RTN","SDCCRCOR",237,0)
 S MSGTEXT(3)="The consult title is: "_$G(CONTITLE)
"RTN","SDCCRCOR",238,0)
 S MSGTEXT(4)="A non-count clinic named "_$G(SRVNAME)_" could not be found."
"RTN","SDCCRCOR",239,0)
 S MSGTEXT(5)="The appointment was for "_$G(PROVIDER)_" on "_$$FMTE^XLFDT(SDECSTART,3)
"RTN","SDCCRCOR",240,0)
 S XMTEXT="MSGTEXT("
"RTN","SDCCRCOR",241,0)
 S XMDUZ="GMRC-CCRA <-HSRM Transaction Error"
"RTN","SDCCRCOR",242,0)
 S XMDUZ=.5
"RTN","SDCCRCOR",243,0)
 S XMY("G.GMRC HSRM SIU HL7 MESSAGES")=""  ;  ** CHECK THIS OUT **
"RTN","SDCCRCOR",244,0)
 D ^XMD
"RTN","SDCCRCOR",245,0)
 Q
"RTN","SDCCRCOR",246,0)
MESSAGE(MSGID,ABORT) ; Send a MailMan Message with the errors
"RTN","SDCCRCOR",247,0)
 N MSGTEXT,DUZ,XMDUZ,XMSUB,XMTEXT,XMY,XMMG,XMSTRIP,XMROU,DIFROM,XMYBLOB,XMZ,XMMG,DATE,J
"RTN","SDCCRCOR",248,0)
 S DATE=$$FMTE^XLFDT($$FMDATE^HLFNC($P(HL("DTM"),"-",1)))
"RTN","SDCCRCOR",249,0)
 S XMSUB="Consult: "_$G(CONID)_" GMRC CCRA Scheduling Issue from HSRM"
"RTN","SDCCRCOR",250,0)
 S MSGTEXT(1)=" "
"RTN","SDCCRCOR",251,0)
 S MSGTEXT(2)="Error in receiving HL7 message from HSRM"
"RTN","SDCCRCOR",252,0)
 S MSGTEXT(3)="Date:       "_DATE
"RTN","SDCCRCOR",253,0)
 S MSGTEXT(4)="Message ID: "_MSGID
"RTN","SDCCRCOR",254,0)
 S MSGTEXT(5)="Error(s): "_$P(ABORT,"^",2)
"RTN","SDCCRCOR",255,0)
 S XMTEXT="MSGTEXT("
"RTN","SDCCRCOR",256,0)
 S XMDUZ="GMRC-CCRA <-HSRM Transaction Error"
"RTN","SDCCRCOR",257,0)
 S XMDUZ=.5
"RTN","SDCCRCOR",258,0)
 S XMY("G.GMRC HSRM SIU HL7 MESSAGES")=""
"RTN","SDCCRCOR",259,0)
 D ^XMD
"RTN","SDCCRCOR",260,0)
 Q
"RTN","SDCCRCOR",261,0)
ANAK(NAKMSG,USERMAIL,ICN,DFN,APTTM,CONID) ; Application Error
"RTN","SDCCRCOR",262,0)
 N PATNAME,EID,EIDS,MSGN,SITE,CONPAT
"RTN","SDCCRCOR",263,0)
 Q:$G(NAKMSG)=""
"RTN","SDCCRCOR",264,0)
 Q:$G(APTTM)=""
"RTN","SDCCRCOR",265,0)
 Q:$G(CONID)=""
"RTN","SDCCRCOR",266,0)
 S CONPAT=$$GET1^DIQ(123,CONID_",",.02,"I"),PATNAME=$$GET1^DIQ(123,CONID_",",.02,"E")
"RTN","SDCCRCOR",267,0)
 S SITE=$$KSP^XUPARAM("INST")
"RTN","SDCCRCOR",268,0)
 S:$G(ICN)="" ICN=$P(^DPT(CONPAT,"MPI"),"^",10)
"RTN","SDCCRCOR",269,0)
 S EID=$G(HL("EID"))
"RTN","SDCCRCOR",270,0)
 S EIDS=$G(HL("EIDS"))
"RTN","SDCCRCOR",271,0)
 S MSGN=$G(HL("MID"))
"RTN","SDCCRCOR",272,0)
 S HLA("HLA",1)="MSA|AE|"_$G(MSGN)_"|"_$G(USERMAIL)_" "_$G(NAKMSG)_"|||"_$G(ICN)_"^"_$G(PATNAME)_"^"_SITE_"^"_CONID_"^"_APTTM
"RTN","SDCCRCOR",273,0)
 D GENACK^HLMA1(EID,$G(HLMTIENS),EIDS,"LM",1,.RES)
"RTN","SDCCRCOR",274,0)
 Q
"RTN","SDCCRGAP")
0^5^B27289606^n/a
"RTN","SDCCRGAP",1,0)
SDCCRGAP ;CCRA/LB,PB - Appointment retrieval API;APR 4, 2019
"RTN","SDCCRGAP",2,0)
 ;;5.3;Scheduling;**707**;APR 4, 2019;Build 57
"RTN","SDCCRGAP",3,0)
 ;;Per VA directive 6402, this routine should not be modified.
"RTN","SDCCRGAP",4,0)
 Q
"RTN","SDCCRGAP",5,0)
GETAPPT(PATIEN,APPTDT,APPTARY) ;Gets the appointment details form the database and returns it in an array.
"RTN","SDCCRGAP",6,0)
 ;  See parameter descriptions for details of the available nodes.
"RTN","SDCCRGAP",7,0)
 ;   PATIEN(I,REQ) - The patient IEN
"RTN","SDCCRGAP",8,0)
 ;   APPTDT(I,REQ)  - the appointment date/time in vista format.
"RTN","SDCCRGAP",9,0)
 ;                    Found in the ^DPT(<IEN>,"S",<APPTDT> node.
"RTN","SDCCRGAP",10,0)
 ;   APPTARY(O,REQ) - Array  of appointment data.
"RTN","SDCCRGAP",11,0)
 ;
"RTN","SDCCRGAP",12,0)
 ;         APPTARY("PATIENT IEN") - IEN
"RTN","SDCCRGAP",13,0)
 ;         APPTARY("APPTDT")  = date/time of the appointment in VistA format
"RTN","SDCCRGAP",14,0)
 ;         APPTARY("APPTTYPE") - appointment type
"RTN","SDCCRGAP",15,0)
 ;         APPTARY("CANCEL REASON") - Cancellation reason (discrete)
"RTN","SDCCRGAP",16,0)
 ;         APPTARY("CANCEL REMARK") - Cancellation remark (freetext)
"RTN","SDCCRGAP",17,0)
 ;         APPTARY("CHECKIN DT") - date/time of the check in action
"RTN","SDCCRGAP",18,0)
 ;         APPTARY("CHECKIN USER") - check in user
"RTN","SDCCRGAP",19,0)
 ;         APPTARY("CHECKOUT DT") - date/time of the check out action
"RTN","SDCCRGAP",20,0)
 ;         APPTARY("CHECKOUT USER") - check out user
"RTN","SDCCRGAP",21,0)
 ;         APPTARY("CLINIC")  = the clinic of this appointment
"RTN","SDCCRGAP",22,0)
 ;         APPTARY("CLINIC NAME") = Clinic name
"RTN","SDCCRGAP",23,0)
 ;         APPTARY("CLINIC PROVIDER",0) - number of providers on the clinic
"RTN","SDCCRGAP",24,0)
 ;         APPTARY("CLINIC PROVIDER",n,"IEN") - Provider IEN
"RTN","SDCCRGAP",25,0)
 ;         APPTARY("CLINIC PROVIDER",n,"NAME") - Name of provider
"RTN","SDCCRGAP",26,0)
 ;         APPTARY("CLINIC PURGED") - Flag to say the clinic has reached its
"RTN","SDCCRGAP",27,0)
 ;                                    purge days so the data is no longer available.
"RTN","SDCCRGAP",28,0)
 ;         APPTARY("CLINIC GROUP")  - This is heavily covering our specialties.
"RTN","SDCCRGAP",29,0)
 ;         APPTARY("COMMENT") - Appointment comment.
"RTN","SDCCRGAP",30,0)
 ;         APPTARY("CONSULT") - linked consult ID
"RTN","SDCCRGAP",31,0)
 ;         APPTARY("COV") - The COV. Looking into what this is.
"RTN","SDCCRGAP",32,0)
 ;         APPTARY("DURATION") - appointment duration
"RTN","SDCCRGAP",33,0)
 ;         APPTARY("ENCOUNTER IEN") - Encounter ID
"RTN","SDCCRGAP",34,0)
 ;         APPTARY("ELIGIBILITY")  - Appointment eligibility if different than primary
"RTN","SDCCRGAP",35,0)
 ;         APPTARY("Next Available") - If the appt was scheduled as next available
"RTN","SDCCRGAP",36,0)
 ;         APPTARY("PAT INDICATED DATE")  - Date the start of search was performed on.
"RTN","SDCCRGAP",37,0)
 ;         APPTARY("STATUS") - APPT status calculated to current state
"RTN","SDCCRGAP",38,0)
 ;                            (SCHEDULED/CHECKED IN/CHECKED OUT/CANCELLED/NO-SHOW)
"RTN","SDCCRGAP",39,0)
 ;         APPTARY("USER") - Scheduling user
"RTN","SDCCRGAP",40,0)
 ;
"RTN","SDCCRGAP",41,0)
 N DELIM,CLNODE0,SNODE0,CLINIC,PROVARY,CLNODEC,CLNODECN
"RTN","SDCCRGAP",42,0)
 K APPTARY   ;Force output only parameter
"RTN","SDCCRGAP",43,0)
 ;
"RTN","SDCCRGAP",44,0)
 I $G(PATIEN)="" Q
"RTN","SDCCRGAP",45,0)
 I $G(APPTDT)="" Q
"RTN","SDCCRGAP",46,0)
 ;
"RTN","SDCCRGAP",47,0)
 S DELIM="^"
"RTN","SDCCRGAP",48,0)
 S SNODE0=$$APPTNODE(PATIEN,APPTDT,0)
"RTN","SDCCRGAP",49,0)
 I $G(SNODE0)="" Q    ;no appointment found
"RTN","SDCCRGAP",50,0)
 ;
"RTN","SDCCRGAP",51,0)
 ; Get clinic
"RTN","SDCCRGAP",52,0)
 S CLINIC=$P(SNODE0,DELIM,1)
"RTN","SDCCRGAP",53,0)
 S CLNODE0=$$CLINNODE(PATIEN,APPTDT,CLINIC,0)
"RTN","SDCCRGAP",54,0)
 S CLNODEC=$$CLINNODE(PATIEN,APPTDT,CLINIC,"C")
"RTN","SDCCRGAP",55,0)
 S CLNODECN=$$CLINNODE(PATIEN,APPTDT,CLINIC,"CONS")
"RTN","SDCCRGAP",56,0)
 ;
"RTN","SDCCRGAP",57,0)
 ; Get providers off of clinic
"RTN","SDCCRGAP",58,0)
 I $G(CLINIC)'="" D CLINPROV(CLINIC,.PROVARY)
"RTN","SDCCRGAP",59,0)
 ;
"RTN","SDCCRGAP",60,0)
 ; Build Array of patient information from the known nodes
"RTN","SDCCRGAP",61,0)
 S APPTARY("PATIENT IEN")=PATIEN  ;IEN
"RTN","SDCCRGAP",62,0)
 S APPTARY("APPTDT")=APPTDT   ;date/time of the appointment in VistA format
"RTN","SDCCRGAP",63,0)
 S APPTARY("APPTTYPE")=$P(SNODE0,DELIM,16)  ;appointment type
"RTN","SDCCRGAP",64,0)
 S APPTARY("CLINIC")=$G(CLINIC)    ;the clinic of this appointment  ;
"RTN","SDCCRGAP",65,0)
 I $G(CLNODE0)="" S APPTARY("CLINIC PURGED")=1
"RTN","SDCCRGAP",66,0)
 I $D(PROVARY) M APPTARY("CLINIC PROVIDER")=PROVARY
"RTN","SDCCRGAP",67,0)
 S APPTARY("CLINIC NAME")=$$GET1^DIQ(44,$G(CLINIC),.01)
"RTN","SDCCRGAP",68,0)
 S APPTARY("CLINIC GROUP")=$$CLINGRP($G(CLINIC))
"RTN","SDCCRGAP",69,0)
 S APPTARY("CLINIC GROUP NAME")=$$GET1^DIQ(409.67,$G(APPTARY("CLINIC GROUP")),.01)
"RTN","SDCCRGAP",70,0)
 S APPTARY("CHECKIN DT")=$P($G(CLNODEC),DELIM,1)
"RTN","SDCCRGAP",71,0)
 S APPTARY("CHECKIN USER")=$P($G(CLNODEC),DELIM,2)
"RTN","SDCCRGAP",72,0)
 S APPTARY("CHECKOUT DT")=$P($G(CLNODEC),DELIM,3)
"RTN","SDCCRGAP",73,0)
 S APPTARY("CHECKOUT USER")=$P($G(CLNODEC),DELIM,4)
"RTN","SDCCRGAP",74,0)
 S APPTARY("COMMENT")=$P(CLNODE0,DELIM,4)
"RTN","SDCCRGAP",75,0)
 S APPTARY("CONSULT")=$$CLINNODE(PATIEN,APPTDT,CLINIC,"CONS")   ;consult ID
"RTN","SDCCRGAP",76,0)
 S APPTARY("COV")=$P(SNODE0,DELIM,7)    ;The COV if c&P/Scheduled/or walked in
"RTN","SDCCRGAP",77,0)
 S APPTARY("DURATION")=$P(CLNODE0,DELIM,2)
"RTN","SDCCRGAP",78,0)
 s APPTARY("ELIGIBILITY")=$P(CLNODE0,DELIM,10)
"RTN","SDCCRGAP",79,0)
 S APPTARY("PAT INDICATED DATE")=$$APTNODEP(PATIEN,APPTDT,1,1)
"RTN","SDCCRGAP",80,0)
 ; APPT status - Computed and translated
"RTN","SDCCRGAP",81,0)
 S APPTARY("STATUS")=$$APTSTAT(PATIEN,APPTDT,0)
"RTN","SDCCRGAP",82,0)
 S APPTARY("STATUS PIECE")=$P(SNODE0,DELIM,2)      ;Status from the status node
"RTN","SDCCRGAP",83,0)
 S APPTARY("USER")=$P(SNODE0,DELIM,18)      ;Scheduling user
"RTN","SDCCRGAP",84,0)
 S APPTARY("CANCEL REASON")=$P(SNODE0,DELIM,15)
"RTN","SDCCRGAP",85,0)
 S APPTARY("CANCEL REMARK")=$$APTNODEP(PATIEN,APPTDT,"R",1)
"RTN","SDCCRGAP",86,0)
 S APPTARY("ENCOUNTER IEN")=$P(SNODE0,DELIM,20)
"RTN","SDCCRGAP",87,0)
 Q
"RTN","SDCCRGAP",88,0)
APPTNODE(PATIEN,APPTDT,NODE) ;For a given patient we will return their appointment node in the ^DPT file.
"RTN","SDCCRGAP",89,0)
 ;   PATIEN(I,REQ) - The patient IEN
"RTN","SDCCRGAP",90,0)
 ;   APPTDT(I,REQ)  - the appointment date/time in vista format. Found in the ^DPT(<IEN>,"S",<APPTDT> node.
"RTN","SDCCRGAP",91,0)
 ;   NODE(I,REQ)  - node number to pull
"RTN","SDCCRGAP",92,0)
 ;
"RTN","SDCCRGAP",93,0)
 I ($G(APPTDT)="")!($G(PATIEN)="")!($G(NODE)="") Q
"RTN","SDCCRGAP",94,0)
 Q $G(^DPT(PATIEN,"S",APPTDT,NODE))
"RTN","SDCCRGAP",95,0)
APTNODEP(PATIEN,APPTDT,NODE,PIECE) ;For a given patient we will return a piece of their appointment node in the ^DPT file.
"RTN","SDCCRGAP",96,0)
 ;   PATIEN(I,REQ) - The patient IEN
"RTN","SDCCRGAP",97,0)
 ;   APPTDT(I,REQ)  - the appointment date/time in vista format. Found in the ^DPT(<IEN>,"S",<APPTDT> node.
"RTN","SDCCRGAP",98,0)
 ;   NODE(I,REQ)  - node number to pull
"RTN","SDCCRGAP",99,0)
 ;   PIECE(I,REQ)  - piece in the node to return
"RTN","SDCCRGAP",100,0)
 ;   DATA(I,OPT) - data node may be passed in to bypass extracting.
"RTN","SDCCRGAP",101,0)
 N DATA
"RTN","SDCCRGAP",102,0)
 S DATA=$$APPTNODE($G(PATIEN),$G(APPTDT),$G(NODE))
"RTN","SDCCRGAP",103,0)
 Q $P($G(DATA),"^",$G(PIECE))
"RTN","SDCCRGAP",104,0)
CLINNODE(PATIEN,APPTDT,CLINICIEN,NODE,COUNT) ;For a given patient we will find their clinic node in the ^SC file.
"RTN","SDCCRGAP",105,0)
 ;   May need to loop through the overbooks on that time.
"RTN","SDCCRGAP",106,0)
 ;   PATIEN(I,REQ) - The patient IEN
"RTN","SDCCRGAP",107,0)
 ;   APPTDT(I,REQ)  - the appointment date/time in vista format. Found in the ^DPT(<IEN>,"S",<APPTDT> node.
"RTN","SDCCRGAP",108,0)
 ;   CLINICIEN(I,REQ)  - clinic record IEN to search through
"RTN","SDCCRGAP",109,0)
 ;   NODE(I,REQ) - last node for the clinic. 0 node has appointment info. "C" node has check in/out info.
"RTN","SDCCRGAP",110,0)
 ;   COUNT(O,OPT) - subscript # of appointment
"RTN","SDCCRGAP",111,0)
 N RET
"RTN","SDCCRGAP",112,0)
 ; Loop through the possibly multiple appointments scheduled into this clinic slot
"RTN","SDCCRGAP",113,0)
 S COUNT=$$FIND^SDAM2($G(PATIEN),$G(APPTDT),$G(CLINICIEN))
"RTN","SDCCRGAP",114,0)
 I $G(COUNT)'="" S RET=$G(^SC($G(CLINICIEN),"S",$G(APPTDT),1,COUNT,$G(NODE)))    ;Get the node from the SC global
"RTN","SDCCRGAP",115,0)
 Q $G(RET)
"RTN","SDCCRGAP",116,0)
CLINPROV(CLINIC,ARRAY) ;Sets an array filled with clinic provider data
"RTN","SDCCRGAP",117,0)
 ;  CLINIC (I,REQ) - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRGAP",118,0)
 ;  ARRAY  (O,REQ) - APPTARY("CLINIC PROVIDER",0) - number of providers on the clinic
"RTN","SDCCRGAP",119,0)
 ;                   APPTARY("CLINIC PROVIDER",N,"IEN") - Provider IEN
"RTN","SDCCRGAP",120,0)
 ;                   APPTARY("CLINIC PROVIDER",N,"NAME") - Name of provider
"RTN","SDCCRGAP",121,0)
 N NUM
"RTN","SDCCRGAP",122,0)
 K ARRAY
"RTN","SDCCRGAP",123,0)
 I $G(CLINIC)="" Q
"RTN","SDCCRGAP",124,0)
 S NUM=0
"RTN","SDCCRGAP",125,0)
 S ARRAY(0)=0
"RTN","SDCCRGAP",126,0)
 F  S NUM=$O(^SC(CLINIC,"PR",NUM)) Q:'NUM  D
"RTN","SDCCRGAP",127,0)
 . S ARRAY(NUM,"IEN")=$$PROVIEN(CLINIC,NUM) ;-Provider IEN  File 200
"RTN","SDCCRGAP",128,0)
 . I ARRAY(NUM,"IEN")="" Q
"RTN","SDCCRGAP",129,0)
 . S ARRAY(NUM,"NAME")=$$GET1^DIQ(200,(ARRAY(NUM,"IEN")),.01) ;- Name of provider File 200
"RTN","SDCCRGAP",130,0)
 . S ARRAY(0)=ARRAY(0)+1
"RTN","SDCCRGAP",131,0)
 Q
"RTN","SDCCRGAP",132,0)
PROVIEN(CLINIC,NODE) ;Returns the Nth provider ID for a Clinic
"RTN","SDCCRGAP",133,0)
 ;  CLINIC (I,REQ) - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRGAP",134,0)
 ;  NODE (I,REQ)      - The count of the node being examined
"RTN","SDCCRGAP",135,0)
 Q $P(^SC($G(CLINIC),"PR",$G(NODE),0),"^",1)
"RTN","SDCCRGAP",136,0)
CLINGRP(CLINIC) ;Returns the ID of a Clinic's group
"RTN","SDCCRGAP",137,0)
 ;  CLINIC (I,REQ) - The Clinic IEN (first piece of DPT 0 node)
"RTN","SDCCRGAP",138,0)
 Q $P(^SC($G(CLINIC),0),"^",31)
"RTN","SDCCRGAP",139,0)
 ;---------
"RTN","SDCCRGAP",140,0)
 ; DESCRIPTION:
"RTN","SDCCRGAP",141,0)
 ; PARAMETERS:
"RTN","SDCCRGAP",142,0)
 ;
"RTN","SDCCRGAP",143,0)
 ;
"RTN","SDCCRGAP",144,0)
 ;---------
"RTN","SDCCRGAP",145,0)
APTSTAT(PATIEN,APPTDT,FULLSTAT) ;Returns current computed appointment status which
"RTN","SDCCRGAP",146,0)
 ;  includes checked in/out which the "S"0;2 node does not.
"RTN","SDCCRGAP",147,0)
 ;   PATIEN (I,REQ)- Patient ID as in DPT(PATIEN,"S",APPTDAT
"RTN","SDCCRGAP",148,0)
 ;   APPTDT (I,REQ) - Appointment date
"RTN","SDCCRGAP",149,0)
 ;   FULLSTAT (I,OPT,DEFAULT:"") - Set to 1 return full STATUS string
"RTN","SDCCRGAP",150,0)
 ; OUTPUT: Appointment current Status values:
"RTN","SDCCRGAP",151,0)
 ;               SCHEDULED (Default)
"RTN","SDCCRGAP",152,0)
 ;               CHECKED IN
"RTN","SDCCRGAP",153,0)
 ;               CHECKED OUT
"RTN","SDCCRGAP",154,0)
 ;               CANCELLED
"RTN","SDCCRGAP",155,0)
 ;               NO-SHOW
"RTN","SDCCRGAP",156,0)
 ;               "" if the appointment does not exist.\
"RTN","SDCCRGAP",157,0)
 ;
"RTN","SDCCRGAP",158,0)
 N RET,DPT0,CLINICID
"RTN","SDCCRGAP",159,0)
 I $G(PATIEN)="" Q ""
"RTN","SDCCRGAP",160,0)
 I $G(APPTDT)="" Q ""
"RTN","SDCCRGAP",161,0)
 ;
"RTN","SDCCRGAP",162,0)
 ;
"RTN","SDCCRGAP",163,0)
 S DPT0=$$APPTNODE(PATIEN,APPTDT,0)
"RTN","SDCCRGAP",164,0)
 I $G(DPT0)="" Q ""
"RTN","SDCCRGAP",165,0)
 ;
"RTN","SDCCRGAP",166,0)
 ;CLINIC ID IS FIRST PART OF DPT "S" 0 NODE
"RTN","SDCCRGAP",167,0)
 S CLINICID=+$G(DPT0)
"RTN","SDCCRGAP",168,0)
 I $G(CLINICID)="" Q ""
"RTN","SDCCRGAP",169,0)
 ;
"RTN","SDCCRGAP",170,0)
 S RET=$$STATUS^SDAM1(PATIEN,APPTDT,CLINICID,DPT0)
"RTN","SDCCRGAP",171,0)
 I '$G(FULLSTAT) D
"RTN","SDCCRGAP",172,0)
 . S RET=$P(RET,";",3)     ;PRINT STATUS- NOTE THAT THESE HAVE THE POSSIBILITY OF RETURNING MULTIPLE STATUSES
"RTN","SDCCRGAP",173,0)
 . S RET=$S(RET["CANCELLED":"CANCELLED",RET["NO-SHOW":"NO SHOW",RET["CHECKED OUT":"CHECKED OUT",RET["CHECKED IN":"CHECKED IN",1:"SCHEDULED")
"RTN","SDCCRGAP",174,0)
 Q RET
"RTN","SDCCRGAP",175,0)
 ;
"RTN","SDCCRSCU")
0^10^B91336223^n/a
"RTN","SDCCRSCU",1,0)
SDCCRSCU ;CCRA/LB,PB - Appointment Message Parsing Utilities;APR 4, 2019
"RTN","SDCCRSCU",2,0)
 ;;5.3;Scheduling;**707**;APR 4, 2019;Build 57
"RTN","SDCCRSCU",3,0)
 ;;Per VA directive 6402, this routine should not be modified.
"RTN","SDCCRSCU",4,0)
 Q
"RTN","SDCCRSCU",5,0)
PARSE(FIELD,REP,COMP,SUBCOMP,ESCAPE,SEG,TO) ;
"RTN","SDCCRSCU",6,0)
 ;Parses the segment stored in SEG(1),SEG(2),... into TO()
"RTN","SDCCRSCU",7,0)
 ;Input:
"RTN","SDCCRSCU",8,0)
 ;  FIELD - field separator
"RTN","SDCCRSCU",9,0)
 ;  REP - field repetition separator
"RTN","SDCCRSCU",10,0)
 ;  COMP - component separator
"RTN","SDCCRSCU",11,0)
 ;  SUBCOMP - subcomponent separator
"RTN","SDCCRSCU",12,0)
 ;  ESCAPE - escape character
"RTN","SDCCRSCU",13,0)
 ;  SEG - (pass by reference) the array holding the unparsed segment.
"RTN","SDCCRSCU",14,0)
 ;Output:
"RTN","SDCCRSCU",15,0)
 ;  Function returns 1 on success, 0 on failure
"RTN","SDCCRSCU",16,0)
 ;  TO - (pass by reference) - the parsed values
"RTN","SDCCRSCU",17,0)
 ;  SEG- This input variable is deleted during the processing.  If it is needs to be retained, pass in a copy!
"RTN","SDCCRSCU",18,0)
 ;
"RTN","SDCCRSCU",19,0)
 N VALUE,CHAR,COUNTS
"RTN","SDCCRSCU",20,0)
 K TO
"RTN","SDCCRSCU",21,0)
 Q:$L($G(FIELD))'=1 0
"RTN","SDCCRSCU",22,0)
 Q:$L($G(REP))'=1 0
"RTN","SDCCRSCU",23,0)
 Q:$L($G(COMP))'=1 0
"RTN","SDCCRSCU",24,0)
 Q:'$D(SUBCOMP) 0
"RTN","SDCCRSCU",25,0)
 Q:'$D(SEG) 0
"RTN","SDCCRSCU",26,0)
 S COUNTS("FIELD")=0
"RTN","SDCCRSCU",27,0)
 S COUNTS("REP")=1
"RTN","SDCCRSCU",28,0)
 S COUNTS("COMP")=1
"RTN","SDCCRSCU",29,0)
 S COUNTS("SUBCOMP")=1
"RTN","SDCCRSCU",30,0)
 S VALUE=""
"RTN","SDCCRSCU",31,0)
 S SEG("LINE")=$O(SEG(0)),SEG("CHAR")=0
"RTN","SDCCRSCU",32,0)
 F  S CHAR=$$NEXTCHAR(.SEG) D  Q:'$L(CHAR)
"RTN","SDCCRSCU",33,0)
 .I '$L(CHAR) D  Q
"RTN","SDCCRSCU",34,0)
 ..I $L(VALUE) S TO(COUNTS("FIELD"),COUNTS("REP"),COUNTS("COMP"),COUNTS("SUBCOMP"))=VALUE
"RTN","SDCCRSCU",35,0)
 .E  I CHAR=FIELD D  Q
"RTN","SDCCRSCU",36,0)
 ..I $L(VALUE) S TO(COUNTS("FIELD"),COUNTS("REP"),COUNTS("COMP"),COUNTS("SUBCOMP"))=$$DESCAPE(VALUE,.FIELD,.COMP,.SUBCOMP,.REP,.ESCAPE),VALUE=""
"RTN","SDCCRSCU",37,0)
 ..S COUNTS("FIELD")=COUNTS("FIELD")+1,COUNTS("REP")=1,COUNTS("COMP")=1,COUNTS("SUBCOMP")=1
"RTN","SDCCRSCU",38,0)
 .E  I CHAR=REP D  Q
"RTN","SDCCRSCU",39,0)
 ..I $L(VALUE) S TO(COUNTS("FIELD"),COUNTS("REP"),COUNTS("COMP"),COUNTS("SUBCOMP"))=$$DESCAPE(VALUE,.FIELD,.COMP,.SUBCOMP,.REP,.ESCAPE),VALUE=""
"RTN","SDCCRSCU",40,0)
 ..S COUNTS("REP")=COUNTS("REP")+1,COUNTS("COMP")=1,COUNTS("SUBCOMP")=1
"RTN","SDCCRSCU",41,0)
 .E  I CHAR=COMP D  Q
"RTN","SDCCRSCU",42,0)
 ..I $L(VALUE) S TO(COUNTS("FIELD"),COUNTS("REP"),COUNTS("COMP"),COUNTS("SUBCOMP"))=$$DESCAPE(VALUE,.FIELD,.COMP,.SUBCOMP,.REP,.ESCAPE),VALUE=""
"RTN","SDCCRSCU",43,0)
 ..S COUNTS("COMP")=COUNTS("COMP")+1,COUNTS("SUBCOMP")=1
"RTN","SDCCRSCU",44,0)
 .E  I CHAR=SUBCOMP D  Q
"RTN","SDCCRSCU",45,0)
 ..I $L(VALUE) S TO(COUNTS("FIELD"),COUNTS("REP"),COUNTS("COMP"),COUNTS("SUBCOMP"))=$$DESCAPE(VALUE,.FIELD,.COMP,.SUBCOMP,.REP,.ESCAPE),VALUE=""
"RTN","SDCCRSCU",46,0)
 ..S COUNTS("SUBCOMP")=COUNTS("SUBCOMP")+1
"RTN","SDCCRSCU",47,0)
 .E  S VALUE=VALUE_CHAR
"RTN","SDCCRSCU",48,0)
 S TO("SEGMENT TYPE")=$G(TO(0,1,1,1)),TO(0)=TO("SEGMENT TYPE")
"RTN","SDCCRSCU",49,0)
 I (TO("SEGMENT TYPE")="BHS")!(TO("SEGMENT TYPE")="MSH") S TO("FIELD SEPARATOR")=FIELD
"RTN","SDCCRSCU",50,0)
 Q 1
"RTN","SDCCRSCU",51,0)
 ;
"RTN","SDCCRSCU",52,0)
NEXTCHAR(SEG) ;
"RTN","SDCCRSCU",53,0)
 ;returns the next character in the segment array
"RTN","SDCCRSCU",54,0)
 ;
"RTN","SDCCRSCU",55,0)
 Q:'SEG("LINE") ""
"RTN","SDCCRSCU",56,0)
 N RET
"RTN","SDCCRSCU",57,0)
 S SEG("CHAR")=SEG("CHAR")+1
"RTN","SDCCRSCU",58,0)
 S RET=$E(SEG(SEG("LINE")),SEG("CHAR"))
"RTN","SDCCRSCU",59,0)
 Q:RET]"" RET
"RTN","SDCCRSCU",60,0)
 S SEG("LINE")=$O(SEG(SEG("LINE")))
"RTN","SDCCRSCU",61,0)
 I SEG("LINE") S SEG("CHAR")=1 Q $E(SEG(SEG("LINE")))
"RTN","SDCCRSCU",62,0)
 Q ""
"RTN","SDCCRSCU",63,0)
 ;
"RTN","SDCCRSCU",64,0)
DESCAPE(VALUE,FIELD,COMP,SUBCOMP,REP,ESCAPE) ;
"RTN","SDCCRSCU",65,0)
 ;Replaces the escape sequences with the corresponding encoding character and returns the result as the function value
"RTN","SDCCRSCU",66,0)
 ;
"RTN","SDCCRSCU",67,0)
 Q:ESCAPE="" VALUE
"RTN","SDCCRSCU",68,0)
 N NEWSTRNG,SUBSTRNG,SET,LEN,I,SUBLEN,CHAR
"RTN","SDCCRSCU",69,0)
 S (NEWSTRNG,SUBSTRNG,SUBLEN)=""
"RTN","SDCCRSCU",70,0)
 S SET="FSTRE"
"RTN","SDCCRSCU",71,0)
 S LEN=$L(VALUE)
"RTN","SDCCRSCU",72,0)
 F I=1:1:LEN S SUBSTRNG=SUBSTRNG_$E(VALUE,I),SUBLEN=SUBLEN+1 D:SUBLEN=3
"RTN","SDCCRSCU",73,0)
 .S CHAR=$E(SUBSTRNG,2)
"RTN","SDCCRSCU",74,0)
 .I $E(SUBSTRNG,1)=ESCAPE,$E(SUBSTRNG,3)=ESCAPE,SET[CHAR D
"RTN","SDCCRSCU",75,0)
 ..I CHAR="F" S NEWSTRNG=NEWSTRNG_FIELD,SUBSTRNG="",SUBLEN=0 Q
"RTN","SDCCRSCU",76,0)
 ..I CHAR="S" S NEWSTRNG=NEWSTRNG_COMP,SUBSTRNG="",SUBLEN=0 Q
"RTN","SDCCRSCU",77,0)
 ..I CHAR="T" S NEWSTRNG=NEWSTRNG_SUBCOMP,SUBSTRNG="",SUBLEN=0 Q
"RTN","SDCCRSCU",78,0)
 ..I CHAR="R" S NEWSTRNG=NEWSTRNG_REP,SUBSTRNG="",SUBLEN=0 Q
"RTN","SDCCRSCU",79,0)
 ..I CHAR="E" S NEWSTRNG=NEWSTRNG_ESCAPE,SUBSTRNG="",SUBLEN=0 Q
"RTN","SDCCRSCU",80,0)
 .E  S NEWSTRNG=NEWSTRNG_$E(SUBSTRNG),SUBSTRNG=$E(SUBSTRNG,2,3),SUBLEN=2
"RTN","SDCCRSCU",81,0)
 Q NEWSTRNG_SUBSTRNG
"RTN","SDCCRSCU",82,0)
 ;
"RTN","SDCCRSCU",83,0)
GETCODE(SEG,VALUE,FIELD,COMP,REP) ;
"RTN","SDCCRSCU",84,0)
 ;Implements GETCNE and GETCWE
"RTN","SDCCRSCU",85,0)
 ;
"RTN","SDCCRSCU",86,0)
 N SUB,VAR
"RTN","SDCCRSCU",87,0)
 Q:'$G(FIELD)
"RTN","SDCCRSCU",88,0)
 I '$G(COMP) D
"RTN","SDCCRSCU",89,0)
 .S VAR="COMP",SUB=1
"RTN","SDCCRSCU",90,0)
 E  D
"RTN","SDCCRSCU",91,0)
 .S VAR="SUB"
"RTN","SDCCRSCU",92,0)
 S:'$G(REP) REP=1
"RTN","SDCCRSCU",93,0)
 S @VAR=1,VALUE("ID")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",94,0)
 S @VAR=2,VALUE("TEXT")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",95,0)
 S @VAR=3,VALUE("SYSTEM")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",96,0)
 S @VAR=4,VALUE("ALTERNATE ID")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",97,0)
 S @VAR=5,VALUE("ALTERNATE TEXT")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",98,0)
 S @VAR=6,VALUE("ALTERNATE SYSTEM")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",99,0)
 S @VAR=7,VALUE("SYSTEM VERSION")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",100,0)
 S @VAR=8,VALUE("ALTERNATE SYSTEM VERSION")=$$GET(.SEG,FIELD,COMP)
"RTN","SDCCRSCU",101,0)
 S @VAR=9,VALUE("ORIGINAL TEXT")=$$GET(.SEG,FIELD,COMP,SUB,REP)
"RTN","SDCCRSCU",102,0)
 Q
"RTN","SDCCRSCU",103,0)
 ;
"RTN","SDCCRSCU",104,0)
GET(SEG,FIELD,COMP,SUBCOMP,REP) ;
"RTN","SDCCRSCU",105,0)
 ;This function gets a specified value from a segment that was parsed by
"RTN","SDCCRSCU",106,0)
 ;$$NEXTSEG. The FIELD,COMP,SUBCOMP,REP parameters are optional - if not
"RTN","SDCCRSCU",107,0)
 ;specified, they default to 1.
"RTN","SDCCRSCU",108,0)
 ;  Example:
"RTN","SDCCRSCU",109,0)
 ;    $$GET(.SEG,1) will return the value of the first field, first
"RTN","SDCCRSCU",110,0)
 ;  component, first subcomponent, in the first occurrence of field #1.  
"RTN","SDCCRSCU",111,0)
 ;Input:
"RTN","SDCCRSCU",112,0)
 ;SEG - (required, pass by reference) - this is the array where the parsed segment was placed by $$NEXTSEG
"RTN","SDCCRSCU",113,0)
 ;FIELD - the sequence # of the field (optional, defaults to 1)
"RTN","SDCCRSCU",114,0)
 ;COMP - the # of the component (optional, defaults to 1)
"RTN","SDCCRSCU",115,0)
 ;SUBCOMP - the # of the subcomponent (optional, defaults to 1)
"RTN","SDCCRSCU",116,0)
 ;REP - the occurrence# (optional, defaults to 1)  For a non-repeating field, the occurrence # need not be provided, because it would be 1.
"RTN","SDCCRSCU",117,0)
 ;Output:
"RTN","SDCCRSCU",118,0)
 ;  Function returns the requested value on success, "" if not valued.
"RTN","SDCCRSCU",119,0)
 ;
"RTN","SDCCRSCU",120,0)
 ;allow the segment type to be obtained via field #0 (shorthand)
"RTN","SDCCRSCU",121,0)
 I $D(FIELD),$G(FIELD)=0 Q $G(SEG("SEGMENT TYPE"))
"RTN","SDCCRSCU",122,0)
 S:'$G(FIELD) FIELD=1
"RTN","SDCCRSCU",123,0)
 ;
"RTN","SDCCRSCU",124,0)
 ;for MSH or BHS, SEQ#1 is the  field separator
"RTN","SDCCRSCU",125,0)
 I FIELD=1,$G(SEG("SEGMENT TYPE"))="MSH"!($G(SEG("SEGMENT TYPE"))="BHS"),$G(REP)<2,$G(COMP)<2,$G(SUBCOMP)<2 Q SEG("FIELD SEPARATOR")
"RTN","SDCCRSCU",126,0)
 I FIELD=1,$G(SEG("SEGMENT TYPE"))="MSH"!($G(SEG("SEGMENT TYPE"))="BHS") Q ""
"RTN","SDCCRSCU",127,0)
 ;
"RTN","SDCCRSCU",128,0)
 S:'$G(COMP) COMP=1
"RTN","SDCCRSCU",129,0)
 S:'$G(SUBCOMP) SUBCOMP=1
"RTN","SDCCRSCU",130,0)
 S:'$G(REP) REP=1
"RTN","SDCCRSCU",131,0)
 Q $G(SEG(FIELD,REP,COMP,SUBCOMP))
"RTN","SDCCRSCU",132,0)
 ;
"RTN","SDCCRSCU",133,0)
PARSEHDR(HDR) ;
"RTN","SDCCRSCU",134,0)
 ;Parses the segment (HDR, pass by reference) into the HDR() array using meaningful subscripts.
"RTN","SDCCRSCU",135,0)
 ;Input:
"RTN","SDCCRSCU",136,0)
 ;  HDR (pass by reference, required) contains the segment in the format HDR(1),HDR(2), etc..
"RTN","SDCCRSCU",137,0)
 ;Output:
"RTN","SDCCRSCU",138,0)
 ;  HDR (pass by reference, required) This array will contain all the individual values.  Also will contain HDR(1) with components 1-6 and HDR(2) with components 1-end
"RTN","SDCCRSCU",139,0)
 ;  Function - returns 1 if the segment is indeed an MSH or BHS segment, 0 otherwise
"RTN","SDCCRSCU",140,0)
 ;
"RTN","SDCCRSCU",141,0)
ZB25 ;
"RTN","SDCCRSCU",142,0)
 N VALUE,FS,CS,REP,SUBCOMP,ESCAPE
"RTN","SDCCRSCU",143,0)
 S VALUE=$E(HDR(1),1,3)
"RTN","SDCCRSCU",144,0)
 I VALUE'="MSH",VALUE'="BHS" Q 0
"RTN","SDCCRSCU",145,0)
 S HDR("SEGMENT TYPE")=VALUE
"RTN","SDCCRSCU",146,0)
 S FS=$E(HDR(1),4)
"RTN","SDCCRSCU",147,0)
 Q:FS="" 0
"RTN","SDCCRSCU",148,0)
 S HDR("ENCODING CHARACTERS")=$P(HDR(1),FS,2)
"RTN","SDCCRSCU",149,0)
 S CS=$E(HDR("ENCODING CHARACTERS"),1)
"RTN","SDCCRSCU",150,0)
 S REP=$E(HDR("ENCODING CHARACTERS"),2)
"RTN","SDCCRSCU",151,0)
 S ESCAPE=$E(HDR("ENCODING CHARACTERS"),3)
"RTN","SDCCRSCU",152,0)
 S SUBCOMP=$E(HDR("ENCODING CHARACTERS"),4)
"RTN","SDCCRSCU",153,0)
 Q:REP="" 0
"RTN","SDCCRSCU",154,0)
 S HDR("FIELD SEPARATOR")=FS
"RTN","SDCCRSCU",155,0)
 S HDR("COMPONENT SEPARATOR")=CS
"RTN","SDCCRSCU",156,0)
 S HDR("REPETITION SEPARATOR")=REP
"RTN","SDCCRSCU",157,0)
 S HDR("ESCAPE CHARACTER")=ESCAPE
"RTN","SDCCRSCU",158,0)
 S HDR("SUBCOMPONENT SEPARATOR")=SUBCOMP
"RTN","SDCCRSCU",159,0)
 S HDR("SENDING APPLICATION")=$$DESCAPE($P($P(HDR(1),FS,3),CS))
"RTN","SDCCRSCU",160,0)
 S VALUE=$P(HDR(1),FS,4)
"RTN","SDCCRSCU",161,0)
 S HDR("SENDING FACILITY",1)=$$DESCAPE($P(VALUE,CS))
"RTN","SDCCRSCU",162,0)
 S HDR("SENDING FACILITY",2)=$$DESCAPE($P(VALUE,CS,2))
"RTN","SDCCRSCU",163,0)
 S HDR("SENDING FACILITY",3)=$$DESCAPE($P(VALUE,CS,3))
"RTN","SDCCRSCU",164,0)
 S HDR("RECEIVING APPLICATION")=$$DESCAPE($P($P(HDR(1),FS,5),CS))
"RTN","SDCCRSCU",165,0)
 S VALUE=$P(HDR(1),FS,6)
"RTN","SDCCRSCU",166,0)
 S HDR("RECEIVING FACILITY",1)=$$DESCAPE($P(VALUE,CS))
"RTN","SDCCRSCU",167,0)
 S HDR("RECEIVING FACILITY",2)=$$DESCAPE($P(VALUE,CS,2))
"RTN","SDCCRSCU",168,0)
 S HDR("RECEIVING FACILITY",3)=$$DESCAPE($P(VALUE,CS,3))
"RTN","SDCCRSCU",169,0)
 S HDR("DT/TM OF MESSAGE")=$$FMDATE^HLFNC($$DESCAPE($P($P(HDR(2),FS,2),CS)))
"RTN","SDCCRSCU",170,0)
 S HDR("SECURITY")=$$DESCAPE($P($P(HDR(2),FS,3),CS))
"RTN","SDCCRSCU",171,0)
 ;
"RTN","SDCCRSCU",172,0)
 I HDR("SEGMENT TYPE")="MSH" D
"RTN","SDCCRSCU",173,0)
 .S VALUE=$P(HDR(2),FS,4)
"RTN","SDCCRSCU",174,0)
 .S HDR("MESSAGE TYPE")=$P(VALUE,CS)
"RTN","SDCCRSCU",175,0)
 .S HDR("EVENT")=$P(VALUE,CS,2)
"RTN","SDCCRSCU",176,0)
 .S HDR("MESSAGE STRUCTURE")=$$DESCAPE($P(VALUE,CS,3))
"RTN","SDCCRSCU",177,0)
 .S HDR("MESSAGE CONTROL ID")=$$DESCAPE($P($P(HDR(2),FS,5),CS))
"RTN","SDCCRSCU",178,0)
 .S VALUE=$P(HDR(2),FS,6)
"RTN","SDCCRSCU",179,0)
 .S HDR("PROCESSING ID")=$P(VALUE,CS)
"RTN","SDCCRSCU",180,0)
 .S HDR("PROCESSING MODE")=$$DESCAPE($P(VALUE,CS,2))
"RTN","SDCCRSCU",181,0)
 .S HDR("VERSION")=$$DESCAPE($P($P(HDR(2),FS,7),CS))
"RTN","SDCCRSCU",182,0)
 .S HDR("CONTINUATION POINTER")=$$DESCAPE($P($P(HDR(2),FS,9),CS))
"RTN","SDCCRSCU",183,0)
 .S HDR("ACCEPT ACK TYPE")=$P($P(HDR(2),FS,10),CS)
"RTN","SDCCRSCU",184,0)
 .S HDR("APP ACK TYPE")=$P($P(HDR(2),FS,11),CS)
"RTN","SDCCRSCU",185,0)
 .S HDR("COUNTRY")=$$DESCAPE($P($P(HDR(2),FS,12),CS))
"RTN","SDCCRSCU",186,0)
 ;
"RTN","SDCCRSCU",187,0)
 I HDR("SEGMENT TYPE")="BHS" D
"RTN","SDCCRSCU",188,0)
 .S VALUE=$P(HDR(2),FS,4)
"RTN","SDCCRSCU",189,0)
 .S HDR("BATCH NAME/ID/TYPE")=$$DESCAPE(VALUE)
"RTN","SDCCRSCU",190,0)
 .S HDR("PROCESSING ID")=$E($P(VALUE,"PROCESSING ID=",2),1)
"RTN","SDCCRSCU",191,0)
 .S HDR("ACCEPT ACK TYPE")=$E($P(VALUE,"ACCEPT ACK TYPE=",2),1,2)
"RTN","SDCCRSCU",192,0)
 .S HDR("APP ACK TYPE")=$E($P(VALUE,"APP ACK TYPE=",2),1,2)
"RTN","SDCCRSCU",193,0)
 .S HDR("BATCH COMMENT")=$$DESCAPE($P(HDR(2),FS,5))
"RTN","SDCCRSCU",194,0)
 .S HDR("BATCH CONTROL ID")=$$DESCAPE($P($P(HDR(2),FS,6),CS))
"RTN","SDCCRSCU",195,0)
 .S HDR("REFERENCE BATCH CONTROL ID")=$$DESCAPE($P($P(HDR(2),FS,7),CS))
"RTN","SDCCRSCU",196,0)
 .;
"RTN","SDCCRSCU",197,0)
ZB26 ;
"RTN","SDCCRSCU",198,0)
 Q 1
"RTN","SDCCRSCU",199,0)
 ;
"RTN","SDCCRSCU",200,0)
PARSESEG(SEG,DATA,HL) ;Generic segment parser
"RTN","SDCCRSCU",201,0)
 ;This procedure parses a single HL7 segment and builds an array
"RTN","SDCCRSCU",202,0)
 ;subscripted by the field number containing the data for that field.
"RTN","SDCCRSCU",203,0)
 ; Does not handle segments that span nodes
"RTN","SDCCRSCU",204,0)
 ;
"RTN","SDCCRSCU",205,0)
 ;  Input:
"RTN","SDCCRSCU",206,0)
 ;     SEG - HL7 segment to parse
"RTN","SDCCRSCU",207,0)
 ;      HL - HL7 environment array
"RTN","SDCCRSCU",208,0)
 ;
"RTN","SDCCRSCU",209,0)
 ;  Output:
"RTN","SDCCRSCU",210,0)
 ;    Function value - field data array [SUB1:field, SUB2:repetition,
"RTN","SDCCRSCU",211,0)
 ;                                SUB3:component, SUB4:sub-component]
"RTN","SDCCRSCU",212,0)
 ;
"RTN","SDCCRSCU",213,0)
 N CMP     ;component subscript
"RTN","SDCCRSCU",214,0)
 N CMPVAL  ;component value
"RTN","SDCCRSCU",215,0)
 N FLD     ;field subscript
"RTN","SDCCRSCU",216,0)
 N FLDVAL  ;field value
"RTN","SDCCRSCU",217,0)
 N REP     ;repetition subscript
"RTN","SDCCRSCU",218,0)
 N REPVAL  ;repetition value
"RTN","SDCCRSCU",219,0)
 N SUB     ;sub-component subscript
"RTN","SDCCRSCU",220,0)
 N SUBVAL  ;sub-component value
"RTN","SDCCRSCU",221,0)
 N FS      ;field separator
"RTN","SDCCRSCU",222,0)
 N CS      ;component separator
"RTN","SDCCRSCU",223,0)
 N RS      ;repetition separator
"RTN","SDCCRSCU",224,0)
 N SS      ;sub-component separator
"RTN","SDCCRSCU",225,0)
 N ES      ;escape character
"RTN","SDCCRSCU",226,0)
 ;
"RTN","SDCCRSCU",227,0)
 K DATA
"RTN","SDCCRSCU",228,0)
 S FS=$G(HL("FS"),"|") S:FS="" FS="|"
"RTN","SDCCRSCU",229,0)
 S CS=$E($G(HL("ECH")),1) S:CS="" CS="^"
"RTN","SDCCRSCU",230,0)
 S RS=$E($G(HL("ECH")),2) S:RS="" RS="~"
"RTN","SDCCRSCU",231,0)
 S ES=$E($G(HL("ECH")),3) S:ES="" ES="\"
"RTN","SDCCRSCU",232,0)
 S SS=$E($G(HL("ECH")),4) S:SS="" SS="&"
"RTN","SDCCRSCU",233,0)
 ;
"RTN","SDCCRSCU",234,0)
 S DATA(0)=$P(SEG,FS)
"RTN","SDCCRSCU",235,0)
 S SEG=$P(SEG,FS,2,9999)
"RTN","SDCCRSCU",236,0)
 ;
"RTN","SDCCRSCU",237,0)
 F FLD=1:1:$L(SEG,FS) D
"RTN","SDCCRSCU",238,0)
 . S FLDVAL=$P(SEG,FS,FLD)
"RTN","SDCCRSCU",239,0)
 . F REP=1:1:$L(FLDVAL,RS) D
"RTN","SDCCRSCU",240,0)
 . . S REPVAL=$P(FLDVAL,RS,REP)
"RTN","SDCCRSCU",241,0)
 . . I REPVAL[CS F CMP=1:1:$L(REPVAL,CS) D
"RTN","SDCCRSCU",242,0)
 . . . S CMPVAL=$P(REPVAL,CS,CMP)
"RTN","SDCCRSCU",243,0)
 . . . I CMPVAL[SS F SUB=1:1:$L(CMPVAL,SS) D
"RTN","SDCCRSCU",244,0)
 . . . . S SUBVAL=$P(CMPVAL,SS,SUB)
"RTN","SDCCRSCU",245,0)
 . . . . I SUBVAL'="" S DATA(FLD,REP,CMP,SUB)=SUBVAL
"RTN","SDCCRSCU",246,0)
 . . . I '$D(DATA(FLD,REP,CMP)),CMPVAL'="" S DATA(FLD,REP,CMP)=CMPVAL
"RTN","SDCCRSCU",247,0)
 . . I '$D(DATA(FLD,REP)),REPVAL'="",FLDVAL[RS S DATA(FLD,REP)=REPVAL
"RTN","SDCCRSCU",248,0)
 . I '$D(DATA(FLD)),FLDVAL'="" S DATA(FLD)=FLDVAL
"RTN","SDCCRSCU",249,0)
 Q
"RTN","SDCCRSCU",250,0)
INP ; set up the INP array for calling ARSET^SDECAR2 to update the RTC orders
"RTN","SDCCRSCU",251,0)
 ; Need to add code to add the rtcparent to the HL7 message and to parse it out. 
"RTN","SDCCRSCU",252,0)
 ;D APPERROR^%ZTER("SDHL7APU 196")
"RTN","SDCCRSCU",253,0)
 N NODE3,INTV,NUMAPTS,ORDATE,CONSID1,ORDNUM
"RTN","SDCCRSCU",254,0)
 S CONSID1=$P(SDAPTYP,"|",2) S:$G(CONSID1)>0 SDDDT=$P(^GMR(123,CONSID1,0),"^",24),ORDNUM=$P(^GMR(123,CONSID1,0),"^",3)
"RTN","SDCCRSCU",255,0)
 K INP
"RTN","SDCCRSCU",256,0)
 S INP(1)="" ; This is a new request so this is always null for a new request
"RTN","SDCCRSCU",257,0)
 S INP(2)=$G(SDDFN)
"RTN","SDCCRSCU",258,0)
 D NOW^%DTC N NOW S NOW=$$HTFM^XLFDT($H),INP(3)=$$FMTE^XLFDT(NOW)
"RTN","SDCCRSCU",259,0)
 ;S INP(3)=$G(ORDATE)
"RTN","SDCCRSCU",260,0)
 ;NEEDS THE TEXT INSTITUTION NAME
"RTN","SDCCRSCU",261,0)
 S INP(4)=$$NAME^XUAF4(+$G(DUZ(2))) ;Required, DUZ(2) is the signed on users division they are signed into, +DUZ(2) is the parent station number
"RTN","SDCCRSCU",262,0)
 S INP(5)="APPT"
"RTN","SDCCRSCU",263,0)
 S INP(6)=$G(SDCL)
"RTN","SDCCRSCU",264,0)
 S INP(8)="FUTURE"
"RTN","SDCCRSCU",265,0)
 S INP(9)="PROVIDER"
"RTN","SDCCRSCU",266,0)
 S INP(11)=$G(SDDDT) ; Clinically Indicate Date for first appointment in the sequence, each of the remaining appointments have to be calculated
"RTN","SDCCRSCU",267,0)
 S INP(12)=$G(SDECNOTE)
"RTN","SDCCRSCU",268,0)
 S PCE="" S PCE=$P($G(^DPT(SDDFN,"ENR")),U,1) I PCE'="" D
"RTN","SDCCRSCU",269,0)
 .S INP(13)=$$GET1^DIQ(27.11,PCE,.07,"E")
"RTN","SDCCRSCU",270,0)
 ;S INP(13)="" ;Enrollment priority will be null for TMP
"RTN","SDCCRSCU",271,0)
 S INP(14)=""
"RTN","SDCCRSCU",272,0)
 S INP(17)="" ;null for TMP
"RTN","SDCCRSCU",273,0)
 S SCPERC=0
"RTN","SDCCRSCU",274,0)
 S SCPERC=$P(^DPT($G(INP(2)),.3),"^",2)
"RTN","SDCCRSCU",275,0)
 S INP(19)=SCPERC
"RTN","SDCCRSCU",276,0)
 S INP(22)="9"
"RTN","SDCCRSCU",277,0)
 S INP(23)="NEW"
"RTN","SDCCRSCU",278,0)
 S INP(28)=$G(ORDNUM)
"RTN","SDCCRSCU",279,0)
 K SCPERC,PCE
"RTN","SDCCRSCU",280,0)
 Q
"RTN","SDCCRSEN")
0^11^B147345634^n/a
"RTN","SDCCRSEN",1,0)
SDCCRSEN ;CCRA/LB,PB - Appointment retrieval API;APR 4, 2019
"RTN","SDCCRSEN",2,0)
 ;;5.3;Scheduling;**707**;APR 4, 2019;Build 57
"RTN","SDCCRSEN",3,0)
 ;;Per VA directive 6402, this routine should not be modified.
"RTN","SDCCRSEN",4,0)
 Q
"RTN","SDCCRSEN",5,0)
 ; Documented API's and Integration Agreements
"RTN","SDCCRSEN",6,0)
 ; ----------------------------------------------
"RTN","SDCCRSEN",7,0)
 ; 2165   GENACK^HLMA1
"RTN","SDCCRSEN",8,0)
 ; 2701   $$GETDFN^MPIF001
"RTN","SDCCRSEN",9,0)
 ; 2701   $$GETICN^MPIF001
"RTN","SDCCRSEN",10,0)
 ; 3535   MAKEADD^TIUSRVP2
"RTN","SDCCRSEN",11,0)
 ; 10103  $$HL7TFM^XLFDT
"RTN","SDCCRSEN",12,0)
EN() ;Primary entry routine for HL7 based CCRA scheduling processing.
"RTN","SDCCRSEN",13,0)
 ;       Will take all scheduling messages through this one point.
"RTN","SDCCRSEN",14,0)
 N FS,CS,RS,ES,SS,MID,HLQUIT,HLNODE,USER,USERMAIL,NAKMSG,ICN
"RTN","SDCCRSEN",15,0)
 N MSG,HDR,SEG,SEGTYPE,MSGARY,LASTSEG,HDRTIME,ABORT,BASEDT,CLINARY,COUNT,PROVDTL,RESULTS
"RTN","SDCCRSEN",16,0)
 S RESULTS=0
"RTN","SDCCRSEN",17,0)
 S DUZ=""
"RTN","SDCCRSEN",18,0)
 S FS=$G(HL("FS"),"|")
"RTN","SDCCRSEN",19,0)
 S CS=$E($G(HL("ECH")),1) S:CS="" CS="^"
"RTN","SDCCRSEN",20,0)
 S RS=$E($G(HL("ECH")),2) S:RS="" RS="~"
"RTN","SDCCRSEN",21,0)
 S ES=$E($G(HL("ECH")),3) S:ES="" ES="\"
"RTN","SDCCRSEN",22,0)
 S SS=$E($G(HL("ECH")),4) S:SS="" SS="&"
"RTN","SDCCRSEN",23,0)
 S MID=$G(HL("MID"))
"RTN","SDCCRSEN",24,0)
 S (HLQUIT,HLNODE)=0
"RTN","SDCCRSEN",25,0)
 ;initialize message from queue
"RTN","SDCCRSEN",26,0)
 D COPYMSG^SDCCRCOR(.MSG)
"RTN","SDCCRSEN",27,0)
 Q:$$CHKMSG^SDCCRCOR(.MSG)
"RTN","SDCCRSEN",28,0)
 Q:$$PROCMSG(.MSG)
"RTN","SDCCRSEN",29,0)
 D ACK^SDCCRCOR("CA",MID)
"RTN","SDCCRSEN",30,0)
 Q
"RTN","SDCCRSEN",31,0)
 ;
"RTN","SDCCRSEN",32,0)
PROCMSG(MSG1) ; Process message
"RTN","SDCCRSEN",33,0)
 N QUIT,I,SEGTYPE,ERR1
"RTN","SDCCRSEN",34,0)
 N GMRCDFN,GMRCTIU,GMRCTIUS,ADDTXT,GMRCATIU,STID,RAWSEG,APTTM,DFN,CONID,CONTITLE,PROVIDER
"RTN","SDCCRSEN",35,0)
 K SDECSTART,SDECEND,SDDFN,SDECRES,SDECLEN,SDECNOTE,SDECATID,SDECCR,SDMRTC,SDDDT,SDREQBY,SDLAB,PROVIEN,SDID,SDAPTYP,SDSVCP,SDSVCPR,SDCL,SDEKG,SDXRAY,APPTYPE,EESTAT,OVB,SDPARENT,SDEL
"RTN","SDCCRSEN",36,0)
 S (SDECSTART,SDECEND,SDDFN,SDECRES,SDECLEN,SDECNOTE,SDECATID,SDECCR,SDMRTC,SDDDT,SDREQBY,SDLAB,PROVIEN,SDID,SDAPTYP,SDSVCP,SDSVCPR,SDCL,SDEKG,SDXRAY,APPTYPE,EESTAT,OVB,SDPARENT,SDEL)=""
"RTN","SDCCRSEN",37,0)
 S ABORT=0,BASEDT=""
"RTN","SDCCRSEN",38,0)
 S (QUIT,XX)=0
"RTN","SDCCRSEN",39,0)
 ;F  S XX=$O(MSG1(XX)) Q:XX'>0!ABORT  D
"RTN","SDCCRSEN",40,0)
 F  S XX=$O(MSG1(XX)) Q:XX'>0  D
"RTN","SDCCRSEN",41,0)
 . Q:+$G(ABORT)>0
"RTN","SDCCRSEN",42,0)
 . S SEGTYPE=$E(MSG1(XX),1,3),RAWSEG=$G(MSG1(XX))
"RTN","SDCCRSEN",43,0)
 . I SEGTYPE'="NTE" S LASTSEG=SEGTYPE
"RTN","SDCCRSEN",44,0)
 . S SEG=$G(MSG1(XX))
"RTN","SDCCRSEN",45,0)
 . I SEGTYPE="SCH" D SCH(SEG,.MSGARY,.ABORT,.BASEDT) ;SCH MUST BE PROCESSED FIRST SOME VALIDATION DEPENDS ON APPOINTMENT STATUS IN SCH-25
"RTN","SDCCRSEN",46,0)
 . I SEGTYPE="NTE" D NTE(SEG,.MSGARY,LASTSEG,.CLINARY,.ABORT,.PROVDTL)
"RTN","SDCCRSEN",47,0)
 . I SEGTYPE="PID" D PID(SEG,.MSGARY,.ABORT)
"RTN","SDCCRSEN",48,0)
 . I SEGTYPE="PV1" D PV1(SEG,.MSGARY,HDRTIME,.ABORT)
"RTN","SDCCRSEN",49,0)
 . I SEGTYPE="RGS" D RGS(SEG,.MSGARY)
"RTN","SDCCRSEN",50,0)
 . I SEGTYPE="AIS" D AIS(SEG,.MSGARY)
"RTN","SDCCRSEN",51,0)
 . I SEGTYPE="AIG" D AIG(SEG,.MSGARY,.PROVDTL,BASEDT)
"RTN","SDCCRSEN",52,0)
 . I SEGTYPE="AIL" D AIL(SEG,.MSGARY)
"RTN","SDCCRSEN",53,0)
 . I SEGTYPE="AIP" D AIP(SEG,.MSGARY,.PROVDTL,BASEDT)
"RTN","SDCCRSEN",54,0)
 K XX
"RTN","SDCCRSEN",55,0)
 I $G(NAKMSG)'="" S DUZ=.5,QUIT=1 D ANAK^SDCCRCOR($G(NAKMSG),$G(USERMAIL),$G(ICN),$G(DFN),$G(APTTM),$G(CONID))
"RTN","SDCCRSEN",56,0)
 I +$G(ABORT)=1 D MESSAGE^SDCCRCOR(MID,.ABORT) Q 1
"RTN","SDCCRSEN",57,0)
 I +$G(ABORT)=2 D APPMSG^SDCCRCOR(MID,.ABORT) Q 1
"RTN","SDCCRSEN",58,0)
 ;--------------------------------------
"RTN","SDCCRSEN",59,0)
 ;Process Message by Event Type
"RTN","SDCCRSEN",60,0)
 ;--------------------------------------
"RTN","SDCCRSEN",61,0)
 ;ADD NEW APPOINTMENT: "S12"="SCHEDULE"
"RTN","SDCCRSEN",62,0)
 I MSGARY("EVENT")="SCHEDULE" D
"RTN","SDCCRSEN",63,0)
 . S SDECLEN=$P(^SC(SDCL,"SL"),"^",1),SDECAPTID=0
"RTN","SDCCRSEN",64,0)
 . S:$G(DFN)>0 SDDFN=DFN
"RTN","SDCCRSEN",65,0)
 . S:$G(SDECLEN)'>0 SDECLEN=15
"RTN","SDCCRSEN",66,0)
 . S:$G(SDDFN)>0 SDECAPTID=$$APPTGET^SDECUTL(SDDFN,SDECSTART,SDCL,SDRES)
"RTN","SDCCRSEN",67,0)
 . I SDECAPTID>0 D ACK^SDCCRCOR("CE",MID,"","","","","Patient already has an appointment at that datetime.",1)
"RTN","SDCCRSEN",68,0)
 . S ABORT="1^Patient already has an appointment at that datetime."
"RTN","SDCCRSEN",69,0)
 . I $G(SDECAPTID)'>0 D INP^SDCCRSCU,ARSET^SDECAR2(.RET,.INP)
"RTN","SDCCRSEN",70,0)
 . Q:$G(SDECAPTID)>0
"RTN","SDCCRSEN",71,0)
 . S SDECSTART=$P(SDECSTART,".",1)_"."_$E($P(SDECSTART,".",2),1,4)
"RTN","SDCCRSEN",72,0)
 . S SDECSTART=$$FMTE^XLFDT(SDECSTART,2)
"RTN","SDCCRSEN",73,0)
 . D APPADD^SDEC07(.SDECY,SDECSTART,SDECEND,SDDFN,SDECRES,SDECLEN,,,,,,,,,,SDAPTYP,,,SDCL,,,,,1,,"") ;ADD NEW APPOINTMENT
"RTN","SDCCRSEN",74,0)
 ;
"RTN","SDCCRSEN",75,0)
 ;CANCEL APPOINTMENT: "S15"="CANCEL" 
"RTN","SDCCRSEN",76,0)
 I MSGARY("EVENT")="CANCEL" D
"RTN","SDCCRSEN",77,0)
 . S SDECLEN=$P(^SC(SDCL,"SL"),"^",1),SDECAPTID=0
"RTN","SDCCRSEN",78,0)
 . S:$G(DFN)>0 SDDFN=DFN
"RTN","SDCCRSEN",79,0)
 . S:$G(SDECLEN)'>0 SDECLEN=15
"RTN","SDCCRSEN",80,0)
 . ;check if appointment exists
"RTN","SDCCRSEN",81,0)
 . ;Retrieve SDECAPTID pointer to SDEC APPOINTMENT file
"RTN","SDCCRSEN",82,0)
 . S:$G(SDDFN)>0 SDECAPTID=$$APPTGET^SDECUTL(SDDFN,SDECSTART,SDCL,SDRES)
"RTN","SDCCRSEN",83,0)
 . I $G(SDECAPTID)="" D
"RTN","SDCCRSEN",84,0)
 . . D ACK^SDCCRCOR("CE",MID,"","","","","NO APPOINTMENT Found to CANCEL for requested PATIENT,DATE/TIME,and CLINIC",1)
"RTN","SDCCRSEN",85,0)
 . . S ABORT="1^NO APPOINTMENT Found to CANCEL for requested PATIENT,DATE/TIME,and CLINIC"
"RTN","SDCCRSEN",86,0)
 . . S QUIT=1
"RTN","SDCCRSEN",87,0)
 . S SDECSTART=$P(SDECSTART,".",1)_"."_$E($P(SDECSTART,".",2),1,4)
"RTN","SDCCRSEN",88,0)
 . S SDECSTART=$$FMTE^XLFDT(SDECSTART,2)
"RTN","SDCCRSEN",89,0)
 . D:'QUIT APPDEL^SDEC08(.SDECY,SDECAPTID,$G(MSGARY("CANCEL CODE")),$G(MSGARY("CANCEL REASON")),$G(MSGARY("COMMENT")),$G(SDECDATE),$G(MSGARY("USER"))) ;CANCEL APPOINTMENT
"RTN","SDCCRSEN",90,0)
 ;
"RTN","SDCCRSEN",91,0)
 ;NOSHOW APPOINTMENT: "S26"="NOSHOW" 
"RTN","SDCCRSEN",92,0)
 I MSGARY("EVENT")="NOSHOW" D
"RTN","SDCCRSEN",93,0)
 . S SDECLEN=$P(^SC(SDCL,"SL"),"^",1),SDECAPTID=0
"RTN","SDCCRSEN",94,0)
 . S:$G(DFN)>0 SDDFN=DFN
"RTN","SDCCRSEN",95,0)
 . S:$G(SDECLEN)'>0 SDECLEN=15
"RTN","SDCCRSEN",96,0)
 . ;check if appointment exists
"RTN","SDCCRSEN",97,0)
 . ;Retrieve SDECAPTID pointer to SDEC APPOINTMENT file
"RTN","SDCCRSEN",98,0)
 . S SDECSTART=$P(SDECSTART,".",1)_"."_$E($P(SDECSTART,".",2),1,4)
"RTN","SDCCRSEN",99,0)
 . S SDECSTART=$$FMTE^XLFDT(SDECSTART,2)
"RTN","SDCCRSEN",100,0)
 . S SDECAPTID=$$APPTGET^SDECUTL(SDDFN,SDECSTART,SDCL,SDRES)
"RTN","SDCCRSEN",101,0)
 . I $G(SDECAPTID)'>0 D
"RTN","SDCCRSEN",102,0)
 . . D ACK^SDCCRCOR("CE",MID,"","","","","NO APPOINTMENT Found to NOSHOW for requested PATIENT,DATE/TIME,and CLINIC",1)
"RTN","SDCCRSEN",103,0)
 . . S ABORT="1^NO APPOINTMENT Found to NOSHOW for requested PATIENT,DATE/TIME,and CLINIC"
"RTN","SDCCRSEN",104,0)
 . . S QUIT=1
"RTN","SDCCRSEN",105,0)
 . I +$G(ABORT)=1 D MESSAGE^SDCCRCOR(MID,ABORT) Q
"RTN","SDCCRSEN",106,0)
 . D:'QUIT NOSHOW^SDEC31(.SDECY,SDECAPTID,1,$G(MSGARY("USER")),$G(SDECDATE))
"RTN","SDCCRSEN",107,0)
 ;
"RTN","SDCCRSEN",108,0)
 D DONEINC^SDCCRCOR
"RTN","SDCCRSEN",109,0)
 ;
"RTN","SDCCRSEN",110,0)
 K MSG1,SDRES,SDECY,SDECDATE,SDECAPTID,RSNAME,SDAPTYP,SDCL,SDDFN,SDECNOT,SDECNOTE,INP,RET
"RTN","SDCCRSEN",111,0)
 Q QUIT
"RTN","SDCCRSEN",112,0)
 ;
"RTN","SDCCRSEN",113,0)
SETEVENT(EVENT,MSGARY) ;Takes the scheduling event and sets a message event to process.
"RTN","SDCCRSEN",114,0)
 ;  EVENT (I/REQ) - Message event from the MSH header. EX. S12, S14, S15, S26
"RTN","SDCCRSEN",115,0)
 ;  MSGARY (I/O,REQ) message array structure with reformatted and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",116,0)
 ;
"RTN","SDCCRSEN",117,0)
 I $G(EVENT)="" Q 0
"RTN","SDCCRSEN",118,0)
 I EVENT="S12" S MSGARY("EVENT")="SCHEDULE" Q 1
"RTN","SDCCRSEN",119,0)
 I EVENT="S14" S MSGARY("EVENT")="UPDATE" Q 1
"RTN","SDCCRSEN",120,0)
 I EVENT="S15" S MSGARY("EVENT")="CANCEL" Q 1
"RTN","SDCCRSEN",121,0)
 I EVENT="S26" S MSGARY("EVENT")="NOSHOW" Q 1
"RTN","SDCCRSEN",122,0)
 Q 0
"RTN","SDCCRSEN",123,0)
 ;
"RTN","SDCCRSEN",124,0)
SCH(SCH,MSGARY,ABORT,BASEDT) ;SCH segment processing.:
"RTN","SDCCRSEN",125,0)
 ; SEG (I/REQ) - SCH message segment data
"RTN","SDCCRSEN",126,0)
 ; MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",127,0)
 ; ABORT (O,OPT) - Error parameter if we did not receive an appointment date and time. Fatal case to this message.
"RTN","SDCCRSEN",128,0)
 ; BASEDT (O,REQ) - appointment base date/time to use. May be incremented later if processing multiple joint clinic scheduling
"RTN","SDCCRSEN",129,0)
 N ORDIDTYP,SRVNAME,CONSULTID
"RTN","SDCCRSEN",130,0)
 D PARSESEG^SDCCRSCU(SCH,.SCH)
"RTN","SDCCRSEN",131,0)
 S MSGARY("PLACER ID")=$G(SCH(1)) ;SCH-1.1
"RTN","SDCCRSEN",132,0)
 ; Cancel Reason
"RTN","SDCCRSEN",133,0)
 S CONID=$G(SCH(2)),PROVIDER=$G(SCH(12,1,2))_" "_$G(SCH(12,1,3))
"RTN","SDCCRSEN",134,0)
 I MSGARY("EVENT")="CANCEL" S MSGARY("CANCEL REASON")=$$GETRSN($G(SCH(6,1,2))),MSGARY("CANCEL CODE")=$G(SCH(6,1,5)) ;SCH-6
"RTN","SDCCRSEN",135,0)
 ; Duration
"RTN","SDCCRSEN",136,0)
 S (SDECLEN,MSGARY("DURATION"))=$G(SCH(9)) ;SCH-9,10
"RTN","SDCCRSEN",137,0)
 ; Appointment Date
"RTN","SDCCRSEN",138,0)
 N Y
"RTN","SDCCRSEN",139,0)
 S (SDECSTART,BASEDT)=$$HL7TFM^XLFDT($G(SCH(11,1,4)),"L") ;SCH-11.3
"RTN","SDCCRSEN",140,0)
 S APTTM=$G(SCH(11,1,4))
"RTN","SDCCRSEN",141,0)
 N Y S SDECEND=$$HL7TFM^XLFDT($G(SCH(11,1,5)),"L") ;SCH-11.3
"RTN","SDCCRSEN",142,0)
 I $G(BASEDT)="" S ERR1="NO APPOINTMENT DATE AND TIME" D ACK^SDCCRCOR("CE",MID,"SCH","",11,305,ERR1,1) S ABORT="1^"_ERR1 Q
"RTN","SDCCRSEN",143,0)
 ; User
"RTN","SDCCRSEN",144,0)
 S (MSGARY("USER"))=$$GETUSER($G(SCH(20,1,1))) ;SCH-20
"RTN","SDCCRSEN",145,0)
 S USERMAIL=$G(SCH(13,1,4)) S:$G(USERMAIL)'="" DUZ=$O(^VA(200,"ADUPN",$$LOW^XLFSTR(USERMAIL),""))
"RTN","SDCCRSEN",146,0)
 I DUZ'>0 S DUZ=.5,(NAKMSG,ERR1)="SCHEDULER DOESN'T HAVE AN ACCOUNT ON THIS SYSTEM",ABORT="1^"_ERR1 Q
"RTN","SDCCRSEN",147,0)
 S MSGARY("STATUS")=$$GETSTAT($G(SCH(25))) ;SCH-25
"RTN","SDCCRSEN",148,0)
 ; Linked Consults/Orders
"RTN","SDCCRSEN",149,0)
 S ORDIDTYP=$$GET^SDCCRSCU(.SCH,27,2) ;Placer ID Type
"RTN","SDCCRSEN",150,0)
 Q
"RTN","SDCCRSEN",151,0)
 ;
"RTN","SDCCRSEN",152,0)
NTE(NTE,MSGARY,LASTSEG,CLINARY,ABORT,PROVDTL) ;NTE segment processing.
"RTN","SDCCRSEN",153,0)
 ;  NTE (I/REQ) - NTE message segment data
"RTN","SDCCRSEN",154,0)
 ;  MSGARY (I/O,REQ) - message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",155,0)
 ;  LASTSEG (I,REQ) - segment previous to the NTE to determine context of note.
"RTN","SDCCRSEN",156,0)
 ;  CLINARY (I/O,REQ) - List of Clinics to be scheduled. Could contain more than one for joint appointments
"RTN","SDCCRSEN",157,0)
 ;  ABORT (O,REQ) - quit parameter to the whole tag. Having one clinic unmapped must stop filing.
"RTN","SDCCRSEN",158,0)
 ;  PROVDTL (I/OPT) - passed when NTE concerns a preceding AIP or AIG segment
"RTN","SDCCRSEN",159,0)
 N NOTE,NOTETYPE,CLINIC
"RTN","SDCCRSEN",160,0)
 S LASTSEG=$G(LASTSEG)
"RTN","SDCCRSEN",161,0)
 ;;;lb ===> change to HL7
"RTN","SDCCRSEN",162,0)
 S NOTE=$$GET^SDCCRSCU(.NTE,3,1)  ;NTE-3.1
"RTN","SDCCRSEN",163,0)
 S NOTETYPE=$$GET^SDCCRSCU(.NTE,4,1)  ;NTE-4.1
"RTN","SDCCRSEN",164,0)
 ; Process NTE following SCH for scheduling comments.
"RTN","SDCCRSEN",165,0)
 S NOTE=$TR(NOTE,"^","?")  ;FILEMAN can't handle "^"
"RTN","SDCCRSEN",166,0)
 I LASTSEG="SCH" D
"RTN","SDCCRSEN",167,0)
 . I ($G(MSGARY("COMMENT"))'=""),(NOTE'="") S MSGARY("COMMENT")=$G(MSGARY("COMMENT"))_" "
"RTN","SDCCRSEN",168,0)
 . S MSGARY("COMMENT")=NOTE
"RTN","SDCCRSEN",169,0)
 ; Process NTE following AIG/AIP for getting clinics
"RTN","SDCCRSEN",170,0)
 I (LASTSEG="AIP")!(LASTSEG="AIG") D
"RTN","SDCCRSEN",171,0)
 . I NOTETYPE="CLINIC" D
"RTN","SDCCRSEN",172,0)
 . . S CLINIC=$$GETCLIN(NOTE)
"RTN","SDCCRSEN",173,0)
 . . I CLINIC="" S ERR1="CLINIC MAPPING ERROR VALUE" D ACK^SDCCRCOR("CE",MID,"NTE","",1,300,ERR1,1) S ABORT="1^"_ERR1 Q
"RTN","SDCCRSEN",174,0)
 . . S CLINARY(0)=$G(CLINARY(0))+1
"RTN","SDCCRSEN",175,0)
 . . S CLINARY(CLINARY(0))=CLINIC
"RTN","SDCCRSEN",176,0)
 . . S CLINARY(CLINARY(0),"DT")=$G(PROVDTL("DT"))
"RTN","SDCCRSEN",177,0)
 . . S CLINARY(CLINARY(0),"LN")=$G(PROVDTL("LN"))
"RTN","SDCCRSEN",178,0)
 Q
"RTN","SDCCRSEN",179,0)
 ;
"RTN","SDCCRSEN",180,0)
PID(PID,MSGARY,ABORT) ;PID segment processing.
"RTN","SDCCRSEN",181,0)
 ;  PID (I/REQ) - PID message segment data
"RTN","SDCCRSEN",182,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",183,0)
 ;  ABORT (O,OPT) - Error parameter if we failed to find a valid patient. Fatal case to this message.
"RTN","SDCCRSEN",184,0)
 N IDENTIFIERS,IENCHECK,OK
"RTN","SDCCRSEN",185,0)
 D PARSESEG^SDCCRSCU(PID,.PID)
"RTN","SDCCRSEN",186,0)
 S ICN=$G(PID(3,1,1)),(SDDFN,DFN)=$$GETDFN^MPIF001($P(ICN,"V"))
"RTN","SDCCRSEN",187,0)
 Q
"RTN","SDCCRSEN",188,0)
 ;
"RTN","SDCCRSEN",189,0)
PV1(PV1,MSGARY,HDRTIME,ABORT) ;PV1 segment processing.
"RTN","SDCCRSEN",190,0)
 ;  PV1 (I/REQ) - PV1 message segment data
"RTN","SDCCRSEN",191,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",192,0)
 ;  HDRTIME (I,OPT) - TIME FROM MSH-7, USED AS A DEFAULTING OPTION
"RTN","SDCCRSEN",193,0)
 ;  ABORT (O,OPT) - Error parameter if we failed to find a valid patient. Fatal case to this message.
"RTN","SDCCRSEN",194,0)
 N ERROR
"RTN","SDCCRSEN",195,0)
 ;
"RTN","SDCCRSEN",196,0)
 D PARSESEG^SDCCRSCU(PV1,.PV1)
"RTN","SDCCRSEN",197,0)
 S CONSULTID=0,(CONID,CONSULTID)=$G(PV1(19))
"RTN","SDCCRSEN",198,0)
 S MSGARY("FILLER ID")=CONSULTID
"RTN","SDCCRSEN",199,0)
 S SDAPTYP="C|"_$G(CONSULTID)
"RTN","SDCCRSEN",200,0)
 N Y,RESNAME
"RTN","SDCCRSEN",201,0)
 S SDECRES=$$GET1^DIQ(123,$G(CONSULTID)_",",1,"I"),(CONTITLE,SRVNAME)=$$GET1^DIQ(123,$G(CONSULTID)_",",1,"E")
"RTN","SDCCRSEN",202,0)
 Q:$G(SRVNAME)'["COMMUNITY CARE"
"RTN","SDCCRSEN",203,0)
 S:$G(SRVNAME)[" - " SRVNAME=$P(SRVNAME," - ",1)_"-"_$P(SRVNAME," - ",2)
"RTN","SDCCRSEN",204,0)
 S:$G(SRVNAME)[" -" SRVNAME=$P(SRVNAME," -",1)_"-"_$P(SRVNAME," -",2)
"RTN","SDCCRSEN",205,0)
 S:$G(SRVNAME)["- " SRVNAME=$P(SRVNAME,"- ",1)_"-"_$P(SRVNAME,"- ",2)
"RTN","SDCCRSEN",206,0)
 ;RSNAME and SRVNAME is the full name after the transform from COMMUNITY CARE to COMM CARE. RSNAME is used to look up the resource
"RTN","SDCCRSEN",207,0)
 ;using the full name in SDEC(409.831, SRVNAME is used to look up the clinic in the Hospital Location file
"RTN","SDCCRSEN",208,0)
 S (RSNAME,SRVNAME)="COM CARE-"_$P(SRVNAME,"-",2),SRVNAME=$E(SRVNAME,1,30) S:$E(SRVNAME,30)=" " SRVNAME=$E(SRVNAME,1,29)
"RTN","SDCCRSEN",209,0)
 S:$E($P(RSNAME,"-",2),1,3)="DOD" (RSNAME,SRVNAME)="CC-"_$P(RSNAME,"-",2)
"RTN","SDCCRSEN",210,0)
 S SDCL=$O(^SC("B",$G(SRVNAME),""))
"RTN","SDCCRSEN",211,0)
 I $G(SDCL)="" S ERROR="NO MATCH FOR "_SRVNAME_" PV1-19 CONSULT ID:"_CONSULTID,ERR1=ERROR D ACK^SDCCRCOR("CE",MID,"PV1","",19,305,ERR1,1) S ABORT="2^"_ERR1 Q  ;WE NEED AN ERR HERE FOR PV1(19)
"RTN","SDCCRSEN",212,0)
 S SDRES=$O(^SDEC(409.831,"B",$G(SRVNAME),"")) S:$G(SDRES)>0 SDECRES=$G(SDRES)
"RTN","SDCCRSEN",213,0)
 I $G(SDRES)="" S ERROR="NO CLINIC RESOURCE MATCH FOR "_SRVNAME,ERR1=ERROR D ACK^SDCCRCOR("CE",MID,"PV1","",19,305,ERR1) S ABORT="1^"_ERR1 Q
"RTN","SDCCRSEN",214,0)
 ;ONLY LOG DEFAULTING ERRORS
"RTN","SDCCRSEN",215,0)
 ;CHECK IN DATE/TIME
"RTN","SDCCRSEN",216,0)
 S MSGARY("CHECKINDT")=$$DETTIME($$GET^SDCCRSCU(.PV1,44,1),$G(HDRTIME),.ERROR)   ;PV1-44.1
"RTN","SDCCRSEN",217,0)
 I ($G(ERROR)'=""),($G(MSGARY("STATUS"))="CHECKED IN") D ACK^SDCCRCOR("CE",MID,"PV1","",44,306,"NO CHECK IN TIME IN PV1-44 "_ERROR,1) S ABORT="1^NO CHECK IN TIME IN PV1-44 "_ERROR Q
"RTN","SDCCRSEN",218,0)
 ;CHECK OUT DATE/TIME
"RTN","SDCCRSEN",219,0)
 S MSGARY("CHECKOUTDT")=$$DETTIME($$GET^SDCCRSCU(.PV1,45,1),$G(HDRTIME),.ERROR)   ;PV1-45.1
"RTN","SDCCRSEN",220,0)
 I ($G(ERROR)'=""),($G(MSGARY("STATUS"))="CHECKED OUT") D ACK^SDCCRCOR("CE",MID,"PV1","",45,307,"NO CHECK IN TIME IN PV1-45 "_ERROR,1) S ABORT="1^NO CHECK IN TIME IN PV1-44 "_ERROR Q
"RTN","SDCCRSEN",221,0)
 ;
"RTN","SDCCRSEN",222,0)
 Q
"RTN","SDCCRSEN",223,0)
RGS(RGS,MSGARY) ; RGS segment processing.
"RTN","SDCCRSEN",224,0)
 ;             Per HL7 this segment repeats and has multiple AIS/AIG/AIP segments underneath.
"RTN","SDCCRSEN",225,0)
 ;  RGS (I/REQ) - RGS message segment data
"RTN","SDCCRSEN",226,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",227,0)
 Q
"RTN","SDCCRSEN",228,0)
AIS(AIS,MSGARY) ;AIS segment processing.
"RTN","SDCCRSEN",229,0)
 ;            Per HL7 this field can repeat within each RGS group.
"RTN","SDCCRSEN",230,0)
 ;  AIS (I/REQ) - AIS message segment data
"RTN","SDCCRSEN",231,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",232,0)
 Q
"RTN","SDCCRSEN",233,0)
AIP(AIP,MSGARY,PROVDTL,BASEDTE) ;AIP segment processing.
"RTN","SDCCRSEN",234,0)
 ;            Per HL7 this field can repeat within each RGS group.
"RTN","SDCCRSEN",235,0)
 ;  AIP (I/REQ) - AIP message segment data
"RTN","SDCCRSEN",236,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",237,0)
 ;  PROVDTL (O,REQ) - AIP date/time and length
"RTN","SDCCRSEN",238,0)
 ;  BASEDTE (I,REQ) - Appt D/T from SCH
"RTN","SDCCRSEN",239,0)
 D PARSESEG^SDCCRSCU(AIP,.AIP)
"RTN","SDCCRSEN",240,0)
 I $$HL7TFM^XLFDT($$GET^SDCCRSCU(.AIP,6,1),"L")'="" S PROVDTL("DT")=$$HL7TFM^XLFDT($$GET^SDCCRSCU(.AIP,6,1),"L")  ;AIP-6
"RTN","SDCCRSEN",241,0)
 E  S PROVDTL("DT")=BASEDTE
"RTN","SDCCRSEN",242,0)
 ;I $$GETLEN^SDCCRCOR(,.AIP)'="" S PROVDTL("LN")=$$GETLEN^SDCCRCOR(,.AIP)  ;AIP-9
"RTN","SDCCRSEN",243,0)
 ;E  
"RTN","SDCCRSEN",244,0)
 S PROVDTL("LN")=MSGARY("DURATION")
"RTN","SDCCRSEN",245,0)
 Q
"RTN","SDCCRSEN",246,0)
 ;
"RTN","SDCCRSEN",247,0)
AIL(AIL,RETVAL) ; Process AIL Segment
"RTN","SDCCRSEN",248,0)
 Q
"RTN","SDCCRSEN",249,0)
AIG(AIG,MSGARY,PROVDTL,BASEDTE) ;AIG segment processing.
"RTN","SDCCRSEN",250,0)
 ;            Per HL7 this field can repeat within each RGS group.
"RTN","SDCCRSEN",251,0)
 ;  AIG (I/REQ) - AIG message segment data
"RTN","SDCCRSEN",252,0)
 ;  MSGARY (I/O,REQ) message array structure with deformated and translated data ready for filing. See PARSEMSG for details.
"RTN","SDCCRSEN",253,0)
 ;  PROVDTL (O,REQ) - AIG date/time and length
"RTN","SDCCRSEN",254,0)
 ;  BASEDTE (I,REQ) - Appt D/T from SCH
"RTN","SDCCRSEN",255,0)
 D PARSESEG^SDCCRSCU(AIG,.AIG)
"RTN","SDCCRSEN",256,0)
 I $$HL7TFM^XLFDT($$GET^SDCCRSCU(.AIG,8,1),"L")'="" S PROVDTL("DT")=$$HL7TFM^XLFDT($$GET^SDCCRSCU(.AIG,8,1),"L")  ;AIG-8
"RTN","SDCCRSEN",257,0)
 E  S PROVDTL("DT")=BASEDTE
"RTN","SDCCRSEN",258,0)
 S PROVDTL("LN")=MSGARY("DURATION")
"RTN","SDCCRSEN",259,0)
 Q
"RTN","SDCCRSEN",260,0)
 ;
"RTN","SDCCRSEN",261,0)
GETRSN(SCH) ; Collects appointment reason and translates into internal format.
"RTN","SDCCRSEN",262,0)
 ;         Tries using the Title to lookup the reason. If that fails uses the ID to lookup
"RTN","SDCCRSEN",263,0)
 ;         the reason against the title. If that fails tries using the ID against the ID.
"RTN","SDCCRSEN",264,0)
 ;   SCH (I/REQ) - SCH message segment data
"RTN","SDCCRSEN",265,0)
 Q $$DATALKUP(.SCH,"409.2","^SD(409.2,",6,302,"APPOINTMENT REASON MAPPING ERROR")
"RTN","SDCCRSEN",266,0)
GETTYPE(OBX) ;translates appointment type into internal format
"RTN","SDCCRSEN",267,0)
 ;   OBX (I/REQ) - OBX message segment data
"RTN","SDCCRSEN",268,0)
 N APPTTYPE
"RTN","SDCCRSEN",269,0)
 S APPTTYPE=$$DATALKUP(.OBX,"409.1","^SD(409.1,",5,303,"APPOINTMENT TYPE MAPPING ERROR")
"RTN","SDCCRSEN",270,0)
 I $G(APPTTYPE)="" S APPTTYPE=9
"RTN","SDCCRSEN",271,0)
 Q APPTTYPE
"RTN","SDCCRSEN",272,0)
 ;
"RTN","SDCCRSEN",273,0)
GETUSER(SCH) ;collects appointment entered by user and confirms they are a user in the 200 file
"RTN","SDCCRSEN",274,0)
 ;  SCH (I/REQ) - SCH message segment data
"RTN","SDCCRSEN",275,0)
 Q:$G(SCH)=""
"RTN","SDCCRSEN",276,0)
 S USER=$$FIND1^DIC(200,,"X",$G(SCH),"ASECID",,"SCERR")
"RTN","SDCCRSEN",277,0)
 S USER=.5
"RTN","SDCCRSEN",278,0)
 Q USER
"RTN","SDCCRSEN",279,0)
GETSTAT(SCH) ; Translates status into appropriate scheduling statuses
"RTN","SDCCRSEN",280,0)
 ;          Options: (SCHEDULED,CHECKED IN,CHECKED OUT,CANCELLED,NO SHOW)
"RTN","SDCCRSEN",281,0)
 ;   SCH (I/REQ) - SCH message segment data
"RTN","SDCCRSEN",282,0)
 N STATUS,ID,TITLE
"RTN","SDCCRSEN",283,0)
 S ID=$$GET^SDCCRSCU(.SCH,25,1)
"RTN","SDCCRSEN",284,0)
 S TITLE=$$GET^SDCCRSCU(.SCH,25,2)
"RTN","SDCCRSEN",285,0)
 I $$INSTRING^SDCCRCOR(TITLE,"SCHEDULED,CHECKED IN,CHECKED OUT,CANCELLED,NO SHOW") Q TITLE
"RTN","SDCCRSEN",286,0)
 I $$INSTRING^SDCCRCOR(ID,"SCHEDULED,CHECKED IN,CHECKED OUT,CANCELLED,NO SHOW") Q ID
"RTN","SDCCRSEN",287,0)
 I (ID'="")!(TITLE'="") D ACK^SDCCRCOR("CE",MID,"SCH",25,"",309,"SCHEDULING STATUS MAPPING ERROR",1) S ABORT="1^SCHEDULING STATUS MAPPING ERROR" Q
"RTN","SDCCRSEN",288,0)
 Q "NA"
"RTN","SDCCRSEN",289,0)
GETIDS(PID,IDENTIFIERS) ;Loops over PID-3 and extracts all IDs out into an array. Currently will identify ICN and IEN identifiers only
"RTN","SDCCRSEN",290,0)
 ;  PID (I,REQ) - PID message segment data
"RTN","SDCCRSEN",291,0)
 ;  IDENTIFIERS (O,REQ) - Identifier array to return
"RTN","SDCCRSEN",292,0)
 ;
"RTN","SDCCRSEN",293,0)
 K IDS    ;force output parameter
"RTN","SDCCRSEN",294,0)
 N REP,ID,ASSIGN,IDTYPE
"RTN","SDCCRSEN",295,0)
 S ID=PID(3,1,5)
"RTN","SDCCRSEN",296,0)
 S IDENTIFIERS("PATIENT IEN")=$G(PID(3,2,1))   ;DFN
"RTN","SDCCRSEN",297,0)
 S IDENTIFIERS("PATIENT ICN")=$G(PID(3,1,1))   ;ICN
"RTN","SDCCRSEN",298,0)
 Q
"RTN","SDCCRSEN",299,0)
ISPATIEN(ASSIGN,IDTYPE) ;Determines if given id descriptors are the IEN for this instance
"RTN","SDCCRSEN",300,0)
 ;  ASSIGN (I,OPT) - Assigning Authority of this identifier
"RTN","SDCCRSEN",301,0)
 ;  IDTYPE (I,OPT) - ID Type of this identifier
"RTN","SDCCRSEN",302,0)
 I $G(IDTYPE)="IEN" Q 1
"RTN","SDCCRSEN",303,0)
 Q 0
"RTN","SDCCRSEN",304,0)
ISPATICN(ASSIGN,IDTYPE) ;Determines if given id descriptors are the ICN for this instance
"RTN","SDCCRSEN",305,0)
 ;   ASSIGN (I,OPT) - Assigning Authority of this identifier
"RTN","SDCCRSEN",306,0)
 ;   IDTYPE (I,OPT) - ID Type of this identifier
"RTN","SDCCRSEN",307,0)
 I $G(IDTYPE)="ICN" Q 1
"RTN","SDCCRSEN",308,0)
 Q 0
"RTN","SDCCRSEN",309,0)
GTIENICN(PATICN) ;Lookup the IEN for a given ICN
"RTN","SDCCRSEN",310,0)
 ;   PATICN (I,REQ) - Patient ICN
"RTN","SDCCRSEN",311,0)
 ;   IDTYPE (I,OPT) - ID Type of this identifier
"RTN","SDCCRSEN",312,0)
 N PATIEN
"RTN","SDCCRSEN",313,0)
 S PATIEN=""
"RTN","SDCCRSEN",314,0)
 Q PATIEN
"RTN","SDCCRSEN",315,0)
GETCLIN(ID) ;Collects clinic from the PV1-3.1 segment. There is no title component to this data type.
"RTN","SDCCRSEN",316,0)
 ;   ID (I/REQ) - Clinic string to lookup clinic with
"RTN","SDCCRSEN",317,0)
 ;
"RTN","SDCCRSEN",318,0)
 ; Check Requirements
"RTN","SDCCRSEN",319,0)
 I $G(ID)="" Q ""
"RTN","SDCCRSEN",320,0)
 ;
"RTN","SDCCRSEN",321,0)
 N CLINIC
"RTN","SDCCRSEN",322,0)
 ; Try robust mutli tier lookup
"RTN","SDCCRSEN",323,0)
 S CLINIC=$O(^SC("B",ID,""))
"RTN","SDCCRSEN",324,0)
 I CLINIC'="" Q CLINIC
"RTN","SDCCRSEN",325,0)
 I $G(^SC(ID,0))'="" Q ID
"RTN","SDCCRSEN",326,0)
 Q ""
"RTN","SDCCRSEN",327,0)
GETELIG(OBX) ;Collects appointment eligibility and translates into internal format
"RTN","SDCCRSEN",328,0)
 ;         Tries using the Title to lookup the eligibility. If that fails uses the
"RTN","SDCCRSEN",329,0)
 ;         ID to lookup the reason against the title. If that fails tries using the ID against the ID.
"RTN","SDCCRSEN",330,0)
 ;  OBX (I/REQ) - OBX message segment data
"RTN","SDCCRSEN",331,0)
 Q $$DATALKUP(.OBX,"8","^DIC(8,",5)
"RTN","SDCCRSEN",332,0)
DETTIME(PV1TIME,HDRTIME,ERROR) ;RETURNS THE BEST CHECK IN/OUT TIME AVAILABLE IN THE MESSAGE OR DEFAULTS TO NOW
"RTN","SDCCRSEN",333,0)
 ; PV1TIME (I,OPT)   - HIGHEST PRIORITY TIME TO RETURN FROM EITHER PV1-44 OR PV1-45
"RTN","SDCCRSEN",334,0)
 ; HDRTIME (I,OPT)   - TIME FROM MSH-7
"RTN","SDCCRSEN",335,0)
 ; ERROR   (O,OPT)   - ERROR OUTPUT PARAMETER
"RTN","SDCCRSEN",336,0)
 K ERROR
"RTN","SDCCRSEN",337,0)
 I $G(PV1TIME)'="" Q $$HL7TFM^XLFDT(PV1TIME,"L")
"RTN","SDCCRSEN",338,0)
 I $G(HDRTIME)'="" S ERROR="FALLING BACK TO MSH-7" Q $$HL7TFM^XLFDT(HDRTIME,"L")
"RTN","SDCCRSEN",339,0)
 S ERROR="FALLING BACK TO FILING TIME"
"RTN","SDCCRSEN",340,0)
 Q $$NOW^XLFDT()
"RTN","SDCCRSEN",341,0)
DATALKUP(SEG,FILE,FILEPATH,FIELD,ERRCODE,ERRTEXT) ; Translates a data element for a given fileman file in an HL7 field
"RTN","SDCCRSEN",342,0)
 ;         Tries using the Title to lookup the data. If that fails uses the ID to lookup
"RTN","SDCCRSEN",343,0)
 ;         the reason against the title. If that fails tries using the ID against the ID.
"RTN","SDCCRSEN",344,0)
 ;   SEG (I,REQ) - Message segment to parse
"RTN","SDCCRSEN",345,0)
 ;   FILE (I,REQ) - Fileman File to lookup
"RTN","SDCCRSEN",346,0)
 ;   FILEPATH (I,REQ) - global path to the file's storage location for DIC lookup. Make sure to end with a comma ^<glo>(<File>,
"RTN","SDCCRSEN",347,0)
 ;   FIELD (I,REQ) - message field to look in
"RTN","SDCCRSEN",348,0)
 ;   ERRCODE (I,OPT) - error to log if failure
"RTN","SDCCRSEN",349,0)
 ;   ERRTEXT (I,OPT) - error text to log if failure
"RTN","SDCCRSEN",350,0)
 ;
"RTN","SDCCRSEN",351,0)
 ; Check Requirements
"RTN","SDCCRSEN",352,0)
 I ($G(FILE)="")!($G(FIELD)="") Q
"RTN","SDCCRSEN",353,0)
 ;
"RTN","SDCCRSEN",354,0)
 N ID,TITLE,DATA,X,Y,DIC
"RTN","SDCCRSEN",355,0)
 ;
"RTN","SDCCRSEN",356,0)
 S DATA=""
"RTN","SDCCRSEN",357,0)
 S ID=$$GET^SDCCRSCU(.SEG,FIELD,1)       ;component 1  HL7 ID field
"RTN","SDCCRSEN",358,0)
 S TITLE=$$GET^SDCCRSCU(.SEG,FIELD,2)    ;component 2 HL7 Title field
"RTN","SDCCRSEN",359,0)
 I (ID=""),(TITLE="") Q ""   ;No data to translate
"RTN","SDCCRSEN",360,0)
 ;
"RTN","SDCCRSEN",361,0)
 ; Try robust mutli tier lookup
"RTN","SDCCRSEN",362,0)
 I TITLE'="" S DIC=FILEPATH,DIC(0)="B",X=TITLE D ^DIC S DATA=$P(Y,"^",1)   ;lookup "B" node with the second component
"RTN","SDCCRSEN",363,0)
 I DATA'="",DATA'=-1 Q DATA
"RTN","SDCCRSEN",364,0)
 I ID'="" d
"RTN","SDCCRSEN",365,0)
 . S DIC=FILEPATH,DIC(0)="B",X=ID D ^DIC S DATA=$P(Y,"^",1)   ;lookup "B" node with the first component
"RTN","SDCCRSEN",366,0)
 . I DATA'="",DATA'=-1 Q
"RTN","SDCCRSEN",367,0)
 . I $$GET1^DIQ(FILE,ID,".01")'="" S DATA=ID    ;check if the ID matches a record in the File. if so use it.
"RTN","SDCCRSEN",368,0)
 I DATA'="" Q DATA
"RTN","SDCCRSEN",369,0)
 I $G(ERRCODE)'="" D ACK^SDCCRCOR("CE",MID,"","","",ERRCODE,ERRTEXT,1) ;All lookups have failed and data exists so send an error
"RTN","SDCCRSEN",370,0)
 Q ""
"RTN","SDCCRSEN",371,0)
 ;
"RTN","SDPRE707")
0^12^B12266652^n/a
"RTN","SDPRE707",1,0)
SDPRE707 ;;MS/PB/MJ - CCRA PRE INSTALL;APR 22, 2019
"RTN","SDPRE707",2,0)
 ;;5.3;Scheduling;**707**;APR 4, 2019;Build 57
"RTN","SDPRE707",3,0)
 ;;Per VA directive 6402, this routine should not be modified.
"RTN","SDPRE707",4,0)
 ;Pre install routine for patch SD*5.3*707.
"RTN","SDPRE707",5,0)
 ;Checks for the CCRA-NAK logical link, if it exists, it doesn't re-install the link
"RTN","SDPRE707",6,0)
 ;if it doesn't exist, it gets the HealthShare server address and port and installs
"RTN","SDPRE707",7,0)
 ;and configures the link.
"RTN","SDPRE707",8,0)
 Q
"RTN","SDPRE707",9,0)
LINK ; update the TMP_Send Link
"RTN","SDPRE707",10,0)
 N LIEN,OPSITE,DOMAIN,VAL,SDERR,FDA,PRE1,PRE2,X,STOP
"RTN","SDPRE707",11,0)
 D MES^XPDUTL("Checking VistA system for CCRA-NAK logical link setup...")
"RTN","SDPRE707",12,0)
 S VAL="CCRA-NAK",STOP=0
"RTN","SDPRE707",13,0)
 S LIEN=$$FIND1^DIC(870,,"B",.VAL)
"RTN","SDPRE707",14,0)
 I LIEN D MES^XPDUTL("Link already exists, no new setup needed") Q
"RTN","SDPRE707",15,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",16,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",17,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",18,0)
 D MES^XPDUTL("CCRA-NAK logical link being set up now.  We'll need some information from you.")
"RTN","SDPRE707",19,0)
 D MES^XPDUTL("Please have the HealthConnect server IP address and Port number ready.")
"RTN","SDPRE707",20,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",21,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",22,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",23,0)
 ;
"RTN","SDPRE707",24,0)
Q1 ; QUESTION 1 - IP ADDRESS - PRE 1
"RTN","SDPRE707",25,0)
 S DIR("A")="PLEASE ENTER THE HEALTHCONNECT SERVER IP ADDRESS"
"RTN","SDPRE707",26,0)
 S DIR(0)="F"
"RTN","SDPRE707",27,0)
 D ^DIR S PRE1=X
"RTN","SDPRE707",28,0)
 I $G(PRE1)="^"!($G(PRE1)="") D
"RTN","SDPRE707",29,0)
 . N X,Y,DIR,DTOUT,DUOUT,DIRUT
"RTN","SDPRE707",30,0)
 . S DIR(0)="Y"
"RTN","SDPRE707",31,0)
 . S DIR("A",1)="Quitting out will result in the CCRA-NAK logical link not being installed."
"RTN","SDPRE707",32,0)
 . S DIR("A",2)="The CCRA-NAK logical link is required and must be configured for this patch to work properly."
"RTN","SDPRE707",33,0)
 . S DIR("A")="Are you sure you want to exit out of the PRE-install process?"
"RTN","SDPRE707",34,0)
 . D ^DIR
"RTN","SDPRE707",35,0)
 . S:$G(Y)'=0 STOP=1
"RTN","SDPRE707",36,0)
 . G:$G(Y)=0 Q1
"RTN","SDPRE707",37,0)
 . G:$G(STOP)=1 QABORT
"RTN","SDPRE707",38,0)
 ;
"RTN","SDPRE707",39,0)
Q2 ; QUESTION 2 - PORT NUMBER - PRE 2
"RTN","SDPRE707",40,0)
 G:$G(STOP)=1 QABORT
"RTN","SDPRE707",41,0)
 N X,Y,DIR,DTOUT,DUOUT,DIRUT
"RTN","SDPRE707",42,0)
 S DIR("A")="PLEASE ENTER THE HEALTHCONNECT SERVER PORT NUMBER"
"RTN","SDPRE707",43,0)
 S DIR(0)="F"
"RTN","SDPRE707",44,0)
 D ^DIR S PRE2=X
"RTN","SDPRE707",45,0)
 I $G(PRE2)="^"!($G(PRE2)="") D
"RTN","SDPRE707",46,0)
 . N X,Y,DIR,DTOUT,DUOUT,DIRUT
"RTN","SDPRE707",47,0)
 . S DIR(0)="Y"
"RTN","SDPRE707",48,0)
 . S DIR("A",1)="Quitting out will result in the CCRA-NAK logical link not being installed."
"RTN","SDPRE707",49,0)
 . S DIR("A",2)="The CCRA-NAK logical link is required and must be configured for this patch to work properly."
"RTN","SDPRE707",50,0)
 . S DIR("A")="Are you sure you want to exit out of the PRE-install process?"
"RTN","SDPRE707",51,0)
 . D ^DIR
"RTN","SDPRE707",52,0)
 . S:$G(Y)'=0 STOP=1
"RTN","SDPRE707",53,0)
 . G:$G(Y)=0 Q2
"RTN","SDPRE707",54,0)
 . G:$G(STOP)=1 QABORT
"RTN","SDPRE707",55,0)
 ;
"RTN","SDPRE707",56,0)
 ; file link with IP address and port entered
"RTN","SDPRE707",57,0)
 G:$G(STOP)=1 QABORT
"RTN","SDPRE707",58,0)
 K FDA,LIEN,SDERR
"RTN","SDPRE707",59,0)
 S FDA(870,"+1,",.01)="CCRA-NAK"
"RTN","SDPRE707",60,0)
 S FDA(870,"+1,",.02)=$$KSP^XUPARAM("INST") ; site station number
"RTN","SDPRE707",61,0)
 S FDA(870,"+1,",2)=4              ; TCP/IP
"RTN","SDPRE707",62,0)
 S FDA(870,"+1,",4.5)=1            ; auto start
"RTN","SDPRE707",63,0)
 S FDA(870,"+1,",400.01)=$G(PRE1) ; ip address
"RTN","SDPRE707",64,0)
 S FDA(870,"+1,",400.02)=$G(PRE2) ; hl7 port
"RTN","SDPRE707",65,0)
 S FDA(870,"+1,",400.03)="C"       ; Client (Sender) TCP/IP Service Type
"RTN","SDPRE707",66,0)
 ; S FDA(870,"+1,",400.08)=$G(PRE2) ; hlo port
"RTN","SDPRE707",67,0)
 D UPDATE^DIE(,"FDA","LIEN","SDERR") K FDA
"RTN","SDPRE707",68,0)
 D MES^XPDUTL("")
"RTN","SDPRE707",69,0)
 I $D(SDERR) D  Q  ; something went wrong
"RTN","SDPRE707",70,0)
 .D MES^XPDUTL("FileMan error when creating the CCCRA-NAK Link.")
"RTN","SDPRE707",71,0)
 D MES^XPDUTL("CCRA-NAK Link has been updated.")
"RTN","SDPRE707",72,0)
QEND K DIR,SDERR Q
"RTN","SDPRE707",73,0)
QABORT S XPDABORT=1 K DIR,SDERR Q
"VER")
8.0^22.2
"BLD",11162,6)
^586
**END**
**END**

