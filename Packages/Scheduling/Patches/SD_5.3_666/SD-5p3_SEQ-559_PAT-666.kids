Released SD*5.3*666 SEQ #559
Extracted from mail message
**KIDS**:SD*5.3*666^

**INSTALL NAME**
SD*5.3*666
"BLD",10319,0)
SD*5.3*666^SCHEDULING^0^3170706^y
"BLD",10319,1,0)
^^1^1^3170706^^^^
"BLD",10319,1,1,0)
PCMM API Date check function.
"BLD",10319,4,0)
^9.64PA^^
"BLD",10319,6.3)
4
"BLD",10319,"ABPKG")
n
"BLD",10319,"KRN",0)
^9.67PA^779.2^20
"BLD",10319,"KRN",.4,0)
.4
"BLD",10319,"KRN",.401,0)
.401
"BLD",10319,"KRN",.402,0)
.402
"BLD",10319,"KRN",.403,0)
.403
"BLD",10319,"KRN",.5,0)
.5
"BLD",10319,"KRN",.84,0)
.84
"BLD",10319,"KRN",3.6,0)
3.6
"BLD",10319,"KRN",3.8,0)
3.8
"BLD",10319,"KRN",9.2,0)
9.2
"BLD",10319,"KRN",9.8,0)
9.8
"BLD",10319,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",10319,"KRN",9.8,"NM",1,0)
SCAPU1^^0^B7363438
"BLD",10319,"KRN",9.8,"NM",2,0)
SCAPMC12^^0^B6118369
"BLD",10319,"KRN",9.8,"NM",3,0)
SCAPMCU1^^0^B35880589
"BLD",10319,"KRN",9.8,"NM","B","SCAPMC12",2)

"BLD",10319,"KRN",9.8,"NM","B","SCAPMCU1",3)

"BLD",10319,"KRN",9.8,"NM","B","SCAPU1",1)

"BLD",10319,"KRN",19,0)
19
"BLD",10319,"KRN",19.1,0)
19.1
"BLD",10319,"KRN",101,0)
101
"BLD",10319,"KRN",409.61,0)
409.61
"BLD",10319,"KRN",771,0)
771
"BLD",10319,"KRN",779.2,0)
779.2
"BLD",10319,"KRN",870,0)
870
"BLD",10319,"KRN",8989.51,0)
8989.51
"BLD",10319,"KRN",8989.52,0)
8989.52
"BLD",10319,"KRN",8994,0)
8994
"BLD",10319,"KRN","B",.4,.4)

"BLD",10319,"KRN","B",.401,.401)

"BLD",10319,"KRN","B",.402,.402)

"BLD",10319,"KRN","B",.403,.403)

"BLD",10319,"KRN","B",.5,.5)

"BLD",10319,"KRN","B",.84,.84)

"BLD",10319,"KRN","B",3.6,3.6)

"BLD",10319,"KRN","B",3.8,3.8)

"BLD",10319,"KRN","B",9.2,9.2)

"BLD",10319,"KRN","B",9.8,9.8)

"BLD",10319,"KRN","B",19,19)

"BLD",10319,"KRN","B",19.1,19.1)

"BLD",10319,"KRN","B",101,101)

"BLD",10319,"KRN","B",409.61,409.61)

"BLD",10319,"KRN","B",771,771)

"BLD",10319,"KRN","B",779.2,779.2)

"BLD",10319,"KRN","B",870,870)

"BLD",10319,"KRN","B",8989.51,8989.51)

"BLD",10319,"KRN","B",8989.52,8989.52)

"BLD",10319,"KRN","B",8994,8994)

"BLD",10319,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10319,"QUES",0)
^9.62^^
"BLD",10319,"REQB",0)
^9.611^3^3
"BLD",10319,"REQB",1,0)
SD*5.3*504^1
"BLD",10319,"REQB",2,0)
SD*5.3*177^1
"BLD",10319,"REQB",3,0)
SD*5.3*204^1
"BLD",10319,"REQB","B","SD*5.3*177",2)

"BLD",10319,"REQB","B","SD*5.3*204",3)

"BLD",10319,"REQB","B","SD*5.3*504",1)

"MBREQ")
0
"PKG",48,-1)
1^1
"PKG",48,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",48,20,0)
^9.402P^^
"PKG",48,22,0)
^9.49I^1^1
"PKG",48,22,1,0)
5.3^3051119^2960613
"PKG",48,22,1,"PAH",1,0)
666^3170706
"PKG",48,22,1,"PAH",1,1,0)
^^1^1^3170706
"PKG",48,22,1,"PAH",1,1,1,0)
PCMM API Date check function.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","SCAPMC12")
0^2^B6118369^B6077287
"RTN","SCAPMC12",1,0)
SCAPMC12 ;ALB/REW - Team API's: TPPR ; 2/10/00 8:14am ;07/06/2017
"RTN","SCAPMC12",2,0)
 ;;5.3;Scheduling;**41,204,666**;AUG 13, 1993;Build 4
"RTN","SCAPMC12",3,0)
 ;;1.0
"RTN","SCAPMC12",4,0)
TPPR(SC200,SCDATES,SCPURPA,SCROLEA,SCLIST,SCERR) ; -- positions for a pract
"RTN","SCAPMC12",5,0)
 ; input:
"RTN","SCAPMC12",6,0)
 ; SC200 = ien of NEW PERSON file(#200) [required]
"RTN","SCAPMC12",7,0)
 ; SCDATES("BEGIN") = begin date to search (inclusive)
"RTN","SCAPMC12",8,0)
 ;                      [default: TODAY]
"RTN","SCAPMC12",9,0)
 ;        ("END")   = end date to search (inclusive)
"RTN","SCAPMC12",10,0)
 ;                      [default: TODAY]
"RTN","SCAPMC12",11,0)
 ;        ("INCL")  = 1: only use patients who were assigned to
"RTN","SCAPMC12",12,0)
 ;                       team for entire date range
"RTN","SCAPMC12",13,0)
 ;                    0: anytime in date range
"RTN","SCAPMC12",14,0)
 ;                      [default: 1] 
"RTN","SCAPMC12",15,0)
 ;  SCPURPA -array of pointers to team purpose file 403.47
"RTN","SCAPMC12",16,0)
 ;          if none are defined - returns all teams
"RTN","SCAPMC12",17,0)
 ;          if @SCPURPA@('exclude') is defined - exclude listed teams
"RTN","SCAPMC12",18,0)
 ;  SCROLEA - array of pointers to standard position file 403.46
"RTN","SCAPMC12",19,0)
 ;          if none are defined - returns all positions
"RTN","SCAPMC12",20,0)
 ;          if @SCROLEA@('exclude') is defined - exclude listed roles
"RTN","SCAPMC12",21,0)
 ;  SCLIST -array name to store list
"RTN","SCAPMC12",22,0)
 ;          [ex. ^TMP("SCPT",$J)]
"RTN","SCAPMC12",23,0)
 ;        
"RTN","SCAPMC12",24,0)
 ;  SCERR = array NAME to store error messages.
"RTN","SCAPMC12",25,0)
 ;          [ex. ^TMP("ORXX",$J)]
"RTN","SCAPMC12",26,0)
 ;
"RTN","SCAPMC12",27,0)
 ; Output:
"RTN","SCAPMC12",28,0)
 ;  SCLIST() = array of positions (includes SCTP xref)
"RTN","SCAPMC12",29,0)
 ;             Format:
"RTN","SCAPMC12",30,0)
 ;               Subscript: Sequential # from 1 to n
"RTN","SCAPMC12",31,0)
 ;               Piece     Description
"RTN","SCAPMC12",32,0)
 ;                 1       IEN of TEAM POSITION File (#404.57)
"RTN","SCAPMC12",33,0)
 ;                 2       Name of Position
"RTN","SCAPMC12",34,0)
 ;                 3       IEN of Team #404.51
"RTN","SCAPMC12",35,0)
 ;                 4       IEN of file #404.59 (Tm Pos History)
"RTN","SCAPMC12",36,0)
 ;                 5       current effective date
"RTN","SCAPMC12",37,0)
 ;                 6       current inactivate date (if any)
"RTN","SCAPMC12",38,0)
 ;                 7       pointer to 403.46 (role)
"RTN","SCAPMC12",39,0)
 ;                 8       Name of Standard Role
"RTN","SCAPMC12",40,0)
 ;                 9       pointer to User Class (#8930)
"RTN","SCAPMC12",41,0)
 ;                10       Name of User Class
"RTN","SCAPMC12",42,0)
 ;                Subscript: "SCTP",SCTM,IEN =""
"RTN","SCAPMC12",43,0)
 ;
"RTN","SCAPMC12",44,0)
 ;  SCERR() = Array of DIALOG file messages(errors) .
"RTN","SCAPMC12",45,0)
 ;  @SCERR@(0) = number of errors, undefined if none
"RTN","SCAPMC12",46,0)
 ;             Format:
"RTN","SCAPMC12",47,0)
 ;               Subscript: Sequential # from 1 to n
"RTN","SCAPMC12",48,0)
 ;               Piece     Description
"RTN","SCAPMC12",49,0)
 ;                 1       IEN of DIALOG file
"RTN","SCAPMC12",50,0)
 ;  Returned: 1 if ok, 0 if error
"RTN","SCAPMC12",51,0)
 ;
"RTN","SCAPMC12",52,0)
 ;
"RTN","SCAPMC12",53,0)
ST N SCTPA,SCTPA,SCTPA0,SCTP,SCR,SCACTHIS,SCTM,SCTPPR,SCPTA
"RTN","SCAPMC12",54,0)
 N SCLSEQ,SCN,SCESEQ,SCPARM,SCBEGIN,SCEND,SCINCL,SCDTS
"RTN","SCAPMC12",55,0)
 ; -- initialize control variables
"RTN","SCAPMC12",56,0)
 G:'$$OKDATA PRACQ
"RTN","SCAPMC12",57,0)
 ; -- loop through position assignment history
"RTN","SCAPMC12",58,0)
 S SCTPA=0
"RTN","SCAPMC12",59,0)
 F  S SCTPA=$O(^SCTM(404.52,"C",SC200,SCTPA)) Q:'SCTPA  D
"RTN","SCAPMC12",60,0)
 .S SCTPA0=$G(^SCTM(404.52,SCTPA,0))
"RTN","SCAPMC12",61,0)
 .S SCTP=+$P(SCTPA0,U,1)
"RTN","SCAPMC12",62,0)
 .Q:'SCTP
"RTN","SCAPMC12",63,0)
 .S SCTM=+$P($G(^SCTM(404.57,SCTP,0)),U,2)
"RTN","SCAPMC12",64,0)
 .Q:'SCTM
"RTN","SCAPMC12",65,0)
 .S SCACTHIS=$$ACTHIST^SCAPMCU2(404.52,SCTP,.SCDATES,SCERR,"SCTPPR") ;666
"RTN","SCAPMC12",66,0)
 .Q:'SCACTHIS
"RTN","SCAPMC12",67,0)
 .;
"RTN","SCAPMC12",68,0)
 .;djb/bp Next line fixes NOIS NOP-0499-11252 & ISA-0899-12551
"RTN","SCAPMC12",69,0)
 .Q:$P(SCACTHIS,"^",2)'=SCTPA
"RTN","SCAPMC12",70,0)
 .;
"RTN","SCAPMC12",71,0)
 .S SCP=+$P($G(^SCTM(404.51,+SCTM,0)),U,3)
"RTN","SCAPMC12",72,0)
 .Q:'$$OKARRAY^SCAPU1(.SCPURPA,.SCP)
"RTN","SCAPMC12",73,0)
 .S SCPTA=0
"RTN","SCAPMC12",74,0)
 .S SCR=+$P($G(^SCTM(404.57,SCTP,0)),U,3)
"RTN","SCAPMC12",75,0)
 .Q:'$$OKARRAY^SCAPU1(.SCROLEA,.SCR)
"RTN","SCAPMC12",76,0)
 .D BLD^SCAPMC24(.SCLIST,SCTM,SCTP,SCACTHIS,SCR)
"RTN","SCAPMC12",77,0)
PRACQ Q $G(@SCERR@(0))<1
"RTN","SCAPMC12",78,0)
 ;
"RTN","SCAPMC12",79,0)
OKDATA() ;setup/check variables
"RTN","SCAPMC12",80,0)
 N SCOK
"RTN","SCAPMC12",81,0)
 S SCOK=1
"RTN","SCAPMC12",82,0)
 D INIT^SCAPMCU1(.SCOK) ; set default dates & error array (if undefined)
"RTN","SCAPMC12",83,0)
 IF '$D(^VA(200,+$G(SC200),0)) D  S SCOK=0
"RTN","SCAPMC12",84,0)
 . S SCPARM("Practitioner")=$G(SC200,"Undefined")
"RTN","SCAPMC12",85,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMC12",86,0)
 ;
"RTN","SCAPMC12",87,0)
 Q SCOK
"RTN","SCAPMC12",88,0)
 ;
"RTN","SCAPMCU1")
0^3^B35880589^B35098425
"RTN","SCAPMCU1",1,0)
SCAPMCU1 ;ALB/REW - TEAM API UTILITIES ; 7/12/99 9:33am ;07/06/2017
"RTN","SCAPMCU1",2,0)
 ;;5.3;Scheduling;**41,45,48,177,666**;AUG 13, 1993;Build 4
"RTN","SCAPMCU1",3,0)
 ;;1.0
"RTN","SCAPMCU1",4,0)
INIT(SCOK) ; setup date array &  error arrays if none passed in
"RTN","SCAPMCU1",5,0)
 ;  VARIABLES SET:
"RTN","SCAPMCU1",6,0)
 ;     SCOK - SET TO 0 IF ERROR
"RTN","SCAPMCU1",7,0)
 ;
"RTN","SCAPMCU1",8,0)
 ;  Makes sure the following are defined:
"RTN","SCAPMCU1",9,0)
 ;   scbegin,scend,scincl,@scdates('begin'),@scdates@('end'),@scdates@('incl') - defaults are today & inclusive
"RTN","SCAPMCU1",10,0)
 ;
"RTN","SCAPMCU1",11,0)
 ;    Note: you should NEW the above just before making this call
"RTN","SCAPMCU1",12,0)
 ;                     ---
"RTN","SCAPMCU1",13,0)
 N SCNOW ;666
"RTN","SCAPMCU1",14,0)
 S (SCN,SCESEQ,SCLSEQ)=0
"RTN","SCAPMCU1",15,0)
 IF '$L($G(SCERR)) K ^TMP("SCERR",$J) S SCERR="^TMP(""SCERR"",$J)"
"RTN","SCAPMCU1",16,0)
 IF '$L($G(SCLIST)) S SCLIST="^TMP(""SC TMP LIST"",$J)" K ^TMP("SC TMP LIST",$J)
"RTN","SCAPMCU1",17,0)
 IF (SCERR="SCERR")!(SCERR="SCLIST")!((SCERR'?1A1.7AN)&(SCERR'?1"^"1A.20E)) D  S SCOK=0
"RTN","SCAPMCU1",18,0)
 . S SCPARM("ERROR ARRAY")=$G(SCERR,"Undefined")
"RTN","SCAPMCU1",19,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMCU1",20,0)
 IF SCLIST="SCERR"!(SCLIST="SCLIST")!((SCLIST'?1A1.7AN.1"(".60E)&(SCLIST'?1"^"1A1.7AN.1"(".60E)) S SCOK=0 D  S SCOK=0
"RTN","SCAPMCU1",21,0)
 . S SCPARM("OUTPUT ARRAY")=$G(SCLIST,"Undefined")
"RTN","SCAPMCU1",22,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMCU1",23,0)
 S:'$D(SCDATES)!($G(SCDATES)="") SCDATES="SCDTS"
"RTN","SCAPMCU1",24,0)
 S SCNOW=$$NOW^XLFDT ;666
"RTN","SCAPMCU1",25,0)
 S SCBEGIN=$G(@SCDATES@("BEGIN"),SCNOW),SCBEGIN=$S(SCBEGIN:SCBEGIN,1:SCNOW) ;666
"RTN","SCAPMCU1",26,0)
 S SCEND=$G(@SCDATES@("END"),SCNOW),SCEND=$S(SCEND:SCEND,1:SCNOW) ;666
"RTN","SCAPMCU1",27,0)
 S SCINCL=$G(@SCDATES@("INCL"),1)
"RTN","SCAPMCU1",28,0)
 S (SCN,SCESEQ,SCLSEQ)=0
"RTN","SCAPMCU1",29,0)
 S:'$D(@SCDATES@("BEGIN")) @SCDATES@("BEGIN")=SCBEGIN
"RTN","SCAPMCU1",30,0)
 S:'$D(@SCDATES@("END")) @SCDATES@("END")=SCEND
"RTN","SCAPMCU1",31,0)
 S:'$D(@SCDATES@("INCL")) @SCDATES@("INCL")=SCINCL
"RTN","SCAPMCU1",32,0)
 Q
"RTN","SCAPMCU1",33,0)
 ;
"RTN","SCAPMCU1",34,0)
 ; bp/cmf 177 - added SCFUTURE input param, used at PCPOSCNT+17
"RTN","SCAPMCU1",35,0)
 ;;bp/cmf 177; orig entry call; PCPOSCNT(SCTP,SCDATE,SCPCONLY);this is a more efficient count of PC patients assigned to position
"RTN","SCAPMCU1",36,0)
PCPOSCNT(SCTP,SCDATE,SCPCONLY,SCFUTURE) ;this is a more efficient count of PC patients assigned to position
"RTN","SCAPMCU1",37,0)
 ; Input: SCTP - ien to 404.57
"RTN","SCAPMCU1",38,0)
 ;        SCDATE - date of concern, default=DT
"RTN","SCAPMCU1",39,0)
 ;        SCPCONLY - 1= must be pc, 0=all assignments 1=DEFAULT
"RTN","SCAPMCU1",40,0)
 ;        SCFUTURE - 1= include future, 0=current 0=DEFAULT ;;bp/cmf 177
"RTN","SCAPMCU1",41,0)
 ;returns count of patient assignments or -1 if error
"RTN","SCAPMCU1",42,0)
 N SCPTPA,SCCNT,SCHSTIEN,SCNODE
"RTN","SCAPMCU1",43,0)
 Q:'$G(SCTP) -1
"RTN","SCAPMCU1",44,0)
 S SCDATE=$G(SCDATE,DT)
"RTN","SCAPMCU1",45,0)
 S:'$L($G(SCPCONLY)) SCPCONLY=1
"RTN","SCAPMCU1",46,0)
 S:'$L($G(SCFUTURE)) SCFUTURE=0 ;;bp/cmf 177 add
"RTN","SCAPMCU1",47,0)
 S (SCPTPA,SCCNT)=0
"RTN","SCAPMCU1",48,0)
 F  S SCPTPA=$O(^SCPT(404.43,"APTPA",SCTP,SCPTPA)) Q:'SCPTPA  D
"RTN","SCAPMCU1",49,0)
 .S SCHSTIEN=0
"RTN","SCAPMCU1",50,0)
 .F  S SCHSTIEN=$O(^SCPT(404.43,"APTPA",SCTP,SCPTPA,SCHSTIEN)) Q:'SCHSTIEN  D
"RTN","SCAPMCU1",51,0)
 ..S SCNODE=$G(^SCPT(404.43,SCHSTIEN,0))
"RTN","SCAPMCU1",52,0)
 ..Q:$P(SCNODE,U,4)&($P(SCNODE,U,4)<SCDATE)
"RTN","SCAPMCU1",53,0)
 ..;;bp/cmf 177;orig code;;Q:$P(SCNODE,U,3)>SCDATE
"RTN","SCAPMCU1",54,0)
 ..Q:('SCFUTURE)&($P(SCNODE,U,3)>SCDATE)  ;;bp/cmf 177 mod-use scfuture
"RTN","SCAPMCU1",55,0)
 ..Q:SCPCONLY&('$P(SCNODE,U,5))  ;pc role is not 1 or 2
"RTN","SCAPMCU1",56,0)
 ..S SCCNT=SCCNT+1
"RTN","SCAPMCU1",57,0)
 Q SCCNT
"RTN","SCAPMCU1",58,0)
 ;
"RTN","SCAPMCU1",59,0)
TEAMCNT(SCTM,DATE) ;this is a more efficient version of the count
"RTN","SCAPMCU1",60,0)
 N DFN,SCCNT,SCNODE,HISTIEN
"RTN","SCAPMCU1",61,0)
 Q:'$G(SCTM) 0
"RTN","SCAPMCU1",62,0)
 S DATE=$G(DATE,DT)
"RTN","SCAPMCU1",63,0)
 S (DFN,SCCNT)=0
"RTN","SCAPMCU1",64,0)
 F  S DFN=$O(^SCPT(404.42,"ATMPT",SCTM,DFN)) Q:'DFN  D
"RTN","SCAPMCU1",65,0)
 .S HISTIEN=0
"RTN","SCAPMCU1",66,0)
 .F  S HISTIEN=$O(^SCPT(404.42,"ATMPT",SCTM,DFN,HISTIEN)) Q:'HISTIEN  D
"RTN","SCAPMCU1",67,0)
 ..S SCNODE=$G(^SCPT(404.42,HISTIEN,0))
"RTN","SCAPMCU1",68,0)
 ..Q:$P(SCNODE,U,9)&($P(SCNODE,U,9)<DATE)
"RTN","SCAPMCU1",69,0)
 ..Q:$P(SCNODE,U,2)>DATE
"RTN","SCAPMCU1",70,0)
 ..S SCCNT=SCCNT+1
"RTN","SCAPMCU1",71,0)
 Q SCCNT
"RTN","SCAPMCU1",72,0)
 ;
"RTN","SCAPMCU1",73,0)
TEAMCNT2(SCTM,DATE) ;this is the count of patients assigned to the team on a date
"RTN","SCAPMCU1",74,0)
 ; Input: SCTM - ien to 404.51
"RTN","SCAPMCU1",75,0)
 ;        DATE - date of concern, default=DT
"RTN","SCAPMCU1",76,0)
 N SCX,SCDATES,SCTEAMS,SCERR,X
"RTN","SCAPMCU1",77,0)
 S SCDATES("BEGIN")=$G(DATE,DT)
"RTN","SCAPMCU1",78,0)
 S SCDATES("END")=SCDATES("BEGIN")
"RTN","SCAPMCU1",79,0)
 S SCX=$$PTTM^SCAPMC(SCTM,"SCDATES","^TMP(""SCTEAMS"",$J,""CNT"")","SCERRX")
"RTN","SCAPMCU1",80,0)
 IF 'SCX S X=-SCX
"RTN","SCAPMCU1",81,0)
 ELSE  D
"RTN","SCAPMCU1",82,0)
 .S DFN=0
"RTN","SCAPMCU1",83,0)
 .F X=0:1 S DFN=$O(^TMP("SCTEAMS",$J,"CNT","SCPTA",DFN)) Q:'DFN
"RTN","SCAPMCU1",84,0)
 K ^TMP("SCTEAMS",$J,"CNT")
"RTN","SCAPMCU1",85,0)
 Q X
"RTN","SCAPMCU1",86,0)
ACTHISTB(FILE,IEN) ;boolean active function
"RTN","SCAPMCU1",87,0)
 ;MOVED TO SCAPMCU2
"RTN","SCAPMCU1",88,0)
 Q $$ACTHISTB^SCAPMCU2(.FILE,.IEN)
"RTN","SCAPMCU1",89,0)
ACTHIST(FILE,IEN,SCDATES,SCERR) ;is entry active for a time period?
"RTN","SCAPMCU1",90,0)
 ;MOVED TO SCAPMCU2
"RTN","SCAPMCU1",91,0)
 Q $$ACTHIST^SCAPMCU2(.FILE,.IEN,.SCDATES,.SCERR)
"RTN","SCAPMCU1",92,0)
 ;
"RTN","SCAPMCU1",93,0)
LASTDATE(FILE,IEN) ;gets last date for team or position from 404.52,404.58,404.59 - uses DATES function below
"RTN","SCAPMCU1",94,0)
 ; Input Parameters:
"RTN","SCAPMCU1",95,0)
 ;    File = either 404.52 or 404.58 or 404.59
"RTN","SCAPMCU1",96,0)
 ;    IEN  = pointer to team(404.51) or team position(404.57)
"RTN","SCAPMCU1",97,0)
 ; Returned:
"RTN","SCAPMCU1",98,0)
 ;  -1 if error,o/w latest date defined 0=no historical dates
"RTN","SCAPMCU1",99,0)
 N SCX
"RTN","SCAPMCU1",100,0)
 S SCX=$$DATES(.FILE,.IEN,3990101) ; gets dates as of 1/1/2999
"RTN","SCAPMCU1",101,0)
 Q $S($P(SCX,U,1)<0:-1,$P(SCX,U,3):$P(SCX,U,3),1:+$P(SCX,U,2))
"RTN","SCAPMCU1",102,0)
 ;
"RTN","SCAPMCU1",103,0)
DATES(FILE,IEN,DATE) ;used to return latest activation & inactivation date
"RTN","SCAPMCU1",104,0)
 ; Input Parameters:
"RTN","SCAPMCU1",105,0)
 ;    File = either 404.52, 404.53, 404.58, or 404.59
"RTN","SCAPMCU1",106,0)
 ;    IEN  = pointer to team(404.51) or team position(404.57)
"RTN","SCAPMCU1",107,0)
 ;    DATE = default=DT
"RTN","SCAPMCU1",108,0)
 ;  Returned:
"RTN","SCAPMCU1",109,0)
 ;  status^actdate^inactdate^scien^first actdate? [1=yes/null=no]
"RTN","SCAPMCU1",110,0)
ST N ROOT,EFFDT,STATUS,ACTDT,INACTDT,X,FUTURE,PREVDT,SCTODAY,PREVST,SCSTAT,SCIEN,SCLAST
"RTN","SCAPMCU1",111,0)
 S:'$G(DATE) DATE=DT
"RTN","SCAPMCU1",112,0)
 S STATUS=-1,SCTODAY=0
"RTN","SCAPMCU1",113,0)
 S SCSTAT=1
"RTN","SCAPMCU1",114,0)
 ;bp/cmf - 177 change begin
"RTN","SCAPMCU1",115,0)
 G:('$G(FILE))!("^404.52^404.53^404.58^404.59^"'[$G(FILE))!('$G(IEN)) QTDATES
"RTN","SCAPMCU1",116,0)
 ;orig;G:('$G(FILE))!("^404.52^404.58^404.59^"'[$G(FILE))!('$G(IEN)) QTDATES
"RTN","SCAPMCU1",117,0)
 ;bp/cmf - 177 change begin
"RTN","SCAPMCU1",118,0)
 S ROOT="^SCTM("_FILE_",""AIDT"",IEN,SCSTAT"
"RTN","SCAPMCU1",119,0)
 S EFFDT=-DATE
"RTN","SCAPMCU1",120,0)
 S X=ROOT_")"
"RTN","SCAPMCU1",121,0)
 ;if there is an active x-ref
"RTN","SCAPMCU1",122,0)
 IF $D(@X) D
"RTN","SCAPMCU1",123,0)
 .;if today is an activation date
"RTN","SCAPMCU1",124,0)
 .IF $D(@X@(EFFDT)) S ACTDT=-EFFDT
"RTN","SCAPMCU1",125,0)
 .;if today is not an activation date get previous one
"RTN","SCAPMCU1",126,0)
 .ELSE  D
"RTN","SCAPMCU1",127,0)
 ..S ACTDT=-$O(@X@(EFFDT))
"RTN","SCAPMCU1",128,0)
 .;if no activation in past get one in future
"RTN","SCAPMCU1",129,0)
 .S:'$G(ACTDT) ACTDT=-$O(@X@(EFFDT),-1),FUTURE=1
"RTN","SCAPMCU1",130,0)
 .S SCSTAT=0
"RTN","SCAPMCU1",131,0)
 .S INACTDT=$O(@X@(-(ACTDT-.000001)),-1),INACTDT=$S(INACTDT:-INACTDT,1:INACTDT)
"RTN","SCAPMCU1",132,0)
 .S STATUS=$$DTCHK^SCAPU1(DATE,DATE,0,ACTDT,INACTDT)
"RTN","SCAPMCU1",133,0)
 .S SCSTAT=STATUS
"RTN","SCAPMCU1",134,0)
 .S X=ROOT_","_$S(SCSTAT:-ACTDT,1:-INACTDT)_")"
"RTN","SCAPMCU1",135,0)
 .S SCIEN=$O(@X@(0))
"RTN","SCAPMCU1",136,0)
 ELSE  D
"RTN","SCAPMCU1",137,0)
 .S STATUS=0
"RTN","SCAPMCU1",138,0)
QTDATES Q STATUS_U_$G(ACTDT)_U_$G(INACTDT)_U_$G(SCIEN)_U_$G(FUTURE)
"RTN","SCAPMCU1",139,0)
 ;
"RTN","SCAPMCU1",140,0)
ERR(SEQ,ERNUM,PARMS,OUTPUT,SCER) ;-- process errors
"RTN","SCAPMCU1",141,0)
 ;if no dialog entry 4040000 will be processed
"RTN","SCAPMCU1",142,0)
 S ERNUM=$G(ERNUM,4040000)
"RTN","SCAPMCU1",143,0)
 S:'$$GET1^DIQ(.84,$G(ERNUM)_",",.01) ERNUM=4040000
"RTN","SCAPMCU1",144,0)
 IF SCER]"" D
"RTN","SCAPMCU1",145,0)
 . S SEQ=$G(SEQ,0)+1
"RTN","SCAPMCU1",146,0)
 . S SCER(SEQ)=ERNUM
"RTN","SCAPMCU1",147,0)
 . ;S @SCER@(0)=$G(@SCER@(0))+1 ;bp/djb 7/12/99
"RTN","SCAPMCU1",148,0)
 . S SCER(0)=$G(SCER(0))+1
"RTN","SCAPMCU1",149,0)
 . ;D BLD^DIALOG(.ERNUM,.PARMS,.OUTPUT,.SCER) ;bp/djb 7/12/99
"RTN","SCAPMCU1",150,0)
 . D BLD^DIALOG(.ERNUM,.PARMS,.OUTPUT,"SCER")
"RTN","SCAPMCU1",151,0)
 Q
"RTN","SCAPMCU1",152,0)
 ;
"RTN","SCAPMCU1",153,0)
OKTMPOS(TEAM,POSITION,DATE) ;validate legitimate position in a team for a dt
"RTN","SCAPMCU1",154,0)
 ; used in screen for pc practitioner position of patient team assngt
"RTN","SCAPMCU1",155,0)
 ;
"RTN","SCAPMCU1",156,0)
 ; TEAM - ien of team file
"RTN","SCAPMCU1",157,0)
 ; POSITION - ien of team position file
"RTN","SCAPMCU1",158,0)
 ; DATE     - date of interest
"RTN","SCAPMCU1",159,0)
 ; return 1 if ok, 0 ow
"RTN","SCAPMCU1",160,0)
 ;
"RTN","SCAPMCU1",161,0)
CHK ;
"RTN","SCAPMCU1",162,0)
 N SCTP,SCOK,SCPOS0
"RTN","SCAPMCU1",163,0)
 S SCOK=0
"RTN","SCAPMCU1",164,0)
 S:'$L($G(SCERR)) SCERR="^TMP(""SCERR"",$J)"
"RTN","SCAPMCU1",165,0)
 IF '$D(^SCTM(404.51,+$G(TEAM),0)) D  G QTOKTP
"RTN","SCAPMCU1",166,0)
 . S SCPARM("TEAM")=$G(TEAM,"Undefined")
"RTN","SCAPMCU1",167,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMCU1",168,0)
 IF '$D(^SCTM(404.57,+$G(POSITION),0)) D  G QTOKTP
"RTN","SCAPMCU1",169,0)
 . S SCPARM("POSITION")=$G(POSITION,"Undefined")
"RTN","SCAPMCU1",170,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMCU1",171,0)
 IF '$G(DATE) D  G QTOKTP
"RTN","SCAPMCU1",172,0)
 . S SCPARM("DATE")=$G(DATE,"Undefined")
"RTN","SCAPMCU1",173,0)
 . D ERR^SCAPMCU1(.SCESEQ,4045101,.SCPARM,"",.SCERR)
"RTN","SCAPMCU1",174,0)
 S SCPOS0=$G(^SCTM(404.57,POSITION,0))
"RTN","SCAPMCU1",175,0)
 ;if position not linked to team
"RTN","SCAPMCU1",176,0)
 G QTOKTP:$P(SCPOS0,U,2)'=TEAM
"RTN","SCAPMCU1",177,0)
 ;if not active position
"RTN","SCAPMCU1",178,0)
 G QTOKTP:'$$DATES(404.59,POSITION,DATE)
"RTN","SCAPMCU1",179,0)
 S SCOK=1
"RTN","SCAPMCU1",180,0)
QTOKTP Q SCOK
"RTN","SCAPMCU1",181,0)
RSNDICS(EVCODE) ; -- called by input transform and screen logic for type of reason
"RTN","SCAPMCU1",182,0)
 ; Input: EVCODE = event code (e.g. ZM1)
"RTN","SCAPMCU1",183,0)
 ;  Used to check for fields that point to Scheduling Reason File
"RTN","SCAPMCU1",184,0)
 ;    Piece = Piece number of zero node of 
"RTN","SCAPMCU1",185,0)
 Q $P(^SD(403.43,$P(^(0),U,2),0),U,1)=EVCODE
"RTN","SCAPMCU1",186,0)
 ;
"RTN","SCAPMCU1",187,0)
OKPREC(TEAM) ; - called by screen logic for preceptor position file (#.1) of team position (#404.57) file
"RTN","SCAPMCU1",188,0)
 ;  Input; TEAM = Pointer to team file (#404.51) for team position with preceptor
"RTN","SCAPMCU1",189,0)
 ; requires position being assigned to be a possible preceptor position
"RTN","SCAPMCU1",190,0)
 ;  AND that position is from the same team as the supervised position
"RTN","SCAPMCU1",191,0)
 Q ($P(^SCTM(404.57,Y,0),U,12))&($P(^SCTM(404.57,Y,0),U,2)=TEAM)
"RTN","SCAPU1")
0^1^B7363438^B5697016
"RTN","SCAPU1",1,0)
SCAPU1 ;ALB/REW,HPE/ART - TEAM API UTILITIES ; 9/17/09 4:30pm ;07/06/2017
"RTN","SCAPU1",2,0)
 ;;5.3;Scheduling;**41,504,666**;AUG 13, 1993;Build 4
"RTN","SCAPU1",3,0)
 ;;1.0
"RTN","SCAPU1",4,0)
 Q
"RTN","SCAPU1",5,0)
 ;
"RTN","SCAPU1",6,0)
DTCHK2(SCDATES,ACTDT,INACTDT) ;given scdates array was it active?
"RTN","SCAPU1",7,0)
 N SCBEGIN,SCEND,SCINCL
"RTN","SCAPU1",8,0)
 D INIT^SCAPMCU1(1) ;set default array
"RTN","SCAPU1",9,0)
 Q $$DTCHK(SCBEGIN,SCEND,SCINCL,ACTDT,.INACTDT)
"RTN","SCAPU1",10,0)
 ;
"RTN","SCAPU1",11,0)
DTCHK(BEGINDT,ENDDT,INCL,ACTDT,INACTDT) ; -- given activation/inactivation dates and begin & end dates and include flag was it active?
"RTN","SCAPU1",12,0)
 ;Parameters:
"RTN","SCAPU1",13,0)
 ;  BEGINDT - begining date
"RTN","SCAPU1",14,0)
 ;  ENDDT   - ending date
"RTN","SCAPU1",15,0)
 ;  INCL    - 1= must be active for whole period to get a 'yes'/0 o/w
"RTN","SCAPU1",16,0)
 ;  ACTDT   - activation date for record
"RTN","SCAPU1",17,0)
 ;  INACTDT - inactivation date for record 
"RTN","SCAPU1",18,0)
 ;  returns: 1 = Active
"RTN","SCAPU1",19,0)
 ;           0 = Inactive
"RTN","SCAPU1",20,0)
 ;          -1 = Error
"RTN","SCAPU1",21,0)
 ; 
"RTN","SCAPU1",22,0)
 N OK
"RTN","SCAPU1",23,0)
 S OK=-1
"RTN","SCAPU1",24,0)
 G DTCHKQ:'$G(BEGINDT)!('$G(ENDDT))!('$G(ACTDT))
"RTN","SCAPU1",25,0)
 S OK=0
"RTN","SCAPU1",26,0)
 ;
"RTN","SCAPU1",27,0)
 ;check date params for timestamp, strip time if all date params do not have a timestamp - 666
"RTN","SCAPU1",28,0)
 IF ($G(INACTDT)&$P(INACTDT,".",2)="")!($P(ACTDT,".",2)="")!($P(BEGINDT,".",2)="")!($P(ENDDT,".",2)="") DO
"RTN","SCAPU1",29,0)
 . S INACTDT=$P(INACTDT,".",1)
"RTN","SCAPU1",30,0)
 . S ACTDT=$P(ACTDT,".",1)
"RTN","SCAPU1",31,0)
 . S BEGINDT=$P(BEGINDT,".",1)
"RTN","SCAPU1",32,0)
 . S ENDDT=$P(ENDDT,".",1)
"RTN","SCAPU1",33,0)
 ; begin is after inactivation
"RTN","SCAPU1",34,0)
 IF $G(INACTDT),BEGINDT>=INACTDT G DTCHKQ ;666
"RTN","SCAPU1",35,0)
 ; end is before effective date
"RTN","SCAPU1",36,0)
 IF ENDDT<ACTDT G DTCHKQ
"RTN","SCAPU1",37,0)
 ; inactivation exists & isn't after end
"RTN","SCAPU1",38,0)
 IF $G(INACTDT),INACTDT<=ENDDT G DTCHKQ ;666
"RTN","SCAPU1",39,0)
 ; just need 1 day in range
"RTN","SCAPU1",40,0)
 IF $G(INCL)=0 S OK=1 G DTCHKQ
"RTN","SCAPU1",41,0)
 ; begin is not before effective date
"RTN","SCAPU1",42,0)
 IF ACTDT>BEGINDT G DTCHKQ
"RTN","SCAPU1",43,0)
 ; inactivation exists & isn't after end
"RTN","SCAPU1",44,0)
 IF $G(INACTDT),INACTDT<=ENDDT G DTCHKQ ;666
"RTN","SCAPU1",45,0)
 S OK=1
"RTN","SCAPU1",46,0)
DTCHKQ Q OK
"RTN","SCAPU1",47,0)
 ;
"RTN","SCAPU1",48,0)
ERR(SEQ,ERNUM,PARMS,OUTPUT,SCER) ;-- process errors
"RTN","SCAPU1",49,0)
 ;if no dialog entry 4040000 will be processed
"RTN","SCAPU1",50,0)
 S ERNUM=$G(ERNUM,4040000)
"RTN","SCAPU1",51,0)
 S:'$$GET1^DIQ(.84,$G(ERNUM)_",",.01) ERNUM=4040000
"RTN","SCAPU1",52,0)
 IF SCER]"" D
"RTN","SCAPU1",53,0)
 . S SEQ=SEQ+1
"RTN","SCAPU1",54,0)
 . S SCER(SEQ)=ERNUM
"RTN","SCAPU1",55,0)
 .D BLD^DIALOG(.ERNUM,.PARMS,.OUTPUT,.SCER)
"RTN","SCAPU1",56,0)
 Q
"RTN","SCAPU1",57,0)
 ;
"RTN","SCAPU1",58,0)
OKARRAY(ARRAY,CHECK) ; see if input array says 'check' should be used
"RTN","SCAPU1",59,0)
 ;  DOES NOT change any varriables - $$okarray(.xx,.yy) is safe...
"RTN","SCAPU1",60,0)
 ;  if array is null OR undefined it is ok
"RTN","SCAPU1",61,0)
 ;  if @array@(check) is defined it is ok
"RTN","SCAPU1",62,0)
 ;  if @array@('exclude') is defined results switch
"RTN","SCAPU1",63,0)
 ;  RETURNS: 1: Yes use/0: No don't
"RTN","SCAPU1",64,0)
 Q $S('$L($G(CHECK)):1,'$L($G(ARRAY)):1,(ARRAY'?1A1.7AN):0,1:'(($D(@ARRAY@(CHECK))#2)=($D(@ARRAY@("EXCLUDE"))#2)))  ;changed to quit if check is not defined
"RTN","SCAPU1",65,0)
 ;
"RTN","SCAPU1",66,0)
OKUSRCL(USRARRAY,CHECK) ; see if input user class array says 'check' is ok
"RTN","SCAPU1",67,0)
 N SCOK,SCU
"RTN","SCAPU1",68,0)
 S SCOK=0
"RTN","SCAPU1",69,0)
 IF '$L($G(CHECK))!('$L($G(USRARRAY))) S SCOK=1 G QTOKUSR
"RTN","SCAPU1",70,0)
 IF (USRARRAY'?1A1.7AN)&(USRARRAY'?1"^"1A.E) G QTOKUSR
"RTN","SCAPU1",71,0)
 S SCU=0
"RTN","SCAPU1",72,0)
 IF $D(@USRARRAY@("EXCLUDE"))#2 D
"RTN","SCAPU1",73,0)
 .S SCOK=1
"RTN","SCAPU1",74,0)
 .F  S SCU=$O(@USRARRAY@(SCU)) Q:'SCU  S:(CHECK=SCU)!($$SUBCLASS^USRLM(CHECK,SCU)) SCOK=0
"RTN","SCAPU1",75,0)
 ELSE  D
"RTN","SCAPU1",76,0)
 .S SCOK=0
"RTN","SCAPU1",77,0)
 .F  S SCU=$O(@USRARRAY@(SCU)) Q:'SCU  S:(CHECK=SCU)!($$SUBCLASS^USRLM(CHECK,SCU)) SCOK=1
"RTN","SCAPU1",78,0)
 .
"RTN","SCAPU1",79,0)
QTOKUSR Q SCOK
"VER")
8.0^22.2
"BLD",10319,6)
^559
**END**
**END**

