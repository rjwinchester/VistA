Released LR*5.2*475 SEQ #377
Extracted from mail message
**KIDS**:LR*5.2*475^

**INSTALL NAME**
LR*5.2*475
"BLD",9786,0)
LR*5.2*475^LAB SERVICE^0^3160926^y
"BLD",9786,4,0)
^9.64PA^^
"BLD",9786,6.3)
1
"BLD",9786,"ABPKG")
n
"BLD",9786,"KRN",0)
^9.67PA^779.2^20
"BLD",9786,"KRN",.4,0)
.4
"BLD",9786,"KRN",.401,0)
.401
"BLD",9786,"KRN",.402,0)
.402
"BLD",9786,"KRN",.403,0)
.403
"BLD",9786,"KRN",.5,0)
.5
"BLD",9786,"KRN",.84,0)
.84
"BLD",9786,"KRN",3.6,0)
3.6
"BLD",9786,"KRN",3.8,0)
3.8
"BLD",9786,"KRN",9.2,0)
9.2
"BLD",9786,"KRN",9.8,0)
9.8
"BLD",9786,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",9786,"KRN",9.8,"NM",1,0)
LRVRAR^^0^B71328911
"BLD",9786,"KRN",9.8,"NM","B","LRVRAR",1)

"BLD",9786,"KRN",19,0)
19
"BLD",9786,"KRN",19.1,0)
19.1
"BLD",9786,"KRN",101,0)
101
"BLD",9786,"KRN",409.61,0)
409.61
"BLD",9786,"KRN",771,0)
771
"BLD",9786,"KRN",779.2,0)
779.2
"BLD",9786,"KRN",870,0)
870
"BLD",9786,"KRN",8989.51,0)
8989.51
"BLD",9786,"KRN",8989.52,0)
8989.52
"BLD",9786,"KRN",8994,0)
8994
"BLD",9786,"KRN","B",.4,.4)

"BLD",9786,"KRN","B",.401,.401)

"BLD",9786,"KRN","B",.402,.402)

"BLD",9786,"KRN","B",.403,.403)

"BLD",9786,"KRN","B",.5,.5)

"BLD",9786,"KRN","B",.84,.84)

"BLD",9786,"KRN","B",3.6,3.6)

"BLD",9786,"KRN","B",3.8,3.8)

"BLD",9786,"KRN","B",9.2,9.2)

"BLD",9786,"KRN","B",9.8,9.8)

"BLD",9786,"KRN","B",19,19)

"BLD",9786,"KRN","B",19.1,19.1)

"BLD",9786,"KRN","B",101,101)

"BLD",9786,"KRN","B",409.61,409.61)

"BLD",9786,"KRN","B",771,771)

"BLD",9786,"KRN","B",779.2,779.2)

"BLD",9786,"KRN","B",870,870)

"BLD",9786,"KRN","B",8989.51,8989.51)

"BLD",9786,"KRN","B",8989.52,8989.52)

"BLD",9786,"KRN","B",8994,8994)

"BLD",9786,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9786,"QUES",0)
^9.62^^
"BLD",9786,"REQB",0)
^9.611^1^1
"BLD",9786,"REQB",1,0)
LR*5.2*458^2
"BLD",9786,"REQB","B","LR*5.2*458",1)

"MBREQ")
0
"PKG",14,-1)
1^1
"PKG",14,0)
LAB SERVICE^LR^CORE LAB SYSTEM
"PKG",14,20,0)
^9.402P^1^1
"PKG",14,20,1,0)
2^^LRXDRPT
"PKG",14,20,1,1)

"PKG",14,20,"B",2,1)

"PKG",14,22,0)
^9.49I^1^1
"PKG",14,22,1,0)
5.2^2940927^2960610
"PKG",14,22,1,"PAH",1,0)
475^3160926
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","LRVRAR")
0^1^B71328911^B69815158
"RTN","LRVRAR",1,0)
LRVRAR ;DALOI/STAFF - AUTO RELEASE VERIFICATION ;9/26/16  12:37
"RTN","LRVRAR",2,0)
 ;;5.2;LAB SERVICE;**458,475**;Sep 27, 1994;Build 1
"RTN","LRVRAR",3,0)
 ;
"RTN","LRVRAR",4,0)
 ; ZEXCEPT is used to identify variables which are external to a specific TAG
"RTN","LRVRAR",5,0)
 ;         used in conjunction with Eclipse M-editor.
"RTN","LRVRAR",6,0)
 ;
"RTN","LRVRAR",7,0)
 ; Variables:
"RTN","LRVRAR",8,0)
 ;           DUZ = set to IEN of LRLAB,AUTO RELEASE application proxy in file #200
"RTN","LRVRAR",9,0)
 ;
"RTN","LRVRAR",10,0)
 ;         LRDUZ = set to IEN of either:
"RTN","LRVRAR",11,0)
 ;                     1. File #200 entry of LRLAB,AUTO VERIFY application proxy (LRDUZ("AV") if results were auto verified.
"RTN","LRVRAR",12,0)
 ;                     2. File #200 entry of LRLAB,AUTO RELEASE application proxy (LRDUZ("AR") when results are auto released.
"RTN","LRVRAR",13,0)
 ;
"RTN","LRVRAR",14,0)
 ;         LRDUZ("AR") = set to IEN of LRLAB,AUTO RELEASE application proxy in file #200
"RTN","LRVRAR",15,0)
 ;         LRDUZ("AV") = set to IEN of LRLAB,AUTO VERIFY application proxy in file #200
"RTN","LRVRAR",16,0)
 ;
"RTN","LRVRAR",17,0)
 ;         The variable LRDUZ is set in different places to one of the values in the LRDUZ array to represent the "user"
"RTN","LRVRAR",18,0)
 ;         for the software to use within the context of the operation to record who released the results and who performed
"RTN","LRVRAR",19,0)
 ;         the testing.
"RTN","LRVRAR",20,0)
 ;
"RTN","LRVRAR",21,0)
 ;
"RTN","LRVRAR",22,0)
EN ; Entry Point
"RTN","LRVRAR",23,0)
 ;  - call with LRLL=Load/Worklist IEN
"RTN","LRVRAR",24,0)
 ;
"RTN","LRVRAR",25,0)
 ;ZEXCEPT: LRLL,ZTREQ,ZTSTOP
"RTN","LRVRAR",26,0)
 ;
"RTN","LRVRAR",27,0)
 N DIQUIET,LA7624,LA76248,LA76249,LA7AAT,LAMSG,LRANYAA,LRAUTORELEASE,LRAUTOVERIFY,LRDELTACHKOK,LREND,LRERR,LRSQ
"RTN","LRVRAR",28,0)
 ;
"RTN","LRVRAR",29,0)
 S LRLL=+$G(LRLL)
"RTN","LRVRAR",30,0)
 ;
"RTN","LRVRAR",31,0)
 ; If no entries to process then quit
"RTN","LRVRAR",32,0)
 I '$D(^LAH(LRLL,1,"AUTOREL")) S:$D(ZTQUEUED) ZTREQ="@" Q
"RTN","LRVRAR",33,0)
 ;
"RTN","LRVRAR",34,0)
 ; See if already running and/or no one else is using this loasd list, i.e. user using EA (LRVR) to verify instrument data.
"RTN","LRVRAR",35,0)
 L +^LAH("Z",LRLL):DILOCKTM+10
"RTN","LRVRAR",36,0)
 E  S ZTREQ=$$HADD^XLFDT($H,0,0,5,0) D END Q
"RTN","LRVRAR",37,0)
 ;
"RTN","LRVRAR",38,0)
 D INIT^LRVRARU
"RTN","LRVRAR",39,0)
 I LREND D  Q
"RTN","LRVRAR",40,0)
 . D XQA^LA7UXQA(2,0,0,0,LAMSG,"")
"RTN","LRVRAR",41,0)
 . D END
"RTN","LRVRAR",42,0)
 ;
"RTN","LRVRAR",43,0)
 S LRSQ=0
"RTN","LRVRAR",44,0)
 F  S LRSQ=$O(^LAH(LRLL,1,"AUTOREL",LRSQ)) Q:LRSQ<1  D
"RTN","LRVRAR",45,0)
 . I $$S^%ZTLOAD("Processing loadlist "_$P(LRLL(0),"^")_", entry #"_LRSQ) S ZTSTOP=1 Q  ; Task has been requested to stop
"RTN","LRVRAR",46,0)
 . K LRERR
"RTN","LRVRAR",47,0)
 . S LA7624=$P(^LAH(LRLL,1,"AUTOREL",LRSQ),U,2)
"RTN","LRVRAR",48,0)
 . ; Interface message number in ^LAHM(62.49
"RTN","LRVRAR",49,0)
 . S LA76249=+$P($G(^LAH(LRLL,1,LRSQ,0)),U,13)
"RTN","LRVRAR",50,0)
 . ; File #62.48 configuration link
"RTN","LRVRAR",51,0)
 . S LA76248=""
"RTN","LRVRAR",52,0)
 . I LA76249 S LA76248=$$GET1^DIQ(62.49,LA76249_",",.5,"I")
"RTN","LRVRAR",53,0)
 . D LOOK,NEXT
"RTN","LRVRAR",54,0)
 D END
"RTN","LRVRAR",55,0)
 Q
"RTN","LRVRAR",56,0)
 ;
"RTN","LRVRAR",57,0)
 ;
"RTN","LRVRAR",58,0)
NEXT ; Clean up between entries
"RTN","LRVRAR",59,0)
 ;
"RTN","LRVRAR",60,0)
 ;ZEXCEPT: LRERR,LRLL,LRSQ,LRUID
"RTN","LRVRAR",61,0)
 ;
"RTN","LRVRAR",62,0)
 ; If no errors then remove record from LAH.
"RTN","LRVRAR",63,0)
 I $G(LRERR)<1 D ZAPALL^LRVR3(LRLL,LRSQ)
"RTN","LRVRAR",64,0)
 ;
"RTN","LRVRAR",65,0)
 D CLEAN^LRVRARU
"RTN","LRVRAR",66,0)
 Q
"RTN","LRVRAR",67,0)
 ;
"RTN","LRVRAR",68,0)
 ;
"RTN","LRVRAR",69,0)
END ; Clean up and quit
"RTN","LRVRAR",70,0)
 ;ZEXCEPT: LRLL,ZTQUEUED,ZTREQ
"RTN","LRVRAR",71,0)
 ;
"RTN","LRVRAR",72,0)
 ; Release locks
"RTN","LRVRAR",73,0)
 L -^LAH("Z",LRLL)
"RTN","LRVRAR",74,0)
 ;
"RTN","LRVRAR",75,0)
 D SPALERT^LRVRARU,KVAR^VADPT,KILL^XUSCLEAN
"RTN","LRVRAR",76,0)
 K ^TMP("LR",$J)
"RTN","LRVRAR",77,0)
 I $D(ZTQUEUED),'$P($G(ZTREQ),"^") S ZTREQ="@"
"RTN","LRVRAR",78,0)
 Q
"RTN","LRVRAR",79,0)
 ;
"RTN","LRVRAR",80,0)
 ;
"RTN","LRVRAR",81,0)
LOOK ; Check for data
"RTN","LRVRAR",82,0)
 ;
"RTN","LRVRAR",83,0)
 ;ZEXCEPT: DFN,ERR,LRAA,LRAD,LRAN,LRDFN,LRDPF,LREND,LRERR,LRIDT,LRLL,LRLLOC,LRODT,LRORD,LRORU3,LRSN,LRSQ,PNM,X,ZTREQ
"RTN","LRVRAR",84,0)
 ;
"RTN","LRVRAR",85,0)
 N LRCDT,LRLDT,LRLOCKER,LRSS,LRUID
"RTN","LRVRAR",86,0)
 ;
"RTN","LRVRAR",87,0)
 K LRDFN,LRERR,ERR,LRDPF,PNM,X
"RTN","LRVRAR",88,0)
 S (LREND,LRERR)=0
"RTN","LRVRAR",89,0)
 ;
"RTN","LRVRAR",90,0)
 S LRUID=$P($G(^LAH(LRLL,1,LRSQ,.3)),U)
"RTN","LRVRAR",91,0)
 I LRUID="" D  Q
"RTN","LRVRAR",92,0)
 . ; JMC/5/6/15 - need to write error message when UID not found with data in LAH
"RTN","LRVRAR",93,0)
 . S LREND=1
"RTN","LRVRAR",94,0)
 ;
"RTN","LRVRAR",95,0)
 D UID^LRVRA
"RTN","LRVRAR",96,0)
 ;
"RTN","LRVRAR",97,0)
 S X=^LRO(68,LRAA,1,LRAD,1,LRAN,0)
"RTN","LRVRAR",98,0)
 S LRDFN=+X,LRDPF=$P(X,U,2),DFN=$P(^LR(LRDFN,0),U,3)
"RTN","LRVRAR",99,0)
 S LRODT=+$P(X,U,4),LRSN=+$P(X,U,5),LRLLOC=$P(X,U,7)
"RTN","LRVRAR",100,0)
 S LRSS=$P(^LRO(68,LRAA,0),U,2)
"RTN","LRVRAR",101,0)
 ;
"RTN","LRVRAR",102,0)
 S:'$L(LRLLOC) LRLLOC=0
"RTN","LRVRAR",103,0)
 S LRORD=$P($G(^LRO(68,LRAA,1,LRAD,1,LRAN,.1)),"^")
"RTN","LRVRAR",104,0)
 ;
"RTN","LRVRAR",105,0)
 S X(3)=$G(^LRO(68,LRAA,1,LRAD,1,LRAN,3))
"RTN","LRVRAR",106,0)
 S LRCDT=$P(X(3),U,1)
"RTN","LRVRAR",107,0)
 S LRIDT=$P(X(3),U,5)
"RTN","LRVRAR",108,0)
 S:'LRIDT LRIDT=9999999-X(3)
"RTN","LRVRAR",109,0)
 S LRORU3=$G(^LRO(68,LRAA,1,LRAD,1,LRAN,.3))
"RTN","LRVRAR",110,0)
 ;
"RTN","LRVRAR",111,0)
 D DEM^LRX
"RTN","LRVRAR",112,0)
 I $G(LREND) S LRDFN=0 Q
"RTN","LRVRAR",113,0)
 ;
"RTN","LRVRAR",114,0)
 ; Lock records in file #63 and 68
"RTN","LRVRAR",115,0)
 L +(^LR(LRDFN,LRSS,LRIDT),^LRO(68,LRAA,1,LRAD,1,LRAN)):DILOCKTM+10
"RTN","LRVRAR",116,0)
 I '$T D  Q
"RTN","LRVRAR",117,0)
 . S ZTREQ=$$HADD^XLFDT($H,0,0,5,0)
"RTN","LRVRAR",118,0)
 . S LRERR=1
"RTN","LRVRAR",119,0)
 ;
"RTN","LRVRAR",120,0)
 D DATA
"RTN","LRVRAR",121,0)
 ;
"RTN","LRVRAR",122,0)
 L -(^LR(LRDFN,LRSS,LRIDT),^LRO(68,LRAA,1,LRAD,1,LRAN))
"RTN","LRVRAR",123,0)
 ;
"RTN","LRVRAR",124,0)
 ; If error encountered then remove from auto release queue/process
"RTN","LRVRAR",125,0)
 I $G(LRERR)>0 D
"RTN","LRVRAR",126,0)
 . K ^LAH(LRLL,1,"AUTOREL",LRSQ)
"RTN","LRVRAR",127,0)
 . K ^LAH(LRLL,1,"AUTOREL-UID",LRUID,LRSQ)
"RTN","LRVRAR",128,0)
 ;
"RTN","LRVRAR",129,0)
 Q
"RTN","LRVRAR",130,0)
 ;
"RTN","LRVRAR",131,0)
 ;
"RTN","LRVRAR",132,0)
DATA ;Process data and store in LR global
"RTN","LRVRAR",133,0)
 ;
"RTN","LRVRAR",134,0)
 ;ZEXCEPT: LA76248,LA76249,LA7AAT,LR642,LRAA,LRALERT,LRAUTOVERIFY,LRCDT,LRCNT,LRCOM,LRCUP,LRDATA,LRDFN,LRDFWKLD,LREII,LRERR
"RTN","LRVRAR",135,0)
 ;ZEXCEPT: LRIDT,LRLDT,LRLL,LRMETH,LRNOW,LROKTORELEASE,LROUTINE,LRSAMP,LRSB,LRSPEC,LRSQ,LRSS,LRSTORE,LRTM60,LRTRAY
"RTN","LRVRAR",136,0)
 ;ZEXCEPT: LRTS,LRTST,LRUID,LRUSI,LRVF,LRVTS,LRX,LRY,LRZ
"RTN","LRVRAR",137,0)
 ;
"RTN","LRVRAR",138,0)
 K LRCNT,LRDATA,LRERR,LREII,LRLDT,LRNOW,LRSAMP,LRSB,LRSPEC,LRTM60,LRTRAY,LRCUP,LRTS,LRVF,LRX,LRY,LRZ
"RTN","LRVRAR",139,0)
 S (LR642,LRCNT,LRERR)=0
"RTN","LRVRAR",140,0)
 ;
"RTN","LRVRAR",141,0)
 ; Get type of HL7 application ACK
"RTN","LRVRAR",142,0)
 S LA7AAT(1)=$P($G(^LAH(LRLL,1,"AUTOREL-UID",LRUID,LRSQ,LA76249)),U)
"RTN","LRVRAR",143,0)
 ;
"RTN","LRVRAR",144,0)
 ; Setup workload suffix and workload variables
"RTN","LRVRAR",145,0)
 I LR642<1 S LR642=LRDFWKLD
"RTN","LRVRAR",146,0)
 D WKLD^LRVRARU(LR642)
"RTN","LRVRAR",147,0)
 D WKLDC^LRVRARU(LRLL,LRAA)
"RTN","LRVRAR",148,0)
 ;
"RTN","LRVRAR",149,0)
 S LRSPEC=$P(^LR(LRDFN,"CH",LRIDT,0),U,5)
"RTN","LRVRAR",150,0)
 ;
"RTN","LRVRAR",151,0)
 ; Check if verified results exist in ^LR then delete results from LAH and mark as error.
"RTN","LRVRAR",152,0)
 S LRVF=+$P(^LR(LRDFN,"CH",LRIDT,0),U,3)
"RTN","LRVRAR",153,0)
 I LRVF D
"RTN","LRVRAR",154,0)
 . S LRX=1
"RTN","LRVRAR",155,0)
 . F  S LRX=$O(^LR(LRDFN,"CH",LRIDT,LRX)) Q:LRX'>0  D
"RTN","LRVRAR",156,0)
 . . S LRZ=^LR(LRDFN,"CH",LRIDT,LRX)
"RTN","LRVRAR",157,0)
 . . I $P(LRZ,U)'="",$P(LRZ,U)'="pending",$D(^LAH(LRLL,1,LRSQ,LRX)) K ^LAH(LRLL,1,LRSQ,LRX) S:LRERR=0 LRERR=$$CREATE^LA7LOG(307,1)
"RTN","LRVRAR",158,0)
 I LRERR D SENDACK^LRVRARU Q
"RTN","LRVRAR",159,0)
 ;
"RTN","LRVRAR",160,0)
 ; Check if results have datanames/tests on this profile and user is valid
"RTN","LRVRAR",161,0)
 S LRDATA=1
"RTN","LRVRAR",162,0)
 F  S LRDATA=$O(^LAH(LRLL,1,LRSQ,LRDATA)) Q:LRDATA<1  D  Q:LRERR
"RTN","LRVRAR",163,0)
 . S LRDATA(LRDATA)=^LAH(LRLL,1,LRSQ,LRDATA)
"RTN","LRVRAR",164,0)
 . I $P(LRDATA(LRDATA),"^",4)<1 S LRERR=$$CREATE^LA7LOG(111,1) Q
"RTN","LRVRAR",165,0)
 . S LROKTORELEASE=$$OKTOREL
"RTN","LRVRAR",166,0)
 . I 'LROKTORELEASE D  Q
"RTN","LRVRAR",167,0)
 . . N LRDUZ
"RTN","LRVRAR",168,0)
 . . I $P(LROKTORELEASE,U,2) S LRDUZ=$P(LROKTORELEASE,U,3),LRERR=$$CREATE^LA7LOG($P(LROKTORELEASE,U,2),1)
"RTN","LRVRAR",169,0)
 . S LRDUZ("USER")=$P(LROKTORELEASE,U,2)
"RTN","LRVRAR",170,0)
 . S LRAUTOVERIFY=LROKTORELEASE-1
"RTN","LRVRAR",171,0)
 . S LREII=$P(LRDATA(LRDATA),U,11)
"RTN","LRVRAR",172,0)
 . S LREII=LREII_";"_$S(LRAUTOVERIFY:"LRAV",1:"LRTV")
"RTN","LRVRAR",173,0)
 . S $P(LRDATA(LRDATA),U,11)=LREII ; Store auto verify or tech verify with EII.
"RTN","LRVRAR",174,0)
 . S LRTST=+$G(LRVTS(LRDATA))
"RTN","LRVRAR",175,0)
 . I 'LRTST S LRERR=$$CREATE^LA7LOG(116,1) Q
"RTN","LRVRAR",176,0)
 . I '$D(^TMP("LR",$J,"VTO",LRTST)) S LRERR=$$CREATE^LA7LOG(118,1) Q
"RTN","LRVRAR",177,0)
 ;
"RTN","LRVRAR",178,0)
 I LRERR D SENDACK^LRVRARU Q
"RTN","LRVRAR",179,0)
 ;
"RTN","LRVRAR",180,0)
 ; Calculate days back for delta checks
"RTN","LRVRAR",181,0)
 S LRTM60=$$LRTM60^LRVR(LRCDT)
"RTN","LRVRAR",182,0)
 ; Find previous specimen
"RTN","LRVRAR",183,0)
 S LRLDT=LRIDT
"RTN","LRVRAR",184,0)
 D FINDPS^LRGV2
"RTN","LRVRAR",185,0)
 ;
"RTN","LRVRAR",186,0)
 ; Store ^LR( data [results]
"RTN","LRVRAR",187,0)
 K LRCOM
"RTN","LRVRAR",188,0)
 S LRVF=0,LRALERT=LROUTINE,LRUSI="LRAR"
"RTN","LRVRAR",189,0)
 ;
"RTN","LRVRAR",190,0)
 ; Store any new methods with existing methods on file.
"RTN","LRVRAR",191,0)
 S LRMETH=$P(^LAH(LRLL,1,LRSQ,0),U,7)_"(AR)"
"RTN","LRVRAR",192,0)
 I $P($G(^LR(LRDFN,LRSS,LRIDT,0)),U,8)'="" D
"RTN","LRVRAR",193,0)
 . N I,X
"RTN","LRVRAR",194,0)
 . S X=$P(^LR(LRDFN,LRSS,LRIDT,0),U,8)
"RTN","LRVRAR",195,0)
 . F I=1:1:$L(X,";") I $P(X,";",I)'="",LRMETH'[$P(X,";",I) S LRMETH=LRMETH_";"_$P(X,";",I)
"RTN","LRVRAR",196,0)
 I LRMETH'="" S $P(^LR(LRDFN,LRSS,LRIDT,0),U,8)=LRMETH
"RTN","LRVRAR",197,0)
 ;
"RTN","LRVRAR",198,0)
 M LRSB=LRDATA
"RTN","LRVRAR",199,0)
 D TEST^LRVR1
"RTN","LRVRAR",200,0)
 S LRSB=1,LRNOW=$$NOW^XLFDT
"RTN","LRVRAR",201,0)
 F  S LRSB=$O(LRSB(LRSB)) Q:LRSB<1  D STORE Q:LRERR
"RTN","LRVRAR",202,0)
 ;
"RTN","LRVRAR",203,0)
 I LRERR D SENDACK^LRVRARU Q
"RTN","LRVRAR",204,0)
 ;
"RTN","LRVRAR",205,0)
 ; Set releasing user to auto release proxy.
"RTN","LRVRAR",206,0)
 S LRDUZ=LRDUZ("AR")
"RTN","LRVRAR",207,0)
 ;
"RTN","LRVRAR",208,0)
 ; Call to set data and comments
"RTN","LRVRAR",209,0)
 I $O(LRSB(0)) D
"RTN","LRVRAR",210,0)
 . D LRSBCOM^LRVR4,A3^LRVR3
"RTN","LRVRAR",211,0)
 . S LRSTORE=LRSTORE+1
"RTN","LRVRAR",212,0)
 . I $G(LA76248) S LRSTORE(LA76248)=$G(LRSTORE(LA76248))+1
"RTN","LRVRAR",213,0)
 ;
"RTN","LRVRAR",214,0)
 ; Send application ack back to sending application interface
"RTN","LRVRAR",215,0)
 D SENDACK^LRVRARU
"RTN","LRVRAR",216,0)
 Q
"RTN","LRVRAR",217,0)
 ;
"RTN","LRVRAR",218,0)
 ;
"RTN","LRVRAR",219,0)
STORE ; Store the data in LR global
"RTN","LRVRAR",220,0)
 ;
"RTN","LRVRAR",221,0)
 ;ZEXCEPT: LRAUTOVERIFY,LRDEL,LRDELTACHKOK,LRDFN,LRDUZ,LRERR,LRIDT,LRLDT,LRNOW,LRSB,LRSS
"RTN","LRVRAR",222,0)
 ;
"RTN","LRVRAR",223,0)
 N I,LRNGS,LRQ,LRTS,LRX,LRY,X,X1,Y
"RTN","LRVRAR",224,0)
 ;
"RTN","LRVRAR",225,0)
 I '$G(^TMP("LR",$J,"TMP",LRSB,"P")) S LRERR=$$CREATE^LA7LOG(117,1) Q
"RTN","LRVRAR",226,0)
 ;
"RTN","LRVRAR",227,0)
 S LRX=$$TMPSB^LRVER1(LRSB),LRY=$P(LRSB(LRSB),U,3)
"RTN","LRVRAR",228,0)
 F I=1:1:$L(LRX,"!") I $P(LRY,"!",I)="" S $P(LRY,"!",I)=$P(LRX,"!",I)
"RTN","LRVRAR",229,0)
 S $P(LRSB(LRSB),U,3)=LRY
"RTN","LRVRAR",230,0)
 S LRTS=$G(^TMP("LR",$J,"TMP",LRSB))
"RTN","LRVRAR",231,0)
 D V25^LRVER5
"RTN","LRVRAR",232,0)
 S LRX=LRNGS,LRY=$P(LRSB(LRSB),U,5)
"RTN","LRVRAR",233,0)
 ;
"RTN","LRVRAR",234,0)
 ; Do delta checking if enabled
"RTN","LRVRAR",235,0)
 I LRDELTACHKOK D
"RTN","LRVRAR",236,0)
 . S X=$P(LRSB(LRSB),"^"),Y=0,(LRQ,X1)=""
"RTN","LRVRAR",237,0)
 . I LRLDT>0 S X1=$P($G(^LR(LRDFN,LRSS,LRLDT,LRSB)),U)
"RTN","LRVRAR",238,0)
 . I LRDEL'="" S LRQ=1 D XDELTACK^LRVERA ;S:Y LRDELTA=Y
"RTN","LRVRAR",239,0)
 ;
"RTN","LRVRAR",240,0)
 ; Store the file #60 units/ranges/etc values which don't come from the
"RTN","LRVRAR",241,0)
 ; middleware so verified results can be edited in vista with the
"RTN","LRVRAR",242,0)
 ; configuration values at the time of original verification
"RTN","LRVRAR",243,0)
 ; (#.01) SITE/SPECIMEN [1P:61] ^ (#1) REFERENCE LOW [2F] ^ (#2) REFERENCE HIGH [3F] ^ (#3) CRITICAL LOW [4F] ^ (#4) CRITICAL HIGH [5F] ^  ^ (#6) UNITS [7F] ^ (#7) TYPE OF DELTA CHECK [8P:62.1] ^
"RTN","LRVRAR",244,0)
 ; (#8) DELTA VALUE [9F] ^ (#9) DEFAULT VALUE [10F] ^ (#9.2) THERAPEUTIC LOW [11F] ^ (#9.3) THERAPEUTIC HIGH [12F] ^
"RTN","LRVRAR",245,0)
 F I=1,4,5,8:1:12 I $P(LRY,"!",I)="" S $P(LRY,"!",I)=$P(LRX,U,I)
"RTN","LRVRAR",246,0)
 S $P(LRSB(LRSB),U,5)=LRY
"RTN","LRVRAR",247,0)
 ;
"RTN","LRVRAR",248,0)
 S $P(LRSB(LRSB),U,6)=LRNOW
"RTN","LRVRAR",249,0)
 ;
"RTN","LRVRAR",250,0)
 ; Store performing lab based on LRDUZ(2) from load/list profile.
"RTN","LRVRAR",251,0)
 S $P(LRSB(LRSB),U,9)=$S($G(LRDUZ(2)):LRDUZ(2),1:$G(DUZ(2)))
"RTN","LRVRAR",252,0)
 ;
"RTN","LRVRAR",253,0)
 S ^LR(LRDFN,"CH",LRIDT,LRSB)=LRSB(LRSB)
"RTN","LRVRAR",254,0)
 ;
"RTN","LRVRAR",255,0)
 Q
"RTN","LRVRAR",256,0)
 ;
"RTN","LRVRAR",257,0)
 ;
"RTN","LRVRAR",258,0)
OKTOREL() ; Determine if it's OK to store these results for auto release
"RTN","LRVRAR",259,0)
 ;
"RTN","LRVRAR",260,0)
 ;ZEXCEPT: LRDATA,LRDUZ,LRLL,LRSQ
"RTN","LRVRAR",261,0)
 ;
"RTN","LRVRAR",262,0)
 ; Returns OK = "" (no "user")
"RTN","LRVRAR",263,0)
 ;            = 0  (results not flagged for auto release)
"RTN","LRVRAR",264,0)
 ;            = 0^error code (62.485)^invalid user duz
"RTN","LRVRAR",265,0)
 ;            = 1^duz of user  (tech verify)
"RTN","LRVRAR",266,0)
 ;            = 2  (auto verify user)
"RTN","LRVRAR",267,0)
 ;
"RTN","LRVRAR",268,0)
 N OK,LRX,LRY
"RTN","LRVRAR",269,0)
 ;
"RTN","LRVRAR",270,0)
 S OK=""
"RTN","LRVRAR",271,0)
 ;
"RTN","LRVRAR",272,0)
 I $P($G(^LAH(LRLL,1,LRSQ,LRDATA)),U)="" S OK=0
"RTN","LRVRAR",273,0)
 ;
"RTN","LRVRAR",274,0)
 ; Results not flagged for auto release.
"RTN","LRVRAR",275,0)
 I '$D(^LAH(LRLL,1,"AUTOREL",LRSQ,LRDATA)) S OK=0
"RTN","LRVRAR",276,0)
 ;
"RTN","LRVRAR",277,0)
 ; Retrieve stored auto release setting when this result arrived.
"RTN","LRVRAR",278,0)
 S LRX=$P(^LAH(LRLL,1,"AUTOREL",LRSQ,LRDATA),U,2)
"RTN","LRVRAR",279,0)
 ;
"RTN","LRVRAR",280,0)
 ; Retrieve user id/duz received with results.
"RTN","LRVRAR",281,0)
 S LRY=$P(LRDATA(LRDATA),U,4)
"RTN","LRVRAR",282,0)
 ;
"RTN","LRVRAR",283,0)
 I OK="" D
"RTN","LRVRAR",284,0)
 . ; If no user or auto release proxy then log error
"RTN","LRVRAR",285,0)
 . I LRY<1 S OK="0^303" Q
"RTN","LRVRAR",286,0)
 . I LRY=LRDUZ("AR") S OK="0^304"_U_LRY Q
"RTN","LRVRAR",287,0)
 . ;
"RTN","LRVRAR",288,0)
 . ; If auto release on for auto or tech verify
"RTN","LRVRAR",289,0)
 . I LRX=1 D  Q
"RTN","LRVRAR",290,0)
 . . I LRY=LRDUZ("AV") S OK=2 Q
"RTN","LRVRAR",291,0)
 . . S OK=1_U_LRY Q
"RTN","LRVRAR",292,0)
 . ;
"RTN","LRVRAR",293,0)
 . ; If auto release on for auto verify only
"RTN","LRVRAR",294,0)
 . I LRX=2 D  Q
"RTN","LRVRAR",295,0)
 . . I LRY=LRDUZ("AV") S OK=2 Q
"RTN","LRVRAR",296,0)
 . . S OK="0^305"_U_LRY
"RTN","LRVRAR",297,0)
 . ;
"RTN","LRVRAR",298,0)
 . ; If auto release on for tech verify only
"RTN","LRVRAR",299,0)
 . I LRX=3 D  Q
"RTN","LRVRAR",300,0)
 . . I LRY'=LRDUZ("AV"),LRY'=LRDUZ("AR") S OK=1_U_LRY Q
"RTN","LRVRAR",301,0)
 . . S OK="0^306"_U_LRY
"RTN","LRVRAR",302,0)
 ;
"RTN","LRVRAR",303,0)
 ; Check if tech verify that user owns LRVERIFY security key.
"RTN","LRVRAR",304,0)
 I $P(OK,U)=1 D
"RTN","LRVRAR",305,0)
 . N LRKEY
"RTN","LRVRAR",306,0)
 . ;
"RTN","LRVRAR",307,0)
 . ; check if user is active
"RTN","LRVRAR",308,0)
 . I '$$ACTIVE^XUSER($P(OK,U,2)) S OK="0^302^"_$P(OK,U,2) Q
"RTN","LRVRAR",309,0)
 . ;
"RTN","LRVRAR",310,0)
 . ; check that user has LRVERIFY key
"RTN","LRVRAR",311,0)
 . D OWNSKEY^XUSRB(.LRKEY,"LRVERIFY",$P(OK,U,2))
"RTN","LRVRAR",312,0)
 . I LRKEY(0)=1 Q
"RTN","LRVRAR",313,0)
 . S OK="0^301^"_$P(OK,U,2)
"RTN","LRVRAR",314,0)
 ;
"RTN","LRVRAR",315,0)
 Q OK
"VER")
8.0^22.0
"BLD",9786,6)
^377
**END**
**END**

