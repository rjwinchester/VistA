Released HMP*2*3 SEQ #9
Extracted from mail message
**KIDS**:HMP*2.0*3^

**INSTALL NAME**
HMP*2.0*3
"BLD",10220,0)
HMP*2.0*3^HEALTH MANAGEMENT PLATFORM^0^3170412^y
"BLD",10220,4,0)
^9.64PA^^
"BLD",10220,6.3)
15
"BLD",10220,"ABPKG")
n
"BLD",10220,"INIT")
POST^HMP14699
"BLD",10220,"KRN",0)
^9.67PA^779.2^20
"BLD",10220,"KRN",.4,0)
.4
"BLD",10220,"KRN",.401,0)
.401
"BLD",10220,"KRN",.402,0)
.402
"BLD",10220,"KRN",.403,0)
.403
"BLD",10220,"KRN",.5,0)
.5
"BLD",10220,"KRN",.84,0)
.84
"BLD",10220,"KRN",3.6,0)
3.6
"BLD",10220,"KRN",3.8,0)
3.8
"BLD",10220,"KRN",9.2,0)
9.2
"BLD",10220,"KRN",9.8,0)
9.8
"BLD",10220,"KRN",9.8,"NM",0)
^9.68A^64^63
"BLD",10220,"KRN",9.8,"NM",1,0)
HMPD^^0^B31068389
"BLD",10220,"KRN",9.8,"NM",2,0)
HMPEVNT^^0^B193956269
"BLD",10220,"KRN",9.8,"NM",3,0)
HMPCORD4^^0^B152907266
"BLD",10220,"KRN",9.8,"NM",4,0)
HMPDJ04^^0^B91523266
"BLD",10220,"KRN",9.8,"NM",5,0)
HMPDJ02^^0^B216534469
"BLD",10220,"KRN",9.8,"NM",6,0)
HMPTFU2^^0^B41602003
"BLD",10220,"KRN",9.8,"NM",7,0)
HMPUPD^^1^
"BLD",10220,"KRN",9.8,"NM",8,0)
HMPWB5A^^1^
"BLD",10220,"KRN",9.8,"NM",9,0)
HMPDVSIT^^0^B97239947
"BLD",10220,"KRN",9.8,"NM",10,0)
HMPCORD5^^0^B83583685
"BLD",10220,"KRN",9.8,"NM",11,0)
HMPDJFSD^^0^B7195569
"BLD",10220,"KRN",9.8,"NM",12,0)
HMPEF^^0^B88029306
"BLD",10220,"KRN",9.8,"NM",13,0)
HMPCRPC1^^0^B113427224
"BLD",10220,"KRN",9.8,"NM",14,0)
HMPDSDAM^^0^B21275067
"BLD",10220,"KRN",9.8,"NM",15,0)
HMPSTMP^^0^B100529789
"BLD",10220,"KRN",9.8,"NM",16,0)
HMPWB1^^0^B44273066
"BLD",10220,"KRN",9.8,"NM",17,0)
HMPDJFSQ^^0^B94782818
"BLD",10220,"KRN",9.8,"NM",18,0)
HMPMETA^^0^B82380143
"BLD",10220,"KRN",9.8,"NM",19,0)
HMPMON^^0^B6205473
"BLD",10220,"KRN",9.8,"NM",20,0)
HMPMONA^^0^B5798924
"BLD",10220,"KRN",9.8,"NM",21,0)
HMPMONC^^0^B3063955
"BLD",10220,"KRN",9.8,"NM",22,0)
HMPMOND^^0^B23595720
"BLD",10220,"KRN",9.8,"NM",23,0)
HMPMONDH^^0^B4295339
"BLD",10220,"KRN",9.8,"NM",24,0)
HMPMONH^^0^B708781
"BLD",10220,"KRN",9.8,"NM",25,0)
HMPMONHH^^0^B574268
"BLD",10220,"KRN",9.8,"NM",26,0)
HMPMONJ^^0^B14612706
"BLD",10220,"KRN",9.8,"NM",27,0)
HMPMONL^^0^B7166896
"BLD",10220,"KRN",9.8,"NM",28,0)
HMPMONM^^0^B4370662
"BLD",10220,"KRN",9.8,"NM",29,0)
HMPMONR^^0^B15294791
"BLD",10220,"KRN",9.8,"NM",30,0)
HMPMONS^^0^B4547830
"BLD",10220,"KRN",9.8,"NM",31,0)
HMPMONSH^^0^B3342775
"BLD",10220,"KRN",9.8,"NM",32,0)
HMPMONV^^0^B5132473
"BLD",10220,"KRN",9.8,"NM",33,0)
HMPMONX^^0^B5337676
"BLD",10220,"KRN",9.8,"NM",34,0)
HMPUTILS^^0^B58919254
"BLD",10220,"KRN",9.8,"NM",35,0)
HMPDJFS^^0^B76740470
"BLD",10220,"KRN",9.8,"NM",37,0)
HMPDCRC^^0^B47259185
"BLD",10220,"KRN",9.8,"NM",38,0)
HMPDGMPL^^0^B28421072
"BLD",10220,"KRN",9.8,"NM",39,0)
HMPDGMRA^^0^B23583756
"BLD",10220,"KRN",9.8,"NM",40,0)
HMPDGMV^^0^B43285050
"BLD",10220,"KRN",9.8,"NM",41,0)
HMPDJ^^0^B36747380
"BLD",10220,"KRN",9.8,"NM",42,0)
HMPDJ00^^0^B168303708
"BLD",10220,"KRN",9.8,"NM",43,0)
HMPDJ08A^^0^B51646478
"BLD",10220,"KRN",9.8,"NM",44,0)
HMPDJX^^0^B36261442
"BLD",10220,"KRN",9.8,"NM",45,0)
HMPDLRA^^0^B85382423
"BLD",10220,"KRN",9.8,"NM",46,0)
HMPDMC^^0^B58830678
"BLD",10220,"KRN",9.8,"NM",47,0)
HMPDRA^^0^B43358349
"BLD",10220,"KRN",9.8,"NM",48,0)
HMPDSR^^0^B30234447
"BLD",10220,"KRN",9.8,"NM",49,0)
HMPHTTP^^0^B14396779
"BLD",10220,"KRN",9.8,"NM",50,0)
HMPLOG^^0^B23425435
"BLD",10220,"KRN",9.8,"NM",51,0)
HMPPATS^^0^B3274326
"BLD",10220,"KRN",9.8,"NM",52,0)
HMPDJFSM^^0^B64763470
"BLD",10220,"KRN",9.8,"NM",53,0)
HMPDJ01^^0^B111786832
"BLD",10220,"KRN",9.8,"NM",54,0)
HMPDJ0^^0^B123532458
"BLD",10220,"KRN",9.8,"NM",55,0)
HMPDJFSG^^0^B245124031
"BLD",10220,"KRN",9.8,"NM",56,0)
HMPDJFSP^^0^B194334507
"BLD",10220,"KRN",9.8,"NM",57,0)
HMPRPCRC^^0^B6442213
"BLD",10220,"KRN",9.8,"NM",58,0)
HMPDJ02A^^0^B2049795
"BLD",10220,"KRN",9.8,"NM",59,0)
HMPDOR^^0^B28492902
"BLD",10220,"KRN",9.8,"NM",60,0)
HMPCORD^^1^
"BLD",10220,"KRN",9.8,"NM",61,0)
HMPCPAT^^1^
"BLD",10220,"KRN",9.8,"NM",62,0)
HMPP3I^^1^
"BLD",10220,"KRN",9.8,"NM",63,0)
HMPMONE^^0^B20016683
"BLD",10220,"KRN",9.8,"NM",64,0)
HMPMONEH^^0^B2338588
"BLD",10220,"KRN",9.8,"NM","B","HMPCORD",60)

"BLD",10220,"KRN",9.8,"NM","B","HMPCORD4",3)

"BLD",10220,"KRN",9.8,"NM","B","HMPCORD5",10)

"BLD",10220,"KRN",9.8,"NM","B","HMPCPAT",61)

"BLD",10220,"KRN",9.8,"NM","B","HMPCRPC1",13)

"BLD",10220,"KRN",9.8,"NM","B","HMPD",1)

"BLD",10220,"KRN",9.8,"NM","B","HMPDCRC",37)

"BLD",10220,"KRN",9.8,"NM","B","HMPDGMPL",38)

"BLD",10220,"KRN",9.8,"NM","B","HMPDGMRA",39)

"BLD",10220,"KRN",9.8,"NM","B","HMPDGMV",40)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ",41)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ0",54)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ00",42)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ01",53)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ02",5)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ02A",58)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ04",4)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJ08A",43)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFS",35)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFSD",11)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFSG",55)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFSM",52)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFSP",56)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJFSQ",17)

"BLD",10220,"KRN",9.8,"NM","B","HMPDJX",44)

"BLD",10220,"KRN",9.8,"NM","B","HMPDLRA",45)

"BLD",10220,"KRN",9.8,"NM","B","HMPDMC",46)

"BLD",10220,"KRN",9.8,"NM","B","HMPDOR",59)

"BLD",10220,"KRN",9.8,"NM","B","HMPDRA",47)

"BLD",10220,"KRN",9.8,"NM","B","HMPDSDAM",14)

"BLD",10220,"KRN",9.8,"NM","B","HMPDSR",48)

"BLD",10220,"KRN",9.8,"NM","B","HMPDVSIT",9)

"BLD",10220,"KRN",9.8,"NM","B","HMPEF",12)

"BLD",10220,"KRN",9.8,"NM","B","HMPEVNT",2)

"BLD",10220,"KRN",9.8,"NM","B","HMPHTTP",49)

"BLD",10220,"KRN",9.8,"NM","B","HMPLOG",50)

"BLD",10220,"KRN",9.8,"NM","B","HMPMETA",18)

"BLD",10220,"KRN",9.8,"NM","B","HMPMON",19)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONA",20)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONC",21)

"BLD",10220,"KRN",9.8,"NM","B","HMPMOND",22)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONDH",23)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONE",63)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONEH",64)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONH",24)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONHH",25)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONJ",26)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONL",27)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONM",28)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONR",29)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONS",30)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONSH",31)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONV",32)

"BLD",10220,"KRN",9.8,"NM","B","HMPMONX",33)

"BLD",10220,"KRN",9.8,"NM","B","HMPP3I",62)

"BLD",10220,"KRN",9.8,"NM","B","HMPPATS",51)

"BLD",10220,"KRN",9.8,"NM","B","HMPRPCRC",57)

"BLD",10220,"KRN",9.8,"NM","B","HMPSTMP",15)

"BLD",10220,"KRN",9.8,"NM","B","HMPTFU2",6)

"BLD",10220,"KRN",9.8,"NM","B","HMPUPD",7)

"BLD",10220,"KRN",9.8,"NM","B","HMPUTILS",34)

"BLD",10220,"KRN",9.8,"NM","B","HMPWB1",16)

"BLD",10220,"KRN",9.8,"NM","B","HMPWB5A",8)

"BLD",10220,"KRN",19,0)
19
"BLD",10220,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",10220,"KRN",19,"NM",1,0)
HMP UI CONTEXT^^0
"BLD",10220,"KRN",19,"NM",2,0)
HMP SYNCHRONIZATION CONTEXT^^0
"BLD",10220,"KRN",19,"NM","B","HMP SYNCHRONIZATION CONTEXT",2)

"BLD",10220,"KRN",19,"NM","B","HMP UI CONTEXT",1)

"BLD",10220,"KRN",19.1,0)
19.1
"BLD",10220,"KRN",101,0)
101
"BLD",10220,"KRN",409.61,0)
409.61
"BLD",10220,"KRN",771,0)
771
"BLD",10220,"KRN",779.2,0)
779.2
"BLD",10220,"KRN",870,0)
870
"BLD",10220,"KRN",8989.51,0)
8989.51
"BLD",10220,"KRN",8989.52,0)
8989.52
"BLD",10220,"KRN",8994,0)
8994
"BLD",10220,"KRN",8994,"NM",0)
^9.68A^15^15
"BLD",10220,"KRN",8994,"NM",1,0)
HMP CHKXTMP^^0
"BLD",10220,"KRN",8994,"NM",2,0)
HMP RESOURCE SLOT CLEAR^^0
"BLD",10220,"KRN",8994,"NM",3,0)
HMP RESOURCE VALUES^^0
"BLD",10220,"KRN",8994,"NM",4,0)
HMP DELETE ROSTER^^1^
"BLD",10220,"KRN",8994,"NM",5,0)
HMP GET ROSTER LIST^^1^
"BLD",10220,"KRN",8994,"NM",6,0)
HMP GET SOURCE^^1^
"BLD",10220,"KRN",8994,"NM",7,0)
HMP PREVIEW ROSTER^^1^
"BLD",10220,"KRN",8994,"NM",8,0)
HMP ROSTER PATIENTS^^1^
"BLD",10220,"KRN",8994,"NM",9,0)
HMP ROSTERS^^1^
"BLD",10220,"KRN",8994,"NM",10,0)
HMP SUBSCRIBE ROSTERS^^1^
"BLD",10220,"KRN",8994,"NM",11,0)
HMP UPDATE ROSTER^^1^
"BLD",10220,"KRN",8994,"NM",12,0)
HMPCORD RPC^^1^
"BLD",10220,"KRN",8994,"NM",13,0)
HMPCPAT RPC^^1^
"BLD",10220,"KRN",8994,"NM",14,0)
HMP DELETE TIU NOTE^^1^
"BLD",10220,"KRN",8994,"NM",15,0)
HMP SAVE NOTE STUB^^1^
"BLD",10220,"KRN",8994,"NM","B","HMP CHKXTMP",1)

"BLD",10220,"KRN",8994,"NM","B","HMP DELETE ROSTER",4)

"BLD",10220,"KRN",8994,"NM","B","HMP DELETE TIU NOTE",14)

"BLD",10220,"KRN",8994,"NM","B","HMP GET ROSTER LIST",5)

"BLD",10220,"KRN",8994,"NM","B","HMP GET SOURCE",6)

"BLD",10220,"KRN",8994,"NM","B","HMP PREVIEW ROSTER",7)

"BLD",10220,"KRN",8994,"NM","B","HMP RESOURCE SLOT CLEAR",2)

"BLD",10220,"KRN",8994,"NM","B","HMP RESOURCE VALUES",3)

"BLD",10220,"KRN",8994,"NM","B","HMP ROSTER PATIENTS",8)

"BLD",10220,"KRN",8994,"NM","B","HMP ROSTERS",9)

"BLD",10220,"KRN",8994,"NM","B","HMP SAVE NOTE STUB",15)

"BLD",10220,"KRN",8994,"NM","B","HMP SUBSCRIBE ROSTERS",10)

"BLD",10220,"KRN",8994,"NM","B","HMP UPDATE ROSTER",11)

"BLD",10220,"KRN",8994,"NM","B","HMPCORD RPC",12)

"BLD",10220,"KRN",8994,"NM","B","HMPCPAT RPC",13)

"BLD",10220,"KRN","B",.4,.4)

"BLD",10220,"KRN","B",.401,.401)

"BLD",10220,"KRN","B",.402,.402)

"BLD",10220,"KRN","B",.403,.403)

"BLD",10220,"KRN","B",.5,.5)

"BLD",10220,"KRN","B",.84,.84)

"BLD",10220,"KRN","B",3.6,3.6)

"BLD",10220,"KRN","B",3.8,3.8)

"BLD",10220,"KRN","B",9.2,9.2)

"BLD",10220,"KRN","B",9.8,9.8)

"BLD",10220,"KRN","B",19,19)

"BLD",10220,"KRN","B",19.1,19.1)

"BLD",10220,"KRN","B",101,101)

"BLD",10220,"KRN","B",409.61,409.61)

"BLD",10220,"KRN","B",771,771)

"BLD",10220,"KRN","B",779.2,779.2)

"BLD",10220,"KRN","B",870,870)

"BLD",10220,"KRN","B",8989.51,8989.51)

"BLD",10220,"KRN","B",8989.52,8989.52)

"BLD",10220,"KRN","B",8994,8994)

"BLD",10220,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10220,"QUES",0)
^9.62^^
"BLD",10220,"REQB",0)
^9.611^2^2
"BLD",10220,"REQB",1,0)
HMP*2.0*2^2
"BLD",10220,"REQB",2,0)
HMP*2.0*8^2
"BLD",10220,"REQB","B","HMP*2.0*2",1)

"BLD",10220,"REQB","B","HMP*2.0*8",2)

"INIT")
POST^HMP14699
"KRN",19,17035,-1)
0^1
"KRN",19,17035,0)
HMP UI CONTEXT^HMP UI CONTEXT version 20160108-01.US12195^^B^^^^^^^^
"KRN",19,17035,1,0)
^19.06^1^1^3150824^^^^
"KRN",19,17035,1,1,0)
This option allows the HMP UI access to the VistA system.
"KRN",19,17035,99.1)
62990,29647
"KRN",19,17035,"RPC",0)
^19.05P^153^153
"KRN",19,17035,"RPC",3,0)
HMPFPTC CHKS
"KRN",19,17035,"RPC",4,0)
HMPFPTC LOG
"KRN",19,17035,"RPC",5,0)
HMP APPOINTMENTS
"KRN",19,17035,"RPC",6,0)
HMP DATA VERSION
"KRN",19,17035,"RPC",8,0)
HMP GET PATIENT DATA
"KRN",19,17035,"RPC",10,0)
HMP INPATIENTS
"KRN",19,17035,"RPC",14,0)
HMP SUBSCRIBE
"KRN",19,17035,"RPC",16,0)
HMPCRPC RPC
"KRN",19,17035,"RPC",18,0)
HMP PUT PATIENT DATA
"KRN",19,17035,"RPC",19,0)
HMP PUT OBJECT
"KRN",19,17035,"RPC",20,0)
HMP DELETE OBJECT
"KRN",19,17035,"RPC",21,0)
HMP GET OBJECT
"KRN",19,17035,"RPC",23,0)
HMPCPRS RPC
"KRN",19,17035,"RPC",24,0)
ORQPT WARDS
"KRN",19,17035,"RPC",25,0)
ORQPT WARD PATIENTS
"KRN",19,17035,"RPC",26,0)
ORQPT SPECIALTIES
"KRN",19,17035,"RPC",27,0)
ORQPT SPECIALTY PATIENTS
"KRN",19,17035,"RPC",28,0)
ORWU CLINLOC
"KRN",19,17035,"RPC",29,0)
ORQPT CLINIC PATIENTS
"KRN",19,17035,"RPC",30,0)
ORWU NEWPERS
"KRN",19,17035,"RPC",31,0)
ORQPT PROVIDER PATIENTS
"KRN",19,17035,"RPC",32,0)
ORWRP COLUMN HEADERS
"KRN",19,17035,"RPC",33,0)
ORWLR CUMULATIVE REPORT
"KRN",19,17035,"RPC",35,0)
ORWRP REPORT TEXT
"KRN",19,17035,"RPC",36,0)
ORWRP3 EXPAND COLUMNS
"KRN",19,17035,"RPC",37,0)
HMP PUT DEMOGRAPHICS
"KRN",19,17035,"RPC",38,0)
HMPCRPC RPCCHAIN
"KRN",19,17035,"RPC",39,0)
ORQPT DEFAULT PATIENT LIST
"KRN",19,17035,"RPC",40,0)
ORWU USERINFO
"KRN",19,17035,"RPC",42,0)
ORWPT BYWARD
"KRN",19,17035,"RPC",43,0)
ORQQPX REMINDERS LIST
"KRN",19,17035,"RPC",44,0)
ORQQPX REMINDER DETAIL
"KRN",19,17035,"RPC",45,0)
ORQQPL4 LEX
"KRN",19,17035,"RPC",46,0)
ORWRP REPORT LISTS
"KRN",19,17035,"RPC",47,0)
HMP PATIENT ADMIT SYNC
"KRN",19,17035,"RPC",48,0)
HMP PATIENT SCHED SYNC
"KRN",19,17035,"RPC",49,0)
ORWPT LIST ALL
"KRN",19,17035,"RPC",50,0)
ORWPT APPTLST
"KRN",19,17035,"RPC",51,0)
PX SAVE DATA
"KRN",19,17035,"RPC",52,0)
GMV ADD VM
"KRN",19,17035,"RPC",53,0)
GMV VITALS/CAT/QUAL
"KRN",19,17035,"RPC",54,0)
GMV MARK ERROR
"KRN",19,17035,"RPC",55,0)
ORWDAL32 SAVE ALLERGY
"KRN",19,17035,"RPC",56,0)
ORWDAL32 CLINUSER
"KRN",19,17035,"RPC",57,0)
ORWDAL32 ALLERGY MATCH
"KRN",19,17035,"RPC",58,0)
ORWDAL32 SYMPTOMS
"KRN",19,17035,"RPC",59,0)
HMP CHKXTMP
"KRN",19,17035,"RPC",60,0)
HMP GLOBAL SIZE
"KRN",19,17035,"RPC",61,0)
ORQQPL ADD SAVE
"KRN",19,17035,"RPC",62,0)
ORQQPL DELETE
"KRN",19,17035,"RPC",63,0)
ORQQPL EDIT SAVE
"KRN",19,17035,"RPC",64,0)
ORQQVI NOTEVIT
"KRN",19,17035,"RPC",65,0)
ORWPCE HASVISIT
"KRN",19,17035,"RPC",66,0)
ORWPCE NOTEVSTR
"KRN",19,17035,"RPC",67,0)
ORWU DT
"KRN",19,17035,"RPC",68,0)
ORWU EXTNAME
"KRN",19,17035,"RPC",69,0)
TIU AUTHORIZATION
"KRN",19,17035,"RPC",70,0)
TIU CREATE ADDENDUM RECORD
"KRN",19,17035,"RPC",71,0)
TIU CREATE RECORD
"KRN",19,17035,"RPC",72,0)
TIU DOCUMENTS BY CONTEXT
"KRN",19,17035,"RPC",73,0)
TIU GET DOCUMENT TITLE
"KRN",19,17035,"RPC",74,0)
TIU GET RECORD TEXT
"KRN",19,17035,"RPC",75,0)
TIU GET REQUEST
"KRN",19,17035,"RPC",76,0)
TIU IS THIS A CONSULT?
"KRN",19,17035,"RPC",77,0)
TIU IS THIS A SURGERY?
"KRN",19,17035,"RPC",78,0)
TIU ISPRF
"KRN",19,17035,"RPC",79,0)
TIU LOCK RECORD
"KRN",19,17035,"RPC",80,0)
TIU LONG LIST OF TITLES
"KRN",19,17035,"RPC",81,0)
TIU REQUIRES COSIGNATURE
"KRN",19,17035,"RPC",83,0)
TIU SIGN RECORD
"KRN",19,17035,"RPC",84,0)
TIU UNLOCK RECORD
"KRN",19,17035,"RPC",86,0)
ORCNOTE GET TOTAL
"KRN",19,17035,"RPC",88,0)
ORWPCE LEX
"KRN",19,17035,"RPC",90,0)
ORQQPL USER PROB LIST
"KRN",19,17035,"RPC",91,0)
TIU DELETE RECORD
"KRN",19,17035,"RPC",92,0)
HMP WRITEBACK VITAL
"KRN",19,17035,"RPC",93,0)
HMP MED ORDER CHECKS
"KRN",19,17035,"RPC",95,0)
HMP WRITEBACK ENCOUNTERS
"KRN",19,17035,"RPC",99,0)
ORWPCE SCSEL
"KRN",19,17035,"RPC",100,0)
HMP PUT OPERATIONAL DATA
"KRN",19,17035,"RPC",101,0)
HMP WRITEBACK VITAL EIE
"KRN",19,17035,"RPC",103,0)
HMP WRITEBACK ALLERGY EIE
"KRN",19,17035,"RPC",104,0)
HMP WRITEBACK ALLERGY
"KRN",19,17035,"RPC",107,0)
HMP WRITEBACK SIGN ORDERS
"KRN",19,17035,"RPC",108,0)
ORQOR DETAIL
"KRN",19,17035,"RPC",110,0)
HMP DEFAULT PATIENT LIST
"KRN",19,17035,"RPC",119,0)
HMP GET PATIENT DATA JSON
"KRN",19,17035,"RPC",120,0)
GMV GET CURRENT TIME
"KRN",19,17035,"RPC",121,0)
ORWU VALIDSIG
"KRN",19,17035,"RPC",122,0)
VAFC LOCAL GETCORRESPONDINGIDS
"KRN",19,17035,"RPC",123,0)
HMP PATIENT SELECT
"KRN",19,17035,"RPC",124,0)
ORWPCE GETSVC
"KRN",19,17035,"RPC",125,0)
ORWPCE PCE4NOTE
"KRN",19,17035,"RPC",126,0)
ORWLEX GETFREQ
"KRN",19,17035,"RPC",127,0)
ORWLEX GETI10DX
"KRN",19,17035,"RPC",128,0)
ORWCV VST
"KRN",19,17035,"RPC",130,0)
HMP TIU LONG LIST OF TITLES
"KRN",19,17035,"RPC",131,0)
ORWPT ADMITLST
"KRN",19,17035,"RPC",132,0)
HMP GET RELATED ORDERS
"KRN",19,17035,"RPC",133,0)
ORWPCE LEXCODE
"KRN",19,17035,"RPC",134,0)
ORWDRA32 RAORDITM
"KRN",19,17035,"RPC",135,0)
ORQQPL EDIT LOAD
"KRN",19,17035,"RPC",137,0)
ORWU1 NEWLOC
"KRN",19,17035,"RPC",138,0)
PXVIMM ADMIN CODES
"KRN",19,17035,"RPC",139,0)
PXVIMM ADMIN ROUTE
"KRN",19,17035,"RPC",140,0)
PXVIMM ADMIN SITE
"KRN",19,17035,"RPC",141,0)
PXVIMM ICR LIST
"KRN",19,17035,"RPC",142,0)
PXVIMM IMM DETAILED
"KRN",19,17035,"RPC",143,0)
PXVIMM IMM FORMAT
"KRN",19,17035,"RPC",144,0)
PXVIMM IMM LOT
"KRN",19,17035,"RPC",145,0)
PXVIMM IMM MAN
"KRN",19,17035,"RPC",146,0)
PXVIMM IMM SHORT LIST
"KRN",19,17035,"RPC",147,0)
PXVIMM IMMDATA
"KRN",19,17035,"RPC",148,0)
PXVIMM INFO SOURCE
"KRN",19,17035,"RPC",149,0)
PXVIMM VICR EVENTS
"KRN",19,17035,"RPC",150,0)
PXVIMM VIS
"KRN",19,17035,"RPC",151,0)
DGWPT BYWARD
"KRN",19,17035,"RPC",152,0)
HMP RESOURCE SLOT CLEAR
"KRN",19,17035,"RPC",153,0)
HMP RESOURCE VALUES
"KRN",19,17035,"U")
HMP UI CONTEXT VERSION 2016010
"KRN",19,17036,-1)
0^2
"KRN",19,17036,0)
HMP SYNCHRONIZATION CONTEXT^Synchronize the HMP^^B^^^^^^^^
"KRN",19,17036,1,0)
^^2^2^3150923^
"KRN",19,17036,1,1,0)
This option manages access to RPCs responsible for synchronization of eHMP
"KRN",19,17036,1,2,0)
data with VistA.
"KRN",19,17036,99.1)
63613,33836
"KRN",19,17036,"RPC",0)
^19.05P^29^29
"KRN",19,17036,"RPC",2,0)
HMP DATA VERSION
"KRN",19,17036,"RPC",4,0)
HMP SUBSCRIBE
"KRN",19,17036,"RPC",5,0)
HMP GET PATIENT DATA JSON
"KRN",19,17036,"RPC",7,0)
HMP GET OBJECT
"KRN",19,17036,"RPC",8,0)
HMP GET OPERATIONAL DATA
"KRN",19,17036,"RPC",10,0)
HMP PUT OBJECT
"KRN",19,17036,"RPC",19,0)
HMPDJFS API
"KRN",19,17036,"RPC",20,0)
HMPDJFS DELSUB
"KRN",19,17036,"RPC",21,0)
HMP GET CHECKSUM
"KRN",19,17036,"RPC",22,0)
HMP PATIENT ACTIVITY
"KRN",19,17036,"RPC",24,0)
ORWU USERINFO
"KRN",19,17036,"RPC",25,0)
HMP SUBSCRIPTION STATUS
"KRN",19,17036,"RPC",26,0)
VAFC LOCAL GETCORRESPONDINGIDS
"KRN",19,17036,"RPC",27,0)
HMP DEFAULT PATIENT LIST
"KRN",19,17036,"RPC",28,0)
HMP PATIENT ADMIT SYNC
"KRN",19,17036,"RPC",29,0)
HMP PATIENT SCHED SYNC
"KRN",19,17036,"U")
SYNCHRONIZE THE HMP
"KRN",8994,3848,-1)
0^1
"KRN",8994,3848,0)
HMP CHKXTMP^CHKXTMP^HMPMONX^2^S^^^0^^^1
"KRN",8994,3848,1,0)
^8994.01^5^5^3160914^^^^
"KRN",8994,3848,1,1,0)
This Remote Procedure returns information about the eHMP storage size 
"KRN",8994,3848,1,2,0)
in ^XTMP and the number of patients in the queue.  The site hash plus 
"KRN",8994,3848,1,3,0)
the local date and time are also returned.
"KRN",8994,3848,1,4,0)
  
"KRN",8994,3848,1,5,0)
No input parameters are required.
"KRN",8994,3848,3,0)
^8994.03^14^14^3160914^^^^
"KRN",8994,3848,3,1,0)
It returns two lines of text:
"KRN",8994,3848,3,2,0)
 RESULT(1) - '^' delimited text describing the values returned
"KRN",8994,3848,3,3,0)
 RESULT(2) - '^' delimited text with values corresponding to the
"KRN",8994,3848,3,4,0)
              same $PIECE described in RESULT(1)
"KRN",8994,3848,3,5,0)
   
"KRN",8994,3848,3,6,0)
For example:
"KRN",8994,3848,3,7,0)
 Piece 1 - "site hash" and "9E7A"
"KRN",8994,3848,3,8,0)
 Piece 2 - "site local date time" and "2016-12-20 11:27:15"
"KRN",8994,3848,3,9,0)
 Piece 3 - "Patients in queue" and "17"
"KRN",8994,3848,3,10,0)
 Piece 4 - "Patients complete" and "15"
"KRN",8994,3848,3,11,0)
 Piece 5 - "Patients staging" and "2"
"KRN",8994,3848,3,12,0)
 Piece 6 - "XTMP('HMP') bytes" and "78445"
"KRN",8994,3848,3,13,0)
 Piece 7 - "XTMP('HMP') objects" and "2"
"KRN",8994,3848,3,14,0)
 
"KRN",8994,4203,-1)
0^3
"KRN",8994,4203,0)
HMP RESOURCE VALUES^EN^HMPRPCRC^2^^^^^^^1
"KRN",8994,4203,1,0)
^8994.01^1^1^3170120^^^^
"KRN",8994,4203,1,1,0)
Returns a list of the resource slots with a status of each slot.
"KRN",8994,4203,3,0)
^^4^4^3170120^
"KRN",8994,4203,3,1,0)
Returns an array in the format:
"KRN",8994,4203,3,2,0)
Slot # ^ CPR ^ JOB # ^ TASK # ^ TASK STATUS ^ START DATE/TIME ^ CURRENT 
"KRN",8994,4203,3,3,0)
DATE/TIME ^ TIME DIFFERENCE BETWEEN CURRENT TIME AND JOB START TIME IN 
"KRN",8994,4203,3,4,0)
DAYS HH:MM:SS
"KRN",8994,4204,-1)
0^2
"KRN",8994,4204,0)
HMP RESOURCE SLOT CLEAR^CLEAR^HMPRPCRC^1^^^^^^^1
"KRN",8994,4204,1,0)
^8994.01^5^5^3170125^^
"KRN",8994,4204,1,1,0)
This RPC will clear the specified slot for the HMP EXTRACT RESOURCE 
"KRN",8994,4204,1,2,0)
resource device.
"KRN",8994,4204,1,3,0)
 
"KRN",8994,4204,1,4,0)
***WARNING - IT IS UP TO THE USER TO BE SURE THEY ARE CLEARING THE 
"KRN",8994,4204,1,5,0)
CORRECT SLOT FOR THE RESOURCE. ***
"KRN",8994,4204,2,0)
^8994.02A^1^1
"KRN",8994,4204,2,1,0)
SLOT^1^3^1^1
"KRN",8994,4204,2,1,1,0)
^8994.021^1^1^3170125^^
"KRN",8994,4204,2,1,1,1,0)
This is the slot number to be cleared.
"KRN",8994,4204,2,"B","SLOT",1)

"KRN",8994,4204,2,"PARAMSEQ",1,1)

"KRN",8994,4204,3,0)
^8994.03^1^1^3170125^^
"KRN",8994,4204,3,1,0)
Returns 1 if successful, otherwise returns 0^reason. 
"KRN",8994,4216,-1)
1^4
"KRN",8994,4216,0)
HMP DELETE ROSTER
"KRN",8994,4217,-1)
1^5
"KRN",8994,4217,0)
HMP GET ROSTER LIST
"KRN",8994,4218,-1)
1^6
"KRN",8994,4218,0)
HMP GET SOURCE
"KRN",8994,4219,-1)
1^7
"KRN",8994,4219,0)
HMP PREVIEW ROSTER
"KRN",8994,4220,-1)
1^8
"KRN",8994,4220,0)
HMP ROSTER PATIENTS
"KRN",8994,4221,-1)
1^9
"KRN",8994,4221,0)
HMP ROSTERS
"KRN",8994,4222,-1)
1^10
"KRN",8994,4222,0)
HMP SUBSCRIBE ROSTERS
"KRN",8994,4223,-1)
1^11
"KRN",8994,4223,0)
HMP UPDATE ROSTER
"KRN",8994,4224,-1)
1^12
"KRN",8994,4224,0)
HMPCORD RPC
"KRN",8994,4225,-1)
1^13
"KRN",8994,4225,0)
HMPCPAT RPC
"KRN",8994,4226,-1)
1^14
"KRN",8994,4226,0)
HMP DELETE TIU NOTE
"KRN",8994,4227,-1)
1^15
"KRN",8994,4227,0)
HMP SAVE NOTE STUB
"MBREQ")
0
"ORD",0,9.8)
9.8;;1;RTNF^XPDTA;RTNE^XPDTA
"ORD",0,9.8,0)
ROUTINE
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",603,-1)
1^1
"PKG",603,0)
HEALTH MANAGEMENT PLATFORM^HMP^Access patient medical records from all VistA's
"PKG",603,20,0)
^9.402P^^
"PKG",603,22,0)
^9.49I^1^1
"PKG",603,22,1,0)
2.0^3160223^3160329^100904
"PKG",603,22,1,"PAH",1,0)
3^3170412^100904
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
64
"RTN","HMP14699")
0^^B21021121^n/a
"RTN","HMP14699",1,0)
HMP14699 ;ASMR/CK - HMP XU EVENTS Protocol an ITEM - HMP*2.0*3;Aug 24, 2016@11:35:01
"RTN","HMP14699",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMP14699",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMP14699",4,0)
 ;
"RTN","HMP14699",5,0)
 ; US14699 - CK - Subscribe HMP XU EVENTS protocol to XU USER CHANGE and XU USER TERMINATE
"RTN","HMP14699",6,0)
 ;
"RTN","HMP14699",7,0)
 ; External References  ICR
"RTN","HMP14699",8,0)
 ; -------------------  -----
"RTN","HMP14699",9,0)
 ; ^DIC(19,             10075
"RTN","HMP14699",10,0)
 ; DIC(19               10156
"RTN","HMP14699",11,0)
 ;
"RTN","HMP14699",12,0)
 Q
"RTN","HMP14699",13,0)
 ;
"RTN","HMP14699",14,0)
POST ; Post-init logic
"RTN","HMP14699",15,0)
 N HMPRTCL,HMPIEN,V,X,Y
"RTN","HMP14699",16,0)
 D MES^XPDUTL($T(+0)_" post-init routine started "_$$HTE^XLFDT($H))
"RTN","HMP14699",17,0)
 S V=$$SVDATA D MES^XPDUTL("Old data saved in "_V)
"RTN","HMP14699",18,0)
 S (X,HMPRTCL)="HMP XU EVENTS",DIC(0)="M",DIC=19 D ^DIC  ;ICR 10156
"RTN","HMP14699",19,0)
 ; protocol missing, write message and exit
"RTN","HMP14699",20,0)
 I '(Y>0) D MES^XPDUTL(HMPRTCL_" protocol not found. It must be installed to proceed.") Q
"RTN","HMP14699",21,0)
 S HMPIEN=$P(Y,U)
"RTN","HMP14699",22,0)
 D POST1,POST2
"RTN","HMP14699",23,0)
 Q
"RTN","HMP14699",24,0)
 ;
"RTN","HMP14699",25,0)
POST1 ; add HMP XU EVENTS as an ITEM to XU USER CHANGE
"RTN","HMP14699",26,0)
 N HMPDGIEN,HMPEXIT,X,Y
"RTN","HMP14699",27,0)
 S X="XU USER CHANGE",DIC(0)="M",DIC=19 D ^DIC
"RTN","HMP14699",28,0)
 ; protocol missing, write message and exit
"RTN","HMP14699",29,0)
 I '(Y>0) D MES^XPDUTL(Y_" protocol not found.  No ITEM update performed.") Q
"RTN","HMP14699",30,0)
 S HMPDGIEN=$P(Y,U)
"RTN","HMP14699",31,0)
 ;
"RTN","HMP14699",32,0)
 ; is protocol already an item?
"RTN","HMP14699",33,0)
 S HMPEXIT=$O(^DIC(19,HMPDGIEN,10,"B",HMPIEN,0))
"RTN","HMP14699",34,0)
 I HMPEXIT D MES^XPDUTL(HMPRTCL_" already an ITEM in "_Y_".  No update needed.") Q
"RTN","HMP14699",35,0)
 ;
"RTN","HMP14699",36,0)
 ; add protocol as ITEM
"RTN","HMP14699",37,0)
 K HMPFDA,HMPERR,PRTCLITM
"RTN","HMP14699",38,0)
 S HMPFDA(19.01,"+1,"_HMPDGIEN_",",.01)=HMPIEN  ; ICR 10075
"RTN","HMP14699",39,0)
 D UPDATE^DIE("","HMPFDA","PRTCLITM","HMPERR")
"RTN","HMP14699",40,0)
 I $D(HMPERR) D  Q  ; something went wrong
"RTN","HMP14699",41,0)
 . D MES^XPDUTL("FileMan error when adding ITEM to XU USER CHANGE protocol")
"RTN","HMP14699",42,0)
 . N V S V="HMPERR" F  S V=$Q(@V) Q:V=""  D MES^XPDUTL(V_" = "_@V)
"RTN","HMP14699",43,0)
 ; new ITEM sub-file IEN will be in PRTCLITM(1)
"RTN","HMP14699",44,0)
 D MES^XPDUTL(HMPRTCL_" was subscribed to "_Y_", protocol update finished "_$$HTE^XLFDT($H))
"RTN","HMP14699",45,0)
 Q 
"RTN","HMP14699",46,0)
 ;
"RTN","HMP14699",47,0)
POST2 ; add HMP XU EVENTS as an ITEM to XU USER TERMINATE
"RTN","HMP14699",48,0)
 N HMPDGIEN,HMPEXIT,X,Y
"RTN","HMP14699",49,0)
 S X="XU USER TERMINATE",DIC(0)="M",DIC=19 D ^DIC
"RTN","HMP14699",50,0)
 ; protocol missing, write message and exit
"RTN","HMP14699",51,0)
 I '(Y>0) D MES^XPDUTL(Y_" protocol not found.  No ITEM update performed.") Q
"RTN","HMP14699",52,0)
 S HMPDGIEN=$P(Y,U)
"RTN","HMP14699",53,0)
 ;
"RTN","HMP14699",54,0)
 ; is protocol already an item?
"RTN","HMP14699",55,0)
 S HMPEXIT=$O(^DIC(19,HMPDGIEN,10,"B",HMPIEN,0))
"RTN","HMP14699",56,0)
 I HMPEXIT D MES^XPDUTL(HMPRTCL_" already an ITEM in "_Y_".  No update needed.") Q
"RTN","HMP14699",57,0)
 ;
"RTN","HMP14699",58,0)
 ; add protocol as ITEM
"RTN","HMP14699",59,0)
 K HMPFDA,HMPERR,PRTCLITM
"RTN","HMP14699",60,0)
 S HMPFDA(19.01,"+1,"_HMPDGIEN_",",.01)=HMPIEN
"RTN","HMP14699",61,0)
 D UPDATE^DIE("","HMPFDA","PRTCLITM","HMPERR")
"RTN","HMP14699",62,0)
 I $D(HMPERR) D  Q  ; something went wrong
"RTN","HMP14699",63,0)
 . D MES^XPDUTL("FileMan error when adding ITEM to XU USER TERMINATE protocol")
"RTN","HMP14699",64,0)
 . N V S V="HMPERR" F  S V=$Q(@V) Q:V=""  D MES^XPDUTL(V_" = "_@V)
"RTN","HMP14699",65,0)
 ; new ITEM sub-file IEN will be in PRTCLITM(1)
"RTN","HMP14699",66,0)
 D MES^XPDUTL(HMPRTCL_" was subscribed to "_Y_", protocol update finished "_$$HTE^XLFDT($H))
"RTN","HMP14699",67,0)
 Q
"RTN","HMP14699",68,0)
 ;
"RTN","HMP14699",69,0)
SVDATA() ; extrinsic variable, save original FileMan data, returns storage node
"RTN","HMP14699",70,0)
 D DT^DICRW
"RTN","HMP14699",71,0)
 N FMERRCNT,HMPXTMP,HMPIEN,LN,NTRY,TXT,V,X,Y
"RTN","HMP14699",72,0)
 S Y=$$NOW^XLFDT,HMPXTMP=$NA(^XTMP("HMP INSTALL LOG",Y))  ; XTMP storage location
"RTN","HMP14699",73,0)
 ; ^XTMP log data expires in 90 days
"RTN","HMP14699",74,0)
 S X=$G(@HMPXTMP@(0)) S:X="" @HMPXTMP@(0)=$$FMADD^XLFDT(DT,90)_U_Y_"^HMP installation "_$$FMTE^XLFDT(Y)
"RTN","HMP14699",75,0)
 ;
"RTN","HMP14699",76,0)
 S FMERRCNT=0  ; FileMan error counter
"RTN","HMP14699",77,0)
 ; save entries in FileMan items list
"RTN","HMP14699",78,0)
 F LN=1:1 S TXT=$P($T(FMITMS+LN),";;",2,99) Q:TXT=""  D
"RTN","HMP14699",79,0)
 . N FLNO,FMARRY,FMERR  ; file #, FileMan returned value and error message arrays
"RTN","HMP14699",80,0)
 . S FLNO=+$P(TXT,U),X=$P(TXT,U,2,99)  ; file number and target entry
"RTN","HMP14699",81,0)
 . Q:'(FLNO>1)!(X="")  ; file and entry required
"RTN","HMP14699",82,0)
 . S HMPIEN=$$FIND1^DIC(FLNO,"","",X,"","","FMERR")  ; lookup value in X is external format
"RTN","HMP14699",83,0)
 . I $D(FMERR) D  Q  ; log error message and quit
"RTN","HMP14699",84,0)
 . .  S V="FMERR",FMERRCNT=FMERRCNT+1 F  S V=$Q(@V) Q:V=""  S @HMPXTMP@("FM LOOKUP ERROR",FMERRCNT,V)=@V
"RTN","HMP14699",85,0)
 . ;
"RTN","HMP14699",86,0)
 . S:'(HMPIEN>0) FMERRCNT=FMERRCNT+1,@HMPXTMP@("FM ENTRY NOT FOUND",FMERRCNT)=TXT  ; entry
"RTN","HMP14699",87,0)
 . S:HMPIEN>0 @HMPXTMP@("ENTRY",FLNO,HMPIEN)="entry found"
"RTN","HMP14699",88,0)
 . K FMERR  ; just in case
"RTN","HMP14699",89,0)
 . D GETS^DIQ(FLNO,HMPIEN_",","**","EN","FMARRY","FMERR")  ; data including sub-files, ignore null values
"RTN","HMP14699",90,0)
 . I $D(FMERR) D  ; log error message
"RTN","HMP14699",91,0)
 . . S V="FMERR",FMERRCNT=FMERRCNT+1 F  S V=$Q(@V) Q:V=""  S @HMPXTMP@("FM DATA ERROR",FMERRCNT,V)=@V
"RTN","HMP14699",92,0)
 . ; save the data
"RTN","HMP14699",93,0)
 . M @HMPXTMP@("ENTRY")=FMARRY
"RTN","HMP14699",94,0)
 ;
"RTN","HMP14699",95,0)
 Q HMPXTMP  ; return ^XTMP storage location
"RTN","HMP14699",96,0)
 ;
"RTN","HMP14699",97,0)
FMITMS ; list of FileMan entries: "file # ^ .01 field value"
"RTN","HMP14699",98,0)
 ;;19^XU USER CHANGE
"RTN","HMP14699",99,0)
 ;;19^XU USER TERMINATE
"RTN","HMP14699",100,0)
 ;
"RTN","HMPCORD")
1^60^^n/a
"RTN","HMPCORD4")
0^3^B152907266^B141593321
"RTN","HMPCORD4",1,0)
HMPCORD4 ;SLC/AGP,ASMR/RRB,JD -Retrieved Orderable Items;Aug 12, 2016 10:54:47
"RTN","HMPCORD4",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPCORD4",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCORD4",4,0)
 ;
"RTN","HMPCORD4",5,0)
 ; External References          DBIA#
"RTN","HMPCORD4",6,0)
 ; -------------------          -----
"RTN","HMPCORD4",7,0)
 ; ALL^PSS51P2                  4548   ;DE6363 - JD - 8/23/16
"RTN","HMPCORD4",8,0)
 ;
"RTN","HMPCORD4",9,0)
 ;DE5080 - JD - 7/26/16: Fixed the <UNDEFINED> in VALIDOI section.
"RTN","HMPCORD4",10,0)
 ;DE4488 - JD - 8/12/16: Replaced direct global read of ^PS(51.2 with ALL^PSS51P2 API in
"RTN","HMPCORD4",11,0)
 ;                       ADDROUTE section.
"RTN","HMPCORD4",12,0)
 ;
"RTN","HMPCORD4",13,0)
 Q
"RTN","HMPCORD4",14,0)
 ;
"RTN","HMPCORD4",15,0)
ADDODG ; called by HMPEF
"RTN","HMPCORD4",16,0)
 N CNT,IEN,NUM,NODE,PTR,RESULT,TEMP
"RTN","HMPCORD4",17,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting display groups"
"RTN","HMPCORD4",18,0)
 S IEN=0 F  S IEN=$O(^ORD(100.98,IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",19,0)
 .N $ES,$ET
"RTN","HMPCORD4",20,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",21,0)
 .I '$D(^ORD(100.98,IEN,1)) D  Q
"RTN","HMPCORD4",22,0)
 ..S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.RESULT,NODE)
"RTN","HMPCORD4",23,0)
 ..S RESULT("uid")=$$SETUID^HMPUTILS("displayGroup","",IEN),RESULT("internal")=IEN
"RTN","HMPCORD4",24,0)
 ..D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",25,0)
 .D ADDODG1(IEN,.TEMP)
"RTN","HMPCORD4",26,0)
 .M RESULT=TEMP
"RTN","HMPCORD4",27,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",28,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",29,0)
 Q
"RTN","HMPCORD4",30,0)
 ;
"RTN","HMPCORD4",31,0)
ADDODG1(IEN,TEMP) ;
"RTN","HMPCORD4",32,0)
 N CNT,NODE,NUM,PTR
"RTN","HMPCORD4",33,0)
 S NODE=$G(^ORD(100.98,IEN,0)) D SODGNODE(.TEMP,NODE)
"RTN","HMPCORD4",34,0)
 S TEMP("uid")=$$SETUID^HMPUTILS("displayGroup","",IEN),TEMP("internal")=IEN
"RTN","HMPCORD4",35,0)
 I '$D(^ORD(100.98,IEN,1)) Q
"RTN","HMPCORD4",36,0)
 S NUM=0,CNT=0 F  S NUM=$O(^ORD(100.98,IEN,1,NUM)) Q:NUM'>0  D
"RTN","HMPCORD4",37,0)
 .N ARRAY
"RTN","HMPCORD4",38,0)
 .S PTR=$G(^ORD(100.98,IEN,1,NUM,0)) Q:PTR'>0
"RTN","HMPCORD4",39,0)
 .D ADDODG1(PTR,.ARRAY) I '$D(ARRAY) Q
"RTN","HMPCORD4",40,0)
 .S CNT=CNT+1 M TEMP("children",CNT,"item")=ARRAY
"RTN","HMPCORD4",41,0)
 Q
"RTN","HMPCORD4",42,0)
 ;
"RTN","HMPCORD4",43,0)
SODGNODE(RESULT,NODE) ;
"RTN","HMPCORD4",44,0)
 N NAME,TEMP,X
"RTN","HMPCORD4",45,0)
 F X=1:1:4 D
"RTN","HMPCORD4",46,0)
 .S TEMP=$P(NODE,U,X) I X<4,$L(TEMP)>1 S RESULT($S(X=1:"name",X=2:"displayName",X=3:"abbreviation"))=TEMP
"RTN","HMPCORD4",47,0)
 .I X=4,+TEMP>0 S NAME=$P($G(^ORD(101.41,TEMP,0)),U) S RESULT("defaultDialogUid")=$$SETUID^HMPUTILS("orderDialog","",TEMP),RESULT("defaultDialogName")=NAME
"RTN","HMPCORD4",48,0)
 Q
"RTN","HMPCORD4",49,0)
 ;
"RTN","HMPCORD4",50,0)
ADDROUTE ;
"RTN","HMPCORD4",51,0)
 ;DE4488 - Start
"RTN","HMPCORD4",52,0)
 N ERRMSG,IEN
"RTN","HMPCORD4",53,0)
 S IEN=0,ERRMSG="A mumps error occurred while extracting routes."
"RTN","HMPCORD4",54,0)
 I +$G(HMPLAST)>0 S IEN=HMPLAST
"RTN","HMPCORD4",55,0)
 ;Replaced direct global [^PS(51.2)] read with ALL^PSS51P2 API - ICR 4548
"RTN","HMPCORD4",56,0)
 D ALL^PSS51P2("","??","","","HMPSUB")  ;"??" puts ALL med routes into ^TMP($J,"HMPSUB")
"RTN","HMPCORD4",57,0)
 F  S IEN=$O(^TMP($J,"HMPSUB",IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",58,0)
 .N $ES,$ET
"RTN","HMPCORD4",59,0)
 .N HMPLCL,RESULT,UID,X  ;HMPLCL --> Local array
"RTN","HMPCORD4",60,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",61,0)
 .K HMPLCL,RESULT
"RTN","HMPCORD4",62,0)
 .M HMPLCL=^TMP($J,"HMPSUB",IEN)
"RTN","HMPCORD4",63,0)
 .I $G(HMPLCL(5))>0 Q  ;Skip over inactive med routes
"RTN","HMPCORD4",64,0)
 .S UID=$$SETUID^HMPUTILS("route","",IEN)
"RTN","HMPCORD4",65,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",66,0)
 .F X=.01,1,4,6 D  ;X is the field number from file #51.2 (e.g. .01=NAME)
"RTN","HMPCORD4",67,0)
 ..N NAME,VALUE
"RTN","HMPCORD4",68,0)
 ..S VALUE=HMPLCL(X) Q:VALUE=""
"RTN","HMPCORD4",69,0)
 ..S NAME=$S(X=.01:"name",X=4:"externalName",X=1:"abbreviation",X=6:"useInIV",1:"")
"RTN","HMPCORD4",70,0)
 ..I NAME="" Q
"RTN","HMPCORD4",71,0)
 ..I X=6 S VALUE=$S(+VALUE=1:"true",1:"false") ;For X=6,VALUE could either be "" or "1^YES"
"RTN","HMPCORD4",72,0)
 ..S RESULT(NAME)=VALUE
"RTN","HMPCORD4",73,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",74,0)
 K ^TMP($J,"HMPSUB")  ;Cleanup
"RTN","HMPCORD4",75,0)
 ;DE4488 - End
"RTN","HMPCORD4",76,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",77,0)
 Q
"RTN","HMPCORD4",78,0)
 ;
"RTN","HMPCORD4",79,0)
ADDSCH ;
"RTN","HMPCORD4",80,0)
 N CNT,IEN,NAME,NODE,NUM,RESULT,UID,HMPSCH
"RTN","HMPCORD4",81,0)
 ;D SCHALL^ORWDPS1(.HMPSCH,0,0)
"RTN","HMPCORD4",82,0)
 D SCHED^PSS51P1(0,.HMPSCH)
"RTN","HMPCORD4",83,0)
 N ERRMSG
"RTN","HMPCORD4",84,0)
 S ERRMSG="A mumps error occurred while extracting schedules."
"RTN","HMPCORD4",85,0)
 S CNT=0 F  S CNT=$O(HMPSCH(CNT)) Q:CNT'>0  D
"RTN","HMPCORD4",86,0)
 .N $ES,$ET
"RTN","HMPCORD4",87,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",88,0)
 .S NODE=$G(HMPSCH(CNT))
"RTN","HMPCORD4",89,0)
 .S NAME=$P(NODE,U,2)
"RTN","HMPCORD4",90,0)
 .S IEN=$P(NODE,U)
"RTN","HMPCORD4",91,0)
 .;S IEN=$O(^PS(51.1,"B",NAME,"")) I IEN'>0 Q
"RTN","HMPCORD4",92,0)
 .S UID=$$SETUID^HMPUTILS("schedule","",IEN)
"RTN","HMPCORD4",93,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",94,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",95,0)
 .I $P(NODE,U,3)'="" S RESULT("externalValue")=$P(NODE,U,3)
"RTN","HMPCORD4",96,0)
 .I $P(NODE,U,4)'="" S RESULT("scheduleType")=$P(NODE,U,4)
"RTN","HMPCORD4",97,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",98,0)
 .K RESULT
"RTN","HMPCORD4",99,0)
 I CNT'>0 S HMPFINI=1
"RTN","HMPCORD4",100,0)
 Q
"RTN","HMPCORD4",101,0)
 ;
"RTN","HMPCORD4",102,0)
LAB(RESULT,OI) ;
"RTN","HMPCORD4",103,0)
 N CNT,I,IEN,NODE,SYN,TEMP,HMPLST
"RTN","HMPCORD4",104,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",1,"internal")="LT",RESULT("dialogAdditionalInformation","sendPatientTimes",1,"name")="Today"
"RTN","HMPCORD4",105,0)
 S RESULT("dialogAdditionalInformation","sendPatientTimes",2,"internal")="LT+1",RESULT("dialogAdditionalInformation","sendPatientTimes",2,"name")="Tomorrow"
"RTN","HMPCORD4",106,0)
 ;
"RTN","HMPCORD4",107,0)
 D GETLST^XPAR(.HMPLST,"ALL","ORWD COMMON LAB INPT")  ;DBIA 2263
"RTN","HMPCORD4",108,0)
 S I=0 F  S I=$O(HMPLST(I)) Q:'I  D
"RTN","HMPCORD4",109,0)
 . S IEN=$P(HMPLST(I),U,2)
"RTN","HMPCORD4",110,0)
 . K P1
"RTN","HMPCORD4",111,0)
 . S P1="dialogAdditionalInformation"
"RTN","HMPCORD4",112,0)
 . S RESULT("dialogAdditionalInformation","common",I,"uid")=$$SETUID^HMPUTILS("orderable","",IEN)
"RTN","HMPCORD4",113,0)
 . S RESULT("dialogAdditionalInformation","common",I,"internal")=IEN
"RTN","HMPCORD4",114,0)
 . S RESULT("dialogAdditionalInformation","common",I,"name")=$P(^ORD(101.43,IEN,0),U,1)
"RTN","HMPCORD4",115,0)
 ;
"RTN","HMPCORD4",116,0)
 S NODE=$G(^ORD(101.43,OI,"LR"))
"RTN","HMPCORD4",117,0)
 S RESULT("labDetails","speciman")=$P(NODE,U),RESULT("labDetails","labCollect")=$S($P(NODE,U,2)=1:"true",1:"false"),RESULT("labDetails","sequence")=$P(NODE,U,3)
"RTN","HMPCORD4",118,0)
 S RESULT("labDetails","maxOrderFrequency")=$P(NODE,U,4),RESULT("labDetails","dailyOrderMax")=$P(NODE,U,5)
"RTN","HMPCORD4",119,0)
 ;
"RTN","HMPCORD4",120,0)
 S TEMP=$P(NODE,U,6)
"RTN","HMPCORD4",121,0)
 S RESULT("types",1,"abb")=TEMP,RESULT("types",1,"uid")=$$SETUID^HMPUTILS("labType","",TEMP),RESULT("types",1,"internal")=TEMP,RESULT("types",1,"type")=$$LABTYPE(TEMP)
"RTN","HMPCORD4",122,0)
 S TEMP=$P(NODE,U,7)
"RTN","HMPCORD4",123,0)
 I TEMP'="" S RESULT("labDetails","labTypeInternal")=TEMP,RESULT("labDetails","labTypeName")=$S(TEMP="I":"Input",TEMP="O":"Output",TEMP="B":"Both",TEMP="N":"Neither")
"RTN","HMPCORD4",124,0)
 I '$D(^ORD(101.43,OI,2)) Q
"RTN","HMPCORD4",125,0)
 S CNT=0
"RTN","HMPCORD4",126,0)
 S I=0 F  S I=$O(^ORD(101.43,OI,2,I)) Q:I'>0  D
"RTN","HMPCORD4",127,0)
 .S SYN=$G(^ORD(101.43,OI,2,I,0)) Q:SYN=""
"RTN","HMPCORD4",128,0)
 .S CNT=CNT+1,RESULT("synonym",CNT,"name")=SYN
"RTN","HMPCORD4",129,0)
 Q
"RTN","HMPCORD4",130,0)
 ;
"RTN","HMPCORD4",131,0)
LABTYPE(L) ;
"RTN","HMPCORD4",132,0)
 I L="CH" Q "Chemistry"
"RTN","HMPCORD4",133,0)
 I L="MI" Q "MICROBIOLOGY"
"RTN","HMPCORD4",134,0)
 I L="BB" Q "Blood Bank"
"RTN","HMPCORD4",135,0)
 I L="EM" Q "Electron Microscopy"
"RTN","HMPCORD4",136,0)
 I L="SP" Q "Surgical Pathology"
"RTN","HMPCORD4",137,0)
 I L="AU" Q "Autopsy"
"RTN","HMPCORD4",138,0)
 I L="CY" Q "Cytology"
"RTN","HMPCORD4",139,0)
 Q ""
"RTN","HMPCORD4",140,0)
 ;
"RTN","HMPCORD4",141,0)
OI(OITYPE) ; called by HMPEF
"RTN","HMPCORD4",142,0)
 N CNT,ERROR,IEN,NAME,LINK,LINKTYPE,NODE,RADDET,RADTYPE,RESULT,TCNT,TYPE,UID,HMPTEMP
"RTN","HMPCORD4",143,0)
 N ERRMSG
"RTN","HMPCORD4",144,0)
 S ERRMSG="A mumps error occurred while extracting orderable items."
"RTN","HMPCORD4",145,0)
 S CNT=1,IEN=0
"RTN","HMPCORD4",146,0)
 ;
"RTN","HMPCORD4",147,0)
 D RADTYPE(.RADTYPE,.RADDET)
"RTN","HMPCORD4",148,0)
 I +$G(HMPLAST)>0 S IEN=HMPLAST
"RTN","HMPCORD4",149,0)
 I +$G(HMPID)>0 S IEN=HMPID
"RTN","HMPCORD4",150,0)
 F  S IEN=$O(^ORD(101.43,IEN)) Q:IEN'>0  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPCORD4",151,0)
 .N $ES,$ET
"RTN","HMPCORD4",152,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",153,0)
 .K RESULT
"RTN","HMPCORD4",154,0)
 .S TYPE=$$VALIDOI(OITYPE,IEN)
"RTN","HMPCORD4",155,0)
 .I TYPE="" Q
"RTN","HMPCORD4",156,0)
 .S NAME=$P(^ORD(101.43,IEN,0),U),LINK=$P($P(^ORD(101.43,IEN,0),U,2),";99",1),LINKTYPE=$P($P(^ORD(101.43,IEN,0),U,2),";99",2)
"RTN","HMPCORD4",157,0)
 .S UID=$$SETUID^HMPUTILS("orderable","",IEN)
"RTN","HMPCORD4",158,0)
 .S RESULT("uid")=UID,RESULT("internal")=IEN
"RTN","HMPCORD4",159,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",160,0)
 .S RESULT("link")=LINK
"RTN","HMPCORD4",161,0)
 .S RESULT("linktype")=LINKTYPE
"RTN","HMPCORD4",162,0)
 .I TYPE["PS" D PS(.RESULT,IEN,CNT)
"RTN","HMPCORD4",163,0)
 .I TYPE["RA" D RA(.RESULT,IEN,CNT,.RADTYPE,.RADDET)
"RTN","HMPCORD4",164,0)
 .I TYPE["LR" D LAB(.RESULT,IEN)
"RTN","HMPCORD4",165,0)
 .D ADD^HMPEF("RESULT") S HMPCNT=+$G(HMPCNT)+1,HMPLAST=IEN
"RTN","HMPCORD4",166,0)
 .S CNT=CNT+1
"RTN","HMPCORD4",167,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",168,0)
 Q
"RTN","HMPCORD4",169,0)
 ;
"RTN","HMPCORD4",170,0)
PS(RESULT,IEN,PLACE) ;
"RTN","HMPCORD4",171,0)
 N CNT,COST,DOSE,DOSES,DRUG,MEDS,NAME,NODE,NUM,PSOI,SIZE,TYPE,UID,HMPDOSE
"RTN","HMPCORD4",172,0)
 S CNT=0
"RTN","HMPCORD4",173,0)
 I $D(^ORD(101.43,IEN,9,"B","NV RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="NON-VA MEDS" S MEDS("NV RX")=""
"RTN","HMPCORD4",174,0)
 I $D(^ORD(101.43,IEN,9,"B","O RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="OUTPATIENT MEDS" S MEDS("O RX")=""
"RTN","HMPCORD4",175,0)
 I $D(^ORD(101.43,IEN,9,"B","RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="MEDS" S MEDS("RX")=""
"RTN","HMPCORD4",176,0)
 I $D(^ORD(101.43,IEN,9,"B","UD RX")) S CNT=CNT+1 S RESULT("types",CNT,"type")="INPATIENT MEDS" S MEDS("UD RX")=""
"RTN","HMPCORD4",177,0)
 ;
"RTN","HMPCORD4",178,0)
 K DOSES
"RTN","HMPCORD4",179,0)
 S PSOI=+$P(^ORD(101.43,IEN,0),U,2)
"RTN","HMPCORD4",180,0)
 S TYPE="" F  S TYPE=$O(MEDS(TYPE)) Q:TYPE=""  D
"RTN","HMPCORD4",181,0)
 .D DOSE^PSSOPKI1(.HMPDOSE,PSOI,TYPE,0)
"RTN","HMPCORD4",182,0)
 .S CNT=0 F  S CNT=$O(HMPDOSE(CNT)) Q:CNT'>0  D
"RTN","HMPCORD4",183,0)
 ..S NODE=$G(HMPDOSE(CNT)),SIZE="",UID=0,DRUG="",COST=""
"RTN","HMPCORD4",184,0)
 ..S DOSE=$P(NODE,U,5)
"RTN","HMPCORD4",185,0)
 ..I $D(DOSES(DOSE)) Q
"RTN","HMPCORD4",186,0)
 ..I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S SIZE=$P(NODE,U,3)_" "_$P(NODE,U,4)
"RTN","HMPCORD4",187,0)
 ..S DRUG=$P(NODE,U,6),COST=$P(NODE,U,7)
"RTN","HMPCORD4",188,0)
 ..S DOSES(DOSE)=$G(SIZE)_U_DRUG_U_COST
"RTN","HMPCORD4",189,0)
 ;
"RTN","HMPCORD4",190,0)
 S DOSE="",CNT=1 F  S DOSE=$O(DOSES(DOSE)) Q:DOSE=""  D
"RTN","HMPCORD4",191,0)
 .S NODE=DOSES(DOSE)
"RTN","HMPCORD4",192,0)
 .S RESULT("possibleDosages",CNT,"dose")=DOSE
"RTN","HMPCORD4",193,0)
 .I $P(NODE,U)'="" S RESULT("possibleDosages",CNT,"size")=$P(NODE,U)
"RTN","HMPCORD4",194,0)
 .I $P(NODE,U,2)>0 D
"RTN","HMPCORD4",195,0)
 ..S NAME=$P($G(^PSDRUG($P(NODE,U,2),0)),U)
"RTN","HMPCORD4",196,0)
 ..S RESULT("possibleDosages",CNT,"drugUid")=$$SETUID^HMPUTILS("drug","",$P(NODE,U,2))
"RTN","HMPCORD4",197,0)
 ..S RESULT("possibleDosages",CNT,"drugInternal")=$P(NODE,U,2)
"RTN","HMPCORD4",198,0)
 ..S RESULT("possibleDosages",CNT,"drugName")=NAME
"RTN","HMPCORD4",199,0)
 .;I $P(NODE,U,3)'="" S RESULT("possibleDosages",CNT,"cost")=$P(NODE,U,3) 
"RTN","HMPCORD4",200,0)
 .S CNT=CNT+1
"RTN","HMPCORD4",201,0)
 Q
"RTN","HMPCORD4",202,0)
 ;
"RTN","HMPCORD4",203,0)
RA(RESULT,IEN,PLACE,RADTYPE,RADDET) ;
"RTN","HMPCORD4",204,0)
 N CNT,NODE,TEMP
"RTN","HMPCORD4",205,0)
 S CNT=0
"RTN","HMPCORD4",206,0)
 S NODE=$G(^ORD(101.43,IEN,0))
"RTN","HMPCORD4",207,0)
 Q:$P(NODE,U,3)=""  ;BL;DE801 NULL SUBSCRIPT FOUND AT TEST SITES
"RTN","HMPCORD4",208,0)
 I $P(NODE,U,3)'="",$P(NODE,U,4)'="" S RESULT("code")=$$SETUID^HMPUTILS($$LOW^XLFSTR($P(NODE,U,4)),"",$P(NODE,U,3))
"RTN","HMPCORD4",209,0)
 S NODE=$G(^ORD(101.43,IEN,"RA"))
"RTN","HMPCORD4",210,0)
 S RESULT("imagingDetails","contractMedia")=$P(NODE,U)
"RTN","HMPCORD4",211,0)
 I $P(NODE,U,2)'="" S TEMP=$P(NODE,U,2),RESULT("imagingDetails","procedureType")=$S(TEMP="B":"Board",TEMP="D":"Detailed",TEMP="S":"Series",TEMP="P":"Parent")
"RTN","HMPCORD4",212,0)
 I $P(NODE,U,3)'="",$D(RADTYPE($P(NODE,U,3))) D
"RTN","HMPCORD4",213,0)
 .S TEMP=$G(RADTYPE($P(NODE,U,3))),RESULT("types",1,"type")=$P(TEMP,U,2),RESULT("types",1,"uid")=$$SETUID^HMPUTILS("radType","",$P(TEMP,U)),RESULT("internal")=$P(TEMP,U),RESULT("types",1,"abb")=$P(NODE,U,3)
"RTN","HMPCORD4",214,0)
 .S RESULT("imagingDetails","commonProcedure")=$S($P(NODE,U,4)=1:"true",1:"false")
"RTN","HMPCORD4",215,0)
 .I $D(RADTYPE($P(NODE,U,3))) M RESULT("dialogAdditionalInformation")=RADDET($P(NODE,U,3))
"RTN","HMPCORD4",216,0)
 Q
"RTN","HMPCORD4",217,0)
 ;
"RTN","HMPCORD4",218,0)
RADTYPE(RADTYPE,RADDET) ;
"RTN","HMPCORD4",219,0)
 ;build radiology type array for reused to load imaging types
"RTN","HMPCORD4",220,0)
 N ABB,CNT,IMGTYP,SUBMIT,TCNT,URG,VALUES,HMPTEMP,HMPX
"RTN","HMPCORD4",221,0)
 D IMTYPSEL^ORWDRA32(.HMPTEMP,"")
"RTN","HMPCORD4",222,0)
 D CAT(.VALUES),TRANS(.VALUES),URGENCY(.VALUES)
"RTN","HMPCORD4",223,0)
 S TCNT=""
"RTN","HMPCORD4",224,0)
 F  S TCNT=$O(HMPTEMP(TCNT)) Q:TCNT=""  D
"RTN","HMPCORD4",225,0)
 .S NODE=HMPTEMP(TCNT)
"RTN","HMPCORD4",226,0)
 .S IMGTYP=$P(NODE,U),ABB=$P(NODE,U,3)
"RTN","HMPCORD4",227,0)
 .D SUBMIT(.VALUES,ABB)
"RTN","HMPCORD4",228,0)
 .S RADTYPE(ABB)=IMGTYP_U_$P(NODE,U,2)_U_$P(NODE,U,4)
"RTN","HMPCORD4",229,0)
 .I $D(VALUES) M RADDET(ABB)=VALUES
"RTN","HMPCORD4",230,0)
 .;Radiology Modifier
"RTN","HMPCORD4",231,0)
 .S I=$O(^RA(79.2,"C",ABB,0)) Q:'I
"RTN","HMPCORD4",232,0)
 .S HMPX=0,CNT=0 F  S HMPX=$O(^RAMIS(71.2,"AB",I,HMPX)) Q:'HMPX  D
"RTN","HMPCORD4",233,0)
 ..S CNT=CNT+1
"RTN","HMPCORD4",234,0)
 ..S RADDET(ABB,"modifier",CNT,"uid")=$$SETUID^HMPUTILS("modifier","",HMPX),RADDET(ABB,"modifier",CNT,"internal")=HMPX
"RTN","HMPCORD4",235,0)
 ..S RADDET(ABB,"modifier",CNT,"name")=$P(^RAMIS(71.2,HMPX,0),U)
"RTN","HMPCORD4",236,0)
 Q
"RTN","HMPCORD4",237,0)
 ;
"RTN","HMPCORD4",238,0)
 ;Transport values
"RTN","HMPCORD4",239,0)
TRANS(RADDET) ;
"RTN","HMPCORD4",240,0)
 N CNT,HMPX
"RTN","HMPCORD4",241,0)
 S CNT=0
"RTN","HMPCORD4",242,0)
 F HMPX="A^AMBULATORY","P^PORTABLE","S^STRETCHER","W^WHEELCHAIR" D
"RTN","HMPCORD4",243,0)
 .S CNT=CNT+1,RADDET("transport",CNT,"uid")=$$SETUID^HMPUTILS("transport","",$P(HMPX,U)),RADDET("transport",CNT,"name")=$P(HMPX,U,2),RADDET("transport",CNT,"internal")=$P(HMPX,U)
"RTN","HMPCORD4",244,0)
 Q
"RTN","HMPCORD4",245,0)
 ;
"RTN","HMPCORD4",246,0)
CAT(RADDET) ;category values
"RTN","HMPCORD4",247,0)
 N CNT,HMPX
"RTN","HMPCORD4",248,0)
 S CNT=0
"RTN","HMPCORD4",249,0)
 F HMPX="I^INPATIENT","O^OUTPATIENT","E^EMPLOYEE","C^CONTRACT","S^SHARING","R^RESEARCH" D
"RTN","HMPCORD4",250,0)
 .S CNT=CNT+1,RADDET("category",CNT,"uid")=$$SETUID^HMPUTILS("transport","",$P(HMPX,U)),RADDET("category",CNT,"name")=$P(HMPX,U,2),RADDET("category",CNT,"internal")=$P(HMPX,U)
"RTN","HMPCORD4",251,0)
 Q
"RTN","HMPCORD4",252,0)
 ;
"RTN","HMPCORD4",253,0)
URGENCY(URG) ; Get the allowable urgencies and default
"RTN","HMPCORD4",254,0)
 N CNT,I,HMPX
"RTN","HMPCORD4",255,0)
 S HMPX="",I=0,CNT=0
"RTN","HMPCORD4",256,0)
 F  S ORX=$O(^ORD(101.42,"S.RA",HMPX)) Q:HMPX=""  D
"RTN","HMPCORD4",257,0)
 . S I=$O(^ORD(101.42,"S.RA",HMPX,0))
"RTN","HMPCORD4",258,0)
 . S URG("urgency",CNT,"uid")=$$SETUID^HMPUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","HMPCORD4",259,0)
 . S URG("urgency",CNT,"name")=HMPX
"RTN","HMPCORD4",260,0)
 . S URG("urgency",CNT,"default")="false"
"RTN","HMPCORD4",261,0)
 . S CNT=CNT+1
"RTN","HMPCORD4",262,0)
 S I=$O(^ORD(101.42,"B","ROUTINE",0)) I +I=0 Q
"RTN","HMPCORD4",263,0)
 S CNT=CNT+1
"RTN","HMPCORD4",264,0)
 S URG("urgency",CNT,"uid")=$$SETUID^HMPUTILS("urgency","",I),URG("urgency",CNT,"internal")=I
"RTN","HMPCORD4",265,0)
 S URG("urgency",CNT,"name")="Routine"
"RTN","HMPCORD4",266,0)
 S URG("urgency",CNT,"default")="true"
"RTN","HMPCORD4",267,0)
 Q
"RTN","HMPCORD4",268,0)
 ;
"RTN","HMPCORD4",269,0)
SUBMIT(SUBMIT,IMGTYP) ; Get the locations to which the request may be submitted
"RTN","HMPCORD4",270,0)
 N CNT,FIRST,TMPLST,ASK,HMPX
"RTN","HMPCORD4",271,0)
 S CNT=0
"RTN","HMPCORD4",272,0)
 D EN4^RAO7PC1(IMGTYP,"TMPLST")
"RTN","HMPCORD4",273,0)
 S FIRST=1
"RTN","HMPCORD4",274,0)
 S I=0 F  S I=$O(TMPLST(I)) Q:'I  D
"RTN","HMPCORD4",275,0)
 . S CNT=CNT+1,HMPX=$P(TMPLST(I),U,1,2),SUBMIT("submit",CNT,"name")=$P(HMPX,U,2)
"RTN","HMPCORD4",276,0)
 . S SUBMIT("submit",CNT,"default")=$S(FIRST=1:"true",1:"false")
"RTN","HMPCORD4",277,0)
 . S SUBMIT("submit",CNT,"uid")=$$SETUID^HMPUTILS("imagingLocation","",$P(HMPX,U)),SUBMIT("submit",CNT,"internal")=$P(HMPX,U),FIRST=0
"RTN","HMPCORD4",278,0)
 S HMPX=$$GET^XPAR("ALL","RA SUBMIT PROMPT",1,"Q")
"RTN","HMPCORD4",279,0)
 S ASK=$S($L(HMPX):HMPX,1:1)
"RTN","HMPCORD4",280,0)
 S SUBMIT("askSubmit")=$S(ASK=1:"true",ASK=0:"false",1:"true")
"RTN","HMPCORD4",281,0)
 Q
"RTN","HMPCORD4",282,0)
 ;
"RTN","HMPCORD4",283,0)
QO ;
"RTN","HMPCORD4",284,0)
 N IEN,NAME,NODE,RESULT
"RTN","HMPCORD4",285,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting orderable items."
"RTN","HMPCORD4",286,0)
 S IEN=0 F  S IEN=$O(^ORD(101.41,IEN)) Q:IEN'>0  D
"RTN","HMPCORD4",287,0)
 .N $ES,$ET
"RTN","HMPCORD4",288,0)
 .S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPCORD4",289,0)
 .S NODE=$G(^ORD(101.41,IEN,0)) I $P(NODE,U,4)'="Q" Q
"RTN","HMPCORD4",290,0)
 .S NAME=$S($P(NODE,U,2)'="":$P(NODE,U,2),1:$P(NODE,U))
"RTN","HMPCORD4",291,0)
 .S RESULT("name")=NAME
"RTN","HMPCORD4",292,0)
 .S RESULT("uid")=$$SETUID^HMPUTILS("qo","",IEN),RESULT("internal")=IEN
"RTN","HMPCORD4",293,0)
 .S HMPCNT=HMPCNT+1 D ADD^HMPEF("RESULT")
"RTN","HMPCORD4",294,0)
 I IEN'>0 S HMPFINI=1
"RTN","HMPCORD4",295,0)
 Q
"RTN","HMPCORD4",296,0)
 ;
"RTN","HMPCORD4",297,0)
VALIDOI(OITYPE,IEN) ;
"RTN","HMPCORD4",298,0)
 N TEMP,TYPE
"RTN","HMPCORD4",299,0)
 I $G(^ORD(101.43,IEN,0))'=""
"RTN","HMPCORD4",300,0)
 S TEMP=$P($G(^ORD(101.43,IEN,0)),U,2)  ;Added $G for DE5080
"RTN","HMPCORD4",301,0)
 S TYPE=$P(TEMP,";",2)
"RTN","HMPCORD4",302,0)
 S TYPE=$E(TYPE,3,$L(TYPE))
"RTN","HMPCORD4",303,0)
 I OITYPE="" Q TYPE
"RTN","HMPCORD4",304,0)
 I TYPE["PS" Q TYPE
"RTN","HMPCORD4",305,0)
 I OITYPE[TYPE Q TYPE
"RTN","HMPCORD4",306,0)
 Q ""
"RTN","HMPCORD4",307,0)
 ;
"RTN","HMPCORD5")
0^10^B83583685^B89350961
"RTN","HMPCORD5",1,0)
HMPCORD5 ;SLC/AGP,ASMR/EJK,RRB - Retrieved Orderable Items;Sep 1, 2016 17:27:27
"RTN","HMPCORD5",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPCORD5",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCORD5",4,0)
 ;
"RTN","HMPCORD5",5,0)
 ; DE2497/RRB - Removed unused variable, HMP777
"RTN","HMPCORD5",6,0)
 ;
"RTN","HMPCORD5",7,0)
 ; DE6652 - JD - 9/1/16: Removed code behind synching sign-symptom domain for operational data.
"RTN","HMPCORD5",8,0)
 ;                       SIGNS tag.
"RTN","HMPCORD5",9,0)
 ;
"RTN","HMPCORD5",10,0)
 Q
"RTN","HMPCORD5",11,0)
 ;
"RTN","HMPCORD5",12,0)
IMMTYPE ;
"RTN","HMPCORD5",13,0)
 N ORWLST,ORDT,HMPIMM
"RTN","HMPCORD5",14,0)
 S (ORWLST,ORDT)=""
"RTN","HMPCORD5",15,0)
 S (HMPCNT,HMPLAST,HMPI)=0
"RTN","HMPCORD5",16,0)
 N IMM
"RTN","HMPCORD5",17,0)
 ;D IMMTYPE^ORWPCE2(.ORWLST,ORDT)   ;use existing broker call ORWPCE GET IMMUNIZATION TYPE
"RTN","HMPCORD5",18,0)
 N IEN,CNT,BINDEX S (IEN,CNT)=0
"RTN","HMPCORD5",19,0)
 S:'$G(ORDT) ORDT=DT
"RTN","HMPCORD5",20,0)
 ; ^AUTTIMM - IMMUNIZATION file #9999999.14, ***DBIA2454 subscription needed***
"RTN","HMPCORD5",21,0)
 F  S IEN=$O(^AUTTIMM(IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",22,0)
 . I $D(^AUTTIMM(IEN,0))#2,+$P(^(0),"^",7)=0 S CNT=CNT+1,ORWLST(CNT)=IEN_"^"_$G(^(0))
"RTN","HMPCORD5",23,0)
 . Q
"RTN","HMPCORD5",24,0)
 S IMM="",HMPIMM=""
"RTN","HMPCORD5",25,0)
 F  S IMM=$O(ORWLST(IMM)) Q:IMM=""  D
"RTN","HMPCORD5",26,0)
 . S HMPIMM("localId")=$P(ORWLST(IMM),"^",1)  ;get the ien for each item found
"RTN","HMPCORD5",27,0)
 . S HMPIMM("name")=$P(ORWLST(IMM),"^",2) ;get the name for each item found
"RTN","HMPCORD5",28,0)
 . S HMPIMM("mnemonic")=$P(ORWLST(IMM),"^",3)  ;get the mnemonic for each entry
"RTN","HMPCORD5",29,0)
 . S HMPIMM("uid")=$$SETUID^HMPUTILS("immunization",,HMPIMM("localId"))  ;set the uid string
"RTN","HMPCORD5",30,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPCORD5",31,0)
 . D ADD^HMPEF("HMPIMM") S HMPLAST=HMPCNT  ;add it to the JSON results array
"RTN","HMPCORD5",32,0)
 . Q
"RTN","HMPCORD5",33,0)
 S HMPFINI=1
"RTN","HMPCORD5",34,0)
 Q
"RTN","HMPCORD5",35,0)
 ;
"RTN","HMPCORD5",36,0)
ALLTYPE ; deprecated
"RTN","HMPCORD5",37,0)
 ;N ORX,ROOT,XP,CNT,ORFILE,ORSRC,ORIEN,ORREAX,ALLCNT,ALLLAST,ALLITEM
"RTN","HMPCORD5",38,0)
 ;S ORIEN=0,CNT=0,ORSRC=0,ORFILE="",ALLCNT=0,ALLLAST=0
"RTN","HMPCORD5",39,0)
 ;S X=""
"RTN","HMPCORD5",40,0)
 ;F ROOT="^GMRD(120.82)","^PSNDF(50.6)","^PSNDF(50.67)","^PSDRUG(""B"")","^PS(50.416)","^PS(50.605)" D
"RTN","HMPCORD5",41,0)
 ;F ROOT="^GMRD(120.82,""B"")","^GMRD(120.82,""D"")","^PSDRUG(""C"")","^PS(50.416,""P"")","^PS(50.605,""C"")",$$B^PSNAPIS,$$T^PSNAPIS,"^PSDRUG(""B"")" D
"RTN","HMPCORD5",42,0)
 ;F ROOT="^GMRD(120.82,""B"")","^PSDRUG(""C"")","^PS(50.416,""P"")","^PS(50.605,""C"")",$$B^PSNAPIS,$$T^PSNAPIS,"^PSDRUG(""B"")" D
"RTN","HMPCORD5",43,0)
 ;. S ORSRC=$G(ORSRC)+1,ORFILE=$P(ROOT,",",1)_")",ORSRC(ORSRC)=$P($T(FILENAME+ORSRC),";;",2)
"RTN","HMPCORD5",44,0)
 ;. I (ORSRC'=2),(ORSRC'=6) S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORSRC_U_ORSRC(ORSRC)_U_U_U_"TOP"_U_"+"
"RTN","HMPCORD5",45,0)
 ;. I ORSRC=1!(ORSRC=2) D
"RTN","HMPCORD5",46,0)
 ;.. F  S X=$O(@ROOT@(X)) Q:X=""  D
"RTN","HMPCORD5",47,0)
 ;... I ORSRC=1,X="OTHER ALLERGY/ADVERSE REACTION" Q  ;don't send this entry
"RTN","HMPCORD5",48,0)
 ;... S ORIEN=$O(@ROOT@(X,0))
"RTN","HMPCORD5",49,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(120.82,.01,ORIEN_",") Q  ;233 Is term active?
"RTN","HMPCORD5",50,0)
 ;... I ORSRC=2 S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,1)_" <"_X_">"_ROOT
"RTN","HMPCORD5",51,0)
 ;... I ORSRC'=2  S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_X_ROOT
"RTN","HMPCORD5",52,0)
 ;... S Y(ORIEN_";"_ROOT)=Y(ORIEN_";"_ROOT)_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,2)_U_$S(ORSRC=2:1,1:ORSRC)
"RTN","HMPCORD5",53,0)
 ;.. S XP=X F  S XP=$O(@ROOT@(XP)) Q:XP=""  Q:$E(XP,1,$L(X))'=X  D
"RTN","HMPCORD5",54,0)
 ;... I ORSRC=1,XP="OTHER ALLERGY/ADVERSE REACTION" Q  ;don't send this entry
"RTN","HMPCORD5",55,0)
 ;... S ORIEN=$O(@ROOT@(XP,0))
"RTN","HMPCORD5",56,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(120.82,.01,ORIEN_",") Q  ;233 Is term active?
"RTN","HMPCORD5",57,0)
 ;... I ORSRC=2 S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,1)_" <"_XP_">"_ROOT ; partial matches
"RTN","HMPCORD5",58,0)
 ;... I ORSRC'=2  S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_XP_ROOT
"RTN","HMPCORD5",59,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) Y(ORIEN_";"_ROOT)=Y(ORIEN_";"_ROOT)_U_$P($G(^GMRD(120.82,+ORIEN,0)),U,2)_U_$S(ORSRC=2:1,1:ORSRC)
"RTN","HMPCORD5",60,0)
 ;.. I (ORSRC>2),(ORSRC'=4),(ORSRC'=5),(ORSRC'=6) D
"RTN","HMPCORD5",61,0)
 ;.. N CODE,LIST,VAL,NAME
"RTN","HMPCORD5",62,0)
 ;.. S CODE=$S(ORSRC=3:"S VAL=$$TGTOG2^PSNAPIS(X,.LIST)",ORSRC=4:"D TRDNAME(X,.LIST)",ORSRC=7:"D INGSRCH(X,.LIST)",ORSRC=8:"D CLASRCH(X,.LIST)",1:"") Q:'$L(CODE)
"RTN","HMPCORD5",63,0)
 ;.. X CODE I $D(LIST) S ORIEN=0 F  S ORIEN=$O(LIST(ORIEN)) Q:'ORIEN  D
"RTN","HMPCORD5",64,0)
 ;... S NAME=$P(LIST(ORIEN),U,2)
"RTN","HMPCORD5",65,0)
 ;... Q:$E($P(LIST(ORIEN),U,2),1,$L(X))'=X
"RTN","HMPCORD5",66,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID($S(ORSRC=3:50.6,(ORSRC=4):50.6,ORSRC=7:50.416,ORSRC=8:50.605,1:0),.01,ORIEN_",") Q
"RTN","HMPCORD5",67,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=ORIEN_U_NAME_ROOT_U_"D"_U_ORSRC
"RTN","HMPCORD5",68,0)
 ;.. I ORSRC=4 D
"RTN","HMPCORD5",69,0)
 ;.. N CODE,LIST,VAL,NAME
"RTN","HMPCORD5",70,0)
 ;.. S CODE="D TRDNAME(X,.LIST)"
"RTN","HMPCORD5",71,0)
 ;.. X CODE I $D(LIST) S ORIEN=0 F  S ORIEN=$O(LIST(ORIEN)) Q:'ORIEN  D
"RTN","HMPCORD5",72,0)
 ;... S NAME=$P(LIST(ORIEN),U,2)
"RTN","HMPCORD5",73,0)
 ;... Q:$E($P(LIST(ORIEN),U,2),1,$L(X))'=X
"RTN","HMPCORD5",74,0)
 ;... I $L($T(SCREEN^XTID)) I $$SCREEN^XTID(50.6,.01,+LIST(ORIEN)_",") Q
"RTN","HMPCORD5",75,0)
 ;... S:'$D(Y(ORIEN_";"_ROOT)) CNT=CNT+1,Y(ORIEN_";"_ROOT)=+LIST(ORIEN)_U_NAME_ROOT_U_"D"_U_ORSRC
"RTN","HMPCORD5",76,0)
 ;S CNT=""
"RTN","HMPCORD5",77,0)
 ;F  S CNT=$O(Y(CNT)) Q:CNT=""  D
"RTN","HMPCORD5",78,0)
 ;. K ALLERGY
"RTN","HMPCORD5",79,0)
 ;. S ALLITEM=$G(Y(CNT))
"RTN","HMPCORD5",80,0)
 ;. I Y(CNT)["^TOP^+" Q
"RTN","HMPCORD5",81,0)
 ;. I Y(CNT)'["^TOP^+" D
"RTN","HMPCORD5",82,0)
 ;.. S ALLERGY("localId")=$P(ALLITEM,"^",1)
"RTN","HMPCORD5",83,0)
 ;.. S ALLERGY("name")=$P(ALLITEM,"^",2)
"RTN","HMPCORD5",84,0)
 ;.. S ALLERGY("root")=$P(ALLITEM,"^",3)
"RTN","HMPCORD5",85,0)
 ;.. S ALLERGY("uid")=$$SETUID^HMPUTILS("allergy-list",,ALLERGY("localId")_";"_$TR(ALLERGY("root"),"""",""))  ;set the uid string
"RTN","HMPCORD5",86,0)
 ;.. S HMPCNT=$G(HMPCNT)+1 D ADD^HMPEF("ALLERGY") S HMPLAST=HMPCNT
"RTN","HMPCORD5",87,0)
 ;.. Q
"RTN","HMPCORD5",88,0)
 ;. Q
"RTN","HMPCORD5",89,0)
 ;S HMPFINI=1
"RTN","HMPCORD5",90,0)
 ;K X,Y
"RTN","HMPCORD5",91,0)
 Q
"RTN","HMPCORD5",92,0)
 ;
"RTN","HMPCORD5",93,0)
VTYPE ; ;VITALS TYPE
"RTN","HMPCORD5",94,0)
 N IEN
"RTN","HMPCORD5",95,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",96,0)
 F  S IEN=$O(^GMRD(120.51,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",97,0)
 . S VTYPE("localId")=IEN
"RTN","HMPCORD5",98,0)
 . S VTYPE("name")=$P(^GMRD(120.51,IEN,0),"^",1)
"RTN","HMPCORD5",99,0)
 . S VTYPE("abbreviation")=$P(^GMRD(120.51,IEN,0),"^",2)
"RTN","HMPCORD5",100,0)
 . S VTYPE("rate")=$P(^GMRD(120.51,IEN,0),"^",4)
"RTN","HMPCORD5",101,0)
 . I VTYPE("rate")]"" S VTYPE("rate")=$S(VTYPE("rate")=1:"YES",1:"NO")
"RTN","HMPCORD5",102,0)
 . S VTYPE("pce")=$P(^GMRD(120.51,IEN,0),"^",7)
"RTN","HMPCORD5",103,0)
 . S VTYPE("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.51,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",104,0)
 . S VTYPE("masterVuid")=$P($G(^GMRD(120.51,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",105,0)
 . I VTYPE("masterVuid")]"" S VTYPE("masterVuid")=$S(VTYPE("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",106,0)
 . S VTYPE("effective")=$P($G(^GMRD(120.51,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",107,0)
 . I VTYPE("effective")]"" S VTYPE("effective")=$$JSONDT^HMPUTILS(VTYPE("effective"))
"RTN","HMPCORD5",108,0)
 . S VTYPE("status")=$P($G(^GMRD(120.51,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",109,0)
 . I VTYPE("status")]"" S VTYPE("status")=$S(VTYPE("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",110,0)
 . S VTYPE("uid")=$$SETUID^HMPUTILS("vital-type",,VTYPE("localId"))
"RTN","HMPCORD5",111,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VTYPE") S HMPLAST=HMPCNT
"RTN","HMPCORD5",112,0)
 S HMPFINI=1
"RTN","HMPCORD5",113,0)
 K VTYPE
"RTN","HMPCORD5",114,0)
 Q
"RTN","HMPCORD5",115,0)
 ;
"RTN","HMPCORD5",116,0)
VQUAL ; VITALS QUALIFIER
"RTN","HMPCORD5",117,0)
 N IEN,I
"RTN","HMPCORD5",118,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",119,0)
 F  S IEN=$O(^GMRD(120.52,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",120,0)
 . S VQUAL("localId")=IEN
"RTN","HMPCORD5",121,0)
 . S VQUAL("synonym")=$P(^GMRD(120.52,IEN,0),"^",2)
"RTN","HMPCORD5",122,0)
 . S I=0
"RTN","HMPCORD5",123,0)
 . K VQUAL("vtype") ;ejk - stop bleed over from previous extracts. 
"RTN","HMPCORD5",124,0)
 . F  S I=$O(^GMRD(120.52,IEN,1,I)) Q:I=""!(I'?1N.N)  D
"RTN","HMPCORD5",125,0)
 .. S VQUAL("vtype",I,"vitalType")=$P($G(^GMRD(120.52,IEN,1,I,0)),"^",1)
"RTN","HMPCORD5",126,0)
 .. S VQUAL("vtype",I,"category")=$P($G(^GMRD(120.52,IEN,1,I,0)),"^",2)
"RTN","HMPCORD5",127,0)
 .. ;ejk DE294 - vital type and vital category need to be presented as urn entries and not the name
"RTN","HMPCORD5",128,0)
 .. ;I VQUAL("vtype",I,"vitalType")]"" S VQUAL("vtype",I,"vitalType")=$P($G(^GMRD(120.51,I,0)),"^",1)
"RTN","HMPCORD5",129,0)
 .. ;I VQUAL("vtype",I,"category")]"" S VQUAL("vtype",I,"category")=$P($G(^GMRD(120.53,I,0)),"^",1)
"RTN","HMPCORD5",130,0)
 .. I VQUAL("vtype",I,"vitalType")]"" S VQUAL("vtype",I,"vitalType")=$$SETUID^HMPUTILS("vital-type",,VQUAL("vtype",I,"vitalType"))
"RTN","HMPCORD5",131,0)
 .. I VQUAL("vtype",I,"category")]"" S VQUAL("vtype",I,"category")=$$SETUID^HMPUTILS("vital-category",,VQUAL("vtype",I,"category"))
"RTN","HMPCORD5",132,0)
 .. Q
"RTN","HMPCORD5",133,0)
 . S VQUAL("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.52,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",134,0)
 . S VQUAL("masterVuid")=$P($G(^GMRD(120.52,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",135,0)
 . I VQUAL("masterVuid")]"" S VQUAL("masterVuid")=$S(VQUAL("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",136,0)
 . S VQUAL("effectiveDate")=$P($G(^GMRD(120.52,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",137,0)
 . I VQUAL("effectiveDate")]"" S VQUAL("effectiveDate")=$$JSONDT^HMPUTILS(VQUAL("effectiveDate"))
"RTN","HMPCORD5",138,0)
 . S VQUAL("status")=$P($G(^GMRD(120.52,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",139,0)
 . I VQUAL("status")]"" S VQUAL("status")=$S(VQUAL("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",140,0)
 . S VQUAL("uid")=$$SETUID^HMPUTILS("vital-qualifier",,VQUAL("localId"))
"RTN","HMPCORD5",141,0)
 . S VQUAL("qualifier")=$$SETUID^HMPUTILS("vital-qualifier",,VQUAL("localId"))
"RTN","HMPCORD5",142,0)
 . ;ejk DE295 do not include qualifier if it is the same value as the uid
"RTN","HMPCORD5",143,0)
 . I VQUAL("uid")=VQUAL("qualifier") K VQUAL("qualifier")
"RTN","HMPCORD5",144,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VQUAL") S HMPLAST=HMPCNT
"RTN","HMPCORD5",145,0)
 S HMPFINI=1
"RTN","HMPCORD5",146,0)
 K VQUAL
"RTN","HMPCORD5",147,0)
 Q
"RTN","HMPCORD5",148,0)
 ;
"RTN","HMPCORD5",149,0)
VCAT ;VITALS CATAGORY
"RTN","HMPCORD5",150,0)
 N IEN,I
"RTN","HMPCORD5",151,0)
 S (HMPCNT,HMPI,HMPLAST,IEN)=0
"RTN","HMPCORD5",152,0)
 F  S IEN=$O(^GMRD(120.53,IEN)) Q:IEN=""!(IEN'?1N.N)  D
"RTN","HMPCORD5",153,0)
 . S VCAT("localId")=IEN
"RTN","HMPCORD5",154,0)
 . I $P($G(^GMRD(120.53,IEN,0)),"^",1)]"" S VCAT("category")=$P(^GMRD(120.53,IEN,0),"^",1)
"RTN","HMPCORD5",155,0)
 . I $P($G(^GMRD(120.53,IEN,0)),"^",2)]"" S VCAT("synonym")=$P(^GMRD(120.53,IEN,0),"^",2)
"RTN","HMPCORD5",156,0)
 . I $G(VCAT("synonym"))="" K VCAT("synonym")
"RTN","HMPCORD5",157,0)
 . S I=0
"RTN","HMPCORD5",158,0)
 . ;EJK - kill off vtype array to stop inheriting values from previous extracts
"RTN","HMPCORD5",159,0)
 . K VCAT("vtype")
"RTN","HMPCORD5",160,0)
 . F  S I=$O(^GMRD(120.53,IEN,1,I)) Q:I=""!(I'?1N.N)  D
"RTN","HMPCORD5",161,0)
 .. ;ejk DE298 do not send null values. 
"RTN","HMPCORD5",162,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",1)]"" S VCAT("vtype",I,"vitalType")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",1)
"RTN","HMPCORD5",163,0)
 .. I VCAT("vtype",I,"vitalType")]"" S VCAT("vtype",I,"vitalType")=$$SETUID^HMPUTILS("vital-type",,VCAT("vtype",I,"vitalType"))
"RTN","HMPCORD5",164,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",3)]"" S VCAT("vtype",I,"maxEntries")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",3)
"RTN","HMPCORD5",165,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",5)]"" S VCAT("vtype",I,"printOrder")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",5)
"RTN","HMPCORD5",166,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",6)]"" S VCAT("vtype",I,"editOrder")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",6)
"RTN","HMPCORD5",167,0)
 .. I $P($G(^GMRD(120.53,IEN,1,I,0)),"^",7)]"" S VCAT("vtype",I,"defaultQualifier")=$P($G(^GMRD(120.53,IEN,1,I,0)),"^",7),VCAT("vtype",I,"defaultQualifier")=$$SETUID^HMPUTILS("vital-qualifier",,VCAT("vtype",I,"defaultQualifier"))
"RTN","HMPCORD5",168,0)
 .. Q
"RTN","HMPCORD5",169,0)
 . S VCAT("vuid")="urn:va:vuid:"_$P($G(^GMRD(120.53,IEN,"VUID")),"^",1)
"RTN","HMPCORD5",170,0)
 . S VCAT("masterVuid")=$P($G(^GMRD(120.53,IEN,"VUID")),"^",2)
"RTN","HMPCORD5",171,0)
 . I VCAT("masterVuid")]"" S VCAT("masterVuid")=$S(VCAT("masterVuid")=1:"YES",1:"NO")
"RTN","HMPCORD5",172,0)
 . S VCAT("effectiveDate")=$P($G(^GMRD(120.53,IEN,"TERMSTATUS",1,0)),"^",1)
"RTN","HMPCORD5",173,0)
 . I VCAT("effectiveDate")]"" S VCAT("effectiveDate")=$$JSONDT^HMPUTILS(VCAT("effectiveDate"))
"RTN","HMPCORD5",174,0)
 . S VCAT("status")=$P($G(^GMRD(120.53,IEN,"TERMSTATUS",1,0)),"^",2)
"RTN","HMPCORD5",175,0)
 . I VCAT("status")]"" S VCAT("status")=$S(VCAT("status")=1:"ACTIVE",1:"INACTIVE")
"RTN","HMPCORD5",176,0)
 . S VCAT("uid")=$$SETUID^HMPUTILS("vital-category",,VCAT("localId"))
"RTN","HMPCORD5",177,0)
 . S HMPCNT=HMPCNT+1 D ADD^HMPEF("VCAT") S HMPLAST=HMPCNT
"RTN","HMPCORD5",178,0)
 . Q
"RTN","HMPCORD5",179,0)
 S HMPFINI=1
"RTN","HMPCORD5",180,0)
 K VCAT
"RTN","HMPCORD5",181,0)
 Q
"RTN","HMPCORD5",182,0)
 ;
"RTN","HMPCORD5",183,0)
INGSRCH(NAME,LIST) ;
"RTN","HMPCORD5",184,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",185,0)
 D NAME^PSN50P41(NAME,"ORWDAL32")
"RTN","HMPCORD5",186,0)
 I $D(^TMP($J,"ORWDAL32","P")) D
"RTN","HMPCORD5",187,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","P",I)) Q:I=""  D
"RTN","HMPCORD5",188,0)
 .. N J S J=0 F  S J=$O(^TMP($J,"ORWDAL32","P",I,J)) Q:'J  S LIST(J)=J_U_I
"RTN","HMPCORD5",189,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",190,0)
 Q
"RTN","HMPCORD5",191,0)
CLASRCH(NAME,LIST) ;
"RTN","HMPCORD5",192,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",193,0)
 D C^PSN50P65(,NAME,"ORWDAL32")
"RTN","HMPCORD5",194,0)
 I $D(^TMP($J,"ORWDAL32","C")) D
"RTN","HMPCORD5",195,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","C",I)) Q:I=""  D
"RTN","HMPCORD5",196,0)
 .. N J S J=0 F  S J=$O(^TMP($J,"ORWDAL32","C",I,J)) Q:'J  S LIST(J)=J_U_$G(^TMP($J,"ORWDAL32",J,1))
"RTN","HMPCORD5",197,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",198,0)
 Q
"RTN","HMPCORD5",199,0)
TRDNAME(NAME,LIST) ;
"RTN","HMPCORD5",200,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",201,0)
 D ALL^PSN5067(,NAME,,"ORWDAL32")
"RTN","HMPCORD5",202,0)
 I $D(^TMP($J,"ORWDAL32","B")) D
"RTN","HMPCORD5",203,0)
 . N I S I="" F  S I=$O(^TMP($J,"ORWDAL32","B",I)) Q:I=""  D
"RTN","HMPCORD5",204,0)
 .. N J,K S J=$O(^TMP($J,"ORWDAL32","B",I,0)) Q:'J  S K=$$TGTOG^PSNAPIS(I),LIST(J)=K_U_$G(^TMP($J,"ORWDAL32",J,4))
"RTN","HMPCORD5",205,0)
 K ^TMP($J,"ORWDAL32")
"RTN","HMPCORD5",206,0)
 Q
"RTN","HMPCORD5",207,0)
FILENAME ; Display text of filenames for search treeview
"RTN","HMPCORD5",208,0)
 ;;VA Allergies File
"RTN","HMPCORD5",209,0)
 ;;VA Allergies File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPCORD5",210,0)
 ;;National Drug File - Generic Drug Name
"RTN","HMPCORD5",211,0)
 ;;National Drug file - Trade Name
"RTN","HMPCORD5",212,0)
 ;;Local Drug File
"RTN","HMPCORD5",213,0)
 ;;Local Drug File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPCORD5",214,0)
 ;;Drug Ingredients File
"RTN","HMPCORD5",215,0)
 ;;VA Drug Class File
"RTN","HMPCORD5",216,0)
 ;;
"RTN","HMPCPAT")
1^61^^n/a
"RTN","HMPCRPC1")
0^13^B113427224^B104887301
"RTN","HMPCRPC1",1,0)
HMPCRPC1 ;SLC/AGP,ASMR/RRB,CK,JD - Patient and User routine;Aug 10, 2016 11:10:07
"RTN","HMPCRPC1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,3**;May 15, 2016;Build 15
"RTN","HMPCRPC1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPCRPC1",4,0)
 ;
"RTN","HMPCRPC1",5,0)
 ; External References          DBIA#
"RTN","HMPCRPC1",6,0)
 ; -------------------          -----
"RTN","HMPCRPC1",7,0)
 ; ^DPT                         10035
"RTN","HMPCRPC1",8,0)
 ; GET1^DIQ(2,...,.121           4080  ;DE6363
"RTN","HMPCRPC1",9,0)
 ; GETS^DIQ(200                 10060
"RTN","HMPCRPC1",10,0)
 ;
"RTN","HMPCRPC1",11,0)
 ;DE4474 - JD - 8/10/16: If there are KEYS that don't exist, instead of returning nothing,
"RTN","HMPCRPC1",12,0)
 ;                       return the KEYS that do exist.
"RTN","HMPCRPC1",13,0)
 ;
"RTN","HMPCRPC1",14,0)
 Q
"RTN","HMPCRPC1",15,0)
 ;
"RTN","HMPCRPC1",16,0)
GETADD(VALUES,DFN) ;
"RTN","HMPCRPC1",17,0)
 K VAPA
"RTN","HMPCRPC1",18,0)
 D ADD^VADPT
"RTN","HMPCRPC1",19,0)
 N INC,NUM,TEMP
"RTN","HMPCRPC1",20,0)
 I VAPA(12)=1 D
"RTN","HMPCRPC1",21,0)
 .I $L(VAPA(13))>0 S VALUES("confidentIalAddress","street",0)=VAPA(13)
"RTN","HMPCRPC1",22,0)
 .I $L(VAPA(14))>0 S VALUES("confidentIalAddress","street",1)=VAPA(14)
"RTN","HMPCRPC1",23,0)
 .I $L(VAPA(15))>0 S VALUES("confidentIalAddress","street",2)=VAPA(15)
"RTN","HMPCRPC1",24,0)
 .I $L(VAPA(16))>0 S VALUES("confidentIalAddress","city")=VAPA(16)
"RTN","HMPCRPC1",25,0)
 .I $L(VAPA(17))>0 S VALUES("confidentIalAddress","state")=$P(VAPA(17),U,2)
"RTN","HMPCRPC1",26,0)
 .I $L(VAPA(18))>0 S VALUES("confidentIalAddress","zip")=VAPA(18)
"RTN","HMPCRPC1",27,0)
 .I $L(VAPA(20))>0 S VALUES("confidentIalAddress","startDate")=$P(VAPA(20),U,2)
"RTN","HMPCRPC1",28,0)
 .I $L(VAPA(21))>0 S VALUES("confidentIalAddress","stopDate")=$P(VAPA(21),U,2)
"RTN","HMPCRPC1",29,0)
 .S INC=0,NUM=0 F  S INC=$O(VAPA(22,INC)) Q:INC=""  D
"RTN","HMPCRPC1",30,0)
 ..S NUM=NUM+1,VALUES("confidentIalAddress","catgories",NUM,"category")=$P(VAPA(22,INC),U,2)
"RTN","HMPCRPC1",31,0)
 ..S VALUES("confidentIalAddress","catgories",NUM,"status")=$S($P(VAPA(22,INC),U,3)="Y":"true",1:"false")
"RTN","HMPCRPC1",32,0)
 ;
"RTN","HMPCRPC1",33,0)
 ;I $L(VAPA(1))>0 S VALUES("address","street",0)=VAPA(1)
"RTN","HMPCRPC1",34,0)
 ;I $L(VAPA(2))>0 S VALUES("address","street",1)=VAPA(2)
"RTN","HMPCRPC1",35,0)
 ;I $L(VAPA(3))>0 S VALUES("address","street",2)=VAPA(3)
"RTN","HMPCRPC1",36,0)
 ;I $L(VAPA(4))>0 S VALUES("address","city")=VAPA(4)
"RTN","HMPCRPC1",37,0)
 ;I $L(VAPA(5))>0 S VALUES("address","state")=$P(VAPA(5),U,2)
"RTN","HMPCRPC1",38,0)
 ;I $L(VAPA(6))>0 S VALUES("address","zip")=VAPA(6)
"RTN","HMPCRPC1",39,0)
 I VAPA(9)]"" S VALUES("temporaryAddress","startDate")=$P(VAPA(9),U,2)
"RTN","HMPCRPC1",40,0)
 I VAPA(10)]"" S VALUES("temporaryAddress","stopDate")=$P(VAPA(10),U,2)
"RTN","HMPCRPC1",41,0)
ADDX ;
"RTN","HMPCRPC1",42,0)
 ;I $L(VAPA(8))>0 S VALUES("address","phone")=VAPA(8)
"RTN","HMPCRPC1",43,0)
 I $P($G(^DPT(DFN,.13)),U,3)'="" S VALUES("email")=$P($G(^DPT(DFN,.13)),U,3)  ;ICR 10035
"RTN","HMPCRPC1",44,0)
 I +$P($G(^DPT(DFN,.11)),U,16)>0 S VALUES("badAddress")=$$GET1^DIQ(2,DFN_",",.121) ;ICR 4080
"RTN","HMPCRPC1",45,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",46,0)
 Q
"RTN","HMPCRPC1",47,0)
 ;
"RTN","HMPCRPC1",48,0)
GETBSA(DFN) ;
"RTN","HMPCRPC1",49,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","HMPCRPC1",50,0)
 S TEST=""
"RTN","HMPCRPC1",51,0)
 D BSA^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","HMPCRPC1",52,0)
 Q +$G(DATA(1,"BSA"))
"RTN","HMPCRPC1",53,0)
 ;
"RTN","HMPCRPC1",54,0)
GETBMI(DFN) ;
"RTN","HMPCRPC1",55,0)
 ;  BMI(DFN,NGET,BDT,EDT,NFOUND,TEST,DATE,DATA,TEXT) 
"RTN","HMPCRPC1",56,0)
 N DATE,DATA,NFOUND,TEST,TEXT
"RTN","HMPCRPC1",57,0)
 D BMI^PXRMBMI(DFN,1,0,DT,.NFOUND,.TEST,.DATE,.DATA,.TEXT)
"RTN","HMPCRPC1",58,0)
 Q +$G(DATA(1,"BMI"))
"RTN","HMPCRPC1",59,0)
 ;
"RTN","HMPCRPC1",60,0)
GETDEM(VALUES,DFN) ;
"RTN","HMPCRPC1",61,0)
 D DEM^VADPT
"RTN","HMPCRPC1",62,0)
 S VALUES("name")=VADM(1)
"RTN","HMPCRPC1",63,0)
 I VADM(2)]"" S VALUES("ssn")=$P(VADM(2),U,2)
"RTN","HMPCRPC1",64,0)
 I VADM(3)]"" S VALUES("dob")=$P(VADM(3),U,2)
"RTN","HMPCRPC1",65,0)
 I VADM(4)]"" S VALUES("age")=VADM(4)
"RTN","HMPCRPC1",66,0)
 I VADM(5)]"" S VALUES("gender")=$P(VADM(5),U,2)
"RTN","HMPCRPC1",67,0)
 I VADM(6)]"" S VALUES("dateDeath")=$P(VADM(6),U,2)
"RTN","HMPCRPC1",68,0)
 I VADM(7)]"" S VALUES("remarks")=VADM(7)
"RTN","HMPCRPC1",69,0)
 I VADM(8)]"" S VALUES("race")=$P(VADM(8),U,2)
"RTN","HMPCRPC1",70,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",71,0)
 Q
"RTN","HMPCRPC1",72,0)
 ;
"RTN","HMPCRPC1",73,0)
GETKEYS(VALUES,USER) ;
"RTN","HMPCRPC1",74,0)
 N NAME,HMPERR,HMPLIST,CNT
"RTN","HMPCRPC1",75,0)
 ; DE4474 - Replaced LIST^DIC with GETS^DIQ since the former would kill the output array if
"RTN","HMPCRPC1",76,0)
 ; there were any errors.  Therefore, NO keys would have been extracted even if there were 
"RTN","HMPCRPC1",77,0)
 ; only one non-existent key.
"RTN","HMPCRPC1",78,0)
 ; The "N" flag will signal the API not to create an entry in HMPLIST array if the value of 
"RTN","HMPCRPC1",79,0)
 ; the field is null.  So, if there is a non-existent key, it will NOT have a description
"RTN","HMPCRPC1",80,0)
 ; and therefore will NOT have an entry in HMPLIST.  This way, the existent keys will be 
"RTN","HMPCRPC1",81,0)
 ; extracted and the non-existent keys will be skipped.
"RTN","HMPCRPC1",82,0)
 D GETS^DIQ(200,USER_",","51*","EN","HMPLIST","HMPERR")  ;ICR 10060
"RTN","HMPCRPC1",83,0)
 S CNT=0 F  S CNT=$O(HMPLIST(200.051,CNT)) Q:CNT'>0  D
"RTN","HMPCRPC1",84,0)
 . S NAME=$G(HMPLIST(200.051,CNT,.01,"E")) Q:NAME=""
"RTN","HMPCRPC1",85,0)
 . S VALUES("vistaKeys",NAME)="TRUE"
"RTN","HMPCRPC1",86,0)
 Q
"RTN","HMPCRPC1",87,0)
 ;
"RTN","HMPCRPC1",88,0)
GETNOK(VALUES,DFN,TYPE) ;
"RTN","HMPCRPC1",89,0)
 K VAOA
"RTN","HMPCRPC1",90,0)
 S VAOA("A")=TYPE
"RTN","HMPCRPC1",91,0)
 N CNT,CONTACT
"RTN","HMPCRPC1",92,0)
 S CONTACT=$S(TYPE=3:"secondary",1:"primary")
"RTN","HMPCRPC1",93,0)
 S CNT=$S(TYPE=3:2,1:1)
"RTN","HMPCRPC1",94,0)
 D OAD^VADPT
"RTN","HMPCRPC1",95,0)
 ;
"RTN","HMPCRPC1",96,0)
 I VAOA(9)]"" S VALUES("nok",CNT,"name")=VAOA(9)
"RTN","HMPCRPC1",97,0)
 I VAOA(10)]"" S VALUES("nok",CNT,"relationship")=VAOA(10)
"RTN","HMPCRPC1",98,0)
 I VAOA(1)]"" S VALUES("nok",CNT,"address","street",1)=VAOA(1)
"RTN","HMPCRPC1",99,0)
 I VAOA(2)]"" S VALUES("nok",CNT,"address","street",2)=VAOA(2)
"RTN","HMPCRPC1",100,0)
 I VAOA(3)]"" S VALUES("nok",CNT,"address","street",3)=VAOA(3)
"RTN","HMPCRPC1",101,0)
 I VAOA(4)]"" S VALUES("nok",CNT,"address","city")=VAOA(4)
"RTN","HMPCRPC1",102,0)
 I VAOA(5)]"" S VALUES("nok",CNT,"address","state")=$P(VAOA(5),U,2)
"RTN","HMPCRPC1",103,0)
 I VAOA(6)]"" S VALUES("nok",CNT,"address","zip")=VAOA(6)
"RTN","HMPCRPC1",104,0)
 I VAOA(8)]"" S VALUES("nok",CNT,"address","phone")=VAOA(8)
"RTN","HMPCRPC1",105,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",106,0)
 Q
"RTN","HMPCRPC1",107,0)
 ;
"RTN","HMPCRPC1",108,0)
GETMEANS(VALUES,DFN) ;
"RTN","HMPCRPC1",109,0)
 K VAEL
"RTN","HMPCRPC1",110,0)
 D ELIG^VADPT
"RTN","HMPCRPC1",111,0)
 I VAEL(9)]"" S VALUES("meanStatus")=$P(VAEL(9),U,2)
"RTN","HMPCRPC1",112,0)
 D KVAR^VADPT
"RTN","HMPCRPC1",113,0)
 Q
"RTN","HMPCRPC1",114,0)
 ;
"RTN","HMPCRPC1",115,0)
GETPATI(RESULT,DFN) ;
"RTN","HMPCRPC1",116,0)
 N TYPE,VALUES,HMPERR,Y,HMPODEM,HMPSYS
"RTN","HMPCRPC1",117,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPCRPC1",118,0)
 D DPT1OD^HMPDJ00(.VALUES)
"RTN","HMPCRPC1",119,0)
 G GPQ
"RTN","HMPCRPC1",120,0)
 S VALUES("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPCRPC1",121,0)
 ;D BUILDUID^HMPPARAM(.VALUES,"patient",DFN)
"RTN","HMPCRPC1",122,0)
 ;D GETDEM(.VALUES,DFN)
"RTN","HMPCRPC1",123,0)
 D GETADD(.VALUES,DFN)
"RTN","HMPCRPC1",124,0)
 ;F TYPE=1,3 D GETNOK(.VALUES,DFN,TYPE)
"RTN","HMPCRPC1",125,0)
 D GETPATTM(.VALUES,DFN)
"RTN","HMPCRPC1",126,0)
 ;D GETPATVI(.VALUES,DFN)
"RTN","HMPCRPC1",127,0)
 D GETPATIP(.VALUES,DFN)
"RTN","HMPCRPC1",128,0)
 D GETMEANS(.VALUES,DFN)
"RTN","HMPCRPC1",129,0)
 D PRF^HMPFPTC(DFN,.VALUES)
"RTN","HMPCRPC1",130,0)
 S Y=$$CWAD^ORQPT2(DFN)
"RTN","HMPCRPC1",131,0)
 I Y]"" S VALUES("cwad")=Y
"RTN","HMPCRPC1",132,0)
 I $D(VALUES("patientRecordFlags")) S VALUES("cwad")=$G(VALUES("cwad"))_"F"
"RTN","HMPCRPC1",133,0)
 ;D PTINQ^ORWPT(.DEM,DFN)
"RTN","HMPCRPC1",134,0)
 ;S NUM=5,STR=""
"RTN","HMPCRPC1",135,0)
 ;F  S NUM=$O(@DEM@(NUM)) Q:NUM'>0  D
"RTN","HMPCRPC1",136,0)
 ;.S VALUES("patDemDetails","text","\",NUM)=@DEM@(NUM)_$C(13,10)
"RTN","HMPCRPC1",137,0)
 S VALUES("success")="true"
"RTN","HMPCRPC1",138,0)
GPQ D ENCODE^HMPJSON("VALUES","RESULT","HMPERR")
"RTN","HMPCRPC1",139,0)
 I $D(HMPERR) D
"RTN","HMPCRPC1",140,0)
 .K RESULT N TEMP,TXT
"RTN","HMPCRPC1",141,0)
 .S TXT(1)="Problem encoding json output."
"RTN","HMPCRPC1",142,0)
 .D SETERROR^HMPUTILS(.TEMP,.HMPERR,.TXT,.VALUES)
"RTN","HMPCRPC1",143,0)
 .K HMPERR D ENCODE^HMPJSON("TEMP","RESULT","HMPERR")
"RTN","HMPCRPC1",144,0)
 Q
"RTN","HMPCRPC1",145,0)
 ;
"RTN","HMPCRPC1",146,0)
GETPATIP(VALUES,DFN) ;
"RTN","HMPCRPC1",147,0)
 N HMPDATA
"RTN","HMPCRPC1",148,0)
 D INPLOC^ORWPT(.HMPDATA,DFN)
"RTN","HMPCRPC1",149,0)
 I +HMPDATA D
"RTN","HMPCRPC1",150,0)
 . S VALUES("shortInpatientLocation")=$P($G(^SC(+HMPDATA,0)),U,2)
"RTN","HMPCRPC1",151,0)
 . S VALUES("inpatientLocation")=$P(HMPDATA,U,2)
"RTN","HMPCRPC1",152,0)
 I $P($G(^DPT(DFN,.101)),U)'="" S VALUES("roomBed")=$P($G(^DPT(DFN,.101)),U)
"RTN","HMPCRPC1",153,0)
 Q
"RTN","HMPCRPC1",154,0)
 ;
"RTN","HMPCRPC1",155,0)
GETPATVI(VALUES,DFN) ;  DE2818 - PB - Code commented out during SQA review/modifications
"RTN","HMPCRPC1",156,0)
 ;N BMI,DAS,HT,LDATE,HMPTEMP,WT,BSA
"RTN","HMPCRPC1",157,0)
 ;;get weight
"RTN","HMPCRPC1",158,0)
 ;S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,9,""),-1)
"RTN","HMPCRPC1",159,0)
 ;I LDATE>0 D
"RTN","HMPCRPC1",160,0)
 ;.S DAS=$O(^PXRMINDX(120.5,"PI",DFN,9,LDATE,""))
"RTN","HMPCRPC1",161,0)
 ;.I DAS']"" Q
"RTN","HMPCRPC1",162,0)
 ;.D GETDATA^PXRMVITL(DAS,.HMPTEMP)
"RTN","HMPCRPC1",163,0)
 ;.S WT=HMPTEMP("VALUE")
"RTN","HMPCRPC1",164,0)
 ;.S VALUES("lastVitals","weight","value")=WT
"RTN","HMPCRPC1",165,0)
 ;.S VALUES("lastVitals","weight","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","HMPCRPC1",166,0)
 ;;get height
"RTN","HMPCRPC1",167,0)
 ;K LDATE,DAS
"RTN","HMPCRPC1",168,0)
 ;S LDATE=$O(^PXRMINDX(120.5,"PI",DFN,8,""),-1)
"RTN","HMPCRPC1",169,0)
 ;I LDATE>0 D
"RTN","HMPCRPC1",170,0)
 ;.S DAS=$O(^PXRMINDX(120.5,"PI",DFN,8,LDATE,""))
"RTN","HMPCRPC1",171,0)
 ;.I DAS']"" Q
"RTN","HMPCRPC1",172,0)
 ;.D GETDATA^PXRMVITL(DAS,.HMPTEMP)
"RTN","HMPCRPC1",173,0)
 ;.S HT=HMPTEMP("VALUE")
"RTN","HMPCRPC1",174,0)
 ;.S VALUES("lastVitals","height","value")=HT
"RTN","HMPCRPC1",175,0)
 ;.S VALUES("lastVitals","height","lastDone")=$$FMTE^XLFDT(LDATE,"D")
"RTN","HMPCRPC1",176,0)
 ;S BMI=$$GETBMI(DFN)
"RTN","HMPCRPC1",177,0)
 ;I BMI>0 S VALUES("lastVitals","bmi")=BMI
"RTN","HMPCRPC1",178,0)
 ;S BSA=$$GETBSA(DFN)
"RTN","HMPCRPC1",179,0)
 ;I BSA>0 S VALUES("lastVitals","bsa")=BSA
"RTN","HMPCRPC1",180,0)
 ;Q
"RTN","HMPCRPC1",181,0)
 ;
"RTN","HMPCRPC1",182,0)
GETPATTM(VALUES,DFN) ; -- returns treating team info
"RTN","HMPCRPC1",183,0)
 N CNT,PROV,TEAM,MH,HMPTEAM,MHTEAM
"RTN","HMPCRPC1",184,0)
 S PROV=$$OUTPTPR^SDUTL3(DFN) D NP(+PROV,"primaryProvider")
"RTN","HMPCRPC1",185,0)
 S PROV=$$OUTPTAP^SDUTL3(DFN) D NP(+PROV,"associateProvider")
"RTN","HMPCRPC1",186,0)
 S PROV=$G(^DPT(DFN,.1041)) D NP(+PROV,"attendingProvider")
"RTN","HMPCRPC1",187,0)
 S PROV=$G(^DPT(DFN,.104)) D NP(+PROV,"inpatientProvider")
"RTN","HMPCRPC1",188,0)
 ;
"RTN","HMPCRPC1",189,0)
 S TEAM=$$OUTPTTM^SDUTL3(DFN) I TEAM D
"RTN","HMPCRPC1",190,0)
 . S VALUES("teamInfo","team","uid")=$$SETUID^HMPUTILS("team",,+TEAM)
"RTN","HMPCRPC1",191,0)
 . S VALUES("teamInfo","team","name")=$P(TEAM,U,2)
"RTN","HMPCRPC1",192,0)
 . S VALUES("teamInfo","team","phone")=$P($G(^SCTM(404.51,+TEAM,0)),U,2)
"RTN","HMPCRPC1",193,0)
 I 'TEAM S VALUES("teamInfo","team","name")="unassigned"
"RTN","HMPCRPC1",194,0)
 ;
"RTN","HMPCRPC1",195,0)
 S MH=$$START^SCMCMHTC(DFN) D NP(+MH,"mhCoordinator")
"RTN","HMPCRPC1",196,0)
 S VALUES("teamInfo","mhCoordinator","mhPosition")=$S(MH:$P(MH,U,3),1:"unassigned")
"RTN","HMPCRPC1",197,0)
 S VALUES("teamInfo","mhCoordinator","mhTeam")=$S(MH:$P(MH,U,5),1:"unassigned")
"RTN","HMPCRPC1",198,0)
 ;US5234 - Add Mental Health Team Office Phone - TW
"RTN","HMPCRPC1",199,0)
 I $P($G(MH),U,5)'="" D
"RTN","HMPCRPC1",200,0)
 . S MHTEAM=$O(^SCTM(404.51,"B",$P(MH,U,5),""))
"RTN","HMPCRPC1",201,0)
 . S VALUES("teamInfo","mhCoordinator","mhTeamOfficePhone")=$$GET1^DIQ(404.51,MHTEAM_",",.02)
"RTN","HMPCRPC1",202,0)
 ;
"RTN","HMPCRPC1",203,0)
 D PCDETAIL^ORWPT1(.HMPTEAM,DFN)
"RTN","HMPCRPC1",204,0)
 S CNT=0 F  S CNT=$O(HMPTEAM(CNT)) Q:CNT'>0  D
"RTN","HMPCRPC1",205,0)
 . S VALUES("teamInfo","text","\",CNT)=HMPTEAM(CNT)_$C(13,10)
"RTN","HMPCRPC1",206,0)
 Q
"RTN","HMPCRPC1",207,0)
NP(X,TYPE) ; -- add New Person data to teamInfo array
"RTN","HMPCRPC1",208,0)
 Q:$G(TYPE)=""
"RTN","HMPCRPC1",209,0)
 I $G(X)'>0 S VALUES("teamInfo",TYPE,"name")="unassigned" Q
"RTN","HMPCRPC1",210,0)
 S VALUES("teamInfo",TYPE,"uid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPCRPC1",211,0)
 S VALUES("teamInfo",TYPE,"name")=$P($G(^VA(200,+X,0)),U)
"RTN","HMPCRPC1",212,0)
 S VALUES("teamInfo",TYPE,"analogPager")=$P($G(^VA(200,+X,.13)),U,7)
"RTN","HMPCRPC1",213,0)
 S VALUES("teamInfo",TYPE,"digitalPager")=$P($G(^VA(200,+X,.13)),U,8)
"RTN","HMPCRPC1",214,0)
 S VALUES("teamInfo",TYPE,"officePhone")=$P($G(^VA(200,+X,.13)),U,2)
"RTN","HMPCRPC1",215,0)
 Q
"RTN","HMPCRPC1",216,0)
 ;
"RTN","HMPCRPC1",217,0)
GETPOS(VALUES,USER) ;
"RTN","HMPCRPC1",218,0)
 ; this returns the list of position for an user
"RTN","HMPCRPC1",219,0)
 N CNT,NODE,NUM,ROLEIEN,ROLE,TEAM,TEAMIEN,TEAMPHN,HMPLIST,HMPERR
"RTN","HMPCRPC1",220,0)
 ;$$TPPR^SCAPMC(DUZ,SCDATES,SCPURPA,SCROLEA,"LIST",HMPERR)
"RTN","HMPCRPC1",221,0)
 S NUM=$$TPPR^SCAPMC(USER,"","","","",.HMPERR)
"RTN","HMPCRPC1",222,0)
 F CNT=1:1:NUM D
"RTN","HMPCRPC1",223,0)
 .S NODE=$G(^TMP("SC TMP LIST",$J,CNT))
"RTN","HMPCRPC1",224,0)
 .S VALUES("vistaPositions",CNT,"position")=$P(NODE,U,2)
"RTN","HMPCRPC1",225,0)
 .S VALUES("vistaPositions",CNT,"effectiveDate")=$P(NODE,U,5)
"RTN","HMPCRPC1",226,0)
 .S VALUES("vistaPositions",CNT,"inactiveDate")=$P(NODE,U,6)
"RTN","HMPCRPC1",227,0)
 .S TEAMIEN=$P(NODE,U,3)
"RTN","HMPCRPC1",228,0)
 .S TEAM=$$GET1^DIQ(404.51,(+TEAMIEN_","),.01)
"RTN","HMPCRPC1",229,0)
 .S TEAMPHN=$$GET1^DIQ(404.51,(+TEAMIEN_","),.02)
"RTN","HMPCRPC1",230,0)
 .S VALUES("vistaPositions",CNT,"teamName")=TEAM
"RTN","HMPCRPC1",231,0)
 .S VALUES("vistaPositions",CNT,"teamPhone")=TEAMPHN
"RTN","HMPCRPC1",232,0)
 .I $P(NODE,U,9)>0 D
"RTN","HMPCRPC1",233,0)
 .S VALUES("vistaPositions",CNT,"role")=$$GET1^DIQ(8930,($P(NODE,U,9)_","),.01)
"RTN","HMPCRPC1",234,0)
 Q
"RTN","HMPCRPC1",235,0)
 ;
"RTN","HMPCRPC1",236,0)
GETUSERC(VALUES,USER) ;
"RTN","HMPCRPC1",237,0)
 N ARRAY,CNT,EFFDATE,EXPDATE,ID,IND,LIST,NODE
"RTN","HMPCRPC1",238,0)
 D WHATIS^USRLM(USER,"LIST",1)
"RTN","HMPCRPC1",239,0)
 ;LIST(Uppername_indicator)=UserClassIEN^MembershipIEN^name^EffectDt^ExpireDt
"RTN","HMPCRPC1",240,0)
 S IND=0,CNT=0 F  S IND=$O(LIST(IND)) Q:IND=""  D
"RTN","HMPCRPC1",241,0)
 .S NODE=LIST(IND)
"RTN","HMPCRPC1",242,0)
 .S EFFDATE=$P(NODE,U,4),EXPDATE=$P(NODE,U,5)
"RTN","HMPCRPC1",243,0)
 .I EFFDATE>0,EFFDATE>DT Q
"RTN","HMPCRPC1",244,0)
 .I EXPDATE>0,EXPDATE<DT Q
"RTN","HMPCRPC1",245,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",246,0)
 .S ID=$P(NODE,U)
"RTN","HMPCRPC1",247,0)
 .S ARRAY(ID)=""
"RTN","HMPCRPC1",248,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P(NODE,U,3)
"RTN","HMPCRPC1",249,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",ID,"")
"RTN","HMPCRPC1",250,0)
 .S VALUES("vistaUserClass",CNT,"effectiveDate")=EFFDATE
"RTN","HMPCRPC1",251,0)
 .S VALUES("vistaUserClass",CNT,"expirationDate")=EXPDATE
"RTN","HMPCRPC1",252,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,ID,.CNT,.ARRAY)
"RTN","HMPCRPC1",253,0)
 I CNT=0 D
"RTN","HMPCRPC1",254,0)
 .S ID=$O(^USR(8930,"B","USER","")) I +ID'>0 Q
"RTN","HMPCRPC1",255,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",256,0)
 .S VALUES("vistaUserClass",CNT,"role")=$P($G(^USR(8930,ID,0)),U)
"RTN","HMPCRPC1",257,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",ID,"")
"RTN","HMPCRPC1",258,0)
 Q
"RTN","HMPCRPC1",259,0)
GETUCPAR(VALUES,ID,CNT,ARRAY) ;
"RTN","HMPCRPC1",260,0)
 N IEN,ROLE
"RTN","HMPCRPC1",261,0)
 S IEN=0 F  S IEN=$O(^USR(8930,"AD",ID,IEN)) Q:IEN'>0  D
"RTN","HMPCRPC1",262,0)
 .I $D(ARRAY(IEN)) Q
"RTN","HMPCRPC1",263,0)
 .S ARRAY(IEN)=""
"RTN","HMPCRPC1",264,0)
 .S ROLE=$P($G(^USR(8930,IEN,0)),U)
"RTN","HMPCRPC1",265,0)
 .S CNT=CNT+1
"RTN","HMPCRPC1",266,0)
 .S VALUES("vistaUserClass",CNT,"role")=ROLE
"RTN","HMPCRPC1",267,0)
 .S VALUES("vistaUserClass",CNT,"uid")=$$SETUID^HMPUTILS("asu-class","",IEN,"")
"RTN","HMPCRPC1",268,0)
 .I $D(^USR(8930,"AD",ID)) D GETUCPAR(.VALUES,IEN,.CNT,.ARRAY)
"RTN","HMPCRPC1",269,0)
 Q
"RTN","HMPCRPC1",270,0)
 ;
"RTN","HMPCRPC1",271,0)
GETUSERI(RESULT,USER) ;
"RTN","HMPCRPC1",272,0)
 N RPCOPT,VALUES,HMPERR,HMPLIST,CPRSPATH
"RTN","HMPCRPC1",273,0)
 D BUILDUID^HMPPARAM(.VALUES,"user",USER)
"RTN","HMPCRPC1",274,0)
 S VALUES("timeout")=$$GET^XPAR("USR^SYS","ORWOR TIMEOUT CHART",1,"I")
"RTN","HMPCRPC1",275,0)
 S VALUES("timeoutCounter")=$$GET^XPAR("USR^SYS^PKG","ORWOR TIMEOUT COUNTDOWN",1,"I")
"RTN","HMPCRPC1",276,0)
 S CPRSPATH=$$GET^XPAR("USR^SYS","HMP CPRS PATH",1,"I")
"RTN","HMPCRPC1",277,0)
 S VALUES("cprsPath")=$S($L($G(CPRSPATH))>0:CPRSPATH,1:"")
"RTN","HMPCRPC1",278,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLIST")
"RTN","HMPCRPC1",279,0)
 S RPCOPT=$S($D(^HMPLIST("DILIST",0)):-1,1:$P(HMPLIST("DILIST","ID",1,1),"version ",2))
"RTN","HMPCRPC1",280,0)
 ;S VALUES("signingPriv")=$S($D(^XUSEC("ORES",DUZ)):3,$D(^XUSEC("ORELSE",DUZ)):2,$D(^XUSEC("OREMAS",DUZ)):1,1:0)
"RTN","HMPCRPC1",281,0)
 S VALUES("orderingRole")=$$ORDROLE(USER)
"RTN","HMPCRPC1",282,0)
 S VALUES("hmpVersion")=RPCOPT
"RTN","HMPCRPC1",283,0)
 S VALUES("domain")=$$KSP^XUPARAM("WHERE")  ; domain
"RTN","HMPCRPC1",284,0)
 S VALUES("service")=+$G(^VA(200,USER,5))     ; service/section
"RTN","HMPCRPC1",285,0)
 D GETUSERC(.VALUES,USER)
"RTN","HMPCRPC1",286,0)
 D GETPOS(.VALUES,USER)
"RTN","HMPCRPC1",287,0)
 D GETKEYS(.VALUES,USER)
"RTN","HMPCRPC1",288,0)
 S VALUES("productionAccount")=$S($$PROD^XUPROD=1:"true",1:"false")
"RTN","HMPCRPC1",289,0)
 ;S RESULT=$$ENCODE^HMPJSON("VALUES","HMPERR")
"RTN","HMPCRPC1",290,0)
 D ENCODE^HMPJSON("VALUES","RESULT","HMPERR")
"RTN","HMPCRPC1",291,0)
 Q
"RTN","HMPCRPC1",292,0)
 ;
"RTN","HMPCRPC1",293,0)
ORDROLE(USER) ; returns the role a person takes in ordering
"RTN","HMPCRPC1",294,0)
 ; VAL: 0=nokey, 1=clerk, 2=nurse, 3=physician, 4=student, 5=bad keys
"RTN","HMPCRPC1",295,0)
 ;I '$G(ORWCLVER) Q 0  ; version of client is to old for ordering
"RTN","HMPCRPC1",296,0)
 I ($D(^XUSEC("OREMAS",USER))+$D(^XUSEC("ORELSE",USER))+$D(^XUSEC("ORES",USER)))>1 Q 5
"RTN","HMPCRPC1",297,0)
 I $D(^XUSEC("OREMAS",USER)) Q 1                           ; clerk
"RTN","HMPCRPC1",298,0)
 I $D(^XUSEC("ORELSE",USER)) Q 2                           ; nurse
"RTN","HMPCRPC1",299,0)
 I $D(^XUSEC("ORES",USER)),$D(^XUSEC("PROVIDER",USER)) Q 3  ; doctor
"RTN","HMPCRPC1",300,0)
 I $D(^XUSEC("PROVIDER",USER)) Q 4                         ; student
"RTN","HMPCRPC1",301,0)
 Q 0
"RTN","HMPCRPC1",302,0)
 ;
"RTN","HMPD")
0^1^B31068389^B29605922
"RTN","HMPD",1,0)
HMPD ;SLC/MKB,ASMR/RRB,CK - Serve VistA data as XML via RPC ;Aug 29, 2016 20:06:27
"RTN","HMPD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPD",4,0)
 ;
"RTN","HMPD",5,0)
 ; External References          DBIA#
"RTN","HMPD",6,0)
 ; -------------------          -----
"RTN","HMPD",7,0)
 ; ^DPT                         10035
"RTN","HMPD",8,0)
 ; ^SC                          10040
"RTN","HMPD",9,0)
 ; DIQ                           2056
"RTN","HMPD",10,0)
 ; MPIF001                       2701
"RTN","HMPD",11,0)
 ; VASITE                       10112
"RTN","HMPD",12,0)
 ; XLFDT                        10103
"RTN","HMPD",13,0)
 ; XLFSTR                       10104
"RTN","HMPD",14,0)
 ; XUAF4                         2171
"RTN","HMPD",15,0)
 ;
"RTN","HMPD",16,0)
 Q
"RTN","HMPD",17,0)
 ;
"RTN","HMPD",18,0)
GET(HMP,DFN,TYPE,START,STOP,MAX,ID,FILTER) ; -- Return search results as XML in @HMP@(n) 
"RTN","HMPD",19,0)
 ; RPC = HMP GET PATIENT DATA
"RTN","HMPD",20,0)
 N ICN,HMPI,HMPTOTL,HMPTEXT
"RTN","HMPD",21,0)
 S HMP=$NA(^TMP("HMP",$J)) K @HMP
"RTN","HMPD",22,0)
 S HMPTEXT=+$G(FILTER("text")) ;include report/document text?
"RTN","HMPD",23,0)
 ;
"RTN","HMPD",24,0)
 ; parse & validate input parameters
"RTN","HMPD",25,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN),ID=$G(ID)
"RTN","HMPD",26,0)
 I DFN<1,ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPD",27,0)
 S TYPE=$$LOW^XLFSTR($G(TYPE)) I TYPE="" S TYPE=$$ALL
"RTN","HMPD",28,0)
 ;next line, ICR 10035 ASF 11/2/15 DE2818, DE4496 19 August 2016
"RTN","HMPD",29,0)
 I TYPE'="new",DFN<1!'$D(^DPT(DFN)) D LOGDPT^HMPLOG(DFN),ERR(1,DFN) G GTQ
"RTN","HMPD",30,0)
 S:'$G(START) START=1410102 S:'$G(STOP) STOP=4141015 S:'$G(MAX) MAX=9999
"RTN","HMPD",31,0)
 I START,STOP,STOP<START N X S X=START,START=STOP,STOP=X  ;switch
"RTN","HMPD",32,0)
 I STOP,$L(STOP,".")<2 S STOP=STOP_".24"
"RTN","HMPD",33,0)
 I ID="",$D(FILTER("id")) S ID=FILTER("id")
"RTN","HMPD",34,0)
 ;
"RTN","HMPD",35,0)
 ; extract data
"RTN","HMPD",36,0)
 N HMPTYPE,HMPP,HMPHDR,HMPTAG,HMPTN
"RTN","HMPD",37,0)
 S HMPTYPE=TYPE D ADD("<results version='1.1' timeZone='"_$$TZ^XLFDT_"' >")
"RTN","HMPD",38,0)
 F HMPP=1:1:$L(HMPTYPE,";") S HMPTAG=$P(HMPTYPE,";",HMPP) I $L(HMPTAG) D
"RTN","HMPD",39,0)
 . S HMPTN="EN^"_$$RTN(.HMPTAG) Q:'$L($T(@HMPTN))  ;D ERR(2) Q
"RTN","HMPD",40,0)
 . D ADD("<"_HMPTAG) S HMPHDR=HMPI,HMPTOTL=0
"RTN","HMPD",41,0)
 . D @(HMPTN_"(DFN,START,STOP,MAX,ID)")
"RTN","HMPD",42,0)
 . S @HMP@(HMPHDR)=@HMP@(HMPHDR)_" total='"_+$G(HMPTOTL)_"' >" D ADD("</"_HMPTAG_">")
"RTN","HMPD",43,0)
 D ADD("</results>")
"RTN","HMPD",44,0)
 ;
"RTN","HMPD",45,0)
GTQ ; end
"RTN","HMPD",46,0)
 Q
"RTN","HMPD",47,0)
 ;
"RTN","HMPD",48,0)
RTN(X) ; -- Return name of HMPDxxxx routine for clinical domain X
"RTN","HMPD",49,0)
 ;  X is also enforced as expected group tag name, if passed by ref
"RTN","HMPD",50,0)
 N Y S Y="HMPD",X=$G(X) I X="" Q Y
"RTN","HMPD",51,0)
 I X["accession"    S Y="HMPDLRA",X="accessions"
"RTN","HMPD",52,0)
 I X["allerg"       S Y="HMPDGMRA",X="reactions"
"RTN","HMPD",53,0)
 I X["appointment"  S Y="HMPDSDAM",X="appointments"
"RTN","HMPD",54,0)
 I X["clinicalProc" S Y="HMPDMC",X="clinicalProcedures"
"RTN","HMPD",55,0)
 I X["consult"      S Y="HMPDGMRC",X="consults"
"RTN","HMPD",56,0)
 I X["demograph"    S Y="HMPDPT",X="demographics"
"RTN","HMPD",57,0)
 I X["document"     S Y="HMPDTIU",X="documents"
"RTN","HMPD",58,0)
 I X["factor"       S Y="HMPDPXHF",X="healthFactors"
"RTN","HMPD",59,0)
 I X["flag"         S Y="HMPDGPF",X="flags"
"RTN","HMPD",60,0)
 I X["immunization" S Y="HMPDPXIM",X="immunizations"
"RTN","HMPD",61,0)
 I X["skin"         S Y="HMPDPXSK",X="skinTests"
"RTN","HMPD",62,0)
 I X?1"exam".E      S Y="HMPDPXAM",X="exams"
"RTN","HMPD",63,0)
 I X["educat"       S Y="HMPDPXED",X="educationTopics"
"RTN","HMPD",64,0)
 I X["insur"        S Y="HMPDIB",X="insurancePolicies"
"RTN","HMPD",65,0)
 I X["polic"        S Y="HMPDIB",X="insurancePolicies"
"RTN","HMPD",66,0)
 I X["lab"          S Y="HMPDLR",X="labs"
"RTN","HMPD",67,0)
 I X["panel"        S Y="HMPDLRO",X="panels"
"RTN","HMPD",68,0)
 I X["med"          S Y="HMPDPS",X="meds"
"RTN","HMPD",69,0)
 I X["pharm"        S Y="HMPDPSOR",X="meds"
"RTN","HMPD",70,0)
 I X["observ"       S Y="HMPDMDC",X="observations"
"RTN","HMPD",71,0)
 I X["order"        S Y="HMPDOR",X="orders"
"RTN","HMPD",72,0)
 I X["patient"      S Y="HMPDPT",X="demographics"
"RTN","HMPD",73,0)
 I X["problem"      S Y="HMPDGMPL",X="problems"
"RTN","HMPD",74,0)
 I X["procedure"    S Y="HMPDPROC",X="procedures"
"RTN","HMPD",75,0)
 I X["reaction"     S Y="HMPDGMRA",X="reactions"
"RTN","HMPD",76,0)
 I X["surg"         S Y="HMPDSR",X="surgeries"
"RTN","HMPD",77,0)
 I X["visit"        S Y="HMPDVSIT",X="visits"
"RTN","HMPD",78,0)
 I X["vital"        S Y="HMPDGMV",X="vitals"
"RTN","HMPD",79,0)
 I X["rad"          S Y="HMPDRA",X="radiologyExams"
"RTN","HMPD",80,0)
 I X["xray"         S Y="HMPDRA",X="radiologyExams"
"RTN","HMPD",81,0)
 I X["new"          S Y="HMPDX",X="patients"
"RTN","HMPD",82,0)
 Q Y
"RTN","HMPD",83,0)
 ;
"RTN","HMPD",84,0)
TAG(X) ; -- return plural name for group tags
"RTN","HMPD",85,0)
 N Y S:X'?1.L X=$$LOW^XLFSTR(X)
"RTN","HMPD",86,0)
 I $E(X,$L(X))="s" S Y=X
"RTN","HMPD",87,0)
 I $E(X,$L(X))="y" S Y=$E(X,1,$L(X)-1)_"ies"
"RTN","HMPD",88,0)
 E  S Y=X_"s"
"RTN","HMPD",89,0)
 Q Y
"RTN","HMPD",90,0)
 ;
"RTN","HMPD",91,0)
ALL() ; -- return string for all types of data
"RTN","HMPD",92,0)
 Q "demographics;reactions;problems;vitals;labs;meds;immunizations;observation;visits;appointments;documents;procedures;consults;flags;factors;skinTests;exams;education;insurance"
"RTN","HMPD",93,0)
 ;
"RTN","HMPD",94,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPD",95,0)
 N MSG  S MSG="Error"
"RTN","HMPD",96,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPD",97,0)
 I X=2  S MSG="Requested domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPD",98,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPD",99,0)
 ;
"RTN","HMPD",100,0)
 D ADD("<error>")
"RTN","HMPD",101,0)
 D ADD("<message>"_MSG_"</message>")
"RTN","HMPD",102,0)
 D ADD("</error>")
"RTN","HMPD",103,0)
 Q
"RTN","HMPD",104,0)
 ;
"RTN","HMPD",105,0)
ESC(X) ; -- escape outgoing XML
"RTN","HMPD",106,0)
 ; Q $ZCONVERT(X,"O","HTML")  ; uncomment for fastest performance on Cache
"RTN","HMPD",107,0)
 ;
"RTN","HMPD",108,0)
 N I,Y,QOT S QOT=""""
"RTN","HMPD",109,0)
 S Y=$P(X,"&") F I=2:1:$L(X,"&") S Y=Y_"&amp;"_$P(X,"&",I)
"RTN","HMPD",110,0)
 S X=Y,Y=$P(X,"<") F I=2:1:$L(X,"<") S Y=Y_"&lt;"_$P(X,"<",I)
"RTN","HMPD",111,0)
 S X=Y,Y=$P(X,">") F I=2:1:$L(X,">") S Y=Y_"&gt;"_$P(X,">",I)
"RTN","HMPD",112,0)
 S X=Y,Y=$P(X,"'") F I=2:1:$L(X,"'") S Y=Y_"&apos;"_$P(X,"'",I)
"RTN","HMPD",113,0)
 S X=Y,Y=$P(X,QOT) F I=2:1:$L(X,QOT) S Y=Y_"&quot;"_$P(X,QOT,I)
"RTN","HMPD",114,0)
 Q Y
"RTN","HMPD",115,0)
 ;
"RTN","HMPD",116,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPD",117,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPD",118,0)
 S @HMP@(HMPI)=X
"RTN","HMPD",119,0)
 Q
"RTN","HMPD",120,0)
 ;
"RTN","HMPD",121,0)
STRING(ARY) ; -- Return text in ARY(n) or ARY(n,0) as a string, ARY passed by ref.
"RTN","HMPD",122,0)
 ;DE3409 8/11/2106 CK - to prevent a MAXSTRING error, allow 30,000 characters
"RTN","HMPD",123,0)
 N I,MXSTRNG,X,Y
"RTN","HMPD",124,0)
 S MXSTRNG=30000
"RTN","HMPD",125,0)
 S I=+$O(ARY("")) I I=0 S I=+$O(ARY(0))
"RTN","HMPD",126,0)
 S Y=$S($D(ARY(I,0)):ARY(I,0),1:$G(ARY(I)))
"RTN","HMPD",127,0)
 F  S I=$O(ARY(I)) Q:I<1  D
"RTN","HMPD",128,0)
 . S X=$S($D(ARY(I,0)):ARY(I,0),1:ARY(I))
"RTN","HMPD",129,0)
 . I ($L(Y)+$L(X))>MXSTRNG S Y=Y_$E(X,1,(MXSTRNG-$L(Y))) Q
"RTN","HMPD",130,0)
 . I $E(X)=" " S Y=Y_$C(13,10)_X Q
"RTN","HMPD",131,0)
 . ; add a space to separate each line of text
"RTN","HMPD",132,0)
 . S Y=Y_$S($E(Y,$L(Y))=" ":"",1:" ")_X
"RTN","HMPD",133,0)
 Q Y
"RTN","HMPD",134,0)
 ; 
"RTN","HMPD",135,0)
FAC(X) ; -- return Institution file station# for location X
"RTN","HMPD",136,0)
 N HLOC,FAC,Y0,Y S Y=""
"RTN","HMPD",137,0)
 S HLOC=$G(^SC(+$G(X),0)),FAC=$P(HLOC,U,4) ;ICR 10040 DE2818 ASF 11/5/15
"RTN","HMPD",138,0)
 ; Get P:4 via Med Ctr Div, if not directly linked
"RTN","HMPD",139,0)
 I 'FAC,$P(HLOC,U,15) S FAC=$$GET1^DIQ(44,+$G(X)_",","3.5:.07","I")
"RTN","HMPD",140,0)
 S Y0=$S(FAC:$$NS^XUAF4(FAC),1:$P($$SITE^VASITE,U,2,3)) ;name^stn#
"RTN","HMPD",141,0)
 S:$L(Y0) Y=$P(Y0,U,2)_U_$P(Y0,U) ;switch to stn#^name
"RTN","HMPD",142,0)
 I $L(Y),'Y S $P(Y,U)=FAC
"RTN","HMPD",143,0)
 Q Y
"RTN","HMPD",144,0)
 ;
"RTN","HMPD",145,0)
VUID(IEN,FILE) ; -- Return VUID for item
"RTN","HMPD",146,0)
 Q $$GET1^DIQ(FILE,IEN_",",99.99)
"RTN","HMPD",147,0)
 ;
"RTN","HMPD",148,0)
VERSION(RET) ; -- Return current version of data extracts
"RTN","HMPD",149,0)
 S RET="1.01"
"RTN","HMPD",150,0)
 Q
"RTN","HMPDCRC")
0^37^B47259185^B46900881
"RTN","HMPDCRC",1,0)
HMPDCRC ;SLC/MKB,AGP,ASMR/RRB,BL - Compute CRC32 for VistA data;Aug 29, 2016 20:06:27
"RTN","HMPDCRC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,3**;May 15, 2016;Build 15
"RTN","HMPDCRC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDCRC",4,0)
 ;
"RTN","HMPDCRC",5,0)
 ; External References          DBIA#
"RTN","HMPDCRC",6,0)
 ; -------------------          -----
"RTN","HMPDCRC",7,0)
 ; ^DPT                         10035
"RTN","HMPDCRC",8,0)
 ; %ZTLOAD                      10063
"RTN","HMPDCRC",9,0)
 ; MPIF001                       2701
"RTN","HMPDCRC",10,0)
 ; XLFCRC                        3156
"RTN","HMPDCRC",11,0)
 ; XLFDT                        10103
"RTN","HMPDCRC",12,0)
 Q
"RTN","HMPDCRC",13,0)
 ;
"RTN","HMPDCRC",14,0)
CHECK(HMPCRC,FILTER) ; -- Return CRC32 checksums of VistA data
"RTN","HMPDCRC",15,0)
 ; RPC = HMP GET CHECKSUM
"RTN","HMPDCRC",16,0)
 ; where FILTER("system")    = name of calling/client system
"RTN","HMPDCRC",17,0)
 ;       FILTER("patientId") = DFN or DFN;ICN
"RTN","HMPDCRC",18,0)
 ;       FILTER("domain")    = name of desired data type (see HMPDJ0)
"RTN","HMPDCRC",19,0)
 ;       FILTER("uid")       = single item id to return  [opt]
"RTN","HMPDCRC",20,0)
 ;       FILTER("start")     = start date.time of search [opt]
"RTN","HMPDCRC",21,0)
 ;       FILTER("stop")      = stop date.time of search  [opt]
"RTN","HMPDCRC",22,0)
 ;       FILTER("queued")    = true or false
"RTN","HMPDCRC",23,0)
 ;
"RTN","HMPDCRC",24,0)
 ; HMPCRC returns the name of the ^TMP array containing the results
"RTN","HMPDCRC",25,0)
 ;
"RTN","HMPDCRC",26,0)
 N DFN,NODE,QUEUED,SYS,HMPSYS
"RTN","HMPDCRC",27,0)
 K ^TMP("HMPDCRC",$J),HMPCRC
"RTN","HMPDCRC",28,0)
 S SYS=$G(FILTER("system")) I SYS="" Q
"RTN","HMPDCRC",29,0)
 S DFN=$G(FILTER("patientId")) I DFN="" Q
"RTN","HMPDCRC",30,0)
 S QUEUED=$G(FILTER("queued"))
"RTN","HMPDCRC",31,0)
 S NODE="HMPDCRC "_SYS_"-"_"-"_DFN
"RTN","HMPDCRC",32,0)
 S FILTER("node")=NODE
"RTN","HMPDCRC",33,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDCRC",34,0)
 ;
"RTN","HMPDCRC",35,0)
 ; - if not queued, generate checksums and exit w/values in ^TMP
"RTN","HMPDCRC",36,0)
 I QUEUED'="true" D  Q
"RTN","HMPDCRC",37,0)
 . S ^XTMP(NODE,0)=$$FMADD^XLFDT(DT,1)_U_DT_U_"Checksum for Server "_SYS_" patient "_DFN
"RTN","HMPDCRC",38,0)
 . D EN(.FILTER)
"RTN","HMPDCRC",39,0)
 . M ^TMP("HMPDCRC",$J)=^XTMP(NODE,"data")
"RTN","HMPDCRC",40,0)
 . S HMPCRC=$NA(^TMP("HMPDCRC",$J))
"RTN","HMPDCRC",41,0)
 . K ^XTMP(NODE)
"RTN","HMPDCRC",42,0)
 ;
"RTN","HMPDCRC",43,0)
 ; - Queue job if not started, else return data if done
"RTN","HMPDCRC",44,0)
 I +$G(^XTMP(NODE,"start"))=0 D QUEUED(.FILTER,NODE,SYS,DFN) Q
"RTN","HMPDCRC",45,0)
 I +$G(^XTMP(NODE,"stop"))>0 D  K ^XTMP(NODE)
"RTN","HMPDCRC",46,0)
 . I $G(^XTMP(NODE,"error"))'=""  S HMPCRC=^XTMP(NODE,"error") Q
"RTN","HMPDCRC",47,0)
 . S HMPCRC=$NA(^TMP("HMPDCRC",$J))
"RTN","HMPDCRC",48,0)
 . M ^TMP("HMPDCRC",$J)=^XTMP(NODE,"data")
"RTN","HMPDCRC",49,0)
 Q
"RTN","HMPDCRC",50,0)
 ;
"RTN","HMPDCRC",51,0)
QUEUED(FILTER,NODE,SYS,DFN) ; -- start job to generate checksums
"RTN","HMPDCRC",52,0)
 N ZTDESC,ZTIO,ZTRTN,ZTSAVE,ZTDTH,ZTSK
"RTN","HMPDCRC",53,0)
 S ^XTMP(NODE,0)=$$FMADD^XLFDT(DT,1)_U_DT_U_"Checksum for Server "_SYS_" patient "_DFN
"RTN","HMPDCRC",54,0)
 S ZTRTN="EN1^HMPDCRC",ZTDESC="Patient Checksum Extract for "_DFN
"RTN","HMPDCRC",55,0)
 S ZTDTH=$$NOW^XLFDT(),ZTIO="",ZTSAVE("FILTER(")=""
"RTN","HMPDCRC",56,0)
 S ^XTMP(NODE,"start")=$$NOW^XLFDT()
"RTN","HMPDCRC",57,0)
 D ^%ZTLOAD I +$G(ZTSK)>0  S ^XTMP(NODE,"task")=+$G(ZTSK) Q    ;success
"RTN","HMPDCRC",58,0)
 S ^XTMP(NODE,"error")="Cannot start a task job"
"RTN","HMPDCRC",59,0)
 S ^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",60,0)
 S ^XTMP(NODE,"task")=ZTSK
"RTN","HMPDCRC",61,0)
 Q
"RTN","HMPDCRC",62,0)
 ;
"RTN","HMPDCRC",63,0)
EN(FILTER) ; -- Return CRC values of requested data in ^XTMP(node,"data") as JSON
"RTN","HMPDCRC",64,0)
EN1 ;           [entry point for queued job]
"RTN","HMPDCRC",65,0)
 ;
"RTN","HMPDCRC",66,0)
 N ICN,DFN,NODE,UID,HMPP,TYPE,HMPTN,CRC
"RTN","HMPDCRC",67,0)
 N HMPCRC,HMPSTART,HMPSTOP,HMPMAX,HMPI,HMPID,HMPTYPE ;for HMPDJ0
"RTN","HMPDCRC",68,0)
 K ^TMP("HMPCRC",$J),^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",69,0)
 ;
"RTN","HMPDCRC",70,0)
 ; parse & validate input parameters
"RTN","HMPDCRC",71,0)
 S DFN=$G(FILTER("patientId")),HMPCRC=""
"RTN","HMPDCRC",72,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDCRC",73,0)
 ;DE4496 on next 2 lines, 19 August 2016
"RTN","HMPDCRC",74,0)
 I '(DFN>0),ICN S DFN=+$$GETDFN^MPIF001(ICN)
"RTN","HMPDCRC",75,0)
 I '(DFN>0)!'$D(^DPT(DFN)) D LOGDPT^HMPLOG(DFN) Q  ;ICR 10035 DE 2818 ASF 11/2/15
"RTN","HMPDCRC",76,0)
 S NODE=$G(FILTER("node")) I NODE="" S NODE="HMPDCRC"
"RTN","HMPDCRC",77,0)
 ;
"RTN","HMPDCRC",78,0)
 S HMPMAX=9999,HMPI=0  ;for HMPDJ0
"RTN","HMPDCRC",79,0)
 S HMPSTART=+$G(FILTER("start"),1410102)
"RTN","HMPDCRC",80,0)
 S HMPSTOP=+$G(FILTER("stop"),4141015)
"RTN","HMPDCRC",81,0)
 S UID=$G(FILTER("uid")),HMPTYPE=$G(FILTER("domain"))
"RTN","HMPDCRC",82,0)
 I $L(UID) S HMPTYPE=$P(UID,":",3),HMPID=$P(UID,":",6)
"RTN","HMPDCRC",83,0)
 E  S:HMPTYPE="" HMPTYPE=$$ALL
"RTN","HMPDCRC",84,0)
 ;
"RTN","HMPDCRC",85,0)
 F HMPP=1:1:$L(HMPTYPE,";") S TYPE=$P(HMPTYPE,";",HMPP) I $L(TYPE) D
"RTN","HMPDCRC",86,0)
 . S HMPTN=$$TAG^HMPDJ(TYPE)_"^HMPDJ0" Q:'$L($T(@HMPTN))
"RTN","HMPDCRC",87,0)
 . D @HMPTN
"RTN","HMPDCRC",88,0)
 ;
"RTN","HMPDCRC",89,0)
 I $L(UID) D  G ENQ ;single item
"RTN","HMPDCRC",90,0)
 . S CRC=$G(^TMP("HMPCRC",$J,HMPTYPE,UID))
"RTN","HMPDCRC",91,0)
 . S ^XTMP(NODE,"data",1)=CRC,^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",92,0)
 ; generate checksum for each domain requested
"RTN","HMPDCRC",93,0)
 S TYPE="" F  S TYPE=$O(^TMP("HMPCRC",$J,TYPE)) Q:TYPE=""  D
"RTN","HMPDCRC",94,0)
 . S CRC="" D GET($NA(^TMP("HMPCRC",$J,TYPE)),.CRC)
"RTN","HMPDCRC",95,0)
 . S ^TMP("HMPCRC",$J,TYPE)=CRC
"RTN","HMPDCRC",96,0)
 I $L(HMPTYPE,";")>1 D  ;get whole-chart checksum
"RTN","HMPDCRC",97,0)
 . S CRC="" D GET($NA(^TMP("HMPCRC",$J)),.CRC)
"RTN","HMPDCRC",98,0)
 . S ^TMP("HMPCRC",$J,"patient")=CRC
"RTN","HMPDCRC",99,0)
 ;
"RTN","HMPDCRC",100,0)
ENCODE ; -- return list(s) of checksums as JSON
"RTN","HMPDCRC",101,0)
 D PREP
"RTN","HMPDCRC",102,0)
 D ENCODE^HMPJSON($NA(^TMP("HMPCRCF",$J)),$NA(^XTMP(NODE,"data")),"ERROR")
"RTN","HMPDCRC",103,0)
 S ^XTMP(NODE,"stop")=$$NOW^XLFDT()
"RTN","HMPDCRC",104,0)
 ;
"RTN","HMPDCRC",105,0)
ENQ K ^TMP("HMPCRC",$J),^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",106,0)
 Q
"RTN","HMPDCRC",107,0)
 ;
"RTN","HMPDCRC",108,0)
PREP ; -- reformat ^TMP("HMPCRC",$J) for JSON utility -> ^TMP("HMPCRCF",$J)
"RTN","HMPDCRC",109,0)
 N DCNT,DOMAIN,UID,UCNT
"RTN","HMPDCRC",110,0)
 S DOMAIN="",DCNT=0
"RTN","HMPDCRC",111,0)
 F  S DOMAIN=$O(^TMP("HMPCRC",$J,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPDCRC",112,0)
 . S ^TMP("HMPCRCF",$J,DOMAIN,"crc")=^TMP("HMPCRC",$J,DOMAIN)
"RTN","HMPDCRC",113,0)
 . S UCNT=0,UID="" F  S UID=$O(^TMP("HMPCRC",$J,DOMAIN,UID)) Q:UID=""  D
"RTN","HMPDCRC",114,0)
 .. S UCNT=UCNT+1,^TMP("HMPCRCF",$J,DOMAIN,"uids",UCNT,UID)=^TMP("HMPCRC",$J,DOMAIN,UID)
"RTN","HMPDCRC",115,0)
 Q
"RTN","HMPDCRC",116,0)
 ;
"RTN","HMPDCRC",117,0)
GET(LIST,CRC) ; -- compute CRC32 value for LIST of strings
"RTN","HMPDCRC",118,0)
 N I S CRC=$G(CRC),I=""
"RTN","HMPDCRC",119,0)
 F  S I=$O(@LIST@(I)) Q:I=""  I $G(@LIST@(I))'="" S CRC=$$CRC32^XLFCRC(I_":"_@LIST@(I),CRC)
"RTN","HMPDCRC",120,0)
 Q
"RTN","HMPDCRC",121,0)
 ;
"RTN","HMPDCRC",122,0)
ONE(ARRAY,COLL) ; -- process one data item [save result in ^TMP]
"RTN","HMPDCRC",123,0)
 N LIST,UID,ATTR,CRC
"RTN","HMPDCRC",124,0)
 S LIST=$$ATTR(COLL),UID=$G(@ARRAY@("uid")) Q:UID=""
"RTN","HMPDCRC",125,0)
 S ATTR="" F  S ATTR=$O(@ARRAY@(ATTR)) Q:ATTR=""  I LIST'[(U_ATTR_U) K @ARRAY@(ATTR)
"RTN","HMPDCRC",126,0)
 D GET(ARRAY,.CRC)
"RTN","HMPDCRC",127,0)
 S ^TMP("HMPCRC",$J,COLL,UID)=CRC
"RTN","HMPDCRC",128,0)
 S HMPI=HMPI+1
"RTN","HMPDCRC",129,0)
 Q
"RTN","HMPDCRC",130,0)
 ;
"RTN","HMPDCRC",131,0)
GET1(ARRAY,COLL) ; -- process one data item [return result]
"RTN","HMPDCRC",132,0)
 N LIST,ATTR,ITEM,CRC
"RTN","HMPDCRC",133,0)
 S LIST=$$ATTR(COLL)
"RTN","HMPDCRC",134,0)
 S ATTR="" F  S ATTR=$O(@ARRAY@(ATTR)) Q:ATTR=""  I LIST[(U_ATTR_U) S ITEM(ATTR)=@ARRAY@(ATTR)
"RTN","HMPDCRC",135,0)
 D GET(ITEM,.CRC)
"RTN","HMPDCRC",136,0)
 Q CRC
"RTN","HMPDCRC",137,0)
 ;
"RTN","HMPDCRC",138,0)
ALL() ; -- return string for all types of data
"RTN","HMPDCRC",139,0)
 Q "problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","HMPDCRC",140,0)
 ;
"RTN","HMPDCRC",141,0)
ATTR(X) ; -- return list of attributes needed for collection X
"RTN","HMPDCRC",142,0)
 N Y S Y=""
"RTN","HMPDCRC",143,0)
 I X="vital"        S Y="^observed^typeName^result^"
"RTN","HMPDCRC",144,0)
 I X="problem"      S Y="^onset^problemText^statusName^"
"RTN","HMPDCRC",145,0)
 I X="allergy"      S Y="^entered^summary^"
"RTN","HMPDCRC",146,0)
 I X="order"        S Y="^start^name^statusName^"
"RTN","HMPDCRC",147,0)
 I X="treatment"    S Y="^start^name^statusName^"
"RTN","HMPDCRC",148,0)
 I X="med"          S Y="^overallstart^name^vaStatus^"
"RTN","HMPDCRC",149,0)
 I X="consult"      S Y="^startDate^typeName^statusName^"
"RTN","HMPDCRC",150,0)
 I X="procedure"    S Y="^dateTime^name^statusName^"
"RTN","HMPDCRC",151,0)
 I X="obs"          S Y="^observed^typeName^result^"
"RTN","HMPDCRC",152,0)
 I X="lab"          S Y="^observed^typeName^"
"RTN","HMPDCRC",153,0)
 I X="image"        S Y="^dateTime^name^statusName^"
"RTN","HMPDCRC",154,0)
 I X="surgery"      S Y="^dateTime^typeName^statusName^"
"RTN","HMPDCRC",155,0)
 I X="document"     S Y="^referenceDateTime^localTitle^statusName^"
"RTN","HMPDCRC",156,0)
 I X="mh"           S Y="^administeredDateTime^name^"
"RTN","HMPDCRC",157,0)
 I X="immunization" S Y="^administeredDateTime^name^"
"RTN","HMPDCRC",158,0)
 I X="pov"          S Y="^entered^name^"
"RTN","HMPDCRC",159,0)
 I X="skin"         S Y="^entered^name^result^"
"RTN","HMPDCRC",160,0)
 I X="exam"         S Y="^entered^name^result^"
"RTN","HMPDCRC",161,0)
 I X="cpt"          S Y="^entered^name^"
"RTN","HMPDCRC",162,0)
 I X="education"    S Y="^entered^name^result^"
"RTN","HMPDCRC",163,0)
 I X="factor"       S Y="^entered^name^"
"RTN","HMPDCRC",164,0)
 I X="appointment"  S Y="^dateTime^typeName^appointmentStatus^"
"RTN","HMPDCRC",165,0)
 I X="visit"        S Y="^dateTime^typeName^"
"RTN","HMPDCRC",166,0)
 I X="ptf"          S Y="^arrivalDateTime^icdCode^"
"RTN","HMPDCRC",167,0)
 Q Y
"RTN","HMPDCRC",168,0)
 ;
"RTN","HMPDCRC",169,0)
 ;
"RTN","HMPDCRC",170,0)
TEST(FILTER) ;
"RTN","HMPDCRC",171,0)
 N DONE,OUT
"RTN","HMPDCRC",172,0)
 S DONE=0
"RTN","HMPDCRC",173,0)
 F  D  Q:DONE=1
"RTN","HMPDCRC",174,0)
 .D CHECK(.OUT,.FILTER)
"RTN","HMPDCRC",175,0)
 .H 1 W !,$D(OUT)
"RTN","HMPDCRC",176,0)
 .I $D(OUT)>0 S DONE=1
"RTN","HMPDCRC",177,0)
 Q
"RTN","HMPDGMPL")
0^38^B28421072^B28172327
"RTN","HMPDGMPL",1,0)
HMPDGMPL ;SLC/MKB,ASMR/RRB,BL - Problem extract;Aug 29, 2016 20:06:27
"RTN","HMPDGMPL",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDGMPL",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMPL",4,0)
 ;
"RTN","HMPDGMPL",5,0)
 ; External References          DBIA#
"RTN","HMPDGMPL",6,0)
 ; -------------------          -----
"RTN","HMPDGMPL",7,0)
 ; ^AUPNPROB                     5703
"RTN","HMPDGMPL",8,0)
 ; ^DPT                         10035
"RTN","HMPDGMPL",9,0)
 ; ^VA(200                      10060
"RTN","HMPDGMPL",10,0)
 ; ^WV(790.05                    5772
"RTN","HMPDGMPL",11,0)
 ; %DT                          10003
"RTN","HMPDGMPL",12,0)
 ; DIQ                           2056
"RTN","HMPDGMPL",13,0)
 ; GMPLUTL2                      2741
"RTN","HMPDGMPL",14,0)
 ; SDUTL3                        1252
"RTN","HMPDGMPL",15,0)
 ; XLFDT                        10103
"RTN","HMPDGMPL",16,0)
 ; XUAF4                         2171
"RTN","HMPDGMPL",17,0)
 Q
"RTN","HMPDGMPL",18,0)
 ; ------------ Get problems from VistA ------------
"RTN","HMPDGMPL",19,0)
 ;
"RTN","HMPDGMPL",20,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's problems
"RTN","HMPDGMPL",21,0)
 N HMPSTS,HMPPROB,HMPN,HMPITM,HMPCNT,X
"RTN","HMPDGMPL",22,0)
 ;
"RTN","HMPDGMPL",23,0)
 ; get one problem
"RTN","HMPDGMPL",24,0)
 I $G(IFN)="WV" D WV(.HMPITM,1),XML(.HMPITM):$D(HMPITM) Q
"RTN","HMPDGMPL",25,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMPL",26,0)
 ;
"RTN","HMPDGMPL",27,0)
 ; get all patient problems
"RTN","HMPDGMPL",28,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496, 19 August 2016
"RTN","HMPDGMPL",29,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),HMPCNT=0
"RTN","HMPDGMPL",30,0)
 S HMPSTS=$G(FILTER("status")) ;default = all problems
"RTN","HMPDGMPL",31,0)
 D LIST^GMPLUTL2(.HMPPROB,DFN,HMPSTS)
"RTN","HMPDGMPL",32,0)
 S HMPN=0 F  S HMPN=$O(HMPPROB(HMPN)) Q:(HMPN<1)!(HMPCNT'<MAX)  D
"RTN","HMPDGMPL",33,0)
 . S X=$P(HMPPROB(HMPN),U,5) I X,(X<BEG)!(X>END) Q  ;onset
"RTN","HMPDGMPL",34,0)
 . S X=+HMPPROB(HMPN) K HMPITM ;ien
"RTN","HMPDGMPL",35,0)
 . D EN1(X,.HMPITM),XML(.HMPITM)
"RTN","HMPDGMPL",36,0)
 . S HMPCNT=HMPCNT+1
"RTN","HMPDGMPL",37,0)
 I $P($G(^DPT(DFN,0)),U,2)="F" D WV(.HMPITM),XML(.HMPITM):$D(HMPITM) ;ICR 10035 DE2818 ASF 11/2/15
"RTN","HMPDGMPL",38,0)
 Q
"RTN","HMPDGMPL",39,0)
 ;
"RTN","HMPDGMPL",40,0)
EN1(ID,PROB) ; -- return a problem in PROB("attribute")=value
"RTN","HMPDGMPL",41,0)
 N HMPL,X,I,J K PROB
"RTN","HMPDGMPL",42,0)
 S ID=+$G(ID) Q:ID<1  ;invalid ien
"RTN","HMPDGMPL",43,0)
 D DETAIL^GMPLUTL2(ID,.HMPL) Q:'$D(HMPL)  ;doesn't exist
"RTN","HMPDGMPL",44,0)
 S PROB("id")=ID ;,PROB("lexiconID")=+X1 ;SNOMED?
"RTN","HMPDGMPL",45,0)
 S PROB("name")=$G(HMPL("NARRATIVE"))
"RTN","HMPDGMPL",46,0)
 S X=$G(HMPL("MODIFIED")) S:$L(X) PROB("updated")=$$DATE(X)
"RTN","HMPDGMPL",47,0)
 S PROB("icd")=$G(HMPL("DIAGNOSIS"))
"RTN","HMPDGMPL",48,0)
 S X=$G(HMPL("STATUS")) S:$L(X) PROB("status")=$E(X)_U_X
"RTN","HMPDGMPL",49,0)
 S X=$G(HMPL("HISTORY"))  S:$L(X) PROB("history")=$E(X)_U_X
"RTN","HMPDGMPL",50,0)
 S X=$G(HMPL("PRIORITY")) S:$L(X) PROB("acuity")=$E(X)_U_X
"RTN","HMPDGMPL",51,0)
 S X=$G(HMPL("ONSET")) S:$L(X) PROB("onset")=$$DATE(X)
"RTN","HMPDGMPL",52,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=X
"RTN","HMPDGMPL",53,0)
 S X=$P($G(HMPL("ENTERED")),U)  S:$L(X) PROB("entered")=$$DATE(X)
"RTN","HMPDGMPL",54,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","HMPDGMPL",55,0)
 S:X="P" PROB("unverified")=0,PROB("removed")=0
"RTN","HMPDGMPL",56,0)
 S:X="T" PROB("unverified")=1,PROB("removed")=0
"RTN","HMPDGMPL",57,0)
 S:X="H" PROB("unverified")=0,PROB("removed")=1
"RTN","HMPDGMPL",58,0)
 S X=$G(HMPL("SC")),X=$S(X="YES":1,X="NO":0,1:"")
"RTN","HMPDGMPL",59,0)
 S:$L(X) PROB("sc")=X I $G(HMPL("EXPOSURE")) D   ;ao^rad^pgulf^hnc^mst^cv
"RTN","HMPDGMPL",60,0)
 . S I=0 F  S I=$O(HMPL("EXPOSURE",I)) Q:I<1  D
"RTN","HMPDGMPL",61,0)
 .. S X=$G(HMPL("EXPOSURE",I))
"RTN","HMPDGMPL",62,0)
 .. S PROB("exposure",I)=$$EXP(X)
"RTN","HMPDGMPL",63,0)
 S X=$G(HMPL("PROVIDER")) S:$L(X) PROB("provider")=$$GET1^DIQ(9000011,ID_",",1.05,"I")_U_X
"RTN","HMPDGMPL",64,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","HMPDGMPL",65,0)
 S X=$G(HMPL("CLINIC")) S:$L(X) PROB("location")=X
"RTN","HMPDGMPL",66,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","HMPDGMPL",67,0)
 S:X PROB("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDGMPL",68,0)
 I 'X S PROB("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMPL",69,0)
CMT ; comments
"RTN","HMPDGMPL",70,0)
 Q:'$G(HMPL("COMMENT"))
"RTN","HMPDGMPL",71,0)
 S I=0 F  S I=$O(HMPL("COMMENT",I)) Q:I<1  D
"RTN","HMPDGMPL",72,0)
 . S X=$G(HMPL("COMMENT",I))
"RTN","HMPDGMPL",73,0)
 . S PROB("comment",I)=$$DATE($P(X,U))_U_$P(X,U,2,3)
"RTN","HMPDGMPL",74,0)
 . ; = date ^ name of author ^ text
"RTN","HMPDGMPL",75,0)
 Q
"RTN","HMPDGMPL",76,0)
 ;
"RTN","HMPDGMPL",77,0)
WV(PROB,UPD) ; -- return a pregnancy log entry in PROB("attribute")=value
"RTN","HMPDGMPL",78,0)
 N I,X0,Y K PROB
"RTN","HMPDGMPL",79,0)
 S I=$O(^WV(790.05,"C",DFN,""),-1) Q:'I    ;last entry ICR 5772 DE2818 ASF 11/23/15
"RTN","HMPDGMPL",80,0)
 S X0=$G(^WV(790.05,I,0)),Y=0
"RTN","HMPDGMPL",81,0)
 ; status=YES, future due date (allow past 14 days)
"RTN","HMPDGMPL",82,0)
 I $P(X0,U,3),$P(X0,U,4)'<$$FMADD^XLFDT(DT,-14) S Y=1
"RTN","HMPDGMPL",83,0)
 I 'Y,'$G(UPD) Q
"RTN","HMPDGMPL",84,0)
 ; continue if pregnant, or update requested
"RTN","HMPDGMPL",85,0)
 S PROB("id")="WV",PROB("entered")=+X0
"RTN","HMPDGMPL",86,0)
 S PROB("name")="Pregnancy",PROB("icd")="V22.2"
"RTN","HMPDGMPL",87,0)
 ; PROB("problemType")=64572001            ;HITSP/Condition
"RTN","HMPDGMPL",88,0)
 S PROB("status")=$S(Y:"A^ACTIVE",1:"I^INACTIVE")
"RTN","HMPDGMPL",89,0)
 S PROB("resolved")=$P(X0,U,4)             ;due date
"RTN","HMPDGMPL",90,0)
 S PROB("provider")=$$OUTPTPR^SDUTL3(DFN)  ;primary care
"RTN","HMPDGMPL",91,0)
 S PROB("facility")=$$FAC^HMPD
"RTN","HMPDGMPL",92,0)
 Q
"RTN","HMPDGMPL",93,0)
 ;
"RTN","HMPDGMPL",94,0)
DATE(X) ; -- Return internal form of date X
"RTN","HMPDGMPL",95,0)
 N %DT,Y
"RTN","HMPDGMPL",96,0)
 S %DT="" D ^%DT S:Y<1 Y=X
"RTN","HMPDGMPL",97,0)
 Q Y
"RTN","HMPDGMPL",98,0)
 ;
"RTN","HMPDGMPL",99,0)
VA200(X) ; -- Return ien of New Person X
"RTN","HMPDGMPL",100,0)
 N Y S Y=$S($L($G(X)):+$O(^VA(200,"B",X,0)),1:"") ;ICR 10060 DE2818 ASF 11/23/15
"RTN","HMPDGMPL",101,0)
 Q Y
"RTN","HMPDGMPL",102,0)
 ;
"RTN","HMPDGMPL",103,0)
EXP(X) ; -- Return code for exposure name X
"RTN","HMPDGMPL",104,0)
 N Y S Y="",X=$E($G(X))
"RTN","HMPDGMPL",105,0)
 I X="A" S Y="AO"  ;agent orange
"RTN","HMPDGMPL",106,0)
 I X="R" S Y="IR"  ;ionizing radiation
"RTN","HMPDGMPL",107,0)
 I X="E" S Y="PG"  ;persian gulf
"RTN","HMPDGMPL",108,0)
 I X="H" S Y="HNC" ;head/neck cancer
"RTN","HMPDGMPL",109,0)
 I X="M" S Y="MST" ;military sexual trauma
"RTN","HMPDGMPL",110,0)
 I X="C" S Y="CV"  ;combat vet
"RTN","HMPDGMPL",111,0)
 I X="S" S Y="SHAD"
"RTN","HMPDGMPL",112,0)
 Q Y
"RTN","HMPDGMPL",113,0)
 ;
"RTN","HMPDGMPL",114,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMPL",115,0)
 ;
"RTN","HMPDGMPL",116,0)
XML(PROB) ; -- Return patient problem as XML in @HMP@(I)
"RTN","HMPDGMPL",117,0)
 N ATT,I,X,Y,P,TAG
"RTN","HMPDGMPL",118,0)
 D ADD("<problem>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMPL",119,0)
 S ATT="" F  S ATT=$O(PROB(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDGMPL",120,0)
 . I ATT="exposure" D  S Y="" Q
"RTN","HMPDGMPL",121,0)
 .. S Y="<exposures>" D ADD(Y)
"RTN","HMPDGMPL",122,0)
 .. S I=0 F  S I=$O(PROB(ATT,I)) Q:I<1  S X=$G(PROB(ATT,I)) S:$L(X) Y="<exposure value='"_X_"' />" D ADD(Y)
"RTN","HMPDGMPL",123,0)
 .. D ADD("</exposures>")
"RTN","HMPDGMPL",124,0)
 . I ATT="comment" D  S Y="" Q
"RTN","HMPDGMPL",125,0)
 .. D ADD("<comments>")
"RTN","HMPDGMPL",126,0)
 .. S I=0 F  S I=$O(PROB(ATT,I)) Q:I<1  S X=$G(PROB(ATT,I)) D
"RTN","HMPDGMPL",127,0)
 ... S Y="<comment id='"_I
"RTN","HMPDGMPL",128,0)
 ... S:$L($P(X,U,1)) Y=Y_"' entered='"_$P(X,U)
"RTN","HMPDGMPL",129,0)
 ... S:$L($P(X,U,2)) Y=Y_"' enteredBy='"_$$ESC^HMPD($P(X,U,2))
"RTN","HMPDGMPL",130,0)
 ... S:$L($P(X,U,3)) Y=Y_"' commentText='"_$$ESC^HMPD($P(X,U,3))
"RTN","HMPDGMPL",131,0)
 ... S Y=Y_"' />" D ADD(Y)
"RTN","HMPDGMPL",132,0)
 .. D ADD("</comments>")
"RTN","HMPDGMPL",133,0)
 . S X=$G(PROB(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMPL",134,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDGMPL",135,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDGMPL",136,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMPL",137,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMPL",138,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMPL",139,0)
 D ADD("</problem>")
"RTN","HMPDGMPL",140,0)
 Q
"RTN","HMPDGMPL",141,0)
 ;
"RTN","HMPDGMPL",142,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMPL",143,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMPL",144,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMPL",145,0)
 Q
"RTN","HMPDGMRA")
0^39^B23583756^B23357348
"RTN","HMPDGMRA",1,0)
HMPDGMRA ;SLC/MKB,ASMR/RRB,BL,JD - Allergy/Reaction extract;Aug 29, 2016 20:06:27
"RTN","HMPDGMRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,3**;May 15, 2016;Build 15
"RTN","HMPDGMRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMRA",4,0)
 ;
"RTN","HMPDGMRA",5,0)
 ;DE4220 - JD - 4/1/16: Fixed the date function so that seconds are considered for
"RTN","HMPDGMRA",6,0)
 ;                      Origination Date/Time field (^DD(120.8,4)).
"RTN","HMPDGMRA",7,0)
 ;
"RTN","HMPDGMRA",8,0)
 ; External References          DBIA#
"RTN","HMPDGMRA",9,0)
 ; -------------------          -----
"RTN","HMPDGMRA",10,0)
 ; ^VA(200                      10060
"RTN","HMPDGMRA",11,0)
 ; %DT                          10003
"RTN","HMPDGMRA",12,0)
 ; GMRADPT                      10099
"RTN","HMPDGMRA",13,0)
 ; EN1^GMRAOR2                   2422
"RTN","HMPDGMRA",14,0)
 ; PSN50P41                      4531
"RTN","HMPDGMRA",15,0)
 ; PSN50P65                      4543
"RTN","HMPDGMRA",16,0)
 Q
"RTN","HMPDGMRA",17,0)
 ; ------------ Get reactions from VistA ------------
"RTN","HMPDGMRA",18,0)
 ;
"RTN","HMPDGMRA",19,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's allergies/reactions
"RTN","HMPDGMRA",20,0)
 N GMRA,GMRAL,HMPN,HMPITM,HMPCNT
"RTN","HMPDGMRA",21,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496, 19 August 2016
"RTN","HMPDGMRA",22,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),HMPCNT=0
"RTN","HMPDGMRA",23,0)
 D EN1^GMRADPT
"RTN","HMPDGMRA",24,0)
 ;
"RTN","HMPDGMRA",25,0)
 ; get one reaction
"RTN","HMPDGMRA",26,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMRA",27,0)
 ;
"RTN","HMPDGMRA",28,0)
 ; get all reactions
"RTN","HMPDGMRA",29,0)
 I 'GMRAL D  Q
"RTN","HMPDGMRA",30,0)
 . S HMPITM("assessment")=$S(GMRAL=0:"nka",1:"not done")
"RTN","HMPDGMRA",31,0)
 . S HMPITM("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMRA",32,0)
 . D XML(.HMPITM)
"RTN","HMPDGMRA",33,0)
 S HMPN=0 F  S HMPN=+$O(GMRAL(HMPN)) Q:HMPN<1  D  Q:HMPCNT'<MAX
"RTN","HMPDGMRA",34,0)
 . K HMPITM D EN1(HMPN,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDGMRA",35,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDGMRA",36,0)
 Q
"RTN","HMPDGMRA",37,0)
 ;
"RTN","HMPDGMRA",38,0)
EN1(ID,REAC) ; -- return a reaction in REAC("attribute")=value
"RTN","HMPDGMRA",39,0)
 ;          from EN: expects GMRAL(ID)
"RTN","HMPDGMRA",40,0)
 N HMPY,GMRA,I,J,X,Y,SEV,TXT,SEV K REAC
"RTN","HMPDGMRA",41,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"HMPY")
"RTN","HMPDGMRA",42,0)
 S X=$P(HMPY,U,10) I $L(X) S X=$$DATE(X) Q:X<BEG  Q:X>END  S REAC("entered")=X
"RTN","HMPDGMRA",43,0)
 S REAC("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDGMRA",44,0)
 S REAC("id")=ID,REAC("name")=$P(HMPY,U) I $P(GMRA,U,9) D
"RTN","HMPDGMRA",45,0)
 . S X=$P(GMRA,U,9),Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","HMPDGMRA",46,0)
 . S REAC("localCode")=X,REAC("vuid")=$$VUID^HMPD(+X,Y)
"RTN","HMPDGMRA",47,0)
 S X=$P(HMPY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","HMPDGMRA",48,0)
 S X=$P(HMPY,U,5),REAC("source")=$E(X)
"RTN","HMPDGMRA",49,0)
 S REAC("type")=$S($L(GMRA):$P(GMRA,U,7),1:$$DFO($P(HMPY,U,7)))_U_$P(HMPY,U,7)
"RTN","HMPDGMRA",50,0)
 I $P(HMPY,U,4)="VERIFIED",$P(HMPY,U,9) S REAC("verified")=$P(HMPY,U,9)
"RTN","HMPDGMRA",51,0)
 S I=0,SEV="" F  S I=$O(HMPY("O",I)) Q:I<1  S X=$P(HMPY("O",I),U,2) S:X]SEV SEV=X ;find highest severity
"RTN","HMPDGMRA",52,0)
 S:$L(SEV) REAC("severity")=SEV
"RTN","HMPDGMRA",53,0)
 ; reactions
"RTN","HMPDGMRA",54,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","HMPDGMRA",55,0)
 . S X=$G(GMRAL(ID,"S",I)),Y=+$P(X,";",2)
"RTN","HMPDGMRA",56,0)
 . S REAC("reaction",I)=$P(X,";")_U_$$VUID^HMPD(Y,120.83)
"RTN","HMPDGMRA",57,0)
 ; comments
"RTN","HMPDGMRA",58,0)
 S I=0 F  S I=$O(HMPY("C",I)) Q:I<1  D
"RTN","HMPDGMRA",59,0)
 . S X=$G(HMPY("C",I)) K TXT
"RTN","HMPDGMRA",60,0)
 . S Y=$$VA200($P(X,U,3))_U_$P(X,U)
"RTN","HMPDGMRA",61,0)
 . S Y=Y_U_$S($L($P(X,U,2)):$E($P(X,U,2)),1:"E")
"RTN","HMPDGMRA",62,0)
 . S J=0 F  S J=$O(HMPY("C",I,J)) Q:J<1  S X=$G(HMPY("C",I,J,0)),TXT(J)=X
"RTN","HMPDGMRA",63,0)
 . K X S X=$$STRING^HMPD(.TXT)
"RTN","HMPDGMRA",64,0)
 . S REAC("comment",I)=Y_U_X ;ien^name^date^type^text
"RTN","HMPDGMRA",65,0)
 ; drug info
"RTN","HMPDGMRA",66,0)
 I $D(HMPY("I")) D
"RTN","HMPDGMRA",67,0)
 . N ROOT S ROOT=$$B^PSN50P41
"RTN","HMPDGMRA",68,0)
 . S I=0 F  S I=$O(HMPY("I",I)) Q:I<1  S X=$G(HMPY("I",I)) D
"RTN","HMPDGMRA",69,0)
 .. N IEN S IEN=$O(@ROOT@(X,0))
"RTN","HMPDGMRA",70,0)
 .. S REAC("drugIngredient",I)=X_U_$$VUID^HMPD(IEN,50.416)
"RTN","HMPDGMRA",71,0)
 I $D(HMPY("V")) D
"RTN","HMPDGMRA",72,0)
 . S I=0 F  S I=$O(HMPY("V",I)) Q:I<1  S X=$G(HMPY("V",I)) D
"RTN","HMPDGMRA",73,0)
 .. D C^PSN50P65("",$P(X,U,2),"PSN")
"RTN","HMPDGMRA",74,0)
 .. N IEN S IEN=+$O(^TMP($J,"PSN","C",$P(X,U),0))
"RTN","HMPDGMRA",75,0)
 .. S REAC("drugClass",I)=$P(X,U,2)_U_$$VUID^HMPD(IEN,50.605)
"RTN","HMPDGMRA",76,0)
 I GMRA="" S REAC("removed")=1 ;entered in error
"RTN","HMPDGMRA",77,0)
 Q
"RTN","HMPDGMRA",78,0)
 ;
"RTN","HMPDGMRA",79,0)
VA200(NAME) ; -- Return ien^name from #200
"RTN","HMPDGMRA",80,0)
 N Y S NAME=$G(NAME),Y="^"
"RTN","HMPDGMRA",81,0)
 I $L(NAME) S Y=+$O(^VA(200,"B",NAME,0))_U_NAME  ; IA 10060, DE2818
"RTN","HMPDGMRA",82,0)
 Q Y
"RTN","HMPDGMRA",83,0)
 ;
"RTN","HMPDGMRA",84,0)
DATE(X) ; -- Return internal form of date X
"RTN","HMPDGMRA",85,0)
 N %DT,Y
"RTN","HMPDGMRA",86,0)
 S %DT="STX" D ^%DT  ;Added the "S" to allow for seconds.  DE4220
"RTN","HMPDGMRA",87,0)
 Q Y
"RTN","HMPDGMRA",88,0)
 ;
"RTN","HMPDGMRA",89,0)
DFO(X) ; -- Return 'DFO' string for mechanism name(s)
"RTN","HMPDGMRA",90,0)
 N I,P,Y S Y=""
"RTN","HMPDGMRA",91,0)
 F I=1:1:$L(X,",") S P=$P(X,",",I),Y=Y_$S($E(P)=" ":$E(P,2),1:$E(P))
"RTN","HMPDGMRA",92,0)
 S:Y="" Y=$G(X)
"RTN","HMPDGMRA",93,0)
 Q Y
"RTN","HMPDGMRA",94,0)
 ;
"RTN","HMPDGMRA",95,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMRA",96,0)
 ;
"RTN","HMPDGMRA",97,0)
XML(REAC) ; -- Return patient reaction as XML
"RTN","HMPDGMRA",98,0)
 ;  as <element code='123' displayName='ABC' />
"RTN","HMPDGMRA",99,0)
 N ATT,X,Y,I,P,NM,TAG
"RTN","HMPDGMRA",100,0)
 D ADD("<allergy>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMRA",101,0)
 S ATT="" F  S ATT=$O(REAC(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDGMRA",102,0)
 . I ATT="comment" D  S Y="" Q
"RTN","HMPDGMRA",103,0)
 .. S I=0,Y="<comments>" D ADD(Y)
"RTN","HMPDGMRA",104,0)
 .. F  S I=$O(REAC(ATT,I)) Q:I<1  S X=$G(REAC(ATT,I)) D
"RTN","HMPDGMRA",105,0)
 ... S Y="<comment id='"_I
"RTN","HMPDGMRA",106,0)
 ... S:$L($P(X,U,3)) Y=Y_"' entered='"_$P(X,U,3)
"RTN","HMPDGMRA",107,0)
 ... S:$L($P(X,U,2)) Y=Y_"' enteredBy='"_$$ESC^HMPD($P(X,U,2))
"RTN","HMPDGMRA",108,0)
 ... S:$L($P(X,U,4)) Y=Y_"' commentType='"_$P(X,U,4)
"RTN","HMPDGMRA",109,0)
 ... S:$L($P(X,U,5)) Y=Y_"' commentText='"_$$ESC^HMPD($P(X,U,5))
"RTN","HMPDGMRA",110,0)
 ... S Y=Y_"' />" D ADD(Y)
"RTN","HMPDGMRA",111,0)
 .. D ADD("</comments>")
"RTN","HMPDGMRA",112,0)
 . I $O(REAC(ATT,0)) D  S Y="" Q
"RTN","HMPDGMRA",113,0)
 .. S NM=ATT_$S($E(ATT,$L(ATT))="s":"es",1:"s") D ADD("<"_NM_">")
"RTN","HMPDGMRA",114,0)
 .. S I=0 F  S I=$O(REAC(ATT,I)) Q:I<1  D
"RTN","HMPDGMRA",115,0)
 ... S X=$G(REAC(ATT,I)),Y="<"_ATT_" "
"RTN","HMPDGMRA",116,0)
 ... F P=1:1 S TAG=$P("name^vuid^severity^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMRA",117,0)
 ... S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMRA",118,0)
 .. D ADD("</"_NM_">")
"RTN","HMPDGMRA",119,0)
 . S X=$G(REAC(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMRA",120,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDGMRA",121,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDGMRA",122,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMRA",123,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMRA",124,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMRA",125,0)
 D ADD("</allergy>")
"RTN","HMPDGMRA",126,0)
 Q
"RTN","HMPDGMRA",127,0)
 ;
"RTN","HMPDGMRA",128,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMRA",129,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMRA",130,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMRA",131,0)
 Q
"RTN","HMPDGMV")
0^40^B43285050^B43285050
"RTN","HMPDGMV",1,0)
HMPDGMV ;SLC/MKB,ASMR/BL,ASMR/ASF - Vitals extract;Aug 29, 2016 20:06:27
"RTN","HMPDGMV",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDGMV",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDGMV",4,0)
 ;
"RTN","HMPDGMV",5,0)
 ; External References          DBIA#
"RTN","HMPDGMV",6,0)
 ; -------------------          -----
"RTN","HMPDGMV",7,0)
 ; ^SC                          10040
"RTN","HMPDGMV",8,0)
 ; ^VA(200                      10060
"RTN","HMPDGMV",9,0)
 ; DILFD                         2055
"RTN","HMPDGMV",10,0)
 ; GMRVUT0,^UTILITY($J,"GMRVD")  1446
"RTN","HMPDGMV",11,0)
 ; GMVGETQL                      5048
"RTN","HMPDGMV",12,0)
 ; GMVGETVT                      5047
"RTN","HMPDGMV",13,0)
 ; GMVRPCM                       5702
"RTN","HMPDGMV",14,0)
 ; GMVUTL                        5046
"RTN","HMPDGMV",15,0)
 Q
"RTN","HMPDGMV",16,0)
 ; ------------ Get vitals from VistA ------------
"RTN","HMPDGMV",17,0)
 ;
"RTN","HMPDGMV",18,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find patient's vitals
"RTN","HMPDGMV",19,0)
 N HMPITM,HMPPARAM,GMRVSTR,IDT,TYPE,VIT,CNT,X0,X,Y,I,N
"RTN","HMPDGMV",20,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDGMV",21,0)
 ;
"RTN","HMPDGMV",22,0)
 ; get one measurement
"RTN","HMPDGMV",23,0)
 I $G(IFN),IFN?7N1"."1.6N S (BEG,END)=IFN K IFN
"RTN","HMPDGMV",24,0)
 I $G(IFN) D EN1(IFN,.HMPITM),XML(.HMPITM) Q
"RTN","HMPDGMV",25,0)
 ;
"RTN","HMPDGMV",26,0)
 ; get all measurements
"RTN","HMPDGMV",27,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDGMV",28,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN",GMRVSTR(0)=BEG_U_END_U_MAX_"^1"
"RTN","HMPDGMV",29,0)
 K ^UTILITY($J,"GMRVD") D EN1^GMRVUT0
"RTN","HMPDGMV",30,0)
 S (IDT,CNT)=0 F  S IDT=$O(^UTILITY($J,"GMRVD",IDT)) Q:IDT<1  D  Q:CNT'<MAX
"RTN","HMPDGMV",31,0)
 . K VIT S VIT("taken")=9999999-IDT,CNT=CNT+1,N=0
"RTN","HMPDGMV",32,0)
 . S TYPE="" F  S TYPE=$O(^UTILITY($J,"GMRVD",IDT,TYPE)) Q:TYPE=""  D
"RTN","HMPDGMV",33,0)
 .. N NAME,VUID,RESULT,UNIT,MRES,MUNT,HIGH,LOW,QUAL
"RTN","HMPDGMV",34,0)
 .. S IFN=+$O(^UTILITY($J,"GMRVD",IDT,TYPE,0)),X0=$G(^(IFN))
"RTN","HMPDGMV",35,0)
 .. S X=+$P(X0,U,3),NAME=$$FIELD^GMVGETVT(X,1)
"RTN","HMPDGMV",36,0)
 .. S VUID=$$FIELD^GMVGETVT(X,4),RESULT=$P(X0,U,8),UNIT=$$UNIT(TYPE)
"RTN","HMPDGMV",37,0)
 .. S (MRES,MUNT)="" I $L($P(X0,U,13)) D
"RTN","HMPDGMV",38,0)
 ... S X=$S(TYPE="T":"C",TYPE="HT":"cm",TYPE="WT":"kg",TYPE="CG":"cm",1:"")
"RTN","HMPDGMV",39,0)
 ... S MRES=$P(X0,U,13) S:$L(X) MUNT=X
"RTN","HMPDGMV",40,0)
 .. S X=$$RANGE(TYPE),(HIGH,LOW)="" I $L(X) S HIGH=$P(X,U),LOW=$P(X,U,2)
"RTN","HMPDGMV",41,0)
 .. S N=N+1,VIT("measurement",N)=IFN_U_VUID_U_NAME_U_RESULT_U_UNIT_U_MRES_U_MUNT_U_HIGH_U_LOW
"RTN","HMPDGMV",42,0)
 .. S QUAL=$P(X0,U,17) I $L(QUAL) F I=1:1:$L(QUAL,";") D
"RTN","HMPDGMV",43,0)
 ... S X=$P(QUAL,";",I),Y=$$GETIEN^GMVGETQL(X,1)
"RTN","HMPDGMV",44,0)
 ... I Y S VIT("measurement",N,"qualifier",I)=X_U_$$FIELD^GMVGETQL(Y,3)
"RTN","HMPDGMV",45,0)
 . S VIT("entered")=$P($G(X0),U,4) ;use last one
"RTN","HMPDGMV",46,0)
 . S X=+$P($G(X0),U,5) S:X VIT("location")=$$LOC(X)
"RTN","HMPDGMV",47,0)
 . S VIT("facility")=$$FAC^HMPD(X)
"RTN","HMPDGMV",48,0)
 . D XML(.VIT)
"RTN","HMPDGMV",49,0)
 K ^UTILITY($J,"GMRVD")
"RTN","HMPDGMV",50,0)
 Q
"RTN","HMPDGMV",51,0)
 ;
"RTN","HMPDGMV",52,0)
EN1(ID,VIT) ; -- return a vital/measurement in VIT("attribute")
"RTN","HMPDGMV",53,0)
 K VIT S ID=+$G(ID) Q:ID<1  ;invalid ien
"RTN","HMPDGMV",54,0)
 N HMPY,X0,DFN,TYPE,X,Y,NAME,VUID,RESULT,UNIT,MRES,MUNT,HIGH,LOW,I
"RTN","HMPDGMV",55,0)
 D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDGMV",56,0)
 S DFN=+$P(X0,U,2) Q:DFN<1
"RTN","HMPDGMV",57,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","HMPDGMV",58,0)
 S X=+$P(X0,U,5),VIT("location")=$$LOC(X)
"RTN","HMPDGMV",59,0)
 S VIT("facility")=$$FAC^HMPD(X)
"RTN","HMPDGMV",60,0)
 S NAME=$$FIELD^GMVGETVT($P(X0,U,3),1),VUID=$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","HMPDGMV",61,0)
 S X=$P(X0,U,8),RESULT=X,UNIT=$$UNIT(TYPE),(MRES,MUNT)=""
"RTN","HMPDGMV",62,0)
 I TYPE="T"  S MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","HMPDGMV",63,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","HMPDGMV",64,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","HMPDGMV",65,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","HMPDGMV",66,0)
 S VIT("taken")=+X0,VIT("entered")=+$P(X0,U,4),(HIGH,LOW)=""
"RTN","HMPDGMV",67,0)
 S X=$$RANGE(TYPE) I $L(X) S HIGH=$P(X,U),LOW=$P(X,U,2)
"RTN","HMPDGMV",68,0)
 S VIT("measurement",1)=ID_U_VUID_U_NAME_U_RESULT_U_UNIT_U_MRES_U_MUNT_U_HIGH_U_LOW
"RTN","HMPDGMV",69,0)
 F I=1:1:$L(HMPY(5),U) S X=$P(HMPY(5),U,I),VIT("measurement",1,"qualifier",I)=$$FIELD^GMVGETQL(X,1)_U_$$FIELD^GMVGETQL(X,3) ;name^VUID
"RTN","HMPDGMV",70,0)
 I $G(HMPY(2)) D  ;entered in error/reasons
"RTN","HMPDGMV",71,0)
 . S X=$P(HMPY(2),U,3)
"RTN","HMPDGMV",72,0)
 . F I=1:1:$L(X,"~") S VIT("removed",I)=$$EXTERNAL^DILFD(120.506,.01,,$P(X,"~",I))
"RTN","HMPDGMV",73,0)
 Q
"RTN","HMPDGMV",74,0)
 ;
"RTN","HMPDGMV",75,0)
UNIT(X) ; -- Return unit for vital type X
"RTN","HMPDGMV",76,0)
 N Y S Y=""
"RTN","HMPDGMV",77,0)
 I TYPE="BP"  S Y="mm[Hg]"
"RTN","HMPDGMV",78,0)
 I TYPE="T"   S Y="F"
"RTN","HMPDGMV",79,0)
 I TYPE="R"   S Y="/min"
"RTN","HMPDGMV",80,0)
 I TYPE="P"   S Y="/min"
"RTN","HMPDGMV",81,0)
 I TYPE="HT"  S Y="in"
"RTN","HMPDGMV",82,0)
 I TYPE="WT"  S Y="lb"
"RTN","HMPDGMV",83,0)
 I TYPE="CVP" S Y="cmH2O"
"RTN","HMPDGMV",84,0)
 I TYPE="CG"  S Y="in"
"RTN","HMPDGMV",85,0)
 I TYPE="PO2" S Y="%"
"RTN","HMPDGMV",86,0)
 Q Y
"RTN","HMPDGMV",87,0)
 ;
"RTN","HMPDGMV",88,0)
USER(X) ; -- Return ien^name for person# X
"RTN","HMPDGMV",89,0)
 N Y S X=+$G(X)
"RTN","HMPDGMV",90,0)
 S Y=$S(X:X_U_$P($G(^VA(200,X,0)),U),1:"^") ; IA 10060, DE2818 ASF 11/4/15
"RTN","HMPDGMV",91,0)
 Q Y
"RTN","HMPDGMV",92,0)
 ;
"RTN","HMPDGMV",93,0)
LOC(X) ; -- Return ien^name for hospital location X
"RTN","HMPDGMV",94,0)
 N Y S X=+$G(X)
"RTN","HMPDGMV",95,0)
 ; DE2818 begin change ASF 11/4/15
"RTN","HMPDGMV",96,0)
 ;S Y=$S(X:X_U_$P($G(^SC(X,0)),U),1:"^")
"RTN","HMPDGMV",97,0)
 N DA,DIC,DIQ,DR,R  ; FileMan variables
"RTN","HMPDGMV",98,0)
 S DIC=44,DR=.01,DA=X,DIQ="R"
"RTN","HMPDGMV",99,0)
 D EN^DIQ1
"RTN","HMPDGMV",100,0)
 S Y="^"
"RTN","HMPDGMV",101,0)
 S:$D(R(44,DA,.01)) Y=DA_U_R(44,DA,.01)
"RTN","HMPDGMV",102,0)
 ; DE2818 end change
"RTN","HMPDGMV",103,0)
 Q Y
"RTN","HMPDGMV",104,0)
 ;
"RTN","HMPDGMV",105,0)
RANGE(TYPE) ; -- return high^low range of values for TYPE
"RTN","HMPDGMV",106,0)
 N Y I '$D(HMPPARAM(TYPE)) D  ;get parameter values
"RTN","HMPDGMV",107,0)
 . N HMPFLDS,HMPI,HMPY,HMPN,HMPX,X
"RTN","HMPDGMV",108,0)
 . S HMPFLDS=$S(TYPE="T":"5.1^5.2",TYPE="P":"5.3^5.4",TYPE="R":"5.5^5.6",TYPE="CVP":"6.1^6.2",TYPE="PO2":6.3,TYPE="BP":"5.7^5.71^5.8^5.81",1:"") Q:HMPFLDS=""
"RTN","HMPDGMV",109,0)
 . F HMPI=1:1:$L(HMPFLDS,U) S HMPN=$P(HMPFLDS,U,HMPI) D RPC^GMVRPCM(.HMPY,"GETHILO",HMPN) S HMPX(HMPN)=$G(@HMPY@(0))
"RTN","HMPDGMV",110,0)
 . I TYPE="T" S HMPPARAM(TYPE)=$G(HMPX(5.1))_U_$G(HMPX(5.2))
"RTN","HMPDGMV",111,0)
 . I TYPE="P" S HMPPARAM(TYPE)=$G(HMPX(5.3))_U_$G(HMPX(5.4))
"RTN","HMPDGMV",112,0)
 . I TYPE="R" S HMPPARAM(TYPE)=$G(HMPX(5.5))_U_$G(HMPX(5.6))
"RTN","HMPDGMV",113,0)
 . I TYPE="CVP" S HMPPARAM(TYPE)=$G(HMPX(6.1))_U_$G(HMPX(6.2))
"RTN","HMPDGMV",114,0)
 . I TYPE="PO2" S HMPPARAM(TYPE)="100^"_$G(HMPX(6.3))
"RTN","HMPDGMV",115,0)
 . I TYPE="BP" S HMPPARAM(TYPE)=$G(HMPX(5.7))_"/"_$G(HMPX(5.71))_U_$G(HMPX(5.8))_"/"_$G(HMPX(5.81))
"RTN","HMPDGMV",116,0)
 S Y=$G(HMPPARAM(TYPE))
"RTN","HMPDGMV",117,0)
 Q Y
"RTN","HMPDGMV",118,0)
 ;
"RTN","HMPDGMV",119,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDGMV",120,0)
 ;
"RTN","HMPDGMV",121,0)
NAME(X) ; -- Return name of measurement type X for XML element
"RTN","HMPDGMV",122,0)
 N Y S X=$G(X),Y=""
"RTN","HMPDGMV",123,0)
 S Y=$S(X="BP":"bloodPressure",X="T":"temperature",X="R":"respiration",X="P":"pulse",X="HT":"height",X="WT":"weight",X="CVP":"centralVenousPressure",X="CG":"circumferenceGirth",X="PO2":"pulseOximetry",X="PN":"pain",1:"")
"RTN","HMPDGMV",124,0)
 Q Y
"RTN","HMPDGMV",125,0)
 ;
"RTN","HMPDGMV",126,0)
XML(VIT) ; -- Return vital measurement as XML in @HMP@(#)
"RTN","HMPDGMV",127,0)
 N ATT,X,Y,I,J,P,NAMES,TAG
"RTN","HMPDGMV",128,0)
 D ADD("<vital>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDGMV",129,0)
 S ATT="" F  S ATT=$O(VIT(ATT)) Q:ATT=""  D
"RTN","HMPDGMV",130,0)
 . I ATT="measurement" D  Q
"RTN","HMPDGMV",131,0)
 .. D ADD("<measurements>")
"RTN","HMPDGMV",132,0)
 .. S NAMES="id^vuid^name^value^units^metricValue^metricUnits^high^low^Z"
"RTN","HMPDGMV",133,0)
 .. S I=0 F  S I=$O(VIT(ATT,I)) Q:I<1  D
"RTN","HMPDGMV",134,0)
 ... S X=$G(VIT(ATT,I)),Y="<"_ATT_" "
"RTN","HMPDGMV",135,0)
 ... F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",136,0)
 ... I '$D(VIT(ATT,I,"qualifier")) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDGMV",137,0)
 ... S Y=Y_">" D ADD(Y),ADD("<qualifiers>")
"RTN","HMPDGMV",138,0)
 ... S J=0 F  S J=$O(VIT(ATT,I,"qualifier",J)) Q:J<1  D
"RTN","HMPDGMV",139,0)
 .... S Y="<qualifier ",X=$G(VIT(ATT,I,"qualifier",J))
"RTN","HMPDGMV",140,0)
 .... F P=1:1 S TAG=$P("name^vuid^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",141,0)
 .... S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMV",142,0)
 ... D ADD("</qualifiers>"),ADD("</measurement>")
"RTN","HMPDGMV",143,0)
 .. D ADD("</measurements>")
"RTN","HMPDGMV",144,0)
 . I ATT="removed" D  Q
"RTN","HMPDGMV",145,0)
 .. D ADD("<removed>")
"RTN","HMPDGMV",146,0)
 .. S I=0 F  S I=$O(VIT(ATT,I)) Q:I<1  S Y="<reason value='"_$G(VIT(ATT,I))_"' />" D ADD(Y)
"RTN","HMPDGMV",147,0)
 .. D ADD("</removed>")
"RTN","HMPDGMV",148,0)
 . S X=$G(VIT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDGMV",149,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" D ADD(Y) Q
"RTN","HMPDGMV",150,0)
 . I $L(X)>1 D
"RTN","HMPDGMV",151,0)
 .. S Y="<"_ATT_" "
"RTN","HMPDGMV",152,0)
 .. F P=1:1 S TAG=$P("code^name^Z",U,P) Q:TAG="Z"  I $L($P(X,U,P)) S Y=Y_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDGMV",153,0)
 .. S Y=Y_"/>" D ADD(Y)
"RTN","HMPDGMV",154,0)
 D ADD("</vital>")
"RTN","HMPDGMV",155,0)
 Q
"RTN","HMPDGMV",156,0)
 ;
"RTN","HMPDGMV",157,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDGMV",158,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDGMV",159,0)
 S @HMP@(HMPI)=X
"RTN","HMPDGMV",160,0)
 Q
"RTN","HMPDJ")
0^41^B36747380^B36566294
"RTN","HMPDJ",1,0)
HMPDJ ;SLC/MKB,ASMR/RRB,CK -- Serve VistA data as JSON via RPC;Aug 29, 2016 20:06:27
"RTN","HMPDJ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPDJ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ",4,0)
 ;
"RTN","HMPDJ",5,0)
 ; External References          DBIA#
"RTN","HMPDJ",6,0)
 ; -------------------          -----
"RTN","HMPDJ",7,0)
 ; ^DPT                         10035
"RTN","HMPDJ",8,0)
 ; MPIF001                       2701
"RTN","HMPDJ",9,0)
 ; XLFDT                        10103
"RTN","HMPDJ",10,0)
 ; XLFSTR                       10104
"RTN","HMPDJ",11,0)
 ; XUPARAM                       2541
"RTN","HMPDJ",12,0)
 ;
"RTN","HMPDJ",13,0)
 ; DE2818/RRB - SQA findings 1st 3 lines of code.
"RTN","HMPDJ",14,0)
 ;
"RTN","HMPDJ",15,0)
 Q
"RTN","HMPDJ",16,0)
 ;
"RTN","HMPDJ",17,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPDJ",18,0)
 ; RPC = HMP GET PATIENT DATA JSON
"RTN","HMPDJ",19,0)
 ; where FILTER("patientId") = DFN or DFN;ICN
"RTN","HMPDJ",20,0)
 ;       FILTER("domain")    = name of desired data type  (see HMPDJ0)
"RTN","HMPDJ",21,0)
 ;       FILTER("text")      = boolean, to include document text [opt]
"RTN","HMPDJ",22,0)
 ;       FILTER("start")     = start date.time of search         [opt]
"RTN","HMPDJ",23,0)
 ;       FILTER("stop")      = stop date.time of search          [opt]
"RTN","HMPDJ",24,0)
 ;       FILTER("max")       = maximum number of items to return [opt]
"RTN","HMPDJ",25,0)
 ;       FILTER("id")        = single item id to return          [opt]
"RTN","HMPDJ",26,0)
 ;       FILTER("uid")       = single record uid to return       [opt]
"RTN","HMPDJ",27,0)
 ;       FILTER("noHead")    = flag, to omit header and commas   [opt]
"RTN","HMPDJ",28,0)
 ;
"RTN","HMPDJ",29,0)
 N ICN,DFN,HMPI,HMPSYS,HMPTYPE,HMPSTART,HMPSTOP,HMPMAX,HMPID,HMPTEXT,HMPP,TYPE,HMPTN,HMPERR
"RTN","HMPDJ",30,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPDJ",31,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJ",32,0)
 S DT=$$DT^XLFDT  ;for crossing midnight
"RTN","HMPDJ",33,0)
 ;
"RTN","HMPDJ",34,0)
 ; parse & validate input parameters
"RTN","HMPDJ",35,0)
 I $G(FILTER("uid"))'="" D SEPUID(.FILTER)
"RTN","HMPDJ",36,0)
 ;
"RTN","HMPDJ",37,0)
 S DFN=$G(FILTER("patientId"))
"RTN","HMPDJ",38,0)
 ;
"RTN","HMPDJ",39,0)
 S ICN=+$P($G(DFN),";",2),DFN=+$G(DFN)
"RTN","HMPDJ",40,0)
 I '(DFN>0),ICN S DFN=+$$GETDFN^MPIF001(ICN)  ;DE4496
"RTN","HMPDJ",41,0)
 ;
"RTN","HMPDJ",42,0)
 S HMPTYPE=$G(FILTER("domain")) S:HMPTYPE="" HMPTYPE=$$ALL
"RTN","HMPDJ",43,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPTYPE)) K @HMP
"RTN","HMPDJ",44,0)
 ;ICR 10035 DE2818 ASF 11/2/15, DE4496 August 19, 2016
"RTN","HMPDJ",45,0)
 I HMPTYPE'="new",'(DFN>0)!'$D(^DPT(DFN)) D LOGDPT^HMPLOG(DFN) S HMPERR=$$ERR(1,DFN) G GTQ
"RTN","HMPDJ",46,0)
 ;
"RTN","HMPDJ",47,0)
 ; -- initialize chunking if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined *S68-JCH*
"RTN","HMPDJ",48,0)
 D CHNKINIT^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",49,0)
 ;
"RTN","HMPDJ",50,0)
 S HMPSTART=+$G(FILTER("start"),1410102)
"RTN","HMPDJ",51,0)
 S HMPSTOP=+$G(FILTER("stop"),4141015)
"RTN","HMPDJ",52,0)
 S HMPMAX=+$G(FILTER("max"),999999)
"RTN","HMPDJ",53,0)
 I HMPSTART,HMPSTOP,HMPSTOP<HMPSTART D
"RTN","HMPDJ",54,0)
 . N X S X=HMPSTART,HMPSTART=HMPSTOP,HMPSTOP=X
"RTN","HMPDJ",55,0)
 I HMPSTOP,$L(HMPSTOP,".")<2 S HMPSTOP=HMPSTOP_".24"
"RTN","HMPDJ",56,0)
 ;
"RTN","HMPDJ",57,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPDJ",58,0)
 S HMPTEXT=+$G(FILTER("text"),1) ;default = true/text
"RTN","HMPDJ",59,0)
 ;
"RTN","HMPDJ",60,0)
 ;set error trap
"RTN","HMPDJ",61,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPDJ",62,0)
 ;
"RTN","HMPDJ",63,0)
 ; extract data
"RTN","HMPDJ",64,0)
 I HMPTYPE="new",$L($T(EN^HMPDJX)),'$G(^XTMP("HMP-off","GET")) D EN^HMPDJX(HMPID,HMPMAX) Q  ;data updates
"RTN","HMPDJ",65,0)
 F HMPP=1:1:$L(HMPTYPE,";") S TYPE=$P(HMPTYPE,";",HMPP) I $L(TYPE) D
"RTN","HMPDJ",66,0)
 . S HMPTN=$$TAG(TYPE)_"^HMPDJ0" Q:'$L($T(@HMPTN))  ;D ERR(2) Q
"RTN","HMPDJ",67,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ",68,0)
 . S $ET="D ERRHDLR^HMPDERRH",ERRMSG="A problem occurred when trying to load patient data from an API."
"RTN","HMPDJ",69,0)
 . D @HMPTN
"RTN","HMPDJ",70,0)
 ;
"RTN","HMPDJ",71,0)
GTQ ; add item count and terminating characters
"RTN","HMPDJ",72,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR)
"RTN","HMPDJ",73,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPDJ",74,0)
 .S @HMP@("total")=+$G(HMPI)
"RTN","HMPDJ",75,0)
 .I $L($G(ERROR(1)))>1 S @HMP@("error")=ERROR(1)
"RTN","HMPDJ",76,0)
 S @HMP@(.5)="{""apiVersion"":""1.01"",""params"":{"_$$SYS_"},"
"RTN","HMPDJ",77,0)
 I $D(HMPERR) S @HMP@(1)="""error"":{""message"":"""_HMPERR_"""}}" Q
"RTN","HMPDJ",78,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPDJ",79,0)
 . I '$D(ERROR) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPDJ",80,0)
 . S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPDJ",81,0)
 . S @HMP@(2,1)=ERROR(1)_"}"
"RTN","HMPDJ",82,0)
 ;
"RTN","HMPDJ",83,0)
 S @HMP@(.6)="""data"":{""updated"":"""_$$HL7NOW_""",""totalItems"":"_HMPI_",""items"":["
"RTN","HMPDJ",84,0)
 S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(ERROR):"]}",1:"]}}")
"RTN","HMPDJ",85,0)
 I $D(ERROR)>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)=",",@HMP@(HMPI,1)=ERROR(1)_"}"
"RTN","HMPDJ",86,0)
 K ^TMP($J,"HMP ERROR"),^TMP("HMPTEXT",$J)
"RTN","HMPDJ",87,0)
 Q
"RTN","HMPDJ",88,0)
 ;
"RTN","HMPDJ",89,0)
SEPUID(FILTER) ; -- separate uid into FILTER pieces
"RTN","HMPDJ",90,0)
 N UID
"RTN","HMPDJ",91,0)
 S UID=$G(FILTER("uid")) K FILTER("uid") Q:UID=""
"RTN","HMPDJ",92,0)
 I $P(UID,":",4)'=HMPSYS Q
"RTN","HMPDJ",93,0)
 S FILTER("patientId")=$P(UID,":",5)
"RTN","HMPDJ",94,0)
 S FILTER("domain")=$P(UID,":",3)
"RTN","HMPDJ",95,0)
 S FILTER("id")=$P(UID,":",6)
"RTN","HMPDJ",96,0)
 Q
"RTN","HMPDJ",97,0)
 ;
"RTN","HMPDJ",98,0)
SYS() ; -- return system info for JSON header
"RTN","HMPDJ",99,0)
 Q """domain"":"""_$$KSP^XUPARAM("WHERE")_""",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJ",100,0)
 ;
"RTN","HMPDJ",101,0)
BUILDERR(RESULT,DFN) ; -- build error array
"RTN","HMPDJ",102,0)
 N COUNT,MESSAGE,MSGCNT
"RTN","HMPDJ",103,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPDJ",104,0)
 S MESSAGE="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPDJ",105,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPDJ",106,0)
 . S MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPDJ",107,0)
 S RESULT(1)="""error"":{""message"":"""_MESSAGE_"""}"
"RTN","HMPDJ",108,0)
 Q
"RTN","HMPDJ",109,0)
 ;
"RTN","HMPDJ",110,0)
TAG(X) ; -- Return linetag in HMPDJ0 routine for clinical domain X
"RTN","HMPDJ",111,0)
 N Y S X=$G(X,"Z")
"RTN","HMPDJ",112,0)
 S Y=$E($$UP^XLFSTR(X),1,8)
"RTN","HMPDJ",113,0)
 S:'$L($T(@(Y_"^HMPDJ0"))) Y="HMP"
"RTN","HMPDJ",114,0)
 Q Y
"RTN","HMPDJ",115,0)
 ;
"RTN","HMPDJ",116,0)
ALL() ; -- return string for all types of data
"RTN","HMPDJ",117,0)
 Q "patient;problem;allergy;consult;vital;lab;procedure;obs;order;treatment;med;ptf;factor;immunization;exam;cpt;education;pov;skin;image;appointment;surgery;document;visit;mh"
"RTN","HMPDJ",118,0)
 ;
"RTN","HMPDJ",119,0)
ERR(X,VAL) ; -- return error message
"RTN","HMPDJ",120,0)
 N MSG  S MSG="Error"
"RTN","HMPDJ",121,0)
 I X=1  S MSG="Patient with dfn '"_$G(VAL)_"' not found"
"RTN","HMPDJ",122,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPDJ",123,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPDJ",124,0)
 I X=4  S MSG="Unable to create new object"
"RTN","HMPDJ",125,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPDJ",126,0)
 Q MSG
"RTN","HMPDJ",127,0)
 ;
"RTN","HMPDJ",128,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPDJ",129,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPDJ",130,0)
 ;
"RTN","HMPDJ",131,0)
ADD(ITEM,COLL) ; -- add ITEM to results
"RTN","HMPDJ",132,0)
 I $D(HMPCRC),$D(COLL) D ONE^HMPDCRC(ITEM,COLL) Q  ;checksum
"RTN","HMPDJ",133,0)
 ; -- add ITEM to @HMP@(HMPI) to return JSON
"RTN","HMPDJ",134,0)
 N HMPY,HMPERR
"RTN","HMPDJ",135,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPDJ",136,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPDJ",137,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPDJ",138,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPDJ",139,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPDJ",140,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPDJ",141,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPDJ",142,0)
 I $D(HMPY) D
"RTN","HMPDJ",143,0)
 . S HMPI=HMPI+1
"RTN","HMPDJ",144,0)
 . I HMPI>1 S @HMP@(HMPI,.3)=","
"RTN","HMPDJ",145,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ",146,0)
 . ;
"RTN","HMPDJ",147,0)
 . ; -- chunk data if from DOMPT^HMPDJFSP ; i.e. HMPCHNK defined ; *S68-JCH*
"RTN","HMPDJ",148,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ; *S68-JCH*
"RTN","HMPDJ",149,0)
 Q
"RTN","HMPDJ",150,0)
 ;
"RTN","HMPDJ",151,0)
TEST(DFN,TYPE,ID,TEXT,IN) ; -- test GET, write results to screen
"RTN","HMPDJ",152,0)
 N OUT,IDX S U="^"
"RTN","HMPDJ",153,0)
 S:'$D(IN("systemID")) IN("systemID")=$$SYS^HMPUTILS
"RTN","HMPDJ",154,0)
 S IN("patientId")=+$G(DFN)
"RTN","HMPDJ",155,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPDJ",156,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPDJ",157,0)
 S:$D(TEXT) IN("text")=TEXT
"RTN","HMPDJ",158,0)
 D GET(.OUT,.IN)
"RTN","HMPDJ",159,0)
 ;
"RTN","HMPDJ",160,0)
 S IDX=OUT
"RTN","HMPDJ",161,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPDJ",162,0)
 Q
"RTN","HMPDJ",163,0)
 ;
"RTN","HMPDJ0")
0^54^B123532458^B123520924
"RTN","HMPDJ0",1,0)
HMPDJ0 ;SLC/MKB,ASMR/JD,PB,CPC -- Serve VistA data as JSON cont ; 07/13/16 04:45pm
"RTN","HMPDJ0",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJ0",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ0",4,0)
 ;
"RTN","HMPDJ0",5,0)
 ; External References          DBIA#
"RTN","HMPDJ0",6,0)
 ; -------------------          -----
"RTN","HMPDJ0",7,0)
 ; ^DPT                         10035  <see HMPDJ0* for others>
"RTN","HMPDJ0",8,0)
 ; EN^ORQ1                      3154
"RTN","HMPDJ0",9,0)
 ; SDAMA301                     4433
"RTN","HMPDJ0",10,0)
 ;
"RTN","HMPDJ0",11,0)
 ; All tags expect DFN, HMPSTART, HMPSTOP, HMPMAX, HMPID, HMPTEXT
"RTN","HMPDJ0",12,0)
 Q
"RTN","HMPDJ0",13,0)
 ;
"RTN","HMPDJ0",14,0)
PATIENT ; -- Patient Registration
"RTN","HMPDJ0",15,0)
 D DPT1^HMPDJ00
"RTN","HMPDJ0",16,0)
 Q
"RTN","HMPDJ0",17,0)
 ;
"RTN","HMPDJ0",18,0)
PROBLEM ; -- Problem List
"RTN","HMPDJ0",19,0)
 I $G(HMPID) D GMPL1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",20,0)
 N ID,HMPSTS,HMPPROB,HMPN,X,POVLST
"RTN","HMPDJ0",21,0)
 S HMPSTS=$G(FILTER("status")) ;default = all problems
"RTN","HMPDJ0",22,0)
 D LIST^GMPLUTL2(.HMPPROB,DFN,HMPSTS)
"RTN","HMPDJ0",23,0)
 D DIAGLIST^HMPDJ02(.POVLST,DFN)
"RTN","HMPDJ0",24,0)
 S HMPN=0 F  S HMPN=$O(HMPPROB(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",25,0)
 . S X=$P(HMPPROB(HMPN),U,6) I X,(X<HMPSTART)!(X>HMPSTOP) Q  ;last updated
"RTN","HMPDJ0",26,0)
 . S ID=+HMPPROB(HMPN) D GMPL1^HMPDJ02(ID,.POVLST)
"RTN","HMPDJ0",27,0)
 Q
"RTN","HMPDJ0",28,0)
 ;
"RTN","HMPDJ0",29,0)
ALLERGY ; -- Allergies/Adverse Reactions
"RTN","HMPDJ0",30,0)
 N GMRAL,ID D EN1^GMRADPT
"RTN","HMPDJ0",31,0)
 ; This IF statement was disabled to prevent getting "deletes" in the
"RTN","HMPDJ0",32,0)
 ; JSON during a fetch if ALL allergies for a given patient have been marked
"RTN","HMPDJ0",33,0)
 ; as "entered in error". US6021
"RTN","HMPDJ0",34,0)
 ;I 'GMRAL Q  ;D NKA^HMPDJ02 Q
"RTN","HMPDJ0",35,0)
 I $G(HMPID) D GMRA1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",36,0)
 S ID=0 F  S ID=+$O(GMRAL(ID)) Q:ID<1  D GMRA1^HMPDJ02(ID) Q:HMPI'<HMPMAX
"RTN","HMPDJ0",37,0)
 Q
"RTN","HMPDJ0",38,0)
 ;
"RTN","HMPDJ0",39,0)
CONSULT ; -- Consult/Request Tracking
"RTN","HMPDJ0",40,0)
 N HMPN,HMPX,ID
"RTN","HMPDJ0",41,0)
 D OER^GMRCSLM1(DFN,"",HMPSTART,HMPSTOP,"")
"RTN","HMPDJ0",42,0)
 S HMPN=0 F  S HMPN=$O(^TMP("GMRCR",$J,"CS",HMPN)) Q:HMPN<1!(HMPN>HMPMAX)  S HMPX=$G(^(HMPN,0)) Q:$E(HMPX)="<"  D
"RTN","HMPDJ0",43,0)
 . I $G(HMPID),HMPID'=+HMPX Q
"RTN","HMPDJ0",44,0)
 . D GMRC1^HMPDJ03(+HMPX)
"RTN","HMPDJ0",45,0)
 K ^TMP("GMRCR",$J,"CS")
"RTN","HMPDJ0",46,0)
 Q
"RTN","HMPDJ0",47,0)
 ;
"RTN","HMPDJ0",48,0)
VITAL ; -- GMR Vital Measurements
"RTN","HMPDJ0",49,0)
 I $L($G(HMPID)) D GMV1^HMPDJ02(HMPID) Q
"RTN","HMPDJ0",50,0)
 N GMRVSTR,HMPIDT,HMPTYP,ID
"RTN","HMPDJ0",51,0)
 S GMRVSTR="BP;T;R;P;HT;WT;CVP;CG;PO2;PN"
"RTN","HMPDJ0",52,0)
 S GMRVSTR(0)=HMPSTART_U_HMPSTOP_U_HMPMAX_"^1"
"RTN","HMPDJ0",53,0)
 D EN1^GMRVUT0
"RTN","HMPDJ0",54,0)
 S HMPIDT=0 F  S HMPIDT=$O(^UTILITY($J,"GMRVD",HMPIDT)) Q:HMPIDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",55,0)
 . S HMPTYP="" F  S HMPTYP=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP)) Q:HMPTYP=""  D
"RTN","HMPDJ0",56,0)
 .. S ID=$O(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,0)) D GMV1^HMPDJ02(ID)
"RTN","HMPDJ0",57,0)
 K ^UTILITY($J,"GMRVD")
"RTN","HMPDJ0",58,0)
 Q
"RTN","HMPDJ0",59,0)
 ;
"RTN","HMPDJ0",60,0)
LAB ; -- Lab Results
"RTN","HMPDJ0",61,0)
 N LRDFN,LRID,HMPSUB,HMPIDT,HMPN,HMPP,HMPACC,BEG,END,SUB,ORPK,ID,X
"RTN","HMPDJ0",62,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN),HMPSUB=$G(FILTER("category"))  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDJ0",63,0)
 S BEG=HMPSTART,END=HMPSTOP,LRID=$G(HMPID),ORPK=""
"RTN","HMPDJ0",64,0)
 I $L(LRID) D  ;reset for LR7OR1
"RTN","HMPDJ0",65,0)
 . I LRID S ORPK=LRID,LRID=$P(LRID,";",4,99) Q:LRID=""  ;order
"RTN","HMPDJ0",66,0)
 . S HMPSUB=$P(LRID,";"),HMPIDT=+$P(LRID,";",2)
"RTN","HMPDJ0",67,0)
 . S:HMPIDT (BEG,END)=9999999-HMPIDT
"RTN","HMPDJ0",68,0)
 S SUB=HMPSUB I $L(SUB),"CH^MI"'[SUB S SUB="AP"
"RTN","HMPDJ0",69,0)
 D RR^LR7OR1(DFN,ORPK,BEG,END,SUB,,,HMPMAX)  ; ICR 2503, DE2818
"RTN","HMPDJ0",70,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDJ0",71,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",72,0)
 .. I HMPSUB="MI"  S ID=HMPSUB_";"_HMPIDT D MI^HMPDJ06 Q
"RTN","HMPDJ0",73,0)
 .. I HMPSUB'="CH" S ID=HMPSUB_";"_HMPIDT D AP^HMPDJ06 Q
"RTN","HMPDJ0",74,0)
 .. D ACC^HMPDJ06 ;get chem accession data
"RTN","HMPDJ0",75,0)
 .. S HMPP=0 F  S HMPP=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPP)) Q:HMPP<1  S X=+$G(^(HMPP)) D
"RTN","HMPDJ0",76,0)
 ... S HMPN=$$LRDN^LRPXAPIU(X) I $L(LRID,";")>2,HMPN'=$P(LRID,";",3) Q
"RTN","HMPDJ0",77,0)
 ... S ID=HMPSUB_";"_HMPIDT_";"_HMPN D CH1^HMPDJ06
"RTN","HMPDJ0",78,0)
 K ^TMP("LRRR",$J),^TMP("LRX",$J)
"RTN","HMPDJ0",79,0)
 Q
"RTN","HMPDJ0",80,0)
 ;
"RTN","HMPDJ0",81,0)
PROCEDUR ; -- Clinical Procedures
"RTN","HMPDJ0",82,0)
 N HMPN,HMPX,BEG,END,ID
"RTN","HMPDJ0",83,0)
 S BEG=HMPSTART,END=HMPSTOP
"RTN","HMPDJ0",84,0)
 I $G(HMPID) D  ;reset dates for HMPID only
"RTN","HMPDJ0",85,0)
 . N HMPMC,IEN,FILE,X
"RTN","HMPDJ0",86,0)
 . S IEN=+HMPID,FILE=+$P(HMPID,"(",2)  Q:FILE=702  Q:'FILE
"RTN","HMPDJ0",87,0)
 . D MEDLKUP^MCARUTL3(.HMPMC,FILE,IEN)
"RTN","HMPDJ0",88,0)
 . S X=$P(HMPMC,U,6) S:X (BEG,END)=X
"RTN","HMPDJ0",89,0)
 D MDPS1^HMPDJ03(DFN,BEG,END,HMPMAX)    ;gets ^TMP("MDHSP",$J)
"RTN","HMPDJ0",90,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDJ0",91,0)
 . I $G(HMPID),+HMPID'=+$P(HMPX,U,2) Q  ;update 1 procedure
"RTN","HMPDJ0",92,0)
 . D MC1^HMPDJ03($G(HMPID))             ;uses HMPX
"RTN","HMPDJ0",93,0)
 K ^TMP("MDHSP",$J)
"RTN","HMPDJ0",94,0)
 Q
"RTN","HMPDJ0",95,0)
 ;
"RTN","HMPDJ0",96,0)
OBS ; -- Clinical Observations (CLiO)
"RTN","HMPDJ0",97,0)
 N HMPCLIO,HMPN,ID,X
"RTN","HMPDJ0",98,0)
 I $L($G(HMPID)) D MDC1^HMPDJ03(HMPID) Q
"RTN","HMPDJ0",99,0)
 D QRYPT^HMPDMDC("HMPCLIO",DFN,HMPSTART,HMPSTOP) ;all [verified] observations
"RTN","HMPDJ0",100,0)
 S HMPN=0 F  S HMPN=$O(HMPCLIO(HMPN)) Q:(HMPN<1)!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",101,0)
 . S ID=$G(HMPCLIO(HMPN)) ;GUID
"RTN","HMPDJ0",102,0)
 . D MDC1^HMPDJ03(ID)
"RTN","HMPDJ0",103,0)
 Q
"RTN","HMPDJ0",104,0)
 ;
"RTN","HMPDJ0",105,0)
ORDER ; -- Order Entry
"RTN","HMPDJ0",106,0)
 N DAD,HMPN,HMPORDR,ID,ORLIST,X  ; DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",107,0)
 I $G(HMPID) S ORLIST=$H D OR1^HMPDJ01(HMPID) G ORQ
"RTN","HMPDJ0",108,0)
 ; changed FLG to 1 to get all orders including pending.  JD - 1/20/16 - US11951
"RTN","HMPDJ0",109,0)
 D EN^ORQ1(DFN_";DPT(",,1,,HMPSTART,HMPSTOP,,,,1) ; DBIA 3154
"RTN","HMPDJ0",110,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)),ID=+ID D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",111,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",112,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",113,0)
 . ; (#33) PACKAGE REFERENCE
"RTN","HMPDJ0",114,0)
 . ; (# 5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",115,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",116,0)
 . ; Get Parent order if we don't already have it
"RTN","HMPDJ0",117,0)
 . ; Also, add the child order to the returned list
"RTN","HMPDJ0",118,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT 
"RTN","HMPDJ0",119,0)
 . I DAD D:'$D(^TMP("ORGOTIT",$J,DAD)) OR1^HMPDJ01(DAD)
"RTN","HMPDJ0",120,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",121,0)
 . D OR1^HMPDJ01(ID)
"RTN","HMPDJ0",122,0)
ORQ ; end
"RTN","HMPDJ0",123,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",124,0)
 Q
"RTN","HMPDJ0",125,0)
 ;
"RTN","HMPDJ0",126,0)
TREATMEN ; -- Nursing Treatments (orders)
"RTN","HMPDJ0",127,0)
 N HMPN,HMPORDR,ID,ORDG,ORLIST,X  ;DE2818, added HMPORDR, removed X3,X4
"RTN","HMPDJ0",128,0)
 I $G(HMPID) S ORLIST=$H D NTX1^HMPDJ01(HMPID) G TXQ
"RTN","HMPDJ0",129,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",130,0)
 S ORDG=+$O(^ORD(100.98,"B","NTX",0))
"RTN","HMPDJ0",131,0)
 D EN^ORQ1(DFN_";DPT(",ORDG,6,,HMPSTART,HMPSTOP,,,,1)
"RTN","HMPDJ0",132,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",133,0)
 . Q:$D(^TMP("ORGOTIT",$J,+ID))  Q:$P(ID,";",2)>1  S ID=+ID  ;actions
"RTN","HMPDJ0",134,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",135,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",136,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",137,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",138,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",139,0)
 . D NTX1^HMPDJ01(ID)
"RTN","HMPDJ0",140,0)
TXQ ; end
"RTN","HMPDJ0",141,0)
 K ^TMP("ORR",$J),^TMP("ORGOTIT",$J)
"RTN","HMPDJ0",142,0)
 Q
"RTN","HMPDJ0",143,0)
 ;
"RTN","HMPDJ0",144,0)
MED ; -- Pharmacy
"RTN","HMPDJ0",145,0)
 ;DE2818, removed reference to ^OR(100,HMPID) below
"RTN","HMPDJ0",146,0)
 N ORDIALOG I $G(HMPID),$$GET1^DIQ(100,+HMPID_",",.01)]"" D PS1^HMPDJ05(HMPID) Q  ;get 1 order
"RTN","HMPDJ0",147,0)
 N DAD,HMPN,HMPORDR,ID,ORDG,ORLIST,ORVP,TYPE  ;DE2818, added HMPORDR, removed extra ORLIST and X3,X4
"RTN","HMPDJ0",148,0)
 S TYPE=$G(FILTER("vaType")) S:$L(TYPE) TYPE=$S(TYPE="N":"NV",TYPE="V":"IV",1:TYPE)_" "
"RTN","HMPDJ0",149,0)
 ;DE2818, ***replacement for ^ORD reference needed below***
"RTN","HMPDJ0",150,0)
 S ORDG=$O(^ORD(100.98,"B",TYPE_"RX",0)),ORVP=DFN_";DPT(" ;CPC removed + 10/30/15 DE2434
"RTN","HMPDJ0",151,0)
 ;If RX group not found, and not overridden by specific type then try PHARMACY CPC 10/30/15 DE2434
"RTN","HMPDJ0",152,0)
 I ORDG="" S ORDG=0 I TYPE="" S ORDG=+$O(^ORD(100.98,"B","PHARMACY",0)) ;CPC 10/30/15 DE2434
"RTN","HMPDJ0",153,0)
 D EN^ORQ1(ORVP,ORDG,6,,HMPSTART,HMPSTOP)
"RTN","HMPDJ0",154,0)
 K ^TMP("HMPOR",$J) S HMPN=0
"RTN","HMPDJ0",155,0)
 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  S ID=$G(^(HMPN)),ID=+ID D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",156,0)
 . ;DE2818, begin logic change
"RTN","HMPDJ0",157,0)
 . K HMPORDR D ORDINFO(.HMPORDR,ID)  ; kill it for each iteration
"RTN","HMPDJ0",158,0)
 . ;(#33) PACKAGE REFERENCE,(#5) STATUS: 13=CANCELLED, 12=DISCONTINUED/EDIT, 1=DISCONTINUED
"RTN","HMPDJ0",159,0)
 . Q:$G(HMPORDR(100,ID,5,"I"))=13  I $G(HMPORDR(100,ID,33,"I"))["P",($G(HMPORDR(100,ID,5,"I"))=12)!($G(HMPORDR(100,ID,5,"I"))=1) Q
"RTN","HMPDJ0",160,0)
 . S DAD=$G(HMPORDR(100,ID,36,"I"))  ;(#36) PARENT
"RTN","HMPDJ0",161,0)
 . I DAD D:'$D(^TMP("HMPOR",$J,DAD)) PS1^HMPDJ05(DAD)
"RTN","HMPDJ0",162,0)
 . ;DE2818, end logic change
"RTN","HMPDJ0",163,0)
 . D PS1^HMPDJ05(ID) ;DE5156 ensure parent added as well as children
"RTN","HMPDJ0",164,0)
 K ^TMP("HMPOR",$J),^TMP("ORR",$J),^TMP("ORGOTIT",$J),^TMP($J,"PSOI")
"RTN","HMPDJ0",165,0)
 Q
"RTN","HMPDJ0",166,0)
 ;
"RTN","HMPDJ0",167,0)
PTF ; -- Patient Treatment File
"RTN","HMPDJ0",168,0)
 ;Purpose - Main Patient Treatment File (PTF) RPC
"RTN","HMPDJ0",169,0)
 ;
"RTN","HMPDJ0",170,0)
 ;Called by - PTF RPC
"RTN","HMPDJ0",171,0)
 ;
"RTN","HMPDJ0",172,0)
 ;Assumptions - Expects variables DFN, HMPSTART, HMPSTOP, HMPMAX
"RTN","HMPDJ0",173,0)
 ;
"RTN","HMPDJ0",174,0)
 ;Modification History -
"RTN","HMPDJ0",175,0)
 ;US5630 (TW) - Namespaced variables and enhanced newing
"RTN","HMPDJ0",176,0)
 ;
"RTN","HMPDJ0",177,0)
 N HMPRDT,HMPX,HMPAPI,HMPLID
"RTN","HMPDJ0",178,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",179,0)
 ;
"RTN","HMPDJ0",180,0)
 I $G(HMPID),HMPID'=+HMPID D PTFA^HMPDJ04A(HMPID) Q  ; If HMPID and dx type, process and quit
"RTN","HMPDJ0",181,0)
 ;
"RTN","HMPDJ0",182,0)
 I $G(HMPID) D  Q:'$D(^TMP("HMPPX",$J))  ; If HMPID only, set one ^TMP("HMPPX") entry
"RTN","HMPDJ0",183,0)
 . S HMPRDT=9999999
"RTN","HMPDJ0",184,0)
 . D RPC^DGPTFAPI(.HMPAPI,HMPID)
"RTN","HMPDJ0",185,0)
 . S HMPX=$P($G(HMPAPI(1)),U,3)
"RTN","HMPDJ0",186,0)
 . I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;DXLS")=HMPX_U
"RTN","HMPDJ0",187,0)
 . F HMPAPI=1:1:9 S HMPX=$P($G(HMPY(2)),U,HMPAPI) I $L(HMPX) S ^TMP("HMPPX",$J,HMPRDT,HMPID_";70;D SD"_HMPAPI)=HMPX_U_$G(DISDAT)
"RTN","HMPDJ0",188,0)
 ;
"RTN","HMPDJ0",189,0)
 I '$G(HMPID) D PTF^HMPDJ09  ; If no HMPID, set up ^TMP("HMPPX") for all dx
"RTN","HMPDJ0",190,0)
 ;
"RTN","HMPDJ0",191,0)
 ;Loop through ^TMP("HMPPX",$J) and do PTF1^HMPDJ04A to set PTF array, ^TMP
"RTN","HMPDJ0",192,0)
 S HMPRDT="" F  S HMPRDT=$O(^TMP("HMPPX",$J,HMPRDT)) Q:HMPRDT=""  D
"RTN","HMPDJ0",193,0)
 . S HMPLID="" F  S HMPLID=$O(^TMP("HMPPX",$J,HMPRDT,HMPLID)) Q:HMPLID=""!(HMPI'<HMPMAX)  D
"RTN","HMPDJ0",194,0)
 .. D PTF1^HMPDJ04A
"RTN","HMPDJ0",195,0)
 K ^TMP("HMPPX",$J)
"RTN","HMPDJ0",196,0)
 Q
"RTN","HMPDJ0",197,0)
 ;
"RTN","HMPDJ0",198,0)
FACTOR   D PX^HMPDJ09(9000010.23) Q   ; -- PCE Health Factors
"RTN","HMPDJ0",199,0)
IMMUNIZA D PX^HMPDJ09(9000010.11) Q   ; -- PCE Immunizations
"RTN","HMPDJ0",200,0)
EXAM     D PX^HMPDJ09(9000010.13) Q   ; -- PCE Exams
"RTN","HMPDJ0",201,0)
CPT      D PX^HMPDJ09(9000010.18) Q   ; -- PCE CPT
"RTN","HMPDJ0",202,0)
EDUCATIO D PX^HMPDJ09(9000010.16) Q   ; -- PCE Patient Education
"RTN","HMPDJ0",203,0)
POV      D PX^HMPDJ09(9000010.07) Q   ; -- PCE Purpose of Visit (POV)
"RTN","HMPDJ0",204,0)
SKIN     D PX^HMPDJ09(9000010.12) Q   ; -- PCE Skin Tests
"RTN","HMPDJ0",205,0)
 ;
"RTN","HMPDJ0",206,0)
IMAGE ; -- Radiology/Nuclear Medicine
"RTN","HMPDJ0",207,0)
 D EN1^RAO7PC1(DFN,HMPSTART,HMPSTOP,HMPMAX_"P")
"RTN","HMPDJ0",208,0)
 I $G(HMPID) D RA1^HMPDJ07(HMPID) G IMQ
"RTN","HMPDJ0",209,0)
 N ID S ID=""
"RTN","HMPDJ0",210,0)
 F  S ID=$O(^TMP($J,"RAE1",DFN,ID)) Q:ID=""  D RA1^HMPDJ07(ID)  Q:HMPI'<+HMPMAX
"RTN","HMPDJ0",211,0)
IMQ ; end
"RTN","HMPDJ0",212,0)
 K ^TMP($J,"RAE1")
"RTN","HMPDJ0",213,0)
 Q
"RTN","HMPDJ0",214,0)
 ;
"RTN","HMPDJ0",215,0)
APPOINTM ; -- Scheduling/Appointment Mgt
"RTN","HMPDJ0",216,0)
 N HMPX,HMPNUM,HMPDT,X,HMPA,ID
"RTN","HMPDJ0",217,0)
 S HMPX(1)=HMPSTART_";"_HMPSTOP,HMPX(4)=DFN,ID=$G(HMPID)
"RTN","HMPDJ0",218,0)
 S HMPX("FLDS")="1;2;3;6;9;10;11;13;22",HMPX("SORT")="P"  ;DE4469 - PB - Apr 26, 2016 added field 22 to the list of fields to be pulled.
"RTN","HMPDJ0",219,0)
 I $L(ID) G:$E(ID)="H" DGS^HMPDJ04 D  Q
"RTN","HMPDJ0",220,0)
 . S HMPDT=$P(ID,";",2),HMPX(1)=$P(ID,";",2)_";"_$P(ID,";",2)
"RTN","HMPDJ0",221,0)
 . S HMPX(2)=$P(ID,";",3)
"RTN","HMPDJ0",222,0)
 . S HMPNUM=$$SDAPI^SDAMA301(.HMPX)
"RTN","HMPDJ0",223,0)
 . D:HMPNUM>0 SDAM1^HMPDJ04
"RTN","HMPDJ0",224,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",225,0)
 ; appointments
"RTN","HMPDJ0",226,0)
 S HMPX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","HMPDJ0",227,0)
 S HMPNUM=$$SDAPI^SDAMA301(.HMPX),HMPDT=0
"RTN","HMPDJ0",228,0)
 F  S HMPDT=$O(^TMP($J,"SDAMA301",DFN,HMPDT)) Q:HMPDT<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",229,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,HMPDT)),U,3)
"RTN","HMPDJ0",230,0)
 . ;I HMPDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","HMPDJ0",231,0)
 . D SDAM1^HMPDJ04
"RTN","HMPDJ0",232,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDJ0",233,0)
 Q
"RTN","HMPDJ0",234,0)
 ;
"RTN","HMPDJ0",235,0)
SURGERY ; -- Surgery
"RTN","HMPDJ0",236,0)
 I $G(HMPID) D SR1^HMPDJ07(HMPID) Q
"RTN","HMPDJ0",237,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","HMPDJ0",238,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDJ0",239,0)
 N HMPN,HMPY,ID D LIST^SROESTV(.HMPY,DFN,HMPSTART,HMPSTOP,HMPMAX,1)
"RTN","HMPDJ0",240,0)
 S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D
"RTN","HMPDJ0",241,0)
 . S ID=+$G(@HMPY@(HMPN)) D:ID SR1^HMPDJ07(ID)
"RTN","HMPDJ0",242,0)
 K @HMPY
"RTN","HMPDJ0",243,0)
 Q
"RTN","HMPDJ0",244,0)
 ;
"RTN","HMPDJ0",245,0)
DOCUMENT ; -- Text Integration Utilities
"RTN","HMPDJ0",246,0)
 N HMPC,CLS,HMPS,CTXT,HMPY,HMPN,HMPX,ID
"RTN","HMPDJ0",247,0)
 I $L($G(HMPID)) D TIU1^HMPDJ08(HMPID) Q
"RTN","HMPDJ0",248,0)
 N CLASS,SUBCLASS,STATUS
"RTN","HMPDJ0",249,0)
 D SETUP^HMPDJ08 ;define search criteria
"RTN","HMPDJ0",250,0)
 F HMPC=1:1:$L(CLASS,U) S CLS=$P(CLASS,U,HMPC) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",251,0)
 . I CLS="CP" D CP^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",252,0)
 . I CLS="RA" D RA^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",253,0)
 . I CLS="LR" D LR^HMPDJ08A(DFN,HMPSTART,HMPSTOP,HMPMAX) Q
"RTN","HMPDJ0",254,0)
 . ; TIU document classes, by sig status
"RTN","HMPDJ0",255,0)
 . F HMPS=1:1:$L(STATUS,U) S CTXT=$P(STATUS,U,HMPS) D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",256,0)
 .. ;I $L($G(HMPBATCH)) D GET^TIUHMP(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ; <<<< 12.3
"RTN","HMPDJ0",257,0)
 .. I $L($G(HMPBATCH)) D GET^TIUVPR(.HMPY,DFN,CLS,HMPSTART,HMPSTOP) I 1 ;  <<<< 12.3
"RTN","HMPDJ0",258,0)
 .. E  D CONTEXT^TIUSRVLO(.HMPY,CLS,CTXT,DFN,HMPSTART,HMPSTOP,,HMPMAX,,1)
"RTN","HMPDJ0",259,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",260,0)
 ... S HMPX=$G(@HMPY@(HMPN)) ;Q:'$$MATCH^HMPDJ08(HMPX,CTXT)
"RTN","HMPDJ0",261,0)
 ... Q:$D(^TMP("HMPD",$J,+HMPX))  ;already included
"RTN","HMPDJ0",262,0)
 ... D EN1^HMPDJ08(HMPX,CLS)
"RTN","HMPDJ0",263,0)
 .. K @HMPY
"RTN","HMPDJ0",264,0)
 Q
"RTN","HMPDJ0",265,0)
 ;
"RTN","HMPDJ0",266,0)
VISIT ; -- Visits
"RTN","HMPDJ0",267,0)
 I $L($G(HMPID)) D VSIT1^HMPDJ04(HMPID) Q
"RTN","HMPDJ0",268,0)
 N BEG,END,HMPADMIT,HMPDEMOG,HMPIDT,ID  ;DE2818, added HMPDEMOG
"RTN","HMPDJ0",269,0)
 D TOP^HMPXGDPT("HMPDEMOG",DFN,.105,"I")  ;DE2818, (.105) CURRENT ADMISSION
"RTN","HMPDJ0",270,0)
 S HMPADMIT=+$G(HMPDEMOG(2,DFN,.105,"I")) ;DE2818
"RTN","HMPDJ0",271,0)
 S BEG=HMPSTART,END=HMPSTOP D IDT^HMPDVSIT ;invert dates
"RTN","HMPDJ0",272,0)
 ;DE2818 ***ICR 2028 needed for ^AUPNVSIT references below***
"RTN","HMPDJ0",273,0)
 S HMPIDT=BEG F  S HMPIDT=$O(^AUPNVSIT("AA",DFN,HMPIDT)) Q:HMPIDT<1!(HMPIDT>END)  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",274,0)
 . S ID=0 F  S ID=$O(^AUPNVSIT("AA",DFN,HMPIDT,ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",275,0)
 ; kill HMPADMIT in VSIT1 if adm is included, but add unless filtered
"RTN","HMPDJ0",276,0)
 I $G(HMPADMIT),HMPMAX'<9999,HMPSTART'>1410102 D VSIT1^HMPDJ04("H"_HMPADMIT)
"RTN","HMPDJ0",277,0)
 Q
"RTN","HMPDJ0",278,0)
 ;I HMPSTOP,HMPSTOP'["." S END=HMPSTOP_".24" ;assume end of day
"RTN","HMPDJ0",279,0)
 ;S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<HMPSTART  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ0",280,0)
 ;. S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDJ0",281,0)
 ;.. S ID=0 F  S ID=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",ID)) Q:ID<1  D VSIT1^HMPDJ04(ID)
"RTN","HMPDJ0",282,0)
 ;
"RTN","HMPDJ0",283,0)
HMP ; -- HMP Patient Objects
"RTN","HMPDJ0",284,0)
 D HMP^HMPDJ02($G(TYPE))
"RTN","HMPDJ0",285,0)
 Q
"RTN","HMPDJ0",286,0)
 ;
"RTN","HMPDJ0",287,0)
MH ; -- Mental Health
"RTN","HMPDJ0",288,0)
 I $L($T(MH^HMPDJ09M)) D MH^HMPDJ09M
"RTN","HMPDJ0",289,0)
 Q
"RTN","HMPDJ0",290,0)
 ;
"RTN","HMPDJ0",291,0)
ERRQ ; -- Quit for error handling
"RTN","HMPDJ0",292,0)
 Q
"RTN","HMPDJ0",293,0)
 ;
"RTN","HMPDJ0",294,0)
 ;new subroutine for DE2818
"RTN","HMPDJ0",295,0)
ORDINFO(ORRSLT,ORIEN) ; ORDER file (#100), ORRSLT passed by reference
"RTN","HMPDJ0",296,0)
 ; all data returned in internal format
"RTN","HMPDJ0",297,0)
 ;
"RTN","HMPDJ0",298,0)
 ;   fields on ^OR(100,D0,0)
"RTN","HMPDJ0",299,0)
 ;(#.01) ORDER #
"RTN","HMPDJ0",300,0)
 ;(#.02) OBJECT OF ORDER
"RTN","HMPDJ0",301,0)
 ;
"RTN","HMPDJ0",302,0)
 ;   fields on ^OR(100,D0,3)
"RTN","HMPDJ0",303,0)
 ;(#5) STATUS
"RTN","HMPDJ0",304,0)
 ;(#7) ITEM ORDERED
"RTN","HMPDJ0",305,0)
 ;(#8) VEILED
"RTN","HMPDJ0",306,0)
 ;(#8.1) TYPE
"RTN","HMPDJ0",307,0)
 ;(#9) REPLACED ORDER
"RTN","HMPDJ0",308,0)
 ;(#9.1) REPLACEMENT ORDER
"RTN","HMPDJ0",309,0)
 ;(#30) CURRENT ACTION
"RTN","HMPDJ0",310,0)
 ;(#31) DATE OF LAST ACTIVITY
"RTN","HMPDJ0",311,0)
 ;(#32) GRACE DAYS BEFORE PURGE
"RTN","HMPDJ0",312,0)
 ;(#36) PARENT
"RTN","HMPDJ0",313,0)
 ;(#35) ALERT ON RESULTS
"RTN","HMPDJ0",314,0)
 ;
"RTN","HMPDJ0",315,0)
 ;   field on ^OR(100,D0,4)
"RTN","HMPDJ0",316,0)
 ;(#33) PACKAGE REFERENCE
"RTN","HMPDJ0",317,0)
 ;
"RTN","HMPDJ0",318,0)
 Q:'($G(ORIEN)>0)  ; IEN required
"RTN","HMPDJ0",319,0)
 D TOP^HMPXGORD("ORRSLT",ORIEN,".01;.02;5;7;8;8.1;9;9.1;30;31;32;33;35;36","I")
"RTN","HMPDJ0",320,0)
 ;
"RTN","HMPDJ0",321,0)
 Q
"RTN","HMPDJ0",322,0)
 ;end DE2818
"RTN","HMPDJ0",323,0)
 ;
"RTN","HMPDJ00")
0^42^B168303708^B165368982
"RTN","HMPDJ00",1,0)
HMPDJ00 ;SLC/MKB,ASMR/RRB,MBS - Patient demographics;Aug 29, 2016 20:06:27
"RTN","HMPDJ00",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJ00",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ00",4,0)
 ;
"RTN","HMPDJ00",5,0)
 ; External References          DBIA#
"RTN","HMPDJ00",6,0)
 ; -------------------          -----
"RTN","HMPDJ00",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDJ00",8,0)
 ; ^DPT                         10035
"RTN","HMPDJ00",9,0)
 ; DGACT                         2248
"RTN","HMPDJ00",10,0)
 ; DGCV                          4156
"RTN","HMPDJ00",11,0)
 ; DGMSTAPI                      2716
"RTN","HMPDJ00",12,0)
 ; DGNTAPI                       3457
"RTN","HMPDJ00",13,0)
 ; DGPFAPI                       3860
"RTN","HMPDJ00",14,0)
 ; DGRPDB                        4807
"RTN","HMPDJ00",15,0)
 ; DIQ                           2056
"RTN","HMPDJ00",16,0)
 ; IBBAPI                        4419
"RTN","HMPDJ00",17,0)
 ; MPIF001                       2701
"RTN","HMPDJ00",18,0)
 ; SDUTL3                        1252
"RTN","HMPDJ00",19,0)
 ; VADPT                        10061
"RTN","HMPDJ00",20,0)
 ; VAFCTFU1                      2990
"RTN","HMPDJ00",21,0)
 ; VASITE                       10112
"RTN","HMPDJ00",22,0)
 ; XUAF4                         2171
"RTN","HMPDJ00",23,0)
 ; SECURITY/SENSITIVE RECORD ACC 3027
"RTN","HMPDJ00",24,0)
 ;
"RTN","HMPDJ00",25,0)
 ; All tags expect DFN
"RTN","HMPDJ00",26,0)
 ; [HMPID, HMPSTART, HMPSTOP, HMPMAX, HMPTEXT not currently used here]
"RTN","HMPDJ00",27,0)
 Q
"RTN","HMPDJ00",28,0)
 ;
"RTN","HMPDJ00",29,0)
DPT1 ; -- Demographics
"RTN","HMPDJ00",30,0)
 N PAT D DPT1OD(.PAT)
"RTN","HMPDJ00",31,0)
 I $D(PAT)>9 D ADD^HMPDJ("PAT")
"RTN","HMPDJ00",32,0)
 Q
"RTN","HMPDJ00",33,0)
 ;
"RTN","HMPDJ00",34,0)
DPT1OD(PAT) ; -- Demographics (data array only)
"RTN","HMPDJ00",35,0)
 N SYS S SYS=$$SITE^VASITE
"RTN","HMPDJ00",36,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ00",37,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ00",38,0)
 S ERRMSG="A problem occurred building the patient "_DFN_" demographic extract."
"RTN","HMPDJ00",39,0)
 D DEM,SVC,PRF,ATC,SUPP,ALIAS,FAC,PC,INPT,INS
"RTN","HMPDJ00",40,0)
 D KVAR^VADPT
"RTN","HMPDJ00",41,0)
 S PAT("stampTime")=$S($G(HMPSTMP)]"":HMPSTMP,1:$$EN^HMPSTMP("NOW")) ;US6734
"RTN","HMPDJ00",42,0)
 S PAT("lastUpdateTime")=PAT("stampTime")
"RTN","HMPDJ00",43,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ00",44,0)
 I $G(HMPMETA) D ADD^HMPMETA("patient",PAT("uid"),PAT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ00",45,0)
 Q
"RTN","HMPDJ00",46,0)
 ;
"RTN","HMPDJ00",47,0)
LKUP ; patient lookup data
"RTN","HMPDJ00",48,0)
 ; expects HMPSYS,DFN
"RTN","HMPDJ00",49,0)
 N X,X0
"RTN","HMPDJ00",50,0)
 S X0=$G(^DPT(DFN,0)),X=$P(X0,U) I X="" D LOGDPT^HMPLOG(DFN) Q  ;DE4496, 19 August 2016, invalid DFN passed in DE4983
"RTN","HMPDJ00",51,0)
 S PAT("fullName")=X
"RTN","HMPDJ00",52,0)
 S PAT("familyName")=$P(X,",")
"RTN","HMPDJ00",53,0)
 S PAT("givenNames")=$P(X,",",2,99)
"RTN","HMPDJ00",54,0)
 S X=$P(X0,U,2)
"RTN","HMPDJ00",55,0)
 S PAT("genderCode")="urn:va:pat-gender:"_X
"RTN","HMPDJ00",56,0)
 S PAT("genderName")=$$NAME(X,"gender")
"RTN","HMPDJ00",57,0)
 S PAT("localId")=DFN
"RTN","HMPDJ00",58,0)
 S PAT("pid")=HMPSYS_";"_DFN
"RTN","HMPDJ00",59,0)
 S PAT("uid")=$$SETUID^HMPUTILS("pt-select",DFN,DFN)
"RTN","HMPDJ00",60,0)
 S X=$$GETICN^MPIF001(DFN)
"RTN","HMPDJ00",61,0)
 S:X>0 PAT("icn")=X
"RTN","HMPDJ00",62,0)
 S PAT("ssn")=$P(X0,U,9)
"RTN","HMPDJ00",63,0)
 S PAT("birthDate")=$$JSONDT^HMPUTILS($P(X0,U,3))
"RTN","HMPDJ00",64,0)
 S X=$P($G(^DPT(DFN,.35)),U)
"RTN","HMPDJ00",65,0)
 S:X PAT("deceased")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",66,0)
 D PTSEC^DGSEC4(.LST,DFN)  ; DBIA 3027 DE2818 - PB 30 Oct 2015 changed to use a global reference covered by an active ICR
"RTN","HMPDJ00",67,0)
 S PAT("sensitive")=$$BOOL(LST(1))
"RTN","HMPDJ00",68,0)
 ;US6734 - pre-compile metastamp for OPD
"RTN","HMPDJ00",69,0)
 I $G(HMPMETA),$P($G(HMPFADOM),"#")="pt-select" D ADD^HMPMETA("pt-select",PAT("uid"),$G(HMPSTMP)) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ00",70,0)
 I $G(HMPSTMP)]"" S PAT("stampTime")=HMPSTMP ; US6734 - set stamptime as time of subscription
"RTN","HMPDJ00",71,0)
 E  S PAT("stampTime")=$$EN^HMPSTMP("NOW") ; DE2616 - must add stampTime to receive OPD freshness update from ADHOC^HMPUTIL1
"RTN","HMPDJ00",72,0)
 I $D(PAT)>9 D ADD^HMPDJ("PAT")
"RTN","HMPDJ00",73,0)
 Q
"RTN","HMPDJ00",74,0)
 ;
"RTN","HMPDJ00",75,0)
DEM ;-demographic data
"RTN","HMPDJ00",76,0)
 N VADM,VA,VAERR,X,I
"RTN","HMPDJ00",77,0)
 S PAT("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJ00",78,0)
 S X=$$GETICN^MPIF001(DFN) S:X>1 PAT("icn")=X
"RTN","HMPDJ00",79,0)
 D DEM^VADPT S X=VADM(1),PAT("fullName")=X
"RTN","HMPDJ00",80,0)
 S PAT("familyName")=$P(X,","),PAT("givenNames")=$P(X,",",2,99)
"RTN","HMPDJ00",81,0)
 S PAT("ssn")=$P(VADM(2),U),PAT("localId")=DFN
"RTN","HMPDJ00",82,0)
 S PAT("uid")=$$SETUID^HMPUTILS("patient",DFN,DFN)
"RTN","HMPDJ00",83,0)
 S:$D(VA("BID")) PAT("briefId")=$E(X)_VA("BID")
"RTN","HMPDJ00",84,0)
 S X=+$P($P(VADM(3),U),"."),PAT("birthDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",85,0)
 S X=$P(VADM(5),U) S:X="" X="UNK"
"RTN","HMPDJ00",86,0)
 S PAT("genderCode")="urn:va:pat-gender:"_X,PAT("genderName")=$$NAME(X,"gender")
"RTN","HMPDJ00",87,0)
 S X=+$P($P(VADM(6),U),".") S:X PAT("deceased")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",88,0)
 D PTSEC^DGSEC4(.LST,DFN)  ; DBIA 3027 DE2818 - PB 30 Oct 2015 changed to use a global reference covered by an active ICR
"RTN","HMPDJ00",89,0)
 S PAT("sensitive")=$$BOOL(LST(1))
"RTN","HMPDJ00",90,0)
 S X=+VADM(9) S:X PAT("religionCode")="urn:va:pat-religion:"_X,PAT("religionName")=$$NAME(X,"religion")
"RTN","HMPDJ00",91,0)
 S X=$P(VADM(10),U,2) I $L(X) D
"RTN","HMPDJ00",92,0)
 . S X=$E(X),X=$S(X="S":"L",X="N":"S",1:X)
"RTN","HMPDJ00",93,0)
 . S PAT("maritalStatusCode")="urn:va:pat-maritalStatus:"_X
"RTN","HMPDJ00",94,0)
 . S PAT("maritalStatusName")=$$NAME(X,"maritalStatus")
"RTN","HMPDJ00",95,0)
 I VADM(11) S I=0 F  S I=$O(VADM(11,I)) Q:I<1  D
"RTN","HMPDJ00",96,0)
 . S X=+VADM(11,I)
"RTN","HMPDJ00",97,0)
 . S PAT("ethnicity",X,"code")=$$GET1^DIQ(2.06,X_","_DFN_",",".01:3")
"RTN","HMPDJ00",98,0)
 I VADM(12) S I=0 F  S I=$O(VADM(12,I)) Q:I<1  D
"RTN","HMPDJ00",99,0)
 . S X=+VADM(12,I)
"RTN","HMPDJ00",100,0)
 . S PAT("race",X,"code")=$$GET1^DIQ(2.02,X_","_DFN_",",".01:3")
"RTN","HMPDJ00",101,0)
 Q
"RTN","HMPDJ00",102,0)
 ;
"RTN","HMPDJ00",103,0)
SVC ;-service data
"RTN","HMPDJ00",104,0)
 N VAEL,VASV,VAERR,X,Y,I,P,AO,IR,PGF,HNC,MST,CV,HMPSC
"RTN","HMPDJ00",105,0)
 D 7^VADPT
"RTN","HMPDJ00",106,0)
 S PAT("veteran")=$$BOOL(VAEL(4))
"RTN","HMPDJ00",107,0)
 S PAT("serviceConnected")=$$BOOL(+VAEL(3)) I VAEL(3) D
"RTN","HMPDJ00",108,0)
 . S PAT("scPercent")=+$P(VAEL(3),U,2)
"RTN","HMPDJ00",109,0)
 . D GETS^DIQ(2,DFN_",",".3731*",,"HMPSC")
"RTN","HMPDJ00",110,0)
 . S I="" F  S I=$O(HMPSC(2.05,I)) Q:I=""  D
"RTN","HMPDJ00",111,0)
 .. S PAT("scCondition",+I,"name")=HMPSC(2.05,I,.01)
"RTN","HMPDJ00",112,0)
 .. S PAT("scCondition",+I,"scPercent")=HMPSC(2.05,I,.02)
"RTN","HMPDJ00",113,0)
 S X=+$G(^DPT(DFN,"LR")) S:X PAT("lrdfn")=X
"RTN","HMPDJ00",114,0)
 I VAEL(9)]"" S PAT("meanStatus")=$P(VAEL(9),U,2)
"RTN","HMPDJ00",115,0)
 ;
"RTN","HMPDJ00",116,0)
 ; exposures
"RTN","HMPDJ00",117,0)
 ;Agent Orange
"RTN","HMPDJ00",118,0)
 S EXPVAL=$S(VASV(2):"Yes",VASV(2)=0:"No",1:"Unknown"),PAT("exposure",1,"uid")="urn:va:agent-orange:"_$E(EXPVAL),PAT("exposure",1,"name")=EXPVAL
"RTN","HMPDJ00",119,0)
 ;Ionizing Radiation
"RTN","HMPDJ00",120,0)
 S EXPVAL=$S(VASV(3):"Yes",VASV(3)=0:"No",1:"Unknown"),PAT("exposure",2,"uid")="urn:va:ionizing-radiation:"_$E(EXPVAL),PAT("exposure",2,"name")=EXPVAL
"RTN","HMPDJ00",121,0)
 ;SW Asia/Persian Gulf
"RTN","HMPDJ00",122,0)
 ;DE3917 - CPRS does not use the OIF/OEF fields to determine PGF/SW Asia exposure, but, instead, per VADPT^GMPLX1
"RTN","HMPDJ00",123,0)
 ;(called by ORQQPL INIT PT), directly gets the data from the #.32201 (PERSIAN GULF SERVICE?) field in the PATIENT file.
"RTN","HMPDJ00",124,0)
 S EXPVAL=$$GET1^DIQ(2,DFN_",",".32201","E") S:EXPVAL="" EXPVAL="Unknown"
"RTN","HMPDJ00",125,0)
 S PAT("exposure",3,"uid")="urn:va:sw-asia:"_$E(EXPVAL),PAT("exposure",3,"name")=EXPVAL
"RTN","HMPDJ00",126,0)
 ;Head-Neck Cancer
"RTN","HMPDJ00",127,0)
 S X=$$GETCUR^DGNTAPI(DFN,"HNC"),X=+($G(HNC("STAT"))),X=$S(X=4:1,X=5:1,X=1:0,X=6:0,1:"")
"RTN","HMPDJ00",128,0)
 S EXPVAL=$S(X:"Yes",X=0:"No",1:"Unknown"),PAT("exposure",4,"uid")="urn:va:head-neck-cancer:"_$E(EXPVAL),PAT("exposure",4,"name")=EXPVAL
"RTN","HMPDJ00",129,0)
 ;Military Sexual Trauma
"RTN","HMPDJ00",130,0)
 S X=$P($$GETSTAT^DGMSTAPI(DFN),U,2),EXPVAL=$S(X="Y":"Yes",X="N":"No",1:"Unknown")
"RTN","HMPDJ00",131,0)
 S PAT("exposure",5,"uid")="urn:va:mst:"_$E(EXPVAL),PAT("exposure",5,"name")=EXPVAL
"RTN","HMPDJ00",132,0)
 ;Combat Vet
"RTN","HMPDJ00",133,0)
 S X=$$CVEDT^DGCV(DFN),X=$S(+X<0:"",+X=0:0,$P(X,U,3):1,1:0)
"RTN","HMPDJ00",134,0)
 S EXPVAL=$S(X:"Yes",X=0:"No",1:"Unknown"),PAT("exposure",6,"uid")="urn:va:combat-vet:"_$E(EXPVAL),PAT("exposure",6,"name")=EXPVAL
"RTN","HMPDJ00",135,0)
 ;Shipboard Hazard And Defense
"RTN","HMPDJ00",136,0)
 S EXPVAL=$S(VASV(14):"Yes",VASV(14)=0:"No",1:"Unknown"),PAT("exposure",7,"uid")="urn:va:shipboard-hazard:"_$E(EXPVAL),PAT("exposure",7,"name")=EXPVAL
"RTN","HMPDJ00",137,0)
 ;
"RTN","HMPDJ00",138,0)
 ; rated disabilities [DGRPDB]
"RTN","HMPDJ00",139,0)
 N HMPDIS,DIS,NM,DX
"RTN","HMPDJ00",140,0)
 D RDIS^DGRPDB(DFN,.HMPDIS)
"RTN","HMPDJ00",141,0)
 S I=0 F  S I=$O(HMPDIS(I)) Q:I<1  D
"RTN","HMPDJ00",142,0)
 . S DIS=HMPDIS(I)
"RTN","HMPDJ00",143,0)
 . S NM=$$GET1^DIQ(31,+DIS_",",.01),DX=$$GET1^DIQ(31,+DIS_",",2)
"RTN","HMPDJ00",144,0)
 . S PAT("disability",+DX,"name")=NM
"RTN","HMPDJ00",145,0)
 . S PAT("disability",+DX,"disPercent")=$P(DIS,U,2)
"RTN","HMPDJ00",146,0)
 . S PAT("disability",+DX,"serviceConnected")=$$BOOL($P(DIS,U,3))
"RTN","HMPDJ00",147,0)
 Q
"RTN","HMPDJ00",148,0)
 ;
"RTN","HMPDJ00",149,0)
PRF ;-patient record flags
"RTN","HMPDJ00",150,0)
 N HMPF,I,N,X
"RTN","HMPDJ00",151,0)
 S X=$$GETACT^DGPFAPI(DFN,"HMPF")
"RTN","HMPDJ00",152,0)
 S I=0 F  S I=$O(HMPF(I)) Q:I<1  D
"RTN","HMPDJ00",153,0)
 . S PAT("patientRecordFlag",I,"assignmentStatus")="Active"
"RTN","HMPDJ00",154,0)
 . S PAT("patientRecordFlag",I,"assignTS")=$$JSONDT^HMPUTILS($P($G(HMPF(I,"ASSIGNDT")),U))
"RTN","HMPDJ00",155,0)
 . S PAT("patientRecordFlag",I,"approved")=$P($G(HMPF(I,"APPRVBY")),U,2)
"RTN","HMPDJ00",156,0)
 . S PAT("patientRecordFlag",I,"nextReviewDT")=$$JSONDT^HMPUTILS($P($G(HMPF(I,"REVIEWDT")),U))
"RTN","HMPDJ00",157,0)
 . S PAT("patientRecordFlag",I,"name")=$P($G(HMPF(I,"FLAG")),U,2)
"RTN","HMPDJ00",158,0)
 . S PAT("patientRecordFlag",I,"type")=$P($G(HMPF(I,"FLAGTYPE")),U,2)
"RTN","HMPDJ00",159,0)
 . S PAT("patientRecordFlag",I,"category")=$P($G(HMPF(I,"CATEGORY")),U,2)
"RTN","HMPDJ00",160,0)
 . S PAT("patientRecordFlag",I,"ownerSite")=$P($G(HMPF(I,"OWNER")),U,2)
"RTN","HMPDJ00",161,0)
 . S PAT("patientRecordFlag",I,"originatingSite")=$P($G(HMPF(I,"ORIGSITE")),U,2)
"RTN","HMPDJ00",162,0)
 . S N=1,X=$G(HMPF(I,"NARR",1,0))
"RTN","HMPDJ00",163,0)
 . F  S N=$O(HMPF(I,"NARR",N)) Q:N<1  S X=X_$C(13,10)_$G(HMPF(I,"NARR",N,0))
"RTN","HMPDJ00",164,0)
 . S PAT("patientRecordFlag",I,"text")=X
"RTN","HMPDJ00",165,0)
 S X=$$CWAD^ORQPT2(DFN)
"RTN","HMPDJ00",166,0)
 I X]"" S PAT("cwadf")=X
"RTN","HMPDJ00",167,0)
 I $D(PAT("patientRecordFlag")) S PAT("cwadf")=$G(PAT("cwadf"))_"F"
"RTN","HMPDJ00",168,0)
 Q
"RTN","HMPDJ00",169,0)
 ;
"RTN","HMPDJ00",170,0)
ATC ;-address & telecom
"RTN","HMPDJ00",171,0)
 N VAPA,CNT,X,I,P,NM
"RTN","HMPDJ00",172,0)
 ; VAPA("P")="" ;permanent address
"RTN","HMPDJ00",173,0)
 D ADD^VADPT S CNT=0 I $$VAPA(1,5) D
"RTN","HMPDJ00",174,0)
 . S CNT=CNT+1
"RTN","HMPDJ00",175,0)
 . D ADD(1,2,3,4,5,11,9,10)
"RTN","HMPDJ00",176,0)
 . S PAT("address",CNT,"use")=$S($L(VAPA(9)):"TMP",1:"H")
"RTN","HMPDJ00",177,0)
 I VAPA(12) D   ;confidential address
"RTN","HMPDJ00",178,0)
 . S CNT=CNT+1
"RTN","HMPDJ00",179,0)
 . D ADD(13,14,15,16,17,18,20,21)
"RTN","HMPDJ00",180,0)
 . S PAT("address",CNT,"use")="CONF"
"RTN","HMPDJ00",181,0)
 . S I=0 F  S I=$O(VAPA(22,I)) Q:I=""  S X=VAPA(22,I) D
"RTN","HMPDJ00",182,0)
 .. S PAT("address",CNT,"category",I,"name")=$P(X,U,2)
"RTN","HMPDJ00",183,0)
 .. S PAT("address",CNT,"category",I,"status")=$$BOOL($P(X,U,3))
"RTN","HMPDJ00",184,0)
 ; 
"RTN","HMPDJ00",185,0)
 ; X=home^cell^work phones
"RTN","HMPDJ00",186,0)
 S X=$$FORMAT(VAPA(8))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.134))_U_$$FORMAT($$GET1^DIQ(2,DFN_",",.132))
"RTN","HMPDJ00",187,0)
 S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","HMPDJ00",188,0)
 . S I=$P(NM,U,P),PAT("telecom",P,"use")=I
"RTN","HMPDJ00",189,0)
 . S PAT("telecom",P,"value")=$P(X,U,P)
"RTN","HMPDJ00",190,0)
 S X=$P($G(^DPT(DFN,.13)),U,3) S:X'="" PAT("email")=X
"RTN","HMPDJ00",191,0)
 I +$P($G(^DPT(DFN,.11)),U,16)>0 S PAT("badAddress")=$$GET1^DIQ(2,DFN_",",.121)
"RTN","HMPDJ00",192,0)
 Q
"RTN","HMPDJ00",193,0)
 ;
"RTN","HMPDJ00",194,0)
ADD(LINE1,LINE2,LINE3,CITY,STATE,ZIP,START,STOP) ; -- address set
"RTN","HMPDJ00",195,0)
 S:$L(VAPA(LINE1)) PAT("address",CNT,"line1")=VAPA(LINE1)
"RTN","HMPDJ00",196,0)
 S:$L(VAPA(LINE2)) PAT("address",CNT,"line2")=VAPA(LINE2)
"RTN","HMPDJ00",197,0)
 S:$L(VAPA(LINE3)) PAT("address",CNT,"line3")=VAPA(LINE3)
"RTN","HMPDJ00",198,0)
 S:$L(VAPA(CITY)) PAT("address",CNT,"city")=VAPA(CITY)
"RTN","HMPDJ00",199,0)
 S X=$P(VAPA(STATE),U) S:X PAT("address",CNT,"state")=$$GET1^DIQ(5,+X_",",1)
"RTN","HMPDJ00",200,0)
 S X=$P(VAPA(ZIP),U,2) S:$L(X) PAT("address",CNT,"zip")=X
"RTN","HMPDJ00",201,0)
 S X=+VAPA(START) S:X PAT("address",CNT,"start")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",202,0)
 S X=+VAPA(STOP) S:X PAT("address",CNT,"end")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ00",203,0)
 Q
"RTN","HMPDJ00",204,0)
 ;
"RTN","HMPDJ00",205,0)
VAPA(BEG,END) ; -- VAPA nodes have data?
"RTN","HMPDJ00",206,0)
 N I,Y S Y=0
"RTN","HMPDJ00",207,0)
 F I=BEG:1:END I $L($G(VAPA(I))) S Y=1 Q
"RTN","HMPDJ00",208,0)
 Q Y
"RTN","HMPDJ00",209,0)
 ;
"RTN","HMPDJ00",210,0)
SUPP ;-support contacts
"RTN","HMPDJ00",211,0)
 N VAOA,A,I,X,TYPE,S
"RTN","HMPDJ00",212,0)
 S S=0 F A="",1 K VAOA D
"RTN","HMPDJ00",213,0)
 . S:A VAOA("A")=A D OAD^VADPT Q:'$L($G(VAOA(9)))
"RTN","HMPDJ00",214,0)
 . S S=S+1,TYPE=$S(A=1:"ECON^Emergency Contact",1:"NOK^Next of Kin")
"RTN","HMPDJ00",215,0)
 . S PAT("contact",S,"typeCode")="urn:va:pat-contact:"_$P(TYPE,U)
"RTN","HMPDJ00",216,0)
 . S PAT("contact",S,"typeName")=$P(TYPE,U,2)
"RTN","HMPDJ00",217,0)
 . S:$L(VAOA(9)) PAT("contact",S,"name")=VAOA(9)
"RTN","HMPDJ00",218,0)
 . S:$L(VAOA(10)) PAT("contact",S,"relationship")=VAOA(10)
"RTN","HMPDJ00",219,0)
 . S:$L(VAOA(1)) PAT("contact",S,"address",1,"line1")=VAOA(1)
"RTN","HMPDJ00",220,0)
 . S:$L(VAOA(2)) PAT("contact",S,"address",1,"line2")=VAOA(2)
"RTN","HMPDJ00",221,0)
 . S:$L(VAOA(3)) PAT("contact",S,"address",1,"line3")=VAOA(3)
"RTN","HMPDJ00",222,0)
 . S:$L(VAOA(4)) PAT("contact",S,"address",1,"city")=VAOA(4)
"RTN","HMPDJ00",223,0)
 . S X=$P(VAOA(5),U) S:X PAT("contact",S,"address",1,"state")=$$GET1^DIQ(5,+X_",",1)
"RTN","HMPDJ00",224,0)
 . S X=$P(VAOA(11),U,2) S:$L(X) PAT("contact",S,"address",1,"zip")=X
"RTN","HMPDJ00",225,0)
 . S I=$S(A=1:.33011,1:.21011),X=$$FORMAT(VAOA(8))_U_U_$$FORMAT($$GET1^DIQ(2,DFN_",",I))
"RTN","HMPDJ00",226,0)
 . ; X=home^cell^work phones
"RTN","HMPDJ00",227,0)
 . S NM="H^MC^WP" F P=1:1:3 I $L($P(X,U,P)) D
"RTN","HMPDJ00",228,0)
 .. S I=$P(NM,U,P),PAT("contact",S,"telecom",P,"use")=I
"RTN","HMPDJ00",229,0)
 .. S PAT("contact",S,"telecom",P,"value")=$P(X,U,P)
"RTN","HMPDJ00",230,0)
 Q
"RTN","HMPDJ00",231,0)
 ;
"RTN","HMPDJ00",232,0)
ALIAS ;-other names used
"RTN","HMPDJ00",233,0)
 N I,X
"RTN","HMPDJ00",234,0)
 S I=0 F  S I=$O(^DPT(DFN,.01,I)) Q:I<1  S X=$G(^(I,0)) D
"RTN","HMPDJ00",235,0)
 . S PAT("alias",I,"fullName")=$P(X,U)
"RTN","HMPDJ00",236,0)
 Q
"RTN","HMPDJ00",237,0)
 ;
"RTN","HMPDJ00",238,0)
FAC ;-treating facilities [see FACLIST^ORWCIRN]
"RTN","HMPDJ00",239,0)
 N IFN S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDJ00",240,0)
 N HMPY,HOME,LAST,I,X,IEN,VASITE
"RTN","HMPDJ00",241,0)
 S X=$$ALL^VASITE ;VASITE(stn#)=stn# for all local
"RTN","HMPDJ00",242,0)
 I $L($T(TFL^VAFCTFU1)) D TFL^VAFCTFU1(.HMPY,DFN)
"RTN","HMPDJ00",243,0)
 S HOME=+$P($G(^DPT(DFN,"MPI")),U,3) ;home facility
"RTN","HMPDJ00",244,0)
 I $P($G(HMPY(1)),U)<0 D  ;not setup
"RTN","HMPDJ00",245,0)
 . S X=$O(^AUPNVSIT("AA",DFN,0)),LAST=$S(X:9999999-$P(X,"."),1:"")
"RTN","HMPDJ00",246,0)
 . S X=$$SITE^VASITE
"RTN","HMPDJ00",247,0)
 . S HMPY(1)=$P(X,U,3)_U_$P(X,U,2)_U_LAST_U_$$GET1^DIQ(4,+X_",",60)
"RTN","HMPDJ00",248,0)
 S I=0 F  S I=$O(HMPY(I)) Q:I<1  D
"RTN","HMPDJ00",249,0)
 . S X=HMPY(I) Q:$P(X,U)=""  ;unknown
"RTN","HMPDJ00",250,0)
 . S IEN=+$$IEN^XUAF4($P(X,U))
"RTN","HMPDJ00",251,0)
 . I +X=776!(+X=200) S $P(X,U,2)="DEPT. OF DEFENSE"
"RTN","HMPDJ00",252,0)
 . S PAT("facility",I,"code")=$P(X,U)    ;stn#
"RTN","HMPDJ00",253,0)
 . S PAT("facility",I,"name")=$P(X,U,2)  ;name
"RTN","HMPDJ00",254,0)
 . S:IEN=HOME PAT("facility",I,"homeSite")="true"
"RTN","HMPDJ00",255,0)
 . S:$L($P(X,U,3)) PAT("facility",I,"latestDate")=$$JSONDT^HMPUTILS($P($P(X,U,3),"."))
"RTN","HMPDJ00",256,0)
 . I $D(VASITE(+X)) D
"RTN","HMPDJ00",257,0)
 .. S PAT("facility",I,"localPatientId")=DFN
"RTN","HMPDJ00",258,0)
 .. S PAT("facility",I,"systemId")=HMPSYS
"RTN","HMPDJ00",259,0)
 Q
"RTN","HMPDJ00",260,0)
 ;
"RTN","HMPDJ00",261,0)
PC ;-primary care assignments
"RTN","HMPDJ00",262,0)
 D GETPATTM^HMPCRPC1(.PAT,DFN)
"RTN","HMPDJ00",263,0)
 Q
"RTN","HMPDJ00",264,0)
 N X S X=$$OUTPTPR^SDUTL3(DFN) I X D
"RTN","HMPDJ00",265,0)
 . S PAT("pcProviderUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ00",266,0)
 . S PAT("pcProviderName")=$P(X,U,2)
"RTN","HMPDJ00",267,0)
 S X=$$OUTPTTM^SDUTL3(DFN) I X D
"RTN","HMPDJ00",268,0)
 . S PAT("pcTeamUid")=$$SETUID^HMPUTILS("team",,+X)
"RTN","HMPDJ00",269,0)
 . S PAT("pcTeamName")=$P(X,U,2)
"RTN","HMPDJ00",270,0)
 Q
"RTN","HMPDJ00",271,0)
 ;
"RTN","HMPDJ00",272,0)
INPT ;-inpatient information
"RTN","HMPDJ00",273,0)
 N ADM,X,Y,Z,I,HL,TS
"RTN","HMPDJ00",274,0)
 S ADM=+$G(^DPT(DFN,.105)) Q:ADM<1  ;current admission mvt
"RTN","HMPDJ00",275,0)
 S PAT("admissionUid")=$$SETUID^HMPUTILS("visit",DFN,"H"_ADM)
"RTN","HMPDJ00",276,0)
 S X=$P($G(^DPT(DFN,.101)),U) S:X]"" PAT("roomBed")=X
"RTN","HMPDJ00",277,0)
 S X=$P($G(^DPT(DFN,.1)),U) I X]"" D
"RTN","HMPDJ00",278,0)
 . S PAT("inpatientLocation")=X
"RTN","HMPDJ00",279,0)
 . S I=+$O(^DIC(42,"B",X,0)),HL=+$G(^DIC(42,I,44)) Q:HL<1
"RTN","HMPDJ00",280,0)
 . S X=$P($G(^SC(HL,0)),U,2) S:X]"" PAT("shortInpatientLocation")=X
"RTN","HMPDJ00",281,0)
 ;
"RTN","HMPDJ00",282,0)
 S TS=$G(^DPT(DFN,.103)) I TS D  ;treating specialty
"RTN","HMPDJ00",283,0)
 . S X=$$TSDATA^DGACT(45.7,+TS,.Y) Q:X<1
"RTN","HMPDJ00",284,0)
 . S PAT("specialty")=$G(Y(1)),X=""
"RTN","HMPDJ00",285,0)
 . S PAT("specialtyUid")=$$SETUID^HMPUTILS("specialty",,+TS)
"RTN","HMPDJ00",286,0)
 . I +$G(Y(2))>0 S X=$$TSDATA^DGACT(42.4,+Y(2),.Z)
"RTN","HMPDJ00",287,0)
 . I X>0,$G(Z(3))]"" S PAT("specialtyService")=$P(Z(3),U)
"RTN","HMPDJ00",288,0)
 Q
"RTN","HMPDJ00",289,0)
 ;
"RTN","HMPDJ00",290,0)
INS ;-insurance information
"RTN","HMPDJ00",291,0)
 N X,I,HMPX,HMPINS
"RTN","HMPDJ00",292,0)
 S X=$$INSUR^IBBAPI(DFN,,,.HMPX,"*") Q:X<1
"RTN","HMPDJ00",293,0)
 S I=0 F  S I=$O(HMPX("IBBAPI","INSUR",I)) Q:I<1  D
"RTN","HMPDJ00",294,0)
 . K HMPINS M HMPINS=HMPX("IBBAPI","INSUR",I)
"RTN","HMPDJ00",295,0)
 . S PAT("insurance",I,"id")=DFN_";"_+$G(HMPINS(1))_";"_+$G(HMPINS(8))
"RTN","HMPDJ00",296,0)
 . ; = DFN;COMPANY;POLICY
"RTN","HMPDJ00",297,0)
 . S PAT("insurance",I,"companyName")=$P(HMPINS(1),U,2)
"RTN","HMPDJ00",298,0)
 . ;DE942 - Convert effective and expiration dates to JSON format - TW
"RTN","HMPDJ00",299,0)
 . S:$G(HMPINS(10))]"" PAT("insurance",I,"effectiveDate")=$$JSONDT^HMPUTILS(HMPINS(10))
"RTN","HMPDJ00",300,0)
 . S:$G(HMPINS(11))]"" PAT("insurance",I,"expirationDate")=$$JSONDT^HMPUTILS(HMPINS(11))
"RTN","HMPDJ00",301,0)
 . S:$G(HMPINS(18))]"" PAT("insurance",I,"groupNumber")=HMPINS(18)
"RTN","HMPDJ00",302,0)
 . S:$G(HMPINS(21))]"" PAT("insurance",I,"policyType")=$P(HMPINS(21),U,2)
"RTN","HMPDJ00",303,0)
 . S X=$P($G(HMPINS(12)),U,2) S:X="PATIENT" X="SELF"
"RTN","HMPDJ00",304,0)
 . S:X]"" PAT("insurance",I,"policyHolder")=X
"RTN","HMPDJ00",305,0)
 Q
"RTN","HMPDJ00",306,0)
 ;
"RTN","HMPDJ00",307,0)
FORMAT(X) ; -- enforce (xxx)xxx-xxxx phone format
"RTN","HMPDJ00",308,0)
 S X=$G(X) I X?1"("3N1")"3N1"-"4N.E Q X
"RTN","HMPDJ00",309,0)
 N P,N,I,Y S P=""
"RTN","HMPDJ00",310,0)
 F I=1:1:$L(X) S N=$E(X,I) I N=+N S P=P_N
"RTN","HMPDJ00",311,0)
 S:$L(P)<10 P=$E("0000000000",1,10-$L(P))_P
"RTN","HMPDJ00",312,0)
 S Y=$S(P:"("_$E(P,1,3)_")"_$E(P,4,6)_"-"_$E(P,7,10),1:"")
"RTN","HMPDJ00",313,0)
 Q Y
"RTN","HMPDJ00",314,0)
 ;
"RTN","HMPDJ00",315,0)
NAME(CODE,SET) ; -- Return expanded name for code set
"RTN","HMPDJ00",316,0)
 N Y S Y="",CODE=$G(CODE)
"RTN","HMPDJ00",317,0)
 I $G(SET)="gender" S Y=$S(CODE="F":"Female",CODE="M":"Male",1:"Unknown")
"RTN","HMPDJ00",318,0)
 I $G(SET)="maritalStatus" S Y=$S(CODE="D":"Divorced",CODE="M":"Married",CODE="W":"Widowed",CODE="L":"Legally Separated",CODE="S":"Never Married",1:"Unknown")
"RTN","HMPDJ00",319,0)
 I $G(SET)="religion" S Y=$$GET1^DIQ(13,CODE_",",.01)
"RTN","HMPDJ00",320,0)
 Q Y
"RTN","HMPDJ00",321,0)
 ;
"RTN","HMPDJ00",322,0)
BOOL(X) ;
"RTN","HMPDJ00",323,0)
 I X>0 Q "true"
"RTN","HMPDJ00",324,0)
 S X=$E(X) I X="Y"!(X="y") Q "true"
"RTN","HMPDJ00",325,0)
 Q "false"
"RTN","HMPDJ01")
0^53^B111786832^B96911634
"RTN","HMPDJ01",1,0)
HMPDJ01 ;SLC/MKB,ASMR/MBS -- Orders ;Aug 17, 2016 11:42:39
"RTN","HMPDJ01",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJ01",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ01",4,0)
 ;
"RTN","HMPDJ01",5,0)
 ; External References          ICR
"RTN","HMPDJ01",6,0)
 ; -------------------          -----
"RTN","HMPDJ01",7,0)
 ; ^DPT                         10035
"RTN","HMPDJ01",8,0)
 ; ^OR(100                       5771
"RTN","HMPDJ01",9,0)
 ; ^ORA(102.4                    5769
"RTN","HMPDJ01",10,0)
 ; ^ORD(100.98                    873
"RTN","HMPDJ01",11,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ01",12,0)
 ; ^RADPT                        2480
"RTN","HMPDJ01",13,0)
 ; ^SC                          10040
"RTN","HMPDJ01",14,0)
 ; ^VA(200                      10060
"RTN","HMPDJ01",15,0)
 ; DIC                           2051
"RTN","HMPDJ01",16,0)
 ; DIQ                           2056
"RTN","HMPDJ01",17,0)
 ; GMRCGUIB                      2980
"RTN","HMPDJ01",18,0)
 ; LR7OU1                        2955
"RTN","HMPDJ01",19,0)
 ; ORQ1,^TMP("ORR"               3154
"RTN","HMPDJ01",20,0)
 ; ORQ12,^TMP("ORR"              5704
"RTN","HMPDJ01",21,0)
 ; ORX8                          2467
"RTN","HMPDJ01",22,0)
 ; PSS51P1                       4546
"RTN","HMPDJ01",23,0)
 ;
"RTN","HMPDJ01",24,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ01",25,0)
 Q
"RTN","HMPDJ01",26,0)
 ;
"RTN","HMPDJ01",27,0)
OR1(ID) ; -- order ID >> ^TMP("ORR",$J,ORLIST,HMPN)
"RTN","HMPDJ01",28,0)
 N ORDER,CHILD,HMPC
"RTN","HMPDJ01",29,0)
 D ORX(ID,.ORDER)
"RTN","HMPDJ01",30,0)
 ;DE2818, ^OR(100) - ICR 5771
"RTN","HMPDJ01",31,0)
 S HMPC=0 F  S HMPC=$O(^OR(100,ID,2,HMPC)) Q:HMPC<1  D
"RTN","HMPDJ01",32,0)
 . ; DE5111 begin
"RTN","HMPDJ01",33,0)
 . ; check for child Order's existence, if not found, log it and quit
"RTN","HMPDJ01",34,0)
 . I '$L($$GET1^DIQ(100,HMPC_",",.01)) D  Q  ; HMPC is IFN
"RTN","HMPDJ01",35,0)
 ..  N LOGTXT S LOGTXT(1)=" missing child Order IFN: "_HMPC_", DFN: "_$G(DFN,"*no DFN*")
"RTN","HMPDJ01",36,0)
 ..  D EVNTLOG^HMPDOR(.LOGTXT,"M")  ; event type is "missing"
"RTN","HMPDJ01",37,0)
 . ; DE5111 end
"RTN","HMPDJ01",38,0)
 . K CHILD D ORX(HMPC,.CHILD)
"RTN","HMPDJ01",39,0)
 . M ORDER("children",HMPC)=CHILD
"RTN","HMPDJ01",40,0)
 D:$D(ORDER)  ;BL;DE7806 If a deleted order must not build these nodes
"RTN","HMPDJ01",41,0)
 . S ORDER("lastUpdateTime")=$$EN^HMPSTMP("order") ;RHL 20141231
"RTN","HMPDJ01",42,0)
 . S ORDER("stampTime")=ORDER("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ01",43,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ01",44,0)
 I $G(HMPMETA) D ADD^HMPMETA("order",ORDER("uid"),ORDER("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ01",45,0)
 D ADD^HMPDJ("ORDER","order")
"RTN","HMPDJ01",46,0)
 Q
"RTN","HMPDJ01",47,0)
 ;
"RTN","HMPDJ01",48,0)
ORX(IFN,ORD) ; -- extract order IFN into ORD("attribute")
"RTN","HMPDJ01",49,0)
 ;DE5111 begin
"RTN","HMPDJ01",50,0)
 ;if no IFN passed, or invalid IFN, log it and quit
"RTN","HMPDJ01",51,0)
 I '($G(IFN)>0) D  Q
"RTN","HMPDJ01",52,0)
 . N LOGTXT S LOGTXT(1)=" invalid order IFN: "_$G(IFN,"*no IFN*")_", DFN: "_$G(DFN,"*no DFN*")
"RTN","HMPDJ01",53,0)
 . D EVNTLOG^HMPDOR(.LOGTXT,"C")  ; event type is "corrupt"
"RTN","HMPDJ01",54,0)
 ;if Order not found for this IFN, log it and quit
"RTN","HMPDJ01",55,0)
 I '$L($$GET1^DIQ(100,IFN_",",.01)) D  Q
"RTN","HMPDJ01",56,0)
 . N LOGTXT S LOGTXT(1)=" missing order IFN: "_IFN_", DFN: "_$G(DFN,"*no DFN*")
"RTN","HMPDJ01",57,0)
 . D EVNTLOG^HMPDOR(.LOGTXT,"M")  ; event type is "missing"
"RTN","HMPDJ01",58,0)
 ;DE5111 end
"RTN","HMPDJ01",59,0)
 N DA,HDFN,I,LOC,ORDSTAT,ORLIST,ORLST,X,X0,X8
"RTN","HMPDJ01",60,0)
 S ORLST=$S(+$G(HMPN):HMPN-1,1:0) S:'$D(ORLIST) ORLIST=$H
"RTN","HMPDJ01",61,0)
 D GET^ORQ12(IFN,ORLIST,1)  ; this modifies ^TMP("ORR",$J)
"RTN","HMPDJ01",62,0)
 S X0=$G(^TMP("ORR",$J,ORLIST,ORLST))
"RTN","HMPDJ01",63,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ01",64,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ01",65,0)
 S ERRMSG="A problem occurred converting record "_IFN_" for the orders domain"
"RTN","HMPDJ01",66,0)
 ;
"RTN","HMPDJ01",67,0)
 S ORD("localId")=IFN,ORD("uid")=$$SETUID^HMPUTILS("order",DFN,IFN)
"RTN","HMPDJ01",68,0)
 S X=$$OI^ORX8(+X0) I $L(X) D
"RTN","HMPDJ01",69,0)
 . N ARRAY,NAME
"RTN","HMPDJ01",70,0)
 . S ARRAY("Code")=1_U_"oi",ARRAY("Name")=2,ARRAY("PackageRef")=3
"RTN","HMPDJ01",71,0)
 . D SPLITVAL^HMPUTILS(X,.ARRAY) S ORD("name")=ARRAY("Name")
"RTN","HMPDJ01",72,0)
 . S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  S ORD("oi"_NAME)=$G(ARRAY(NAME))
"RTN","HMPDJ01",73,0)
 S ORD("displayGroup")=$P(X0,U,2)
"RTN","HMPDJ01",74,0)
 S ORD("entered")=$$JSONDT^HMPUTILS($P(X0,U,3))
"RTN","HMPDJ01",75,0)
 S ORD("start")=$$JSONDT^HMPUTILS($P(X0,U,4)),ORD("stop")=$$JSONDT^HMPUTILS($P(X0,U,5))  ;US10045, DE3054
"RTN","HMPDJ01",76,0)
 S ORD("statusCode")="urn:va:order-status:"_$P(X0,U,7)
"RTN","HMPDJ01",77,0)
 S ORD("statusName")=$P(X0,U,6)
"RTN","HMPDJ01",78,0)
 S ORD("statusVuid")="urn:va:vuid:"_$$STS^HMPDOR($P(X0,U,7))
"RTN","HMPDJ01",79,0)
 D SETTEXT^HMPUTILS($NA(^TMP("ORR",$J,ORLIST,ORLST,"TX")),$NA(^TMP("HMPTEXT",$J,IFN)))
"RTN","HMPDJ01",80,0)
 M ORD("content","\")=^TMP("HMPTEXT",$J,IFN)
"RTN","HMPDJ01",81,0)
 ; DE3504 - Jan 18, 2016, added the code for US10045 below
"RTN","HMPDJ01",82,0)
 ; US10045 - PB Dec 7, 2015 if ORDER is saved, signed, discontinued, then ORDER is unsigned
"RTN","HMPDJ01",83,0)
 S HDFN=+$P($G(^OR(100,+IFN,0)),U,2)
"RTN","HMPDJ01",84,0)
 S ORDSTAT=$$ORDACT(HDFN,+IFN) I ORDSTAT="DC" D
"RTN","HMPDJ01",85,0)
 . ; DE3777 - March 15, 2016 - Modified the statusName to "UNRELEASED" for the  order to match the status
"RTN","HMPDJ01",86,0)
 . ;  that appears in CPRS if the ORDER was DISCONTINUED and is UNSIGNED
"RTN","HMPDJ01",87,0)
 . N HDC,HDCRSN,HMPORACT,HPTR,HSIGN
"RTN","HMPDJ01",88,0)
 . S HDC=$O(^OR(100,IFN,8,"C","DC","")),HSIGN="" Q:'(HDC>0)
"RTN","HMPDJ01",89,0)
 . S HMPORACT=$G(^OR(100,IFN,8,HDC,0))
"RTN","HMPDJ01",90,0)
 . ; The 15th piece of HMPORACT is the RELEASE STATUS - '11' FOR unreleased
"RTN","HMPDJ01",91,0)
 . I $P(HMPORACT,U,15)=11 S ORD("statusName")="UNRELEASED",ORD("statusCode")="urn:va:order-status:unr"
"RTN","HMPDJ01",92,0)
 . S:$P($G(HMPORACT),U,4)=2 HSIGN="*UNSIGNED*"
"RTN","HMPDJ01",93,0)
 . S HPTR=+$P($G(^OR(100,IFN,6)),U,4),HDCRSN=$P($G(^ORD(100.03,HPTR,0)),U)  ;Combined fixes Mar 16, 2016 DE3777 CK - PB - DE4027
"RTN","HMPDJ01",94,0)
 . I $L(HDCRSN) S ORD("content","\",2)=" <"_$G(HDCRSN)_"> "_HSIGN  ; add DC order not signed in JSON object
"RTN","HMPDJ01",95,0)
 . ; DE3777 - end of changes
"RTN","HMPDJ01",96,0)
 ;
"RTN","HMPDJ01",97,0)
 S X=$$GET1^DIQ(100,IFN_",",1,"I") I X D
"RTN","HMPDJ01",98,0)
 . S ORD("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ01",99,0)
 . S ORD("providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ01",100,0)
 S LOC=+$$GET1^DIQ(100,IFN_",",6,"I"),FAC=$$FAC^HMPD(LOC) I LOC D
"RTN","HMPDJ01",101,0)
 . S ORD("locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, ICR 10040
"RTN","HMPDJ01",102,0)
 . S ORD("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ01",103,0)
 D FACILITY^HMPUTILS(FAC,"ORD")
"RTN","HMPDJ01",104,0)
 S ORD("service")=$$GET1^DIQ(100,IFN_",","12:1")
"RTN","HMPDJ01",105,0)
 S X=$$GET1^DIQ(100,IFN_",",9,"I") S:X ORD("predecessor")=$$SETUID^HMPUTILS("order",DFN,+X)
"RTN","HMPDJ01",106,0)
 S X=$$GET1^DIQ(100,IFN_",",9.1,"I") S:X ORD("successor")=$$SETUID^HMPUTILS("order",DFN,+X)
"RTN","HMPDJ01",107,0)
 D RESULTS
"RTN","HMPDJ01",108,0)
 ; US11945 - Get parent and child orders for order
"RTN","HMPDJ01",109,0)
 D KIN
"RTN","HMPDJ01",110,0)
 ; sign/verify
"RTN","HMPDJ01",111,0)
 ;US10045 modifications to get signed, verified and reviewed datetime stamp from HMP(800000
"RTN","HMPDJ01",112,0)
 N C,HMUSR,HMORIN,HMPFND,HMPUF,HMSRVR,HPROV,HX8,ORFLG,ORIFN,ORIN ; US11894 Dec 18, 2015 - added variables used by Order Flag and Unflag
"RTN","HMPDJ01",113,0)
 D  ; US11894 Dec 18, 2015 - Order flagged and unflagged added to JSON
"RTN","HMPDJ01",114,0)
 . S C=0,HMORIN=0  ; C = count for JSON object, HMORIN = IEN in sub-file
"RTN","HMPDJ01",115,0)
 . S HMSRVR=$$SRVRNO^HMPOR(HDFN) Q:'HMSRVR  ; if 'HMSRVR then not subscribed
"RTN","HMPDJ01",116,0)
 . ; DE3584 Feb 1, 2016 - begin
"RTN","HMPDJ01",117,0)
 . I '$D(^HMP(800000,HMSRVR,1,HDFN,1,IFN)) D  ; orders not in HMP(800000) add them
"RTN","HMPDJ01",118,0)
 ..  N HMVALS,RSLT  ; HMVALS = fields to update in 800000.14
"RTN","HMPDJ01",119,0)
 ..  D ORDRVALS^HMPOR(.HMVALS,IFN)  ; get fields from ORDER file and map to HMP fields
"RTN","HMPDJ01",120,0)
 ..  Q:'$O(HMVALS(0))  ; error setting up fields, HMVALS("ERR") will be defined
"RTN","HMPDJ01",121,0)
 ..  S HMVALS(1.01)=$$NOW^XLFDT  ; (#1.01) TRACKING START
"RTN","HMPDJ01",122,0)
 ..  D ADDORDR^HMPOR(.RSLT,.HMVALS,IFN,HDFN)  ; may want to log error if RSLT<0
"RTN","HMPDJ01",123,0)
 . ; DE3584 Feb 1, 2016 - end
"RTN","HMPDJ01",124,0)
 . F  S HMORIN=$O(^HMP(800000,HMSRVR,1,HDFN,1,IFN,2,HMORIN)) Q:'HMORIN  D
"RTN","HMPDJ01",125,0)
 ..  S C=C+1,HMPFND=$G(^HMP(800000,HMSRVR,1,HDFN,1,IFN,2,HMORIN,0))
"RTN","HMPDJ01",126,0)
 ..  S HMPUF=$P(HMPFND,U,2),HMPUF=$S(HMPUF="U":"Unflagged",1:"Flagged")
"RTN","HMPDJ01",127,0)
 ..  S ORD("orderFlags",C,"order"_HMPUF_"DateTime")=$$JSONDT^HMPUTILS($P(HMPFND,U))
"RTN","HMPDJ01",128,0)
 ..  S HMUSR=$P(HMPFND,U,3)
"RTN","HMPDJ01",129,0)
 ..  S ORD("orderFlags",C,"order"_HMPUF_"By")=$$GET1^DIQ(200,HMUSR_",",.01,"E")
"RTN","HMPDJ01",130,0)
 ..  S ORD("orderFlags",C,"order"_HMPUF_"Reason")=$P(HMPFND,U,4)
"RTN","HMPDJ01",131,0)
 ;
"RTN","HMPDJ01",132,0)
 I $D(^HMP(800000,HMSRVR,1,HDFN,1,IFN)) D  Q  ; check for existence of order in ^HMP(800000)
"RTN","HMPDJ01",133,0)
 . S I=0,HX8=$G(^HMP(800000,HMSRVR,1,HDFN,1,IFN,0)),HPROV=$P(HX8,U,3)
"RTN","HMPDJ01",134,0)
 . I HPROV'="" D USER(.I,"S",HPROV,$P(HX8,U,4))  ; get signed date/time
"RTN","HMPDJ01",135,0)
 . I $P(HX8,U,6) D USER(.I,"N",$P(HX8,U,5),$P(HX8,U,6))  ; order verified by a nurse get the timestamp
"RTN","HMPDJ01",136,0)
 . I $P(HX8,U,8) D USER(.I,"C",$P(HX8,U,7),$P(HX8,U,8))  ; order was verified by a clerk get the timestamp
"RTN","HMPDJ01",137,0)
 . I $P(HX8,U,10) D USER(.I,"R",$P(HX8,U,9),$P(HX8,U,10))  ;order was reviewed get the timestamp
"RTN","HMPDJ01",138,0)
 ;
"RTN","HMPDJ01",139,0)
 ; DE3504 - Jan 18, 2016, go to ORDER file to get data
"RTN","HMPDJ01",140,0)
 N ORACTION
"RTN","HMPDJ01",141,0)
 S (ORACTION,I)=0
"RTN","HMPDJ01",142,0)
 F  S ORACTION=$O(^OR(100,IFN,8,ORACTION)) Q:'ORACTION  D
"RTN","HMPDJ01",143,0)
 . S HX8=$G(^OR(100,IFN,8,ORACTION,0)) I $P(HX8,U,6) D  ; only if order is signed
"RTN","HMPDJ01",144,0)
 .. S HPROV=$P(HX8,U,5) S:HPROV<1 HPROV=$P(HX8,U,3)  ; signed by or provider
"RTN","HMPDJ01",145,0)
 .. D USER(.I,"S",HPROV,$P(HX8,U,6))  ; date/time signed
"RTN","HMPDJ01",146,0)
 .. I $P(HX8,U,9)  D USER(.I,"N",$P(HX8,U,8),$P(HX8,U,9))   ; verifying nurse and date/time
"RTN","HMPDJ01",147,0)
 .. I $P(HX8,U,11) D USER(.I,"C",$P(HX8,U,10),$P(HX8,U,11)) ; verifying clerk and date/time
"RTN","HMPDJ01",148,0)
 .. I $P(HX8,U,19) D USER(.I,"R",$P(HX8,U,18),$P(HX8,U,19)) ; chart reviewed by and date/time
"RTN","HMPDJ01",149,0)
 ;
"RTN","HMPDJ01",150,0)
 Q
"RTN","HMPDJ01",151,0)
 ;
"RTN","HMPDJ01",152,0)
KIN ; US11945 - Add parents/children (kin) to order
"RTN","HMPDJ01",153,0)
 N HMPNOJS,HMPORKIN,I
"RTN","HMPDJ01",154,0)
 S HMPNOJS=1 D RELATED^HMPORRPC(.HMPORKIN,IFN)
"RTN","HMPDJ01",155,0)
 S:$D(@HMPORKIN@("parent")) ORD("parentOrderUid")=$$SETUID^HMPUTILS("order",DFN,+@HMPORKIN@("parent"))
"RTN","HMPDJ01",156,0)
 S I="" F  S I=$O(@HMPORKIN@("children",I)) Q:I=""  D
"RTN","HMPDJ01",157,0)
 . S ORD("childrenOrderUids",I)=$$SETUID^HMPUTILS("order",DFN,+@HMPORKIN@("children",I))
"RTN","HMPDJ01",158,0)
 Q
"RTN","HMPDJ01",159,0)
RESULTS ; -- add ORD("results",n,"uid") list
"RTN","HMPDJ01",160,0)
 N ORPK,ORPKG,ORDG
"RTN","HMPDJ01",161,0)
 S ORPK=$G(^OR(100,IFN,4)),ORPKG=ORD("service"),ORDG=ORD("displayGroup")
"RTN","HMPDJ01",162,0)
 I ORPKG="GMRC" D  Q
"RTN","HMPDJ01",163,0)
 . N HMPD,I,N,X D DOCLIST^GMRCGUIB(.HMPD,+ORPK)  ; HMPD contains global references
"RTN","HMPDJ01",164,0)
 . S N=1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("consult",DFN,+ORPK)
"RTN","HMPDJ01",165,0)
 . S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  S X=$G(HMPD(50,I)) D
"RTN","HMPDJ01",166,0)
 .. Q:'$D(@(U_$P(X,";",2)_+X_")"))  ;text deleted
"RTN","HMPDJ01",167,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("document",DFN,+X)
"RTN","HMPDJ01",168,0)
 . Q:ORDG'="PROC"
"RTN","HMPDJ01",169,0)
 . N HMPC D FIND^DIC(702,,"@","Q",+ORPK,,"ACON",,,"HMPC") ;CP
"RTN","HMPDJ01",170,0)
 . S I=0 F  S I=$O(HMPC("DILIST",2,I)) Q:I<1  D
"RTN","HMPDJ01",171,0)
 .. S X=+$G(HMPC("DILIST",2,I))_";MDD(702,"
"RTN","HMPDJ01",172,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("procedure",DFN,X)
"RTN","HMPDJ01",173,0)
 I ORPKG="LR" D  Q
"RTN","HMPDJ01",174,0)
 . Q:$L(ORPK,";")'>3  ;no results yet, or parent order
"RTN","HMPDJ01",175,0)
 . N SUB,IDT,CDT,ITM,HMPT,ID,T,N,LRDFN,IDX
"RTN","HMPDJ01",176,0)
 . S SUB=$P(ORPK,";",4),IDT=$P(ORPK,";",5),CDT=9999999-IDT
"RTN","HMPDJ01",177,0)
 . I SUB="CH" D  Q
"RTN","HMPDJ01",178,0)
 .. S ITM=+$G(ORD("oiPackageRef")) D EXPAND^LR7OU1(ITM,.HMPT)
"RTN","HMPDJ01",179,0)
 .. S (T,N)=0 F  S T=$O(HMPT(T)) Q:T<1  S ID=$O(^PXRMINDX(63,"PI",DFN,T,CDT,"")) I $L(ID) S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("lab",DFN,$P(ID,";",2,9))
"RTN","HMPDJ01",180,0)
 . I SUB="MI" D  Q
"RTN","HMPDJ01",181,0)
 .. S ITM="M;A;",N=0,LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818
"RTN","HMPDJ01",182,0)
 .. F  S ITM=$O(^PXRMINDX(63,"PI",DFN,ITM)) Q:$E(ITM,1,4)'="M;A;"  I $D(^(ITM,CDT)) D
"RTN","HMPDJ01",183,0)
 ... S IDX=LRDFN_";MI;"_IDT
"RTN","HMPDJ01",184,0)
 ... F  S IDX=$O(^PXRMINDX(63,"PI",DFN,ITM,CDT,IDX)) Q:IDX=""  S ID=$P(IDX,";",2,99),N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("lab",DFN,ID)
"RTN","HMPDJ01",185,0)
 .. S N=N+1,ORD("results",N,"uid")=$$SETUID^HMPUTILS("document",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",186,0)
 . ; SUB:"AP" [AU,CY,EM,SP]
"RTN","HMPDJ01",187,0)
 . S ORD("results",1,"uid")=$$SETUID^HMPUTILS("lab",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",188,0)
 . S ORD("results",2,"uid")=$$SETUID^HMPUTILS("document",DFN,SUB_";"_IDT)
"RTN","HMPDJ01",189,0)
 I ORPKG["PS" D  Q
"RTN","HMPDJ01",190,0)
 . S:ORPK ORD("results",1,"uid")=$$SETUID^HMPUTILS("med",DFN,IFN)
"RTN","HMPDJ01",191,0)
 I ORPKG="RA" D  Q
"RTN","HMPDJ01",192,0)
 . N IDT,CN S IDT=+$O(^RADPT("AO",+ORPK,DFN,0)) Q:'IDT
"RTN","HMPDJ01",193,0)
 . S CN=0 F  S CN=$O(^RADPT("AO",+ORPK,DFN,IDT,CN)) Q:CN<1  S ORD("results",CN,"uid")=$$SETUID^HMPUTILS("image",DFN,IDT_"-"_CN)
"RTN","HMPDJ01",194,0)
 ; rest should be generic (OR) orders
"RTN","HMPDJ01",195,0)
 I ORDG="NTX" S ORD("results",1,"uid")=$$SETUID^HMPUTILS("treatment",DFN,IFN) Q
"RTN","HMPDJ01",196,0)
 I ORDG="V/M" Q  ;no link
"RTN","HMPDJ01",197,0)
 Q
"RTN","HMPDJ01",198,0)
 ;
"RTN","HMPDJ01",199,0)
NTX1(IFN) ; -- extract nursing treatment order IFN into NTX("attribute")
"RTN","HMPDJ01",200,0)
 N NTX,X
"RTN","HMPDJ01",201,0)
 D ORX(IFN,.NTX) ;get basic order info
"RTN","HMPDJ01",202,0)
 S NTX("orderUid")=NTX("uid")
"RTN","HMPDJ01",203,0)
 S NTX("uid")=$$SETUID^HMPUTILS("treatment",DFN,IFN)
"RTN","HMPDJ01",204,0)
 S X=$$VALUE^ORX8(IFN,"COMMENT") S:$L(X) NTX("instructions")=X
"RTN","HMPDJ01",205,0)
 S X=$$VALUE^ORX8(IFN,"SCHEDULE") I X D
"RTN","HMPDJ01",206,0)
 . D ZERO^PSS51P1(X,,,,"HMPS")
"RTN","HMPDJ01",207,0)
 . S NTX("scheduleName")=$G(^TMP($J,"HMPS",X,.01))
"RTN","HMPDJ01",208,0)
 . S NTX("adminTimes")=$G(^TMP($J,"HMPS",X,1))
"RTN","HMPDJ01",209,0)
 . K ^TMP($J,"HMPS")
"RTN","HMPDJ01",210,0)
 S NTX("lastUpdateTime")=$$EN^HMPSTMP("treatment") ;RHL 20141231
"RTN","HMPDJ01",211,0)
 S NTX("stampTime")=NTX("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ01",212,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ01",213,0)
 I $G(HMPMETA) D ADD^HMPMETA("treatment",NTX("uid"),NTX("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ01",214,0)
 D ADD^HMPDJ("NTX","treatment")
"RTN","HMPDJ01",215,0)
 Q
"RTN","HMPDJ01",216,0)
 ;
"RTN","HMPDJ01",217,0)
USER(N,ROLE,IEN,DATE) ; -- add signature/verification data
"RTN","HMPDJ01",218,0)
 S N=+$G(N)+1
"RTN","HMPDJ01",219,0)
 S ORD("clinicians",N,"signedDateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ01",220,0)
 S ORD("clinicians",N,"role")=$G(ROLE)
"RTN","HMPDJ01",221,0)
 Q:+$G(IEN)<1
"RTN","HMPDJ01",222,0)
 S ORD("clinicians",N,"uid")=$$SETUID^HMPUTILS("user",,IEN)
"RTN","HMPDJ01",223,0)
 S ORD("clinicians",N,"name")=$$GET1^DIQ(200,IEN_",",.01)  ;DE2818, ICR 10060
"RTN","HMPDJ01",224,0)
 Q
"RTN","HMPDJ01",225,0)
 ;
"RTN","HMPDJ01",226,0)
ORDACT(HMPDFN,ORDRNUM) ; function, if patient and order are in HMP(800000) return status code, Jan 10, 2016 US10045, US11894
"RTN","HMPDJ01",227,0)
 N SRV S SRV=$$SRVRNO^HMPOR(HMPDFN)  ; server number for patient
"RTN","HMPDJ01",228,0)
 Q:'(SRV>0) ""  ; not found, return null
"RTN","HMPDJ01",229,0)
 Q $P($G(^HMP(800000,SRV,1,HMPDFN,1,ORDRNUM,0)),U,14)  ; ORDER ACTION returned
"RTN","HMPDJ01",230,0)
 ;
"RTN","HMPDJ01",231,0)
TM(X) ; -- strip seconds off a FM time
"RTN","HMPDJ01",232,0)
 N D,T,Y S D=$P(X,"."),T=$P(X,".",2)
"RTN","HMPDJ01",233,0)
 S Y=D_$S(T:"."_$E(T,1,4),1:"")
"RTN","HMPDJ01",234,0)
 S Y=$$JSONDT^HMPUTILS(Y)
"RTN","HMPDJ01",235,0)
 Q Y
"RTN","HMPDJ01",236,0)
 ;
"RTN","HMPDJ02")
0^5^B216534469^B212781835
"RTN","HMPDJ02",1,0)
HMPDJ02 ;ASMR/MKB/JD,CK,CPC,PB - Problems,Allergies,Vitals ;Aug 23, 2016 09:56:26
"RTN","HMPDJ02",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;Sep 02, 2016;Build 15
"RTN","HMPDJ02",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ02",4,0)
 ;
"RTN","HMPDJ02",5,0)
 ; External References          DBIA#
"RTN","HMPDJ02",6,0)
 ; -------------------          -----
"RTN","HMPDJ02",7,0)
 ; ^PXRMINDX                     4290
"RTN","HMPDJ02",8,0)
 ; ^SC                          10040
"RTN","HMPDJ02",9,0)
 ; ^AUPNPROB                     2727 (where items not available from GMPLUTL2)
"RTN","HMPDJ02",10,0)
 ; DIC                           2051
"RTN","HMPDJ02",11,0)
 ; DIQ                           2056
"RTN","HMPDJ02",12,0)
 ; GMPLUTL2                      2741
"RTN","HMPDJ02",13,0)
 ; GMRADPT                      10099
"RTN","HMPDJ02",14,0)
 ; GMRAOR2                       2422
"RTN","HMPDJ02",15,0)
 ; GMRVUT0,^UTILITY($J           1446
"RTN","HMPDJ02",16,0)
 ; GMVGETQL                      5048
"RTN","HMPDJ02",17,0)
 ; GMVGETVT                      5047
"RTN","HMPDJ02",18,0)
 ; GMVUTL                        5046
"RTN","HMPDJ02",19,0)
 ; ICDEX                         5747
"RTN","HMPDJ02",20,0)
 ; XLFSTR                       10104
"RTN","HMPDJ02",21,0)
 ; XUAF4                         2171
"RTN","HMPDJ02",22,0)
 ; ^AUPNVSIT(                    2028
"RTN","HMPDJ02",23,0)
 ; ^TIU(8925,DA,0                6154
"RTN","HMPDJ02",24,0)
 ;
"RTN","HMPDJ02",25,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ02",26,0)
 ;
"RTN","HMPDJ02",27,0)
 Q
"RTN","HMPDJ02",28,0)
 ;
"RTN","HMPDJ02",29,0)
GMPL1(ID,POVLST) ; -- problem
"RTN","HMPDJ02",30,0)
 N HMPL,PROB,X,I,DATE,USER,FAC,LEXS
"RTN","HMPDJ02",31,0)
 D DETAIL^GMPLUTL2(ID,.HMPL) Q:'$D(HMPL)  ;doesn't exist
"RTN","HMPDJ02",32,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",33,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",34,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the problem domain"
"RTN","HMPDJ02",35,0)
 ;
"RTN","HMPDJ02",36,0)
 S PROB("uid")=$$SETUID^HMPUTILS("problem",DFN,ID),PROB("localId")=ID
"RTN","HMPDJ02",37,0)
 S PROB("problemText")=$G(HMPL("NARRATIVE"))
"RTN","HMPDJ02",38,0)
 S DATE=$P($G(HMPL("ENTERED")),U)
"RTN","HMPDJ02",39,0)
 S:$L(DATE) DATE=$$DATE^HMPDGMPL(DATE),PROB("entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",40,0)
 S X=$G(HMPL("DIAGNOSIS")) I $L(X) D
"RTN","HMPDJ02",41,0)
 . N ICD9ZN,DIAG,SCTCODE
"RTN","HMPDJ02",42,0)
 . I DATE'>0 S DATE=DT
"RTN","HMPDJ02",43,0)
 . S ICD9ZN=$$ICDDX^ICDEX(X,DATE),DIAG=$S($P($G(ICD9ZN),U,4)'="":$P(ICD9ZN,U,4),1:X) ;Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",44,0)
 . ; BEGIN MOD ASF 09/8/15 US 9239 DE 2082
"RTN","HMPDJ02",45,0)
 . ; Only set icdCode and icdName if it is ICD9 (ICD10 is only available in codes array)
"RTN","HMPDJ02",46,0)
 . I HMPL("CSYS")="ICD" S PROB("icdCode")=$$SETNCS^HMPUTILS("icd",HMPL("DIAGNOSIS")),PROB("icdName")=DIAG
"RTN","HMPDJ02",47,0)
 . ; Create codes array for both ICD9 or ICD10
"RTN","HMPDJ02",48,0)
 . S PROB("codes",1,"code")=HMPL("DIAGNOSIS")
"RTN","HMPDJ02",49,0)
 . S PROB("codes",1,"display")=$S(HMPL("CSYS")="ICD":DIAG,HMPL("CSYS")="10D":HMPL("ICDD"))
"RTN","HMPDJ02",50,0)
 . S PROB("codes",1,"system")=$S(HMPL("CSYS")="ICD":"urn:oid:2.16.840.1.113883.6.42",HMPL("CSYS")="10D":"urn:oid:2.16.840.1.113883.6.3",1:"codesystem error")
"RTN","HMPDJ02",51,0)
 . ;SNOMED CT codes
"RTN","HMPDJ02",52,0)
 . S SCTCODE=HMPL("SCTC") ;DE4685 ;9000011,80001 SNOMED CT CONCEPT CODE
"RTN","HMPDJ02",53,0)
 . D:SCTCODE EN^LEXCODE(SCTCODE) ; ICR 1614
"RTN","HMPDJ02",54,0)
 . I $D(LEXS("SCT",1)) D
"RTN","HMPDJ02",55,0)
 . . S PROB("codes",2,"code")=SCTCODE
"RTN","HMPDJ02",56,0)
 . . S PROB("codes",2,"code","\s")="" ; Ensure code is sent as a string
"RTN","HMPDJ02",57,0)
 . . S PROB("codes",2,"display")=$P(LEXS("SCT",1),U,2)
"RTN","HMPDJ02",58,0)
 . . S PROB("codes",2,"system")="http://snomed.info/sct"
"RTN","HMPDJ02",59,0)
 . ; END MOD ASF US 9239 DE 2082
"RTN","HMPDJ02",60,0)
 ;Get the internal date from ^AUPNPROB so the imprecise date can be converted properly
"RTN","HMPDJ02",61,0)
 ;JD - 2/1/16 - DE3548
"RTN","HMPDJ02",62,0)
 S X=$$GET1^DIQ(9000011,ID_",",.01,"I") S:$L(X) PROB("lexiconCode")=X  ; DE4680 May 11, 2016 - added lexiconCode to JDS
"RTN","HMPDJ02",63,0)
 S X=$$GET1^DIQ(9000011,ID_",",.13,"I") S:$L(X) PROB("onset")=$$JSONDT^HMPUTILS(X) ;retrieve internal value for proper date format
"RTN","HMPDJ02",64,0)
 S X=$G(HMPL("MODIFIED")) S:$L(X) X=$$DATE^HMPDGMPL(X),PROB("updated")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",65,0)
 S X=$G(HMPL("STATUS")) I $L(X) D
"RTN","HMPDJ02",66,0)
 . S PROB("statusName")=X,X=$E(X)
"RTN","HMPDJ02",67,0)
 . S X=$S(X="A":55561003,X="I":73425007,1:"")
"RTN","HMPDJ02",68,0)
 . S PROB("statusCode")=$$SETNCS^HMPUTILS("sct",X)
"RTN","HMPDJ02",69,0)
 ;S X=$G(HMPL("PRIORITY")) I X]"" D
"RTN","HMPDJ02",70,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.14,"I") I X]"" D  ;DE3988 take directly from the file regardless of status
"RTN","HMPDJ02",71,0)
 . S X=$S(X="C":"chronic",X="A":"acute",1:"")
"RTN","HMPDJ02",72,0)
 . I X'="" S PROB("acuityName")=X,PROB("acuityCode")=$$SETVURN^HMPUTILS("prob-acuity",$E(X))
"RTN","HMPDJ02",73,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.07,"I") S:X PROB("resolved")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",74,0)
 S X=$P(HMPL("ENTERED"),U,2) S:$L(X) PROB("enteredBy")=X  ; DE5096 June 24, 2016 - add addt'l problem fields to JDS
"RTN","HMPDJ02",75,0)
 S X=$P(HMPL("RECORDED"),U,2) S:$L(X) PROB("recordedBy")=X  ; DE5096 June 24, 2016
"RTN","HMPDJ02",76,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.09,"I") S:$L(X) PROB("recordedOn")=$$JSONDT^HMPUTILS(X)  ; DE5096 July 1, 2016 
"RTN","HMPDJ02",77,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.02,"I")
"RTN","HMPDJ02",78,0)
 S:X="P" PROB("unverified")="false",PROB("removed")="false"
"RTN","HMPDJ02",79,0)
 S:X="T" PROB("unverified")="true",PROB("removed")="false"
"RTN","HMPDJ02",80,0)
 S:X="H" PROB("unverified")="false",PROB("removed")="true"
"RTN","HMPDJ02",81,0)
 S X=$G(HMPL("SC")),X=$S(X="YES":"true",X="NO":"false",1:"")  ; DE3918, Mar 2, 2016
"RTN","HMPDJ02",82,0)
 S:$L(X) PROB("serviceConnected")=X
"RTN","HMPDJ02",83,0)
 S X=$G(HMPL("PROVIDER")) I $L(X) D
"RTN","HMPDJ02",84,0)
 . S PROB("providerName")=X,X=$$GET1^DIQ(9000011,ID_",",1.05,"I")
"RTN","HMPDJ02",85,0)
 . S PROB("providerUid")=$$SETUID^HMPUTILS("user",,+X)
"RTN","HMPDJ02",86,0)
 S X=$$GET1^DIQ(9000011,ID_",",1.06) S:$L(X) PROB("service")=X
"RTN","HMPDJ02",87,0)
 S X=$G(HMPL("CLINIC")) I $L(X) D
"RTN","HMPDJ02",88,0)
 . S PROB("locationName")=X
"RTN","HMPDJ02",89,0)
 . N LOC S LOC=+$$FIND1^DIC(44,,"QX",X)
"RTN","HMPDJ02",90,0)
 . S:LOC PROB("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02",91,0)
 S X=+$$GET1^DIQ(9000011,ID_",",.06,"I")
"RTN","HMPDJ02",92,0)
 S:X FAC=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDJ02",93,0)
 I 'X S FAC=$$FAC^HMPD ;local stn#^name
"RTN","HMPDJ02",94,0)
 D FACILITY^HMPUTILS(FAC,"PROB")
"RTN","HMPDJ02",95,0)
 S I=0 F  S I=$O(HMPL("COMMENT",I)) Q:I<1  D
"RTN","HMPDJ02",96,0)
 . S X=$G(HMPL("COMMENT",I))
"RTN","HMPDJ02",97,0)
 . S USER=$$VA200^HMPDGMPL($P(X,U,2)),DATE=$$DATE^HMPDGMPL($P(X,U))
"RTN","HMPDJ02",98,0)
 . S PROB("comments",I,"noteCounter")=I  ; Feb 24, 2016 - US12724
"RTN","HMPDJ02",99,0)
 . S PROB("comments",I,"enteredByCode")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",100,0)
 . S PROB("comments",I,"enteredByName")=$P(X,U,2)
"RTN","HMPDJ02",101,0)
 . S PROB("comments",I,"entered")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ02",102,0)
 . S PROB("comments",I,"comment")=$P(X,U,3)
"RTN","HMPDJ02",103,0)
 I $D(POVLST) D GMPLVST(ID,"PROB",.POVLST)  ;JL;add encounter information.
"RTN","HMPDJ02",104,0)
 ;== Treatment attributes - Added on 1/4/16 - JD - US12358
"RTN","HMPDJ02",105,0)
 ;Modified 1/8/16 - JD - US12358
"RTN","HMPDJ02",106,0)
 ;Guarding against direct sets into ^AUPNPROB in RPC: "ORQQPL ADD SAVE" by checking for "Y" and "N".
"RTN","HMPDJ02",107,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.11,"I"))
"RTN","HMPDJ02",108,0)
 S:$L(X) PROB("agentOrangeExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",109,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.12,"I"))
"RTN","HMPDJ02",110,0)
 S:$L(X) PROB("radiationExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",111,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.13,"I"))
"RTN","HMPDJ02",112,0)
 S:$L(X) PROB("persianGulfExposure")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",113,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.15,"I"))
"RTN","HMPDJ02",114,0)
 S:$L(X) PROB("headNeckCancer")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",115,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.16,"I"))
"RTN","HMPDJ02",116,0)
 S:$L(X) PROB("militarySexualTrauma")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",117,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.17,"I"))
"RTN","HMPDJ02",118,0)
 S:$L(X) PROB("combatVeteran")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",119,0)
 S X=$$UP^XLFSTR($$GET1^DIQ(9000011,ID_",",1.18,"I"))
"RTN","HMPDJ02",120,0)
 S:$L(X) PROB("shipboardHazard")=$S(X=1:"YES",$E(X)="Y":"YES",X=0:"NO",$E(X)="N":"NO",1:X)
"RTN","HMPDJ02",121,0)
 ;==
"RTN","HMPDJ02",122,0)
 S PROB("lastUpdateTime")=$$EN^HMPSTMP("problem")
"RTN","HMPDJ02",123,0)
 S PROB("stampTime")=PROB("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",124,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",125,0)
 I $G(HMPMETA) D ADD^HMPMETA("problem",PROB("uid"),PROB("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02",126,0)
 D ADD^HMPDJ("PROB","problem")
"RTN","HMPDJ02",127,0)
 Q
"RTN","HMPDJ02",128,0)
 ;
"RTN","HMPDJ02",129,0)
GMPLVST(ID,Y,POVLST)  ; --- JL;associate problem with visit and notes
"RTN","HMPDJ02",130,0)
 Q:'$G(ID)!'$G(^AUPNPROB(ID,0))!'$D(POVLST)  ;invalid id or no data
"RTN","HMPDJ02",131,0)
 N ICDCODE
"RTN","HMPDJ02",132,0)
 S ICDCODE=$$CODEC^ICDEX(80,$$GET1^DIQ(9000011,ID_",",.01,"I")) Q:ICDCODE=-1  ;invalid icdcode Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",133,0)
 Q:$D(POVLST(ICDCODE))=0
"RTN","HMPDJ02",134,0)
 N IDX,VCNT,NCNT,DIEN,VIEN,FAC,STCODE
"RTN","HMPDJ02",135,0)
 S IDX="",VCNT=0,NCNT=0 F  S IDX=$O(POVLST(ICDCODE,IDX)) Q:IDX=""  D
"RTN","HMPDJ02",136,0)
 . S VCNT=VCNT+1
"RTN","HMPDJ02",137,0)
 . S VIEN=+$G(POVLST(ICDCODE,IDX)),FAC=$$FAC^HMPDJ04(VIEN),STCODE=$$STCODE^HMPDJ04(VIEN)
"RTN","HMPDJ02",138,0)
 . I FAC D FACILITY^HMPUTILS(FAC,Y_"(""encounters"","_VCNT_")")  ; facility info
"RTN","HMPDJ02",139,0)
 . I STCODE D STOPCODE^HMPDJ04(STCODE,Y_"(""encounters"","_VCNT_")") ; stop code
"RTN","HMPDJ02",140,0)
 . S @Y@("encounters",VCNT,"dateTime")=$$JSONDT^HMPUTILS($$DATE^HMPDGMPL(+IDX))
"RTN","HMPDJ02",141,0)
 . S @Y@("encounters",VCNT,"visitUid")=$$SETUID^HMPUTILS("visit",DFN,VIEN)
"RTN","HMPDJ02",142,0)
 . N ENINFO S ENINFO=$G(POVLST(ICDCODE,IDX))
"RTN","HMPDJ02",143,0)
 . S DIEN=+$P(ENINFO,U,2)
"RTN","HMPDJ02",144,0)
 . ;W "DIEN is "_DIEN,!
"RTN","HMPDJ02",145,0)
 . I DIEN D
"RTN","HMPDJ02",146,0)
 . . S NCNT=NCNT+1
"RTN","HMPDJ02",147,0)
 . . ; extract the extra data from the document
"RTN","HMPDJ02",148,0)
 . . N DOCINFO S DOCINFO=$E(ENINFO,$F($G(ENINFO),U),$L(ENINFO))
"RTN","HMPDJ02",149,0)
 . . N OUTPUT S OUTPUT="" D EN1^HMPDJ08(DOCINFO,3,.OUTPUT)
"RTN","HMPDJ02",150,0)
 . . N NAME F NAME="documentTypeName","entered","summary","facilityName","authorDisplayName" D
"RTN","HMPDJ02",151,0)
 . . . S:$D(OUTPUT(NAME)) @Y@("documents",NCNT,NAME)=$G(OUTPUT(NAME))
"RTN","HMPDJ02",152,0)
 . . S @Y@("documents",NCNT,"documentUid")=$$SETUID^HMPUTILS("document",DFN,DIEN)
"RTN","HMPDJ02",153,0)
 Q
"RTN","HMPDJ02",154,0)
 ;
"RTN","HMPDJ02",155,0)
GMPLPOV(DFNN,POVLST,DONTKILL) ; -- JL;All problem of visit related to the patient from V POV file
"RTN","HMPDJ02",156,0)
 ;INPUT: Patient's DFN
"RTN","HMPDJ02",157,0)
 ;OUTPUT: Patient's VISIT list in the format of
"RTN","HMPDJ02",158,0)
 ;        OUTPUT(DIAGNOSIS,DATATIME)="VISITIEN"
"RTN","HMPDJ02",159,0)
 ;
"RTN","HMPDJ02",160,0)
 Q:'$G(DFNN)
"RTN","HMPDJ02",161,0)
 N INVVST
"RTN","HMPDJ02",162,0)
 K:'DONTKILL POVLST ; clear the output
"RTN","HMPDJ02",163,0)
 ; Query V POV(^AUPNVPOV() by using "AA" Cross Reference.
"RTN","HMPDJ02",164,0)
 S INVVST="",CURVST="" F  S INVVST=$O(^AUPNVPOV("AA",DFNN,INVVST)) Q:INVVST=""  D
"RTN","HMPDJ02",165,0)
 . N CURVST,DIEN
"RTN","HMPDJ02",166,0)
 . S CURVST=INVVST,DIEN="" F  S DIEN=$O(^AUPNVPOV("AA",DFNN,CURVST,DIEN)) Q:DIEN=""  D
"RTN","HMPDJ02",167,0)
 . . N ICDIEN,PVISIT
"RTN","HMPDJ02",168,0)
 . . S ICDIEN=+$P(^AUPNVPOV(DIEN,0),U,1),PVISIT=$P(^AUPNVPOV(DIEN,0),U,3)
"RTN","HMPDJ02",169,0)
 . . N VISITDT
"RTN","HMPDJ02",170,0)
 . . S VISITDT=+$G(^AUPNVSIT(PVISIT,0)) Q:'$L(VISITDT)  ;quit if no visit is found, bad data entry.
"RTN","HMPDJ02",171,0)
 . . N ICDCODE,VIEN
"RTN","HMPDJ02",172,0)
 . . S ICDCODE=$$CODEC^ICDEX(80,ICDIEN) Q:ICDCODE=-1  ;convert to ICD code, quit if not valid Sep 1, 2016 - PB - DE5033
"RTN","HMPDJ02",173,0)
 . . I $D(POVLST(ICDCODE,VISITDT))'=0 D  Q
"RTN","HMPDJ02",174,0)
 . . . S VIEN=$$GETVIEN^HMPDJ02A(DFNN,VISITDT)
"RTN","HMPDJ02",175,0)
 . . . ; W:VIEN=-1 "Can not find VISIT IEN for "_VISITDT,!
"RTN","HMPDJ02",176,0)
 . . . S:VIEN'=-1 POVLST(ICDCODE,VISITDT)=VIEN
"RTN","HMPDJ02",177,0)
 Q
"RTN","HMPDJ02",178,0)
 ;
"RTN","HMPDJ02",179,0)
DIAGLIST(DIAGS,DFN,ORDATE,ORPRCNT) ;BL,JL; get list diagnosis on past notes
"RTN","HMPDJ02",180,0)
 S:'+$G(ORDATE) ORDATE=DT
"RTN","HMPDJ02",181,0)
 S:'+$G(ORPRCNT) ORPRCNT=1
"RTN","HMPDJ02",182,0)
 ;Use TIU DOCUMENTS BY CONTEXT to retrieve all notes associated with patient (CONTEXT^TIUSRVLO)
"RTN","HMPDJ02",183,0)
 K ENC,DIAGCODE,CNT,DIAG,DIAGNUM,DIAGLINE,ENCNUM,LINE,IEN,CLASS,CONTEXT,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND,LSTNUM,NOTEINFO
"RTN","HMPDJ02",184,0)
 K NEWCNT,OLDLST,DIAGCNT
"RTN","HMPDJ02",185,0)
 S CLASS=3,CONTEXT=1,EARLY=-1,LATE=-1,PERSON=0,OCCLIM=0,SEQUENCE="D",SHOWADD=0,INCUND=0,OLDLST=""
"RTN","HMPDJ02",186,0)
 ;TAKE EXISTING LIST FROM ENCOUNTER CALL AND PRESERVE TO BE APPENDED AFTERWARD
"RTN","HMPDJ02",187,0)
 K DIAGS S DIAGS=""
"RTN","HMPDJ02",188,0)
 D CONTEXT^TIUSRVLO(.DIAGS,CLASS,CONTEXT,DFN,EARLY,LATE,PERSON,OCCLIM,SEQUENCE,SHOWADD,INCUND)
"RTN","HMPDJ02",189,0)
 M DIAGS=^TMP("TIUR",$J)
"RTN","HMPDJ02",190,0)
 ;Go through notes list extract diagnosis associated with each encounter to previous problem list
"RTN","HMPDJ02",191,0)
 S LSTNUM=""
"RTN","HMPDJ02",192,0)
 ;THIS CALL WILL EXTRACT ALL THE VISIT INFORMATION TO ^TMP(PXKENC,$J,VISIT)
"RTN","HMPDJ02",193,0)
 N VIEN
"RTN","HMPDJ02",194,0)
 F  S LSTNUM=$O(DIAGS(LSTNUM)) Q:LSTNUM=""  D
"RTN","HMPDJ02",195,0)
 . N HMPV
"RTN","HMPDJ02",196,0)
 . S NOTEINFO=""
"RTN","HMPDJ02",197,0)
 . S IEN=$P(DIAGS(LSTNUM),"^",1)
"RTN","HMPDJ02",198,0)
 . ;DE6877 - 21 Jan 17 - PB next two lines of code check to see if the Visit/Admit Date&Time and/or Patient Name fields are missing for the visit. if either are missing processing this record stops.
"RTN","HMPDJ02",199,0)
 . S HMPV=$P($G(^TIU(8925,IEN,0)),U,3)
"RTN","HMPDJ02",200,0)
 . I $G(HMPV)>0 Q:$$VSTIEN^HMPDJ02A(HMPV)>0
"RTN","HMPDJ02",201,0)
 . D PCE4NOTE^ORWPCE3(.NOTEINFO,IEN,DFN)
"RTN","HMPDJ02",202,0)
 . S CNT=0,DIAGCNT=0
"RTN","HMPDJ02",203,0)
 . F  S CNT=$O(NOTEINFO(CNT)) Q:CNT=""  D
"RTN","HMPDJ02",204,0)
 . . Q:$P(NOTEINFO(CNT),"^",1)'["POV"
"RTN","HMPDJ02",205,0)
 . . S DIAGCNT=DIAGCNT+1
"RTN","HMPDJ02",206,0)
 . . S VISITDT=$P($G(NOTEINFO(2)),U,3)  ; get the visit datetime
"RTN","HMPDJ02",207,0)
 . . S ICDCODE=$P(NOTEINFO(CNT),U,2)  ; get the diagnosis code
"RTN","HMPDJ02",208,0)
 . . I $D(ENC(ICDCODE,VISITDT))=0 D
"RTN","HMPDJ02",209,0)
 . . . S VIEN=$$GETVIEN^HMPDJ02A(DFN,VISITDT)
"RTN","HMPDJ02",210,0)
 . . . ;W:VIEN=-1 "Can not find Visit ID for "_NOTEINFO(CNT),!
"RTN","HMPDJ02",211,0)
 . . . S:VIEN'=-1 ENC(ICDCODE,VISITDT)=VIEN_U_$G(DIAGS(LSTNUM)) ;  add to list only if visit ien is valid
"RTN","HMPDJ02",212,0)
 ; KILL DIAGS BECAUSE IT NOW CONTAINS NOTE INFO
"RTN","HMPDJ02",213,0)
 K DIAGS
"RTN","HMPDJ02",214,0)
 M DIAGS=ENC
"RTN","HMPDJ02",215,0)
 ;CLEAN UP ARRAYS
"RTN","HMPDJ02",216,0)
 K NOTEINFO,ENC,DIAG,^TMP("TIUR",$J)
"RTN","HMPDJ02",217,0)
 D GMPLPOV(DFN,.DIAGS,1)  ; Also loop thru V POV file to find extra encounter
"RTN","HMPDJ02",218,0)
 Q
"RTN","HMPDJ02",219,0)
 ;
"RTN","HMPDJ02",220,0)
GMRA1(ID) ; -- allergy/reaction GMRAL(ID)
"RTN","HMPDJ02",221,0)
 N GMRA,HMPY,REAC,X,Y,I,USER,CMMT
"RTN","HMPDJ02",222,0)
 S GMRA=$G(GMRAL(ID)) D EN1^GMRAOR2(ID,"HMPY")
"RTN","HMPDJ02",223,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",224,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",225,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the allergy domain"
"RTN","HMPDJ02",226,0)
 ;
"RTN","HMPDJ02",227,0)
 S X=$P(HMPY,U,10) I $L(X) S X=$$DATE^HMPDGMRA(X) Q:X<HMPSTART  Q:X>HMPSTOP  S REAC("entered")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",228,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",229,0)
 S REAC("kind")="Allergy / Adverse Reaction"
"RTN","HMPDJ02",230,0)
 S REAC("localId")=ID,REAC("uid")=$$SETUID^HMPUTILS("allergy",DFN,ID)
"RTN","HMPDJ02",231,0)
 S (REAC("summary"),REAC("products",1,"name"))=$P(HMPY,U) I $P(GMRA,U,9) D
"RTN","HMPDJ02",232,0)
 . S X=$P(GMRA,U,9),REAC("reference")=X
"RTN","HMPDJ02",233,0)
 . S Y=+$P(X,"(",2) I 'Y,X["PSDRUG" S Y=50
"RTN","HMPDJ02",234,0)
 . S I=$$VUID^HMPD(+X,Y),REAC("products",1,"vuid")=$$SETVURN^HMPUTILS("vuid",I)
"RTN","HMPDJ02",235,0)
 S X=$P(HMPY,U,2) S:$L(X) REAC("originatorName")=X
"RTN","HMPDJ02",236,0)
 S REAC("historical")=$S($E($P(HMPY,U,5))="H":"true",1:"false")
"RTN","HMPDJ02",237,0)
 S X=$P(HMPY,U,6) S:$L(X) REAC("mechanism")=X
"RTN","HMPDJ02",238,0)
 S X=$P(HMPY,U,7) S:$L(X) REAC("typeName")=X
"RTN","HMPDJ02",239,0)
 ; REAC("adverseEventTypeName")=$P(HMPY,U,7)_" "_$P(HMPY,U,6) ;TYPE_MECH
"RTN","HMPDJ02",240,0)
 I $P(HMPY,U,4)="VERIFIED",$P(HMPY,U,9) D
"RTN","HMPDJ02",241,0)
 . S REAC("verified")=$$JSONDT^HMPUTILS($P(HMPY,U,9))
"RTN","HMPDJ02",242,0)
 . S REAC("verifierName")=$P(HMPY,U,8)
"RTN","HMPDJ02",243,0)
 ; severity
"RTN","HMPDJ02",244,0)
 S I=0 F  S I=$O(HMPY("O",I)) Q:I<1  D
"RTN","HMPDJ02",245,0)
 . S X=$G(HMPY("O",I))
"RTN","HMPDJ02",246,0)
 . S REAC("observations",I,"date")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",247,0)
 . S REAC("observations",I,"severity")=$P(X,U,2)
"RTN","HMPDJ02",248,0)
 ; reactions
"RTN","HMPDJ02",249,0)
 S I=0 F  S I=$O(GMRAL(ID,"S",I)) Q:I<1  D
"RTN","HMPDJ02",250,0)
 . S X=$G(GMRAL(ID,"S",I))
"RTN","HMPDJ02",251,0)
 . S REAC("reactions",I,"name")=$P(X,";")
"RTN","HMPDJ02",252,0)
 . S Y=$$VUID^HMPD(+$P(X,";",2),120.83)
"RTN","HMPDJ02",253,0)
 . S REAC("reactions",I,"vuid")=$$SETVURN^HMPUTILS("vuid",Y)
"RTN","HMPDJ02",254,0)
 ; drug classes
"RTN","HMPDJ02",255,0)
 S I=0 F  S I=$O(HMPY("V",I)) Q:I<1  D
"RTN","HMPDJ02",256,0)
 . S X=$G(HMPY("V",I))
"RTN","HMPDJ02",257,0)
 . S REAC("drugClasses",I,"code")=$P(X,U)
"RTN","HMPDJ02",258,0)
 . S REAC("drugClasses",I,"name")=$P(X,U,2)
"RTN","HMPDJ02",259,0)
 S I=0 F  S I=$O(HMPY("C",I)) Q:I<1  D
"RTN","HMPDJ02",260,0)
 . S X=$G(HMPY("C",I)),USER=$$VA200^HMPDGMPL($P(X,U,3))
"RTN","HMPDJ02",261,0)
 . S REAC("comments",I,"enteredByUid")=$$SETUID^HMPUTILS("user",,+USER)
"RTN","HMPDJ02",262,0)
 . S REAC("comments",I,"enteredByName")=$P(X,U,3)
"RTN","HMPDJ02",263,0)
 . S REAC("comments",I,"entered")=$$JSONDT^HMPUTILS(+X)
"RTN","HMPDJ02",264,0)
 . K CMMT M CMMT=HMPY("C",I)
"RTN","HMPDJ02",265,0)
 . S REAC("comments",I,"comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDJ02",266,0)
 I GMRA="" S REAC("removed")="true" ;entered in error
"RTN","HMPDJ02",267,0)
 ; next
"RTN","HMPDJ02",268,0)
 S REAC("lastUpdateTime")=$$EN^HMPSTMP("allergy")
"RTN","HMPDJ02",269,0)
 S REAC("stampTime")=REAC("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",270,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",271,0)
 I $G(HMPMETA) D ADD^HMPMETA("allergy",REAC("uid"),REAC("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02",272,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",273,0)
 Q
"RTN","HMPDJ02",274,0)
 ;
"RTN","HMPDJ02",275,0)
NKA ; -- no assessment or NKA [GMRAL=0 or ""]
"RTN","HMPDJ02",276,0)
 N REAC,X
"RTN","HMPDJ02",277,0)
 S X=$G(^GMR(120.86,DFN,0)) Q:GMRAL=""!'$P(X,U,2)
"RTN","HMPDJ02",278,0)
 S REAC("uid")=$$SETUID^HMPUTILS("obs",DFN,"120.86;"_DFN)
"RTN","HMPDJ02",279,0)
 S REAC("typeCode")="urn:sct:160244002"
"RTN","HMPDJ02",280,0)
 S REAC("typeName")="No known allergies"
"RTN","HMPDJ02",281,0)
 S X=$$FAC^HMPD D FACILITY^HMPUTILS(X,"REAC")
"RTN","HMPDJ02",282,0)
 D ADD^HMPDJ("REAC","allergy")
"RTN","HMPDJ02",283,0)
 Q
"RTN","HMPDJ02",284,0)
 ;
"RTN","HMPDJ02",285,0)
GMV1(ID) ; -- vital/measurement ^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID)
"RTN","HMPDJ02",286,0)
 N VIT,HMPY,X0,TYPE,LOC,FAC,X,Y,MRES,MUNT,HIGH,LOW,I
"RTN","HMPDJ02",287,0)
 D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02",288,0)
 ; GMRVUT0 returns CLiO data with a pseudo-ID >> get real ID
"RTN","HMPDJ02",289,0)
 I X0="",$G(HMPIDT),$D(HMPTYP) D  ;[from HMPDJ0]
"RTN","HMPDJ02",290,0)
 . N GMRVD S GMRVD=$G(^UTILITY($J,"GMRVD",HMPIDT,HMPTYP,ID))
"RTN","HMPDJ02",291,0)
 . S ID=$O(^PXRMINDX(120.5,"PI",DFN,$P(GMRVD,U,3),+GMRVD,""))
"RTN","HMPDJ02",292,0)
 . I $L(ID) D GETREC^GMVUTL(.HMPY,ID,1) S X0=$G(HMPY(0))
"RTN","HMPDJ02",293,0)
 Q:X0=""
"RTN","HMPDJ02",294,0)
 ;
"RTN","HMPDJ02",295,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",296,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ02",297,0)
 S ERRMSG="A problem occurred converting record "_ID_" for the vitals domain"
"RTN","HMPDJ02",298,0)
 S VIT("localId")=ID,VIT("kind")="Vital Sign"
"RTN","HMPDJ02",299,0)
 S VIT("uid")=$$SETUID^HMPUTILS("vital",DFN,ID)
"RTN","HMPDJ02",300,0)
 S VIT("observed")=$$JSONDT^HMPUTILS(+X0)
"RTN","HMPDJ02",301,0)
 S VIT("resulted")=$$JSONDT^HMPUTILS(+$P(X0,U,4))
"RTN","HMPDJ02",302,0)
 S TYPE=$$FIELD^GMVGETVT(+$P(X0,U,3),2)
"RTN","HMPDJ02",303,0)
 S VIT("displayName")=TYPE
"RTN","HMPDJ02",304,0)
 S VIT("typeName")=$$FIELD^GMVGETVT($P(X0,U,3),1)
"RTN","HMPDJ02",305,0)
 S VIT("typeCode")="urn:va:vuid:"_$$FIELD^GMVGETVT($P(X0,U,3),4)
"RTN","HMPDJ02",306,0)
 S X=$P(X0,U,8),VIT("result")=X
"RTN","HMPDJ02",307,0)
 S VIT("units")=$$UNIT^HMPDGMV(TYPE),(MRES,MUNT)=""
"RTN","HMPDJ02",308,0)
 I TYPE="T"  S:X=+X MUNT="C",MRES=$J(X-32*5/9,0,1) ;EN1^GMRVUTL
"RTN","HMPDJ02",309,0)
 I TYPE="HT" S MUNT="cm",MRES=$J(2.54*X,0,2)  ;EN2^GMRVUTL
"RTN","HMPDJ02",310,0)
 I TYPE="WT" S MUNT="kg",MRES=$J(X/2.2,0,2)   ;EN3^GMRVUTL
"RTN","HMPDJ02",311,0)
 I TYPE="CG" S MUNT="cm",MRES=$J(2.54*X,0,2)
"RTN","HMPDJ02",312,0)
 S:MRES VIT("metricResult")=MRES,VIT("metricUnits")=MUNT
"RTN","HMPDJ02",313,0)
 S X=$$RANGE^HMPDGMV(TYPE) I $L(X) S VIT("high")=$P(X,U),VIT("low")=$P(X,U,2)
"RTN","HMPDJ02",314,0)
 S VIT("summary")=VIT("typeName")_" "_VIT("result")_" "_VIT("units")
"RTN","HMPDJ02",315,0)
 F I=1:1:$L(HMPY(5),U) S X=$P(HMPY(5),U,I) I X D
"RTN","HMPDJ02",316,0)
 . S VIT("qualifiers",I,"name")=$$FIELD^GMVGETQL(X,1)
"RTN","HMPDJ02",317,0)
 . S VIT("qualifiers",I,"vuid")=$$FIELD^GMVGETQL(X,3)
"RTN","HMPDJ02",318,0)
 ;US4338 - add pulse ox qualifier if it exists. name component is required. vuid is not per Thomas Loth
"RTN","HMPDJ02",319,0)
 I $P(X0,U,10) S VIT("qualifiers",I+1,"name")=$P(X0,U,10)
"RTN","HMPDJ02",320,0)
 I $G(HMPY(2)) D
"RTN","HMPDJ02",321,0)
 . S VIT("removed")="true"        ;entered in error
"RTN","HMPDJ02",322,0)
 . S X=$$GET1^DIQ(120.506,"1,"_ID_",",.01,"E") S:X VIT("reasonEnteredInError")=X
"RTN","HMPDJ02",323,0)
 . S X=$$GET1^DIQ(120.506,"1,"_ID_",",.02,"I") S:X VIT("dateEnteredInError")=$$JSONDT^HMPUTILS(X)
"RTN","HMPDJ02",324,0)
 S LOC=+$P(X0,U,5),FAC=$$FAC^HMPD(LOC)
"RTN","HMPDJ02",325,0)
 S VIT("locationUid")=$$SETUID^HMPUTILS("location",,LOC)
"RTN","HMPDJ02",326,0)
 S VIT("locationName")=$S(LOC:$P($G(^SC(LOC,0)),U),1:"unknown")
"RTN","HMPDJ02",327,0)
 N USERID S USERID=$P(HMPY(0),U,6)
"RTN","HMPDJ02",328,0)
 I $G(USERID) D
"RTN","HMPDJ02",329,0)
 . S VIT("enteredByUid")=$$SETUID^HMPUTILS("user",,USERID)
"RTN","HMPDJ02",330,0)
 . S VIT("enteredByName")=$P($G(^VA(200,USERID,0)),U,1)
"RTN","HMPDJ02",331,0)
 D FACILITY^HMPUTILS(FAC,"VIT")
"RTN","HMPDJ02",332,0)
 S VIT("lastUpdateTime")=$$EN^HMPSTMP("vital")
"RTN","HMPDJ02",333,0)
 S VIT("stampTime")=VIT("lastUpdateTime") ; RHL 20141231
"RTN","HMPDJ02",334,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ02",335,0)
 I $G(HMPMETA) D ADD^HMPMETA("vital",VIT("uid"),VIT("stampTime")) Q:HMPMETA=1  ;US11019/US6734
"RTN","HMPDJ02",336,0)
 D ADD^HMPDJ("VIT","vital")
"RTN","HMPDJ02",337,0)
 Q
"RTN","HMPDJ02",338,0)
 ;
"RTN","HMPDJ02",339,0)
HMP(COLL) ; -- HMP Patient Objects
"RTN","HMPDJ02",340,0)
 N ID I $L($G(HMPID)) D  Q
"RTN","HMPDJ02",341,0)
 . S ID=+HMPID I 'ID S ID=+$O(^HMP(800000.1,"B",HMPID,0)) ;IEN or UID
"RTN","HMPDJ02",342,0)
 . D:ID HMP1(800000.1,ID)
"RTN","HMPDJ02",343,0)
 Q:$G(COLL)=""  ;error
"RTN","HMPDJ02",344,0)
 S ID=0 F  S ID=$O(^HMP(800000.1,"C",DFN,COLL,ID)) Q:ID<1  D HMP1(800000.1,ID)
"RTN","HMPDJ02",345,0)
 Q
"RTN","HMPDJ02",346,0)
HMP1(FNUM,ID) ; -- [patient] object
"RTN","HMPDJ02",347,0)
 N I,X,HMPY
"RTN","HMPDJ02",348,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ02",349,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=$G(DFN)
"RTN","HMPDJ02",350,0)
 S ERRMSG="A problem occurred retreiving record "_ID_" for the HMP domain"
"RTN","HMPDJ02",351,0)
 S I=0 F  S I=$O(^HMP(FNUM,ID,1,I)) Q:I<1  S X=$G(^(I,0)),HMPY(I)=X
"RTN","HMPDJ02",352,0)
 I $D(HMPY) D  ;already encoded JSON
"RTN","HMPDJ02",353,0)
 . S HMPI=HMPI+1 S:HMPI>1 @HMP@(HMPI,.3)=","
"RTN","HMPDJ02",354,0)
 . M @HMP@(HMPI)=HMPY
"RTN","HMPDJ02",355,0)
 . ; -- chunk data if from DQINIT^HMPDJFSP ; i.e. HMPCHNK defined ;*S68-JCH*
"RTN","HMPDJ02",356,0)
 . D CHNKCHK^HMPDJFSP(.HMP,.HMPI) ;*S68-JCH*
"RTN","HMPDJ02",357,0)
 Q
"RTN","HMPDJ02A")
0^58^B2049795^n/a
"RTN","HMPDJ02A",1,0)
HMPDJ02A ;ASMR/MKB/JD,CK,CPC,PB - Problems,Allergies,Vitals ;Jan 17, 2107 09:56:26
"RTN","HMPDJ02A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Jan 17, 2017;Build 15
"RTN","HMPDJ02A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ02A",4,0)
 ;
"RTN","HMPDJ02A",5,0)
 ; External References          DBIA#
"RTN","HMPDJ02A",6,0)
 ; -------------------          ----- 
"RTN","HMPDJ02A",7,0)
 ; ^AUPNVSIT(                    2028
"RTN","HMPDJ02A",8,0)
 ;
"RTN","HMPDJ02A",9,0)
 Q
"RTN","HMPDJ02A",10,0)
GETVIEN(DFNN,VISITDT)  ;JL; get the Visit IEN from VISIT file based on patient ID and Datetime
"RTN","HMPDJ02A",11,0)
 Q:'+$G(DFNN)!'$L(VISITDT) -1  ;return -1 if bad parameter
"RTN","HMPDJ02A",12,0)
 N REVDT,VISITIEN
"RTN","HMPDJ02A",13,0)
 S REVDT=9999999-$P(VISITDT,".",1)_$S($P(VISITDT,".",2)'="":"."_$P(VISITDT,".",2),1:"")
"RTN","HMPDJ02A",14,0)
 S VISITIEN=$O(^AUPNVSIT("AA",DFNN,REVDT,""))  ; using "AA" cross-reference
"RTN","HMPDJ02A",15,0)
 Q:VISITIEN="" -1
"RTN","HMPDJ02A",16,0)
 Q VISITIEN
"RTN","HMPDJ02A",17,0)
 ;
"RTN","HMPDJ02A",18,0)
VSTIEN(VSTIEN) ; Jan 17, 2017 - PB - DE6877 - Function to check for the visit and the patient to exist for the visit in the Visit File
"RTN","HMPDJ02A",19,0)
 ; INPUT - VSTIEN the IEN for the visit in the Visit File
"RTN","HMPDJ02A",20,0)
 ; OUTPUT - 1 = missing required data element, 0 = required data elements are present
"RTN","HMPDJ02A",21,0)
 N VSTDATA
"RTN","HMPDJ02A",22,0)
 S VSTDATA=$G(^AUPNVSIT(VSTIEN,0))  ;ICR 2028
"RTN","HMPDJ02A",23,0)
 Q:$P(VSTDATA,U)="" 1  ; if the .01 field is null quit and return 1
"RTN","HMPDJ02A",24,0)
 Q:$P(VSTDATA,U,5)="" 1  ; if field .05 is null quit and return 1
"RTN","HMPDJ02A",25,0)
 Q 0
"RTN","HMPDJ04")
0^4^B91523266^B91911154
"RTN","HMPDJ04",1,0)
HMPDJ04 ;SLC/MKB,ASMR/RRB,ASF,PB - Appointments,Visits;May 24, 2016 15:21:17
"RTN","HMPDJ04",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJ04",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ04",4,0)
 ;
"RTN","HMPDJ04",5,0)
 ; External References          DBIA#
"RTN","HMPDJ04",6,0)
 ; -------------------          -----
"RTN","HMPDJ04",7,0)
 ; ^DGS(41.1                     3796
"RTN","HMPDJ04",8,0)
 ; ^DIC(42                      10039
"RTN","HMPDJ04",9,0)
 ; ^SC                          10040
"RTN","HMPDJ04",10,0)
 ; ^VA(200                      10060
"RTN","HMPDJ04",11,0)
 ; DIQ                           2056
"RTN","HMPDJ04",12,0)
 ; ICPTCOD                       1995
"RTN","HMPDJ04",13,0)
 ; ENCEVENT^PXKENC               1894  ;DE6363 - JD - 8/23/16
"RTN","HMPDJ04",14,0)
 ; SDAMA301                      4433
"RTN","HMPDJ04",15,0)
 ; XLFDT                        10103
"RTN","HMPDJ04",16,0)
 ; XUAF4                         2171
"RTN","HMPDJ04",17,0)
 ; EDP(230                       6275
"RTN","HMPDJ04",18,0)
 ; SC(                             93
"RTN","HMPDJ04",19,0)
 ;
"RTN","HMPDJ04",20,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ04",21,0)
 Q
"RTN","HMPDJ04",22,0)
 ;
"RTN","HMPDJ04",23,0)
SDAM1 ; -- appointment ^TMP($J,"SDAMA301",DFN,HMPDT)
"RTN","HMPDJ04",24,0)
 N NODE,HLOC,APPT,X,STS,CLS,FAC,SV,PRV
"RTN","HMPDJ04",25,0)
 S NODE=$G(^TMP($J,"SDAMA301",DFN,HMPDT))
"RTN","HMPDJ04",26,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ04",27,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ04",28,0)
 S ERRMSG="A problem occurred converting a record for the appointment domain"
"RTN","HMPDJ04",29,0)
 ;
"RTN","HMPDJ04",30,0)
 S HLOC=$P(NODE,U,2),X="A;"_HMPDT_";"_+HLOC
"RTN","HMPDJ04",31,0)
 I $L($G(ID)),$P(ID,";",1,3)'=X Q
"RTN","HMPDJ04",32,0)
 S APPT("localId")=X,APPT("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",33,0)
 S X=$P(NODE,U,10),APPT("typeCode")=$P(X,";"),APPT("typeName")=$P(X,";",2)
"RTN","HMPDJ04",34,0)
 S STS=$P(NODE,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","HMPDJ04",35,0)
 S STS=$P($P(NODE,U,22),";",1,2)  ;DE4469 - PB - APR 26, 2016 changed from using the SDAMA308 API to using the SDAMA301 Supported API to get appointment status ICR 4433
"RTN","HMPDJ04",36,0)
 S APPT("dateTime")=$$JSONDT^HMPUTILS(HMPDT)
"RTN","HMPDJ04",37,0)
 S:$L($P(NODE,U,6)) APPT("comment")=$P(NODE,U,6)
"RTN","HMPDJ04",38,0)
 S:$P(NODE,U,9) APPT("checkIn")=$$JSONDT^HMPUTILS($P(NODE,U,9))
"RTN","HMPDJ04",39,0)
 S:$P(NODE,U,11) APPT("checkOut")=$$JSONDT^HMPUTILS($P(NODE,U,11))
"RTN","HMPDJ04",40,0)
 I $L(ID,";")>3 S APPT("reasonName")=$P(ID,";",4),PRV=+$P(ID,";",5) ;from SDAM event
"RTN","HMPDJ04",41,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"APPT") I HLOC D
"RTN","HMPDJ04",42,0)
 . S APPT("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",43,0)
 . S APPT("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",44,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1) S:X]"" APPT("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",45,0)
 . S X=$$AMIS^HMPDVSIT(+$P(NODE,U,13))
"RTN","HMPDJ04",46,0)
 . S:$L(X) APPT("stopCodeUid")="urn:va:stop-code:"_$P(X,U),APPT("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",47,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",48,0)
 . I SV S APPT("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",49,0)
 . ;find default provider
"RTN","HMPDJ04",50,0)
 . S:'$G(PRV) PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","HMPDJ04",51,0)
 .. N HMPP,I,FIRST
"RTN","HMPDJ04",52,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","HMPP")
"RTN","HMPDJ04",53,0)
 .. S FIRST=$O(HMPP(44.1,"")),I=""
"RTN","HMPDJ04",54,0)
 .. F  S I=$O(HMPP(44.1,I)) Q:I=""  I $G(HMPP(44.1,I,.02,"I")) S PRV=$G(HMPP(44.1,I,.01,"I")) Q
"RTN","HMPDJ04",55,0)
 .. I 'PRV,FIRST S PRV=$G(HMPP(44.1,FIRST,.01,"I"))
"RTN","HMPDJ04",56,0)
 I $G(PRV) S APPT("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,PRV),APPT("providers",1,"providerName")=$$GET1^DIQ(200,PRV_",",.01)  ;DE2818
"RTN","HMPDJ04",57,0)
 S APPT("patientClassCode")="urn:va:patient-class:"_$S(CLS="I":"IMP",1:"AMB")
"RTN","HMPDJ04",58,0)
 S APPT("patientClassName")=$S(CLS="I":"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",59,0)
 S APPT("categoryCode")="urn:va:encounter-category:OV",APPT("categoryName")="Outpatient Visit"
"RTN","HMPDJ04",60,0)
 S APPT("appointmentStatus")=$P(STS,";",2)
"RTN","HMPDJ04",61,0)
 S APPT("lastUpdateTime")=$$EN^HMPSTMP("appointment") ;RHL 20150102
"RTN","HMPDJ04",62,0)
 S APPT("stampTime")=APPT("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",63,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",64,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",APPT("uid"),APPT("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",65,0)
 D ADD^HMPDJ("APPT","appointment")
"RTN","HMPDJ04",66,0)
 Q
"RTN","HMPDJ04",67,0)
 ;
"RTN","HMPDJ04",68,0)
DGS ; scheduled admissions [from APPOINTM^HMPDJ0]
"RTN","HMPDJ04",69,0)
 ;DE2818, ^DGS(41.1) references ICR 3796
"RTN","HMPDJ04",70,0)
 S HMPA=0 F  S HMPA=$O(^DGS(41.1,"B",DFN,HMPA)) Q:HMPA<1  D  Q:HMPI'<HMPMAX
"RTN","HMPDJ04",71,0)
 . S HMPX=$G(^DGS(41.1,HMPA,0))
"RTN","HMPDJ04",72,0)
 . I $L($G(ID)),+$P(ID,";",2)=+$P(HMPX,U,2) D DGS1(HMPA) Q
"RTN","HMPDJ04",73,0)
 . Q:$P(HMPX,U,13)  Q:$P(HMPX,U,17)  ;cancelled or admitted
"RTN","HMPDJ04",74,0)
 . S X=$P(HMPX,U,2) Q:X<HMPSTART!(X>HMPSTOP)  ;out of date range
"RTN","HMPDJ04",75,0)
 . D DGS1(HMPA)
"RTN","HMPDJ04",76,0)
 Q
"RTN","HMPDJ04",77,0)
 ;
"RTN","HMPDJ04",78,0)
DGS1(IFN) ; -- scheduled admission
"RTN","HMPDJ04",79,0)
 N ADM,X0,DATE,HLOC,FAC,SV,X
"RTN","HMPDJ04",80,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted (DE2818, ICR 3796)
"RTN","HMPDJ04",81,0)
 ;
"RTN","HMPDJ04",82,0)
 S DATE=+$P(X0,U,2),HLOC=+$$GET1^DIQ(42,+$P(X0,U,8)_",",.01)  ;DE2818, ICR 10039
"RTN","HMPDJ04",83,0)
 S X="H;"_DATE,ADM("localId")=X,ADM("uid")=$$SETUID^HMPUTILS("appointment",DFN,X)
"RTN","HMPDJ04",84,0)
 S ADM("dateTime")=$$JSONDT^HMPUTILS(DATE)
"RTN","HMPDJ04",85,0)
 S FAC=$$FAC^HMPD(+HLOC) D FACILITY^HMPUTILS(FAC,"ADM") I HLOC D
"RTN","HMPDJ04",86,0)
 . S HLOC=$$GET1^DIQ(44,(+HLOC)_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",87,0)
 . S ADM("uid")=ADM("uid")_";"_+HLOC
"RTN","HMPDJ04",88,0)
 . S ADM("locationName")=$P(HLOC,";",2)
"RTN","HMPDJ04",89,0)
 . S X=$$GET1^DIQ(44,(+HLOC)_",",1)  S:X]"" ADM("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",90,0)
 . S ADM("locationUid")=$$SETUID^HMPUTILS("location",,+HLOC)
"RTN","HMPDJ04",91,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",8,"I"),X=$$AMIS^HMPDVSIT(X)
"RTN","HMPDJ04",92,0)
 . S:$L(X) ADM("stopCodeUid")="urn:va:stop-code:"_$P(X,U),ADM("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",93,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDJ04",94,0)
 . I SV S ADM("service")=$$SERV^HMPDSDAM(SV)
"RTN","HMPDJ04",95,0)
 S X=+$P(X0,U,5) I X D
"RTN","HMPDJ04",96,0)
 . S ADM("providers",1,"providerUid")=$$SETUID^HMPUTILS("user",,X)
"RTN","HMPDJ04",97,0)
 . S ADM("providers",1,"providerName")=$$GET1^DIQ(200,X_",",.01)  ;DE2818
"RTN","HMPDJ04",98,0)
 S ADM("patientClassCode")="urn:va:patient-class:IMP",ADM("patientClassName")="Inpatient"
"RTN","HMPDJ04",99,0)
 S ADM("categoryCode")="urn:va:encounter-category:AD",ADM("categoryName")="Admission"
"RTN","HMPDJ04",100,0)
 S ADM("appointmentStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","HMPDJ04",101,0)
 S ADM("lastUpdateTime")=$$EN^HMPSTMP("adm") ;RHL 20150102
"RTN","HMPDJ04",102,0)
 S ADM("stampTime")=ADM("lastUpdateTime") ; RHL 20150102
"RTN","HMPDJ04",103,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",104,0)
 I $G(HMPMETA) D ADD^HMPMETA("appointment",ADM("uid"),ADM("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",105,0)
 D ADD^HMPDJ("ADM","appointment")
"RTN","HMPDJ04",106,0)
 Q
"RTN","HMPDJ04",107,0)
 ;
"RTN","HMPDJ04",108,0)
VSIT1(ID) ; -- visit
"RTN","HMPDJ04",109,0)
 N VST,X0,X15,X,FAC,LOC,CATG,AMIS,INPT,DA,PS
"RTN","HMPDJ04",110,0)
 I $G(ID)?1"H"1.N D ADM^HMPDJ04A(ID) Q
"RTN","HMPDJ04",111,0)
 ;DE2818, ICR 6275
"RTN","HMPDJ04",112,0)
 I $D(^EDP(230,"V",ID)),$L($T(EDP1^HMPDJ04E)) D EDP1^HMPDJ04E(ID) Q
"RTN","HMPDJ04",113,0)
 ; ENCEVENT^PXAPI(ID)
"RTN","HMPDJ04",114,0)
 ;
"RTN","HMPDJ04",115,0)
 ; DE2818, ^AUPNVSIT - ICR 2028
"RTN","HMPDJ04",116,0)
 S X0=$G(^AUPNVSIT(ID,0)),X15=$G(^(150)) Q:X0=""  ;pjh - quit if visit already deleted
"RTN","HMPDJ04",117,0)
 ; X0=$G(^TMP("PXKENC",$J,ID,"VST",ID,0)),X15=$G(^(150))
"RTN","HMPDJ04",118,0)
 ;Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  Q:$P(X0,U,12)  ;primary, not historical or child
"RTN","HMPDJ04",119,0)
 I $P(X0,U,7)="H" D ADM^HMPDJ04A(ID,+X0) Q
"RTN","HMPDJ04",120,0)
 S VST("localId")=ID,VST("uid")=$$SETUID^HMPUTILS("visit",DFN,ID)
"RTN","HMPDJ04",121,0)
 S VST("dateTime")=$$JSONDT^HMPUTILS(+X0)  ;(#.01) VISIT/ADMIT DATE&TIME
"RTN","HMPDJ04",122,0)
 S:$P(X0,U,18) VST("checkOut")=$$JSONDT^HMPUTILS($P(X0,U,18))  ;(#.18) CHECK OUT DATE&TIME
"RTN","HMPDJ04",123,0)
 S:$P(X0,U,12) VST("parentUid")=$$SETUID^HMPUTILS("visit",DFN,$P(X0,U,12))  ;(#.12) PARENT VISIT LINK
"RTN","HMPDJ04",124,0)
 ;(#.06) LOC. OF ENCOUNTER, (#.07) SERVICE CATEGORY, (#.22) HOSPITAL LOCATION
"RTN","HMPDJ04",125,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDJ04",126,0)
 S:FAC X=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",127,0)
 S:'FAC X=$$FAC^HMPD(LOC) D FACILITY^HMPUTILS(X,"VST")
"RTN","HMPDJ04",128,0)
 S X=$S(CATG="H":"AD",CATG="C":"CR",CATG="T":"TC",CATG="N":"U",CATG="R":"NH","D^X"[CATG:"O",1:"OV")
"RTN","HMPDJ04",129,0)
 S VST("categoryCode")="urn:va:encounter-category:"_X
"RTN","HMPDJ04",130,0)
 S VST("categoryName")=$S(X="AD":"Admission",X="CR":"Chart Review",X="TC":"Phone Contact",X="U":"Unknown",X="NH":"Nursing Home",X="O":"Other",1:"Outpatient Visit")
"RTN","HMPDJ04",131,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)  ;(#15002) PATIENT STATUS IN/OUT
"RTN","HMPDJ04",132,0)
 S X=$P(X15,U,3) S:$L(X) VST("encounterType")=X  ;(#15003) ENCOUNTER TYPE
"RTN","HMPDJ04",133,0)
 S X=$$CPT(ID) S:X VST("typeName")=$P($$CPT^ICPTCOD(X),U,3)
"RTN","HMPDJ04",134,0)
 I 'X S VST("typeName")=$S('INPT&LOC:$$GET1^DIQ(44,LOC_",",.01)_" VISIT",1:$$CATG^HMPDVSIT(CATG))  ;DE2818
"RTN","HMPDJ04",135,0)
 S VST("patientClassCode")="urn:va:patient-class:"_$S(INPT:"IMP",1:"AMB")
"RTN","HMPDJ04",136,0)
 S VST("patientClassName")=$S(INPT:"Inpatient",1:"Ambulatory")
"RTN","HMPDJ04",137,0)
 ; US12589 - add createdByName field to extract
"RTN","HMPDJ04",138,0)
 S X=$$GET1^DIQ(200,$P(X0,U,23)_",",".01") S:$G(X)="" X="UNKNOWN"
"RTN","HMPDJ04",139,0)
 S VST("createdByName")=X
"RTN","HMPDJ04",140,0)
 ;(#.08) DSS ID
"RTN","HMPDJ04",141,0)
 S X=$P(X0,U,8) S:X AMIS=$$AMIS^HMPDVSIT(X) I LOC D
"RTN","HMPDJ04",142,0)
 . I 'X N AMISARR D GETS^DIQ(44,LOC_",",8,"I","AMISARR","ERR") I $G(AMISARR(44,LOC_",",8,"I"))'="" S X=$G(AMISARR(44,LOC_",",8,"I")),AMIS=$$AMIS^HMPDVSIT(X)  ;DE5300 - PB - Jun 30 2015 changed call to get stop code name and number
"RTN","HMPDJ04",143,0)
 . S VST("locationUid")=$$SETUID^HMPUTILS("location",,+LOC)
"RTN","HMPDJ04",144,0)
 . S X=$$GET1^DIQ(44,LOC_",",1) S:X]"" VST("shortLocationName")=X  ;DE2818, (#1) ABBREVIATION
"RTN","HMPDJ04",145,0)
 . S VST("locationName")=$$GET1^DIQ(44,LOC_",",.01)  ;DE2818, (#.01) NAME
"RTN","HMPDJ04",146,0)
 . S VST("locationOos")=$S($$GET1^DIQ(44,LOC_",",50.01,"I"):"true",1:"false")  ;DE2818, (#50.01) OCCASION OF SERVICE CLINIC?
"RTN","HMPDJ04",147,0)
 . S X=$$SERV^HMPDVSIT($$GET1^DIQ(44,LOC_",",9.5,"I")) S:$L(X) VST("service")=X  ;DE2818, (#9.5) TREATING SPECIALTY
"RTN","HMPDJ04",148,0)
 S:$D(AMIS) VST("stopCodeUid")="urn:va:stop-code:"_$P(AMIS,U),VST("stopCodeName")=$P(AMIS,U,2)
"RTN","HMPDJ04",149,0)
 S X=$$POV(ID) S:$L(X) VST("reasonUid")=$$SETNCS^HMPUTILS("icd",$P(X,U)),VST("reasonName")=$P(X,U,2)
"RTN","HMPDJ04",150,0)
 ; provider(s), DE2818 - ^AUPNVPRV references - ICR 2316
"RTN","HMPDJ04",151,0)
 S DA=0 F  S DA=$O(^AUPNVPRV("AD",ID,DA)) Q:DA<1  D
"RTN","HMPDJ04",152,0)
 . S X0=$G(^AUPNVPRV(DA,0))
"RTN","HMPDJ04",153,0)
 . I $P(X0,U,4)="P" D PROV("VST",DA,+X0,"P",1) Q  ;primary
"RTN","HMPDJ04",154,0)
 . D:'$D(PS(+X0)) PROV("VST",DA,+X0,"S")          ;secondary
"RTN","HMPDJ04",155,0)
 . S PS(+X0)=""                                   ; (no duplicates)
"RTN","HMPDJ04",156,0)
 K ^TMP("PXKENC",$J,ID)
"RTN","HMPDJ04",157,0)
 S VST("lastUpdateTime")=$$EN^HMPSTMP("visit") ;RHL 20150103
"RTN","HMPDJ04",158,0)
 S VST("stampTime")=VST("lastUpdateTime") ; RHL 20150103
"RTN","HMPDJ04",159,0)
 ;US6734 - pre-compile metastamp
"RTN","HMPDJ04",160,0)
 I $G(HMPMETA) D ADD^HMPMETA("visit",VST("uid"),VST("stampTime")) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPDJ04",161,0)
 D ADD^HMPDJ("VST","visit")
"RTN","HMPDJ04",162,0)
 Q
"RTN","HMPDJ04",163,0)
 ;
"RTN","HMPDJ04",164,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDJ04",165,0)
 ;DE2818 - Change to use API and not directly access the global
"RTN","HMPDJ04",166,0)
 N DA,Y S Y=""
"RTN","HMPDJ04",167,0)
 ;DE4198 - remove use of ^AUPNVCPT
"RTN","HMPDJ04",168,0)
 D ENCEVENT^PXKENC(VISIT,1)  ;ICR 1894
"RTN","HMPDJ04",169,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"CPT",DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",170,0)
 . I +$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))?1"992"2N S Y=+$G(^TMP("PXKENC",$J,VISIT,"CPT",DA,0))
"RTN","HMPDJ04",171,0)
 Q Y
"RTN","HMPDJ04",172,0)
 ;
"RTN","HMPDJ04",173,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDJ04",174,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDJ04",175,0)
 ;DE2818, ^AUPNVPOV( - ICR 3094
"RTN","HMPDJ04",176,0)
 S DA=0 F  S DA=$O(^AUPNVPOV("AD",VISIT,DA)) Q:DA<1  D  Q:$L(Y)
"RTN","HMPDJ04",177,0)
 . S X0=$G(^AUPNVPOV(DA,0)) Q:$P(X0,U,12)'="P"
"RTN","HMPDJ04",178,0)
 . S X=+$P(X0,U,4),ICD=$$ICD^HMPDVSIT(+X0)
"RTN","HMPDJ04",179,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDJ04",180,0)
 Q Y
"RTN","HMPDJ04",181,0)
 ;
"RTN","HMPDJ04",182,0)
PROV(ARR,I,IEN,ROLE,PRIM) ; -- add providers
"RTN","HMPDJ04",183,0)
 S @ARR@("providers",I,"providerUid")=$$SETUID^HMPUTILS("user",,+IEN)
"RTN","HMPDJ04",184,0)
 S @ARR@("providers",I,"providerName")=$$GET1^DIQ(200,(+IEN)_",",.01)  ;DE2818
"RTN","HMPDJ04",185,0)
 S @ARR@("providers",I,"role")=ROLE
"RTN","HMPDJ04",186,0)
 S:$G(PRIM) @ARR@("providers",I,"primary")="true"
"RTN","HMPDJ04",187,0)
 Q
"RTN","HMPDJ04",188,0)
 ;
"RTN","HMPDJ04",189,0)
NAME(IEN) ; -- Return a string 'name' for the visit
"RTN","HMPDJ04",190,0)
 N Y,X0,LOC,DATE
"RTN","HMPDJ04",191,0)
 S X0=$G(^AUPNVSIT(+$G(IEN),0)),Y=""  ;DE2818, ICR 2028
"RTN","HMPDJ04",192,0)
 S DATE=+X0,LOC=+$P(X0,U,22) S:LOC LOC=$$GET1^DIQ(44,LOC_",",.01)_" "  ;DE2818
"RTN","HMPDJ04",193,0)
 S Y=LOC_$$FMTE^XLFDT(DATE,"1D") ;Mon DD, YYYY
"RTN","HMPDJ04",194,0)
 Q Y
"RTN","HMPDJ04",195,0)
 ;
"RTN","HMPDJ04",196,0)
FAC(IEN)  ; -- Return Facility for the visit
"RTN","HMPDJ04",197,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",198,0)
 N FAC S FAC=+$$GET1^DIQ(9000010,IEN_",",.06,"I")
"RTN","HMPDJ04",199,0)
 Q:FAC $$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDJ04",200,0)
 S FAC=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",201,0)
 Q $$FAC^HMPD(FAC)
"RTN","HMPDJ04",202,0)
 ;
"RTN","HMPDJ04",203,0)
STCODE(IEN)  ;  -- Return stop code information for the visit Q:'+$G(IEN) ""
"RTN","HMPDJ04",204,0)
 Q:'+$G(IEN) ""
"RTN","HMPDJ04",205,0)
 N STCODE,LIEN S STCODE=+$$GET1^DIQ(9000010,IEN_",",.08,"I")
"RTN","HMPDJ04",206,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",207,0)
 S LIEN=+$$GET1^DIQ(9000010,IEN_",",.22,"I")
"RTN","HMPDJ04",208,0)
 I LIEN S STCODE=+$$GET1^DIQ(44,LIEN_",",8,"I")
"RTN","HMPDJ04",209,0)
 Q:STCODE $$AMIS^HMPDVSIT(STCODE)
"RTN","HMPDJ04",210,0)
 Q ""
"RTN","HMPDJ04",211,0)
 ;
"RTN","HMPDJ04",212,0)
STOPCODE(X,Y)  ;  -- Return stop code info for JSON
"RTN","HMPDJ04",213,0)
 S @Y@("stopCodeUid")="urn:va:stop-code:"_$P(X,U)
"RTN","HMPDJ04",214,0)
 S @Y@("stopCodeName")=$P(X,U,2)
"RTN","HMPDJ04",215,0)
 Q
"RTN","HMPDJ04",216,0)
 ;
"RTN","HMPDJ08A")
0^43^B51646478^B50353978
"RTN","HMPDJ08A",1,0)
HMPDJ08A ;SLC/MKB,ASMR/BL,CPC - TIU Documents continued;11/3/16 3:10:30pm
"RTN","HMPDJ08A",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDJ08A",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJ08A",4,0)
 ;
"RTN","HMPDJ08A",5,0)
 ; Called by HMPDJ08
"RTN","HMPDJ08A",6,0)
 ;
"RTN","HMPDJ08A",7,0)
 ;pass HMPXX from CP1 section 12.2.14 agilex/js
"RTN","HMPDJ08A",8,0)
 ;
"RTN","HMPDJ08A",9,0)
 ; External References          DBIA#
"RTN","HMPDJ08A",10,0)
 ; -------------------          -----
"RTN","HMPDJ08A",11,0)
 ; ^DPT                         10035
"RTN","HMPDJ08A",12,0)
 ; ^LR                            525
"RTN","HMPDJ08A",13,0)
 ; ^RADPT                        2480
"RTN","HMPDJ08A",14,0)
 ; ^RARPT                        8000005
"RTN","HMPDJ08A",15,0)
 ; ^SC                          10040
"RTN","HMPDJ08A",16,0)
 ; ^TMP("MDHSP" [MDPS1]          4230
"RTN","HMPDJ08A",17,0)
 ; ^VA(200                      10060
"RTN","HMPDJ08A",18,0)
 ; %DT                          10003
"RTN","HMPDJ08A",19,0)
 ; DIQ                           2056
"RTN","HMPDJ08A",20,0)
 ; GMRCGUIB                      2980
"RTN","HMPDJ08A",21,0)
 ; LR7OR1,^TMP("LRRR"            2503
"RTN","HMPDJ08A",22,0)
 ; MCARUTL3                      3280
"RTN","HMPDJ08A",23,0)
 ; PXAPI                         1894
"RTN","HMPDJ08A",24,0)
 ; RAO7PC1                  2043,2265
"RTN","HMPDJ08A",25,0)
 ; RAO7PC3                       2877
"RTN","HMPDJ08A",26,0)
 ;
"RTN","HMPDJ08A",27,0)
 ; All tags expect DFN, ID, [HMPSTART, HMPSTOP, HMPMAX, HMPTEXT]
"RTN","HMPDJ08A",28,0)
 ;
"RTN","HMPDJ08A",29,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",30,0)
 ; documentClass = CLINICAL PROCEDURES
"RTN","HMPDJ08A",31,0)
 ; nationalTitle = 4696566^PROCEDURE REPORT
"RTN","HMPDJ08A",32,0)
 ;       Service = 4696471^PROCEDURE
"RTN","HMPDJ08A",33,0)
 ;          Type = 4696123^REPORT
"RTN","HMPDJ08A",34,0)
 Q
"RTN","HMPDJ08A",35,0)
 ;
"RTN","HMPDJ08A",36,0)
CP(DFN,BEG,END,MAX) ; -- Medicine reports
"RTN","HMPDJ08A",37,0)
 N HMPN,HMPX,RTN,TIUN,CONS,HMPD,I,DA,X,Y,%DT,DATE,GBL
"RTN","HMPDJ08A",38,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDJ08A",39,0)
 D MDPS1^HMPDJ03(DFN,BEG,END,MAX)             ;gets ^TMP("MDHSP",$J)
"RTN","HMPDJ08A",40,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDJ08A",41,0)
 . N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",42,0)
 . S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",43,0)
 . S ERRMSG="A problem occurred converting a medicine report."
"RTN","HMPDJ08A",44,0)
 . S RTN=$P(HMPX,U,3,4)  Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDJ08A",45,0)
 . S TIUN=+$P(HMPX,U,14)
"RTN","HMPDJ08A",46,0)
 . I TIUN D EN1^HMPDJ08(TIUN,38)              ;38=TIU Clinical Document
"RTN","HMPDJ08A",47,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS)
"RTN","HMPDJ08A",48,0)
 . K DA S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  D
"RTN","HMPDJ08A",49,0)
 .. S DA=+HMPD(50,I) Q:DA=TIUN
"RTN","HMPDJ08A",50,0)
 .. D EN1^HMPDJ08(DA,38)
"RTN","HMPDJ08A",51,0)
 . Q:TIUN!$G(DA)                              ;done [got TIU note(s)]
"RTN","HMPDJ08A",52,0)
 . Q:RTN="PR702^MDPS1"                        ;CP, but no TIU note yet
"RTN","HMPDJ08A",53,0)
 . Q:RTN="PRPRO^MDPS4"                        ;non-CP procedure
"RTN","HMPDJ08A",54,0)
 . ; find ID for pre-TIU report
"RTN","HMPDJ08A",55,0)
 . S X=$P(HMPX,U,6),%DT="TXS" D ^%DT Q:Y'>0  S DATE=Y
"RTN","HMPDJ08A",56,0)
 . S GBL=+$P(HMPX,U,2)_";"_$$ROOT^HMPDMC(DFN,$P(HMPX,U,11),DATE)
"RTN","HMPDJ08A",57,0)
 . I GBL S X=$$CP1(DFN,GBL)
"RTN","HMPDJ08A",58,0)
 . I $G(HMPXX)]"" D EN1^HMPDJ08(HMPXX,"CP") ;  pass HMPXX from CP1 section 12.2.14 js
"RTN","HMPDJ08A",59,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",60,0)
 K HMPXX
"RTN","HMPDJ08A",61,0)
 Q
"RTN","HMPDJ08A",62,0)
 ;
"RTN","HMPDJ08A",63,0)
CP1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE] /DE2818
"RTN","HMPDJ08A",64,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",65,0)
 N Y,HMPY,HMPFN,X,NAME,DATE,STS,USER,SIGN,TEXT
"RTN","HMPDJ08A",66,0)
 S HMPFN=+$P(ID,"(",2) ; example 699.5
"RTN","HMPDJ08A",67,0)
 D MEDLKUP^MCARUTL3(.HMPY,HMPFN,+ID)
"RTN","HMPDJ08A",68,0)
 I HMPY<1 Q ""  ;error in CP
"RTN","HMPDJ08A",69,0)
 S NAME=$P(HMPY,U,9),DATE=$P(HMPY,U,6)
"RTN","HMPDJ08A",70,0)
 S X=$$GET1^DIQ(HMPFN,+ID_",",1506)
"RTN","HMPDJ08A",71,0)
 S STS=$S($L(X):X,1:"COMPLETED")
"RTN","HMPDJ08A",72,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",701,"I"),(USER,SIGN)=""
"RTN","HMPDJ08A",73,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",74,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",1503,"I")
"RTN","HMPDJ08A",75,0)
 S:X SIGN="//"_X_";"_$P($G(^VA(200,X,0)),U)_";"_$$GET1^DIQ(HMPFN,+ID_",",1505,"I") ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",76,0)
 ; VST=$$GET1^DIQ(HMPFN,+ID_",",900,"I")
"RTN","HMPDJ08A",77,0)
 S Y=ID_U_NAME_U_DATE_U_U_USER_U_U_STS_"^^^2461^"_SIGN
"RTN","HMPDJ08A",78,0)
 S HMPXX=ID_U_NAME_U_DATE_U_U_USER_U_U_STS_"^^^2461^"_SIGN ; 12.2.14 js
"RTN","HMPDJ08A",79,0)
 S:$G(HMPTEXT) TEXT=$$TEXT^HMPDMC(DFN,ID,NAME) ;^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",80,0)
 Q Y
"RTN","HMPDJ08A",81,0)
 ;
"RTN","HMPDJ08A",82,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",83,0)
 ; documentClass = LR LABORATORY REPORTS
"RTN","HMPDJ08A",84,0)
 ; nationalTitle = 4697105^LABORATORY NOTE
"RTN","HMPDJ08A",85,0)
 ;       Subject = 4697104^LABORATORY
"RTN","HMPDJ08A",86,0)
 ;          Type = 4696120^NOTE
"RTN","HMPDJ08A",87,0)
 ;
"RTN","HMPDJ08A",88,0)
LR(DFN,BEG,END,MAX) ; -- Lab reports
"RTN","HMPDJ08A",89,0)
 N HMPSUB,HMPIDT,HMPITM,HMPTIU,HMPXID,LRDFN,IVDT,HMPN,DA
"RTN","HMPDJ08A",90,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDJ08A",91,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDJ08A",92,0)
 S LRDFN=+$G(^DPT(DFN,"LR")),IVDT=9999999-+$G(^LR(LRDFN,"AU")) ;LR7OB63D error
"RTN","HMPDJ08A",93,0)
 K ^TMP("LRRR",$J,DFN) D RR^LR7OR1(DFN,,BEG,END,"MIAP",,,MAX)
"RTN","HMPDJ08A",94,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDJ08A",95,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDJ08A",96,0)
 .. S HMPTIU=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDJ08A",97,0)
 .. K HMPITM S HMPXID=HMPSUB_";"_HMPIDT
"RTN","HMPDJ08A",98,0)
 .. I '$O(@HMPTIU@(0)) S HMPX=$$LR1(DFN,HMPXID) D EN1^HMPDJ08(HMPX,"LR") Q
"RTN","HMPDJ08A",99,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPTIU@(HMPN)) Q:HMPN<1  D  ;38=TIU Clin Doc
"RTN","HMPDJ08A",100,0)
 ... S DA=+$P($G(@HMPTIU@(HMPN,0)),U,2)
"RTN","HMPDJ08A",101,0)
 ... D:DA EN1^HMPDJ08(DA,38)
"RTN","HMPDJ08A",102,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",103,0)
 Q
"RTN","HMPDJ08A",104,0)
 ;
"RTN","HMPDJ08A",105,0)
LR1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","HMPDJ08A",106,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",107,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",108,0)
 S ERRMSG="A problem occurred converting lab report "_ID
"RTN","HMPDJ08A",109,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",110,0)
 N Y,SUB,IDT,LRDFN,LR,NAME,LOC,USER,VST,SIGN,TEXT
"RTN","HMPDJ08A",111,0)
 K ^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",112,0)
 S SUB=$P(ID,";"),IDT=+$P(ID,";",2),LRDFN=$G(^DPT(DFN,"LR")) ;ICR 10035 DE 2818 ASF 11/10/15
"RTN","HMPDJ08A",113,0)
 S LR=$S(SUB="AU":$G(^LR(LRDFN,"AU")),1:$G(^LR(LRDFN,SUB,IDT,0)))
"RTN","HMPDJ08A",114,0)
 S NAME="LR "_$$NAME^HMPDLRA(SUB)_" REPORT"
"RTN","HMPDJ08A",115,0)
 S LOC=$P(LR,U,$S(SUB="AU":5,1:8)) D  ;look-up visit
"RTN","HMPDJ08A",116,0)
 . N CDT,SC S CDT=9999999-IDT,SC="",X=0
"RTN","HMPDJ08A",117,0)
 . S:$L(LOC) SC=+$O(^SC("B",LOC,0)) ;ICR 10040 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",118,0)
 . I CDT,LOC S X=$$GETENC^PXAPI(DFN,CDT,SC)
"RTN","HMPDJ08A",119,0)
 . S:X VST=+X
"RTN","HMPDJ08A",120,0)
 S X=+$P(LR,U,$S(SUB="AU":10,SUB="MI":4,1:2)) ;pathologist[author]
"RTN","HMPDJ08A",121,0)
 S USER=$S(X:X_";;"_$P($G(^VA(200,X,0)),U),1:""),SIGN="" ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",122,0)
 S X=$S(SUB="AU":$P(LR,U,15,16),SUB="MI":$P(LR,U,3,4),1:$P(LR,U,11)_U_$P(LR,U,13)) ;released
"RTN","HMPDJ08A",123,0)
 S:X SIGN="//"_+$P(X,U,2)_";"_$P($G(^VA(200,+$P(X,U,2),0)),U)_";"_+X ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",124,0)
 S Y=ID_U_NAME_U_(9999999-IDT)_U_U_USER_U_LOC_U_$S($P(LR,U,3):"COMPLETED",1:"REPORT INCOMPLETE")_U_$G(VST)_"^^2753^"_SIGN ;DE6322 check complete state
"RTN","HMPDJ08A",125,0)
 S:$G(HMPTEXT) TEXT=$$TEXT^HMPDLRA(DFN,SUB,IDT,LRDFN) ;^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",126,0)
 Q Y
"RTN","HMPDJ08A",127,0)
 ;
"RTN","HMPDJ08A",128,0)
 ; ------------------------------------------------------------------
"RTN","HMPDJ08A",129,0)
 ; nationalTitle = 4695068^RADIOLOGY REPORT
"RTN","HMPDJ08A",130,0)
 ;       Subject = 4693357^RADIOLOGY
"RTN","HMPDJ08A",131,0)
 ;          Type = 4696123^REPORT
"RTN","HMPDJ08A",132,0)
 ;
"RTN","HMPDJ08A",133,0)
RA(DFN,BEG,END,MAX) ; -- Radiology reports
"RTN","HMPDJ08A",134,0)
 N HMPXID,STS,PSET
"RTN","HMPDJ08A",135,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDJ08A",136,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDJ08A",137,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDJ08A",138,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDJ08A",139,0)
 . S STS=$P($G(^TMP($J,"RAE1",DFN,HMPXID)),U,3),PSET=$G(^(HMPXID,"CPRS"))
"RTN","HMPDJ08A",140,0)
 . Q:STS="No Report"!(STS="Deleted")  ;!(STS["Draft")
"RTN","HMPDJ08A",141,0)
 . I +PSET=2,$G(PSET(+HMPXID,$P(PSET,U,2))) Q  ;already have report
"RTN","HMPDJ08A",142,0)
 . S HMPX=$$RA1(DFN,HMPXID) D EN1^HMPDJ08(HMPX,"RA")
"RTN","HMPDJ08A",143,0)
 . I +PSET=2 S PSET(+HMPXID,$P(PSET,U,2))=$P(HMPXID,"-",2) ;parent
"RTN","HMPDJ08A",144,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDJ08A",145,0)
 Q
"RTN","HMPDJ08A",146,0)
 ;
"RTN","HMPDJ08A",147,0)
RA1(DFN,ID) ; -- return report data as TIU string [$$RESOLVE]
"RTN","HMPDJ08A",148,0)
 N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJ08A",149,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJ08A",150,0)
 S ERRMSG="A problem occurred converting radiology report "_ID
"RTN","HMPDJ08A",151,0)
 S DFN=+$G(DFN),ID=$G(ID) I DFN<1!'$L(ID) Q ""
"RTN","HMPDJ08A",152,0)
 N EXAM,CASE,PROC,RAE3,RAE1,TEXT,I,X,Y,DATE,LOC,STS,IENS,VST,USER,SIGN
"RTN","HMPDJ08A",153,0)
 K RPT,^TMP("HMPTEXT",$J,ID)
"RTN","HMPDJ08A",154,0)
 S EXAM=DFN_U_$TR(ID,"-","^") D
"RTN","HMPDJ08A",155,0)
 . N DFN D EN3^RAO7PC3(EXAM) ;report
"RTN","HMPDJ08A",156,0)
 . D EN3^RAO7PC1(EXAM)       ;add'l values
"RTN","HMPDJ08A",157,0)
 S CASE=$O(^TMP($J,"RAE3",DFN,0)),PROC=$O(^(CASE,"")),RAE3=$G(^(PROC))
"RTN","HMPDJ08A",158,0)
 S RAE1=$G(^TMP($J,"RAE1",DFN,ID))
"RTN","HMPDJ08A",159,0)
 I $G(HMPTEXT) D
"RTN","HMPDJ08A",160,0)
 . S TEXT=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDJ08A",161,0)
 . S I=0 F  S I=$O(^TMP($J,"RAE3",DFN,CASE,PROC,I)) Q:I<1  S X=^(I),@TEXT@(I)=X
"RTN","HMPDJ08A",162,0)
 S DATE=9999999.9999-(+ID),LOC=$P(RAE1,U,7),STS=$P(RAE3,U)
"RTN","HMPDJ08A",163,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDJ08A",164,0)
 S VST=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDJ08A",165,0)
 S X=+$G(^TMP($J,"RAE2",DFN,CASE,PROC,"P")),(USER,SIGN)=""
"RTN","HMPDJ08A",166,0)
 S:X USER=X_";;"_$P($G(^VA(200,X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",167,0)
 S X=$G(^TMP($J,"RAE2",DFN,CASE,PROC,"V"))
"RTN","HMPDJ08A",168,0)
 S:X SIGN="//"_+X_";"_$P($G(^VA(200,+X,0)),U)_";"_$$GET1^DIQ(74,+$P(RAE1,U,5)_",",7,"I") ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDJ08A",169,0)
 I $D(^TMP($J,"RAE3",DFN,"PRINT_SET")) S PROC=$G(^("ORD")) ;use parent, if printset
"RTN","HMPDJ08A",170,0)
 S Y=ID_U_PROC_U_DATE_U_U_USER_U_LOC_U_STS_U_VST_"^^1901^"_SIGN
"RTN","HMPDJ08A",171,0)
 K ^TMP($J,"RAE3",DFN),^TMP($J,"RAE2",DFN)
"RTN","HMPDJ08A",172,0)
 Q Y
"RTN","HMPDJFS")
0^35^B76740470^B75039687
"RTN","HMPDJFS",1,0)
HMPDJFS ;SLC/KCM,ASMR/BL,JD,CK,CPC,PB -- Asynchronous Extracts and Freshness via stream;Sep 16, 2016 09:45:43
"RTN","HMPDJFS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPDJFS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFS",4,0)
 ;
"RTN","HMPDJFS",5,0)
 ; JD - 1/14/15 - Removed "+" from "$$GETICN^MPIF001(DFN)" so that the
"RTN","HMPDJFS",6,0)
 ;                full value of icn (<icn>V<checksum>) could be captured. US4194.
"RTN","HMPDJFS",7,0)
 ; JD - 3/16/15 - Added checks to prevent restaging of data if the data has
"RTN","HMPDJFS",8,0)
 ;                already been staged.  US4304
"RTN","HMPDJFS",9,0)
 ; CPC - 3/4/16 - Prevent dual execution. DE3411
"RTN","HMPDJFS",10,0)
 ;
"RTN","HMPDJFS",11,0)
 ; PUT/POST   call $$TAG^ROUTINE(.args,.body)
"RTN","HMPDJFS",12,0)
 ; GET/DELETE call   TAG^ROUTINE(.response,.args)
"RTN","HMPDJFS",13,0)
 ;
"RTN","HMPDJFS",14,0)
 Q
"RTN","HMPDJFS",15,0)
 ;
"RTN","HMPDJFS",16,0)
API(HMPFRSP,ARGS) ;
"RTN","HMPDJFS",17,0)
 N HMPFERR,HMPFHMP,HMPFLOG,CNT,ACNT
"RTN","HMPDJFS",18,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",19,0)
 S HMPFHMP=$TR($G(ARGS("server")),"~","=")
"RTN","HMPDJFS",20,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFS",21,0)
 S HMPFLOG=+$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",22,0)
 I HMPFLOG D LOGREQ(HMPFHMP,.ARGS)
"RTN","HMPDJFS",23,0)
 S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJFS",24,0)
 I '$L(HMPFHMP) D SETERR("Missing HMP Server ID") QUIT
"RTN","HMPDJFS",25,0)
 I '$O(^HMP(800000,"B",HMPFHMP,0)) D SETERR("HMP Server not registered") QUIT
"RTN","HMPDJFS",26,0)
 ;
"RTN","HMPDJFS",27,0)
 ; begin select case
"RTN","HMPDJFS",28,0)
 I ARGS("command")="putPtSubscription" D  G XAPI
"RTN","HMPDJFS",29,0)
 . N LOC
"RTN","HMPDJFS",30,0)
 . S LOC=$$PUTSUB^HMPDJFSP(.ARGS) ; Added ELSE for US4304
"RTN","HMPDJFS",31,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_""""_$$PROGRESS_"}"
"RTN","HMPDJFS",32,0)
 I ARGS("command")="startOperationalDataExtract" D  G XAPI
"RTN","HMPDJFS",33,0)
 . N HMPX2,LOC
"RTN","HMPDJFS",34,0)
 . S ARGS("localId")="OPD"  ; use OPD to indicate "sync operational"
"RTN","HMPDJFS",35,0)
 . ; Next 2 lines added for US4304
"RTN","HMPDJFS",36,0)
 . S HMPX2="HMPFX~"_$G(HMPFHMP)_"~OPD"
"RTN","HMPDJFS",37,0)
 . D  ;DE5181 submit ODS only if not already run or running
"RTN","HMPDJFS",38,0)
 ..  N HMPUID
"RTN","HMPDJFS",39,0)
 ..  I $D(^XTMP(HMPX2)) S LOC="/hmp/subscription/operational data/" Q
"RTN","HMPDJFS",40,0)
 ..  S HMPUID=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFS",41,0)
 ..  I HMPUID,$P($G(^HMP(800000,HMPUID,0)),U,3)=2 S LOC="/hmp/subscription/operational data/" Q
"RTN","HMPDJFS",42,0)
 ..  S LOC=$$PUTSUB^HMPDJFSP(.ARGS)
"RTN","HMPDJFS",43,0)
 . I $L(LOC) S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""location"":"""_LOC_"""}"
"RTN","HMPDJFS",44,0)
 I ARGS("command")="getPtUpdates" D  G XAPI
"RTN","HMPDJFS",45,0)
 . L +^XTMP("HMPDJFSG "_$G(HMPFHMP)):2 E  D SETERR^HMPDJFS("Only one extract can run for a single server") Q  ;DE3411
"RTN","HMPDJFS",46,0)
 . D GETSUB^HMPDJFSG(HMPFRSP,.ARGS)
"RTN","HMPDJFS",47,0)
 . L -^XTMP("HMPDJFSG "_$G(HMPFHMP)) ;DE3411
"RTN","HMPDJFS",48,0)
 I ARGS("command")="resetAllSubscriptions" D  G XAPI
"RTN","HMPDJFS",49,0)
 . D RESETSVR(.ARGS)
"RTN","HMPDJFS",50,0)
 . S ^TMP("HMPF",$J,1)="{""apiVersion"":""1.0"",""removed"":""true""}"
"RTN","HMPDJFS",51,0)
 I ARGS("command")="checkHealth" D  G XAPI
"RTN","HMPDJFS",52,0)
 . D HLTHCHK^HMPDJFSM(.ARGS)
"RTN","HMPDJFS",53,0)
 ; else
"RTN","HMPDJFS",54,0)
 D SETERR("command not recognized")  ; should not get this far
"RTN","HMPDJFS",55,0)
 ;
"RTN","HMPDJFS",56,0)
XAPI ; end select case
"RTN","HMPDJFS",57,0)
 ;
"RTN","HMPDJFS",58,0)
 I HMPFLOG=2 D LOGRSP(HMPFHMP)
"RTN","HMPDJFS",59,0)
 Q
"RTN","HMPDJFS",60,0)
 ;
"RTN","HMPDJFS",61,0)
LOGREQ(SRV,ARGS) ; Log the request
"RTN","HMPDJFS",62,0)
 I $D(^XTMP("HMPFLOG",0,"start")) D  Q:'$$GET^XPAR("ALL","HMP LOG LEVEL")
"RTN","HMPDJFS",63,0)
 . N ELAPSED S ELAPSED=$$HDIFF^XLFDT($H,^XTMP("HMPFLOG",0,"start"),2)
"RTN","HMPDJFS",64,0)
 . I ELAPSED>$$GET^XPAR("ALL","HMP LOG LIMIT") D PUT^XPAR("SYS","HMP LOG LEVEL",1,0)
"RTN","HMPDJFS",65,0)
 E  D
"RTN","HMPDJFS",66,0)
 . D NEWXTMP("HMPFLOG",1,"HMP Freshness Logging")
"RTN","HMPDJFS",67,0)
 . S ^XTMP("HMPFLOG",0,"start")=$H
"RTN","HMPDJFS",68,0)
 S ^XTMP("HMPFLOG",0,"total")=$G(^XTMP("HMPFLOG",0,"total"))+1
"RTN","HMPDJFS",69,0)
 S:'$L(SRV) SRV="unknown"
"RTN","HMPDJFS",70,0)
 N SEQ
"RTN","HMPDJFS",71,0)
 S SEQ=+$G(^XTMP("HMPFLOG",SRV))+1,^XTMP("HMPFLOG",SRV)=SEQ
"RTN","HMPDJFS",72,0)
 M ^XTMP("HMPFLOG",SRV,SEQ,"request")=ARGS
"RTN","HMPDJFS",73,0)
 S HMPFLOG("seq")=SEQ
"RTN","HMPDJFS",74,0)
 Q
"RTN","HMPDJFS",75,0)
LOGRSP(SRV) ; Log the response
"RTN","HMPDJFS",76,0)
 M ^XTMP("HMPFLOG",SRV,HMPFLOG("seq"),"response")=^TMP("HMPF",$J)
"RTN","HMPDJFS",77,0)
 Q
"RTN","HMPDJFS",78,0)
 ;
"RTN","HMPDJFS",79,0)
 ; delete a patient subscription
"RTN","HMPDJFS",80,0)
DELSUB(RSP,ARGS) ; cancel a subscription
"RTN","HMPDJFS",81,0)
 ; DELETE with: /hmp/subscription/{hmpSrvId}/patient/{pid}
"RTN","HMPDJFS",82,0)
 ; remove patient from HMP SUBSCRIPTION file
"RTN","HMPDJFS",83,0)
 ; remove ^XTMP(HMPX and ^XTMP(HMPH nodes
"RTN","HMPDJFS",84,0)
 ; look ahead (from lastId) and remove any nodes for the patient
"RTN","HMPDJFS",85,0)
 N DFN,HMPSRV,BATCH,HMPSRVID
"RTN","HMPDJFS",86,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFS",87,0)
 ; DE6856, initialize HMPFRSP in case of error, use RSP here because of argument in DELSUB line tag, 15 Sept 2016
"RTN","HMPDJFS",88,0)
 S:$G(HMPFRSP)="" HMPFRSP="RSP"
"RTN","HMPDJFS",89,0)
 S DFN=$$DFN(ARGS("pid")) Q:$D(HMPFERR)
"RTN","HMPDJFS",90,0)
 S HMPSRV=ARGS("hmpSrvId")
"RTN","HMPDJFS",91,0)
 S BATCH="HMPFX~"_HMPSRV_"~"_DFN
"RTN","HMPDJFS",92,0)
 L +^XTMP("HMPFP",DFN,HMPSRV):20 E  D SETERR("unable to get lock") Q
"RTN","HMPDJFS",93,0)
 ; if extract still running, it should remove itself when it finishes
"RTN","HMPDJFS",94,0)
 K ^XTMP("HMPFX~"_HMPSRV_"~"_DFN) ; kill extract nodes
"RTN","HMPDJFS",95,0)
 K ^XTMP("HMPFH~"_HMPSRV_"~"_DFN) ; kill held freshness updates
"RTN","HMPDJFS",96,0)
 ; remove all nodes for this patient between "last" and "next"
"RTN","HMPDJFS",97,0)
 ; loop forward from "last" in ^XTMP("HMPFP",0,hmpSrv) and remove nodes for this DFN
"RTN","HMPDJFS",98,0)
 K ^XTMP("HMPFP",DFN,HMPSRV)      ; kill subscription
"RTN","HMPDJFS",99,0)
 D DELPT(DFN,HMPSRV)
"RTN","HMPDJFS",100,0)
 L -^XTMP("HMPFP",DFN,HMPSRV)
"RTN","HMPDJFS",101,0)
 S RSP="{""apiVersion"":""1.0"",""success"":""true""}" ; if successful
"RTN","HMPDJFS",102,0)
 Q
"RTN","HMPDJFS",103,0)
DELPT(DFN,SRV) ; delete patient DFN for server SRV
"RTN","HMPDJFS",104,0)
 N DIK,DA
"RTN","HMPDJFS",105,0)
 S DA(1)=$O(^HMP(800000,"B",SRV,"")) Q:'DA(1)
"RTN","HMPDJFS",106,0)
 S DA=DFN Q:'DA
"RTN","HMPDJFS",107,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",108,0)
 D ^DIK
"RTN","HMPDJFS",109,0)
 Q
"RTN","HMPDJFS",110,0)
 ;
"RTN","HMPDJFS",111,0)
 ; --- post freshness updates (internal to VistA)
"RTN","HMPDJFS",112,0)
 ;
"RTN","HMPDJFS",113,0)
POST(DFN,TYPE,ID,ACT,SERVER,NODES) ; adds new freshness item, return DT-seq
"RTN","HMPDJFS",114,0)
 ; if initializing use: ^XTMP("HMPFH-hmpserverid-dfn",seq#)    -hold
"RTN","HMPDJFS",115,0)
 ;       otherwise use: ^XTMP("HMPFS-hmpserverid-date",seq#)   -stream
"RTN","HMPDJFS",116,0)
 ;
"RTN","HMPDJFS",117,0)
 ; loop through subscribing streams for this patient
"RTN","HMPDJFS",118,0)
 ; if patient is initialized for an hmp server send events directly to stream
"RTN","HMPDJFS",119,0)
 ; otherwise, events go to temporary holding area
"RTN","HMPDJFS",120,0)
 ; initial extracts always sent directly to stream
"RTN","HMPDJFS",121,0)
 N HMPSRV,INIT,STREAM,DATE,SEQ,CNT
"RTN","HMPDJFS",122,0)
 S DATE=$$DT^XLFDT
"RTN","HMPDJFS",123,0)
 S HMPSRV="" F  S HMPSRV=$O(^HMP(800000,"AITEM",DFN,HMPSRV)) Q:'$L(HMPSRV)  D
"RTN","HMPDJFS",124,0)
 . I SERVER'="",HMPSRV'=SERVER Q
"RTN","HMPDJFS",125,0)
 . I '$D(^HMP(800000,"AITEM",DFN,HMPSRV)) Q          ; patient not subscribed
"RTN","HMPDJFS",126,0)
 . S INIT=(^HMP(800000,"AITEM",DFN,HMPSRV)=2),CNT=1  ; 2 means patient initialized
"RTN","HMPDJFS",127,0)
 . I $E(TYPE,1,4)="sync" S INIT=1                 ; sync* goes to main stream
"RTN","HMPDJFS",128,0)
 . I TYPE="syncDomain" S CNT=+$P(ID,":",3) S:CNT<1 CNT=1 ; CNT must be >0
"RTN","HMPDJFS",129,0)
 . S STREAM=$S(INIT:"HMPFS~",1:"HMPFH~")_HMPSRV_"~"_$S(INIT:DATE,1:DFN)
"RTN","HMPDJFS",130,0)
 . I '$D(^XTMP(STREAM)) D NEWXTMP(STREAM,8,"HMP Freshness Stream")
"RTN","HMPDJFS",131,0)
 . L +^XTMP(STREAM):5 E  S $EC=",Uno lock obtained," Q  ; throw error
"RTN","HMPDJFS",132,0)
 . S SEQ=$G(^XTMP(STREAM,"last"),0)+CNT
"RTN","HMPDJFS",133,0)
 . S ^XTMP(STREAM,SEQ)=DFN_U_TYPE_U_ID_U_$G(ACT)_U_$P($H,",",2)
"RTN","HMPDJFS",134,0)
 . S ^XTMP(STREAM,"last")=SEQ
"RTN","HMPDJFS",135,0)
 . L -^XTMP(STREAM)
"RTN","HMPDJFS",136,0)
 . ; NODES(hmpserverid)=streamDate^sequence -- optionally returned
"RTN","HMPDJFS",137,0)
 . S NODES($P(STREAM,"~",2))=$S(INIT:DATE,1:0)_U_SEQ
"RTN","HMPDJFS",138,0)
 Q
"RTN","HMPDJFS",139,0)
 ;
"RTN","HMPDJFS",140,0)
NEWXTMP(NODE,DAYS,DESC) ; Set a new node in ^XTMP
"RTN","HMPDJFS",141,0)
 K ^XTMP(NODE)
"RTN","HMPDJFS",142,0)
 S ^XTMP(NODE,0)=$$HTFM^XLFDT(+$H+DAYS)_U_$$HTFM^XLFDT(+$H)_U_DESC
"RTN","HMPDJFS",143,0)
 Q
"RTN","HMPDJFS",144,0)
PIDS(DFN) ; return string containing patient id's ready for JSON
"RTN","HMPDJFS",145,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFS",146,0)
 Q:'DFN ""
"RTN","HMPDJFS",147,0)
 ;
"RTN","HMPDJFS",148,0)
 N X
"RTN","HMPDJFS",149,0)
 S X=",""pid"":"""_$$PID(DFN)_""""
"RTN","HMPDJFS",150,0)
 S X=X_",""systemId"":"""_HMPSYS_""""
"RTN","HMPDJFS",151,0)
 S X=X_",""localId"":"""_DFN_""""
"RTN","HMPDJFS",152,0)
 S X=X_",""icn"":"""_$$GETICN^MPIF001(DFN)_"""" ; US4194
"RTN","HMPDJFS",153,0)
 Q X
"RTN","HMPDJFS",154,0)
 ;
"RTN","HMPDJFS",155,0)
PID(DFN) ; return most likely PID (ICN or SYS;DFN)
"RTN","HMPDJFS",156,0)
 Q:'DFN ""
"RTN","HMPDJFS",157,0)
 I '$D(HMPSYS) S HMPSYS=$$SYS^HMPUTILS
"RTN","HMPDJFS",158,0)
 Q HMPSYS_";"_DFN            ; otherwise use SysId;DFN
"RTN","HMPDJFS",159,0)
 ;
"RTN","HMPDJFS",160,0)
DFN(PID) ; return the DFN given the PID (ICN or SYS;DFN)
"RTN","HMPDJFS",161,0)
 N DFN
"RTN","HMPDJFS",162,0)
 S PID=$TR(PID,":",";")
"RTN","HMPDJFS",163,0)
 I PID'[";" D  Q DFN  ; treat as ICN
"RTN","HMPDJFS",164,0)
 . S DFN=$$GETDFN^MPIF001(PID)
"RTN","HMPDJFS",165,0)
 . I DFN<0 D SETERR($P(DFN,"^",2))
"RTN","HMPDJFS",166,0)
 ; otherwise
"RTN","HMPDJFS",167,0)
 I $P(PID,";")'=$$SYS^HMPUTILS D SETERR("DFN unknown to this system") Q 0
"RTN","HMPDJFS",168,0)
 Q $P(PID,";",2)
"RTN","HMPDJFS",169,0)
 ;
"RTN","HMPDJFS",170,0)
PROGRESS(LASTITM) ; set the node in REF with progress properties
"RTN","HMPDJFS",171,0)
 ; expects HMPFHMP,HMPSYS
"RTN","HMPDJFS",172,0)
 N RSLT,HMPIEN,CNT,STS,TS,DFN,FIRST
"RTN","HMPDJFS",173,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0)) Q:'HMPIEN ""
"RTN","HMPDJFS",174,0)
 S CNT=0,RSLT=""
"RTN","HMPDJFS",175,0)
 F STS=0,1 D  ; 0=uninitialized, 1=initializing
"RTN","HMPDJFS",176,0)
 . S FIRST=1
"RTN","HMPDJFS",177,0)
 . S RSLT=$S(STS=0:",""waitingPids"":[",1:RSLT_"],""processingPids"":[")
"RTN","HMPDJFS",178,0)
 . S TS=0 F  S TS=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS)) Q:'TS  D  Q:CNT>99
"RTN","HMPDJFS",179,0)
 . . S DFN=0 F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TS,DFN)) Q:'DFN  D
"RTN","HMPDJFS",180,0)
 . . . S CNT=CNT+1
"RTN","HMPDJFS",181,0)
 . . . S RSLT=RSLT_$S(FIRST=1:"",1:",")_""""_HMPSYS_";"_DFN_""""
"RTN","HMPDJFS",182,0)
 . . . S FIRST=0
"RTN","HMPDJFS",183,0)
 S RSLT=RSLT_"]"
"RTN","HMPDJFS",184,0)
 ;
"RTN","HMPDJFS",185,0)
 N STRM,STRMDT,CURRDT
"RTN","HMPDJFS",186,0)
 I $G(LASTITM)="" S LASTITM=$P(^HMP(800000,HMPIEN,0),U,2)
"RTN","HMPDJFS",187,0)
 I $L(LASTITM,"-")<2 S LASTITM=$$DT^XLFDT_"-"_+LASTITM
"RTN","HMPDJFS",188,0)
 S STRMDT=$P(LASTITM,"-"),CURRDT=$$DT^XLFDT,SEQ=$P(LASTITM,"-",2)
"RTN","HMPDJFS",189,0)
 S CNT=0 F  D  Q:$$FMDIFF^XLFDT(STRMDT,CURRDT,1)'<0
"RTN","HMPDJFS",190,0)
 . S STRM="HMPFS~"_HMPFHMP_"~"_STRMDT
"RTN","HMPDJFS",191,0)
 . S CNT=CNT+$G(^XTMP(STRM,"last"))-SEQ
"RTN","HMPDJFS",192,0)
 . S STRMDT=$$FMADD^XLFDT(STRMDT,1),SEQ=0
"RTN","HMPDJFS",193,0)
 S RSLT=RSLT_",""remainingObjects"":"_CNT
"RTN","HMPDJFS",194,0)
 Q RSLT
"RTN","HMPDJFS",195,0)
 ;
"RTN","HMPDJFS",196,0)
 ; --- handle errors
"RTN","HMPDJFS",197,0)
 ;
"RTN","HMPDJFS",198,0)
SETERR(MSG) ; create error object in ^TMP("HMPFERR",$J) and set HMPFERR
"RTN","HMPDJFS",199,0)
 ;DE6856, following line is because we may be here before HMPFRSP is SET since it's an error, 15 Sept 2016
"RTN","HMPDJFS",200,0)
 S:$G(HMPFRSP)="" HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFS",201,0)
 ; TODO: escape MSG for JSON
"RTN","HMPDJFS",202,0)
 S @HMPFRSP@(1)="{""apiVersion"":""1.0"",""error"":{""message"":"""_MSG_"""}}"
"RTN","HMPDJFS",203,0)
 S ^TMP("HMPFERR",$J,$H)=MSG
"RTN","HMPDJFS",204,0)
 S HMPFERR=1
"RTN","HMPDJFS",205,0)
 Q
"RTN","HMPDJFS",206,0)
 ;
"RTN","HMPDJFS",207,0)
DEBUG(MSG) ;
"RTN","HMPDJFS",208,0)
 S ^TMP("HMPDEBUG",$J,0)=$G(^TMP("HMPDEBUG",$J,0),0)+1
"RTN","HMPDJFS",209,0)
 I $D(MSG)'=1 M ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG Q
"RTN","HMPDJFS",210,0)
 S ^TMP("HMPDEBUG",$J,^TMP("HMPDEBUG",$J,0))=MSG
"RTN","HMPDJFS",211,0)
 Q
"RTN","HMPDJFS",212,0)
RESETSVR(ARGS) ;
"RTN","HMPDJFS",213,0)
 N DA,DIE,DIK,DR,IEN,SRV,SRVIEN,X
"RTN","HMPDJFS",214,0)
 S SRV=$G(ARGS("server")) I SRV="" Q
"RTN","HMPDJFS",215,0)
 S DA=$O(^HMP(800000,"B",SRV,"")) I DA'>0 Q
"RTN","HMPDJFS",216,0)
 S SRVIEN=DA
"RTN","HMPDJFS",217,0)
 L +^HMP(800000,SRVIEN):5 E  S $EC=",Uno lock obtained," Q
"RTN","HMPDJFS",218,0)
 ;delete operational data field
"RTN","HMPDJFS",219,0)
 S DIE="^HMP(800000,",DR=".03///@" D ^DIE
"RTN","HMPDJFS",220,0)
 S DA(1)=DA,DA=0
"RTN","HMPDJFS",221,0)
 ;delete patient multiple values
"RTN","HMPDJFS",222,0)
 S DIK="^HMP(800000,"_DA(1)_",1,"
"RTN","HMPDJFS",223,0)
 F  S DA=$O(^HMP(800000,DA(1),1,DA)) Q:DA'>0  D ^DIK
"RTN","HMPDJFS",224,0)
 ;kill server ^XTMP
"RTN","HMPDJFS",225,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",226,0)
 . I X[SRV K ^XTMP(X) I 1
"RTN","HMPDJFS",227,0)
 ;kill tidy node
"RTN","HMPDJFS",228,0)
 K ^XTMP("HMPFP","tidy",SRV)
"RTN","HMPDJFS",229,0)
 L -^HMP(800000,SRVIEN)
"RTN","HMPDJFS",230,0)
 Q
"RTN","HMPDJFS",231,0)
 ;
"RTN","HMPDJFS",232,0)
CLEARDOM(SVR,PAT) ;
"RTN","HMPDJFS",233,0)
 Q
"RTN","HMPDJFS",234,0)
 ;
"RTN","HMPDJFS",235,0)
CLEARPAT(SVR,PAT) ;
"RTN","HMPDJFS",236,0)
 I '$D(^XTMP("HMPFP",PAT,SVR)) Q
"RTN","HMPDJFS",237,0)
 ;do we need a check for patient initialized?
"RTN","HMPDJFS",238,0)
 K ^XTMP("HMPFP",PAT,SVR)
"RTN","HMPDJFS",239,0)
 Q
"RTN","HMPDJFS",240,0)
 ;
"RTN","HMPDJFS",241,0)
HMPSET(DA,NEW) ;
"RTN","HMPDJFS",242,0)
 N IEN,NAME
"RTN","HMPDJFS",243,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",244,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",245,0)
 .I $D(^HMP(800000,IEN,1,NEW(1)))>0 S ^HMP(800000,"AITEM",NEW(1),NAME)=NEW(2)
"RTN","HMPDJFS",246,0)
 Q
"RTN","HMPDJFS",247,0)
 ;
"RTN","HMPDJFS",248,0)
HMPKILL(DA,OLD) ;
"RTN","HMPDJFS",249,0)
 N NAME
"RTN","HMPDJFS",250,0)
 S NAME=$P($G(^HMP(800000,DA(1),0)),U) I NAME="" Q
"RTN","HMPDJFS",251,0)
 K ^HMP(800000,"AITEM",OLD(1),NAME)
"RTN","HMPDJFS",252,0)
 Q
"RTN","HMPDJFS",253,0)
 ;
"RTN","HMPDJFS",254,0)
HMPOSET(DA,NEW) ;
"RTN","HMPDJFS",255,0)
 N IEN,NAME
"RTN","HMPDJFS",256,0)
 S IEN=0 F  S IEN=$O(^HMP(800000,IEN)) Q:IEN'>0  D
"RTN","HMPDJFS",257,0)
 .S NAME=$P(^HMP(800000,IEN,0),U)
"RTN","HMPDJFS",258,0)
 .S ^HMP(800000,"AITEM","OPD",NAME)=NEW
"RTN","HMPDJFS",259,0)
 Q
"RTN","HMPDJFS",260,0)
 ;
"RTN","HMPDJFS",261,0)
HMPOKILL(DA) ;
"RTN","HMPDJFS",262,0)
 N NAME
"RTN","HMPDJFS",263,0)
 S NAME=$P($G(^HMP(800000,DA,0)),U) I NAME="" Q
"RTN","HMPDJFS",264,0)
 K ^HMP(800000,"AITEM","OPD",NAME)
"RTN","HMPDJFS",265,0)
 Q
"RTN","HMPDJFS",266,0)
KILL ; clear out all ^XTMP nodes
"RTN","HMPDJFS",267,0)
 N X
"RTN","HMPDJFS",268,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  W !,X  K ^XTMP(X)
"RTN","HMPDJFS",269,0)
 Q
"RTN","HMPDJFS",270,0)
KILLSVR(SVR) ; clear out for specific machine
"RTN","HMPDJFS",271,0)
 N X
"RTN","HMPDJFS",272,0)
 S X="HMPF" F  S X=$O(^XTMP(X)) Q:$E(X,1,4)'="HMPF"  D
"RTN","HMPDJFS",273,0)
 . I X[SVR W !,X  K ^XTMP(X) I 1
"RTN","HMPDJFS",274,0)
 S X="" F  S X=$O(^XTMP("HMPFP",X)) Q:X=""  D
"RTN","HMPDJFS",275,0)
 . I $D(^XTMP("HMPFP",X,SVR)) K ^XTMP("HMPFP",X,SVR)
"RTN","HMPDJFS",276,0)
 Q
"RTN","HMPDJFSD")
0^11^B7195569^B6635230
"RTN","HMPDJFSD",1,0)
HMPDJFSD ;SLC/KCM,ASMR/RRB,MBS -- Domain Lists for Extract and Freshness Stream;Sep 1, 2016 17:28:47
"RTN","HMPDJFSD",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJFSD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSD",4,0)
 ;
"RTN","HMPDJFSD",5,0)
 ; DE2818/RRB: SQA findings 1st 3 lines
"RTN","HMPDJFSD",6,0)
 ;
"RTN","HMPDJFSD",7,0)
 ; DE6652 - JD - 9/1/16: Removed sign-symptom domain from the list for operational data.
"RTN","HMPDJFSD",8,0)
 ;                       OPDOMS tag.
"RTN","HMPDJFSD",9,0)
 ;
"RTN","HMPDJFSD",10,0)
 Q
"RTN","HMPDJFSD",11,0)
 ;
"RTN","HMPDJFSD",12,0)
PTDOMS(LIST) ; load default patient domains (put in parameter?); cpc modded order 9/29/2015; DE4879 - Removed "factor" entry
"RTN","HMPDJFSD",13,0)
 ;;order
"RTN","HMPDJFSD",14,0)
 ;;vital
"RTN","HMPDJFSD",15,0)
 ;;lab
"RTN","HMPDJFSD",16,0)
 ;;med
"RTN","HMPDJFSD",17,0)
 ;;document
"RTN","HMPDJFSD",18,0)
 ;;allergy
"RTN","HMPDJFSD",19,0)
 ;;auxiliary
"RTN","HMPDJFSD",20,0)
 ;;appointment
"RTN","HMPDJFSD",21,0)
 ;;diagnosis
"RTN","HMPDJFSD",22,0)
 ;;visit
"RTN","HMPDJFSD",23,0)
 ;;immunization
"RTN","HMPDJFSD",24,0)
 ;;obs
"RTN","HMPDJFSD",25,0)
 ;;problem
"RTN","HMPDJFSD",26,0)
 ;;procedure
"RTN","HMPDJFSD",27,0)
 ;;consult
"RTN","HMPDJFSD",28,0)
 ;;image
"RTN","HMPDJFSD",29,0)
 ;;surgery
"RTN","HMPDJFSD",30,0)
 ;;task
"RTN","HMPDJFSD",31,0)
 ;;ptf
"RTN","HMPDJFSD",32,0)
 ;;exam
"RTN","HMPDJFSD",33,0)
 ;;cpt
"RTN","HMPDJFSD",34,0)
 ;;education
"RTN","HMPDJFSD",35,0)
 ;;pov
"RTN","HMPDJFSD",36,0)
 ;;skin
"RTN","HMPDJFSD",37,0)
 ;;treatment
"RTN","HMPDJFSD",38,0)
 ;;roadtrip
"RTN","HMPDJFSD",39,0)
 ;;patient
"RTN","HMPDJFSD",40,0)
 ;;zzzzz
"RTN","HMPDJFSD",41,0)
 ;
"RTN","HMPDJFSD",42,0)
 ;;mh
"RTN","HMPDJFSD",43,0)
 ;
"RTN","HMPDJFSD",44,0)
 N I,X
"RTN","HMPDJFSD",45,0)
 F I=1:1 S X=$P($T(PTDOMS+I),";;",2,99) Q:X="zzzzz"  S LIST(I)=X
"RTN","HMPDJFSD",46,0)
 Q
"RTN","HMPDJFSD",47,0)
 ;
"RTN","HMPDJFSD",48,0)
OPDOMS(LIST) ; load default operational domains (put in parameter?)
"RTN","HMPDJFSD",49,0)
 ;;asu-class;^USR(8930)
"RTN","HMPDJFSD",50,0)
 ;;asu-rule;^USR(8930.1)
"RTN","HMPDJFSD",51,0)
 ;;category;^HMP(800000.11)
"RTN","HMPDJFSD",52,0)
 ;;charttab;^HMP(800000.11)
"RTN","HMPDJFSD",53,0)
 ;;displaygroup;^ORD(100.98)
"RTN","HMPDJFSD",54,0)
 ;;doc-def;^TIU(8925.1)
"RTN","HMPDJFSD",55,0)
 ;;labgroup;^LAB(64.5,1,1)
"RTN","HMPDJFSD",56,0)
 ;;labpanel;^LAB(60)
"RTN","HMPDJFSD",57,0)
 ;;location;^SC
"RTN","HMPDJFSD",58,0)
 ;;orderable;^ORD(101.43)
"RTN","HMPDJFSD",59,0)
 ;;page;^HMP(800000.11)
"RTN","HMPDJFSD",60,0)
 ;;pt-select;^DPT
"RTN","HMPDJFSD",61,0)
 ;;personphoto;^HMP(800000.11)
"RTN","HMPDJFSD",62,0)
 ;;pointofcare;^HMP(800000.11)
"RTN","HMPDJFSD",63,0)
 ;;quick;^ORD(101.41)
"RTN","HMPDJFSD",64,0)
 ;;roster;^HMPROSTR
"RTN","HMPDJFSD",65,0)
 ;;route;^PS(51.2)
"RTN","HMPDJFSD",66,0)
 ;;schedule;^PS(51.1)
"RTN","HMPDJFSD",67,0)
 ;;team;^HMP(800000.11)
"RTN","HMPDJFSD",68,0)
 ;;teamposition;^HMP(800000.11)
"RTN","HMPDJFSD",69,0)
 ;;user;^VA(200)
"RTN","HMPDJFSD",70,0)
 ;;usertabprefs;^HMP(800000.11)
"RTN","HMPDJFSD",71,0)
 ;;viewdefdef;^HMP(800000.11)
"RTN","HMPDJFSD",72,0)
 ;;viewdefdefcoldefconfigtemplate;^HMP(800000.11)
"RTN","HMPDJFSD",73,0)
 ;;immunization;^AUTTIMM
"RTN","HMPDJFSD",74,0)
 ;;allergy-list;^GMRD(120.82)
"RTN","HMPDJFSD",75,0)
 ;;vital-type;^GMRD(120.51)
"RTN","HMPDJFSD",76,0)
 ;;vital-qualifier;^GMRD(120.52)
"RTN","HMPDJFSD",77,0)
 ;;vital-category;^GMRD(120.53)
"RTN","HMPDJFSD",78,0)
 ;;zzzzz
"RTN","HMPDJFSD",79,0)
 ;
"RTN","HMPDJFSD",80,0)
 ;;problem-list;^LEX(757.01)
"RTN","HMPDJFSD",81,0)
 ;;clioterminology
"RTN","HMPDJFSD",82,0)
 ;;doc-action
"RTN","HMPDJFSD",83,0)
 ;;doc-status
"RTN","HMPDJFSD",84,0)
 ;;sign-symptom;^GMRD(120.83)  ;DE6652 - Removed from OPDOMS list
"RTN","HMPDJFSD",85,0)
 ;
"RTN","HMPDJFSD",86,0)
 N I,X
"RTN","HMPDJFSD",87,0)
 F I=1:1 S X=$P($T(OPDOMS+I),";",3) Q:X="zzzzz"  S LIST(I)=X
"RTN","HMPDJFSD",88,0)
 Q
"RTN","HMPDJFSD",89,0)
 ;
"RTN","HMPDJFSG")
0^55^B245124031^B239094228
"RTN","HMPDJFSG",1,0)
HMPDJFSG ;SLC/KCM,ASMR/RRB,CPC,JD,ASF,CK -- GET for Extract and Freshness Stream;Aug 11, 2016 10:35:07
"RTN","HMPDJFSG",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPDJFSG",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSG",4,0)
 ;
"RTN","HMPDJFSG",5,0)
 ; US3907 - Allow for jobId and rootJobId to be retrieved from ^XTMP. JD 1/20/15
"RTN","HMPDJFSG",6,0)
 ; DE2818 - SQA findings. Newed ERRCNT in BLDSERR+2. RRB 10/24/2015
"RTN","HMPDJFSG",7,0)
 ; DE3869 - Remove the freshness stream entries with undefined DFNs. JD 3/4/16
"RTN","HMPDJFSG",8,0)
 ;
"RTN","HMPDJFSG",9,0)
 Q
"RTN","HMPDJFSG",10,0)
 ; --- retrieve updates for an HMP server's subscriptions
"RTN","HMPDJFSG",11,0)
 ;
"RTN","HMPDJFSG",12,0)
GETSUB(HMPFRSP,ARGS) ; retrieve items from stream
"RTN","HMPDJFSG",13,0)
 ; GET from: /hmp/subscription/{hmpSrvId}/{last}?limit={limit}
"RTN","HMPDJFSG",14,0)
 ; ARGS("last") : date-seq of last item retrieved (ex. 3131206-27)
"RTN","HMPDJFSG",15,0)
 ; ARGS("max")  : maximum number of items to return (default 99999) *S68-JCH*
"RTN","HMPDJFSG",16,0)
 ; ARGS("maxSize"): approximate number bytes to return *S68-JCH*
"RTN","HMPDJFSG",17,0)
 ;
"RTN","HMPDJFSG",18,0)
 ; HMPFSYS : the id (hash) of the VistA system
"RTN","HMPDJFSG",19,0)
 ; HMPFHMP : the name of the HMP server 
"RTN","HMPDJFSG",20,0)
 ; HMPFSEQ : final sequence (becomes next LASTSEQ)
"RTN","HMPDJFSG",21,0)
 ; HMPFIDX : index to iterate from LASTSEQ to final sequence
"RTN","HMPDJFSG",22,0)
 ; HMPFLAST: used to clean up extracts prior to this
"RTN","HMPDJFSG",23,0)
 ; HMPFSTRM: the extract/freshness stream (HMPFS~hmpSrvId~fmDate) 
"RTN","HMPDJFSG",24,0)
 ;
"RTN","HMPDJFSG",25,0)
 K ^TMP("HMPF",$J)
"RTN","HMPDJFSG",26,0)
 N HMPFSYS,HMPFSTRM,HMPFLAST,HMPFDT,HMPFLIM,HMPFMAX,HMPFSIZE,HMPCLFLG
"RTN","HMPDJFSG",27,0)
 N HMPFSEQ,HMPFIDX,HMPFCNT,SNODE,STYPE,HMPFERR,HMPDEL,HMPERR,HMPSTGET,HMPLITEM ;*S68-JCH*,DE3502
"RTN","HMPDJFSG",28,0)
 S HMPFRSP=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSG",29,0)
 ;Next line added US6734 - Make sure OPD metastamp data has been completed before fetching.
"RTN","HMPDJFSG",30,0)
 I '$$OPD^HMPMETA(HMPFHMP) S @HMPFRSP@(1)="{""warning"":""Staging is not complete yet!""}" Q
"RTN","HMPDJFSG",31,0)
 ;
"RTN","HMPDJFSG",32,0)
 S HMPFSYS=$$SYS^HMPUTILS
"RTN","HMPDJFSG",33,0)
 S HMPFHMP("ien")=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSG",34,0)
 S HMPFDT=$P($G(ARGS("lastUpdate")),"-")
"RTN","HMPDJFSG",35,0)
 S HMPFSEQ=+$P($G(ARGS("lastUpdate")),"-",2)
"RTN","HMPDJFSG",36,0)
 S HMPSTGET=$G(ARGS("getStatus"))
"RTN","HMPDJFSG",37,0)
 S HMPLITEM="" ;DE3502 initialise tracking of last item type
"RTN","HMPDJFSG",38,0)
 ;stream goes back a maximum of 8 days
"RTN","HMPDJFSG",39,0)
 I HMPFDT<$$FMADD^XLFDT($$DT^XLFDT,-8) S HMPFDT=$$HTFM^XLFDT(+$H-8),HMPFSEQ=0
"RTN","HMPDJFSG",40,0)
 S HMPFLAST=HMPFDT_"-"_HMPFSEQ
"RTN","HMPDJFSG",41,0)
 D LASTUPD(HMPFHMP,HMPFLAST)
"RTN","HMPDJFSG",42,0)
 D SETLIMIT(.ARGS) ; set HMPFLIM, HMPFMAX, HMPFSIZE;*S68-PJH*
"RTN","HMPDJFSG",43,0)
 S HMPFLIM=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",44,0)
 S HMPFSTRM="HMPFS~"_HMPFHMP_"~"_HMPFDT ; stream identifier
"RTN","HMPDJFSG",45,0)
 I '$D(^XTMP(HMPFSTRM,"job",$J)) S ^XTMP(HMPFSTRM,"job",$J,"start")=$H
"RTN","HMPDJFSG",46,0)
 S ^XTMP(HMPFSTRM,"job",$J)=$H ; record connection info
"RTN","HMPDJFSG",47,0)
 I '$$VERMATCH(HMPFHMP("ien"),$G(ARGS("extractSchema"))) D NOOP(HMPFLAST) QUIT
"RTN","HMPDJFSG",48,0)
 S HMPFCNT=0,HMPFIDX=HMPFSEQ
"RTN","HMPDJFSG",49,0)
 ;BL;DE7809 stop processing each day if we have hit item limit added the limitation quit
"RTN","HMPDJFSG",50,0)
 F  D  Q:HMPFSIZE'<HMPFMAX  Q:HMPFCNT'<HMPFLIM  D NXTSTRM Q:HMPFSTRM=""  ;*S68-JCH*
"RTN","HMPDJFSG",51,0)
 . F  S HMPFIDX=$O(^XTMP(HMPFSTRM,HMPFIDX)) Q:'HMPFIDX  D  Q:HMPFCNT'<HMPFLIM
"RTN","HMPDJFSG",52,0)
 ..  S SNODE=^XTMP(HMPFSTRM,HMPFIDX),STYPE=$P(SNODE,U,2)
"RTN","HMPDJFSG",53,0)
 ..  K FILTER("freshnessDateTime")
"RTN","HMPDJFSG",54,0)
 ..  ;===JD START===
"RTN","HMPDJFSG",55,0)
 ..  K ARGS("hmp-fst") I $P(SNODE,U,4)="@" S ARGS("hmp-fst")=$P(SNODE,U,5)
"RTN","HMPDJFSG",56,0)
 ..  ;===JD END===
"RTN","HMPDJFSG",57,0)
 ..  S $P(^XTMP(HMPFSTRM,HMPFIDX),U,6)=$P($H,",",2) ;timestamp when sent
"RTN","HMPDJFSG",58,0)
 ..  I STYPE="syncNoop" Q  ;skip, patient was unsubscribed
"RTN","HMPDJFSG",59,0)
 ..  I STYPE="syncDomain" D DOMITMS Q  ;add multiple extract items
"RTN","HMPDJFSG",60,0)
 ..  S HMPFSEQ=HMPFIDX
"RTN","HMPDJFSG",61,0)
 ..  I STYPE="syncCommand" D SYNCCMD(SNODE) Q  ; command to middle tier
"RTN","HMPDJFSG",62,0)
 ..  I STYPE="syncError" D SYNCERR(SNODE,.HMPERR) Q
"RTN","HMPDJFSG",63,0)
 ..  I STYPE="syncStart" D SYNCSTRT(SNODE) S HMPLITEM="SYNC" Q  ; begin initial extraction ;DE3502
"RTN","HMPDJFSG",64,0)
 ..  I STYPE="syncMeta" D SYNCMETA(SNODE) S HMPLITEM="SYNC" Q  ; US11019 - Build replacement syncstart ;DE3502
"RTN","HMPDJFSG",65,0)
 ..  I STYPE="syncDone" D SYNCDONE(SNODE) S HMPLITEM="SYNC" Q  ; end of initial extraction ;DE3502
"RTN","HMPDJFSG",66,0)
 ..  D FRESHITM(SNODE,.HMPDEL,.HMPERR) S HMPLITEM="FRESH" ; otherwise, freshness item ;DE3502
"RTN","HMPDJFSG",67,0)
 Q:$G(HMPFERR)
"RTN","HMPDJFSG",68,0)
 D FINISH(.HMPDEL,.HMPERR)
"RTN","HMPDJFSG",69,0)
 ;Check if HMP GLOBAL USAGE MONITOR mail message is required -US8228
"RTN","HMPDJFSG",70,0)
 D CHECK^HMPMETA(HMPFHMP) ;US8228
"RTN","HMPDJFSG",71,0)
 Q
"RTN","HMPDJFSG",72,0)
DOMITMS ;loop thru extract items, OFFSET is last sent
"RTN","HMPDJFSG",73,0)
 ;expects HMPFSTRM,HMPFIDX,HMPFHMP,HMPFSYS
"RTN","HMPDJFSG",74,0)
 ;changes HMPFSEQ,HMPFCNT,HMPFSIZE as each item added ;*S68-JCH*
"RTN","HMPDJFSG",75,0)
 N X,OFFSET,DFN,PIDS,DOMAIN,TASK,BATCH,COUNT,ITEMNUM,DOMSIZE,SECSIZE
"RTN","HMPDJFSG",76,0)
 S X=^XTMP(HMPFSTRM,HMPFIDX),DFN=$P(X,U),X=$P(X,U,3)
"RTN","HMPDJFSG",77,0)
 S PIDS=$S(DFN:$$PIDS^HMPDJFS(DFN),1:"")
"RTN","HMPDJFSG",78,0)
 S DOMAIN=$P(X,":") ;domain{#sectionNumber}
"RTN","HMPDJFSG",79,0)
 S TASK=$P(X,":",2) ;task number in ^XTMP
"RTN","HMPDJFSG",80,0)
 S COUNT=$P(X,":",3) ;count in this section
"RTN","HMPDJFSG",81,0)
 S DOMSIZE=$P(X,":",4) ;estimated total for the domain
"RTN","HMPDJFSG",82,0)
 S SECSIZE=$P(X,":",5) ;section size (for operational)
"RTN","HMPDJFSG",83,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN ;extract node in ^XTMP
"RTN","HMPDJFSG",84,0)
 S OFFSET=COUNT-(HMPFIDX-HMPFSEQ)
"RTN","HMPDJFSG",85,0)
 F  S OFFSET=$O(^XTMP(BATCH,TASK,DOMAIN,OFFSET)) Q:'OFFSET  D  Q:HMPFCNT'<HMPFLIM
"RTN","HMPDJFSG",86,0)
 . ;;PJH;;S HMPFCNT=HMPFCNT+1 ;increment the count of returned items
"RTN","HMPDJFSG",87,0)
 . S HMPFSEQ=HMPFSEQ+1 ;increment the sequence number in the stream
"RTN","HMPDJFSG",88,0)
 . S HMPFSIZE=$$INCITEM($P(DOMAIN,"#")) ;*S68-JCH*
"RTN","HMPDJFSG",89,0)
 . S ITEMNUM=OFFSET+($P(DOMAIN,"#",2)*SECSIZE)
"RTN","HMPDJFSG",90,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^XTMP(BATCH,TASK,DOMAIN,OFFSET)
"RTN","HMPDJFSG",91,0)
 . ;S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE)
"RTN","HMPDJFSG",92,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER(DOMAIN,PIDS,$S('COUNT:0,1:ITEMNUM),+DOMSIZE,1)  ;*S68-JCH*
"RTN","HMPDJFSG",93,0)
 . S HMPLITEM="SYNC",HMPCLFLG=0 ;DE3502
"RTN","HMPDJFSG",94,0)
 Q
"RTN","HMPDJFSG",95,0)
MIDXTRCT() ; Return true if mid-extract
"RTN","HMPDJFSG",96,0)
 ;from GETSUB expects HMPFSTRM,HMPFSEQ
"RTN","HMPDJFSG",97,0)
 I 'HMPFSEQ Q 0
"RTN","HMPDJFSG",98,0)
 I '$D(^XTMP(HMPFSTRM,HMPFSEQ)) Q 1 ;middle of extract
"RTN","HMPDJFSG",99,0)
 I $P(^XTMP(HMPFSTRM,HMPFSEQ),U,2)="syncDomain" Q 1 ;just starting extract
"RTN","HMPDJFSG",100,0)
 Q 0
"RTN","HMPDJFSG",101,0)
 ;
"RTN","HMPDJFSG",102,0)
NXTSTRM ; Reset variables for next date in this HMP stream
"RTN","HMPDJFSG",103,0)
 ; from GETSUB expects HMPFSTRM,HMPFDT,HMPFIDX
"RTN","HMPDJFSG",104,0)
 ; HMPFSTRM set to "" if no next stream
"RTN","HMPDJFSG",105,0)
 ; HMPFIDX  set to 0 if next stream, or left as is
"RTN","HMPDJFSG",106,0)
 ; HMPFDT   set to last date actually used
"RTN","HMPDJFSG",107,0)
 N NEXTDT,DONE
"RTN","HMPDJFSG",108,0)
 S NEXTDT=HMPFDT,DONE=0
"RTN","HMPDJFSG",109,0)
 F  D  Q:DONE
"RTN","HMPDJFSG",110,0)
 . S NEXTDT=$$FMADD^XLFDT(NEXTDT,1)
"RTN","HMPDJFSG",111,0)
 . I NEXTDT>$$DT^XLFDT S HMPFSTRM="" S DONE=1 Q
"RTN","HMPDJFSG",112,0)
 . S $P(HMPFSTRM,"~",3)=NEXTDT
"RTN","HMPDJFSG",113,0)
 . I '+$O(^XTMP(HMPFSTRM,0)) Q  ; nothing here, try next date
"RTN","HMPDJFSG",114,0)
 . S HMPFDT=NEXTDT,HMPFIDX=0,HMPFSEQ=0,DONE=1
"RTN","HMPDJFSG",115,0)
 Q
"RTN","HMPDJFSG",116,0)
 ;
"RTN","HMPDJFSG",117,0)
SETLIMIT(ARGS) ; sets HMPFLIM, HMPFMAX, HMPFSIZE variables  *BEGIN*S68-JCH*
"RTN","HMPDJFSG",118,0)
 I $G(ARGS("maxSize")) D  Q
"RTN","HMPDJFSG",119,0)
 . S HMPFLIM="s"
"RTN","HMPDJFSG",120,0)
 . S HMPFMAX=ARGS("maxSize")
"RTN","HMPDJFSG",121,0)
 . D GETLST^XPAR(.HMPFSIZE,"PKG","HMP DOMAIN SIZES","I")
"RTN","HMPDJFSG",122,0)
 . S HMPFSIZE=0
"RTN","HMPDJFSG",123,0)
 ; otherwise
"RTN","HMPDJFSG",124,0)
 S HMPFLIM="c"
"RTN","HMPDJFSG",125,0)
 S HMPFMAX=$G(ARGS("max"),99999)
"RTN","HMPDJFSG",126,0)
 S HMPFSIZE=0
"RTN","HMPDJFSG",127,0)
 Q
"RTN","HMPDJFSG",128,0)
 ;
"RTN","HMPDJFSG",129,0)
INCITEM(DOMAIN) ; increment counters as item added *BEGIN*S68-JCH*
"RTN","HMPDJFSG",130,0)
 S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",131,0)
 I HMPFLIM="s" Q HMPFSIZE+$G(HMPFSIZE(DOMAIN),1200)
"RTN","HMPDJFSG",132,0)
 I HMPFLIM="c" Q HMPFCNT
"RTN","HMPDJFSG",133,0)
 Q 0
"RTN","HMPDJFSG",134,0)
 ; *END*S68-JCH*
"RTN","HMPDJFSG",135,0)
 ;
"RTN","HMPDJFSG",136,0)
FINISH(HMPDEL,HMPERR) ;reset the FIRST object delimiter, add header and tail
"RTN","HMPDJFSG",137,0)
 ; expects HMPFCNT,HMPFDT,HMPFSEQ,HMPFHMP,HMPFLAST
"RTN","HMPDJFSG",138,0)
 N CLOSE,I,START,TEXT,UID,X,II
"RTN","HMPDJFSG",139,0)
 S X=$G(^TMP("HMPF",$J,1,.3))
"RTN","HMPDJFSG",140,0)
 I $E(X,1,2)="}," S X=$E(X,3,$L(X)),^TMP("HMPF",$J,1,.3)=X
"RTN","HMPDJFSG",141,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR(HMPFCNT,HMPFDT_"-"_HMPFSEQ)
"RTN","HMPDJFSG",142,0)
 I $D(HMPERR) D
"RTN","HMPDJFSG",143,0)
 .S CLOSE=$S(HMPFCNT:"},",1:""),START=1
"RTN","HMPDJFSG",144,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=CLOSE_"{""error"":["
"RTN","HMPDJFSG",145,0)
 .S I=0 F  S I=$O(HMPERR(I)) Q:I'>0  D
"RTN","HMPDJFSG",146,0)
 ..S TEXT=HMPERR(I)
"RTN","HMPDJFSG",147,0)
 ..S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",148,0)
 .S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]"
"RTN","HMPDJFSG",149,0)
 ; operational sync item or patient
"RTN","HMPDJFSG",150,0)
 ; Check for closing flag & HMPFCNT and if it doesn't exist add a closing brace, always close array
"RTN","HMPDJFSG",151,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)=$S(HMPFCNT&('$G(HMPCLFLG)):"}",1:"")_"]",HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",152,0)
 ; modified
"RTN","HMPDJFSG",153,0)
 I $G(HMPSTGET)="true" D  ; true if "getStatus" argument passed in
"RTN","HMPDJFSG",154,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=",""syncStatii"":[",START=1
"RTN","HMPDJFSG",155,0)
 . S I=0 F  S I=$O(^HMP(800000,I)) Q:+I=0  D
"RTN","HMPDJFSG",156,0)
 . . I $P($G(^HMP(800000,I,0)),"^",1)=HMPFHMP D
"RTN","HMPDJFSG",157,0)
 . . . S II=0 F  S II=$O(^HMP(800000,I,1,II)) Q:+II=0  D
"RTN","HMPDJFSG",158,0)
 . . . . S TEXT="{""pid"":"_II_",""status"":"_$P(^HMP(800000,I,1,II,0),"^",2)_"}"
"RTN","HMPDJFSG",159,0)
 . . . . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)=$S(START:"",1:",")_TEXT S START=0
"RTN","HMPDJFSG",160,0)
 . S HMPFCNT=HMPFCNT+1,^TMP("HMPF",$J,HMPFCNT)="]"
"RTN","HMPDJFSG",161,0)
 ;
"RTN","HMPDJFSG",162,0)
 S ^TMP("HMPF",$J,HMPFCNT+1)="}}"
"RTN","HMPDJFSG",163,0)
 ; remove any ^XTMP nodes that have been successfully sent based on LAST
"RTN","HMPDJFSG",164,0)
 N DATE,SEQ,LASTDT,LASTSEQ,STRM,LSTRM,RSTRM
"RTN","HMPDJFSG",165,0)
 S LASTDT=+$P(HMPFLAST,"-"),LASTSEQ=+$P(HMPFLAST,"-",2)
"RTN","HMPDJFSG",166,0)
 S RSTRM="HMPFS~"_HMPFHMP_"~",LSTRM=$L(RSTRM),STRM=RSTRM
"RTN","HMPDJFSG",167,0)
 F  S STRM=$O(^XTMP(STRM)) Q:'$L(STRM)  Q:$E(STRM,1,LSTRM)'=RSTRM  D
"RTN","HMPDJFSG",168,0)
 . S DATE=$P(STRM,"~",3) Q:DATE>LASTDT
"RTN","HMPDJFSG",169,0)
 . S SEQ=0 F  S SEQ=$O(^XTMP(STRM,"tidy",SEQ)) Q:'SEQ  Q:(DATE=LASTDT)&(SEQ>LASTSEQ)  D TIDYX(STRM,SEQ)
"RTN","HMPDJFSG",170,0)
 Q
"RTN","HMPDJFSG",171,0)
TIDYX(STREAM,SEQ) ; clean up extracts after they have been retrieved
"RTN","HMPDJFSG",172,0)
 ; from FINISH
"RTN","HMPDJFSG",173,0)
 ;DE6047 make resilient
"RTN","HMPDJFSG",174,0)
 N BATCH,DOMAIN,TASK
"RTN","HMPDJFSG",175,0)
 Q:$G(STREAM)=""  Q:$G(SEQ)=""
"RTN","HMPDJFSG",176,0)
 S BATCH=$G(^XTMP(STREAM,"tidy",SEQ,"batch"))
"RTN","HMPDJFSG",177,0)
 S DOMAIN=$G(^XTMP(STREAM,"tidy",SEQ,"domain"))
"RTN","HMPDJFSG",178,0)
 S TASK=$G(^XTMP(STREAM,"tidy",SEQ,"task"))
"RTN","HMPDJFSG",179,0)
 I BATCH=""!(DOMAIN="")!(TASK="") D
"RTN","HMPDJFSG",180,0)
 . N C,J,TXT
"RTN","HMPDJFSG",181,0)
 . S C=1,TXT(C)=" Freshness Stream: "_STREAM_", missing TIDY elements in SEQ: "_SEQ
"RTN","HMPDJFSG",182,0)
 . S C=C+1,TXT(C)=" "  ; blank line following word-processing text, $$NWNTRY^HMPLOG appends to end
"RTN","HMPDJFSG",183,0)
 . S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,"M",.TXT)  ; log event as type "missing"
"RTN","HMPDJFSG",184,0)
 I BATCH'="" D
"RTN","HMPDJFSG",185,0)
 . I DOMAIN="<done>" K ^XTMP(BATCH) Q
"RTN","HMPDJFSG",186,0)
 . I TASK'="",DOMAIN'="" K ^XTMP(BATCH,TASK,DOMAIN)
"RTN","HMPDJFSG",187,0)
 K ^XTMP(STREAM,"tidy",SEQ)
"RTN","HMPDJFSG",188,0)
 Q
"RTN","HMPDJFSG",189,0)
SYNCCMD(SEQNODE) ; Build syncCommand object and stick in ^TMP
"RTN","HMPDJFSG",190,0)
 ; expects: HMPSYS, HMPFCNT
"RTN","HMPDJFSG",191,0)
 N DFN,CMD,CMDJSON,ERR
"RTN","HMPDJFSG",192,0)
 S DFN=+SEQNODE
"RTN","HMPDJFSG",193,0)
 S CMD("command")=$P($P(SEQNODE,U,3),":")
"RTN","HMPDJFSG",194,0)
 S CMD("domain")=$P($P(SEQNODE,U,3),":",2)
"RTN","HMPDJFSG",195,0)
 S:DFN CMD("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJFSG",196,0)
 S CMD("system")=HMPSYS
"RTN","HMPDJFSG",197,0)
 D ENCODE^HMPJSON("CMD","CMDJSON","ERR")
"RTN","HMPDJFSG",198,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",199,0)
 S HMPFSIZE=$$INCITEM("syncCommand") ; *S68-JCH*
"RTN","HMPDJFSG",200,0)
 M ^TMP("HMPF",$J,HMPFCNT)=CMDJSON
"RTN","HMPDJFSG",201,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncCommand",$$PIDS^HMPDJFS(DFN),1,1)
"RTN","HMPDJFSG",202,0)
 Q
"RTN","HMPDJFSG",203,0)
SYNCSTRT(SEQNODE) ;Build syncStart object with demograhics
"RTN","HMPDJFSG",204,0)
 ;expects HMPFSYS, HMPFHMP, HMPFCNT, HMPFSIZE *S68-JCH*
"RTN","HMPDJFSG",205,0)
 S HMPFSIZE=$$INCITEM("patient")  ;*S68-JCH*
"RTN","HMPDJFSG",206,0)
 N DFN,FILTER,DFN,WRAP
"RTN","HMPDJFSG",207,0)
 S DFN=$P($P(SEQNODE,U,3),"~",3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",208,0)
 I DFN D
"RTN","HMPDJFSG",209,0)
 . N RSLT ;cpc 2015/10/01
"RTN","HMPDJFSG",210,0)
 . S FILTER("patientId")=DFN,FILTER("domain")="patient"
"RTN","HMPDJFSG",211,0)
 . D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",212,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,1)
"RTN","HMPDJFSG",213,0)
 ; for OPD there is no object, so 4th argument is 0 
"RTN","HMPDJFSG",214,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart",$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","HMPDJFSG",215,0)
 Q
"RTN","HMPDJFSG",216,0)
SYNCDONE(SEQNODE) ; Build syncStatus object and stick in ^TMP
"RTN","HMPDJFSG",217,0)
 ;expects: HMPFSYS, HMPFCNT, HMPFHMP, HMPFSIZE  *S68-JCH*
"RTN","HMPDJFSG",218,0)
 N HMPBATCH,DFN,STS,STSJSON,X,ERR
"RTN","HMPDJFSG",219,0)
 S HMPBATCH=$P(SEQNODE,U,3) ; HMPFX~hmpSrvId~dfn
"RTN","HMPDJFSG",220,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSG",221,0)
 S STS("uid")="urn:va:syncStatus:"_HMPFSYS_":"_DFN
"RTN","HMPDJFSG",222,0)
 S STS("initialized")="true"
"RTN","HMPDJFSG",223,0)
 I DFN S STS("localId")=DFN
"RTN","HMPDJFSG",224,0)
 S X="" F  S X=$O(^XTMP(HMPBATCH,0,"count",X)) Q:'$L(X)  D
"RTN","HMPDJFSG",225,0)
 . S STS("domainTotals",X)=^XTMP(HMPBATCH,0,"count",X)
"RTN","HMPDJFSG",226,0)
 ;If resubscribing a patient, just send demographics
"RTN","HMPDJFSG",227,0)
 I DFN'="OPD",$D(^HMP(800000,"AITEM",DFN)) D
"RTN","HMPDJFSG",228,0)
 . N HMP99
"RTN","HMPDJFSG",229,0)
 . S HMP99=""
"RTN","HMPDJFSG",230,0)
 . ;Reset all domain counts to zero except for demographics
"RTN","HMPDJFSG",231,0)
 . F  S HMP99=$O(STS("domainTotals",HMP99)) Q:'HMP99  I HMP99'="patient" S STS("domainTotals",HMP99)=0
"RTN","HMPDJFSG",232,0)
 D ENCODE^HMPJSON("STS","STSJSON","ERR")
"RTN","HMPDJFSG",233,0)
 I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",234,0)
 S HMPFSIZE=$$INCITEM("syncstatus") ; *S68-JCH*
"RTN","HMPDJFSG",235,0)
 M ^TMP("HMPF",$J,HMPFCNT)=STSJSON
"RTN","HMPDJFSG",236,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStatus",$$PIDS^HMPDJFS(DFN),1,1)
"RTN","HMPDJFSG",237,0)
 Q
"RTN","HMPDJFSG",238,0)
 ;
"RTN","HMPDJFSG",239,0)
SYNCMETA(SNODE) ;US11019 Build NEW syncStart object
"RTN","HMPDJFSG",240,0)
 ;expects HMPFSYS, HMPFHMP, HMPFCNT
"RTN","HMPDJFSG",241,0)
 ;need to rebuild SNODE because WRAPPER expects it to fall in
"RTN","HMPDJFSG",242,0)
 N BATCH,DFN,WRAP,METADOM
"RTN","HMPDJFSG",243,0)
 S DFN=$P(SNODE,U,1)
"RTN","HMPDJFSG",244,0)
 S METADOM=$P(SNODE,U,3)
"RTN","HMPDJFSG",245,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN
"RTN","HMPDJFSG",246,0)
 S $P(SNODE,U,3)=BATCH
"RTN","HMPDJFSG",247,0)
 S HMPFSIZE=$$INCITEM("syncmeta") ;need to increment count
"RTN","HMPDJFSG",248,0)
 S ^TMP("HMPF",$J,HMPFCNT,.3)=$$WRAPPER("syncStart"_"#"_METADOM,$$PIDS^HMPDJFS(DFN),$S(DFN:1,1:-1),$S(DFN:1,1:-1))
"RTN","HMPDJFSG",249,0)
 S ^TMP("HMPF",$J,HMPFCNT,1)="null" ;always null object with this record
"RTN","HMPDJFSG",250,0)
 S HMPCLFLG=0 ; DE3502
"RTN","HMPDJFSG",251,0)
 Q
"RTN","HMPDJFSG",252,0)
 ;
"RTN","HMPDJFSG",253,0)
SYNCERR(SNODE,HMPERR) ;
"RTN","HMPDJFSG",254,0)
 N BATCH,CNT,DFN,NUM,OFFSET,PIDS,TASK,TOTAL,X
"RTN","HMPDJFSG",255,0)
 S DFN=$P(SNODE,U),X=$P(SNODE,U,3)
"RTN","HMPDJFSG",256,0)
 S PIDS=$$PIDS^HMPDJFS(DFN)
"RTN","HMPDJFSG",257,0)
 S TASK=$P(X,":",2),TOTAL=$P(X,":",4)
"RTN","HMPDJFSG",258,0)
 S BATCH="HMPFX~"_HMPFHMP_"~"_DFN ; extract node in ^XTMP
"RTN","HMPDJFSG",259,0)
 S CNT=$O(HMPERR(""),-1)
"RTN","HMPDJFSG",260,0)
 S NUM=0 F  S NUM=$O(^XTMP(BATCH,TASK,"error",NUM)) Q:NUM'>0  D
"RTN","HMPDJFSG",261,0)
 .S CNT=CNT+1 S HMPERR(CNT)=$G(^XTMP(BATCH,TASK,"error",NUM,1))
"RTN","HMPDJFSG",262,0)
 Q
"RTN","HMPDJFSG",263,0)
 ;
"RTN","HMPDJFSG",264,0)
FRESHITM(SEQNODE,DELETE,ERROR) ;Get freshness item and stick in ^TMP
"RTN","HMPDJFSG",265,0)
 ; expects HMPFSYS, HMPFHMP
"RTN","HMPDJFSG",266,0)
 N ACT,DFN,DOMAIN,ECNT,FILTER,ID,RSLT,UID,HMP97,HMPI,WRAP,HMPPAT7,HMPPAT8
"RTN","HMPDJFSG",267,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSG",268,0)
 S DFN=$P(SEQNODE,U),DOMAIN=$P(SEQNODE,U,2),ID=$P(SEQNODE,U,3),ACT=$P(SEQNODE,U,4)
"RTN","HMPDJFSG",269,0)
 ;Next 2 IFs added to prevent <UNDEFINED> in LKUP^HMPDJ00. JD - 3/4/16. DE3869
"RTN","HMPDJFSG",270,0)
 ;Make sure deletes ('@') are not included.
"RTN","HMPDJFSG",271,0)
 ;HMPFSTRM and HMPFIDX are defined in the GETSUB section above.
"RTN","HMPDJFSG",272,0)
 ;For "pt-select", ID=patient IEN and DFN="OPD" For ptient domains ID=DFN=patient IEN
"RTN","HMPDJFSG",273,0)
 ;checks for all patient domains and pt-select of the operational data domain
"RTN","HMPDJFSG",274,0)
 ;Kill the freshness stream entry with the bad patient IEN
"RTN","HMPDJFSG",275,0)
 I ACT'="@",DFN=+DFN,'$D(^DPT(DFN,0)) K ^XTMP(HMPFSTRM,HMPFIDX) Q  ;For patient domains
"RTN","HMPDJFSG",276,0)
 I ACT'="@",DOMAIN="pt-select",ID=+ID,'$D(^DPT(ID,0)) K ^XTMP(HMPFSTRM,HMPFIDX) Q
"RTN","HMPDJFSG",277,0)
 ;
"RTN","HMPDJFSG",278,0)
 ;Create a phantom "patient" if visit is the domain
"RTN","HMPDJFSG",279,0)
 I DOMAIN="visit" D
"RTN","HMPDJFSG",280,0)
 .S HMPPAT7=HMPFIDX_".99",HMPPAT8=^XTMP(HMPFSTRM,HMPFIDX),$P(HMPPAT8,U,2)="patient" ;BL;DE2280
"RTN","HMPDJFSG",281,0)
 .S ^XTMP(HMPFSTRM,HMPPAT7)=HMPPAT8
"RTN","HMPDJFSG",282,0)
 I ACT'="@" D
"RTN","HMPDJFSG",283,0)
 . S FILTER("id")=ID
"RTN","HMPDJFSG",284,0)
 . S FILTER("domain")=DOMAIN
"RTN","HMPDJFSG",285,0)
 . I DFN="OPD" D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSG",286,0)
 . I +DFN>0 D
"RTN","HMPDJFSG",287,0)
 ..  S FILTER("patientId")=DFN
"RTN","HMPDJFSG",288,0)
 ..  D  ; DE3691, add date/time with seconds to FILTER parameters, Feb 29 2016
"RTN","HMPDJFSG",289,0)
 ...   N DAY,SECS,TM S SECS=$P($G(^XTMP(HMPFSTRM,HMPFIDX)),U,5),DAY=$P(HMPFSTRM,"~",3)
"RTN","HMPDJFSG",290,0)
 ...   Q:('DAY)!('$L(SECS))  ; must have date and seconds, could be zero seconds (midnight)
"RTN","HMPDJFSG",291,0)
 ...   S TM=$S(SECS:SECS#60/100+(SECS#3600\60)/100+(SECS\3600)/100,SECS=0:".000001",1:"")  ; if zero (midnight) push to 1 second after
"RTN","HMPDJFSG",292,0)
 ...   Q:'$L(TM)  ; couldn't compute time
"RTN","HMPDJFSG",293,0)
 ...   S FILTER("freshnessDateTime")=DAY+TM
"RTN","HMPDJFSG",294,0)
 ..  D GET^HMPDJ(.RSLT,.FILTER)
"RTN","HMPDJFSG",295,0)
 I ACT'="@",$L($G(^TMP("HMP",$J,"error")))>0 D BLDSERR(DFN,.ERROR)  Q
"RTN","HMPDJFSG",296,0)
 I '$D(^TMP("HMP",$J,1)) S ACT="@"
"RTN","HMPDJFSG",297,0)
 I ACT="@" D
"RTN","HMPDJFSG",298,0)
 . S UID=$$SETUID^HMPUTILS(DOMAIN,$S(+DFN>0:DFN,1:""),ID)
"RTN","HMPDJFSG",299,0)
 . S HMP97=UID
"RTN","HMPDJFSG",300,0)
 . K ^TMP("HMP",$J) S ^TMP("HMP",$J,1)="" ; Need to dummy this up or it will never get set later
"RTN","HMPDJFSG",301,0)
 ;
"RTN","HMPDJFSG",302,0)
 ;Add syncstart, data and syncstatus to JSON for unsolicited updates - US4588 & US3682
"RTN","HMPDJFSG",303,0)
 I (DOMAIN="pt-select")!(DOMAIN="user")!(DOMAIN["asu-")!(DOMAIN="doc-def")!(DFN=+DFN) D  Q
"RTN","HMPDJFSG",304,0)
 .D ADHOC^HMPUTIL1(DOMAIN,.HMPFCNT,DFN)
"RTN","HMPDJFSG",305,0)
 .I $P(HMPFIDX,".",2)=99 K ^XTMP(HMPFSTRM,HMPFIDX) ;Remove the phantom "patient"; JD
"RTN","HMPDJFSG",306,0)
 .S HMPLITEM="FRESH" ;DE3502
"RTN","HMPDJFSG",307,0)
 ;
"RTN","HMPDJFSG",308,0)
 S WRAP=$$WRAPPER(DOMAIN,$$PIDS^HMPDJFS(DFN),1,1) ;N.B. this updates the .3 node on this HMPFCNT
"RTN","HMPDJFSG",309,0)
 F HMPI=1:1 Q:'$D(^TMP("HMP",$J,HMPI))  D
"RTN","HMPDJFSG",310,0)
 . S HMPFCNT=HMPFCNT+1
"RTN","HMPDJFSG",311,0)
 . M ^TMP("HMPF",$J,HMPFCNT)=^TMP("HMP",$J,HMPI)
"RTN","HMPDJFSG",312,0)
 . I HMPLITEM="SYNC" S HMPLITEM="FRESH" I WRAP="," S ^TMP("HMPF",$J,HMPFCNT,.3)="}," Q  ;DE3502 add closing
"RTN","HMPDJFSG",313,0)
 . S ^TMP("HMPF",$J,HMPFCNT,.3)=WRAP
"RTN","HMPDJFSG",314,0)
 Q
"RTN","HMPDJFSG",315,0)
 ;
"RTN","HMPDJFSG",316,0)
BLDSERR(DFN,ERROR) ;Create syncError object in ERRJSON
"RTN","HMPDJFSG",317,0)
 ;expects: HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSG",318,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRCNT,ERRMSG,SYNCERR
"RTN","HMPDJFSG",319,0)
 M ERRVAL=^TMP("HMP",$J,"error")
"RTN","HMPDJFSG",320,0)
 I $G(ERRVAL)="" Q
"RTN","HMPDJFSG",321,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","HMPDJFSG",322,0)
 D DECODE^HMPJSON("ERRVAL","ERROBJ","ERR")
"RTN","HMPDJFSG",323,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","HMPDJFSG",324,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","HMPDJFSG",325,0)
 Q:'$L(ERRMSG)
"RTN","HMPDJFSG",326,0)
 S SYNCERR("uid")="urn:va:syncError:"_HMPFSYS_":"_DFN_":FRESHNESS"
"RTN","HMPDJFSG",327,0)
 S SYNCERR("collection")=DOMAIN
"RTN","HMPDJFSG",328,0)
 S SYNCERR("error")=ERRMSG
"RTN","HMPDJFSG",329,0)
 D ENCODE^HMPJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSG",330,0)
 S COUNT=$O(ERROR(""),-1)  ;*BEGIN*S68-JCH*
"RTN","HMPDJFSG",331,0)
 S ERRCNT=0 F  S ERRCNT=$O(ERRJSON(ERRCNT)) Q:ERRCNT'>0  D
"RTN","HMPDJFSG",332,0)
 .S COUNT=COUNT+1 M ERROR(COUNT)=ERRJSON(COUNT)  ;*END*S68-JCH*
"RTN","HMPDJFSG",333,0)
 Q
"RTN","HMPDJFSG",334,0)
WRAPPER(DOMAIN,PIDS,OFFSET,DOMSIZE,FROMXTR) ;return JSON wrapper for each item *S68-JCH*
"RTN","HMPDJFSG",335,0)
 ;add object tag if extract total not zero or if total passed as -1
"RTN","HMPDJFSG",336,0)
 ;seq and total tags only added if non-zero
"RTN","HMPDJFSG",337,0)
 N X,Y,Z,HMPSVERS ;US11019
"RTN","HMPDJFSG",338,0)
 ;Ensure that X exists
"RTN","HMPDJFSG",339,0)
 S X=""
"RTN","HMPDJFSG",340,0)
 S Z=$P(SNODE,U,3)
"RTN","HMPDJFSG",341,0)
 S HMPSVERS=$G(^XTMP(Z,"HMPSVERS")) ;US11019 If HMPSVERS=0 then running in previous mode
"RTN","HMPDJFSG",342,0)
 S HMPSTMP=$G(^XTMP(Z,"HMPSTMP")) ;PJH - THIS USED ONLY FOR OPD COMPILE IN PRIOR VERSION - NEEDS REMOVING US6734
"RTN","HMPDJFSG",343,0)
 ;This was working for operational data, not patient data
"RTN","HMPDJFSG",344,0)
 ;DFN will be OPD if this is operational data
"RTN","HMPDJFSG",345,0)
 I DFN="OPD" D
"RTN","HMPDJFSG",346,0)
 . S:$P($G(DOMAIN),"#")'="syncStart" X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS ;US11019
"RTN","HMPDJFSG",347,0)
 E  S X="},{""collection"":"""_$P(DOMAIN,"#")_""""_PIDS  ; If ONLY patient data exists
"RTN","HMPDJFSG",348,0)
 I HMPLITEM="FRESH" I $E(X)="}" S X=$E(X,2,$L(X)) ; DE3502 - remove closing when coming from Fresh
"RTN","HMPDJFSG",349,0)
 I $P(DOMAIN,"#")="syncStart",$O(^XTMP(Z,0))]"" D  Q X
"RTN","HMPDJFSG",350,0)
 .;--- Start US3907 ---
"RTN","HMPDJFSG",351,0)
 .;Pass JobId and RootJobId back in the response if we were given them
"RTN","HMPDJFSG",352,0)
 .;This bridges the gap between Job status and Sync Status (since VistA will be giving the syncStatus)
"RTN","HMPDJFSG",353,0)
 .;US11019 use domain specific Job id
"RTN","HMPDJFSG",354,0)
 .S Y=$S($P(DOMAIN,"#",2)="":$G(^XTMP(Z,"JOBID")),1:$G(^XTMP(Z,"JOBID",$P(DOMAIN,"#",2)))) ;US11019
"RTN","HMPDJFSG",355,0)
 .I Y]"" S X=X_",""jobId"":"""_Y_""""
"RTN","HMPDJFSG",356,0)
 .S Y=$G(^XTMP(Z,"ROOTJOBID"))
"RTN","HMPDJFSG",357,0)
 .I Y]"" S X=X_",""rootJobId"":"""_Y_""""
"RTN","HMPDJFSG",358,0)
 .;--- End US3907 ---
"RTN","HMPDJFSG",359,0)
 .I DFN'="OPD" D METAPT^HMPMETA(SNODE,$S(HMPSVERS:$P(DOMAIN,"#",2),1:"")) Q  ;US11019 extra para ;Collect Patient metastamp data from XTMP - US6734
"RTN","HMPDJFSG",360,0)
 .D METAOP^HMPMETA(SNODE) ; Collect OPD metastamp data from XTMP - US6734
"RTN","HMPDJFSG",361,0)
 S X=X_","
"RTN","HMPDJFSG",362,0)
 ;if batched by extract  *S68-JCH*
"RTN","HMPDJFSG",363,0)
 I $G(OFFSET)>-1 S X=X_"""seq"":"_OFFSET_","
"RTN","HMPDJFSG",364,0)
 I $G(DOMSIZE)>-1 S X=X_"""total"":"_DOMSIZE_","
"RTN","HMPDJFSG",365,0)
 I $G(OFFSET)>-1 S X=X_"""object"":"
"RTN","HMPDJFSG",366,0)
 Q X
"RTN","HMPDJFSG",367,0)
 ;
"RTN","HMPDJFSG",368,0)
APIHDR(COUNT,LASTITM) ;return JSON
"RTN","HMPDJFSG",369,0)
 ;expects HMPFSYS
"RTN","HMPDJFSG",370,0)
 I $P($G(LASTITM),".",2)="99" S LASTITM=$P(LASTITM,".") ;make sure lastUpdate is correct;JD;BL;DE2280
"RTN","HMPDJFSG",371,0)
 N X
"RTN","HMPDJFSG",372,0)
 S X="{""apiVersion"":1.02,""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSG",373,0)
 S X=X_",""systemId"":"""_HMPFSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSG",374,0)
 S X=X_",""totalItems"":"_COUNT_",""lastUpdate"":"""_LASTITM_""""_$$PROGRESS^HMPDJFS(LASTITM)
"RTN","HMPDJFSG",375,0)
 S X=X_",""items"":["
"RTN","HMPDJFSG",376,0)
 Q X
"RTN","HMPDJFSG",377,0)
NOOP(LASTITM) ;No-op, don't return any items
"RTN","HMPDJFSG",378,0)
 S ^TMP("HMPF",$J,.5)=$$APIHDR(0,LASTITM)_"]}}"
"RTN","HMPDJFSG",379,0)
 Q
"RTN","HMPDJFSG",380,0)
VERMATCH(HMPIEN,VERSION) ;true if middle tier HMP and VistA version match
"RTN","HMPDJFSG",381,0)
 ;versions match, queue any patients waiting for match
"RTN","HMPDJFSG",382,0)
 I $P($$GET^XPAR("PKG","HMP JSON SCHEMA"),".")=$P(VERSION,".") D  QUIT 1
"RTN","HMPDJFSG",383,0)
 . Q:'$G(^XTMP("HMPFS~"_HMPIEN,"waiting"))  ; no patients awaiting queuing
"RTN","HMPDJFSG",384,0)
 . S ^XTMP("HMPFS~"_HMPIEN,"waiting")=0
"RTN","HMPDJFSG",385,0)
 . N DOMAINS,BATCH,HMPNAME
"RTN","HMPDJFSG",386,0)
 . S HMPNAME=$P(^HMP(800000,HMPIEN,0),U)
"RTN","HMPDJFSG",387,0)
 . D PTDOMS^HMPDJFSD(.DOMAINS)
"RTN","HMPDJFSG",388,0)
 . S DFN=0 F  S DFN=$O(^XTMP("HMPFS~"_HMPIEN,"waiting",DFN)) Q:'DFN  D
"RTN","HMPDJFSG",389,0)
 . . Q:'$D(^HMP(800000,HMPIEN,1,DFN))  ; subscription cancelled while waiting  *S68-JCH*
"RTN","HMPDJFSG",390,0)
 . . S BATCH="HMPFX~"_HMPNAME_"~"_DFN
"RTN","HMPDJFSG",391,0)
 . . D QUINIT^HMPDJFSP(BATCH,DFN,.DOMAINS)
"RTN","HMPDJFSG",392,0)
 . K ^XTMP("HMPFS~"_HMPIEN)
"RTN","HMPDJFSG",393,0)
 ;
"RTN","HMPDJFSG",394,0)
 ;otherwise, hold things
"RTN","HMPDJFSG",395,0)
 D NEWXTMP^HMPDJFS("HMPFS~"_HMPIEN,8,"HMP Awaiting Version Match")
"RTN","HMPDJFSG",396,0)
 S ^XTMP("HMPFS~"_HMPIEN,"waiting")=1
"RTN","HMPDJFSG",397,0)
 Q 0
"RTN","HMPDJFSG",398,0)
 ;
"RTN","HMPDJFSG",399,0)
LASTUPD(HMPSRV,LASTUPD) ;save the last update
"RTN","HMPDJFSG",400,0)
 ; TODO: change this to use Fileman call
"RTN","HMPDJFSG",401,0)
 N IEN,CURRUPD,REPEAT
"RTN","HMPDJFSG",402,0)
 S IEN=$O(^HMP(800000,"B",HMPSRV,0)) Q:'IEN
"RTN","HMPDJFSG",403,0)
 Q:LASTUPD["^"
"RTN","HMPDJFSG",404,0)
 S CURRUPD=$P(^HMP(800000,IEN,0),"^",2),REPEAT=$P(^HMP(800000,IEN,0),"^",4)
"RTN","HMPDJFSG",405,0)
 I LASTUPD=CURRUPD S $P(^HMP(800000,IEN,0),"^",4)=REPEAT+1 QUIT
"RTN","HMPDJFSG",406,0)
 S $P(^HMP(800000,IEN,0),"^",2)=LASTUPD,$P(^HMP(800000,IEN,0),"^",4)=0
"RTN","HMPDJFSG",407,0)
 Q
"RTN","HMPDJFSG",408,0)
JSONOUT ;Write out JSON in ^TMP
"RTN","HMPDJFSG",409,0)
 N X
"RTN","HMPDJFSG",410,0)
 S X=$NA(^TMP("HMPF",$J))
"RTN","HMPDJFSG",411,0)
 F  S X=$Q(@X) Q:($QS(X,1)'="HMPF")!($QS(X,2)'=$J)  W !,@X
"RTN","HMPDJFSG",412,0)
 Q
"RTN","HMPDJFSG",413,0)
 ;
"RTN","HMPDJFSM")
0^52^B64763470^B83803111
"RTN","HMPDJFSM",1,0)
HMPDJFSM ;SLC/KCM,ASMR/BL,CK-PROTOCOLS & API's FOR MONITORING ;Sep 23, 2016 10:44:23
"RTN","HMPDJFSM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJFSM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSM",4,0)
 ;
"RTN","HMPDJFSM",5,0)
 Q  ; no entry at top
"RTN","HMPDJFSM",6,0)
 ;DE4611, routine cleanup to bring it up to eHMP standards, 22 September 2016
"RTN","HMPDJFSM",7,0)
 ;
"RTN","HMPDJFSM",8,0)
 ;subroutines that support API^HMPDJFS
"RTN","HMPDJFSM",9,0)
 ; HLTHCHK: check health of VistA Server subscription
"RTN","HMPDJFSM",10,0)
 ; $$HLTHINFO = domain progress (Health Info) in JSON
"RTN","HMPDJFSM",11,0)
 ; $$HLTHHDR = domain-progress (Health Header) header in JSON
"RTN","HMPDJFSM",12,0)
 ;
"RTN","HMPDJFSM",13,0)
 ;subroutines that support SRV^HMPEQ & EVTS^HMPEQ
"RTN","HMPDJFSM",14,0)
 ; $$LSTREAM = latest stream for this server
"RTN","HMPDJFSM",15,0)
 ; $$WAIT = # seconds the batch has been waiting
"RTN","HMPDJFSM",16,0)
 ; $$LOBJ = last domain>count retrieved for this batch
"RTN","HMPDJFSM",17,0)
 ;
"RTN","HMPDJFSM",18,0)
 ;subroutines that support protocol menu HMPM EVT QUE MGR MENU
"RTN","HMPDJFSM",19,0)
 ; $$GETSRV = protocol HMPM EVT QUE CHANGE SERVER [Change Server]
"RTN","HMPDJFSM",20,0)
 ; EMERSTOP: protocol HMPM EVT QUE EMERGENCY STOP [not distributed]
"RTN","HMPDJFSM",21,0)
 ; RSTRTFR: protocol HMPM EVT QUE RESTART FRESHNESS [not distributed]
"RTN","HMPDJFSM",22,0)
 ; SETFRUP: set flag for freshness updates
"RTN","HMPDJFSM",23,0)
 ; CHGFTYP: change the freshness update flag for domain
"RTN","HMPDJFSM",24,0)
 ; STOPFTYP: stop freshness updates for domain
"RTN","HMPDJFSM",25,0)
 ; STRTFTYP: resume freshness updates for domain
"RTN","HMPDJFSM",26,0)
 ; $$GETFTYP = select & return domain from list
"RTN","HMPDJFSM",27,0)
 ; SHOWFTYP: show freshness domains
"RTN","HMPDJFSM",28,0)
 ; EVNTYPS: protocol HMPM EVT QUE CHANGE DOMAIN [Change Domain]
"RTN","HMPDJFSM",29,0)
 ;
"RTN","HMPDJFSM",30,0)
ADDPT(PAT) ; Add patient to server
"RTN","HMPDJFSM",31,0)
 N ARGS,RESULT,SRV,Y
"RTN","HMPDJFSM",32,0)
 I '$G(PAT) S PAT=$$GETPAT() Q:'PAT
"RTN","HMPDJFSM",33,0)
 S SRV=$$GETSRV() Q:SRV'>0
"RTN","HMPDJFSM",34,0)
 I $G(^HMP(800000,"AITEM",PAT,SRV))>0 W !,"Patient "_PAT_" already synched."
"RTN","HMPDJFSM",35,0)
 ;
"RTN","HMPDJFSM",36,0)
 S ARGS("command")="putPtSubscription"
"RTN","HMPDJFSM",37,0)
 S ARGS("server")=$P(^HMP(800000,SRV,0),"^")
"RTN","HMPDJFSM",38,0)
 S ARGS("localId")=PAT
"RTN","HMPDJFSM",39,0)
 D API^HMPDJFS(.RESULT,.ARGS)
"RTN","HMPDJFSM",40,0)
 ;IA10035, DE2818
"RTN","HMPDJFSM",41,0)
 S Y=$S(^TMP("HMPF",$J,1)["location":$P($G(^DPT(PAT,0)),"^")_" is being synched.",1:"Subscription failed.")_" DFN: "_PAT
"RTN","HMPDJFSM",42,0)
 W !,Y
"RTN","HMPDJFSM",43,0)
 Q
"RTN","HMPDJFSM",44,0)
 ;
"RTN","HMPDJFSM",45,0)
GETPAT() ; Return DFN for a patient
"RTN","HMPDJFSM",46,0)
 N DIC,Y
"RTN","HMPDJFSM",47,0)
 S DIC=2,DIC(0)="AEMQ"  ; DE2818, changed to file number, not global
"RTN","HMPDJFSM",48,0)
 D ^DIC
"RTN","HMPDJFSM",49,0)
 Q +Y
"RTN","HMPDJFSM",50,0)
 ;
"RTN","HMPDJFSM",51,0)
HLTHCHK(ARGS) ; check health of VistA Server subscription
"RTN","HMPDJFSM",52,0)
 ; called by:
"RTN","HMPDJFSM",53,0)
 ;   API^HMPDJFS: asynchronous extracts & freshness via stream
"RTN","HMPDJFSM",54,0)
 ; calls:
"RTN","HMPDJFSM",55,0)
 ;   SETERR^HMPDJFS: log error
"RTN","HMPDJFSM",56,0)
 ;   $$HLTHINFO = progress for this domain
"RTN","HMPDJFSM",57,0)
 ;   $$HLTHHDR = JSON header for progress report
"RTN","HMPDJFSM",58,0)
 ; input:
"RTN","HMPDJFSM",59,0)
 ;   .ARGS("server") = HMP Server Id
"RTN","HMPDJFSM",60,0)
 ;  also these, created by API^HMPDJFS, passed thru symbol table:
"RTN","HMPDJFSM",61,0)
 ;   HMPFRSP = [unused?]
"RTN","HMPDJFSM",62,0)
 ;   HMPFHMP = server name
"RTN","HMPDJFSM",63,0)
 ;   HMPSYS = system id
"RTN","HMPDJFSM",64,0)
 ; output: in ^TMP("HMPF",$job,node): list of active extracts
"RTN","HMPDJFSM",65,0)
 ;   {pid="ABCD;229",domainsCompleted=8,domainsPending=20,
"RTN","HMPDJFSM",66,0)
 ;   objectCount=137,subscribeTime=20140609112734,
"RTN","HMPDJFSM",67,0)
 ;   extractStatus="initializing"}
"RTN","HMPDJFSM",68,0)
 ;
"RTN","HMPDJFSM",69,0)
 ; DE4611 begin, 21 September 2016
"RTN","HMPDJFSM",70,0)
 N DFN,HMPIEN,NXTDFN,STS,TIME
"RTN","HMPDJFSM",71,0)
 S HMPIEN=$O(^HMP(800000,"B",HMPFHMP,0))
"RTN","HMPDJFSM",72,0)
 I 'HMPIEN D SETERR^HMPDJFS("Server not registered") Q
"RTN","HMPDJFSM",73,0)
 ; NODE - count of nodes in returned JSON
"RTN","HMPDJFSM",74,0)
 ; NXTDFN - next DFN in queue using naked reference, if found append comma to each JSON node
"RTN","HMPDJFSM",75,0)
 S NODE=0,STS=""
"RTN","HMPDJFSM",76,0)
 F  S STS=$O(^HMP(800000,HMPIEN,1,"AP",STS)) Q:'$L(STS)  D
"RTN","HMPDJFSM",77,0)
 . S TIME="" F  S TIME=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME)) Q:'$L(TIME)  D
"RTN","HMPDJFSM",78,0)
 ..  S DFN="" F  S DFN=$O(^HMP(800000,HMPIEN,1,"AP",STS,TIME,DFN)) Q:'DFN  S NXTDFN=$O(^(DFN)) D
"RTN","HMPDJFSM",79,0)
 ...   S NODE=NODE+1,^TMP("HMPF",$J,NODE)=$$HLTHINFO(HMPFHMP,HMPIEN,DFN)_$S(NXTDFN:",",1:"")
"RTN","HMPDJFSM",80,0)
 ; DE4611 end
"RTN","HMPDJFSM",81,0)
 S ^TMP("HMPF",$J,.5)=$$HLTHHDR(NODE)
"RTN","HMPDJFSM",82,0)
 S ^TMP("HMPF",$J,NODE+1)="]}}"
"RTN","HMPDJFSM",83,0)
 Q
"RTN","HMPDJFSM",84,0)
 ;
"RTN","HMPDJFSM",85,0)
 ;
"RTN","HMPDJFSM",86,0)
HLTHINFO(SRV,SRVIEN,DFN) ;function, return domain progress in JSON
"RTN","HMPDJFSM",87,0)
 ; called by:
"RTN","HMPDJFSM",88,0)
 ;   HLTHCHK
"RTN","HMPDJFSM",89,0)
 ; input:
"RTN","HMPDJFSM",90,0)
 ;   SRV = name of server, to use in ^XTMP subscripts
"RTN","HMPDJFSM",91,0)
 ;   SRVIEN = record # in file HMP Subscription (800000)
"RTN","HMPDJFSM",92,0)
 ;   DFN = record # in file Patient (2)
"RTN","HMPDJFSM",93,0)
 ; output = string of JSON reporting progress for this domain
"RTN","HMPDJFSM",94,0)
 ;   {pid,domainsCompleted,domainsPending,objectCount,queuedTime,
"RTN","HMPDJFSM",95,0)
 ;   phase(waiting,extracting)
"RTN","HMPDJFSM",96,0)
 ;
"RTN","HMPDJFSM",97,0)
 N BATCH,CNT,DOM,DONE,HMPERR,INFO,JSON,PEND,QTIME,STS
"RTN","HMPDJFSM",98,0)
 S BATCH="HMPFX~"_SRV_"~"_DFN
"RTN","HMPDJFSM",99,0)
 S QTIME=$G(^XTMP(BATCH,0,"time")) S:$L(QTIME) QTIME=$$HTFM^XLFDT(QTIME)
"RTN","HMPDJFSM",100,0)
 S DONE=0,PEND=0,CNT=0
"RTN","HMPDJFSM",101,0)
 S DOM="" F  S DOM=$O(^XTMP(BATCH,0,"status",DOM)) Q:DOM=""  D
"RTN","HMPDJFSM",102,0)
 . S CNT=CNT+$G(^XTMP(BATCH,0,"count",DOM))
"RTN","HMPDJFSM",103,0)
 . I $G(^XTMP(BATCH,0,"status",DOM)) S DONE=DONE+1 Q
"RTN","HMPDJFSM",104,0)
 . S PEND=PEND+1
"RTN","HMPDJFSM",105,0)
 S INFO("pid")=$$PID^HMPDJFS(DFN)
"RTN","HMPDJFSM",106,0)
 S INFO("domainsCompleted")=DONE,INFO("domainsPending")=PEND,INFO("objectCount")=CNT
"RTN","HMPDJFSM",107,0)
 I $L(QTIME) S INFO("queuedTime")=$$FMTHL7^HMPSTMP(QTIME)  ; DE5016
"RTN","HMPDJFSM",108,0)
 S STS=$P($G(^HMP(800000,SRVIEN,1,DFN,0)),"^",2)
"RTN","HMPDJFSM",109,0)
 S INFO("extractStatus")=$S(STS=1:"initializing",STS=2:"initialized",1:"uninitialized")
"RTN","HMPDJFSM",110,0)
 D ENCODE^HMPJSON("INFO","JSON","HMPERR")
"RTN","HMPDJFSM",111,0)
 I $D(HMPERR) Q HMPERR  ;  encoding error, return that
"RTN","HMPDJFSM",112,0)
 Q JSON(1) ; return domain progress
"RTN","HMPDJFSM",113,0)
 ;
"RTN","HMPDJFSM",114,0)
 ;
"RTN","HMPDJFSM",115,0)
HLTHHDR(COUNT) ; function, domain-progress header (health header) as JSON
"RTN","HMPDJFSM",116,0)
 ;   COUNT = total # items
"RTN","HMPDJFSM",117,0)
 ;   HMPSYS = system id (in symbol table)
"RTN","HMPDJFSM",118,0)
 N X  ; $$KSP^XUPARAM = return kernel system parameter WHERE (domain)
"RTN","HMPDJFSM",119,0)
 S X="{""apiVersion"":1.02,""params"":{""domain"":"""_$$KSP^XUPARAM("WHERE")_""""
"RTN","HMPDJFSM",120,0)
 S X=X_",""systemId"":"""_HMPSYS_"""},""data"":{""updated"":"""_$$HL7NOW^HMPDJ_""""
"RTN","HMPDJFSM",121,0)
 S X=X_",""totalItems"":"_COUNT
"RTN","HMPDJFSM",122,0)
 S X=X_",""items"":["
"RTN","HMPDJFSM",123,0)
 Q X  ; return domain-progress header
"RTN","HMPDJFSM",124,0)
 ;
"RTN","HMPDJFSM",125,0)
LSTREAM(SRV) ;function, latest stream for this server
"RTN","HMPDJFSM",126,0)
 ; called by:
"RTN","HMPDJFSM",127,0)
 ;   EVTS^HMPEQ: return events for server's last stream
"RTN","HMPDJFSM",128,0)
 ;   SRV^HMPEQ: process one server
"RTN","HMPDJFSM",129,0)
 ; calls: none
"RTN","HMPDJFSM",130,0)
 ; input:
"RTN","HMPDJFSM",131,0)
 ;   SRV = ien of server in file HMP Subscription (8000000)
"RTN","HMPDJFSM",132,0)
 ;
"RTN","HMPDJFSM",133,0)
 N STREAM
"RTN","HMPDJFSM",134,0)
 S STREAM="HMPFS~"_$P($G(^HMP(800000,SRV,0)),"^")_"~9999999999"
"RTN","HMPDJFSM",135,0)
 Q $O(^XTMP(STREAM),-1)  ; return last stream ID for this server
"RTN","HMPDJFSM",136,0)
 ;
"RTN","HMPDJFSM",137,0)
WAIT(BATCH) ; function, number of seconds the batch has been waiting
"RTN","HMPDJFSM",138,0)
 ; called by:
"RTN","HMPDJFSM",139,0)
 ;   SRV^HMPEQ: process one server
"RTN","HMPDJFSM",140,0)
 ; BATCH = extract batch in ^XTMP
"RTN","HMPDJFSM",141,0)
 N START S START=$G(^XTMP(BATCH,0,"time")) Q:'START 0
"RTN","HMPDJFSM",142,0)
 Q $$HDIFF^XLFDT($H,START,2)  ; return # seconds waiting
"RTN","HMPDJFSM",143,0)
 ;
"RTN","HMPDJFSM",144,0)
LOBJ(BATCH,TASK) ;function, last item in domain or <finished> if none
"RTN","HMPDJFSM",145,0)
 ; called by SRV^HMPEQ process one server
"RTN","HMPDJFSM",146,0)
 ;   BATCH = extract batch
"RTN","HMPDJFSM",147,0)
 ;   TASK = extract-batch task id
"RTN","HMPDJFSM",148,0)
 Q:'$G(TASK) "no task"  ; must have task
"RTN","HMPDJFSM",149,0)
 N DOMAIN,LASTITM,NUM S (DOMAIN,LASTITM,NUM)=""
"RTN","HMPDJFSM",150,0)
 F  S DOMAIN=$O(^XTMP(BATCH,0,"status",DOMAIN)) Q:'$L(DOMAIN)  D  Q:$L(LASTITM)
"RTN","HMPDJFSM",151,0)
 . Q:$G(^XTMP(BATCH,0,"status",DOMAIN))  ; domain complete
"RTN","HMPDJFSM",152,0)
 . S NUM=$O(^XTMP(BATCH,TASK,DOMAIN,""),-1),LASTITM=DOMAIN_$S(NUM:" #"_NUM,1:"")
"RTN","HMPDJFSM",153,0)
 ;
"RTN","HMPDJFSM",154,0)
 Q $S('$L(LASTITM):"<finished>",1:LASTITM)  ; return last domain item
"RTN","HMPDJFSM",155,0)
 ;
"RTN","HMPDJFSM",156,0)
 ; subroutines that support protocol menu HMPM EVT QUE MGR MENU
"RTN","HMPDJFSM",157,0)
GETSRV() ;extrinsic variable, interactive protocol HMPM EVT QUE CHANGE SERVER [Change Server]
"RTN","HMPDJFSM",158,0)
 ; called by:
"RTN","HMPDJFSM",159,0)
 ;   protocol unwinder
"RTN","HMPDJFSM",160,0)
 ; output = IEN of server to monitor
"RTN","HMPDJFSM",161,0)
 ;
"RTN","HMPDJFSM",162,0)
 N DIC,Y
"RTN","HMPDJFSM",163,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQ",DIC("A")="Select HMP server instance: "
"RTN","HMPDJFSM",164,0)
 D ^DIC Q +Y ; return IEN for the server to monitor
"RTN","HMPDJFSM",165,0)
 ;
"RTN","HMPDJFSM",166,0)
 ;
"RTN","HMPDJFSM",167,0)
EMERSTOP ; protocol HMPM EVT QUE EMERGENCY STOP [not distributed]
"RTN","HMPDJFSM",168,0)
 ; called by:
"RTN","HMPDJFSM",169,0)
 ;   protocol unwinder
"RTN","HMPDJFSM",170,0)
 ;  user selects a domain to stop freshness updates
"RTN","HMPDJFSM",171,0)
 ; Emergency Stop for Freshness
"RTN","HMPDJFSM",172,0)
 D SETFRUP(0) Q
"RTN","HMPDJFSM",173,0)
 ;
"RTN","HMPDJFSM",174,0)
RSTRTFR ; protocol HMPM EVT QUE RESTART FRESHNESS [not distributed]
"RTN","HMPDJFSM",175,0)
 ; called by:
"RTN","HMPDJFSM",176,0)
 ;   protocol unwinder:
"RTN","HMPDJFSM",177,0)
 ;   user selects a domain to resume freshness updates
"RTN","HMPDJFSM",178,0)
 ; Re-start freshness updates
"RTN","HMPDJFSM",179,0)
 D SETFRUP(1) Q
"RTN","HMPDJFSM",180,0)
 ;
"RTN","HMPDJFSM",181,0)
SETFRUP(START) ; set flag for freshness updates
"RTN","HMPDJFSM",182,0)
 ; called by:
"RTN","HMPDJFSM",183,0)
 ;   EMERSTOP
"RTN","HMPDJFSM",184,0)
 ;   RSTRTFR
"RTN","HMPDJFSM",185,0)
 ; input:
"RTN","HMPDJFSM",186,0)
 ;   START = 0 to stop, 1 to resume
"RTN","HMPDJFSM",187,0)
 ;   user selects a domain to stop or resume freshness updates
"RTN","HMPDJFSM",188,0)
 ; output:
"RTN","HMPDJFSM",189,0)
 ;   freshness updates stopped or resumed for selected domain
"RTN","HMPDJFSM",190,0)
 ;
"RTN","HMPDJFSM",191,0)
 D:'START
"RTN","HMPDJFSM",192,0)
 . W !,"WARNING!  This will stop freshness updates for the HMP."
"RTN","HMPDJFSM",193,0)
 . W !,"          It will be necessary to re-synch patient data.",!
"RTN","HMPDJFSM",194,0)
 D:START
"RTN","HMPDJFSM",195,0)
 . W !,"This will --RESUME-- freshness updates for the HMP."
"RTN","HMPDJFSM",196,0)
 . W !,"It may be necessary to re-synch patient and operational data.",!
"RTN","HMPDJFSM",197,0)
 N TYPLST,DMNLST,I,TYPE
"RTN","HMPDJFSM",198,0)
 D EVNTYPS(.TYPLST)
"RTN","HMPDJFSM",199,0)
 S I=0 F  S I=$O(TYPLST(I)) Q:'I  S DMNLST(TYPLST(I))=""
"RTN","HMPDJFSM",200,0)
 S TYPE=$$GETFTYP(.DMNLST,START)
"RTN","HMPDJFSM",201,0)
 Q:TYPE=""
"RTN","HMPDJFSM",202,0)
 I TYPE="*" D  Q  ; all types
"RTN","HMPDJFSM",203,0)
 . S TYPE="" F  S TYPE=$O(DMNLST(TYPE)) Q:TYPE=""  D CHGFTYP(TYPE,START)
"RTN","HMPDJFSM",204,0)
 D CHGFTYP(TYPE,START) Q
"RTN","HMPDJFSM",205,0)
 ;
"RTN","HMPDJFSM",206,0)
CHGFTYP(TYPE,ACTN) ; change the freshness update flag for a type
"RTN","HMPDJFSM",207,0)
 ; input:
"RTN","HMPDJFSM",208,0)
 ;   TYPE = domain to change
"RTN","HMPDJFSM",209,0)
 ;   ACTN = 0 to stop, 1 to resume
"RTN","HMPDJFSM",210,0)
 I ACTN D STRTFTYP(TYPE) Q
"RTN","HMPDJFSM",211,0)
 ; otherwise
"RTN","HMPDJFSM",212,0)
 D STOPFTYP(TYPE) Q
"RTN","HMPDJFSM",213,0)
 ;
"RTN","HMPDJFSM",214,0)
STOPFTYP(DMN) ; stop freshness updates for domain, DMN = domain to stop
"RTN","HMPDJFSM",215,0)
 ; create ^XTMP zero node if needed, save data for 30 days
"RTN","HMPDJFSM",216,0)
 D:'$D(^XTMP("HMP-off",0)) NEWXTMP^HMPDJFS("HMP-off",30,"Switch off HMP freshness updates")
"RTN","HMPDJFSM",217,0)
 W !,"Stopping freshness updates for: "_DMN
"RTN","HMPDJFSM",218,0)
 S ^XTMP("HMP-off",DMN)=1 Q
"RTN","HMPDJFSM",219,0)
 ;
"RTN","HMPDJFSM",220,0)
STRTFTYP(DMN) ; resume freshness updates for domain, DMN = domain to resume
"RTN","HMPDJFSM",221,0)
 W !,"Resuming freshness updates for: "_DMN
"RTN","HMPDJFSM",222,0)
 K ^XTMP("HMP-off",DMN) Q
"RTN","HMPDJFSM",223,0)
 ;
"RTN","HMPDJFSM",224,0)
GETFTYP(DMNLST,ACTN) ;function, select & return domain from list, DMNLST passed by ref.
"RTN","HMPDJFSM",225,0)
 ; input:
"RTN","HMPDJFSM",226,0)
 ;  DMNLST(domain name) = "" for all selectable domains
"RTN","HMPDJFSM",227,0)
 ;  ACTN = 0 to stop, 1 to resume
"RTN","HMPDJFSM",228,0)
 ;   user prompted to select a domain
"RTN","HMPDJFSM",229,0)
 ;
"RTN","HMPDJFSM",230,0)
 N P,T,X
"RTN","HMPDJFSM",231,0)
 S P=$S(ACTN:"start",1:"stop")
"RTN","HMPDJFSM",232,0)
 F  D  Q:X'["?"
"RTN","HMPDJFSM",233,0)
 . D SHOWFTYP(.DMNLST)
"RTN","HMPDJFSM",234,0)
 . W !!,"Choose domain to "_P_". (* "_P_"s all): "
"RTN","HMPDJFSM",235,0)
 . R X:DTIME S:X["^" X="" Q:X=""  Q:X="*"
"RTN","HMPDJFSM",236,0)
 . S X=$$LOW^XLFSTR(X) Q:$D(DMNLST(X))  ; match found
"RTN","HMPDJFSM",237,0)
 . S T=$O(DMNLST(X))  ; check for partial match
"RTN","HMPDJFSM",238,0)
 . I X=$E(T,1,$L(X)) W "  "_T S X=T Q  ; partial match found
"RTN","HMPDJFSM",239,0)
 . W "  ??",! S X="?"  ; set X to ? to keep asking
"RTN","HMPDJFSM",240,0)
 ;
"RTN","HMPDJFSM",241,0)
 Q X  ; return selected domain
"RTN","HMPDJFSM",242,0)
 ;
"RTN","HMPDJFSM",243,0)
 ;
"RTN","HMPDJFSM",244,0)
SHOWFTYP(DMNLST) ; show freshness domains
"RTN","HMPDJFSM",245,0)
 ;   DMNLST(domain name) = "" for all selectable domains, passed by ref.
"RTN","HMPDJFSM",246,0)
 ;list of domains displayed on current device
"RTN","HMPDJFSM",247,0)
 N C,DM,Y
"RTN","HMPDJFSM",248,0)
 S C=0,(DM,Y)="" F  S DM=$O(DMNLST(DM)) Q:'$L(DM)  D
"RTN","HMPDJFSM",249,0)
 . S C=C+1 I C<3 S Y=Y_DM_$J(" ",26-$L(DM)) Q  ; 3 domains per line padded
"RTN","HMPDJFSM",250,0)
 . S Y=Y_DM W !,Y S C=0,Y=""  ; write the line
"RTN","HMPDJFSM",251,0)
 ;
"RTN","HMPDJFSM",252,0)
 I $L(Y) W !,Y  ; in case any domains are left
"RTN","HMPDJFSM",253,0)
 Q
"RTN","HMPDJFSM",254,0)
 ;
"RTN","HMPDJFSM",255,0)
 ;
"RTN","HMPDJFSM",256,0)
EVNTYPS(LIST) ; protocol HMPM EVT QUE CHANGE DOMAIN [Change Domain], LIST passed by ref.
"RTN","HMPDJFSM",257,0)
 ;;allergy
"RTN","HMPDJFSM",258,0)
 ;;appointment
"RTN","HMPDJFSM",259,0)
 ;;auxiliary
"RTN","HMPDJFSM",260,0)
 ;;consult
"RTN","HMPDJFSM",261,0)
 ;;cpt
"RTN","HMPDJFSM",262,0)
 ;;diagnosis
"RTN","HMPDJFSM",263,0)
 ;;diet
"RTN","HMPDJFSM",264,0)
 ;;document
"RTN","HMPDJFSM",265,0)
 ;;education
"RTN","HMPDJFSM",266,0)
 ;;exam
"RTN","HMPDJFSM",267,0)
 ;;factor
"RTN","HMPDJFSM",268,0)
 ;;image
"RTN","HMPDJFSM",269,0)
 ;;immunization
"RTN","HMPDJFSM",270,0)
 ;;lab
"RTN","HMPDJFSM",271,0)
 ;;med
"RTN","HMPDJFSM",272,0)
 ;;mh
"RTN","HMPDJFSM",273,0)
 ;;obs
"RTN","HMPDJFSM",274,0)
 ;;order
"RTN","HMPDJFSM",275,0)
 ;;patient
"RTN","HMPDJFSM",276,0)
 ;;pov
"RTN","HMPDJFSM",277,0)
 ;;problem
"RTN","HMPDJFSM",278,0)
 ;;procedure
"RTN","HMPDJFSM",279,0)
 ;;pt-select
"RTN","HMPDJFSM",280,0)
 ;;ptf
"RTN","HMPDJFSM",281,0)
 ;;roadtrip
"RTN","HMPDJFSM",282,0)
 ;;roster
"RTN","HMPDJFSM",283,0)
 ;;skin
"RTN","HMPDJFSM",284,0)
 ;;surgery
"RTN","HMPDJFSM",285,0)
 ;;task
"RTN","HMPDJFSM",286,0)
 ;;treatment
"RTN","HMPDJFSM",287,0)
 ;;user
"RTN","HMPDJFSM",288,0)
 ;;visit
"RTN","HMPDJFSM",289,0)
 ;;vital
"RTN","HMPDJFSM",290,0)
 ;
"RTN","HMPDJFSM",291,0)
 ; list above ends with single semi-colon comment
"RTN","HMPDJFSM",292,0)
 ;called by: protocol unwinder
"RTN","HMPDJFSM",293,0)
 ; output: LIST(#) = domain name
"RTN","HMPDJFSM",294,0)
 N I,X
"RTN","HMPDJFSM",295,0)
 F I=1:1 S X=$P($T(EVNTYPS+I),";;",2,99) Q:X=""  S LIST(I)=X
"RTN","HMPDJFSM",296,0)
 Q
"RTN","HMPDJFSM",297,0)
 ;
"RTN","HMPDJFSP")
0^56^B194334507^B224332595
"RTN","HMPDJFSP",1,0)
HMPDJFSP ;SLC/KCM.ASMR/RRB,CPC-PUT/POST for extract & freshness ;Jan 20, 2017 17:18:18
"RTN","HMPDJFSP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJFSP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSP",4,0)
 ;
"RTN","HMPDJFSP",5,0)
 Q  ; no entry at top
"RTN","HMPDJFSP",6,0)
 ;
"RTN","HMPDJFSP",7,0)
 ;
"RTN","HMPDJFSP",8,0)
 ; --- create a new patient subscription
"RTN","HMPDJFSP",9,0)
 ;
"RTN","HMPDJFSP",10,0)
PUTSUB(ARGS) ; return location after creating a new subscription
"RTN","HMPDJFSP",11,0)
 ; called by:
"RTN","HMPDJFSP",12,0)
 ;   API^HMPDJFS
"RTN","HMPDJFSP",13,0)
 ; falls through to:
"RTN","HMPDJFSP",14,0)
 ;   QREJOIN
"RTN","HMPDJFSP",15,0)
 ; calls:
"RTN","HMPDJFSP",16,0)
 ;   $$TM^%ZTLOAD
"RTN","HMPDJFSP",17,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",18,0)
 ;   $$GETDFN^MPIF001
"RTN","HMPDJFSP",19,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",20,0)
 ;   OPDOMS^HMPDJFSD
"RTN","HMPDJFSP",21,0)
 ;   PTDOMS^HMPDJFSD
"RTN","HMPDJFSP",22,0)
 ;   SETPAT
"RTN","HMPDJFSP",23,0)
 ;   NEWXTMP^HMPDJFS
"RTN","HMPDJFSP",24,0)
 ;   SETMARK
"RTN","HMPDJFSP",25,0)
 ;   INIT^HMPMETA
"RTN","HMPDJFSP",26,0)
 ;   $$HTFM^XLFDT
"RTN","HMPDJFSP",27,0)
 ;   SAVETASK^HMPDJFSQ
"RTN","HMPDJFSP",28,0)
 ;   $$PID^HMPDJFS
"RTN","HMPDJFSP",29,0)
 ; output:
"RTN","HMPDJFSP",30,0)
 ;  fn returns      : /hmp/subscription/{hmpSrvId}/patient/{sysId;dfn}
"RTN","HMPDJFSP",31,0)
 ;                  : "" if error, errors in ^TMP("HMPFERR",$J)
"RTN","HMPDJFSP",32,0)
 ; .ARGS("server")  : name of HMP server
"RTN","HMPDJFSP",33,0)
 ; .ARGS("localId") : dfn for patient to subscribe or "OPD" (operational data)
"RTN","HMPDJFSP",34,0)
 ; .ARGS("icn")     : icn for patient to subscribe
"RTN","HMPDJFSP",35,0)
 ; .ARGS("domains") : optional array of domains to initialize (deprecated)
"RTN","HMPDJFSP",36,0)
 ;
"RTN","HMPDJFSP",37,0)
 I '$$TM^%ZTLOAD D SETERR^HMPDJFS("Taskman not running") Q ""
"RTN","HMPDJFSP",38,0)
 ;
"RTN","HMPDJFSP",39,0)
 N HMPSRV,HMPFDFN,HMPBATCH,HMPFERR,I,NEWSUB,DOMAINS,HMPSVERS,HMPSTMP,HMPPRITY,HMPQBTCH ;US13442
"RTN","HMPDJFSP",40,0)
 ;
"RTN","HMPDJFSP",41,0)
 ; make sure we can identify the patient ("OPD" signals sync operational)
"RTN","HMPDJFSP",42,0)
 S HMPFDFN=$G(ARGS("localId"))
"RTN","HMPDJFSP",43,0)
 S HMPSVERS=+$G(ARGS("HMPSVERS")) ;US11019 get sync version
"RTN","HMPDJFSP",44,0)
 I HMPFDFN'="OPD" D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",45,0)
 . I '$L(HMPFDFN),$L(ARGS("icn")) S HMPFDFN=+$$GETDFN^MPIF001(ARGS("icn"))
"RTN","HMPDJFSP",46,0)
 . I 'HMPFDFN D SETERR^HMPDJFS("No patient specified") Q
"RTN","HMPDJFSP",47,0)
 . I '$D(^DPT(HMPFDFN)) D SETERR^HMPDJFS("Patient not found")  ; IA 10035, DE2818
"RTN","HMPDJFSP",48,0)
 ;
"RTN","HMPDJFSP",49,0)
 ; make sure server is known and create batch id
"RTN","HMPDJFSP",50,0)
 S HMPSRV=HMPFHMP  ; TODO: switch to HMPFHMP as server ien
"RTN","HMPDJFSP",51,0)
 I '$L(HMPSRV) D SETERR^HMPDJFS("Missing HMP Server ID") Q ""
"RTN","HMPDJFSP",52,0)
 S HMPSRV("ien")=$O(^HMP(800000,"B",HMPSRV,0))
"RTN","HMPDJFSP",53,0)
 I 'HMPSRV("ien") D SETERR^HMPDJFS("HMP Server not registered") Q ""
"RTN","HMPDJFSP",54,0)
 S HMPBATCH="HMPFX~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSP",55,0)
 S HMPQBTCH="HMPFS~"_HMPSRV_"~queue"
"RTN","HMPDJFSP",56,0)
 ;
"RTN","HMPDJFSP",57,0)
 ; set up domains to extract
"RTN","HMPDJFSP",58,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPDJFSP",59,0)
 ;
"RTN","HMPDJFSP",60,0)
 ; ejk US5647
"RTN","HMPDJFSP",61,0)
 ; code below restores selective domain functionality.
"RTN","HMPDJFSP",62,0)
 ; once the complete list of domains is returned from HMPDJFSD,
"RTN","HMPDJFSP",63,0)
 ; if ARGS("domains") is passed in, anything not in that parameter
"RTN","HMPDJFSP",64,0)
 ; will be excluded from the ODS extract.
"RTN","HMPDJFSP",65,0)
 I $G(ARGS("domains"))'="" D
"RTN","HMPDJFSP",66,0)
 .F I=1:1 Q:'$D(DOMAINS(I))  I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPDJFSP",67,0)
 ;
"RTN","HMPDJFSP",68,0)
 ; see if this is new subscription and task extract if new
"RTN","HMPDJFSP",69,0)
 D SETPAT(HMPFDFN,HMPSRV,.NEWSUB) Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",70,0)
 ;For operational data set stamptime as time subscription placed US6734
"RTN","HMPDJFSP",71,0)
 S HMPSTMP=$$EN^HMPSTMP("NOW") ;DE3377
"RTN","HMPDJFSP",72,0)
 ;
"RTN","HMPDJFSP",73,0)
 ;cpc US11019 following chunk of code moved out of QUINIT as was being called multiple times
"RTN","HMPDJFSP",74,0)
 ;US11019 get array of job ids by domain
"RTN","HMPDJFSP",75,0)
 ; only done once when beginning the batch, no matter how many tasked jobs
"RTN","HMPDJFSP",76,0)
 L +^XTMP(HMPBATCH):5 E  D SETERR^HMPDJFS("Cannot lock batch:"_HMPBATCH) QUIT
"RTN","HMPDJFSP",77,0)
 I '$D(^XTMP(HMPBATCH)) D
"RTN","HMPDJFSP",78,0)
 . D NEWXTMP^HMPDJFS(HMPBATCH,2,"HMP Patient Extract")
"RTN","HMPDJFSP",79,0)
 . ;US11019 - store domain specific job ids
"RTN","HMPDJFSP",80,0)
 . N EMPB S EMPB="jobDomainId-" ;US11019
"RTN","HMPDJFSP",81,0)
 . F  S EMPB=$O(ARGS(EMPB)) Q:EMPB=""  Q:EMPB'["jobDomainId-"  S:'HMPSVERS HMPSVERS=1 S ^XTMP(HMPBATCH,"JOBID",$P(EMPB,"jobDomainId-",2))=ARGS(EMPB) ; US11019 3rd version
"RTN","HMPDJFSP",82,0)
 . S ^XTMP(HMPBATCH,"HMPSVERS")=HMPSVERS ;US11019 store sync version
"RTN","HMPDJFSP",83,0)
 . I $G(ARGS("jobId"))]"" S ^XTMP(HMPBATCH,"JOBID")=ARGS("jobId")  ;US3907 /US11019
"RTN","HMPDJFSP",84,0)
 . I $G(ARGS("rootJobId"))]"" S ^XTMP(HMPBATCH,"ROOTJOBID")=ARGS("rootJobId")  ;US3907
"RTN","HMPDJFSP",85,0)
 . S ^XTMP(HMPBATCH,0,"time")=$H
"RTN","HMPDJFSP",86,0)
 . ; US6734 - setting of syncStart for OPD only
"RTN","HMPDJFSP",87,0)
 . I HMPFDFN="OPD" D SETMARK("Start",HMPFDFN,HMPBATCH),INIT^HMPMETA(HMPBATCH,HMPFDFN,.ARGS) ; US6734
"RTN","HMPDJFSP",88,0)
 L -^XTMP(HMPBATCH)
"RTN","HMPDJFSP",89,0)
 ;cpc US11019 end moved code
"RTN","HMPDJFSP",90,0)
 ;US13442
"RTN","HMPDJFSP",91,0)
 S HMPPRITY=1 S:+$G(ARGS("HMPPriority")) HMPPRITY=+ARGS("HMPPriority")
"RTN","HMPDJFSP",92,0)
 I '$D(^XTMP(HMPQBTCH,0)) D  ;check basic controls exist
"RTN","HMPDJFSP",93,0)
 . S ^XTMP(HMPQBTCH,0)=$$HTFM^XLFDT(+$H+5)_U_$$HTFM^XLFDT(+$H)_U_"HMP task queue"
"RTN","HMPDJFSP",94,0)
 . S ^XTMP(HMPQBTCH,0,0)=2 ;default concurrent patients
"RTN","HMPDJFSP",95,0)
 ;put task onto task queue if new subscription for patient
"RTN","HMPDJFSP",96,0)
 I NEWSUB,+HMPFDFN D SAVETASK^HMPDJFSQ Q "/hmp/subscription/"_HMPSRV_"/patient/"_$$PID^HMPDJFS(HMPFDFN)
"RTN","HMPDJFSP",97,0)
 ;
"RTN","HMPDJFSP",98,0)
QREJOIN  ; task And come back in from queue
"RTN","HMPDJFSP",99,0)
 ; falls through from:
"RTN","HMPDJFSP",100,0)
 ;   PUTSUB
"RTN","HMPDJFSP",101,0)
 ; called by:
"RTN","HMPDJFSP",102,0)
 ;   NEWTASK^HMPDJFSQ: ZTRTN="QREJOIN^HMPDJFSP"
"RTN","HMPDJFSP",103,0)
 ; calls:
"RTN","HMPDJFSP",104,0)
 ;   UPDSTS
"RTN","HMPDJFSP",105,0)
 ;   QUINIT^HMPDJFSQ
"RTN","HMPDJFSP",106,0)
 ;   SETMARK
"RTN","HMPDJFSP",107,0)
 ;   $$PID^HMPDJFS
"RTN","HMPDJFSP",108,0)
 ;
"RTN","HMPDJFSP",109,0)
 ;Every Domain in it's own task (unless running in original mode)
"RTN","HMPDJFSP",110,0)
 I NEWSUB D  Q:$G(HMPFERR) ""
"RTN","HMPDJFSP",111,0)
 . ; if patient's extracts are held (version mismatch), put DFN on wait list
"RTN","HMPDJFSP",112,0)
 . I +HMPFDFN,$G(^XTMP("HMPFS~"_HMPSRV("ien"),"waiting")) S ^XTMP("HMPFS~"_HMPSRV("ien"),"waiting",HMPFDFN)="" QUIT
"RTN","HMPDJFSP",113,0)
 . D UPDSTS(HMPFDFN,$P(HMPBATCH,"~",2),1) ;moved from background job to once in foreground 12/17/2015
"RTN","HMPDJFSP",114,0)
 . I 'HMPSVERS N HMPFDOM M HMPFDOM=DOMAINS D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM) Q  ;US11019 Enable previous behavior
"RTN","HMPDJFSP",115,0)
 . S I="" F  S I=$O(DOMAINS(I)) Q:'I  D
"RTN","HMPDJFSP",116,0)
 ..  N HMPFDOM
"RTN","HMPDJFSP",117,0)
 ..  S HMPFDOM(1)=DOMAINS(I)
"RTN","HMPDJFSP",118,0)
 ..  D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",119,0)
 ;===JD START===
"RTN","HMPDJFSP",120,0)
 ; For patient resubscribes, need to send demographics ONLY
"RTN","HMPDJFSP",121,0)
 I 'NEWSUB,HMPFDFN'="OPD",'$D(^XTMP(HMPBATCH,0,"status")) D  ;DE3331 check expanded to ensure not current
"RTN","HMPDJFSP",122,0)
 . N HMPFDOM,HMPDSAVE ;DE3331
"RTN","HMPDJFSP",123,0)
 . M HMPDSAVE=DOMAINS ;DE3331
"RTN","HMPDJFSP",124,0)
 . K DOMAINS S DOMAINS(1)="patient"
"RTN","HMPDJFSP",125,0)
 . M HMPFDOM=DOMAINS
"RTN","HMPDJFSP",126,0)
 . D QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",127,0)
 . I $G(HMPSVERS) S I="" F  S I=$O(HMPDSAVE(I)) Q:'I  D  ;DE3331 create empty metastamp entries for remaining domains
"RTN","HMPDJFSP",128,0)
 ..  I HMPDSAVE(I)'="patient" D SETMARK("Meta",HMPFDFN,HMPDSAVE(I))
"RTN","HMPDJFSP",129,0)
 ;===JD END===
"RTN","HMPDJFSP",130,0)
 Q "/hmp/subscription/"_HMPSRV_"/patient/"_$$PID^HMPDJFS(HMPFDFN)
"RTN","HMPDJFSP",131,0)
 ;
"RTN","HMPDJFSP",132,0)
 ;
"RTN","HMPDJFSP",133,0)
QUINIT(HMPBATCH,HMPFDFN,HMPFDOM) ; Queue the initial extracts for a patient
"RTN","HMPDJFSP",134,0)
 ; called by:
"RTN","HMPDJFSP",135,0)
 ;   VERMATCH^HMPDJFSG
"RTN","HMPDJFSP",136,0)
 ;   CVTSEL^HMPP3I
"RTN","HMPDJFSP",137,0)
 ; calls:
"RTN","HMPDJFSP",138,0)
 ;   QUINIT^HMPDJFSQ
"RTN","HMPDJFSP",139,0)
 ;
"RTN","HMPDJFSP",140,0)
 do QUINIT^HMPDJFSQ(HMPBATCH,HMPFDFN,.HMPFDOM)
"RTN","HMPDJFSP",141,0)
 ;
"RTN","HMPDJFSP",142,0)
 quit  ; end of QUINIT
"RTN","HMPDJFSP",143,0)
 ;
"RTN","HMPDJFSP",144,0)
 ;
"RTN","HMPDJFSP",145,0)
SETDOM(ATTRIB,DOMAIN,VALUE,HMPMETA) ; Set value for a domain ; cpc TA41760
"RTN","HMPDJFSP",146,0)
 ; called by:
"RTN","HMPDJFSP",147,0)
 ;   QUINIT^HMPDJFSQ
"RTN","HMPDJFSP",148,0)
 ;   QUINIT^HMPMETA
"RTN","HMPDJFSP",149,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",150,0)
 ;   DOMPT
"RTN","HMPDJFSP",151,0)
 ;   MOD4STRM
"RTN","HMPDJFSP",152,0)
 ; calls: none
"RTN","HMPDJFSP",153,0)
 ; input:
"RTN","HMPDJFSP",154,0)
 ;   ATTRIB: "status" or "count" attribute
"RTN","HMPDJFSP",155,0)
 ;   VALUE:
"RTN","HMPDJFSP",156,0)
 ;      for status, VALUE: 0=waiting, 1=ready
"RTN","HMPDJFSP",157,0)
 ;      for count,  VALUE: count of items
"RTN","HMPDJFSP",158,0)
 ;      don't update to finished value if just tracking metastamp
"RTN","HMPDJFSP",159,0)
 ;
"RTN","HMPDJFSP",160,0)
 I $G(HMPMETA)'="" S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN,$S(HMPMETA=1:"MetaStamp",HMPMETA=2:"Combined",1:"Staging"),$S(VALUE:"Stop",1:"Start"))=$H Q:(HMPMETA=1&VALUE)  ;cpc TA41760 10/7/2015 add time logging
"RTN","HMPDJFSP",161,0)
 S ^XTMP(HMPBATCH,0,ATTRIB,DOMAIN)=VALUE
"RTN","HMPDJFSP",162,0)
 Q
"RTN","HMPDJFSP",163,0)
 ;
"RTN","HMPDJFSP",164,0)
 ;
"RTN","HMPDJFSP",165,0)
SETMARK(TYPE,HMPFDFN,HMPBATCH) ; Post markers for begin and end of initial synch
"RTN","HMPDJFSP",166,0)
 ; called by:
"RTN","HMPDJFSP",167,0)
 ;   PUTSUB
"RTN","HMPDJFSP",168,0)
 ;   PUTSUB-QREJOIN
"RTN","HMPDJFSP",169,0)
 ;   QUINIT^HMPMETA
"RTN","HMPDJFSP",170,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",171,0)
 ; calls:
"RTN","HMPDJFSP",172,0)
 ;   POST^HMPDJFS
"RTN","HMPDJFSP",173,0)
 ;   SETTIDY
"RTN","HMPDJFSP",174,0)
 ;
"RTN","HMPDJFSP",175,0)
 ; ^XTMP("HMPFP","tidy",hmpServer,fmDate,sequence)=batch
"RTN","HMPDJFSP",176,0)
 Q:$G(HMPENVIR("converting"))  ; don't set markers during conversion
"RTN","HMPDJFSP",177,0)
 N HMPSRV,NODES,X
"RTN","HMPDJFSP",178,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",179,0)
 D POST^HMPDJFS(HMPFDFN,"sync"_TYPE,HMPBATCH,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",180,0)
 Q:TYPE="Start"!(TYPE="Meta")  ; US11019
"RTN","HMPDJFSP",181,0)
 D SETTIDY("<done>",.NODES)
"RTN","HMPDJFSP",182,0)
 Q
"RTN","HMPDJFSP",183,0)
 ;
"RTN","HMPDJFSP",184,0)
 ;
"RTN","HMPDJFSP",185,0)
DQINIT ; task Dequeue initial extracts
"RTN","HMPDJFSP",186,0)
 ; called by: none
"RTN","HMPDJFSP",187,0)
 ; calls:
"RTN","HMPDJFSP",188,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",189,0)
 ;
"RTN","HMPDJFSP",190,0)
 do DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",191,0)
 ;
"RTN","HMPDJFSP",192,0)
 quit  ; end of DQINIT
"RTN","HMPDJFSP",193,0)
 ;
"RTN","HMPDJFSP",194,0)
 ;
"RTN","HMPDJFSP",195,0)
DOMPT(HMPFADOM) ; Load a patient domain
"RTN","HMPDJFSP",196,0)
 ; called by:
"RTN","HMPDJFSP",197,0)
 ;   DQBACKDM^HMPDJFS1
"RTN","HMPDJFSP",198,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",199,0)
 ; calls:
"RTN","HMPDJFSP",200,0)
 ;   $$CHNKCNT
"RTN","HMPDJFSP",201,0)
 ;   GET^HMPDJ
"RTN","HMPDJFSP",202,0)
 ;   SETDOM
"RTN","HMPDJFSP",203,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",204,0)
 ;
"RTN","HMPDJFSP",205,0)
 N FILTER,RSLT,HMPFEST,HMPCHNK  ; *S68-JCH*
"RTN","HMPDJFSP",206,0)
 S FILTER("noHead")=1
"RTN","HMPDJFSP",207,0)
 S FILTER("domain")=HMPFADOM
"RTN","HMPDJFSP",208,0)
 S FILTER("patientId")=HMPFDFN
"RTN","HMPDJFSP",209,0)
 ; -- domain var used for chunking patient objects using <domain>#<number> construct  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",210,0)
 S HMPCHNK=HMPFADOM
"RTN","HMPDJFSP",211,0)
 S HMPCHNK("trigger count")=$$CHNKCNT(HMPFADOM)  ; *END*S68-JCH*
"RTN","HMPDJFSP",212,0)
 D GET^HMPDJ(.RSLT,.FILTER) ;US11019 I $G(HMPMETA) D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",213,0)
 I $G(HMPMETA)=1 D SETDOM("status",HMPFADOM,1,1) Q  ;US11019/US6734 - do not update stream if compiling metastamp ; CPC TA41760
"RTN","HMPDJFSP",214,0)
 ; add to HMPFS queue if total>0 OR this is the first chunck (#0) section  *S68-JCH*
"RTN","HMPDJFSP",215,0)
 I ($G(@RSLT@("total"),0)>0)!($P(HMPCHNK,"#",2)=0) D CHNKFIN  ; *S68-JCH*
"RTN","HMPDJFSP",216,0)
 Q
"RTN","HMPDJFSP",217,0)
 ;
"RTN","HMPDJFSP",218,0)
 ;
"RTN","HMPDJFSP",219,0)
DOMOPD(HMPFADOM) ; Load an operational domain in smaller batches
"RTN","HMPDJFSP",220,0)
 ; called by: none
"RTN","HMPDJFSP",221,0)
 ; calls:
"RTN","HMPDJFSP",222,0)
 ;   DOMOPD^HMPDJFSQ
"RTN","HMPDJFSP",223,0)
 ;
"RTN","HMPDJFSP",224,0)
 D DOMOPD^HMPDJFSQ(HMPFADOM) Q
"RTN","HMPDJFSP",225,0)
 ;
"RTN","HMPDJFSP",226,0)
 ;
"RTN","HMPDJFSP",227,0)
CHNKCNT(DOMAIN) ; -- get patient object chunk count trigger                        *BEGIN*S68-JCH*
"RTN","HMPDJFSP",228,0)
 ; called by:
"RTN","HMPDJFSP",229,0)
 ;   DOMPT
"RTN","HMPDJFSP",230,0)
 ; calls:
"RTN","HMPDJFSP",231,0)
 ;   $$GET^XPAR
"RTN","HMPDJFSP",232,0)
 ; input:
"RTN","HMPDJFSP",233,0)
 ;   DOMAIN := current domain name being processed
"RTN","HMPDJFSP",234,0)
 ;
"RTN","HMPDJFSP",235,0)
 Q $S(+$$GET^XPAR("PKG","HMP DOMAIN SIZES",$P($G(DOMAIN),"#"),"Q")>3000:500,1:1000)  ; *END*S68-JCH*
"RTN","HMPDJFSP",236,0)
 ;
"RTN","HMPDJFSP",237,0)
 ;
"RTN","HMPDJFSP",238,0)
CHNKINIT(HMP,HMPI) ; -- init chunk section callback  *BEGIN*S68-JCH*
"RTN","HMPDJFSP",239,0)
 ; called by:
"RTN","HMPDJFSP",240,0)
 ;   GET^HMPDJ
"RTN","HMPDJFSP",241,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",242,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",243,0)
 ; calls: none
"RTN","HMPDJFSP",244,0)
 ; input by ref:
"RTN","HMPDJFSP",245,0)
 ;   HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",246,0)
 ;   HMPI := number of objects in @HMP
"RTN","HMPDJFSP",247,0)
 ;
"RTN","HMPDJFSP",248,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",249,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",250,0)
 ;
"RTN","HMPDJFSP",251,0)
 S $P(HMPCHNK,"#",2)=$S(HMPCHNK["#":$P(HMPCHNK,"#",2)+1,1:0)
"RTN","HMPDJFSP",252,0)
 S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,HMPCHNK))
"RTN","HMPDJFSP",253,0)
 K @HMP
"RTN","HMPDJFSP",254,0)
 S HMPI=0
"RTN","HMPDJFSP",255,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",256,0)
 ;
"RTN","HMPDJFSP",257,0)
 ;
"RTN","HMPDJFSP",258,0)
CHNKCHK(HMP,HMPI) ; -- check if chunk should be queued callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",259,0)
 ; called by:
"RTN","HMPDJFSP",260,0)
 ;   ADD^HMPDJ
"RTN","HMPDJFSP",261,0)
 ;   HMP1^HMPDJ02
"RTN","HMPDJFSP",262,0)
 ; calls:
"RTN","HMPDJFSP",263,0)
 ;   GTQ^HMPDJ
"RTN","HMPDJFSP",264,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",265,0)
 ;   CHKXTMP
"RTN","HMPDJFSP",266,0)
 ;   CHNKINIT
"RTN","HMPDJFSP",267,0)
 ; input by ref:
"RTN","HMPDJFSP",268,0)
 ;   HMP := $NA of location for chunk of objects
"RTN","HMPDJFSP",269,0)
 ;   HMPI := number of objects in @HMP
"RTN","HMPDJFSP",270,0)
 ;
"RTN","HMPDJFSP",271,0)
 ; quit if not in chunking mode
"RTN","HMPDJFSP",272,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",273,0)
 ;
"RTN","HMPDJFSP",274,0)
 ; execute 'whether to chunk' criteria
"RTN","HMPDJFSP",275,0)
 Q:HMPI<HMPCHNK("trigger count")
"RTN","HMPDJFSP",276,0)
 ; -- add tail to json to section
"RTN","HMPDJFSP",277,0)
 D GTQ^HMPDJ
"RTN","HMPDJFSP",278,0)
 ; -- finish section and put on HMPFS~ queue
"RTN","HMPDJFSP",279,0)
 D CHNKFIN
"RTN","HMPDJFSP",280,0)
 ; -- check ^XTMP size before continuing; may have to HANG if too big
"RTN","HMPDJFSP",281,0)
 D CHKXTMP(HMPBATCH,HMPFZTSK)  ; US5074 disable loopback
"RTN","HMPDJFSP",282,0)
 ; -- initialize for next section
"RTN","HMPDJFSP",283,0)
 D CHNKINIT(.HMP,.HMPI)
"RTN","HMPDJFSP",284,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",285,0)
 ;
"RTN","HMPDJFSP",286,0)
 ;
"RTN","HMPDJFSP",287,0)
CHNKFIN ; -- finish chunk section callback *BEGIN*S68-JCH*
"RTN","HMPDJFSP",288,0)
 ; called by:
"RTN","HMPDJFSP",289,0)
 ;   DOMPT
"RTN","HMPDJFSP",290,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",291,0)
 ; calls:
"RTN","HMPDJFSP",292,0)
 ;   MOD4STRM
"RTN","HMPDJFSP",293,0)
 ;   POSTSEC
"RTN","HMPDJFSP",294,0)
 ;
"RTN","HMPDJFSP",295,0)
 ; -- quit if not in chunking mode
"RTN","HMPDJFSP",296,0)
 Q:'$D(HMPCHNK)
"RTN","HMPDJFSP",297,0)
 ;
"RTN","HMPDJFSP",298,0)
 D MOD4STRM(HMPCHNK)
"RTN","HMPDJFSP",299,0)
 ; -- domain#number, <no estimated do> , chunk trigger count for domain
"RTN","HMPDJFSP",300,0)
 D POSTSEC(HMPCHNK,,HMPCHNK("trigger count"))
"RTN","HMPDJFSP",301,0)
 Q  ; *END*S68-JCH*
"RTN","HMPDJFSP",302,0)
 ;
"RTN","HMPDJFSP",303,0)
 ;
"RTN","HMPDJFSP",304,0)
MOD4STRM(DOMAIN) ; modify extract to be ready for stream
"RTN","HMPDJFSP",305,0)
 ; called by:
"RTN","HMPDJFSP",306,0)
 ;   DOMOPD^HMPDJFSQ
"RTN","HMPDJFSP",307,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",308,0)
 ; calls:
"RTN","HMPDJFSP",309,0)
 ;   SETDOM
"RTN","HMPDJFSP",310,0)
 ; expects:
"RTN","HMPDJFSP",311,0)
 ;   HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSP",312,0)
 ; results are in:
"RTN","HMPDJFSP",313,0)
 ;   ^XTMP("HMPFX~hmpsrv~dfn",DFN,DOMAIN,...)
"RTN","HMPDJFSP",314,0)
 ;
"RTN","HMPDJFSP",315,0)
 ; syncError: {uid,collection,error}  uid=urn:va:syncError:sysId:dfn:extract
"RTN","HMPDJFSP",316,0)
 N DFN,HMPSRV,COUNT,DOMONLY
"RTN","HMPDJFSP",317,0)
 S DOMONLY=$P(DOMAIN,"#")
"RTN","HMPDJFSP",318,0)
 S DFN=$P(HMPBATCH,"~",3),HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",319,0)
 S COUNT=+$G(^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total"),0)
"RTN","HMPDJFSP",320,0)
 I COUNT=0 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,1,1)="null"
"RTN","HMPDJFSP",321,0)
 ;
"RTN","HMPDJFSP",322,0)
 S ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")=COUNT  ; include errors and/or empty
"RTN","HMPDJFSP",323,0)
 D SETDOM("count",DOMONLY,$G(^XTMP(HMPBATCH,0,"count",DOMONLY),0)+COUNT)
"RTN","HMPDJFSP",324,0)
 Q
"RTN","HMPDJFSP",325,0)
 ;
"RTN","HMPDJFSP",326,0)
 ;
"RTN","HMPDJFSP",327,0)
POSTSEC(DOMAIN,ETOTAL,SECSIZE) ; post domain section to stream and set tidy nodes
"RTN","HMPDJFSP",328,0)
 ; called by:
"RTN","HMPDJFSP",329,0)
 ;   DOMOPD^HMPDJFSQ
"RTN","HMPDJFSP",330,0)
 ;   CHNKFIN
"RTN","HMPDJFSP",331,0)
 ; calls:
"RTN","HMPDJFSP",332,0)
 ;   POST^HMPDJFS
"RTN","HMPDJFSP",333,0)
 ;   SETTIDY
"RTN","HMPDJFSP",334,0)
 ;
"RTN","HMPDJFSP",335,0)
 N DFN,HMPSRV,COUNT,X,NODES
"RTN","HMPDJFSP",336,0)
 S COUNT=^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"total")
"RTN","HMPDJFSP",337,0)
 S ETOTAL=$G(ETOTAL,COUNT)
"RTN","HMPDJFSP",338,0)
 s SECSIZE=$G(SECSIZE,0)
"RTN","HMPDJFSP",339,0)
 S DFN=$P(HMPBATCH,"~",3)
"RTN","HMPDJFSP",340,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",341,0)
 D POST^HMPDJFS(DFN,"syncDomain",DOMAIN_":"_HMPFZTSK_":"_COUNT_":"_ETOTAL_":"_SECSIZE,"",HMPSRV,.NODES)
"RTN","HMPDJFSP",342,0)
 D SETTIDY(DOMAIN,.NODES)
"RTN","HMPDJFSP",343,0)
 I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2) ;update heartbeat US13442
"RTN","HMPDJFSP",344,0)
 Q
"RTN","HMPDJFSP",345,0)
 ;
"RTN","HMPDJFSP",346,0)
 ;
"RTN","HMPDJFSP",347,0)
SETTIDY(DOMAIN,NODES) ; Set tidy nodes for clean-up of the extracts in ^XTMP
"RTN","HMPDJFSP",348,0)
 ; called by:
"RTN","HMPDJFSP",349,0)
 ;   SETMARK
"RTN","HMPDJFSP",350,0)
 ;   POSTSEC
"RTN","HMPDJFSP",351,0)
 ; calls: none
"RTN","HMPDJFSP",352,0)
 ; expects:
"RTN","HMPDJFSP",353,0)
 ;   HMPBATCH,HMPFZTSK
"RTN","HMPDJFSP",354,0)
 ;
"RTN","HMPDJFSP",355,0)
 N X,STREAM,SEQ
"RTN","HMPDJFSP",356,0)
 S X="" F  S X=$O(NODES(X)) Q:X=""  D      ; iterate hmp servers
"RTN","HMPDJFSP",357,0)
 . S STREAM="HMPFS~"_X_"~"_$P(NODES(X),U)  ; HMPFS~hmpSrv~fmDate
"RTN","HMPDJFSP",358,0)
 . S SEQ=$P(NODES(X),U,2)
"RTN","HMPDJFSP",359,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"batch")=HMPBATCH
"RTN","HMPDJFSP",360,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"domain")=DOMAIN
"RTN","HMPDJFSP",361,0)
 . S ^XTMP(STREAM,"tidy",SEQ,"task")=HMPFZTSK
"RTN","HMPDJFSP",362,0)
 Q
"RTN","HMPDJFSP",363,0)
 ;
"RTN","HMPDJFSP",364,0)
 ;
"RTN","HMPDJFSP",365,0)
MVFRUPD(HMPBATCH,HMPFDFN) ; Move freshness updates over active stream
"RTN","HMPDJFSP",366,0)
 ; called by: none
"RTN","HMPDJFSP",367,0)
 ; calls:
"RTN","HMPDJFSP",368,0)
 ;   MVFRUPD^HMPDJFSQ
"RTN","HMPDJFSP",369,0)
 ;
"RTN","HMPDJFSP",370,0)
 do MVFRUPD^HMPDJFSQ(HMPBATCH,HMPFDFN)
"RTN","HMPDJFSP",371,0)
 ;
"RTN","HMPDJFSP",372,0)
 quit  ; end of MVFRUPD
"RTN","HMPDJFSP",373,0)
 ;
"RTN","HMPDJFSP",374,0)
 ;
"RTN","HMPDJFSP",375,0)
BLDSERR(DFN,DOMAIN,ERRJSON) ; Create syncError object in ERRJSON
"RTN","HMPDJFSP",376,0)
 ; called by: none
"RTN","HMPDJFSP",377,0)
 ; calls:
"RTN","HMPDJFSP",378,0)
 ;   DECODE^HMPJSON
"RTN","HMPDJFSP",379,0)
 ;   ENCODE^HMPJSON
"RTN","HMPDJFSP",380,0)
 ; expects:
"RTN","HMPDJFSP",381,0)
 ;   HMPBATCH, HMPFSYS, HMPFZTSK
"RTN","HMPDJFSP",382,0)
 ;
"RTN","HMPDJFSP",383,0)
 N COUNT,ERRVAL,ERROBJ,ERR,ERRMSG,SYNCERR
"RTN","HMPDJFSP",384,0)
 M ERRVAL=^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"error")
"RTN","HMPDJFSP",385,0)
 I $G(ERRVAL)="" Q
"RTN","HMPDJFSP",386,0)
 S ERRVAL="{"_ERRVAL_"}"
"RTN","HMPDJFSP",387,0)
 D DECODE^HMPJSON("ERRVAL","ERROBJ","ERR")
"RTN","HMPDJFSP",388,0)
 I $D(ERR) S $EC=",UJSON decode error,"
"RTN","HMPDJFSP",389,0)
 K ^XTMP(HMPBATCH,HMPFZTSK,DOMAIN,"error")
"RTN","HMPDJFSP",390,0)
 S ERRMSG=ERROBJ("error","message")
"RTN","HMPDJFSP",391,0)
 Q:'$L(ERRMSG)
"RTN","HMPDJFSP",392,0)
 S SYNCERR("uid")="urn:va:syncError:"_HMPFSYS_":"_DFN_":"_DOMAIN
"RTN","HMPDJFSP",393,0)
 S SYNCERR("collection")=DOMAIN
"RTN","HMPDJFSP",394,0)
 S SYNCERR("error")=ERRMSG
"RTN","HMPDJFSP",395,0)
 D ENCODE^HMPJSON("SYNCERR","ERRJSON","ERR") I $D(ERR) S $EC=",UJSON encode error," Q
"RTN","HMPDJFSP",396,0)
 S COUNT=$O(^TMP("HMPERR",$J,""),-1)+1
"RTN","HMPDJFSP",397,0)
 M ^TMP("HMPERR",$J,COUNT)=ERRJSON
"RTN","HMPDJFSP",398,0)
 Q
"RTN","HMPDJFSP",399,0)
 ;
"RTN","HMPDJFSP",400,0)
 ;
"RTN","HMPDJFSP",401,0)
POSTERR(COUNT,DFN) ; put error into ^XTMP(batch)
"RTN","HMPDJFSP",402,0)
 ; called by:
"RTN","HMPDJFSP",403,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",404,0)
 ; calls:
"RTN","HMPDJFSP",405,0)
 ;   POST^HMPDJFS
"RTN","HMPDJFSP",406,0)
 ;
"RTN","HMPDJFSP",407,0)
 N CNT,NODE,HMPSRV
"RTN","HMPDJFSP",408,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSP",409,0)
 S CNT=0 F  S CNT=$O(^TMP("HMPERR",$J,CNT)) Q:CNT'>0  D
"RTN","HMPDJFSP",410,0)
 .S NODE=$G(^TMP("HMPERR",$J,CNT,1))
"RTN","HMPDJFSP",411,0)
 .S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,1)=NODE
"RTN","HMPDJFSP",412,0)
 .I CNT>1 S ^XTMP(HMPBATCH,HMPFZTSK,"error",CNT,.3)=","
"RTN","HMPDJFSP",413,0)
 D POST^HMPDJFS(DFN,"syncError","error:"_HMPFZTSK_":"_COUNT_":"_COUNT,"",HMPSRV)
"RTN","HMPDJFSP",414,0)
 Q
"RTN","HMPDJFSP",415,0)
 ;
"RTN","HMPDJFSP",416,0)
 ;
"RTN","HMPDJFSP",417,0)
INITDONE(HMPBATCH) ; Return 1 if all domains are done
"RTN","HMPDJFSP",418,0)
 ; called by:
"RTN","HMPDJFSP",419,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",420,0)
 ; calls: none
"RTN","HMPDJFSP",421,0)
 ;
"RTN","HMPDJFSP",422,0)
 N X,DONE
"RTN","HMPDJFSP",423,0)
 S X="",DONE=1
"RTN","HMPDJFSP",424,0)
 F  S X=$O(^XTMP(HMPBATCH,0,"status",X)) Q:'$L(X)  I '^(X) S DONE=0
"RTN","HMPDJFSP",425,0)
 Q DONE
"RTN","HMPDJFSP",426,0)
 ;
"RTN","HMPDJFSP",427,0)
 ;
"RTN","HMPDJFSP",428,0)
SETPAT(DFN,SRV,NEWSUB) ; Add patient to 800000 if not there
"RTN","HMPDJFSP",429,0)
 ; called by:
"RTN","HMPDJFSP",430,0)
 ;   EN^HMPMETA
"RTN","HMPDJFSP",431,0)
 ;   PUTSUB
"RTN","HMPDJFSP",432,0)
 ; calls:
"RTN","HMPDJFSP",433,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",434,0)
 ;   UPDOPD
"RTN","HMPDJFSP",435,0)
 ;   ADDPAT
"RTN","HMPDJFSP",436,0)
 ;
"RTN","HMPDJFSP",437,0)
 N ERR,FDA,IEN,IENROOT
"RTN","HMPDJFSP",438,0)
 S IEN=$O(^HMP(800000,"B",SRV,0))
"RTN","HMPDJFSP",439,0)
 I 'IEN D SETERR^HMPDJFS("Unable to find server: "_SRV) QUIT
"RTN","HMPDJFSP",440,0)
 ; for operational, only start sync if not yet subscribed
"RTN","HMPDJFSP",441,0)
 I DFN="OPD" D  QUIT
"RTN","HMPDJFSP",442,0)
 . L +^HMP(800000,IEN):5 E  D SETERR^HMPDJFS("Unable to lock server: "_SRV) Q
"RTN","HMPDJFSP",443,0)
 . ; status is empty string (not 0) when unsubscribed
"RTN","HMPDJFSP",444,0)
 . S NEWSUB='$L($P($G(^HMP(800000,IEN,0)),U,3))
"RTN","HMPDJFSP",445,0)
 . I NEWSUB D UPDOPD(IEN,1) ; set to subscribed
"RTN","HMPDJFSP",446,0)
 . L -^HMP(800000,IEN)
"RTN","HMPDJFSP",447,0)
 ;
"RTN","HMPDJFSP",448,0)
 ; for patient, check subscribed and get the PID
"RTN","HMPDJFSP",449,0)
 L +^HMP(800000,IEN,1,DFN):5 E  D SETERR^HMPDJFS("Unable to lock patient: "_DFN) Q
"RTN","HMPDJFSP",450,0)
 S NEWSUB='$D(^HMP(800000,IEN,1,DFN))
"RTN","HMPDJFSP",451,0)
 I NEWSUB D ADDPAT(DFN,IEN)
"RTN","HMPDJFSP",452,0)
 L -^HMP(800000,IEN,1,DFN)
"RTN","HMPDJFSP",453,0)
 Q
"RTN","HMPDJFSP",454,0)
 ;
"RTN","HMPDJFSP",455,0)
 ;
"RTN","HMPDJFSP",456,0)
UPDOPD(SRV,STS) ; Update status of operational synch
"RTN","HMPDJFSP",457,0)
 ; called by:
"RTN","HMPDJFSP",458,0)
 ;   UNSUB^HMPMETA
"RTN","HMPDJFSP",459,0)
 ;   UPDSTS
"RTN","HMPDJFSP",460,0)
 ;   SETPAT
"RTN","HMPDJFSP",461,0)
 ; calls:
"RTN","HMPDJFSP",462,0)
 ;   FILE^DIE
"RTN","HMPDJFSP",463,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",464,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",465,0)
 ;
"RTN","HMPDJFSP",466,0)
 N FDA,ERR,DIERR
"RTN","HMPDJFSP",467,0)
 S FDA(800000,SRV_",",.03)=STS
"RTN","HMPDJFSP",468,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",469,0)
 I $D(ERR) D SETERR^HMPDJFS("Error changing operational status")
"RTN","HMPDJFSP",470,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",471,0)
 Q
"RTN","HMPDJFSP",472,0)
 ;
"RTN","HMPDJFSP",473,0)
 ;
"RTN","HMPDJFSP",474,0)
ADDPAT(DFN,SRV) ; Add a patient as subscribed for server
"RTN","HMPDJFSP",475,0)
 ; called by:
"RTN","HMPDJFSP",476,0)
 ;   SETPAT
"RTN","HMPDJFSP",477,0)
 ; calls:
"RTN","HMPDJFSP",478,0)
 ;   $$NOW^XLFDT
"RTN","HMPDJFSP",479,0)
 ;   UPDATE^DIE
"RTN","HMPDJFSP",480,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",481,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",482,0)
 ;
"RTN","HMPDJFSP",483,0)
 N FDA,FDAIEN,DIERR,ERR,IENS
"RTN","HMPDJFSP",484,0)
 S IENS="?+"_DFN_","_SRV_","
"RTN","HMPDJFSP",485,0)
 S FDAIEN(DFN)=DFN  ; help DINUM to work
"RTN","HMPDJFSP",486,0)
 S FDA(800000.01,IENS,.01)=DFN
"RTN","HMPDJFSP",487,0)
 S FDA(800000.01,IENS,2)=0
"RTN","HMPDJFSP",488,0)
 S FDA(800000.01,IENS,3)=$$NOW^XLFDT
"RTN","HMPDJFSP",489,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","HMPDJFSP",490,0)
 I $D(ERR) D SETERR^HMPDJFS("Error adding patient subscription")
"RTN","HMPDJFSP",491,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",492,0)
 Q
"RTN","HMPDJFSP",493,0)
 ;
"RTN","HMPDJFSP",494,0)
 ;
"RTN","HMPDJFSP",495,0)
UPDSTS(DFN,SRVNM,STS) ; Update the sync status
"RTN","HMPDJFSP",496,0)
 ; called by:
"RTN","HMPDJFSP",497,0)
 ;   PUTSUB-QREJOIN
"RTN","HMPDJFSP",498,0)
 ;   MVFRUPD^HMPDJFSQ
"RTN","HMPDJFSP",499,0)
 ; calls:
"RTN","HMPDJFSP",500,0)
 ;   SETERR^HMPDJFS
"RTN","HMPDJFSP",501,0)
 ;   UPDOPD
"RTN","HMPDJFSP",502,0)
 ;   $$NOW^XLFDT
"RTN","HMPDJFSP",503,0)
 ;   FILE^DIE
"RTN","HMPDJFSP",504,0)
 ;   CLEAN^DILF
"RTN","HMPDJFSP",505,0)
 ;
"RTN","HMPDJFSP",506,0)
 N SRV,ERR ;US11019
"RTN","HMPDJFSP",507,0)
 S SRV=$O(^HMP(800000,"B",SRVNM,0)) I 'SRV D SETERR^HMPDJFS("Missing Server") Q
"RTN","HMPDJFSP",508,0)
 I DFN="OPD" D UPDOPD(SRV,STS) QUIT
"RTN","HMPDJFSP",509,0)
 ;
"RTN","HMPDJFSP",510,0)
 S FDA(800000.01,DFN_","_SRV_",",2)=STS
"RTN","HMPDJFSP",511,0)
 S FDA(800000.01,DFN_","_SRV_",",3)=$$NOW^XLFDT
"RTN","HMPDJFSP",512,0)
 D FILE^DIE("","FDA","ERR")
"RTN","HMPDJFSP",513,0)
 I $D(ERR) D SETERR^HMPDJFS("Error updating patient sync status")
"RTN","HMPDJFSP",514,0)
 D CLEAN^DILF
"RTN","HMPDJFSP",515,0)
 Q
"RTN","HMPDJFSP",516,0)
 ;
"RTN","HMPDJFSP",517,0)
CHKXTMP(HMPBATCH,HMPFZTSK) ; -- ^XTMP check at end each domain loop iteration ; if too big HANG
"RTN","HMPDJFSP",518,0)
 ; called by:
"RTN","HMPDJFSP",519,0)
 ;   DQINIT^HMPDJFSQ
"RTN","HMPDJFSP",520,0)
 ;   CHNKCHK
"RTN","HMPDJFSP",521,0)
 ;
"RTN","HMPDJFSP",522,0)
 N HMPOK S HMPOK=0  ; OK to run flag
"RTN","HMPDJFSP",523,0)
 F  D  Q:HMPOK
"RTN","HMPDJFSP",524,0)
 . ; if max disk size > estimated size then done with HANG 
"RTN","HMPDJFSP",525,0)
 . I $$GETMAX^HMPUTILS>$$GETSIZE^HMPUTILS("estimate") K ^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging") S HMPOK=1 Q
"RTN","HMPDJFSP",526,0)
 . S ^("hanging")=$G(^XTMP(HMPBATCH,0,"task",HMPFZTSK,"hanging"))+1  ; increment
"RTN","HMPDJFSP",527,0)
 . I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2)  ;update heartbeat US13442
"RTN","HMPDJFSP",528,0)
 . H $$GETSECS
"RTN","HMPDJFSP",529,0)
 Q
"RTN","HMPDJFSP",530,0)
 ;
"RTN","HMPDJFSP",531,0)
GETSECS() ; return default # of seconds to requeue in future or hang when processing domains
"RTN","HMPDJFSP",532,0)
 ; called by:
"RTN","HMPDJFSP",533,0)
 ;   CHKSP^HMPUTILS
"RTN","HMPDJFSP",534,0)
 ;   CHKXTMP
"RTN","HMPDJFSP",535,0)
 ;
"RTN","HMPDJFSP",536,0)
 N SECS S SECS=+$$GET^XPAR("SYS","HMP EXTRACT TASK REQUEUE SECS")
"RTN","HMPDJFSP",537,0)
 Q $S(SECS>0:SECS,1:10)   ; if not set, wait 10 seconds
"RTN","HMPDJFSP",538,0)
 ;
"RTN","HMPDJFSQ")
0^17^B94782818^B141457837
"RTN","HMPDJFSQ",1,0)
HMPDJFSQ ;ASMR/CPC -- Extract Queue manager ;Jan 25, 2017 11:08:07
"RTN","HMPDJFSQ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDJFSQ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJFSQ",4,0)
 ;
"RTN","HMPDJFSQ",5,0)
 Q  ; no entry from top
"RTN","HMPDJFSQ",6,0)
 ; DE6644 - code cleanup, 7 September 2016
"RTN","HMPDJFSQ",7,0)
 ;
"RTN","HMPDJFSQ",8,0)
 ; 2016-05-05 asmr-cpc HMP*2.0*1: create routine HMPDJFSQ from
"RTN","HMPDJFSQ",9,0)
 ; subroutines in HMPDJFSP to bring it down under the SAC size limit;
"RTN","HMPDJFSQ",10,0)
 ; includes NEWQMGR,NEWTASK,QMGR,SAVETASK,QUINIT.
"RTN","HMPDJFSQ",11,0)
 ;
"RTN","HMPDJFSQ",12,0)
 ; 2016-06-30/07-01 toad:
"RTN","HMPDJFSQ",13,0)
 ; move subroutines over from HMPDJFSP for SAC size limit: DQINIT,DOMOPD,$$TOTAL,MVFRUPD.
"RTN","HMPDJFSQ",14,0)
 ;
"RTN","HMPDJFSQ",15,0)
QUINIT(HMPBATCH,HMPFDFN,HMPFDOM) ; Queue the initial extracts for a patient
"RTN","HMPDJFSQ",16,0)
 ; called by:
"RTN","HMPDJFSQ",17,0)
 ;   PUTSUB-QREJOIN^HMPDJFSP
"RTN","HMPDJFSQ",18,0)
 ;   QUINIT^HMPDJFSP
"RTN","HMPDJFSQ",19,0)
 ; input:
"RTN","HMPDJFSQ",20,0)
 ;   HMPBATCH="HMPFX~hmpsrvid~dfn"  example: HMPFX~hmpXYZ~229
"RTN","HMPDJFSQ",21,0)
 ;   HMPFDOM(n)="domainName"
"RTN","HMPDJFSQ",22,0)
 ; 
"RTN","HMPDJFSQ",23,0)
 ; ^XTMP("HMPFX~hmpsrvid~dfn",0)=expires^created^HMP Patient Extract
"RTN","HMPDJFSQ",24,0)
 ;                           ,0,"status",domain)=0:waiting;1:ready
"RTN","HMPDJFSQ",25,0)
 ;                           ,0,"task",taskIen)=""
"RTN","HMPDJFSQ",26,0)
 ;                           ,taskIen,domain,... (extract data)
"RTN","HMPDJFSQ",27,0)
 ;
"RTN","HMPDJFSQ",28,0)
 ; set up domains to be done by this task
"RTN","HMPDJFSQ",29,0)
 N I S I=0 F  S I=$O(HMPFDOM(I)) Q:'I  D SETDOM^HMPDJFSP("status",HMPFDOM(I),0)
"RTN","HMPDJFSQ",30,0)
 ;
"RTN","HMPDJFSQ",31,0)
 ; create task for this set of domains within the batch
"RTN","HMPDJFSQ",32,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",33,0)
 S ZTRTN="DQINIT^HMPDJFSQ",ZTIO="HMP EXTRACT RESOURCE",ZTDTH=$H
"RTN","HMPDJFSQ",34,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")="",ZTSAVE("HMPFDOM(")=""
"RTN","HMPDJFSQ",35,0)
 S ZTSAVE("HMPENVIR(")="" ; environment information
"RTN","HMPDJFSQ",36,0)
 S ZTSAVE("HMPSTMP")="" ; Operational data stamptime US6734
"RTN","HMPDJFSQ",37,0)
 S ZTSAVE("HMPSVERS")="" ; sync version US11019
"RTN","HMPDJFSQ",38,0)
 S ZTSAVE("HMPQREF")="" ; US13442
"RTN","HMPDJFSQ",39,0)
 S ZTDESC="Build HMP domains for a patient"
"RTN","HMPDJFSQ",40,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",41,0)
 I $G(ZTSK) S ^XTMP(HMPBATCH,0,"task",ZTSK)="" Q
"RTN","HMPDJFSQ",42,0)
 D SETERR^HMPDJFS("Task not created")
"RTN","HMPDJFSQ",43,0)
 Q
"RTN","HMPDJFSQ",44,0)
 ;
"RTN","HMPDJFSQ",45,0)
DQINIT ; task Dequeue initial extracts
"RTN","HMPDJFSQ",46,0)
 ; called by:
"RTN","HMPDJFSQ",47,0)
 ;   QUINIT: ZTRTN="DQINIT^HMPDJFSQ"
"RTN","HMPDJFSQ",48,0)
 ;   QUINIT^HMPDJFSP: ZTRTN="DQINIT^HMPDJFSQ"
"RTN","HMPDJFSQ",49,0)
 ;   DQINIT^HMPDJFSP
"RTN","HMPDJFSQ",50,0)
 ;   QUINIT^HMPMETA
"RTN","HMPDJFSQ",51,0)
 ; expects:
"RTN","HMPDJFSQ",52,0)
 ;   HMPBATCH, HMPFDFN, HMPFDOM, ZTSK
"RTN","HMPDJFSQ",53,0)
 ;
"RTN","HMPDJFSQ",54,0)
 N COUNT,HMPFDOMI,HMPFSYS,HMPFZTSK
"RTN","HMPDJFSQ",55,0)
 F COUNT=1:1:10 Q:$D(^XTMP(HMPBATCH,0,"task",ZTSK))  H .5 ;cpc 9/18/2015 In case job running too quickly
"RTN","HMPDJFSQ",56,0)
 I '$D(^XTMP(HMPBATCH,0,"task",ZTSK)) Q  ; extract was superceded
"RTN","HMPDJFSQ",57,0)
 K ^TMP("HMPERR",$J)
"RTN","HMPDJFSQ",58,0)
 S HMPFSYS=$$SYS^HMPUTILS
"RTN","HMPDJFSQ",59,0)
 S HMPFZTSK=ZTSK ; just in case the unexpected happens to ZTSK
"RTN","HMPDJFSQ",60,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"job")=$J
"RTN","HMPDJFSQ",61,0)
 S ^XTMP(HMPBATCH,0,"task",ZTSK,"wait")=$$HDIFF^XLFDT($H,$G(^XTMP(HMPBATCH,0,"time")),2)
"RTN","HMPDJFSQ",62,0)
 ;
"RTN","HMPDJFSQ",63,0)
 ;  S68 check space
"RTN","HMPDJFSQ",64,0)
 D CHKSP^HMPUTILS($P(HMPBATCH,"~",2)) ; US8228
"RTN","HMPDJFSQ",65,0)
 N HMPMETA ; US6734
"RTN","HMPDJFSQ",66,0)
 F HMPMETA=$S(HMPSVERS:2,1:1):-1:0 D  Q:HMPMETA=2  ;
"RTN","HMPDJFSQ",67,0)
 . I HMPMETA=0,+HMPFDFN D SETMARK^HMPDJFSP("Start",HMPFDFN,HMPBATCH) ; US6734
"RTN","HMPDJFSQ",68,0)
 . S HMPFDOMI=""
"RTN","HMPDJFSQ",69,0)
 . F  S HMPFDOMI=$O(HMPFDOM(HMPFDOMI)) Q:'HMPFDOMI  D
"RTN","HMPDJFSQ",70,0)
 ..  D SETDOM^HMPDJFSP("status",HMPFDOM(HMPFDOMI),0,HMPMETA) ; cpc TA41760
"RTN","HMPDJFSQ",71,0)
 ..  I HMPFDFN="OPD" D
"RTN","HMPDJFSQ",72,0)
 ...   D DOMOPD(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSQ",73,0)
 ...   I HMPMETA=2 D UPD^HMPMETA(HMPFDOM(HMPFDOMI)) ; US6734 - mark OPD domain as complete in metastamp
"RTN","HMPDJFSQ",74,0)
 ..  I +HMPFDFN D DOMPT^HMPDJFSP(HMPFDOM(HMPFDOMI))
"RTN","HMPDJFSQ",75,0)
 ..  I HMPMETA=1 D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) D:HMPFDFN="OPD" UPD^HMPMETA(HMPFDOM(HMPFDOMI)) Q
"RTN","HMPDJFSQ",76,0)
 ..  I HMPMETA=2 D
"RTN","HMPDJFSQ",77,0)
 ...   D MERGE1^HMPMETA(HMPBATCH,HMPFDOM(HMPFDOMI)) ;US11019 - merge data into metastamp
"RTN","HMPDJFSQ",78,0)
 ...   I +HMPFDFN D SETMARK^HMPDJFSP("Meta",HMPFDFN,HMPFDOM(HMPFDOMI)) ;US11019 - new freshness entry replacing syncStart
"RTN","HMPDJFSQ",79,0)
 ...   I HMPFDFN="OPD" D:'$O(HMPFDOM(HMPFDOMI)) MERGE^HMPMETA(HMPBATCH) ; US6734 - merge data into metastamp
"RTN","HMPDJFSQ",80,0)
 ..  D SETDOM^HMPDJFSP("status",HMPFDOM(HMPFDOMI),1,HMPMETA) ; ready ; cpc TA41760
"RTN","HMPDJFSQ",81,0)
 ..  ; if superceded, stop processing domains
"RTN","HMPDJFSQ",82,0)
 ..  I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S HMPFDOMI=999 Q
"RTN","HMPDJFSQ",83,0)
 ..  ; -- if more domains, check ^XTMP size before continuing; may have to HANG if too big  *BEGIN*S68-JCH*
"RTN","HMPDJFSQ",84,0)
 ..  I +HMPFDFN,HMPFDOMI'=+$O(HMPFDOM(""),-1) D CHKXTMP^HMPDJFSP(HMPBATCH,HMPFZTSK) ;; US 5074 - removed
"RTN","HMPDJFSQ",85,0)
 ; if superceded, remove extracts produced by this task
"RTN","HMPDJFSQ",86,0)
 I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) K ^XTMP(HMPBATCH,HMPFZTSK) Q
"RTN","HMPDJFSQ",87,0)
 ; don't assume initialized, since we may split domains to other tasks
"RTN","HMPDJFSQ",88,0)
 I $G(HMPQREF)'="" S @HMPQREF=$P($H,",",2) ;US13442 update heartbeat
"RTN","HMPDJFSQ",89,0)
 I $$INITDONE^HMPDJFSP(HMPBATCH) D  ; if all domains extracted
"RTN","HMPDJFSQ",90,0)
 . S COUNT=$O(^TMP("HMPERR",$J,"")) I COUNT>0 D POSTERR^HMPDJFSP(COUNT,HMPFDFN)
"RTN","HMPDJFSQ",91,0)
 . D SETMARK^HMPDJFSP("Done",HMPFDFN,HMPBATCH) ; - add updated syncStatus
"RTN","HMPDJFSQ",92,0)
 . D MVFRUPD(HMPBATCH,HMPFDFN)        ; - move freshness updates over
"RTN","HMPDJFSQ",93,0)
 . I $G(HMPQREF)'="" K @HMPQREF ;US13442 remove completed entry from queue
"RTN","HMPDJFSQ",94,0)
 ;
"RTN","HMPDJFSQ",95,0)
 K ^XTMP(HMPBATCH,0,"task",HMPFZTSK)  ; this task is done
"RTN","HMPDJFSQ",96,0)
 Q
"RTN","HMPDJFSQ",97,0)
 ;
"RTN","HMPDJFSQ",98,0)
DOMOPD(HMPFADOM) ; Load an operational domain in smaller batches
"RTN","HMPDJFSQ",99,0)
 ; called by:
"RTN","HMPDJFSQ",100,0)
 ;   DQINIT
"RTN","HMPDJFSQ",101,0)
 ;   DOMOPD^HMPDJFSP
"RTN","HMPDJFSQ",102,0)
 ; calls:
"RTN","HMPDJFSQ",103,0)
 ;   $$TOTAL
"RTN","HMPDJFSQ",104,0)
 ;   GET^HMPEF
"RTN","HMPDJFSQ",105,0)
 ;   MOD4STRM^HMPDJFSP
"RTN","HMPDJFSQ",106,0)
 ;   POSTSEC^HMPDJFSP
"RTN","HMPDJFSQ",107,0)
 ; expects:
"RTN","HMPDJFSQ",108,0)
 ;   HMPBATCH,HMPFZTSK
"RTN","HMPDJFSQ",109,0)
 ;
"RTN","HMPDJFSQ",110,0)
 N FILTER,RSLT,NEXTID,DONE,HMPFEST,HMPFSEC,HMPFSIZE,HMPFLDON ; cpc
"RTN","HMPDJFSQ",111,0)
 S HMPFSIZE=1000               ; section size (adjust to taste)
"RTN","HMPDJFSQ",112,0)
 S HMPFEST=$$TOTAL(HMPFADOM)   ; set estimated domain total
"RTN","HMPDJFSQ",113,0)
 S NEXTID=0,HMPFSEC=0,DONE=0,HMPFLDON=0 ;cpc
"RTN","HMPDJFSQ",114,0)
 S HMPFADOM=HMPFADOM_"#"_HMPFSEC
"RTN","HMPDJFSQ",115,0)
 F  D  Q:DONE
"RTN","HMPDJFSQ",116,0)
 . N FILTER,RSLT
"RTN","HMPDJFSQ",117,0)
 . S FILTER("noHead")=1
"RTN","HMPDJFSQ",118,0)
 . S FILTER("domain")=HMPFADOM ; include section for ^XTMP location
"RTN","HMPDJFSQ",119,0)
 . S FILTER("start")=NEXTID
"RTN","HMPDJFSQ",120,0)
 . S FILTER("limit")=HMPFSIZE
"RTN","HMPDJFSQ",121,0)
 . D GET^HMPEF(.RSLT,.FILTER)
"RTN","HMPDJFSQ",122,0)
 . I $G(HMPMETA)=1 S DONE=1 Q  ;US6734 - do not update stream if compiling metastamp
"RTN","HMPDJFSQ",123,0)
 . I '$D(^XTMP(HMPBATCH,0,"task",HMPFZTSK)) S DONE=1 QUIT  ; superceded
"RTN","HMPDJFSQ",124,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"total"),0)=0,(HMPFSEC>0) S DONE=1 QUIT
"RTN","HMPDJFSQ",125,0)
 . I $G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"finished")) S DONE=1
"RTN","HMPDJFSQ",126,0)
 . D MOD4STRM^HMPDJFSP(HMPFADOM)
"RTN","HMPDJFSQ",127,0)
 . I DONE S HMPFEST=^XTMP(HMPBATCH,0,"count",$P(HMPFADOM,"#")) S:'HMPFEST HMPFEST=1
"RTN","HMPDJFSQ",128,0)
 . D POSTSEC^HMPDJFSP(HMPFADOM,HMPFEST,HMPFSIZE)
"RTN","HMPDJFSQ",129,0)
 . Q:DONE
"RTN","HMPDJFSQ",130,0)
 . S NEXTID=$G(^XTMP(HMPBATCH,HMPFZTSK,HMPFADOM,"last"),0)
"RTN","HMPDJFSQ",131,0)
 . S HMPFSEC=HMPFSEC+1
"RTN","HMPDJFSQ",132,0)
 . S $P(HMPFADOM,"#",2)=HMPFSEC
"RTN","HMPDJFSQ",133,0)
 ;
"RTN","HMPDJFSQ",134,0)
 Q
"RTN","HMPDJFSQ",135,0)
 ;
"RTN","HMPDJFSQ",136,0)
TOTAL(DOMAIN) ; function, return size total
"RTN","HMPDJFSQ",137,0)
 ; called by:
"RTN","HMPDJFSQ",138,0)
 ;   DOMOPD
"RTN","HMPDJFSQ",139,0)
 ;   $$TOTAL^HMPDJFSP
"RTN","HMPDJFSQ",140,0)
 ;
"RTN","HMPDJFSQ",141,0)
 N I,X,ROOT,SIZE
"RTN","HMPDJFSQ",142,0)
 S SIZE=0
"RTN","HMPDJFSQ",143,0)
 F I=1:1 S X=$T(OPDOMS+I^HMPDJFSD) Q:$P(X,";",3)="zzzzz"  D  Q:SIZE
"RTN","HMPDJFSQ",144,0)
 . I $P(X,";",3)'=DOMAIN Q
"RTN","HMPDJFSQ",145,0)
 . S ROOT=$P(X,";",4)
"RTN","HMPDJFSQ",146,0)
 . I ROOT="^HMP(800000.11)" S SIZE=$G(^HMP(800000.11,"ACNT",DOMAIN)) Q
"RTN","HMPDJFSQ",147,0)
 . I $L(ROOT) S SIZE=$P($G(@ROOT@(0)),U,4)
"RTN","HMPDJFSQ",148,0)
 ;
"RTN","HMPDJFSQ",149,0)
 Q $S(SIZE:SIZE,1:9999)
"RTN","HMPDJFSQ",150,0)
 ;
"RTN","HMPDJFSQ",151,0)
 ;
"RTN","HMPDJFSQ",152,0)
MVFRUPD(HMPBATCH,HMPFDFN) ; Move freshness updates over active stream
"RTN","HMPDJFSQ",153,0)
 ; called by:
"RTN","HMPDJFSQ",154,0)
 ;   DQINIT
"RTN","HMPDJFSQ",155,0)
 ;   MVFRUPD^HMPDJFSP
"RTN","HMPDJFSQ",156,0)
 ;
"RTN","HMPDJFSQ",157,0)
 N ACT,DFN,FROM,HMPSRV,I,ID,TYPE,X
"RTN","HMPDJFSQ",158,0)
 S HMPSRV=$P(HMPBATCH,"~",2)
"RTN","HMPDJFSQ",159,0)
 D UPDSTS^HMPDJFSP(HMPFDFN,HMPSRV,2)              ; now initialized
"RTN","HMPDJFSQ",160,0)
 S FROM="HMPFH~"_HMPSRV_"~"_HMPFDFN
"RTN","HMPDJFSQ",161,0)
 S I=0 F  S I=$O(^XTMP(FROM,I)) Q:'I  D  ; move over held updates
"RTN","HMPDJFSQ",162,0)
 . S X=^XTMP(FROM,I)
"RTN","HMPDJFSQ",163,0)
 . S DFN=$P(X,U),TYPE=$P(X,U,2),ID=$P(X,U,3),ACT=$P(X,U,4)
"RTN","HMPDJFSQ",164,0)
 . D POST^HMPDJFS(DFN,TYPE,ID,ACT,HMPSRV)
"RTN","HMPDJFSQ",165,0)
 K ^XTMP(FROM) Q
"RTN","HMPDJFSQ",166,0)
 ;
"RTN","HMPDJFSQ",167,0)
SAVETASK ; save task request on job queue
"RTN","HMPDJFSQ",168,0)
 ; called by:
"RTN","HMPDJFSQ",169,0)
 ;   PUTSUB^HMPDJFSP
"RTN","HMPDJFSQ",170,0)
 ;
"RTN","HMPDJFSQ",171,0)
 N HMPQS
"RTN","HMPDJFSQ",172,0)
 S HMPQS=$O(^XTMP(HMPQBTCH,HMPPRITY,""),-1)+1
"RTN","HMPDJFSQ",173,0)
 S ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN)=""
"RTN","HMPDJFSQ",174,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"ARGS")=ARGS
"RTN","HMPDJFSQ",175,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"DOMAINS")=DOMAINS
"RTN","HMPDJFSQ",176,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPBATCH")=HMPBATCH
"RTN","HMPDJFSQ",177,0)
 M ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSRV")=HMPSRV
"RTN","HMPDJFSQ",178,0)
 S ^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSVERS")=HMPSVERS
"RTN","HMPDJFSQ",179,0)
 ;check if task manager running if not start one
"RTN","HMPDJFSQ",180,0)
 L +^XTMP(HMPQBTCH,0):1 E  Q
"RTN","HMPDJFSQ",181,0)
 D NEWQMGR L -^XTMP(HMPQBTCH,0) Q
"RTN","HMPDJFSQ",182,0)
 ;
"RTN","HMPDJFSQ",183,0)
NEWQMGR ; queuer Start new background queue manager
"RTN","HMPDJFSQ",184,0)
 ; called by:
"RTN","HMPDJFSQ",185,0)
 ;   SAVETASK
"RTN","HMPDJFSQ",186,0)
 ;
"RTN","HMPDJFSQ",187,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",188,0)
 S ZTRTN="QMGR^HMPDJFSQ",ZTIO="",ZTDTH=$H
"RTN","HMPDJFSQ",189,0)
 S ZTSAVE("HMPQBTCH")=""
"RTN","HMPDJFSQ",190,0)
 S ZTDESC="HMP patient QMGR"
"RTN","HMPDJFSQ",191,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",192,0)
 I '$G(ZTSK) D SETERR^HMPDJFS("sync queue manager failed to start")
"RTN","HMPDJFSQ",193,0)
 Q
"RTN","HMPDJFSQ",194,0)
 ;
"RTN","HMPDJFSQ",195,0)
 ;
"RTN","HMPDJFSQ",196,0)
QMGR ; task Manager patient queues
"RTN","HMPDJFSQ",197,0)
 ; called by:
"RTN","HMPDJFSQ",198,0)
 ;   NEWQMGR: queues this subroutine as a task
"RTN","HMPDJFSQ",199,0)
 ;
"RTN","HMPDJFSQ",200,0)
 L +^XTMP(HMPQBTCH,0):5 E  Q  ;prove running
"RTN","HMPDJFSQ",201,0)
 S $P(^XTMP(HMPQBTCH,0),U,1)=$$HTFM^XLFDT(+$H+5) ;Update deletion times
"RTN","HMPDJFSQ",202,0)
 N HMPQRC,HMPQPC,HMPQNOW,HMPQRUN,HMPQRUNC,HMPQTOTP,HMPQDAT,HMPQUIT,HMPQI,HMPQQ,HMPQREF
"RTN","HMPDJFSQ",203,0)
 S HMPQUIT=0 F  D  H 1 Q:HMPQUIT
"RTN","HMPDJFSQ",204,0)
 . S HMPQTOTP=+$P($G(^XTMP(HMPQBTCH,0,0)),U) I 'HMPQTOTP S HMPQTOTP=2 ;max no of patients to run
"RTN","HMPDJFSQ",205,0)
 . S HMPQNOW=$P($H,",",2)
"RTN","HMPDJFSQ",206,0)
 . K HMPQRUNC S HMPQRUNC=0
"RTN","HMPDJFSQ",207,0)
 . ;de4661 First count current running
"RTN","HMPDJFSQ",208,0)
 . S HMPQQ="^XTMP("""_HMPQBTCH_""",0,0)"
"RTN","HMPDJFSQ",209,0)
 . F HMPQI=0:1 S HMPQQ=$Q(@HMPQQ) Q:HMPQQ'[HMPQBTCH  Q:HMPQQ=""  I $QL(HMPQQ)=4 D  Q:HMPQRUNC>=HMPQTOTP
"RTN","HMPDJFSQ",210,0)
 ..  S HMPQDAT=$G(@HMPQQ),HMPFDFN=$QS(HMPQQ,4)
"RTN","HMPDJFSQ",211,0)
 ..  D:HMPQDAT  ; DE7401, check timeout on initial run and throttling restart
"RTN","HMPDJFSQ",212,0)
 ...   I (HMPQNOW-HMPQDAT)>300!(HMPQNOW>300&((HMPQNOW-HMPQDAT)<0)) K @HMPQQ Q  ;job static too long go to next
"RTN","HMPDJFSQ",213,0)
 ...   S HMPQRUNC=HMPQRUNC+1,HMPQRUNC(HMPFDFN)=""
"RTN","HMPDJFSQ",214,0)
 . Q:HMPQRUNC>=HMPQTOTP
"RTN","HMPDJFSQ",215,0)
 . S HMPQRUN=HMPQRUNC
"RTN","HMPDJFSQ",216,0)
 . S HMPQQ="^XTMP("""_HMPQBTCH_""",0,0)"
"RTN","HMPDJFSQ",217,0)
 . F HMPQI=0:1 S HMPQQ=$Q(@HMPQQ) Q:HMPQQ'[HMPQBTCH  Q:HMPQQ=""  I $QL(HMPQQ)=4 D  Q:HMPQRUN>=HMPQTOTP
"RTN","HMPDJFSQ",218,0)
 ..  S HMPQDAT=$G(@HMPQQ)
"RTN","HMPDJFSQ",219,0)
 ..  N NEWSUB,HMMPDFN,ARGS,DOMAINS,HMPBATCH,HMPSRV,HMPPRITY,HMPQS,HMPSVERS
"RTN","HMPDJFSQ",220,0)
 ..  S HMPPRITY=$QS(HMPQQ,2),HMPQS=$QS(HMPQQ,3),HMPFDFN=$QS(HMPQQ,4)
"RTN","HMPDJFSQ",221,0)
 ..  I 'HMPQDAT D  Q  ;task job
"RTN","HMPDJFSQ",222,0)
 ...   ;restore data
"RTN","HMPDJFSQ",223,0)
 ...   S NEWSUB=1
"RTN","HMPDJFSQ",224,0)
 ...   M ARGS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"ARGS")
"RTN","HMPDJFSQ",225,0)
 ...   M DOMAINS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"DOMAINS")
"RTN","HMPDJFSQ",226,0)
 ...   M HMPBATCH=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPBATCH")
"RTN","HMPDJFSQ",227,0)
 ...   M HMPSRV=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSRV")
"RTN","HMPDJFSQ",228,0)
 ...   S HMPSVERS=^XTMP(HMPQBTCH,HMPPRITY,HMPQS,HMPFDFN,"HMPSVERS")
"RTN","HMPDJFSQ",229,0)
 ...   S @HMPQQ=$P($H,",",2) ;set start time
"RTN","HMPDJFSQ",230,0)
 ...   S HMPQREF=HMPQQ
"RTN","HMPDJFSQ",231,0)
 ...   D NEWTASK
"RTN","HMPDJFSQ",232,0)
 ...   S HMPQRUN=HMPQRUN+1
"RTN","HMPDJFSQ",233,0)
 ..  I '$D(HMPQRUNC(HMPFDFN)) S HMPQRUN=HMPQRUN+1 ;de4661 - don't add already counted
"RTN","HMPDJFSQ",234,0)
 . I 'HMPQI S HMPQUIT=1 ;nothing left to process
"RTN","HMPDJFSQ",235,0)
 L -^XTMP(HMPQBTCH,0) ;clear lock when ending
"RTN","HMPDJFSQ",236,0)
 ;
"RTN","HMPDJFSQ",237,0)
 Q
"RTN","HMPDJFSQ",238,0)
 ;
"RTN","HMPDJFSQ",239,0)
NEWTASK ; Start patient specific extract
"RTN","HMPDJFSQ",240,0)
 ; called by:
"RTN","HMPDJFSQ",241,0)
 ;   QMGR
"RTN","HMPDJFSQ",242,0)
 ;
"RTN","HMPDJFSQ",243,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK
"RTN","HMPDJFSQ",244,0)
 S ZTRTN="QREJOIN^HMPDJFSP",ZTIO="",ZTDTH=$H
"RTN","HMPDJFSQ",245,0)
 S ZTSAVE("HMPQBTCH")=""
"RTN","HMPDJFSQ",246,0)
 S ZTSAVE("HMPBATCH")="",ZTSAVE("HMPFDFN")="",ZTSAVE("DOMAINS(")=""
"RTN","HMPDJFSQ",247,0)
 S ZTSAVE("HMPENVIR(")="",ZTSAVE("ARGS(")=""  ; environment information
"RTN","HMPDJFSQ",248,0)
 S ZTSAVE("HMPSTMP")="" ; Operational data stamptime US6734
"RTN","HMPDJFSQ",249,0)
 S ZTSAVE("HMPSVERS")="" ;sync version US11019
"RTN","HMPDJFSQ",250,0)
 S ZTSAVE("NEWSUB")=""
"RTN","HMPDJFSQ",251,0)
 S ZTSAVE("HMPSRV")="",ZTSAVE("HMPSRV(")=""
"RTN","HMPDJFSQ",252,0)
 S ZTSAVE("HMPQREF")="" ;US13442
"RTN","HMPDJFSQ",253,0)
 S ZTDESC="HMP patient QMGRTSK"
"RTN","HMPDJFSQ",254,0)
 D ^%ZTLOAD
"RTN","HMPDJFSQ",255,0)
 I '$G(ZTSK) D SETERR^HMPDJFS("Task MANAGER TASK not created")
"RTN","HMPDJFSQ",256,0)
 Q
"RTN","HMPDJFSQ",257,0)
 ;
"RTN","HMPDJX")
0^44^B36261442^B36089287
"RTN","HMPDJX",1,0)
HMPDJX ;SLC/MKB,ASMR/RRB,BL - New data update;Aug 29, 2016 20:06:27
"RTN","HMPDJX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDJX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDJX",4,0)
 ;
"RTN","HMPDJX",5,0)
 ; External References          DBIA#
"RTN","HMPDJX",6,0)
 ; -------------------          -----
"RTN","HMPDJX",7,0)
 ; ^DPT                         10035
"RTN","HMPDJX",8,0)
 ; MPIF001                       2701
"RTN","HMPDJX",9,0)
 ; XLFSTR                       10104
"RTN","HMPDJX",10,0)
 Q
"RTN","HMPDJX",11,0)
 ;
"RTN","HMPDJX",12,0)
EN(LAST,MAX) ; -- get data from ^XTMP("HMP-<date>",n)
"RTN","HMPDJX",13,0)
 ; Expects HMP=$NA(^TMP("HMP",$J))
"RTN","HMPDJX",14,0)
 ;
"RTN","HMPDJX",15,0)
 N SYS,X,Y,HMPTOTL,DFN,PATCNT,ICN,DOMCNT,TYPE,RTN,HMPLASTI,HMPID,DATA,DELETE,UID,CNT,TSTART,TSTOP
"RTN","HMPDJX",16,0)
 S TSTART=$$NOW^XLFDT()
"RTN","HMPDJX",17,0)
 S LAST=$G(LAST),SYS=$G(FILTER("systemID")) Q:SYS=""
"RTN","HMPDJX",18,0)
 S MAX=$G(MAX,999)
"RTN","HMPDJX",19,0)
 D GETLIST(LAST,SYS,MAX)
"RTN","HMPDJX",20,0)
 ;
"RTN","HMPDJX",21,0)
 S (DFN,PATCNT,HMPTOTL)=0 F  S DFN=$O(^TMP("HMPX",$J,DFN)) Q:'(DFN>0)  D  ;DE4496 19 August 2016
"RTN","HMPDJX",22,0)
 . K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",23,0)
 . S PATCNT=PATCNT+1,ICN=+$$GETICN^MPIF001(DFN),ERRPAT=DFN
"RTN","HMPDJX",24,0)
 . S DOMCNT=0 K DATA,DELETE
"RTN","HMPDJX",25,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,DFN,TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",26,0)
 .. S RTN=$$TAG^HMPDJ(TYPE)_"^HMPDJ0" Q:'$L($T(@RTN))
"RTN","HMPDJX",27,0)
 .. S DOMCNT=DOMCNT+1
"RTN","HMPDJX",28,0)
 .. ;
"RTN","HMPDJX",29,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",30,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,DFN,TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",31,0)
 ... N $ES,$ET,ERRPAT,ERRMSG
"RTN","HMPDJX",32,0)
 ... S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPDJX",33,0)
 ... S ERRMSG="A problem occurred when trying to refresh patient data from an API."
"RTN","HMPDJX",34,0)
 ... ;
"RTN","HMPDJX",35,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",36,0)
 ... S HMPLASTI=HMPI D @RTN   ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",37,0)
 ... ;
"RTN","HMPDJX",38,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",39,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",40,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",41,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q   ;no data, or error
"RTN","HMPDJX",42,0)
 .. ;
"RTN","HMPDJX",43,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",44,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",45,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",46,0)
 . ;
"RTN","HMPDJX",47,0)
A . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",48,0)
 . S:PATCNT>1 @HMP@(PATCNT,.3)=","
"RTN","HMPDJX",49,0)
 . S @HMP@(PATCNT,.5)="{""patientDfn"":"_DFN_",""patientIcn"":"""_ICN_""""
"RTN","HMPDJX",50,0)
 . I DOMCNT D
"RTN","HMPDJX",51,0)
 .. S @HMP@(PATCNT,.6)=",""domains"":["
"RTN","HMPDJX",52,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",53,0)
 . ;
"RTN","HMPDJX",54,0)
 . I $D(DELETE) D
"RTN","HMPDJX",55,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.5)=",""deletes"":["
"RTN","HMPDJX",56,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",57,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",58,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",59,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",60,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",61,0)
 . ;
"RTN","HMPDJX",62,0)
 . I $D(^TMP($J,"HMP ERROR")) D
"RTN","HMPDJX",63,0)
 .. N ERROR D BUILDERR^HMPDJ(.ERROR)
"RTN","HMPDJX",64,0)
 .. S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",65,0)
 .. M @HMP@(PATCNT,DOMCNT)=ERROR
"RTN","HMPDJX",66,0)
 .. K ^TMP($J,"HMP ERROR")
"RTN","HMPDJX",67,0)
 . ;
"RTN","HMPDJX",68,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",69,0)
 ;
"RTN","HMPDJX",70,0)
 S Y=$G(^TMP("HMPX",$J,0)) S:Y="" Y=LAST
"RTN","HMPDJX",71,0)
 S T=$$NOW^XLFDT()
"RTN","HMPDJX",72,0)
 S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""lastUpdate"":"""_Y_""",""startDateTime"":"""_TSTART_""",""totalPatients"":"_PATCNT
"RTN","HMPDJX",73,0)
 S:PATCNT @HMP@(.6)=",""patients"":[",PATCNT=PATCNT+1,@HMP@(PATCNT)="]"
"RTN","HMPDJX",74,0)
 ;
"RTN","HMPDJX",75,0)
B ;
"RTN","HMPDJX",76,0)
 I $D(^TMP("HMPX",$J,"OP")) D         ;operational data
"RTN","HMPDJX",77,0)
 . S (HMPTOTL,DOMCNT)=0,PATCNT=PATCNT+1 K DATA,DELETE
"RTN","HMPDJX",78,0)
 . S TYPE="" F  S TYPE=$O(^TMP("HMPX",$J,"OP",TYPE)) Q:TYPE=""  D
"RTN","HMPDJX",79,0)
 .. S RTN=$$TAG^HMPEF(TYPE)_"^HMPEF" Q:'$L($T(@RTN))
"RTN","HMPDJX",80,0)
 .. S DOMCNT=DOMCNT+1,DFN=""
"RTN","HMPDJX",81,0)
 .. ;
"RTN","HMPDJX",82,0)
 .. N HMP S HMP=$NA(^TMP("HMP",$J,PATCNT,DOMCNT)),HMPI=0,HMPID=""
"RTN","HMPDJX",83,0)
 .. F  S HMPID=$O(^TMP("HMPX",$J,"OP",TYPE,HMPID)) Q:HMPID=""  S X=$G(^(HMPID)) D
"RTN","HMPDJX",84,0)
 ... I X="@" D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",85,0)
 ... S HMPLASTI=HMPI D @RTN           ;creates @HMP@(HMPI+1)
"RTN","HMPDJX",86,0)
 ... ; if no new item, assume the record has been deleted
"RTN","HMPDJX",87,0)
 ... I HMPI'>HMPLASTI D DELETE(TYPE,DFN,HMPID) Q
"RTN","HMPDJX",88,0)
 ... S HMPTOTL=HMPTOTL+1,DATA=1
"RTN","HMPDJX",89,0)
 .. I 'HMPI S DOMCNT=DOMCNT-1 Q       ;no data, or error
"RTN","HMPDJX",90,0)
 .. ;
"RTN","HMPDJX",91,0)
 .. S:DOMCNT>1 @HMP@(.3)=","
"RTN","HMPDJX",92,0)
 .. S @HMP@(.5)="{""domainName"":"""_TYPE_""",""total"":"_HMPI_",""items"":["
"RTN","HMPDJX",93,0)
 .. S HMPI=HMPI+1,@HMP@(HMPI)="]}"
"RTN","HMPDJX",94,0)
 . ;
"RTN","HMPDJX",95,0)
C . ; HMP=$NA(^TMP("HMP",$J)) again
"RTN","HMPDJX",96,0)
 . I 'DOMCNT,'$D(DELETE) Q  ;no data, or error
"RTN","HMPDJX",97,0)
 . S @HMP@(PATCNT,.5)=",""operational"":{"
"RTN","HMPDJX",98,0)
 . I DOMCNT D
"RTN","HMPDJX",99,0)
 .. S @HMP@(PATCNT,.6)="""domains"":["
"RTN","HMPDJX",100,0)
 .. S DOMCNT=DOMCNT+1 S @HMP@(PATCNT,DOMCNT)="]"
"RTN","HMPDJX",101,0)
 . ;
"RTN","HMPDJX",102,0)
 . I $D(DELETE) D
"RTN","HMPDJX",103,0)
 .. S DOMCNT=DOMCNT+1 S:DOMCNT>1 @HMP@(PATCNT,DOMCNT,.3)=","
"RTN","HMPDJX",104,0)
 .. S @HMP@(PATCNT,DOMCNT,.5)="""deletes"":["
"RTN","HMPDJX",105,0)
 .. S HMPI=0,UID="" F  S UID=$O(DELETE(UID)) Q:UID=""  D
"RTN","HMPDJX",106,0)
 ... S TYPE=DELETE(UID),HMPI=HMPI+1
"RTN","HMPDJX",107,0)
 ... S:HMPI>1 @HMP@(PATCNT,DOMCNT,HMPI,.3)=","
"RTN","HMPDJX",108,0)
 ... S @HMP@(PATCNT,DOMCNT,HMPI,1)="{""uid"":"""_UID_""",""domainName"":"""_TYPE_"""}"
"RTN","HMPDJX",109,0)
 .. S HMPI=HMPI+1,@HMP@(PATCNT,DOMCNT,HMPI)="]"
"RTN","HMPDJX",110,0)
 . ;
"RTN","HMPDJX",111,0)
 . S DOMCNT=DOMCNT+1,@HMP@(PATCNT,DOMCNT)="}"
"RTN","HMPDJX",112,0)
 ; 
"RTN","HMPDJX",113,0)
 S TSTOP=$$NOW^XLFDT()
"RTN","HMPDJX",114,0)
 S PATCNT=PATCNT+1,@HMP@(PATCNT)=",""endDateTime"":"""_TSTOP_"""}}" ;close JSON
"RTN","HMPDJX",115,0)
 K ^TMP("HMPX",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDJX",116,0)
 Q
"RTN","HMPDJX",117,0)
 ;
"RTN","HMPDJX",118,0)
DELETE(NAME,DFN,ID) ; -- set DELETE nodes
"RTN","HMPDJX",119,0)
 N UID
"RTN","HMPDJX",120,0)
 S UID=$$SETUID^HMPUTILS(NAME,DFN,ID)
"RTN","HMPDJX",121,0)
 S DELETE(UID)=NAME
"RTN","HMPDJX",122,0)
 Q
"RTN","HMPDJX",123,0)
 ;
"RTN","HMPDJX",124,0)
GETLIST(LAST,SYS,MAX) ; -- build list of updates for client
"RTN","HMPDJX",125,0)
 ; Returns ^TMP("HMPX",$J,0) = last DATE:SEQ included
"RTN","HMPDJX",126,0)
 ;         ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",127,0)
 N DATE,SEQ,DA,END,IDX,X0,DFN,TYPE,ID,ACT,D,N,CNT
"RTN","HMPDJX",128,0)
 K ^TMP("HMPX",$J)
"RTN","HMPDJX",129,0)
 S DATE=+LAST,SEQ=+$P(LAST,":",2),CNT=0
"RTN","HMPDJX",130,0)
 S DA=$$FIND^HMPPATS(SYS) Q:'DA
"RTN","HMPDJX",131,0)
 ;
"RTN","HMPDJX",132,0)
 ; generate list ID, and end point
"RTN","HMPDJX",133,0)
 S D=DT,N=+$O(^XTMP("HMP-"_DT,"A"),-1)       ;last entry, as of now
"RTN","HMPDJX",134,0)
 I DATE=DT,SEQ=N S ^TMP("HMPX",$J,0)=LAST Q  ;no new items
"RTN","HMPDJX",135,0)
 ;
"RTN","HMPDJX",136,0)
 S IDX=$NA(^XTMP("HMP-"_DATE,SEQ)),END=N     ;init loop where left off
"RTN","HMPDJX",137,0)
 F  S IDX=$Q(@IDX) Q:$$DONE  D  Q:CNT'<MAX
"RTN","HMPDJX",138,0)
 . S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",139,0)
 . S X0=@IDX,DFN=$P(X0,U) S:DFN="" DFN="OP"
"RTN","HMPDJX",140,0)
 . I DFN,'$D(^HMP(800000,"ADFN",DFN,DA)) Q
"RTN","HMPDJX",141,0)
 . S TYPE=$P(X0,U,2),ID=$P(X0,U,3),ACT=$P(X0,U,4)
"RTN","HMPDJX",142,0)
 . I TYPE=""!(ID="") Q  ;error
"RTN","HMPDJX",143,0)
 . I TYPE="ROSTER",'$D(^HMP(800000,"AROS",ID,DA)) Q
"RTN","HMPDJX",144,0)
 . S:'$D(^TMP("HMPX",$J,DFN,TYPE,ID)) CNT=CNT+1
"RTN","HMPDJX",145,0)
 . S ^TMP("HMPX",$J,DFN,TYPE,ID)=ACT
"RTN","HMPDJX",146,0)
 S ^TMP("HMPX",$J,0)=D_":"_N                 ;final date:seq
"RTN","HMPDJX",147,0)
 Q
"RTN","HMPDJX",148,0)
 ;
"RTN","HMPDJX",149,0)
DONE() ; -- Return 1 or 0, if loop has finished
"RTN","HMPDJX",150,0)
 I IDX'?1"^XTMP(""HMP-"7N.E  Q 1       ;end of ^XTMP("HMP")
"RTN","HMPDJX",151,0)
 N D,N S D=+$P(IDX,"-",2),N=+$P(IDX,",",2)
"RTN","HMPDJX",152,0)
 ; check HMP-DATE subscript
"RTN","HMPDJX",153,0)
 I D<DT Q 0                            ;prior day: keep going
"RTN","HMPDJX",154,0)
 I D>DT Q 1                            ;next day:  stop loop
"RTN","HMPDJX",155,0)
 ; D=DT: check sequence# subscript
"RTN","HMPDJX",156,0)
 I N>END Q 1
"RTN","HMPDJX",157,0)
 Q 0
"RTN","HMPDLRA")
0^45^B85382423^B79686061
"RTN","HMPDLRA",1,0)
HMPDLRA ;SLC/MKB,ASMR/RRB,BL - Laboratory extract by accession;Aug 29, 2016 20:06:27
"RTN","HMPDLRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDLRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDLRA",4,0)
 ;
"RTN","HMPDLRA",5,0)
 ; External References          DBIA#
"RTN","HMPDLRA",6,0)
 ; -------------------          -----
"RTN","HMPDLRA",7,0)
 ; ^DPT                         10035
"RTN","HMPDLRA",8,0)
 ; ^LAB(61                        524
"RTN","HMPDLRA",9,0)
 ; ^LRO(68                       1963
"RTN","HMPDLRA",10,0)
 ; ^LRO(69                       2407
"RTN","HMPDLRA",11,0)
 ; ^LR                            525
"RTN","HMPDLRA",12,0)
 ; ^SC                          10040
"RTN","HMPDLRA",13,0)
 ; ^VA(200                      10060
"RTN","HMPDLRA",14,0)
 ; DIC                           2051
"RTN","HMPDLRA",15,0)
 ; DIQ                           2056
"RTN","HMPDLRA",16,0)
 ; LR7OR1,^TMP("LRRR",$J)        2503
"RTN","HMPDLRA",17,0)
 ; LR7OSUM,^TMP("LRC",$J),       2766
"RTN","HMPDLRA",18,0)
 ;  ^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",19,0)
 ; LR7OSAP4                      4989
"RTN","HMPDLRA",20,0)
 ; ORX8                          2467
"RTN","HMPDLRA",21,0)
 ; PXAPI                         1894
"RTN","HMPDLRA",22,0)
 ; XUAF4                         2171
"RTN","HMPDLRA",23,0)
 Q
"RTN","HMPDLRA",24,0)
 ; ------------ Get results from VistA ------------
"RTN","HMPDLRA",25,0)
 ;
"RTN","HMPDLRA",26,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's lab results
"RTN","HMPDLRA",27,0)
 N HMPSUB,HMPIDT,HMPN,HMPITM,LRDFN,LR0,ORD,X
"RTN","HMPDLRA",28,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDLRA",29,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDLRA",30,0)
 S HMPSUB=$G(FILTER("type")),LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",31,0)
 K ^TMP("LRRR",$J,DFN)
"RTN","HMPDLRA",32,0)
 ;
"RTN","HMPDLRA",33,0)
 ; get result(s)
"RTN","HMPDLRA",34,0)
 I $L($G(ID)) D  ;reset search parameters
"RTN","HMPDLRA",35,0)
 . S HMPSUB=$P(ID,";"),HMPIDT=+$P(ID,";",2)
"RTN","HMPDLRA",36,0)
 . S:HMPIDT (BEG,END)=9999999-HMPIDT
"RTN","HMPDLRA",37,0)
 ;
"RTN","HMPDLRA",38,0)
 D RR^LR7OR1(DFN,,BEG,END,HMPSUB,,,MAX)
"RTN","HMPDLRA",39,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDLRA",40,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDLRA",41,0)
 .. K HMPITM,ORD,CMMT,^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",42,0)
 .. I "CH^MI"'[HMPSUB D AP(.HMPITM),XML(.HMPITM) Q
"RTN","HMPDLRA",43,0)
 .. S HMPITM("type")=HMPSUB,HMPITM("id")=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",44,0)
 .. S HMPITM("collected")=9999999-HMPIDT,HMPITM("status")="completed"
"RTN","HMPDLRA",45,0)
 .. S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))
"RTN","HMPDLRA",46,0)
 .. S HMPITM("resulted")=$P(LR0,U,3),X=+$P(LR0,U,5) I X D
"RTN","HMPDLRA",47,0)
 ... N IENS,HMPY S IENS=X_","
"RTN","HMPDLRA",48,0)
 ... D GETS^DIQ(61,IENS,".01;2;4.1",,"HMPY")
"RTN","HMPDLRA",49,0)
 ... S HMPITM("specimen")=$G(HMPY(61,IENS,2))_U_$G(HMPY(61,IENS,.01)) ;SNOMED^name
"RTN","HMPDLRA",50,0)
 ... S HMPITM("sample")=$G(HMPY(61,IENS,4.1)) ;name
"RTN","HMPDLRA",51,0)
 .. S X=$P(LR0,U,6),HMPITM("name")=$$AREA(X),HMPITM("groupName")=X
"RTN","HMPDLRA",52,0)
 .. S X=+$P(LR0,U,14) S:X HMPITM("facility")=$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U)
"RTN","HMPDLRA",53,0)
 .. I 'X S HMPITM("facility")=$$FAC^HMPD ;local stn#^name
"RTN","HMPDLRA",54,0)
 .. I HMPSUB="MI" D  ;report
"RTN","HMPDLRA",55,0)
 ... S HMPITM("document",1)=HMPSUB_";"_HMPIDT_"^LR MICROBIOLOGY REPORT^LABORATORY NOTE"
"RTN","HMPDLRA",56,0)
 ... S:$G(HMPTEXT) HMPITM("document",1,"content")=$$TEXT(DFN,HMPSUB,HMPIDT)
"RTN","HMPDLRA",57,0)
 .. S HMPN=0 F  S HMPN=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,HMPN)) Q:HMPN<1  D
"RTN","HMPDLRA",58,0)
 ... S X=$S(HMPSUB="MI":$$MI,1:$$CH)
"RTN","HMPDLRA",59,0)
 ... S:$L(X) HMPITM("value",HMPN)=X
"RTN","HMPDLRA",60,0)
 ... S:$G(ORD) HMPITM("labOrderID")=ORD
"RTN","HMPDLRA",61,0)
 .. I $D(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT,"N")) M CMMT=^("N") S HMPITM("comment")=$$STRING^HMPD(.CMMT)
"RTN","HMPDLRA",62,0)
 .. D XML(.HMPITM)
"RTN","HMPDLRA",63,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",64,0)
 Q
"RTN","HMPDLRA",65,0)
 ;
"RTN","HMPDLRA",66,0)
CH() ; -- return a Chemistry result as:
"RTN","HMPDLRA",67,0)
 ;   id^test^result^interpretation^units^low^high^localName^loinc^vuid^order
"RTN","HMPDLRA",68,0)
 ;   Expects ^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN),LRDFN
"RTN","HMPDLRA",69,0)
 N X,Y,X0,NODE,CMMT,LOINC
"RTN","HMPDLRA",70,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"CH",HMPIDT,HMPN)),NODE=$G(^LR(LRDFN,"CH",HMPIDT,HMPN))
"RTN","HMPDLRA",71,0)
 S X=$$LABTSTNM^HMPXGLAB(+X0)  ; DE2818
"RTN","HMPDLRA",72,0)
 S Y="CH;"_HMPIDT_";"_HMPN_U_X_U_$P(X0,U,2,4)
"RTN","HMPDLRA",73,0)
 S X=$P(X0,U,5) I $L(X),X["-" S X=$TR(X,"- ","^"),$P(Y,U,6,7)=X
"RTN","HMPDLRA",74,0)
 S $P(Y,U,8)=$P(X0,U,15) ;test short name
"RTN","HMPDLRA",75,0)
 S X=$P($P(NODE,U,3),"!",3) S:X LOINC=$$GET1^DIQ(95.3,X_",",.01)
"RTN","HMPDLRA",76,0)
 S:$G(LOINC) $P(Y,U,9,10)=LOINC_U_$$VUID^HMPD(+LOINC,95.3)
"RTN","HMPDLRA",77,0)
 S ORD=+$P(X0,U,17),X=$$ORDER(ORD,+X0) S:X $P(Y,U,11)=X
"RTN","HMPDLRA",78,0)
 Q Y
"RTN","HMPDLRA",79,0)
 ;
"RTN","HMPDLRA",80,0)
MI() ; -- return a Microbiology result as:
"RTN","HMPDLRA",81,0)
 ;   id^test^result^interpretation^units
"RTN","HMPDLRA",82,0)
 ;   Expects ^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)
"RTN","HMPDLRA",83,0)
 N Y,X0
"RTN","HMPDLRA",84,0)
 S X0=$G(^TMP("LRRR",$J,DFN,"MI",HMPIDT,HMPN)),Y=""
"RTN","HMPDLRA",85,0)
 S:$L($P(X0,U))>1 Y="MI;"_HMPIDT_";"_HMPN_U_$P(X0,U,1,4)
"RTN","HMPDLRA",86,0)
 S ORD=+$P(X0,U,17)
"RTN","HMPDLRA",87,0)
 Q Y
"RTN","HMPDLRA",88,0)
 ;
"RTN","HMPDLRA",89,0)
AP(LAB) ; -- return a Pathology result in LAB("attribute")=value
"RTN","HMPDLRA",90,0)
 N LR0,X,I,NODE
"RTN","HMPDLRA",91,0)
 S LR0=$G(^LR(LRDFN,HMPSUB,HMPIDT,0))
"RTN","HMPDLRA",92,0)
 S LAB("type")=HMPSUB,LAB("id")=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",93,0)
 S LAB("collected")=9999999-HMPIDT,LAB("status")="completed"
"RTN","HMPDLRA",94,0)
 S LAB("resulted")=$P(LR0,U,11),LAB("groupName")=$P(LR0,U,6)
"RTN","HMPDLRA",95,0)
 S X="",I=0 F  S I=$O(^LR(LRDFN,HMPSUB,HMPIDT,.1,I)) Q:I<1  S X=X_$S($L(X):", ",1:"")_$P($G(^(I,0)),U)
"RTN","HMPDLRA",96,0)
 S:$L(X) LAB("specimen")=U_X
"RTN","HMPDLRA",97,0)
 S LAB("facility")=$$FAC^HMPD
"RTN","HMPDLRA",98,0)
 S NODE=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDLRA",99,0)
 S I=0 F  S I=$O(@NODE@(I)) Q:I<1  S X=+$P($G(@NODE@(I,0)),U,2) I X D
"RTN","HMPDLRA",100,0)
 . N LT,NT,HMPY
"RTN","HMPDLRA",101,0)
 . S LT=$$GET1^DIQ(8925,+X_",",.01) Q:$P(LT," ")="Addendum"
"RTN","HMPDLRA",102,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501") S:NT="" NT="LABORATORY NOTE"
"RTN","HMPDLRA",103,0)
 . S LAB("document",I)=+X_U_LT_U_NT
"RTN","HMPDLRA",104,0)
 . S:$G(HMPTEXT) LAB("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDLRA",105,0)
 I '$O(LAB("document",0)) D  ;non-TIU reports
"RTN","HMPDLRA",106,0)
 . S LAB("document",1)=HMPSUB_";"_HMPIDT_"^LR "_$$NAME(HMPSUB)_" REPORT^LABORATORY NOTE"
"RTN","HMPDLRA",107,0)
 . S:$G(HMPTEXT) LAB("document",1,"content")=$$TEXT(DFN,HMPSUB,HMPIDT)
"RTN","HMPDLRA",108,0)
 Q
"RTN","HMPDLRA",109,0)
 ;
"RTN","HMPDLRA",110,0)
ORDER(LABORD,TEST) ; -- return #100 order^name for Lab order# & Test
"RTN","HMPDLRA",111,0)
 N Y,D,S,T
"RTN","HMPDLRA",112,0)
 S D=$P(9999999-HMPIDT,"."),Y=""
"RTN","HMPDLRA",113,0)
 S S=0 F  S S=$O(^LRO(69,"C",LABORD,D,S)) Q:S<1  D  Q:Y
"RTN","HMPDLRA",114,0)
 . S T=0 F  S T=$O(^LRO(69,D,1,S,2,T)) Q:T<1  I 'TEST!(+$G(^(T,0))=TEST) S Y=+$P(^(0),U,7)
"RTN","HMPDLRA",115,0)
 ;I Y S Y=Y_U_$P($$OI^ORX8(Y),U,2)
"RTN","HMPDLRA",116,0)
 Q Y
"RTN","HMPDLRA",117,0)
 ;
"RTN","HMPDLRA",118,0)
NAME(X) ; -- Return name of subscript X
"RTN","HMPDLRA",119,0)
 I X="AU" Q "AUTOPSY"
"RTN","HMPDLRA",120,0)
 I X="BB" Q "BLOOD BANK"
"RTN","HMPDLRA",121,0)
 I X="CH" Q "CHEM,HEM,TOX,RIA,SER,etc."
"RTN","HMPDLRA",122,0)
 I X="CY" Q "CYTOPATHOLOGY"
"RTN","HMPDLRA",123,0)
 I X="EM" Q "ELECTRON MICROSCOPY"
"RTN","HMPDLRA",124,0)
 I X="MI" Q "MICROBIOLOGY"
"RTN","HMPDLRA",125,0)
 I X="SP" Q "SURGICAL PATHOLOGY"
"RTN","HMPDLRA",126,0)
 Q "ANATOMIC PATHOLOGY"
"RTN","HMPDLRA",127,0)
 ;
"RTN","HMPDLRA",128,0)
AREA(ACCNUM) ; -- Return name of accession area
"RTN","HMPDLRA",129,0)
 N X,Y,HMPA
"RTN","HMPDLRA",130,0)
 S X=$P($G(ACCNUM)," "),Y=""
"RTN","HMPDLRA",131,0)
 I $L(X) D FIND^DIC(68,,.01,"QX",X,,,,,"HMPA")
"RTN","HMPDLRA",132,0)
 S Y=$G(HMPA("DILIST",1,1))
"RTN","HMPDLRA",133,0)
 Q Y
"RTN","HMPDLRA",134,0)
 ;
"RTN","HMPDLRA",135,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDLRA",136,0)
 ;
"RTN","HMPDLRA",137,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's lab reports
"RTN","HMPDLRA",138,0)
 N HMPSUB,HMPIDT,HMPITM,HMPTIU,HMPXID,LRDFN,HMPN,DA
"RTN","HMPDLRA",139,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDLRA",140,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDLRA",141,0)
 S LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",142,0)
 K ^TMP("LRRR",$J,DFN) D RR^LR7OR1(DFN,,BEG,END,"AP",,,MAX)
"RTN","HMPDLRA",143,0)
 S HMPSUB="" F  S HMPSUB=$O(^TMP("LRRR",$J,DFN,HMPSUB)) Q:HMPSUB=""  D
"RTN","HMPDLRA",144,0)
 . S HMPIDT=0 F  S HMPIDT=$O(^TMP("LRRR",$J,DFN,HMPSUB,HMPIDT)) Q:HMPIDT<1  I $O(^(HMPIDT,0)) D
"RTN","HMPDLRA",145,0)
 .. S HMPTIU=$S(HMPSUB="AU":$NA(^LR(LRDFN,101)),1:$NA(^LR(LRDFN,HMPSUB,HMPIDT,.05)))
"RTN","HMPDLRA",146,0)
 .. K HMPITM S HMPXID=HMPSUB_";"_HMPIDT
"RTN","HMPDLRA",147,0)
 .. I '$O(@HMPTIU@(0)) D RPT1(DFN,HMPXID,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM) Q
"RTN","HMPDLRA",148,0)
 .. S HMPN=0 F  S HMPN=$O(@HMPTIU@(HMPN)) Q:HMPN<1  D
"RTN","HMPDLRA",149,0)
 ... S DA=+$P($G(@HMPTIU@(HMPN,0)),U,2) Q:DA<1  K HMPITM
"RTN","HMPDLRA",150,0)
 ... D EN1^HMPDTIU(DA,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDLRA",151,0)
 K ^TMP("LRRR",$J,DFN),^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",152,0)
 Q
"RTN","HMPDLRA",153,0)
 ;
"RTN","HMPDLRA",154,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDLRA",155,0)
 S DFN=+$G(DFN),ID=$G(ID) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDLRA",156,0)
 Q:'$L(ID)
"RTN","HMPDLRA",157,0)
 N SUB,IDT,LRDFN,LR0,X,LOC
"RTN","HMPDLRA",158,0)
 K RPT,^TMP("HMPTEXT",$J)
"RTN","HMPDLRA",159,0)
 S SUB=$P(ID,";"),IDT=+$P(ID,";",2),LRDFN=$$LRDFN^HMPXGLAB(DFN)  ;DE2818, (#63) LABORATORY REFERENCE
"RTN","HMPDLRA",160,0)
 S LR0=$S(SUB="AU":$G(^LR(LRDFN,"AU")),1:$G(^LR(LRDFN,SUB,IDT,0)))
"RTN","HMPDLRA",161,0)
 S RPT("id")=ID,RPT("referenceDateTime")=9999999-IDT
"RTN","HMPDLRA",162,0)
 S RPT("localTitle")="LR "_$$NAME(SUB)_" REPORT"
"RTN","HMPDLRA",163,0)
 S RPT("documentClass")="LR LABORATORY REPORTS"
"RTN","HMPDLRA",164,0)
 S RPT("nationalTitle")="4697105^LABORATORY NOTE"
"RTN","HMPDLRA",165,0)
 S RPT("nationalTitleSubject")="4697104^LABORATORY"
"RTN","HMPDLRA",166,0)
 S RPT("nationalTitleType")="4696120^NOTE"
"RTN","HMPDLRA",167,0)
 S RPT("type")="LR",RPT("status")="COMPLETED"
"RTN","HMPDLRA",168,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDLRA",169,0)
 S X=$P(LR0,U,$S(SUB="AU":5,1:8)),LOC="" S:$L(X) LOC=+$O(^SC("B",X,0))  ;DE2818, ***fix needed to get location IEN***
"RTN","HMPDLRA",170,0)
 S RPT("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDLRA",171,0)
 I LOC D  ;look-up visit
"RTN","HMPDLRA",172,0)
 . N CDT S CDT=9999999-IDT
"RTN","HMPDLRA",173,0)
 . S X=$$GETENC^PXAPI(DFN,CDT,LOC)
"RTN","HMPDLRA",174,0)
 . S:X RPT("encounter")=+X
"RTN","HMPDLRA",175,0)
 S X=+$P(LR0,U,$S(SUB="AU":10,1:2)) ;pathologist
"RTN","HMPDLRA",176,0)
 S:X RPT("clinician",1)=X_U_$$GET1^DIQ(200,X_",",.01)_"^A"  ;DE2818, changed global read to FileMan
"RTN","HMPDLRA",177,0)
 S X=$S(SUB="AU":$P(LR0,U,15,16),1:$P(LR0,U,11)_U_$P(LR0,U,13)) I X D
"RTN","HMPDLRA",178,0)
 . N Y S Y=$P(X,U,2)
"RTN","HMPDLRA",179,0)
 . ;DE2818, changed global read to FileMan - (#.01) NAME and (#1) INITIAL
"RTN","HMPDLRA",180,0)
 . S RPT("clinician",2)=Y_U_$$GET1^DIQ(200,+Y_",",.01)_"^S^"_+X_U_$$GET1^DIQ(200,+Y_",",1)
"RTN","HMPDLRA",181,0)
 S:$G(HMPTEXT) RPT("content")=$$TEXT(DFN,SUB,IDT)
"RTN","HMPDLRA",182,0)
 Q
"RTN","HMPDLRA",183,0)
 ;
"RTN","HMPDLRA",184,0)
TEXT(DFN,SUB,IDT,LRDFN) ; -- Get report text, return temp array name
"RTN","HMPDLRA",185,0)
 N DATE,NAME,HMPS,HMPY,I,X,Y
"RTN","HMPDLRA",186,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",187,0)
 S DATE=9999999-$G(IDT),NAME=$$NAME(SUB),HMPS(NAME)=""
"RTN","HMPDLRA",188,0)
 ;The ^LR7OSUM API is not returning correct data for all entries. The ^LR7OSAP4 API (which is what CPRS uses)
"RTN","HMPDLRA",189,0)
 ;does return correct entries where ^LR7OSUM fails, but it only returns data for lab result subscripts
"RTN","HMPDLRA",190,0)
 ;"EM", "SP", and "CY". Therefore, if we can, call the ^LR7OSAP4 API for data, and fall back to ^LR7OSUM
"RTN","HMPDLRA",191,0)
 ;otherwise.
"RTN","HMPDLRA",192,0)
 S SUB=$G(SUB) D  ; Make sure SUB is defined
"RTN","HMPDLRA",193,0)
 . ;If LRDFN and SUB is correct, call new API
"RTN","HMPDLRA",194,0)
 . I $G(LRDFN),SUB="EM"!(SUB="SP")!(SUB="CY") D EN^LR7OSAP4($NA(^TMP("LRC",$J)),LRDFN,SUB,IDT) Q
"RTN","HMPDLRA",195,0)
 . ;Otherwise, call old API
"RTN","HMPDLRA",196,0)
 . D EN^LR7OSUM(.HMPY,DFN,DATE,DATE,,,.HMPS)
"RTN","HMPDLRA",197,0)
 S Y=$NA(^TMP("HMPTEXT",$J,SUB_";"_IDT)) K @Y
"RTN","HMPDLRA",198,0)
 S I=+$G(^TMP("LRH",$J,NAME)) ;LRH=header
"RTN","HMPDLRA",199,0)
 F  S I=$O(^TMP("LRC",$J,I)) Q:I<1  S X=$G(^(I,0)) Q:X?1."="  S @Y@(I)=X
"RTN","HMPDLRA",200,0)
 K ^TMP("LRC",$J),^TMP("LRH",$J),^TMP("LRT",$J)
"RTN","HMPDLRA",201,0)
 Q Y
"RTN","HMPDLRA",202,0)
 ;
"RTN","HMPDLRA",203,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDLRA",204,0)
 ;
"RTN","HMPDLRA",205,0)
XML(LAB) ; -- Return result as XML in @HMP@(#)
"RTN","HMPDLRA",206,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDLRA",207,0)
 D ADD("<accession>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDLRA",208,0)
 S ATT="" F  S ATT=$O(LAB(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDLRA",209,0)
 . I $O(LAB(ATT,0)) D  S Y="" Q
"RTN","HMPDLRA",210,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDLRA",211,0)
 .. S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",ATT="value":"id^test^result^interpretation^units^low^high^localName^loinc^vuid^order^Z",1:"code^name^Z")
"RTN","HMPDLRA",212,0)
 .. S I=0 F  S I=$O(LAB(ATT,I)) Q:I<1  D
"RTN","HMPDLRA",213,0)
 ... S X=$G(LAB(ATT,I))
"RTN","HMPDLRA",214,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDLRA",215,0)
 ... S X=$G(LAB(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDLRA",216,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDLRA",217,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDLRA",218,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDLRA",219,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDLRA",220,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDLRA",221,0)
 . S X=$G(LAB(ATT)),Y="" Q:'$L(X)
"RTN","HMPDLRA",222,0)
 . I ATT="comment" S Y="<"_ATT_" xml:space='preserve'>"_$$ESC^HMPD(X)_"</"_ATT_">" Q
"RTN","HMPDLRA",223,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDLRA",224,0)
 . I $L(X)>1 D  S Y=""
"RTN","HMPDLRA",225,0)
 .. S NAMES="code^name^Z"
"RTN","HMPDLRA",226,0)
 .. S Y="<"_ATT_" "_$$LOOP_"/>" D ADD(Y)
"RTN","HMPDLRA",227,0)
 D ADD("</accession>")
"RTN","HMPDLRA",228,0)
 Q
"RTN","HMPDLRA",229,0)
 ;
"RTN","HMPDLRA",230,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDLRA",231,0)
 N STR,P,TAG S STR=""
"RTN","HMPDLRA",232,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDLRA",233,0)
 Q STR
"RTN","HMPDLRA",234,0)
 ;
"RTN","HMPDLRA",235,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDLRA",236,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDLRA",237,0)
 S @HMP@(HMPI)=X
"RTN","HMPDLRA",238,0)
 Q
"RTN","HMPDMC")
0^46^B58830678^B58301952
"RTN","HMPDMC",1,0)
HMPDMC ;SLC/MKB,ASMR/RRB,BL,CPC - Clinical Procedures (Medicine);Aug 29, 2016 20:06:27
"RTN","HMPDMC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDMC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDMC",4,0)
 ;
"RTN","HMPDMC",5,0)
 ; DE2818, ^SC and ^VA(200) references supprted
"RTN","HMPDMC",6,0)
 ; External Reference ~ DBIA#
"RTN","HMPDMC",7,0)
 ; ^SC ~ 10040
"RTN","HMPDMC",8,0)
 ; ^TIU(8925.1 ~ 5677
"RTN","HMPDMC",9,0)
 ; ^VA(200 ~ 10060
"RTN","HMPDMC",10,0)
 ; %DT ~ 10003
"RTN","HMPDMC",11,0)
 ; DILFD ~ 2055
"RTN","HMPDMC",12,0)
 ; DIQ ~ 2056
"RTN","HMPDMC",13,0)
 ; GMRCGUIB ~ 2980
"RTN","HMPDMC",14,0)
 ; ICPTCOD ~ 1995
"RTN","HMPDMC",15,0)
 ; MCARUTL2 ~ 3279
"RTN","HMPDMC",16,0)
 ; MCARUTL3 ~ 3280
"RTN","HMPDMC",17,0)
 ; MDPS1,^TMP("MDHSP"/"MDPTXT" ~ 4230
"RTN","HMPDMC",18,0)
 ; TIULQ ~ 2693
"RTN","HMPDMC",19,0)
 ; TIUSRVLO ~ 2834
"RTN","HMPDMC",20,0)
 ; XUAF4 ~ 2171
"RTN","HMPDMC",21,0)
 Q
"RTN","HMPDMC",22,0)
 ; ------------ Get procedures from VistA ------------
"RTN","HMPDMC",23,0)
 ;
"RTN","HMPDMC",24,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's procedures
"RTN","HMPDMC",25,0)
 N HMPITM,RES,HMPN,HMPX,RTN,DATE,CONS,TIUN,X0,DA,GBL,X,Y,%DT,HMPT,LT,NT,LOC
"RTN","HMPDMC",26,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDMC",27,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDMC",28,0)
 ;
"RTN","HMPDMC",29,0)
 ; get one procedure
"RTN","HMPDMC",30,0)
 I $G(ID) D  ;reset dates for MDPS1
"RTN","HMPDMC",31,0)
 . N HMPMC,IEN,FILE
"RTN","HMPDMC",32,0)
 . S IEN=+ID,FILE=+$P(ID,"(",2) Q:FILE=702
"RTN","HMPDMC",33,0)
 . D MEDLKUP^MCARUTL3(.HMPMC,FILE,IEN)
"RTN","HMPDMC",34,0)
 . S X=$P(HMPMC,U,6) S:X (BEG,END)=X
"RTN","HMPDMC",35,0)
 ;
"RTN","HMPDMC",36,0)
 ; get all procedures
"RTN","HMPDMC",37,0)
 K ^TMP("MDHSP",$J) S RES=""
"RTN","HMPDMC",38,0)
 D EN1^MDPS1(RES,DFN,BEG,END,MAX,"",0)
"RTN","HMPDMC",39,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDMC",40,0)
 . I $G(ID),ID'=+$P(HMPX,U,2) Q              ;update one procedure
"RTN","HMPDMC",41,0)
 . S RTN=$P(HMPX,U,3,4) Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDMC",42,0)
 . S X=$P(HMPX,U,6),%DT="TX" D ^%DT S:Y>0 DATE=Y
"RTN","HMPDMC",43,0)
 . S GBL=+$P(HMPX,U,2)_";"_$S(RTN="PR702^MDPS1":"MDD(702,",1:$$ROOT(DFN,$P(HMPX,U,11),DATE))
"RTN","HMPDMC",44,0)
 . Q:'GBL  I $G(ID),ID'=GBL Q                ;unknown, or not requested
"RTN","HMPDMC",45,0)
 . ;
"RTN","HMPDMC",46,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS) S X0=$G(HMPD(0)) ;=^GMR(123,ID,0)
"RTN","HMPDMC",47,0)
 . S TIUN=+$P(HMPX,U,14) S:TIUN TIUN=TIUN_U_$$RESOLVE^TIUSRVLO(TIUN)
"RTN","HMPDMC",48,0)
A . ;
"RTN","HMPDMC",49,0)
 . K HMPITM S HMPITM("id")=GBL,HMPITM("name")=$P(HMPX,U)
"RTN","HMPDMC",50,0)
 . S HMPITM("dateTime")=DATE,HMPITM("category")="CP"
"RTN","HMPDMC",51,0)
 . S X=$P(HMPX,U,7) S:$L(X) HMPITM("interpretation")=X
"RTN","HMPDMC",52,0)
 . I CONS,X0 D
"RTN","HMPDMC",53,0)
 .. N HMPJ S HMPITM("consult")=CONS
"RTN","HMPDMC",54,0)
 .. S HMPITM("requested")=+X0,HMPITM("order")=+$P(X0,U,3)
"RTN","HMPDMC",55,0)
 .. S HMPITM("status")=$$EXTERNAL^DILFD(123,8,,$P(X0,U,12))
"RTN","HMPDMC",56,0)
 .. S HMPJ=0 F  S HMPJ=$O(HMPD(50,HMPJ)) Q:HMPJ<1  S X=+$G(HMPD(50,HMPJ)) D
"RTN","HMPDMC",57,0)
 ... K HMPT D EXTRACT^TIULQ(X,"HMPT",,.01) S LT=$G(HMPT(X,.01,"E"))
"RTN","HMPDMC",58,0)
 ... S NT=$$GET1^DIQ(8925.1,+$G(HMPT(X,.01,"I"))_",",1501)
"RTN","HMPDMC",59,0)
 ... S HMPITM("document",X)=X_U_LT_U_NT  ;ien^local^national title
"RTN","HMPDMC",60,0)
 ... S:$G(HMPTEXT) HMPITM("document",X,"content")=$$TEXT^HMPDTIU(X)
"RTN","HMPDMC",61,0)
 ... S:'TIUN TIUN=X ;get supporting fields
"RTN","HMPDMC",62,0)
B . ;
"RTN","HMPDMC",63,0)
 . I TIUN D
"RTN","HMPDMC",64,0)
 .. S X=$P(TIUN,U,5) S:X HMPITM("provider")=+X_U_$P(X,";",3)
"RTN","HMPDMC",65,0)
 .. S:$P(TIUN,U,11) HMPITM("hasImages")=1
"RTN","HMPDMC",66,0)
 .. K HMPT D EXTRACT^TIULQ(+TIUN,"HMPT",,".03;.05;1211",,,"I")
"RTN","HMPDMC",67,0)
 .. S HMPITM("encounter")=+$G(HMPT(+TIUN,.03,"I"))
"RTN","HMPDMC",68,0)
 .. S LOC=+$G(HMPT(+TIUN,1211,"I")) I LOC S LOC=LOC_U_$P($G(^SC(LOC,0)),U)
"RTN","HMPDMC",69,0)
 .. E  S X=$P(TIUN,U,6) S:$L(X) LOC=+$O(^SC("B",X,0))_U_X
"RTN","HMPDMC",70,0)
 .. S:LOC HMPITM("location")=LOC,HMPITM("facility")=$$FAC^HMPD(+LOC)
"RTN","HMPDMC",71,0)
 .. I '$D(HMPITM("status")) S X=+$G(HMPT(+TIUN,.05,"I")),HMPITM("status")=$S(X<6:"PARTIAL RESULTS",1:"COMPLETE")
"RTN","HMPDMC",72,0)
 .. I '$G(HMPITM("document",+TIUN)) D
"RTN","HMPDMC",73,0)
 ... K HMPT D EXTRACT^TIULQ(+TIUN,"HMPT",,.01,,,"I")
"RTN","HMPDMC",74,0)
 ... S NT=$$GET1^DIQ(8925.1,+$G(HMPT(+TIUN,.01,"I"))_",",1501)
"RTN","HMPDMC",75,0)
 ... S HMPITM("document",+TIUN)=$P(TIUN,U,1,2)_U_NT  ;ien^local^national title
"RTN","HMPDMC",76,0)
 ... S:$G(HMPTEXT) HMPITM("document",+TIUN,"content")=$$TEXT^HMPDTIU(+TIUN)
"RTN","HMPDMC",77,0)
C . ;
"RTN","HMPDMC",78,0)
 . ; if no consult or note/visit ...
"RTN","HMPDMC",79,0)
 . I '$D(HMPITM("facility")) S X=$P(X0,U,21),HMPITM("facility")=$S(X:$$STA^XUAF4(X)_U_$P($$NS^XUAF4(X),U),1:$$FAC^HMPD)
"RTN","HMPDMC",80,0)
 . I '$D(HMPITM("status")) S HMPITM("status")="COMPLETE"
"RTN","HMPDMC",81,0)
 . ;I DA D  ;get CPT code from #697.2
"RTN","HMPDMC",82,0)
 . ;. K HMPT D GETS^DIQ(697.2,DA_",","1000*",,"HMPT")
"RTN","HMPDMC",83,0)
 . ;. N IENS S IENS=$O(HMPT(697.21,"")) Q:IENS=""
"RTN","HMPDMC",84,0)
 . ;. S X=HMPT(697.21,IENS,.01),HMPITM("type")=$$CPT(X)
"RTN","HMPDMC",85,0)
 . ;
"RTN","HMPDMC",86,0)
 . D XML(.HMPITM)
"RTN","HMPDMC",87,0)
ENQ ;
"RTN","HMPDMC",88,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDMC",89,0)
 Q
"RTN","HMPDMC",90,0)
 ;
"RTN","HMPDMC",91,0)
ROOT(DFN,NAME,DATE) ; -- return vptr ID for procedure instance
"RTN","HMPDMC",92,0)
 N HMPMC,Y
"RTN","HMPDMC",93,0)
 D SUB^MCARUTL2(.HMPMC,DFN,NAME,DATE,DATE)
"RTN","HMPDMC",94,0)
 S Y=$S(+$G(HMPMC):$P($G(HMPMC(HMPMC)),U,4)_",",1:"")
"RTN","HMPDMC",95,0)
 Q Y
"RTN","HMPDMC",96,0)
 ;
"RTN","HMPDMC",97,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDMC",98,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDMC",99,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDMC",100,0)
 S Y=$P(X0,U,2,3)                   ;CPT Code^Short Name
"RTN","HMPDMC",101,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDMC",102,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDMC",103,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDMC",104,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDMC",105,0)
 . S $P(Y,U,2)=X
"RTN","HMPDMC",106,0)
 Q Y
"RTN","HMPDMC",107,0)
 ;
"RTN","HMPDMC",108,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDMC",109,0)
 ;
"RTN","HMPDMC",110,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's medicine reports
"RTN","HMPDMC",111,0)
 N HMPITM,HMPN,HMPX,RTN,TIUN,CONS,HMPD,I,DA,X,Y,%DT,DATE,GBL,RES
"RTN","HMPDMC",112,0)
 S DFN=+$G(DFN) Q:$G(DFN)<1
"RTN","HMPDMC",113,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999),RES=""
"RTN","HMPDMC",114,0)
 K ^TMP("MDHSP",$J) D EN1^MDPS1(RES,DFN,BEG,END,MAX,"",0)
"RTN","HMPDMC",115,0)
 S HMPN=0 F  S HMPN=$O(^TMP("MDHSP",$J,HMPN)) Q:HMPN<1  S HMPX=$G(^(HMPN)) D
"RTN","HMPDMC",116,0)
 . S RTN=$P(HMPX,U,3,4) ;Q:RTN="PRPRO^MDPS4"  ;skip non-CP items
"RTN","HMPDMC",117,0)
 . S TIUN=+$P(HMPX,U,14) K HMPITM
"RTN","HMPDMC",118,0)
 . I TIUN D EN1^HMPDTIU(TIUN,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",119,0)
 . S CONS=+$P(HMPX,U,13) D:CONS DOCLIST^GMRCGUIB(.HMPD,CONS)
"RTN","HMPDMC",120,0)
 . S I=0 F  S I=$O(HMPD(50,I)) Q:I<1  D
"RTN","HMPDMC",121,0)
 .. K HMPITM S DA=+HMPD(50,I) Q:DA=TIUN
"RTN","HMPDMC",122,0)
 .. D EN1^HMPDTIU(DA,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",123,0)
 . Q:TIUN!$G(DA)                             ;done [got TIU note(s)]
"RTN","HMPDMC",124,0)
 . Q:RTN="PR702^MDPS1"                       ;CP, but no TIU note yet
"RTN","HMPDMC",125,0)
 . Q:RTN="PRPRO^MDPS4"                       ;non-CP procedure
"RTN","HMPDMC",126,0)
 . ; find ID for pre-TIU report
"RTN","HMPDMC",127,0)
 . S X=$P(HMPX,U,6),%DT="TX" D ^%DT S:Y>0 DATE=Y
"RTN","HMPDMC",128,0)
 . S GBL=+$P(HMPX,U,2)_";"_$$ROOT(DFN,$P(HMPX,U,11),DATE)
"RTN","HMPDMC",129,0)
 . I GBL D RPT1(DFN,GBL,.HMPITM),XML^HMPDTIU(.HMPITM):$D(HMPITM)
"RTN","HMPDMC",130,0)
 K ^TMP("MDHSP",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDMC",131,0)
 Q
"RTN","HMPDMC",132,0)
 ;
"RTN","HMPDMC",133,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDMC",134,0)
 S DFN=+$G(DFN),ID=$G(ID) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDMC",135,0)
 Q:'$L(ID)
"RTN","HMPDMC",136,0)
 N HMPY,HMPFN,X
"RTN","HMPDMC",137,0)
 S HMPFN=+$P(ID,"(",2)
"RTN","HMPDMC",138,0)
 D MEDLKUP^MCARUTL3(.HMPY,HMPFN,+ID)
"RTN","HMPDMC",139,0)
 S RPT("id")=ID,RPT("referenceDateTime")=$P(HMPY,U,6)
"RTN","HMPDMC",140,0)
 S RPT("localTitle")=$P(HMPY,U,9),RPT("category")="CP"
"RTN","HMPDMC",141,0)
 S RPT("documentClass")="CLINICAL PROCEDURES"
"RTN","HMPDMC",142,0)
 S RPT("nationalTitle")="4696566^PROCEDURE REPORT"
"RTN","HMPDMC",143,0)
 S RPT("nationalTitleService")="4696471^PROCEDURE"
"RTN","HMPDMC",144,0)
 S RPT("nationalTitleType")="4696123^REPORT"
"RTN","HMPDMC",145,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDMC",146,0)
 S X=$$GET1^DIQ(HMPFN,+ID_",",1506)
"RTN","HMPDMC",147,0)
 S RPT("status")=$S($L(X):X,1:"COMPLETED")
"RTN","HMPDMC",148,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",701,"I")
"RTN","HMPDMC",149,0)
 S:X RPT("clinician",1)=X_U_$P($G(^VA(200,X,0)),U)_"^A"
"RTN","HMPDMC",150,0)
 S X=+$$GET1^DIQ(HMPFN,+ID_",",1503,"I")
"RTN","HMPDMC",151,0)
 S:X RPT("clinician",2)=X_U_$P($G(^VA(200,X,0)),U)_"^S^"_$$GET1^DIQ(HMPFN,+ID_",",1505,"I")_U_$$SIG^HMPDTIU(X)
"RTN","HMPDMC",152,0)
 ; RPT("encounter")=$$GET1^DIQ(HMPFN,+ID_",",900,"I")
"RTN","HMPDMC",153,0)
 S RPT("facility")=$$FAC^HMPD
"RTN","HMPDMC",154,0)
 S:$G(HMPTEXT) RPT("content")=$$TEXT(DFN,ID,$P(HMPY,U,9))
"RTN","HMPDMC",155,0)
 Q
"RTN","HMPDMC",156,0)
 ;
"RTN","HMPDMC",157,0)
TEXT(DFN,ID,NAME) ; -- Get report text, return temp array name
"RTN","HMPDMC",158,0)
 N MCARGDA,MCPRO,MDALL,I,X,Y ;de3944
"RTN","HMPDMC",159,0)
 S MCARGDA=+$G(ID),MCPRO=NAME,MDALL=1 D PR690^MDPS1
"RTN","HMPDMC",160,0)
 K ^TMP("HMPTEXT",$J,ID)
"RTN","HMPDMC",161,0)
 S I=0 F  S I=$O(^TMP("MDPTXT",$J,MCARGDA,MCPRO,I)) Q:I<1  S X=$G(^(I,0)),^TMP("HMPTEXT",$J,ID,I)=X
"RTN","HMPDMC",162,0)
 S Y=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDMC",163,0)
 Q Y
"RTN","HMPDMC",164,0)
 ;
"RTN","HMPDMC",165,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDMC",166,0)
 ;
"RTN","HMPDMC",167,0)
XML(PROC) ; -- Return patient procedure as XML
"RTN","HMPDMC",168,0)
 ;  as <element code='123' displayName='ABC' />
"RTN","HMPDMC",169,0)
 N ATT,X,Y,I,J,NAMES
"RTN","HMPDMC",170,0)
 D ADD("<procedure>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDMC",171,0)
 S ATT="" F  S ATT=$O(PROC(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDMC",172,0)
 . S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDMC",173,0)
 . I $O(PROC(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDMC",174,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDMC",175,0)
 .. S I=0 F  S I=$O(PROC(ATT,I)) Q:I<1  D
"RTN","HMPDMC",176,0)
 ... S X=$G(PROC(ATT,I)),Y="<"_ATT_" "_$$LOOP
"RTN","HMPDMC",177,0)
 ... S X=$G(PROC(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDMC",178,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDMC",179,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDMC",180,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDMC",181,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDMC",182,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDMC",183,0)
 . S X=$G(PROC(ATT)),Y="" Q:'$L(X)
"RTN","HMPDMC",184,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDMC",185,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDMC",186,0)
 D ADD("</procedure>")
"RTN","HMPDMC",187,0)
 Q
"RTN","HMPDMC",188,0)
 ;
"RTN","HMPDMC",189,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDMC",190,0)
 N STR,P,TAG S STR=""
"RTN","HMPDMC",191,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDMC",192,0)
 Q STR
"RTN","HMPDMC",193,0)
 ;
"RTN","HMPDMC",194,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDMC",195,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDMC",196,0)
 S @HMP@(HMPI)=X
"RTN","HMPDMC",197,0)
 Q
"RTN","HMPDOR")
0^59^B28492902^B13574723
"RTN","HMPDOR",1,0)
HMPDOR ;SLC/MKB,ASMR/RRB,BL - Orders extract;Aug 17, 2016 11:42:39
"RTN","HMPDOR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPDOR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDOR",4,0)
 ;
"RTN","HMPDOR",5,0)
 ; External References          DBIA#
"RTN","HMPDOR",6,0)
 ; -------------------          -----
"RTN","HMPDOR",7,0)
 ; ^ORA(102.4)                   5769
"RTN","HMPDOR",8,0)
 ; ^SC                          10040
"RTN","HMPDOR",9,0)
 ; ^VA(200)                     10060
"RTN","HMPDOR",10,0)
 ; DIQ                           2056
"RTN","HMPDOR",11,0)
 ; ORQ1,^TMP("ORR",$J)           3154
"RTN","HMPDOR",12,0)
 ; ORQ12,^TMP("ORGOTIT",$J)      5704
"RTN","HMPDOR",13,0)
 ; ORX8                          2467
"RTN","HMPDOR",14,0)
 Q
"RTN","HMPDOR",15,0)
 ; ------------ Get data from VistA ------------
"RTN","HMPDOR",16,0)
 ;
"RTN","HMPDOR",17,0)
EN(DFN,BEG,END,MAX,IFN) ; -- find a patient's orders
"RTN","HMPDOR",18,0)
 S DFN=+$G(DFN)
"RTN","HMPDOR",19,0)
 ; DE5111 begin
"RTN","HMPDOR",20,0)
 ; invalid DFN, log event as type "missing" and quit
"RTN","HMPDOR",21,0)
 I '(DFN>0) D  Q
"RTN","HMPDOR",22,0)
 . N LOGTXT S LOGTXT(1)=" invalid DFN: "_DFN D EVNTLOG(.LOGTXT,"M")
"RTN","HMPDOR",23,0)
 ; DE5111 end
"RTN","HMPDOR",24,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDOR",25,0)
 N ORLIST,HMPN,HMPITM,HMPCNT
"RTN","HMPDOR",26,0)
 ;
"RTN","HMPDOR",27,0)
 ; get one order
"RTN","HMPDOR",28,0)
 I $G(IFN) D  G ENQ
"RTN","HMPDOR",29,0)
 . ; DE5111 begin
"RTN","HMPDOR",30,0)
 . ; check for existence of Order, log it if missing
"RTN","HMPDOR",31,0)
 . I '$L($$GET1^DIQ(100,IFN_",",.01)) D  Q  ;log event as type "missing" and quit
"RTN","HMPDOR",32,0)
 ..  N LOGTXT S LOGTXT(1)=" missing order IFN: "_IFN_", DFN: "_DFN D EVNTLOG(.LOGTXT,"M")
"RTN","HMPDOR",33,0)
 . ; DE5111 end
"RTN","HMPDOR",34,0)
 . N ORLST S ORLST=0,ORLIST=$H
"RTN","HMPDOR",35,0)
 . D GET^ORQ12(IFN,ORLIST,1) S HMPN=1
"RTN","HMPDOR",36,0)
 . D EN1(HMPN,.HMPITM)  ;DE5111, D XML(.HMPITM) call removed
"RTN","HMPDOR",37,0)
 . K ^TMP("ORGOTIT",$J)
"RTN","HMPDOR",38,0)
 ;
"RTN","HMPDOR",39,0)
 ; get all orders
"RTN","HMPDOR",40,0)
 D EN^ORQ1(DFN_";DPT(",,6,,BEG,END,1) S HMPCNT=0
"RTN","HMPDOR",41,0)
 S HMPN=0 F  S HMPN=$O(^TMP("ORR",$J,ORLIST,HMPN)) Q:HMPN<1  D  Q:HMPCNT'<MAX
"RTN","HMPDOR",42,0)
 . K HMPITM D EN1(HMPN,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDOR",43,0)
 . ;DE5111, this code removed: D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDOR",44,0)
ENQ ; end
"RTN","HMPDOR",45,0)
 K ^TMP("ORR",$J),^TMP("HMPTEXT",$J)
"RTN","HMPDOR",46,0)
 Q
"RTN","HMPDOR",47,0)
 ;
"RTN","HMPDOR",48,0)
EN1(NUM,ORD) ; -- return an order in ORD("attribute")=value
"RTN","HMPDOR",49,0)
 ;  from EN: expects ^TMP("ORR",$J,ORLIST,HMPN)
"RTN","HMPDOR",50,0)
 N X0,IFN,LOC,X,DA
"RTN","HMPDOR",51,0)
 K ORD,^TMP("HMPTEXT",$J)
"RTN","HMPDOR",52,0)
 S X0=$G(^TMP("ORR",$J,ORLIST,NUM)),IFN=+X0
"RTN","HMPDOR",53,0)
 ;DE5111 begin
"RTN","HMPDOR",54,0)
 I '(IFN>0) D  Q   ;if invalid IFN from ^TMP("ORR",$J), log it and quit
"RTN","HMPDOR",55,0)
 . N LOGTXT S LOGTXT(1)=" invalid IFN: "_IFN_", DFN: "_$G(DFN,"*no DFN*")
"RTN","HMPDOR",56,0)
 . D EVNTLOG(.LOGTXT,"C")  ; event type is "corrupt"
"RTN","HMPDOR",57,0)
 ;
"RTN","HMPDOR",58,0)
 I '$L($$GET1^DIQ(100,IFN_",",.01)) D  Q  ;if no Order found for this IFN, log it and quit
"RTN","HMPDOR",59,0)
 . N LOGTXT S LOGTXT(1)=" missing order IFN: "_IFN_", DFN: "_$G(DFN,"*no DFN*")
"RTN","HMPDOR",60,0)
 . D EVNTLOG(.LOGTXT,"M")  ; event type is "missing"
"RTN","HMPDOR",61,0)
 ;DE5111 end
"RTN","HMPDOR",62,0)
 S ORD("id")=IFN,ORD("name")=$$OI^ORX8(+X0)
"RTN","HMPDOR",63,0)
 S ORD("group")=$P(X0,U,2),ORD("entered")=$P(X0,U,3)
"RTN","HMPDOR",64,0)
 S ORD("start")=$P(X0,U,4),ORD("stop")=$P(X0,U,5)
"RTN","HMPDOR",65,0)
 S ORD("status")=$P(X0,U,7)_U_$P(X0,U,6)_U_$$STS($P(X0,U,7))
"RTN","HMPDOR",66,0)
 M ^TMP("HMPTEXT",$J,IFN)=^TMP("ORR",$J,ORLIST,HMPN,"TX")
"RTN","HMPDOR",67,0)
 S ORD("content")=$NA(^TMP("HMPTEXT",$J,IFN))
"RTN","HMPDOR",68,0)
 S X=$$GET1^DIQ(100,IFN_",",1,"I"),ORD("provider")=X_U_$P($G(^VA(200,+X,0)),U) ;ICR 10060 DE2818 ASF 11/10/15
"RTN","HMPDOR",69,0)
 S X=$$GET1^DIQ(100,IFN_",",6),LOC="" I $L(X) D
"RTN","HMPDOR",70,0)
 . S LOC=+$O(^SC("B",X,0)),ORD("location")=LOC_U_X ;ICR 10040 DE2818 ASF 11/9/15
"RTN","HMPDOR",71,0)
 S ORD("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDOR",72,0)
 S ORD("service")=$$GET1^DIQ(100,IFN_",","12:1")
"RTN","HMPDOR",73,0)
 ; acknowledgements
"RTN","HMPDOR",74,0)
 S DA=0 F  S DA=$O(^ORA(102.4,"B",+IFN,DA)) Q:DA<1  D  ;ICR 5769 DE2818 ASF 11/9/15
"RTN","HMPDOR",75,0)
 . S X0=$G(^ORA(102.4,DA,0)) Q:'$P(X0,U,3)  ;stub - not ack'd
"RTN","HMPDOR",76,0)
 . S X=+$P(X0,U,2),X=$S(X:X_U_$P($G(^VA(200,X,0)),U),1:U)
"RTN","HMPDOR",77,0)
 . S ORD("acknowledgement",DA)=X_U_$P(X0,U,3)
"RTN","HMPDOR",78,0)
 Q
"RTN","HMPDOR",79,0)
 ;
"RTN","HMPDOR",80,0)
STS(X) ; -- return VUID for status abbreviation X
"RTN","HMPDOR",81,0)
 N Y,I,STS
"RTN","HMPDOR",82,0)
 S STS="dc^comp^hold^flag^pend^actv^exp^schd^part^dlay^unr^dc/e^canc^laps^rnew^none"
"RTN","HMPDOR",83,0)
 F I=1:1:16 Q:$P(STS,U,I)=X
"RTN","HMPDOR",84,0)
 S Y=$$VUID^HMPD(I,100.01)
"RTN","HMPDOR",85,0)
 Q Y
"RTN","HMPDOR",86,0)
 ;
"RTN","HMPDOR",87,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDOR",88,0)
 ;
"RTN","HMPDOR",89,0)
XML(ORD) ; -- Return patient data as XML in @HMP@(n), DE5111, calls in this routine to here disabled
"RTN","HMPDOR",90,0)
 ; as <element code='123' displayName='ABC' />
"RTN","HMPDOR",91,0)
 N ATT,X,Y,I,NAMES
"RTN","HMPDOR",92,0)
 D ADD("<order>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDOR",93,0)
 S ATT="" F  S ATT=$O(ORD(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDOR",94,0)
 . S NAMES="code^name^"_$S(ATT?1"ack".E:"date",1:"vuid")_"^Z"
"RTN","HMPDOR",95,0)
 . I ATT?1"ack".E D  S Y="" Q
"RTN","HMPDOR",96,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDOR",97,0)
 .. S I=0 F  S I=$O(ORD(ATT,I)) Q:I<1  D
"RTN","HMPDOR",98,0)
 ... S X=$G(ORD(ATT,I))
"RTN","HMPDOR",99,0)
 ... S Y="<"_ATT_" "_$$LOOP_"/>" D ADD(Y)
"RTN","HMPDOR",100,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDOR",101,0)
 . S X=$G(ORD(ATT)),Y="" Q:'$L(X)
"RTN","HMPDOR",102,0)
 . I ATT="content" D  S Y="" Q  ;text
"RTN","HMPDOR",103,0)
 .. S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDOR",104,0)
 .. S I=0 F  S I=$O(@X@(I)) Q:I<1  S Y=$$ESC^HMPD(@X@(I)) D ADD(Y)
"RTN","HMPDOR",105,0)
 .. D ADD("</content>")
"RTN","HMPDOR",106,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDOR",107,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDOR",108,0)
 D ADD("</order>")
"RTN","HMPDOR",109,0)
 Q
"RTN","HMPDOR",110,0)
 ;DE5111, the XML subroutine may be removed if not needed, 11 August 2016
"RTN","HMPDOR",111,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDOR",112,0)
 N STR,P,TAG S STR=""
"RTN","HMPDOR",113,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDOR",114,0)
 Q STR
"RTN","HMPDOR",115,0)
 ;
"RTN","HMPDOR",116,0)
ADD(X) ; Add a line @HMP@(n)=X
"RTN","HMPDOR",117,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDOR",118,0)
 S @HMP@(HMPI)=X
"RTN","HMPDOR",119,0)
 Q
"RTN","HMPDOR",120,0)
 ;
"RTN","HMPDOR",121,0)
 ;DE5111 begin
"RTN","HMPDOR",122,0)
EVNTLOG(ENVNTXT,EVNTYP) ; log information in HMP EVENT, 10 August 2016
"RTN","HMPDOR",123,0)
 ;EVNTXT - text to be placed into log, passed by reference
"RTN","HMPDOR",124,0)
 ;EVNTYP - type of event, optional - dafaults to "other" in $$NWNTRY^HMPLOG
"RTN","HMPDOR",125,0)
 N J,LNCNT,LOGTXT,STKINFO
"RTN","HMPDOR",126,0)
 D STK2TXT^HMPLOG(.STKINFO)  ; retrieve $stack info
"RTN","HMPDOR",127,0)
 S J=0,LNCNT=1 F J=$O(ENVNTXT(J)) Q:'J  S LNCNT=LNCNT+1,LOGTXT(LNCNT)=ENVNTXT(J)  ; save text passed in
"RTN","HMPDOR",128,0)
 S LNCNT=LNCNT+1,LOGTXT(LNCNT)=" "  ;skip line before stack
"RTN","HMPDOR",129,0)
 S LNCNT=LNCNT+1,LOGTXT(LNCNT)="   code from $stack: "
"RTN","HMPDOR",130,0)
 S J=0 F  S J=$O(STKINFO(J)) Q:'J  S LNCNT=LNCNT+1,LOGTXT(LNCNT)=STKINFO(J)
"RTN","HMPDOR",131,0)
 S LNCNT=LNCNT+1,LOGTXT(LNCNT)=" "  ; blank line following word-processing text, $$NWNTRY^HMPLOG appends text to end
"RTN","HMPDOR",132,0)
 S J=$$NWNTRY^HMPLOG($$NOW^XLFDT,$G(EVNTYP),.LOGTXT)  ; log event, new entry IEN in J, not needed
"RTN","HMPDOR",133,0)
 ;DE5111 end
"RTN","HMPDRA")
0^47^B43358349^B42792632
"RTN","HMPDRA",1,0)
HMPDRA ;SLC/MKB,ASMR/RRB,BL - Radiology extract;Sep 20, 2016 17:43:20
"RTN","HMPDRA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDRA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDRA",4,0)
 ;
"RTN","HMPDRA",5,0)
 ; External References          DBIA#
"RTN","HMPDRA",6,0)
 ; -------------------          -----
"RTN","HMPDRA",7,0)
 ; ^RADPT                        2480
"RTN","HMPDRA",8,0)
 ; ^RARPT                        8000005
"RTN","HMPDRA",9,0)
 ; ^SC(                         10040
"RTN","HMPDRA",10,0)
 ; ^VA(200                      10060
"RTN","HMPDRA",11,0)
 ; DIQ                           2056
"RTN","HMPDRA",12,0)
 ; ICPTCOD                       1995
"RTN","HMPDRA",13,0)
 ; RAO7PC1                  2043,2265
"RTN","HMPDRA",14,0)
 ; RAO7PC3                       2877
"RTN","HMPDRA",15,0)
 Q
"RTN","HMPDRA",16,0)
 ; ------------ Get exam(s) from VistA ------------
"RTN","HMPDRA",17,0)
 ;
"RTN","HMPDRA",18,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's radiology exams
"RTN","HMPDRA",19,0)
 N HMPITM,HMPXID
"RTN","HMPDRA",20,0)
 S DFN=+$G(DFN) Q:'(DFN>0)  ;DE4496 19 August 2016
"RTN","HMPDRA",21,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDRA",22,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDRA",23,0)
 ;
"RTN","HMPDRA",24,0)
 ; get exam(s)
"RTN","HMPDRA",25,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDRA",26,0)
 ;
"RTN","HMPDRA",27,0)
 ; get all exams
"RTN","HMPDRA",28,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDRA",29,0)
 . K HMPITM D EN1(HMPXID,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDRA",30,0)
 . D XML(.HMPITM)
"RTN","HMPDRA",31,0)
ENQ ; end
"RTN","HMPDRA",32,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDRA",33,0)
 Q
"RTN","HMPDRA",34,0)
 ;
"RTN","HMPDRA",35,0)
EN1(ID,EXAM) ; -- return an exam in EXAM("attribute")=value
"RTN","HMPDRA",36,0)
 ;   Expects ^TMP($J,"RAE1",DFN,ID) from EN1^RAO7PC1
"RTN","HMPDRA",37,0)
 N X0,SET,PROC,DATE,LOC,X,Y,IENS
"RTN","HMPDRA",38,0)
 K EXAM,^TMP("HMPTEXT",$J)
"RTN","HMPDRA",39,0)
 S X0=$G(^TMP($J,"RAE1",DFN,ID)),SET=$G(^(ID,"CPRS")),PROC=$P(X0,U)
"RTN","HMPDRA",40,0)
 S EXAM("id")=ID,EXAM("name")=PROC,EXAM("case")=$P(X0,U,2)
"RTN","HMPDRA",41,0)
 S DATE=9999999.9999-+ID,EXAM("dateTime")=DATE
"RTN","HMPDRA",42,0)
 I $P(X0,U,5) D  ;report exists
"RTN","HMPDRA",43,0)
 . N NM S NM=$S(+SET=2:$P(SET,U,2),1:PROC)     ;2 = shared report
"RTN","HMPDRA",44,0)
 . S EXAM("document",1)=ID_U_NM_"^^"_$P(X0,U,3) ;id^localTitle^^status
"RTN","HMPDRA",45,0)
 . S:$G(HMPTEXT) EXAM("document",1,"content")=$$TEXT(DFN,ID)
"RTN","HMPDRA",46,0)
 S:$L($P(X0,U,6)) EXAM("status")=$P($P(X0,U,6),"~",2)
"RTN","HMPDRA",47,0)
 S X=$P(X0,U,7),LOC="" I $L(X) D
"RTN","HMPDRA",48,0)
 . S LOC=+$O(^SC("B",X,0)),EXAM("location")=LOC_U_X ;ICR 10040 DE2818 ASF 11/18/15
"RTN","HMPDRA",49,0)
 S EXAM("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDRA",50,0)
 I $L($P(X0,U,8)) S X=$TR($P(X0,U,8),"~","^"),EXAM("imagingType")=X
"RTN","HMPDRA",51,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDRA",52,0)
 S X=$P(X0,U,10) I X D
"RTN","HMPDRA",53,0)
 . S EXAM("type")=$$CPT(X)
"RTN","HMPDRA",54,0)
 . I $D(^TMP($J,"RAE1",DFN,ID,"CMOD")) M EXAM("modifier")=^("CMOD")
"RTN","HMPDRA",55,0)
 I $P(X0,U,11) S EXAM("order")=+$P(X0,U,11)_U_$S($L(SET):$P(SET,U,2),1:PROC)
"RTN","HMPDRA",56,0)
 S EXAM("hasImages")=$S($P(X0,U,12)="Y":1,1:0)
"RTN","HMPDRA",57,0)
 I $P(X0,U,4)="Y"!($P(X0,U,9)="Y") S EXAM("interpretation")="ABNORMAL"
"RTN","HMPDRA",58,0)
 S EXAM("encounter")=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDRA",59,0)
 S ID=DFN_U_$TR(ID,"-","^") D EN3^RAO7PC1(ID) D  ;get additional values
"RTN","HMPDRA",60,0)
 . S X=+$G(^TMP($J,"RAE2",DFN,+$P(ID,U,3),PROC,"P"))
"RTN","HMPDRA",61,0)
 . I X S EXAM("provider")=X_U_$P($G(^VA(200,X,0)),U) ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",62,0)
 S EXAM("category")="RA"
"RTN","HMPDRA",63,0)
 Q
"RTN","HMPDRA",64,0)
 ;
"RTN","HMPDRA",65,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDRA",66,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDRA",67,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDRA",68,0)
 S Y=$P(X0,U,2,3)                  ;CPT Code^Short Name
"RTN","HMPDRA",69,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDRA",70,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDRA",71,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDRA",72,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDRA",73,0)
 . S $P(Y,U,2)=X
"RTN","HMPDRA",74,0)
 Q Y
"RTN","HMPDRA",75,0)
 ;
"RTN","HMPDRA",76,0)
TEXT(PAT,ID) ; -- Get report text, return temp array name
"RTN","HMPDRA",77,0)
 S PAT=+$G(PAT),ID=$G(ID) I PAT<1!(ID<1) Q ""
"RTN","HMPDRA",78,0)
 N DFN,EXAM,CASE,PROC,I,X,Y
"RTN","HMPDRA",79,0)
 S EXAM=PAT_U_$TR(ID,"-","^") D EN3^RAO7PC3(EXAM)
"RTN","HMPDRA",80,0)
 S Y=$NA(^TMP("HMPTEXT",$J,ID)) K @Y
"RTN","HMPDRA",81,0)
 S CASE=$O(^TMP($J,"RAE3",PAT,0)),PROC=$O(^(CASE,""))
"RTN","HMPDRA",82,0)
 S I=0 F  S I=$O(^TMP($J,"RAE3",PAT,CASE,PROC,I)) Q:I<1  S X=^(I),@Y@(I)=X
"RTN","HMPDRA",83,0)
 K ^TMP($J,"RAE3",PAT)
"RTN","HMPDRA",84,0)
 Q Y
"RTN","HMPDRA",85,0)
 ;
"RTN","HMPDRA",86,0)
 ; ------------ Get report(s) [via HMPDTIU] ------------
"RTN","HMPDRA",87,0)
 ;
"RTN","HMPDRA",88,0)
RPTS(DFN,BEG,END,MAX) ; -- find patient's radiology reports
"RTN","HMPDRA",89,0)
 N HMPITM,HMPXID,STS,PSET
"RTN","HMPDRA",90,0)
 S DFN=+$G(DFN) Q:'(DFN>0)  ;DE4496 19 August 2016
"RTN","HMPDRA",91,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)_"P"
"RTN","HMPDRA",92,0)
 K ^TMP($J,"RAE1") D EN1^RAO7PC1(DFN,BEG,END,MAX)
"RTN","HMPDRA",93,0)
 S HMPXID="" F  S HMPXID=$O(^TMP($J,"RAE1",DFN,HMPXID)) Q:HMPXID=""  D
"RTN","HMPDRA",94,0)
 . S STS=$P($G(^TMP($J,"RAE1",DFN,HMPXID)),U,3),PSET=$G(^(HMPXID,"CPRS"))
"RTN","HMPDRA",95,0)
 . Q:STS="No Report"!(STS="Deleted")  ;!(STS["Draft") ??
"RTN","HMPDRA",96,0)
 . I +PSET=2,$G(PSET(+HMPXID,$P(PSET,U,2))) Q  ;already have report
"RTN","HMPDRA",97,0)
 . K HMPITM D RPT1(DFN,HMPXID,.HMPITM) D:$D(HMPITM) XML^HMPDTIU(.HMPITM)
"RTN","HMPDRA",98,0)
 . I +PSET=2 S PSET(+HMPXID,$P(PSET,U,2))=$P(HMPXID,"-",2) ;parent
"RTN","HMPDRA",99,0)
 K ^TMP($J,"RAE1"),^TMP("HMPTEXT",$J)
"RTN","HMPDRA",100,0)
 Q
"RTN","HMPDRA",101,0)
 ;
"RTN","HMPDRA",102,0)
RPT1(DFN,ID,RPT) ; -- return report as a TIU document
"RTN","HMPDRA",103,0)
 S DFN=+$G(DFN),ID=$G(ID) Q:'(DFN>0)  Q:ID<1  ;DE4496 19 August 2016
"RTN","HMPDRA",104,0)
 N EXAM,CASE,PROC,RAE3,RAE1,I,X,Y,IENS,LOC
"RTN","HMPDRA",105,0)
 K RPT,^TMP("HMPTEXT",$J)
"RTN","HMPDRA",106,0)
 S EXAM=DFN_U_$TR(ID,"-","^") D
"RTN","HMPDRA",107,0)
 . N DFN D EN3^RAO7PC3(EXAM) ;report
"RTN","HMPDRA",108,0)
 . D EN3^RAO7PC1(EXAM)       ;add'l values
"RTN","HMPDRA",109,0)
 S CASE=$O(^TMP($J,"RAE3",DFN,0)),PROC=$O(^(CASE,"")),RAE3=$G(^(PROC))
"RTN","HMPDRA",110,0)
 S RAE1=$G(^TMP($J,"RAE1",DFN,ID))
"RTN","HMPDRA",111,0)
 I $G(HMPTEXT) D
"RTN","HMPDRA",112,0)
 . S Y=$NA(^TMP("HMPTEXT",$J,ID))
"RTN","HMPDRA",113,0)
 . S I=0 F  S I=$O(^TMP($J,"RAE3",DFN,CASE,PROC,I)) Q:I<1  S X=^(I),@Y@(I)=X
"RTN","HMPDRA",114,0)
 . S RPT("content")=Y
"RTN","HMPDRA",115,0)
 S RPT("id")=ID,RPT("status")=$P(RAE3,U)
"RTN","HMPDRA",116,0)
 S X=9999999.9999-(+ID),RPT("referenceDateTime")=X
"RTN","HMPDRA",117,0)
 S X=+$G(^TMP($J,"RAE2",DFN,CASE,PROC,"P"))
"RTN","HMPDRA",118,0)
 I X S RPT("clinician",1)=X_U_$P($G(^VA(200,X,0)),U)_"^A" ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",119,0)
 S X=$G(^TMP($J,"RAE2",DFN,CASE,PROC,"V")) I X D
"RTN","HMPDRA",120,0)
 . N Y S Y=$$GET1^DIQ(74,+$P(RAE1,U,5)_",",7,"I")
"RTN","HMPDRA",121,0)
 . S RPT("clinician",2)=+X_U_$P($G(^VA(200,+X,0)),U)_"^S^"_Y_U_$P(X,U,2) ;ICR10060 DE2818 ASF 11/18/15
"RTN","HMPDRA",122,0)
 I $D(^TMP($J,"RAE3",DFN,"PRINT_SET")) S PROC=$G(^("ORD")) ;use parent, if printset
"RTN","HMPDRA",123,0)
 S RPT("localTitle")=PROC,RPT("category")="RA"
"RTN","HMPDRA",124,0)
 S RPT("nationalTitle")="4695068^RADIOLOGY REPORT"
"RTN","HMPDRA",125,0)
 S RPT("nationalTitleSubject")="4693357^RADIOLOGY"
"RTN","HMPDRA",126,0)
 S RPT("nationalTitleType")="4696123^REPORT"
"RTN","HMPDRA",127,0)
 S X=$P(RAE1,U,7),LOC="" I $L(X) D
"RTN","HMPDRA",128,0)
 . S LOC=+$O(^SC("B",X,0)) ;,EXAM("location")=LOC_U_X ICR 10040 DE2818 ASF 11/18/15
"RTN","HMPDRA",129,0)
 S RPT("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDRA",130,0)
 S IENS=$P(ID,"-",2)_","_+ID_","_DFN_","
"RTN","HMPDRA",131,0)
 S RPT("encounter")=$$GET1^DIQ(70.03,IENS,27,"I")
"RTN","HMPDRA",132,0)
 S:$G(FILTER("loinc")) RPT("loinc")=$P(FILTER("loinc"),U)
"RTN","HMPDRA",133,0)
 K ^TMP($J,"RAE3",DFN),^TMP($J,"RAE2",DFN)
"RTN","HMPDRA",134,0)
 Q
"RTN","HMPDRA",135,0)
 ;
"RTN","HMPDRA",136,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDRA",137,0)
 ;
"RTN","HMPDRA",138,0)
XML(EXAM) ; -- Return exams as XML
"RTN","HMPDRA",139,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDRA",140,0)
 D ADD("<radiology>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDRA",141,0)
 S ATT="" F  S ATT=$O(EXAM(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDRA",142,0)
 . S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^status^Z",1:"code^name^Z")
"RTN","HMPDRA",143,0)
 . I $O(EXAM(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDRA",144,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDRA",145,0)
 .. S I=0 F  S I=$O(EXAM(ATT,I)) Q:I<1  D
"RTN","HMPDRA",146,0)
 ... S X=$G(EXAM(ATT,I))
"RTN","HMPDRA",147,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDRA",148,0)
 ... S X=$G(EXAM(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDRA",149,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDRA",150,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDRA",151,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDRA",152,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDRA",153,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDRA",154,0)
 . S X=$G(EXAM(ATT)),Y="" Q:'$L(X)
"RTN","HMPDRA",155,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDRA",156,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDRA",157,0)
 D ADD("</radiology>")
"RTN","HMPDRA",158,0)
 Q
"RTN","HMPDRA",159,0)
 ;
"RTN","HMPDRA",160,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDRA",161,0)
 N STR,P,TAG S STR=""
"RTN","HMPDRA",162,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDRA",163,0)
 Q STR
"RTN","HMPDRA",164,0)
 ;
"RTN","HMPDRA",165,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDRA",166,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDRA",167,0)
 S @HMP@(HMPI)=X
"RTN","HMPDRA",168,0)
 Q
"RTN","HMPDSDAM")
0^14^B21275067^B21275067
"RTN","HMPDSDAM",1,0)
HMPDSDAM ;SLC/MKB,ASMR/RRB,BL - Appointment extract;8/2/11  15:29
"RTN","HMPDSDAM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDSDAM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDSDAM",4,0)
 ;
"RTN","HMPDSDAM",5,0)
 ; External References          DBIA#
"RTN","HMPDSDAM",6,0)
 ; -------------------          -----
"RTN","HMPDSDAM",7,0)
 ; ^DGS(41.1                     3796
"RTN","HMPDSDAM",8,0)
 ; ^DIC(42                      10039
"RTN","HMPDSDAM",9,0)
 ; ^SC                          10040
"RTN","HMPDSDAM",10,0)
 ; ^VA(200                      10060
"RTN","HMPDSDAM",11,0)
 ; DIQ                           2056
"RTN","HMPDSDAM",12,0)
 ; SDAMA301                      4433
"RTN","HMPDSDAM",13,0)
 Q
"RTN","HMPDSDAM",14,0)
 ; ------------ Get appointment(s) from VistA ------------
"RTN","HMPDSDAM",15,0)
 ;
"RTN","HMPDSDAM",16,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's [future] appointments
"RTN","HMPDSDAM",17,0)
 N HMPX,HMPNUM,HMPDT,HMPCNT,HMPITM,HMPA,X
"RTN","HMPDSDAM",18,0)
 S DFN=+$G(DFN) Q:DFN<1
"RTN","HMPDSDAM",19,0)
 S BEG=$G(BEG,DT),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDSDAM",20,0)
 S HMPX(1)=BEG_";"_END,HMPX(4)=DFN,HMPX("FLDS")="1;2;3;10;13",HMPX("SORT")="P"
"RTN","HMPDSDAM",21,0)
 ;
"RTN","HMPDSDAM",22,0)
 ; get one appt
"RTN","HMPDSDAM",23,0)
 I $L($G(ID)) D  Q
"RTN","HMPDSDAM",24,0)
 . S (BEG,END)=$P(ID,";",2),HMPX(1)=BEG_";"_END,HMPX(2)=$P(ID,";",3)
"RTN","HMPDSDAM",25,0)
 . S HMPNUM=$$SDAPI^SDAMA301(.HMPX) Q:HMPNUM<1
"RTN","HMPDSDAM",26,0)
 . D EN1(BEG,.HMPITM),XML(.HMPITM)
"RTN","HMPDSDAM",27,0)
 . K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDSDAM",28,0)
 ;
"RTN","HMPDSDAM",29,0)
 ; get all [future] appointments
"RTN","HMPDSDAM",30,0)
 S HMPX(3)="R;I;NS;NSR;NT" ;no cancelled appt's
"RTN","HMPDSDAM",31,0)
 S HMPNUM=$$SDAPI^SDAMA301(.HMPX),(HMPDT,HMPCNT)=0
"RTN","HMPDSDAM",32,0)
 F  S HMPDT=$O(^TMP($J,"SDAMA301",DFN,HMPDT)) Q:HMPDT<1  D  Q:HMPCNT'<MAX
"RTN","HMPDSDAM",33,0)
 . S X=$P($G(^TMP($J,"SDAMA301",DFN,HMPDT)),U,3)
"RTN","HMPDSDAM",34,0)
 . I HMPDT<DT,$P(X,";")'["NS" Q   ;no prior kept appt's
"RTN","HMPDSDAM",35,0)
 . K HMPITM D EN1(HMPDT,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDSDAM",36,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDSDAM",37,0)
 K ^TMP($J,"SDAMA301",DFN)
"RTN","HMPDSDAM",38,0)
 ;
"RTN","HMPDSDAM",39,0)
 ; get scheduled admissions
"RTN","HMPDSDAM",40,0)
 S HMPA=0 F  S HMPA=$O(^DGS(41.1,"B",DFN,HMPA)) Q:HMPA<1  D  Q:HMPCNT'<MAX  ;ICR 3796 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",41,0)
 . S HMPX=$G(^DGS(41.1,HMPA,0))
"RTN","HMPDSDAM",42,0)
 . Q:$P(HMPX,U,13)  Q:$P(HMPX,U,17)  ;cancelled or admitted
"RTN","HMPDSDAM",43,0)
 . S X=$P(HMPX,U,2) Q:X<BEG!(X>END)  ;out of date range
"RTN","HMPDSDAM",44,0)
 . K HMPITM D DGS(HMPA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDSDAM",45,0)
 . D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDSDAM",46,0)
 Q
"RTN","HMPDSDAM",47,0)
 ;
"RTN","HMPDSDAM",48,0)
EN1(DATE,APPT) ; -- return an appointment in APPT("attribute")=value
"RTN","HMPDSDAM",49,0)
 ;  Expects ^TMP($J,"SDAMA301",DFN,DATE)
"RTN","HMPDSDAM",50,0)
 N X,HLOC,STS,CLS,SV,PRV K APPT
"RTN","HMPDSDAM",51,0)
 S X=$G(^TMP($J,"SDAMA301",DFN,DATE))
"RTN","HMPDSDAM",52,0)
 S DATE=+$G(DATE),HLOC=$P(X,U,2),APPT("type")=$TR($P(X,U,10),";","^")
"RTN","HMPDSDAM",53,0)
 S STS=$P(X,U,3),CLS=$S($E(STS)="I":"I",1:"O")
"RTN","HMPDSDAM",54,0)
 S APPT("id")="A;"_DATE_";"_+HLOC,APPT("dateTime")=DATE I HLOC D
"RTN","HMPDSDAM",55,0)
 . S APPT("location")=$P(HLOC,";",2)
"RTN","HMPDSDAM",56,0)
 . S APPT("clinicStop")=$$AMIS^HMPDVSIT(+$P(X,U,13))
"RTN","HMPDSDAM",57,0)
 . S SV=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDSDAM",58,0)
 . I SV S APPT("service")=$$SERV(SV)
"RTN","HMPDSDAM",59,0)
 . ;find default provider
"RTN","HMPDSDAM",60,0)
 . S PRV=+$$GET1^DIQ(44,+HLOC_",",16,"I") I 'PRV D
"RTN","HMPDSDAM",61,0)
 .. N HMPP,I,FIRST
"RTN","HMPDSDAM",62,0)
 .. D GETS^DIQ(44,+HLOC_",","2600*","I","HMPP")
"RTN","HMPDSDAM",63,0)
 .. S FIRST=$O(HMPP(44.1,"")),I=""
"RTN","HMPDSDAM",64,0)
 .. F  S I=$O(HMPP(44.1,I)) Q:I=""  I $G(HMPP(44.1,I,.02,"I")) S PRV=$G(HMPP(44.1,I,.01,"I")) Q
"RTN","HMPDSDAM",65,0)
 .. I 'PRV,FIRST S PRV=$G(HMPP(44.1,FIRST,.01,"I"))
"RTN","HMPDSDAM",66,0)
 . I PRV S APPT("provider")=PRV_U_$P($G(^VA(200,PRV,0)),U) Q  ;ICR 10060 DEE2818 ASF 11/20/15
"RTN","HMPDSDAM",67,0)
 S APPT("facility")=$$FAC^HMPD(+HLOC)
"RTN","HMPDSDAM",68,0)
 S APPT("patientClass")=$S(CLS="I":"IMP",1:"AMB")
"RTN","HMPDSDAM",69,0)
 S APPT("serviceCategory")=$S(CLS="I":"I^INPATIENT VISIT",1:"A^AMBULATORY")
"RTN","HMPDSDAM",70,0)
 S APPT("apptStatus")=$P(STS,";",2)
"RTN","HMPDSDAM",71,0)
 S APPT("visitString")=+HLOC_";"_DATE_";A"
"RTN","HMPDSDAM",72,0)
 Q
"RTN","HMPDSDAM",73,0)
 ;
"RTN","HMPDSDAM",74,0)
SERV(FTS) ; -- Return #42.4 Service for a Facility Treating Specialty
"RTN","HMPDSDAM",75,0)
 N Y S Y="",FTS=+$G(FTS)
"RTN","HMPDSDAM",76,0)
 S Y=$$GET1^DIQ(45.7,FTS_",","1:3","E")
"RTN","HMPDSDAM",77,0)
 Q Y
"RTN","HMPDSDAM",78,0)
 ;
"RTN","HMPDSDAM",79,0)
DGS(IFN,ADM) ; -- return a scheduled admission in ADM("attribute")=value
"RTN","HMPDSDAM",80,0)
 N X0,DATE,HLOC,SV,X K ADM
"RTN","HMPDSDAM",81,0)
 S X0=$G(^DGS(41.1,+$G(IFN),0)) Q:X0=""  ;deleted ICR 3796 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",82,0)
 S DATE=+$P(X0,U,2),HLOC=+$G(^DIC(42,+$P(X0,U,8),44)) ;ICR 10039 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",83,0)
 S ADM("id")="H;"_DATE,ADM("dateTime")=DATE I HLOC D
"RTN","HMPDSDAM",84,0)
 . S ADM("id")=ADM("id")_";"_HLOC,ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDSDAM",85,0)
 . S ADM("location")=HLOC_U_$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/20/15
"RTN","HMPDSDAM",86,0)
 . S X=$$GET1^DIQ(44,HLOC_",",8,"I"),ADM("clinicStop")=$$AMIS^HMPDVSIT(X)
"RTN","HMPDSDAM",87,0)
 . S SV=$$GET1^DIQ(44,HLOC_",",9.5,"I")
"RTN","HMPDSDAM",88,0)
 . I SV S ADM("service")=$$SERV(SV)
"RTN","HMPDSDAM",89,0)
 S ADM("facility")=$$FAC^HMPD(HLOC)
"RTN","HMPDSDAM",90,0)
 S X=$P(X0,U,5) I X S ADM("provider")=X_U_$P($G(^VA(200,X,0)),U) ;ICR 10060 DEE2818 ASF 11/20/15
"RTN","HMPDSDAM",91,0)
 S ADM("patientClass")="IMP",ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDSDAM",92,0)
 S ADM("apptStatus")=$S($P(X0,U,17):"ADMITTED",$P(X0,U,13):"CANCELLED",1:"SCHEDULED")
"RTN","HMPDSDAM",93,0)
 Q
"RTN","HMPDSDAM",94,0)
 ;
"RTN","HMPDSDAM",95,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDSDAM",96,0)
 ;
"RTN","HMPDSDAM",97,0)
XML(APPT) ; -- Return appointment as XML
"RTN","HMPDSDAM",98,0)
 N ATT,X,Y,NAMES
"RTN","HMPDSDAM",99,0)
 D ADD("<appointment>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDSDAM",100,0)
 S ATT="" F  S ATT=$O(APPT(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDSDAM",101,0)
 . S X=$G(APPT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDSDAM",102,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDSDAM",103,0)
 . I $L(X)>1 S NAMES="code^name^Z",Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDSDAM",104,0)
 D ADD("</appointment>")
"RTN","HMPDSDAM",105,0)
 Q
"RTN","HMPDSDAM",106,0)
 ;
"RTN","HMPDSDAM",107,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDSDAM",108,0)
 N STR,P,TAG S STR=""
"RTN","HMPDSDAM",109,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDSDAM",110,0)
 Q STR
"RTN","HMPDSDAM",111,0)
 ;
"RTN","HMPDSDAM",112,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDSDAM",113,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDSDAM",114,0)
 S @HMP@(HMPI)=X
"RTN","HMPDSDAM",115,0)
 Q
"RTN","HMPDSR")
0^48^B30234447^B30022036
"RTN","HMPDSR",1,0)
HMPDSR ;SLC/MKB,ASMR/RRB - Surgical Procedures;Aug 29, 2016 20:06:27
"RTN","HMPDSR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDSR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDSR",4,0)
 ;
"RTN","HMPDSR",5,0)
 ; External References          DBIA#
"RTN","HMPDSR",6,0)
 ; -------------------          -----
"RTN","HMPDSR",7,0)
 ; ^SRF(130                      5675
"RTN","HMPDSR",8,0)
 ; ^SRO(136                      4872
"RTN","HMPDSR",9,0)
 ; DIQ                           2056
"RTN","HMPDSR",10,0)
 ; ICPTCOD                       1995
"RTN","HMPDSR",11,0)
 ; ICPTMOD                       1996
"RTN","HMPDSR",12,0)
 ; SROESTV                       3533
"RTN","HMPDSR",13,0)
 Q
"RTN","HMPDSR",14,0)
 ; ------------ Get surgery(ies) from VistA ------------
"RTN","HMPDSR",15,0)
 ;
"RTN","HMPDSR",16,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's surgeries
"RTN","HMPDSR",17,0)
 N HMPN,HMPCNT,HMPITM,HMPY
"RTN","HMPDSR",18,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDSR",19,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDSR",20,0)
 ;
"RTN","HMPDSR",21,0)
 ; get one surgery
"RTN","HMPDSR",22,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDSR",23,0)
 ;
"RTN","HMPDSR",24,0)
 ; get all surgeries
"RTN","HMPDSR",25,0)
 Q:'$L($T(LIST^SROESTV))
"RTN","HMPDSR",26,0)
 N SHOWADD S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDSR",27,0)
 D LIST^SROESTV(.HMPY,DFN,BEG,END,MAX,1)
"RTN","HMPDSR",28,0)
 S HMPN=0 F  S HMPN=$O(@HMPY@(HMPN)) Q:HMPN<1  D
"RTN","HMPDSR",29,0)
 . K HMPITM D ONE(HMPN,.HMPITM)
"RTN","HMPDSR",30,0)
 . I $D(HMPITM) D XML(.HMPITM)
"RTN","HMPDSR",31,0)
 K @HMPY
"RTN","HMPDSR",32,0)
ENQ ; end
"RTN","HMPDSR",33,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDSR",34,0)
 Q
"RTN","HMPDSR",35,0)
 ;
"RTN","HMPDSR",36,0)
ONE(NUM,SURG) ; -- return a surgery in SURG("attribute")=value
"RTN","HMPDSR",37,0)
 ;  Expects DFN, @HMPY@(NUM) from LIST^SROESTV
"RTN","HMPDSR",38,0)
 N IEN,HMPX,X,Y,I,HMPMOD,HMPOTH
"RTN","HMPDSR",39,0)
 K SURG,^TMP("HMPTEXT",$J)
"RTN","HMPDSR",40,0)
 S HMPX=$G(@HMPY@(NUM)),IEN=+$P(HMPX,U) Q:IEN<1
"RTN","HMPDSR",41,0)
 S SURG("id")=IEN,X=$P(HMPX,U,2),SURG("status")="COMPLETED"
"RTN","HMPDSR",42,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("status")="ABORTED"
"RTN","HMPDSR",43,0)
 S SURG("name")=X,SURG("dateTime")=$P(HMPX,U,3)
"RTN","HMPDSR",44,0)
 S X=$P(HMPX,U,4) S:X SURG("provider")=$TR(X,";","^")
"RTN","HMPDSR",45,0)
 S X=$$GET1^DIQ(130,IEN_",",50,"I"),SURG("facility")=$$FAC^HMPD(X)
"RTN","HMPDSR",46,0)
 S SURG("encounter")=$$GET1^DIQ(130,IEN_",",.015,"I")
"RTN","HMPDSR",47,0)
 S X=$$GET1^DIQ(136,IEN_",",.02,"I") I X D
"RTN","HMPDSR",48,0)
 . S SURG("type")=$$CPT(X)
"RTN","HMPDSR",49,0)
 . D GETS^DIQ(136,IEN_",","1*","I","HMPMOD") ;CPT modifiers
"RTN","HMPDSR",50,0)
 . S I="" F  S I=$O(HMPMOD(136.01,I)) Q:I=""  D
"RTN","HMPDSR",51,0)
 .. S X=+$G(HMPMOD(136.01,I,.01,"I")),Y=$$MOD^ICPTMOD(X,"I")
"RTN","HMPDSR",52,0)
 .. S SURG("modifier",+I)=$P(Y,U,2,3)
"RTN","HMPDSR",53,0)
 D GETS^DIQ(136,IEN_",","3*","I","HMPOTH") ;other procedures
"RTN","HMPDSR",54,0)
 S I="" F  S I=$O(HMPOTH(136.03,I)) Q:I=""  D
"RTN","HMPDSR",55,0)
 . S X=+$G(HMPOTH(136.03,I,.01,"I")) Q:'X
"RTN","HMPDSR",56,0)
 . S SURG("otherProcedure",+I)=$$CPT(X)
"RTN","HMPDSR",57,0)
 S I=0 F  S I=$O(@HMPY@(NUM,I)) Q:I<1  S X=$G(@HMPY@(NUM,I)) I X D
"RTN","HMPDSR",58,0)
 . N LT,NT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","HMPDSR",59,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501")
"RTN","HMPDSR",60,0)
 . S SURG("document",I)=+X_U_LT_U_NT
"RTN","HMPDSR",61,0)
 . S:$G(HMPTEXT) SURG("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDSR",62,0)
 . I LT["OPERATION REPORT"!(LT["PROCEDURE REPORT") S SURG("opReport")=+X_U_LT_U_NT
"RTN","HMPDSR",63,0)
 S SURG("category")="SR"
"RTN","HMPDSR",64,0)
 Q
"RTN","HMPDSR",65,0)
 ;
"RTN","HMPDSR",66,0)
EN1(IEN,SURG) ; -- return a surgery in SURG("attribute")=value
"RTN","HMPDSR",67,0)
 N HMPX,HMPY,X,Y,I,HMPMOD,HMPOTH,SHOWADD
"RTN","HMPDSR",68,0)
 K SURG,^TMP("HMPTEXT",$J)
"RTN","HMPDSR",69,0)
 S SHOWADD=1 ;to omit leading '+' with note titles
"RTN","HMPDSR",70,0)
 D ONE^SROESTV("HMPY",IEN) S HMPX=$G(HMPY(IEN)) Q:HMPX=""
"RTN","HMPDSR",71,0)
 S SURG("id")=IEN,X=$P(HMPX,U,2),SURG("status")="COMPLETED"
"RTN","HMPDSR",72,0)
 I X?1"* Aborted * ".E S X=$E(X,13,999),SURG("status")="ABORTED"
"RTN","HMPDSR",73,0)
 S SURG("name")=X,SURG("dateTime")=$P(HMPX,U,3)
"RTN","HMPDSR",74,0)
 S X=$P(HMPX,U,4) S:X SURG("provider")=$TR(X,";","^")
"RTN","HMPDSR",75,0)
 S X=$$GET1^DIQ(130,IEN_",",50,"I"),SURG("facility")=$$FAC^HMPD(X)
"RTN","HMPDSR",76,0)
 S SURG("encounter")=$$GET1^DIQ(130,IEN_",",.015,"I")
"RTN","HMPDSR",77,0)
 S X=$$GET1^DIQ(136,IEN_",",.02,"I") I X D
"RTN","HMPDSR",78,0)
 . S SURG("type")=$$CPT(X)
"RTN","HMPDSR",79,0)
 . D GETS^DIQ(136,IEN_",","1*","I","HMPMOD") ;CPT modifiers
"RTN","HMPDSR",80,0)
 . S I="" F  S I=$O(HMPMOD(136.01,I)) Q:I=""  D
"RTN","HMPDSR",81,0)
 .. S X=+$G(HMPMOD(136.01,I,.01,"I")),Y=$$MOD^ICPTMOD(X,"I")
"RTN","HMPDSR",82,0)
 .. S SURG("modifier",+I)=$P(Y,U,2,3)
"RTN","HMPDSR",83,0)
 D GETS^DIQ(136,IEN_",","3*","I","HMPOTH") ;other procedures
"RTN","HMPDSR",84,0)
 S I="" F  S I=$O(HMPOTH(136.03,I)) Q:I=""  D
"RTN","HMPDSR",85,0)
 . S X=+$G(HMPOTH(136.03,I,.01,"I")) Q:'X
"RTN","HMPDSR",86,0)
 . S SURG("otherProcedure",+I)=$$CPT(X)
"RTN","HMPDSR",87,0)
 S I=0 F  S I=$O(HMPY(IEN,I)) Q:I<1  S X=$G(HMPY(IEN,I)) I X D
"RTN","HMPDSR",88,0)
 . N LT,NT S LT=$P(X,U,2) Q:$P(LT," ")="Addendum"
"RTN","HMPDSR",89,0)
 . S NT=$$GET1^DIQ(8925,+X_",",".01:1501")
"RTN","HMPDSR",90,0)
 . S SURG("document",I)=+X_U_LT_U_NT
"RTN","HMPDSR",91,0)
 . S:$G(HMPTEXT) SURG("document",I,"content")=$$TEXT^HMPDTIU(+X)
"RTN","HMPDSR",92,0)
 . I LT["OPERATION REPORT"!(LT["PROCEDURE REPORT") S SURG("opReport")=+X_U_LT_U_NT
"RTN","HMPDSR",93,0)
 S SURG("category")="SR"
"RTN","HMPDSR",94,0)
 Q
"RTN","HMPDSR",95,0)
 ;
"RTN","HMPDSR",96,0)
CPT(IEN) ; -- return code^description for CPT code, or "^" if error
"RTN","HMPDSR",97,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDSR",98,0)
 S X0=$$CPT^ICPTCOD(IEN) I X0<0 Q "^"
"RTN","HMPDSR",99,0)
 S Y=$P(X0,U,2,3)                  ;CPT Code^Short Name
"RTN","HMPDSR",100,0)
 S N=$$CPTD^ICPTCOD($P(Y,U),"HMPX") ;CPT Description
"RTN","HMPDSR",101,0)
 I N>0,$L($G(HMPX(1))) D
"RTN","HMPDSR",102,0)
 . S X=$G(HMPX(1)),I=1
"RTN","HMPDSR",103,0)
 . F  S I=$O(HMPX(I)) Q:I<1  Q:HMPX(I)=" "  S X=X_" "_HMPX(I)
"RTN","HMPDSR",104,0)
 . S $P(Y,U,2)=X
"RTN","HMPDSR",105,0)
 Q Y
"RTN","HMPDSR",106,0)
 ;
"RTN","HMPDSR",107,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDSR",108,0)
 ;
"RTN","HMPDSR",109,0)
XML(SURG) ; -- Return surgery as XML
"RTN","HMPDSR",110,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDSR",111,0)
 D ADD("<surgery>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDSR",112,0)
 S ATT="" F  S ATT=$O(SURG(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDSR",113,0)
 . I $O(SURG(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDSR",114,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDSR",115,0)
 .. S I=0 F  S I=$O(SURG(ATT,I)) Q:I<1  D
"RTN","HMPDSR",116,0)
 ... S X=$G(SURG(ATT,I)),NAMES=""
"RTN","HMPDSR",117,0)
 ... S NAMES=$S(ATT="document":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDSR",118,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDSR",119,0)
 ... S X=$G(SURG(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDSR",120,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDSR",121,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDSR",122,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDSR",123,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDSR",124,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDSR",125,0)
 . S X=$G(SURG(ATT)),Y="" Q:'$L(X)
"RTN","HMPDSR",126,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDSR",127,0)
 . S NAMES=$S(ATT="opReport":"id^localTitle^nationalTitle^Z",1:"code^name^Z")
"RTN","HMPDSR",128,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDSR",129,0)
 D ADD("</surgery>")
"RTN","HMPDSR",130,0)
 Q
"RTN","HMPDSR",131,0)
 ;
"RTN","HMPDSR",132,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDSR",133,0)
 N STR,P,TAG S STR=""
"RTN","HMPDSR",134,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDSR",135,0)
 Q STR
"RTN","HMPDSR",136,0)
 ;
"RTN","HMPDSR",137,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDSR",138,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDSR",139,0)
 S @HMP@(HMPI)=X
"RTN","HMPDSR",140,0)
 Q
"RTN","HMPDVSIT")
0^9^B97239947^B93496568
"RTN","HMPDVSIT",1,0)
HMPDVSIT ;SLC/MKB,ASMR/RRB,BL - Visit/Encounter extract;Aug 29, 2016 20:06:27
"RTN","HMPDVSIT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPDVSIT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPDVSIT",4,0)
 ;
"RTN","HMPDVSIT",5,0)
 ; External References          DBIA#
"RTN","HMPDVSIT",6,0)
 ; -------------------          -----
"RTN","HMPDVSIT",7,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPDVSIT",8,0)
 ; ^DIC(40.7                      557
"RTN","HMPDVSIT",9,0)
 ; ^DIC(42                      10039
"RTN","HMPDVSIT",10,0)
 ; ^DIC(45.7                     1154
"RTN","HMPDVSIT",11,0)
 ; ^DPT(                        10035
"RTN","HMPDVSIT",12,0)
 ; ^SC                          10040
"RTN","HMPDVSIT",13,0)
 ; ^VA(200                      10060
"RTN","HMPDVSIT",14,0)
 ; DGPTFAPI                      3157
"RTN","HMPDVSIT",15,0)
 ; DIC                           2051
"RTN","HMPDVSIT",16,0)
 ; DILFD                         2055
"RTN","HMPDVSIT",17,0)
 ; DIQ                           2056
"RTN","HMPDVSIT",18,0)
 ; ICDEX                         5747
"RTN","HMPDVSIT",19,0)
 ; ICPTCOD                       1995
"RTN","HMPDVSIT",20,0)
 ; PXAPI,^TMP("PXKENC",$J        1894
"RTN","HMPDVSIT",21,0)
 ; SDOE                          2546
"RTN","HMPDVSIT",22,0)
 ; VADPT                        10061
"RTN","HMPDVSIT",23,0)
 ; VADPT2                         325
"RTN","HMPDVSIT",24,0)
 ; XUAF4                         2171
"RTN","HMPDVSIT",25,0)
 Q
"RTN","HMPDVSIT",26,0)
 ; ------------ Get encounter(s) from VistA ------------
"RTN","HMPDVSIT",27,0)
 ;
"RTN","HMPDVSIT",28,0)
EN(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments
"RTN","HMPDVSIT",29,0)
 N HMPCNT,HMPITM,HMPDT,HMPLOC,HMPDA
"RTN","HMPDVSIT",30,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDVSIT",31,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",32,0)
 ;
"RTN","HMPDVSIT",33,0)
 ; get one visit
"RTN","HMPDVSIT",34,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) G ENQ
"RTN","HMPDVSIT",35,0)
 ;
"RTN","HMPDVSIT",36,0)
 ; -- get all visits
"RTN","HMPDVSIT",37,0)
 I END,END'["." S END=END_".24" ;assume end of day
"RTN","HMPDVSIT",38,0)
 S HMPCNT=0
"RTN","HMPDVSIT",39,0)
 ;F  S IDX=$Q(@IDX,-1) Q:DFN'=$P(IDX,",",2)  Q:$P(IDX,",",3)<BEG  I $P(IDX,",",5)["P" D
"RTN","HMPDVSIT",40,0)
 S HMPDT=END F  S HMPDT=$O(^AUPNVSIT("AET",DFN,HMPDT),-1)  Q:HMPDT<BEG  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",41,0)
 . S HMPLOC=0 F  S HMPLOC=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC)) Q:HMPLOC<1  D
"RTN","HMPDVSIT",42,0)
 .. S HMPDA=0 F  S HMPDA=$O(^AUPNVSIT("AET",DFN,HMPDT,HMPLOC,"P",HMPDA)) Q:HMPDA<1  D
"RTN","HMPDVSIT",43,0)
 ... K HMPITM D EN1(HMPDA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",44,0)
 ... D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",45,0)
ENQ ; end
"RTN","HMPDVSIT",46,0)
 K ^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",47,0)
 Q
"RTN","HMPDVSIT",48,0)
 ;
"RTN","HMPDVSIT",49,0)
ENAA(DFN,BEG,END,MAX,ID) ; -- find patient's visits and appointments [AA]
"RTN","HMPDVSIT",50,0)
 N IDT,DA,HMPCNT,HMPITM
"RTN","HMPDVSIT",51,0)
 S DFN=+$G(DFN) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPDVSIT",52,0)
 S BEG=$G(BEG,1410101),END=$G(END,4141015),MAX=$G(MAX,9999)
"RTN","HMPDVSIT",53,0)
 I $G(ID) D EN1(ID,.HMPITM),XML(.HMPITM) Q  ;one visit
"RTN","HMPDVSIT",54,0)
 D IDT S HMPCNT=0
"RTN","HMPDVSIT",55,0)
 S IDT=BEG F  S IDT=$O(^AUPNVSIT("AA",DFN,IDT)) Q:IDT<1!(IDT>END)  D  Q:HMPCNT'<MAX  ;ICR 2028 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",56,0)
 . S DA=0 F  S DA=$O(^AUPNVSIT("AA",DFN,IDT,DA)) Q:DA<1  D
"RTN","HMPDVSIT",57,0)
 .. K HMPITM D EN1(DA,.HMPITM) Q:'$D(HMPITM)
"RTN","HMPDVSIT",58,0)
 .. D XML(.HMPITM) S HMPCNT=HMPCNT+1
"RTN","HMPDVSIT",59,0)
 Q
"RTN","HMPDVSIT",60,0)
IDT ; -- invert BEG and END dates for visit format:
"RTN","HMPDVSIT",61,0)
 ;  IDT=(9999999-$P(VDT,"."))_"."_$P(VDT,".",2)
"RTN","HMPDVSIT",62,0)
 N X S X=BEG
"RTN","HMPDVSIT",63,0)
 S BEG=(9999999-$P(END,"."))
"RTN","HMPDVSIT",64,0)
 S END=(9999999-$P(X,"."))_".2359"
"RTN","HMPDVSIT",65,0)
 Q
"RTN","HMPDVSIT",66,0)
 ;
"RTN","HMPDVSIT",67,0)
EN1(IEN,VST) ; -- return a visit in VST("attribute")=value
"RTN","HMPDVSIT",68,0)
 N X0,X15,X,FAC,LOC,CATG,INPT,DA
"RTN","HMPDVSIT",69,0)
 K VST,^TMP("HMPTEXT",$J)
"RTN","HMPDVSIT",70,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid
"RTN","HMPDVSIT",71,0)
 D ENCEVENT^PXAPI(IEN)
"RTN","HMPDVSIT",72,0)
 S X0=$G(^TMP("PXKENC",$J,IEN,"VST",IEN,0)),X15=$G(^(150))
"RTN","HMPDVSIT",73,0)
 Q:$P(X15,U,3)'="P"  Q:$P(X0,U,7)="E"  ;want primary, not historical
"RTN","HMPDVSIT",74,0)
 I $P(X0,U,7)="H" D ADM(IEN,+X0,.VST) Q
"RTN","HMPDVSIT",75,0)
 S VST("id")=IEN,VST("dateTime")=+X0
"RTN","HMPDVSIT",76,0)
 S FAC=+$P(X0,U,6),CATG=$P(X0,U,7),LOC=+$P(X0,U,22)
"RTN","HMPDVSIT",77,0)
 S:FAC VST("facility")=$$STA^XUAF4(FAC)_U_$P($$NS^XUAF4(FAC),U)
"RTN","HMPDVSIT",78,0)
 S:'FAC VST("facility")=$$FAC^HMPD(LOC)
"RTN","HMPDVSIT",79,0)
 S VST("serviceCategory")=CATG_U_$$CATG(CATG)
"RTN","HMPDVSIT",80,0)
 S VST("visitString")=LOC_";"_+X0_";"_CATG
"RTN","HMPDVSIT",81,0)
 S INPT=$P(X15,U,2) S:INPT="" INPT=$S("H^I^R^D"[CATG:1,1:0)
"RTN","HMPDVSIT",82,0)
 S X=$$CPT(IEN) S:X VST("type")=$P($$CPT^ICPTCOD(X),U,2,3)
"RTN","HMPDVSIT",83,0)
 I 'X S VST("type")=U_$S('INPT&LOC:$P($G(^SC(LOC,0)),U)_" VISIT",1:$$CATG(CATG)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",84,0)
 S VST("patientClass")=$S(INPT:"IMP",1:"AMB")
"RTN","HMPDVSIT",85,0)
 S X=$P(X0,U,8) S:X VST("stopCode")=$$AMIS(X) I LOC D
"RTN","HMPDVSIT",86,0)
 . N L0 S L0=$G(^SC(LOC,0)) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",87,0)
 . I 'X S VST("stopCode")=$$AMIS($P(L0,U,7))
"RTN","HMPDVSIT",88,0)
 . S VST("location")=$P(L0,U),VST("service")=$$SERV($P(L0,U,20))
"RTN","HMPDVSIT",89,0)
 . S X=$P(L0,U,18) S:X VST("creditStopCode")=$$AMIS(X)
"RTN","HMPDVSIT",90,0)
 S VST("reason")=$$POV(IEN)
"RTN","HMPDVSIT",91,0)
 ; provider(s)
"RTN","HMPDVSIT",92,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,IEN,"PRV",DA)) Q:DA<1  S X0=$G(^(DA,0)) D
"RTN","HMPDVSIT",93,0)
 . S VST("provider",DA)=+X0_U_$P($G(^VA(200,+X0,0)),U)_$S($P(X0,U,4)="P":"^P^1",1:"^S^") ;ICR 10060 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",94,0)
 ; note(s)
"RTN","HMPDVSIT",95,0)
 D TIU(IEN)
"RTN","HMPDVSIT",96,0)
 K ^TMP("PXKENC",$J,IEN)
"RTN","HMPDVSIT",97,0)
 Q
"RTN","HMPDVSIT",98,0)
 ;
"RTN","HMPDVSIT",99,0)
TIU(VISIT) ; -- add notes to VST("document")
"RTN","HMPDVSIT",100,0)
 N X,Y,I,HMPX,LT,NT,DA,CNT,HMPY
"RTN","HMPDVSIT",101,0)
 D FIND^DIC(8925,,.01,"QX",+$G(VISIT),,"V",,,"HMPX")
"RTN","HMPDVSIT",102,0)
 S Y="",(I,CNT)=0
"RTN","HMPDVSIT",103,0)
 F  S I=$O(HMPX("DILIST",1,I)) Q:I<1  D
"RTN","HMPDVSIT",104,0)
 . S LT=$G(HMPX("DILIST","ID",I,.01)) Q:$P(LT," ")="Addendum"
"RTN","HMPDVSIT",105,0)
 . S DA=$G(HMPX("DILIST",2,I))
"RTN","HMPDVSIT",106,0)
 . S NT=$$GET1^DIQ(8925,+DA_",",".01:1501")
"RTN","HMPDVSIT",107,0)
 . S CNT=CNT+1,VST("document",CNT)=DA_U_LT_U_NT
"RTN","HMPDVSIT",108,0)
 . S:$G(HMPTEXT) VST("document",CNT,"content")=$$TEXT^HMPDTIU(DA)
"RTN","HMPDVSIT",109,0)
 Q
"RTN","HMPDVSIT",110,0)
 ;
"RTN","HMPDVSIT",111,0)
POV(VISIT) ; -- return the primary Purpose of Visit as ICD^ProviderNarrative
"RTN","HMPDVSIT",112,0)
 N DA,Y,X,X0,ICD S Y=""
"RTN","HMPDVSIT",113,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"POV",DA)) Q:DA<1  S X0=$G(^(DA,0)) I $P(X0,U,12)="P" D  Q:$L(Y)
"RTN","HMPDVSIT",114,0)
 . S X=+$P(X0,U,4),ICD=$$ICD(+X0)
"RTN","HMPDVSIT",115,0)
 . S Y=ICD_U_$$EXTERNAL^DILFD(9000010.07,.04,,X)
"RTN","HMPDVSIT",116,0)
 Q Y
"RTN","HMPDVSIT",117,0)
 ;
"RTN","HMPDVSIT",118,0)
ICD(IEN) ; -- return code^description for ICD code, or "^" if error
"RTN","HMPDVSIT",119,0)
 N X0,HMPX,N,I,X,Y S IEN=+$G(IEN)
"RTN","HMPDVSIT",120,0)
 S X0=$$ICDDX^ICDEX(IEN) I X0<0 Q "^"  ;Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",121,0)
 S Y=$P(X0,U,2)_U_$P(X0,U,4)       ;ICD Code^Dx name
"RTN","HMPDVSIT",122,0)
 S N=$$ICDD^ICDEX($P(Y,U),"HMPX") ;ICD Description  Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",123,0)
 I N>0,$L($G(HMPX(1))) S $P(Y,U,2)=HMPX(1)
"RTN","HMPDVSIT",124,0)
 Q Y
"RTN","HMPDVSIT",125,0)
 ;
"RTN","HMPDVSIT",126,0)
CPT(VISIT) ; -- Return CPT code of encounter type
"RTN","HMPDVSIT",127,0)
 N DA,Y,X,X0 S Y=""
"RTN","HMPDVSIT",128,0)
 S DA=0 F  S DA=$O(^TMP("PXKENC",$J,VISIT,"CPT",DA)) Q:DA<1  S X0=$G(^(DA,0)) D  Q:$L(Y)
"RTN","HMPDVSIT",129,0)
 . S X=$P(X0,U) I X?1"992"2N S Y=X Q
"RTN","HMPDVSIT",130,0)
 Q Y
"RTN","HMPDVSIT",131,0)
 ;
"RTN","HMPDVSIT",132,0)
AMIS(X) ; -- return the AMIS code^name of Credit Stop X
"RTN","HMPDVSIT",133,0)
 N Y,X0 S Y=""
"RTN","HMPDVSIT",134,0)
 S X0=$G(^DIC(40.7,+$G(X),0)) S:$L(X0) Y=$P(X0,U,2)_U_$P(X0,U) ;ICR 557 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",135,0)
 Q Y
"RTN","HMPDVSIT",136,0)
 ;
"RTN","HMPDVSIT",137,0)
CATG(X) ; -- Return name of visit Service Category code X
"RTN","HMPDVSIT",138,0)
 N Y S Y=""
"RTN","HMPDVSIT",139,0)
 I X="A" S Y="AMBULATORY"
"RTN","HMPDVSIT",140,0)
 I X="H" S Y="HOSPITALIZATION"
"RTN","HMPDVSIT",141,0)
 I X="I" S Y="IN HOSPITAL"
"RTN","HMPDVSIT",142,0)
 I X="C" S Y="CHART REVIEW"
"RTN","HMPDVSIT",143,0)
 I X="T" S Y="TELECOMMUNICATIONS"
"RTN","HMPDVSIT",144,0)
 I X="N" S Y="NOT FOUND"
"RTN","HMPDVSIT",145,0)
 I X="S" S Y="DAY SURGERY"
"RTN","HMPDVSIT",146,0)
 I X="O" S Y="OBSERVATION"
"RTN","HMPDVSIT",147,0)
 I X="E" S Y="EVENT (HISTORICAL)"
"RTN","HMPDVSIT",148,0)
 I X="R" S Y="NURSING HOME"
"RTN","HMPDVSIT",149,0)
 I X="D" S Y="DAILY HOSPITALIZATION DATA"
"RTN","HMPDVSIT",150,0)
 I X="X" S Y="ANCILLARY PACKAGE DAILY DATA"
"RTN","HMPDVSIT",151,0)
 Q Y
"RTN","HMPDVSIT",152,0)
 ;
"RTN","HMPDVSIT",153,0)
SERV(FTS) ; -- Return #42.4 Service for a Facility Treating Specialty
"RTN","HMPDVSIT",154,0)
 N Y S Y="",FTS=+$G(FTS)
"RTN","HMPDVSIT",155,0)
 S Y=$$GET1^DIQ(45.7,FTS_",","1:3","E")
"RTN","HMPDVSIT",156,0)
 Q Y
"RTN","HMPDVSIT",157,0)
 ;
"RTN","HMPDVSIT",158,0)
ADM(IEN,DATE,ADM) ; -- return an admission in ADM("attribute")=value
"RTN","HMPDVSIT",159,0)
 N VAINDT,VADMVT,VAIP,VAIN,VAERR,HLOC,ICD,I K ADM
"RTN","HMPDVSIT",160,0)
 S IEN=+$G(IEN),DATE=+$G(DATE) Q:IEN<1  Q:DATE<1
"RTN","HMPDVSIT",161,0)
 S VAINDT=DATE D ADM^VADPT2 Q:VADMVT<1
"RTN","HMPDVSIT",162,0)
 I VADMVT=$G(^DPT(DFN,.105)) D INPT Q  ;current inpatient ICR 10035 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",163,0)
 S VAIP("E")=VADMVT D IN5^VADPT Q:'$G(VAIP(1))  ;deleted
"RTN","HMPDVSIT",164,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",165,0)
 ; ADM("admitType")=$P($G(VAIP(4)),U,2)
"RTN","HMPDVSIT",166,0)
 S DATE=+$G(VAIP(13,1)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",167,0)
 S:$G(VAIP(7)) I=I+1,ADM("provider",I)=VAIP(7)_"^P^1" ;primary
"RTN","HMPDVSIT",168,0)
 S:$G(VAIP(18)) I=I+1,ADM("provider",I)=VAIP(18)_"^A" ;attending
"RTN","HMPDVSIT",169,0)
 S ADM("specialty")=$P($G(VAIP(8)),U,2)
"RTN","HMPDVSIT",170,0)
 S X=$$SERV(+$G(VAIP(8))),ADM("service")=X
"RTN","HMPDVSIT",171,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIP(12)) ;PTF>ICD
"RTN","HMPDVSIT",172,0)
 S ADM("reason")=ICD_U_$G(VAIP(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",173,0)
 S HLOC=+$G(^DIC(42,+$G(VAIP(5)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",174,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",175,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIP(6),U,2)
"RTN","HMPDVSIT",176,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",177,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",178,0)
 I $G(VAIP(17)) D
"RTN","HMPDVSIT",179,0)
 . S ADM("departureDateTime")=+$G(VAIP(17,1))
"RTN","HMPDVSIT",180,0)
 . ; ADM("disposition")=$G(VAIP(17,3)) ;Discharge Mvt Type
"RTN","HMPDVSIT",181,0)
 S ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",182,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",183,0)
 Q
"RTN","HMPDVSIT",184,0)
 ;
"RTN","HMPDVSIT",185,0)
INPT ; -- return current admission in ADM("attribute")=value [from ADM]
"RTN","HMPDVSIT",186,0)
 K VAINDT D INP^VADPT Q:VAIN(1)<1
"RTN","HMPDVSIT",187,0)
 S ADM("id")=IEN,ADM("patientClass")="IMP"
"RTN","HMPDVSIT",188,0)
 ; ADM("admitType")=$P($G(VAIN(8)),U,2)
"RTN","HMPDVSIT",189,0)
 S DATE=+$G(VAIN(7)),(ADM("dateTime"),ADM("arrivalDateTime"))=DATE,I=0
"RTN","HMPDVSIT",190,0)
 S:$G(VAIN(2)) I=I+1,ADM("provider",I)=VAIN(2)_"^P^1" ;primary
"RTN","HMPDVSIT",191,0)
 S:$G(VAIN(11)) I=I+1,ADM("provider",I)=VAIN(11)_"^A" ;attending
"RTN","HMPDVSIT",192,0)
 S ADM("specialty")=$P($G(VAIN(3)),U,2)
"RTN","HMPDVSIT",193,0)
 S X=$$SERV(+$G(VAIN(3))),ADM("service")=X
"RTN","HMPDVSIT",194,0)
 S ICD=$$POV(IEN) S:'ICD ICD=$$PTF(DFN,VAIN(10)) ;PTF>ICD
"RTN","HMPDVSIT",195,0)
 S ADM("reason")=ICD_U_$G(VAIN(9)) ;ICD code^description^Dx text
"RTN","HMPDVSIT",196,0)
 S HLOC=+$G(^DIC(42,+$G(VAIN(4)),44)) ;ICR 10039 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",197,0)
 S:HLOC ADM("location")=$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",198,0)
 S ADM("facility")=$$FAC^HMPD(+HLOC),ADM("roomBed")=$P(VAIN(5),U,2)
"RTN","HMPDVSIT",199,0)
 S ADM("serviceCategory")="H^HOSPITALIZATION"
"RTN","HMPDVSIT",200,0)
 S X=$$CPT(IEN),ADM("type")=$S(X:$P($$CPT^ICPTCOD(X),U,2,3),1:U_$$CATG("H"))
"RTN","HMPDVSIT",201,0)
 ; ADM("visitString")=HLOC_";"_DATE_";H"
"RTN","HMPDVSIT",202,0)
 D TIU(IEN) ;notes/summary
"RTN","HMPDVSIT",203,0)
 Q
"RTN","HMPDVSIT",204,0)
 ;
"RTN","HMPDVSIT",205,0)
PTF(DFN,PTF) ; -- return ICD code^description for a PTF record
"RTN","HMPDVSIT",206,0)
 N HMPPTF,N,HMPX
"RTN","HMPDVSIT",207,0)
 D:$G(PTF) RPC^DGPTFAPI(.HMPPTF,+PTF) I $G(HMPPTF(0))<1 Q "^"
"RTN","HMPDVSIT",208,0)
 S Y=$P($G(HMPPTF(1)),U,3)_U
"RTN","HMPDVSIT",209,0)
 S N=$$ICDD^ICDEX(Y,"HMPX") ;ICD Description Sep 1, 2016 - PB - DE5033 changed to use new API to get ICD code
"RTN","HMPDVSIT",210,0)
 I N>0,$L($G(HMPX(1))) S Y=Y_HMPX(1)
"RTN","HMPDVSIT",211,0)
 Q Y
"RTN","HMPDVSIT",212,0)
 ;
"RTN","HMPDVSIT",213,0)
ENC(IEN,ENC) ; -- return an encounter in ENC("attribute")=value
"RTN","HMPDVSIT",214,0)
 N X0,DATE,HLOC,TYPE,STS,X,Y K ENC
"RTN","HMPDVSIT",215,0)
 S IEN=+$G(IEN) Q:IEN<1  ;invalid ien
"RTN","HMPDVSIT",216,0)
 S ENC("id")="E"_IEN,X0=$$GETOE^SDOE(IEN) ;^SCE(IEN,0) node ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",217,0)
 S DATE=+X0,ENC("dateTime")=DATE
"RTN","HMPDVSIT",218,0)
 S HLOC=+$P(X0,U,4) I HLOC D
"RTN","HMPDVSIT",219,0)
 . S HLOC=HLOC_U_$P($G(^SC(HLOC,0)),U) ;ICR 10040 DE2818 ASF 11/21/15
"RTN","HMPDVSIT",220,0)
 . S ENC("location")=$P(HLOC,U,2)
"RTN","HMPDVSIT",221,0)
 . S X=$$GET1^DIQ(44,+HLOC_",",9.5,"I")
"RTN","HMPDVSIT",222,0)
 . I X S ENC("service")=$$SERV(X)
"RTN","HMPDVSIT",223,0)
 S ENC("facility")=$$FAC^HMPD(+HLOC)
"RTN","HMPDVSIT",224,0)
 S STS=$$EXTERNAL^DILFD(409.68,.12,,$P(X0,U,12))
"RTN","HMPDVSIT",225,0)
 S X=$S(STS?1"INP".E:"IMP",1:"AMB"),ENC("patientClass")=X,TYPE=$E(X)
"RTN","HMPDVSIT",226,0)
 S ENC("type")=U_$S(HLOC:$P(HLOC,U,2)_" VISIT",1:$$CATG(TYPE))
"RTN","HMPDVSIT",227,0)
 S ENC("serviceCategory")=TYPE_U_$$CATG(TYPE)
"RTN","HMPDVSIT",228,0)
 S ENC("visitString")=+HLOC_";"_DATE_";"_TYPE
"RTN","HMPDVSIT",229,0)
 Q
"RTN","HMPDVSIT",230,0)
 ;
"RTN","HMPDVSIT",231,0)
 ; ------------ Return data to middle tier ------------
"RTN","HMPDVSIT",232,0)
 ;
"RTN","HMPDVSIT",233,0)
XML(VISIT) ; -- Return patient visit as XML
"RTN","HMPDVSIT",234,0)
 N ATT,X,Y,NAMES,I,J
"RTN","HMPDVSIT",235,0)
 D ADD("<visit>") S HMPTOTL=$G(HMPTOTL)+1
"RTN","HMPDVSIT",236,0)
 S ATT="" F  S ATT=$O(VISIT(ATT)) Q:ATT=""  D  D:$L(Y) ADD(Y)
"RTN","HMPDVSIT",237,0)
 . I $O(VISIT(ATT,0)) D  S Y="" Q  ;multiples
"RTN","HMPDVSIT",238,0)
 .. D ADD("<"_ATT_"s>")
"RTN","HMPDVSIT",239,0)
 .. S I=0 F  S I=$O(VISIT(ATT,I)) Q:I<1  D
"RTN","HMPDVSIT",240,0)
 ... S X=$G(VISIT(ATT,I)),NAMES=""
"RTN","HMPDVSIT",241,0)
 ... I ATT="document" S NAMES="id^localTitle^nationalTitle^Z"
"RTN","HMPDVSIT",242,0)
 ... I ATT="provider" S NAMES="code^name^role^primary^Z"
"RTN","HMPDVSIT",243,0)
 ... S Y="<"_ATT_" "_$$LOOP ;_"/>" D ADD(Y)
"RTN","HMPDVSIT",244,0)
 ... S X=$G(VISIT(ATT,I,"content")) I '$L(X) S Y=Y_"/>" D ADD(Y) Q
"RTN","HMPDVSIT",245,0)
 ... S Y=Y_">" D ADD(Y)
"RTN","HMPDVSIT",246,0)
 ... S Y="<content xml:space='preserve'>" D ADD(Y)
"RTN","HMPDVSIT",247,0)
 ... S J=0 F  S J=$O(@X@(J)) Q:J<1  S Y=$$ESC^HMPD(@X@(J)) D ADD(Y)
"RTN","HMPDVSIT",248,0)
 ... D ADD("</content>"),ADD("</"_ATT_">")
"RTN","HMPDVSIT",249,0)
 .. D ADD("</"_ATT_"s>")
"RTN","HMPDVSIT",250,0)
 . S X=$G(VISIT(ATT)),Y="" Q:'$L(X)
"RTN","HMPDVSIT",251,0)
 . S NAMES="code^name^"_$S(ATT="reason":"narrative^",1:"")_"Z"
"RTN","HMPDVSIT",252,0)
 . I X'["^" S Y="<"_ATT_" value='"_$$ESC^HMPD(X)_"' />" Q
"RTN","HMPDVSIT",253,0)
 . I $L(X)>1 S Y="<"_ATT_" "_$$LOOP_"/>"
"RTN","HMPDVSIT",254,0)
 D ADD("</visit>")
"RTN","HMPDVSIT",255,0)
 Q
"RTN","HMPDVSIT",256,0)
 ;
"RTN","HMPDVSIT",257,0)
LOOP() ; -- build sub-items string from NAMES and X
"RTN","HMPDVSIT",258,0)
 N STR,P,TAG S STR=""
"RTN","HMPDVSIT",259,0)
 F P=1:1 S TAG=$P(NAMES,U,P) Q:TAG="Z"  I $L($P(X,U,P)) S STR=STR_TAG_"='"_$$ESC^HMPD($P(X,U,P))_"' "
"RTN","HMPDVSIT",260,0)
 Q STR
"RTN","HMPDVSIT",261,0)
 ;
"RTN","HMPDVSIT",262,0)
ADD(X) ; -- Add a line @HMP@(n)=X
"RTN","HMPDVSIT",263,0)
 S HMPI=$G(HMPI)+1
"RTN","HMPDVSIT",264,0)
 S @HMP@(HMPI)=X
"RTN","HMPDVSIT",265,0)
 Q
"RTN","HMPEF")
0^12^B88029306^B86301720
"RTN","HMPEF",1,0)
HMPEF ;SLC/MKB,ASMR/BL,RRB,JD,SRG,CK - Serve VistA operational data as JSON via RPC;Aug 29, 2016 20:06:27
"RTN","HMPEF",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPEF",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEF",4,0)
 ;
"RTN","HMPEF",5,0)
 ; DE2818 - SQA findings. Newed L42 and L44 in LOC+1.  RRB - 10/30/2015
"RTN","HMPEF",6,0)
 ;
"RTN","HMPEF",7,0)
 ; DE6652 - JD - 9/1/16: Removed code behind synching sign-symptom domain for operational data.
"RTN","HMPEF",8,0)
 ;                       SIGNS tag.
"RTN","HMPEF",9,0)
 ;
"RTN","HMPEF",10,0)
 ; ^SC references - IA 10040, HOSPITAL LOCATION file (#44)
"RTN","HMPEF",11,0)
 ; ^DIC(42) references - IA #10039, WARD LOCATION file
"RTN","HMPEF",12,0)
 Q
"RTN","HMPEF",13,0)
 ;
"RTN","HMPEF",14,0)
 ; The following variables can not be newed or killed because they are used
"RTN","HMPEF",15,0)
 ; from upstream by scope (NOT as input parameters):
"RTN","HMPEF",16,0)
 ;      HMPBATCH, HMPFADOM, HMPFLDON, HMPFZTSK, HMPMETA, HMPSTMP, LEX("LIST", and ZTQUEUED.
"RTN","HMPEF",17,0)
GET(HMP,FILTER) ; -- Return search results as JSON in @HMP@(n)
"RTN","HMPEF",18,0)
 ; RPC = HMP GET OPERATIONAL DATA
"RTN","HMPEF",19,0)
 ; where FILTER("domain")  = name of desired data type (see $$TAG)
"RTN","HMPEF",20,0)
 ;       FILTER("limit")   = maximum number of items to return [opt]
"RTN","HMPEF",21,0)
 ;       FILTER("start")   = ien to start search from          [opt]
"RTN","HMPEF",22,0)
 ;       FILTER("id")      = single item id to return          [opt]
"RTN","HMPEF",23,0)
 ;
"RTN","HMPEF",24,0)
 ; HMPLAST - last record processed
"RTN","HMPEF",25,0)
 N HMPSYS,TYPE,HMPMAX,HMPI,HMPID,HMPERR,HMPTN,HMPLAST,HMPCNT,HMPFINI
"RTN","HMPEF",26,0)
 S HMP=$NA(^TMP("HMP",$J)),HMPI=0 K @HMP
"RTN","HMPEF",27,0)
 S HMPSYS=$$SYS^HMPUTILS ;DE4463 - CK - 4/22/2016
"RTN","HMPEF",28,0)
 ;
"RTN","HMPEF",29,0)
 ; parse & validate input parameters
"RTN","HMPEF",30,0)
 S TYPE=$P($G(FILTER("domain")),"#") ;,TYPE=$$LOW^XLFSTR(TYPE)
"RTN","HMPEF",31,0)
 S HMPMAX=+$G(FILTER("limit")),HMPCNT=0
"RTN","HMPEF",32,0)
 S HMPLAST=+$G(FILTER("start"))
"RTN","HMPEF",33,0)
 S HMPID=$G(FILTER("id"))
"RTN","HMPEF",34,0)
 ;
"RTN","HMPEF",35,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",36,0)
 ;
"RTN","HMPEF",37,0)
 ; extract data
"RTN","HMPEF",38,0)
 I TYPE="" S HMPERR="Missing or invalid reference type" G GTQ
"RTN","HMPEF",39,0)
 ; *** convert code below to use $$HANDLE^XUSRB4 for zero node in ^XTMP, IA 4770***
"RTN","HMPEF",40,0)
 I $D(ZTQUEUED) S HMP=$NA(^XTMP(HMPBATCH,HMPFZTSK,FILTER("domain"))) K @HMP
"RTN","HMPEF",41,0)
 I TYPE="new",$L($T(EN^HMPEFX)) D EN^HMPEFX(HMPID,HMPMAX) Q
"RTN","HMPEF",42,0)
 S HMPTN=$$TAG(TYPE) Q:'$L(HMPTN)  ;D ERR(2) Q
"RTN","HMPEF",43,0)
 D @HMPTN
"RTN","HMPEF",44,0)
 ;
"RTN","HMPEF",45,0)
GTQ ; add item count and terminating characters
"RTN","HMPEF",46,0)
 N ERROR I $D(^TMP($J,"HMP ERROR"))>0 D BUILDERR(.ERROR) S ERROR(1)=ERROR(1)_"}"
"RTN","HMPEF",47,0)
 I +$G(FILTER("noHead"))=1 D  Q
"RTN","HMPEF",48,0)
 .S @HMP@("total")=+$G(HMPI)
"RTN","HMPEF",49,0)
 .S @HMP@("last")=HMPLAST
"RTN","HMPEF",50,0)
 .S @HMP@("finished")=+$G(HMPFINI)
"RTN","HMPEF",51,0)
 .I $L($G(ERROR(1)))>1 S @HMP@("error")=ERROR(1)
"RTN","HMPEF",52,0)
 I '$D(@HMP)!'$G(HMPI) D  Q
"RTN","HMPEF",53,0)
 .I '$D(^TMP($J,"HMP ERROR")) S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]}}" Q
"RTN","HMPEF",54,0)
 .S @HMP@(1)="""data"":{""totalItems"":0,""items"":[]},"
"RTN","HMPEF",55,0)
 .M @HMP@(2)=ERROR
"RTN","HMPEF",56,0)
 ;
"RTN","HMPEF",57,0)
 I $D(@HMP),$G(HMPI) D
"RTN","HMPEF",58,0)
 . S @HMP@(.5)="{""apiVersion"":""1.01"",""data"":{""updated"":"""_$$HL7NOW_""",""currentItemCount"":"_HMPI
"RTN","HMPEF",59,0)
 . S:$G(HMPCNT) @HMP@(.5)=@HMP@(.5)_",""totalItems"":"_HMPCNT
"RTN","HMPEF",60,0)
 . S:$G(HMPLAST) @HMP@(.5)=@HMP@(.5)_",""last"":"_HMPLAST
"RTN","HMPEF",61,0)
 . S @HMP@(.5)=@HMP@(.5)_",""items"":["
"RTN","HMPEF",62,0)
 . S HMPI=HMPI+1,@HMP@(HMPI)=$S($D(^TMP($J,"HMP ERROR"))>0:"]}",1:"]}}")
"RTN","HMPEF",63,0)
 I $D(^TMP($J,"HMP ERROR"))>0 S HMPI=HMPI+1,@HMP@(HMPI,.3)="," M @HMP@(HMPI)=ERROR ;S HMPI=HMPI+1,@HMP@(HMPI)="}"
"RTN","HMPEF",64,0)
 K ^TMP($J,"HMP ERROR")
"RTN","HMPEF",65,0)
 Q
"RTN","HMPEF",66,0)
 ;
"RTN","HMPEF",67,0)
BUILDERR(RESULT) ;  error array
"RTN","HMPEF",68,0)
 N CNT,COUNT,DOM,DOMCNT,ERRMSG,ERROR,FIELD,MESSAGE,MSG,MSGCNT,T,TEMP
"RTN","HMPEF",69,0)
 S COUNT=$G(^TMP($J,"HMP ERROR","# of Errors"))
"RTN","HMPEF",70,0)
 S MESSAGE="A mumps error occurred when extracting data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",71,0)
 S CNT=1,ERROR("error","message","\",CNT)="A mumps error occurred when extracting patient data. A total of "_COUNT_" occurred.\n\r"
"RTN","HMPEF",72,0)
 S MSGCNT=0 F  S MSGCNT=$O(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT)) Q:MSGCNT'>0  D
"RTN","HMPEF",73,0)
 . S CNT=CNT+1,MESSAGE=MESSAGE_$G(^TMP($J,"HMP ERROR","ERROR MESSAGE",MSGCNT))_"\n\r"
"RTN","HMPEF",74,0)
 S RESULT(1)="""error"":{""message"":"_""""_MESSAGE_""""_"}"
"RTN","HMPEF",75,0)
 Q
"RTN","HMPEF",76,0)
 ;
"RTN","HMPEF",77,0)
TAG(X) ; -- linetag for reference domain X
"RTN","HMPEF",78,0)
 N Y S Y="HMP",X=$G(X)
"RTN","HMPEF",79,0)
 ; default = HMP Object (various types)
"RTN","HMPEF",80,0)
 I X="location"      S Y="LOC"
"RTN","HMPEF",81,0)
 I X="pt-select"     S Y="PAT"
"RTN","HMPEF",82,0)
 I X="person"        S Y="NP"
"RTN","HMPEF",83,0)
 I X="user"          S Y="NP"
"RTN","HMPEF",84,0)
 I X="labgroup"      S Y="LABGRP"
"RTN","HMPEF",85,0)
 I X="labpanel"      S Y="LABPNL"
"RTN","HMPEF",86,0)
 I X["orderable"     S Y="OI"
"RTN","HMPEF",87,0)
 I X["schedule"      S Y="SCHEDULE"
"RTN","HMPEF",88,0)
 I X["route"         S Y="ROUTE"
"RTN","HMPEF",89,0)
 I X["quick"         S Y="QO"
"RTN","HMPEF",90,0)
 I X="displayGroup"  S Y="ODG"
"RTN","HMPEF",91,0)
 I X["asu-"          S Y="ASU"
"RTN","HMPEF",92,0)
 I X["doc-"          S Y="ASU"
"RTN","HMPEF",93,0)
 I X="immunization"    S Y="IMMTYPE"
"RTN","HMPEF",94,0)
 I X="allergy-list"         S Y="ALLTYPE"
"RTN","HMPEF",95,0)
 ;I X="problem-list"        S Y="PROB"
"RTN","HMPEF",96,0)
 I X="vital-type"      S Y="VTYPE"
"RTN","HMPEF",97,0)
 I X="vital-qualifier"  S Y="VQUAL"
"RTN","HMPEF",98,0)
 I X="vital-category"   S Y="VCAT"
"RTN","HMPEF",99,0)
 I X["clioterm"      S Y="MDTERMS"
"RTN","HMPEF",100,0)
 Q Y
"RTN","HMPEF",101,0)
 ;
"RTN","HMPEF",102,0)
ERR(X,VAL) ;  return error message
"RTN","HMPEF",103,0)
 N MSG  S MSG="Error"
"RTN","HMPEF",104,0)
 I X=2  S MSG="Domain type '"_$G(VAL)_"' not recognized"
"RTN","HMPEF",105,0)
 I X=3  S MSG="UID '"_$G(VAL)_"' not found"
"RTN","HMPEF",106,0)
 I X=99 S MSG="Unknown request"
"RTN","HMPEF",107,0)
 Q MSG
"RTN","HMPEF",108,0)
 ;
"RTN","HMPEF",109,0)
ERRMSG(X,VAL) ; -- return error message
"RTN","HMPEF",110,0)
 N Y S Y="A MUMPS error occurred while extracting "_X_" data"
"RTN","HMPEF",111,0)
 S:$G(VAL) Y=Y_", ien "_VAL
"RTN","HMPEF",112,0)
 Q Y
"RTN","HMPEF",113,0)
 ;
"RTN","HMPEF",114,0)
ERRQ ; -- Quit on error
"RTN","HMPEF",115,0)
 Q
"RTN","HMPEF",116,0)
 ;
"RTN","HMPEF",117,0)
HL7NOW() ; -- Return current time in HL7 format
"RTN","HMPEF",118,0)
 Q $$FMTHL7^HMPSTMP($$NOW^XLFDT)  ; DE5016
"RTN","HMPEF",119,0)
 ;
"RTN","HMPEF",120,0)
ALL() ;
"RTN","HMPEF",121,0)
 Q "location;patient;person;orderable;schedule;route;quick;displayGroup;asu-class;asu-rule;asu-role;doc-action;doc-status;clioterm;immunization;allergy-list;sign-symptom;vital-type;vital-qualifier;vital-category"
"RTN","HMPEF",122,0)
 ;
"RTN","HMPEF",123,0)
ADD(ITEM) ; -- add ITEM to @HMP@(HMPI)
"RTN","HMPEF",124,0)
 N HMPY,HMPERR
"RTN","HMPEF",125,0)
 I $G(HMPSTMP)]"" S @ITEM@("stampTime")=HMPSTMP ; US6734
"RTN","HMPEF",126,0)
 E  S @ITEM@("stampTime")=$$EN^HMPSTMP("NOW") ; DE2616 - must add stampTime to receive OPD freshness update from ADHOC^HMPUTIL1
"RTN","HMPEF",127,0)
 D ENCODE^HMPJSON(ITEM,"HMPY","HMPERR")
"RTN","HMPEF",128,0)
 I $D(HMPERR) D  ;return ERRor instead of ITEM
"RTN","HMPEF",129,0)
 . N HMPTMP,HMPTXT,HMPITM
"RTN","HMPEF",130,0)
 . M HMPITM=@ITEM K HMPY
"RTN","HMPEF",131,0)
 . S HMPTXT(1)="Problem encoding json output."
"RTN","HMPEF",132,0)
 . D SETERROR^HMPUTILS(.HMPTMP,.HMPERR,.HMPTXT,.HMPITM)
"RTN","HMPEF",133,0)
 . K HMPERR D ENCODE^HMPJSON("HMPTMP","HMPY","HMPERR")
"RTN","HMPEF",134,0)
 I $D(HMPY) D
"RTN","HMPEF",135,0)
 . Q:'$D(@ITEM@("uid"))
"RTN","HMPEF",136,0)
 . I $G(HMPMETA) D ADD^HMPMETA($P(HMPFADOM,"#"),@ITEM@("uid"),HMPSTMP) Q:HMPMETA=1  ;US6734,US11019
"RTN","HMPEF",137,0)
 . I HMPI D COMMA(HMPI)
"RTN","HMPEF",138,0)
 . ;I HMPI,'$G(FILTER("noHead")) D COMMA(HMPI)
"RTN","HMPEF",139,0)
 . S HMPI=HMPI+1 M @HMP@(HMPI)=HMPY
"RTN","HMPEF",140,0)
 Q
"RTN","HMPEF",141,0)
 ;
"RTN","HMPEF",142,0)
COMMA(I) ; -- add comma between items
"RTN","HMPEF",143,0)
 I $D(ZTQUEUED) Q
"RTN","HMPEF",144,0)
 N J S J=+$O(@HMP@(I,"A"),-1) ;last sub-node for item I
"RTN","HMPEF",145,0)
 S J=J+1,@HMP@(I,J)=","
"RTN","HMPEF",146,0)
 Q
"RTN","HMPEF",147,0)
 ;
"RTN","HMPEF",148,0)
TOTAL(ROOT) ; -- Return total #items in @ROOT@(n)
"RTN","HMPEF",149,0)
 Q $P($G(@ROOT@(0)),U,4)
"RTN","HMPEF",150,0)
 ;
"RTN","HMPEF",151,0)
TEST(TYPE,ID,IN) ; -- test GET, write results to screen
"RTN","HMPEF",152,0)
 N OUT,IDX
"RTN","HMPEF",153,0)
 S U="^"
"RTN","HMPEF",154,0)
 S IN("domain")=$G(TYPE)
"RTN","HMPEF",155,0)
 S:$D(ID) IN("id")=ID
"RTN","HMPEF",156,0)
 D GET(.OUT,.IN)
"RTN","HMPEF",157,0)
 ;
"RTN","HMPEF",158,0)
 S IDX=OUT
"RTN","HMPEF",159,0)
 F  S IDX=$Q(@IDX) Q:IDX'?1"^TMP(""HMP"","1.N.E  Q:+$P(IDX,",",2)'=$J  W !,@IDX
"RTN","HMPEF",160,0)
 Q
"RTN","HMPEF",161,0)
 ;
"RTN","HMPEF",162,0)
 ; ** Reference file searches, using FILTER("parameter")
"RTN","HMPEF",163,0)
 ;
"RTN","HMPEF",164,0)
PAT ;Patients
"RTN","HMPEF",165,0)
 N DFN,PAT,HMPPOPD
"RTN","HMPEF",166,0)
 S HMPPOPD=1
"RTN","HMPEF",167,0)
 S HMPCNT=$$TOTAL("^DPT")
"RTN","HMPEF",168,0)
 I $G(HMPID) S DFN=+HMPID D LKUP^HMPDJ00 Q
"RTN","HMPEF",169,0)
 N ERRMSG S ERRMSG="A mumps error occurred while extracting patients."
"RTN","HMPEF",170,0)
 S DFN=+$G(HMPLAST) F  S DFN=$O(^DPT(DFN)) Q:'(DFN>0)  D  I HMPMAX>0,HMPI'<HMPMAX Q  ;DE4496 19 August 2016
"RTN","HMPEF",171,0)
 . N $ES,$ET
"RTN","HMPEF",172,0)
 . S $ET="D ERRHDLR^HMPDERRH"
"RTN","HMPEF",173,0)
 . I $P($G(^DPT(DFN,0)),U)="" D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPEF",174,0)
 . S ERRMSG=$$ERRMSG("Patient",DFN)
"RTN","HMPEF",175,0)
 . K PAT D LKUP^HMPDJ00
"RTN","HMPEF",176,0)
 . S HMPLAST=DFN
"RTN","HMPEF",177,0)
 I '(DFN>0) S HMPFINI=1  ;DE4496 19 August 2016
"RTN","HMPEF",178,0)
 Q
"RTN","HMPEF",179,0)
LOC ; Hospital Location (#44) and Ward Location (#42)  /DE2818
"RTN","HMPEF",180,0)
 D LOC^HMPEF1(.HMPFINI,.HMPFLDON,$G(HMPMETA))
"RTN","HMPEF",181,0)
 Q
"RTN","HMPEF",182,0)
 ;
"RTN","HMPEF",183,0)
ACTWRD(IEN) ;Boolean TRUE if active WARD LOCATION
"RTN","HMPEF",184,0)
 ; IEN - IEN in file 42
"RTN","HMPEF",185,0)
 S D0=IEN D WIN^DGPMDDCF Q 'X  ; SRG: need DBIA
"RTN","HMPEF",186,0)
 ;
"RTN","HMPEF",187,0)
ACTLOC(LOC) ;Boolean TRUE if active hospital location
"RTN","HMPEF",188,0)
 ; ^SC - IA 10040
"RTN","HMPEF",189,0)
 N D0,X I +$G(^SC(LOC,"OOS")) Q 0                ; screen out OOS entry
"RTN","HMPEF",190,0)
 S D0=+$G(^SC(LOC,42)) I D0 D WIN^DGPMDDCF Q 'X  ; chk out of svc wards
"RTN","HMPEF",191,0)
 S X=$G(^SC(LOC,"I")) I +X=0 Q 1                 ; no inactivate date
"RTN","HMPEF",192,0)
 I DT>$P(X,U)&($P(X,U,2)=""!(DT<$P(X,U,2))) Q 0  ; chk reactivate date
"RTN","HMPEF",193,0)
 Q 1                                             ; must still be active
"RTN","HMPEF",194,0)
 ;
"RTN","HMPEF",195,0)
NP ;New Persons
"RTN","HMPEF",196,0)
 D NP^HMPEF1
"RTN","HMPEF",197,0)
 Q
"RTN","HMPEF",198,0)
 ;
"RTN","HMPEF",199,0)
KEYS(IEN) ;user's keys
"RTN","HMPEF",200,0)
 N HMPKEY,IENS,X,CNT
"RTN","HMPEF",201,0)
 D GETS^DIQ(200,IEN_",","51*","IE","HMPKEY") S CNT=0
"RTN","HMPEF",202,0)
 S IENS="" F  S IENS=$O(HMPKEY(200.051,IENS)) Q:IENS=""  D
"RTN","HMPEF",203,0)
 . S X=$G(HMPKEY(200.051,IENS,.01,"E")),CNT=CNT+1
"RTN","HMPEF",204,0)
 . S USER("vistaKeys",CNT,"name")=X
"RTN","HMPEF",205,0)
 . S X=$G(HMPKEY(200.051,IENS,3,"I"))
"RTN","HMPEF",206,0)
 . S:X USER("vistaKeys",CNT,"reviewDate")=$$JSONDT^HMPUTILS(X)
"RTN","HMPEF",207,0)
 Q
"RTN","HMPEF",208,0)
 ;
"RTN","HMPEF",209,0)
ODG ;
"RTN","HMPEF",210,0)
 D ADDODG^HMPCORD4
"RTN","HMPEF",211,0)
 Q
"RTN","HMPEF",212,0)
 ;
"RTN","HMPEF",213,0)
OI ;
"RTN","HMPEF",214,0)
 D OI^HMPCORD4("PS^RAP^LRT")
"RTN","HMPEF",215,0)
 Q
"RTN","HMPEF",216,0)
 ;
"RTN","HMPEF",217,0)
PROB ;get problem list OPD store
"RTN","HMPEF",218,0)
 D PROB^HMPEF1(.HMPFINI,LEX)
"RTN","HMPEF",219,0)
 Q
"RTN","HMPEF",220,0)
 ;
"RTN","HMPEF",221,0)
QO ;
"RTN","HMPEF",222,0)
 D QO^HMPCORD4
"RTN","HMPEF",223,0)
 Q
"RTN","HMPEF",224,0)
 ;
"RTN","HMPEF",225,0)
SCHEDULE ;
"RTN","HMPEF",226,0)
 N RESULT
"RTN","HMPEF",227,0)
 D ADDSCH^HMPCORD4
"RTN","HMPEF",228,0)
 Q
"RTN","HMPEF",229,0)
 ;
"RTN","HMPEF",230,0)
ROUTE ;
"RTN","HMPEF",231,0)
 N RESULT
"RTN","HMPEF",232,0)
 D ADDROUTE^HMPCORD4
"RTN","HMPEF",233,0)
 Q
"RTN","HMPEF",234,0)
 ;
"RTN","HMPEF",235,0)
HMP ; HMP Objects
"RTN","HMPEF",236,0)
 N IEN
"RTN","HMPEF",237,0)
 S HMPCNT=$$TOTAL("^HMP(800000.11)")
"RTN","HMPEF",238,0)
 I $L(HMPID) D  Q
"RTN","HMPEF",239,0)
 . I HMPID=+HMPID S IEN=HMPID
"RTN","HMPEF",240,0)
 . E  S IEN=+$O(^HMP(800000.11,"B",HMPID,0))
"RTN","HMPEF",241,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",242,0)
 . D:IEN HMP1^HMPDJ02(800000.11,IEN)
"RTN","HMPEF",243,0)
 S IEN=+$G(HMPLAST) F  S IEN=$O(^HMP(800000.11,"C",TYPE,IEN)) Q:IEN<1  D  I HMPMAX>0,HMPI'<HMPMAX Q
"RTN","HMPEF",244,0)
 . S ERRMSG=$$ERRMSG("HMP Object",IEN)
"RTN","HMPEF",245,0)
 . D HMP1^HMPDJ02(800000.11,IEN) S HMPLAST=IEN
"RTN","HMPEF",246,0)
 I IEN<1 S HMPFINI=1
"RTN","HMPEF",247,0)
 Q
"RTN","HMPEF",248,0)
 ;
"RTN","HMPEF",249,0)
SOURCE(SRC) ;
"RTN","HMPEF",250,0)
 N X S X=""
"RTN","HMPEF",251,0)
 I SRC["SC("        S X="clinic"
"RTN","HMPEF",252,0)
 I SRC["DPT("       S X="patient"
"RTN","HMPEF",253,0)
 I SRC["DIC(42"     S X="ward"
"RTN","HMPEF",254,0)
 I SRC["SCTM"       S X="pcmm"
"RTN","HMPEF",255,0)
 I SRC["OR(100.21"  S X="cprs"
"RTN","HMPEF",256,0)
 I SRC["DIC(45.7"   S X="specialty"
"RTN","HMPEF",257,0)
 I SRC["VA(200"     S X="provider"
"RTN","HMPEF",258,0)
 I SRC["PXRM(810.4" S X="pxrm"
"RTN","HMPEF",259,0)
 Q X
"RTN","HMPEF",260,0)
 ;
"RTN","HMPEF",261,0)
ASU ; ASU files
"RTN","HMPEF",262,0)
 N X,RTN S X=$P($G(TYPE),"-",2)
"RTN","HMPEF",263,0)
 S RTN=$$UP^XLFSTR(X)_"^HMPEASU"
"RTN","HMPEF",264,0)
 I X'="",$L($T(@RTN)) D @RTN
"RTN","HMPEF",265,0)
 Q
"RTN","HMPEF",266,0)
 ;
"RTN","HMPEF",267,0)
MDTERMS ; CP Terminology
"RTN","HMPEF",268,0)
 D:$L($T(TERM^HMPMDUTL)) TERM^HMPMDUTL
"RTN","HMPEF",269,0)
 Q
"RTN","HMPEF",270,0)
LABGRP ;
"RTN","HMPEF",271,0)
 D SHWCUMR2^HMPELAB
"RTN","HMPEF",272,0)
 Q
"RTN","HMPEF",273,0)
LABPNL ;
"RTN","HMPEF",274,0)
 D SHWORPNL^HMPELAB
"RTN","HMPEF",275,0)
 Q
"RTN","HMPEF",276,0)
 ;
"RTN","HMPEF",277,0)
 ;DE2818, changed reference to ^VA(201) to a FileMan call
"RTN","HMPEF",278,0)
ISPROXY(IEN) ; Boolean function, is NEW PERSON entry an APPLICATION PROXY?
"RTN","HMPEF",279,0)
 N APP,HMPMSG,HMPUCLS,T,V
"RTN","HMPEF",280,0)
 ; APP - returned value
"RTN","HMPEF",281,0)
 ; HMPUCLS - user class array
"RTN","HMPEF",282,0)
 ; HMPMSG - FileMan message array
"RTN","HMPEF",283,0)
 ;
"RTN","HMPEF",284,0)
 D GETS^DIQ(200,IEN_",","9.5*","E","HMPUCLS","HMPMSG")  ; get external format
"RTN","HMPEF",285,0)
 S APP=0,T="APPLICATION PROXY",V="HMPUCLS"
"RTN","HMPEF",286,0)
 ; search returned array for value equal to T
"RTN","HMPEF",287,0)
 F  S V=$Q(@V) Q:V=""!APP  S:@V=T APP=1
"RTN","HMPEF",288,0)
 Q APP
"RTN","HMPEF",289,0)
 ;
"RTN","HMPEF",290,0)
IMMTYPE ;immunization types
"RTN","HMPEF",291,0)
 D IMMTYPE^HMPCORD5
"RTN","HMPEF",292,0)
 Q
"RTN","HMPEF",293,0)
 ;
"RTN","HMPEF",294,0)
ALLTYPE ;allergy-list types
"RTN","HMPEF",295,0)
 ;BL;REMOVE FROM ODS
"RTN","HMPEF",296,0)
 ;D ALLTYPE^HMPCORD5
"RTN","HMPEF",297,0)
 Q
"RTN","HMPEF",298,0)
 ;
"RTN","HMPEF",299,0)
VTYPE ;vital types
"RTN","HMPEF",300,0)
 D VTYPE^HMPCORD5
"RTN","HMPEF",301,0)
 Q
"RTN","HMPEF",302,0)
 ;
"RTN","HMPEF",303,0)
VQUAL ;vital qualifiers
"RTN","HMPEF",304,0)
 D VQUAL^HMPCORD5
"RTN","HMPEF",305,0)
 Q
"RTN","HMPEF",306,0)
 ;
"RTN","HMPEF",307,0)
VCAT ;vital categories
"RTN","HMPEF",308,0)
 D VCAT^HMPCORD5
"RTN","HMPEF",309,0)
 Q
"RTN","HMPEF",310,0)
 ;
"RTN","HMPEF",311,0)
FILENAME ; text of filenames for search treeview
"RTN","HMPEF",312,0)
 ;;VA Allergies File
"RTN","HMPEF",313,0)
 ;;VA Allergies File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",314,0)
 ;;National Drug File - Generic Drug Name
"RTN","HMPEF",315,0)
 ;;National Drug file - Trade Name
"RTN","HMPEF",316,0)
 ;;Local Drug File
"RTN","HMPEF",317,0)
 ;;Local Drug File (Synonyms)  SPACER ONLY - NOT DISPLAYED
"RTN","HMPEF",318,0)
 ;;Drug Ingredients File
"RTN","HMPEF",319,0)
 ;;VA Drug Class File
"RTN","HMPEF",320,0)
 ;;
"RTN","HMPEVNT")
0^2^B193956269^B181881949
"RTN","HMPEVNT",1,0)
HMPEVNT ;SLC/MKB,ASMR/JD,RRB,CPC,MBS -- VistA event listeners;Aug 29, 2016 20:06:27
"RTN","HMPEVNT",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;May 15, 2016;Build 15
"RTN","HMPEVNT",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPEVNT",4,0)
 ;
"RTN","HMPEVNT",5,0)
 ; External References          DBIA#
"RTN","HMPEVNT",6,0)
 ; -------------------          -----
"RTN","HMPEVNT",7,0)
 ; DG FIELD MONITOR              3344
"RTN","HMPEVNT",8,0)
 ; DGPM MOVEMENT EVENTS          1181
"RTN","HMPEVNT",9,0)
 ; GMRA ENTERED IN ERROR         1467
"RTN","HMPEVNT",10,0)
 ; GMRA SIGN-OFF ON DATA         1469
"RTN","HMPEVNT",11,0)
 ; GMRC EVSEND OR                3140
"RTN","HMPEVNT",12,0)
 ; LR70 CH EVSEND OR             6087
"RTN","HMPEVNT",13,0)
 ; MDC OBSERVATION UPDATE        6084
"RTN","HMPEVNT",14,0)
 ; PS EVSEND OR                  2415
"RTN","HMPEVNT",15,0)
 ; PSB EVSEND HMP                6085
"RTN","HMPEVNT",16,0)
 ; PXK VISIT DATA EVENT          1298
"RTN","HMPEVNT",17,0)
 ; RA EVSEND OR                  6086
"RTN","HMPEVNT",18,0)
 ; SDAM APPOINTMENT EVENTS       1320
"RTN","HMPEVNT",19,0)
 ; ^AUPNVSIT                     2028
"RTN","HMPEVNT",20,0)
 ; ^DPT                         10035
"RTN","HMPEVNT",21,0)
 ; ^OR(100                       5771
"RTN","HMPEVNT",22,0)
 ; DIQ                           2056
"RTN","HMPEVNT",23,0)
 ; GMVUTL                        5046
"RTN","HMPEVNT",24,0)
 ; TIUSRVLO                      2834
"RTN","HMPEVNT",25,0)
 ; VADPT                        10061
"RTN","HMPEVNT",26,0)
 ; VASITE                       10112
"RTN","HMPEVNT",27,0)
 ; XLFDT                        10103
"RTN","HMPEVNT",28,0)
 ; XTHC10                        5515
"RTN","HMPEVNT",29,0)
 ; ORDRNUM^PSSUTLA2              6426  ;DE6363 - JD - 8/23/16
"RTN","HMPEVNT",30,0)
 ;
"RTN","HMPEVNT",31,0)
 ; DE2818 - SQA findings.
"RTN","HMPEVNT",32,0)
 ;          1) Correct unkilled variables by modifying line tags to accept variables as
"RTN","HMPEVNT",33,0)
 ;          parameters and modifying associated protocol routine calls to pass variables
"RTN","HMPEVNT",34,0)
 ;          as parameters. RRB - 10/28/2015
"RTN","HMPEVNT",35,0)
 ;
"RTN","HMPEVNT",36,0)
 ;Oct 15, 2015 - PB - modified to trigger an unsolicited sync action when an order is discontinued and the patient is subscribed to eHMP
"RTN","HMPEVNT",37,0)
 ;
"RTN","HMPEVNT",38,0)
 ;DE3327 - 5/4/16 - JD - Removed the server hardcoding (hmp-development-box).
"RTN","HMPEVNT",39,0)
 ;                       *** NOTE ***
"RTN","HMPEVNT",40,0)
 ;                       It is understood that as of the date of modifying this code (5/4/16), there
"RTN","HMPEVNT",41,0)
 ;                       is one AND ONLY one server entry in the HMP Subscription file (#800000)
"RTN","HMPEVNT",42,0)
 ;                       per site.  This will be fixed in future releases to accommodate multiple
"RTN","HMPEVNT",43,0)
 ;                       servers per site.
"RTN","HMPEVNT",44,0)
 ;
"RTN","HMPEVNT",45,0)
 Q
"RTN","HMPEVNT",46,0)
 ;
"RTN","HMPEVNT",47,0)
DG(DGDA,DGFIELD,DGFILE) ; -- DG FIELD MONITOR protocol listener  /DE2818 
"RTN","HMPEVNT",48,0)
 Q:$G(DGFILE)'=2         ;Patient file only
"RTN","HMPEVNT",49,0)
 N DFN S DFN=+$G(DGDA)
"RTN","HMPEVNT",50,0)
 ; operational pt-select - *s68 BEGIN
"RTN","HMPEVNT",51,0)
 I "^.01^.02^.03^.09^.101^.351^.361^"[(U_+$G(DGFIELD)_U) D
"RTN","HMPEVNT",52,0)
 . ; -- if patient entry has been deleted, delete pt-select object
"RTN","HMPEVNT",53,0)
 . I $G(DGFIELD)=".01",'$D(^DPT(DFN)) D POSTX("pt-select",DFN,"@") Q  ; *s68 - END
"RTN","HMPEVNT",54,0)
 . D POSTX("pt-select",DFN_"&"_$G(DGFIELD))
"RTN","HMPEVNT",55,0)
 ; subscribed patient
"RTN","HMPEVNT",56,0)
 I $D(^HMP(800000,"AITEM",DFN)),$$FLD(+$G(DGFIELD)) D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",57,0)
 Q
"RTN","HMPEVNT",58,0)
 ;
"RTN","HMPEVNT",59,0)
FLD(X) ; --Return 1 or 0, if X is a field tracked by HMP
"RTN","HMPEVNT",60,0)
 S X=U_+$G(X)_U
"RTN","HMPEVNT",61,0)
 I "^.01^.02^.03^.05^.08^.09^.351^.361^.364^"[X Q 1         ;demographic
"RTN","HMPEVNT",62,0)
 I "^.111^.1112^.112^.113^.114^.115^.131^.132^.134^"[X Q 1  ;addr/phone
"RTN","HMPEVNT",63,0)
 I "^.211^.212^.213^.214^.216^.217^.218^.219^"[X Q 1        ;NOK
"RTN","HMPEVNT",64,0)
 I "^.301^.302^1901^.32102^.32103^.32201^.5295^"[X Q 1      ;serv conn
"RTN","HMPEVNT",65,0)
 ;New fields.  JD - 9/24/15
"RTN","HMPEVNT",66,0)
 I "^.133^"[X Q 1                                           ;email address
"RTN","HMPEVNT",67,0)
 I "^.1211^.1212^.1213^.1214^.1215^.1216^"[X Q 1            ;temporary address
"RTN","HMPEVNT",68,0)
 I "^.331^.332^.333^.334^.335^.336^.337^.338^.339^.33011^"[X Q 1  ;emergency contact addr/phone
"RTN","HMPEVNT",69,0)
 I "^.215^.21011^"[X Q 1                                    ;NOK addr line 3 and work phone
"RTN","HMPEVNT",70,0)
 I "^.3731^"[X Q 1                                          ;service connected conditions
"RTN","HMPEVNT",71,0)
 I "^.18^3^8^16^"[X Q 1                                     ;insurance  
"RTN","HMPEVNT",72,0)
 Q 0
"RTN","HMPEVNT",73,0)
 ;
"RTN","HMPEVNT",74,0)
DGPM(DGPMA,DGPMDA,DGPMP,DGPMT) ; -- DGPM MOVEMENT EVENTS protocol listener  /DE2818
"RTN","HMPEVNT",75,0)
 ;    [expects DFN,DGPM* variables]
"RTN","HMPEVNT",76,0)
 N ADM,ACT S ADM=DGPMDA
"RTN","HMPEVNT",77,0)
 I DGPMT'=1 S ADM=$S(DGPMA:$P(DGPMA,U,14),1:$P(DGPMP,U,14)) Q:ADM<1
"RTN","HMPEVNT",78,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",79,0)
 I $D(^HMP(800000,"AITEM",DFN)) D POST(DFN,"visit","H"_ADM,ACT)
"RTN","HMPEVNT",80,0)
 ; update roster(s) if current movement
"RTN","HMPEVNT",81,0)
 N ADMX,MVTX,PREV,NEW,OLD,WARD
"RTN","HMPEVNT",82,0)
 S ADMX=$Q(^DGPM("ATID1",DFN)) Q:$QS(ADMX,4)'=ADM
"RTN","HMPEVNT",83,0)
 S MVTX=$Q(^DGPM("APMV",DFN,ADM)) Q:$QS(MVTX,5)'=DGPMDA
"RTN","HMPEVNT",84,0)
 S PREV=$G(DGPMP) I 'PREV,DGPMT'=1 D  ;previous or edited mvt
"RTN","HMPEVNT",85,0)
 . S MVTX=$Q(@MVTX) Q:DFN'=$QS(MVTX,2)  Q:ADM'=$QS(MVTX,3)
"RTN","HMPEVNT",86,0)
 . S PREV=$G(^DGPM(+$QS(MVTX,5),0))
"RTN","HMPEVNT",87,0)
 S NEW=$P(DGPMA,U,6),OLD=$P(PREV,U,6)
"RTN","HMPEVNT",88,0)
 I NEW'=OLD F WARD=NEW,OLD I WARD D
"RTN","HMPEVNT",89,0)
 . S I=0 F  S I=$O(^HMPROSTR("AD",WARD_";DIC(42,",I)) Q:I<1  D POSTX("roster",I)
"RTN","HMPEVNT",90,0)
 Q
"RTN","HMPEVNT",91,0)
 ;-find visit# for corresponding admission [not used]
"RTN","HMPEVNT",92,0)
 N ADM,PTF,IDT,ID,ACT
"RTN","HMPEVNT",93,0)
 I DGPMA S ADM=+DGPMA,PTF=+$P(DGPMA,U,16)
"RTN","HMPEVNT",94,0)
 E  S ADM=+DGPMP,PTF=+$P(DGPMP,U,16)
"RTN","HMPEVNT",95,0)
 I DGPMT'=1 D  Q:ADM<1
"RTN","HMPEVNT",96,0)
 . N VAIP S VAIP("E")=DGPMDA
"RTN","HMPEVNT",97,0)
 . D IN5^VADPT S ADM=+VAIP(13,1),PTF=+VAIP(12)
"RTN","HMPEVNT",98,0)
 S IDT=9999999-$P(ADM,".") S:ADM["." IDT=IDT_"."_$P(ADM,".",2)
"RTN","HMPEVNT",99,0)
 S ID=+$O(^AUPNVSIT("AAH",DFN,IDT,0)) Q:'ID
"RTN","HMPEVNT",100,0)
 S ACT=$S(DGPMA:"",1:"@")
"RTN","HMPEVNT",101,0)
 D POST(DFN,"visit",ID,ACT)
"RTN","HMPEVNT",102,0)
 ; POST(DFN,"ptf",PTF,ACT):DGPMT=3
"RTN","HMPEVNT",103,0)
 Q
"RTN","HMPEVNT",104,0)
 ;
"RTN","HMPEVNT",105,0)
NEWINPT() ; -- is DFN newly admitted?
"RTN","HMPEVNT",106,0)
 N Y S Y=0
"RTN","HMPEVNT",107,0)
 I DGPMT=1,DGPMA,'DGPMP,+$G(^DPT(DFN,.105))=DGPMDA S Y=1 ;new admission
"RTN","HMPEVNT",108,0)
 Q Y
"RTN","HMPEVNT",109,0)
 ;
"RTN","HMPEVNT",110,0)
PCMMT(SCPTTMAF,SCPTTMB4) ; -- SCMC PATIENT TEAM CHANGES protocol listener /DE2818
"RTN","HMPEVNT",111,0)
 ;I '$P($G(SCPTTMB4),U,8),'$P($G(SCPTTMAF),U,8) Q  ;not pc change ;DE5410 removed to track changes to other teams
"RTN","HMPEVNT",112,0)
 N DFN S DFN=$S($G(SCPTTMAF):+SCPTTMAF,1:+$G(SCPTTMB4)) Q:'DFN
"RTN","HMPEVNT",113,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",114,0)
 Q
"RTN","HMPEVNT",115,0)
 ;
"RTN","HMPEVNT",116,0)
PCMMTP(SCPTTPAF,SCPTTPB4) ; -- SCMC PATIENT TEAM POSITION CHANGES protocol listener /DE2818
"RTN","HMPEVNT",117,0)
 ;I '$P($G(SCPTTPB4),U,5),'$P($G(SCPTTPAF),U,5) Q  ;not pc change ;DE5410 removed to track changes to other teams
"RTN","HMPEVNT",118,0)
 N TM,DFN
"RTN","HMPEVNT",119,0)
 S TM=$S($G(SCPTTPAF):+SCPTTPAF,1:+$G(SCPTTPB4)) Q:'TM
"RTN","HMPEVNT",120,0)
 ;DE2818
"RTN","HMPEVNT",121,0)
 S DFN=$$GET1^DIQ(404.42,+TM_",",.01,"I")  ;ICR 1922
"RTN","HMPEVNT",122,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",123,0)
 Q
"RTN","HMPEVNT",124,0)
 ;
"RTN","HMPEVNT",125,0)
SDAM(SDATA) ; -- SDAM APPOINTMENT EVENTS protocol listener /DE2818
"RTN","HMPEVNT",126,0)
 I $G(SDATA)'="" D  Q  ;appointments ;DE5411 still process if Piece 1 not set, catches auto-rebook status
"RTN","HMPEVNT",127,0)
 . N DFN,DATE,HLOC,STS,REASON,PROV
"RTN","HMPEVNT",128,0)
 . S DFN=+$P(SDATA,U,2) I '(DFN>0) D LOGDPT^HMPLOG(DFN) Q  ;DE4496 19 August 2016
"RTN","HMPEVNT",129,0)
 . Q:'$D(^HMP(800000,"AITEM",DFN))
"RTN","HMPEVNT",130,0)
 . S DATE=+$P(SDATA,U,3),HLOC=+$P(SDATA,U,4),(PROV,REASON)=""
"RTN","HMPEVNT",131,0)
 . D POST(DFN,"appointment","A;"_DATE_";"_HLOC_";"_REASON_";"_$TR($P(PROV,U,1,2),"^",";"))
"RTN","HMPEVNT",132,0)
 Q
"RTN","HMPEVNT",133,0)
 ;
"RTN","HMPEVNT",134,0)
PCE ; -- PXK VISIT DATA EVENT protocol listener, used by HMP PCE EVENTS protocol
"RTN","HMPEVNT",135,0)
 N ACT,DA,DFN,HMPPXK,IEN,PX0A,PX0B,ZTDESC,ZTDTH,ZTIO,ZTRTN,ZTSAVE,ZTSK ;DE4195 and DE6485
"RTN","HMPEVNT",136,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",137,0)
 S PX0A=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")),PX0B=$G(^("BEFORE"))
"RTN","HMPEVNT",138,0)
 S DFN=$S($L(PX0A):+$P(PX0A,U,5),1:+$P(PX0B,U,5))
"RTN","HMPEVNT",139,0)
 Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",140,0)
 ; Visit file
"RTN","HMPEVNT",141,0)
 S ACT=$S(PX0A="":"@",1:"")
"RTN","HMPEVNT",142,0)
 ;DE4195 - put subsequent processing into taskman
"RTN","HMPEVNT",143,0)
 M HMPPXK=^TMP("PXKCO",$J)
"RTN","HMPEVNT",144,0)
 ; DE6485, add null device in ZTIO
"RTN","HMPEVNT",145,0)
 S ZTRTN="PCE2^HMPEVNT",ZTDTH=$H,ZTIO="",ZTSAVE("HMPPXK(")="",ZTSAVE("DFN")="",ZTSAVE("IEN")="",ZTSAVE("ACT")=""
"RTN","HMPEVNT",146,0)
 S ZTDESC="HMP PXK VISIT EVENT HANDLER"
"RTN","HMPEVNT",147,0)
 D ^%ZTLOAD
"RTN","HMPEVNT",148,0)
 Q
"RTN","HMPEVNT",149,0)
PCE2 ; DE4195 - run in taskman
"RTN","HMPEVNT",150,0)
 N DA,SUB
"RTN","HMPEVNT",151,0)
 D POST(DFN,"visit",IEN,ACT)
"RTN","HMPEVNT",152,0)
 ; check V-files
"RTN","HMPEVNT",153,0)
 ;DE4879 - Removed Health Factors from loop (was SUB="HF","IMM",...)
"RTN","HMPEVNT",154,0)
 F SUB="IMM","XAM","CPT","PED","POV","SK" D
"RTN","HMPEVNT",155,0)
 . S DA=0 F  S DA=$O(HMPPXK(IEN,SUB,DA)) Q:DA<1  D
"RTN","HMPEVNT",156,0)
 .. S ACT=$S($G(HMPPXK(IEN,SUB,DA,0,"AFTER"))="":"@",1:"")
"RTN","HMPEVNT",157,0)
 .. D POST(DFN,$$NAME(SUB),DA,ACT)
"RTN","HMPEVNT",158,0)
 Q
"RTN","HMPEVNT",159,0)
 ;
"RTN","HMPEVNT",160,0)
NAME(X) ; -- return object name for V-files
"RTN","HMPEVNT",161,0)
 N Y S Y=""
"RTN","HMPEVNT",162,0)
 I X="HF"  S Y="factor"
"RTN","HMPEVNT",163,0)
 I X="IMM" S Y="immunization"
"RTN","HMPEVNT",164,0)
 I X="XAM" S Y="exam"
"RTN","HMPEVNT",165,0)
 I X="CPT" S Y="cpt"
"RTN","HMPEVNT",166,0)
 I X="PED" S Y="education"
"RTN","HMPEVNT",167,0)
 I X="POV" S Y="pov"
"RTN","HMPEVNT",168,0)
 I X="SK"  S Y="skin"
"RTN","HMPEVNT",169,0)
 Q Y
"RTN","HMPEVNT",170,0)
 ;
"RTN","HMPEVNT",171,0)
ZPCE ; -- old PXK VISIT DATA EVENT protocol listener [not in use]
"RTN","HMPEVNT",172,0)
 N IEN,PX0,PX150,DFN,DA
"RTN","HMPEVNT",173,0)
 S IEN=+$O(^TMP("PXKCO",$J,0)) Q:IEN<1
"RTN","HMPEVNT",174,0)
 S PX0=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,0,"AFTER")) Q:$P(PX0,U,7)="E"
"RTN","HMPEVNT",175,0)
 I PX0="" D POST(DFN,"visit",IEN,"@") Q  ;deleted
"RTN","HMPEVNT",176,0)
 S PX150=$G(^TMP("PXKCO",$J,IEN,"VST",IEN,150,"AFTER")) Q:$P(PX150,U,3)'="P"
"RTN","HMPEVNT",177,0)
 S DFN=+$P(PX0,U,5) Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",178,0)
 D POST(DFN,"visit",IEN)
"RTN","HMPEVNT",179,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"IMM",DA)) Q:DA<1  D POST(DFN,"immunization",DA)
"RTN","HMPEVNT",180,0)
 S DA=0 F  S DA=$O(^TMP("PXKCO",$J,IEN,"HF",DA)) Q:DA<1  D POST(DFN,"factor",DA)
"RTN","HMPEVNT",181,0)
 Q
"RTN","HMPEVNT",182,0)
 ;
"RTN","HMPEVNT",183,0)
XQOR(MSG) ; -- messaging listener (update meds, labs, xrays, consults)
"RTN","HMPEVNT",184,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",185,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",186,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",187,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",188,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",3))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",189,0)
 S DFN=$$PID Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",190,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",191,0)
 . N ORDCNTRL,PKGIFN,ORIFN,PORIFN
"RTN","HMPEVNT",192,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",193,0)
 . ; QUIT if action failed, conversion, purge, or backdoor verify/new
"RTN","HMPEVNT",194,0)
 . ;I ORDCNTRL["U"!("DE^ZC^ZP^ZR^ZV^SN"[ORDCNTRL) Q
"RTN","HMPEVNT",195,0)
 . I ORDCNTRL["U"!("DE^ZP^ZR^ZV^SN"[ORDCNTRL) Q  ;Oct 15, 2015 - PB - modified to trigger an unsolicited sync action when a signed order is discontinued
"RTN","HMPEVNT",196,0)
 . S ORIFN=+$P($P(ORC,"|",3),U),PKGIFN=$P($P(ORC,"|",4),U)
"RTN","HMPEVNT",197,0)
 . ; If this is a child order get the parent and send it too
"RTN","HMPEVNT",198,0)
 . ; PORIFN = PARENT ORDER IFN
"RTN","HMPEVNT",199,0)
 . S PORIFN=+$P($G(^OR(100,ORIFN,3)),U,9)
"RTN","HMPEVNT",200,0)
 . I $$RESULT D  ;update ancillary domains
"RTN","HMPEVNT",201,0)
 .. D POST(DFN,HMPPKG,PKGIFN)
"RTN","HMPEVNT",202,0)
 .. D:HMPPKG="image" POST(DFN,"document",PKGIFN)
"RTN","HMPEVNT",203,0)
 .. I HMPPKG="lab",PKGIFN'["CH",'$$LRTIU(DFN,PKGIFN) D POST(DFN,"document",$P(PKGIFN,";",4,5))
"RTN","HMPEVNT",204,0)
 . I ORIFN,ORDCNTRL'="ZD" D  ;update order(s)
"RTN","HMPEVNT",205,0)
 .. D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",206,0)
 .. I PORIFN D POST(DFN,"order",PORIFN)
"RTN","HMPEVNT",207,0)
 .. N ORIG S ORIG=+$P($G(^OR(100,ORIFN,3)),U,5)
"RTN","HMPEVNT",208,0)
 .. I ORIG D POST(DFN,"order",ORIG) ;need fwd ptrs, sig flds
"RTN","HMPEVNT",209,0)
 Q
"RTN","HMPEVNT",210,0)
 ;
"RTN","HMPEVNT",211,0)
RESULT() ; -- Return 1 or 0, if message broadcasts a result
"RTN","HMPEVNT",212,0)
 ;           [may modify PKGIFN for use in POST]
"RTN","HMPEVNT",213,0)
 N Y S Y=0
"RTN","HMPEVNT",214,0)
 I HMPPKG="consult" S Y=1,PKGIFN=+PKGIFN G RQ
"RTN","HMPEVNT",215,0)
 I HMPPKG="med"     S Y=1,PKGIFN=ORIFN G RQ
"RTN","HMPEVNT",216,0)
 I HMPPKG="lab"     S:ORDCNTRL="RE"&($L(PKGIFN,";")>3) Y=1 G RQ
"RTN","HMPEVNT",217,0)
 I HMPPKG="image"   S:PKGIFN["~" Y=1,PKGIFN=$TR($P(PKGIFN,"~",2,3),"~","-") G RQ
"RTN","HMPEVNT",218,0)
RQ Q Y
"RTN","HMPEVNT",219,0)
 ;
"RTN","HMPEVNT",220,0)
LRTIU(DFN,ORPK) ; -- Return 1 or 0, if LR report is in TIU
"RTN","HMPEVNT",221,0)
 I $G(DFN)<1!'$L($G(ORPK)) Q 0
"RTN","HMPEVNT",222,0)
 I ORPK["CH"!(ORPK["MI") Q 0
"RTN","HMPEVNT",223,0)
 N SUB,IDT,LRDFN
"RTN","HMPEVNT",224,0)
 S SUB=$P(ORPK,";",4),IDT=+$P(ORPK,";",5),LRDFN=+$G(^DPT(+DFN,"LR"))
"RTN","HMPEVNT",225,0)
 I $O(^LR(LRDFN,SUB,IDT,.05,0)) Q 1
"RTN","HMPEVNT",226,0)
 Q 0
"RTN","HMPEVNT",227,0)
 ;
"RTN","HMPEVNT",228,0)
NA(MSG) ; -- messaging listener (new backdoor orders)
"RTN","HMPEVNT",229,0)
 N HMPMSG,HMPPKG,MSH,ORC,DFN
"RTN","HMPEVNT",230,0)
 S HMPMSG=$S($L($G(MSG)):MSG,1:"MSG") Q:'$O(@HMPMSG@(0))
"RTN","HMPEVNT",231,0)
 S MSH=0 F  S MSH=$O(@HMPMSG@(MSH)) Q:MSH'>0  Q:$E(@HMPMSG@(MSH),1,3)="MSH"
"RTN","HMPEVNT",232,0)
 Q:'MSH  Q:'$L($G(@HMPMSG@(MSH)))
"RTN","HMPEVNT",233,0)
 S HMPPKG=$$TYPE($P(@HMPMSG@(MSH),"|",5))  Q:'$L(HMPPKG)
"RTN","HMPEVNT",234,0)
 S DFN=$$PID Q:'(DFN>0)  Q:'$D(^HMP(800000,"AITEM",DFN))  ;DE4496 19 August 2016
"RTN","HMPEVNT",235,0)
 S ORC=MSH F  S ORC=$O(@HMPMSG@(+ORC)) Q:ORC'>0  I $E(@HMPMSG@(ORC),1,3)="ORC" D
"RTN","HMPEVNT",236,0)
 . N ORDCNTRL,ORIFN
"RTN","HMPEVNT",237,0)
 . S ORC=ORC_U_@HMPMSG@(ORC),ORDCNTRL=$TR($P(ORC,"|",2),"@","P")
"RTN","HMPEVNT",238,0)
 . Q:ORDCNTRL'="NA"
"RTN","HMPEVNT",239,0)
 . S ORIFN=+$P($P(ORC,"|",3),U) D POST(DFN,"order",ORIFN)
"RTN","HMPEVNT",240,0)
 . I HMPPKG="med" D POST(DFN,HMPPKG,ORIFN)
"RTN","HMPEVNT",241,0)
 Q
"RTN","HMPEVNT",242,0)
 ;
"RTN","HMPEVNT",243,0)
TYPE(NAME) ; -- Returns type name for XML
"RTN","HMPEVNT",244,0)
 I NAME="LABORATORY"  Q "lab"
"RTN","HMPEVNT",245,0)
 I NAME="PHARMACY"    Q "med"
"RTN","HMPEVNT",246,0)
 I NAME="CONSULTS"    Q "consult"
"RTN","HMPEVNT",247,0)
 I NAME="PROCEDURES"  Q "consult"
"RTN","HMPEVNT",248,0)
 I NAME="RADIOLOGY"   Q "image"
"RTN","HMPEVNT",249,0)
 I NAME="IMAGING"     Q "image"
"RTN","HMPEVNT",250,0)
 I NAME="ORDER ENTRY" Q "order"
"RTN","HMPEVNT",251,0)
 I NAME="DIETETICS"   Q "diet"
"RTN","HMPEVNT",252,0)
 Q ""
"RTN","HMPEVNT",253,0)
 ;
"RTN","HMPEVNT",254,0)
PID() ; -- Returns patient from PID segment in current msg
"RTN","HMPEVNT",255,0)
 N I,SEG,Y S I=MSH
"RTN","HMPEVNT",256,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PID" D  Q
"RTN","HMPEVNT",257,0)
 . S Y=+$P(@HMPMSG@(I),"|",4)
"RTN","HMPEVNT",258,0)
 .;I '$D(^DPT(Y,0)) S:$L($P(@HMPMSG@(I),"|",5)) Y=+$P(@HMPMSG@(I),"|",5) ;alt ID for Lab
"RTN","HMPEVNT",259,0)
 Q Y
"RTN","HMPEVNT",260,0)
 ;
"RTN","HMPEVNT",261,0)
PV1() ; -- Returns patient class from PV1 segment in current msg
"RTN","HMPEVNT",262,0)
 N I,SEG,Y S I=MSH,Y=""
"RTN","HMPEVNT",263,0)
 F  S I=$O(@HMPMSG@(I)) Q:I'>0  S SEG=$E(@HMPMSG@(I),1,3) Q:SEG="ORC"  I SEG="PV1" D  Q
"RTN","HMPEVNT",264,0)
 . S Y=$P(@HMPMSG@(I),"|",3)
"RTN","HMPEVNT",265,0)
 I Y="",$G(ORIFN) S Y=$$GET1^DIQ(100,+ORIFN_",",10,"I")
"RTN","HMPEVNT",266,0)
 Q Y
"RTN","HMPEVNT",267,0)
 ;
"RTN","HMPEVNT",268,0)
GMRA(ACT) ; -- GMRA SIGN-OFF ON DATA protocol listener
"RTN","HMPEVNT",269,0)
 ;   also GMRA ENTERED IN ERROR [ACT=@]
"RTN","HMPEVNT",270,0)
 N DFN,IEN
"RTN","HMPEVNT",271,0)
 S DFN=+$G(GMRAPA(0)),IEN=+$G(GMRAPA)
"RTN","HMPEVNT",272,0)
 D POST(DFN,"allergy",IEN,$G(ACT))
"RTN","HMPEVNT",273,0)
 Q
"RTN","HMPEVNT",274,0)
 ;
"RTN","HMPEVNT",275,0)
GMPL(DFN,IEN) ; -- GMPL EVENT protocol listener
"RTN","HMPEVNT",276,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",277,0)
 ;N ACT S ACT=$S($P($G(^AUPNPROB(IEN,1)),U,2)="H":"@",1:"")
"RTN","HMPEVNT",278,0)
 D POST(DFN,"problem",IEN) ;,ACT)
"RTN","HMPEVNT",279,0)
 Q
"RTN","HMPEVNT",280,0)
 ;
"RTN","HMPEVNT",281,0)
GMRV(DFN,IEN,ERR) ; -- Vital Measurement file #120.5 AHMP index
"RTN","HMPEVNT",282,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",283,0)
 N ACT S ACT=$S($G(ERR):"@",1:"")
"RTN","HMPEVNT",284,0)
 D POST(DFN,"vital",IEN,ACT)
"RTN","HMPEVNT",285,0)
 Q
"RTN","HMPEVNT",286,0)
 ;
"RTN","HMPEVNT",287,0)
MDC(OBS) ; -- MDC OBSERVATION UPDATE protocol listener
"RTN","HMPEVNT",288,0)
 N DFN,ID,ACT
"RTN","HMPEVNT",289,0)
 S DFN=+$G(OBS("PATIENT_ID","I")) Q:'(DFN>0)  ;DE4496 19 August 2016
"RTN","HMPEVNT",290,0)
 S ID=$G(OBS("OBS_ID","I")) Q:'$L(ID)
"RTN","HMPEVNT",291,0)
 S ACT=$S('$G(OBS("STATUS","I")):"@",1:"")
"RTN","HMPEVNT",292,0)
 D POST(DFN,"obs",ID,ACT)
"RTN","HMPEVNT",293,0)
 I $G(OBS("DOMAIN","VITALS")) D POST(DFN,"vital",ID,ACT)
"RTN","HMPEVNT",294,0)
 Q
"RTN","HMPEVNT",295,0)
 ;
"RTN","HMPEVNT",296,0)
CP(DFN,ID,ACT) ; -- CP Transaction file #702 AHMP index
"RTN","HMPEVNT",297,0)
 S DFN=+$G(DFN),ID=$G(ID)
"RTN","HMPEVNT",298,0)
 D POST(DFN,"document",ID,$G(ACT)) ;de3944 also need to generate document for procedure to link results to
"RTN","HMPEVNT",299,0)
 D POST(DFN,"procedure",ID,$G(ACT))
"RTN","HMPEVNT",300,0)
 Q
"RTN","HMPEVNT",301,0)
 ;
"RTN","HMPEVNT",302,0)
SR(DFN,IEN,ACT) ; -- Surgery [SROERR] update
"RTN","HMPEVNT",303,0)
 S DFN=+$G(DFN),IEN=+$G(IEN)
"RTN","HMPEVNT",304,0)
 D POST(DFN,"surgery",IEN,$G(ACT))
"RTN","HMPEVNT",305,0)
 Q
"RTN","HMPEVNT",306,0)
 ;*s68 - BEGINS
"RTN","HMPEVNT",307,0)
TIU(DFN,IEN) ; -- TIU Document file #8925 AHMP index
"RTN","HMPEVNT",308,0)
 N ACT,STS,DAD,REPCAT
"RTN","HMPEVNT",309,0)
 S DFN=+$G(DFN),IEN=+$G(IEN),ACT=""
"RTN","HMPEVNT",310,0)
 S STS=$G(X(2)),DAD=$G(X(3)) ;X = FM data array for index
"RTN","HMPEVNT",311,0)
 S:DAD IEN=DAD I 'DAD D      ;if addendum, repull entire note
"RTN","HMPEVNT",312,0)
 . ;I STS=15 S ACT="@"       ;retracted; DE3693 - do not delete note from JDS if retracted, March 18, 2016
"RTN","HMPEVNT",313,0)
 . I $G(X2(1))="" S ACT="@"  ;deleted (new title = null)
"RTN","HMPEVNT",314,0)
 D POST(DFN,"document",IEN,ACT)
"RTN","HMPEVNT",315,0)
 ;DE3944 update surgery based on reports
"RTN","HMPEVNT",316,0)
 S REPCAT=$$CATG^HMPDTIU($$GET1^DIQ(8925,IEN_",",".01","I"))
"RTN","HMPEVNT",317,0)
 I REPCAT="SR" D
"RTN","HMPEVNT",318,0)
 . N REPCASE S REPCASE=$$GET1^DIQ(8925,IEN_",","1701","I")
"RTN","HMPEVNT",319,0)
 . S REPCASE=$P(REPCASE,"Case #: ",2)
"RTN","HMPEVNT",320,0)
 . I REPCASE D POST(DFN,"surgery",REPCASE)
"RTN","HMPEVNT",321,0)
 ;DE3241 - If TIU update changes CWADF values, trigger patient update so change get in fresh. stream
"RTN","HMPEVNT",322,0)
 ;If this note has a parent document type of "CLINICAL WARNING", "CRISIS NOTE", or "ADVANCE DIRECTIVE"...
"RTN","HMPEVNT",323,0)
 ;parent document type is "Document Class"...
"RTN","HMPEVNT",324,0)
 ;AND this note's status is COMPLETED or AMENDED
"RTN","HMPEVNT",325,0)
 ;THEN this document may update the C, W, or D CWADF values and patient fresh. stream update needs to be triggered
"RTN","HMPEVNT",326,0)
 N DADTYPE,DADNAME,STATUS
"RTN","HMPEVNT",327,0)
 S DADTYPE=$$GET1^DIQ(8925,IEN_",",".04","I") Q:'DADTYPE  Q:$$GET1^DIQ(8925.1,DADTYPE_",",".04","I")'="DC"
"RTN","HMPEVNT",328,0)
 S DADNAME=$$GET1^DIQ(8925.1,DADTYPE_",",".01")
"RTN","HMPEVNT",329,0)
 I $S(DADNAME="CLINICAL WARNING":0,DADNAME="CRISIS NOTE":0,DADNAME="ADVANCE DIRECTIVE":0,1:1) Q
"RTN","HMPEVNT",330,0)
 D POST(DFN,"patient",DFN)
"RTN","HMPEVNT",331,0)
 Q
"RTN","HMPEVNT",332,0)
 ; Deprecated calls
"RTN","HMPEVNT",333,0)
DOCDEF ;
"RTN","HMPEVNT",334,0)
DOCITEM ;
"RTN","HMPEVNT",335,0)
USR ;
"RTN","HMPEVNT",336,0)
 Q
"RTN","HMPEVNT",337,0)
 ; *s68 - END
"RTN","HMPEVNT",338,0)
PSB(PSBIEN) ; -- HMP PSB EVENTS protocol listener (BCMA) /DE2818
"RTN","HMPEVNT",339,0)
 N IEN,DFN,ORPK,TYPE,ORIFN
"RTN","HMPEVNT",340,0)
 S IEN=$S($P($G(PSBIEN),",",2)'="":+$P(PSBIEN,",",2),$G(PSBIEN)="+1":+$G(PSBIEN(1)),1:+$G(PSBIEN))
"RTN","HMPEVNT",341,0)
 S DFN=+$G(^PSB(53.79,IEN,0)),ORPK=$P($G(^(.1)),U)
"RTN","HMPEVNT",342,0)
 Q:'(DFN>0)  Q:ORPK<1  S TYPE=$S(ORPK["V":"IV",ORPK["U":5,1:"") Q:TYPE=""  ;DE4496 19 August 2016
"RTN","HMPEVNT",343,0)
 S ORIFN=$$ORDRNUM^PSSUTLA2(DFN,TYPE,+ORPK)  ;DE4382 get order number from PSSUTLA2. ICR 6426
"RTN","HMPEVNT",344,0)
 D:ORIFN POST(DFN,"med",ORIFN)
"RTN","HMPEVNT",345,0)
 Q
"RTN","HMPEVNT",346,0)
 ;
"RTN","HMPEVNT",347,0)
XU(IEN,ACT) ; -- XU USER ADD/CHANGE/TERMINATE option listener
"RTN","HMPEVNT",348,0)
 S IEN=+$G(IEN) Q:IEN<1
"RTN","HMPEVNT",349,0)
 D POSTX("user",IEN,$G(ACT))
"RTN","HMPEVNT",350,0)
 Q
"RTN","HMPEVNT",351,0)
 ;
"RTN","HMPEVNT",352,0)
POST(DFN,TYPE,ID,ACT) ; -- track updated patient data
"RTN","HMPEVNT",353,0)
 S DFN=+$G(DFN),TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",354,0)
 Q:'(DFN>0)  Q:TYPE=""  Q:ID=""   ;incomplete request - DE4496 19 August 2016
"RTN","HMPEVNT",355,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",356,0)
 Q:'$D(^HMP(800000,"AITEM",DFN))  ;patient not subscribed to
"RTN","HMPEVNT",357,0)
 N HMPDT S HMPDT="HMP-"_DT
"RTN","HMPEVNT",358,0)
 ;S ^XTMP(HMPDT,$$NEXT)=DFN_U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",359,0)
 N NODES
"RTN","HMPEVNT",360,0)
 D POST^HMPDJFS(DFN,TYPE,ID,$G(ACT),"",.NODES)
"RTN","HMPEVNT",361,0)
 Q
"RTN","HMPEVNT",362,0)
 ;
"RTN","HMPEVNT",363,0)
POSTX(TYPE,ID,ACT) ; -- track updated reference items
"RTN","HMPEVNT",364,0)
 S TYPE=$G(TYPE),ID=$G(ID)
"RTN","HMPEVNT",365,0)
 Q:TYPE=""  Q:ID=""            ;incomplete request
"RTN","HMPEVNT",366,0)
 Q:$G(^XTMP("HMP-off",TYPE))   ;domain turned 'off'
"RTN","HMPEVNT",367,0)
 N HMPDT S HMPDT="HMP-"_DT ;"HMPEF-"_DT
"RTN","HMPEVNT",368,0)
 ;S ^XTMP(HMPDT,$$NEXT)=U_TYPE_U_ID_U_$G(ACT)
"RTN","HMPEVNT",369,0)
 N NODES
"RTN","HMPEVNT",370,0)
 D POST^HMPDJFS("OPD",TYPE,ID,$G(ACT),"",.NODES)
"RTN","HMPEVNT",371,0)
 Q
"RTN","HMPEVNT",372,0)
 ;
"RTN","HMPEVNT",373,0)
NEXT() ; -- Return next sequential number in ^XTMP(HMPDT,n)
"RTN","HMPEVNT",374,0)
 L +^XTMP(HMPDT):5 ;I'$T ??
"RTN","HMPEVNT",375,0)
 N Y S Y=+$O(^XTMP(HMPDT,"A"),-1)+1
"RTN","HMPEVNT",376,0)
 I '$D(^XTMP(HMPDT,0)) S ^(0)=$$FMADD^XLFDT(DT,3)_U_DT_"^HMP Updates"
"RTN","HMPEVNT",377,0)
 L -^XTMP(HMPDT)
"RTN","HMPEVNT",378,0)
 Q Y
"RTN","HMPEVNT",379,0)
 ;
"RTN","HMPEVNT",380,0)
HTTP(URL,DFN,TYPE,ID) ; -- send message that TYPE/ID has been updated [not in use]
"RTN","HMPEVNT",381,0)
 N DIV,X,HMPX
"RTN","HMPEVNT",382,0)
 S DFN=+$G(DFN) Q:'(DFN>0)  ;patient req'd - DE4496 19 August 2016
"RTN","HMPEVNT",383,0)
 S DIV=$P($$SITE^VASITE,U,3) ;station number
"RTN","HMPEVNT",384,0)
 S URL=$G(URL)_"?division="_DIV_"&dfn="_+$G(DFN)
"RTN","HMPEVNT",385,0)
 I $L($G(TYPE)) S URL=URL_"&type="_TYPE
"RTN","HMPEVNT",386,0)
 I $L($G(ID))   S URL=URL_"&id="_ID
"RTN","HMPEVNT",387,0)
 S ^XTMP("HMP",DFN,"HTTP")=$H
"RTN","HMPEVNT",388,0)
 S X=$$GETURL^XTHC10(URL,,"HMPX")
"RTN","HMPEVNT",389,0)
 ; I X>200 = ERROR
"RTN","HMPEVNT",390,0)
 Q
"RTN","HMPEVNT",391,0)
DGREG ; register a newly registered patient in eHMP during the initial registration - Sep 29, 2015 - Phil Burkhalter
"RTN","HMPEVNT",392,0)
 Q:'($G(DFN)>0)  ;DE4496 19 August 2016
"RTN","HMPEVNT",393,0)
 Q:'$D(^DPT(DFN,0))  ; Quit if patient is not in the patient file
"RTN","HMPEVNT",394,0)
 ;check the XPAR for HMP Auto Enrollment with newly registered patients, 
"RTN","HMPEVNT",395,0)
 ;if set to yes for automatically adding a new HMP subscription:
"RTN","HMPEVNT",396,0)
 ;add the patient to HMP(800000 and to a pt-select update. Only want to do an update for the one patient if possible.
"RTN","HMPEVNT",397,0)
 ;if set to no for automatically adding a new HMP subscrption:
"RTN","HMPEVNT",398,0)
 ;only do the pt-select update, DO NOT add to the HMP subscription
"RTN","HMPEVNT",399,0)
 S X=$$GET^XPAR("SYS","HMP AUTOSYNC REG")  ;X=1 Yes auto subscribe patient to HMP, X="" or X=0 No don't auto subscribe the patient to HMP
"RTN","HMPEVNT",400,0)
 I $G(X)'=1 D POSTX(DFN,"patient",DFN) Q  ; Do pt-select
"RTN","HMPEVNT",401,0)
 I $G(X)=1 D
"RTN","HMPEVNT",402,0)
 .Q:$D(^HMP(800000,"AITEM",DFN))  ; Quit if the patient has already been added to the eHMP subscription
"RTN","HMPEVNT",403,0)
 .S ARGS("command")="putPtSubscription",ARGS("localId")=$G(DFN)
"RTN","HMPEVNT",404,0)
 .;DE3327
"RTN","HMPEVNT",405,0)
 .I '$L($G(ARGS("server"))) S ARGS("server")=$P($G(^HMP(800000,1,0)),"^")  ; See comments at the top
"RTN","HMPEVNT",406,0)
 .D API^HMPDJFS(.RSLT,.ARGS) D POSTX(DFN,"patient",DFN)  ; add patient to HMP(800000 and if patient is added, add patient to the freshness stream
"RTN","HMPEVNT",407,0)
 .K ARGS,RSLT
"RTN","HMPEVNT",408,0)
 K X
"RTN","HMPEVNT",409,0)
 Q
"RTN","HMPHTTP")
0^49^B14396779^B14150503
"RTN","HMPHTTP",1,0)
HMPHTTP ;SLC/MKB,ASMR/BL,RRB,CK - HTTP interface;Aug 29, 2016 20:06:27
"RTN","HMPHTTP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,3**;May 15, 2016;Build 15
"RTN","HMPHTTP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPHTTP",4,0)
 ;
"RTN","HMPHTTP",5,0)
 ; External References          DBIA#
"RTN","HMPHTTP",6,0)
 ; -------------------          -----
"RTN","HMPHTTP",7,0)
 ; %ZTLOAD                      10063
"RTN","HMPHTTP",8,0)
 ; DIR                          10026
"RTN","HMPHTTP",9,0)
 ; VASITE                       10112
"RTN","HMPHTTP",10,0)
 ; XLFCRC                        3156
"RTN","HMPHTTP",11,0)
 ; XLFUTL                        2622
"RTN","HMPHTTP",12,0)
 ; XPAR                          2263
"RTN","HMPHTTP",13,0)
 ; XTHC10                        5515
"RTN","HMPHTTP",14,0)
 ; XUPARAM                       2541
"RTN","HMPHTTP",15,0)
 Q
"RTN","HMPHTTP",16,0)
 ;
"RTN","HMPHTTP",17,0)
EN ; -- manage the background job
"RTN","HMPHTTP",18,0)
 N ZTSK,STS
"RTN","HMPHTTP",19,0)
 S ZTSK=+$G(^XTMP("HMP","ZTSK")),STS=$$STS
"RTN","HMPHTTP",20,0)
 W !,?24,"--- HMP Patient Data Monitor ---"
"RTN","HMPHTTP",21,0)
 W !!,"Task"_$S(ZTSK:" #"_ZTSK,1:"")_" is "_$P(STS,U,2)_".",!
"RTN","HMPHTTP",22,0)
 ;
"RTN","HMPHTTP",23,0)
 I ZTSK,+STS=1!(+STS=2) D:$$STOP  Q
"RTN","HMPHTTP",24,0)
 . N X S X=$$ASKSTOP^%ZTLOAD(ZTSK)
"RTN","HMPHTTP",25,0)
 . W !,$P(X,U,2),!
"RTN","HMPHTTP",26,0)
 ;
"RTN","HMPHTTP",27,0)
 I $$START D
"RTN","HMPHTTP",28,0)
 . W !!,"Starting HMP Patient Data Monitor ... " D QUE
"RTN","HMPHTTP",29,0)
 . I $G(ZTSK) W "task #"_ZTSK_" started.",!
"RTN","HMPHTTP",30,0)
 . E  W !,"ERROR: task NOT created.  Try again later.",!
"RTN","HMPHTTP",31,0)
 . S ^XTMP("HMP","ZTSK")=$G(ZTSK)
"RTN","HMPHTTP",32,0)
 Q
"RTN","HMPHTTP",33,0)
 ;
"RTN","HMPHTTP",34,0)
STS() ; -- get the status of ZTSK
"RTN","HMPHTTP",35,0)
 D STAT^%ZTLOAD
"RTN","HMPHTTP",36,0)
 N Y S Y=+$G(ZTSK(1))_U_$G(ZTSK(2))
"RTN","HMPHTTP",37,0)
 Q Y
"RTN","HMPHTTP",38,0)
 ;
"RTN","HMPHTTP",39,0)
STOP() ; -- stop the task?
"RTN","HMPHTTP",40,0)
 N X,Y,DIR
"RTN","HMPHTTP",41,0)
 S DIR("A")="Do you want to stop the data monitor? ",DIR(0)="YA",DIR("B")="NO"
"RTN","HMPHTTP",42,0)
 S DIR("?",1)="Enter YES to stop or cancel the data monitor; please restart ASAP!"
"RTN","HMPHTTP",43,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","HMPHTTP",44,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","HMPHTTP",45,0)
 D ^DIR S:Y<1 Y=0
"RTN","HMPHTTP",46,0)
 Q Y
"RTN","HMPHTTP",47,0)
 ;
"RTN","HMPHTTP",48,0)
START() ; -- [re]start the task?
"RTN","HMPHTTP",49,0)
 N X,Y,DIR
"RTN","HMPHTTP",50,0)
 S DIR(0)="YA",DIR("B")="YES"
"RTN","HMPHTTP",51,0)
 S DIR("A")="Do you want to "_$S(STS:"re",1:"")_"start the data monitor? "
"RTN","HMPHTTP",52,0)
 S DIR("?",1)="Enter YES to "_$S(STS:"re",1:"")_"start the HMP Patient Data Monitor."
"RTN","HMPHTTP",53,0)
 S DIR("?",3)="This job must be running in the background for AViVA to be notified"
"RTN","HMPHTTP",54,0)
 S DIR("?")="when new patient data is available.",DIR("?",2)="  "
"RTN","HMPHTTP",55,0)
 D ^DIR S:Y<1 Y=0
"RTN","HMPHTTP",56,0)
 Q Y
"RTN","HMPHTTP",57,0)
 ;
"RTN","HMPHTTP",58,0)
QUE ; -- create the background task: returns ZTSK
"RTN","HMPHTTP",59,0)
 N IO,IOP,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTKIL,ZTSYNC,ZTSAVE,%ZIS
"RTN","HMPHTTP",60,0)
 S %ZIS="0H",IOP="NULL" D ^%ZIS I POP W !,"Null Device Not Found" Q
"RTN","HMPHTTP",61,0)
 S ZTDESC="HMP new data monitor for AViVA",ZTDTH=$H,ZTIO=""
"RTN","HMPHTTP",62,0)
 S ZTRTN="POKE^HMPHTTP" K ZTSK
"RTN","HMPHTTP",63,0)
 D ^%ZTLOAD
"RTN","HMPHTTP",64,0)
 Q
"RTN","HMPHTTP",65,0)
 ;
"RTN","HMPHTTP",66,0)
POKE ; -- background job to poke the client when new data is available
"RTN","HMPHTTP",67,0)
 ; ^XTMP("HMP",DFN,TYPE,ID) = new data since last update
"RTN","HMPHTTP",68,0)
 N DIV,ID,DFN,DATA,IOP,X,DA,TOKEN,NEW K ZTSTOP,ZTREQ
"RTN","HMPHTTP",69,0)
 S IOP="NULL" D ^%ZIS
"RTN","HMPHTTP",70,0)
 S ID=(+$H)+$P($H,",",2)
"RTN","HMPHTTP",71,0)
 S DFN=0 F  S DFN=$O(^XTMP("HMP",DFN)) Q:'(DFN>0)  I $D(^(DFN))>9 D  ;DE4496 19 August 2016
"RTN","HMPHTTP",72,0)
 . L +^XTMP("HMP",DFN):5 Q:'$T  ;try again next cycle
"RTN","HMPHTTP",73,0)
 . K DATA M DATA=^XTMP("HMP",DFN)
"RTN","HMPHTTP",74,0)
 . S X=$G(^XTMP("HMP",DFN)) K ^(DFN) S ^(DFN)=X ;clear list, keep subscription
"RTN","HMPHTTP",75,0)
 . L -^XTMP("HMP",DFN)
"RTN","HMPHTTP",76,0)
 . ; add to list for URL
"RTN","HMPHTTP",77,0)
 . S DA=0 F  S DA=$O(^HMP(800000,"ADFN",DFN,DA)) Q:DA<1  D
"RTN","HMPHTTP",78,0)
 .. S TOKEN=DA_"~"_ID,NEW(TOKEN)=""
"RTN","HMPHTTP",79,0)
 .. M ^XTMP("HMPX",TOKEN,DFN)=DATA
"RTN","HMPHTTP",80,0)
 D SEND(.NEW)
"RTN","HMPHTTP",81,0)
 I $$S^%ZTLOAD S ZTSTOP=1,ZTREQ="@" Q
"RTN","HMPHTTP",82,0)
 D HANG S ZTREQ="" ;re-queue
"RTN","HMPHTTP",83,0)
 Q
"RTN","HMPHTTP",84,0)
 ;
"RTN","HMPHTTP",85,0)
SEND(LIST) ; send each list ID to its URL
"RTN","HMPHTTP",86,0)
 N SYS,ID,DA,URL,X
"RTN","HMPHTTP",87,0)
 S SYS=$$SYS^HMPUTILS
"RTN","HMPHTTP",88,0)
 ; DIV=$P($$SITE^VASITE,U,3) ;station#
"RTN","HMPHTTP",89,0)
 S ID="" F  S ID=$O(LIST(ID)) Q:ID=""  D
"RTN","HMPHTTP",90,0)
 . S DA=+ID,URL=$G(^HMP(800000,DA,.1)) Q:URL=""
"RTN","HMPHTTP",91,0)
 . S URL=URL_"?vistaId="_SYS_"&id="_ID
"RTN","HMPHTTP",92,0)
 . S X=$$GETURL^XTHC10(URL,,"HMPX") ;I X>200 = ERROR
"RTN","HMPHTTP",93,0)
 Q
"RTN","HMPHTTP",94,0)
 ;
"RTN","HMPHTTP",95,0)
HANG ; -- wait #seconds
"RTN","HMPHTTP",96,0)
 N X S X=$$GET^XPAR("ALL","HMP TASK WAIT TIME") S:'X X=99
"RTN","HMPHTTP",97,0)
 H X
"RTN","HMPHTTP",98,0)
 Q
"RTN","HMPHTTP",99,0)
 ;
"RTN","HMPHTTP",100,0)
KILL ; -- kill/reset ^HMP(800000) for testing
"RTN","HMPHTTP",101,0)
 K ^HMP(800000)
"RTN","HMPHTTP",102,0)
 S ^HMP(800000,0)="HMP SUBSCRIPTION^800000^^"
"RTN","HMPHTTP",103,0)
 Q
"RTN","HMPLOG")
0^50^B23425435^B18006538
"RTN","HMPLOG",1,0)
HMPLOG ; ASMR/hrubovcak - eHMP logging support ;Aug 29, 2016 20:06:27
"RTN","HMPLOG",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;June 13, 2016;Build 15
"RTN","HMPLOG",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPLOG",4,0)
 ;
"RTN","HMPLOG",5,0)
 ; routine created 13 June 2016 for US15658
"RTN","HMPLOG",6,0)
 Q
"RTN","HMPLOG",7,0)
 ;
"RTN","HMPLOG",8,0)
NWNTRY(HMPDTIM,HMPTYP,HMPLOG) ; function, create new entry in HMP EVENT file (#80003)
"RTN","HMPLOG",9,0)
 ; returns new entry IEN
"RTN","HMPLOG",10,0)
 ; HMPDTIM - optional FileMan format date/time.  Must be precise and have time with seconds.
"RTN","HMPLOG",11,0)
 ;   defaults to NOW if not passed or invalid
"RTN","HMPLOG",12,0)
 ; HMPTYP - optional event type, if missing, defaults to O (other)
"RTN","HMPLOG",13,0)
 ; HMPLOG - event log passed by reference, traversed by $QUERY for word-processing text
"RTN","HMPLOG",14,0)
 ;  array is optional, but should be passed with calling routine name and module, at minimum.
"RTN","HMPLOG",15,0)
 ;  this array will remain unchanged
"RTN","HMPLOG",16,0)
 ;
"RTN","HMPLOG",17,0)
 Q:'$L($G(^HMPLOG(800003,0))) -1  ; file not installed, return out-of-bounds value
"RTN","HMPLOG",18,0)
 ;
"RTN","HMPLOG",19,0)
 D DT^DICRW  ; ensure minimum symbol table defined
"RTN","HMPLOG",20,0)
 N G,H,HMPERR,HMPLGFDA,HMPLGIEN,HMPWPTXT,IENS,J,X,Y
"RTN","HMPLOG",21,0)
 ; handle entry creation for speed
"RTN","HMPLOG",22,0)
 L +^HMPLOG(800003,0):DILOCKTM  ; exclusive access for new IEN
"RTN","HMPLOG",23,0)
 S X=$G(^HMPLOG(800003,0)),J=$P(X,U,4)+1,$P(X,U,4)=J,HMPLGIEN=$P(X,U,3)+1\1  ; make it an integer
"RTN","HMPLOG",24,0)
 F  Q:'$D(^HMPLOG(800003,HMPLGIEN))  S HMPLGIEN=HMPLGIEN+1   ; entry IEN to be returned
"RTN","HMPLOG",25,0)
 S ^HMPLOG(800003,HMPLGIEN,0)=HMPLGIEN,^HMPLOG(800003,"B",HMPLGIEN,HMPLGIEN)=""  ; new entry and cross-ref.
"RTN","HMPLOG",26,0)
 S $P(X,U,3)=HMPLGIEN,^HMPLOG(800003,0)=X L -^HMPLOG(800003,0)  ; update zero node and unlock
"RTN","HMPLOG",27,0)
 ;
"RTN","HMPLOG",28,0)
 S J=0 D  ; create word-processing text
"RTN","HMPLOG",29,0)
 . I $G(HMPLOG)]"" S J=J+1,HMPWPTXT(J,0)=HMPLOG  ; if root has text, save it
"RTN","HMPLOG",30,0)
 . S Y="HMPLOG" F  S Y=$Q(@Y) Q:Y=""  S X=@Y,J=J+1,HMPWPTXT(J,0)=$S($L(X):X,1:" ")  ; replace blanks with spaces
"RTN","HMPLOG",31,0)
 . S X=$S($G(DUZ):" DUZ: "_DUZ,1:"")_"   $job: "_$J_"   $i: "_$I_$S($G(ZTSK):"   ZTSK: "_ZTSK,1:"")  ; job info
"RTN","HMPLOG",32,0)
 . S J=J+1,HMPWPTXT(J,0)=X,J=J+1,HMPWPTXT(J,0)=" logged: "_$$HTE^XLFDT($H)
"RTN","HMPLOG",33,0)
 ;
"RTN","HMPLOG",34,0)
 S IENS=HMPLGIEN_","
"RTN","HMPLOG",35,0)
 S Y=$G(HMPDTIM) S:'((Y?7N)!(Y?7N1"."1.6N)&$E(Y,6,7)) Y=$$NOW^XLFDT  ; must be precise date, otherwise NOW
"RTN","HMPLOG",36,0)
 S:'$P(Y,".",2) Y=Y+.000001  ; if no seconds, make time 00:00:01
"RTN","HMPLOG",37,0)
 S HMPLGFDA(800003,IENS,.02)=Y  ; EVENT DATE/TIME
"RTN","HMPLOG",38,0)
 ;
"RTN","HMPLOG",39,0)
 S Y=$E($G(HMPTYP)) S:'(Y?1U) Y="O"  ; default to other
"RTN","HMPLOG",40,0)
 S HMPLGFDA(800003,IENS,.03)=Y  ; TYPE OF EVENT
"RTN","HMPLOG",41,0)
 ;
"RTN","HMPLOG",42,0)
 D FILE^DIE("S","HMPLGFDA","HMPERR")  ; "S" flag to save HMPLGFDA array
"RTN","HMPLOG",43,0)
 ;
"RTN","HMPLOG",44,0)
 I $D(HMPERR("DIERR")) D  ; save new entry error data, just in case (should not happen)
"RTN","HMPLOG",45,0)
 . S H=$H,J=0,G="HMPERR(""DIERR"")"
"RTN","HMPLOG",46,0)
 . S ^TMP($T(+0),$J,H,"NEW",0)=" FileMan error, adding HMP EVENT"
"RTN","HMPLOG",47,0)
 . F  S G=$Q(@G) Q:'(G["DIERR")  S J=J+1,^TMP($T(+0),$J,H,"NEW",J)=@G
"RTN","HMPLOG",48,0)
 ; add word-processing text
"RTN","HMPLOG",49,0)
 K HMPERR D WP^DIE(800003,IENS,1,"","HMPWPTXT","HMPERR")
"RTN","HMPLOG",50,0)
  I $D(HMPERR("DIERR")) D  ; save w-p error data, just in case (should not happen)
"RTN","HMPLOG",51,0)
 . S H=$H,J=0,G="HMPERR(""DIERR"")"
"RTN","HMPLOG",52,0)
 . S ^TMP($T(+0),$J,H,"W-P",0)=" FileMan error, adding w-p text"
"RTN","HMPLOG",53,0)
 . F  S G=$Q(@G) Q:'(G["DIERR")  S J=J+1,^TMP($T(+0),$J,H,"W-P",J)=@G
"RTN","HMPLOG",54,0)
 ;
"RTN","HMPLOG",55,0)
 Q HMPLGIEN  ; return new log IEN
"RTN","HMPLOG",56,0)
 ;
"RTN","HMPLOG",57,0)
PRGLOG ; purge HMP EVENT file (#800003) entries older than 61 days
"RTN","HMPLOG",58,0)
 ;
"RTN","HMPLOG",59,0)
 Q:'$L($G(^HMPLOG(800003,0)))  ; file not installed
"RTN","HMPLOG",60,0)
 D DT^DICRW  ; minimal symbol table
"RTN","HMPLOG",61,0)
 ;
"RTN","HMPLOG",62,0)
 N DA,DIK,HMP,HMPRGLOG,J,X,Y
"RTN","HMPLOG",63,0)
 S J=1,HMPRGLOG(J,0)="HMP EVENT log purge started"
"RTN","HMPLOG",64,0)
 S J=J+1,HMPRGLOG(J,0)=" calling routine: PRGLOG^"_$T(+0)
"RTN","HMPLOG",65,0)
 S Y=$NA(^HMPLOG(800003,0))  ; record zero node
"RTN","HMPLOG",66,0)
 S J=J+1,HMPRGLOG(J,0)=" "_Y_"="_$C(34)_$G(^HMPLOG(800003,0))_$C(34)
"RTN","HMPLOG",67,0)
 S Y=$$NWNTRY($$NOW^XLFDT,"I",.HMPRGLOG)  ; log the purge start
"RTN","HMPLOG",68,0)
 ;
"RTN","HMPLOG",69,0)
 S HMP("T-61")=$$HTFM^XLFDT($H-61)  ; 61 days ago, FileMan format
"RTN","HMPLOG",70,0)
 S HMP("DEL")=0  ; deleted count
"RTN","HMPLOG",71,0)
 S HMP("TTL")=0  ; total checked
"RTN","HMPLOG",72,0)
 S DIK="^HMPLOG(800003,"  ; file root
"RTN","HMPLOG",73,0)
 S J=0 F  S J=$O(^HMPLOG(800003,J)) Q:'J  D
"RTN","HMPLOG",74,0)
 . S HMP("TTL")=HMP("TTL")+1,Y=$G(^HMPLOG(800003,J,0)) Q:$P(Y,U,2)>HMP("T-61")
"RTN","HMPLOG",75,0)
 . S DA=J,HMP("DEL")=HMP("DEL")+1
"RTN","HMPLOG",76,0)
 . N J D ^DIK  ; protect J before ^DIK call
"RTN","HMPLOG",77,0)
 ;
"RTN","HMPLOG",78,0)
 K HMPRGLOG S J=1,HMPRGLOG(J,0)="HMP EVENT log purge finished"
"RTN","HMPLOG",79,0)
 S J=J+1,HMPRGLOG(J,0)=" Entries checked: "_HMP("TTL")
"RTN","HMPLOG",80,0)
 S J=J+1,HMPRGLOG(J,0)=" Entries deleted: "_HMP("DEL")
"RTN","HMPLOG",81,0)
 S J=J+1,HMPRGLOG(J,0)=" calling routine: PRGLOG^"_$T(+0)
"RTN","HMPLOG",82,0)
 S Y=$$NWNTRY($$NOW^XLFDT,"I",.HMPRGLOG)  ; log the purge end
"RTN","HMPLOG",83,0)
 Q
"RTN","HMPLOG",84,0)
 ;
"RTN","HMPLOG",85,0)
 ;DE5111 begin
"RTN","HMPLOG",86,0)
STK2TXT(STKTXT) ; STKTXT passed by reference, no input, 11 August 2016
"RTN","HMPLOG",87,0)
 ; returns STKTXT where STKTXT(1) is the top, STKTXT(2) is next level, etc.
"RTN","HMPLOG",88,0)
 ; top 2 stack levels ignored because they're in this subroutine
"RTN","HMPLOG",89,0)
 K STKTXT N C,J S C=1
"RTN","HMPLOG",90,0)
 F J=$ST-2:-1:0 S C=C+1,STKTXT(C)=" $st("_J_"): "_$ST(J,"PLACE")_">"_$ST(J,"MCODE")  ; save $stack, skip top 2 levelS
"RTN","HMPLOG",91,0)
 Q
"RTN","HMPLOG",92,0)
 ;DE5111 end
"RTN","HMPLOG",93,0)
 ;DE4496 begin, module created 19 August 2016
"RTN","HMPLOG",94,0)
LOGDPT(HMPDFN) ; log missing Patient information in HMP EVENT
"RTN","HMPLOG",95,0)
 N C,J,TXT
"RTN","HMPLOG",96,0)
 S C=1,TXT(C)=" missing patient DFN: "_$G(HMPDFN)  ; save missing Patient data
"RTN","HMPLOG",97,0)
 S C=C+1,TXT(C)="  calling code from $stack: "
"RTN","HMPLOG",98,0)
 F J=$ST-1:-1:0 S C=C+1,TXT(C)=" $st("_J_"): "_$ST(J,"PLACE")_">"_$ST(J,"MCODE")  ; save $stack, skip top level
"RTN","HMPLOG",99,0)
 S C=C+1,TXT(C)=" "  ; blank line following word-processing text
"RTN","HMPLOG",100,0)
 S J=$$NWNTRY($$NOW^XLFDT,"M",.TXT)  ; log event as type "missing"
"RTN","HMPLOG",101,0)
 ;DE4496 end
"RTN","HMPLOG",102,0)
 ;
"RTN","HMPMETA")
0^18^B82380143^B192449640
"RTN","HMPMETA",1,0)
HMPMETA ;SLC/PJH,ASM/RRB,CPC-collect domains, uids, & stamptimes ;Jan 20, 2017 17:18:18
"RTN","HMPMETA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;Sep 01, 2011;Build 15
"RTN","HMPMETA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMETA",4,0)
 ;
"RTN","HMPMETA",5,0)
 Q  ; no entry from top
"RTN","HMPMETA",6,0)
 ;
"RTN","HMPMETA",7,0)
 ; New routine for US6734
"RTN","HMPMETA",8,0)
 ; DE6644 - fixes and general code cleanup, 7 September 2016
"RTN","HMPMETA",9,0)
 ;
"RTN","HMPMETA",10,0)
ADD(HMPDMNM,HMPUID,HMPSTMP) ; Build array for metastamp - called from HMPDJ0* routines
"RTN","HMPMETA",11,0)
 I ($G(HMPUID)="")!($G(HMPDMNM)="") Q
"RTN","HMPMETA",12,0)
 ;For quick orders the JDS domain is 'qo'
"RTN","HMPMETA",13,0)
 S:HMPDMNM="quick" HMPDMNM="qo"
"RTN","HMPMETA",14,0)
 S ^TMP("HMPMETA",$J,HMPDMNM,HMPUID)=HMPSTMP
"RTN","HMPMETA",15,0)
 ;unit tests use following nodes
"RTN","HMPMETA",16,0)
 S ^TMP("HMPMETA",$J,HMPDMNM)=$G(^TMP("HMPMETA",$J,HMPDMNM))+1
"RTN","HMPMETA",17,0)
 S ^TMP("HMPMETA",$J,"PATIENT")=$G(^TMP("HMPMETA",$J,"PATIENT"))+1
"RTN","HMPMETA",18,0)
 Q
"RTN","HMPMETA",19,0)
 ;
"RTN","HMPMETA",20,0)
 ;
"RTN","HMPMETA",21,0)
DONE(HMPFDFN,HMPBATCH) ; Check if metastamp compile is complete
"RTN","HMPMETA",22,0)
 ;For patients this will always be true since all patient domains compiled by one task
"RTN","HMPMETA",23,0)
 Q:+$G(HMPFDFN) 1
"RTN","HMPMETA",24,0)
 ;For OPD requires to check that all domain compiles are completed
"RTN","HMPMETA",25,0)
 N HMPDOM,HMPCOMP
"RTN","HMPMETA",26,0)
 S HMPDOM="",HMPCOMP=1 F  S HMPDOM=$O(^XTMP(HMPBATCH,0,"MSTA",HMPDOM)) Q:HMPDOM=""  D  Q:'HMPCOMP
"RTN","HMPMETA",27,0)
 . S:$G(^XTMP(HMPBATCH,0,"MSTA",HMPDOM))=0 HMPCOMP=0
"RTN","HMPMETA",28,0)
 Q HMPCOMP
"RTN","HMPMETA",29,0)
 ;
"RTN","HMPMETA",30,0)
 ;
"RTN","HMPMETA",31,0)
OPD(HMPFHMP) ;Check if OPD metastamp is ready to collect
"RTN","HMPMETA",32,0)
 Q $S($$DONE("OPD","HMPFX~"_HMPFHMP_"~OPD"):1,1:0)
"RTN","HMPMETA",33,0)
 ;
"RTN","HMPMETA",34,0)
 ;
"RTN","HMPMETA",35,0)
INIT(HMPBATCH,HMPFDFN,ARGS) ; Set metastamp status as in progress
"RTN","HMPMETA",36,0)
 N DOMAINS,HMPDOM,I
"RTN","HMPMETA",37,0)
 ; set up domains to extract
"RTN","HMPMETA",38,0)
 D @($S(HMPFDFN="OPD":"OPDOMS",1:"PTDOMS")_"^HMPDJFSD(.DOMAINS)")
"RTN","HMPMETA",39,0)
 ; remove any unneeded domains
"RTN","HMPMETA",40,0)
 I $G(ARGS("domains"))'="" F I=1:1 Q:'$D(DOMAINS(I))  I ARGS("domains")'[DOMAINS(I) K DOMAINS(I)
"RTN","HMPMETA",41,0)
 ; put the domains into the batch in ^XTMP
"RTN","HMPMETA",42,0)
 F I=1:1 S HMPDOM=$G(DOMAINS(I)) Q:HMPDOM=""  S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=0
"RTN","HMPMETA",43,0)
 Q
"RTN","HMPMETA",44,0)
 ;
"RTN","HMPMETA",45,0)
 ;
"RTN","HMPMETA",46,0)
UPD(HMPDOM) ; Update metastamp domain as complete
"RTN","HMPMETA",47,0)
 S ^XTMP(HMPBATCH,0,"MSTA",HMPDOM)=1 Q
"RTN","HMPMETA",48,0)
 ;
"RTN","HMPMETA",49,0)
MERGE1(HMPBATCH,HMPDOM) ; US11019 Merge a single domain
"RTN","HMPMETA",50,0)
 M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",51,0)
 K ^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",52,0)
 Q
"RTN","HMPMETA",53,0)
 ;
"RTN","HMPMETA",54,0)
MERGE(HMPBATCH) ; Merge metastamp data into XTMP and mark domain complete in metastamp
"RTN","HMPMETA",55,0)
 ;Formatting of metastamp into JSON format by HMPMETA goes here when ready
"RTN","HMPMETA",56,0)
 N HMPDOM
"RTN","HMPMETA",57,0)
 S HMPDOM="PATIENT"
"RTN","HMPMETA",58,0)
 F  S HMPDOM=$O(^TMP("HMPMETA",$J,HMPDOM)) Q:HMPDOM=""  M ^XTMP(HMPBATCH,0,"META",HMPDOM)=^TMP("HMPMETA",$J,HMPDOM)
"RTN","HMPMETA",59,0)
 K ^TMP("HMPMETA",$J)
"RTN","HMPMETA",60,0)
 Q
"RTN","HMPMETA",61,0)
 ;
"RTN","HMPMETA",62,0)
 ;
"RTN","HMPMETA",63,0)
METAPT(A,HMPCDOM) ; MetaStamp for patient data (within its own syncStart chunk).;US11019 added second parameter
"RTN","HMPMETA",64,0)
 ; --Input parameter
"RTN","HMPMETA",65,0)
 ; A = "^^HMPFX~hmp-development-box~"<DFN> (e.g. ^^HMPFX~hmp-development-box~3)
"RTN","HMPMETA",66,0)
 ; HMPCDOM = Single domain US11019
"RTN","HMPMETA",67,0)
 ;
"RTN","HMPMETA",68,0)
 ; --Expects
"RTN","HMPMETA",69,0)
 ; DOMSIZE,OFFSET,HMPFCNT ;US11019 comment added not variables
"RTN","HMPMETA",70,0)
 ;
"RTN","HMPMETA",71,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",72,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",73,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",74,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",75,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",76,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",77,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",78,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",79,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",80,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",81,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",82,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",83,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",84,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",85,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",86,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",87,0)
 ;
"RTN","HMPMETA",88,0)
 S U="^"
"RTN","HMPMETA",89,0)
 N HMPA,HMPB,HMPC,HMPC1,HMPD,HMPE,HMPF,HMPID,HMPM,HMPN
"RTN","HMPMETA",90,0)
 N HMPP,HMPQ,HMPT,HMPW,HMPX,HMPY,HMPZ,HMPZ1
"RTN","HMPMETA",91,0)
 S HMPA=$P(A,U,3),HMPB=$O(^XTMP(HMPA,0)),HMPZ1=$P(HMPA,"~",3)
"RTN","HMPMETA",92,0)
 S HMPE="",HMPQ="""",HMPZ=0 ;US11019
"RTN","HMPMETA",93,0)
 S HMPC=$G(HMPCDOM) ;US11019
"RTN","HMPMETA",94,0)
 S HMPP=$$PIDS^HMPDJFS(HMPZ1)
"RTN","HMPMETA",95,0)
 S HMPY=$$EN^HMPSTMP("NOW")
"RTN","HMPMETA",96,0)
 S HMPX=",""metaStamp"":"_"{""icn"":"""_$$GETICN^MPIF001(HMPZ1)_""""_","
"RTN","HMPMETA",97,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",98,0)
 S HMPID=$TR($P($P(HMPP,"pid",2),","),""":")
"RTN","HMPMETA",99,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",100,0)
 S HMPX=HMPX_"""pid"":"""_HMPID_""""_","
"RTN","HMPMETA",101,0)
 S HMPX=HMPX_"""localId"":"""_$P(HMPID,";",2)_""""_","
"RTN","HMPMETA",102,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",103,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",104,0)
 ;Scan Domains
"RTN","HMPMETA",105,0)
 D:HMPC'=""  I HMPC="" F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D  ;US11019 allow process by single domain
"RTN","HMPMETA",106,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",107,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",108,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",109,0)
 .S HMPD=0
"RTN","HMPMETA",110,0)
 .S HMPX=HMPX_"""eventMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",111,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",112,0)
 .I $O(^XTMP(HMPA,0,"META",HMPC,HMPU))="" S HMPX=HMPX_"}" ;US11019 - cater for zero entries
"RTN","HMPMETA",113,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",114,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",115,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",116,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",117,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",118,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",119,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",120,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",121,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",122,0)
 I HMPZ!($L(HMPX)>0) D  ;DE3759 avoid multiple edge case
"RTN","HMPMETA",123,0)
 .I $L(HMPX)=0 S HMPX=^TMP("HMPF",$J,HMPFCNT,.3,HMPZ),^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=$E(HMPX,1,$L(HMPX)-1),HMPX="" ;DE3759
"RTN","HMPMETA",124,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",125,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}" D
"RTN","HMPMETA",126,0)
 ..I $E(HMPX,$L(HMPX))="{" S HMPX=HMPX_"""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",127,0)
 ..E  S HMPX=HMPX_",""seq"":"_OFFSET_",""total"":"_DOMSIZE
"RTN","HMPMETA",128,0)
 .S HMPX=HMPX_",""object"":"
"RTN","HMPMETA",129,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",130,0)
 Q
"RTN","HMPMETA",131,0)
 ;
"RTN","HMPMETA",132,0)
 ;
"RTN","HMPMETA",133,0)
METAOP(A) ; MetaStamp for operational data (within its own syncStart chunk)
"RTN","HMPMETA",134,0)
 ; A = HMPFX~hmp-development-box~OPD
"RTN","HMPMETA",135,0)
 ;
"RTN","HMPMETA",136,0)
 ; HMPA = "HMPFX~hmp-development-box~"<DFN>
"RTN","HMPMETA",137,0)
 ; HMPB = ZTASK# --> ^XTMP(HMPA,<ZTASK#>
"RTN","HMPMETA",138,0)
 ; HMPC = Domain (e.g. "allergy") --> ^XTMP(HMPA,HMPB,<Domain>
"RTN","HMPMETA",139,0)
 ; HMPD = Counter (sequential number) --> ^XTMP(HMPA,HMPB,HMPC,<Counter>
"RTN","HMPMETA",140,0)
 ; HMPN = Subscript --> ^XTMP(HMPA,HMPB,HMPC,HMPD,<Subscript>
"RTN","HMPMETA",141,0)
 ; HMPE = ^XTMP(HMPA,HMPB,HMPC,HMPD,HMPN)
"RTN","HMPMETA",142,0)
 ; HMPF = Domain id (e.g. the "C877:3:751" part of "urn:va:allergy:C877:3:751"
"RTN","HMPMETA",143,0)
 ; HMPID = pid --> <site-hash>;DFN (e.g. C877;3)
"RTN","HMPMETA",144,0)
 ; HMPZ1 = DFN
"RTN","HMPMETA",145,0)
 ; HMPP = $$PIDS^HMPDJFS(HMPZ1)  --> JSON construct containing pid, systemId, localId, icn
"RTN","HMPMETA",146,0)
 ; HMPQ = " (double quote literal)
"RTN","HMPMETA",147,0)
 ; HMPT = The "total" node from ^XTMP --> ^XTMP(HMPA,HMPB,HMPC,"total")
"RTN","HMPMETA",148,0)
 ; HMPX = JSON construct for the entire metaStamp
"RTN","HMPMETA",149,0)
 ; HMPW = Event timeStamp
"RTN","HMPMETA",150,0)
 ; HMPY = $$EN^HMPSTMP("NOW")
"RTN","HMPMETA",151,0)
 ; HMPZ = Counter for breaking up the large nodes into sub-nodes in ^TMP
"RTN","HMPMETA",152,0)
 ;
"RTN","HMPMETA",153,0)
 S U="^"
"RTN","HMPMETA",154,0)
 N HMPA,HMPJ,HMPQ,HMPSEP,HMPZ,HMPDAT,HMPDAT1,HMPDOM,HMPDOM1,HMPEVT,HMPX,HMPTOT,HMPTSK,HMPMOR,HMPLAS,HMPMOR,HMPLAS
"RTN","HMPMETA",155,0)
 S HMPA=$P(A,U,3),HMPQ="""",HMPZ=0,HMPSEP=","""
"RTN","HMPMETA",156,0)
 S HMPCNT=$G(HMPCNT)+1,HMPJ=$P(HMPA,"~",1,2)_"~OPD"
"RTN","HMPMETA",157,0)
 S HMPSEP=HMPQ
"RTN","HMPMETA",158,0)
 S HMPTSK=$O(^XTMP(A,0)),HMPY=$$EN^HMPSTMP("NOW"),HMPID=$$SYS^HMPUTILS
"RTN","HMPMETA",159,0)
 S HMPX="{""collection"":"""_"OPDsyncStart"_""""_","
"RTN","HMPMETA",160,0)
 S HMPX=HMPX_"""metaStamp"":"_"{"
"RTN","HMPMETA",161,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_",""sourceMetaStamp"":"_"{"
"RTN","HMPMETA",162,0)
 S HMPX=HMPX_""""_$P(HMPID,";")_""""_":{"
"RTN","HMPMETA",163,0)
 S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",164,0)
 S HMPX=HMPX_"""domainMetaStamp"""_":"_"{"
"RTN","HMPMETA",165,0)
 ;Scan Domains
"RTN","HMPMETA",166,0)
 S HMPC=""
"RTN","HMPMETA",167,0)
 F  S HMPC=$O(^XTMP(HMPA,0,"META",HMPC)) Q:HMPC']""  D
"RTN","HMPMETA",168,0)
 .S HMPX=HMPX_""""_HMPC_""""_":{"
"RTN","HMPMETA",169,0)
 .S HMPX=HMPX_"""domain"":"""_HMPC_""""_","
"RTN","HMPMETA",170,0)
 .S HMPX=HMPX_"""stampTime"":"""_HMPY_""""_","
"RTN","HMPMETA",171,0)
 .S HMPD=0
"RTN","HMPMETA",172,0)
 .S HMPX=HMPX_"""itemMetaStamp"""_":"_"{" ; Patient data
"RTN","HMPMETA",173,0)
 .N HMPU,HMPS S HMPU=""
"RTN","HMPMETA",174,0)
 .F  S HMPU=$O(^XTMP(HMPA,0,"META",HMPC,HMPU)) Q:HMPU']""  D
"RTN","HMPMETA",175,0)
 ..N VAR0,VAR1
"RTN","HMPMETA",176,0)
 ..S HMPS=$G(^XTMP(HMPA,0,"META",HMPC,HMPU)),VAR0=$P(HMPU,":",3),VAR1=$P(HMPU,":",4,99)
"RTN","HMPMETA",177,0)
 ..I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",178,0)
 ..S HMPX=HMPX_"""urn:va:"_VAR0_":"_VAR1_""""_":{"
"RTN","HMPMETA",179,0)
 ..S HMPX=HMPX_"""stampTime"":"""_HMPS_""""_"}"
"RTN","HMPMETA",180,0)
 ..S HMPX=HMPX_$S($O(^XTMP(HMPA,0,"META",HMPC,HMPU))="":"}",1:",")
"RTN","HMPMETA",181,0)
 .S HMPX=HMPX_"},"
"RTN","HMPMETA",182,0)
 .I $L(HMPX)>20000 S HMPZ=HMPZ+1,^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX,HMPX=""
"RTN","HMPMETA",183,0)
 I HMPZ!($L(HMPX)>0) D  ;DE3759 avoid multiple edge case
"RTN","HMPMETA",184,0)
 .I $L(HMPX)=0 S HMPX=^TMP("HMPF",$J,HMPFCNT,.3,HMPZ),^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=$E(HMPX,1,$L(HMPX)-1),HMPX="" ;DE3759
"RTN","HMPMETA",185,0)
 .S HMPZ=HMPZ+1
"RTN","HMPMETA",186,0)
 .S HMPX=$E(HMPX,1,$L(HMPX)-1)_"}}}}},{"
"RTN","HMPMETA",187,0)
 .S ^TMP("HMPF",$J,HMPFCNT,.3,HMPZ)=HMPX
"RTN","HMPMETA",188,0)
 Q
"RTN","HMPMETA",189,0)
 ;
"RTN","HMPMETA",190,0)
 ;
"RTN","HMPMETA",191,0)
STATUS(STOP,HMPFHMP) ; Set HMP GLOBAL USAGE MONITOR status
"RTN","HMPMETA",192,0)
 Q:$G(STOP)=""  Q:$G(HMPFHMP)=""
"RTN","HMPMETA",193,0)
 N HMPFLG,HMPSTMP,HMPSRV
"RTN","HMPMETA",194,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPMETA",195,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5),HMPSTMP=$P($G(^HMP(800000,HMPSRV,0)),U,6)
"RTN","HMPMETA",196,0)
 ;If stopped and already flagged as stopped do nothing
"RTN","HMPMETA",197,0)
 I STOP,HMPFLG Q
"RTN","HMPMETA",198,0)
 ;If stopped but not flagged as stopped set flag and timestamp
"RTN","HMPMETA",199,0)
 I STOP,'HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPMETA",200,0)
 ;If running and flagged as stopped flag as running
"RTN","HMPMETA",201,0)
 I 'STOP,HMPFLG D SET(STOP,HMPSRV) Q
"RTN","HMPMETA",202,0)
 ;No action needed if running and not flagged as stop
"RTN","HMPMETA",203,0)
 Q
"RTN","HMPMETA",204,0)
 ;
"RTN","HMPMETA",205,0)
SET(STOP,HMPSRV) ; Flag set/reset, Stamptime set
"RTN","HMPMETA",206,0)
 Q:'$G(HMPSRV)
"RTN","HMPMETA",207,0)
 L +^HMP(800000,HMPSRV,0):5 E  Q
"RTN","HMPMETA",208,0)
 S $P(^HMP(800000,HMPSRV,0),U,5,6)=STOP_U_$$NOW^XLFDT
"RTN","HMPMETA",209,0)
 L -^HMP(800000,HMPSRV,0)
"RTN","HMPMETA",210,0)
 Q
"RTN","HMPMETA",211,0)
 ;
"RTN","HMPMETA",212,0)
CHECK(HMPFHMP) ; Check storage status and send MailMan message if appropriate
"RTN","HMPMETA",213,0)
 ; Input HMPFHMP - server name
"RTN","HMPMETA",214,0)
 Q:$G(HMPFHMP)=""
"RTN","HMPMETA",215,0)
 N HMPDIFF,HMPFLG,HMPSRV,HMPSTTM
"RTN","HMPMETA",216,0)
 S HMPSRV=$O(^HMP(800000,"B",HMPFHMP,"")) Q:'HMPSRV
"RTN","HMPMETA",217,0)
 ; ^DD(800000,.05,0)="DISK USAGE STATUS^S^0:WITHIN LIMIT;1:EXCEEDED LIMIT;^0;5^Q"
"RTN","HMPMETA",218,0)
 S HMPFLG=$P($G(^HMP(800000,HMPSRV,0)),U,5)
"RTN","HMPMETA",219,0)
 ;No action required if status is not set
"RTN","HMPMETA",220,0)
 I HMPFLG="" Q
"RTN","HMPMETA",221,0)
 ; (#.06) DISK USAGE STATUS TIME [6D]
"RTN","HMPMETA",222,0)
 S HMPSTTM=$P($G(^HMP(800000,HMPSRV,0)),U,6) Q:HMPSTTM=""
"RTN","HMPMETA",223,0)
 ;quit if status time < five minutes ago
"RTN","HMPMETA",224,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,HMPSTTM,2)<300 Q
"RTN","HMPMETA",225,0)
 ;Otherwise send message
"RTN","HMPMETA",226,0)
 D MSG(HMPFLG)
"RTN","HMPMETA",227,0)
 ; Clear DISK USAGE STATUS and DISK USAGE STATUS TIME
"RTN","HMPMETA",228,0)
 L +^HMP(800000,HMPSRV,0):5 E  Q  ; quit if no lock
"RTN","HMPMETA",229,0)
 S $P(^HMP(800000,HMPSRV,0),U,5,6)=""
"RTN","HMPMETA",230,0)
 L -^HMP(800000,HMPSRV,0)
"RTN","HMPMETA",231,0)
 Q
"RTN","HMPMETA",232,0)
 ;
"RTN","HMPMETA",233,0)
 ; DE6644: 2 MailMan message subroutines combined, 13 January 2017
"RTN","HMPMETA",234,0)
MSG(HMPFLG) ; send email about space limit for ^XTMP("HMP*")
"RTN","HMPMETA",235,0)
 Q:'$D(HMPFLG)  ; must have flag, if HMPFLG then limit exceeded
"RTN","HMPMETA",236,0)
 ; 1 megabyte = 2**20 bytes = 1048576 bytes
"RTN","HMPMETA",237,0)
 N HMPMSG,HMPRCPNT,HMPSUBJ,HMPTXT,MAX
"RTN","HMPMETA",238,0)
 S MAX=$$GETMAX^HMPUTILS  ; system parameter: HMP EXTRACT DISK SIZE LIMIT
"RTN","HMPMETA",239,0)
 S HMPSUBJ="HMP namepsace XTMP Global Size Monitor "_$S(HMPFLG:"PAUSE",1:"RESTART")_" alert"
"RTN","HMPMETA",240,0)
 D MSGLN(.HMPTXT,"*ALERT*: eHMP storage in the ^XTMP global has")
"RTN","HMPMETA",241,0)
 D MSGLN(.HMPTXT,$S(HMPFLG:"exceeded ",1:"been below ")_$FN(MAX,",")_" bytes ("_$J(MAX/1048576,2,2)_" MB) for more than 5 minutes.")
"RTN","HMPMETA",242,0)
 D MSGLN(.HMPTXT,"eHMP subscribing was "_$S(HMPFLG:"PAUSED.",1:"RESTARTED.")),MSGLN(.HMPTXT," ")
"RTN","HMPMETA",243,0)
 D MSGLN(.HMPTXT,"HMP* namespace data stored in ^XTMP is "_$J($P($$GETSIZE^HMPUTILS,"^")/1048576,2,2)_" MB.")
"RTN","HMPMETA",244,0)
 D MSGLN(.HMPTXT," "),MSGLN(.HMPTXT,"eHMP ^XTMP space check made "_$$HTE^XLFDT($H)),MSGLN(.HMPTXT," ")
"RTN","HMPMETA",245,0)
 I $G(ZTSK) D MSGLN(.HMPTXT,"TaskMan task number: "_ZTSK)  ; add task number if available
"RTN","HMPMETA",246,0)
 D MSGLN(.HMPTXT," ")
"RTN","HMPMETA",247,0)
 S HMPRCPNT("G.HMP IRM GROUP")="",HMPRCPNT(DUZ)=""
"RTN","HMPMETA",248,0)
 D SENDMSG^XMXAPI(DUZ,HMPSUBJ,"HMPTXT",.HMPRCPNT,,.HMPMSG)  ; HMPMSG returned as message number
"RTN","HMPMETA",249,0)
 Q
"RTN","HMPMETA",250,0)
 ;
"RTN","HMPMETA",251,0)
MSGLN(TXTARY,LN) ; add LN to TXTARY (passed by ref.) for MailMan message
"RTN","HMPMETA",252,0)
 Q:'$L($G(LN))  ; must have some text
"RTN","HMPMETA",253,0)
 S TXTARY(0)=$G(TXTARY(0))+1,TXTARY(TXTARY(0))=LN Q
"RTN","HMPMETA",254,0)
 ;
"RTN","HMPMON")
0^19^B6205473^B33479508
"RTN","HMPMON",1,0)
HMPMON ;ASMR/BL, eHMP monitor main routine ;Sep 13, 2016 20:03:08
"RTN","HMPMON",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMON",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMON",4,0)
 ;
"RTN","HMPMON",5,0)
 Q  ; no entry from top
"RTN","HMPMON",6,0)
 ;DE6526, DE6644 - routine refactored, 25 August 2016
"RTN","HMPMON",7,0)
 ;
"RTN","HMPMON",8,0)
 ; main routine for the eHMP monitor
"RTN","HMPMON",9,0)
 ; all other HMPMON* routines are invoked from this routine (see below)
"RTN","HMPMON",10,0)
 ; PROMPT^HMPMONA issues the ^DIR action prompts in the monitor
"RTN","HMPMON",11,0)
 ;
"RTN","HMPMON",12,0)
OPTION ; entry point from OPTION file (#19) entry HMPMON DASHBOARD 
"RTN","HMPMON",13,0)
 ;
"RTN","HMPMON",14,0)
 D HOME^%ZIS  ; set IO* variables
"RTN","HMPMON",15,0)
 ; HMPACT - user selected action
"RTN","HMPMON",16,0)
 ; HMPCALLS - values used for ^DIR calls
"RTN","HMPMON",17,0)
 ; HMPMNTR array used throughout HMPMON* routines, subscripts indicate intent
"RTN","HMPMON",18,0)
 ; HMPRATE - "refresh" rate for displaying screen, used as ^DIR timeout
"RTN","HMPMON",19,0)
 ; HMPROMPT - prompt group for ^DIR calls (see HMPMONR routine)
"RTN","HMPMON",20,0)
 N D,HMPACT,HMPCALLS,HMPMNTR,HMPRATE,HMPROMPT,LNTAG
"RTN","HMPMON",21,0)
 D CALLIST^HMPMONR(.HMPCALLS)
"RTN","HMPMON",22,0)
 ; line tag/routine to call
"RTN","HMPMON",23,0)
 ; HMPACT - user-selected action
"RTN","HMPMON",24,0)
 S HMPROMPT="MNTR" ; Monitor Action Prompt group
"RTN","HMPMON",25,0)
 S HMPRATE=$$RATE^HMPMONC ; auto-update rate
"RTN","HMPMON",26,0)
 S HMPMNTR("server")=$$GETSRVR^HMPMONM ; subscription server
"RTN","HMPMON",27,0)
 ; if there are NO subscriptions, display help and quit
"RTN","HMPMON",28,0)
 I 'HMPMNTR("server") D NOSRVR^HMPMONM Q
"RTN","HMPMON",29,0)
 S HMPMNTR("exit")=0  ; flag to exit monitor
"RTN","HMPMON",30,0)
 S HMPMNTR("site hash")=$$SYS^HMPUTILS,HMPMNTR("site name")=$$KSP^XUPARAM("WHERE")
"RTN","HMPMON",31,0)
 ;
"RTN","HMPMON",32,0)
 F  D  Q:HMPROMPT=U!HMPMNTR("exit")  ; monitor option's main loop
"RTN","HMPMON",33,0)
 . S HMPMNTR("default")="U"  ; default to update
"RTN","HMPMON",34,0)
 . S HMPMNTR("zero node")=$G(^HMP(800000,HMPMNTR("server"),0))  ; used for display
"RTN","HMPMON",35,0)
 . ; 1. display text in monitor
"RTN","HMPMON",36,0)
 . S HMPACT=HMPMNTR("default")  ; initial action is default
"RTN","HMPMON",37,0)
 . D FORMFEED^HMPMONL,U^HMPMOND ; clear screen, then update monitor display
"RTN","HMPMON",38,0)
 . ; 2. prompt user to select action
"RTN","HMPMON",39,0)
 . S HMPACT="" D PROMPT^HMPMONA(.HMPACT,HMPROMPT) ; prompt user for action
"RTN","HMPMON",40,0)
 . Q:HMPMNTR("exit")  ; exit the monitor
"RTN","HMPMON",41,0)
 . Q:HMPACT=""  ; no action selected
"RTN","HMPMON",42,0)
 . Q:$E(HMPACT)="U"  ; update = initial action, nothing to do
"RTN","HMPMON",43,0)
 . ; 3. perform user-selected action
"RTN","HMPMON",44,0)
 . S LNTAG=$P(HMPCALLS(HMPACT),";",3)  ; action's subroutine call
"RTN","HMPMON",45,0)
 . D @LNTAG ; perform user-selected action
"RTN","HMPMON",46,0)
 ;
"RTN","HMPMON",47,0)
 Q
"RTN","HMPMON",48,0)
 ;
"RTN","HMPMON",49,0)
EXIT ; exit monitor action
"RTN","HMPMON",50,0)
 S HMPMNTR("exit")=1 D FORMFEED^HMPMONL Q
"RTN","HMPMON",51,0)
 ;
"RTN","HMPMON",52,0)
 ;eHMP monitor routines as of 13 September 2016
"RTN","HMPMON",53,0)
 ; HMPMON - main routine, entry point for MenuMan option
"RTN","HMPMON",54,0)
 ; HMPMONA - action prompts for ^DIR calls
"RTN","HMPMON",55,0)
 ; HMPMONC - change auto-refresh rates, which is the timeout when calling ^DIR
"RTN","HMPMON",56,0)
 ; HMPMOND - display routine for monitor screen
"RTN","HMPMON",57,0)
 ; HMPMONDH - display help for monitor screen
"RTN","HMPMON",58,0)
 ; HMPMONE - error and event log display actions
"RTN","HMPMON",59,0)
 ; HMPMONEH - error display help, called by ^DIR ? logic
"RTN","HMPMON",60,0)
 ; HMPMONH - history of monitor (not implemented)
"RTN","HMPMON",61,0)
 ; HMPMONHH - history of monitor help text (not implemented)
"RTN","HMPMON",62,0)
 ; HMPMONJ - job processes (poller) display
"RTN","HMPMON",63,0)
 ; HMPMONL - library of monitor support support code
"RTN","HMPMON",64,0)
 ; HMPMONM - monitor a different server, interactive ^DIC call
"RTN","HMPMON",65,0)
 ; HMPMONR - reader array set up (^DIR)
"RTN","HMPMON",66,0)
 ; HMPMONS - synch process actions (not implemented)
"RTN","HMPMON",67,0)
 ; HMPMONSH - synch process help (not implemented)
"RTN","HMPMON",68,0)
 ; HMPMONV - view eHMP global nodes
"RTN","HMPMON",69,0)
 ; HMPMONX - XTMP global monitor support logic
"RTN","HMPMON",70,0)
 ;
"RTN","HMPMONA")
0^20^B5798924^B32852666
"RTN","HMPMONA",1,0)
HMPMONA ;ASMR/BL, eHMP monitor action prompts ;Sep 13, 2016 20:03:08
"RTN","HMPMONA",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONA",4,0)
 ;
"RTN","HMPMONA",5,0)
 Q  ; no entry from top
"RTN","HMPMONA",6,0)
 ;DE6526, DE6644 - routine refactored, 25 August 2016
"RTN","HMPMONA",7,0)
 ; this routine contains Action to support the calls to ^DIR
"RTN","HMPMONA",8,0)
PROMPT(HMPACT,HMPROMPT) ; issues the action prompts throughout the eHMP Monitor
"RTN","HMPMONA",9,0)
 ; Invoked by OPTION^HMPMON
"RTN","HMPMONA",10,0)
 ; input:
"RTN","HMPMONA",11,0)
 ;   HMPROMPT = MNTR or ERR or HIST or SYNC, default to MNTR
"RTN","HMPMONA",12,0)
 ; output:
"RTN","HMPMONA",13,0)
 ;  HMPACT - user-selected prompt, passed by reference
"RTN","HMPMONA",14,0)
 ;
"RTN","HMPMONA",15,0)
 S HMPROMPT=$G(HMPROMPT,"MNTR") ; default to monitor
"RTN","HMPMONA",16,0)
 I $$PROMPTS^HMPMONR'[(U_HMPROMPT_U) D  Q  ; can't issue undefined prompt
"RTN","HMPMONA",17,0)
 . W !!,"Invalid prompt default detected, cannot continue.",!
"RTN","HMPMONA",18,0)
 . D RTRN2CON^HMPMONL
"RTN","HMPMONA",19,0)
 ;
"RTN","HMPMONA",20,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","HMPMONA",21,0)
 S DIR(0)=$$CODES(HMPROMPT) ; set-of-codes
"RTN","HMPMONA",22,0)
 S DIR("A")=$P(HMPCALLS(U,"DIR","text",HMPROMPT),";",2)  ; prompt text
"RTN","HMPMONA",23,0)
 S X=$G(HMPMNTR("default")) S:$L(X) DIR("B")=X  ; prompt default
"RTN","HMPMONA",24,0)
 S X=$G(HMPCALLS(U,"DIR","?",HMPROMPT))  ; extended ?? help specification
"RTN","HMPMONA",25,0)
 S:$L(X) DIR("?")=X  ; only if help set up
"RTN","HMPMONA",26,0)
 S DIR("T")=HMPRATE ; set timeout to control auto-refresh rate
"RTN","HMPMONA",27,0)
 W !  ; skip a line for readability
"RTN","HMPMONA",28,0)
 D ^DIR
"RTN","HMPMONA",29,0)
 ;
"RTN","HMPMONA",30,0)
 S:$D(DTOUT) Y=DIR("B")  ; for action prompts, timeout = default, creates auto-update
"RTN","HMPMONA",31,0)
 I $D(DUOUT)!$D(DIROUT) Q  ; timeout or '^', exit
"RTN","HMPMONA",32,0)
 S HMPACT=Y  ; action selected by user returned
"RTN","HMPMONA",33,0)
 ;
"RTN","HMPMONA",34,0)
 Q
"RTN","HMPMONA",35,0)
 ;
"RTN","HMPMONA",36,0)
CODES(HMPROMPT) ; prompt's set of codes to be used in ^DIR
"RTN","HMPMONA",37,0)
 ; called by:
"RTN","HMPMONA",38,0)
 ;   PROMPT
"RTN","HMPMONA",39,0)
 ; calls:
"RTN","HMPMONA",40,0)
 ;   $$PROMPTS^HMPMON = Monitor's main prompts
"RTN","HMPMONA",41,0)
 ;   $T(@(HMPROMPT_"CODE")^HMPMON) ; prompt record's header line
"RTN","HMPMONA",42,0)
 ;   $$CODE = code definition
"RTN","HMPMONA",43,0)
 ; input:
"RTN","HMPMONA",44,0)
 ;   HMPROMPT = MNTR or ERR or HIST or SYNC, default to MNTR
"RTN","HMPMONA",45,0)
 ; output = set-of-codes definition for prompt
"RTN","HMPMONA",46,0)
 ; examples:
"RTN","HMPMONA",47,0)
 ;   $$CODES = "SB^U:Update;V:View HMP Nodes;S:Sync Processes;E:E..."
"RTN","HMPMONA",48,0)
 ;   $$CODES("HIST") = "SB^UH:Update History;EH:Examine History;M..."
"RTN","HMPMONA",49,0)
 ;   $$CODES("NONSENSE") = ""
"RTN","HMPMONA",50,0)
 ;
"RTN","HMPMONA",51,0)
 N C,CODES,X,Y
"RTN","HMPMONA",52,0)
 S HMPROMPT=$G(HMPROMPT,"MNTR") ; default to monitor
"RTN","HMPMONA",53,0)
 Q:$$PROMPTS^HMPMONR'[(U_HMPROMPT_U) "" ; undefined prompt return null
"RTN","HMPMONA",54,0)
 ; go through list of ^DIR calls and set it up for this monitor screen
"RTN","HMPMONA",55,0)
 S CODES="",C=0,X="" F  S X=$O(HMPCALLS(U,"DIR",HMPROMPT,X)) Q:X=""  D
"RTN","HMPMONA",56,0)
 . S:$G(HMPCALLS(U,"DIR",HMPROMPT,X,"default")) HMPMNTR("default")=X
"RTN","HMPMONA",57,0)
 . S Y=$G(HMPCALLS(X)) S:$L(Y) C=C+1,$P(CODES,";",C)=X_":"_$P(Y,";")
"RTN","HMPMONA",58,0)
 ; S - is set of codes, B indicates horizontal list of prompts
"RTN","HMPMONA",59,0)
 Q "SB^"_CODES
"RTN","HMPMONA",60,0)
 ;
"RTN","HMPMONC")
0^21^B3063955^B19385564
"RTN","HMPMONC",1,0)
HMPMONC ;ASMR/BL, change auto-refresh rate ;Sep 13, 2016 20:03:08
"RTN","HMPMONC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONC",4,0)
 ;
"RTN","HMPMONC",5,0)
 Q  ; no entry from top
"RTN","HMPMONC",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONC",7,0)
 ;
"RTN","HMPMONC",8,0)
C ; monitor action: change auto-refresh rate
"RTN","HMPMONC",9,0)
 ;   issues prompt to user
"RTN","HMPMONC",10,0)
 D TED^XPAREDIT("HMPMON DASHBOARD USR","AB",DUZ_";VA(200,") S HMPRATE=$$RATE ; set new auto-refresh rate
"RTN","HMPMONC",11,0)
 Q
"RTN","HMPMONC",12,0)
 ;
"RTN","HMPMONC",13,0)
RATE() ; extrinsic variable, return auto-refresh rate
"RTN","HMPMONC",14,0)
 N RATE ; auto-refresh rate
"RTN","HMPMONC",15,0)
 ; the 1 below indicates one per entity, "I" is internal format
"RTN","HMPMONC",16,0)
 S RATE=$$GET^XPAR("ALL","HMPMON DASHBOARD UPDATE",1,"I")  ; get parameter
"RTN","HMPMONC",17,0)
 S:RATE="" RATE=30  ; default to 30 seconds
"RTN","HMPMONC",18,0)
 Q RATE
"RTN","HMPMONC",19,0)
 ;
"RTN","HMPMONC",20,0)
SETSYS ; HMPMON SET SYS DASHBOARD RATE option, interactive
"RTN","HMPMONC",21,0)
 N HMPSYSN S HMPSYSN=$$GET1^DIQ(8989.3,"1,",.01,"I")  ; DOMAIN NAME from KERNEL SYSTEM PARAMETERS file
"RTN","HMPMONC",22,0)
 D TED^XPAREDIT("HMPMON DASHBOARD SYS","AB",HMPSYSN_";DIC(4.2,")  ;parameter entity is domain
"RTN","HMPMONC",23,0)
 Q
"RTN","HMPMONC",24,0)
 ;
"RTN","HMPMONC",25,0)
SETPKG ; HMPMON SET PKG DASHBOARD RATE option, interactive
"RTN","HMPMONC",26,0)
 ; get package name for HMP prefix
"RTN","HMPMONC",27,0)
 N HMPKGN S HMPKGN=$$FIND1^DIC(9.4,,"QX","HMP","C")  ; lookup by PREFIX, "QX" - quick, exact 
"RTN","HMPMONC",28,0)
 D TED^XPAREDIT("HMPMON DASHBOARD PKG","AB",HMPKGN_";DIC(9.4,")  ;parameter entity is package
"RTN","HMPMONC",29,0)
 Q
"RTN","HMPMONC",30,0)
 ;
"RTN","HMPMOND")
0^22^B23595720^B73551310
"RTN","HMPMOND",1,0)
HMPMOND ;ASMR/BL, monitor display ;Sep 24, 2016 03:07:36
"RTN","HMPMOND",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMOND",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMOND",4,0)
 ;
"RTN","HMPMOND",5,0)
 Q  ; no entry from top
"RTN","HMPMOND",6,0)
 ;DE6526, DE6644 - routine refactored, 7 September 2016
"RTN","HMPMOND",7,0)
 ;
"RTN","HMPMOND",8,0)
U ; monitor screen update - default activity in monitor
"RTN","HMPMOND",9,0)
 ; called by:
"RTN","HMPMOND",10,0)
 ;   OPTION^HMPMON
"RTN","HMPMOND",11,0)
 ; passed in symbol table:
"RTN","HMPMOND",12,0)
 ;   HMPMNTR("exit") - monitor exit flag
"RTN","HMPMOND",13,0)
 ;   HMPMNTR("server") = # of server record in file HMP Subscription (800000)
"RTN","HMPMOND",14,0)
 ;   HMPMNTR("zero node") = HMP SUBSCRIPTION entry's zero node
"RTN","HMPMOND",15,0)
 ;   HMPROMPT = current prompt; ^ to exit option, else leave alone
"RTN","HMPMOND",16,0)
 ;DSPLN - lines to display, first character in subscript is display order
"RTN","HMPMOND",17,0)
 ;        this array is created for enhancements such as a remote procedure
"RTN","HMPMOND",18,0)
 N DSPLN,HMPRSLT,JBID,STREAM,X,Y
"RTN","HMPMOND",19,0)
 S DSPLN("1hdr")=$$HDR^HMPMONL($P(HMPMNTR("zero node"),U))  ; server name in header
"RTN","HMPMOND",20,0)
 W !,DSPLN("1hdr"),!  ; line 1: screen header
"RTN","HMPMOND",21,0)
 ; freshness stream subscript from ^XTMP
"RTN","HMPMOND",22,0)
 S STREAM=$$LASTREAM^HMPMONL ; get last freshness stream
"RTN","HMPMOND",23,0)
 I STREAM="" W !!,"   * No eHMP Extract Stream Found *" Q  ; nothing else to show
"RTN","HMPMOND",24,0)
 ;create line 2
"RTN","HMPMOND",25,0)
 D CHKXTMP^HMPMONX(.HMPRSLT)
"RTN","HMPMOND",26,0)
 S Y="   "_$P(HMPRSLT(1),U,3)_": "_$P(HMPRSLT(2),U,3)  ; total patients in queue
"RTN","HMPMOND",27,0)
 ; if there are patients show number staging & complete
"RTN","HMPMOND",28,0)
 I $P(HMPRSLT(2),U,3) F X=4,5 S Y=Y_" - "_$P(HMPRSLT(1),U,X)_": "_$P(HMPRSLT(2),U,X)
"RTN","HMPMOND",29,0)
 S DSPLN("2Patients")=Y W !,DSPLN("2Patients"),!  ; line 2: patients in queue
"RTN","HMPMOND",30,0)
 ; create line 3
"RTN","HMPMOND",31,0)
 S JBID=0
"RTN","HMPMOND",32,0)
 F  S JBID=$O(^XTMP(STREAM,"job",JBID)) Q:'JBID  D
"RTN","HMPMOND",33,0)
 . S JBID("count")=$G(JBID("count"))+1  ; count of job numbers found
"RTN","HMPMOND",34,0)
 . S X=JBID X ^%ZOSF("JOBPARAM")  ; set JOB into X to check if job active
"RTN","HMPMOND",35,0)
 . S:Y="" JBID("inactv")=$G(JBID("inactv"))+1  ; Y returned by ^%ZOSF("JOBPARAM")
"RTN","HMPMOND",36,0)
 . S $P(JBID("list"),",",JBID("count"))=JBID
"RTN","HMPMOND",37,0)
 S Y="   Polling job#"
"RTN","HMPMOND",38,0)
 S:$G(JBID("list")) Y=Y_" "_JBID("list") S:$G(JBID("inactv")) Y=Y_" ("_JBID("inactv")_" inactive)"
"RTN","HMPMOND",39,0)
 S DSPLN("3PollJobs")=Y W !,DSPLN("3PollJobs")  ; line 3: jobs polling in this stream
"RTN","HMPMOND",40,0)
 ;create line 4
"RTN","HMPMOND",41,0)
 S Y=$P(HMPMNTR("zero node"),U,2) ; ^DD(800000,.02,0)="LASTUPDATE"
"RTN","HMPMOND",42,0)
 S Y="   Last Update: "_Y
"RTN","HMPMOND",43,0)
 S:$P(HMPMNTR("zero node"),U,4) Y=Y_"  x"_$P(HMPMNTR("zero node"),U,4) ; ^DD(800000,.04,0)="REPEAT POLLS"
"RTN","HMPMOND",44,0)
 S DSPLN("4LastUpdt")=Y  ; lastupdate
"RTN","HMPMOND",45,0)
 S Y="eHMP Errors: "_$FN($$ETOTL^HMPMONE,",")  ;  # ehmp errors in all logs
"RTN","HMPMOND",46,0)
 S $E(DSPLN("4LastUpdt"),80-$L(Y),79)=Y
"RTN","HMPMOND",47,0)
 W !,DSPLN("4LastUpdt") ; line 4: last update & errors
"RTN","HMPMOND",48,0)
 ; create line 5
"RTN","HMPMOND",49,0)
 S Y="eHMP's ^XTMP size: "_$J($P(HMPRSLT(2),U,6)/1024,6,2)_" KB"  ; size of eHMP in ^XTMP
"RTN","HMPMOND",50,0)
 S DSPLN("5XEoQXtmp")=$J("",79-$L(Y))_Y  ; right-justify line
"RTN","HMPMOND",51,0)
 S Y=""  ; used for end of queue on next line
"RTN","HMPMOND",52,0)
 S:$D(^XTMP(STREAM)) Y="  End of Queue: "_$P(STREAM,"~",3)_"-"_$G(^XTMP(STREAM,"last"))
"RTN","HMPMOND",53,0)
 S:$L(Y) $E(DSPLN("5XEoQXtmp"),1,$L(Y))=Y  ; if end of queue found insert at beginning
"RTN","HMPMOND",54,0)
 W !,DSPLN("5XEoQXtmp") ; line 5: end of queue, xtmp size
"RTN","HMPMOND",55,0)
 ;
"RTN","HMPMOND",56,0)
 D QUEUE(STREAM,10) ; show last 10 items in queue
"RTN","HMPMOND",57,0)
 Q
"RTN","HMPMOND",58,0)
 ;
"RTN","HMPMOND",59,0)
QUEUE(STREAM,MAX) ; show last max items in freshness queue
"RTN","HMPMOND",60,0)
 ; called by:
"RTN","HMPMOND",61,0)
 ;   U
"RTN","HMPMOND",62,0)
 ; calls:
"RTN","HMPMOND",63,0)
 ;   QLIST: get size and last max items
"RTN","HMPMOND",64,0)
 ;   QHEAD: show freshness-queue header
"RTN","HMPMOND",65,0)
 ;   $$QROW = each row of the report
"RTN","HMPMOND",66,0)
 ; input:
"RTN","HMPMOND",67,0)
 ;   STREAM = last freshness stream
"RTN","HMPMOND",68,0)
 ;   MAX = maximum # items to show
"RTN","HMPMOND",69,0)
 ;   input from the database
"RTN","HMPMOND",70,0)
 ; output:
"RTN","HMPMOND",71,0)
 ;   HMPEXIT = whether to exit option report to current device
"RTN","HMPMOND",72,0)
 ;
"RTN","HMPMOND",73,0)
 N ITEM,LIST,X,Y  ; size of queue
"RTN","HMPMOND",74,0)
 ; LIST - array of last max items
"RTN","HMPMOND",75,0)
 D QLIST(.LIST,STREAM,MAX)  ; get items to display, LIST is total, returns MAX items
"RTN","HMPMOND",76,0)
 ;set total into X to adjust length into Y, LIST varies
"RTN","HMPMOND",77,0)
 S Y="Freshness Queue (last "_MAX_" items):",X="Total items in queue: "_LIST,$E(Y,80-$L(X),79)=X
"RTN","HMPMOND",78,0)
 W !!,Y,!
"RTN","HMPMOND",79,0)
 W !,"item      patient      transaction   type                               waiting"
"RTN","HMPMOND",80,0)
 W !,"--------  -----------  ------------  ---------------------------------  -------"
"RTN","HMPMOND",81,0)
 ; create report lines in Y
"RTN","HMPMOND",82,0)
 S ITEM="" F  S ITEM=$O(LIST(ITEM),-1) Q:'ITEM  D  ; display ITEM array
"RTN","HMPMOND",83,0)
 . S X=" "_$$QWAIT(LIST(ITEM)),Y=""  ; space in front of wait time in X
"RTN","HMPMOND",84,0)
 . S $E(Y,1,9)=$E(ITEM,1,9)  ; item #
"RTN","HMPMOND",85,0)
 . S $E(Y,11,23)=$E($P(LIST(ITEM),U),1,13)  ; patient
"RTN","HMPMOND",86,0)
 . S $E(Y,24,37)=$E($P(LIST(ITEM),U,2),1,14)  ; transaction
"RTN","HMPMOND",87,0)
 . S $E(Y,38,74)=$E($P($P(LIST(ITEM),U,3),"#"),1,37)  ; type
"RTN","HMPMOND",88,0)
 . S $E(Y,80-$L(X),79)=X  ; waiting time
"RTN","HMPMOND",89,0)
 . W !,Y  ; display row of report
"RTN","HMPMOND",90,0)
 ;
"RTN","HMPMOND",91,0)
 Q
"RTN","HMPMOND",92,0)
 ;
"RTN","HMPMOND",93,0)
QLIST(ITMLST,STREAM,MAX) ;  items from freshness queue, return last MAX items
"RTN","HMPMOND",94,0)
 ; ITMLST passed by reference, returns:
"RTN","HMPMOND",95,0)
 ;   ITMLST = total # items in freshness queue
"RTN","HMPMOND",96,0)
 ;   ITMLST(item #) = record for each of the last max items
"RTN","HMPMOND",97,0)
 ;
"RTN","HMPMOND",98,0)
 K ITMLST S ITMLST=0  ; clear any residue
"RTN","HMPMOND",99,0)
 N ITM S ITM=$C(1)  ; reverse iteration from first subscript after numerics
"RTN","HMPMOND",100,0)
 F  S ITM=$O(^XTMP(STREAM,ITM),-1) Q:'ITM  D:ITMLST<MAX  S ITMLST=ITMLST+1
"RTN","HMPMOND",101,0)
 . S ITMLST(ITM)=$G(^XTMP(STREAM,ITM))  ; save item, use $GET because queue is dynamic
"RTN","HMPMOND",102,0)
 ;
"RTN","HMPMOND",103,0)
 Q
"RTN","HMPMOND",104,0)
 ;
"RTN","HMPMOND",105,0)
QWAIT(RECORD) ; function, return waiting value for RECORD
"RTN","HMPMOND",106,0)
 ;   RECORD = record of item in the queue
"RTN","HMPMOND",107,0)
 ; examples:
"RTN","HMPMOND",108,0)
 ;   $$QWAIT("3^visit^H4721^^52660^54378") = "done"
"RTN","HMPMOND",109,0)
 ;      if $H = "64272,54378" then:
"RTN","HMPMOND",110,0)
 ;   $$QWAIT("3^visit^H4721^^52660^") = "1,718 s"
"RTN","HMPMOND",111,0)
 ;   $$QWAIT("3^visit^H4721^^") = ""
"RTN","HMPMOND",112,0)
 ;   $$QWAIT("") = ""
"RTN","HMPMOND",113,0)
 ;
"RTN","HMPMOND",114,0)
 Q:$G(RECORD)="" ""  ; return null if no RECORD
"RTN","HMPMOND",115,0)
 Q:$P(RECORD,U,6) "done"  ; item complete, return literal
"RTN","HMPMOND",116,0)
 N START,WTING
"RTN","HMPMOND",117,0)
 S START=$P(RECORD,U,5) Q:'START ""  ; no start time, return null
"RTN","HMPMOND",118,0)
 S WTING=$P($H,",",2)-START  S:WTING<0 WTING=86400-WTING  ; handle midnight
"RTN","HMPMOND",119,0)
 Q $FN(WTING,",")_" s"  ; make pretty
"RTN","HMPMOND",120,0)
 ;
"RTN","HMPMONDH")
0^23^B4295339^B9552546
"RTN","HMPMONDH",1,0)
HMPMONDH ;ASMR/BL, monitor prompt help ;Sep 13, 2016 20:03:08
"RTN","HMPMONDH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONDH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONDH",4,0)
 ;
"RTN","HMPMONDH",5,0)
 Q  ; no entry from top
"RTN","HMPMONDH",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONDH",7,0)
 ;
"RTN","HMPMONDH",8,0)
MONHELP ; reader ? help for main monitor screen
"RTN","HMPMONDH",9,0)
 ; called by ^DIR calls invoked by PROMPT^HMPMON
"RTN","HMPMONDH",10,0)
 ;
"RTN","HMPMONDH",11,0)
 W !!,"The available actions at the eHMP monitors's main screen include:",!
"RTN","HMPMONDH",12,0)
 W !,"U = Update Monitor, to refresh the main screen. This is the"
"RTN","HMPMONDH",13,0)
 W !,"    default action at this prompt.  It updates the screen based on the"
"RTN","HMPMONDH",14,0)
 W !,"    auto-update rate (see below)."
"RTN","HMPMONDH",15,0)
 W !,"V = View HMP Nodes, to inspect eHMP data nodes"
"RTN","HMPMONDH",16,0)
 W !,"    stored in the ^XTMP or ^TMP globals."
"RTN","HMPMONDH",17,0)
 W !,"J = Job Listing, to inspect the polling jobs and extract batches."
"RTN","HMPMONDH",18,0)
 W !,"S = Synch Processes, to switch to the Synch Process Screen."
"RTN","HMPMONDH",19,0)
 W !,"E = Errors, to switch to the Errors Screen."
"RTN","HMPMONDH",20,0)
 W !,"H = History, to switch to the History Screen (not yet implemented)."
"RTN","HMPMONDH",21,0)
 W !,"C = Change Auto-update Rate, to change the frequency with which"
"RTN","HMPMONDH",22,0)
 W !,"    the monitor screens refresh."
"RTN","HMPMONDH",23,0)
 W !,"L = Log, look up an HMP EVENT log entry."
"RTN","HMPMONDH",24,0)
 W !,"M = Monitor a Different SERVER, to change which server in the"
"RTN","HMPMONDH",25,0)
 W !,"    HMP Subscription file (800000) is displayed in the monitor."
"RTN","HMPMONDH",26,0)
 W !,"Q = Quit, in any screen, will exit the monitor.",!
"RTN","HMPMONDH",27,0)
 D RTRN2CON^HMPMONL
"RTN","HMPMONDH",28,0)
 Q
"RTN","HMPMONDH",29,0)
 ;
"RTN","HMPMONE")
0^63^B20016683^B15446586
"RTN","HMPMONE",1,0)
HMPMONE ;ASMR/BL,JCH, monitor error actions ;Sep 13, 2016 20:03:08
"RTN","HMPMONE",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONE",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONE",4,0)
 ;
"RTN","HMPMONE",5,0)
 Q  ; no entry from top
"RTN","HMPMONE",6,0)
 ;DE6526, DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONE",7,0)
 ;
"RTN","HMPMONE",8,0)
UE ; update error screen
"RTN","HMPMONE",9,0)
 ; input:
"RTN","HMPMONE",10,0)
 ;   HMPMNTR("server") = # of server record in file HMP Subscription (800000)
"RTN","HMPMONE",11,0)
 ; output:
"RTN","HMPMONE",12,0)
 ;   report counts
"RTN","HMPMONE",13,0)
 N ERRCNT,EXIT,STREAM ; freshness stream subscript in ^XTMP
"RTN","HMPMONE",14,0)
 S EXIT=0,STREAM=$$LASTREAM^HMPMONL ; get last freshness stream
"RTN","HMPMONE",15,0)
 F  Q:EXIT  D
"RTN","HMPMONE",16,0)
 . S HMPMNTR("default")="BM"  ; default for this screen
"RTN","HMPMONE",17,0)
 . D FORMFEED^HMPMONL W !,$$HDR^HMPMONL("eHMP Errors"),!  ;  header line
"RTN","HMPMONE",18,0)
 . S ERRCNT("HMPXTEMP ERRORS")=$$EXTMP ; ehmp errors in xtmp error log
"RTN","HMPMONE",19,0)
 . S ERRCNT("TMP HMPERR")=$$EHMPJB ; ehmp errors in hmperr error log
"RTN","HMPMONE",20,0)
 . S ERRCNT("HMFERR")=$$EHMPFERR ; ehmp errors in hmpferr error log
"RTN","HMPMONE",21,0)
 . S ERRCNT("TMP $J HMP ERROR")=$$ETMPJOB ; ehmp errors in hmp error error lo
"RTN","HMPMONE",22,0)
 . S ERRCNT("TOTAL")=ERRCNT("HMPXTEMP ERRORS")+ERRCNT("TMP HMPERR")+ERRCNT("HMFERR")+ERRCNT("TMP $J HMP ERROR")  ;total ehmp errors
"RTN","HMPMONE",23,0)
 . W !,"                error log   # errors"
"RTN","HMPMONE",24,0)
 . W !,"    ---------------------   --------"
"RTN","HMPMONE",25,0)
 . W !,"                    Total: "_ERRCNT("TOTAL"),!
"RTN","HMPMONE",26,0)
 . W !," ^XTMP('HMPXTEMP ERRORS'): "_ERRCNT("HMPXTEMP ERRORS")
"RTN","HMPMONE",27,0)
 . W !,"      ^TMP('HMPERR',$job): "_ERRCNT("TMP HMPERR")
"RTN","HMPMONE",28,0)
 . W !,"  ^TMP('HMPFERR',$job,$h): "_ERRCNT("HMFERR")
"RTN","HMPMONE",29,0)
 . W !,"   ^TMP($job,'HMP ERROR'): "_ERRCNT("TMP $J HMP ERROR")
"RTN","HMPMONE",30,0)
 . D PROMPT^HMPMONA(.HMPACT,"ERR")  ; select prompts from the ERR group
"RTN","HMPMONE",31,0)
 . I HMPACT="UE" Q  ; update error screen, nothing to do
"RTN","HMPMONE",32,0)
 . I HMPACT="BM" S EXIT=1 Q  ; back to monitor
"RTN","HMPMONE",33,0)
 . I $D(DUOUT)!$D(DIROUT)!$D(DTOUT) S EXIT=1 Q  ; handle '^'
"RTN","HMPMONE",34,0)
 . S LNTAG=$P(HMPCALLS(HMPACT),";",3)
"RTN","HMPMONE",35,0)
 . D @LNTAG S EXIT=HMPMNTR("exit") Q:HMPMNTR("exit")  ; perform user-selected action, exit if flag set
"RTN","HMPMONE",36,0)
 . D RTRN2CON^HMPMONL ; return to continue
"RTN","HMPMONE",37,0)
 Q
"RTN","HMPMONE",38,0)
 ;
"RTN","HMPMONE",39,0)
 ;
"RTN","HMPMONE",40,0)
ETOTL() ; function, count ehmp errors in all error logs
"RTN","HMPMONE",41,0)
 ; called by:
"RTN","HMPMONE",42,0)
 ;   SHOWSRVR^HMPMON
"RTN","HMPMONE",43,0)
 ; output = # ehmp errors in all error logs
"RTN","HMPMONE",44,0)
 ;
"RTN","HMPMONE",45,0)
 N ERRCNT
"RTN","HMPMONE",46,0)
 S ERRCNT("HMPXTEMP ERRORS")=$$EXTMP ; errors in ^XTMP("HMPXTEMP ERRORS")
"RTN","HMPMONE",47,0)
 S ERRCNT("TMP HMPERR")=$$EHMPJB ; errors in ^TMP("HMPERR",$J)
"RTN","HMPMONE",48,0)
 S ERRCNT("HMFERR")=$$EHMPFERR ; errors in ^TMP("HMPFERR",$J)
"RTN","HMPMONE",49,0)
 S ERRCNT("TMP $J HMP ERROR")=$$ETMPJOB ; errors in  ^TMP($J,"HMP ERROR","# of Errors")
"RTN","HMPMONE",50,0)
 ; return total errors
"RTN","HMPMONE",51,0)
 Q ERRCNT("HMPXTEMP ERRORS")+ERRCNT("TMP HMPERR")+ERRCNT("HMFERR")+ERRCNT("TMP $J HMP ERROR")
"RTN","HMPMONE",52,0)
 ;
"RTN","HMPMONE",53,0)
 ;
"RTN","HMPMONE",54,0)
EXTMP() ; function, errors in ^XTMP("HMPXTEMP ERRORS")
"RTN","HMPMONE",55,0)
 ; output = # ehmp errors in xtmp error log
"RTN","HMPMONE",56,0)
 Q +$O(^XTMP("HMPXTEMP ERRORS",""),-1)
"RTN","HMPMONE",57,0)
 ;
"RTN","HMPMONE",58,0)
EHMPJB() ; function, total errors in ^TMP("HMPERR",$J)
"RTN","HMPMONE",59,0)
 N CNT,JB S CNT=0,JB=0
"RTN","HMPMONE",60,0)
 F  S JB=$O(^TMP("HMPERR",JB)) Q:'JB  S CNT=CNT+$O(^TMP("HMPERR",JB,0))
"RTN","HMPMONE",61,0)
 Q CNT
"RTN","HMPMONE",62,0)
 ;
"RTN","HMPMONE",63,0)
EHMPFERR() ; function, errors in ^TMP("HMPFERR",$J)
"RTN","HMPMONE",64,0)
 Q:'$O(^TMP("HMPFERR",0)) 0  ; nothing to count
"RTN","HMPMONE",65,0)
 N CNT,JB,HTM S CNT=0,JB=0
"RTN","HMPMONE",66,0)
 F  S JB=$O(^TMP("HMPFERR",JB)) Q:'JB  S HTM=0 F  S HTM=$O(^TMP("HMPFERR",JB,HTM)) Q:'HTM  S CNT=CNT+1
"RTN","HMPMONE",67,0)
 Q CNT ; return total errors
"RTN","HMPMONE",68,0)
 ;
"RTN","HMPMONE",69,0)
 ;
"RTN","HMPMONE",70,0)
ETMPJOB() ; function, total errors in  ^TMP($J,"HMP ERROR","# of Errors")
"RTN","HMPMONE",71,0)
 N CNT,JB S CNT=0,JB=0
"RTN","HMPMONE",72,0)
 F  S JB=$O(^TMP(JB))  Q:'JB  S CNT=CNT+$G(^TMP(JB,"HMP ERROR","# of Errors"))
"RTN","HMPMONE",73,0)
 Q CNT ; return # errors
"RTN","HMPMONE",74,0)
 ;
"RTN","HMPMONE",75,0)
EX ; display ^XTMP error log, called from ^DIR selection in OPTION^HMPMON
"RTN","HMPMONE",76,0)
 D FORMFEED^HMPMONL W !,$$HDR^HMPMONL("^XTMP errors"),!  ;  header line
"RTN","HMPMONE",77,0)
 W !,"Total Errors in "_$NA(^XTMP("HMPXTEMP ERRORS"))_": "_$$EXTMP Q
"RTN","HMPMONE",78,0)
 ;
"RTN","HMPMONE",79,0)
E3 ; display ^TMP("HMPERR",$J) errors
"RTN","HMPMONE",80,0)
 D FORMFEED^HMPMONL W !,$$HDR^HMPMONL("^TMP('HMPERR',$J"),!  ;  header line
"RTN","HMPMONE",81,0)
 W !,"Total Errors in "_$NA(^XTMP("HMPERR","job#"))_": "_$$EHMPJB Q
"RTN","HMPMONE",82,0)
 ;
"RTN","HMPMONE",83,0)
E4 ; display ^TMP("HMPFERR",$J) errors, set in routine HMPDJFS
"RTN","HMPMONE",84,0)
 W !,"Total Errors in "_$NA(^XTMP("HMPFERR","job#"))_$$EHMPFERR Q
"RTN","HMPMONE",85,0)
 ;
"RTN","HMPMONE",86,0)
 ;
"RTN","HMPMONE",87,0)
E5 ; display ^TMP($job,"HMP ERROR") error info, set in routines:
"RTN","HMPMONE",88,0)
 ;    HMPDERRH
"RTN","HMPMONE",89,0)
 ;    HMPDJ
"RTN","HMPMONE",90,0)
 ;    HMPDJ2
"RTN","HMPMONE",91,0)
 ;    HMPDJX
"RTN","HMPMONE",92,0)
 ;    HMPEF
"RTN","HMPMONE",93,0)
 ;    HMPEF1
"RTN","HMPMONE",94,0)
 D FORMFEED^HMPMONL W !,$$HDR^HMPMONL("^TMP($J,'HMP ERROR'"),!  ;  header line
"RTN","HMPMONE",95,0)
 W !!,"Total Errors in "_$NA(^TMP("job#","HMP ERROR"))_": "_$$ETMPJOB Q
"RTN","HMPMONE",96,0)
 ;
"RTN","HMPMONE",97,0)
LOG ; interactive display of HMP EVENT entry
"RTN","HMPMONE",98,0)
 D FORMFEED^HMPMONL W !,$$HDR^HMPMONL("HMP EVENT log"),!  ;  header line
"RTN","HMPMONE",99,0)
 I '$O(^HMPLOG(800003,0)) W !,"The HMP EVENT file (#800003) is *empty*",!! D RTRN2CON^HMPMONL Q
"RTN","HMPMONE",100,0)
 N DA,DR,DIQ,DIC,X,Y
"RTN","HMPMONE",101,0)
 S DIC="^HMPLOG(800003,",DIC(0)="AEMQ" D ^DIC
"RTN","HMPMONE",102,0)
 I '(Y>0) D FORMFEED^HMPMONL Q  ; nothing selected
"RTN","HMPMONE",103,0)
 S DA=+Y W ! D EN^DIQ  ; DR is undefined to display all fields
"RTN","HMPMONE",104,0)
 W !!,"* End of HMP EVENT listing "_$$NOW^HMPMONL_" *",! D RTRN2CON^HMPMONL
"RTN","HMPMONE",105,0)
 Q
"RTN","HMPMONE",106,0)
 ;
"RTN","HMPMONEH")
0^64^B2338588^B7976382
"RTN","HMPMONEH",1,0)
HMPMONEH ;ASMR/BL,JCH monitor error help ;Sep 13, 2016 20:03:08
"RTN","HMPMONEH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONEH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONEH",4,0)
 ;
"RTN","HMPMONEH",5,0)
 Q  ; no entry from top
"RTN","HMPMONEH",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONEH",7,0)
 ;
"RTN","HMPMONEH",8,0)
ERRHELP ; ^DIR ? help for error-action prompt
"RTN","HMPMONEH",9,0)
 W !,"The available actions at the eHMP Monitor's error screen include:",!
"RTN","HMPMONEH",10,0)
 W !,"BM = Back to Monitor, to return to Monitor's main screen."
"RTN","HMPMONEH",11,0)
 W !,"UE = Update Error Screen, to refresh the error screen. This is the"
"RTN","HMPMONEH",12,0)
 W !,"     default action in this screen, which automatically updates."
"RTN","HMPMONEH",13,0)
 W !,"E3 = To display "_$NA(^TMP("HMPERR","JOB#"))_" errors"
"RTN","HMPMONEH",14,0)
 W !,"E4 = To display "_$NA(^TMP("HMPFERR","JOB#"))_" errors"
"RTN","HMPMONEH",15,0)
 W !,"E5 = To display "_$NA(^TMP("JOB#","HMP ERROR"))_" errors"
"RTN","HMPMONEH",16,0)
 W !,"EX = To display "_$NA(^XTMP("HMP*"))_" errors"
"RTN","HMPMONEH",17,0)
 W !,"BM = Back to Monitor, to return to Monitor's main screen."
"RTN","HMPMONEH",18,0)
 W !,"Q  = Quit, to exit the monitor"
"RTN","HMPMONEH",19,0)
 Q
"RTN","HMPMONEH",20,0)
 ;
"RTN","HMPMONH")
0^24^B708781^B3366095
"RTN","HMPMONH",1,0)
HMPMONH ;ASMR/BL, Monitor history ;Sep 13, 2016 20:03:08
"RTN","HMPMONH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONH",4,0)
 ;
"RTN","HMPMONH",5,0)
 Q  ; no entry from top
"RTN","HMPMONH",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONH",7,0)
 ;for future enhancements, not implemented as of 7 September 2016
"RTN","HMPMONH",8,0)
UH ;
"RTN","HMPMONH",9,0)
 N Y S Y="Monitor History" W !,$J(Y,40-($L(Y)\2)) D RTRN2CON^HMPMONL Q
"RTN","HMPMONH",10,0)
 ;
"RTN","HMPMONH",11,0)
EH ;
"RTN","HMPMONH",12,0)
 N Y S Y="Examine History" W !,$J(Y,40-($L(Y)\2)) D RTRN2CON^HMPMONL Q
"RTN","HMPMONH",13,0)
 ;
"RTN","HMPMONH",14,0)
MH ;
"RTN","HMPMONH",15,0)
 N Y S Y="Manage History" W !,$J(Y,40-($L(Y)\2)) D RTRN2CON^HMPMONL Q
"RTN","HMPMONH",16,0)
 ;
"RTN","HMPMONHH")
0^25^B574268^B6882140
"RTN","HMPMONHH",1,0)
HMPMONHH ;ASMR/BL, monitor history help ;Sep 13, 2016 20:03:08
"RTN","HMPMONHH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONHH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONHH",4,0)
 ;
"RTN","HMPMONHH",5,0)
 Q  ; no entry from top
"RTN","HMPMONHH",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONHH",7,0)
 ;
"RTN","HMPMONHH",8,0)
HELPTEXT ;not implemented
"RTN","HMPMONHH",9,0)
 W !,"The available action at eHMP Monitor's synch-process screen is:",!
"RTN","HMPMONHH",10,0)
 W !,"BM = Back to Monitor, to return to Monitor's main screen."
"RTN","HMPMONHH",11,0)
 Q
"RTN","HMPMONHH",12,0)
 ;
"RTN","HMPMONJ")
0^26^B14612706^B21225316
"RTN","HMPMONJ",1,0)
HMPMONJ ;ASMR/BL, monitor job listing ;Sep 13, 2016 20:03:08
"RTN","HMPMONJ",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONJ",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONJ",4,0)
 ;
"RTN","HMPMONJ",5,0)
 Q  ; no entry from top
"RTN","HMPMONJ",6,0)
 ;DE6526 - routine refactored, 25 August 2016
"RTN","HMPMONJ",7,0)
 ;
"RTN","HMPMONJ",8,0)
 ;
"RTN","HMPMONJ",9,0)
J ; polling job display
"RTN","HMPMONJ",10,0)
 ;in symbol table:
"RTN","HMPMONJ",11,0)
 ;   HMPMNTR("server") = # of server record in file HMP Subscription (800000)
"RTN","HMPMONJ",12,0)
 ;   HMPROMPT = current monitor prompt group
"RTN","HMPMONJ",13,0)
 ;
"RTN","HMPMONJ",14,0)
 D FORMFEED^HMPMONL ; clear screen before report
"RTN","HMPMONJ",15,0)
 N STREAM  ; freshness stream subscript in ^XTMP
"RTN","HMPMONJ",16,0)
 W !,$$HDR^HMPMONL("eHMP Jobs"),!  ;  header line
"RTN","HMPMONJ",17,0)
 S STREAM=$$LASTREAM^HMPMONL ; get last freshness stream
"RTN","HMPMONJ",18,0)
 ;
"RTN","HMPMONJ",19,0)
 D POLLJOBS(STREAM) ; show stream's polling jobs
"RTN","HMPMONJ",20,0)
 D EXTRBTCH(STREAM) ; show extract batches
"RTN","HMPMONJ",21,0)
 W !! D RTRN2CON^HMPMONL
"RTN","HMPMONJ",22,0)
 Q
"RTN","HMPMONJ",23,0)
 ;
"RTN","HMPMONJ",24,0)
 ;
"RTN","HMPMONJ",25,0)
POLLJOBS(STREAM) ; show stream's polling jobs
"RTN","HMPMONJ",26,0)
 ;
"RTN","HMPMONJ",27,0)
 Q:$G(STREAM)=""
"RTN","HMPMONJ",28,0)
 W !!,"Polling job#:"
"RTN","HMPMONJ",29,0)
 ;
"RTN","HMPMONJ",30,0)
 N JOBID,LINE,X,Y
"RTN","HMPMONJ",31,0)
 S JOBID=""
"RTN","HMPMONJ",32,0)
 F  S JOBID=$O(^XTMP(STREAM,"job",JOBID)) Q:'JOBID  D
"RTN","HMPMONJ",33,0)
 . S LINE="   "_JOBID
"RTN","HMPMONJ",34,0)
 . ; check if job is still active
"RTN","HMPMONJ",35,0)
 . S X=JOBID X ^%ZOSF("JOBPARAM") S:Y="" LINE=LINE_" (inactive)"
"RTN","HMPMONJ",36,0)
 . W !,LINE
"RTN","HMPMONJ",37,0)
 ;
"RTN","HMPMONJ",38,0)
 Q
"RTN","HMPMONJ",39,0)
 ;
"RTN","HMPMONJ",40,0)
EXTRBTCH(STREAM) ; show extract batches
"RTN","HMPMONJ",41,0)
 ; STREAM - freshness stream
"RTN","HMPMONJ",42,0)
 ; called by:
"RTN","HMPMONJ",43,0)
 ;   J
"RTN","HMPMONJ",44,0)
 ;  ; symbol table:
"RTN","HMPMONJ",45,0)
 ;   HMPMNTR("server") = # of server record in file HMP Subscription (800000)
"RTN","HMPMONJ",46,0)
 ;   HMPROMPT = current dashboard prompt, ^ = exit now
"RTN","HMPMONJ",47,0)
 ; loop through extracts for this server
"RTN","HMPMONJ",48,0)
 ;
"RTN","HMPMONJ",49,0)
 N BATCH,BTCHCNT,C,EXIT,EXTRACTS,FRESHPRE,PIECE,SLOTS,TASK,TSKLST
"RTN","HMPMONJ",50,0)
 ; BTCHCNT - batch counter
"RTN","HMPMONJ",51,0)
 S SLOTS="Slots Open: "_$$SLOTS^HMPMONL ; # free slots, ^DD(3.54,1,0)="AVAILABLE SLOTS"
"RTN","HMPMONJ",52,0)
 S EXTRACTS="Extract Batches:",$E(EXTRACTS,80-$L(SLOTS),79)=SLOTS ;  extracts summary
"RTN","HMPMONJ",53,0)
 W !!,EXTRACTS
"RTN","HMPMONJ",54,0)
 ;
"RTN","HMPMONJ",55,0)
 S (BTCHCNT,EXIT)=0,FRESHPRE=$$FRESHPRE^HMPMONL,BATCH=FRESHPRE
"RTN","HMPMONJ",56,0)
 F  D  Q:EXIT  ; traverse batches
"RTN","HMPMONJ",57,0)
 . S BATCH=$O(^XTMP(BATCH)) ; get next batch
"RTN","HMPMONJ",58,0)
 . S:$E(BATCH,1,$L(FRESHPRE))'=FRESHPRE EXIT=1 Q  ; done if it's a different freshness stream
"RTN","HMPMONJ",59,0)
 . S BTCHCNT=BTCHCNT+1 W !,$J($P(BATCH,"~",3),12)_" Tasks"
"RTN","HMPMONJ",60,0)
 . S TASK=0,TSKLST="",C=0  ; C is the count
"RTN","HMPMONJ",61,0)
 . F  S TASK=$O(^XTMP(BATCH,0,"task",TASK)) Q:'TASK  S C=C+1,$P(TSKLST,",",C)=TASK  ; comma-delimited string of tasks
"RTN","HMPMONJ",62,0)
 . W !," "_C_" Task"_$E(C'=1,"s")_" found: "_TSKLST
"RTN","HMPMONJ",63,0)
 . I '$D(^XTMP(BATCH,0,"wait")) W !,"Waiting: "_$$WAIT(BATCH)_" seconds" Q
"RTN","HMPMONJ",64,0)
 . ;
"RTN","HMPMONJ",65,0)
 . I '$L(TSKLST) W !,"No tasks found for "_BATCH_" batch." Q
"RTN","HMPMONJ",66,0)
 . ;
"RTN","HMPMONJ",67,0)
 . ; each comma $piece of the list is a task #
"RTN","HMPMONJ",68,0)
 . F PIECE=1:1:$L(TSKLST,",") D
"RTN","HMPMONJ",69,0)
 ..  S TASK=$P(TSKLST,",",PIECE) W !,"Task "_TASK_" extracting: "_$$LASTITEM(BATCH,TASK),! ; last item in batch
"RTN","HMPMONJ",70,0)
 ;
"RTN","HMPMONJ",71,0)
 I 'BTCHCNT W !," * No batches found. *",!
"RTN","HMPMONJ",72,0)
 Q
"RTN","HMPMONJ",73,0)
 ;
"RTN","HMPMONJ",74,0)
WAIT(BATCH) ; function # seconds BATCH has waited
"RTN","HMPMONJ",75,0)
 ;
"RTN","HMPMONJ",76,0)
 N START S START=$G(^XTMP(BATCH,0,"time"))
"RTN","HMPMONJ",77,0)
 Q:'START 0  ; default to zero
"RTN","HMPMONJ",78,0)
 Q $$HDIFF^XLFDT($H,START,2)  ; return wait time in seconds
"RTN","HMPMONJ",79,0)
 ;
"RTN","HMPMONJ",80,0)
LASTITEM(BATCH,TASK) ; function, last domain retrieved for this BATCH and TASK
"RTN","HMPMONJ",81,0)
 Q:'$L($G(BATCH)) "*no batch*"  ; batch required
"RTN","HMPMONJ",82,0)
 Q:'$G(TASK) "*no task*"  ; task required
"RTN","HMPMONJ",83,0)
 N DOMAIN,LSTITM,NUM S LSTITM="",DOMAIN=""
"RTN","HMPMONJ",84,0)
 F  D  Q:DOMAIN=""!$L(LSTITM)
"RTN","HMPMONJ",85,0)
 . S DOMAIN=$O(^XTMP(BATCH,0,"status",DOMAIN)) Q:'$L(DOMAIN)
"RTN","HMPMONJ",86,0)
 . Q:$G(^XTMP(BATCH,0,"status",DOMAIN))  ; domain complete
"RTN","HMPMONJ",87,0)
 . S NUM=$O(^XTMP(BATCH,TASK,DOMAIN,""),-1)  ; go to last entry
"RTN","HMPMONJ",88,0)
 . S LSTITM=DOMAIN_$S(NUM:" #"_NUM,1:"")
"RTN","HMPMONJ",89,0)
 ;
"RTN","HMPMONJ",90,0)
 S:LSTITM="" LSTITM="<finished>"
"RTN","HMPMONJ",91,0)
 Q LSTITM  ; return last item
"RTN","HMPMONJ",92,0)
 ;
"RTN","HMPMONL")
0^27^B7166896^B48690614
"RTN","HMPMONL",1,0)
HMPMONL ;ASMR/BL, monitor library support ;Sep 24, 2016 03:07:36
"RTN","HMPMONL",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONL",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONL",4,0)
 ;
"RTN","HMPMONL",5,0)
 Q  ; no entry from top
"RTN","HMPMONL",6,0)
 ;DE6526, DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONL",7,0)
 ;
"RTN","HMPMONL",8,0)
LASTREAM() ; extrinsic variable, last freshness stream entry for this server, expects HMPMNTR in symbol table
"RTN","HMPMONL",9,0)
 N SRVRNM,STREAM
"RTN","HMPMONL",10,0)
 S SRVRNM=$P(HMPMNTR("zero node"),U)  ; SERVER field (#.01)
"RTN","HMPMONL",11,0)
 ; last freshness stream entry, $C(1) collates after all numerics
"RTN","HMPMONL",12,0)
 S STREAM=$O(^XTMP("HMPFS~"_SRVRNM_"~9"_$C(1)),-1)
"RTN","HMPMONL",13,0)
 Q:$P(STREAM,"~")'="HMPFS" ""   ; not a freshness stream, return null
"RTN","HMPMONL",14,0)
 Q:$P(STREAM,"~",2)'=SRVRNM ""  ; nothing for this server, return null
"RTN","HMPMONL",15,0)
 Q STREAM  ; return freshness stream
"RTN","HMPMONL",16,0)
 ;
"RTN","HMPMONL",17,0)
SLOTS() ; extrinsic variable, check HMP EXTRACT RESOURCE entry in RESOURCE file (#3.54)
"RTN","HMPMONL",18,0)
 N HMPOUT
"RTN","HMPMONL",19,0)
 ;^DD(3.54,1,0)= AVAILABLE SLOTS
"RTN","HMPMONL",20,0)
 D FIND^DIC(3.54,"",1,"BX","HMP EXTRACT RESOURCE","","","","","HMPOUT")  ; B cross-ref., exact match
"RTN","HMPMONL",21,0)
 Q $G(HMPOUT("DILIST","ID",1,1)) ; AVAILABLE SLOTS
"RTN","HMPMONL",22,0)
 ;
"RTN","HMPMONL",23,0)
FRESHPRE() ; extrinsic variable, return ^XTMP freshness prefix, expects HMPMNTR in symbol table
"RTN","HMPMONL",24,0)
 Q "HMPFX~"_$P(HMPMNTR("zero node"),U)_"~" ; ^XTMP prefix from node zero in file 800000
"RTN","HMPMONL",25,0)
 ;
"RTN","HMPMONL",26,0)
HDR(TXT) ; function, create header with TXT on left
"RTN","HMPMONL",27,0)
 N HDR,X,Y
"RTN","HMPMONL",28,0)
 S X=$G(HMPMNTR("site name"))_":"_$G(HMPMNTR("site hash"))  ; header
"RTN","HMPMONL",29,0)
 S Y=$S($L(X)>1:X,1:"eHMP support")  ; in case HMPMNTR array not present
"RTN","HMPMONL",30,0)
 S HDR=$J(Y,$L(Y)\2+40)  ; center site name and hash
"RTN","HMPMONL",31,0)
 S Y=$G(TXT),$E(HDR,1,$L(Y))=Y  ;put TXT on the left
"RTN","HMPMONL",32,0)
 S Y=$$NOW^HMPMONL,$E(HDR,80-$L(Y),79)=Y  ; $$NOW on the right
"RTN","HMPMONL",33,0)
 Q HDR  ;  header line
"RTN","HMPMONL",34,0)
 ;
"RTN","HMPMONL",35,0)
NOW() ;extrinsic variable, return now in ISO format
"RTN","HMPMONL",36,0)
 N HL7DT S HL7DT=$$FMTHL7^HMPSTMP($$NOW^XLFDT)
"RTN","HMPMONL",37,0)
 ; e.g. 2016-12-20 09:26:51
"RTN","HMPMONL",38,0)
 Q $E(HL7DT,1,4)_"-"_$E(HL7DT,5,6)_"-"_$E(HL7DT,7,8)_" "_$E(HL7DT,9,10)_":"_$E(HL7DT,11,12)_":"_$E(HL7DT,13,14)
"RTN","HMPMONL",39,0)
 ;
"RTN","HMPMONL",40,0)
CHKIOSL ; handle end of page
"RTN","HMPMONL",41,0)
 Q:'((IOSL-4)>$Y)  ; not at bottom, exit
"RTN","HMPMONL",42,0)
 D RTRN2CON  ; prompt for return to continue
"RTN","HMPMONL",43,0)
 Q:HMPROMPT=U  ; no formfeed if timeout or '^'escape
"RTN","HMPMONL",44,0)
 D FORMFEED  ; clear screen
"RTN","HMPMONL",45,0)
 Q
"RTN","HMPMONL",46,0)
 ;
"RTN","HMPMONL",47,0)
NOTYET ;
"RTN","HMPMONL",48,0)
 W !!,"* This feature not yet implemented.*",! Q
"RTN","HMPMONL",49,0)
 ;
"RTN","HMPMONL",50,0)
RTRN2CON ; return to continue prompt
"RTN","HMPMONL",51,0)
 N DIR,DIROUT,DUOUT,X,Y
"RTN","HMPMONL",52,0)
 ;skip line, give user a prompt to continue
"RTN","HMPMONL",53,0)
 W ! S DIR(0)="EA",DIR("A")="Press ENTER to continue: " D ^DIR  ; handle the prompe here
"RTN","HMPMONL",54,0)
 ; exit if user enters '^', if timeout leave DTOUT in symbol table
"RTN","HMPMONL",55,0)
 S:$D(DTOUT)!$D(DUOUT)!$D(DIROUT) HMPROMPT=U ; exit eHMP monitor
"RTN","HMPMONL",56,0)
 Q
"RTN","HMPMONL",57,0)
 ;
"RTN","HMPMONL",58,0)
FORMFEED ; issue form feed
"RTN","HMPMONL",59,0)
 W @IOF S $X=0 Q  ; reset cursor and $X
"RTN","HMPMONL",60,0)
 ;
"RTN","HMPMONM")
0^28^B4370662^B24792706
"RTN","HMPMONM",1,0)
HMPMONM ;ASMR/BL, monitor server selection ;Sep 19, 2016 20:02:20
"RTN","HMPMONM",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONM",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONM",4,0)
 ;
"RTN","HMPMONM",5,0)
 Q  ; no entry from top
"RTN","HMPMONM",6,0)
 ;DE6526, DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONM",7,0)
 ;
"RTN","HMPMONM",8,0)
M ; interactive, monitor a different server
"RTN","HMPMONM",9,0)
 ; called after ^DIR call in OPTION^HMPMON
"RTN","HMPMONM",10,0)
 ; places into symbol table:
"RTN","HMPMONM",11,0)
 ;   HMPMNTR("server") = ien of server to monitor
"RTN","HMPMONM",12,0)
 ;   HMPMNTR("zero node") - zero node of selected entry
"RTN","HMPMONM",13,0)
 ;
"RTN","HMPMONM",14,0)
 W ! N DIC,DIROUT,DUOUT,X,Y
"RTN","HMPMONM",15,0)
 S DIC="^HMP(800000,",DIC(0)="AEMQZ",DIC("A")="Select eHMP Server to Monitor: ",DIC("B")=HMPMNTR("server") ; default to current selection
"RTN","HMPMONM",16,0)
 D ^DIC  ;interactive lookup
"RTN","HMPMONM",17,0)
 Q:$D(DTOUT)  ; time-out, leave in symbol table
"RTN","HMPMONM",18,0)
 Q:$D(DUOUT)!$D(DIROUT)!'(Y>0)  ; nothing selected
"RTN","HMPMONM",19,0)
 S HMPMNTR("server")=+Y ; update server IEN
"RTN","HMPMONM",20,0)
 S HMPMNTR("zero node")=Y(0)  ;save node zero
"RTN","HMPMONM",21,0)
 Q
"RTN","HMPMONM",22,0)
 ;
"RTN","HMPMONM",23,0)
GETSRVR() ;extrinsic variable, returns IEN of default server to monitor
"RTN","HMPMONM",24,0)
 ;
"RTN","HMPMONM",25,0)
 N F,J,RSLT S RSLT=+$O(^HMP(800000,0))
"RTN","HMPMONM",26,0)
 Q:'$O(^HMP(800000,RSLT)) RSLT  ; nothing else to check, return first IEN found
"RTN","HMPMONM",27,0)
 ;
"RTN","HMPMONM",28,0)
 ;^DD(800000,.07,0)="DEFAULT?^S^1:YES;0:NO;^0;7^Q"
"RTN","HMPMONM",29,0)
 Q:$P(^HMP(800000,RSLT,0),U,7) RSLT  ; 1st entry is default
"RTN","HMPMONM",30,0)
 ; if nothing marked as default, 1st entry will be returned
"RTN","HMPMONM",31,0)
 S F=0,J=RSLT  ; F is flag, default IEN found
"RTN","HMPMONM",32,0)
 ;start with RSLT, check other entries for DEFAULT flag, stop if one found
"RTN","HMPMONM",33,0)
 F  S J=$O(^HMP(800000,J)) Q:'J!F  S:$P(^HMP(800000,J,0),U,7) (F,RSLT)=J
"RTN","HMPMONM",34,0)
 Q RSLT
"RTN","HMPMONM",35,0)
 ;
"RTN","HMPMONM",36,0)
NOSRVR ; interactive help display if no server selected
"RTN","HMPMONM",37,0)
 W !!,"There must be a SERVER entry in the HMP SUBSCRIPTION file (#800000)."
"RTN","HMPMONM",38,0)
 W !,"You can set the field DEFAULT? (#.07) to 'YES'"
"RTN","HMPMONM",39,0)
 W !,"and that entry will become the default server to monitor.",!
"RTN","HMPMONM",40,0)
 D RTRN2CON^HMPMONL ; Enter RETURN to continue
"RTN","HMPMONM",41,0)
 Q
"RTN","HMPMONM",42,0)
 ;
"RTN","HMPMONR")
0^29^B15294791^B2756
"RTN","HMPMONR",1,0)
HMPMONR ;ASMR/BL, Reader Support logic ;Sep 19, 2016 20:02:20
"RTN","HMPMONR",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONR",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONR",4,0)
 ;
"RTN","HMPMONR",5,0)
 Q  ; no entry from top
"RTN","HMPMONR",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONR",7,0)
 ; this routine contains logic to suppport the FileMan Reader (calls to ^DIR)
"RTN","HMPMONR",8,0)
 ;
"RTN","HMPMONR",9,0)
CALLIST(CLLRSLT) ; CLLRSLT passed by reference, return list of calls
"RTN","HMPMONR",10,0)
 ; this is called once on entry to the eHMP monitor, all the ^DIR prompts are listed below
"RTN","HMPMONR",11,0)
 N P  ; P is used for Prompt below
"RTN","HMPMONR",12,0)
 S CLLRSLT="BM^C^EX^E3^E4^E5^EH^ES^J^L^M^MH^PS^Q^RS^U^UE^UH^US^V"  ; complete list of prompts
"RTN","HMPMONR",13,0)
 ; each subscript below is a prompt that can displayed in ^DIR as a set of codes
"RTN","HMPMONR",14,0)
 ; the 2nd ';' $PIECE is the group (screen) in which it's used
"RTN","HMPMONR",15,0)
 S CLLRSLT("BM")="Back to Monitor;ERR,SYNC;"  ; no M code, used throughout, handled by hard-coded logic
"RTN","HMPMONR",16,0)
 S CLLRSLT("C")="Change Auto-refresh Rate;MNTR;C^HMPMONC"
"RTN","HMPMONR",17,0)
 S CLLRSLT("E")="Errors;ERR;UE^HMPMONE"
"RTN","HMPMONR",18,0)
 S CLLRSLT("EX")="Examine XTMP Error Log;ERR;EX^HMPMONE"
"RTN","HMPMONR",19,0)
 S CLLRSLT("E3")="Examine HMPERR Error Log;ERR;E3^HMPMONE"
"RTN","HMPMONR",20,0)
 S CLLRSLT("E4")="Examine HMPFERR Error Log;ERR;E4^HMPMONE"
"RTN","HMPMONR",21,0)
 S CLLRSLT("E5")="Examine HMP ERROR Error Log;ERR;E5^HMPMONE"
"RTN","HMPMONR",22,0)
 S CLLRSLT("EH")="Examine History;HIST;EH^HMPMONH"
"RTN","HMPMONR",23,0)
 S CLLRSLT("ES")="Examine Synch Process;SYNC;ES^HMPMONS"
"RTN","HMPMONR",24,0)
 S CLLRSLT("J")="Job Listing;MNTR;J^HMPMONJ"
"RTN","HMPMONR",25,0)
 S CLLRSLT("L")="Event Log Inquiry;MNTR;LOG^HMPMONE"
"RTN","HMPMONR",26,0)
 S CLLRSLT("M")="Monitor a Different Server;MNTR;M^HMPMONM"
"RTN","HMPMONR",27,0)
 S CLLRSLT("MH")="Manage History;HIST;MH^HMPMONH"
"RTN","HMPMONR",28,0)
 S CLLRSLT("PS")="Park Synch Process;SYNC;PS^HMPMONS"
"RTN","HMPMONR",29,0)
 S CLLRSLT("Q")="Quit;MNTR,ERR,SYNC;EXIT^HMPMON"  ; displayed on multiple screens
"RTN","HMPMONR",30,0)
 S CLLRSLT("S")="Update Synch Process;SYNC;US^HMPMONS"
"RTN","HMPMONR",31,0)
 S CLLRSLT("RS")="Restart Synch Process;SYNC;RS^HMPMONS"
"RTN","HMPMONR",32,0)
 S CLLRSLT("U")="Update Monitor;MNTR;U^HMPMOND"
"RTN","HMPMONR",33,0)
 S CLLRSLT("UE")="Update Error Screen;ERR;UE^HMPMONE"
"RTN","HMPMONR",34,0)
 S CLLRSLT("UH")="Update History Screen;HIST;UH^HMPMONH"
"RTN","HMPMONR",35,0)
 S CLLRSLT("US")="Update Sync-process Screen;SYNC;US^HMPMONS"
"RTN","HMPMONR",36,0)
 S CLLRSLT("V")="View HMP Nodes;MNTR;V^HMPMONV"
"RTN","HMPMONR",37,0)
 ;
"RTN","HMPMONR",38,0)
 ; now group by prompt for calls within a screen displayed to the user
"RTN","HMPMONR",39,0)
 ;
"RTN","HMPMONR",40,0)
 S P="MNTR" ; MNTR prompt group for ^DIR calls
"RTN","HMPMONR",41,0)
 S CLLRSLT(U,"DIR",P,"C")=""
"RTN","HMPMONR",42,0)
 S CLLRSLT(U,"DIR",P,"E")=""
"RTN","HMPMONR",43,0)
 S CLLRSLT(U,"DIR",P,"H")=""
"RTN","HMPMONR",44,0)
 S CLLRSLT(U,"DIR",P,"J")=""
"RTN","HMPMONR",45,0)
 S CLLRSLT(U,"DIR",P,"L")=""
"RTN","HMPMONR",46,0)
 S CLLRSLT(U,"DIR",P,"M")=""
"RTN","HMPMONR",47,0)
 S CLLRSLT(U,"DIR",P,"Q")=""
"RTN","HMPMONR",48,0)
 S CLLRSLT(U,"DIR",P,"S")=""
"RTN","HMPMONR",49,0)
 S CLLRSLT(U,"DIR",P,"U","default")=1  ; default prompt for the main screen (the MNTR group)
"RTN","HMPMONR",50,0)
 S CLLRSLT(U,"DIR",P,"V")=""
"RTN","HMPMONR",51,0)
 S CLLRSLT(U,"DIR","text",P)="HMP MONITOR ACTION;Select Monitor Action"
"RTN","HMPMONR",52,0)
 S CLLRSLT(U,"DIR","?",P)="^D MONHELP^HMPMONDH"  ; ^DIR help routine
"RTN","HMPMONR",53,0)
 ;
"RTN","HMPMONR",54,0)
 S P="ERR"  ; ERR prompt group for ^DIR calls
"RTN","HMPMONR",55,0)
 S CLLRSLT(U,"DIR",P,"BM")=""
"RTN","HMPMONR",56,0)
 S CLLRSLT(U,"DIR",P,"EX")=""
"RTN","HMPMONR",57,0)
 S CLLRSLT(U,"DIR",P,"E3")=""
"RTN","HMPMONR",58,0)
 S CLLRSLT(U,"DIR",P,"E4")=""
"RTN","HMPMONR",59,0)
 S CLLRSLT(U,"DIR",P,"E5")=""
"RTN","HMPMONR",60,0)
 S CLLRSLT(U,"DIR",P,"Q")=""
"RTN","HMPMONR",61,0)
 S CLLRSLT(U,"DIR",P,"UE","default")=1  ; default prompt for the ERR screen
"RTN","HMPMONR",62,0)
 ;  2nd ';' $PIECE below is the ^DIR prompt to the user
"RTN","HMPMONR",63,0)
 S CLLRSLT(U,"DIR","text",P)="HMP MON ERR ACTION;Select Error Action"
"RTN","HMPMONR",64,0)
 S CLLRSLT(U,"DIR","?",P)="^D ERRHELP^HMPMONEH"  ; ^DIR help routine
"RTN","HMPMONR",65,0)
 ;
"RTN","HMPMONR",66,0)
 S P="SYNC"  ; SYNC prompt group for ^DIR calls
"RTN","HMPMONR",67,0)
 S CLLRSLT(U,"DIR",P,"BM","default")=1  ; default prompt for the SYNC screen
"RTN","HMPMONR",68,0)
 S CLLRSLT(U,"DIR",P,"ES")=""
"RTN","HMPMONR",69,0)
 S CLLRSLT(U,"DIR",P,"PS")=""
"RTN","HMPMONR",70,0)
 S CLLRSLT(U,"DIR",P,"RS")=""
"RTN","HMPMONR",71,0)
 S CLLRSLT(U,"DIR",P,"Q")=""
"RTN","HMPMONR",72,0)
 S CLLRSLT(U,"DIR",P,"US")=""
"RTN","HMPMONR",73,0)
 ;  2nd ';' $PIECE below is the ^DIR prompt to the user
"RTN","HMPMONR",74,0)
 S CLLRSLT(U,"DIR","text",P)="HMP MON SYNC ACTION;Select Synch-process Action"
"RTN","HMPMONR",75,0)
 S CLLRSLT(U,"DIR","?",P)="^D SYNCHELP^HMPMONSH"  ; ^DIR help routine
"RTN","HMPMONR",76,0)
 ;
"RTN","HMPMONR",77,0)
 Q
"RTN","HMPMONR",78,0)
 ;
"RTN","HMPMONR",79,0)
PROMPTS() Q "^MNTR^ERR^SYNC^" ; extrinisic variable, return valid ^DIR prompts group
"RTN","HMPMONR",80,0)
 ; to add another display screen in the monitor, add the default prompt above
"RTN","HMPMONR",81,0)
 ; to enable the HIST options, add it in $$PROMPTS and set up the CLLRSLT array as above
"RTN","HMPMONS")
0^30^B4547830^B5634204
"RTN","HMPMONS",1,0)
HMPMONS ;ASMR/BL, synch process support;Sep 13, 2016 20:03:08
"RTN","HMPMONS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONS",4,0)
 ;
"RTN","HMPMONS",5,0)
 Q  ; no entry from top
"RTN","HMPMONS",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONS",7,0)
 ;
"RTN","HMPMONS",8,0)
US ; update synch-process screen
"RTN","HMPMONS",9,0)
 N EXIT S EXIT=0  ; exit will stop the display
"RTN","HMPMONS",10,0)
 F  Q:EXIT  D
"RTN","HMPMONS",11,0)
 . S HMPMNTR("default")="BM"  ; default for this screen
"RTN","HMPMONS",12,0)
 . D FORMFEED^HMPMONL
"RTN","HMPMONS",13,0)
 . W !,$$HDR^HMPMONL("eHMP Synch Processes"),!  ; header line
"RTN","HMPMONS",14,0)
 . W !!,"You have selected the Update Synch Process Screen."
"RTN","HMPMONS",15,0)
 . D PROMPT^HMPMONA(.HMPACT,"SYNC")
"RTN","HMPMONS",16,0)
 . I HMPACT="US" Q  ; update synch screen, nothing to do
"RTN","HMPMONS",17,0)
 . I (HMPACT="BM")!$D(DTOUT)!$D(DUOUT)!$D(DIROUT) S EXIT=1 Q
"RTN","HMPMONS",18,0)
 . S LNTAG=$P(HMPCALLS(HMPACT),";",3)
"RTN","HMPMONS",19,0)
 . D @LNTAG S EXIT=HMPMNTR("exit") Q:HMPMNTR("exit")  ; perform user-selected action, exit if flag set
"RTN","HMPMONS",20,0)
 . D RTRN2CON^HMPMONL ; return to continue
"RTN","HMPMONS",21,0)
 Q
"RTN","HMPMONS",22,0)
 ;
"RTN","HMPMONS",23,0)
ES ; examine synch process
"RTN","HMPMONS",24,0)
 D FORMFEED^HMPMONL
"RTN","HMPMONS",25,0)
 W !,$$HDR^HMPMONL("Examine Synch Process"),!  ; header line
"RTN","HMPMONS",26,0)
 W !!,"You have selected the synch-process-action Examine Synch Process."
"RTN","HMPMONS",27,0)
 D NOTYET^HMPMONL Q
"RTN","HMPMONS",28,0)
 ;
"RTN","HMPMONS",29,0)
PS ; park synch process
"RTN","HMPMONS",30,0)
 D FORMFEED^HMPMONL
"RTN","HMPMONS",31,0)
 W !,$$HDR^HMPMONL("Park Synch Process"),!  ; header line
"RTN","HMPMONS",32,0)
 W !!,"You have selected Park Synch Process action."
"RTN","HMPMONS",33,0)
 D NOTYET^HMPMONL Q
"RTN","HMPMONS",34,0)
 ;
"RTN","HMPMONS",35,0)
RS ; restart synch process
"RTN","HMPMONS",36,0)
 D FORMFEED^HMPMONL
"RTN","HMPMONS",37,0)
 W !,$$HDR^HMPMONL("Restart Synch Process"),!  ; header line
"RTN","HMPMONS",38,0)
 W !!,"You have selected the synch-process-action Restart Synch Process."
"RTN","HMPMONS",39,0)
 D NOTYET^HMPMONL Q
"RTN","HMPMONS",40,0)
 ;
"RTN","HMPMONSH")
0^31^B3342775^B8092582
"RTN","HMPMONSH",1,0)
HMPMONSH ;ASMR/BL, synch process help ;Sep 13, 2016 20:03:08
"RTN","HMPMONSH",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONSH",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONSH",4,0)
 ;
"RTN","HMPMONSH",5,0)
 Q  ; no entry from top
"RTN","HMPMONSH",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONSH",7,0)
 ;
"RTN","HMPMONSH",8,0)
SYNCHELP ; show extended ?? help for synch-process-action prompt
"RTN","HMPMONSH",9,0)
 W !!,"The available actions at eHMP Monitor Synch Process screen are:"
"RTN","HMPMONSH",10,0)
 W !,"BM = Back to Monitor, to return to Monitor's main screen."
"RTN","HMPMONSH",11,0)
 W !," "
"RTN","HMPMONSH",12,0)
 W !,"Placeholders for future development include:"
"RTN","HMPMONSH",13,0)
 W !," "
"RTN","HMPMONSH",14,0)
 W !,"US = Update Synch Process Screen, to refresh the screen. This is the"
"RTN","HMPMONSH",15,0)
 W !,"     default action at this prompt, which auto-updates frequently."
"RTN","HMPMONSH",16,0)
 W !,"ES = Examine Synch Process, to select an active or parked synch"
"RTN","HMPMONSH",17,0)
 W !,"     process and examine its status information."
"RTN","HMPMONSH",18,0)
 W !,"PS = Park Synch Process, to select and examine an active synch"
"RTN","HMPMONSH",19,0)
 W !,"     process, and confirm selection to place it in a parked state."
"RTN","HMPMONSH",20,0)
 W !,"RS = Restart Synch Process, to select and examine a parked or"
"RTN","HMPMONSH",21,0)
 W !,"    stalled synch process, confirm selection, and restart it."
"RTN","HMPMONSH",22,0)
 Q
"RTN","HMPMONSH",23,0)
 ;
"RTN","HMPMONV")
0^32^B5132473^B42629686
"RTN","HMPMONV",1,0)
HMPMONV ;ASMR/BL, view eHMP storage nodes ;Sep 24, 2016 03:07:36
"RTN","HMPMONV",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONV",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONV",4,0)
 ;
"RTN","HMPMONV",5,0)
 Q  ; no entry from top
"RTN","HMPMONV",6,0)
 ;DE6644 - routine refactored, 7 September 2016
"RTN","HMPMONV",7,0)
 ;
"RTN","HMPMONV",8,0)
 ;
"RTN","HMPMONV",9,0)
V ; action, view eHMP temporary storage nodes
"RTN","HMPMONV",10,0)
 ;
"RTN","HMPMONV",11,0)
 D FORMFEED^HMPMONL ; clear screen before report
"RTN","HMPMONV",12,0)
 W !,$$HDR^HMPMONL("eHMP storage nodes"),!
"RTN","HMPMONV",13,0)
 ;
"RTN","HMPMONV",14,0)
 D VIEWXTMP  ; ^XTMP("HMP*") nodes
"RTN","HMPMONV",15,0)
 D VIEWTMP  ; ^TMP("HMP*") nodes
"RTN","HMPMONV",16,0)
 D VIEWTMPJ  ; ^TMP($job,"HMP*") nodes
"RTN","HMPMONV",17,0)
 Q
"RTN","HMPMONV",18,0)
 ;
"RTN","HMPMONV",19,0)
VIEWXTMP ; view ^XTMP("HMP*") nodes, ^XTMP("HMP") is skipped
"RTN","HMPMONV",20,0)
 W !
"RTN","HMPMONV",21,0)
 N CNT,DONE,SUB
"RTN","HMPMONV",22,0)
 S (CNT,DONE)=0,SUB="HMP"  ; start after HMP
"RTN","HMPMONV",23,0)
 F  S SUB=$O(^XTMP(SUB)) S:$E(SUB,1,3)'="HMP" DONE=1 Q:DONE  D
"RTN","HMPMONV",24,0)
 . D VSHWNDS($NA(^XTMP(SUB))) S CNT=CNT+1
"RTN","HMPMONV",25,0)
 ;
"RTN","HMPMONV",26,0)
 I 'CNT W !,"No ^XTMP('HMP*') nodes found.",!
"RTN","HMPMONV",27,0)
 D RTRN2CON^HMPMONL
"RTN","HMPMONV",28,0)
 Q
"RTN","HMPMONV",29,0)
 ;
"RTN","HMPMONV",30,0)
VIEWTMP ; view ^TMP("HMP*",$J) nodes
"RTN","HMPMONV",31,0)
 ;
"RTN","HMPMONV",32,0)
 N CNT,DONE,JOB,SUB
"RTN","HMPMONV",33,0)
 W !
"RTN","HMPMONV",34,0)
 S (CNT,DONE)=0,SUB="HMP"
"RTN","HMPMONV",35,0)
 ;the $D check is for first DO outside of FOR loop
"RTN","HMPMONV",36,0)
 D:$D(^TMP(SUB))  F  S SUB=$O(^TMP(SUB)) D  Q:DONE
"RTN","HMPMONV",37,0)
 . I $E(SUB,1,3)'="HMP" S DONE=1 Q
"RTN","HMPMONV",38,0)
 . S JOB=0  F  S JOB=$O(^TMP(SUB,JOB)) Q:'JOB  D VSHWNDS($NA(^TMP(SUB,JOB))) S CNT=CNT+1
"RTN","HMPMONV",39,0)
 ;
"RTN","HMPMONV",40,0)
 I 'CNT W !,"No ^TMP('HMP*',$JOB) nodes found.",!
"RTN","HMPMONV",41,0)
 D RTRN2CON^HMPMONL
"RTN","HMPMONV",42,0)
 Q
"RTN","HMPMONV",43,0)
 ;
"RTN","HMPMONV",44,0)
VIEWTMPJ ; view ^TMP($job,"HMP*") nodes
"RTN","HMPMONV",45,0)
 W !
"RTN","HMPMONV",46,0)
 N CNT,DONE,JOB,SUB
"RTN","HMPMONV",47,0)
 S (CNT,DONE,JOB)=0
"RTN","HMPMONV",48,0)
 F  S JOB=$O(^TMP(JOB)) Q:'JOB  D
"RTN","HMPMONV",49,0)
 . S SUB="HMP",DONE=0
"RTN","HMPMONV",50,0)
 . ; the $D check is for first DO outside of FOR loop
"RTN","HMPMONV",51,0)
 . D:$D(^TMP(JOB,SUB))  F  S SUB=$O(^TMP(JOB,SUB)) D  Q:DONE
"RTN","HMPMONV",52,0)
 ..  I $E(SUB,1,3)'="HMP" S DONE=1 Q
"RTN","HMPMONV",53,0)
 ..  D VSHWNDS($NA(^TMP(JOB,SUB))) S CNT=CNT+1
"RTN","HMPMONV",54,0)
 ;
"RTN","HMPMONV",55,0)
 I 'CNT W !,"No ^TMP($JOB,'HMP*') nodes found.",!
"RTN","HMPMONV",56,0)
 D RTRN2CON^HMPMONL
"RTN","HMPMONV",57,0)
 Q
"RTN","HMPMONV",58,0)
 ;
"RTN","HMPMONV",59,0)
VSHWNDS(NODE) ; display nodes for an eHMP global node
"RTN","HMPMONV",60,0)
 ; input:
"RTN","HMPMONV",61,0)
 ;   NODE = $NAME value of global node, e.g., ^XTMP("HMPSTUFF")
"RTN","HMPMONV",62,0)
 ;
"RTN","HMPMONV",63,0)
 N LAST,LN
"RTN","HMPMONV",64,0)
 W !,"> "_NODE
"RTN","HMPMONV",65,0)
 S LAST=$O(@NODE@(""),-1) S:$L(LAST) LAST=$NA(^(LAST))
"RTN","HMPMONV",66,0)
 S LN="   last susbcript: "_$S($L(LAST):LAST,1:"*not found*")
"RTN","HMPMONV",67,0)
 W !,LN,!
"RTN","HMPMONV",68,0)
 ;
"RTN","HMPMONV",69,0)
 Q
"RTN","HMPMONV",70,0)
 ;
"RTN","HMPMONX")
0^33^B5337676^B51029601
"RTN","HMPMONX",1,0)
HMPMONX ;ASMR/BL,JCH, ^XTMP size support code ;Jan 20, 2017 17:18:18
"RTN","HMPMONX",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;April 14,2016;Build 15
"RTN","HMPMONX",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPMONX",4,0)
 ;
"RTN","HMPMONX",5,0)
 Q  ; no entry from top
"RTN","HMPMONX",6,0)
 ; DE6644 - refactored, fixes to remote procedures, 7 September 2016
"RTN","HMPMONX",7,0)
 ;
"RTN","HMPMONX",8,0)
XTMPSIZE() ; function, eHMP storage in ^XTMP in kilobytes
"RTN","HMPMONX",9,0)
 Q $J($$GETSIZE^HMPUTILS/1024,5,2)_" KB"  ; formatted
"RTN","HMPMONX",10,0)
 ;
"RTN","HMPMONX",11,0)
SIZE(HMPRSLT) ; remote procedure HMP GLOBAL SIZE returns ^XTMP size in kilobytes, HMPRSLT passed by ref.
"RTN","HMPMONX",12,0)
 K HMPRSLT S HMPRSLT(1)=$J($$GETSIZE^HMPUTILS/1024,5,2)_" KB" Q
"RTN","HMPMONX",13,0)
 ;
"RTN","HMPMONX",14,0)
CHKXTMP(HMPRSLT) ; remote procedure HMP CHKXTMP, return data about ^XTMP, HMPRSLT passed by ref.
"RTN","HMPMONX",15,0)
 ; returns 2 '^' delimited, lines, 1st line is value headers, 2nd line is the values
"RTN","HMPMONX",16,0)
 ; Goes through ^XTMP, gets total patients, patients complete, and patients staging
"RTN","HMPMONX",17,0)
 ; PTCNT - patient counter and list
"RTN","HMPMONX",18,0)
 ; PTSTG - staging counter and list
"RTN","HMPMONX",19,0)
 ;
"RTN","HMPMONX",20,0)
 N ND,BTCH,PTCNT,PTIEN,PTSTG,S,SRVR,T,Y
"RTN","HMPMONX",21,0)
 K HMPRSLT  ; clear any residual data
"RTN","HMPMONX",22,0)
 S SRVR=$$GETSRVR^HMPMONM
"RTN","HMPMONX",23,0)
 ; must have server
"RTN","HMPMONX",24,0)
 I '(SRVR>0) S HMPRSLT(1)="Error^",HMPRSLT(2)="*server not found*" Q
"RTN","HMPMONX",25,0)
 ;
"RTN","HMPMONX",26,0)
 S SRVR(0)=^HMP(800000,SRVR,0),PTCNT=0,PTSTG=0  ; total and staging counts
"RTN","HMPMONX",27,0)
 S ND="HMPFS~"_$P(SRVR(0),U)_"~",ND("L")=$L(ND)  ; starting node
"RTN","HMPMONX",28,0)
 S BTCH=ND_"9999999"  ; past all dates
"RTN","HMPMONX",29,0)
 F  S BTCH=$O(^XTMP(BTCH),-1) Q:'($E(BTCH,1,ND("L"))=ND)  D   ; iterate in reverse
"RTN","HMPMONX",30,0)
 . S T=0 F  S T=$O(^XTMP(BTCH,T)) Q:'T  S Y=$G(^(T)) D:Y  ; only patients
"RTN","HMPMONX",31,0)
 ..  S PTIEN=+Y,S=$P(Y,U,6) S:'$D(PTCNT(PTIEN)) PTCNT(PTIEN)="",PTCNT=PTCNT+1 Q:S  ;if S, domain done
"RTN","HMPMONX",32,0)
 ..  Q:$D(PTSTG(PTIEN))  ; already counted
"RTN","HMPMONX",33,0)
 ..  S PTSTG=PTSTG+1,PTSTG(PTIEN)=""
"RTN","HMPMONX",34,0)
 ;
"RTN","HMPMONX",35,0)
 S HMPRSLT(1)="site hash^site local date time^Patients in queue^Patients complete^Patients staging^XTMP('HMP') bytes^XTMP('HMP') objects"
"RTN","HMPMONX",36,0)
 S HMPRSLT(2)=$$SYS^HMPUTILS_"^"_$$NOW^HMPMONL_"^"_PTCNT_"^"_(PTCNT-PTSTG)_"^"_PTSTG_"^"_$$GETSIZE^HMPUTILS
"RTN","HMPMONX",37,0)
 Q
"RTN","HMPMONX",38,0)
 ;
"RTN","HMPP3I")
1^62^^B129333471
"RTN","HMPPATS")
0^51^B3274326^B3116859
"RTN","HMPPATS",1,0)
HMPPATS ;SLC/MKB,ASMR/RRB,SRG - Patient Management Utilities ;Aug 29, 2016 20:06:27
"RTN","HMPPATS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Sep 01, 2011;Build 15
"RTN","HMPPATS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPPATS",4,0)
 ;
"RTN","HMPPATS",5,0)
 ; External References          DBIA#
"RTN","HMPPATS",6,0)
 ; -------------------          -----
"RTN","HMPPATS",7,0)
 ; ^SC                          10040
"RTN","HMPPATS",8,0)
 ; DICN                         10009
"RTN","HMPPATS",9,0)
 ; SDAMA301                      4433
"RTN","HMPPATS",10,0)
 ; XLFDT                        10103
"RTN","HMPPATS",11,0)
 ; XPAR                          2263
"RTN","HMPPATS",12,0)
 Q
"RTN","HMPPATS",13,0)
 ;
"RTN","HMPPATS",14,0)
APPT ; -- Return patients w/appointments tomorrow
"RTN","HMPPATS",15,0)
 ; OPT = HMP APPOINTMENTS
"RTN","HMPPATS",16,0)
 N NOW,NOW1,HMPX,HMPL,HMPN,DFN,DA,TOKEN,NEW,X
"RTN","HMPPATS",17,0)
 S NOW=$$NOW^XLFDT,NOW1=$$FMADD^XLFDT(NOW,1)
"RTN","HMPPATS",18,0)
 S HMPX(1)=NOW_";"_NOW1 ;next 24hours
"RTN","HMPPATS",19,0)
 S HMPX("FLDS")=1,HMPX("SORT")="P",HMPX(3)="R;I;NT"
"RTN","HMPPATS",20,0)
 ; ck parameter for desired location(s): HMPX(2)="loc1;loc2;...;loc#"
"RTN","HMPPATS",21,0)
 D GETLST^XPAR(.HMPL,"ALL","HMP LOCATIONS") I +$G(HMPL) D
"RTN","HMPPATS",22,0)
 . ;DE2818, ^SC reference - ICR 10040, changed loop below to begin at 1
"RTN","HMPPATS",23,0)
 . F I=1:1:+HMPL S X=+$G(HMPL(I)) S:$D(^SC(X,0)) HMPX(2)=HMPX(2)_";"_X
"RTN","HMPPATS",24,0)
 S HMPN=$$SDAPI^SDAMA301(.HMPX) Q:HMPN<1
"RTN","HMPPATS",25,0)
 S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",DFN)) Q:'(DFN>0)  D  ;DE4496 19 August 2016
"RTN","HMPPATS",26,0)
 . S DA=0 F  S DA=$O(^HMP(800000,DA)) Q:DA<1  I $P($G(^(DA,0)),U,2) D
"RTN","HMPPATS",27,0)
 .. Q:$D(^HMP(800000,"ADFN",DFN,DA))  ;already subscribed
"RTN","HMPPATS",28,0)
 .. S TOKEN=DA_"~"_NOW,NEW(TOKEN)=""
"RTN","HMPPATS",29,0)
 .. S ^XTMP("HMPX",TOKEN,DFN)=""
"RTN","HMPPATS",30,0)
 I $D(NEW) D SEND^HMPHTTP(.NEW) ;send poke to each URL with list TOKEN
"RTN","HMPPATS",31,0)
 Q
"RTN","HMPPATS",32,0)
 ;
"RTN","HMPPATS",33,0)
FIND(ID) ; -- Return ien of system ID in ^HMP
"RTN","HMPPATS",34,0)
 N DA,DO,DIC,X,Y
"RTN","HMPPATS",35,0)
 I $G(ID)="" Q 0                        ;error
"RTN","HMPPATS",36,0)
 S DA=+$O(^HMP(800000,"B",ID,0)) I DA<1 D  ;add
"RTN","HMPPATS",37,0)
 . S DIC="^HMP(800000,",DIC(0)="F",X=ID
"RTN","HMPPATS",38,0)
 . D FILE^DICN S DA=+Y
"RTN","HMPPATS",39,0)
 Q DA
"RTN","HMPPATS",40,0)
 ;
"RTN","HMPRPCRC")
0^57^B6442213^n/a
"RTN","HMPRPCRC",1,0)
HMPRPCRC ;AFS/WPB - Check and clear the HMP resource device ;Jan 20, 2017
"RTN","HMPRPCRC",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**3**;Jan 20, 2017;Build 15
"RTN","HMPRPCRC",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPRPCRC",4,0)
 ;
"RTN","HMPRPCRC",5,0)
 Q
"RTN","HMPRPCRC",6,0)
EN(LST) ; return the data for any jobs running in all 'busy' slots
"RTN","HMPRPCRC",7,0)
 ;Input: 
"RTN","HMPRPCRC",8,0)
 ;RESOURCE - Name of the resource to check - required
"RTN","HMPRPCRC",9,0)
 ;Returns LST array:
"RTN","HMPRPCRC",10,0)
 ;$P(1) : SLOT #
"RTN","HMPRPCRC",11,0)
 ;$P(2) : CPU
"RTN","HMPRPCRC",12,0)
 ;$P(3) : JOB #
"RTN","HMPRPCRC",13,0)
 ;$P(4) : TASK #
"RTN","HMPRPCRC",14,0)
 ;$P(5) : TASK STATUS
"RTN","HMPRPCRC",15,0)
 ;$P(6) : START DATE/TIME
"RTN","HMPRPCRC",16,0)
 ;$P(7) : CURRENT DATE/TIME
"RTN","HMPRPCRC",17,0)
 ;$P(8) : TIME DIFFERENCE BETWEEN START AND CURRENT TIME AS DAYS HR:MM:SS
"RTN","HMPRPCRC",18,0)
 ;
"RTN","HMPRPCRC",19,0)
 N HMPERR,HMPIEN,HMPSLOT,MXSLOTS,SLOTS
"RTN","HMPRPCRC",20,0)
 S HMPIEN=$$FIND1^DIC(3.54,"","MX","HMP EXTRACT RESOURCE","","","HMPERR")
"RTN","HMPRPCRC",21,0)
 I $G(HMPIEN)=0!($G(HMPIEN)="") S LST="Resource doesn't exist" Q
"RTN","HMPRPCRC",22,0)
 D GETS^DIQ(3.54,HMPIEN_",","**","I","HMPSLOT","HMPERR")
"RTN","HMPRPCRC",23,0)
 I '$D(HMPSLOT) S LST="All slots are open" Q
"RTN","HMPRPCRC",24,0)
 S MXSLOTS=$G(HMPSLOT(3.54,HMPIEN_",",1,"I"))
"RTN","HMPRPCRC",25,0)
 F SLOTS=1:1:MXSLOTS+1 D
"RTN","HMPRPCRC",26,0)
 .N CDTTM,DIFF,JOB,ST,START,STATUS,ZTSK,ZTCPU,%
"RTN","HMPRPCRC",27,0)
 .S LST(SLOTS)=""
"RTN","HMPRPCRC",28,0)
 .S ZTCPU=$G(HMPSLOT(3.542,SLOTS_",1,",1,"I")),JOB=$G(HMPSLOT(3.542,SLOTS_",1,",2,"I")),ZTSK=$G(HMPSLOT(3.542,SLOTS_",1,",3,"I")),START=$$HTE^XLFDT($G(HMPSLOT(3.542,SLOTS_",1,",4,"I")))
"RTN","HMPRPCRC",29,0)
 .I $G(ZTSK)'="" D
"RTN","HMPRPCRC",30,0)
 ..D NOW^%DTC S CDTTM=%
"RTN","HMPRPCRC",31,0)
 ..S:$G(HMPSLOT(3.542,SLOTS_",1,",4,"I"))'="" ST=$$HTFM^XLFDT($G(HMPSLOT(3.542,SLOTS_",1,",4,"I")))
"RTN","HMPRPCRC",32,0)
 ..D ISQED^%ZTLOAD S STATUS=$S(ZTSK(0)=0:"TASK IS NOT SCHEDULED",ZTSK(0)="":"TASK DOESN'T EXIST",ZTSK(0)=1:"TASK IS SCHEDULED",1:"")
"RTN","HMPRPCRC",33,0)
 ..S:$G(ST)'="" DIFF=$$FMDIFF^XLFDT(CDTTM,ST,3)
"RTN","HMPRPCRC",34,0)
 .S LST(SLOTS)=$S(ZTSK="":"SLOT IS OPEN",ZTSK>0:SLOTS_"^"_$G(ZTCPU)_"^"_$G(JOB)_"^"_$G(ZTSK)_"^"_$G(STATUS)_"^"_$G(START))_"^"_$G(CDTTM)_"^"_$G(DIFF)
"RTN","HMPRPCRC",35,0)
 Q
"RTN","HMPRPCRC",36,0)
CLEAR(RESULTS,SLOT) ; clear a resource slot
"RTN","HMPRPCRC",37,0)
 ;Input:
"RTN","HMPRPCRC",38,0)
 ;RESOURCE - Name of the resource to check - required
"RTN","HMPRPCRC",39,0)
 ;SLOT - Slot number to clear
"RTN","HMPRPCRC",40,0)
 ;Output: returns 1 if successful, otherwise returns 0^reason
"RTN","HMPRPCRC",41,0)
 S RESULTS=1
"RTN","HMPRPCRC",42,0)
 N HMPERR,HMPIEN,HMPSLOT,MXSLOTS
"RTN","HMPRPCRC",43,0)
 S HMPIEN=$$FIND1^DIC(3.54,"","MX","HMP EXTRACT RESOURCE","","","HMPERR")
"RTN","HMPRPCRC",44,0)
 I $G(HMPIEN)=0!($G(HMPIEN)="") S RESULTS="0^Resource doesn't exist" Q
"RTN","HMPRPCRC",45,0)
 D KILLRES^%ZISC(HMPIEN,SLOT)
"RTN","HMPRPCRC",46,0)
 Q
"RTN","HMPSTMP")
0^15^B100529789^B101713428
"RTN","HMPSTMP",1,0)
HMPSTMP ;ASMR/JD,BL,ASF,CK,CPC - MetaStamp ;Aug 30, 2016 06:54:52
"RTN","HMPSTMP",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPSTMP",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPSTMP",4,0)
 ;
"RTN","HMPSTMP",5,0)
 ; Returns the most recent date/time
"RTN","HMPSTMP",6,0)
 ; JD - 6/5/15 - Added code to the DOC section to consider the attachment date
"RTN","HMPSTMP",7,0)
 ;               as one of the dates if it exists
"RTN","HMPSTMP",8,0)
 ; JD - 2/1/16 - Added code to the FINDNEW section to skip over the imprecise dates. DE3548
"RTN","HMPSTMP",9,0)
 ; JD - 2/7/16 - Modified FINDNEW section to default to NOW if no other dates exist. DE3728
"RTN","HMPSTMP",10,0)
 Q
"RTN","HMPSTMP",11,0)
 ;
"RTN","HMPSTMP",12,0)
EN(A) ; extrinsic function, used to create "stampTime" or "lastUpdateTime" subscript in arrays
"RTN","HMPSTMP",13,0)
 K B
"RTN","HMPSTMP",14,0)
 N C
"RTN","HMPSTMP",15,0)
 ; A is either "now" or a domain name (per PTDOMS^HMPDJFSD)
"RTN","HMPSTMP",16,0)
 ; B is the return value (stampTime)
"RTN","HMPSTMP",17,0)
 S C=$$UP^XLFSTR(A)
"RTN","HMPSTMP",18,0)
 I C="NOW" G NOW
"RTN","HMPSTMP",19,0)
 I C="ADM" G ADM
"RTN","HMPSTMP",20,0)
 I C="ALLERGY" G ALL
"RTN","HMPSTMP",21,0)
 I C="AUXILIARY" G AUX
"RTN","HMPSTMP",22,0)
 I C="APPOINTMENT" G APP
"RTN","HMPSTMP",23,0)
 I C="DIAGNOSIS" G DIA
"RTN","HMPSTMP",24,0)
 I C="DOCUMENT" G DOC
"RTN","HMPSTMP",25,0)
 I C="FACTOR" G FAC
"RTN","HMPSTMP",26,0)
 I C="IMMUNIZATION" G IMM
"RTN","HMPSTMP",27,0)
 I C="LAB" G LAB
"RTN","HMPSTMP",28,0)
 I C="MED" G MED
"RTN","HMPSTMP",29,0)
 I C="OBS" G OBS
"RTN","HMPSTMP",30,0)
 I C="ORDER" G ORD
"RTN","HMPSTMP",31,0)
 I C="PROBLEM" G PRO
"RTN","HMPSTMP",32,0)
 I C="PROCEDURE" G PRC
"RTN","HMPSTMP",33,0)
 I C="CONSULT" G CON
"RTN","HMPSTMP",34,0)
 I C="IMAGE" G IMA
"RTN","HMPSTMP",35,0)
 I C="SURGERY" G SUR
"RTN","HMPSTMP",36,0)
 I C="TASK" G TAS
"RTN","HMPSTMP",37,0)
 I C="VISIT" G VIS
"RTN","HMPSTMP",38,0)
 I C="VITAL" G VIT
"RTN","HMPSTMP",39,0)
 I C="PTF" G PTF
"RTN","HMPSTMP",40,0)
 I C="EXAM" G EXA
"RTN","HMPSTMP",41,0)
 I C="CPT" G CPT
"RTN","HMPSTMP",42,0)
 I C="EDUCATION" G EDU
"RTN","HMPSTMP",43,0)
 I C="POV" G POV
"RTN","HMPSTMP",44,0)
 I C="SKIN" G SKI
"RTN","HMPSTMP",45,0)
 I C="TREATMENT" G TRE
"RTN","HMPSTMP",46,0)
 I C="MH" G MH
"RTN","HMPSTMP",47,0)
 Q ""  ; DE3504 changed B to "" to prevent error if code falls through
"RTN","HMPSTMP",48,0)
 ;
"RTN","HMPSTMP",49,0)
NOW ;
"RTN","HMPSTMP",50,0)
 ; Set stamp time in YYYYMMDDHHMMSS format
"RTN","HMPSTMP",51,0)
 S B=$$FMTHL7($$NOW^XLFDT)  ; DE5016
"RTN","HMPSTMP",52,0)
 S B=$E(B_"000000",1,14)  ; Need padding to force YYYYMMDDHHMMSS precision
"RTN","HMPSTMP",53,0)
 Q B
"RTN","HMPSTMP",54,0)
 ;
"RTN","HMPSTMP",55,0)
ADM ; Admissions (these are visits whose ID starts with an "H").  JD - January 26, 2015
"RTN","HMPSTMP",56,0)
 K DATA
"RTN","HMPSTMP",57,0)
 S DATE(1)=$G(ADM("dateTime"))
"RTN","HMPSTMP",58,0)
 S DATE(2)=$G(ADM("stay","dischargeDateTime"))
"RTN","HMPSTMP",59,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",60,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",61,0)
ALL ; Allergy ; rhl 20141231
"RTN","HMPSTMP",62,0)
 K DATE
"RTN","HMPSTMP",63,0)
 S DATE(1)=$G(REAC("entered"))
"RTN","HMPSTMP",64,0)
 S DATE(2)=$G(REAC("verified"))
"RTN","HMPSTMP",65,0)
 ;  dates in observations array
"RTN","HMPSTMP",66,0)
 N I,J
"RTN","HMPSTMP",67,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",68,0)
 S I=0
"RTN","HMPSTMP",69,0)
 F  S I=$O(REAC("observations",I)) Q:I=""  D
"RTN","HMPSTMP",70,0)
 . I $G(REAC("observations",I,"date"))]"" S J=J+1,DATE(J)=REAC("observations",I,"date")
"RTN","HMPSTMP",71,0)
 ;  dates in comment array
"RTN","HMPSTMP",72,0)
 N I,J
"RTN","HMPSTMP",73,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",74,0)
 S I=0
"RTN","HMPSTMP",75,0)
 F  S I=$O(REAC("comments",I)) Q:I=""  D
"RTN","HMPSTMP",76,0)
 . I $G(REAC("comments",I,"entered"))]"" S J=J+1,DATE(J)=REAC("comments",I,"entered")
"RTN","HMPSTMP",77,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",78,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",79,0)
AUX ; Auxiliary
"RTN","HMPSTMP",80,0)
 Q ""
"RTN","HMPSTMP",81,0)
 K DATE
"RTN","HMPSTMP",82,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",83,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",84,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",85,0)
APP ; Appointment
"RTN","HMPSTMP",86,0)
 K DATE
"RTN","HMPSTMP",87,0)
 S DATE(1)=$G(APPT("dateTime"))
"RTN","HMPSTMP",88,0)
 S DATE(2)=$G(APPT("checkIn"))
"RTN","HMPSTMP",89,0)
 S DATE(3)=$G(APPT("checkOut"))
"RTN","HMPSTMP",90,0)
 ;if freshness item get timestamp from stream get last update from freshness stream
"RTN","HMPSTMP",91,0)
 I $G(FILTER("freshnessDateTime")) S DATE(4)=$$JSONDT^HMPUTILS(FILTER("freshnessDateTime")) ;DE4859
"RTN","HMPSTMP",92,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",93,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",94,0)
DIA ; Diagnosis
"RTN","HMPSTMP",95,0)
 Q ""
"RTN","HMPSTMP",96,0)
 K DATE
"RTN","HMPSTMP",97,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",98,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",99,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",100,0)
DOC ; Document
"RTN","HMPSTMP",101,0)
 N AUDDT
"RTN","HMPSTMP",102,0)
 S AUDDT=""  ; Audit trail date/time
"RTN","HMPSTMP",103,0)
 K DATE
"RTN","HMPSTMP",104,0)
 S DATE(1)=$G(DOC("referenceDateTime"))
"RTN","HMPSTMP",105,0)
 S DATE(2)=$G(DOC("entered"))
"RTN","HMPSTMP",106,0)
 ;DE2818, ^TIU(8925.5) references - ICR 6279
"RTN","HMPSTMP",107,0)
 ; Find the most recent audit trail entry for the document
"RTN","HMPSTMP",108,0)
 S:$G(DOC("localId")) AUDDT=$O(^TIU(8925.5,"B",DOC("localId"),""),-1)
"RTN","HMPSTMP",109,0)
 ; Get the audit trail date/time
"RTN","HMPSTMP",110,0)
 S:AUDDT AUDDT=$P($G(^TIU(8925.5,AUDDT,3)),"^",2)
"RTN","HMPSTMP",111,0)
 S:AUDDT DATE(3)=$$JSONDT^HMPUTILS(AUDDT)
"RTN","HMPSTMP",112,0)
 ;go through HMPDJ array
"RTN","HMPSTMP",113,0)
 N I,II,J
"RTN","HMPSTMP",114,0)
 S J=""
"RTN","HMPSTMP",115,0)
 S J=$O(DATE(J),-1)
"RTN","HMPSTMP",116,0)
 S I=0
"RTN","HMPSTMP",117,0)
 F  S I=$O(DOC("text",I)) Q:I=""  D
"RTN","HMPSTMP",118,0)
 . I $G(DOC("text",I,"dateTime"))]"" S J=J+1,DATE(J)=DOC("text",I,"dateTime")
"RTN","HMPSTMP",119,0)
 . S II=0 F  S II=$O(DOC("text",I,"clinicians",II)) Q:II=""  D
"RTN","HMPSTMP",120,0)
 . . I $G(DOC("text",I,"clinicians",II,"signedDateTime"))]"" S J=J+1,DATE(J)=DOC("text",I,"clinicians",II,"signedDateTime")
"RTN","HMPSTMP",121,0)
 ;DE4148 use freshness datetime if available
"RTN","HMPSTMP",122,0)
 I $G(FILTER("freshnessDateTime")) S J=J+1,DATE(J)=$$JSONDT^HMPUTILS(FILTER("freshnessDateTime"))
"RTN","HMPSTMP",123,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",124,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",125,0)
FAC ; Factor
"RTN","HMPSTMP",126,0)
 K DATE
"RTN","HMPSTMP",127,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",128,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",129,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",130,0)
IMM ; Immunization
"RTN","HMPSTMP",131,0)
 K DATE
"RTN","HMPSTMP",132,0)
 N T
"RTN","HMPSTMP",133,0)
 S DATE(1)=$G(PCE("administeredDateTime"))
"RTN","HMPSTMP",134,0)
 ;DE4013 use freshness datetime if available
"RTN","HMPSTMP",135,0)
 S T=$G(FILTER("freshnessDateTime"))
"RTN","HMPSTMP",136,0)
 I T S DATE(2)=$$JSONDT^HMPUTILS(T)
"RTN","HMPSTMP",137,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",138,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",139,0)
LAB ; Lab
"RTN","HMPSTMP",140,0)
 K DATE
"RTN","HMPSTMP",141,0)
 S DATE(1)=$G(LAB("observed"))
"RTN","HMPSTMP",142,0)
 S DATE(2)=$G(LAB("resulted"))
"RTN","HMPSTMP",143,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",144,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",145,0)
MED ; Med
"RTN","HMPSTMP",146,0)
 K DATE
"RTN","HMPSTMP",147,0)
 S DATE(1)=$G(MED("orders",1,"ordered"))
"RTN","HMPSTMP",148,0)
 S DATE(2)=$G(MED("overallStart"))
"RTN","HMPSTMP",149,0)
 S DATE(3)=$G(MED("overallStop"))
"RTN","HMPSTMP",150,0)
 S DATE(4)=$G(MED("stopped"))
"RTN","HMPSTMP",151,0)
 S DATE(5)=$G(MED("lastFilled"))
"RTN","HMPSTMP",152,0)
 S DATE(6)=$G(MED("prescriptionFinished")) ; DE5723
"RTN","HMPSTMP",153,0)
 ;go through value array
"RTN","HMPSTMP",154,0)
 N I,J
"RTN","HMPSTMP",155,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",156,0)
 S I=0
"RTN","HMPSTMP",157,0)
 F  S I=$O(MED("dosages",I)) Q:I=""  D
"RTN","HMPSTMP",158,0)
 . I $G(MED("dosages",I,"start"))]"" S J=J+1,DATE(J)=MED("dosages",I,"start")
"RTN","HMPSTMP",159,0)
 . I $G(MED("dosages",I,"stop"))]"" S J=J+1,DATE(J)=MED("dosages",I,"stop")
"RTN","HMPSTMP",160,0)
 S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",161,0)
 S I=0
"RTN","HMPSTMP",162,0)
 F  S I=$O(MED("fills",I)) Q:I=""  D
"RTN","HMPSTMP",163,0)
 . I $G(MED("fills",I,"dispenseDate"))]"" S J=J+1,DATE(J)=MED("fills",I,"dispenseDate")
"RTN","HMPSTMP",164,0)
 . I $G(MED("fills",I,"releaseDate"))]"" S J=J+1,DATE(J)=MED("fills",I,"releaseDate")
"RTN","HMPSTMP",165,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",166,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",167,0)
OBS ; Obs ; rhl 20141231
"RTN","HMPSTMP",168,0)
 K DATE
"RTN","HMPSTMP",169,0)
 S DATE(1)=$G(CLIO("entered"))
"RTN","HMPSTMP",170,0)
 S DATE(2)=$G(CLIO("observed"))
"RTN","HMPSTMP",171,0)
 S DATE(3)=$G(CLIO("setStart"))
"RTN","HMPSTMP",172,0)
 S DATE(4)=$G(CLIO("setStop"))
"RTN","HMPSTMP",173,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",174,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",175,0)
 ;
"RTN","HMPSTMP",176,0)
ORD ; Order ; RHL 20141231
"RTN","HMPSTMP",177,0)
 N D,DATE,I,J,ND,XDT,SRVRNUM
"RTN","HMPSTMP",178,0)
 S DATE(1)=$G(ORDER("entered")),SRVRNUM=$$SRVRNO^HMPOR(DFN)  ; need server number for patient
"RTN","HMPSTMP",179,0)
 ; DE3504 - Jan 18, 2016, added the code below for US10045
"RTN","HMPSTMP",180,0)
 ; US10045 - PB check if patient and order in the HMP SUBSCRIPTION, if found get date/time stamps with seconds from there
"RTN","HMPSTMP",181,0)
 I $D(^HMP(800000,SRVRNUM,1,DFN,1,ID,0)) D
"RTN","HMPSTMP",182,0)
 . S ND=$G(^HMP(800000,SRVRNUM,1,DFN,1,ID,0))
"RTN","HMPSTMP",183,0)
 . S XDT(2)=$P(ND,U,15),XDT(1)=$P(ND,U,2)  ; FileMan format date/time
"RTN","HMPSTMP",184,0)
 . S D=XDT(1) S:XDT(2)>D D=XDT(2)  ; get later date in D
"RTN","HMPSTMP",185,0)
 . S DATE(1)=$$JSONDT^HMPUTILS(D)
"RTN","HMPSTMP",186,0)
 ; these are signature /verification dates
"RTN","HMPSTMP",187,0)
 ;DE3337 Feb 3, 2016 ;US10045 - PB Oct 28, 2015 flag set in HMPDJ01 to indicate there is date in the array ORDER("clinicians",I,"signedDateTime") where I is the incremental variable
"RTN","HMPSTMP",188,0)
 S J=1,I=0  ; evaluate this array every time DE3337
"RTN","HMPSTMP",189,0)
 F  S I=$O(ORDER("clinicians",I)) Q:'I  D
"RTN","HMPSTMP",190,0)
 . I $G(ORDER("clinicians",I,"signedDateTime"))]"" S J=J+1,DATE(J)=ORDER("clinicians",I,"signedDateTime")
"RTN","HMPSTMP",191,0)
 ;
"RTN","HMPSTMP",192,0)
 I $G(ORDER("stop")) S J=J+1,DATE(J)=ORDER("stop")
"RTN","HMPSTMP",193,0)
 Q $$FINDNEW(.DATE)  ; determine newest date
"RTN","HMPSTMP",194,0)
 ;
"RTN","HMPSTMP",195,0)
PRO ; Problem
"RTN","HMPSTMP",196,0)
 K DATE N I,J,T
"RTN","HMPSTMP",197,0)
 S DATE(1)=$G(PROB("entered"))
"RTN","HMPSTMP",198,0)
 S DATE(2)=$G(PROB("updated"))
"RTN","HMPSTMP",199,0)
 S DATE(3)=$G(PROB("onset"))
"RTN","HMPSTMP",200,0)
 S DATE(4)=$G(PROB("resolved"))
"RTN","HMPSTMP",201,0)
 ; there may be dates in comments
"RTN","HMPSTMP",202,0)
 S I=0,J=4  ; J starts at 4 because of the logic above
"RTN","HMPSTMP",203,0)
 F  S I=$O(PROB("comments",I)) Q:I=""  S T=$G(PROB("comments",I,"entered")) S:T J=J+1,DATE(J)=T
"RTN","HMPSTMP",204,0)
 ; ASF - DE3691, get lastUpdateTime, Feb 29, 2016
"RTN","HMPSTMP",205,0)
 D 
"RTN","HMPSTMP",206,0)
 . ;if freshness item get timestamp from stream get last update from freshness stream
"RTN","HMPSTMP",207,0)
 . S T=$G(FILTER("freshnessDateTime"))
"RTN","HMPSTMP",208,0)
 . I T S J=J+1,DATE(J)=$$JSONDT^HMPUTILS(T) Q
"RTN","HMPSTMP",209,0)
 . ;else get from audit file
"RTN","HMPSTMP",210,0)
 . S T=$O(^GMPL(125.8,"AD",ID,0))  ; PROBLEM LIST AUDIT, ICR 2974, last changed date/time with seconds
"RTN","HMPSTMP",211,0)
 . I T S J=J+1,DATE(J)=$$JSONDT^HMPUTILS(9999999-T)  ; got an edited date/time (inverse order)
"RTN","HMPSTMP",212,0)
 ;
"RTN","HMPSTMP",213,0)
 Q $$FINDNEW(.DATE)  ; determine newest date
"RTN","HMPSTMP",214,0)
 ;
"RTN","HMPSTMP",215,0)
PRC ; Procedure
"RTN","HMPSTMP",216,0)
 K DATE
"RTN","HMPSTMP",217,0)
 S DATE(1)=$G(PROC("dateTime"))
"RTN","HMPSTMP",218,0)
 S DATE(2)=$G(PROC("requested"))
"RTN","HMPSTMP",219,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",220,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",221,0)
CON ; Consult
"RTN","HMPSTMP",222,0)
 K DATE
"RTN","HMPSTMP",223,0)
 S DATE(1)=$G(CONS("dateTime"))
"RTN","HMPSTMP",224,0)
 S DATE(2)=$G(CONS("earliestDate"))
"RTN","HMPSTMP",225,0)
 S DATE(3)=$G(ACT("entered"))
"RTN","HMPSTMP",226,0)
 S DATE(4)=$G(ACT("dateTime"))
"RTN","HMPSTMP",227,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",228,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",229,0)
IMA ; Image ; RHL 20150102
"RTN","HMPSTMP",230,0)
 K DATE
"RTN","HMPSTMP",231,0)
 S DATE(1)=$G(EXAM("dateTime"))
"RTN","HMPSTMP",232,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",233,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",234,0)
SUR ; Surgery ; RHL 20150102
"RTN","HMPSTMP",235,0)
 K DATE
"RTN","HMPSTMP",236,0)
 S DATE(1)=$G(SURG("dateTime"))
"RTN","HMPSTMP",237,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",238,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",239,0)
TAS ; Task
"RTN","HMPSTMP",240,0)
 Q ""
"RTN","HMPSTMP",241,0)
 K DATE
"RTN","HMPSTMP",242,0)
 ;S DATE(1)=$G(
"RTN","HMPSTMP",243,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",244,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",245,0)
VIS ; Visit
"RTN","HMPSTMP",246,0)
 K DATE
"RTN","HMPSTMP",247,0)
 S DATE(1)=$G(VST("dateTime"))
"RTN","HMPSTMP",248,0)
 S DATE(2)=$G(VST("checkOut"))
"RTN","HMPSTMP",249,0)
 ;DE4049 use freshness datetime if available
"RTN","HMPSTMP",250,0)
 I $G(FILTER("freshnessDateTime")) S DATE(3)=$$JSONDT^HMPUTILS(FILTER("freshnessDateTime"))
"RTN","HMPSTMP",251,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",252,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",253,0)
VIT ; Vital
"RTN","HMPSTMP",254,0)
 K DATE
"RTN","HMPSTMP",255,0)
 S DATE(1)=$G(VIT("observed"))
"RTN","HMPSTMP",256,0)
 S DATE(2)=$G(VIT("resulted"))
"RTN","HMPSTMP",257,0)
 S DATE(3)=$G(VIT("dateEnteredInError")) ; r1.3 - fix for including vital EIE date
"RTN","HMPSTMP",258,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",259,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",260,0)
PTF ; Ptf ; RHL 20150102
"RTN","HMPSTMP",261,0)
 K DATE
"RTN","HMPSTMP",262,0)
 S DATE(1)=$G(PTF("arrivalDateTime"))
"RTN","HMPSTMP",263,0)
 S DATE(2)=$G(PTF("dischargeDateTime"))
"RTN","HMPSTMP",264,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",265,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",266,0)
EXA ; Exam
"RTN","HMPSTMP",267,0)
 K DATE
"RTN","HMPSTMP",268,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",269,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",270,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",271,0)
CPT ; CPT
"RTN","HMPSTMP",272,0)
 K DATE
"RTN","HMPSTMP",273,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",274,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",275,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",276,0)
EDU ; Education
"RTN","HMPSTMP",277,0)
 K DATE
"RTN","HMPSTMP",278,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",279,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",280,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",281,0)
POV ; Pov
"RTN","HMPSTMP",282,0)
 K DATE
"RTN","HMPSTMP",283,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",284,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",285,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",286,0)
SKI ; Skin
"RTN","HMPSTMP",287,0)
 K DATE
"RTN","HMPSTMP",288,0)
 S DATE(1)=$G(PCE("entered"))
"RTN","HMPSTMP",289,0)
 S DATE(2)=$G(PCE("dateRead"))
"RTN","HMPSTMP",290,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",291,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",292,0)
TRE ; Treatment ; RHL 20150102
"RTN","HMPSTMP",293,0)
 K DATE
"RTN","HMPSTMP",294,0)
 S DATE(1)=$G(NTX("entered"))
"RTN","HMPSTMP",295,0)
 S DATE(2)=$G(NTX("start"))
"RTN","HMPSTMP",296,0)
 S DATE(3)=$G(NTX("stop"))
"RTN","HMPSTMP",297,0)
 ;these are dates in signature/verification dates; is this used for NTX orders
"RTN","HMPSTMP",298,0)
 I $G(NTX("clinicians")) D
"RTN","HMPSTMP",299,0)
 . N I,J
"RTN","HMPSTMP",300,0)
 . S J="",J=$O(DATE(J),-1)
"RTN","HMPSTMP",301,0)
 . S I=0
"RTN","HMPSTMP",302,0)
 . F  S I=$O(NTX("clinicians",I)) Q:I=""  D
"RTN","HMPSTMP",303,0)
 . . I $G(NTX("clinicians",I,"signedDateTime"))]"" S J=J+1,DATE(J)=NTX("clinicians",I,"signedDateTime")
"RTN","HMPSTMP",304,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",305,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",306,0)
MH ; Mh   ; RHL 20150103
"RTN","HMPSTMP",307,0)
 K DATE
"RTN","HMPSTMP",308,0)
 S DATE(1)=$G(MH("administeredDateTime"))
"RTN","HMPSTMP",309,0)
 ;DETERMINE WHICH ONE IS NEWER
"RTN","HMPSTMP",310,0)
 Q $$FINDNEW(.DATE)
"RTN","HMPSTMP",311,0)
 ;
"RTN","HMPSTMP",312,0)
FINDNEW(DATE)  ; function, find the latest date from DATE array
"RTN","HMPSTMP",313,0)
 ;DATE array has following format DATE(1)=DATE DATE(2)=DATE
"RTN","HMPSTMP",314,0)
 N ADATE,COMDATE,NDATE,X
"RTN","HMPSTMP",315,0)
 ; Jan 28, 2016, DE3519;bl set date for comparison, now plus 60 seconds padded with zeroes, no time zone offset
"RTN","HMPSTMP",316,0)
 S NDATE=$E($$FMTHL7($$FMADD^XLFDT($$NOW^XLFDT,0,0,0,60))_"000000",1,14)  ; DE5016
"RTN","HMPSTMP",317,0)
 S X=0,COMDATE=0  ; initialize starting date to zero
"RTN","HMPSTMP",318,0)
 F  S X=$O(DATE(X)) Q:'X  D:$E(DATE(X),7,8)  ; evaluate only if precise date. DE3548
"RTN","HMPSTMP",319,0)
 . S ADATE=$E(DATE(X)_"000000",1,14) ; Need padding down to the second (YYYYMMDDHHMM). JD-1/23/15
"RTN","HMPSTMP",320,0)
 . I ADATE>NDATE Q  ; DE3519;bl prevent future date/times in lastUpdateTime
"RTN","HMPSTMP",321,0)
 . I ADATE>COMDATE S COMDATE=ADATE
"RTN","HMPSTMP",322,0)
 ;Defaut to NOW if there are no other dates.  JD - 2/7/16. DE3728
"RTN","HMPSTMP",323,0)
 I 'COMDATE S COMDATE=$E($$FMTHL7($$NOW^XLFDT)_"000000",1,14)  ; DE5016
"RTN","HMPSTMP",324,0)
 Q COMDATE
"RTN","HMPSTMP",325,0)
 ;
"RTN","HMPSTMP",326,0)
 ; DE5016 - May 26, 2016 - hrubovcak
"RTN","HMPSTMP",327,0)
FMTHL7(HMPFMDTM) ; function, return HL7 date/time from FileMan date/time, strip time zone offset
"RTN","HMPSTMP",328,0)
 ; DE6591 - 8/30/16 CK - translate plus or minus sign to '^', return 14 characters if time passed, return 8 otherwise
"RTN","HMPSTMP",329,0)
 Q $E($P($TR($$FMTHL7^XLFDT(HMPFMDTM),"-+","^^"),"^")_$S($P(HMPFMDTM,".",2):"000000",1:""),1,14)
"RTN","HMPSTMP",330,0)
 ;note: code above should be invoked with one second after midnight if time is desired at the stroke of midnight
"RTN","HMPSTMP",331,0)
 ;
"RTN","HMPTFU2")
0^6^B41602003^B40570794
"RTN","HMPTFU2",1,0)
HMPTFU2 ;ASMR/JCH,CK,DKK - Utilities for the Treating Facility file 391.91 ;Apr 27, 2016 10:35:07
"RTN","HMPTFU2",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;May 15, 2016;Build 15
"RTN","HMPTFU2",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPTFU2",4,0)
 ;
"RTN","HMPTFU2",5,0)
 ; External References          DBIA#
"RTN","HMPTFU2",6,0)
 ; -------------------          -----
"RTN","HMPTFU2",7,0)
 ; DIQ                          2056  ;DE6363 - JD - 8/23/16
"RTN","HMPTFU2",8,0)
 ;
"RTN","HMPTFU2",9,0)
 ; Reference to ^DGCN(391.91 is NOT currently supported; see ICR #2911 for an existing Private ICR between 
"RTN","HMPTFU2",10,0)
 ; Registration and CIRN that would meet the needs of this routine, or provide an example for a new ICR.
"RTN","HMPTFU2",11,0)
 ;
"RTN","HMPTFU2",12,0)
 Q
"RTN","HMPTFU2",13,0)
 ;
"RTN","HMPTFU2",14,0)
TFL(LIST,PT) ;for this PT [patient] (either DFN, ICN or EDIPI) return the list of treating facilities
"RTN","HMPTFU2",15,0)
 ; CALLED FROM RPC HMP LOCAL GET CORRESPONDINGIDS
"RTN","HMPTFU2",16,0)
 ; PT values :   Source ID^Source ID Type^Assigning Authority^Assigning Facility
"RTN","HMPTFU2",17,0)
 ;  ICN example:   1008520438V882204^NI^USVHA^200M
"RTN","HMPTFU2",18,0)
 ;  DFN example:   100000511^PI^USVHA^500
"RTN","HMPTFU2",19,0)
 ;  EDIPI example: 852043888^NI^USDOD^200DOD
"RTN","HMPTFU2",20,0)
 ;
"RTN","HMPTFU2",21,0)
 ; SOURCE ID:      SOURCE ID is the unique system assigned identifier at the identified facility for the
"RTN","HMPTFU2",22,0)
 ;                 patient record.  The value of SOURCE ID varies, depending on the source facility. 
"RTN","HMPTFU2",23,0)
 ;                 If SOURCE ID is from the Master Patient Index, the value is the Integration 
"RTN","HMPTFU2",24,0)
 ;                 Control Number (ICN).  If SOURCE ID is from the Department of Defense (DOD), the
"RTN","HMPTFU2",25,0)
 ;                 value is the Electronic Data Interchange Personal Identifier (EDIPI), which is 
"RTN","HMPTFU2",26,0)
 ;                 their equivalent of an ICN. In the future, SOURCE ID may come from other sources 
"RTN","HMPTFU2",27,0)
 ;                 due to additional initiatives.
"RTN","HMPTFU2",28,0)
 ;
"RTN","HMPTFU2",29,0)
 ; SOURCE ID TYPE: SOURCE ID TYPE defines the data source for the TREATING FACILITY LIST file (#391.91) entry.
"RTN","HMPTFU2",30,0)
 ;                 The source ID type is a reference to the HL7 Table 0203, Identifier Type, and the VA
"RTN","HMPTFU2",31,0)
 ;                 Identity Management user defined values: NI (National Identifier), PI (Patient Identifier)
"RTN","HMPTFU2",32,0)
 ; 
"RTN","HMPTFU2",33,0)
 ; Return:
"RTN","HMPTFU2",34,0)
 ; This will return the ICN and the list of treating facilities in the following format:
"RTN","HMPTFU2",35,0)
 ;   RESULT(n)=Id^IdType^AssigningFacility^AssigningAuthority^IdStatus
"RTN","HMPTFU2",36,0)
 ;     Examples:
"RTN","HMPTFU2",37,0)
 ;      RESULT(1)="1011232151V598646^NI^200M^A"
"RTN","HMPTFU2",38,0)
 ;      RESULT(2)="7168937^PI^91E3^USVHA^A"
"RTN","HMPTFU2",39,0)
 ;      RESULT(3)="852043888^NI^200DOD^USDOD^A"
"RTN","HMPTFU2",40,0)
 ;
"RTN","HMPTFU2",41,0)
 ; ID STATUS:      ID STATUS supports joint VA/DoD medical centers, Veteran's Record Management (VRM), and Virtual 
"RTN","HMPTFU2",42,0)
 ;                 Lifetime Electronic Record (VLER) initiatives.  This field allows the capture of resolved 
"RTN","HMPTFU2",43,0)
 ;                 duplicate events and exposes the related identifier and identifier status to the consuming 
"RTN","HMPTFU2",44,0)
 ;                 applications. A value of ""A"" indicates that the patient record is an active record on 
"RTN","HMPTFU2",45,0)
 ;                 the identifying system (e.g., VAMC or DoD). A value of "H" indicates that the patient 
"RTN","HMPTFU2",46,0)
 ;                 record was identified as part of a duplicate pair, has been merged, and is no longer active 
"RTN","HMPTFU2",47,0)
 ;                 on the identifying system (e.g., VAMC or DoD).
"RTN","HMPTFU2",48,0)
 ;
"RTN","HMPTFU2",49,0)
 N X,ICN,DFN,EDIPI,ASSIGN,ID,SITE,TYPE,SITEIEN,TFIEN
"RTN","HMPTFU2",50,0)
 ;
"RTN","HMPTFU2",51,0)
 ; Master Patient Index (MPI) must be installed to continue
"RTN","HMPTFU2",52,0)
 S X="MPIF001" X ^%ZOSF("TEST") I '$T S LIST(1)="-1^MPI Not Installed" Q
"RTN","HMPTFU2",53,0)
 ;
"RTN","HMPTFU2",54,0)
 K LIST ; Clear "return" variable
"RTN","HMPTFU2",55,0)
 ;
"RTN","HMPTFU2",56,0)
 ; what do we have
"RTN","HMPTFU2",57,0)
 S TYPE=$P(PT,"^",2) ; SOURCE ID TYPE
"RTN","HMPTFU2",58,0)
 S SITE=$P(PT,"^",4) ; 
"RTN","HMPTFU2",59,0)
 S ID=$P(PT,"^")
"RTN","HMPTFU2",60,0)
 S ASSIGN=$P(PT,"^",3)
"RTN","HMPTFU2",61,0)
 ; check input data
"RTN","HMPTFU2",62,0)
 I ID']"" S LIST(1)="-1^Id is not defined." Q
"RTN","HMPTFU2",63,0)
 I TYPE'="NI",TYPE'="PI" S LIST(1)="-1^Invalid Id Type." Q
"RTN","HMPTFU2",64,0)
 I ASSIGN'="USVHA",ASSIGN'="USDOD" S LIST(1)="-1^Invalid Assigning Authority." Q
"RTN","HMPTFU2",65,0)
 I SITE']"" S LIST(1)="-1^Missing Assigning Facility." Q
"RTN","HMPTFU2",66,0)
 ; find the ien for the station number
"RTN","HMPTFU2",67,0)
 S SITEIEN=$$FIND1^DIC(4,"","X",SITE,"D")
"RTN","HMPTFU2",68,0)
 I 'SITEIEN S LIST(1)="-1^Assigning Facility is not defined in database." Q
"RTN","HMPTFU2",69,0)
 I TYPE="PI",ASSIGN="USVHA" S DFN=ID
"RTN","HMPTFU2",70,0)
 I TYPE="NI",ASSIGN="USVHA",SITE="200M" S ICN=ID
"RTN","HMPTFU2",71,0)
 I TYPE="NI",ASSIGN="USDOD",SITE="200DOD" S EDIPI=ID
"RTN","HMPTFU2",72,0)
 I $D(ICN) S DFN=$$GETDFN^MPIF001(ICN) D  Q:$D(LIST(1))
"RTN","HMPTFU2",73,0)
 . I +DFN<0 S LIST(1)="-1^ICN is not known" Q
"RTN","HMPTFU2",74,0)
 . S SITEIEN=$$IEN^XUAF4($P($$SITE^VASITE,"^",3))
"RTN","HMPTFU2",75,0)
 ;
"RTN","HMPTFU2",76,0)
 I $D(DFN) S ICN=$$GETICN^MPIF001(DFN)
"RTN","HMPTFU2",77,0)
 ; DFN should be defined, but ICN may not.
"RTN","HMPTFU2",78,0)
 ;Use new xref AISS appropriately to retrieve DFN from EDIPI
"RTN","HMPTFU2",79,0)
 I $D(EDIPI)=""!(ASSIGN="")!(TYPE="")!(SITEIEN="") S LIST(1)="-1^Insufficient data" Q
"RTN","HMPTFU2",80,0)
 I $D(EDIPI),'$D(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN)) D  Q
"RTN","HMPTFU2",81,0)
 . S LIST(1)="-1^EDIPI Record is unknown at this facility"
"RTN","HMPTFU2",82,0)
 I $D(EDIPI),$D(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN)) D
"RTN","HMPTFU2",83,0)
 .S EN=$O(^DGCN(391.91,"AISS",EDIPI,ASSIGN,TYPE,SITEIEN,0))
"RTN","HMPTFU2",84,0)
 .S DFN=$P($G(^DGCN(391.91,EN,0)),"^")
"RTN","HMPTFU2",85,0)
 ;
"RTN","HMPTFU2",86,0)
 ; if ICN is not defined, it is OK, but DFN should be defined
"RTN","HMPTFU2",87,0)
 ; bad input, such as Id^NI^USVHA^123
"RTN","HMPTFU2",88,0)
 I '$G(DFN) S LIST(1)="-1^Invalid input" Q
"RTN","HMPTFU2",89,0)
 ; check DFN and Site to be matching an entry in file #391.91
"RTN","HMPTFU2",90,0)
 I '$O(^DGCN(391.91,"APAT",DFN,SITEIEN,0)) D  Q
"RTN","HMPTFU2",91,0)
 . S LIST(1)="-1^Id as '"_ID_"'"_" is not in database"
"RTN","HMPTFU2",92,0)
 ; DFN should be defined, but ICN may not.
"RTN","HMPTFU2",93,0)
 S X=$$QUERYTF($P($G(ICN),"V"),"LIST")
"RTN","HMPTFU2",94,0)
 I $P(X,U)="1" S LIST(1)="-1"_U_$P(X,U,2) Q
"RTN","HMPTFU2",95,0)
 Q
"RTN","HMPTFU2",96,0)
 ;
"RTN","HMPTFU2",97,0)
GETICN(EDIPI) ;return the ICN when EDIPI is passed
"RTN","HMPTFU2",98,0)
 N EN,DFN,ICN,IEN
"RTN","HMPTFU2",99,0)
 S IEN=$$IEN^XUAF4("200DOD")
"RTN","HMPTFU2",100,0)
 I 'IEN Q "-1^Unknown Assigning Facility."
"RTN","HMPTFU2",101,0)
 I '$D(^DGCN(391.91,"ASCR",EDIPI,IEN)) Q "-1^EDIPI Record is unknown at this facility"
"RTN","HMPTFU2",102,0)
 I $D(^DGCN(391.91,"ASCR",EDIPI,IEN)) D
"RTN","HMPTFU2",103,0)
 .S EN=$O(^DGCN(391.91,"ASCR",EDIPI,$$IEN^XUAF4("200DOD"),""))
"RTN","HMPTFU2",104,0)
 .S DFN=$P($G(^DGCN(391.91,EN,0)),"^")
"RTN","HMPTFU2",105,0)
 .I DFN'="" S ICN=$$GETICN^MPIF001(DFN)
"RTN","HMPTFU2",106,0)
 .I DFN="" S ICN="-1^No Site Record associated with this entry"
"RTN","HMPTFU2",107,0)
 Q ICN
"RTN","HMPTFU2",108,0)
 ;
"RTN","HMPTFU2",109,0)
QUERYTF(PAT,ARY) ;a query for Treating Facility.
"RTN","HMPTFU2",110,0)
 ;INPUT   PAT - The patient's ICN
"RTN","HMPTFU2",111,0)
 ;        ARY - The array in which to return the Treating facility info.
"RTN","HMPTFU2",112,0)
 ;OUTPUT  A list of the Treating Facilities in the array provided from
"RTN","HMPTFU2",113,0)
 ;        the parameter.  It will be in the structure of x(1), x(2) etc.
"RTN","HMPTFU2",114,0)
 ;  Ex  X(1)=<ID> ^ <ID TYPE> ^ <Assigning Authority> ^ <Assigning Facility> ^ <ID Status>
"RTN","HMPTFU2",115,0)
 ;
"RTN","HMPTFU2",116,0)
 ; This is also a function call.  If there is an error then "1^error description" will be returned. 
"RTN","HMPTFU2",117,0)
 ; If no data is found the array will not be populated and "1^error description" will be returned.
"RTN","HMPTFU2",118,0)
 ;
"RTN","HMPTFU2",119,0)
 N PDFN,HMPER,LP,CTR
"RTN","HMPTFU2",120,0)
 ;
"RTN","HMPTFU2",121,0)
 ; ICN is not required
"RTN","HMPTFU2",122,0)
 I ('$D(ARY)) S HMPER="1^Parameter missing." G QUERYTFQ
"RTN","HMPTFU2",123,0)
 S HMPER=0,CTR=1
"RTN","HMPTFU2",124,0)
 S X="MPIF001" X ^%ZOSF("TEST") I '$T G QUERYTFQ
"RTN","HMPTFU2",125,0)
 S PDFN=$G(DFN)
"RTN","HMPTFU2",126,0)
 I '$G(PDFN) S HMPER="1^DFN is not defined." G QUERYTFQ
"RTN","HMPTFU2",127,0)
 ;SET FIRST ENTRY TO BE THE ICN - FULL ICN - PAT IS NOT THE ICN
"RTN","HMPTFU2",128,0)
 S @ARY@(CTR)=$$GETICN^MPIF001(PDFN)_"^NI^200M^USVHA^A"
"RTN","HMPTFU2",129,0)
 ;**856 - MVI 1371 (ckn)
"RTN","HMPTFU2",130,0)
 ;Loop through all TFIENs for site
"RTN","HMPTFU2",131,0)
 ;F LP=0:0 S LP=$O(^DGCN(391.91,"APAT",PDFN,LP)) Q:'LP  S TFIEN=$O(^(LP,"")) D SET(TFIEN,ARY,.CTR)
"RTN","HMPTFU2",132,0)
 F LP=0:0 S LP=$O(^DGCN(391.91,"APAT",PDFN,LP)) Q:'LP  D
"RTN","HMPTFU2",133,0)
 .S TFIEN=0 F  S TFIEN=$O(^DGCN(391.91,"APAT",PDFN,LP,TFIEN)) Q:'TFIEN  D
"RTN","HMPTFU2",134,0)
 ..D SET(TFIEN,ARY,.CTR)
"RTN","HMPTFU2",135,0)
 I $D(@ARY)'>9 S HMPER="1^Could not find Treating Facilities"
"RTN","HMPTFU2",136,0)
QUERYTFQ Q HMPER
"RTN","HMPTFU2",137,0)
 ;
"RTN","HMPTFU2",138,0)
SET(TFIEN,ARY,CTR) ;This sets the array with the treating facility list.
"RTN","HMPTFU2",139,0)
 ;  Ex  ARY(1)=<ID> ^ <ID TYPE> ^ <Assigning Facility> ^ <Assigning Authority> ^ <ID Status>
"RTN","HMPTFU2",140,0)
 N DGCN,INSTIEN,SOURCE,EN,SDFN,STATUS,SITEN,ID,IDTYPE,SITE,ASSAUTH,FOUND,NODE,NODE0,NODE2,STNNUM
"RTN","HMPTFU2",141,0)
 S DGCN(0)=$G(^DGCN(391.91,TFIEN,0)),SITEN=""
"RTN","HMPTFU2",142,0)
 ;
"RTN","HMPTFU2",143,0)
 S INSTIEN=$P($G(DGCN(0)),"^",2) ;            TREATING FACILITY LIST (#391.91) INSTITUTION field (#.02)
"RTN","HMPTFU2",144,0)
 I INSTIEN'="" S SITEN=$$STA^XUAF4(INSTIEN) ; STATION from Institution IEN
"RTN","HMPTFU2",145,0)
 S ID=$P(DGCN(0),"^") ;                       ID=Patient DFN field (#.01)
"RTN","HMPTFU2",146,0)
 S STNNUM=SITEN
"RTN","HMPTFU2",147,0)
 ;
"RTN","HMPTFU2",148,0)
 S NODE2=$G(^DGCN(391.91,TFIEN,2))
"RTN","HMPTFU2",149,0)
 S SDFN=$P(NODE2,"^",2) ; SDFN="SOURCE ID"
"RTN","HMPTFU2",150,0)
 S STATUS=$P(NODE2,"^",3) ; STATUS="IDENTIFIER STATUS"
"RTN","HMPTFU2",151,0)
 S ASSAUTH=$P(NODE2,"^") ; Assigning Authority
"RTN","HMPTFU2",152,0)
 ;
"RTN","HMPTFU2",153,0)
 S NODE0=$G(^DGCN(391.91,TFIEN,0))
"RTN","HMPTFU2",154,0)
 S IDTYPE=$P(NODE0,"^",9) ; SOURCE ID TYPE
"RTN","HMPTFU2",155,0)
 ;
"RTN","HMPTFU2",156,0)
 I SITEN="200DOD"!(SITEN["200N") S IDTYPE="NI"
"RTN","HMPTFU2",157,0)
 I SITEN="200DOD" S ASSAUTH="USDOD"
"RTN","HMPTFU2",158,0)
 I IDTYPE="" S IDTYPE="PI"
"RTN","HMPTFU2",159,0)
 I ASSAUTH="" S ASSAUTH="USVHA"
"RTN","HMPTFU2",160,0)
 I SITEN["200N"&(IDTYPE="NI")&(ASSAUTH="USVHA") S ASSAUTH=""
"RTN","HMPTFU2",161,0)
 I IDTYPE="PI" S SITEN=$$TF2SITEN(TFIEN) Q:(SITEN=""&(STNNUM'="742V1"))
"RTN","HMPTFU2",162,0)
 ;
"RTN","HMPTFU2",163,0)
 ; If VA Internal Patient ID, get site hash from domain associated with Treating Facility
"RTN","HMPTFU2",164,0)
 S NODE0=$G(^DGCN(391.91,TFIEN,0))
"RTN","HMPTFU2",165,0)
 S NODE2=$G(^DGCN(391.91,TFIEN,2))
"RTN","HMPTFU2",166,0)
 S SDFN=$P(NODE2,"^",2),STATUS=$P(NODE2,"^",3),IDTYPE=$P(NODE0,"^",9)
"RTN","HMPTFU2",167,0)
 ; DE2345 - MBS 9/15/2015; Only return active entries
"RTN","HMPTFU2",168,0)
 I STATUS'="A" Q
"RTN","HMPTFU2",169,0)
 S ASSAUTH=$P(NODE2,"^")
"RTN","HMPTFU2",170,0)
 I SITEN="200DOD"!(SITEN["200N") S IDTYPE="NI"
"RTN","HMPTFU2",171,0)
 I SITEN="200DOD" S ASSAUTH="USDOD"
"RTN","HMPTFU2",172,0)
 I IDTYPE="" S IDTYPE="PI"
"RTN","HMPTFU2",173,0)
 I ASSAUTH="" S ASSAUTH="USVHA"
"RTN","HMPTFU2",174,0)
 I SITEN["200N"&(IDTYPE="NI")&(ASSAUTH="USVHA") S ASSAUTH=""
"RTN","HMPTFU2",175,0)
 I SDFN'="" S CTR=CTR+1,@ARY@(CTR)=SDFN_"^"_IDTYPE_"^"_SITEN_"^"_ASSAUTH_"^"_STATUS_"^"_STNNUM,FOUND=1
"RTN","HMPTFU2",176,0)
 Q
"RTN","HMPTFU2",177,0)
TF2SITEN(TFIEN) ;Find the DOMAIN associated with the TREATING FACILITY and return the station number.
"RTN","HMPTFU2",178,0)
 ;Currently, our test systems' station numbers are not set up for local DOMAINs. This would result in these
"RTN","HMPTFU2",179,0)
 ;entries failing all the time, thus breaking existing behavior. For the time being, we will default to
"RTN","HMPTFU2",180,0)
 ;the old behavior if we cannot locate a station number as a temporary measure. In the future, we need to
"RTN","HMPTFU2",181,0)
 ;fix the test systems to set up the station numbers correctly, and then change this code to return
"RTN","HMPTFU2",182,0)
 ;an empty string if the DOMAIN could not be resolved.
"RTN","HMPTFU2",183,0)
 S SITEN=""
"RTN","HMPTFU2",184,0)
 Q:'+$G(TFIEN) ""
"RTN","HMPTFU2",185,0)
 Q:'$D(^DGCN(391.91,TFIEN)) ""
"RTN","HMPTFU2",186,0)
 ;Get station number from Institution file (pointed to from Treating Facility List)
"RTN","HMPTFU2",187,0)
 N INSTNUM,STNNUM,DONE,I
"RTN","HMPTFU2",188,0)
 S INSTNUM=$P($G(^DGCN(391.91,TFIEN,0)),U,2) Q:'+INSTNUM SITEN
"RTN","HMPTFU2",189,0)
 S STNNUM=$$GET1^DIQ(4,INSTNUM_",",99) ;ICR 2056
"RTN","HMPTFU2",190,0)
 Q:'+STNNUM SITEN
"RTN","HMPTFU2",191,0)
 ;DE2345 - MBS 9/15/2015; Do not return entries with station numbers=+200
"RTN","HMPTFU2",192,0)
 I STNNUM?1"200".A Q ""
"RTN","HMPTFU2",193,0)
 ;Domain file doesn't have an x-ref on station number, so we have to brute-force it
"RTN","HMPTFU2",194,0)
 S (I,DONE)=0 F  S I=$O(^DIC(4.2,I)) Q:'+I  D  Q:DONE
"RTN","HMPTFU2",195,0)
 . I $P(^DIC(4.2,I,0),U,13)=STNNUM S SITEN=$$SYS^HMPUTILS($P(^DIC(4.2,I,0),U)),DONE=1
"RTN","HMPTFU2",196,0)
 Q SITEN
"RTN","HMPTFU2",197,0)
 ;
"RTN","HMPUPD")
1^7^^B25103187
"RTN","HMPUTILS")
0^34^B58919254^B55237151
"RTN","HMPUTILS",1,0)
HMPUTILS ;SLC/AGP,ASMR/ASF,JC-HMP utilities ;Jan 20, 2017 17:18:18
"RTN","HMPUTILS",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**1,2,3**;Sep 01, 2011;Build 15
"RTN","HMPUTILS",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPUTILS",4,0)
 ;
"RTN","HMPUTILS",5,0)
 Q  ; no entry from top
"RTN","HMPUTILS",6,0)
 ;DE6644, 7 September 2016, updated comments, corrected variables in stack, optimized code
"RTN","HMPUTILS",7,0)
 ;
"RTN","HMPUTILS",8,0)
 ; integration agreements:
"RTN","HMPUTILS",9,0)
 ;
"RTN","HMPUTILS",10,0)
 ; External References          DBIA#
"RTN","HMPUTILS",11,0)
 ; -------------------          -----
"RTN","HMPUTILS",12,0)
 ; XLFCRC                        3156
"RTN","HMPUTILS",13,0)
 ; XLFDT                        10103
"RTN","HMPUTILS",14,0)
 ; XLFUTL                        2622
"RTN","HMPUTILS",15,0)
 ; XUPARAM                       2541
"RTN","HMPUTILS",16,0)
 ;
"RTN","HMPUTILS",17,0)
 ;
"RTN","HMPUTILS",18,0)
 ;
"RTN","HMPUTILS",19,0)
CHKSP(HMPFHMP) ; ^XTMP check before patient subscription starts to cache   *BEGIN*S68-PJH
"RTN","HMPUTILS",20,0)
 ; HMPFHMP - server name
"RTN","HMPUTILS",21,0)
 N HMPOK S HMPOK=0
"RTN","HMPUTILS",22,0)
 F  D  Q:HMPOK
"RTN","HMPUTILS",23,0)
 . I $$GETMAX>$$GETSIZE("estimate",HMPFHMP) S HMPOK=1 D STATUS^HMPMETA(HMPOK,HMPFHMP) Q  ; set DISK USAGE STATUS to 'WITHIN LIMIT' and continue, US8228
"RTN","HMPUTILS",24,0)
 . D STATUS^HMPMETA(HMPOK,HMPFHMP) H $$GETSECS^HMPDJFSP  ; DISK USAGE STATUS is 'EXCEEDED LIMIT' and wait, US8228
"RTN","HMPUTILS",25,0)
 Q  ;  *END*S68-PJH
"RTN","HMPUTILS",26,0)
 ;
"RTN","HMPUTILS",27,0)
SETERROR(RESULT,ERROR,EXTERROR,DATA) ; -- error text for JSON
"RTN","HMPUTILS",28,0)
 N CNT,TEMP,HMPTEMP,XCNT
"RTN","HMPUTILS",29,0)
 S HMPTEMP="HMPXTEMP ERRORS"
"RTN","HMPUTILS",30,0)
 I '$D(^XTMP(HMPTEMP,0)) S ^XTMP(HMPTEMP,0)=$$FMADD^XLFDT(DT,7)_U_DT_U_"HMP ERROR GLOBAL"
"RTN","HMPUTILS",31,0)
 S RESULT("success")="false"
"RTN","HMPUTILS",32,0)
 I $D(DATA) S XCNT=$O(^XTMP(HMPTEMP,""),-1)+1 M ^XTMP(HMPTEMP,XCNT,"ERROR")=DATA
"RTN","HMPUTILS",33,0)
 I $D(ERROR) D SETERRTX(.TEMP,.ERROR) S RESULT("error","code")=TEMP
"RTN","HMPUTILS",34,0)
 I +$G(XCNT)>0 S RESULT("error","code")=$G(RESULT("error","code"))_" See ^XTMP("_HMPTEMP_","_XCNT_",DATA) for data"
"RTN","HMPUTILS",35,0)
 I $D(EXTERROR) D SETERRTX(.TEMP,.EXTERROR) I TEMP'="" S RESULT("error","message")=TEMP
"RTN","HMPUTILS",36,0)
 ;
"RTN","HMPUTILS",37,0)
 Q
"RTN","HMPUTILS",38,0)
 ;
"RTN","HMPUTILS",39,0)
SETERRTX(TEMP,ERROR) ; concatenate errors from ERROR array, put CR, LF between them
"RTN","HMPUTILS",40,0)
 S TEMP="",CNT=0  ; CNT, TEMP from SETERROR
"RTN","HMPUTILS",41,0)
 F  S CNT=$O(ERROR(CNT)) Q:CNT'>0  S TEMP=$S(TEMP'="":TEMP=TEMP_$C(13,10)_ERROR(CNT),1:ERROR(CNT))
"RTN","HMPUTILS",42,0)
 Q
"RTN","HMPUTILS",43,0)
 ;
"RTN","HMPUTILS",44,0)
 ;
"RTN","HMPUTILS",45,0)
SETTEXT(X,VALUE) ; -- format word processing text
"RTN","HMPUTILS",46,0)
 N FIRST,I,LINE
"RTN","HMPUTILS",47,0)
 S FIRST=1
"RTN","HMPUTILS",48,0)
 S I=0 F  S I=$O(@X@(I)) Q:I<1  D
"RTN","HMPUTILS",49,0)
 .S LINE=$S($D(@X@(I,0)):@X@(I,0),1:@X@(I))
"RTN","HMPUTILS",50,0)
 .; FIRST=1 S @VALUE@(I)=LINE,FIRST=0 Q
"RTN","HMPUTILS",51,0)
 .S @VALUE@(I)=LINE_$C(13)_$C(10)
"RTN","HMPUTILS",52,0)
 Q
"RTN","HMPUTILS",53,0)
 ;
"RTN","HMPUTILS",54,0)
 ;
"RTN","HMPUTILS",55,0)
SPLITVAL(NODE,ARRAY) ; -- split a value into a list
"RTN","HMPUTILS",56,0)
 N CNT,NAME,VALUE,FIELD
"RTN","HMPUTILS",57,0)
 S NAME="" F  S NAME=$O(ARRAY(NAME)) Q:NAME=""  D
"RTN","HMPUTILS",58,0)
 .S CNT=+ARRAY(NAME)
"RTN","HMPUTILS",59,0)
 .S VALUE=$P($G(NODE),U,CNT)
"RTN","HMPUTILS",60,0)
 .I NAME="Code" S FIELD=$P(ARRAY(NAME),U,2) S VALUE=$$SETVURN(FIELD,VALUE)
"RTN","HMPUTILS",61,0)
 .S ARRAY(NAME)=VALUE
"RTN","HMPUTILS",62,0)
 Q
"RTN","HMPUTILS",63,0)
 ;
"RTN","HMPUTILS",64,0)
 ;
"RTN","HMPUTILS",65,0)
SETPROV(NODE,PROV) ; -- providers
"RTN","HMPUTILS",66,0)
 S PROV("providerUid")=$$SETUID("user",,+NODE),PROV("providerName")=$P(NODE,U,2) Q
"RTN","HMPUTILS",67,0)
 ;
"RTN","HMPUTILS",68,0)
SETUID(DOMAIN,PAT,ID,ADDDATA) ; function, UID string
"RTN","HMPUTILS",69,0)
 N RESULT,SYS
"RTN","HMPUTILS",70,0)
 S SYS=$S($D(HMPSYS):HMPSYS,1:$$SYS^HMPUTILS)
"RTN","HMPUTILS",71,0)
 S RESULT="urn:va:"_DOMAIN_":"_SYS_":"_$S($G(PAT):PAT_":",1:"")_ID
"RTN","HMPUTILS",72,0)
 I $L($G(ADDDATA)) S RESULT=RESULT_":"_ADDDATA
"RTN","HMPUTILS",73,0)
 Q RESULT
"RTN","HMPUTILS",74,0)
 ;
"RTN","HMPUTILS",75,0)
 ;
"RTN","HMPUTILS",76,0)
SETFCURN(DOMAIN,FACILITY,VALUE) ; function, create facility URN
"RTN","HMPUTILS",77,0)
 Q "urn:va:"_DOMAIN_":"_FACILITY_":"_VALUE
"RTN","HMPUTILS",78,0)
 ;
"RTN","HMPUTILS",79,0)
 ;
"RTN","HMPUTILS",80,0)
SETVURN(DOMAIN,VALUE) ; function, create VA urn
"RTN","HMPUTILS",81,0)
 Q "urn:va:"_DOMAIN_":"_VALUE
"RTN","HMPUTILS",82,0)
 ;
"RTN","HMPUTILS",83,0)
SYS(NAME) ; -- return hashed system name from HMP SYSTEM NAME parameter, or calculate from NAME parameter if it exists
"RTN","HMPUTILS",84,0)
 ; DE4463 4/22/2016 CK - changed HMP routines to all call this function
"RTN","HMPUTILS",85,0)
 ;  SYS^HMPUTILS returns a 4 digit hashed site, padded with leading zeros
"RTN","HMPUTILS",86,0)
 N SYS
"RTN","HMPUTILS",87,0)
 S SYS=$$GET^XPAR("SYS","HMP SYSTEM NAME")
"RTN","HMPUTILS",88,0)
 I '$L($G(NAME)),'$L(SYS) Q $$SYS($$KSP^XUPARAM("WHERE"))       ; r2.0 install workaround: if no parameter AND no HMP SYSTEM NAME, then calculate and return using domain name
"RTN","HMPUTILS",89,0)
 I '$L($G(NAME)) Q SYS                                        ; else return HMP SYSTEM NAME parameter
"RTN","HMPUTILS",90,0)
 Q $TR($J($$BASE^XLFUTL($$CRC16^XLFCRC(NAME),10,16),4)," ",0) ; else calculate from parameter
"RTN","HMPUTILS",91,0)
 ;
"RTN","HMPUTILS",92,0)
 ;
"RTN","HMPUTILS",93,0)
SETNCS(CODESET,VALUE) ; -- create national codeset URN
"RTN","HMPUTILS",94,0)
 Q "urn:"_CODESET_":"_VALUE
"RTN","HMPUTILS",95,0)
 ;
"RTN","HMPUTILS",96,0)
JSONDT(X) ; function, convert FileMan date-time to HL7 date-time for JSON
"RTN","HMPUTILS",97,0)
 N HL7DT,T,Y
"RTN","HMPUTILS",98,0)
 ;DE3116, 12 April 2016 function updated to handle FM date problems
"RTN","HMPUTILS",99,0)
 ; T indicates that a time was included
"RTN","HMPUTILS",100,0)
 S T=0 I $E(X,8)=".",$E(X,6,7) S T=1  ; if there's a time it must be a precise date
"RTN","HMPUTILS",101,0)
 S Y=$S(T:X,1:X\1)  ; strip time if imprecise date
"RTN","HMPUTILS",102,0)
 I T,($E(Y,9,10)>23)!($E(Y,11,12)>59)!($E(Y,13,14)>59) S Y=$$FMADD^XLFDT(Y,0,0,0,0) ;DE3116 ASF 04/09/16 allows for hrs >24 and mins >60
"RTN","HMPUTILS",103,0)
 S HL7DT=$$FMTHL7^HMPSTMP(Y)  ; DE5016
"RTN","HMPUTILS",104,0)
 S:T HL7DT=$E(HL7DT_"000000",1,14)  ; if time passed, result must be 14 chars.
"RTN","HMPUTILS",105,0)
 Q HL7DT
"RTN","HMPUTILS",106,0)
 ;
"RTN","HMPUTILS",107,0)
 ;
"RTN","HMPUTILS",108,0)
FACILITY(X,Y) ; -- add facility info to array for JSON
"RTN","HMPUTILS",109,0)
 ;  X=STATION NUMBER^STATION NAME
"RTN","HMPUTILS",110,0)
 ;  Y=Variable array name
"RTN","HMPUTILS",111,0)
 ; >D FACILITY^HMPUTILS("500^CAMP MASTER","LAB")
"RTN","HMPUTILS",112,0)
 ;
"RTN","HMPUTILS",113,0)
 S @Y@("facilityCode")=$P(X,"^")
"RTN","HMPUTILS",114,0)
 S @Y@("facilityName")=$P(X,"^",2)
"RTN","HMPUTILS",115,0)
 Q
"RTN","HMPUTILS",116,0)
 ;
"RTN","HMPUTILS",117,0)
 ;
"RTN","HMPUTILS",118,0)
VERSRV()   ; function, Return server version of option name
"RTN","HMPUTILS",119,0)
 N HMPLST,VAL
"RTN","HMPUTILS",120,0)
 D FIND^DIC(19,"",1,"X","HMP UI CONTEXT",1,,,,"HMPLST")
"RTN","HMPUTILS",121,0)
 S VAL=$G(HMPLST("DILIST","ID",1,1))
"RTN","HMPUTILS",122,0)
 Q $$UP^XLFSTR($P(VAL,"version ",2))
"RTN","HMPUTILS",123,0)
 ;
"RTN","HMPUTILS",124,0)
 ;
"RTN","HMPUTILS",125,0)
VERCMP(CUR,VAL) ; Returns 1 if CUR<VAL, -1 if CUR>VAL, 0 if equal
"RTN","HMPUTILS",126,0)
 N CURMAJOR,CURMINOR,CURSNAP,VALMAJOR,VALMINOR,VALSNAP
"RTN","HMPUTILS",127,0)
 S CURMAJOR=$P(CUR,"-"),CURMINOR=$P(CUR,"-",2),CURSNAP=$E($P(CUR,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",128,0)
 S VALMAJOR=$P(VAL,"-"),VALMINOR=$P(VAL,"-",2),VALSNAP=$E($P(VAL,"-",3),1,4)="SNAP"
"RTN","HMPUTILS",129,0)
 I $E(VALMINOR)="P" S VALMINOR=$E(VALMINOR,2,99)     ; "P"ilot versions (old)
"RTN","HMPUTILS",130,0)
 I $E(CURMINOR)="P" S CURMINOR=$E(VALMINOR,2,99)
"RTN","HMPUTILS",131,0)
 I $E(VALMINOR)="S" S VALMINOR=$E(VALMINOR,2,99)*10  ; "S"print versions
"RTN","HMPUTILS",132,0)
 I $E(CURMINOR)="S" S CURMINOR=$E(CURMINOR,2,99)*10
"RTN","HMPUTILS",133,0)
 Q:VALMAJOR>CURMAJOR 1   Q:VALMAJOR<CURMAJOR -1  ; compare major versions
"RTN","HMPUTILS",134,0)
 Q:VALMINOR>CURMINOR 1   Q:VALMINOR<CURMINOR -1  ; compare minor versions
"RTN","HMPUTILS",135,0)
 Q:(CURSNAP&'VALSNAP) 1  Q:(VALSNAP&'CURSNAP) -1 ; "SNAPSHOT" < released
"RTN","HMPUTILS",136,0)
 Q 0
"RTN","HMPUTILS",137,0)
 ;
"RTN","HMPUTILS",138,0)
 ;
"RTN","HMPUTILS",139,0)
WDWH() ; What kind of data exist?, DE6644, 7 September 2016
"RTN","HMPUTILS",140,0)
 ; HMPA   = loop counter
"RTN","HMPUTILS",141,0)
 ; HMPB   = node information
"RTN","HMPUTILS",142,0)
 ; HMPOPD = 1 if operational data exists, 0 otherwise
"RTN","HMPUTILS",143,0)
 ; HMPPAT = 1 if patient data exist, 0 otherwise
"RTN","HMPUTILS",144,0)
 ; HMPRET = return variable - 0 if no data exist
"RTN","HMPUTILS",145,0)
 ;                            1 if ONLY patient data exist
"RTN","HMPUTILS",146,0)
 ;                            2 if ONLY operational data exist
"RTN","HMPUTILS",147,0)
 ;                            3 if BOTH patient and operational data exist
"RTN","HMPUTILS",148,0)
 N HMPA,HMPB,HMPOPD,HMPPAT,HMPRET
"RTN","HMPUTILS",149,0)
 S (HMPOPD,HMPPAT,HMPRET)=0,HMPA="HMPFX"
"RTN","HMPUTILS",150,0)
 ; iterate through HMP* data only
"RTN","HMPUTILS",151,0)
 F  S HMPA=$O(^XTMP(HMPA)) Q:'($E(HMPA,1,3)="HMP")  D  Q:HMPOD&HMPPAT  ; no need to continue if both flags set
"RTN","HMPUTILS",152,0)
 . S HMPB=$P(HMPA,"~",3) I HMPB="OPD" S HMPOPD=1 Q  ; operational data
"RTN","HMPUTILS",153,0)
 . S:HMPB=+HMPB HMPPAT=1  ; patient data
"RTN","HMPUTILS",154,0)
 I HMPPAT,'HMPOPD S HMPRET=1  ; ONLY patient data
"RTN","HMPUTILS",155,0)
 I 'HMPPAT,HMPOPD S HMPRET=2  ; ONLY operational data
"RTN","HMPUTILS",156,0)
 I HMPPAT,HMPOPD S HMPRET=3   ; patient & operational data
"RTN","HMPUTILS",157,0)
 Q HMPRET
"RTN","HMPUTILS",158,0)
 ;
"RTN","HMPUTILS",159,0)
NODATA(A) ; boolean function, is there any patient data for stream in A?; JD - 2/23/15
"RTN","HMPUTILS",160,0)
 ; Returns 1 if there is no patient data, 0 Otherwise, DE6644, 7 September 2016
"RTN","HMPUTILS",161,0)
 ; HMPA = Loop counter
"RTN","HMPUTILS",162,0)
 ; HMPF = Flag indicating data found
"RTN","HMPUTILS",163,0)
 N HMPA,HMPF
"RTN","HMPUTILS",164,0)
 S HMPF=0,HMPA=""
"RTN","HMPUTILS",165,0)
 F  S HMPA=$O(^XTMP(A,0,"count",HMPA)) Q:HMPF!(HMPA="")  S:+$G(^XTMP(A,0,"count",HMPA))>0 HMPF=1
"RTN","HMPUTILS",166,0)
 Q 'HMPF  ; return opposite of flag
"RTN","HMPUTILS",167,0)
 ;
"RTN","HMPUTILS",168,0)
GETSIZE(HMPMODE,HMPSRVN) ; function, returns aggregate extract size for extracts waiting to be sent to HMP servers
"RTN","HMPUTILS",169,0)
 ; returns: total size ^ object count
"RTN","HMPUTILS",170,0)
 ; HMPMODE = estimate - use estimated domain average sizes (default)
"RTN","HMPUTILS",171,0)
 ;           actual - walk though object nodes to calculate using $LENGTH
"RTN","HMPUTILS",172,0)
 ; HMPSRVN = name of HMP server [optional - defaults to all HMP servers]
"RTN","HMPUTILS",173,0)
 ; DE7401, move function here, 20 January 2017
"RTN","HMPUTILS",174,0)
 ; loop through extracts for server(s) 
"RTN","HMPUTILS",175,0)
 N BATCH,DOMAIN,L,OBJCNT,OBJS,OBJSIZES,ROOT,TASK,TOTAL
"RTN","HMPUTILS",176,0)
 S HMPMODE=$G(HMPMODE,"estimate")  ; default to estimate
"RTN","HMPUTILS",177,0)
 S:'("^estimate^actual^")[U_HMPMODE_U HMPMODE="estimate"  ; valid mode check
"RTN","HMPUTILS",178,0)
 I HMPMODE="estimate" D GETLST^XPAR(.OBJSIZES,"PKG","HMP DOMAIN SIZES","I")  ; domain sizes needed for estimate
"RTN","HMPUTILS",179,0)
 ; object counter, total, root node, batch to check, L is length of ROOT for loop exit
"RTN","HMPUTILS",180,0)
 S (OBJCNT,TOTAL)=0,ROOT="HMPFX~"_$S($G(HMPSRVN)]"":HMPSRVN_"~",1:""),BATCH=ROOT,L=$L(ROOT)
"RTN","HMPUTILS",181,0)
 F  S BATCH=$O(^XTMP(BATCH)) Q:$E(BATCH,1,L)'=ROOT  D
"RTN","HMPUTILS",182,0)
 . S TASK=0 F  S TASK=$O(^XTMP(BATCH,TASK)) Q:'TASK  S DOMAIN="" F  S DOMAIN=$O(^XTMP(BATCH,TASK,DOMAIN)) Q:DOMAIN=""  D
"RTN","HMPUTILS",183,0)
 ..  S OBJS=+$O(^XTMP(BATCH,TASK,DOMAIN," "),-1),OBJCNT=OBJCNT+OBJS
"RTN","HMPUTILS",184,0)
 ..  I HMPMODE="estimate" S TOTAL=TOTAL+(OBJS*$G(OBJSIZES($P(DOMAIN,"#")),1000)) Q  ; use domain sizes for estimate & quit
"RTN","HMPUTILS",185,0)
 ..  S TOTAL=TOTAL+$$WALK(BATCH,TASK,DOMAIN)  ; fall through for actual
"RTN","HMPUTILS",186,0)
 Q TOTAL_"^"_OBJCNT
"RTN","HMPUTILS",187,0)
 ;
"RTN","HMPUTILS",188,0)
WALK(BATCH,TASK,DOMAIN) ; function, walk through domain objects in task to get actual size
"RTN","HMPUTILS",189,0)
 N NODE,OBJ,SIZE
"RTN","HMPUTILS",190,0)
 S (OBJ,SIZE)=0
"RTN","HMPUTILS",191,0)
 F  S OBJ=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ)) Q:'OBJ  D
"RTN","HMPUTILS",192,0)
 . S NODE=0 F  S NODE=$O(^XTMP(BATCH,TASK,DOMAIN,OBJ,NODE)) Q:'NODE  S SIZE=SIZE+$L(^(NODE))
"RTN","HMPUTILS",193,0)
 Q SIZE  ; return size in bytes
"RTN","HMPUTILS",194,0)
 ;
"RTN","HMPUTILS",195,0)
GETMAX() ; function, return the max allowable aggregate extract size in bytes
"RTN","HMPUTILS",196,0)
 ;
"RTN","HMPUTILS",197,0)
 N HMPLIM S HMPLIM=$$GET^XPAR("SYS","HMP EXTRACT DISK SIZE LIMIT")*1000000
"RTN","HMPUTILS",198,0)
 Q $S(HMPLIM>999999:HMPLIM,1:20000000)  ; if not set to 1 million minimum, return 20mb characters
"RTN","HMPUTILS",199,0)
 ;
"RTN","HMPWB1")
0^16^B44273066^B43200310
"RTN","HMPWB1",1,0)
HMPWB1 ; Agilex/EJK/JD - WRITE BACK ACTIVITY;Nov 5, 2015@16:15:08
"RTN","HMPWB1",2,0)
 ;;2.0;ENTERPRISE HEALTH MANAGEMENT PLATFORM;**2,3**;Sep 01, 2011;Build 15
"RTN","HMPWB1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HMPWB1",4,0)
 ;
"RTN","HMPWB1",5,0)
 ; External References          DBIA#
"RTN","HMPWB1",6,0)
 ; -------------------          -----
"RTN","HMPWB1",7,0)
 ; EDITSAVE^ORWDAL32             6427
"RTN","HMPWB1",8,0)
 ;
"RTN","HMPWB1",9,0)
 Q
"RTN","HMPWB1",10,0)
 ; allergy write back from eHMP-UI to VistA
"RTN","HMPWB1",11,0)
ALLERGY(RSLT,IEN,DFN,DATA) ;file allergy data
"RTN","HMPWB1",12,0)
 ; RSLT - result, passed by reference
"RTN","HMPWB1",13,0)
 ; IEN - zero for new allergy, or IEN for edit
"RTN","HMPWB1",14,0)
 ; DFN - patient identifier
"RTN","HMPWB1",15,0)
 ; DATA - array of allergy data. Subscript names are required. 
"RTN","HMPWB1",16,0)
 ;  ("GMRACHT",0)=1 - Chart Marked indicator
"RTN","HMPWB1",17,0)
 ;  ("GMRACHT",1)=3150603.0905 - Date/Time Chart Marked
"RTN","HMPWB1",18,0)
 ;  ("GMRAGNT")="DIGITOXIN^9;PSNDF(50.6," - Allergy and Pointer to Allergen File
"RTN","HMPWB1",19,0)
 ;  ("GMRAOBHX")="o^OBSERVED" - (O)bserved or (H)istorical
"RTN","HMPWB1",20,0)
 ;  ("GMRAORIG")=10000000224 - Pointer to VA DRUG CLASS File (50.605)
"RTN","HMPWB1",21,0)
 ;  ("GMRAORDT")=3150603.0805 - Allergy assessmant date and time. 
"RTN","HMPWB1",22,0)
 ;  ("GMRASEVR")=2 - Severity of Allergy. 1=Mild, 2=Moderate, 3=Severe
"RTN","HMPWB1",23,0)
 ;  ("GMRATYPE")="D^Drug" - Type of Allergen (F)ood or (D)rug
"RTN","HMPWB1",24,0)
 ;  ("GMRANATR")="A^Allergy" - Mechanism of Allergy (A)llergy, (P)harmacologic, (U)nknown.
"RTN","HMPWB1",25,0)
 ;  ("GMRASYMP",0)=2 - Number of Symptoms
"RTN","HMPWB1",26,0)
 ;  ("GMRASYMP",1)="2^ITCHING,WATERING EYES" - IEN and Description of Symptom 1
"RTN","HMPWB1",27,0)
 ;  ("GMRASYMP",2)="133^RASH" - IEN and Description of Symptom 2
"RTN","HMPWB1",28,0)
 ;
"RTN","HMPWB1",29,0)
 I $G(DFN)'>0 D MSG^HMPTOOLS("DFN",1) Q
"RTN","HMPWB1",30,0)
 I '$D(DATA) D MSG^HMPTOOLS("DATA Array",1) Q
"RTN","HMPWB1",31,0)
 N CMMT,FILTER,GMR0,GMRA,GMR0,GMRIEN,HMPALRGY,HMPDATA,HMPDFN,HMPSITE,I,ORY,REAC,STMPTM,USER,VPRI,X,XWBOS,Y
"RTN","HMPWB1",32,0)
 N HMPIDX,HMPSTOP,HMPDFN
"RTN","HMPWB1",33,0)
 S HMPSTOP=0
"RTN","HMPWB1",34,0)
 ;
"RTN","HMPWB1",35,0)
 N $ES,$ET,ERRPAT,ERRMSG,D0
"RTN","HMPWB1",36,0)
 S HMPDFN=DFN
"RTN","HMPWB1",37,0)
 S $ET="D ERRHDLR^HMPDERRH",ERRPAT=DFN
"RTN","HMPWB1",38,0)
 S ERRMSG="A problem occurred in the allergy domain, routine: "_$T(+0)
"RTN","HMPWB1",39,0)
 S XWBOS=$$NOW^XLFDT  ; indicate that we're in the RPC broker, prevent interactive calls
"RTN","HMPWB1",40,0)
 ;DE6629 - PB - Sep 7, 2016 - check DATA("GMRAGNT" and strip out all but the file root.
"RTN","HMPWB1",41,0)
 I $P(DATA("GMRAGNT"),",",2)'=""  N GMR1 S GMR1=$P(DATA("GMRAGNT"),",",1),DATA("GMRAGNT")=$P(GMR1,";",2)_","
"RTN","HMPWB1",42,0)
 L +^GMR(120.8,0):5
"RTN","HMPWB1",43,0)
 D EDITSAVE^ORWDAL32(.ORY,IEN,DFN,.DATA)  ; update ADVERSE REACTION ASSESSMENT (#120.86)
"RTN","HMPWB1",44,0)
 ; ejk US3232 if failure to file, send error message as result. 
"RTN","HMPWB1",45,0)
 L -^GMR(120.8,0)
"RTN","HMPWB1",46,0)
 I $P(ORY,"^",1)=-1 D MSG^HMPTOOLS($P(ORY,"^",2)) D ERROR Q
"RTN","HMPWB1",47,0)
 I $P(ORY,U,1)=0,'$D(D0) D
"RTN","HMPWB1",48,0)
 . S HMPSTOP=0,HMPIDX=""
"RTN","HMPWB1",49,0)
 . F  S HMPIDX=$O(^GMR(120.8,"B",DFN,HMPIDX),-1) Q:HMPIDX=""!(HMPSTOP=1)  D
"RTN","HMPWB1",50,0)
 .. S GMR0=$G(^GMR(120.8,HMPIDX,0))
"RTN","HMPWB1",51,0)
 .. I $P(GMR0,U,1)=HMPDFN,$P(GMR0,U,2)=$P(DATA("GMRAGNT"),U,1) S D0=HMPIDX,DFN=HMPDFN,HMPSTOP=1
"RTN","HMPWB1",52,0)
 .. Q
"RTN","HMPWB1",53,0)
 . Q
"RTN","HMPWB1",54,0)
 I HMPSTOP S D0=HMPIDX,DFN=HMPDFN
"RTN","HMPWB1",55,0)
 ; return value in RSLT
"RTN","HMPWB1",56,0)
 S HMP=$NA(^TMP("HMP",$J)) K @HMP
"RTN","HMPWB1",57,0)
 S FILTER("id")=D0 ;ien for the entry into the allergy file
"RTN","HMPWB1",58,0)
 S FILTER("patientId")=DFN ;patient identifier
"RTN","HMPWB1",59,0)
 S FILTER("domain")="allergy" ;domain name for write back and freshness stream staging
"RTN","HMPWB1",60,0)
 S FILTER("noHead")=1 ;no header record required.
"RTN","HMPWB1",61,0)
 D GET^HMPDJ(.RSLT,.FILTER) ;build the JSON array in the ^TMP global
"RTN","HMPWB1",62,0)
 K ^TMP("ALLERGY",$J)
"RTN","HMPWB1",63,0)
 M ^TMP("ALLERGY",$J)=@RSLT
"RTN","HMPWB1",64,0)
 S RSLT=$NA(^TMP("ALLERGY",$J))
"RTN","HMPWB1",65,0)
 S HMPFCNT=0
"RTN","HMPWB1",66,0)
 S HMPUID=$$SETUID^HMPUTILS("allergy",DFN,D0)
"RTN","HMPWB1",67,0)
 S HMPE=^TMP("ALLERGY",$J,1,1)
"RTN","HMPWB1",68,0)
 S STMPTM=$TR($P($P(HMPE,"lastUpdateTime",2),","),""":")
"RTN","HMPWB1",69,0)
 D ADHOC^HMPUTIL2("allergy",HMPFCNT,DFN,HMPUID,STMPTM)
"RTN","HMPWB1",70,0)
 K RSLT
"RTN","HMPWB1",71,0)
 S RSLT=$$EXTRACT(HMP)
"RTN","HMPWB1",72,0)
 M ^TMP("HMPALL",$J)=RSLT
"RTN","HMPWB1",73,0)
 K RSLT
"RTN","HMPWB1",74,0)
 S RSLT=$NA(^TMP("HMPALL",$J))
"RTN","HMPWB1",75,0)
 ;Clear work files
"RTN","HMPWB1",76,0)
 K @HMP
"RTN","HMPWB1",77,0)
 Q
"RTN","HMPWB1",78,0)
 ;
"RTN","HMPWB1",79,0)
ALLEIE(RSLT,DATA) ;file allergy entered in error
"RTN","HMPWB1",80,0)
 ;Since DFN is not relevant as an input parameter, we removed it from the DATA string
"RTN","HMPWB1",81,0)
 ;Once we know the allergy IEN, DFN will also be known.  JD - 11/5/15.
"RTN","HMPWB1",82,0)
 ; RSLT - result, passed by reference
"RTN","HMPWB1",83,0)
 ; DATA - contains all information needed to mark a Allergy as Entered in Error
"RTN","HMPWB1",84,0)
 ;   IEN^GMRAERR^GMRAERRBY^GMRAERRDT^GMRACMTS,0)^GMRACMTS,1)
"RTN","HMPWB1",85,0)
 ;      IEN = Pointer to the Allergy to be marked as Entered in Error
"RTN","HMPWB1",86,0)
 ;      GMRAERR = YES (must be YES. Any other value will cause the EIE to fail.)
"RTN","HMPWB1",87,0)
 ;      GMRAERRBY = Pointer to the New Person file. 
"RTN","HMPWB1",88,0)
 ;      GMRAERRDT = Fileman date.time (3150812.143206)
"RTN","HMPWB1",89,0)
 ;      GMRACMTS,0) = Total number of comments
"RTN","HMPWB1",90,0)
 ;      GMRACMTS,N) = Free text field for each comment
"RTN","HMPWB1",91,0)
 ;
"RTN","HMPWB1",92,0)
 N HMPSTOP,HMPIEN,HMPDFN
"RTN","HMPWB1",93,0)
 S HMPIEN=$P(DATA,U,1)
"RTN","HMPWB1",94,0)
 D CHECKREQ
"RTN","HMPWB1",95,0)
 Q:HMPSTOP=1
"RTN","HMPWB1",96,0)
 D PARSE
"RTN","HMPWB1",97,0)
 I '$D(^GMR(120.8,HMPIEN)) D MSG^HMPTOOLS("Allergy "_HMPIEN_" does not exist",2) D ERROR Q
"RTN","HMPWB1",98,0)
 D EDITSAVE^ORWDAL32(.RSLT,HMPIEN,HMPDFN,.DATA)
"RTN","HMPWB1",99,0)
 S HMP=$NA(^TMP("HMP",$J)) K @HMP
"RTN","HMPWB1",100,0)
 S FILTER("id")=HMPIEN ;ien for the entry into the allergy file
"RTN","HMPWB1",101,0)
 S FILTER("patientId")=HMPDFN ;patient identifier
"RTN","HMPWB1",102,0)
 S FILTER("domain")="allergy" ;domain name for write back and freshness stream staging
"RTN","HMPWB1",103,0)
 S FILTER("noHead")=1 ;no header record required.
"RTN","HMPWB1",104,0)
 D GET^HMPDJ(.RSLT,.FILTER) ;build the JSON array in the ^TMP global
"RTN","HMPWB1",105,0)
 K ^TMP("ALLERGY",$J)
"RTN","HMPWB1",106,0)
 M ^TMP("ALLERGY",$J)=@RSLT
"RTN","HMPWB1",107,0)
 S RSLT=$NA(^TMP("ALLERGY",$J))
"RTN","HMPWB1",108,0)
 S HMPFCNT=0
"RTN","HMPWB1",109,0)
 S HMPUID=$$SETUID^HMPUTILS("allergy",HMPDFN,HMPIEN)
"RTN","HMPWB1",110,0)
 S HMPE=^TMP("ALLERGY",$J,1,1)
"RTN","HMPWB1",111,0)
 S STMPTM=$TR($P($P(HMPE,"lastUpdateTime",2),","),""":")
"RTN","HMPWB1",112,0)
 D ADHOC^HMPUTIL2("allergy",HMPFCNT,HMPDFN,HMPUID,STMPTM)
"RTN","HMPWB1",113,0)
 K RSLT
"RTN","HMPWB1",114,0)
 S RSLT=$$EXTRACT(HMP)
"RTN","HMPWB1",115,0)
 M ^TMP("HMPALL",$J)=RSLT
"RTN","HMPWB1",116,0)
 K RSLT
"RTN","HMPWB1",117,0)
 S RSLT=$NA(^TMP("HMPALL",$J))
"RTN","HMPWB1",118,0)
 ;Clear work files
"RTN","HMPWB1",119,0)
 K @HMP
"RTN","HMPWB1",120,0)
 Q
"RTN","HMPWB1",121,0)
 ;
"RTN","HMPWB1",122,0)
CHECKREQ ; check for required fields
"RTN","HMPWB1",123,0)
 ;Removed DFN from the input parameter DATA but for integrity purposes (and not to modify
"RTN","HMPWB1",124,0)
 ;too much code), we need to keep the number of pieces in DATA the same.
"RTN","HMPWB1",125,0)
 I HMPIEN'=+HMPIEN D MSG^HMPTOOLS("Allergy identifier is invalid/null: "_HMPIEN) D ERROR Q
"RTN","HMPWB1",126,0)
 I '$D(^GMR(120.8,HMPIEN)) D MSG^HMPTOOLS("Allergy identifier "_HMPIEN_" does not exist.") D ERROR Q
"RTN","HMPWB1",127,0)
 S DATA=$P(DATA,U)_U_$P($G(^GMR(120.8,HMPIEN,0)),U)_U_$P(DATA,U,2,999)
"RTN","HMPWB1",128,0)
 S HMPSTOP=0
"RTN","HMPWB1",129,0)
 I $P(DATA,U,1)'?1N.N D MSG^HMPTOOLS("Allergy Identifier must be numeric",1) D ERROR Q
"RTN","HMPWB1",130,0)
 I $P(DATA,U,2)'?1N.N D MSG^HMPTOOLS("Patient Identifier ",2,"must be numeric") D ERROR Q
"RTN","HMPWB1",131,0)
 I $P(DATA,U,3)'="YES" D MSG^HMPTOOLS("EIE indicator",2,"must be set to YES") D ERROR Q
"RTN","HMPWB1",132,0)
 I $D(^GMR(120.8,HMPIEN,"ER"))>0 D MSG^HMPTOOLS("Allergy already entered in error: "_HMPIEN) D ERROR Q
"RTN","HMPWB1",133,0)
 Q
"RTN","HMPWB1",134,0)
 ;
"RTN","HMPWB1",135,0)
CHKDATE ;CHECK DATES FOR PROPER FORMAT OF DATE.
"RTN","HMPWB1",136,0)
 N HMPDT
"RTN","HMPWB1",137,0)
 S HMPSTOP=0
"RTN","HMPWB1",138,0)
 S HMPDT=$P($G(DATA("GMRACHT",1)),".",1)
"RTN","HMPWB1",139,0)
 I $L(HMPDT)'=7 D MSG^HMPTOOLS("Date "_HMPDT_" not formatted correctly",2) D ERROR Q
"RTN","HMPWB1",140,0)
 S HMPDT=$P($G(DATA("GMRAORDT")),".",1)
"RTN","HMPWB1",141,0)
 I $L(HMPDT)'=7 D MSG^HMPTOOLS("Date "_HMPDT_" not formatted correctly",2) D ERROR Q
"RTN","HMPWB1",142,0)
 S HMPDT=$P($G(GMRAERRDT),".",1)
"RTN","HMPWB1",143,0)
 I $L(HMPDT)'=7 D MSG^HMPTOOLS("Date "_HMPDT_" not formatted correctly",2) D ERROR Q
"RTN","HMPWB1",144,0)
 Q
"RTN","HMPWB1",145,0)
 ;
"RTN","HMPWB1",146,0)
PARSE ;Parse data string into data elements for EDITSAVE^ORWDAL32
"RTN","HMPWB1",147,0)
 S HMPDFN=$P(DATA,U,2)
"RTN","HMPWB1",148,0)
 S DATA("GMRAERR")=$P(DATA,U,3)
"RTN","HMPWB1",149,0)
 S DATA("GMRAERRBY")=$P(DATA,U,4)
"RTN","HMPWB1",150,0)
 S DATA("GMRAERRDT")=$P(DATA,U,5)
"RTN","HMPWB1",151,0)
 S DATA("GMRAERRCMTS",0)=$P(DATA,U,6)
"RTN","HMPWB1",152,0)
 S DATA("GMRAERRCMTS",1)=$P(DATA,U,7)
"RTN","HMPWB1",153,0)
 Q
"RTN","HMPWB1",154,0)
 ;
"RTN","HMPWB1",155,0)
ERROR ;handle errors generated by MSG^HMPTOOLS
"RTN","HMPWB1",156,0)
 S HMPSTOP=1
"RTN","HMPWB1",157,0)
 S ^TMP("HMP",$J,1,1)=RSLT(1)
"RTN","HMPWB1",158,0)
 S RSLT=$NA(^TMP("HMP",$J))
"RTN","HMPWB1",159,0)
 K RSLT(1)
"RTN","HMPWB1",160,0)
 Q
"RTN","HMPWB1",161,0)
 ;
"RTN","HMPWB1",162,0)
EXTRACT(GLOB) ; Move ^TMP("HMPF",$J) into string format
"RTN","HMPWB1",163,0)
 N HMPSTOP,HMPFND
"RTN","HMPWB1",164,0)
 S RSLT="",X=0,HMPSTOP=0,HMPFND=0
"RTN","HMPWB1",165,0)
 S (I,J)=0
"RTN","HMPWB1",166,0)
 F  S I=$O(^TMP("HMPF",$J,I)) Q:I=""!(HMPSTOP)  D
"RTN","HMPWB1",167,0)
 . F  S J=$O(^TMP("HMPF",$J,I,J)) Q:J=""  D
"RTN","HMPWB1",168,0)
 .. I $G(^TMP("HMPF",$J,I,J))["syncStatus" D
"RTN","HMPWB1",169,0)
 ... Q:$P(^TMP("HMPF",$J,I,J),":",1)["domainTotals"
"RTN","HMPWB1",170,0)
 ... S RSLT(X)=RSLT(X)_$P(^TMP("HMPF",$J,I,J),",",1)
"RTN","HMPWB1",171,0)
 ... S HMPSTOP=1
"RTN","HMPWB1",172,0)
 ... Q
"RTN","HMPWB1",173,0)
 .. Q:$G(^TMP("HMPF",$J,I,J))=""
"RTN","HMPWB1",174,0)
 .. Q:$P(^TMP("HMPF",$J,I,J),",",1)'["allergy"
"RTN","HMPWB1",175,0)
 .. Q:$P(^TMP("HMPF",$J,I,J),",",4)'["localId"
"RTN","HMPWB1",176,0)
 .. Q:$P(^TMP("HMPF",$J,I,J),":",1)["domainTotals"
"RTN","HMPWB1",177,0)
 .. S X=X+1
"RTN","HMPWB1",178,0)
 .. S RSLT(X)=$G(^TMP("HMPF",$J,I,J))
"RTN","HMPWB1",179,0)
 .. F  S J=$O(^TMP("HMPF",$J,I,J)) Q:J=""  D
"RTN","HMPWB1",180,0)
 ... Q:$P(^TMP("HMPF",$J,I,J),":",1)["domainTotals"
"RTN","HMPWB1",181,0)
 ... S X=X+1
"RTN","HMPWB1",182,0)
 ... S RSLT(X)=$G(^TMP("HMPF",$J,I,J))
"RTN","HMPWB1",183,0)
 ... S HMPFND=1
"RTN","HMPWB1",184,0)
 ... Q
"RTN","HMPWB1",185,0)
 .. S I=$O(^TMP("HMPF",$J,I))
"RTN","HMPWB1",186,0)
 .. Q
"RTN","HMPWB1",187,0)
 . Q
"RTN","HMPWB1",188,0)
 Q RSLT
"RTN","HMPWB5A")
1^8^^B30522775
"VER")
8.0^22.0
"BLD",10220,6)
^9
**END**
**END**

