Released HL*1.6*168 SEQ #133
Extracted from mail message
**KIDS**:HL*1.6*168^

**INSTALL NAME**
HL*1.6*168
"BLD",10672,0)
HL*1.6*168^HEALTH LEVEL SEVEN^0^3170807^y
"BLD",10672,1,0)
^^2^2^3170727^
"BLD",10672,1,1,0)
Resolves issue with the HL7 process that a bad value for
"BLD",10672,1,2,0)
HLL("LINKS") would affect subsequent process with HL7
"BLD",10672,4,0)
^9.64PA^^
"BLD",10672,6.3)
6
"BLD",10672,"KRN",0)
^9.67PA^779.2^20
"BLD",10672,"KRN",.4,0)
.4
"BLD",10672,"KRN",.401,0)
.401
"BLD",10672,"KRN",.402,0)
.402
"BLD",10672,"KRN",.403,0)
.403
"BLD",10672,"KRN",.5,0)
.5
"BLD",10672,"KRN",.84,0)
.84
"BLD",10672,"KRN",3.6,0)
3.6
"BLD",10672,"KRN",3.8,0)
3.8
"BLD",10672,"KRN",9.2,0)
9.2
"BLD",10672,"KRN",9.8,0)
9.8
"BLD",10672,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",10672,"KRN",9.8,"NM",1,0)
HLMA^^0^B53206753
"BLD",10672,"KRN",9.8,"NM","B","HLMA",1)

"BLD",10672,"KRN",19,0)
19
"BLD",10672,"KRN",19.1,0)
19.1
"BLD",10672,"KRN",101,0)
101
"BLD",10672,"KRN",409.61,0)
409.61
"BLD",10672,"KRN",771,0)
771
"BLD",10672,"KRN",779.2,0)
779.2
"BLD",10672,"KRN",870,0)
870
"BLD",10672,"KRN",8989.51,0)
8989.51
"BLD",10672,"KRN",8989.52,0)
8989.52
"BLD",10672,"KRN",8994,0)
8994
"BLD",10672,"KRN","B",.4,.4)

"BLD",10672,"KRN","B",.401,.401)

"BLD",10672,"KRN","B",.402,.402)

"BLD",10672,"KRN","B",.403,.403)

"BLD",10672,"KRN","B",.5,.5)

"BLD",10672,"KRN","B",.84,.84)

"BLD",10672,"KRN","B",3.6,3.6)

"BLD",10672,"KRN","B",3.8,3.8)

"BLD",10672,"KRN","B",9.2,9.2)

"BLD",10672,"KRN","B",9.8,9.8)

"BLD",10672,"KRN","B",19,19)

"BLD",10672,"KRN","B",19.1,19.1)

"BLD",10672,"KRN","B",101,101)

"BLD",10672,"KRN","B",409.61,409.61)

"BLD",10672,"KRN","B",771,771)

"BLD",10672,"KRN","B",779.2,779.2)

"BLD",10672,"KRN","B",870,870)

"BLD",10672,"KRN","B",8989.51,8989.51)

"BLD",10672,"KRN","B",8989.52,8989.52)

"BLD",10672,"KRN","B",8994,8994)

"BLD",10672,"QUES",0)
^9.62^^
"BLD",10672,"REQB",0)
^9.611^1^1
"BLD",10672,"REQB",1,0)
HL*1.6*142^1
"BLD",10672,"REQB","B","HL*1.6*142",1)

"MBREQ")
0
"PKG",243,-1)
1^1
"PKG",243,0)
HEALTH LEVEL SEVEN^HL^DHCP IMPLEMENTATION OF HEALTH LEVEL SEVEN
"PKG",243,20,0)
^9.402P^^
"PKG",243,22,0)
^9.49I^1^1
"PKG",243,22,1,0)
1.6^2951013^2981102^66481
"PKG",243,22,1,"PAH",1,0)
168^3170807
"PKG",243,22,1,"PAH",1,1,0)
^^2^2^3170807
"PKG",243,22,1,"PAH",1,1,1,0)
Resolves issue with the HL7 process that a bad value for
"PKG",243,22,1,"PAH",1,1,2,0)
HLL("LINKS") would affect subsequent process with HL7
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","HLMA")
0^1^B53206753^B53088927
"RTN","HLMA",1,0)
HLMA ;AISC/SAW - Message Administration Module ;02/26/2009  15:42
"RTN","HLMA",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**19,43,58,63,66,82,91,109,115,133,132,122,140,142,168**;Oct 13, 1995;Build 6
"RTN","HLMA",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","HLMA",4,0)
GENERATE(HLEID,HLARYTYP,HLFORMAT,HLRESLT,HLMTIEN,HLP) ;
"RTN","HLMA",5,0)
 ;Entry point to generate a deferred message
"RTN","HLMA",6,0)
 ;
"RTN","HLMA",7,0)
 ;This is a subroutine call with parameter passing.  It returns a
"RTN","HLMA",8,0)
 ;value in the variable HLRESLT with 1 to 3 pieces separated by uparrows
"RTN","HLMA",9,0)
 ;as follows:  1st message ID^error code^error description
"RTN","HLMA",10,0)
 ;If no error occurs, only the first piece is returned equal to a unique
"RTN","HLMA",11,0)
 ;ID for the 1st message.  If message was sent to more than 1 subscriber
"RTN","HLMA",12,0)
 ;than the other message IDs will be in the array HLRESLT(n)=ID
"RTN","HLMA",13,0)
 ;Otherwise, three pieces are returned with the
"RTN","HLMA",14,0)
 ;first piece equal to the message ID, if one was assigned, otherwise 0
"RTN","HLMA",15,0)
 ;
"RTN","HLMA",16,0)
 ;Required Input Parameters
"RTN","HLMA",17,0)
 ;     HLEID = Name or IEN of event driver protocol in the Protocol file
"RTN","HLMA",18,0)
 ;  HLARYTYP = Array type.  One of the following codes:
"RTN","HLMA",19,0)
 ;               LM = local array containing a single message
"RTN","HLMA",20,0)
 ;               LB = local array containig a batch of messages
"RTN","HLMA",21,0)
 ;               GM = global array containing a single message
"RTN","HLMA",22,0)
 ;               GB = global array containing a batch of messages
"RTN","HLMA",23,0)
 ;  HLFORMAT = Format of array, 1 for pre-formatted in HL7 format,
"RTN","HLMA",24,0)
 ;               otherwise 0
"RTN","HLMA",25,0)
 ;NOTE:  The parameter HLRESLT must be passed by reference
"RTN","HLMA",26,0)
 ;   HLRESLT = The variable that will be returned to the calling
"RTN","HLMA",27,0)
 ;               application as descibed above
"RTN","HLMA",28,0)
 ;Optional Parameters
"RTN","HLMA",29,0)
 ;   HLMTIEN = IEN of entry in Message Text file where the message
"RTN","HLMA",30,0)
 ;               being generated is to be stored.  This parameter is
"RTN","HLMA",31,0)
 ;               only passed for a batch type message
"RTN","HLMA",32,0)
 ;NOTE:  The parameter HLP used for the following parameters must be
"RTN","HLMA",33,0)
 ;       passed by reference
"RTN","HLMA",34,0)
 ;  HLP("SECURITY") = A 1 to 40 character string
"RTN","HLMA",35,0)
 ;   HLP("CONTPTR") = Continuation pointer, a 1 to 180 character string
"RTN","HLMA",36,0)
 ; HLP("NAMESPACE") = Passed in by application namespace - HL*1.6*91
"RTN","HLMA",37,0)
 ; HLP("EXCLUDE SUBSCRIBER",<n=1,2,3...>)=<subscriber protocol ien> or
"RTN","HLMA",38,0)
 ;   <subscriber protocol name> - A list of protocols to dynamically
"RTN","HLMA",39,0)
 ;   drop from the event protocol's subscriber multiple.
"RTN","HLMA",40,0)
 ;
"RTN","HLMA",41,0)
 ;can't have link open when generating new message
"RTN","HLMA",42,0)
 N HLTCP,HLTCPO,HLPRIO,HLMIDAR
"RTN","HLMA",43,0)
 ; patch HL*1.6*142- to protect application who call this entry
"RTN","HLMA",44,0)
 N HLSUP
"RTN","HLMA",45,0)
 S HLPRIO="D"
"RTN","HLMA",46,0)
 S HLRESLT=""
"RTN","HLMA",47,0)
 ;Check for required parameters
"RTN","HLMA",48,0)
CONT ;
"RTN","HLMA",49,0)
 I $G(HLEID)']""!($G(HLARYTYP)']"")!($G(HLFORMAT)']"") D  G EXIT
"RTN","HLMA",50,0)
 . S HLRESLT="0^7^"_$G(^HL(771.7,7,0))_" at GENERATE^HLMA entry point"
"RTN","HLMA",51,0)
 I 'HLEID S HLEID=$O(^ORD(101,"B",HLEID,0)) I 'HLEID S HLRESLT="0^1^"_$G(^HL(771.7,1,0)) G EXIT
"RTN","HLMA",52,0)
 N HLRESLT1,HLRESLTA S (HLRESLTA,HLRESLT1)=""
"RTN","HLMA",53,0)
 I "GL"'[$E(HLARYTYP) S HLRESLT="0^4^"_$G(^HL(771.7,4,0)) G EXIT
"RTN","HLMA",54,0)
 I $L($G(HLP("SECURITY")))>40 S HLRESLT="0^6^"_$G(^HL(771.7,6,0)) G EXIT
"RTN","HLMA",55,0)
 I $L($G(HLP("CONTPTR")))>180 S HLRESLT="0^11^"_$G(^HL(771.7,11,0)) G EXIT
"RTN","HLMA",56,0)
 I $D(HLL("LINKS")) D  G:$G(HLRESLT)]"" EXIT
"RTN","HLMA",57,0)
 . N I,HLPNAM,HLPIEN,HLLNAM,HLLIEN
"RTN","HLMA",58,0)
 . S I=0
"RTN","HLMA",59,0)
 . F  S I=$O(HLL("LINKS",I)) Q:'I  D  Q:$G(HLRESLT)]""
"RTN","HLMA",60,0)
 . . S HLPNAM=$P(HLL("LINKS",I),U)
"RTN","HLMA",61,0)
 . . S HLPIEN=+$O(^ORD(101,"B",HLPNAM,0))
"RTN","HLMA",62,0)
 . . I $P($G(^ORD(101,HLPIEN,0)),U,4)'="S" S HLRESLT="0^15^Invalid Subscriber Protocol in HLL('LINKS'): "_HLL("LINKS",I) Q
"RTN","HLMA",63,0)
 . . S HLLNAM=$P(HLL("LINKS",I),U,2)
"RTN","HLMA",64,0)
 . . S HLLIEN=+$O(^HLCS(870,"B",HLLNAM,0))
"RTN","HLMA",65,0)
 . . I '$D(^HLCS(870,HLLIEN,0)) S HLRESLT="0^15^Invalid HL Node in HLL('LINKS'): "_HLL("LINKS",I) Q
"RTN","HLMA",66,0)
 ;Extract data from Protocol file
"RTN","HLMA",67,0)
 D EVENT^HLUTIL1(HLEID,"15,20,771",.HLN)
"RTN","HLMA",68,0)
 S HLENROU=$G(HLN(20)),HLEXROU=$G(HLN(15))
"RTN","HLMA",69,0)
 S HLP("GROUTINE")=$G(HLN(771)) K HLN I HLP("GROUTINE")']"",'HLFORMAT S HLRESLT="0^3^"_$G(^HL(771.7,3,0)) G EXIT
"RTN","HLMA",70,0)
 ;Create message ID and Message Text IEN if Message Text IEN not
"RTN","HLMA",71,0)
 ;previously created ('$G(HLMTIEN))
"RTN","HLMA",72,0)
 I '$G(HLMTIEN) D CREATE^HLTF(.HLMID,.HLMTIEN,.HLDT,.HLDT1)
"RTN","HLMA",73,0)
 ;Get message ID if Message Text IEN already created
"RTN","HLMA",74,0)
 I '$G(HLMID) D
"RTN","HLMA",75,0)
 .S HLDT=$G(^HL(772,HLMTIEN,0)),HLMID=$P(HLDT,"^",6),HLDT=+HLDT
"RTN","HLMA",76,0)
 .S HLDT1=$$HLDATE^HLFNC(HLDT)
"RTN","HLMA",77,0)
 S HLMIDAR=0,HLRESLT=HLMID,HLP("DT")=HLDT,HLP("DTM")=HLDT1
"RTN","HLMA",78,0)
 ;Execute entry action for event driver protocol
"RTN","HLMA",79,0)
 I HLENROU]"" X HLENROU
"RTN","HLMA",80,0)
 ;Invoke transaction processor
"RTN","HLMA",81,0)
 K HLDT,HLDT1,HLENROU
"RTN","HLMA",82,0)
 D GENERATE^HLTP(HLMID,HLMTIEN,HLEID,HLARYTYP,HLFORMAT,.HLRESLT1,.HLP)
"RTN","HLMA",83,0)
 ;HLMIDAR is array of message IDs, only set for broadcast messages
"RTN","HLMA",84,0)
 I HLMIDAR K HLMIDAR("N") M HLRESLT=HLMIDAR
"RTN","HLMA",85,0)
 S HLRESLT=HLRESLT_"^"_HLRESLT1
"RTN","HLMA",86,0)
 ;
"RTN","HLMA",87,0)
 ; patch HL*1.6*122
"RTN","HLMA",88,0)
 S HLRESLT("HLMID")=$G(HLMIDAR("HLMID"))
"RTN","HLMA",89,0)
 S HLRESLT("IEN773")=$G(HLMIDAR("IEN773"))
"RTN","HLMA",90,0)
 ;
"RTN","HLMA",91,0)
 ;Execute exit action for event driver protocol
"RTN","HLMA",92,0)
 I HLEXROU]"" X HLEXROU
"RTN","HLMA",93,0)
EXIT ;Update status if Message Text file entry has been created
"RTN","HLMA",94,0)
 K HLTCP
"RTN","HLMA",95,0)
 I $D(HLMTIEN) D STATUS^HLTF0(HLMTIEN,$S($P(HLRESLT,"^",2):4,1:3),$S($P(HLRESLT,"^",2):$P(HLRESLT,"^",2),1:""),$S($P(HLRESLT,"^",2):$P(HLRESLT,"^",3),1:""))
"RTN","HLMA",96,0)
 K HLDT,HLDT1,HLMID,HLRESLT1,HLENROU,HLEXROU,HLL("LINKS")
"RTN","HLMA",97,0)
 Q
"RTN","HLMA",98,0)
DIRECT(HLEID,HLARYTYP,HLFORMAT,HLRESLT,HLMTIENO,HLP) ;
"RTN","HLMA",99,0)
 ;Entry point to generate an immediate message, must be TCP Logical Link
"RTN","HLMA",100,0)
 ;Input:
"RTN","HLMA",101,0)
 ;  The same as GENERATE,with one additional subscript to the HLP input 
"RTN","HLMA",102,0)
 ;  array:
"RTN","HLMA",103,0)
 ; 
"RTN","HLMA",104,0)
 ;  HLP("OPEN TIMEOUT") (optional, pass by reference) a number between 
"RTN","HLMA",105,0)
 ;    1 and 120 that specifies how many seconds the DIRECT CONNECT should
"RTN","HLMA",106,0)
 ;    try to open a connection before failing.  It is killed upon 
"RTN","HLMA",107,0)
 ;    completion.
"RTN","HLMA",108,0)
 ; 
"RTN","HLMA",109,0)
 N HLTCP,HLTCPO,HLPRIO,HLSAN,HLN,HLMIDAR,HLMTIENR,ZMID,HLDIRECT
"RTN","HLMA",110,0)
 ; patch HL*1.6*140- to protect application who call this entry
"RTN","HLMA",111,0)
 N IO,IOF,ION,IOT,IOST,POP
"RTN","HLMA",112,0)
 S HLRESLT=""
"RTN","HLMA",113,0)
 ;HLMTIENO=ien passed in, batch message
"RTN","HLMA",114,0)
 S HLMTIEN=$G(HLMTIENO)
"RTN","HLMA",115,0)
 I $G(HLP("OPEN TIMEOUT")),((HLP("OPEN TIMEOUT")\1)'=+HLP("OPEN TIMEOUT"))!HLP("OPEN TIMEOUT")>120 Q "0^4^INVALID OPEN TIMEOUT PARAMETER"
"RTN","HLMA",116,0)
 I $G(HLP("OPEN TIMEOUT")) D
"RTN","HLMA",117,0)
 .S HLDIRECT("OPEN TIMEOUT")=HLP("OPEN TIMEOUT")
"RTN","HLMA",118,0)
 .K HLP("OPEN TIMEOUT")
"RTN","HLMA",119,0)
 K HL,HLMTIENO
"RTN","HLMA",120,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","HLMA",121,0)
 I $G(HL) S HLRESLT="0^"_HL Q
"RTN","HLMA",122,0)
 S HLPRIO="I" D CONT
"RTN","HLMA",123,0)
 ;HLMTIENO=original msg. ien in file 772, HLMTIENR=response ien set in HLMA2
"RTN","HLMA",124,0)
 S HLMTIENO=HLMTIEN,HLMTIEN=$G(HLMTIENR)
"RTN","HLMA",125,0)
 ;Set special HL variables
"RTN","HLMA",126,0)
 S HLQUIT=0,HLNODE="",HLNEXT="D HLNEXT^HLCSUTL"
"RTN","HLMA",127,0)
 Q
"RTN","HLMA",128,0)
 ;
"RTN","HLMA",129,0)
CLOSE(LOGLINK) ;close connection that was open in tag DIRECT
"RTN","HLMA",130,0)
 Q
"RTN","HLMA",131,0)
PING ;ping another VAMC to test Link
"RTN","HLMA",132,0)
 ;set HLQUIET =1 to skip writes
"RTN","HLMA",133,0)
 ;look for HLTPUT to get turnaround time over network.
"RTN","HLMA",134,0)
 N DA,DIC,HLDP,HLDPNM,HLDPDM,HLCSOUT,HLDBSIZE,HLDREAD,HLOS,HLTCPADD,HLTCPCS,HLTCPLNK,HLTCPORT,HLTCPRET,HLCSFAIL,HLPARAM
"RTN","HLMA",135,0)
 N HCS,HCSCMD,HLCS,HCSDAT,HCSER,HCSEXIT,HCSTRACE,HLDT1,HLDRETR,HLRETRA,HLDBACK,HLDWAIT,HLTCPCS,INPUT,OUTPUT,POP,X,Y,HLX1,HLX2
"RTN","HLMA",136,0)
 S HLQUIET=$G(HLQUIET)
"RTN","HLMA",137,0)
 S HLCS="",HCSTRACE="C: ",POP=1,INPUT="INPUT",OUTPUT="OUTPUT"
"RTN","HLMA",138,0)
 S DIC="^HLCS(870,",DIC(0)="QEAMZ"
"RTN","HLMA",139,0)
 D ^DIC Q:Y<0
"RTN","HLMA",140,0)
 S HLDP=+Y,HLDPNM=Y(0,0),HLDPDM=$P($$PARAM^HLCS2,U,2)
"RTN","HLMA",141,0)
 ;I $P($G(^HLCS(870,HLDP,400)),U)="" W !,"Missing IP Address" Q
"RTN","HLMA",142,0)
 D SETUP^HLCSAC G:HLCS PINGQ
"RTN","HLMA",143,0)
 ; patch HL*1.6*122
"RTN","HLMA",144,0)
 G:$$DONTPING^HLMA4 PINGQ
"RTN","HLMA",145,0)
 ;PING header=MSH^PING^domain^PING^logical link^datetime
"RTN","HLMA",146,0)
 S INPUT(1)="MSH^PING^"_HLDPDM_"^PING^"_HLDPNM_"^"_$$HTE^XLFDT($H)
"RTN","HLMA",147,0)
 D OPEN^HLCSAC
"RTN","HLMA",148,0)
 I HLCS D DNS G:HLCS PINGQ
"RTN","HLMA",149,0)
 D
"RTN","HLMA",150,0)
 . N $ETRAP,$ESTACK S $ETRAP="D PINGERR^HLMA"
"RTN","HLMA",151,0)
 . ;non-standard HL7 header; start block,header,end block
"RTN","HLMA",152,0)
 . S HLX1=$H
"RTN","HLMA",153,0)
 . ;
"RTN","HLMA",154,0)
 . ; HL*1.6*122 start
"RTN","HLMA",155,0)
 . ; replace flush character '!' with @IOF (! or #)
"RTN","HLMA",156,0)
 . ; W $C(11)_INPUT(1)_$C(28)_$C(13),! ;HL*1.6*115, restored ! char
"RTN","HLMA",157,0)
 . ; patch HL*1.6*140, flush character- HLTCPLNK("IOF")
"RTN","HLMA",158,0)
 . ; W $C(11)_INPUT(1)_$C(28)_$C(13),@IOF
"RTN","HLMA",159,0)
 . W $C(11)_INPUT(1)_$C(28)_$C(13),@HLTCPLNK("IOF")
"RTN","HLMA",160,0)
 . ; HL*1.6*122 end
"RTN","HLMA",161,0)
 . ;
"RTN","HLMA",162,0)
 . ;read response
"RTN","HLMA",163,0)
 . R X:HLDREAD
"RTN","HLMA",164,0)
 . S HLX2=$H
"RTN","HLMA",165,0)
 . S X=$P(X,$C(28)),HLCS=$S(X=INPUT(1):"PING worked",X="":"No response",1:"Incorrect response")
"RTN","HLMA",166,0)
 . ;Get roundtrip time
"RTN","HLMA",167,0)
 . K HLTPUT I X]"" S HLTPUT=$$HDIFF^XLFDT(HLX2,HLX1,2)
"RTN","HLMA",168,0)
 D CLOSE^%ZISTCP
"RTN","HLMA",169,0)
PINGQ ;write back status and quit
"RTN","HLMA",170,0)
 I 'HLQUIET W !,HLCS,!
"RTN","HLMA",171,0)
 Q
"RTN","HLMA",172,0)
PINGERR ;process errors from PING
"RTN","HLMA",173,0)
 S $ETRAP="G UNWIND^%ZTER",HLCS="-1^Error"
"RTN","HLMA",174,0)
 ;I $ZE["READ" S HLCS="-1^Error during read"
"RTN","HLMA",175,0)
 ;I $ZE["WRITE" S HLCS="-1^Error during write"
"RTN","HLMA",176,0)
 ; HL*1.6*115, SACC compliance
"RTN","HLMA",177,0)
 I $$EC^%ZOSV["READ" S HLCS="-1^Error during read"
"RTN","HLMA",178,0)
 I $$EC^%ZOSV["WRITE" S HLCS="-1^Error during write"
"RTN","HLMA",179,0)
 G UNWIND^%ZTER
"RTN","HLMA",180,0)
DNS ;
"RTN","HLMA",181,0)
 ;openfail-try DNS lookup-Link must contain point to Domain Name
"RTN","HLMA",182,0)
 S POP=$G(POP)
"RTN","HLMA",183,0)
 S HLQUIET=$G(HLQUIET)
"RTN","HLMA",184,0)
 I 'HLQUIET W !,"Calling DNS"
"RTN","HLMA",185,0)
 N HLDOM,HLIP S HLCS=""
"RTN","HLMA",186,0)
 S HLDOM=$P(^HLCS(870,HLDP,0),U,7)
"RTN","HLMA",187,0)
 ; patch HL*1.6*122 start
"RTN","HLMA",188,0)
 S HLDOM("DNS")=$P($G(^HLCS(870,+$G(HLDP),0)),"^",8)
"RTN","HLMA",189,0)
 ; I 'HLDOM,'HLQUIET W !,"Domain Unknown" Q
"RTN","HLMA",190,0)
 I 'HLDOM,($L(HLDOM("DNS"),".")<3) D  Q
"RTN","HLMA",191,0)
 . I 'HLQUIET W !,"Domain Unknown"
"RTN","HLMA",192,0)
 . S HLCS="-1^Connection Fail"
"RTN","HLMA",193,0)
 ; patch HL*1.6*122 end
"RTN","HLMA",194,0)
 I HLDOM S HLDOM=$P(^DIC(4.2,HLDOM,0),U)
"RTN","HLMA",195,0)
 ; patch HL*1.6*122
"RTN","HLMA",196,0)
 ; I HLDOM]"" D  Q:'POP
"RTN","HLMA",197,0)
 I HLDOM]""!($L(HLDOM("DNS"),".")>2) D  Q:'POP
"RTN","HLMA",198,0)
 . I HLDOM["DOMAIN.EXT"&(HLDOM'[".MED.") S HLDOM=$P(HLDOM,".DOMAIN.EXT")_".DOMAIN.EXT"
"RTN","HLMA",199,0)
 . I HLTCPORT=5000 S HLDOM="HL7."_HLDOM
"RTN","HLMA",200,0)
 . I HLTCPORT=5500 S HLDOM="MPI."_HLDOM
"RTN","HLMA",201,0)
 . ; patch HL*1.6*122
"RTN","HLMA",202,0)
 . I ($L(HLDOM("DNS"),".")>2) S HLDOM=HLDOM("DNS")
"RTN","HLMA",203,0)
 . I 'HLQUIET W !,"Domain, "_HLDOM
"RTN","HLMA",204,0)
 . I 'HLQUIET W !,"Port: ",HLTCPORT
"RTN","HLMA",205,0)
 . S HLIP=$$ADDRESS^XLFNSLK(HLDOM)
"RTN","HLMA",206,0)
 . I HLIP]"",'HLQUIET W !,"DNS Returned: ",HLIP
"RTN","HLMA",207,0)
 . I HLIP]"" D
"RTN","HLMA",208,0)
 . . ;If more than one IP returned, try each, cache successful open
"RTN","HLMA",209,0)
 . . N HLI,HLJ,HLIP1
"RTN","HLMA",210,0)
 . . F HLJ=1:1:$L(HLIP,",") D  Q:'POP
"RTN","HLMA",211,0)
 . . . S HLIP1=$P(HLIP,",",HLJ)
"RTN","HLMA",212,0)
 . . . F HLI=1:1:HLDRETR W:'HLQUIET !,"Trying ",HLIP1 D CALL^%ZISTCP(HLIP1,HLTCPORT,1) Q:'POP
"RTN","HLMA",213,0)
 . . . I 'POP S $P(^HLCS(870,HLDP,400),U)=HLIP1
"RTN","HLMA",214,0)
 . . . U IO
"RTN","HLMA",215,0)
 I POP S HLCS="-1^DNS Lookup Failed"
"VER")
8.0^22.2
"BLD",10672,6)
^133
**END**
**END**

