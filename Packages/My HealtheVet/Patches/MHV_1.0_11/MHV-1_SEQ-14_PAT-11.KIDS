Released MHV*1*11 SEQ #14
Extracted from mail message
**KIDS**:MHV*1.0*11^

**INSTALL NAME**
MHV*1.0*11
"BLD",8068,0)
MHV*1.0*11^^0^3150508^y
"BLD",8068,4,0)
^9.64PA^^
"BLD",8068,6)
2^
"BLD",8068,6.3)
61
"BLD",8068,"INI")
PRE^MHV1P11
"BLD",8068,"INIT")
POST^MHV1P11
"BLD",8068,"KRN",0)
^9.67PA^779.2^20
"BLD",8068,"KRN",.4,0)
.4
"BLD",8068,"KRN",.401,0)
.401
"BLD",8068,"KRN",.402,0)
.402
"BLD",8068,"KRN",.403,0)
.403
"BLD",8068,"KRN",.5,0)
.5
"BLD",8068,"KRN",.84,0)
.84
"BLD",8068,"KRN",3.6,0)
3.6
"BLD",8068,"KRN",3.8,0)
3.8
"BLD",8068,"KRN",9.2,0)
9.2
"BLD",8068,"KRN",9.2,"NM",0)
^9.68A^^
"BLD",8068,"KRN",9.8,0)
9.8
"BLD",8068,"KRN",9.8,"NM",0)
^9.68A^16^15
"BLD",8068,"KRN",9.8,"NM",2,0)
MHVUMRPC^^0^B45400823
"BLD",8068,"KRN",9.8,"NM",3,0)
MHVECFLR^^0^B18917133
"BLD",8068,"KRN",9.8,"NM",4,0)
MHVXWLC^^0^B54155667
"BLD",8068,"KRN",9.8,"NM",5,0)
MHV7B1M^^0^B5731809
"BLD",8068,"KRN",9.8,"NM",6,0)
MHV7R5^^0^B59299647
"BLD",8068,"KRN",9.8,"NM",7,0)
MHV7B1N^^0^B2734081
"BLD",8068,"KRN",9.8,"NM",8,0)
MHV7B1O^^0^B2738736
"BLD",8068,"KRN",9.8,"NM",9,0)
MHV7B1K^^0^B5337379
"BLD",8068,"KRN",9.8,"NM",10,0)
MHV7R6^^0^B26508627
"BLD",8068,"KRN",9.8,"NM",11,0)
MHV7B1L^^0^B4089241
"BLD",8068,"KRN",9.8,"NM",12,0)
MHV7B1P^^0^B2403781
"BLD",8068,"KRN",9.8,"NM",13,0)
MHV7B10^^0^B2415319
"BLD",8068,"KRN",9.8,"NM",14,0)
MHV7R7^^0^B33211332
"BLD",8068,"KRN",9.8,"NM",15,0)
MHV1P11^^0^B113081022
"BLD",8068,"KRN",9.8,"NM",16,0)
MHVXPAT^^0^B69409778
"BLD",8068,"KRN",9.8,"NM","B","MHV1P11",15)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B10",13)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1K",9)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1L",11)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1M",5)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1N",7)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1O",8)

"BLD",8068,"KRN",9.8,"NM","B","MHV7B1P",12)

"BLD",8068,"KRN",9.8,"NM","B","MHV7R5",6)

"BLD",8068,"KRN",9.8,"NM","B","MHV7R6",10)

"BLD",8068,"KRN",9.8,"NM","B","MHV7R7",14)

"BLD",8068,"KRN",9.8,"NM","B","MHVECFLR",3)

"BLD",8068,"KRN",9.8,"NM","B","MHVUMRPC",2)

"BLD",8068,"KRN",9.8,"NM","B","MHVXPAT",16)

"BLD",8068,"KRN",9.8,"NM","B","MHVXWLC",4)

"BLD",8068,"KRN",19,0)
19
"BLD",8068,"KRN",19,"NM",0)
^9.68A^^
"BLD",8068,"KRN",19.1,0)
19.1
"BLD",8068,"KRN",101,0)
101
"BLD",8068,"KRN",101,"NM",0)
^9.68A^12^12
"BLD",8068,"KRN",101,"NM",1,0)
MHVSM QBP-Q13 Event Driver^^0
"BLD",8068,"KRN",101,"NM",2,0)
MHVSM QBP-Q13 Subscriber^^0
"BLD",8068,"KRN",101,"NM",3,0)
MHVSM RTB-K13 Event Driver^^0
"BLD",8068,"KRN",101,"NM",4,0)
MHVSM RTB-K13 Subscriber^^0
"BLD",8068,"KRN",101,"NM",5,0)
MHVSM QBP-Q11 Event Driver^^0
"BLD",8068,"KRN",101,"NM",6,0)
MHVSM QBP-Q11 Subscriber^^0
"BLD",8068,"KRN",101,"NM",7,0)
MHVSM RSP-K11 Event Driver^^0
"BLD",8068,"KRN",101,"NM",8,0)
MHVSM RSP-K11 Subscriber^^0
"BLD",8068,"KRN",101,"NM",9,0)
MHVSM DFT-P03 Event Driver^^0
"BLD",8068,"KRN",101,"NM",10,0)
MHVSM DFT-P03 Subscriber^^0
"BLD",8068,"KRN",101,"NM",11,0)
MHVSM ACK-P03 Subscriber^^0
"BLD",8068,"KRN",101,"NM",12,0)
MHVSM ACK-P03 Event Driver^^0
"BLD",8068,"KRN",101,"NM","B","MHVSM ACK-P03 Event Driver",12)

"BLD",8068,"KRN",101,"NM","B","MHVSM ACK-P03 Subscriber",11)

"BLD",8068,"KRN",101,"NM","B","MHVSM DFT-P03 Event Driver",9)

"BLD",8068,"KRN",101,"NM","B","MHVSM DFT-P03 Subscriber",10)

"BLD",8068,"KRN",101,"NM","B","MHVSM QBP-Q11 Event Driver",5)

"BLD",8068,"KRN",101,"NM","B","MHVSM QBP-Q11 Subscriber",6)

"BLD",8068,"KRN",101,"NM","B","MHVSM QBP-Q13 Event Driver",1)

"BLD",8068,"KRN",101,"NM","B","MHVSM QBP-Q13 Subscriber",2)

"BLD",8068,"KRN",101,"NM","B","MHVSM RSP-K11 Event Driver",7)

"BLD",8068,"KRN",101,"NM","B","MHVSM RSP-K11 Subscriber",8)

"BLD",8068,"KRN",101,"NM","B","MHVSM RTB-K13 Event Driver",3)

"BLD",8068,"KRN",101,"NM","B","MHVSM RTB-K13 Subscriber",4)

"BLD",8068,"KRN",409.61,0)
409.61
"BLD",8068,"KRN",771,0)
771
"BLD",8068,"KRN",779.2,0)
779.2
"BLD",8068,"KRN",870,0)
870
"BLD",8068,"KRN",8989.51,0)
8989.51
"BLD",8068,"KRN",8989.52,0)
8989.52
"BLD",8068,"KRN",8994,0)
8994
"BLD",8068,"KRN",8994,"NM",0)
^9.68A^^0
"BLD",8068,"KRN","B",.4,.4)

"BLD",8068,"KRN","B",.401,.401)

"BLD",8068,"KRN","B",.402,.402)

"BLD",8068,"KRN","B",.403,.403)

"BLD",8068,"KRN","B",.5,.5)

"BLD",8068,"KRN","B",.84,.84)

"BLD",8068,"KRN","B",3.6,3.6)

"BLD",8068,"KRN","B",3.8,3.8)

"BLD",8068,"KRN","B",9.2,9.2)

"BLD",8068,"KRN","B",9.8,9.8)

"BLD",8068,"KRN","B",19,19)

"BLD",8068,"KRN","B",19.1,19.1)

"BLD",8068,"KRN","B",101,101)

"BLD",8068,"KRN","B",409.61,409.61)

"BLD",8068,"KRN","B",771,771)

"BLD",8068,"KRN","B",779.2,779.2)

"BLD",8068,"KRN","B",870,870)

"BLD",8068,"KRN","B",8989.51,8989.51)

"BLD",8068,"KRN","B",8989.52,8989.52)

"BLD",8068,"KRN","B",8994,8994)

"INI")
PRE^MHV1P11
"INIT")
POST^MHV1P11
"KRN",101,7118,-1)
0^6
"KRN",101,7118,0)
MHVSM QBP-Q11 Subscriber^MHVSM QBP-Q11 Subscriber^^S^^^^^^^^
"KRN",101,7118,99)
63680,34202
"KRN",101,7118,770)
^MHV VISTA^^K11^^^MHVVA^^^^RSP
"KRN",101,7118,771)
D QBPQ11^MHV7R5
"KRN",101,7118,773)
1^0^0
"KRN",101,7122,-1)
0^7
"KRN",101,7122,0)
MHVSM RSP-K11 Event Driver^^^E^^^^^^^^
"KRN",101,7122,770)
MHV VISTA^^RSP^K11^182^^^AL^NE^2.4^
"KRN",101,7122,775,0)
^101.0775PA^1^1
"KRN",101,7122,775,1,0)
7123
"KRN",101,7122,775,1,"^")
MHVSM RSP-K11 Subscriber
"KRN",101,7123,-1)
0^8
"KRN",101,7123,0)
MHVSM RSP-K11 Subscriber^^^S^^^^^^^^
"KRN",101,7123,770)
^MHV SM^^K11^^^MHVVA^^^^RSP
"KRN",101,7123,773)
1^1^0
"KRN",101,7125,-1)
0^5
"KRN",101,7125,0)
MHVSM QBP-Q11 Event Driver^MHVSM QBP-Q11 Event Driver^^E^^^^^^^^
"KRN",101,7125,99)
63680,34202
"KRN",101,7125,770)
MHV SM^^QBP^Q11^164^^^^^2.4^
"KRN",101,7125,775,0)
^101.0775PA^1^1
"KRN",101,7125,775,1,0)
7118
"KRN",101,7125,775,1,"^")
MHVSM QBP-Q11 Subscriber
"KRN",101,7330,-1)
0^2
"KRN",101,7330,0)
MHVSM QBP-Q13 Subscriber^^^S^^^^^^^^
"KRN",101,7330,4)
^^^MHVSM QBP-Q13 Subscriber
"KRN",101,7330,99)
62853,4324
"KRN",101,7330,770)
^MHV VISTA^^K13^^^^^^2.4^RTB
"KRN",101,7330,771)
D QBPQ13^MHV7R6
"KRN",101,7330,773)
1^1^0
"KRN",101,7331,-1)
0^1
"KRN",101,7331,0)
MHVSM QBP-Q13 Event Driver^^^E^^^^^^^^
"KRN",101,7331,4)
^^^MHVSM QBP-Q13 Event Driver
"KRN",101,7331,99)
62853,7568
"KRN",101,7331,770)
MHV SM^^QBP^Q13^165^^^^^2.4^
"KRN",101,7331,775,0)
^101.0775PA^1^1
"KRN",101,7331,775,1,0)
7330
"KRN",101,7331,775,1,"^")
MHVSM QBP-Q13 Subscriber
"KRN",101,7332,-1)
0^4
"KRN",101,7332,0)
MHVSM RTB-K13 Subscriber^^^S^^^^^^^^
"KRN",101,7332,4)
^^^MHVSM RTB-K13 Subscriber
"KRN",101,7332,99)
62853,55128
"KRN",101,7332,770)
^MHV SM^^K13^^^MHVVA^^^^RTB
"KRN",101,7332,773)
1^1^0
"KRN",101,7333,-1)
0^3
"KRN",101,7333,0)
MHVSM RTB-K13 Event Driver^^^E^^^^^^^^
"KRN",101,7333,4)
^^^MHVSM RTB-K13 Event Driver
"KRN",101,7333,99)
62853,55318
"KRN",101,7333,770)
MHV VISTA^^RTB^K13^175^^^AL^NE^2.4^
"KRN",101,7333,775,0)
^101.0775PA^1^1
"KRN",101,7333,775,1,0)
7332
"KRN",101,7333,775,1,"^")
MHVSM RTB-K13 Subscriber
"KRN",101,7334,-1)
0^9
"KRN",101,7334,0)
MHVSM DFT-P03 Event Driver^MHVSM DFT-P03 Event Driver^^E^^^^^^^^
"KRN",101,7334,99)
63680,34202
"KRN",101,7334,770)
MHV SM^^DFT^P03^26^^^^^2.4^
"KRN",101,7334,775,0)
^101.0775PA^1^1
"KRN",101,7334,775,1,0)
7335
"KRN",101,7334,775,1,"^")
MHVSM DFT-P03 Subscriber
"KRN",101,7335,-1)
0^10
"KRN",101,7335,0)
MHVSM DFT-P03 Subscriber^MHVSM DFT-P03 Subscriber^^S^^^^^^^^
"KRN",101,7335,99)
63680,34202
"KRN",101,7335,770)
^MHV VISTA^^P03^^^MHVVA^^^^ACK
"KRN",101,7335,771)
D DFTP03^MHV7R7
"KRN",101,7335,773)
1^0^0
"KRN",101,7336,-1)
0^12
"KRN",101,7336,0)
MHVSM ACK-P03 Event Driver^^^E^^^^^^^^
"KRN",101,7336,770)
MHV VISTA^^ACK^P03^122^^^AL^NE^2.4^
"KRN",101,7336,775,0)
^101.0775PA^1^1
"KRN",101,7336,775,1,0)
7337
"KRN",101,7336,775,1,"^")
MHVSM ACK-P03 Subscriber
"KRN",101,7337,-1)
0^11
"KRN",101,7337,0)
MHVSM ACK-P03 Subscriber^^^S^^^^^^^^
"KRN",101,7337,770)
^MHV SM^^P03^^^MHVVA^^^^ACK
"KRN",101,7337,773)
1^1^0
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
15
"RTN","MHV1P11")
0^15^B113081022^n/a
"RTN","MHV1P11",1,0)
MHV1P11 ;KUM - My HealtheVet Install Utility Routine ; [1/15/13 15:01pm]
"RTN","MHV1P11",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV1P11",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV1P11",4,0)
 ;
"RTN","MHV1P11",5,0)
 ;  Integration Agreements:
"RTN","MHV1P11",6,0)
 ;        10141 : BMES^XPDUTL
"RTN","MHV1P11",7,0)
 ;              : MES^XPDUTL
"RTN","MHV1P11",8,0)
 ;        10018 : UPDATE^DIE
"RTN","MHV1P11",9,0)
 ;        10103 : $$FMTH^XLFDT
"RTN","MHV1P11",10,0)
 ;              : $$HTFM^XLFDT
"RTN","MHV1P11",11,0)
 ;              : $$NOW^XLFDT
"RTN","MHV1P11",12,0)
 ;
"RTN","MHV1P11",13,0)
ENV ;
"RTN","MHV1P11",14,0)
 Q
"RTN","MHV1P11",15,0)
 ;
"RTN","MHV1P11",16,0)
PRE ; Pre-init routine
"RTN","MHV1P11",17,0)
 ; Turn on MHV Application Logging, add a log entry for the start
"RTN","MHV1P11",18,0)
 ; of the patch install.
"RTN","MHV1P11",19,0)
 D LOGON
"RTN","MHV1P11",20,0)
 D LOG^MHVUL2(XPDNM,"PRE-INIT","S","TRACE")
"RTN","MHV1P11",21,0)
 S ERR=""
"RTN","MHV1P11",22,0)
 S MHVC=0
"RTN","MHV1P11",23,0)
 D LOG^MHVUL2("CHECK","INSTITUTION","S","TRACE")
"RTN","MHV1P11",24,0)
 D CHKHLOC(.ERR)
"RTN","MHV1P11",25,0)
 I ERR'="" D
"RTN","MHV1P11",26,0)
 . D LOG^MHVUL2("CHECK INSTITUTION",ERR,"S","ERROR")
"RTN","MHV1P11",27,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",28,0)
 . D MES^XPDUTL("     Please log a remedy ticket to check INSTITUTION and DIVISION in Hospital Location File.")
"RTN","MHV1P11",29,0)
 . D BMES^XPDUTL("     This install will now abort.  Only attempt to re-install when ")
"RTN","MHV1P11",30,0)
 . D MES^XPDUTL("     corrective action has been taken.")
"RTN","MHV1P11",31,0)
 . S XPDABORT=2
"RTN","MHV1P11",32,0)
 . Q
"RTN","MHV1P11",33,0)
 D LOG^MHVUL2(XPDNM,"PRE-INIT END","S","TRACE")
"RTN","MHV1P11",34,0)
 Q
"RTN","MHV1P11",35,0)
 ;
"RTN","MHV1P11",36,0)
POST ; Post-init routine
"RTN","MHV1P11",37,0)
 N ERR
"RTN","MHV1P11",38,0)
 D LOG^MHVUL2(XPDNM,"POST-INIT BEGIN","S","TRACE")
"RTN","MHV1P11",39,0)
 ;
"RTN","MHV1P11",40,0)
 D QRYDSS
"RTN","MHV1P11",41,0)
 D QRYPROC
"RTN","MHV1P11",42,0)
 D QRYECLS
"RTN","MHV1P11",43,0)
 D QRYPPRB
"RTN","MHV1P11",44,0)
 D QRYDIAG
"RTN","MHV1P11",45,0)
 D QRYFILE
"RTN","MHV1P11",46,0)
 D RSPQ13
"RTN","MHV1P11",47,0)
 D RSPQ11
"RTN","MHV1P11",48,0)
 D RSPP03
"RTN","MHV1P11",49,0)
 ;
"RTN","MHV1P11",50,0)
 D LOG^MHVUL2(XPDNM,"POST-INIT END","S","TRACE")
"RTN","MHV1P11",51,0)
 D LOGOFF
"RTN","MHV1P11",52,0)
 D RESET^MHVUL2
"RTN","MHV1P11",53,0)
 Q
"RTN","MHV1P11",54,0)
 ;
"RTN","MHV1P11",55,0)
LOGON ; Turn on MHV application logging
"RTN","MHV1P11",56,0)
 N UPDATE,SUCCESS
"RTN","MHV1P11",57,0)
 D BMES^XPDUTL("     Turning on MHV Application Logging")
"RTN","MHV1P11",58,0)
 S UPDATE("STATE")=1
"RTN","MHV1P11",59,0)
 S UPDATE("DELETE")=$$HTFM^XLFDT($H+60)
"RTN","MHV1P11",60,0)
 S UPDATE("LEVEL")="DEBUG"
"RTN","MHV1P11",61,0)
 D LOGSET^MHVUL1(.SUCCESS,.UPDATE)
"RTN","MHV1P11",62,0)
 Q
"RTN","MHV1P11",63,0)
 ;
"RTN","MHV1P11",64,0)
LOGOFF ; Turn off MHV application logging
"RTN","MHV1P11",65,0)
 N SUCCESS
"RTN","MHV1P11",66,0)
 D BMES^XPDUTL("     Turning off MHV Application Logging")
"RTN","MHV1P11",67,0)
 D LOGOFF^MHVUL1(.SUCCESS)
"RTN","MHV1P11",68,0)
 Q
"RTN","MHV1P11",69,0)
 ;
"RTN","MHV1P11",70,0)
QRYDSS ; Setup for DSS Units query
"RTN","MHV1P11",71,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",72,0)
 ;
"RTN","MHV1P11",73,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMDSSUNITS   ")
"RTN","MHV1P11",74,0)
 N FIELDS,ERR
"RTN","MHV1P11",75,0)
 S ERR=""
"RTN","MHV1P11",76,0)
 S FIELDS("REQUEST TYPE")="SMDSSUNITS"
"RTN","MHV1P11",77,0)
 S FIELDS("NUMBER")=44
"RTN","MHV1P11",78,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",79,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",80,0)
 S FIELDS("DATATYPE")="SMDSSUnitsByProviderAndClinic"
"RTN","MHV1P11",81,0)
 S FIELDS("EXECUTE")="SPDSS~MHVXWLC"
"RTN","MHV1P11",82,0)
 S FIELDS("BUILDER")="MHV7B1K"
"RTN","MHV1P11",83,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q13 query for DSS Units information."
"RTN","MHV1P11",84,0)
 S FIELDS("DESCRIPTION",2)="Specify Provider DUZ and Associated Clinic."
"RTN","MHV1P11",85,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",86,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",87,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",88,0)
 I ERR'="" D
"RTN","MHV1P11",89,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",90,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",91,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",92,0)
 . Q
"RTN","MHV1P11",93,0)
 ;
"RTN","MHV1P11",94,0)
QRYPROC ; Setup for ECS Procedures query
"RTN","MHV1P11",95,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",96,0)
 ;
"RTN","MHV1P11",97,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMECSPROCS   ")
"RTN","MHV1P11",98,0)
 N FIELDS,ERR
"RTN","MHV1P11",99,0)
 S ERR=""
"RTN","MHV1P11",100,0)
 S FIELDS("REQUEST TYPE")="SMECSPROCS"
"RTN","MHV1P11",101,0)
 S FIELDS("NUMBER")=45
"RTN","MHV1P11",102,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",103,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",104,0)
 S FIELDS("DATATYPE")="SMECSProcedures"
"RTN","MHV1P11",105,0)
 S FIELDS("EXECUTE")="SPECS~MHVXWLC"
"RTN","MHV1P11",106,0)
 S FIELDS("BUILDER")="MHV7B1L"
"RTN","MHV1P11",107,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q13 query for ECS Procedures information."
"RTN","MHV1P11",108,0)
 S FIELDS("DESCRIPTION",2)="Specify DSS Unit IEN and Location IEN."
"RTN","MHV1P11",109,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",110,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",111,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",112,0)
 I ERR'="" D
"RTN","MHV1P11",113,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",114,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",115,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",116,0)
 . Q
"RTN","MHV1P11",117,0)
 ;
"RTN","MHV1P11",118,0)
QRYECLS ; Setup for Patient Eligibility and Classificaiton query
"RTN","MHV1P11",119,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",120,0)
 ;
"RTN","MHV1P11",121,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMPATIENTECLASS   ")
"RTN","MHV1P11",122,0)
 N FIELDS,ERR
"RTN","MHV1P11",123,0)
 S ERR=""
"RTN","MHV1P11",124,0)
 S FIELDS("REQUEST TYPE")="SMPATIENTECLASS"
"RTN","MHV1P11",125,0)
 S FIELDS("NUMBER")=46
"RTN","MHV1P11",126,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",127,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",128,0)
 S FIELDS("DATATYPE")="SMPatientEClass"
"RTN","MHV1P11",129,0)
 S FIELDS("EXECUTE")="PECLASS~MHVXWLC"
"RTN","MHV1P11",130,0)
 S FIELDS("BUILDER")="ZEL~MHV7B1M"
"RTN","MHV1P11",131,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q11 query for Patient Eligibility and Classificaiton."
"RTN","MHV1P11",132,0)
 S FIELDS("DESCRIPTION",2)="Specify Patient ICN and DSS Unit IEN."
"RTN","MHV1P11",133,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",134,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",135,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",136,0)
 I ERR'="" D
"RTN","MHV1P11",137,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",138,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",139,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",140,0)
 . Q
"RTN","MHV1P11",141,0)
 ;
"RTN","MHV1P11",142,0)
QRYPPRB ; Setup for Patient Problems query
"RTN","MHV1P11",143,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",144,0)
 ;
"RTN","MHV1P11",145,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMPATIENTPROBLEMS   ")
"RTN","MHV1P11",146,0)
 N FIELDS,ERR
"RTN","MHV1P11",147,0)
 S ERR=""
"RTN","MHV1P11",148,0)
 S FIELDS("REQUEST TYPE")="SMPATIENTPROBLEMS"
"RTN","MHV1P11",149,0)
 S FIELDS("NUMBER")=47
"RTN","MHV1P11",150,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",151,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",152,0)
 S FIELDS("DATATYPE")="SMPatientProblems"
"RTN","MHV1P11",153,0)
 S FIELDS("EXECUTE")="SMPPRB~MHVXWLC"
"RTN","MHV1P11",154,0)
 S FIELDS("BUILDER")="DG1~MHV7B1N"
"RTN","MHV1P11",155,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q11 query for Patient Problems."
"RTN","MHV1P11",156,0)
 S FIELDS("DESCRIPTION",2)="Specify Patient ICN and DSS Unit IEN."
"RTN","MHV1P11",157,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",158,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",159,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",160,0)
 I ERR'="" D
"RTN","MHV1P11",161,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",162,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",163,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",164,0)
 . Q
"RTN","MHV1P11",165,0)
 ;
"RTN","MHV1P11",166,0)
QRYDIAG ; Setup for Diagnoses query
"RTN","MHV1P11",167,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",168,0)
 ;
"RTN","MHV1P11",169,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMDIAGNOSES  ")
"RTN","MHV1P11",170,0)
 N FIELDS,ERR
"RTN","MHV1P11",171,0)
 S ERR=""
"RTN","MHV1P11",172,0)
 S FIELDS("REQUEST TYPE")="SMDIAGNOSES"
"RTN","MHV1P11",173,0)
 S FIELDS("NUMBER")=48
"RTN","MHV1P11",174,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",175,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",176,0)
 S FIELDS("DATATYPE")="SMDiagnoses"
"RTN","MHV1P11",177,0)
 S FIELDS("EXECUTE")="SMDIAG~MHVXWLC"
"RTN","MHV1P11",178,0)
 S FIELDS("BUILDER")="DG1~MHV7B1O"
"RTN","MHV1P11",179,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q11 query for Diagnoses information."
"RTN","MHV1P11",180,0)
 S FIELDS("DESCRIPTION",2)="Specify Search String."
"RTN","MHV1P11",181,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",182,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",183,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",184,0)
 I ERR'="" D
"RTN","MHV1P11",185,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",186,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",187,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",188,0)
 . Q
"RTN","MHV1P11",189,0)
 ; 
"RTN","MHV1P11",190,0)
QRYFILE ; Setup for Workload Credit Filer
"RTN","MHV1P11",191,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P11",192,0)
 ;
"RTN","MHV1P11",193,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMFILER  ")
"RTN","MHV1P11",194,0)
 N FIELDS,ERR
"RTN","MHV1P11",195,0)
 S ERR=""
"RTN","MHV1P11",196,0)
 S FIELDS("REQUEST TYPE")="SMFILER"
"RTN","MHV1P11",197,0)
 S FIELDS("NUMBER")=49
"RTN","MHV1P11",198,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P11",199,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P11",200,0)
 S FIELDS("DATATYPE")="SMFiler"
"RTN","MHV1P11",201,0)
 S FIELDS("EXECUTE")="SMFILE~MHVXWLC"
"RTN","MHV1P11",202,0)
 S FIELDS("BUILDER")="ERR~MHV7B1P"
"RTN","MHV1P11",203,0)
 S FIELDS("DESCRIPTION",1)="DFT^P03 query for WLC Filer."
"RTN","MHV1P11",204,0)
 S FIELDS("DESCRIPTION",2)="Specify String with all data required for WLC Filer."
"RTN","MHV1P11",205,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P11",206,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P11",207,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P11",208,0)
 I ERR'="" D
"RTN","MHV1P11",209,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",210,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",211,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",212,0)
 . Q
"RTN","MHV1P11",213,0)
 ;
"RTN","MHV1P11",214,0)
RSPQ13 ; Set up RESPONSE MAP FOR SMDSSUNITS, SMECSPROCS
"RTN","MHV1P11",215,0)
 D BMES^XPDUTL("    Creating Entry in MHV RESPONSE MAP - MHVSM QBP-Q13 Subscriber    ")
"RTN","MHV1P11",216,0)
 N FLDS,ERR
"RTN","MHV1P11",217,0)
 K FLDS
"RTN","MHV1P11",218,0)
 S ERR=""
"RTN","MHV1P11",219,0)
 S FLDS("SUBSCRIBER")="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P11",220,0)
 S FLDS("PROTOCOL")="MHVSM RTB-K13 Event Driver"
"RTN","MHV1P11",221,0)
 S FLDS("BUILDER")="RTBK13~MHV7B1"
"RTN","MHV1P11",222,0)
 S FLDS("SEGMENT")="RDT"
"RTN","MHV1P11",223,0)
 D LOG^MHVUL2("UPDATE RESPONSE MAP",.FLDS,"M","DEBUG")
"RTN","MHV1P11",224,0)
 D UPDMAP^MHVU2(.FLDS,1,.ERR)
"RTN","MHV1P11",225,0)
 I ERR'="" D
"RTN","MHV1P11",226,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",227,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",228,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",229,0)
 . Q
"RTN","MHV1P11",230,0)
 Q
"RTN","MHV1P11",231,0)
 ;
"RTN","MHV1P11",232,0)
RSPQ11 ; Set up RESPONSE MAP FOR SMPATIENTECLASS, SMPATIENTPROBLEMS, SMDIAGNOSES
"RTN","MHV1P11",233,0)
 D BMES^XPDUTL("    Creating Entry in MHV RESPONSE MAP - MHVSM QBP-Q11 Subscriber    ")
"RTN","MHV1P11",234,0)
 N FLDS,ERR
"RTN","MHV1P11",235,0)
 K FLDS
"RTN","MHV1P11",236,0)
 S ERR=""
"RTN","MHV1P11",237,0)
 S FLDS("SUBSCRIBER")="MHVSM QBP-Q11 Subscriber"
"RTN","MHV1P11",238,0)
 S FLDS("PROTOCOL")="MHVSM RSP-K11 Event Driver"
"RTN","MHV1P11",239,0)
 S FLDS("BUILDER")="RSPK11~MHV7B9"
"RTN","MHV1P11",240,0)
 S FLDS("SEGMENT")="PID"
"RTN","MHV1P11",241,0)
 D LOG^MHVUL2("UPDATE RESPONSE MAP",.FLDS,"M","DEBUG")
"RTN","MHV1P11",242,0)
 D UPDMAP^MHVU2(.FLDS,1,.ERR)
"RTN","MHV1P11",243,0)
 I ERR'="" D
"RTN","MHV1P11",244,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",245,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",246,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",247,0)
 . Q
"RTN","MHV1P11",248,0)
 Q
"RTN","MHV1P11",249,0)
 ;
"RTN","MHV1P11",250,0)
RSPP03 ; Set up RESPONSE MAP FOR SMFILER
"RTN","MHV1P11",251,0)
 D BMES^XPDUTL("    Creating Entry in MHV RESPONSE MAP - MHVSM DFT-P03 Subscriber    ")
"RTN","MHV1P11",252,0)
 N FLDS,ERR
"RTN","MHV1P11",253,0)
 K FLDS
"RTN","MHV1P11",254,0)
 S ERR=""
"RTN","MHV1P11",255,0)
 S FLDS("SUBSCRIBER")="MHVSM DFT-P03 Subscriber"
"RTN","MHV1P11",256,0)
 S FLDS("PROTOCOL")="MHVSM ACK-P03 Event Driver"
"RTN","MHV1P11",257,0)
 S FLDS("BUILDER")="ACKP03~MHV7B10"
"RTN","MHV1P11",258,0)
 S FLDS("SEGMENT")="ERR"
"RTN","MHV1P11",259,0)
 D LOG^MHVUL2("UPDATE RESPONSE MAP",.FLDS,"M","DEBUG")
"RTN","MHV1P11",260,0)
 D UPDMAP^MHVU2(.FLDS,1,.ERR)
"RTN","MHV1P11",261,0)
 I ERR'="" D
"RTN","MHV1P11",262,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P11",263,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P11",264,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P11",265,0)
 . Q
"RTN","MHV1P11",266,0)
 Q
"RTN","MHV1P11",267,0)
 ;
"RTN","MHV1P11",268,0)
CHKHLOC(ERR) ; Check Institution in Hospital Location File (#44)
"RTN","MHV1P11",269,0)
 N MHVCSIEN,MHVCLIEN,MHVINST,MHVDIVN
"RTN","MHV1P11",270,0)
 S MHVCSIEN=$$SCIEN(719)
"RTN","MHV1P11",271,0)
 I $G(MHVCSIEN)="" S ERR="MHV SECURE MESSAGING Stop Code is not found in STOP CODE File" Q
"RTN","MHV1P11",272,0)
 S MHVCLIEN=0
"RTN","MHV1P11",273,0)
 F  S MHVCLIEN=$O(^SC("ACST",MHVCSIEN,MHVCLIEN)) Q:'MHVCLIEN  D
"RTN","MHV1P11",274,0)
 .S MHVCLNM=$$GET1^DIQ(44,+MHVCLIEN,.01,"I")
"RTN","MHV1P11",275,0)
 .I ($G(MHVCLNM)'="")&($$UP^XLFSTR($E(MHVCLNM,1,2))'="ZZ")  D
"RTN","MHV1P11",276,0)
 ..S MHVINST=$$GET1^DIQ(44,+MHVCLIEN,3,"E")
"RTN","MHV1P11",277,0)
 ..S MHVDIVN=$$GET1^DIQ(44,+MHVCLIEN,3.5,"E")
"RTN","MHV1P11",278,0)
 ..I ($G(MHVINST)="")!($G(MHVDIVN)="")  D
"RTN","MHV1P11",279,0)
 ...D CHKLERR(.MHVCLNM)
"RTN","MHV1P11",280,0)
 ...S ERR="Missing Institution/Division field in Hospital Location File (#44)"
"RTN","MHV1P11",281,0)
 ...Q
"RTN","MHV1P11",282,0)
 Q
"RTN","MHV1P11",283,0)
CHKLERR(MHVCLNM) ; Print messages in case of Institution or Division missing
"RTN","MHV1P11",284,0)
 D LOG^MHVUL2("INSTITUTION-DIVISION MISSING",$G(MHVCLNM),"S","ERROR")
"RTN","MHV1P11",285,0)
 I MHVC=0  D
"RTN","MHV1P11",286,0)
 .D BMES^XPDUTL("     *** Please check the following Secure Messaging Clinics that the")
"RTN","MHV1P11",287,0)
 .D MES^XPDUTL("     *** Institution field and Division field have valid values")
"RTN","MHV1P11",288,0)
 S MHVC=MHVC+1
"RTN","MHV1P11",289,0)
 D MES^XPDUTL("     "_$G(MHVCLNM))
"RTN","MHV1P11",290,0)
 Q
"RTN","MHV1P11",291,0)
SCIEN(SCN) ;Get stop code IEN
"RTN","MHV1P11",292,0)
 N SCIEN
"RTN","MHV1P11",293,0)
 I SCN="" Q ""
"RTN","MHV1P11",294,0)
 S SCIEN=$O(^DIC(40.7,"C",SCN,0))
"RTN","MHV1P11",295,0)
 I $G(SCIEN)="" Q ""
"RTN","MHV1P11",296,0)
 Q SCIEN
"RTN","MHV1P11",297,0)
 ;
"RTN","MHV7B10")
0^13^B2415319^n/a
"RTN","MHV7B10",1,0)
MHV7B10 ;KUM - HL7 message builder SECURE MESSAGING ACK^P03 ; 1/11/15 4:08pm
"RTN","MHV7B10",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B10",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B10",4,0)
 ;
"RTN","MHV7B10",5,0)
 Q
"RTN","MHV7B10",6,0)
 ;
"RTN","MHV7B10",7,0)
ACKP03(MSGROOT,QRY,ERR,DATAROOT,LEN,HL) ; Build query response
"RTN","MHV7B10",8,0)
 ;
"RTN","MHV7B10",9,0)
 ;  Populates the array pointed to by MSGROOT with an ACK^P03 query
"RTN","MHV7B10",10,0)
 ; response message by calling the appropriate segment builders based
"RTN","MHV7B10",11,0)
 ; on the type of response ACK/Data or NAK.  Extracted data pointed to
"RTN","MHV7B10",12,0)
 ; by DATAROOT, errors, hit counts, and query information are used to
"RTN","MHV7B10",13,0)
 ; build the segments.
"RTN","MHV7B10",14,0)
 ; An error number in ERR^4 indicates a NAK is needed.
"RTN","MHV7B10",15,0)
 ; DATAROOT being null indicates a dataless ACK (testing purposes).
"RTN","MHV7B10",16,0)
 ;
"RTN","MHV7B10",17,0)
 ;  Input:
"RTN","MHV7B10",18,0)
 ;     MSGROOT - Global root of message
"RTN","MHV7B10",19,0)
 ;         QRY - Query parameters
"RTN","MHV7B10",20,0)
 ;             QRY("MID") - original message control ID
"RTN","MHV7B10",21,0)
 ;         ERR - Caret delimited error string
"RTN","MHV7B10",22,0)
 ;               segment^sequence^field^code^ACK type^error text
"RTN","MHV7B10",23,0)
 ;    DATAROOT - Global root of data array
"RTN","MHV7B10",24,0)
 ;          HL - HL7 package array variable
"RTN","MHV7B10",25,0)
 ;
"RTN","MHV7B10",26,0)
 ;  Output: ACK^P03 message in MSGROOT
"RTN","MHV7B10",27,0)
 ;         LEN - Length of formatted message
"RTN","MHV7B10",28,0)
 ;
"RTN","MHV7B10",29,0)
 N CNT,HIT,EXTIME,MTYPE
"RTN","MHV7B10",30,0)
 D LOG^MHVUL2("SM ACK-P03 BUILDER","BEGIN","S","TRACE")
"RTN","MHV7B10",31,0)
 ;
"RTN","MHV7B10",32,0)
 S HIT=0,EXTIME=""
"RTN","MHV7B10",33,0)
 I DATAROOT'="" D
"RTN","MHV7B10",34,0)
 . S HIT=+$P($G(@DATAROOT),"^",1)
"RTN","MHV7B10",35,0)
 . S EXTIME=$P($G(@DATAROOT),"^",2)
"RTN","MHV7B10",36,0)
 . Q
"RTN","MHV7B10",37,0)
 S HIT=HIT_"^"_HIT_"^0"
"RTN","MHV7B10",38,0)
 ;
"RTN","MHV7B10",39,0)
 K @MSGROOT
"RTN","MHV7B10",40,0)
 S CNT=1,@MSGROOT@(CNT)=$$MSA^MHV7BUS($G(QRY("MID")),ERR,.HL)
"RTN","MHV7B10",41,0)
 S LEN=$L(@MSGROOT@(CNT))
"RTN","MHV7B10",42,0)
 I $P(ERR,"^",4)  D
"RTN","MHV7B10",43,0)
 .S CNT=CNT+1,HIT="0^0^0",@MSGROOT@(CNT)=$$ERR^MHV7BUS(ERR,.HL)
"RTN","MHV7B10",44,0)
 .S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B10",45,0)
 ;S CNT=CNT+1,@MSGROOT@(CNT)=$$QAK^MHV7BUS(.QRY,ERR,HIT,.HL)
"RTN","MHV7B10",46,0)
 ;S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B10",47,0)
 ;S CNT=CNT+1,@MSGROOT@(CNT)=$$QPD^MHV7BUS(.QRY,EXTIME,.HL)
"RTN","MHV7B10",48,0)
 ;S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B10",49,0)
 ;
"RTN","MHV7B10",50,0)
 I '$P(ERR,"^",4)  D
"RTN","MHV7B10",51,0)
 .D @(QRY("BUILDER")_"(MSGROOT,DATAROOT,.CNT,.LEN,.HL)")
"RTN","MHV7B10",52,0)
 ;
"RTN","MHV7B10",53,0)
 D LOG^MHVUL2("SM ACK-P03 BUILDER","END","S","TRACE")
"RTN","MHV7B10",54,0)
 Q
"RTN","MHV7B10",55,0)
 ;
"RTN","MHV7B1K")
0^9^B5337379^n/a
"RTN","MHV7B1K",1,0)
MHV7B1K ;KUM - HL7 message builder RTB^K13 DSS Units ; 9/9/14 3:06pm
"RTN","MHV7B1K",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1K",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1K",4,0)
 ;
"RTN","MHV7B1K",5,0)
 Q
"RTN","MHV7B1K",6,0)
 ;
"RTN","MHV7B1K",7,0)
RDF(MSGROOT,CNT,LEN,HL) ;  Build RDF segment for DSS Units data
"RTN","MHV7B1K",8,0)
 ;
"RTN","MHV7B1K",9,0)
 ;  Input:
"RTN","MHV7B1K",10,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1K",11,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1K",12,0)
 ;       LEN - Current message length
"RTN","MHV7B1K",13,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1K",14,0)
 ;
"RTN","MHV7B1K",15,0)
 ;  Output:
"RTN","MHV7B1K",16,0)
 ;           - Populated message array
"RTN","MHV7B1K",17,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1K",18,0)
 ;
"RTN","MHV7B1K",19,0)
 N RDF
"RTN","MHV7B1K",20,0)
 S RDF(0)="RDF"
"RTN","MHV7B1K",21,0)
 S RDF(1)=6
"RTN","MHV7B1K",22,0)
 S RDF(2,1,1)="Location IEN",RDF(2,1,2)="NM",RDF(2,1,3)=10
"RTN","MHV7B1K",23,0)
 S RDF(2,2,1)="Location Name",RDF(2,2,2)="NM",RDF(2,2,3)=20
"RTN","MHV7B1K",24,0)
 S RDF(2,3,1)="DSSUNIT IEN",RDF(2,3,2)="NM",RDF(2,3,3)=10
"RTN","MHV7B1K",25,0)
 S RDF(2,4,1)="DSSUNIT Name",RDF(2,4,2)="ST",RDF(2,4,3)=50
"RTN","MHV7B1K",26,0)
 S RDF(2,5,1)="Inactive Flag",RDF(2,5,2)="ST",RDF(2,5,3)=1
"RTN","MHV7B1K",27,0)
 S RDF(2,6,1)="Send To PCE Flag",RDF(2,6,2)="ST",RDF(2,6,3)=1
"RTN","MHV7B1K",28,0)
 ;
"RTN","MHV7B1K",29,0)
 S CNT=CNT+1
"RTN","MHV7B1K",30,0)
 S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDF,.HL)
"RTN","MHV7B1K",31,0)
 S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1K",32,0)
 Q
"RTN","MHV7B1K",33,0)
 ;
"RTN","MHV7B1K",34,0)
RDT(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build RDT segments for DSSUnits data
"RTN","MHV7B1K",35,0)
 ;
"RTN","MHV7B1K",36,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1K",37,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1K",38,0)
 ;
"RTN","MHV7B1K",39,0)
 ;  Integration Agreements:
"RTN","MHV7B1K",40,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1K",41,0)
 ;
"RTN","MHV7B1K",42,0)
 ;  Input:
"RTN","MHV7B1K",43,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1K",44,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1K",45,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1K",46,0)
 ;       LEN - Current message length
"RTN","MHV7B1K",47,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1K",48,0)
 ;
"RTN","MHV7B1K",49,0)
 ;  Output:
"RTN","MHV7B1K",50,0)
 ;           - Populated message array
"RTN","MHV7B1K",51,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1K",52,0)
 ;
"RTN","MHV7B1K",53,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1K",54,0)
 N I,APP,RDT
"RTN","MHV7B1K",55,0)
 D LOG^MHVUL2("MHV7B1K","BEGIN RDT","S","TRACE")
"RTN","MHV7B1K",56,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1K",57,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1K",58,0)
 . S RDT(0)="RDT"
"RTN","MHV7B1K",59,0)
 . S RDT(1)=$P(APP,"^")                         ;Location IEN
"RTN","MHV7B1K",60,0)
 . S RDT(2)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL)   ;Location Name 
"RTN","MHV7B1K",61,0)
 . S RDT(3)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL)   ;DSS Unit IEN
"RTN","MHV7B1K",62,0)
 . S RDT(4)=$$ESCAPE^MHV7U($P(APP,"^",4),.HL)   ;DSS Unit Name
"RTN","MHV7B1K",63,0)
 . S RDT(5)=$$ESCAPE^MHV7U($P(APP,"^",5),.HL)   ;Inactive Flag
"RTN","MHV7B1K",64,0)
 . S RDT(6)=$$ESCAPE^MHV7U($P(APP,"^",6),.HL)   ;Send to PCE Flag 
"RTN","MHV7B1K",65,0)
 . S CNT=CNT+1
"RTN","MHV7B1K",66,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDT,.HL)
"RTN","MHV7B1K",67,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1K",68,0)
 . Q
"RTN","MHV7B1K",69,0)
 D LOG^MHVUL2("MHV7B1K","END RDT","S","TRACE")
"RTN","MHV7B1K",70,0)
 Q
"RTN","MHV7B1K",71,0)
 ;
"RTN","MHV7B1L")
0^11^B4089241^n/a
"RTN","MHV7B1L",1,0)
MHV7B1L ;KUM - HL7 message builder RTB^K13 DSS Units ; 9/19/14 3:06pm
"RTN","MHV7B1L",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1L",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1L",4,0)
 ;
"RTN","MHV7B1L",5,0)
 Q
"RTN","MHV7B1L",6,0)
 ;
"RTN","MHV7B1L",7,0)
RDF(MSGROOT,CNT,LEN,HL) ;  Build RDF segment for DSS Units data
"RTN","MHV7B1L",8,0)
 ;
"RTN","MHV7B1L",9,0)
 ;  Input:
"RTN","MHV7B1L",10,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1L",11,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1L",12,0)
 ;       LEN - Current message length
"RTN","MHV7B1L",13,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1L",14,0)
 ;
"RTN","MHV7B1L",15,0)
 ;  Output:
"RTN","MHV7B1L",16,0)
 ;           - Populated message array
"RTN","MHV7B1L",17,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1L",18,0)
 ;
"RTN","MHV7B1L",19,0)
 N RDF
"RTN","MHV7B1L",20,0)
 S RDF(0)="RDF"
"RTN","MHV7B1L",21,0)
 S RDF(1)=4
"RTN","MHV7B1L",22,0)
 S RDF(2,1,1)="Procedure IEN",RDF(2,1,2)="ST",RDF(2,1,3)=30
"RTN","MHV7B1L",23,0)
 S RDF(2,2,1)="Procedure Code",RDF(2,2,2)="ST",RDF(2,2,3)=30
"RTN","MHV7B1L",24,0)
 S RDF(2,3,1)="Procedure Desc",RDF(2,3,2)="ST",RDF(2,3,3)=50
"RTN","MHV7B1L",25,0)
 S RDF(2,4,1)="Synonym",RDF(2,4,2)="ST",RDF(2,4,3)=50
"RTN","MHV7B1L",26,0)
 ;
"RTN","MHV7B1L",27,0)
 S CNT=CNT+1
"RTN","MHV7B1L",28,0)
 S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDF,.HL)
"RTN","MHV7B1L",29,0)
 S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1L",30,0)
 Q
"RTN","MHV7B1L",31,0)
 ;
"RTN","MHV7B1L",32,0)
RDT(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build RDT segments for DSSUnits data
"RTN","MHV7B1L",33,0)
 ;
"RTN","MHV7B1L",34,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1L",35,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1L",36,0)
 ;
"RTN","MHV7B1L",37,0)
 ;  Integration Agreements:
"RTN","MHV7B1L",38,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1L",39,0)
 ;
"RTN","MHV7B1L",40,0)
 ;  Input:
"RTN","MHV7B1L",41,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1L",42,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1L",43,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1L",44,0)
 ;       LEN - Current message length
"RTN","MHV7B1L",45,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1L",46,0)
 ;
"RTN","MHV7B1L",47,0)
 ;  Output:
"RTN","MHV7B1L",48,0)
 ;           - Populated message array
"RTN","MHV7B1L",49,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1L",50,0)
 ;
"RTN","MHV7B1L",51,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1L",52,0)
 N I,APP,RDT
"RTN","MHV7B1L",53,0)
 D LOG^MHVUL2("MHV7B1L","BEGIN RDT","S","TRACE")
"RTN","MHV7B1L",54,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1L",55,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1L",56,0)
 . S RDT(0)="RDT"
"RTN","MHV7B1L",57,0)
 . S RDT(1)=$P(APP,"^")                         ;Procedure IEN
"RTN","MHV7B1L",58,0)
 . S RDT(2)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL)   ;Procedure Code 
"RTN","MHV7B1L",59,0)
 . S RDT(3)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL)   ;Procedure Desc
"RTN","MHV7B1L",60,0)
 . S RDT(4)=$$ESCAPE^MHV7U($P(APP,"^",4),.HL)   ;Synonym
"RTN","MHV7B1L",61,0)
 . S CNT=CNT+1
"RTN","MHV7B1L",62,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDT,.HL)
"RTN","MHV7B1L",63,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1L",64,0)
 . Q
"RTN","MHV7B1L",65,0)
 D LOG^MHVUL2("MHV7B1L","END RDT","S","TRACE")
"RTN","MHV7B1L",66,0)
 Q
"RTN","MHV7B1L",67,0)
 ;
"RTN","MHV7B1M")
0^5^B5731809^n/a
"RTN","MHV7B1M",1,0)
MHV7B1M ;KUM - HL7 message builder ACK^P03 Patient Eligibility and Classificaiton ; 10/30/14 3:06pm
"RTN","MHV7B1M",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1M",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1M",4,0)
 ;
"RTN","MHV7B1M",5,0)
 Q
"RTN","MHV7B1M",6,0)
 ;
"RTN","MHV7B1M",7,0)
ZEL(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build ZEL segments for Patient Eligibility and Classificaiton data
"RTN","MHV7B1M",8,0)
 ;
"RTN","MHV7B1M",9,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1M",10,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1M",11,0)
 ;
"RTN","MHV7B1M",12,0)
 ;  Integration Agreements:
"RTN","MHV7B1M",13,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1M",14,0)
 ;
"RTN","MHV7B1M",15,0)
 ;  Input:
"RTN","MHV7B1M",16,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1M",17,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1M",18,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1M",19,0)
 ;       LEN - Current message length
"RTN","MHV7B1M",20,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1M",21,0)
 ;
"RTN","MHV7B1M",22,0)
 ;  Output:
"RTN","MHV7B1M",23,0)
 ;           - Populated message array
"RTN","MHV7B1M",24,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1M",25,0)
 ;
"RTN","MHV7B1M",26,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1M",27,0)
 N I,APP,RDT
"RTN","MHV7B1M",28,0)
 D LOG^MHVUL2("MHV7B1M","BEGIN ZEL","S","TRACE")
"RTN","MHV7B1M",29,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1M",30,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1M",31,0)
 . S ZEL(0)="ZEL"
"RTN","MHV7B1M",32,0)
 . I I=1  D
"RTN","MHV7B1M",33,0)
 . . S ZEL(9)=$$ESCAPE^MHV7U($P(APP,"^",1),.HL)   ;Patient Status
"RTN","MHV7B1M",34,0)
 . . S ZEL(18)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL)  ;Agent Orange
"RTN","MHV7B1M",35,0)
 . . S ZEL(19)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL)  ;Ionizing Radiation
"RTN","MHV7B1M",36,0)
 . . S ZEL(31)=$$ESCAPE^MHV7U($P(APP,"^",4),.HL)  ;SC Condition 
"RTN","MHV7B1M",37,0)
 . . S ZEL(20)=$$ESCAPE^MHV7U($P(APP,"^",5),.HL)  ;Environmental Contamination
"RTN","MHV7B1M",38,0)
 . . S ZEL(23)=$$ESCAPE^MHV7U($P(APP,"^",6),.HL)  ;Military Sexual Truama
"RTN","MHV7B1M",39,0)
 . . S ZEL(42)=$$ESCAPE^MHV7U($P(APP,"^",7),.HL)  ;Head/Neck Cancer
"RTN","MHV7B1M",40,0)
 . . S ZEL(37)=$$ESCAPE^MHV7U($P(APP,"^",8),.HL)  ;Combat Veteran
"RTN","MHV7B1M",41,0)
 . . S ZEL(44)=$$ESCAPE^MHV7U($P($P(APP,"^",9),"~",1),.HL)  ;Project 112/SHAD
"RTN","MHV7B1M",42,0)
 . I I>1  D
"RTN","MHV7B1M",43,0)
 . . S ZEL(1)=$$ESCAPE^MHV7U($P(APP,"^",1),.HL)   ;Primary/Secondary Flag  
"RTN","MHV7B1M",44,0)
 . . S ZEL(3)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL)   ;Eligibility Code IEN
"RTN","MHV7B1M",45,0)
 . . S ZEL(2)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL)   ;Eligibility Description
"RTN","MHV7B1M",46,0)
 . . S CNT=CNT+1
"RTN","MHV7B1M",47,0)
 . . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.ZEL,.HL)
"RTN","MHV7B1M",48,0)
 . . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1M",49,0)
 . . K ZEL
"RTN","MHV7B1M",50,0)
 . Q
"RTN","MHV7B1M",51,0)
 D LOG^MHVUL2("MHV7B1M","END ZEL","S","TRACE")
"RTN","MHV7B1M",52,0)
 Q
"RTN","MHV7B1M",53,0)
 ;
"RTN","MHV7B1N")
0^7^B2734081^n/a
"RTN","MHV7B1N",1,0)
MHV7B1N ;KUM - HL7 message builder RSP^K11 Patient Porblems List ; 10/30/14 3:06pm
"RTN","MHV7B1N",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1N",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1N",4,0)
 ;
"RTN","MHV7B1N",5,0)
 Q
"RTN","MHV7B1N",6,0)
 ;
"RTN","MHV7B1N",7,0)
DG1(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build DG1 segments for Patient Problems List data
"RTN","MHV7B1N",8,0)
 ;
"RTN","MHV7B1N",9,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1N",10,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1N",11,0)
 ;
"RTN","MHV7B1N",12,0)
 ;  Integration Agreements:
"RTN","MHV7B1N",13,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1N",14,0)
 ;
"RTN","MHV7B1N",15,0)
 ;  Input:
"RTN","MHV7B1N",16,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1N",17,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1N",18,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1N",19,0)
 ;       LEN - Current message length
"RTN","MHV7B1N",20,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1N",21,0)
 ;
"RTN","MHV7B1N",22,0)
 ;  Output:
"RTN","MHV7B1N",23,0)
 ;           - Populated message array
"RTN","MHV7B1N",24,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1N",25,0)
 ;
"RTN","MHV7B1N",26,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1N",27,0)
 N I,APP,DG1
"RTN","MHV7B1N",28,0)
 D LOG^MHVUL2("MHV7B1N","BEGIN DG1","S","TRACE")
"RTN","MHV7B1N",29,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1N",30,0)
 . M ^KUMDG3=@DATAROOT
"RTN","MHV7B1N",31,0)
 . I $P(@DATAROOT@(I),"^",2)=0 Q
"RTN","MHV7B1N",32,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1N",33,0)
 . S DG1(0)="DG1"
"RTN","MHV7B1N",34,0)
 . S DG1(1,1)=I
"RTN","MHV7B1N",35,0)
 . S DG1(3,1,4)=$$ESCAPE^MHV7U($P(APP,"^"),.HL)   ;Diagnosis Code IEN
"RTN","MHV7B1N",36,0)
 . S DG1(3,1,1)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL) ;Diagnosis Code 
"RTN","MHV7B1N",37,0)
 . S DG1(3,1,2)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL) ;Diagnosis Code Description
"RTN","MHV7B1N",38,0)
 . S DG1(3,1,3)=$$ESCAPE^MHV7U("I9",.HL)         ;ICD-9 Coding System
"RTN","MHV7B1N",39,0)
 . S CNT=CNT+1
"RTN","MHV7B1N",40,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.DG1,.HL)
"RTN","MHV7B1N",41,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1N",42,0)
 . Q
"RTN","MHV7B1N",43,0)
 D LOG^MHVUL2("MHV7B1N","END DG1","S","TRACE")
"RTN","MHV7B1N",44,0)
 Q
"RTN","MHV7B1N",45,0)
 ;
"RTN","MHV7B1O")
0^8^B2738736^n/a
"RTN","MHV7B1O",1,0)
MHV7B1O ;KUM - HL7 message builder RSP^K11 Diagnoses Search Results List ; 10/30/14 3:06pm
"RTN","MHV7B1O",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1O",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1O",4,0)
 ;
"RTN","MHV7B1O",5,0)
 Q
"RTN","MHV7B1O",6,0)
 ;
"RTN","MHV7B1O",7,0)
DG1(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build DG1 segments for Diagnosis Search Results data
"RTN","MHV7B1O",8,0)
 ;
"RTN","MHV7B1O",9,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1O",10,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1O",11,0)
 ;
"RTN","MHV7B1O",12,0)
 ;  Integration Agreements:
"RTN","MHV7B1O",13,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1O",14,0)
 ;
"RTN","MHV7B1O",15,0)
 ;  Input:
"RTN","MHV7B1O",16,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1O",17,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1O",18,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1O",19,0)
 ;       LEN - Current message length
"RTN","MHV7B1O",20,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1O",21,0)
 ;
"RTN","MHV7B1O",22,0)
 ;  Output:
"RTN","MHV7B1O",23,0)
 ;           - Populated message array
"RTN","MHV7B1O",24,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1O",25,0)
 ;
"RTN","MHV7B1O",26,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1O",27,0)
 N I,APP,DG1
"RTN","MHV7B1O",28,0)
 D LOG^MHVUL2("MHV7B1O","BEGIN DG1","S","TRACE")
"RTN","MHV7B1O",29,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1O",30,0)
 . M ^KUMDG4=@DATAROOT
"RTN","MHV7B1O",31,0)
 . I $P(@DATAROOT@(I),"^",2)=0 Q
"RTN","MHV7B1O",32,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1O",33,0)
 . S DG1(0)="DG1"
"RTN","MHV7B1O",34,0)
 . S DG1(1,1)=I
"RTN","MHV7B1O",35,0)
 . S DG1(3,1,4)=$$ESCAPE^MHV7U($P(APP,"^"),.HL)   ;Diagnosis Code IEN
"RTN","MHV7B1O",36,0)
 . S DG1(3,1,1)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL) ;Diagnosis Code 
"RTN","MHV7B1O",37,0)
 . S DG1(3,1,2)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL) ;Diagnosis Code Description
"RTN","MHV7B1O",38,0)
 . S DG1(3,1,3)=$$ESCAPE^MHV7U("I9",.HL)          ;ICD-9 Coding System
"RTN","MHV7B1O",39,0)
 . S CNT=CNT+1
"RTN","MHV7B1O",40,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.DG1,.HL)
"RTN","MHV7B1O",41,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1O",42,0)
 . Q
"RTN","MHV7B1O",43,0)
 D LOG^MHVUL2("MHV7B1O","END DG1","S","TRACE")
"RTN","MHV7B1O",44,0)
 Q
"RTN","MHV7B1O",45,0)
 ;
"RTN","MHV7B1P")
0^12^B2403781^n/a
"RTN","MHV7B1P",1,0)
MHV7B1P ;KUM - HL7 message builder ACK^P03 WLC Filer ; 1/11/15 3:06pm
"RTN","MHV7B1P",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7B1P",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1P",4,0)
 ;
"RTN","MHV7B1P",5,0)
 Q
"RTN","MHV7B1P",6,0)
 ;
"RTN","MHV7B1P",7,0)
ERR(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build ERR segment for Workload Credit Filer Results data
"RTN","MHV7B1P",8,0)
 ;
"RTN","MHV7B1P",9,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1P",10,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1P",11,0)
 ;
"RTN","MHV7B1P",12,0)
 ;  Integration Agreements:
"RTN","MHV7B1P",13,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1P",14,0)
 ;
"RTN","MHV7B1P",15,0)
 ;  Input:
"RTN","MHV7B1P",16,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1P",17,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1P",18,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1P",19,0)
 ;       LEN - Current message length
"RTN","MHV7B1P",20,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1P",21,0)
 ;
"RTN","MHV7B1P",22,0)
 ;  Output:
"RTN","MHV7B1P",23,0)
 ;           - Populated message array
"RTN","MHV7B1P",24,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1P",25,0)
 ;
"RTN","MHV7B1P",26,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1P",27,0)
 N I,APP,ERR
"RTN","MHV7B1P",28,0)
 D LOG^MHVUL2("MHV7B1P","BEGIN ERR","S","TRACE")
"RTN","MHV7B1P",29,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1P",30,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1P",31,0)
 . S ERR(0)="ERR"
"RTN","MHV7B1P",32,0)
 . S ERR(4,1,4)=$$ESCAPE^MHV7U($P(APP,"^",5),.HL) ;Visit IEN
"RTN","MHV7B1P",33,0)
 . S ERR(4,1,1)=$$ESCAPE^MHV7U($P(APP,"^",1),.HL) ;Success/Failure Flag 
"RTN","MHV7B1P",34,0)
 . S ERR(4,1,2)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL) ;Success/Failure Message
"RTN","MHV7B1P",35,0)
 . S ERR(4,1,3)=$$ESCAPE^MHV7U($P(APP,"^",4),.HL) ;Workload IEN
"RTN","MHV7B1P",36,0)
 . S CNT=CNT+1
"RTN","MHV7B1P",37,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.ERR,.HL)
"RTN","MHV7B1P",38,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1P",39,0)
 . Q
"RTN","MHV7B1P",40,0)
 D LOG^MHVUL2("MHV7B1P","END ERR","S","TRACE")
"RTN","MHV7B1P",41,0)
 Q
"RTN","MHV7B1P",42,0)
 ;
"RTN","MHV7R5")
0^6^B59299647^B42337271
"RTN","MHV7R5",1,0)
MHV7R5 ;WAS/DLF/MJK/KUM - HL7 RECEIVER FOR ADMIN QUERIES ; 6/7/10 10:34am
"RTN","MHV7R5",2,0)
 ;;1.0;My HealtheVet;**6,10,11**;Aug 23, 2005;Build 61
"RTN","MHV7R5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R5",4,0)
 ;
"RTN","MHV7R5",5,0)
 ;  Integration Agreements:
"RTN","MHV7R5",6,0)
 ;        10104 : $$UP^XLFSTR
"RTN","MHV7R5",7,0)
 Q
"RTN","MHV7R5",8,0)
 ;
"RTN","MHV7R5",9,0)
QBPQ11 ;Process QBP^Q11 messages from the MHVSM QBP-Q11 Subscriber protocol
"RTN","MHV7R5",10,0)
 ;
"RTN","MHV7R5",11,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R5",12,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R5",13,0)
 ; if they are missing.
"RTN","MHV7R5",14,0)
 ;
"RTN","MHV7R5",15,0)
 ;  The message will be checked to see if it is a valid query.
"RTN","MHV7R5",16,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R5",17,0)
 ; immediate mode or synchronous query, the realtime request manager
"RTN","MHV7R5",18,0)
 ; is called to handle the query.  This means the query will be
"RTN","MHV7R5",19,0)
 ; processed and a response generated immediately.
"RTN","MHV7R5",20,0)
 ; In the future deferred mode queries may be filed in a database for
"RTN","MHV7R5",21,0)
 ; later processing, or transmission.
"RTN","MHV7R5",22,0)
 ;
"RTN","MHV7R5",23,0)
 ;  Input:
"RTN","MHV7R5",24,0)
 ;          HL7 environment variables
"RTN","MHV7R5",25,0)
 ;
"RTN","MHV7R5",26,0)
 ; Output:
"RTN","MHV7R5",27,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R5",28,0)
 ;          If handled real-time the query response is generated
"RTN","MHV7R5",29,0)
 ;
"RTN","MHV7R5",30,0)
 ;  Integration Agreements
"RTN","MHV7R5",31,0)
 ;
"RTN","MHV7R5",32,0)
 ;          10104 UP^XLFSTR
"RTN","MHV7R5",33,0)
 ;
"RTN","MHV7R5",34,0)
 N MSGROOT,QRY,XMT,ERR,RNAME
"RTN","MHV7R5",35,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R5",36,0)
 ; Inbound query messages are small enough to be held in a local.
"RTN","MHV7R5",37,0)
 ; The following lines commented out support use of global and are
"RTN","MHV7R5",38,0)
 ; left in case use a global becomes necessary.
"RTN","MHV7R5",39,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R5",40,0)
 ;K @MSGROOT
"RTN","MHV7R5",41,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R5",42,0)
 N MHV7MSG
"RTN","MHV7R5",43,0)
 D LOADXMT^MHV7U(.XMT)         ;Load inbound message information
"RTN","MHV7R5",44,0)
 ;
"RTN","MHV7R5",45,0)
 S RNAME=XMT("MESSAGE TYPE")_"-"_XMT("EVENT TYPE")_" RECEIVER"
"RTN","MHV7R5",46,0)
 D LOG^MHVUL2(RNAME,"BEGIN","S","TRACE")
"RTN","MHV7R5",47,0)
 ;
"RTN","MHV7R5",48,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R5",49,0)
 D LOG^MHVUL2("LOAD",MSGROOT,"I","DEBUG")
"RTN","MHV7R5",50,0)
 ;
"RTN","MHV7R5",51,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R5",52,0)
 D LOG^MHVUL2("PARSE",MSGROOT,"I","DEBUG")
"RTN","MHV7R5",53,0)
 ;
"RTN","MHV7R5",54,0)
 I '$$VALIDMSG(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R5",55,0)
 . D LOG^MHVUL2("MSG CHECK","INVALID^"_ERR,"S","ERROR")
"RTN","MHV7R5",56,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R5",57,0)
 D LOG^MHVUL2("MSG CHECK","VALID","S","TRACE")
"RTN","MHV7R5",58,0)
 ;
"RTN","MHV7R5",59,0)
 ; Immediate Mode
"RTN","MHV7R5",60,0)
 ; Deferred mode queries are not supported at this time
"RTN","MHV7R5",61,0)
 D REALTIME^MHVRQI(.QRY,.XMT,.HL)
"RTN","MHV7R5",62,0)
 ;
"RTN","MHV7R5",63,0)
 D LOG^MHVUL2(RNAME,"END","S","TRACE")
"RTN","MHV7R5",64,0)
 D RESET^MHVUL2          ;Clean up TMP used by logging
"RTN","MHV7R5",65,0)
 ;K @MSGROOT
"RTN","MHV7R5",66,0)
 ;
"RTN","MHV7R5",67,0)
 Q
"RTN","MHV7R5",68,0)
 ;
"RTN","MHV7R5",69,0)
VALIDMSG(MSGROOT,QRY,XMT,ERR)   ;Validate message
"RTN","MHV7R5",70,0)
 ;
"RTN","MHV7R5",71,0)
 ;  Messages handled: QBP^Q11
"RTN","MHV7R5",72,0)
 ;
"RTN","MHV7R5",73,0)
 ;  QBP query messages must contain QPD and RCP segments
"RTN","MHV7R5",74,0)
 ;  Any additional segments are ignored
"RTN","MHV7R5",75,0)
 ;
"RTN","MHV7R5",76,0)
 ;  Input:
"RTN","MHV7R5",77,0)
 ;    MSGROOT - Root of array holding message
"RTN","MHV7R5",78,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R5",79,0)
 ;
"RTN","MHV7R5",80,0)
 ; Output:
"RTN","MHV7R5",81,0)
 ;        QRY - Query Array
"RTN","MHV7R5",82,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R5",83,0)
 ;        ERR - segment^sequence^field^code^ACK type^error text
"RTN","MHV7R5",84,0)
 ;
"RTN","MHV7R5",85,0)
 N MSH,PID,STF,QPD,RCP,REQFLDS,REQID,REQTYPE,FROMDT,TODT,PRI,QTAG,QNAME,MHVCSIE
"RTN","MHV7R5",86,0)
 N SEGTYPE,CNT,OCNT,RXNUM,QTY,UNIT,REQFLDS,CHKSEG
"RTN","MHV7R5",87,0)
 K QRY,ERR
"RTN","MHV7R5",88,0)
 S MHVCSIE=""
"RTN","MHV7R5",89,0)
 S ERR=""
"RTN","MHV7R5",90,0)
 ;
"RTN","MHV7R5",91,0)
 ; Set up basics for responding to message.
"RTN","MHV7R5",92,0)
 ;-----------------------------------------
"RTN","MHV7R5",93,0)
 S QRY("MID")=XMT("MID")        ;Message ID
"RTN","MHV7R5",94,0)
 S QRY("QPD")=""
"RTN","MHV7R5",95,0)
 ;
"RTN","MHV7R5",96,0)
 ; Validate message is a well-formed QBP query message.
"RTN","MHV7R5",97,0)
 ;-----------------------------------------------------------
"RTN","MHV7R5",98,0)
 ; Must have MSH first, followed by QPD,RCP in any order
"RTN","MHV7R5",99,0)
 ; PID and STF are optional.  All other segments are ignored.
"RTN","MHV7R5",100,0)
 ;
"RTN","MHV7R5",101,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1)
"RTN","MHV7R5",102,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R5",103,0)
 ;
"RTN","MHV7R5",104,0)
 S CNT=2,OCNT=0
"RTN","MHV7R5",105,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R5",106,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R5",107,0)
 . I SEGTYPE="PID" M PID=@MSGROOT@(CNT),QRY("PID")=PID Q
"RTN","MHV7R5",108,0)
 . I SEGTYPE="STF" M STF=@MSGROOT@(CNT),QRY("STF")=STF Q
"RTN","MHV7R5",109,0)
 . I SEGTYPE="QPD" M QPD=@MSGROOT@(CNT),QRY("QPD")=QPD Q
"RTN","MHV7R5",110,0)
 . I SEGTYPE="RCP" M RCP=@MSGROOT@(CNT),QRY("RCP")=RCP Q
"RTN","MHV7R5",111,0)
 . Q
"RTN","MHV7R5",112,0)
 ;
"RTN","MHV7R5",113,0)
 I '$D(QPD) S ERR="QPD^1^^100^AE^Missing QPD segment" Q 0
"RTN","MHV7R5",114,0)
 ;
"RTN","MHV7R5",115,0)
 S QTAG=$G(QPD(1,1,2))               ;Query Tag
"RTN","MHV7R5",116,0)
 S REQID=$G(QPD(2))                  ;Request ID
"RTN","MHV7R5",117,0)
 S REQTYPE=$G(QPD(3,1,1))            ;Request Type
"RTN","MHV7R5",118,0)
 S PRI=$G(RCP(1))                    ;Query Priority
"RTN","MHV7R5",119,0)
 S QTY=$G(RCP(2,1,1))                ;Quantity Limited
"RTN","MHV7R5",120,0)
 S UNIT=$G(RCP(2,1,2))               ;Quantity units
"RTN","MHV7R5",121,0)
 S:REQTYPE="" REQTYPE=$G(QPD(3))     ;Request Type if no other params
"RTN","MHV7R5",122,0)
 ;
"RTN","MHV7R5",123,0)
 ; Validate required fields and query parameters
"RTN","MHV7R5",124,0)
 ;------------------------------------------------------
"RTN","MHV7R5",125,0)
 ;
"RTN","MHV7R5",126,0)
 ; Check for missing/invalid fields
"RTN","MHV7R5",127,0)
 ;
"RTN","MHV7R5",128,0)
 I '$D(QPD(1)) S ERR="QPD^1^1^101^AE^Missing Message Query Name" Q 0
"RTN","MHV7R5",129,0)
 M QNAME=QPD(1)  ;Message Query Name
"RTN","MHV7R5",130,0)
 ;
"RTN","MHV7R5",131,0)
 I QTAG="" S ERR="QPD^1^2^101^AE^Missing Query Tag" Q 0
"RTN","MHV7R5",132,0)
 I REQID="" S ERR="QPD^1^2^101^AE^Missing Request ID" Q 0
"RTN","MHV7R5",133,0)
 S (QRY("IEN"),QRY("LNAME"),QRY("FNAME"),QRY("DFN"))=""
"RTN","MHV7R5",134,0)
 S QRY("REQID")=REQID
"RTN","MHV7R5",135,0)
 ;
"RTN","MHV7R5",136,0)
 I REQTYPE="" S ERR="QPD^1^3^101^AE^Missing Request Type" Q 0
"RTN","MHV7R5",137,0)
 I '$$VALRTYPE^MHV7RU(REQTYPE,.QRY,.ERR) S ERR="QPD^1^3^"_ERR Q 0
"RTN","MHV7R5",138,0)
 ;
"RTN","MHV7R5",139,0)
 ; If we have a PID, validate it and populate query parameters
"RTN","MHV7R5",140,0)
 ; from the PID.
"RTN","MHV7R5",141,0)
 ;
"RTN","MHV7R5",142,0)
 I $D(PID) D VALIDPID
"RTN","MHV7R5",143,0)
 ;
"RTN","MHV7R5",144,0)
 ; If we have a STF, validate it and populate query parameters
"RTN","MHV7R5",145,0)
 ; from the STF.  
"RTN","MHV7R5",146,0)
 ;
"RTN","MHV7R5",147,0)
 I $D(STF) D VALIDSTF
"RTN","MHV7R5",148,0)
 ;
"RTN","MHV7R5",149,0)
 I ERR Q 0
"RTN","MHV7R5",150,0)
 ;
"RTN","MHV7R5",151,0)
 ; If no PID or STF segment sent, Populate parameters 1-3 with the
"RTN","MHV7R5",152,0)
 ; QPD segment data
"RTN","MHV7R5",153,0)
 ;
"RTN","MHV7R5",154,0)
 I '$D(PID),'$D(STF)  D
"RTN","MHV7R5",155,0)
 .S QRY("IEN")=$G(QPD(3,1,2))          ;ien
"RTN","MHV7R5",156,0)
 .S QRY("LNAME")=$$UP^XLFSTR($G(QPD(3,1,3)))        ;Last Name
"RTN","MHV7R5",157,0)
 .S QRY("FNAME")=$$UP^XLFSTR($G(QPD(3,1,4)))        ;First Name
"RTN","MHV7R5",158,0)
 .S QRY("PICN")=$$UP^XLFSTR($G(QPD(3,1,2)))         ;Patient ICN
"RTN","MHV7R5",159,0)
 .S QRY("DSSI")=$$UP^XLFSTR($G(QPD(3,1,3)))         ;DSS Unit IEN
"RTN","MHV7R5",160,0)
 .S QRY("PRDT")=DT                                  ;Procedure Date and Time
"RTN","MHV7R5",161,0)
 .S QRY("DSRCH")=$$UP^XLFSTR($G(QPD(3,1,3)))        ;Diagnoses Search String
"RTN","MHV7R5",162,0)
 .S QRY("FROMDT")=$$UP^XLFSTR($G(QPD(3,1,5)))       ;From Date
"RTN","MHV7R5",163,0)
 .S QRY("TODT")=$$UP^XLFSTR($G(QPD(3,1,6)))         ;To Date
"RTN","MHV7R5",164,0)
 ;
"RTN","MHV7R5",165,0)
 ;Added for MHV*1.0*10 - Validations for SMClinicsByStopCode query Input parameters
"RTN","MHV7R5",166,0)
 I (REQTYPE="SMClinicsByStopCode")&($D(QPD))  D
"RTN","MHV7R5",167,0)
 . I $G(QRY("FNAME"))="" S ERR="QPD^1^6^101^AE^Clinic Secondary(Credit) Stop Code cannot be null" Q
"RTN","MHV7R5",168,0)
 . I ((+$G(QRY("FNAME"))<1)&(+$G(QRY("FNAME"))>999)) S ERR="QPD^1^6^102^AE^Clinic Secondary(Credit) Stop Code "_$G(QRY("FNAME"))_" should be a numeric value in the range 1 to 999." Q
"RTN","MHV7R5",169,0)
 . S MHVCSIE=$$SCIEN^MHVXCLN($G(QRY("FNAME")))
"RTN","MHV7R5",170,0)
 . I $G(MHVCSIE)="" S ERR="QPD^1^6^102^AE^Clinic Secondary(Credit) Stop Code "_$G(QRY("FNAME"))_" Unknown."
"RTN","MHV7R5",171,0)
 ;
"RTN","MHV7R5",172,0)
 ;Added for MHV*1.0*11 - Validations for SMPCMMPatientsForClinic query Input parameters
"RTN","MHV7R5",173,0)
 I (REQTYPE="SMPCMMPatientsForClinic")&($D(QPD))  D
"RTN","MHV7R5",174,0)
 . I $G(QRY("IEN"))="" S ERR="QPD^1^6^101^AE^Clinic IEN cannot be null" Q
"RTN","MHV7R5",175,0)
 ;
"RTN","MHV7R5",176,0)
 ;Added for MHV*1.0*11 - Validations for SMPATEligClassification query Input parameters
"RTN","MHV7R5",177,0)
 I (REQTYPE="SMPatientEClass")&($D(QPD))  D
"RTN","MHV7R5",178,0)
 . I $G(QRY("PICN"))="" S ERR="QPD^1^6^101^AE^Patient ICN cannot be null" Q
"RTN","MHV7R5",179,0)
 . I $G(QRY("DSSI"))="" S ERR="QPD^1^6^102^AE^DSS Unit IEN cannot be null" Q
"RTN","MHV7R5",180,0)
 . I $G(QRY("PRDT"))="" S ERR="QPD^1^6^103^AE^Procedure Date and Time cannot be null" Q
"RTN","MHV7R5",181,0)
 ;
"RTN","MHV7R5",182,0)
 ;Added for MHV*1.0*11 - Validations for SMPatientProblems input parameters
"RTN","MHV7R5",183,0)
 I (REQTYPE="SMPatientProblems")&($D(QPD))  D
"RTN","MHV7R5",184,0)
 . I $G(QRY("PICN"))="" S ERR="QPD^1^6^101^AE^Patient ICN cannot be null" Q
"RTN","MHV7R5",185,0)
 ;
"RTN","MHV7R5",186,0)
 ;Added for MHV*1.0*11 - Validations for SMDiagnoses input parameters
"RTN","MHV7R5",187,0)
 I (REQTYPE="SMDiagnoses")&($D(QPD))  D
"RTN","MHV7R5",188,0)
 . I $G(QRY("DSRCH"))="" S ERR="QPD^1^6^101^AE^Diagnoses Search String cannot be null" Q
"RTN","MHV7R5",189,0)
 I ERR Q 0
"RTN","MHV7R5",190,0)
 ;
"RTN","MHV7R5",191,0)
 S FROMDT=$G(QPD(3,1,5))        ;From Date
"RTN","MHV7R5",192,0)
 S TODT=$G(QPD(3,1,6))          ;To Date
"RTN","MHV7R5",193,0)
 ;
"RTN","MHV7R5",194,0)
 ; Validate from and to date if present
"RTN","MHV7R5",195,0)
 ;
"RTN","MHV7R5",196,0)
 I FROMDT]""  D
"RTN","MHV7R5",197,0)
 .I '$$VALIDDT^MHV7RU(.FROMDT) S ERR="QPD^1^7^102^AE^Invalid From Date"
"RTN","MHV7R5",198,0)
 I TODT]""  D
"RTN","MHV7R5",199,0)
 .I '$$VALIDDT^MHV7RU(.TODT) S ERR="QPD^1^8^102^AE^Invalid To Date"
"RTN","MHV7R5",200,0)
 .I TODT'="",TODT<FROMDT  D
"RTN","MHV7R5",201,0)
 ..S ERR="QPD^1^6^102^AE^To Date precedes From Date"
"RTN","MHV7R5",202,0)
 S QRY("FROMDT")=FROMDT,QRY("TODT")=TODT
"RTN","MHV7R5",203,0)
 I ERR'="" Q 0
"RTN","MHV7R5",204,0)
 ;
"RTN","MHV7R5",205,0)
 I PRI="" S ERR="RCP^1^1^101^AE^Missing Query Priority" Q 0
"RTN","MHV7R5",206,0)
 I ",D,I,"'[(","_PRI_",") S ERR="RCP^1^1^102^AE^Invalid Query Priority" Q 0
"RTN","MHV7R5",207,0)
 S QRY("PRI")=PRI
"RTN","MHV7R5",208,0)
 Q:ERR'="" 0
"RTN","MHV7R5",209,0)
 ;
"RTN","MHV7R5",210,0)
 Q 1
"RTN","MHV7R5",211,0)
 ;
"RTN","MHV7R5",212,0)
VALIDPID ;
"RTN","MHV7R5",213,0)
 ;
"RTN","MHV7R5",214,0)
 ; If the IEN was sent, call the validation utility for
"RTN","MHV7R5",215,0)
 ; PID segments
"RTN","MHV7R5",216,0)
 ;
"RTN","MHV7R5",217,0)
 I $D(PID(3,1,1))  D
"RTN","MHV7R5",218,0)
 .S CHKSEG=$$VALIDPID^MHV7RUS(.PID,.QRY,.ERR)
"RTN","MHV7R5",219,0)
 .S QRY("IEN")=QRY("DFN")
"RTN","MHV7R5",220,0)
 ;
"RTN","MHV7R5",221,0)
 ; If no IEN, populate parameters for name
"RTN","MHV7R5",222,0)
 ;
"RTN","MHV7R5",223,0)
 I QRY("IEN")="",ERR=""  D
"RTN","MHV7R5",224,0)
 .S QRY("LNAME")=$$UP^XLFSTR(PID(5,1,1))
"RTN","MHV7R5",225,0)
 .S:$D(PID(5,1,2)) QRY("FNAME")=$$UP^XLFSTR(PID(5,1,2))
"RTN","MHV7R5",226,0)
 Q
"RTN","MHV7R5",227,0)
VALIDSTF        ;
"RTN","MHV7R5",228,0)
 ;
"RTN","MHV7R5",229,0)
 ; If the IEN was sent, call the validation utility for
"RTN","MHV7R5",230,0)
 ; STF segments
"RTN","MHV7R5",231,0)
 ;
"RTN","MHV7R5",232,0)
 I $D(STF(2))  D  Q
"RTN","MHV7R5",233,0)
 .S QRY("IEN")=$G(STF(2,1,1))
"RTN","MHV7R5",234,0)
 ;
"RTN","MHV7R5",235,0)
 ; If no IEN, populate parameters for name
"RTN","MHV7R5",236,0)
 ;
"RTN","MHV7R5",237,0)
 I $G(STF(3))]"" S QRY("LNAME")=$$UP^XLFSTR($TR(STF(3),"^",""))
"RTN","MHV7R5",238,0)
 I $G(STF(3,1,1))'="" S QRY("LNAME")=$$UP^XLFSTR(STF(3,1,1))
"RTN","MHV7R5",239,0)
 I $G(STF(3,1,2))'="" S QRY("FNAME")=$$UP^XLFSTR(STF(3,1,2))
"RTN","MHV7R5",240,0)
 Q
"RTN","MHV7R6")
0^10^B26508627^B19547499
"RTN","MHV7R6",1,0)
MHV7R6 ;KUM - HL7 RECEIVER FOR TIU TITLES QUERY ; 1/5/13 10:34am
"RTN","MHV7R6",2,0)
 ;;1.0;My HealtheVet;**10,11**;Aug 23, 2005;Build 61
"RTN","MHV7R6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R6",4,0)
 ;
"RTN","MHV7R6",5,0)
 ;  Integration Agreements:
"RTN","MHV7R6",6,0)
 ;        10104 : $$UP^XLFSTR
"RTN","MHV7R6",7,0)
 Q
"RTN","MHV7R6",8,0)
 ;
"RTN","MHV7R6",9,0)
QBPQ13 ;Process QBP^Q13 messages from the MHVSM QBP-Q13 Subscriber protocol
"RTN","MHV7R6",10,0)
 ;
"RTN","MHV7R6",11,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R6",12,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R6",13,0)
 ; if they are missing.
"RTN","MHV7R6",14,0)
 ;
"RTN","MHV7R6",15,0)
 ;  The message will be checked to see if it is a valid query.
"RTN","MHV7R6",16,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R6",17,0)
 ; immediate mode or synchronous query, the realtime request manager
"RTN","MHV7R6",18,0)
 ; is called to handle the query.  This means the query will be
"RTN","MHV7R6",19,0)
 ; processed and a response generated immediately.
"RTN","MHV7R6",20,0)
 ; In the future deferred mode queries may be filed in a database for
"RTN","MHV7R6",21,0)
 ; later processing, or transmission.
"RTN","MHV7R6",22,0)
 ;
"RTN","MHV7R6",23,0)
 ;  Input:
"RTN","MHV7R6",24,0)
 ;          HL7 environment variables
"RTN","MHV7R6",25,0)
 ;
"RTN","MHV7R6",26,0)
 ; Output:
"RTN","MHV7R6",27,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R6",28,0)
 ;          If handled real-time the query response is generated
"RTN","MHV7R6",29,0)
 ;
"RTN","MHV7R6",30,0)
 ;  Integration Agreements
"RTN","MHV7R6",31,0)
 ;
"RTN","MHV7R6",32,0)
 ;          10104 UP^XLFSTR
"RTN","MHV7R6",33,0)
 ;
"RTN","MHV7R6",34,0)
 N MSGROOT,QRY,XMT,ERR,RNAME
"RTN","MHV7R6",35,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R6",36,0)
 ; Inbound query messages are small enough to be held in a local.
"RTN","MHV7R6",37,0)
 ; The following lines commented out support use of global and are
"RTN","MHV7R6",38,0)
 ; left in case use a global becomes necessary.
"RTN","MHV7R6",39,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R6",40,0)
 ;K @MSGROOT
"RTN","MHV7R6",41,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R6",42,0)
 N MHV7MSG
"RTN","MHV7R6",43,0)
 D LOADXMT^MHV7U(.XMT)         ;Load inbound message information
"RTN","MHV7R6",44,0)
 ;
"RTN","MHV7R6",45,0)
 S RNAME=XMT("MESSAGE TYPE")_"-"_XMT("EVENT TYPE")_" RECEIVER"
"RTN","MHV7R6",46,0)
 D LOG^MHVUL2(RNAME,"BEGIN","S","TRACE")
"RTN","MHV7R6",47,0)
 ;
"RTN","MHV7R6",48,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R6",49,0)
 D LOG^MHVUL2("LOAD",MSGROOT,"I","DEBUG")
"RTN","MHV7R6",50,0)
 ;
"RTN","MHV7R6",51,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R6",52,0)
 D LOG^MHVUL2("PARSE",MSGROOT,"I","DEBUG")
"RTN","MHV7R6",53,0)
 ;
"RTN","MHV7R6",54,0)
 I '$$VALIDMSG(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R6",55,0)
 . D LOG^MHVUL2("MSG CHECK","INVALID^"_ERR,"S","ERROR")
"RTN","MHV7R6",56,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R6",57,0)
 D LOG^MHVUL2("MSG CHECK","VALID","S","TRACE")
"RTN","MHV7R6",58,0)
 ;
"RTN","MHV7R6",59,0)
 ; Immediate Mode
"RTN","MHV7R6",60,0)
 ; Deferred mode queries are not supported at this time
"RTN","MHV7R6",61,0)
 D REALTIME^MHVRQI(.QRY,.XMT,.HL)
"RTN","MHV7R6",62,0)
 ;
"RTN","MHV7R6",63,0)
 D LOG^MHVUL2(RNAME,"END","S","TRACE")
"RTN","MHV7R6",64,0)
 D RESET^MHVUL2          ;Clean up TMP used by logging
"RTN","MHV7R6",65,0)
 ;K @MSGROOT
"RTN","MHV7R6",66,0)
 ;
"RTN","MHV7R6",67,0)
 Q
"RTN","MHV7R6",68,0)
 ;
"RTN","MHV7R6",69,0)
VALIDMSG(MSGROOT,QRY,XMT,ERR)   ;Validate message
"RTN","MHV7R6",70,0)
 ;
"RTN","MHV7R6",71,0)
 ;  Messages handled: QBP^Q13
"RTN","MHV7R6",72,0)
 ;
"RTN","MHV7R6",73,0)
 ;  QBP query messages must contain QPD and RCP segments
"RTN","MHV7R6",74,0)
 ;  Any additional segments are ignored
"RTN","MHV7R6",75,0)
 ;
"RTN","MHV7R6",76,0)
 ;  Input:
"RTN","MHV7R6",77,0)
 ;    MSGROOT - Root of array holding message
"RTN","MHV7R6",78,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R6",79,0)
 ;
"RTN","MHV7R6",80,0)
 ; Output:
"RTN","MHV7R6",81,0)
 ;        QRY - Query Array
"RTN","MHV7R6",82,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R6",83,0)
 ;        ERR - segment^sequence^field^code^ACK type^error text
"RTN","MHV7R6",84,0)
 ;
"RTN","MHV7R6",85,0)
 N MSH,PID,STF,QPD,RCP,REQFLDS,REQID,REQTYPE,FROMDT,TODT,PRI,QTAG,QNAME,MHVDCIEN
"RTN","MHV7R6",86,0)
 N SEGTYPE,CNT,OCNT,RXNUM,QTY,UNIT,REQFLDS,CHKSEG
"RTN","MHV7R6",87,0)
 K QRY,ERR
"RTN","MHV7R6",88,0)
 S MHVDCIEN=0
"RTN","MHV7R6",89,0)
 S ERR=""
"RTN","MHV7R6",90,0)
 ;
"RTN","MHV7R6",91,0)
 ; Set up basics for responding to message.
"RTN","MHV7R6",92,0)
 ;-----------------------------------------
"RTN","MHV7R6",93,0)
 S QRY("MID")=XMT("MID")        ;Message ID
"RTN","MHV7R6",94,0)
 S QRY("QPD")=""
"RTN","MHV7R6",95,0)
 ;
"RTN","MHV7R6",96,0)
 ; Validate message is a well-formed QBP query message.
"RTN","MHV7R6",97,0)
 ;-----------------------------------------------------------
"RTN","MHV7R6",98,0)
 ; Must have MSH first, followed by QPD,RCP in any order
"RTN","MHV7R6",99,0)
 ; PID and STF are optional.  All other segments are ignored.
"RTN","MHV7R6",100,0)
 ;
"RTN","MHV7R6",101,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1)
"RTN","MHV7R6",102,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R6",103,0)
 ;
"RTN","MHV7R6",104,0)
 S CNT=2,OCNT=0
"RTN","MHV7R6",105,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R6",106,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R6",107,0)
 . I SEGTYPE="QPD" M QPD=@MSGROOT@(CNT),QRY("QPD")=QPD Q
"RTN","MHV7R6",108,0)
 . I SEGTYPE="RDF" M RDF=@MSGROOT@(CNT) Q
"RTN","MHV7R6",109,0)
 . Q
"RTN","MHV7R6",110,0)
 ;
"RTN","MHV7R6",111,0)
 I '$D(QPD) S ERR="QPD^1^^100^AE^Missing QPD segment" Q 0
"RTN","MHV7R6",112,0)
 ;
"RTN","MHV7R6",113,0)
 S QTAG=$G(QPD(1,1,2))               ;Query Tag
"RTN","MHV7R6",114,0)
 S REQID=$G(QPD(2))                  ;Request ID
"RTN","MHV7R6",115,0)
 S REQTYPE=$G(QPD(3,1,1))            ;Request Type
"RTN","MHV7R6",116,0)
 S:REQTYPE="" REQTYPE=$G(QPD(3))     ;Request Type if no other params
"RTN","MHV7R6",117,0)
 ;
"RTN","MHV7R6",118,0)
 ; Validate required fields and query parameters
"RTN","MHV7R6",119,0)
 ;------------------------------------------------------
"RTN","MHV7R6",120,0)
 ;
"RTN","MHV7R6",121,0)
 ; Check for missing/invalid fields
"RTN","MHV7R6",122,0)
 ;
"RTN","MHV7R6",123,0)
 I '$D(QPD(1)) S ERR="QPD^1^1^101^AE^Missing Message Query Name" Q 0
"RTN","MHV7R6",124,0)
 M QNAME=QPD(1)  ;Message Query Name
"RTN","MHV7R6",125,0)
 ;
"RTN","MHV7R6",126,0)
 I QTAG="" S ERR="QPD^1^2^101^AE^Missing Query Tag" Q 0
"RTN","MHV7R6",127,0)
 I REQID="" S ERR="QPD^1^2^101^AE^Missing Request ID" Q 0
"RTN","MHV7R6",128,0)
 S (QRY("DCLSNM"),QRY("DFN"))=""
"RTN","MHV7R6",129,0)
 S QRY("REQID")=REQID
"RTN","MHV7R6",130,0)
 ;
"RTN","MHV7R6",131,0)
 I REQTYPE="" S ERR="QPD^1^3^101^AE^Missing Request Type" Q 0
"RTN","MHV7R6",132,0)
 I '$$VALRTYPE^MHV7RU(REQTYPE,.QRY,.ERR) S ERR="QPD^1^3^"_ERR Q 0
"RTN","MHV7R6",133,0)
 ;
"RTN","MHV7R6",134,0)
 I ERR Q 0
"RTN","MHV7R6",135,0)
 ;
"RTN","MHV7R6",136,0)
 ; Populate parameters 1-3 with the QPD segment data
"RTN","MHV7R6",137,0)
 ;
"RTN","MHV7R6",138,0)
 S QRY("DCLSNM")=$G(QPD(3,1,3))        ;Document Class Name
"RTN","MHV7R6",139,0)
 I (REQTYPE="TIUTitlesByDocumentClass")&($D(QPD))  D
"RTN","MHV7R6",140,0)
 . I $G(QRY("DCLSNM"))="" S ERR="QPD^1^6^101^AE^Document Class Name cannot be null" Q
"RTN","MHV7R6",141,0)
 . S MHVDCIEN=$$DOCDEF^MHVXTIU($G(QRY("DCLSNM")))
"RTN","MHV7R6",142,0)
 . I $G(MHVDCIEN)=0 S ERR="QPD^1^6^102^AE^Document Class Name "_$G(QRY("DCLSNM"))_" Unknown."
"RTN","MHV7R6",143,0)
 ;
"RTN","MHV7R6",144,0)
 ;Added for MHV*1.0*11 - Validations for SMDSSUnitsByProviderAndAClinic query Input parameters
"RTN","MHV7R6",145,0)
 S QRY("ACLN")=$G(QPD(3,1,2))
"RTN","MHV7R6",146,0)
 S QRY("PDUZ")=$G(QPD(3,1,3))
"RTN","MHV7R6",147,0)
 I (REQTYPE="SMDSSUnitsByProviderAndClinic")&($D(QPD))  D
"RTN","MHV7R6",148,0)
 . I $G(QRY("ACLN"))="" S ERR="QPD^1^6^101^AE^DSS6-Associated Clinic cannot be null" Q
"RTN","MHV7R6",149,0)
 . I $G(QRY("PDUZ"))="" S ERR="QPD^1^6^102^AE^DSS5-Provider DUZ cannot be null" Q
"RTN","MHV7R6",150,0)
 I ERR Q 0
"RTN","MHV7R6",151,0)
 ;
"RTN","MHV7R6",152,0)
 ;Added for MHV*1.0*11 - Validations for SMECSProcedures query Input parameters
"RTN","MHV7R6",153,0)
 S QRY("DSSI")=$G(QPD(3,1,2))
"RTN","MHV7R6",154,0)
 S QRY("LOCI")=$G(QPD(3,1,3))
"RTN","MHV7R6",155,0)
 I (REQTYPE="SMECSProcedures")&($D(QPD))  D
"RTN","MHV7R6",156,0)
 . I $G(QRY("DSSI"))="" S ERR="QPD^1^6^101^AE^DSS Unit IEN cannot be null" Q
"RTN","MHV7R6",157,0)
 . I $G(QRY("LOCI"))="" S ERR="QPD^1^6^102^AE^Location IEN cannot be null" Q
"RTN","MHV7R6",158,0)
 I ERR Q 0
"RTN","MHV7R6",159,0)
 ;
"RTN","MHV7R6",160,0)
 I ERR'="" Q 0
"RTN","MHV7R6",161,0)
 ;
"RTN","MHV7R6",162,0)
 Q 1
"RTN","MHV7R6",163,0)
 ;
"RTN","MHV7R7")
0^14^B33211332^n/a
"RTN","MHV7R7",1,0)
MHV7R7 ;KUM - HL7 RECEIVER FOR ADMIN QUERIES ; 6/7/10 10:34am
"RTN","MHV7R7",2,0)
 ;;1.0;My HealtheVet;**11**;Aug 23, 2005;Build 61
"RTN","MHV7R7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R7",4,0)
 ;
"RTN","MHV7R7",5,0)
 ;  Integration Agreements:
"RTN","MHV7R7",6,0)
 ;        10104 : $$UP^XLFSTR
"RTN","MHV7R7",7,0)
 ;        10104 : $$REPLACE^XLFSTR
"RTN","MHV7R7",8,0)
 Q
"RTN","MHV7R7",9,0)
 ;
"RTN","MHV7R7",10,0)
DFTP03 ;Process DFT^P03 messages from the MHVSM DFT-P03 Subscriber protocol
"RTN","MHV7R7",11,0)
 ;
"RTN","MHV7R7",12,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R7",13,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R7",14,0)
 ; if they are missing.
"RTN","MHV7R7",15,0)
 ;
"RTN","MHV7R7",16,0)
 ;  The message will be checked to see if it is a valid query.
"RTN","MHV7R7",17,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R7",18,0)
 ; immediate mode or synchronous query, the realtime request manager
"RTN","MHV7R7",19,0)
 ; is called to handle the query.  This means the query will be
"RTN","MHV7R7",20,0)
 ; processed and a response generated immediately.
"RTN","MHV7R7",21,0)
 ; In the future deferred mode queries may be filed in a database for
"RTN","MHV7R7",22,0)
 ; later processing, or transmission.
"RTN","MHV7R7",23,0)
 ;
"RTN","MHV7R7",24,0)
 ;  Input:
"RTN","MHV7R7",25,0)
 ;          HL7 environment variables
"RTN","MHV7R7",26,0)
 ;
"RTN","MHV7R7",27,0)
 ; Output:
"RTN","MHV7R7",28,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R7",29,0)
 ;          If handled real-time the query response is generated
"RTN","MHV7R7",30,0)
 ;
"RTN","MHV7R7",31,0)
 ;  Integration Agreements
"RTN","MHV7R7",32,0)
 ;
"RTN","MHV7R7",33,0)
 ;          10104 UP^XLFSTR
"RTN","MHV7R7",34,0)
 ;
"RTN","MHV7R7",35,0)
 N MSGROOT,QRY,XMT,ERR,RNAME
"RTN","MHV7R7",36,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R7",37,0)
 ; Inbound query messages are small enough to be held in a local.
"RTN","MHV7R7",38,0)
 ; The following lines commented out support use of global and are
"RTN","MHV7R7",39,0)
 ; left in case use a global becomes necessary.
"RTN","MHV7R7",40,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R7",41,0)
 ;K @MSGROOT
"RTN","MHV7R7",42,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R7",43,0)
 N MHV7MSG
"RTN","MHV7R7",44,0)
 D LOADXMT^MHV7U(.XMT)         ;Load inbound message information
"RTN","MHV7R7",45,0)
 ;
"RTN","MHV7R7",46,0)
 S RNAME=XMT("MESSAGE TYPE")_"-"_XMT("EVENT TYPE")_" RECEIVER"
"RTN","MHV7R7",47,0)
 D LOG^MHVUL2(RNAME,"BEGIN","S","TRACE")
"RTN","MHV7R7",48,0)
 ;
"RTN","MHV7R7",49,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R7",50,0)
 D LOG^MHVUL2("LOAD",MSGROOT,"I","DEBUG")
"RTN","MHV7R7",51,0)
 ;
"RTN","MHV7R7",52,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R7",53,0)
 D LOG^MHVUL2("PARSE",MSGROOT,"I","DEBUG")
"RTN","MHV7R7",54,0)
 ;
"RTN","MHV7R7",55,0)
 I '$$VALIDMSG(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R7",56,0)
 . D LOG^MHVUL2("MSG CHECK","INVALID^"_ERR,"S","ERROR")
"RTN","MHV7R7",57,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R7",58,0)
 D LOG^MHVUL2("MSG CHECK","VALID","S","TRACE")
"RTN","MHV7R7",59,0)
 ;
"RTN","MHV7R7",60,0)
 ; Immediate Mode
"RTN","MHV7R7",61,0)
 ; Deferred mode queries are not supported at this time
"RTN","MHV7R7",62,0)
 D REALTIME^MHVRQI(.QRY,.XMT,.HL)
"RTN","MHV7R7",63,0)
 ;
"RTN","MHV7R7",64,0)
 D LOG^MHVUL2(RNAME,"END","S","TRACE")
"RTN","MHV7R7",65,0)
 D RESET^MHVUL2          ;Clean up TMP used by logging
"RTN","MHV7R7",66,0)
 ;K @MSGROOT
"RTN","MHV7R7",67,0)
 ;
"RTN","MHV7R7",68,0)
 Q
"RTN","MHV7R7",69,0)
 ;
"RTN","MHV7R7",70,0)
VALIDMSG(MSGROOT,QRY,XMT,ERR)   ;Validate message
"RTN","MHV7R7",71,0)
 ;
"RTN","MHV7R7",72,0)
 ;  Messages handled: DFT^P03
"RTN","MHV7R7",73,0)
 ;
"RTN","MHV7R7",74,0)
 ;  QBP query messages must contain FT1, EVN, PID, PV1, ZEL segments
"RTN","MHV7R7",75,0)
 ;  Any additional segments are ignored
"RTN","MHV7R7",76,0)
 ;
"RTN","MHV7R7",77,0)
 ;  Input:
"RTN","MHV7R7",78,0)
 ;    MSGROOT - Root of array holding message
"RTN","MHV7R7",79,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R7",80,0)
 ;
"RTN","MHV7R7",81,0)
 ; Output:
"RTN","MHV7R7",82,0)
 ;        QRY - Query Array
"RTN","MHV7R7",83,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R7",84,0)
 ;        ERR - segment^sequence^field^code^ACK type^error text
"RTN","MHV7R7",85,0)
 ;
"RTN","MHV7R7",86,0)
 N MSH,PID,STF,QPD,RCP,REQFLDS,REQID,REQTYPE,FROMDT,TODT,PRI,QTAG,QNAME,MHVCSIE
"RTN","MHV7R7",87,0)
 N SEGTYPE,CNT,OCNT,RXNUM,QTY,UNIT,REQFLDS,CHKSEG
"RTN","MHV7R7",88,0)
 K QRY,ERR
"RTN","MHV7R7",89,0)
 S MHVCSIE=""
"RTN","MHV7R7",90,0)
 S ERR=""
"RTN","MHV7R7",91,0)
 ;
"RTN","MHV7R7",92,0)
 ; Set up basics for responding to message.
"RTN","MHV7R7",93,0)
 ;-----------------------------------------
"RTN","MHV7R7",94,0)
 S QRY("MID")=XMT("MID")        ;Message ID
"RTN","MHV7R7",95,0)
 S QRY("QPD")=""
"RTN","MHV7R7",96,0)
 ;
"RTN","MHV7R7",97,0)
 ; Validate message is a well-formed DFT query message.
"RTN","MHV7R7",98,0)
 ;-----------------------------------------------------------
"RTN","MHV7R7",99,0)
 ; Must have MSH first, followed by FT1,EVN,PID,PV1,ZEL in any order
"RTN","MHV7R7",100,0)
 ;  are optional.  All other segments are ignored.
"RTN","MHV7R7",101,0)
 ;
"RTN","MHV7R7",102,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1)
"RTN","MHV7R7",103,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R7",104,0)
 ;
"RTN","MHV7R7",105,0)
 S CNT=2,OCNT=0
"RTN","MHV7R7",106,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R7",107,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R7",108,0)
 . I SEGTYPE="FT1" M FT1=@MSGROOT@(CNT),QRY("FT1")=FT1 Q
"RTN","MHV7R7",109,0)
 . I SEGTYPE="EVN" M EVN=@MSGROOT@(CNT),QRY("EVN")=EVN Q
"RTN","MHV7R7",110,0)
 . I SEGTYPE="PID" M PID=@MSGROOT@(CNT),QRY("PID")=PID Q
"RTN","MHV7R7",111,0)
 . I SEGTYPE="PV1" M PV1=@MSGROOT@(CNT),QRY("PV1")=PV1 Q
"RTN","MHV7R7",112,0)
 . I SEGTYPE="ZEL" M ZEL=@MSGROOT@(CNT),QRY("ZEL")=ZEL Q
"RTN","MHV7R7",113,0)
 . Q
"RTN","MHV7R7",114,0)
 ;
"RTN","MHV7R7",115,0)
 I '$D(FT1) S ERR="FT1^1^^100^AE^Missing FT1 segment" Q 0
"RTN","MHV7R7",116,0)
 I '$D(EVN) S ERR="EVN^1^^100^AE^Missing EVN segment" Q 0
"RTN","MHV7R7",117,0)
 I '$D(PID) S ERR="PID^1^^100^AE^Missing PID segment" Q 0
"RTN","MHV7R7",118,0)
 I '$D(PV1) S ERR="PV1^1^^100^AE^Missing PV1 segment" Q 0
"RTN","MHV7R7",119,0)
 I '$D(ZEL) S ERR="ZEL^1^^100^AE^Missing ZEL segment" Q 0
"RTN","MHV7R7",120,0)
 ;
"RTN","MHV7R7",121,0)
 S (QRY("ECFILE"),QRY("ECL"),QRY("ECD"),QRY("ECC"),QRY("ECDT"),QRY("ECP"),QRY("ECICN"),QRY("ECMN"),QRY("ECDUZ"))=""
"RTN","MHV7R7",122,0)
 S (QRY("ECPTSTAT"),QRY("ECP"),QRY("ECDX"),QRY("EC4"),QRY("ECELCL"))=""
"RTN","MHV7R7",123,0)
 ;
"RTN","MHV7R7",124,0)
 S REQTYPE="SMFiler"
"RTN","MHV7R7",125,0)
 I REQTYPE="" S ERR="MSH^1^3^101^AE^Missing Request Type" Q 0
"RTN","MHV7R7",126,0)
 I '$$VALRTYPE^MHV7RU(REQTYPE,.QRY,.ERR) S ERR="FT1^1^3^"_ERR Q 0
"RTN","MHV7R7",127,0)
 ;
"RTN","MHV7R7",128,0)
 I ERR Q 0
"RTN","MHV7R7",129,0)
 ;
"RTN","MHV7R7",130,0)
 I $D(FT1)  D
"RTN","MHV7R7",131,0)
 .S QRY("ECFILE")=$G(FT1(6))       ;File Number
"RTN","MHV7R7",132,0)
 .S QRY("ECD")=$G(FT1(13))         ; DSS Unit IEN
"RTN","MHV7R7",133,0)
 .S QRY("ECP")=$G(FT1(25,1,2))     ;Procedure
"RTN","MHV7R7",134,0)
 .; Diagnosis codes are seperated by ^.  make change from ^ to ;
"RTN","MHV7R7",135,0)
 .S MHVSPEC("^")=";"
"RTN","MHV7R7",136,0)
 .S QRY("ECDX")=$$REPLACE^XLFSTR($G(FT1(19)),.MHVSPEC)
"RTN","MHV7R7",137,0)
 I $D(EVN)  D
"RTN","MHV7R7",138,0)
 .S QRY("ECL")=$G(EVN(7,1,2))      ;Location IEN
"RTN","MHV7R7",139,0)
 .S QRY("ECDT")=$G(EVN(2))         ;Procedure Date and Time
"RTN","MHV7R7",140,0)
 .S QRY("ECDUZ")=$G(EVN(5))        ;Enter/Edited By
"RTN","MHV7R7",141,0)
 I $D(PID)  D
"RTN","MHV7R7",142,0)
 .S QRY("ECICN")=$G(PID(3))        ;Patient ICN
"RTN","MHV7R7",143,0)
 I $D(PV1)  D
"RTN","MHV7R7",144,0)
 .S QRY("ECMN")=$G(PV1(10))        ;Ordering Section
"RTN","MHV7R7",145,0)
 .; Providers are seperated by ^.  Please make change from ^ to ;.
"RTN","MHV7R7",146,0)
 .S MHVSPEC("^")=";"
"RTN","MHV7R7",147,0)
 .S QRY("ECU")=$$REPLACE^XLFSTR($G(PV1(7)),.MHVSPEC)
"RTN","MHV7R7",148,0)
 .S QRY("EC4")=$G(PV1(3,1,4,2))    ;Associated Clinic
"RTN","MHV7R7",149,0)
 I $D(ZEL)  D
"RTN","MHV7R7",150,0)
 .S QRY("ECPTSTAT")=$G(ZEL(9))     ;Patient Status
"RTN","MHV7R7",151,0)
 .; File classification AO^IR^SC^EC^MST^HNC^C^Project SHAD
"RTN","MHV7R7",152,0)
 .S QRY("ECELCL")=$G(ZEL(2))_";"_$G(ZEL(18))_";"_$G(ZEL(19))_";"_$G(ZEL(31))_";"_$G(ZEL(20))_";"_$G(ZEL(23))_";"
"RTN","MHV7R7",153,0)
 .S QRY("ECELCL")=QRY("ECELCL")_$G(ZEL(42))_";"_$G(ZEL(37))_";"_$G(ZEL(44))
"RTN","MHV7R7",154,0)
 S QRY("ECC")=0
"RTN","MHV7R7",155,0)
 ; All validations should be in Validation routine.  
"RTN","MHV7R7",156,0)
 S MHVSTR=$G(QRY("ECFILE"))_"^"_$G(QRY("ECL"))_"^"_$G(QRY("ECD"))_"^"_$G(QRY("ECC"))_"^"_$G(QRY("ECDT"))_"^"
"RTN","MHV7R7",157,0)
 S MHVSTR=MHVSTR_$G(QRY("ECP"))_"^"_$G(QRY("ECICN"))_"^"_$G(QRY("ECMN"))_"^"_$G(QRY("ECDUZ"))_"^"_$G(QRY("ECPTSTAT"))_"^"
"RTN","MHV7R7",158,0)
 S MHVSTR=MHVSTR_$G(QRY("ECU"))_"^"_$G(QRY("ECDX"))_"^"_$G(QRY("EC4"))_"^"_$G(QRY("ECELCL"))
"RTN","MHV7R7",159,0)
 ;
"RTN","MHV7R7",160,0)
 ;Validations for SMFiler input parameters are in ECFLRPC as they are complex and more
"RTN","MHV7R7",161,0)
 ;
"RTN","MHV7R7",162,0)
 I ERR'="" Q 0
"RTN","MHV7R7",163,0)
 ;
"RTN","MHV7R7",164,0)
 Q 1
"RTN","MHV7R7",165,0)
 ;
"RTN","MHVECFLR")
0^3^B18917133^n/a
"RTN","MHVECFLR",1,0)
MHVECFLR ;KUM - myHealtheVet File Workload ; 6/18/2013
"RTN","MHVECFLR",2,0)
 ;;1.0;My HealtheVet;**11**;June 18, 2013;Build 61
"RTN","MHVECFLR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","MHVECFLR",4,0)
 ;
"RTN","MHVECFLR",5,0)
 Q
"RTN","MHVECFLR",6,0)
 ;
"RTN","MHVECFLR",7,0)
 ;  Integration Agreements:
"RTN","MHVECFLR",8,0)
 ;
"RTN","MHVECFLR",9,0)
 ;                6012 : Event Capture API $$FILE^ECFLRPC
"RTN","MHVECFLR",10,0)
 ;                6013 : ^ECD(D0
"RTN","MHVECFLR",11,0)
 ;                1894 : PCE API $$GETENC^PXAPI
"RTN","MHVECFLR",12,0)
 ;               10004 : $$GET1^DIQ
"RTN","MHVECFLR",13,0)
 ;               10104 : $$REPLACE^XLFSTR
"RTN","MHVECFLR",14,0)
 ;                2701 : $$GETDFN^MPIF001
"RTN","MHVECFLR",15,0)
 ;
"RTN","MHVECFLR",16,0)
 ;
"RTN","MHVECFLR",17,0)
FILE(RESULT,ECSTRING) ;Start filing data into #721
"RTN","MHVECFLR",18,0)
 ;FILE^LOCATION^DSS UNIT^CATEGORY^PROCEDURE DATE TIME^PROCEDURE^PATIENT IEN^ORDERING SECTION^ENTER BY^PAT STATUS^PROVIDER^DX^
"RTN","MHVECFLR",19,0)
 ;ASSOC CLINIC^PATIENT STATUS AND CLASSIFICATION DATA^ELIGIBILITY IEN
"RTN","MHVECFLR",20,0)
 ;
"RTN","MHVECFLR",21,0)
 N MHVDXSTR,MHVCLSTR,DFN,ENCDT,HLOC,MHVVIEN,MHVWLI,ECUA,MHVERR,MHVECX,MHVQUIT,MHVSECS,MHVPDT,MHVVID,MHVSPEC
"RTN","MHVECFLR",22,0)
 ;
"RTN","MHVECFLR",23,0)
 S ECARY("ECFILE")=$P(ECSTRING,"^",1)
"RTN","MHVECFLR",24,0)
 S ECARY("ECL")=$P(ECSTRING,"^",2)     ; Location, Pointer to #4   
"RTN","MHVECFLR",25,0)
 S ECARY("ECD")=$P(ECSTRING,"^",3)     ; DSS Unit, Pointer to #724
"RTN","MHVECFLR",26,0)
 S ECARY("ECC")=$P(ECSTRING,"^",4)     ; Category, Pointer to #726
"RTN","MHVECFLR",27,0)
 ; 
"RTN","MHVECFLR",28,0)
 S MHVPDT=$P(ECSTRING,"^",5)
"RTN","MHVECFLR",29,0)
 S MHVPDT=$E(MHVPDT,1,4)_$E(MHVPDT,6,7)_$E(MHVPDT,9,10)_"@"_$E(MHVPDT,12,13)_$E(MHVPDT,15,16)
"RTN","MHVECFLR",30,0)
 S X=MHVPDT
"RTN","MHVECFLR",31,0)
 S %DT="TS"
"RTN","MHVECFLR",32,0)
 D ^%DT
"RTN","MHVECFLR",33,0)
 S MHVPDT=Y
"RTN","MHVECFLR",34,0)
 S ECARY("ECDT")=MHVPDT                ; Date and Time of Procedure 
"RTN","MHVECFLR",35,0)
 S ECARY("ECP")=$P(ECSTRING,"^",6)     ; Procedure
"RTN","MHVECFLR",36,0)
 ;
"RTN","MHVECFLR",37,0)
 ; Get Patient IEN from Patient ICN
"RTN","MHVECFLR",38,0)
 S MHVPICN=+$P(ECSTRING,"^",7)
"RTN","MHVECFLR",39,0)
 I $G(MHVPICN)'>0 S RESULT(1)="0^No Patient ICN" Q
"RTN","MHVECFLR",40,0)
 S MHVPIEN=$$GETDFN^MPIF001(MHVPICN)
"RTN","MHVECFLR",41,0)
 I $P(MHVPIEN,"^",1)=-1 S RESULT(1)="0^Patient ICN not in Database" Q
"RTN","MHVECFLR",42,0)
 S ECARY("ECDFN")=MHVPIEN              ; Patient IEN for file #2    
"RTN","MHVECFLR",43,0)
 ; 
"RTN","MHVECFLR",44,0)
 ; DO - Retrieve Ordering Section from DSS Unit
"RTN","MHVECFLR",45,0)
 ;
"RTN","MHVECFLR",46,0)
 S ECARY("ECMN")=$P(ECSTRING,"^",8)    ; Ordering Section, Pointer to #723
"RTN","MHVECFLR",47,0)
 S ECARY("ECMN")=$$GET1^DIQ(724,ECARY("ECD"),2,"I")
"RTN","MHVECFLR",48,0)
 S ECARY("ECDUZ")=$P(ECSTRING,"^",9)   ; Entered/Edited by, pointer to #200
"RTN","MHVECFLR",49,0)
 S ECARY("ECPTSTAT")=$P(ECSTRING,"^",10) ; Patient Status
"RTN","MHVECFLR",50,0)
 ;
"RTN","MHVECFLR",51,0)
 ; Loading List of Providers
"RTN","MHVECFLR",52,0)
 ;
"RTN","MHVECFLR",53,0)
 S ECUA=$P(ECSTRING,"^",11)            ; Primary and Secondary Providers
"RTN","MHVECFLR",54,0)
 S MHVERR=0
"RTN","MHVECFLR",55,0)
 F MHVECX=1:1 Q:MHVERR  D
"RTN","MHVECFLR",56,0)
 . I $P(ECUA,";",MHVECX)="" S MHVERR=1 Q
"RTN","MHVECFLR",57,0)
 . S ECARY("ECU"_MHVECX)=$P(ECUA,";",MHVECX)
"RTN","MHVECFLR",58,0)
 ;
"RTN","MHVECFLR",59,0)
 ; Loading List of Diagnosis Codes
"RTN","MHVECFLR",60,0)
 ;
"RTN","MHVECFLR",61,0)
 S ECARY("ECDX")=$S($F($P(ECSTRING,"^",12),";"):$P($P(ECSTRING,"^",12),";",1),1:$P(ECSTRING,"^",12))  ; Primary Diagnosis
"RTN","MHVECFLR",62,0)
 S MHVDXSTR=$P(ECSTRING,"^",12)
"RTN","MHVECFLR",63,0)
 I $F(MHVDXSTR,";")  D
"RTN","MHVECFLR",64,0)
 . S MHVDXSTR=$E(MHVDXSTR,$F(MHVDXSTR,";"),$L(MHVDXSTR))
"RTN","MHVECFLR",65,0)
 . S MHVSPEC(";")="^"
"RTN","MHVECFLR",66,0)
 . S ECARY("ECDXS")=$$REPLACE^XLFSTR(MHVDXSTR,.MHVSPEC)  ; Secondary Diagnosis codes
"RTN","MHVECFLR",67,0)
 ;
"RTN","MHVECFLR",68,0)
 ; Additional Fields 
"RTN","MHVECFLR",69,0)
 ;
"RTN","MHVECFLR",70,0)
 S ECARY("EC4")=$P(ECSTRING,"^",13)               ; Associated Clinic - Pointer to #44 
"RTN","MHVECFLR",71,0)
 ; 
"RTN","MHVECFLR",72,0)
 ; Load Patient Eligibility and Patient Classification data
"RTN","MHVECFLR",73,0)
 ;
"RTN","MHVECFLR",74,0)
 S MHVCLSTR=$P(ECSTRING,"^",14)
"RTN","MHVECFLR",75,0)
 S ECARY("ECELIG")=$S($F(MHVCLSTR,";"):$P(MHVCLSTR,";",1),1:MHVCLSTR)  ; Patient Eligibility
"RTN","MHVECFLR",76,0)
 I $F(MHVCLSTR,";")  D
"RTN","MHVECFLR",77,0)
 . S MHVCLSTR=$E(MHVCLSTR,$F(MHVCLSTR,";"),$L(MHVCLSTR))
"RTN","MHVECFLR",78,0)
 . S MHVSPEC(";")="^"
"RTN","MHVECFLR",79,0)
 . S ECARY("ECLASS")=$$REPLACE^XLFSTR(MHVCLSTR,.MHVSPEC)  ; Patient Classification data
"RTN","MHVECFLR",80,0)
 D FILE^ECFLRPC(.RESULT,.ECARY)
"RTN","MHVECFLR",81,0)
 ;
"RTN","MHVECFLR",82,0)
 ; Retrieve Visit IEN - 5 Seconds Loop till you get Visit IEN
"RTN","MHVECFLR",83,0)
 ;
"RTN","MHVECFLR",84,0)
 S MHVBTIM=$H
"RTN","MHVECFLR",85,0)
 S ENCDT=MHVPDT
"RTN","MHVECFLR",86,0)
 S HLOC=$P(ECSTRING,"^",13)
"RTN","MHVECFLR",87,0)
 S MHVVIEN=0
"RTN","MHVECFLR",88,0)
 S MHVSECS=0
"RTN","MHVECFLR",89,0)
 S MHVQUIT=0
"RTN","MHVECFLR",90,0)
 F MHVECX=1:1 Q:MHVQUIT  D
"RTN","MHVECFLR",91,0)
 . S MHVVIEN=$$GETENC^PXAPI(MHVPIEN,ENCDT,HLOC)
"RTN","MHVECFLR",92,0)
 . I MHVVIEN<=0  D
"RTN","MHVECFLR",93,0)
 . . S MHVETIM=$H
"RTN","MHVECFLR",94,0)
 . . S MHVBTIM(1)=$P(MHVBTIM,",",1),MHVBTIM(2)=$P(MHVBTIM,",",2),MHVETIM(1)=$P(MHVETIM,",",1),MHVETIM(2)=$P(MHVETIM,",",2)
"RTN","MHVECFLR",95,0)
 . . I MHVBTIM(1)=MHVETIM(1) S MHVSECS=MHVETIM(2)-MHVBTIM(2) Q
"RTN","MHVECFLR",96,0)
 . . S MHVSECS=86400*(MHVETIM(1)-MHVBTIM(1))+(MHVETIM(2)-MHVBTIM(2)) Q
"RTN","MHVECFLR",97,0)
 . I ((MHVVIEN>0)!(MHVSECS>=5)) S MHVQUIT=1
"RTN","MHVECFLR",98,0)
 ;
"RTN","MHVECFLR",99,0)
 ; Return IEN of workload
"RTN","MHVECFLR",100,0)
 ;
"RTN","MHVECFLR",101,0)
 S MHVWLI=0
"RTN","MHVECFLR",102,0)
 S MHVWLI=$O(^ECH("APAT",MHVPIEN,MHVPDT,MHVWLI))
"RTN","MHVECFLR",103,0)
 ;
"RTN","MHVECFLR",104,0)
 S RESULT1=""
"RTN","MHVECFLR",105,0)
 S SUB="" F  S SUB=$O(^TMP($J,"ECMSG",SUB)) Q:SUB=""  D
"RTN","MHVECFLR",106,0)
 . S RESULT1=RESULT1_" SUBSCRIPT "_$G(SUB)_":"_$G(^TMP($J,"ECMSG",SUB))
"RTN","MHVECFLR",107,0)
 S RESULT=$G(^TMP($J,"ECMSG",1))
"RTN","MHVECFLR",108,0)
 ;
"RTN","MHVECFLR",109,0)
 ; Populate Workload IEN and Visit IEN
"RTN","MHVECFLR",110,0)
 ;
"RTN","MHVECFLR",111,0)
 I $L(RESULT,"^")=2 S RESULT=RESULT_"^"
"RTN","MHVECFLR",112,0)
 I $G(MHVVIEN)<=0 S MHVVIEN=""
"RTN","MHVECFLR",113,0)
 ;I $G(MHVVIEN)>0 S MHVVID=$$GET1^DIQ(9000010,MHVVIEN,15001)
"RTN","MHVECFLR",114,0)
 S RESULT(1)=RESULT_"^"_$G(MHVWLI)_"^"_$G(MHVVIEN)
"RTN","MHVECFLR",115,0)
 Q
"RTN","MHVUMRPC")
0^2^B45400823^n/a
"RTN","MHVUMRPC",1,0)
MHVUMRPC ;KUM - myHealtheVet Management Utilities ; 6/18/2013
"RTN","MHVUMRPC",2,0)
 ;;1.0;My HealtheVet;**11**;June 18, 2013;Build 61
"RTN","MHVUMRPC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","MHVUMRPC",4,0)
 ;
"RTN","MHVUMRPC",5,0)
 Q
"RTN","MHVUMRPC",6,0)
 ;
"RTN","MHVUMRPC",7,0)
 ;  Integration Agreements:
"RTN","MHVUMRPC",8,0)
 ;
"RTN","MHVUMRPC",9,0)
 ;                5266 : ^SC(D0
"RTN","MHVUMRPC",10,0)
 ;                6013 : ^ECD(D0
"RTN","MHVUMRPC",11,0)
 ;                2051 : LIST^DIC
"RTN","MHVUMRPC",12,0)
 ;                6009 : ^ECJ(D0
"RTN","MHVUMRPC",13,0)
 ;                6009 : ^ECJ("AP"
"RTN","MHVUMRPC",14,0)
 ;                6010 : Event Capture API $$ELIG^ECUERPC
"RTN","MHVUMRPC",15,0)
 ;                6011 : Event Capture API $$PATCLAST^ECUERPC1
"RTN","MHVUMRPC",16,0)
 ;                6016 : Event Capture API $$SRCLST^ECUMRPC1
"RTN","MHVUMRPC",17,0)
 ;                2701 : $$GETDFN^MPIF001
"RTN","MHVUMRPC",18,0)
 ;                1874 : ^EC(725,D0
"RTN","MHVUMRPC",19,0)
 ;                1873 : Read File 721
"RTN","MHVUMRPC",20,0)
 ;                2741 : OE/RR Calls to GMPLUTL2
"RTN","MHVUMRPC",21,0)
 ;                1995 : CPT Code APIs
"RTN","MHVUMRPC",22,0)
 ;                3990 : ICD Code APIs
"RTN","MHVUMRPC",23,0)
 ;                6155 : Read access to DMMS Units in NEW PERSON File 
"RTN","MHVUMRPC",24,0)
 ;               10004 : $$GET1^DIQ
"RTN","MHVUMRPC",25,0)
 ;
"RTN","MHVUMRPC",26,0)
 Q
"RTN","MHVUMRPC",27,0)
DSSUNT(RESULTS,MHVSTRING) ;
"RTN","MHVUMRPC",28,0)
 ;
"RTN","MHVUMRPC",29,0)
 ;This broker entry point returns DSS units from file 724
"RTN","MHVUMRPC",30,0)
 ;        RPC: MHV GETDSSUNIT
"RTN","MHVUMRPC",31,0)
 ;INPUTS         MHVARY - Contains the following subscripted elements
"RTN","MHVUMRPC",32,0)
 ;                ACLNIEN   - Associated Clinic IEN (required) and PRVDUZ - Provider
"RTN","MHVUMRPC",33,0)
 ;               
"RTN","MHVUMRPC",34,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","MHVUMRPC",35,0)
 ;               PIECE - Description
"RTN","MHVUMRPC",36,0)
 ;                 1     IEN of Location
"RTN","MHVUMRPC",37,0)
 ;                 2     Name of Location
"RTN","MHVUMRPC",38,0)
 ;                 3     IEN of DSS Unit
"RTN","MHVUMRPC",39,0)
 ;                 4     Name of DSS Unit
"RTN","MHVUMRPC",40,0)
 ;                 5     Inactive flag (1-Yes/0-No)
"RTN","MHVUMRPC",41,0)
 ;                 6     Send to PCE flag
"RTN","MHVUMRPC",42,0)
 ;
"RTN","MHVUMRPC",43,0)
 N MHVLIEN,MHVLNAM,MHVCIEN,MHVDIEN,MHVDNAM,MHVCNT,MHVDIACT,MHVCHKF,MHVDPCE,MHVR1,MHVR1E,MHVR1C,MHVDIV,MHVDIVN
"RTN","MHVUMRPC",44,0)
 S MHVCNT=0
"RTN","MHVUMRPC",45,0)
 S MHVDPCE=0
"RTN","MHVUMRPC",46,0)
 S MHVCIEN=+$P(MHVSTRING,"^",1)
"RTN","MHVUMRPC",47,0)
 S MHVPDUZ=+$P(MHVSTRING,"^",2)
"RTN","MHVUMRPC",48,0)
 K ^TMP($J,"MHVDUNT")
"RTN","MHVUMRPC",49,0)
 ; Fetch Location IEN and Location Name
"RTN","MHVUMRPC",50,0)
 I '$D(^SC(MHVCIEN,0)) S RESULTS(1)="0^DSS1-No clinic for IEN:"_MHVCIEN Q
"RTN","MHVUMRPC",51,0)
 S MHVLIEN=$$GET1^DIQ(44,+MHVCIEN,3,"I")
"RTN","MHVUMRPC",52,0)
 S MHVLNAM=$$GET1^DIQ(44,+MHVCIEN,3,"E")
"RTN","MHVUMRPC",53,0)
 S MHVDIV=$$GET1^DIQ(44,+MHVCIEN,3.5,"I")
"RTN","MHVUMRPC",54,0)
 S MHVDIVN=$$GET1^DIQ(44,+MHVCIEN,3.5,"E")
"RTN","MHVUMRPC",55,0)
 I +$G(MHVLIEN)=0 S RESULTS(1)="0^DSS1-No Institution found for clinic IEN:"_MHVCIEN Q
"RTN","MHVUMRPC",56,0)
 I $G(MHVLNAM)="" S RESULTS(1)="0^DSS1-No Institution found for clinic IEN:"_MHVCIEN Q
"RTN","MHVUMRPC",57,0)
 I +$G(MHVDIV)=0 S RESULTS(1)="0^DSS2-No Division found for clinic IEN:"_MHVCIEN Q
"RTN","MHVUMRPC",58,0)
 I $G(MHVDIVN)="" S RESULTS(1)="0^DSS2-No Divison found for clinic IEN:"_MHVCIEN Q 
"RTN","MHVUMRPC",59,0)
 ; Fetch DSS Unit IEN from file #200
"RTN","MHVUMRPC",60,0)
 D LIST^DIC(200.72,","_MHVPDUZ_",","@","QP","","","","","","","MHVR1","MHVR1E")
"RTN","MHVUMRPC",61,0)
 I $G(MHVR1("DILIST",0))'>0 S RESULTS(1)="0^DSS3-No DSS Units found in New Person File" Q
"RTN","MHVUMRPC",62,0)
 D:$G(MHVR1("DILIST",0))>0
"RTN","MHVUMRPC",63,0)
 . S MHVR1C=0
"RTN","MHVUMRPC",64,0)
 . F  S MHVR1C=$O(MHVR1("DILIST",MHVR1C))  Q:MHVR1C'>0  D
"RTN","MHVUMRPC",65,0)
 . . S MHVDIEN=$G(MHVR1("DILIST",MHVR1C,0))
"RTN","MHVUMRPC",66,0)
 . . I +$G(MHVDIEN)'>0 Q
"RTN","MHVUMRPC",67,0)
 . . S MHVDNAM=$$GET1^DIQ(724,+MHVDIEN,.01)
"RTN","MHVUMRPC",68,0)
 . . S MHVDIACT=$$GET1^DIQ(724,+MHVDIEN,5,"I")
"RTN","MHVUMRPC",69,0)
 . . S MHVDPCE=$$GET1^DIQ(724,+MHVDIEN,13,"I")
"RTN","MHVUMRPC",70,0)
 . . D MHVCHK
"RTN","MHVUMRPC",71,0)
 . . I (+$G(MHVDIACT)=1)!(MHVCHKF=1)!('$D(^ECJ("AP",MHVLIEN,MHVDIEN))) Q 
"RTN","MHVUMRPC",72,0)
 . . D MHVRST
"RTN","MHVUMRPC",73,0)
 I MHVCNT=0 S RESULTS(1)="0^DSS4-No DSS Units found (Missing Event Code Screen) clinic IEN:"_MHVCIEN Q
"RTN","MHVUMRPC",74,0)
 Q
"RTN","MHVUMRPC",75,0)
MHVRST ;Populate results array
"RTN","MHVUMRPC",76,0)
 S MHVCNT=MHVCNT+1
"RTN","MHVUMRPC",77,0)
 S RESULTS(MHVCNT)=$G(MHVLIEN)_"^"_$G(MHVLNAM)_"^"_$G(MHVDIEN)_"^"_$G(MHVDNAM)_"^"_$G(MHVDIACT)_"^"_$G(MHVDPCE)
"RTN","MHVUMRPC",78,0)
 Q
"RTN","MHVUMRPC",79,0)
MHVCHK ;Check if DSS Unit is already populated in results array
"RTN","MHVUMRPC",80,0)
 S MHVCHKF=0
"RTN","MHVUMRPC",81,0)
 S MHVI=0 F  S MHVI=$O(^TMP($J,"MHVDUNT",MHVI)) Q:'MHVI!MHVCHKF  D
"RTN","MHVUMRPC",82,0)
 . I MHVDIEN=$P(^TMP($J,"MHVDUNT",MHVI),"^",3) S MHVCHKF=1
"RTN","MHVUMRPC",83,0)
 Q
"RTN","MHVUMRPC",84,0)
PRINTRES ; Print Results
"RTN","MHVUMRPC",85,0)
 S I="" F  S I=$O(@RESULTS@(I)) Q:I=""  D
"RTN","MHVUMRPC",86,0)
 . W !,"LOCATIONIEN LOCATIONNAME DSSUNITIEN DSSUNITNAME INACTIVE"
"RTN","MHVUMRPC",87,0)
 . W !,@RESULTS@(I)
"RTN","MHVUMRPC",88,0)
 Q
"RTN","MHVUMRPC",89,0)
DSSPROCS(RESULTS,MHVARY) ; Get Procedures from DSS Unit IEN and Locaiton IEN
"RTN","MHVUMRPC",90,0)
 ; MHVARY IS DSS UNIT IEN AND LOCATION IEN
"RTN","MHVUMRPC",91,0)
 ; RESULTS = Procedure IEN^Procedure 5 digit code and description^synonym^Active flag
"RTN","MHVUMRPC",92,0)
 N MHVLOC,MHVECD,MHVCAT,MHVPX,MHVIEN,MHVNODE,MHVPRO,MHVSYN,MHVPN,MHVSTAT,MHVCNT
"RTN","MHVUMRPC",93,0)
 S MHVLOC=+$P(MHVARY,"^",1)
"RTN","MHVUMRPC",94,0)
 S MHVECD=+$P(MHVARY,"^",2)
"RTN","MHVUMRPC",95,0)
 S MHVCNT=0
"RTN","MHVUMRPC",96,0)
 S MHVCAT="" F  S MHVCAT=$O(^ECJ("AP",MHVLOC,MHVECD,MHVCAT)) Q:MHVCAT=""  D
"RTN","MHVUMRPC",97,0)
 . S MHVPX="" F  S MHVPX=$O(^ECJ("AP",MHVLOC,MHVECD,MHVCAT,MHVPX)) Q:MHVPX=""  S MHVIEN=0 D
"RTN","MHVUMRPC",98,0)
 ..F  S MHVIEN=$O(^ECJ("AP",MHVLOC,MHVECD,MHVCAT,MHVPX,MHVIEN)) Q:'MHVIEN  D
"RTN","MHVUMRPC",99,0)
 ...S MHVNODE=$G(^ECJ(MHVIEN,0)) I MHVNODE="" Q
"RTN","MHVUMRPC",100,0)
 ...S MHVPRO=$G(^ECJ(MHVIEN,"PRO")),MHVSYN=$P(MHVPRO,U,2),MHVPN=$P($P(MHVPRO,U),";")
"RTN","MHVUMRPC",101,0)
 ...I $G(MHVPN)="" Q
"RTN","MHVUMRPC",102,0)
 ...I $P(MHVPRO,U)["EC" S MHVPN=$G(^EC(725,MHVPN,0)),MHVPRO=$P(MHVPN,U,2)_" "_$P(MHVPN,U)
"RTN","MHVUMRPC",103,0)
 ...E  S MHVPN=$$CPT^ICPTCOD(MHVPN) S MHVPRO=$P(MHVPN,U,2)_" "_$P(MHVPN,U,3)
"RTN","MHVUMRPC",104,0)
 ...S MHVSTAT=$S($P(MHVNODE,U,2)'="":"No",1:"Yes")
"RTN","MHVUMRPC",105,0)
 ...; STATUS (Y-Active/N-Inactive)
"RTN","MHVUMRPC",106,0)
 ...I $G(MHVSTAT)="No" Q
"RTN","MHVUMRPC",107,0)
 ...S MHVCNT=MHVCNT+1
"RTN","MHVUMRPC",108,0)
 ...S RESULTS(MHVCNT)=$G(MHVPX)_U_$P($G(MHVPN),U)_U_$P($G(MHVPN),U,2)_U_$G(MHVSYN)_U_$G(MHVSTAT)
"RTN","MHVUMRPC",109,0)
 I MHVCNT=0 S RESULTS(1)="0^No Procedures found for DSS Unit IEN:"_MHVECD_" and Location IEN:"_MHVLOC Q
"RTN","MHVUMRPC",110,0)
 Q
"RTN","MHVUMRPC",111,0)
PATECLS(RESULTS,MHVSTRING) ; Get Patient eligibility and Classification data
"RTN","MHVUMRPC",112,0)
 ; MHVSTRING IS PATIENT ICN, DSS UNIT IEN, PROCEDURE DATE AND TIME IN FILEMAN FORMAT
"RTN","MHVUMRPC",113,0)
 ; RESULTS = PATIENT STATUS ^CLASSIFICATION DATA (AGENT ORANCE, IONIZING RADIATION, SC CONDITION, ENVIRONMENTAL CONTAMINANTS, MILITARY SEXUAL TRUMA
"RTN","MHVUMRPC",114,0)
 ; RESULTS(1,2...)=PRIMARY/SECONDARY FLAG (1-PRIMARY,0-SECONDARY)^ELIGIBILITY IEN^ELIGIBILITY DESCRIPTION
"RTN","MHVUMRPC",115,0)
 N MHVPIEN,MHVECD,MHVPDT,MHVI,MHVCNT,MHVPICN
"RTN","MHVUMRPC",116,0)
 ; Get Patient IEN from Patient ICN
"RTN","MHVUMRPC",117,0)
 S MHVPICN=+$P(MHVSTRING,"^",1)
"RTN","MHVUMRPC",118,0)
 I $G(MHVPICN)'>0 S RESULTS(1)="0^No Patient ICN" Q
"RTN","MHVUMRPC",119,0)
 S MHVPIEN=$$GETDFN^MPIF001(MHVPICN)
"RTN","MHVUMRPC",120,0)
 I $P($G(MHVPIEN),"^",1)=-1 S RESULTS(1)="0^Patient ICN not in Database" Q
"RTN","MHVUMRPC",121,0)
 ;
"RTN","MHVUMRPC",122,0)
 S $P(MHVSTRING,"^",1)=MHVPIEN
"RTN","MHVUMRPC",123,0)
 S MHVECD=$P(MHVSTRING,"^",2)
"RTN","MHVUMRPC",124,0)
 S MHVPDT=$P(MHVSTRING,"^",3)
"RTN","MHVUMRPC",125,0)
 ; GET PATIENT ELIGIBILITY
"RTN","MHVUMRPC",126,0)
 S ECARY=$G(MHVPIEN)
"RTN","MHVUMRPC",127,0)
 D ELIG^ECUERPC(.RESULTS,.ECARY)
"RTN","MHVUMRPC",128,0)
 I $G(RESULTS)="" S RESULTS(1)="0^No Eligibility codes found for Patient DFN:"_MHVPIEN Q 
"RTN","MHVUMRPC",129,0)
 S MHVCNT=0
"RTN","MHVUMRPC",130,0)
 S MHVI="" F  S MHVI=$O(@RESULTS@(MHVI)) Q:MHVI=""  D
"RTN","MHVUMRPC",131,0)
 . S MHVCNT=MHVCNT+1
"RTN","MHVUMRPC",132,0)
 . S RESULTS(MHVCNT)=@RESULTS@(MHVI)
"RTN","MHVUMRPC",133,0)
 I MHVCNT=0 S RESULTS(1)="0^No Eligibility codes found for Patient DFN:"_MHVPIEN Q 
"RTN","MHVUMRPC",134,0)
 ; GET PATIENT CLASSIFICATION DATA
"RTN","MHVUMRPC",135,0)
 S ECARY=MHVSTRING
"RTN","MHVUMRPC",136,0)
 S RESULTS=""
"RTN","MHVUMRPC",137,0)
 D PATCLAST^ECUERPC1(.RESULTS,.ECARY)
"RTN","MHVUMRPC",138,0)
 S RESULTS(0)=RESULTS
"RTN","MHVUMRPC",139,0)
 I RESULTS="" S RESULTS(1)="0^No Classification data found for Patient DFN:"_MHVPIEN Q
"RTN","MHVUMRPC",140,0)
 Q
"RTN","MHVUMRPC",141,0)
DIAGPL(RESULTS,MHVSTRING) ; Get Patient Diagnosis codes from Patient Probelm list
"RTN","MHVUMRPC",142,0)
 ; MHVSTRING IS PATIENT ICN
"RTN","MHVUMRPC",143,0)
 ; RESULTS = DIAGNOSIS CODE IEN^DIAGNOSIS CODE^DESCRIPTION
"RTN","MHVUMRPC",144,0)
 N MHVPIEN,MHVPICN,MHVCNT
"RTN","MHVUMRPC",145,0)
 ; Get Patient IEN from Patient ICN
"RTN","MHVUMRPC",146,0)
 S MHVPICN=+$P(MHVSTRING,"^",1)
"RTN","MHVUMRPC",147,0)
 I $G(MHVPICN)'>0 S RESULTS(1)="0^No Patient ICN" Q
"RTN","MHVUMRPC",148,0)
 S MHVPIEN=$$GETDFN^MPIF001(MHVPICN)
"RTN","MHVUMRPC",149,0)
 I $P($G(MHVPIEN),"^",1)=-1 S RESULTS(1)="0^Patient ICN not in Database" Q
"RTN","MHVUMRPC",150,0)
 ;
"RTN","MHVUMRPC",151,0)
 S $P(MHVSTRING,"^",1)=$G(MHVPIEN)
"RTN","MHVUMRPC",152,0)
 K MHVROOT
"RTN","MHVUMRPC",153,0)
 D LIST^GMPLUTL2(.MHVROOT,MHVPIEN,"A")
"RTN","MHVUMRPC",154,0)
 I $G(MHVROOT(0))<1 S RESULTS(1)="0^No Diagnosis codes found in Patient Problem List" Q
"RTN","MHVUMRPC",155,0)
 S MHVCNT=0
"RTN","MHVUMRPC",156,0)
 F  S MHVCNT=MHVCNT+1 Q:MHVCNT>$G(MHVROOT(0))  D
"RTN","MHVUMRPC",157,0)
 . S MHVDCOD=$P($P(MHVROOT(MHVCNT),"^",4),"/",1)
"RTN","MHVUMRPC",158,0)
 . S MHVDIEN=$P($$CODEN^ICDCODE(MHVDCOD,80),"~",1)
"RTN","MHVUMRPC",159,0)
 . S RESULTS(MHVCNT)=$G(MHVDIEN)_"^"_$G(MHVDCOD)_"^"_$P(MHVROOT(MHVCNT),"^",3)
"RTN","MHVUMRPC",160,0)
 Q
"RTN","MHVUMRPC",161,0)
DIAGSRCH(RESULTS,MHVSTRING) ; Get Diagnosis codes and description from Search string
"RTN","MHVUMRPC",162,0)
 ; MHVSTRING IS SEARCH STRING AND FILE TO SEARCH
"RTN","MHVUMRPC",163,0)
 ; RESULTS = DIAGNOSIS CODE IEN IN FILE 80^DIAGNOSIS CODE^DESCRIPTION
"RTN","MHVUMRPC",164,0)
 N MHVSTR,MHVCNT
"RTN","MHVUMRPC",165,0)
 K MHVROOT
"RTN","MHVUMRPC",166,0)
 ; FILENAME^ICD
"RTN","MHVUMRPC",167,0)
 S MHVSTR=$P(MHVSTRING,U)_"^ICD|"_$P(MHVSTRING,U,2)_"|DT^"
"RTN","MHVUMRPC",168,0)
 D SRCLST^ECUMRPC1(.MHVROOT,.MHVSTR)
"RTN","MHVUMRPC",169,0)
 I $G(MHVROOT)="" S RESULTS(1)="^0^No results found" Q
"RTN","MHVUMRPC",170,0)
 S MHVCNT=0
"RTN","MHVUMRPC",171,0)
 S I="" F  S I=$O(@MHVROOT@(I)) Q:I=""  D
"RTN","MHVUMRPC",172,0)
 . S MHVCNT=MHVCNT+1
"RTN","MHVUMRPC",173,0)
 . S RESULTS(I)=@MHVROOT@(I)
"RTN","MHVUMRPC",174,0)
 . S RESULTS(I)=$P(RESULTS(I),"^",3)_"^"_$P(RESULTS(I),"^",1)_"^"_$P(RESULTS(I),"^",2)
"RTN","MHVUMRPC",175,0)
 I MHVCNT=0 S RESULTS(1)="^0^No results found" Q
"RTN","MHVUMRPC",176,0)
 Q
"RTN","MHVXPAT")
0^16^B69409778^B62150323
"RTN","MHVXPAT",1,0)
MHVXPAT ;WAS/DLF/KUM - Patient extract ; 9/25/08 4:11pm
"RTN","MHVXPAT",2,0)
 ;;1.0;My HealtheVet;**6,9,10,11**;Aug 23, 2005;Build 61
"RTN","MHVXPAT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXPAT",4,0)
 ;
"RTN","MHVXPAT",5,0)
 Q
"RTN","MHVXPAT",6,0)
 ;
"RTN","MHVXPAT",7,0)
 ;  Integration Agreements:
"RTN","MHVXPAT",8,0)
 ;
"RTN","MHVXPAT",9,0)
 ;               10060 : New Person file #200
"RTN","MHVXPAT",10,0)
 ;                1252 : OUTPTPR^SDUTL3
"RTN","MHVXPAT",11,0)
 ;                1916 : PTPR^SCAPMC
"RTN","MHVXPAT",12,0)
 ;                       PRPT^SCAPMC
"RTN","MHVXPAT",13,0)
 ;                3859 : GETAPPT^SDAMA201
"RTN","MHVXPAT",14,0)
 ;                4433 : $$SDAPI^SDAMA301
"RTN","MHVXPAT",15,0)
 ;                2692 : TEAMPTS^ORQPTQ1
"RTN","MHVXPAT",16,0)
 ;                       TMSPT^ORQPTQ1
"RTN","MHVXPAT",17,0)
 ;               10103 : $$DT^XLFDT
"RTN","MHVXPAT",18,0)
 ;                       $$NOW^XLFDT
"RTN","MHVXPAT",19,0)
 ;                       $$HL7TFM$XLFDT
"RTN","MHVXPAT",20,0)
 ;                       
"RTN","MHVXPAT",21,0)
PATCL(QRY,ERR,DATAROOT)             ;Patients for clinic
"RTN","MHVXPAT",22,0)
 ;
"RTN","MHVXPAT",23,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",24,0)
 ; return patient list in dataroot
"RTN","MHVXPAT",25,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",26,0)
 ;
"RTN","MHVXPAT",27,0)
 ;    Input:
"RTN","MHVXPAT",28,0)
 ;       QRY - Query array
"RTN","MHVXPAT",29,0)
 ;       QRY(CLIN IEN) - ien of Hospital location file (#44)
"RTN","MHVXPAT",30,0)
 ;       DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",31,0)
 ;
"RTN","MHVXPAT",32,0)
 ;    Output:
"RTN","MHVXPAT",33,0)
 ;       DATAROOT - Populated data array
"RTN","MHVXPAT",34,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",35,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",36,0)
 ;
"RTN","MHVXPAT",37,0)
 N EXTIME,HIT,LOGND,FROMDT,TODT,RTN,X,ICN,SSN,CLINIEN
"RTN","MHVXPAT",38,0)
 ;
"RTN","MHVXPAT",39,0)
 S RTN=$T(+0),LOGND=RTN_"^PTPCMP"  ; node for logging
"RTN","MHVXPAT",40,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",41,0)
 ; needed vars.
"RTN","MHVXPAT",42,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",43,0)
 ;
"RTN","MHVXPAT",44,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",45,0)
 ;
"RTN","MHVXPAT",46,0)
 I '$G(QRY("FROMDT")) S QRY("FROMDT")=2920101
"RTN","MHVXPAT",47,0)
 I '$G(QRY("TODT")) S QRY("TODT")=DT
"RTN","MHVXPAT",48,0)
 S FROMDT=$G(QRY("FROMDT"))
"RTN","MHVXPAT",49,0)
 S TODT=$G(QRY("TODT"))
"RTN","MHVXPAT",50,0)
 S CLINIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",51,0)
 I '(CLINIEN>0) S ERR="1^Clinic IEN missing" Q
"RTN","MHVXPAT",52,0)
 ; get all PCM patients for CLinic
"RTN","MHVXPAT",53,0)
 D:'ERR
"RTN","MHVXPAT",54,0)
 .N MHVDATES,J,RSLT,RSLTLST,SCER,TM,ICN,PTIEN,MHVARR,MHVSTAT
"RTN","MHVXPAT",55,0)
 .K ^TMP($J,"SDAMA301")
"RTN","MHVXPAT",56,0)
 .S MHVARR(1)=FROMDT_";"_TODT
"RTN","MHVXPAT",57,0)
 .S MHVARR(2)=CLINIEN
"RTN","MHVXPAT",58,0)
 .S MHVARR("FLDS")="4"
"RTN","MHVXPAT",59,0)
 .S MHVARR("SORT")="P"
"RTN","MHVXPAT",60,0)
 .S MHVSTAT=$$SDAPI^SDAMA301(.MHVARR)
"RTN","MHVXPAT",61,0)
 .I MHVSTAT<0 D  Q
"RTN","MHVXPAT",62,0)
 .. S ERRTXT="",ERRNUM=0
"RTN","MHVXPAT",63,0)
 .. S ERRNUM=$O(^TMP($J,"SDAMA301",ERRNUM))
"RTN","MHVXPAT",64,0)
 .. S:ERRNUM'="" ERRTXT=$G(^TMP($J,"SDAMA301",ERRNUM))
"RTN","MHVXPAT",65,0)
 .. S ERR="1^Appointment Extract Error: "_ERRNUM_";"_ERRTXT
"RTN","MHVXPAT",66,0)
 .. K ^TMP($J,"SDAMA301")
"RTN","MHVXPAT",67,0)
 .. Q
"RTN","MHVXPAT",68,0)
 .I MHVSTAT>0 D
"RTN","MHVXPAT",69,0)
 ..;resort appts to ensure same patient can only be added to list once
"RTN","MHVXPAT",70,0)
 ..K ^TMP($J,"RE-SORT","SDAMA301")
"RTN","MHVXPAT",71,0)
 ..S (SDY,SDX)=0
"RTN","MHVXPAT",72,0)
 ..F  S SDX=$O(^TMP($J,"SDAMA301",SDX)) Q:'SDX  D
"RTN","MHVXPAT",73,0)
 ...S SDY=$O(^TMP($J,"SDAMA301",SDX,""))
"RTN","MHVXPAT",74,0)
 ...S ^TMP($J,"RE-SORT","SDAMA301",SDY,SDX)=""
"RTN","MHVXPAT",75,0)
 ..K ^TMP($J,"SDAMA301")
"RTN","MHVXPAT",76,0)
 ..K ^TMP($J,"EXCLPAT")
"RTN","MHVXPAT",77,0)
 ..S (SCDT,DFN)=0
"RTN","MHVXPAT",78,0)
 ..F  S SCDT=$O(^TMP($J,"RE-SORT","SDAMA301",SCDT)) Q:'SCDT  D
"RTN","MHVXPAT",79,0)
 ...F  S DFN=$O(^TMP($J,"RE-SORT","SDAMA301",SCDT,DFN)) Q:'DFN  D
"RTN","MHVXPAT",80,0)
 ....Q:$D(^TMP($J,"EXCLPAT",+DFN))
"RTN","MHVXPAT",81,0)
 ....S ICN=$$GET1^DIQ(2,DFN_",",991.01)
"RTN","MHVXPAT",82,0)
 ....S SSN=$$GET1^DIQ(2,DFN_",",.09)
"RTN","MHVXPAT",83,0)
 ....S HIT=HIT+1,@DATAROOT@(HIT)=DFN_U_""_U_$$GET1^DIQ(2,DFN_",",.01)_U_ICN_U_SSN
"RTN","MHVXPAT",84,0)
 ....S ^TMP($J,"EXCLPAT",+DFN)="Y"
"RTN","MHVXPAT",85,0)
 ;
"RTN","MHVXPAT",86,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",87,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",88,0)
 ;
"RTN","MHVXPAT",89,0)
 Q
"RTN","MHVXPAT",90,0)
PATTM(QRY,ERR,DATAROOT)             ;Patients for team
"RTN","MHVXPAT",91,0)
 ;
"RTN","MHVXPAT",92,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",93,0)
 ; return patient list in dataroot
"RTN","MHVXPAT",94,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",95,0)
 ;
"RTN","MHVXPAT",96,0)
 ;    Input:
"RTN","MHVXPAT",97,0)
 ;       QRY     - Query array
"RTN","MHVXPAT",98,0)
 ;       QRY(P1) - ien of OE/RR list file (#100.21)
"RTN","MHVXPAT",99,0)
 ;       DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",100,0)
 ;
"RTN","MHVXPAT",101,0)
 ;    Output:
"RTN","MHVXPAT",102,0)
 ;       DATAROOT - Populated data array
"RTN","MHVXPAT",103,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",104,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",105,0)
 ;
"RTN","MHVXPAT",106,0)
 N EXTIME,HIT,LOGND,TEAMIEN,RTN,X,ICN,SSN
"RTN","MHVXPAT",107,0)
 ;
"RTN","MHVXPAT",108,0)
 S RTN=$T(+0),LOGND=RTN_"^PATTM"  ; node for logging
"RTN","MHVXPAT",109,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",110,0)
 ; needed vars.
"RTN","MHVXPAT",111,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",112,0)
 ;
"RTN","MHVXPAT",113,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",114,0)
 ;
"RTN","MHVXPAT",115,0)
 S TEAMIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",116,0)
 I '(TEAMIEN>0) S ERR="1^Team IEN missing" Q
"RTN","MHVXPAT",117,0)
 ; get all patients for Team
"RTN","MHVXPAT",118,0)
 N MHVDATES,J,RSLT,RSLTLST,TM,PTIEN,ICN
"RTN","MHVXPAT",119,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"PTTM"))
"RTN","MHVXPAT",120,0)
 S RSLTLST=$E(RSLTLST,1,$L(RSLTLST)-1)_","
"RTN","MHVXPAT",121,0)
 D TEAMPTS^ORQPTQ1(RSLTLST,TEAMIEN,1)
"RTN","MHVXPAT",122,0)
 Q:^TMP(RTN,$J,"PTTM",1)["No patients"
"RTN","MHVXPAT",123,0)
 ; now save results
"RTN","MHVXPAT",124,0)
 S J=0
"RTN","MHVXPAT",125,0)
 F  S J=$O(^TMP(RTN,$J,"PTTM",J))  Q:'J  S TM=$G(^TMP(RTN,$J,"PTTM",J))  D
"RTN","MHVXPAT",126,0)
 .S PTIEN=$P(TM,U,1)
"RTN","MHVXPAT",127,0)
 .S ICN=$$GET1^DIQ(2,PTIEN_",",991.01)
"RTN","MHVXPAT",128,0)
 .S SSN=$$GET1^DIQ(2,PTIEN_",",.09)
"RTN","MHVXPAT",129,0)
 .S HIT=HIT+1,@DATAROOT@(HIT)=PTIEN_U_""_U_$P(TM,U,2)_U_ICN_U_SSN
"RTN","MHVXPAT",130,0)
 ;
"RTN","MHVXPAT",131,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",132,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",133,0)
 ;
"RTN","MHVXPAT",134,0)
 Q
"RTN","MHVXPAT",135,0)
PTPCMP(QRY,ERR,DATAROOT)           ; patients for PCMM provider
"RTN","MHVXPAT",136,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",137,0)
 ; return patient data in DATAROOT
"RTN","MHVXPAT",138,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",139,0)
 ;
"RTN","MHVXPAT",140,0)
 ;  Input:
"RTN","MHVXPAT",141,0)
 ;       QRY - Query array
"RTN","MHVXPAT",142,0)
 ;       QRY("PRVDR IEN") - ien NEW PERSON file (#200)
"RTN","MHVXPAT",143,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",144,0)
 ;
"RTN","MHVXPAT",145,0)
 ;  Output:
"RTN","MHVXPAT",146,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXPAT",147,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",148,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",149,0)
 ;
"RTN","MHVXPAT",150,0)
 N EXTIME,HIT,LOGND,PRVIEN,RTN,X,ICN,SSN
"RTN","MHVXPAT",151,0)
 ;
"RTN","MHVXPAT",152,0)
 S RTN=$T(+0),LOGND=RTN_"^PTPCMP"  ; node for logging
"RTN","MHVXPAT",153,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",154,0)
 ; needed vars.
"RTN","MHVXPAT",155,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",156,0)
 ;
"RTN","MHVXPAT",157,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",158,0)
 ;
"RTN","MHVXPAT",159,0)
 S PRVIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",160,0)
 I '(PRVIEN>0) S ERR="1^provider IEN missing" Q
"RTN","MHVXPAT",161,0)
 ;
"RTN","MHVXPAT",162,0)
 ;
"RTN","MHVXPAT",163,0)
 ; get all PCM patients for provider
"RTN","MHVXPAT",164,0)
 D:'ERR
"RTN","MHVXPAT",165,0)
 .N MHVDATES,J,RSLT,RSLTLST,SCER,TM,PTIEN,ICN
"RTN","MHVXPAT",166,0)
 .S RSLTLST=$NA(^TMP(RTN,$J,"PRVDR"))
"RTN","MHVXPAT",167,0)
 .S MHVDATES("BEGIN")="",MHVDATES("END")=DT  ; only for today
"RTN","MHVXPAT",168,0)
 .S MHVDATES("INCL")=1  ; include all
"RTN","MHVXPAT",169,0)
 .S RSLT=$$PTPR^SCAPMC(PRVIEN,.MHVDATES,"","",RSLTLST,"SCER","")
"RTN","MHVXPAT",170,0)
 .I $G(SCER(0)) D  Q
"RTN","MHVXPAT",171,0)
 ..S ERR="1^errors ("_SCER(0)_") returned by PTPR^SCAPMC"
"RTN","MHVXPAT",172,0)
 .; now save results
"RTN","MHVXPAT",173,0)
 .S J=0
"RTN","MHVXPAT",174,0)
 .F  S J=$O(^TMP(RTN,$J,"PRVDR",J))  Q:'J  S TM=$G(^TMP(RTN,$J,"PRVDR",J))  D
"RTN","MHVXPAT",175,0)
 ..S PTIEN=$P(TM,U,1)
"RTN","MHVXPAT",176,0)
 ..S ICN=$$GET1^DIQ(2,PTIEN_",",991.01)
"RTN","MHVXPAT",177,0)
 ..S SSN=$$GET1^DIQ(2,PTIEN_",",.09)
"RTN","MHVXPAT",178,0)
 ..S HIT=HIT+1,@DATAROOT@(HIT)=PTIEN_U_""_U_$P(TM,U,2)_U_ICN_U_SSN
"RTN","MHVXPAT",179,0)
 ;
"RTN","MHVXPAT",180,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",181,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",182,0)
 ;
"RTN","MHVXPAT",183,0)
 Q
"RTN","MHVXPAT",184,0)
PTREL(QRY,ERR,DATAROOT)                       ; patient relationships
"RTN","MHVXPAT",185,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",186,0)
 ; return patient data in DATAROOT
"RTN","MHVXPAT",187,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",188,0)
 ;
"RTN","MHVXPAT",189,0)
 ;  Input:
"RTN","MHVXPAT",190,0)
 ;       QRY - Query array
"RTN","MHVXPAT",191,0)
 ;       QRY("IEN") - Patient
"RTN","MHVXPAT",192,0)
 ;       QRY("FROMDT") - Begin date
"RTN","MHVXPAT",193,0)
 ;       QRY("TODT") - End Date
"RTN","MHVXPAT",194,0)
 ;
"RTN","MHVXPAT",195,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",196,0)
 ;
"RTN","MHVXPAT",197,0)
 ;  Output:
"RTN","MHVXPAT",198,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXPAT",199,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",200,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",201,0)
 ;
"RTN","MHVXPAT",202,0)
 N EXTIME,HIT,THIT,LOGND,PRVIEN,RTN,X,MHVTEAMS,PATIEN,SCTEAMA
"RTN","MHVXPAT",203,0)
 N SCPOSA,SCUSRA,SCROLEA,SCPURPA,SCER,FROMDT,TODT
"RTN","MHVXPAT",204,0)
 N PPHONE,SSECTION,PTYPE,TYPE,REC
"RTN","MHVXPAT",205,0)
 ;
"RTN","MHVXPAT",206,0)
 S RTN=$T(+0),LOGND=RTN_"^PTREL"  ; node for logging
"RTN","MHVXPAT",207,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",208,0)
 ; needed vars.
"RTN","MHVXPAT",209,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",210,0)
 ;
"RTN","MHVXPAT",211,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",212,0)
 ;
"RTN","MHVXPAT",213,0)
 S PATIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",214,0)
 I '(PATIEN>0) S ERR="1^patient IEN missing" Q
"RTN","MHVXPAT",215,0)
 ;
"RTN","MHVXPAT",216,0)
 ;
"RTN","MHVXPAT",217,0)
 ; get all clinics, providers and PCMM TEAMS for the patient
"RTN","MHVXPAT",218,0)
 ; in the date range
"RTN","MHVXPAT",219,0)
 ;
"RTN","MHVXPAT",220,0)
 Q:ERR
"RTN","MHVXPAT",221,0)
 ;
"RTN","MHVXPAT",222,0)
 N MHVDATES,CLID,J,RSLT,RSLTLST,SCER,TM,PATIEN
"RTN","MHVXPAT",223,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"CLINICS"))
"RTN","MHVXPAT",224,0)
 I '$G(QRY("FROMDT")) S QRY("FROMDT")=2920101
"RTN","MHVXPAT",225,0)
 I '$G(QRY("TODT")) S QRY("TODT")=DT
"RTN","MHVXPAT",226,0)
 S MHVDATES("BEGIN")=QRY("FROMDT")
"RTN","MHVXPAT",227,0)
 S MHVDATES("END")=QRY("TODT")
"RTN","MHVXPAT",228,0)
 S PATIEN=QRY("IEN")
"RTN","MHVXPAT",229,0)
 ;
"RTN","MHVXPAT",230,0)
 ;Load Clinics
"RTN","MHVXPAT",231,0)
 ;
"RTN","MHVXPAT",232,0)
 D GETAPPT^SDAMA201(PATIEN,"1;2","R;NT",QRY("FROMDT"),QRY("TODT"),"")
"RTN","MHVXPAT",233,0)
 I $D(^TMP($J,"SDAMA201","GETAPPT","ERROR")) D  Q
"RTN","MHVXPAT",234,0)
 .S ERR="",ERR=$O(^TMP($J,"SDAMA201","GETAPPT","ERROR",ERR))
"RTN","MHVXPAT",235,0)
 .S ERR="1^"_^TMP($J,"SDAMA201","GETAPPT","ERROR",ERR)
"RTN","MHVXPAT",236,0)
 S REC=""
"RTN","MHVXPAT",237,0)
 F  S REC=$O(^TMP($J,"SDAMA201","GETAPPT",REC)) Q:REC=""  D
"RTN","MHVXPAT",238,0)
 .S CLID=$P(^TMP($J,"SDAMA201","GETAPPT",REC,2),"^",1)
"RTN","MHVXPAT",239,0)
 .Q:$D(^TMP($J,"CLFND",CLID))
"RTN","MHVXPAT",240,0)
 .S @RSLTLST@(REC)=$P(^TMP($J,"SDAMA201","GETAPPT",REC,2),"^",1,2)
"RTN","MHVXPAT",241,0)
 .S ^TMP($J,"CLFND",CLID)=""
"RTN","MHVXPAT",242,0)
 S @RSLTLST@(0)=REC
"RTN","MHVXPAT",243,0)
 K ^TMP($J,"SDAMA201"),^TMP($J,"CLFND")
"RTN","MHVXPAT",244,0)
 ;
"RTN","MHVXPAT",245,0)
 ;Load MHVTEAMS
"RTN","MHVXPAT",246,0)
 ;
"RTN","MHVXPAT",247,0)
 D TMSPT^ORQPTQ1(.MHVTEAMS,PATIEN)
"RTN","MHVXPAT",248,0)
 I MHVTEAMS(1)["No teams" K MHVTEAMS(1)
"RTN","MHVXPAT",249,0)
 M ^TMP("MHVXPAT",$J,"TEAMS")=MHVTEAMS
"RTN","MHVXPAT",250,0)
 ;
"RTN","MHVXPAT",251,0)
 ;Load Providers
"RTN","MHVXPAT",252,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"PROVIDERS"))
"RTN","MHVXPAT",253,0)
 ;S (SCPOSA,SCUSRA,SCROLEA,SCPURPA,SCER)=""
"RTN","MHVXPAT",254,0)
 ;S X=$$PRPT^SCAPMC(PATIEN,.MHVDATES,SCPOSA,SCUSRA,SCROLEA,SCPURPA,RSLTLST,SCER)
"RTN","MHVXPAT",255,0)
 ;
"RTN","MHVXPAT",256,0)
 S X=$$OUTPTPR^SDUTL3(PATIEN) ;MHV*1*9 Always return PC
"RTN","MHVXPAT",257,0)
 I +X  D
"RTN","MHVXPAT",258,0)
 .S ^TMP(RTN,$J,"PROVIDERS",0)=""
"RTN","MHVXPAT",259,0)
 .S ^TMP(RTN,$J,"PROVIDERS",1)=X
"RTN","MHVXPAT",260,0)
 .S $P(^TMP(RTN,$J,"PROVIDERS",1),U,8)="PHYSICIAN-PRIMARY CARE"
"RTN","MHVXPAT",261,0)
 ; now save results
"RTN","MHVXPAT",262,0)
 ;
"RTN","MHVXPAT",263,0)
 N MHVHDAT
"RTN","MHVXPAT",264,0)
 S MHVHDAT=DATAROOT
"RTN","MHVXPAT",265,0)
 S THIT=0
"RTN","MHVXPAT",266,0)
 F TYPE="CLINICS","PROVIDERS","TEAMS"  D
"RTN","MHVXPAT",267,0)
 .S J=0
"RTN","MHVXPAT",268,0)
 .S HIT=0
"RTN","MHVXPAT",269,0)
 .F  S J=$O(^TMP(RTN,$J,TYPE,J))  Q:'J  S TM=$G(^TMP(RTN,$J,TYPE,J))  D
"RTN","MHVXPAT",270,0)
 ..S HIT=HIT+1,THIT=THIT+1,@DATAROOT@(TYPE,HIT)=$P(TM,U)_"^"_$P(TM,U,2)
"RTN","MHVXPAT",271,0)
 ..I TYPE="PROVIDERS"  D
"RTN","MHVXPAT",272,0)
 ...S PPHONE=$$GET1^DIQ(200,$P(TM,U)_",",.132)
"RTN","MHVXPAT",273,0)
 ...S SSECTION=$$GET1^DIQ(200,$P(TM,U)_",",29)
"RTN","MHVXPAT",274,0)
 ...S PTYPE=$P(TM,U,8)
"RTN","MHVXPAT",275,0)
 ...S @DATAROOT@(TYPE,HIT)=@DATAROOT@(TYPE,HIT)_"^"_PTYPE
"RTN","MHVXPAT",276,0)
 ...S @DATAROOT@(TYPE,HIT)=@DATAROOT@(TYPE,HIT)_"^^^^"_PPHONE_"^"_SSECTION
"RTN","MHVXPAT",277,0)
 S @DATAROOT=THIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",278,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",279,0)
 Q
"RTN","MHVXPAT",280,0)
 ;
"RTN","MHVXPAT",281,0)
XITLOG(ND,HT)     ; exit log
"RTN","MHVXPAT",282,0)
 D LOG^MHVUL2(ND,HT_" HITS","S","TRACE")
"RTN","MHVXPAT",283,0)
 D LOG^MHVUL2(ND,"END","S","TRACE") Q
"RTN","MHVXWLC")
0^4^B54155667^n/a
"RTN","MHVXWLC",1,0)
MHVXWLC ;KUM - Extractions for SM Work Load Credit ; 3/5/14 9:10am
"RTN","MHVXWLC",2,0)
 ;;1.0;My HealtheVet;**11**;Mar 05, 2014;Build 61
"RTN","MHVXWLC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXWLC",4,0)
 ;
"RTN","MHVXWLC",5,0)
 Q
"RTN","MHVXWLC",6,0)
 ;
"RTN","MHVXWLC",7,0)
 ;  Integration Agreements:
"RTN","MHVXWLC",8,0)
 ;
"RTN","MHVXWLC",9,0)
 ;               10103 : $$DT^XLFDT
"RTN","MHVXWLC",10,0)
 ;                       $$NOW^XLFDT
"RTN","MHVXWLC",11,0)
 ;               10004 : $$GET1^DIQ
"RTN","MHVXWLC",12,0)
 ;
"RTN","MHVXWLC",13,0)
SPDSS(QRY,ERR,DATAROOT)               ; return all DSS Unts for Provider and Associated Clinic
"RTN","MHVXWLC",14,0)
 ;
"RTN","MHVXWLC",15,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",16,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",17,0)
 ;
"RTN","MHVXWLC",18,0)
 ;  Input:
"RTN","MHVXWLC",19,0)
 ;       QRY - Query array
"RTN","MHVXWLC",20,0)
 ;
"RTN","MHVXWLC",21,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",22,0)
 ;
"RTN","MHVXWLC",23,0)
 ;  Output:
"RTN","MHVXWLC",24,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",25,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",26,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",27,0)
 ;
"RTN","MHVXWLC",28,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVPRDUZ,MHVACIEN,MHVSTRING,MHVDSS,MHVCOUNT,X,MHVC
"RTN","MHVXWLC",29,0)
 ;
"RTN","MHVXWLC",30,0)
 S LOGND=$T(+0)_"^DSSUNIT"  ; node for logging
"RTN","MHVXWLC",31,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",32,0)
 ; needed vars.
"RTN","MHVXWLC",33,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",34,0)
 ;
"RTN","MHVXWLC",35,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",36,0)
 S HIT=0
"RTN","MHVXWLC",37,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",38,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",39,0)
 S MHVPRVDUZ=$G(QRY("PDUZ"))
"RTN","MHVXWLC",40,0)
 S MHVACIEN=$G(QRY("ACLN"))
"RTN","MHVXWLC",41,0)
 S MHVSTRING=MHVACIEN_"^"_MHVPRVDUZ
"RTN","MHVXWLC",42,0)
 D DSSUNT^MHVUMRPC(.MHVDSS,.MHVSTRING)
"RTN","MHVXWLC",43,0)
 F  S MHVCOUNT=$O(MHVDSS(MHVCOUNT)) Q:'MHVCOUNT!($P(MHVDSS(1),"^",1)=0)  D
"RTN","MHVXWLC",44,0)
 .S HIT=HIT+1
"RTN","MHVXWLC",45,0)
 .S @DATAROOT@(HIT)=MHVDSS(MHVCOUNT)
"RTN","MHVXWLC",46,0)
 ;
"RTN","MHVXWLC",47,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",48,0)
 I $P($G(MHVDSS(1)),"^",1)=0 S ERR="1^"_$P($G(MHVDSS(1)),"^",2)
"RTN","MHVXWLC",49,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",50,0)
 ;
"RTN","MHVXWLC",51,0)
 Q
"RTN","MHVXWLC",52,0)
SPECS(QRY,ERR,DATAROOT)               ; return all ECS Procedures from DSS Unts and Location IEN
"RTN","MHVXWLC",53,0)
 ;
"RTN","MHVXWLC",54,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",55,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",56,0)
 ;
"RTN","MHVXWLC",57,0)
 ;  Input:
"RTN","MHVXWLC",58,0)
 ;       QRY - Query array
"RTN","MHVXWLC",59,0)
 ;
"RTN","MHVXWLC",60,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",61,0)
 ;
"RTN","MHVXWLC",62,0)
 ;  Output:
"RTN","MHVXWLC",63,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",64,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",65,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",66,0)
 ;
"RTN","MHVXWLC",67,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVPRDUZ,MHVACIEN,MHVSTRING,MHVDSS,MHVCOUNT,X
"RTN","MHVXWLC",68,0)
 ;
"RTN","MHVXWLC",69,0)
 S LOGND=$T(+0)_"^ECSPROC"  ; node for logging
"RTN","MHVXWLC",70,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",71,0)
 ; needed vars.
"RTN","MHVXWLC",72,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",73,0)
 ;
"RTN","MHVXWLC",74,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",75,0)
 S HIT=0
"RTN","MHVXWLC",76,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",77,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",78,0)
 S MHVDSSIEN=$G(QRY("DSSI"))
"RTN","MHVXWLC",79,0)
 S MHVLOCIEN=$G(QRY("LOCI"))
"RTN","MHVXWLC",80,0)
 S MHVSTRING=MHVDSSIEN_"^"_MHVLOCIEN
"RTN","MHVXWLC",81,0)
 D DSSPROCS^MHVUMRPC(.MHVPROC,.MHVSTRING)
"RTN","MHVXWLC",82,0)
 F  S MHVCOUNT=$O(MHVPROC(MHVCOUNT)) Q:'MHVCOUNT!($P(MHVPROC(1),"^",1)=0)  D
"RTN","MHVXWLC",83,0)
 .S HIT=HIT+1
"RTN","MHVXWLC",84,0)
 .S @DATAROOT@(HIT)=MHVPROC(MHVCOUNT)
"RTN","MHVXWLC",85,0)
 ;
"RTN","MHVXWLC",86,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",87,0)
 I $P($G(MHVPROC(1)),"^",1)=0 S ERR="1^"_$P($G(MHVPROC(1)),"^",2)
"RTN","MHVXWLC",88,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",89,0)
 ;
"RTN","MHVXWLC",90,0)
 Q
"RTN","MHVXWLC",91,0)
PECLASS(QRY,ERR,DATAROOT)               ; returns Patient Eligibility and Classification Data
"RTN","MHVXWLC",92,0)
 ;
"RTN","MHVXWLC",93,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",94,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",95,0)
 ;
"RTN","MHVXWLC",96,0)
 ;  Input:
"RTN","MHVXWLC",97,0)
 ;       QRY - Query array
"RTN","MHVXWLC",98,0)
 ;
"RTN","MHVXWLC",99,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",100,0)
 ;
"RTN","MHVXWLC",101,0)
 ;  Output:
"RTN","MHVXWLC",102,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",103,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",104,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",105,0)
 ;
"RTN","MHVXWLC",106,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVPRDUZ,MHVACIEN,MHVSTRING,MHVDSS,MHVCOUNT,X
"RTN","MHVXWLC",107,0)
 ;
"RTN","MHVXWLC",108,0)
 S LOGND=$T(+0)_"^PATECLASS"  ; node for logging
"RTN","MHVXWLC",109,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",110,0)
 ; needed vars.
"RTN","MHVXWLC",111,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",112,0)
 ;
"RTN","MHVXWLC",113,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",114,0)
 S HIT=0
"RTN","MHVXWLC",115,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",116,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",117,0)
 S MHVPATICN=$G(QRY("PICN"))
"RTN","MHVXWLC",118,0)
 S MHVDSSIEN=$G(QRY("DSSI"))
"RTN","MHVXWLC",119,0)
 S MHVPROCDT=DT
"RTN","MHVXWLC",120,0)
 S MHVSTRING=MHVPATICN_"^"_MHVDSSIEN_"^"_MHVPROCDT
"RTN","MHVXWLC",121,0)
 D PATECLS^MHVUMRPC(.MHVPROC,.MHVSTRING)
"RTN","MHVXWLC",122,0)
 S HIT=HIT+1
"RTN","MHVXWLC",123,0)
 I $G(MHVPROC(MHVCOUNT))="" S MHVPROC(MHVCOUNT)=""
"RTN","MHVXWLC",124,0)
 S @DATAROOT@(HIT)=MHVPROC(MHVCOUNT)
"RTN","MHVXWLC",125,0)
 F  S MHVCOUNT=$O(MHVPROC(MHVCOUNT)) Q:'MHVCOUNT!($P(MHVPROC(1),"^",1)=0)  D
"RTN","MHVXWLC",126,0)
 .S HIT=HIT+1
"RTN","MHVXWLC",127,0)
 .S @DATAROOT@(HIT)=MHVPROC(MHVCOUNT)
"RTN","MHVXWLC",128,0)
 ;
"RTN","MHVXWLC",129,0)
 S HIT=HIT-1 ; To take out Classification count as Classification and Primary eligibility are in one segment
"RTN","MHVXWLC",130,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",131,0)
 I $P($G(MHVPROC(1)),"^",1)=0 S ERR="1^"_$P($G(MHVPROC(1)),"^",2)
"RTN","MHVXWLC",132,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",133,0)
 ;
"RTN","MHVXWLC",134,0)
 Q
"RTN","MHVXWLC",135,0)
SMPPRB(QRY,ERR,DATAROOT)               ; returns Patient Problem list Data
"RTN","MHVXWLC",136,0)
 ;
"RTN","MHVXWLC",137,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",138,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",139,0)
 ;
"RTN","MHVXWLC",140,0)
 ;  Input:
"RTN","MHVXWLC",141,0)
 ;       QRY - Query array
"RTN","MHVXWLC",142,0)
 ;
"RTN","MHVXWLC",143,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",144,0)
 ;
"RTN","MHVXWLC",145,0)
 ;  Output:
"RTN","MHVXWLC",146,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",147,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",148,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",149,0)
 ;
"RTN","MHVXWLC",150,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVPRDUZ,MHVACIEN,MHVSTRING,MHVDSS,MHVCOUNT,X
"RTN","MHVXWLC",151,0)
 ;
"RTN","MHVXWLC",152,0)
 S LOGND=$T(+0)_"^SMPPRB"  ; node for logging
"RTN","MHVXWLC",153,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",154,0)
 ; needed vars.
"RTN","MHVXWLC",155,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",156,0)
 ;
"RTN","MHVXWLC",157,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",158,0)
 S HIT=0
"RTN","MHVXWLC",159,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",160,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",161,0)
 S MHVPATICN=$G(QRY("PICN"))
"RTN","MHVXWLC",162,0)
 S MHVSTRING=MHVPATICN
"RTN","MHVXWLC",163,0)
 D DIAGPL^MHVUMRPC(.MHVPRB,.MHVSTRING)
"RTN","MHVXWLC",164,0)
 F  S MHVCOUNT=$O(MHVPRB(MHVCOUNT)) Q:'MHVCOUNT!($P(MHVPRB(1),"^",1)=0)  D
"RTN","MHVXWLC",165,0)
 .S HIT=HIT+1
"RTN","MHVXWLC",166,0)
 .S @DATAROOT@(HIT)=MHVPRB(MHVCOUNT)
"RTN","MHVXWLC",167,0)
 ;
"RTN","MHVXWLC",168,0)
 S MHVC=1
"RTN","MHVXWLC",169,0)
 I $P($G(@DATAROOT@(MHVC)),"^",2)=0 S HIT=0
"RTN","MHVXWLC",170,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",171,0)
 I $P($G(MHVPRB(1)),"^",1)=0 S ERR="1^"_$P($G(MHVPRB(1)),"^",2)
"RTN","MHVXWLC",172,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",173,0)
 ;
"RTN","MHVXWLC",174,0)
 Q
"RTN","MHVXWLC",175,0)
SMDIAG(QRY,ERR,DATAROOT)               ; returns Diagnosis Search results
"RTN","MHVXWLC",176,0)
 ;
"RTN","MHVXWLC",177,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",178,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",179,0)
 ;
"RTN","MHVXWLC",180,0)
 ;  Input:
"RTN","MHVXWLC",181,0)
 ;       QRY - Query array
"RTN","MHVXWLC",182,0)
 ;
"RTN","MHVXWLC",183,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",184,0)
 ;
"RTN","MHVXWLC",185,0)
 ;  Output:
"RTN","MHVXWLC",186,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",187,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",188,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",189,0)
 ;
"RTN","MHVXWLC",190,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVPRDUZ,MHVACIEN,MHVSTRING,MHVDSS,MHVCOUNT,X,MHVSCHSTR
"RTN","MHVXWLC",191,0)
 ;
"RTN","MHVXWLC",192,0)
 S LOGND=$T(+0)_"^SMDIAG"  ; node for logging
"RTN","MHVXWLC",193,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",194,0)
 ; needed vars.
"RTN","MHVXWLC",195,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",196,0)
 ;
"RTN","MHVXWLC",197,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",198,0)
 S HIT=0
"RTN","MHVXWLC",199,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",200,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",201,0)
 S MHVSCHSTR=$G(QRY("DSRCH"))
"RTN","MHVXWLC",202,0)
 S MHVSTRING="757.01^"_MHVSCHSTR
"RTN","MHVXWLC",203,0)
 D DIAGSRCH^MHVUMRPC(.MHVPRB,.MHVSTRING)
"RTN","MHVXWLC",204,0)
 F  S MHVCOUNT=$O(MHVPRB(MHVCOUNT)) Q:'MHVCOUNT!($P(MHVPRB(1),"^",1)=0)  D
"RTN","MHVXWLC",205,0)
 .S HIT=HIT+1
"RTN","MHVXWLC",206,0)
 .S @DATAROOT@(HIT)=MHVPRB(MHVCOUNT)
"RTN","MHVXWLC",207,0)
 ;
"RTN","MHVXWLC",208,0)
 S MHVC=1
"RTN","MHVXWLC",209,0)
 I $P($G(@DATAROOT@(MHVC)),"^",2)=0 S HIT=0
"RTN","MHVXWLC",210,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",211,0)
 I $P($G(MHVPRB(1)),"^",2)=0 S ERR="1^"_$P($G(MHVPRB(1)),"^",3)
"RTN","MHVXWLC",212,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",213,0)
 ;
"RTN","MHVXWLC",214,0)
 Q
"RTN","MHVXWLC",215,0)
SMFILE(QRY,ERR,DATAROOT)               ; File Workload Credit
"RTN","MHVXWLC",216,0)
 ;
"RTN","MHVXWLC",217,0)
 ; return provider data in DATAROOT
"RTN","MHVXWLC",218,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXWLC",219,0)
 ;
"RTN","MHVXWLC",220,0)
 ;  Input:
"RTN","MHVXWLC",221,0)
 ;       QRY - Query array
"RTN","MHVXWLC",222,0)
 ;
"RTN","MHVXWLC",223,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXWLC",224,0)
 ;
"RTN","MHVXWLC",225,0)
 ;  Output:
"RTN","MHVXWLC",226,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXWLC",227,0)
 ;             includes number of hits and timestamp
"RTN","MHVXWLC",228,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXWLC",229,0)
 ;
"RTN","MHVXWLC",230,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVSTR,MHVCOUNT,X
"RTN","MHVXWLC",231,0)
 ;
"RTN","MHVXWLC",232,0)
 ;FILE^LOCATION^DSS UNIT^CATEGORY^PROCEDURE DATE TIME^PROCEDURE^PATIENT IEN^ORDERING SECTION^ENTER BY^PAT STATUS^PROVIDER^DX^
"RTN","MHVXWLC",233,0)
 ;ASSOC CLINIC^PATIENT STATUS AND CLASSIFICATION DATA^ELIGIBILITY IEN
"RTN","MHVXWLC",234,0)
 ;
"RTN","MHVXWLC",235,0)
 S LOGND=$T(+0)_"^SMDIAG"  ; node for logging
"RTN","MHVXWLC",236,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXWLC",237,0)
 ; needed vars.
"RTN","MHVXWLC",238,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXWLC",239,0)
 ;
"RTN","MHVXWLC",240,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXWLC",241,0)
 S HIT=0
"RTN","MHVXWLC",242,0)
 S MHVCOUNT=0
"RTN","MHVXWLC",243,0)
 ; All validations should be in Validation routine.  
"RTN","MHVXWLC",244,0)
 S MHVSTR=$G(QRY("ECFILE"))_"^"_$G(QRY("ECL"))_"^"_$G(QRY("ECD"))_"^"_$G(QRY("ECC"))_"^"_$G(QRY("ECDT"))_"^"
"RTN","MHVXWLC",245,0)
 S MHVSTR=MHVSTR_$G(QRY("ECP"))_"^"_$G(QRY("ECICN"))_"^"_$G(QRY("ECMN"))_"^"_$G(QRY("ECDUZ"))_"^"_$G(QRY("ECPTSTAT"))_"^"
"RTN","MHVXWLC",246,0)
 S MHVSTR=MHVSTR_$G(QRY("ECU"))_"^"_$G(QRY("ECDX"))_"^"_$G(QRY("EC4"))_"^"_$G(QRY("ECELCL"))
"RTN","MHVXWLC",247,0)
 D FILE^MHVECFLR(.MHVPRB,.MHVSTR)
"RTN","MHVXWLC",248,0)
 S HIT=HIT+1
"RTN","MHVXWLC",249,0)
 S @DATAROOT@(HIT)=MHVPRB(1)
"RTN","MHVXWLC",250,0)
 ;
"RTN","MHVXWLC",251,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXWLC",252,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXWLC",253,0)
 ;
"RTN","MHVXWLC",254,0)
 Q
"RTN","MHVXWLC",255,0)
XITLOG(ND,HT)     ; exit log
"RTN","MHVXWLC",256,0)
 D LOG^MHVUL2(ND,HT_" HITS","S","TRACE")
"RTN","MHVXWLC",257,0)
 D LOG^MHVUL2(ND,"END","S","TRACE") Q
"RTN","MHVXWLC",258,0)
 Q
"VER")
8.0^22.0
"BLD",8068,6)
^14
**END**
**END**

