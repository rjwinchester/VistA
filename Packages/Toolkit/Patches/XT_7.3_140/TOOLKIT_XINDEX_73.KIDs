KIDS Distribution saved on Aug 08, 2019@08:21:55
XT*7.3*140 and XU*8.0*661
**KIDS**:XT*7.3*140^XU*8.0*661^

**INSTALL NAME**
XT*7.3*140
"BLD",1551,0)
XT*7.3*140^TOOLKIT^0^3190808^y
"BLD",1551,1,0)
^^199^199^3190808^^^
"BLD",1551,1,1,0)
Subject:  Update XINDEX to support SACWG changes
"BLD",1551,1,2,0)
 
"BLD",1551,1,3,0)
Category:  ROUTINE
"BLD",1551,1,4,0)
 
"BLD",1551,1,5,0)
 
"BLD",1551,1,6,0)
Description:
"BLD",1551,1,7,0)
============
"BLD",1551,1,8,0)
This build deploys changes to XINDEX and the ZOSF routine via 2 patches
"BLD",1551,1,9,0)
being released in HOST file TOOLKIT_XINDEX_73.KID
"BLD",1551,1,10,0)
  1. Patch XT*7.3*140
"BLD",1551,1,11,0)
    a) Contains 14 XINDEX routines
"BLD",1551,1,12,0)
    b) Will update the XINDEX utility to support the new changes to the
"BLD",1551,1,13,0)
        Standards and Conventions (SAC).  The following changes have been
"BLD",1551,1,14,0)
        approved by SAC Committee:
"BLD",1551,1,15,0)
           1) Routine name and labels can be 16 uppercase characters
"BLD",1551,1,16,0)
           2) Local variable names can be 16 characters. 
"BLD",1551,1,17,0)
           3) Namespaced variables must be all uppercase.
"BLD",1551,1,18,0)
  2. Patch XU*8*661
"BLD",1551,1,19,0)
    a) The ZOSFONT routine
"BLD",1551,1,20,0)
    b) 14 fields from 8 files that references a routine or tag  
"BLD",1551,1,21,0)
 
"BLD",1551,1,22,0)
Patch Components
"BLD",1551,1,23,0)
================
"BLD",1551,1,24,0)
 none
"BLD",1551,1,25,0)
 
"BLD",1551,1,26,0)
 
"BLD",1551,1,27,0)
Blood Bank Clearance
"BLD",1551,1,28,0)
====================
"BLD",1551,1,29,0)
EFFECT ON BLOOD BANK FUNCTIONAL REQUIREMENTS: Patch XT*7.3*140 contains
"BLD",1551,1,30,0)
changes to a package referenced in ProPath standard titled: BBM Team
"BLD",1551,1,31,0)
Review of VistA Patches. This patch does not alter or modify any VistA
"BLD",1551,1,32,0)
Blood Bank software design safeguards or safety critical elements
"BLD",1551,1,33,0)
functions.
"BLD",1551,1,34,0)
 
"BLD",1551,1,35,0)
RISK ANALYSIS: Changes made by patch XT*7.3*140 have no effect on Blood
"BLD",1551,1,36,0)
Bank software functionality, therefore RISK is none.
"BLD",1551,1,37,0)
 
"BLD",1551,1,38,0)
 
"BLD",1551,1,39,0)
Defect Tracking System Ticket(s) & Overview:
"BLD",1551,1,40,0)
============================================ 
"BLD",1551,1,41,0)
Ticket: I9055002FY16 - XINDEX doesn't support SACC changes to routine
"BLD",1551,1,42,0)
        names and tags
"BLD",1551,1,43,0)
 
"BLD",1551,1,44,0)
Problem:
"BLD",1551,1,45,0)
 XINDEX utility needs to support routine name and labels to 16 characters
"BLD",1551,1,46,0)
 and local variables names to 16 characters. Add support for all areas in
"BLD",1551,1,47,0)
 VA FileMan that can contain M code.
"BLD",1551,1,48,0)
 
"BLD",1551,1,49,0)
Resolution:
"BLD",1551,1,50,0)
 Change the following routines to support 16 characters and other M code:
"BLD",1551,1,51,0)
 XINDX1
"BLD",1551,1,52,0)
 XINDX11
"BLD",1551,1,53,0)
 XINDX12
"BLD",1551,1,54,0)
 XINDX13
"BLD",1551,1,55,0)
 XINDX2
"BLD",1551,1,56,0)
 XINDX3
"BLD",1551,1,57,0)
 XINDX5
"BLD",1551,1,58,0)
 XINDX51
"BLD",1551,1,59,0)
 XINDX52
"BLD",1551,1,60,0)
 XINDX53
"BLD",1551,1,61,0)
 XINDX6
"BLD",1551,1,62,0)
 XINDX7
"BLD",1551,1,63,0)
 XINDX8
"BLD",1551,1,64,0)
 XINDX9 
"BLD",1551,1,65,0)
 
"BLD",1551,1,66,0)
 
"BLD",1551,1,67,0)
Test Site:
"BLD",1551,1,68,0)
==========
"BLD",1551,1,69,0)
Fargo, ND
"BLD",1551,1,70,0)
South Texas, TX
"BLD",1551,1,71,0)
 
"BLD",1551,1,72,0)
 
"BLD",1551,1,73,0)
Software and Documentation Retrieve Instructions:
"BLD",1551,1,74,0)
=================================================
"BLD",1551,1,75,0)
No changes have been made to Kernel documentation as a result of this
"BLD",1551,1,76,0)
patch.  However, the most up-to-date VA Kernel documentation is
"BLD",1551,1,77,0)
available on the VHA Software Documentation Library (VDL) at the
"BLD",1551,1,78,0)
following:
"BLD",1551,1,79,0)
 http://domain.ext/vdl/application.asp?appid=10
"BLD",1551,1,80,0)
 
"BLD",1551,1,81,0)
An updated copy of the SAC is available at:
"BLD",1551,1,82,0)
 http://go.domain/sacc
"BLD",1551,1,83,0)
 
"BLD",1551,1,84,0)
Download TOOLKIT_XINDEX_73.KID from the ftp site.  The preferred method is
"BLD",1551,1,85,0)
to SFTP the file from sftp://download.domaindomain.ext/.  This transmits the
"BLD",1551,1,86,0)
file from the first available SFTP server. Sites may also elect to retrieve
"BLD",1551,1,87,0)
software directly from a specific server as follows:
"BLD",1551,1,88,0)
 
"BLD",1551,1,89,0)
Hines             sftp://ftp.fo-hines.domain.ext
"BLD",1551,1,90,0)
Salt Lake City    sftp://ftp.fo-slc.domain.ext
"BLD",1551,1,91,0)
 
"BLD",1551,1,92,0)
The necessary file is TOOLKIT_XINDEX_73.KID, which is an ASCII file.
"BLD",1551,1,93,0)
Make a note of the directory name where the file was saved.
"BLD",1551,1,94,0)
 
"BLD",1551,1,95,0)
 
"BLD",1551,1,96,0)
Patch Installation:
"BLD",1551,1,97,0)
===================
"BLD",1551,1,98,0)
 
"BLD",1551,1,99,0)
Pre-Installation Instructions:
"BLD",1551,1,100,0)
 
"BLD",1551,1,101,0)
This patch may be installed with users on the system although it is
"BLD",1551,1,102,0)
recommended that it be installed during non-peak hours to minimize
"BLD",1551,1,103,0)
potential disruption to users.  This patch should take less than 1 minutes
"BLD",1551,1,104,0)
to install.  TaskMan doesn't need to be stopped or paused
"BLD",1551,1,105,0)
 
"BLD",1551,1,106,0)
Installation Instructions:
"BLD",1551,1,107,0)
  
"BLD",1551,1,108,0)
 1. From the Kernel Installation and Distribution System (KIDS) menu select
"BLD",1551,1,109,0)
    Installation Menu.
"BLD",1551,1,110,0)
   
"BLD",1551,1,111,0)
 2. Use the Load a Distribution option to load the TOOLKIT_XINDEX_73.KID file
"BLD",1551,1,112,0)
 
"BLD",1551,1,113,0)
 3. You may select the following options:
"BLD",1551,1,114,0)
 
"BLD",1551,1,115,0)
    A. Select the Verify Checksums in Transport Global option to confirm 
"BLD",1551,1,116,0)
       the integrity of the routines that are in the transport global. When 
"BLD",1551,1,117,0)
       prompted for the INSTALL NAME enter XT*7.3*140
"BLD",1551,1,118,0)
 
"BLD",1551,1,119,0)
        NOTE: Using <spacebar><enter> will not bring up a Multi-Package build 
"BLD",1551,1,120,0)
              even if it was loaded immediately before this step. It will only 
"BLD",1551,1,121,0)
              bring up the last patch in the build.
"BLD",1551,1,122,0)
 
"BLD",1551,1,123,0)
    B. Select the Backup a Transport Global option to create a backup message
"BLD",1551,1,124,0)
       of any routines exported with this patch. It will not backup any other
"BLD",1551,1,125,0)
       changes such as DDs or templates. 
"BLD",1551,1,126,0)
 
"BLD",1551,1,127,0)
    C. You may also elect to use the following options: 
"BLD",1551,1,128,0)
         i.  Print Transport Global - This option will allow you to view
"BLD",1551,1,129,0)
             the components of the KIDS build.
"BLD",1551,1,130,0)
         ii. Compare Transport Global to Current System - This option will
"BLD",1551,1,131,0)
             allow you to view all changes that will be made when this patch
"BLD",1551,1,132,0)
             is installed.  It compares all of the components of this patch,
"BLD",1551,1,133,0)
             such as routines, DDs, templates, etc.
"BLD",1551,1,134,0)
 
"BLD",1551,1,135,0)
    D. Select the Install Package(s) option and choose the patch to install. 
"BLD",1551,1,136,0)
   
"BLD",1551,1,137,0)
          Select Installation Option: Install Package(s)
"BLD",1551,1,138,0)
          Select INSTALL NAME: XT*7.3*140
"BLD",1551,1,139,0)
 
"BLD",1551,1,140,0)
     Want KIDS to INHIBIT LOGONs during the install? NO//
"BLD",1551,1,141,0)
 
"BLD",1551,1,142,0)
     Want to DISABLE Scheduled Options, Menu Options, and Protocols? NO// 
"BLD",1551,1,143,0)
 
"BLD",1551,1,144,0)
 
"BLD",1551,1,145,0)
 Post-Installation Instructions:
"BLD",1551,1,146,0)
 -------------------------------
"BLD",1551,1,147,0)
 none
"BLD",1551,1,148,0)
  
"BLD",1551,1,149,0)
   
"BLD",1551,1,150,0)
 Backout and Rollback Procedure:
"BLD",1551,1,151,0)
 ------------------------------- 
"BLD",1551,1,152,0)
 If rollback/backout is required, the installer can restore the routines
"BLD",1551,1,153,0)
 using the MailMan message that were saved prior to installing the
"BLD",1551,1,154,0)
 patch.  The Data Dictionary changes are backwards compatible and can stay
"BLD",1551,1,155,0)
 in production.
"BLD",1551,1,156,0)
 
"BLD",1551,1,157,0)
 
"BLD",1551,1,158,0)
 Routine Information:
"BLD",1551,1,159,0)
====================
"BLD",1551,1,160,0)
 
"BLD",1551,1,161,0)
The second line of each of these routines now looks like:
"BLD",1551,1,162,0)
 ;;7.3;TOOLKIT;**[Patch List]**;Apr 25, 1995;Build 38
"BLD",1551,1,163,0)
 
"BLD",1551,1,164,0)
The checksums below are new checksums, and
"BLD",1551,1,165,0)
 can be checked with CHECK1^XTSUMBLD.
"BLD",1551,1,166,0)
 
"BLD",1551,1,167,0)
Routine Name: XINDX1
"BLD",1551,1,168,0)
    Before: B20704192   After: B21263152  **20,61,66,68,110,121,128,133,140**
"BLD",1551,1,169,0)
Routine Name: XINDX11
"BLD",1551,1,170,0)
    Before: B11308547   After: B37513284  **20,27,121,132,140**
"BLD",1551,1,171,0)
Routine Name: XINDX12
"BLD",1551,1,172,0)
    Before:       n/a   After: B86657332  **140**
"BLD",1551,1,173,0)
Routine Name: XINDX13
"BLD",1551,1,174,0)
    Before:       n/a   After:B306834020  **140**
"BLD",1551,1,175,0)
Routine Name: XINDX2
"BLD",1551,1,176,0)
    Before: B28042462   After: B28369536  **20,27,48,110,121,133,140**
"BLD",1551,1,177,0)
Routine Name: XINDX3
"BLD",1551,1,178,0)
    Before: B15082410   After: B15493765  **20,27,61,68,110,121,128,132,
"BLD",1551,1,179,0)
                                          133,140**
"BLD",1551,1,180,0)
Routine Name: XINDX5
"BLD",1551,1,181,0)
    Before: B11294544   After: B11300370  **20,27,61,121,133,140**
"BLD",1551,1,182,0)
Routine Name: XINDX51
"BLD",1551,1,183,0)
    Before: B26771263   After: B32298369  **20,48,61,110,133,140**
"BLD",1551,1,184,0)
Routine Name: XINDX52
"BLD",1551,1,185,0)
    Before:  B2709275   After:  B2792889  **20,140**
"BLD",1551,1,186,0)
Routine Name: XINDX53
"BLD",1551,1,187,0)
    Before:  B6321698   After:  B6801223  **20,140**
"BLD",1551,1,188,0)
Routine Name: XINDX6
"BLD",1551,1,189,0)
    Before: B20048257   After: B20500720  **20,27,66,110,132,140**
"BLD",1551,1,190,0)
Routine Name: XINDX7
"BLD",1551,1,191,0)
    Before: B10829991   After: B11070196  **20,27,48,68,110,140**
"BLD",1551,1,192,0)
Routine Name: XINDX8
"BLD",1551,1,193,0)
    Before: B15029849   After: B15758649  **20,27,61,140**
"BLD",1551,1,194,0)
Routine Name: XINDX9
"BLD",1551,1,195,0)
    Before: B32506175   After: B33427538  **20,27,48,61,66,68,110,121,
"BLD",1551,1,196,0)
                                          132,133,140**
"BLD",1551,1,197,0)
 
"BLD",1551,1,198,0)
Routine list of preceding patches: 133
"BLD",1551,1,199,0)
  
"BLD",1551,4,0)
^9.64PA^^
"BLD",1551,6.3)
40
"BLD",1551,"KRN",0)
^9.67PA^9002226^22
"BLD",1551,"KRN",.4,0)
.4
"BLD",1551,"KRN",.401,0)
.401
"BLD",1551,"KRN",.402,0)
.402
"BLD",1551,"KRN",.403,0)
.403
"BLD",1551,"KRN",.5,0)
.5
"BLD",1551,"KRN",.84,0)
.84
"BLD",1551,"KRN",3.6,0)
3.6
"BLD",1551,"KRN",3.8,0)
3.8
"BLD",1551,"KRN",9.2,0)
9.2
"BLD",1551,"KRN",9.8,0)
9.8
"BLD",1551,"KRN",9.8,"NM",0)
^9.68A^14^14
"BLD",1551,"KRN",9.8,"NM",1,0)
XINDX2^^0^B28369536
"BLD",1551,"KRN",9.8,"NM",2,0)
XINDX3^^0^B15493765
"BLD",1551,"KRN",9.8,"NM",3,0)
XINDX5^^0^B11300370
"BLD",1551,"KRN",9.8,"NM",4,0)
XINDX6^^0^B20500720
"BLD",1551,"KRN",9.8,"NM",5,0)
XINDX7^^0^B11070196
"BLD",1551,"KRN",9.8,"NM",6,0)
XINDX8^^0^B15758649
"BLD",1551,"KRN",9.8,"NM",7,0)
XINDX1^^0^B21263152
"BLD",1551,"KRN",9.8,"NM",8,0)
XINDX9^^0^B33427538
"BLD",1551,"KRN",9.8,"NM",9,0)
XINDX51^^0^B32298369
"BLD",1551,"KRN",9.8,"NM",10,0)
XINDX12^^0^B86657332
"BLD",1551,"KRN",9.8,"NM",11,0)
XINDX13^^0^B306834020
"BLD",1551,"KRN",9.8,"NM",12,0)
XINDX11^^0^B37513284
"BLD",1551,"KRN",9.8,"NM",13,0)
XINDX52^^0^B2792889
"BLD",1551,"KRN",9.8,"NM",14,0)
XINDX53^^0^B6801223
"BLD",1551,"KRN",9.8,"NM","B","XINDX1",7)

"BLD",1551,"KRN",9.8,"NM","B","XINDX11",12)

"BLD",1551,"KRN",9.8,"NM","B","XINDX12",10)

"BLD",1551,"KRN",9.8,"NM","B","XINDX13",11)

"BLD",1551,"KRN",9.8,"NM","B","XINDX2",1)

"BLD",1551,"KRN",9.8,"NM","B","XINDX3",2)

"BLD",1551,"KRN",9.8,"NM","B","XINDX5",3)

"BLD",1551,"KRN",9.8,"NM","B","XINDX51",9)

"BLD",1551,"KRN",9.8,"NM","B","XINDX52",13)

"BLD",1551,"KRN",9.8,"NM","B","XINDX53",14)

"BLD",1551,"KRN",9.8,"NM","B","XINDX6",4)

"BLD",1551,"KRN",9.8,"NM","B","XINDX7",5)

"BLD",1551,"KRN",9.8,"NM","B","XINDX8",6)

"BLD",1551,"KRN",9.8,"NM","B","XINDX9",8)

"BLD",1551,"KRN",19,0)
19
"BLD",1551,"KRN",19.1,0)
19.1
"BLD",1551,"KRN",101,0)
101
"BLD",1551,"KRN",409.61,0)
409.61
"BLD",1551,"KRN",771,0)
771
"BLD",1551,"KRN",779.2,0)
779.2
"BLD",1551,"KRN",870,0)
870
"BLD",1551,"KRN",8989.51,0)
8989.51
"BLD",1551,"KRN",8989.52,0)
8989.52
"BLD",1551,"KRN",8993,0)
8993
"BLD",1551,"KRN",8994,0)
8994
"BLD",1551,"KRN",9002226,0)
9002226
"BLD",1551,"KRN","B",.4,.4)

"BLD",1551,"KRN","B",.401,.401)

"BLD",1551,"KRN","B",.402,.402)

"BLD",1551,"KRN","B",.403,.403)

"BLD",1551,"KRN","B",.5,.5)

"BLD",1551,"KRN","B",.84,.84)

"BLD",1551,"KRN","B",3.6,3.6)

"BLD",1551,"KRN","B",3.8,3.8)

"BLD",1551,"KRN","B",9.2,9.2)

"BLD",1551,"KRN","B",9.8,9.8)

"BLD",1551,"KRN","B",19,19)

"BLD",1551,"KRN","B",19.1,19.1)

"BLD",1551,"KRN","B",101,101)

"BLD",1551,"KRN","B",409.61,409.61)

"BLD",1551,"KRN","B",771,771)

"BLD",1551,"KRN","B",779.2,779.2)

"BLD",1551,"KRN","B",870,870)

"BLD",1551,"KRN","B",8989.51,8989.51)

"BLD",1551,"KRN","B",8989.52,8989.52)

"BLD",1551,"KRN","B",8993,8993)

"BLD",1551,"KRN","B",8994,8994)

"BLD",1551,"KRN","B",9002226,9002226)

"BLD",1551,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1551,"QUES",0)
^9.62^^
"BLD",1551,"REQB",0)
^9.611^^
"MBREQ")
0
"PKG",6,-1)
1^1
"PKG",6,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP^
"PKG",6,22,0)
^9.49I^1^1
"PKG",6,22,1,0)
7.3^3151102^2970513^2
"PKG",6,22,1,"PAH",1,0)
140^3190808^6
"PKG",6,22,1,"PAH",1,1,0)
^^199^199^3190808
"PKG",6,22,1,"PAH",1,1,1,0)
Subject:  Update XINDEX to support SACWG changes
"PKG",6,22,1,"PAH",1,1,2,0)
 
"PKG",6,22,1,"PAH",1,1,3,0)
Category:  ROUTINE
"PKG",6,22,1,"PAH",1,1,4,0)
 
"PKG",6,22,1,"PAH",1,1,5,0)
 
"PKG",6,22,1,"PAH",1,1,6,0)
Description:
"PKG",6,22,1,"PAH",1,1,7,0)
============
"PKG",6,22,1,"PAH",1,1,8,0)
This build deploys changes to XINDEX and the ZOSF routine via 2 patches
"PKG",6,22,1,"PAH",1,1,9,0)
being released in HOST file TOOLKIT_XINDEX_73.KID
"PKG",6,22,1,"PAH",1,1,10,0)
  1. Patch XT*7.3*140
"PKG",6,22,1,"PAH",1,1,11,0)
    a) Contains 14 XINDEX routines
"PKG",6,22,1,"PAH",1,1,12,0)
    b) Will update the XINDEX utility to support the new changes to the
"PKG",6,22,1,"PAH",1,1,13,0)
        Standards and Conventions (SAC).  The following changes have been
"PKG",6,22,1,"PAH",1,1,14,0)
        approved by SAC Committee:
"PKG",6,22,1,"PAH",1,1,15,0)
           1) Routine name and labels can be 16 uppercase characters
"PKG",6,22,1,"PAH",1,1,16,0)
           2) Local variable names can be 16 characters. 
"PKG",6,22,1,"PAH",1,1,17,0)
           3) Namespaced variables must be all uppercase.
"PKG",6,22,1,"PAH",1,1,18,0)
  2. Patch XU*8*661
"PKG",6,22,1,"PAH",1,1,19,0)
    a) The ZOSFONT routine
"PKG",6,22,1,"PAH",1,1,20,0)
    b) 14 fields from 8 files that references a routine or tag  
"PKG",6,22,1,"PAH",1,1,21,0)
 
"PKG",6,22,1,"PAH",1,1,22,0)
Patch Components
"PKG",6,22,1,"PAH",1,1,23,0)
================
"PKG",6,22,1,"PAH",1,1,24,0)
 none
"PKG",6,22,1,"PAH",1,1,25,0)
 
"PKG",6,22,1,"PAH",1,1,26,0)
 
"PKG",6,22,1,"PAH",1,1,27,0)
Blood Bank Clearance
"PKG",6,22,1,"PAH",1,1,28,0)
====================
"PKG",6,22,1,"PAH",1,1,29,0)
EFFECT ON BLOOD BANK FUNCTIONAL REQUIREMENTS: Patch XT*7.3*140 contains
"PKG",6,22,1,"PAH",1,1,30,0)
changes to a package referenced in ProPath standard titled: BBM Team
"PKG",6,22,1,"PAH",1,1,31,0)
Review of VistA Patches. This patch does not alter or modify any VistA
"PKG",6,22,1,"PAH",1,1,32,0)
Blood Bank software design safeguards or safety critical elements
"PKG",6,22,1,"PAH",1,1,33,0)
functions.
"PKG",6,22,1,"PAH",1,1,34,0)
 
"PKG",6,22,1,"PAH",1,1,35,0)
RISK ANALYSIS: Changes made by patch XT*7.3*140 have no effect on Blood
"PKG",6,22,1,"PAH",1,1,36,0)
Bank software functionality, therefore RISK is none.
"PKG",6,22,1,"PAH",1,1,37,0)
 
"PKG",6,22,1,"PAH",1,1,38,0)
 
"PKG",6,22,1,"PAH",1,1,39,0)
Defect Tracking System Ticket(s) & Overview:
"PKG",6,22,1,"PAH",1,1,40,0)
============================================ 
"PKG",6,22,1,"PAH",1,1,41,0)
Ticket: I9055002FY16 - XINDEX doesn't support SACC changes to routine
"PKG",6,22,1,"PAH",1,1,42,0)
        names and tags
"PKG",6,22,1,"PAH",1,1,43,0)
 
"PKG",6,22,1,"PAH",1,1,44,0)
Problem:
"PKG",6,22,1,"PAH",1,1,45,0)
 XINDEX utility needs to support routine name and labels to 16 characters
"PKG",6,22,1,"PAH",1,1,46,0)
 and local variables names to 16 characters. Add support for all areas in
"PKG",6,22,1,"PAH",1,1,47,0)
 VA FileMan that can contain M code.
"PKG",6,22,1,"PAH",1,1,48,0)
 
"PKG",6,22,1,"PAH",1,1,49,0)
Resolution:
"PKG",6,22,1,"PAH",1,1,50,0)
 Change the following routines to support 16 characters and other M code:
"PKG",6,22,1,"PAH",1,1,51,0)
 XINDX1
"PKG",6,22,1,"PAH",1,1,52,0)
 XINDX11
"PKG",6,22,1,"PAH",1,1,53,0)
 XINDX12
"PKG",6,22,1,"PAH",1,1,54,0)
 XINDX13
"PKG",6,22,1,"PAH",1,1,55,0)
 XINDX2
"PKG",6,22,1,"PAH",1,1,56,0)
 XINDX3
"PKG",6,22,1,"PAH",1,1,57,0)
 XINDX5
"PKG",6,22,1,"PAH",1,1,58,0)
 XINDX51
"PKG",6,22,1,"PAH",1,1,59,0)
 XINDX52
"PKG",6,22,1,"PAH",1,1,60,0)
 XINDX53
"PKG",6,22,1,"PAH",1,1,61,0)
 XINDX6
"PKG",6,22,1,"PAH",1,1,62,0)
 XINDX7
"PKG",6,22,1,"PAH",1,1,63,0)
 XINDX8
"PKG",6,22,1,"PAH",1,1,64,0)
 XINDX9 
"PKG",6,22,1,"PAH",1,1,65,0)
 
"PKG",6,22,1,"PAH",1,1,66,0)
 
"PKG",6,22,1,"PAH",1,1,67,0)
Test Site:
"PKG",6,22,1,"PAH",1,1,68,0)
==========
"PKG",6,22,1,"PAH",1,1,69,0)
Fargo, ND
"PKG",6,22,1,"PAH",1,1,70,0)
South Texas, TX
"PKG",6,22,1,"PAH",1,1,71,0)
 
"PKG",6,22,1,"PAH",1,1,72,0)
 
"PKG",6,22,1,"PAH",1,1,73,0)
Software and Documentation Retrieve Instructions:
"PKG",6,22,1,"PAH",1,1,74,0)
=================================================
"PKG",6,22,1,"PAH",1,1,75,0)
No changes have been made to Kernel documentation as a result of this
"PKG",6,22,1,"PAH",1,1,76,0)
patch.  However, the most up-to-date VA Kernel documentation is
"PKG",6,22,1,"PAH",1,1,77,0)
available on the VHA Software Documentation Library (VDL) at the
"PKG",6,22,1,"PAH",1,1,78,0)
following:
"PKG",6,22,1,"PAH",1,1,79,0)
 http://domain.ext/vdl/application.asp?appid=10
"PKG",6,22,1,"PAH",1,1,80,0)
 
"PKG",6,22,1,"PAH",1,1,81,0)
An updated copy of the SAC is available at:
"PKG",6,22,1,"PAH",1,1,82,0)
 http://go.domain/sacc
"PKG",6,22,1,"PAH",1,1,83,0)
 
"PKG",6,22,1,"PAH",1,1,84,0)
Download TOOLKIT_XINDEX_73.KID from the ftp site.  The preferred method is
"PKG",6,22,1,"PAH",1,1,85,0)
to SFTP the file from sftp://download.domaindomain.ext/.  This transmits the
"PKG",6,22,1,"PAH",1,1,86,0)
file from the first available SFTP server. Sites may also elect to retrieve
"PKG",6,22,1,"PAH",1,1,87,0)
software directly from a specific server as follows:
"PKG",6,22,1,"PAH",1,1,88,0)
 
"PKG",6,22,1,"PAH",1,1,89,0)
Hines             sftp://ftp.fo-hines.domain.ext
"PKG",6,22,1,"PAH",1,1,90,0)
Salt Lake City    sftp://ftp.fo-slc.domain.ext
"PKG",6,22,1,"PAH",1,1,91,0)
 
"PKG",6,22,1,"PAH",1,1,92,0)
The necessary file is TOOLKIT_XINDEX_73.KID, which is an ASCII file.
"PKG",6,22,1,"PAH",1,1,93,0)
Make a note of the directory name where the file was saved.
"PKG",6,22,1,"PAH",1,1,94,0)
 
"PKG",6,22,1,"PAH",1,1,95,0)
 
"PKG",6,22,1,"PAH",1,1,96,0)
Patch Installation:
"PKG",6,22,1,"PAH",1,1,97,0)
===================
"PKG",6,22,1,"PAH",1,1,98,0)
 
"PKG",6,22,1,"PAH",1,1,99,0)
Pre-Installation Instructions:
"PKG",6,22,1,"PAH",1,1,100,0)
 
"PKG",6,22,1,"PAH",1,1,101,0)
This patch may be installed with users on the system although it is
"PKG",6,22,1,"PAH",1,1,102,0)
recommended that it be installed during non-peak hours to minimize
"PKG",6,22,1,"PAH",1,1,103,0)
potential disruption to users.  This patch should take less than 1 minutes
"PKG",6,22,1,"PAH",1,1,104,0)
to install.  TaskMan doesn't need to be stopped or paused
"PKG",6,22,1,"PAH",1,1,105,0)
 
"PKG",6,22,1,"PAH",1,1,106,0)
Installation Instructions:
"PKG",6,22,1,"PAH",1,1,107,0)
  
"PKG",6,22,1,"PAH",1,1,108,0)
 1. From the Kernel Installation and Distribution System (KIDS) menu select
"PKG",6,22,1,"PAH",1,1,109,0)
    Installation Menu.
"PKG",6,22,1,"PAH",1,1,110,0)
   
"PKG",6,22,1,"PAH",1,1,111,0)
 2. Use the Load a Distribution option to load the TOOLKIT_XINDEX_73.KID file
"PKG",6,22,1,"PAH",1,1,112,0)
 
"PKG",6,22,1,"PAH",1,1,113,0)
 3. You may select the following options:
"PKG",6,22,1,"PAH",1,1,114,0)
 
"PKG",6,22,1,"PAH",1,1,115,0)
    A. Select the Verify Checksums in Transport Global option to confirm 
"PKG",6,22,1,"PAH",1,1,116,0)
       the integrity of the routines that are in the transport global. When 
"PKG",6,22,1,"PAH",1,1,117,0)
       prompted for the INSTALL NAME enter XT*7.3*140
"PKG",6,22,1,"PAH",1,1,118,0)
 
"PKG",6,22,1,"PAH",1,1,119,0)
        NOTE: Using <spacebar><enter> will not bring up a Multi-Package build 
"PKG",6,22,1,"PAH",1,1,120,0)
              even if it was loaded immediately before this step. It will only 
"PKG",6,22,1,"PAH",1,1,121,0)
              bring up the last patch in the build.
"PKG",6,22,1,"PAH",1,1,122,0)
 
"PKG",6,22,1,"PAH",1,1,123,0)
    B. Select the Backup a Transport Global option to create a backup message
"PKG",6,22,1,"PAH",1,1,124,0)
       of any routines exported with this patch. It will not backup any other
"PKG",6,22,1,"PAH",1,1,125,0)
       changes such as DDs or templates. 
"PKG",6,22,1,"PAH",1,1,126,0)
 
"PKG",6,22,1,"PAH",1,1,127,0)
    C. You may also elect to use the following options: 
"PKG",6,22,1,"PAH",1,1,128,0)
         i.  Print Transport Global - This option will allow you to view
"PKG",6,22,1,"PAH",1,1,129,0)
             the components of the KIDS build.
"PKG",6,22,1,"PAH",1,1,130,0)
         ii. Compare Transport Global to Current System - This option will
"PKG",6,22,1,"PAH",1,1,131,0)
             allow you to view all changes that will be made when this patch
"PKG",6,22,1,"PAH",1,1,132,0)
             is installed.  It compares all of the components of this patch,
"PKG",6,22,1,"PAH",1,1,133,0)
             such as routines, DDs, templates, etc.
"PKG",6,22,1,"PAH",1,1,134,0)
 
"PKG",6,22,1,"PAH",1,1,135,0)
    D. Select the Install Package(s) option and choose the patch to install. 
"PKG",6,22,1,"PAH",1,1,136,0)
   
"PKG",6,22,1,"PAH",1,1,137,0)
          Select Installation Option: Install Package(s)
"PKG",6,22,1,"PAH",1,1,138,0)
          Select INSTALL NAME: XT*7.3*140
"PKG",6,22,1,"PAH",1,1,139,0)
 
"PKG",6,22,1,"PAH",1,1,140,0)
     Want KIDS to INHIBIT LOGONs during the install? NO//
"PKG",6,22,1,"PAH",1,1,141,0)
 
"PKG",6,22,1,"PAH",1,1,142,0)
     Want to DISABLE Scheduled Options, Menu Options, and Protocols? NO// 
"PKG",6,22,1,"PAH",1,1,143,0)
 
"PKG",6,22,1,"PAH",1,1,144,0)
 
"PKG",6,22,1,"PAH",1,1,145,0)
 Post-Installation Instructions:
"PKG",6,22,1,"PAH",1,1,146,0)
 -------------------------------
"PKG",6,22,1,"PAH",1,1,147,0)
 none
"PKG",6,22,1,"PAH",1,1,148,0)
  
"PKG",6,22,1,"PAH",1,1,149,0)
   
"PKG",6,22,1,"PAH",1,1,150,0)
 Backout and Rollback Procedure:
"PKG",6,22,1,"PAH",1,1,151,0)
 ------------------------------- 
"PKG",6,22,1,"PAH",1,1,152,0)
 If rollback/backout is required, the installer can restore the routines
"PKG",6,22,1,"PAH",1,1,153,0)
 using the MailMan message that were saved prior to installing the
"PKG",6,22,1,"PAH",1,1,154,0)
 patch.  The Data Dictionary changes are backwards compatible and can stay
"PKG",6,22,1,"PAH",1,1,155,0)
 in production.
"PKG",6,22,1,"PAH",1,1,156,0)
 
"PKG",6,22,1,"PAH",1,1,157,0)
 
"PKG",6,22,1,"PAH",1,1,158,0)
 Routine Information:
"PKG",6,22,1,"PAH",1,1,159,0)
====================
"PKG",6,22,1,"PAH",1,1,160,0)
 
"PKG",6,22,1,"PAH",1,1,161,0)
The second line of each of these routines now looks like:
"PKG",6,22,1,"PAH",1,1,162,0)
 ;;7.3;TOOLKIT;**[Patch List]**;Apr 25, 1995;Build 38
"PKG",6,22,1,"PAH",1,1,163,0)
 
"PKG",6,22,1,"PAH",1,1,164,0)
The checksums below are new checksums, and
"PKG",6,22,1,"PAH",1,1,165,0)
 can be checked with CHECK1^XTSUMBLD.
"PKG",6,22,1,"PAH",1,1,166,0)
 
"PKG",6,22,1,"PAH",1,1,167,0)
Routine Name: XINDX1
"PKG",6,22,1,"PAH",1,1,168,0)
    Before: B20704192   After: B21263152  **20,61,66,68,110,121,128,133,140**
"PKG",6,22,1,"PAH",1,1,169,0)
Routine Name: XINDX11
"PKG",6,22,1,"PAH",1,1,170,0)
    Before: B11308547   After: B37513284  **20,27,121,132,140**
"PKG",6,22,1,"PAH",1,1,171,0)
Routine Name: XINDX12
"PKG",6,22,1,"PAH",1,1,172,0)
    Before:       n/a   After: B86657332  **140**
"PKG",6,22,1,"PAH",1,1,173,0)
Routine Name: XINDX13
"PKG",6,22,1,"PAH",1,1,174,0)
    Before:       n/a   After:B306834020  **140**
"PKG",6,22,1,"PAH",1,1,175,0)
Routine Name: XINDX2
"PKG",6,22,1,"PAH",1,1,176,0)
    Before: B28042462   After: B28369536  **20,27,48,110,121,133,140**
"PKG",6,22,1,"PAH",1,1,177,0)
Routine Name: XINDX3
"PKG",6,22,1,"PAH",1,1,178,0)
    Before: B15082410   After: B15493765  **20,27,61,68,110,121,128,132,
"PKG",6,22,1,"PAH",1,1,179,0)
                                          133,140**
"PKG",6,22,1,"PAH",1,1,180,0)
Routine Name: XINDX5
"PKG",6,22,1,"PAH",1,1,181,0)
    Before: B11294544   After: B11300370  **20,27,61,121,133,140**
"PKG",6,22,1,"PAH",1,1,182,0)
Routine Name: XINDX51
"PKG",6,22,1,"PAH",1,1,183,0)
    Before: B26771263   After: B32298369  **20,48,61,110,133,140**
"PKG",6,22,1,"PAH",1,1,184,0)
Routine Name: XINDX52
"PKG",6,22,1,"PAH",1,1,185,0)
    Before:  B2709275   After:  B2792889  **20,140**
"PKG",6,22,1,"PAH",1,1,186,0)
Routine Name: XINDX53
"PKG",6,22,1,"PAH",1,1,187,0)
    Before:  B6321698   After:  B6801223  **20,140**
"PKG",6,22,1,"PAH",1,1,188,0)
Routine Name: XINDX6
"PKG",6,22,1,"PAH",1,1,189,0)
    Before: B20048257   After: B20500720  **20,27,66,110,132,140**
"PKG",6,22,1,"PAH",1,1,190,0)
Routine Name: XINDX7
"PKG",6,22,1,"PAH",1,1,191,0)
    Before: B10829991   After: B11070196  **20,27,48,68,110,140**
"PKG",6,22,1,"PAH",1,1,192,0)
Routine Name: XINDX8
"PKG",6,22,1,"PAH",1,1,193,0)
    Before: B15029849   After: B15758649  **20,27,61,140**
"PKG",6,22,1,"PAH",1,1,194,0)
Routine Name: XINDX9
"PKG",6,22,1,"PAH",1,1,195,0)
    Before: B32506175   After: B33427538  **20,27,48,61,66,68,110,121,
"PKG",6,22,1,"PAH",1,1,196,0)
                                          132,133,140**
"PKG",6,22,1,"PAH",1,1,197,0)
 
"PKG",6,22,1,"PAH",1,1,198,0)
Routine list of preceding patches: 133
"PKG",6,22,1,"PAH",1,1,199,0)
  
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","XINDX1")
0^7^B21263152
"RTN","XINDX1",1,0)
XINDX1 ;ISC/REL,GRK,RWF - ERROR ROUTINE ;08/05/08  13:59
"RTN","XINDX1",2,0)
 ;;7.3;TOOLKIT;**20,61,66,68,110,121,128,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX1",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX1",4,0)
 G A
"RTN","XINDX1",5,0)
E(ERR) ;
"RTN","XINDX1",6,0)
A N %,%1 ;TXT is the line of the error.
"RTN","XINDX1",7,0)
 S ERTX=LAB_$S(LABO:"+"_LABO,1:"")_$C(9),%1=$T(ERROR+ERR),ERTX=ERTX_$S(ERR:$P(%1,";",4,9),1:ERR) ;p110
"RTN","XINDX1",8,0)
 I ERTX["|" F %=1:1 S ERTX=$P(ERTX,"|")_$S($D(ERR(%)):ERR(%),1:"??")_$P(ERTX,"|",%+1,99) Q:ERTX'["|"
"RTN","XINDX1",9,0)
 ;check exclude rtn list
"RTN","XINDX1",10,0)
B I $P(%1,";",3)]"" D  Q:%1]""  ;Don't flag kernel doing kernel.
"RTN","XINDX1",11,0)
 . S %1=$P(%1,";",3)
"RTN","XINDX1",12,0)
 . F  Q:RTN[$P(%1,",")  S %1=$P(%1,",",2,99) ;quit if RTN[%1 or null.
"RTN","XINDX1",13,0)
 . Q
"RTN","XINDX1",14,0)
 I ERR=17,$E(RTN)'="%",$E(LAB)="%" Q  ;Don't flag %RTN w/o %.
"RTN","XINDX1",15,0)
 ;Global is Error Line,tab,error tag,tab,error text
"RTN","XINDX1",16,0)
 S %=$G(^UTILITY($J,1,RTN,"E",0))+1,^(0)=%,^(%)=TXT_$C(9)_ERTX
"RTN","XINDX1",17,0)
 Q
"RTN","XINDX1",18,0)
 ;
"RTN","XINDX1",19,0)
 ;F = Fatal, S = Standard, W = Warning, I = Info
"RTN","XINDX1",20,0)
 ;;exclude rtn;error text
"RTN","XINDX1",21,0)
ERROR ;
"RTN","XINDX1",22,0)
1 ;;;F - UNDEFINED COMMAND (rest of line not checked).
"RTN","XINDX1",23,0)
2 ;;X,Z,DI,DD,KMP;F - Non-standard (Undefined) 'Z' command.
"RTN","XINDX1",24,0)
3 ;;X,Z,DI,DD,KMP;F - Undefined Function.
"RTN","XINDX1",25,0)
4 ;;;F - Undefined Special Variable.
"RTN","XINDX1",26,0)
5 ;;;F - Unmatched Parenthesis.
"RTN","XINDX1",27,0)
6 ;;;F - Unmatched Quotation Marks.
"RTN","XINDX1",28,0)
7 ;;;F - ELSE Command followed by only one space.
"RTN","XINDX1",29,0)
8 ;;;F - FOR Command did not contain '='.
"RTN","XINDX1",30,0)
9 ;;;I - QUIT Command followed by only one space.
"RTN","XINDX1",31,0)
10 ;;;F - Unrecognized argument in SET command.
"RTN","XINDX1",32,0)
11 ;;;W - Invalid local variable name.
"RTN","XINDX1",33,0)
12 ;;;W - Invalid global variable name.
"RTN","XINDX1",34,0)
13 ;;;W - Blank(s) at end of line.
"RTN","XINDX1",35,0)
14 ;;;F - Call to missing label '|' in this routine.
"RTN","XINDX1",36,0)
15 ;;;W - Duplicate label. (M57)
"RTN","XINDX1",37,0)
16 ;;;F - Error in pattern code.
"RTN","XINDX1",38,0)
17 ;;Z;W - First line label NOT routine name.
"RTN","XINDX1",39,0)
18 ;;;W - Line contains a CONTROL (non-graphic) character.
"RTN","XINDX1",40,0)
19 ;;;S - Line is longer than 245 bytes.
"RTN","XINDX1",41,0)
20 ;;X,Z,DI,DD,KMP;S - View command used.
"RTN","XINDX1",42,0)
21 ;;;F - General Syntax Error.
"RTN","XINDX1",43,0)
22 ;;X,Z,DI,DD,KMP;S - Exclusive Kill.
"RTN","XINDX1",44,0)
23 ;;X,Z,DI,DD,KMP;S - Unargumented Kill.
"RTN","XINDX1",45,0)
24 ;;;S - Kill of an unsubscripted global.
"RTN","XINDX1",46,0)
25 ;;;S - Break command used.
"RTN","XINDX1",47,0)
26 ;;X,Z,DI,DD,KMP;S - Exclusive or Unargumented NEW command.
"RTN","XINDX1",48,0)
27 ;;X,Z,DI,DD,KMP;S - $View function used.
"RTN","XINDX1",49,0)
28 ;;X,Z,DI,DD,KMP;S - Non-standard $Z special variable used.
"RTN","XINDX1",50,0)
29 ;;X,Z,DI,DD,KMP;S - 'Close' command should be invoked through 'D ^%ZISC'.
"RTN","XINDX1",51,0)
30 ;;;S - LABEL+OFFSET syntax.
"RTN","XINDX1",52,0)
31 ;;X,Z,DI,DD,KMP;S - Non-standard $Z function used.
"RTN","XINDX1",53,0)
32 ;;X,Z,DI,DD,KMP;S - 'HALT' command should be invoked through 'G ^XUSCLEAN'.
"RTN","XINDX1",54,0)
33 ;;X,Z,DI,DD,KMP;S - Read command doesn't have a timeout.
"RTN","XINDX1",55,0)
34 ;;X,Z,DI,DD,KMP;S - 'OPEN' command should be invoked through ^%ZIS.
"RTN","XINDX1",56,0)
35 ;;;S - Routine exceeds SACC maximum size of 20000 (|).
"RTN","XINDX1",57,0)
36 ;;X,Z,DI,DD,KMP;S - Should use 'TASKMAN' instead of 'JOB' command.
"RTN","XINDX1",58,0)
37 ;;;F - Label is not valid.
"RTN","XINDX1",59,0)
38 ;;;F - Call to this |
"RTN","XINDX1",60,0)
39 ;;X,Z,DI;S - Kill of a protected variable (|).
"RTN","XINDX1",61,0)
40 ;;;S - Space where a command should be.
"RTN","XINDX1",62,0)
41 ;;X,Z,DI,DD,KMP;I - Star or pound READ used.
"RTN","XINDX1",63,0)
42 ;;;W - Null line (no commands or comment).
"RTN","XINDX1",64,0)
43 ;;;F - Invalid or wrong number of arguments to a function.
"RTN","XINDX1",65,0)
44 ;;;S - 2nd line of routine violates the SAC.
"RTN","XINDX1",66,0)
45 ;;X,Z,DI,DD,KMP;S - Set to a '%' global.
"RTN","XINDX1",67,0)
46 ;;;F - Quoted string not followed by a separator.
"RTN","XINDX1",68,0)
47 ;;;S - Lowercase command(s) used in line.
"RTN","XINDX1",69,0)
48 ;;;F - Missing argument to a command post-conditional.
"RTN","XINDX1",70,0)
49 ;;;F - Command missing an argument.
"RTN","XINDX1",71,0)
50 ;;Z;S - Extended reference.
"RTN","XINDX1",72,0)
51 ;;;F - Block structure mismatch.
"RTN","XINDX1",73,0)
52 ;;;F - Reference to routine '^|'. That isn't in this UCI.
"RTN","XINDX1",74,0)
53 ;;;F - Bad Number.
"RTN","XINDX1",75,0)
54 ;;X,Z,DI,DD,KMP;S - Access to SSVN's or $SYSTEM restricted to Kernel.
"RTN","XINDX1",76,0)
55 ;;;S - Violates VA programming standards.
"RTN","XINDX1",77,0)
56 ;;;S - Patch number '|' missing from second line.
"RTN","XINDX1",78,0)
57 ;;;S - Lower/Mixed case Variable name used.
"RTN","XINDX1",79,0)
58 ;;;S - Routine code exceeds SACC maximum size of 15000 (|).
"RTN","XINDX1",80,0)
59 ;;;F - Bad WRITE syntax.
"RTN","XINDX1",81,0)
60 ;;X,Z,DI,DD,KMP;S - Lock missing Timeout.
"RTN","XINDX1",82,0)
61 ;;X,Z,DI,DD,KMP;S - Non-Incremental Lock.
"RTN","XINDX1",83,0)
62 ;;;S - First line of routine violates the SAC.
"RTN","XINDX1",84,0)
63 ;;;F - GO or DO mismatch from block structure (M45).
"RTN","XINDX1",85,0)
64 ;;;F - Cache Object doesn't exist.
"RTN","XINDX1",86,0)
65 ;;X,Z,DI,DD,KMP;S - Vendor specific code is restricted.
"RTN","XINDX11")
0^12^B37513284
"RTN","XINDX11",1,0)
XINDX11 ;ISC/GRK - Create phantom routines for functions, options, etc. ;07/08/98  15:06
"RTN","XINDX11",2,0)
 ;;7.3;TOOLKIT;**20,27,121,132,140**;Apr 25, 1995;Build 40
"RTN","XINDX11",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX11",4,0)
 G:INP(10)=9.7 RTN
"RTN","XINDX11",5,0)
 W !,"The option and function files are being processed.",!
"RTN","XINDX11",6,0)
 G:INP(10)=9.4 PKG
"RTN","XINDX11",7,0)
BUILD ; Process Build File
"RTN","XINDX11",8,0)
 N KRN,BLDFIL,BLDDEL
"RTN","XINDX11",9,0)
 S BLDDEL=U
"RTN","XINDX11",10,0)
 S BLDFIL=.5,INDFN="^DD(""FUNC"",",INDRN="|func",INDD="Function",INDSB="FUNC",INDXN="Build file" D BLDITEM
"RTN","XINDX11",11,0)
 S BLDFIL=19,INDFN="^DIC(19,",INDRN="|opt",INDD="Option",INDSB="OPT",INDXN="Build file" D BLDITEM
"RTN","XINDX11",12,0)
 S BLDDEL="    "
"RTN","XINDX11",13,0)
 S BLDFIL=.401,INDFN="^DIBT(",INDRN="|sort",INDD="Sort Template",INDSB="SORT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",14,0)
 S BLDFIL=.402,INDFN="^DIE(",INDRN="|inpt",INDD="Input Template",INDSB="INPUT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",15,0)
 S BLDFIL=.4,INDFN="^DIPT(",INDRN="|prnt",INDD="Print Template",INDSB="PRINT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",16,0)
 S BLDFIL=.403,INDFN="^DIST(.403,",INDRN="|form",INDD="Form",INDSB="FORM^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",17,0)
 S BLDDEL=U
"RTN","XINDX11",18,0)
 S BLDFIL=.84,INDFN="^DI(.84,",INDRN="|dlg",INDD="Dialog",INDSB="DIALOG^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",19,0)
 S BLDFIL=9.2,INDFN="^DIC(9.2,",INDRN="|help",INDD="Help Frame",INDSB="HELP^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",20,0)
 S BLDFIL=19.1,INDFN="^DIC(19.1,",INDRN="|key",INDD="Security Key",INDSB="KEY^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",21,0)
 S BLDFIL=409.61,INDFN="^SD(409.61,",INDRN="|list",INDD="List Template",INDSB="LIST^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",22,0)
 S BLDFIL=101,INDFN="^ORD(101,",INDRN="|ptcl",INDD="Protocol",INDSB="PROTOCOL^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",23,0)
 S BLDFIL=771,INDFN="^HL(771,",INDRN="|hlap",INDD="HL7 Application Parameter",INDSB="HL7AP^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",24,0)
 S BLDFIL=8994,INDFN="^XWB(8994,",INDRN="|rpc",INDD="Remote Procedure",INDSB="RPC^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",25,0)
RTN ;Routines
"RTN","XINDX11",26,0)
 D RTN^XTRUTL1(INDDA,INP(10))
"RTN","XINDX11",27,0)
 Q
"RTN","XINDX11",28,0)
 ;
"RTN","XINDX11",29,0)
BLDITEM ; Process Each Build item in build file
"RTN","XINDX11",30,0)
 D HDR
"RTN","XINDX11",31,0)
 F KRN=0:0 S KRN=$O(^XPD(9.6,INDDA,"KRN",BLDFIL,"NM",KRN)) Q:KRN'>0  S (INDL,INDXN)=$P(^(KRN,0),BLDDEL) D ENTRY
"RTN","XINDX11",32,0)
 I INDLC=2 K ^UTILITY($J,INDRN),^UTILITY($J,1,INDRN) ;patch 121
"RTN","XINDX11",33,0)
 QUIT
"RTN","XINDX11",34,0)
 ;
"RTN","XINDX11",35,0)
PKG D NAMSP ;Package file
"RTN","XINDX11",36,0)
 S INDFN="^DD(""FUNC"",",INDRN="|func",INDD="Function",INDSB="FUNC" D NAME
"RTN","XINDX11",37,0)
 S INDFN="^DIC(19,",INDRN="|opt",INDD="Option",INDSB="OPT" D NAME
"RTN","XINDX11",38,0)
 S INDFN="^DIBT(",INDRN="|sort",INDD="Sort Template",INDSB="SORT^XINDX12" D NAME
"RTN","XINDX11",39,0)
 S INDFN="^DIE(",INDRN="|inpt",INDD="Input Template",INDSB="INPUT^XINDX12" D NAME
"RTN","XINDX11",40,0)
 S INDFN="^DIPT(",INDRN="|prnt",INDD="Print Template",INDSB="PRINT^XINDX12" D NAME
"RTN","XINDX11",41,0)
 S INDFN="^DIST(.403,",INDRN="|form",INDD="Form",INDSB="FORM^XINDX12" D NAME
"RTN","XINDX11",42,0)
 S INDFN="^DI(.84,",INDRN="|dlg",INDD="Dialog",INDSB="DIALOG^XINDX12" D NAME
"RTN","XINDX11",43,0)
 S INDFN="^DIC(9.2,",INDRN="|help",INDD="Help Frame",INDSB="HELP^XINDX12" D NAME
"RTN","XINDX11",44,0)
 S INDFN="^DIC(19.1,",INDRN="|key",INDD="Security Key",INDSB="KEY^XINDX12" D NAME
"RTN","XINDX11",45,0)
 S INDFN="^SD(409.61,",INDRN="|list",INDD="List Template",INDSB="LIST^XINDX12" D NAME
"RTN","XINDX11",46,0)
 S INDFN="^ORD(101,",INDRN="|ptcl",INDD="Protocol",INDSB="PROTOCOL^XINDX12" D NAME
"RTN","XINDX11",47,0)
 S INDFN="^HL(771,",INDRN="|hlap",INDD="HL7 Application Parameter",INDSB="HL7AP^XINDX12" D NAME
"RTN","XINDX11",48,0)
 S INDFN="^XWB(8994,",INDRN="|rpc",INDD="Remote Procedure",INDSB="RPC^XINDX12" D NAME
"RTN","XINDX11",49,0)
 Q
"RTN","XINDX11",50,0)
 ;
"RTN","XINDX11",51,0)
NAME ; Index based on Package file #9.4
"RTN","XINDX11",52,0)
 Q:'$D(@(INDFN_"""B"")"))  ; Don't run if there isn't a B cross reference
"RTN","XINDX11",53,0)
 D HDR ; Add Header in the style of |{component} ; '{Namespace}' {Filename as defined above}s. With a comment line below.
"RTN","XINDX11",54,0)
 S INDL=$E(INDXN,1,$L(INDXN)-1)_$C($A(INDXN,$L(INDXN))-1)_"z" ; get the last letter of the prefix and get the previous letter (B=A), then append "z" to the end
"RTN","XINDX11",55,0)
 F A=0:0 S INDL=$O(@(INDFN_"""B"",INDL)")) Q:$P(INDL,INDXN,1)]""!(INDL="")  D  ; Order through the B index of the given file. If it nolonger matches the prefix or we hit the end of the B index quit
"RTN","XINDX11",56,0)
 . F B=0:0 S B=$O(@(INDFN_"""B"",INDL,B)")) Q:B=""  D  ; For each IEN in the B index
"RTN","XINDX11",57,0)
 .. X INDF ; Make sure it isn't an excluded namespace
"RTN","XINDX11",58,0)
 .. D:C8 @INDSB ; If it isn't an excluded namesapce cross reference it
"RTN","XINDX11",59,0)
 I INDLC=2 K ^UTILITY($J,INDRN),^UTILITY($J,1,INDRN) Q  ; If there is only a header delete the faux routine
"RTN","XINDX11",60,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC ; set the number of lines in the routine where the output will find it
"RTN","XINDX11",61,0)
 Q
"RTN","XINDX11",62,0)
NAMSP ; Setup processing for Indexing based on package file
"RTN","XINDX11",63,0)
 S INDXN=$P(^DIC(9.4,DA,0),"^",2) ; PREFIX (#1) from Package File
"RTN","XINDX11",64,0)
 S C9=0 ; Subscript for INDXN
"RTN","XINDX11",65,0)
 S INDXN(C9)="," ; 0th subscript is always ","
"RTN","XINDX11",66,0)
 F A=0:0 S A=$O(^DIC(9.4,DA,"EX",A)) Q:A'>0  D  ; For each excluded name space in the package file
"RTN","XINDX11",67,0)
 . I $D(^(A,0))#2 D  ; If there is an excluded namespace value
"RTN","XINDX11",68,0)
 .. S C9=C9+1 ; increment the counter
"RTN","XINDX11",69,0)
 .. S INDXN(C9)=$P(^(0),"^") ; set INDXN(COUNTER)=excluded namespace
"RTN","XINDX11",70,0)
 S INDF="S C8=1 F H=1:1:C9 I $P(INDL,INDXN(H))="""" S C8=0 Q" ; Checks excluded namespaces
"RTN","XINDX11",71,0)
 Q
"RTN","XINDX11",72,0)
HDR S INDLC=0,INDC=INDRN_" ; '"_INDXN_"' "_INDD_"s.",INDX=";" D ADD S ^UTILITY($J,INDRN)="",^UTILITY($J,1,INDRN,0,0)=0
"RTN","XINDX11",73,0)
 Q
"RTN","XINDX11",74,0)
ENTRY F B=0:0 S B=$O(@(INDFN_"""B"",INDXN,B)")) Q:B=""  D @INDSB
"RTN","XINDX11",75,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC
"RTN","XINDX11",76,0)
 Q
"RTN","XINDX11",77,0)
FUNC ;Process Function file entry
"RTN","XINDX11",78,0)
 Q:'($D(^DD("FUNC",B,0))#2)  S INDC=B_" ; "_$P(^(0),"^",1)_" - "_$S($D(^(9))#2:$E(^(9),1,190),1:""),INDX=$S($D(^(1))#2:^(1),1:";") D ADD
"RTN","XINDX11",79,0)
 Q
"RTN","XINDX11",80,0)
OPT ;Process option file entry for MUMPS code
"RTN","XINDX11",81,0)
 Q:'$D(^DIC(19,B,0))  S T=$P(^(0),"^",4),INDC=B_" ; "_$P(^(0),"^",1)_" - "_$P(^(0),"^",2)_" ("_$P($P($P(^DD(19,4,0),"^",3),T_":",2),";",1)_")"_$S($P(^DIC(19,B,0),"^",6)]"":" - Locked by "_$P(^(0),"^",6),1:""),INDX="" D ADD
"RTN","XINDX11",82,0)
 S INDN="15,20,26,"_$S(T="E":"34,35,54",T="I":"34,35",T="P":"69,69.1,69.2,69.3,71,72,73",T="R":25,1:"") D OPTC:INDN
"RTN","XINDX11",83,0)
 Q
"RTN","XINDX11",84,0)
OPTC F J=1:1 S H=$P(INDN,",",J) Q:H=""  I $D(^DIC(19,B,H))#2 D
"RTN","XINDX11",85,0)
 . S %=^(H),INDX=$S(H'=25:%,1:"D "_$E("^",%'["^")_$P(%,"[")),INDC=" ; "_$P(^DD(19,H,0),"^",1) D ADD
"RTN","XINDX11",86,0)
 Q
"RTN","XINDX11",87,0)
ADD ;Put code in UTILITY for processing
"RTN","XINDX11",88,0)
 S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=INDC I INDX]"" S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=" "_INDX
"RTN","XINDX11",89,0)
 Q
"RTN","XINDX11",90,0)
ADDLN ;
"RTN","XINDX11",91,0)
 S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=" "_INDX
"RTN","XINDX11",92,0)
 Q
"RTN","XINDX12")
0^10^B86657332
"RTN","XINDX12",1,0)
XINDX12 ;OSE/CJE - Create phantom routines for build components ;03/01/2018  8:37 AM
"RTN","XINDX12",2,0)
 ;;7.3;TOOLKIT;**140**;Apr 25, 1995;Build 40
"RTN","XINDX12",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX12",4,0)
 ; Entire routine authored by Chirstopher Edwards
"RTN","XINDX12",5,0)
 ;
"RTN","XINDX12",6,0)
 ; Variables passed through the stack:
"RTN","XINDX12",7,0)
 ; B = {IEN}
"RTN","XINDX12",8,0)
 ; INDLC = {counter}
"RTN","XINDX12",9,0)
 ; INDRN = {faux routine prefix}
"RTN","XINDX12",10,0)
 ; INDC = {IEN} ; {NAME} - {DISPLAY NAME}
"RTN","XINDX12",11,0)
 ; INDX = {code to be XINDEXED}
"RTN","XINDX12",12,0)
 ; INDL = {NAME field (.01) of IEN}
"RTN","XINDX12",13,0)
 ;
"RTN","XINDX12",14,0)
 ; FAUX Routine Structure
"RTN","XINDX12",15,0)
 ; ^UTILITY($J,1,INDRN,0,INDLC,0)={Field Name (INDC)}
"RTN","XINDX12",16,0)
 ; ^UTILITY($J,1,INDRN,0,INDLC+1,0)={MUMPS Code (INDX)}
"RTN","XINDX12",17,0)
 ;
"RTN","XINDX12",18,0)
SORT ;Process Sort Templates
"RTN","XINDX12",19,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",20,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",21,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",22,0)
 ; .401      1815   ROUTINE INVOKED                  ^DIBT(D0,ROU)
"RTN","XINDX12",23,0)
 ; .401      1816   PREVIOUS ROUTINE INVOKED         ^DIBT(D0,ROUOLD)
"RTN","XINDX12",24,0)
 ; .4014     10     GET CODE                         ^DIBT(D0,2,D1,GET)                   Part of Sort Field Data Subfile
"RTN","XINDX12",25,0)
 ; .4014     11     QUERY CONDITION                  ^DIBT(D0,2,D1,QCON)                  Part of Sort Field Data Subfile
"RTN","XINDX12",26,0)
 ; .4014     16     COMPUTED FIELD CODE              ^DIBT(D0,2,D1,CM)                    Part of Sort Field Data Subfile
"RTN","XINDX12",27,0)
 ; .4014     20     SUBHEADER OUTPUT                 ^DIBT(D0,2,D1,OUT)                   Part of Sort Field Data Subfile
"RTN","XINDX12",28,0)
 ; .401418   5      RELATIONAL CODE                  ^DIBT(D0,2,D1,2,D2,RCOD)             Part of Relational Jump Field Data Subfile
"RTN","XINDX12",29,0)
 ; .401419   2      OVERFLOW CODE                    ^DIBT(D0,2,D1,3,D2,OVF0)             Part of Overflow Data Subfile
"RTN","XINDX12",30,0)
 ; .4011624  4      DISPAR(0,n,OUT)                  ^DIBT(D0,BY0D,D1,2)                  Part of Sort Range Data For BY(0)
"RTN","XINDX12",31,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",32,0)
 W !,"Processing Sort Templates",!
"RTN","XINDX12",33,0)
 S INDX=$S($L($G(^DIBT(B,"ROU"))):"D "_$G(^DIBT(B,"ROU")),1:";")
"RTN","XINDX12",34,0)
 S INDC=B_" ; "_INDL_" - ROUTINE INVOKED (#1815)"
"RTN","XINDX12",35,0)
 D ADD^XINDX11
"RTN","XINDX12",36,0)
 ;
"RTN","XINDX12",37,0)
 S INDX=$S($L($G(^DIBT(B,"ROUOLD"))):"D ^"_$G(^DIBT(B,"ROUOLD")),1:";")
"RTN","XINDX12",38,0)
 S INDC=" ; "_INDL_" - PREVIOUS ROUTINE INVOKED (#1816)"
"RTN","XINDX12",39,0)
 D ADD^XINDX11
"RTN","XINDX12",40,0)
 ;
"RTN","XINDX12",41,0)
 N SUB,SUB2
"RTN","XINDX12",42,0)
 S (SUB,SUB2)=""
"RTN","XINDX12",43,0)
 F  S SUB=$O(^DIBT(B,2,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",44,0)
 . S INDX=$S($L($G(^DIBT(B,2,SUB,"GET"))):$G(^DIBT(B,2,SUB,"GET")),1:";")
"RTN","XINDX12",45,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - GET CODE (#10) - "_SUB
"RTN","XINDX12",46,0)
 . D ADD^XINDX11
"RTN","XINDX12",47,0)
 . ;
"RTN","XINDX12",48,0)
 . S INDX=$S($L($G(^DIBT(B,2,SUB,"QCON"))):$G(^DIBT(B,2,SUB,"QCON")),1:";")
"RTN","XINDX12",49,0)
 . S INDC=" ; "_INDL_" - QUERY CONDITION (#11) - "_SUB
"RTN","XINDX12",50,0)
 . D ADD^XINDX11
"RTN","XINDX12",51,0)
 . ;
"RTN","XINDX12",52,0)
 . S INDX=$S($L($G(^DIBT(B,2,SUB,"CM"))):$G(^DIBT(B,2,SUB,"CM")),1:";")
"RTN","XINDX12",53,0)
 . S INDC=" ; "_INDL_" - COMPUTED FIELD CODE (#16) - "_SUB
"RTN","XINDX12",54,0)
 . D ADD^XINDX11
"RTN","XINDX12",55,0)
 . ;
"RTN","XINDX12",56,0)
 . S INDX=$S($L($G(^DIBT(B,2,SUB,"OUT"))):$G(^DIBT(B,2,SUB,"OUT")),1:";")
"RTN","XINDX12",57,0)
 . S INDC=" ; "_INDL_" - SUBHEADER OUTPUT (#20) - "_SUB
"RTN","XINDX12",58,0)
 . D ADD^XINDX11
"RTN","XINDX12",59,0)
 . ;
"RTN","XINDX12",60,0)
 . F  S SUB2=$O(^DIBT(B,2,SUB,2,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",61,0)
 . . S INDX=$S($L($G(^DIBT(B,2,SUB,2,SUB2,"RCOD"))):$G(^DIBT(B,2,SUB,2,SUB2,"RCOD")),1:";")
"RTN","XINDX12",62,0)
 . . S INDC=B_"RCOD"_SUB_"P"_SUB2_" ; "_INDL_" - RELATIONAL CODE (#5) - "_SUB_" - "_SUB2
"RTN","XINDX12",63,0)
 . . D ADD^XINDX11
"RTN","XINDX12",64,0)
 . ;
"RTN","XINDX12",65,0)
 . S SUB2=""
"RTN","XINDX12",66,0)
 . F  S SUB2=$O(^DIBT(B,2,SUB,3,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",67,0)
 . . S INDX=$S($L($G(^DIBT(B,2,SUB,3,SUB2,"OVF0"))):$G(^DIBT(B,2,SUB,3,SUB2,"OVF0")),1:";")
"RTN","XINDX12",68,0)
 . . S INDC=B_"OVF0"_SUB_"P"_SUB2_" ; "_INDL_" - OVERFLOW CODE (#2) - "_SUB_" - "_SUB2
"RTN","XINDX12",69,0)
 . . D ADD^XINDX11
"RTN","XINDX12",70,0)
 ;
"RTN","XINDX12",71,0)
 S SUB=""
"RTN","XINDX12",72,0)
 F  S SUB=$O(^DIBT(B,"BY0D",SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",73,0)
 . S INDX=$S($L($G(^DIBT(B,"BY0D",SUB,2))):$G(^DIBT(B,"BY0D",SUB,2)),1:";")
"RTN","XINDX12",74,0)
 . S INDC=B_"BY0D"_SUB_" ; "_INDL_" - DISPAR (#4) - "_SUB
"RTN","XINDX12",75,0)
 . D ADD^XINDX11
"RTN","XINDX12",76,0)
 Q
"RTN","XINDX12",77,0)
 ; Input and Print templates are implemented in XINDX13
"RTN","XINDX12",78,0)
 ; The executable code doesn't have defined field numbers in the DD,
"RTN","XINDX12",79,0)
 ; So we put all of the lines together as "EXECUTABLE CODE"
"RTN","XINDX12",80,0)
 ; Thanks to Sam Habiel for the implementation requried to support this.
"RTN","XINDX12",81,0)
INPUT ; Input Templates
"RTN","XINDX12",82,0)
 W !,"Processing Input Templates",!
"RTN","XINDX12",83,0)
 S INDC=B_" ; "_INDL_" - EXECUTABLE CODE"
"RTN","XINDX12",84,0)
 D ADD^XINDX11
"RTN","XINDX12",85,0)
 D DIETM^XINDX13
"RTN","XINDX12",86,0)
 Q
"RTN","XINDX12",87,0)
PRINT ; Print Templates
"RTN","XINDX12",88,0)
 W !,"Processing Print Templates",!
"RTN","XINDX12",89,0)
 S INDC=B_" ; "_INDL_" - EXECUTABLE CODE"
"RTN","XINDX12",90,0)
 D ADD^XINDX11
"RTN","XINDX12",91,0)
 D DIPTM^XINDX13
"RTN","XINDX12",92,0)
 Q
"RTN","XINDX12",93,0)
FORM ;Process Forms
"RTN","XINDX12",94,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",95,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",96,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",97,0)
 ; .403      11     PRE ACTION                       ^DIST(.403,D0,11)
"RTN","XINDX12",98,0)
 ; .403      12     POST ACTION                      ^DIST(.403,D0,12)
"RTN","XINDX12",99,0)
 ; .403      14     POST SAVE                        ^DIST(.403,D0,14)
"RTN","XINDX12",100,0)
 ; .403      20     DATA VALIDATION                  ^DIST(.403,D0,20)
"RTN","XINDX12",101,0)
 ; .4031     11     PRE ACTION                       ^DIST(.403,D0,40,D1,11)
"RTN","XINDX12",102,0)
 ; .4031     12     POST ACTION                      ^DIST(.403,D0,40,D1,12)
"RTN","XINDX12",103,0)
 ; .4032     11     PRE ACTION                       ^DIST(.403,D0,40,D1,40,D2,11)
"RTN","XINDX12",104,0)
 ; .4032     12     POST ACTION                      ^DIST(.403,D0,40,D1,40,D2,12)
"RTN","XINDX12",105,0)
 ; .4032     98     COMPUTED MULTIPLE                ^DIST(.403,D0,40,D1,40,D2,COMP MUL)
"RTN","XINDX12",106,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",107,0)
 W !,"Processing Forms",!
"RTN","XINDX12",108,0)
 S INDX=$S($L($G(^DIST(.403,B,11))):$G(^DIST(.403,B,11)),1:";")
"RTN","XINDX12",109,0)
 S INDC=B_" ; "_INDL_" - PRE ACTION (#11)"
"RTN","XINDX12",110,0)
 D ADD^XINDX11
"RTN","XINDX12",111,0)
 ;
"RTN","XINDX12",112,0)
 S INDX=$S($L($G(^DIST(.403,B,12))):$G(^DIST(.403,B,12)),1:";")
"RTN","XINDX12",113,0)
 S INDC=" ; "_INDL_" - POST ACTION (#12)"
"RTN","XINDX12",114,0)
 D ADD^XINDX11
"RTN","XINDX12",115,0)
 ;
"RTN","XINDX12",116,0)
 S INDX=$S($L($G(^DIST(.403,B,14))):$G(^DIST(.403,B,14)),1:";")
"RTN","XINDX12",117,0)
 S INDC=" ; "_INDL_" - POST SAVE (#14)"
"RTN","XINDX12",118,0)
 D ADD^XINDX11
"RTN","XINDX12",119,0)
 ;
"RTN","XINDX12",120,0)
 S INDX=$S($L($G(^DIST(.403,B,20))):$G(^DIST(.403,B,20)),1:";")
"RTN","XINDX12",121,0)
 S INDC=" ; "_INDL_" - DATA VALIDATION (#20)"
"RTN","XINDX12",122,0)
 D ADD^XINDX11
"RTN","XINDX12",123,0)
 ;
"RTN","XINDX12",124,0)
 N SUB,SUB2
"RTN","XINDX12",125,0)
 S (SUB,SUB2)=""
"RTN","XINDX12",126,0)
 F  S SUB=$O(^DIST(.403,B,40,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",127,0)
 . S INDX=$S($L($G(^DIST(.403,B,40,SUB,11))):$G(^DIST(.403,B,40,SUB,11)),1:";")
"RTN","XINDX12",128,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - PRE ACTION FILE (#.4031) FIELD (#11) - "_SUB
"RTN","XINDX12",129,0)
 . D ADD^XINDX11
"RTN","XINDX12",130,0)
 . ;
"RTN","XINDX12",131,0)
 . S INDX=$S($L($G(^DIST(.403,B,40,SUB,12))):$G(^DIST(.403,B,40,SUB,12)),1:";")
"RTN","XINDX12",132,0)
 . S INDC=" ; "_INDL_" - POST ACTION FILE (#.4031) FIELD (#12) - "_SUB
"RTN","XINDX12",133,0)
 . D ADD^XINDX11
"RTN","XINDX12",134,0)
 . ;
"RTN","XINDX12",135,0)
 . F  S SUB2=$O(^DIST(.403,B,40,SUB,40,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",136,0)
 . . S INDX=$S($L($G(^DIST(.403,B,40,SUB,40,SUB2,11))):$G(^DIST(.403,B,40,SUB,40,SUB2,11)),1:";")
"RTN","XINDX12",137,0)
 . . S INDC=B_"P"_SUB_"P"_SUB2_" ; "_INDL_" - PRE ACTION FILE (#.4032) FIELD (#11) - "_SUB_" - "_SUB2
"RTN","XINDX12",138,0)
 . . D ADD^XINDX11
"RTN","XINDX12",139,0)
 . . ;
"RTN","XINDX12",140,0)
 . . S INDX=$S($L($G(^DIST(.403,B,40,SUB,40,SUB2,12))):$G(^DIST(.403,B,40,SUB,40,SUB2,12)),1:";")
"RTN","XINDX12",141,0)
 . . S INDC=" ; "_INDL_" - POST ACTION FILE (#.4032) FIELD (#12) - "_SUB_" - "_SUB2
"RTN","XINDX12",142,0)
 . . D ADD^XINDX11
"RTN","XINDX12",143,0)
 . . ;
"RTN","XINDX12",144,0)
 . . S INDX=$S($L($G(^DIST(.403,B,40,SUB,40,SUB2,"COMP MUL"))):$G(^DIST(.403,B,40,SUB,40,SUB2,"COMP MUL")),1:";")
"RTN","XINDX12",145,0)
 . . S INDC=" ; "_INDL_" - COMPUTED MULTIPLE FILE (#.4032) FIELD (#98) - "_SUB_" - "_SUB2
"RTN","XINDX12",146,0)
 . . D ADD^XINDX11
"RTN","XINDX12",147,0)
 Q
"RTN","XINDX12",148,0)
DIALOG ;Process Dialogs
"RTN","XINDX12",149,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",150,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",151,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",152,0)
 ; .84       6      POST MESSAGE ACTION              ^DI(.84,D0,6)
"RTN","XINDX12",153,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",154,0)
 W !,"Processing Dialogs",!
"RTN","XINDX12",155,0)
 S INDX=$S($L($G(^DI(.84,B,6))):$G(^DI(.84,B,6)),1:";")
"RTN","XINDX12",156,0)
 S INDC=B_" ; "_INDL_" - POST MESSAGE ACTION (#6)"
"RTN","XINDX12",157,0)
 D ADD^XINDX11
"RTN","XINDX12",158,0)
 Q
"RTN","XINDX12",159,0)
HELP ;Process Help Frames
"RTN","XINDX12",160,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",161,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",162,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",163,0)
 ; 9.2       10.1   ENTRY EXECUTE STATEMENT          ^DIC(9.2,D0,10.1)
"RTN","XINDX12",164,0)
 ; 9.2       10.2   EXIT EXECUTE STATEMENT           ^DIC(9.2,D0,10.2)
"RTN","XINDX12",165,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",166,0)
 W !,"Processing Help Frames",!
"RTN","XINDX12",167,0)
 S INDX=$S($L($G(^DIC(9.2,B,10.1))):$G(^DIC(9.2,B,10.1)),1:";")
"RTN","XINDX12",168,0)
 S INDC=B_" ; "_INDL_" - ENTRY EXECUTE STATEMENT (#10.1)"
"RTN","XINDX12",169,0)
 D ADD^XINDX11
"RTN","XINDX12",170,0)
 ;
"RTN","XINDX12",171,0)
 S INDX=$S($L($G(^DIC(9.2,B,10.2))):$G(^DIC(9.2,B,10.2)),1:";")
"RTN","XINDX12",172,0)
 S INDC=" ; "_INDL_" - EXIT EXECUTE STATEMENT (#10.2)"
"RTN","XINDX12",173,0)
 D ADD^XINDX11
"RTN","XINDX12",174,0)
 Q
"RTN","XINDX12",175,0)
KEY ;Process Security Keys
"RTN","XINDX12",176,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",177,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",178,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",179,0)
 ; 19.1      4      GRANTING CONDITION               ^DIC(19.1,D0,4)
"RTN","XINDX12",180,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",181,0)
 W !,"Processing Security Keys",!
"RTN","XINDX12",182,0)
 S INDX=$S($L($G(^DIC(19.1,B,4))):$G(^DIC(19.1,B,4)),1:";")
"RTN","XINDX12",183,0)
 S INDC=B_" ; "_INDL_" - GRANTING CONDITION (#4)"
"RTN","XINDX12",184,0)
 D ADD^XINDX11
"RTN","XINDX12",185,0)
 Q
"RTN","XINDX12",186,0)
LIST ;Process List Templates
"RTN","XINDX12",187,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",188,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",189,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",190,0)
 ; 409.61    100    HEADER CODE                      ^SD(409.61,D0,HDR)
"RTN","XINDX12",191,0)
 ; 409.61    102    EXPAND CODE                      ^SD(409.61,D0,EXP)
"RTN","XINDX12",192,0)
 ; 409.61    103    HELP CODE                        ^SD(409.61,D0,HLP)
"RTN","XINDX12",193,0)
 ; 409.61    105    EXIT CODE                        ^SD(409.61,D0,FNL)
"RTN","XINDX12",194,0)
 ; 409.61    106    ENTRY CODE                       ^SD(409.61,D0,INIT)
"RTN","XINDX12",195,0)
 ; 409.61    107    ARRAY NAME                       ^SD(409.61,D0,ARRAY)                 Holds a variable name prefaced by a space
"RTN","XINDX12",196,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",197,0)
 W !,"Processing List Templates",!
"RTN","XINDX12",198,0)
 S INDX=$S($L($G(^SD(409.61,B,"HDR"))):$G(^SD(409.61,B,"HDR")),1:";")
"RTN","XINDX12",199,0)
 S INDC=B_" ; "_INDL_" - HEADER CODE (#100)"
"RTN","XINDX12",200,0)
 D ADD^XINDX11
"RTN","XINDX12",201,0)
 ;
"RTN","XINDX12",202,0)
 S INDX=$S($L($G(^SD(409.61,B,"EXP"))):$G(^SD(409.61,B,"EXP")),1:";")
"RTN","XINDX12",203,0)
 S INDC=" ; "_INDL_" - EXPAND CODE (#102)"
"RTN","XINDX12",204,0)
 D ADD^XINDX11
"RTN","XINDX12",205,0)
 ;
"RTN","XINDX12",206,0)
 S INDX=$S($L($G(^SD(409.61,B,"HLP"))):$G(^SD(409.61,B,"HLP")),1:";")
"RTN","XINDX12",207,0)
 S INDC=" ; "_INDL_" - HELP CODE (#103)"
"RTN","XINDX12",208,0)
 D ADD^XINDX11
"RTN","XINDX12",209,0)
 ;
"RTN","XINDX12",210,0)
 S INDX=$S($L($G(^SD(409.61,B,"FNL"))):$G(^SD(409.61,B,"FNL")),1:";")
"RTN","XINDX12",211,0)
 S INDC=" ; "_INDL_" - EXIT CODE (#105)"
"RTN","XINDX12",212,0)
 D ADD^XINDX11
"RTN","XINDX12",213,0)
 ;
"RTN","XINDX12",214,0)
 S INDX=$S($L($G(^SD(409.61,B,"INIT"))):$G(^SD(409.61,B,"INIT")),1:";")
"RTN","XINDX12",215,0)
 S INDC=" ; "_INDL_" - ENTRY CODE (#106)"
"RTN","XINDX12",216,0)
 D ADD^XINDX11
"RTN","XINDX12",217,0)
 ;
"RTN","XINDX12",218,0)
 S INDX=$S($L($G(^SD(409.61,B,"ARRAY"))):"I $L("_$G(^SD(409.61,B,"ARRAY"))_") Q",1:";")
"RTN","XINDX12",219,0)
 S INDC=" ; "_INDL_" - ARRAY NAME (#107)"
"RTN","XINDX12",220,0)
 D ADD^XINDX11
"RTN","XINDX12",221,0)
 Q
"RTN","XINDX12",222,0)
PROTOCOL ;Process Protocols
"RTN","XINDX12",223,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",224,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",225,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",226,0)
 ; 101       15     EXIT ACTION                      ^ORD(101,D0,15) E1,245
"RTN","XINDX12",227,0)
 ; 101       20     ENTRY ACTION                     ^ORD(101,D0,20) E1,245
"RTN","XINDX12",228,0)
 ; 101       24     SCREEN                           ^ORD(101,D0,24) E1,245
"RTN","XINDX12",229,0)
 ; 101       26     HEADER                           ^ORD(101,D0,26) E1,245
"RTN","XINDX12",230,0)
 ; 101       27     MENU HELP                        ^ORD(101,D0,27) E1,245
"RTN","XINDX12",231,0)
 ; 101       100    ORDER PRINT ACTION               ^ORD(101,D0,100) E1,245
"RTN","XINDX12",232,0)
 ; 101       100.1  ORDER CANCEL ACTION              ^ORD(101,D0,100.1) E1,245
"RTN","XINDX12",233,0)
 ; 101       100.2  ORDER PURGE ACTION               ^ORD(101,D0,100.2) E1,245
"RTN","XINDX12",234,0)
 ; 101       771    PROCESSING ROUTINE               ^ORD(101,D0,771) E1,245
"RTN","XINDX12",235,0)
 ; 101       772    RESPONSE PROCESSING ROUTINE      ^ORD(101,D0,772) E1,245
"RTN","XINDX12",236,0)
 ; 101       774    ROUTING LOGIC                    ^ORD(101,D0,774) E1,245
"RTN","XINDX12",237,0)
 ; 101       21     REQUIRED VARIABLES               ^ORD(101,D0,21,D1,0)                 Required Variables sub file
"RTN","XINDX12",238,0)
 ; 101.05    .02    METHOD ACTION                    ^ORD(101,D0,101.05,D1,1) E1,245      Method sub file
"RTN","XINDX12",239,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",240,0)
 W !,"Processing Protocols",!
"RTN","XINDX12",241,0)
 K INDN
"RTN","XINDX12",242,0)
 S INDN=$P($G(^ORD(101,B,0)),U,1)
"RTN","XINDX12",243,0)
 S INDX=$S($L($G(^ORD(101,B,15))):$G(^ORD(101,B,15)),1:";")
"RTN","XINDX12",244,0)
 S INDC=B_" ; "_INDN_" - EXIT ACTION (#15)"
"RTN","XINDX12",245,0)
 D ADD^XINDX11
"RTN","XINDX12",246,0)
 ;
"RTN","XINDX12",247,0)
 S INDX=$S($L($G(^ORD(101,B,20))):$G(^ORD(101,B,20)),1:";")
"RTN","XINDX12",248,0)
 S INDC=" ; "_INDN_" - ENTRY ACTION (#20)"
"RTN","XINDX12",249,0)
 D ADD^XINDX11
"RTN","XINDX12",250,0)
 ;
"RTN","XINDX12",251,0)
 S INDX=$S($L($G(^ORD(101,B,24))):$G(^ORD(101,B,24)),1:";")
"RTN","XINDX12",252,0)
 S INDC=" ; "_INDN_" - SCREEN (#24)"
"RTN","XINDX12",253,0)
 D ADD^XINDX11
"RTN","XINDX12",254,0)
 ;
"RTN","XINDX12",255,0)
 S INDX=$S($L($G(^ORD(101,B,26))):$G(^ORD(101,B,26)),1:";")
"RTN","XINDX12",256,0)
 S INDC=" ; "_INDN_" - HEADER (#26)"
"RTN","XINDX12",257,0)
 D ADD^XINDX11
"RTN","XINDX12",258,0)
 ;
"RTN","XINDX12",259,0)
 S INDX=$S($L($G(^ORD(101,B,27))):$G(^ORD(101,B,27)),1:";")
"RTN","XINDX12",260,0)
 S INDC=" ; "_INDN_" - MENU HELP (#27)"
"RTN","XINDX12",261,0)
 D ADD^XINDX11
"RTN","XINDX12",262,0)
 ;
"RTN","XINDX12",263,0)
 S INDX=$S($L($G(^ORD(101,B,100))):$G(^ORD(101,B,100)),1:";")
"RTN","XINDX12",264,0)
 S INDC=" ; "_INDN_" - ORDER PRINT ACTION (#100)"
"RTN","XINDX12",265,0)
 D ADD^XINDX11
"RTN","XINDX12",266,0)
 ;
"RTN","XINDX12",267,0)
 S INDX=$S($L($G(^ORD(101,B,100.1))):$G(^ORD(101,B,100.1)),1:";")
"RTN","XINDX12",268,0)
 S INDC=" ; "_INDN_" - ORDER CANCEL ACTION (#100.1)"
"RTN","XINDX12",269,0)
 D ADD^XINDX11
"RTN","XINDX12",270,0)
 ;
"RTN","XINDX12",271,0)
 S INDX=$S($L($G(^ORD(101,B,100.2))):$G(^ORD(101,B,100.2)),1:";")
"RTN","XINDX12",272,0)
 S INDC=" ; "_INDN_" - ORDER PURGE ACTION (#100.2)"
"RTN","XINDX12",273,0)
 D ADD^XINDX11
"RTN","XINDX12",274,0)
 ;
"RTN","XINDX12",275,0)
 S INDX=$S($L($G(^ORD(101,B,771))):$G(^ORD(101,B,771)),1:";")
"RTN","XINDX12",276,0)
 S INDC=" ; "_INDN_" - PROCESSING ROUTINE (#771)"
"RTN","XINDX12",277,0)
 D ADD^XINDX11
"RTN","XINDX12",278,0)
 ;
"RTN","XINDX12",279,0)
 S INDX=$S($L($G(^ORD(101,B,772))):$G(^ORD(101,B,772)),1:";")
"RTN","XINDX12",280,0)
 S INDC=" ; "_INDN_" - ORDER PURGE ACTION (#772)"
"RTN","XINDX12",281,0)
 D ADD^XINDX11
"RTN","XINDX12",282,0)
 ;
"RTN","XINDX12",283,0)
 S INDX=$S($L($G(^ORD(101,B,774))):$G(^ORD(101,B,774)),1:";")
"RTN","XINDX12",284,0)
 S INDC=" ; "_INDN_" - ROUTING LOGIC (#774)"
"RTN","XINDX12",285,0)
 D ADD^XINDX11
"RTN","XINDX12",286,0)
 ;
"RTN","XINDX12",287,0)
 N SUB
"RTN","XINDX12",288,0)
 S SUB=""
"RTN","XINDX12",289,0)
 ;F  S SUB=$O(^ORD(101,B,21,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",290,0)
 ;why does a list of required variable needs to check the HL7 MESSAGE (#6) field, which is no longer used  rsd
"RTN","XINDX12",291,0)
 ;. S INDX=$S($L($E($G(^ORD(101,B,21,SUB,0)),1,17)):"$G("_$E($G(^HL(771,B,"MSG",SUB,"R")),1,17)_")",1:";")
"RTN","XINDX12",292,0)
 ;. I INDX="D Q" S INDX=";"
"RTN","XINDX12",293,0)
 ;. S INDC=B_"R"_SUB_" ; "_INDN_" - REQUIRED VARIABLES SUB FILE (#101.021) REQUIRED VARIABLES (#1) - "_SUB
"RTN","XINDX12",294,0)
 ;. D ADD^XINDX11
"RTN","XINDX12",295,0)
 ;
"RTN","XINDX12",296,0)
 S SUB=""
"RTN","XINDX12",297,0)
 F  S SUB=$O(^ORD(101,B,101.05,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",298,0)
 . S INDX=$S($L($G(^ORD(101,B,101.05,SUB,1))):$G(^ORD(101,B,101.05,SUB,1)),1:";")
"RTN","XINDX12",299,0)
 . I INDX="D Q" S INDX=";"
"RTN","XINDX12",300,0)
 . S INDC=B_"M"_SUB_" ; "_INDN_" - METHOD SUB FILE (#101.05) METHOD ACTION (#.02) - "_SUB
"RTN","XINDX12",301,0)
 . D ADD^XINDX11
"RTN","XINDX12",302,0)
 ;
"RTN","XINDX12",303,0)
 Q
"RTN","XINDX12",304,0)
HL7AP ; Process HL7 Application Parameters
"RTN","XINDX12",305,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",306,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",307,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",308,0)
 ; 771.06    1      PROCESSING ROUTINE               ^HL(771,D0,MSG,D1,R)
"RTN","XINDX12",309,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",310,0)
 W !,"Processing HL7 Application Parameters",!
"RTN","XINDX12",311,0)
 N SUB
"RTN","XINDX12",312,0)
 S SUB=""
"RTN","XINDX12",313,0)
 F  S SUB=$O(^HL(771,B,"MSG",SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",314,0)
 . S INDX=$S($L($G(^HL(771,B,"MSG",SUB,"R"))):"D "_$G(^HL(771,B,"MSG",SUB,"R")),1:";")
"RTN","XINDX12",315,0)
 . I INDX="D Q" S INDX=";"
"RTN","XINDX12",316,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - HL7 MESSAGE SUB FILE (#771.06) PROCESSING ROUTINE (#1) - "_SUB
"RTN","XINDX12",317,0)
 . D ADD^XINDX11
"RTN","XINDX12",318,0)
 Q
"RTN","XINDX12",319,0)
RPC ; Process Remote Procedures
"RTN","XINDX12",320,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",321,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",322,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",323,0)
 ; 8994      .02    TAG                              ^XWB(8994,D0,0) Piece 2              Needs to be concatenated with ROUTINE
"RTN","XINDX12",324,0)
 ; 8994      .03    ROUTINE                          ^XWB(8994,D0,0) Piece 3
"RTN","XINDX12",325,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",326,0)
 W !,"Processing Remote Procedures",!
"RTN","XINDX12",327,0)
 S INDX=$S($L($P($G(^XWB(8994,B,0)),U,2))&($L($P($G(^XWB(8994,B,0)),U,3))):"D "_$P($G(^XWB(8994,B,0)),U,2)_"^"_$P($G(^XWB(8994,B,0)),U,3),1:";")
"RTN","XINDX12",328,0)
 S INDC=B_" ; "_INDL_" - TAG ROUTINE (#.02 & .03)"
"RTN","XINDX12",329,0)
 D ADD^XINDX11
"RTN","XINDX12",330,0)
 Q
"RTN","XINDX13")
0^11^B306834020
"RTN","XINDX13",1,0)
XINDX13 ; OSE/SMH - Input, Print, and Sort Template Analysis;03/01/2018  8:37 AM
"RTN","XINDX13",2,0)
 ;;7.3;TOOLKIT;**140**;Apr 25, 1995;Build 40
"RTN","XINDX13",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX13",4,0)
 ;
"RTN","XINDX13",5,0)
 ; This routine finds non-self files that are pointed to by a template
"RTN","XINDX13",6,0)
 ; EPs DIPTM and DIETM support XINDX12 in finding M code in Input and
"RTN","XINDX13",7,0)
 ; Print templates.
"RTN","XINDX13",8,0)
 ;
"RTN","XINDX13",9,0)
ALL(path) ; [Public] Export all template CSV files at once to a specific dir
"RTN","XINDX13",10,0)
 I $G(path)="" S path=$$DEFDIR^%ZISH()
"RTN","XINDX13",11,0)
 D DIBT(path),DIET(path),DIPT(path)
"RTN","XINDX13",12,0)
 Q
"RTN","XINDX13",13,0)
 ;
"RTN","XINDX13",14,0)
DIBT(path,filename) ; [Public] Sort template analysis
"RTN","XINDX13",15,0)
 N outputData
"RTN","XINDX13",16,0)
 I $G(path)="" S path=$$DEFDIR^%ZISH()
"RTN","XINDX13",17,0)
 I $G(filename)="" S filename="DIBTOUT.csv"
"RTN","XINDX13",18,0)
 D DIBTCOL(.outputData)
"RTN","XINDX13",19,0)
 D DIBTOUT(.outputData,path,filename)
"RTN","XINDX13",20,0)
 Q
"RTN","XINDX13",21,0)
 ;
"RTN","XINDX13",22,0)
DIET(path,filename) ; [Public] Input template analysis
"RTN","XINDX13",23,0)
 N outputData
"RTN","XINDX13",24,0)
 I $G(path)="" S path=$$DEFDIR^%ZISH()
"RTN","XINDX13",25,0)
 I $G(filename)="" S filename="DIETOUT.csv"
"RTN","XINDX13",26,0)
 D DIETCOL(.outputData)
"RTN","XINDX13",27,0)
 D DIETOUT(.outputData,path,filename)
"RTN","XINDX13",28,0)
 Q
"RTN","XINDX13",29,0)
 ;
"RTN","XINDX13",30,0)
DIPT(path,filename) ; [Public] Print template analysis
"RTN","XINDX13",31,0)
 N outputData
"RTN","XINDX13",32,0)
 I $G(path)="" S path=$$DEFDIR^%ZISH()
"RTN","XINDX13",33,0)
 I $G(filename)="" S filename="DIPTOUT.csv"
"RTN","XINDX13",34,0)
 D DIPTCOL(.outputData)
"RTN","XINDX13",35,0)
 D DIPTOUT(.outputData,path,filename)
"RTN","XINDX13",36,0)
 Q
"RTN","XINDX13",37,0)
 ;
"RTN","XINDX13",38,0)
DIBTCOL(outputData) ; [Private] Sort Template Data Collection
"RTN","XINDX13",39,0)
 ; for each template
"RTN","XINDX13",40,0)
 N dibt F dibt=0:0 S dibt=$O(^DIBT(dibt)) Q:'dibt  D
"RTN","XINDX13",41,0)
 . Q:'$D(^DIBT(dibt,0))  ; get valid ones only
"RTN","XINDX13",42,0)
 . N name,file,isSort,line
"RTN","XINDX13",43,0)
 . S name=$P(^DIBT(dibt,0),U),file=$P(^DIBT(dibt,0),U,4)
"RTN","XINDX13",44,0)
 . S isSort=$O(^DIBT(dibt,2,0)) ; make sure they are sort templates
"RTN","XINDX13",45,0)
 . I 'isSort Q
"RTN","XINDX13",46,0)
 . ;
"RTN","XINDX13",47,0)
 . ; walk through each field
"RTN","XINDX13",48,0)
 . F line=0:0 S line=$O(^DIBT(dibt,2,line)) Q:'line  D
"RTN","XINDX13",49,0)
 .. N lineData,lineFile,lineField,lineFieldSpec
"RTN","XINDX13",50,0)
 .. ; We have some variances on how the data is stored (lines below)
"RTN","XINDX13",51,0)
 .. S:$D(^DIBT(dibt,2,line))#2 lineData=^(line)
"RTN","XINDX13",52,0)
 .. S:$D(^DIBT(dibt,2,line,0))#2 lineData=^(0)
"RTN","XINDX13",53,0)
 .. ;
"RTN","XINDX13",54,0)
 .. ; some vital data
"RTN","XINDX13",55,0)
 .. S lineFile=$P(lineData,U)
"RTN","XINDX13",56,0)
 .. I '$D(^DD(lineFile)) Q  ; bad DD
"RTN","XINDX13",57,0)
 .. S lineField=$P(lineData,U,2),lineFieldSpec=$P(lineData,U,3)
"RTN","XINDX13",58,0)
 .. ;
"RTN","XINDX13",59,0)
 .. ; if it's the same file, and not a relational field, we are not interested
"RTN","XINDX13",60,0)
 .. I lineFile=file,(lineFieldSpec'[":"&(lineFieldSpec'[" IN ")) Q
"RTN","XINDX13",61,0)
 .. ;
"RTN","XINDX13",62,0)
 .. ; if the parent is the same file, and ditto, we are still not interested
"RTN","XINDX13",63,0)
 .. I $$PARENT(lineFile)=file,(lineFieldSpec'[":"&(lineFieldSpec'[" IN ")) Q
"RTN","XINDX13",64,0)
 .. ;
"RTN","XINDX13",65,0)
 .. ; We are interested
"RTN","XINDX13",66,0)
 .. ; Do we have the field?
"RTN","XINDX13",67,0)
 .. I lineField="" D
"RTN","XINDX13",68,0)
 ... ; no we don't so get the fields using DICOMP
"RTN","XINDX13",69,0)
 ... N X,pairs,pair
"RTN","XINDX13",70,0)
 ... D EXPR^DICOMP(lineFile,"dmFITSL",lineFieldSpec)
"RTN","XINDX13",71,0)
 ... I '$D(X) Q
"RTN","XINDX13",72,0)
 ... ; X("USED")="404.51^.07;404.57^.02"
"RTN","XINDX13",73,0)
 ... I X("USED")="" Q  ; not an expression that uses fields
"RTN","XINDX13",74,0)
 ... F pairs=1:1:$L(X("USED"),";") D
"RTN","XINDX13",75,0)
 .... S pair=$P(X("USED"),";",pairs)
"RTN","XINDX13",76,0)
 .... N thisFile,thisField
"RTN","XINDX13",77,0)
 .... S thisFile=$P(pair,U,1),thisField=$P(pair,U,2)
"RTN","XINDX13",78,0)
 .... I thisFile=file Q
"RTN","XINDX13",79,0)
 .... S outputData(file,thisFile,thisField)=dibt_U_name
"RTN","XINDX13",80,0)
 .. ; we have a field. Take it at face value
"RTN","XINDX13",81,0)
 .. E  S outputData(file,lineFile,lineField)=dibt_U_name
"RTN","XINDX13",82,0)
 Q
"RTN","XINDX13",83,0)
 ;
"RTN","XINDX13",84,0)
DIBTOUT(outputData,outputPath,outputFile) ; [Private] Sort Template Data Output
"RTN","XINDX13",85,0)
 N POP
"RTN","XINDX13",86,0)
 D OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",87,0)
 I POP Q
"RTN","XINDX13",88,0)
 U IO
"RTN","XINDX13",89,0)
 N c,file,dstFile,dstField,dibtIEN,dibtName
"RTN","XINDX13",90,0)
 S c=","
"RTN","XINDX13",91,0)
 W "SORT TEMPLATE IEN,SORT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",92,0)
 F file=0:0 S file=$Q(outputData(file)) Q:'file  D
"RTN","XINDX13",93,0)
 . F dstFile=0:0 S dstFile=$O(outputData(file,dstFile)) Q:'dstFile  D
"RTN","XINDX13",94,0)
 .. F dstField=0:0 S dstField=$O(outputData(file,dstFile,dstField)) Q:'dstField  D
"RTN","XINDX13",95,0)
 ... N data S data=outputData(file,dstFile,dstField)
"RTN","XINDX13",96,0)
 ... S dibtIEN=$P(data,U,1),dibtName=$P(data,U,2)
"RTN","XINDX13",97,0)
 ... W dibtIEN_c_dibtName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",98,0)
 D CLOSE^%ZISH("file1")
"RTN","XINDX13",99,0)
 Q
"RTN","XINDX13",100,0)
 ;
"RTN","XINDX13",101,0)
DIETCOL(outputData,mCodeData) ; [Private] Input Template Data Collection
"RTN","XINDX13",102,0)
 ; for each template
"RTN","XINDX13",103,0)
 ; s outputData(file,thisFile,thisField)=dibt_U_name
"RTN","XINDX13",104,0)
 N diet F diet=0:0 S diet=$O(^DIE(diet)) Q:'diet  D
"RTN","XINDX13",105,0)
 . Q:'$D(^DIE(diet,0))  ; get valid ones only
"RTN","XINDX13",106,0)
 . N name,file,line,lineFile
"RTN","XINDX13",107,0)
 . S name=$P(^DIE(diet,0),U),file=$P(^DIE(diet,0),U,4)
"RTN","XINDX13",108,0)
 . ; for each file in the input template
"RTN","XINDX13",109,0)
 . F line=0:0 S line=$O(^DIE(diet,"DR",line)) Q:line>98!(line="")  D  ; 99 is reserved for some compiled code
"RTN","XINDX13",110,0)
 .. F lineFile=0:0 S lineFile=$O(^DIE(diet,"DR",line,lineFile)) Q:'lineFile!(lineFile'=+lineFile)  D
"RTN","XINDX13",111,0)
 ... N fields,fieldIndex,field
"RTN","XINDX13",112,0)
 ... S fields=^DIE(diet,"DR",line,lineFile)
"RTN","XINDX13",113,0)
 ... F fieldIndex=1:1:$L(fields,";") D
"RTN","XINDX13",114,0)
 .... S field=$P(fields,";",fieldIndex)
"RTN","XINDX13",115,0)
 .... ; various tests for the field
"RTN","XINDX13",116,0)
 .... Q:field=""  ; empty field. Can happen!
"RTN","XINDX13",117,0)
 .... ;
"RTN","XINDX13",118,0)
 .... ; FROM X+2^DIA3: Get M field and check it
"RTN","XINDX13",119,0)
 .... N X S X=field
"RTN","XINDX13",120,0)
 .... I X'?.E1":" S X=$S(X["//^":$P(X,"//^",2),1:X),X=$S(X[";":$P(X,";"),1:X) D ^DIM
"RTN","XINDX13",121,0)
 .... I $D(X) S mCodeData(lineFile,line)=X Q
"RTN","XINDX13",122,0)
 .... ;
"RTN","XINDX13",123,0)
 .... ; We analyzed the M code; now we just want the dependencies
"RTN","XINDX13",124,0)
 .... Q:lineFile=file  ; DR file same as our file; not interested
"RTN","XINDX13",125,0)
 .... Q:$$PARENT(lineFile)=file  ; ditto, for parent
"RTN","XINDX13",126,0)
 .... ;
"RTN","XINDX13",127,0)
 .... ; range like .01:5
"RTN","XINDX13",128,0)
 .... I $L(field,":")=2,(+$P(field,":"))=$P(field,":") D  Q
"RTN","XINDX13",129,0)
 ..... N start,end,eachField
"RTN","XINDX13",130,0)
 ..... S start=$P(field,":",1),end=$P(field,":",2)
"RTN","XINDX13",131,0)
 ..... I $D(^DD(lineFile,start)) S outputData(file,lineFile,start)=diet_U_name
"RTN","XINDX13",132,0)
 ..... S eachField=start
"RTN","XINDX13",133,0)
 ..... F  S eachField=$O(^DD(lineFile,eachField)) Q:eachField>end!(eachField="")  D
"RTN","XINDX13",134,0)
 ...... S outputData(file,lineFile,eachField)=diet_U_name
"RTN","XINDX13",135,0)
 .... ;
"RTN","XINDX13",136,0)
 .... Q:$E(field)="@"  ; jump to another place in the template. Not a field
"RTN","XINDX13",137,0)
 .... S field=+field
"RTN","XINDX13",138,0)
 .... Q:'$D(^DD(lineFile,field))  ; field doesn't exist
"RTN","XINDX13",139,0)
 .... S outputData(file,lineFile,field)=diet_U_name
"RTN","XINDX13",140,0)
 Q
"RTN","XINDX13",141,0)
 ;
"RTN","XINDX13",142,0)
DIETOUT(outputData,outputPath,outputFile) ; [Private] Input Template Data Output
"RTN","XINDX13",143,0)
 N POP
"RTN","XINDX13",144,0)
 D OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",145,0)
 I POP Q
"RTN","XINDX13",146,0)
 U IO
"RTN","XINDX13",147,0)
 N c,file,dstFile,dstField,dietIEN,dietName
"RTN","XINDX13",148,0)
 S c=","
"RTN","XINDX13",149,0)
 W "INPUT TEMPLATE IEN,INPUT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",150,0)
 F file=0:0 S file=$O(outputData(file)) Q:'file  D
"RTN","XINDX13",151,0)
 . F dstFile=0:0 S dstFile=$O(outputData(file,dstFile)) Q:'dstFile  D
"RTN","XINDX13",152,0)
 .. F dstField=0:0 S dstField=$O(outputData(file,dstFile,dstField)) Q:'dstField  D
"RTN","XINDX13",153,0)
 ... N data S data=outputData(file,dstFile,dstField)
"RTN","XINDX13",154,0)
 ... S dietIEN=$P(data,U,1),dietName=$P(data,U,2)
"RTN","XINDX13",155,0)
 ... W dietIEN_c_dietName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",156,0)
 D CLOSE^%ZISH("file1")
"RTN","XINDX13",157,0)
 Q
"RTN","XINDX13",158,0)
 ;
"RTN","XINDX13",159,0)
DIPTCOL(outputData,mCodeData) ; [Private] Print Template Data Collection
"RTN","XINDX13",160,0)
 ; for each template
"RTN","XINDX13",161,0)
 N dipt F dipt=0:0 S dipt=$O(^DIPT(dipt)) Q:'dipt  D
"RTN","XINDX13",162,0)
 . Q:'$D(^DIPT(dipt,0))  ; get valid ones only
"RTN","XINDX13",163,0)
 . N name,file
"RTN","XINDX13",164,0)
 . S name=$P(^DIPT(dipt,0),U),file=$P(^DIPT(dipt,0),U,4)
"RTN","XINDX13",165,0)
 . ;
"RTN","XINDX13",166,0)
 . ;D:$T(^XTMLOG)]"" INITEASY^XTMLOG("C","WARN")
"RTN","XINDX13",167,0)
 . ; debug
"RTN","XINDX13",168,0)
 . ; b:name="ZBJM FEE BASIS LIST"
"RTN","XINDX13",169,0)
 . ; debug
"RTN","XINDX13",170,0)
 . ;
"RTN","XINDX13",171,0)
 . ; for each field
"RTN","XINDX13",172,0)
 . N fileNamePrint,line
"RTN","XINDX13",173,0)
 . S fileNamePrint=1
"RTN","XINDX13",174,0)
 . F line=0:0 S line=$O(^DIPT(dipt,"F",line)) Q:'line  D
"RTN","XINDX13",175,0)
 .. N lineContents,fieldDataIndex
"RTN","XINDX13",176,0)
 .. S lineContents=^DIPT(dipt,"F",line)
"RTN","XINDX13",177,0)
 .. F fieldDataIndex=1:1:$L(lineContents,"~") D
"RTN","XINDX13",178,0)
 ... N fieldData,fields
"RTN","XINDX13",179,0)
 ... S fieldData=$P(lineContents,"~",fieldDataIndex) Q:fieldData=""
"RTN","XINDX13",180,0)
 ... S fields=$P(fieldData,";")
"RTN","XINDX13",181,0)
 ... Q:fields=""!(fields=" ")
"RTN","XINDX13",182,0)
 ... ;
"RTN","XINDX13",183,0)
 ... ; analyze the fields
"RTN","XINDX13",184,0)
 ... ;
"RTN","XINDX13",185,0)
 ... ; See if we have a multiple navigation. These are noted in the first piece
"RTN","XINDX13",186,0)
 ... ; as a series of numbers like 50,1,2,5...
"RTN","XINDX13",187,0)
 ... ; don't process these any further if we find them
"RTN","XINDX13",188,0)
 ... ; We don't process them as they mean we don't branch out to other files
"RTN","XINDX13",189,0)
 ... ; --we just trace our own file down.
"RTN","XINDX13",190,0)
 ... N fieldsUpright,fieldIndex,field
"RTN","XINDX13",191,0)
 ... S fieldsUpright=1 F fieldIndex=1:1:$L(fields,",") D  Q:'fieldsUpright
"RTN","XINDX13",192,0)
 .... S field=$P(fields,",",fieldIndex)
"RTN","XINDX13",193,0)
 .... S:field'=+field!(field<0) fieldsUpright=0
"RTN","XINDX13",194,0)
 ... I fieldsUpright Q  ;D:$T(^XTMLOG)]"" DEBUG^XTMLOG("Qutting since upright","name,file,fieldData") Q
"RTN","XINDX13",195,0)
 ... ;
"RTN","XINDX13",196,0)
 ... ; Exclude transition lines
"RTN","XINDX13",197,0)
 ... ; We are not interested in the lines that switch files (e.g. in 52: 'PROVIDER:')
"RTN","XINDX13",198,0)
 ... N ignoreTransition,fieldIndex,field,nextField
"RTN","XINDX13",199,0)
 ... S ignoreTransition=0 F fieldIndex=1:1:$L(fields,",") D  Q:ignoreTransition
"RTN","XINDX13",200,0)
 .... S field=$P(fields,",",fieldIndex),nextField=$P(fields,",",fieldIndex+1)
"RTN","XINDX13",201,0)
 .... I $E(nextField)=U S ignoreTransition=1 Q
"RTN","XINDX13",202,0)
 ... I ignoreTransition Q  ;D:$T(^XTMLOG)]"" DEBUG^XTMLOG("Quitting due to context transistion with no fields","name,file,fieldData") Q
"RTN","XINDX13",203,0)
 ... ;
"RTN","XINDX13",204,0)
 ... ; If zpiece is defined, then we have a COMPUTED EXPRESSION or M code
"RTN","XINDX13",205,0)
 ... N Zpiece,i
"RTN","XINDX13",206,0)
 ... S Zpiece=0 F i=1:1:$L(fieldData,";") I $P(fieldData,";",i)="Z" S Zpiece=i Q
"RTN","XINDX13",207,0)
 ... ;
"RTN","XINDX13",208,0)
 ... ; exclude print only fields (quoted values, or literal $C)
"RTN","XINDX13",209,0)
 ... N printOnlyField
"RTN","XINDX13",210,0)
 ... S printOnlyField=0
"RTN","XINDX13",211,0)
 ... I 'Zpiece F fieldIndex=1:1:$L(fields,",") D  Q:printOnlyField
"RTN","XINDX13",212,0)
 .... S field=$P(fields,",",fieldIndex)
"RTN","XINDX13",213,0)
 .... Q:+field=field  ; numeric -- quit -- not a literal
"RTN","XINDX13",214,0)
 .... I $E(field)="""" S printOnlyField=1
"RTN","XINDX13",215,0)
 .... I $E(field,1,5)="W $C(" S printOnlyField=1
"RTN","XINDX13",216,0)
 ... I printOnlyField Q  ;D:$T(^XTMLOG)]"" DEBUG^XTMLOG("Quitting for printOnlyField","name,file,fieldData,printOnlyField") Q
"RTN","XINDX13",217,0)
 ... ;
"RTN","XINDX13",218,0)
 ...  ; This can be a "hidden" M field masqurading
"RTN","XINDX13",219,0)
 ... N isNonTradMCode S isNonTradMCode=0
"RTN","XINDX13",220,0)
 ... I 'Zpiece D
"RTN","XINDX13",221,0)
 .... N p1 S p1=$P(fields,",")
"RTN","XINDX13",222,0)
 .... Q:+p1=p1  ; Just a normal field
"RTN","XINDX13",223,0)
 .... N X S X=$P(fields,";") D ^DIM
"RTN","XINDX13",224,0)
 .... I $D(X) S isNonTradMCode=1
"RTN","XINDX13",225,0)
 .... ;D:$t(^XTMLOG)]"" WARN^XTMLOG("Treating Print Field as M code","file,fieldData")
"RTN","XINDX13",226,0)
 .... S mCodeData(+file,line)=X
"RTN","XINDX13",227,0)
 ... ;
"RTN","XINDX13",228,0)
 ... ; Don't process any further if non-Traditional M code
"RTN","XINDX13",229,0)
 ... Q:isNonTradMCode
"RTN","XINDX13",230,0)
 ... ;
"RTN","XINDX13",231,0)
 ... ; Now, process non-M code fields
"RTN","XINDX13",232,0)
 ... ; Best template to test this with: MAGV-PAT-QUERY
"RTN","XINDX13",233,0)
 ... ; NB: This is a recursive search; each search updates the pointerFile variable
"RTN","XINDX13",234,0)
 ... ; We only want the last entry in the pointerFile chain to file the data if there
"RTN","XINDX13",235,0)
 ... ; is a field we want to grab
"RTN","XINDX13",236,0)
 ... N pointerFile S pointerFile=0
"RTN","XINDX13",237,0)
 ... I 'Zpiece F fieldIndex=1:1:$L(fields,",") D
"RTN","XINDX13",238,0)
 .... N field,nextField
"RTN","XINDX13",239,0)
 .... S field=$P(fields,",",fieldIndex),nextField=$P(fields,",",fieldIndex+1)
"RTN","XINDX13",240,0)
 .... I field<0 S pointerFile=-field Q
"RTN","XINDX13",241,0)
 .... I field>0,'pointerFile Q  ; field in original file. We are not interested
"RTN","XINDX13",242,0)
 .... D ASSERT(+pointerFile=pointerFile)
"RTN","XINDX13",243,0)
 .... D ASSERT(+field=field)
"RTN","XINDX13",244,0)
 .... ;D:$T(^XTMLOG)]"" INFO^XTMLOG("Num Parsed as:","fieldData,pointerFile,field")
"RTN","XINDX13",245,0)
 .... I field>0,pointerFile S outputData(file,pointerFile,field)=dipt_U_name
"RTN","XINDX13",246,0)
 ... I 'Zpiece Q  ; can't quit on the for line above
"RTN","XINDX13",247,0)
 ... ;
"RTN","XINDX13",248,0)
 ... ; Now, process M code/Copmputed code fields.
"RTN","XINDX13",249,0)
 ... N exitEarly S exitEarly=0
"RTN","XINDX13",250,0)
 ... ;
"RTN","XINDX13",251,0)
 ... ; We are really interested in capturing the computed field information
"RTN","XINDX13",252,0)
 ... ; (Z piece stuff only)
"RTN","XINDX13",253,0)
 ... ; Calculate the correct context for the Computed Expression
"RTN","XINDX13",254,0)
 ... N mCodeContext,mCode
"RTN","XINDX13",255,0)
 ... S mCode="",mCodeContext=file ; The default
"RTN","XINDX13",256,0)
 ... N fileField,fileFieldIndex
"RTN","XINDX13",257,0)
 ... F fileFieldIndex=1:1:$L(fields,",") D  Q:mCode]""
"RTN","XINDX13",258,0)
 .... S fileField=$P(fields,",",fileFieldIndex)
"RTN","XINDX13",259,0)
 .... I fileField'=+fileField S mCode=$P(fields,",",fileFieldIndex,99) Q
"RTN","XINDX13",260,0)
 .... ;
"RTN","XINDX13",261,0)
 .... ; Relational navigation
"RTN","XINDX13",262,0)
 .... I fileField<0 S mCodeContext=-fileField Q
"RTN","XINDX13",263,0)
 .... ;
"RTN","XINDX13",264,0)
 .... ; Subfile processing. Move context to subfile
"RTN","XINDX13",265,0)
 .... I '$D(^DD(mCodeContext,fileField,0)) S exitEarly=1 D  Q  ; doesn't exist!
"RTN","XINDX13",266,0)
 ..... ;D:$T(^XTMLOG)]"" WARN^XTMLOG("^DD("_mCodeContext_","_fileField_",0) does not exist")
"RTN","XINDX13",267,0)
 .... I fileField>0,$P(^DD(mCodeContext,fileField,0),U,2) S mCodeContext=+$P(^DD(mCodeContext,fileField,0),U,2) Q
"RTN","XINDX13",268,0)
 ... Q:exitEarly
"RTN","XINDX13",269,0)
 ... ;D:$t(^XTMLOG)]"" DEBUG^XTMLOG("Context for "_fieldData_" is "_mCodeContext_" and M code is "_mCode)
"RTN","XINDX13",270,0)
 ... ;
"RTN","XINDX13",271,0)
 ... ; debug
"RTN","XINDX13",272,0)
 ... ; w mCodeContext,!
"RTN","XINDX13",273,0)
 ... ; debug
"RTN","XINDX13",274,0)
 ... ;
"RTN","XINDX13",275,0)
 ... ;
"RTN","XINDX13",276,0)
 ... ; Get the potentially COMPUTED EXPRESSION code for this field
"RTN","XINDX13",277,0)
 ... N potComputedCode S potComputedCode=$P(fieldData,";",Zpiece+1)
"RTN","XINDX13",278,0)
 ... S potComputedCode=$E(potComputedCode,2,$L(potComputedCode)-1)
"RTN","XINDX13",279,0)
 ... ;
"RTN","XINDX13",280,0)
 ... ; If M Code is broken up, put it back together
"RTN","XINDX13",281,0)
 ... I $F(mCode,"X DXS") D
"RTN","XINDX13",282,0)
 .... N startdxs,enddxs,dxsString,s1,s2,dxsCode,%
"RTN","XINDX13",283,0)
 .... S startdxs=$f(mCode,"DXS")-3,enddxs=$f(mCode,")",startdxs)-1,dxsString=$E(mCode,startdxs,enddxs)
"RTN","XINDX13",284,0)
 .... S s1=$QS(dxsString,1),s2=$QS(dxsString,2),dxsCode=^DIPT(dipt,"DXS",s1,s2)
"RTN","XINDX13",285,0)
 .... S %("X "_dxsString)=dxsCode,mCode=$$REPLACE^XLFSTR(mCode,.%)
"RTN","XINDX13",286,0)
 ... ;
"RTN","XINDX13",287,0)
 ... ; Is it the same (after removing the quotes) as the MCode?
"RTN","XINDX13",288,0)
 ... ; If so, then this is not a computed expression
"RTN","XINDX13",289,0)
 ... ; We can abandon hope of finding what field it refers to.
"RTN","XINDX13",290,0)
 ... I potComputedCode=mCode D  Q
"RTN","XINDX13",291,0)
 .... S mCodeData(+file,line)=mCode
"RTN","XINDX13",292,0)
 .... ;D:$T(^XTMLOG)]"" INFO^XTMLOG(fieldData_" in "_file_" considered to be M code")
"RTN","XINDX13",293,0)
 ...
"RTN","XINDX13",294,0)
 ... ; debug
"RTN","XINDX13",295,0)
 ...
"RTN","XINDX13",296,0)
 ... ; At this point, we think it's a computed expression.
"RTN","XINDX13",297,0)
 ... ; Lets try to to see
"RTN","XINDX13",298,0)
 ... N X
"RTN","XINDX13",299,0)
 ... D EXPR^DICOMP(mCodeContext,"dmFITSL",potComputedCode)
"RTN","XINDX13",300,0)
 ... I '$D(X) Q  ;D:$T(^XTMLOG)]"" ERROR^XTMLOG("Can't resolve "_fieldData_" into fields (context "_mCodeContext_", name "_name_")") Q
"RTN","XINDX13",301,0)
 ... Q:X("USED")=""  ; not an expression that uses fields (NOW, PAGE)
"RTN","XINDX13",302,0)
 ... ;
"RTN","XINDX13",303,0)
 ... N pairs,pair F pairs=1:1:$L(X("USED"),";") D
"RTN","XINDX13",304,0)
 .... S pair=$P(X("USED"),";",pairs)
"RTN","XINDX13",305,0)
 .... N thisFile,thisField
"RTN","XINDX13",306,0)
 .... S thisFile=$P(pair,U,1),thisField=$P(pair,U,2)
"RTN","XINDX13",307,0)
 .... Q:thisFile=file
"RTN","XINDX13",308,0)
 .... S outputData(file,thisFile,thisField)=dipt_U_name
"RTN","XINDX13",309,0)
 ;D:$T(^XTMLOG)]"" ENDLOG^XTMLOG()
"RTN","XINDX13",310,0)
 Q
"RTN","XINDX13",311,0)
 ;
"RTN","XINDX13",312,0)
DIPTOUT(outputData,outputPath,outputFile) ; [Private] Print Template Data Output
"RTN","XINDX13",313,0)
 N POP
"RTN","XINDX13",314,0)
 D OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",315,0)
 I POP Q
"RTN","XINDX13",316,0)
 U IO
"RTN","XINDX13",317,0)
 N c,file,dstFile,dstField,dietIEN,dietName
"RTN","XINDX13",318,0)
 S c=","
"RTN","XINDX13",319,0)
 W "PRINT TEMPLATE IEN,PRINT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",320,0)
 F file=0:0 S file=$O(outputData(file)) Q:'file  D
"RTN","XINDX13",321,0)
 . F dstFile=0:0 S dstFile=$O(outputData(file,dstFile)) Q:'dstFile  D
"RTN","XINDX13",322,0)
 .. F dstField=0:0 S dstField=$O(outputData(file,dstFile,dstField)) Q:'dstField  D
"RTN","XINDX13",323,0)
 ... N data S data=outputData(file,dstFile,dstField)
"RTN","XINDX13",324,0)
 ... S dietIEN=$P(data,U,1),dietName=$P(data,U,2)
"RTN","XINDX13",325,0)
 ... W dietIEN_c_dietName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",326,0)
 D CLOSE^%ZISH("file1")
"RTN","XINDX13",327,0)
 Q
"RTN","XINDX13",328,0)
 ;
"RTN","XINDX13",329,0)
 ; DIETM and DIPTM are used by XINDEX to process input and sort templates
"RTN","XINDX13",330,0)
 ; respectively. XINDEX passes required parameters through the stack instead
"RTN","XINDX13",331,0)
 ; passed variables.
"RTN","XINDX13",332,0)
 ;
"RTN","XINDX13",333,0)
 ; B = {IEN}
"RTN","XINDX13",334,0)
 ; INDLC = {counter}
"RTN","XINDX13",335,0)
 ; INDRN = {faux routine prefix}
"RTN","XINDX13",336,0)
 ; INDC = {IEN} ; {NAME} - {DISPLAY NAME}
"RTN","XINDX13",337,0)
 ; INDX = {code to be XINDEXED}
"RTN","XINDX13",338,0)
 ; INDL = {NAME field (.01) of IEN}
"RTN","XINDX13",339,0)
DIETM ; [Public] Collect M code fileds from all input templates
"RTN","XINDX13",340,0)
 ; ZEXCEPT: B,INDX
"RTN","XINDX13",341,0)
 Q:'$D(^DIE(B,0))  ; get valid ones only
"RTN","XINDX13",342,0)
 N name,file
"RTN","XINDX13",343,0)
 S name=$P(^DIE(B,0),U),file=$P(^DIE(B,0),U,4)
"RTN","XINDX13",344,0)
 ;
"RTN","XINDX13",345,0)
 ; for each file in the input template
"RTN","XINDX13",346,0)
 N line,lineFile
"RTN","XINDX13",347,0)
 F line=0:0 S line=$O(^DIE(B,"DR",line)) Q:line>98!(line="")  D  ; 99 is reserved for some compiled code
"RTN","XINDX13",348,0)
 . F lineFile=0:0 S lineFile=$O(^DIE(B,"DR",line,lineFile)) Q:'lineFile!(lineFile'=+lineFile)  D
"RTN","XINDX13",349,0)
 .. N fields,fieldIndex,field
"RTN","XINDX13",350,0)
 .. S fields=^DIE(B,"DR",line,lineFile) F fieldIndex=1:1:$L(fields,";") D
"RTN","XINDX13",351,0)
 ... S field=$P(fields,";",fieldIndex)
"RTN","XINDX13",352,0)
 ... ; various tests for the field
"RTN","XINDX13",353,0)
 ... Q:field=""  ; empty field. Can happen!
"RTN","XINDX13",354,0)
 ... ;
"RTN","XINDX13",355,0)
 ... ; FROM X+2^DIA3: Get M field and check it
"RTN","XINDX13",356,0)
 ... N X S X=field
"RTN","XINDX13",357,0)
 ... I X'?.E1":" S X=$S(X["//^":$P(X,"//^",2),1:X),X=$S(X[";":$P(X,";"),1:X) D ^DIM
"RTN","XINDX13",358,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",359,0)
 ... I $D(X) S INDX=X D ADDLN^XINDX11
"RTN","XINDX13",360,0)
 Q
"RTN","XINDX13",361,0)
 ;
"RTN","XINDX13",362,0)
DIPTM ; [Public] Collect M code fields from all print templates
"RTN","XINDX13",363,0)
 ; ZEXCEPT: B,INDX
"RTN","XINDX13",364,0)
 Q:'$D(^DIPT(B,0))                 ; get valid ones only
"RTN","XINDX13",365,0)
 N name,file,fileNamePrint,line
"RTN","XINDX13",366,0)
 S name=$P(^DIPT(B,0),U),file=$P(^DIPT(B,0),U,4)
"RTN","XINDX13",367,0)
 ;
"RTN","XINDX13",368,0)
 ; for each field
"RTN","XINDX13",369,0)
 S fileNamePrint=1
"RTN","XINDX13",370,0)
 F line=0:0 S line=$O(^DIPT(B,"F",line)) Q:'line  D
"RTN","XINDX13",371,0)
 . N lineContents,fieldDataIndex,fieldData,fields
"RTN","XINDX13",372,0)
 . S lineContents=^DIPT(B,"F",line)
"RTN","XINDX13",373,0)
 . F fieldDataIndex=1:1:$L(lineContents,"~") D
"RTN","XINDX13",374,0)
 .. S fieldData=$P(lineContents,"~",fieldDataIndex)
"RTN","XINDX13",375,0)
 .. Q:fieldData=""
"RTN","XINDX13",376,0)
 .. S fields=$P(fieldData,";")
"RTN","XINDX13",377,0)
 .. Q:fields=""!(fields=" ")
"RTN","XINDX13",378,0)
 .. ;
"RTN","XINDX13",379,0)
 .. ; If zpiece is defined, then we have a COMPUTED EXPRESSION or M code
"RTN","XINDX13",380,0)
 .. N i,Zpiece
"RTN","XINDX13",381,0)
 .. S Zpiece=0 F i=1:1:$L(fieldData,";") I $P(fieldData,";",i)="Z" S Zpiece=i Q
"RTN","XINDX13",382,0)
 .. ;
"RTN","XINDX13",383,0)
 .. ; This can be a "hidden" M field masqurading -- the entire line is M code
"RTN","XINDX13",384,0)
 .. ; NB: This is rare, but print templates support that.
"RTN","XINDX13",385,0)
 .. N isNonTradMCode S isNonTradMCode=0
"RTN","XINDX13",386,0)
 .. I 'Zpiece D
"RTN","XINDX13",387,0)
 ... N p1,X
"RTN","XINDX13",388,0)
 ... S p1=$P(fields,",") I +p1=p1 Q  ; Just a normal field
"RTN","XINDX13",389,0)
 ... S X=$P(fields,";") D ^DIM
"RTN","XINDX13",390,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",391,0)
 ... I $D(X) S isNonTradMCode=1 S INDX=X D ADDLN^XINDX11 Q
"RTN","XINDX13",392,0)
 .. ;
"RTN","XINDX13",393,0)
 .. Q:isNonTradMCode  ; We already have M code. Quit.
"RTN","XINDX13",394,0)
 .. ;
"RTN","XINDX13",395,0)
 .. Q:'Zpiece  ; Straight field
"RTN","XINDX13",396,0)
 .. ;
"RTN","XINDX13",397,0)
 .. ; extract compiled code from file/subfile references
"RTN","XINDX13",398,0)
 .. N mCode,fileField,fileFieldIndex
"RTN","XINDX13",399,0)
 .. S mCode=""
"RTN","XINDX13",400,0)
 .. F fileFieldIndex=1:1:$L(fields,",") D  Q:mCode]""
"RTN","XINDX13",401,0)
 ... S fileField=$P(fields,",",fileFieldIndex)
"RTN","XINDX13",402,0)
 ... I fileField'=+fileField S mCode=$P(fields,",",fileFieldIndex,99)
"RTN","XINDX13",403,0)
 .. ;
"RTN","XINDX13",404,0)
 .. I mCode="" Q  ; no compiled code in this field
"RTN","XINDX13",405,0)
 .. ;
"RTN","XINDX13",406,0)
 .. ; If zpiece is defined, see if computed expression or M code
"RTN","XINDX13",407,0)
 .. ; Get the potentially COMPUTED EXPRESSION code for this field
"RTN","XINDX13",408,0)
 .. N potComputedCode S potComputedCode=$P(fieldData,";",Zpiece+1)
"RTN","XINDX13",409,0)
 .. S potComputedCode=$E(potComputedCode,2,$L(potComputedCode)-1)
"RTN","XINDX13",410,0)
 .. ;
"RTN","XINDX13",411,0)
 .. ; If M Code is broken up, put it back together
"RTN","XINDX13",412,0)
 .. I $F(mCode,"X DXS") D
"RTN","XINDX13",413,0)
 ... N startdxs,enddxs,dxsString,s1,s2,dxsCode,%
"RTN","XINDX13",414,0)
 ... S startdxs=$F(mCode,"DXS")-3,enddxs=$F(mCode,")",startdxs)-1
"RTN","XINDX13",415,0)
 ... S dxsString=$E(mCode,startdxs,enddxs),s1=$QS(dxsString,1),s2=$QS(dxsString,2)
"RTN","XINDX13",416,0)
 ... S dxsCode=^DIPT(B,"DXS",s1,s2)
"RTN","XINDX13",417,0)
 ... S %("X "_dxsString)=dxsCode,mCode=$$REPLACE^XLFSTR(mCode,.%)
"RTN","XINDX13",418,0)
 .. ;
"RTN","XINDX13",419,0)
 .. ; Is it the same (after removing the quotes) as the MCode?
"RTN","XINDX13",420,0)
 .. ; If so, then this is not a computed expression
"RTN","XINDX13",421,0)
 .. I potComputedCode=mCode D  Q
"RTN","XINDX13",422,0)
 ... N X S X=mCode D ^DIM
"RTN","XINDX13",423,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",424,0)
 ... I $D(X) S INDX=X D ADDLN^XINDX11
"RTN","XINDX13",425,0)
 Q
"RTN","XINDX13",426,0)
 ;
"RTN","XINDX13",427,0)
PARENT(subfile) ; [Private] Find out who my parent is
"RTN","XINDX13",428,0)
 ; WARNING: Recursive algorithm
"RTN","XINDX13",429,0)
 I $D(^DD(subfile,0,"UP")) Q $$PARENT(^("UP"))
"RTN","XINDX13",430,0)
 Q subfile
"RTN","XINDX13",431,0)
 ;
"RTN","XINDX13",432,0)
ASSERT(x) I 'x S $EC=",u-assert,"
"RTN","XINDX13",433,0)
 Q
"RTN","XINDX13",434,0)
 ;
"RTN","XINDX2")
0^1^B28369536
"RTN","XINDX2",1,0)
XINDX2 ;ISC/REL,GRK,RWF - PROCESS "GRB" ;4/2/08  16:35
"RTN","XINDX2",2,0)
 ;;7.3;TOOLKIT;**20,27,48,110,121,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX2",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX2",4,0)
% S LINE=GRB,(CM,COM)="" F I=0:0 S STR=$P(LINE,$C(9),1),LINE=$P(LINE,$C(9),2,999),NOA=0 D:STR]"" ARGG Q:LINE']""
"RTN","XINDX2",5,0)
 Q
"RTN","XINDX2",6,0)
 ;Process argument
"RTN","XINDX2",7,0)
ARGG D ^XINDX9 S I=0,AC=999 F %=0:0 S %=$O(LV(%)) Q:%'>0  S I(%)=0
"RTN","XINDX2",8,0)
ARGS ;Proccess all agruments at this level
"RTN","XINDX2",9,0)
 S AC=LI+AC F  Q:AC'>LI  D INC Q:S=""  D ARG
"RTN","XINDX2",10,0)
 Q
"RTN","XINDX2",11,0)
 ;
"RTN","XINDX2",12,0)
ARG ;Process one argument
"RTN","XINDX2",13,0)
 I CH="," D PEEK I ","[Y Q:$$OBJF()  D E^XINDX1(21):($$FNC()'="$$") Q  ;if ",," must be function of object method
"RTN","XINDX2",14,0)
 Q:CH=Q
"RTN","XINDX2",15,0)
 ;Cache Objects;  Package.Class.method or ##class(package.class).method
"RTN","XINDX2",16,0)
 I $D(LV(LV,"OBJ",LI)) G OBJ2:CH=".",OBJ1
"RTN","XINDX2",17,0)
 I CH="#",$E(S,1,2)="##" D OBJ Q
"RTN","XINDX2",18,0)
 I S'[".",(CH?1A)!(CH="%") D LOC Q
"RTN","XINDX2",19,0)
 I CH="^" S LOC="G" G NAK:S="^",EXTGLO:S["[",EXTGLO:S["|",GLO Q
"RTN","XINDX2",20,0)
 I CH="$" D FUN Q
"RTN","XINDX2",21,0)
 I CH="?" D PAT Q
"RTN","XINDX2",22,0)
 I CH="(" D INC S NOA=S D DN,INC Q
"RTN","XINDX2",23,0)
 Q
"RTN","XINDX2",24,0)
 ;
"RTN","XINDX2",25,0)
NAK S LOC="N"
"RTN","XINDX2",26,0)
 G GLO
"RTN","XINDX2",27,0)
 ;
"RTN","XINDX2",28,0)
EXTGLO D E^XINDX1(50),EG,INC S S=U_S
"RTN","XINDX2",29,0)
 G GLO
"RTN","XINDX2",30,0)
 ;
"RTN","XINDX2",31,0)
EG N GK,LOC S GK="",LOC="L" ;HANDLE EXTENDED GLOBAL
"RTN","XINDX2",32,0)
 F  D INC Q:"]"[CH  Q:"|"[CH  D ARG
"RTN","XINDX2",33,0)
 Q
"RTN","XINDX2",34,0)
GLO S X=$E(S,2,99) I X]"",S'["^$",X'?1(1U,1"%").7UN D E^XINDX1(12)
"RTN","XINDX2",35,0)
 I GK["*",$E(S,1,2)["^%" D E^XINDX1(45)
"RTN","XINDX2",36,0)
 I S1="(" S S=S_S1 D PEEKDN S:(Y?1N.NP)!($A(Y)=34)!("^$J^$I^$H^"[(U_Y)) S=S_Y
"RTN","XINDX2",37,0)
 D ST(LOC,S) I S1="(" D INC2 S NOA=S D DN,INC
"RTN","XINDX2",38,0)
 Q
"RTN","XINDX2",39,0)
 ;
"RTN","XINDX2",40,0)
LOC S LOC="L" ;Check variables at end. I S'?1.8UN,S'?1"%".7UN,S'?1.8LN,S'?1"%".7LN D E^XINDX1(11)
"RTN","XINDX2",41,0)
 I S1="(" S S=S_S1 D PEEKDN S:(Y?1.N)!($A(Y)=34) S=S_Y
"RTN","XINDX2",42,0)
 D ST(LOC,S) I S1="(" D INC2 S NOA=S D DN,INC
"RTN","XINDX2",43,0)
 Q
"RTN","XINDX2",44,0)
OBJ ;Cache Objects within ##class
"RTN","XINDX2",45,0)
 S LOC="O"
"RTN","XINDX2",46,0)
 I S1'="("  D E^XINDX1(3)
"RTN","XINDX2",47,0)
 D PEEKDN S S=Y I S[".",'$$OBJTST(S) D E^XINDX1(64)
"RTN","XINDX2",48,0)
 D ST(LOC,S),INC2 S NOA=S D DN,INC
"RTN","XINDX2",49,0)
 Q
"RTN","XINDX2",50,0)
OBJ1 ;Cache Objects not within ##class, contains "."
"RTN","XINDX2",51,0)
 S LOC="O"
"RTN","XINDX2",52,0)
 D ST(LOC,S)
"RTN","XINDX2",53,0)
 Q
"RTN","XINDX2",54,0)
OBJ2 ;Method
"RTN","XINDX2",55,0)
 D PEEKDN
"RTN","XINDX2",56,0)
 I 'Y D INC2 S NOA=S D DN,INC
"RTN","XINDX2",57,0)
 Q
"RTN","XINDX2",58,0)
 ;
"RTN","XINDX2",59,0)
OBJF() ; return line where object has an open "(" for parameters
"RTN","XINDX2",60,0)
 N %
"RTN","XINDX2",61,0)
 Q:LV<2 0  ;must be down at least 1 level
"RTN","XINDX2",62,0)
 S %=$O(LV(LV-1,"OBJ",""),-1) ;find last object at previous level
"RTN","XINDX2",63,0)
 Q $S('%:0,LV(LV-1,%+1)="(":%,1:0) ; returns 0 if can't find object or object has no parameter
"RTN","XINDX2",64,0)
 ;
"RTN","XINDX2",65,0)
PEEK S Y=$G(LV(LV,LI+1))
"RTN","XINDX2",66,0)
 Q
"RTN","XINDX2",67,0)
 ;
"RTN","XINDX2",68,0)
INC2 S LI=LI+1 ;Drop into INC
"RTN","XINDX2",69,0)
INC S LI=LI+1,S=$G(LV(LV,LI)),S1=$G(LV(LV,LI+1)),CH=$E(S) G:$A(S)=10 ERR
"RTN","XINDX2",70,0)
 Q
"RTN","XINDX2",71,0)
 ;
"RTN","XINDX2",72,0)
DN S LI(LV)=LI,LI(LV,1)=AC,LV=LV+1,LI=LI(LV),AC=NOA
"RTN","XINDX2",73,0)
 D ARGS,UP
"RTN","XINDX2",74,0)
 Q
"RTN","XINDX2",75,0)
UP ;Inc LI as we save to skip the $C(10).
"RTN","XINDX2",76,0)
 D PEEK D:$A(Y)'=10 ERR S LI(LV)=LI+1,LV=LV-1,LI=LI(LV),AC=LI(LV,1)
"RTN","XINDX2",77,0)
 Q
"RTN","XINDX2",78,0)
 ;
"RTN","XINDX2",79,0)
PEEKDN S Y=$G(LV(LV+1,LI(LV+1)+1))
"RTN","XINDX2",80,0)
 Q
"RTN","XINDX2",81,0)
 ;
"RTN","XINDX2",82,0)
ERR D E^XINDX1(43) S (S,S1,CH)="" Q
"RTN","XINDX2",83,0)
 S Z=$P(LV(LV+1),$C(9),LI(LV+1),99),Z=$P(Z,$C(10)) W !,"COUNT=",$L(Z,",")
"RTN","XINDX2",84,0)
 ;functions
"RTN","XINDX2",85,0)
FUN N FUN S FUN=S G EXT:S["$$",PKG:S["$&",SPV:S1'["(" S NOA=$P(S,"^",2)
"RTN","XINDX2",86,0)
 D INC2 I S'>0 D E^XINDX1(43) ;Sit on NOA
"RTN","XINDX2",87,0)
 G:FUN["$TE" TEXT
"RTN","XINDX2",88,0)
 S Y=1 F Z1=LI(LV+1)+1:1 S X=$G(LV(LV+1,Z1)) Q:$A(X)=10!(X="")  S:X="," Y=Y+1
"RTN","XINDX2",89,0)
 I NOA,Y<NOA!(Y>$P(NOA,";",2)) D E^XINDX1(43)
"RTN","XINDX2",90,0)
 S NOA=S D DN,INC
"RTN","XINDX2",91,0)
 Q
"RTN","XINDX2",92,0)
 ;
"RTN","XINDX2",93,0)
TEXT ; process $T
"RTN","XINDX2",94,0)
 N X1,X2
"RTN","XINDX2",95,0)
 S Y=$$ASM^XINDX3(LV+1,LI(LV+1)+1,$C(10)) D ST("MK","$T("_$S($E(Y)'="+":Y,1:""))
"RTN","XINDX2",96,0)
 I $$VT(Y) D ST("I",Y) ;internal label
"RTN","XINDX2",97,0)
 ;check if external routine
"RTN","XINDX2",98,0)
 I Y["^",$$VT($P(Y,"^",2)) S X1=$P(Y,"^"),X2=$P(Y,"^",2),Y=X1 D ST("X",X2_$S($$VT(X1):" "_X1,1:""))
"RTN","XINDX2",99,0)
 D FLUSH(LV+1)
"RTN","XINDX2",100,0)
 Q
"RTN","XINDX2",101,0)
 ;special variables
"RTN","XINDX2",102,0)
SPV ;
"RTN","XINDX2",103,0)
 I "^$D^$EC^$ES^$ET^$I^$K^$P^$Q^$ST^$SY^"[("^"_X_"^") D ST("MK",X)
"RTN","XINDX2",104,0)
 Q
"RTN","XINDX2",105,0)
 ;
"RTN","XINDX2",106,0)
EXT ;Extrinsic functions
"RTN","XINDX2",107,0)
 I $E(S1)="^" S Y=$E(S1,2,99)_" "_S D INC S S=Y ;Build S and fall thru
"RTN","XINDX2",108,0)
 D ST($S(S[" ":"X",1:"I"),S) ;Internal, eXternal
"RTN","XINDX2",109,0)
 I S1["(" D INC2 S NOA=S D DN,INC ;Process param.
"RTN","XINDX2",110,0)
 Q
"RTN","XINDX2",111,0)
 ;
"RTN","XINDX2",112,0)
PKG ;External Package
"RTN","XINDX2",113,0)
 D ST("X",S) ;Record External name
"RTN","XINDX2",114,0)
 I S1["(" D INC2 S NOA=S D DN,INC ;Process param.
"RTN","XINDX2",115,0)
 Q
"RTN","XINDX2",116,0)
 ;
"RTN","XINDX2",117,0)
PAT D INC I $E(S)="@" D INC,ARG Q
"RTN","XINDX2",118,0)
 F  D REPCNT,PATCODE Q:$E(S)=""
"RTN","XINDX2",119,0)
 Q
"RTN","XINDX2",120,0)
 ;
"RTN","XINDX2",121,0)
REPCNT F I=1:1 Q:("0123456789."'[$E(S,I))!($E(S,I)="")
"RTN","XINDX2",122,0)
 S X=$E(S,1,I-1),S=$E(S,I,999) I ('$L(X))!($L(X,".")>2) S S="" D E^XINDX1(16)
"RTN","XINDX2",123,0)
 Q
"RTN","XINDX2",124,0)
 ;
"RTN","XINDX2",125,0)
PATCODE I $E(S)=Q S I=1 D PATQ S S=$E(S,I,999) S:$L(CH)&(",)"[CH) S=$E(S,2,999) Q
"RTN","XINDX2",126,0)
 F I=1:1 Q:("ACELNPUacelnpu()"'[$E(S,I))!($E(S,I)="")
"RTN","XINDX2",127,0)
 S X=$E(S,1,I-1),S=$E(S,I,999) I I=1 S S="" D E^XINDX1(16)
"RTN","XINDX2",128,0)
 I $E(S)="," S S=$E(S,2,999) ;Pull ',' out of alternation
"RTN","XINDX2",129,0)
 Q
"RTN","XINDX2",130,0)
 ;
"RTN","XINDX2",131,0)
PATQ F I=I+1:1 S CH=$E(S,I) Q:CH=""!(CH=Q)
"RTN","XINDX2",132,0)
 S I=I+1 D:CH="" E^XINDX1(6) S CH=$E(S,I) G:CH=Q PATQ
"RTN","XINDX2",133,0)
 Q
"RTN","XINDX2",134,0)
 ;
"RTN","XINDX2",135,0)
ST(LOC,S) S:'$D(V(LOC,S)) V(LOC,S)="" I $D(GK),GK]"",V(LOC,S)'[GK S V(LOC,S)=V(LOC,S)_GK
"RTN","XINDX2",136,0)
 S GK=""
"RTN","XINDX2",137,0)
 Q
"RTN","XINDX2",138,0)
 ;
"RTN","XINDX2",139,0)
VT(X) ;Check if a valid label
"RTN","XINDX2",140,0)
 Q (X?1A.31AN)!(X?1"%".31UN)!(X?1.31N)
"RTN","XINDX2",141,0)
 ;
"RTN","XINDX2",142,0)
VA(X) ;Check if VA Standard label ;P140
"RTN","XINDX2",143,0)
 Q (X?1U.15UN)!(X?1"%".15UN)!(X?1.16N)
"RTN","XINDX2",144,0)
 ;
"RTN","XINDX2",145,0)
FLUSH(L) ;Flush rest of list with this offset
"RTN","XINDX2",146,0)
 N I,CH S I=LI(L)+1 F I=I:1 S CH=$G(LV(L,I)) Q:$C(10)[CH  D:CH="(" FLUSH(L+1)
"RTN","XINDX2",147,0)
 S LI(L)=I Q
"RTN","XINDX2",148,0)
 ;
"RTN","XINDX2",149,0)
FNC(NEW) ;Sets or returns the current function
"RTN","XINDX2",150,0)
 I $D(NEW) S LV(LV+1,"FNC",LI)=NEW Q
"RTN","XINDX2",151,0)
 N W
"RTN","XINDX2",152,0)
 S W=+$S($D(LV(LV,"FNC",LI)):LI,$O(LV(LV,"FNC",LI),-1):$O(LV(LV,"FNC",LI),-1),1:$O(LV(LV,"FNC",LI))) ;patch 119,121
"RTN","XINDX2",153,0)
 Q $G(LV(LV,"FNC",W))
"RTN","XINDX2",154,0)
 ;
"RTN","XINDX2",155,0)
OP(NEW) ;Sets or returns the current operator
"RTN","XINDX2",156,0)
 I $D(NEW) S LV(LV,"OP",LI)=NEW Q
"RTN","XINDX2",157,0)
 N W S W=+$S($D(LV(LV,"OP",LI)):LI,1:$O(LV(LV,"OP",LI),-1))
"RTN","XINDX2",158,0)
 Q $G(LV(LV,"OP",W))
"RTN","XINDX2",159,0)
 ;
"RTN","XINDX2",160,0)
OBJTST(OBJ) ;test if OBJ exists, returns 1 if exists
"RTN","XINDX2",161,0)
 Q:^%ZOSF("OS")'["OpenM" 1
"RTN","XINDX2",162,0)
 Q:$G(OBJ)="" 0
"RTN","XINDX2",163,0)
 Q ##class(%Dictionary.ClassDefinition).%ExistsId(""_OBJ_"")
"RTN","XINDX2",164,0)
 ;
"RTN","XINDX3")
0^2^B15493765
"RTN","XINDX3",1,0)
XINDX3 ;ISC/REL,GRK,RWF - PROCESS MERGE/SET/READ/KILL/NEW/OPEN COMMANDS ;06/24/08  15:44
"RTN","XINDX3",2,0)
 ;;7.3;TOOLKIT;**20,27,61,68,110,121,128,132,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX3",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX3",4,0)
PEEK S Y=$G(LV(LV,LI+1)) Q
"RTN","XINDX3",5,0)
PEEK2 S Y=$G(LV(LV,LI+2)) Q
"RTN","XINDX3",6,0)
INC2 S LI=LI+1 ;Drop into INC
"RTN","XINDX3",7,0)
INC S LI=LI+1,S=$G(LV(LV,LI)),S1=$G(LV(LV,LI+1)),CH=$E(S)
"RTN","XINDX3",8,0)
 G ERR:$A(S)=10 Q
"RTN","XINDX3",9,0)
DN S LI(LV)=LI,LI(LV,1)=AC,LV=LV+1,LI=LI(LV),AC=NOA
"RTN","XINDX3",10,0)
 Q
"RTN","XINDX3",11,0)
UP ;Inc LI as we save to skip the $C(10).
"RTN","XINDX3",12,0)
 D PEEK S:$A(Y)=10 LI=LI+1 S LI(LV)=LI,LV=LV-1,LI=LI(LV),AC=LI(LV,1) Q
"RTN","XINDX3",13,0)
PEEKDN S Y=$G(LV(LV+1,LI(LV+1)+1)) Q
"RTN","XINDX3",14,0)
FIND F Y=LI:1:AC Q:L[$G(LV(LV,Y))
"RTN","XINDX3",15,0)
ERR D E^XINDX1(43) S (S,S1,CH)="" Q
"RTN","XINDX3",16,0)
 Q
"RTN","XINDX3",17,0)
 Q
"RTN","XINDX3",18,0)
S ;Set
"RTN","XINDX3",19,0)
 S STR=ARG,ARG="",RHS=0 D ^XINDX9
"RTN","XINDX3",20,0)
S2 S GK="" D INC I S="" D:'RHS E^XINDX1(10) Q
"RTN","XINDX3",21,0)
 I CH=",","!""#&)*+-,./:;<=?\]_~"[$E(S1),RHS=1 D E^XINDX1(10) G S2 ;patch 121
"RTN","XINDX3",22,0)
 I CH="," S RHS=0 G S2
"RTN","XINDX3",23,0)
 I CH="=" S RHS=1 I "!#&)*,/:;<=?\]_~"[$E(S1) D:$E(S1,1,2)'="##" E^XINDX1(10) G S2 ;patch 119
"RTN","XINDX3",24,0)
 I CH="$",'RHS D  D:% E^XINDX1(10) ;Can't be on left side of set.
"RTN","XINDX3",25,0)
 . S %=1
"RTN","XINDX3",26,0)
 . I "$E$P$X$Y"[$E(S,1,2) S %=0 Q
"RTN","XINDX3",27,0)
 . I "$EC$ET$QS"[$E(S,1,3) S %=0 Q
"RTN","XINDX3",28,0)
 . I "$ZE$ZT"[$E(S,1,3) S %=0 Q  ;Pickup in XINDX9
"RTN","XINDX3",29,0)
 . Q
"RTN","XINDX3",30,0)
 I CH="^" D FL G S2
"RTN","XINDX3",31,0)
 I CH="@" S Y=$$ASM(LV,LI,",") S:Y'["=" RHS=1 D INC,ARG^XINDX2 G S2
"RTN","XINDX3",32,0)
 I CH="(",$D(LV(LV,"OBJ",LI-1)) D ARG^XINDX2 G S2
"RTN","XINDX3",33,0)
 I CH="(" D MULT G S2
"RTN","XINDX3",34,0)
 I CH="#",$E(S,1,2)="##" D ARG^XINDX2 G S2 ;Cache Objects
"RTN","XINDX3",35,0)
 D FL G S2
"RTN","XINDX3",36,0)
 ;NOA=number of arguments
"RTN","XINDX3",37,0)
MULT D INC S NOA=S I S'>0 S ERR=5 G ^XINDX1
"RTN","XINDX3",38,0)
 D DN S AC=AC+LI F  Q:AC'>LI  S:'RHS GK="*" D INC,ARG^XINDX2
"RTN","XINDX3",39,0)
 D UP
"RTN","XINDX3",40,0)
 Q
"RTN","XINDX3",41,0)
FL ;
"RTN","XINDX3",42,0)
 S:'RHS GK="*" D ARG^XINDX2
"RTN","XINDX3",43,0)
 Q
"RTN","XINDX3",44,0)
VLNF(X) ;Drop into VLN
"RTN","XINDX3",45,0)
VLN ;Valid Local Name > Variable
"RTN","XINDX3",46,0)
 S ERR=0
"RTN","XINDX3",47,0)
 Q:X?1(1U,1"%").15UN
"RTN","XINDX3",48,0)
 ;lower/mixed case, can't be namespaced ;p140
"RTN","XINDX3",49,0)
 I X?1(1A,1"%").15AN D:$E(RTN,1,2)=$E(X,1,2) E^XINDX1(57) Q
"RTN","XINDX3",50,0)
 D E^XINDX1(11) ;Too long or other problem
"RTN","XINDX3",51,0)
 Q
"RTN","XINDX3",52,0)
VGN ;Valid Global Name
"RTN","XINDX3",53,0)
 S ERR=0 I X'?1(1U,1"%").7UN D E^XINDX1(12)
"RTN","XINDX3",54,0)
 Q
"RTN","XINDX3",55,0)
KL ;Process KILL
"RTN","XINDX3",56,0)
 S STR=ARG,ARG(1)=ARG,ARG="" D ^XINDX9
"RTN","XINDX3",57,0)
A D INC Q:S=""  G A:CH="," S LOC="L" D @$S(CH="@":"KL1",CH="^":"KL2",CH="(":"KL4",1:"KL3") G A
"RTN","XINDX3",58,0)
KL1 D INC,ARG^XINDX2 Q
"RTN","XINDX3",59,0)
KL2 S GK="!"
"RTN","XINDX3",60,0)
 I S1'="(" S ERR=24 D ^XINDX1
"RTN","XINDX3",61,0)
 G ARG^XINDX2
"RTN","XINDX3",62,0)
KL3 I "^DT^DTIME^DUZ^IOST^IOM^U^"[("^"_S_"^") S ERR=39,ERR(1)=S D ^XINDX1
"RTN","XINDX3",63,0)
 I "IO"=S D:S1="(" PEEKDN S ERR=39,ERR(1)=S_$S(S1["(":S1_Y_")",1:"") D:S1'="(" ^XINDX1 I S1="(",("QC"'[$E(Y,2)) D ^XINDX1
"RTN","XINDX3",64,0)
KL5 S GK="!" D ARG^XINDX2 Q  ;KILL SUBS
"RTN","XINDX3",65,0)
 Q
"RTN","XINDX3",66,0)
KL4 S NOA=S1 D DN,ARGS^XINDX2,UP,INC2 Q
"RTN","XINDX3",67,0)
NE ;NEW
"RTN","XINDX3",68,0)
 S ERR=$S("("[$E(ARG):26,1:0) I ERR G ^XINDX1 ;look for null or (
"RTN","XINDX3",69,0)
 S STR=ARG D ^XINDX9 K ERTX
"RTN","XINDX3",70,0)
N2 D INC Q:S=""  G N2:CH=","
"RTN","XINDX3",71,0)
 ;I CH?1P,("%@()"'[CH)&("$E"'[$E(S,1,2)) D E^XINDX1(11) G N2
"RTN","XINDX3",72,0)
 ;check for "@", functions, special variables, or %variables
"RTN","XINDX3",73,0)
 I CH?1P,(CH'=S) D  I $G(ERTX)]"" K ERTX G N2
"RTN","XINDX3",74,0)
 . Q:"@("[CH!(CH="%"&($E(S,2,8)?.1A.E))  ;check what's indirected on next pass or
"RTN","XINDX3",75,0)
 . ;if not $ET or $ES must use indirection 
"RTN","XINDX3",76,0)
 . I "$"[CH Q:$E(S,1,3)="$ET"!($E(S,1,3)="$ES")  I LI>1,(LV(LV,LI-1)="@") Q
"RTN","XINDX3",77,0)
 . D E^XINDX1(11)
"RTN","XINDX3",78,0)
 . Q
"RTN","XINDX3",79,0)
 S GK="~" D ARG^XINDX2
"RTN","XINDX3",80,0)
 G N2
"RTN","XINDX3",81,0)
 ;
"RTN","XINDX3",82,0)
RD S STR=ARG D ^XINDX9 S ARG=""
"RTN","XINDX3",83,0)
RD1 D INC Q:S=""
"RTN","XINDX3",84,0)
 ;I (CH="!")!(CH=",")!(CH=Q)!(CH="#") G RD1
"RTN","XINDX3",85,0)
 ;I CH="^" S ERR=11 D ^XINDX1
"RTN","XINDX3",86,0)
 I '((CH="%")!(CH?1A)!(CH="*")) D RD3 G RD1
"RTN","XINDX3",87,0)
 S Y=$$ASM(LV,LI,",") I Y'[":" S ERR=33,RDTIME=1 D ^XINDX1
"RTN","XINDX3",88,0)
 D RD2 G RD1
"RTN","XINDX3",89,0)
RD2 Q:","[CH
"RTN","XINDX3",90,0)
 I "*#"[CH D E^XINDX1(41)
"RTN","XINDX3",91,0)
 I "#:"[CH D INC,ARG^XINDX2,INC G RD2
"RTN","XINDX3",92,0)
 I (CH="%")!(CH?1A) S LOC="L",GK="*" D ARG^XINDX2,INC G RD2
"RTN","XINDX3",93,0)
 D INC G RD2
"RTN","XINDX3",94,0)
RD3 Q:","[CH  I "!#?"[CH D INC G RD3
"RTN","XINDX3",95,0)
 I (CH="%")!(CH?1A)!(CH="@") D ARG^XINDX2,INC G RD3
"RTN","XINDX3",96,0)
 I CH="$" S ERR=21,RDTIME=1 D ^XINDX1
"RTN","XINDX3",97,0)
 Q
"RTN","XINDX3",98,0)
O S STR=ARG,AC=99 D ^XINDX9,INC S ARG="" I S["@" D ARGS^XINDX2 Q
"RTN","XINDX3",99,0)
 D ARG^XINDX2,INC D  D INC,ARGS^XINDX2 Q
"RTN","XINDX3",100,0)
 . F  D INC Q:":"[S
"RTN","XINDX3",101,0)
 . Q
"RTN","XINDX3",102,0)
 Q
"RTN","XINDX3",103,0)
ERRCP S ERR=5 D ^XINDX1 Q
"RTN","XINDX3",104,0)
ST ;
"RTN","XINDX3",105,0)
 S:'$D(V(LOC,S)) V(LOC,S)="" S:V(LOC,S)'[GK V(LOC,S)=V(LOC,S)_GK,GK="" Q
"RTN","XINDX3",106,0)
 Q
"RTN","XINDX3",107,0)
ASM(WL,SI,L,SEP) ;assemble line Y from LV array
"RTN","XINDX3",108,0)
 N %,CH,Y S SEP=$G(SEP),Y="" F %=SI:1 S CH=$G(LV(WL,%)) Q:L[CH  S Y=Y_SEP_CH
"RTN","XINDX3",109,0)
 Q Y
"RTN","XINDX5")
0^3^B11300370
"RTN","XINDX5",1,0)
XINDX5 ;SF-ISC/RWF - CROSS REFERENCE ALL ROUTINES ;03/26/2002  09:57
"RTN","XINDX5",2,0)
 ;;7.3;TOOLKIT;**20,27,61,121,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX5",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX5",4,0)
 G END:$D(IND("QUIT")) I INP(8) W !,"Called Routines",! D ^XINDX52 ;Get called routines
"RTN","XINDX5",5,0)
 K ARG,CCN,CH,COM,ERR,GK,GRB,I,INDDA,INDDS,L,LAB,LAB0,LC,LIN,LOC,PC,PRV,R,RTN,S,STR,TXT,V,X,Y
"RTN","XINDX5",6,0)
 D ^XINDX53:INP(7) ;Load routine file
"RTN","XINDX5",7,0)
 ;Check called tags and routines
"RTN","XINDX5",8,0)
 S RN="$",TXT="" W !!,"--- CROSS REFERENCING ---",!
"RTN","XINDX5",9,0)
A S RN=$O(^UTILITY($J,RN)),L="",LABO=0 I RN="" G B
"RTN","XINDX5",10,0)
 F  S L=$O(^UTILITY($J,1,RN,"X",L)) Q:L=""  S XX2=^(L,0),XX1=$P(L," ",2),T=$P(XX1,"+",1),P=$P(L," ",1) D AA
"RTN","XINDX5",11,0)
 G A
"RTN","XINDX5",12,0)
AA Q:P=""  I '$D(^UTILITY($J,1,P)) D  Q  ;We can now check % routines
"RTN","XINDX5",13,0)
 . I (P["&")!(P["@") Q  ;External subroutine
"RTN","XINDX5",14,0)
 . S:T["$" T=$E(T,3,99) S:P["(" P=$P(P,"(")
"RTN","XINDX5",15,0)
 . I '$$VTAG(P) S ERR=52,ERR(1)=P D AAER(.ERR,RN,"",0) Q
"RTN","XINDX5",16,0)
 . S X=$T(^@P) I X="" S ERR=52,ERR(1)=P D AAER(.ERR,RN,$P(XX2,","),0) Q
"RTN","XINDX5",17,0)
 . Q:T=""
"RTN","XINDX5",18,0)
 . I '$$VTAG(T) D AAER(37,RN,$P(XX2,","),0) Q
"RTN","XINDX5",19,0)
 . I $$VTAG(T),$T(@T^@P)="" S E=38,E(1)="MISSING LABEL "_XX1_"^"_P D AAER(.E,RN,"",0)
"RTN","XINDX5",20,0)
 . Q
"RTN","XINDX5",21,0)
 I T]"",$D(^UTILITY($J,1,P)) D
"RTN","XINDX5",22,0)
 . S:T["$$" T=$E(T,3,99) S:T["@" T=""
"RTN","XINDX5",23,0)
 . I T]"",'$D(^UTILITY($J,1,P,"T",T)) S E=38,E(1)="MISSING LABEL (see INVOKED BY list)." D AAER(.E,P,XX1,0)
"RTN","XINDX5",24,0)
 Q
"RTN","XINDX5",25,0)
AAER(ERR,RTN,LAB,LABO) ;Report error. error code, routine, label, label offset
"RTN","XINDX5",26,0)
 D ^XINDX1
"RTN","XINDX5",27,0)
 Q
"RTN","XINDX5",28,0)
VTAG(K) ;Check for a valid tag. works for routine name.
"RTN","XINDX5",29,0)
 Q (K?1(1"%",1A).15NA)!(K?1.16N)
"RTN","XINDX5",30,0)
 ;
"RTN","XINDX5",31,0)
B D ^XINDX51
"RTN","XINDX5",32,0)
END W:$D(IND("QUIT")) !!,"--- ",$S($D(ZTSTOP):"TASK ",1:""),"STOPPED ---" W !!,"--- END ---"
"RTN","XINDX5",33,0)
 I IO'=IO(0) U IO(0) W !,"--- D O N E ---" U IO
"RTN","XINDX5",34,0)
 D ^%ZISC
"RTN","XINDX5",35,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XINDX5",36,0)
CLEAN ;Come here from XINDX6 if queued output.
"RTN","XINDX5",37,0)
 K %,%1,%2,%I1,%IN1,%UCN,A,ARG,C,C9,CCN,CH,COM,DA,DIC,DUOUT,ERR,ERTX,F,F1,G,GK,GRB,H,HED,HS
"RTN","XINDX5",38,0)
 K ^UTILITY($J),I,IND,INDB,INDC,INDDA,INDDS,INDF,INDFN,INDLC,INDPM,INDX,INDXDT,INDXJ,INP,IP,J,K,K1,K3,L,LAB,LABO,LBL,LC,LIN,LINE,LOC,NRO,OFF,P,PC,PGM,POP,POST,Q,R,RDTIME,RHS,ROU,RTN,S,S1,STR,SYM,TAB,TAG,TXT,TY,V,VZ,X,X1,X2,X3,Y
"RTN","XINDX5",39,0)
 Q
"RTN","XINDX5",40,0)
CRX S RTN="$" F I=0:0 S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  F LOC="L","G","O","MK","N","X" D CR0 ;patch 121
"RTN","XINDX5",41,0)
 K VZ Q
"RTN","XINDX5",42,0)
 ;
"RTN","XINDX5",43,0)
CR0 N VZ S S=-1 I LOC="X",'$D(^UTILITY($J,1,"***","X",RTN_" ")) S ^UTILITY($J,1,"***","X",RTN_" ")=""
"RTN","XINDX5",44,0)
CR1 S S=$O(^UTILITY($J,1,RTN,LOC,S)) Q:S=""  ;Loop
"RTN","XINDX5",45,0)
 S X=$G(^UTILITY($J,1,RTN,LOC,S))
"RTN","XINDX5",46,0)
 F J=1:1:$L(X) S:$G(^UTILITY($J,1,"***",LOC,S))'[$E(X,J) ^(S)=$G(^(S))_$E(X,J) ;Pass on flags
"RTN","XINDX5",47,0)
 F J=0:1 Q:'$D(^UTILITY($J,1,RTN,LOC,S,J))  D CR2
"RTN","XINDX5",48,0)
 G CR1
"RTN","XINDX5",49,0)
 ;
"RTN","XINDX5",50,0)
CR2 S PC="" I LOC'="X" S:^UTILITY($J,1,RTN,LOC,S,J)["*" PC=PC_"*" S:^(J)["!" PC=PC_"!" S:^(J)["~" PC=PC_"~" D CR3(RTN,S,LOC) Q
"RTN","XINDX5",51,0)
 Q:$D(VZ(S))  S S1=$S($P(S," ",2)]"":$P(S," ",2)_"^",1:"")_$P(S," ",1),VZ(S)=""
"RTN","XINDX5",52,0)
 ;S X1=LOC,X2=S,X3=RTN,LOC="Z",S=RTN,RTN=S1 D CR3 S LOC=X1,S=X2,RTN=X3 K X1,X2,X3
"RTN","XINDX5",53,0)
 D CR3(S1,RTN,"Z"),CR3(RTN,S,LOC)
"RTN","XINDX5",54,0)
 Q
"RTN","XINDX5",55,0)
CR3(X1,X2,X3) ;(RTN,REF,LOC)
"RTN","XINDX5",56,0)
 S K=0
"RTN","XINDX5",57,0)
CR4 S ARG="" I $D(^UTILITY($J,1,"***",X3,X2,K)) S ARG=^(K) I $L(ARG)>230 S K=K+1 G CR4
"RTN","XINDX5",58,0)
 S ^UTILITY($J,1,"***",X3,X2,K)=ARG_X1_PC_"," Q
"RTN","XINDX51")
0^9^B32298369
"RTN","XINDX51",1,0)
XINDX51 ;ISC/REL,GRK,RWF - PRINT ROUTINE ;06/24/08  16:06
"RTN","XINDX51",2,0)
 ;;7.3;TOOLKIT;**20,48,61,110,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX51",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX51",4,0)
 ;Setup Local IO paramiters
"RTN","XINDX51",5,0)
B S RTN="",INL(1)=IOM-2,INL(2)=IOSL-4,INL(3)=("C"=$E(IOST)),INL(4)=IOM-1,PG=0,INL(5)="Compiled list of Errors and Warnings "
"RTN","XINDX51",6,0)
 K ER,HED D HD1 ;Do header
"RTN","XINDX51",7,0)
 ;Show Errors
"RTN","XINDX51",8,0)
 F  S RTN=$O(^UTILITY($J,1,RTN)) Q:RTN=""!$D(IND("QUIT"))  S X=^(RTN,0) I $D(^UTILITY($J,1,RTN,"E"))>9 S HED=$$BHDR(RTN,X) D HD,WERR(1)
"RTN","XINDX51",9,0)
 W:'$D(ER) !,"No errors or warnings to report",!
"RTN","XINDX51",10,0)
 ;Did they want more?
"RTN","XINDX51",11,0)
 G END:'INP(1)!$D(IND("QUIT")),CR:INP(6)
"RTN","XINDX51",12,0)
 ;Show detail on each routine
"RTN","XINDX51",13,0)
 W !!,"--- Routine Detail"
"RTN","XINDX51",14,0)
 W:INP(5)?1A "   --- with "_$S(INP(5)["R":"REGULAR",INP(5)["S":"STRUCTURED",INP(5)["B":"R/S",1:"")_" ROUTINE LISTING" W " ---"
"RTN","XINDX51",15,0)
 S RTN="$",INDB="R" ;Report on each routine
"RTN","XINDX51",16,0)
BL F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""!('INP(4)&(RTN?1"|"1.4L.NP))!$D(IND("QUIT"))  D B1,CHK
"RTN","XINDX51",17,0)
 ;Exit or do Cross-Refference
"RTN","XINDX51",18,0)
 G END:NRO<2,END:$D(IND("QUIT")),CR
"RTN","XINDX51",19,0)
 ;
"RTN","XINDX51",20,0)
BHDR(R,X) ;Build hdr
"RTN","XINDX51",21,0)
 Q $E(R_"       ",1,15)_" * *  "_$P(X,"^",2)_" Lines,  "_(+X)_" Bytes, Checksum: "_$G(^UTILITY($J,1,R,"RSUM"))
"RTN","XINDX51",22,0)
 ;
"RTN","XINDX51",23,0)
WERR(FL) ;Write error messages
"RTN","XINDX51",24,0)
 N ER2
"RTN","XINDX51",25,0)
 F ER=1:1 Q:'$D(^UTILITY($J,1,RTN,"E",ER))!$D(IND("QUIT"))  S %=^(ER) D
"RTN","XINDX51",26,0)
 . I $Y'<INL(2) D HD K ER2
"RTN","XINDX51",27,0)
 . D:FL&(%>0)&($G(ER2)'=+%) WORL(^UTILITY($J,1,RTN,0,+%,0)) ;Write the routine line
"RTN","XINDX51",28,0)
 . W !?3,$P(%,$C(9),2) W:$X>16 ! W ?16,$P(%,$C(9),3) S ER2=+% ;Write the error p110
"RTN","XINDX51",29,0)
 . Q
"RTN","XINDX51",30,0)
 Q
"RTN","XINDX51",31,0)
 ;
"RTN","XINDX51",32,0)
WR ;Write one routine
"RTN","XINDX51",33,0)
 S X=^UTILITY($J,1,RTN,0),INL(5)=$$BHDR(RTN,X)
"RTN","XINDX51",34,0)
 D HD1 W !,?14,$P(X,"^",3)_" bytes in comments" G:'INP(2) B2
"RTN","XINDX51",35,0)
 I $G(ROU),'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,1)),12,IOM) S IND("QUIT")=1 ; GFT: Print Tammy's Documentation File
"RTN","XINDX51",36,0)
 F I=1:1 Q:'$D(^UTILITY($J,1,RTN,0,I))  S X=^(I,0) D
"RTN","XINDX51",37,0)
 . D:$Y'<INL(2) HD1 I $D(IND("QUIT")) S I=99999 Q
"RTN","XINDX51",38,0)
 . D WORL(X) ;Write routine line
"RTN","XINDX51",39,0)
 . Q
"RTN","XINDX51",40,0)
 Q
"RTN","XINDX51",41,0)
 ;
"RTN","XINDX51",42,0)
WORL(D) ;Write one routine line
"RTN","XINDX51",43,0)
 N J,L
"RTN","XINDX51",44,0)
 I $G(ROU) S J=$P($P(D," "),"(") S:J]"" TAG=J S:J="" TAG=$P(TAG,"+")_"+"_($P(TAG,"+",2)+1) ; GFT: Print Tammy's Documentation File
"RTN","XINDX51",45,0)
 S L=$P(D," ",1),D=$P(D," ",2,999)
"RTN","XINDX51",46,0)
 F J=8,9:0 W !,L,?J," " W:$X>10 "--",!,?10 W $E(D,1,INL(4)-J) S D=$E(D,INL(4)-J+1,999),L="" Q:D=""
"RTN","XINDX51",47,0)
 I $G(ROU),TAG]"" S L=$O(^DIZ(1009.1,ROU,2,"B",TAG,0)) I L,'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,2,L,1)),12,IOM) S IND("QUIT")=1 ; GFT ditto
"RTN","XINDX51",48,0)
 Q
"RTN","XINDX51",49,0)
 ;
"RTN","XINDX51",50,0)
CHK I $D(ZTQUEUED),$$S^%ZTLOAD S IND("QUIT")=1,ZTSTOP=1
"RTN","XINDX51",51,0)
 S:$D(IND("QUIT")) RTN="~"
"RTN","XINDX51",52,0)
 Q
"RTN","XINDX51",53,0)
 ;
"RTN","XINDX51",54,0)
B1 I '$D(^UTILITY($J,1,RTN,0)) Q  ;No data to show
"RTN","XINDX51",55,0)
 N ROU,TAG S ROU=$O(^DIZ(1009.1,"B",RTN,0)),TAG=RTN ; GFT Tammy Docs
"RTN","XINDX51",56,0)
 S:INP(5)["N" OPT("NUM")=1
"RTN","XINDX51",57,0)
 D:INP(5)["S"!(INP(5)["B") ^XINDX8 ;Show structured listing
"RTN","XINDX51",58,0)
 D:INP(5)["F" SC
"RTN","XINDX51",59,0)
 D:INP(5)["R"!(INP(5)["B") WR ;Show normal listing
"RTN","XINDX51",60,0)
B2 ;
"RTN","XINDX51",61,0)
 G:'INP(3)!('$D(^UTILITY($J,1,RTN,"E",0))) B3
"RTN","XINDX51",62,0)
 S HED="*****   ERRORS & WARNINGS IN "_RTN_"   *****" W !,HED
"RTN","XINDX51",63,0)
 D WERR(0) ;Show errors
"RTN","XINDX51",64,0)
B3 ;
"RTN","XINDX51",65,0)
 S INL(5)="*****   INDEX OF "_RTN_"   *****" W !!,INL(5),!
"RTN","XINDX51",66,0)
 S HED="Local Variables      Line Occurrences   ( >> not killed explicitly)",HED(1)=$J("",40)_"( * Changed  ! Killed  ~ Newed)" D P("L","") Q:$D(IND("QUIT"))
"RTN","XINDX51",67,0)
 S HED="Global Variables  ( * Changed  ! Killed)" D P("G","") Q:$D(IND("QUIT"))
"RTN","XINDX51",68,0)
 S HED="Naked Globals" D P("N","") Q:$D(IND("QUIT"))
"RTN","XINDX51",69,0)
 S HED="Cache Objects" D P("O","") Q:$D(IND("QUIT"))
"RTN","XINDX51",70,0)
 S HED="Marked Items" D P("MK","") Q:$D(IND("QUIT"))
"RTN","XINDX51",71,0)
 S HED="Label References" D P("I","") Q:$D(IND("QUIT"))
"RTN","XINDX51",72,0)
 S HED="External References" D P("X","^") Q:$D(IND("QUIT"))
"RTN","XINDX51",73,0)
 W !!,"*****   END   *****",!
"RTN","XINDX51",74,0)
 Q
"RTN","XINDX51",75,0)
 ;
"RTN","XINDX51",76,0)
P(LOC,SYM) ;
"RTN","XINDX51",77,0)
 S L="",PC="",TAB=$S("XG"[LOC:23,"O"[LOC:35,1:16) D HD Q:$D(IND("QUIT"))
"RTN","XINDX51",78,0)
P1 S L=$O(^UTILITY($J,1,RTN,LOC,L)) G:L="" PX
"RTN","XINDX51",79,0)
 I LOC="X",L?1L.LNP Q
"RTN","XINDX51",80,0)
 S PC(1)=$G(^UTILITY($J,1,RTN,LOC,$P(L,"(")))_$S("^DT^DUZ^DTIME^IO^IOF^ION^IOM^IOSL^IOST^U^"[("^"_$P(L,"(")_"^"):"!",1:" ")
"RTN","XINDX51",81,0)
 S PC(1)=(PC(1)["!")!(PC(1)["~"),PC="*"
"RTN","XINDX51",82,0)
 F J=0:1 S X=$S($D(^UTILITY($J,1,RTN,LOC,L,J)):^(J),1:"") Q:X=""!$D(IND("QUIT"))  D P2,P3
"RTN","XINDX51",83,0)
 G P1
"RTN","XINDX51",84,0)
PX W:PC="" !?3,"NONE" K HED
"RTN","XINDX51",85,0)
 Q
"RTN","XINDX51",86,0)
P2 I $Y'<INL(2) D HD S PC="*"
"RTN","XINDX51",87,0)
 Q:PC=L
"RTN","XINDX51",88,0)
 I LOC="L" W !,$S(('PC(1)):">> ",1:"   "),SYM,L," ",?TAB Q
"RTN","XINDX51",89,0)
 I LOC'="X" W !,"   ",SYM,L,?TAB Q
"RTN","XINDX51",90,0)
 W !?3,$P(L," ",2),SYM,$P(L," ",1)," ",?TAB
"RTN","XINDX51",91,0)
 Q
"RTN","XINDX51",92,0)
P3 W:$X>TAB !,?TAB
"RTN","XINDX51",93,0)
 S PC=L F I=1:1 S ARG=$P(X,",",I) Q:ARG=""  W:$X+$L(ARG)>INL(1) !?TAB W:$X'=TAB "," W ARG
"RTN","XINDX51",94,0)
 I $G(ROU),LOC="L" S I=$O(^DIZ(1009.1,ROU,3,"B",L,0)) I I,'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,3,I,1)),14,IOM) S IND("QUIT")=1 ; GFT Tammy Docs
"RTN","XINDX51",95,0)
 Q
"RTN","XINDX51",96,0)
HD D:$Y'<INL(2) HD1 D HD2
"RTN","XINDX51",97,0)
 Q
"RTN","XINDX51",98,0)
HD1 D WAIT:INL(3) S PG=PG+1 W @IOF,!,INL(5) W:(IOM-30)<$X ! W ?(IOM-30),INDXDT," page ",PG
"RTN","XINDX51",99,0)
 Q
"RTN","XINDX51",100,0)
HD2 W !!,HED W:$D(HED(1)) !,HED(1)
"RTN","XINDX51",101,0)
 Q
"RTN","XINDX51",102,0)
CR S INDB="C" U IO(0) W !!,"--- CROSS-REFERENCING ALL ROUTINES ---" U IO
"RTN","XINDX51",103,0)
 S RTN="$" D CRX^XINDX5
"RTN","XINDX51",104,0)
 S INL(5)="*****   Cross Reference of all Routines   *****",RTN="***" D HD1
"RTN","XINDX51",105,0)
 S HED="Local Variables    Routines   ( >> not killed explicitly)",HED(1)=$J("",30)_"( * Changed  ! Killed  ~ Newed)" D P("L","") G:$D(IND("QUIT")) END
"RTN","XINDX51",106,0)
 S HED="Global Variables" D P("G","") G:$D(IND("QUIT")) END
"RTN","XINDX51",107,0)
 S HED="Naked Globals" D P("N","") Q:$D(IND("QUIT"))
"RTN","XINDX51",108,0)
 S HED="Cache Objects" D P("O","") Q:$D(IND("QUIT"))
"RTN","XINDX51",109,0)
 S HED="Marked Items" D P("MK","") G:$D(IND("QUIT")) END
"RTN","XINDX51",110,0)
 S HED="Routine             Invokes:" D P("Z","") G:$D(IND("QUIT")) END
"RTN","XINDX51",111,0)
 S HED="Routine             is Invoked by:" D P("X","^")
"RTN","XINDX51",112,0)
 W !!,"*****   END   *****",!
"RTN","XINDX51",113,0)
END K INL,HED Q
"RTN","XINDX51",114,0)
SC ;Print a command chart
"RTN","XINDX51",115,0)
 S INL(5)=RTN_"   Command chart" D HD1
"RTN","XINDX51",116,0)
 F I=0:0 S I=$O(^UTILITY($J,1,RTN,"COM",I)) Q:I'>0  W !,^(I)
"RTN","XINDX51",117,0)
 Q
"RTN","XINDX51",118,0)
WAIT N % W !,"   Press return to continue:" R %:300 S:'$T %="^"
"RTN","XINDX51",119,0)
 I %["?" W !,"Press return to continue the report, ^ to exit the report" G WAIT
"RTN","XINDX51",120,0)
 S:%="^" IND("QUIT")=1 Q
"RTN","XINDX52")
0^13^B2792889
"RTN","XINDX52",1,0)
XINDX52 ;SF-ISC/RWF - Add to list other routines called ;3/26/98  08:43
"RTN","XINDX52",2,0)
 ;;7.3;TOOLKIT;**20,140**;Apr 25, 1995;Build 40
"RTN","XINDX52",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX52",4,0)
L1 S RTN="$",INDLC=0
"RTN","XINDX52",5,0)
 ;Loop thru routines and see what is called
"RTN","XINDX52",6,0)
 F I=0:0 S RTN=$O(^UTILITY($J,1,RTN)) Q:RTN=""  I '$D(^(RTN,52)) S ^(52)=1,S="$" F J=0:0 S S=$O(^UTILITY($J,1,RTN,"X",S)) Q:S=""  D L21
"RTN","XINDX52",7,0)
 S RTN="$",F52=0
"RTN","XINDX52",8,0)
 ;Look for routines that haven't been INDEXed
"RTN","XINDX52",9,0)
 F I52=0:0 S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  I RTN'=1,'$D(^UTILITY($J,1,RTN)) D LOAD^XINDEX,BEG^XINDEX S F52=1
"RTN","XINDX52",10,0)
 G L1:F52
"RTN","XINDX52",11,0)
 K I52,F52 Q
"RTN","XINDX52",12,0)
L21 ;Check that should add to list
"RTN","XINDX52",13,0)
 S X=$P(S," ") Q:$E(X)="%"  Q:$D(^UTILITY($J,1,X))  Q:"DD^DI^XM"[$E(X,1,2)  Q:"XQ^XQ1^XUS^"[$E(X,1,8)
"RTN","XINDX52",14,0)
 X ^%ZOSF("TEST") Q:'$T  ;I '$T S LAB=$P(^UTILITY($J,1,RTN,"X",S,0),",",1),LABO=0,ERR="W - Routine "_X_" is not in the current Account." G ^XINDX1
"RTN","XINDX52",15,0)
 I X'["&",X'["@" S ^UTILITY($J,X)="" Q
"RTN","XINDX52",16,0)
CASE(%) ;Convert LC to UC.
"RTN","XINDX52",17,0)
 Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX53")
0^14^B6801223
"RTN","XINDX53",1,0)
XINDX53 ;SF-ISC/RWF - LOAD ROUTINE FILE ;03/17/98  14:33
"RTN","XINDX53",2,0)
 ;;7.3;TOOLKIT;**20,140**;Apr 25, 1995;Build 40
"RTN","XINDX53",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX53",4,0)
A S RTN="$",DLAYGO=9.8 W !!," Loading the ROUTINE file now.",!
"RTN","XINDX53",5,0)
B S RTN=$O(^UTILITY($J,1,RTN)) I RTN'?1U.UN&(RTN'?1"%".UN) G C
"RTN","XINDX53",6,0)
 D GETDA G B:DA'>0 W:$X>70 ! W $J(RTN,10)
"RTN","XINDX53",7,0)
 F %IN1=19,20,21,"T" F J=0:0 S J=$O(^DIC(9.8,DA,%IN1,J)) Q:J'>0  S $P(^DIC(9.8,DA,%IN1,J,0),U,3)="n"
"RTN","XINDX53",8,0)
 S DIE=DIC,DR="1.2///"_(+^UTILITY($J,1,RTN,0))_";1.4////"_DT D ^DIE
"RTN","XINDX53",9,0)
 ;E errors and warnings.
"RTN","XINDX53",10,0)
 S LOC="L",IND=21 D P ;LOCAL VARIABLES
"RTN","XINDX53",11,0)
 S LOC="G",IND=22 D P ;GLOBAL VARIABLES
"RTN","XINDX53",12,0)
 ;"NAKED GLOBALS",! S LOC="N",SYM="^(" D P
"RTN","XINDX53",13,0)
 S LOC="T",IND="T" D P ;LINE TAGS
"RTN","XINDX53",14,0)
 S LOC="X",IND=19 D P ;EXTERNAL REFERENCES
"RTN","XINDX53",15,0)
 ;SAVE COMMAND LIST FOR LATER WORK
"RTN","XINDX53",16,0)
 K ^DIC(9.8,DA,"CMD") F %IN1=1:1 Q:'$D(^UTILITY($J,1,RTN,"COM",%IN1))  S ^DIC(9.8,DA,"CMD",%IN1,0)=^UTILITY($J,1,RTN,"COM",%IN1)
"RTN","XINDX53",17,0)
 G B
"RTN","XINDX53",18,0)
P S %IN2=-1,PC=0
"RTN","XINDX53",19,0)
 F %IN1=0:0 S %IN2=$O(^UTILITY($J,1,RTN,LOC,%IN2)) Q:%IN2=""  D S
"RTN","XINDX53",20,0)
 K DR,DIE Q
"RTN","XINDX53",21,0)
S S %IN3=$S("G"[LOC:$E(%IN2,2,99),1:%IN2),%IN3=$TR(%IN3,$C(34),$C(39)),Y=$O(^DIC(9.8,DA,IND,"B",%IN3,0)) G S2:Y>0 ;Translate " to '
"RTN","XINDX53",22,0)
 S DIC="^DIC(9.8,DA(1),"_$C(34)_IND_$C(34)_",",DA(1)=DA,X=%IN3,DIC("P")=+$P(^DD(9.8,$S(LOC="L":21,LOC="G":22,LOC="T":5,LOC="X":19),0),U,2) D FILE^DICN
"RTN","XINDX53",23,0)
S2 S $P(^DIC(9.8,DA,IND,+Y,0),U,3)="y"
"RTN","XINDX53",24,0)
 Q
"RTN","XINDX53",25,0)
C S ROU="$" K DLAYGO,DR,DIC,DIE
"RTN","XINDX53",26,0)
C1 S ROU=$O(^UTILITY($J,1,ROU)) I ROU'?1U.UN&(ROU'?1"%".UN) G END
"RTN","XINDX53",27,0)
 S RTN=ROU D GETDA G C1:DA'>0 S %IN1=DA F %I1=0:0 S %I1=$O(^DIC(9.8,%IN1,19,%I1)) Q:%I1'>0  S %IN2=^(%I1,0),TAG=$P(%IN2," ",2),RTN=$P(%IN2," ",1) D ETAG
"RTN","XINDX53",28,0)
 G C1
"RTN","XINDX53",29,0)
GETDA S Y=0,DIC="^DIC(9.8,",DIC(0)="MXZL"
"RTN","XINDX53",30,0)
GET1 S Y=$O(^DIC(9.8,"B",RTN,Y)) I Y>0 G GOT:"R"[$P(^DIC(9.8,Y,0),U,2),GET1
"RTN","XINDX53",31,0)
GET2 S X=""""_RTN_"""",DIC("DR")="1///R" D ^DIC K DIC("DR")
"RTN","XINDX53",32,0)
GOT S DA=+Y I $P(^DIC(9.8,DA,0),U,2)="" S $P(^(0),U,2)="R"
"RTN","XINDX53",33,0)
 Q
"RTN","XINDX53",34,0)
ETAG S DA=0 Q:'$D(^UTILITY($J,1,RTN))
"RTN","XINDX53",35,0)
E2 S DA=$O(^DIC(9.8,"B",RTN,DA)) I DA>0,$P(^DIC(9.8,DA,0),U,2)'="R" G E2
"RTN","XINDX53",36,0)
 Q:DA'>0  S Y=$O(^DIC(9.8,DA,20,"B",ROU,0)) I Y>0 S $P(^DIC(9.8,DA,20,Y,0),"^",3)="y" Q
"RTN","XINDX53",37,0)
 S DIE="^DIC(9.8,",DR="20///"_ROU,DR(2,9.804)="3///y" D ^DIE
"RTN","XINDX53",38,0)
 Q
"RTN","XINDX53",39,0)
END K DIC,DIE,DIR,DR,ROU,%IN1,LOC,TAG
"RTN","XINDX53",40,0)
 Q
"RTN","XINDX6")
0^4^B20500720
"RTN","XINDX6",1,0)
XINDX6 ;ISC/REL,GRK - GET SET OF ROUTINES TO INDEX ;07/22/08  13:54
"RTN","XINDX6",2,0)
 ;;7.3;TOOLKIT;**20,27,66,110,132,140**;Apr 25, 1995;Build 40
"RTN","XINDX6",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX6",4,0)
 ;INP(1=Print more than warnings, 2= Print routines, 3= Print warnings, 4= Print DDs & Functions & Options, 5= Type of List, 6= Summary only, 7= Save Parameters
"RTN","XINDX6",5,0)
 ;INP(8= Index called routines, 9= Include the Compiled template routines, 10 = Build or Package file DA
"RTN","XINDX6",6,0)
 ;INP(11= execute to check for version number on second line, 12= Patch number check.
"RTN","XINDX6",7,0)
 N %A2,%I,%IN2,%IN3,%N,%QMK,%YN,AC,ANS,C8,CM,CX,DEF,DDOT,DIF,E,EC,ER
"RTN","XINDX6",8,0)
 N INDHDR,INP,LI,LL,LN,LV,N,NOA,OP,PG,QUES,RN,T,XCNP,XX1,XX2,Z,Z1,INDXDT
"RTN","XINDX6",9,0)
 K ^UTILITY($J),ZTSK,ZTDTH,ZTIO
"RTN","XINDX6",10,0)
 S:'$D(DTIME)#2 DTIME=360
"RTN","XINDX6",11,0)
 D HOME^%ZIS,HDR^XINDX7
"RTN","XINDX6",12,0)
 D ASKRTN,PARAM
"RTN","XINDX6",13,0)
 I $D(^DIC(9.4))!$D(^DIC(9.6)) D ^XINDX10 G END:$D(DUOUT) S INDDA=DA I DA>0,INP(10)'=9.7 D ANS("Include the compiled template routines: N//","NY") G:X="^" END S:"Nn"'[X INP(9)=1
"RTN","XINDX6",14,0)
 G END:(NRO'>0)&(INDDA'>0)
"RTN","XINDX6",15,0)
 D ANS("Print more than compiled errors and warnings? YES//","YN","Print detailed info") G:X="^" END S INP(1)="Yy"[X G:'INP(1) L7
"RTN","XINDX6",16,0)
 D ANS("Print summary only? NO//","NY","Skip detail on each routine") G:X="^" END S INP(6)="Yy"[X G L7:INP(6)
"RTN","XINDX6",17,0)
 D ANS("Print routines? YES//","YN","Print routines code also") G:X="^" END S INP(2)="Yy"[X
"RTN","XINDX6",18,0)
 I INP(2) D ANS("Print (R)egular,(S)tructured or (B)oth or Control (F)low ?  R//","RLIST") G:X="^" END S INP(5)=X
"RTN","XINDX6",19,0)
 I INDDA>0,INP(10)'=9.7 D ANS("Print the DDs, Functions, Options, and other package code? YES//","YN","Gather other package code.") G:X="^" END S INP(4)="Yy"[X
"RTN","XINDX6",20,0)
 D ANS("Print errors and warnings with each routine? YES//","YN") G:X="^" END S INP(3)="Yy"[X
"RTN","XINDX6",21,0)
L7 I $D(^DIC(9.8,0)),$D(DUZ) D ANS("Save parameters in ROUTINE file? NO//","NY","Update the ROUTINE file with details") G:X="^" END S INP(7)="Yy"[X
"RTN","XINDX6",22,0)
 D ANS("Index all called routines? NO//","NY","Add called routines") G:X="^" END S INP(8)="Yy"[X
"RTN","XINDX6",23,0)
DEVICE W:NRO>2 !!,$C(7),"This report could take some time, Remember to QUEUE the report.",! K IOP,%ZIS S %ZIS="QM",%ZIS("B")="" D ^%ZIS K %ZIS I POP W !,$C(7),"XINDEX terminated.  No device specified." G END
"RTN","XINDX6",24,0)
 ;S IOP=ION_";"_IOST_$S($D(IO("DOC")):";"_IO("DOC"),1:";"_IOM_";"_IOSL)
"RTN","XINDX6",25,0)
 I IO=IO(0),"C"[$E(IOST),$D(IO("Q"))#2 W !,"Do you really mean queue to this device? NO//" D NY I "Nn"[X W !!,"Ok, tell me again ..." K IO("Q") D ^%ZISC G DEVICE
"RTN","XINDX6",26,0)
 I '$D(IO("Q")) G ALIVE^XINDEX ;Do it now
"RTN","XINDX6",27,0)
 ;Queue Report
"RTN","XINDX6",28,0)
 S ZTRTN="ALIVE^XINDEX",ZTDESC="XINDEX of "_NRO_" routine"_$S(NRO>1:"s.",1:".") F G="INP(","INDDA","^UTILITY($J,","NRO","INDPM" S ZTSAVE(G)=""
"RTN","XINDX6",29,0)
 K IO("Q") D ^%ZTLOAD,HOME^%ZIS
"RTN","XINDX6",30,0)
 ;
"RTN","XINDX6",31,0)
END K ZTSK,%ZIS G CLEAN^XINDX5
"RTN","XINDX6",32,0)
 ;
"RTN","XINDX6",33,0)
PARAM ;Setup Parameters
"RTN","XINDX6",34,0)
 S Q="""",RTN=0
"RTN","XINDX6",35,0)
 F I=1:1:10 S INP(I)=0
"RTN","XINDX6",36,0)
 S (INP(11),INP(12))=""
"RTN","XINDX6",37,0)
 S INP("MAX")=20000 ;Max routine size
"RTN","XINDX6",38,0)
 S INP("CMAX")=15000 ;Max Code in routine
"RTN","XINDX6",39,0)
 S INDDA=0
"RTN","XINDX6",40,0)
 Q
"RTN","XINDX6",41,0)
 ;
"RTN","XINDX6",42,0)
QUICK(RL) ;Quick Report, Just errors on some routines.
"RTN","XINDX6",43,0)
 N %A2,%I,%IN2,%IN3,%N,%QMK,%YN,AC,ANS,C8,CM,CX,DEF,DDOT,DIF,E,EC,ER
"RTN","XINDX6",44,0)
 N INDHDR,INDXDT,INP,LI,LL,LN,LV,N,NOA,OP,PG,QUES,RN,T,XCNP,XX1,XX2,Z,Z1
"RTN","XINDX6",45,0)
 K ^UTILITY($J),ZTSK,ZTDTH,ZTIO
"RTN","XINDX6",46,0)
 D HOME^%ZIS I '$D(IOP) D HDR^XINDX7
"RTN","XINDX6",47,0)
 I $D(IOP) S %ZIS="" D ^%ZIS ;Caller can set IOP to send output someplace else
"RTN","XINDX6",48,0)
 U IO
"RTN","XINDX6",49,0)
 I $D(RL) F %I=1:1 S Z=$P(RL,",",%I) Q:Z=""  S ^UTILITY($J,Z)=""
"RTN","XINDX6",50,0)
 D ASKRTN,PARAM
"RTN","XINDX6",51,0)
 I $O(^UTILITY($J,"@"))="" W !,"No Routines to process.",! D ^%ZISC Q
"RTN","XINDX6",52,0)
 S INP(1)=0,INP(6)=1 ;More then errors,Summary Only
"RTN","XINDX6",53,0)
 G ALIVE^XINDEX
"RTN","XINDX6",54,0)
 ;
"RTN","XINDX6",55,0)
ANS(PR,DEF,HELP) ;Ask question get answer
"RTN","XINDX6",56,0)
 N % F  S Y=1 W !!,PR D @DEF Q:Y
"RTN","XINDX6",57,0)
 Q
"RTN","XINDX6",58,0)
YN S %="Y" D RD Q:"^YyNn"[X  W:$D(HELP) !,HELP W !,"Please enter 'Y' or return for YES, 'N' for NO" S Y=0 Q
"RTN","XINDX6",59,0)
 ;
"RTN","XINDX6",60,0)
NY S %="N" D RD Q:"^YyNn"[X  W:$D(HELP) !,HELP W !,"Please enter 'N' or return for NO, 'Y' for YES" S Y=0 Q
"RTN","XINDX6",61,0)
 ;
"RTN","XINDX6",62,0)
RD R X:DTIME S:X["^" X="^" S X=$E($$CASE^XINDX52(X)_%) Q
"RTN","XINDX6",63,0)
 ;
"RTN","XINDX6",64,0)
RLIST S %="R" D RD Q:"^RSBF"[X  W !,"Please select one of the choices." S Y=0 Q
"RTN","XINDX6",65,0)
 Q
"RTN","XINDX6",66,0)
ASKRTN ;Collect a list of routines to index.
"RTN","XINDX6",67,0)
 I '$D(^UTILITY($J)),$D(^%ZOSF("RSEL")) X ^("RSEL")
"RTN","XINDX6",68,0)
 S NRO=0,X=0 F I=0:0 S X=$O(^UTILITY($J,X)) Q:X=""  S NRO=NRO+1
"RTN","XINDX6",69,0)
 Q
"RTN","XINDX6",70,0)
 W !!,"LIST OF ROUTINES TO BE INDEXED; PRESS RETURN TO TERMINATE LIST",! S NRO=0
"RTN","XINDX6",71,0)
R1 R !,"ROUTINE NAME: ",ROU:$S($G(DTIME):DTIME,1:360) Q:ROU=""
"RTN","XINDX6",72,0)
 I ROU'?1"%".UN&(ROU'?1U.UN) W "  INVALID ROUTINE NAME" G R1
"RTN","XINDX6",73,0)
 I $D(^%ZOSF("TEST")) S X=ROU X ^("TEST") E  W "  INVALID ROUTINE NAME" G R1
"RTN","XINDX6",74,0)
 S NRO=NRO+1,^UTILITY($J,ROU)=""
"RTN","XINDX6",75,0)
 G R1
"RTN","XINDX7")
0^5^B11070196
"RTN","XINDX7",1,0)
XINDX7 ;ISC/RWF - SETUP ENVITOMENT ;04/22/08  15:12
"RTN","XINDX7",2,0)
 ;;7.3;TOOLKIT;**20,27,48,68,110,140**;Apr 25, 1995;Build 40
"RTN","XINDX7",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX7",4,0)
 ;To call XINDEX from elsewere.
"RTN","XINDX7",5,0)
 ;D SETUP^XINDX7 then load routines into ^UTILITY($J,1,<rtn name>,0,n,0)
"RTN","XINDX7",6,0)
 ;with @root@(0)='line count' and @root@(n,0)=a routine line
"RTN","XINDX7",7,0)
 ;Then for each routine S RTN="rtn name",INDLC=0 D BEG^XINDEX
"RTN","XINDX7",8,0)
 ;
"RTN","XINDX7",9,0)
 Q
"RTN","XINDX7",10,0)
SETUP ;Write startup header stuff.
"RTN","XINDX7",11,0)
 D BUILD
"RTN","XINDX7",12,0)
 U IO D HDR
"RTN","XINDX7",13,0)
 S Q="""",U="^",INDDS=0,RTN="$",DA=INDDA,IND("TM")=$H
"RTN","XINDX7",14,0)
 I INDDA>0 D START^XINDX10 D:IOSL\2<$Y HDR W !!,"Routines are being processed.",!
"RTN","XINDX7",15,0)
 ;Build count of routines.
"RTN","XINDX7",16,0)
 S NRO=0,NRO(1)=0,RTN="$"
"RTN","XINDX7",17,0)
 F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  S NRO=NRO+1 S:RTN["|" NRO(1)=NRO(1)+1
"RTN","XINDX7",18,0)
 S RTN="$"
"RTN","XINDX7",19,0)
 W "Routines: ",NRO-NRO(1),"  Faux Routines: ",NRO(1),!!
"RTN","XINDX7",20,0)
 Q
"RTN","XINDX7",21,0)
HDR S:'$D(INDXDT) DT=$$DT^XLFDT(),INDXDT=$$HTE^XLFDT($H)
"RTN","XINDX7",22,0)
 I '$D(INDHDR)  D
"RTN","XINDX7",23,0)
 . X ^%ZOSF("UCI") S INDHDR(1)="UCI: "_$P(Y,",")_" CPU: "_^%ZOSF("VOL")_"    "_INDXDT
"RTN","XINDX7",24,0)
 . S INDHDR="V. A.  C R O S S  R E F E R E N C E R  "_$P($T(+2),";",3)
"RTN","XINDX7",25,0)
 . S INDHDR(2)="[5/5/2016 VA Standards & Conventions]"
"RTN","XINDX7",26,0)
 . Q
"RTN","XINDX7",27,0)
 W:$Y>3 @IOF W !!,?IOM-$L(INDHDR)\2,INDHDR,!,?IOM-$L(INDHDR(2))\2,INDHDR(2),!,?IOM-$L(INDHDR(1))\2,INDHDR(1),!
"RTN","XINDX7",28,0)
 Q
"RTN","XINDX7",29,0)
BUILD N IX,X,TAG,TG,TX,S,L,V K IND
"RTN","XINDX7",30,0)
 F TAG=1:1 S X=$T(TABLE+TAG) Q:X=""  D
"RTN","XINDX7",31,0)
 . S TG=$P(X,";;",2),TX=$P(X,";;",3) Q:TG=""
"RTN","XINDX7",32,0)
 . F IX=1:1 S X=$P(TX,":",IX) Q:X=""  D
"RTN","XINDX7",33,0)
 . . S S=$P(X,","),L=$P(X,",",2),V=$P(X,",",3)
"RTN","XINDX7",34,0)
 . . S IND(TG,S)=L_"^"_V,IND(TG,L)=L_"^"_V
"RTN","XINDX7",35,0)
 . Q
"RTN","XINDX7",36,0)
 Q
"RTN","XINDX7",37,0)
TABLE ;;Short name, Full name, parameters (CMD default - add to GRB)
"RTN","XINDX7",38,0)
CMD ;;CMD;;B,BREAK,B:C,CLOSE,C:D,DO,DG1^XINDX4:E,ELSE,:F,FOR,F:G,GOTO,G:H,HALT,H:H,HANG,H:I,IF,:J,JOB,J:K,KILL,K:L,LOCK,L
"RTN","XINDX7",39,0)
 ;;CMD;;M,MERGE,M:N,NEW,N:O,OPEN,O:Q,QUIT,Q:R,READ,R:S,SET,S:TC,TCOMMIT,TR:TRE,TRESTART,TR:TRO,TROLLBACK,TR:TS,TSTART,TR:U,USE,U:V,VIEW,V:W,WRITE,W:X,XECUTE,X:
"RTN","XINDX7",40,0)
 ;;
"RTN","XINDX7",41,0)
FNC ;;FNC;;A,ASCII,1;2:C,CHAR,1;999:D,DATA,1;1:E,EXTRACT,1;3:F,FIND,2;3:G,GET,1;2:I,INCREMENT,1;2:J,JUSTIFY,2;3:L,LENGTH,1;2:O,ORDER,1;2:P,PIECE,2;4:Q,QUERY,1;1:R,RANDOM,1;1:S,SELECT,1;999:T,TEXT,1;1:V,VIEW,1;999,
"RTN","XINDX7",42,0)
 ;;FNC;;FN,FNUMBER,2;3:NA,NAME,1;2:QL,QLENGTH,1;1:QS,QSUBSCRIPT,1;3:RE,REVERSE,1;1:ST,STACK,1;2:TR,TRANSLATE,1;3:WFONT,WFONT,4;4:WTFIT,WTFIT,6;6:WTWIDTH,WTWIDTH,5;5:
"RTN","XINDX7",43,0)
 ;;
"RTN","XINDX7",44,0)
SVN ;;SVN;;D,DEVICE:EC,ECODE:ES,ESTACK:ET,ETRAP:H,HOROLOG:I,IO:J,JOB:K,KEY:P,PRINCIPAL:Q,QUIT:S,STORAGE:ST,STACK:SY,SYSTEM:T,TEST:X,X:Y,Y
"RTN","XINDX7",45,0)
 ;;
"RTN","XINDX7",46,0)
SSVN ;;SSVN;;C,CHARACTER:D,DEVICE:DI,DISPLAY:E,EVENT:G,GLOBAL:J,JOB:L,LOCK:R,ROUTINE:S,SYSTEM:W,WINDOW:Z,Z
"RTN","XINDX8")
0^6^B15758649
"RTN","XINDX8",1,0)
XINDX8 ;ISC/GRK - STRUCTURED INDEX ;01/04/2000  14:29
"RTN","XINDX8",2,0)
 ;;7.3;TOOLKIT;**20,27,61,140**;Apr 25, 1995;Build 40
"RTN","XINDX8",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX8",4,0)
 S Q="""",(DDOT,LO)=0,PG=+$G(PG) D HDR
"RTN","XINDX8",5,0)
 F LC=1:1 Q:'$D(^UTILITY($J,1,RTN,0,LC))  S LIN=^(LC,0),ML=0,IDT=10 D CD
"RTN","XINDX8",6,0)
 K AGR,EOC,IDT,JJ,LO,ML,OLD,SAV,TY
"RTN","XINDX8",7,0)
 Q
"RTN","XINDX8",8,0)
CD S LAB=$P(LIN," ",1),LIN=$P(LIN," ",2,999),LO=$S(LAB="":LO+1,1:0)
"RTN","XINDX8",9,0)
 I INP(5)["L",$G(OPT("NUM")) S OPT("NUM")=OPT("NUM")+1 W $J(OPT("NUM"),3)_"| "
"RTN","XINDX8",10,0)
 W $S('LO:LAB,INP(5)'["N":" +"_LO,1:"")_" "
"RTN","XINDX8",11,0)
 G:LIN'[";" EE S STR=1,L=";",ARG=LIN D LOOP I CH'=";" G EE
"RTN","XINDX8",12,0)
 W ?10,$E(LIN,I,999),! Q:I<2  S LIN=$E(LIN,1,I-2)
"RTN","XINDX8",13,0)
EE I LIN="" Q
"RTN","XINDX8",14,0)
 I $E(LIN)=" " S LIN=$E(LIN,2,9999) G EE ;Skip blanks
"RTN","XINDX8",15,0)
 D SEP S EOC=0,COM=$$CASE^XINDX52($P(ARG,":")),CM=$P($G(IND("CMD",COM)),"^") I CM="" G ERR
"RTN","XINDX8",16,0)
 I ARG[":" S OLD=CM,COM="if",ARG=$P(ARG,":",2) D GRB S IDT=IDT+4,CM=OLD,EOC=4
"RTN","XINDX8",17,0)
 S COM=CM D SEP
"RTN","XINDX8",18,0)
 S:$E(COM)="H"&(ARG'="") COM="HANG" S X=$E(COM,1)
"RTN","XINDX8",19,0)
 D @$S("BCHKLMNOPQRUVWZ"[X:"GRB",X="S":"SET","DGX"[X:"DGX","IE"[X:"IFE",X="F":"FOR",1:"GRB") S:EOC IDT=IDT-EOC G EE
"RTN","XINDX8",20,0)
 ;
"RTN","XINDX8",21,0)
GRB I ARG["$" F I=1:1 S CH=$E(ARG,I) Q:CH=""  D QUOTE:CH=Q I CH="$" D FUN
"RTN","XINDX8",22,0)
 I $Y+2>IOSL D HDR
"RTN","XINDX8",23,0)
 W ?IDT," ",$S(ML:"...",1:COM)," ",ARG,! S ML=0 Q
"RTN","XINDX8",24,0)
FUN I " $$ $& $% "[(" "_$E(ARG,I,I+1)_" ") D  S I=J-1 Q  ;Handle Extrinsics
"RTN","XINDX8",25,0)
 . F J=I+2:1 Q:"(,"[$E(ARG,J)
"RTN","XINDX8",26,0)
 . Q
"RTN","XINDX8",27,0)
 F J=I+1:1 Q:$E(ARG,J)'?1A
"RTN","XINDX8",28,0)
 S X=$E(ARG,I+1,J-1),L=$L(X),CH=$E(ARG,I+1),TY=$S($E(ARG,J)="(":"FNC",1:"SVN")
"RTN","XINDX8",29,0)
 Q:CH="Z"  S X=$P($G(IND(TY,X)),"^")
"RTN","XINDX8",30,0)
 G:'$L(X) ERR Q:L=$L(X)
"RTN","XINDX8",31,0)
 D:$L(ARG)>245 LEN S ARG=$E(ARG,1,I)_X_$E(ARG,J,999),I=I+$L(X)-L
"RTN","XINDX8",32,0)
 Q
"RTN","XINDX8",33,0)
ERR W !,"*** ERROR ***",! Q
"RTN","XINDX8",34,0)
IFE I ARG=""!(X="E") W ?IDT,"IF " W:X="E" "'" W "$TEST",! S IDT=IDT+4 Q
"RTN","XINDX8",35,0)
SET S STR=1,L="," D LOOP S SAV=ARG,ARG=$E(ARG,1,I-1),IP=I+1
"RTN","XINDX8",36,0)
 D GRB S ARG=$E(SAV,IP,999) S:COM="IF"!(COM="if") IDT=IDT+4 Q:ARG=""  G SET
"RTN","XINDX8",37,0)
FOR D GRB S IDT=IDT+4 Q
"RTN","XINDX8",38,0)
DGX I ARG="",$E(COM)="D" D DDOT Q
"RTN","XINDX8",39,0)
 S STR=1,L=":," D LOOP I CH="" G GRB
"RTN","XINDX8",40,0)
 I CH="," S SAV=ARG,ARG=$E(ARG,1,I-1),IP=I+1 D GRB G D1
"RTN","XINDX8",41,0)
 S SAV=ARG,STR=I+1,L="," D LOOP S IP=I+1
"RTN","XINDX8",42,0)
 S OLD=COM,ARG=$E(ARG,STR,I-1),COM="if" D GRB
"RTN","XINDX8",43,0)
 S IDT=IDT+4,ARG=$E(SAV,1,STR-2),COM=OLD D GRB S IDT=IDT-4
"RTN","XINDX8",44,0)
D1 S ARG=$E(SAV,IP,999) Q:ARG=""  G DGX
"RTN","XINDX8",45,0)
DDOT S DDOT=DDOT+1 W ?IDT," Begin DoDot:",DDOT,! S IDT(DDOT)=IDT+4
"RTN","XINDX8",46,0)
 N LIN,I,COM,EOC,Y
"RTN","XINDX8",47,0)
 F LC=LC+1:1 S LIN=$G(^UTILITY($J,1,RTN,0,LC,0)),IDT=IDT(DDOT) Q:LIN=""  D  Q:X<DDOT  D CD
"RTN","XINDX8",48,0)
 . S Y=$P(LIN," "),LIN=$P(LIN," ",2,999)
"RTN","XINDX8",49,0)
 . F I=1:1:254 Q:". "'[$E(LIN,I)
"RTN","XINDX8",50,0)
 . S X=$L($E(LIN,1,I),".")-1,LIN=Y_" "_$E(LIN,I,999)
"RTN","XINDX8",51,0)
 S IDT=IDT-4,LC=LC-1 W ?IDT," End DoDot:",DDOT,! S DDOT=DDOT-1
"RTN","XINDX8",52,0)
 Q
"RTN","XINDX8",53,0)
LOOP F I=STR:1 S CH=$E(ARG,I) D QUOTE:CH=Q,PAREN:CH="(" Q:L[CH
"RTN","XINDX8",54,0)
 Q
"RTN","XINDX8",55,0)
PAREN S PC=1
"RTN","XINDX8",56,0)
 F I=I+1:1 S CH=$E(ARG,I) Q:PC=0!(CH="")  I "()"""[CH D QUOTE:CH=Q S:"()"[CH PC=PC+$S(CH="(":1,1:-1)
"RTN","XINDX8",57,0)
 Q
"RTN","XINDX8",58,0)
QUOTE F I=I+1:1 S CH=$E(ARG,I) Q:CH=""!(CH=Q)
"RTN","XINDX8",59,0)
 Q
"RTN","XINDX8",60,0)
SEP F I=1:1 S CH=$E(LIN,I) D SEPQ:CH=Q Q:"; "[CH
"RTN","XINDX8",61,0)
 S ARG=$E(LIN,1,I-1) S:CH=" " I=I+1 S LIN=$E(LIN,I,999) Q
"RTN","XINDX8",62,0)
SEPQ S I=I+1,CH=$E(LIN,I) I CH="" G ERR Q
"RTN","XINDX8",63,0)
 G SEPQ:CH'=Q S I=I+1,CH=$E(LIN,I) G:CH=Q SEPQ Q
"RTN","XINDX8",64,0)
LEN S AGR=$E(ARG,1,I-1) W ?IDT,COM," ",AGR_"...",! S ARG=$E(ARG,I)_$E(ARG,J-1,999),I=1,J=3,ML=1 K AGR
"RTN","XINDX8",65,0)
 Q
"RTN","XINDX8",66,0)
HDR S PG=PG+1
"RTN","XINDX8",67,0)
 W @IOF,RTN,"   ",+^UTILITY($J,1,RTN,0),"     printed  ",INDXDT,?(IOM-10)," Page ",PG,!!
"RTN","XINDX8",68,0)
 Q
"RTN","XINDX8",69,0)
 ;
"RTN","XINDX8",70,0)
UC(%) Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX8",71,0)
 ;
"RTN","XINDX8",72,0)
XCR ;Option entry point
"RTN","XINDX8",73,0)
 K ^UTILITY($J) D ASKRTN^XINDX6 G EXIT:NRO<1 S %ZIS="M" D ^%ZIS Q:POP  U IO(0)
"RTN","XINDX8",74,0)
 I $D(IO("Q")) S ZTRTN="XC2^XINDX8",ZTSAVE("^UTILITY($J,")="",ZTDESC="Structured print" D ^%ZTLOAD G EXIT
"RTN","XINDX8",75,0)
XC2 U IO I '$D(INDXDT) D NOW^%DTC S INDXDT=$E(%,2,3)_"/"_$E(%,4,5)_"/"_$E(%,6,7)
"RTN","XINDX8",76,0)
 D BUILD^XINDX7
"RTN","XINDX8",77,0)
 S RTN="" F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  D  D XINDX8
"RTN","XINDX8",78,0)
 . D LOAD^XINDEX
"RTN","XINDX8",79,0)
 . S CCN=0 F I=1:1:+^UTILITY($J,1,RTN,0,0) S CCN=CCN+$L(^UTILITY($J,1,RTN,0,I,0))+2
"RTN","XINDX8",80,0)
 . S ^UTILITY($J,1,RTN,0)=CCN
"RTN","XINDX8",81,0)
 . Q
"RTN","XINDX8",82,0)
EXIT D ^%ZISC K ^UTILITY($J),RTN,T,CCN,I,PG,INDXDT
"RTN","XINDX9")
0^8^B33427538
"RTN","XINDX9",1,0)
XINDX9 ;SF/RWF - XINDEX SYNTAX CHECKER ;06/24/08  15:39
"RTN","XINDX9",2,0)
 ;;7.3;TOOLKIT;**20,27,48,61,66,68,110,121,132,133,140**;Apr 25, 1995;Build 40
"RTN","XINDX9",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX9",4,0)
 N CH1,CHO,EC,OP
"RTN","XINDX9",5,0)
 D PARSE S LI=0,AC=255 F %=0:0 S %=$O(LV(%)) Q:%'>0  S LI(%)=0
"RTN","XINDX9",6,0)
 Q
"RTN","XINDX9",7,0)
 ;LV is a set of Linked Values
"RTN","XINDX9",8,0)
PARSE K LV,LI S (ERR,LI,I)=0,(LL,LV)=1,(OP,CH)="",Q=""""
"RTN","XINDX9",9,0)
 ;CH=current, CH1=next, CHO=previous character
"RTN","XINDX9",10,0)
PA2 S I=I+1,CHO=CH,CH=$E(STR,I),CH1=$E(STR,I+1) G:CH="" PEND
"RTN","XINDX9",11,0)
 G E:CH=";"!(CH'?1ANP) I """$()"[CH D QUOTE:CH=Q,FUNC:CH="$",DN:CH="(",UP:CH=")" G PA2
"RTN","XINDX9",12,0)
 I CH="^",CH1="$" D SSVN G PA2
"RTN","XINDX9",13,0)
 I CH="^",I=LL G PA2:CH1'="[" S I=I+1,X=$E(STR,LL,I) D ADD S LL=I+1 G PA2
"RTN","XINDX9",14,0)
 I CH?1A!(CH="%")!(CH=".") D VAR1 G PA2
"RTN","XINDX9",15,0)
 I CH?1N D NUM G PA2
"RTN","XINDX9",16,0)
 I CH="#",CH1="#" D OBJ G PA2
"RTN","XINDX9",17,0)
 S:"+-#'/*_&![]<>?"[CH OP=CH
"RTN","XINDX9",18,0)
 I CH="?",",!#"'[$E(STR,I-1) D AR,PAT G PA2
"RTN","XINDX9",19,0)
 I CH=",",CH1=":" D E^XINDX1(21) ;P121
"RTN","XINDX9",20,0)
 ;check if an open $S exists
"RTN","XINDX9",21,0)
 I $G(LV(LV,"SEL")) D
"RTN","XINDX9",22,0)
 . I '$P(LV(LV,"SEL"),U,2) S:CH="," $P(LV(LV,"SEL"),U,2)=1 Q  ;arg is closed: open if comma
"RTN","XINDX9",23,0)
 . I CH=":" S $P(LV(LV,"SEL"),U,2)=0 Q  ;arg open: close if colon
"RTN","XINDX9",24,0)
 . I CH="," D E^XINDX1(43) S LV(LV,"SEL")="0^0" ;arg open: error if comma, close this $S
"RTN","XINDX9",25,0)
 . Q
"RTN","XINDX9",26,0)
 I CH?1P D  ;Check for dup operators
"RTN","XINDX9",27,0)
 . D AR
"RTN","XINDX9",28,0)
 . Q:(CH_CH1="]]")
"RTN","XINDX9",29,0)
 . I CH=CH1,(",_/\[]&|"[CH) D
"RTN","XINDX9",30,0)
 .. Q:CH=","&$$OBJF()  ;quit if Object with open '(', good code
"RTN","XINDX9",31,0)
 .. I $$FNC()'="$$" D E^XINDX1(21) Q  ; if not function, can't have empty parameters
"RTN","XINDX9",32,0)
 G PA2
"RTN","XINDX9",33,0)
 ;End of parse
"RTN","XINDX9",34,0)
PEND D AR,E^XINDX1(5):LV>1,E^XINDX1(21):($G(LV(1,1))=",") ;LV>1 means mis-match ()
"RTN","XINDX9",35,0)
 Q
"RTN","XINDX9",36,0)
 ;
"RTN","XINDX9",37,0)
DN D STR S X=CH D ADD,NEW S LI(LV)=LI,LV=LV+1 S:'$D(LI(LV)) LI(LV)=0 S LI=LI(LV),LI(LV-1,1)=LI
"RTN","XINDX9",38,0)
 Q
"RTN","XINDX9",39,0)
UP I LV<2 D E^XINDX1(5) Q
"RTN","XINDX9",40,0)
 D STR S EC=LI-LI(LV-1,1),X=$C(10) D ADD,NEW
"RTN","XINDX9",41,0)
 ;$S function still open, check arg
"RTN","XINDX9",42,0)
 I $G(LV(LV,"SEL")) D:$P(LV(LV,"SEL"),U,2) E^XINDX1(43) K LV(LV,"SEL")
"RTN","XINDX9",43,0)
 S LI(LV)=LI,LV=LV-1,LI=LI(LV)
"RTN","XINDX9",44,0)
 S X=EC D ADD S X=CH D ADD
"RTN","XINDX9",45,0)
 I CH1]"",",._=+-*/\#'):<>[]?&!@^"'[CH1 D E^XINDX1(43)
"RTN","XINDX9",46,0)
 Q
"RTN","XINDX9",47,0)
NEW S LL=I+1
"RTN","XINDX9",48,0)
 Q
"RTN","XINDX9",49,0)
AR D STR S X=CH D ADD,NEW Q
"RTN","XINDX9",50,0)
STR S X=$E(STR,LL,I-1) Q:'$L(X)  ;Drop into ADD
"RTN","XINDX9",51,0)
ADD S LI=LI+1,LV(LV,LI)=X Q
"RTN","XINDX9",52,0)
 ;
"RTN","XINDX9",53,0)
FNC(NEW) ;Sets or returns the current function
"RTN","XINDX9",54,0)
 I $D(NEW) S LV(LV+1,"FNC",$G(LI(LV))+1)=NEW Q
"RTN","XINDX9",55,0)
 N W S W=+$S($D(LV(LV,"FNC",LI)):LI,$O(LV(LV,"FNC",LI)):$O(LV(LV,"FNC",LI)),1:$O(LV(LV,"FNC",LI),-1)) ;patch 119
"RTN","XINDX9",56,0)
 Q $G(LV(LV,"FNC",W))
"RTN","XINDX9",57,0)
 ;
"RTN","XINDX9",58,0)
OP(NEW) ;Sets or returns the current operator
"RTN","XINDX9",59,0)
 I $D(NEW) S LV(LV,"OP",LI)=NEW Q
"RTN","XINDX9",60,0)
 N W S W=+$S($D(LV(LV,"OP",LI)):LI,1:$O(LV(LV,"OP",LI),-1))
"RTN","XINDX9",61,0)
 Q $G(LV(LV,"OP",W))
"RTN","XINDX9",62,0)
 ;
"RTN","XINDX9",63,0)
QUOTE F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=Q)
"RTN","XINDX9",64,0)
 I $E(STR,I+1)=Q S I=I+1 G QUOTE
"RTN","XINDX9",65,0)
 I OP'="?",$E(STR,I+1)]"","[]()<>\/+-=&!_#*,:'|"'[$E(STR,I+1) D E^XINDX1(46) Q
"RTN","XINDX9",66,0)
 Q:CH]""  D E^XINDX1(6)
"RTN","XINDX9",67,0)
 Q
"RTN","XINDX9",68,0)
 ;
"RTN","XINDX9",69,0)
GVAR() ;EF get var
"RTN","XINDX9",70,0)
 N % D VAR S %=$E(STR,LL,I),LL=I+1
"RTN","XINDX9",71,0)
 Q %
"RTN","XINDX9",72,0)
 ;
"RTN","XINDX9",73,0)
OBJ ;check Cache Object
"RTN","XINDX9",74,0)
 S J=$E(STR,I,I+7),J=$$CASE(J) I J'="##CLASS(" D E^XINDX1(3) Q
"RTN","XINDX9",75,0)
 D E^XINDX1(65) ;vendor specific code
"RTN","XINDX9",76,0)
 S LL=I,I=I+7,CH=$E(STR,I) D SUM("F"),DN
"RTN","XINDX9",77,0)
 ;get the class
"RTN","XINDX9",78,0)
 S LL=I+1,I=$$CLS(LL),CH=$E(STR,I),CH1=$E(STR,I+1),LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",79,0)
 D SUM("O"),UP
"RTN","XINDX9",80,0)
 ;get the method, must start with "."
"RTN","XINDX9",81,0)
 Q:CH1'="."
"RTN","XINDX9",82,0)
 S LL=I+1,J=$$CLS(LL),I=J-1,LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",83,0)
 D SUM("O")
"RTN","XINDX9",84,0)
 Q
"RTN","XINDX9",85,0)
 ;
"RTN","XINDX9",86,0)
CLS(I) ;return the position of the class
"RTN","XINDX9",87,0)
 N %
"RTN","XINDX9",88,0)
 F %=I:1 S CH=$E(STR,%) Q:"()"[CH
"RTN","XINDX9",89,0)
 Q %
"RTN","XINDX9",90,0)
 ;
"RTN","XINDX9",91,0)
OBJF() ; return line where object has an open "(" for parameters
"RTN","XINDX9",92,0)
 N %
"RTN","XINDX9",93,0)
 Q:LV<2 0  ;must be down at least 1 level
"RTN","XINDX9",94,0)
 S %=$O(LV(LV-1,"OBJ",""),-1) ;find last object at previous level
"RTN","XINDX9",95,0)
 Q $S('%:0,LV(LV-1,%+1)="(":%,1:0) ; returns 0 if can't find object or object has no parameter
"RTN","XINDX9",96,0)
 ;
"RTN","XINDX9",97,0)
VAR1 ;check if var is Object
"RTN","XINDX9",98,0)
 N % S %=0
"RTN","XINDX9",99,0)
 ;check of var is passed by ref.
"RTN","XINDX9",100,0)
 I CH=".",",("[CHO D AR Q
"RTN","XINDX9",101,0)
 F J=I+1:1 S CH=$E(STR,J) I CH'?1AN Q:CH'="."  S %=1
"RTN","XINDX9",102,0)
 G:'% VAR
"RTN","XINDX9",103,0)
 ;save summary and ref. of Object/method
"RTN","XINDX9",104,0)
 D E^XINDX1(65) ;vendor specific code
"RTN","XINDX9",105,0)
 S LL=I,I=J-1,LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",106,0)
 D SUM("O")
"RTN","XINDX9",107,0)
 Q
"RTN","XINDX9",108,0)
VAR ;find length of var. and reset I
"RTN","XINDX9",109,0)
 F J=I+1:1 S CH=$E(STR,J) Q:CH'?1AN
"RTN","XINDX9",110,0)
 S I=J-1 D SUM("V")
"RTN","XINDX9",111,0)
 Q
"RTN","XINDX9",112,0)
NUM F J=I+1:1 S CH=$E(STR,J) Q:"0123456789."'[CH!(CH="")
"RTN","XINDX9",113,0)
 I CH="E" S CH=$E(STR,J+1) I CH?1N!("+-"[CH) S I=J G NUM
"RTN","XINDX9",114,0)
 I CH]"",CH'?1P S ERR=53 D ^XINDX1
"RTN","XINDX9",115,0)
 S I=J-1 D SUM("N")
"RTN","XINDX9",116,0)
 Q
"RTN","XINDX9",117,0)
INC S I=I+1,CH=$E(STR,I)
"RTN","XINDX9",118,0)
 Q
"RTN","XINDX9",119,0)
FUNC ;Functions and special var's.
"RTN","XINDX9",120,0)
 ;check if $SYSTEM
"RTN","XINDX9",121,0)
 I $$CASE($E(STR,I,I+6))="$SYSTEM" G SYS
"RTN","XINDX9",122,0)
 D INC S X=CH,S=$$GVAR()
"RTN","XINDX9",123,0)
 G EXT:S["$$",PKG:S["$&",SPV:CH'="("
"RTN","XINDX9",124,0)
 I "ZV"[X S ERR=$S("Z"[X:31,1:27) D ^XINDX1
"RTN","XINDX9",125,0)
 S S=$$CASE($E(S,2,11)),F1=$G(IND("FNC",S)) I '$L(F1) D E^XINDX1(3) S F1=S G FX
"RTN","XINDX9",126,0)
 ;$S only function that must contain a colon in each argument
"RTN","XINDX9",127,0)
 I F1["SELECT" S LV(LV+1,"SEL")="1^1"
"RTN","XINDX9",128,0)
FX S X="$"_F1,CH="" D FNC("$F"),ADD,SUM("F")
"RTN","XINDX9",129,0)
 Q
"RTN","XINDX9",130,0)
SPV S X=S D FNC("$V"),ADD,SUM("V") S X=$E(S,2,10),CH="" ;P132 support of $PRINCIPAL, 10 characters
"RTN","XINDX9",131,0)
 I $E(S,2)="Z" D E^XINDX1(28) Q
"RTN","XINDX9",132,0)
 I '$D(IND("SVN",X)) D E^XINDX1(4)
"RTN","XINDX9",133,0)
 Q
"RTN","XINDX9",134,0)
EXT ;EXTRINSIC
"RTN","XINDX9",135,0)
 S X=S,CH="" D FNC("$$"),ADD,SUM("V")
"RTN","XINDX9",136,0)
 Q
"RTN","XINDX9",137,0)
SYS ;$SYSTEM class or SVN
"RTN","XINDX9",138,0)
 S LL=I,I=I+6 D INC
"RTN","XINDX9",139,0)
 I CH'="." D SUM("V") Q  ;SVN
"RTN","XINDX9",140,0)
 S I=LL,CH="" D VAR1
"RTN","XINDX9",141,0)
 ;Error 54 access for Kernel only
"RTN","XINDX9",142,0)
 S CH="" D E^XINDX1(54)
"RTN","XINDX9",143,0)
 Q
"RTN","XINDX9",144,0)
SSVN ;
"RTN","XINDX9",145,0)
 D INC S X=$$GVAR() I '$D(IND("SSVN",$E(X,3,99))) D E^XINDX1(4) Q
"RTN","XINDX9",146,0)
 ;Error 54 access for Kernel only
"RTN","XINDX9",147,0)
 D E^XINDX1(54),ADD,SUM("V")
"RTN","XINDX9",148,0)
 Q
"RTN","XINDX9",149,0)
PKG ;External Function
"RTN","XINDX9",150,0)
 S J=$F(STR,"(",I),I=J-2,X=S_$E(STR,LL,I),LL=J-1,CH=""
"RTN","XINDX9",151,0)
 D ADD,E^XINDX1(55) ;Not standard VA
"RTN","XINDX9",152,0)
 Q
"RTN","XINDX9",153,0)
E D E^XINDX1(11)
"RTN","XINDX9",154,0)
 Q
"RTN","XINDX9",155,0)
PAT N PC S PC=0
"RTN","XINDX9",156,0)
 F I=I+1:1 S CH=$E(STR,I) D PATQ:CH=Q,PATD:CH="(",PATU:CH=")",PATC:CH="," I CH=""!(CH'?1N&("ACELNPUacelnpu."'[CH)) Q
"RTN","XINDX9",157,0)
 I PC D E^XINDX1(5)
"RTN","XINDX9",158,0)
 S I=I-1 I ":),@+-_*/\!&'"'[CH D E^XINDX1(16),SEP Q
"RTN","XINDX9",159,0)
 Q
"RTN","XINDX9",160,0)
 ;Quote in Pattern
"RTN","XINDX9",161,0)
PATQ F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=Q)
"RTN","XINDX9",162,0)
 D:CH="" E^XINDX1(6) S I=I+1,CH=$E(STR,I) G:CH=Q PATQ
"RTN","XINDX9",163,0)
 Q
"RTN","XINDX9",164,0)
PATD S PC=PC+1,CH="." ;p110 Start Alt.
"RTN","XINDX9",165,0)
 Q
"RTN","XINDX9",166,0)
PATU I 'PC,LV>1 S CH="" Q  ;End
"RTN","XINDX9",167,0)
 S PC=PC-1,CH="." ;p110 End Alt.
"RTN","XINDX9",168,0)
 Q
"RTN","XINDX9",169,0)
PATC I PC<1 Q  ;
"RTN","XINDX9",170,0)
 S CH="." ;p110 Comma in Alt.
"RTN","XINDX9",171,0)
 Q
"RTN","XINDX9",172,0)
PAREN F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=")")
"RTN","XINDX9",173,0)
 D:CH="" E^XINDX1(5) S CH="."
"RTN","XINDX9",174,0)
 Q
"RTN","XINDX9",175,0)
SEP ;Find sep
"RTN","XINDX9",176,0)
 Q
"RTN","XINDX9",177,0)
 ;
"RTN","XINDX9",178,0)
SUM(P) ;Build summary line
"RTN","XINDX9",179,0)
 S LV(LV,"S")=$G(LV(LV,"S"))_P
"RTN","XINDX9",180,0)
 Q
"RTN","XINDX9",181,0)
CASE(%) ;UpperCase
"RTN","XINDX9",182,0)
 Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX9",183,0)
 ;
"RTN","XINDX9",184,0)
TEST S STR=$E($T(TEST+2),4,999) D XINDX9
"RTN","XINDX9",185,0)
 Q
"RTN","XINDX9",186,0)
 ;;NUMVAL?.1(1"+",1"-")1(1.N.1".".N,.N.1"."1.N).1(1"E".1(1"+",1"-")1.N)
"VER")
8.0^22.2
**INSTALL NAME**
XU*8.0*661
"BLD",1550,0)
XU*8.0*661^KERNEL^0^3190808^y
"BLD",1550,1,0)
^^143^143^3190808^^
"BLD",1550,1,1,0)
Subject:  Update %ZOSF to support SACWG changes
"BLD",1550,1,2,0)
 
"BLD",1550,1,3,0)
Category:  DATA DICTIONARY
"BLD",1550,1,4,0)
           ROUTINE
"BLD",1550,1,5,0)
 
"BLD",1550,1,6,0)
 
"BLD",1550,1,7,0)
Description:
"BLD",1550,1,8,0)
===========
"BLD",1550,1,9,0)
This patch supports the change of the SAC for longer Tags and Routine
"BLD",1550,1,10,0)
names.  It increases the length from 8 to 16 characters.  
"BLD",1550,1,11,0)
 
"BLD",1550,1,12,0)
This patch also makes several changes to the ZOSFONT routine, but only
"BLD",1550,1,13,0)
the ^%ZOSF("TEST") node will be set.
"BLD",1550,1,14,0)
 
"BLD",1550,1,15,0)
The routine ZOSFONT has the following changes:
"BLD",1550,1,16,0)
       1.      A new tag, NOASK, allows the setup of the %ZOSF global without
"BLD",1550,1,17,0)
                 user interaction.
"BLD",1550,1,18,0)
       2.      A new tag, ONE(X) allows the setup of a single node in the
"BLD",1550,1,19,0)
                %ZOSF global.  This allows this patch to update just
"BLD",1550,1,20,0)
                %ZOSF("TEST").
"BLD",1550,1,21,0)
       3.      There is now a short description for each %ZOSF node in the
"BLD",1550,1,22,0)
                text.
"BLD",1550,1,23,0)
 
"BLD",1550,1,24,0)
There are 2 changes to the ^%ZOSF global:
"BLD",1550,1,25,0)
  1. The node ^%ZOSF("TEST") is changed, the checking of routine pattern has
"BLD",1550,1,26,0)
    been removed.  It is changed from
"BLD",1550,1,27,0)
     I X?1(1""%"",1A).7AN,$D(^$ROUTINE(X)) to
"BLD",1550,1,28,0)
     I X]"",$D(^$ROUTINE(X)).
"BLD",1550,1,29,0)
  2. The node ^%ZOSF("GSEL;Select Globals") is deleted.  This node
"BLD",1550,1,30,0)
     was incorrectly defined in patch XU*8*365.  Patch 365 was
"BLD",1550,1,31,0)
     suppose to set the ^%ZOSF("GSEL") global, but mistakenly set the wrong
"BLD",1550,1,32,0)
     global node.
"BLD",1550,1,33,0)
                       
"BLD",1550,1,34,0)
The post install routine XU8P661 cleans up the ^%ZOSF global.
"BLD",1550,1,35,0)
       1. The node ^%ZOSF("GSEL;Select Globals") is deleted
"BLD",1550,1,36,0)
       2. Sets node ^%ZOSF("TEST")
"BLD",1550,1,37,0)
 
"BLD",1550,1,38,0)
 
"BLD",1550,1,39,0)
Patch Components
"BLD",1550,1,40,0)
================
"BLD",1550,1,41,0)
Files & Fields Associated:
"BLD",1550,1,42,0)
 
"BLD",1550,1,43,0)
BUILD file #9.6               PRE-TRANSPORTATION ROUTINE   #900
"BLD",1550,1,44,0)
                              ENVIRONMENT CHECK ROUTINE    #913
"BLD",1550,1,45,0)
                              DEL ENV ROUTINE              #913.1
"BLD",1550,1,46,0)
                              POST-INSTALL ROUINTE         #914
"BLD",1550,1,47,0)
                              PRE-INSTALL ROUINTE          #916
"BLD",1550,1,48,0)
INSTALL file #9.7             ROUTINES  multiple           #40
"BLD",1550,1,49,0)
ROUTINE file #9.8             NAME                         #.01
"BLD",1550,1,50,0)
                              TAG                          #5
"BLD",1550,1,51,0)
TASKS file   #14.4            Entry Point                  #.01
"BLD",1550,1,52,0)
                              Routine Name                 #2
"BLD",1550,1,53,0)
OPTION file  #19              ROUTINE                      #25
"BLD",1550,1,54,0)
XQAB ERRORS LOGGED
"BLD",1550,1,55,0)
    file 8991.5               ROUTINE                      #.02
"BLD",1550,1,56,0)
ALERT TRACKING file #8992.1   ROUTINE TAG                  #1.03
"BLD",1550,1,57,0)
REMOTE PROCEDURE file #8994   TAG                          #.02
"BLD",1550,1,58,0)
                              ROUTINE                      #.03
"BLD",1550,1,59,0)
 
"BLD",1550,1,60,0)
 
"BLD",1550,1,61,0)
Forms Associated:
"BLD",1550,1,62,0)
N/A
"BLD",1550,1,63,0)
 
"BLD",1550,1,64,0)
Mail Groups Associated:
"BLD",1550,1,65,0)
N/A
"BLD",1550,1,66,0)
 
"BLD",1550,1,67,0)
Options Associated:
"BLD",1550,1,68,0)
N/A
"BLD",1550,1,69,0)
 
"BLD",1550,1,70,0)
Protocols Associated:
"BLD",1550,1,71,0)
N/A
"BLD",1550,1,72,0)
 
"BLD",1550,1,73,0)
Security Keys Associated:
"BLD",1550,1,74,0)
N/A
"BLD",1550,1,75,0)
 
"BLD",1550,1,76,0)
Templates Associated:
"BLD",1550,1,77,0)
N/A
"BLD",1550,1,78,0)
 
"BLD",1550,1,79,0)
New Service Requests (NSRs):
"BLD",1550,1,80,0)
N/A
"BLD",1550,1,81,0)
 
"BLD",1550,1,82,0)
Patient Safety Issues (PSIs):
"BLD",1550,1,83,0)
N/A
"BLD",1550,1,84,0)
 
"BLD",1550,1,85,0)
 
"BLD",1550,1,86,0)
Blood Bank Clearance
"BLD",1550,1,87,0)
====================
"BLD",1550,1,88,0)
EFFECT ON BLOOD BANK FUNCTIONAL REQUIREMENTS: Patch XU*8.0*661 contains
"BLD",1550,1,89,0)
changes to a package referenced in ProPath standard titled: BBM Team Review
"BLD",1550,1,90,0)
of VistA Patches. This patch does not alter or modify any VistA Blood Bank
"BLD",1550,1,91,0)
software design safeguards or safety critical elements functions.
"BLD",1550,1,92,0)
 
"BLD",1550,1,93,0)
RISK ANALYSIS: Changes made by patch XU*8.0*661 have no effect on Blood Bank
"BLD",1550,1,94,0)
software functionality, therefore RISK is none.
"BLD",1550,1,95,0)
 
"BLD",1550,1,96,0)
 
"BLD",1550,1,97,0)
Defect Tracking System Ticket(s) & Overview:
"BLD",1550,1,98,0)
============================================
"BLD",1550,1,99,0)
Ticket: I9055002FY16 - XINDEX doesn't support SACC changes to routine
"BLD",1550,1,100,0)
        names and tags
"BLD",1550,1,101,0)
 
"BLD",1550,1,102,0)
Problem:
"BLD",1550,1,103,0)
 XINDEX utility needs to support routine name and labels to 16 characters
"BLD",1550,1,104,0)
 and local variables names to 16 characters
"BLD",1550,1,105,0)
 
"BLD",1550,1,106,0)
Resolution:
"BLD",1550,1,107,0)
 Change %ZOSF("TEST") to check for 16 characters instead of 8 in routine
"BLD",1550,1,108,0)
 ZOSFONT
"BLD",1550,1,109,0)
 
"BLD",1550,1,110,0)
 
"BLD",1550,1,111,0)
Test Sites: 
"BLD",1550,1,112,0)
===========
"BLD",1550,1,113,0)
Fargo, ND
"BLD",1550,1,114,0)
South Texas, TX
"BLD",1550,1,115,0)
 
"BLD",1550,1,116,0)
 
"BLD",1550,1,117,0)
Software and Documentation Retrieve Instructions:
"BLD",1550,1,118,0)
=================================================
"BLD",1550,1,119,0)
This patch is part of the TOOLKIT XINDEX 7.3 bundle.  Please see
"BLD",1550,1,120,0)
the Software and Document Retrieve Instruction in patch XT*7.3*140
"BLD",1550,1,121,0)
 
"BLD",1550,1,122,0)
 
"BLD",1550,1,123,0)
Patch Installation:
"BLD",1550,1,124,0)
===================
"BLD",1550,1,125,0)
This patch is part of the TOOLKIT XINDEX 7.3 bundle.  Please see
"BLD",1550,1,126,0)
the Patch Installation in patch XT*7.3*140
"BLD",1550,1,127,0)
 
"BLD",1550,1,128,0)
 
"BLD",1550,1,129,0)
Routine Information:
"BLD",1550,1,130,0)
====================
"BLD",1550,1,131,0)
The second line of each of these routines now looks like:
"BLD",1550,1,132,0)
 ;;8.0;KERNEL;**[Patch List]**;Jul 10, 1995;Build 10
"BLD",1550,1,133,0)
 
"BLD",1550,1,134,0)
The checksums below are new checksums, and
"BLD",1550,1,135,0)
 can be checked with CHECK1^XTSUMBLD.
"BLD",1550,1,136,0)
 
"BLD",1550,1,137,0)
 Routine Name: XU8P661 
"BLD",1550,1,138,0)
    Before:       n/a   After:   B83899  **661** 
"BLD",1550,1,139,0)
 Routine Name: ZOSFONT 
"BLD",1550,1,140,0)
    Before: B19625334   After: B28658128  **34,104,365,661** 
"BLD",1550,1,141,0)
 
"BLD",1550,1,142,0)
Routine list of preceding patches: 365 
"BLD",1550,1,143,0)
 
"BLD",1550,4,0)
^9.64PA^8994^8
"BLD",1550,4,9.6,0)
9.6
"BLD",1550,4,9.6,2,0)
^9.641^9.6^1
"BLD",1550,4,9.6,2,9.6,0)
BUILD  (File-top level)
"BLD",1550,4,9.6,2,9.6,1,0)
^9.6411^913^4
"BLD",1550,4,9.6,2,9.6,1,900,0)
PRE-TRANSPORTATION ROUTINE
"BLD",1550,4,9.6,2,9.6,1,913,0)
ENVIRONMENT CHECK ROUTINE
"BLD",1550,4,9.6,2,9.6,1,914,0)
POST-INSTALL ROUTINE
"BLD",1550,4,9.6,2,9.6,1,916,0)
PRE-INSTALL ROUTINE
"BLD",1550,4,9.6,222)
y^n^p^^^^n^^n
"BLD",1550,4,9.6,224)

"BLD",1550,4,9.7,0)
9.7
"BLD",1550,4,9.7,2,0)
^9.641^9.704^1
"BLD",1550,4,9.7,2,9.704,0)
ROUTINES  (sub-file)
"BLD",1550,4,9.7,2,9.704,1,0)
^9.6411^^
"BLD",1550,4,9.7,222)
y^n^p^^^^n^^n
"BLD",1550,4,9.7,224)

"BLD",1550,4,9.8,0)
9.8
"BLD",1550,4,9.8,2,0)
^9.641^9.801^2
"BLD",1550,4,9.8,2,9.8,0)
ROUTINE  (File-top level)
"BLD",1550,4,9.8,2,9.8,1,0)
^9.6411^.01^1
"BLD",1550,4,9.8,2,9.8,1,.01,0)
NAME
"BLD",1550,4,9.8,2,9.801,0)
TAG  (sub-file)
"BLD",1550,4,9.8,2,9.801,1,0)
^9.6411^.01^1
"BLD",1550,4,9.8,2,9.801,1,.01,0)
TAG
"BLD",1550,4,9.8,222)
y^n^p^^^^n^^n
"BLD",1550,4,9.8,224)

"BLD",1550,4,14.4,0)
14.4
"BLD",1550,4,14.4,2,0)
^9.641^14.4^1
"BLD",1550,4,14.4,2,14.4,0)
TASKS  (File-top level)
"BLD",1550,4,14.4,2,14.4,1,0)
^9.6411^2^2
"BLD",1550,4,14.4,2,14.4,1,.01,0)
Entry Point
"BLD",1550,4,14.4,2,14.4,1,2,0)
Routine Name
"BLD",1550,4,14.4,222)
y^n^p^^^^n^^n
"BLD",1550,4,14.4,224)

"BLD",1550,4,19,0)
19
"BLD",1550,4,19,2,0)
^9.641^19^1
"BLD",1550,4,19,2,19,0)
OPTION  (File-top level)
"BLD",1550,4,19,2,19,1,0)
^9.6411^25^1
"BLD",1550,4,19,2,19,1,25,0)
ROUTINE
"BLD",1550,4,19,222)
y^n^p^^^^n^^n
"BLD",1550,4,19,224)

"BLD",1550,4,8991.5,0)
8991.5
"BLD",1550,4,8991.5,2,0)
^9.641^8991.5^1
"BLD",1550,4,8991.5,2,8991.5,0)
XQAB ERRORS LOGGED  (File-top level)
"BLD",1550,4,8991.5,2,8991.5,1,0)
^9.6411^.02^1
"BLD",1550,4,8991.5,2,8991.5,1,.02,0)
ROUTINE
"BLD",1550,4,8991.5,222)
y^n^p^^^^n^^n
"BLD",1550,4,8991.5,224)

"BLD",1550,4,8992.1,0)
8992.1
"BLD",1550,4,8992.1,2,0)
^9.641^8992.1^1
"BLD",1550,4,8992.1,2,8992.1,0)
ALERT TRACKING  (File-top level)
"BLD",1550,4,8992.1,2,8992.1,1,0)
^9.6411^1.03^1
"BLD",1550,4,8992.1,2,8992.1,1,1.03,0)
ROUTINE TAG
"BLD",1550,4,8992.1,222)
y^n^p^^^^n^^n
"BLD",1550,4,8992.1,224)

"BLD",1550,4,8994,0)
8994
"BLD",1550,4,8994,2,0)
^9.641^8994^1
"BLD",1550,4,8994,2,8994,0)
REMOTE PROCEDURE  (File-top level)
"BLD",1550,4,8994,2,8994,1,0)
^9.6411^.03^2
"BLD",1550,4,8994,2,8994,1,.02,0)
TAG
"BLD",1550,4,8994,2,8994,1,.03,0)
ROUTINE
"BLD",1550,4,8994,222)
y^n^p^^^^n^^n
"BLD",1550,4,8994,224)

"BLD",1550,4,"APDD",9.6,9.6)

"BLD",1550,4,"APDD",9.6,9.6,900)

"BLD",1550,4,"APDD",9.6,9.6,913)

"BLD",1550,4,"APDD",9.6,9.6,914)

"BLD",1550,4,"APDD",9.6,9.6,916)

"BLD",1550,4,"APDD",9.7,9.704)

"BLD",1550,4,"APDD",9.8,9.8)

"BLD",1550,4,"APDD",9.8,9.8,.01)

"BLD",1550,4,"APDD",9.8,9.801)

"BLD",1550,4,"APDD",9.8,9.801,.01)

"BLD",1550,4,"APDD",14.4,14.4)

"BLD",1550,4,"APDD",14.4,14.4,.01)

"BLD",1550,4,"APDD",14.4,14.4,2)

"BLD",1550,4,"APDD",19,19)

"BLD",1550,4,"APDD",19,19,25)

"BLD",1550,4,"APDD",8991.5,8991.5)

"BLD",1550,4,"APDD",8991.5,8991.5,.02)

"BLD",1550,4,"APDD",8992.1,8992.1)

"BLD",1550,4,"APDD",8992.1,8992.1,1.03)

"BLD",1550,4,"APDD",8994,8994)

"BLD",1550,4,"APDD",8994,8994,.02)

"BLD",1550,4,"APDD",8994,8994,.03)

"BLD",1550,4,"B",9.6,9.6)

"BLD",1550,4,"B",9.7,9.7)

"BLD",1550,4,"B",9.8,9.8)

"BLD",1550,4,"B",14.4,14.4)

"BLD",1550,4,"B",19,19)

"BLD",1550,4,"B",8991.5,8991.5)

"BLD",1550,4,"B",8992.1,8992.1)

"BLD",1550,4,"B",8994,8994)

"BLD",1550,6.3)
29
"BLD",1550,"INID")
^y
"BLD",1550,"INIT")
XU8P661
"BLD",1550,"KRN",0)
^9.67PA^9002226^22
"BLD",1550,"KRN",.4,0)
.4
"BLD",1550,"KRN",.401,0)
.401
"BLD",1550,"KRN",.402,0)
.402
"BLD",1550,"KRN",.403,0)
.403
"BLD",1550,"KRN",.5,0)
.5
"BLD",1550,"KRN",.84,0)
.84
"BLD",1550,"KRN",3.6,0)
3.6
"BLD",1550,"KRN",3.8,0)
3.8
"BLD",1550,"KRN",9.2,0)
9.2
"BLD",1550,"KRN",9.8,0)
9.8
"BLD",1550,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",1550,"KRN",9.8,"NM",1,0)
ZOSFONT^^0^B28658128
"BLD",1550,"KRN",9.8,"NM","B","ZOSFONT",1)

"BLD",1550,"KRN",19,0)
19
"BLD",1550,"KRN",19.1,0)
19.1
"BLD",1550,"KRN",101,0)
101
"BLD",1550,"KRN",409.61,0)
409.61
"BLD",1550,"KRN",771,0)
771
"BLD",1550,"KRN",779.2,0)
779.2
"BLD",1550,"KRN",870,0)
870
"BLD",1550,"KRN",8989.51,0)
8989.51
"BLD",1550,"KRN",8989.52,0)
8989.52
"BLD",1550,"KRN",8993,0)
8993
"BLD",1550,"KRN",8994,0)
8994
"BLD",1550,"KRN",9002226,0)
9002226
"BLD",1550,"KRN","B",.4,.4)

"BLD",1550,"KRN","B",.401,.401)

"BLD",1550,"KRN","B",.402,.402)

"BLD",1550,"KRN","B",.403,.403)

"BLD",1550,"KRN","B",.5,.5)

"BLD",1550,"KRN","B",.84,.84)

"BLD",1550,"KRN","B",3.6,3.6)

"BLD",1550,"KRN","B",3.8,3.8)

"BLD",1550,"KRN","B",9.2,9.2)

"BLD",1550,"KRN","B",9.8,9.8)

"BLD",1550,"KRN","B",19,19)

"BLD",1550,"KRN","B",19.1,19.1)

"BLD",1550,"KRN","B",101,101)

"BLD",1550,"KRN","B",409.61,409.61)

"BLD",1550,"KRN","B",771,771)

"BLD",1550,"KRN","B",779.2,779.2)

"BLD",1550,"KRN","B",870,870)

"BLD",1550,"KRN","B",8989.51,8989.51)

"BLD",1550,"KRN","B",8989.52,8989.52)

"BLD",1550,"KRN","B",8993,8993)

"BLD",1550,"KRN","B",8994,8994)

"BLD",1550,"KRN","B",9002226,9002226)

"BLD",1550,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1550,"QUES",0)
^9.62^^
"BLD",1550,"REQB",0)
^9.611^^
"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^n^p^^^^n^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.6,900)

"FIA",9.6,9.6,913)

"FIA",9.6,9.6,914)

"FIA",9.6,9.6,916)

"FIA",9.7)
INSTALL
"FIA",9.7,0)
^XPD(9.7,
"FIA",9.7,0,0)
9.7I
"FIA",9.7,0,1)
y^n^p^^^^n^^n
"FIA",9.7,0,10)

"FIA",9.7,0,11)

"FIA",9.7,0,"RLRO")

"FIA",9.7,0,"VR")
8.0^XU
"FIA",9.7,9.7)
1
"FIA",9.7,9.7,40)

"FIA",9.7,9.704)
0
"FIA",9.8)
ROUTINE
"FIA",9.8,0)
^DIC(9.8,
"FIA",9.8,0,0)
9.8
"FIA",9.8,0,1)
y^n^p^^^^n^^n
"FIA",9.8,0,10)

"FIA",9.8,0,11)

"FIA",9.8,0,"RLRO")

"FIA",9.8,0,"VR")
8.0^XU
"FIA",9.8,9.8)
1
"FIA",9.8,9.8,.01)

"FIA",9.8,9.8,5)

"FIA",9.8,9.801)
1
"FIA",9.8,9.801,.01)

"FIA",14.4)
TASKS
"FIA",14.4,0)
^%ZTSK(
"FIA",14.4,0,0)
14.4
"FIA",14.4,0,1)
y^n^p^^^^n^^n
"FIA",14.4,0,10)

"FIA",14.4,0,11)

"FIA",14.4,0,"RLRO")

"FIA",14.4,0,"VR")
8.0^XU
"FIA",14.4,14.4)
1
"FIA",14.4,14.4,.01)

"FIA",14.4,14.4,2)

"FIA",19)
OPTION
"FIA",19,0)
^DIC(19,
"FIA",19,0,0)
19I
"FIA",19,0,1)
y^n^p^^^^n^^n
"FIA",19,0,10)

"FIA",19,0,11)

"FIA",19,0,"RLRO")

"FIA",19,0,"VR")
8.0^XU
"FIA",19,19)
1
"FIA",19,19,25)

"FIA",8991.5)
XQAB ERRORS LOGGED
"FIA",8991.5,0)
^XTV(8991.5,
"FIA",8991.5,0,0)
8991.5
"FIA",8991.5,0,1)
y^n^p^^^^n^^n
"FIA",8991.5,0,10)

"FIA",8991.5,0,11)

"FIA",8991.5,0,"RLRO")

"FIA",8991.5,0,"VR")
8.0^XU
"FIA",8991.5,8991.5)
1
"FIA",8991.5,8991.5,.02)

"FIA",8992.1)
ALERT TRACKING
"FIA",8992.1,0)
^XTV(8992.1,
"FIA",8992.1,0,0)
8992.1A
"FIA",8992.1,0,1)
y^n^p^^^^n^^n
"FIA",8992.1,0,10)

"FIA",8992.1,0,11)

"FIA",8992.1,0,"RLRO")

"FIA",8992.1,0,"VR")
8.0^XU
"FIA",8992.1,8992.1)
1
"FIA",8992.1,8992.1,1.03)

"FIA",8994)
REMOTE PROCEDURE
"FIA",8994,0)
^XWB(8994,
"FIA",8994,0,0)
8994
"FIA",8994,0,1)
y^n^p^^^^n^^n
"FIA",8994,0,10)

"FIA",8994,0,11)

"FIA",8994,0,"RLRO")

"FIA",8994,0,"VR")
8.0^XU
"FIA",8994,8994)
1
"FIA",8994,8994,.02)

"FIA",8994,8994,.03)

"INIT")
XU8P661
"MBREQ")
0
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
661^3190808^6
"PKG",3,22,1,"PAH",1,1,0)
^^143^143^3190808
"PKG",3,22,1,"PAH",1,1,1,0)
Subject:  Update %ZOSF to support SACWG changes
"PKG",3,22,1,"PAH",1,1,2,0)
 
"PKG",3,22,1,"PAH",1,1,3,0)
Category:  DATA DICTIONARY
"PKG",3,22,1,"PAH",1,1,4,0)
           ROUTINE
"PKG",3,22,1,"PAH",1,1,5,0)
 
"PKG",3,22,1,"PAH",1,1,6,0)
 
"PKG",3,22,1,"PAH",1,1,7,0)
Description:
"PKG",3,22,1,"PAH",1,1,8,0)
===========
"PKG",3,22,1,"PAH",1,1,9,0)
This patch supports the change of the SAC for longer Tags and Routine
"PKG",3,22,1,"PAH",1,1,10,0)
names.  It increases the length from 8 to 16 characters.  
"PKG",3,22,1,"PAH",1,1,11,0)
 
"PKG",3,22,1,"PAH",1,1,12,0)
This patch also makes several changes to the ZOSFONT routine, but only
"PKG",3,22,1,"PAH",1,1,13,0)
the ^%ZOSF("TEST") node will be set.
"PKG",3,22,1,"PAH",1,1,14,0)
 
"PKG",3,22,1,"PAH",1,1,15,0)
The routine ZOSFONT has the following changes:
"PKG",3,22,1,"PAH",1,1,16,0)
       1.      A new tag, NOASK, allows the setup of the %ZOSF global without
"PKG",3,22,1,"PAH",1,1,17,0)
                 user interaction.
"PKG",3,22,1,"PAH",1,1,18,0)
       2.      A new tag, ONE(X) allows the setup of a single node in the
"PKG",3,22,1,"PAH",1,1,19,0)
                %ZOSF global.  This allows this patch to update just
"PKG",3,22,1,"PAH",1,1,20,0)
                %ZOSF("TEST").
"PKG",3,22,1,"PAH",1,1,21,0)
       3.      There is now a short description for each %ZOSF node in the
"PKG",3,22,1,"PAH",1,1,22,0)
                text.
"PKG",3,22,1,"PAH",1,1,23,0)
 
"PKG",3,22,1,"PAH",1,1,24,0)
There are 2 changes to the ^%ZOSF global:
"PKG",3,22,1,"PAH",1,1,25,0)
  1. The node ^%ZOSF("TEST") is changed, the checking of routine pattern has
"PKG",3,22,1,"PAH",1,1,26,0)
    been removed.  It is changed from
"PKG",3,22,1,"PAH",1,1,27,0)
     I X?1(1""%"",1A).7AN,$D(^$ROUTINE(X)) to
"PKG",3,22,1,"PAH",1,1,28,0)
     I X]"",$D(^$ROUTINE(X)).
"PKG",3,22,1,"PAH",1,1,29,0)
  2. The node ^%ZOSF("GSEL;Select Globals") is deleted.  This node
"PKG",3,22,1,"PAH",1,1,30,0)
     was incorrectly defined in patch XU*8*365.  Patch 365 was
"PKG",3,22,1,"PAH",1,1,31,0)
     suppose to set the ^%ZOSF("GSEL") global, but mistakenly set the wrong
"PKG",3,22,1,"PAH",1,1,32,0)
     global node.
"PKG",3,22,1,"PAH",1,1,33,0)
                       
"PKG",3,22,1,"PAH",1,1,34,0)
The post install routine XU8P661 cleans up the ^%ZOSF global.
"PKG",3,22,1,"PAH",1,1,35,0)
       1. The node ^%ZOSF("GSEL;Select Globals") is deleted
"PKG",3,22,1,"PAH",1,1,36,0)
       2. Sets node ^%ZOSF("TEST")
"PKG",3,22,1,"PAH",1,1,37,0)
 
"PKG",3,22,1,"PAH",1,1,38,0)
 
"PKG",3,22,1,"PAH",1,1,39,0)
Patch Components
"PKG",3,22,1,"PAH",1,1,40,0)
================
"PKG",3,22,1,"PAH",1,1,41,0)
Files & Fields Associated:
"PKG",3,22,1,"PAH",1,1,42,0)
 
"PKG",3,22,1,"PAH",1,1,43,0)
BUILD file #9.6               PRE-TRANSPORTATION ROUTINE   #900
"PKG",3,22,1,"PAH",1,1,44,0)
                              ENVIRONMENT CHECK ROUTINE    #913
"PKG",3,22,1,"PAH",1,1,45,0)
                              DEL ENV ROUTINE              #913.1
"PKG",3,22,1,"PAH",1,1,46,0)
                              POST-INSTALL ROUINTE         #914
"PKG",3,22,1,"PAH",1,1,47,0)
                              PRE-INSTALL ROUINTE          #916
"PKG",3,22,1,"PAH",1,1,48,0)
INSTALL file #9.7             ROUTINES  multiple           #40
"PKG",3,22,1,"PAH",1,1,49,0)
ROUTINE file #9.8             NAME                         #.01
"PKG",3,22,1,"PAH",1,1,50,0)
                              TAG                          #5
"PKG",3,22,1,"PAH",1,1,51,0)
TASKS file   #14.4            Entry Point                  #.01
"PKG",3,22,1,"PAH",1,1,52,0)
                              Routine Name                 #2
"PKG",3,22,1,"PAH",1,1,53,0)
OPTION file  #19              ROUTINE                      #25
"PKG",3,22,1,"PAH",1,1,54,0)
XQAB ERRORS LOGGED
"PKG",3,22,1,"PAH",1,1,55,0)
    file 8991.5               ROUTINE                      #.02
"PKG",3,22,1,"PAH",1,1,56,0)
ALERT TRACKING file #8992.1   ROUTINE TAG                  #1.03
"PKG",3,22,1,"PAH",1,1,57,0)
REMOTE PROCEDURE file #8994   TAG                          #.02
"PKG",3,22,1,"PAH",1,1,58,0)
                              ROUTINE                      #.03
"PKG",3,22,1,"PAH",1,1,59,0)
 
"PKG",3,22,1,"PAH",1,1,60,0)
 
"PKG",3,22,1,"PAH",1,1,61,0)
Forms Associated:
"PKG",3,22,1,"PAH",1,1,62,0)
N/A
"PKG",3,22,1,"PAH",1,1,63,0)
 
"PKG",3,22,1,"PAH",1,1,64,0)
Mail Groups Associated:
"PKG",3,22,1,"PAH",1,1,65,0)
N/A
"PKG",3,22,1,"PAH",1,1,66,0)
 
"PKG",3,22,1,"PAH",1,1,67,0)
Options Associated:
"PKG",3,22,1,"PAH",1,1,68,0)
N/A
"PKG",3,22,1,"PAH",1,1,69,0)
 
"PKG",3,22,1,"PAH",1,1,70,0)
Protocols Associated:
"PKG",3,22,1,"PAH",1,1,71,0)
N/A
"PKG",3,22,1,"PAH",1,1,72,0)
 
"PKG",3,22,1,"PAH",1,1,73,0)
Security Keys Associated:
"PKG",3,22,1,"PAH",1,1,74,0)
N/A
"PKG",3,22,1,"PAH",1,1,75,0)
 
"PKG",3,22,1,"PAH",1,1,76,0)
Templates Associated:
"PKG",3,22,1,"PAH",1,1,77,0)
N/A
"PKG",3,22,1,"PAH",1,1,78,0)
 
"PKG",3,22,1,"PAH",1,1,79,0)
New Service Requests (NSRs):
"PKG",3,22,1,"PAH",1,1,80,0)
N/A
"PKG",3,22,1,"PAH",1,1,81,0)
 
"PKG",3,22,1,"PAH",1,1,82,0)
Patient Safety Issues (PSIs):
"PKG",3,22,1,"PAH",1,1,83,0)
N/A
"PKG",3,22,1,"PAH",1,1,84,0)
 
"PKG",3,22,1,"PAH",1,1,85,0)
 
"PKG",3,22,1,"PAH",1,1,86,0)
Blood Bank Clearance
"PKG",3,22,1,"PAH",1,1,87,0)
====================
"PKG",3,22,1,"PAH",1,1,88,0)
EFFECT ON BLOOD BANK FUNCTIONAL REQUIREMENTS: Patch XU*8.0*661 contains
"PKG",3,22,1,"PAH",1,1,89,0)
changes to a package referenced in ProPath standard titled: BBM Team Review
"PKG",3,22,1,"PAH",1,1,90,0)
of VistA Patches. This patch does not alter or modify any VistA Blood Bank
"PKG",3,22,1,"PAH",1,1,91,0)
software design safeguards or safety critical elements functions.
"PKG",3,22,1,"PAH",1,1,92,0)
 
"PKG",3,22,1,"PAH",1,1,93,0)
RISK ANALYSIS: Changes made by patch XU*8.0*661 have no effect on Blood Bank
"PKG",3,22,1,"PAH",1,1,94,0)
software functionality, therefore RISK is none.
"PKG",3,22,1,"PAH",1,1,95,0)
 
"PKG",3,22,1,"PAH",1,1,96,0)
 
"PKG",3,22,1,"PAH",1,1,97,0)
Defect Tracking System Ticket(s) & Overview:
"PKG",3,22,1,"PAH",1,1,98,0)
============================================
"PKG",3,22,1,"PAH",1,1,99,0)
Ticket: I9055002FY16 - XINDEX doesn't support SACC changes to routine
"PKG",3,22,1,"PAH",1,1,100,0)
        names and tags
"PKG",3,22,1,"PAH",1,1,101,0)
 
"PKG",3,22,1,"PAH",1,1,102,0)
Problem:
"PKG",3,22,1,"PAH",1,1,103,0)
 XINDEX utility needs to support routine name and labels to 16 characters
"PKG",3,22,1,"PAH",1,1,104,0)
 and local variables names to 16 characters
"PKG",3,22,1,"PAH",1,1,105,0)
 
"PKG",3,22,1,"PAH",1,1,106,0)
Resolution:
"PKG",3,22,1,"PAH",1,1,107,0)
 Change %ZOSF("TEST") to check for 16 characters instead of 8 in routine
"PKG",3,22,1,"PAH",1,1,108,0)
 ZOSFONT
"PKG",3,22,1,"PAH",1,1,109,0)
 
"PKG",3,22,1,"PAH",1,1,110,0)
 
"PKG",3,22,1,"PAH",1,1,111,0)
Test Sites: 
"PKG",3,22,1,"PAH",1,1,112,0)
===========
"PKG",3,22,1,"PAH",1,1,113,0)
Fargo, ND
"PKG",3,22,1,"PAH",1,1,114,0)
South Texas, TX
"PKG",3,22,1,"PAH",1,1,115,0)
 
"PKG",3,22,1,"PAH",1,1,116,0)
 
"PKG",3,22,1,"PAH",1,1,117,0)
Software and Documentation Retrieve Instructions:
"PKG",3,22,1,"PAH",1,1,118,0)
=================================================
"PKG",3,22,1,"PAH",1,1,119,0)
This patch is part of the TOOLKIT XINDEX 7.3 bundle.  Please see
"PKG",3,22,1,"PAH",1,1,120,0)
the Software and Document Retrieve Instruction in patch XT*7.3*140
"PKG",3,22,1,"PAH",1,1,121,0)
 
"PKG",3,22,1,"PAH",1,1,122,0)
 
"PKG",3,22,1,"PAH",1,1,123,0)
Patch Installation:
"PKG",3,22,1,"PAH",1,1,124,0)
===================
"PKG",3,22,1,"PAH",1,1,125,0)
This patch is part of the TOOLKIT XINDEX 7.3 bundle.  Please see
"PKG",3,22,1,"PAH",1,1,126,0)
the Patch Installation in patch XT*7.3*140
"PKG",3,22,1,"PAH",1,1,127,0)
 
"PKG",3,22,1,"PAH",1,1,128,0)
 
"PKG",3,22,1,"PAH",1,1,129,0)
Routine Information:
"PKG",3,22,1,"PAH",1,1,130,0)
====================
"PKG",3,22,1,"PAH",1,1,131,0)
The second line of each of these routines now looks like:
"PKG",3,22,1,"PAH",1,1,132,0)
 ;;8.0;KERNEL;**[Patch List]**;Jul 10, 1995;Build 10
"PKG",3,22,1,"PAH",1,1,133,0)
 
"PKG",3,22,1,"PAH",1,1,134,0)
The checksums below are new checksums, and
"PKG",3,22,1,"PAH",1,1,135,0)
 can be checked with CHECK1^XTSUMBLD.
"PKG",3,22,1,"PAH",1,1,136,0)
 
"PKG",3,22,1,"PAH",1,1,137,0)
 Routine Name: XU8P661 
"PKG",3,22,1,"PAH",1,1,138,0)
    Before:       n/a   After:   B83899  **661** 
"PKG",3,22,1,"PAH",1,1,139,0)
 Routine Name: ZOSFONT 
"PKG",3,22,1,"PAH",1,1,140,0)
    Before: B19625334   After: B28658128  **34,104,365,661** 
"PKG",3,22,1,"PAH",1,1,141,0)
 
"PKG",3,22,1,"PAH",1,1,142,0)
Routine list of preceding patches: 365 
"PKG",3,22,1,"PAH",1,1,143,0)
 
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","XU8P661")
0^^B83899
"RTN","XU8P661",1,0)
XU8P661 ;OAK/RD - Post install for patch XU*8*661
"RTN","XU8P661",2,0)
 ;;8.0;KERNEL;**661**;Jul 10, 1995;Build 29
"RTN","XU8P661",3,0)
 ;setup %ZOSF("TEST")
"RTN","XU8P661",4,0)
 D ONE^ZOSFONT("TEST")
"RTN","XU8P661",5,0)
 ;remove incorrect node that was set in patch 365
"RTN","XU8P661",6,0)
 K ^%ZOSF("GSEL;Select Globals")
"RTN","XU8P661",7,0)
 Q
"RTN","ZOSFONT")
0^1^B28658128
"RTN","ZOSFONT",1,0)
ZOSFONT ;SFISC/AC - SETS UP ^%ZOSF for Cache for NT/VMS ;09/29/09  15:35
"RTN","ZOSFONT",2,0)
 ;;8.0;KERNEL;**34,104,365,661**;JUL 10, 1995;Build 29
"RTN","ZOSFONT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","ZOSFONT",4,0)
 ;For Cache versions 2011 and above
"RTN","ZOSFONT",5,0)
 S %Y=1
"RTN","ZOSFONT",6,0)
INIT ;
"RTN","ZOSFONT",7,0)
 N ZO F I="MGR","PROD","VOL" S:$D(^%ZOSF(I)) ZO(I)=^%ZOSF(I)
"RTN","ZOSFONT",8,0)
 F I=1:2 S Z=$P($T(Z+I),";;",2) Q:Z=""  S X=$P($T(Z+1+I),";;",2,99) S ^%ZOSF(Z)=$S($D(ZO(Z)):ZO(Z),1:X)
"RTN","ZOSFONT",9,0)
 ;
"RTN","ZOSFONT",10,0)
 G:'$G(%Y) OS
"RTN","ZOSFONT",11,0)
MGR W !,"NAME OF MANAGER'S NAMESPACE: "_^%ZOSF("MGR")_"// " R X:$S($G(DTIME):DTIME,1:9999) I X]"" X ^("UCICHECK") G MGR:0[Y S ^%ZOSF("MGR")=X
"RTN","ZOSFONT",12,0)
PROD W !,"PRODUCTION (SIGN-ON) NAMESPACE: "_^%ZOSF("PROD")_"// " R X:$S($G(DTIME):DTIME,1:9999) I X]"" X ^("UCICHECK") G PROD:0[Y S ^%ZOSF("PROD")=Y
"RTN","ZOSFONT",13,0)
VOL W !,"NAME OF THIS CONFIGURATION: "_^%ZOSF("VOL")_"//" R X:$S($G(DTIME):DTIME,1:9999) I X]"" S:X?1.22U ^%ZOSF("VOL")=X I X'?1.22U W "MUST BE 1-22 uppercase characters." G VOL
"RTN","ZOSFONT",14,0)
 ;
"RTN","ZOSFONT",15,0)
OS S $P(^%ZOSF("OS"),"^",1)="OpenM-NT" S:'$P(^%ZOSF("OS"),"^",2) $P(^%ZOSF("OS"),"^",2)=18
"RTN","ZOSFONT",16,0)
 W !!,"ALL SET UP",!!
"RTN","ZOSFONT",17,0)
 Q
"RTN","ZOSFONT",18,0)
 ;
"RTN","ZOSFONT",19,0)
NOASK ;Setup %ZOSF without terminal interaction
"RTN","ZOSFONT",20,0)
 S %Y=0
"RTN","ZOSFONT",21,0)
 G INIT
"RTN","ZOSFONT",22,0)
 ;
"RTN","ZOSFONT",23,0)
ONE(X) ;update a single global node
"RTN","ZOSFONT",24,0)
 Q:X=""
"RTN","ZOSFONT",25,0)
 F I=1:2 S Z=$P($T(Z+I),";;",2) Q:Z=""  I Z=X S Y=$P($T(Z+1+I),";;",2,99),^%ZOSF(X)=Y Q
"RTN","ZOSFONT",26,0)
 Q
"RTN","ZOSFONT",27,0)
Z ;;
"RTN","ZOSFONT",28,0)
 ;;ACTJ;;Active Jobs
"RTN","ZOSFONT",29,0)
 ;;S Y=$$ACTJ^%ZOSV()
"RTN","ZOSFONT",30,0)
 ;;AVJ;;Available Jobs
"RTN","ZOSFONT",31,0)
 ;;S Y=$$AVJ^%ZOSV()
"RTN","ZOSFONT",32,0)
 ;;BRK;;Enable Break
"RTN","ZOSFONT",33,0)
 ;;U $I:("":"+B")
"RTN","ZOSFONT",34,0)
 ;;DEL;;Delete Routine
"RTN","ZOSFONT",35,0)
 ;;X "ZR  ZS @X"
"RTN","ZOSFONT",36,0)
 ;;EOFF;;Echo off
"RTN","ZOSFONT",37,0)
 ;;U $I:("":"+S")
"RTN","ZOSFONT",38,0)
 ;;EON;;Echo On
"RTN","ZOSFONT",39,0)
 ;;U $I:("":"-S")
"RTN","ZOSFONT",40,0)
 ;;EOT;;End of Tape
"RTN","ZOSFONT",41,0)
 ;;S Y=$ZA\1024#2
"RTN","ZOSFONT",42,0)
 ;;ERRTN;;Error Routine
"RTN","ZOSFONT",43,0)
 ;;^%ZTER
"RTN","ZOSFONT",44,0)
 ;;ETRP;;obsolete
"RTN","ZOSFONT",45,0)
 ;;Q
"RTN","ZOSFONT",46,0)
 ;;GD;;Global Directory
"RTN","ZOSFONT",47,0)
 ;;D ^%GD
"RTN","ZOSFONT",48,0)
 ;;GSEL;;Select Globals
"RTN","ZOSFONT",49,0)
 ;;K ^CacheTempJ($J),^UTILITY($J) D ^%SYS.GSET M ^UTILITY($J)=^CacheTempJ($J) K ^CacheTempJ($J)
"RTN","ZOSFONT",50,0)
 ;;JOBPARAM;;Local Job
"RTN","ZOSFONT",51,0)
 ;;D JOBPAR^%ZOSV
"RTN","ZOSFONT",52,0)
 ;;LABOFF;;Special Lab Echo off
"RTN","ZOSFONT",53,0)
 ;;U IO:("":"+S+I-T":$C(13,27))
"RTN","ZOSFONT",54,0)
 ;;LOAD;;Load Routine
"RTN","ZOSFONT",55,0)
 ;;N %,%N S %N=0 X "ZL @X F XCNP=XCNP+1:1 S %N=%N+1,%=$T(+%N) Q:$L(%)=0  S @(DIF_XCNP_"",0)"")=%"
"RTN","ZOSFONT",56,0)
 ;;LPC;;Longitudinal Parity Check
"RTN","ZOSFONT",57,0)
 ;;S Y=$ZC(X)
"RTN","ZOSFONT",58,0)
 ;;MAXSIZ;;Set Partition Size
"RTN","ZOSFONT",59,0)
 ;;S $ZS=X+X
"RTN","ZOSFONT",60,0)
 ;;MGR
"RTN","ZOSFONT",61,0)
 ;;%SYS
"RTN","ZOSFONT",62,0)
 ;;MAGTAPE;;Sets magtape functions into %MT
"RTN","ZOSFONT",63,0)
 ;;S %MT("BS")="*-1",%MT("FS")="*-2",%MT("WTM")="*-3",%MT("WB")="*-4",%MT("REW")="*-5",%MT("RB")="*-6",%MT("REL")="*-7",%MT("WHL")="*-8",%MT("WEL")="*-9"
"RTN","ZOSFONT",64,0)
 ;;MTBOT;;Begining of Tape
"RTN","ZOSFONT",65,0)
 ;;S Y=$ZA\32#2
"RTN","ZOSFONT",66,0)
 ;;MTONLINE;;Magtape Online
"RTN","ZOSFONT",67,0)
 ;;S Y=$ZA\64#2
"RTN","ZOSFONT",68,0)
 ;;MTWPROT;;Magtape Write Protected
"RTN","ZOSFONT",69,0)
 ;;S Y=$ZA\4#2
"RTN","ZOSFONT",70,0)
 ;;MTERR;;Magtape Error
"RTN","ZOSFONT",71,0)
 ;;S Y=$ZA\32768#2
"RTN","ZOSFONT",72,0)
 ;;NBRK;;No break
"RTN","ZOSFONT",73,0)
 ;;U $I:("":"-B")
"RTN","ZOSFONT",74,0)
 ;;NO-PASSALL;;Set terminal to normal text mode
"RTN","ZOSFONT",75,0)
 ;;U $I:("":"-I+T")
"RTN","ZOSFONT",76,0)
 ;;NO-TYPE-AHEAD;;Turn off Type Ahead
"RTN","ZOSFONT",77,0)
 ;;U $I:("":"+F":$C(13,27))
"RTN","ZOSFONT",78,0)
 ;;PASSALL;;Set terminal to pass all codes
"RTN","ZOSFONT",79,0)
 ;;U $I:("":"+I-T")
"RTN","ZOSFONT",80,0)
 ;;PRIINQ;;Priority in current queue
"RTN","ZOSFONT",81,0)
 ;;N %PRIO D ^%PRIO S Y=$S('%PRIO:5,%PRIO>0:8,1:3)
"RTN","ZOSFONT",82,0)
 ;;PRIORITY;;set priority to X (1=low, 10=high)
"RTN","ZOSFONT",83,0)
 ;;D @($S(X>7:"NORMAL",X>3:"NORMAL",1:"LOW")_"^%PRIO") ;Don't do HIGH
"RTN","ZOSFONT",84,0)
 ;;PROGMODE;;Checks Programmer Mode
"RTN","ZOSFONT",85,0)
 ;;S Y=$ZJOB#2
"RTN","ZOSFONT",86,0)
 ;;PROD
"RTN","ZOSFONT",87,0)
 ;;VAH
"RTN","ZOSFONT",88,0)
 ;;RD;;Routine Directory
"RTN","ZOSFONT",89,0)
 ;;D ^%RD
"RTN","ZOSFONT",90,0)
 ;;RESJOB;;Kill job on local node
"RTN","ZOSFONT",91,0)
 ;;N OLD S OLD=$ZNSPACE ZNSPACE "%SYS" D ^RESJOB ZNSPACE OLD Q
"RTN","ZOSFONT",92,0)
 ;;RM;;Set Right Margin for terminal
"RTN","ZOSFONT",93,0)
 ;;I $G(IOT)["TRM" U $I:X
"RTN","ZOSFONT",94,0)
 ;;RSEL;;Routine Select
"RTN","ZOSFONT",95,0)
 ;;K ^UTILITY($J) D KERNEL^%RSET K %ST ;Special entry point for VA
"RTN","ZOSFONT",96,0)
 ;;RSUM;;Returns Checksum of Routine
"RTN","ZOSFONT",97,0)
 ;;N %,%1,%3 ZL @X S Y=0 F %=1,3:1 S %1=$T(+%),%3=$F(%1," ") Q:'%3  S %3=$S($E(%1,%3)'=";":$L(%1),$E(%1,%3+1)=";":$L(%1),1:%3-2) F %2=1:1:%3 S Y=$A(%1,%2)*%2+Y
"RTN","ZOSFONT",98,0)
 ;;RSUM1;;Returns new Checksum of Routine
"RTN","ZOSFONT",99,0)
 ;;N %,%1,%3 ZL @X S Y=0 F %=1,3:1 S %1=$T(+%),%3=$F(%1," ") Q:'%3  S %3=$S($E(%1,%3)'=";":$L(%1),$E(%1,%3+1)=";":$L(%1),1:%3-2) F %2=1:1:%3 S Y=$A(%1,%2)*(%2+%)+Y
"RTN","ZOSFONT",100,0)
 ;;SS;;System Status
"RTN","ZOSFONT",101,0)
 ;;D ^%SS
"RTN","ZOSFONT",102,0)
 ;;SAVE;;Save Routine
"RTN","ZOSFONT",103,0)
 ;;N XCS S XCS="F XCM=1:1 S XCN=$O(@(DIE_XCN_"")"")) Q:+XCN'=XCN  S %=^(XCN,0) Q:$E(%,1)=""$""  I $E(%,1)'="";"" ZI %" X "ZR  X XCS ZS @X"
"RTN","ZOSFONT",104,0)
 ;;SIZE;;Routine size in Bytes
"RTN","ZOSFONT",105,0)
 ;;S Y=0 F I=1:1 S %=$T(+I) Q:%=""  S Y=Y+$L(%)+2
"RTN","ZOSFONT",106,0)
 ;;TEST;;Routine exist
"RTN","ZOSFONT",107,0)
 ;;I X]"",$D(^$ROUTINE(X))
"RTN","ZOSFONT",108,0)
 ;;TMK;;Magtape Mark
"RTN","ZOSFONT",109,0)
 ;;S Y=$ZA\4#2
"RTN","ZOSFONT",110,0)
 ;;TRAP;;Sets Error Trap;S X="^%ET",@^%ZOSF("TRAP"); User $ETRAP
"RTN","ZOSFONT",111,0)
 ;;$ZT=X
"RTN","ZOSFONT",112,0)
 ;;TRMOFF;;Terminators off
"RTN","ZOSFONT",113,0)
 ;;U $I:("":"-I-T":$C(13,27))
"RTN","ZOSFONT",114,0)
 ;;TRMON;;Terminators on
"RTN","ZOSFONT",115,0)
 ;;U $I:("":"+I+T")
"RTN","ZOSFONT",116,0)
 ;;TRMRD;;Read Terminator
"RTN","ZOSFONT",117,0)
 ;;S Y=$A($ZB),Y=$S(Y<32:Y,Y=127:Y,1:0)
"RTN","ZOSFONT",118,0)
 ;;TYPE-AHEAD;;Allows Type-ahead
"RTN","ZOSFONT",119,0)
 ;;U $I:("":"-F":$C(13,27))
"RTN","ZOSFONT",120,0)
 ;;UCI;;Current UCI
"RTN","ZOSFONT",121,0)
 ;;D UCI^%ZOSV
"RTN","ZOSFONT",122,0)
 ;;UCICHECK;;UCI Valid
"RTN","ZOSFONT",123,0)
 ;;S Y=$$UCICHECK^%ZOSV(X)
"RTN","ZOSFONT",124,0)
 ;;UPPERCASE;;Convert Lower case to Upper case
"RTN","ZOSFONT",125,0)
 ;;S Y=$TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","ZOSFONT",126,0)
 ;;XY;;Set $X & $Y
"RTN","ZOSFONT",127,0)
 ;;S $X=DX,$Y=DY
"RTN","ZOSFONT",128,0)
 ;;VOL;;VOLUME SET NAME
"RTN","ZOSFONT",129,0)
 ;;ROU
"RTN","ZOSFONT",130,0)
 ;;ZD;;$H to external
"RTN","ZOSFONT",131,0)
 ;;S Y=$ZD(X)
"UP",9.7,9.704,-1)
9.7^RTN
"UP",9.7,9.704,0)
9.704
"UP",9.8,9.801,-1)
9.8^T
"UP",9.8,9.801,0)
9.801
"VER")
8.0^22.2
"^DD",9.6,9.6,900,0)
PRE-TRANSPORTATION ROUTINE^FJ33X^^PRET;E1,240^K:$L(X)>33!($L(X)<3)!'(X?.1UP.15UN.1"^"1UP.15UN) X
"^DD",9.6,9.6,900,3)
Enter a routine, [TAG^]ROUTINE, up to 33 characters.
"^DD",9.6,9.6,900,21,0)
^.001^6^6^3160307^^^^
"^DD",9.6,9.6,900,21,1,0)
The name of the routine which is run before the Transport Global
"^DD",9.6,9.6,900,21,2,0)
is sent. You can use this routine to add nodes to the Transport
"^DD",9.6,9.6,900,21,3,0)
Global.  The variable XPDGREF will be defined to a closed global
"^DD",9.6,9.6,900,21,4,0)
root that could be used to set the nodes.
"^DD",9.6,9.6,900,21,5,0)
 example: S @XPDGREF@("mydata",1,0)="node one of data"
"^DD",9.6,9.6,900,21,6,0)

"^DD",9.6,9.6,900,"DT")
3160307
"^DD",9.6,9.6,913,0)
ENVIRONMENT CHECK ROUTINE^FXJ16^^PRE;1^K:$L(X)<3!(X'?1U.15UN) X
"^DD",9.6,9.6,913,.1)
DEVELOPERS ROUTINE RUN BEFORE 'INIT' QUESTIONS ASKED
"^DD",9.6,9.6,913,3)
Enter name of developer's environment check routine (3-16 characters) that runs before any user questions are asked.  This routine should be used for environment check only and should not alter data.
"^DD",9.6,9.6,913,21,0)
^.001^8^8^3160307^^^^
"^DD",9.6,9.6,913,21,1,0)
The name of the developer's routine which is run at the beginning of
"^DD",9.6,9.6,913,21,2,0)
the install process.  This should just check the environment
"^DD",9.6,9.6,913,21,3,0)
and should not alter any data, since the user has no way to exit out of
"^DD",9.6,9.6,913,21,4,0)
the install process until this program runs to completion.
"^DD",9.6,9.6,913,21,5,0)
This routine can interact with the user. If the variable XPDQUIT is set,
"^DD",9.6,9.6,913,21,6,0)
the install process will terminate.
"^DD",9.6,9.6,913,21,7,0)
 Note: This routine must be self-contained, since it will be the only
"^DD",9.6,9.6,913,21,8,0)
routine installed from this package at this time.
"^DD",9.6,9.6,913,"DT")
3160307
"^DD",9.6,9.6,914,0)
POST-INSTALL ROUTINE^FXJ33^^INIT;E1,240^K:$L(X)>33!(X'?.1UP.15UN.1"^"1UP.15UN) X
"^DD",9.6,9.6,914,.1)

"^DD",9.6,9.6,914,3)
Enter the name of the developer's post-initialization [TAG^]ROUTINE, up to 33 characters. 
"^DD",9.6,9.6,914,21,0)
^.001^3^3^3160307^^^^
"^DD",9.6,9.6,914,21,1,0)
The name of the developer's routine which is run immediately after the
"^DD",9.6,9.6,914,21,2,0)
installation of the package.  This routine cannot be interactive with
"^DD",9.6,9.6,914,21,3,0)
the user, it might be queued to run at a later time.
"^DD",9.6,9.6,914,"DT")
3160307
"^DD",9.6,9.6,916,0)
PRE-INSTALL ROUTINE^FXJ33^^INI;E1,240^K:$L(X)>33!(X'?.1UP.15UN.1"^".1UP.15UN) X
"^DD",9.6,9.6,916,.1)

"^DD",9.6,9.6,916,3)
Enter name of developer's pre-init [TAG^]ROUTINE, up to 33 characters.
"^DD",9.6,9.6,916,21,0)
^^6^6^2940518^^^^
"^DD",9.6,9.6,916,21,1,0)
Name of the developer's routine that runs after the user has answered all
"^DD",9.6,9.6,916,21,2,0)
of the questions, but before any data or DD has been installed. All of
"^DD",9.6,9.6,916,21,3,0)
the routines for this package will already be installed. Used for data
"^DD",9.6,9.6,916,21,4,0)
conversions, etc. that the developer needs to do before bringing in new
"^DD",9.6,9.6,916,21,5,0)
data.  This routine cannot be interactive with the user, it might
"^DD",9.6,9.6,916,21,6,0)
be queued to run at a later time.
"^DD",9.6,9.6,916,"DT")
3160307
"^DD",9.7,9.7,40,0)
ROUTINES^9.704A^^RTN;0
"^DD",9.7,9.7,40,21,0)
^^3^3^2941128^^
"^DD",9.7,9.7,40,21,1,0)
This multiple contains a list of all Routines that were installed for
"^DD",9.7,9.7,40,21,2,0)
this package.  It also includes routines that were generated during the
"^DD",9.7,9.7,40,21,3,0)
install.  The Routines came from calls to DIEZ, DIPZ, and DIKZ.
"^DD",9.7,9.7,40,"DT")
2941128
"^DD",9.7,9.704,0)
ROUTINES SUB-FIELD^^.01^1
"^DD",9.7,9.704,0,"DT")
3190806
"^DD",9.7,9.704,0,"IX","B",9.704,.01)

"^DD",9.7,9.704,0,"NM","ROUTINES")

"^DD",9.7,9.704,0,"UP")
9.7
"^DD",9.7,9.704,.01,0)
ROUTINES^MFX^^0;1^K:$L(X)>16!($L(X)<3) X
"^DD",9.7,9.704,.01,1,0)
^.1
"^DD",9.7,9.704,.01,1,1,0)
9.704^B
"^DD",9.7,9.704,.01,1,1,1)
S ^XPD(9.7,DA(1),"RTN","B",$E(X,1,30),DA)=""
"^DD",9.7,9.704,.01,1,1,2)
K ^XPD(9.7,DA(1),"RTN","B",$E(X,1,30),DA)
"^DD",9.7,9.704,.01,3)
Answer must be 3-16 characters in length.
"^DD",9.7,9.704,.01,21,0)
^^1^1^2941128^^
"^DD",9.7,9.704,.01,21,1,0)
This is the name of a Routine that is part of this Package.
"^DD",9.7,9.704,.01,"DT")
3151214
"^DD",9.8,9.8,.01,0)
NAME^RX^^0;1^D CHKNAME^XQ5 K:$L(X)>16!($L(X)<1)!'(X?.UN!(X?1"%".UN)) X
"^DD",9.8,9.8,.01,1,0)
^.1
"^DD",9.8,9.8,.01,1,1,0)
9.8^B
"^DD",9.8,9.8,.01,1,1,1)
S ^DIC(9.8,"B",X,DA)=""
"^DD",9.8,9.8,.01,1,1,2)
K ^DIC(9.8,"B",X,DA)
"^DD",9.8,9.8,.01,3)
Please enter the NAME (1-16 characters), e.g. DIC, XM, ...
"^DD",9.8,9.8,.01,21,0)
^.001^1^1^3151201^^^^
"^DD",9.8,9.8,.01,21,1,0)
The name of the PACKAGE, ROUTINE, or PROGRAM being documented.
"^DD",9.8,9.8,.01,"DT")
2851003
"^DD",9.8,9.8,5,0)
TAG^9.801^^T;0
"^DD",9.8,9.8,5,21,0)
^.001^2^2^3151214^^^
"^DD",9.8,9.8,5,21,1,0)
Any important TAGs or ENTRY POINTs in the program are documented
"^DD",9.8,9.8,5,21,2,0)
here.
"^DD",9.8,9.801,0)
TAG SUB-FIELD^NL^3^4
"^DD",9.8,9.801,0,"NM","TAG")

"^DD",9.8,9.801,.01,0)
TAG^MF^^0;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>16!($L(X)<1) X
"^DD",9.8,9.801,.01,1,0)
^.1
"^DD",9.8,9.801,.01,1,1,0)
9.801^B
"^DD",9.8,9.801,.01,1,1,1)
S ^DIC(9.8,DA(1),"T","B",$E(X,1,30),DA)=""
"^DD",9.8,9.801,.01,1,1,2)
K ^DIC(9.8,DA(1),"T","B",$E(X,1,30),DA)
"^DD",9.8,9.801,.01,3)
Please enter the name of a line in the program (1-16 characters).
"^DD",9.8,9.801,.01,21,0)
^.001^2^2^3151214^^^^
"^DD",9.8,9.801,.01,21,1,0)
The name of an important Line Label ("TAG") or Entry Point in
"^DD",9.8,9.801,.01,21,2,0)
this routine.
"^DD",9.8,9.801,.01,"DT")
3151214
"^DD",14.4,14.4,.01,0)
Entry Point^RF^^0;1^K:$L(X)>16!($L(X)<1)!'((X?1A.15AN)) X
"^DD",14.4,14.4,.01,1,0)
^.1^^0
"^DD",14.4,14.4,.01,3)
Answer must be 1-16 characters in length.
"^DD",14.4,14.4,.01,9)
^
"^DD",14.4,14.4,.01,21,0)
^.001^1^1^3151214^^
"^DD",14.4,14.4,.01,21,1,0)
This is the entry point in the routine to use.
"^DD",14.4,14.4,.01,"DT")
3151214
"^DD",14.4,14.4,2,0)
Routine Name^RF^^0;2^K:$L(X)>28!($L(X)<1)!'((X?1A.15AN.1"(".E)!(X?1"%".15AN.1"(".E)) X
"^DD",14.4,14.4,2,3)
Answer must be 1-28 characters in length.
"^DD",14.4,14.4,2,9)
^
"^DD",14.4,14.4,2,21,0)
^^2^2^2940630^
"^DD",14.4,14.4,2,21,1,0)
This is the ROUTINE that should be run when the scheduled time 
"^DD",14.4,14.4,2,21,2,0)
comes.
"^DD",14.4,14.4,2,"DT")
3151214
"^DD",19,19,25,0)
ROUTINE^FXJ53^^25;E1,245^K:$L(X)>53!(X'?.1ANP.15AN.1"^"1ANP.15AN.1"[".1"(".E) X I $D(X),X["[",'$D(^XUSEC("XUMGR",DUZ)) K X
"^DD",19,19,25,3)
Answer must be [TAG^]ROUTINE[(parameters)] to run, 1-53 characters.
"^DD",19,19,25,21,0)
^.001^2^2^3160330^^^^
"^DD",19,19,25,21,1,0)
Indicate the name of the tag, routine, and parameters. e.g. ROUTINE, or TAG^ROUTINE(parameters).
"^DD",19,19,25,21,2,0)

"^DD",19,19,25,"DT")
3160330
"^DD",8991.5,8991.5,.02,0)
ROUTINE^FX^^0;2^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>16!($L(X)<2) X
"^DD",8991.5,8991.5,.02,1,0)
^.1
"^DD",8991.5,8991.5,.02,1,1,0)
8991.5^ROU
"^DD",8991.5,8991.5,.02,1,1,1)
S ^XTV(8991.5,"ROU",$E(X,1,30),DA)=""
"^DD",8991.5,8991.5,.02,1,1,2)
K ^XTV(8991.5,"ROU",$E(X,1,30),DA)
"^DD",8991.5,8991.5,.02,1,1,"%D",0)
^^2^2^3160307^
"^DD",8991.5,8991.5,.02,1,1,"%D",1,0)
This cross reference allows lookup by routine name.
"^DD",8991.5,8991.5,.02,1,1,"%D",2,0)

"^DD",8991.5,8991.5,.02,1,1,"DT")
2910926
"^DD",8991.5,8991.5,.02,3)
Answer must be 2-16 characters in length.
"^DD",8991.5,8991.5,.02,21,0)
^^1^1^3151214^
"^DD",8991.5,8991.5,.02,21,1,0)
This is the Routine were the error occurred.
"^DD",8991.5,8991.5,.02,"DT")
3151214
"^DD",8992.1,8992.1,1.03,0)
ROUTINE TAG^FIX^^1;3^K:$L(X)>16!($L(X)<1) X
"^DD",8992.1,8992.1,1.03,3)
Enter the tag for the Routine, 1 to 16 characters.
"^DD",8992.1,8992.1,1.03,21,0)
^^2^2^3151214^
"^DD",8992.1,8992.1,1.03,21,1,0)
This is the tag indicated for the routine specified for use 
"^DD",8992.1,8992.1,1.03,21,2,0)
when the alert is selected.
"^DD",8992.1,8992.1,1.03,"DT")
3151214
"^DD",8994,8994,.02,0)
TAG^FJ16^^0;2^K:$L(X)>16!($L(X)<1) X
"^DD",8994,8994,.02,3)
Enter the TAG to be used as the entry point for the routine, 1-16 characters.  Leave empty if a TAG is not required.
"^DD",8994,8994,.02,21,0)
^^2^2^3151214^
"^DD",8994,8994,.02,21,1,0)
This is the TAG to be used as the entry point for the ROUTINE. Leave this 
"^DD",8994,8994,.02,21,2,0)
field empty if a TAG is not required.
"^DD",8994,8994,.02,"DT")
3160308
"^DD",8994,8994,.03,0)
ROUTINE^RFXJ16^^0;3^K:$L(X)>16!($L(X)<3)!'(X?1U1.15UN) X
"^DD",8994,8994,.03,3)
Enter the name of the Routine, 3 to 16 uppercase characters.
"^DD",8994,8994,.03,21,0)
^.001^1^1^3151214^^
"^DD",8994,8994,.03,21,1,0)
This is the name of the routine used by this API.
"^DD",8994,8994,.03,"DT")
3160330
**END**
**END**
