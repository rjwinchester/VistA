KIDS Distribution saved on Mar 13, 2018@10:38:22
T4 - XT*7.3*10001
**KIDS**:XT*7.3*10001^

**INSTALL NAME**
XT*7.3*10001
"BLD",10779,0)
XT*7.3*10001^TOOLKIT^0^3180313^y
"BLD",10779,1,0)
^^3^3^3180301^^
"BLD",10779,1,1,0)
XINDEX Enhancements
"BLD",10779,1,2,0)
 
"BLD",10779,1,3,0)
See https://github.com/osehra-sandbox/xindex
"BLD",10779,4,0)
^9.64PA^^
"BLD",10779,6.3)
4
"BLD",10779,"KRN",0)
^9.67PA^779.2^20
"BLD",10779,"KRN",.4,0)
.4
"BLD",10779,"KRN",.401,0)
.401
"BLD",10779,"KRN",.402,0)
.402
"BLD",10779,"KRN",.403,0)
.403
"BLD",10779,"KRN",.5,0)
.5
"BLD",10779,"KRN",.84,0)
.84
"BLD",10779,"KRN",3.6,0)
3.6
"BLD",10779,"KRN",3.8,0)
3.8
"BLD",10779,"KRN",9.2,0)
9.2
"BLD",10779,"KRN",9.8,0)
9.8
"BLD",10779,"KRN",9.8,"NM",0)
^9.68A^17^17
"BLD",10779,"KRN",9.8,"NM",1,0)
XINDEX^^0^B30708729
"BLD",10779,"KRN",9.8,"NM",2,0)
XINDX1^^0^B21638668
"BLD",10779,"KRN",9.8,"NM",3,0)
XINDX10^^0^B133633540
"BLD",10779,"KRN",9.8,"NM",4,0)
XINDX11^^0^B71566341
"BLD",10779,"KRN",9.8,"NM",5,0)
XINDX12^^0^B99595417
"BLD",10779,"KRN",9.8,"NM",6,0)
XINDX13^^0^B333519644
"BLD",10779,"KRN",9.8,"NM",7,0)
XINDX2^^0^B29863411
"BLD",10779,"KRN",9.8,"NM",8,0)
XINDX3^^0^B16436366
"BLD",10779,"KRN",9.8,"NM",9,0)
XINDX4^^0^B14273659
"BLD",10779,"KRN",9.8,"NM",10,0)
XINDX5^^0^B11449325
"BLD",10779,"KRN",9.8,"NM",11,0)
XINDX51^^0^B33518938
"BLD",10779,"KRN",9.8,"NM",12,0)
XINDX52^^0^B2709275
"BLD",10779,"KRN",9.8,"NM",13,0)
XINDX53^^0^B6321698
"BLD",10779,"KRN",9.8,"NM",14,0)
XINDX6^^0^B21300742
"BLD",10779,"KRN",9.8,"NM",15,0)
XINDX7^^0^B11348153
"BLD",10779,"KRN",9.8,"NM",16,0)
XINDX8^^0^B15967560
"BLD",10779,"KRN",9.8,"NM",17,0)
XINDX9^^0^B34886021
"BLD",10779,"KRN",9.8,"NM","B","XINDEX",1)

"BLD",10779,"KRN",9.8,"NM","B","XINDX1",2)

"BLD",10779,"KRN",9.8,"NM","B","XINDX10",3)

"BLD",10779,"KRN",9.8,"NM","B","XINDX11",4)

"BLD",10779,"KRN",9.8,"NM","B","XINDX12",5)

"BLD",10779,"KRN",9.8,"NM","B","XINDX13",6)

"BLD",10779,"KRN",9.8,"NM","B","XINDX2",7)

"BLD",10779,"KRN",9.8,"NM","B","XINDX3",8)

"BLD",10779,"KRN",9.8,"NM","B","XINDX4",9)

"BLD",10779,"KRN",9.8,"NM","B","XINDX5",10)

"BLD",10779,"KRN",9.8,"NM","B","XINDX51",11)

"BLD",10779,"KRN",9.8,"NM","B","XINDX52",12)

"BLD",10779,"KRN",9.8,"NM","B","XINDX53",13)

"BLD",10779,"KRN",9.8,"NM","B","XINDX6",14)

"BLD",10779,"KRN",9.8,"NM","B","XINDX7",15)

"BLD",10779,"KRN",9.8,"NM","B","XINDX8",16)

"BLD",10779,"KRN",9.8,"NM","B","XINDX9",17)

"BLD",10779,"KRN",19,0)
19
"BLD",10779,"KRN",19.1,0)
19.1
"BLD",10779,"KRN",101,0)
101
"BLD",10779,"KRN",409.61,0)
409.61
"BLD",10779,"KRN",771,0)
771
"BLD",10779,"KRN",779.2,0)
779.2
"BLD",10779,"KRN",870,0)
870
"BLD",10779,"KRN",8989.51,0)
8989.51
"BLD",10779,"KRN",8989.52,0)
8989.52
"BLD",10779,"KRN",8994,0)
8994
"BLD",10779,"KRN","B",.4,.4)

"BLD",10779,"KRN","B",.401,.401)

"BLD",10779,"KRN","B",.402,.402)

"BLD",10779,"KRN","B",.403,.403)

"BLD",10779,"KRN","B",.5,.5)

"BLD",10779,"KRN","B",.84,.84)

"BLD",10779,"KRN","B",3.6,3.6)

"BLD",10779,"KRN","B",3.8,3.8)

"BLD",10779,"KRN","B",9.2,9.2)

"BLD",10779,"KRN","B",9.8,9.8)

"BLD",10779,"KRN","B",19,19)

"BLD",10779,"KRN","B",19.1,19.1)

"BLD",10779,"KRN","B",101,101)

"BLD",10779,"KRN","B",409.61,409.61)

"BLD",10779,"KRN","B",771,771)

"BLD",10779,"KRN","B",779.2,779.2)

"BLD",10779,"KRN","B",870,870)

"BLD",10779,"KRN","B",8989.51,8989.51)

"BLD",10779,"KRN","B",8989.52,8989.52)

"BLD",10779,"KRN","B",8994,8994)

"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
7.3^3051119^2960604
"PKG",5,22,1,"PAH",1,0)
10001^3180313
"PKG",5,22,1,"PAH",1,1,0)
^^3^3^3180313
"PKG",5,22,1,"PAH",1,1,1,0)
XINDEX Enhancements
"PKG",5,22,1,"PAH",1,1,2,0)
 
"PKG",5,22,1,"PAH",1,1,3,0)
See https://github.com/osehra-sandbox/xindex
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
17
"RTN","XINDEX")
0^1^B30708729
"RTN","XINDEX",1,0)
XINDEX ;ISC/REL,GFT,GRK,RWF - INDEX & CROSS-REFERENCE ;08/04/08  13:19
"RTN","XINDEX",2,0)
 ;;7.3;TOOLKIT;**20,27,48,61,66,68,110,121,128,132,133**;Apr 25, 1995;Build 4
"RTN","XINDEX",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDEX",4,0)
 G ^XINDX6
"RTN","XINDEX",5,0)
SEP F I=1:1 S CH=$E(LIN,I) D QUOTE:CH=Q Q:" "[CH
"RTN","XINDEX",6,0)
 S ARG=$E(LIN,1,I-1) S:CH=" " I=I+1 S LIN=$E(LIN,I,999) Q
"RTN","XINDEX",7,0)
QUOTE F I=I+1:1 S CH=$E(LIN,I) Q:CH=""!(CH=Q)
"RTN","XINDEX",8,0)
 Q:CH]""  S ERR=6 G ^XINDX1
"RTN","XINDEX",9,0)
ALIVE ;enter here from taskman
"RTN","XINDEX",10,0)
 D SETUP^XINDX7 ;Get ready to process
"RTN","XINDEX",11,0)
A2 S RTN=$O(^UTILITY($J,RTN)) G ^XINDX5:RTN=""
"RTN","XINDEX",12,0)
 S INDLC=(RTN?1"|"1.4L.NP) D LOAD:'INDLC&'$D(^UTILITY($J,1,RTN,0))
"RTN","XINDEX",13,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S RTN="~",IND("QUIT")=1,ZTSTOP=1 G A2
"RTN","XINDEX",14,0)
 I 'INDDS,INDLC W !!?10,"Data Dictionaries",! S INDDS=1
"RTN","XINDEX",15,0)
 D BEG
"RTN","XINDEX",16,0)
 G A2
"RTN","XINDEX",17,0)
 ;
"RTN","XINDEX",18,0)
LOAD S X=RTN,XCNP=0,DIF="^UTILITY("_$J_",1,RTN,0," X ^%ZOSF("TEST") Q:'$T  X ^%ZOSF("LOAD") S ^UTILITY($J,1,RTN,0,0)=XCNP-1
"RTN","XINDEX",19,0)
 I $D(^UTILITY($J,1,RTN,0,0)) S ^UTILITY($J,1,RTN,"RSUM")="B"_$$SUMB^XPDRSUM($NA(^UTILITY($J,1,RTN,0)))
"RTN","XINDEX",20,0)
 Q
"RTN","XINDEX",21,0)
BEG ;
"RTN","XINDEX",22,0)
 S %=INDLC*5 W:$X+10+%>IOM ! W RTN,$J("",10+%-$L(RTN))
"RTN","XINDEX",23,0)
 S (IND("DO"),IND("SZT"),IND("SZC"),LABO)=0,LC=$G(^UTILITY($J,1,RTN,0,0))
"RTN","XINDEX",24,0)
 I LC="" W !,">>>Routine '",RTN,"' not found <<<",! Q
"RTN","XINDEX",25,0)
 S TXT="",LAB=$P(^UTILITY($J,1,RTN,0,1,0)," ") I RTN'=$P(LAB,"(") D E^XINDX1(17)
"RTN","XINDEX",26,0)
 I 'INDLC,LAB["(" D E^XINDX1(55) S LAB=$P(LAB,"(")
"RTN","XINDEX",27,0)
 ;if M routine(not compiled template or DD) and has more than 2 lines, check lines 1 & 2
"RTN","XINDEX",28,0)
 I 'INDLC,LC>2 D
"RTN","XINDEX",29,0)
 . N LABO S LABO=1
"RTN","XINDEX",30,0)
 . S LIN=$G(^UTILITY($J,1,RTN,0,1,0)),TXT=1
"RTN","XINDEX",31,0)
 . ;check 1st line (site/dev - ) patch 128
"RTN","XINDEX",32,0)
 . I $P(LIN,";",2,4)'?.E1"/".E.1"-".E D E^XINDX1(62)
"RTN","XINDEX",33,0)
 . S LIN=$G(^UTILITY($J,1,RTN,0,2,0)),TXT=2
"RTN","XINDEX",34,0)
 . ;check 2nd line (;;nn.nn[TV]nn;package;.anything)
"RTN","XINDEX",35,0)
 . I $P(LIN,";",3,99)'?1.2N1"."1.2N.1(1"T",1"V").2N1";"1A.APN1";".E D E^XINDX1(44) ;patch 132
"RTN","XINDEX",36,0)
 . I $L(INP(11)) X INP(11) ;Version number check
"RTN","XINDEX",37,0)
 . I $L(INP(12)) X INP(12) ;Patch number check
"RTN","XINDEX",38,0)
B5 F TXT=1:1:LC S LIN=^UTILITY($J,1,RTN,0,TXT,0),LN=$L(LIN),IND("SZT")=IND("SZT")+LN+2 D LN,ST ;Process Line
"RTN","XINDEX",39,0)
 S LAB="",LABO=0,TXT=0,^UTILITY($J,1,RTN,0)=IND("SZT")_"^"_LC_"^"_IND("SZC")
"RTN","XINDEX",40,0)
 I IND("SZT")>INP("MAX"),'INDLC S ERR=35,ERR(1)=IND("SZT") D ^XINDX1
"RTN","XINDEX",41,0)
 I IND("SZT")-IND("SZC")>INP("CMAX"),'INDLC S ERR=58,ERR(1)=IND("SZT")-IND("SZC") D ^XINDX1
"RTN","XINDEX",42,0)
 D POSTRTN
"RTN","XINDEX",43,0)
 Q
"RTN","XINDEX",44,0)
 ;Proccess one line, LN = Length, LIN = Line.
"RTN","XINDEX",45,0)
LN K V S (ARG,GRB,IND("COM"),IND("DOL"),IND("F"))="",X=$P(LIN," ")
"RTN","XINDEX",46,0)
 I '$L(X) S LABO=LABO+1 G CD
"RTN","XINDEX",47,0)
 S (IND("COM"),LAB)=$P(X,"("),ARG=$P($P(X,"(",2),")"),LABO=0,IND("PP")=X?1.8E1"(".E1")"
"RTN","XINDEX",48,0)
 D:$L(ARG) NE^XINDX3 ;Process formal parameters as New list.
"RTN","XINDEX",49,0)
 I 'INDLC,'$$VT^XINDX2(LAB) D E^XINDX1($S(LAB=$$CASE^XINDX52(LAB):37,1:55)) ;Check for bad labels
"RTN","XINDEX",50,0)
 I $D(^UTILITY($J,1,RTN,"T",LAB)) D E^XINDX1(15) G CD ;DUP label
"RTN","XINDEX",51,0)
 S ^UTILITY($J,1,RTN,"T",LAB)=""
"RTN","XINDEX",52,0)
CD I LN>245 D:'(LN=246&($E(RTN,1,3)="|dd")) E^XINDX1(19) ;patch 119
"RTN","XINDEX",53,0)
 D:LIN'?1.ANP E^XINDX1(18)
"RTN","XINDEX",54,0)
 S LIN=$P(LIN," ",2,999),IND("LCC")=1
"RTN","XINDEX",55,0)
 I LIN="" D E^XINDX1(42) Q  ;Blank line ;p110
"RTN","XINDEX",56,0)
 S I=0 ;Watch the scope of I, counts dots
"RTN","XINDEX",57,0)
 I " ."[$E(LIN) D  S X=$L($E(LIN,1,I),".")-1,LIN=$E(LIN,I,999)
"RTN","XINDEX",58,0)
 . F I=1:1:245 Q:". "'[$E(LIN,I)
"RTN","XINDEX",59,0)
 . Q
"RTN","XINDEX",60,0)
 ;check dots against Do level IND("DO"), IND("DOL")=dot level
"RTN","XINDEX",61,0)
 D:'I&$G(IND("DO1")) E^XINDX1(51) S IND("DO1")=0 S:'I IND("DO")=0
"RTN","XINDEX",62,0)
 I I D:X>IND("DO") E^XINDX1(51) S (IND("DO"),IND("DOL"))=X
"RTN","XINDEX",63,0)
 ;Count Comment lines, skip ;; lines
"RTN","XINDEX",64,0)
 I $E(LIN)=";",$E(LIN,2)'=";" S IND("SZC")=IND("SZC")+$L(LIN) ;p110
"RTN","XINDEX",65,0)
 ;Process commands on line.
"RTN","XINDEX",66,0)
EE I LIN="" D ^XINDX2 Q
"RTN","XINDEX",67,0)
 S COM=$E(LIN),GK="",ARG=""
"RTN","XINDEX",68,0)
 I COM=";" S LIN="" G EE ;p110
"RTN","XINDEX",69,0)
 I COM=" " S ERR=$S(LIN?1." ":13,1:0),LIN=$S(ERR:"",1:$E(LIN,2,999)) D:ERR ^XINDX1 G EE
"RTN","XINDEX",70,0)
 D SEP
"RTN","XINDEX",71,0)
 S CM=$P(ARG,":",1),POST=$P(ARG,":",2,999),IND("COM")=IND("COM")_$C(9)_COM,ERR=48
"RTN","XINDEX",72,0)
 D:ARG[":"&(POST']"") ^XINDX1 S:POST]"" GRB=GRB_$C(9)_POST,IND("COM")=IND("COM")_":"
"RTN","XINDEX",73,0)
 ;SAC now allows lowercase commands
"RTN","XINDEX",74,0)
 I CM?.E1L.E S CM=$$CASE^XINDX52(CM),COM=$E(CM) ;I IND("LCC") S IND("LCC")=0 D E^XINDX1(47)
"RTN","XINDEX",75,0)
 I CM="" D E^XINDX1(21) G EE ;Missing command
"RTN","XINDEX",76,0)
 S CX=$G(IND("CMD",CM)) I CX="" D  G:CX="" EE
"RTN","XINDEX",77,0)
 . I $E(CM)="Z" S CX="^Z" Q  ;Proccess Z commands
"RTN","XINDEX",78,0)
 . D E^XINDX1(1) S LIN="" Q
"RTN","XINDEX",79,0)
 S CX=$P(CX,"^",2,9)
"RTN","XINDEX",80,0)
 D SEP I '$L(LIN),CH=" " D E^XINDX1(13) ;trailing space
"RTN","XINDEX",81,0)
 I ARG="","CGJMORSUWX"[COM S ERR=49 G ^XINDX1
"RTN","XINDEX",82,0)
 I CX>0 D E^XINDX1(CX) S CX=""
"RTN","XINDEX",83,0)
 D:$L(CX) @CX S:ARG'="" GRB=GRB_$C(9)_ARG G EE
"RTN","XINDEX",84,0)
B S ERR=25 G ^XINDX1
"RTN","XINDEX",85,0)
C S ERR=29 G ^XINDX1
"RTN","XINDEX",86,0)
D G DG1^XINDX4
"RTN","XINDEX",87,0)
E Q:ARG=""  S ERR=7 G ^XINDX1
"RTN","XINDEX",88,0)
F G:ARG]"" FR^XINDX4 S IND("F")=1 Q
"RTN","XINDEX",89,0)
G G DG^XINDX4
"RTN","XINDEX",90,0)
H Q:ARG'=""  S ERR=32 G ^XINDX1
"RTN","XINDEX",91,0)
J S ERR=36,ARG="" G ^XINDX1
"RTN","XINDEX",92,0)
K S ERR=$S(ARG?1"(".E:22,ARG?." ":23,1:0) D:ERR ^XINDX1
"RTN","XINDEX",93,0)
 G KL^XINDX3
"RTN","XINDEX",94,0)
L G LO^XINDX4
"RTN","XINDEX",95,0)
M G S^XINDX3
"RTN","XINDEX",96,0)
N G NE^XINDX3
"RTN","XINDEX",97,0)
O S ERR=34 D ^XINDX1,O^XINDX3 Q
"RTN","XINDEX",98,0)
Q Q:ARG=""  G Q^XINDX4
"RTN","XINDEX",99,0)
R S RDTIME=0 G RD^XINDX3
"RTN","XINDEX",100,0)
S G S^XINDX3
"RTN","XINDEX",101,0)
TR Q  ;What to process. p110
"RTN","XINDEX",102,0)
U S ARG=$S("$"'=$E(ARG):$P(ARG,":"),1:ARG) Q
"RTN","XINDEX",103,0)
V S ARG="",ERR=20 G ^XINDX1
"RTN","XINDEX",104,0)
W G WR^XINDX4
"RTN","XINDEX",105,0)
X G XE^XINDX4
"RTN","XINDEX",106,0)
Z S ERR=2 D ^XINDX1 G ZC^XINDX4
"RTN","XINDEX",107,0)
 ;
"RTN","XINDEX",108,0)
 ;Save off items from line.
"RTN","XINDEX",109,0)
ST S R=LAB_$S(LABO:"+"_LABO,1:"")
"RTN","XINDEX",110,0)
 ;Local variable, Global, Marked Items, Naked global, Internal ref, eXternal ref., Tag ref.
"RTN","XINDEX",111,0)
 S LOC="" F  S LOC=$O(V(LOC)),S="" Q:LOC=""  F  S S=$O(V(LOC,S)) Q:S=""  D SET
"RTN","XINDEX",112,0)
 S ^UTILITY($J,1,RTN,"COM",TXT)=IND("COM")
"RTN","XINDEX",113,0)
 Q
"RTN","XINDEX",114,0)
 ;
"RTN","XINDEX",115,0)
SET I V(LOC,S)]"" F %="!","~" I V(LOC,S)[%,$G(^UTILITY($J,1,RTN,LOC,S))'[% S ^(S)=$G(^(S))_%
"RTN","XINDEX",116,0)
 S %=0
"RTN","XINDEX",117,0)
SE2 S ARG=$G(^UTILITY($J,1,RTN,LOC,S,%)) I $L(ARG)>230 S %=%+1 G SE2
"RTN","XINDEX",118,0)
 S ^UTILITY($J,1,RTN,LOC,S,%)=ARG_R_V(LOC,S)_","
"RTN","XINDEX",119,0)
 Q
"RTN","XINDEX",120,0)
 ;
"RTN","XINDEX",121,0)
POSTRTN ;Do more overall checking
"RTN","XINDEX",122,0)
 N V,E,T,T1,T2
"RTN","XINDEX",123,0)
 S T="" ;Check for missing Labels
"RTN","XINDEX",124,0)
 F  S T=$O(^UTILITY($J,1,RTN,"I",T)),T2=T Q:T=""  S T1=$G(^(T,0)) D
"RTN","XINDEX",125,0)
 . Q:$E(T2,1,2)="@("
"RTN","XINDEX",126,0)
 . S:$E(T2,1,2)="$$" T2=$E(T2,3,99)
"RTN","XINDEX",127,0)
 . I T2]"",'$D(^UTILITY($J,1,RTN,"T",$P(T2,"+",1))) D
"RTN","XINDEX",128,0)
 . . F I=1:1:$L(T1,",")-1 S LAB=$P(T1,",",I),LABO=+$P(LAB,"+",2),LAB=$P(LAB,"+"),E=14,E(1)=T D E^XINDX1(.E)
"RTN","XINDEX",129,0)
 . . Q
"RTN","XINDEX",130,0)
 . Q
"RTN","XINDEX",131,0)
 S LAB="",LABO=0 ;Check for valid label names
"RTN","XINDEX",132,0)
 I 'INDLC F  S LAB=$O(^UTILITY($J,1,RTN,"T",LAB)) Q:LAB=""  D
"RTN","XINDEX",133,0)
 . I '$$VA^XINDX2(LAB) D E^XINDX1(55) Q
"RTN","XINDEX",134,0)
 . D:'$$VT^XINDX2(LAB) E^XINDX1(37)
"RTN","XINDEX",135,0)
 . Q
"RTN","XINDEX",136,0)
 S LAB="",LABO=0 ;Check for valid variable names.
"RTN","XINDEX",137,0)
 F  S LAB=$O(^UTILITY($J,1,RTN,"L",LAB)) Q:LAB=""  D
"RTN","XINDEX",138,0)
 . D VLNF^XINDX3($P(LAB,"("))
"RTN","XINDEX",139,0)
 . Q
"RTN","XINDEX",140,0)
 Q
"RTN","XINDEX",141,0)
 ;
"RTN","XINDEX",142,0)
QUICK ;Quick, Just get a routine an print the results
"RTN","XINDEX",143,0)
 D QUICK^XINDX6()
"RTN","XINDEX",144,0)
 Q
"RTN","XINDX1")
0^2^B21638668
"RTN","XINDX1",1,0)
XINDX1 ;ISC/REL,GRK,RWF - ERROR ROUTINE ;2018-03-01  10:01 AM
"RTN","XINDX1",2,0)
 ;;7.3;TOOLKIT;**20,61,66,68,110,121,128,133,10001**;Apr 25, 1995;Build 4
"RTN","XINDX1",3,0)
 ; Original Routine authored by Department of Veterans Affairs
"RTN","XINDX1",4,0)
 ; 65 added in *10001* by OSEHRA/Sam Habiel in 2018
"RTN","XINDX1",5,0)
 G A
"RTN","XINDX1",6,0)
E(ERR) ;
"RTN","XINDX1",7,0)
A N %,%1 ;TXT is the line of the error.
"RTN","XINDX1",8,0)
 S ERTX=LAB_$S(LABO:"+"_LABO,1:"")_$C(9),%1=$T(ERROR+ERR),ERTX=ERTX_$S(ERR:$P(%1,";",4,9),1:ERR) ;p110
"RTN","XINDX1",9,0)
 I ERTX["|" F %=1:1 S ERTX=$P(ERTX,"|")_$S($D(ERR(%)):ERR(%),1:"??")_$P(ERTX,"|",%+1,99) Q:ERTX'["|"
"RTN","XINDX1",10,0)
 ;check exclude rtn list
"RTN","XINDX1",11,0)
B I $P(%1,";",3)]"" D  Q:%1]""  ;Don't flag kernel doing kernel.
"RTN","XINDX1",12,0)
 . S %1=$P(%1,";",3)
"RTN","XINDX1",13,0)
 . F  Q:RTN[$P(%1,",")  S %1=$P(%1,",",2,99) ;quit if RTN[%1 or null.
"RTN","XINDX1",14,0)
 . Q
"RTN","XINDX1",15,0)
 I ERR=17,$E(RTN)'="%",$E(LAB)="%" Q  ;Don't flag %RTN w/o %.
"RTN","XINDX1",16,0)
 ;Global is Error Line,tab,error tag,tab,error text
"RTN","XINDX1",17,0)
 S %=$G(^UTILITY($J,1,RTN,"E",0))+1,^(0)=%,^(%)=TXT_$C(9)_ERTX
"RTN","XINDX1",18,0)
 Q
"RTN","XINDX1",19,0)
 ;
"RTN","XINDX1",20,0)
 ;F = Fatal, S = Standard, W = Warning, I = Info
"RTN","XINDX1",21,0)
 ;;exclude rtn;error text
"RTN","XINDX1",22,0)
ERROR ;
"RTN","XINDX1",23,0)
1 ;;;F - UNDEFINED COMMAND (rest of line not checked).
"RTN","XINDX1",24,0)
2 ;;X,Z,DI,DD,KMP;F - Non-standard (Undefined) 'Z' command.
"RTN","XINDX1",25,0)
3 ;;X,Z,DI,DD,KMP;F - Undefined Function.
"RTN","XINDX1",26,0)
4 ;;;F - Undefined Special Variable.
"RTN","XINDX1",27,0)
5 ;;;F - Unmatched Parenthesis.
"RTN","XINDX1",28,0)
6 ;;;F - Unmatched Quotation Marks.
"RTN","XINDX1",29,0)
7 ;;;F - ELSE Command followed by only one space.
"RTN","XINDX1",30,0)
8 ;;;F - FOR Command did not contain '='.
"RTN","XINDX1",31,0)
9 ;;;I - QUIT Command followed by only one space.
"RTN","XINDX1",32,0)
10 ;;;F - Unrecognized argument in SET command.
"RTN","XINDX1",33,0)
11 ;;;W - Invalid local variable name.
"RTN","XINDX1",34,0)
12 ;;;W - Invalid global variable name.
"RTN","XINDX1",35,0)
13 ;;;W - Blank(s) at end of line.
"RTN","XINDX1",36,0)
14 ;;;F - Call to missing label '|' in this routine.
"RTN","XINDX1",37,0)
15 ;;;W - Duplicate label. (M57)
"RTN","XINDX1",38,0)
16 ;;;F - Error in pattern code.
"RTN","XINDX1",39,0)
17 ;;Z;W - First line label NOT routine name.
"RTN","XINDX1",40,0)
18 ;;;W - Line contains a CONTROL (non-graphic) character.
"RTN","XINDX1",41,0)
19 ;;;S - Line is longer than 245 bytes.
"RTN","XINDX1",42,0)
20 ;;X,Z,DI,DD,KMP;S - View command used.
"RTN","XINDX1",43,0)
21 ;;;F - General Syntax Error.
"RTN","XINDX1",44,0)
22 ;;X,Z,DI,DD,KMP;S - Exclusive Kill.
"RTN","XINDX1",45,0)
23 ;;X,Z,DI,DD,KMP;S - Unargumented Kill.
"RTN","XINDX1",46,0)
24 ;;;S - Kill of an unsubscripted global.
"RTN","XINDX1",47,0)
25 ;;;S - Break command used.
"RTN","XINDX1",48,0)
26 ;;X,Z,DI,DD,KMP;S - Exclusive or Unargumented NEW command.
"RTN","XINDX1",49,0)
27 ;;X,Z,DI,DD,KMP;S - $View function used.
"RTN","XINDX1",50,0)
28 ;;X,Z,DI,DD,KMP;S - Non-standard $Z special variable used.
"RTN","XINDX1",51,0)
29 ;;X,Z,DI,DD,KMP;S - 'Close' command should be invoked through 'D ^%ZISC'.
"RTN","XINDX1",52,0)
30 ;;;S - LABEL+OFFSET syntax.
"RTN","XINDX1",53,0)
31 ;;X,Z,DI,DD,KMP;S - Non-standard $Z function used.
"RTN","XINDX1",54,0)
32 ;;X,Z,DI,DD,KMP;S - 'HALT' command should be invoked through 'G ^XUSCLEAN'.
"RTN","XINDX1",55,0)
33 ;;X,Z,DI,DD,KMP;S - Read command doesn't have a timeout.
"RTN","XINDX1",56,0)
34 ;;X,Z,DI,DD,KMP;S - 'OPEN' command should be invoked through ^%ZIS.
"RTN","XINDX1",57,0)
35 ;;;S - Routine exceeds SACC maximum size of 20000 (|).
"RTN","XINDX1",58,0)
36 ;;X,Z,DI,DD,KMP;S - Should use 'TASKMAN' instead of 'JOB' command.
"RTN","XINDX1",59,0)
37 ;;;F - Label is not valid.
"RTN","XINDX1",60,0)
38 ;;;F - Call to this |
"RTN","XINDX1",61,0)
39 ;;X,Z,DI;S - Kill of a protected variable (|).
"RTN","XINDX1",62,0)
40 ;;;S - Space where a command should be.
"RTN","XINDX1",63,0)
41 ;;X,Z,DI,DD,KMP;I - Star or pound READ used.
"RTN","XINDX1",64,0)
42 ;;;W - Null line (no commands or comment).
"RTN","XINDX1",65,0)
43 ;;;F - Invalid or wrong number of arguments to a function.
"RTN","XINDX1",66,0)
44 ;;;S - 2nd line of routine violates the SAC.
"RTN","XINDX1",67,0)
45 ;;X,Z,DI,DD,KMP;S - Set to a '%' global.
"RTN","XINDX1",68,0)
46 ;;;F - Quoted string not followed by a separator.
"RTN","XINDX1",69,0)
47 ;;;S - Lowercase command(s) used in line.
"RTN","XINDX1",70,0)
48 ;;;F - Missing argument to a command post-conditional.
"RTN","XINDX1",71,0)
49 ;;;F - Command missing an argument.
"RTN","XINDX1",72,0)
50 ;;Z;S - Extended reference.
"RTN","XINDX1",73,0)
51 ;;;F - Block structure mismatch.
"RTN","XINDX1",74,0)
52 ;;;F - Reference to routine '^|'. That isn't in this UCI.
"RTN","XINDX1",75,0)
53 ;;;F - Bad Number.
"RTN","XINDX1",76,0)
54 ;;X,Z,DI,DD,KMP;S - Access to SSVN's or $SYSTEM restricted to Kernel.
"RTN","XINDX1",77,0)
55 ;;;S - Violates VA programming standards.
"RTN","XINDX1",78,0)
56 ;;;S - Patch number '|' missing from second line.
"RTN","XINDX1",79,0)
57 ;;;S - Lower/Mixed case Variable name used.
"RTN","XINDX1",80,0)
58 ;;;S - Routine code exceeds SACC maximum size of 15000 (|).
"RTN","XINDX1",81,0)
59 ;;;F - Bad WRITE syntax.
"RTN","XINDX1",82,0)
60 ;;X,Z,DI,DD,KMP;S - Lock missing Timeout.
"RTN","XINDX1",83,0)
61 ;;X,Z,DI,DD,KMP;S - Non-Incremental Lock.
"RTN","XINDX1",84,0)
62 ;;;S - First line of routine violates the SAC.
"RTN","XINDX1",85,0)
63 ;;;F - GO or DO mismatch from block structure (M45).
"RTN","XINDX1",86,0)
64 ;;;F - Cache Object doesn't exist.
"RTN","XINDX1",87,0)
65 ;;X,Z,DI,DD,KMP;S - Vendor specific code is not allowed (SACC 2.2.8)
"RTN","XINDX10")
0^3^B133633540
"RTN","XINDX10",1,0)
XINDX10 ;ISC/GRK,KRM/CJE,OSE/SMH - assemble DD executable code ;2018-03-13  10:37 AM
"RTN","XINDX10",2,0)
 ;;7.3;TOOLKIT;**20,27,66,68,132,10001**;Apr 25, 1995;Build 4
"RTN","XINDX10",3,0)
 ; Original routine authored by U.S. Department of Veterans Affairs
"RTN","XINDX10",4,0)
 ; Entry points ASKNS,ASKFILES,N1,F1,NS,FILE,INDX &
"RTN","XINDX10",5,0)
 ; Lines START+1,STRIP+14-16 authored by Christopher Edwards 2017.
"RTN","XINDX10",6,0)
 ; Lines STRIP+16ff, tags ROUTAG,DATA1,AGAIN by Sam Habiel for XINDEXING data 2018.
"RTN","XINDX10",7,0)
ASK ;Ask for Build, Install, or Package file.
"RTN","XINDX10",8,0)
 N X,Y,P,V,RN
"RTN","XINDX10",9,0)
 S DA=0,Y=-1,INP(11)=""
"RTN","XINDX10",10,0)
 S:$D(^DD(9.6,0)) P=9.6,Y=$$BUILD^XTRUTL1 Q:$D(DUOUT)  D:Y>0  I Y<0 S:$D(^DD(9.7,0)) P=9.7,Y=$$INSTALL^XTRUTL1 D:Y>0
"RTN","XINDX10",11,0)
 . S INP(10)=P,DA=+Y,X=$P(Y,"^",2),V=$$VER^XTRUTL1(X)
"RTN","XINDX10",12,0)
 . S INP(11)="I $P(LIN,"";"",3)'["""_V_""" D E^XINDX1(44)",INP(11.1)=V
"RTN","XINDX10",13,0)
 . I $L($P(X,"*",3)) S INP(12)="I $P(LIN,"";"",5)'?.E1P1"""_$P(X,"*",3)_"""1P.E S ERR=56,ERR(1)=INP(12.1) D E^XINDX1(.ERR)",INP(12.1)=$P(X,"*",3)
"RTN","XINDX10",14,0)
 . Q
"RTN","XINDX10",15,0)
 K DIC Q:$D(DUOUT)
"RTN","XINDX10",16,0)
 I $D(^DD(9.4,0)),'DA S DIC="^DIC(9.4,",DIC(0)="AEQMZ" D ^DIC S INP(10)=9.4,DA=+Y
"RTN","XINDX10",17,0)
 D ASKNS,ASKFILES
"RTN","XINDX10",18,0)
 Q
"RTN","XINDX10",19,0)
ASKNS ;Ask for a list of namespaces
"RTN","XINDX10",20,0)
 N NSC,NS
"RTN","XINDX10",21,0)
 W !,"LIST OF NAMESPACES TO BE INDEXED; PRESS RETURN TO TERMINATE LIST",! S NSC=0
"RTN","XINDX10",22,0)
N1 R !,"NAMESPACE: ",NS:$S($G(DTIME):DTIME,1:360) Q:NS=""  Q:NS="^"
"RTN","XINDX10",23,0)
 I NS'?1(1"%",1"!",1"-").UN&(NS'?1U.UN) W "  INVALID NAMESPACE" G N1
"RTN","XINDX10",24,0)
 I NS?1(1"!",1"-").UN S $E(NS,1,1)="!" S NSC=NSC+1,ENAMESPACES($J,NS)=""
"RTN","XINDX10",25,0)
 E  S NSC=NSC+1,NAMESPACES($J,NS)=""
"RTN","XINDX10",26,0)
 S INP(10)="NAMESPACE",DA=1
"RTN","XINDX10",27,0)
 G N1
"RTN","XINDX10",28,0)
 Q
"RTN","XINDX10",29,0)
 ;
"RTN","XINDX10",30,0)
ASKFILES ;Ask for a list of files
"RTN","XINDX10",31,0)
 N FILESC,FILE
"RTN","XINDX10",32,0)
 W !,"LIST OF FILES TO BE INDEXED; PRESS RETURN TO TERMINATE LIST",! S FILESC=0
"RTN","XINDX10",33,0)
F1 R !,"FILE: ",FILE:$S($G(DTIME):DTIME,1:360) Q:FILE=""  Q:FILE="^"
"RTN","XINDX10",34,0)
 I FILE'?1.45UNP&('$D(^DIC(FILE))!'($D(^DIC("B",FILE)))) W "  INVALID FILENAME" G F1
"RTN","XINDX10",35,0)
 ; should only get file number for list, but accept file name or number
"RTN","XINDX10",36,0)
 E  D
"RTN","XINDX10",37,0)
 . ; translate the file name into a number
"RTN","XINDX10",38,0)
 . I FILE'=+FILE S FILE=$O(^DIC("B",FILE,"")) I FILE="" W "  INVALID FILENAME" Q
"RTN","XINDX10",39,0)
 . ; if we have a number then we can add it and continue
"RTN","XINDX10",40,0)
 . S FILESC=FILESC+1,FILES($J,FILE)="" W " ",FILE
"RTN","XINDX10",41,0)
 S INP(10)="NAMESPACE",DA=1
"RTN","XINDX10",42,0)
 G F1
"RTN","XINDX10",43,0)
 Q
"RTN","XINDX10",44,0)
 ;
"RTN","XINDX10",45,0)
START ;called from SETUP^XINDX7
"RTN","XINDX10",46,0)
 G PKG:INP(10)=9.4,NEXT:INP(10)=9.7,NS:INP(10)="NAMESPACE"
"RTN","XINDX10",47,0)
 ;Get routines and other code from BUILD.
"RTN","XINDX10",48,0)
 W !,"The BUILD file Data Dictionaries are being processed.",!
"RTN","XINDX10",49,0)
 F J=0:0 S J=$O(^XPD(9.6,DA,4,J)) Q:J'>0  I $D(^(J,0)) S INDFN=+^(0),INDRN="|dd"_INDFN D XPD
"RTN","XINDX10",50,0)
 G NEXT
"RTN","XINDX10",51,0)
NS W !,"The selected file Data Dictionaries are being processed.",!
"RTN","XINDX10",52,0)
 F J=0:0 S J=$O(FILES($J,J)) Q:J'>0  I $D(^DIC(J,0)) S INDFN=J,INDRN="|dd"_INDFN,(INDF,INDL)=0 D INSERT
"RTN","XINDX10",53,0)
 G NEXT
"RTN","XINDX10",54,0)
PKG W !,"The package file Data Dictionaries are being processed.",!
"RTN","XINDX10",55,0)
 F J=0:0 S J=$O(^DIC(9.4,DA,4,J)) Q:J'>0  I $D(^(J,0)) S INDFN=+^(0),INDRN="|dd"_INDFN,(INDF,INDL)=0 D INSERT
"RTN","XINDX10",56,0)
NEXT D ^XINDX11,REMCOMP:'INP(9) K A,B,C,C9,G,H,INDD,INDEL,INDF,INDFN,INDID,INDL,INDN,INDRN,INDSB,INDX,INDXN,INDXRF,DA,DIC,J,INDLC,INDC
"RTN","XINDX10",57,0)
 Q
"RTN","XINDX10",58,0)
XPD ;Check if Full/Partial DD
"RTN","XINDX10",59,0)
 N IND1,IND222,J2,J3 S IND222=$G(^XPD(9.6,DA,4,J,222))
"RTN","XINDX10",60,0)
 S (INDF,INDL)=0 I $P(IND222,"^",3)="f" K IND222 D INSERT Q
"RTN","XINDX10",61,0)
 ;Each entry at the J2 level is a new file/sub-file.
"RTN","XINDX10",62,0)
 F J2=0:0 S J2=$O(^XPD(9.6,DA,4,J,2,J2)) Q:J2'>0  S IND1=^(J2,0) D
"RTN","XINDX10",63,0)
 . S INDFN=J2,INDRN="|dd"_INDFN,INDLC=0 Q:'$$HDR()
"RTN","XINDX10",64,0)
 . ;Each J3 is a field in the file.
"RTN","XINDX10",65,0)
 . F J3=0:0 S J3=$O(^XPD(9.6,DA,4,J,2,J2,1,J3)) Q:J3'>0  S INDFN=J2,INDF=J3,INDL=0 D STRIP
"RTN","XINDX10",66,0)
 . S ^UTILITY($J,1,INDRN,0,0)=INDLC
"RTN","XINDX10",67,0)
 . Q
"RTN","XINDX10",68,0)
 Q
"RTN","XINDX10",69,0)
HDR() ;Display Header and start faux routine build
"RTN","XINDX10",70,0)
 I '$D(^DD(INDFN)) W !,"File # ",INDFN," is missing !",$C(7) Q 0
"RTN","XINDX10",71,0)
 S ^UTILITY($J,INDRN)="",NRO=NRO+1 W !,INDFN," ",$O(^DD(INDFN,0,"NM",0))
"RTN","XINDX10",72,0)
 S INDLC=0,INDC=INDRN_" ;"_$S($D(IND222):"Partial ",1:"")_"DD of the "_$O(^DD(INDFN,0,"NM",0))_$S(INDL:" sub-",1:" ")_"file"_$S(INDL:" of the "_$O(^DD(INDFN(1),0,"NM",0))_" (#"_INDFN(1)_") file.",1:"."),INDX="" D ADD
"RTN","XINDX10",73,0)
 Q 1
"RTN","XINDX10",74,0)
INSERT ;Find executable code in this DD
"RTN","XINDX10",75,0)
 Q:'$$HDR
"RTN","XINDX10",76,0)
ID S INDID=-1 F G=0:0 S INDID=$O(^DD(INDFN,0,"ID",INDID)) Q:INDID=""  I $D(^(INDID))#2 S INDC="ID"_INDID_" ; IDENTIFIER CODE FOR "_INDID S INDX=$S(^(INDID)]"":^(INDID),1:"Q") D ADD
"RTN","XINDX10",77,0)
W I $D(^DD(INDFN,0,"W"))#2 S INDX=^("W"),INDC="W ; 'W' code ??" D ADD
"RTN","XINDX10",78,0)
FILE ;Get additional File level fields that contain executable code
"RTN","XINDX10",79,0)
 I $D(^DD(INDFN,0,"ACT"))#2 S INDC="ACT ; POST-ACTION",INDX=^("ACT") D ADD
"RTN","XINDX10",80,0)
 I $D(^DD(INDFN,0,"DIC"))#2 S INDC="DIC ; SPECIAL LOOKUP",INDX="D ^"_^("DIC") D ADD
"RTN","XINDX10",81,0)
INDX ;Get New-Style Cross-Reference stored in the INDEX File
"RTN","XINDX10",82,0)
 ;We can get this from the "BB" index on the INDEX file (INDEL is the index name)
"RTN","XINDX10",83,0)
 S INDEL="" F  S INDEL=$O(^DD("IX","BB",INDFN,INDEL)) Q:INDEL=""  D
"RTN","XINDX10",84,0)
 . S X=$Q(^(INDEL)),X=$QS(X,5) ; Naked reference to ^DD("IX","BB",INDFN)
"RTN","XINDX10",85,0)
 . I $D(^DD("IX",X,1))#2 S INDC="IX"_INDEL_"SL ; SET LOGIC",INDX=$E(^DD("IX",X,1),1,245) D ADD
"RTN","XINDX10",86,0)
 . S SUB="" F  S SUB=$O(^DD("IX",X,1.2,SUB)) Q:SUB=""  Q:SUB'=+SUB  I $D(^DD("IX",X,1.2,SUB,1))#2 S INDC="IX"_INDEL_"P"_SUB_"SOF ; OVERFLOW SET LOGIC ("_SUB_")",INDX=$E(^DD("IX",X,1.2,SUB,1),1,245) D ADD
"RTN","XINDX10",87,0)
 . I $D(^DD("IX",X,1.4))#2 S INDC="IX"_INDEL_"SCC ; SET CONDITION CODE",INDX=$E(^DD("IX",X,1.4),1,245) D ADD
"RTN","XINDX10",88,0)
 . I $D(^DD("IX",X,2))#2 S INDC="IX"_INDEL_"KL ; KILL LOGIC",INDX=$E(^DD("IX",X,2),1,245) D ADD
"RTN","XINDX10",89,0)
 . S SUB="" F  S SUB=$O(^DD("IX",X,2.2,SUB)) Q:SUB=""  Q:SUB'=+SUB  I $D(^DD("IX",X,2.2,SUB,2))#2 S INDC="IX"_INDEL_"P"_SUB_"KOF ; OVERFLOW KILL LOGIC ("_SUB_")",INDX=$E(^DD("IX",X,2.2,SUB,2),1,245) D ADD
"RTN","XINDX10",90,0)
 . I $D(^DD("IX",X,2.4))#2 S INDC="IX"_INDEL_"KCC ; KILL CONDITION CODE",INDX=$E(^DD("IX",X,2.4),1,245) D ADD
"RTN","XINDX10",91,0)
 . I $D(^DD("IX",X,2.5))#2 S INDC="IX"_INDEL_"KEIC ; KILL ENTIRE INDEX CODE",INDX=$E(^DD("IX",X,2.5),1,245) D ADD
"RTN","XINDX10",92,0)
 . S SUB="" F  S SUB=$O(^DD("IX",X,11.1,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX10",93,0)
 . . I $D(^DD("IX",X,11.1,SUB,1.5))#2 S INDC="IX"_INDEL_"P"_SUB_"CC ; COMPUTED CODE ("_SUB_")",INDX=$E(^DD("IX",X,11.1,SUB,1.5),1,245) D ADD
"RTN","XINDX10",94,0)
 . . I $D(^DD("IX",X,11.1,SUB,2))#2 S INDC="IX"_INDEL_"P"_SUB_"TS ; TRANSFORM FOR STORAGE ("_SUB_")",INDX=$E(^DD("IX",X,11.1,SUB,2),1,245) D ADD
"RTN","XINDX10",95,0)
 . . I $D(^DD("IX",X,11.1,SUB,4))#2 S INDC="IX"_INDEL_"P"_SUB_"TL ; TRANSFORM FOR LOOKUP ("_SUB_")",INDX=$E(^DD("IX",X,11.1,SUB,4),1,245) D ADD
"RTN","XINDX10",96,0)
 . . I $D(^DD("IX",X,11.1,SUB,3))#2 S INDC="IX"_INDEL_"P"_SUB_"TD ; TRANSFORM FOR DISPLAY ("_SUB_")",INDX=$E(^DD("IX",X,11.1,SUB,3),1,245) D ADD
"RTN","XINDX10",97,0)
FLD S INDF=$O(^DD(INDFN,INDF)) I INDF>0 D STRIP W "." G FLD
"RTN","XINDX10",98,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC Q
"RTN","XINDX10",99,0)
STRIP ;
"RTN","XINDX10",100,0)
 S A=$P(^DD(INDFN,INDF,0),"^",2) I A D PUSH,INSERT,POP Q
"RTN","XINDX10",101,0)
 I A'["W",A'["S" S INDX=$P(^(0),"^",5,99),INDC=INDF_" ; "_$P(^(0),"^",1) D ADD
"RTN","XINDX10",102,0)
 I $D(^DD(INDFN,INDF,2))#2 S INDC=INDF_"OT ; OUTPUT TRANSFORM CODE",INDX=^(2) D ADD
"RTN","XINDX10",103,0)
 I $D(^DD(INDFN,INDF,4))#2 S INDC=INDF_"HELP ; EXECUTABLE HELP CODE",INDX=^(4) D ADD
"RTN","XINDX10",104,0)
 I $D(^DD(INDFN,INDF,12)) S INDC=INDF_"SCR ; "_$E(^(12),1,220) S INDX=$S($D(^(12.1))#2:^(12.1),1:"Q") D ADD
"RTN","XINDX10",105,0)
 I $D(^DD(INDFN,INDF,7.5))#2 S INDC=INDF_"TPL ; TRANSFORM DONE PRIOR TO THE DIC LOOK-UP",INDX=^(7.5) D ADD
"RTN","XINDX10",106,0)
 I $D(^DD(INDFN,INDF,"AX"))#2 S INDC=INDF_"AX ; EXECUTABLE AUDIT CHECK CODE",INDX=^("AX") D ADD
"RTN","XINDX10",107,0)
 F INDEL=9.2:.1:9.9 I $D(^DD(INDFN,INDF,INDEL))#2 S INDC=INDF_"OF"_INDEL_" ; OVERFLOW CODE",INDX=^(INDEL) D ADD
"RTN","XINDX10",108,0)
 S INDEL="" F  S INDEL=$O(^DD(INDFN,INDF,"DEL",INDEL)) Q:INDEL=""  I $D(^(INDEL,0))#2 S INDC=INDF_"DEL"_INDEL_" ; DELETE PROTECTION CODE",INDX=^(0) D ADD
"RTN","XINDX10",109,0)
 S INDEL="" F G=0:0 S INDEL=$O(^DD(INDFN,INDF,"LAYGO",INDEL)) Q:INDEL=""  I $D(^(INDEL,0))#2 S INDC=INDF_"LAYGO"_INDEL_" ; LAYGO CHECK CODE",INDX=^(0) D ADD
"RTN","XINDX10",110,0)
 F INDXRF=0:0 S INDXRF=$O(^DD(INDFN,INDF,1,INDXRF)) Q:INDXRF'>0  S C=$P(^(INDXRF,0),"^",2) F G=0:0 S G=$O(^DD(INDFN,INDF,1,INDXRF,G)) Q:G'>0  D XREFS
"RTN","XINDX10",111,0)
 ; Additional Data Dictionary fields that contain executable code
"RTN","XINDX10",112,0)
 I $D(^DD(INDFN,INDF,12.2)) S INDC=INDF_"SCREXP ; EXPRESSION FOR POINTER SCREEN",INDX=$S($D(^(12.2))#2:^(12.2),1:"Q") D ADD
"RTN","XINDX10",113,0)
 S INDEL="" F  S INDEL=$O(^DD(INDFN,INDF,"V",INDEL)) Q:INDEL=""  I $D(^(INDEL,1))#2 S INDC=INDF_"VPSCR"_INDEL_" ; VARIABLE POINTER SCREEN",INDX=^(1) D ADD
"RTN","XINDX10",114,0)
 ;
"RTN","XINDX10",115,0)
 ; Modifications to XINDEX data *10001* OSE/SMH
"RTN","XINDX10",116,0)
 I A["K" D DATA1(INDFN,INDF) ; OSE/SMH - M code in Data
"RTN","XINDX10",117,0)
 I $P(^DD(INDFN,INDF,0),U)["ROUTINE" D ROUTAG ; OSE/SMH - Routine and tag stored separately
"RTN","XINDX10",118,0)
 ;
"RTN","XINDX10",119,0)
 Q
"RTN","XINDX10",120,0)
 ;
"RTN","XINDX10",121,0)
ROUTAG ; [Private] OSE/SMH *10001* - XINDEX Routine and Tag when stored separately.
"RTN","XINDX10",122,0)
 ; We are at the routine; find the tag in the dd before or after.
"RTN","XINDX10",123,0)
 ; If we can't find the tag, forget about it then.
"RTN","XINDX10",124,0)
 n tagSub
"RTN","XINDX10",125,0)
 n prevSub s prevSub=$O(^DD(INDFN,INDF),-1)
"RTN","XINDX10",126,0)
 n nextSub s nextSub=$O(^DD(INDFN,INDF),+1)
"RTN","XINDX10",127,0)
 D
"RTN","XINDX10",128,0)
 . I prevSub,$P(^DD(INDFN,prevSub,0),U)["TAG" s tagSub=prevSub quit
"RTN","XINDX10",129,0)
 . I nextSub,$P(^DD(INDFN,nextSub,0),U)["TAG" s tagSub=nextSub quit
"RTN","XINDX10",130,0)
 I $g(tagSub)="" quit
"RTN","XINDX10",131,0)
 ; debug
"RTN","XINDX10",132,0)
 ; w "found "_tagSub_" as "_$P(^DD(INDFN,tagSub,0),U),!
"RTN","XINDX10",133,0)
 ; debug
"RTN","XINDX10",134,0)
 d DATA1(INDFN,tagSub,INDF)
"RTN","XINDX10",135,0)
 quit
"RTN","XINDX10",136,0)
 ;
"RTN","XINDX10",137,0)
DATA1(inFile,inField1,inField2) ; [Private] OSE/SMH *10001* - XINDEX data in M fields in the file
"RTN","XINDX10",138,0)
 ; If inFile and inField1 are passed, iField1 is assumed to be an M code field
"RTN","XINDX10",139,0)
 ; If inField1 and inField2 are both passed, inField1 is the tag, and inField2 is the routine.
"RTN","XINDX10",140,0)
 ; First, find the data storage location in the file/subfile
"RTN","XINDX10",141,0)
 n spec1,spec2
"RTN","XINDX10",142,0)
 n sub1,sub2
"RTN","XINDX10",143,0)
 n piece1,piece2
"RTN","XINDX10",144,0)
 n eStart1,eEnd1,eStart2,eEnd2
"RTN","XINDX10",145,0)
 ;
"RTN","XINDX10",146,0)
 ; Field 1
"RTN","XINDX10",147,0)
 s spec1=$P(^DD(inFile,inField1,0),U,4)
"RTN","XINDX10",148,0)
 s sub1=$p(spec1,";",1)
"RTN","XINDX10",149,0)
 s piece1=$p(spec1,";",2)
"RTN","XINDX10",150,0)
 i $e(piece1)="E" s eStart1=$e(piece1,2,$f(piece1,",")-2),eEnd1=$p(piece1,",",2)
"RTN","XINDX10",151,0)
 ;
"RTN","XINDX10",152,0)
 ; Field 2
"RTN","XINDX10",153,0)
 i $g(inField2) d
"RTN","XINDX10",154,0)
 . s spec2=$P(^DD(inFile,inField2,0),U,4)
"RTN","XINDX10",155,0)
 . s sub2=$p(spec2,";",1)
"RTN","XINDX10",156,0)
 . s piece2=$p(spec2,";",2)
"RTN","XINDX10",157,0)
 . i $e(piece2)="E" s eStart2=$e(piece2,2,$f(piece2,",")-2),eEnd2=$p(piece2,",",2)
"RTN","XINDX10",158,0)
 ;
"RTN","XINDX10",159,0)
 ; Walk up the "UP" node to extract all the parents of myself
"RTN","XINDX10",160,0)
 n parents
"RTN","XINDX10",161,0)
 n done s done=0
"RTN","XINDX10",162,0)
 n subfile s subfile=inFile
"RTN","XINDX10",163,0)
 n n s n=0
"RTN","XINDX10",164,0)
 f  d  q:done
"RTN","XINDX10",165,0)
 . i $d(^DD(subfile,0,"UP")) s parents(n)=subfile,subfile=^("UP"),n=n+1
"RTN","XINDX10",166,0)
 . e  s parents(n)=subfile,done=1
"RTN","XINDX10",167,0)
 ;
"RTN","XINDX10",168,0)
 ; Walk down the parents array from the top to the subfile to construct
"RTN","XINDX10",169,0)
 ; the global reference.
"RTN","XINDX10",170,0)
 n globalRef ; We we will store the full global reference; this is constructed in stages
"RTN","XINDX10",171,0)
 n dn s dn=0 ; D level (D0, D1 etc)
"RTN","XINDX10",172,0)
 n ql ; $ql output for each of the levels (where is D0, where is D1)
"RTN","XINDX10",173,0)
 n first s first=1 ; flag for us to grab the top item from ^DIC(fn,0,"gl")
"RTN","XINDX10",174,0)
 ;
"RTN","XINDX10",175,0)
 ; Walk to the parents from the top to the bottom (top numbers are the lowest levels)
"RTN","XINDX10",176,0)
 n n f n=99:0 s n=$o(parents(n),-1) q:n=""  d
"RTN","XINDX10",177,0)
 . n file           s file=parents(n)
"RTN","XINDX10",178,0)
 . ; first entry: get global OREF and close; grab ql(dn) for this level, increment dn
"RTN","XINDX10",179,0)
 . i first s globalRef=^DIC(file,0,"GL")_0_")",first=0,ql(dn)=$ql(globalRef),dn=dn+1
"RTN","XINDX10",180,0)
 . ; Subsequent entries: Get parent, get field from parent, find us under the parent
"RTN","XINDX10",181,0)
 . e  d
"RTN","XINDX10",182,0)
 .. n parentFile s parentFile=parents(n+1)
"RTN","XINDX10",183,0)
 .. n subFileField s subFileField=$o(^DD(parentFile,"SB",file,0))
"RTN","XINDX10",184,0)
 .. n subFileLoc   s subFileLoc=$p(^DD(parentFile,subFileField,0),U,4)
"RTN","XINDX10",185,0)
 .. n sub s sub=$p(subFileLoc,";")
"RTN","XINDX10",186,0)
 .. s globalRef=$na(@globalRef@(sub,0))
"RTN","XINDX10",187,0)
 .. s ql(dn)=$ql(globalRef)
"RTN","XINDX10",188,0)
 .. s dn=dn+1
"RTN","XINDX10",189,0)
 ;
"RTN","XINDX10",190,0)
 ; Go back down one to tell us how many for loops we need to have to traverse
"RTN","XINDX10",191,0)
 s dn=dn-1
"RTN","XINDX10",192,0)
 ;
"RTN","XINDX10",193,0)
 ; Append the subscript of the data to the global location
"RTN","XINDX10",194,0)
 n globalRef1,globalRef2
"RTN","XINDX10",195,0)
 s globalRef1=$na(@globalRef@(sub1))
"RTN","XINDX10",196,0)
 i $g(sub2)]"" s globalRef2=$na(@globalRef@(sub2))
"RTN","XINDX10",197,0)
 ;
"RTN","XINDX10",198,0)
 ; Now traverse the data (using the first global reference)
"RTN","XINDX10",199,0)
 ; If you don't understand the recursive algorithm... neither do I!
"RTN","XINDX10",200,0)
 ; d = data array; l = level; glo = current operations global
"RTN","XINDX10",201,0)
 ; Current global(glo) is the global - 1 from the d level we are working at
"RTN","XINDX10",202,0)
 ; E.g. if d(0) (i.e. D0) is at $ql of 2, we set glo to $ql of 1 so the order
"RTN","XINDX10",203,0)
 ; variable is at $ql of 2
"RTN","XINDX10",204,0)
 n d,l,glo s l=0 s glo=$na(@globalRef1,ql(l)-1)
"RTN","XINDX10",205,0)
 ;
"RTN","XINDX10",206,0)
AGAIN ; Recursive Looper entry point
"RTN","XINDX10",207,0)
 s d(l)=0 ; D0, D1, etc.
"RTN","XINDX10",208,0)
 f  s d(l)=$o(@glo@(d(l))) q:'d(l)  d
"RTN","XINDX10",209,0)
 . ; Is there a subfile under us?
"RTN","XINDX10",210,0)
 . i $d(ql(l+1)) do  quit
"RTN","XINDX10",211,0)
 .. ; push up a stack
"RTN","XINDX10",212,0)
 .. s l=l+1
"RTN","XINDX10",213,0)
 .. ; Keep oldglo just for the next statement after this
"RTN","XINDX10",214,0)
 .. n oldglo s oldglo=glo
"RTN","XINDX10",215,0)
 .. ; Our new looping global is the CURRENT entry (d(l-1)) with the next subscript.
"RTN","XINDX10",216,0)
 .. ; next subscript = Dl subscript (i.e. the value of ql(l)) - 1 in the full global Reference
"RTN","XINDX10",217,0)
 .. n glo s glo=$na(@oldglo@(d(l-1),$qs(globalRef1,ql(l)-1)))
"RTN","XINDX10",218,0)
 .. d AGAIN
"RTN","XINDX10",219,0)
 .. ; pop stack
"RTN","XINDX10",220,0)
 .. s l=l-1
"RTN","XINDX10",221,0)
 . n finalGlo1 s finalGlo1=$na(@glo@(d(l),$qs(globalRef1,$ql(globalRef1))))
"RTN","XINDX10",222,0)
 . n finalGlo2
"RTN","XINDX10",223,0)
 . i $g(globalRef2)]"" s finalGlo2=$na(@glo@(d(l),$qs(globalRef2,$ql(globalRef2))))
"RTN","XINDX10",224,0)
 . i $d(@finalGlo1) d
"RTN","XINDX10",225,0)
 .. ; If we have a routine/tag, it's invalid when either of them is not present!
"RTN","XINDX10",226,0)
 .. i $d(finalGlo2),'$d(@finalGlo2) quit
"RTN","XINDX10",227,0)
 .. ;
"RTN","XINDX10",228,0)
 .. N IENS S IENS=""
"RTN","XINDX10",229,0)
 .. N INDX ; don't work on old data!
"RTN","XINDX10",230,0)
 .. n l s l=""  f  s l=$o(d(l),-1) q:l=""  s IENS=IENS_d(l)_","
"RTN","XINDX10",231,0)
 .. s $e(IENS,$l(IENS))="" ; remove trailing comma
"RTN","XINDX10",232,0)
 .. n datum1,datum2
"RTN","XINDX10",233,0)
 .. i $g(eStart1) s datum1=$e(@finalGlo1,eStart1,eEnd1)
"RTN","XINDX10",234,0)
 .. e  s datum1=$p(@finalGlo1,U,piece1)
"RTN","XINDX10",235,0)
 .. i $d(finalGlo2),$d(@finalGlo2) d
"RTN","XINDX10",236,0)
 ... i $g(eStart2) s datum2=$e(@finalGlo2,eStart2,eEnd2)
"RTN","XINDX10",237,0)
 ... e  s datum2=$p(@finalGlo2,U,piece2)
"RTN","XINDX10",238,0)
 .. i $g(datum2)]"" s INDX=" D "_datum1_U_datum2
"RTN","XINDX10",239,0)
 .. e  i datum1]"" s INDX=datum1
"RTN","XINDX10",240,0)
 .. I $g(INDX)]"" D
"RTN","XINDX10",241,0)
 ... S INDC=INDF_"DATA"_IENS
"RTN","XINDX10",242,0)
 ... s INDC=INDC_" ; Data file "_INDFN_", field "_INDF_", IENS "_IENS
"RTN","XINDX10",243,0)
 ... d ADD
"RTN","XINDX10",244,0)
 . ; debugging - remove later
"RTN","XINDX10",245,0)
 . ; w finalGlo1
"RTN","XINDX10",246,0)
 . ; w:$d(finalGlo2) " ",finalGlo2
"RTN","XINDX10",247,0)
 . ; w !
"RTN","XINDX10",248,0)
 . ; debugging
"RTN","XINDX10",249,0)
 quit
"RTN","XINDX10",250,0)
 ;
"RTN","XINDX10",251,0)
XREFS Q:('$D(^(G))#2)!(G=3)  ;Node 3 is don't delete comment.
"RTN","XINDX10",252,0)
 S INDC=INDF_"XRF"_INDXRF_$S(G=1:"S",G=2:"K",1:"n"_G)_" ; "_$S(G<2:"SET",G<3:"KILL",1:"OVERFLOW")_" LOGIC FOR '"_$S(C]"":C,1:INDXRF)_"' XREF",INDX=^(G) D ADD
"RTN","XINDX10",253,0)
 Q
"RTN","XINDX10",254,0)
ADD ;Put code in UTILITY for processing
"RTN","XINDX10",255,0)
 S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=INDC I INDX]"" S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=" "_INDX
"RTN","XINDX10",256,0)
 Q
"RTN","XINDX10",257,0)
PUSH S INDL=INDL+1 F A="INDFN","INDF","INDLC","INDRN" S @(A_"(INDL)")=@A
"RTN","XINDX10",258,0)
 S INDFN=+$P(^DD(INDFN,INDF,0),"^",2),INDRN="|dd"_INDFN,(INDLC,INDF)=0
"RTN","XINDX10",259,0)
 Q
"RTN","XINDX10",260,0)
POP F A="INDFN","INDF","INDLC","INDRN" S @A=@(A_"(INDL)")
"RTN","XINDX10",261,0)
 S INDL=INDL-1 Q
"RTN","XINDX10",262,0)
REMCOMP ;Remove compiled template routines from selected list
"RTN","XINDX10",263,0)
 S %="|dd"
"RTN","XINDX10",264,0)
 F J=1:1 S %=$O(^UTILITY($J,%)) Q:%'?1"|dd".NP  S INDFN=+$E(%,4,999) I '$D(^DD(INDFN,0,"UP")) F F="^DIE(","^DIPT(" S F1=F_"""F"_INDFN_""",",%1="" F J=0:0 S %1=$O(@(F1_"%1)")) Q:%1=""  F %2=0:0 S %2=$O(@(F1_"%1,%2)")) Q:%2'>0  D P
"RTN","XINDX10",265,0)
 Q
"RTN","XINDX10",266,0)
P I $D(@(F_"%2,0)")) S R=$E($S($D(^("ROU")):^("ROU"),$D(^("ROUOLD")):^("ROUOLD"),1:""),2,999)
"RTN","XINDX10",267,0)
 Q:R=""
"RTN","XINDX10",268,0)
 I $D(^UTILITY($J,R)) K ^UTILITY($J,R)
"RTN","XINDX10",269,0)
 S RN=R F J=0:0 S RN=$O(^UTILITY($J,RN)) Q:RN=""!(RN'?@("1"""_R_"""1N.N"))  K ^UTILITY($J,RN)
"RTN","XINDX10",270,0)
 Q
"RTN","XINDX11")
0^4^B71566341
"RTN","XINDX11",1,0)
XINDX11 ;ISC/GRK - Create phantom routines for functions, options, etc. ;2018-03-01  8:33 AM
"RTN","XINDX11",2,0)
 ;;7.3;TOOLKIT;**20,27,121,132,10001**;Apr 25, 1995;Build 4
"RTN","XINDX11",3,0)
 ; Original routine authored by U.S. Department of Veterans Affairs
"RTN","XINDX11",4,0)
 ; Entrypoints PKG+3ff,LNS,NS,NAME,NAMSP,ADDLN &
"RTN","XINDX11",5,0)
 ; Line XINDX11+8 added by Christopher Edwards
"RTN","XINDX11",6,0)
 ; BUILD,BLDITEM entry point by Sam Habiel
"RTN","XINDX11",7,0)
 G:INP(10)=9.77 RTN
"RTN","XINDX11",8,0)
 W !,"The option and function files are being processed.",!
"RTN","XINDX11",9,0)
 G:INP(10)=9.4 PKG
"RTN","XINDX11",10,0)
 G:INP(10)="NAMESPACE" LNS
"RTN","XINDX11",11,0)
 ;
"RTN","XINDX11",12,0)
BUILD ; Process Build File. Fall through from above.
"RTN","XINDX11",13,0)
 ; ZEXCEPT: INDFN,INDRN,INDD,INDSB,INDXN
"RTN","XINDX11",14,0)
 ; build file ien,Build file,Entry Delimiter
"RTN","XINDX11",15,0)
 N KRN,BLDFIL,BLDDEL
"RTN","XINDX11",16,0)
 ;
"RTN","XINDX11",17,0)
 S BLDDEL=U
"RTN","XINDX11",18,0)
 S BLDFIL=.5,INDFN="^DD(""FUNC"",",INDRN="|func",INDD="Function",INDSB="FUNC",INDXN="Build file" D BLDITEM
"RTN","XINDX11",19,0)
 S BLDFIL=19,INDFN="^DIC(19,",INDRN="|opt",INDD="Option",INDSB="OPT",INDXN="Build file" D BLDITEM
"RTN","XINDX11",20,0)
 ;
"RTN","XINDX11",21,0)
 ; OSE/SMH - New with *10001*
"RTN","XINDX11",22,0)
 S BLDDEL="    "
"RTN","XINDX11",23,0)
 S BLDFIL=.401,INDFN="^DIBT(",INDRN="|sort",INDD="Sort Template",INDSB="SORT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",24,0)
 S BLDFIL=.402,INDFN="^DIE(",INDRN="|inpt",INDD="Input Template",INDSB="INPUT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",25,0)
 S BLDFIL=.4,INDFN="^DIPT(",INDRN="|prnt",INDD="Print Template",INDSB="PRINT^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",26,0)
 S BLDFIL=.403,INDFN="^DIST(.403,",INDRN="|form",INDD="Form",INDSB="FORM^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",27,0)
 S BLDDEL=U
"RTN","XINDX11",28,0)
 S BLDFIL=.84,INDFN="^DI(.84,",INDRN="|dlg",INDD="Dialog",INDSB="DIALOG^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",29,0)
 S BLDFIL=9.2,INDFN="^DIC(9.2,",INDRN="|help",INDD="Help Frame",INDSB="HELP^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",30,0)
 S BLDFIL=19.1,INDFN="^DIC(19.1,",INDRN="|key",INDD="Security Key",INDSB="KEY^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",31,0)
 S BLDFIL=409.61,INDFN="^SD(409.61,",INDRN="|list",INDD="List Template",INDSB="LIST^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",32,0)
 S BLDFIL=101,INDFN="^ORD(101,",INDRN="|ptcl",INDD="Protocol",INDSB="PROTOCOL^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",33,0)
 S BLDFIL=771,INDFN="^HL(771,",INDRN="|hlap",INDD="HL7 Application Parameter",INDSB="HL7AP^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",34,0)
 S BLDFIL=8994,INDFN="^XWB(8994,",INDRN="|rpc",INDD="Remote Procedure",INDSB="RPC^XINDX12",INDXN="Build file" D BLDITEM
"RTN","XINDX11",35,0)
 ; /New with *10001*
"RTN","XINDX11",36,0)
 ;
"RTN","XINDX11",37,0)
RTN ;Routines (fallthrough)
"RTN","XINDX11",38,0)
 ;F KRN=0:0 S KRN=$O(^XPD(9.6,INDDA,"KRN",9.8,"NM",KRN)) Q:KRN'>0  S X=^(KRN,0) I '$P(X,U,3) S ^UTILITY($J,$P(X,U))=""
"RTN","XINDX11",39,0)
 I $T(RTN^XTRUTL1)]"" D RTN^XTRUTL1(INDDA,INP(10))
"RTN","XINDX11",40,0)
 Q
"RTN","XINDX11",41,0)
 ;
"RTN","XINDX11",42,0)
 ; New with *10001*
"RTN","XINDX11",43,0)
BLDITEM ; [Private] Process Each Build item in build file
"RTN","XINDX11",44,0)
 D HDR
"RTN","XINDX11",45,0)
 F KRN=0:0 S KRN=$O(^XPD(9.6,INDDA,"KRN",BLDFIL,"NM",KRN)) Q:KRN'>0  S (INDL,INDXN)=$P(^(KRN,0),BLDDEL) D ENTRY
"RTN","XINDX11",46,0)
 I INDLC=2 K ^UTILITY($J,INDRN),^UTILITY($J,1,INDRN) ;patch 121
"RTN","XINDX11",47,0)
 QUIT
"RTN","XINDX11",48,0)
 ; /New with *10001*
"RTN","XINDX11",49,0)
 ;
"RTN","XINDX11",50,0)
PKG D NAMSP ;Package file
"RTN","XINDX11",51,0)
 S INDFN="^DD(""FUNC"",",INDRN="|func",INDD="Function",INDSB="FUNC" D NAME
"RTN","XINDX11",52,0)
 S INDFN="^DIC(19,",INDRN="|opt",INDD="Option",INDSB="OPT" D NAME
"RTN","XINDX11",53,0)
 ; CJE Add more build components that chan have MUMPS Code
"RTN","XINDX11",54,0)
 S INDFN="^DIBT(",INDRN="|sort",INDD="Sort Template",INDSB="SORT^XINDX12" D NAME
"RTN","XINDX11",55,0)
 S INDFN="^DIE(",INDRN="|inpt",INDD="Input Template",INDSB="INPUT^XINDX12" D NAME
"RTN","XINDX11",56,0)
 S INDFN="^DIPT(",INDRN="|prnt",INDD="Print Template",INDSB="PRINT^XINDX12" D NAME
"RTN","XINDX11",57,0)
 S INDFN="^DIST(.403,",INDRN="|form",INDD="Form",INDSB="FORM^XINDX12" D NAME
"RTN","XINDX11",58,0)
 S INDFN="^DI(.84,",INDRN="|dlg",INDD="Dialog",INDSB="DIALOG^XINDX12" D NAME
"RTN","XINDX11",59,0)
 S INDFN="^DIC(9.2,",INDRN="|help",INDD="Help Frame",INDSB="HELP^XINDX12" D NAME
"RTN","XINDX11",60,0)
 S INDFN="^DIC(19.1,",INDRN="|key",INDD="Security Key",INDSB="KEY^XINDX12" D NAME
"RTN","XINDX11",61,0)
 S INDFN="^SD(409.61,",INDRN="|list",INDD="List Template",INDSB="LIST^XINDX12" D NAME
"RTN","XINDX11",62,0)
 S INDFN="^ORD(101,",INDRN="|ptcl",INDD="Protocol",INDSB="PROTOCOL^XINDX12" D NAME
"RTN","XINDX11",63,0)
 S INDFN="^HL(771,",INDRN="|hlap",INDD="HL7 Application Parameter",INDSB="HL7AP^XINDX12" D NAME
"RTN","XINDX11",64,0)
 S INDFN="^XWB(8994,",INDRN="|rpc",INDD="Remote Procedure",INDSB="RPC^XINDX12" D NAME
"RTN","XINDX11",65,0)
 Q
"RTN","XINDX11",66,0)
LNS S INDXN="NAMESPACE" ; Defined list of namespaces
"RTN","XINDX11",67,0)
 S INDFN="^DD(""FUNC"",",INDRN="|func",INDD="Function",INDSB="FUNC" D NS
"RTN","XINDX11",68,0)
 S INDFN="^DIC(19,",INDRN="|opt",INDD="Option",INDSB="OPT" D NS
"RTN","XINDX11",69,0)
 S INDFN="^DIBT(",INDRN="|sort",INDD="Sort Template",INDSB="SORT^XINDX12" D NS
"RTN","XINDX11",70,0)
 S INDFN="^DIE(",INDRN="|inpt",INDD="Input Template",INDSB="INPUT^XINDX12" D NS
"RTN","XINDX11",71,0)
 S INDFN="^DIPT(",INDRN="|prnt",INDD="Print Template",INDSB="PRINT^XINDX12" D NS
"RTN","XINDX11",72,0)
 S INDFN="^DIST(.403,",INDRN="|form",INDD="Form",INDSB="FORM^XINDX12" D NS
"RTN","XINDX11",73,0)
 S INDFN="^DI(.84,",INDRN="|dlg",INDD="Dialog",INDSB="DIALOG^XINDX12" D NS
"RTN","XINDX11",74,0)
 S INDFN="^DIC(9.2,",INDRN="|help",INDD="Help Frame",INDSB="HELP^XINDX12" D NS
"RTN","XINDX11",75,0)
 S INDFN="^DIC(19.1,",INDRN="|key",INDD="Security Key",INDSB="KEY^XINDX12" D NS
"RTN","XINDX11",76,0)
 S INDFN="^SD(409.61,",INDRN="|list",INDD="List Template",INDSB="LIST^XINDX12" D NS
"RTN","XINDX11",77,0)
 S INDFN="^ORD(101,",INDRN="|ptcl",INDD="Protocol",INDSB="PROTOCOL^XINDX12" D NS
"RTN","XINDX11",78,0)
 S INDFN="^HL(771,",INDRN="|hlap",INDD="HL7 Application Parameter",INDSB="HL7AP^XINDX12" D NS
"RTN","XINDX11",79,0)
 S INDFN="^XWB(8994,",INDRN="|rpc",INDD="Remote Procedure",INDSB="RPC^XINDX12" D NS
"RTN","XINDX11",80,0)
 K NAMESPACES,ENAMESPACES,FILES
"RTN","XINDX11",81,0)
 Q
"RTN","XINDX11",82,0)
NS ;Index based on a list of namespaces
"RTN","XINDX11",83,0)
 Q:'$D(@(INDFN_"""B"")"))  ; Don't run if there isn't a B cross reference
"RTN","XINDX11",84,0)
 D HDR ; Add Header in the style of |{component} ; '{Namespace}' {Filename as defined above}s. With a comment line below.
"RTN","XINDX11",85,0)
 N EXCLUDE,ISNOTEXCLUDED,PROCESSEDIENS
"RTN","XINDX11",86,0)
 F  S INDXN=$O(NAMESPACES($J,INDXN)) Q:INDXN=""  D
"RTN","XINDX11",87,0)
 . S INDL=$E(INDXN,1,$L(INDXN)-1)_$C($A(INDXN,$L(INDXN))-1)_"z" ; get the last letter of the prefix(INDXN) and get the previous letter (B=A), then append "z" to the end
"RTN","XINDX11",88,0)
 . F A=0:0 S INDL=$O(@(INDFN_"""B"",INDL)")) Q:$P(INDL,INDXN,1)]""!(INDL="")  D  ; Order through the B index of the given file. If it nolonger matches the prefix or we hit the end of the B index quit
"RTN","XINDX11",89,0)
 . . F B=0:0 S B=$O(@(INDFN_"""B"",INDL,B)")) Q:B=""  D  ; For each IEN in the B index
"RTN","XINDX11",90,0)
 . . . I $D(@(INDFN_"""B"",INDL,B)"))=10 W !,"SKIPPING SYNONYM "_INDL Q
"RTN","XINDX11",91,0)
 . . . I $D(PROCESSEDIENS(B)) Q
"RTN","XINDX11",92,0)
 . . . S PROCESSEDIENS(B)=""
"RTN","XINDX11",93,0)
 . . . S ISNOTEXCLUDED=1 S EXCLUDE="" F  S EXCLUDE=$O(ENAMESPACES($J,EXCLUDE)) Q:EXCLUDE=""  I $P(INDL,$E(EXCLUDE,2,$L(EXCLUDE)))="" S ISNOTEXCLUDED=0 Q
"RTN","XINDX11",94,0)
 . . . D:ISNOTEXCLUDED @INDSB ; cross reference it
"RTN","XINDX11",95,0)
 I INDLC=2 K ^UTILITY($J,INDRN),^UTILITY($J,1,INDRN) Q  ; If there is only a header delete the faux routine
"RTN","XINDX11",96,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC ; set the number of lines in the routine where the output will find it
"RTN","XINDX11",97,0)
 Q
"RTN","XINDX11",98,0)
NAME ; Index based on package file
"RTN","XINDX11",99,0)
 Q:'$D(@(INDFN_"""B"")"))  ; Don't run if there isn't a B cross reference
"RTN","XINDX11",100,0)
 D HDR ; Add Header in the style of |{component} ; '{Namespace}' {Filename as defined above}s. With a comment line below.
"RTN","XINDX11",101,0)
 S INDL=$E(INDXN,1,$L(INDXN)-1)_$C($A(INDXN,$L(INDXN))-1)_"z" ; get the last letter of the prefix and get the previous letter (B=A), then append "z" to the end
"RTN","XINDX11",102,0)
 F A=0:0 S INDL=$O(@(INDFN_"""B"",INDL)")) Q:$P(INDL,INDXN,1)]""!(INDL="")  D  ; Order through the B index of the given file. If it nolonger matches the prefix or we hit the end of the B index quit
"RTN","XINDX11",103,0)
 . F B=0:0 S B=$O(@(INDFN_"""B"",INDL,B)")) Q:B=""  D  ; For each IEN in the B index
"RTN","XINDX11",104,0)
 . . X INDF ; Make sure it isn't an excluded namespace
"RTN","XINDX11",105,0)
 . . D:C8 @INDSB ; If it isn't an excluded namesapce cross reference it
"RTN","XINDX11",106,0)
 I INDLC=2 K ^UTILITY($J,INDRN),^UTILITY($J,1,INDRN) Q  ; If there is only a header delete the faux routine
"RTN","XINDX11",107,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC ; set the number of lines in the routine where the output will find it
"RTN","XINDX11",108,0)
 Q
"RTN","XINDX11",109,0)
NAMSP ; Setup processing for Indexing based on package file
"RTN","XINDX11",110,0)
 S INDXN=$P(^DIC(9.4,DA,0),"^",2) ; PREFIX (#1) from Package File
"RTN","XINDX11",111,0)
 S C9=0 ; Subscript for INDXN
"RTN","XINDX11",112,0)
 S INDXN(C9)="," ; 0th subscript is always ","
"RTN","XINDX11",113,0)
 F A=0:0 S A=$O(^DIC(9.4,DA,"EX",A)) Q:A'>0  D  ; For each excluded name space in the package file
"RTN","XINDX11",114,0)
 . I $D(^(A,0))#2 D  ; If there is an excluded namespace value
"RTN","XINDX11",115,0)
 . . S C9=C9+1 ; increment the counter
"RTN","XINDX11",116,0)
 . . S INDXN(C9)=$P(^(0),"^") ; set INDXN(COUNTER)=excluded namespace
"RTN","XINDX11",117,0)
 S INDF="S C8=1 F H=1:1:C9 I $P(INDL,INDXN(H))="""" S C8=0 Q" ; Checks excluded namespaces
"RTN","XINDX11",118,0)
 Q
"RTN","XINDX11",119,0)
HDR S INDLC=0,INDC=INDRN_" ; '"_INDXN_"' "_INDD_"s.",INDX=";" D ADD S ^UTILITY($J,INDRN)="",^UTILITY($J,1,INDRN,0,0)=0
"RTN","XINDX11",120,0)
 Q
"RTN","XINDX11",121,0)
ENTRY F B=0:0 S B=$O(@(INDFN_"""B"",INDXN,B)")) Q:B=""  D @INDSB
"RTN","XINDX11",122,0)
 S ^UTILITY($J,1,INDRN,0,0)=INDLC
"RTN","XINDX11",123,0)
 Q
"RTN","XINDX11",124,0)
FUNC ;Process Function file entry
"RTN","XINDX11",125,0)
 Q:'($D(^DD("FUNC",B,0))#2)  S INDC=B_" ; "_$P(^(0),"^",1)_" - "_$S($D(^(9))#2:$E(^(9),1,190),1:""),INDX=$S($D(^(1))#2:^(1),1:";") D ADD
"RTN","XINDX11",126,0)
 Q
"RTN","XINDX11",127,0)
OPT ;Process option file entry for MUMPS code
"RTN","XINDX11",128,0)
 Q:'$D(^DIC(19,B,0))  S T=$P(^(0),"^",4),INDC=B_" ; "_$P(^(0),"^",1)_" - "_$P(^(0),"^",2)_" ("_$P($P($P(^DD(19,4,0),"^",3),T_":",2),";",1)_")"_$S($P(^DIC(19,B,0),"^",6)]"":" - Locked by "_$P(^(0),"^",6),1:""),INDX="" D ADD
"RTN","XINDX11",129,0)
 S INDN="15,20,26,"_$S(T="E":"34,35,54",T="I":"34,35",T="P":"69,69.1,69.2,69.3,71,72,73",T="R":25,1:"") D OPTC:INDN
"RTN","XINDX11",130,0)
 Q
"RTN","XINDX11",131,0)
OPTC F J=1:1 S H=$P(INDN,",",J) Q:H=""  I $D(^DIC(19,B,H))#2 D
"RTN","XINDX11",132,0)
 . S %=^(H),INDX=$S(H'=25:%,1:"D "_$E("^",%'["^")_$P(%,"[")),INDC=" ; "_$P(^DD(19,H,0),"^",1) D ADD
"RTN","XINDX11",133,0)
 Q
"RTN","XINDX11",134,0)
ADD ;Put code in UTILITY for processing
"RTN","XINDX11",135,0)
 S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=INDC I INDX]"" S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=" "_INDX
"RTN","XINDX11",136,0)
 Q
"RTN","XINDX11",137,0)
ADDLN ;
"RTN","XINDX11",138,0)
 S INDLC=INDLC+1,^UTILITY($J,1,INDRN,0,INDLC,0)=" "_INDX
"RTN","XINDX11",139,0)
 Q
"RTN","XINDX12")
0^5^B99595417
"RTN","XINDX12",1,0)
XINDX12 ;OSEHRA/CJE - Create phantom routines for build components ;2018-03-01  8:37 AM
"RTN","XINDX12",2,0)
 ;;7.3;TOOLKIT;**10001**;Apr 25, 1995;Build 4
"RTN","XINDX12",3,0)
 ; Entire routine authored by Chirstopher Edwards
"RTN","XINDX12",4,0)
 ;
"RTN","XINDX12",5,0)
 ; Variables passed through the stack:
"RTN","XINDX12",6,0)
 ; B = {IEN}
"RTN","XINDX12",7,0)
 ; INDLC = {counter}
"RTN","XINDX12",8,0)
 ; INDRN = {faux routine prefix}
"RTN","XINDX12",9,0)
 ; INDC = {IEN} ; {NAME} - {DISPLAY NAME}
"RTN","XINDX12",10,0)
 ; INDX = {code to be XINDEXED}
"RTN","XINDX12",11,0)
 ; INDL = {NAME field (.01) of IEN}
"RTN","XINDX12",12,0)
 ;
"RTN","XINDX12",13,0)
 ; FAUX Routine Structure
"RTN","XINDX12",14,0)
 ; ^UTILITY($J,1,INDRN,0,INDLC,0)={Field Name (INDC)}
"RTN","XINDX12",15,0)
 ; ^UTILITY($J,1,INDRN,0,INDLC+1,0)={MUMPS Code (INDX)}
"RTN","XINDX12",16,0)
 ;
"RTN","XINDX12",17,0)
SORT ;Process Sort Templates
"RTN","XINDX12",18,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",19,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",20,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",21,0)
 ; .401      1815   ROUTINE INVOKED                  ^DIBT(D0,ROU)
"RTN","XINDX12",22,0)
 ; .401      1816   PREVIOUS ROUTINE INVOKED         ^DIBT(D0,ROUOLD)
"RTN","XINDX12",23,0)
 ; .4014     10     GET CODE                         ^DIBT(D0,2,D1,GET)                   Part of Sort Field Data Subfile
"RTN","XINDX12",24,0)
 ; .4014     11     QUERY CONDITION                  ^DIBT(D0,2,D1,QCON)                  Part of Sort Field Data Subfile
"RTN","XINDX12",25,0)
 ; .4014     16     COMPUTED FIELD CODE              ^DIBT(D0,2,D1,CM)                    Part of Sort Field Data Subfile
"RTN","XINDX12",26,0)
 ; .4014     20     SUBHEADER OUTPUT                 ^DIBT(D0,2,D1,OUT)                   Part of Sort Field Data Subfile
"RTN","XINDX12",27,0)
 ; .401418   5      RELATIONAL CODE                  ^DIBT(D0,2,D1,2,D2,RCOD)             Part of Relational Jump Field Data Subfile
"RTN","XINDX12",28,0)
 ; .401419   2      OVERFLOW CODE                    ^DIBT(D0,2,D1,3,D2,OVF0)             Part of Overflow Data Subfile
"RTN","XINDX12",29,0)
 ; .4011624  4      DISPAR(0,n,OUT)                  ^DIBT(D0,BY0D,D1,2)                  Part of Sort Range Data For BY(0)
"RTN","XINDX12",30,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",31,0)
 W !,"Processing Sort Templates",!
"RTN","XINDX12",32,0)
 S INDX=$S($L($P($G(^DIBT(B,"ROU")),U,1)):"D ^"_$P($G(^DIBT(B,"ROU")),U,1),1:";")
"RTN","XINDX12",33,0)
 S INDC=B_" ; "_INDL_" - ROUTINE INVOKED (#1815)"
"RTN","XINDX12",34,0)
 D ADD^XINDX11
"RTN","XINDX12",35,0)
 ;
"RTN","XINDX12",36,0)
 S INDX=$S($L($P($G(^DIBT(B,"ROUOLD")),U,1)):"D ^"_$P($G(^DIBT(B,"ROUOLD")),U,1),1:";")
"RTN","XINDX12",37,0)
 S INDC=" ; "_INDL_" - PREVIOUS ROUTINE INVOKED (#1816)"
"RTN","XINDX12",38,0)
 D ADD^XINDX11
"RTN","XINDX12",39,0)
 ;
"RTN","XINDX12",40,0)
 N SUB,SUB2
"RTN","XINDX12",41,0)
 S (SUB,SUB2)=""
"RTN","XINDX12",42,0)
 F  S SUB=$O(^DIBT(B,2,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",43,0)
 . S INDX=$S($L($P($G(^DIBT(B,2,SUB,"GET")),U,1)):$G(^DIBT(B,2,SUB,"GET")),1:";")
"RTN","XINDX12",44,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - GET CODE (#10) - "_SUB
"RTN","XINDX12",45,0)
 . D ADD^XINDX11
"RTN","XINDX12",46,0)
 . ;
"RTN","XINDX12",47,0)
 . S INDX=$S($L($P($G(^DIBT(B,2,SUB,"QCON")),U,1)):$G(^DIBT(B,2,SUB,"QCON")),1:";")
"RTN","XINDX12",48,0)
 . S INDC=" ; "_INDL_" - QUERY CONDITION (#11) - "_SUB
"RTN","XINDX12",49,0)
 . D ADD^XINDX11
"RTN","XINDX12",50,0)
 . ;
"RTN","XINDX12",51,0)
 . S INDX=$S($L($P($G(^DIBT(B,2,SUB,"CM")),U,1)):$G(^DIBT(B,2,SUB,"CM")),1:";")
"RTN","XINDX12",52,0)
 . S INDC=" ; "_INDL_" - COMPUTED FIELD CODE (#16) - "_SUB
"RTN","XINDX12",53,0)
 . D ADD^XINDX11
"RTN","XINDX12",54,0)
 . ;
"RTN","XINDX12",55,0)
 . S INDX=$S($L($P($G(^DIBT(B,2,SUB,"OUT")),U,1)):$G(^DIBT(B,2,SUB,"OUT")),1:";")
"RTN","XINDX12",56,0)
 . S INDC=" ; "_INDL_" - SUBHEADER OUTPUT (#20) - "_SUB
"RTN","XINDX12",57,0)
 . D ADD^XINDX11
"RTN","XINDX12",58,0)
 . ;
"RTN","XINDX12",59,0)
 . F  S SUB2=$O(^DIBT(B,2,SUB,2,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",60,0)
 . . S INDX=$S($L($P($G(^DIBT(B,2,SUB,2,SUB2,"RCOD")),U,1)):$G(^DIBT(B,2,SUB,2,SUB2,"RCOD")),1:";")
"RTN","XINDX12",61,0)
 . . S INDC=B_"RCOD"_SUB_"P"_SUB2_" ; "_INDL_" - RELATIONAL CODE (#5) - "_SUB_" - "_SUB2
"RTN","XINDX12",62,0)
 . . D ADD^XINDX11
"RTN","XINDX12",63,0)
 . ;
"RTN","XINDX12",64,0)
 . S SUB2=""
"RTN","XINDX12",65,0)
 . F  S SUB2=$O(^DIBT(B,2,SUB,3,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",66,0)
 . . S INDX=$S($L($P($G(^DIBT(B,2,SUB,3,SUB2,"OVF0")),U,1)):$G(^DIBT(B,2,SUB,3,SUB2,"OVF0")),1:";")
"RTN","XINDX12",67,0)
 . . S INDC=B_"OVF0"_SUB_"P"_SUB2_" ; "_INDL_" - OVERFLOW CODE (#2) - "_SUB_" - "_SUB2
"RTN","XINDX12",68,0)
 . . D ADD^XINDX11
"RTN","XINDX12",69,0)
 ;
"RTN","XINDX12",70,0)
 S SUB=""
"RTN","XINDX12",71,0)
 F  S SUB=$O(^DIBT(B,"BY0D",SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",72,0)
 . S INDX=$S($L($P($G(^DIBT(B,"BY0D",SUB,2)),U,1)):$G(^DIBT(B,"BY0D",SUB,2)),1:";")
"RTN","XINDX12",73,0)
 . S INDC=B_"BY0D"_SUB_" ; "_INDL_" - DISPAR (#4) - "_SUB
"RTN","XINDX12",74,0)
 . D ADD^XINDX11
"RTN","XINDX12",75,0)
 Q
"RTN","XINDX12",76,0)
 ; Input and Print templates are implemented in XINDX13
"RTN","XINDX12",77,0)
 ; The executable code doesn't have defined field numbers in the DD,
"RTN","XINDX12",78,0)
 ; So we put all of the lines together as "EXECUTABLE CODE"
"RTN","XINDX12",79,0)
 ; Thanks to Sam Habiel for the implementation requried to support this.
"RTN","XINDX12",80,0)
INPUT ; Input Templates
"RTN","XINDX12",81,0)
 W !,"Processing Input Templates",!
"RTN","XINDX12",82,0)
 S INDC=B_" ; "_INDL_" - EXECUTABLE CODE"
"RTN","XINDX12",83,0)
 D ADD^XINDX11
"RTN","XINDX12",84,0)
 D DIETM^XINDX13
"RTN","XINDX12",85,0)
 Q
"RTN","XINDX12",86,0)
PRINT ; Print Templates
"RTN","XINDX12",87,0)
 W !,"Processing Print Templates",!
"RTN","XINDX12",88,0)
 S INDC=B_" ; "_INDL_" - EXECUTABLE CODE"
"RTN","XINDX12",89,0)
 D ADD^XINDX11
"RTN","XINDX12",90,0)
 D DIPTM^XINDX13
"RTN","XINDX12",91,0)
 Q
"RTN","XINDX12",92,0)
FORM ;Process Forms
"RTN","XINDX12",93,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",94,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",95,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",96,0)
 ; .403      11     PRE ACTION                       ^DIST(.403,D0,11)
"RTN","XINDX12",97,0)
 ; .403      12     POST ACTION                      ^DIST(.403,D0,12)
"RTN","XINDX12",98,0)
 ; .403      14     POST SAVE                        ^DIST(.403,D0,14)
"RTN","XINDX12",99,0)
 ; .403      20     DATA VALIDATION                  ^DIST(.403,D0,20)
"RTN","XINDX12",100,0)
 ; .4031     11     PRE ACTION                       ^DIST(.403,D0,40,D1,11)
"RTN","XINDX12",101,0)
 ; .4031     12     POST ACTION                      ^DIST(.403,D0,40,D1,12)
"RTN","XINDX12",102,0)
 ; .4032     11     PRE ACTION                       ^DIST(.403,D0,40,D1,40,D2,11)
"RTN","XINDX12",103,0)
 ; .4032     12     POST ACTION                      ^DIST(.403,D0,40,D1,40,D2,12)
"RTN","XINDX12",104,0)
 ; .4032     98     COMPUTED MULTIPLE                ^DIST(.403,D0,40,D1,40,D2,COMP MUL)
"RTN","XINDX12",105,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",106,0)
 W !,"Processing Forms",!
"RTN","XINDX12",107,0)
 S INDX=$S($L($P($G(^DIST(.403,B,11)),U,1)):$P($G(^DIST(.403,B,11)),U,1),1:";")
"RTN","XINDX12",108,0)
 S INDC=B_" ; "_INDL_" - PRE ACTION (#11)"
"RTN","XINDX12",109,0)
 D ADD^XINDX11
"RTN","XINDX12",110,0)
 ;
"RTN","XINDX12",111,0)
 S INDX=$S($L($P($G(^DIST(.403,B,12)),U,1)):$P($G(^DIST(.403,B,12)),U,1),1:";")
"RTN","XINDX12",112,0)
 S INDC=" ; "_INDL_" - POST ACTION (#12)"
"RTN","XINDX12",113,0)
 D ADD^XINDX11
"RTN","XINDX12",114,0)
 ;
"RTN","XINDX12",115,0)
 S INDX=$S($L($P($G(^DIST(.403,B,14)),U,1)):$P($G(^DIST(.403,B,14)),U,1),1:";")
"RTN","XINDX12",116,0)
 S INDC=" ; "_INDL_" - POST SAVE (#14)"
"RTN","XINDX12",117,0)
 D ADD^XINDX11
"RTN","XINDX12",118,0)
 ;
"RTN","XINDX12",119,0)
 S INDX=$S($L($P($G(^DIST(.403,B,20)),U,1)):$P($G(^DIST(.403,B,20)),U,1),1:";")
"RTN","XINDX12",120,0)
 S INDC=" ; "_INDL_" - DATA VALIDATION (#20)"
"RTN","XINDX12",121,0)
 D ADD^XINDX11
"RTN","XINDX12",122,0)
 ;
"RTN","XINDX12",123,0)
 N SUB,SUB2
"RTN","XINDX12",124,0)
 S (SUB,SUB2)=""
"RTN","XINDX12",125,0)
 F  S SUB=$O(^DIST(.403,B,40,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",126,0)
 . S INDX=$S($L($P($G(^DIST(.403,B,40,SUB,11)),U,1)):$P($G(^DIST(.403,B,40,SUB,11)),U,1),1:";")
"RTN","XINDX12",127,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - PRE ACTION FILE (#.4031) FIELD (#11) - "_SUB
"RTN","XINDX12",128,0)
 . D ADD^XINDX11
"RTN","XINDX12",129,0)
 . ;
"RTN","XINDX12",130,0)
 . S INDX=$S($L($P($G(^DIST(.403,B,40,SUB,12)),U,1)):$P($G(^DIST(.403,B,40,SUB,12)),U,1),1:";")
"RTN","XINDX12",131,0)
 . S INDC=" ; "_INDL_" - POST ACTION FILE (#.4031) FIELD (#12) - "_SUB
"RTN","XINDX12",132,0)
 . D ADD^XINDX11
"RTN","XINDX12",133,0)
 . ;
"RTN","XINDX12",134,0)
 . F  S SUB2=$O(^DIST(.403,B,40,SUB,40,SUB2)) Q:SUB2=""  Q:SUB2'=+SUB2  D
"RTN","XINDX12",135,0)
 . . S INDX=$S($L($P($G(^DIST(.403,B,40,SUB,40,SUB2,11)),U,1)):$P($G(^DIST(.403,B,40,SUB,40,SUB2,11)),U,1),1:";")
"RTN","XINDX12",136,0)
 . . S INDC=B_"P"_SUB_"P"_SUB2_" ; "_INDL_" - PRE ACTION FILE (#.4032) FIELD (#11) - "_SUB_" - "_SUB2
"RTN","XINDX12",137,0)
 . . D ADD^XINDX11
"RTN","XINDX12",138,0)
 . . ;
"RTN","XINDX12",139,0)
 . . S INDX=$S($L($P($G(^DIST(.403,B,40,SUB,40,SUB2,12)),U,1)):$P($G(^DIST(.403,B,40,SUB,40,SUB2,12)),U,1),1:";")
"RTN","XINDX12",140,0)
 . . S INDC=" ; "_INDL_" - POST ACTION FILE (#.4032) FIELD (#12) - "_SUB_" - "_SUB2
"RTN","XINDX12",141,0)
 . . D ADD^XINDX11
"RTN","XINDX12",142,0)
 . . ;
"RTN","XINDX12",143,0)
 . . S INDX=$S($L($P($G(^DIST(.403,B,40,SUB,40,SUB2,"COMP MUL")),U,1)):$P($G(^DIST(.403,B,40,SUB,40,SUB2,"COMP MUL")),U,1),1:";")
"RTN","XINDX12",144,0)
 . . S INDC=" ; "_INDL_" - COMPUTED MULTIPLE FILE (#.4032) FIELD (#98) - "_SUB_" - "_SUB2
"RTN","XINDX12",145,0)
 . . D ADD^XINDX11
"RTN","XINDX12",146,0)
 Q
"RTN","XINDX12",147,0)
DIALOG ;Process Dialogs
"RTN","XINDX12",148,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",149,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",150,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",151,0)
 ; .84       6      POST MESSAGE ACTION              ^DI(.84,D0,6)
"RTN","XINDX12",152,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",153,0)
 W !,"Processing Dialogs",!
"RTN","XINDX12",154,0)
 S INDX=$S($L($P($G(^DI(.84,B,6)),U,1)):$P($G(^DI(.84,B,6)),U,1),1:";")
"RTN","XINDX12",155,0)
 S INDC=B_" ; "_INDL_" - POST MESSAGE ACTION (#6)"
"RTN","XINDX12",156,0)
 D ADD^XINDX11
"RTN","XINDX12",157,0)
 Q
"RTN","XINDX12",158,0)
HELP ;Process Help Frames
"RTN","XINDX12",159,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",160,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",161,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",162,0)
 ; 9.2       10.1   ENTRY EXECUTE STATEMENT          ^DIC(9.2,D0,10.1)
"RTN","XINDX12",163,0)
 ; 9.2       10.2   EXIT EXECUTE STATEMENT           ^DIC(9.2,D0,10.2)
"RTN","XINDX12",164,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",165,0)
 W !,"Processing Help Frames",!
"RTN","XINDX12",166,0)
 S INDX=$S($L($P($G(^DIC(9.2,B,10.1)),U,1)):$P($G(^DIC(9.2,B,10.1)),U,1),1:";")
"RTN","XINDX12",167,0)
 S INDC=B_" ; "_INDL_" - ENTRY EXECUTE STATEMENT (#10.1)"
"RTN","XINDX12",168,0)
 D ADD^XINDX11
"RTN","XINDX12",169,0)
 ;
"RTN","XINDX12",170,0)
 S INDX=$S($L($P($G(^DIC(9.2,B,10.2)),U,1)):$P($G(^DIC(9.2,B,10.2)),U,1),1:";")
"RTN","XINDX12",171,0)
 S INDC=" ; "_INDL_" - EXIT EXECUTE STATEMENT (#10.2)"
"RTN","XINDX12",172,0)
 D ADD^XINDX11
"RTN","XINDX12",173,0)
 Q
"RTN","XINDX12",174,0)
KEY ;Process Security Keys
"RTN","XINDX12",175,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",176,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",177,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",178,0)
 ; 19.1      4      GRANTING CONDITION               ^DIC(19.1,D0,4)
"RTN","XINDX12",179,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",180,0)
 W !,"Processing Security Keys",!
"RTN","XINDX12",181,0)
 S INDX=$S($L($P($G(^DIC(19.1,B,4)),U,1)):$P($G(^DIC(19.1,B,4)),U,1),1:";")
"RTN","XINDX12",182,0)
 S INDC=B_" ; "_INDL_" - GRANTING CONDITION (#4)"
"RTN","XINDX12",183,0)
 D ADD^XINDX11
"RTN","XINDX12",184,0)
 Q
"RTN","XINDX12",185,0)
LIST ;Process List Templates
"RTN","XINDX12",186,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",187,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",188,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",189,0)
 ; 409.61    100    HEADER CODE                      ^SD(409.61,D0,HDR)
"RTN","XINDX12",190,0)
 ; 409.61    102    EXPAND CODE                      ^SD(409.61,D0,EXP)
"RTN","XINDX12",191,0)
 ; 409.61    103    HELP CODE                        ^SD(409.61,D0,HLP)
"RTN","XINDX12",192,0)
 ; 409.61    105    EXIT CODE                        ^SD(409.61,D0,FNL)
"RTN","XINDX12",193,0)
 ; 409.61    106    ENTRY CODE                       ^SD(409.61,D0,INIT)
"RTN","XINDX12",194,0)
 ; 409.61    107    ARRAY NAME                       ^SD(409.61,D0,ARRAY)                 Holds a variable name prefaced by a space
"RTN","XINDX12",195,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",196,0)
 W !,"Processing List Templates",!
"RTN","XINDX12",197,0)
 S INDX=$S($L($G(^SD(409.61,B,"HDR"))):$G(^SD(409.61,B,"HDR")),1:";")
"RTN","XINDX12",198,0)
 S INDC=B_" ; "_INDL_" - HEADER CODE (#100)"
"RTN","XINDX12",199,0)
 D ADD^XINDX11
"RTN","XINDX12",200,0)
 ;
"RTN","XINDX12",201,0)
 S INDX=$S($L($G(^SD(409.61,B,"EXP"))):$G(^SD(409.61,B,"EXP")),1:";")
"RTN","XINDX12",202,0)
 S INDC=" ; "_INDL_" - EXPAND CODE (#102)"
"RTN","XINDX12",203,0)
 D ADD^XINDX11
"RTN","XINDX12",204,0)
 ;
"RTN","XINDX12",205,0)
 S INDX=$S($L($G(^SD(409.61,B,"HLP"))):$G(^SD(409.61,B,"HLP")),1:";")
"RTN","XINDX12",206,0)
 S INDC=" ; "_INDL_" - HELP CODE (#103)"
"RTN","XINDX12",207,0)
 D ADD^XINDX11
"RTN","XINDX12",208,0)
 ;
"RTN","XINDX12",209,0)
 S INDX=$S($L($G(^SD(409.61,B,"FNL"))):$G(^SD(409.61,B,"FNL")),1:";")
"RTN","XINDX12",210,0)
 S INDC=" ; "_INDL_" - EXIT CODE (#105)"
"RTN","XINDX12",211,0)
 D ADD^XINDX11
"RTN","XINDX12",212,0)
 ;
"RTN","XINDX12",213,0)
 S INDX=$S($L($G(^SD(409.61,B,"INIT"))):$G(^SD(409.61,B,"INIT")),1:";")
"RTN","XINDX12",214,0)
 S INDC=" ; "_INDL_" - ENTRY CODE (#106)"
"RTN","XINDX12",215,0)
 D ADD^XINDX11
"RTN","XINDX12",216,0)
 ;
"RTN","XINDX12",217,0)
 S INDX=$S($L($G(^SD(409.61,B,"ARRAY"))):"I $L("_$P($G(^SD(409.61,B,"ARRAY"))," ",2,99)_") Q",1:";")
"RTN","XINDX12",218,0)
 S INDC=" ; "_INDL_" - ARRAY NAME (#107)"
"RTN","XINDX12",219,0)
 D ADD^XINDX11
"RTN","XINDX12",220,0)
 Q
"RTN","XINDX12",221,0)
PROTOCOL ;Process Protocols
"RTN","XINDX12",222,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",223,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",224,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",225,0)
 ; 101       15     EXIT ACTION                      ^ORD(101,D0,15) E1,245
"RTN","XINDX12",226,0)
 ; 101       20     ENTRY ACTION                     ^ORD(101,D0,20) E1,245
"RTN","XINDX12",227,0)
 ; 101       24     SCREEN                           ^ORD(101,D0,24) E1,245
"RTN","XINDX12",228,0)
 ; 101       26     HEADER                           ^ORD(101,D0,26) E1,245
"RTN","XINDX12",229,0)
 ; 101       27     MENU HELP                        ^ORD(101,D0,27) E1,245
"RTN","XINDX12",230,0)
 ; 101       100    ORDER PRINT ACTION               ^ORD(101,D0,100) E1,245
"RTN","XINDX12",231,0)
 ; 101       100.1  ORDER CANCEL ACTION              ^ORD(101,D0,100.1) E1,245
"RTN","XINDX12",232,0)
 ; 101       100.2  ORDER PURGE ACTION               ^ORD(101,D0,100.2) E1,245
"RTN","XINDX12",233,0)
 ; 101       771    PROCESSING ROUTINE               ^ORD(101,D0,771) E1,245
"RTN","XINDX12",234,0)
 ; 101       772    RESPONSE PROCESSING ROUTINE      ^ORD(101,D0,772) E1,245
"RTN","XINDX12",235,0)
 ; 101       774    ROUTING LOGIC                    ^ORD(101,D0,774) E1,245
"RTN","XINDX12",236,0)
 ; 101       21     REQUIRED VARIABLES               ^ORD(101,D0,21,D1,0)                 Required Variables sub file
"RTN","XINDX12",237,0)
 ; 101.05    .02    METHOD ACTION                    ^ORD(101,D0,101.05,D1,1) E1,245      Method sub file
"RTN","XINDX12",238,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",239,0)
 W !,"Processing Protocols",!
"RTN","XINDX12",240,0)
 K INDN
"RTN","XINDX12",241,0)
 S INDN=$P($G(^ORD(101,B,0)),U,1)
"RTN","XINDX12",242,0)
 S INDX=$S($L($E($G(^ORD(101,B,15)),1,245)):$E($G(^ORD(101,B,15)),1,245),1:";")
"RTN","XINDX12",243,0)
 S INDC=B_" ; "_INDN_" - EXIT ACTION (#15)"
"RTN","XINDX12",244,0)
 D ADD^XINDX11
"RTN","XINDX12",245,0)
 ;
"RTN","XINDX12",246,0)
 S INDX=$S($L($E($G(^ORD(101,B,20)),1,245)):$E($G(^ORD(101,B,20)),1,245),1:";")
"RTN","XINDX12",247,0)
 S INDC=" ; "_INDN_" - ENTRY ACTION (#20)"
"RTN","XINDX12",248,0)
 D ADD^XINDX11
"RTN","XINDX12",249,0)
 ;
"RTN","XINDX12",250,0)
 S INDX=$S($L($E($G(^ORD(101,B,24)),1,245)):$E($G(^ORD(101,B,24)),1,245),1:";")
"RTN","XINDX12",251,0)
 S INDC=" ; "_INDN_" - SCREEN (#24)"
"RTN","XINDX12",252,0)
 D ADD^XINDX11
"RTN","XINDX12",253,0)
 ;
"RTN","XINDX12",254,0)
 S INDX=$S($L($E($G(^ORD(101,B,26)),1,245)):$E($G(^ORD(101,B,26)),1,245),1:";")
"RTN","XINDX12",255,0)
 S INDC=" ; "_INDN_" - HEADER (#26)"
"RTN","XINDX12",256,0)
 D ADD^XINDX11
"RTN","XINDX12",257,0)
 ;
"RTN","XINDX12",258,0)
 S INDX=$S($L($E($G(^ORD(101,B,27)),1,245)):$E($G(^ORD(101,B,27)),1,245),1:";")
"RTN","XINDX12",259,0)
 S INDC=" ; "_INDN_" - MENU HELP (#27)"
"RTN","XINDX12",260,0)
 D ADD^XINDX11
"RTN","XINDX12",261,0)
 ;
"RTN","XINDX12",262,0)
 S INDX=$S($L($E($G(^ORD(101,B,100)),1,245)):$E($G(^ORD(101,B,100)),1,245),1:";")
"RTN","XINDX12",263,0)
 S INDC=" ; "_INDN_" - ORDER PRINT ACTION (#100)"
"RTN","XINDX12",264,0)
 D ADD^XINDX11
"RTN","XINDX12",265,0)
 ;
"RTN","XINDX12",266,0)
 S INDX=$S($L($E($G(^ORD(101,B,100.1)),1,245)):$E($G(^ORD(101,B,100.1)),1,245),1:";")
"RTN","XINDX12",267,0)
 S INDC=" ; "_INDN_" - ORDER CANCEL ACTION (#100.1)"
"RTN","XINDX12",268,0)
 D ADD^XINDX11
"RTN","XINDX12",269,0)
 ;
"RTN","XINDX12",270,0)
 S INDX=$S($L($E($G(^ORD(101,B,100.2)),1,245)):$E($G(^ORD(101,B,100.2)),1,245),1:";")
"RTN","XINDX12",271,0)
 S INDC=" ; "_INDN_" - ORDER PURGE ACTION (#100.2)"
"RTN","XINDX12",272,0)
 D ADD^XINDX11
"RTN","XINDX12",273,0)
 ;
"RTN","XINDX12",274,0)
 S INDX=$S($L($E($G(^ORD(101,B,771)),1,245)):$E($G(^ORD(101,B,771)),1,245),1:";")
"RTN","XINDX12",275,0)
 S INDC=" ; "_INDN_" - PROCESSING ROUTINE (#771)"
"RTN","XINDX12",276,0)
 D ADD^XINDX11
"RTN","XINDX12",277,0)
 ;
"RTN","XINDX12",278,0)
 S INDX=$S($L($E($G(^ORD(101,B,772)),1,245)):$E($G(^ORD(101,B,772)),1,245),1:";")
"RTN","XINDX12",279,0)
 S INDC=" ; "_INDN_" - ORDER PURGE ACTION (#772)"
"RTN","XINDX12",280,0)
 D ADD^XINDX11
"RTN","XINDX12",281,0)
 ;
"RTN","XINDX12",282,0)
 S INDX=$S($L($E($G(^ORD(101,B,774)),1,245)):$E($G(^ORD(101,B,774)),1,245),1:";")
"RTN","XINDX12",283,0)
 S INDC=" ; "_INDN_" - ROUTING LOGIC (#774)"
"RTN","XINDX12",284,0)
 D ADD^XINDX11
"RTN","XINDX12",285,0)
 ;
"RTN","XINDX12",286,0)
 N SUB
"RTN","XINDX12",287,0)
 S SUB=""
"RTN","XINDX12",288,0)
 F  S SUB=$O(^ORD(101,B,21,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",289,0)
 . S INDX=$S($L($E($G(^ORD(101,B,21,SUB,0)),1,17)):"$G("_$E($G(^HL(771,B,"MSG",SUB,"R")),1,17)_")",1:";")
"RTN","XINDX12",290,0)
 . I INDX="D Q" S INDX=";"
"RTN","XINDX12",291,0)
 . S INDC=B_"R"_SUB_" ; "_INDN_" - REQUIRED VARIABLES SUB FILE (#101.021) REQUIRED VARIABLES (#1) - "_SUB
"RTN","XINDX12",292,0)
 . D ADD^XINDX11
"RTN","XINDX12",293,0)
 ;
"RTN","XINDX12",294,0)
 S SUB=""
"RTN","XINDX12",295,0)
 F  S SUB=$O(^ORD(101,B,101.05,SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",296,0)
 . S INDX=$S($L($E($G(^ORD(101,B,101.05,SUB,1)),1,245)):$E($G(^ORD(101,B,101.05,SUB,1)),1,245),1:";")
"RTN","XINDX12",297,0)
 . I INDX="D Q" S INDX=";"
"RTN","XINDX12",298,0)
 . S INDC=B_"M"_SUB_" ; "_INDN_" - METHOD SUB FILE (#101.05) METHOD ACTION (#.02) - "_SUB
"RTN","XINDX12",299,0)
 . D ADD^XINDX11
"RTN","XINDX12",300,0)
 ;
"RTN","XINDX12",301,0)
 Q
"RTN","XINDX12",302,0)
HL7AP ; Process HL7 Application Parameters
"RTN","XINDX12",303,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",304,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",305,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",306,0)
 ; 771.06    1      PROCESSING ROUTINE               ^HL(771,D0,MSG,D1,R)
"RTN","XINDX12",307,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",308,0)
 W !,"Processing HL7 Application Parameters",!
"RTN","XINDX12",309,0)
 N SUB
"RTN","XINDX12",310,0)
 S SUB=""
"RTN","XINDX12",311,0)
 F  S SUB=$O(^HL(771,B,"MSG",SUB)) Q:SUB=""  Q:SUB'=+SUB  D
"RTN","XINDX12",312,0)
 . S INDX=$S($L($E($G(^HL(771,B,"MSG",SUB,"R")),1,17)):"D "_$E($G(^HL(771,B,"MSG",SUB,"R")),1,17),1:";")
"RTN","XINDX12",313,0)
 . I INDX="D Q" S INDX=";"
"RTN","XINDX12",314,0)
 . S INDC=B_"P"_SUB_" ; "_INDL_" - HL7 MESSAGE SUB FILE (#771.06) PROCESSING ROUTINE (#1) - "_SUB
"RTN","XINDX12",315,0)
 . D ADD^XINDX11
"RTN","XINDX12",316,0)
 Q
"RTN","XINDX12",317,0)
RPC ; Process Remote Procedures
"RTN","XINDX12",318,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",319,0)
 ; File      Field  Field Name                       Global Location                      Comments
"RTN","XINDX12",320,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",321,0)
 ; 8994      .02    TAG                              ^XWB(8994,D0,0) Piece 2              Needs to be concatenated with ROUTINE
"RTN","XINDX12",322,0)
 ; 8994      .03    ROUTINE                          ^XWB(8994,D0,0) Piece 3
"RTN","XINDX12",323,0)
 ; ========  =====  ===============================  ===================================  =============================================
"RTN","XINDX12",324,0)
 W !,"Processing Remote Procedures",!
"RTN","XINDX12",325,0)
 S INDX=$S($L($P($G(^XWB(8994,B,0)),U,2))&($L($P($G(^XWB(8994,B,0)),U,3))):"D "_$P($G(^XWB(8994,B,0)),U,2)_"^"_$P($G(^XWB(8994,B,0)),U,3),1:";")
"RTN","XINDX12",326,0)
 S INDC=B_" ; "_INDL_" - TAG ROUTINE (#.02 & .03)"
"RTN","XINDX12",327,0)
 D ADD^XINDX11
"RTN","XINDX12",328,0)
 Q
"RTN","XINDX13")
0^6^B333519644
"RTN","XINDX13",1,0)
XINDX13 ; OSE/SMH - Input, Print, and Sort Template Analysis;2018-02-28  10:16 AM
"RTN","XINDX13",2,0)
 ;;7.3;TOOLKIT;**10001**;Apr 25, 1995;Build 4
"RTN","XINDX13",3,0)
 ; Entire routine authored by Sam Habiel; minor modifications by
"RTN","XINDX13",4,0)
 ; Christopher Edwards
"RTN","XINDX13",5,0)
 ;
"RTN","XINDX13",6,0)
 ; This routine finds non-self files that are pointed to by a template
"RTN","XINDX13",7,0)
 ; EPs DIPTM and DIETM support XINDX12 in finding M code in Input and
"RTN","XINDX13",8,0)
 ; Print templates.
"RTN","XINDX13",9,0)
 ;
"RTN","XINDX13",10,0)
ALL(path) ; [Public] Export all template CSV files at once to a specific dir
"RTN","XINDX13",11,0)
 i $g(path)=""     s path=$$DEFDIR^%ZISH()
"RTN","XINDX13",12,0)
 do DIBT(path),DIET(path),DIPT(path)
"RTN","XINDX13",13,0)
 quit
"RTN","XINDX13",14,0)
 ;
"RTN","XINDX13",15,0)
DIBT(path,filename) ; [Public] Sort template analysis
"RTN","XINDX13",16,0)
 n outputData
"RTN","XINDX13",17,0)
 i $g(path)=""     s path=$$DEFDIR^%ZISH()
"RTN","XINDX13",18,0)
 i $g(filename)="" s filename="DIBTOUT.csv"
"RTN","XINDX13",19,0)
 d DIBTCOL(.outputData)
"RTN","XINDX13",20,0)
 d DIBTOUT(.outputData,path,filename)
"RTN","XINDX13",21,0)
 quit
"RTN","XINDX13",22,0)
 ;
"RTN","XINDX13",23,0)
DIET(path,filename) ; [Public] Input template analysis
"RTN","XINDX13",24,0)
 n outputData
"RTN","XINDX13",25,0)
 i $g(path)=""     s path=$$DEFDIR^%ZISH()
"RTN","XINDX13",26,0)
 i $g(filename)="" s filename="DIETOUT.csv"
"RTN","XINDX13",27,0)
 d DIETCOL(.outputData)
"RTN","XINDX13",28,0)
 d DIETOUT(.outputData,path,filename)
"RTN","XINDX13",29,0)
 quit
"RTN","XINDX13",30,0)
 ;
"RTN","XINDX13",31,0)
DIPT(path,filename) ; [Public] Print template analysis
"RTN","XINDX13",32,0)
 n outputData
"RTN","XINDX13",33,0)
 i $g(path)=""     s path=$$DEFDIR^%ZISH()
"RTN","XINDX13",34,0)
 i $g(filename)="" s filename="DIPTOUT.csv"
"RTN","XINDX13",35,0)
 d DIPTCOL(.outputData)
"RTN","XINDX13",36,0)
 d DIPTOUT(.outputData,path,filename)
"RTN","XINDX13",37,0)
 quit
"RTN","XINDX13",38,0)
 ;
"RTN","XINDX13",39,0)
DIBTCOL(outputData) ; [Private] Sort Template Data Collection
"RTN","XINDX13",40,0)
 ; for each template
"RTN","XINDX13",41,0)
 n dibt f dibt=0:0 s dibt=$o(^DIBT(dibt)) q:'dibt  d
"RTN","XINDX13",42,0)
 . quit:'$data(^DIBT(dibt,0))                 ; get valid ones only
"RTN","XINDX13",43,0)
 . new name s name=$p(^DIBT(dibt,0),U)
"RTN","XINDX13",44,0)
 . new file s file=$p(^DIBT(dibt,0),U,4)
"RTN","XINDX13",45,0)
 . n isSort s isSort=$order(^DIBT(dibt,2,0))  ; make sure they are sort templates
"RTN","XINDX13",46,0)
 . if 'isSort quit
"RTN","XINDX13",47,0)
 . ;
"RTN","XINDX13",48,0)
 . ; walk through each field
"RTN","XINDX13",49,0)
 . n line f line=0:0 s line=$order(^DIBT(dibt,2,line)) quit:'line  do
"RTN","XINDX13",50,0)
 .. n lineData ; We have some variances on how the data is stored (lines below)
"RTN","XINDX13",51,0)
 .. i $d(^(line))#2   s lineData=^DIBT(dibt,2,line) ; **NAKED**
"RTN","XINDX13",52,0)
 .. i $d(^(line,0))#2 s lineData=^DIBT(dibt,2,line,0) ; **NAKED**
"RTN","XINDX13",53,0)
 .. ;
"RTN","XINDX13",54,0)
 .. ; some vital data
"RTN","XINDX13",55,0)
 .. n lineFile s lineFile=$piece(lineData,U)
"RTN","XINDX13",56,0)
 .. i '$data(^DD(lineFile)) quit  ; bad DD
"RTN","XINDX13",57,0)
 .. n lineField s lineField=$piece(lineData,U,2)
"RTN","XINDX13",58,0)
 .. n lineFieldSpec s lineFieldSpec=$p(lineData,U,3)
"RTN","XINDX13",59,0)
 .. ;
"RTN","XINDX13",60,0)
 .. ; if it's the same file, and not a relational field, we are not interested
"RTN","XINDX13",61,0)
 .. i lineFile=file,(lineFieldSpec'[":"&(lineFieldSpec'[" IN ")) quit
"RTN","XINDX13",62,0)
 .. ;
"RTN","XINDX13",63,0)
 .. ; if the parent is the same file, and ditto, we are still not interested
"RTN","XINDX13",64,0)
 .. i $$PARENT(lineFile)=file,(lineFieldSpec'[":"&(lineFieldSpec'[" IN ")) quit
"RTN","XINDX13",65,0)
 .. ;
"RTN","XINDX13",66,0)
 .. ; We are interested
"RTN","XINDX13",67,0)
 .. ; Do we have the field?
"RTN","XINDX13",68,0)
 .. i lineField="" do
"RTN","XINDX13",69,0)
 ... ;
"RTN","XINDX13",70,0)
 ... ; no we don't so get the fields using DICOMP
"RTN","XINDX13",71,0)
 ... n X
"RTN","XINDX13",72,0)
 ... d EXPR^DICOMP(lineFile,"dmFITSL",lineFieldSpec)
"RTN","XINDX13",73,0)
 ... i '$d(X) quit
"RTN","XINDX13",74,0)
 ... ; X("USED")="404.51^.07;404.57^.02"
"RTN","XINDX13",75,0)
 ... i X("USED")="" quit  ; not an expression that uses fields
"RTN","XINDX13",76,0)
 ... n pairs,pair f pairs=1:1:$l(X("USED"),";") d
"RTN","XINDX13",77,0)
 .... s pair=$p(X("USED"),";",pairs)
"RTN","XINDX13",78,0)
 .... n thisFile  s thisFile=$p(pair,U,1)
"RTN","XINDX13",79,0)
 .... n thisField s thisField=$p(pair,U,2)
"RTN","XINDX13",80,0)
 .... i thisFile=file quit
"RTN","XINDX13",81,0)
 .... s outputData(file,thisFile,thisField)=dibt_U_name
"RTN","XINDX13",82,0)
 .. ;
"RTN","XINDX13",83,0)
 .. ; we have a field. Take it at face value
"RTN","XINDX13",84,0)
 .. e  s outputData(file,lineFile,lineField)=dibt_U_name
"RTN","XINDX13",85,0)
 quit
"RTN","XINDX13",86,0)
 ;
"RTN","XINDX13",87,0)
DIBTOUT(outputData,outputPath,outputFile) ; [Private] Sort Template Data Output
"RTN","XINDX13",88,0)
 n POP
"RTN","XINDX13",89,0)
 d OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",90,0)
 i POP quit
"RTN","XINDX13",91,0)
 u IO
"RTN","XINDX13",92,0)
 n file,dstFile,dstField,dibtIEN,dibtName
"RTN","XINDX13",93,0)
 n c s c=","
"RTN","XINDX13",94,0)
 w "SORT TEMPLATE IEN,SORT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",95,0)
 f file=0:0 s file=$o(outputData(file)) q:'file  d
"RTN","XINDX13",96,0)
 . f dstFile=0:0 s dstFile=$o(outputData(file,dstFile)) q:'dstFile  d
"RTN","XINDX13",97,0)
 .. f dstField=0:0 s dstField=$o(outputData(file,dstFile,dstField)) q:'dstField  d
"RTN","XINDX13",98,0)
 ... n data s data=outputData(file,dstFile,dstField)
"RTN","XINDX13",99,0)
 ... s dibtIEN=$p(data,U,1)
"RTN","XINDX13",100,0)
 ... s dibtName=$p(data,U,2)
"RTN","XINDX13",101,0)
 ... w dibtIEN_c_dibtName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",102,0)
 d CLOSE^%ZISH("file1")
"RTN","XINDX13",103,0)
 quit
"RTN","XINDX13",104,0)
 ;
"RTN","XINDX13",105,0)
DIETCOL(outputData,mCodeData) ; [Private] Input Template Data Collection
"RTN","XINDX13",106,0)
 ; for each template
"RTN","XINDX13",107,0)
 ; s outputData(file,thisFile,thisField)=dibt_U_name
"RTN","XINDX13",108,0)
 n diet f diet=0:0 s diet=$o(^DIE(diet)) q:'diet  do
"RTN","XINDX13",109,0)
 . quit:'$data(^DIE(diet,0))                 ; get valid ones only
"RTN","XINDX13",110,0)
 . new name s name=$p(^DIE(diet,0),U)
"RTN","XINDX13",111,0)
 . new file s file=$p(^DIE(diet,0),U,4)
"RTN","XINDX13",112,0)
 . ;
"RTN","XINDX13",113,0)
 . ; for each file in the input template
"RTN","XINDX13",114,0)
 . n line f line=0:0 s line=$o(^DIE(diet,"DR",line)) q:line>98  q:line=""  do  ; 99 is reserved for some compiled code
"RTN","XINDX13",115,0)
 .. n lineFile f lineFile=0:0 s lineFile=$o(^DIE(diet,"DR",line,lineFile)) q:'lineFile  q:(lineFile'=+lineFile)  do
"RTN","XINDX13",116,0)
 ... n fields s fields=^DIE(diet,"DR",line,lineFile)
"RTN","XINDX13",117,0)
 ... n fieldIndex,field f fieldIndex=1:1:$l(fields,";") do
"RTN","XINDX13",118,0)
 .... s field=$piece(fields,";",fieldIndex)
"RTN","XINDX13",119,0)
 .... ; various tests for the field
"RTN","XINDX13",120,0)
 .... i field="" quit       ; empty field. Can happen!
"RTN","XINDX13",121,0)
 .... ;
"RTN","XINDX13",122,0)
 .... ; FROM X+2^DIA3: Get M field and check it
"RTN","XINDX13",123,0)
 .... N X S X=field
"RTN","XINDX13",124,0)
 .... i X'?.E1":" S X=$S(X["//^":$P(X,"//^",2),1:X),X=$S(X[";":$P(X,";"),1:X) D ^DIM
"RTN","XINDX13",125,0)
 .... i $d(X) s mCodeData(lineFile,line)=X quit
"RTN","XINDX13",126,0)
 .... ;
"RTN","XINDX13",127,0)
 .... ; We analyzed the M code; now we just want the dependencies
"RTN","XINDX13",128,0)
 .... if lineFile=file quit  ; DR file same as our file; not interested
"RTN","XINDX13",129,0)
 .... if $$PARENT(lineFile)=file quit  ; ditto, for parent
"RTN","XINDX13",130,0)
 .... ;
"RTN","XINDX13",131,0)
 .... ; range like .01:5
"RTN","XINDX13",132,0)
 .... i $l(field,":")=2,(+$p(field,":"))=$p(field,":") do  quit
"RTN","XINDX13",133,0)
 ..... n start s start=$p(field,":",1)
"RTN","XINDX13",134,0)
 ..... n end     s end=$p(field,":",2)
"RTN","XINDX13",135,0)
 ..... i $data(^DD(lineFile,start)) s outputData(file,lineFile,start)=diet_U_name
"RTN","XINDX13",136,0)
 ..... n eachField s eachField=start
"RTN","XINDX13",137,0)
 ..... f  s eachField=$o(^DD(lineFile,eachField)) q:eachField>end  q:eachField=""  do
"RTN","XINDX13",138,0)
 ...... s outputData(file,lineFile,eachField)=diet_U_name
"RTN","XINDX13",139,0)
 .... ;
"RTN","XINDX13",140,0)
 .... i $e(field)="@" quit  ; jump to another place in the template. Not a field
"RTN","XINDX13",141,0)
 .... s field=+field
"RTN","XINDX13",142,0)
 .... i '$data(^DD(lineFile,field)) quit  ; field doesn't exist
"RTN","XINDX13",143,0)
 .... s outputData(file,lineFile,field)=diet_U_name
"RTN","XINDX13",144,0)
 quit
"RTN","XINDX13",145,0)
 ;
"RTN","XINDX13",146,0)
DIETOUT(outputData,outputPath,outputFile) ; [Private] Input Template Data Output
"RTN","XINDX13",147,0)
 n POP
"RTN","XINDX13",148,0)
 d OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",149,0)
 i POP quit
"RTN","XINDX13",150,0)
 u IO
"RTN","XINDX13",151,0)
 n file,dstFile,dstField,dietIEN,dietName
"RTN","XINDX13",152,0)
 n c s c=","
"RTN","XINDX13",153,0)
 w "INPUT TEMPLATE IEN,INPUT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",154,0)
 f file=0:0 s file=$o(outputData(file)) q:'file  d
"RTN","XINDX13",155,0)
 . f dstFile=0:0 s dstFile=$o(outputData(file,dstFile)) q:'dstFile  d
"RTN","XINDX13",156,0)
 .. f dstField=0:0 s dstField=$o(outputData(file,dstFile,dstField)) q:'dstField  d
"RTN","XINDX13",157,0)
 ... n data s data=outputData(file,dstFile,dstField)
"RTN","XINDX13",158,0)
 ... s dietIEN=$p(data,U,1)
"RTN","XINDX13",159,0)
 ... s dietName=$p(data,U,2)
"RTN","XINDX13",160,0)
 ... w dietIEN_c_dietName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",161,0)
 d CLOSE^%ZISH("file1")
"RTN","XINDX13",162,0)
 quit
"RTN","XINDX13",163,0)
 ;
"RTN","XINDX13",164,0)
DIPTCOL(outputData,mCodeData) ; [Private] Print Template Data Collection
"RTN","XINDX13",165,0)
 ; for each template
"RTN","XINDX13",166,0)
 n dipt f dipt=0:0 s dipt=$o(^DIPT(dipt)) q:'dipt  d
"RTN","XINDX13",167,0)
 . quit:'$data(^DIPT(dipt,0))                 ; get valid ones only
"RTN","XINDX13",168,0)
 . new name s name=$p(^DIPT(dipt,0),U)
"RTN","XINDX13",169,0)
 . new file s file=$p(^DIPT(dipt,0),U,4)
"RTN","XINDX13",170,0)
 . ;
"RTN","XINDX13",171,0)
 . d:$t(^XTMLOG)]"" INITEASY^XTMLOG("C","WARN")
"RTN","XINDX13",172,0)
 . ; debug
"RTN","XINDX13",173,0)
 . ; b:name="ZBJM FEE BASIS LIST"
"RTN","XINDX13",174,0)
 . ; debug
"RTN","XINDX13",175,0)
 . ;
"RTN","XINDX13",176,0)
 . ; for each field
"RTN","XINDX13",177,0)
 . new fileNamePrint set fileNamePrint=1
"RTN","XINDX13",178,0)
 . new line f line=0:0 s line=$o(^DIPT(dipt,"F",line)) q:'line  do
"RTN","XINDX13",179,0)
 .. new lineContents s lineContents=^DIPT(dipt,"F",line)
"RTN","XINDX13",180,0)
 .. new fieldDataIndex for fieldDataIndex=1:1:$l(lineContents,"~") do
"RTN","XINDX13",181,0)
 ... new fieldData set fieldData=$p(lineContents,"~",fieldDataIndex)
"RTN","XINDX13",182,0)
 ... quit:fieldData=""
"RTN","XINDX13",183,0)
 ... n fields s fields=$p(fieldData,";")
"RTN","XINDX13",184,0)
 ... quit:fields=""
"RTN","XINDX13",185,0)
 ... quit:fields=" "
"RTN","XINDX13",186,0)
 ... ;
"RTN","XINDX13",187,0)
 ... ; analyze the fields
"RTN","XINDX13",188,0)
 ... ;
"RTN","XINDX13",189,0)
 ... ; See if we have a multiple navigation. These are noted in the first piece
"RTN","XINDX13",190,0)
 ... ; as a series of numbers like 50,1,2,5...
"RTN","XINDX13",191,0)
 ... ; don't process these any further if we find them
"RTN","XINDX13",192,0)
 ... ; We don't process them as they mean we don't branch out to other files
"RTN","XINDX13",193,0)
 ... ; --we just trace our own file down.
"RTN","XINDX13",194,0)
 ... n fieldsUpright s fieldsUpright=1
"RTN","XINDX13",195,0)
 ... n fieldIndex f fieldIndex=1:1:$l(fields,",") do  q:'fieldsUpright
"RTN","XINDX13",196,0)
 .... n field s field=$p(fields,",",fieldIndex)
"RTN","XINDX13",197,0)
 .... i field'=+field!(field<0) s fieldsUpright=0
"RTN","XINDX13",198,0)
 ... i fieldsUpright D:$t(^XTMLOG)]"" DEBUG^XTMLOG("Qutting since upright","name,file,fieldData") quit
"RTN","XINDX13",199,0)
 ... ;
"RTN","XINDX13",200,0)
 ... ; Exclude transition lines
"RTN","XINDX13",201,0)
 ... ; We are not interested in the lines that switch files (e.g. in 52: 'PROVIDER:')
"RTN","XINDX13",202,0)
 ... n ignoreTransition s ignoreTransition=0
"RTN","XINDX13",203,0)
 ... n fieldIndex f fieldIndex=1:1:$l(fields,",") do  q:ignoreTransition
"RTN","XINDX13",204,0)
 .... n field s field=$p(fields,",",fieldIndex)
"RTN","XINDX13",205,0)
 .... n nextField s nextField=$p(fields,",",fieldIndex+1)
"RTN","XINDX13",206,0)
 .... i $e(nextField)=U set ignoreTransition=1 quit
"RTN","XINDX13",207,0)
 ... i ignoreTransition D:$t(^XTMLOG)]"" DEBUG^XTMLOG("Quitting due to context transistion with no fields","name,file,fieldData") quit
"RTN","XINDX13",208,0)
 ... ;
"RTN","XINDX13",209,0)
 ... ; If zpiece is defined, then we have a COMPUTED EXPRESSION or M code
"RTN","XINDX13",210,0)
 ... n Zpiece s Zpiece=0
"RTN","XINDX13",211,0)
 ... n i f i=1:1:$l(fieldData,";") i $p(fieldData,";",i)="Z" s Zpiece=i quit
"RTN","XINDX13",212,0)
 ... ;
"RTN","XINDX13",213,0)
 ... ; exclude print only fields (quoted values, or literal $C)
"RTN","XINDX13",214,0)
 ... n printOnlyField s printOnlyField=0
"RTN","XINDX13",215,0)
 ... i 'Zpiece n fieldIndex f fieldIndex=1:1:$l(fields,",") do  q:printOnlyField
"RTN","XINDX13",216,0)
 .... n field s field=$p(fields,",",fieldIndex)
"RTN","XINDX13",217,0)
 .... i +field=field quit  ; numeric -- quit -- not a literal
"RTN","XINDX13",218,0)
 .... i $e(field)="""" s printOnlyField=1
"RTN","XINDX13",219,0)
 .... i $e(field,1,5)="W $C(" s printOnlyField=1
"RTN","XINDX13",220,0)
 ... i printOnlyField d:$t(^XTMLOG)]"" DEBUG^XTMLOG("Quitting for printOnlyField","name,file,fieldData,printOnlyField") quit
"RTN","XINDX13",221,0)
 ... ;
"RTN","XINDX13",222,0)
 ...  ; This can be a "hidden" M field masqurading
"RTN","XINDX13",223,0)
 ... n isNonTradMCode s isNonTradMCode=0
"RTN","XINDX13",224,0)
 ... if 'Zpiece do
"RTN","XINDX13",225,0)
 .... n p1 s p1=$p(fields,",")
"RTN","XINDX13",226,0)
 .... i +p1=p1 quit  ; Just a normal field
"RTN","XINDX13",227,0)
 .... N X S X=$P(fields,";") D ^DIM
"RTN","XINDX13",228,0)
 .... I $D(X) s isNonTradMCode=1
"RTN","XINDX13",229,0)
 .... D:$t(^XTMLOG)]"" WARN^XTMLOG("Treating Print Field as M code","file,fieldData")
"RTN","XINDX13",230,0)
 .... set mCodeData(+file,line)=X
"RTN","XINDX13",231,0)
 ... ;
"RTN","XINDX13",232,0)
 ... ; Don't process any further if non-Traditional M code
"RTN","XINDX13",233,0)
 ... quit:isNonTradMCode
"RTN","XINDX13",234,0)
 ... ;
"RTN","XINDX13",235,0)
 ... ; Now, process non-M code fields
"RTN","XINDX13",236,0)
 ... ; Best template to test this with: MAGV-PAT-QUERY
"RTN","XINDX13",237,0)
 ... ; NB: This is a recursive search; each search updates the pointerFile variable
"RTN","XINDX13",238,0)
 ... ; We only want the last entry in the pointerFile chain to file the data if there
"RTN","XINDX13",239,0)
 ... ; is a field we want to grab
"RTN","XINDX13",240,0)
 ... n pointerFile s pointerFile=0
"RTN","XINDX13",241,0)
 ... if 'Zpiece n fieldIndex f fieldIndex=1:1:$l(fields,",") do
"RTN","XINDX13",242,0)
 .... n field s field=$p(fields,",",fieldIndex)
"RTN","XINDX13",243,0)
 .... n nextField s nextField=$p(fields,",",fieldIndex+1)
"RTN","XINDX13",244,0)
 .... i field<0 s pointerFile=-field quit
"RTN","XINDX13",245,0)
 .... i field>0,'pointerFile quit  ; field in original file. We are not interested
"RTN","XINDX13",246,0)
 .... d ASSERT(+pointerFile=pointerFile)
"RTN","XINDX13",247,0)
 .... d ASSERT(+field=field)
"RTN","XINDX13",248,0)
 .... d:$t(^XTMLOG)]"" INFO^XTMLOG("Num Parsed as:","fieldData,pointerFile,field")
"RTN","XINDX13",249,0)
 .... i field>0,pointerFile s outputData(file,pointerFile,field)=dipt_U_name
"RTN","XINDX13",250,0)
 ... if 'Zpiece quit  ; can't quit on the for line above
"RTN","XINDX13",251,0)
 ... ;
"RTN","XINDX13",252,0)
 ... ; Now, process M code/Copmputed code fields.
"RTN","XINDX13",253,0)
 ... new exitEarly set exitEarly=0
"RTN","XINDX13",254,0)
 ... ;
"RTN","XINDX13",255,0)
 ... ; We are really interested in capturing the computed field information
"RTN","XINDX13",256,0)
 ... ; (Z piece stuff only)
"RTN","XINDX13",257,0)
 ... ; Calculate the correct context for the Computed Expression
"RTN","XINDX13",258,0)
 ... n mCodeContext s mCodeContext=file ; The default
"RTN","XINDX13",259,0)
 ... n mCode s mCode=""
"RTN","XINDX13",260,0)
 ... n fileField,fileFieldIndex
"RTN","XINDX13",261,0)
 ... f fileFieldIndex=1:1:$l(fields,",") do  q:mCode]""
"RTN","XINDX13",262,0)
 .... s fileField=$p(fields,",",fileFieldIndex)
"RTN","XINDX13",263,0)
 .... i fileField'=+fileField s mCode=$p(fields,",",fileFieldIndex,99) quit
"RTN","XINDX13",264,0)
 .... ;
"RTN","XINDX13",265,0)
 .... ; Relational navigation
"RTN","XINDX13",266,0)
 .... i fileField<0 s mCodeContext=-fileField quit
"RTN","XINDX13",267,0)
 .... ;
"RTN","XINDX13",268,0)
 .... ; Subfile processing. Move context to subfile
"RTN","XINDX13",269,0)
 .... i '$d(^DD(mCodeContext,fileField,0)) set exitEarly=1 do  quit  ; doesn't exist!
"RTN","XINDX13",270,0)
 ..... D:$t(^XTMLOG)]"" WARN^XTMLOG("^DD("_mCodeContext_","_fileField_",0) does not exist")
"RTN","XINDX13",271,0)
 .... i fileField>0,$P(^DD(mCodeContext,fileField,0),U,2) s mCodeContext=+$P(^DD(mCodeContext,fileField,0),U,2) quit
"RTN","XINDX13",272,0)
 ... q:exitEarly
"RTN","XINDX13",273,0)
 ... d:$t(^XTMLOG)]"" DEBUG^XTMLOG("Context for "_fieldData_" is "_mCodeContext_" and M code is "_mCode)
"RTN","XINDX13",274,0)
 ... ;
"RTN","XINDX13",275,0)
 ... ; debug
"RTN","XINDX13",276,0)
 ... ; w mCodeContext,!
"RTN","XINDX13",277,0)
 ... ; debug
"RTN","XINDX13",278,0)
 ... ;
"RTN","XINDX13",279,0)
 ... ;
"RTN","XINDX13",280,0)
 ... ; Get the potentially COMPUTED EXPRESSION code for this field
"RTN","XINDX13",281,0)
 ... n potComputedCode s potComputedCode=$p(fieldData,";",Zpiece+1)
"RTN","XINDX13",282,0)
 ... s potComputedCode=$e(potComputedCode,2,$l(potComputedCode)-1)
"RTN","XINDX13",283,0)
 ... ;
"RTN","XINDX13",284,0)
 ... ; If M Code is broken up, put it back together
"RTN","XINDX13",285,0)
 ... i $f(mCode,"X DXS") do
"RTN","XINDX13",286,0)
 .... n startdxs s startdxs=$f(mCode,"DXS")-3
"RTN","XINDX13",287,0)
 .... n enddxs s enddxs=$f(mCode,")",startdxs)-1
"RTN","XINDX13",288,0)
 .... n dxsString s dxsString=$e(mCode,startdxs,enddxs)
"RTN","XINDX13",289,0)
 .... n s1,s2
"RTN","XINDX13",290,0)
 .... s s1=$qs(dxsString,1)
"RTN","XINDX13",291,0)
 .... s s2=$qs(dxsString,2)
"RTN","XINDX13",292,0)
 .... n dxsCode s dxsCode=^DIPT(dipt,"DXS",s1,s2)
"RTN","XINDX13",293,0)
 .... n % s %("X "_dxsString)=dxsCode
"RTN","XINDX13",294,0)
 .... s mCode=$$REPLACE^XLFSTR(mCode,.%)
"RTN","XINDX13",295,0)
 ... ;
"RTN","XINDX13",296,0)
 ... ; Is it the same (after removing the quotes) as the MCode?
"RTN","XINDX13",297,0)
 ... ; If so, then this is not a computed expression
"RTN","XINDX13",298,0)
 ... ; We can abandon hope of finding what field it refers to.
"RTN","XINDX13",299,0)
 ... i potComputedCode=mCode do  quit
"RTN","XINDX13",300,0)
 .... set mCodeData(+file,line)=mCode
"RTN","XINDX13",301,0)
 .... d:$t(^XTMLOG)]"" INFO^XTMLOG(fieldData_" in "_file_" considered to be M code")
"RTN","XINDX13",302,0)
 ...
"RTN","XINDX13",303,0)
 ... ; debug
"RTN","XINDX13",304,0)
 ...
"RTN","XINDX13",305,0)
 ... ; At this point, we think it's a computed expression.
"RTN","XINDX13",306,0)
 ... ; Lets try to to see
"RTN","XINDX13",307,0)
 ... n X
"RTN","XINDX13",308,0)
 ... d EXPR^DICOMP(mCodeContext,"dmFITSL",potComputedCode)
"RTN","XINDX13",309,0)
 ... i '$d(X) D:$t(^XTMLOG)]"" ERROR^XTMLOG("Can't resolve "_fieldData_" into fields (context "_mCodeContext_", name "_name_")") quit
"RTN","XINDX13",310,0)
 ... i X("USED")="" quit  ; not an expression that uses fields (NOW, PAGE)
"RTN","XINDX13",311,0)
 ... ;
"RTN","XINDX13",312,0)
 ... n pairs,pair f pairs=1:1:$l(X("USED"),";") d
"RTN","XINDX13",313,0)
 .... s pair=$p(X("USED"),";",pairs)
"RTN","XINDX13",314,0)
 .... n thisFile  s thisFile=$p(pair,U,1)
"RTN","XINDX13",315,0)
 .... n thisField s thisField=$p(pair,U,2)
"RTN","XINDX13",316,0)
 .... i thisFile=file quit
"RTN","XINDX13",317,0)
 .... s outputData(file,thisFile,thisField)=dipt_U_name
"RTN","XINDX13",318,0)
 D:$t(^XTMLOG)]"" ENDLOG^XTMLOG()
"RTN","XINDX13",319,0)
 quit
"RTN","XINDX13",320,0)
 ;
"RTN","XINDX13",321,0)
DIPTOUT(outputData,outputPath,outputFile) ; [Private] Print Template Data Output
"RTN","XINDX13",322,0)
 n POP
"RTN","XINDX13",323,0)
 d OPEN^%ZISH("file1",outputPath,outputFile,"W")
"RTN","XINDX13",324,0)
 i POP quit
"RTN","XINDX13",325,0)
 u IO
"RTN","XINDX13",326,0)
 n file,dstFile,dstField,dietIEN,dietName
"RTN","XINDX13",327,0)
 n c s c=","
"RTN","XINDX13",328,0)
 w "PRINT TEMPLATE IEN,PRINT TEMPLATE NAME,SOURCE FILE,DESTINATION FILE,DESTINATION FIELD",!
"RTN","XINDX13",329,0)
 f file=0:0 s file=$o(outputData(file)) q:'file  d
"RTN","XINDX13",330,0)
 . f dstFile=0:0 s dstFile=$o(outputData(file,dstFile)) q:'dstFile  d
"RTN","XINDX13",331,0)
 .. f dstField=0:0 s dstField=$o(outputData(file,dstFile,dstField)) q:'dstField  d
"RTN","XINDX13",332,0)
 ... n data s data=outputData(file,dstFile,dstField)
"RTN","XINDX13",333,0)
 ... s dietIEN=$p(data,U,1)
"RTN","XINDX13",334,0)
 ... s dietName=$p(data,U,2)
"RTN","XINDX13",335,0)
 ... w dietIEN_c_dietName_c_file_c_dstFile_c_dstField,!
"RTN","XINDX13",336,0)
 d CLOSE^%ZISH("file1")
"RTN","XINDX13",337,0)
 quit
"RTN","XINDX13",338,0)
 ;
"RTN","XINDX13",339,0)
 ; DIETM and DIPTM are used by XINDEX to process input and sort templates
"RTN","XINDX13",340,0)
 ; respectively. XINDEX passes required parameters through the stack instead
"RTN","XINDX13",341,0)
 ; passed variables.
"RTN","XINDX13",342,0)
 ;
"RTN","XINDX13",343,0)
 ; B = {IEN}
"RTN","XINDX13",344,0)
 ; INDLC = {counter}
"RTN","XINDX13",345,0)
 ; INDRN = {faux routine prefix}
"RTN","XINDX13",346,0)
 ; INDC = {IEN} ; {NAME} - {DISPLAY NAME}
"RTN","XINDX13",347,0)
 ; INDX = {code to be XINDEXED}
"RTN","XINDX13",348,0)
 ; INDL = {NAME field (.01) of IEN}
"RTN","XINDX13",349,0)
DIETM ; [Public] Collect M code fileds from all input templates
"RTN","XINDX13",350,0)
 ; ZEXCEPT: B,INDX
"RTN","XINDX13",351,0)
 quit:'$data(^DIE(B,0))                 ; get valid ones only
"RTN","XINDX13",352,0)
 new name s name=$p(^DIE(B,0),U)
"RTN","XINDX13",353,0)
 new file s file=$p(^DIE(B,0),U,4)
"RTN","XINDX13",354,0)
 ;
"RTN","XINDX13",355,0)
 ; for each file in the input template
"RTN","XINDX13",356,0)
 n line f line=0:0 s line=$o(^DIE(B,"DR",line)) q:line>98  q:line=""  do  ; 99 is reserved for some compiled code
"RTN","XINDX13",357,0)
 . n lineFile f lineFile=0:0 s lineFile=$o(^DIE(B,"DR",line,lineFile)) q:'lineFile  q:(lineFile'=+lineFile)  do
"RTN","XINDX13",358,0)
 .. n fields s fields=^DIE(B,"DR",line,lineFile)
"RTN","XINDX13",359,0)
 .. n fieldIndex,field f fieldIndex=1:1:$l(fields,";") do
"RTN","XINDX13",360,0)
 ... s field=$piece(fields,";",fieldIndex)
"RTN","XINDX13",361,0)
 ... ; various tests for the field
"RTN","XINDX13",362,0)
 ... i field="" quit       ; empty field. Can happen!
"RTN","XINDX13",363,0)
 ... ;
"RTN","XINDX13",364,0)
 ... ; FROM X+2^DIA3: Get M field and check it
"RTN","XINDX13",365,0)
 ... N X S X=field
"RTN","XINDX13",366,0)
 ... i X'?.E1":" S X=$S(X["//^":$P(X,"//^",2),1:X),X=$S(X[";":$P(X,";"),1:X) D ^DIM
"RTN","XINDX13",367,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",368,0)
 ... i $d(X) s INDX=X d ADDLN^XINDX11
"RTN","XINDX13",369,0)
 quit
"RTN","XINDX13",370,0)
 ;
"RTN","XINDX13",371,0)
DIPTM ; [Public] Collect M code fields from all print templates
"RTN","XINDX13",372,0)
 ; ZEXCEPT: B,INDX
"RTN","XINDX13",373,0)
 quit:'$data(^DIPT(B,0))                 ; get valid ones only
"RTN","XINDX13",374,0)
 new name s name=$p(^DIPT(B,0),U)
"RTN","XINDX13",375,0)
 new file s file=$p(^DIPT(B,0),U,4)
"RTN","XINDX13",376,0)
 ;
"RTN","XINDX13",377,0)
 ; for each field
"RTN","XINDX13",378,0)
 new fileNamePrint set fileNamePrint=1
"RTN","XINDX13",379,0)
 new line f line=0:0 s line=$o(^DIPT(B,"F",line)) q:'line  do
"RTN","XINDX13",380,0)
 . new lineContents s lineContents=^DIPT(B,"F",line)
"RTN","XINDX13",381,0)
 . new fieldDataIndex for fieldDataIndex=1:1:$l(lineContents,"~") do
"RTN","XINDX13",382,0)
 .. new fieldData set fieldData=$p(lineContents,"~",fieldDataIndex)
"RTN","XINDX13",383,0)
 .. quit:fieldData=""
"RTN","XINDX13",384,0)
 .. n fields s fields=$p(fieldData,";")
"RTN","XINDX13",385,0)
 .. quit:fields=""
"RTN","XINDX13",386,0)
 .. quit:fields=" "
"RTN","XINDX13",387,0)
 .. ;
"RTN","XINDX13",388,0)
 .. ; If zpiece is defined, then we have a COMPUTED EXPRESSION or M code
"RTN","XINDX13",389,0)
 .. n Zpiece s Zpiece=0
"RTN","XINDX13",390,0)
 .. n i f i=1:1:$l(fieldData,";") i $p(fieldData,";",i)="Z" s Zpiece=i quit
"RTN","XINDX13",391,0)
 .. ;
"RTN","XINDX13",392,0)
 .. ; This can be a "hidden" M field masqurading -- the entire line is M code
"RTN","XINDX13",393,0)
 .. ; NB: This is rare, but print templates support that.
"RTN","XINDX13",394,0)
 .. n isNonTradMCode s isNonTradMCode=0
"RTN","XINDX13",395,0)
 .. if 'Zpiece do
"RTN","XINDX13",396,0)
 ... n p1 s p1=$p(fields,",")
"RTN","XINDX13",397,0)
 ... i +p1=p1 quit  ; Just a normal field
"RTN","XINDX13",398,0)
 ... N X S X=$P(fields,";") D ^DIM
"RTN","XINDX13",399,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",400,0)
 ... I $D(X) s isNonTradMCode=1 s INDX=X d ADDLN^XINDX11 quit
"RTN","XINDX13",401,0)
 .. ;
"RTN","XINDX13",402,0)
 .. q:isNonTradMCode  ; We already have M code. Quit.
"RTN","XINDX13",403,0)
 .. ;
"RTN","XINDX13",404,0)
 .. q:'Zpiece  ; Straight field
"RTN","XINDX13",405,0)
 .. ;
"RTN","XINDX13",406,0)
 .. ; extract compiled code from file/subfile references
"RTN","XINDX13",407,0)
 .. n mCode s mCode=""
"RTN","XINDX13",408,0)
 .. n fileField,fileFieldIndex
"RTN","XINDX13",409,0)
 .. f fileFieldIndex=1:1:$l(fields,",") do  q:mCode]""
"RTN","XINDX13",410,0)
 ... s fileField=$p(fields,",",fileFieldIndex)
"RTN","XINDX13",411,0)
 ... i fileField'=+fileField s mCode=$p(fields,",",fileFieldIndex,99)
"RTN","XINDX13",412,0)
 .. ;
"RTN","XINDX13",413,0)
 .. i mCode="" quit  ; no compiled code in this field
"RTN","XINDX13",414,0)
 .. ;
"RTN","XINDX13",415,0)
 .. ; If zpiece is defined, see if computed expression or M code
"RTN","XINDX13",416,0)
 .. ; Get the potentially COMPUTED EXPRESSION code for this field
"RTN","XINDX13",417,0)
 .. n potComputedCode s potComputedCode=$p(fieldData,";",Zpiece+1)
"RTN","XINDX13",418,0)
 .. s potComputedCode=$e(potComputedCode,2,$l(potComputedCode)-1)
"RTN","XINDX13",419,0)
 .. ;
"RTN","XINDX13",420,0)
 .. ; If M Code is broken up, put it back together
"RTN","XINDX13",421,0)
 .. i $f(mCode,"X DXS") do
"RTN","XINDX13",422,0)
 ... n startdxs s startdxs=$f(mCode,"DXS")-3
"RTN","XINDX13",423,0)
 ... n enddxs s enddxs=$f(mCode,")",startdxs)-1
"RTN","XINDX13",424,0)
 ... n dxsString s dxsString=$e(mCode,startdxs,enddxs)
"RTN","XINDX13",425,0)
 ... n s1,s2
"RTN","XINDX13",426,0)
 ... s s1=$qs(dxsString,1)
"RTN","XINDX13",427,0)
 ... s s2=$qs(dxsString,2)
"RTN","XINDX13",428,0)
 ... n dxsCode s dxsCode=^DIPT(B,"DXS",s1,s2)
"RTN","XINDX13",429,0)
 ... n % s %("X "_dxsString)=dxsCode
"RTN","XINDX13",430,0)
 ... s mCode=$$REPLACE^XLFSTR(mCode,.%)
"RTN","XINDX13",431,0)
 .. ;
"RTN","XINDX13",432,0)
 .. ; Is it the same (after removing the quotes) as the MCode?
"RTN","XINDX13",433,0)
 .. ; If so, then this is not a computed expression
"RTN","XINDX13",434,0)
 .. i potComputedCode=mCode do  quit
"RTN","XINDX13",435,0)
 ... N X S X=mCode D ^DIM
"RTN","XINDX13",436,0)
 ... ; Add code to be INDEXed
"RTN","XINDX13",437,0)
 ... I $D(X) s INDX=X d ADDLN^XINDX11
"RTN","XINDX13",438,0)
 quit
"RTN","XINDX13",439,0)
 ;
"RTN","XINDX13",440,0)
PARENT(subfile) ; [Private] Find out who my parent is
"RTN","XINDX13",441,0)
 ; WARNING: Recursive algorithm
"RTN","XINDX13",442,0)
 if $data(^DD(subfile,0,"UP")) quit $$PARENT(^("UP"))
"RTN","XINDX13",443,0)
 quit subfile
"RTN","XINDX13",444,0)
 ;
"RTN","XINDX13",445,0)
ASSERT(x) i 'x s $EC=",u-assert,"
"RTN","XINDX13",446,0)
 ;
"RTN","XINDX2")
0^7^B29863411
"RTN","XINDX2",1,0)
XINDX2 ;ISC/REL,GRK,RWF - PROCESS "GRB" ;2018-02-28  10:30 AM
"RTN","XINDX2",2,0)
 ;;7.3;TOOLKIT;**20,27,48,110,121,133,140,10001**;Apr 25, 1995;Build 4
"RTN","XINDX2",3,0)
 ; Original routine authored by U.S. Department of Veterans Affairs
"RTN","XINDX2",4,0)
 ; OBJTEST+1:3 by Kitware/Jason Li
"RTN","XINDX2",5,0)
% S LINE=GRB,(CM,COM)="" F I=0:0 S STR=$P(LINE,$C(9),1),LINE=$P(LINE,$C(9),2,999),NOA=0 D:STR]"" ARGG Q:LINE']""
"RTN","XINDX2",6,0)
 Q
"RTN","XINDX2",7,0)
 ;Process argument
"RTN","XINDX2",8,0)
ARGG D ^XINDX9 S I=0,AC=999 F %=0:0 S %=$O(LV(%)) Q:%'>0  S I(%)=0
"RTN","XINDX2",9,0)
ARGS ;Proccess all agruments at this level
"RTN","XINDX2",10,0)
 S AC=LI+AC F  Q:AC'>LI  D INC Q:S=""  D ARG
"RTN","XINDX2",11,0)
 Q
"RTN","XINDX2",12,0)
 ;
"RTN","XINDX2",13,0)
ARG ;Process one argument
"RTN","XINDX2",14,0)
 I CH="," D PEEK I ","[Y Q:$$OBJF()  D E^XINDX1(21):($$FNC()'="$$") Q  ;if ",," must be function of object method
"RTN","XINDX2",15,0)
 Q:CH=Q
"RTN","XINDX2",16,0)
 ;Cache Objects;  Package.Class.method or ##class(package.class).method
"RTN","XINDX2",17,0)
 I $D(LV(LV,"OBJ",LI)) G OBJ2:CH=".",OBJ1
"RTN","XINDX2",18,0)
 I CH="#",$E(S,1,2)="##" D OBJ Q
"RTN","XINDX2",19,0)
 I S'[".",(CH?1A)!(CH="%") D LOC Q
"RTN","XINDX2",20,0)
 I CH="^" S LOC="G" G NAK:S="^",EXTGLO:S["[",EXTGLO:S["|",GLO Q
"RTN","XINDX2",21,0)
 I CH="$" D FUN Q
"RTN","XINDX2",22,0)
 I CH="?" D PAT Q
"RTN","XINDX2",23,0)
 I CH="(" D INC S NOA=S D DN,INC Q
"RTN","XINDX2",24,0)
 Q
"RTN","XINDX2",25,0)
 ;
"RTN","XINDX2",26,0)
NAK S LOC="N"
"RTN","XINDX2",27,0)
 G GLO
"RTN","XINDX2",28,0)
 ;
"RTN","XINDX2",29,0)
EXTGLO D E^XINDX1(50),EG,INC S S=U_S
"RTN","XINDX2",30,0)
 G GLO
"RTN","XINDX2",31,0)
 ;
"RTN","XINDX2",32,0)
EG N GK,LOC S GK="",LOC="L" ;HANDLE EXTENDED GLOBAL
"RTN","XINDX2",33,0)
 F  D INC Q:"]"[CH  Q:"|"[CH  D ARG
"RTN","XINDX2",34,0)
 Q
"RTN","XINDX2",35,0)
GLO S X=$E(S,2,99) I X]"",S'["^$",X'?1(1U,1"%").7UN D E^XINDX1(12)
"RTN","XINDX2",36,0)
 I GK["*",$E(S,1,2)["^%" D E^XINDX1(45)
"RTN","XINDX2",37,0)
 I S1="(" S S=S_S1 D PEEKDN S:(Y?1N.NP)!($A(Y)=34)!("^$J^$I^$H^"[(U_Y)) S=S_Y
"RTN","XINDX2",38,0)
 D ST(LOC,S) I S1="(" D INC2 S NOA=S D DN,INC
"RTN","XINDX2",39,0)
 Q
"RTN","XINDX2",40,0)
 ;
"RTN","XINDX2",41,0)
LOC S LOC="L" ;Check variables at end. I S'?1.8UN,S'?1"%".7UN,S'?1.8LN,S'?1"%".7LN D E^XINDX1(11)
"RTN","XINDX2",42,0)
 I S1="(" S S=S_S1 D PEEKDN S:(Y?1.N)!($A(Y)=34) S=S_Y
"RTN","XINDX2",43,0)
 D ST(LOC,S) I S1="(" D INC2 S NOA=S D DN,INC
"RTN","XINDX2",44,0)
 Q
"RTN","XINDX2",45,0)
OBJ ;Cache Objects within ##class
"RTN","XINDX2",46,0)
 S LOC="O"
"RTN","XINDX2",47,0)
 I S1'="("  D E^XINDX1(3)
"RTN","XINDX2",48,0)
 D PEEKDN S S=Y I S[".",'$$OBJTST(S) D E^XINDX1(64)
"RTN","XINDX2",49,0)
 D ST(LOC,S),INC2 S NOA=S D DN,INC
"RTN","XINDX2",50,0)
 Q
"RTN","XINDX2",51,0)
OBJ1 ;Cache Objects not within ##class, contains "."
"RTN","XINDX2",52,0)
 S LOC="O"
"RTN","XINDX2",53,0)
 D ST(LOC,S)
"RTN","XINDX2",54,0)
 Q
"RTN","XINDX2",55,0)
OBJ2 ;Method
"RTN","XINDX2",56,0)
 D PEEKDN
"RTN","XINDX2",57,0)
 I 'Y D INC2 S NOA=S D DN,INC
"RTN","XINDX2",58,0)
 Q
"RTN","XINDX2",59,0)
 ;
"RTN","XINDX2",60,0)
OBJF() ; return line where object has an open "(" for parameters
"RTN","XINDX2",61,0)
 N %
"RTN","XINDX2",62,0)
 Q:LV<2 0  ;must be down at least 1 level
"RTN","XINDX2",63,0)
 S %=$O(LV(LV-1,"OBJ",""),-1) ;find last object at previous level
"RTN","XINDX2",64,0)
 Q $S('%:0,LV(LV-1,%+1)="(":%,1:0) ; returns 0 if can't find object or object has no parameter
"RTN","XINDX2",65,0)
 ;
"RTN","XINDX2",66,0)
PEEK S Y=$G(LV(LV,LI+1))
"RTN","XINDX2",67,0)
 Q
"RTN","XINDX2",68,0)
 ;
"RTN","XINDX2",69,0)
INC2 S LI=LI+1 ;Drop into INC
"RTN","XINDX2",70,0)
INC S LI=LI+1,S=$G(LV(LV,LI)),S1=$G(LV(LV,LI+1)),CH=$E(S) G:$A(S)=10 ERR
"RTN","XINDX2",71,0)
 Q
"RTN","XINDX2",72,0)
 ;
"RTN","XINDX2",73,0)
DN S LI(LV)=LI,LI(LV,1)=AC,LV=LV+1,LI=LI(LV),AC=NOA
"RTN","XINDX2",74,0)
 D ARGS,UP
"RTN","XINDX2",75,0)
 Q
"RTN","XINDX2",76,0)
UP ;Inc LI as we save to skip the $C(10).
"RTN","XINDX2",77,0)
 D PEEK D:$A(Y)'=10 ERR S LI(LV)=LI+1,LV=LV-1,LI=LI(LV),AC=LI(LV,1)
"RTN","XINDX2",78,0)
 Q
"RTN","XINDX2",79,0)
 ;
"RTN","XINDX2",80,0)
PEEKDN S Y=$G(LV(LV+1,LI(LV+1)+1))
"RTN","XINDX2",81,0)
 Q
"RTN","XINDX2",82,0)
 ;
"RTN","XINDX2",83,0)
ERR D E^XINDX1(43) S (S,S1,CH)="" Q
"RTN","XINDX2",84,0)
 S Z=$P(LV(LV+1),$C(9),LI(LV+1),99),Z=$P(Z,$C(10)) W !,"COUNT=",$L(Z,",")
"RTN","XINDX2",85,0)
 ;functions
"RTN","XINDX2",86,0)
FUN N FUN S FUN=S G EXT:S["$$",PKG:S["$&",SPV:S1'["(" S NOA=$P(S,"^",2)
"RTN","XINDX2",87,0)
 D INC2 I S'>0 D E^XINDX1(43) ;Sit on NOA
"RTN","XINDX2",88,0)
 G:FUN["$TE" TEXT
"RTN","XINDX2",89,0)
 S Y=1 F Z1=LI(LV+1)+1:1 S X=$G(LV(LV+1,Z1)) Q:$A(X)=10!(X="")  S:X="," Y=Y+1
"RTN","XINDX2",90,0)
 I NOA,Y<NOA!(Y>$P(NOA,";",2)) D E^XINDX1(43)
"RTN","XINDX2",91,0)
 S NOA=S D DN,INC
"RTN","XINDX2",92,0)
 Q
"RTN","XINDX2",93,0)
 ;
"RTN","XINDX2",94,0)
TEXT ; process $T
"RTN","XINDX2",95,0)
 N X1,X2
"RTN","XINDX2",96,0)
 S Y=$$ASM^XINDX3(LV+1,LI(LV+1)+1,$C(10)) D ST("MK","$T("_$S($E(Y)'="+":Y,1:""))
"RTN","XINDX2",97,0)
 I $$VT(Y) D ST("I",Y) ;internal label
"RTN","XINDX2",98,0)
 ;check if external routine
"RTN","XINDX2",99,0)
 I Y["^",$$VT($P(Y,"^",2)) S X1=$P(Y,"^"),X2=$P(Y,"^",2),Y=X1 D ST("X",X2_$S($$VT(X1):" "_X1,1:""))
"RTN","XINDX2",100,0)
 D FLUSH(LV+1)
"RTN","XINDX2",101,0)
 Q
"RTN","XINDX2",102,0)
 ;special variables
"RTN","XINDX2",103,0)
SPV ;
"RTN","XINDX2",104,0)
 I "^$D^$EC^$ES^$ET^$I^$K^$P^$Q^$ST^$SY^"[("^"_X_"^") D ST("MK",X)
"RTN","XINDX2",105,0)
 Q
"RTN","XINDX2",106,0)
 ;
"RTN","XINDX2",107,0)
EXT ;Extrinsic functions
"RTN","XINDX2",108,0)
 I $E(S1)="^" S Y=$E(S1,2,99)_" "_S D INC S S=Y ;Build S and fall thru
"RTN","XINDX2",109,0)
 D ST($S(S[" ":"X",1:"I"),S) ;Internal, eXternal
"RTN","XINDX2",110,0)
 I S1["(" D INC2 S NOA=S D DN,INC ;Process param.
"RTN","XINDX2",111,0)
 Q
"RTN","XINDX2",112,0)
 ;
"RTN","XINDX2",113,0)
PKG ;External Package
"RTN","XINDX2",114,0)
 D ST("X",S) ;Record External name
"RTN","XINDX2",115,0)
 I S1["(" D INC2 S NOA=S D DN,INC ;Process param.
"RTN","XINDX2",116,0)
 Q
"RTN","XINDX2",117,0)
 ;
"RTN","XINDX2",118,0)
PAT D INC I $E(S)="@" D INC,ARG Q
"RTN","XINDX2",119,0)
 F  D REPCNT,PATCODE Q:$E(S)=""
"RTN","XINDX2",120,0)
 Q
"RTN","XINDX2",121,0)
 ;
"RTN","XINDX2",122,0)
REPCNT F I=1:1 Q:("0123456789."'[$E(S,I))!($E(S,I)="")
"RTN","XINDX2",123,0)
 S X=$E(S,1,I-1),S=$E(S,I,999) I ('$L(X))!($L(X,".")>2) S S="" D E^XINDX1(16)
"RTN","XINDX2",124,0)
 Q
"RTN","XINDX2",125,0)
 ;
"RTN","XINDX2",126,0)
PATCODE I $E(S)=Q S I=1 D PATQ S S=$E(S,I,999) S:$L(CH)&(",)"[CH) S=$E(S,2,999) Q
"RTN","XINDX2",127,0)
 F I=1:1 Q:("ACELNPUacelnpu()"'[$E(S,I))!($E(S,I)="")
"RTN","XINDX2",128,0)
 S X=$E(S,1,I-1),S=$E(S,I,999) I I=1 S S="" D E^XINDX1(16)
"RTN","XINDX2",129,0)
 I $E(S)="," S S=$E(S,2,999) ;Pull ',' out of alternation
"RTN","XINDX2",130,0)
 Q
"RTN","XINDX2",131,0)
 ;
"RTN","XINDX2",132,0)
PATQ F I=I+1:1 S CH=$E(S,I) Q:CH=""!(CH=Q)
"RTN","XINDX2",133,0)
 S I=I+1 D:CH="" E^XINDX1(6) S CH=$E(S,I) G:CH=Q PATQ
"RTN","XINDX2",134,0)
 Q
"RTN","XINDX2",135,0)
 ;
"RTN","XINDX2",136,0)
ST(LOC,S) S:'$D(V(LOC,S)) V(LOC,S)="" I $D(GK),GK]"",V(LOC,S)'[GK S V(LOC,S)=V(LOC,S)_GK
"RTN","XINDX2",137,0)
 S GK=""
"RTN","XINDX2",138,0)
 Q
"RTN","XINDX2",139,0)
 ;
"RTN","XINDX2",140,0)
VT(X) ;Check if a valid label
"RTN","XINDX2",141,0)
 Q (X?1A.31AN)!(X?1"%".31UN)!(X?1.31N)
"RTN","XINDX2",142,0)
 ;
"RTN","XINDX2",143,0)
VA(X) ;Check if VA Standard label ;P140
"RTN","XINDX2",144,0)
 Q (X?1U.15UN)!(X?1"%".15UN)!(X?1.16N)
"RTN","XINDX2",145,0)
 ;
"RTN","XINDX2",146,0)
FLUSH(L) ;Flush rest of list with this offset
"RTN","XINDX2",147,0)
 N I,CH S I=LI(L)+1 F I=I:1 S CH=$G(LV(L,I)) Q:$C(10)[CH  D:CH="(" FLUSH(L+1)
"RTN","XINDX2",148,0)
 S LI(L)=I Q
"RTN","XINDX2",149,0)
 ;
"RTN","XINDX2",150,0)
FNC(NEW) ;Sets or returns the current function
"RTN","XINDX2",151,0)
 I $D(NEW) S LV(LV+1,"FNC",LI)=NEW Q
"RTN","XINDX2",152,0)
 N W
"RTN","XINDX2",153,0)
 S W=+$S($D(LV(LV,"FNC",LI)):LI,$O(LV(LV,"FNC",LI),-1):$O(LV(LV,"FNC",LI),-1),1:$O(LV(LV,"FNC",LI))) ;patch 119,121
"RTN","XINDX2",154,0)
 Q $G(LV(LV,"FNC",W))
"RTN","XINDX2",155,0)
 ;
"RTN","XINDX2",156,0)
OP(NEW) ;Sets or returns the current operator
"RTN","XINDX2",157,0)
 I $D(NEW) S LV(LV,"OP",LI)=NEW Q
"RTN","XINDX2",158,0)
 N W S W=+$S($D(LV(LV,"OP",LI)):LI,1:$O(LV(LV,"OP",LI),-1))
"RTN","XINDX2",159,0)
 Q $G(LV(LV,"OP",W))
"RTN","XINDX2",160,0)
 ;
"RTN","XINDX2",161,0)
OBJTST(OBJ) ;test if OBJ exists, returns 1 if exists
"RTN","XINDX2",162,0)
 ;; Begin Change (OSEHRA/JL) Return 1 for non-Cache system
"RTN","XINDX2",163,0)
 Q:^%ZOSF("OS")'["OpenM" 1
"RTN","XINDX2",164,0)
 ;; END Change (OSEHRA/JL)
"RTN","XINDX2",165,0)
 Q:$G(OBJ)="" 0
"RTN","XINDX2",166,0)
 Q ##class(%Dictionary.ClassDefinition).%ExistsId(""_OBJ_"")
"RTN","XINDX2",167,0)
 ;
"RTN","XINDX3")
0^8^B16436366
"RTN","XINDX3",1,0)
XINDX3 ;ISC/REL,GRK,RWF - PROCESS MERGE/SET/READ/KILL/NEW/OPEN COMMANDS ;2018-02-22  12:56 PM
"RTN","XINDX3",2,0)
 ;;7.3;TOOLKIT;**20,27,61,68,110,121,128,132,133,140,10001**;Apr 25, 1995;Build 4
"RTN","XINDX3",3,0)
 ; Original routine authored by Department of Veterans Affairs
"RTN","XINDX3",4,0)
 ; RD3+3 contributed by George Timson (date written unknown)
"RTN","XINDX3",5,0)
PEEK S Y=$G(LV(LV,LI+1)) Q
"RTN","XINDX3",6,0)
PEEK2 S Y=$G(LV(LV,LI+2)) Q
"RTN","XINDX3",7,0)
INC2 S LI=LI+1 ;Drop into INC
"RTN","XINDX3",8,0)
INC S LI=LI+1,S=$G(LV(LV,LI)),S1=$G(LV(LV,LI+1)),CH=$E(S)
"RTN","XINDX3",9,0)
 G ERR:$A(S)=10 Q
"RTN","XINDX3",10,0)
DN S LI(LV)=LI,LI(LV,1)=AC,LV=LV+1,LI=LI(LV),AC=NOA
"RTN","XINDX3",11,0)
 Q
"RTN","XINDX3",12,0)
UP ;Inc LI as we save to skip the $C(10).
"RTN","XINDX3",13,0)
 D PEEK S:$A(Y)=10 LI=LI+1 S LI(LV)=LI,LV=LV-1,LI=LI(LV),AC=LI(LV,1) Q
"RTN","XINDX3",14,0)
PEEKDN S Y=$G(LV(LV+1,LI(LV+1)+1)) Q
"RTN","XINDX3",15,0)
FIND F Y=LI:1:AC Q:L[$G(LV(LV,Y))
"RTN","XINDX3",16,0)
ERR D E^XINDX1(43) S (S,S1,CH)="" Q
"RTN","XINDX3",17,0)
 Q
"RTN","XINDX3",18,0)
 Q
"RTN","XINDX3",19,0)
S ;Set
"RTN","XINDX3",20,0)
 S STR=ARG,ARG="",RHS=0 D ^XINDX9
"RTN","XINDX3",21,0)
S2 S GK="" D INC I S="" D:'RHS E^XINDX1(10) Q
"RTN","XINDX3",22,0)
 I CH=",","!""#&)*+-,./:;<=?\]_~"[$E(S1),RHS=1 D E^XINDX1(10) G S2 ;patch 121
"RTN","XINDX3",23,0)
 I CH="," S RHS=0 G S2
"RTN","XINDX3",24,0)
 I CH="=" S RHS=1 I "!#&)*,/:;<=?\]_~"[$E(S1) D:$E(S1,1,2)'="##" E^XINDX1(10) G S2 ;patch 119
"RTN","XINDX3",25,0)
 I CH="$",'RHS D  D:% E^XINDX1(10) ;Can't be on left side of set.
"RTN","XINDX3",26,0)
 . S %=1
"RTN","XINDX3",27,0)
 . I "$E$P$X$Y"[$E(S,1,2) S %=0 Q
"RTN","XINDX3",28,0)
 . I "$EC$ET$QS"[$E(S,1,3) S %=0 Q
"RTN","XINDX3",29,0)
 . I "$ZE$ZT"[$E(S,1,3) S %=0 Q  ;Pickup in XINDX9
"RTN","XINDX3",30,0)
 . Q
"RTN","XINDX3",31,0)
 I CH="^" D FL G S2
"RTN","XINDX3",32,0)
 I CH="@" S Y=$$ASM(LV,LI,",") S:Y'["=" RHS=1 D INC,ARG^XINDX2 G S2
"RTN","XINDX3",33,0)
 I CH="(",$D(LV(LV,"OBJ",LI-1)) D ARG^XINDX2 G S2
"RTN","XINDX3",34,0)
 I CH="(" D MULT G S2
"RTN","XINDX3",35,0)
 I CH="#",$E(S,1,2)="##" D ARG^XINDX2 G S2 ;Cache Objects
"RTN","XINDX3",36,0)
 D FL G S2
"RTN","XINDX3",37,0)
 ;NOA=number of arguments
"RTN","XINDX3",38,0)
MULT D INC S NOA=S I S'>0 S ERR=5 G ^XINDX1
"RTN","XINDX3",39,0)
 D DN S AC=AC+LI F  Q:AC'>LI  S:'RHS GK="*" D INC,ARG^XINDX2
"RTN","XINDX3",40,0)
 D UP
"RTN","XINDX3",41,0)
 Q
"RTN","XINDX3",42,0)
FL ;
"RTN","XINDX3",43,0)
 S:'RHS GK="*" D ARG^XINDX2
"RTN","XINDX3",44,0)
 Q
"RTN","XINDX3",45,0)
VLNF(X) ;Drop into VLN
"RTN","XINDX3",46,0)
VLN ;Valid Local Name > Variable
"RTN","XINDX3",47,0)
 S ERR=0
"RTN","XINDX3",48,0)
 Q:X?1(1U,1"%").15UN
"RTN","XINDX3",49,0)
 ;lower/mixed case, can't be namespaced ;p140
"RTN","XINDX3",50,0)
 I X?1(1A,1"%").15AN D:$E(RTN,1,2)=$E(X,1,2) E^XINDX1(57) Q
"RTN","XINDX3",51,0)
 D E^XINDX1(11) ;Too long or other problem
"RTN","XINDX3",52,0)
 Q
"RTN","XINDX3",53,0)
VGN ;Valid Global Name
"RTN","XINDX3",54,0)
 S ERR=0 I X'?1(1U,1"%").7UN D E^XINDX1(12)
"RTN","XINDX3",55,0)
 Q
"RTN","XINDX3",56,0)
KL ;Process KILL
"RTN","XINDX3",57,0)
 S STR=ARG,ARG(1)=ARG,ARG="" D ^XINDX9
"RTN","XINDX3",58,0)
A D INC Q:S=""  G A:CH="," S LOC="L" D @$S(CH="@":"KL1",CH="^":"KL2",CH="(":"KL4",1:"KL3") G A
"RTN","XINDX3",59,0)
KL1 D INC,ARG^XINDX2 Q
"RTN","XINDX3",60,0)
KL2 S GK="!"
"RTN","XINDX3",61,0)
 I S1'="(" S ERR=24 D ^XINDX1
"RTN","XINDX3",62,0)
 G ARG^XINDX2
"RTN","XINDX3",63,0)
KL3 I "^DT^DTIME^DUZ^IOST^IOM^U^"[("^"_S_"^") S ERR=39,ERR(1)=S D ^XINDX1
"RTN","XINDX3",64,0)
 I "IO"=S D:S1="(" PEEKDN S ERR=39,ERR(1)=S_$S(S1["(":S1_Y_")",1:"") D:S1'="(" ^XINDX1 I S1="(",("QC"'[$E(Y,2)) D ^XINDX1
"RTN","XINDX3",65,0)
KL5 S GK="!" D ARG^XINDX2 Q  ;KILL SUBS
"RTN","XINDX3",66,0)
 Q
"RTN","XINDX3",67,0)
KL4 S NOA=S1 D DN,ARGS^XINDX2,UP,INC2 Q
"RTN","XINDX3",68,0)
NE ;NEW
"RTN","XINDX3",69,0)
 S ERR=$S("("[$E(ARG):26,1:0) I ERR G ^XINDX1 ;look for null or (
"RTN","XINDX3",70,0)
 S STR=ARG D ^XINDX9 K ERTX
"RTN","XINDX3",71,0)
N2 D INC Q:S=""  G N2:CH=","
"RTN","XINDX3",72,0)
 ;I CH?1P,("%@()"'[CH)&("$E"'[$E(S,1,2)) D E^XINDX1(11) G N2
"RTN","XINDX3",73,0)
 ;check for "@", functions, special variables, or %variables
"RTN","XINDX3",74,0)
 I CH?1P,(CH'=S) D  I $G(ERTX)]"" K ERTX G N2
"RTN","XINDX3",75,0)
 . Q:"@("[CH!(CH="%"&($E(S,2,8)?.1A.E))  ;check what's indirected on next pass or
"RTN","XINDX3",76,0)
 . ;if not $ET or $ES must use indirection
"RTN","XINDX3",77,0)
 . I "$"[CH Q:$E(S,1,3)="$ET"!($E(S,1,3)="$ES")  I LI>1,(LV(LV,LI-1)="@") Q
"RTN","XINDX3",78,0)
 . D E^XINDX1(11)
"RTN","XINDX3",79,0)
 . Q
"RTN","XINDX3",80,0)
 S GK="~" D ARG^XINDX2
"RTN","XINDX3",81,0)
 G N2
"RTN","XINDX3",82,0)
 ;
"RTN","XINDX3",83,0)
RD S STR=ARG D ^XINDX9 S ARG=""
"RTN","XINDX3",84,0)
RD1 D INC Q:S=""
"RTN","XINDX3",85,0)
 ;I (CH="!")!(CH=",")!(CH=Q)!(CH="#") G RD1
"RTN","XINDX3",86,0)
 ;I CH="^" S ERR=11 D ^XINDX1
"RTN","XINDX3",87,0)
 I '((CH="%")!(CH?1A)!(CH="*")) D RD3 G RD1
"RTN","XINDX3",88,0)
 S Y=$$ASM(LV,LI,",") I Y'[":" S ERR=33,RDTIME=1 D ^XINDX1
"RTN","XINDX3",89,0)
 D RD2 G RD1
"RTN","XINDX3",90,0)
RD2 Q:","[CH
"RTN","XINDX3",91,0)
 I "*#"[CH D E^XINDX1(41)
"RTN","XINDX3",92,0)
 I "#:"[CH D INC,ARG^XINDX2,INC G RD2
"RTN","XINDX3",93,0)
 I (CH="%")!(CH?1A) S LOC="L",GK="*" D ARG^XINDX2,INC G RD2
"RTN","XINDX3",94,0)
 D INC G RD2
"RTN","XINDX3",95,0)
RD3 Q:","[CH  I "!#?"[CH D INC G RD3
"RTN","XINDX3",96,0)
 I (CH="%")!(CH?1A)!(CH="@") D ARG^XINDX2,INC G RD3
"RTN","XINDX3",97,0)
 I CH="$" S ERR=21,RDTIME=1 D ^XINDX1 ;**MSC/EJ  READ can't contain $$ (Erwin); READ $P is invalid.
"RTN","XINDX3",98,0)
 Q
"RTN","XINDX3",99,0)
O S STR=ARG,AC=99 D ^XINDX9,INC S ARG="" I S["@" D ARGS^XINDX2 Q
"RTN","XINDX3",100,0)
 D ARG^XINDX2,INC D  D INC,ARGS^XINDX2 Q
"RTN","XINDX3",101,0)
 . F  D INC Q:":"[S
"RTN","XINDX3",102,0)
 . Q
"RTN","XINDX3",103,0)
 Q
"RTN","XINDX3",104,0)
ERRCP S ERR=5 D ^XINDX1 Q
"RTN","XINDX3",105,0)
ST ;
"RTN","XINDX3",106,0)
 S:'$D(V(LOC,S)) V(LOC,S)="" S:V(LOC,S)'[GK V(LOC,S)=V(LOC,S)_GK,GK="" Q
"RTN","XINDX3",107,0)
 Q
"RTN","XINDX3",108,0)
ASM(WL,SI,L,SEP) ;assemble line Y from LV array
"RTN","XINDX3",109,0)
 N %,CH,Y S SEP=$G(SEP),Y="" F %=SI:1 S CH=$G(LV(WL,%)) Q:L[CH  S Y=Y_SEP_CH
"RTN","XINDX3",110,0)
 Q Y
"RTN","XINDX4")
0^9^B14273659
"RTN","XINDX4",1,0)
XINDX4 ;ISC/REL,GRK - PROCESS DO, GO TO, WRITE & FOR COMMANDS ;08/05/08  13:59
"RTN","XINDX4",2,0)
 ;;7.3;TOOLKIT;**20,61,68,110,128,133**;Apr 25, 1995;Build 4
"RTN","XINDX4",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XINDX4",4,0)
 ;DO and GO; IND("DO1") checks if we already checked a DO at this level
"RTN","XINDX4",5,0)
DG1 I ARG="" S:'IND("DO1") IND("DO")=IND("DO")+1,IND("DO1")=1 Q
"RTN","XINDX4",6,0)
DG S (LBL,PGM,OFF,PRM)="",S=1,L="+^:," S:$E(ARG,1,2)="@^" S=3
"RTN","XINDX4",7,0)
 D LOOP S LBL=$E(ARG,1,I-1)
"RTN","XINDX4",8,0)
 ;Cache Object method contain ".", check if label is an object or begins with ##
"RTN","XINDX4",9,0)
 I $P(LBL,"(")["."!($E(LBL,1,2)="##") Q
"RTN","XINDX4",10,0)
 I CH="+" S (J,S)=I+1,ERR=30 D ^XINDX1:$E(ARG)'="@" S:$E(ARG,I)="^" S=I+1 D LOOP S OFF=$E(ARG,J,I-1) I OFF'?.N S GRB=GRB_$C(9)_OFF
"RTN","XINDX4",11,0)
 I CH="^" S S=I+1 D LOOP S PGM=$E(ARG,S,I-1)
"RTN","XINDX4",12,0)
 I CH=":" S S=I+1,L="," D LOOP S S=$E(ARG,S,I-1) I S'="" S GRB=GRB_$C(9)_S
"RTN","XINDX4",13,0)
 S ARG=$E(ARG,I+1,999)
"RTN","XINDX4",14,0)
 I $E(LBL)="@" S GRB=GRB_$C(9)_$E(LBL,2,999),LBL="@("
"RTN","XINDX4",15,0)
 I $E(PGM)="@" S GRB=GRB_$C(9)_$E(PGM,2,999),PGM="@("
"RTN","XINDX4",16,0)
 I LBL[")" S PRM=$$INSIDE(LBL,"(",")"),LBL=$P(LBL,"(")
"RTN","XINDX4",17,0)
 I PGM[")" S PRM=$$INSIDE(PGM,"(",")"),PGM=$P(PGM,"(")
"RTN","XINDX4",18,0)
 I $L(PRM) S GRB=GRB_$C(9)_$$PRUNE($$CNG(PRM,",,",","),",") ;strip null parameters
"RTN","XINDX4",19,0)
 I $G(IND("DOL")),CM="G",PGM]"" D E^XINDX1(63) ;can't goto another routine out of block structure
"RTN","XINDX4",20,0)
 S:OFF'="" LBL=LBL_"+"_OFF
"RTN","XINDX4",21,0)
 S S="",LOC="I" I PGM'="" S S=PGM_" ",LOC="X"
"RTN","XINDX4",22,0)
 S:LBL_PGM["&" LOC="X"
"RTN","XINDX4",23,0)
 S:LBL'="" S=S_LBL I S'="" D ST
"RTN","XINDX4",24,0)
 G:ARG'="" DG K LBL,PGM,OFF,PRM
"RTN","XINDX4",25,0)
 Q
"RTN","XINDX4",26,0)
LOOP F I=S:1 S CH=$E(ARG,I) D QUOTE:CH=Q,PAREN:CH="(",ERRCP:CH=")" Q:L[CH
"RTN","XINDX4",27,0)
 Q
"RTN","XINDX4",28,0)
PAREN S PC=1
"RTN","XINDX4",29,0)
 F I=I+1:1 S CH=$E(ARG,I) Q:PC=0!(CH="")  I "()"""[CH D QUOTE:CH=Q S PC=PC+$S("("[CH:1,")"[CH:-1,1:0)
"RTN","XINDX4",30,0)
 S ERR=5 D:PC ^XINDX1
"RTN","XINDX4",31,0)
 Q
"RTN","XINDX4",32,0)
QUOTE F I=I+1:1 S CH=$E(ARG,I) Q:CH=""!(CH=Q)
"RTN","XINDX4",33,0)
 I CH="" S ERR=6 G ^XINDX1
"RTN","XINDX4",34,0)
 Q
"RTN","XINDX4",35,0)
ST S R=$F(S,"(") S:R>1 S=$E(S,1,R-1) S:"IX"[LOC IND("COM")=IND("COM")_","_S
"RTN","XINDX4",36,0)
 S:'$D(V(LOC,S)) V(LOC,S)="" S:LOC="L"&(V(LOC,S)'["*") V(LOC,S)=V(LOC,S)_"*" Q
"RTN","XINDX4",37,0)
 Q
"RTN","XINDX4",38,0)
FR Q:$E(ARG,1)="@"  S S=2,L="=" D LOOP I CH="" S ERR=8 G ^XINDX1
"RTN","XINDX4",39,0)
 S GK="*",STR=$E(ARG,1,I-1),ARG=$E(ARG,I+1,999) D ARGG^XINDX2
"RTN","XINDX4",40,0)
 Q
"RTN","XINDX4",41,0)
WR N S0,WR S STR=ARG,WR="#!,",S0="" ;Need to handle /controlmnemonic
"RTN","XINDX4",42,0)
 D ^XINDX9 S ARG=""
"RTN","XINDX4",43,0)
 F  D INC^XINDX2 Q:S=""  D  S S0=S
"RTN","XINDX4",44,0)
 . I S="?" D:WR[S1 E^XINDX1(49) Q
"RTN","XINDX4",45,0)
 . I S="!",WR'[$E(S0) D E^XINDX1(59) Q  ;Look for var!
"RTN","XINDX4",46,0)
 . I S="!","#!?,"'[$E(S1) D E^XINDX1(59) Q  ;Look for !var
"RTN","XINDX4",47,0)
 . D ARG^XINDX2
"RTN","XINDX4",48,0)
 . Q
"RTN","XINDX4",49,0)
 Q
"RTN","XINDX4",50,0)
ERRCP S ERR=5 D ^XINDX1
"RTN","XINDX4",51,0)
 Q
"RTN","XINDX4",52,0)
SET S ARG=$E(ARG,1,I-1)_","_$E(ARG,I+1,999)
"RTN","XINDX4",53,0)
 Q
"RTN","XINDX4",54,0)
XE S GRB=GRB_$C(9)_ARG,ARG=""
"RTN","XINDX4",55,0)
 Q
"RTN","XINDX4",56,0)
REP S L=",:",S=1 D LOOP I CH=":" S ARG=$E(ARG,I+1,999),L="," D LOOP
"RTN","XINDX4",57,0)
 S ARG=$E(ARG,I+1,999) Q:ARG=""
"RTN","XINDX4",58,0)
 G REP
"RTN","XINDX4",59,0)
 ;
"RTN","XINDX4",60,0)
ZC I "ILRS"'[$E(CM,2)!($E(CM,2)="") S ARG="" Q  ;Zcommands
"RTN","XINDX4",61,0)
 S COM=$E(CM,1,2) Q:CM="ZI"  G:CM="ZR" ZR
"RTN","XINDX4",62,0)
U1 S L=",",S=1 D LOOP S S=$E(ARG,1,I-1),ARG=$E(ARG,I+1,999)
"RTN","XINDX4",63,0)
 S:$E(S,1)="@" S=$E(S,2,999),GRB=GRB_$C(9)_S Q:ARG=""  G U1
"RTN","XINDX4",64,0)
ZR Q:ARG=""  S L=":,",S=1 D LOOP S S=$E(ARG,1,I-1),ARG=$E(ARG,I+1,999)
"RTN","XINDX4",65,0)
 I $E(S,1)="@" S GRB=GRB_$C(9)_S G ZR
"RTN","XINDX4",66,0)
 S:S["+" GRB=GRB_$C(9)_$P(S,"+",2,999)
"RTN","XINDX4",67,0)
 G ZR
"RTN","XINDX4",68,0)
LO ;Lock -- Look for timeouts
"RTN","XINDX4",69,0)
 N LK
"RTN","XINDX4",70,0)
 I ARG="" Q
"RTN","XINDX4",71,0)
 S S=1
"RTN","XINDX4",72,0)
 F  D  Q:CH=""
"RTN","XINDX4",73,0)
 . I "+-"'[$E(ARG,S) D E^XINDX1(61)
"RTN","XINDX4",74,0)
 . S L="-:,",LK=0 D LOOP S S=I+1
"RTN","XINDX4",75,0)
 . I CH="-" S L="," D LOOP S S=I+1 Q
"RTN","XINDX4",76,0)
 . I CH=":" S L=",",LK=1 D LOOP S S=I+1
"RTN","XINDX4",77,0)
 . I CH="," D:'LK E^XINDX1(60) S LK=0 Q
"RTN","XINDX4",78,0)
 . I CH="" D:'LK E^XINDX1(60) Q
"RTN","XINDX4",79,0)
 . Q
"RTN","XINDX4",80,0)
 S GRB=GRB_$C(9)_ARG,ARG=""
"RTN","XINDX4",81,0)
 Q
"RTN","XINDX4",82,0)
Q ;QUIT followed by comment or in structure Do or For loop, must have 2 spaces
"RTN","XINDX4",83,0)
 I $E(ARG)=";"!$G(IND("DOL"))!$G(IND("F")) S ARG="",ERR=9 G ^XINDX1
"RTN","XINDX4",84,0)
 Q
"RTN","XINDX4",85,0)
PT(X) ;Tag for parameter passing
"RTN","XINDX4",86,0)
 S ^UTILITY($J,1,RTN,"P",LAB)=X
"RTN","XINDX4",87,0)
 Q
"RTN","XINDX4",88,0)
PC ;Parameter passing call
"RTN","XINDX4",89,0)
 N LOC S LOC="P" D ST
"RTN","XINDX4",90,0)
 Q
"RTN","XINDX4",91,0)
INSIDE(X,X1,X2) ;Return the data inside the param x1,x2
"RTN","XINDX4",92,0)
 S J=$L(X,X2)-1,J=$S(J<1:1,1:J)
"RTN","XINDX4",93,0)
 Q $P($P(X,X2,1,J),X1,2,99)
"RTN","XINDX4",94,0)
 ;
"RTN","XINDX4",95,0)
SEP(ST,SP,RV) ;String,Separters,Return array)
"RTN","XINDX4",96,0)
 N %,N,Q S Q=$C(34) ;QUOTE
"RTN","XINDX4",97,0)
 F N=1:1 S %=$E(ST,N) D SQT:%=Q Q:SP[%
"RTN","XINDX4",98,0)
 S RV=N-1,RV(1)=$E(ST,1,N)
"RTN","XINDX4",99,0)
 Q
"RTN","XINDX4",100,0)
 ;
"RTN","XINDX4",101,0)
SQT F N=N+1:1 Q:Q[$E(ST,N)
"RTN","XINDX4",102,0)
 Q
"RTN","XINDX4",103,0)
CNG(S1,S2,S3) ;String,replace,with
"RTN","XINDX4",104,0)
 ;
"RTN","XINDX4",105,0)
 F  Q:S1'[S2  S S1=$P(S1,S2)_S3_$P(S1,S2,2,999)
"RTN","XINDX4",106,0)
 Q S1
"RTN","XINDX4",107,0)
PRUNE(S1,S2) ;String,prune char from front and back
"RTN","XINDX4",108,0)
 F  Q:$E(S1)'=S2  S S1=$E(S1,2,999)
"RTN","XINDX4",109,0)
 F  Q:$E(S1,$L(S1))'=S2  S S1=$E(S1,1,$L(S1)-1)
"RTN","XINDX4",110,0)
 Q S1
"RTN","XINDX5")
0^10^B11449325
"RTN","XINDX5",1,0)
XINDX5 ;SF-ISC/RWF - CROSS REFERENCE ALL ROUTINES ;2018-02-22  12:56 PM
"RTN","XINDX5",2,0)
 ;;7.3;TOOLKIT;**20,27,61,121,133,10001**;Apr 25, 1995;Build 4
"RTN","XINDX5",3,0)
 ; Routine originally authored by Department of Veterans Affairs
"RTN","XINDX5",4,0)
 ; VTAG+1 modified by John McCormack
"RTN","XINDX5",5,0)
 G END:$D(IND("QUIT")) I INP(8) W !,"Called Routines",! D ^XINDX52 ;Get called routines
"RTN","XINDX5",6,0)
 K ARG,CCN,CH,COM,ERR,GK,GRB,I,INDDA,INDDS,L,LAB,LAB0,LC,LIN,LOC,PC,PRV,R,RTN,S,STR,TXT,V,X,Y
"RTN","XINDX5",7,0)
 D ^XINDX53:INP(7) ;Load routine file
"RTN","XINDX5",8,0)
 ;Check called tags and routines
"RTN","XINDX5",9,0)
 S RN="$",TXT="" W !!,"--- CROSS REFERENCING ---",!
"RTN","XINDX5",10,0)
A S RN=$O(^UTILITY($J,RN)),L="",LABO=0 I RN="" G B
"RTN","XINDX5",11,0)
 F  S L=$O(^UTILITY($J,1,RN,"X",L)) Q:L=""  S XX2=^(L,0),XX1=$P(L," ",2),T=$P(XX1,"+",1),P=$P(L," ",1) D AA
"RTN","XINDX5",12,0)
 G A
"RTN","XINDX5",13,0)
AA Q:P=""  I '$D(^UTILITY($J,1,P)) D  Q  ;We can now check % routines
"RTN","XINDX5",14,0)
 . I (P["&")!(P["@") Q  ;External subroutine
"RTN","XINDX5",15,0)
 . S:T["$" T=$E(T,3,99) S:P["(" P=$P(P,"(")
"RTN","XINDX5",16,0)
 . I '$$VTAG(P) S ERR=52,ERR(1)=P D AAER(.ERR,RN,"",0) Q
"RTN","XINDX5",17,0)
 . S X=$T(^@P) I X="" S ERR=52,ERR(1)=P D AAER(.ERR,RN,$P(XX2,","),0) Q
"RTN","XINDX5",18,0)
 . Q:T=""
"RTN","XINDX5",19,0)
 . I '$$VTAG(T) D AAER(37,RN,$P(XX2,","),0) Q
"RTN","XINDX5",20,0)
 . I $$VTAG(T),$T(@T^@P)="" S E=38,E(1)="MISSING LABEL "_XX1_"^"_P D AAER(.E,RN,"",0)
"RTN","XINDX5",21,0)
 . Q
"RTN","XINDX5",22,0)
 I T]"",$D(^UTILITY($J,1,P)) D
"RTN","XINDX5",23,0)
 . S:T["$$" T=$E(T,3,99) S:T["@" T=""
"RTN","XINDX5",24,0)
 . I T]"",'$D(^UTILITY($J,1,P,"T",T)) S E=38,E(1)="MISSING LABEL (see INVOKED BY list)." D AAER(.E,P,XX1,0)
"RTN","XINDX5",25,0)
 Q
"RTN","XINDX5",26,0)
AAER(ERR,RTN,LAB,LABO) ;Report error. error code, routine, label, label offset
"RTN","XINDX5",27,0)
 D ^XINDX1
"RTN","XINDX5",28,0)
 Q
"RTN","XINDX5",29,0)
VTAG(K) ;Check for a valid tag. works for routine name.
"RTN","XINDX5",30,0)
 Q (K?1(1"%",1A).15NA)!(K?1.16N)
"RTN","XINDX5",31,0)
 ;
"RTN","XINDX5",32,0)
B D ^XINDX51
"RTN","XINDX5",33,0)
END W:$D(IND("QUIT")) !!,"--- ",$S($D(ZTSTOP):"TASK ",1:""),"STOPPED ---" W !!,"--- END ---"
"RTN","XINDX5",34,0)
 I IO'=IO(0) U IO(0) W !,"--- D O N E ---" U IO
"RTN","XINDX5",35,0)
 D ^%ZISC
"RTN","XINDX5",36,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","XINDX5",37,0)
CLEAN ;Come here from XINDX6 if queued output.
"RTN","XINDX5",38,0)
 K %,%1,%2,%I1,%IN1,%UCN,A,ARG,C,C9,CCN,CH,COM,DA,DIC,DUOUT,ERR,ERTX,F,F1,G,GK,GRB,H,HED,HS
"RTN","XINDX5",39,0)
 K ^UTILITY($J),I,IND,INDB,INDC,INDDA,INDDS,INDF,INDFN,INDLC,INDPM,INDX,INDXDT,INDXJ,INP,IP,J,K,K1,K3,L,LAB,LABO,LBL,LC,LIN,LINE,LOC,NRO,OFF,P,PC,PGM,POP,POST,Q,R,RDTIME,RHS,ROU,RTN,S,S1,STR,SYM,TAB,TAG,TXT,TY,V,VZ,X,X1,X2,X3,Y
"RTN","XINDX5",40,0)
 Q
"RTN","XINDX5",41,0)
CRX S RTN="$" F I=0:0 S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  F LOC="L","G","O","MK","N","X" D CR0 ;patch 121
"RTN","XINDX5",42,0)
 K VZ Q
"RTN","XINDX5",43,0)
 ;
"RTN","XINDX5",44,0)
CR0 N VZ S S=-1 I LOC="X",'$D(^UTILITY($J,1,"***","X",RTN_" ")) S ^UTILITY($J,1,"***","X",RTN_" ")=""
"RTN","XINDX5",45,0)
CR1 S S=$O(^UTILITY($J,1,RTN,LOC,S)) Q:S=""  ;Loop
"RTN","XINDX5",46,0)
 S X=$G(^UTILITY($J,1,RTN,LOC,S))
"RTN","XINDX5",47,0)
 F J=1:1:$L(X) S:$G(^UTILITY($J,1,"***",LOC,S))'[$E(X,J) ^(S)=$G(^(S))_$E(X,J) ;Pass on flags
"RTN","XINDX5",48,0)
 F J=0:1 Q:'$D(^UTILITY($J,1,RTN,LOC,S,J))  D CR2
"RTN","XINDX5",49,0)
 G CR1
"RTN","XINDX5",50,0)
 ;
"RTN","XINDX5",51,0)
CR2 S PC="" I LOC'="X" S:^UTILITY($J,1,RTN,LOC,S,J)["*" PC=PC_"*" S:^(J)["!" PC=PC_"!" S:^(J)["~" PC=PC_"~" D CR3(RTN,S,LOC) Q
"RTN","XINDX5",52,0)
 Q:$D(VZ(S))  S S1=$S($P(S," ",2)]"":$P(S," ",2)_"^",1:"")_$P(S," ",1),VZ(S)=""
"RTN","XINDX5",53,0)
 ;S X1=LOC,X2=S,X3=RTN,LOC="Z",S=RTN,RTN=S1 D CR3 S LOC=X1,S=X2,RTN=X3 K X1,X2,X3
"RTN","XINDX5",54,0)
 D CR3(S1,RTN,"Z"),CR3(RTN,S,LOC)
"RTN","XINDX5",55,0)
 Q
"RTN","XINDX5",56,0)
CR3(X1,X2,X3) ;(RTN,REF,LOC)
"RTN","XINDX5",57,0)
 S K=0
"RTN","XINDX5",58,0)
CR4 S ARG="" I $D(^UTILITY($J,1,"***",X3,X2,K)) S ARG=^(K) I $L(ARG)>230 S K=K+1 G CR4
"RTN","XINDX5",59,0)
 S ^UTILITY($J,1,"***",X3,X2,K)=ARG_X1_PC_"," Q
"RTN","XINDX51")
0^11^B33518938
"RTN","XINDX51",1,0)
XINDX51 ;ISC/REL,GRK,RWF - PRINT ROUTINE ;2018-02-22  2:42 PM
"RTN","XINDX51",2,0)
 ;;7.3;TOOLKIT;**20,48,61,110,133,10001**;Apr 25, 1995;Build 4
"RTN","XINDX51",3,0)
 ; Original routine authored by Department of Veterans Affairs
"RTN","XINDX51",4,0)
 ; B1+1 added by David Whitten 2018
"RTN","XINDX51",5,0)
 ; BHDR+1 corrected by Geroge Timson 2018
"RTN","XINDX51",6,0)
 ; WR,WORL,B1,P3 modified by George Timson 2018
"RTN","XINDX51",7,0)
 ;Setup Local IO paramiters
"RTN","XINDX51",8,0)
B S RTN="",INL(1)=IOM-2,INL(2)=IOSL-4,INL(3)=("C"=$E(IOST)),INL(4)=IOM-1,PG=0,INL(5)="Compiled list of Errors and Warnings "
"RTN","XINDX51",9,0)
 K ER,HED D HD1 ;Do header
"RTN","XINDX51",10,0)
 ;Show Errors
"RTN","XINDX51",11,0)
 F  S RTN=$O(^UTILITY($J,1,RTN)) Q:RTN=""!$D(IND("QUIT"))  S X=^(RTN,0) I $D(^UTILITY($J,1,RTN,"E"))>9 S HED=$$BHDR(RTN,X) D HD,WERR(1)
"RTN","XINDX51",12,0)
 W:'$D(ER) !,"No errors or warnings to report",!
"RTN","XINDX51",13,0)
 ;Did they want more?
"RTN","XINDX51",14,0)
 G END:'INP(1)!$D(IND("QUIT")),CR:INP(6)
"RTN","XINDX51",15,0)
 ;Show detail on each routine
"RTN","XINDX51",16,0)
 W !!,"--- Routine Detail"
"RTN","XINDX51",17,0)
 W:INP(5)?1A "   --- with "_$S(INP(5)["R":"REGULAR",INP(5)["S":"STRUCTURED",INP(5)["B":"R/S",1:"")_" ROUTINE LISTING" W " ---"
"RTN","XINDX51",18,0)
 S RTN="$",INDB="R" ;Report on each routine
"RTN","XINDX51",19,0)
BL F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""!('INP(4)&(RTN?1"|"1.4L.NP))!$D(IND("QUIT"))  D B1,CHK
"RTN","XINDX51",20,0)
 ;Exit or do Cross-Refference
"RTN","XINDX51",21,0)
 G END:NRO<2,END:$D(IND("QUIT")),CR
"RTN","XINDX51",22,0)
 ;
"RTN","XINDX51",23,0)
BHDR(R,X) ;Build hdr ; (GFT d 8 -> 15 to print whole routine name)
"RTN","XINDX51",24,0)
 Q $E(R_"       ",1,15)_" * *  "_$P(X,"^",2)_" Lines,  "_(+X)_" Bytes, Checksum: "_$G(^UTILITY($J,1,R,"RSUM"))
"RTN","XINDX51",25,0)
 ;
"RTN","XINDX51",26,0)
WERR(FL) ;Write error messages
"RTN","XINDX51",27,0)
 N ER2
"RTN","XINDX51",28,0)
 F ER=1:1 Q:'$D(^UTILITY($J,1,RTN,"E",ER))!$D(IND("QUIT"))  S %=^(ER) D
"RTN","XINDX51",29,0)
 . I $Y'<INL(2) D HD K ER2
"RTN","XINDX51",30,0)
 . D:FL&(%>0)&($G(ER2)'=+%) WORL(^UTILITY($J,1,RTN,0,+%,0)) ;Write the routine line
"RTN","XINDX51",31,0)
 . W !?3,$P(%,$C(9),2) W:$X>16 ! W ?16,$P(%,$C(9),3) S ER2=+% ;Write the error p110
"RTN","XINDX51",32,0)
 . Q
"RTN","XINDX51",33,0)
 Q
"RTN","XINDX51",34,0)
 ;
"RTN","XINDX51",35,0)
WR ;Write one routine
"RTN","XINDX51",36,0)
 S X=^UTILITY($J,1,RTN,0),INL(5)=$$BHDR(RTN,X)
"RTN","XINDX51",37,0)
 D HD1 W !,?14,$P(X,"^",3)_" bytes in comments" G:'INP(2) B2
"RTN","XINDX51",38,0)
 I $G(ROU),'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,1)),12,IOM) S IND("QUIT")=1 ; GFT addition: Print Tammy's Documentation File
"RTN","XINDX51",39,0)
 F I=1:1 Q:'$D(^UTILITY($J,1,RTN,0,I))  S X=^(I,0) D
"RTN","XINDX51",40,0)
 . D:$Y'<INL(2) HD1 I $D(IND("QUIT")) S I=99999 Q
"RTN","XINDX51",41,0)
 . D WORL(X) ;Write routine line
"RTN","XINDX51",42,0)
 . Q
"RTN","XINDX51",43,0)
 Q
"RTN","XINDX51",44,0)
 ;
"RTN","XINDX51",45,0)
WORL(D) ;Write one routine line
"RTN","XINDX51",46,0)
 N J,L
"RTN","XINDX51",47,0)
 I $G(ROU) S J=$P($P(D," "),"(") S:J]"" TAG=J S:J="" TAG=$P(TAG,"+")_"+"_($P(TAG,"+",2)+1) ; GFT addition: Print Tammy's Documentation File
"RTN","XINDX51",48,0)
 S L=$P(D," ",1),D=$P(D," ",2,999)
"RTN","XINDX51",49,0)
 F J=8,9:0 W !,L,?J," " W:$X>10 "--",!,?10 W $E(D,1,INL(4)-J) S D=$E(D,INL(4)-J+1,999),L="" Q:D=""
"RTN","XINDX51",50,0)
 I $G(ROU),TAG]"" S L=$O(^DIZ(1009.1,ROU,2,"B",TAG,0)) I L,'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,2,L,1)),12,IOM) S IND("QUIT")=1 ; GFT ditto
"RTN","XINDX51",51,0)
 Q
"RTN","XINDX51",52,0)
 ;
"RTN","XINDX51",53,0)
CHK I $D(ZTQUEUED),$$S^%ZTLOAD S IND("QUIT")=1,ZTSTOP=1
"RTN","XINDX51",54,0)
 S:$D(IND("QUIT")) RTN="~"
"RTN","XINDX51",55,0)
 Q
"RTN","XINDX51",56,0)
 ;
"RTN","XINDX51",57,0)
B1 I '$D(^UTILITY($J,1,RTN,0)) Q  ;No data to show
"RTN","XINDX51",58,0)
 N ROU,TAG S ROU=$O(^DIZ(1009.1,"B",RTN,0)),TAG=RTN ; GFT Tammy Docs
"RTN","XINDX51",59,0)
 S:INP(5)["N" OPT("NUM")=1
"RTN","XINDX51",60,0)
 D:INP(5)["S"!(INP(5)["B") ^XINDX8 ;Show structured listing
"RTN","XINDX51",61,0)
 D:INP(5)["F" SC
"RTN","XINDX51",62,0)
 D:INP(5)["R"!(INP(5)["B") WR ;Show normal listing
"RTN","XINDX51",63,0)
B2 ;
"RTN","XINDX51",64,0)
 G:'INP(3)!('$D(^UTILITY($J,1,RTN,"E",0))) B3
"RTN","XINDX51",65,0)
 S HED="*****   ERRORS & WARNINGS IN "_RTN_"   *****" W !,HED
"RTN","XINDX51",66,0)
 D WERR(0) ;Show errors
"RTN","XINDX51",67,0)
B3 ;
"RTN","XINDX51",68,0)
 S INL(5)="*****   INDEX OF "_RTN_"   *****" W !!,INL(5),!
"RTN","XINDX51",69,0)
 S HED="Local Variables      Line Occurrences   ( >> not killed explicitly)",HED(1)=$J("",40)_"( * Changed  ! Killed  ~ Newed)" D P("L","") Q:$D(IND("QUIT"))
"RTN","XINDX51",70,0)
 S HED="Global Variables  ( * Changed  ! Killed)" D P("G","") Q:$D(IND("QUIT"))
"RTN","XINDX51",71,0)
 S HED="Naked Globals" D P("N","") Q:$D(IND("QUIT"))
"RTN","XINDX51",72,0)
 S HED="Cache Objects" D P("O","") Q:$D(IND("QUIT"))
"RTN","XINDX51",73,0)
 S HED="Marked Items" D P("MK","") Q:$D(IND("QUIT"))
"RTN","XINDX51",74,0)
 S HED="Label References" D P("I","") Q:$D(IND("QUIT"))
"RTN","XINDX51",75,0)
 S HED="External References" D P("X","^") Q:$D(IND("QUIT"))
"RTN","XINDX51",76,0)
 W !!,"*****   END   *****",!
"RTN","XINDX51",77,0)
 Q
"RTN","XINDX51",78,0)
 ;
"RTN","XINDX51",79,0)
P(LOC,SYM) ;
"RTN","XINDX51",80,0)
 S L="",PC="",TAB=$S("XG"[LOC:23,"O"[LOC:35,1:16) D HD Q:$D(IND("QUIT"))
"RTN","XINDX51",81,0)
P1 S L=$O(^UTILITY($J,1,RTN,LOC,L)) G:L="" PX
"RTN","XINDX51",82,0)
 I LOC="X",L?1L.LNP Q
"RTN","XINDX51",83,0)
 S PC(1)=$G(^UTILITY($J,1,RTN,LOC,$P(L,"(")))_$S("^DT^DUZ^DTIME^IO^IOF^ION^IOM^IOSL^IOST^U^"[("^"_$P(L,"(")_"^"):"!",1:" ")
"RTN","XINDX51",84,0)
 S PC(1)=(PC(1)["!")!(PC(1)["~"),PC="*"
"RTN","XINDX51",85,0)
 F J=0:1 S X=$S($D(^UTILITY($J,1,RTN,LOC,L,J)):^(J),1:"") Q:X=""!$D(IND("QUIT"))  D P2,P3
"RTN","XINDX51",86,0)
 G P1
"RTN","XINDX51",87,0)
PX W:PC="" !?3,"NONE" K HED
"RTN","XINDX51",88,0)
 Q
"RTN","XINDX51",89,0)
P2 I $Y'<INL(2) D HD S PC="*"
"RTN","XINDX51",90,0)
 Q:PC=L
"RTN","XINDX51",91,0)
 I LOC="L" W !,$S(('PC(1)):">> ",1:"   "),SYM,L," ",?TAB Q
"RTN","XINDX51",92,0)
 I LOC'="X" W !,"   ",SYM,L,?TAB Q
"RTN","XINDX51",93,0)
 W !?3,$P(L," ",2),SYM,$P(L," ",1)," ",?TAB
"RTN","XINDX51",94,0)
 Q
"RTN","XINDX51",95,0)
P3 W:$X>TAB !,?TAB
"RTN","XINDX51",96,0)
 S PC=L F I=1:1 S ARG=$P(X,",",I) Q:ARG=""  W:$X+$L(ARG)>INL(1) !?TAB W:$X'=TAB "," W ARG
"RTN","XINDX51",97,0)
 I $G(ROU),LOC="L" S I=$O(^DIZ(1009.1,ROU,3,"B",L,0)) I I,'$$WP^DIUTL($NA(^DIZ(1009.1,ROU,3,I,1)),14,IOM) S IND("QUIT")=1 ; GFT Tammy Docs
"RTN","XINDX51",98,0)
 Q
"RTN","XINDX51",99,0)
HD D:$Y'<INL(2) HD1 D HD2
"RTN","XINDX51",100,0)
 Q
"RTN","XINDX51",101,0)
HD1 D WAIT:INL(3) S PG=PG+1 W @IOF,!,INL(5) W:(IOM-30)<$X ! W ?(IOM-30),INDXDT," page ",PG
"RTN","XINDX51",102,0)
 Q
"RTN","XINDX51",103,0)
HD2 W !!,HED W:$D(HED(1)) !,HED(1)
"RTN","XINDX51",104,0)
 Q
"RTN","XINDX51",105,0)
CR S INDB="C" U IO(0) W !!,"--- CROSS-REFERENCING ALL ROUTINES ---" U IO
"RTN","XINDX51",106,0)
 S RTN="$" D CRX^XINDX5
"RTN","XINDX51",107,0)
 S INL(5)="*****   Cross Reference of all Routines   *****",RTN="***" D HD1
"RTN","XINDX51",108,0)
 S HED="Local Variables    Routines   ( >> not killed explicitly)",HED(1)=$J("",30)_"( * Changed  ! Killed  ~ Newed)" D P("L","") G:$D(IND("QUIT")) END
"RTN","XINDX51",109,0)
 S HED="Global Variables" D P("G","") G:$D(IND("QUIT")) END
"RTN","XINDX51",110,0)
 S HED="Naked Globals" D P("N","") Q:$D(IND("QUIT"))
"RTN","XINDX51",111,0)
 S HED="Cache Objects" D P("O","") Q:$D(IND("QUIT"))
"RTN","XINDX51",112,0)
 S HED="Marked Items" D P("MK","") G:$D(IND("QUIT")) END
"RTN","XINDX51",113,0)
 S HED="Routine             Invokes:" D P("Z","") G:$D(IND("QUIT")) END
"RTN","XINDX51",114,0)
 S HED="Routine             is Invoked by:" D P("X","^")
"RTN","XINDX51",115,0)
 W !!,"*****   END   *****",!
"RTN","XINDX51",116,0)
END K INL,HED Q
"RTN","XINDX51",117,0)
SC ;Print a command chart
"RTN","XINDX51",118,0)
 S INL(5)=RTN_"   Command chart" D HD1
"RTN","XINDX51",119,0)
 F I=0:0 S I=$O(^UTILITY($J,1,RTN,"COM",I)) Q:I'>0  W !,^(I)
"RTN","XINDX51",120,0)
 Q
"RTN","XINDX51",121,0)
WAIT N % W !,"   Press return to continue:" R %:300 S:'$T %="^"
"RTN","XINDX51",122,0)
 I %["?" W !,"Press return to continue the report, ^ to exit the report" G WAIT
"RTN","XINDX51",123,0)
 S:%="^" IND("QUIT")=1 Q
"RTN","XINDX52")
0^12^B2709275
"RTN","XINDX52",1,0)
XINDX52 ;SF-ISC/RWF - Add to list other routines called ;02/06/97  16:45
"RTN","XINDX52",2,0)
 ;;7.3;TOOLKIT;**20**;Apr 25, 1995;Build 4
"RTN","XINDX52",3,0)
L1 S RTN="$",INDLC=0
"RTN","XINDX52",4,0)
 ;Loop thru routines and see what is called
"RTN","XINDX52",5,0)
 F I=0:0 S RTN=$O(^UTILITY($J,1,RTN)) Q:RTN=""  I '$D(^(RTN,52)) S ^(52)=1,S="$" F J=0:0 S S=$O(^UTILITY($J,1,RTN,"X",S)) Q:S=""  D L21
"RTN","XINDX52",6,0)
 S RTN="$",F52=0
"RTN","XINDX52",7,0)
 ;Look for routines that haven't been INDEXed
"RTN","XINDX52",8,0)
 F I52=0:0 S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  I RTN'=1,'$D(^UTILITY($J,1,RTN)) D LOAD^XINDEX,BEG^XINDEX S F52=1
"RTN","XINDX52",9,0)
 G L1:F52
"RTN","XINDX52",10,0)
 K I52,F52 Q
"RTN","XINDX52",11,0)
L21 ;Check that should add to list
"RTN","XINDX52",12,0)
 S X=$P(S," ") Q:$E(X)="%"  Q:$D(^UTILITY($J,1,X))  Q:"DD^DI^XM"[$E(X,1,2)  Q:"XQ^XQ1^XUS^"[$E(X,1,8)
"RTN","XINDX52",13,0)
 X ^%ZOSF("TEST") Q:'$T  ;I '$T S LAB=$P(^UTILITY($J,1,RTN,"X",S,0),",",1),LABO=0,ERR="W - Routine "_X_" is not in the current Account." G ^XINDX1
"RTN","XINDX52",14,0)
 S ^UTILITY($J,X)="" Q
"RTN","XINDX52",15,0)
CASE(%) ;Convert LC to UC.
"RTN","XINDX52",16,0)
 Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX53")
0^13^B6321698
"RTN","XINDX53",1,0)
XINDX53 ;SF-ISC/RWF - LOAD ROUTINE FILE ;05/13/97  16:11
"RTN","XINDX53",2,0)
 ;;7.3;TOOLKIT;**20**;Apr 25, 1995;Build 4
"RTN","XINDX53",3,0)
A S RTN="$",DLAYGO=9.8 W !!," Loading the ROUTINE file now.",!
"RTN","XINDX53",4,0)
B S RTN=$O(^UTILITY($J,1,RTN)) I RTN'?1U.UN&(RTN'?1"%".UN) G C
"RTN","XINDX53",5,0)
 D GETDA G B:DA'>0 W:$X>70 ! W $J(RTN,10)
"RTN","XINDX53",6,0)
 F %IN1=19,20,21,"T" F J=0:0 S J=$O(^DIC(9.8,DA,%IN1,J)) Q:J'>0  S $P(^DIC(9.8,DA,%IN1,J,0),U,3)="n"
"RTN","XINDX53",7,0)
 S DIE=DIC,DR="1.2///"_(+^UTILITY($J,1,RTN,0))_";1.4////"_DT D ^DIE
"RTN","XINDX53",8,0)
 ;E errors and warnings.
"RTN","XINDX53",9,0)
 S LOC="L",IND=21 D P ;LOCAL VARIABLES
"RTN","XINDX53",10,0)
 S LOC="G",IND=22 D P ;GLOBAL VARIABLES
"RTN","XINDX53",11,0)
 ;"NAKED GLOBALS",! S LOC="N",SYM="^(" D P
"RTN","XINDX53",12,0)
 S LOC="T",IND="T" D P ;LINE TAGS
"RTN","XINDX53",13,0)
 S LOC="X",IND=19 D P ;EXTERNAL REFERENCES
"RTN","XINDX53",14,0)
 ;SAVE COMMAND LIST FOR LATER WORK
"RTN","XINDX53",15,0)
 K ^DIC(9.8,DA,"CMD") F %IN1=1:1 Q:'$D(^UTILITY($J,1,RTN,"COM",%IN1))  S ^DIC(9.8,DA,"CMD",%IN1,0)=^UTILITY($J,1,RTN,"COM",%IN1)
"RTN","XINDX53",16,0)
 G B
"RTN","XINDX53",17,0)
P S %IN2=-1,PC=0
"RTN","XINDX53",18,0)
 F %IN1=0:0 S %IN2=$O(^UTILITY($J,1,RTN,LOC,%IN2)) Q:%IN2=""  D S
"RTN","XINDX53",19,0)
 K DR,DIE Q
"RTN","XINDX53",20,0)
S S %IN3=$S("G"[LOC:$E(%IN2,2,99),1:%IN2),Y=$O(^DIC(9.8,DA,IND,"B",%IN3,0)) G S2:Y>0 Q:%IN3[""""
"RTN","XINDX53",21,0)
 S DIC="^DIC(9.8,DA(1),"_$C(34)_IND_$C(34)_",",DA(1)=DA,X=%IN3,DIC("P")=+$P(^DD(9.8,$S(LOC="L":21,LOC="G":22,LOC="T":5,LOC="X":19),0),U,2) D FILE^DICN
"RTN","XINDX53",22,0)
S2 S $P(^DIC(9.8,DA,IND,+Y,0),U,3)="y"
"RTN","XINDX53",23,0)
 Q
"RTN","XINDX53",24,0)
C S ROU="$" K DLAYGO,DR,DIC,DIE
"RTN","XINDX53",25,0)
C1 S ROU=$O(^UTILITY($J,1,ROU)) I ROU'?1U.UN&(ROU'?1"%".UN) G END
"RTN","XINDX53",26,0)
 S RTN=ROU D GETDA G C1:DA'>0 S %IN1=DA F %I1=0:0 S %I1=$O(^DIC(9.8,%IN1,19,%I1)) Q:%I1'>0  S %IN2=^(%I1,0),TAG=$P(%IN2," ",2),RTN=$P(%IN2," ",1) D ETAG
"RTN","XINDX53",27,0)
 G C1
"RTN","XINDX53",28,0)
GETDA S Y=0,DIC="^DIC(9.8,",DIC(0)="MXZL"
"RTN","XINDX53",29,0)
GET1 S Y=$O(^DIC(9.8,"B",RTN,Y)) I Y>0 G GOT:"R"[$P(^DIC(9.8,Y,0),U,2),GET1
"RTN","XINDX53",30,0)
GET2 S X=""""_RTN_"""",DIC("DR")="1///R" D ^DIC
"RTN","XINDX53",31,0)
GOT S DA=+Y I $P(^DIC(9.8,DA,0),U,2)="" S $P(^(0),U,2)="R"
"RTN","XINDX53",32,0)
 Q
"RTN","XINDX53",33,0)
ETAG S DA=0 Q:'$D(^UTILITY($J,1,RTN))
"RTN","XINDX53",34,0)
E2 S DA=$O(^DIC(9.8,"B",RTN,DA)) I DA>0,$P(^DIC(9.8,DA,0),U,2)'="R" G E2
"RTN","XINDX53",35,0)
 Q:DA'>0  S Y=$O(^DIC(9.8,DA,20,"B",ROU,0)) I Y>0 S $P(^DIC(9.8,DA,20,Y,0),"^",3)="y" Q
"RTN","XINDX53",36,0)
 S DIE="^DIC(9.8,",DR="20///"_ROU,DR(2,9.804)="3///y" D ^DIE
"RTN","XINDX53",37,0)
 Q
"RTN","XINDX53",38,0)
END K DIC,DIE,DIR,DR,ROU,%IN1,LOC,TAG
"RTN","XINDX53",39,0)
 Q
"RTN","XINDX6")
0^14^B21300742
"RTN","XINDX6",1,0)
XINDX6 ;ISC/REL,GRK - GET SET OF ROUTINES TO INDEX ;2018-02-22  2:44 PM
"RTN","XINDX6",2,0)
 ;;7.3;TOOLKIT;**20,27,66,110,132,10001**;Apr 25, 1995;Build 4
"RTN","XINDX6",3,0)
 ; Original routine authored by U.S. Department of Veterans Affairs
"RTN","XINDX6",4,0)
 ; XINDX6+14,+20 modified by Christopher Edwards 2018
"RTN","XINDX6",5,0)
 ; XINDX6+13,RLIST Modified by David Whitten (year unknown)
"RTN","XINDX6",6,0)
 ;INP(1=Print more than warnings, 2= Print routines, 3= Print warnings, 4= Print DDs & Functions & Options, 5= Type of List, 6= Summary only, 7= Save Parameters
"RTN","XINDX6",7,0)
 ;INP(8= Index called routines, 9= Include the Compiled template routines, 10 = Build or Package file DA
"RTN","XINDX6",8,0)
 ;INP(11= execute to check for version number on second line, 12= Patch number check.
"RTN","XINDX6",9,0)
 N %A2,%I,%IN2,%IN3,%N,%QMK,%YN,AC,ANS,C8,CM,CX,DEF,DDOT,DIF,E,EC,ER
"RTN","XINDX6",10,0)
 N INDHDR,INP,LI,LL,LN,LV,N,NOA,OP,PG,QUES,RN,T,XCNP,XX1,XX2,Z,Z1,INDXDT
"RTN","XINDX6",11,0)
 K ^UTILITY($J),ZTSK,ZTDTH,ZTIO
"RTN","XINDX6",12,0)
 S:'$D(DTIME)#2 DTIME=360
"RTN","XINDX6",13,0)
 D HOME^%ZIS,HDR^XINDX7
"RTN","XINDX6",14,0)
 D ASKRTN,PARAM
"RTN","XINDX6",15,0)
 I $D(^DIC(9.4))!$D(^DIC(9.6)) D ^XINDX10 G END:$D(DUOUT) S INDDA=DA I DA>0,(INP(10)'=9.7)!(INP(10)="NAMESPACE") D ANS("Include the compiled template routines: N//","NY") G:X="^" END S:"Nn"'[X INP(9)=1
"RTN","XINDX6",16,0)
 G END:(NRO'>0)&(INDDA'>0)
"RTN","XINDX6",17,0)
 D ANS("Print more than compiled errors and warnings? YES//","YN","Print detailed info") G:X="^" END S INP(1)="Yy"[X G:'INP(1) L7
"RTN","XINDX6",18,0)
 D ANS("Print summary only? NO//","NY","Skip detail on each routine") G:X="^" END S INP(6)="Yy"[X G L7:INP(6)
"RTN","XINDX6",19,0)
 D ANS("Print routines? YES//","YN","Print routines code also") G:X="^" END S INP(2)="Yy"[X
"RTN","XINDX6",20,0)
 I INP(2) D ANS("Print (R)egular,(S)tructured or (B)oth or Control (F)low ?  R//","RLIST") G:X="^" END S INP(5)=X
"RTN","XINDX6",21,0)
 I INDDA>0,INP(10)'=9.7 D ANS("Print the DDs, Functions, Options, and other package code? YES//","YN","Gather other package code.") G:X="^" END S INP(4)="Yy"[X
"RTN","XINDX6",22,0)
 D ANS("Print errors and warnings with each routine? YES//","YN") G:X="^" END S INP(3)="Yy"[X
"RTN","XINDX6",23,0)
L7 I $D(^DIC(9.8,0)),$D(DUZ) D ANS("Save parameters in ROUTINE file? NO//","NY","Update the ROUTINE file with details") G:X="^" END S INP(7)="Yy"[X
"RTN","XINDX6",24,0)
 D ANS("Index all called routines? NO//","NY","Add called routines") G:X="^" END S INP(8)="Yy"[X
"RTN","XINDX6",25,0)
DEVICE W:NRO>2 !!,$C(7),"This report could take some time, Remember to QUEUE the report.",! K IOP,%ZIS S %ZIS="QM",%ZIS("B")="" D ^%ZIS K %ZIS I POP W !,$C(7),"XINDEX terminated.  No device specified." G END
"RTN","XINDX6",26,0)
 ;S IOP=ION_";"_IOST_$S($D(IO("DOC")):";"_IO("DOC"),1:";"_IOM_";"_IOSL)
"RTN","XINDX6",27,0)
 I IO=IO(0),"C"[$E(IOST),$D(IO("Q"))#2 W !,"Do you really mean queue to this device? NO//" D NY I "Nn"[X W !!,"Ok, tell me again ..." K IO("Q") D ^%ZISC G DEVICE
"RTN","XINDX6",28,0)
 I '$D(IO("Q")) G ALIVE^XINDEX ;Do it now
"RTN","XINDX6",29,0)
 ;Queue Report
"RTN","XINDX6",30,0)
 S ZTRTN="ALIVE^XINDEX",ZTDESC="XINDEX of "_NRO_" routine"_$S(NRO>1:"s.",1:".") F G="INP(","INDDA","^UTILITY($J,","NRO","INDPM" S ZTSAVE(G)=""
"RTN","XINDX6",31,0)
 K IO("Q") D ^%ZTLOAD,HOME^%ZIS
"RTN","XINDX6",32,0)
 ;
"RTN","XINDX6",33,0)
END K ZTSK,%ZIS G CLEAN^XINDX5
"RTN","XINDX6",34,0)
 ;
"RTN","XINDX6",35,0)
PARAM ;Setup Parameters
"RTN","XINDX6",36,0)
 S Q="""",RTN=0
"RTN","XINDX6",37,0)
 F I=1:1:10 S INP(I)=0
"RTN","XINDX6",38,0)
 S (INP(11),INP(12))=""
"RTN","XINDX6",39,0)
 S INP("MAX")=20000 ;Max routine size
"RTN","XINDX6",40,0)
 S INP("CMAX")=15000 ;Max Code in routine
"RTN","XINDX6",41,0)
 S INDDA=0
"RTN","XINDX6",42,0)
 Q
"RTN","XINDX6",43,0)
 ;
"RTN","XINDX6",44,0)
QUICK(RL) ;Quick Report, Just errors on some routines.
"RTN","XINDX6",45,0)
 N %A2,%I,%IN2,%IN3,%N,%QMK,%YN,AC,ANS,C8,CM,CX,DEF,DDOT,DIF,E,EC,ER
"RTN","XINDX6",46,0)
 N INDHDR,INDXDT,INP,LI,LL,LN,LV,N,NOA,OP,PG,QUES,RN,T,XCNP,XX1,XX2,Z,Z1
"RTN","XINDX6",47,0)
 K ^UTILITY($J),ZTSK,ZTDTH,ZTIO
"RTN","XINDX6",48,0)
 D HOME^%ZIS I '$D(IOP) D HDR^XINDX7
"RTN","XINDX6",49,0)
 I $D(IOP) S %ZIS="" D ^%ZIS ;Caller can set IOP to send output someplace else
"RTN","XINDX6",50,0)
 U IO
"RTN","XINDX6",51,0)
 I $D(RL) F %I=1:1 S Z=$P(RL,",",%I) Q:Z=""  S ^UTILITY($J,Z)=""
"RTN","XINDX6",52,0)
 D ASKRTN,PARAM
"RTN","XINDX6",53,0)
 I $O(^UTILITY($J,"@"))="" W !,"No Routines to process.",! D ^%ZISC Q
"RTN","XINDX6",54,0)
 S INP(1)=0,INP(6)=1 ;More then errors,Summary Only
"RTN","XINDX6",55,0)
 G ALIVE^XINDEX
"RTN","XINDX6",56,0)
 ;
"RTN","XINDX6",57,0)
ANS(PR,DEF,HELP) ;Ask question get answer
"RTN","XINDX6",58,0)
 N % F  S Y=1 W !!,PR D @DEF Q:Y
"RTN","XINDX6",59,0)
 Q
"RTN","XINDX6",60,0)
YN S %="Y" D RD Q:"^YyNn"[X  W:$D(HELP) !,HELP W !,"Please enter 'Y' or return for YES, 'N' for NO" S Y=0 Q
"RTN","XINDX6",61,0)
 ;
"RTN","XINDX6",62,0)
NY S %="N" D RD Q:"^YyNn"[X  W:$D(HELP) !,HELP W !,"Please enter 'N' or return for NO, 'Y' for YES" S Y=0 Q
"RTN","XINDX6",63,0)
 ;
"RTN","XINDX6",64,0)
RD R X:DTIME S:X["^" X="^" S X=$E($$CASE^XINDX52(X)_%) Q
"RTN","XINDX6",65,0)
 ;
"RTN","XINDX6",66,0)
RLIST S %="R" D RD Q:"^RSBF"[X  W !,"Please select one of the choices." S Y=0 Q
"RTN","XINDX6",67,0)
 Q
"RTN","XINDX6",68,0)
ASKRTN ;Collect a list of routines to index.
"RTN","XINDX6",69,0)
 I '$D(^UTILITY($J)),$D(^%ZOSF("RSEL")) X ^("RSEL")
"RTN","XINDX6",70,0)
 S NRO=0,X=0 F I=0:0 S X=$O(^UTILITY($J,X)) Q:X=""  S NRO=NRO+1
"RTN","XINDX6",71,0)
 Q
"RTN","XINDX6",72,0)
 W !!,"LIST OF ROUTINES TO BE INDEXED; PRESS RETURN TO TERMINATE LIST",! S NRO=0
"RTN","XINDX6",73,0)
R1 R !,"ROUTINE NAME: ",ROU:$S($G(DTIME):DTIME,1:360) Q:ROU=""
"RTN","XINDX6",74,0)
 I ROU'?1"%".UN&(ROU'?1U.UN) W "  INVALID ROUTINE NAME" G R1
"RTN","XINDX6",75,0)
 I $D(^%ZOSF("TEST")) S X=ROU X ^("TEST") E  W "  INVALID ROUTINE NAME" G R1
"RTN","XINDX6",76,0)
 S NRO=NRO+1,^UTILITY($J,ROU)=""
"RTN","XINDX6",77,0)
 G R1
"RTN","XINDX7")
0^15^B11348153
"RTN","XINDX7",1,0)
XINDX7 ;ISC/RWF - SETUP ENVIRONMENT ;2018-02-22  12:54 PM
"RTN","XINDX7",2,0)
 ;;7.3;TOOLKIT;**20,27,48,68,110,10001**;Apr 25, 1995;Build 4
"RTN","XINDX7",3,0)
 ; Routine originally authored by Department of Veterans Affairs
"RTN","XINDX7",4,0)
 ; HDR+3 updated by Sam Habiel to update SAC Version number
"RTN","XINDX7",5,0)
 ; SVN updated by George Timson to remove PDISPLAY
"RTN","XINDX7",6,0)
 ;To call XINDEX from elsewere.
"RTN","XINDX7",7,0)
 ;D SETUP^XINDX7 then load routines into ^UTILITY($J,1,<rtn name>,0,n,0)
"RTN","XINDX7",8,0)
 ;with @root@(0)='line count' and @root@(n,0)=a routine line
"RTN","XINDX7",9,0)
 ;Then for each routine S RTN="rtn name",INDLC=0 D BEG^XINDEX
"RTN","XINDX7",10,0)
 ;
"RTN","XINDX7",11,0)
 ;
"RTN","XINDX7",12,0)
 Q
"RTN","XINDX7",13,0)
SETUP ;Write startup header stuff.
"RTN","XINDX7",14,0)
 D BUILD
"RTN","XINDX7",15,0)
 U IO D HDR
"RTN","XINDX7",16,0)
 S Q="""",U="^",INDDS=0,RTN="$",DA=INDDA,IND("TM")=$H
"RTN","XINDX7",17,0)
 I INDDA>0 D START^XINDX10 D:IOSL\2<$Y HDR W !!,"Routines are being processed.",!
"RTN","XINDX7",18,0)
 ;Build count of routines.
"RTN","XINDX7",19,0)
 S NRO=0,NRO(1)=0,RTN="$"
"RTN","XINDX7",20,0)
 F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  S NRO=NRO+1 S:RTN["|" NRO(1)=NRO(1)+1
"RTN","XINDX7",21,0)
 S RTN="$"
"RTN","XINDX7",22,0)
 W "Routines: ",NRO-NRO(1),"  Faux Routines: ",NRO(1),!!
"RTN","XINDX7",23,0)
 Q
"RTN","XINDX7",24,0)
HDR S:'$D(INDXDT) DT=$$DT^XLFDT(),INDXDT=$$HTE^XLFDT($H)
"RTN","XINDX7",25,0)
 I '$D(INDHDR)  D
"RTN","XINDX7",26,0)
 . X ^%ZOSF("UCI") S INDHDR(1)="UCI: "_$P(Y,",")_" CPU: "_^%ZOSF("VOL")_"    "_INDXDT
"RTN","XINDX7",27,0)
 . S INDHDR="V. A.  C R O S S  R E F E R E N C E R  "_$P($T(+2),";",3)
"RTN","XINDX7",28,0)
 . S INDHDR(2)="[5/5/2016 VA Standards & Conventions]" ; **SMH date updated
"RTN","XINDX7",29,0)
 . Q
"RTN","XINDX7",30,0)
 W:$Y>3 @IOF W !!,?IOM-$L(INDHDR)\2,INDHDR,!,?IOM-$L(INDHDR(2))\2,INDHDR(2),!,?IOM-$L(INDHDR(1))\2,INDHDR(1),!
"RTN","XINDX7",31,0)
 Q
"RTN","XINDX7",32,0)
BUILD N IX,X,TAG,TG,TX,S,L,V K IND
"RTN","XINDX7",33,0)
 F TAG=1:1 S X=$T(TABLE+TAG) Q:X=""  D
"RTN","XINDX7",34,0)
 . S TG=$P(X,";;",2),TX=$P(X,";;",3) Q:TG=""
"RTN","XINDX7",35,0)
 . F IX=1:1 S X=$P(TX,":",IX) Q:X=""  D
"RTN","XINDX7",36,0)
 . . S S=$P(X,","),L=$P(X,",",2),V=$P(X,",",3)
"RTN","XINDX7",37,0)
 . . S IND(TG,S)=L_"^"_V,IND(TG,L)=L_"^"_V
"RTN","XINDX7",38,0)
 . Q
"RTN","XINDX7",39,0)
 Q
"RTN","XINDX7",40,0)
TABLE ;;Short name, Full name, parameters (CMD default - add to GRB)
"RTN","XINDX7",41,0)
CMD ;;CMD;;B,BREAK,B:C,CLOSE,C:D,DO,DG1^XINDX4:E,ELSE,:F,FOR,F:G,GOTO,G:H,HALT,H:H,HANG,H:I,IF,:J,JOB,J:K,KILL,K:L,LOCK,L
"RTN","XINDX7",42,0)
 ;;CMD;;M,MERGE,M:N,NEW,N:O,OPEN,O:Q,QUIT,Q:R,READ,R:S,SET,S:TC,TCOMMIT,TR:TRE,TRESTART,TR:TRO,TROLLBACK,TR:TS,TSTART,TR:U,USE,U:V,VIEW,V:W,WRITE,W:X,XECUTE,X:
"RTN","XINDX7",43,0)
 ;;
"RTN","XINDX7",44,0)
FNC ;;FNC;;A,ASCII,1;2:C,CHAR,1;999:D,DATA,1;1:E,EXTRACT,1;3:F,FIND,2;3:G,GET,1;2:J,JUSTIFY,2;3:L,LENGTH,1;2:O,ORDER,1;2:P,PIECE,2;4:Q,QUERY,1;1:R,RANDOM,1;1:S,SELECT,1;999:T,TEXT,1;1:V,VIEW,1;999,
"RTN","XINDX7",45,0)
 ;;FNC;;FN,FNUMBER,2;3:NA,NAME,1;2:QL,QLENGTH,1;1:QS,QSUBSCRIPT,1;3:RE,REVERSE,1;1:ST,STACK,1;2:TR,TRANSLATE,1;3:WFONT,WFONT,4;4:WTFIT,WTFIT,6;6:WTWIDTH,WTWIDTH,5;5:
"RTN","XINDX7",46,0)
 ;;
"RTN","XINDX7",47,0)
SVN ;;SVN;;D,DEVICE:EC,ECODE:ES,ESTACK:ET,ETRAP:H,HOROLOG:I,IO:J,JOB:K,KEY:P,PRINCIPAL:Q,QUIT:S,STORAGE:ST,STACK:SY,SYSTEM:T,TEST:X,X:Y,Y
"RTN","XINDX7",48,0)
 ;;
"RTN","XINDX7",49,0)
SSVN ;;SSVN;;C,CHARACTER:D,DEVICE:DI,DISPLAY:E,EVENT:G,GLOBAL:J,JOB:L,LOCK:R,ROUTINE:S,SYSTEM:W,WINDOW:Z,Z
"RTN","XINDX8")
0^16^B15967560
"RTN","XINDX8",1,0)
XINDX8 ;ISC/GRK - STRUCTURED INDEX ;2018-02-22  12:56 PM
"RTN","XINDX8",2,0)
 ;;7.3;TOOLKIT;**20,27,61,10001**;Apr 25, 1995;Build 4
"RTN","XINDX8",3,0)
 ; Originally authored by the Department of Veterans Affairs
"RTN","XINDX8",4,0)
 ; CD+1 new,EE+3,SET+1,DGX+4 Modified by David Whitten 2018
"RTN","XINDX8",5,0)
 S Q="""",(DDOT,LO)=0,PG=+$G(PG) D HDR
"RTN","XINDX8",6,0)
 F LC=1:1 Q:'$D(^UTILITY($J,1,RTN,0,LC))  S LIN=^(LC,0),ML=0,IDT=10 D CD
"RTN","XINDX8",7,0)
 K AGR,EOC,IDT,JJ,LO,ML,OLD,SAV,TY
"RTN","XINDX8",8,0)
 Q
"RTN","XINDX8",9,0)
CD S LAB=$P(LIN," ",1),LIN=$P(LIN," ",2,999),LO=$S(LAB="":LO+1,1:0)
"RTN","XINDX8",10,0)
 I INP(5)["L",$G(OPT("NUM")) S OPT("NUM")=OPT("NUM")+1 W $J(OPT("NUM"),3)_"| "
"RTN","XINDX8",11,0)
 W $S('LO:LAB,INP(5)'["N":" +"_LO,1:"")_" "
"RTN","XINDX8",12,0)
 G:LIN'[";" EE S STR=1,L=";",ARG=LIN D LOOP I CH'=";" G EE
"RTN","XINDX8",13,0)
 W ?10,$E(LIN,I,999),! Q:I<2  S LIN=$E(LIN,1,I-2)
"RTN","XINDX8",14,0)
EE I LIN="" Q
"RTN","XINDX8",15,0)
 I $E(LIN)=" " S LIN=$E(LIN,2,9999) G EE ;Skip blanks
"RTN","XINDX8",16,0)
 D SEP S EOC=0,COM=$$CASE^XINDX52($P(ARG,":")),CM=$P($G(IND("CMD",COM)),"^") I CM="" G ERR
"RTN","XINDX8",17,0)
 I ARG[":" S OLD=CM,COM="if",ARG=$P(ARG,":",2) D GRB S IDT=IDT+4,CM=OLD,EOC=4
"RTN","XINDX8",18,0)
 S COM=CM D SEP
"RTN","XINDX8",19,0)
 S:$E(COM)="H"&(ARG'="") COM="HANG" S X=$E(COM,1)
"RTN","XINDX8",20,0)
 D @$S("BCHKLMNOPQRUVWZ"[X:"GRB",X="S":"SET","DGX"[X:"DGX","IE"[X:"IFE",X="F":"FOR",1:"GRB") S:EOC IDT=IDT-EOC G EE
"RTN","XINDX8",21,0)
 ;
"RTN","XINDX8",22,0)
GRB I ARG["$" F I=1:1 S CH=$E(ARG,I) Q:CH=""  D QUOTE:CH=Q I CH="$" D FUN
"RTN","XINDX8",23,0)
 I $Y+2>IOSL D HDR
"RTN","XINDX8",24,0)
 W ?IDT," ",$S(ML:"...",1:COM)," ",ARG,! S ML=0 Q
"RTN","XINDX8",25,0)
FUN I " $$ $& $% "[(" "_$E(ARG,I,I+1)_" ") D  S I=J-1 Q  ;Handle Extrinsics
"RTN","XINDX8",26,0)
 . F J=I+2:1 Q:"(,"[$E(ARG,J)
"RTN","XINDX8",27,0)
 . Q
"RTN","XINDX8",28,0)
 F J=I+1:1 Q:$E(ARG,J)'?1A
"RTN","XINDX8",29,0)
 S X=$E(ARG,I+1,J-1),L=$L(X),CH=$E(ARG,I+1),TY=$S($E(ARG,J)="(":"FNC",1:"SVN")
"RTN","XINDX8",30,0)
 Q:CH="Z"  S X=$P($G(IND(TY,X)),"^")
"RTN","XINDX8",31,0)
 G:'$L(X) ERR Q:L=$L(X)
"RTN","XINDX8",32,0)
 D:$L(ARG)>245 LEN S ARG=$E(ARG,1,I)_X_$E(ARG,J,999),I=I+$L(X)-L
"RTN","XINDX8",33,0)
 Q
"RTN","XINDX8",34,0)
ERR W !,"*** ERROR ***",! Q
"RTN","XINDX8",35,0)
IFE I ARG=""!(X="E") W ?IDT,"IF " W:X="E" "'" W "$TEST",! S IDT=IDT+4 Q
"RTN","XINDX8",36,0)
SET S STR=1,L="," D LOOP S SAV=ARG,ARG=$E(ARG,1,I-1),IP=I+1
"RTN","XINDX8",37,0)
 D GRB S ARG=$E(SAV,IP,999) S:COM="IF"!(COM="if") IDT=IDT+4 Q:ARG=""  G SET
"RTN","XINDX8",38,0)
FOR D GRB S IDT=IDT+4 Q
"RTN","XINDX8",39,0)
DGX I ARG="",$E(COM)="D" D DDOT Q
"RTN","XINDX8",40,0)
 S STR=1,L=":," D LOOP I CH="" G GRB
"RTN","XINDX8",41,0)
 I CH="," S SAV=ARG,ARG=$E(ARG,1,I-1),IP=I+1 D GRB G D1
"RTN","XINDX8",42,0)
 S SAV=ARG,STR=I+1,L="," D LOOP S IP=I+1
"RTN","XINDX8",43,0)
 S OLD=COM,ARG=$E(ARG,STR,I-1),COM="if" D GRB
"RTN","XINDX8",44,0)
 S IDT=IDT+4,ARG=$E(SAV,1,STR-2),COM=OLD D GRB S IDT=IDT-4
"RTN","XINDX8",45,0)
D1 S ARG=$E(SAV,IP,999) Q:ARG=""  G DGX
"RTN","XINDX8",46,0)
DDOT S DDOT=DDOT+1 W ?IDT," Begin DoDot:",DDOT,! S IDT(DDOT)=IDT+4
"RTN","XINDX8",47,0)
 N LIN,I,COM,EOC,Y
"RTN","XINDX8",48,0)
 F LC=LC+1:1 S LIN=$G(^UTILITY($J,1,RTN,0,LC,0)),IDT=IDT(DDOT) Q:LIN=""  D  Q:X<DDOT  D CD
"RTN","XINDX8",49,0)
 . S Y=$P(LIN," "),LIN=$P(LIN," ",2,999)
"RTN","XINDX8",50,0)
 . F I=1:1:254 Q:". "'[$E(LIN,I)
"RTN","XINDX8",51,0)
 . S X=$L($E(LIN,1,I),".")-1,LIN=Y_" "_$E(LIN,I,999)
"RTN","XINDX8",52,0)
 S IDT=IDT-4,LC=LC-1 W ?IDT," End DoDot:",DDOT,! S DDOT=DDOT-1
"RTN","XINDX8",53,0)
 Q
"RTN","XINDX8",54,0)
LOOP F I=STR:1 S CH=$E(ARG,I) D QUOTE:CH=Q,PAREN:CH="(" Q:L[CH
"RTN","XINDX8",55,0)
 Q
"RTN","XINDX8",56,0)
PAREN S PC=1
"RTN","XINDX8",57,0)
 F I=I+1:1 S CH=$E(ARG,I) Q:PC=0!(CH="")  I "()"""[CH D QUOTE:CH=Q S:"()"[CH PC=PC+$S(CH="(":1,1:-1)
"RTN","XINDX8",58,0)
 Q
"RTN","XINDX8",59,0)
QUOTE F I=I+1:1 S CH=$E(ARG,I) Q:CH=""!(CH=Q)
"RTN","XINDX8",60,0)
 Q
"RTN","XINDX8",61,0)
SEP F I=1:1 S CH=$E(LIN,I) D SEPQ:CH=Q Q:"; "[CH
"RTN","XINDX8",62,0)
 S ARG=$E(LIN,1,I-1) S:CH=" " I=I+1 S LIN=$E(LIN,I,999) Q
"RTN","XINDX8",63,0)
SEPQ S I=I+1,CH=$E(LIN,I) I CH="" G ERR Q
"RTN","XINDX8",64,0)
 G SEPQ:CH'=Q S I=I+1,CH=$E(LIN,I) G:CH=Q SEPQ Q
"RTN","XINDX8",65,0)
LEN S AGR=$E(ARG,1,I-1) W ?IDT,COM," ",AGR_"...",! S ARG=$E(ARG,I)_$E(ARG,J-1,999),I=1,J=3,ML=1 K AGR
"RTN","XINDX8",66,0)
 Q
"RTN","XINDX8",67,0)
HDR S PG=PG+1
"RTN","XINDX8",68,0)
 W @IOF,RTN,"   ",+^UTILITY($J,1,RTN,0),"     printed  ",INDXDT,?(IOM-10)," Page ",PG,!!
"RTN","XINDX8",69,0)
 Q
"RTN","XINDX8",70,0)
 ;
"RTN","XINDX8",71,0)
UC(%) Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX8",72,0)
 ;
"RTN","XINDX8",73,0)
XCR ;Option entry point
"RTN","XINDX8",74,0)
 K ^UTILITY($J) D ASKRTN^XINDX6 G EXIT:NRO<1 S %ZIS="M" D ^%ZIS Q:POP  U IO(0)
"RTN","XINDX8",75,0)
 I $D(IO("Q")) S ZTRTN="XC2^XINDX8",ZTSAVE("^UTILITY($J,")="",ZTDESC="Structured print" D ^%ZTLOAD G EXIT
"RTN","XINDX8",76,0)
XC2 U IO I '$D(INDXDT) D NOW^%DTC S INDXDT=$E(%,2,3)_"/"_$E(%,4,5)_"/"_$E(%,6,7)
"RTN","XINDX8",77,0)
 D BUILD^XINDX7
"RTN","XINDX8",78,0)
 S RTN="" F  S RTN=$O(^UTILITY($J,RTN)) Q:RTN=""  D  D XINDX8
"RTN","XINDX8",79,0)
 . D LOAD^XINDEX
"RTN","XINDX8",80,0)
 . S CCN=0 F I=1:1:+^UTILITY($J,1,RTN,0,0) S CCN=CCN+$L(^UTILITY($J,1,RTN,0,I,0))+2
"RTN","XINDX8",81,0)
 . S ^UTILITY($J,1,RTN,0)=CCN
"RTN","XINDX8",82,0)
 . Q
"RTN","XINDX8",83,0)
EXIT D ^%ZISC K ^UTILITY($J),RTN,T,CCN,I,PG,INDXDT
"RTN","XINDX9")
0^17^B34886021
"RTN","XINDX9",1,0)
XINDX9 ;SF/RWF - XINDEX SYNTAX CHECKER ;2018-03-01  10:00 AM
"RTN","XINDX9",2,0)
 ;;7.3;TOOLKIT;**20,27,48,61,66,68,110,121,132,133,10001**;Apr 25, 1995;Build 4
"RTN","XINDX9",3,0)
 ; Original routine authored by Department of Veterans Affairs
"RTN","XINDX9",4,0)
 ; Modifications in *10001* made by Sam Habiel: GVAR+2,OBJ+2,VAR1+7 in 2018
"RTN","XINDX9",5,0)
 N CH1,CHO,EC,OP
"RTN","XINDX9",6,0)
 D PARSE S LI=0,AC=255 F %=0:0 S %=$O(LV(%)) Q:%'>0  S LI(%)=0
"RTN","XINDX9",7,0)
 Q
"RTN","XINDX9",8,0)
 ;LV is a set of Linked Values
"RTN","XINDX9",9,0)
PARSE K LV,LI S (ERR,LI,I)=0,(LL,LV)=1,(OP,CH)="",Q=""""
"RTN","XINDX9",10,0)
 ;CH=current, CH1=next, CHO=previous character
"RTN","XINDX9",11,0)
PA2 S I=I+1,CHO=CH,CH=$E(STR,I),CH1=$E(STR,I+1) G:CH="" PEND
"RTN","XINDX9",12,0)
 G E:CH=";"!(CH'?1ANP) I """$()"[CH D QUOTE:CH=Q,FUNC:CH="$",DN:CH="(",UP:CH=")" G PA2
"RTN","XINDX9",13,0)
 I CH="^",CH1="$" D SSVN G PA2
"RTN","XINDX9",14,0)
 I CH="^",I=LL G PA2:CH1'="[" S I=I+1,X=$E(STR,LL,I) D ADD S LL=I+1 G PA2
"RTN","XINDX9",15,0)
 I CH?1A!(CH="%")!(CH=".") D VAR1 G PA2
"RTN","XINDX9",16,0)
 I CH?1N D NUM G PA2
"RTN","XINDX9",17,0)
 I CH="#",CH1="#" D OBJ G PA2
"RTN","XINDX9",18,0)
 S:"+-#'/*_&![]<>?"[CH OP=CH
"RTN","XINDX9",19,0)
 I CH="?",",!#"'[$E(STR,I-1) D AR,PAT G PA2
"RTN","XINDX9",20,0)
 I CH=",",CH1=":" D E^XINDX1(21) ;P121
"RTN","XINDX9",21,0)
 ;check if an open $S exists
"RTN","XINDX9",22,0)
 I $G(LV(LV,"SEL")) D
"RTN","XINDX9",23,0)
 . I '$P(LV(LV,"SEL"),U,2) S:CH="," $P(LV(LV,"SEL"),U,2)=1 Q  ;arg is closed: open if comma
"RTN","XINDX9",24,0)
 . I CH=":" S $P(LV(LV,"SEL"),U,2)=0 Q  ;arg open: close if colon
"RTN","XINDX9",25,0)
 . I CH="," D E^XINDX1(43) S LV(LV,"SEL")="0^0" ;arg open: error if comma, close this $S
"RTN","XINDX9",26,0)
 . Q
"RTN","XINDX9",27,0)
 I CH?1P D  ;Check for dup operators
"RTN","XINDX9",28,0)
 . D AR
"RTN","XINDX9",29,0)
 . Q:(CH_CH1="]]")
"RTN","XINDX9",30,0)
 . I CH=CH1,(",_/\[]&|"[CH) D
"RTN","XINDX9",31,0)
 .. Q:CH=","&$$OBJF()  ;quit if Object with open '(', good code
"RTN","XINDX9",32,0)
 .. I $$FNC()'="$$" D E^XINDX1(21) Q  ; if not function, can't have empty parameters
"RTN","XINDX9",33,0)
 G PA2
"RTN","XINDX9",34,0)
 ;End of parse
"RTN","XINDX9",35,0)
PEND D AR,E^XINDX1(5):LV>1,E^XINDX1(21):($G(LV(1,1))=",") ;LV>1 means mis-match ()
"RTN","XINDX9",36,0)
 Q
"RTN","XINDX9",37,0)
 ;
"RTN","XINDX9",38,0)
DN D STR S X=CH D ADD,NEW S LI(LV)=LI,LV=LV+1 S:'$D(LI(LV)) LI(LV)=0 S LI=LI(LV),LI(LV-1,1)=LI
"RTN","XINDX9",39,0)
 Q
"RTN","XINDX9",40,0)
UP I LV<2 D E^XINDX1(5) Q
"RTN","XINDX9",41,0)
 D STR S EC=LI-LI(LV-1,1),X=$C(10) D ADD,NEW
"RTN","XINDX9",42,0)
 ;$S function still open, check arg
"RTN","XINDX9",43,0)
 I $G(LV(LV,"SEL")) D:$P(LV(LV,"SEL"),U,2) E^XINDX1(43) K LV(LV,"SEL")
"RTN","XINDX9",44,0)
 S LI(LV)=LI,LV=LV-1,LI=LI(LV)
"RTN","XINDX9",45,0)
 S X=EC D ADD S X=CH D ADD
"RTN","XINDX9",46,0)
 I CH1]"",",._=+-*/\#'):<>[]?&!@^"'[CH1 D E^XINDX1(43)
"RTN","XINDX9",47,0)
 Q
"RTN","XINDX9",48,0)
NEW S LL=I+1
"RTN","XINDX9",49,0)
 Q
"RTN","XINDX9",50,0)
AR D STR S X=CH D ADD,NEW Q
"RTN","XINDX9",51,0)
STR S X=$E(STR,LL,I-1) Q:'$L(X)  ;Drop into ADD
"RTN","XINDX9",52,0)
ADD S LI=LI+1,LV(LV,LI)=X Q
"RTN","XINDX9",53,0)
 ;
"RTN","XINDX9",54,0)
FNC(NEW) ;Sets or returns the current function
"RTN","XINDX9",55,0)
 I $D(NEW) S LV(LV+1,"FNC",$G(LI(LV))+1)=NEW Q
"RTN","XINDX9",56,0)
 N W S W=+$S($D(LV(LV,"FNC",LI)):LI,$O(LV(LV,"FNC",LI)):$O(LV(LV,"FNC",LI)),1:$O(LV(LV,"FNC",LI),-1)) ;patch 119
"RTN","XINDX9",57,0)
 Q $G(LV(LV,"FNC",W))
"RTN","XINDX9",58,0)
 ;
"RTN","XINDX9",59,0)
OP(NEW) ;Sets or returns the current operator
"RTN","XINDX9",60,0)
 I $D(NEW) S LV(LV,"OP",LI)=NEW Q
"RTN","XINDX9",61,0)
 N W S W=+$S($D(LV(LV,"OP",LI)):LI,1:$O(LV(LV,"OP",LI),-1))
"RTN","XINDX9",62,0)
 Q $G(LV(LV,"OP",W))
"RTN","XINDX9",63,0)
 ;
"RTN","XINDX9",64,0)
QUOTE F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=Q)
"RTN","XINDX9",65,0)
 I $E(STR,I+1)=Q S I=I+1 G QUOTE
"RTN","XINDX9",66,0)
 I OP'="?",$E(STR,I+1)]"","[]()<>\/+-=&!_#*,:'|"'[$E(STR,I+1) D E^XINDX1(46) Q
"RTN","XINDX9",67,0)
 Q:CH]""  D E^XINDX1(6)
"RTN","XINDX9",68,0)
 Q
"RTN","XINDX9",69,0)
 ;
"RTN","XINDX9",70,0)
GVAR() ;EF get var
"RTN","XINDX9",71,0)
 N % D VAR S %=$E(STR,LL,I),LL=I+1
"RTN","XINDX9",72,0)
 Q $$CASE(%)
"RTN","XINDX9",73,0)
 ;
"RTN","XINDX9",74,0)
OBJ ;check Cache Object
"RTN","XINDX9",75,0)
 S J=$E(STR,I,I+7),J=$$CASE(J) I J'="##CLASS(" D E^XINDX1(3) Q
"RTN","XINDX9",76,0)
 D E^XINDX1(65) ; ** OSE/SMH - Vendor specific code error (suppressed for Kernel)**
"RTN","XINDX9",77,0)
 S LL=I,I=I+7,CH=$E(STR,I) D SUM("F"),DN
"RTN","XINDX9",78,0)
 ;get the class
"RTN","XINDX9",79,0)
 S LL=I+1,I=$$CLS(LL),CH=$E(STR,I),CH1=$E(STR,I+1),LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",80,0)
 D SUM("O"),UP
"RTN","XINDX9",81,0)
 ;get the method, must start with "."
"RTN","XINDX9",82,0)
 Q:CH1'="."
"RTN","XINDX9",83,0)
 S LL=I+1,J=$$CLS(LL),I=J-1,LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",84,0)
 D SUM("O")
"RTN","XINDX9",85,0)
 Q
"RTN","XINDX9",86,0)
 ;
"RTN","XINDX9",87,0)
CLS(I) ;return the position of the class
"RTN","XINDX9",88,0)
 N %
"RTN","XINDX9",89,0)
 F %=I:1 S CH=$E(STR,%) Q:"()"[CH
"RTN","XINDX9",90,0)
 Q %
"RTN","XINDX9",91,0)
 ;
"RTN","XINDX9",92,0)
OBJF() ; return line where object has an open "(" for parameters
"RTN","XINDX9",93,0)
 N %
"RTN","XINDX9",94,0)
 Q:LV<2 0  ;must be down at least 1 level
"RTN","XINDX9",95,0)
 S %=$O(LV(LV-1,"OBJ",""),-1) ;find last object at previous level
"RTN","XINDX9",96,0)
 Q $S('%:0,LV(LV-1,%+1)="(":%,1:0) ; returns 0 if can't find object or object has no parameter
"RTN","XINDX9",97,0)
 ;
"RTN","XINDX9",98,0)
VAR1 ;check if var is Object
"RTN","XINDX9",99,0)
 N % S %=0
"RTN","XINDX9",100,0)
 ;check of var is passed by ref.
"RTN","XINDX9",101,0)
 I CH=".",",("[CHO D AR Q
"RTN","XINDX9",102,0)
 F J=I+1:1 S CH=$E(STR,J) I CH'?1AN Q:CH'="."  S %=1
"RTN","XINDX9",103,0)
 G:'% VAR
"RTN","XINDX9",104,0)
 ;save summary and ref. of Object/method
"RTN","XINDX9",105,0)
 D E^XINDX1(65) ; ** OSE/SMH - Vendor specific code error (suppressed for Kernel)**
"RTN","XINDX9",106,0)
 S LL=I,I=J-1,LV(LV,"OBJ",LI+1)=""
"RTN","XINDX9",107,0)
 D SUM("O")
"RTN","XINDX9",108,0)
 Q
"RTN","XINDX9",109,0)
VAR ;find length of var. and reset I
"RTN","XINDX9",110,0)
 F J=I+1:1 S CH=$E(STR,J) Q:CH'?1AN
"RTN","XINDX9",111,0)
 S I=J-1 D SUM("V")
"RTN","XINDX9",112,0)
 Q
"RTN","XINDX9",113,0)
NUM F J=I+1:1 S CH=$E(STR,J) Q:"0123456789."'[CH!(CH="")
"RTN","XINDX9",114,0)
 I CH="E" S CH=$E(STR,J+1) I CH?1N!("+-"[CH) S I=J G NUM
"RTN","XINDX9",115,0)
 I CH]"",CH'?1P S ERR=53 D ^XINDX1
"RTN","XINDX9",116,0)
 S I=J-1 D SUM("N")
"RTN","XINDX9",117,0)
 Q
"RTN","XINDX9",118,0)
INC S I=I+1,CH=$E(STR,I)
"RTN","XINDX9",119,0)
 Q
"RTN","XINDX9",120,0)
FUNC ;Functions and special var's.
"RTN","XINDX9",121,0)
 ;check if $SYSTEM
"RTN","XINDX9",122,0)
 I $$CASE($E(STR,I,I+6))="$SYSTEM" G SYS
"RTN","XINDX9",123,0)
 D INC S X=CH,S=$$GVAR()
"RTN","XINDX9",124,0)
 G EXT:S["$$",PKG:S["$&",SPV:CH'="("
"RTN","XINDX9",125,0)
 I "ZV"[X S ERR=$S("Z"[X:31,1:27) D ^XINDX1
"RTN","XINDX9",126,0)
 S S=$$CASE($E(S,2,11)),F1=$G(IND("FNC",S)) I '$L(F1) D E^XINDX1(3) S F1=S G FX
"RTN","XINDX9",127,0)
 ;$S only function that must contain a colon in each argument
"RTN","XINDX9",128,0)
 I F1["SELECT" S LV(LV+1,"SEL")="1^1"
"RTN","XINDX9",129,0)
FX S X="$"_F1,CH="" D FNC("$F"),ADD,SUM("F")
"RTN","XINDX9",130,0)
 Q
"RTN","XINDX9",131,0)
SPV S X=S D FNC("$V"),ADD,SUM("V") S X=$E(S,2,10),CH="" ;P132 support of $PRINCIPAL, 10 characters
"RTN","XINDX9",132,0)
 I $E(S,2)="Z" D E^XINDX1(28) Q
"RTN","XINDX9",133,0)
 I '$D(IND("SVN",X)) D E^XINDX1(4)
"RTN","XINDX9",134,0)
 Q
"RTN","XINDX9",135,0)
EXT ;EXTRINSIC
"RTN","XINDX9",136,0)
 S X=S,CH="" D FNC("$$"),ADD,SUM("V")
"RTN","XINDX9",137,0)
 Q
"RTN","XINDX9",138,0)
SYS ;$SYSTEM class or SVN
"RTN","XINDX9",139,0)
 S LL=I,I=I+6 D INC
"RTN","XINDX9",140,0)
 I CH'="." D SUM("V") Q  ;SVN
"RTN","XINDX9",141,0)
 S I=LL,CH="" D VAR1
"RTN","XINDX9",142,0)
 ;Error 54 access for Kernel only
"RTN","XINDX9",143,0)
 S CH="" D E^XINDX1(54)
"RTN","XINDX9",144,0)
 Q
"RTN","XINDX9",145,0)
SSVN ;
"RTN","XINDX9",146,0)
 D INC S X=$$GVAR() I '$D(IND("SSVN",$E(X,3,99))) D E^XINDX1(4) Q
"RTN","XINDX9",147,0)
 ;Error 54 access for Kernel only
"RTN","XINDX9",148,0)
 D E^XINDX1(54),ADD,SUM("V")
"RTN","XINDX9",149,0)
 Q
"RTN","XINDX9",150,0)
PKG ;External Function
"RTN","XINDX9",151,0)
 S J=$F(STR,"(",I),I=J-2,X=S_$E(STR,LL,I),LL=J-1,CH=""
"RTN","XINDX9",152,0)
 D ADD,E^XINDX1(55) ;Not standard VA
"RTN","XINDX9",153,0)
 Q
"RTN","XINDX9",154,0)
E D E^XINDX1(11)
"RTN","XINDX9",155,0)
 Q
"RTN","XINDX9",156,0)
PAT N PC S PC=0
"RTN","XINDX9",157,0)
 F I=I+1:1 S CH=$E(STR,I) D PATQ:CH=Q,PATD:CH="(",PATU:CH=")",PATC:CH="," I CH=""!(CH'?1N&("ACELNPUacelnpu."'[CH)) Q
"RTN","XINDX9",158,0)
 I PC D E^XINDX1(5)
"RTN","XINDX9",159,0)
 S I=I-1 I ":),@+-_*/\!&'"'[CH D E^XINDX1(16),SEP Q
"RTN","XINDX9",160,0)
 Q
"RTN","XINDX9",161,0)
 ;Quote in Pattern
"RTN","XINDX9",162,0)
PATQ F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=Q)
"RTN","XINDX9",163,0)
 D:CH="" E^XINDX1(6) S I=I+1,CH=$E(STR,I) G:CH=Q PATQ
"RTN","XINDX9",164,0)
 Q
"RTN","XINDX9",165,0)
PATD S PC=PC+1,CH="." ;p110 Start Alt.
"RTN","XINDX9",166,0)
 Q
"RTN","XINDX9",167,0)
PATU I 'PC,LV>1 S CH="" Q  ;End
"RTN","XINDX9",168,0)
 S PC=PC-1,CH="." ;p110 End Alt.
"RTN","XINDX9",169,0)
 Q
"RTN","XINDX9",170,0)
PATC I PC<1 Q  ;
"RTN","XINDX9",171,0)
 S CH="." ;p110 Comma in Alt.
"RTN","XINDX9",172,0)
 Q
"RTN","XINDX9",173,0)
PAREN F I=I+1:1 S CH=$E(STR,I) Q:CH=""!(CH=")")
"RTN","XINDX9",174,0)
 D:CH="" E^XINDX1(5) S CH="."
"RTN","XINDX9",175,0)
 Q
"RTN","XINDX9",176,0)
SEP ;Find sep
"RTN","XINDX9",177,0)
 Q
"RTN","XINDX9",178,0)
 ;
"RTN","XINDX9",179,0)
SUM(P) ;Build summary line
"RTN","XINDX9",180,0)
 S LV(LV,"S")=$G(LV(LV,"S"))_P
"RTN","XINDX9",181,0)
 Q
"RTN","XINDX9",182,0)
CASE(%) ;UpperCase
"RTN","XINDX9",183,0)
 Q $TR(%,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","XINDX9",184,0)
 ;
"RTN","XINDX9",185,0)
TEST S STR=$E($T(TEST+2),4,999) D XINDX9
"RTN","XINDX9",186,0)
 Q
"RTN","XINDX9",187,0)
 ;;NUMVAL?.1(1"+",1"-")1(1.N.1".".N,.N.1"."1.N).1(1"E".1(1"+",1"-")1.N)
"VER")
8.0^22.2
**END**
**END**
