Released EC*2*129 SEQ #123
Extracted from mail message
**KIDS**:EC*2.0*129^

**INSTALL NAME**
EC*2.0*129
"BLD",10032,0)
EC*2.0*129^EVENT CAPTURE^0^3160407^y
"BLD",10032,1,0)
^^5^5^3150902^
"BLD",10032,1,1,0)
This patch addresses the following three (3) remedy tickets:
"BLD",10032,1,2,0)
 1. <SYNTAX>GET+2^ECOB error.
"BLD",10032,1,3,0)
 2. Remove Files (#720) and (#720.2) flagged for deletion in EC*2*5.
"BLD",10032,1,4,0)
 3. An active DSS Unit with inactive Event Code Screens is presented as
"BLD",10032,1,5,0)
    selectable in ECS GUI data entry.
"BLD",10032,4,0)
^9.64PA^^
"BLD",10032,6.3)
7
"BLD",10032,"INID")
^n
"BLD",10032,"INIT")
EN^EC2P129
"BLD",10032,"KRN",0)
^9.67PA^779.2^20
"BLD",10032,"KRN",.4,0)
.4
"BLD",10032,"KRN",.401,0)
.401
"BLD",10032,"KRN",.402,0)
.402
"BLD",10032,"KRN",.403,0)
.403
"BLD",10032,"KRN",.5,0)
.5
"BLD",10032,"KRN",.84,0)
.84
"BLD",10032,"KRN",3.6,0)
3.6
"BLD",10032,"KRN",3.8,0)
3.8
"BLD",10032,"KRN",9.2,0)
9.2
"BLD",10032,"KRN",9.8,0)
9.8
"BLD",10032,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",10032,"KRN",9.8,"NM",1,0)
ECOB^^0^B26321793
"BLD",10032,"KRN",9.8,"NM",2,0)
ECOBU^^0^B163524421
"BLD",10032,"KRN",9.8,"NM",3,0)
ECUERPC^^0^B62941200
"BLD",10032,"KRN",9.8,"NM",4,0)
EC2P129^^0^B1254538
"BLD",10032,"KRN",9.8,"NM","B","EC2P129",4)

"BLD",10032,"KRN",9.8,"NM","B","ECOB",1)

"BLD",10032,"KRN",9.8,"NM","B","ECOBU",2)

"BLD",10032,"KRN",9.8,"NM","B","ECUERPC",3)

"BLD",10032,"KRN",19,0)
19
"BLD",10032,"KRN",19,"NM",0)
^9.68A^^0
"BLD",10032,"KRN",19.1,0)
19.1
"BLD",10032,"KRN",101,0)
101
"BLD",10032,"KRN",409.61,0)
409.61
"BLD",10032,"KRN",771,0)
771
"BLD",10032,"KRN",779.2,0)
779.2
"BLD",10032,"KRN",870,0)
870
"BLD",10032,"KRN",8989.51,0)
8989.51
"BLD",10032,"KRN",8989.52,0)
8989.52
"BLD",10032,"KRN",8994,0)
8994
"BLD",10032,"KRN","B",.4,.4)

"BLD",10032,"KRN","B",.401,.401)

"BLD",10032,"KRN","B",.402,.402)

"BLD",10032,"KRN","B",.403,.403)

"BLD",10032,"KRN","B",.5,.5)

"BLD",10032,"KRN","B",.84,.84)

"BLD",10032,"KRN","B",3.6,3.6)

"BLD",10032,"KRN","B",3.8,3.8)

"BLD",10032,"KRN","B",9.2,9.2)

"BLD",10032,"KRN","B",9.8,9.8)

"BLD",10032,"KRN","B",19,19)

"BLD",10032,"KRN","B",19.1,19.1)

"BLD",10032,"KRN","B",101,101)

"BLD",10032,"KRN","B",409.61,409.61)

"BLD",10032,"KRN","B",771,771)

"BLD",10032,"KRN","B",779.2,779.2)

"BLD",10032,"KRN","B",870,870)

"BLD",10032,"KRN","B",8989.51,8989.51)

"BLD",10032,"KRN","B",8989.52,8989.52)

"BLD",10032,"KRN","B",8994,8994)

"BLD",10032,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10032,"QUES",0)
^9.62^^
"BLD",10032,"REQB",0)
^9.611^2^2
"BLD",10032,"REQB",1,0)
EC*2.0*110^1
"BLD",10032,"REQB",2,0)
EC*2.0*126^1
"BLD",10032,"REQB","B","EC*2.0*110",1)

"BLD",10032,"REQB","B","EC*2.0*126",2)

"INIT")
EN^EC2P129
"MBREQ")
0
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
129^3160407
"PKG",486,22,1,"PAH",1,1,0)
^^5^5^3160407
"PKG",486,22,1,"PAH",1,1,1,0)
This patch addresses the following three (3) remedy tickets:
"PKG",486,22,1,"PAH",1,1,2,0)
 1. <SYNTAX>GET+2^ECOB error.
"PKG",486,22,1,"PAH",1,1,3,0)
 2. Remove Files (#720) and (#720.2) flagged for deletion in EC*2*5.
"PKG",486,22,1,"PAH",1,1,4,0)
 3. An active DSS Unit with inactive Event Code Screens is presented as
"PKG",486,22,1,"PAH",1,1,5,0)
    selectable in ECS GUI data entry.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","EC2P129")
0^4^B1254538^n/a
"RTN","EC2P129",1,0)
EC2P129 ;ALB/JAM - Post install routine for Event Capture patch EC*2*129 ;7/13/2014
"RTN","EC2P129",2,0)
 ;;2.0;EVENT CAPTURE;**129**;8 May 96;Build 7
"RTN","EC2P129",3,0)
 ;
"RTN","EC2P129",4,0)
 Q
"RTN","EC2P129",5,0)
EN ;This post install routine will remove obsolete *EVENT CAPTURE PROCEDURE, ^ECP(, File #720
"RTN","EC2P129",6,0)
 ; and *EVENT CODE SCREENING, ^ECK(, #720.2 and their data from the system. Sort template
"RTN","EC2P129",7,0)
 ; ECCAT linked to File #720 will also be removed.
"RTN","EC2P129",8,0)
 ; Patch EC*2*5 flagged the 2 files for deletion by a future patch. This patch will delete these files.
"RTN","EC2P129",9,0)
 ;
"RTN","EC2P129",10,0)
 D BMES^XPDUTL("Removing Files #720 and #720.2 with data and templates from the system.")
"RTN","EC2P129",11,0)
 D BMES^XPDUTL("These files were flagged for deletion by EC*2*5 and is now being removed.")
"RTN","EC2P129",12,0)
 D MES^XPDUTL("Please be patient while the files are being removed.")
"RTN","EC2P129",13,0)
 N DIU
"RTN","EC2P129",14,0)
 S DIU(0)="DT"
"RTN","EC2P129",15,0)
 F DIU=720,720.2 D EN^DIU2
"RTN","EC2P129",16,0)
 D BMES^XPDUTL("Done!")
"RTN","EC2P129",17,0)
 Q
"RTN","EC2P129",18,0)
 ;
"RTN","ECOB")
0^1^B26321793^B22576998
"RTN","ECOB",1,0)
ECOB ;BP/CMF - base object ;8/21/2015
"RTN","ECOB",2,0)
 ;;2.0;EVENT CAPTURE;**100,107,110,129**;8 May 96;Build 7
"RTN","ECOB",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB",5,0)
 ;@version - 1.0
"RTN","ECOB",6,0)
 ;;
"RTN","ECOB",7,0)
 Q
"RTN","ECOB",8,0)
 ;; private methods
"RTN","ECOB",9,0)
COUNT(NAME) ; increment counter
"RTN","ECOB",10,0)
 N COUNT
"RTN","ECOB",11,0)
 S COUNT=+$O(@NAME@(9999999),-1)+1
"RTN","ECOB",12,0)
 S @NAME@(COUNT,0)=$G(DT)+1
"RTN","ECOB",13,0)
 Q COUNT
"RTN","ECOB",14,0)
 ;;
"RTN","ECOB",15,0)
PARSE(METHOD,VALUE)  ;
"RTN","ECOB",16,0)
 I METHOD="Argument" D  Q
"RTN","ECOB",17,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOB",18,0)
 .Q
"RTN","ECOB",19,0)
 I METHOD="Child" D  Q
"RTN","ECOB",20,0)
 .S CHILD=$P(VALUE,"Handle.",2)
"RTN","ECOB",21,0)
 .Q
"RTN","ECOB",22,0)
 I METHOD="Handle" D  Q
"RTN","ECOB",23,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOB",24,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOB",25,0)
 .Q
"RTN","ECOB",26,0)
 I METHOD="Tag" D  Q
"RTN","ECOB",27,0)
 .S TAG("routine")=$P(VALUE,"(")
"RTN","ECOB",28,0)
 .S TAG("parameters")=$P(VALUE,TAG("routine"),2)
"RTN","ECOB",29,0)
 .Q
"RTN","ECOB",30,0)
 ;;
"RTN","ECOB",31,0)
 ;; protected methods
"RTN","ECOB",32,0)
CREATE(NAME) ; return unique handle
"RTN","ECOB",33,0)
 N HANDLE
"RTN","ECOB",34,0)
 S NAME=$TR(NAME,".","") ;reserve period for piecers
"RTN","ECOB",35,0)
 S HANDLE=$TR(NAME,")","")_","_$$COUNT(NAME)_")"
"RTN","ECOB",36,0)
 D PROPERTY(HANDLE,"Pu","_class","EC BASE")
"RTN","ECOB",37,0)
 D PROPERTY(HANDLE,"Pu","_routine","METHOD^DGOB(.RESULT,ARGUMENT)")
"RTN","ECOB",38,0)
 D PROPERTY(HANDLE,"Pu","_name","Basic Pharmacy Object")
"RTN","ECOB",39,0)
 D PROPERTY(HANDLE,"Pu","_namespace",NAME)
"RTN","ECOB",40,0)
 D PROPERTY(HANDLE,"Pr","_parent","")
"RTN","ECOB",41,0)
 Q HANDLE
"RTN","ECOB",42,0)
 ;;
"RTN","ECOB",43,0)
COLLECT(HANDLE,CHILD,SCOPE,PROPERTY) ; attach or collect child objects
"RTN","ECOB",44,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",45,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",46,0)
 S @HANDLE@(SCOPE,PROPERTY)=CHILD
"RTN","ECOB",47,0)
 S @HANDLE@("Pr","Handle",CHILD)=PROPERTY
"RTN","ECOB",48,0)
 Q 1
"RTN","ECOB",49,0)
 ;;
"RTN","ECOB",50,0)
DESTROY(HANDLE) ; cleanup
"RTN","ECOB",51,0)
 N CHILD
"RTN","ECOB",52,0)
 S CHILD=0
"RTN","ECOB",53,0)
 I ($G(HANDLE)="") Q 1  ;EC*129
"RTN","ECOB",54,0)
 I ($P(HANDLE,"^")=0)!($P(HANDLE,"^")=-1) Q 1  ;EC*129
"RTN","ECOB",55,0)
 F  S CHILD=$O(@HANDLE@("Pr","Handle",CHILD)) Q:'CHILD  D
"RTN","ECOB",56,0)
 .K @CHILD
"RTN","ECOB",57,0)
 .Q
"RTN","ECOB",58,0)
 K @HANDLE
"RTN","ECOB",59,0)
 Q 1
"RTN","ECOB",60,0)
 ;;
"RTN","ECOB",61,0)
FUNCTION(HANDLE,ARGUMENT)  ;
"RTN","ECOB",62,0)
 N RESULT
"RTN","ECOB",63,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOB",64,0)
 Q RESULT
"RTN","ECOB",65,0)
 ;;
"RTN","ECOB",66,0)
GET(RESULT,HANDLE,SCOPE,PROPERTY) ; get simple property
"RTN","ECOB",67,0)
 I $G(HANDLE)="" S RESULT="-1^Handle does not exist." Q  ;EC*110 - BGP
"RTN","ECOB",68,0)
 I ($P(HANDLE,"^")=0)!($P(HANDLE,"^")=-1) S RESULT="-1^Handle does not exist." Q  ;EC*129 - JAM
"RTN","ECOB",69,0)
 I ($P(HANDLE,"^",2)="") S RESULT="-1^Invalid handle." Q  ;EC*129
"RTN","ECOB",70,0)
 I '$D(@HANDLE) S RESULT="-1^No data at handle: "_HANDLE_"." Q  ;EC*110
"RTN","ECOB",71,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",72,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",73,0)
 S RESULT=$G(@HANDLE@(SCOPE,PROPERTY))
"RTN","ECOB",74,0)
 S:$D(RESULT)=0 RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",75,0)
 Q
"RTN","ECOB",76,0)
 ;;
"RTN","ECOB",77,0)
ISHANDLE(HANDLE,CHILD)  ;
"RTN","ECOB",78,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",79,0)
 S CHILD=$S($G(CHILD)'="":CHILD,1:-1)
"RTN","ECOB",80,0)
 Q $D(@HANDLE@("Pr","Handle",CHILD))
"RTN","ECOB",81,0)
 ;;
"RTN","ECOB",82,0)
METHOD(RESULT,ARGUMENT) ; most basic handler
"RTN","ECOB",83,0)
 N HANDLE,TAG
"RTN","ECOB",84,0)
 S RESULT=-1
"RTN","ECOB",85,0)
 D PARSE("Argument",ARGUMENT)
"RTN","ECOB",86,0)
 D GET(.TAG,HANDLE,"Pu","_routine")
"RTN","ECOB",87,0)
 D PARSE("Tag",TAG)
"RTN","ECOB",88,0)
 Q:TAG("routine")="METHOD^DGOB"  ;stop recursive call
"RTN","ECOB",89,0)
 Q:TAG("routine")=""
"RTN","ECOB",90,0)
 Q:($P(TAG("routine"),"^")=0)!($P(TAG("routine"),"^")=-1)  ;EC*129
"RTN","ECOB",91,0)
 I $T(@TAG("routine"))'="" D  Q
"RTN","ECOB",92,0)
 .I TAG("parameters")="(.RESULT,ARGUMENT)" D @TAG
"RTN","ECOB",93,0)
 Q
"RTN","ECOB",94,0)
 ;;
"RTN","ECOB",95,0)
MOVE(RESULT,HANDLE,SOURCE,SCOPE,PROPERTY) ;copy simple object property to another
"RTN","ECOB",96,0)
 N X
"RTN","ECOB",97,0)
 D GET(.X,SOURCE,SCOPE,PROPERTY)
"RTN","ECOB",98,0)
 D SET(.RESULT,HANDLE,SCOPE,PROPERTY,X)
"RTN","ECOB",99,0)
 Q
"RTN","ECOB",100,0)
 ;;
"RTN","ECOB",101,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; create simple property node
"RTN","ECOB",102,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",103,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",104,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:-1)
"RTN","ECOB",105,0)
 S @HANDLE@(SCOPE,PROPERTY)=$G(VALUE)
"RTN","ECOB",106,0)
 Q 1
"RTN","ECOB",107,0)
 ;;
"RTN","ECOB",108,0)
SELF(RESULT,HANDLE,CLASS,NAME,ROUTINE,PARENT) ; set 'self' properties of object
"RTN","ECOB",109,0)
 N RESULT
"RTN","ECOB",110,0)
 D:CLASS'="" SET(.RESULT,HANDLE,"Pu","_class",CLASS)
"RTN","ECOB",111,0)
 D:NAME'="" SET(.RESULT,HANDLE,"Pu","_name",NAME)
"RTN","ECOB",112,0)
 D:ROUTINE'="" SET(.RESULT,HANDLE,"Pu","_routine",ROUTINE)
"RTN","ECOB",113,0)
 D:PARENT'="" SET(.RESULT,HANDLE,"Pr","_parent",PARENT)
"RTN","ECOB",114,0)
 Q
"RTN","ECOB",115,0)
 ;;
"RTN","ECOB",116,0)
SET(RESULT,HANDLE,SCOPE,PROPERTY,VALUE) ; set simple property
"RTN","ECOB",117,0)
 I $G(HANDLE)="" S RESULT="-1^Handle does not exist" Q  ;EC*110
"RTN","ECOB",118,0)
  I ($P(HANDLE,"^")=0)!($P(HANDLE,"^")=-1) S RESULT="-1^Handle does not exist." Q  ;EC*129
"RTN","ECOB",119,0)
 I '$D(@HANDLE) S RESULT="-1^No data at handle: "_HANDLE_"." Q  ;EC*110
"RTN","ECOB",120,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",121,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",122,0)
 I '$D(@HANDLE@(SCOPE,PROPERTY)) D  Q
"RTN","ECOB",123,0)
 .S RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",124,0)
 S @HANDLE@(SCOPE,PROPERTY)=VALUE
"RTN","ECOB",125,0)
 S RESULT=1
"RTN","ECOB",126,0)
 Q
"RTN","ECOB",127,0)
 ;;
"RTN","ECOB",128,0)
SHOW(RESULT,HANDLE,SCOPE,PROPERTY,PARAMS) ; show a property
"RTN","ECOB",129,0)
 N JUSTIFY,CHILD,CLASS
"RTN","ECOB",130,0)
 D GET(.RESULT,HANDLE,SCOPE,PROPERTY)
"RTN","ECOB",131,0)
 S JUSTIFY=$S(+PARAMS:+PARAMS,1:0)
"RTN","ECOB",132,0)
 I PARAMS["/" W !,$J("</"_PROPERTY_">  ",JUSTIFY) Q
"RTN","ECOB",133,0)
 W !,$J("<"_PROPERTY_"> : ",JUSTIFY),RESULT
"RTN","ECOB",134,0)
 D:$$ISHANDLE(HANDLE,RESULT)
"RTN","ECOB",135,0)
 .S CHILD=RESULT
"RTN","ECOB",136,0)
 .D GET(.CLASS,CHILD,"Pu","_class")
"RTN","ECOB",137,0)
 .W " [class = "_CLASS_"]"
"RTN","ECOB",138,0)
 Q
"RTN","ECOB",139,0)
 ;; 
"RTN","ECOB",140,0)
TREE(CHILD,HANDLE,SCOPE,PROPERTY,JUSTIFY) Q  ; no longer used
"RTN","ECOBU")
0^2^B163524421^B159516513
"RTN","ECOBU",1,0)
ECOBU ;BP/CMF - Utility Object ;8/21/2015
"RTN","ECOBU",2,0)
 ;;2.0;EVENT CAPTURE;**100,129**;8 May 96;Build 7
"RTN","ECOBU",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBU",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBU",5,0)
 ;@version - 1.0
"RTN","ECOBU",6,0)
 ;;
"RTN","ECOBU",7,0)
 Q
"RTN","ECOBU",8,0)
 ;; private methods
"RTN","ECOBU",9,0)
HANDLERS(RESULT,HANDLE,METHOD,PARAMS) ;;
"RTN","ECOBU",10,0)
 ; find & execute handlers
"RTN","ECOBU",11,0)
 N PROPERTY,HANDLES,FOUND,HANDLER,EXECUTER
"RTN","ECOBU",12,0)
 S RESULT="-1^Invalid method"
"RTN","ECOBU",13,0)
 I $E(METHOD,1,3)="Get" D 
"RTN","ECOBU",14,0)
 .D PARSE("Get",METHOD)
"RTN","ECOBU",15,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",16,0)
 .S METHOD="Get"
"RTN","ECOBU",17,0)
 .Q
"RTN","ECOBU",18,0)
 I $E(METHOD,1,3)="Set" D 
"RTN","ECOBU",19,0)
 .D PARSE("Set",METHOD)
"RTN","ECOBU",20,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",21,0)
 .S METHOD="Set"
"RTN","ECOBU",22,0)
 .Q
"RTN","ECOBU",23,0)
 I $E(METHOD,1,4)="Show" D 
"RTN","ECOBU",24,0)
 .D PARSE("Show",METHOD)
"RTN","ECOBU",25,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",26,0)
 .S METHOD="Show"
"RTN","ECOBU",27,0)
 .Q
"RTN","ECOBU",28,0)
 D METHOD(.HANDLER,HANDLE_".Methods.Find1."_METHOD)
"RTN","ECOBU",29,0)
 D METHOD^ECOBM(.EXECUTER,HANDLER_".GetHandler")
"RTN","ECOBU",30,0)
 I $G(EXECUTER)="" Q  ;EC*129
"RTN","ECOBU",31,0)
 I ($P(EXECUTER,"^")=0)!($P(EXECUTER,"^")=-1) Q  ;EC*129
"RTN","ECOBU",32,0)
 D @EXECUTER
"RTN","ECOBU",33,0)
 Q
"RTN","ECOBU",34,0)
 ;;
"RTN","ECOBU",35,0)
OBM(RESULT,ARGUMENT) ;shortcut to method class
"RTN","ECOBU",36,0)
 D METHOD^ECOBM(.RESULT,ARGUMENT) Q
"RTN","ECOBU",37,0)
 ;;
"RTN","ECOBU",38,0)
OBP(RESULT,ARGUMENT) ;shortcut to property class
"RTN","ECOBU",39,0)
 D METHOD^ECOBP(.RESULT,ARGUMENT) Q
"RTN","ECOBU",40,0)
 ;;
"RTN","ECOBU",41,0)
OB2(RESULT,ARGUMENT) ;shortcut to utility class
"RTN","ECOBU",42,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT) Q
"RTN","ECOBU",43,0)
 ;;
"RTN","ECOBU",44,0)
ECOB30(RESULT,HANDLE,PARAMS) ;handler for collect object
"RTN","ECOBU",45,0)
 N CHILD
"RTN","ECOBU",46,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Collect")
"RTN","ECOBU",47,0)
 D METHOD^ECOB30(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",48,0)
 Q
"RTN","ECOBU",49,0)
 ;;
"RTN","ECOBU",50,0)
ECOBL(RESULT,HANDLE,METHOD,PARAMS) ;handler for simple list
"RTN","ECOBU",51,0)
 N CHILD
"RTN","ECOBU",52,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu",METHOD)
"RTN","ECOBU",53,0)
 D METHOD^ECOBL(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",54,0)
 Q
"RTN","ECOBU",55,0)
 ;;
"RTN","ECOBU",56,0)
ECOBMC(RESULT,HANDLE,PARAMS) ;handler for method collection
"RTN","ECOBU",57,0)
 N CHILD
"RTN","ECOBU",58,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Methods")
"RTN","ECOBU",59,0)
 D METHOD^ECOBMC(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",60,0)
 Q
"RTN","ECOBU",61,0)
 ;;
"RTN","ECOBU",62,0)
ECOBPC(RESULT,HANDLE,PARAMS) ;handler for property collection
"RTN","ECOBU",63,0)
 N CHILD
"RTN","ECOBU",64,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Properties")
"RTN","ECOBU",65,0)
 D METHOD^ECOBPC(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",66,0)
 Q 
"RTN","ECOBU",67,0)
 ;;
"RTN","ECOBU",68,0)
ECOBM(RESULT,HANDLE,PARAMS) ;; pass-through
"RTN","ECOBU",69,0)
 D OBM(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",70,0)
 ;;
"RTN","ECOBU",71,0)
ECOB2(RESULT,HANDLE,PARAMS) ;; pass-through
"RTN","ECOBU",72,0)
 D OB2(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",73,0)
 ;;
"RTN","ECOBU",74,0)
ECOBP(RESULT,HANDLE,PARAMS) ; pass-through
"RTN","ECOBU",75,0)
 D OBP(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",76,0)
 ;;
"RTN","ECOBU",77,0)
DIAGHDR(VALUE,WIDTH) ;;
"RTN","ECOBU",78,0)
 N I,J
"RTN","ECOBU",79,0)
 S J=WIDTH-$L(VALUE)-1
"RTN","ECOBU",80,0)
 W !," "_VALUE_" "
"RTN","ECOBU",81,0)
 F J=1:1:J W "-"
"RTN","ECOBU",82,0)
 W "+"
"RTN","ECOBU",83,0)
 Q
"RTN","ECOBU",84,0)
DIAGSGMT(VALUE,WIDTH) ;;
"RTN","ECOBU",85,0)
 N I,J,OUT,FILL
"RTN","ECOBU",86,0)
 S J=WIDTH-$L(VALUE)
"RTN","ECOBU",87,0)
 S OUT=" + "_VALUE_" "
"RTN","ECOBU",88,0)
 S FILL=""
"RTN","ECOBU",89,0)
 F J=1:1:J S FILL=FILL_"-"
"RTN","ECOBU",90,0)
 S OUT=$E(OUT_FILL,1,WIDTH)_" |"
"RTN","ECOBU",91,0)
 W !,OUT
"RTN","ECOBU",92,0)
 Q
"RTN","ECOBU",93,0)
DIAGATTR(VALUE,WIDTH) ;;
"RTN","ECOBU",94,0)
 N I,J,OUT,FILL
"RTN","ECOBU",95,0)
 S J=WIDTH-$L(VALUE)
"RTN","ECOBU",96,0)
 S OUT=" | * "_VALUE
"RTN","ECOBU",97,0)
 D:$L(VALUE)<WIDTH
"RTN","ECOBU",98,0)
 .S FILL=""
"RTN","ECOBU",99,0)
 .F J=1:1:J S FILL=FILL_" "
"RTN","ECOBU",100,0)
 .S OUT=$E(OUT_FILL,1,WIDTH)_" |"
"RTN","ECOBU",101,0)
 .Q
"RTN","ECOBU",102,0)
 W !,OUT
"RTN","ECOBU",103,0)
 Q
"RTN","ECOBU",104,0)
DIAGFTR(WIDTH) ;;
"RTN","ECOBU",105,0)
 N I,J,OUT,FILL
"RTN","ECOBU",106,0)
 S J=WIDTH
"RTN","ECOBU",107,0)
 S OUT=" + "
"RTN","ECOBU",108,0)
 S FILL=""
"RTN","ECOBU",109,0)
 F J=1:1:J S FILL=FILL_"-"
"RTN","ECOBU",110,0)
 S OUT=$E(OUT_FILL,1,J)_" +"
"RTN","ECOBU",111,0)
 W !,OUT
"RTN","ECOBU",112,0)
 Q
"RTN","ECOBU",113,0)
 ;;
"RTN","ECOBU",114,0)
    ;;protected methods
"RTN","ECOBU",115,0)
CLASS(RESULT,HANDLE,PARAMS) ;handler for class info display
"RTN","ECOBU",116,0)
 N JUSTIFY,OFFSET,X,METH,PROP,ITEM
"RTN","ECOBU",117,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBU",118,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_class",JUSTIFY)
"RTN","ECOBU",119,0)
 ;;
"RTN","ECOBU",120,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Methods",JUSTIFY)
"RTN","ECOBU",121,0)
 D METHOD(.X,HANDLE_".Methods.Info."_OFFSET)
"RTN","ECOBU",122,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Methods",JUSTIFY_"/")
"RTN","ECOBU",123,0)
 ;;
"RTN","ECOBU",124,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Properties",JUSTIFY)
"RTN","ECOBU",125,0)
 D METHOD(.X,HANDLE_".Properties.Info."_OFFSET)
"RTN","ECOBU",126,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Properties",JUSTIFY_"/")
"RTN","ECOBU",127,0)
 ;;
"RTN","ECOBU",128,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Root",JUSTIFY)
"RTN","ECOBU",129,0)
 D METHOD(.X,HANDLE_".Root.Info."_OFFSET)
"RTN","ECOBU",130,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Root",JUSTIFY_"/")
"RTN","ECOBU",131,0)
 ;;
"RTN","ECOBU",132,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_class",JUSTIFY_"/")
"RTN","ECOBU",133,0)
 S RESULT=1
"RTN","ECOBU",134,0)
 Q
"RTN","ECOBU",135,0)
 ;;
"RTN","ECOBU",136,0)
CLEAR(RESULT,HANDLE,PARAMS) ; restore object to default state
"RTN","ECOBU",137,0)
 N PROPERTY,DEFAULT,X
"RTN","ECOBU",138,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",139,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",140,0)
 .D OBP(.DEFAULT,PROPERTY_".GetDefaultValue")
"RTN","ECOBU",141,0)
 .D OBP(.X,PROPERTY_".SetValue."_DEFAULT)
"RTN","ECOBU",142,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",143,0)
 S RESULT=1
"RTN","ECOBU",144,0)
 Q
"RTN","ECOBU",145,0)
 ;
"RTN","ECOBU",146,0)
DIAGRAM(RESULT,HANDLE,PARAMS) ; draw class diagram
"RTN","ECOBU",147,0)
 N CLASS,X,WIDTH,METHOD,PROPERTY,EXTEND,COLLECT,NAME
"RTN","ECOBU",148,0)
 D GET^ECOB(.CLASS,HANDLE,"Pu","_class")
"RTN","ECOBU",149,0)
 S X=$L(CLASS)+2
"RTN","ECOBU",150,0)
 S WIDTH=$S(X<20:20,X<40:40,X<60:60,1:70)
"RTN","ECOBU",151,0)
 D DIAGHDR(CLASS,WIDTH)
"RTN","ECOBU",152,0)
 ;;
"RTN","ECOBU",153,0)
 D DIAGSGMT("Methods",WIDTH)
"RTN","ECOBU",154,0)
 D METHOD(.METHOD,HANDLE_".Methods.First")
"RTN","ECOBU",155,0)
 F  Q:METHOD="-1^End of list"  D
"RTN","ECOBU",156,0)
 .D OBM(.NAME,METHOD_".GetName")
"RTN","ECOBU",157,0)
 .D DIAGATTR(NAME,WIDTH)
"RTN","ECOBU",158,0)
 .D METHOD(.METHOD,HANDLE_".Methods.Next")
"RTN","ECOBU",159,0)
 .Q
"RTN","ECOBU",160,0)
 ;;
"RTN","ECOBU",161,0)
 D DIAGSGMT("Properties",WIDTH)
"RTN","ECOBU",162,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",163,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",164,0)
 .D OBP(.NAME,PROPERTY_".GetName")
"RTN","ECOBU",165,0)
 .D DIAGATTR(NAME,WIDTH)
"RTN","ECOBU",166,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",167,0)
 .Q
"RTN","ECOBU",168,0)
 ;;
"RTN","ECOBU",169,0)
 D DIAGSGMT("Extends",WIDTH)
"RTN","ECOBU",170,0)
 D METHOD(.EXTEND,HANDLE_".Root.First")
"RTN","ECOBU",171,0)
 F  Q:EXTEND="-1^End of list"  D
"RTN","ECOBU",172,0)
 .D:EXTEND'=CLASS DIAGATTR(EXTEND,WIDTH)
"RTN","ECOBU",173,0)
 .D METHOD(.EXTEND,HANDLE_".Root.Next")
"RTN","ECOBU",174,0)
 .Q
"RTN","ECOBU",175,0)
 D DIAGFTR(WIDTH)
"RTN","ECOBU",176,0)
 S RESULT=1
"RTN","ECOBU",177,0)
 Q
"RTN","ECOBU",178,0)
 ;
"RTN","ECOBU",179,0)
GET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOBU",180,0)
 N PROPERTY,PROP
"RTN","ECOBU",181,0)
 S RESULT="-1^Invalid property"
"RTN","ECOBU",182,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",183,0)
 D METHOD(.PROP,HANDLE_".Properties.Find1."_PROPERTY)
"RTN","ECOBU",184,0)
 D:PROP'="" OBP(.RESULT,PROP_".GetValue")
"RTN","ECOBU",185,0)
 Q
"RTN","ECOBU",186,0)
 ;;
"RTN","ECOBU",187,0)
INFO(RESULT,HANDLE,PARAMS) ;handler for business info display
"RTN","ECOBU",188,0)
 N JUSTIFY,OFFSET,PROPERTY
"RTN","ECOBU",189,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBU",190,0)
 W !,$J("Name : ",JUSTIFY),"Value"
"RTN","ECOBU",191,0)
 W !,$J("-----|-",JUSTIFY),"-----"
"RTN","ECOBU",192,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",193,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",194,0)
 .D OBP(.NAME,PROPERTY_".GetName")
"RTN","ECOBU",195,0)
 .D METHOD(.RESULT,HANDLE_".Show"_NAME_"."_JUSTIFY)
"RTN","ECOBU",196,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",197,0)
 .Q
"RTN","ECOBU",198,0)
 S RESULT=1
"RTN","ECOBU",199,0)
 ;;
"RTN","ECOBU",200,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBU",201,0)
 I PARSE="Get" D  Q
"RTN","ECOBU",202,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",203,0)
 .S PROPERTY=$P(PROPERTY,"Get",2)
"RTN","ECOBU",204,0)
 .Q
"RTN","ECOBU",205,0)
 I PARSE="Handle" D  Q
"RTN","ECOBU",206,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOBU",207,0)
 .Q
"RTN","ECOBU",208,0)
 I PARSE="Handle1" D  Q
"RTN","ECOBU",209,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOBU",210,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOBU",211,0)
 .Q
"RTN","ECOBU",212,0)
 I PARSE="Justify" D  Q
"RTN","ECOBU",213,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBU",214,0)
 .Q
"RTN","ECOBU",215,0)
 I PARSE="Method" D  Q
"RTN","ECOBU",216,0)
 .S METHOD=$P(VALUE,".",2)
"RTN","ECOBU",217,0)
 .Q
"RTN","ECOBU",218,0)
 I PARSE="Offset" D  Q
"RTN","ECOBU",219,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBU",220,0)
 .S OFFSET=JUSTIFY+5
"RTN","ECOBU",221,0)
 .Q
"RTN","ECOBU",222,0)
 I PARSE="Params" D  Q
"RTN","ECOBU",223,0)
 .S PARAMS=$P(VALUE,".",3,99)
"RTN","ECOBU",224,0)
 .Q
"RTN","ECOBU",225,0)
 I PARSE="Set" D  Q
"RTN","ECOBU",226,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",227,0)
 .S PROPERTY=$P(PROPERTY,"Set",2)
"RTN","ECOBU",228,0)
 .S VALUE=$P(VALUE,".",2)
"RTN","ECOBU",229,0)
 .Q
"RTN","ECOBU",230,0)
 I PARSE="Show" D  Q
"RTN","ECOBU",231,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",232,0)
 .S PROPERTY=$P(PROPERTY,"Show",2)
"RTN","ECOBU",233,0)
 .Q
"RTN","ECOBU",234,0)
 Q
"RTN","ECOBU",235,0)
 ;
"RTN","ECOBU",236,0)
SET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOBU",237,0)
 N PROPERTY,PROP
"RTN","ECOBU",238,0)
 S RESULT="-1^Invalid property"
"RTN","ECOBU",239,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",240,0)
 S PARAMS=$P(PARAMS,".",2,99)
"RTN","ECOBU",241,0)
 D METHOD(.PROP,HANDLE_".Properties.Find1."_PROPERTY)
"RTN","ECOBU",242,0)
 D:PROP'="" OBP(.RESULT,PROP_".SetValue."_PARAMS)
"RTN","ECOBU",243,0)
 Q
"RTN","ECOBU",244,0)
 ;
"RTN","ECOBU",245,0)
SHOW(RESULT,HANDLE,METHOD,PARAMS) ; show a property
"RTN","ECOBU",246,0)
 N JUSTIFY,PROPERTY
"RTN","ECOBU",247,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",248,0)
 S PARAMS=$P(PARAMS,".",2,99)
"RTN","ECOBU",249,0)
 D METHOD(.RESULT,HANDLE_".Get"_PROPERTY)
"RTN","ECOBU",250,0)
 Q:RESULT="-1^Invalid property"
"RTN","ECOBU",251,0)
 S JUSTIFY=$S(+PARAMS:+PARAMS,1:0)
"RTN","ECOBU",252,0)
 W !,$J("<"_PROPERTY_"> : ",JUSTIFY),RESULT
"RTN","ECOBU",253,0)
 Q
"RTN","ECOBU",254,0)
 ;;
"RTN","ECOBU",255,0)
 ;; public methods
"RTN","ECOBU",256,0)
CREATE(NAME)  ;
"RTN","ECOBU",257,0)
 ; call parent first
"RTN","ECOBU",258,0)
 N HANDLE,CHILD,METHOD,PROPERTY,X
"RTN","ECOBU",259,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOBU",260,0)
 D SELF^ECOB(.RESULT,HANDLE,"EC OBU UTILITY","Utility","METHOD^ECOBU(.RESULT,ARGUMENT)","ECOB")
"RTN","ECOBU",261,0)
 ;;
"RTN","ECOBU",262,0)
 S CHILD=$$CREATE^ECOB30(NAME)
"RTN","ECOBU",263,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Collect")
"RTN","ECOBU",264,0)
 D METHOD^ECOB30(.X,CHILD_".SetCollector."_HANDLE)
"RTN","ECOBU",265,0)
 ;;
"RTN","ECOBU",266,0)
 S CHILD=$$CREATE^ECOBMC(NAME)
"RTN","ECOBU",267,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Methods")
"RTN","ECOBU",268,0)
 ;; default ClassDiagram method
"RTN","ECOBU",269,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.ClassDiagram")
"RTN","ECOBU",270,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",271,0)
 D OBM(.X,METHOD_".SetDescription.Displays diagram of the class.")
"RTN","ECOBU",272,0)
 D OBM(.X,METHOD_".SetHandler.DIAGRAM^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",273,0)
 D OBM(.X,METHOD_".SetParams.")
"RTN","ECOBU",274,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",275,0)
 ;;
"RTN","ECOBU",276,0)
 ;; default ClassInfo method
"RTN","ECOBU",277,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.ClassInfo")
"RTN","ECOBU",278,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",279,0)
 D OBM(.X,METHOD_".SetDescription.Displays information about the class.")
"RTN","ECOBU",280,0)
 D OBM(.X,METHOD_".SetHandler.CLASS^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",281,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",282,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",283,0)
 ;; default Clear method
"RTN","ECOBU",284,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Clear")
"RTN","ECOBU",285,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",286,0)
 D OBM(.X,METHOD_".SetDescription.Restores public attributes to default state.")
"RTN","ECOBU",287,0)
 D OBM(.X,METHOD_".SetHandler.CLEAR^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",288,0)
 D OBM(.X,METHOD_".SetParams.")
"RTN","ECOBU",289,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",290,0)
 ;; default Get method
"RTN","ECOBU",291,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Get")
"RTN","ECOBU",292,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",293,0)
 D OBM(.X,METHOD_".SetDescription.Gets a property value.")
"RTN","ECOBU",294,0)
 D OBM(.X,METHOD_".SetHandler.GET^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",295,0)
 D OBM(.X,METHOD_".SetParams.Get[propertyName]")
"RTN","ECOBU",296,0)
 D OBM(.X,METHOD_".SetReturns.Property.Value")
"RTN","ECOBU",297,0)
 ;; default Set method
"RTN","ECOBU",298,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Set")
"RTN","ECOBU",299,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",300,0)
 D OBM(.X,METHOD_".SetDescription.Sets a property value.")
"RTN","ECOBU",301,0)
 D OBM(.X,METHOD_".SetHandler.SET^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",302,0)
 D OBM(.X,METHOD_".SetParams.Set[propertyName].[Value]")
"RTN","ECOBU",303,0)
 D OBM(.X,METHOD_".SetReturns.1 if successful, -1 otherwise")
"RTN","ECOBU",304,0)
 ;;
"RTN","ECOBU",305,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Show")
"RTN","ECOBU",306,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",307,0)
 D OBM(.X,METHOD_".SetDescription.Displays a property value.")
"RTN","ECOBU",308,0)
 D OBM(.X,METHOD_".SetHandler.SHOW^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",309,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",310,0)
 D OBM(.X,METHOD_".SetReturns.[Property.Name] : [Property.Value]")
"RTN","ECOBU",311,0)
 ;;
"RTN","ECOBU",312,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Info")
"RTN","ECOBU",313,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",314,0)
 D OBM(.X,METHOD_".SetDescription.Displays business information.")
"RTN","ECOBU",315,0)
 D OBM(.X,METHOD_".SetHandler.INFO^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",316,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",317,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",318,0)
 ;;
"RTN","ECOBU",319,0)
 S CHILD=$$CREATE^ECOBPC(NAME)
"RTN","ECOBU",320,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Properties")
"RTN","ECOBU",321,0)
 ;;
"RTN","ECOBU",322,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.Add._this")
"RTN","ECOBU",323,0)
 D OBP(.X,PROPERTY_".SetAddedByClass.Utility")
"RTN","ECOBU",324,0)
 D OBP(.X,PROPERTY_".SetValue."_HANDLE)
"RTN","ECOBU",325,0)
 D OBP(.X,PROPERTY_".SetDefaultValue."_HANDLE)
"RTN","ECOBU",326,0)
 ;;
"RTN","ECOBU",327,0)
 S CHILD=$$CREATE^ECOBL(NAME)
"RTN","ECOBU",328,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Root")
"RTN","ECOBU",329,0)
 ;;
"RTN","ECOBU",330,0)
 D METHOD(.X,HANDLE_".Root.Add.EC BASE")
"RTN","ECOBU",331,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU UTILITY")
"RTN","ECOBU",332,0)
 ; complex properties last
"RTN","ECOBU",333,0)
 Q HANDLE
"RTN","ECOBU",334,0)
 ;;
"RTN","ECOBU",335,0)
DESTROY(HANDLE)  ;
"RTN","ECOBU",336,0)
 ; call parent last
"RTN","ECOBU",337,0)
 N CHILD
"RTN","ECOBU",338,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Collect")
"RTN","ECOBU",339,0)
 D DESTROY^ECOB30(CHILD)
"RTN","ECOBU",340,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Methods")
"RTN","ECOBU",341,0)
 D DESTROY^ECOBMC(CHILD)
"RTN","ECOBU",342,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Properties")
"RTN","ECOBU",343,0)
 D DESTROY^ECOBPC(CHILD)
"RTN","ECOBU",344,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Root")
"RTN","ECOBU",345,0)
 D DESTROY^ECOBL(CHILD)
"RTN","ECOBU",346,0)
 Q $$DESTROY^ECOB(HANDLE)
"RTN","ECOBU",347,0)
 ;;
"RTN","ECOBU",348,0)
FUNCTION(HANDLE,ARGUMENT)  ;
"RTN","ECOBU",349,0)
 ; argument=method.(additional.params....)
"RTN","ECOBU",350,0)
 N RESULT
"RTN","ECOBU",351,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOBU",352,0)
 Q RESULT
"RTN","ECOBU",353,0)
 ;
"RTN","ECOBU",354,0)
OUT(HANDLE,ARGUMENT)  ;
"RTN","ECOBU",355,0)
 ; argument=method.(additional.params....)
"RTN","ECOBU",356,0)
 N RESULT
"RTN","ECOBU",357,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOBU",358,0)
 Q RESULT
"RTN","ECOBU",359,0)
 ;
"RTN","ECOBU",360,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBU",361,0)
 ; argument=handle.method.(additional.params...)
"RTN","ECOBU",362,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBU",363,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBU",364,0)
 I $G(HANDLE)'="",'$D(@HANDLE) S RESULT="-1^No data at handle: "_HANDLE_"." Q  ;EC*129 - JAM
"RTN","ECOBU",365,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBU",366,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBU",367,0)
 I METHOD="Collect" D ECOB30(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",368,0)
 I METHOD="Methods" D ECOBMC(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",369,0)
 I METHOD="Properties" D ECOBPC(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",370,0)
 I METHOD="Root" D ECOBL(.RESULT,HANDLE,METHOD,PARAMS) Q
"RTN","ECOBU",371,0)
 I METHOD="mf" D ECOBM(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",372,0)
 I METHOD="of" D ECOB2(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",373,0)
 I METHOD="pf" D ECOBP(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",374,0)
 D HANDLERS(.RESULT,HANDLE,METHOD,PARAMS) Q
"RTN","ECOBU",375,0)
 ;;
"RTN","ECUERPC")
0^3^B62941200^B57953932
"RTN","ECUERPC",1,0)
ECUERPC ;ALB/JAM - Event Capture Data Entry Broker Utilities ;12/17/14  14:34
"RTN","ECUERPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,46,47,59,72,95,114,126,129**;8 May 96;Build 7
"RTN","ECUERPC",3,0)
 ;
"RTN","ECUERPC",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECUERPC",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR5747
"RTN","ECUERPC",6,0)
 ;
"RTN","ECUERPC",7,0)
USRUNT(RESULTS,ECARY) ;
"RTN","ECUERPC",8,0)
 ;This broker call returns an array of DSS units for a user & location
"RTN","ECUERPC",9,0)
 ;        RPC: EC GETUSRDSSUNIT
"RTN","ECUERPC",10,0)
 ;INPUTS     ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",11,0)
 ;            1. ECL   - Location IEN (if define gives User's DSS 
"RTN","ECUERPC",12,0)
 ;                       units for a location)
"RTN","ECUERPC",13,0)
 ;            2. ECDUZ - New Person IEN (if define gives list of 
"RTN","ECUERPC",14,0)
 ;                       DSS Units available to user)
"RTN","ECUERPC",15,0)
 ;
"RTN","ECUERPC",16,0)
 ;OUTPUTS     RESULTS - Array of DSS Units. Data pieces as follows:-
"RTN","ECUERPC",17,0)
 ;            PIECE - Description
"RTN","ECUERPC",18,0)
 ;              1     IEN of file 724
"RTN","ECUERPC",19,0)
 ;              2     Name of DSS Unit
"RTN","ECUERPC",20,0)
 ;              3     Send to PCE Flag
"RTN","ECUERPC",21,0)
 ;              4     Data Entry Date/Time Default
"RTN","ECUERPC",22,0)
 N ECL,ECDUZ,CNT,STR,DPT,IEN
"RTN","ECUERPC",23,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",24,0)
 S ECL=$P(ECARY,U),ECDUZ=$P(ECARY,U,2) I ECL="",ECDUZ="" Q
"RTN","ECUERPC",25,0)
 ;S ECDUZ=$G(DUZ,U),ECL=$P(ECARY,U) I (ECDUZ="")!(ECL="") Q
"RTN","ECUERPC",26,0)
 K ^TMP($J,"ECUSRUNT") S (DPT,CNT)=0
"RTN","ECUERPC",27,0)
 I ECL'="",ECDUZ="" S ECDUZ=$G(DUZ,U) I ECDUZ="" Q
"RTN","ECUERPC",28,0)
 I $D(^XUSEC("ECALLU",ECDUZ)) S DPT="" D
"RTN","ECUERPC",29,0)
 .I ECL="" S ^TMP($J,"ECUSRUNT",CNT+1)="ALL^ALL" Q
"RTN","ECUERPC",30,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",31,0)
 .F  S DPT=$O(^ECD("B",DPT))  Q:DPT=""  S IEN=0 D
"RTN","ECUERPC",32,0)
 ..F  S IEN=$O(^ECD("B",DPT,IEN)) Q:'IEN  D UNTCHK
"RTN","ECUERPC",33,0)
 E  D
"RTN","ECUERPC",34,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",35,0)
 .F  S DPT=$O(^VA(200,ECDUZ,"EC",DPT)) Q:'DPT  S IEN=DPT D UNTCHK
"RTN","ECUERPC",36,0)
 S RESULTS=$NA(^TMP($J,"ECUSRUNT"))
"RTN","ECUERPC",37,0)
 Q
"RTN","ECUERPC",38,0)
UNTCHK ;Check if DSS unit exist as event code screen and if active
"RTN","ECUERPC",39,0)
 N DSSF,DFD
"RTN","ECUERPC",40,0)
 ;I '$D(^ECJ("AP",ECL,IEN))!($P($G(^ECD(IEN,0)),U,6)) Q
"RTN","ECUERPC",41,0)
 I ECL'="",'$D(^ECJ("AP",ECL,IEN)) Q
"RTN","ECUERPC",42,0)
 I ($P($G(^ECD(IEN,0)),U,6))!('$P($G(^ECD(IEN,0)),U,8)) Q
"RTN","ECUERPC",43,0)
 ;Check if event code screens associated with DSS unit are active
"RTN","ECUERPC",44,0)
 I ECL'="",'$$ECSCHK(ECL,IEN) Q
"RTN","ECUERPC",45,0)
 S DSSF=$P(^ECD(IEN,0),"^",14) S:DSSF="" DSSF="N"
"RTN","ECUERPC",46,0)
 S DFD=$S($P(^ECD(IEN,0),"^",12)="N":"N",1:"X") ; added by VMP
"RTN","ECUERPC",47,0)
 S CNT=CNT+1,STR=IEN_"^"_$P(^ECD(IEN,0),"^")_U_DSSF_"^"_DFD
"RTN","ECUERPC",48,0)
 S ^TMP($J,"ECUSRUNT",CNT)=STR
"RTN","ECUERPC",49,0)
 Q
"RTN","ECUERPC",50,0)
ECSCHK(ECL,ECIEN) ;Check if any event code screens associated with DSS unit are active; EC*129
"RTN","ECUERPC",51,0)
 N ECAT,ECPRX,ECS,ECNODE,ECFLG
"RTN","ECUERPC",52,0)
 S ECAT="",ECFLG=0
"RTN","ECUERPC",53,0)
 F  S ECAT=$O(^ECJ("AP",ECL,ECIEN,ECAT)) Q:ECAT=""  D  Q:ECFLG
"RTN","ECUERPC",54,0)
 .S ECPRX="" F  S ECPRX=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX)) Q:ECPRX=""  D  Q:ECFLG
"RTN","ECUERPC",55,0)
 ..S ECS=0 F  S ECS=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX,ECS)) Q:'ECS  D  Q:ECFLG
"RTN","ECUERPC",56,0)
 ...S ECNODE=$G(^ECJ(ECS,0)) I $P(ECNODE,"^",2)="" S ECFLG=1
"RTN","ECUERPC",57,0)
 Q ECFLG
"RTN","ECUERPC",58,0)
 ;
"RTN","ECUERPC",59,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUERPC",60,0)
 ;This broker entry point returns an array of categories for an Event 
"RTN","ECUERPC",61,0)
 ;Code screen based on location and DSS unit.
"RTN","ECUERPC",62,0)
 ;        RPC: EC GETECSCATS
"RTN","ECUERPC",63,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",64,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",65,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",66,0)
 ;            ECCSTA-Active or inactive category
"RTN","ECUERPC",67,0)
 ;                   A-ctive (default), I-nactive, B-oth
"RTN","ECUERPC",68,0)
 ;
"RTN","ECUERPC",69,0)
 ;OUTPUTS     RESULTS - Array of categories. Data pieces as follows:-
"RTN","ECUERPC",70,0)
 ;            PIECE - Description
"RTN","ECUERPC",71,0)
 ;              1 - Category IEN
"RTN","ECUERPC",72,0)
 ;              2 - Category description
"RTN","ECUERPC",73,0)
 ;
"RTN","ECUERPC",74,0)
 N ECL,ECD,ECC,CNT,DATA,ECCSTA
"RTN","ECUERPC",75,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",76,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2) I (ECL="")!(ECD="") Q
"RTN","ECUERPC",77,0)
 S ECCSTA=$P(ECARY,U,3)
"RTN","ECUERPC",78,0)
 K ^TMP($J,"ECSCATS")
"RTN","ECUERPC",79,0)
 D CATS^ECHECK1
"RTN","ECUERPC",80,0)
 M ^TMP($J,"ECSCATS")=ECC
"RTN","ECUERPC",81,0)
 S RESULTS=$NA(^TMP($J,"ECSCATS"))
"RTN","ECUERPC",82,0)
 Q
"RTN","ECUERPC",83,0)
PROC(RESULTS,ECARY) ;
"RTN","ECUERPC",84,0)
 ;This broker entry point returns an array of procedures for an Event 
"RTN","ECUERPC",85,0)
 ;Code screen (file #720.3) based on location, DSS unit, and Category
"RTN","ECUERPC",86,0)
 ;        RPC: EC GETECSPROCS
"RTN","ECUERPC",87,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",88,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",89,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",90,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",91,0)
 ;            ECDT - Procedure Date
"RTN","ECUERPC",92,0)
 ;
"RTN","ECUERPC",93,0)
 ;OUTPUTS     RESULTS - Array of procedures. Data pieces as follows:-
"RTN","ECUERPC",94,0)
 ;            PIECE - Description
"RTN","ECUERPC",95,0)
 ;              1  - EC National Number SPACE Procedure Name SPACE
"RTN","ECUERPC",96,0)
 ;                - [Synonym]
"RTN","ECUERPC",97,0)
 ;              2  - Procedure Code
"RTN","ECUERPC",98,0)
 ;              3  - CPT Code
"RTN","ECUERPC",99,0)
 ;              4  - Default volume (1 if no default volume)
"RTN","ECUERPC",100,0)
 ;              5  - Event code screen IEN
"RTN","ECUERPC",101,0)
 ;
"RTN","ECUERPC",102,0)
 N ECL,ECD,ECC,CNT,DATA,STR,ECCPT,PX,NAME,NUM ;126
"RTN","ECUERPC",103,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",104,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3) S:ECC="" ECC=0
"RTN","ECUERPC",105,0)
 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",106,0)
 S ECDT=$P(ECARY,U,4)
"RTN","ECUERPC",107,0)
 K ^TMP($J,"ECPRO")
"RTN","ECUERPC",108,0)
 D PROS^ECHECK1
"RTN","ECUERPC",109,0)
 S CNT=1,NAME="" F  S NAME=$O(^TMP("ECPRO",$J,"N2",NAME)) Q:NAME=""  S NUM=$O(^TMP("ECPRO",$J,"N2",NAME,0)) D  ;126
"RTN","ECUERPC",110,0)
 .S DATA=^TMP("ECPRO",$J,NUM),PX=$P(DATA,U) ;126
"RTN","ECUERPC",111,0)
 .S ECCPT=$S(PX["EC":$P($G(^EC(725,+PX,0)),"^",5),1:+PX)
"RTN","ECUERPC",112,0)
 .S STR=$P(DATA,U,5)_" "_$P(DATA,U,4)_" ["_$P(DATA,U,3)_"]"_U_PX
"RTN","ECUERPC",113,0)
 .S STR=STR_U_ECCPT_U_$S($P(DATA,U,6):+$P(DATA,U,6),1:1)_U_$P(DATA,U,2)
"RTN","ECUERPC",114,0)
 .S ^TMP($J,"ECPRO",CNT)=STR,CNT=CNT+1 ;126
"RTN","ECUERPC",115,0)
 S RESULTS=$NA(^TMP($J,"ECPRO"))
"RTN","ECUERPC",116,0)
 K ^TMP("ECPRO",$J)
"RTN","ECUERPC",117,0)
 Q
"RTN","ECUERPC",118,0)
ECPXMOD(RESULTS,ECARY) ;
"RTN","ECUERPC",119,0)
 ;Broker call returns modifier entries for a CPT Procedure
"RTN","ECUERPC",120,0)
 ;        RPC: EC GETPXMODIFIER
"RTN","ECUERPC",121,0)
 ;INPUTS   ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",122,0)
 ;          ECCPT - CPT code ien (file #81)
"RTN","ECUERPC",123,0)
 ;          ECDT  - Procedure date and time (fileman format)
"RTN","ECUERPC",124,0)
 ;
"RTN","ECUERPC",125,0)
 ;OUTPUTS  RESULTS - Array of procedure modifiers
"RTN","ECUERPC",126,0)
 ;          2-character modifier^modifer name^modifier ien #81.3
"RTN","ECUERPC",127,0)
 ;
"RTN","ECUERPC",128,0)
 N CNT,SUB,ECCPT,ECDT,DATA,ECMOD
"RTN","ECUERPC",129,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",130,0)
 S ECCPT=$P(ECARY,U),ECDT=$P(ECARY,U,2) I ECDT="" D NOW^%DTC S ECDT=%
"RTN","ECUERPC",131,0)
 I ECCPT="" Q
"RTN","ECUERPC",132,0)
 K ^TMP($J,"ECPXMODS") S (SUB,CNT)=0
"RTN","ECUERPC",133,0)
 S DATA=$$CODM^ICPTCOD(ECCPT,"ECMOD","",ECDT) I +DATA<0 Q
"RTN","ECUERPC",134,0)
 F  S SUB=$O(ECMOD(SUB)) Q:SUB=""  I $P(ECMOD(SUB),U,2)'="" D
"RTN","ECUERPC",135,0)
 . I +$$MODP^ICPTMOD(ECCPT,$P(ECMOD(SUB),U,2),"I",ECDT)>0 D
"RTN","ECUERPC",136,0)
 . . S CNT=CNT+1,^TMP($J,"ECPXMODS",CNT)=SUB_U_ECMOD(SUB)
"RTN","ECUERPC",137,0)
 S RESULTS=$NA(^TMP($J,"ECPXMODS"))
"RTN","ECUERPC",138,0)
 Q
"RTN","ECUERPC",139,0)
PRVDER(RESULTS,ECARY) ;
"RTN","ECUERPC",140,0)
 ;remove this rpc before release;JAM 6/4/01
"RTN","ECUERPC",141,0)
 ;This broker entry point returns an array of valid providers
"RTN","ECUERPC",142,0)
 ;        RPC: EC GETPROVIDER
"RTN","ECUERPC",143,0)
 ;INPUTS     ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",144,0)
 ;            ECDT  - Procedure date
"RTN","ECUERPC",145,0)
 ;
"RTN","ECUERPC",146,0)
 ;OUTPUTS     RESULTS - Array of providers. Data pieces as follows:-
"RTN","ECUERPC",147,0)
 ;            PIECE - Description
"RTN","ECUERPC",148,0)
 ;             IEN of file 200^Provider Name^occupation^specialty^
"RTN","ECUERPC",149,0)
 ;             subspecialty
"RTN","ECUERPC",150,0)
 ;
"RTN","ECUERPC",151,0)
 N IEN,CNT,ECUTN,KEY,USR
"RTN","ECUERPC",152,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",153,0)
 S ECDT=$P($G(ECARY),U),ECDT=$S(ECDT="":DT,1:ECDT)
"RTN","ECUERPC",154,0)
 K ^TMP($J,"ECPRVDRS") S CNT=0
"RTN","ECUERPC",155,0)
 F KEY="PROVIDER" S IEN=0 D
"RTN","ECUERPC",156,0)
 .F  S IEN=$O(^XUSEC(KEY,IEN)) Q:'IEN  S USR=$G(^VA(200,IEN,0)) D:USR'=""
"RTN","ECUERPC",157,0)
 ..S ECUTN=$$GET^XUA4A72(IEN,ECDT) I +ECUTN'>0 Q
"RTN","ECUERPC",158,0)
 ..S CNT=CNT+1,^TMP($J,"ECPRVDRS",CNT)=IEN_U_$P(USR,U)_U_$P(ECUTN,2,4)
"RTN","ECUERPC",159,0)
 S RESULTS=$NA(^TMP($J,"ECPRVDRS"))
"RTN","ECUERPC",160,0)
 Q
"RTN","ECUERPC",161,0)
 ;
"RTN","ECUERPC",162,0)
ELIG(RESULTS,ECARY) ;
"RTN","ECUERPC",163,0)
 ;
"RTN","ECUERPC",164,0)
 ;Broker call returns a list of patient eligibilities
"RTN","ECUERPC",165,0)
 ;        RPC: EC GETPATELIG
"RTN","ECUERPC",166,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",167,0)
 ;          DFN - Patient ien (file #2)
"RTN","ECUERPC",168,0)
 ;
"RTN","ECUERPC",169,0)
 ;OUTPUTS  RESULTS - Array of eligibilities
"RTN","ECUERPC",170,0)
 ;          primary/secondary elig flag^elig ien^elig description
"RTN","ECUERPC",171,0)
 ;
"RTN","ECUERPC",172,0)
 N CNT,SUB,DFN,VAEL
"RTN","ECUERPC",173,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",174,0)
 S DFN=$P(ECARY,U) I DFN="" Q
"RTN","ECUERPC",175,0)
 K ^TMP($J,"ECPATELIG")
"RTN","ECUERPC",176,0)
 D ELIG^VADPT I $G(VAEL(1))="" Q
"RTN","ECUERPC",177,0)
 S ^TMP($J,"ECPATELIG",1)="1^"_VAEL(1),SUB=0,CNT=1
"RTN","ECUERPC",178,0)
 F  S SUB=$O(VAEL(1,SUB)) Q:SUB=""  D
"RTN","ECUERPC",179,0)
 . S CNT=CNT+1,^TMP($J,"ECPATELIG",CNT)="0^"_VAEL(1,SUB)
"RTN","ECUERPC",180,0)
 S RESULTS=$NA(^TMP($J,"ECPATELIG"))
"RTN","ECUERPC",181,0)
 Q
"RTN","ECUERPC",182,0)
PRDEFS(RESULTS,ECARY) ;
"RTN","ECUERPC",183,0)
 ;This broker entry point returns the defaults for procedure data entry
"RTN","ECUERPC",184,0)
 ;        RPC: EC GETPRODEFS
"RTN","ECUERPC",185,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",186,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",187,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",188,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",189,0)
 ;
"RTN","ECUERPC",190,0)
 ;OUTPUTS    RESULTS - Data pieces as follows:-
"RTN","ECUERPC",191,0)
 ;           PIECE - Description
"RTN","ECUERPC",192,0)
 ;             1 - Associated Clinic IEN
"RTN","ECUERPC",193,0)
 ;             2 - Associated Clinic
"RTN","ECUERPC",194,0)
 ;             3 - Medical Specialty IEN
"RTN","ECUERPC",195,0)
 ;             4 - Medical Specialty
"RTN","ECUERPC",196,0)
 ;
"RTN","ECUERPC",197,0)
 N ECL,ECD,ECC,ECP,IEN,ASC,ASCNM,MEDSP,MEDSPNM,ECCH
"RTN","ECUERPC",198,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",199,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3),ECP=$P(ECARY,U,4)
"RTN","ECUERPC",200,0)
 S:ECC="" ECC=0 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",201,0)
 S (ASCNM,MEDSPNM)="",ECCH=ECL_"-"_ECD_"-"_ECC_"-"_ECP
"RTN","ECUERPC",202,0)
 I '$D(^ECJ("B",ECCH)) Q
"RTN","ECUERPC",203,0)
 S IEN=$O(^ECJ("B",ECCH,0)) I IEN="" Q
"RTN","ECUERPC",204,0)
 S ASC=$P($G(^ECJ(IEN,"PRO")),U,4) I ASC D
"RTN","ECUERPC",205,0)
 .S ASCNM=$$GET1^DIQ(44,ASC,.01,"I")
"RTN","ECUERPC",206,0)
 S MEDSP=$P($G(^ECD(ECD,0)),U,3) I MEDSP D 
"RTN","ECUERPC",207,0)
 .S MEDSPNM=$$GET1^DIQ(723,MEDSP,.01,"I")
"RTN","ECUERPC",208,0)
 S RESULTS=ASC_U_ASCNM_U_MEDSP_U_MEDSPNM
"RTN","ECUERPC",209,0)
 Q
"RTN","ECUERPC",210,0)
PATPROC(RESULTS,ECARY) ;
"RTN","ECUERPC",211,0)
 ;
"RTN","ECUERPC",212,0)
 ;Broker call returns the entries from EVENT CAPTURE PATIENT FILE #721
"RTN","ECUERPC",213,0)
 ;
"RTN","ECUERPC",214,0)
 ;RPC: EC GETPATPROCS
"RTN","ECUERPC",215,0)
 ;
"RTN","ECUERPC",216,0)
 ;INPUTS   ECARY - Contains the following values separated by "^"
"RTN","ECUERPC",217,0)
 ;         ECLOC - Location ien
"RTN","ECUERPC",218,0)
 ;         ECPAT - Patient DFN ien
"RTN","ECUERPC",219,0)
 ;         ECUNT - DSS unit ien
"RTN","ECUERPC",220,0)
 ;         ECSD  - Start Date
"RTN","ECUERPC",221,0)
 ;         ECED  - End Date
"RTN","ECUERPC",222,0)
 ;                                                                         
"RTN","ECUERPC",223,0)
 ;OUTPUTS  RESULTS - Array of Event Capture Patient entries contain
"RTN","ECUERPC",224,0)
 ;          721 IEN^Procedure date/time^Category^Procedure^Volume^
"RTN","ECUERPC",225,0)
 ;          Provider^ordering section^associated clinic^
"RTN","ECUERPC",226,0)
 ;          (ICD Coding system) primary dx code primary dx code description
"RTN","ECUERPC",227,0)
 ;          ^Provider IEN
"RTN","ECUERPC",228,0)
 ;
"RTN","ECUERPC",229,0)
 N IEN,CNT,ECCS,ECV,ECLOC,ECUNT,ECPAT,PX,NODE,DATA,PDT,PDX,PND,PDXD,CAT,ECI
"RTN","ECUERPC",230,0)
 N ORS,PRV,PRO,PROV,ECU
"RTN","ECUERPC",231,0)
 D SETENV^ECUMRPC ;set environment variables for RPC broker
"RTN","ECUERPC",232,0)
 S ECV="ECLOC^ECPAT^ECUNT^ECSD^ECED"
"RTN","ECUERPC",233,0)
 D PARSE(ECV,ECARY) I (ECLOC="")!(ECPAT="")!(ECUNT="") Q
"RTN","ECUERPC",234,0)
 K ^TMP($J,"ECPATPX")
"RTN","ECUERPC",235,0)
 S ECSD=$G(ECSD,DT),ECED=$G(ECED,DT)
"RTN","ECUERPC",236,0)
 S %DT="X" F ECI="ECSD","ECED" S X=@ECI D ^%DT S @ECI=Y
"RTN","ECUERPC",237,0)
 K X,Y
"RTN","ECUERPC",238,0)
 S ECSD=$S(ECSD=-1:DT,1:ECSD)-.0001,ECED=$S(ECED=-1:DT,1:ECED)+.9999
"RTN","ECUERPC",239,0)
 Q:ECED'>ECSD  S PDT=ECSD,CNT=0
"RTN","ECUERPC",240,0)
 F  S PDT=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT)) Q:'PDT!(PDT>ECED)  D
"RTN","ECUERPC",241,0)
 . S IEN=0 F  S IEN=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT,IEN)) Q:'IEN  D
"RTN","ECUERPC",242,0)
 . . S NODE=$G(^ECH(IEN,0)),PND=$G(^ECH(IEN,"P")),PX=$P(NODE,U,9)
"RTN","ECUERPC",243,0)
 . . Q:NODE=""  S (PRV,CAT,ORS,ASC,PDXD)="",PDX=$P(PND,U,2)
"RTN","ECUERPC",244,0)
 . . I PX["EC" D
"RTN","ECUERPC",245,0)
 . . . S PRO=$G(^EC(725,$P(PX,";"),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUERPC",246,0)
 . . E  S PRO=$$CPT^ICPTCOD($P(PX,";"),PDT) S PX=$P(PRO,U,2)_" "_$P(PRO,U,3)
"RTN","ECUERPC",247,0)
 . . S:$P(NODE,U,8) CAT=$$GET1^DIQ(726,$P(NODE,U,8),.01,"I")
"RTN","ECUERPC",248,0)
 . . K PROV S ECU=$$GETPPRV^ECPRVMUT(IEN,.PROV),PRV=$S(ECU:"UNKNOWN",1:$P(PROV,"^",2)),ECU=$S('ECU:+PROV,1:"")
"RTN","ECUERPC",249,0)
 . . S:$P(NODE,U,12) ORS=$$GET1^DIQ(723,$P(NODE,U,12),.01,"I")
"RTN","ECUERPC",250,0)
 . . S:$P(NODE,U,19) ASC=$$GET1^DIQ(44,$P(NODE,U,19),.01,"I")
"RTN","ECUERPC",251,0)
 . . I PDX D
"RTN","ECUERPC",252,0)
 . . . ; ICD10 Changes
"RTN","ECUERPC",253,0)
 . . . S ECCS=$$SINFO^ICDEX("DIAG",PDT) ; Supported by ICR 5747
"RTN","ECUERPC",254,0)
 . . . S PDXD=$$ICDDX^ICDEX(PDX,PDT,+ECCS,"I") ; Supported by ICR 5747
"RTN","ECUERPC",255,0)
 . . . S ECCS=$P(ECCS,U,2),ECCS=" ("_$P(ECCS,"-",1)_$P(ECCS,"-",2)_")"
"RTN","ECUERPC",256,0)
 . . . S PDXD=$P(PDXD,U,2)_" "_$P(PDXD,U,4)_ECCS
"RTN","ECUERPC",257,0)
 . . S DATA=$P(NODE,U)_U_$$FMTE^XLFDT($P(NODE,U,3),"2F")_U_CAT_U_PX
"RTN","ECUERPC",258,0)
 . . S DATA=DATA_U_$P(NODE,U,10)_U_PRV_U_ORS_U_ASC_U_PDXD_U_ECU
"RTN","ECUERPC",259,0)
 . . S CNT=CNT+1,^TMP($J,"ECPATPX",CNT)=DATA
"RTN","ECUERPC",260,0)
 S RESULTS=$NA(^TMP($J,"ECPATPX"))
"RTN","ECUERPC",261,0)
 Q
"RTN","ECUERPC",262,0)
PARSE(ECV,ECARY) ;Parse Variable
"RTN","ECUERPC",263,0)
 N I
"RTN","ECUERPC",264,0)
 F I=1:1:$L(ECARY,U) S @$P(ECV,U,I)=$P(ECARY,U,I)
"RTN","ECUERPC",265,0)
 Q
"VER")
8.0^22.0
"BLD",10032,6)
^123
**END**
**END**

