Released EC*2*131 SEQ #124
Extracted from mail message
**KIDS**:EC*2.0*131^

**INSTALL NAME**
EC*2.0*131
"BLD",9695,0)
EC*2.0*131^EVENT CAPTURE^0^3160620^y
"BLD",9695,4,0)
^9.64PA^724^1
"BLD",9695,4,724,0)
724
"BLD",9695,4,724,2,0)
^9.641^724^1
"BLD",9695,4,724,2,724,0)
DSS UNIT  (File-top level)
"BLD",9695,4,724,2,724,1,0)
^9.6411^10^2
"BLD",9695,4,724,2,724,1,10,0)
CATEGORY (Y/N)
"BLD",9695,4,724,2,724,1,13,0)
SEND TO PCE
"BLD",9695,4,724,222)
y^y^p^^^^n^^n
"BLD",9695,4,724,224)

"BLD",9695,4,"APDD",724,724)

"BLD",9695,4,"APDD",724,724,10)

"BLD",9695,4,"APDD",724,724,13)

"BLD",9695,4,"B",724,724)

"BLD",9695,6.3)
13
"BLD",9695,"ABPKG")
n
"BLD",9695,"INIT")
POST^EC2P131
"BLD",9695,"KRN",0)
^9.67PA^779.2^20
"BLD",9695,"KRN",.4,0)
.4
"BLD",9695,"KRN",.401,0)
.401
"BLD",9695,"KRN",.402,0)
.402
"BLD",9695,"KRN",.403,0)
.403
"BLD",9695,"KRN",.5,0)
.5
"BLD",9695,"KRN",.84,0)
.84
"BLD",9695,"KRN",3.6,0)
3.6
"BLD",9695,"KRN",3.8,0)
3.8
"BLD",9695,"KRN",9.2,0)
9.2
"BLD",9695,"KRN",9.2,"NM",0)
^9.68A^37^36
"BLD",9695,"KRN",9.2,"NM",1,0)
ECDSSSNR^^0
"BLD",9695,"KRN",9.2,"NM",2,0)
ECDISSUM^^0
"BLD",9695,"KRN",9.2,"NM",3,0)
ECSECT^^0
"BLD",9695,"KRN",9.2,"NM",4,0)
ECSSASSOCCLIN^^0
"BLD",9695,"KRN",9.2,"NM",5,0)
ECSSCSS^^0
"BLD",9695,"KRN",9.2,"NM",6,0)
ECSSMOD^^0
"BLD",9695,"KRN",9.2,"NM",7,0)
ECBATCH^^0
"BLD",9695,"KRN",9.2,"NM",8,0)
ECPCER^^0
"BLD",9695,"KRN",9.2,"NM",9,0)
ECENTER^^0
"BLD",9695,"KRN",9.2,"NM",10,0)
ECPAT0^^0
"BLD",9695,"KRN",9.2,"NM",11,0)
ECPAT^^0
"BLD",9695,"KRN",9.2,"NM",12,0)
ECMULT PROC^^0
"BLD",9695,"KRN",9.2,"NM",13,0)
ECRDSSA^^0
"BLD",9695,"KRN",9.2,"NM",14,0)
ECAMIS^^0
"BLD",9695,"KRN",9.2,"NM",15,0)
EC NTPCE^^0
"BLD",9695,"KRN",9.2,"NM",16,0)
ECRECER^^0
"BLD",9695,"KRN",9.2,"NM",17,0)
EC OS SUM^^0
"BLD",9695,"KRN",9.2,"NM",18,0)
ECPAT SUM^^0
"BLD",9695,"KRN",9.2,"NM",19,0)
ECRPRSN^^0
"BLD",9695,"KRN",9.2,"NM",20,0)
ECPROV^^0
"BLD",9695,"KRN",9.2,"NM",21,0)
EC PRO SUM^^0
"BLD",9695,"KRN",9.2,"NM",22,0)
ECDSS3^^0
"BLD",9695,"KRN",9.2,"NM",23,0)
ECSTPCD^^0
"BLD",9695,"KRN",9.2,"NM",24,0)
ECRECSPC^^0
"BLD",9695,"KRN",9.2,"NM",25,0)
ECRDSSUA^^0
"BLD",9695,"KRN",9.2,"NM",26,0)
ECSCPT^^0
"BLD",9695,"KRN",9.2,"NM",27,0)
ECRECSIC^^0
"BLD",9695,"KRN",9.2,"NM",29,0)
ECDSS1^^0
"BLD",9695,"KRN",9.2,"NM",30,0)
ECCP^^0
"BLD",9695,"KRN",9.2,"NM",31,0)
ECLOC^^0
"BLD",9695,"KRN",9.2,"NM",32,0)
ECDSUNIT^^0
"BLD",9695,"KRN",9.2,"NM",33,0)
ECDSS PROCEDURE^^0
"BLD",9695,"KRN",9.2,"NM",34,0)
ECSCREEN^^0
"BLD",9695,"KRN",9.2,"NM",35,0)
ECRPERS^^0
"BLD",9695,"KRN",9.2,"NM",36,0)
ECSSPATSSN^^0
"BLD",9695,"KRN",9.2,"NM",37,0)
ECMGR^^0
"BLD",9695,"KRN",9.2,"NM","B","EC NTPCE",15)

"BLD",9695,"KRN",9.2,"NM","B","EC OS SUM",17)

"BLD",9695,"KRN",9.2,"NM","B","EC PRO SUM",21)

"BLD",9695,"KRN",9.2,"NM","B","ECAMIS",14)

"BLD",9695,"KRN",9.2,"NM","B","ECBATCH",7)

"BLD",9695,"KRN",9.2,"NM","B","ECCP",30)

"BLD",9695,"KRN",9.2,"NM","B","ECDISSUM",2)

"BLD",9695,"KRN",9.2,"NM","B","ECDSS PROCEDURE",33)

"BLD",9695,"KRN",9.2,"NM","B","ECDSS1",29)

"BLD",9695,"KRN",9.2,"NM","B","ECDSS3",22)

"BLD",9695,"KRN",9.2,"NM","B","ECDSSSNR",1)

"BLD",9695,"KRN",9.2,"NM","B","ECDSUNIT",32)

"BLD",9695,"KRN",9.2,"NM","B","ECENTER",9)

"BLD",9695,"KRN",9.2,"NM","B","ECLOC",31)

"BLD",9695,"KRN",9.2,"NM","B","ECMGR",37)

"BLD",9695,"KRN",9.2,"NM","B","ECMULT PROC",12)

"BLD",9695,"KRN",9.2,"NM","B","ECPAT",11)

"BLD",9695,"KRN",9.2,"NM","B","ECPAT SUM",18)

"BLD",9695,"KRN",9.2,"NM","B","ECPAT0",10)

"BLD",9695,"KRN",9.2,"NM","B","ECPCER",8)

"BLD",9695,"KRN",9.2,"NM","B","ECPROV",20)

"BLD",9695,"KRN",9.2,"NM","B","ECRDSSA",13)

"BLD",9695,"KRN",9.2,"NM","B","ECRDSSUA",25)

"BLD",9695,"KRN",9.2,"NM","B","ECRECER",16)

"BLD",9695,"KRN",9.2,"NM","B","ECRECSIC",27)

"BLD",9695,"KRN",9.2,"NM","B","ECRECSPC",24)

"BLD",9695,"KRN",9.2,"NM","B","ECRPERS",35)

"BLD",9695,"KRN",9.2,"NM","B","ECRPRSN",19)

"BLD",9695,"KRN",9.2,"NM","B","ECSCPT",26)

"BLD",9695,"KRN",9.2,"NM","B","ECSCREEN",34)

"BLD",9695,"KRN",9.2,"NM","B","ECSECT",3)

"BLD",9695,"KRN",9.2,"NM","B","ECSSASSOCCLIN",4)

"BLD",9695,"KRN",9.2,"NM","B","ECSSCSS",5)

"BLD",9695,"KRN",9.2,"NM","B","ECSSMOD",6)

"BLD",9695,"KRN",9.2,"NM","B","ECSSPATSSN",36)

"BLD",9695,"KRN",9.2,"NM","B","ECSTPCD",23)

"BLD",9695,"KRN",9.8,0)
9.8
"BLD",9695,"KRN",9.8,"NM",0)
^9.68A^24^24
"BLD",9695,"KRN",9.8,"NM",1,0)
EC2P131^^0^B11411445
"BLD",9695,"KRN",9.8,"NM",2,0)
ECUMRPC1^^0^B103578610
"BLD",9695,"KRN",9.8,"NM",3,0)
ECRRPT2^^0^B45393143
"BLD",9695,"KRN",9.8,"NM",4,0)
ECRRPC^^0^B23213577
"BLD",9695,"KRN",9.8,"NM",5,0)
ECDSSSNR^^0^B5168698
"BLD",9695,"KRN",9.8,"NM",6,0)
ECUTL3^^0^B34886716
"BLD",9695,"KRN",9.8,"NM",7,0)
ECMFDSSU^^0^B64085384
"BLD",9695,"KRN",9.8,"NM",8,0)
ECPAT^^0^B50231689
"BLD",9695,"KRN",9.8,"NM",9,0)
ECSUM^^0^B16700984
"BLD",9695,"KRN",9.8,"NM",10,0)
ECSUM1^^0^B30607449
"BLD",9695,"KRN",9.8,"NM",11,0)
ECDISSUM^^0^B4114146
"BLD",9695,"KRN",9.8,"NM",12,0)
ECDEAL^^0^B21760524
"BLD",9695,"KRN",9.8,"NM",13,0)
ECHECK1^^0^B11362790
"BLD",9695,"KRN",9.8,"NM",14,0)
ECRDSSEC^^0^B7402788
"BLD",9695,"KRN",9.8,"NM",15,0)
ECRECSPC^^0^B11998721
"BLD",9695,"KRN",9.8,"NM",16,0)
ECSCPT1^^0^B12941962
"BLD",9695,"KRN",9.8,"NM",17,0)
ECUMRPC^^0^B30601632
"BLD",9695,"KRN",9.8,"NM",18,0)
ECU1RPC^^0^B55194101
"BLD",9695,"KRN",9.8,"NM",19,0)
ECV1RPC^^0^B15098086
"BLD",9695,"KRN",9.8,"NM",20,0)
ECV3RPC^^0^B68891193
"BLD",9695,"KRN",9.8,"NM",21,0)
ECV4RPC^^0^B76379941
"BLD",9695,"KRN",9.8,"NM",22,0)
ECV5RPC^^0^B19014079
"BLD",9695,"KRN",9.8,"NM",23,0)
ECUERPC^^0^B63459075
"BLD",9695,"KRN",9.8,"NM",24,0)
ECRDSSA^^0^B124134262
"BLD",9695,"KRN",9.8,"NM","B","EC2P131",1)

"BLD",9695,"KRN",9.8,"NM","B","ECDEAL",12)

"BLD",9695,"KRN",9.8,"NM","B","ECDISSUM",11)

"BLD",9695,"KRN",9.8,"NM","B","ECDSSSNR",5)

"BLD",9695,"KRN",9.8,"NM","B","ECHECK1",13)

"BLD",9695,"KRN",9.8,"NM","B","ECMFDSSU",7)

"BLD",9695,"KRN",9.8,"NM","B","ECPAT",8)

"BLD",9695,"KRN",9.8,"NM","B","ECRDSSA",24)

"BLD",9695,"KRN",9.8,"NM","B","ECRDSSEC",14)

"BLD",9695,"KRN",9.8,"NM","B","ECRECSPC",15)

"BLD",9695,"KRN",9.8,"NM","B","ECRRPC",4)

"BLD",9695,"KRN",9.8,"NM","B","ECRRPT2",3)

"BLD",9695,"KRN",9.8,"NM","B","ECSCPT1",16)

"BLD",9695,"KRN",9.8,"NM","B","ECSUM",9)

"BLD",9695,"KRN",9.8,"NM","B","ECSUM1",10)

"BLD",9695,"KRN",9.8,"NM","B","ECU1RPC",18)

"BLD",9695,"KRN",9.8,"NM","B","ECUERPC",23)

"BLD",9695,"KRN",9.8,"NM","B","ECUMRPC",17)

"BLD",9695,"KRN",9.8,"NM","B","ECUMRPC1",2)

"BLD",9695,"KRN",9.8,"NM","B","ECUTL3",6)

"BLD",9695,"KRN",9.8,"NM","B","ECV1RPC",19)

"BLD",9695,"KRN",9.8,"NM","B","ECV3RPC",20)

"BLD",9695,"KRN",9.8,"NM","B","ECV4RPC",21)

"BLD",9695,"KRN",9.8,"NM","B","ECV5RPC",22)

"BLD",9695,"KRN",19,0)
19
"BLD",9695,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",9695,"KRN",19,"NM",1,0)
EC GUI CONTEXT^^0
"BLD",9695,"KRN",19,"NM","B","EC GUI CONTEXT",1)

"BLD",9695,"KRN",19.1,0)
19.1
"BLD",9695,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9695,"KRN",101,0)
101
"BLD",9695,"KRN",409.61,0)
409.61
"BLD",9695,"KRN",771,0)
771
"BLD",9695,"KRN",779.2,0)
779.2
"BLD",9695,"KRN",870,0)
870
"BLD",9695,"KRN",8989.51,0)
8989.51
"BLD",9695,"KRN",8989.52,0)
8989.52
"BLD",9695,"KRN",8994,0)
8994
"BLD",9695,"KRN","B",.4,.4)

"BLD",9695,"KRN","B",.401,.401)

"BLD",9695,"KRN","B",.402,.402)

"BLD",9695,"KRN","B",.403,.403)

"BLD",9695,"KRN","B",.5,.5)

"BLD",9695,"KRN","B",.84,.84)

"BLD",9695,"KRN","B",3.6,3.6)

"BLD",9695,"KRN","B",3.8,3.8)

"BLD",9695,"KRN","B",9.2,9.2)

"BLD",9695,"KRN","B",9.8,9.8)

"BLD",9695,"KRN","B",19,19)

"BLD",9695,"KRN","B",19.1,19.1)

"BLD",9695,"KRN","B",101,101)

"BLD",9695,"KRN","B",409.61,409.61)

"BLD",9695,"KRN","B",771,771)

"BLD",9695,"KRN","B",779.2,779.2)

"BLD",9695,"KRN","B",870,870)

"BLD",9695,"KRN","B",8989.51,8989.51)

"BLD",9695,"KRN","B",8989.52,8989.52)

"BLD",9695,"KRN","B",8994,8994)

"BLD",9695,"QUES",0)
^9.62^^
"BLD",9695,"REQB",0)
^9.611^2^2
"BLD",9695,"REQB",1,0)
EC*2.0*130^1
"BLD",9695,"REQB",2,0)
EC*2.0*129^1
"BLD",9695,"REQB","B","EC*2.0*129",2)

"BLD",9695,"REQB","B","EC*2.0*130",1)

"FIA",724)
DSS UNIT
"FIA",724,0)
^ECD(
"FIA",724,0,0)
724I
"FIA",724,0,1)
y^y^p^^^^n^^n
"FIA",724,0,10)

"FIA",724,0,11)

"FIA",724,0,"RLRO")

"FIA",724,0,"VR")
2.0^EC
"FIA",724,724)
1
"FIA",724,724,10)

"FIA",724,724,13)

"INIT")
POST^EC2P131
"KRN",9.2,923,-1)
0^29
"KRN",9.2,923,0)
ECDSS1^National/Local Procedure Reports^2960501.1441^
"KRN",9.2,923,1,0)
^^16^16^3160328^
"KRN",9.2,923,1,1,0)
This option allows you to display a listing of Event Capture procedures.  
"KRN",9.2,923,1,2,0)
You can to choose to include active or inactive procedures. 
"KRN",9.2,923,1,3,0)
 
"KRN",9.2,923,1,4,0)
If you choose inactive procedures, the output includes:
"KRN",9.2,923,1,5,0)
 
"KRN",9.2,923,1,6,0)
 - Procedure Name 
"KRN",9.2,923,1,7,0)
 - National Number 
"KRN",9.2,923,1,8,0)
 - CPT 
"KRN",9.2,923,1,9,0)
 - Inactive Date 
"KRN",9.2,923,1,10,0)
 
"KRN",9.2,923,1,11,0)
If you choose active procedures, you are prompted to choose a sort method 
"KRN",9.2,923,1,12,0)
(National, Local, or Both).  The output includes:  
"KRN",9.2,923,1,13,0)
 
"KRN",9.2,923,1,14,0)
 - Procedure Name
"KRN",9.2,923,1,15,0)
 - National Number
"KRN",9.2,923,1,16,0)
 - CPT
"KRN",9.2,923,3,0)
^9.23A^2^2
"KRN",9.2,923,3,1,0)
VXFCDSS1
"KRN",9.2,923,3,2,0)
ECDSS1
"KRN",9.2,923,10.2)
W @IOF
"KRN",9.2,926,-1)
0^37
"KRN",9.2,926,0)
ECMGR^Event Capture Management Menu^2970305.0751^^
"KRN",9.2,926,1,0)
^^7^7^3160328^
"KRN",9.2,926,1,1,0)
This menu option accesses the menus needed for management of the Event
"KRN",9.2,926,1,2,0)
Capture software.  It includes, but is not limited to:
"KRN",9.2,926,1,3,0)
 
"KRN",9.2,926,1,4,0)
 - allocation of DSS units
"KRN",9.2,926,1,5,0)
 - assignment of users to DSS units
"KRN",9.2,926,1,6,0)
 - addition of local procedures and categories
"KRN",9.2,926,1,7,0)
 - formation of Event Code Screens
"KRN",9.2,926,2,0)
^9.22^12^12
"KRN",9.2,926,2,1,0)
CCL^ECLOC^
"KRN",9.2,926,2,2,0)
DSU^ECSECT^
"KRN",9.2,926,2,3,0)
AUA^ECDSUNIT^
"KRN",9.2,926,2,4,0)
RUA^ECDEAL^
"KRN",9.2,926,2,5,0)
CAT^ECDS CATEGORY^
"KRN",9.2,926,2,6,0)
LPR^ECDSS PROCEDURE^
"KRN",9.2,926,2,7,0)
ECS^ECSCREEN^
"KRN",9.2,926,2,8,0)
SYN^ECDSSYN^
"KRN",9.2,926,2,9,0)
IEC^ECNACT^
"KRN",9.2,926,2,10,0)
ALP^ECDSDEAC^
"KRN",9.2,926,2,11,0)
LCD^ECDS CATEGORY DEAC^
"KRN",9.2,926,2,12,0)
RPT^ECDSRPT^
"KRN",9.2,926,10.2)
W @IOF
"KRN",9.2,927,-1)
0^9
"KRN",9.2,927,0)
ECENTER^Event Capture Data Entry^2960403.0846^^
"KRN",9.2,927,1,0)
^^4^4^3160324^
"KRN",9.2,927,1,1,0)
This menu option accesses the data entry options of the Event Capture
"KRN",9.2,927,1,2,0)
software.  The three options allow the user to enter data by:
"KRN",9.2,927,1,3,0)
individual patient and procedure; multiple patients for a given 
"KRN",9.2,927,1,4,0)
procedure; multiple dates and procedures for multiple patients.
"KRN",9.2,927,2,0)
^9.22A^4^4
"KRN",9.2,927,2,1,0)
INDIVIDUAL^ECPAT^
"KRN",9.2,927,2,2,0)
BATCH^ECBATCH^
"KRN",9.2,927,2,3,0)
BATCH BY PROCEDURE^ECBATCH PROC
"KRN",9.2,927,2,4,0)
MULT DATES/MULT PROCS^ECMULT PROC
"KRN",9.2,927,10.2)
W @IOF
"KRN",9.2,931,-1)
0^31
"KRN",9.2,931,0)
ECLOC^Current Locations (Create/Remove)^2950424.090554^
"KRN",9.2,931,1,0)
^^8^8^3160324^
"KRN",9.2,931,1,1,0)
This option creates or removes access to an Event Capture location
"KRN",9.2,931,1,2,0)
and flags it as active or inactive for use in the Event Capture 
"KRN",9.2,931,1,3,0)
Software.
"KRN",9.2,931,1,4,0)
 
"KRN",9.2,931,1,5,0)
When creating a location, your selection can be an individual facility, 
"KRN",9.2,931,1,6,0)
or a division if your facility is multidivisional, and has to exist in 
"KRN",9.2,931,1,7,0)
the INSTITUTION file (#4).  You must create locations before using   
"KRN",9.2,931,1,8,0)
any of the other Event Capture menu options.
"KRN",9.2,931,10.2)
W @IOF
"KRN",9.2,935,-1)
0^34
"KRN",9.2,935,0)
ECSCREEN^Event Code Screens (Create)^2970326.0942^
"KRN",9.2,935,1,0)
^^29^29^3160324^
"KRN",9.2,935,1,1,0)
** You must create Event Capture Locations with the Current Locations 
"KRN",9.2,935,1,2,0)
(Enter/Edit) option before using this option. ** 
"KRN",9.2,935,1,3,0)
 
"KRN",9.2,935,1,4,0)
** You must create DSS Units with the DSS Units for Event Capture 
"KRN",9.2,935,1,5,0)
(Enter/Edit) option before using this option. ** 
"KRN",9.2,935,1,6,0)
 
"KRN",9.2,935,1,7,0)
** You must define Event Code Screens in order to enter Event Capture 
"KRN",9.2,935,1,8,0)
data. ** 
"KRN",9.2,935,1,9,0)
 
"KRN",9.2,935,1,10,0)
This option allows you to create Event Code Screens for one or all 
"KRN",9.2,935,1,11,0)
Event Capture locations.  Event Code Screens define procedure information.
"KRN",9.2,935,1,12,0)
During data entry, users can select only the procedures defined in the
"KRN",9.2,935,1,13,0)
Event Code Screens.  For each screen, you are prompted to enter the
"KRN",9.2,935,1,14,0)
following information:
"KRN",9.2,935,1,15,0)
 
"KRN",9.2,935,1,16,0)
 - DSS Unit 
"KRN",9.2,935,1,17,0)
 - Category (If DSS Units are defined to group procedures by categories) 
"KRN",9.2,935,1,18,0)
 - Procedure 
"KRN",9.2,935,1,19,0)
 
"KRN",9.2,935,1,20,0)
When creating the screens for specific locations, you are prompted to 
"KRN",9.2,935,1,21,0)
enter the following additional information: 
"KRN",9.2,935,1,22,0)
 
"KRN",9.2,935,1,23,0)
 - Location name (If you chose not to create the screen for ALL 
"KRN",9.2,935,1,24,0)
                  locations)
"KRN",9.2,935,1,25,0)
 - Associated Clinic (If the DSS Unit is defined to send data to PCE) 
"KRN",9.2,935,1,26,0)
 - Synonym (The locally-recognized name for a local or national 
"KRN",9.2,935,1,27,0)
            procedure)
"KRN",9.2,935,1,28,0)
 - Volume (The number of times the procedure was performed or the  
"KRN",9.2,935,1,29,0)
           length of time it took)
"KRN",9.2,935,2,0)
^9.22A^^0
"KRN",9.2,935,10.2)
W @IOF
"KRN",9.2,938,-1)
0^3
"KRN",9.2,938,0)
ECSECT^DSS Units for Event Capture (Enter/Edit)^2970326.0923^
"KRN",9.2,938,1,0)
^^38^38^3160324^
"KRN",9.2,938,1,1,0)
** You must define your DSS Units with this option for subsequent options 
"KRN",9.2,938,1,2,0)
in the Event Capture Software to work. **
"KRN",9.2,938,1,3,0)
 
"KRN",9.2,938,1,4,0)
This option allows you to ENTER and EDIT, but NOT DELETE, DSS Units for 
"KRN",9.2,938,1,5,0)
use with Event Capture.  DSS Units typically represent the smallest 
"KRN",9.2,938,1,6,0)
identifiable work unit in a clinical service at the medical center and 
"KRN",9.2,938,1,7,0)
are defined by the VAMCs.  A DSS Unit can represent any of the following:
"KRN",9.2,938,1,8,0)
 
"KRN",9.2,938,1,9,0)
 - An entire service
"KRN",9.2,938,1,10,0)
 - A section of a service 
"KRN",9.2,938,1,11,0)
 - A small section within a section 
"KRN",9.2,938,1,12,0)
 - A medical equipment item used in patient procedures
"KRN",9.2,938,1,13,0)
 
"KRN",9.2,938,1,14,0)
When creating or editing DSS Units, you can choose what (if any) data 
"KRN",9.2,938,1,15,0)
is sent to PCE, and the method used to send it:  
"KRN",9.2,938,1,16,0)
 
"KRN",9.2,938,1,17,0)
 A - Send All Records 
"KRN",9.2,938,1,18,0)
 N - Send No Records
"KRN",9.2,938,1,19,0)
 
"KRN",9.2,938,1,20,0)
The advantage of using Event Capture to send data to PCE is that it 
"KRN",9.2,938,1,21,0)
eliminates the duplicate effort of entering the same workload data in the 
"KRN",9.2,938,1,22,0)
Scheduling software, then transmitting to PCE.    
"KRN",9.2,938,1,23,0)
 
"KRN",9.2,938,1,24,0)
If a DSS Unit is set up NOT to send to PCE (No records), then:
"KRN",9.2,938,1,25,0)
 
"KRN",9.2,938,1,26,0)
 1.) An Associated Stop Code is required to be entered for the DSS Unit
"KRN",9.2,938,1,27,0)
     during setup. 
"KRN",9.2,938,1,28,0)
 2.) A Credit Stop Code may be added. 
"KRN",9.2,938,1,29,0)
 3.) A CHAR4 Code may be added.
"KRN",9.2,938,1,30,0)
  
"KRN",9.2,938,1,31,0)
When creating DSS Units, your response to the "Allow Category Use" prompt 
"KRN",9.2,938,1,32,0)
determines whether or not procedures are grouped by categories during 
"KRN",9.2,938,1,33,0)
data entry.  When editing DSS Units, the "Allow Category Use" prompt may
"KRN",9.2,938,1,34,0)
be changed until there are event code screens defined.  Once event code
"KRN",9.2,938,1,35,0)
screens have been defined the user may only change the category setting
"KRN",9.2,938,1,36,0)
from "Yes" to "No" to remove the use of categories.  Once set to "No",
"KRN",9.2,938,1,37,0)
when event code screens are defined, the user can no longer change this
"KRN",9.2,938,1,38,0)
field.
"KRN",9.2,938,10.2)
W @IOF
"KRN",9.2,940,-1)
0^33
"KRN",9.2,940,0)
ECDSS PROCEDURE^Local Procedure (Enter/Edit)^2970326.0925^
"KRN",9.2,940,1,0)
^^14^14^3160324^
"KRN",9.2,940,1,1,0)
** You might want to print a list of procedures with their associated CPT 
"KRN",9.2,940,1,2,0)
codes to use as a reference BEFORE USING THIS OPTION.  If so, use the 
"KRN",9.2,940,1,3,0)
National/Local Procedure Reports option on the Management Reports 
"KRN",9.2,940,1,4,0)
submenu of the Event Capture Management Menu.  This report can be 
"KRN",9.2,940,1,5,0)
lengthy if you opt to include national procedures, so you should queue 
"KRN",9.2,940,1,6,0)
it to print during nonpeak hours. **
"KRN",9.2,940,1,7,0)
 
"KRN",9.2,940,1,8,0)
This option allows you to ENTER or EDIT, but NOT DELETE local 
"KRN",9.2,940,1,9,0)
procedures in the EC NATIONAL PROCEDURE file (#725).  Procedures that 
"KRN",9.2,940,1,10,0)
are being passed to the PCE software must have an associated CPT code.
"KRN",9.2,940,1,11,0)
For new procedures, you must also enter a local procedure code number. 
"KRN",9.2,940,1,12,0)
The local procedure code must be 5 characters:  1 uppercase alpha 
"KRN",9.2,940,1,13,0)
character followed by 4 alphanumeric characters.  This 
"KRN",9.2,940,1,14,0)
number will be used as the national code number for your local procedure. 
"KRN",9.2,940,10.2)
W @IOF
"KRN",9.2,942,-1)
0^22
"KRN",9.2,942,0)
ECDSS3^Category Reports^2960501.1442^
"KRN",9.2,942,1,0)
^9.21^4^4^3160328^^^
"KRN",9.2,942,1,1,0)
This option allows you to print/display the local categories which you
"KRN",9.2,942,1,2,0)
have established. You can print this report by active categories, inactive
"KRN",9.2,942,1,3,0)
categories, or all categories.  For inactive categories, the inactive
"KRN",9.2,942,1,4,0)
date is included in the output.
"KRN",9.2,942,10.2)
W @IOF
"KRN",9.2,943,-1)
0^30
"KRN",9.2,943,0)
ECCP^Print Category and Procedure Summary^2950424.134616^
"KRN",9.2,943,1,0)
^^26^26^3160328^
"KRN",9.2,943,1,1,0)
** You must have locations, DSS Units, local categories, and procedures 
"KRN",9.2,943,1,2,0)
defined before using this option. ** 
"KRN",9.2,943,1,3,0)
 
"KRN",9.2,943,1,4,0)
** You might want to print this report as a reference guide for data 
"KRN",9.2,943,1,5,0)
entry personnel at your facility. **
"KRN",9.2,943,1,6,0)
 
"KRN",9.2,943,1,7,0)
This option allows you to print/display the Event Code Screens for one 
"KRN",9.2,943,1,8,0)
or all DSS Units within a specified location.  If your DSS Units are 
"KRN",9.2,943,1,9,0)
defined to group procedures by categories, you can select one or all 
"KRN",9.2,943,1,10,0)
categories.  All procedures print for each category.  The output includes:
"KRN",9.2,943,1,11,0)
 
"KRN",9.2,943,1,12,0)
 - Run Date 
"KRN",9.2,943,1,13,0)
 - Location 
"KRN",9.2,943,1,14,0)
 - Service 
"KRN",9.2,943,1,15,0)
 - DSS Unit
"KRN",9.2,943,1,16,0)
 - Send Status
"KRN",9.2,943,1,17,0)
 - DSS Dept. 
"KRN",9.2,943,1,18,0)
 - Category (if applicable) 
"KRN",9.2,943,1,19,0)
 - Procedure Code
"KRN",9.2,943,1,20,0)
 - Procedure Name
"KRN",9.2,943,1,21,0)
 - Synonym 
"KRN",9.2,943,1,22,0)
 - Associated Clinic IEN (if applicable) 
"KRN",9.2,943,1,23,0)
 - Associated Clinic (if applicable)
"KRN",9.2,943,1,24,0)
 - Stop Code
"KRN",9.2,943,1,25,0)
 - Credit Stop Code
"KRN",9.2,943,1,26,0)
 - CHAR4
"KRN",9.2,943,10.2)
W @IOF
"KRN",9.2,944,-1)
0^32
"KRN",9.2,944,0)
ECDSUNIT^Assign User Access to DSS Units^2950425.05572^
"KRN",9.2,944,1,0)
^^16^16^3160324^
"KRN",9.2,944,1,1,0)
** You must create DSS Units with the DSS Units for Event Capture 
"KRN",9.2,944,1,2,0)
(Enter/Edit) option before using this option. **
"KRN",9.2,944,1,3,0)
 
"KRN",9.2,944,1,4,0)
This option allows you to assign access to DSS Units for specified 
"KRN",9.2,944,1,5,0)
users of the Event Capture Software.  (Contact each service for a list 
"KRN",9.2,944,1,6,0)
of its Event Capture users and the DSS Units for which they should be 
"KRN",9.2,944,1,7,0)
given access.)  Access should be limited to only those individuals who 
"KRN",9.2,944,1,8,0)
are responsible for entering procedure data into the specified DSS Units. 
"KRN",9.2,944,1,9,0)
 
"KRN",9.2,944,1,10,0)
To assign the ECALLU security key for access to ALL DSS units, use the 
"KRN",9.2,944,1,11,0)
Allocate Security Keys option in the Key Management Submenu of the 
"KRN",9.2,944,1,12,0)
Menu Management Menu.
"KRN",9.2,944,1,13,0)
 
"KRN",9.2,944,1,14,0)
Please Note:  Even if users have the Event Capture options on their
"KRN",9.2,944,1,15,0)
VISTA menus, they cannot begin entering data until the appropriate 
"KRN",9.2,944,1,16,0)
access is assigned.
"KRN",9.2,944,10.2)
W @IOF
"KRN",9.2,947,-1)
0^11
"KRN",9.2,947,0)
ECPAT^Enter/Edit Patient Procedures^2970326.0928^
"KRN",9.2,947,1,0)
^^53^53^3160328^
"KRN",9.2,947,1,1,0)
** If only one or no Category is defined for the specified DSS Unit, you 
"KRN",9.2,947,1,2,0)
cannot edit Category.**
"KRN",9.2,947,1,3,0)
 
"KRN",9.2,947,1,4,0)
** If only one Procedure is defined in the DSS Unit, the Procedure field 
"KRN",9.2,947,1,5,0)
will be populated. **
"KRN",9.2,947,1,6,0)
 
"KRN",9.2,947,1,7,0)
** You must answer exposure and service-connected indicators if fields 
"KRN",9.2,947,1,8,0)
are not disabled.** 
"KRN",9.2,947,1,9,0)
 
"KRN",9.2,947,1,10,0)
** Procedures being passed to PCE must have an active Associated
"KRN",9.2,947,1,11,0)
Clinic. **
"KRN",9.2,947,1,12,0)
 
"KRN",9.2,947,1,13,0)
This option allows you to enter patient procedures performed on an 
"KRN",9.2,947,1,14,0)
individual patient.  You should use it when you have an individual 
"KRN",9.2,947,1,15,0)
patient record to add or update. 
"KRN",9.2,947,1,16,0)
 
"KRN",9.2,947,1,17,0)
After selecting a Procedure, enter the Volume. 
"KRN",9.2,947,1,18,0)
 
"KRN",9.2,947,1,19,0)
***The ECS volume field DOES NOT capture the number of patients seen by 
"KRN",9.2,947,1,20,0)
ECS providers.***
"KRN",9.2,947,1,21,0)
 
"KRN",9.2,947,1,22,0)
Volume is usually associated with the number of procedures performed.
"KRN",9.2,947,1,23,0)
The volume field can be used to record and track 3 different values:
"KRN",9.2,947,1,24,0)
 
"KRN",9.2,947,1,25,0)
1. Number of Procedures: When a selected procedure code CONTAINS inherent
"KRN",9.2,947,1,26,0)
time elements (such as "30M Massage Therapy") then a volume of one is
"KRN",9.2,947,1,27,0)
usually entered, meaning 1 of this specific procedure/service was
"KRN",9.2,947,1,28,0)
provided.
"KRN",9.2,947,1,29,0)
 
"KRN",9.2,947,1,30,0)
     OR
"KRN",9.2,947,1,31,0)
 
"KRN",9.2,947,1,32,0)
2. Time: Amount of time shown in increments of minutes (M). When a 
"KRN",9.2,947,1,33,0)
selected procedure code DOES NOT have inherent time elements THEN the
"KRN",9.2,947,1,34,0)
volume field is used to capture the time spent completing the
"KRN",9.2,947,1,35,0)
procedure/service: 1 = 15M, 2 = 30M, 3= 45M
"KRN",9.2,947,1,36,0)
 
"KRN",9.2,947,1,37,0)
     OR
"KRN",9.2,947,1,38,0)
 
"KRN",9.2,947,1,39,0)
3. Days: Number of days patient was in VA paid facilities such as State 
"KRN",9.2,947,1,40,0)
Home, DOM, or a Nursing Home. When entering workload for a patient in a 
"KRN",9.2,947,1,41,0)
VA-Paid facility, volume of 1 means 1 day, 2 means 2 days, etc.
"KRN",9.2,947,1,42,0)
 
"KRN",9.2,947,1,43,0)
NOTE: It is imperative to understand and keep track of the values you are 
"KRN",9.2,947,1,44,0)
entering in the volume field and what they represent for the patients you 
"KRN",9.2,947,1,45,0)
are treating.
"KRN",9.2,947,1,46,0)
 
"KRN",9.2,947,1,47,0)
You can enter one procedure per patient. Once all fields have been 
"KRN",9.2,947,1,48,0)
entered, click the 'OK' button to save the record. Click the 'Cancel'
"KRN",9.2,947,1,49,0)
button to exit the screen without filing the record. Click the 'Add'
"KRN",9.2,947,1,50,0)
button to file the current record, and to initialize the form for a new
"KRN",9.2,947,1,51,0)
procedure to be added.
"KRN",9.2,947,1,52,0)
 
"KRN",9.2,947,1,53,0)
See User Manual for details on all features such as Recent Visits.
"KRN",9.2,947,10.2)
W @IOF
"KRN",9.2,948,-1)
0^7
"KRN",9.2,948,0)
ECBATCH^Batch Enter Event Capture Data^2970326.0928^
"KRN",9.2,948,1,0)
^^30^30^3160321^
"KRN",9.2,948,1,1,0)
** You must define locations, DSS Units, categories, procedures, and 
"KRN",9.2,948,1,2,0)
Event Code Screens before using this option. ** 
"KRN",9.2,948,1,3,0)
 
"KRN",9.2,948,1,4,0)
** If only one category is defined for the specified DSS Unit, you will  
"KRN",9.2,948,1,5,0)
not be prompted for category. **
"KRN",9.2,948,1,6,0)
 
"KRN",9.2,948,1,7,0)
** Use the Enter/Edit Patient Procedure option to correct erroneous 
"KRN",9.2,948,1,8,0)
patient data. **
"KRN",9.2,948,1,9,0)
 
"KRN",9.2,948,1,10,0)
** You will be prompted for exposure and service-connected indicators 
"KRN",9.2,948,1,11,0)
for OUTPATIENT PROCEDURES ONLY. 
"KRN",9.2,948,1,12,0)
 
"KRN",9.2,948,1,13,0)
Use this option to enter multiple procedures for multiple patients as 
"KRN",9.2,948,1,14,0)
a batch entry.  After you enter the ICD-10 (Diagnosis) and inpatient or
"KRN",9.2,948,1,15,0)
outpatient information for the first patient, the "Select Next Patient:"
"KRN",9.2,948,1,16,0)
prompt appears.  This prompt will repeat, allowing you to select multiple
"KRN",9.2,948,1,17,0)
patients, until you press the RETURN or ENTER key to indicate that patient
"KRN",9.2,948,1,18,0)
selection is complete.
"KRN",9.2,948,1,19,0)
 
"KRN",9.2,948,1,20,0)
You will be prompted to select a category if the specified DSS Unit is
"KRN",9.2,948,1,21,0)
defined to group procedures by category.  After each procedure entry, the
"KRN",9.2,948,1,22,0)
software asks you to verify that the the data you entered is correct,
"KRN",9.2,948,1,23,0)
and the "Enter Procedure:" prompt repeats, allowing you to enter multiple
"KRN",9.2,948,1,24,0)
procedures, until you press the RETURN or ENTER key to indicate that
"KRN",9.2,948,1,25,0)
procedure entry is complete. 
"KRN",9.2,948,1,26,0)
 
"KRN",9.2,948,1,27,0)
The software tells you the total number of procedures you entered, and
"KRN",9.2,948,1,28,0)
asks if you want to enter them in the file.  If you respond YES, they are
"KRN",9.2,948,1,29,0)
processed in the background and added to the EVENT CAPTURE PATIENT file
"KRN",9.2,948,1,30,0)
(#721).
"KRN",9.2,948,2,0)
^9.22A^1^1
"KRN",9.2,948,2,1,0)
 ^ECBATCH
"KRN",9.2,948,10.2)
W @IOF
"KRN",9.2,949,-1)
0^18
"KRN",9.2,949,0)
ECPAT SUM^Patient Summary - Event Capture^2950425.06451^
"KRN",9.2,949,1,0)
^^16^16^3160328^
"KRN",9.2,949,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,949,1,2,0)
 
"KRN",9.2,949,1,3,0)
This option allows you to print/display procedure-related data within a
"KRN",9.2,949,1,4,0)
specified date range for a selected patient.  The output includes:
"KRN",9.2,949,1,5,0)
 
"KRN",9.2,949,1,6,0)
 - Procedure date and time
"KRN",9.2,949,1,7,0)
 - Procedure
"KRN",9.2,949,1,8,0)
 - Volume
"KRN",9.2,949,1,9,0)
 - Modifier(s)
"KRN",9.2,949,1,10,0)
 - Location
"KRN",9.2,949,1,11,0)
 - DSS unit name and IEN
"KRN",9.2,949,1,12,0)
 - Service
"KRN",9.2,949,1,13,0)
 - Section where performed
"KRN",9.2,949,1,14,0)
 - Procedure reason(s) (optional)
"KRN",9.2,949,1,15,0)
 - Ordering Section
"KRN",9.2,949,1,16,0)
 - Provider
"KRN",9.2,949,10.2)
W @IOF
"KRN",9.2,950,-1)
0^14
"KRN",9.2,950,0)
ECAMIS^DSS Unit Workload Summary Report^2950425.064906^
"KRN",9.2,950,1,0)
^^9^9^3160324^
"KRN",9.2,950,1,1,0)
This report will display the number of procedures performed in each of the
"KRN",9.2,950,1,2,0)
selected DSS Units.  If the DSS Unit uses categories, it will list the
"KRN",9.2,950,1,3,0)
procedures in each category and how many were performed.  It will also
"KRN",9.2,950,1,4,0)
list the total number of procedures for the unit at the bottom of the unit
"KRN",9.2,950,1,5,0)
listing.
"KRN",9.2,950,1,6,0)
 
"KRN",9.2,950,1,7,0)
If more than one location has been set up, you will be prompted to select
"KRN",9.2,950,1,8,0)
all or specific locations.  You will also be prompted to select all or
"KRN",9.2,950,1,9,0)
specific DSS Units.
"KRN",9.2,950,10.2)
W @IOF
"KRN",9.2,951,-1)
0^20
"KRN",9.2,951,0)
ECPROV^Provider Summary Report^2950425.070121^
"KRN",9.2,951,1,0)
^^21^21^3160328^
"KRN",9.2,951,1,1,0)
** This report is formatted for 132-column output.  It could be a lengthy
"KRN",9.2,951,1,2,0)
report, so you might want to queue it to print during nonpeak hours. **
"KRN",9.2,951,1,3,0)
 
"KRN",9.2,951,1,4,0)
This option allows you to print/display the number of procedures performed
"KRN",9.2,951,1,5,0)
for one or all locations and one or all DSS Units within a specified date
"KRN",9.2,951,1,6,0)
range.  Within each DSS Unit for each location, the report is sorted by
"KRN",9.2,951,1,7,0)
provider, category (if the DSS Unit is defined to sort procedures by
"KRN",9.2,951,1,8,0)
category), and procedures (listed alphabetically).  The output includes:
"KRN",9.2,951,1,9,0)
 
"KRN",9.2,951,1,10,0)
 - Location
"KRN",9.2,951,1,11,0)
 - DSS unit
"KRN",9.2,951,1,12,0)
 - Provider
"KRN",9.2,951,1,13,0)
 - Category (if applicable)
"KRN",9.2,951,1,14,0)
 - CPT Code
"KRN",9.2,951,1,15,0)
 - Procedure Code
"KRN",9.2,951,1,16,0)
 - Procedure Name
"KRN",9.2,951,1,17,0)
 - Procedure Reason
"KRN",9.2,951,1,18,0)
 - Volume
"KRN",9.2,951,1,19,0)
 - Modifier(s)
"KRN",9.2,951,1,20,0)
 - Total number of procedures performed by the provider within the 
"KRN",9.2,951,1,21,0)
   specified date range
"KRN",9.2,951,10.2)
W @IOF
"KRN",9.2,952,-1)
0^17
"KRN",9.2,952,0)
EC OS SUM^Ordering Section Summary Report^2950425.070517^
"KRN",9.2,952,1,0)
^^14^14^3160324^
"KRN",9.2,952,1,1,0)
** This report is formatted for 132-column output. **
"KRN",9.2,952,1,2,0)
 
"KRN",9.2,952,1,3,0)
This option allows you to print/display procedures ordered within a
"KRN",9.2,952,1,4,0)
specified date range for a selected ordering section.  The output
"KRN",9.2,952,1,5,0)
includes:
"KRN",9.2,952,1,6,0)
 
"KRN",9.2,952,1,7,0)
 - DSS unit
"KRN",9.2,952,1,8,0)
 - Patient name
"KRN",9.2,952,1,9,0)
 - Last four of patient SSN
"KRN",9.2,952,1,10,0)
 - Procedure
"KRN",9.2,952,1,11,0)
 - Volume
"KRN",9.2,952,1,12,0)
 - Provider(s)
"KRN",9.2,952,1,13,0)
 - Synonym
"KRN",9.2,952,1,14,0)
 - Modifier(s)
"KRN",9.2,952,10.2)
W @IOF
"KRN",9.2,953,-1)
0^21
"KRN",9.2,953,0)
EC PRO SUM^Provider (1-7) Summary Report^2950425.070823^
"KRN",9.2,953,1,0)
^9.21^15^15^3160328^^^
"KRN",9.2,953,1,1,0)
** This report is formatted for 132-column output. **
"KRN",9.2,953,1,2,0)
 
"KRN",9.2,953,1,3,0)
This option allows you to print/display workload within a specified date
"KRN",9.2,953,1,4,0)
range for a selected provider.  The output includes:
"KRN",9.2,953,1,5,0)
 
"KRN",9.2,953,1,6,0)
 - Procedure code
"KRN",9.2,953,1,7,0)
 - Procedure name
"KRN",9.2,953,1,8,0)
 - Patient name
"KRN",9.2,953,1,9,0)
 - Last four digits of patient SSN
"KRN",9.2,953,1,10,0)
 - Matrix showing how many times a specific procedure was performed on a
"KRN",9.2,953,1,11,0)
   specific patient with the selected provider as Provider 1, Provider 2, 
"KRN",9.2,953,1,12,0)
   to Provider 7
"KRN",9.2,953,1,13,0)
 - Modifier(s)
"KRN",9.2,953,1,14,0)
 - Subtotals by procedure
"KRN",9.2,953,1,15,0)
 - Grand Total of procedures
"KRN",9.2,953,10.2)
W @IOF
"KRN",9.2,957,-1)
0^8
"KRN",9.2,957,0)
ECPCER^PCE Data Summary^2970123.0045^
"KRN",9.2,957,1,0)
^^17^17^3160328^
"KRN",9.2,957,1,1,0)
** This report is formatted for 132-column output. **
"KRN",9.2,957,1,2,0)
 
"KRN",9.2,957,1,3,0)
This option allows you to print/display procedure data that was sent to
"KRN",9.2,957,1,4,0)
the Patient Care Encounter (PCE) software for a selected patient within a
"KRN",9.2,957,1,5,0)
specified date range.  The output includes:
"KRN",9.2,957,1,6,0)
 
"KRN",9.2,957,1,7,0)
 - Patient name
"KRN",9.2,957,1,8,0)
 - Date Range
"KRN",9.2,957,1,9,0)
 - Date and time of procedure
"KRN",9.2,957,1,10,0)
 - Procedure name as sent to PCE
"KRN",9.2,957,1,11,0)
 - Volume
"KRN",9.2,957,1,12,0)
 - Provider
"KRN",9.2,957,1,13,0)
 - Location
"KRN",9.2,957,1,14,0)
 - Associated Clinic and Stop Code
"KRN",9.2,957,1,15,0)
 - CPT code
"KRN",9.2,957,1,16,0)
 - ICD-10 code
"KRN",9.2,957,1,17,0)
 - Modifier(s)
"KRN",9.2,958,-1)
0^35
"KRN",9.2,958,0)
ECRPERS^Inactive/Missing Person Class Report^2970826.132432^
"KRN",9.2,958,1,0)
^^7^7^3160324^
"KRN",9.2,958,1,1,0)
This report will allow users to identify those providers entered as part
"KRN",9.2,958,1,2,0)
of the patient procedure data entry process that do not have an assigned
"KRN",9.2,958,1,3,0)
person or active person class.  Patients reported will be those having
"KRN",9.2,958,1,4,0)
procedures in the Event Capture system.
"KRN",9.2,958,1,5,0)
 
"KRN",9.2,958,1,6,0)
You will be prompted to enter a date range for the procedures entered into
"KRN",9.2,958,1,7,0)
Event Capture.
"KRN",9.2,958,10.2)
W @IOF
"KRN",9.2,959,-1)
0^19
"KRN",9.2,959,0)
ECRPRSN^Procedure Reason Report^2970826.133523^
"KRN",9.2,959,1,0)
^^10^10^3160324^
"KRN",9.2,959,1,1,0)
This report will list the reasons entered for Event Capture Procedures.
"KRN",9.2,959,1,2,0)
The report will include the Location, DSS unit, Procedure Reason, the
"KRN",9.2,959,1,3,0)
number of times the reason was used, Procedure Code, Procedure Name,
"KRN",9.2,959,1,4,0)
Patient Name, last four digits of patient SSN, Provider Name and Date and
"KRN",9.2,959,1,5,0)
Time of the procedure.
"KRN",9.2,959,1,6,0)
 
"KRN",9.2,959,1,7,0)
The report may be printed for one or selected locations as well as one
"KRN",9.2,959,1,8,0)
or selected DSS Units.  You may also select specific procedure reasons
"KRN",9.2,959,1,9,0)
or print all procedure reasons.  You will also be prompted for a begin
"KRN",9.2,959,1,10,0)
and end date to report procedures.
"KRN",9.2,959,10.2)
W @IOF
"KRN",9.2,960,-1)
0^12
"KRN",9.2,960,0)
ECMULT PROC^Multiple Dates/Multiple Procedures Data Entry^2970826.134949^
"KRN",9.2,960,1,0)
^^44^44^3160328^
"KRN",9.2,960,1,1,0)
This option allows entry of multiple procedures on multiple dates for one 
"KRN",9.2,960,1,2,0)
or more patient(s).  This option does not require the user to exit the 
"KRN",9.2,960,1,3,0)
option to change dates or procedures for data entry.
"KRN",9.2,960,1,4,0)
 
"KRN",9.2,960,1,5,0)
You may enter any number of procedure dates and then any number of 
"KRN",9.2,960,1,6,0)
procedures. 
"KRN",9.2,960,1,7,0)
 
"KRN",9.2,960,1,8,0)
After selecting a Procedure, enter the Volume. 
"KRN",9.2,960,1,9,0)
 
"KRN",9.2,960,1,10,0)
***The ECS volume field DOES NOT capture the number of patients seen by 
"KRN",9.2,960,1,11,0)
ECS providers.***
"KRN",9.2,960,1,12,0)
 
"KRN",9.2,960,1,13,0)
Volume is usually associated with the number of procedures performed.
"KRN",9.2,960,1,14,0)
The volume field can be used to record and track 3 different values:
"KRN",9.2,960,1,15,0)
 
"KRN",9.2,960,1,16,0)
1. Number of Procedures: When a selected procedure code CONTAINS inherent
"KRN",9.2,960,1,17,0)
time elements (such as "30M Massage Therapy") then a volume of one is
"KRN",9.2,960,1,18,0)
usually entered, meaning 1 of this specific procedure/service was
"KRN",9.2,960,1,19,0)
provided.
"KRN",9.2,960,1,20,0)
 
"KRN",9.2,960,1,21,0)
     OR
"KRN",9.2,960,1,22,0)
 
"KRN",9.2,960,1,23,0)
2. Time: Amount of time shown in increments of minutes (M). When a 
"KRN",9.2,960,1,24,0)
selected procedure code DOES NOT have inherent time elements THEN the
"KRN",9.2,960,1,25,0)
volume field is used to capture the time spent completing the
"KRN",9.2,960,1,26,0)
procedure/service: 1 = 15M, 2 = 30M, 3= 45M
"KRN",9.2,960,1,27,0)
 
"KRN",9.2,960,1,28,0)
     OR
"KRN",9.2,960,1,29,0)
 
"KRN",9.2,960,1,30,0)
3. Days: Number of days patient was in VA paid facilities such as State 
"KRN",9.2,960,1,31,0)
Home, DOM, or a Nursing Home. When entering workload for a patient in a 
"KRN",9.2,960,1,32,0)
VA-Paid facility, volume of 1 means 1 day, 2 means 2 days, etc.
"KRN",9.2,960,1,33,0)
 
"KRN",9.2,960,1,34,0)
NOTE: It is imperative to understand and keep track of the values you are 
"KRN",9.2,960,1,35,0)
entering in the volume field and what they represent for the patients you 
"KRN",9.2,960,1,36,0)
are treating.
"KRN",9.2,960,1,37,0)
 
"KRN",9.2,960,1,38,0)
Then enter patients and information specific to each patient (Ordering
"KRN",9.2,960,1,39,0)
Section, Agent Orange, Associated Clinic, etc.).
"KRN",9.2,960,1,40,0)
 
"KRN",9.2,960,1,41,0)
** You must answer exposure and service-connected indicators if fields 
"KRN",9.2,960,1,42,0)
are not disabled.** 
"KRN",9.2,960,1,43,0)
 
"KRN",9.2,960,1,44,0)
See the User Manual for further details.
"KRN",9.2,960,10.2)
W @IOF
"KRN",9.2,1491,-1)
0^36
"KRN",9.2,1491,0)
ECSSPATSSN^Patient SSN^3010529.134633^
"KRN",9.2,1491,1,0)
^^2^2^3160328^
"KRN",9.2,1491,1,1,0)
The patient SSN must exist on the Patient File (#2, ^DPT).  If the SSN is
"KRN",9.2,1491,1,2,0)
shorter than 9 digits, it will be left filled with zeros.
"KRN",9.2,1491,10.2)
W @IOF
"KRN",9.2,1503,-1)
0^4
"KRN",9.2,1503,0)
ECSSASSOCCLIN^Associated Clinic^3010529.140314^
"KRN",9.2,1503,1,0)
^^6^6^3160217^
"KRN",9.2,1503,1,1,0)
An associated clinic must be identified if the DSS unit is set to send 
"KRN",9.2,1503,1,2,0)
all records to PCE.  
"KRN",9.2,1503,1,3,0)
 
"KRN",9.2,1503,1,4,0)
You may enter either the associated clinic name or the associated clinic
"KRN",9.2,1503,1,5,0)
IEN in the appropriate field.  If you enter both, the IEN will be the only
"KRN",9.2,1503,1,6,0)
data used to identify the associated clinic.
"KRN",9.2,1503,2,0)
^9.22A^^0
"KRN",9.2,1503,10.2)
W @IOF
"KRN",9.2,1505,-1)
0^10
"KRN",9.2,1505,0)
ECPAT0^Enter/Edit Patient Procedures Selection^3010628.092336^
"KRN",9.2,1505,1,0)
^^19^19^3160324^
"KRN",9.2,1505,1,1,0)
This screen allows you to select a patient to either add, update or 
"KRN",9.2,1505,1,2,0)
delete procedures performed.
"KRN",9.2,1505,1,3,0)
 
"KRN",9.2,1505,1,4,0)
You must first select a Location, then a DSS Unit within that Location.
"KRN",9.2,1505,1,5,0)
 
"KRN",9.2,1505,1,6,0)
The system defaults to the current date as the Date Range. You can change 
"KRN",9.2,1505,1,7,0)
the date range if desired by entering dates for Procedures From and 
"KRN",9.2,1505,1,8,0)
Procedures Through. 
"KRN",9.2,1505,1,9,0)
 
"KRN",9.2,1505,1,10,0)
Next, select a patient.  If there were procedures done within the date 
"KRN",9.2,1505,1,11,0)
range specified a list of those procedures will be displayed.
"KRN",9.2,1505,1,12,0)
 
"KRN",9.2,1505,1,13,0)
Select an existing procedure, then click the 'Delete' button to remove
"KRN",9.2,1505,1,14,0)
that procedure.
"KRN",9.2,1505,1,15,0)
 
"KRN",9.2,1505,1,16,0)
Select an existing procedure, then click the 'Update' button to modify
"KRN",9.2,1505,1,17,0)
that record.
"KRN",9.2,1505,1,18,0)
 
"KRN",9.2,1505,1,19,0)
Click the 'Add' button to add a procedure for the selected patient.
"KRN",9.2,1505,10.2)
W @IOF
"KRN",9.2,1541,-1)
0^15
"KRN",9.2,1541,0)
EC NTPCE^ECS Records Failing Transmission to PCE^3040219.150605^
"KRN",9.2,1541,1,0)
^^5^5^3160324^
"KRN",9.2,1541,1,1,0)
This Event Capture report provides a list of encounters and the reasons 
"KRN",9.2,1541,1,2,0)
why the records were not transmitted to PCE.  The Procedure Date/Time,
"KRN",9.2,1541,1,3,0)
Location, DSS Unit, Patient, Procedure, Category, last four 
"KRN",9.2,1541,1,4,0)
digits of the Patient's SSN, Provider(s) of care and Reasons for 
"KRN",9.2,1541,1,5,0)
transmission failure are listed on the report.
"KRN",9.2,1541,10.2)
W @IOF
"KRN",9.2,1549,-1)
0^26
"KRN",9.2,1549,0)
ECSCPT^Event Code Screens with CPT Codes^3050824.162938^
"KRN",9.2,1549,1,0)
^^13^13^3160328^
"KRN",9.2,1549,1,1,0)
This option allows you to print/display event code screens 
"KRN",9.2,1549,1,2,0)
with active/inactive/both CPT codes for all or a specific DSS
"KRN",9.2,1549,1,3,0)
Unit. The output includes:
"KRN",9.2,1549,1,4,0)
 
"KRN",9.2,1549,1,5,0)
 - Run Date and Time
"KRN",9.2,1549,1,6,0)
 - Location
"KRN",9.2,1549,1,7,0)
 - DSS Unit
"KRN",9.2,1549,1,8,0)
 - Category (if applicable)
"KRN",9.2,1549,1,9,0)
 - Procedure Name
"KRN",9.2,1549,1,10,0)
 - National Number
"KRN",9.2,1549,1,11,0)
 - CPT Code 
"KRN",9.2,1549,1,12,0)
   (Inactive CPT codes are flagged with an *I* when printing 
"KRN",9.2,1549,1,13,0)
    both active and inactive codes)
"KRN",9.2,1549,10.2)
W @IOF
"KRN",9.2,1551,-1)
0^13
"KRN",9.2,1551,0)
ECRDSSA^DSS Unit Activity Report^3071023.124544^
"KRN",9.2,1551,1,0)
^^19^19^3160328^
"KRN",9.2,1551,1,1,0)
This option allows the user to print/display all patients for the
"KRN",9.2,1551,1,2,0)
specified location(s) and DSS Unit(s) within a selected date range. The
"KRN",9.2,1551,1,3,0)
patients may be sorted by Patient Name, SSN, or Provider Name. The output
"KRN",9.2,1551,1,4,0)
includes:
"KRN",9.2,1551,1,5,0)
 
"KRN",9.2,1551,1,6,0)
 - Patient Name
"KRN",9.2,1551,1,7,0)
 - Last four digits of Patient SSN
"KRN",9.2,1551,1,8,0)
 - Inpatient/Outpatient Indicator
"KRN",9.2,1551,1,9,0)
 - Procedure Date and Time
"KRN",9.2,1551,1,10,0)
 - Procedure Code
"KRN",9.2,1551,1,11,0)
 - Procedure Name
"KRN",9.2,1551,1,12,0)
 - Volume
"KRN",9.2,1551,1,13,0)
 - Primary Diagnosis
"KRN",9.2,1551,1,14,0)
 - Primary Provider
"KRN",9.2,1551,1,15,0)
 - Synonym
"KRN",9.2,1551,1,16,0)
 
"KRN",9.2,1551,1,17,0)
If more than one location has been set up, you will be prompted to 
"KRN",9.2,1551,1,18,0)
select all or specific locations. You will also be prompted to select all
"KRN",9.2,1551,1,19,0)
or specific DSS Units.
"KRN",9.2,1551,10.2)
W @IOF
"KRN",9.2,1553,-1)
0^23
"KRN",9.2,1553,0)
ECSTPCD^DSS Units with any Associated Stop Code Errors^3100413.10504^
"KRN",9.2,1553,1,0)
^^9^9^3160324^
"KRN",9.2,1553,1,1,0)
This report provides a list of DSS Units with any error with the 
"KRN",9.2,1553,1,2,0)
associated Stop Code.
"KRN",9.2,1553,1,3,0)
 
"KRN",9.2,1553,1,4,0)
The report displays:
"KRN",9.2,1553,1,5,0)
 - DSS Unit IEN
"KRN",9.2,1553,1,6,0)
 - DSS Unit Name
"KRN",9.2,1553,1,7,0)
 - Associated Stop Code IEN
"KRN",9.2,1553,1,8,0)
 - Associated Stop Code Name
"KRN",9.2,1553,1,9,0)
 - Error
"KRN",9.2,1553,10.2)
W @IOF
"KRN",9.2,1554,-1)
0^16
"KRN",9.2,1554,0)
ECRECER^Event Capture Encounters Report^3111220.153224^
"KRN",9.2,1554,1,0)
^^19^19^3160328^
"KRN",9.2,1554,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,1554,1,2,0)
 
"KRN",9.2,1554,1,3,0)
This option allows you to print/display/export Event Capture encounter
"KRN",9.2,1554,1,4,0)
data within a specified date range for selected locations and DSS units.
"KRN",9.2,1554,1,5,0)
The report can be sorted by patient or provider.
"KRN",9.2,1554,1,6,0)
 
"KRN",9.2,1554,1,7,0)
The output includes:
"KRN",9.2,1554,1,8,0)
 
"KRN",9.2,1554,1,9,0)
 - Patient name 
"KRN",9.2,1554,1,10,0)
 - Last four digits of patient SSN
"KRN",9.2,1554,1,11,0)
 - Inpatient/Outpatient Indicator
"KRN",9.2,1554,1,12,0)
 - Procedure Date and Time
"KRN",9.2,1554,1,13,0)
 - Primary provider
"KRN",9.2,1554,1,14,0)
 - DSS unit
"KRN",9.2,1554,1,15,0)
 - Volume
"KRN",9.2,1554,1,16,0)
 - Clinic
"KRN",9.2,1554,1,17,0)
 - Stop Code
"KRN",9.2,1554,1,18,0)
 - Credit Stop Code
"KRN",9.2,1554,1,19,0)
 - CHAR4
"KRN",9.2,1555,-1)
0^27
"KRN",9.2,1555,0)
ECRECSIC^EC SCREENS WITH INACTIVE DEFAULT ASSOCIATED CILNIC^3111220.161559^
"KRN",9.2,1555,1,0)
^^13^13^3160328^
"KRN",9.2,1555,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,1555,1,2,0)
 
"KRN",9.2,1555,1,3,0)
This option allows you to print/display/export inactive default
"KRN",9.2,1555,1,4,0)
associated clinic data for specified locations and DSS units.
"KRN",9.2,1555,1,5,0)
 
"KRN",9.2,1555,1,6,0)
The output includes:
"KRN",9.2,1555,1,7,0)
 
"KRN",9.2,1555,1,8,0)
 - DSS unit name
"KRN",9.2,1555,1,9,0)
 - Location
"KRN",9.2,1555,1,10,0)
 - Category
"KRN",9.2,1555,1,11,0)
 - Procedure code
"KRN",9.2,1555,1,12,0)
 - Clinic IEN
"KRN",9.2,1555,1,13,0)
 - Clinic name
"KRN",9.2,1556,-1)
0^24
"KRN",9.2,1556,0)
ECRECSPC^DSS UNITS/EVENT CODE SCREENS FOR SELECTED PROCEDURE CODE^3111220.161802^
"KRN",9.2,1556,1,0)
^^12^12^3160328^
"KRN",9.2,1556,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,1556,1,2,0)
 
"KRN",9.2,1556,1,3,0)
This option allows you to print/display/export DSS unit and EC
"KRN",9.2,1556,1,4,0)
screen data for a selected procedure code and specified locations.
"KRN",9.2,1556,1,5,0)
 
"KRN",9.2,1556,1,6,0)
The output includes:
"KRN",9.2,1556,1,7,0)
 
"KRN",9.2,1556,1,8,0)
 - DSS unit IEN
"KRN",9.2,1556,1,9,0)
 - DSS unit name
"KRN",9.2,1556,1,10,0)
 - Location
"KRN",9.2,1556,1,11,0)
 - Category
"KRN",9.2,1556,1,12,0)
 - EC screen status
"KRN",9.2,1557,-1)
0^25
"KRN",9.2,1557,0)
ECRDSSUA^USER ACCESS TO DSS UNITS FOR SELECTED LOCATIONS/DSS UNITS^3111220.161951^
"KRN",9.2,1557,1,0)
^^11^11^3160328^
"KRN",9.2,1557,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,1557,1,2,0)
 
"KRN",9.2,1557,1,3,0)
This option allows you to print/display/export user access to DSS
"KRN",9.2,1557,1,4,0)
unit data for specified locations and DSS units.
"KRN",9.2,1557,1,5,0)
 
"KRN",9.2,1557,1,6,0)
The output includes:
"KRN",9.2,1557,1,7,0)
 
"KRN",9.2,1557,1,8,0)
 - DSS unit name
"KRN",9.2,1557,1,9,0)
 - User name
"KRN",9.2,1557,1,10,0)
 - User IEN from NEW PERSON (#200) file
"KRN",9.2,1557,1,11,0)
 - Person Class/Classification
"KRN",9.2,1564,-1)
0^1
"KRN",9.2,1564,0)
ECDSSSNR^Send no records DSS Units report^3151021.165315^
"KRN",9.2,1564,1,0)
^^3^3^3160324^
"KRN",9.2,1564,1,1,0)
Lists active DSS Units with send to PCE status of Send NO RECORDS.  
"KRN",9.2,1564,1,2,0)
Includes DSS Unit Name and IEN, Associated Stop Code (and Credit Stop
"KRN",9.2,1564,1,3,0)
and/or CHAR4 Code if present).
"KRN",9.2,1565,-1)
0^2
"KRN",9.2,1565,0)
ECDISSUM^Disabled Category & Procedure Summary Report^3151124.143316^
"KRN",9.2,1565,1,0)
^^44^44^3160324^
"KRN",9.2,1565,1,1,0)
** You must have locations, DSS Units, local categories, and procedures 
"KRN",9.2,1565,1,2,0)
defined before using this option. ** 
"KRN",9.2,1565,1,3,0)
 
"KRN",9.2,1565,1,4,0)
** This report can be printed or exported as a reference guide for data 
"KRN",9.2,1565,1,5,0)
entry personnel at your facility. **
"KRN",9.2,1565,1,6,0)
 
"KRN",9.2,1565,1,7,0)
This option allows you to print/display ECS categories that have been 
"KRN",9.2,1565,1,8,0)
disabled for one or all DSS Units within a specified location.  If your 
"KRN",9.2,1565,1,9,0)
DSS Units have categories enabled and have Event Code Screens defined to 
"KRN",9.2,1565,1,10,0)
those categories, this report displays the EC screens that now have 
"KRN",9.2,1565,1,11,0)
disabled categories.
"KRN",9.2,1565,1,12,0)
  
"KRN",9.2,1565,1,13,0)
All procedures print for each disabled category.  
"KRN",9.2,1565,1,14,0)
 
"KRN",9.2,1565,1,15,0)
The report output includes the headers:
"KRN",9.2,1565,1,16,0)
 
"KRN",9.2,1565,1,17,0)
 - Run Date 
"KRN",9.2,1565,1,18,0)
 - Location 
"KRN",9.2,1565,1,19,0)
 - Service 
"KRN",9.2,1565,1,20,0)
 - DSS Unit
"KRN",9.2,1565,1,21,0)
 - DSS Unit IEN 
"KRN",9.2,1565,1,22,0)
 - Send Status  
"KRN",9.2,1565,1,23,0)
 - DSS Dept 
"KRN",9.2,1565,1,24,0)
 
"KRN",9.2,1565,1,25,0)
The Excel export report output fields include:
"KRN",9.2,1565,1,26,0)
 
"KRN",9.2,1565,1,27,0)
 - EC Screen Status
"KRN",9.2,1565,1,28,0)
 - Location  
"KRN",9.2,1565,1,29,0)
 - Service
"KRN",9.2,1565,1,30,0)
 - DSS Unit
"KRN",9.2,1565,1,31,0)
 - DSS Unit IEN 
"KRN",9.2,1565,1,32,0)
 - DSS Dept.
"KRN",9.2,1565,1,33,0)
 - Send Status
"KRN",9.2,1565,1,34,0)
 - DSS Unit Inactive
"KRN",9.2,1565,1,35,0)
 - Disabled Category
"KRN",9.2,1565,1,36,0)
 - CPT Code
"KRN",9.2,1565,1,37,0)
 - Procedure Code
"KRN",9.2,1565,1,38,0)
 - Procedure Name
"KRN",9.2,1565,1,39,0)
 - Synonym
"KRN",9.2,1565,1,40,0)
 - Clinic IEN
"KRN",9.2,1565,1,41,0)
 - Clinic
"KRN",9.2,1565,1,42,0)
 - Clinic Stop Code
"KRN",9.2,1565,1,43,0)
 - Credit Stop Code
"KRN",9.2,1565,1,44,0)
 - CHAR4 Code
"KRN",9.2,1566,-1)
0^5
"KRN",9.2,1566,0)
ECSSCSS^Patient eligibilities^3160209.171146^
"KRN",9.2,1566,1,0)
^9.21^5^5^3160217^^^
"KRN",9.2,1566,1,1,0)
This field is one of several related to a patient's eligibility.  If the 
"KRN",9.2,1566,1,2,0)
eligibility is active at the time of the encounter you may enter Y if the 
"KRN",9.2,1566,1,3,0)
encounter was related to the eligibility or N if it was not.
"KRN",9.2,1566,1,4,0)
 
"KRN",9.2,1566,1,5,0)
Eligibilities will be validated when you upload the spreadsheet.
"KRN",9.2,1567,-1)
0^6
"KRN",9.2,1567,0)
ECSSMOD^CPT Modifiers^3160209.17213^
"KRN",9.2,1567,1,0)
^9.21^6^6^3160217^^^
"KRN",9.2,1567,1,1,0)
This field is used to enter a modifier to the selected CPT procedure 
"KRN",9.2,1567,1,2,0)
code.
"KRN",9.2,1567,1,3,0)
 
"KRN",9.2,1567,1,4,0)
You may enter up to 5 unique modifier codes for the procedure. Modifiers
"KRN",9.2,1567,1,5,0)
will be checked for validity during the upload process based on the 
"KRN",9.2,1567,1,6,0)
selected CPT procedure code.
"KRN",19,11187,-1)
0^1
"KRN",19,11187,0)
EC GUI CONTEXT^EC GUI Context version 2.3.0.0^^B^^^^^^^^EVENT CAPTURE
"KRN",19,11187,1,0)
^19.06^1^1^3160208^^^^
"KRN",19,11187,1,1,0)
This is the Broker Client/Server type option for the Event Capture GUI option
"KRN",19,11187,99)
58583,58456
"KRN",19,11187,99.1)
62872,41516
"KRN",19,11187,"RPC",0)
^19.05P^57^57
"KRN",19,11187,"RPC",1,0)
EC DSSCATCHECK
"KRN",19,11187,"RPC",2,0)
EC FILER
"KRN",19,11187,"RPC",3,0)
EC GETBATPROCS
"KRN",19,11187,"RPC",4,0)
EC GETCAT
"KRN",19,11187,"RPC",5,0)
EC GETCPTLST
"KRN",19,11187,"RPC",6,0)
EC GETDSSECS
"KRN",19,11187,"RPC",7,0)
EC GETDSSUNIT
"KRN",19,11187,"RPC",8,0)
EC GETDSSUNITUSRS
"KRN",19,11187,"RPC",9,0)
EC GETECLOC
"KRN",19,11187,"RPC",10,0)
EC GETECSCATS
"KRN",19,11187,"RPC",11,0)
EC GETECSCREEN
"KRN",19,11187,"RPC",12,0)
EC GETECSDETAIL
"KRN",19,11187,"RPC",13,0)
EC GETECSPROCS
"KRN",19,11187,"RPC",14,0)
EC GETENCDXS
"KRN",19,11187,"RPC",15,0)
EC GETIEN
"KRN",19,11187,"RPC",16,0)
EC GETLIST
"KRN",19,11187,"RPC",17,0)
EC GETLOC
"KRN",19,11187,"RPC",18,0)
EC GETNATPX
"KRN",19,11187,"RPC",19,0)
EC GETPATCLASTAT
"KRN",19,11187,"RPC",20,0)
EC GETPATELIG
"KRN",19,11187,"RPC",21,0)
EC GETPATINFO
"KRN",19,11187,"RPC",22,0)
EC GETPATPROCS
"KRN",19,11187,"RPC",23,0)
EC GETPRODEFS
"KRN",19,11187,"RPC",24,0)
EC GETPROVIDER
"KRN",19,11187,"RPC",25,0)
EC GETPXLST
"KRN",19,11187,"RPC",26,0)
EC GETPXMODIFIER
"KRN",19,11187,"RPC",27,0)
EC GETPXREASON
"KRN",19,11187,"RPC",28,0)
EC GETSCNHELP
"KRN",19,11187,"RPC",29,0)
EC GETUSRDSSUNIT
"KRN",19,11187,"RPC",30,0)
EC REPORTS
"KRN",19,11187,"RPC",31,0)
EC VALIDATE SPREADSHEET DATA
"KRN",19,11187,"RPC",32,0)
ORWU USERINFO
"KRN",19,11187,"RPC",33,0)
ORWU HASKEY
"KRN",19,11187,"RPC",34,0)
ORWU DEVICE
"KRN",19,11187,"RPC",35,0)
SC PATIENT LOOKUP
"KRN",19,11187,"RPC",36,0)
ORWU NEWPERS
"KRN",19,11187,"RPC",37,0)
DDR GET DD HELP
"KRN",19,11187,"RPC",38,0)
DDR FINDER
"KRN",19,11187,"RPC",39,0)
DDR FIND1
"KRN",19,11187,"RPC",40,0)
DDR LISTER
"KRN",19,11187,"RPC",41,0)
EC GETDATE
"KRN",19,11187,"RPC",42,0)
EC CLASHELP
"KRN",19,11187,"RPC",43,0)
DDR GETS ENTRY DATA
"KRN",19,11187,"RPC",44,0)
DG CHK BS5 XREF Y/N
"KRN",19,11187,"RPC",45,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,11187,"RPC",46,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,11187,"RPC",47,0)
DG CHK PAT/DIV MEANS TEST
"KRN",19,11187,"RPC",48,0)
EC SPACEBAR
"KRN",19,11187,"RPC",49,0)
EC DIEDON
"KRN",19,11187,"RPC",50,0)
EC GETPATCH
"KRN",19,11187,"RPC",51,0)
EC GETVISITINFO
"KRN",19,11187,"RPC",52,0)
EC GETVERSION
"KRN",19,11187,"RPC",53,0)
ORWU DT
"KRN",19,11187,"RPC",54,0)
ECOB METHOD
"KRN",19,11187,"RPC",55,0)
ECOB FACTORY
"KRN",19,11187,"RPC",56,0)
EC RECENT VISITS
"KRN",19,11187,"RPC",57,0)
EC ICD10IMPLEMENTATIONDATE
"KRN",19,11187,"U")
EC GUI CONTEXT VERSION 2.3.0.0
"MBREQ")
0
"ORD",1,9.2)
9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"ORD",1,9.2,0)
HELP FRAME
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
131^3160620
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
24
"RTN","EC2P131")
0^1^B11411445^n/a
"RTN","EC2P131",1,0)
EC2P131 ;ALB/DAN Post-Install events for Event Capture patch 131 ;10/27/15  16:08
"RTN","EC2P131",2,0)
 ;;2.0;EVENT CAPTURE;**131**;8 May 96;Build 13
"RTN","EC2P131",3,0)
 ;
"RTN","EC2P131",4,0)
POST ;Called from build to do post-install events
"RTN","EC2P131",5,0)
 N UPDATE
"RTN","EC2P131",6,0)
 D CHKPCE
"RTN","EC2P131",7,0)
 D MAIL
"RTN","EC2P131",8,0)
 D CHKDSS^ECUTL3
"RTN","EC2P131",9,0)
 D REASON
"RTN","EC2P131",10,0)
 Q
"RTN","EC2P131",11,0)
 ;
"RTN","EC2P131",12,0)
CHKPCE ;Change any DSS units that have SEND TO PCE set to "O" to "A"
"RTN","EC2P131",13,0)
 N IEN,DSSU
"RTN","EC2P131",14,0)
 S IEN=0 F  S IEN=$O(^ECD(IEN)) Q:'+IEN  S DSSU=$G(^ECD(IEN,0)) I $P(DSSU,U,14)="O" S $P(^ECD(IEN,0),U,14)="A",UPDATE($P(DSSU,U)_U_IEN_U_$S('$P(DSSU,U,6):"Active",1:"Inactive"))=""
"RTN","EC2P131",15,0)
 Q
"RTN","EC2P131",16,0)
 ;
"RTN","EC2P131",17,0)
MAIL ;Send findings via email
"RTN","EC2P131",18,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,NAME,CNT
"RTN","EC2P131",19,0)
 S XMDUZ="Event Capture Package"
"RTN","EC2P131",20,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","EC2P131",21,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","EC2P131",22,0)
 S ECTEXT(1)="The check for DSS Units with a Send to PCE setting of 'Outpatient Only'"
"RTN","EC2P131",23,0)
 S ECTEXT(2)="has completed.  Below are the results."
"RTN","EC2P131",24,0)
 S ECTEXT(3)=""
"RTN","EC2P131",25,0)
 I '$D(UPDATE) S ECTEXT(4)="No DSS Units were identified.  No further action is required."
"RTN","EC2P131",26,0)
 S CNT=4 ;start with line 4 to add to message
"RTN","EC2P131",27,0)
 I $D(UPDATE) D
"RTN","EC2P131",28,0)
 .S ECTEXT(CNT)="The following DSS Units had their Send to PCE setting changed to 'All Records':",CNT=CNT+1,ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P131",29,0)
 .S ECTEXT(CNT)="NAME"_$$REPEAT^XLFSTR(" ",28)_"DSS IEN  STATUS",CNT=CNT+1,ECTEXT(CNT)="----"_$$REPEAT^XLFSTR(" ",28)_"-------  ------",CNT=CNT+1
"RTN","EC2P131",30,0)
 .S NAME="" F  S NAME=$O(UPDATE(NAME)) Q:NAME=""  S ECTEXT(CNT)=$P(NAME,U)_$$REPEAT^XLFSTR(" ",(32-$L($P(NAME,U))))_$P(NAME,U,2)_$$REPEAT^XLFSTR(" ",(9-$L($P(NAME,U,2))))_$P(NAME,U,3),CNT=CNT+1
"RTN","EC2P131",31,0)
 S XMTEXT="ECTEXT(",XMSUB="DSS Unit send to PCE review"
"RTN","EC2P131",32,0)
 D ^XMD ;Send email
"RTN","EC2P131",33,0)
 Q
"RTN","EC2P131",34,0)
 ;
"RTN","EC2P131",35,0)
REASON ;Add entries in file 720.4
"RTN","EC2P131",36,0)
 ;
"RTN","EC2P131",37,0)
 N ECXFDA,ECXERR,ECREAS,I,DONE,IEN,FDA
"RTN","EC2P131",38,0)
 ;
"RTN","EC2P131",39,0)
 ;-add procedure reason
"RTN","EC2P131",40,0)
 F I=1:1 S ECREAS=$P($T(ADDREAS+I),";;",2) Q:ECREAS="QUIT"  D
"RTN","EC2P131",41,0)
 .;
"RTN","EC2P131",42,0)
 .;-quit w/error message if entry already exists in file #720.4
"RTN","EC2P131",43,0)
 .I $$FIND1^DIC(720.4,"","X",ECREAS) D  Q
"RTN","EC2P131",44,0)
 ..D BMES^XPDUTL(">>>..."_ECREAS_" not added, entry already exists.")
"RTN","EC2P131",45,0)
 .;
"RTN","EC2P131",46,0)
 .;Setup field values of new entry
"RTN","EC2P131",47,0)
 .S ECXFDA(720.4,"+1,",.01)=ECREAS
"RTN","EC2P131",48,0)
 .S ECXFDA(720.4,"+1,",.02)=1 ;Set "ACTIVE?" field to 1 (active)
"RTN","EC2P131",49,0)
 .;
"RTN","EC2P131",50,0)
 .;-add new entry to file #720.4
"RTN","EC2P131",51,0)
 .D UPDATE^DIE("E","ECXFDA","","ECXERR")
"RTN","EC2P131",52,0)
 .;
"RTN","EC2P131",53,0)
 .I '$D(ECXERR) D BMES^XPDUTL(">>>..."_ECREAS_" added to file.")
"RTN","EC2P131",54,0)
 .I $D(ECXERR) D BMES^XPDUTL(">>>...Unable to add "_ECREAS_" to file.")
"RTN","EC2P131",55,0)
 ;
"RTN","EC2P131",56,0)
 Q
"RTN","EC2P131",57,0)
 ;
"RTN","EC2P131",58,0)
ADDREAS ;List of new procedure reasons
"RTN","EC2P131",59,0)
 ;;CHAP COUPLES COUNSELING
"RTN","EC2P131",60,0)
 ;;QUIT
"RTN","EC2P131",61,0)
 ;
"RTN","ECDEAL")
0^12^B21760524^B20421508
"RTN","ECDEAL",1,0)
ECDEAL ;BIR/MAM,JPW-Deallocate DSS Units ;1/22/16  14:33
"RTN","ECDEAL",2,0)
 ;;2.0;EVENT CAPTURE;**13,19,25,131**;8 May 96;Build 13
"RTN","ECDEAL",3,0)
 S ECOUT=0
"RTN","ECDEAL",4,0)
USER W @IOF,!!,"Do you want to remove access to all DSS Units for a specific user ?  NO//  " R ECYN:DTIME I '$T!(ECYN["^") G END
"RTN","ECDEAL",5,0)
 S ECYN=$E(ECYN) S:ECYN="" ECYN="N" I "YyNn"'[ECYN W !!,"If you are removing access to a DSS Unit for one or more users, enter",!,"<RET>.  If you want to remove access to all units for an individual user,"
"RTN","ECDEAL",6,0)
 I "YyNn"'[ECYN W !,"enter YES.",!!,"Press <RET> to continue  " R X:DTIME G USER
"RTN","ECDEAL",7,0)
 I "Yy"[ECYN D ^ECDEAL1 G END
"RTN","ECDEAL",8,0)
UNIT Q:ECOUT  W @IOF K DIC,DA S DIC(0)="QEAMZ",DIC=724,DIC("A")="Remove User Access for which DSS Unit ?   " D ^DIC K DIC G:Y<0 END S ECD=+Y,ECDN=$P(Y,"^",2)
"RTN","ECDEAL",9,0)
U W !!,"Do you want to remove access to this DSS Unit for all users ?  NO//  " R ECYN:DTIME I '$T!(ECYN="^") G END
"RTN","ECDEAL",10,0)
 S:ECYN="" ECYN="N" S ECYN=$E(ECYN) I "YyNn"'[ECYN W !!,"Enter <RET> if you are removing access to "_ECDN_" for an individual",!,"user or Y to remove access for ALL users." G U
"RTN","ECDEAL",11,0)
 I "Yy"[ECYN D  D ALL W:ECOUT !!,"Processing cancelled" G END
"RTN","ECDEAL",12,0)
 . W !!,"Access to "_ECDN_" will be removed from all users."
"RTN","ECDEAL",13,0)
 W !! K DIC S DIC("S")="I $D(^VA(200,Y,""EC"",ECD))",DIC(0)="QEAMZ",DIC=200,DIC("A")="Inactivate "_ECDN_" from which User ?  " D ^DIC K DIC G:Y<0 END S ECU=+Y,ECUN=$P(Y,"^",2)
"RTN","ECDEAL",14,0)
 K DIC,DA,DIK S DA=ECD,DA(1)=ECU,DIK="^VA(200,"_DA(1)_",""EC""," D ^DIK W !!,"Access to "_ECDN_" has been removed from "_ECUN_"." K DA,DIK G END
"RTN","ECDEAL",15,0)
 I ECU="" W !!,"Access for "_ECDN_" will be removed from all users.",!!,"All Event Code Screens will be inactivated for "_ECDN D ALL G UNIT
"RTN","ECDEAL",16,0)
 Q
"RTN","ECDEAL",17,0)
ALL ; remove all units from all users
"RTN","ECDEAL",18,0)
 W !!,"Do you want to inactivate "_ECDN_" ?  YES//  " R ECYN:DTIME I '$T!(ECYN="^") S ECOUT=1 Q
"RTN","ECDEAL",19,0)
 S:ECYN="" ECYN="Y" S ECYN=$E(ECYN) I "YyNn"'[ECYN D  G ALL
"RTN","ECDEAL",20,0)
 . W !!,"Enter <RET> if you want to inactivate this DSS Unit, or "
"RTN","ECDEAL",21,0)
 . W "NO to leave it active.",!!
"RTN","ECDEAL",22,0)
 . W "NOTE: If unit is inactivated it will be inaccessible during "
"RTN","ECDEAL",23,0)
 . W "patient data",!,?6,"entry; i.e none of its associated EC screens "
"RTN","ECDEAL",24,0)
 . W "(procedures) will be",!,?6,"available for patient data entry."
"RTN","ECDEAL",25,0)
 S INACT=ECYN,ECSCN=0,ECINC=DT I "Yy"[ECYN D SCN I ECOUT Q
"RTN","ECDEAL",26,0)
 I ECSCN W !!,"All Event Code Screens will be inactivated for "_ECDN
"RTN","ECDEAL",27,0)
 I "Yy"[INACT K DIE,DR S DIE=724,DA=ECD,DR="5////1" D ^DIE K DIE,DR
"RTN","ECDEAL",28,0)
 S ZTDESC="DEALLOCATE DSS UNIT",(ZTSAVE("ECD"),ZTSAVE("ECOUT"),ZTSAVE("ECDN"),ZTSAVE("ECSCN"),ZTSAVE("ECINC"))="",ZTRTN="DIK^ECDEAL",ZTIO="",ZTDTH=$H D ^%ZTLOAD,HOME^%ZIS K ZTSK Q
"RTN","ECDEAL",29,0)
 Q
"RTN","ECDEAL",30,0)
SCN ;prompt to inactive event code screens associated with unit
"RTN","ECDEAL",31,0)
 W !!,"Do you want to inactivate all Event Code Screens associated with"
"RTN","ECDEAL",32,0)
 W !,"this DSS Unit?  YES//  " R ECYN:DTIME I '$T!(ECYN="^") S ECOUT=1 Q
"RTN","ECDEAL",33,0)
 S:ECYN="" ECYN="Y" S ECYN=$E(ECYN)
"RTN","ECDEAL",34,0)
 I "YyNn"'[ECYN D  G SCN
"RTN","ECDEAL",35,0)
 . W !!,"Enter <RET> if you want to inactivate ALL Event Code Screens "
"RTN","ECDEAL",36,0)
 . W "for this DSS",!,"Unit, or NO to leave them active."
"RTN","ECDEAL",37,0)
 S ECSCN=$S("Yy"[ECYN:1,1:0)
"RTN","ECDEAL",38,0)
 I "Yy"[INACT,'ECSCN D
"RTN","ECDEAL",39,0)
 . W !!,"The "_ECDN_" DSS Unit has been inactivated. Event Code Screens"
"RTN","ECDEAL",40,0)
 . W !,"associated with that unit are no longer accessible to users."
"RTN","ECDEAL",41,0)
 . W !,"If you wish to inactivate individual Event Code Screens, use the"
"RTN","ECDEAL",42,0)
 . W !,"Inactivate Event Code Screens menu option."
"RTN","ECDEAL",43,0)
 Q
"RTN","ECDEAL",44,0)
DIK ; entry when queued
"RTN","ECDEAL",45,0)
 S ECU=0 F I=0:0 S ECU=$O(^VA(200,ECU)) Q:'ECU  I $D(^VA(200,ECU,"EC",ECD)) K DA,DIK S DA(1)=ECU,DA=ECD,DIK="^VA(200,"_DA(1)_",""EC""," D ^DIK
"RTN","ECDEAL",46,0)
 K DA,DIK
"RTN","ECDEAL",47,0)
 I ECSCN D INSCRN
"RTN","ECDEAL",48,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","ECDEAL",49,0)
 Q
"RTN","ECDEAL",50,0)
INSCRN ; inactivate screen codes
"RTN","ECDEAL",51,0)
 S EC=0
"RTN","ECDEAL",52,0)
 F EC=0:0 S EC=$O(^ECJ("AP",EC)) Q:'EC  S ECC="" F  S ECC=$O(^ECJ("AP",EC,ECD,ECC)) Q:ECC=""  S ECA="" F  S ECA=$O(^ECJ("AP",EC,ECD,ECC,ECA)) Q:ECA=""  D
"RTN","ECDEAL",53,0)
 .K DA,DIE,DR S DIE="^ECJ(",DA=+$O(^ECJ("AP",EC,ECD,ECC,ECA,0))
"RTN","ECDEAL",54,0)
 .I ECINC,$P($G(^ECJ(DA,0)),U,2)'="" Q
"RTN","ECDEAL",55,0)
 .I ECINC="@",ECC,'$P($G(^ECD(ECD,0)),U,11) Q  ;131 Don't reactivate an EC screen with a category if DSS unit is set to "no categories"
"RTN","ECDEAL",56,0)
 .S DR="1///"_ECINC D ^DIE
"RTN","ECDEAL",57,0)
 K EC,ECC,ECA,DA,DIE,DR
"RTN","ECDEAL",58,0)
 Q
"RTN","ECDEAL",59,0)
END I 'ECOUT W !!,"Press <RET> to continue  " R X:DTIME
"RTN","ECDEAL",60,0)
 W @IOF D ^ECKILL K ECSCN,INACT,ECINC S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECDEAL",61,0)
 Q
"RTN","ECDISSUM")
0^11^B4114146^n/a
"RTN","ECDISSUM",1,0)
ECDISSUM ;ALB/DAN - Disabled Category & Procedure Summary Rpt ;2/12/16  09:38
"RTN","ECDISSUM",2,0)
 ;;2.0;EVENT CAPTURE;**131**;8 May 96;Build 13
"RTN","ECDISSUM",3,0)
 ;
"RTN","ECDISSUM",4,0)
EN ;
"RTN","ECDISSUM",5,0)
 N CNT,ECRDT,ECPG,ECI,ECL,ECLN,ECDIS,ECD,ECC,ECSCN,ECOUT
"RTN","ECDISSUM",6,0)
 U IO
"RTN","ECDISSUM",7,0)
 S CNT=1,^TMP($J,"ECRPT",CNT)="EC SCREEN STATUS^LOCATION^SERVICE^DSS UNIT^DSS UNIT IEN^DSS DEPT^SEND STATUS^DSS UNIT INACTIVE^DISABLED CATEGORY^CPT CODE^PROCEDURE CODE"
"RTN","ECDISSUM",8,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"^PROCEDURE NAME^SYNONYM^CLINIC IEN^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE"
"RTN","ECDISSUM",9,0)
 S ECRDT=$$FMTE^XLFDT($$NOW^XLFDT),ECSCN="B",ECOUT=0
"RTN","ECDISSUM",10,0)
 S ECPG=1,ECDIS=1 ;Indicates we're running the disabled category report
"RTN","ECDISSUM",11,0)
 S ECI=0 F  S ECI=$O(ECLOC(ECI)) Q:'+ECI  D
"RTN","ECDISSUM",12,0)
 .S ECL=$P(ECLOC(ECI),U),ECLN=$P(ECLOC(ECI),U,2)
"RTN","ECDISSUM",13,0)
 .S ECD=0 F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'+ECD  D
"RTN","ECDISSUM",14,0)
 ..I $P($G(^ECD(ECD,0)),U,11)=0,$O(^ECJ("AP",ECL,ECD,0)) S ECC="ALL" D SUM2^ECSUM1 ;If unit set to no categories but has event code screens with categories defined then print
"RTN","ECDISSUM",15,0)
 Q
"RTN","ECDSSSNR")
0^5^B5168698^n/a
"RTN","ECDSSSNR",1,0)
ECDSSSNR ;ALB/DAN - DSS units set to send no records report ;10/15/15  15:56
"RTN","ECDSSSNR",2,0)
 ;;2.0;EVENT CAPTURE;**131**;8 May 96;Build 13
"RTN","ECDSSSNR",3,0)
 ;
"RTN","ECDSSSNR",4,0)
START ;
"RTN","ECDSSSNR",5,0)
 N NAME,UNIT,CNT,DSS0
"RTN","ECDSSSNR",6,0)
 S CNT=1
"RTN","ECDSSSNR",7,0)
 S NAME="" F  S NAME=$O(^ECD("B",NAME)) Q:NAME=""  S UNIT=0 F  S UNIT=$O(^ECD("B",NAME,UNIT)) Q:'+UNIT  D
"RTN","ECDSSSNR",8,0)
 .S DSS0=$G(^ECD(UNIT,0))
"RTN","ECDSSSNR",9,0)
 .I $P(DSS0,U,6) Q  ;Unit is inactive
"RTN","ECDSSSNR",10,0)
 .I $P(DSS0,U,14)'="N" Q  ;Only report units with send to pce set to send no records ("N")
"RTN","ECDSSSNR",11,0)
 .S CNT=CNT+1
"RTN","ECDSSSNR",12,0)
 .S ^TMP($J,"ECRPT",CNT)=UNIT_U_NAME_U_$$GET1^DIQ(40.7,$P(DSS0,U,10)_",",1)_U_$$GET1^DIQ(40.7,$P(DSS0,U,13)_",",1)_U_$$GET1^DIQ(728.441,$P(DSS0,U,15),.01) ;Store DSS unit data
"RTN","ECDSSSNR",13,0)
 I $G(ECPTYP)="E" S ^TMP($J,"ECRPT",1)="DSS UNIT IEN^DSS UNIT NAME^STOP CODE^CREDIT STOP^CHAR4" Q  ;If exporting, create header line
"RTN","ECDSSSNR",14,0)
 ;
"RTN","ECDSSSNR",15,0)
PRINT ; Display results
"RTN","ECDSSSNR",16,0)
 N RDATE,LINE,NUM,PAGE
"RTN","ECDSSSNR",17,0)
 U IO
"RTN","ECDSSSNR",18,0)
 S RDATE=$$FMTE^XLFDT($E($$NOW^XLFDT,1,12),"5P")
"RTN","ECDSSSNR",19,0)
 D HDR
"RTN","ECDSSSNR",20,0)
 I '$D(^TMP($J,"ECRPT")) W !,"No active DSS units are set to Send No Records." Q  ;Nothing to report
"RTN","ECDSSSNR",21,0)
 S NUM=1
"RTN","ECDSSSNR",22,0)
 F  S NUM=$O(^TMP($J,"ECRPT",NUM)) Q:'+NUM  D
"RTN","ECDSSSNR",23,0)
 .S LINE=^TMP($J,"ECRPT",NUM)
"RTN","ECDSSSNR",24,0)
 .W !,$P(LINE,U,2)_" ("_$P(LINE,U)_")",?50,$P(LINE,U,3)_"/"_$P(LINE,U,4)_"/"_$P(LINE,U,5)
"RTN","ECDSSSNR",25,0)
 .I $Y>(IOSL-4) D HDR
"RTN","ECDSSSNR",26,0)
 Q
"RTN","ECDSSSNR",27,0)
 ;
"RTN","ECDSSSNR",28,0)
HDR ;Display header for report
"RTN","ECDSSSNR",29,0)
 W @IOF
"RTN","ECDSSSNR",30,0)
 S PAGE=$G(PAGE)+1
"RTN","ECDSSSNR",31,0)
 W "DSS UNITS SET TO SEND NO RECORDS TO PCE",?41,"Run date:",RDATE,?72,"Page:",PAGE
"RTN","ECDSSSNR",32,0)
 W !!,"DSS UNIT NAME (IEN)",?50,"STOP CODE/CREDIT STOP/CHAR4",!,$$REPEAT^XLFSTR("-",80),!
"RTN","ECDSSSNR",33,0)
 Q
"RTN","ECHECK1")
0^13^B11362790^B10754345
"RTN","ECHECK1",1,0)
ECHECK1 ;BIR/MAM,JPW-Categories and Procedures Check ;1/26/16  15:59
"RTN","ECHECK1",2,0)
 ;;2.0;EVENT CAPTURE ;**4,33,47,55,63,126,131**;8 May 96;Build 13
"RTN","ECHECK1",3,0)
CATS ; check number of categories
"RTN","ECHECK1",4,0)
 K ECBUD,EC1,EC23 S CNT=0,ECAT=""
"RTN","ECHECK1",5,0)
 I $P(^ECD(ECD,0),U,11) F  S ECAT=$O(^ECJ("AP",ECL,ECD,ECAT)) Q:ECAT=""  D  ;131 Only list categories if unit allows categories
"RTN","ECHECK1",6,0)
 .S EC2="" F  S EC2=$O(^ECJ("AP",ECL,ECD,ECAT,EC2)) Q:EC2=""  D
"RTN","ECHECK1",7,0)
 ..S EC23=+$O(^ECJ("AP",ECL,ECD,ECAT,EC2,0))
"RTN","ECHECK1",8,0)
 ..I $G(ECCSTA)="",$P($G(^ECJ(+EC23,0)),"^",2) Q
"RTN","ECHECK1",9,0)
 ..S ECBUD(ECAT)=+ECAT_"^"_$S($P($G(^EC(726,+ECAT,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECHECK1",10,0)
 S ECAT=0 F  S ECAT=$O(ECBUD(ECAT)) Q:'ECAT  S CNT=CNT+1,ECC(CNT)=ECBUD(ECAT)
"RTN","ECHECK1",11,0)
 I '$D(ECC) S ECC(CNT)="0^No Categories"
"RTN","ECHECK1",12,0)
 K EC2,EC23,ECBUD
"RTN","ECHECK1",13,0)
 Q
"RTN","ECHECK1",14,0)
PROS ; check number of procedures
"RTN","ECHECK1",15,0)
 K ^TMP("ECPRO",$J) S CNT=0,ECPROS=""
"RTN","ECHECK1",16,0)
 I ECC F  S ECPROS=$O(^ECJ("AP",ECL,ECD,ECC,ECPROS)) Q:ECPROS=""  D SET
"RTN","ECHECK1",17,0)
 I 'ECC S ECC="" F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  F  S ECPROS=$O(^ECJ("AP",ECL,ECD,ECC,ECPROS)) Q:ECPROS=""  D SET
"RTN","ECHECK1",18,0)
ALL ;set info for all proc
"RTN","ECHECK1",19,0)
 S CNT=0 F CNT=0:0 S CNT=$O(^TMP("ECPRO",$J,CNT)) Q:'CNT  D
"RTN","ECHECK1",20,0)
 .S ECPROF=$P(^TMP("ECPRO",$J,CNT),"^"),ECPIEN=$P(^(CNT),"^",2),ECPROPP=+ECPROF,ECPROF=$S(ECPROF["EC":725,ECPROF["ICPT":81,1:"UNKNOWN"),OK=0
"RTN","ECHECK1",21,0)
 .I ECPROF=725 S NODE1=$G(^EC(725,ECPROPP,0)),ECPRONAM=$S($P($G(NODE1),"^")]"":$P(NODE1,"^"),1:"UNKNOWN"),NATN=$P(NODE1,"^",2),OK=1
"RTN","ECHECK1",22,0)
 .I ECPROF=81 S NODE1=$$CPT^ICPTCOD(ECPROPP,$G(ECDT)),ECPRONAM=$S($P($G(NODE1),"^",3)]"":$P(NODE1,"^",3),1:"UNKNOWN"),NATN=$S($P(NODE1,"^",2)]"":$P(NODE1,"^",2),1:"NOT DEFINED"),OK=1
"RTN","ECHECK1",23,0)
 .S:'OK ECPRONAM="UNKNOWN"
"RTN","ECHECK1",24,0)
 .S NODE1=$G(^ECJ(ECPIEN,0)),ECTEMP=$P(NODE1,"^",2)
"RTN","ECHECK1",25,0)
 .;The ECACTIV variable allows users to select inactivate
"RTN","ECHECK1",26,0)
 .;procedures from the Inactivate Event Code Screen option.
"RTN","ECHECK1",27,0)
 .I '$G(ECACTIV)  I ECTEMP,ECTEMP'>DT K ECPIEN,ECPROF,ECPROPP,ECPRONAM,ECTEMP,NODE1,NOD2,SYN,NATN,VOL Q
"RTN","ECHECK1",28,0)
 .S NODE2=$G(^ECJ(ECPIEN,"PRO")),SYN=$S($P(NODE2,"^",2)]"":$P(NODE2,"^",2),1:"NOT DEFINED"),VOL=$P(NODE2,"^",3)
"RTN","ECHECK1",29,0)
 .S ^TMP("ECPRO",$J,CNT)=^TMP("ECPRO",$J,CNT)_"^"_SYN_"^"_ECPRONAM_"^"_NATN_"^"_VOL_"^"_ECPROF_"^"_ECPROPP_"^"_ECTEMP
"RTN","ECHECK1",30,0)
 .S ^TMP("ECPRO",$J,"B",ECPRONAM,CNT)="",^TMP("ECPRO",$J,"SYN",SYN,CNT)="",^TMP("ECPRO",$J,"N",NATN,CNT)="",^TMP("ECPRO",$J,"N2",NATN_" ",CNT)="" ;126 N2 is expected sort order
"RTN","ECHECK1",31,0)
 K ECPIEN,ECPROF,ECPROPP,ECPRONAM,ECTEMP,NODE1,NODE2,SYN,NATN,VOL
"RTN","ECHECK1",32,0)
 Q
"RTN","ECHECK1",33,0)
SET ;set proc in ^tmp
"RTN","ECHECK1",34,0)
 S ECPIEN=$O(^ECJ("AP",ECL,ECD,ECC,ECPROS,0))
"RTN","ECHECK1",35,0)
 ;The ECACTIV variable allows users to select inactive.
"RTN","ECHECK1",36,0)
 ;procedures from the Inactivate Event Code Screen option.
"RTN","ECHECK1",37,0)
 I '$G(ECACTIV)  I $P($G(^ECJ(ECPIEN,0)),"^",2),$P($G(^ECJ(ECPIEN,0)),"^",2)'>DT Q
"RTN","ECHECK1",38,0)
 ;remove inactive procedures
"RTN","ECHECK1",39,0)
 S NODE1=$S(ECPROS[";ICPT(":+ECPROS,1:$P($G(^EC(725,+ECPROS,0)),U,5))
"RTN","ECHECK1",40,0)
 ; ATG-1003-32110 : By VMP
"RTN","ECHECK1",41,0)
 I NODE1'="" S NODE1=$$CPT^ICPTCOD(NODE1,$G(ECDT)) Q:+NODE1<0  I '$P(NODE1,U,7),'$G(ECACTIV) Q
"RTN","ECHECK1",42,0)
 S CNT=CNT+1
"RTN","ECHECK1",43,0)
 S ^TMP("ECPRO",$J,CNT)=ECPROS_"^"_ECPIEN
"RTN","ECHECK1",44,0)
 Q
"RTN","ECMFDSSU")
0^7^B64085384^B36202160
"RTN","ECMFDSSU",1,0)
ECMFDSSU ;ALB/JAM-Event Capture Management Filer DSS Unit ;1/22/16  16:28
"RTN","ECMFDSSU",2,0)
 ;;2.0;EVENT CAPTURE ;**25,30,33,126,131**;8 May 96;Build 13
"RTN","ECMFDSSU",3,0)
 ;
"RTN","ECMFDSSU",4,0)
FILE ;Used by the RPC broker to file DSS Units in file #724
"RTN","ECMFDSSU",5,0)
 ;     Variables passed in
"RTN","ECMFDSSU",6,0)
 ;       ECIEN  - IEN of #724, if editing
"RTN","ECMFDSSU",7,0)
 ;       ECDUNM - DSS Unit Name
"RTN","ECMFDSSU",8,0)
 ;       ECS    - Service
"RTN","ECMFDSSU",9,0)
 ;       ECM    - Medical Speciality
"RTN","ECMFDSSU",10,0)
 ;       ECTR   - Cost Center
"RTN","ECMFDSSU",11,0)
 ;       ECUN   - Unit Number
"RTN","ECMFDSSU",12,0)
 ;       ECST   - Status Flag (Active/Inactive)
"RTN","ECMFDSSU",13,0)
 ;       ECASC  - Associated Stop Code
"RTN","ECMFDSSU",14,0)
 ;       ECC    - Category
"RTN","ECMFDSSU",15,0)
 ;       ECDFDT - Default Data Entry Date
"RTN","ECMFDSSU",16,0)
 ;       ECPCE  - Send to PCE
"RTN","ECMFDSSU",17,0)
 ;       ECSCN  - Event Code Screens status
"RTN","ECMFDSSU",18,0)
 ;       ECCSC  - Credit stop code, can be used when PCE status is "no records"
"RTN","ECMFDSSU",19,0)
 ;       ECHAR4 - CHAR4 code, can be used when PCE status is "no records"
"RTN","ECMFDSSU",20,0)
 ;
"RTN","ECMFDSSU",21,0)
 ;     Variable return
"RTN","ECMFDSSU",22,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #724^Message
"RTN","ECMFDSSU",23,0)
 ;
"RTN","ECMFDSSU",24,0)
 N ECERR,ECX,ECFLG,ECRES,ECONAM
"RTN","ECMFDSSU",25,0)
 S ECERR=0 D CHKDT I ECERR Q
"RTN","ECMFDSSU",26,0)
 D VALDATA I ECERR Q
"RTN","ECMFDSSU",27,0)
 S ECIEN=$G(ECIEN),ECFLG=1,ECONAM="",ECC=$S(ECC="Y":1,1:0)
"RTN","ECMFDSSU",28,0)
 I ECIEN'="" S ECFLG=0 D  I ECERR D END Q
"RTN","ECMFDSSU",29,0)
 . I '$D(^ECD(ECIEN,0)) D  Q
"RTN","ECMFDSSU",30,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Not on File" Q
"RTN","ECMFDSSU",31,0)
 . D CATCHK^ECUMRPC1(.ECRES,ECIEN) I ECRES,ECC'=$P(^ECD(ECIEN,0),U,11) D 
"RTN","ECMFDSSU",32,0)
 . . I ECC=0 D FIXSCRNS Q  ;131 If Category changed to no, update existing event code screens
"RTN","ECMFDSSU",33,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^Category Changed, EC Screen exist"
"RTN","ECMFDSSU",34,0)
 . S ECONAM=$P($G(^ECD(ECIEN,0)),U)
"RTN","ECMFDSSU",35,0)
 D  I ECERR D END Q   ;Check name
"RTN","ECMFDSSU",36,0)
 . I (ECFLG)!((ECONAM'="")&(ECONAM'=ECDUNM)),$D(^ECD("B",ECDUNM)) D  Q
"RTN","ECMFDSSU",37,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Name already exist"
"RTN","ECMFDSSU",38,0)
 . I 'ECFLG K DIE S DIE="^ECD(",DA=ECIEN,DR=".01////"_ECDUNM D ^DIE
"RTN","ECMFDSSU",39,0)
 S ECPCE=$S(ECPCE="A":"A",ECPCE="O":"O",1:"N")
"RTN","ECMFDSSU",40,0)
 I ECPCE="N",$G(ECASC)="" D  D END Q
"RTN","ECMFDSSU",41,0)
 . S ECERR=1,^TMP($J,"ECMSG",1)="0^No associated stop code, Send to PCE=N" ;126 Corrected error message
"RTN","ECMFDSSU",42,0)
 I 'ECFLG,ECPCE="N",$P($G(^ECD(+$G(ECIEN),0)),U,14)'="N" D UPDSCRN ;131 If existing DSS unit and PCE is being changed to "send no records" then update related EC screens
"RTN","ECMFDSSU",43,0)
 I ECIEN="" D NEWIEN
"RTN","ECMFDSSU",44,0)
 K DA,DR,DIE
"RTN","ECMFDSSU",45,0)
 S ECST=$E($G(ECST)),ECST=$S(ECST="I":1,1:0),ECDFDT=$E($G(ECDFDT))
"RTN","ECMFDSSU",46,0)
 S ECDFDT=$S(ECDFDT="N":"N",1:"X"),DIE="^ECD(",DA=ECIEN
"RTN","ECMFDSSU",47,0)
 S DR="1////"_ECS_";2////"_ECM_";3////"_ECTR_";4////"_$G(ECUN)
"RTN","ECMFDSSU",48,0)
 S DR=DR_";5////"_ECST_";7////1;9////"_$S(ECPCE'="N":"@",1:$G(ECASC))
"RTN","ECMFDSSU",49,0)
 S DR=DR_";10////"_ECC_";11////"_ECDFDT_";13////"_ECPCE
"RTN","ECMFDSSU",50,0)
 S DR=DR_";14////"_$S(ECPCE'="N":"@",$G(ECCSC)="":"@",1:$G(ECCSC))_";15////"_$S(ECPCE'="N":"@",$G(ECHAR4)="":"@",1:$G(ECHAR4)) ;126 Add credit stop and char4 fields
"RTN","ECMFDSSU",51,0)
 D ^DIE I $D(DTOUT) D RECDEL D  D END Q
"RTN","ECMFDSSU",52,0)
 . S ^TMP($J,"ECMSG",1)="0^DSS Unit Record not Filed"
"RTN","ECMFDSSU",53,0)
 I 'ECFLG D ECSCRNS
"RTN","ECMFDSSU",54,0)
 S ^TMP($J,"ECMSG",1)="1^DSS Unit Record Filed"_U_ECIEN
"RTN","ECMFDSSU",55,0)
END K DIE,DIC,DR,DA,DO,ECIEN
"RTN","ECMFDSSU",56,0)
 Q
"RTN","ECMFDSSU",57,0)
VALDATA ;validate data
"RTN","ECMFDSSU",58,0)
 N ECRRX
"RTN","ECMFDSSU",59,0)
 D CHK^DIE(724,.01,"E",ECDUNM,.ECRRX) I ECRRX'=ECDUNM D  Q
"RTN","ECMFDSSU",60,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid DSS Unit Name"
"RTN","ECMFDSSU",61,0)
 D CHK^DIE(724,1,"E","`"_ECS,.ECRRX) I ECRRX'=ECS D  Q
"RTN","ECMFDSSU",62,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Service"
"RTN","ECMFDSSU",63,0)
 D CHK^DIE(724,2,"E","`"_ECM,.ECRRX) I ECRRX'=ECM D  Q
"RTN","ECMFDSSU",64,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Medical Speciality"
"RTN","ECMFDSSU",65,0)
 D CHK^DIE(724,3,"E","`"_ECTR,.ECRRX) I ECRRX'=ECTR D  Q
"RTN","ECMFDSSU",66,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Cost Center"
"RTN","ECMFDSSU",67,0)
 I $G(ECUN)'="" D CHK^DIE(724,4,"E",ECUN,.ECRRX) I ECRRX'=ECUN D  Q
"RTN","ECMFDSSU",68,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Unit Number"
"RTN","ECMFDSSU",69,0)
 I $G(ECASC)'="" D CHK^DIE(724,9,"E","`"_ECASC,.ECRRX) I ECRRX'=ECASC D  Q
"RTN","ECMFDSSU",70,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Associated Stop Code" ;126 Corrected error message
"RTN","ECMFDSSU",71,0)
 I $G(ECCSC)'="" D CHK^DIE(724,14,"E","`"_ECCSC,.ECRRX) I ECRRX'=ECCSC S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Credit Stop Code" Q  ;126
"RTN","ECMFDSSU",72,0)
 I $G(ECHAR4)'="" D CHK^DIE(724,15,"E","`"_ECHAR4,.ECRRX) I ECRRX'=ECHAR4 S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid CHAR4 Code" Q  ;126
"RTN","ECMFDSSU",73,0)
 Q
"RTN","ECMFDSSU",74,0)
ECSCRNS ;Determine if event codes should be updated based on change of DSS Unit
"RTN","ECMFDSSU",75,0)
 ;status
"RTN","ECMFDSSU",76,0)
 ;  DSS Unit status changed from Active to Inactive, if EC screen status
"RTN","ECMFDSSU",77,0)
 ;      A - retain, do nothing,  B - inactiviate
"RTN","ECMFDSSU",78,0)
 ;  DSS Unit status changed from Inactive to Active, if EC screen status
"RTN","ECMFDSSU",79,0)
 ;      C - reactiviate,         D - remain inactive
"RTN","ECMFDSSU",80,0)
 ;
"RTN","ECMFDSSU",81,0)
 N ECD,ECINC,ZTDESC,ZTSAVE,ZTIO,ZTRTN,ZTDTH
"RTN","ECMFDSSU",82,0)
 I ($G(ECSCN)="")!(ECSCN="A")!(ECSCN="D") Q
"RTN","ECMFDSSU",83,0)
 I "^B^C^"']"^"_ECSCN_"^" Q
"RTN","ECMFDSSU",84,0)
 S ECD=ECIEN,ECINC=DT
"RTN","ECMFDSSU",85,0)
 I ECSCN="B" D
"RTN","ECMFDSSU",86,0)
 .S ZTDESC="DEALLOCATE DSS UNIT & INACTIVATE EVENT CODE SCREENS"
"RTN","ECMFDSSU",87,0)
 I ECSCN="C" D
"RTN","ECMFDSSU",88,0)
 .S ZTDESC="REACTIVIATE EVENT CODE SCREENS",ECINC="@"
"RTN","ECMFDSSU",89,0)
 S ZTRTN=$S(ECSCN="B":"DIK",1:"INSCRN")_"^ECDEAL",ZTDTH=$H
"RTN","ECMFDSSU",90,0)
 N ECSCN
"RTN","ECMFDSSU",91,0)
 S ECSCN=1,(ZTSAVE("ECD"),ZTSAVE("ECSCN"),ZTSAVE("ECINC"))="",ZTIO=""
"RTN","ECMFDSSU",92,0)
 D ^%ZTLOAD K ZTSK Q
"RTN","ECMFDSSU",93,0)
 D @ZTRTN
"RTN","ECMFDSSU",94,0)
 Q
"RTN","ECMFDSSU",95,0)
 ;
"RTN","ECMFDSSU",96,0)
RECDEL ; Delete record
"RTN","ECMFDSSU",97,0)
 I ECFLG S DA=ECIEN,DIK="^ECD(" D ^DIK K DA,DIK
"RTN","ECMFDSSU",98,0)
 Q
"RTN","ECMFDSSU",99,0)
NEWIEN ;Create new IEN in file #724
"RTN","ECMFDSSU",100,0)
 N DIC,DA,DD,DO
"RTN","ECMFDSSU",101,0)
 L +^ECD(0):3 ;126 Added lock time out as required by standard
"RTN","ECMFDSSU",102,0)
 S DIC=724,DIC(0)="L",X=ECDUNM
"RTN","ECMFDSSU",103,0)
 D FILE^DICN
"RTN","ECMFDSSU",104,0)
 L -^ECD(0)
"RTN","ECMFDSSU",105,0)
 S ECIEN=+Y
"RTN","ECMFDSSU",106,0)
 Q
"RTN","ECMFDSSU",107,0)
CHKDT ;Required Data Check
"RTN","ECMFDSSU",108,0)
 N I,C
"RTN","ECMFDSSU",109,0)
 S C=1
"RTN","ECMFDSSU",110,0)
 F I="ECDUNM","ECS","ECM","ECTR","ECC" D
"RTN","ECMFDSSU",111,0)
 .I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECMFDSSU",112,0)
 Q
"RTN","ECMFDSSU",113,0)
USER ;Used by the RPC broker to allocate or de-allocate users for DSS Units
"RTN","ECMFDSSU",114,0)
 ;in file #200
"RTN","ECMFDSSU",115,0)
 ;     Variables passed in
"RTN","ECMFDSSU",116,0)
 ;       ECIEN      - IEN of DSS Unit in file #724
"RTN","ECMFDSSU",117,0)
 ;       ECUSR0..n  - Users to allocate/deallocate to DSS Unit
"RTN","ECMFDSSU",118,0)
 ;
"RTN","ECMFDSSU",119,0)
 ;     Variable return
"RTN","ECMFDSSU",120,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #724^Message
"RTN","ECMFDSSU",121,0)
 ;
"RTN","ECMFDSSU",122,0)
 N EDUZ,ECERR,ECI,ECX,USER,DIC,DIK,X,Y,DA
"RTN","ECMFDSSU",123,0)
 S (EDUZ,ECERR)=0,ECIEN=$G(ECIEN)
"RTN","ECMFDSSU",124,0)
 I ECIEN="" S ^TMP($J,"ECMSG",1)="0^DSS Unit missing" Q
"RTN","ECMFDSSU",125,0)
 D  I ECERR Q
"RTN","ECMFDSSU",126,0)
 . I '$D(^ECD(ECIEN,0)) D
"RTN","ECMFDSSU",127,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Not on File"
"RTN","ECMFDSSU",128,0)
 F ECI=0:1 S ECX="ECUSR"_ECI Q:'$D(@ECX)  S:@ECX'="" USER(@ECX)=""
"RTN","ECMFDSSU",129,0)
 F  S EDUZ=$O(^VA(200,EDUZ)) Q:'EDUZ  I $D(^VA(200,EDUZ,"EC",ECIEN,0)) D
"RTN","ECMFDSSU",130,0)
 . I $D(USER(EDUZ)) K USER(EDUZ) Q
"RTN","ECMFDSSU",131,0)
 . K DA,DIK S DA(1)=EDUZ,DA=ECIEN,DIK="^VA(200,"_DA(1)_",""EC"","
"RTN","ECMFDSSU",132,0)
 . D ^DIK K USER(EDUZ)
"RTN","ECMFDSSU",133,0)
 ;add users for DSS Unit
"RTN","ECMFDSSU",134,0)
 S EDUZ=0 F  S EDUZ=$O(USER(EDUZ)) Q:'EDUZ  D
"RTN","ECMFDSSU",135,0)
 . K DIC,DD,DO S DIC=200,DIC(0)="QNMX",X=EDUZ D ^DIC I Y<0 Q
"RTN","ECMFDSSU",136,0)
 . K DIC,DD,DO S DIC(0)="L",DA(1)=EDUZ,DIC("P")=$P(^DD(200,720,0),U,2)
"RTN","ECMFDSSU",137,0)
 . S DINUM=ECIEN,DIC="^VA(200,"_DA(1)_",""EC"",",X=ECIEN
"RTN","ECMFDSSU",138,0)
 . D FILE^DICN
"RTN","ECMFDSSU",139,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN K DINUM
"RTN","ECMFDSSU",140,0)
 Q
"RTN","ECMFDSSU",141,0)
DSSU ;Used by the RPC broker to allocate or de-allocate DSS Units for a user
"RTN","ECMFDSSU",142,0)
 ;in file #200
"RTN","ECMFDSSU",143,0)
 ;     Variables passed in
"RTN","ECMFDSSU",144,0)
 ;       ECIEN   - User IEN in file #200
"RTN","ECMFDSSU",145,0)
 ;       ECD0..n - IEN of DSS Unit in file #724 to allocate/deallocate
"RTN","ECMFDSSU",146,0)
 ;       
"RTN","ECMFDSSU",147,0)
 ;
"RTN","ECMFDSSU",148,0)
 ;     Variable return
"RTN","ECMFDSSU",149,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #200^Message
"RTN","ECMFDSSU",150,0)
 ;
"RTN","ECMFDSSU",151,0)
 N EDU,ECERR,ECI,ECX,ECDSSU,DIC,DIK,DA,X,Y
"RTN","ECMFDSSU",152,0)
 S (EDU,ECERR)=0,ECIEN=$G(ECIEN)
"RTN","ECMFDSSU",153,0)
 I ECIEN="" S ^TMP($J,"ECMSG",1)="0^User missing" Q
"RTN","ECMFDSSU",154,0)
 D  I ECERR Q
"RTN","ECMFDSSU",155,0)
 . S DIC=200,DIC(0)="QNX",X=ECIEN D ^DIC D:Y<0
"RTN","ECMFDSSU",156,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^User Not on File"
"RTN","ECMFDSSU",157,0)
 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  S:@ECX'="" ECDSSU(@ECX)=""
"RTN","ECMFDSSU",158,0)
 F  S EDU=$O(^VA(200,ECIEN,"EC",EDU)) Q:'EDU  D
"RTN","ECMFDSSU",159,0)
 . I $D(ECDSSU(EDU)) K ECDSSU(EDU) Q
"RTN","ECMFDSSU",160,0)
 . K DA,DIK S DA(1)=ECIEN,DA=EDU,DIK="^VA(200,"_DA(1)_",""EC"","
"RTN","ECMFDSSU",161,0)
 . D ^DIK
"RTN","ECMFDSSU",162,0)
 ;add DSS Units for user
"RTN","ECMFDSSU",163,0)
 S EDU=0 F  S EDU=$O(ECDSSU(EDU)) Q:'EDU  D
"RTN","ECMFDSSU",164,0)
 . I '$D(^ECD(EDU,0)) Q
"RTN","ECMFDSSU",165,0)
 . K DIC,DD,DO S DIC(0)="L",DA(1)=ECIEN,DIC("P")=$P(^DD(200,720,0),U,2)
"RTN","ECMFDSSU",166,0)
 . S DINUM=EDU,DIC="^VA(200,"_DA(1)_",""EC"",",X=EDU
"RTN","ECMFDSSU",167,0)
 . D FILE^DICN
"RTN","ECMFDSSU",168,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN
"RTN","ECMFDSSU",169,0)
 Q
"RTN","ECMFDSSU",170,0)
 ;
"RTN","ECMFDSSU",171,0)
UPDSCRN ;131 Section added to remove default associated clinic from event capture screens for a specific DSS Unit
"RTN","ECMFDSSU",172,0)
 N LOC,CAT,PROC,DA,DIE,DR
"RTN","ECMFDSSU",173,0)
 S LOC=0 F  S LOC=$O(^ECJ("AP",LOC)) Q:'+LOC  S CAT="" F  S CAT=$O(^ECJ("AP",LOC,ECIEN,CAT)) Q:CAT=""  S PROC="" F  S PROC=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC)) Q:PROC=""  D
"RTN","ECMFDSSU",174,0)
 .S DA=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC,0)) Q:'+DA
"RTN","ECMFDSSU",175,0)
 .S DIE="^ECJ("
"RTN","ECMFDSSU",176,0)
 .S DR="55///@"
"RTN","ECMFDSSU",177,0)
 .D ^DIE
"RTN","ECMFDSSU",178,0)
 Q
"RTN","ECMFDSSU",179,0)
 ;
"RTN","ECMFDSSU",180,0)
FIXSCRNS ;131 Section added to inactivate existing event code screens
"RTN","ECMFDSSU",181,0)
 ;when category changed from yes to no.  Equivalent event code screens
"RTN","ECMFDSSU",182,0)
 ;without a category will either be reactivated or created, as needed
"RTN","ECMFDSSU",183,0)
 ;
"RTN","ECMFDSSU",184,0)
 N LOC,CAT,PROC,DR,DA,DIE,DSS,ECCH,ECL,ECD,ECC,ECP,ECST,ECSYN,ECVOL,ECAC,ECREAS,NODE
"RTN","ECMFDSSU",185,0)
 S LOC=0 F  S LOC=$O(^ECJ("AP",LOC)) Q:'+LOC  S CAT=0 F  S CAT=$O(^ECJ("AP",LOC,ECIEN,CAT)) Q:'+CAT  S PROC="" F  S PROC=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC)) Q:PROC=""  D
"RTN","ECMFDSSU",186,0)
 .S DA=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC,0)) Q:'+DA  ;Get record # of existing event code screen
"RTN","ECMFDSSU",187,0)
 .I $P(^ECJ(DA,0),U,2)'="" Q  ;Screen is already inactive, no action needed
"RTN","ECMFDSSU",188,0)
 .S DIE="^ECJ(",DR="1///"_$$DT^XLFDT D ^DIE ;Inactivate screen using today's date
"RTN","ECMFDSSU",189,0)
 .;Create or activate/update equivalent event code screen without a category
"RTN","ECMFDSSU",190,0)
 .S ECCH=LOC_"-"_ECIEN_"-"_0_"-"_PROC,DSS=ECIEN S ECIEN="" ;protecting ECIEN as it's used in another routine
"RTN","ECMFDSSU",191,0)
 .I $D(^ECJ("B",ECCH)) S ECIEN=$O(^ECJ("B",ECCH,0)) Q:'+ECIEN  ;Non-category event code screen exists, identify record number for updating
"RTN","ECMFDSSU",192,0)
 .S ECL=LOC,ECD=DSS,ECC=0,ECP=PROC,ECST="A"
"RTN","ECMFDSSU",193,0)
 .S NODE=$G(^ECJ(DA,"PRO")),ECSYN=$P(NODE,U,2),ECVOL=$P(NODE,U,3),ECAC=$P(NODE,U,4),ECREAS=$E($$GET1^DIQ(720.3,DA,56,"E"),1) ;Setting input variables needed for call to ECMFECS
"RTN","ECMFDSSU",194,0)
 .D FILE^ECMFECS ;File update or create new event code screen
"RTN","ECMFDSSU",195,0)
 .S ECIEN=DSS ;Reset ECIEN to DSS Unit IEN
"RTN","ECMFDSSU",196,0)
 Q
"RTN","ECPAT")
0^8^B50231689^B47879400
"RTN","ECPAT",1,0)
ECPAT ;BIR/MAM,JPW - Event Capture Patient Summary ;11/3/15  15:06
"RTN","ECPAT",2,0)
 ;;2.0;EVENT CAPTURE;**5,18,47,72,95,112,119,131**;8 May 96;Build 13
"RTN","ECPAT",3,0)
SET ; set ^TMP($J,"ECPAT")
"RTN","ECPAT",4,0)
 N ECPXD,EC725
"RTN","ECPAT",5,0)
 I $G(ECPTYP)'="E" I $Y+11>IOSL D PAGE I ECOUT Q  ;119
"RTN","ECPAT",6,0)
 S ECEC=$G(^ECH(ECFN,0))
"RTN","ECPAT",7,0)
 S ECL=+$P(ECEC,"^",4),ECC=+$P(ECEC,"^",8),ECP=$P(ECEC,"^",9),ECD=+$P(ECEC,"^",7),ECV=+$P(ECEC,"^",10)
"RTN","ECPAT",8,0)
 S ECU=$$GETPPRV^ECPRVMUT(ECFN,.ECUN),ECUN=$S(ECU:"UNKNOWN",1:$P(ECUN,"^",2))
"RTN","ECPAT",9,0)
 Q:ECP']""
"RTN","ECPAT",10,0)
 ;set default med spec and ord sect to administrative if blank
"RTN","ECPAT",11,0)
 S ECM=$S($P(ECEC,"^",6)]"":+$P(ECEC,"^",6),1:108),ECO=$S($P(ECEC,"^",12)]"":+$P(ECEC,"^",12),1:108)
"RTN","ECPAT",12,0)
 S ECMN=$S($P($G(^ECC(723,ECM,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",13,0)
 S ECON=$S($P($G(^ECC(723,ECO,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",14,0)
 S ECS=+$P(ECEC,"^",5),ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",15,0)
 S ECCN=$S($P($G(^EC(726,ECC,0)),"^")]"":$P(^(0),"^"),1:"None")
"RTN","ECPAT",16,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECPAT",17,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2)
"RTN","ECPAT",18,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,1:725)
"RTN","ECPAT",19,0)
 S ECCPT=$S(ECFILE=81:+ECP,1:$P($G(^EC(725,+ECP,0)),"^",5)),ECPXD=""
"RTN","ECPAT",20,0)
 I ECCPT'="" D
"RTN","ECPAT",21,0)
 . S ECPXD=$$CPT^ICPTCOD(ECCPT,$P(ECEC,"^",3)),ECCPT=$P(ECPXD,"^",2)
"RTN","ECPAT",22,0)
 . I ECCPT'="" S ECCPT=ECCPT_" "
"RTN","ECPAT",23,0)
 I ECFILE=81 S ECPN=$S($P(ECPXD,"^",3)]"":$P(ECPXD,"^",3),1:"UNKNOWN")
"RTN","ECPAT",24,0)
 I ECFILE=725 D
"RTN","ECPAT",25,0)
 .S EC725=$G(^EC(725,+ECP,0)),ECPN=$P(EC725,"^",2)_" "_$P(EC725,"^")
"RTN","ECPAT",26,0)
 S ECEPN=$S(ECFILE=81:ECPN,1:$P(EC725,U))_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"") ;119 Set export version of procedure name
"RTN","ECPAT",27,0)
 S ECPN=$J(ECCPT,6)_$E(ECPN,1,38)_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"")
"RTN","ECPAT",28,0)
 S ECDN=$S($P($G(^ECD(ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",29,0)
 S ECLN=$S($P($G(^DIC(4,ECL,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",30,0)
 S ECUN=$S(ECUN'="UNKNOWN":$P(ECUN,",",2)_" "_$P(ECUN,","),1:"UNKNOWN")
"RTN","ECPAT",31,0)
 S ECDT=$$FMTE^XLFDT(DATE)
"RTN","ECPAT",32,0)
 ;
"RTN","ECPAT",33,0)
 ;ALB/ESD - Add Procedure Reason to report
"RTN","ECPAT",34,0)
 N ECLNK,ECRAR ;112,119
"RTN","ECPAT",35,0)
 D GETS^DIQ(721,ECFN,"34;43;44",,"ECRAR") ;112 Get all reasons
"RTN","ECPAT",36,0)
 S ECPRSN=$G(ECRAR(721,ECFN_",",34)) S:ECPRSN="" ECPRSN="REASON NOT DEFINED" ;112
"RTN","ECPAT",37,0)
 S ECPRSN2=$G(ECRAR(721,ECFN_",",43)) ;112
"RTN","ECPAT",38,0)
 S ECPRSN3=$G(ECRAR(721,ECFN_",",44)) ;112
"RTN","ECPAT",39,0)
 ;
"RTN","ECPAT",40,0)
 ;Get Procedure CPT modifiers
"RTN","ECPAT",41,0)
 I $G(ECPTYP)="E" Q  ;119 Don't need modifiers for exportable version
"RTN","ECPAT",42,0)
 S ECMODF=0 K ECMOD
"RTN","ECPAT",43,0)
 I $O(^ECH(ECFN,"MOD",0))'="" S ECMODF=$$MOD^ECUTL(ECFN,"E",.ECMOD)
"RTN","ECPAT",44,0)
 I $D(ECY) DO
"RTN","ECPAT",45,0)
 .W !!,ECDT,?32,ECCN,?87,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",46,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",47,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",48,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?91,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",49,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECSN,?87,ECMN,! ;112,131
"RTN","ECPAT",50,0)
 .I '$D(ECRY) W ?32,ECON,?87,ECUN ;119
"RTN","ECPAT",51,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",52,0)
 ..W ECPRSN,?32,ECON,?87,ECUN ;112
"RTN","ECPAT",53,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",54,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",55,0)
 I $D(ECN) DO
"RTN","ECPAT",56,0)
 .W !!,ECDT,?32,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",57,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",58,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",59,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?36,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",60,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECSN,?87,ECMN,! ;112,131
"RTN","ECPAT",61,0)
 .I '$D(ECRY) W ?32,ECON,?87,ECUN ;119
"RTN","ECPAT",62,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",63,0)
 ..W ECPRSN,?32,ECON,?87,ECUN ;112
"RTN","ECPAT",64,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",65,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",66,0)
 Q
"RTN","ECPAT",67,0)
PAT ; entry point
"RTN","ECPAT",68,0)
 K DIC S DIC=2,DIC(0)="QEAMZ",DIC("A")="Select Patient: " D ^DIC K DIC G:Y<0 END S ECDFN=+Y,ECPAT=$P(Y,"^",2)
"RTN","ECPAT",69,0)
DATE K %DT S %DT="AEX",%DT("A")="Start with Date:  " D ^%DT G:Y<0 END S ECSD=Y,%DT("A")="End with Date:  " D ^%DT G:Y<0 END S ECED=Y I ECED<ECSD W !,"End date must be after start date",! G DATE
"RTN","ECPAT",70,0)
 S ECDATE=$$FMTE^XLFDT(ECSD)_"^"_$$FMTE^XLFDT(ECED),ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECPAT",71,0)
 D REASON^ECRUTL ;* Prompt to report Procedure Reasons
"RTN","ECPAT",72,0)
 K IOP,%ZIS,POP,IO("Q") S %ZIS("A")="Select Device: ",%ZIS="QM" W !!,"This report is designed to use a 132 column format.",! D ^%ZIS G:POP END
"RTN","ECPAT",73,0)
 I $D(IO("Q")) S:$D(ECRY) ZTSAVE("ECRY")=""
"RTN","ECPAT",74,0)
 I $D(IO("Q")) K IO("Q") S (ZTSAVE("ECDFN"),ZTSAVE("ECPAT"),ZTSAVE("ECDATE"),ZTSAVE("ECED"),ZTSAVE("ECSD"))="",ZTDESC="EVENT CAPTURE PATIENT SUMMARY",ZTRTN="SUM^ECPAT",ZTIO=ION D ^%ZTLOAD,HOME^%ZIS G END
"RTN","ECPAT",75,0)
SUM ; entry when queued
"RTN","ECPAT",76,0)
 N ECPRSN,ECPRSN2,ECPRSN3,%H ;112,119
"RTN","ECPAT",77,0)
 I $G(ECPTYP)="E" D EXPORT,^ECKILL Q  ;119
"RTN","ECPAT",78,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECPAT",79,0)
 U IO S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE W:$Y @IOF W !!,"No Data for "_ECPAT_" during the time selected." G END
"RTN","ECPAT",80,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",81,0)
 S DATE=ECSD,(ECFN,ECOUT)=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)!(ECOUT)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN!(ECOUT)  D SET
"RTN","ECPAT",82,0)
 D FOOTER  ;for last page
"RTN","ECPAT",83,0)
END I $D(ECGUI) D ^ECKILL Q
"RTN","ECPAT",84,0)
 W ! I $D(ECOUT),'ECOUT D
"RTN","ECPAT",85,0)
 . I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue  " R X:DTIME
"RTN","ECPAT",86,0)
 W @IOF D ^%ZISC D ^ECKILL S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECPAT",87,0)
 Q
"RTN","ECPAT",88,0)
HDR ; print heading
"RTN","ECPAT",89,0)
 ;
"RTN","ECPAT",90,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",91,0)
 W:$Y @IOF
"RTN","ECPAT",92,0)
 W !,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?32,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?32,"Run Date : ",ECRDT
"RTN","ECPAT",93,0)
 W !,"PROCEDURE DATE/TIME",?32,"CATEGORY",?87,"PROCEDURE",!,?87,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)",!,?32,"SERVICE",?87,"SECTION" ;112,131
"RTN","ECPAT",94,0)
 W !
"RTN","ECPAT",95,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",96,0)
 W ?32,"ORDERING SECTION",?87,"PROVIDER",! F LINE=1:1:132 W "-" ;112
"RTN","ECPAT",97,0)
 W !
"RTN","ECPAT",98,0)
 Q
"RTN","ECPAT",99,0)
PAGE ; end of page
"RTN","ECPAT",100,0)
 I $G(X)'["?" D FOOTER
"RTN","ECPAT",101,0)
 S X="" I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue, or ^ to quit   " R X:DTIME I '$T!(X="^") S ECOUT=1 Q
"RTN","ECPAT",102,0)
 I X["?" W !!,"If you want to continue with this report, press <RET>.  Entering an ^ will",!,"exit you from this option." G PAGE
"RTN","ECPAT",103,0)
 D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",104,0)
 Q
"RTN","ECPAT",105,0)
HDR1 ; print heading without categories
"RTN","ECPAT",106,0)
 ;
"RTN","ECPAT",107,0)
 ;ALB/ESD - Add Run Date to header
"RTN","ECPAT",108,0)
 W @IOF,!!,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?36,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?36,"Run Date : ",ECRDT
"RTN","ECPAT",109,0)
 ;
"RTN","ECPAT",110,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",111,0)
 W !!,"PROCEDURE DATE/TIME",?32,"PROCEDURE(VOLUME)",!,?32,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)",!,?32,"SERVICE",?87,"SECTION" ;112,131
"RTN","ECPAT",112,0)
 W !
"RTN","ECPAT",113,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",114,0)
 W ?32,"ORDERING SECTION",?87,"PROVIDER",! F LINE=1:1:132 W "-" ;112
"RTN","ECPAT",115,0)
 W !
"RTN","ECPAT",116,0)
 Q
"RTN","ECPAT",117,0)
 ;
"RTN","ECPAT",118,0)
FOOTER ;print page footer
"RTN","ECPAT",119,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECPAT",120,0)
 W !?4,"and/or a combination of these."
"RTN","ECPAT",121,0)
 Q
"RTN","ECPAT",122,0)
 ;
"RTN","ECPAT",123,0)
BRO ;ask prt with category or without
"RTN","ECPAT",124,0)
 S ECN=1
"RTN","ECPAT",125,0)
 Q
"RTN","ECPAT",126,0)
 ;
"RTN","ECPAT",127,0)
EXPORT ;Section added in 119
"RTN","ECPAT",128,0)
 N DATE,CNT,ECEPN
"RTN","ECPAT",129,0)
 S CNT=1
"RTN","ECPAT",130,0)
 S ^TMP($J,"ECRPT",CNT)="PATIENT NAME^SSN^PROCEDURE DATE/TIME^LOCATION^DSS UNIT IEN^DSS UNIT NAME^CPT CODE^PROCEDURE CODE^PROCEDURE NAME^VOLUME^"_$S($D(ECRY):"REASON #1^REASON #2^REASON #3^",1:"")_"SERVICE^SECTION^ORDERING SECTION^PROVIDER" ;131
"RTN","ECPAT",131,0)
 S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE Q
"RTN","ECPAT",132,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO
"RTN","ECPAT",133,0)
 S DATE=ECSD,ECFN=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN  D
"RTN","ECPAT",134,0)
 .D SET
"RTN","ECPAT",135,0)
 .S CNT=CNT+1,^TMP($J,"ECRPT",CNT)=ECPAT_U_$E($$GET1^DIQ(2,(ECDFN_","),.09),6,9)_U_ECDT_U_ECLN_U_ECD_U_ECDN_U_$E(ECCPT,1,5) ;131
"RTN","ECPAT",136,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$S(ECFILE=725:$P($G(^EC(725,+ECP,0)),U,2),1:"")_U_ECEPN_U_ECV_U_$S($D(ECRY):ECPRSN_U_ECPRSN2_U_ECPRSN3_U,1:"")_ECSN_U_ECMN_U_ECON_U_ECUN
"RTN","ECRDSSA")
0^24^B124134262^B123826239
"RTN","ECRDSSA",1,0)
ECRDSSA ;ALB/RPM - DSS Unit Activity Report ;3/10/16  16:08
"RTN","ECRDSSA",2,0)
 ;;2.0;EVENT CAPTURE;**95,104,112,119,126,131**;8 May 96;Build 13
"RTN","ECRDSSA",3,0)
 ;
"RTN","ECRDSSA",4,0)
EN ;Get location(s), DSS Unit(s), sort type, start & end dates, device
"RTN","ECRDSSA",5,0)
 ;
"RTN","ECRDSSA",6,0)
 N ECLOC,ECDSSU,ECSORT,ECSTDT,ECENDDT ;112
"RTN","ECRDSSA",7,0)
 I '$$ASKLOC^ECRUTL G ENQ
"RTN","ECRDSSA",8,0)
 I '$$ASKDSS^ECRUTL G ENQ
"RTN","ECRDSSA",9,0)
 I '$$ASKSRT(.ECSORT) G ENQ
"RTN","ECRDSSA",10,0)
 I '$$STDT^ECRUTL G ENQ
"RTN","ECRDSSA",11,0)
 I '$$ENDDT^ECRUTL(ECSTDT) G ENQ
"RTN","ECRDSSA",12,0)
 I $$ASKDEV D STRPT^ECRDSSA
"RTN","ECRDSSA",13,0)
ENQ Q
"RTN","ECRDSSA",14,0)
 ;
"RTN","ECRDSSA",15,0)
STRPT ;Main entry point
"RTN","ECRDSSA",16,0)
 N ECCRT  ;is CRT?
"RTN","ECRDSSA",17,0)
 N ECPAGE  ;page cnt
"RTN","ECRDSSA",18,0)
 S ECPAGE=0
"RTN","ECRDSSA",19,0)
 S ECCRT=$S($E(IOST,1,2)="C-":1,1:0)
"RTN","ECRDSSA",20,0)
 I $G(ECPTYP)'="E" U IO ;119 open device if not exporting
"RTN","ECRDSSA",21,0)
 K ^TMP("ECRPT",$J)
"RTN","ECRDSSA",22,0)
 D FNDREC(ECSORT)
"RTN","ECRDSSA",23,0)
 D PRINT(ECSORT)
"RTN","ECRDSSA",24,0)
 K ^TMP("ECRPT",$J) D ^ECKILL ;119
"RTN","ECRDSSA",25,0)
 Q
"RTN","ECRDSSA",26,0)
 ;
"RTN","ECRDSSA",27,0)
FNDREC(ECSRT) ;Loop through "ADT" xref of EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",28,0)
 ;  Input:
"RTN","ECRDSSA",29,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",30,0)
 ;
"RTN","ECRDSSA",31,0)
 ;  Output: none
"RTN","ECRDSSA",32,0)
 ;
"RTN","ECRDSSA",33,0)
 N ECNT   ;record cnt
"RTN","ECRDSSA",34,0)
 N ECL     ;location cnt
"RTN","ECRDSSA",35,0)
 N ECD     ;DSS unit cnt
"RTN","ECRDSSA",36,0)
 N ECDFN   ;DFN
"RTN","ECRDSSA",37,0)
 N ECLOCF  ;Location IEN
"RTN","ECRDSSA",38,0)
 N ECDSSF  ;DSS unit IEN
"RTN","ECRDSSA",39,0)
 N ECDT    ;date index
"RTN","ECRDSSA",40,0)
 N ECREC   ;"0" node
"RTN","ECRDSSA",41,0)
 N ECIEN   ;IEN of file 721 ;patch 119
"RTN","ECRDSSA",42,0)
 S ECNT=0
"RTN","ECRDSSA",43,0)
 ;
"RTN","ECRDSSA",44,0)
 S ECL=0
"RTN","ECRDSSA",45,0)
 F  S ECL=$O(ECLOC(ECL)) Q:'ECL  S ECLOCF=+$P(ECLOC(ECL),U) D
"RTN","ECRDSSA",46,0)
 . S ^TMP("ECRPT",$J,ECLOCF)=0  ;initialize location counter
"RTN","ECRDSSA",47,0)
 . S ECD=0
"RTN","ECRDSSA",48,0)
 . F  S ECD=$O(ECDSSU(ECD)) Q:'ECD  S ECDSSF=+$P(ECDSSU(ECD),U) D
"RTN","ECRDSSA",49,0)
 . . S ^TMP("ECRPT",$J,ECLOCF,ECDSSF)=0  ;initialize DSS Unit counter
"RTN","ECRDSSA",50,0)
 . S ECDFN=0
"RTN","ECRDSSA",51,0)
 . F  S ECDFN=+$O(^ECH("ADT",ECLOCF,ECDFN)) Q:'ECDFN  D
"RTN","ECRDSSA",52,0)
 . . S ECD=0
"RTN","ECRDSSA",53,0)
 . . F  S ECD=$O(ECDSSU(ECD)) Q:'ECD  S ECDSSF=+$P(ECDSSU(ECD),U) D
"RTN","ECRDSSA",54,0)
 . . . S ECDT=ECSTDT
"RTN","ECRDSSA",55,0)
 . . . F  S ECDT=+$O(^ECH("ADT",ECLOCF,ECDFN,ECDSSF,ECDT)) Q:'ECDT!(ECDT>ECENDDT)  D
"RTN","ECRDSSA",56,0)
 . . . . S ECIEN=0
"RTN","ECRDSSA",57,0)
 . . . . F  S ECIEN=+$O(^ECH("ADT",ECLOCF,ECDFN,ECDSSF,ECDT,ECIEN)) Q:'ECIEN  D
"RTN","ECRDSSA",58,0)
 . . . . . I $P($G(^ECH(ECIEN,0)),U,7)=ECDSSF D BLDTMP(ECIEN,ECSRT,.ECNT)
"RTN","ECRDSSA",59,0)
 Q
"RTN","ECRDSSA",60,0)
 ;
"RTN","ECRDSSA",61,0)
BLDTMP(ECIEN,ECSRT,ECCNT) ;add record to list
"RTN","ECRDSSA",62,0)
 ;  Input:
"RTN","ECRDSSA",63,0)
 ;    ECIEN - pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",64,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",65,0)
 ;    ECCNT - record counter
"RTN","ECRDSSA",66,0)
 ;
"RTN","ECRDSSA",67,0)
 ;  Output:
"RTN","ECRDSSA",68,0)
 ;    ^TMP("ECRPT",$J,location,DSS unit,sort key1,sort key2,count)
"RTN","ECRDSSA",69,0)
 ;
"RTN","ECRDSSA",70,0)
 N ECLOCA  ;location
"RTN","ECRDSSA",71,0)
 N ECDSS  ;DSS unit
"RTN","ECRDSSA",72,0)
 N ECIENS  ;IENS
"RTN","ECRDSSA",73,0)
 N ECKEY  ;sort key array
"RTN","ECRDSSA",74,0)
 N ECREC  ;record string
"RTN","ECRDSSA",75,0)
 N ECERR  ;FM error
"RTN","ECRDSSA",76,0)
 N ECDT  ;date
"RTN","ECRDSSA",77,0)
 I +$G(ECIEN)>0,$$GETKEYS(ECSRT,ECIEN,.ECKEY) D
"RTN","ECRDSSA",78,0)
 . S ECCNT=+$G(ECCNT)+1
"RTN","ECRDSSA",79,0)
 . S ECIENS=ECIEN_","
"RTN","ECRDSSA",80,0)
 . S ECREC=""
"RTN","ECRDSSA",81,0)
 . D GETS^DIQ(721,ECIENS,"1;2;3;6;7;8;9;10;20;29","IE","ECREC","ECERR") ;126 Added field 7, category, to list of data
"RTN","ECRDSSA",82,0)
 . S ECLOCA=+$G(ECREC(721,ECIENS,3,"I"))
"RTN","ECRDSSA",83,0)
 . S ECDSS=+$G(ECREC(721,ECIENS,6,"I"))
"RTN","ECRDSSA",84,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,1,"E")),1,30)_"^"  ;pt name
"RTN","ECRDSSA",85,0)
 . S ECREC=ECREC_$E($$GETSSN(ECIEN),1,10)_"^"              ;ssn
"RTN","ECRDSSA",86,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,29,"I")),1)_"^"    ;in/out
"RTN","ECRDSSA",87,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,2,"I")),1,13)_"^"  ;dt/tm
"RTN","ECRDSSA",88,0)
 . S ECDT=$P($G(ECREC(721,ECIENS,2,"I")),".",1)
"RTN","ECRDSSA",89,0)
 . S ECREC=ECREC_$E($$GETPROC($G(ECREC(721,ECIENS,8,"I"))),1,5)_"^"   ;proc code
"RTN","ECRDSSA",90,0)
 . S ECREC=ECREC_$$GETPRNM($G(ECREC(721,ECIENS,8,"I")),ECDT)_"^"  ;126, get full proc name
"RTN","ECRDSSA",91,0)
 . S ECREC=ECREC_$$GETPSYN(ECLOCA,ECDSS,+$G(ECREC(721,ECIENS,7,"I")),$G(ECREC(721,ECIENS,8,"I")))_"^" ;126 Get procedure synonym
"RTN","ECRDSSA",92,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,9,"I")),1,2)_"^"   ;vol
"RTN","ECRDSSA",93,0)
 . S ECREC=ECREC_$E($$GETPROV(ECIEN),1,30)_"^"  ;provider
"RTN","ECRDSSA",94,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,20,"E")),1,8)      ;dx 131, allow more space
"RTN","ECRDSSA",95,0)
 . S ^TMP("ECRPT",$J,ECLOCA,ECDSS,ECKEY(1),ECKEY(2),ECNT)=ECREC
"RTN","ECRDSSA",96,0)
 . S ^TMP("ECRPT",$J,ECLOCA)=$G(^TMP("ECRPT",$J,ECLOCA))+1
"RTN","ECRDSSA",97,0)
 . S ^TMP("ECRPT",$J,ECLOCA,ECDSS)=$G(^TMP("ECRPT",$J,ECLOCA,ECDSS))+1
"RTN","ECRDSSA",98,0)
 Q
"RTN","ECRDSSA",99,0)
 ;
"RTN","ECRDSSA",100,0)
PRINT(ECSRT) ;loop results array and format output
"RTN","ECRDSSA",101,0)
 ;  Input:
"RTN","ECRDSSA",102,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",103,0)
 ;
"RTN","ECRDSSA",104,0)
 ;  Output: none
"RTN","ECRDSSA",105,0)
 ;
"RTN","ECRDSSA",106,0)
 N ECCLOC  ;current location
"RTN","ECRDSSA",107,0)
 N ECPLOC  ;previous location
"RTN","ECRDSSA",108,0)
 N ECLOCNM  ;location name
"RTN","ECRDSSA",109,0)
 N ECCDSS  ;current DSS unit
"RTN","ECRDSSA",110,0)
 N ECPDSS  ;previous DSS unit
"RTN","ECRDSSA",111,0)
 N ECDSSNM  ;DSS unit name
"RTN","ECRDSSA",112,0)
 N ECCNT   ;record count
"RTN","ECRDSSA",113,0)
 N ECDAT   ;procedure date/time
"RTN","ECRDSSA",114,0)
 N ECRDT   ;run date
"RTN","ECRDSSA",115,0)
 N ECFDT   ;from date
"RTN","ECRDSSA",116,0)
 N ECTDT   ;to date
"RTN","ECRDSSA",117,0)
 N ECKEY1  ;sort key 1
"RTN","ECRDSSA",118,0)
 N ECKEY2  ;sort key 2
"RTN","ECRDSSA",119,0)
 N ECSRTBY  ;sort type text
"RTN","ECRDSSA",120,0)
 N ECQUIT  ;user quit indicator
"RTN","ECRDSSA",121,0)
 N ECREC   ;tmp record data
"RTN","ECRDSSA",122,0)
 N CNT,PIECE ;119 array count for data, record piece
"RTN","ECRDSSA",123,0)
 I $G(ECPTYP)="E" S ^TMP($J,"ECRPT",1)="LOCATION^DSS UNIT (IEN #)^PATIENT^SSN^I/O^DATE/TIME^PROCEDURE CODE^PROCEDURE NAME^SYNONYM^VOLUME^PRIMARY PROVIDER^DIAGNOSIS",CNT=1 ;119,126 Export header
"RTN","ECRDSSA",124,0)
 I '$D(^TMP("ECRPT",$J)) G PRINTQ
"RTN","ECRDSSA",125,0)
 S ECRDT=$$FMTE^XLFDT($$NOW^XLFDT,"5DZ")
"RTN","ECRDSSA",126,0)
 S ECFDT=$$FMTE^XLFDT($P(ECSTDT+.0001,"."),"5DZ")
"RTN","ECRDSSA",127,0)
 S ECTDT=$$FMTE^XLFDT($P(ECENDDT,"."),"5DZ")
"RTN","ECRDSSA",128,0)
 S ECSRTBY=$S(ECSRT="P":"Patient Name",ECSRT="R":"Provider Name",ECSRT="S":"Patient SSN",1:"")
"RTN","ECRDSSA",129,0)
 S (ECCLOC,ECPLOC,ECQUIT)=0
"RTN","ECRDSSA",130,0)
 F  S ECCLOC=$O(^TMP("ECRPT",$J,ECCLOC)) Q:'ECCLOC!(ECQUIT)  D
"RTN","ECRDSSA",131,0)
 . I ECCLOC'=ECPLOC D  ;location changed
"RTN","ECRDSSA",132,0)
 . . S ECPLOC=ECCLOC
"RTN","ECRDSSA",133,0)
 . . S ECLOCNM=$$GETLOCN(ECCLOC,.ECLOC)
"RTN","ECRDSSA",134,0)
 . . I $G(ECPTYP)'="E" I $O(^TMP("ECRPT",$J,ECCLOC,0))>0 D:ECPAGE>0 PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY) ;119
"RTN","ECRDSSA",135,0)
 . I $G(ECPTYP)'="E" I $G(^TMP("ECRPT",$J,ECCLOC))=0 D  Q  ;119
"RTN","ECRDSSA",136,0)
 . . W !!,"    ** No records found on Location that match selection criteria"
"RTN","ECRDSSA",137,0)
 . S (ECCDSS,ECPDSS)=0
"RTN","ECRDSSA",138,0)
 . F  S ECCDSS=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS)) Q:'ECCDSS!(ECQUIT)  D
"RTN","ECRDSSA",139,0)
 . . I ECCDSS'=ECPDSS D  Q:ECQUIT  ;dss unit changed
"RTN","ECRDSSA",140,0)
 . . . S ECPDSS=ECCDSS
"RTN","ECRDSSA",141,0)
 . . . S ECDSSNM=$$GETDSSN(ECCDSS,.ECDSSU)
"RTN","ECRDSSA",142,0)
 . . . I $G(ECPTYP)'="E" I $Y>(IOSL-10) D PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY) ;119
"RTN","ECRDSSA",143,0)
 . . . I $G(ECPTYP)'="E" D DSSHDR(ECCDSS,ECDSSNM) ;119
"RTN","ECRDSSA",144,0)
 . . I $G(ECPTYP)'="E" I $G(^TMP("ECRPT",$J,ECCLOC,ECCDSS))=0 D  Q  ;119
"RTN","ECRDSSA",145,0)
 . . . W !,"** No records found on DSS Unit that match selection criteria"
"RTN","ECRDSSA",146,0)
 . . S ECKEY1=""
"RTN","ECRDSSA",147,0)
 . . F  S ECKEY1=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1)) Q:ECKEY1=""!(ECQUIT)  D
"RTN","ECRDSSA",148,0)
 . . . S ECKEY2=""
"RTN","ECRDSSA",149,0)
 . . . F  S ECKEY2=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2)) Q:ECKEY2=""!(ECQUIT)  D
"RTN","ECRDSSA",150,0)
 . . . . S ECCNT=0
"RTN","ECRDSSA",151,0)
 . . . . F  S ECCNT=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2,ECCNT)) Q:'ECCNT!(ECQUIT)  D
"RTN","ECRDSSA",152,0)
 . . . . . I $G(ECPTYP)'="E" I $Y>(IOSL-7) D PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY),DSSHDR(ECCDSS,ECDSSNM) W " (cont'd)" ;119
"RTN","ECRDSSA",153,0)
 . . . . . S ECREC=^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2,ECCNT)
"RTN","ECRDSSA",154,0)
 . . . . . I $G(ECPTYP)="E" S CNT=CNT+1 S ^TMP($J,"ECRPT",CNT)=ECLOCNM_U_ECDSSNM_"(IEN #"_ECCDSS_")" D  Q  ;119
"RTN","ECRDSSA",155,0)
 . . . . . . F PIECE=1:1:10 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$S(PIECE'=4:$P(ECREC,U,PIECE),1:$$FMTE^XLFDT($P(ECREC,U,PIECE),"2MZ")) ;119,126
"RTN","ECRDSSA",156,0)
 . . . . . W !,$P(ECREC,U,1)  ;name
"RTN","ECRDSSA",157,0)
 . . . . . W ?27,$P(ECREC,U,2)  ;126 ssn
"RTN","ECRDSSA",158,0)
 . . . . . W ?36,$P(ECREC,U,3)  ;126 inpt/outpt
"RTN","ECRDSSA",159,0)
 . . . . . S ECDAT=$$FMTE^XLFDT($P(ECREC,U,4),"2MZ")
"RTN","ECRDSSA",160,0)
 . . . . . W ?40,$P(ECDAT,":")_$P(ECDAT,":",2)  ;126 dt/tm
"RTN","ECRDSSA",161,0)
 . . . . . W ?54,$P(ECREC,U,5)  ;126 proc code
"RTN","ECRDSSA",162,0)
 . . . . . W ?60,$P(ECREC,U,6)  ;126 proc name
"RTN","ECRDSSA",163,0)
 . . . . . W ?112,$P(ECREC,U,8)  ;119,126 vol
"RTN","ECRDSSA",164,0)
 . . . . . W ?118,$P(ECREC,U,10)  ;126 dx
"RTN","ECRDSSA",165,0)
 . . . . . W !?4,$P(ECREC,U,9) ;126 Provider
"RTN","ECRDSSA",166,0)
 . . . . . W ?60,$P(ECREC,U,7) ;126 Synonym
"RTN","ECRDSSA",167,0)
 I $G(ECPTYP)'="E" I 'ECQUIT D PAUSE ;119
"RTN","ECRDSSA",168,0)
PRINTQ Q
"RTN","ECRDSSA",169,0)
 ;
"RTN","ECRDSSA",170,0)
HDR(ECLOCN,ECRDT,ECFDT,ECTDT,ECSRT) ;Report header
"RTN","ECRDSSA",171,0)
 ;  Input:
"RTN","ECRDSSA",172,0)
 ;    ECLOCN - location name
"RTN","ECRDSSA",173,0)
 ;    ECRDT - run date
"RTN","ECRDSSA",174,0)
 ;    EDFDT - from date
"RTN","ECRDSSA",175,0)
 ;    EDTDT - to date
"RTN","ECRDSSA",176,0)
 ;    ECSRT - sort text
"RTN","ECRDSSA",177,0)
 ;
"RTN","ECRDSSA",178,0)
 ;  Output:  none
"RTN","ECRDSSA",179,0)
 ;
"RTN","ECRDSSA",180,0)
 I ECCRT!(ECPAGE) W @IOF
"RTN","ECRDSSA",181,0)
 S ECPAGE=ECPAGE+1
"RTN","ECRDSSA",182,0)
 W !,?11,"EVENT CAPTURE DSS UNIT ACTIVITY REPORT"
"RTN","ECRDSSA",183,0)
 W ?58,"Run Date: ",ECRDT
"RTN","ECRDSSA",184,0)
 W ?109,"Page: ",ECPAGE
"RTN","ECRDSSA",185,0)
 W !!,?13,"For Location ",ECLOCN
"RTN","ECRDSSA",186,0)
 W !,?13,"From "_ECFDT_" through "_ECTDT
"RTN","ECRDSSA",187,0)
 W !,?13,"Sorted by ",ECSRT
"RTN","ECRDSSA",188,0)
 W !!,"Patient",?27,"SSN",?36,"I/O",?40,"Date/Time",?54,"Procedure",?112,"Vol",?118,"Primary" ;126
"RTN","ECRDSSA",189,0)
 W !?54,"Code",?60,"Name",?118,"Diagnosis" ;126
"RTN","ECRDSSA",190,0)
 W !?4,"Primary Provider",?60,"Synonym",!,$$REPEAT^XLFSTR("-",132) ;126
"RTN","ECRDSSA",191,0)
 Q
"RTN","ECRDSSA",192,0)
 ;
"RTN","ECRDSSA",193,0)
DSSHDR(ECDSS,ECDSSNM) ;DSS header
"RTN","ECRDSSA",194,0)
 ;  Input:
"RTN","ECRDSSA",195,0)
 ;    ECDSS - DSS unit
"RTN","ECRDSSA",196,0)
 ;    ECDSSNM - DSS unit name
"RTN","ECRDSSA",197,0)
 ;
"RTN","ECRDSSA",198,0)
 ;  Output:  none
"RTN","ECRDSSA",199,0)
 ;
"RTN","ECRDSSA",200,0)
 W !!,"DSS Unit: ",ECDSSNM," (IEN #",ECDSS,")"
"RTN","ECRDSSA",201,0)
 Q
"RTN","ECRDSSA",202,0)
 ;
"RTN","ECRDSSA",203,0)
PAUSE ;page break
"RTN","ECRDSSA",204,0)
 N DIR,DIRUT,DUOUT
"RTN","ECRDSSA",205,0)
 D FOOTER
"RTN","ECRDSSA",206,0)
 Q:'ECCRT
"RTN","ECRDSSA",207,0)
 I IOSL<30 F  W ! Q:$Y>(IOSL-7)
"RTN","ECRDSSA",208,0)
 W !
"RTN","ECRDSSA",209,0)
 S DIR(0)="E"
"RTN","ECRDSSA",210,0)
 D ^DIR
"RTN","ECRDSSA",211,0)
 I $D(DIRUT)!($D(DUOUT)) S ECQUIT=1
"RTN","ECRDSSA",212,0)
 Q
"RTN","ECRDSSA",213,0)
 ;
"RTN","ECRDSSA",214,0)
FOOTER ;page footer
"RTN","ECRDSSA",215,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECRDSSA",216,0)
 W " and/or a combination of these." ;149
"RTN","ECRDSSA",217,0)
 Q
"RTN","ECRDSSA",218,0)
 ;
"RTN","ECRDSSA",219,0)
GETLOCN(ECLOCA,ECLOC) ;get location name
"RTN","ECRDSSA",220,0)
 ;  Input:
"RTN","ECRDSSA",221,0)
 ;    ECLOCA - location
"RTN","ECRDSSA",222,0)
 ;    ECLOC - array of selected locations
"RTN","ECRDSSA",223,0)
 ;
"RTN","ECRDSSA",224,0)
 ;  Output:
"RTN","ECRDSSA",225,0)
 ;   Function value - returns location name on success; "" on failure
"RTN","ECRDSSA",226,0)
 ;
"RTN","ECRDSSA",227,0)
 N ECI
"RTN","ECRDSSA",228,0)
 N ECLOCNM
"RTN","ECRDSSA",229,0)
 S ECLOCNM=""
"RTN","ECRDSSA",230,0)
 I +$G(ECLOCA)>0 D
"RTN","ECRDSSA",231,0)
 . S ECI=0
"RTN","ECRDSSA",232,0)
 . F  S ECI=$O(ECLOC(ECI)) Q:'ECI!(ECLOCNM'="")  D
"RTN","ECRDSSA",233,0)
 . . I $P(ECLOC(ECI),U)=ECLOCA S ECLOCNM=$P(ECLOC(ECI),U,2)
"RTN","ECRDSSA",234,0)
 Q ECLOCNM
"RTN","ECRDSSA",235,0)
 ;
"RTN","ECRDSSA",236,0)
GETDSSN(ECDSS,ECDSSU) ;-get DSS unit name
"RTN","ECRDSSA",237,0)
 ;  Input:
"RTN","ECRDSSA",238,0)
 ;    ECDSS - DSS unit
"RTN","ECRDSSA",239,0)
 ;    ECDSSU - array of selected DSS units
"RTN","ECRDSSA",240,0)
 ;
"RTN","ECRDSSA",241,0)
 ;  Output:
"RTN","ECRDSSA",242,0)
 ;   Function value - returns DSS unit name on success; "" on failure
"RTN","ECRDSSA",243,0)
 ;
"RTN","ECRDSSA",244,0)
 N ECI
"RTN","ECRDSSA",245,0)
 N ECDSSNM
"RTN","ECRDSSA",246,0)
 S ECDSSNM=""
"RTN","ECRDSSA",247,0)
 I +$G(ECDSS)>0 D
"RTN","ECRDSSA",248,0)
 . S ECI=0
"RTN","ECRDSSA",249,0)
 . F  S ECI=$O(ECDSSU(ECI)) Q:'ECI!(ECDSSNM'="")  D
"RTN","ECRDSSA",250,0)
 . . I $P(ECDSSU(ECI),U)=ECDSS S ECDSSNM=$P(ECDSSU(ECI),U,2)
"RTN","ECRDSSA",251,0)
 Q ECDSSNM
"RTN","ECRDSSA",252,0)
 ;
"RTN","ECRDSSA",253,0)
GETKEYS(ECSRT,ECIEN,ECKEYS) ;get sort keys based on sort type
"RTN","ECRDSSA",254,0)
 ;  Input:
"RTN","ECRDSSA",255,0)
 ;    ECSRT - (required) sort type indicator (P, S, R)
"RTN","ECRDSSA",256,0)
 ;    ECIEN - (required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",257,0)
 ;    
"RTN","ECRDSSA",258,0)
 ;  Output:
"RTN","ECRDSSA",259,0)
 ;    ECKEYS - (pass by reference) array of sort keys
"RTN","ECRDSSA",260,0)
 ;    Function value - returns 1 on success;0 on failure
"RTN","ECRDSSA",261,0)
 ;
"RTN","ECRDSSA",262,0)
 N ECRSLT  ;function value
"RTN","ECRDSSA",263,0)
 S ECRSLT=0
"RTN","ECRDSSA",264,0)
 S (ECKEYS(1),ECKEYS(2))=""
"RTN","ECRDSSA",265,0)
 I $G(ECSRT)'="",+$G(ECIEN)>0 D
"RTN","ECRDSSA",266,0)
 . I ECSRT="P" D
"RTN","ECRDSSA",267,0)
 . . S ECKEYS(1)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",268,0)
 . . S ECKEYS(2)=$E($$GETSSN(ECIEN),1,9)  ;ssn
"RTN","ECRDSSA",269,0)
 . I ECSRT="R" D
"RTN","ECRDSSA",270,0)
 . . S ECKEYS(1)=$$GETPROV(ECIEN)  ;provider
"RTN","ECRDSSA",271,0)
 . . I ECKEYS(1)="" S ECKEYS(1)=" "  ;missing provider sorts to top
"RTN","ECRDSSA",272,0)
 . . S ECKEYS(2)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",273,0)
 . I ECSRT="S" D
"RTN","ECRDSSA",274,0)
 . . S ECKEYS(1)=$E($$GETSSN(ECIEN),1,9)  ;ssn
"RTN","ECRDSSA",275,0)
 . . S ECKEYS(2)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",276,0)
 . I ECKEYS(1)'="",ECKEYS(2)'="" S ECRSLT=1
"RTN","ECRDSSA",277,0)
 Q ECRSLT
"RTN","ECRDSSA",278,0)
 ;
"RTN","ECRDSSA",279,0)
GETSSN(ECIEN) ;get patient SSN
"RTN","ECRDSSA",280,0)
 ;  Input:
"RTN","ECRDSSA",281,0)
 ;    ECIEN - (required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",282,0)
 ;    
"RTN","ECRDSSA",283,0)
 ;  Output:
"RTN","ECRDSSA",284,0)
 ;    Function value - returns patient's SSN on success; "" on failure
"RTN","ECRDSSA",285,0)
 ;
"RTN","ECRDSSA",286,0)
 N DFN,VADM,VAERR  ;VADPT variables
"RTN","ECRDSSA",287,0)
 I +$G(ECIEN)>0 D
"RTN","ECRDSSA",288,0)
 . S DFN=$$GET1^DIQ(721,ECIEN_",",1,"I")
"RTN","ECRDSSA",289,0)
 . D DEM^VADPT
"RTN","ECRDSSA",290,0)
 I $G(ECPTYP)="E" Q $P($G(VADM(2)),U)  ;119 full SSN on export
"RTN","ECRDSSA",291,0)
 Q $E($P($G(VADM(2)),U),6,9)  ;112, only get last 4 SSN
"RTN","ECRDSSA",292,0)
 ;
"RTN","ECRDSSA",293,0)
GETPROV(ECIEN) ;get primary provider
"RTN","ECRDSSA",294,0)
 ;This function retrieves the primary provider for a given Event
"RTN","ECRDSSA",295,0)
 ;Capture record.  Searches the PROVIDER MULTIPLE (#42) field first
"RTN","ECRDSSA",296,0)
 ;and falls back to the PROVIDER (#10) field.
"RTN","ECRDSSA",297,0)
 ;  Input:
"RTN","ECRDSSA",298,0)
 ;    ECIEN -(required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",299,0)
 ;
"RTN","ECRDSSA",300,0)
 ;  Output:
"RTN","ECRDSSA",301,0)
 ;   Function value - returns provider's name on success; "" on failure
"RTN","ECRDSSA",302,0)
 ;
"RTN","ECRDSSA",303,0)
 N ECPROV  ;provider name
"RTN","ECRDSSA",304,0)
 S ECPROV=""
"RTN","ECRDSSA",305,0)
 I $G(ECIEN)'="",$D(^ECH(ECIEN)) D
"RTN","ECRDSSA",306,0)
 . ;try PROVIDER MULTIPLE
"RTN","ECRDSSA",307,0)
 . I '$$GETPPRV^ECPRVMUT(ECIEN,.ECPROV) D  ;api returns "0" on success
"RTN","ECRDSSA",308,0)
 . . S ECPROV=$P(ECPROV,U,2)
"RTN","ECRDSSA",309,0)
 . E  D  ;try PROVIDER
"RTN","ECRDSSA",310,0)
 . . S ECPROV=$$GET1^DIQ(721,ECIEN_",",10)
"RTN","ECRDSSA",311,0)
 Q ECPROV
"RTN","ECRDSSA",312,0)
 ;
"RTN","ECRDSSA",313,0)
GETPRNM(ECVIEN,ECDT) ;get procedure name
"RTN","ECRDSSA",314,0)
 ;  Input:
"RTN","ECRDSSA",315,0)
 ;    ECVIEN - variable pointer to CPT (#81) file or EC PROC file
"RTN","ECRDSSA",316,0)
 ;    
"RTN","ECRDSSA",317,0)
 ;  Output:
"RTN","ECRDSSA",318,0)
 ;    Function value - returns procedure name on success; "" on failure
"RTN","ECRDSSA",319,0)
 ;
"RTN","ECRDSSA",320,0)
 N ECIEN   ;IEN part of variable pointer
"RTN","ECRDSSA",321,0)
 N ECFILE  ;file part of variable pointer
"RTN","ECRDSSA",322,0)
 S ECIEN=$P(ECVIEN,";",1)
"RTN","ECRDSSA",323,0)
 S ECFILE=$P(ECVIEN,";",2)
"RTN","ECRDSSA",324,0)
 Q $S(ECFILE["ICPT(":$P($$CPT^ICPTCOD(ECIEN,ECDT),U,3),ECFILE["EC(725":$$GET1^DIQ(725,ECIEN_",",.01),1:"")
"RTN","ECRDSSA",325,0)
 ;
"RTN","ECRDSSA",326,0)
GETPROC(ECVIEN) ;get procedure code
"RTN","ECRDSSA",327,0)
 ;  Input:
"RTN","ECRDSSA",328,0)
 ;    ECVIEN - variable pointer to CPT (#81) file or EC PROC file
"RTN","ECRDSSA",329,0)
 ;
"RTN","ECRDSSA",330,0)
 ;  Output:
"RTN","ECRDSSA",331,0)
 ;   Function value - returns procedure code on success; "" on failure
"RTN","ECRDSSA",332,0)
 ;
"RTN","ECRDSSA",333,0)
 N ECIEN  ;IEN part of variable pointer
"RTN","ECRDSSA",334,0)
 N ECFILE  ;file part of variable pointer
"RTN","ECRDSSA",335,0)
 S ECIEN=$P(ECVIEN,";",1)
"RTN","ECRDSSA",336,0)
 S ECFILE=$P(ECVIEN,";",2)
"RTN","ECRDSSA",337,0)
 Q $S(ECFILE["ICPT(":$$GET1^DIQ(81,ECIEN_",",.01),ECFILE["EC(725":$$GET1^DIQ(725,ECIEN_",",1),1:"")
"RTN","ECRDSSA",338,0)
 ;
"RTN","ECRDSSA",339,0)
GETPSYN(LOC,UNIT,CAT,PROC) ;API added in 126, gets synonym for EC screen
"RTN","ECRDSSA",340,0)
 N SYN,IEN
"RTN","ECRDSSA",341,0)
 S SYN=""
"RTN","ECRDSSA",342,0)
 I PROC="" Q SYN
"RTN","ECRDSSA",343,0)
 S IEN=$O(^ECJ("AP",LOC,UNIT,CAT,PROC,0))
"RTN","ECRDSSA",344,0)
 I IEN="" Q SYN
"RTN","ECRDSSA",345,0)
 Q $P($G(^ECJ(IEN,"PRO")),U,2)
"RTN","ECRDSSA",346,0)
 ;
"RTN","ECRDSSA",347,0)
ASKSRT(ECTYP) ;Ask report sort type
"RTN","ECRDSSA",348,0)
 ;  Input:  none
"RTN","ECRDSSA",349,0)
 ;  
"RTN","ECRDSSA",350,0)
 ;  Output:
"RTN","ECRDSSA",351,0)
 ;    ECTYP - (pass by reference) Sort type
"RTN","ECRDSSA",352,0)
 ;            (P: Patient Name,S: SSN,R: Provider Name)
"RTN","ECRDSSA",353,0)
 ;    Function value - returns 1 on success; 0 on failure
"RTN","ECRDSSA",354,0)
 ;
"RTN","ECRDSSA",355,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y  ;^DIR variables
"RTN","ECRDSSA",356,0)
 S DIR(0)="SA^P:PATIENT NAME;S:SSN;R:PROVIDER NAME"
"RTN","ECRDSSA",357,0)
 S DIR("A")="Sort within each DSS Unit by: "
"RTN","ECRDSSA",358,0)
 S DIR("B")="SSN"
"RTN","ECRDSSA",359,0)
 D ^DIR
"RTN","ECRDSSA",360,0)
 S ECTYP=$P(Y,U)
"RTN","ECRDSSA",361,0)
 Q $S($D(DUOUT):0,$D(DTOUT):0,$D(DIROUT):0,1:1)
"RTN","ECRDSSA",362,0)
 ;
"RTN","ECRDSSA",363,0)
ASKDEV() ;Ask output device
"RTN","ECRDSSA",364,0)
 ;  Input:  none
"RTN","ECRDSSA",365,0)
 ;
"RTN","ECRDSSA",366,0)
 ; Output:  1 if report is printed
"RTN","ECRDSSA",367,0)
 ;          0 if report is queued (or exited)
"RTN","ECRDSSA",368,0)
 ;
"RTN","ECRDSSA",369,0)
 N ECX,ZTDESC,ZTRTN,ZTSAVE
"RTN","ECRDSSA",370,0)
 S ECX=1
"RTN","ECRDSSA",371,0)
 K %ZIS S %ZIS="QMP"
"RTN","ECRDSSA",372,0)
 D ^%ZIS
"RTN","ECRDSSA",373,0)
 S:POP ECX=0
"RTN","ECRDSSA",374,0)
 I ECX&($D(IO("Q"))) D
"RTN","ECRDSSA",375,0)
 . S ZTRTN="STRPT^ECRDSSA",ZTDESC="DSS UNIT ACTIVITY REPORT"
"RTN","ECRDSSA",376,0)
 . S (ZTSAVE("ECLOC("),ZTSAVE("ECDSSU("),ZTSAVE("ECSRT"))=""
"RTN","ECRDSSA",377,0)
 . S (ZTSAVE("ECSTDT"),ZTSAVE("ECENDDT"))=""
"RTN","ECRDSSA",378,0)
 . D ^%ZTLOAD
"RTN","ECRDSSA",379,0)
 . D HOME^%ZIS
"RTN","ECRDSSA",380,0)
 . S ECX=0
"RTN","ECRDSSA",381,0)
 Q ECX
"RTN","ECRDSSEC")
0^14^B7402788^B6543732
"RTN","ECRDSSEC",1,0)
ECRDSSEC ;ALB/DAN - Event capture screen for DSS unit report ;1/25/16  12:02
"RTN","ECRDSSEC",2,0)
 ;;2.0;EVENT CAPTURE;**112,131**;8 May 96;Build 13
"RTN","ECRDSSEC",3,0)
 ;
"RTN","ECRDSSEC",4,0)
STRPT ;Main entry point for report
"RTN","ECRDSSEC",5,0)
 N NODE,PRO,CNT,LOC,CAT,IEN,PX,PN,CATD,LOCDS,ECL,ECSYN,ACT,DEFCL
"RTN","ECRDSSEC",6,0)
 K ^TMP($J,"ECRPT")
"RTN","ECRDSSEC",7,0)
 S (CNT,LOC)=0
"RTN","ECRDSSEC",8,0)
 S CNT=CNT+1,^TMP($J,"ECRPT",CNT)="SYNONYM^PROCEDURE^LOCATION^DEFAULT ASSOCIATED CLINIC^CATEGORY^STATUS"
"RTN","ECRDSSEC",9,0)
 F  S LOC=$O(^ECJ("AP",LOC)) Q:'LOC  S CAT="" D
"RTN","ECRDSSEC",10,0)
 .I ECD'="" D:$D(^ECJ("AP",LOC,ECD)) GETSCN Q 
"RTN","ECRDSSEC",11,0)
 I ECPTYP="E" Q  ;Stop if exporting and not printing.
"RTN","ECRDSSEC",12,0)
 U IO
"RTN","ECRDSSEC",13,0)
 D HDR
"RTN","ECRDSSEC",14,0)
 S CNT=1
"RTN","ECRDSSEC",15,0)
 F  S CNT=$O(^TMP($J,"ECRPT",CNT)) Q:'+CNT  D
"RTN","ECRDSSEC",16,0)
 .S NODE=^TMP($J,"ECRPT",CNT)
"RTN","ECRDSSEC",17,0)
 .W $E($P(NODE,U),1,20),?22,$E($P(NODE,U,2),1,25),?49,$E($P(NODE,U,3),1,25),?76,$E($P(NODE,U,4),1,25),?103,$E($P(NODE,U,5),1,25),?123,$P(NODE,U,6),!
"RTN","ECRDSSEC",18,0)
 .I $Y>(IOSL-5) D HDR
"RTN","ECRDSSEC",19,0)
 Q
"RTN","ECRDSSEC",20,0)
GETSCN F  S CAT=$O(^ECJ("AP",LOC,ECD,CAT)) Q:CAT=""  S PX="" D
"RTN","ECRDSSEC",21,0)
 .I CAT,'$P(^ECD(ECD,0),U,11) Q  ;131 Don't show screen if it has a category and the DSS Unit is set to "no categories"
"RTN","ECRDSSEC",22,0)
 .F  S PX=$O(^ECJ("AP",LOC,ECD,CAT,PX)) Q:PX=""  S IEN=0 D
"RTN","ECRDSSEC",23,0)
 ..F  S IEN=$O(^ECJ("AP",LOC,ECD,CAT,PX,IEN)) Q:'IEN  D
"RTN","ECRDSSEC",24,0)
 ...S NODE=$G(^ECJ(IEN,0)) I NODE="" Q
"RTN","ECRDSSEC",25,0)
 ...S ACT=$P(NODE,U,2)
"RTN","ECRDSSEC",26,0)
 ...I $S(STAT="A"&(ACT'=""):1,STAT="I"&(ACT=""):1,1:0) Q  ;filter by status
"RTN","ECRDSSEC",27,0)
 ...S PRO=$G(^ECJ(IEN,"PRO")),ECSYN=$P(PRO,U,2),PN=$P($P(PRO,U),";"),DEFCL=$P(PRO,U,4)
"RTN","ECRDSSEC",28,0)
 ...I PN="" Q
"RTN","ECRDSSEC",29,0)
 ...I $P(PRO,U)["EC" S PN=$G(^EC(725,PN,0)),PRO=$P(PN,U,2)_" "_$P(PN,U)
"RTN","ECRDSSEC",30,0)
 ...E  S PN=$$CPT^ICPTCOD(PN) S PRO=$P(PN,U,2)_" "_$P(PN,U,3)
"RTN","ECRDSSEC",31,0)
 ...S ACT=$S(ACT'="":"Inactive",1:"Active")
"RTN","ECRDSSEC",32,0)
 ...S CATD=$S('CAT:"None",1:$P($G(^EC(726,CAT,0)),U))
"RTN","ECRDSSEC",33,0)
 ...S LOCDS=$$GET1^DIQ(4,LOC,.01,"I"),CNT=CNT+1
"RTN","ECRDSSEC",34,0)
 ...I DEFCL'="" S DEFCL=$$GET1^DIQ(44,DEFCL,".01")
"RTN","ECRDSSEC",35,0)
 ...S ^TMP($J,"ECRPT",CNT)=ECSYN_U_PRO_U_LOCDS_U_DEFCL_U_CATD_U_ACT
"RTN","ECRDSSEC",36,0)
 Q
"RTN","ECRDSSEC",37,0)
 ;
"RTN","ECRDSSEC",38,0)
HDR ;
"RTN","ECRDSSEC",39,0)
 I $D(IOF) W @IOF
"RTN","ECRDSSEC",40,0)
 W !,"EVENT SCREENS FOR DSS UNIT:",$$GET1^DIQ(724,ECD,".01"),?$S($G(IOM):(IOM-18),1:62),$$FMTE^XLFDT($$NOW^XLFDT,"1M"),!!
"RTN","ECRDSSEC",41,0)
 W !,"SYNONYM",?22,"PROCEDURE",?49,"LOCATION",?76,"ASSOC. CLINIC",?103,"CATEGORY",?123,"STATUS",!,$$REPEAT^XLFSTR("-",$S($G(IOM):IOM,1:132)),!
"RTN","ECRECSPC")
0^15^B11998721^B10939952
"RTN","ECRECSPC",1,0)
ECRECSPC ;ALB/DAN - Event Capture Screens w/ selected procedure codes ;1/26/16  16:34
"RTN","ECRECSPC",2,0)
 ;;2.0;EVENT CAPTURE;**112,131**;8 May 96;Build 13
"RTN","ECRECSPC",3,0)
 ;
"RTN","ECRECSPC",4,0)
STRPT ;
"RTN","ECRECSPC",5,0)
 D GETREC
"RTN","ECRECSPC",6,0)
 I ECPTYP="E" D EXPORT Q
"RTN","ECRECSPC",7,0)
 U IO
"RTN","ECRECSPC",8,0)
 D PRINT
"RTN","ECRECSPC",9,0)
 Q
"RTN","ECRECSPC",10,0)
 ;
"RTN","ECRECSPC",11,0)
GETREC ;Find screens with selected procedure codes
"RTN","ECRECSPC",12,0)
 N IEN,ACT,FL,V,EI,ECSCR,LOC,UNT,CAT,PX,NODE
"RTN","ECRECSPC",13,0)
 K ^TMP("ECRECSPC",$J)
"RTN","ECRECSPC",14,0)
 S FL="4,724,726"
"RTN","ECRECSPC",15,0)
 S V="LOC,UNT,CAT",IEN=0
"RTN","ECRECSPC",16,0)
 F  S IEN=$O(^ECJ(IEN)) Q:'IEN  S NODE=$G(^ECJ(IEN,0)) I NODE'="" D
"RTN","ECRECSPC",17,0)
 .S ACT=$P(NODE,U,2),ECSCR=$TR($P(NODE,U),"-;,","^^")
"RTN","ECRECSPC",18,0)
 .I '$D(ECLOC1(+$P(ECSCR,U))) Q  ;Not a location we're looking for
"RTN","ECRECSPC",19,0)
 .F EI=1:1:3 D
"RTN","ECRECSPC",20,0)
 ..S @$P(V,",",EI)=$$GET1^DIQ($P(FL,",",EI),$P(ECSCR,U,EI),.01,"E"),PX=""
"RTN","ECRECSPC",21,0)
 .I $P(ECSCR,U,5)["EC" D
"RTN","ECRECSPC",22,0)
 ..S PRO=$G(^EC(725,$P(ECSCR,U,4),0)),PX=$P(PRO,U,2)_"~"_$P(PRO,U)
"RTN","ECRECSPC",23,0)
 .E  S PRO=$$CPT^ICPTCOD($P(ECSCR,U,4)) S PX=$P(PRO,U,2)_"~"_$P(PRO,U,3)
"RTN","ECRECSPC",24,0)
 .I ECLPC0'="ALL" I '$D(ECPROC($P(PX,"~"))) Q  ;not procedure code we're looking for
"RTN","ECRECSPC",25,0)
 .I $P(ECSCR,U,3),'$P(^ECD($P(ECSCR,U,2),0),U,11) Q  ;131 Don't show info if it has a category and DSS unit is set to no categories
"RTN","ECRECSPC",26,0)
 .S ^TMP("ECRECSPC",$J,PX,UNT,LOC,IEN)=CAT_U_$S(ACT="":"ACTIVE",1:"INACTIVE")_U_+$P(ECSCR,U,2)
"RTN","ECRECSPC",27,0)
 Q
"RTN","ECRECSPC",28,0)
 ;
"RTN","ECRECSPC",29,0)
PRINT ;
"RTN","ECRECSPC",30,0)
 N PAGE,UNT,LOC,IEN,DATA,PX,DONE
"RTN","ECRECSPC",31,0)
 D HDR
"RTN","ECRECSPC",32,0)
 S PX="" F  S PX=$O(^TMP("ECRECSPC",$J,PX)) Q:PX=""  D
"RTN","ECRECSPC",33,0)
 .W !,?3,"PROCEDURE CODE: ",$P(PX,"~"),!,?3,"PROCEDURE NAME: ",$P(PX,"~",2),!
"RTN","ECRECSPC",34,0)
 .S UNT="" F  S UNT=$O(^TMP("ECRECSPC",$J,PX,UNT)) Q:UNT=""  D  W !
"RTN","ECRECSPC",35,0)
 ..S DONE=0
"RTN","ECRECSPC",36,0)
 ..S LOC="" F  S LOC=$O(^TMP("ECRECSPC",$J,PX,UNT,LOC)) Q:LOC=""  S IEN=0 F  S IEN=$O(^TMP("ECRECSPC",$J,PX,UNT,LOC,IEN)) Q:'+IEN  D
"RTN","ECRECSPC",37,0)
 ...S DATA=^TMP("ECRECSPC",$J,PX,UNT,LOC,IEN)
"RTN","ECRECSPC",38,0)
 ...W ! I 'DONE W $P(DATA,U,3),?11,UNT S DONE=1
"RTN","ECRECSPC",39,0)
 ...W ?43,LOC,?75,$P(DATA,U),?112,$P(DATA,U,2)
"RTN","ECRECSPC",40,0)
 ...I $Y>(IOSL-4) D HDR
"RTN","ECRECSPC",41,0)
 Q
"RTN","ECRECSPC",42,0)
 ;
"RTN","ECRECSPC",43,0)
HDR ;
"RTN","ECRECSPC",44,0)
 W @IOF
"RTN","ECRECSPC",45,0)
 S PAGE=$G(PAGE)+1
"RTN","ECRECSPC",46,0)
 W !,?56,"EVENT CAPTURE REPORT",?123,"PAGE: ",PAGE
"RTN","ECRECSPC",47,0)
 W !,?35,"DSS UNITS/EVENT CODE (EC) SCREENS FOR SELECTED PROCEDURE CODE",?104,"RUN DATE: ",$$FMTE^XLFDT($$NOW^XLFDT,"M"),!
"RTN","ECRECSPC",48,0)
 W !,?110,"EC SCREEN",!,"DSS IEN",?11,"DSS UNIT NAME",?43,"LOCATION",?75,"CATEGORY",?112,"STATUS"
"RTN","ECRECSPC",49,0)
 W !,$$REPEAT^XLFSTR("-",132)
"RTN","ECRECSPC",50,0)
 Q
"RTN","ECRECSPC",51,0)
EXPORT ;
"RTN","ECRECSPC",52,0)
 N CNT,UNT,LOC,IEN,PX,DATA
"RTN","ECRECSPC",53,0)
 K ^TMP($J,"ECRPT")
"RTN","ECRECSPC",54,0)
 S CNT=1,^TMP($J,"ECRPT",CNT)="PROCEDURE CODE^PROCEDURE NAME^DSS UNIT IEN^DSS UNIT^LOCATION^CATEGORY^EC SCREEN STATUS"
"RTN","ECRECSPC",55,0)
 S PX="" F  S PX=$O(^TMP("ECRECSPC",$J,PX)) Q:PX=""  D
"RTN","ECRECSPC",56,0)
 .S UNT="" F  S UNT=$O(^TMP("ECRECSPC",$J,PX,UNT)) Q:UNT=""  S LOC="" F  S LOC=$O(^TMP("ECRECSPC",$J,PX,UNT,LOC)) Q:LOC=""  S IEN=0 F  S IEN=$O(^TMP("ECRECSPC",$J,PX,UNT,LOC,IEN)) Q:'+IEN  D
"RTN","ECRECSPC",57,0)
 ..S DATA=$G(^TMP("ECRECSPC",$J,PX,UNT,LOC,IEN))
"RTN","ECRECSPC",58,0)
 ..S CNT=CNT+1,^TMP($J,"ECRPT",CNT)=$P(PX,"~")_U_$P(PX,"~",2)_U_$P(DATA,U,3)_U_UNT_U_LOC_U_$P(DATA,U)_U_$P(DATA,U,2)
"RTN","ECRECSPC",59,0)
 Q
"RTN","ECRRPC")
0^4^B23213577^B21499079
"RTN","ECRRPC",1,0)
ECRRPC ;ALB/JAM - Event Capture Report RPC Broker ;3/21/16  17:10
"RTN","ECRRPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,47,61,72,95,101,100,107,112,131**;8 May 96;Build 13
"RTN","ECRRPC",3,0)
 ;
"RTN","ECRRPC",4,0)
RPTEN(RESULTS,ECARY) ;RPC Broker entry point for EC Reports
"RTN","ECRRPC",5,0)
 ;All EC GUI reports will call this line tag
"RTN","ECRRPC",6,0)
 ;        RPC: EC REPORTS
"RTN","ECRRPC",7,0)
 ;INPUTS  ECARY   - Contains the following elements for report printing
"RTN","ECRRPC",8,0)
 ;        ECDEV   - Print to queue, if device
"RTN","ECRRPC",9,0)
 ;        ECQDT   - Queue to print (date/time), optional
"RTN","ECRRPC",10,0)
 ;        ECPTYP  - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPC",11,0)
 ;
"RTN","ECRRPC",12,0)
 ;OUTPUTS RESULTS - Array of help text in the HELP FRAM File (#9.2)
"RTN","ECRRPC",13,0)
 ;
"RTN","ECRRPC",14,0)
 N HLPDA,HND,ECSTR,ECFILER,ECERR,ECDIRY,ECUFILE,ECGUI
"RTN","ECRRPC",15,0)
 N ECQTIME ;CMF should not need this!  %DT call below fails for future dates within this routine
"RTN","ECRRPC",16,0)
 D SETENV^ECUMRPC
"RTN","ECRRPC",17,0)
 S ECERR=0,ECGUI=1 D PARSE,CHKDT I ECERR Q
"RTN","ECRRPC",18,0)
 K ^TMP("ECMSG",$J),^TMP($J,"ECRPT")
"RTN","ECRRPC",19,0)
 D  I ECERR D END Q
"RTN","ECRRPC",20,0)
 . I ECPTYP="E" Q  ;112 For exporable format, no device needed
"RTN","ECRRPC",21,0)
 . I ECPTYP="D" D HFSOPEN(ECHNDL) Q
"RTN","ECRRPC",22,0)
 . I '$D(ECDEV) S ^TMP("ECMSG",$J,1)="0^Device undefined",ECERR=1
"RTN","ECRRPC",23,0)
 S HND=$P($T(@ECHNDL),";;",2) I HND="" D  Q
"RTN","ECRRPC",24,0)
 . S ^TMP("ECMSG",$J,1)="0^Line Tag undefined" D END
"RTN","ECRRPC",25,0)
 S ^XTMP("ECRRPT","ECRRPC","ECQDTbefore")=$G(ECQDT)  ;;cmf diagnostic hack
"RTN","ECRRPC",26,0)
 S:ECPTYP="P" ECQTIME=$TR($P(ECQDT,"@",2),":","")
"RTN","ECRRPC",27,0)
 S ECQDT=$G(ECQDT,"NOW"),%DT="XT",X=ECQDT D ^%DT  ;Print time
"RTN","ECRRPC",28,0)
 S ECQDT=$S(Y>0:Y,1:"NOW")
"RTN","ECRRPC",29,0)
 S:ECPTYP="P"&(ECQDT="NOW") ECQDT=DT_"."_ECQTIME  ;Should not have to do this! %DT malfunctions inside this routine!!!
"RTN","ECRRPC",30,0)
 D @$P(HND,";",2)
"RTN","ECRRPC",31,0)
 I ECPTYP="D" D HFSCLOSE(ECFILER) ;S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",32,0)
END D KILLVAR
"RTN","ECRRPC",33,0)
 I $D(^TMP("ECMSG",$J)) S RESULTS=$NA(^TMP("ECMSG",$J)) Q
"RTN","ECRRPC",34,0)
 S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",35,0)
 Q
"RTN","ECRRPC",36,0)
 ;
"RTN","ECRRPC",37,0)
PARSE ;Parse data from array for filing
"RTN","ECRRPC",38,0)
 N SUB
"RTN","ECRRPC",39,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  S @SUB=ECARY(SUB)
"RTN","ECRRPC",40,0)
 Q
"RTN","ECRRPC",41,0)
CHKDT ;Required Data Check
"RTN","ECRRPC",42,0)
 N I,C
"RTN","ECRRPC",43,0)
 S C=1
"RTN","ECRRPC",44,0)
 F I="ECHNDL","ECPTYP" D
"RTN","ECRRPC",45,0)
 .I $G(@I)="" S ^TMP("ECMSG",$J,C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECRRPC",46,0)
 Q
"RTN","ECRRPC",47,0)
KILLVAR ;Kill variables
"RTN","ECRRPC",48,0)
 N SUB
"RTN","ECRRPC",49,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  K @SUB
"RTN","ECRRPC",50,0)
 K ECARY,POP,ECQDT
"RTN","ECRRPC",51,0)
 Q
"RTN","ECRRPC",52,0)
HFSOPEN(HANDLE) ; 
"RTN","ECRRPC",53,0)
 ;S ECDIRY=$$GET^XPAR("DIV","EC HFS SCRATCH")
"RTN","ECRRPC",54,0)
 S ECDIRY=$$DEFDIR^%ZISH()
"RTN","ECRRPC",55,0)
 I ECDIRY="" S ECERR=1 D  Q
"RTN","ECRRPC",56,0)
 .S ^TMP("ECMSG",$J,1)="0^A scratch directory for reports doesn't exist"
"RTN","ECRRPC",57,0)
 S ECFILER="EC"_DUZ_".DAT",ECUFILE=ECFILER S ^TMP("JEN",$J,.1)=ECUFILE
"RTN","ECRRPC",58,0)
 D OPEN^%ZISH(HANDLE,ECDIRY,ECFILER,"W") D:POP  Q:POP
"RTN","ECRRPC",59,0)
 .S ECERR=1,^TMP("ECMSG",$J,1)="0^Unable to open file "_ECDIRY_ECFILER
"RTN","ECRRPC",60,0)
 S IOM=132,IOSL=99999,IOST="P-DUMMY",IOF=""""""
"RTN","ECRRPC",61,0)
 Q
"RTN","ECRRPC",62,0)
 ;
"RTN","ECRRPC",63,0)
HFSCLOSE(HANDLE) ; 
"RTN","ECRRPC",64,0)
 N ECDEL
"RTN","ECRRPC",65,0)
 D CLOSE^%ZISH(ECDIRY_HANDLE)
"RTN","ECRRPC",66,0)
 K ^TMP($J)
"RTN","ECRRPC",67,0)
 S ECDEL(ECFILER)=""
"RTN","ECRRPC",68,0)
 S X=$$FTG^%ZISH(ECDIRY,ECFILER,$NAME(^TMP($J,1)),2)
"RTN","ECRRPC",69,0)
 S X=$$DEL^%ZISH(ECDIRY,$NA(ECDEL))
"RTN","ECRRPC",70,0)
 Q
"RTN","ECRRPC",71,0)
 ;added ECSTPCD for EC*2*107
"RTN","ECRRPC",72,0)
 ;added ECDSSUA, ECRUDSS, ECRECER, ECRECSIC,ECRECSPC, ECRGP and ECRDSSEC for patch EC*2*112
"RTN","ECRRPC",73,0)
 ;131 Added ECDSSSNR and ECDISSUM reports
"RTN","ECRRPC",74,0)
ECPAT ;;Patient Summary Report;ECPAT^ECRRPT
"RTN","ECRRPC",75,0)
ECRDSSA ;;DSS Unit Activity;ECRDSSA^ECRRPT
"RTN","ECRRPC",76,0)
ECRDSSU ;;DSS Unit Workload Summary;ECRDSSU^ECRRPT
"RTN","ECRRPC",77,0)
ECPROV ;;Provider Summary Report;ECPROV^ECRRPT
"RTN","ECRRPC",78,0)
PROSUM ;;Provider (1-7) Summary Report;PROSUM^ECRRPT
"RTN","ECRRPC",79,0)
ECOSSUM ;;Ordering Section Summary Report;ECOSSUM^ECRRPT
"RTN","ECRRPC",80,0)
ECPCER ;;PCE Data Summary Report;ECPCER^ECRRPT
"RTN","ECRRPC",81,0)
ECRPERS ;;Inactive Person Class Report;ECRPERS^ECRRPT1
"RTN","ECRRPC",82,0)
ECRPRSN ;;Procedure Reason Report;ECRPRSN^ECRRPT1
"RTN","ECRRPC",83,0)
ECDSS1 ;;National/Local Procedure Reports;ECDSS1^ECRRPT1
"RTN","ECRRPC",84,0)
ECDSS3 ;;Category Reports;ECDSS3^ECRRPT1
"RTN","ECRRPC",85,0)
ECSUM ;;Print Category and Procedure Summary (Report);ECSUM^ECRRPT1
"RTN","ECRRPC",86,0)
ECNTPCE ;;Records Failing Transmission to PCE Report;ECNTPCE^ECRRPT1
"RTN","ECRRPC",87,0)
ECSCPT ;;Event Code Screens with CPT Codes;ECSCPT^ECRRPT1
"RTN","ECRRPC",88,0)
ECINCPT ;;National/Local Procedure Codes with Inactive CPT;ECINCPT^ECRRPT1
"RTN","ECRRPC",89,0)
ECGTP ;;Generic Table Printer;ECGTP^ECRRPT1
"RTN","ECRRPC",90,0)
ECSTPCD ;;DSS Units with Associated Stop Code Error Report;ECSTPCD^ECRRPT1
"RTN","ECRRPC",91,0)
ECRDSSUA ;;Users with access to selected DSS Unit;ECRDSSUA^ECRRPT2
"RTN","ECRRPC",92,0)
ECRUDSS ;;DSS unit access by selected user;ECRUDSS^ECRRPT2
"RTN","ECRRPC",93,0)
ECRDSSEC ;;Event code screen for selected DSS Unit;ECRDSSEC^ECRRPT2
"RTN","ECRRPC",94,0)
ECRECER ;;Event capture encounters report;ECRECER^ECRRPT2
"RTN","ECRRPC",95,0)
ECRECSIC ;;Event Code Screens with Inactive Clinics;ECRECSIC^ECRRPT2
"RTN","ECRRPC",96,0)
ECRECSPC ;;Event Code Screens by Procedure Code;ECRECSPC^ECRRPT2
"RTN","ECRRPC",97,0)
ECRGP ;;Generic print of report;ECRGP^ECRRPT2
"RTN","ECRRPC",98,0)
ECDSSSNR ;;DSS Units set to send no records to PCE;ECDSSSNR^ECRRPT2
"RTN","ECRRPC",99,0)
ECDISSUM ;;Disabled Category and Procedure Summary Report;ECDISSUM^ECRRPT2
"RTN","ECRRPT2")
0^3^B45393143^B34837441
"RTN","ECRRPT2",1,0)
ECRRPT2 ;ALB/DAN - Event Capture Report RPC Broker (Cont) ;2/12/16  09:41
"RTN","ECRRPT2",2,0)
 ;;2.0;EVENT CAPTURE;**112,131**;8 May 96;Build 13
"RTN","ECRRPT2",3,0)
 ;
"RTN","ECRRPT2",4,0)
ECRDSSUA ;List users with access to DSS Units
"RTN","ECRRPT2",5,0)
 ;     Variables passed in
"RTN","ECRRPT2",6,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",7,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",8,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",9,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",10,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",11,0)
 ;
"RTN","ECRRPT2",12,0)
 ;     Variable return
"RTN","ECRRPT2",13,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",14,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y
"RTN","ECRRPT2",15,0)
 S ECV="ECD0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",16,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",17,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",18,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",19,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",20,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",21,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",22,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",23,0)
 . S ECROU="STRPT^ECRDSSUA"
"RTN","ECRRPT2",24,0)
 . S ECSAVE("ECDSSU(")=""
"RTN","ECRRPT2",25,0)
 . S ECDESC="Users with access to DSS Units"
"RTN","ECRRPT2",26,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",27,0)
 D STRPT^ECRDSSUA
"RTN","ECRRPT2",28,0)
 Q
"RTN","ECRRPT2",29,0)
ALLU ;-- Get all DSS Units and create ECDSSU array
"RTN","ECRRPT2",30,0)
 N ECD,ECN,ECX,Y
"RTN","ECRRPT2",31,0)
 S ECD="",ECN=0
"RTN","ECRRPT2",32,0)
 F  S ECD=$O(^ECD("B",ECD)) Q:ECD=""  F  S ECN=$O(^ECD("B",ECD,ECN)) Q:'ECN  D
"RTN","ECRRPT2",33,0)
 . Q:'$$VALID(ECN)!('ECKEY&('$D(^VA(200,ECDUZ,"EC",+ECN))))
"RTN","ECRRPT2",34,0)
 . S ECDSSU(ECN)=ECD
"RTN","ECRRPT2",35,0)
ALLUQ Q
"RTN","ECRRPT2",36,0)
 ;
"RTN","ECRRPT2",37,0)
VALID(IEN) ;-- Check DSS Unit for use by Event Capture
"RTN","ECRRPT2",38,0)
 N NODE
"RTN","ECRRPT2",39,0)
 S NODE=$G(^ECD(IEN,0))
"RTN","ECRRPT2",40,0)
 Q $S($P(NODE,"^",8):1,1:0)
"RTN","ECRRPT2",41,0)
 ;
"RTN","ECRRPT2",42,0)
ECRUDSS ;List all DSS units user has access to
"RTN","ECRRPT2",43,0)
 ;     Variables passed in
"RTN","ECRRPT2",44,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",45,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",46,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",47,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",48,0)
 ;
"RTN","ECRRPT2",49,0)
 ;     Variable return
"RTN","ECRRPT2",50,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",51,0)
 N ECV,ECROU,ECSAVE,ECDESC
"RTN","ECRRPT2",52,0)
 S ECV="ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",53,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",54,0)
 . S ECROU="STRPT^ECRUDSS"
"RTN","ECRRPT2",55,0)
 . S ECSAVE("ECDUZ")=""
"RTN","ECRRPT2",56,0)
 . S ECDESC="DSS unit access for a selected user"
"RTN","ECRRPT2",57,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",58,0)
 D STRPT^ECRUDSS
"RTN","ECRRPT2",59,0)
 Q
"RTN","ECRRPT2",60,0)
 ;
"RTN","ECRRPT2",61,0)
ECRDSSEC ;List event code screens for selected DSS unit
"RTN","ECRRPT2",62,0)
 ;     Variables passed in
"RTN","ECRRPT2",63,0)
 ;       ECD       - DSS Unit IEN
"RTN","ECRRPT2",64,0)
 ;       STAT      - Event code screen, (A)ctive, (I)nactive,(B)oth
"RTN","ECRRPT2",65,0)
 ;       ECPTYP    - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",66,0)
 ;
"RTN","ECRRPT2",67,0)
 ;     Variable return
"RTN","ECRRPT2",68,0)
 ;       ^TMP($J,"ECRPT",n)=delimited data
"RTN","ECRRPT2",69,0)
 ;
"RTN","ECRRPT2",70,0)
 ;
"RTN","ECRRPT2",71,0)
 N ECV,ECROU,ECSAVE,ECDESC
"RTN","ECRRPT2",72,0)
 S ECV="ECD^STAT^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",73,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",74,0)
 . S ECROU="STRPT^ECRDSSEC"
"RTN","ECRRPT2",75,0)
 . S ECSAVE("ECD")="",ECSAVE("STAT")="",ECSAVE("ECPTYP")=""
"RTN","ECRRPT2",76,0)
 . S ECDESC="Event code screens for selected DSS Unit"
"RTN","ECRRPT2",77,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",78,0)
 D STRPT^ECRDSSEC
"RTN","ECRRPT2",79,0)
 Q
"RTN","ECRRPT2",80,0)
 ;
"RTN","ECRRPT2",81,0)
ECRECER ;Event Capture Encounter Report
"RTN","ECRRPT2",82,0)
 ;     Variables passed in
"RTN","ECRRPT2",83,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",84,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",85,0)
 ;       ECL0        - Location IEN (1 or ALL)
"RTN","ECRRPT2",86,0)
 ;       ECSORT      - Sort ordered by (P)atient or (D)octor (provider)
"RTN","ECRRPT2",87,0)
 ;       ECSD        - Start date range
"RTN","ECRRPT2",88,0)
 ;       ECED        - End date range
"RTN","ECRRPT2",89,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",90,0)
 ;
"RTN","ECRRPT2",91,0)
 ;     Variable return
"RTN","ECRRPT2",92,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",93,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECLOC,ECLOC1
"RTN","ECRRPT2",94,0)
 S ECV="ECD0^ECDUZ^ECL0^ECSORT^ECSD^ECED^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",95,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT2",96,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",97,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",98,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",99,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",100,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",101,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",102,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",103,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",104,0)
 . S DIC=4,DIC(0)="QNZX",X=ECL0 D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",105,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",106,0)
 . S ECROU="STRPT^ECRECER"
"RTN","ECRRPT2",107,0)
 . S ECSAVE("ECDSSU(")="",ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",108,0)
 . S ECDESC="Event Capture Encounter Report"
"RTN","ECRRPT2",109,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",110,0)
 D STRPT^ECRECER
"RTN","ECRRPT2",111,0)
 Q
"RTN","ECRRPT2",112,0)
 ;
"RTN","ECRRPT2",113,0)
ECRECSIC ;Event Capture Report, Event Capture Screen, Inactive Clinics
"RTN","ECRRPT2",114,0)
 ;     Variables passed in
"RTN","ECRRPT2",115,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",116,0)
 ;       ECL0...n    - Location IEN (1,some or ALL)
"RTN","ECRRPT2",117,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",118,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",119,0)
 ;
"RTN","ECRRPT2",120,0)
 ;     Variable return
"RTN","ECRRPT2",121,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",122,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECLOC,ECLOC1
"RTN","ECRRPT2",123,0)
 S ECV="ECD0^ECL0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",124,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",125,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",126,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",127,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",128,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",129,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",130,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",131,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",132,0)
 . S ECI=0 F ECI=0:1 S ECX="ECL"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",133,0)
 . . S DIC=4,DIC(0)="QNZX",X=@ECX D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",134,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",135,0)
 . S ECROU="STRPT^ECRECSIC"
"RTN","ECRRPT2",136,0)
 . S ECSAVE("ECDSSU(")=""
"RTN","ECRRPT2",137,0)
 . S ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",138,0)
 . S ECDESC="Event Capture Event Code Screens with Inactive Clinics"
"RTN","ECRRPT2",139,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",140,0)
 D STRPT^ECRECSIC
"RTN","ECRRPT2",141,0)
 Q
"RTN","ECRRPT2",142,0)
 ;
"RTN","ECRRPT2",143,0)
ECRECSPC ;Event code screens by procedure code
"RTN","ECRRPT2",144,0)
 ;     Variables passed in
"RTN","ECRRPT2",145,0)
 ;       ECLPC0...n  - Procedure Code (1, some or ALL)
"RTN","ECRRPT2",146,0)
 ;       ECL0...n    - Location IEN (1,some or ALL)
"RTN","ECRRPT2",147,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",148,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",149,0)
 ;
"RTN","ECRRPT2",150,0)
 ;     Variable return
"RTN","ECRRPT2",151,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",152,0)
 N ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECPROC,ECLOC,ECLOC1
"RTN","ECRRPT2",153,0)
 S ECV="ECLPC0^ECL0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",154,0)
 D  I '$D(ECPROC)&(ECLPC0'="ALL") S ^TMP("ECMSG",$J)="1^Invalid Procedure Code." Q
"RTN","ECRRPT2",155,0)
 . I ECLPC0="ALL" Q
"RTN","ECRRPT2",156,0)
 . S ECI=0 F ECI=0:1 S ECX="ECLPC"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",157,0)
 . . S ECPROC(@ECX)=""
"RTN","ECRRPT2",158,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",159,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",160,0)
 . S ECI=0 F ECI=0:1 S ECX="ECL"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",161,0)
 . . S DIC=4,DIC(0)="QNZX",X=@ECX D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",162,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",163,0)
 . S ECROU="STRPT^ECRECSPC"
"RTN","ECRRPT2",164,0)
 . S ECSAVE("ECPROC(")=""
"RTN","ECRRPT2",165,0)
 . S ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",166,0)
 . S ECDESC="Event Capture Event Code Screens by procedure code"
"RTN","ECRRPT2",167,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",168,0)
 D STRPT^ECRECSPC
"RTN","ECRRPT2",169,0)
 Q
"RTN","ECRRPT2",170,0)
ECRGP ;generic print capability
"RTN","ECRRPT2",171,0)
 ;  Variables passed in
"RTN","ECRRPT2",172,0)
 ;  ECLIN0...n  - Lines of data to be printed out
"RTN","ECRRPT2",173,0)
 ;
"RTN","ECRRPT2",174,0)
 ;  Variables returned - none
"RTN","ECRRPT2",175,0)
 ;
"RTN","ECRRPT2",176,0)
 N ECROU,ECSAVE,ECDESC,ECX,I,ECV
"RTN","ECRRPT2",177,0)
 S ECV="ECLIN0" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",178,0)
 S ECROU="PRINT^ECRRPT2"
"RTN","ECRRPT2",179,0)
 S ECDESC="Generic Print of Event Capture Report"
"RTN","ECRRPT2",180,0)
 F I=0:1 S ECX="ECLIN"_I Q:'$D(@ECX)  S ECSAVE(ECX)=""
"RTN","ECRRPT2",181,0)
 D QUEUE^ECRRPT
"RTN","ECRRPT2",182,0)
 Q
"RTN","ECRRPT2",183,0)
 ;
"RTN","ECRRPT2",184,0)
PRINT ;Send data to printer
"RTN","ECRRPT2",185,0)
 N I,ECX
"RTN","ECRRPT2",186,0)
 U IO
"RTN","ECRRPT2",187,0)
 W @IOF
"RTN","ECRRPT2",188,0)
 F I=0:1 S ECX="ECLIN"_I Q:'$D(@ECX)  W !,@ECX I $Y>(IOSL-4) W @IOF
"RTN","ECRRPT2",189,0)
 Q
"RTN","ECRRPT2",190,0)
 ;
"RTN","ECRRPT2",191,0)
ECDSSSNR ;131 DSS units set to send no records to PCE
"RTN","ECRRPT2",192,0)
 ;     Variables passed in
"RTN","ECRRPT2",193,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",194,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",195,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",196,0)
 ;
"RTN","ECRRPT2",197,0)
 ;     Variable return
"RTN","ECRRPT2",198,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",199,0)
 N ECV,ECROU,ECDESC
"RTN","ECRRPT2",200,0)
 S ECV="ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",201,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",202,0)
 . S ECROU="START^ECDSSSNR"
"RTN","ECRRPT2",203,0)
 . S ECDESC="DSS Units set to send no records to PCE"
"RTN","ECRRPT2",204,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",205,0)
 D START^ECDSSSNR
"RTN","ECRRPT2",206,0)
 Q
"RTN","ECRRPT2",207,0)
 ;
"RTN","ECRRPT2",208,0)
ECDISSUM ;131 Disabled Category and Procedure Summary Report
"RTN","ECRRPT2",209,0)
 ;     Variables passed in
"RTN","ECRRPT2",210,0)
 ;       ECL0..n  - Location to report (1,some or ALL)
"RTN","ECRRPT2",211,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT2",212,0)
 ;                  or (E)xport
"RTN","ECRRPT2",213,0)
 ;
"RTN","ECRRPT2",214,0)
 ;     Variable return
"RTN","ECRRPT2",215,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",216,0)
 N ECV,ECLOC,I,LIEN,ECSAVE,ECDESC,ECROU
"RTN","ECRRPT2",217,0)
 S ECV="ECL0^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",218,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",219,0)
 . D LOCARRY^ECRUTL I ECL0="ALL" Q
"RTN","ECRRPT2",220,0)
 . K ECLOC F I=0:1 S LIEN=$G(@("ECL"_I)) Q:'+LIEN  I $D(ECLOC1(LIEN)) S ECLOC(I+1)=LIEN_"^"_ECLOC1(LIEN)
"RTN","ECRRPT2",221,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",222,0)
 . S ECV="ECL0^ECPTYP",ECROU="EN^ECDISSUM"
"RTN","ECRRPT2",223,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT2",224,0)
 . S ECDESC="EC Disabled Category Report"
"RTN","ECRRPT2",225,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",226,0)
 D EN^ECDISSUM
"RTN","ECRRPT2",227,0)
 Q
"RTN","ECSCPT1")
0^16^B12941962^B11623947
"RTN","ECSCPT1",1,0)
ECSCPT1 ;ALB/JAM - Event Code Screens with CPT Codes ;1/26/16  16:13
"RTN","ECSCPT1",2,0)
 ;;2.0;EVENT CAPTURE;**72,95,119,131**;8 May 96;Build 13
"RTN","ECSCPT1",3,0)
EN ;entry point
"RTN","ECSCPT1",4,0)
 N UCNT,ECDO,ECCO,ECNT,ECINDT,ECP0
"RTN","ECSCPT1",5,0)
 S (ECMORE,ECNT,ECDO,ECCO)=0,ECPG=$G(ECPG,1),ECCPT=$G(ECCPT,"B")
"RTN","ECSCPT1",6,0)
 ;Process all DSS Units
"RTN","ECSCPT1",7,0)
 I ECALL S ECD=0 D  G END
"RTN","ECSCPT1",8,0)
 .F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'ECD  D  Q:ECOUT
"RTN","ECSCPT1",9,0)
 ..D SET,CATS,PAGE:'ECOUT&UCNT
"RTN","ECSCPT1",10,0)
 ;Process a specific DSS Unit
"RTN","ECSCPT1",11,0)
 S UCNT=0 D
"RTN","ECSCPT1",12,0)
 .I ECC="ALL" D CATS Q
"RTN","ECSCPT1",13,0)
 .I 'ECJLP S ECC=0,ECCN="None",ECCO=999
"RTN","ECSCPT1",14,0)
 .D PROC
"RTN","ECSCPT1",15,0)
END I 'ECNT,$G(ECPTYP)'="E" W !!!,"Nothing Found." ;119 Nothing to write if exporting
"RTN","ECSCPT1",16,0)
 S ECPG=$G(ECPG,1)
"RTN","ECSCPT1",17,0)
 Q
"RTN","ECSCPT1",18,0)
SET ;set var
"RTN","ECSCPT1",19,0)
 S ECDN=$S($P($G(^ECD(+ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),UCNT=0
"RTN","ECSCPT1",20,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSCPT1",21,0)
 Q
"RTN","ECSCPT1",22,0)
SETC ;set cats
"RTN","ECSCPT1",23,0)
 I ECC=0 S ECCN="None" Q
"RTN","ECSCPT1",24,0)
 S ECCN=$S($P($G(^EC(726,+ECC,0)),"^")]"":$P(^(0),"^"),1:"ZZ #"_ECC_" MISSING DATA")
"RTN","ECSCPT1",25,0)
 S ECMORE=1
"RTN","ECSCPT1",26,0)
 Q
"RTN","ECSCPT1",27,0)
HEADER ;
"RTN","ECSCPT1",28,0)
 W:$E(IOST,1,2)="C-"!(ECPG>1) @IOF
"RTN","ECSCPT1",29,0)
 W !!,?24,"EVENT CODE SCREENS WITH"
"RTN","ECSCPT1",30,0)
 W $S(ECCPT="I":" INACTIVE",ECCPT="A":" ACTIVE",1:"")_" CPT CODES"
"RTN","ECSCPT1",31,0)
 W ?70,"Page: ",ECPG,!?25,"Run Date: ",ECRDT,!?25,"LOCATION:  "_ECLN
"RTN","ECSCPT1",32,0)
 W !?25,"DSS UNIT:  "_ECDN,! S ECPG=ECPG+1
"RTN","ECSCPT1",33,0)
 F I=1:1:80 W "-"
"RTN","ECSCPT1",34,0)
 Q
"RTN","ECSCPT1",35,0)
CATS ;
"RTN","ECSCPT1",36,0)
 S ECC="",ECCO=0
"RTN","ECSCPT1",37,0)
 F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  D  Q:ECOUT  ;131 Moved calls to dot structure
"RTN","ECSCPT1",38,0)
 .I ECC,'$P(^ECD(ECD,0),U,11) Q  ;131 Don't include categories if unit is set to "no categories"
"RTN","ECSCPT1",39,0)
 .D SETC,PROC ;131 Moved from for loop
"RTN","ECSCPT1",40,0)
 S ECMORE=0
"RTN","ECSCPT1",41,0)
 Q
"RTN","ECSCPT1",42,0)
PROC ;
"RTN","ECSCPT1",43,0)
 S ECP=""
"RTN","ECSCPT1",44,0)
 F  S ECP=$O(^ECJ("AP",ECL,ECD,ECC,ECP)) Q:ECP=""  D SETP Q:ECOUT
"RTN","ECSCPT1",45,0)
 S ECMORE=0
"RTN","ECSCPT1",46,0)
 Q
"RTN","ECSCPT1",47,0)
SETP ;set procs
"RTN","ECSCPT1",48,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,"")),ECPI=""
"RTN","ECSCPT1",49,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2),ECFILE=$P(ECP,";",2)
"RTN","ECSCPT1",50,0)
 S ECFILE=$S($E(ECFILE)="I":81,$E(ECFILE)="E":725,1:"")
"RTN","ECSCPT1",51,0)
 I ECFILE="" Q
"RTN","ECSCPT1",52,0)
 S (ECPN,ECPT,NATN)="",ECPI=0
"RTN","ECSCPT1",53,0)
 I ECFILE=81 S ECPI=$$CPT^ICPTCOD(+ECP) I +ECPI>0 D
"RTN","ECSCPT1",54,0)
 .S ECPN=$P(ECPI,"^",3),ECPT=$P(ECPI,"^",2),ECINDT=$P(ECPI,"^",7)
"RTN","ECSCPT1",55,0)
 I ECFILE=725 D
"RTN","ECSCPT1",56,0)
 .S ECP0=$G(^EC(725,+ECP,0)),ECPT="",ECPN=$P(ECP0,"^")
"RTN","ECSCPT1",57,0)
 .S NATN=$P(ECP0,"^",2)
"RTN","ECSCPT1",58,0)
 .I $P(ECP0,"^",5)'="" S ECPI=$$CPT^ICPTCOD($P(ECP0,"^",5)) I +ECPI>0 D 
"RTN","ECSCPT1",59,0)
 ..S ECPT=$P(ECPI,"^",2),ECINDT=$P(ECPI,"^",7)
"RTN","ECSCPT1",60,0)
 I +ECPI<1 Q
"RTN","ECSCPT1",61,0)
 I ECCPT="A",'ECINDT Q
"RTN","ECSCPT1",62,0)
 I ECCPT="I",ECINDT Q
"RTN","ECSCPT1",63,0)
 I $G(ECPTYP)="E" D EXPORT Q  ;119 Nothing to write if exporting
"RTN","ECSCPT1",64,0)
 I ECD'=ECDO D HEADER S ECDO=ECD
"RTN","ECSCPT1",65,0)
 I ECC'=ECCO D  S ECCO=ECC I ECOUT Q
"RTN","ECSCPT1",66,0)
 .W !!,"Category:  "_ECCN D:$Y+4>IOSL CONTD
"RTN","ECSCPT1",67,0)
 S ECPN=$S(ECPSYN]"":ECPSYN,1:ECPN),ECNT=ECNT+1,UCNT=UCNT+1
"RTN","ECSCPT1",68,0)
 W !,"Procedure: ",$E(ECPN,1,30)," (",$S(ECFILE=81:"CPT",1:"EC"),")",?48,"Nat'l #: ",NATN,?64,"CPT: ",ECPT
"RTN","ECSCPT1",69,0)
 I ECCPT="B",'ECINDT W ?70," *I*"
"RTN","ECSCPT1",70,0)
 D:($Y+3)>IOSL CONTD I ECOUT Q
"RTN","ECSCPT1",71,0)
 Q
"RTN","ECSCPT1",72,0)
CONTD ;Check whether to continue or exit
"RTN","ECSCPT1",73,0)
 D PAGE I ECOUT Q
"RTN","ECSCPT1",74,0)
 D HEADER:ECPG,MORE:$D(ECCN)
"RTN","ECSCPT1",75,0)
 Q
"RTN","ECSCPT1",76,0)
 ;
"RTN","ECSCPT1",77,0)
PAGE ;
"RTN","ECSCPT1",78,0)
 N SS,JJ
"RTN","ECSCPT1",79,0)
 I $D(ECPG),$E(IOST,1,2)="C-" D
"RTN","ECSCPT1",80,0)
 . S SS=22-$Y F JJ=1:1:SS W !
"RTN","ECSCPT1",81,0)
 . S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECSCPT1",82,0)
 Q
"RTN","ECSCPT1",83,0)
MORE I ECMORE W !!,"Category:  "_ECCN
"RTN","ECSCPT1",84,0)
 Q
"RTN","ECSCPT1",85,0)
 ;
"RTN","ECSCPT1",86,0)
EXPORT ;Section added in patch 119
"RTN","ECSCPT1",87,0)
 S CNT=CNT+1
"RTN","ECSCPT1",88,0)
 S ^TMP($J,"ECRPT",CNT)=ECLN_U_ECDN_U_ECCN_U_ECPT_$S('ECINDT:" **Inactive**",1:"")_U_NATN_U_$S(ECPSYN]"":ECPSYN,1:ECPN)_" ("_$S(ECFILE=81:"CPT",1:"EC")_")"
"RTN","ECSCPT1",89,0)
 Q
"RTN","ECSUM")
0^9^B16700984^B16478678
"RTN","ECSUM",1,0)
ECSUM ;BIR/JLP,RHK-Category and Procedure Summary ;2/12/16  09:44
"RTN","ECSUM",2,0)
 ;;2.0;EVENT CAPTURE;**4,19,33,47,95,119,122,126,131**;8 May 96;Build 13
"RTN","ECSUM",3,0)
LOC K ECL S EC1=0 D ^ECL S:$D(LOC(2)) EC1=1 K LOC I '$D(ECL) S ECOUT=1 G END
"RTN","ECSUM",4,0)
UNIT ;set var and sel dss unit
"RTN","ECSUM",5,0)
 S ECJLP=0
"RTN","ECSUM",6,0)
 S (ECOUT,ECALL)=0,ECPG=1
"RTN","ECSUM",7,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSUM",8,0)
 .W !!,"Do you want to list all DSS Units for "_ECLN S %=1 D YN^DICN Q:%
"RTN","ECSUM",9,0)
 .W !!?5,"Enter <RET> to list all your DSS Units for this location, or"
"RTN","ECSUM",10,0)
 .W !?11,"NO to select a specific DSS Unit"
"RTN","ECSUM",11,0)
 G:%<0 END I %=1 S ECALL=1 G ECSCN
"RTN","ECSUM",12,0)
 W @IOF,! K DIC S DIC=724,DIC(0)="QEAMZ",DIC("A")="Select DSS Unit: "
"RTN","ECSUM",13,0)
 S:ECL DIC("S")="I $D(^ECJ(""AP"",ECL,+Y))"
"RTN","ECSUM",14,0)
 D ^DIC K DIC G:Y<0 END S ECD=+Y,ECDN=$P(Y,"^",2)
"RTN","ECSUM",15,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSUM",16,0)
 S ECS=+$P(^ECD(ECD,0),"^",2),ECJLP=+$P(^(0),"^",11)
"RTN","ECSUM",17,0)
 S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECSUM",18,0)
SEL ;
"RTN","ECSUM",19,0)
 I 'ECJLP S ECC=0,ECCN="None" G ECSCN
"RTN","ECSUM",20,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSUM",21,0)
 .W !!,"Do you want to list all categories for "_ECDN S %=1 D YN^DICN Q:%
"RTN","ECSUM",22,0)
 .W !!,"Enter <RET> if you would like to list all categories for this "
"RTN","ECSUM",23,0)
 .W "DSS Unit,",!," or NO to select a specific category"
"RTN","ECSUM",24,0)
 G:%<0 END I %=1 S ECC="ALL" G ECSCN
"RTN","ECSUM",25,0)
 W @IOF,! K DIC S DIC=726,DIC(0)="QEAMZ",DIC("A")="Select Category for "
"RTN","ECSUM",26,0)
 S DIC("A")=DIC("A")_ECDN_" DSS Unit:  "
"RTN","ECSUM",27,0)
 S:ECD DIC("S")="I $D(^ECJ(""AP"",ECL,ECD,+Y))"
"RTN","ECSUM",28,0)
 D ^DIC K DIC G:Y<0 END S ECC=+Y,ECCN=$P(Y,"^",2)
"RTN","ECSUM",29,0)
ECSCN ;Event Codes Screens to display, ALB/JAM-10/16/01
"RTN","ECSUM",30,0)
 K DIR
"RTN","ECSUM",31,0)
 S DIR(0)="SO^A:Active Event Code Screens;I:Inactive Event Code Screens"
"RTN","ECSUM",32,0)
 S DIR(0)=DIR(0)_";B:Both",DIR("B")="A"
"RTN","ECSUM",33,0)
 S DIR("A")="Event Code Screen to display"
"RTN","ECSUM",34,0)
 S DIR("?",1)="Enter an A for Active Event Code Screens, I for Inactive "
"RTN","ECSUM",35,0)
 S DIR("?",1)=DIR("?",1)_"Code Screens,"
"RTN","ECSUM",36,0)
 S DIR("?")="B for a consolidated report of all Event Code Screens, or "
"RTN","ECSUM",37,0)
 S DIR("?")=DIR("?")_"^ to quit."
"RTN","ECSUM",38,0)
 S DIR("??")="ECSUM^"
"RTN","ECSUM",39,0)
 D ^DIR K DIR I $D(DIRUT) G END
"RTN","ECSUM",40,0)
 S ECSCN=Y
"RTN","ECSUM",41,0)
DEV W !! K IOP,POP,IO("Q"),%ZIS,ZTSK
"RTN","ECSUM",42,0)
 S %ZIS="QM",%ZIS("A")="Select Device:  " D ^%ZIS I POP S ECOUT=1 G END
"RTN","ECSUM",43,0)
 I $D(IO("Q")) K IO("Q") D  G END
"RTN","ECSUM",44,0)
 .S ZTDESC="CATEGORY AND PROCEDURE SUMMARY",ZTRTN="START^ECSUM",ZTIO=ION
"RTN","ECSUM",45,0)
 .D SAVE,^%ZTLOAD,HOME^%ZIS K ZTSK
"RTN","ECSUM",46,0)
 U IO
"RTN","ECSUM",47,0)
START ;
"RTN","ECSUM",48,0)
 N ECI  ;generic index
"RTN","ECSUM",49,0)
 N ECL  ;location IEN
"RTN","ECSUM",50,0)
 N ECLN  ;location name
"RTN","ECSUM",51,0)
 N CNT ;122 Subscript for export
"RTN","ECSUM",52,0)
 ;The following line has been updated in patches 122,126 and 131
"RTN","ECSUM",53,0)
 S CNT=1,^TMP($J,"ECRPT",CNT)="EC SCREEN STATUS^LOCATION^SERVICE^DSS UNIT^DSS UNIT IEN^DSS DEPT^SEND STATUS^DSS UNIT INACTIVE^CATEGORY^CPT CODE^PROCEDURE CODE^PROCEDURE NAME^SYNONYM^CLINIC IEN^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE"
"RTN","ECSUM",54,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECSUM",55,0)
 S ECOUT=0,ECPG=1
"RTN","ECSUM",56,0)
 S ECI=0
"RTN","ECSUM",57,0)
 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  D
"RTN","ECSUM",58,0)
 . S ECL=$P(ECLOC(ECI),U),ECLN=$P(ECLOC(ECI),U,2)
"RTN","ECSUM",59,0)
 . I ECALL D ^ECSUM1 Q  ;122
"RTN","ECSUM",60,0)
 . D SUM2^ECSUM1 ;122 Selected DSS units
"RTN","ECSUM",61,0)
CLEAR I $E(IOST,1,2)'="C-" G END
"RTN","ECSUM",62,0)
 G:ECOUT END
"RTN","ECSUM",63,0)
 I ECPG W !!!!!,"Press <RET> to continue  " R X:DTIME I '$T!(X="^") S ECOUT=1 G END
"RTN","ECSUM",64,0)
 G:ECALL END
"RTN","ECSUM",65,0)
ASK ;
"RTN","ECSUM",66,0)
 W @IOF F Q=0:0 D  I % Q
"RTN","ECSUM",67,0)
 .W !!,"Would you like to list another DSS Unit for this Location"
"RTN","ECSUM",68,0)
 .S %=2 D YN^DICN I % Q
"RTN","ECSUM",69,0)
 .W !!,"Enter YES to list another DSS Unit or <RET> to continue"
"RTN","ECSUM",70,0)
 G:%<0 END I %=1 D  G UNIT
"RTN","ECSUM",71,0)
 .K EC4,ECD,ECDN,ECC,ECCN,ECP,ECPN,ECSY,ECSYN,NATN,ECS,ECSN,ECFILE,ECSCN
"RTN","ECSUM",72,0)
 K EC4,ECD,ECDN,ECC,ECCN,ECP,ECPN,ECSY,ECSYN,NATN,ECS,ECSN,ECFILE,ECSCN
"RTN","ECSUM",73,0)
 I EC1 G LOC
"RTN","ECSUM",74,0)
END ;
"RTN","ECSUM",75,0)
 D ^ECKILL Q:$D(ECGUI)!($G(ECPTYP)="E")  W @IOF D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@" ;119
"RTN","ECSUM",76,0)
 Q
"RTN","ECSUM",77,0)
SAVE ;
"RTN","ECSUM",78,0)
 S (ZTSAVE("ECA*"),ZTSAVE("ECJLP"),ZTSAVE("ECC*"),ZTSAVE("ECD*"),ZTSAVE("ECL*"),ZTSAVE("ECM*"),ZTSAVE("ECP*"),ZTSAVE("ECS*"),ZTSAVE("EC4"))=""
"RTN","ECSUM",79,0)
 Q
"RTN","ECSUM1")
0^10^B30607449^B25603267
"RTN","ECSUM1",1,0)
ECSUM1 ;BIR/JLP,RHK-Category and Procedure Summary (cont'd) ;1/27/16  15:09
"RTN","ECSUM1",2,0)
 ;;2.0;EVENT CAPTURE;**4,19,23,33,47,95,100,119,122,126,131**;8 May 96;Build 13
"RTN","ECSUM1",3,0)
ALLU ;
"RTN","ECSUM1",4,0)
 N UCNT,ECDO,ECCO,ECNT,ECD,ECMORE,ECEDN,ECEDNST,ECCPT,ECDNPCE,ECDNDEPT ;119,122,126
"RTN","ECSUM1",5,0)
 S (ECD,ECMORE,ECNT,ECDO,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",6,0)
 F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'ECD  D  Q:ECOUT
"RTN","ECSUM1",7,0)
 .D SET,CATS I $G(ECPTYP)'="E" D PAGE:'ECOUT&UCNT ;119
"RTN","ECSUM1",8,0)
END Q:$G(ECPTYP)="E"  I 'ECNT N ECNOCNT S ECNOCNT=1 D HEADER W !!!,"Nothing Found." ;119
"RTN","ECSUM1",9,0)
 S ECPG=$G(ECPG,1)
"RTN","ECSUM1",10,0)
 Q
"RTN","ECSUM1",11,0)
SUM2 ;Prints Categories and Procedures for a DSS Unit
"RTN","ECSUM1",12,0)
 N UCNT,ECDO,ECCO,ECNT,ECMORE,ECEDN,ECEDNST,ECCPT,ECDNPCE,ECDNDEPT ;119,122,126
"RTN","ECSUM1",13,0)
 S (ECDO,ECMORE,UCNT,ECNT,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",14,0)
 D SET ;126
"RTN","ECSUM1",15,0)
 I ECC="ALL" D CATS G END
"RTN","ECSUM1",16,0)
 I 'ECJLP S ECC=0,ECCN="None",ECCO=999
"RTN","ECSUM1",17,0)
 D PROC
"RTN","ECSUM1",18,0)
 D END
"RTN","ECSUM1",19,0)
 Q
"RTN","ECSUM1",20,0)
SET ;set var
"RTN","ECSUM1",21,0)
 S (ECDN,ECEDN)=$S($P($G(^ECD(+ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),UCNT=0 ;119
"RTN","ECSUM1",22,0)
 S ECDN=ECDN_" ("_+ECD_")"_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"") ;131
"RTN","ECSUM1",23,0)
 S ECEDNST=$S($P($G(^ECD(+ECD,0)),U,6):"INACTIVE",1:"") ;119
"RTN","ECSUM1",24,0)
 S ECDNPCE=$$GET1^DIQ(724,+ECD,13,"E") ;126 send to pce
"RTN","ECSUM1",25,0)
 S ECDNDEPT=$$GET1^DIQ(724,+ECD,4,"E") ;126 DSS Dept
"RTN","ECSUM1",26,0)
 S ECS=+$P($G(^ECD(+ECD,0)),"^",2)
"RTN","ECSUM1",27,0)
 S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECSUM1",28,0)
 Q
"RTN","ECSUM1",29,0)
SETC ;set cats
"RTN","ECSUM1",30,0)
 I ECC=0 S ECCN="None" Q
"RTN","ECSUM1",31,0)
 S ECCN=$S($P($G(^EC(726,+ECC,0)),"^")]"":$P(^(0),"^"),1:"ZZ #"_ECC_" MISSING DATA")
"RTN","ECSUM1",32,0)
 S ECCN=ECCN_$S($P($G(^EC(726,+ECC,0)),"^",3):" **Inactive**",1:"")
"RTN","ECSUM1",33,0)
 S ECMORE=1
"RTN","ECSUM1",34,0)
 Q
"RTN","ECSUM1",35,0)
HEADER ;
"RTN","ECSUM1",36,0)
 W:$E(IOST,1,2)="C-"!(ECPG>1) @IOF
"RTN","ECSUM1",37,0)
 W !!,?25,$S($G(ECDIS):"DISABLED ",1:""),"CATEGORY AND PROCEDURE SUMMARY",?70,"Page: ",ECPG,! ;131 added conditional print of disabled
"RTN","ECSUM1",38,0)
 W ?27,$S(ECSCN="I":"INACTIVE",ECSCN="A":"ACTIVE",1:" ALL")_" EVENT CODE"
"RTN","ECSUM1",39,0)
 W " SCREENS",!?25,"Run Date:    ",ECRDT,!?25,"LOCATION:    "_ECLN ;126
"RTN","ECSUM1",40,0)
 I $G(ECNOCNT) W ! S ECPG=ECPG+1
"RTN","ECSUM1",41,0)
 I '$G(ECNOCNT) D  ;126
"RTN","ECSUM1",42,0)
 .W !,?25,"SERVICE:     ",ECSN,!?25,"DSS UNIT:    "_ECDN,!,?25,"SEND STATUS: ",ECDNPCE,!,?25,"DSS DEPT:    ",ECDNDEPT ;126
"RTN","ECSUM1",43,0)
 .W !!,"PROC",?7,"PROCEDURE NAME",!,"CODE",?7,"SYNONYM",!,?9,"CLINIC IEN/CLINIC/STOP CODE/CREDIT STOP/CHAR4",! S ECPG=ECPG+1 ;126
"RTN","ECSUM1",44,0)
 F I=1:1:80 W "-"
"RTN","ECSUM1",45,0)
 Q
"RTN","ECSUM1",46,0)
CATS ;
"RTN","ECSUM1",47,0)
 S ECC="",ECCO=0
"RTN","ECSUM1",48,0)
 F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  D  Q:ECOUT  ;131 Moved calls to dot structure
"RTN","ECSUM1",49,0)
 .I '$G(ECDIS),ECC,'$P(^ECD(ECD,0),U,11) Q  ;131 If running the category and procedure summary report, and there's a category, and the DSS unit is set to "no categories" then quit
"RTN","ECSUM1",50,0)
 .D SETC,PROC ;131 Moved calls here from for loop
"RTN","ECSUM1",51,0)
 S ECMORE=0
"RTN","ECSUM1",52,0)
 Q
"RTN","ECSUM1",53,0)
PROC ;
"RTN","ECSUM1",54,0)
 S ECP=""
"RTN","ECSUM1",55,0)
 F  S ECP=$O(^ECJ("AP",ECL,ECD,ECC,ECP)) Q:ECP=""  D SETP Q:ECOUT
"RTN","ECSUM1",56,0)
 S ECMORE=0
"RTN","ECSUM1",57,0)
 Q
"RTN","ECSUM1",58,0)
SETP ;set procs
"RTN","ECSUM1",59,0)
 N ECSC,ECSSC,EC4CHAR,NODE0,ECINDT ;122,126
"RTN","ECSUM1",60,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECSUM1",61,0)
 S ECINDT=$P($G(^ECJ(ECPSY,0)),"^",2)
"RTN","ECSUM1",62,0)
 I ECSCN="A",ECINDT'="" Q
"RTN","ECSUM1",63,0)
 I ECSCN="I",ECINDT="" Q
"RTN","ECSUM1",64,0)
 I ECD'=ECDO D:$G(ECPTYP)'="E" HEADER S ECDO=ECD ;119
"RTN","ECSUM1",65,0)
 I ECC'=ECCO D  S ECCO=ECC I ECOUT Q
"RTN","ECSUM1",66,0)
 .I $G(ECPTYP)="E" Q  ;119
"RTN","ECSUM1",67,0)
 .W !!,$S($G(ECDIS):"Disabled ",1:""),"Category:  "_ECCN D:$Y+4>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN) ;122,131 Removed white space from front of line
"RTN","ECSUM1",68,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2),EC4=+$P($G(^("PRO")),"^",4)
"RTN","ECSUM1",69,0)
 S EC2="" I EC4 S EC2=$S($P($G(^SC(EC4,0)),"^")]"":$P(^(0),"^"),1:"NO ASSOCIATED CLINIC")
"RTN","ECSUM1",70,0)
 S (ECSC,ECSSC,EC4CHAR)="" ;122
"RTN","ECSUM1",71,0)
 I EC4 S NODE0=$G(^ECX(728.44,EC4,0)),ECSC=$P(NODE0,U,2),ECSSC=$S($P(NODE0,U,3)'="":$P(NODE0,U,3),$G(ECPTYP)="E":"",1:"000"),EC4CHAR=$P($G(^ECX(728.441,+$P(NODE0,U,8),0)),U) ;122 Get stop code, credit stop code, char4 code
"RTN","ECSUM1",72,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,$E(ECFILE)="E":725,1:"UNKNOWN")
"RTN","ECSUM1",73,0)
 I ECFILE="UNKNOWN" S ECPN="UNKNOWN",NATN="UNKNOWN"
"RTN","ECSUM1",74,0)
 I ECFILE=81 S ECPI=$$CPT^ICPTCOD(+ECP) D
"RTN","ECSUM1",75,0)
 .S ECPN=$S($P(ECPI,"^",3)]"":$P(ECPI,"^",3),1:"UNKNOWN"),NATN=$S($P(ECPI,"^",2)]"":$P(ECPI,"^",2),1:"NOT LISTED") K ECPI
"RTN","ECSUM1",76,0)
 I ECFILE=725 S ECPN=$S($P($G(^EC(725,+ECP,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),NATN=$S($P($G(^EC(725,+ECP,0)),"^",2)]"":$P(^(0),"^",2),1:"NOT LISTED")
"RTN","ECSUM1",77,0)
 I ECFILE=725 S ECCPT=$$CPT^ICPTCOD(+$P($G(^EC(725,+ECP,0)),U,5)),ECCPT=$S($P(ECCPT,U)=-1:"",1:$P(ECCPT,U,2)) ;119
"RTN","ECSUM1",78,0)
 S ECNT=ECNT+1,UCNT=UCNT+1 ;126
"RTN","ECSUM1",79,0)
 I $G(ECPTYP)="E" D  Q  ;119
"RTN","ECSUM1",80,0)
 .D SET ; SET THE DSS UNIT AND UNIT STATUS VARIABLES 119
"RTN","ECSUM1",81,0)
 .S CNT=CNT+1 ;119
"RTN","ECSUM1",82,0)
 .S ^TMP($J,"ECRPT",CNT)=$S($P($G(^ECJ(+ECPSY,0)),U,2):"INACTIVE",1:"ACTIVE")_U_ECLN_U_ECSN_U_ECEDN_U_+ECD_U_ECDNDEPT ;119,122,126,131
"RTN","ECSUM1",83,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_ECDNPCE_U_ECEDNST_U_ECCN_U_$S(ECFILE=81:NATN_U,1:ECCPT_U_NATN)_U_ECPN_U_ECPSYN_U_$S(EC4:EC4,1:"")_U_EC2_U_ECSC_U_ECSSC_U_EC4CHAR ;119,122,126
"RTN","ECSUM1",84,0)
 W !,NATN,?7,ECPN,"  (",$S(ECFILE=81:"CPT",1:"EC"),")" W:ECPSYN'="" !,?7,ECPSYN ;122,126
"RTN","ECSUM1",85,0)
 W:EC2]"" !,?9,EC4_"/"_EC2_"/"_ECSC_"/"_ECSSC_"/"_EC4CHAR_"" ;122,126
"RTN","ECSUM1",86,0)
 I $P($G(^ECJ(+ECPSY,0)),"^",2),ECSCN="B" W ?70,"*INACTIVE*"
"RTN","ECSUM1",87,0)
 D:($Y+3)>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN) Q:ECOUT
"RTN","ECSUM1",88,0)
 Q
"RTN","ECSUM1",89,0)
PAGE ;
"RTN","ECSUM1",90,0)
 N SS,JJ
"RTN","ECSUM1",91,0)
 I $D(ECPG),$E(IOST,1,2)="C-" D
"RTN","ECSUM1",92,0)
 . S SS=22-$Y F JJ=1:1:SS W !
"RTN","ECSUM1",93,0)
 . S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECSUM1",94,0)
 Q
"RTN","ECSUM1",95,0)
MORE I ECMORE W !!,$S($G(ECDIS):"Disabled ",1:""),"Category:  "_ECCN ;122,131 Removed white space from front of line
"RTN","ECSUM1",96,0)
 Q
"RTN","ECU1RPC")
0^18^B55194101^B19527731
"RTN","ECU1RPC",1,0)
ECU1RPC ;ALB/ACS;Event Capture Spreadsheet Utilities ;2/9/16  13:11
"RTN","ECU1RPC",2,0)
 ;;2.0;EVENT CAPTURE ;**25,30,49,61,131**;8 May 96;Build 13
"RTN","ECU1RPC",3,0)
 ;
"RTN","ECU1RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECU1RPC",5,0)
 ;
"RTN","ECU1RPC",6,0)
 ;INPUT     ECDATA  - Contains column headers or a row of Event Capture
"RTN","ECU1RPC",7,0)
 ;                    spreadshet data
"RTN","ECU1RPC",8,0)
 ;
"RTN","ECU1RPC",9,0)
 ;
"RTN","ECU1RPC",10,0)
 ;OTHER     ^TMP($J,"COLS" array will store the column header order
"RTN","ECU1RPC",11,0)
 ;
"RTN","ECU1RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECU1RPC",13,0)
 ;======================================================================
"RTN","ECU1RPC",14,0)
 ;MODIFICATIONS:
"RTN","ECU1RPC",15,0)
 ;
"RTN","ECU1RPC",16,0)
 ;08/2001    EC*2.0*30   Changed column header from 'Station' to
"RTN","ECU1RPC",17,0)
 ;                       'Location'.
"RTN","ECU1RPC",18,0)
 ;08/2016    EC*2.0*131  Added many new columns
"RTN","ECU1RPC",19,0)
 ;======================================================================
"RTN","ECU1RPC",20,0)
 ;
"RTN","ECU1RPC",21,0)
ECHDRS(ECDATA) ;
"RTN","ECU1RPC",22,0)
 ;
"RTN","ECU1RPC",23,0)
 ;--kill temporary file
"RTN","ECU1RPC",24,0)
 K ^TMP($J,"COLS")
"RTN","ECU1RPC",25,0)
 N PIECENUM,NUMCOLS
"RTN","ECU1RPC",26,0)
 ;
"RTN","ECU1RPC",27,0)
 ; --Set up column header order
"RTN","ECU1RPC",28,0)
 S NUMCOLS=$L(ECDATA,U)
"RTN","ECU1RPC",29,0)
 ;
"RTN","ECU1RPC",30,0)
 ; --Remove first piece "COLHEADERS" from colum header string--
"RTN","ECU1RPC",31,0)
 S ECDATA=$P(ECDATA,U,2,NUMCOLS)
"RTN","ECU1RPC",32,0)
 S NUMCOLS=$L(ECDATA,U)
"RTN","ECU1RPC",33,0)
 ;
"RTN","ECU1RPC",34,0)
 ; --Spin through each piece in string and assign 'piece' value 
"RTN","ECU1RPC",35,0)
 F PIECENUM=1:1 Q:PIECENUM>NUMCOLS  D
"RTN","ECU1RPC",36,0)
 . S DATA=$P(ECDATA,U,PIECENUM)
"RTN","ECU1RPC",37,0)
 . I DATA["Record Num" S ECRECPC=PIECENUM Q
"RTN","ECU1RPC",38,0)
 . I DATA["Location" S ECSTAPC=PIECENUM Q
"RTN","ECU1RPC",39,0)
 . I DATA["SSN" S ECSSNPC=PIECENUM Q
"RTN","ECU1RPC",40,0)
 . I DATA["Pat LName" S ECPATLPC=PIECENUM Q
"RTN","ECU1RPC",41,0)
 . I DATA["Pat FName" S ECPATFPC=PIECENUM Q
"RTN","ECU1RPC",42,0)
 . I DATA["Unit Name" S ECDSSPC=PIECENUM Q
"RTN","ECU1RPC",43,0)
 . I DATA["Unit Num" S ECDCMPC=PIECENUM Q
"RTN","ECU1RPC",44,0)
 . I DATA["Unit IEN" S ECUNITPC=PIECENUM Q
"RTN","ECU1RPC",45,0)
 . I DATA["Proc" S ECPROCPC=PIECENUM Q
"RTN","ECU1RPC",46,0)
 . I DATA["Volume" S ECVOLPC=PIECENUM Q
"RTN","ECU1RPC",47,0)
 . I DATA["Ordering Sect" S ECOSPC=PIECENUM Q
"RTN","ECU1RPC",48,0)
 . I DATA["Prov 1" S ECPRV1PC=PIECENUM Q  ;131
"RTN","ECU1RPC",49,0)
 . I DATA["Prov 2" S ECPRV2PC=PIECENUM Q  ;131
"RTN","ECU1RPC",50,0)
 . I DATA["Prov 3" S ECPRV3PC=PIECENUM Q  ;131
"RTN","ECU1RPC",51,0)
 . I DATA["Prov 4" S ECPRV4PC=PIECENUM Q  ;131
"RTN","ECU1RPC",52,0)
 . I DATA["Prov 5" S ECPRV5PC=PIECENUM Q  ;131
"RTN","ECU1RPC",53,0)
 . I DATA["Prov 6" S ECPRV6PC=PIECENUM Q  ;131
"RTN","ECU1RPC",54,0)
 . I DATA["Prov 7" S ECPRV7PC=PIECENUM Q  ;131
"RTN","ECU1RPC",55,0)
 . I DATA["Date/Time" S ECENCPC=PIECENUM Q
"RTN","ECU1RPC",56,0)
 . I DATA["Category" S ECCATPC=PIECENUM Q
"RTN","ECU1RPC",57,0)
 . I DATA["Diag" S ECDXPC=PIECENUM Q
"RTN","ECU1RPC",58,0)
 . I DATA["Assoc Clin Name" S ECCLNNPC=PIECENUM Q  ;131
"RTN","ECU1RPC",59,0)
 . I DATA["Assoc Clin IEN" S ECCLNIPC=PIECENUM Q  ;131
"RTN","ECU1RPC",60,0)
 . I DATA["Mod 1" S ECMOD1PC=PIECENUM Q  ;131
"RTN","ECU1RPC",61,0)
 . I DATA["Mod 2" S ECMOD2PC=PIECENUM Q  ;131
"RTN","ECU1RPC",62,0)
 . I DATA["Mod 3" S ECMOD3PC=PIECENUM Q  ;131
"RTN","ECU1RPC",63,0)
 . I DATA["Mod 4" S ECMOD4PC=PIECENUM Q  ;131
"RTN","ECU1RPC",64,0)
 . I DATA["Mod 5" S ECMOD5PC=PIECENUM Q  ;131
"RTN","ECU1RPC",65,0)
 . I DATA["Agent" S ECAOPC=PIECENUM Q  ;131
"RTN","ECU1RPC",66,0)
 . I DATA["Ion" S ECIRPC=PIECENUM Q  ;131
"RTN","ECU1RPC",67,0)
 . I DATA["Service" S ECSCPC=PIECENUM Q  ;131
"RTN","ECU1RPC",68,0)
 . I DATA["SW A" S ECSWAPC=PIECENUM Q  ;131
"RTN","ECU1RPC",69,0)
 . I DATA["Mil Sexual" S ECMSTPC=PIECENUM Q  ;131
"RTN","ECU1RPC",70,0)
 . I DATA["Head" S ECHNCPC=PIECENUM Q  ;131
"RTN","ECU1RPC",71,0)
 . I DATA["Combat" S ECCVPC=PIECENUM Q  ;131
"RTN","ECU1RPC",72,0)
 . I DATA["SHAD" S ECSHADPC=PIECENUM Q  ;131
"RTN","ECU1RPC",73,0)
 . I DATA["Camp" S ECCLPC=PIECENUM Q  ;131
"RTN","ECU1RPC",74,0)
 . ;
"RTN","ECU1RPC",75,0)
 . I DATA["Pat Stat" S ECPSTATV=+DATA Q
"RTN","ECU1RPC",76,0)
 . I DATA["Override Deceased" S ECDECPAT=+DATA Q
"RTN","ECU1RPC",77,0)
 . I DATA["Override Duplicate" S ECFILDUP=+DATA
"RTN","ECU1RPC",78,0)
 ; 
"RTN","ECU1RPC",79,0)
 ;--Move column header piece numbers into Temp file ^TMP($J,"COLS")
"RTN","ECU1RPC",80,0)
 ;   for future reference
"RTN","ECU1RPC",81,0)
 ;
"RTN","ECU1RPC",82,0)
 K ^TMP($J,"COLS")
"RTN","ECU1RPC",83,0)
 S ^TMP($J,"COLS","ECRECPC")=ECRECPC
"RTN","ECU1RPC",84,0)
 S ^TMP($J,"COLS","ECSTAPC")=ECSTAPC
"RTN","ECU1RPC",85,0)
 S ^TMP($J,"COLS","ECSSNPC")=ECSSNPC
"RTN","ECU1RPC",86,0)
 S ^TMP($J,"COLS","ECPATLPC")=ECPATLPC
"RTN","ECU1RPC",87,0)
 S ^TMP($J,"COLS","ECPATFPC")=ECPATFPC
"RTN","ECU1RPC",88,0)
 S ^TMP($J,"COLS","ECDSSPC")=ECDSSPC
"RTN","ECU1RPC",89,0)
 S ^TMP($J,"COLS","ECDCMPC")=ECDCMPC
"RTN","ECU1RPC",90,0)
 S ^TMP($J,"COLS","ECUNITPC")=ECUNITPC
"RTN","ECU1RPC",91,0)
 S ^TMP($J,"COLS","ECPROCPC")=ECPROCPC
"RTN","ECU1RPC",92,0)
 S ^TMP($J,"COLS","ECVOLPC")=ECVOLPC
"RTN","ECU1RPC",93,0)
 S ^TMP($J,"COLS","ECOSPC")=ECOSPC
"RTN","ECU1RPC",94,0)
 S ^TMP($J,"COLS","ECPRV1PC")=ECPRV1PC ;131
"RTN","ECU1RPC",95,0)
 S ^TMP($J,"COLS","ECENCPC")=ECENCPC
"RTN","ECU1RPC",96,0)
 S ^TMP($J,"COLS","ECCATPC")=ECCATPC
"RTN","ECU1RPC",97,0)
 S ^TMP($J,"COLS","ECDXPC")=ECDXPC
"RTN","ECU1RPC",98,0)
 S ^TMP($J,"COLS","ECCLNNPC")=ECCLNNPC ;131
"RTN","ECU1RPC",99,0)
 ;131 New entries added here
"RTN","ECU1RPC",100,0)
 S ^TMP($J,"COLS","ECCLNIPC")=ECCLNIPC
"RTN","ECU1RPC",101,0)
 S ^TMP($J,"COLS","ECMOD1PC")=ECMOD1PC
"RTN","ECU1RPC",102,0)
 S ^TMP($J,"COLS","ECMOD2PC")=ECMOD2PC
"RTN","ECU1RPC",103,0)
 S ^TMP($J,"COLS","ECMOD3PC")=ECMOD3PC
"RTN","ECU1RPC",104,0)
 S ^TMP($J,"COLS","ECMOD4PC")=ECMOD4PC
"RTN","ECU1RPC",105,0)
 S ^TMP($J,"COLS","ECMOD5PC")=ECMOD5PC
"RTN","ECU1RPC",106,0)
 S ^TMP($J,"COLS","ECAOPC")=ECAOPC
"RTN","ECU1RPC",107,0)
 S ^TMP($J,"COLS","ECIRPC")=ECIRPC
"RTN","ECU1RPC",108,0)
 S ^TMP($J,"COLS","ECSCPC")=ECSCPC
"RTN","ECU1RPC",109,0)
 S ^TMP($J,"COLS","ECSWAPC")=ECSWAPC
"RTN","ECU1RPC",110,0)
 S ^TMP($J,"COLS","ECMSTPC")=ECMSTPC
"RTN","ECU1RPC",111,0)
 S ^TMP($J,"COLS","ECHNCPC")=ECHNCPC
"RTN","ECU1RPC",112,0)
 S ^TMP($J,"COLS","ECCVPC")=ECCVPC
"RTN","ECU1RPC",113,0)
 S ^TMP($J,"COLS","ECSHADPC")=ECSHADPC
"RTN","ECU1RPC",114,0)
 S ^TMP($J,"COLS","ECCLPC")=ECCLPC
"RTN","ECU1RPC",115,0)
 S ^TMP($J,"COLS","ECPRV2PC")=ECPRV2PC
"RTN","ECU1RPC",116,0)
 S ^TMP($J,"COLS","ECPRV3PC")=ECPRV3PC
"RTN","ECU1RPC",117,0)
 S ^TMP($J,"COLS","ECPRV4PC")=ECPRV4PC
"RTN","ECU1RPC",118,0)
 S ^TMP($J,"COLS","ECPRV5PC")=ECPRV5PC
"RTN","ECU1RPC",119,0)
 S ^TMP($J,"COLS","ECPRV6PC")=ECPRV6PC
"RTN","ECU1RPC",120,0)
 S ^TMP($J,"COLS","ECPRV7PC")=ECPRV7PC
"RTN","ECU1RPC",121,0)
 S ^TMP($J,"COLS","ECPSTATV")=ECPSTATV
"RTN","ECU1RPC",122,0)
 S ^TMP($J,"COLS","ECDECPAT")=ECDECPAT
"RTN","ECU1RPC",123,0)
 S ^TMP($J,"COLS","ECFILDUP")=ECFILDUP
"RTN","ECU1RPC",124,0)
 ;
"RTN","ECU1RPC",125,0)
 Q
"RTN","ECU1RPC",126,0)
 ;
"RTN","ECU1RPC",127,0)
GETDATA(ECDATA) ;
"RTN","ECU1RPC",128,0)
 ;
"RTN","ECU1RPC",129,0)
 N NUM ;131
"RTN","ECU1RPC",130,0)
 ;--Get data piece numbers and uploaded data values
"RTN","ECU1RPC",131,0)
 S ECRECPC=$G(^TMP($J,"COLS","ECRECPC"))
"RTN","ECU1RPC",132,0)
 S ECRECV=$P(ECDATA,U,ECRECPC)
"RTN","ECU1RPC",133,0)
 ;
"RTN","ECU1RPC",134,0)
 S ECSTAPC=$G(^TMP($J,"COLS","ECSTAPC"))
"RTN","ECU1RPC",135,0)
 S ECSTAV=$P(ECDATA,U,ECSTAPC)
"RTN","ECU1RPC",136,0)
 ;
"RTN","ECU1RPC",137,0)
 S ECSSNPC=$G(^TMP($J,"COLS","ECSSNPC"))
"RTN","ECU1RPC",138,0)
 I ECSSNPC S ECSSNV=$P(ECDATA,U,ECSSNPC)
"RTN","ECU1RPC",139,0)
 ;
"RTN","ECU1RPC",140,0)
 S ECPATLPC=$G(^TMP($J,"COLS","ECPATLPC"))
"RTN","ECU1RPC",141,0)
 S ECPATLV=$$UP^XLFSTR($P(ECDATA,U,ECPATLPC)) ;131 Convert to upper case
"RTN","ECU1RPC",142,0)
 ;
"RTN","ECU1RPC",143,0)
 S ECPATFPC=$G(^TMP($J,"COLS","ECPATFPC"))
"RTN","ECU1RPC",144,0)
 S ECPATFV=$$UP^XLFSTR($P(ECDATA,U,ECPATFPC)) ;131 Convert to upper case
"RTN","ECU1RPC",145,0)
 ; --concatenate patient name into one string, comma separated
"RTN","ECU1RPC",146,0)
 S ECPATV=ECPATLV_","_ECPATFV
"RTN","ECU1RPC",147,0)
 ;
"RTN","ECU1RPC",148,0)
 S ECDSSPC=$G(^TMP($J,"COLS","ECDSSPC"))
"RTN","ECU1RPC",149,0)
 S ECDSSV=$P(ECDATA,U,ECDSSPC)
"RTN","ECU1RPC",150,0)
 ;
"RTN","ECU1RPC",151,0)
 S ECDCMPC=$G(^TMP($J,"COLS","ECDCMPC"))
"RTN","ECU1RPC",152,0)
 S ECDCMV=$P(ECDATA,U,ECDCMPC)
"RTN","ECU1RPC",153,0)
 ;
"RTN","ECU1RPC",154,0)
 S ECUNITPC=$G(^TMP($J,"COLS","ECUNITPC"))
"RTN","ECU1RPC",155,0)
 S ECUNITV=$P(ECDATA,U,ECUNITPC)
"RTN","ECU1RPC",156,0)
 ;
"RTN","ECU1RPC",157,0)
 S ECPROCPC=$G(^TMP($J,"COLS","ECPROCPC"))
"RTN","ECU1RPC",158,0)
 S ECPROCV=$P(ECDATA,U,ECPROCPC)
"RTN","ECU1RPC",159,0)
 ;
"RTN","ECU1RPC",160,0)
 S ECVOLPC=$G(^TMP($J,"COLS","ECVOLPC"))
"RTN","ECU1RPC",161,0)
 S ECVOLV=$P(ECDATA,U,ECVOLPC)
"RTN","ECU1RPC",162,0)
 ;
"RTN","ECU1RPC",163,0)
 S ECOSPC=$G(^TMP($J,"COLS","ECOSPC"))
"RTN","ECU1RPC",164,0)
 S ECOSV=$P(ECDATA,U,ECOSPC)
"RTN","ECU1RPC",165,0)
 ;Get all the provider values
"RTN","ECU1RPC",166,0)
 ;
"RTN","ECU1RPC",167,0)
 F NUM=1:1:7 S @("ECPRV"_NUM_"V")=$$UP^XLFSTR($P(ECDATA,U,$G(^TMP($J,"COLS",("ECPRV"_NUM_"PC"))))),@("ECPRV"_NUM_"PC")=$G(^TMP($J,"COLS",("ECPRV"_NUM_"PC"))) ;131
"RTN","ECU1RPC",168,0)
 ;
"RTN","ECU1RPC",169,0)
 S ECENCPC=$G(^TMP($J,"COLS","ECENCPC"))
"RTN","ECU1RPC",170,0)
 S ECENCV=$P(ECDATA,U,ECENCPC),ECENCV=$TR(ECENCV," ","")
"RTN","ECU1RPC",171,0)
 ;
"RTN","ECU1RPC",172,0)
 S ECCATPC=$G(^TMP($J,"COLS","ECCATPC"))
"RTN","ECU1RPC",173,0)
 S ECCATV=$P(ECDATA,U,ECCATPC)
"RTN","ECU1RPC",174,0)
 ;
"RTN","ECU1RPC",175,0)
 S ECDXPC=$G(^TMP($J,"COLS","ECDXPC"))
"RTN","ECU1RPC",176,0)
 S ECDXV=$P(ECDATA,U,ECDXPC)
"RTN","ECU1RPC",177,0)
 ;
"RTN","ECU1RPC",178,0)
 S ECCLNNPC=$G(^TMP($J,"COLS","ECCLNNPC")) ;131
"RTN","ECU1RPC",179,0)
 S ECCLNNV=$P(ECDATA,U,ECCLNNPC) ;131
"RTN","ECU1RPC",180,0)
 S ECCLNIV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCLNIPC"))),ECCLNIPC=$G(^TMP($J,"COLS","ECCLNIPC")) ;131
"RTN","ECU1RPC",181,0)
 ;
"RTN","ECU1RPC",182,0)
 ;Get all CPT Mod values
"RTN","ECU1RPC",183,0)
 F NUM=1:1:5 S @("ECMOD"_NUM_"V")=$$UP^XLFSTR($P(ECDATA,U,$G(^TMP($J,"COLS",("ECMOD"_NUM_"PC"))))),@("ECMOD"_NUM_"PC")=$G(^TMP($J,"COLS",("ECMOD"_NUM_"PC"))) ;131
"RTN","ECU1RPC",184,0)
 ;
"RTN","ECU1RPC",185,0)
 ;131, all patient eligibilities added in this section
"RTN","ECU1RPC",186,0)
 S ECAOV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECAOPC"))),ECAOPC=$G(^TMP($J,"COLS","ECAOPC"))
"RTN","ECU1RPC",187,0)
 S ECIRV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECIRPC"))),ECIRPC=$G(^TMP($J,"COLS","ECIRPC"))
"RTN","ECU1RPC",188,0)
 S ECSCV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSCPC"))),ECSCPC=$G(^TMP($J,"COLS","ECSCPC"))
"RTN","ECU1RPC",189,0)
 S ECSWAV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSWAPC"))),ECSWAPC=$G(^TMP($J,"COLS","ECSWAPC"))
"RTN","ECU1RPC",190,0)
 S ECMSTV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECMSTPC"))),ECMSTPC=$G(^TMP($J,"COLS","ECMSTPC"))
"RTN","ECU1RPC",191,0)
 S ECHNCV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECHNCPC"))),ECHNCPC=$G(^TMP($J,"COLS","ECHNCPC"))
"RTN","ECU1RPC",192,0)
 S ECCVV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCVPC"))),ECCVPC=$G(^TMP($J,"COLS","ECCVPC"))
"RTN","ECU1RPC",193,0)
 S ECSHADV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSHADPC"))),ECSHADPC=$G(^TMP($J,"COLS","ECSHADPC"))
"RTN","ECU1RPC",194,0)
 S ECCLV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCLPC"))),ECCLPC=$G(^TMP($J,"COLS","ECCLPC"))
"RTN","ECU1RPC",195,0)
 ;
"RTN","ECU1RPC",196,0)
 S ECPSTATV=$G(^TMP($J,"COLS","ECPSTATV"))
"RTN","ECU1RPC",197,0)
 ;
"RTN","ECU1RPC",198,0)
 S ECDECPAT=$G(^TMP($J,"COLS","ECDECPAT"))
"RTN","ECU1RPC",199,0)
 ;
"RTN","ECU1RPC",200,0)
 S ECFILDUP=$G(^TMP($J,"COLS","ECFILDUP"))
"RTN","ECU1RPC",201,0)
 ;
"RTN","ECU1RPC",202,0)
END Q
"RTN","ECUERPC")
0^23^B63459075^B62941200
"RTN","ECUERPC",1,0)
ECUERPC ;ALB/JAM - Event Capture Data Entry Broker Utilities ;6/20/16  12:13
"RTN","ECUERPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,46,47,59,72,95,114,126,129,131**;8 May 96;Build 13
"RTN","ECUERPC",3,0)
 ;
"RTN","ECUERPC",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECUERPC",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR5747
"RTN","ECUERPC",6,0)
 ;
"RTN","ECUERPC",7,0)
USRUNT(RESULTS,ECARY) ;
"RTN","ECUERPC",8,0)
 ;This broker call returns an array of DSS units for a user & location
"RTN","ECUERPC",9,0)
 ;        RPC: EC GETUSRDSSUNIT
"RTN","ECUERPC",10,0)
 ;INPUTS     ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",11,0)
 ;            1. ECL   - Location IEN (if define gives User's DSS 
"RTN","ECUERPC",12,0)
 ;                       units for a location)
"RTN","ECUERPC",13,0)
 ;            2. ECDUZ - New Person IEN (if define gives list of 
"RTN","ECUERPC",14,0)
 ;                       DSS Units available to user)
"RTN","ECUERPC",15,0)
 ;
"RTN","ECUERPC",16,0)
 ;OUTPUTS     RESULTS - Array of DSS Units. Data pieces as follows:-
"RTN","ECUERPC",17,0)
 ;            PIECE - Description
"RTN","ECUERPC",18,0)
 ;              1     IEN of file 724
"RTN","ECUERPC",19,0)
 ;              2     Name of DSS Unit
"RTN","ECUERPC",20,0)
 ;              3     Send to PCE Flag
"RTN","ECUERPC",21,0)
 ;              4     Data Entry Date/Time Default
"RTN","ECUERPC",22,0)
 N ECL,ECDUZ,CNT,STR,DPT,IEN
"RTN","ECUERPC",23,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",24,0)
 S ECL=$P(ECARY,U),ECDUZ=$P(ECARY,U,2) I ECL="",ECDUZ="" Q
"RTN","ECUERPC",25,0)
 ;S ECDUZ=$G(DUZ,U),ECL=$P(ECARY,U) I (ECDUZ="")!(ECL="") Q
"RTN","ECUERPC",26,0)
 K ^TMP($J,"ECUSRUNT") S (DPT,CNT)=0
"RTN","ECUERPC",27,0)
 I ECL'="",ECDUZ="" S ECDUZ=$G(DUZ,U) I ECDUZ="" Q
"RTN","ECUERPC",28,0)
 I $D(^XUSEC("ECALLU",ECDUZ)) S DPT="" D
"RTN","ECUERPC",29,0)
 .I ECL="" S ^TMP($J,"ECUSRUNT",CNT+1)="ALL^ALL" Q
"RTN","ECUERPC",30,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",31,0)
 .F  S DPT=$O(^ECD("B",DPT))  Q:DPT=""  S IEN=0 D
"RTN","ECUERPC",32,0)
 ..F  S IEN=$O(^ECD("B",DPT,IEN)) Q:'IEN  D UNTCHK
"RTN","ECUERPC",33,0)
 E  D
"RTN","ECUERPC",34,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",35,0)
 .F  S DPT=$O(^VA(200,ECDUZ,"EC",DPT)) Q:'DPT  S IEN=DPT D UNTCHK
"RTN","ECUERPC",36,0)
 S RESULTS=$NA(^TMP($J,"ECUSRUNT"))
"RTN","ECUERPC",37,0)
 Q
"RTN","ECUERPC",38,0)
UNTCHK ;Check if DSS unit exist as event code screen and if active
"RTN","ECUERPC",39,0)
 N DSSF,DFD
"RTN","ECUERPC",40,0)
 ;I '$D(^ECJ("AP",ECL,IEN))!($P($G(^ECD(IEN,0)),U,6)) Q
"RTN","ECUERPC",41,0)
 I ECL'="",'$D(^ECJ("AP",ECL,IEN)) Q
"RTN","ECUERPC",42,0)
 I ($P($G(^ECD(IEN,0)),U,6))!('$P($G(^ECD(IEN,0)),U,8)) Q
"RTN","ECUERPC",43,0)
 ;Check if event code screens associated with DSS unit are active
"RTN","ECUERPC",44,0)
 I ECL'="",'$$ECSCHK(ECL,IEN) Q
"RTN","ECUERPC",45,0)
 S DSSF=$P(^ECD(IEN,0),"^",14) S:DSSF="" DSSF="N"
"RTN","ECUERPC",46,0)
 S DFD=$S($P(^ECD(IEN,0),"^",12)="N":"N",1:"X") ; added by VMP
"RTN","ECUERPC",47,0)
 S CNT=CNT+1,STR=IEN_"^"_$P(^ECD(IEN,0),"^")_U_DSSF_"^"_DFD
"RTN","ECUERPC",48,0)
 S ^TMP($J,"ECUSRUNT",CNT)=STR
"RTN","ECUERPC",49,0)
 Q
"RTN","ECUERPC",50,0)
ECSCHK(ECL,ECIEN) ;Check if any event code screens associated with DSS unit are active; EC*129
"RTN","ECUERPC",51,0)
 N ECAT,ECPRX,ECS,ECNODE,ECFLG
"RTN","ECUERPC",52,0)
 S ECAT="",ECFLG=0
"RTN","ECUERPC",53,0)
 F  S ECAT=$O(^ECJ("AP",ECL,ECIEN,ECAT)) Q:ECAT=""  D  Q:ECFLG
"RTN","ECUERPC",54,0)
 .S ECPRX="" F  S ECPRX=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX)) Q:ECPRX=""  D  Q:ECFLG
"RTN","ECUERPC",55,0)
 ..S ECS=0 F  S ECS=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX,ECS)) Q:'ECS  D  Q:ECFLG
"RTN","ECUERPC",56,0)
 ...S ECNODE=$G(^ECJ(ECS,0)) I $P(ECNODE,"^",2)="" S ECFLG=1
"RTN","ECUERPC",57,0)
 Q ECFLG
"RTN","ECUERPC",58,0)
 ;
"RTN","ECUERPC",59,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUERPC",60,0)
 ;This broker entry point returns an array of categories for an Event 
"RTN","ECUERPC",61,0)
 ;Code screen based on location and DSS unit.
"RTN","ECUERPC",62,0)
 ;        RPC: EC GETECSCATS
"RTN","ECUERPC",63,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",64,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",65,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",66,0)
 ;            ECCSTA-Active or inactive category
"RTN","ECUERPC",67,0)
 ;                   A-ctive (default), I-nactive, B-oth
"RTN","ECUERPC",68,0)
 ;
"RTN","ECUERPC",69,0)
 ;OUTPUTS     RESULTS - Array of categories. Data pieces as follows:-
"RTN","ECUERPC",70,0)
 ;            PIECE - Description
"RTN","ECUERPC",71,0)
 ;              1 - Category IEN
"RTN","ECUERPC",72,0)
 ;              2 - Category description
"RTN","ECUERPC",73,0)
 ;
"RTN","ECUERPC",74,0)
 N ECL,ECD,ECC,CNT,DATA,ECCSTA
"RTN","ECUERPC",75,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",76,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2) I (ECL="")!(ECD="") Q
"RTN","ECUERPC",77,0)
 S ECCSTA=$P(ECARY,U,3)
"RTN","ECUERPC",78,0)
 K ^TMP($J,"ECSCATS")
"RTN","ECUERPC",79,0)
 D CATS^ECHECK1
"RTN","ECUERPC",80,0)
 M ^TMP($J,"ECSCATS")=ECC
"RTN","ECUERPC",81,0)
 S RESULTS=$NA(^TMP($J,"ECSCATS"))
"RTN","ECUERPC",82,0)
 Q
"RTN","ECUERPC",83,0)
PROC(RESULTS,ECARY) ;
"RTN","ECUERPC",84,0)
 ;This broker entry point returns an array of procedures for an Event 
"RTN","ECUERPC",85,0)
 ;Code screen (file #720.3) based on location, DSS unit, and Category
"RTN","ECUERPC",86,0)
 ;        RPC: EC GETECSPROCS
"RTN","ECUERPC",87,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",88,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",89,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",90,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",91,0)
 ;            ECDT - Procedure Date
"RTN","ECUERPC",92,0)
 ;
"RTN","ECUERPC",93,0)
 ;OUTPUTS     RESULTS - Array of procedures. Data pieces as follows:-
"RTN","ECUERPC",94,0)
 ;            PIECE - Description
"RTN","ECUERPC",95,0)
 ;              1  - EC National Number SPACE Procedure Name SPACE
"RTN","ECUERPC",96,0)
 ;                - [Synonym]
"RTN","ECUERPC",97,0)
 ;              2  - Procedure Code
"RTN","ECUERPC",98,0)
 ;              3  - CPT Code
"RTN","ECUERPC",99,0)
 ;              4  - Default volume (1 if no default volume)
"RTN","ECUERPC",100,0)
 ;              5  - Event code screen IEN
"RTN","ECUERPC",101,0)
 ;
"RTN","ECUERPC",102,0)
 N ECL,ECD,ECC,CNT,DATA,STR,ECCPT,PX,NAME,NUM ;126
"RTN","ECUERPC",103,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",104,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3)
"RTN","ECUERPC",105,0)
 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",106,0)
 S:$P($G(^ECD(ECD,0)),U,11)=0 ECC="" S:ECC="" ECC=0 ;131
"RTN","ECUERPC",107,0)
 S ECDT=$P(ECARY,U,4)
"RTN","ECUERPC",108,0)
 K ^TMP($J,"ECPRO")
"RTN","ECUERPC",109,0)
 D PROS^ECHECK1
"RTN","ECUERPC",110,0)
 S CNT=1,NAME="" F  S NAME=$O(^TMP("ECPRO",$J,"N2",NAME)) Q:NAME=""  S NUM=$O(^TMP("ECPRO",$J,"N2",NAME,0)) D  ;126
"RTN","ECUERPC",111,0)
 .S DATA=^TMP("ECPRO",$J,NUM),PX=$P(DATA,U) ;126
"RTN","ECUERPC",112,0)
 .S ECCPT=$S(PX["EC":$P($G(^EC(725,+PX,0)),"^",5),1:+PX)
"RTN","ECUERPC",113,0)
 .S STR=$P(DATA,U,5)_" "_$P(DATA,U,4)_" ["_$P(DATA,U,3)_"]"_U_PX
"RTN","ECUERPC",114,0)
 .S STR=STR_U_ECCPT_U_$S($P(DATA,U,6):+$P(DATA,U,6),1:1)_U_$P(DATA,U,2)
"RTN","ECUERPC",115,0)
 .S ^TMP($J,"ECPRO",CNT)=STR,CNT=CNT+1 ;126
"RTN","ECUERPC",116,0)
 S RESULTS=$NA(^TMP($J,"ECPRO"))
"RTN","ECUERPC",117,0)
 K ^TMP("ECPRO",$J)
"RTN","ECUERPC",118,0)
 Q
"RTN","ECUERPC",119,0)
ECPXMOD(RESULTS,ECARY) ;
"RTN","ECUERPC",120,0)
 ;Broker call returns modifier entries for a CPT Procedure
"RTN","ECUERPC",121,0)
 ;        RPC: EC GETPXMODIFIER
"RTN","ECUERPC",122,0)
 ;INPUTS   ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",123,0)
 ;          ECCPT - CPT code ien (file #81)
"RTN","ECUERPC",124,0)
 ;          ECDT  - Procedure date and time (fileman format)
"RTN","ECUERPC",125,0)
 ;
"RTN","ECUERPC",126,0)
 ;OUTPUTS  RESULTS - Array of procedure modifiers
"RTN","ECUERPC",127,0)
 ;          2-character modifier^modifer name^modifier ien #81.3
"RTN","ECUERPC",128,0)
 ;
"RTN","ECUERPC",129,0)
 N CNT,SUB,ECCPT,ECDT,DATA,ECMOD
"RTN","ECUERPC",130,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",131,0)
 S ECCPT=$P(ECARY,U),ECDT=$P(ECARY,U,2) I ECDT="" D NOW^%DTC S ECDT=%
"RTN","ECUERPC",132,0)
 I ECCPT="" Q
"RTN","ECUERPC",133,0)
 K ^TMP($J,"ECPXMODS") S (SUB,CNT)=0
"RTN","ECUERPC",134,0)
 S DATA=$$CODM^ICPTCOD(ECCPT,"ECMOD","",ECDT) I +DATA<0 Q
"RTN","ECUERPC",135,0)
 F  S SUB=$O(ECMOD(SUB)) Q:SUB=""  I $P(ECMOD(SUB),U,2)'="" D
"RTN","ECUERPC",136,0)
 . I +$$MODP^ICPTMOD(ECCPT,$P(ECMOD(SUB),U,2),"I",ECDT)>0 D
"RTN","ECUERPC",137,0)
 . . S CNT=CNT+1,^TMP($J,"ECPXMODS",CNT)=SUB_U_ECMOD(SUB)
"RTN","ECUERPC",138,0)
 S RESULTS=$NA(^TMP($J,"ECPXMODS"))
"RTN","ECUERPC",139,0)
 Q
"RTN","ECUERPC",140,0)
PRVDER(RESULTS,ECARY) ;
"RTN","ECUERPC",141,0)
 ;remove this rpc before release;JAM 6/4/01
"RTN","ECUERPC",142,0)
 ;This broker entry point returns an array of valid providers
"RTN","ECUERPC",143,0)
 ;        RPC: EC GETPROVIDER
"RTN","ECUERPC",144,0)
 ;INPUTS     ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",145,0)
 ;            ECDT  - Procedure date
"RTN","ECUERPC",146,0)
 ;
"RTN","ECUERPC",147,0)
 ;OUTPUTS     RESULTS - Array of providers. Data pieces as follows:-
"RTN","ECUERPC",148,0)
 ;            PIECE - Description
"RTN","ECUERPC",149,0)
 ;             IEN of file 200^Provider Name^occupation^specialty^
"RTN","ECUERPC",150,0)
 ;             subspecialty
"RTN","ECUERPC",151,0)
 ;
"RTN","ECUERPC",152,0)
 N IEN,CNT,ECUTN,KEY,USR
"RTN","ECUERPC",153,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",154,0)
 S ECDT=$P($G(ECARY),U),ECDT=$S(ECDT="":DT,1:ECDT)
"RTN","ECUERPC",155,0)
 K ^TMP($J,"ECPRVDRS") S CNT=0
"RTN","ECUERPC",156,0)
 F KEY="PROVIDER" S IEN=0 D
"RTN","ECUERPC",157,0)
 .F  S IEN=$O(^XUSEC(KEY,IEN)) Q:'IEN  S USR=$G(^VA(200,IEN,0)) D:USR'=""
"RTN","ECUERPC",158,0)
 ..S ECUTN=$$GET^XUA4A72(IEN,ECDT) I +ECUTN'>0 Q
"RTN","ECUERPC",159,0)
 ..S CNT=CNT+1,^TMP($J,"ECPRVDRS",CNT)=IEN_U_$P(USR,U)_U_$P(ECUTN,2,4)
"RTN","ECUERPC",160,0)
 S RESULTS=$NA(^TMP($J,"ECPRVDRS"))
"RTN","ECUERPC",161,0)
 Q
"RTN","ECUERPC",162,0)
 ;
"RTN","ECUERPC",163,0)
ELIG(RESULTS,ECARY) ;
"RTN","ECUERPC",164,0)
 ;
"RTN","ECUERPC",165,0)
 ;Broker call returns a list of patient eligibilities
"RTN","ECUERPC",166,0)
 ;        RPC: EC GETPATELIG
"RTN","ECUERPC",167,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",168,0)
 ;          DFN - Patient ien (file #2)
"RTN","ECUERPC",169,0)
 ;
"RTN","ECUERPC",170,0)
 ;OUTPUTS  RESULTS - Array of eligibilities
"RTN","ECUERPC",171,0)
 ;          primary/secondary elig flag^elig ien^elig description
"RTN","ECUERPC",172,0)
 ;
"RTN","ECUERPC",173,0)
 N CNT,SUB,DFN,VAEL
"RTN","ECUERPC",174,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",175,0)
 S DFN=$P(ECARY,U) I DFN="" Q
"RTN","ECUERPC",176,0)
 K ^TMP($J,"ECPATELIG")
"RTN","ECUERPC",177,0)
 D ELIG^VADPT I $G(VAEL(1))="" Q
"RTN","ECUERPC",178,0)
 S ^TMP($J,"ECPATELIG",1)="1^"_VAEL(1),SUB=0,CNT=1
"RTN","ECUERPC",179,0)
 F  S SUB=$O(VAEL(1,SUB)) Q:SUB=""  D
"RTN","ECUERPC",180,0)
 . S CNT=CNT+1,^TMP($J,"ECPATELIG",CNT)="0^"_VAEL(1,SUB)
"RTN","ECUERPC",181,0)
 S RESULTS=$NA(^TMP($J,"ECPATELIG"))
"RTN","ECUERPC",182,0)
 Q
"RTN","ECUERPC",183,0)
PRDEFS(RESULTS,ECARY) ;
"RTN","ECUERPC",184,0)
 ;This broker entry point returns the defaults for procedure data entry
"RTN","ECUERPC",185,0)
 ;        RPC: EC GETPRODEFS
"RTN","ECUERPC",186,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",187,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",188,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",189,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",190,0)
 ;
"RTN","ECUERPC",191,0)
 ;OUTPUTS    RESULTS - Data pieces as follows:-
"RTN","ECUERPC",192,0)
 ;           PIECE - Description
"RTN","ECUERPC",193,0)
 ;             1 - Associated Clinic IEN
"RTN","ECUERPC",194,0)
 ;             2 - Associated Clinic
"RTN","ECUERPC",195,0)
 ;             3 - Medical Specialty IEN
"RTN","ECUERPC",196,0)
 ;             4 - Medical Specialty
"RTN","ECUERPC",197,0)
 ;
"RTN","ECUERPC",198,0)
 N ECL,ECD,ECC,ECP,IEN,ASC,ASCNM,MEDSP,MEDSPNM,ECCH
"RTN","ECUERPC",199,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",200,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3),ECP=$P(ECARY,U,4)
"RTN","ECUERPC",201,0)
 S:ECC="" ECC=0 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",202,0)
 S (ASCNM,MEDSPNM)="",ECCH=ECL_"-"_ECD_"-"_ECC_"-"_ECP
"RTN","ECUERPC",203,0)
 I '$D(^ECJ("B",ECCH)) Q
"RTN","ECUERPC",204,0)
 S IEN=$O(^ECJ("B",ECCH,0)) I IEN="" Q
"RTN","ECUERPC",205,0)
 S ASC=$P($G(^ECJ(IEN,"PRO")),U,4) I ASC D
"RTN","ECUERPC",206,0)
 .S ASCNM=$$GET1^DIQ(44,ASC,.01,"I")
"RTN","ECUERPC",207,0)
 S MEDSP=$P($G(^ECD(ECD,0)),U,3) I MEDSP D 
"RTN","ECUERPC",208,0)
 .S MEDSPNM=$$GET1^DIQ(723,MEDSP,.01,"I")
"RTN","ECUERPC",209,0)
 S RESULTS=ASC_U_ASCNM_U_MEDSP_U_MEDSPNM
"RTN","ECUERPC",210,0)
 Q
"RTN","ECUERPC",211,0)
PATPROC(RESULTS,ECARY) ;
"RTN","ECUERPC",212,0)
 ;
"RTN","ECUERPC",213,0)
 ;Broker call returns the entries from EVENT CAPTURE PATIENT FILE #721
"RTN","ECUERPC",214,0)
 ;
"RTN","ECUERPC",215,0)
 ;RPC: EC GETPATPROCS
"RTN","ECUERPC",216,0)
 ;
"RTN","ECUERPC",217,0)
 ;INPUTS   ECARY - Contains the following values separated by "^"
"RTN","ECUERPC",218,0)
 ;         ECLOC - Location ien
"RTN","ECUERPC",219,0)
 ;         ECPAT - Patient DFN ien
"RTN","ECUERPC",220,0)
 ;         ECUNT - DSS unit ien
"RTN","ECUERPC",221,0)
 ;         ECSD  - Start Date
"RTN","ECUERPC",222,0)
 ;         ECED  - End Date
"RTN","ECUERPC",223,0)
 ;                                                                         
"RTN","ECUERPC",224,0)
 ;OUTPUTS  RESULTS - Array of Event Capture Patient entries contain
"RTN","ECUERPC",225,0)
 ;          721 IEN^Procedure date/time^Category^Procedure^Volume^
"RTN","ECUERPC",226,0)
 ;          Provider^ordering section^associated clinic^
"RTN","ECUERPC",227,0)
 ;          (ICD Coding system) primary dx code primary dx code description
"RTN","ECUERPC",228,0)
 ;          ^Provider IEN
"RTN","ECUERPC",229,0)
 ;
"RTN","ECUERPC",230,0)
 N IEN,CNT,ECCS,ECV,ECLOC,ECUNT,ECPAT,PX,NODE,DATA,PDT,PDX,PND,PDXD,CAT,ECI
"RTN","ECUERPC",231,0)
 N ORS,PRV,PRO,PROV,ECU
"RTN","ECUERPC",232,0)
 D SETENV^ECUMRPC ;set environment variables for RPC broker
"RTN","ECUERPC",233,0)
 S ECV="ECLOC^ECPAT^ECUNT^ECSD^ECED"
"RTN","ECUERPC",234,0)
 D PARSE(ECV,ECARY) I (ECLOC="")!(ECPAT="")!(ECUNT="") Q
"RTN","ECUERPC",235,0)
 K ^TMP($J,"ECPATPX")
"RTN","ECUERPC",236,0)
 S ECSD=$G(ECSD,DT),ECED=$G(ECED,DT)
"RTN","ECUERPC",237,0)
 S %DT="X" F ECI="ECSD","ECED" S X=@ECI D ^%DT S @ECI=Y
"RTN","ECUERPC",238,0)
 K X,Y
"RTN","ECUERPC",239,0)
 S ECSD=$S(ECSD=-1:DT,1:ECSD)-.0001,ECED=$S(ECED=-1:DT,1:ECED)+.9999
"RTN","ECUERPC",240,0)
 Q:ECED'>ECSD  S PDT=ECSD,CNT=0
"RTN","ECUERPC",241,0)
 F  S PDT=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT)) Q:'PDT!(PDT>ECED)  D
"RTN","ECUERPC",242,0)
 . S IEN=0 F  S IEN=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT,IEN)) Q:'IEN  D
"RTN","ECUERPC",243,0)
 . . S NODE=$G(^ECH(IEN,0)),PND=$G(^ECH(IEN,"P")),PX=$P(NODE,U,9)
"RTN","ECUERPC",244,0)
 . . Q:NODE=""  S (PRV,CAT,ORS,ASC,PDXD)="",PDX=$P(PND,U,2)
"RTN","ECUERPC",245,0)
 . . I PX["EC" D
"RTN","ECUERPC",246,0)
 . . . S PRO=$G(^EC(725,$P(PX,";"),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUERPC",247,0)
 . . E  S PRO=$$CPT^ICPTCOD($P(PX,";"),PDT) S PX=$P(PRO,U,2)_" "_$P(PRO,U,3)
"RTN","ECUERPC",248,0)
 . . S:$P(NODE,U,8) CAT=$$GET1^DIQ(726,$P(NODE,U,8),.01,"I")
"RTN","ECUERPC",249,0)
 . . K PROV S ECU=$$GETPPRV^ECPRVMUT(IEN,.PROV),PRV=$S(ECU:"UNKNOWN",1:$P(PROV,"^",2)),ECU=$S('ECU:+PROV,1:"")
"RTN","ECUERPC",250,0)
 . . S:$P(NODE,U,12) ORS=$$GET1^DIQ(723,$P(NODE,U,12),.01,"I")
"RTN","ECUERPC",251,0)
 . . S:$P(NODE,U,19) ASC=$$GET1^DIQ(44,$P(NODE,U,19),.01,"I")
"RTN","ECUERPC",252,0)
 . . I PDX D
"RTN","ECUERPC",253,0)
 . . . ; ICD10 Changes
"RTN","ECUERPC",254,0)
 . . . S ECCS=$$SINFO^ICDEX("DIAG",PDT) ; Supported by ICR 5747
"RTN","ECUERPC",255,0)
 . . . S PDXD=$$ICDDX^ICDEX(PDX,PDT,+ECCS,"I") ; Supported by ICR 5747
"RTN","ECUERPC",256,0)
 . . . S ECCS=$P(ECCS,U,2),ECCS=" ("_$P(ECCS,"-",1)_$P(ECCS,"-",2)_")"
"RTN","ECUERPC",257,0)
 . . . S PDXD=$P(PDXD,U,2)_" "_$P(PDXD,U,4)_ECCS
"RTN","ECUERPC",258,0)
 . . S DATA=$P(NODE,U)_U_$$FMTE^XLFDT($P(NODE,U,3),"2F")_U_CAT_U_PX
"RTN","ECUERPC",259,0)
 . . S DATA=DATA_U_$P(NODE,U,10)_U_PRV_U_ORS_U_ASC_U_PDXD_U_ECU
"RTN","ECUERPC",260,0)
 . . S CNT=CNT+1,^TMP($J,"ECPATPX",CNT)=DATA
"RTN","ECUERPC",261,0)
 S RESULTS=$NA(^TMP($J,"ECPATPX"))
"RTN","ECUERPC",262,0)
 Q
"RTN","ECUERPC",263,0)
PARSE(ECV,ECARY) ;Parse Variable
"RTN","ECUERPC",264,0)
 N I
"RTN","ECUERPC",265,0)
 F I=1:1:$L(ECARY,U) S @$P(ECV,U,I)=$P(ECARY,U,I)
"RTN","ECUERPC",266,0)
 Q
"RTN","ECUMRPC")
0^17^B30601632^B28818768
"RTN","ECUMRPC",1,0)
ECUMRPC ;ALB/JAM;Event Capture Management Broker Utilities ;1/25/16  10:46
"RTN","ECUMRPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,131**;8 May 96;Build 13
"RTN","ECUMRPC",3,0)
ECUSR(RESULTS,ECARY) ;
"RTN","ECUMRPC",4,0)
 ;
"RTN","ECUMRPC",5,0)
 ;This broker entry point returns an array of users with access to a 
"RTN","ECUMRPC",6,0)
 ;DSS unit in file 200.
"RTN","ECUMRPC",7,0)
 ;        RPC: EC GETDSSUNITUSRS
"RTN","ECUMRPC",8,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC",9,0)
 ;               UNT   - DSS unit IEN
"RTN","ECUMRPC",10,0)
 ;
"RTN","ECUMRPC",11,0)
 ;OUTPUTS        RESULTS - The array of users. Data pieces as follows:-
"RTN","ECUMRPC",12,0)
 ;               PIECE - Description
"RTN","ECUMRPC",13,0)
 ;                 1     NAME of user
"RTN","ECUMRPC",14,0)
 ;                 2     DUZ or IEN of file 200
"RTN","ECUMRPC",15,0)
 ;
"RTN","ECUMRPC",16,0)
 N UNT,EDUZ,CNT
"RTN","ECUMRPC",17,0)
 D SETENV
"RTN","ECUMRPC",18,0)
 S UNT=$P(ECARY,U) Q:UNT=""
"RTN","ECUMRPC",19,0)
 K ^TMP($J,"ECUSR") S (EDUZ,CNT)=0
"RTN","ECUMRPC",20,0)
 F  S EDUZ=$O(^VA(200,EDUZ)) Q:'EDUZ  I $D(^VA(200,EDUZ,"EC",UNT,0)) D
"RTN","ECUMRPC",21,0)
 . S CNT=CNT+1,^TMP($J,"ECUSR",CNT)=$P(^VA(200,EDUZ,0),U)_U_EDUZ
"RTN","ECUMRPC",22,0)
 S RESULTS=$NA(^TMP($J,"ECUSR"))
"RTN","ECUMRPC",23,0)
 Q
"RTN","ECUMRPC",24,0)
 ;
"RTN","ECUMRPC",25,0)
ECLOC(RESULTS) ;
"RTN","ECUMRPC",26,0)
 ;
"RTN","ECUMRPC",27,0)
 ;This broker entry point returns all active Event Capture locations
"RTN","ECUMRPC",28,0)
 ;        RPC: EC GETECLOC
"RTN","ECUMRPC",29,0)
 ;
"RTN","ECUMRPC",30,0)
 ;OUTPUTS        RESULTS - The array of active Event Capture locations.
"RTN","ECUMRPC",31,0)
 ;               PIECE - Description
"RTN","ECUMRPC",32,0)
 ;                 1     Location description
"RTN","ECUMRPC",33,0)
 ;                 2     LOC IEN
"RTN","ECUMRPC",34,0)
 N LOC
"RTN","ECUMRPC",35,0)
 D SETENV
"RTN","ECUMRPC",36,0)
 K ^TMP($J,"ECLOC")
"RTN","ECUMRPC",37,0)
 D GETLOC^ECL(.LOC) M ^TMP($J,"ECLOC")=LOC
"RTN","ECUMRPC",38,0)
 S RESULTS=$NA(^TMP($J,"ECLOC"))
"RTN","ECUMRPC",39,0)
 Q
"RTN","ECUMRPC",40,0)
ECSCN(RESULTS,ECARY) ;
"RTN","ECUMRPC",41,0)
 ;
"RTN","ECUMRPC",42,0)
 ;Broker call returns the entries from EC EVENT CODE SCREENS FILE #720.3
"RTN","ECUMRPC",43,0)
 ;        RPC: GETECSCREEN
"RTN","ECUMRPC",44,0)
 ;INPUTS   ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC",45,0)
 ;          STAT   - Active or inactive Event Code Screens
"RTN","ECUMRPC",46,0)
 ;                   A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC",47,0)
 ;          LOCIEN - Location IEN (optional)
"RTN","ECUMRPC",48,0)
 ;          DSSIEN - DSS IEN (optional)
"RTN","ECUMRPC",49,0)
 ;
"RTN","ECUMRPC",50,0)
 ;OUTPUTS  RESULTS - Array of EC screens, contains
"RTN","ECUMRPC",51,0)
 ;          720.3 ien^location description^DSS Unit description^Category
"RTN","ECUMRPC",52,0)
 ;          desription^Procedure 5 digit code and description
"RTN","ECUMRPC",53,0)
 ;
"RTN","ECUMRPC",54,0)
 N STAT,IEN,CNT,ACT,FL,V,EI,ECSCR,CLN,LOC,UNT,CAT,PX,NODE,LOCIEN,DSSIEN
"RTN","ECUMRPC",55,0)
 D SETENV K ^TMP($J,"ECSCN")
"RTN","ECUMRPC",56,0)
 S STAT=$P($G(ECARY,"A"),U),LOCIEN=$P($G(ECARY),U,2),FL="4,724,726"
"RTN","ECUMRPC",57,0)
 S V="LOC,UNT,CAT",(IEN,CNT)=0,DSSIEN=$P(ECARY,U,3)
"RTN","ECUMRPC",58,0)
 F  S IEN=$O(^ECJ(IEN)) Q:'IEN  S NODE=$G(^ECJ(IEN,0)) I NODE'="" D
"RTN","ECUMRPC",59,0)
 .S ACT=$P(NODE,U,2),ECSCR=$TR($P(NODE,U),"-;,","^^")
"RTN","ECUMRPC",60,0)
 .I $S(STAT="A"&(ACT'=""):1,STAT="I"&(ACT=""):1,1:0) Q
"RTN","ECUMRPC",61,0)
 .I LOCIEN'="",LOCIEN'=$P(ECSCR,U) Q
"RTN","ECUMRPC",62,0)
 .I DSSIEN'="",DSSIEN'=$P(ECSCR,U,2) Q
"RTN","ECUMRPC",63,0)
 .F EI=1:1:3 D
"RTN","ECUMRPC",64,0)
 ..S @$P(V,",",EI)=$$GET1^DIQ($P(FL,",",EI),$P(ECSCR,U,EI),.01,"E"),PX=""
"RTN","ECUMRPC",65,0)
 .I $P(ECSCR,U,5)["EC" D
"RTN","ECUMRPC",66,0)
 ..S PRO=$G(^EC(725,$P(ECSCR,U,4),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUMRPC",67,0)
 .E  S PRO=$$CPT^ICPTCOD($P(ECSCR,U,4)) S PX=$P(PRO,U,2)_" "_$P(PRO,U,3)
"RTN","ECUMRPC",68,0)
 .S CNT=CNT+1,^TMP($J,"ECSCN",CNT)=IEN_U_LOC_U_UNT_U_CAT_U_PX
"RTN","ECUMRPC",69,0)
 S RESULTS=$NA(^TMP($J,"ECSCN"))
"RTN","ECUMRPC",70,0)
 Q
"RTN","ECUMRPC",71,0)
ECSDTLS(RESULTS,ECARY) ;
"RTN","ECUMRPC",72,0)
 ;
"RTN","ECUMRPC",73,0)
 ;Broker call returns details on an Event Code Screen from EC EVENT 
"RTN","ECUMRPC",74,0)
 ;CODE SCREENS FILE #720.3
"RTN","ECUMRPC",75,0)
 ;        RPC: GETECSDETAIL
"RTN","ECUMRPC",76,0)
 ;INPUTS   ECARY  - Contains the following data
"RTN","ECUMRPC",77,0)
 ;                   Event code screen IEN
"RTN","ECUMRPC",78,0)
 ;
"RTN","ECUMRPC",79,0)
 ;OUTPUTS  RESULTS - Details of EC screen, contains
"RTN","ECUMRPC",80,0)
 ;          720.3 ien^event code screen key^synonym^volume^associated 
"RTN","ECUMRPC",81,0)
 ;          clinic^Procedure reason indicator^event code screen status
"RTN","ECUMRPC",82,0)
 ;          flag (y-active,n-inactive)^Send To PCE
"RTN","ECUMRPC",83,0)
 ;
"RTN","ECUMRPC",84,0)
 N NODE,PRO,CLN,STAT,STR,SPCE
"RTN","ECUMRPC",85,0)
 Q:$G(ECARY)=""  Q:'$D(^ECJ(ECARY,0))
"RTN","ECUMRPC",86,0)
 D SETENV
"RTN","ECUMRPC",87,0)
 S NODE=^ECJ(ECARY,0),PRO=$G(^ECJ(ECARY,"PRO")),SPCE=$P(NODE,"-",2)
"RTN","ECUMRPC",88,0)
 S SPCE=$P($G(^ECD(SPCE,0)),U,14),SPCE=$S(SPCE="O":1,SPCE="A":1,1:0)
"RTN","ECUMRPC",89,0)
 S STAT=$S($P(NODE,U,2)="":"Y",1:"N")
"RTN","ECUMRPC",90,0)
 S:$P(PRO,U,4)'="" CLN=$$GET1^DIQ(44,$P(PRO,U,4),.01,"E")
"RTN","ECUMRPC",91,0)
 S STR=ECARY_U_$P(NODE,U)_U_$P(PRO,U,2,3)_U_$G(CLN)_U_$P(PRO,U,5)_U_STAT
"RTN","ECUMRPC",92,0)
 S RESULTS=STR_U_SPCE
"RTN","ECUMRPC",93,0)
 Q
"RTN","ECUMRPC",94,0)
 ;
"RTN","ECUMRPC",95,0)
DSSECS(RESULTS,ECARY) ;
"RTN","ECUMRPC",96,0)
 ;
"RTN","ECUMRPC",97,0)
 ;Broker call returns a list of Event Code Screen from EC EVENT CODE
"RTN","ECUMRPC",98,0)
 ;SCREENS FILE #720.3 based on a DSS Unit
"RTN","ECUMRPC",99,0)
 ;        RPC: EC GETDSSECS
"RTN","ECUMRPC",100,0)
 ;INPUTS   ECARY  - Contains the following data
"RTN","ECUMRPC",101,0)
 ;          ECD   - DSS Unit IEN
"RTN","ECUMRPC",102,0)
 ;          ECL   - Location
"RTN","ECUMRPC",103,0)
 ;
"RTN","ECUMRPC",104,0)
 ;OUTPUTS  RESULTS - Data on EC screen, contains
"RTN","ECUMRPC",105,0)
 ;          720.3 ien^Procedure 5 digit code and description^Location^
"RTN","ECUMRPC",106,0)
 ;          status(Y-active, N-inactive)^Category description^synonym
"RTN","ECUMRPC",107,0)
 ;
"RTN","ECUMRPC",108,0)
 N NODE,PRO,STAT,CNT,ECD,LOC,CAT,IEN,PX,PN,CATD,LOCDS,ECL,ECSYN
"RTN","ECUMRPC",109,0)
 S ECD=$P(ECARY,U),ECL=$P(ECARY,U,2) I ECD="",ECL="" Q
"RTN","ECUMRPC",110,0)
 D SETENV K ^TMP($J,"ECDSSECS")
"RTN","ECUMRPC",111,0)
 S (CNT,LOC)=0 I ECL'="" S LOC=ECL-1
"RTN","ECUMRPC",112,0)
 F  S LOC=$O(^ECJ("AP",LOC)) Q:'LOC  S CAT=""  Q:ECL&(ECL'=LOC)  D
"RTN","ECUMRPC",113,0)
 .I ECD'="" D:$D(^ECJ("AP",LOC,ECD)) GETSCN Q 
"RTN","ECUMRPC",114,0)
 .S ECD=0 F  S ECD=$O(^ECJ("AP",LOC,ECD)) Q:'ECD  D GETSCN
"RTN","ECUMRPC",115,0)
 S RESULTS=$NA(^TMP($J,"ECDSSECS"))
"RTN","ECUMRPC",116,0)
 Q
"RTN","ECUMRPC",117,0)
GETSCN F  S CAT=$O(^ECJ("AP",LOC,ECD,CAT)) Q:CAT=""  S PX="" D
"RTN","ECUMRPC",118,0)
 .I CAT,'$P(^ECD(ECD,0),U,11) Q  ;131 Don't show screen if it has a category and the DSS Unit is set to "no categories"
"RTN","ECUMRPC",119,0)
 .F  S PX=$O(^ECJ("AP",LOC,ECD,CAT,PX)) Q:PX=""  S IEN=0 D
"RTN","ECUMRPC",120,0)
 ..F  S IEN=$O(^ECJ("AP",LOC,ECD,CAT,PX,IEN)) Q:'IEN  D
"RTN","ECUMRPC",121,0)
 ...S NODE=$G(^ECJ(IEN,0)) I NODE="" Q
"RTN","ECUMRPC",122,0)
 ...S PRO=$G(^ECJ(IEN,"PRO")),ECSYN=$P(PRO,U,2),PN=$P($P(PRO,U),";")
"RTN","ECUMRPC",123,0)
 ...I PN="" Q
"RTN","ECUMRPC",124,0)
 ...I $P(PRO,U)["EC" S PN=$G(^EC(725,PN,0)),PRO=$P(PN,U,2)_" "_$P(PN,U)
"RTN","ECUMRPC",125,0)
 ...E  S PN=$$CPT^ICPTCOD(PN) S PRO=$P(PN,U,2)_" "_$P(PN,U,3)
"RTN","ECUMRPC",126,0)
 ...S STAT=$S($P(NODE,U,2)'="":"No",1:"Yes")
"RTN","ECUMRPC",127,0)
 ...S CATD=$S('CAT:"None",1:$P($G(^EC(726,CAT,0)),U))
"RTN","ECUMRPC",128,0)
 ...S LOCDS=$$GET1^DIQ(4,LOC,.01,"I"),CNT=CNT+1
"RTN","ECUMRPC",129,0)
 ...S ^TMP($J,"ECDSSECS",CNT)=IEN_U_PRO_U_LOCDS_U_STAT_U_CATD_U_ECSYN
"RTN","ECUMRPC",130,0)
 Q
"RTN","ECUMRPC",131,0)
 ;
"RTN","ECUMRPC",132,0)
ECPXRS(RESULTS,ECARY) ;
"RTN","ECUMRPC",133,0)
 ;
"RTN","ECUMRPC",134,0)
 ;Broker call returns entries for Procedure reasons linked to EC screen.
"RTN","ECUMRPC",135,0)
 ;        RPC: EC GETPXREASON
"RTN","ECUMRPC",136,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC",137,0)
 ;          ECSCR - Event code screen ien (file #720.3)
"RTN","ECUMRPC",138,0)
 ;
"RTN","ECUMRPC",139,0)
 ;OUTPUTS  RESULTS - Array of procedure reasons for EC screen
"RTN","ECUMRPC",140,0)
 ;          Procedure reason^procedure reason ien #720.4^Event Code 
"RTN","ECUMRPC",141,0)
 ;          screens/procedure reason link ien #720.5
"RTN","ECUMRPC",142,0)
 ;
"RTN","ECUMRPC",143,0)
 N RSN,IEN,CNT,RIEN
"RTN","ECUMRPC",144,0)
 S ECSCR=$G(ECARY,"") I ECSCR="" Q
"RTN","ECUMRPC",145,0)
 D SETENV
"RTN","ECUMRPC",146,0)
 K ^TMP($J,"ECPXREAS") S (IEN,CNT)=0
"RTN","ECUMRPC",147,0)
 F  S IEN=$O(^ECL("AD",ECSCR,IEN)) Q:'IEN  D
"RTN","ECUMRPC",148,0)
 . S RSN=$G(^ECR(IEN,0)),RIEN=$O(^ECL("AD",ECSCR,IEN,0)) Q:'$P(RSN,U,2)
"RTN","ECUMRPC",149,0)
 . S CNT=CNT+1,^TMP($J,"ECPXREAS",CNT)=$P(RSN,U)_U_IEN_U_RIEN
"RTN","ECUMRPC",150,0)
 S RESULTS=$NA(^TMP($J,"ECPXREAS"))
"RTN","ECUMRPC",151,0)
 Q
"RTN","ECUMRPC",152,0)
 ;
"RTN","ECUMRPC",153,0)
ECNATPX(RESULTS,ECARY) ;
"RTN","ECUMRPC",154,0)
 ;
"RTN","ECUMRPC",155,0)
 ;Broker call returns EC national & local  Procedures from file #725.
"RTN","ECUMRPC",156,0)
 ;        RPC: EC GETNATPX
"RTN","ECUMRPC",157,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC",158,0)
 ;          ECPX - Procedures to output, L- local, N- National, B- Both
"RTN","ECUMRPC",159,0)
 ;          STAT - Active or inactive EC Nat Codes
"RTN","ECUMRPC",160,0)
 ;                 A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC",161,0)
 ;
"RTN","ECUMRPC",162,0)
 ;OUTPUTS  RESULTS - Array of EC local procedures
"RTN","ECUMRPC",163,0)
 ;          ien #725^Procedure name^national number^inactive date^
"RTN","ECUMRPC",164,0)
 ;          synonym^CPT ien^CPT code^CPT Short Name
"RTN","ECUMRPC",165,0)
 ;
"RTN","ECUMRPC",166,0)
 N STAT,IEN,STR,CNT,ACT,CPT,CPTDAT,ECPX
"RTN","ECUMRPC",167,0)
 D SETENV
"RTN","ECUMRPC",168,0)
 S ECPX=$P(ECARY,U),STAT=$P(ECARY,U,2)
"RTN","ECUMRPC",169,0)
 S:ECPX="" ECPX="L" S:STAT="" STAT="A"
"RTN","ECUMRPC",170,0)
 K ^TMP($J,"ECLOCPX")
"RTN","ECUMRPC",171,0)
 S IEN=$S(ECPX="L":90000,1:0),CNT=0
"RTN","ECUMRPC",172,0)
 F  S IEN=$O(^EC(725,IEN)) Q:'IEN!((ECPX="N")&(IEN>90000))  D
"RTN","ECUMRPC",173,0)
 . S STR=$G(^EC(725,IEN,0)) I STR="" Q
"RTN","ECUMRPC",174,0)
 . S ACT=$P(STR,U,3),CPT=$P(STR,U,5)
"RTN","ECUMRPC",175,0)
 . I $S(STAT="A"&(ACT'=""):1,STAT="I"&(ACT=""):1,1:0) Q
"RTN","ECUMRPC",176,0)
 . S CPTDAT=$S(CPT="":"",1:$$CPT^ICPTCOD(CPT))
"RTN","ECUMRPC",177,0)
 . S CNT=CNT+1,^TMP($J,"ECLOCPX",CNT)=IEN_U_STR_U_$P(CPTDAT,U,2,3)
"RTN","ECUMRPC",178,0)
 S RESULTS=$NA(^TMP($J,"ECLOCPX"))
"RTN","ECUMRPC",179,0)
 Q
"RTN","ECUMRPC",180,0)
SETENV ;set environment variables for RPC broker
"RTN","ECUMRPC",181,0)
 I '$G(DUZ) D
"RTN","ECUMRPC",182,0)
 . S DUZ=.5,DUZ(0)="@",U="^",DTIME=300
"RTN","ECUMRPC",183,0)
 . D NOW^%DTC S DT=X
"RTN","ECUMRPC",184,0)
 Q
"RTN","ECUMRPC1")
0^2^B103578610^B101055937
"RTN","ECUMRPC1",1,0)
ECUMRPC1 ;ALB/JAM-Event Capture Management Broker Utilities ;10/2/15  16:33
"RTN","ECUMRPC1",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,33,72,94,95,105,100,107,110,112,126,130,131**;8 May 96;Build 13
"RTN","ECUMRPC1",3,0)
 ;
"RTN","ECUMRPC1",4,0)
DSSUNT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",5,0)
 ;
"RTN","ECUMRPC1",6,0)
 ;This broker entry point returns DSS units from file 724
"RTN","ECUMRPC1",7,0)
 ;        RPC: EC GETDSSUNIT
"RTN","ECUMRPC1",8,0)
 ;INPUTS         ECARY -Contains the following subscripted elements
"RTN","ECUMRPC1",9,0)
 ;               P1 =   optional field to return DSS Units
"RTN","ECUMRPC1",10,0)
 ;                      STAT; 'A'ctive (default), 'I'nactive, 'B'oth
"RTN","ECUMRPC1",11,0)
 ;               P2 =   optional field to filter based on the DSS Name
"RTN","ECUMRPC1",12,0)
 ;               P3 =   optional field to return 1 DSS unit by IEN, if used
"RTN","ECUMRPC1",13,0)
 ;                      no other filters evaluated
"RTN","ECUMRPC1",14,0)
 ;               P4 =   optional field to filter based on the DSS Unit Number (DSS Dept)
"RTN","ECUMRPC1",15,0)
 ;               
"RTN","ECUMRPC1",16,0)
 ;               if data is passed into the other fields then all criteria
"RTN","ECUMRPC1",17,0)
 ;               must be met for data on a unit to be returned
"RTN","ECUMRPC1",18,0)
 ;
"RTN","ECUMRPC1",19,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","ECUMRPC1",20,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",21,0)
 ;                 1     IEN of DSS Unit 
"RTN","ECUMRPC1",22,0)
 ;                 2     Name of DSS Unit
"RTN","ECUMRPC1",23,0)
 ;                 3     IEN of DSS Unit
"RTN","ECUMRPC1",24,0)
 ;                 4     Inactive flag
"RTN","ECUMRPC1",25,0)
 ;                 5     Send to PCE   
"RTN","ECUMRPC1",26,0)
 ;                 6     Unit Number
"RTN","ECUMRPC1",27,0)
 ;                 7     Service
"RTN","ECUMRPC1",28,0)
 ;                 8     Medical Specialty
"RTN","ECUMRPC1",29,0)
 ;                 9     Cost Center
"RTN","ECUMRPC1",30,0)
 ;                 10    Associated Stop code (if not sending to PCE)
"RTN","ECUMRPC1",31,0)
 ;                 11    Category flag
"RTN","ECUMRPC1",32,0)
 ;                 12    Default date entry
"RTN","ECUMRPC1",33,0)
 ;                 13    Credit Stop Code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",34,0)
 ;                 14    CHAR4 code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",35,0)
 ;
"RTN","ECUMRPC1",36,0)
 N UNT,STAT,CNT,CAT,NODE,ECS,STR,SRV,MED,CST,UNO,INACT,ASC,PCE,ACT,NODE
"RTN","ECUMRPC1",37,0)
 N DFD,DIEN,DNM,DUNIT,GET1,CSC,CHAR4 ;126
"RTN","ECUMRPC1",38,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",39,0)
 K ^TMP($J,"ECDSSUNT")
"RTN","ECUMRPC1",40,0)
 S DNM=$P($G(ECARY),U,2),DIEN=$P($G(ECARY),U,3),DUNIT=$P($G(ECARY),U,4)
"RTN","ECUMRPC1",41,0)
 S:DNM'="" DNM=$$UP^XLFSTR(DNM)
"RTN","ECUMRPC1",42,0)
 S:DUNIT'="" DUNIT=$$UP^XLFSTR(DUNIT)
"RTN","ECUMRPC1",43,0)
 S STAT=$P($G(ECARY),U),(CNT,UNT,GET1)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",44,0)
 ; if IEN passed in - use that, then quit, GET1 used as control to stop
"RTN","ECUMRPC1",45,0)
 I $G(DIEN) S UNT=DIEN-.001,GET1=1
"RTN","ECUMRPC1",46,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT!((UNT>DIEN&(GET1)))  S NODE=$G(^ECD(UNT,0)) I NODE'="" D
"RTN","ECUMRPC1",47,0)
 . S ECS=$P(NODE,U,8),ACT=$P(NODE,U,6),ACT=$S(ACT:1,1:0)
"RTN","ECUMRPC1",48,0)
 . Q:('ECS)
"RTN","ECUMRPC1",49,0)
 . I '$G(DIEN),$S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC1",50,0)
 . ; execute new filters
"RTN","ECUMRPC1",51,0)
 . I DNM'="",$$UP^XLFSTR($P(NODE,U))'[DNM Q
"RTN","ECUMRPC1",52,0)
 . I DUNIT'="",$$UP^XLFSTR($P(NODE,U,5))'[DUNIT Q
"RTN","ECUMRPC1",53,0)
 . I DIEN'="",$$UP^XLFSTR(UNT)'[DIEN Q
"RTN","ECUMRPC1",54,0)
 . S CNT=CNT+1,CAT=$P(NODE,U,11),CAT=$S(CAT:"Y",1:"N"),UNO=$P(NODE,U,5)
"RTN","ECUMRPC1",55,0)
 . S SRV=$$GET1^DIQ(49,$P(NODE,U,2),.01,"I")
"RTN","ECUMRPC1",56,0)
 . S MED=$$GET1^DIQ(723,$P(NODE,U,3),.01,"I")
"RTN","ECUMRPC1",57,0)
 . S CST=$$GET1^DIQ(420.1,$P(NODE,U,4),.01,"I")
"RTN","ECUMRPC1",58,0)
 . S INACT=$P(NODE,U,6),INACT=$S(INACT:"I",1:"A"),ASC=$P(NODE,U,10),CSC=$P(NODE,U,13),CHAR4=$P(NODE,U,15) ;126
"RTN","ECUMRPC1",59,0)
 . S:ASC ASC=$$GET1^DIQ(40.7,ASC,.01,"I")
"RTN","ECUMRPC1",60,0)
 . S:CSC CSC=$$GET1^DIQ(40.7,CSC,.01) ;126
"RTN","ECUMRPC1",61,0)
 . S:CHAR4 CHAR4=$$GET1^DIQ(728.441,CHAR4,.01) ;126
"RTN","ECUMRPC1",62,0)
 . S DFD=$S($P(NODE,U,12)="N":"N",1:"X"),PCE=$P(NODE,U,14)
"RTN","ECUMRPC1",63,0)
 . S PCE=$S(PCE="A":PCE,PCE="O":PCE,1:"N")
"RTN","ECUMRPC1",64,0)
 . S STR=UNT_U_$P(NODE,U)_U_UNT_U_INACT_U_PCE_U_UNO_U_SRV_U_MED_U_CST
"RTN","ECUMRPC1",65,0)
 . S STR=STR_U_ASC_U_CAT_U_DFD_U_CSC_U_CHAR4,^TMP($J,"ECDSSUNT",CNT)=STR ;126
"RTN","ECUMRPC1",66,0)
 S RESULTS=$NA(^TMP($J,"ECDSSUNT"))
"RTN","ECUMRPC1",67,0)
 Q
"RTN","ECUMRPC1",68,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",69,0)
 ;
"RTN","ECUMRPC1",70,0)
 ;This broker entry point returns a list of categories from file 726
"RTN","ECUMRPC1",71,0)
 ;        RPC: EC GETCAT
"RTN","ECUMRPC1",72,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC1",73,0)
 ;                STAT - Active or inactive category (optional)
"RTN","ECUMRPC1",74,0)
 ;                A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC1",75,0)
 ;
"RTN","ECUMRPC1",76,0)
 ;OUTPUTS        RESULTS - Array of category. Data pieces as follows:-
"RTN","ECUMRPC1",77,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",78,0)
 ;                 1     IEN of Category
"RTN","ECUMRPC1",79,0)
 ;                 2     Name of Category
"RTN","ECUMRPC1",80,0)
 ;                 3     Creation Date
"RTN","ECUMRPC1",81,0)
 ;                 4     Inactive Date
"RTN","ECUMRPC1",82,0)
 ;
"RTN","ECUMRPC1",83,0)
 N STAT,CNT,CAT,NODE,ECDT,INDT,CRDT
"RTN","ECUMRPC1",84,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",85,0)
 K ^TMP($J,"ECCAT")
"RTN","ECUMRPC1",86,0)
 S STAT=$P($G(ECARY),U),(CNT,CAT)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",87,0)
 F  S CAT=$O(^EC(726,CAT)) Q:'CAT  S NODE=$G(^EC(726,CAT,0)) I NODE'="" D
"RTN","ECUMRPC1",88,0)
 . S ECDT=$P(NODE,U,3)
"RTN","ECUMRPC1",89,0)
 . I STAT="A",ECDT'="",ECDT'>DT Q
"RTN","ECUMRPC1",90,0)
 . I STAT="I",ECDT="" Q
"RTN","ECUMRPC1",91,0)
 . S CRDT=$$FMTE^XLFDT($P(NODE,U,2),"2F")
"RTN","ECUMRPC1",92,0)
 . S INDT=$$FMTE^XLFDT($P(NODE,U,3),"2F")
"RTN","ECUMRPC1",93,0)
 . ;S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_CRDT_U_INDT
"RTN","ECUMRPC1",94,0)
 . S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_$P(CRDT,"@",1)_U_$P(INDT,"@",1)
"RTN","ECUMRPC1",95,0)
 S RESULTS=$NA(^TMP($J,"ECCAT"))
"RTN","ECUMRPC1",96,0)
 Q
"RTN","ECUMRPC1",97,0)
 ;
"RTN","ECUMRPC1",98,0)
CATCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",99,0)
 ;
"RTN","ECUMRPC1",100,0)
 ;Broker call checks whether category is used in an Event Code Screen.
"RTN","ECUMRPC1",101,0)
 ;        RPC: EC DSSCATCHECK
"RTN","ECUMRPC1",102,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",103,0)
 ;          ECDA  - DSS Unit ien (file #724)
"RTN","ECUMRPC1",104,0)
 ;
"RTN","ECUMRPC1",105,0)
 ;OUTPUTS  RESULTS - Category used in Event Code Screen, 1-Yes or 0-No
"RTN","ECUMRPC1",106,0)
 ;
"RTN","ECUMRPC1",107,0)
 N ECDA,ECFLG,ECX
"RTN","ECUMRPC1",108,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",109,0)
 S ECDA=$P(ECARY,U) I ECDA="" Q
"RTN","ECUMRPC1",110,0)
 S (ECFLG,ECX)=0
"RTN","ECUMRPC1",111,0)
 F  S ECX=$O(^ECJ("AP",ECX)) Q:'ECX!(ECFLG)  D
"RTN","ECUMRPC1",112,0)
 . I $D(^ECJ("AP",ECX,ECDA)) S ECFLG=1
"RTN","ECUMRPC1",113,0)
 S RESULTS=ECFLG
"RTN","ECUMRPC1",114,0)
 Q
"RTN","ECUMRPC1",115,0)
PXCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",116,0)
 ;
"RTN","ECUMRPC1",117,0)
 ;Checks whether procedure description or national number exist
"RTN","ECUMRPC1",118,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",119,0)
 ;          ECP - Procedure description
"RTN","ECUMRPC1",120,0)
 ;          ECN - EC National Number
"RTN","ECUMRPC1",121,0)
 ;
"RTN","ECUMRPC1",122,0)
 ;OUTPUTS  RESULTS - Px used^National # used, 1-Yes or 0-No ex. 1^0
"RTN","ECUMRPC1",123,0)
 ;
"RTN","ECUMRPC1",124,0)
 N ECX,ECP,ECN
"RTN","ECUMRPC1",125,0)
 Q:$G(ECARY)
"RTN","ECUMRPC1",126,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",127,0)
 S ECP=$P(ECARY,U),ECN=$P(ECARY,U,2),RESULTS="0^0"
"RTN","ECUMRPC1",128,0)
 I ECP'="",$D(^EC(725,"B",ECP)) S $P(RESULTS,U)=1
"RTN","ECUMRPC1",129,0)
 I ECN'="" F ECX="E","D","DL" D  I $P(RESULTS,U,2) Q
"RTN","ECUMRPC1",130,0)
 . I $D(^EC(725,ECX,ECN)) S $P(RESULTS,U,2)=1
"RTN","ECUMRPC1",131,0)
 Q
"RTN","ECUMRPC1",132,0)
SRCLST(RESULTS,ECARY) ;
"RTN","ECUMRPC1",133,0)
 ;
"RTN","ECUMRPC1",134,0)
 ;This broker entry returns an array of codes from a file based on a 
"RTN","ECUMRPC1",135,0)
 ;search string.
"RTN","ECUMRPC1",136,0)
 ;        RPC: EC GETLIST
"RTN","ECUMRPC1",137,0)
 ;
"RTN","ECUMRPC1",138,0)
 ;INPUTS    ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC1",139,0)
 ;          ECFIL   - File to search
"RTN","ECUMRPC1",140,0)
 ;          ECSTR   - Search string
"RTN","ECUMRPC1",141,0)
 ;          ECDIR   - Search order
"RTN","ECUMRPC1",142,0)
 ;          ECNUM   - (Optional) # records to return [default=44]
"RTN","ECUMRPC1",143,0)
 ;          ECADT   - (Optional) date to determine clinic inactivity
"RTN","ECUMRPC1",144,0)
 ;          ECLOC   - (Optional) location to filter associated clinics
"RTN","ECUMRPC1",145,0)
 ;          ECTYPE  - (Optional) primary or secondary stop codes desired
"RTN","ECUMRPC1",146,0)
 ;OUTPUTS   RESULTS - Array of values based on the search criteria.
"RTN","ECUMRPC1",147,0)
 ;
"RTN","ECUMRPC1",148,0)
 N ECNT,DIC,ECSTR,ECFIL,ECORD,ECER,ECDI,ECNUM,ECDIR,ECADT,ECLOC,ECTYPE ;112,126
"RTN","ECUMRPC1",149,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",150,0)
 S ECNT=0,ECFIL=$P(ECARY,U),ECSTR=$P(ECARY,U,2),ECDIR=$P(ECARY,U,3)
"RTN","ECUMRPC1",151,0)
 S ECORD=$S(ECDIR=-1:"B",1:"I")
"RTN","ECUMRPC1",152,0)
 K ^TMP($J,"ECFIND"),^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",153,0)
 I ECFIL="" Q
"RTN","ECUMRPC1",154,0)
 S ECNUM=$S(+$P(ECARY,U,4)>0:$P(ECARY,U,4),1:44)
"RTN","ECUMRPC1",155,0)
 S ECADT=$S(+$P(ECARY,U,5):$P(ECARY,U,5),1:DT) ;112
"RTN","ECUMRPC1",156,0)
 S ECLOC=$P(ECARY,U,6) ;126 IEN of location if filtering.  Null if no filtering
"RTN","ECUMRPC1",157,0)
 S ECTYPE=$P(ECARY,U,7) ;126 Null if primary, not null for secondary
"RTN","ECUMRPC1",158,0)
 I ECFIL=420.1 D CSTCTR            ;Cost Center search
"RTN","ECUMRPC1",159,0)
 I ECFIL=49 D SERVC                ;Service search
"RTN","ECUMRPC1",160,0)
 I ECFIL=723 D MEDSPC              ;Medical specialty
"RTN","ECUMRPC1",161,0)
 I ECFIL=40.7 D STPCDE G EXIT      ;Associated stop code
"RTN","ECUMRPC1",162,0)
 I ECFIL=724 D DUNT G EXIT         ;DSS Unit
"RTN","ECUMRPC1",163,0)
 I ECFIL=726 D ECAT                ;Category
"RTN","ECUMRPC1",164,0)
 I ECFIL=4 D LOC                   ;Location
"RTN","ECUMRPC1",165,0)
 I ECFIL=44 D ASCLN G EXIT         ;Associated clinic
"RTN","ECUMRPC1",166,0)
 I ECFIL=757.01 D LEX^ECUMRPC2 G EXIT  ;Lex ICD code
"RTN","ECUMRPC1",167,0)
 I ECFIL=200 D PROV^ECUMRPC2(ECNUM)      ;Providers
"RTN","ECUMRPC1",168,0)
 I ECFIL=728.441 D CHAR4                 ;126 National Clinic code (CHAR4)
"RTN","ECUMRPC1",169,0)
 I $D(ECER) S ^TMP($J,"ECFIND",1)="0^Error occurred during search" G EXIT
"RTN","ECUMRPC1",170,0)
 D SORT
"RTN","ECUMRPC1",171,0)
EXIT K ^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",172,0)
 S RESULTS=$NA(^TMP($J,"ECFIND"))
"RTN","ECUMRPC1",173,0)
 Q
"RTN","ECUMRPC1",174,0)
ASCLN ;Search for active associated clinics (file #44)
"RTN","ECUMRPC1",175,0)
 N CLN,CNT,NOD,ECDT,INACT,REACT,ERR,ECNOD ;126
"RTN","ECUMRPC1",176,0)
 S CNT=0,ECDT=ECADT ;112
"RTN","ECUMRPC1",177,0)
 I (ECDIR'=1)&(ECDIR'=-1) S ECDIR=1
"RTN","ECUMRPC1",178,0)
 ;the next 2 lines of code compensate for the M collating sequence & how the
"RTN","ECUMRPC1",179,0)
 ;clinic code is passed in from a CPRS RPC, in a unique situation. If the
"RTN","ECUMRPC1",180,0)
 ;code is numeric, ending in 0 and there is a similar code ending with a
"RTN","ECUMRPC1",181,0)
 ;letter, the correct clinic is not returned. EX: 2 clinics, 3010 and "3010A"
"RTN","ECUMRPC1",182,0)
 ;exist, the code is written to return 3010, yet 3010A is incorrectly returned. 
"RTN","ECUMRPC1",183,0)
 ;This code puts the 0 back on and subtracts 1 to the clinic code
"RTN","ECUMRPC1",184,0)
 I $E(ECSTR,$L(ECSTR)-1)="/",$E(ECSTR,1,($L(ECSTR)-2))?.N D
"RTN","ECUMRPC1",185,0)
 .S ECSTR=$E(ECSTR,1,($L(ECSTR)-2))_0,ECSTR=ECSTR-1
"RTN","ECUMRPC1",186,0)
 F  Q:CNT=ECNUM  S ECSTR=$O(^SC("B",ECSTR),ECDIR) Q:ECSTR=""  S CLN="" D
"RTN","ECUMRPC1",187,0)
 .F  S CLN=$O(^SC("B",ECSTR,CLN),ECDIR) Q:CLN=""  S NOD=$G(^SC(CLN,0)) D
"RTN","ECUMRPC1",188,0)
 ..Q:NOD=""  Q:$P(NOD,U,3)'="C"  ;Q:+$G(^SC(CLN,"OOS"))
"RTN","ECUMRPC1",189,0)
 ..I $G(ECLOC) I ECLOC'=$$GET1^DIQ(44,CLN,"3.5:.07","I") Q  ;126,130 Clinic must be assoicated with the selected location, if one was selected
"RTN","ECUMRPC1",190,0)
 ..S ERR=0 I $D(^SC(CLN,"I")) D  I ERR Q
"RTN","ECUMRPC1",191,0)
 ...S INACT=$P(^SC(CLN,"I"),U),REACT=$P(^SC(CLN,"I"),U,2)
"RTN","ECUMRPC1",192,0)
 ...I INACT D  I ERR Q
"RTN","ECUMRPC1",193,0)
 ....I REACT="" S:ECDT'<INACT ERR=1 Q
"RTN","ECUMRPC1",194,0)
 ....I ECDT'<INACT,ECDT<REACT S ERR=1 Q
"RTN","ECUMRPC1",195,0)
 ...;I REACT,ECDT<REACT S ERR=1  removed in EC*110 - BGP
"RTN","ECUMRPC1",196,0)
 ..S ECNOD=$G(^ECX(728.44,CLN,0)) ;126 Get clinic and stop code zero node for selected clinic
"RTN","ECUMRPC1",197,0)
 ..S CNT=CNT+1,^TMP($J,"ECFIND",CNT)=CLN_U_$P(NOD,U)_U_$P(ECNOD,U,2)_U_$P(ECNOD,U,3)_U_$P($G(^ECX(728.441,+$P(ECNOD,U,8),0)),U) ;126 Add stop code, credit stop, and char4 code
"RTN","ECUMRPC1",198,0)
 Q
"RTN","ECUMRPC1",199,0)
CSTCTR ;Search for cost centers (File #420.1)
"RTN","ECUMRPC1",200,0)
 N ECNULL,INDX,STR,NSTR,I
"RTN","ECUMRPC1",201,0)
 S $P(ECNULL," ",7)=" ",INDX="B"
"RTN","ECUMRPC1",202,0)
 I $E(ECSTR)?.N,$L(ECSTR)<7 S ECSTR=ECSTR_$E(ECNULL,1,7-$L(ECSTR))
"RTN","ECUMRPC1",203,0)
 I $L($P(ECSTR," "))=6,$P(ECSTR," ",2)?.A D   ;truncate for x-ref
"RTN","ECUMRPC1",204,0)
 . S ECSTR=$P(ECSTR," ")_" "_$E($P(ECSTR," ",2,999),1,22)
"RTN","ECUMRPC1",205,0)
 I $E(ECSTR)?.A S INDX="C",(STR,NSTR)="" D  S ECSTR=NSTR
"RTN","ECUMRPC1",206,0)
 .F I=1:1 S STR=$P(ECSTR," ",I) Q:STR=""  D
"RTN","ECUMRPC1",207,0)
 ..S STR=$E(STR)_$TR($E(STR,2,9999),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
"RTN","ECUMRPC1",208,0)
 ..S NSTR=NSTR_STR
"RTN","ECUMRPC1",209,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"",INDX,"I '$P(^(0),U,2)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",210,0)
 Q
"RTN","ECUMRPC1",211,0)
SERVC ;Search for services (File #49)
"RTN","ECUMRPC1",212,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",213,0)
 Q
"RTN","ECUMRPC1",214,0)
MEDSPC ;Search for medical specialty (File #723)
"RTN","ECUMRPC1",215,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",216,0)
 Q
"RTN","ECUMRPC1",217,0)
STPCDE ;Search for associated stop code (File #40.7)
"RTN","ECUMRPC1",218,0)
 N ECNT,INDX,ECNUL,STR,IEN
"RTN","ECUMRPC1",219,0)
 S $P(ECNUL,"  ",30)=" ",INDX="B",ECNT=0,ECSTR=$P(ECSTR,"~")
"RTN","ECUMRPC1",220,0)
 I +ECSTR,ECSTR["/" S ECSTR=$TR(ECSTR,"/",0) S:ECSTR>0 ECSTR=ECSTR-1 ;131 If number sent, remove / and replace with 0
"RTN","ECUMRPC1",221,0)
 I +ECSTR,+ECSTR?.N S INDX="C",IEN=0 D  Q
"RTN","ECUMRPC1",222,0)
 .S ECSTR=$O(^DIC(40.7,INDX,+ECSTR)) I ECSTR="" Q
"RTN","ECUMRPC1",223,0)
 .F  S IEN=$O(^DIC(40.7,INDX,ECSTR,IEN)) Q:'IEN  D  I ECNT>(ECNUM-1) Q
"RTN","ECUMRPC1",224,0)
 ..;07/27/09 llh added checks on piece 2 and 6
"RTN","ECUMRPC1",225,0)
 ..S STR=$G(^DIC(40.7,IEN,0)) I ($P(STR,U,3)'=""&($P(STR,U,3)'>DT))!($P(STR,U,6)=$S($G(ECTYPE)="":"S",1:"P"))!($P(STR,U,6)="")!($L($P(STR,U,2))'=3) Q  ;126 allow for searches for primary or secondary
"RTN","ECUMRPC1",226,0)
 ..S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)_U_IEN
"RTN","ECUMRPC1",227,0)
 ..S ECNT=ECNT+1,^TMP($J,"ECFIND",ECNT)=STR
"RTN","ECUMRPC1",228,0)
 ;added validation checks here as well
"RTN","ECUMRPC1",229,0)
 ;D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($P(^(0),U,6)'=""S"")","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",230,0)
 D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($L($P(^(0),U,2))=3)&(($P(^(0),U,6)=$S($G(ECTYPE)="""":""P"",1:""S""))!($P(^(0),U,6)=""E""))","","^TMP(""ECSRCH"",$J)","ECER") ;126
"RTN","ECUMRPC1",231,0)
 S ECNT=0
"RTN","ECUMRPC1",232,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",233,0)
 .S STR=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_$G(^(1))
"RTN","ECUMRPC1",234,0)
 .S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)
"RTN","ECUMRPC1",235,0)
 .S ^TMP($J,"ECFIND",ECNT)=STR_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",236,0)
 Q
"RTN","ECUMRPC1",237,0)
DUNT ;Search for DSS unit (File #724)
"RTN","ECUMRPC1",238,0)
 N ECNT,SNDPCE
"RTN","ECUMRPC1",239,0)
 D LISTDIC(ECFIL,"",".01;10;13",ECORD,ECNUM,ECSTR,"","","I '$P(^(0),""^"",6),$P(^(0),U,8)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",240,0)
 S ECNT=0
"RTN","ECUMRPC1",241,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",242,0)
 .S SNDPCE=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,13))
"RTN","ECUMRPC1",243,0)
 .S SNDPCE=$S(SNDPCE="O":1,SNDPCE="A":1,1:0)
"RTN","ECUMRPC1",244,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)_U_$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,10))_U_SNDPCE
"RTN","ECUMRPC1",245,0)
 Q
"RTN","ECUMRPC1",246,0)
ECAT ;Search for Category (File #726)
"RTN","ECUMRPC1",247,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P(^(0),""^"",3)=""""!($P(^(0),U,3)>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",248,0)
 Q
"RTN","ECUMRPC1",249,0)
LOC ;Search for Location (File #4)
"RTN","ECUMRPC1",250,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $G(^(""EC""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",251,0)
 Q
"RTN","ECUMRPC1",252,0)
LISTDIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER) ;
"RTN","ECUMRPC1",253,0)
 ;Produces a list of records in a file base on search string
"RTN","ECUMRPC1",254,0)
 N DIC
"RTN","ECUMRPC1",255,0)
 D LIST^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER)
"RTN","ECUMRPC1",256,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECID
"RTN","ECUMRPC1",257,0)
 Q
"RTN","ECUMRPC1",258,0)
SORT ;Extracts data to be returned to broker
"RTN","ECUMRPC1",259,0)
 N ECNT,STR
"RTN","ECUMRPC1",260,0)
 S ECNT=0
"RTN","ECUMRPC1",261,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",262,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",263,0)
 Q
"RTN","ECUMRPC1",264,0)
 ;
"RTN","ECUMRPC1",265,0)
CHAR4 ;126, returns list of CHAR4 codes from the NATIONAL CLINIC file (#728.441)
"RTN","ECUMRPC1",266,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P($G(^(2)),""^"")=""""!($P($G(^(2)),""^"")>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",267,0)
 Q
"RTN","ECUTL3")
0^6^B34886716^B19735136
"RTN","ECUTL3",1,0)
ECUTL3 ;ALB/DAN - Event capture utilities (cont) ;2/24/16  11:23
"RTN","ECUTL3",2,0)
 ;;2.0;EVENT CAPTURE;**122,131**;8 May 96;Build 13
"RTN","ECUTL3",3,0)
INACTSCR(ACTION) ;Inactivate event code screens associated with inactive national procedure codes
"RTN","ECUTL3",4,0)
 ;
"RTN","ECUTL3",5,0)
 ;ACTION - optional
"RTN","ECUTL3",6,0)
 ;         0 - Don't inactivate, test what would happen
"RTN","ECUTL3",7,0)
 ;         1 - Inactivate identified event code screens
"RTN","ECUTL3",8,0)
 ;
"RTN","ECUTL3",9,0)
 N SCREEN,LOC,DSSU,ECIEN,DA,DIE,DR,ECSCR,ECPTR,ECDATA,ECFILE
"RTN","ECUTL3",10,0)
 S:'$D(ACTION) ACTION=0 ;If not sent in, assume testing
"RTN","ECUTL3",11,0)
 S ECSCR=0
"RTN","ECUTL3",12,0)
 F  S ECSCR=$O(^ECJ("B",ECSCR)) Q:+ECSCR=0  D
"RTN","ECUTL3",13,0)
 .S ECPTR=$P(ECSCR,"-",4),ECIEN=$O(^ECJ("B",ECSCR,0))
"RTN","ECUTL3",14,0)
 .Q:'$D(^ECJ(ECIEN,0))  ;Screen doesn't exist
"RTN","ECUTL3",15,0)
 .Q:+$P(^ECJ(ECIEN,0),"^",2)  ;Skip if event code screen is already inactive
"RTN","ECUTL3",16,0)
 .S ECFILE=$P(ECPTR,";",2)
"RTN","ECUTL3",17,0)
 .;ec screens pointing to file #725
"RTN","ECUTL3",18,0)
 .I ECFILE["EC(725" S ECDATA=$G(^EC(725,$P(ECPTR,";",1),0)) D
"RTN","ECUTL3",19,0)
 ..Q:$P(ECDATA,U,3)=""  ;Skip if national procedure code is active
"RTN","ECUTL3",20,0)
 ..I $P(ECDATA,U,3)>DT,ACTION Q  ;If inactivation date is in the future and we're inactivating event code screens, skip it as we don't want to inactivate screen until procedure is inactive
"RTN","ECUTL3",21,0)
 ..S DSSU=$P(ECSCR,"-",2) Q:DSSU=""  ;If no DSS unit, quit
"RTN","ECUTL3",22,0)
 ..S SCREEN(DSSU,ECIEN)="" ;put on list to inactivate if not already inactive
"RTN","ECUTL3",23,0)
 I $G(ACTION) S DSSU=0 F  S DSSU=$O(SCREEN(DSSU)) Q:'+DSSU  S ECIEN=0 F  S ECIEN=$O(SCREEN(DSSU,ECIEN)) Q:'+ECIEN  D
"RTN","ECUTL3",24,0)
 .S DA=ECIEN,DIE="^ECJ(",DR="1////"_$$DT^XLFDT D ^DIE ;Set inactivation date to today
"RTN","ECUTL3",25,0)
 ;
"RTN","ECUTL3",26,0)
MAIL ;Send email to group showing action taken
"RTN","ECUTL3",27,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,LOC,PRO,CNT,PX,CAT,CPT,ACLIN
"RTN","ECUTL3",28,0)
 S XMDUZ="Event Capture Package"
"RTN","ECUTL3",29,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","ECUTL3",30,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","ECUTL3",31,0)
 S XMSUB="Inactivation of Event Code Screens from inactive procedure codes"
"RTN","ECUTL3",32,0)
 S XMTEXT="ECTEXT("
"RTN","ECUTL3",33,0)
 S CNT=1
"RTN","ECUTL3",34,0)
 I '$D(SCREEN) D
"RTN","ECUTL3",35,0)
 .S ECTEXT(CNT)="No Event Code Screens were inactivated, as no inactive",CNT=CNT+1,ECTEXT(CNT)="EC Procedure Codes were found in use.",CNT=CNT+1
"RTN","ECUTL3",36,0)
 I $D(SCREEN) D
"RTN","ECUTL3",37,0)
 .S ECTEXT(CNT)="The following event code screens "_$S($G(ACTION):"",1:"would ")_"have been inactivated",CNT=CNT+1
"RTN","ECUTL3",38,0)
 .S ECTEXT(CNT)="because these Event Code Screens were associated",CNT=CNT+1
"RTN","ECUTL3",39,0)
 .S ECTEXT(CNT)="with inactive EC Procedure Codes.",CNT=CNT+1
"RTN","ECUTL3",40,0)
 I '$G(ACTION),$D(SCREEN) S ECTEXT(CNT)=" ",CNT=CNT+1 D
"RTN","ECUTL3",41,0)
 .S ECTEXT(CNT)="Inactivations have not yet occurred; this list represents event code",CNT=CNT+1,ECTEXT(CNT)="screens that will be inactivated automatically "_$S($G(DAYS):DAYS_" days ",1:"")_"in the future.",CNT=CNT+1
"RTN","ECUTL3",42,0)
 S ECTEXT(CNT)=" ",CNT=CNT+1
"RTN","ECUTL3",43,0)
 S DSSU=0 F  S DSSU=$O(SCREEN(DSSU)) Q:'+DSSU  D
"RTN","ECUTL3",44,0)
 .S ECTEXT(CNT)="DSS UNIT: "_$$GET1^DIQ(724,DSSU,.01,"E")_" ("_DSSU_")",CNT=CNT+1
"RTN","ECUTL3",45,0)
 .S ECIEN=0 F  S ECIEN=$O(SCREEN(DSSU,ECIEN)) Q:'+ECIEN  D
"RTN","ECUTL3",46,0)
 ..S LOC=$$GET1^DIQ(4,$P($P(^ECJ(ECIEN,0),U),"-"),.01,"E"),PRO=$G(^EC(725,+$P($P(^ECJ(ECIEN,0),U),"-",4),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUTL3",47,0)
 ..S ECTEXT(CNT)="  LOC: "_LOC_$$REPEAT^XLFSTR(" ",(27-$L(LOC)))_"PROC: "_PX,CNT=CNT+1
"RTN","ECUTL3",48,0)
 ..S CAT=$P($P(^ECJ(ECIEN,0),U),"-",3),CAT=$S(CAT:$P($G(^EC(726,CAT,0)),U),1:""),CPT=$$GET1^DIQ(81,+$P(PRO,U,5),.01,"E")
"RTN","ECUTL3",49,0)
 ..S ECTEXT(CNT)="  CAT: "_CAT_$$REPEAT^XLFSTR(" ",(27-$L(CAT)))_"CPT: "_CPT,CNT=CNT+1
"RTN","ECUTL3",50,0)
 ..S ACLIN=$$GET1^DIQ(44,+$P(^ECJ(ECIEN,"PRO"),U,4),.01,"E"),ECTEXT(CNT)="  DEFAULT ASSOCIATED CLINIC: "_ACLIN,CNT=CNT+1
"RTN","ECUTL3",51,0)
 ..S ECTEXT(CNT)=" ",CNT=CNT+1
"RTN","ECUTL3",52,0)
 D ^XMD ;Send email
"RTN","ECUTL3",53,0)
 Q
"RTN","ECUTL3",54,0)
 ;
"RTN","ECUTL3",55,0)
QINACT ;Queue the inactivation of event code screens to happen
"RTN","ECUTL3",56,0)
 ;in the background.  Comes from "AC" cross reference of the
"RTN","ECUTL3",57,0)
 ;INACTIVE DATE (#2) field of file 725
"RTN","ECUTL3",58,0)
 N ZTRTN,ZTDTH,ZTDESC,ZTIO,ZTSK
"RTN","ECUTL3",59,0)
 S ZTRTN="INACTSCR^ECUTL3(1)",ZTDTH=$H,ZTDESC="Inactivate event code screens with inactive procedure codes",ZTIO="" D ^%ZTLOAD
"RTN","ECUTL3",60,0)
 Q
"RTN","ECUTL3",61,0)
 ;
"RTN","ECUTL3",62,0)
CHKDSS ;131 Inactivate any DSS units that are set to send no records and have an inactive/invalid stop code
"RTN","ECUTL3",63,0)
 N UNIT,DSS0,SC0,BAD,UPDATE
"RTN","ECUTL3",64,0)
 S UNIT=0 F  S UNIT=$O(^ECD(UNIT)) Q:'+UNIT  D
"RTN","ECUTL3",65,0)
 .S BAD=0
"RTN","ECUTL3",66,0)
 .S DSS0=$G(^ECD(UNIT,0))
"RTN","ECUTL3",67,0)
 .I $P(DSS0,U,6) Q  ;DSS Unit is inactive
"RTN","ECUTL3",68,0)
 .I $P(DSS0,U,14)'="N" Q  ;only look at "send no records" units
"RTN","ECUTL3",69,0)
 .S SC0=$G(^DIC(40.7,+$P(DSS0,U,10),0)) ;Get stop code zero node
"RTN","ECUTL3",70,0)
 .I $P(SC0,U,3) I $P(SC0,U,3)'>DT S BAD=1 ;Stop code is inactive
"RTN","ECUTL3",71,0)
 .I $P(SC0,U,6)="S"!($P(SC0,U,6)="") S BAD=1 ;Stop code is a secondary code or is not set
"RTN","ECUTL3",72,0)
 .I $L($P(SC0,U,2))'=3 S BAD=1 ;Stop code is not 3 digits in length
"RTN","ECUTL3",73,0)
 .I BAD S UPDATE($P(DSS0,U)_U_UNIT)="" S $P(^ECD(UNIT,0),U,6)=1 ;Store changed DSS unit for report and inactivate DSS unit
"RTN","ECUTL3",74,0)
 ;Send results via email
"RTN","ECUTL3",75,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,NAME,CNT
"RTN","ECUTL3",76,0)
 S XMDUZ="Event Capture Package"
"RTN","ECUTL3",77,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","ECUTL3",78,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","ECUTL3",79,0)
 S ECTEXT(1)="The check for DSS Units with a Send to PCE setting of 'Send no records'"
"RTN","ECUTL3",80,0)
 S ECTEXT(2)="and an invalid/inactive stop code has completed.  Below are the results."
"RTN","ECUTL3",81,0)
 S ECTEXT(3)=""
"RTN","ECUTL3",82,0)
 I '$D(UPDATE) S ECTEXT(4)="No DSS Units were identified.  No further action is required."
"RTN","ECUTL3",83,0)
 S CNT=4 ;start with line 4 to add to message
"RTN","ECUTL3",84,0)
 I $D(UPDATE) D
"RTN","ECUTL3",85,0)
 .S ECTEXT(CNT)="The following DSS Units were inactivated:",CNT=CNT+1,ECTEXT(CNT)="",CNT=CNT+1
"RTN","ECUTL3",86,0)
 .S ECTEXT(CNT)="NAME"_$$REPEAT^XLFSTR(" ",28)_"DSS IEN",CNT=CNT+1,ECTEXT(CNT)="----"_$$REPEAT^XLFSTR(" ",28)_"-------",CNT=CNT+1
"RTN","ECUTL3",87,0)
 .S NAME="" F  S NAME=$O(UPDATE(NAME)) Q:NAME=""  S ECTEXT(CNT)=$P(NAME,U)_$$REPEAT^XLFSTR(" ",(32-$L($P(NAME,U))))_$P(NAME,U,2),CNT=CNT+1
"RTN","ECUTL3",88,0)
 S XMTEXT="ECTEXT(",XMSUB="DSS Unit send no records review"
"RTN","ECUTL3",89,0)
 D ^XMD ;Send email
"RTN","ECUTL3",90,0)
 Q
"RTN","ECV1RPC")
0^19^B15098086^B7956996
"RTN","ECV1RPC",1,0)
ECV1RPC ;ALB/ACS;Event Capture Spreadsheet Upload Broker Utilities ;2/9/16  13:14
"RTN","ECV1RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,33,49,61,131**;8 May 96;Build 13
"RTN","ECV1RPC",3,0)
 ;
"RTN","ECV1RPC",4,0)
IN(RESULTS,ECDATA) ;
"RTN","ECV1RPC",5,0)
 ;----------------------------------------------------------------------
"RTN","ECV1RPC",6,0)
 ;This broker entry point receives a row of data from the Event
"RTN","ECV1RPC",7,0)
 ;Capture GUI Spreadsheet (a module of the Event Capture GUI app).
"RTN","ECV1RPC",8,0)
 ;The data is validated and an array is returned to the spreadsheet
"RTN","ECV1RPC",9,0)
 ;module.
"RTN","ECV1RPC",10,0)
 ;
"RTN","ECV1RPC",11,0)
 ;          RPC: EC VALIDATE SPREADSHEET DATA
"RTN","ECV1RPC",12,0)
 ;
"RTN","ECV1RPC",13,0)
 ;INPUT     ECDATA  - Contains either the column headers or a row of
"RTN","ECV1RPC",14,0)
 ;                    spreadshet data.  Fields included are:
"RTN","ECV1RPC",15,0)
 ;                    Record number, station, SSN, patient last
"RTN","ECV1RPC",16,0)
 ;                    name, patient first name, DSS unit name, DSS
"RTN","ECV1RPC",17,0)
 ;                    unit number, DSS unit IEN, procedure code,
"RTN","ECV1RPC",18,0)
 ;                    volume, ordering section, encounter d/t,category,
"RTN","ECV1RPC",19,0)
 ;                    diag code, associated clinic name,
"RTN","ECV1RPC",20,0)
 ;                    Associated Clinic IEN, CPT Mod #1, CPT Mod #2, 
"RTN","ECV1RPC",21,0)
 ;                    CPT Mod #3, CPT Mod #4, CPT Mod #5, Agent Orange, 
"RTN","ECV1RPC",22,0)
 ;                    Ionizing Rad, Service connected, SW Asia, MST, 
"RTN","ECV1RPC",23,0)
 ;                    HNC, Combat Vet, SHAD, Camp Lejeune, Prov #1,
"RTN","ECV1RPC",24,0)
 ;                    Prov #2, Prov #3, Prov #4,Prov #5, Prov #6,
"RTN","ECV1RPC",25,0)
 ;                    Prov #7, patient status override flag, override 
"RTN","ECV1RPC",26,0)
 ;                    deceased flag and file duplicate(s) flag.
"RTN","ECV1RPC",27,0)
 ;
"RTN","ECV1RPC",28,0)
 ;OUTPUT    RESULTS - If an error is found during data validation,
"RTN","ECV1RPC",29,0)
 ;                    then the output contains an array of error
"RTN","ECV1RPC",30,0)
 ;                    messages:
"RTN","ECV1RPC",31,0)
 ;
"RTN","ECV1RPC",32,0)
 ;                    PIECE     Description
"RTN","ECV1RPC",33,0)
 ;                    -----     ------------------------
"RTN","ECV1RPC",34,0)
 ;                      1       Record number
"RTN","ECV1RPC",35,0)
 ;                      2       Column number (on spreadsheet)
"RTN","ECV1RPC",36,0)
 ;                              containing the record number
"RTN","ECV1RPC",37,0)
 ;                      3       Column number (on spreadsheet)
"RTN","ECV1RPC",38,0)
 ;                              containing the data in error
"RTN","ECV1RPC",39,0)
 ;                      4       Error message
"RTN","ECV1RPC",40,0)
 ;
"RTN","ECV1RPC",41,0)
 ;                  - If no errors are found during data validation,
"RTN","ECV1RPC",42,0)
 ;                    then the output contains a string of Event
"RTN","ECV1RPC",43,0)
 ;                    Capture data for that patient, beginning with
"RTN","ECV1RPC",44,0)
 ;                    the string "NO ERRORS":
"RTN","ECV1RPC",45,0)
 ;
"RTN","ECV1RPC",46,0)
 ;                    "NO ERRORS"^Patient SSN IEN^Encounter Date/Time^
"RTN","ECV1RPC",47,0)
 ;                    Station IEN^DSS Unit IEN^Category^Procedure^Volume
"RTN","ECV1RPC",48,0)
 ;                    ^Ordering Section IEN^User IEN^Primary Diagnosis^
"RTN","ECV1RPC",49,0)
 ;                    Associated ClinicCPT Mod #1 IEN^CPT Mod #2 IEN^
"RTN","ECV1RPC",50,0)
 ;                    CPT Mod #3 IEN^CPT Mod #4 IEN^CPT Mode #5 IEN^
"RTN","ECV1RPC",51,0)
 ;                    AO^Ion Rad^SC^SW Asia^MST^HNC^CV^SHAD^Camp 
"RTN","ECV1RPC",52,0)
 ;                    Lejeune^rov 1^Prov 2^Prov 3^Prov 4^Prov 5^Prov 6^
"RTN","ECV1RPC",53,0)
 ;                    Prov 7^Patient Status^
"RTN","ECV1RPC",54,0)
 ;                 
"RTN","ECV1RPC",55,0)
 ;OTHER     ^TMP($J,"COLS") will store the column/data order
"RTN","ECV1RPC",56,0)
 ;          (used as data 'piece') of the input data string.
"RTN","ECV1RPC",57,0)
 ;          For example:
"RTN","ECV1RPC",58,0)
 ;
"RTN","ECV1RPC",59,0)
 ;          ^TMP($J,"COLS","ECRECPC")=1   => Record number is 1st piece
"RTN","ECV1RPC",60,0)
 ;          ^TMP($J,"COLS","ECSTAPC")=2   => Station is 2nd piece
"RTN","ECV1RPC",61,0)
 ;
"RTN","ECV1RPC",62,0)
 ;SPECIAL PROCESSING
"RTN","ECV1RPC",63,0)
 ;          An exception to the above described output exists when no
"RTN","ECV1RPC",64,0)
 ;          exact match is found on the provider.  In this case, some
"RTN","ECV1RPC",65,0)
 ;          provider info will be sent back with the error message
"RTN","ECV1RPC",66,0)
 ;          so the user can determine which provider they want.  For
"RTN","ECV1RPC",67,0)
 ;          example, provider JONES,WILLIAM is entered by the user, but
"RTN","ECV1RPC",68,0)
 ;          the file contains JONES,WILLIAM H and JONES,WILLIAM J.
"RTN","ECV1RPC",69,0)
 ;          Both of those providers and their associated information 
"RTN","ECV1RPC",70,0)
 ;          will be sent with the error message.
"RTN","ECV1RPC",71,0)
 ;       
"RTN","ECV1RPC",72,0)
 ;
"RTN","ECV1RPC",73,0)
 ;----------------------------------------------------------------------
"RTN","ECV1RPC",74,0)
 ;
"RTN","ECV1RPC",75,0)
INIT ;-- piece numbers (associated with column numbers in the spreadsheet)
"RTN","ECV1RPC",76,0)
 N ECRECPC,ECSTAPC,ECSSNPC,ECPATLPC,ECPATFPC,ECDSSPC,ECDCMPC,ECUNITPC
"RTN","ECV1RPC",77,0)
 N ECPROCPC,ECVOLPC,ECOSPC,ECPRV1PC,ECENCPC,ECCATPC,ECDXPC ;131
"RTN","ECV1RPC",78,0)
 N ECCLNNPC,ECCLNIPC,ECMOD1PC,ECMOD2PC,ECMOD3PC,ECMOD4PC,ECMOD5PC,ECAOPC,ECIRPC,ECSCPC,ECSWAPC,ECMSTPC,ECHNCPC,ECCVPC,ECSHADPC,ECCLPC ;131
"RTN","ECV1RPC",79,0)
 N ECPRV2PC,ECPRV3PC,ECPRV4PC,ECPRV5PC,ECPRV6PC,ECPRV7PC ;131
"RTN","ECV1RPC",80,0)
 ;-- spreadsheet values entered by user
"RTN","ECV1RPC",81,0)
 N ECRECV,ECSTAV,ECSSNV,ECPATLV,ECPATFV,ECPATV,ECDSSV,ECDCMV,ECUNITV
"RTN","ECV1RPC",82,0)
 N ECPROCV,ECVOLV,ECOSV,ECPRV1V,ECENCV,ECCATV,ECDXV ;131
"RTN","ECV1RPC",83,0)
 N ECCLNNV,ECPSTATV,ECDECPAT,ECFILDUP ;131
"RTN","ECV1RPC",84,0)
 N ECPRV2V,ECPRV3V,ECPRV4V,ECPRV5V,ECPRV6V,ECPRV7V,ECCLNIV,ECMOD1V,ECMOD2V,ECMOD3V,ECMOD4V,ECMOD5V,ECAOV,ECIRV,ECSCV,ECSWAV,ECMSTV,ECHNCV,ECCVV,ECSHADV,ECCLV ;131
"RTN","ECV1RPC",85,0)
 ;-- error flags and derived data
"RTN","ECV1RPC",86,0)
 N ECERR,ECERRFLG,ECERRMSG,ECCOLERR,ECPRVIEN,ECOSIEN,ECVSSN,ECDSSIEN
"RTN","ECV1RPC",87,0)
 N ECINDEX,ECSSNIEN,ECPCLASS,ECPRVTYP,ECCATIEN,ECDXIEN,ECCLNIEN
"RTN","ECV1RPC",88,0)
 N ECPSTAT
"RTN","ECV1RPC",89,0)
 ;
"RTN","ECV1RPC",90,0)
 S U="^"
"RTN","ECV1RPC",91,0)
 S (ECINDEX,ECERR)=0
"RTN","ECV1RPC",92,0)
 K RESULTS
"RTN","ECV1RPC",93,0)
 ;
"RTN","ECV1RPC",94,0)
 ;--Call utility program to set up piece numbers and column header info
"RTN","ECV1RPC",95,0)
 I ECDATA["COLHEADERS" D ECHDRS^ECU1RPC(ECDATA) Q
"RTN","ECV1RPC",96,0)
 ;
"RTN","ECV1RPC",97,0)
 I ECDATA["END OF PROCESSING" D CLEANUP Q
"RTN","ECV1RPC",98,0)
 ;
"RTN","ECV1RPC",99,0)
MAIN ;--Call utility program to get piece numbers and set up data values
"RTN","ECV1RPC",100,0)
 D GETDATA^ECU1RPC(ECDATA)
"RTN","ECV1RPC",101,0)
 ;
"RTN","ECV1RPC",102,0)
 ;--Call validation routines to validate the data
"RTN","ECV1RPC",103,0)
 D ^ECV2RPC
"RTN","ECV1RPC",104,0)
 D ^ECV3RPC
"RTN","ECV1RPC",105,0)
 D ^ECV4RPC
"RTN","ECV1RPC",106,0)
 ;
"RTN","ECV1RPC",107,0)
FINAL ;If no errors, send data back to spreadsheet module
"RTN","ECV1RPC",108,0)
 ;note: ECDXIEN and ECCLNIEN will not be sent back if the record is 
"RTN","ECV1RPC",109,0)
 ;not being sent to PCE.
"RTN","ECV1RPC",110,0)
 ;
"RTN","ECV1RPC",111,0)
 I '($D(RESULTS(1))) D
"RTN","ECV1RPC",112,0)
 . N RESDATA
"RTN","ECV1RPC",113,0)
 . S RESDATA="NO ERRORS"_U_ECSSNIEN_U_ECENCV_U_ECSTAV_U_ECDSSIEN ;131
"RTN","ECV1RPC",114,0)
 . S RESDATA=RESDATA_U_ECCATIEN_U_ECPROCV_U_ECVOLV ;131
"RTN","ECV1RPC",115,0)
 . S RESDATA=RESDATA_U_ECOSIEN_U_ECDUZ_U_$G(ECDXIEN) ;131
"RTN","ECV1RPC",116,0)
 . S RESDATA=RESDATA_U_$G(ECCLNIEN)_U_ECMOD1V_U_ECMOD2V_U_ECMOD3V_U_ECMOD4V_U_ECMOD5V ;131
"RTN","ECV1RPC",117,0)
 . S RESDATA=RESDATA_U_ECAOV_U_ECIRV_U_ECSCV_U_ECSWAV_U_ECMSTV_U_ECHNCV_U_ECCVV_U_ECSHADV_U_ECCLV ;131
"RTN","ECV1RPC",118,0)
 . S RESDATA=RESDATA_U_ECPRV1V_U_ECPRV2V_U_ECPRV3V_U_ECPRV4V_U_ECPRV5V_U_ECPRV6V_U_ECPRV7V_U_ECPSTAT_U ;131
"RTN","ECV1RPC",119,0)
 . S RESULTS(1)=RESDATA
"RTN","ECV1RPC",120,0)
 . Q
"RTN","ECV1RPC",121,0)
 Q
"RTN","ECV1RPC",122,0)
 ;
"RTN","ECV1RPC",123,0)
CLEANUP ;Delete temporary files
"RTN","ECV1RPC",124,0)
 I $D(^TMP($J,"COLS")) K ^TMP($J,"COLS")
"RTN","ECV1RPC",125,0)
 Q
"RTN","ECV3RPC")
0^20^B68891193^B45442290
"RTN","ECV3RPC",1,0)
ECV3RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;2/9/16  16:24
"RTN","ECV3RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,47,49,61,72,131**;8 May 96;Build 13
"RTN","ECV3RPC",3,0)
 ;
"RTN","ECV3RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV3RPC",6,0)
 ;    1. DSS UNIT IEN, DSS UNIT NUMBER, DSS UNIT NAME
"RTN","ECV3RPC",7,0)
 ;    2. ORDERING SECTION
"RTN","ECV3RPC",8,0)
 ;    3. PROCEDURE CODE
"RTN","ECV3RPC",9,0)
 ;    4. CPT Modifiers
"RTN","ECV3RPC",10,0)
 ;    5. CATEGORY
"RTN","ECV3RPC",11,0)
 ;
"RTN","ECV3RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",13,0)
 ;
"RTN","ECV3RPC",14,0)
 ;--Set up error flag
"RTN","ECV3RPC",15,0)
 S ECERRFLG=0
"RTN","ECV3RPC",16,0)
 ;
"RTN","ECV3RPC",17,0)
 ;--GET DSS Unit IEN--
"RTN","ECV3RPC",18,0)
 S ECDSSIEN=""
"RTN","ECV3RPC",19,0)
 ; -Check for DSS Unit IEN first
"RTN","ECV3RPC",20,0)
 I ECUNITV'="",(ECUNITV'=+ECUNITV) D
"RTN","ECV3RPC",21,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",22,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",23,0)
 . D ERROR
"RTN","ECV3RPC",24,0)
 I ECUNITV,'ECERRFLG,$D(^ECD(ECUNITV,0)) S ECDSSIEN=ECUNITV
"RTN","ECV3RPC",25,0)
 I ECUNITV,'ECERRFLG,'$D(^ECD(ECUNITV,0)) D
"RTN","ECV3RPC",26,0)
 . ; DSS unit ien not found on VistA
"RTN","ECV3RPC",27,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",28,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",29,0)
 . D ERROR
"RTN","ECV3RPC",30,0)
 . Q
"RTN","ECV3RPC",31,0)
 ; -Check for DSS Unit Number
"RTN","ECV3RPC",32,0)
 I ECDCMV'="",'$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",33,0)
 . ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",34,0)
 . S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",35,0)
 . S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",36,0)
 . D ERROR
"RTN","ECV3RPC",37,0)
 I 'ECERRFLG,ECDCMV'="",$D(^ECD("C",ECDCMV)) S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",38,0)
 ;Check if the next record is a match
"RTN","ECV3RPC",39,0)
 I 'ECERRFLG,'ECDSSIEN,ECDCMV'="",$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",40,0)
 . S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",41,0)
 . I '$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",42,0)
 . . ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",43,0)
 . . S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",44,0)
 . . S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",45,0)
 . . D ERROR
"RTN","ECV3RPC",46,0)
 . . Q
"RTN","ECV3RPC",47,0)
 ; -Check for DSS Unit Name
"RTN","ECV3RPC",48,0)
 I ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",49,0)
 . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",50,0)
 . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",51,0)
 . D ERROR
"RTN","ECV3RPC",52,0)
 ; 
"RTN","ECV3RPC",53,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",$D(^ECD("B",ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECDSSV,0))
"RTN","ECV3RPC",54,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",55,0)
 . N ECNXTDSS
"RTN","ECV3RPC",56,0)
 . S ECNXTDSS=$O(^ECD("B",ECDSSV))
"RTN","ECV3RPC",57,0)
 . I ECDSSV=$E(ECNXTDSS,1,$L(ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECNXTDSS,0))
"RTN","ECV3RPC",58,0)
 . ;
"RTN","ECV3RPC",59,0)
 . I ECDSSV'=$E(ECNXTDSS,1,$L(ECDSSV)) D
"RTN","ECV3RPC",60,0)
 . . ; DSS unit name not found on VistA
"RTN","ECV3RPC",61,0)
 . . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",62,0)
 . . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",63,0)
 . . D ERROR
"RTN","ECV3RPC",64,0)
 . . Q
"RTN","ECV3RPC",65,0)
 . Q
"RTN","ECV3RPC",66,0)
 ;
"RTN","ECV3RPC",67,0)
 I ECDSSIEN="" D  ;131 Need to have a DSS Unit identified
"RTN","ECV3RPC",68,0)
 .S ECERRMSG=$P($T(DSS4^ECV3RPC),";;",2)
"RTN","ECV3RPC",69,0)
 .S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",70,0)
 .D ERROR
"RTN","ECV3RPC",71,0)
 .Q
"RTN","ECV3RPC",72,0)
 ;--Validate Ordering section or derive from DSS Unit IEN--
"RTN","ECV3RPC",73,0)
 I ECOSV'="" D
"RTN","ECV3RPC",74,0)
 . S ECOSIEN=$O(^ECC(723,"B",ECOSV,0))
"RTN","ECV3RPC",75,0)
 . I ECOSIEN="" D
"RTN","ECV3RPC",76,0)
 . . ; Ordering Section "B" x-ref doesn't exist
"RTN","ECV3RPC",77,0)
 . . S ECERRMSG=$P($T(ORDSEC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",78,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",79,0)
 . . D ERROR
"RTN","ECV3RPC",80,0)
 . . Q
"RTN","ECV3RPC",81,0)
 . Q
"RTN","ECV3RPC",82,0)
 I ECOSV="" D
"RTN","ECV3RPC",83,0)
 . I 'ECDSSIEN D
"RTN","ECV3RPC",84,0)
 . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",85,0)
 . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",86,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",87,0)
 . . D ERROR
"RTN","ECV3RPC",88,0)
 . . Q
"RTN","ECV3RPC",89,0)
 . I ECDSSIEN D
"RTN","ECV3RPC",90,0)
 . . S ECOSIEN=$P(^ECD(ECDSSIEN,0),U,3)
"RTN","ECV3RPC",91,0)
 . . I ECOSIEN="" D
"RTN","ECV3RPC",92,0)
 . . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",93,0)
 . . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",94,0)
 . . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",95,0)
 . . . D ERROR
"RTN","ECV3RPC",96,0)
 . . . Q
"RTN","ECV3RPC",97,0)
 . . Q
"RTN","ECV3RPC",98,0)
 ;
"RTN","ECV3RPC",99,0)
 ;--Procedure must be a National Procedure, Local Procedure,   --
"RTN","ECV3RPC",100,0)
 ;--or a CPT code, and the EC Event Code Screen must be active --
"RTN","ECV3RPC",101,0)
 N ECFOUND,ECPI,ECDT
"RTN","ECV3RPC",102,0)
 S ECERRFLG=0,ECFOUND=0
"RTN","ECV3RPC",103,0)
 S %DT="XST",X=$G(ECENCV,"NOW") D ^%DT S ECDT=+Y
"RTN","ECV3RPC",104,0)
 ; Check for National Procedure code (D x-ref)
"RTN","ECV3RPC",105,0)
 I $D(^EC(725,"D",ECPROCV)) D
"RTN","ECV3RPC",106,0)
 . S ECPROCV=$O(^EC(725,"D",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",107,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",108,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",109,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7) S ECFOUND=1
"RTN","ECV3RPC",110,0)
 ; Check for local procedure code (DL x-ref)
"RTN","ECV3RPC",111,0)
 I 'ECFOUND,$D(^EC(725,"DL",ECPROCV)) D
"RTN","ECV3RPC",112,0)
 . S ECPROCV=$O(^EC(725,"DL",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",113,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",114,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",115,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7)  S ECFOUND=1
"RTN","ECV3RPC",116,0)
 ; Check for CPT code (B x-ref)
"RTN","ECV3RPC",117,0)
 I 'ECFOUND S ECPI=$$CPT^ICPTCOD(ECPROCV,ECDT) I +ECPI>0,$P(ECPI,"^",7) D
"RTN","ECV3RPC",118,0)
 . S ECPROCV=$P(ECPI,"^")_";ICPT("
"RTN","ECV3RPC",119,0)
 . S ECFOUND=1
"RTN","ECV3RPC",120,0)
 ;
"RTN","ECV3RPC",121,0)
 I 'ECFOUND D
"RTN","ECV3RPC",122,0)
 . ; Invalid procedure code
"RTN","ECV3RPC",123,0)
 . S ECERRMSG=$P($T(PROC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",124,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",125,0)
 . D ERROR
"RTN","ECV3RPC",126,0)
 . Q
"RTN","ECV3RPC",127,0)
 I ECFOUND,$G(ECPI) D  ;Section added in 131 to check CPT Modifiers
"RTN","ECV3RPC",128,0)
 .N MODLIST,VALUES,MODARR,MSUB,ENTRY
"RTN","ECV3RPC",129,0)
 .S VALUES=$P(ECPI,U)_U_$G(ECENCV,$$DT^XLFDT) ;Procedure code and encounter date or today's date
"RTN","ECV3RPC",130,0)
 .D ECPXMOD^ECUERPC(.MODLIST,VALUES) ;Call returns valid modifiers for selected CPT code
"RTN","ECV3RPC",131,0)
 .S MSUB=0 F  S MSUB=$O(@MODLIST@(MSUB)) Q:'+MSUB  S MODARR($P(@MODLIST@(MSUB),U))=@MODLIST@(MSUB)
"RTN","ECV3RPC",132,0)
 .F MSUB=1:1:5 S ENTRY=@("ECMOD"_MSUB_"V") I ENTRY'="" D  ;Look at each modifier
"RTN","ECV3RPC",133,0)
 ..I '$D(MODARR(ENTRY)) D  Q
"RTN","ECV3RPC",134,0)
 ...S ECERRMSG=$P($T(MOD1^ECV3RPC),";;",2)
"RTN","ECV3RPC",135,0)
 ...S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",136,0)
 ...D ERROR
"RTN","ECV3RPC",137,0)
 ..S @("ECMOD"_MSUB_"V")=$P(MODARR(ENTRY),U,3) K MODARR(ENTRY) ;Delete modifer from list if used so it can't be duplicated
"RTN","ECV3RPC",138,0)
 ..Q
"RTN","ECV3RPC",139,0)
 .Q
"RTN","ECV3RPC",140,0)
 I ECFOUND,'$G(ECPI) D  ;131 Section checks to see if modifiers sent for a non-CPT procedure
"RTN","ECV3RPC",141,0)
 .N MSUB
"RTN","ECV3RPC",142,0)
 .F MSUB=1:1:5 I $G(@("ECMOD"_MSUB_"V"))'="" D
"RTN","ECV3RPC",143,0)
 ..S ECERRMSG=$P($T(MOD2^ECV3RPC),";;",2)
"RTN","ECV3RPC",144,0)
 ..S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",145,0)
 ..D ERROR
"RTN","ECV3RPC",146,0)
 ..Q
"RTN","ECV3RPC",147,0)
 .Q
"RTN","ECV3RPC",148,0)
 ;
"RTN","ECV3RPC",149,0)
 ; -Category must exist on the Event Capture Category file
"RTN","ECV3RPC",150,0)
 I ECCATV="" S ECCATIEN=0
"RTN","ECV3RPC",151,0)
 I ECCATV'="" D
"RTN","ECV3RPC",152,0)
 . I $D(^EC(726,"B",ECCATV)) S ECCATIEN=$O(^EC(726,"B",ECCATV,0))
"RTN","ECV3RPC",153,0)
 . I '$D(^EC(726,"B",ECCATV)) D
"RTN","ECV3RPC",154,0)
 . . ; B cross reference not found for category
"RTN","ECV3RPC",155,0)
 . . S ECERRMSG=$P($T(CAT1^ECV3RPC),";;",2)
"RTN","ECV3RPC",156,0)
 . . S ECCOLERR=ECCATPC
"RTN","ECV3RPC",157,0)
 . . D ERROR
"RTN","ECV3RPC",158,0)
 . . Q
"RTN","ECV3RPC",159,0)
 ;
"RTN","ECV3RPC",160,0)
 ; -check for active Event Code screen
"RTN","ECV3RPC",161,0)
 N ECEVNT,ECSNODE,ECSDATA,ECSFOUND
"RTN","ECV3RPC",162,0)
 I 'ECERRFLG D
"RTN","ECV3RPC",163,0)
 . S ECEVNT=ECSTAV_"-"_ECDSSIEN_"-"_ECCATIEN_"-"_ECPROCV
"RTN","ECV3RPC",164,0)
 . S (ECSNODE,ECSFOUND)=0
"RTN","ECV3RPC",165,0)
 . F  S ECSNODE=$O(^ECJ(ECSNODE)) Q:ECSNODE=""  D
"RTN","ECV3RPC",166,0)
 . . S ECSDATA=$G(^ECJ(ECSNODE,0))
"RTN","ECV3RPC",167,0)
 . . I ECEVNT=$P(ECSDATA,U,1) D
"RTN","ECV3RPC",168,0)
 . . . S ECSFOUND=1
"RTN","ECV3RPC",169,0)
 . . . I $P(ECSDATA,U,2)'="" D
"RTN","ECV3RPC",170,0)
 . . . . ; Event Code screen inactive
"RTN","ECV3RPC",171,0)
 . . . . S ECERRMSG=$P($T(PROC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",172,0)
 . . . . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",173,0)
 . . . . D ERROR
"RTN","ECV3RPC",174,0)
 . . . . Q
"RTN","ECV3RPC",175,0)
 . . . Q
"RTN","ECV3RPC",176,0)
 . . Q
"RTN","ECV3RPC",177,0)
 . Q
"RTN","ECV3RPC",178,0)
 ;
"RTN","ECV3RPC",179,0)
 ;Generate error if event code screen not found
"RTN","ECV3RPC",180,0)
 I 'ECERRFLG,'ECSFOUND,ECDSSIEN D
"RTN","ECV3RPC",181,0)
 . ; Event Code screen not found
"RTN","ECV3RPC",182,0)
 . S ECERRMSG=$P($T(PROC3^ECV3RPC),";;",2)
"RTN","ECV3RPC",183,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",184,0)
 . D ERROR
"RTN","ECV3RPC",185,0)
 . Q
"RTN","ECV3RPC",186,0)
 ;
"RTN","ECV3RPC",187,0)
 I 'ECERRFLG,'ECFILDUP D
"RTN","ECV3RPC",188,0)
 .;Check for duplicate uploaded record base on Loc_DSS Unit_Category_Proc
"RTN","ECV3RPC",189,0)
 .;Date_Procedure
"RTN","ECV3RPC",190,0)
 . N ECDUP,ECNAM,ECPNAM,ECI,ECX,Y,ECPRV,ECPROV
"RTN","ECV3RPC",191,0)
 . S (ECDA,ECDUP)=0
"RTN","ECV3RPC",192,0)
 . F  S ECDA=$O(^ECH("ADT",ECSTAV,ECSSNIEN,+ECDSSIEN,ECDT,ECDA)) Q:'ECDA  D  I ECDUP Q  ;131 Make sure DSS IEN has a value
"RTN","ECV3RPC",193,0)
 . . S ECX=$G(^ECH(ECDA,0)) I ECX="" Q
"RTN","ECV3RPC",194,0)
 . . I $P(ECX,U,8)'=ECCATIEN Q
"RTN","ECV3RPC",195,0)
 . . I $P(ECX,U,9)'=ECPROCV Q
"RTN","ECV3RPC",196,0)
 . . S ECPNAM="",ECDUP=1
"RTN","ECV3RPC",197,0)
 . . K ECPRV S ECPROV=$$GETPRV^ECPRVMUT(ECDA,.ECPRV)
"RTN","ECV3RPC",198,0)
 . . F ECI=1:1:3 S Y=$O(ECPRV("")) I Y'="" D
"RTN","ECV3RPC",199,0)
 . . . S ECNAM=$P(ECPRV(Y),U,2) K ECPRV(Y)
"RTN","ECV3RPC",200,0)
 . . . S ECPNAM=ECPNAM_" "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",201,0)
 . . S ECERRMSG="**DUPLICATE** "
"RTN","ECV3RPC",202,0)
 . . S ECERRMSG=ECERRMSG_" Clinic: "_$$GET1^DIQ(44,$P(ECX,U,19),.01,"I")
"RTN","ECV3RPC",203,0)
 . . S ECERRMSG=ECERRMSG_" Order Sect: "_$$GET1^DIQ(723,$P(ECX,U,12),.01,"I")
"RTN","ECV3RPC",204,0)
 . . S ECERRMSG=ECERRMSG_" Provider: "_ECPNAM
"RTN","ECV3RPC",205,0)
 . . S ECNAM=$$GET1^DIQ(200,$P(ECX,U,13),.01,"I")
"RTN","ECV3RPC",206,0)
 . . S ECERRMSG=ECERRMSG_" Entered: "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",207,0)
 . . S ECCOLERR=ECSTAPC    ;(???)
"RTN","ECV3RPC",208,0)
 . . D ERROR
"RTN","ECV3RPC",209,0)
 Q
"RTN","ECV3RPC",210,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV3RPC",211,0)
 ;1. record number
"RTN","ECV3RPC",212,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV3RPC",213,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV3RPC",214,0)
 ;4. error message
"RTN","ECV3RPC",215,0)
 ;
"RTN","ECV3RPC",216,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV3RPC",217,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV3RPC",218,0)
 S ECERRFLG=1
"RTN","ECV3RPC",219,0)
 Q
"RTN","ECV3RPC",220,0)
 ;
"RTN","ECV3RPC",221,0)
DSS1 ;;Invalid DSS Unit IEN
"RTN","ECV3RPC",222,0)
DSS2 ;;Invalid DSS Unit Number
"RTN","ECV3RPC",223,0)
DSS3 ;;Invalid DSS Unit Name
"RTN","ECV3RPC",224,0)
DSS4 ;;DSS Unit required. Must enter DSS Unit Name, DSS Unit Number, or DSS IEN
"RTN","ECV3RPC",225,0)
ORDSEC1 ;;Ordering Section "B" x-ref not on Med Specialty file(#723)
"RTN","ECV3RPC",226,0)
ORDSEC2 ;;Unable to derive Ordering Section from DSS Unit
"RTN","ECV3RPC",227,0)
PROC1 ;;Procedure/CPT invalid
"RTN","ECV3RPC",228,0)
PROC2 ;;Procedure/CPT invalid for this Station and DSS Unit
"RTN","ECV3RPC",229,0)
PROC3 ;;Event Code screen not found
"RTN","ECV3RPC",230,0)
CAT1 ;;Category "B" x-ref not on EC Category file(#726)
"RTN","ECV3RPC",231,0)
MOD1 ;;Modifier is invalid or duplicated for the selected procedure
"RTN","ECV3RPC",232,0)
MOD2 ;;Modifiers cannot be used with this procedure - no CPT identified
"RTN","ECV4RPC")
0^21^B76379941^B61727818
"RTN","ECV4RPC",1,0)
ECV4RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;5/3/16  15:15
"RTN","ECV4RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,33,49,131**;8 May 96;Build 13
"RTN","ECV4RPC",3,0)
 ;
"RTN","ECV4RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV4RPC",6,0)
 ;    1. VOLUME
"RTN","ECV4RPC",7,0)
 ;    2. ENCOUNTER DATE/TIME
"RTN","ECV4RPC",8,0)
 ;    3. PROVIDER NAME
"RTN","ECV4RPC",9,0)
 ;
"RTN","ECV4RPC",10,0)
 ;  Determines the following:
"RTN","ECV4RPC",11,0)
 ;    1. PATIENT STATUS
"RTN","ECV4RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",13,0)
 ;
"RTN","ECV4RPC",14,0)
 ;--Volume must be 1 thru 99--
"RTN","ECV4RPC",15,0)
 N ECVOLVN,ECPDT
"RTN","ECV4RPC",16,0)
 S ECVOLVN=ECVOLV
"RTN","ECV4RPC",17,0)
 I (+ECVOLVN'=ECVOLVN)!(ECVOLVN<1)!(ECVOLVN>99)!(ECVOLVN?.E1"."1N.N) D
"RTN","ECV4RPC",18,0)
 . S ECERRMSG=$P($T(VOL1^ECV4RPC),";;",2)
"RTN","ECV4RPC",19,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",20,0)
 . D ERROR
"RTN","ECV4RPC",21,0)
 . Q
"RTN","ECV4RPC",22,0)
 I $L(ECVOLVN)'=$L(ECVOLV) D
"RTN","ECV4RPC",23,0)
 . ; Volume must be numeric
"RTN","ECV4RPC",24,0)
 . S ECERRMSG=$P($T(VOL2^ECV4RPC),";;",2)
"RTN","ECV4RPC",25,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",26,0)
 . D ERROR
"RTN","ECV4RPC",27,0)
 . Q
"RTN","ECV4RPC",28,0)
 ;
"RTN","ECV4RPC",29,0)
 ;--Encounter Date/Time--
"RTN","ECV4RPC",30,0)
 S ECERRFLG=0
"RTN","ECV4RPC",31,0)
 N ECRETVAL
"RTN","ECV4RPC",32,0)
 S %DT(0)="-NOW",ECENCV=$TR(ECENCV," ","")
"RTN","ECV4RPC",33,0)
 D CHK^DIE(721,2,"E",ECENCV,.ECRETVAL)
"RTN","ECV4RPC",34,0)
 I $G(ECRETVAL)="^" D
"RTN","ECV4RPC",35,0)
 . ; Invalid encounter date/time
"RTN","ECV4RPC",36,0)
 . S ECERRMSG=$P($T(ENC1^ECV4RPC),";;",2)
"RTN","ECV4RPC",37,0)
 . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",38,0)
 . D ERROR
"RTN","ECV4RPC",39,0)
 . Q
"RTN","ECV4RPC",40,0)
 I $G(ECRETVAL)'="^" D
"RTN","ECV4RPC",41,0)
 . S %DT="XST",X=ECENCV
"RTN","ECV4RPC",42,0)
 . D ^%DT
"RTN","ECV4RPC",43,0)
 . S ECENCV=+Y
"RTN","ECV4RPC",44,0)
 . Q
"RTN","ECV4RPC",45,0)
 ;
"RTN","ECV4RPC",46,0)
 ;--Provider Name or IEN must be on the New Person file--
"RTN","ECV4RPC",47,0)
 ;--and provider must have active person class  --
"RTN","ECV4RPC",48,0)
 N ECPROV1,ECPROVV,NUM,PRVARR ;131
"RTN","ECV4RPC",49,0)
 ;131 Entire section modified to add checking for up to 7 providers
"RTN","ECV4RPC",50,0)
 F NUM=1:1:7 S ECPROVV=@("ECPRV"_NUM_"V") I ECPROVV'="" D  I '$G(ECERRFLG) S @("ECPRV"_NUM_"V")=$G(ECPRVIEN)  ;If no error, set provider value to IEN
"RTN","ECV4RPC",51,0)
 .S ECERRFLG=0,ECPRVIEN=0
"RTN","ECV4RPC",52,0)
 .; Remove punctuation if necessary
"RTN","ECV4RPC",53,0)
 .I ECPROVV?.E1P S ECPROVV=$E(ECPROVV,1,$L(ECPROVV)-1)
"RTN","ECV4RPC",54,0)
 .; If provider ien passed in, find on file
"RTN","ECV4RPC",55,0)
 .S ECPROV1=ECPROVV
"RTN","ECV4RPC",56,0)
 .I +ECPROVV>0 D
"RTN","ECV4RPC",57,0)
 . . I '$D(^VA(200,ECPROVV)) D
"RTN","ECV4RPC",58,0)
 . . . ; Provider ien not found on New Person file
"RTN","ECV4RPC",59,0)
 . . . S ECERRMSG=$P($T(PROV4^ECV4RPC),";;",2)
"RTN","ECV4RPC",60,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",61,0)
 . . . D ERROR
"RTN","ECV4RPC",62,0)
 . . E  S ECPRVIEN=ECPROVV
"RTN","ECV4RPC",63,0)
 .;
"RTN","ECV4RPC",64,0)
 .; If provider name passed in, find on B x-ref and
"RTN","ECV4RPC",65,0)
 .; make sure there isn't more than 1 with same name
"RTN","ECV4RPC",66,0)
 .N ECPRVNXT,ECPRVMOR,ECPRVMNT
"RTN","ECV4RPC",67,0)
 .S (ECPRVMOR,ECPRVMNT)=0,ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",68,0)
 .I +ECPROVV'>0,$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",69,0)
 . . S ECPRVIE2=$O(^VA(200,"B",ECPROVV,""))
"RTN","ECV4RPC",70,0)
 . . S ECPRVNXT=$O(^VA(200,"B",ECPROVV,ECPRVIE2))
"RTN","ECV4RPC",71,0)
 . . I ECPRVNXT'="" D
"RTN","ECV4RPC",72,0)
 . . . S ECERRMSG=$P($T(PROV5^ECV4RPC),";;",2)
"RTN","ECV4RPC",73,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",74,0)
 . . . D ERROR
"RTN","ECV4RPC",75,0)
 . . . S ECPRVMOR=1
"RTN","ECV4RPC",76,0)
 . . E  S ECPRVIEN=ECPRVIE2
"RTN","ECV4RPC",77,0)
 .;
"RTN","ECV4RPC",78,0)
 .I +ECPROVV'>0,'$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",79,0)
 . . ; Exact match not found on New Person file
"RTN","ECV4RPC",80,0)
 . . ; Generate standard error message
"RTN","ECV4RPC",81,0)
 . . S ECERRMSG=$P($T(PROV1^ECV4RPC),";;",2)
"RTN","ECV4RPC",82,0)
 . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",83,0)
 . . D ERROR
"RTN","ECV4RPC",84,0)
 . . S ECPRVMNT=1
"RTN","ECV4RPC",85,0)
 .; If exact match not found, get provider info
"RTN","ECV4RPC",86,0)
 .I ECPRVMNT D
"RTN","ECV4RPC",87,0)
 . . ; look at next provider on file for 'close' match
"RTN","ECV4RPC",88,0)
 . . N ECINFO,ECLENPRV,NOMATCH,ECSPEC,ECSUBSP
"RTN","ECV4RPC",89,0)
 . . N ECCOUNT,ECFIRST,ECLAST,ECPRVNXT,ECPRVIE2,ECPRVIE3
"RTN","ECV4RPC",90,0)
 . . S ECLENPRV=$L(ECPROVV),(ECPRVIE2,ECPRVIE3)="",(ECCOUNT,NOMATCH)=0
"RTN","ECV4RPC",91,0)
 . . S ECPRVNXT=ECPROVV
"RTN","ECV4RPC",92,0)
 . . F  S ECPRVNXT=$O(^VA(200,"B",ECPRVNXT)) Q:NOMATCH=1!(ECPRVNXT="")  D  ;131 Added check for null
"RTN","ECV4RPC",93,0)
 . . . F  S ECPRVIE3=$O(^VA(200,"B",ECPRVNXT,ECPRVIE3)) Q:ECPRVIE3=""  D
"RTN","ECV4RPC",94,0)
 . . . . I ECPROVV'=$E(ECPRVNXT,1,ECLENPRV) S NOMATCH=1
"RTN","ECV4RPC",95,0)
 . . . . E  D
"RTN","ECV4RPC",96,0)
 . . . . . ;get provider info and add to end of error string
"RTN","ECV4RPC",97,0)
 . . . . . S ECINFO=$$GET^XUA4A72(ECPRVIE3,ECENCV)
"RTN","ECV4RPC",98,0)
 . . . . . I +ECINFO'>0 D
"RTN","ECV4RPC",99,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-Inactive Provider for this encounter date"
"RTN","ECV4RPC",100,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",101,0)
 . . . . . . ;S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",102,0)
 . . . . . I +ECINFO>0 D
"RTN","ECV4RPC",103,0)
 . . . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",104,0)
 . . . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",105,0)
 . . . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",106,0)
 . . . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",107,0)
 . . . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",108,0)
 . . . . . . S ECPCLASS=$P(^VA(200,ECPRVIE3,"USC1",0),U,3)
"RTN","ECV4RPC",109,0)
 . . . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",110,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",111,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",112,0)
 .; If more than one provider with that name, get info
"RTN","ECV4RPC",113,0)
 .I ECPRVMOR D
"RTN","ECV4RPC",114,0)
 . . N ECINFO,ECSPEC,ECSUBSP,ECPCLASS,ECCOUNT,ECFIRST,ECLAST,ECPRVIE2
"RTN","ECV4RPC",115,0)
 . . S ECCOUNT=0,ECPRVIE2=0
"RTN","ECV4RPC",116,0)
 . . ;look at each provider for exact match
"RTN","ECV4RPC",117,0)
 . . F  S ECPRVIE2=$O(^VA(200,"B",ECPROVV,ECPRVIE2)) Q:ECPRVIE2=""  D
"RTN","ECV4RPC",118,0)
 . . . S ECINFO=$$GET^XUA4A72(ECPRVIE2,ECENCV)
"RTN","ECV4RPC",119,0)
 . . . I +ECINFO'>0 D
"RTN","ECV4RPC",120,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-Inactive Provider for this encounter date"
"RTN","ECV4RPC",121,0)
 . . . . D ERROR
"RTN","ECV4RPC",122,0)
 . . . I +ECINFO>0 D
"RTN","ECV4RPC",123,0)
 . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",124,0)
 . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",125,0)
 . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",126,0)
 . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",127,0)
 . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",128,0)
 . . . . S ECPCLASS=$P(^VA(200,ECPRVIE2,"USC1",0),U,3)
"RTN","ECV4RPC",129,0)
 . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",130,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",131,0)
 . . . . D ERROR
"RTN","ECV4RPC",132,0)
 .;
"RTN","ECV4RPC",133,0)
 .; Check person class of valid provider
"RTN","ECV4RPC",134,0)
 .S ECPROVV=ECPROV1
"RTN","ECV4RPC",135,0)
 .S %DT="XST",X=ECENCV D ^%DT S ECPDT=$S(+Y>0:+Y,1:DT)
"RTN","ECV4RPC",136,0)
 .I 'ECERRFLG D
"RTN","ECV4RPC",137,0)
 . . I ECPRVIEN=0 S ECPRVIEN=$O(^VA(200,"B",ECPROVV,0))
"RTN","ECV4RPC",138,0)
 . . I '$D(^VA(200,ECPRVIEN,"USC1",0)) D 
"RTN","ECV4RPC",139,0)
 . . . ; Person class xref doesn't exist
"RTN","ECV4RPC",140,0)
 . . . S ECERRMSG=$P($T(PROV2^ECV4RPC),";;",2)
"RTN","ECV4RPC",141,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",142,0)
 . . . D ERROR
"RTN","ECV4RPC",143,0)
 . . . Q
"RTN","ECV4RPC",144,0)
 . . Q
"RTN","ECV4RPC",145,0)
 .;
"RTN","ECV4RPC",146,0)
 .I 'ECERRFLG D  ;131 Section added to check for duplicate providers
"RTN","ECV4RPC",147,0)
 ..I $D(PRVARR(ECPRVIEN)) D
"RTN","ECV4RPC",148,0)
 ...S ECERRMSG=$P($T(PROV6^ECV4RPC),";;",2)
"RTN","ECV4RPC",149,0)
 ...S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",150,0)
 ...D ERROR
"RTN","ECV4RPC",151,0)
 ..S PRVARR(ECPRVIEN)=""
"RTN","ECV4RPC",152,0)
 ..Q
"RTN","ECV4RPC",153,0)
 .;
"RTN","ECV4RPC",154,0)
 .I 'ECERRFLG D
"RTN","ECV4RPC",155,0)
 . . S ECPCLASS=$P(^VA(200,ECPRVIEN,"USC1",0),U,3)
"RTN","ECV4RPC",156,0)
 . . I ECPCLASS="" D
"RTN","ECV4RPC",157,0)
 . . . ; Person class field empty
"RTN","ECV4RPC",158,0)
 . . . S ECERRMSG=$P($T(PROV2^ECV4RPC),";;",2)
"RTN","ECV4RPC",159,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",160,0)
 . . . D ERROR
"RTN","ECV4RPC",161,0)
 . . . Q
"RTN","ECV4RPC",162,0)
 . . Q
"RTN","ECV4RPC",163,0)
 .;
"RTN","ECV4RPC",164,0)
 .I 'ECERRFLG,'$D(^VA(200,ECPRVIEN,"USC1",ECPCLASS,0)) D
"RTN","ECV4RPC",165,0)
 . . ; Person class information missing
"RTN","ECV4RPC",166,0)
 . . S ECERRMSG=$P($T(PROV2^ECV4RPC),";;",2)
"RTN","ECV4RPC",167,0)
 . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",168,0)
 . . D ERROR
"RTN","ECV4RPC",169,0)
 . . Q
"RTN","ECV4RPC",170,0)
 .;
"RTN","ECV4RPC",171,0)
 .; Check for person class expiration date
"RTN","ECV4RPC",172,0)
 .I 'ECERRFLG,$$GET^XUA4A72(ECPRVIEN,ECPDT)<1 D
"RTN","ECV4RPC",173,0)
 . . ; Person class contains an expiration date
"RTN","ECV4RPC",174,0)
 . . S ECERRMSG=$P($T(PROV3^ECV4RPC),";;",2)
"RTN","ECV4RPC",175,0)
 . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",176,0)
 . . D ERROR
"RTN","ECV4RPC",177,0)
 . . Q
"RTN","ECV4RPC",178,0)
 .;
"RTN","ECV4RPC",179,0)
 .I 'ECERRFLG D
"RTN","ECV4RPC",180,0)
 . . S ECPRVTYP=$P(^VA(200,ECPRVIEN,"USC1",ECPCLASS,0),U,1)
"RTN","ECV4RPC",181,0)
 . . I $P(^USC(8932.1,ECPRVTYP,0),U,4)'="a" D
"RTN","ECV4RPC",182,0)
 . . . ; Person class is not active
"RTN","ECV4RPC",183,0)
 . . . S ECERRMSG=$P($T(PROV3^ECV4RPC),";;",2)
"RTN","ECV4RPC",184,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",185,0)
 . . . D ERROR
"RTN","ECV4RPC",186,0)
 . . . Q
"RTN","ECV4RPC",187,0)
 . . Q
"RTN","ECV4RPC",188,0)
 . Q
"RTN","ECV4RPC",189,0)
 ;
"RTN","ECV4RPC",190,0)
 ;--Determine Patient Status--
"RTN","ECV4RPC",191,0)
 S ECPSTAT=""
"RTN","ECV4RPC",192,0)
 I ECSSNIEN D
"RTN","ECV4RPC",193,0)
 . S ECERRFLG=0
"RTN","ECV4RPC",194,0)
 . S ECPSTAT=$$INOUTPT^ECUTL0(ECSSNIEN,+ECENCV)
"RTN","ECV4RPC",195,0)
 . I ECPSTAT="" D
"RTN","ECV4RPC",196,0)
 . . ; Unable to determine patient status
"RTN","ECV4RPC",197,0)
 . . S ECERRMSG=$P($T(STAT1^ECV4RPC),";;",2)
"RTN","ECV4RPC",198,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",199,0)
 . . D ERROR
"RTN","ECV4RPC",200,0)
 . . Q
"RTN","ECV4RPC",201,0)
 . I ECPSTAT="I",'ECPSTATV,'ECERRFLG D
"RTN","ECV4RPC",202,0)
 . . ; Patient status is Inpatient and override flag is false
"RTN","ECV4RPC",203,0)
 . . S ECERRMSG=$P($T(STAT2^ECV4RPC),";;",2)
"RTN","ECV4RPC",204,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",205,0)
 . . D ERROR
"RTN","ECV4RPC",206,0)
 . . Q
"RTN","ECV4RPC",207,0)
 ;
"RTN","ECV4RPC",208,0)
 ;--Check to see if the DSS Unit is 'send to PCE'--
"RTN","ECV4RPC",209,0)
 S ECDXIEN="",ECCLNIEN=""
"RTN","ECV4RPC",210,0)
 I ECPSTAT'="",ECDSSIEN'="" D
"RTN","ECV4RPC",211,0)
 . N ECDSSDAT,ECDSSPCE
"RTN","ECV4RPC",212,0)
 . S ECDSSDAT=$G(^ECD(ECDSSIEN,0))
"RTN","ECV4RPC",213,0)
 . S ECDSSPCE=$P(ECDSSDAT,U,14)
"RTN","ECV4RPC",214,0)
 . ; If Outpatient and send=O, or send=A
"RTN","ECV4RPC",215,0)
 . I ((ECPSTAT="O")&(ECDSSPCE["O"))!(ECDSSPCE["A") D
"RTN","ECV4RPC",216,0)
 . . ;Validate Diagnosis code and Associated Clinic
"RTN","ECV4RPC",217,0)
 . . D VALDIAG^ECV5RPC
"RTN","ECV4RPC",218,0)
 . . D VALCLIN^ECV5RPC
"RTN","ECV4RPC",219,0)
 . Q
"RTN","ECV4RPC",220,0)
 ;
"RTN","ECV4RPC",221,0)
 ;--Check to see if DUZ is defined
"RTN","ECV4RPC",222,0)
 S ECDUZ=$S($D(DUZ):DUZ,1:"")
"RTN","ECV4RPC",223,0)
 I ECDUZ="" D
"RTN","ECV4RPC",224,0)
 . ; Invalid DUZ
"RTN","ECV4RPC",225,0)
 . S ECERRMSG=$P($T(DUZ^ECV4RPC),";;",2),ECCOLERR=0
"RTN","ECV4RPC",226,0)
 . D ERROR
"RTN","ECV4RPC",227,0)
 Q
"RTN","ECV4RPC",228,0)
 ;;
"RTN","ECV4RPC",229,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV4RPC",230,0)
 ;1. record number
"RTN","ECV4RPC",231,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV4RPC",232,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV4RPC",233,0)
 ;4. error message
"RTN","ECV4RPC",234,0)
 ;
"RTN","ECV4RPC",235,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV4RPC",236,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV4RPC",237,0)
 S ECERRFLG=1
"RTN","ECV4RPC",238,0)
 Q
"RTN","ECV4RPC",239,0)
 ;
"RTN","ECV4RPC",240,0)
 ;Error messages:
"RTN","ECV4RPC",241,0)
 ;
"RTN","ECV4RPC",242,0)
VOL1 ;;Volume must be a whole number from 1 to 99
"RTN","ECV4RPC",243,0)
VOL2 ;;Volume must contain numeric characters only
"RTN","ECV4RPC",244,0)
PROV1 ;;Provider has no B x-ref on New Person file(#200)
"RTN","ECV4RPC",245,0)
PROV2 ;;Unable to determine person class
"RTN","ECV4RPC",246,0)
PROV3 ;;Provider does not have an active person class
"RTN","ECV4RPC",247,0)
PROV4 ;;Provider IEN not found on New Person file(#200)
"RTN","ECV4RPC",248,0)
PROV5 ;;More than one provider  with this name - use IEN
"RTN","ECV4RPC",249,0)
PROV6 ;;Duplicate provider identified - providers must be unique
"RTN","ECV4RPC",250,0)
ENC1 ;;Invalid encounter date/time.  Date cannot be in the future.
"RTN","ECV4RPC",251,0)
STAT1 ;;Unable to determine patient status
"RTN","ECV4RPC",252,0)
STAT2 ;;The patient status is Inpatient
"RTN","ECV4RPC",253,0)
DUZ ;;User DUZ not defined
"RTN","ECV5RPC")
0^22^B19014079^B14145200
"RTN","ECV5RPC",1,0)
ECV5RPC ;ALB/ACS - Event Capture Spreadsheet Data Validation ;2/9/16  15:10
"RTN","ECV5RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,36,47,114,131**;8 May 96;Build 13
"RTN","ECV5RPC",3,0)
 ;
"RTN","ECV5RPC",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECV5RPC",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR #5747
"RTN","ECV5RPC",6,0)
 ;
"RTN","ECV5RPC",7,0)
 ;----------------------------------------------------------------------
"RTN","ECV5RPC",8,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields for
"RTN","ECV5RPC",9,0)
 ;  records sent to PCE:
"RTN","ECV5RPC",10,0)
 ;    1. DIAGNOSIS CODE
"RTN","ECV5RPC",11,0)
 ;    2. ASSOCIATED CLINIC
"RTN","ECV5RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV5RPC",13,0)
 ;======================================================================
"RTN","ECV5RPC",14,0)
 ;MODIFICATIONS
"RTN","ECV5RPC",15,0)
 ;08/2001    EC*2.0*30   Updated the Diagnosis validation logic
"RTN","ECV5RPC",16,0)
 ;08/2016    EC*2.0*131  Allow for Clinic IEN to be sent
"RTN","ECV5RPC",17,0)
 ;======================================================================
"RTN","ECV5RPC",18,0)
 ;
"RTN","ECV5RPC",19,0)
VALDIAG ;Validate Diagnosis Code.  Make sure it exists on the ICD9 file
"RTN","ECV5RPC",20,0)
 N ECDT,ECCS
"RTN","ECV5RPC",21,0)
 S %DT="XST",X=$G(ECENCV,"NOW") D ^%DT S ECDT=+Y
"RTN","ECV5RPC",22,0)
 I ECDXV="" D
"RTN","ECV5RPC",23,0)
 . ; Spreadsheet is missing diagnosis code
"RTN","ECV5RPC",24,0)
 . S ECERRMSG=$P($T(DIAG1^ECV5RPC),";;",2)
"RTN","ECV5RPC",25,0)
 . S ECCOLERR=ECDXPC
"RTN","ECV5RPC",26,0)
 . D ERROR
"RTN","ECV5RPC",27,0)
 ;if diag invalid, send error message
"RTN","ECV5RPC",28,0)
 I ECDXV'="" S (ECDXIEN,ECSFOUND)=0 D
"RTN","ECV5RPC",29,0)
 . ; Updates for ICD10
"RTN","ECV5RPC",30,0)
 . S ECCS=$$SINFO^ICDEX("DIAG",ECDT) ; Supported by ICR 5747
"RTN","ECV5RPC",31,0)
 . S ECDXIEN=$$ICDDX^ICDEX(ECDXV,ECDT,+ECCS,"E") ; Supported by ICR 5747
"RTN","ECV5RPC",32,0)
 . I +ECDXIEN>0,$P(ECDXIEN,"^",10) S ECDXIEN=+ECDXIEN,ECSFOUND=1 Q
"RTN","ECV5RPC",33,0)
 . I 'ECSFOUND D
"RTN","ECV5RPC",34,0)
 . . ; Invalid Diagnosis code
"RTN","ECV5RPC",35,0)
 . . S ECERRMSG=$P($T(DIAG2^ECV5RPC),";;",2)
"RTN","ECV5RPC",36,0)
 . . S ECCOLERR=ECDXPC
"RTN","ECV5RPC",37,0)
 . . D ERROR
"RTN","ECV5RPC",38,0)
 . . Q
"RTN","ECV5RPC",39,0)
 . Q
"RTN","ECV5RPC",40,0)
 Q
"RTN","ECV5RPC",41,0)
 ;
"RTN","ECV5RPC",42,0)
VALCLIN ;Validate Associated Clinic.  Make sure the clinic is active for
"RTN","ECV5RPC",43,0)
 ;the date of the encounter
"RTN","ECV5RPC",44,0)
 S ECERRFLG=0
"RTN","ECV5RPC",45,0)
 I ECCLNNV=""&(ECCLNIV="") D  ;131
"RTN","ECV5RPC",46,0)
 . ; Spreadsheet is missing the associated clinic name and IEN, need one of them
"RTN","ECV5RPC",47,0)
 . S ECERRMSG=$P($T(CLIN1^ECV5RPC),";;",2)
"RTN","ECV5RPC",48,0)
 . S ECCOLERR=ECCLNNPC
"RTN","ECV5RPC",49,0)
 . D ERROR
"RTN","ECV5RPC",50,0)
 . Q
"RTN","ECV5RPC",51,0)
 I 'ECERRFLG,ECCLNIV'=+ECCLNIV,ECCLNIV'="" D  ;131 Make sure IEN is pure numeric
"RTN","ECV5RPC",52,0)
 .S ECERRMSG=$P($T(CLIN6^ECV5RPC),";;",2)
"RTN","ECV5RPC",53,0)
 .S ECCOLERR=ECCLNIPC
"RTN","ECV5RPC",54,0)
 .D ERROR
"RTN","ECV5RPC",55,0)
 .Q
"RTN","ECV5RPC",56,0)
 I 'ECERRFLG,ECCLNIV,'$D(^SC(+ECCLNIV,0)) D  ;131 Section added to check for IEN existence
"RTN","ECV5RPC",57,0)
 .S ECERRMSG=$P($T(CLIN3^ECV5RPC),";;",2)
"RTN","ECV5RPC",58,0)
 .S ECCOLERR=ECCLNIPC
"RTN","ECV5RPC",59,0)
 .D ERROR
"RTN","ECV5RPC",60,0)
 .Q
"RTN","ECV5RPC",61,0)
 I 'ECERRFLG,ECCLNIV S ECCLNIEN=ECCLNIV ;131 If no error and IEN exists then IEN is valid
"RTN","ECV5RPC",62,0)
 I 'ECERRFLG,'+ECCLNIV,'$D(^SC("B",ECCLNNV)) D  ;131
"RTN","ECV5RPC",63,0)
 . ; No B x-ref on file
"RTN","ECV5RPC",64,0)
 . S ECERRMSG=$P($T(CLIN2^ECV5RPC),";;",2)
"RTN","ECV5RPC",65,0)
 . S ECCOLERR=ECCLNNPC ;131
"RTN","ECV5RPC",66,0)
 . D ERROR
"RTN","ECV5RPC",67,0)
 . Q
"RTN","ECV5RPC",68,0)
 I 'ECERRFLG,'+ECCLNIV,$D(^SC("B",ECCLNNV)) D  ;131
"RTN","ECV5RPC",69,0)
 . ;get associated clinic ien
"RTN","ECV5RPC",70,0)
 . S ECCLNIEN=$O(^SC("B",ECCLNNV,0)) ;131
"RTN","ECV5RPC",71,0)
 . I '$D(^SC(ECCLNIEN,0)) D
"RTN","ECV5RPC",72,0)
 . . ; Associated clinic ien not on file
"RTN","ECV5RPC",73,0)
 . . S ECERRMSG=$P($T(CLIN3^ECV5RPC),";;",2)
"RTN","ECV5RPC",74,0)
 . . S ECCOLERR=ECCLNNPC ;131
"RTN","ECV5RPC",75,0)
 . . D ERROR
"RTN","ECV5RPC",76,0)
 . . Q
"RTN","ECV5RPC",77,0)
 .Q  ;131
"RTN","ECV5RPC",78,0)
 ;131 Removed one level of block structure from remaining code in this section so tests are done regardless of how clinic IEN was obtained.
"RTN","ECV5RPC",79,0)
 I 'ECERRFLG D
"RTN","ECV5RPC",80,0)
 . ;make sure it is of type 'clinic'
"RTN","ECV5RPC",81,0)
 . N CLINDATA
"RTN","ECV5RPC",82,0)
 . S CLINDATA=$G(^SC(ECCLNIEN,0))
"RTN","ECV5RPC",83,0)
 . I $P(CLINDATA,U,3)'="C" D
"RTN","ECV5RPC",84,0)
 . . S ECERRMSG=$P($T(CLIN4^ECV5RPC),";;",2)
"RTN","ECV5RPC",85,0)
 . . S ECCOLERR=ECCLNNPC ;131
"RTN","ECV5RPC",86,0)
 . . D ERROR
"RTN","ECV5RPC",87,0)
 . . Q
"RTN","ECV5RPC",88,0)
 . Q
"RTN","ECV5RPC",89,0)
 ;
"RTN","ECV5RPC",90,0)
 ;check for inactivate and reactivate dates
"RTN","ECV5RPC",91,0)
 I 'ECERRFLG,$D(^SC(ECCLNIEN,"I")) D
"RTN","ECV5RPC",92,0)
 . ;get inactivated and reactivated dates
"RTN","ECV5RPC",93,0)
 . N INACT,REACT
"RTN","ECV5RPC",94,0)
 . S INACT=$P(^SC(ECCLNIEN,"I"),U,1),REACT=$P(^SC(ECCLNIEN,"I"),U,2)
"RTN","ECV5RPC",95,0)
 . I INACT'="" D
"RTN","ECV5RPC",96,0)
 . . I REACT="",ECENCV'<INACT D CLINERR^ECV5RPC
"RTN","ECV5RPC",97,0)
 . . I REACT,ECENCV'<INACT,ECENCV<REACT D CLINERR^ECV5RPC
"RTN","ECV5RPC",98,0)
 . . Q
"RTN","ECV5RPC",99,0)
 . Q
"RTN","ECV5RPC",100,0)
 Q
"RTN","ECV5RPC",101,0)
 ;;
"RTN","ECV5RPC",102,0)
CLINERR ;Clinic inactive for this encounter date
"RTN","ECV5RPC",103,0)
 S ECERRMSG=$P($T(CLIN5^ECV5RPC),";;",2)
"RTN","ECV5RPC",104,0)
 S ECCOLERR=ECCLNNPC ;131
"RTN","ECV5RPC",105,0)
 D ERROR
"RTN","ECV5RPC",106,0)
 Q
"RTN","ECV5RPC",107,0)
 ;;
"RTN","ECV5RPC",108,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV5RPC",109,0)
 ;1. record number
"RTN","ECV5RPC",110,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV5RPC",111,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV5RPC",112,0)
 ;4. error message
"RTN","ECV5RPC",113,0)
 ;
"RTN","ECV5RPC",114,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV5RPC",115,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV5RPC",116,0)
 S ECERRFLG=1
"RTN","ECV5RPC",117,0)
 Q
"RTN","ECV5RPC",118,0)
 ;
"RTN","ECV5RPC",119,0)
 ;Error messages:
"RTN","ECV5RPC",120,0)
 ;
"RTN","ECV5RPC",121,0)
DIAG1 ;;Diagnosis code is required for this DSS Unit
"RTN","ECV5RPC",122,0)
DIAG2 ;;Invalid Diagnosis code
"RTN","ECV5RPC",123,0)
CLIN1 ;;Associated Clinic Name or IEN is required for this DSS Unit
"RTN","ECV5RPC",124,0)
CLIN2 ;;Assoc Clinic "B" x-ref not found on Hosp Location File(#44)
"RTN","ECV5RPC",125,0)
CLIN3 ;;Assoc Clinic not found on Hosp Location File(#44)
"RTN","ECV5RPC",126,0)
CLIN4 ;;Assoc Clinic must be of type "C" (clinic)
"RTN","ECV5RPC",127,0)
CLIN5 ;;Assoc Clinic inactive for this encounter date
"RTN","ECV5RPC",128,0)
CLIN6 ;;Assoc Clinic IEN must be numeric
"VER")
8.0^22.0
"^DD",724,724,10,0)
CATEGORY (Y/N)^RS^1:YES;0:NO;^0;11^Q
"^DD",724,724,10,.1)
Category (Y/N)
"^DD",724,724,10,1,0)
^.1^^0
"^DD",724,724,10,3)
Enter "YES" or "1" to allow categories to group procedures during data entry.
"^DD",724,724,10,21,0)
^^14^14^3160201^
"^DD",724,724,10,21,1,0)
This field tracks the use of categories during an Event
"^DD",724,724,10,21,2,0)
Capture data entry session.
"^DD",724,724,10,21,3,0)
 
"^DD",724,724,10,21,4,0)
If you would like to utilize categories to group procedures
"^DD",724,724,10,21,5,0)
during data entry, this field should be set to "YES" or "1".
"^DD",724,724,10,21,6,0)
When set to "NO", "0", or a null, categories will not be
"^DD",724,724,10,21,7,0)
used during data entry.
"^DD",724,724,10,21,8,0)
 
"^DD",724,724,10,21,9,0)
Until event code screens have been defined for the DSS unit,
"^DD",724,724,10,21,10,0)
the user may change the category setting.  Once event code
"^DD",724,724,10,21,11,0)
screens have been defined the user may only change the category
"^DD",724,724,10,21,12,0)
setting from yes to no to remove the use of categories.  Once
"^DD",724,724,10,21,13,0)
set to no, with event code screens defined, the user can no longer
"^DD",724,724,10,21,14,0)
change this field.
"^DD",724,724,10,23,0)
^^11^11^3160201^
"^DD",724,724,10,23,1,0)
Set of codes. "YES" or "1" allows use of categories
"^DD",724,724,10,23,2,0)
to group procedures during an Event Capture data
"^DD",724,724,10,23,3,0)
entry session. "NO", "0", or a null does not allow
"^DD",724,724,10,23,4,0)
the use of categories during data entry.
"^DD",724,724,10,23,5,0)
 
"^DD",724,724,10,23,6,0)
Until event code screens have been defined for the DSS unit,
"^DD",724,724,10,23,7,0)
the user may change the category setting.  Once event code
"^DD",724,724,10,23,8,0)
screens have been defined the user may only change the category
"^DD",724,724,10,23,9,0)
setting from yes to no to remove the use of categories.  Once
"^DD",724,724,10,23,10,0)
set to no, with event code screens defined, the user can no longer
"^DD",724,724,10,23,11,0)
change this field.
"^DD",724,724,10,"DT")
2970107
"^DD",724,724,13,0)
SEND TO PCE^S^A:Send All Records;N:Send No Records;^0;14^Q
"^DD",724,724,13,.1)
Send to PCE
"^DD",724,724,13,3)
Select the method to send your data, by DSS Unit, to PCE.
"^DD",724,724,13,21,0)
^.001^4^4^3151020^^
"^DD",724,724,13,21,1,0)
This field controls the method of sending data, by DSS Unit, to the
"^DD",724,724,13,21,2,0)
PCE software. If the field contains an A, all records, for this DSS Unit,
"^DD",724,724,13,21,3,0)
will be filed with PCE.  If the field contains an N or is null, no filing
"^DD",724,724,13,21,4,0)
will occur.
"^DD",724,724,13,23,0)
^.001^2^2^3151020^^^^
"^DD",724,724,13,23,1,0)
Set of codes that control sending data, by DSS Unit, to the PCE
"^DD",724,724,13,23,2,0)
software.
"^DD",724,724,13,"DT")
3150930
"BLD",9695,6)
^124
**END**
**END**

