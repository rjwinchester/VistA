Released EC*2*134 SEQ #128
Extracted from mail message
**KIDS**:EC*2.0*134^

**INSTALL NAME**
EC*2.0*134
"BLD",9785,0)
EC*2.0*134^EVENT CAPTURE^0^3170523^y
"BLD",9785,4,0)
^9.64PA^722^1
"BLD",9785,4,722,0)
722
"BLD",9785,4,722,222)
y^y^f^^^^n
"BLD",9785,4,"B",722,722)

"BLD",9785,6.3)
12
"BLD",9785,"INI")

"BLD",9785,"INIT")
POST^EC2P134
"BLD",9785,"KRN",0)
^9.67PA^779.2^20
"BLD",9785,"KRN",.4,0)
.4
"BLD",9785,"KRN",.401,0)
.401
"BLD",9785,"KRN",.402,0)
.402
"BLD",9785,"KRN",.403,0)
.403
"BLD",9785,"KRN",.5,0)
.5
"BLD",9785,"KRN",.84,0)
.84
"BLD",9785,"KRN",3.6,0)
3.6
"BLD",9785,"KRN",3.8,0)
3.8
"BLD",9785,"KRN",9.2,0)
9.2
"BLD",9785,"KRN",9.2,"NM",0)
^9.68A^9^9
"BLD",9785,"KRN",9.2,"NM",1,0)
ECSSDSSIEN^^0
"BLD",9785,"KRN",9.2,"NM",2,0)
ECSSDSSNAME^^0
"BLD",9785,"KRN",9.2,"NM",3,0)
ECSSDSSNUM^^0
"BLD",9785,"KRN",9.2,"NM",4,0)
ECPAT SUM^^0
"BLD",9785,"KRN",9.2,"NM",5,0)
ECRDSSA^^0
"BLD",9785,"KRN",9.2,"NM",6,0)
EC PROVIDER^^0
"BLD",9785,"KRN",9.2,"NM",7,0)
ECSSPROVLNAME^^0
"BLD",9785,"KRN",9.2,"NM",8,0)
EC DELETE TEST PATIENT DATA^^0
"BLD",9785,"KRN",9.2,"NM",9,0)
ECDISSUM^^0
"BLD",9785,"KRN",9.2,"NM","B","EC DELETE TEST PATIENT DATA",8)

"BLD",9785,"KRN",9.2,"NM","B","EC PROVIDER",6)

"BLD",9785,"KRN",9.2,"NM","B","ECDISSUM",9)

"BLD",9785,"KRN",9.2,"NM","B","ECPAT SUM",4)

"BLD",9785,"KRN",9.2,"NM","B","ECRDSSA",5)

"BLD",9785,"KRN",9.2,"NM","B","ECSSDSSIEN",1)

"BLD",9785,"KRN",9.2,"NM","B","ECSSDSSNAME",2)

"BLD",9785,"KRN",9.2,"NM","B","ECSSDSSNUM",3)

"BLD",9785,"KRN",9.2,"NM","B","ECSSPROVLNAME",7)

"BLD",9785,"KRN",9.8,0)
9.8
"BLD",9785,"KRN",9.8,"NM",0)
^9.68A^13^13
"BLD",9785,"KRN",9.8,"NM",1,0)
ECV3RPC^^0^B66640374
"BLD",9785,"KRN",9.8,"NM",2,0)
ECPAT^^0^B55958670
"BLD",9785,"KRN",9.8,"NM",3,0)
ECRDSSA^^0^B135329801
"BLD",9785,"KRN",9.8,"NM",4,0)
ECEFPAT^^0^B89607529
"BLD",9785,"KRN",9.8,"NM",5,0)
ECFLRPC^^0^B3855358
"BLD",9785,"KRN",9.8,"NM",6,0)
ECPRVDR^^0^B4628762
"BLD",9785,"KRN",9.8,"NM",7,0)
ECUMRPC1^^0^B107083588
"BLD",9785,"KRN",9.8,"NM",8,0)
ECUMRPC2^^0^B71004659
"BLD",9785,"KRN",9.8,"NM",9,0)
ECUERPC2^^0^B10728700
"BLD",9785,"KRN",9.8,"NM",10,0)
ECV4RPC^^0^B76866291
"BLD",9785,"KRN",9.8,"NM",11,0)
EC2P134^^0^B27323394
"BLD",9785,"KRN",9.8,"NM",12,0)
ECMFLPX^^0^B7063470
"BLD",9785,"KRN",9.8,"NM",13,0)
ECDTPD^^0^B12319465
"BLD",9785,"KRN",9.8,"NM","B","EC2P134",11)

"BLD",9785,"KRN",9.8,"NM","B","ECDTPD",13)

"BLD",9785,"KRN",9.8,"NM","B","ECEFPAT",4)

"BLD",9785,"KRN",9.8,"NM","B","ECFLRPC",5)

"BLD",9785,"KRN",9.8,"NM","B","ECMFLPX",12)

"BLD",9785,"KRN",9.8,"NM","B","ECPAT",2)

"BLD",9785,"KRN",9.8,"NM","B","ECPRVDR",6)

"BLD",9785,"KRN",9.8,"NM","B","ECRDSSA",3)

"BLD",9785,"KRN",9.8,"NM","B","ECUERPC2",9)

"BLD",9785,"KRN",9.8,"NM","B","ECUMRPC1",7)

"BLD",9785,"KRN",9.8,"NM","B","ECUMRPC2",8)

"BLD",9785,"KRN",9.8,"NM","B","ECV3RPC",1)

"BLD",9785,"KRN",9.8,"NM","B","ECV4RPC",10)

"BLD",9785,"KRN",19,0)
19
"BLD",9785,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",9785,"KRN",19,"NM",1,0)
EC GUI CONTEXT^^0
"BLD",9785,"KRN",19,"NM","B","EC GUI CONTEXT",1)

"BLD",9785,"KRN",19.1,0)
19.1
"BLD",9785,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9785,"KRN",101,0)
101
"BLD",9785,"KRN",409.61,0)
409.61
"BLD",9785,"KRN",771,0)
771
"BLD",9785,"KRN",779.2,0)
779.2
"BLD",9785,"KRN",870,0)
870
"BLD",9785,"KRN",8989.51,0)
8989.51
"BLD",9785,"KRN",8989.52,0)
8989.52
"BLD",9785,"KRN",8994,0)
8994
"BLD",9785,"KRN",8994,"NM",0)
^9.68A^3^3
"BLD",9785,"KRN",8994,"NM",1,0)
EC FILER^^0
"BLD",9785,"KRN",8994,"NM",2,0)
EC GET DEFAULT PROVIDER^^0
"BLD",9785,"KRN",8994,"NM",3,0)
EC DELETE TEST PATIENT DATA^^0
"BLD",9785,"KRN",8994,"NM","B","EC DELETE TEST PATIENT DATA",3)

"BLD",9785,"KRN",8994,"NM","B","EC FILER",1)

"BLD",9785,"KRN",8994,"NM","B","EC GET DEFAULT PROVIDER",2)

"BLD",9785,"KRN","B",.4,.4)

"BLD",9785,"KRN","B",.401,.401)

"BLD",9785,"KRN","B",.402,.402)

"BLD",9785,"KRN","B",.403,.403)

"BLD",9785,"KRN","B",.5,.5)

"BLD",9785,"KRN","B",.84,.84)

"BLD",9785,"KRN","B",3.6,3.6)

"BLD",9785,"KRN","B",3.8,3.8)

"BLD",9785,"KRN","B",9.2,9.2)

"BLD",9785,"KRN","B",9.8,9.8)

"BLD",9785,"KRN","B",19,19)

"BLD",9785,"KRN","B",19.1,19.1)

"BLD",9785,"KRN","B",101,101)

"BLD",9785,"KRN","B",409.61,409.61)

"BLD",9785,"KRN","B",771,771)

"BLD",9785,"KRN","B",779.2,779.2)

"BLD",9785,"KRN","B",870,870)

"BLD",9785,"KRN","B",8989.51,8989.51)

"BLD",9785,"KRN","B",8989.52,8989.52)

"BLD",9785,"KRN","B",8994,8994)

"BLD",9785,"PRE")
EC2P134
"BLD",9785,"QUES",0)
^9.62^^
"BLD",9785,"REQB",0)
^9.611^3^3
"BLD",9785,"REQB",1,0)
EC*2.0*101^1
"BLD",9785,"REQB",2,0)
EC*2.0*131^1
"BLD",9785,"REQB",3,0)
EC*2.0*87^1
"BLD",9785,"REQB","B","EC*2.0*101",1)

"BLD",9785,"REQB","B","EC*2.0*131",2)

"BLD",9785,"REQB","B","EC*2.0*87",3)

"FIA",722)
EVENT CAPTURE PROVIDER
"FIA",722,0)
^EC(722,
"FIA",722,0,0)
722PO
"FIA",722,0,1)
y^y^f^^^^n
"FIA",722,0,10)

"FIA",722,0,11)

"FIA",722,0,"RLRO")

"FIA",722,0,"VR")
2.0^EC
"FIA",722,722)
0
"INIT")
POST^EC2P134
"KRN",9.2,949,-1)
0^4
"KRN",9.2,949,0)
ECPAT SUM^Patient Summary - Event Capture^2950425.06451^
"KRN",9.2,949,1,0)
^9.21^17^17^3160923^^
"KRN",9.2,949,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,949,1,2,0)
 
"KRN",9.2,949,1,3,0)
This option allows you to print/display procedure-related data within a
"KRN",9.2,949,1,4,0)
specified date range for a selected patient.  The output includes:
"KRN",9.2,949,1,5,0)
 
"KRN",9.2,949,1,6,0)
 - Procedure date and time
"KRN",9.2,949,1,7,0)
 - Procedure
"KRN",9.2,949,1,8,0)
 - Volume
"KRN",9.2,949,1,9,0)
 - Modifier(s)
"KRN",9.2,949,1,10,0)
 - Location
"KRN",9.2,949,1,11,0)
 - DSS unit name and IEN
"KRN",9.2,949,1,12,0)
 - Associated Clinic, stop code, credit stop code, and CHAR4 code
"KRN",9.2,949,1,13,0)
 - Service
"KRN",9.2,949,1,14,0)
 - Section where performed
"KRN",9.2,949,1,15,0)
 - Procedure reason(s) (optional)
"KRN",9.2,949,1,16,0)
 - Ordering Section
"KRN",9.2,949,1,17,0)
 - Provider
"KRN",9.2,949,10.2)
W @IOF
"KRN",9.2,1494,-1)
0^2
"KRN",9.2,1494,0)
ECSSDSSNAME^DSS Unit Name^3010529.135115^
"KRN",9.2,1494,1,0)
^9.21^1^1^3160907^^^^
"KRN",9.2,1494,1,1,0)
The DSS Unit Name is not required if the DSS Unit IEN is filled in.
"KRN",9.2,1494,10.2)
W @IOF
"KRN",9.2,1495,-1)
0^3
"KRN",9.2,1495,0)
ECSSDSSNUM^DSS Unit Number^3010529.135312^
"KRN",9.2,1495,1,0)
^9.21^4^4^3160907^^^^
"KRN",9.2,1495,1,1,0)
The DSS Unit Number is no longer being used to identify the DSS 
"KRN",9.2,1495,1,2,0)
Unit as it isn't unique.  If you enter a value in this field, it will be 
"KRN",9.2,1495,1,3,0)
ignored.  Use the DSS Unit Name or the DSS Unit IEN to identify the DSS 
"KRN",9.2,1495,1,4,0)
Unit.
"KRN",9.2,1495,10.2)
W @IOF
"KRN",9.2,1496,-1)
0^1
"KRN",9.2,1496,0)
ECSSDSSIEN^DSS Unit IEN^3010529.135402^
"KRN",9.2,1496,1,0)
^9.21^1^1^3160907^^^^
"KRN",9.2,1496,1,1,0)
The DSS Unit IEN is not required if the DSS Unit Name is filled in.
"KRN",9.2,1496,10.2)
W @IOF
"KRN",9.2,1500,-1)
0^7
"KRN",9.2,1500,0)
ECSSPROVLNAME^Provider Name or IEN^3010529.135759^
"KRN",9.2,1500,1,0)
^^7^7^3161109^
"KRN",9.2,1500,1,1,0)
The provider's name (last name,first name) must have a "B" cross 
"KRN",9.2,1500,1,2,0)
reference and exist in the New Person file (#200).  The provider must 
"KRN",9.2,1500,1,3,0)
have an active Person Class unless the DSS unit is set to send no records 
"KRN",9.2,1500,1,4,0)
to PCE.  In that case, Non Licensed Providers, as identified by using the 
"KRN",9.2,1500,1,5,0)
"Providers" option on the management menu, may be selected.
"KRN",9.2,1500,1,6,0)
 
"KRN",9.2,1500,1,7,0)
The provider's IEN may be entered instead of the name.
"KRN",9.2,1500,10.2)
W @IOF
"KRN",9.2,1551,-1)
0^5
"KRN",9.2,1551,0)
ECRDSSA^DSS Unit Activity Report^3071023.124544^
"KRN",9.2,1551,1,0)
^^20^20^3160923^
"KRN",9.2,1551,1,1,0)
This option allows the user to print/display all patients for the
"KRN",9.2,1551,1,2,0)
specified location(s) and DSS Unit(s) within a selected date range. The
"KRN",9.2,1551,1,3,0)
patients may be sorted by Patient Name, SSN, or Provider Name. The output
"KRN",9.2,1551,1,4,0)
includes:
"KRN",9.2,1551,1,5,0)
 
"KRN",9.2,1551,1,6,0)
 - Patient Name
"KRN",9.2,1551,1,7,0)
 - Last four digits of Patient SSN
"KRN",9.2,1551,1,8,0)
 - Inpatient/Outpatient Indicator
"KRN",9.2,1551,1,9,0)
 - Procedure Date and Time
"KRN",9.2,1551,1,10,0)
 - Procedure Code
"KRN",9.2,1551,1,11,0)
 - Procedure Name
"KRN",9.2,1551,1,12,0)
 - Volume
"KRN",9.2,1551,1,13,0)
 - Primary Diagnosis
"KRN",9.2,1551,1,14,0)
 - Associated Clinic, stop code, credit stop code, and CHAR4 code
"KRN",9.2,1551,1,15,0)
 - Primary Provider
"KRN",9.2,1551,1,16,0)
 - Synonym
"KRN",9.2,1551,1,17,0)
 
"KRN",9.2,1551,1,18,0)
If more than one location has been set up, you will be prompted to 
"KRN",9.2,1551,1,19,0)
select all or specific locations. You will also be prompted to select all
"KRN",9.2,1551,1,20,0)
or specific DSS Units.
"KRN",9.2,1551,10.2)
W @IOF
"KRN",9.2,1565,-1)
0^9
"KRN",9.2,1565,0)
ECDISSUM^Disabled Category & Procedure Summary Report^3151124.143316^
"KRN",9.2,1565,1,0)
^^33^33^3170405^
"KRN",9.2,1565,1,1,0)
** You must have locations, DSS Units, local categories, and procedures 
"KRN",9.2,1565,1,2,0)
defined before using this option. ** 
"KRN",9.2,1565,1,3,0)
 
"KRN",9.2,1565,1,4,0)
** This report can be printed or exported as a reference guide for data 
"KRN",9.2,1565,1,5,0)
entry personnel at your facility. **
"KRN",9.2,1565,1,6,0)
 
"KRN",9.2,1565,1,7,0)
This option allows you to print/display ECS categories that have been 
"KRN",9.2,1565,1,8,0)
disabled for one or all DSS Units within a specified location.  If your 
"KRN",9.2,1565,1,9,0)
DSS Units have categories enabled and have Event Code Screens defined to 
"KRN",9.2,1565,1,10,0)
those categories, this report displays the EC screens that now have 
"KRN",9.2,1565,1,11,0)
disabled categories.
"KRN",9.2,1565,1,12,0)
  
"KRN",9.2,1565,1,13,0)
All procedures print for each disabled category.  
"KRN",9.2,1565,1,14,0)
 
"KRN",9.2,1565,1,15,0)
The print and preview report output includes the headers:
"KRN",9.2,1565,1,16,0)
 
"KRN",9.2,1565,1,17,0)
 - Run Date 
"KRN",9.2,1565,1,18,0)
 - Location 
"KRN",9.2,1565,1,19,0)
 - Service 
"KRN",9.2,1565,1,20,0)
 - DSS Unit
"KRN",9.2,1565,1,21,0)
 - DSS Unit IEN
"KRN",9.2,1565,1,22,0)
 - Send Status  
"KRN",9.2,1565,1,23,0)
 - DSS Dept 
"KRN",9.2,1565,1,24,0)
 - Procedure Code
"KRN",9.2,1565,1,25,0)
 - Procedure Name
"KRN",9.2,1565,1,26,0)
 - Synonym
"KRN",9.2,1565,1,27,0)
 - Clinic IEN/Clinic Name/Stop Code/Credit Stop Code/CHAR4 code
"KRN",9.2,1565,1,28,0)
 
"KRN",9.2,1565,1,29,0)
The report also includes, within the text of the report, the disabled 
"KRN",9.2,1565,1,30,0)
category name, the DSS Unit status, and the Event Code Screen status.
"KRN",9.2,1565,1,31,0)
 
"KRN",9.2,1565,1,32,0)
The Excel export report output fields are the same as above along 
"KRN",9.2,1565,1,33,0)
with the CPT code. The exported report does not include the run date.
"KRN",9.2,1565,2,0)
^9.22A^^0
"KRN",9.2,1568,-1)
0^6
"KRN",9.2,1568,0)
EC PROVIDER^Event Capture Non Licensed Provider^3161025.120506^
"KRN",9.2,1568,1,0)
^^8^8^3161109^
"KRN",9.2,1568,1,1,0)
This option allows you to create a list of Non Licensed Providers (those
"KRN",9.2,1568,1,2,0)
without a Person Class), so they may enter workload into DSS Units which
"KRN",9.2,1568,1,3,0)
do not send records to PCE.
"KRN",9.2,1568,1,4,0)
 
"KRN",9.2,1568,1,5,0)
Both Non Licensed Providers, and providers with a Person Class, may be
"KRN",9.2,1568,1,6,0)
selected as providers for workload that does not send to PCE. Medical
"KRN",9.2,1568,1,7,0)
center staff without a Person Class may not be selected as a provider when
"KRN",9.2,1568,1,8,0)
the workload will be sent to PCE.
"KRN",9.2,1569,-1)
0^8
"KRN",9.2,1569,0)
EC DELETE TEST PATIENT DATA^Delete event capture test patient data^3161220.130336^
"KRN",9.2,1569,1,0)
^^18^18^3161221^
"KRN",9.2,1569,1,1,0)
This option will allow the user to delete existing test patient data from 
"KRN",9.2,1569,1,2,0)
the EVENT CAPTURE PATIENT file.  Any record associated with a test 
"KRN",9.2,1569,1,3,0)
patient, as determined by their SSN and/or TEST PATIENT INDICATOR status 
"KRN",9.2,1569,1,4,0)
from the PATIENT file, will be permanently deleted from event capture.
"KRN",9.2,1569,1,5,0)
 
"KRN",9.2,1569,1,6,0)
The only exception to the deletion is if the test patient has workload in 
"KRN",9.2,1569,1,7,0)
the CH103 to CH109 procedure range.  These procedures are allowed to be 
"KRN",9.2,1569,1,8,0)
assigned to a test patient and represent valid workload.
"KRN",9.2,1569,1,9,0)
 
"KRN",9.2,1569,1,10,0)
The deletion of records will occur in the background and holders of the 
"KRN",9.2,1569,1,11,0)
ECMGR key will receive an email message upon completion of the task.
"KRN",9.2,1569,1,12,0)
 
"KRN",9.2,1569,1,13,0)
The user will be given the opportunity to confirm or cancel the request 
"KRN",9.2,1569,1,14,0)
before the deletion occurs.
"KRN",9.2,1569,1,15,0)
 
"KRN",9.2,1569,1,16,0)
*Note: This process will take a while to complete.  The amount of time 
"KRN",9.2,1569,1,17,0)
will vary based on total number of records to be reviewed and the total 
"KRN",9.2,1569,1,18,0)
number of records to be deleted.
"KRN",19,11187,-1)
0^1
"KRN",19,11187,0)
EC GUI CONTEXT^EC GUI Context version 2.4.0.0^^B^^^^^^^^EVENT CAPTURE
"KRN",19,11187,1,0)
^19.06^1^1^3160208^^^^
"KRN",19,11187,1,1,0)
This is the Broker Client/Server type option for the Event Capture GUI option
"KRN",19,11187,99)
58583,58456
"KRN",19,11187,99.1)
62872,41516
"KRN",19,11187,"RPC",0)
^19.05P^59^59
"KRN",19,11187,"RPC",1,0)
EC DSSCATCHECK
"KRN",19,11187,"RPC",2,0)
EC FILER
"KRN",19,11187,"RPC",3,0)
EC GETBATPROCS
"KRN",19,11187,"RPC",4,0)
EC GETCAT
"KRN",19,11187,"RPC",5,0)
EC GETCPTLST
"KRN",19,11187,"RPC",6,0)
EC GETDSSECS
"KRN",19,11187,"RPC",7,0)
EC GETDSSUNIT
"KRN",19,11187,"RPC",8,0)
EC GETDSSUNITUSRS
"KRN",19,11187,"RPC",9,0)
EC GETECLOC
"KRN",19,11187,"RPC",10,0)
EC GETECSCATS
"KRN",19,11187,"RPC",11,0)
EC GETECSCREEN
"KRN",19,11187,"RPC",12,0)
EC GETECSDETAIL
"KRN",19,11187,"RPC",13,0)
EC GETECSPROCS
"KRN",19,11187,"RPC",14,0)
EC GETENCDXS
"KRN",19,11187,"RPC",15,0)
EC GETIEN
"KRN",19,11187,"RPC",16,0)
EC GETLIST
"KRN",19,11187,"RPC",17,0)
EC GETLOC
"KRN",19,11187,"RPC",18,0)
EC GETNATPX
"KRN",19,11187,"RPC",19,0)
EC GETPATCLASTAT
"KRN",19,11187,"RPC",20,0)
EC GETPATELIG
"KRN",19,11187,"RPC",21,0)
EC GETPATINFO
"KRN",19,11187,"RPC",22,0)
EC GETPATPROCS
"KRN",19,11187,"RPC",23,0)
EC GETPRODEFS
"KRN",19,11187,"RPC",24,0)
EC GETPROVIDER
"KRN",19,11187,"RPC",25,0)
EC GETPXLST
"KRN",19,11187,"RPC",26,0)
EC GETPXMODIFIER
"KRN",19,11187,"RPC",27,0)
EC GETPXREASON
"KRN",19,11187,"RPC",28,0)
EC GETSCNHELP
"KRN",19,11187,"RPC",29,0)
EC GETUSRDSSUNIT
"KRN",19,11187,"RPC",30,0)
EC REPORTS
"KRN",19,11187,"RPC",31,0)
EC VALIDATE SPREADSHEET DATA
"KRN",19,11187,"RPC",32,0)
ORWU USERINFO
"KRN",19,11187,"RPC",33,0)
ORWU HASKEY
"KRN",19,11187,"RPC",34,0)
ORWU DEVICE
"KRN",19,11187,"RPC",35,0)
SC PATIENT LOOKUP
"KRN",19,11187,"RPC",36,0)
ORWU NEWPERS
"KRN",19,11187,"RPC",37,0)
DDR GET DD HELP
"KRN",19,11187,"RPC",38,0)
DDR FINDER
"KRN",19,11187,"RPC",39,0)
DDR FIND1
"KRN",19,11187,"RPC",40,0)
DDR LISTER
"KRN",19,11187,"RPC",41,0)
EC GETDATE
"KRN",19,11187,"RPC",42,0)
EC CLASHELP
"KRN",19,11187,"RPC",43,0)
DDR GETS ENTRY DATA
"KRN",19,11187,"RPC",44,0)
DG CHK BS5 XREF Y/N
"KRN",19,11187,"RPC",45,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,11187,"RPC",46,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,11187,"RPC",47,0)
DG CHK PAT/DIV MEANS TEST
"KRN",19,11187,"RPC",48,0)
EC SPACEBAR
"KRN",19,11187,"RPC",49,0)
EC DIEDON
"KRN",19,11187,"RPC",50,0)
EC GETPATCH
"KRN",19,11187,"RPC",51,0)
EC GETVISITINFO
"KRN",19,11187,"RPC",52,0)
EC GETVERSION
"KRN",19,11187,"RPC",53,0)
ORWU DT
"KRN",19,11187,"RPC",54,0)
ECOB METHOD
"KRN",19,11187,"RPC",55,0)
ECOB FACTORY
"KRN",19,11187,"RPC",56,0)
EC RECENT VISITS
"KRN",19,11187,"RPC",57,0)
EC ICD10IMPLEMENTATIONDATE
"KRN",19,11187,"RPC",58,0)
EC GET DEFAULT PROVIDER
"KRN",19,11187,"RPC",59,0)
EC DELETE TEST PATIENT DATA
"KRN",19,11187,"U")
EC GUI CONTEXT VERSION 2.4.0.0
"KRN",8994,842,-1)
0^1
"KRN",8994,842,0)
EC FILER^FILE^ECFLRPC^4^R^^^1
"KRN",8994,842,1,0)
^8994.01^1^1^3161026^^^
"KRN",8994,842,1,1,0)
A general purpose Event Capture filer used when filing data into ECS files.
"KRN",8994,842,2,0)
^8994.02A^1^1
"KRN",8994,842,2,1,0)
ECARY^2^^1
"KRN",8994,842,2,1,1,0)
^^16^16^3161026^
"KRN",8994,842,2,1,1,1,0)
The input array ECARY defines all the fields and values needed for a particular 
"KRN",8994,842,2,1,1,2,0)
file.  The variable ECARY("ECFILE") must always be set to the file number where
"KRN",8994,842,2,1,1,3,0)
data will be saved.  The following are the options and file available
"KRN",8994,842,2,1,1,4,0)
       ECFILE       Option
"KRN",8994,842,2,1,1,5,0)
       ------       ------
"KRN",8994,842,2,1,1,6,0)
       721          Event Capture Patient File
"KRN",8994,842,2,1,1,7,0)
       722          Event Capture Provider File (Non Licensed Providers)
"KRN",8994,842,2,1,1,8,0)
       724          DSS Unit
"KRN",8994,842,2,1,1,9,0)
       720.3        EC Event Code Screens
"KRN",8994,842,2,1,1,10,0)
       720.4        Event Code Reasons
"KRN",8994,842,2,1,1,11,0)
       725          EC Local Procedure
"KRN",8994,842,2,1,1,12,0)
       726          Event Capture Category
"KRN",8994,842,2,1,1,13,0)
       4            Event Capture Locations
"KRN",8994,842,2,1,1,14,0)
       200          Allocate/Deallocate users to Unit
"KRN",8994,842,2,1,1,15,0)
       200A         Allocate/Deallocate Units to user
"KRN",8994,842,2,1,1,16,0)
       8989.5       Update HFS directory
"KRN",8994,842,2,"B","ECARY",1)

"KRN",8994,842,3,0)
^8994.03^1^1^3161026^^^^
"KRN",8994,842,3,1,0)
Returns a flag of sucess or failure or a list of error codes.
"KRN",8994,3180,-1)
0^2
"KRN",8994,3180,0)
EC GET DEFAULT PROVIDER^ECDEFPRV^ECUERPC2^1^R^^^1
"KRN",8994,3180,1,0)
^8994.01^19^19^3161108^^
"KRN",8994,3180,1,1,0)
This remote procedure will return the default provider based on the DSS 
"KRN",8994,3180,1,2,0)
Unit and the user entering data into Event Capture.
"KRN",8994,3180,1,3,0)
 
"KRN",8994,3180,1,4,0)
If the user is an active provider then they will be the default 
"KRN",8994,3180,1,5,0)
regardless of the DSS unit's send to PCE setting.
"KRN",8994,3180,1,6,0)
 
"KRN",8994,3180,1,7,0)
If the user is not an active provider then a check is made to see the 
"KRN",8994,3180,1,8,0)
last person they referenced in the NEW PERSON file (#200). If that person
"KRN",8994,3180,1,9,0)
is an active provider then they will be the default.
"KRN",8994,3180,1,10,0)
 
"KRN",8994,3180,1,11,0)
If the DSS unit's send to PCE setting is set to send no records then the 
"KRN",8994,3180,1,12,0)
user will be the default if they are found in the EVENT CAPTURE PROVIDER 
"KRN",8994,3180,1,13,0)
file (#722).  If the user is not identified as an event capture provider 
"KRN",8994,3180,1,14,0)
then a check is made to see the last person they referenced in the NEW 
"KRN",8994,3180,1,15,0)
PERSON file (#200).  If that person is in the EVENT CAPTURE PROVIDER file 
"KRN",8994,3180,1,16,0)
(#722) then they will be the default.
"KRN",8994,3180,1,17,0)
 
"KRN",8994,3180,1,18,0)
If none of the checks produces a provider then there will be no default 
"KRN",8994,3180,1,19,0)
identified.
"KRN",8994,3180,2,0)
^8994.02A^1^1
"KRN",8994,3180,2,1,0)
ECARY^1^^1
"KRN",8994,3180,2,1,1,0)
^^3^3^3161108^
"KRN",8994,3180,2,1,1,1,0)
The input variable ECARY contains the IEN of the DSS unit concatenated
"KRN",8994,3180,2,1,1,2,0)
with the date/time of the procedure. If a date/time isn't sent, today's
"KRN",8994,3180,2,1,1,3,0)
date will be assumed.
"KRN",8994,3180,2,"B","ECARY",1)

"KRN",8994,3180,3,0)
^^2^2^3161108^
"KRN",8994,3180,3,1,0)
The RESULTS variable will contain either the IEN^User Name or -1
"KRN",8994,3180,3,2,0)
if no default is found.
"KRN",8994,3181,-1)
0^3
"KRN",8994,3181,0)
EC DELETE TEST PATIENT DATA^DTPD^ECUMRPC2^4^R^^^1
"KRN",8994,3181,1,0)
^^19^19^3161221^
"KRN",8994,3181,1,1,0)
This RPC is used to delete any test patient data from the EVENT CAPTURE 
"KRN",8994,3181,1,2,0)
PATIENT file (#721). 
"KRN",8994,3181,1,3,0)
 
"KRN",8994,3181,1,4,0)
If the patient is identified as a test patient and the procedure
"KRN",8994,3181,1,5,0)
associated with the test patient record is not in the range of CH103 to
"KRN",8994,3181,1,6,0)
CH109 then the record will be deleted.  If the procedure is in this range 
"KRN",8994,3181,1,7,0)
for a test patient, the record will not be deleted.  Test patients, with 
"KRN",8994,3181,1,8,0)
procedures in this range, are allowed for recording Chaplain workload.
"KRN",8994,3181,1,9,0)
 
"KRN",8994,3181,1,10,0)
This RPC can be invoked in two modes.  The first mode, "I" is for 
"KRN",8994,3181,1,11,0)
gathering information about the account, the date/time of the last 
"KRN",8994,3181,1,12,0)
deletion, the user who ran the deletion and the status of the deletion 
"KRN",8994,3181,1,13,0)
process. The second mode, "D", is for deleting patient records as defined
"KRN",8994,3181,1,14,0)
above.
"KRN",8994,3181,1,15,0)
 
"KRN",8994,3181,1,16,0)
Care should be used when running this RPC as the data cannot be restored 
"KRN",8994,3181,1,17,0)
once it's deleted. In addition, this process could take a while to 
"KRN",8994,3181,1,18,0)
complete.  The amount of time needed will vary based on the total number 
"KRN",8994,3181,1,19,0)
of records to be reviewed and the total number of records to be deleted.
"KRN",8994,3181,2,0)
^8994.02A^2^1
"KRN",8994,3181,2,2,0)
ECARY^1^^1
"KRN",8994,3181,2,2,1,0)
^8994.021^2^2^3161221^^^
"KRN",8994,3181,2,2,1,1,0)
This will hold the mode in which you want to run the RPC.  The two
"KRN",8994,3181,2,2,1,2,0)
possible modes are "I"nformation or "D"elete.
"KRN",8994,3181,2,"B","ECARY",2)

"KRN",8994,3181,3,0)
^^9^9^3161221^
"KRN",8994,3181,3,1,0)
Depending on the mode, the return results will vary.  
"KRN",8994,3181,3,2,0)
 
"KRN",8994,3181,3,3,0)
For the "I"nformational mode, the return value will be account type (test
"KRN",8994,3181,3,4,0)
or production)^network name^date/time deletion last completed^user who
"KRN",8994,3181,3,5,0)
last ran the deletion^status of the deletion (0 not running/1 running).
"KRN",8994,3181,3,6,0)
 
"KRN",8994,3181,3,7,0)
For the "D"eletion mode, the return value will be 0 if the task couldn't 
"KRN",8994,3181,3,8,0)
be queued to run in the background or 1 to indicate that it was 
"KRN",8994,3181,3,9,0)
successfully tasked to the background.
"MBREQ")
0
"ORD",1,9.2)
9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"ORD",1,9.2,0)
HELP FRAME
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
134^3170523
"PRE")
EC2P134
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","EC2P134")
0^11^B27323394^n/a
"RTN","EC2P134",1,0)
EC2P134 ;ALB/DAN - Installation activities ;4/19/17  11:04
"RTN","EC2P134",2,0)
 ;;2.0;EVENT CAPTURE;**134**;8 May 96;Build 12
"RTN","EC2P134",3,0)
 ;
"RTN","EC2P134",4,0)
ENV ;Environment check to make sure old file 722 isn't there
"RTN","EC2P134",5,0)
 ;
"RTN","EC2P134",6,0)
 N DIU
"RTN","EC2P134",7,0)
 I '$D(^ECC(722,0)) W !,"Environment is ready for installation." Q
"RTN","EC2P134",8,0)
 I $D(^ECC(722,0)) D  ;If old file 722 exists, delete it.
"RTN","EC2P134",9,0)
 .W !,"Old file encountered during check..."
"RTN","EC2P134",10,0)
 .W !,"Removing 'EVENT CAPTURE EXTRACTS' file (#722) as it's obsolete."
"RTN","EC2P134",11,0)
 .S DIU="^ECC(722,"
"RTN","EC2P134",12,0)
 .S DIU(0)="DT" ;Remove data and templates as well as the file
"RTN","EC2P134",13,0)
 .D EN^DIU2
"RTN","EC2P134",14,0)
 .Q
"RTN","EC2P134",15,0)
 Q
"RTN","EC2P134",16,0)
 ;
"RTN","EC2P134",17,0)
POST ;Post-install activities
"RTN","EC2P134",18,0)
 D DTPD ;Delete test patient data
"RTN","EC2P134",19,0)
 D CHKLOC ;Check location names to see if they're correct
"RTN","EC2P134",20,0)
 D DELLOC ;Del "LOC" xref and then rebuild so it uses current names
"RTN","EC2P134",21,0)
 Q
"RTN","EC2P134",22,0)
 ;
"RTN","EC2P134",23,0)
DTPD ;Delete test patient data from file 721 if this is a production install
"RTN","EC2P134",24,0)
 N PROD,RESULTS,DIK
"RTN","EC2P134",25,0)
 S PROD=$$PROD^XUPROD
"RTN","EC2P134",26,0)
 I PROD D
"RTN","EC2P134",27,0)
 .D BMES^XPDUTL("Starting task in background to delete test patient data from the")
"RTN","EC2P134",28,0)
 .D MES^XPDUTL("EVENT CAPTURE PATIENT file (#721).  An email will be sent upon completion.")
"RTN","EC2P134",29,0)
 .D DTPD^ECUMRPC2(.RESULTS,"D")
"RTN","EC2P134",30,0)
 .D BMES^XPDUTL($S(@RESULTS@(0):"Task queued successfully.",1:"Error setting up task - contact national help desk."))
"RTN","EC2P134",31,0)
 .Q
"RTN","EC2P134",32,0)
 I 'PROD D BMES^XPDUTL("Not a production environment - no test patient data deleted.")
"RTN","EC2P134",33,0)
 Q
"RTN","EC2P134",34,0)
 ;
"RTN","EC2P134",35,0)
CHKLOC ;Check "LOC" index against actual names and report differences
"RTN","EC2P134",36,0)
 N NAME,REC,CHG,DEL,NEWNM
"RTN","EC2P134",37,0)
 S NAME="" F  S NAME=$O(^DIC(4,"LOC",NAME)) Q:NAME=""  D
"RTN","EC2P134",38,0)
 .S REC=0 F  S REC=$O(^DIC(4,"LOC",NAME,REC)) Q:'+REC  D
"RTN","EC2P134",39,0)
 ..I '$D(^DIC(4,REC)) S DEL(NAME,REC)="" Q
"RTN","EC2P134",40,0)
 ..S NEWNM=$P($G(^DIC(4,REC,0)),U) ;Current name of location
"RTN","EC2P134",41,0)
 ..I NEWNM'=NAME S CHG(NAME,REC)=NEWNM ;Note name change
"RTN","EC2P134",42,0)
 D MAIL
"RTN","EC2P134",43,0)
 Q
"RTN","EC2P134",44,0)
 ;
"RTN","EC2P134",45,0)
DELLOC ;Fix "LOC" table in file 4
"RTN","EC2P134",46,0)
 D BMES^XPDUTL("Deleting 'LOC' cross-reference in file 4...")
"RTN","EC2P134",47,0)
 K ^DIC(4,"LOC") ;One-time IA 6723 allows for this deletion
"RTN","EC2P134",48,0)
 D MES^XPDUTL("Done")
"RTN","EC2P134",49,0)
 D BMES^XPDUTL("Rebuilding 'LOC' cross-reference in file 4")
"RTN","EC2P134",50,0)
 S DIK="^DIC(4,",DIK(1)=720 D ENALL^DIK
"RTN","EC2P134",51,0)
 D MES^XPDUTL("Done")
"RTN","EC2P134",52,0)
 Q
"RTN","EC2P134",53,0)
 ;
"RTN","EC2P134",54,0)
MAIL ;Send email with results to holders of the ECMGR key
"RTN","EC2P134",55,0)
 N XMSUB,XMTEXT,XMDUZ,XMY,XMZ,CNT,DIFROM,ECTEXT,NUM,NAME
"RTN","EC2P134",56,0)
 S XMDUZ="PATCH EC*2*134 POST-INSTALL"
"RTN","EC2P134",57,0)
 D GETXMY("ECMGR",.XMY)
"RTN","EC2P134",58,0)
 S CNT=1
"RTN","EC2P134",59,0)
 S ECTEXT(CNT)="A review of Event Capture Location names has completed.",CNT=CNT+1,ECTEXT(CNT)="Event Capture Location names were checked to make sure they are using the",CNT=CNT+1
"RTN","EC2P134",60,0)
 S ECTEXT(CNT)="correct name as found in the INSTITUTION file (#4).",CNT=CNT+1
"RTN","EC2P134",61,0)
 S ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",62,0)
 I '$D(CHG),'$D(DEL) S ECTEXT(CNT)="No differences were found between your Event Capture Locations and the",CNT=CNT+1,ECTEXT(CNT)="INSTITUTION file.  No further action is required.",CNT=CNT+1
"RTN","EC2P134",63,0)
 I $D(CHG)!($D(DEL)) D
"RTN","EC2P134",64,0)
 .S ECTEXT(CNT)="Changes to your Event Capture Location names were required.",CNT=CNT+1
"RTN","EC2P134",65,0)
 .S ECTEXT(CNT)="Entries are identified by NAME(IEN), where IEN is the record number in the",CNT=CNT+1
"RTN","EC2P134",66,0)
 .S ECTEXT(CNT)="INSTITUTION file (file #4).",CNT=CNT+1
"RTN","EC2P134",67,0)
 .S ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",68,0)
 I $D(CHG) D  S ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",69,0)
 .S ECTEXT(CNT)="The following locations had their name updated:",CNT=CNT+1,ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",70,0)
 .S NAME="" F  S NAME=$O(CHG(NAME)) Q:NAME=""  S NUM=0 F  S NUM=$O(CHG(NAME,NUM)) Q:'+NUM  D
"RTN","EC2P134",71,0)
 ..S ECTEXT(CNT)=NAME_" ("_NUM_") is now "_$G(CHG(NAME,NUM)),CNT=CNT+1
"RTN","EC2P134",72,0)
 I $D(DEL) D  S ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",73,0)
 .S ECTEXT(CNT)="The following locations are no longer available:",CNT=CNT+1,ECTEXT(CNT)="",CNT=CNT+1
"RTN","EC2P134",74,0)
 .S NAME="" F  S NAME=$O(DEL(NAME)) Q:NAME=""  S NUM=0 F  S NUM=$O(DEL(NAME,NUM)) Q:'+NUM  S ECTEXT(CNT)=NAME_" ("_NUM_") is no longer available.",CNT=CNT+1
"RTN","EC2P134",75,0)
 I $D(CHG)!($D(DEL)) D
"RTN","EC2P134",76,0)
 .S ECTEXT(CNT)="These updates were done to get your Event Capture Location names",CNT=CNT+1,ECTEXT(CNT)="back in sync with the INSTITUTION file.  You should review your Event",CNT=CNT+1
"RTN","EC2P134",77,0)
 .S ECTEXT(CNT)="Capture Locations to make sure that locations identified for use in Event",CNT=CNT+1,ECTEXT(CNT)="Capture are correct.  No other action is required."
"RTN","EC2P134",78,0)
 S XMTEXT="ECTEXT(",XMSUB="Event Capture Location review"
"RTN","EC2P134",79,0)
 D ^XMD
"RTN","EC2P134",80,0)
 Q
"RTN","EC2P134",81,0)
 ;
"RTN","EC2P134",82,0)
GETXMY(KEY,XMY) ;Put holders of the KEY into the XMY array to be recipients of the email
"RTN","EC2P134",83,0)
 I $G(KEY)'="" M XMY=^XUSEC(KEY)
"RTN","EC2P134",84,0)
 S:$G(DUZ) XMY(DUZ)="" ;Make sure there's at least one recipient
"RTN","EC2P134",85,0)
 Q
"RTN","EC2P134",86,0)
 ;
"RTN","ECDTPD")
0^13^B12319465^n/a
"RTN","ECDTPD",1,0)
ECDTPD ;ALB/DAN Delete Test Patient Data from file #721 ;1/19/17  12:03
"RTN","ECDTPD",2,0)
 ;;2.0;EVENT CAPTURE;**134**;;Build 12
"RTN","ECDTPD",3,0)
 ;
"RTN","ECDTPD",4,0)
 Q  ;Don't allow processing from the top
"RTN","ECDTPD",5,0)
 ;
"RTN","ECDTPD",6,0)
DEL ;Delete test patient data
"RTN","ECDTPD",7,0)
 N PDT,DFN,ECIEN,PROC,CNT,PRCNM,ECDEL
"RTN","ECDTPD",8,0)
 S CNT=0,ECDEL=1
"RTN","ECDTPD",9,0)
 K ^TMP($J,"ECPAT") ;Delete temp storage for deleted records
"RTN","ECDTPD",10,0)
 S DFN=0 F  S DFN=$O(^ECH("APAT",DFN)) Q:'+DFN  I $$TESTPAT^VADPT(DFN) D
"RTN","ECDTPD",11,0)
 .S PDT=0 F  S PDT=$O(^ECH("APAT",DFN,PDT)) Q:'+PDT  S ECIEN=0 F  S ECIEN=$O(^ECH("APAT",DFN,PDT,ECIEN)) Q:'+ECIEN  D
"RTN","ECDTPD",12,0)
 ..S PROC=$P($G(^ECH(ECIEN,0)),U,9) S PRCNM=$S($P(PROC,";",2)[725:$$GET1^DIQ(725,+PROC_",",1),1:"")
"RTN","ECDTPD",13,0)
 ..I "^CH103^CH104^CH105^CH106^CH107^CH108^CH109^"'[("^"_PRCNM_"^") D SAVE,FILE^ECEFPAT S CNT=CNT+1 ;If test patient and procedure isn't in the list then delete the record
"RTN","ECDTPD",14,0)
 D MAIL
"RTN","ECDTPD",15,0)
 S $P(^XTMP("ECDELETE","DEL"),U,3)=0 ;Set status to completed
"RTN","ECDTPD",16,0)
 K ^TMP($J,"ECPAT") ;Delete storage as no longer needed
"RTN","ECDTPD",17,0)
 Q
"RTN","ECDTPD",18,0)
 ;
"RTN","ECDTPD",19,0)
SAVE ;Save information from record to be deleted for email message
"RTN","ECDTPD",20,0)
 N DATA,NAMESSN,PIECE
"RTN","ECDTPD",21,0)
 D GETS^DIQ(721,ECIEN_",","1;2;3;6;7;8;9","IE","DATA")
"RTN","ECDTPD",22,0)
 S NAMESSN=DATA(721,ECIEN_",",1,"E")_" ("_$$GET1^DIQ(2,DATA(721,ECIEN_",",1,"I"),.09)_")"
"RTN","ECDTPD",23,0)
 F PIECE=6,3,7,2,8,9 S ^TMP($J,"ECPAT",NAMESSN,ECIEN)=$G(^TMP($J,"ECPAT",NAMESSN,ECIEN))_DATA(721,ECIEN_",",PIECE,"E")_$S(PIECE'=9:"^",1:"")
"RTN","ECDTPD",24,0)
 Q
"RTN","ECDTPD",25,0)
 ;Send email with results of processing
"RTN","ECDTPD",26,0)
MAIL ;
"RTN","ECDTPD",27,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,NAME,LINE
"RTN","ECDTPD",28,0)
 K ^TMP($J,"XMTEXT")
"RTN","ECDTPD",29,0)
 S XMDUZ="Event Capture Package"
"RTN","ECDTPD",30,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","ECDTPD",31,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","ECDTPD",32,0)
 S ^TMP($J,"XMTEXT",1)="The deletion of test patient data has completed."
"RTN","ECDTPD",33,0)
 S ^TMP($J,"XMTEXT",2)="Below are the results."
"RTN","ECDTPD",34,0)
 S ^TMP($J,"XMTEXT",3)=""
"RTN","ECDTPD",35,0)
 S ^TMP($J,"XMTEXT",4)=$S('+$G(CNT):"No",1:CNT)_" test patient records were deleted."
"RTN","ECDTPD",36,0)
 S LINE=5 ;start with line 5 to add to message
"RTN","ECDTPD",37,0)
 I $G(CNT) D
"RTN","ECDTPD",38,0)
 .S ^TMP($J,"XMTEXT",LINE)="",LINE=LINE+1
"RTN","ECDTPD",39,0)
 .S ^TMP($J,"XMTEXT",LINE)="Deleted records, by NAME (SSN), are shown below in the following format:",LINE=LINE+1
"RTN","ECDTPD",40,0)
 .S ^TMP($J,"XMTEXT",LINE)="DSS UNIT^LOCATION^CATEGORY^DATE/TIME^PROCEDURE^VOLUME",LINE=LINE+1
"RTN","ECDTPD",41,0)
 .S ^TMP($J,"XMTEXT",LINE)="",LINE=LINE+1
"RTN","ECDTPD",42,0)
 .S NAME="" F  S NAME=$O(^TMP($J,"ECPAT",NAME)) Q:NAME=""  D
"RTN","ECDTPD",43,0)
 ..S ^TMP($J,"XMTEXT",LINE)=NAME,LINE=LINE+1,^TMP($J,"XMTEXT",LINE)=$$REPEAT^XLFSTR("-",$L(NAME)),LINE=LINE+1
"RTN","ECDTPD",44,0)
 ..S REC=0 F  S REC=$O(^TMP($J,"ECPAT",NAME,REC)) Q:'+REC  S ^TMP($J,"XMTEXT",LINE)=^TMP($J,"ECPAT",NAME,REC),LINE=LINE+1
"RTN","ECDTPD",45,0)
 ..S ^TMP($J,"XMTEXT",LINE)="",LINE=LINE+1
"RTN","ECDTPD",46,0)
 S XMTEXT="^TMP($J,""XMTEXT"",",XMSUB="Test patient record deletion"
"RTN","ECDTPD",47,0)
 D ^XMD ;Send email
"RTN","ECDTPD",48,0)
 K ^TMP($J,"XMTEXT") ;No longer needed
"RTN","ECDTPD",49,0)
 Q
"RTN","ECEFPAT")
0^4^B89607529^B76799411
"RTN","ECEFPAT",1,0)
ECEFPAT ;ALB/JAM-Enter Event Capture Data Patient Filer ;4/24/17  14:55
"RTN","ECEFPAT",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,39,42,47,49,54,65,72,95,76,112,119,114,126,134**;8 May 96;Build 12
"RTN","ECEFPAT",3,0)
 ;
"RTN","ECEFPAT",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECEFPAT",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR #5747
"RTN","ECEFPAT",6,0)
 ; 
"RTN","ECEFPAT",7,0)
FILE ;Used by the RPC broker to file patient encounter in file #721
"RTN","ECEFPAT",8,0)
 ;  Uses Supported IA 1995 - allow access to $$CPT^ICPTCOD
"RTN","ECEFPAT",9,0)
 ;
"RTN","ECEFPAT",10,0)
 ;     Variables passed in
"RTN","ECEFPAT",11,0)
 ;       ECIEN   - IEN of #721, if editing
"RTN","ECEFPAT",12,0)
 ;       ECDEL   - Delete record. 1- YES; 0- 0, null or undefine for NO.
"RTN","ECEFPAT",13,0)
 ;       ECDFN   - Patient IEN for file #2
"RTN","ECEFPAT",14,0)
 ;       ECDT    - Date and time of procedure
"RTN","ECEFPAT",15,0)
 ;       ECL     - Location
"RTN","ECEFPAT",16,0)
 ;       ECD     - DSS Unit
"RTN","ECEFPAT",17,0)
 ;       ECC     - Category
"RTN","ECEFPAT",18,0)
 ;       ECP     - Procedure
"RTN","ECEFPAT",19,0)
 ;       ECVOL   - Volume
"RTN","ECEFPAT",20,0)
 ;       ECU1..n - Provider (1 thru n), Prov 1 is required,other optional
"RTN","ECEFPAT",21,0)
 ;       ECMN    - Ordering Section
"RTN","ECEFPAT",22,0)
 ;       ECDUZ   - Entered/Edited by, pointer to #200
"RTN","ECEFPAT",23,0)
 ;       ECDX    - Primary Diagnosis
"RTN","ECEFPAT",24,0)
 ;       ECDXS   - Secondary Diagnosis; multiple, optional
"RTN","ECEFPAT",25,0)
 ;       EC4     - Associated Clinic, required if sending data to PCE
"RTN","ECEFPAT",26,0)
 ;       ECPTSTAT- Patient Status
"RTN","ECEFPAT",27,0)
 ;       ECPXREAS- Procedure reason, optional
"RTN","ECEFPAT",28,0)
 ;       ECPXREA2- Procedure reason #2, optional ;112
"RTN","ECEFPAT",29,0)
 ;       ECPXREA3- Procedure reason #3, optional ;112
"RTN","ECEFPAT",30,0)
 ;       ECMOD   - CPT modifiers, optional
"RTN","ECEFPAT",31,0)
 ;       ECLASS  - Classification, optional
"RTN","ECEFPAT",32,0)
 ;       ECELIG  - Eligibility, optional
"RTN","ECEFPAT",33,0)
 ;       ECSOURCE- Indicates source of input (e.g. STATE HOME)
"RTN","ECEFPAT",34,0)
 ;
"RTN","ECEFPAT",35,0)
 ;     Variable return
"RTN","ECEFPAT",36,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #721^Message
"RTN","ECEFPAT",37,0)
 ;
"RTN","ECEFPAT",38,0)
 N NODE,ECS,ECM,ECID,ECCPT,ECINT,ECPCE,ECX,ECERR,ECOUT,ECFLG,ECRES
"RTN","ECEFPAT",39,0)
 N ECFIL,ECPRV,ECCS
"RTN","ECEFPAT",40,0)
 ; Determine Active Coding System based on Date of Interest
"RTN","ECEFPAT",41,0)
 S ECCS=$S($G(ECDT)'="":ECDT,1:DT)
"RTN","ECEFPAT",42,0)
 S ECCS=$$SINFO^ICDEX("DIAG",ECCS) ; Supported by ICR 5747
"RTN","ECEFPAT",43,0)
 ;
"RTN","ECEFPAT",44,0)
 S ECFLG=1,ECERR=0 D CHKDT(1) I ECERR Q
"RTN","ECEFPAT",45,0)
 F ECX=1:1 Q:'$D(@("ECU"_ECX))  D  I ECERR Q
"RTN","ECEFPAT",46,0)
 .I @("ECU"_ECX)="" Q
"RTN","ECEFPAT",47,0)
 .S NODE=$$GET^XUA4A72(@("ECU"_ECX),ECDT) I +NODE'>0&($P($G(^ECD(ECD,0)),U,14)'="N") S ECERR=1 D  Q  ;134 Added check for DSS Unit's send to PCE setting. If set to "yes" allow non-providers to be used.
"RTN","ECEFPAT",48,0)
 ..S ^TMP($J,"ECMSG",1)="0^Provider doesn't have an active Person class"
"RTN","ECEFPAT",49,0)
 .S ECPRV(ECX)=@("ECU"_ECX)_"^^"_$S(ECX=1:"P",1:"S")
"RTN","ECEFPAT",50,0)
 I $G(ECIEN)'="" S ECFLG=0 D  I ECERR Q
"RTN","ECEFPAT",51,0)
 . I '$D(^ECH(ECIEN)) S ECERR=1,^TMP($J,"ECMSG",1)="0^Pat IEN Not Found"
"RTN","ECEFPAT",52,0)
 I $G(ECDEL) K ^TMP($J,"ECMSG") D  Q
"RTN","ECEFPAT",53,0)
 .S ECVST=$P($G(^ECH(ECIEN,0)),"^",21) I ECVST D
"RTN","ECEFPAT",54,0)
 ..;* Resend all EC records with same Visit file entry to PCE
"RTN","ECEFPAT",55,0)
 ..;* Remove Visit entry from ^ECH( so DELVFILE will complete cleanup
"RTN","ECEFPAT",56,0)
 ..K EC2PCE S ECVAR1=$$FNDVST^ECUTL(ECVST,,.EC2PCE) K ECVAR1
"RTN","ECEFPAT",57,0)
 ..;Set VALQUIET to stop Amb Care validator from broadcasting to screen
"RTN","ECEFPAT",58,0)
 ..N ECPKG,ECSOU
"RTN","ECEFPAT",59,0)
 ..S ECPKG=$O(^DIC(9.4,"B","EVENT CAPTURE",0)),ECSOU="EVENT CAPTURE DATA"
"RTN","ECEFPAT",60,0)
 ..S VALQUIET=1,ECVV=$$DELVFILE^PXAPI("ALL",ECVST,ECPKG,ECSOU) K ECVST,VALQUIET
"RTN","ECEFPAT",61,0)
 ..;- Send to PCE task
"RTN","ECEFPAT",62,0)
 ..D PCETASK^ECPCEU(.EC2PCE) K EC2PCE
"RTN","ECEFPAT",63,0)
 .S DA=ECIEN,DIK="^ECH(" D ^DIK K DA,DIK,ECVV
"RTN","ECEFPAT",64,0)
 .D TABLE("D",ECIEN) ;134 Remove entry from table
"RTN","ECEFPAT",65,0)
 .S ^TMP($J,"ECMSG",1)="1^Procedure Deleted"
"RTN","ECEFPAT",66,0)
 I '$D(ECPRV) S ^TMP($J,"ECMSG",1)="0^No provider present" Q
"RTN","ECEFPAT",67,0)
 S ECDT=+ECDT,NODE=$G(^ECD(ECD,0)) I NODE="" D MSG Q
"RTN","ECEFPAT",68,0)
 S ECFN=$G(ECIEN),ECVOL=$G(ECVOL,1),ECS=$P(NODE,U,2),ECM=$P(NODE,U,3)
"RTN","ECEFPAT",69,0)
 S ECPCE="U~"_$S($P(NODE,"^",14)]"":$P(NODE,"^",14),1:"N")
"RTN","ECEFPAT",70,0)
 ;S ECPTSTAT=$$INOUTPT^ECUTL0(ECDFN,+ECDT) ;pat stat may not need
"RTN","ECEFPAT",71,0)
 I $G(EC4)="" D GETCLN^ECEDF
"RTN","ECEFPAT",72,0)
 S ECID=$S(+EC4:$P($G(^SC(+EC4,0)),"^",7),1:""),ECINP=ECPTSTAT
"RTN","ECEFPAT",73,0)
 I $S($P(ECPCE,"~",2)="N":0,$P(ECPCE,"~",2)="O"&(ECINP'="O"):0,1:1) D
"RTN","ECEFPAT",74,0)
 .D CHKDT(2)
"RTN","ECEFPAT",75,0)
 I +EC4 S ECRES=$$CLNCK^SDUTL2(+EC4,0) I 'ECRES D  S ECERR=1
"RTN","ECEFPAT",76,0)
 .S ^TMP($J,"ECMSG",1)=ECRES_" Clinic MUST be corrected before filing."
"RTN","ECEFPAT",77,0)
 Q:ECERR  I ECFLG D NEWIEN I $G(ECSOURCE)="STATE HOME" D TABLE("A",ECIEN) ;134 If state home record, add to table
"RTN","ECEFPAT",78,0)
 S ECCPT=$S(ECP["ICPT":+ECP,1:$P($G(^EC(725,+ECP,0)),U,5))
"RTN","ECEFPAT",79,0)
 ;validate CPT value and handle HCPCS name to IEN conversion (HD223010)
"RTN","ECEFPAT",80,0)
 S ECCPT=+$$CPT^ICPTCOD(ECCPT)
"RTN","ECEFPAT",81,0)
 S ECCPT=$S(+ECCPT>0:ECCPT,1:0)
"RTN","ECEFPAT",82,0)
 K DA,DR,DIE S DIE="^ECH(",(DA,ECFN)=ECIEN K ECIEN
"RTN","ECEFPAT",83,0)
 S DR=".01////"_ECFN_";1////"_ECDFN_";3////"_ECL_";4////"_ECS
"RTN","ECEFPAT",84,0)
 S DR=DR_";5////"_ECM_";6////"_ECD_";7////"_+ECC_";9////"_ECVOL
"RTN","ECEFPAT",85,0)
 S $P(^ECH(ECFN,0),"^",9)=ECP
"RTN","ECEFPAT",86,0)
 D ^DIE I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",87,0)
 S DA=ECFN,DR="11////"_ECMN_";13////"_ECDUZ_";2////"_ECDT
"RTN","ECEFPAT",88,0)
 ;S ECPXREAS=$G(ECPXREAS) ;112
"RTN","ECEFPAT",89,0)
 D CVTREAS Q:$G(ECERR)  ;119 Convert reasons from entries in 720.4 to entries in 720.5 before storing.
"RTN","ECEFPAT",90,0)
 S DR=DR_";19////"_$S(+ECCPT:ECCPT,1:"@")_";20////"_ECDX
"RTN","ECEFPAT",91,0)
 S DR=DR_";26////"_$S($G(EC4):EC4,1:"")_";27////"_$G(ECID)_";29////"_ECPTSTAT ;126 allow EC4 to be null if no associated clinic
"RTN","ECEFPAT",92,0)
 S DR=DR_";34////"_$S($G(ECPXREAS)="":"@",1:ECPXREAS) ;112
"RTN","ECEFPAT",93,0)
 S DR=DR_";43////"_$S($G(ECPXREA2)="":"@",1:ECPXREA2) ;112
"RTN","ECEFPAT",94,0)
 S DR=DR_";44////"_$S($G(ECPXREA3)="":"@",1:ECPXREA3) ;112
"RTN","ECEFPAT",95,0)
 D ^DIE I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",96,0)
 I ECDX S ^DISV(DUZ,"^ICD9(")=ECDX  ;last ICD9 code
"RTN","ECEFPAT",97,0)
 S ECX=$O(ECPRV("A"),-1) I ECX'="" S ^DISV(DUZ,"^VA(200,")=+ECPRV(ECX)
"RTN","ECEFPAT",98,0)
 ;Remove Old CPT modifiers
"RTN","ECEFPAT",99,0)
 I 'ECFLG D
"RTN","ECEFPAT",100,0)
 . K OLDMOD S (ECDA,DA(1))=ECFN,DIK="^ECH("_DA(1)_",""MOD"",",DA=0
"RTN","ECEFPAT",101,0)
 . F  S DA=$O(^ECH(ECDA,"MOD",DA)) Q:'DA  S OLDMOD(DA)="" D ^DIK
"RTN","ECEFPAT",102,0)
 . K DA,ECDA,DIK,^ECH(ECFN,"MOD")
"RTN","ECEFPAT",103,0)
 .;Remove old secondary diagnosis codes
"RTN","ECEFPAT",104,0)
 . K OLDDXS S (ECDA,DA(1))=ECFN,DIK="^ECH("_DA(1)_",""DX"",",DA=0
"RTN","ECEFPAT",105,0)
 . F  S DA=$O(^ECH(ECDA,"DX",DA)) Q:'DA  S OLDDXS(DA)="" D ^DIK
"RTN","ECEFPAT",106,0)
 . K DA,ECDA,DIK,^ECH(ECFN,"DX")
"RTN","ECEFPAT",107,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",108,0)
 ;File multiple providers
"RTN","ECEFPAT",109,0)
 S ECFIL=$$FILPRV^ECPRVMUT(ECFN,.ECPRV,.ECOUT) K ECOUT
"RTN","ECEFPAT",110,0)
 I 'ECFIL D RECDEL,MSG Q
"RTN","ECEFPAT",111,0)
 ;File CPT modifiers
"RTN","ECEFPAT",112,0)
 I $G(ECMOD)'="" D
"RTN","ECEFPAT",113,0)
 . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,36,0),U,2)
"RTN","ECEFPAT",114,0)
 . S DIC="^ECH("_DA(1)_","_"""MOD"""_","
"RTN","ECEFPAT",115,0)
 . F ECX=1:1:$L(ECMOD,"^") S MODIEN=$P(ECMOD,U,ECX) I +MODIEN>0 D
"RTN","ECEFPAT",116,0)
 . . K DD,DO S X=MODIEN D FILE^DICN
"RTN","ECEFPAT",117,0)
 . K MODIEN,DIC
"RTN","ECEFPAT",118,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",119,0)
 ; File multiple secondary diagnosis codes
"RTN","ECEFPAT",120,0)
 I $G(ECDXS)'="" D
"RTN","ECEFPAT",121,0)
 . S DXS="",DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,38,0),U,2)
"RTN","ECEFPAT",122,0)
 . S DIC="^ECH("_DA(1)_","_"""DX"""_",",ECDXY=ECDX K ECDXX
"RTN","ECEFPAT",123,0)
 . F ECX=1:1:$L(ECDXS,"^") S DXSIEN=$P(ECDXS,U,ECX) I +DXSIEN>0 D
"RTN","ECEFPAT",124,0)
 . . ; Retrieve ICD data - Supported by ICR 5747
"RTN","ECEFPAT",125,0)
 . . S DXCDE=$$ICDDX^ICDEX(DXSIEN,ECDT,+ECCS,"I") Q:+DXCDE<0  I '$P(DXCDE,U,10) Q
"RTN","ECEFPAT",126,0)
 . . K DD,DO S X=DXSIEN D FILE^DICN
"RTN","ECEFPAT",127,0)
 . . S DXCDE=$P(DXCDE,U,2),ECDXX(DXCDE)=DXSIEN
"RTN","ECEFPAT",128,0)
 . . S ^DISV(DUZ,"^ICD9(")=DXSIEN  ;last ICD9 code
"RTN","ECEFPAT",129,0)
 . ; Update all procedures for an encounter with same primary & second dx
"RTN","ECEFPAT",130,0)
 . S PXUPD=$$PXUPD^ECUTL2(ECDFN,ECDT,ECL,EC4,ECDXY,.ECDXX,ECFN)
"RTN","ECEFPAT",131,0)
 . K PXUPD,ECDXY,ECDXX,DXS,DXSIEN,DIC,DXCDE,DA,DD,DO
"RTN","ECEFPAT",132,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",133,0)
 S DA=ECFN
"RTN","ECEFPAT",134,0)
 ;File classification AO^IR^SC^EC^MST^HNC^CV^SHAD
"RTN","ECEFPAT",135,0)
 I $G(ECLASS)'="" D
"RTN","ECEFPAT",136,0)
 . S CLSTR="21^22^24^23^35^39^40^41",DR=""
"RTN","ECEFPAT",137,0)
 . F ECX=1:1:$L(CLSTR,"^") D
"RTN","ECEFPAT",138,0)
 . . S DR=DR_$P(CLSTR,U,ECX)_"////"_$P(ECLASS,U,ECX)_";"
"RTN","ECEFPAT",139,0)
 . S DR=$E(DR,1,($L(DR)-1)) D ^DIE
"RTN","ECEFPAT",140,0)
 . K CLSTR,DR,DIE
"RTN","ECEFPAT",141,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",142,0)
 ;
"RTN","ECEFPAT",143,0)
PCE ; format PCE data to send
"RTN","ECEFPAT",144,0)
 I ($P(ECPCE,"~",2)="N")!($P(ECPCE,"~",2)="O"&(ECINP'="O")) D  Q
"RTN","ECEFPAT",145,0)
 .S ^TMP($J,"ECMSG",1)="1^Record Filed"
"RTN","ECEFPAT",146,0)
 D:ECFLG PCE^ECBEN2U I 'ECFLG S EC(0)=^ECH(ECFN,0) D PCEE^ECBEN2U K EC
"RTN","ECEFPAT",147,0)
 I $G(ECOUT)!(ECERR) D  Q
"RTN","ECEFPAT",148,0)
 . D RECDEL S STR=$S($G(^ECH(ECFN,"R")):^("R"),1:" PCE Data Missing")
"RTN","ECEFPAT",149,0)
 . S ^TMP($J,"ECMSG",1)="0^Record Not Filed, "_STR K STR
"RTN","ECEFPAT",150,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_$G(ECIEN)
"RTN","ECEFPAT",151,0)
 Q
"RTN","ECEFPAT",152,0)
 ;
"RTN","ECEFPAT",153,0)
NEWIEN ;Create new IEN in file #721
"RTN","ECEFPAT",154,0)
 N DIC,DA,DD,DO,ECRN
"RTN","ECEFPAT",155,0)
RLCK L +^ECH(0):60 S ECRN=$P(^ECH(0),"^",3)+1
"RTN","ECEFPAT",156,0)
 I $D(^ECH(ECRN)) S $P(^ECH(0),"^",3)=$P(^(0),"^",3)+1 L -^ECH(0) G RLCK
"RTN","ECEFPAT",157,0)
 L -^ECH(0) S DIC(0)="L",DIC="^ECH(",X=ECRN
"RTN","ECEFPAT",158,0)
 D FILE^DICN S ECIEN=+Y
"RTN","ECEFPAT",159,0)
 Q
"RTN","ECEFPAT",160,0)
RECDEL ; Delete record
"RTN","ECEFPAT",161,0)
 ;restore old data
"RTN","ECEFPAT",162,0)
 I 'ECFLG D  Q
"RTN","ECEFPAT",163,0)
 . I $O(OLDMOD("")) D
"RTN","ECEFPAT",164,0)
 . . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,36,0),U,2)
"RTN","ECEFPAT",165,0)
 . . S DIC="^ECH("_DA(1)_","_"""MOD"""_",",ECX=0
"RTN","ECEFPAT",166,0)
 . . F  S ECX=$O(OLDMOD(ECX)) Q:'ECX  I ECX>0 K DD,DO S X=ECX D FILE^DICN
"RTN","ECEFPAT",167,0)
 . I $O(OLDDXS("")) D
"RTN","ECEFPAT",168,0)
 . . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,38,0),U,2)
"RTN","ECEFPAT",169,0)
 . . S DIC="^ECH("_DA(1)_","_"""DX"""_",",ECX=0
"RTN","ECEFPAT",170,0)
 . . F  S ECX=$O(OLDDXS(ECX)) Q:'ECX  I ECX>0 K DD,DO S X=ECX D FILE^DICN
"RTN","ECEFPAT",171,0)
 . K DIC,DA,DD,DO,OLDMOD,OLDDXS,ECX
"RTN","ECEFPAT",172,0)
 S DA=ECFN,DIK="^ECH(" D ^DIK K DA,DIK
"RTN","ECEFPAT",173,0)
 D TABLE("D",ECFN) ;134 Delete record from table
"RTN","ECEFPAT",174,0)
 Q
"RTN","ECEFPAT",175,0)
MSG ;Record not filed
"RTN","ECEFPAT",176,0)
 S ^TMP($J,"ECMSG",1)="0^Record not Filed"
"RTN","ECEFPAT",177,0)
 Q
"RTN","ECEFPAT",178,0)
CHKDT(FLG) ;Required Data Check
"RTN","ECEFPAT",179,0)
 N I,C
"RTN","ECEFPAT",180,0)
 S C=1
"RTN","ECEFPAT",181,0)
 I FLG=1 D  Q
"RTN","ECEFPAT",182,0)
 .F I="ECD","ECC","ECL","ECDT","ECP","ECDFN","ECMN","ECDUZ","ECPTSTAT" D
"RTN","ECEFPAT",183,0)
 ..I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECEFPAT",184,0)
 .I $G(ECDEL),$D(ECIEN) K ^TMP($J,"ECMSG") S ECERR=0
"RTN","ECEFPAT",185,0)
 ;check PCE data
"RTN","ECEFPAT",186,0)
 I FLG=2 D  Q
"RTN","ECEFPAT",187,0)
 .F I="EC4","ECDX" D  Q
"RTN","ECEFPAT",188,0)
 ..I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key PCE data missing "_I,C=C+1,ECERR=1
"RTN","ECEFPAT",189,0)
 Q
"RTN","ECEFPAT",190,0)
VALDATA ;validate data
"RTN","ECEFPAT",191,0)
 N ECRRX
"RTN","ECEFPAT",192,0)
 D CHK^DIE(721,1,,"`"_ECDFN,.ECRRX) I ECRRX'=ECDFN D  Q
"RTN","ECEFPAT",193,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Patient"
"RTN","ECEFPAT",194,0)
 D CHK^DIE(721,2,,ECDT,.ECRRX) I ECRRX'=ECDT D  Q
"RTN","ECEFPAT",195,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure Date"
"RTN","ECEFPAT",196,0)
 D CHK^DIE(721,3,,"`"_ECL,.ECRRX) I ECRRX'=ECL D  Q
"RTN","ECEFPAT",197,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Location"
"RTN","ECEFPAT",198,0)
 D CHK^DIE(721,6,,"`"_ECD,.ECRRX) I ECRRX'=ECD D  Q
"RTN","ECEFPAT",199,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid DSS Unit"
"RTN","ECEFPAT",200,0)
 D CHK^DIE(721,7,,"`"_ECC,.ECRRX) I ECRRX'=ECC D  Q
"RTN","ECEFPAT",201,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Category"
"RTN","ECEFPAT",202,0)
 D  I ECERR Q
"RTN","ECEFPAT",203,0)
 .I ECP["ICPT" S ECRRX=$$CPT^ICPTCOD(+ECP,ECDT) I +ECRRX>0,$P(ECRRX,U,7) Q
"RTN","ECEFPAT",204,0)
 .I ECP["EC",$D(^EC(725,+ECP,0)) Q
"RTN","ECEFPAT",205,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure"
"RTN","ECEFPAT",206,0)
 D CHK^DIE(721,11,,"`"_ECMN,.ECRRX) I ECRRX'=ECMN D  Q
"RTN","ECEFPAT",207,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Ordering Section"
"RTN","ECEFPAT",208,0)
 D CHK^DIE(721,20,,"`"_ECDX,.ECRRX) I ECRRX'=ECDX D  Q
"RTN","ECEFPAT",209,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Primary Diagnosis"
"RTN","ECEFPAT",210,0)
 I $G(EC4)'="" D CHK^DIE(721,26,,"`"_EC4,.ECRRX) I ECRRX'=EC4 D  Q
"RTN","ECEFPAT",211,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Associated Clinic"
"RTN","ECEFPAT",212,0)
 Q
"RTN","ECEFPAT",213,0)
 ;
"RTN","ECEFPAT",214,0)
CVTREAS ;119 Section added to convert procedure reason IEN in 720.4 to EC Code Screen/Procedure reason link in file 720.5.
"RTN","ECEFPAT",215,0)
 N SCREEN,SCREENID,I
"RTN","ECEFPAT",216,0)
 S SCREEN=ECL_"-"_ECD_"-"_+$G(ECC,0)_"-"_ECP ;creates event code screen
"RTN","ECEFPAT",217,0)
 S SCREENID=$O(^ECJ("B",SCREEN,0)) I '+SCREENID S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Event Code Screen" Q  ;event code screen doesn't exist
"RTN","ECEFPAT",218,0)
 F I="ECPXREAS","ECPXREA2","ECPXREA3" I $G(@I) S @I=$$GETVAL(SCREENID,@I)
"RTN","ECEFPAT",219,0)
 Q
"RTN","ECEFPAT",220,0)
GETVAL(SCREENO,REASNO) ;119 section added to get link from 720.5 or add it if necessary
"RTN","ECEFPAT",221,0)
 N LINK,DIC,X,Y
"RTN","ECEFPAT",222,0)
 S LINK=$O(^ECL("AD",SCREENO,REASNO,0))
"RTN","ECEFPAT",223,0)
 I $G(LINK) Q LINK  ;Entry in 720.5 exists, return IEN
"RTN","ECEFPAT",224,0)
 S DIC="^ECL(",DIC(0)="",X=REASNO,DIC("DR")=".02////"_SCREENO
"RTN","ECEFPAT",225,0)
 K DD,DO D FILE^DICN
"RTN","ECEFPAT",226,0)
 S LINK=$S(+Y:+Y,1:"") ;New IEN or null if not added
"RTN","ECEFPAT",227,0)
 Q LINK
"RTN","ECEFPAT",228,0)
 ;
"RTN","ECEFPAT",229,0)
TABLE(OPTION,RECNO) ;134 Section added to add/delete state home records from XTMP table.
"RTN","ECEFPAT",230,0)
 I '$$PATCH^XPDUTL("ECX*3.0*166") Q  ;Don't start table maintenance until related patch in DSS is installed.
"RTN","ECEFPAT",231,0)
 I $G(OPTION)=""!($G(RECNO)="") Q  
"RTN","ECEFPAT",232,0)
 I $G(OPTION)="A" S ^XTMP("ECEFPAT",RECNO)="" ;add to table
"RTN","ECEFPAT",233,0)
 I $G(OPTION)="D" K ^XTMP("ECEFPAT",RECNO) ;delete from table
"RTN","ECEFPAT",234,0)
 S ^XTMP("ECEFPAT",0)=$$FMADD^XLFDT($$DT^XLFDT,180)_"^"_$$DT^XLFDT_"^"_"Event capture state home records"
"RTN","ECEFPAT",235,0)
 Q
"RTN","ECFLRPC")
0^5^B3855358^B3471271
"RTN","ECFLRPC",1,0)
ECFLRPC ;ALB/JAM-Event Capture Filer RPC ;10/17/16  12:56
"RTN","ECFLRPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,101,134**;8 May 96;Build 12
"RTN","ECFLRPC",3,0)
 ;
"RTN","ECFLRPC",4,0)
FILE(RESULTS,ECARY) ;Broker entry point to file data in Event Capture files
"RTN","ECFLRPC",5,0)
 ;This RPC is called when filing any data for ECS.
"RTN","ECFLRPC",6,0)
 ;        RPC: EC FILER
"RTN","ECFLRPC",7,0)
 ;INPUTS  ECARY    - array with data to be filed
"RTN","ECFLRPC",8,0)
 ;         ECARY("ECFILE")=file #
"RTN","ECFLRPC",9,0)
 ;         ECARY(sub)=data ;data relevant to file
"RTN","ECFLRPC",10,0)
 ;
"RTN","ECFLRPC",11,0)
 ;OUTPUTS RESULTS  - Success or failure to file
"RTN","ECFLRPC",12,0)
 ;
"RTN","ECFLRPC",13,0)
 D SETENV^ECUMRPC
"RTN","ECFLRPC",14,0)
 D PARSE
"RTN","ECFLRPC",15,0)
 K ^TMP($J,"ECMSG")
"RTN","ECFLRPC",16,0)
 I $G(ECFILE)="" S ^TMP($J,"ECMSG",1)="0^File Not defined" D END Q
"RTN","ECFLRPC",17,0)
 I ECFILE=721 D ^ECEFPAT,END Q          ; Event Capture Patient File
"RTN","ECFLRPC",18,0)
 ;134 added call to file users in file 722
"RTN","ECFLRPC",19,0)
 I ECFILE=722 D ^ECPRVDR,END Q          ; Event Capture Provider File
"RTN","ECFLRPC",20,0)
 I ECFILE=724 D ^ECMFDSSU,END Q         ; DSS Unit
"RTN","ECFLRPC",21,0)
 I ECFILE=720.3 D ^ECMFECS,END Q        ; EC Event Code Screens
"RTN","ECFLRPC",22,0)
 I ECFILE=720.4 D REASON^ECMFECS,END Q  ;Event Code Reasons
"RTN","ECFLRPC",23,0)
 I ECFILE=725 D ^ECMFLPX,END Q        ; EC Local Procedure
"RTN","ECFLRPC",24,0)
 I ECFILE=726 D ^ECMFCAT,END Q        ; Event Capture Category
"RTN","ECFLRPC",25,0)
 I ECFILE=4 D ^ECMFLOC,END Q          ; Event Capture Locations
"RTN","ECFLRPC",26,0)
 I ECFILE=200 D USER^ECMFDSSU,END Q   ; Allocate/Deallocate users to Unit
"RTN","ECFLRPC",27,0)
 I ECFILE="200A" D DSSU^ECMFDSSU,END Q  ; Allocate/Deallocate Unts to usr
"RTN","ECFLRPC",28,0)
 ;I ECFILE=8989.5 D HFS^ECMFLOC,END Q    ; Update HFS directory
"RTN","ECFLRPC",29,0)
 S ^TMP($J,"ECMSG",1)="0^Filer Not Available"
"RTN","ECFLRPC",30,0)
 ;
"RTN","ECFLRPC",31,0)
END ;
"RTN","ECFLRPC",32,0)
 D KILLVAR
"RTN","ECFLRPC",33,0)
 S RESULTS=$NA(^TMP($J,"ECMSG"))
"RTN","ECFLRPC",34,0)
 Q
"RTN","ECFLRPC",35,0)
 ;
"RTN","ECFLRPC",36,0)
PARSE ;Parse data from array for filing
"RTN","ECFLRPC",37,0)
 N SUB
"RTN","ECFLRPC",38,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  S @SUB=ECARY(SUB)
"RTN","ECFLRPC",39,0)
 Q
"RTN","ECFLRPC",40,0)
KILLVAR ;Kill variables
"RTN","ECFLRPC",41,0)
 N SUB
"RTN","ECFLRPC",42,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  K @SUB
"RTN","ECFLRPC",43,0)
 K ECARY,ECIEN
"RTN","ECFLRPC",44,0)
 Q
"RTN","ECMFLPX")
0^12^B7063470^B6748410
"RTN","ECMFLPX",1,0)
ECMFLPX ;ALB/JAM-Event Capture Management Local Procedure Filer ;12/5/16  15:42
"RTN","ECMFLPX",2,0)
 ;;2.0;EVENT CAPTURE;**25,87,134**;8 May 96;Build 12
"RTN","ECMFLPX",3,0)
 ;
"RTN","ECMFLPX",4,0)
FILE ;Used by the RPC broker to file local procedures in #725
"RTN","ECMFLPX",5,0)
 ;     Variables passed in
"RTN","ECMFLPX",6,0)
 ;       ECIEN  - IEN of #725, if editing
"RTN","ECMFLPX",7,0)
 ;       ECPN   - Local Procedure Name
"RTN","ECMFLPX",8,0)
 ;       ECNA   - National Number
"RTN","ECMFLPX",9,0)
 ;       ECST   - Active/Inactive Status
"RTN","ECMFLPX",10,0)
 ;       ECSYN  - Synonym
"RTN","ECMFLPX",11,0)
 ;       ECPT   - CPT Code
"RTN","ECMFLPX",12,0)
 ;
"RTN","ECMFLPX",13,0)
 ;     Variable return
"RTN","ECMFLPX",14,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #725^Message
"RTN","ECMFLPX",15,0)
 ;
"RTN","ECMFLPX",16,0)
 N ECFLG,ECERR,ERR,ECOST,ECDAT,ONM,ONA,ECRES
"RTN","ECMFLPX",17,0)
 S ECERR=0 D CHKDT I ECERR Q
"RTN","ECMFLPX",18,0)
 S ECIEN=$G(ECIEN),ECFLG=1
"RTN","ECMFLPX",19,0)
 I $L(ECNA)'=5 D  Q
"RTN","ECMFLPX",20,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure Number"
"RTN","ECMFLPX",21,0)
 I $G(ECPT)'="",$G(ECPT)'="@" D  I ECERR Q  ;134 allow "@" so value can be deleted
"RTN","ECMFLPX",22,0)
 .D CHK^DIE(725,4,,ECPT,.ECRES) I +ECRES<1 D  Q
"RTN","ECMFLPX",23,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid CPT Code"
"RTN","ECMFLPX",24,0)
 I ECIEN'="" S ECFLG=0 D  I ECERR Q
"RTN","ECMFLPX",25,0)
 .I '$D(^EC(725,ECIEN,0)) D  Q
"RTN","ECMFLPX",26,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^Local Procedure Not on File" Q
"RTN","ECMFLPX",27,0)
 .I ECIEN<90001 D  Q
"RTN","ECMFLPX",28,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^National Procedure cant be changed"
"RTN","ECMFLPX",29,0)
 .S ECDAT=$G(^EC(725,ECIEN,0)),ONM=$P(ECDAT,U),ONA=$P(ECDAT,U,2)
"RTN","ECMFLPX",30,0)
 S ERR=0 D PXCHK^ECUMRPC1(.ERR,ECPN_"^"_ECNA) D  I ECERR Q
"RTN","ECMFLPX",31,0)
 .I +ERR,(ECIEN="")!(ECIEN&($G(ONM)'=ECPN)) D  Q
"RTN","ECMFLPX",32,0)
 ..S ^TMP($J,"ECMSG",1)="0^Procedure description already exist",ECERR=1
"RTN","ECMFLPX",33,0)
 .I +$P(ERR,U,2),(ECIEN="")!(ECIEN&($G(ONA)'=ECNA)) D
"RTN","ECMFLPX",34,0)
 ..S ^TMP($J,"ECMSG",1)="0^Procedure number already exist",ECERR=1
"RTN","ECMFLPX",35,0)
 I ECIEN="" D  I ECERR Q
"RTN","ECMFLPX",36,0)
 . D NEWIEN
"RTN","ECMFLPX",37,0)
 K DA,DR,DIE
"RTN","ECMFLPX",38,0)
 S DIE="^EC(725,",DA=ECIEN
"RTN","ECMFLPX",39,0)
 S ECOST=$P($G(^EC(725,ECIEN,0)),U,3),ECOST=$S(ECOST'="":"I",1:"A")
"RTN","ECMFLPX",40,0)
 S DR=".01////"_ECPN_";1////"_ECNA_";3////"_$G(ECSYN)_";4////"_$G(ECPT)
"RTN","ECMFLPX",41,0)
 I $G(ECST)'="","^I^A^"[ECST,ECST'=ECOST D
"RTN","ECMFLPX",42,0)
 .S DR=DR_";2////"_$S(ECST="I":DT,1:"@")
"RTN","ECMFLPX",43,0)
 D ^DIE I $D(DTOUT) D RECDEL D  Q
"RTN","ECMFLPX",44,0)
 . S ^TMP($J,"ECMSG",1)="0^Record not Filed"
"RTN","ECMFLPX",45,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN
"RTN","ECMFLPX",46,0)
 Q
"RTN","ECMFLPX",47,0)
 ;
"RTN","ECMFLPX",48,0)
RECDEL ; Delete record
"RTN","ECMFLPX",49,0)
 I ECFLG S DA=ECIEN,DIK="^EC(725," D ^DIK K DA,DIK
"RTN","ECMFLPX",50,0)
 Q
"RTN","ECMFLPX",51,0)
 ;
"RTN","ECMFLPX",52,0)
NEWIEN ;Create new IEN in file #725
"RTN","ECMFLPX",53,0)
 N DIC,DA,DD,DO
"RTN","ECMFLPX",54,0)
 L +^EC(725)
"RTN","ECMFLPX",55,0)
 S ECIEN=$O(^EC(725,"A"),-1)
"RTN","ECMFLPX",56,0)
 F  S ECIEN=ECIEN+1 Q:'$D(^EC(725,ECIEN))
"RTN","ECMFLPX",57,0)
 I ECIEN<90001 S ECIEN=90001
"RTN","ECMFLPX",58,0)
 S $P(^EC(725,0),U,3)=ECIEN,$P(^EC(725,0),U,4)=$P(^EC(725,0),U,4)+1
"RTN","ECMFLPX",59,0)
 L -^EC(725)
"RTN","ECMFLPX",60,0)
 Q
"RTN","ECMFLPX",61,0)
 ;
"RTN","ECMFLPX",62,0)
CHKDT ;Required Data Check
"RTN","ECMFLPX",63,0)
 N I,C
"RTN","ECMFLPX",64,0)
 S C=1
"RTN","ECMFLPX",65,0)
 F I="ECPN","ECNA" D
"RTN","ECMFLPX",66,0)
 .I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECMFLPX",67,0)
 Q
"RTN","ECPAT")
0^2^B55958670^B50231689
"RTN","ECPAT",1,0)
ECPAT ;BIR/MAM,JPW - Event Capture Patient Summary ;9/22/16  13:32
"RTN","ECPAT",2,0)
 ;;2.0;EVENT CAPTURE;**5,18,47,72,95,112,119,131,134**;8 May 96;Build 12
"RTN","ECPAT",3,0)
SET ; set ^TMP($J,"ECPAT")
"RTN","ECPAT",4,0)
 N ECPXD,EC725
"RTN","ECPAT",5,0)
 I $G(ECPTYP)'="E" I $Y+11>IOSL D PAGE I ECOUT Q  ;119
"RTN","ECPAT",6,0)
 S ECEC=$G(^ECH(ECFN,0))
"RTN","ECPAT",7,0)
 S ECL=+$P(ECEC,"^",4),ECC=+$P(ECEC,"^",8),ECP=$P(ECEC,"^",9),ECD=+$P(ECEC,"^",7),ECV=+$P(ECEC,"^",10)
"RTN","ECPAT",8,0)
 S ECU=$$GETPPRV^ECPRVMUT(ECFN,.ECUN),ECUN=$S(ECU:"UNKNOWN",1:$P(ECUN,"^",2))
"RTN","ECPAT",9,0)
 Q:ECP']""
"RTN","ECPAT",10,0)
 ;set default med spec and ord sect to administrative if blank
"RTN","ECPAT",11,0)
 S ECM=$S($P(ECEC,"^",6)]"":+$P(ECEC,"^",6),1:108),ECO=$S($P(ECEC,"^",12)]"":+$P(ECEC,"^",12),1:108)
"RTN","ECPAT",12,0)
 S ECMN=$S($P($G(^ECC(723,ECM,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",13,0)
 S ECON=$S($P($G(^ECC(723,ECO,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",14,0)
 S ECS=+$P(ECEC,"^",5),ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",15,0)
 S ECCN=$S($P($G(^EC(726,ECC,0)),"^")]"":$P(^(0),"^"),1:"None")
"RTN","ECPAT",16,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECPAT",17,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2)
"RTN","ECPAT",18,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,1:725)
"RTN","ECPAT",19,0)
 S ECCPT=$S(ECFILE=81:+ECP,1:$P($G(^EC(725,+ECP,0)),"^",5)),ECPXD=""
"RTN","ECPAT",20,0)
 I ECCPT'="" D
"RTN","ECPAT",21,0)
 . S ECPXD=$$CPT^ICPTCOD(ECCPT,$P(ECEC,"^",3)),ECCPT=$P(ECPXD,"^",2)
"RTN","ECPAT",22,0)
 . I ECCPT'="" S ECCPT=ECCPT_" "
"RTN","ECPAT",23,0)
 I ECFILE=81 S ECPN=$S($P(ECPXD,"^",3)]"":$P(ECPXD,"^",3),1:"UNKNOWN")
"RTN","ECPAT",24,0)
 I ECFILE=725 D
"RTN","ECPAT",25,0)
 .S EC725=$G(^EC(725,+ECP,0)),ECPN=$P(EC725,"^",2)_" "_$P(EC725,"^")
"RTN","ECPAT",26,0)
 S ECEPN=$S(ECFILE=81:ECPN,1:$P(EC725,U))_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"") ;119 Set export version of procedure name
"RTN","ECPAT",27,0)
 S ECPN=$J(ECCPT,6)_$E(ECPN,1,38)_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"")
"RTN","ECPAT",28,0)
 S ECDN=$S($P($G(^ECD(ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",29,0)
 S ECLN=$S($P($G(^DIC(4,ECL,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",30,0)
 S ECUN=$S(ECUN'="UNKNOWN":$P(ECUN,",",2)_" "_$P(ECUN,","),1:"UNKNOWN")
"RTN","ECPAT",31,0)
 S ECDT=$$FMTE^XLFDT(DATE)
"RTN","ECPAT",32,0)
 ;
"RTN","ECPAT",33,0)
 ;ALB/ESD - Add Procedure Reason to report
"RTN","ECPAT",34,0)
 N ECLNK,ECRAR ;112,119
"RTN","ECPAT",35,0)
 D GETS^DIQ(721,ECFN,"26;34;43;44","IE","ECRAR") ;112,134 Get associated clinics and reasons
"RTN","ECPAT",36,0)
 S ECPRSN=$G(ECRAR(721,ECFN_",",34,"E")) S:ECPRSN="" ECPRSN="REASON NOT DEFINED" ;112,134
"RTN","ECPAT",37,0)
 S ECPRSN2=$G(ECRAR(721,ECFN_",",43,"E")) ;112,134
"RTN","ECPAT",38,0)
 S ECPRSN3=$G(ECRAR(721,ECFN_",",44,"E")) ;112,134
"RTN","ECPAT",39,0)
 S ECACLN=$G(ECRAR(721,ECFN_",",26,"E")) ;134
"RTN","ECPAT",40,0)
 S CLNODE=$G(^ECX(728.44,+$G(ECRAR(721,ECFN_",",26,"I")),0)) ;134
"RTN","ECPAT",41,0)
 ;
"RTN","ECPAT",42,0)
 ;Get Procedure CPT modifiers
"RTN","ECPAT",43,0)
 I $G(ECPTYP)="E" Q  ;119 Don't need modifiers for exportable version
"RTN","ECPAT",44,0)
 S ECMODF=0 K ECMOD
"RTN","ECPAT",45,0)
 I $O(^ECH(ECFN,"MOD",0))'="" S ECMODF=$$MOD^ECUTL(ECFN,"E",.ECMOD)
"RTN","ECPAT",46,0)
 I $D(ECY) DO
"RTN","ECPAT",47,0)
 .W !!,ECDT,?32,ECCN,?87,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",48,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",49,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",50,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?91,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",51,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECSN,?87,ECMN,! ;112,131
"RTN","ECPAT",52,0)
 .I '$D(ECRY) W ?32,ECON,?87,ECUN ;119
"RTN","ECPAT",53,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",54,0)
 ..W ECPRSN,?32,ECON,?87,ECUN ;112
"RTN","ECPAT",55,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",56,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",57,0)
 I $D(ECN) DO
"RTN","ECPAT",58,0)
 .W !!,ECDT,?32,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",59,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",60,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",61,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?36,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",62,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECACLN,?64,$P(CLNODE,U,2),?70,$P(CLNODE,U,3),?78,$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U),!,?32,ECSN,?87,ECMN,! ;112,131,134
"RTN","ECPAT",63,0)
 .I '$D(ECRY) W ?32,ECON,?87,ECUN ;119
"RTN","ECPAT",64,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",65,0)
 ..W ECPRSN,?32,ECON,?87,ECUN ;112
"RTN","ECPAT",66,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",67,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",68,0)
 Q
"RTN","ECPAT",69,0)
PAT ; entry point
"RTN","ECPAT",70,0)
 K DIC S DIC=2,DIC(0)="QEAMZ",DIC("A")="Select Patient: " D ^DIC K DIC G:Y<0 END S ECDFN=+Y,ECPAT=$P(Y,"^",2)
"RTN","ECPAT",71,0)
DATE K %DT S %DT="AEX",%DT("A")="Start with Date:  " D ^%DT G:Y<0 END S ECSD=Y,%DT("A")="End with Date:  " D ^%DT G:Y<0 END S ECED=Y I ECED<ECSD W !,"End date must be after start date",! G DATE
"RTN","ECPAT",72,0)
 S ECDATE=$$FMTE^XLFDT(ECSD)_"^"_$$FMTE^XLFDT(ECED),ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECPAT",73,0)
 D REASON^ECRUTL ;* Prompt to report Procedure Reasons
"RTN","ECPAT",74,0)
 K IOP,%ZIS,POP,IO("Q") S %ZIS("A")="Select Device: ",%ZIS="QM" W !!,"This report is designed to use a 132 column format.",! D ^%ZIS G:POP END
"RTN","ECPAT",75,0)
 I $D(IO("Q")) S:$D(ECRY) ZTSAVE("ECRY")=""
"RTN","ECPAT",76,0)
 I $D(IO("Q")) K IO("Q") S (ZTSAVE("ECDFN"),ZTSAVE("ECPAT"),ZTSAVE("ECDATE"),ZTSAVE("ECED"),ZTSAVE("ECSD"))="",ZTDESC="EVENT CAPTURE PATIENT SUMMARY",ZTRTN="SUM^ECPAT",ZTIO=ION D ^%ZTLOAD,HOME^%ZIS G END
"RTN","ECPAT",77,0)
SUM ; entry when queued
"RTN","ECPAT",78,0)
 N ECPRSN,ECPRSN2,ECPRSN3,%H,ECACLN,CLNODE ;112,119,134
"RTN","ECPAT",79,0)
 I $G(ECPTYP)="E" D EXPORT,^ECKILL Q  ;119
"RTN","ECPAT",80,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECPAT",81,0)
 U IO S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE W:$Y @IOF W !!,"No Data for "_ECPAT_" during the time selected." G END
"RTN","ECPAT",82,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",83,0)
 S DATE=ECSD,(ECFN,ECOUT)=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)!(ECOUT)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN!(ECOUT)  D SET
"RTN","ECPAT",84,0)
 D FOOTER  ;for last page
"RTN","ECPAT",85,0)
END I $D(ECGUI) D ^ECKILL Q
"RTN","ECPAT",86,0)
 W ! I $D(ECOUT),'ECOUT D
"RTN","ECPAT",87,0)
 . I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue  " R X:DTIME
"RTN","ECPAT",88,0)
 W @IOF D ^%ZISC D ^ECKILL S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECPAT",89,0)
 Q
"RTN","ECPAT",90,0)
HDR ; print heading
"RTN","ECPAT",91,0)
 ;
"RTN","ECPAT",92,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",93,0)
 W:$Y @IOF
"RTN","ECPAT",94,0)
 W !,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?32,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?32,"Run Date : ",ECRDT
"RTN","ECPAT",95,0)
 W !,"PROCEDURE DATE/TIME",?32,"CATEGORY",?87,"PROCEDURE",!,?87,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)",!,?32,"SERVICE",?87,"SECTION" ;112,131
"RTN","ECPAT",96,0)
 W !
"RTN","ECPAT",97,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",98,0)
 W ?32,"ORDERING SECTION",?87,"PROVIDER",! F LINE=1:1:132 W "-" ;112
"RTN","ECPAT",99,0)
 W !
"RTN","ECPAT",100,0)
 Q
"RTN","ECPAT",101,0)
PAGE ; end of page
"RTN","ECPAT",102,0)
 I $G(X)'["?" D FOOTER
"RTN","ECPAT",103,0)
 S X="" I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue, or ^ to quit   " R X:DTIME I '$T!(X="^") S ECOUT=1 Q
"RTN","ECPAT",104,0)
 I X["?" W !!,"If you want to continue with this report, press <RET>.  Entering an ^ will",!,"exit you from this option." G PAGE
"RTN","ECPAT",105,0)
 D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",106,0)
 Q
"RTN","ECPAT",107,0)
HDR1 ; print heading without categories
"RTN","ECPAT",108,0)
 ;
"RTN","ECPAT",109,0)
 ;ALB/ESD - Add Run Date to header
"RTN","ECPAT",110,0)
 W @IOF,!!,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?36,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?36,"Run Date : ",ECRDT
"RTN","ECPAT",111,0)
 ;
"RTN","ECPAT",112,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",113,0)
 W !!,"PROCEDURE DATE/TIME",?32,"PROCEDURE(VOLUME)",!,?32,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)" ;112,131,134
"RTN","ECPAT",114,0)
 W !,?32,"CLINIC",?64,"STOP",?70,"CREDIT",?78,"CHAR4",!,?32,"SERVICE",?87,"SECTION" ;112,131,134
"RTN","ECPAT",115,0)
 W !
"RTN","ECPAT",116,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",117,0)
 W ?32,"ORDERING SECTION",?87,"PROVIDER",! F LINE=1:1:132 W "-" ;112
"RTN","ECPAT",118,0)
 W !
"RTN","ECPAT",119,0)
 Q
"RTN","ECPAT",120,0)
 ;
"RTN","ECPAT",121,0)
FOOTER ;print page footer
"RTN","ECPAT",122,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECPAT",123,0)
 W !?4,"and/or a combination of these."
"RTN","ECPAT",124,0)
 Q
"RTN","ECPAT",125,0)
 ;
"RTN","ECPAT",126,0)
BRO ;ask prt with category or without
"RTN","ECPAT",127,0)
 S ECN=1
"RTN","ECPAT",128,0)
 Q
"RTN","ECPAT",129,0)
 ;
"RTN","ECPAT",130,0)
EXPORT ;Section added in 119
"RTN","ECPAT",131,0)
 N DATE,CNT,ECEPN
"RTN","ECPAT",132,0)
 S CNT=1
"RTN","ECPAT",133,0)
 S ^TMP($J,"ECRPT",CNT)="PATIENT NAME^SSN^PROCEDURE DATE/TIME^LOCATION^DSS UNIT IEN^DSS UNIT NAME^CLINIC^STOP CODE^CREDIT STOP^CHAR4" ;131,134
"RTN","ECPAT",134,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"^CPT CODE^PROCEDURE CODE^PROCEDURE NAME^VOLUME^"_$S($D(ECRY):"REASON #1^REASON #2^REASON #3^",1:"")_"SERVICE^SECTION^ORDERING SECTION^PROVIDER" ;131,134
"RTN","ECPAT",135,0)
 S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE Q
"RTN","ECPAT",136,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO
"RTN","ECPAT",137,0)
 S DATE=ECSD,ECFN=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN  D
"RTN","ECPAT",138,0)
 .D SET
"RTN","ECPAT",139,0)
 .S CNT=CNT+1,^TMP($J,"ECRPT",CNT)=ECPAT_U_$E($$GET1^DIQ(2,(ECDFN_","),.09),6,9)_U_ECDT_U_ECLN_U_ECD_U_ECDN_U_ECACLN_U_$P(CLNODE,U,2)_U_$P(CLNODE,U,3)_U_$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U)_U_$E(ECCPT,1,5) ;131,134
"RTN","ECPAT",140,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$S(ECFILE=725:$P($G(^EC(725,+ECP,0)),U,2),1:"")_U_ECEPN_U_ECV_U_$S($D(ECRY):ECPRSN_U_ECPRSN2_U_ECPRSN3_U,1:"")_ECSN_U_ECMN_U_ECON_U_ECUN
"RTN","ECPRVDR")
0^6^B4628762^n/a
"RTN","ECPRVDR",1,0)
ECPRVDR ;ALB/DAN - Event Capture Providers ;11/7/16  15:29
"RTN","ECPRVDR",2,0)
 ;;2.0;EVENT CAPTURE;**134**;8 May 96;Build 12
"RTN","ECPRVDR",3,0)
 ;
"RTN","ECPRVDR",4,0)
FILE ;Used by RPC broker to file users into file #722
"RTN","ECPRVDR",5,0)
 ;     Variables passed in
"RTN","ECPRVDR",6,0)
 ;       ECD0...n -IEN of user to be added to file #722
"RTN","ECPRVDR",7,0)
 ;
"RTN","ECPRVDR",8,0)
 ;     Varibles returned
"RTN","ECPRVDR",9,0)
 ;       ^TMP($J,"ECMSG",1)=Success or failure of filing records
"RTN","ECPRVDR",10,0)
 ;
"RTN","ECPRVDR",11,0)
 N ECI,ECX,ECPRV,NODE,ECFDA,IEN,ECERR,ERR,RES
"RTN","ECPRVDR",12,0)
 S ERR=0
"RTN","ECPRVDR",13,0)
 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)!(ERR)  I @ECX'="" D
"RTN","ECPRVDR",14,0)
 .D CHK^DIE(722,.01,,"`"_@ECX,.RES) I $G(RES)="^" S ERR=1,^TMP($J,"ECMSG",1)="0^IEN of user doesn't exist in file 200" Q
"RTN","ECPRVDR",15,0)
 .S ECPRV(@ECX)="" ;Put IENs in array
"RTN","ECPRVDR",16,0)
 I ERR Q  ;Stop processing if a bad IEN has been passed in
"RTN","ECPRVDR",17,0)
 ;Delete all existing entries in file 722 before putting in new list
"RTN","ECPRVDR",18,0)
 S NODE=$G(^EC(722,0)) I NODE="" S ^TMP($J,"ECMSG",1)="0^File 722 doesn't exist" Q
"RTN","ECPRVDR",19,0)
 K ^EC(722) ;remove all entries and x-refs
"RTN","ECPRVDR",20,0)
 S ^EC(722,0)=NODE,$P(^EC(722,0),U,3,99)="" ;reset 0 node and remove total records and last record used information
"RTN","ECPRVDR",21,0)
 ;Populate file with list of entries
"RTN","ECPRVDR",22,0)
 S IEN=0 F  S IEN=$O(ECPRV(IEN)) Q:'+IEN!(ERR)  D
"RTN","ECPRVDR",23,0)
 .S ECFDA(722,"+1,",.01)=IEN
"RTN","ECPRVDR",24,0)
 .D UPDATE^DIE("","ECFDA","","ECERR") ;Add entry to file 722
"RTN","ECPRVDR",25,0)
 .I $D(ECERR) S ^TMP($J,"ECMSG",1)="0^Unable to file IEN "_IEN_" into file" S ERR=1
"RTN","ECPRVDR",26,0)
 I 'ERR S ^TMP($J,"ECMSG",1)="1^File successfully updated"
"RTN","ECPRVDR",27,0)
 Q
"RTN","ECPRVDR",28,0)
 ;
"RTN","ECPRVDR",29,0)
LIST ;Return list of entries in file 722
"RTN","ECPRVDR",30,0)
 N I,NAM,IEN
"RTN","ECPRVDR",31,0)
 S I=0,NAME=""
"RTN","ECPRVDR",32,0)
 F  S NAME=$O(^EC(722,"AC",NAME)) Q:NAME=""  S IEN=0 F  S IEN=$O(^EC(722,"AC",NAME,IEN)) Q:'+IEN  D
"RTN","ECPRVDR",33,0)
 .I '$$ACTIVE^XUSER(IEN) Q  ;Don't include inactive users on the list.
"RTN","ECPRVDR",34,0)
 .S I=I+1,^TMP($J,"ECFIND",I)=NAME_"^"_IEN
"RTN","ECPRVDR",35,0)
 Q
"RTN","ECRDSSA")
0^3^B135329801^B124134262
"RTN","ECRDSSA",1,0)
ECRDSSA ;ALB/RPM - DSS Unit Activity Report ;9/23/16  15:14
"RTN","ECRDSSA",2,0)
 ;;2.0;EVENT CAPTURE;**95,104,112,119,126,131,134**;8 May 96;Build 12
"RTN","ECRDSSA",3,0)
 ;
"RTN","ECRDSSA",4,0)
EN ;Get location(s), DSS Unit(s), sort type, start & end dates, device
"RTN","ECRDSSA",5,0)
 ;
"RTN","ECRDSSA",6,0)
 N ECLOC,ECDSSU,ECSORT,ECSTDT,ECENDDT ;112
"RTN","ECRDSSA",7,0)
 I '$$ASKLOC^ECRUTL G ENQ
"RTN","ECRDSSA",8,0)
 I '$$ASKDSS^ECRUTL G ENQ
"RTN","ECRDSSA",9,0)
 I '$$ASKSRT(.ECSORT) G ENQ
"RTN","ECRDSSA",10,0)
 I '$$STDT^ECRUTL G ENQ
"RTN","ECRDSSA",11,0)
 I '$$ENDDT^ECRUTL(ECSTDT) G ENQ
"RTN","ECRDSSA",12,0)
 I $$ASKDEV D STRPT^ECRDSSA
"RTN","ECRDSSA",13,0)
ENQ Q
"RTN","ECRDSSA",14,0)
 ;
"RTN","ECRDSSA",15,0)
STRPT ;Main entry point
"RTN","ECRDSSA",16,0)
 N ECCRT  ;is CRT?
"RTN","ECRDSSA",17,0)
 N ECPAGE  ;page cnt
"RTN","ECRDSSA",18,0)
 S ECPAGE=0
"RTN","ECRDSSA",19,0)
 S ECCRT=$S($E(IOST,1,2)="C-":1,1:0)
"RTN","ECRDSSA",20,0)
 I $G(ECPTYP)'="E" U IO ;119 open device if not exporting
"RTN","ECRDSSA",21,0)
 K ^TMP("ECRPT",$J)
"RTN","ECRDSSA",22,0)
 D FNDREC(ECSORT)
"RTN","ECRDSSA",23,0)
 D PRINT(ECSORT)
"RTN","ECRDSSA",24,0)
 K ^TMP("ECRPT",$J) D ^ECKILL ;119
"RTN","ECRDSSA",25,0)
 Q
"RTN","ECRDSSA",26,0)
 ;
"RTN","ECRDSSA",27,0)
FNDREC(ECSRT) ;Loop through "ADT" xref of EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",28,0)
 ;  Input:
"RTN","ECRDSSA",29,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",30,0)
 ;
"RTN","ECRDSSA",31,0)
 ;  Output: none
"RTN","ECRDSSA",32,0)
 ;
"RTN","ECRDSSA",33,0)
 N ECNT   ;record cnt
"RTN","ECRDSSA",34,0)
 N ECL     ;location cnt
"RTN","ECRDSSA",35,0)
 N ECD     ;DSS unit cnt
"RTN","ECRDSSA",36,0)
 N ECDFN   ;DFN
"RTN","ECRDSSA",37,0)
 N ECLOCF  ;Location IEN
"RTN","ECRDSSA",38,0)
 N ECDSSF  ;DSS unit IEN
"RTN","ECRDSSA",39,0)
 N ECDT    ;date index
"RTN","ECRDSSA",40,0)
 N ECREC   ;"0" node
"RTN","ECRDSSA",41,0)
 N ECIEN   ;IEN of file 721 ;patch 119
"RTN","ECRDSSA",42,0)
 S ECNT=0
"RTN","ECRDSSA",43,0)
 ;
"RTN","ECRDSSA",44,0)
 S ECL=0
"RTN","ECRDSSA",45,0)
 F  S ECL=$O(ECLOC(ECL)) Q:'ECL  S ECLOCF=+$P(ECLOC(ECL),U) D
"RTN","ECRDSSA",46,0)
 . S ^TMP("ECRPT",$J,ECLOCF)=0  ;initialize location counter
"RTN","ECRDSSA",47,0)
 . S ECD=0
"RTN","ECRDSSA",48,0)
 . F  S ECD=$O(ECDSSU(ECD)) Q:'ECD  S ECDSSF=+$P(ECDSSU(ECD),U) D
"RTN","ECRDSSA",49,0)
 . . S ^TMP("ECRPT",$J,ECLOCF,ECDSSF)=0  ;initialize DSS Unit counter
"RTN","ECRDSSA",50,0)
 . S ECDFN=0
"RTN","ECRDSSA",51,0)
 . F  S ECDFN=+$O(^ECH("ADT",ECLOCF,ECDFN)) Q:'ECDFN  D
"RTN","ECRDSSA",52,0)
 . . S ECD=0
"RTN","ECRDSSA",53,0)
 . . F  S ECD=$O(ECDSSU(ECD)) Q:'ECD  S ECDSSF=+$P(ECDSSU(ECD),U) D
"RTN","ECRDSSA",54,0)
 . . . S ECDT=ECSTDT
"RTN","ECRDSSA",55,0)
 . . . F  S ECDT=+$O(^ECH("ADT",ECLOCF,ECDFN,ECDSSF,ECDT)) Q:'ECDT!(ECDT>ECENDDT)  D
"RTN","ECRDSSA",56,0)
 . . . . S ECIEN=0
"RTN","ECRDSSA",57,0)
 . . . . F  S ECIEN=+$O(^ECH("ADT",ECLOCF,ECDFN,ECDSSF,ECDT,ECIEN)) Q:'ECIEN  D
"RTN","ECRDSSA",58,0)
 . . . . . I $P($G(^ECH(ECIEN,0)),U,7)=ECDSSF D BLDTMP(ECIEN,ECSRT,.ECNT)
"RTN","ECRDSSA",59,0)
 Q
"RTN","ECRDSSA",60,0)
 ;
"RTN","ECRDSSA",61,0)
BLDTMP(ECIEN,ECSRT,ECCNT) ;add record to list
"RTN","ECRDSSA",62,0)
 ;  Input:
"RTN","ECRDSSA",63,0)
 ;    ECIEN - pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",64,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",65,0)
 ;    ECCNT - record counter
"RTN","ECRDSSA",66,0)
 ;
"RTN","ECRDSSA",67,0)
 ;  Output:
"RTN","ECRDSSA",68,0)
 ;    ^TMP("ECRPT",$J,location,DSS unit,sort key1,sort key2,count)
"RTN","ECRDSSA",69,0)
 ;
"RTN","ECRDSSA",70,0)
 N ECLOCA  ;location
"RTN","ECRDSSA",71,0)
 N ECDSS  ;DSS unit
"RTN","ECRDSSA",72,0)
 N ECIENS  ;IENS
"RTN","ECRDSSA",73,0)
 N ECKEY  ;sort key array
"RTN","ECRDSSA",74,0)
 N ECREC  ;record string
"RTN","ECRDSSA",75,0)
 N ECERR  ;FM error
"RTN","ECRDSSA",76,0)
 N ECDT  ;date
"RTN","ECRDSSA",77,0)
 N CLNODE ;Clinic zero node from 728.44
"RTN","ECRDSSA",78,0)
 N ECACLN ;Clinic name
"RTN","ECRDSSA",79,0)
 I +$G(ECIEN)>0,$$GETKEYS(ECSRT,ECIEN,.ECKEY) D
"RTN","ECRDSSA",80,0)
 . S ECCNT=+$G(ECCNT)+1
"RTN","ECRDSSA",81,0)
 . S ECIENS=ECIEN_","
"RTN","ECRDSSA",82,0)
 . S ECREC=""
"RTN","ECRDSSA",83,0)
 . D GETS^DIQ(721,ECIENS,"1;2;3;6;7;8;9;10;20;26;29","IE","ECREC","ECERR") ;126 Added category (#7), 134 added Assoc. Clin (#26)
"RTN","ECRDSSA",84,0)
 . S ECACLN=$G(ECREC(721,ECIENS,26,"E")) ;134
"RTN","ECRDSSA",85,0)
 . S CLNODE=$G(^ECX(728.44,+$G(ECREC(721,ECIENS,26,"I")),0)) ;134
"RTN","ECRDSSA",86,0)
 . S ECLOCA=+$G(ECREC(721,ECIENS,3,"I"))
"RTN","ECRDSSA",87,0)
 . S ECDSS=+$G(ECREC(721,ECIENS,6,"I"))
"RTN","ECRDSSA",88,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,1,"E")),1,30)_"^"  ;pt name
"RTN","ECRDSSA",89,0)
 . S ECREC=ECREC_$E($$GETSSN(ECIEN),1,10)_"^"              ;ssn
"RTN","ECRDSSA",90,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,29,"I")),1)_"^"    ;in/out
"RTN","ECRDSSA",91,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,2,"I")),1,13)_"^"  ;dt/tm
"RTN","ECRDSSA",92,0)
 . S ECDT=$P($G(ECREC(721,ECIENS,2,"I")),".",1)
"RTN","ECRDSSA",93,0)
 . S ECREC=ECREC_$E($$GETPROC($G(ECREC(721,ECIENS,8,"I"))),1,5)_"^"   ;proc code
"RTN","ECRDSSA",94,0)
 . S ECREC=ECREC_$$GETPRNM($G(ECREC(721,ECIENS,8,"I")),ECDT)_"^"  ;126, get full proc name
"RTN","ECRDSSA",95,0)
 . S ECREC=ECREC_$$GETPSYN(ECLOCA,ECDSS,+$G(ECREC(721,ECIENS,7,"I")),$G(ECREC(721,ECIENS,8,"I")))_"^" ;126 Get procedure synonym
"RTN","ECRDSSA",96,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,9,"I")),1,2)_"^"   ;vol
"RTN","ECRDSSA",97,0)
 . S ECREC=ECREC_$E($$GETPROV(ECIEN),1,30)_"^"  ;provider
"RTN","ECRDSSA",98,0)
 . S ECREC=ECREC_$E($G(ECREC(721,ECIENS,20,"E")),1,8)_U      ;dx 131, allow more space,134 add trailing ^
"RTN","ECRDSSA",99,0)
 . S ECREC=ECREC_ECACLN_U_$P(CLNODE,U,2)_U_$P(CLNODE,U,3)_U_$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U) ;134
"RTN","ECRDSSA",100,0)
 . S ^TMP("ECRPT",$J,ECLOCA,ECDSS,ECKEY(1),ECKEY(2),ECNT)=ECREC
"RTN","ECRDSSA",101,0)
 . S ^TMP("ECRPT",$J,ECLOCA)=$G(^TMP("ECRPT",$J,ECLOCA))+1
"RTN","ECRDSSA",102,0)
 . S ^TMP("ECRPT",$J,ECLOCA,ECDSS)=$G(^TMP("ECRPT",$J,ECLOCA,ECDSS))+1
"RTN","ECRDSSA",103,0)
 Q
"RTN","ECRDSSA",104,0)
 ;
"RTN","ECRDSSA",105,0)
PRINT(ECSRT) ;loop results array and format output
"RTN","ECRDSSA",106,0)
 ;  Input:
"RTN","ECRDSSA",107,0)
 ;    ECSRT - sort type
"RTN","ECRDSSA",108,0)
 ;
"RTN","ECRDSSA",109,0)
 ;  Output: none
"RTN","ECRDSSA",110,0)
 ;
"RTN","ECRDSSA",111,0)
 N ECCLOC  ;current location
"RTN","ECRDSSA",112,0)
 N ECPLOC  ;previous location
"RTN","ECRDSSA",113,0)
 N ECLOCNM  ;location name
"RTN","ECRDSSA",114,0)
 N ECCDSS  ;current DSS unit
"RTN","ECRDSSA",115,0)
 N ECPDSS  ;previous DSS unit
"RTN","ECRDSSA",116,0)
 N ECDSSNM  ;DSS unit name
"RTN","ECRDSSA",117,0)
 N ECCNT   ;record count
"RTN","ECRDSSA",118,0)
 N ECDAT   ;procedure date/time
"RTN","ECRDSSA",119,0)
 N ECRDT   ;run date
"RTN","ECRDSSA",120,0)
 N ECFDT   ;from date
"RTN","ECRDSSA",121,0)
 N ECTDT   ;to date
"RTN","ECRDSSA",122,0)
 N ECKEY1  ;sort key 1
"RTN","ECRDSSA",123,0)
 N ECKEY2  ;sort key 2
"RTN","ECRDSSA",124,0)
 N ECSRTBY  ;sort type text
"RTN","ECRDSSA",125,0)
 N ECQUIT  ;user quit indicator
"RTN","ECRDSSA",126,0)
 N ECREC   ;tmp record data
"RTN","ECRDSSA",127,0)
 N CNT,PIECE ;119 array count for data, record piece
"RTN","ECRDSSA",128,0)
 I $G(ECPTYP)="E" D  ;134
"RTN","ECRDSSA",129,0)
 .S ^TMP($J,"ECRPT",1)="LOCATION^DSS UNIT (IEN #)^PATIENT^SSN^I/O^DATE/TIME^CLINIC^STOP CODE^CREDIT STOP^CHAR4" ;119,126,134
"RTN","ECRDSSA",130,0)
 .S ^TMP($J,"ECRPT",1)=^TMP($J,"ECRPT",1)_"^PROCEDURE CODE^PROCEDURE NAME^SYNONYM^VOLUME^PRIMARY PROVIDER^DIAGNOSIS",CNT=1 ;119,126,134 Export header
"RTN","ECRDSSA",131,0)
 I '$D(^TMP("ECRPT",$J)) G PRINTQ
"RTN","ECRDSSA",132,0)
 S ECRDT=$$FMTE^XLFDT($$NOW^XLFDT,"5DZ")
"RTN","ECRDSSA",133,0)
 S ECFDT=$$FMTE^XLFDT($P(ECSTDT+.0001,"."),"5DZ")
"RTN","ECRDSSA",134,0)
 S ECTDT=$$FMTE^XLFDT($P(ECENDDT,"."),"5DZ")
"RTN","ECRDSSA",135,0)
 S ECSRTBY=$S(ECSRT="P":"Patient Name",ECSRT="R":"Provider Name",ECSRT="S":"Patient SSN",1:"")
"RTN","ECRDSSA",136,0)
 S (ECCLOC,ECPLOC,ECQUIT)=0
"RTN","ECRDSSA",137,0)
 F  S ECCLOC=$O(^TMP("ECRPT",$J,ECCLOC)) Q:'ECCLOC!(ECQUIT)  D
"RTN","ECRDSSA",138,0)
 . I ECCLOC'=ECPLOC D  ;location changed
"RTN","ECRDSSA",139,0)
 . . S ECPLOC=ECCLOC
"RTN","ECRDSSA",140,0)
 . . S ECLOCNM=$$GETLOCN(ECCLOC,.ECLOC)
"RTN","ECRDSSA",141,0)
 . . I $G(ECPTYP)'="E" I $O(^TMP("ECRPT",$J,ECCLOC,0))>0 D:ECPAGE>0 PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY) ;119
"RTN","ECRDSSA",142,0)
 . I $G(ECPTYP)'="E" I $G(^TMP("ECRPT",$J,ECCLOC))=0 D  Q  ;119
"RTN","ECRDSSA",143,0)
 . . W !!,"    ** No records found on Location that match selection criteria"
"RTN","ECRDSSA",144,0)
 . S (ECCDSS,ECPDSS)=0
"RTN","ECRDSSA",145,0)
 . F  S ECCDSS=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS)) Q:'ECCDSS!(ECQUIT)  D
"RTN","ECRDSSA",146,0)
 . . I ECCDSS'=ECPDSS D  Q:ECQUIT  ;dss unit changed
"RTN","ECRDSSA",147,0)
 . . . S ECPDSS=ECCDSS
"RTN","ECRDSSA",148,0)
 . . . S ECDSSNM=$$GETDSSN(ECCDSS,.ECDSSU)
"RTN","ECRDSSA",149,0)
 . . . I $G(ECPTYP)'="E" I $Y>(IOSL-10) D PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY) ;119
"RTN","ECRDSSA",150,0)
 . . . I $G(ECPTYP)'="E" D DSSHDR(ECCDSS,ECDSSNM) ;119
"RTN","ECRDSSA",151,0)
 . . I $G(ECPTYP)'="E" I $G(^TMP("ECRPT",$J,ECCLOC,ECCDSS))=0 D  Q  ;119
"RTN","ECRDSSA",152,0)
 . . . W !,"** No records found on DSS Unit that match selection criteria"
"RTN","ECRDSSA",153,0)
 . . S ECKEY1=""
"RTN","ECRDSSA",154,0)
 . . F  S ECKEY1=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1)) Q:ECKEY1=""!(ECQUIT)  D
"RTN","ECRDSSA",155,0)
 . . . S ECKEY2=""
"RTN","ECRDSSA",156,0)
 . . . F  S ECKEY2=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2)) Q:ECKEY2=""!(ECQUIT)  D
"RTN","ECRDSSA",157,0)
 . . . . S ECCNT=0
"RTN","ECRDSSA",158,0)
 . . . . F  S ECCNT=$O(^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2,ECCNT)) Q:'ECCNT!(ECQUIT)  D
"RTN","ECRDSSA",159,0)
 . . . . . I $G(ECPTYP)'="E" I $Y>(IOSL-7) D PAUSE Q:ECQUIT  D HDR(ECLOCNM,ECRDT,ECFDT,ECTDT,ECSRTBY),DSSHDR(ECCDSS,ECDSSNM) W " (cont'd)" ;119
"RTN","ECRDSSA",160,0)
 . . . . . S ECREC=^TMP("ECRPT",$J,ECCLOC,ECCDSS,ECKEY1,ECKEY2,ECCNT)
"RTN","ECRDSSA",161,0)
 . . . . . I $G(ECPTYP)="E" S CNT=CNT+1 S ^TMP($J,"ECRPT",CNT)=ECLOCNM_U_ECDSSNM_"(IEN #"_ECCDSS_")" D  Q  ;119
"RTN","ECRDSSA",162,0)
 . . . . . . F PIECE=1:1:4,11:1:14,5:1:10 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$S(PIECE'=4:$P(ECREC,U,PIECE),1:$$FMTE^XLFDT($P(ECREC,U,PIECE),"2MZ")) ;119,126,134
"RTN","ECRDSSA",163,0)
 . . . . . W !,$P(ECREC,U,1)  ;name
"RTN","ECRDSSA",164,0)
 . . . . . W ?27,$P(ECREC,U,2)  ;126 ssn
"RTN","ECRDSSA",165,0)
 . . . . . W ?36,$P(ECREC,U,3)  ;126 inpt/outpt
"RTN","ECRDSSA",166,0)
 . . . . . S ECDAT=$$FMTE^XLFDT($P(ECREC,U,4),"2MZ")
"RTN","ECRDSSA",167,0)
 . . . . . W ?40,$P(ECDAT,":")_$P(ECDAT,":",2)  ;126 dt/tm
"RTN","ECRDSSA",168,0)
 . . . . . W ?54,$P(ECREC,U,5)  ;126 proc code
"RTN","ECRDSSA",169,0)
 . . . . . W ?60,$P(ECREC,U,6)  ;126 proc name
"RTN","ECRDSSA",170,0)
 . . . . . W ?112,$P(ECREC,U,8)  ;119,126 vol
"RTN","ECRDSSA",171,0)
 . . . . . W ?118,$P(ECREC,U,10)  ;126 dx
"RTN","ECRDSSA",172,0)
 . . . . . W !,?36,$P(ECREC,U,11) ;134 Clinic
"RTN","ECRDSSA",173,0)
 . . . . . W ?68,$P(ECREC,U,12) ;134 Stop Code
"RTN","ECRDSSA",174,0)
 . . . . . W ?74,$P(ECREC,U,13) ;134 Credit Stop Code
"RTN","ECRDSSA",175,0)
 . . . . . W ?82,$P(ECREC,U,14) ;134 CHAR4 code
"RTN","ECRDSSA",176,0)
 . . . . . W !?4,$P(ECREC,U,9) ;126 Provider
"RTN","ECRDSSA",177,0)
 . . . . . W ?60,$P(ECREC,U,7) ;126 Synonym
"RTN","ECRDSSA",178,0)
 I $G(ECPTYP)'="E" I 'ECQUIT D PAUSE ;119
"RTN","ECRDSSA",179,0)
PRINTQ Q
"RTN","ECRDSSA",180,0)
 ;
"RTN","ECRDSSA",181,0)
HDR(ECLOCN,ECRDT,ECFDT,ECTDT,ECSRT) ;Report header
"RTN","ECRDSSA",182,0)
 ;  Input:
"RTN","ECRDSSA",183,0)
 ;    ECLOCN - location name
"RTN","ECRDSSA",184,0)
 ;    ECRDT - run date
"RTN","ECRDSSA",185,0)
 ;    EDFDT - from date
"RTN","ECRDSSA",186,0)
 ;    EDTDT - to date
"RTN","ECRDSSA",187,0)
 ;    ECSRT - sort text
"RTN","ECRDSSA",188,0)
 ;
"RTN","ECRDSSA",189,0)
 ;  Output:  none
"RTN","ECRDSSA",190,0)
 ;
"RTN","ECRDSSA",191,0)
 I ECCRT!(ECPAGE) W @IOF
"RTN","ECRDSSA",192,0)
 S ECPAGE=ECPAGE+1
"RTN","ECRDSSA",193,0)
 W !,?11,"EVENT CAPTURE DSS UNIT ACTIVITY REPORT"
"RTN","ECRDSSA",194,0)
 W ?58,"Run Date: ",ECRDT
"RTN","ECRDSSA",195,0)
 W ?109,"Page: ",ECPAGE
"RTN","ECRDSSA",196,0)
 W !!,?13,"For Location ",ECLOCN
"RTN","ECRDSSA",197,0)
 W !,?13,"From "_ECFDT_" through "_ECTDT
"RTN","ECRDSSA",198,0)
 W !,?13,"Sorted by ",ECSRT
"RTN","ECRDSSA",199,0)
 W !!,"Patient",?27,"SSN",?36,"I/O",?40,"Date/Time",?54,"Procedure",?112,"Vol",?118,"Primary" ;126
"RTN","ECRDSSA",200,0)
 W !?54,"Code",?60,"Name",?118,"Diagnosis" ;126
"RTN","ECRDSSA",201,0)
 W !,?36,"CLINIC",?68,"STOP",?74,"CREDIT",?82,"CHAR4" ;134
"RTN","ECRDSSA",202,0)
 W !?4,"Primary Provider",?60,"Synonym",!,$$REPEAT^XLFSTR("-",132) ;126
"RTN","ECRDSSA",203,0)
 Q
"RTN","ECRDSSA",204,0)
 ;
"RTN","ECRDSSA",205,0)
DSSHDR(ECDSS,ECDSSNM) ;DSS header
"RTN","ECRDSSA",206,0)
 ;  Input:
"RTN","ECRDSSA",207,0)
 ;    ECDSS - DSS unit
"RTN","ECRDSSA",208,0)
 ;    ECDSSNM - DSS unit name
"RTN","ECRDSSA",209,0)
 ;
"RTN","ECRDSSA",210,0)
 ;  Output:  none
"RTN","ECRDSSA",211,0)
 ;
"RTN","ECRDSSA",212,0)
 W !!,"DSS Unit: ",ECDSSNM," (IEN #",ECDSS,")"
"RTN","ECRDSSA",213,0)
 Q
"RTN","ECRDSSA",214,0)
 ;
"RTN","ECRDSSA",215,0)
PAUSE ;page break
"RTN","ECRDSSA",216,0)
 N DIR,DIRUT,DUOUT
"RTN","ECRDSSA",217,0)
 D FOOTER
"RTN","ECRDSSA",218,0)
 Q:'ECCRT
"RTN","ECRDSSA",219,0)
 I IOSL<30 F  W ! Q:$Y>(IOSL-7)
"RTN","ECRDSSA",220,0)
 W !
"RTN","ECRDSSA",221,0)
 S DIR(0)="E"
"RTN","ECRDSSA",222,0)
 D ^DIR
"RTN","ECRDSSA",223,0)
 I $D(DIRUT)!($D(DUOUT)) S ECQUIT=1
"RTN","ECRDSSA",224,0)
 Q
"RTN","ECRDSSA",225,0)
 ;
"RTN","ECRDSSA",226,0)
FOOTER ;page footer
"RTN","ECRDSSA",227,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECRDSSA",228,0)
 W " and/or a combination of these.",! ;149,134
"RTN","ECRDSSA",229,0)
 Q
"RTN","ECRDSSA",230,0)
 ;
"RTN","ECRDSSA",231,0)
GETLOCN(ECLOCA,ECLOC) ;get location name
"RTN","ECRDSSA",232,0)
 ;  Input:
"RTN","ECRDSSA",233,0)
 ;    ECLOCA - location
"RTN","ECRDSSA",234,0)
 ;    ECLOC - array of selected locations
"RTN","ECRDSSA",235,0)
 ;
"RTN","ECRDSSA",236,0)
 ;  Output:
"RTN","ECRDSSA",237,0)
 ;   Function value - returns location name on success; "" on failure
"RTN","ECRDSSA",238,0)
 ;
"RTN","ECRDSSA",239,0)
 N ECI
"RTN","ECRDSSA",240,0)
 N ECLOCNM
"RTN","ECRDSSA",241,0)
 S ECLOCNM=""
"RTN","ECRDSSA",242,0)
 I +$G(ECLOCA)>0 D
"RTN","ECRDSSA",243,0)
 . S ECI=0
"RTN","ECRDSSA",244,0)
 . F  S ECI=$O(ECLOC(ECI)) Q:'ECI!(ECLOCNM'="")  D
"RTN","ECRDSSA",245,0)
 . . I $P(ECLOC(ECI),U)=ECLOCA S ECLOCNM=$P(ECLOC(ECI),U,2)
"RTN","ECRDSSA",246,0)
 Q ECLOCNM
"RTN","ECRDSSA",247,0)
 ;
"RTN","ECRDSSA",248,0)
GETDSSN(ECDSS,ECDSSU) ;-get DSS unit name
"RTN","ECRDSSA",249,0)
 ;  Input:
"RTN","ECRDSSA",250,0)
 ;    ECDSS - DSS unit
"RTN","ECRDSSA",251,0)
 ;    ECDSSU - array of selected DSS units
"RTN","ECRDSSA",252,0)
 ;
"RTN","ECRDSSA",253,0)
 ;  Output:
"RTN","ECRDSSA",254,0)
 ;   Function value - returns DSS unit name on success; "" on failure
"RTN","ECRDSSA",255,0)
 ;
"RTN","ECRDSSA",256,0)
 N ECI
"RTN","ECRDSSA",257,0)
 N ECDSSNM
"RTN","ECRDSSA",258,0)
 S ECDSSNM=""
"RTN","ECRDSSA",259,0)
 I +$G(ECDSS)>0 D
"RTN","ECRDSSA",260,0)
 . S ECI=0
"RTN","ECRDSSA",261,0)
 . F  S ECI=$O(ECDSSU(ECI)) Q:'ECI!(ECDSSNM'="")  D
"RTN","ECRDSSA",262,0)
 . . I $P(ECDSSU(ECI),U)=ECDSS S ECDSSNM=$P(ECDSSU(ECI),U,2)
"RTN","ECRDSSA",263,0)
 Q ECDSSNM
"RTN","ECRDSSA",264,0)
 ;
"RTN","ECRDSSA",265,0)
GETKEYS(ECSRT,ECIEN,ECKEYS) ;get sort keys based on sort type
"RTN","ECRDSSA",266,0)
 ;  Input:
"RTN","ECRDSSA",267,0)
 ;    ECSRT - (required) sort type indicator (P, S, R)
"RTN","ECRDSSA",268,0)
 ;    ECIEN - (required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",269,0)
 ;    
"RTN","ECRDSSA",270,0)
 ;  Output:
"RTN","ECRDSSA",271,0)
 ;    ECKEYS - (pass by reference) array of sort keys
"RTN","ECRDSSA",272,0)
 ;    Function value - returns 1 on success;0 on failure
"RTN","ECRDSSA",273,0)
 ;
"RTN","ECRDSSA",274,0)
 N ECRSLT  ;function value
"RTN","ECRDSSA",275,0)
 S ECRSLT=0
"RTN","ECRDSSA",276,0)
 S (ECKEYS(1),ECKEYS(2))=""
"RTN","ECRDSSA",277,0)
 I $G(ECSRT)'="",+$G(ECIEN)>0 D
"RTN","ECRDSSA",278,0)
 . I ECSRT="P" D
"RTN","ECRDSSA",279,0)
 . . S ECKEYS(1)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",280,0)
 . . S ECKEYS(2)=$E($$GETSSN(ECIEN),1,9)  ;ssn
"RTN","ECRDSSA",281,0)
 . I ECSRT="R" D
"RTN","ECRDSSA",282,0)
 . . S ECKEYS(1)=$$GETPROV(ECIEN)  ;provider
"RTN","ECRDSSA",283,0)
 . . I ECKEYS(1)="" S ECKEYS(1)=" "  ;missing provider sorts to top
"RTN","ECRDSSA",284,0)
 . . S ECKEYS(2)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",285,0)
 . I ECSRT="S" D
"RTN","ECRDSSA",286,0)
 . . S ECKEYS(1)=$E($$GETSSN(ECIEN),1,9)  ;ssn
"RTN","ECRDSSA",287,0)
 . . S ECKEYS(2)=$$GET1^DIQ(721,ECIEN_",",1)  ;name
"RTN","ECRDSSA",288,0)
 . I ECKEYS(1)'="",ECKEYS(2)'="" S ECRSLT=1
"RTN","ECRDSSA",289,0)
 Q ECRSLT
"RTN","ECRDSSA",290,0)
 ;
"RTN","ECRDSSA",291,0)
GETSSN(ECIEN) ;get patient SSN
"RTN","ECRDSSA",292,0)
 ;  Input:
"RTN","ECRDSSA",293,0)
 ;    ECIEN - (required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",294,0)
 ;    
"RTN","ECRDSSA",295,0)
 ;  Output:
"RTN","ECRDSSA",296,0)
 ;    Function value - returns patient's SSN on success; "" on failure
"RTN","ECRDSSA",297,0)
 ;
"RTN","ECRDSSA",298,0)
 N DFN,VADM,VAERR  ;VADPT variables
"RTN","ECRDSSA",299,0)
 I +$G(ECIEN)>0 D
"RTN","ECRDSSA",300,0)
 . S DFN=$$GET1^DIQ(721,ECIEN_",",1,"I")
"RTN","ECRDSSA",301,0)
 . D DEM^VADPT
"RTN","ECRDSSA",302,0)
 I $G(ECPTYP)="E" Q $P($G(VADM(2)),U)  ;119 full SSN on export
"RTN","ECRDSSA",303,0)
 Q $E($P($G(VADM(2)),U),6,9)  ;112, only get last 4 SSN
"RTN","ECRDSSA",304,0)
 ;
"RTN","ECRDSSA",305,0)
GETPROV(ECIEN) ;get primary provider
"RTN","ECRDSSA",306,0)
 ;This function retrieves the primary provider for a given Event
"RTN","ECRDSSA",307,0)
 ;Capture record.  Searches the PROVIDER MULTIPLE (#42) field first
"RTN","ECRDSSA",308,0)
 ;and falls back to the PROVIDER (#10) field.
"RTN","ECRDSSA",309,0)
 ;  Input:
"RTN","ECRDSSA",310,0)
 ;    ECIEN -(required) pointer to EVENT CAPTURE PATIENT (#721) file
"RTN","ECRDSSA",311,0)
 ;
"RTN","ECRDSSA",312,0)
 ;  Output:
"RTN","ECRDSSA",313,0)
 ;   Function value - returns provider's name on success; "" on failure
"RTN","ECRDSSA",314,0)
 ;
"RTN","ECRDSSA",315,0)
 N ECPROV  ;provider name
"RTN","ECRDSSA",316,0)
 S ECPROV=""
"RTN","ECRDSSA",317,0)
 I $G(ECIEN)'="",$D(^ECH(ECIEN)) D
"RTN","ECRDSSA",318,0)
 . ;try PROVIDER MULTIPLE
"RTN","ECRDSSA",319,0)
 . I '$$GETPPRV^ECPRVMUT(ECIEN,.ECPROV) D  ;api returns "0" on success
"RTN","ECRDSSA",320,0)
 . . S ECPROV=$P(ECPROV,U,2)
"RTN","ECRDSSA",321,0)
 . E  D  ;try PROVIDER
"RTN","ECRDSSA",322,0)
 . . S ECPROV=$$GET1^DIQ(721,ECIEN_",",10)
"RTN","ECRDSSA",323,0)
 Q ECPROV
"RTN","ECRDSSA",324,0)
 ;
"RTN","ECRDSSA",325,0)
GETPRNM(ECVIEN,ECDT) ;get procedure name
"RTN","ECRDSSA",326,0)
 ;  Input:
"RTN","ECRDSSA",327,0)
 ;    ECVIEN - variable pointer to CPT (#81) file or EC PROC file
"RTN","ECRDSSA",328,0)
 ;    
"RTN","ECRDSSA",329,0)
 ;  Output:
"RTN","ECRDSSA",330,0)
 ;    Function value - returns procedure name on success; "" on failure
"RTN","ECRDSSA",331,0)
 ;
"RTN","ECRDSSA",332,0)
 N ECIEN   ;IEN part of variable pointer
"RTN","ECRDSSA",333,0)
 N ECFILE  ;file part of variable pointer
"RTN","ECRDSSA",334,0)
 S ECIEN=$P(ECVIEN,";",1)
"RTN","ECRDSSA",335,0)
 S ECFILE=$P(ECVIEN,";",2)
"RTN","ECRDSSA",336,0)
 Q $S(ECFILE["ICPT(":$P($$CPT^ICPTCOD(ECIEN,ECDT),U,3),ECFILE["EC(725":$$GET1^DIQ(725,ECIEN_",",.01),1:"")
"RTN","ECRDSSA",337,0)
 ;
"RTN","ECRDSSA",338,0)
GETPROC(ECVIEN) ;get procedure code
"RTN","ECRDSSA",339,0)
 ;  Input:
"RTN","ECRDSSA",340,0)
 ;    ECVIEN - variable pointer to CPT (#81) file or EC PROC file
"RTN","ECRDSSA",341,0)
 ;
"RTN","ECRDSSA",342,0)
 ;  Output:
"RTN","ECRDSSA",343,0)
 ;   Function value - returns procedure code on success; "" on failure
"RTN","ECRDSSA",344,0)
 ;
"RTN","ECRDSSA",345,0)
 N ECIEN  ;IEN part of variable pointer
"RTN","ECRDSSA",346,0)
 N ECFILE  ;file part of variable pointer
"RTN","ECRDSSA",347,0)
 S ECIEN=$P(ECVIEN,";",1)
"RTN","ECRDSSA",348,0)
 S ECFILE=$P(ECVIEN,";",2)
"RTN","ECRDSSA",349,0)
 Q $S(ECFILE["ICPT(":$$GET1^DIQ(81,ECIEN_",",.01),ECFILE["EC(725":$$GET1^DIQ(725,ECIEN_",",1),1:"")
"RTN","ECRDSSA",350,0)
 ;
"RTN","ECRDSSA",351,0)
GETPSYN(LOC,UNIT,CAT,PROC) ;API added in 126, gets synonym for EC screen
"RTN","ECRDSSA",352,0)
 N SYN,IEN
"RTN","ECRDSSA",353,0)
 S SYN=""
"RTN","ECRDSSA",354,0)
 I PROC="" Q SYN
"RTN","ECRDSSA",355,0)
 S IEN=$O(^ECJ("AP",LOC,UNIT,CAT,PROC,0))
"RTN","ECRDSSA",356,0)
 I IEN="" Q SYN
"RTN","ECRDSSA",357,0)
 Q $P($G(^ECJ(IEN,"PRO")),U,2)
"RTN","ECRDSSA",358,0)
 ;
"RTN","ECRDSSA",359,0)
ASKSRT(ECTYP) ;Ask report sort type
"RTN","ECRDSSA",360,0)
 ;  Input:  none
"RTN","ECRDSSA",361,0)
 ;  
"RTN","ECRDSSA",362,0)
 ;  Output:
"RTN","ECRDSSA",363,0)
 ;    ECTYP - (pass by reference) Sort type
"RTN","ECRDSSA",364,0)
 ;            (P: Patient Name,S: SSN,R: Provider Name)
"RTN","ECRDSSA",365,0)
 ;    Function value - returns 1 on success; 0 on failure
"RTN","ECRDSSA",366,0)
 ;
"RTN","ECRDSSA",367,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y  ;^DIR variables
"RTN","ECRDSSA",368,0)
 S DIR(0)="SA^P:PATIENT NAME;S:SSN;R:PROVIDER NAME"
"RTN","ECRDSSA",369,0)
 S DIR("A")="Sort within each DSS Unit by: "
"RTN","ECRDSSA",370,0)
 S DIR("B")="SSN"
"RTN","ECRDSSA",371,0)
 D ^DIR
"RTN","ECRDSSA",372,0)
 S ECTYP=$P(Y,U)
"RTN","ECRDSSA",373,0)
 Q $S($D(DUOUT):0,$D(DTOUT):0,$D(DIROUT):0,1:1)
"RTN","ECRDSSA",374,0)
 ;
"RTN","ECRDSSA",375,0)
ASKDEV() ;Ask output device
"RTN","ECRDSSA",376,0)
 ;  Input:  none
"RTN","ECRDSSA",377,0)
 ;
"RTN","ECRDSSA",378,0)
 ; Output:  1 if report is printed
"RTN","ECRDSSA",379,0)
 ;          0 if report is queued (or exited)
"RTN","ECRDSSA",380,0)
 ;
"RTN","ECRDSSA",381,0)
 N ECX,ZTDESC,ZTRTN,ZTSAVE
"RTN","ECRDSSA",382,0)
 S ECX=1
"RTN","ECRDSSA",383,0)
 K %ZIS S %ZIS="QMP"
"RTN","ECRDSSA",384,0)
 D ^%ZIS
"RTN","ECRDSSA",385,0)
 S:POP ECX=0
"RTN","ECRDSSA",386,0)
 I ECX&($D(IO("Q"))) D
"RTN","ECRDSSA",387,0)
 . S ZTRTN="STRPT^ECRDSSA",ZTDESC="DSS UNIT ACTIVITY REPORT"
"RTN","ECRDSSA",388,0)
 . S (ZTSAVE("ECLOC("),ZTSAVE("ECDSSU("),ZTSAVE("ECSRT"))=""
"RTN","ECRDSSA",389,0)
 . S (ZTSAVE("ECSTDT"),ZTSAVE("ECENDDT"))=""
"RTN","ECRDSSA",390,0)
 . D ^%ZTLOAD
"RTN","ECRDSSA",391,0)
 . D HOME^%ZIS
"RTN","ECRDSSA",392,0)
 . S ECX=0
"RTN","ECRDSSA",393,0)
 Q ECX
"RTN","ECUERPC2")
0^9^B10728700^B4379699
"RTN","ECUERPC2",1,0)
ECUERPC2 ;ALB/JAM;Event Capture Data Entry Broker Utilities ;11/10/16  12:54
"RTN","ECUERPC2",2,0)
 ;;2.0;EVENT CAPTURE;**41,39,50,72,134**;8 May 96;Build 12
"RTN","ECUERPC2",3,0)
 ;
"RTN","ECUERPC2",4,0)
ECDOD(RESULTS,ECARY) ;RPC Broker entry point to get a patient's date of death
"RTN","ECUERPC2",5,0)
 ;        RPC: EC DIEDON
"RTN","ECUERPC2",6,0)
 ;INPUTS   ECARY - Contains the following elements as input
"RTN","ECUERPC2",7,0)
 ;          ECDFN - Patient DFN
"RTN","ECUERPC2",8,0)
 ;
"RTN","ECUERPC2",9,0)
 ;OUTPUTS  RESULTS - Fileman Internal Date of Patient date of Death^
"RTN","ECUERPC2",10,0)
 ;                   Message with Patient External Date of Death
"RTN","ECUERPC2",11,0)
 ;
"RTN","ECUERPC2",12,0)
 N ECDFN,DFN,VADM
"RTN","ECUERPC2",13,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC2",14,0)
 S ECDFN=$P(ECARY,U),RESULTS="^"
"RTN","ECUERPC2",15,0)
 I ECDFN="" S RESULTS="0^Patient DFN not defined" Q
"RTN","ECUERPC2",16,0)
 ;NOIS MWV-0603-21781: line below changed by VMP
"RTN","ECUERPC2",17,0)
 S DFN=ECDFN D 2^VADPT I +VADM(6) S RESULTS=$P(VADM(6),U)_"^"_"[PATIENT DIED ON "_$P(VADM(6),U,2)_"]"
"RTN","ECUERPC2",18,0)
 Q
"RTN","ECUERPC2",19,0)
VISINFO(RESULTS,ECARY) ;
"RTN","ECUERPC2",20,0)
 ;
"RTN","ECUERPC2",21,0)
 ;Broker call returns the EC values based on a Visit Number
"RTN","ECUERPC2",22,0)
 ;        RPC: EC GETVISITINFO
"RTN","ECUERPC2",23,0)
 ;INPUTS   ECARY - Contains the following subscripted elements
"RTN","ECUERPC2",24,0)
 ;          ECVSN - Visit Number, IEN in file (#9000010)
"RTN","ECUERPC2",25,0)
 ;
"RTN","ECUERPC2",26,0)
 ;OUTPUTS  RESULTS - Contains the following data:-
"RTN","ECUERPC2",27,0)
 ;          Location IEN^DSS Unit IEN^Proc Date/Time Fileman^
"RTN","ECUERPC2",28,0)
 ;           Procedure Date/Time Readable^Patient DFN
"RTN","ECUERPC2",29,0)
 ;          0^Error Message (if error)
"RTN","ECUERPC2",30,0)
 ;
"RTN","ECUERPC2",31,0)
 N ECLOC,ECUNT,NODE,Y,ECPXDT,DA,ECVSN,ECDFN,DSSF,LOC,UNT
"RTN","ECUERPC2",32,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC2",33,0)
 S ECVSN=$P(ECARY,U) I ECVSN="" S RESULTS=0_"^Visit undefined" Q
"RTN","ECUERPC2",34,0)
 K ^TMP($J,"ECVISINFO")
"RTN","ECUERPC2",35,0)
 S DA=$O(^ECH("C",ECVSN,0)) I 'DA D  Q
"RTN","ECUERPC2",36,0)
 . S RESULTS=0_"^Visit not on File"
"RTN","ECUERPC2",37,0)
 S NODE=$G(^ECH(DA,0)) I NODE="" D  Q
"RTN","ECUERPC2",38,0)
 . S RESULTS=0_"No corresponding EC procedures found for Visit"
"RTN","ECUERPC2",39,0)
 S ECLOC=$P(NODE,U,4),ECUNT=$P(NODE,U,7),ECPXDT=$P(NODE,U,3)
"RTN","ECUERPC2",40,0)
 S LOC=$P($G(^DIC(4,ECLOC,0)),U),UNT=$G(^ECD(ECUNT,0)),DSSF=$P(UNT,U,14)
"RTN","ECUERPC2",41,0)
 S UNT=$P(UNT,U) S:DSSF="" DSSF="N"
"RTN","ECUERPC2",42,0)
 S ECDFN=$P(NODE,U,2),Y=ECPXDT X ^DD("DD")
"RTN","ECUERPC2",43,0)
 S RESULTS=ECLOC_U_LOC_U_ECUNT_U_UNT_U_DSSF_U_ECPXDT_U_Y_U_ECDFN
"RTN","ECUERPC2",44,0)
 Q
"RTN","ECUERPC2",45,0)
PATPRV(ECIEN) ;
"RTN","ECUERPC2",46,0)
 ;Returns to broker a patient providers (primary & secondary) entries 
"RTN","ECUERPC2",47,0)
 ;from EVENT CAPTURE PATIENT FILE #721
"RTN","ECUERPC2",48,0)
 ;INPUTS   ECIEN - Event Capture Patient ien
"RTN","ECUERPC2",49,0)
 ;
"RTN","ECUERPC2",50,0)
 ;OUTPUTS  RESULTS - Array of Event Capture Patient file contains
"RTN","ECUERPC2",51,0)
 ;          ^ECH IEN^provider ien^provider description^Primary/Secondary
"RTN","ECUERPC2",52,0)
 ;           code^Primary/Secondary description
"RTN","ECUERPC2",53,0)
 ;
"RTN","ECUERPC2",54,0)
 N ECPRV,ECPROV
"RTN","ECUERPC2",55,0)
 I '$D(^ECH(ECIEN,"PRV")) Q
"RTN","ECUERPC2",56,0)
 K ^TMP($J,"ECPRV")
"RTN","ECUERPC2",57,0)
 S ECPRV=$$GETPRV^ECPRVMUT(ECIEN,.ECPROV) I 'ECPRV D
"RTN","ECUERPC2",58,0)
 .M ^TMP($J,"ECPRV")=ECPROV
"RTN","ECUERPC2",59,0)
 S RESULTS=$NA(^TMP($J,"ECPRV"))
"RTN","ECUERPC2",60,0)
 Q
"RTN","ECUERPC2",61,0)
 ;
"RTN","ECUERPC2",62,0)
ECDEFPRV(RESULTS,ECARY) ;134 Section added
"RTN","ECUERPC2",63,0)
 ;Returns default provider based on user and DSS unit
"RTN","ECUERPC2",64,0)
 ;INPUT    ECARY contains IEN of DSS unit^Procedure date/time
"RTN","ECUERPC2",65,0)
 ;
"RTN","ECUERPC2",66,0)
 ;OUTPUT   RESULTS - IEN^Provider Name if default found
"RTN","ECUERPC2",67,0)
 ;                   -1^ if no default identified
"RTN","ECUERPC2",68,0)
 N DSSIEN,PROCDT,DSSUPCE,PROVIEN
"RTN","ECUERPC2",69,0)
 S RESULTS=-1_"^"
"RTN","ECUERPC2",70,0)
 S DSSIEN=+ECARY Q:'DSSIEN  ;Quit if no DSS unit identified
"RTN","ECUERPC2",71,0)
 S PROCDT=$S($P(ECARY,U,2):$P(ECARY,U,2),1:$$DT^XLFDT) ;if no procedure date/time sent in use today's date
"RTN","ECUERPC2",72,0)
 S DSSUPCE=$S($P($G(^ECD(DSSIEN,0)),U,14)="N":"N",1:"A") ;Send to PCE setting for DSS unit, "N"o records or "A"ll records
"RTN","ECUERPC2",73,0)
 S RESULTS=$$CHK(DUZ) Q:+RESULTS>0  ;Stop if current user is a provider
"RTN","ECUERPC2",74,0)
 D ECDEF^ECUERPC1(.PROVIEN,200) Q:'+PROVIEN  ;Stop if no record in 200 for this user was identified
"RTN","ECUERPC2",75,0)
 S RESULTS=$$CHK(+PROVIEN)
"RTN","ECUERPC2",76,0)
 Q
"RTN","ECUERPC2",77,0)
 ;
"RTN","ECUERPC2",78,0)
CHK(NUM) ;134 Section added to find default provider
"RTN","ECUERPC2",79,0)
 N ECINFO
"RTN","ECUERPC2",80,0)
 S ECINFO=$$GET^XUA4A72(NUM,PROCDT)
"RTN","ECUERPC2",81,0)
 I +ECINFO>0 Q NUM_U_$$GET1^DIQ(200,NUM_",",.01)_U_$P(ECINFO,U,2,4)
"RTN","ECUERPC2",82,0)
 I +ECINFO<0,DSSUPCE="N",$D(^EC(722,"B",NUM)) Q NUM_U_$$GET1^DIQ(200,NUM_",",.01)
"RTN","ECUERPC2",83,0)
 Q -1_"^"
"RTN","ECUMRPC1")
0^7^B107083588^B103578610
"RTN","ECUMRPC1",1,0)
ECUMRPC1 ;ALB/JAM-Event Capture Management Broker Utilities ;12/5/16  16:39
"RTN","ECUMRPC1",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,33,72,94,95,105,100,107,110,112,126,130,131,134**;8 May 96;Build 12
"RTN","ECUMRPC1",3,0)
 ;
"RTN","ECUMRPC1",4,0)
DSSUNT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",5,0)
 ;
"RTN","ECUMRPC1",6,0)
 ;This broker entry point returns DSS units from file 724
"RTN","ECUMRPC1",7,0)
 ;        RPC: EC GETDSSUNIT
"RTN","ECUMRPC1",8,0)
 ;INPUTS         ECARY -Contains the following subscripted elements
"RTN","ECUMRPC1",9,0)
 ;               P1 =   optional field to return DSS Units
"RTN","ECUMRPC1",10,0)
 ;                      STAT; 'A'ctive (default), 'I'nactive, 'B'oth
"RTN","ECUMRPC1",11,0)
 ;               P2 =   optional field to filter based on the DSS Name
"RTN","ECUMRPC1",12,0)
 ;               P3 =   optional field to return 1 DSS unit by IEN, if used
"RTN","ECUMRPC1",13,0)
 ;                      no other filters evaluated
"RTN","ECUMRPC1",14,0)
 ;               P4 =   optional field to filter based on the DSS Unit Number (DSS Dept)
"RTN","ECUMRPC1",15,0)
 ;               
"RTN","ECUMRPC1",16,0)
 ;               if data is passed into the other fields then all criteria
"RTN","ECUMRPC1",17,0)
 ;               must be met for data on a unit to be returned
"RTN","ECUMRPC1",18,0)
 ;
"RTN","ECUMRPC1",19,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","ECUMRPC1",20,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",21,0)
 ;                 1     IEN of DSS Unit 
"RTN","ECUMRPC1",22,0)
 ;                 2     Name of DSS Unit
"RTN","ECUMRPC1",23,0)
 ;                 3     IEN of DSS Unit
"RTN","ECUMRPC1",24,0)
 ;                 4     Inactive flag
"RTN","ECUMRPC1",25,0)
 ;                 5     Send to PCE   
"RTN","ECUMRPC1",26,0)
 ;                 6     Unit Number
"RTN","ECUMRPC1",27,0)
 ;                 7     Service
"RTN","ECUMRPC1",28,0)
 ;                 8     Medical Specialty
"RTN","ECUMRPC1",29,0)
 ;                 9     Cost Center
"RTN","ECUMRPC1",30,0)
 ;                 10    Associated Stop code (if not sending to PCE)
"RTN","ECUMRPC1",31,0)
 ;                 11    Category flag
"RTN","ECUMRPC1",32,0)
 ;                 12    Default date entry
"RTN","ECUMRPC1",33,0)
 ;                 13    Credit Stop Code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",34,0)
 ;                 14    CHAR4 code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",35,0)
 ;
"RTN","ECUMRPC1",36,0)
 N UNT,STAT,CNT,CAT,NODE,ECS,STR,SRV,MED,CST,UNO,INACT,ASC,PCE,ACT,NODE
"RTN","ECUMRPC1",37,0)
 N DFD,DIEN,DNM,DUNIT,GET1,CSC,CHAR4 ;126
"RTN","ECUMRPC1",38,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",39,0)
 K ^TMP($J,"ECDSSUNT")
"RTN","ECUMRPC1",40,0)
 S DNM=$P($G(ECARY),U,2),DIEN=$P($G(ECARY),U,3),DUNIT=$P($G(ECARY),U,4)
"RTN","ECUMRPC1",41,0)
 S:DNM'="" DNM=$$UP^XLFSTR(DNM)
"RTN","ECUMRPC1",42,0)
 S:DUNIT'="" DUNIT=$$UP^XLFSTR(DUNIT)
"RTN","ECUMRPC1",43,0)
 S STAT=$P($G(ECARY),U),(CNT,UNT,GET1)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",44,0)
 ; if IEN passed in - use that, then quit, GET1 used as control to stop
"RTN","ECUMRPC1",45,0)
 I $G(DIEN) S UNT=DIEN-.001,GET1=1
"RTN","ECUMRPC1",46,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT!((UNT>DIEN&(GET1)))  S NODE=$G(^ECD(UNT,0)) I NODE'="" D
"RTN","ECUMRPC1",47,0)
 . S ECS=$P(NODE,U,8),ACT=$P(NODE,U,6),ACT=$S(ACT:1,1:0)
"RTN","ECUMRPC1",48,0)
 . Q:('ECS)
"RTN","ECUMRPC1",49,0)
 . I '$G(DIEN),$S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC1",50,0)
 . ; execute new filters
"RTN","ECUMRPC1",51,0)
 . I DNM'="",$$UP^XLFSTR($P(NODE,U))'[DNM Q
"RTN","ECUMRPC1",52,0)
 . I DUNIT'="",$$UP^XLFSTR($P(NODE,U,5))'[DUNIT Q
"RTN","ECUMRPC1",53,0)
 . I DIEN'="",$$UP^XLFSTR(UNT)'[DIEN Q
"RTN","ECUMRPC1",54,0)
 . S CNT=CNT+1,CAT=$P(NODE,U,11),CAT=$S(CAT:"Y",1:"N"),UNO=$P(NODE,U,5)
"RTN","ECUMRPC1",55,0)
 . S SRV=$$GET1^DIQ(49,$P(NODE,U,2),.01,"I")
"RTN","ECUMRPC1",56,0)
 . S MED=$$GET1^DIQ(723,$P(NODE,U,3),.01,"I")
"RTN","ECUMRPC1",57,0)
 . S CST=$$GET1^DIQ(420.1,$P(NODE,U,4),.01,"I")
"RTN","ECUMRPC1",58,0)
 . S INACT=$P(NODE,U,6),INACT=$S(INACT:"I",1:"A"),ASC=$P(NODE,U,10),CSC=$P(NODE,U,13),CHAR4=$P(NODE,U,15) ;126
"RTN","ECUMRPC1",59,0)
 . S:ASC ASC=$$GET1^DIQ(40.7,ASC,.01,"I")
"RTN","ECUMRPC1",60,0)
 . S:CSC CSC=$$GET1^DIQ(40.7,CSC,.01) ;126
"RTN","ECUMRPC1",61,0)
 . S:CHAR4 CHAR4=$$GET1^DIQ(728.441,CHAR4,.01) ;126
"RTN","ECUMRPC1",62,0)
 . S DFD=$S($P(NODE,U,12)="N":"N",1:"X"),PCE=$P(NODE,U,14)
"RTN","ECUMRPC1",63,0)
 . S PCE=$S(PCE="A":PCE,PCE="O":PCE,1:"N")
"RTN","ECUMRPC1",64,0)
 . S STR=UNT_U_$P(NODE,U)_U_UNT_U_INACT_U_PCE_U_UNO_U_SRV_U_MED_U_CST
"RTN","ECUMRPC1",65,0)
 . S STR=STR_U_ASC_U_CAT_U_DFD_U_CSC_U_CHAR4,^TMP($J,"ECDSSUNT",CNT)=STR ;126
"RTN","ECUMRPC1",66,0)
 S RESULTS=$NA(^TMP($J,"ECDSSUNT"))
"RTN","ECUMRPC1",67,0)
 Q
"RTN","ECUMRPC1",68,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",69,0)
 ;
"RTN","ECUMRPC1",70,0)
 ;This broker entry point returns a list of categories from file 726
"RTN","ECUMRPC1",71,0)
 ;        RPC: EC GETCAT
"RTN","ECUMRPC1",72,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC1",73,0)
 ;                STAT - Active or inactive category (optional)
"RTN","ECUMRPC1",74,0)
 ;                A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC1",75,0)
 ;
"RTN","ECUMRPC1",76,0)
 ;OUTPUTS        RESULTS - Array of category. Data pieces as follows:-
"RTN","ECUMRPC1",77,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",78,0)
 ;                 1     IEN of Category
"RTN","ECUMRPC1",79,0)
 ;                 2     Name of Category
"RTN","ECUMRPC1",80,0)
 ;                 3     Creation Date
"RTN","ECUMRPC1",81,0)
 ;                 4     Inactive Date
"RTN","ECUMRPC1",82,0)
 ;
"RTN","ECUMRPC1",83,0)
 N STAT,CNT,CAT,NODE,ECDT,INDT,CRDT
"RTN","ECUMRPC1",84,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",85,0)
 K ^TMP($J,"ECCAT")
"RTN","ECUMRPC1",86,0)
 S STAT=$P($G(ECARY),U),(CNT,CAT)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",87,0)
 F  S CAT=$O(^EC(726,CAT)) Q:'CAT  S NODE=$G(^EC(726,CAT,0)) I NODE'="" D
"RTN","ECUMRPC1",88,0)
 . S ECDT=$P(NODE,U,3)
"RTN","ECUMRPC1",89,0)
 . I STAT="A",ECDT'="",ECDT'>DT Q
"RTN","ECUMRPC1",90,0)
 . I STAT="I",ECDT="" Q
"RTN","ECUMRPC1",91,0)
 . S CRDT=$$FMTE^XLFDT($P(NODE,U,2),"2F")
"RTN","ECUMRPC1",92,0)
 . S INDT=$$FMTE^XLFDT($P(NODE,U,3),"2F")
"RTN","ECUMRPC1",93,0)
 . ;S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_CRDT_U_INDT
"RTN","ECUMRPC1",94,0)
 . S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_$P(CRDT,"@",1)_U_$P(INDT,"@",1)
"RTN","ECUMRPC1",95,0)
 S RESULTS=$NA(^TMP($J,"ECCAT"))
"RTN","ECUMRPC1",96,0)
 Q
"RTN","ECUMRPC1",97,0)
 ;
"RTN","ECUMRPC1",98,0)
CATCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",99,0)
 ;
"RTN","ECUMRPC1",100,0)
 ;Broker call checks whether category is used in an Event Code Screen.
"RTN","ECUMRPC1",101,0)
 ;        RPC: EC DSSCATCHECK
"RTN","ECUMRPC1",102,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",103,0)
 ;          ECDA  - DSS Unit ien (file #724)
"RTN","ECUMRPC1",104,0)
 ;
"RTN","ECUMRPC1",105,0)
 ;OUTPUTS  RESULTS - Category used in Event Code Screen, 1-Yes or 0-No
"RTN","ECUMRPC1",106,0)
 ;
"RTN","ECUMRPC1",107,0)
 N ECDA,ECFLG,ECX
"RTN","ECUMRPC1",108,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",109,0)
 S ECDA=$P(ECARY,U) I ECDA="" Q
"RTN","ECUMRPC1",110,0)
 S (ECFLG,ECX)=0
"RTN","ECUMRPC1",111,0)
 F  S ECX=$O(^ECJ("AP",ECX)) Q:'ECX!(ECFLG)  D
"RTN","ECUMRPC1",112,0)
 . I $D(^ECJ("AP",ECX,ECDA)) S ECFLG=1
"RTN","ECUMRPC1",113,0)
 S RESULTS=ECFLG
"RTN","ECUMRPC1",114,0)
 Q
"RTN","ECUMRPC1",115,0)
PXCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",116,0)
 ;
"RTN","ECUMRPC1",117,0)
 ;Checks whether procedure description or national number exist
"RTN","ECUMRPC1",118,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",119,0)
 ;          ECP - Procedure description
"RTN","ECUMRPC1",120,0)
 ;          ECN - EC National Number
"RTN","ECUMRPC1",121,0)
 ;
"RTN","ECUMRPC1",122,0)
 ;OUTPUTS  RESULTS - Px used^National # used, 1-Yes or 0-No ex. 1^0
"RTN","ECUMRPC1",123,0)
 ;
"RTN","ECUMRPC1",124,0)
 N ECX,ECP,ECN
"RTN","ECUMRPC1",125,0)
 Q:$G(ECARY)
"RTN","ECUMRPC1",126,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",127,0)
 S ECP=$P(ECARY,U),ECN=$P(ECARY,U,2),RESULTS="0^0"
"RTN","ECUMRPC1",128,0)
 I ECP'="",$D(^EC(725,"B",ECP)) S $P(RESULTS,U)=1
"RTN","ECUMRPC1",129,0)
 I ECN'="" F ECX="E","D","DL" D  I $P(RESULTS,U,2) Q
"RTN","ECUMRPC1",130,0)
 . I $D(^EC(725,ECX,ECN)) S $P(RESULTS,U,2)=1
"RTN","ECUMRPC1",131,0)
 Q
"RTN","ECUMRPC1",132,0)
SRCLST(RESULTS,ECARY) ;
"RTN","ECUMRPC1",133,0)
 ;
"RTN","ECUMRPC1",134,0)
 ;This broker entry returns an array of codes from a file based on a 
"RTN","ECUMRPC1",135,0)
 ;search string.
"RTN","ECUMRPC1",136,0)
 ;        RPC: EC GETLIST
"RTN","ECUMRPC1",137,0)
 ;
"RTN","ECUMRPC1",138,0)
 ;INPUTS    ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC1",139,0)
 ;          ECFIL   - File to search
"RTN","ECUMRPC1",140,0)
 ;          ECSTR   - Search string
"RTN","ECUMRPC1",141,0)
 ;          ECDIR   - Search order
"RTN","ECUMRPC1",142,0)
 ;          ECNUM   - (Optional) # records to return [default=44]
"RTN","ECUMRPC1",143,0)
 ;          ECADT   - (Optional) date to determine clinic inactivity
"RTN","ECUMRPC1",144,0)
 ;          ECLOC   - (Optional) location to filter associated clinics
"RTN","ECUMRPC1",145,0)
 ;          ECTYPE  - (Optional) primary or secondary stop codes desired
"RTN","ECUMRPC1",146,0)
 ;OUTPUTS   RESULTS - Array of values based on the search criteria.
"RTN","ECUMRPC1",147,0)
 ;
"RTN","ECUMRPC1",148,0)
 N ECNT,DIC,ECSTR,ECFIL,ECORD,ECER,ECDI,ECNUM,ECDIR,ECADT,ECLOC,ECTYPE ;112,126
"RTN","ECUMRPC1",149,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",150,0)
 S ECNT=0,ECFIL=$P(ECARY,U),ECSTR=$P(ECARY,U,2),ECDIR=$P(ECARY,U,3)
"RTN","ECUMRPC1",151,0)
 S ECORD=$S(ECDIR=-1:"B",1:"I")
"RTN","ECUMRPC1",152,0)
 K ^TMP($J,"ECFIND"),^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",153,0)
 I ECFIL="" Q
"RTN","ECUMRPC1",154,0)
 S ECNUM=$S(+$P(ECARY,U,4)>0:$P(ECARY,U,4),1:44)
"RTN","ECUMRPC1",155,0)
 S ECADT=$S(+$P(ECARY,U,5):$P(ECARY,U,5),1:DT) ;112
"RTN","ECUMRPC1",156,0)
 S ECLOC=$P(ECARY,U,6) ;126 IEN of location if filtering.  Null if no filtering
"RTN","ECUMRPC1",157,0)
 S ECTYPE=$P(ECARY,U,7) ;126 Null if primary, not null for secondary
"RTN","ECUMRPC1",158,0)
 I ECFIL=420.1 D CSTCTR            ;Cost Center search
"RTN","ECUMRPC1",159,0)
 I ECFIL=49 D SERVC                ;Service search
"RTN","ECUMRPC1",160,0)
 I ECFIL=723 D MEDSPC              ;Medical specialty
"RTN","ECUMRPC1",161,0)
 I ECFIL=40.7 D STPCDE G EXIT      ;Associated stop code
"RTN","ECUMRPC1",162,0)
 I ECFIL=724 D DUNT G EXIT         ;DSS Unit
"RTN","ECUMRPC1",163,0)
 I ECFIL=726 D ECAT                ;Category
"RTN","ECUMRPC1",164,0)
 I ECFIL=4 D LOC                   ;Location
"RTN","ECUMRPC1",165,0)
 I ECFIL=44 D ASCLN G EXIT         ;Associated clinic
"RTN","ECUMRPC1",166,0)
 I ECFIL=757.01 D LEX^ECUMRPC2 G EXIT  ;Lex ICD code
"RTN","ECUMRPC1",167,0)
 I ECFIL=200 D PROV^ECUMRPC2(ECNUM)      ;Providers
"RTN","ECUMRPC1",168,0)
 I ECFIL=728.441 D CHAR4                 ;126 National Clinic code (CHAR4)
"RTN","ECUMRPC1",169,0)
 I ECFIL=722 D LIST^ECPRVDR              ;134 EC Providers
"RTN","ECUMRPC1",170,0)
 I $D(ECER) S ^TMP($J,"ECFIND",1)="0^Error occurred during search" G EXIT
"RTN","ECUMRPC1",171,0)
 D SORT
"RTN","ECUMRPC1",172,0)
EXIT K ^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",173,0)
 S RESULTS=$NA(^TMP($J,"ECFIND"))
"RTN","ECUMRPC1",174,0)
 Q
"RTN","ECUMRPC1",175,0)
ASCLN ;Search for active associated clinics (file #44)
"RTN","ECUMRPC1",176,0)
 N CLN,CNT,NOD,ECDT,INACT,REACT,ERR,ECNOD ;126
"RTN","ECUMRPC1",177,0)
 S CNT=0,ECDT=ECADT ;112
"RTN","ECUMRPC1",178,0)
 I (ECDIR'=1)&(ECDIR'=-1) S ECDIR=1
"RTN","ECUMRPC1",179,0)
 ;the next 2 lines of code compensate for the M collating sequence & how the
"RTN","ECUMRPC1",180,0)
 ;clinic code is passed in from a CPRS RPC, in a unique situation. If the
"RTN","ECUMRPC1",181,0)
 ;code is numeric, ending in 0 and there is a similar code ending with a
"RTN","ECUMRPC1",182,0)
 ;letter, the correct clinic is not returned. EX: 2 clinics, 3010 and "3010A"
"RTN","ECUMRPC1",183,0)
 ;exist, the code is written to return 3010, yet 3010A is incorrectly returned. 
"RTN","ECUMRPC1",184,0)
 ;This code puts the 0 back on and subtracts 1 to the clinic code
"RTN","ECUMRPC1",185,0)
 I $E(ECSTR,$L(ECSTR)-1)="/",$E(ECSTR,1,($L(ECSTR)-2))?.N D
"RTN","ECUMRPC1",186,0)
 .S ECSTR=$E(ECSTR,1,($L(ECSTR)-2))_0,ECSTR=ECSTR-1
"RTN","ECUMRPC1",187,0)
 F  Q:CNT'<ECNUM  S ECSTR=$O(^SC("B",ECSTR),ECDIR) Q:ECSTR=""  S CLN="" D  ;134 Stop if counter is greater than or equal to ECNUM - allows for duplicate clinic names
"RTN","ECUMRPC1",188,0)
 .F  S CLN=$O(^SC("B",ECSTR,CLN),ECDIR) Q:CLN=""  S NOD=$G(^SC(CLN,0)) D
"RTN","ECUMRPC1",189,0)
 ..Q:NOD=""  Q:$P(NOD,U,3)'="C"  ;Q:+$G(^SC(CLN,"OOS"))
"RTN","ECUMRPC1",190,0)
 ..I $G(ECLOC) I ECLOC'=$$GET1^DIQ(44,CLN,"3.5:.07","I") Q  ;126,130 Clinic must be assoicated with the selected location, if one was selected
"RTN","ECUMRPC1",191,0)
 ..S ERR=0 I $D(^SC(CLN,"I")) D  I ERR Q
"RTN","ECUMRPC1",192,0)
 ...S INACT=$P(^SC(CLN,"I"),U),REACT=$P(^SC(CLN,"I"),U,2)
"RTN","ECUMRPC1",193,0)
 ...I INACT D  I ERR Q
"RTN","ECUMRPC1",194,0)
 ....I REACT="" S:ECDT'<INACT ERR=1 Q
"RTN","ECUMRPC1",195,0)
 ....I ECDT'<INACT,ECDT<REACT S ERR=1 Q
"RTN","ECUMRPC1",196,0)
 ...;I REACT,ECDT<REACT S ERR=1  removed in EC*110 - BGP
"RTN","ECUMRPC1",197,0)
 ..S ECNOD=$G(^ECX(728.44,CLN,0)) ;126 Get clinic and stop code zero node for selected clinic
"RTN","ECUMRPC1",198,0)
 ..S CNT=CNT+1,^TMP($J,"ECFIND",CNT)=CLN_U_$P(NOD,U)_U_$P(ECNOD,U,2)_U_$P(ECNOD,U,3)_U_$P($G(^ECX(728.441,+$P(ECNOD,U,8),0)),U) ;126 Add stop code, credit stop, and char4 code
"RTN","ECUMRPC1",199,0)
 Q
"RTN","ECUMRPC1",200,0)
CSTCTR ;Search for cost centers (File #420.1)
"RTN","ECUMRPC1",201,0)
 N ECNULL,INDX,STR,NSTR,I
"RTN","ECUMRPC1",202,0)
 S $P(ECNULL," ",7)=" ",INDX="B"
"RTN","ECUMRPC1",203,0)
 I $E(ECSTR)?.N,$L(ECSTR)<7 S ECSTR=ECSTR_$E(ECNULL,1,7-$L(ECSTR))
"RTN","ECUMRPC1",204,0)
 I $L($P(ECSTR," "))=6,$P(ECSTR," ",2)?.A D   ;truncate for x-ref
"RTN","ECUMRPC1",205,0)
 . S ECSTR=$P(ECSTR," ")_" "_$E($P(ECSTR," ",2,999),1,22)
"RTN","ECUMRPC1",206,0)
 I $E(ECSTR)?.A S INDX="C",(STR,NSTR)="" D  S ECSTR=NSTR
"RTN","ECUMRPC1",207,0)
 .F I=1:1 S STR=$P(ECSTR," ",I) Q:STR=""  D
"RTN","ECUMRPC1",208,0)
 ..S STR=$E(STR)_$TR($E(STR,2,9999),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
"RTN","ECUMRPC1",209,0)
 ..S NSTR=NSTR_STR
"RTN","ECUMRPC1",210,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"",INDX,"I '$P(^(0),U,2)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",211,0)
 Q
"RTN","ECUMRPC1",212,0)
SERVC ;Search for services (File #49)
"RTN","ECUMRPC1",213,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",214,0)
 Q
"RTN","ECUMRPC1",215,0)
MEDSPC ;Search for medical specialty (File #723)
"RTN","ECUMRPC1",216,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",217,0)
 Q
"RTN","ECUMRPC1",218,0)
STPCDE ;Search for associated stop code (File #40.7)
"RTN","ECUMRPC1",219,0)
 N ECNT,INDX,ECNUL,STR,IEN
"RTN","ECUMRPC1",220,0)
 S $P(ECNUL,"  ",30)=" ",INDX="B",ECNT=0,ECSTR=$P(ECSTR,"~")
"RTN","ECUMRPC1",221,0)
 I +ECSTR,ECSTR["/" S ECSTR=$TR(ECSTR,"/",0) S:ECSTR>0 ECSTR=ECSTR-1 ;131 If number sent, remove / and replace with 0
"RTN","ECUMRPC1",222,0)
 I +ECSTR,+ECSTR?.N S INDX="C",IEN=0 D  Q
"RTN","ECUMRPC1",223,0)
 .S ECSTR=$O(^DIC(40.7,INDX,+ECSTR)) I ECSTR="" Q
"RTN","ECUMRPC1",224,0)
 .F  S IEN=$O(^DIC(40.7,INDX,ECSTR,IEN)) Q:'IEN  D  I ECNT>(ECNUM-1) Q
"RTN","ECUMRPC1",225,0)
 ..;07/27/09 llh added checks on piece 2 and 6
"RTN","ECUMRPC1",226,0)
 ..S STR=$G(^DIC(40.7,IEN,0)) I ($P(STR,U,3)'=""&($P(STR,U,3)'>DT))!($P(STR,U,6)=$S($G(ECTYPE)="":"S",1:"P"))!($P(STR,U,6)="")!($L($P(STR,U,2))'=3) Q  ;126 allow for searches for primary or secondary
"RTN","ECUMRPC1",227,0)
 ..S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)_U_IEN
"RTN","ECUMRPC1",228,0)
 ..S ECNT=ECNT+1,^TMP($J,"ECFIND",ECNT)=STR
"RTN","ECUMRPC1",229,0)
 ;added validation checks here as well
"RTN","ECUMRPC1",230,0)
 ;D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($P(^(0),U,6)'=""S"")","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",231,0)
 D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($L($P(^(0),U,2))=3)&(($P(^(0),U,6)=$S($G(ECTYPE)="""":""P"",1:""S""))!($P(^(0),U,6)=""E""))","","^TMP(""ECSRCH"",$J)","ECER") ;126
"RTN","ECUMRPC1",232,0)
 S ECNT=0
"RTN","ECUMRPC1",233,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",234,0)
 .S STR=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_$G(^(1))
"RTN","ECUMRPC1",235,0)
 .S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)
"RTN","ECUMRPC1",236,0)
 .S ^TMP($J,"ECFIND",ECNT)=STR_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",237,0)
 Q
"RTN","ECUMRPC1",238,0)
DUNT ;Search for DSS unit (File #724)
"RTN","ECUMRPC1",239,0)
 N ECNT,SNDPCE
"RTN","ECUMRPC1",240,0)
 D LISTDIC(ECFIL,"",".01;10;13",ECORD,ECNUM,ECSTR,"","","I '$P(^(0),""^"",6),$P(^(0),U,8)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",241,0)
 S ECNT=0
"RTN","ECUMRPC1",242,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",243,0)
 .S SNDPCE=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,13))
"RTN","ECUMRPC1",244,0)
 .S SNDPCE=$S(SNDPCE="O":1,SNDPCE="A":1,1:0)
"RTN","ECUMRPC1",245,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)_U_$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,10))_U_SNDPCE
"RTN","ECUMRPC1",246,0)
 Q
"RTN","ECUMRPC1",247,0)
ECAT ;Search for Category (File #726)
"RTN","ECUMRPC1",248,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P(^(0),""^"",3)=""""!($P(^(0),U,3)>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",249,0)
 Q
"RTN","ECUMRPC1",250,0)
LOC ;Search for Location (File #4)
"RTN","ECUMRPC1",251,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $G(^(""EC""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",252,0)
 Q
"RTN","ECUMRPC1",253,0)
LISTDIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER) ;
"RTN","ECUMRPC1",254,0)
 ;Produces a list of records in a file base on search string
"RTN","ECUMRPC1",255,0)
 N DIC
"RTN","ECUMRPC1",256,0)
 D LIST^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER)
"RTN","ECUMRPC1",257,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECID
"RTN","ECUMRPC1",258,0)
 Q
"RTN","ECUMRPC1",259,0)
SORT ;Extracts data to be returned to broker
"RTN","ECUMRPC1",260,0)
 N ECNT,STR
"RTN","ECUMRPC1",261,0)
 S ECNT=0
"RTN","ECUMRPC1",262,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",263,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",264,0)
 Q
"RTN","ECUMRPC1",265,0)
 ;
"RTN","ECUMRPC1",266,0)
CHAR4 ;126, returns list of CHAR4 codes from the NATIONAL CLINIC file (#728.441)
"RTN","ECUMRPC1",267,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P($G(^(2)),""^"")=""""!($P($G(^(2)),""^"")>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",268,0)
 Q
"RTN","ECUMRPC2")
0^8^B71004659^B37122855
"RTN","ECUMRPC2",1,0)
ECUMRPC2 ;ALB/JAM - Event Capture Management Broker Utils ;5/2/17  10:47
"RTN","ECUMRPC2",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,42,46,47,49,75,72,95,114,134**;8 May 96;Build 12
"RTN","ECUMRPC2",3,0)
 ;
"RTN","ECUMRPC2",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECUMRPC2",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR #5747
"RTN","ECUMRPC2",6,0)
 ;
"RTN","ECUMRPC2",7,0)
GLOC(RESULTS,ECARY) ;
"RTN","ECUMRPC2",8,0)
 ;
"RTN","ECUMRPC2",9,0)
 ;This broker entry point returns all active Event Capture locations
"RTN","ECUMRPC2",10,0)
 ;        RPC: EC GETLOC
"RTN","ECUMRPC2",11,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC2",12,0)
 ;               STAT   - Active or inactive locations (optional)
"RTN","ECUMRPC2",13,0)
 ;               A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC2",14,0)
 ;
"RTN","ECUMRPC2",15,0)
 ;OUTPUTS        RESULTS - The array of active Event Capture locations.
"RTN","ECUMRPC2",16,0)
 ;               PIECE - Description
"RTN","ECUMRPC2",17,0)
 ;                 1     Location IEN
"RTN","ECUMRPC2",18,0)
 ;                 2     LOC description
"RTN","ECUMRPC2",19,0)
 ;                 3     State Abbreviation
"RTN","ECUMRPC2",20,0)
 ;                 4     Current Location Flag
"RTN","ECUMRPC2",21,0)
 ;                 5     Facility Type
"RTN","ECUMRPC2",22,0)
 ;                 6     Station Number
"RTN","ECUMRPC2",23,0)
 N LOC,STAT,CNT,CLOC,ST,NODE,ACT,ECLOC,ELOC,ECFT,ECSN
"RTN","ECUMRPC2",24,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC2",25,0)
 K ^TMP($J,"ECLOCATION")
"RTN","ECUMRPC2",26,0)
 S STAT=$P($G(ECARY),U),(CNT,LOC)=0,ACT=0 S:STAT="" STAT="A"
"RTN","ECUMRPC2",27,0)
 D GETLOC^ECL(.ECLOC)
"RTN","ECUMRPC2",28,0)
 F  S LOC=$O(ECLOC(LOC)) Q:'LOC  S ELOC($P(ECLOC(LOC),U,2))=""
"RTN","ECUMRPC2",29,0)
 S LOC=0
"RTN","ECUMRPC2",30,0)
 F  S LOC=$O(^DIC(4,LOC)) Q:'LOC  S NODE=$G(^DIC(4,LOC,0)) I NODE'="" D
"RTN","ECUMRPC2",31,0)
 . S ACT=0 ;134 Reset status before each record
"RTN","ECUMRPC2",32,0)
 . I $P(NODE,U)="" Q
"RTN","ECUMRPC2",33,0)
 . I ($P(NODE,U,11)="I")!($P($G(^DIC(4,LOC,99)),U,4)) S ACT=1
"RTN","ECUMRPC2",34,0)
 . I $S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC2",35,0)
 . S CLOC=$D(ELOC(LOC)),CLOC=$S(CLOC:"YES",1:"")
"RTN","ECUMRPC2",36,0)
 . S CNT=CNT+1,ST=$P(NODE,U,2) S:ST'="" ST=$$GET1^DIQ(5,ST,1,"I")
"RTN","ECUMRPC2",37,0)
 . S ECFT=$P($G(^DIC(4.1,+$G(^DIC(4,LOC,3)),0)),U)
"RTN","ECUMRPC2",38,0)
 . S ECSN=$P($G(^DIC(4,LOC,99)),U)
"RTN","ECUMRPC2",39,0)
 . S ^TMP($J,"ECLOCATION",CNT)=LOC_U_$P(NODE,U)_U_ST_U_CLOC_U_ECFT_U_ECSN
"RTN","ECUMRPC2",40,0)
 S RESULTS=$NA(^TMP($J,"ECLOCATION"))
"RTN","ECUMRPC2",41,0)
 Q
"RTN","ECUMRPC2",42,0)
CPTFND(RESULTS,ECARY) ;
"RTN","ECUMRPC2",43,0)
 ;
"RTN","ECUMRPC2",44,0)
 ;This broker entry point does a search on a CPT string and returns
"RTN","ECUMRPC2",45,0)
 ;a list of matches from file #81
"RTN","ECUMRPC2",46,0)
 ;        RPC: EC GETCPTLST
"RTN","ECUMRPC2",47,0)
 ;INPUTS      ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC2",48,0)
 ;             CPTSTR - CPT search string
"RTN","ECUMRPC2",49,0)
 ;
"RTN","ECUMRPC2",50,0)
 ;OUTPUTS     RESULTS - The array of cpt codes. Data pieces as follows:-
"RTN","ECUMRPC2",51,0)
 ;             CPT ien^CPT code^Name
"RTN","ECUMRPC2",52,0)
 ;
"RTN","ECUMRPC2",53,0)
 N CPTSTR,ECNT,DIC,ECTG,ECER
"RTN","ECUMRPC2",54,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC2",55,0)
 S CPTSTR=$P(ECARY,U),ECNT=0 I CPTSTR="" Q
"RTN","ECUMRPC2",56,0)
 K ^TMP($J,"ECPTSRCH"),^TMP("ECCPT",$J)
"RTN","ECUMRPC2",57,0)
 D CPTSRH(81,CPTSTR)
"RTN","ECUMRPC2",58,0)
 F  S ECNT=$O(^TMP("ECCPT",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC2",59,0)
 .S ^TMP($J,"ECPTSRCH",ECNT)=$G(^TMP("ECCPT",$J,"DILIST",2,ECNT))_U_^TMP("ECCPT",$J,"DILIST","ID",ECNT,.01)_U_^TMP("ECCPT",$J,"DILIST","ID",ECNT,2)
"RTN","ECUMRPC2",60,0)
 K ^TMP("ECCPT",$J)
"RTN","ECUMRPC2",61,0)
 S RESULTS=$NA(^TMP($J,"ECPTSRCH"))
"RTN","ECUMRPC2",62,0)
 Q
"RTN","ECUMRPC2",63,0)
 ;
"RTN","ECUMRPC2",64,0)
PXFND(RESULTS,ECARY) ;
"RTN","ECUMRPC2",65,0)
 ;
"RTN","ECUMRPC2",66,0)
 ;This broker entry point does a search on a procedure string and returns
"RTN","ECUMRPC2",67,0)
 ;a list of matches from file #81 and/or #725
"RTN","ECUMRPC2",68,0)
 ;        RPC: EC GETPXLST
"RTN","ECUMRPC2",69,0)
 ;INPUTS      ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC2",70,0)
 ;             PXSTR -  Procedure search string
"RTN","ECUMRPC2",71,0)
 ;
"RTN","ECUMRPC2",72,0)
 ;OUTPUTS     RESULTS - The array of procedures. Data pieces as follows:-
"RTN","ECUMRPC2",73,0)
 ;             Procedure ien^Procedure code  Procedure Name
"RTN","ECUMRPC2",74,0)
 ;
"RTN","ECUMRPC2",75,0)
 N CPTSTR,ECNT,DIC,ECX,CNT,ECTG,ECER,PXSTR,ECSTR
"RTN","ECUMRPC2",76,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC2",77,0)
 S PXSTR=$P(ECARY,U),ECNT=0 I PXSTR="" Q
"RTN","ECUMRPC2",78,0)
 K ^TMP($J,"ECPXSRCH"),^TMP("ECCPT",$J),^TMP("ECCPT1",$J)
"RTN","ECUMRPC2",79,0)
 D 
"RTN","ECUMRPC2",80,0)
 . I $P(PXSTR,".")="A" D CPTSRH(81,$P(PXSTR,".",2)) Q
"RTN","ECUMRPC2",81,0)
 . I $P(PXSTR,".")="B" D CPTSRH(725,$P(PXSTR,".",2)) Q
"RTN","ECUMRPC2",82,0)
 . F ECX=81,725 D CPTSRH(ECX,PXSTR)
"RTN","ECUMRPC2",83,0)
 F  S ECNT=$O(^TMP("ECCPT",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC2",84,0)
 .S ECID=$G(^TMP("ECCPT",$J,"DILIST",2,ECNT))_";ICPT("
"RTN","ECUMRPC2",85,0)
 .S ECSTR=^TMP("ECCPT",$J,"DILIST","ID",ECNT,.01)_"  "_^(2)
"RTN","ECUMRPC2",86,0)
 .S ^TMP($J,"ECPXSRCH",ECNT)=ECID_U_ECSTR
"RTN","ECUMRPC2",87,0)
 S ECNT=0,CNT=+$O(^TMP($J,"ECPXSRCH","A"),-1)
"RTN","ECUMRPC2",88,0)
 F  S ECNT=$O(^TMP("ECCPT1",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC2",89,0)
 .S CNT=CNT+1,ECID=$G(^TMP("ECCPT1",$J,"DILIST",2,ECNT))_";EC(725,"
"RTN","ECUMRPC2",90,0)
 .S ECSTR=^TMP("ECCPT1",$J,"DILIST","ID",ECNT,1)_"  "_^(.01)
"RTN","ECUMRPC2",91,0)
 .S ^TMP($J,"ECPXSRCH",CNT)=ECID_U_ECSTR
"RTN","ECUMRPC2",92,0)
 K ^TMP("ECCPT",$J),^TMP("ECCPT1",$J)
"RTN","ECUMRPC2",93,0)
 S RESULTS=$NA(^TMP($J,"ECPXSRCH"))
"RTN","ECUMRPC2",94,0)
 Q
"RTN","ECUMRPC2",95,0)
CPTSRH(FILE,CPTSTR) ;Searches either file 81 or 725 for a CPT string
"RTN","ECUMRPC2",96,0)
 I FILE=81 D
"RTN","ECUMRPC2",97,0)
 .D FINDIC(81,"",".01;2","M",CPTSTR,100,"","I $P($$CPT^ICPTCOD(+Y),""^"",7)","","^TMP(""ECCPT"",$J)")
"RTN","ECUMRPC2",98,0)
 I FILE=725 D
"RTN","ECUMRPC2",99,0)
 .D FINDIC(725,"",".01;1","M",CPTSTR,100,"","I '$P(^(0),""^"",3)","","^TMP(""ECCPT1"",$J)")
"RTN","ECUMRPC2",100,0)
 Q
"RTN","ECUMRPC2",101,0)
FINDIC(ECFL,ECIEN,ECFLD,ECFLG,ECVAL,ECN,ECINDX,ECSCN,ECID,ECTG,ECER) ;
"RTN","ECUMRPC2",102,0)
 ;Find records in a file base on search string
"RTN","ECUMRPC2",103,0)
 S ECER=$G(ECER)
"RTN","ECUMRPC2",104,0)
 D FIND^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECVAL,ECN,ECINDX,ECSCN,ECID,ECTG,ECER)
"RTN","ECUMRPC2",105,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECVAL,ECN,ECINDX,ECSCN,ECID
"RTN","ECUMRPC2",106,0)
 Q
"RTN","ECUMRPC2",107,0)
PROV(ECNUM) ;Return a set of providers from the NEW PERSON file
"RTN","ECUMRPC2",108,0)
 ;Input Variables:-
"RTN","ECUMRPC2",109,0)
 ;  ECNUM  - # of records to return
"RTN","ECUMRPC2",110,0)
 ;  FROM   - text to $O from
"RTN","ECUMRPC2",111,0)
 ;  DATE   - checks for an active person class on this date (optional)
"RTN","ECUMRPC2",112,0)
 ;  ECDIR  - $O direction
"RTN","ECUMRPC2",113,0)
 ;  KEY    - screen users by security key (optional)
"RTN","ECUMRPC2",114,0)
 ;  REPORT - Set to "R" to get all entries from file 200, "NLP" if
"RTN","ECUMRPC2",115,0)
 ;           getting list of users who don't have a person class
"RTN","ECUMRPC2",116,0)
 ;           and set to blank if only users with a person class should
"RTN","ECUMRPC2",117,0)
 ;           be returned.
"RTN","ECUMRPC2",118,0)
 ;  ECDSS  - IEN of DSS unit
"RTN","ECUMRPC2",119,0)
 ;
"RTN","ECUMRPC2",120,0)
 ;Output Variables:-
"RTN","ECUMRPC2",121,0)
 ;  ^TMP($J,"ECFIND",1..n - returned array
"RTN","ECUMRPC2",122,0)
 ;     IEN of file 200^Provider Name^occupation^specialty^subspecialty
"RTN","ECUMRPC2",123,0)
 ;
"RTN","ECUMRPC2",124,0)
 N I,IEN,CNT,FROM,DATE,ECUTN,ECDSS S I=0,CNT=$S(+$G(ECNUM)>0:ECNUM,1:44) ;134
"RTN","ECUMRPC2",125,0)
 S FROM=$P(ECSTR,"|"),DATE=$P(ECSTR,"|",2),REPORT=$P(ECSTR,"|",3),ECDSS=$P(ECSTR,"|",4) ;134 Added DSS unit IEN to parameters
"RTN","ECUMRPC2",126,0)
 F  Q:I'<CNT  S FROM=$O(^VA(200,"B",FROM),ECDIR) Q:FROM=""  D
"RTN","ECUMRPC2",127,0)
 . S IEN="" F  S IEN=$O(^VA(200,"B",FROM,IEN),ECDIR) Q:'IEN  D 
"RTN","ECUMRPC2",128,0)
 . . I IEN<1 Q  ;134 Don't include special users postmaster and sharedmail
"RTN","ECUMRPC2",129,0)
 . . I REPORT="R" S I=I+1,^TMP($J,"ECFIND",I)=IEN_"^"_FROM_"^" Q
"RTN","ECUMRPC2",130,0)
 . . S ECUTN=$$GET^XUA4A72(IEN,DATE)
"RTN","ECUMRPC2",131,0)
 . . I REPORT="NLP" S:ECUTN<1&($$ACTIVE^XUSER(IEN)) I=I+1,^TMP($J,"ECFIND",I)=IEN_"^"_FROM_"^" Q  ;134, if getting non-licensed providers, return all active users who aren't providers
"RTN","ECUMRPC2",132,0)
 . . I DATE>0,ECUTN<1,'$D(^EC(722,"B",IEN)) Q  ;134 Allows for users in file 722
"RTN","ECUMRPC2",133,0)
 . . I $D(^EC(722,"B",IEN)),$P($G(^ECD(+ECDSS,0)),U,14)'="N" Q  ;134 Only add user if they're in the file and the DSS Unit is a 'send no records' type
"RTN","ECUMRPC2",134,0)
 . . S I=I+1,^TMP($J,"ECFIND",I)=IEN_"^"_FROM_"^"_$P(ECUTN,"^",2,4)
"RTN","ECUMRPC2",135,0)
 Q
"RTN","ECUMRPC2",136,0)
LEX ; returns a list of ICD code from lexicon lookup; called from ECUMRPC1
"RTN","ECUMRPC2",137,0)
 ;Input Variables:-
"RTN","ECUMRPC2",138,0)
 ;  ECSTR  - APP|ECX|ECDT
"RTN","ECUMRPC2",139,0)
 ;           application|Search string|procedure date
"RTN","ECUMRPC2",140,0)
 ;
"RTN","ECUMRPC2",141,0)
 ;Output Variables:-
"RTN","ECUMRPC2",142,0)
 ;  ^TMP($J,"ECFIND",1..n - returned array
"RTN","ECUMRPC2",143,0)
 ;     ICD Code^LEX description^IEN of file 80^IEN of file 757.01
"RTN","ECUMRPC2",144,0)
 ;
"RTN","ECUMRPC2",145,0)
 N LEX,ILST,I,IEN,ECX,APP,ECDT,ICD,ICDIEN,DIC,ECCS,ECCD,IMP
"RTN","ECUMRPC2",146,0)
 S ECX=$P(ECSTR,"|",2),ECDT=$P(ECSTR,"|",3)
"RTN","ECUMRPC2",147,0)
 S ECDT=$G(ECDT,DT),DIC="^ICD9("
"RTN","ECUMRPC2",148,0)
 ; Determine Active Coding System based on Date Of Interest 
"RTN","ECUMRPC2",149,0)
 S ECCS=$$SINFO^ICDEX("DIAG",ECDT) ; Supported by ICR #5747
"RTN","ECUMRPC2",150,0)
 ;spacebar default for DUZ
"RTN","ECUMRPC2",151,0)
 I ECX=" ",+($G(DUZ))>0 S IEN=$G(^DISV(DUZ,DIC)) I +IEN D
"RTN","ECUMRPC2",152,0)
 .; Load the ICD code info - Supported by ICR 5747
"RTN","ECUMRPC2",153,0)
 .S ECCD=$$ICDDX^ICDEX(IEN,ECDT,+ECCS,"I") S:+ECCD>0 ECX=$P(ECCD,U,2)
"RTN","ECUMRPC2",154,0)
 S IMP=$$IMPDATE^LEXU("10D"),APP=$S(ECDT<IMP:"ICD",1:"10D") ; Supported by ICR 5679
"RTN","ECUMRPC2",155,0)
 K ^TMP("LEXSCH",$J)
"RTN","ECUMRPC2",156,0)
 D CONFIG^LEXSET(APP,APP,ECDT)    ;LEX DBIA1577
"RTN","ECUMRPC2",157,0)
 D LOOK^LEXA(ECX,APP,1,"",ECDT)   ;LEX DBIA2950
"RTN","ECUMRPC2",158,0)
 I '$D(LEX("LIST",1)) S ^TMP($J,"ECFIND",1)="0^No matches found." Q
"RTN","ECUMRPC2",159,0)
 ;LEX DBIA1573
"RTN","ECUMRPC2",160,0)
 S ILST=1,IEN=+LEX("LIST",1)
"RTN","ECUMRPC2",161,0)
 D ICD I ICDIEN<0 S ^TMP($J,"ECFIND",1)="0^No matches found." Q
"RTN","ECUMRPC2",162,0)
 S ^TMP($J,"ECFIND",ILST)=ICD_U_$P(LEX("LIST",1),U,2)_U_ICDIEN_U_LEX("LIST",1),I=""
"RTN","ECUMRPC2",163,0)
 ; ICD10 Changed to maximum of 101 entries
"RTN","ECUMRPC2",164,0)
 F  S I=$O(^TMP("LEXFND",$J,I)) Q:I'<0!(ILST=101)  D
"RTN","ECUMRPC2",165,0)
 .; Loop through all the ICD codes
"RTN","ECUMRPC2",166,0)
 .S IEN=""
"RTN","ECUMRPC2",167,0)
 .F  S IEN=$O(^TMP("LEXFND",$J,I,IEN)) Q:'IEN  D
"RTN","ECUMRPC2",168,0)
 ..D ICD I ICDIEN<0 Q
"RTN","ECUMRPC2",169,0)
 ..S ILST=ILST+1
"RTN","ECUMRPC2",170,0)
 ..S ^TMP($J,"ECFIND",ILST)=ICD_U_^TMP("LEXFND",$J,I,IEN)_U_ICDIEN_U_IEN
"RTN","ECUMRPC2",171,0)
 I $O(^TMP($J,"ECFIND",0))="" S ^TMP($J,"ECFIND",1)="0^No matches found."
"RTN","ECUMRPC2",172,0)
 K ^TMP("LEXFND",$J),^TMP("LEXHIT",$J)
"RTN","ECUMRPC2",173,0)
 Q
"RTN","ECUMRPC2",174,0)
 ;
"RTN","ECUMRPC2",175,0)
ICD ;ICD code
"RTN","ECUMRPC2",176,0)
 S ICD=$$ONE^LEXU(IEN,ECDT,APP) ; Supported by ICR 5679, ICD-9 and ICD-10
"RTN","ECUMRPC2",177,0)
 S ECCS=$$SINFO^ICDEX("DIAG",ECDT) ; Supported by ICR #5747
"RTN","ECUMRPC2",178,0)
 S ICDIEN=+$$ICDDX^ICDEX(ICD,ECDT,+ECCS,"E") ; Supported by ICR #5747
"RTN","ECUMRPC2",179,0)
 Q
"RTN","ECUMRPC2",180,0)
 ;
"RTN","ECUMRPC2",181,0)
DTPD(RESULTS,ECARY) ;Delete test patient data
"RTN","ECUMRPC2",182,0)
 ;134 Section added for deleting test patient data
"RTN","ECUMRPC2",183,0)
 ;Input Variable
"RTN","ECUMRPC2",184,0)
 ;   ECARY - Set to "I" to get information or "D" to delete records
"RTN","ECUMRPC2",185,0)
 ;Output variable
"RTN","ECUMRPC2",186,0)
 ;   RESULT - Returns account info when ECARY is "I" or success
"RTN","ECUMRPC2",187,0)
 ;            when ECARY is "D"
"RTN","ECUMRPC2",188,0)
 ;
"RTN","ECUMRPC2",189,0)
 N MODE,ZTRTN,ZTIO,ZTDTH,ZTSK
"RTN","ECUMRPC2",190,0)
 S MODE=$P(ECARY,U) Q:MODE=""
"RTN","ECUMRPC2",191,0)
 D SETENV^ECUMRPC ;Set up minimal variables for an RPC call
"RTN","ECUMRPC2",192,0)
 K ^TMP($J,"ECDELETE") ;Clear TMP global space
"RTN","ECUMRPC2",193,0)
 I MODE="I" D  S RESULTS=$NA(^TMP($J,"ECDELETE")) Q
"RTN","ECUMRPC2",194,0)
 .S $P(^TMP($J,"ECDELETE",0),U)=$S($$PROD^XUPROD=0:"Test",1:"Production") ;Is account a test or production environment
"RTN","ECUMRPC2",195,0)
 .S $P(^TMP($J,"ECDELETE",0),U,2)=$S($G(^XMB("NETNAME"))'="":$G(^XMB("NETNAME")),1:"network name undefined") ;Get account/network name
"RTN","ECUMRPC2",196,0)
 .S $P(^TMP($J,"ECDELETE",0),U,3)=$S($P($G(^XTMP("ECDELETE","DEL")),U)'="":$$FMTE^XLFDT($P($G(^XTMP("ECDELETE","DEL")),U)),1:"First Time") ;Date deletion last run
"RTN","ECUMRPC2",197,0)
 .S $P(^TMP($J,"ECDELETE",0),U,4)=$S($P($G(^XTMP("ECDELETE","DEL")),U,2)'="":$$GET1^DIQ(200,$P($G(^XTMP("ECDELETE","DEL")),U,2)_",",.01),1:"") ;Get name of person who did deletion
"RTN","ECUMRPC2",198,0)
 .S $P(^TMP($J,"ECDELETE",0),U,5)=+$P($G(^XTMP("ECDELETE","DEL")),U,3) ;Status of deletion (0 not running, 1 if running)
"RTN","ECUMRPC2",199,0)
 ;
"RTN","ECUMRPC2",200,0)
 ;If deleting, queue to run in the background
"RTN","ECUMRPC2",201,0)
 I MODE="D" D  S RESULTS=$NA(^TMP($J,"ECDELETE")) Q
"RTN","ECUMRPC2",202,0)
 .S ZTRTN="DEL^ECDTPD",ZTIO="",ZTDTH=$$NOW^XLFDT,ZTDESC="Delete test patient data from Event Capture Patient file (#721)"
"RTN","ECUMRPC2",203,0)
 .D ^%ZTLOAD
"RTN","ECUMRPC2",204,0)
 .S ^TMP($J,"ECDELETE",0)=$S($G(ZTSK):1,1:0) ;Return 1 if success, otherwise 0
"RTN","ECUMRPC2",205,0)
 .I $G(ZTSK) S ^XTMP("ECDELETE",0)=$$FMADD^XLFDT($$DT^XLFDT,730)_"^"_$$DT^XLFDT_"^Info for EC test patient deletion",^XTMP("ECDELETE","DEL")=$$NOW^XLFDT_"^"_$G(DUZ,0)_"^"_1
"RTN","ECUMRPC2",206,0)
 .Q
"RTN","ECUMRPC2",207,0)
 Q
"RTN","ECUMRPC2",208,0)
 ;
"RTN","ECV3RPC")
0^1^B66640374^B68891193
"RTN","ECV3RPC",1,0)
ECV3RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;9/1/16  12:45
"RTN","ECV3RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,47,49,61,72,131,134**;8 May 96;Build 12
"RTN","ECV3RPC",3,0)
 ;
"RTN","ECV3RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV3RPC",6,0)
 ;    1. DSS UNIT IEN, DSS UNIT NAME (DSS UNIT NUMBER IS NO LONGER CHECKED PER PATCH 134)
"RTN","ECV3RPC",7,0)
 ;    2. ORDERING SECTION
"RTN","ECV3RPC",8,0)
 ;    3. PROCEDURE CODE
"RTN","ECV3RPC",9,0)
 ;    4. CPT Modifiers
"RTN","ECV3RPC",10,0)
 ;    5. CATEGORY
"RTN","ECV3RPC",11,0)
 ;
"RTN","ECV3RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",13,0)
 ;
"RTN","ECV3RPC",14,0)
 ;--Set up error flag
"RTN","ECV3RPC",15,0)
 S ECERRFLG=0
"RTN","ECV3RPC",16,0)
 ;
"RTN","ECV3RPC",17,0)
 ;--GET DSS Unit IEN--
"RTN","ECV3RPC",18,0)
 S ECDSSIEN=""
"RTN","ECV3RPC",19,0)
 ; -Check for DSS Unit IEN first
"RTN","ECV3RPC",20,0)
 I ECUNITV'="",(ECUNITV'=+ECUNITV) D
"RTN","ECV3RPC",21,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",22,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",23,0)
 . D ERROR
"RTN","ECV3RPC",24,0)
 I ECUNITV,'ECERRFLG,$D(^ECD(ECUNITV,0)) S ECDSSIEN=ECUNITV
"RTN","ECV3RPC",25,0)
 I ECUNITV,'ECERRFLG,'$D(^ECD(ECUNITV,0)) D
"RTN","ECV3RPC",26,0)
 . ; DSS unit ien not found on VistA
"RTN","ECV3RPC",27,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",28,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",29,0)
 . D ERROR
"RTN","ECV3RPC",30,0)
 . Q
"RTN","ECV3RPC",31,0)
 ; -Check for DSS Unit Number - Starting with patch 134, DSS Unit Number is no longer checked. Entire section commented out
"RTN","ECV3RPC",32,0)
 ;I ECDCMV'="",'$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",33,0)
 ;. ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",34,0)
 ;. S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",35,0)
 ;. S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",36,0)
 ;. D ERROR
"RTN","ECV3RPC",37,0)
 ;I 'ECERRFLG,ECDCMV'="",$D(^ECD("C",ECDCMV)) S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",38,0)
 ;Check if the next record is a match
"RTN","ECV3RPC",39,0)
 ;I 'ECERRFLG,'ECDSSIEN,ECDCMV'="",$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",40,0)
 ;. S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",41,0)
 ;. I '$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",42,0)
 ;. . ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",43,0)
 ;. . S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",44,0)
 ;. . S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",45,0)
 ;. . D ERROR
"RTN","ECV3RPC",46,0)
 ;. . Q
"RTN","ECV3RPC",47,0)
 ; -Check for DSS Unit Name
"RTN","ECV3RPC",48,0)
 I ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",49,0)
 . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",50,0)
 . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",51,0)
 . D ERROR
"RTN","ECV3RPC",52,0)
 ; 
"RTN","ECV3RPC",53,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",$D(^ECD("B",ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECDSSV,0))
"RTN","ECV3RPC",54,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",55,0)
 . N ECNXTDSS
"RTN","ECV3RPC",56,0)
 . S ECNXTDSS=$O(^ECD("B",ECDSSV))
"RTN","ECV3RPC",57,0)
 . I ECDSSV=$E(ECNXTDSS,1,$L(ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECNXTDSS,0))
"RTN","ECV3RPC",58,0)
 . ;
"RTN","ECV3RPC",59,0)
 . I ECDSSV'=$E(ECNXTDSS,1,$L(ECDSSV)) D
"RTN","ECV3RPC",60,0)
 . . ; DSS unit name not found on VistA
"RTN","ECV3RPC",61,0)
 . . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",62,0)
 . . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",63,0)
 . . D ERROR
"RTN","ECV3RPC",64,0)
 . . Q
"RTN","ECV3RPC",65,0)
 . Q
"RTN","ECV3RPC",66,0)
 ;
"RTN","ECV3RPC",67,0)
 I ECDSSIEN="" D  ;131 Need to have a DSS Unit identified
"RTN","ECV3RPC",68,0)
 .S ECERRMSG=$P($T(DSS4^ECV3RPC),";;",2)
"RTN","ECV3RPC",69,0)
 .S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",70,0)
 .D ERROR
"RTN","ECV3RPC",71,0)
 .Q
"RTN","ECV3RPC",72,0)
 ;--Validate Ordering section or derive from DSS Unit IEN--
"RTN","ECV3RPC",73,0)
 I ECOSV'="" D
"RTN","ECV3RPC",74,0)
 . S ECOSIEN=$O(^ECC(723,"B",ECOSV,0))
"RTN","ECV3RPC",75,0)
 . I ECOSIEN="" D
"RTN","ECV3RPC",76,0)
 . . ; Ordering Section "B" x-ref doesn't exist
"RTN","ECV3RPC",77,0)
 . . S ECERRMSG=$P($T(ORDSEC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",78,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",79,0)
 . . D ERROR
"RTN","ECV3RPC",80,0)
 . . Q
"RTN","ECV3RPC",81,0)
 . Q
"RTN","ECV3RPC",82,0)
 I ECOSV="" D
"RTN","ECV3RPC",83,0)
 . I 'ECDSSIEN D
"RTN","ECV3RPC",84,0)
 . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",85,0)
 . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",86,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",87,0)
 . . D ERROR
"RTN","ECV3RPC",88,0)
 . . Q
"RTN","ECV3RPC",89,0)
 . I ECDSSIEN D
"RTN","ECV3RPC",90,0)
 . . S ECOSIEN=$P(^ECD(ECDSSIEN,0),U,3)
"RTN","ECV3RPC",91,0)
 . . I ECOSIEN="" D
"RTN","ECV3RPC",92,0)
 . . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",93,0)
 . . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",94,0)
 . . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",95,0)
 . . . D ERROR
"RTN","ECV3RPC",96,0)
 . . . Q
"RTN","ECV3RPC",97,0)
 . . Q
"RTN","ECV3RPC",98,0)
 ;
"RTN","ECV3RPC",99,0)
 ;--Procedure must be a National Procedure, Local Procedure,   --
"RTN","ECV3RPC",100,0)
 ;--or a CPT code, and the EC Event Code Screen must be active --
"RTN","ECV3RPC",101,0)
 N ECFOUND,ECPI,ECDT
"RTN","ECV3RPC",102,0)
 S ECERRFLG=0,ECFOUND=0
"RTN","ECV3RPC",103,0)
 S %DT="XST",X=$G(ECENCV,"NOW") D ^%DT S ECDT=+Y
"RTN","ECV3RPC",104,0)
 ; Check for National Procedure code (D x-ref)
"RTN","ECV3RPC",105,0)
 I $D(^EC(725,"D",ECPROCV)) D
"RTN","ECV3RPC",106,0)
 . S ECPROCV=$O(^EC(725,"D",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",107,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",108,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",109,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7) S ECFOUND=1
"RTN","ECV3RPC",110,0)
 ; Check for local procedure code (DL x-ref)
"RTN","ECV3RPC",111,0)
 I 'ECFOUND,$D(^EC(725,"DL",ECPROCV)) D
"RTN","ECV3RPC",112,0)
 . S ECPROCV=$O(^EC(725,"DL",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",113,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",114,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",115,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7)  S ECFOUND=1
"RTN","ECV3RPC",116,0)
 ; Check for CPT code (B x-ref)
"RTN","ECV3RPC",117,0)
 I 'ECFOUND S ECPI=$$CPT^ICPTCOD(ECPROCV,ECDT) I +ECPI>0,$P(ECPI,"^",7) D
"RTN","ECV3RPC",118,0)
 . S ECPROCV=$P(ECPI,"^")_";ICPT("
"RTN","ECV3RPC",119,0)
 . S ECFOUND=1
"RTN","ECV3RPC",120,0)
 ;
"RTN","ECV3RPC",121,0)
 I 'ECFOUND D
"RTN","ECV3RPC",122,0)
 . ; Invalid procedure code
"RTN","ECV3RPC",123,0)
 . S ECERRMSG=$P($T(PROC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",124,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",125,0)
 . D ERROR
"RTN","ECV3RPC",126,0)
 . Q
"RTN","ECV3RPC",127,0)
 I ECFOUND,$G(ECPI) D  ;Section added in 131 to check CPT Modifiers
"RTN","ECV3RPC",128,0)
 .N MODLIST,VALUES,MODARR,MSUB,ENTRY
"RTN","ECV3RPC",129,0)
 .S VALUES=$P(ECPI,U)_U_$G(ECENCV,$$DT^XLFDT) ;Procedure code and encounter date or today's date
"RTN","ECV3RPC",130,0)
 .D ECPXMOD^ECUERPC(.MODLIST,VALUES) ;Call returns valid modifiers for selected CPT code
"RTN","ECV3RPC",131,0)
 .S MSUB=0 F  S MSUB=$O(@MODLIST@(MSUB)) Q:'+MSUB  S MODARR($P(@MODLIST@(MSUB),U))=@MODLIST@(MSUB)
"RTN","ECV3RPC",132,0)
 .F MSUB=1:1:5 S ENTRY=@("ECMOD"_MSUB_"V") I ENTRY'="" D  ;Look at each modifier
"RTN","ECV3RPC",133,0)
 ..I '$D(MODARR(ENTRY)) D  Q
"RTN","ECV3RPC",134,0)
 ...S ECERRMSG=$P($T(MOD1^ECV3RPC),";;",2)
"RTN","ECV3RPC",135,0)
 ...S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",136,0)
 ...D ERROR
"RTN","ECV3RPC",137,0)
 ..S @("ECMOD"_MSUB_"V")=$P(MODARR(ENTRY),U,3) K MODARR(ENTRY) ;Delete modifer from list if used so it can't be duplicated
"RTN","ECV3RPC",138,0)
 ..Q
"RTN","ECV3RPC",139,0)
 .Q
"RTN","ECV3RPC",140,0)
 I ECFOUND,'$G(ECPI) D  ;131 Section checks to see if modifiers sent for a non-CPT procedure
"RTN","ECV3RPC",141,0)
 .N MSUB
"RTN","ECV3RPC",142,0)
 .F MSUB=1:1:5 I $G(@("ECMOD"_MSUB_"V"))'="" D
"RTN","ECV3RPC",143,0)
 ..S ECERRMSG=$P($T(MOD2^ECV3RPC),";;",2)
"RTN","ECV3RPC",144,0)
 ..S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",145,0)
 ..D ERROR
"RTN","ECV3RPC",146,0)
 ..Q
"RTN","ECV3RPC",147,0)
 .Q
"RTN","ECV3RPC",148,0)
 ;
"RTN","ECV3RPC",149,0)
 ; -Category must exist on the Event Capture Category file
"RTN","ECV3RPC",150,0)
 I ECCATV="" S ECCATIEN=0
"RTN","ECV3RPC",151,0)
 I ECCATV'="" D
"RTN","ECV3RPC",152,0)
 . I $D(^EC(726,"B",ECCATV)) S ECCATIEN=$O(^EC(726,"B",ECCATV,0))
"RTN","ECV3RPC",153,0)
 . I '$D(^EC(726,"B",ECCATV)) D
"RTN","ECV3RPC",154,0)
 . . ; B cross reference not found for category
"RTN","ECV3RPC",155,0)
 . . S ECERRMSG=$P($T(CAT1^ECV3RPC),";;",2)
"RTN","ECV3RPC",156,0)
 . . S ECCOLERR=ECCATPC
"RTN","ECV3RPC",157,0)
 . . D ERROR
"RTN","ECV3RPC",158,0)
 . . Q
"RTN","ECV3RPC",159,0)
 ;
"RTN","ECV3RPC",160,0)
 ; -check for active Event Code screen
"RTN","ECV3RPC",161,0)
 N ECEVNT,ECSNODE,ECSDATA,ECSFOUND
"RTN","ECV3RPC",162,0)
 I 'ECERRFLG D
"RTN","ECV3RPC",163,0)
 . S ECEVNT=ECSTAV_"-"_ECDSSIEN_"-"_ECCATIEN_"-"_ECPROCV
"RTN","ECV3RPC",164,0)
 . S (ECSNODE,ECSFOUND)=0
"RTN","ECV3RPC",165,0)
 . F  S ECSNODE=$O(^ECJ(ECSNODE)) Q:ECSNODE=""  D
"RTN","ECV3RPC",166,0)
 . . S ECSDATA=$G(^ECJ(ECSNODE,0))
"RTN","ECV3RPC",167,0)
 . . I ECEVNT=$P(ECSDATA,U,1) D
"RTN","ECV3RPC",168,0)
 . . . S ECSFOUND=1
"RTN","ECV3RPC",169,0)
 . . . I $P(ECSDATA,U,2)'="" D
"RTN","ECV3RPC",170,0)
 . . . . ; Event Code screen inactive
"RTN","ECV3RPC",171,0)
 . . . . S ECERRMSG=$P($T(PROC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",172,0)
 . . . . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",173,0)
 . . . . D ERROR
"RTN","ECV3RPC",174,0)
 . . . . Q
"RTN","ECV3RPC",175,0)
 . . . Q
"RTN","ECV3RPC",176,0)
 . . Q
"RTN","ECV3RPC",177,0)
 . Q
"RTN","ECV3RPC",178,0)
 ;
"RTN","ECV3RPC",179,0)
 ;Generate error if event code screen not found
"RTN","ECV3RPC",180,0)
 I 'ECERRFLG,'ECSFOUND,ECDSSIEN D
"RTN","ECV3RPC",181,0)
 . ; Event Code screen not found
"RTN","ECV3RPC",182,0)
 . S ECERRMSG=$P($T(PROC3^ECV3RPC),";;",2)
"RTN","ECV3RPC",183,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",184,0)
 . D ERROR
"RTN","ECV3RPC",185,0)
 . Q
"RTN","ECV3RPC",186,0)
 ;
"RTN","ECV3RPC",187,0)
 I 'ECERRFLG,'ECFILDUP D
"RTN","ECV3RPC",188,0)
 .;Check for duplicate uploaded record base on Loc_DSS Unit_Category_Proc
"RTN","ECV3RPC",189,0)
 .;Date_Procedure
"RTN","ECV3RPC",190,0)
 . N ECDUP,ECNAM,ECPNAM,ECI,ECX,Y,ECPRV,ECPROV
"RTN","ECV3RPC",191,0)
 . S (ECDA,ECDUP)=0
"RTN","ECV3RPC",192,0)
 . F  S ECDA=$O(^ECH("ADT",ECSTAV,ECSSNIEN,+ECDSSIEN,ECDT,ECDA)) Q:'ECDA  D  I ECDUP Q  ;131 Make sure DSS IEN has a value
"RTN","ECV3RPC",193,0)
 . . S ECX=$G(^ECH(ECDA,0)) I ECX="" Q
"RTN","ECV3RPC",194,0)
 . . I $P(ECX,U,8)'=ECCATIEN Q
"RTN","ECV3RPC",195,0)
 . . I $P(ECX,U,9)'=ECPROCV Q
"RTN","ECV3RPC",196,0)
 . . S ECPNAM="",ECDUP=1
"RTN","ECV3RPC",197,0)
 . . K ECPRV S ECPROV=$$GETPRV^ECPRVMUT(ECDA,.ECPRV)
"RTN","ECV3RPC",198,0)
 . . F ECI=1:1:3 S Y=$O(ECPRV("")) I Y'="" D
"RTN","ECV3RPC",199,0)
 . . . S ECNAM=$P(ECPRV(Y),U,2) K ECPRV(Y)
"RTN","ECV3RPC",200,0)
 . . . S ECPNAM=ECPNAM_" "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",201,0)
 . . S ECERRMSG="**DUPLICATE** "
"RTN","ECV3RPC",202,0)
 . . S ECERRMSG=ECERRMSG_" Clinic: "_$$GET1^DIQ(44,$P(ECX,U,19),.01,"I")
"RTN","ECV3RPC",203,0)
 . . S ECERRMSG=ECERRMSG_" Order Sect: "_$$GET1^DIQ(723,$P(ECX,U,12),.01,"I")
"RTN","ECV3RPC",204,0)
 . . S ECERRMSG=ECERRMSG_" Provider: "_ECPNAM
"RTN","ECV3RPC",205,0)
 . . S ECNAM=$$GET1^DIQ(200,$P(ECX,U,13),.01,"I")
"RTN","ECV3RPC",206,0)
 . . S ECERRMSG=ECERRMSG_" Entered: "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",207,0)
 . . S ECCOLERR=ECSTAPC    ;(???)
"RTN","ECV3RPC",208,0)
 . . D ERROR
"RTN","ECV3RPC",209,0)
 Q
"RTN","ECV3RPC",210,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV3RPC",211,0)
 ;1. record number
"RTN","ECV3RPC",212,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV3RPC",213,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV3RPC",214,0)
 ;4. error message
"RTN","ECV3RPC",215,0)
 ;
"RTN","ECV3RPC",216,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV3RPC",217,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV3RPC",218,0)
 S ECERRFLG=1
"RTN","ECV3RPC",219,0)
 Q
"RTN","ECV3RPC",220,0)
 ;
"RTN","ECV3RPC",221,0)
DSS1 ;;Invalid DSS Unit IEN
"RTN","ECV3RPC",222,0)
DSS2 ;;Invalid DSS Unit Number
"RTN","ECV3RPC",223,0)
DSS3 ;;Invalid DSS Unit Name
"RTN","ECV3RPC",224,0)
DSS4 ;;DSS Unit required. Must enter DSS Unit Name or DSS IEN
"RTN","ECV3RPC",225,0)
ORDSEC1 ;;Ordering Section "B" x-ref not on Med Specialty file(#723)
"RTN","ECV3RPC",226,0)
ORDSEC2 ;;Unable to derive Ordering Section from DSS Unit
"RTN","ECV3RPC",227,0)
PROC1 ;;Procedure/CPT invalid
"RTN","ECV3RPC",228,0)
PROC2 ;;Procedure/CPT invalid for this Station and DSS Unit
"RTN","ECV3RPC",229,0)
PROC3 ;;Event Code screen not found
"RTN","ECV3RPC",230,0)
CAT1 ;;Category "B" x-ref not on EC Category file(#726)
"RTN","ECV3RPC",231,0)
MOD1 ;;Modifier is invalid or duplicated for the selected procedure
"RTN","ECV3RPC",232,0)
MOD2 ;;Modifiers cannot be used with this procedure - no CPT identified
"RTN","ECV4RPC")
0^10^B76866291^B76379941
"RTN","ECV4RPC",1,0)
ECV4RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;11/7/16  15:43
"RTN","ECV4RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,33,49,131,134**;8 May 96;Build 12
"RTN","ECV4RPC",3,0)
 ;
"RTN","ECV4RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV4RPC",6,0)
 ;    1. VOLUME
"RTN","ECV4RPC",7,0)
 ;    2. ENCOUNTER DATE/TIME
"RTN","ECV4RPC",8,0)
 ;    3. PROVIDER NAME
"RTN","ECV4RPC",9,0)
 ;
"RTN","ECV4RPC",10,0)
 ;  Determines the following:
"RTN","ECV4RPC",11,0)
 ;    1. PATIENT STATUS
"RTN","ECV4RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",13,0)
 ;
"RTN","ECV4RPC",14,0)
 ;--Volume must be 1 thru 99--
"RTN","ECV4RPC",15,0)
 N ECVOLVN,ECPDT
"RTN","ECV4RPC",16,0)
 S ECVOLVN=ECVOLV
"RTN","ECV4RPC",17,0)
 I (+ECVOLVN'=ECVOLVN)!(ECVOLVN<1)!(ECVOLVN>99)!(ECVOLVN?.E1"."1N.N) D
"RTN","ECV4RPC",18,0)
 . S ECERRMSG=$P($T(VOL1^ECV4RPC),";;",2)
"RTN","ECV4RPC",19,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",20,0)
 . D ERROR
"RTN","ECV4RPC",21,0)
 . Q
"RTN","ECV4RPC",22,0)
 I $L(ECVOLVN)'=$L(ECVOLV) D
"RTN","ECV4RPC",23,0)
 . ; Volume must be numeric
"RTN","ECV4RPC",24,0)
 . S ECERRMSG=$P($T(VOL2^ECV4RPC),";;",2)
"RTN","ECV4RPC",25,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",26,0)
 . D ERROR
"RTN","ECV4RPC",27,0)
 . Q
"RTN","ECV4RPC",28,0)
 ;
"RTN","ECV4RPC",29,0)
 ;--Encounter Date/Time--
"RTN","ECV4RPC",30,0)
 S ECERRFLG=0
"RTN","ECV4RPC",31,0)
 N ECRETVAL
"RTN","ECV4RPC",32,0)
 S %DT(0)="-NOW",ECENCV=$TR(ECENCV," ","")
"RTN","ECV4RPC",33,0)
 D CHK^DIE(721,2,"E",ECENCV,.ECRETVAL)
"RTN","ECV4RPC",34,0)
 I $G(ECRETVAL)="^" D
"RTN","ECV4RPC",35,0)
 . ; Invalid encounter date/time
"RTN","ECV4RPC",36,0)
 . S ECERRMSG=$P($T(ENC1^ECV4RPC),";;",2)
"RTN","ECV4RPC",37,0)
 . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",38,0)
 . D ERROR
"RTN","ECV4RPC",39,0)
 . Q
"RTN","ECV4RPC",40,0)
 I $G(ECRETVAL)'="^" D
"RTN","ECV4RPC",41,0)
 . S %DT="XST",X=ECENCV
"RTN","ECV4RPC",42,0)
 . D ^%DT
"RTN","ECV4RPC",43,0)
 . S ECENCV=+Y
"RTN","ECV4RPC",44,0)
 . Q
"RTN","ECV4RPC",45,0)
 ;
"RTN","ECV4RPC",46,0)
 ;--Provider Name or IEN must be on the New Person file--
"RTN","ECV4RPC",47,0)
 ;--and provider must have active person class  --
"RTN","ECV4RPC",48,0)
 N ECPROV1,ECPROVV,NUM,PRVARR,DSSUPCE ;131,134
"RTN","ECV4RPC",49,0)
 S DSSUPCE=$S($P($G(^ECD(+$G(ECDSSIEN),0)),U,14)="N":"N",1:"A") ;134 DSS unit's send to PCE setting, either (N)o records or (A)ll records
"RTN","ECV4RPC",50,0)
 ;131 Entire section modified to add checking for up to 7 providers
"RTN","ECV4RPC",51,0)
 F NUM=1:1:7 S ECPROVV=@("ECPRV"_NUM_"V") I ECPROVV'="" D  I '$G(ECERRFLG) S @("ECPRV"_NUM_"V")=$G(ECPRVIEN)  ;If no error, set provider value to IEN
"RTN","ECV4RPC",52,0)
 .S ECERRFLG=0,ECPRVIEN=0
"RTN","ECV4RPC",53,0)
 .; Remove punctuation if necessary
"RTN","ECV4RPC",54,0)
 .I ECPROVV?.E1P S ECPROVV=$E(ECPROVV,1,$L(ECPROVV)-1)
"RTN","ECV4RPC",55,0)
 .; If provider ien passed in, find on file
"RTN","ECV4RPC",56,0)
 .S ECPROV1=ECPROVV
"RTN","ECV4RPC",57,0)
 .I +ECPROVV>0 D
"RTN","ECV4RPC",58,0)
 . . I '$D(^VA(200,ECPROVV)) D
"RTN","ECV4RPC",59,0)
 . . . ; Provider ien not found on New Person file
"RTN","ECV4RPC",60,0)
 . . . S ECERRMSG=$P($T(PROV4^ECV4RPC),";;",2)
"RTN","ECV4RPC",61,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",62,0)
 . . . D ERROR
"RTN","ECV4RPC",63,0)
 . . E  S ECPRVIEN=ECPROVV
"RTN","ECV4RPC",64,0)
 .;
"RTN","ECV4RPC",65,0)
 .; If provider name passed in, find on B x-ref and
"RTN","ECV4RPC",66,0)
 .; make sure there isn't more than 1 with same name
"RTN","ECV4RPC",67,0)
 .N ECPRVNXT,ECPRVMOR,ECPRVMNT
"RTN","ECV4RPC",68,0)
 .S (ECPRVMOR,ECPRVMNT)=0,ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",69,0)
 .I +ECPROVV'>0,$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",70,0)
 . . S ECPRVIE2=$O(^VA(200,"B",ECPROVV,""))
"RTN","ECV4RPC",71,0)
 . . S ECPRVNXT=$O(^VA(200,"B",ECPROVV,ECPRVIE2))
"RTN","ECV4RPC",72,0)
 . . I ECPRVNXT'="" D
"RTN","ECV4RPC",73,0)
 . . . S ECERRMSG=$P($T(PROV5^ECV4RPC),";;",2)
"RTN","ECV4RPC",74,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",75,0)
 . . . D ERROR
"RTN","ECV4RPC",76,0)
 . . . S ECPRVMOR=1
"RTN","ECV4RPC",77,0)
 . . E  S ECPRVIEN=ECPRVIE2
"RTN","ECV4RPC",78,0)
 .;
"RTN","ECV4RPC",79,0)
 .I +ECPROVV'>0,'$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",80,0)
 . . ; Exact match not found on New Person file
"RTN","ECV4RPC",81,0)
 . . ; Generate standard error message
"RTN","ECV4RPC",82,0)
 . . S ECERRMSG=$P($T(PROV1^ECV4RPC),";;",2)
"RTN","ECV4RPC",83,0)
 . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",84,0)
 . . D ERROR
"RTN","ECV4RPC",85,0)
 . . S ECPRVMNT=1
"RTN","ECV4RPC",86,0)
 .; If exact match not found, get provider info
"RTN","ECV4RPC",87,0)
 .I ECPRVMNT D
"RTN","ECV4RPC",88,0)
 . . ; look at next provider on file for 'close' match
"RTN","ECV4RPC",89,0)
 . . N ECINFO,ECLENPRV,NOMATCH,ECSPEC,ECSUBSP
"RTN","ECV4RPC",90,0)
 . . N ECCOUNT,ECFIRST,ECLAST,ECPRVNXT,ECPRVIE2,ECPRVIE3
"RTN","ECV4RPC",91,0)
 . . S ECLENPRV=$L(ECPROVV),(ECPRVIE2,ECPRVIE3)="",(ECCOUNT,NOMATCH)=0
"RTN","ECV4RPC",92,0)
 . . S ECPRVNXT=ECPROVV
"RTN","ECV4RPC",93,0)
 . . F  S ECPRVNXT=$O(^VA(200,"B",ECPRVNXT)) Q:NOMATCH=1!(ECPRVNXT="")  D  ;131 Added check for null
"RTN","ECV4RPC",94,0)
 . . . F  S ECPRVIE3=$O(^VA(200,"B",ECPRVNXT,ECPRVIE3)) Q:ECPRVIE3=""  D
"RTN","ECV4RPC",95,0)
 . . . . I ECPROVV'=$E(ECPRVNXT,1,ECLENPRV) S NOMATCH=1
"RTN","ECV4RPC",96,0)
 . . . . E  D
"RTN","ECV4RPC",97,0)
 . . . . . ;get provider info and add to end of error string
"RTN","ECV4RPC",98,0)
 . . . . . S ECINFO=$$GET^XUA4A72(ECPRVIE3,ECENCV)
"RTN","ECV4RPC",99,0)
 . . . . . I +ECINFO'>0 D
"RTN","ECV4RPC",100,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-"_$S(DSSUPCE="N"&($D(^EC(722,"B",ECPRVIE3))):"Non Licensed Provider",+ECINFO=-1:"Not a provider",1:"Inactive Provider for this encounter date") ;134
"RTN","ECV4RPC",101,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",102,0)
 . . . . . . ;S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",103,0)
 . . . . . I +ECINFO>0 D
"RTN","ECV4RPC",104,0)
 . . . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",105,0)
 . . . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",106,0)
 . . . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",107,0)
 . . . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",108,0)
 . . . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",109,0)
 . . . . . . S ECPCLASS=$P(^VA(200,ECPRVIE3,"USC1",0),U,3)
"RTN","ECV4RPC",110,0)
 . . . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",111,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",112,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",113,0)
 .; If more than one provider with that name, get info
"RTN","ECV4RPC",114,0)
 .I ECPRVMOR D
"RTN","ECV4RPC",115,0)
 . . N ECINFO,ECSPEC,ECSUBSP,ECPCLASS,ECCOUNT,ECFIRST,ECLAST,ECPRVIE2
"RTN","ECV4RPC",116,0)
 . . S ECCOUNT=0,ECPRVIE2=0
"RTN","ECV4RPC",117,0)
 . . ;look at each provider for exact match
"RTN","ECV4RPC",118,0)
 . . F  S ECPRVIE2=$O(^VA(200,"B",ECPROVV,ECPRVIE2)) Q:ECPRVIE2=""  D
"RTN","ECV4RPC",119,0)
 . . . S ECINFO=$$GET^XUA4A72(ECPRVIE2,ECENCV)
"RTN","ECV4RPC",120,0)
 . . . I +ECINFO'>0 D
"RTN","ECV4RPC",121,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-"_$S(DSSUPCE="N"&($D(^EC(722,"B",ECPRVIE2))):"Non Licensed Provider",+ECINFO=-1:"Not a provider",1:"Inactive Provider for this encounter date") ;134
"RTN","ECV4RPC",122,0)
 . . . . D ERROR
"RTN","ECV4RPC",123,0)
 . . . I +ECINFO>0 D
"RTN","ECV4RPC",124,0)
 . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",125,0)
 . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",126,0)
 . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",127,0)
 . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",128,0)
 . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",129,0)
 . . . . S ECPCLASS=$P(^VA(200,ECPRVIE2,"USC1",0),U,3)
"RTN","ECV4RPC",130,0)
 . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",131,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",132,0)
 . . . . D ERROR
"RTN","ECV4RPC",133,0)
 .;
"RTN","ECV4RPC",134,0)
 .; Check for valid provider
"RTN","ECV4RPC",135,0)
 .S ECPROVV=ECPROV1
"RTN","ECV4RPC",136,0)
 .S %DT="XST",X=ECENCV D ^%DT S ECPDT=$S(+Y>0:+Y,1:DT)
"RTN","ECV4RPC",137,0)
 .I 'ECERRFLG D  ;134
"RTN","ECV4RPC",138,0)
 . .I DSSUPCE="A"!(DSSUPCE="N"&('$D(^EC(722,"B",ECPRVIEN)))) D  ;134 Checking "traditional" providers if DSS unit sends all records or sends no records and person is not in file 722
"RTN","ECV4RPC",139,0)
 . . . ;134 section updated
"RTN","ECV4RPC",140,0)
 . . . I ECPRVIEN=0 S ECPRVIEN=$O(^VA(200,"B",ECPROVV,0))
"RTN","ECV4RPC",141,0)
 . . . S ECINFO=$$GET^XUA4A72(ECPRVIEN,ECPDT) I +ECINFO<0 D  ;134
"RTN","ECV4RPC",142,0)
 . . . . S ECERRMSG=$S(+ECINFO=-1:$P($T(PROV8^ECV4RPC),";;",2),1:$P($T(PROV3^ECV4RPC),";;",2)) ;134
"RTN","ECV4RPC",143,0)
 . . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",144,0)
 . . . . D ERROR
"RTN","ECV4RPC",145,0)
 . . . . Q
"RTN","ECV4RPC",146,0)
 . . . Q
"RTN","ECV4RPC",147,0)
 . .;134 Added section to check for non licensed providers
"RTN","ECV4RPC",148,0)
 . .I DSSUPCE="N",'$D(^EC(722,"B",ECPRVIEN)),$$GET^XUA4A72(ECPRVIEN,ECPDT)<0 D
"RTN","ECV4RPC",149,0)
 . . . S ECERRMSG=$P($T(PROV7^ECV4RPC),";;",2)
"RTN","ECV4RPC",150,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",151,0)
 . . . D ERROR
"RTN","ECV4RPC",152,0)
 . . . Q
"RTN","ECV4RPC",153,0)
 . . Q
"RTN","ECV4RPC",154,0)
 .I 'ECERRFLG D  ;131 Section added to check for duplicate providers
"RTN","ECV4RPC",155,0)
 ..I $D(PRVARR(ECPRVIEN)) D
"RTN","ECV4RPC",156,0)
 ...S ECERRMSG=$P($T(PROV6^ECV4RPC),";;",2)
"RTN","ECV4RPC",157,0)
 ...S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",158,0)
 ...D ERROR
"RTN","ECV4RPC",159,0)
 ..S PRVARR(ECPRVIEN)=""
"RTN","ECV4RPC",160,0)
 ..Q
"RTN","ECV4RPC",161,0)
 . Q
"RTN","ECV4RPC",162,0)
 ;
"RTN","ECV4RPC",163,0)
 ;--Determine Patient Status--
"RTN","ECV4RPC",164,0)
 S ECPSTAT=""
"RTN","ECV4RPC",165,0)
 I ECSSNIEN D
"RTN","ECV4RPC",166,0)
 . S ECERRFLG=0
"RTN","ECV4RPC",167,0)
 . S ECPSTAT=$$INOUTPT^ECUTL0(ECSSNIEN,+ECENCV)
"RTN","ECV4RPC",168,0)
 . I ECPSTAT="" D
"RTN","ECV4RPC",169,0)
 . . ; Unable to determine patient status
"RTN","ECV4RPC",170,0)
 . . S ECERRMSG=$P($T(STAT1^ECV4RPC),";;",2)
"RTN","ECV4RPC",171,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",172,0)
 . . D ERROR
"RTN","ECV4RPC",173,0)
 . . Q
"RTN","ECV4RPC",174,0)
 . I ECPSTAT="I",'ECPSTATV,'ECERRFLG D
"RTN","ECV4RPC",175,0)
 . . ; Patient status is Inpatient and override flag is false
"RTN","ECV4RPC",176,0)
 . . S ECERRMSG=$P($T(STAT2^ECV4RPC),";;",2)
"RTN","ECV4RPC",177,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",178,0)
 . . D ERROR
"RTN","ECV4RPC",179,0)
 . . Q
"RTN","ECV4RPC",180,0)
 ;
"RTN","ECV4RPC",181,0)
 ;--Check to see if the DSS Unit is 'send to PCE'--
"RTN","ECV4RPC",182,0)
 S ECDXIEN="",ECCLNIEN=""
"RTN","ECV4RPC",183,0)
 I ECPSTAT'="",ECDSSIEN'="" D
"RTN","ECV4RPC",184,0)
 . N ECDSSDAT,ECDSSPCE
"RTN","ECV4RPC",185,0)
 . S ECDSSDAT=$G(^ECD(ECDSSIEN,0))
"RTN","ECV4RPC",186,0)
 . S ECDSSPCE=$P(ECDSSDAT,U,14)
"RTN","ECV4RPC",187,0)
 . ; If Outpatient and send=O, or send=A
"RTN","ECV4RPC",188,0)
 . I ((ECPSTAT="O")&(ECDSSPCE["O"))!(ECDSSPCE["A") D
"RTN","ECV4RPC",189,0)
 . . ;Validate Diagnosis code and Associated Clinic
"RTN","ECV4RPC",190,0)
 . . D VALDIAG^ECV5RPC
"RTN","ECV4RPC",191,0)
 . . D VALCLIN^ECV5RPC
"RTN","ECV4RPC",192,0)
 . Q
"RTN","ECV4RPC",193,0)
 ;
"RTN","ECV4RPC",194,0)
 ;--Check to see if DUZ is defined
"RTN","ECV4RPC",195,0)
 S ECDUZ=$S($D(DUZ):DUZ,1:"")
"RTN","ECV4RPC",196,0)
 I ECDUZ="" D
"RTN","ECV4RPC",197,0)
 . ; Invalid DUZ
"RTN","ECV4RPC",198,0)
 . S ECERRMSG=$P($T(DUZ^ECV4RPC),";;",2),ECCOLERR=0
"RTN","ECV4RPC",199,0)
 . D ERROR
"RTN","ECV4RPC",200,0)
 Q
"RTN","ECV4RPC",201,0)
 ;;
"RTN","ECV4RPC",202,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV4RPC",203,0)
 ;1. record number
"RTN","ECV4RPC",204,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV4RPC",205,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV4RPC",206,0)
 ;4. error message
"RTN","ECV4RPC",207,0)
 ;
"RTN","ECV4RPC",208,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV4RPC",209,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV4RPC",210,0)
 S ECERRFLG=1
"RTN","ECV4RPC",211,0)
 Q
"RTN","ECV4RPC",212,0)
 ;
"RTN","ECV4RPC",213,0)
 ;Error messages:
"RTN","ECV4RPC",214,0)
 ;
"RTN","ECV4RPC",215,0)
VOL1 ;;Volume must be a whole number from 1 to 99
"RTN","ECV4RPC",216,0)
VOL2 ;;Volume must contain numeric characters only
"RTN","ECV4RPC",217,0)
PROV1 ;;Provider has no B x-ref on New Person file(#200)
"RTN","ECV4RPC",218,0)
PROV2 ;;Unable to determine person class
"RTN","ECV4RPC",219,0)
PROV3 ;;Provider does not have an active person class
"RTN","ECV4RPC",220,0)
PROV4 ;;Provider IEN not found on New Person file(#200)
"RTN","ECV4RPC",221,0)
PROV5 ;;More than one provider with this name - use IEN
"RTN","ECV4RPC",222,0)
PROV6 ;;Duplicate provider identified - providers must be unique
"RTN","ECV4RPC",223,0)
PROV7 ;;Provider not identified as a non licensed provider
"RTN","ECV4RPC",224,0)
PROV8 ;;The provider has never been assigned a provider class
"RTN","ECV4RPC",225,0)
ENC1 ;;Invalid encounter date/time.  Date cannot be in the future.
"RTN","ECV4RPC",226,0)
STAT1 ;;Unable to determine patient status
"RTN","ECV4RPC",227,0)
STAT2 ;;The patient status is Inpatient
"RTN","ECV4RPC",228,0)
DUZ ;;User DUZ not defined
"VER")
8.0^22.2
"^DD",722,722,0)
FIELD^^.01^1
"^DD",722,722,0,"DDA")
N
"^DD",722,722,0,"DT")
3161005
"^DD",722,722,0,"IX","AC",722,.01)

"^DD",722,722,0,"IX","B",722,.01)

"^DD",722,722,0,"NM","EVENT CAPTURE PROVIDER")

"^DD",722,722,.01,0)
NAME^RP200'^VA(200,^0;1^Q
"^DD",722,722,.01,1,0)
^.1
"^DD",722,722,.01,1,1,0)
722^B
"^DD",722,722,.01,1,1,1)
S ^EC(722,"B",$E(X,1,30),DA)=""
"^DD",722,722,.01,1,1,2)
K ^EC(722,"B",$E(X,1,30),DA)
"^DD",722,722,.01,1,2,0)
722^AC^MUMPS
"^DD",722,722,.01,1,2,1)
S ^EC(722,"AC",$P($G(^VA(200,X,0)),U),X)=""
"^DD",722,722,.01,1,2,2)
K ^EC(722,"AC",$P($G(^VA(200,X,0)),U),X)
"^DD",722,722,.01,1,2,"%D",0)
^^1^1^3161107^
"^DD",722,722,.01,1,2,"%D",1,0)
List of names and their corresponding IEN in file 200.
"^DD",722,722,.01,1,2,"DT")
3161107
"^DD",722,722,.01,3)
Enter the name of the person who can provide services in Event Capture.
"^DD",722,722,.01,21,0)
^^1^1^3161005^
"^DD",722,722,.01,21,1,0)
Name of the user that can provide services as a non-licensed provider.
"^DD",722,722,.01,23,0)
^^2^2^3161005^
"^DD",722,722,.01,23,1,0)
This field is a pointer to the NEW PERSON file (#200).  Users identified
"^DD",722,722,.01,23,2,0)
here will be active users without a person class.
"^DD",722,722,.01,"DT")
3161107
"^DIC",722,722,0)
EVENT CAPTURE PROVIDER^722
"^DIC",722,722,0,"GL")
^EC(722,
"^DIC",722,722,"%D",0)
^1.001^8^8^3161121^^
"^DIC",722,722,"%D",1,0)
This locally populated file contains the names of users that can provide 
"^DIC",722,722,"%D",2,0)
services to patients within the Event Capture package.
"^DIC",722,722,"%D",3,0)
 
"^DIC",722,722,"%D",4,0)
These users may only be selected for workload associated with a DSS unit
"^DIC",722,722,"%D",5,0)
that is set to not send records to PCE.  Traditionally, only licensed 
"^DIC",722,722,"%D",6,0)
providers are selected for workload within Event Capture.  This file 
"^DIC",722,722,"%D",7,0)
identifies those people who can provide a service, even though they 
"^DIC",722,722,"%D",8,0)
aren't licensed providers.
"^DIC",722,"B","EVENT CAPTURE PROVIDER",722)

"BLD",9785,6)
^128
**END**
**END**

