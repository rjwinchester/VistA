Released EC*2*139 SEQ #136
Extracted from mail message
**KIDS**:EC*2.0*139^

**INSTALL NAME**
EC*2.0*139
"BLD",10199,0)
EC*2.0*139^EVENT CAPTURE^0^3180622^y
"BLD",10199,4,0)
^9.64PA^724^2
"BLD",10199,4,721,0)
721
"BLD",10199,4,721,2,0)
^9.641^721^1
"BLD",10199,4,721,2,721,0)
EVENT CAPTURE PATIENT  (File-top level)
"BLD",10199,4,721,2,721,1,0)
^9.6411^48^4
"BLD",10199,4,721,2,721,1,45,0)
SOURCE
"BLD",10199,4,721,2,721,1,46,0)
ENTRY STATUS
"BLD",10199,4,721,2,721,1,47,0)
DATE/TIME IMPORTED
"BLD",10199,4,721,2,721,1,48,0)
SSID
"BLD",10199,4,721,222)
y^y^p^^^^n^^n
"BLD",10199,4,721,224)

"BLD",10199,4,724,0)
724
"BLD",10199,4,724,2,0)
^9.641^724^1
"BLD",10199,4,724,2,724,0)
DSS UNIT  (File-top level)
"BLD",10199,4,724,2,724,1,0)
^9.6411^16^2
"BLD",10199,4,724,2,724,1,13,0)
SEND TO PCE
"BLD",10199,4,724,2,724,1,16,0)
ALLOW DUPLICATES
"BLD",10199,4,724,222)
y^n^p^^^^n^^n
"BLD",10199,4,724,224)

"BLD",10199,4,"APDD",721,721)

"BLD",10199,4,"APDD",721,721,45)

"BLD",10199,4,"APDD",721,721,46)

"BLD",10199,4,"APDD",721,721,47)

"BLD",10199,4,"APDD",721,721,48)

"BLD",10199,4,"APDD",724,724)

"BLD",10199,4,"APDD",724,724,13)

"BLD",10199,4,"APDD",724,724,16)

"BLD",10199,4,"B",721,721)

"BLD",10199,4,"B",724,724)

"BLD",10199,6.3)
7
"BLD",10199,"ABPKG")
n
"BLD",10199,"KRN",0)
^9.67PA^779.2^20
"BLD",10199,"KRN",.4,0)
.4
"BLD",10199,"KRN",.4,"NM",0)
^9.68A^^
"BLD",10199,"KRN",.401,0)
.401
"BLD",10199,"KRN",.402,0)
.402
"BLD",10199,"KRN",.403,0)
.403
"BLD",10199,"KRN",.5,0)
.5
"BLD",10199,"KRN",.84,0)
.84
"BLD",10199,"KRN",3.6,0)
3.6
"BLD",10199,"KRN",3.8,0)
3.8
"BLD",10199,"KRN",9.2,0)
9.2
"BLD",10199,"KRN",9.2,"NM",0)
^9.68A^14^14
"BLD",10199,"KRN",9.2,"NM",1,0)
ECLATESH^^0
"BLD",10199,"KRN",9.2,"NM",2,0)
ECPCER^^0
"BLD",10199,"KRN",9.2,"NM",3,0)
ECRECER^^0
"BLD",10199,"KRN",9.2,"NM",4,0)
ECPAT SUM^^0
"BLD",10199,"KRN",9.2,"NM",5,0)
ECCP^^0
"BLD",10199,"KRN",9.2,"NM",6,0)
ECDISSUM^^0
"BLD",10199,"KRN",9.2,"NM",7,0)
ECSSDSSNUM^^0
"BLD",10199,"KRN",9.2,"NM",8,0)
ECSSSTATION^^0
"BLD",10199,"KRN",9.2,"NM",9,0)
ECSCPT^^0
"BLD",10199,"KRN",9.2,"NM",10,0)
ECSECT^^0
"BLD",10199,"KRN",9.2,"NM",11,0)
EC SCREEN COPY^^0
"BLD",10199,"KRN",9.2,"NM",12,0)
ECPAT^^0
"BLD",10199,"KRN",9.2,"NM",13,0)
ECBATCH PROC^^0
"BLD",10199,"KRN",9.2,"NM",14,0)
ECSSDIAGCODE^^0
"BLD",10199,"KRN",9.2,"NM","B","EC SCREEN COPY",11)

"BLD",10199,"KRN",9.2,"NM","B","ECBATCH PROC",13)

"BLD",10199,"KRN",9.2,"NM","B","ECCP",5)

"BLD",10199,"KRN",9.2,"NM","B","ECDISSUM",6)

"BLD",10199,"KRN",9.2,"NM","B","ECLATESH",1)

"BLD",10199,"KRN",9.2,"NM","B","ECPAT",12)

"BLD",10199,"KRN",9.2,"NM","B","ECPAT SUM",4)

"BLD",10199,"KRN",9.2,"NM","B","ECPCER",2)

"BLD",10199,"KRN",9.2,"NM","B","ECRECER",3)

"BLD",10199,"KRN",9.2,"NM","B","ECSCPT",9)

"BLD",10199,"KRN",9.2,"NM","B","ECSECT",10)

"BLD",10199,"KRN",9.2,"NM","B","ECSSDIAGCODE",14)

"BLD",10199,"KRN",9.2,"NM","B","ECSSDSSNUM",7)

"BLD",10199,"KRN",9.2,"NM","B","ECSSSTATION",8)

"BLD",10199,"KRN",9.8,0)
9.8
"BLD",10199,"KRN",9.8,"NM",0)
^9.68A^28^28
"BLD",10199,"KRN",9.8,"NM",1,0)
ECRRPC^^0^B24100495
"BLD",10199,"KRN",9.8,"NM",2,0)
ECRRPT2^^0^B50858655
"BLD",10199,"KRN",9.8,"NM",3,0)
ECLATESH^^0^B12606729
"BLD",10199,"KRN",9.8,"NM",4,0)
ECEFPAT^^0^B121783396
"BLD",10199,"KRN",9.8,"NM",5,0)
ECRECER^^0^B38346891
"BLD",10199,"KRN",9.8,"NM",6,0)
ECPAT^^0^B58151375
"BLD",10199,"KRN",9.8,"NM",7,0)
ECDISSUM^^0^B4295797
"BLD",10199,"KRN",9.8,"NM",8,0)
ECSUM^^0^B16622195
"BLD",10199,"KRN",9.8,"NM",9,0)
ECPCER^^0^B38226237
"BLD",10199,"KRN",9.8,"NM",10,0)
ECSUM1^^0^B32805163
"BLD",10199,"KRN",9.8,"NM",11,0)
ECU1RPC^^0^B55545194
"BLD",10199,"KRN",9.8,"NM",12,0)
ECV1RPC^^0^B18261455
"BLD",10199,"KRN",9.8,"NM",13,0)
ECV2RPC^^0^B25981039
"BLD",10199,"KRN",9.8,"NM",14,0)
ECSCPT^^0^B14113911
"BLD",10199,"KRN",9.8,"NM",15,0)
ECSCPT1^^0^B15662403
"BLD",10199,"KRN",9.8,"NM",16,0)
ECUMRPC1^^0^B116888350
"BLD",10199,"KRN",9.8,"NM",17,0)
ECMFDSSU^^0^B67578246
"BLD",10199,"KRN",9.8,"NM",18,0)
ECUERPC^^0^B78089602
"BLD",10199,"KRN",9.8,"NM",19,0)
ECRRPT1^^0^B60357464
"BLD",10199,"KRN",9.8,"NM",20,0)
ECV3RPC^^0^B71779614
"BLD",10199,"KRN",9.8,"NM",21,0)
ECUTL0^^0^B15671674
"BLD",10199,"KRN",9.8,"NM",22,0)
ECBEN2U^^0^B36435236
"BLD",10199,"KRN",9.8,"NM",23,0)
ECUERPC2^^0^B11049596
"BLD",10199,"KRN",9.8,"NM",24,0)
ECUMRPC^^0^B32856501
"BLD",10199,"KRN",9.8,"NM",25,0)
ECUTL3^^0^B35350036
"BLD",10199,"KRN",9.8,"NM",26,0)
ECV4RPC^^0^B78304168
"BLD",10199,"KRN",9.8,"NM",27,0)
ECUURPC^^0^B6184913
"BLD",10199,"KRN",9.8,"NM",28,0)
ECUNTRPT^^0^B9743210
"BLD",10199,"KRN",9.8,"NM","B","ECBEN2U",22)

"BLD",10199,"KRN",9.8,"NM","B","ECDISSUM",7)

"BLD",10199,"KRN",9.8,"NM","B","ECEFPAT",4)

"BLD",10199,"KRN",9.8,"NM","B","ECLATESH",3)

"BLD",10199,"KRN",9.8,"NM","B","ECMFDSSU",17)

"BLD",10199,"KRN",9.8,"NM","B","ECPAT",6)

"BLD",10199,"KRN",9.8,"NM","B","ECPCER",9)

"BLD",10199,"KRN",9.8,"NM","B","ECRECER",5)

"BLD",10199,"KRN",9.8,"NM","B","ECRRPC",1)

"BLD",10199,"KRN",9.8,"NM","B","ECRRPT1",19)

"BLD",10199,"KRN",9.8,"NM","B","ECRRPT2",2)

"BLD",10199,"KRN",9.8,"NM","B","ECSCPT",14)

"BLD",10199,"KRN",9.8,"NM","B","ECSCPT1",15)

"BLD",10199,"KRN",9.8,"NM","B","ECSUM",8)

"BLD",10199,"KRN",9.8,"NM","B","ECSUM1",10)

"BLD",10199,"KRN",9.8,"NM","B","ECU1RPC",11)

"BLD",10199,"KRN",9.8,"NM","B","ECUERPC",18)

"BLD",10199,"KRN",9.8,"NM","B","ECUERPC2",23)

"BLD",10199,"KRN",9.8,"NM","B","ECUMRPC",24)

"BLD",10199,"KRN",9.8,"NM","B","ECUMRPC1",16)

"BLD",10199,"KRN",9.8,"NM","B","ECUNTRPT",28)

"BLD",10199,"KRN",9.8,"NM","B","ECUTL0",21)

"BLD",10199,"KRN",9.8,"NM","B","ECUTL3",25)

"BLD",10199,"KRN",9.8,"NM","B","ECUURPC",27)

"BLD",10199,"KRN",9.8,"NM","B","ECV1RPC",12)

"BLD",10199,"KRN",9.8,"NM","B","ECV2RPC",13)

"BLD",10199,"KRN",9.8,"NM","B","ECV3RPC",20)

"BLD",10199,"KRN",9.8,"NM","B","ECV4RPC",26)

"BLD",10199,"KRN",19,0)
19
"BLD",10199,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",10199,"KRN",19,"NM",1,0)
EC GUI CONTEXT^^0
"BLD",10199,"KRN",19,"NM","B","EC GUI CONTEXT",1)

"BLD",10199,"KRN",19.1,0)
19.1
"BLD",10199,"KRN",101,0)
101
"BLD",10199,"KRN",409.61,0)
409.61
"BLD",10199,"KRN",771,0)
771
"BLD",10199,"KRN",779.2,0)
779.2
"BLD",10199,"KRN",870,0)
870
"BLD",10199,"KRN",8989.51,0)
8989.51
"BLD",10199,"KRN",8989.52,0)
8989.52
"BLD",10199,"KRN",8994,0)
8994
"BLD",10199,"KRN",8994,"NM",0)
^9.68A^14^14
"BLD",10199,"KRN",8994,"NM",1,0)
EC GETDSSUNIT^^0
"BLD",10199,"KRN",8994,"NM",2,0)
EC GETECSDETAIL^^0
"BLD",10199,"KRN",8994,"NM",3,0)
EC GETUSRDSSUNIT^^0
"BLD",10199,"KRN",8994,"NM",4,0)
EC FILER^^0
"BLD",10199,"KRN",8994,"NM",5,0)
EC GETLIST^^0
"BLD",10199,"KRN",8994,"NM",6,0)
EC GETDSSECS^^0
"BLD",10199,"KRN",8994,"NM",7,0)
EC GETECSCATS^^0
"BLD",10199,"KRN",8994,"NM",8,0)
EC GETECSCREEN^^0
"BLD",10199,"KRN",8994,"NM",9,0)
EC GETENCDXS^^0
"BLD",10199,"KRN",8994,"NM",10,0)
EC GETNATPX^^0
"BLD",10199,"KRN",8994,"NM",11,0)
EC GETPATCLASTAT^^0
"BLD",10199,"KRN",8994,"NM",12,0)
EC GETSCNHELP^^0
"BLD",10199,"KRN",8994,"NM",13,0)
EC GETVISITINFO^^0
"BLD",10199,"KRN",8994,"NM",14,0)
EC RECENT VISITS^^0
"BLD",10199,"KRN",8994,"NM","B","EC FILER",4)

"BLD",10199,"KRN",8994,"NM","B","EC GETDSSECS",6)

"BLD",10199,"KRN",8994,"NM","B","EC GETDSSUNIT",1)

"BLD",10199,"KRN",8994,"NM","B","EC GETECSCATS",7)

"BLD",10199,"KRN",8994,"NM","B","EC GETECSCREEN",8)

"BLD",10199,"KRN",8994,"NM","B","EC GETECSDETAIL",2)

"BLD",10199,"KRN",8994,"NM","B","EC GETENCDXS",9)

"BLD",10199,"KRN",8994,"NM","B","EC GETLIST",5)

"BLD",10199,"KRN",8994,"NM","B","EC GETNATPX",10)

"BLD",10199,"KRN",8994,"NM","B","EC GETPATCLASTAT",11)

"BLD",10199,"KRN",8994,"NM","B","EC GETSCNHELP",12)

"BLD",10199,"KRN",8994,"NM","B","EC GETUSRDSSUNIT",3)

"BLD",10199,"KRN",8994,"NM","B","EC GETVISITINFO",13)

"BLD",10199,"KRN",8994,"NM","B","EC RECENT VISITS",14)

"BLD",10199,"KRN","B",.4,.4)

"BLD",10199,"KRN","B",.401,.401)

"BLD",10199,"KRN","B",.402,.402)

"BLD",10199,"KRN","B",.403,.403)

"BLD",10199,"KRN","B",.5,.5)

"BLD",10199,"KRN","B",.84,.84)

"BLD",10199,"KRN","B",3.6,3.6)

"BLD",10199,"KRN","B",3.8,3.8)

"BLD",10199,"KRN","B",9.2,9.2)

"BLD",10199,"KRN","B",9.8,9.8)

"BLD",10199,"KRN","B",19,19)

"BLD",10199,"KRN","B",19.1,19.1)

"BLD",10199,"KRN","B",101,101)

"BLD",10199,"KRN","B",409.61,409.61)

"BLD",10199,"KRN","B",771,771)

"BLD",10199,"KRN","B",779.2,779.2)

"BLD",10199,"KRN","B",870,870)

"BLD",10199,"KRN","B",8989.51,8989.51)

"BLD",10199,"KRN","B",8989.52,8989.52)

"BLD",10199,"KRN","B",8994,8994)

"BLD",10199,"QUES",0)
^9.62^^
"BLD",10199,"REQB",0)
^9.611^3^3
"BLD",10199,"REQB",1,0)
EC*2.0*134^1
"BLD",10199,"REQB",2,0)
EC*2.0*92^1
"BLD",10199,"REQB",3,0)
EC*2.0*124^1
"BLD",10199,"REQB","B","EC*2.0*124",3)

"BLD",10199,"REQB","B","EC*2.0*134",1)

"BLD",10199,"REQB","B","EC*2.0*92",2)

"FIA",721)
EVENT CAPTURE PATIENT
"FIA",721,0)
^ECH(
"FIA",721,0,0)
721A
"FIA",721,0,1)
y^y^p^^^^n^^n
"FIA",721,0,10)

"FIA",721,0,11)

"FIA",721,0,"RLRO")

"FIA",721,0,"VR")
2.0^EC
"FIA",721,721)
1
"FIA",721,721,45)

"FIA",721,721,46)

"FIA",721,721,47)

"FIA",721,721,48)

"FIA",724)
DSS UNIT
"FIA",724,0)
^ECD(
"FIA",724,0,0)
724I
"FIA",724,0,1)
y^n^p^^^^n^^n
"FIA",724,0,10)

"FIA",724,0,11)

"FIA",724,0,"RLRO")

"FIA",724,0,"VR")
2.0^EC
"FIA",724,724)
1
"FIA",724,724,13)

"FIA",724,724,16)

"KRN",9.2,938,-1)
0^10
"KRN",9.2,938,0)
ECSECT^DSS Units for Event Capture (Enter/Edit)^2970326.0923^
"KRN",9.2,938,1,0)
^^54^54^3180302^
"KRN",9.2,938,1,1,0)
** You must define your DSS Units with this option for subsequent options 
"KRN",9.2,938,1,2,0)
in the Event Capture Software to work. **
"KRN",9.2,938,1,3,0)
 
"KRN",9.2,938,1,4,0)
This option allows you to ENTER and EDIT, but NOT DELETE, DSS Units for 
"KRN",9.2,938,1,5,0)
use with Event Capture.  DSS Units typically represent the smallest 
"KRN",9.2,938,1,6,0)
identifiable work unit in a clinical service at the medical center and 
"KRN",9.2,938,1,7,0)
are defined by the VAMCs.  A DSS Unit can represent any of the following:
"KRN",9.2,938,1,8,0)
 
"KRN",9.2,938,1,9,0)
 - An entire service
"KRN",9.2,938,1,10,0)
 - A section of a service 
"KRN",9.2,938,1,11,0)
 - A small section within a section 
"KRN",9.2,938,1,12,0)
 - A medical equipment item used in patient procedures
"KRN",9.2,938,1,13,0)
 
"KRN",9.2,938,1,14,0)
When creating DSS Units, your response to the "Allow Category Use" prompt 
"KRN",9.2,938,1,15,0)
determines whether or not procedures are grouped by categories during 
"KRN",9.2,938,1,16,0)
data entry.  When editing DSS Units, the "Allow Category Use" prompt may
"KRN",9.2,938,1,17,0)
be changed until there are event code screens defined.  Once event code
"KRN",9.2,938,1,18,0)
screens have been defined the user may only change the category setting
"KRN",9.2,938,1,19,0)
from "Yes" to "No" to remove the use of categories.  Once set to "No",
"KRN",9.2,938,1,20,0)
when event code screens are defined, the user can no longer change this
"KRN",9.2,938,1,21,0)
field.
"KRN",9.2,938,1,22,0)
 
"KRN",9.2,938,1,23,0)
The allow duplicate override prompt controls whether or not workload
"KRN",9.2,938,1,24,0)
entered via spreadsheet upload can create duplicate records.  If set to no
"KRN",9.2,938,1,25,0)
then the user may not create duplicate workload during spreadsheet 
"KRN",9.2,938,1,26,0)
upload.  If set to yes, the user is allowed to override the duplicate 
"KRN",9.2,938,1,27,0)
record message and file a duplicate record.  The default value is no as 
"KRN",9.2,938,1,28,0)
creation of duplicate workload is not typical.
"KRN",9.2,938,1,29,0)
 
"KRN",9.2,938,1,30,0)
When creating or editing DSS Units, you can choose what (if any) data 
"KRN",9.2,938,1,31,0)
is sent to PCE, and the method used to send it:  
"KRN",9.2,938,1,32,0)
 
"KRN",9.2,938,1,33,0)
 A     - Send All Records 
"KRN",9.2,938,1,34,0)
 N     - Send No Records
"KRN",9.2,938,1,35,0)
 OOS - Send Occasion Of Service Records
"KRN",9.2,938,1,36,0)
 
"KRN",9.2,938,1,37,0)
The advantage of using Event Capture to send data to PCE is that it 
"KRN",9.2,938,1,38,0)
eliminates the duplicate effort of entering the same workload data in the 
"KRN",9.2,938,1,39,0)
Scheduling software, then transmitting to PCE.    
"KRN",9.2,938,1,40,0)
 
"KRN",9.2,938,1,41,0)
If a DSS Unit is set up NOT to send to PCE (No records), then:
"KRN",9.2,938,1,42,0)
 
"KRN",9.2,938,1,43,0)
 1.) An Associated Stop Code is required to be entered for the DSS Unit
"KRN",9.2,938,1,44,0)
     during setup. 
"KRN",9.2,938,1,45,0)
 2.) A Credit Stop Code may be added. 
"KRN",9.2,938,1,46,0)
 3.) A CHAR4 Code may be added.
"KRN",9.2,938,1,47,0)
  
"KRN",9.2,938,1,48,0)
If a DSS Unit is set up to send OOS records to PCE then:
"KRN",9.2,938,1,49,0)
 
"KRN",9.2,938,1,50,0)
 1.) An Associated Stop Code is required to be entered for the DSS Unit
"KRN",9.2,938,1,51,0)
     during setup. 
"KRN",9.2,938,1,52,0)
 
"KRN",9.2,938,1,53,0)
Once a DSS unit is stored its 'Send to PCE' value cannot be changed from 
"KRN",9.2,938,1,54,0)
or to 'OOS'.
"KRN",9.2,938,10.2)
W @IOF
"KRN",9.2,943,-1)
0^5
"KRN",9.2,943,0)
ECCP^Print Category and Procedure Summary^2950424.134616^
"KRN",9.2,943,1,0)
^^27^27^3180201^
"KRN",9.2,943,1,1,0)
** You must have locations, DSS Units, local categories, and procedures 
"KRN",9.2,943,1,2,0)
defined before using this option. ** 
"KRN",9.2,943,1,3,0)
 
"KRN",9.2,943,1,4,0)
** You might want to print this report as a reference guide for data 
"KRN",9.2,943,1,5,0)
entry personnel at your facility. **
"KRN",9.2,943,1,6,0)
 
"KRN",9.2,943,1,7,0)
This option allows you to print/display the Event Code Screens for one, 
"KRN",9.2,943,1,8,0)
many or all DSS Units within a specified location.  If your DSS Units are
"KRN",9.2,943,1,9,0)
defined to group procedures by categories then procedures will print 
"KRN",9.2,943,1,10,0)
together by category.  The output includes:
"KRN",9.2,943,1,11,0)
 
"KRN",9.2,943,1,12,0)
 - Run Date 
"KRN",9.2,943,1,13,0)
 - Location 
"KRN",9.2,943,1,14,0)
 - Service 
"KRN",9.2,943,1,15,0)
 - DSS Unit
"KRN",9.2,943,1,16,0)
 - Send Status
"KRN",9.2,943,1,17,0)
 - DSS Dept. 
"KRN",9.2,943,1,18,0)
 - Category (if applicable) 
"KRN",9.2,943,1,19,0)
 - Procedure Code
"KRN",9.2,943,1,20,0)
 - Procedure Name
"KRN",9.2,943,1,21,0)
 - Synonym 
"KRN",9.2,943,1,22,0)
 - Associated Clinic IEN (if applicable) 
"KRN",9.2,943,1,23,0)
 - Associated Clinic (if applicable)
"KRN",9.2,943,1,24,0)
 - Stop Code
"KRN",9.2,943,1,25,0)
 - Credit Stop Code
"KRN",9.2,943,1,26,0)
 - CHAR4
"KRN",9.2,943,1,27,0)
 - MCA Labor Code
"KRN",9.2,943,10.2)
W @IOF
"KRN",9.2,947,-1)
0^12
"KRN",9.2,947,0)
ECPAT^Enter/Edit Patient Procedures^2970326.0928^
"KRN",9.2,947,1,0)
^^55^55^3180302^
"KRN",9.2,947,1,1,0)
** If only one or no Category is defined for the specified DSS Unit, you 
"KRN",9.2,947,1,2,0)
cannot edit Category.**
"KRN",9.2,947,1,3,0)
 
"KRN",9.2,947,1,4,0)
** If only one Procedure is defined in the DSS Unit, the Procedure field 
"KRN",9.2,947,1,5,0)
will be populated. **
"KRN",9.2,947,1,6,0)
 
"KRN",9.2,947,1,7,0)
** You must answer exposure and service-connected indicators if fields 
"KRN",9.2,947,1,8,0)
are not disabled.** 
"KRN",9.2,947,1,9,0)
 
"KRN",9.2,947,1,10,0)
** Procedures being passed to PCE must have an active Associated
"KRN",9.2,947,1,11,0)
Clinic. Procedures being passed to PCE in association with an OOS DSS unit
"KRN",9.2,947,1,12,0)
do not require a clinic to be selected, it will automatically be assigned
"KRN",9.2,947,1,13,0)
when the entry is added.**
"KRN",9.2,947,1,14,0)
 
"KRN",9.2,947,1,15,0)
This option allows you to enter patient procedures performed on an 
"KRN",9.2,947,1,16,0)
individual patient.  You should use it when you have an individual 
"KRN",9.2,947,1,17,0)
patient record to add or update. 
"KRN",9.2,947,1,18,0)
 
"KRN",9.2,947,1,19,0)
After selecting a Procedure, enter the Volume. 
"KRN",9.2,947,1,20,0)
 
"KRN",9.2,947,1,21,0)
***The ECS volume field DOES NOT capture the number of patients seen by 
"KRN",9.2,947,1,22,0)
ECS providers.***
"KRN",9.2,947,1,23,0)
 
"KRN",9.2,947,1,24,0)
Volume is usually associated with the number of procedures performed.
"KRN",9.2,947,1,25,0)
The volume field can be used to record and track 3 different values:
"KRN",9.2,947,1,26,0)
 
"KRN",9.2,947,1,27,0)
1. Number of Procedures: When a selected procedure code CONTAINS inherent
"KRN",9.2,947,1,28,0)
time elements (such as "30M Massage Therapy") then a volume of one is
"KRN",9.2,947,1,29,0)
usually entered, meaning 1 of this specific procedure/service was
"KRN",9.2,947,1,30,0)
provided.
"KRN",9.2,947,1,31,0)
 
"KRN",9.2,947,1,32,0)
     OR
"KRN",9.2,947,1,33,0)
 
"KRN",9.2,947,1,34,0)
2. Time: Amount of time shown in increments of minutes (M). When a 
"KRN",9.2,947,1,35,0)
selected procedure code DOES NOT have inherent time elements THEN the
"KRN",9.2,947,1,36,0)
volume field is used to capture the time spent completing the
"KRN",9.2,947,1,37,0)
procedure/service: 1 = 15M, 2 = 30M, 3= 45M
"KRN",9.2,947,1,38,0)
 
"KRN",9.2,947,1,39,0)
     OR
"KRN",9.2,947,1,40,0)
 
"KRN",9.2,947,1,41,0)
3. Days: Number of days patient was in VA paid facilities such as State 
"KRN",9.2,947,1,42,0)
Home, DOM, or a Nursing Home. When entering workload for a patient in a 
"KRN",9.2,947,1,43,0)
VA-Paid facility, volume of 1 means 1 day, 2 means 2 days, etc.
"KRN",9.2,947,1,44,0)
 
"KRN",9.2,947,1,45,0)
NOTE: It is imperative to understand and keep track of the values you are 
"KRN",9.2,947,1,46,0)
entering in the volume field and what they represent for the patients you 
"KRN",9.2,947,1,47,0)
are treating.
"KRN",9.2,947,1,48,0)
 
"KRN",9.2,947,1,49,0)
You can enter one procedure per patient. Once all fields have been 
"KRN",9.2,947,1,50,0)
entered, click the 'OK' button to save the record. Click the 'Cancel'
"KRN",9.2,947,1,51,0)
button to exit the screen without filing the record. Click the 'Add'
"KRN",9.2,947,1,52,0)
button to file the current record, and to initialize the form for a new
"KRN",9.2,947,1,53,0)
procedure to be added.
"KRN",9.2,947,1,54,0)
 
"KRN",9.2,947,1,55,0)
See User Manual for details on all features such as Recent Visits.
"KRN",9.2,947,10.2)
W @IOF
"KRN",9.2,949,-1)
0^4
"KRN",9.2,949,0)
ECPAT SUM^Patient Summary - Event Capture^2950425.06451^
"KRN",9.2,949,1,0)
^^17^17^3171011^
"KRN",9.2,949,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,949,1,2,0)
 
"KRN",9.2,949,1,3,0)
This option allows you to print/display procedure-related data within a
"KRN",9.2,949,1,4,0)
specified date range for a selected patient.  The output includes:
"KRN",9.2,949,1,5,0)
 
"KRN",9.2,949,1,6,0)
 - Procedure date and time
"KRN",9.2,949,1,7,0)
 - Procedure
"KRN",9.2,949,1,8,0)
 - Volume
"KRN",9.2,949,1,9,0)
 - Modifier(s)
"KRN",9.2,949,1,10,0)
 - Location
"KRN",9.2,949,1,11,0)
 - DSS unit name and IEN
"KRN",9.2,949,1,12,0)
 - Associated Clinic, stop code, credit stop, CHAR4 code and MCA Labor Code 
"KRN",9.2,949,1,13,0)
 - Service
"KRN",9.2,949,1,14,0)
 - Section where performed
"KRN",9.2,949,1,15,0)
 - Procedure reason(s) (optional)
"KRN",9.2,949,1,16,0)
 - Ordering Section
"KRN",9.2,949,1,17,0)
 - Provider
"KRN",9.2,949,10.2)
W @IOF
"KRN",9.2,956,-1)
0^13
"KRN",9.2,956,0)
ECBATCH PROC^Data Entry (Batch) by Procedure^2970326.0929^^
"KRN",9.2,956,1,0)
^^53^53^3180302^
"KRN",9.2,956,1,1,0)
This option allows you to enter a single procedure for multiple patients 
"KRN",9.2,956,1,2,0)
as a batch entry.
"KRN",9.2,956,1,3,0)
 
"KRN",9.2,956,1,4,0)
** If only one or no Category is defined for the specified DSS Unit, you 
"KRN",9.2,956,1,5,0)
cannot edit Category.**
"KRN",9.2,956,1,6,0)
 
"KRN",9.2,956,1,7,0)
** If only one Procedure is defined in the DSS Unit, the Procedure field 
"KRN",9.2,956,1,8,0)
will be populated. **
"KRN",9.2,956,1,9,0)
 
"KRN",9.2,956,1,10,0)
** Procedures being passed to PCE must have an active Associated
"KRN",9.2,956,1,11,0)
Clinic.  Procedures being passed to PCE in association with an OOS DSS 
"KRN",9.2,956,1,12,0)
unit do not require a clinic to be selected, it will automatically
"KRN",9.2,956,1,13,0)
be assigned when the entry is added.**
"KRN",9.2,956,1,14,0)
 
"KRN",9.2,956,1,15,0)
After selecting a Procedure, enter the Volume. 
"KRN",9.2,956,1,16,0)
 
"KRN",9.2,956,1,17,0)
***The ECS volume field DOES NOT capture the number of patients seen by 
"KRN",9.2,956,1,18,0)
ECS providers.***
"KRN",9.2,956,1,19,0)
 
"KRN",9.2,956,1,20,0)
Volume is usually associated with the number of procedures performed.
"KRN",9.2,956,1,21,0)
The volume field can be used to record and track 3 different values:
"KRN",9.2,956,1,22,0)
 
"KRN",9.2,956,1,23,0)
1. Number of Procedures: When a selected procedure code CONTAINS inherent
"KRN",9.2,956,1,24,0)
time elements (such as "30M Massage Therapy") then a volume of one is
"KRN",9.2,956,1,25,0)
usually entered, meaning 1 of this specific procedure/service was
"KRN",9.2,956,1,26,0)
provided.
"KRN",9.2,956,1,27,0)
 
"KRN",9.2,956,1,28,0)
     OR
"KRN",9.2,956,1,29,0)
 
"KRN",9.2,956,1,30,0)
2. Time: Amount of time shown in increments of minutes (M). When a 
"KRN",9.2,956,1,31,0)
selected procedure code DOES NOT have inherent time elements THEN the
"KRN",9.2,956,1,32,0)
volume field is used to capture the time spent completing the
"KRN",9.2,956,1,33,0)
procedure/service: 1 = 15M, 2 = 30M, 3= 45M
"KRN",9.2,956,1,34,0)
 
"KRN",9.2,956,1,35,0)
     OR
"KRN",9.2,956,1,36,0)
 
"KRN",9.2,956,1,37,0)
3. Days: Number of days patient was in VA paid facilities such as State 
"KRN",9.2,956,1,38,0)
Home, DOM, or a Nursing Home. When entering workload for a patient in a 
"KRN",9.2,956,1,39,0)
VA-Paid facility, volume of 1 means 1 day, 2 means 2 days, etc.
"KRN",9.2,956,1,40,0)
 
"KRN",9.2,956,1,41,0)
NOTE: It is imperative to understand and keep track of the values you are 
"KRN",9.2,956,1,42,0)
entering in the volume field and what they represent for the patients you 
"KRN",9.2,956,1,43,0)
are treating.
"KRN",9.2,956,1,44,0)
 
"KRN",9.2,956,1,45,0)
After you verify that the procedure information is correct, enter the 
"KRN",9.2,956,1,46,0)
first Patient.  When you finish entering data for the first patient, 
"KRN",9.2,956,1,47,0)
click the Add button and repeat until all Patients are entered.
"KRN",9.2,956,1,48,0)
 
"KRN",9.2,956,1,49,0)
** You must answer exposure and service-connected indicators if fields 
"KRN",9.2,956,1,50,0)
are not disabled.** 
"KRN",9.2,956,1,51,0)
 
"KRN",9.2,956,1,52,0)
Use the View button to ensure all data has been entered before completing 
"KRN",9.2,956,1,53,0)
the entry by clicking the OK button.
"KRN",9.2,956,2,0)
^9.22A^^0
"KRN",9.2,957,-1)
0^2
"KRN",9.2,957,0)
ECPCER^PCE Data Summary^2970123.0045^
"KRN",9.2,957,1,0)
^^17^17^3171011^
"KRN",9.2,957,1,1,0)
** This report is formatted for 132-column output. **
"KRN",9.2,957,1,2,0)
 
"KRN",9.2,957,1,3,0)
This option allows you to print/display procedure data that was sent to
"KRN",9.2,957,1,4,0)
the Patient Care Encounter (PCE) software for a selected patient within a
"KRN",9.2,957,1,5,0)
specified date range.  The output includes:
"KRN",9.2,957,1,6,0)
 
"KRN",9.2,957,1,7,0)
 - Patient name
"KRN",9.2,957,1,8,0)
 - Date Range
"KRN",9.2,957,1,9,0)
 - Date and time of procedure
"KRN",9.2,957,1,10,0)
 - Procedure name as sent to PCE
"KRN",9.2,957,1,11,0)
 - Volume
"KRN",9.2,957,1,12,0)
 - Provider
"KRN",9.2,957,1,13,0)
 - Location
"KRN",9.2,957,1,14,0)
 - Associated Clinic (Stop Code/Credit Stop/CHAR4 Code/MCA Labor Code)
"KRN",9.2,957,1,15,0)
 - CPT code
"KRN",9.2,957,1,16,0)
 - ICD-10 code
"KRN",9.2,957,1,17,0)
 - Modifier(s)
"KRN",9.2,1490,-1)
0^8
"KRN",9.2,1490,0)
ECSSSTATION^Location^3010529.134427^^
"KRN",9.2,1490,1,0)
^^6^6^3171031^
"KRN",9.2,1490,1,1,0)
The location must exist in the Institution file (#4).
"KRN",9.2,1490,1,2,0)
 
"KRN",9.2,1490,1,3,0)
For State Home spreadsheet uploads, the location is automatically 
"KRN",9.2,1490,1,4,0)
populated and is the Internal Entry Number (IEN).
"KRN",9.2,1490,1,5,0)
 
"KRN",9.2,1490,1,6,0)
For regular spreadsheet uploads, the location is the station number.
"KRN",9.2,1490,10.2)
W @IOF
"KRN",9.2,1495,-1)
0^7
"KRN",9.2,1495,0)
ECSSDSSNUM^DSS Unit Number^3010529.135312^
"KRN",9.2,1495,1,0)
^^3^3^3171025^
"KRN",9.2,1495,1,1,0)
The DSS Department is no longer being used to identify the DSS Unit as it
"KRN",9.2,1495,1,2,0)
isn't unique.  If you enter a value in this field, it will be ignored.  
"KRN",9.2,1495,1,3,0)
Use the DSS Unit Name or the DSS Unit IEN to identify the DSS Unit.
"KRN",9.2,1495,10.2)
W @IOF
"KRN",9.2,1502,-1)
0^14
"KRN",9.2,1502,0)
ECSSDIAGCODE^Diagnosis Code^3010529.140231^
"KRN",9.2,1502,1,0)
^^6^6^3180302^
"KRN",9.2,1502,1,1,0)
This is the primary diagnosis code value.  It must exist in the ICD 
"KRN",9.2,1502,1,2,0)
Diagnosis file (#80).
"KRN",9.2,1502,1,3,0)
 
"KRN",9.2,1502,1,4,0)
Note: The Diagnosis Code is only required for records sent to PCE, and 
"KRN",9.2,1502,1,5,0)
will be ignored otherwise.  For DSS units set up as 'OOS', the diagnosis 
"KRN",9.2,1502,1,6,0)
field will be ignored.
"KRN",9.2,1502,10.2)
W @IOF
"KRN",9.2,1549,-1)
0^9
"KRN",9.2,1549,0)
ECSCPT^Event Code Screens with CPT Codes^3050824.162938^
"KRN",9.2,1549,1,0)
^^16^16^3171019^
"KRN",9.2,1549,1,1,0)
This option allows you to print/display event code screens 
"KRN",9.2,1549,1,2,0)
with active/inactive/both CPT codes for all or a specific DSS
"KRN",9.2,1549,1,3,0)
Unit. The output includes:
"KRN",9.2,1549,1,4,0)
 
"KRN",9.2,1549,1,5,0)
 - Run Date and Time
"KRN",9.2,1549,1,6,0)
 - Location
"KRN",9.2,1549,1,7,0)
 - DSS Unit
"KRN",9.2,1549,1,8,0)
 - Category (if applicable)
"KRN",9.2,1549,1,9,0)
 - Procedure Name
"KRN",9.2,1549,1,10,0)
 - National Number
"KRN",9.2,1549,1,11,0)
 - CPT Code 
"KRN",9.2,1549,1,12,0)
   (Inactive CPT codes are flagged with an *I* when printing 
"KRN",9.2,1549,1,13,0)
    both active and inactive codes)
"KRN",9.2,1549,1,14,0)
 - Event Code Screen Synonym
"KRN",9.2,1549,1,15,0)
 - Associated Clinic
"KRN",9.2,1549,1,16,0)
 - MCA Labor Code
"KRN",9.2,1549,10.2)
W @IOF
"KRN",9.2,1554,-1)
0^3
"KRN",9.2,1554,0)
ECRECER^Event Capture Encounters Report^3111220.153224^
"KRN",9.2,1554,1,0)
^^20^20^3171011^
"KRN",9.2,1554,1,1,0)
** This report is formatted for a 132-column device. **
"KRN",9.2,1554,1,2,0)
 
"KRN",9.2,1554,1,3,0)
This option allows you to print/display/export Event Capture encounter
"KRN",9.2,1554,1,4,0)
data within a specified date range for selected locations and DSS units.
"KRN",9.2,1554,1,5,0)
The report can be sorted by patient or provider.
"KRN",9.2,1554,1,6,0)
 
"KRN",9.2,1554,1,7,0)
The output includes:
"KRN",9.2,1554,1,8,0)
 
"KRN",9.2,1554,1,9,0)
 - Patient name 
"KRN",9.2,1554,1,10,0)
 - Last four digits of patient SSN
"KRN",9.2,1554,1,11,0)
 - Inpatient/Outpatient Indicator
"KRN",9.2,1554,1,12,0)
 - Procedure Date and Time
"KRN",9.2,1554,1,13,0)
 - Primary provider
"KRN",9.2,1554,1,14,0)
 - DSS unit
"KRN",9.2,1554,1,15,0)
 - Volume
"KRN",9.2,1554,1,16,0)
 - Clinic
"KRN",9.2,1554,1,17,0)
 - Stop Code
"KRN",9.2,1554,1,18,0)
 - Credit Stop Code
"KRN",9.2,1554,1,19,0)
 - CHAR4
"KRN",9.2,1554,1,20,0)
 - MCA Labor Code
"KRN",9.2,1560,-1)
0^11
"KRN",9.2,1560,0)
EC SCREEN COPY^Copy EC Screens to another DSS Unit^3121207.100603^
"KRN",9.2,1560,1,0)
^^34^34^3180301^
"KRN",9.2,1560,1,1,0)
** Active (Current) Event Capture Locations must exist before using this 
"KRN",9.2,1560,1,2,0)
option. Update Location information through the Event Capture Management
"KRN",9.2,1560,1,3,0)
Menu. ** 
"KRN",9.2,1560,1,4,0)
 
"KRN",9.2,1560,1,5,0)
** DSS Units must exist before using this option.  Add or update DSS 
"KRN",9.2,1560,1,6,0)
Units through the Event Capture Management Menu. ** 
"KRN",9.2,1560,1,7,0)
 
"KRN",9.2,1560,1,8,0)
** Event Code (EC) Screens define procedure information and must exist 
"KRN",9.2,1560,1,9,0)
before using this option. Add or update EC Screens through the Event 
"KRN",9.2,1560,1,10,0)
Capture Management Menu. During data entry, only the procedures defined 
"KRN",9.2,1560,1,11,0)
in Event Code Screens can be selected. **
"KRN",9.2,1560,1,12,0)
 
"KRN",9.2,1560,1,13,0)
This option allows the Event Capture System (ECS) manager to copy EC 
"KRN",9.2,1560,1,14,0)
Screens from one DSS Unit to another.
"KRN",9.2,1560,1,15,0)
 
"KRN",9.2,1560,1,16,0)
1. Select an existing DSS Unit.
"KRN",9.2,1560,1,17,0)
2. Select "Copy EC Screens to another DSS Unit" from the Edit menu.
"KRN",9.2,1560,1,18,0)
3. Select the target DSS Unit (i.e. the DSS Unit to which the EC Screen 
"KRN",9.2,1560,1,19,0)
   will be copied).
"KRN",9.2,1560,1,20,0)
4. From the "Copy Event Code Screen" form, select the desired fields:
"KRN",9.2,1560,1,21,0)
        Category (optional);
"KRN",9.2,1560,1,22,0)
        Location (required);
"KRN",9.2,1560,1,23,0)
        Default Associated Clinic (Enabled if the DSS unit is 'Send to 
"KRN",9.2,1560,1,24,0)
        PCE'. The field is disabled when the DSS Unit is 'Send no 
"KRN",9.2,1560,1,25,0)
        records' or 'OOS').
"KRN",9.2,1560,1,26,0)
5. When all desired fields are populated, clicking the "OK" button will 
"KRN",9.2,1560,1,27,0)
   apply all changes, effectively copying the EC Screen to the target DSS 
"KRN",9.2,1560,1,28,0)
   Unit.
"KRN",9.2,1560,1,29,0)
6. Clicking the "Skip this EC Screen" button will pass over the presently 
"KRN",9.2,1560,1,30,0)
   displayed record and prompt the user with the next EC Screen record.
"KRN",9.2,1560,1,31,0)
7. Clicking the "Close" button will stop processing and close the form.
"KRN",9.2,1560,1,32,0)
 
"KRN",9.2,1560,1,33,0)
Additional EC Screens can be copied by repeating the steps described 
"KRN",9.2,1560,1,34,0)
above.
"KRN",9.2,1565,-1)
0^6
"KRN",9.2,1565,0)
ECDISSUM^Disabled Category & Procedure Summary Report^3151124.143316^
"KRN",9.2,1565,1,0)
^^33^33^3171011^
"KRN",9.2,1565,1,1,0)
** You must have locations, DSS Units, local categories, and procedures 
"KRN",9.2,1565,1,2,0)
defined before using this option. ** 
"KRN",9.2,1565,1,3,0)
 
"KRN",9.2,1565,1,4,0)
** This report can be printed or exported as a reference guide for data 
"KRN",9.2,1565,1,5,0)
entry personnel at your facility. **
"KRN",9.2,1565,1,6,0)
 
"KRN",9.2,1565,1,7,0)
This option allows you to print/display ECS categories that have been 
"KRN",9.2,1565,1,8,0)
disabled for one or all DSS Units within a specified location.  If your 
"KRN",9.2,1565,1,9,0)
DSS Units have categories enabled and have Event Code Screens defined to 
"KRN",9.2,1565,1,10,0)
those categories, this report displays the EC screens that now have 
"KRN",9.2,1565,1,11,0)
disabled categories.
"KRN",9.2,1565,1,12,0)
  
"KRN",9.2,1565,1,13,0)
All procedures print for each disabled category.  
"KRN",9.2,1565,1,14,0)
 
"KRN",9.2,1565,1,15,0)
The print and preview report output includes the headers:
"KRN",9.2,1565,1,16,0)
 
"KRN",9.2,1565,1,17,0)
 - Run Date 
"KRN",9.2,1565,1,18,0)
 - Location 
"KRN",9.2,1565,1,19,0)
 - Service 
"KRN",9.2,1565,1,20,0)
 - DSS Unit
"KRN",9.2,1565,1,21,0)
 - DSS Unit IEN
"KRN",9.2,1565,1,22,0)
 - Send Status  
"KRN",9.2,1565,1,23,0)
 - DSS Dept 
"KRN",9.2,1565,1,24,0)
 - Procedure Code
"KRN",9.2,1565,1,25,0)
 - Procedure Name
"KRN",9.2,1565,1,26,0)
 - Synonym
"KRN",9.2,1565,1,27,0)
 - Clinic IEN/Clinic Name/Stop Code/Credit Stop/CHAR4 code/MCA Labor Code
"KRN",9.2,1565,1,28,0)
 
"KRN",9.2,1565,1,29,0)
The report also includes, within the text of the report, the disabled 
"KRN",9.2,1565,1,30,0)
category name, the DSS Unit status, and the Event Code Screen status.
"KRN",9.2,1565,1,31,0)
 
"KRN",9.2,1565,1,32,0)
The Excel export report output fields are the same as above along 
"KRN",9.2,1565,1,33,0)
with the CPT code. The exported report does not include the run date.
"KRN",9.2,1565,2,0)
^9.22A^^0
"KRN",9.2,1570,-1)
0^1
"KRN",9.2,1570,0)
ECLATESH^Possible Late State Home Entries Report^3171003.160904^
"KRN",9.2,1570,1,0)
^^15^15^3180301^
"KRN",9.2,1570,1,1,0)
This option allows the user to print/display all possible late State Home 
"KRN",9.2,1570,1,2,0)
entries for the selected date range. These are State Home patients that
"KRN",9.2,1570,1,3,0)
were entered for previous months that could be included in the ECS Extract
"KRN",9.2,1570,1,4,0)
for the time period you have selected. The output includes:
"KRN",9.2,1570,1,5,0)
 
"KRN",9.2,1570,1,6,0)
- DSS Unit
"KRN",9.2,1570,1,7,0)
- Location
"KRN",9.2,1570,1,8,0)
- Patient Name
"KRN",9.2,1570,1,9,0)
- Last four digits of Patient SSN (full SSN on export)
"KRN",9.2,1570,1,10,0)
- Procedure Date and Time
"KRN",9.2,1570,1,11,0)
- Entered Date and Time
"KRN",9.2,1570,1,12,0)
- Entered By (export only)
"KRN",9.2,1570,1,13,0)
- Procedure Code
"KRN",9.2,1570,1,14,0)
- Volume
"KRN",9.2,1570,1,15,0)
- Primary Provider
"KRN",19,11187,-1)
0^1
"KRN",19,11187,0)
EC GUI CONTEXT^EC GUI Context version 2.5.0.0^^B^^^^^^^^EVENT CAPTURE
"KRN",19,11187,1,0)
^19.06^1^1^3180205^^^^
"KRN",19,11187,1,1,0)
This is the Broker Client/Server type option for the Event Capture GUI option
"KRN",19,11187,99)
58583,58456
"KRN",19,11187,99.1)
62872,41516
"KRN",19,11187,"RPC",0)
^19.05P^59^59
"KRN",19,11187,"RPC",1,0)
EC DSSCATCHECK
"KRN",19,11187,"RPC",2,0)
EC FILER
"KRN",19,11187,"RPC",3,0)
EC GETBATPROCS
"KRN",19,11187,"RPC",4,0)
EC GETCAT
"KRN",19,11187,"RPC",5,0)
EC GETCPTLST
"KRN",19,11187,"RPC",6,0)
EC GETDSSECS
"KRN",19,11187,"RPC",7,0)
EC GETDSSUNIT
"KRN",19,11187,"RPC",8,0)
EC GETDSSUNITUSRS
"KRN",19,11187,"RPC",9,0)
EC GETECLOC
"KRN",19,11187,"RPC",10,0)
EC GETECSCATS
"KRN",19,11187,"RPC",11,0)
EC GETECSCREEN
"KRN",19,11187,"RPC",12,0)
EC GETECSDETAIL
"KRN",19,11187,"RPC",13,0)
EC GETECSPROCS
"KRN",19,11187,"RPC",14,0)
EC GETENCDXS
"KRN",19,11187,"RPC",15,0)
EC GETIEN
"KRN",19,11187,"RPC",16,0)
EC GETLIST
"KRN",19,11187,"RPC",17,0)
EC GETLOC
"KRN",19,11187,"RPC",18,0)
EC GETNATPX
"KRN",19,11187,"RPC",19,0)
EC GETPATCLASTAT
"KRN",19,11187,"RPC",20,0)
EC GETPATELIG
"KRN",19,11187,"RPC",21,0)
EC GETPATINFO
"KRN",19,11187,"RPC",22,0)
EC GETPATPROCS
"KRN",19,11187,"RPC",23,0)
EC GETPRODEFS
"KRN",19,11187,"RPC",24,0)
EC GETPROVIDER
"KRN",19,11187,"RPC",25,0)
EC GETPXLST
"KRN",19,11187,"RPC",26,0)
EC GETPXMODIFIER
"KRN",19,11187,"RPC",27,0)
EC GETPXREASON
"KRN",19,11187,"RPC",28,0)
EC GETSCNHELP
"KRN",19,11187,"RPC",29,0)
EC GETUSRDSSUNIT
"KRN",19,11187,"RPC",30,0)
EC REPORTS
"KRN",19,11187,"RPC",31,0)
EC VALIDATE SPREADSHEET DATA
"KRN",19,11187,"RPC",32,0)
ORWU USERINFO
"KRN",19,11187,"RPC",33,0)
ORWU HASKEY
"KRN",19,11187,"RPC",34,0)
ORWU DEVICE
"KRN",19,11187,"RPC",35,0)
SC PATIENT LOOKUP
"KRN",19,11187,"RPC",36,0)
ORWU NEWPERS
"KRN",19,11187,"RPC",37,0)
DDR GET DD HELP
"KRN",19,11187,"RPC",38,0)
DDR FINDER
"KRN",19,11187,"RPC",39,0)
DDR FIND1
"KRN",19,11187,"RPC",40,0)
DDR LISTER
"KRN",19,11187,"RPC",41,0)
EC GETDATE
"KRN",19,11187,"RPC",42,0)
EC CLASHELP
"KRN",19,11187,"RPC",43,0)
DDR GETS ENTRY DATA
"KRN",19,11187,"RPC",44,0)
DG CHK BS5 XREF Y/N
"KRN",19,11187,"RPC",45,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,11187,"RPC",46,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,11187,"RPC",47,0)
DG CHK PAT/DIV MEANS TEST
"KRN",19,11187,"RPC",48,0)
EC SPACEBAR
"KRN",19,11187,"RPC",49,0)
EC DIEDON
"KRN",19,11187,"RPC",50,0)
EC GETPATCH
"KRN",19,11187,"RPC",51,0)
EC GETVISITINFO
"KRN",19,11187,"RPC",52,0)
EC GETVERSION
"KRN",19,11187,"RPC",53,0)
ORWU DT
"KRN",19,11187,"RPC",54,0)
ECOB METHOD
"KRN",19,11187,"RPC",55,0)
ECOB FACTORY
"KRN",19,11187,"RPC",56,0)
EC RECENT VISITS
"KRN",19,11187,"RPC",57,0)
EC ICD10IMPLEMENTATIONDATE
"KRN",19,11187,"RPC",58,0)
EC GET DEFAULT PROVIDER
"KRN",19,11187,"RPC",59,0)
EC DELETE TEST PATIENT DATA
"KRN",19,11187,"U")
EC GUI CONTEXT VERSION 2.5.0.0
"KRN",8994,817,-1)
0^8
"KRN",8994,817,0)
EC GETECSCREEN^ECSCN^ECUMRPC^4^A^^^1
"KRN",8994,817,1,0)
^8994.01^2^2^3180305^^^^
"KRN",8994,817,1,1,0)
Returns a list active, inactive or both of Event Code Screens from EC EVENT 
"KRN",8994,817,1,2,0)
CODE SCREENS FILE #720.3.
"KRN",8994,817,2,0)
^8994.02A^1^1
"KRN",8994,817,2,1,0)
ECARY^1
"KRN",8994,817,2,1,1,0)
^^16^16^3180305^
"KRN",8994,817,2,1,1,1,0)
Input variable ECARY can contains the following elements separated by 
"KRN",8994,817,2,1,1,2,0)
up-arrow.
"KRN",8994,817,2,1,1,3,0)
 
"KRN",8994,817,2,1,1,4,0)
  STAT   - Active and/or inactive Event Code Screens
"KRN",8994,817,2,1,1,5,0)
           A-ctive (default), I-nactive, B-oth
"KRN",8994,817,2,1,1,6,0)
  LOCIEN - Location IEN (optional)
"KRN",8994,817,2,1,1,7,0)
  DSSIEN - DSS IEN (optional)
"KRN",8994,817,2,1,1,8,0)
 
"KRN",8994,817,2,1,1,9,0)
If no parameters are passed, a status of active is assumed as well as all
"KRN",8994,817,2,1,1,10,0)
locations. 
"KRN",8994,817,2,1,1,11,0)
 
"KRN",8994,817,2,1,1,12,0)
If a LOCIEN is passed then only the event codes screens associated with
"KRN",8994,817,2,1,1,13,0)
that location are returned. 
"KRN",8994,817,2,1,1,14,0)
 
"KRN",8994,817,2,1,1,15,0)
If a DSSIEN is passed then only the event code screens associated with
"KRN",8994,817,2,1,1,16,0)
that DSS Unit are returned.
"KRN",8994,817,2,"B","ECARY",1)

"KRN",8994,817,3,0)
^8994.03^6^6^3010503^^^
"KRN",8994,817,3,1,0)
The result array contains the following data separated by up-arrow.
"KRN",8994,817,3,2,0)
   1. 720.3 ien
"KRN",8994,817,3,3,0)
   2. Location description
"KRN",8994,817,3,4,0)
   3. DSS Unit description
"KRN",8994,817,3,5,0)
   4. Category Description
"KRN",8994,817,3,6,0)
   5. Procedure 5 digit code and description
"KRN",8994,819,-1)
0^2
"KRN",8994,819,0)
EC GETECSDETAIL^ECSDTLS^ECUMRPC^1^A^^^1
"KRN",8994,819,1,0)
^8994.01^2^2^3180209^^
"KRN",8994,819,1,1,0)
Returns details on a specific Event Code Screen from the EC EVENT CODE 
"KRN",8994,819,1,2,0)
SCREENS FILE #720.3.
"KRN",8994,819,2,0)
^8994.02A^1^1
"KRN",8994,819,2,1,0)
ECARY^1^^1
"KRN",8994,819,2,1,1,0)
^8994.021^1^1^3180209^^^^
"KRN",8994,819,2,1,1,1,0)
The input parameter ECARY contains the Event code screen IEN.
"KRN",8994,819,2,"B","ECARY",1)

"KRN",8994,819,3,0)
^^9^9^3180209^
"KRN",8994,819,3,1,0)
The return variable contains the following data separated by up-arrows.
"KRN",8994,819,3,2,0)
  1. 720.3 ien
"KRN",8994,819,3,3,0)
  2. event code screen name
"KRN",8994,819,3,4,0)
  3. synonym
"KRN",8994,819,3,5,0)
  4. volume
"KRN",8994,819,3,6,0)
  5. associated clinic
"KRN",8994,819,3,7,0)
  6. Procedure reason indicator
"KRN",8994,819,3,8,0)
  7. Status
"KRN",8994,819,3,9,0)
  8. Send to PCE status - 1 if sent, 0 if not
"KRN",8994,821,-1)
0^12
"KRN",8994,821,0)
EC GETSCNHELP^ECHELP^ECUURPC^4^P^^^1
"KRN",8994,821,1,0)
^^1^1^3180306^
"KRN",8994,821,1,1,0)
Returns the text from the HELP FRAME file (#9.2) based on a help frame.
"KRN",8994,821,2,0)
^8994.02A^1^1
"KRN",8994,821,2,1,0)
ECARY^1^^1
"KRN",8994,821,2,1,1,0)
^^1^1^3180306^
"KRN",8994,821,2,1,1,1,0)
Input variable ECARY contains the name of the help frame.
"KRN",8994,821,2,"B","ECARY",1)

"KRN",8994,821,3,0)
^^1^1^3180306^
"KRN",8994,821,3,1,0)
Returns an array with help text from the HELP FRAME File (#9.2).
"KRN",8994,823,-1)
0^3
"KRN",8994,823,0)
EC GETUSRDSSUNIT^USRUNT^ECUERPC^4^R^^^1
"KRN",8994,823,1,0)
^8994.01^1^1^3180305^^^^
"KRN",8994,823,1,1,0)
Returns an array of DSS units for which the user has access.
"KRN",8994,823,2,0)
^8994.02A^1^1
"KRN",8994,823,2,1,0)
ECARY^1^^1
"KRN",8994,823,2,1,1,0)
^^13^13^3180305^
"KRN",8994,823,2,1,1,1,0)
The input variable ECARY contain the following '^' delimited values.
"KRN",8994,823,2,1,1,2,0)
 
"KRN",8994,823,2,1,1,3,0)
  1. ECL      - Location IEN, #4 (if defined gives User's DSS units for a
"KRN",8994,823,2,1,1,4,0)
location)
"KRN",8994,823,2,1,1,5,0)
 
"KRN",8994,823,2,1,1,6,0)
  2. ECDUZ    - New Person IEN, #200 (if defined gives list of DSS
"KRN",8994,823,2,1,1,7,0)
Units available to user)
"KRN",8994,823,2,1,1,8,0)
  
"KRN",8994,823,2,1,1,9,0)
  3. ECSUMUSR - Set if getting DSS units for the print category and 
"KRN",8994,823,2,1,1,10,0)
procedure summary report (optional)
"KRN",8994,823,2,1,1,11,0)
 
"KRN",8994,823,2,1,1,12,0)
  4. ECDUST   - DSS unit status (Active/Inactive/Both) if getting units 
"KRN",8994,823,2,1,1,13,0)
for the print category and procedure summary report (optional)
"KRN",8994,823,2,"B","ECARY",1)

"KRN",8994,823,3,0)
^8994.03^7^7^3180305^^^
"KRN",8994,823,3,1,0)
Returns an array of DSS Units. Data pieces separated by an up-arrow as 
"KRN",8994,823,3,2,0)
follows:-
"KRN",8994,823,3,3,0)
 
"KRN",8994,823,3,4,0)
   1. IEN of file 724
"KRN",8994,823,3,5,0)
   2. Name of DSS Unit
"KRN",8994,823,3,6,0)
   3. Send to PCE Flag
"KRN",8994,823,3,7,0)
   4. Data entry date/time default
"KRN",8994,826,-1)
0^7
"KRN",8994,826,0)
EC GETECSCATS^CAT^ECUERPC^4^A^^^1
"KRN",8994,826,1,0)
^8994.01^2^2^3180305^^^^
"KRN",8994,826,1,1,0)
Returns an array of categories for an Event Code screen based on a specific
"KRN",8994,826,1,2,0)
location and DSS unit.
"KRN",8994,826,2,0)
^8994.02A^1^1
"KRN",8994,826,2,1,0)
ECARY^1^^1
"KRN",8994,826,2,1,1,0)
^^4^4^3180305^
"KRN",8994,826,2,1,1,1,0)
Input variable ECARY contains the following values separated by up-arrow.
"KRN",8994,826,2,1,1,2,0)
  1. ECL    - Location IEN
"KRN",8994,826,2,1,1,3,0)
  2. ECD    - DSS Unit IEN
"KRN",8994,826,2,1,1,4,0)
  3. ECCSTA - Category status, A-ctive (default), I-nactive, B-oth
"KRN",8994,826,2,"B","ECARY",1)

"KRN",8994,826,3,0)
^8994.03^3^3^3010503^^^
"KRN",8994,826,3,1,0)
Returns an array of categories with data pieces as follows:-
"KRN",8994,826,3,2,0)
  1.  Category IEN
"KRN",8994,826,3,3,0)
  2.  Category description
"KRN",8994,833,-1)
0^10
"KRN",8994,833,0)
EC GETNATPX^ECNATPX^ECUMRPC^4^A^^^1
"KRN",8994,833,1,0)
^8994.01^2^2^3180305^^^^
"KRN",8994,833,1,1,0)
Returns an array of active, inactive or both of Event Capture national and 
"KRN",8994,833,1,2,0)
local Procedures from file #725.
"KRN",8994,833,2,0)
^8994.02A^1^1
"KRN",8994,833,2,1,0)
ECARY^1
"KRN",8994,833,2,1,1,0)
^^6^6^3180305^
"KRN",8994,833,2,1,1,1,0)
Input variable ECARY contains the following subscripted elements
"KRN",8994,833,2,1,1,2,0)
   ECPX - Procedures to output, L- local, N- National, B- Both
"KRN",8994,833,2,1,1,3,0)
   STAT - Active or inactive EC Nat Codes
"KRN",8994,833,2,1,1,4,0)
          A-ctive (default), I-nactive, B-oth
"KRN",8994,833,2,1,1,5,0)
 
"KRN",8994,833,2,1,1,6,0)
If no values are passed in it defaults to Local and Active.
"KRN",8994,833,2,"B","ECARY",1)

"KRN",8994,833,3,0)
^^11^11^3180305^
"KRN",8994,833,3,1,0)
Returns an array of EC local/national procedures with the following 
"KRN",8994,833,3,2,0)
pieces of data separated by a up-arrow.
"KRN",8994,833,3,3,0)
 
"KRN",8994,833,3,4,0)
  1.  File #725 IEN
"KRN",8994,833,3,5,0)
  2.  Name 
"KRN",8994,833,3,6,0)
  3.  National Number
"KRN",8994,833,3,7,0)
  4.  Inactive Date
"KRN",8994,833,3,8,0)
  5.  Synonym
"KRN",8994,833,3,9,0)
  6.  CPT IEN
"KRN",8994,833,3,10,0)
  7.  CPT code
"KRN",8994,833,3,11,0)
  8.  CPT Short Name
"KRN",8994,836,-1)
0^11
"KRN",8994,836,0)
EC GETPATCLASTAT^PATCLAST^ECUERPC1^1^R^^^1^
"KRN",8994,836,1,0)
^^5^5^3180305^
"KRN",8994,836,1,1,0)
Returns a patient's in/out status and classifications. 
"KRN",8994,836,1,2,0)
 
"KRN",8994,836,1,3,0)
Classifications are: Agent Orange, Ionizing Radiation, SC Condition,
"KRN",8994,836,1,4,0)
Environmental Contaminants, Military Sexual Trauma, Head/Neck Cancer,
"KRN",8994,836,1,5,0)
Combat Veteran, and Project 112/SHAD.
"KRN",8994,836,2,0)
^8994.02A^1^1
"KRN",8994,836,2,1,0)
ECARY^1^^1
"KRN",8994,836,2,1,1,0)
^8994.021^4^4^3180305^^
"KRN",8994,836,2,1,1,1,0)
Input variable ECARY contains the following values separated by up-arrow.
"KRN",8994,836,2,1,1,2,0)
  1. ECDFN - Patient IEN (#2)
"KRN",8994,836,2,1,1,3,0)
  2. ECD   - DSS Unit IEN (#724)
"KRN",8994,836,2,1,1,4,0)
  3. ECDT  - Procedure date and time (fileman format)
"KRN",8994,836,2,"B","ECARY",1)

"KRN",8994,836,3,0)
^^20^20^3180305^
"KRN",8994,836,3,1,0)
Returns a single line with values for a patient's status and
"KRN",8994,836,3,2,0)
classifications.
"KRN",8994,836,3,3,0)
 
"KRN",8994,836,3,4,0)
Data is delimited by (^) and '~'. Values after the '~' refer to those 
"KRN",8994,836,3,5,0)
classifications that must be asked for when the answer to the service 
"KRN",8994,836,3,6,0)
connected classification is no.
"KRN",8994,836,3,7,0)
 
"KRN",8994,836,3,8,0)
Pieces delimited by '^' are:
"KRN",8994,836,3,9,0)
 
"KRN",8994,836,3,10,0)
  1.   Patient Status: I for inpatient or O for outpatient
"KRN",8994,836,3,11,0)
  2-9. Classification: 2- Agent Orange, 3- Ionizing Radiation
"KRN",8994,836,3,12,0)
                       4- SC Condition, 5- Environmental Contaminants
"KRN",8994,836,3,13,0)
                       6- Military Sexual Trauma
"KRN",8994,836,3,14,0)
                       7- Head/Neck Cancer
"KRN",8994,836,3,15,0)
                       8- Combat Veteran
"KRN",8994,836,3,16,0)
                       9- Project 112/SHAD
"KRN",8994,836,3,17,0)
 
"KRN",8994,836,3,18,0)
Data delimited by '~' follows those of '^'. Pieces as follows:
"KRN",8994,836,3,19,0)
  1.   Agent Orange    2. Ionizing Radiation
"KRN",8994,836,3,20,0)
  3.   Environmental Contaminants
"KRN",8994,837,-1)
0^9
"KRN",8994,837,0)
EC GETENCDXS^ENCDXS^ECUERPC1^4^R^^^1
"KRN",8994,837,1,0)
^^2^2^3180305^
"KRN",8994,837,1,1,0)
Returns a patient encounter primary and secondary diagnosis codes from 
"KRN",8994,837,1,2,0)
Event Capture Patient File (#721).
"KRN",8994,837,2,0)
^8994.02A^1^1
"KRN",8994,837,2,1,0)
ECARY^1^^1
"KRN",8994,837,2,1,1,0)
^^7^7^3180305^
"KRN",8994,837,2,1,1,1,0)
Input variable ECARY has the following pieces of data separated by
"KRN",8994,837,2,1,1,2,0)
up-arrows.
"KRN",8994,837,2,1,1,3,0)
 
"KRN",8994,837,2,1,1,4,0)
  1. ECDFN - Patient IEN (#200)
"KRN",8994,837,2,1,1,5,0)
  2. ECDT  - Procedure date and time (fileman format)
"KRN",8994,837,2,1,1,6,0)
  3. ECL   - Location IEN
"KRN",8994,837,2,1,1,7,0)
  4. EC4   - Clinic IEN
"KRN",8994,837,2,"B","ECARY",1)

"KRN",8994,837,3,0)
^^5^5^3180305^
"KRN",8994,837,3,1,0)
Returns an array with patient encounter diagnosis information.
"KRN",8994,837,3,2,0)
 
"KRN",8994,837,3,3,0)
  1. Primary/secondary flag (1-primary, 0-secondary)
"KRN",8994,837,3,4,0)
  2. DX IEN
"KRN",8994,837,3,5,0)
  3. DX code and description
"KRN",8994,838,-1)
0^1
"KRN",8994,838,0)
EC GETDSSUNIT^DSSUNT^ECUMRPC1^4^A^^^1
"KRN",8994,838,1,0)
^8994.01^1^1^3180205^^^^
"KRN",8994,838,1,1,0)
Returns array with active and/or inactive DSS units from file 724.
"KRN",8994,838,2,0)
^8994.02A^1^1
"KRN",8994,838,2,1,0)
ECARY^1
"KRN",8994,838,2,1,1,0)
^^10^10^3180205^
"KRN",8994,838,2,1,1,1,0)
Optional input variable ECARY containing the following ^ delimited pieces:
"KRN",8994,838,2,1,1,2,0)
 
"KRN",8994,838,2,1,1,3,0)
  Piece 1 - Active or inactive DSS Units (optional)
"KRN",8994,838,2,1,1,4,0)
            A-ctive (default), I-nactive, B-oth
"KRN",8994,838,2,1,1,5,0)
 
"KRN",8994,838,2,1,1,6,0)
  Piece 2 - Specific DSS Unit name (optional)
"KRN",8994,838,2,1,1,7,0)
 
"KRN",8994,838,2,1,1,8,0)
  Piece 3 - Specific DSS IEN (optional)
"KRN",8994,838,2,1,1,9,0)
 
"KRN",8994,838,2,1,1,10,0)
  Piece 4 - Specific DSS Unit number (optional)
"KRN",8994,838,2,"B","ECARY",1)

"KRN",8994,838,3,0)
^^16^16^3180205^
"KRN",8994,838,3,1,0)
The results array contains data for DSS units as follows:-
"KRN",8994,838,3,2,0)
    1.  IEN of DSS Unit
"KRN",8994,838,3,3,0)
    2.  Name of DSS Unit
"KRN",8994,838,3,4,0)
    3.  IEN of DSS Unit (repeated)
"KRN",8994,838,3,5,0)
    4.  Inactive Flag
"KRN",8994,838,3,6,0)
    5.  Send to PCE
"KRN",8994,838,3,7,0)
    6.  Unit Number
"KRN",8994,838,3,8,0)
    7.  Service
"KRN",8994,838,3,9,0)
    8.  Medical Specialty
"KRN",8994,838,3,10,0)
    9.  Cost Center
"KRN",8994,838,3,11,0)
    10. Associated Stop Code (if OOS or send no records PCE setting)
"KRN",8994,838,3,12,0)
    11. Category flag
"KRN",8994,838,3,13,0)
    12. Default date entry
"KRN",8994,838,3,14,0)
    13. Credit Stop Code (only if PCE setting is send no records)
"KRN",8994,838,3,15,0)
    14. CHAR4 code (only if PCE setting is send no records)
"KRN",8994,838,3,16,0)
    15. Allow duplicate record filing on spreadsheet upload
"KRN",8994,842,-1)
0^4
"KRN",8994,842,0)
EC FILER^FILE^ECFLRPC^4^R^^^1
"KRN",8994,842,1,0)
^8994.01^1^1^3180305^^^^
"KRN",8994,842,1,1,0)
A general purpose Event Capture filer used when filing data into ECS files.
"KRN",8994,842,2,0)
^8994.02A^1^1
"KRN",8994,842,2,1,0)
ECARY^2^^1
"KRN",8994,842,2,1,1,0)
^^17^17^3180305^
"KRN",8994,842,2,1,1,1,0)
The input array ECARY defines all the fields and values needed for a 
"KRN",8994,842,2,1,1,2,0)
particular file.  The variable ECARY("ECFILE") must always be set to the
"KRN",8994,842,2,1,1,3,0)
file number where data will be saved.  The following are the options and
"KRN",8994,842,2,1,1,4,0)
file available
"KRN",8994,842,2,1,1,5,0)
 
"KRN",8994,842,2,1,1,6,0)
       ECFILE       Option
"KRN",8994,842,2,1,1,7,0)
       ------       ------
"KRN",8994,842,2,1,1,8,0)
       721          Event Capture Patient File
"KRN",8994,842,2,1,1,9,0)
       722          Event Capture Provider File (Non Licensed Providers)
"KRN",8994,842,2,1,1,10,0)
       724          DSS Unit
"KRN",8994,842,2,1,1,11,0)
       720.3        EC Event Code Screens
"KRN",8994,842,2,1,1,12,0)
       720.4        Event Code Reasons
"KRN",8994,842,2,1,1,13,0)
       725          EC Local Procedure
"KRN",8994,842,2,1,1,14,0)
       726          Event Capture Category
"KRN",8994,842,2,1,1,15,0)
       4            Event Capture Locations
"KRN",8994,842,2,1,1,16,0)
       200          Allocate/Deallocate users to Unit
"KRN",8994,842,2,1,1,17,0)
       200A         Allocate/Deallocate Units to user
"KRN",8994,842,2,"B","ECARY",1)

"KRN",8994,842,3,0)
^8994.03^1^1^3180305^^^^
"KRN",8994,842,3,1,0)
Returns a flag of sucess or failure or a list of error codes.
"KRN",8994,843,-1)
0^5
"KRN",8994,843,0)
EC GETLIST^SRCLST^ECUMRPC1^4^R^^^1
"KRN",8994,843,1,0)
^8994.01^1^1^3180305^^^^
"KRN",8994,843,1,1,0)
This call is used to perform a search on a file based on a search string.
"KRN",8994,843,2,0)
^8994.02A^1^1
"KRN",8994,843,2,1,0)
ECARY^1^^1
"KRN",8994,843,2,1,1,0)
^^9^9^3180305^
"KRN",8994,843,2,1,1,1,0)
The input string ECARY contains six pieces separated by "^"
"KRN",8994,843,2,1,1,2,0)
     ECFIL  - File to search
"KRN",8994,843,2,1,1,3,0)
     ECSTR  - Search string
"KRN",8994,843,2,1,1,4,0)
     ECDIR  - Search order
"KRN",8994,843,2,1,1,5,0)
     ECNUM  - (Optional) Number of records to return [DEFAULT: 44]
"KRN",8994,843,2,1,1,6,0)
     ECADT  - (Optional) date to determine clinic status (active/inactive)
"KRN",8994,843,2,1,1,7,0)
     ECLOC  - (Optional) location (IEN) to filter associated clinic list
"KRN",8994,843,2,1,1,8,0)
     ECTYPE - (Optional) primary or secondary stop codes desired
"KRN",8994,843,2,1,1,9,0)
     ECOOS  - (Optional) Set to "OOS" to only see "OOS" related
"KRN",8994,843,2,"B","ECARY",1)

"KRN",8994,843,3,0)
^8994.03^1^1^3180305^^^^
"KRN",8994,843,3,1,0)
Returns a list of values based on the search criteria.
"KRN",8994,844,-1)
0^6
"KRN",8994,844,0)
EC GETDSSECS^DSSECS^ECUMRPC^4^R^^^1
"KRN",8994,844,1,0)
^8994.01^2^2^3180305^^^^
"KRN",8994,844,1,1,0)
Returns a list of Event Code Screen from EC EVENT CODE CREENS FILE #720.3
"KRN",8994,844,1,2,0)
based on a DSS Unit and location.
"KRN",8994,844,2,0)
^8994.02A^1^1
"KRN",8994,844,2,1,0)
ECARY^1^^1
"KRN",8994,844,2,1,1,0)
^8994.021^3^3^3180305^^^^
"KRN",8994,844,2,1,1,1,0)
Input variable ECARY contains the value for DSS Unit
"KRN",8994,844,2,1,1,2,0)
    ECD   - DSS Unit IEN
"KRN",8994,844,2,1,1,3,0)
    ECL   - Location
"KRN",8994,844,2,"B","ECARY",1)

"KRN",8994,844,3,0)
^^7^7^3180305^
"KRN",8994,844,3,1,0)
Returns an array with data Event Code screens as follows:-
"KRN",8994,844,3,2,0)
   1. 720.3 ien
"KRN",8994,844,3,3,0)
   2. Procedure 5 digit code and description
"KRN",8994,844,3,4,0)
   3. Location
"KRN",8994,844,3,5,0)
   4. Status(active, inactive)
"KRN",8994,844,3,6,0)
   5. Category description
"KRN",8994,844,3,7,0)
   6. Synonym
"KRN",8994,1226,-1)
0^13
"KRN",8994,1226,0)
EC GETVISITINFO^VISINFO^ECUERPC2^1^R^^^1
"KRN",8994,1226,1,0)
^^2^2^3180306^
"KRN",8994,1226,1,1,0)
This broker call returns specific EC patient visit data (location, DSS Unit,
"KRN",8994,1226,1,2,0)
patient IEN, etc.) based on a Visit Number.
"KRN",8994,1226,2,0)
^8994.02A^1^1
"KRN",8994,1226,2,1,0)
ECARY^1^^1
"KRN",8994,1226,2,1,1,0)
^^2^2^3180306^
"KRN",8994,1226,2,1,1,1,0)
The value ECARY contains the Visit Number IEN (ECVSN), found in file 
"KRN",8994,1226,2,1,1,2,0)
(#9000010).
"KRN",8994,1226,2,"B","ECARY",1)

"KRN",8994,1226,3,0)
^^15^15^3180306^
"KRN",8994,1226,3,1,0)
This call returns the following EC patient values separated by an 
"KRN",8994,1226,3,2,0)
up-arrow (^):
"KRN",8994,1226,3,3,0)
 
"KRN",8994,1226,3,4,0)
  1. Location IEN
"KRN",8994,1226,3,5,0)
  2. Location Name
"KRN",8994,1226,3,6,0)
  3. DSS Unit IEN
"KRN",8994,1226,3,7,0)
  4. DSS Unit Name
"KRN",8994,1226,3,8,0)
  5. Send to PCE value
"KRN",8994,1226,3,9,0)
  6. Procedure Date/Time Fileman
"KRN",8994,1226,3,10,0)
  7. Procedure Date/Time Human Readable
"KRN",8994,1226,3,11,0)
  8. Patient DFN
"KRN",8994,1226,3,12,0)
 
"KRN",8994,1226,3,13,0)
or (if error)
"KRN",8994,1226,3,14,0)
  1. 0
"KRN",8994,1226,3,15,0)
  2. Error Message
"KRN",8994,2291,-1)
0^14
"KRN",8994,2291,0)
EC RECENT VISITS^RCNTVST^ECUTL1^2
"KRN",8994,2291,1,0)
^8994.01^2^2^3180306^^^^
"KRN",8994,2291,1,1,0)
Returns the 20 most recent visits/appointments for a selected patient
"KRN",8994,2291,1,2,0)
for the selected location.
"KRN",8994,2291,2,0)
^8994.02A^1^1
"KRN",8994,2291,2,1,0)
ECARY^1
"KRN",8994,2291,2,1,1,0)
^8994.021^4^4^3180306^^^
"KRN",8994,2291,2,1,1,1,0)
ECARY will be sent with two delimited pieces of information.
"KRN",8994,2291,2,1,1,2,0)
 
"KRN",8994,2291,2,1,1,3,0)
    DFN    - patient's IEN
"KRN",8994,2291,2,1,1,4,0)
    LOC    - (optional) IEN of the location to filter visits/appts
"KRN",8994,2291,2,"B","ECARY",1)

"KRN",8994,2291,3,0)
^^5^5^3180306^
"KRN",8994,2291,3,1,0)
Return parameter is an array containing:
"KRN",8994,2291,3,2,0)
  Piece 1 - Date of visit, internal fileman date
"KRN",8994,2291,3,3,0)
  Piece 2 - Date of Visit (readable) and  Clinic Name 
"KRN",8994,2291,3,4,0)
  Piece 3 - Date of Visit (readable)
"KRN",8994,2291,3,5,0)
  Piece 4 - Clinic Name
"MBREQ")
0
"ORD",1,9.2)
9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"ORD",1,9.2,0)
HELP FRAME
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
139^3180622
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
28
"RTN","ECBEN2U")
0^22^B36435236^B35228325
"RTN","ECBEN2U",1,0)
ECBEN2U ;BIR/MAM,JPW-Categories and Procedures Selection ;2/16/18  16:40
"RTN","ECBEN2U",2,0)
 ;;2.0;EVENT CAPTURE;**4,5,7,10,17,18,23,42,47,54,72,95,76,139**;8 May 96;Build 7
"RTN","ECBEN2U",3,0)
END Q
"RTN","ECBEN2U",4,0)
HDR ;screen header
"RTN","ECBEN2U",5,0)
 W @IOF,!,"Location: ",ECLN
"RTN","ECBEN2U",6,0)
 W !,"DSS Unit: ",$E(ECDN,1,30) I $G(ECCN)]"" W ?48,"Category: ",$E(ECCN,1,20)
"RTN","ECBEN2U",7,0)
 W !,"Ordering Section: ",ECON
"RTN","ECBEN2U",8,0)
 W !,"Procedure Date: ",ECDATE,!
"RTN","ECBEN2U",9,0)
 D DSP1416^ECPRVMUT(.ECPRVARY)
"RTN","ECBEN2U",10,0)
 W !
"RTN","ECBEN2U",11,0)
 Q
"RTN","ECBEN2U",12,0)
MSG W !!,"No procedures entered.  No Action Taken.",!!,"Press <RET> to continue " R X:DTIME S ECOUT=1
"RTN","ECBEN2U",13,0)
 Q
"RTN","ECBEN2U",14,0)
MSG1 ;
"RTN","ECBEN2U",15,0)
 W !!,"Please enter the number that corresponds to the "_$S(OK:"procedure",1:"category")_" from which",!,"you would like to select a procedure.  If you would like to continue",!,"with the list, press <RET>.  Enter ^ to quit."
"RTN","ECBEN2U",16,0)
 S CNT=CNT-5
"RTN","ECBEN2U",17,0)
 Q
"RTN","ECBEN2U",18,0)
HDRP ;hdr batch by proc
"RTN","ECBEN2U",19,0)
 W @IOF,!,"Location: ",ECLN
"RTN","ECBEN2U",20,0)
 I $G(ECCN)]"" W !,"Category: ",ECCN
"RTN","ECBEN2U",21,0)
 W !,"Procedure Date: ",ECDATE
"RTN","ECBEN2U",22,0)
 D DSP1442^ECPRVMUT(.ECPRVARY)
"RTN","ECBEN2U",23,0)
 W !
"RTN","ECBEN2U",24,0)
 Q
"RTN","ECBEN2U",25,0)
PCEQST ;entry pt for PCE questions
"RTN","ECBEN2U",26,0)
 S (ECDX,ECDXN,ECVST,ECSC,ECAO,ECIR,ECZEC,ECMST,ECHNC,ECCV,ECSHAD)=""
"RTN","ECBEN2U",27,0)
INP ;- Set inpatient/outpatient status
"RTN","ECBEN2U",28,0)
 S ECINP=$G(ECPTSTAT)
"RTN","ECBEN2U",29,0)
 D CLINIC I ECOUT Q
"RTN","ECBEN2U",30,0)
 ;ask dx
"RTN","ECBEN2U",31,0)
 D DIAG^ECUTL2 I ECOUT Q
"RTN","ECBEN2U",32,0)
 I $P(ECPCE,"~",2)="O"&(ECINP'="O") Q
"RTN","ECBEN2U",33,0)
 D VISIT
"RTN","ECBEN2U",34,0)
 Q
"RTN","ECBEN2U",35,0)
CLINIC ;display default clinic
"RTN","ECBEN2U",36,0)
 Q:$P(ECPCE,"~",2)="N"  I $P(ECPCE,"~",2)="O"&(ECINP'="O") Q
"RTN","ECBEN2U",37,0)
 K DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT S DIR(0)="721,26",DIR("A")="Associated Clinic",DIR("?")="An active clinic is required. Enter an active clinic or an ^ to exit"
"RTN","ECBEN2U",38,0)
 I EC4,EC4N'["NO ASSOCIATED CLINIC" S DIR("B")=EC4N
"RTN","ECBEN2U",39,0)
 D ^DIR K DIR
"RTN","ECBEN2U",40,0)
 I Y S EC4=+Y,ECID=$P($G(^SC(+EC4,0)),"^",7)
"RTN","ECBEN2U",41,0)
 I $D(DTOUT)!$D(DUOUT) S ECOUT=1 Q
"RTN","ECBEN2U",42,0)
 I +EC4,'$G(ECOUT) D CLIN I 'ECPCL W !!,"You must enter an active clinic now.",! G CLINIC
"RTN","ECBEN2U",43,0)
 I $D(DTOUT)!$D(DUOUT)!('Y)!(Y<0) W:$P(ECPCE,"~",2)'="N" !!,"Please note that this record cannot be sent to PCE without an active clinic.",!!
"RTN","ECBEN2U",44,0)
 Q
"RTN","ECBEN2U",45,0)
VISIT ;ask visit info
"RTN","ECBEN2U",46,0)
 Q:ECINP="I"
"RTN","ECBEN2U",47,0)
 ;
"RTN","ECBEN2U",48,0)
 ;- Ask classification questions applicable to patient and file in #721
"RTN","ECBEN2U",49,0)
 I $$ASKCLASS^ECUTL1(+$G(ECPT(CNT)),.ECCLFLDS,.ECOUT,ECPCE,ECINP),($O(ECCLFLDS(""))]"") D SETCLASS^ECUTL1(.ECCLFLDS)
"RTN","ECBEN2U",50,0)
 I +$G(ECOUT) Q
"RTN","ECBEN2U",51,0)
 K ECCLFLDS
"RTN","ECBEN2U",52,0)
 Q
"RTN","ECBEN2U",53,0)
PCEE ;checks edited data and sets PCE node for filing
"RTN","ECBEN2U",54,0)
 S ECVST=+$P(EC(0),"^",21) I 'ECVST G PCE
"RTN","ECBEN2U",55,0)
DEL ;delete visit and refresh data to PCE
"RTN","ECBEN2U",56,0)
 K DA,DIE,DR S DA=ECFN,DIE=721,DR="25///@;28///@" D ^DIE K DA,DIE,DR
"RTN","ECBEN2U",57,0)
 ;
"RTN","ECBEN2U",58,0)
 ;* Prepare all EC records with same Visit file entry to resend to PCE
"RTN","ECBEN2U",59,0)
 N ECVAR1,EC2PCE S ECVAR1=$$FNDVST^ECUTL(ECVST,ECFN,.EC2PCE) K ECVAR1
"RTN","ECBEN2U",60,0)
 ;
"RTN","ECBEN2U",61,0)
 ;- Set VALQUIET to stop Amb Care validator from broadcasting to screen
"RTN","ECBEN2U",62,0)
 N ECPKG,ECSOU
"RTN","ECBEN2U",63,0)
 S ECPKG=$O(^DIC(9.4,"B","EVENT CAPTURE",0)),ECSOU="EVENT CAPTURE DATA"
"RTN","ECBEN2U",64,0)
 S VALQUIET=1,ECVV=$$DELVFILE^PXAPI("ALL",ECVST,ECPKG,ECSOU) K ECVST,VALQUIET
"RTN","ECBEN2U",65,0)
 ;- Resend to PCE task
"RTN","ECBEN2U",66,0)
 D PCETASK^ECPCEU(.EC2PCE) K EC2PCE
"RTN","ECBEN2U",67,0)
PCE ;set data for PCE filing
"RTN","ECBEN2U",68,0)
 Q:$P(ECPCE,"~",2)="N"  ;139
"RTN","ECBEN2U",69,0)
 S ECREAS=""
"RTN","ECBEN2U",70,0)
 ;
"RTN","ECBEN2U",71,0)
 ;- Kill Reason node
"RTN","ECBEN2U",72,0)
 D KILLR
"RTN","ECBEN2U",73,0)
 I EC4 D CLIN^ECPCEU
"RTN","ECBEN2U",74,0)
 I 'EC4 S ECREAS="Clinic missing;"
"RTN","ECBEN2U",75,0)
 I 'ECDX S:$P(ECPCE,"~",2)="A" ECREAS="Diagnosis not entered;" ;139
"RTN","ECBEN2U",76,0)
 I EC4,'ECPCL S ECREAS=ECREAS_"Clinic inactive;"
"RTN","ECBEN2U",77,0)
 I 'ECCPT S ECREAS=ECREAS_"CPT code missing;"
"RTN","ECBEN2U",78,0)
 I ECREAS]"" S ^ECH(ECFN,"R")=ECREAS K ECPCL,ECREAS Q
"RTN","ECBEN2U",79,0)
 I '$D(^ECH(ECFN,0)) Q
"RTN","ECBEN2U",80,0)
 I '$D(^ECH(ECFN,"P")) Q
"RTN","ECBEN2U",81,0)
 S PN=^ECH(ECFN,0),PNP=^ECH(ECFN,"P")
"RTN","ECBEN2U",82,0)
 S PNMOD="" I $D(^ECH(ECFN,"MOD")) D
"RTN","ECBEN2U",83,0)
 . N MOD,MODS S MODS=0 F  S MODS=$O(^ECH(ECFN,"MOD",MODS)) Q:'MODS  D
"RTN","ECBEN2U",84,0)
 . . S MOD=$P($G(^ECH(ECFN,"MOD",MODS,0)),U)
"RTN","ECBEN2U",85,0)
 . . S MOD=$$MOD^ICPTMOD(MOD,"I",$P(PN,U,3)) I +MOD<0 Q
"RTN","ECBEN2U",86,0)
 . . S PNMOD=$S(PNMOD'="":PNMOD_";",1:"")_$P(MOD,U,2)
"RTN","ECBEN2U",87,0)
SET ;set data pieces
"RTN","ECBEN2U",88,0)
 S ECP3=+$P(PN,"^",3) I ECP3'["." K ECP3 D DELNOD Q
"RTN","ECBEN2U",89,0)
 S ECP2=+$P(PN,"^",2) I 'ECP2 K ECP2 D DELNOD Q
"RTN","ECBEN2U",90,0)
 S ECP19=+$P(PN,"^",19) I 'ECP19 K ECP19 D DELNOD Q
"RTN","ECBEN2U",91,0)
 S ECP4=+$P(PN,"^",4) I 'ECP4 K ECP4 D DELNOD Q
"RTN","ECBEN2U",92,0)
 S ECP20=+$P(PN,"^",20) I 'ECP20 K ECP20 D DELNOD Q
"RTN","ECBEN2U",93,0)
 S ECP10=+$P(PN,"^",10) I 'ECP10 K ECP10 D DELNOD Q
"RTN","ECBEN2U",94,0)
 S ECPP1=+$P(PNP,"^") I 'ECPP1 K ECPP1 D DELNOD Q
"RTN","ECBEN2U",95,0)
 S ECPP2=+$P(PNP,"^",2) I $P(ECPCE,"~",2)="A" I 'ECPP2 K ECPP2 D DELNOD Q  ;139 Must have primary diagnosis if sending all records
"RTN","ECBEN2U",96,0)
 S ECPP3=$P(PNP,"^",3),ECPP3=$S(ECPP3="Y":1,ECPP3="N":0,1:"")
"RTN","ECBEN2U",97,0)
 S ECPP4=$P(PNP,"^",4),ECPP4=$S(ECPP4="Y":1,ECPP4="N":0,1:"")
"RTN","ECBEN2U",98,0)
 S ECPP5=$P(PNP,"^",5),ECPP5=$S(ECPP5="Y":1,ECPP5="N":0,1:"")
"RTN","ECBEN2U",99,0)
 S ECPP6=$P(PNP,"^",6),ECPP6=$S(ECPP6="Y":1,ECPP6="N":0,1:"")
"RTN","ECBEN2U",100,0)
 S ECPP9=$P(PNP,"^",9),ECPP9=$S(ECPP9="Y":1,ECPP9="N":0,1:"")
"RTN","ECBEN2U",101,0)
 S ECPP10=$P(PNP,"^",10),ECPP10=$S(ECPP10="Y":1,ECPP10="N":0,1:"")
"RTN","ECBEN2U",102,0)
 S ECPP11=$P(PNP,"^",11),ECPP11=$S(ECPP11="Y":1,ECPP11="N":0,1:"")
"RTN","ECBEN2U",103,0)
 S ECPP12=$P(PNP,"^",12),ECPP12=$S(ECPP12="Y":1,ECPP12="N":0,1:"")
"RTN","ECBEN2U",104,0)
 S ECPP1A="" I $P(PN,"^",9)["EC" S ECPP1A=$G(^EC(725,+$P(PN,"^",9),0)),ECPP1A=$P(ECPP1A,"^",2)_"  "_$P(ECPP1A,"^")
"RTN","ECBEN2U",105,0)
 S ECELIG=$S($G(ECELIG):ECELIG,1:"")
"RTN","ECBEN2U",106,0)
NODE ;sets "PCE" node
"RTN","ECBEN2U",107,0)
 ;d/t~dfn~hosp loc~inst~dss id~*prov(not filled)~*prov2*~prov3~vol~cpt~dx~ao~rad~env~sc~ecs nat # & name~eligibility~mst~hnc~cv~proj112/shad
"RTN","ECBEN2U",108,0)
 S PNODE=ECP3_"~"_ECP2_"~"_ECP19_"~"_ECP4_"~"_ECP20_"~~~~"_ECP10_"~"_ECPP1_"~"_ECPP2_"~"_ECPP3_"~"_ECPP4_"~"_ECPP5_"~"_ECPP6_"~"_ECPP1A_"~"_ECELIG_"~"_ECPP9_"~"_ECPP10_"~"_ECPP11_"~"_ECPP12
"RTN","ECBEN2U",109,0)
 S ^ECH(ECFN,"PCE")=PNODE
"RTN","ECBEN2U",110,0)
 ;set "PCE1" node
"RTN","ECBEN2U",111,0)
 ;CPT modifier1;CPT modifier 2;CPT modifier 3;...CPT modifier n
"RTN","ECBEN2U",112,0)
 I PNMOD'="" S ^ECH(ECFN,"PCE1")=PNMOD
"RTN","ECBEN2U",113,0)
 ;Replace set of SEND TO PCE w/direct task call - patch 95
"RTN","ECBEN2U",114,0)
 ;S DA=ECFN,DIE=721,DR="31////"_ECDT D ^DIE K DA,DIE,DR
"RTN","ECBEN2U",115,0)
 S EC2PCE(ECDT,ECFN)=""
"RTN","ECBEN2U",116,0)
 D PCETASK^ECPCEU(.EC2PCE) K EC2PCE  ;send to PCE task
"RTN","ECBEN2U",117,0)
 K ECP2,ECP3,ECP4,ECP10,ECP19,ECP20,ECPP1,ECPP1A,ECPP2,ECPP3,ECPP4,ECPP5,ECPP6,ECPP9,ECPP10,ECPP11,ECPP12,ECREAS,ECPCL,PN,PNP,PNODE,ECELIG,PNMOD
"RTN","ECBEN2U",118,0)
 Q
"RTN","ECBEN2U",119,0)
CLIN ;check for active associated clinic
"RTN","ECBEN2U",120,0)
 S MSG1=1,MSG2=0
"RTN","ECBEN2U",121,0)
 D CLIN^ECPCEU
"RTN","ECBEN2U",122,0)
 I 'ECPCL D
"RTN","ECBEN2U",123,0)
 .W !!,"The clinic ",$S(MSG1:"associated with",1:"you selected for")," this procedure ",$S(MSG2:"has not been entered",1:"is inactive"),"."
"RTN","ECBEN2U",124,0)
 .W !,"Workload data cannot be sent to PCE for this procedure with ",!,$S(MSG2:"a missing",1:"an inactive")," clinic."
"RTN","ECBEN2U",125,0)
 S (MSG1,MSG2)=0
"RTN","ECBEN2U",126,0)
 Q
"RTN","ECBEN2U",127,0)
 ;
"RTN","ECBEN2U",128,0)
 ;
"RTN","ECBEN2U",129,0)
KILLR ;- Kill 'R' (Reason) node
"RTN","ECBEN2U",130,0)
 ;
"RTN","ECBEN2U",131,0)
 K ^ECH(ECFN,"R")
"RTN","ECBEN2U",132,0)
 Q
"RTN","ECBEN2U",133,0)
 ;
"RTN","ECBEN2U",134,0)
 ;
"RTN","ECBEN2U",135,0)
DELNOD ;- Delete 'PCE' and 'Send' nodes
"RTN","ECBEN2U",136,0)
 ;
"RTN","ECBEN2U",137,0)
 N DA,DIE,DR
"RTN","ECBEN2U",138,0)
 ;
"RTN","ECBEN2U",139,0)
 ;- Lock node
"RTN","ECBEN2U",140,0)
 L +^ECH(ECFN):5 Q:'$T
"RTN","ECBEN2U",141,0)
 S DA=ECFN
"RTN","ECBEN2U",142,0)
 S DIE="^ECH("
"RTN","ECBEN2U",143,0)
 S DR="30////@;31////@;37////@"
"RTN","ECBEN2U",144,0)
 ;
"RTN","ECBEN2U",145,0)
 ;- Delete contents
"RTN","ECBEN2U",146,0)
 D ^DIE
"RTN","ECBEN2U",147,0)
 ;
"RTN","ECBEN2U",148,0)
 ;- Unlock node
"RTN","ECBEN2U",149,0)
 L -^ECH(ECFN)
"RTN","ECBEN2U",150,0)
 Q
"RTN","ECDISSUM")
0^7^B4295797^B4114146
"RTN","ECDISSUM",1,0)
ECDISSUM ;ALB/DAN - Disabled Category & Procedure Summary Rpt ;9/27/17  11:21
"RTN","ECDISSUM",2,0)
 ;;2.0;EVENT CAPTURE;**131,139**;8 May 96;Build 7
"RTN","ECDISSUM",3,0)
 ;
"RTN","ECDISSUM",4,0)
EN ;
"RTN","ECDISSUM",5,0)
 N CNT,ECRDT,ECPG,ECI,ECL,ECLN,ECDIS,ECD,ECC,ECSCN,ECOUT
"RTN","ECDISSUM",6,0)
 U IO
"RTN","ECDISSUM",7,0)
 S CNT=1,^TMP($J,"ECRPT",CNT)="EC SCREEN STATUS^LOCATION^SERVICE^DSS UNIT^DSS UNIT IEN^DSS DEPT^SEND STATUS^DSS UNIT INACTIVE^DISABLED CATEGORY^CPT CODE^PROCEDURE CODE"
"RTN","ECDISSUM",8,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"^PROCEDURE NAME^SYNONYM^CLINIC IEN^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE^MCA LABOR CODE" ;139
"RTN","ECDISSUM",9,0)
 S ECRDT=$$FMTE^XLFDT($$NOW^XLFDT),ECSCN="B",ECOUT=0
"RTN","ECDISSUM",10,0)
 S ECPG=1,ECDIS=1 ;Indicates we're running the disabled category report
"RTN","ECDISSUM",11,0)
 S ECI=0 F  S ECI=$O(ECLOC(ECI)) Q:'+ECI  D
"RTN","ECDISSUM",12,0)
 .S ECL=$P(ECLOC(ECI),U),ECLN=$P(ECLOC(ECI),U,2)
"RTN","ECDISSUM",13,0)
 .S ECD=0 F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'+ECD  D
"RTN","ECDISSUM",14,0)
 ..I $P($G(^ECD(ECD,0)),U,11)=0,$O(^ECJ("AP",ECL,ECD,0)) S ECC="ALL" D SUM2^ECSUM1 ;If unit set to no categories but has event code screens with categories defined then print
"RTN","ECDISSUM",15,0)
 Q
"RTN","ECEFPAT")
0^4^B121783396^B89607529
"RTN","ECEFPAT",1,0)
ECEFPAT ;ALB/JAM-Enter Event Capture Data Patient Filer ;2/26/18  15:33
"RTN","ECEFPAT",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,39,42,47,49,54,65,72,95,76,112,119,114,126,134,139**;8 May 96;Build 7
"RTN","ECEFPAT",3,0)
 ;
"RTN","ECEFPAT",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECEFPAT",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR #5747
"RTN","ECEFPAT",6,0)
 ; 
"RTN","ECEFPAT",7,0)
FILE ;Used by the RPC broker to file patient encounter in file #721
"RTN","ECEFPAT",8,0)
 ;  Uses Supported IA 1995 - allow access to $$CPT^ICPTCOD
"RTN","ECEFPAT",9,0)
 ;
"RTN","ECEFPAT",10,0)
 ;     Variables passed in
"RTN","ECEFPAT",11,0)
 ;       ECIEN   - IEN of #721, if editing
"RTN","ECEFPAT",12,0)
 ;       ECDEL   - Delete record. 1- YES; 0- 0, null or undefine for NO.
"RTN","ECEFPAT",13,0)
 ;       ECDFN   - Patient IEN for file #2
"RTN","ECEFPAT",14,0)
 ;       ECDT    - Date and time of procedure
"RTN","ECEFPAT",15,0)
 ;       ECL     - Location
"RTN","ECEFPAT",16,0)
 ;       ECD     - DSS Unit
"RTN","ECEFPAT",17,0)
 ;       ECC     - Category
"RTN","ECEFPAT",18,0)
 ;       ECP     - Procedure
"RTN","ECEFPAT",19,0)
 ;       ECVOL   - Volume
"RTN","ECEFPAT",20,0)
 ;       ECU1..n - Provider (1 thru n), Prov 1 is required,other optional
"RTN","ECEFPAT",21,0)
 ;       ECMN    - Ordering Section
"RTN","ECEFPAT",22,0)
 ;       ECDUZ   - Entered/Edited by, pointer to #200
"RTN","ECEFPAT",23,0)
 ;       ECDX    - Primary Diagnosis
"RTN","ECEFPAT",24,0)
 ;       ECDXS   - Secondary Diagnosis; multiple, optional
"RTN","ECEFPAT",25,0)
 ;       EC4     - Associated Clinic, required if sending data to PCE
"RTN","ECEFPAT",26,0)
 ;       ECPTSTAT- Patient Status
"RTN","ECEFPAT",27,0)
 ;       ECPXREAS- Procedure reason, optional
"RTN","ECEFPAT",28,0)
 ;       ECPXREA2- Procedure reason #2, optional ;112
"RTN","ECEFPAT",29,0)
 ;       ECPXREA3- Procedure reason #3, optional ;112
"RTN","ECEFPAT",30,0)
 ;       ECMOD   - CPT modifiers, optional
"RTN","ECEFPAT",31,0)
 ;       ECLASS  - Classification, optional
"RTN","ECEFPAT",32,0)
 ;       ECELIG  - Eligibility, optional
"RTN","ECEFPAT",33,0)
 ;       ECSOURCE- Indicates source of input (e.g. STATE HOME)
"RTN","ECEFPAT",34,0)
 ;       ECSSID  - Unique Spread Sheet ID (ddmmyyyyhhmmss_hash)
"RTN","ECEFPAT",35,0)
 ;
"RTN","ECEFPAT",36,0)
 ;     Variable return
"RTN","ECEFPAT",37,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #721^Message
"RTN","ECEFPAT",38,0)
 ;
"RTN","ECEFPAT",39,0)
 N NODE,ECS,ECM,ECID,ECCPT,ECINT,ECPCE,ECX,ECERR,ECOUT,ECFLG,ECRES
"RTN","ECEFPAT",40,0)
 N ECFIL,ECPRV,ECCS
"RTN","ECEFPAT",41,0)
 ; Determine Active Coding System based on Date of Interest
"RTN","ECEFPAT",42,0)
 S ECCS=$S($G(ECDT)'="":ECDT,1:DT)
"RTN","ECEFPAT",43,0)
 S ECCS=$$SINFO^ICDEX("DIAG",ECCS) ; Supported by ICR 5747
"RTN","ECEFPAT",44,0)
 ;
"RTN","ECEFPAT",45,0)
 S ECFLG=1,ECERR=0 D CHKDT(1) I ECERR Q
"RTN","ECEFPAT",46,0)
 F ECX=1:1 Q:'$D(@("ECU"_ECX))  D  I ECERR Q
"RTN","ECEFPAT",47,0)
 .I @("ECU"_ECX)="" Q
"RTN","ECEFPAT",48,0)
 .S NODE=$$GET^XUA4A72(@("ECU"_ECX),ECDT) I +NODE'>0&($P($G(^ECD(ECD,0)),U,14)'="N") S ECERR=1 D  Q  ;134 Added check for DSS Unit's send to PCE setting. If set to "no" allow non-providers to be used.
"RTN","ECEFPAT",49,0)
 ..S ^TMP($J,"ECMSG",1)="0^Provider doesn't have an active Person class"
"RTN","ECEFPAT",50,0)
 .S ECPRV(ECX)=@("ECU"_ECX)_"^^"_$S(ECX=1:"P",1:"S")
"RTN","ECEFPAT",51,0)
 I $G(ECIEN)'="" S ECFLG=0 D  I ECERR Q
"RTN","ECEFPAT",52,0)
 . I '$D(^ECH(ECIEN)) S ECERR=1,^TMP($J,"ECMSG",1)="0^Pat IEN Not Found"
"RTN","ECEFPAT",53,0)
 I $G(ECDEL) K ^TMP($J,"ECMSG") D  Q
"RTN","ECEFPAT",54,0)
 .S ECVST=$P($G(^ECH(ECIEN,0)),"^",21) I ECVST D
"RTN","ECEFPAT",55,0)
 ..;* Resend all EC records with same Visit file entry to PCE
"RTN","ECEFPAT",56,0)
 ..;* Remove Visit entry from ^ECH( so DELVFILE will complete cleanup
"RTN","ECEFPAT",57,0)
 ..K EC2PCE S ECVAR1=$$FNDVST^ECUTL(ECVST,,.EC2PCE) K ECVAR1
"RTN","ECEFPAT",58,0)
 ..;Set VALQUIET to stop Amb Care validator from broadcasting to screen
"RTN","ECEFPAT",59,0)
 ..N ECPKG,ECSOU
"RTN","ECEFPAT",60,0)
 ..S ECPKG=$O(^DIC(9.4,"B","EVENT CAPTURE",0)),ECSOU="EVENT CAPTURE DATA"
"RTN","ECEFPAT",61,0)
 ..S VALQUIET=1,ECVV=$$DELVFILE^PXAPI("ALL",ECVST,ECPKG,ECSOU) K ECVST,VALQUIET
"RTN","ECEFPAT",62,0)
 ..;- Send to PCE task
"RTN","ECEFPAT",63,0)
 ..D PCETASK^ECPCEU(.EC2PCE) K EC2PCE
"RTN","ECEFPAT",64,0)
 .S DA=ECIEN,DIK="^ECH(" D ^DIK K DA,DIK,ECVV
"RTN","ECEFPAT",65,0)
 .D TABLE("D",ECIEN) ;134 Remove entry from table
"RTN","ECEFPAT",66,0)
 .S ^TMP($J,"ECMSG",1)="1^Procedure Deleted"
"RTN","ECEFPAT",67,0)
 I '$D(ECPRV) S ^TMP($J,"ECMSG",1)="0^No provider present" Q
"RTN","ECEFPAT",68,0)
 S ECDT=+ECDT,NODE=$G(^ECD(ECD,0)) I NODE="" D MSG Q
"RTN","ECEFPAT",69,0)
 S ECFN=$G(ECIEN),ECVOL=$G(ECVOL,1),ECS=$P(NODE,U,2),ECM=$P(NODE,U,3)
"RTN","ECEFPAT",70,0)
 S ECPCE="U~"_$S($P(NODE,"^",14)]"":$P(NODE,"^",14),1:"N")
"RTN","ECEFPAT",71,0)
 ;S ECPTSTAT=$$INOUTPT^ECUTL0(ECDFN,+ECDT) ;pat stat may not need
"RTN","ECEFPAT",72,0)
 I $P(ECPCE,"~",2)="OOS" D OOSCLIN ;139 If OOS type DSS unit, get clinic for sending data to PCE
"RTN","ECEFPAT",73,0)
 I $G(EC4)="" D GETCLN^ECEDF
"RTN","ECEFPAT",74,0)
 S ECID=$S(+EC4:$P($G(^SC(+EC4,0)),"^",7),1:""),ECINP=ECPTSTAT
"RTN","ECEFPAT",75,0)
 I $P(ECPCE,"~",2)="A" D CHKDT(2) ;139
"RTN","ECEFPAT",76,0)
 I +EC4 S ECRES=$$CLNCK^SDUTL2(+EC4,0) I 'ECRES D  S ECERR=1
"RTN","ECEFPAT",77,0)
 .S ^TMP($J,"ECMSG",1)=ECRES_" Clinic MUST be corrected before filing."
"RTN","ECEFPAT",78,0)
 Q:ECERR  I ECFLG D NEWIEN I $G(ECSOURCE)="STATE HOME" D TABLE("A",ECIEN) ;134 If state home record, add to table
"RTN","ECEFPAT",79,0)
 S ECCPT=$S(ECP["ICPT":+ECP,1:$P($G(^EC(725,+ECP,0)),U,5))
"RTN","ECEFPAT",80,0)
 ;validate CPT value and handle HCPCS name to IEN conversion (HD223010)
"RTN","ECEFPAT",81,0)
 S ECCPT=+$$CPT^ICPTCOD(ECCPT)
"RTN","ECEFPAT",82,0)
 S ECCPT=$S(+ECCPT>0:ECCPT,1:0)
"RTN","ECEFPAT",83,0)
 K DA,DR,DIE S DIE="^ECH(",(DA,ECFN)=ECIEN K ECIEN
"RTN","ECEFPAT",84,0)
 S DR=".01////"_ECFN_";1////"_ECDFN_";3////"_ECL_";4////"_ECS
"RTN","ECEFPAT",85,0)
 S DR=DR_";5////"_ECM_";6////"_ECD_";7////"_+ECC_";9////"_ECVOL
"RTN","ECEFPAT",86,0)
 S $P(^ECH(ECFN,0),"^",9)=ECP
"RTN","ECEFPAT",87,0)
 D ^DIE I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",88,0)
 K DA,DR,DIE S DIE="^ECH(" ;139
"RTN","ECEFPAT",89,0)
 S DA=ECFN,DR="11////"_ECMN_";13////"_ECDUZ_";2////"_ECDT
"RTN","ECEFPAT",90,0)
 ;S ECPXREAS=$G(ECPXREAS) ;112
"RTN","ECEFPAT",91,0)
 D CVTREAS Q:$G(ECERR)  ;119 Convert reasons from entries in 720.4 to entries in 720.5 before storing.
"RTN","ECEFPAT",92,0)
 S DR=DR_";19////"_$S(+ECCPT:ECCPT,1:"@")_";20////"_ECDX
"RTN","ECEFPAT",93,0)
 S DR=DR_";26////"_$S($G(EC4):EC4,1:"")_";27////"_$G(ECID)_";29////"_ECPTSTAT ;126 allow EC4 to be null if no associated clinic
"RTN","ECEFPAT",94,0)
 S DR=DR_";34////"_$S($G(ECPXREAS)="":"@",1:ECPXREAS) ;112
"RTN","ECEFPAT",95,0)
 S DR=DR_";43////"_$S($G(ECPXREA2)="":"@",1:ECPXREA2) ;112
"RTN","ECEFPAT",96,0)
 S DR=DR_";44////"_$S($G(ECPXREA3)="":"@",1:ECPXREA3) ;112
"RTN","ECEFPAT",97,0)
 I $G(ECSOURCE)="STATE HOME" D  ;139 Added section for state home records
"RTN","ECEFPAT",98,0)
 .N STATUS,IMPDT
"RTN","ECEFPAT",99,0)
 .S STATUS=$$STAT ;Determine if "late"
"RTN","ECEFPAT",100,0)
 .S IMPDT=($E(ECSSID,5,6)-17)_$E(ECSSID,7,8)_$E(ECSSID,1,4)_"."_$E(ECSSID,9,14) ;Convert date to intermal FM format
"RTN","ECEFPAT",101,0)
 .S DR=DR_";45////"_ECSOURCE_";46///"_STATUS_";47////"_IMPDT_";48////"_ECSSID ;139 Add source, status, import date/time and spreadsheet ID if state home entry
"RTN","ECEFPAT",102,0)
 .Q
"RTN","ECEFPAT",103,0)
 D ^DIE I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",104,0)
 I ECDX S ^DISV(DUZ,"^ICD9(")=ECDX  ;last ICD9 code
"RTN","ECEFPAT",105,0)
 S ECX=$O(ECPRV("A"),-1) I ECX'="" S ^DISV(DUZ,"^VA(200,")=+ECPRV(ECX)
"RTN","ECEFPAT",106,0)
 ;Remove Old CPT modifiers
"RTN","ECEFPAT",107,0)
 I 'ECFLG D
"RTN","ECEFPAT",108,0)
 . K OLDMOD S (ECDA,DA(1))=ECFN,DIK="^ECH("_DA(1)_",""MOD"",",DA=0
"RTN","ECEFPAT",109,0)
 . F  S DA=$O(^ECH(ECDA,"MOD",DA)) Q:'DA  S OLDMOD(DA)="" D ^DIK
"RTN","ECEFPAT",110,0)
 . K DA,ECDA,DIK,^ECH(ECFN,"MOD")
"RTN","ECEFPAT",111,0)
 .;Remove old secondary diagnosis codes
"RTN","ECEFPAT",112,0)
 . K OLDDXS S (ECDA,DA(1))=ECFN,DIK="^ECH("_DA(1)_",""DX"",",DA=0
"RTN","ECEFPAT",113,0)
 . F  S DA=$O(^ECH(ECDA,"DX",DA)) Q:'DA  S OLDDXS(DA)="" D ^DIK
"RTN","ECEFPAT",114,0)
 . K DA,ECDA,DIK,^ECH(ECFN,"DX")
"RTN","ECEFPAT",115,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",116,0)
 ;File multiple providers
"RTN","ECEFPAT",117,0)
 S ECFIL=$$FILPRV^ECPRVMUT(ECFN,.ECPRV,.ECOUT) K ECOUT
"RTN","ECEFPAT",118,0)
 I 'ECFIL D RECDEL,MSG Q
"RTN","ECEFPAT",119,0)
 ;File CPT modifiers
"RTN","ECEFPAT",120,0)
 I $G(ECMOD)'="" D
"RTN","ECEFPAT",121,0)
 . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,36,0),U,2)
"RTN","ECEFPAT",122,0)
 . S DIC="^ECH("_DA(1)_","_"""MOD"""_","
"RTN","ECEFPAT",123,0)
 . F ECX=1:1:$L(ECMOD,"^") S MODIEN=$P(ECMOD,U,ECX) I +MODIEN>0 D
"RTN","ECEFPAT",124,0)
 . . K DD,DO S X=MODIEN D FILE^DICN
"RTN","ECEFPAT",125,0)
 . K MODIEN,DIC
"RTN","ECEFPAT",126,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",127,0)
 ; File multiple secondary diagnosis codes
"RTN","ECEFPAT",128,0)
 I $G(ECDXS)'="" D
"RTN","ECEFPAT",129,0)
 . S DXS="",DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,38,0),U,2)
"RTN","ECEFPAT",130,0)
 . S DIC="^ECH("_DA(1)_","_"""DX"""_",",ECDXY=ECDX K ECDXX
"RTN","ECEFPAT",131,0)
 . F ECX=1:1:$L(ECDXS,"^") S DXSIEN=$P(ECDXS,U,ECX) I +DXSIEN>0 D
"RTN","ECEFPAT",132,0)
 . . ; Retrieve ICD data - Supported by ICR 5747
"RTN","ECEFPAT",133,0)
 . . S DXCDE=$$ICDDX^ICDEX(DXSIEN,ECDT,+ECCS,"I") Q:+DXCDE<0  I '$P(DXCDE,U,10) Q
"RTN","ECEFPAT",134,0)
 . . K DD,DO S X=DXSIEN D FILE^DICN
"RTN","ECEFPAT",135,0)
 . . S DXCDE=$P(DXCDE,U,2),ECDXX(DXCDE)=DXSIEN
"RTN","ECEFPAT",136,0)
 . . S ^DISV(DUZ,"^ICD9(")=DXSIEN  ;last ICD9 code
"RTN","ECEFPAT",137,0)
 . ; Update all procedures for an encounter with same primary & second dx
"RTN","ECEFPAT",138,0)
 . S PXUPD=$$PXUPD^ECUTL2(ECDFN,ECDT,ECL,EC4,ECDXY,.ECDXX,ECFN)
"RTN","ECEFPAT",139,0)
 . K PXUPD,ECDXY,ECDXX,DXS,DXSIEN,DIC,DXCDE,DA,DD,DO
"RTN","ECEFPAT",140,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",141,0)
 S DA=ECFN
"RTN","ECEFPAT",142,0)
 ;File classification AO^IR^SC^EC^MST^HNC^CV^SHAD
"RTN","ECEFPAT",143,0)
 I $G(ECLASS)'="" D
"RTN","ECEFPAT",144,0)
 . S CLSTR="21^22^24^23^35^39^40^41",DR=""
"RTN","ECEFPAT",145,0)
 . F ECX=1:1:$L(CLSTR,"^") D
"RTN","ECEFPAT",146,0)
 . . S DR=DR_$P(CLSTR,U,ECX)_"////"_$P(ECLASS,U,ECX)_";"
"RTN","ECEFPAT",147,0)
 . S DR=$E(DR,1,($L(DR)-1)) D ^DIE
"RTN","ECEFPAT",148,0)
 . K CLSTR,DR,DIE
"RTN","ECEFPAT",149,0)
 I $D(DTOUT) D RECDEL,MSG Q
"RTN","ECEFPAT",150,0)
 ;
"RTN","ECEFPAT",151,0)
PCE ; format PCE data to send
"RTN","ECEFPAT",152,0)
 I ($P(ECPCE,"~",2)="N") D  Q  ;139
"RTN","ECEFPAT",153,0)
 .S ^TMP($J,"ECMSG",1)="1^Record Filed"
"RTN","ECEFPAT",154,0)
 D:ECFLG PCE^ECBEN2U I 'ECFLG S EC(0)=^ECH(ECFN,0) D PCEE^ECBEN2U K EC
"RTN","ECEFPAT",155,0)
 I $G(ECOUT)!(ECERR) D  Q
"RTN","ECEFPAT",156,0)
 . D RECDEL S STR=$S($G(^ECH(ECFN,"R")):^("R"),1:" PCE Data Missing")
"RTN","ECEFPAT",157,0)
 . S ^TMP($J,"ECMSG",1)="0^Record Not Filed, "_STR K STR
"RTN","ECEFPAT",158,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_$G(ECIEN)
"RTN","ECEFPAT",159,0)
 Q
"RTN","ECEFPAT",160,0)
 ;
"RTN","ECEFPAT",161,0)
NEWIEN ;Create new IEN in file #721
"RTN","ECEFPAT",162,0)
 N DIC,DA,DD,DO,ECRN
"RTN","ECEFPAT",163,0)
RLCK L +^ECH(0):60 S ECRN=$P(^ECH(0),"^",3)+1
"RTN","ECEFPAT",164,0)
 I $D(^ECH(ECRN)) S $P(^ECH(0),"^",3)=$P(^(0),"^",3)+1 L -^ECH(0) G RLCK
"RTN","ECEFPAT",165,0)
 L -^ECH(0) S DIC(0)="L",DIC="^ECH(",X=ECRN
"RTN","ECEFPAT",166,0)
 D FILE^DICN S ECIEN=+Y
"RTN","ECEFPAT",167,0)
 Q
"RTN","ECEFPAT",168,0)
RECDEL ; Delete record
"RTN","ECEFPAT",169,0)
 ;restore old data
"RTN","ECEFPAT",170,0)
 I 'ECFLG D  Q
"RTN","ECEFPAT",171,0)
 . I $O(OLDMOD("")) D
"RTN","ECEFPAT",172,0)
 . . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,36,0),U,2)
"RTN","ECEFPAT",173,0)
 . . S DIC="^ECH("_DA(1)_","_"""MOD"""_",",ECX=0
"RTN","ECEFPAT",174,0)
 . . F  S ECX=$O(OLDMOD(ECX)) Q:'ECX  I ECX>0 K DD,DO S X=ECX D FILE^DICN
"RTN","ECEFPAT",175,0)
 . I $O(OLDDXS("")) D
"RTN","ECEFPAT",176,0)
 . . S DIC(0)="L",DA(1)=ECFN,DIC("P")=$P(^DD(721,38,0),U,2)
"RTN","ECEFPAT",177,0)
 . . S DIC="^ECH("_DA(1)_","_"""DX"""_",",ECX=0
"RTN","ECEFPAT",178,0)
 . . F  S ECX=$O(OLDDXS(ECX)) Q:'ECX  I ECX>0 K DD,DO S X=ECX D FILE^DICN
"RTN","ECEFPAT",179,0)
 . K DIC,DA,DD,DO,OLDMOD,OLDDXS,ECX
"RTN","ECEFPAT",180,0)
 S DA=ECFN,DIK="^ECH(" D ^DIK K DA,DIK
"RTN","ECEFPAT",181,0)
 D TABLE("D",ECFN) ;134 Delete record from table
"RTN","ECEFPAT",182,0)
 Q
"RTN","ECEFPAT",183,0)
MSG ;Record not filed
"RTN","ECEFPAT",184,0)
 S ^TMP($J,"ECMSG",1)="0^Record not Filed"
"RTN","ECEFPAT",185,0)
 Q
"RTN","ECEFPAT",186,0)
CHKDT(FLG) ;Required Data Check
"RTN","ECEFPAT",187,0)
 N I,C
"RTN","ECEFPAT",188,0)
 S C=1
"RTN","ECEFPAT",189,0)
 I FLG=1 D  Q
"RTN","ECEFPAT",190,0)
 .F I="ECD","ECC","ECL","ECDT","ECP","ECDFN","ECMN","ECDUZ","ECPTSTAT" D
"RTN","ECEFPAT",191,0)
 ..I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECEFPAT",192,0)
 .I $G(ECDEL),$D(ECIEN) K ^TMP($J,"ECMSG") S ECERR=0
"RTN","ECEFPAT",193,0)
 ;check PCE data
"RTN","ECEFPAT",194,0)
 I FLG=2 D  Q
"RTN","ECEFPAT",195,0)
 .F I="EC4","ECDX" D  Q
"RTN","ECEFPAT",196,0)
 ..I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key PCE data missing "_I,C=C+1,ECERR=1
"RTN","ECEFPAT",197,0)
 Q
"RTN","ECEFPAT",198,0)
VALDATA ;validate data
"RTN","ECEFPAT",199,0)
 N ECRRX
"RTN","ECEFPAT",200,0)
 D CHK^DIE(721,1,,"`"_ECDFN,.ECRRX) I ECRRX'=ECDFN D  Q
"RTN","ECEFPAT",201,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Patient"
"RTN","ECEFPAT",202,0)
 D CHK^DIE(721,2,,ECDT,.ECRRX) I ECRRX'=ECDT D  Q
"RTN","ECEFPAT",203,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure Date"
"RTN","ECEFPAT",204,0)
 D CHK^DIE(721,3,,"`"_ECL,.ECRRX) I ECRRX'=ECL D  Q
"RTN","ECEFPAT",205,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Location"
"RTN","ECEFPAT",206,0)
 D CHK^DIE(721,6,,"`"_ECD,.ECRRX) I ECRRX'=ECD D  Q
"RTN","ECEFPAT",207,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid DSS Unit"
"RTN","ECEFPAT",208,0)
 D CHK^DIE(721,7,,"`"_ECC,.ECRRX) I ECRRX'=ECC D  Q
"RTN","ECEFPAT",209,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Category"
"RTN","ECEFPAT",210,0)
 D  I ECERR Q
"RTN","ECEFPAT",211,0)
 .I ECP["ICPT" S ECRRX=$$CPT^ICPTCOD(+ECP,ECDT) I +ECRRX>0,$P(ECRRX,U,7) Q
"RTN","ECEFPAT",212,0)
 .I ECP["EC",$D(^EC(725,+ECP,0)) Q
"RTN","ECEFPAT",213,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure"
"RTN","ECEFPAT",214,0)
 D CHK^DIE(721,11,,"`"_ECMN,.ECRRX) I ECRRX'=ECMN D  Q
"RTN","ECEFPAT",215,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Ordering Section"
"RTN","ECEFPAT",216,0)
 D CHK^DIE(721,20,,"`"_ECDX,.ECRRX) I ECRRX'=ECDX D  Q
"RTN","ECEFPAT",217,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Primary Diagnosis"
"RTN","ECEFPAT",218,0)
 I $G(EC4)'="" D CHK^DIE(721,26,,"`"_EC4,.ECRRX) I ECRRX'=EC4 D  Q
"RTN","ECEFPAT",219,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Associated Clinic"
"RTN","ECEFPAT",220,0)
 Q
"RTN","ECEFPAT",221,0)
 ;
"RTN","ECEFPAT",222,0)
CVTREAS ;119 Section added to convert procedure reason IEN in 720.4 to EC Code Screen/Procedure reason link in file 720.5.
"RTN","ECEFPAT",223,0)
 N SCREEN,SCREENID,I
"RTN","ECEFPAT",224,0)
 S SCREEN=ECL_"-"_ECD_"-"_+$G(ECC,0)_"-"_ECP ;creates event code screen
"RTN","ECEFPAT",225,0)
 S SCREENID=$O(^ECJ("B",SCREEN,0)) I '+SCREENID S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Event Code Screen" Q  ;event code screen doesn't exist
"RTN","ECEFPAT",226,0)
 F I="ECPXREAS","ECPXREA2","ECPXREA3" I $G(@I) S @I=$$GETVAL(SCREENID,@I)
"RTN","ECEFPAT",227,0)
 Q
"RTN","ECEFPAT",228,0)
GETVAL(SCREENO,REASNO) ;119 section added to get link from 720.5 or add it if necessary
"RTN","ECEFPAT",229,0)
 N LINK,DIC,X,Y
"RTN","ECEFPAT",230,0)
 S LINK=$O(^ECL("AD",SCREENO,REASNO,0))
"RTN","ECEFPAT",231,0)
 I $G(LINK) Q LINK  ;Entry in 720.5 exists, return IEN
"RTN","ECEFPAT",232,0)
 S DIC="^ECL(",DIC(0)="",X=REASNO,DIC("DR")=".02////"_SCREENO
"RTN","ECEFPAT",233,0)
 K DD,DO D FILE^DICN
"RTN","ECEFPAT",234,0)
 S LINK=$S(+Y:+Y,1:"") ;New IEN or null if not added
"RTN","ECEFPAT",235,0)
 Q LINK
"RTN","ECEFPAT",236,0)
 ;
"RTN","ECEFPAT",237,0)
TABLE(OPTION,RECNO) ;134 Section added to add/delete state home records from XTMP table.
"RTN","ECEFPAT",238,0)
 I '$$PATCH^XPDUTL("ECX*3.0*166") Q  ;Don't start table maintenance until related patch in DSS is installed.
"RTN","ECEFPAT",239,0)
 I $G(OPTION)=""!($G(RECNO)="") Q
"RTN","ECEFPAT",240,0)
 I $G(OPTION)="A" S ^XTMP("ECEFPAT",RECNO)="" ;add to table
"RTN","ECEFPAT",241,0)
 I $G(OPTION)="D" K ^XTMP("ECEFPAT",RECNO) ;delete from table
"RTN","ECEFPAT",242,0)
 S ^XTMP("ECEFPAT",0)=$$FMADD^XLFDT($$DT^XLFDT,180)_"^"_$$DT^XLFDT_"^"_"Event capture state home records"
"RTN","ECEFPAT",243,0)
 Q
"RTN","ECEFPAT",244,0)
 ;
"RTN","ECEFPAT",245,0)
STAT() ;139 Returns status of record
"RTN","ECEFPAT",246,0)
 N LED
"RTN","ECEFPAT",247,0)
 S LED=$$LED+.24 ;Set last extract date to midnight of that day
"RTN","ECEFPAT",248,0)
 I ECDT'>LED Q "LATE"
"RTN","ECEFPAT",249,0)
 Q ""
"RTN","ECEFPAT",250,0)
 ;
"RTN","ECEFPAT",251,0)
LED() ;139 Determine last extract date for Event Capture
"RTN","ECEFPAT",252,0)
 N LAST,EXTNO,EXTNOLED
"RTN","ECEFPAT",253,0)
 S EXTNO=$P($G(^XTMP("EC LED",0)),U,4) ;Get extract number associated with last extract date
"RTN","ECEFPAT",254,0)
 F  S EXTNO=$O(^ECX(727,"D","EVENT CAPTURE",EXTNO)) Q:'+EXTNO  D
"RTN","ECEFPAT",255,0)
 .S EXTNOLED=$$GET1^DIQ(727,EXTNO,4,"I") ;Get end date for extract
"RTN","ECEFPAT",256,0)
 .S LAST=$P($G(^XTMP("EC LED",0)),U,5) ;Get last extract date if stored
"RTN","ECEFPAT",257,0)
 .I EXTNOLED'<LAST D  ;If extract end date is later than current last date then update
"RTN","ECEFPAT",258,0)
 ..S ^XTMP("EC LED",0)=$$FMADD^XLFDT($$DT^XLFDT,180)_"^"_$$DT^XLFDT_"^"_"Last event capture extract date"_"^"_EXTNO_"^"_EXTNOLED
"RTN","ECEFPAT",259,0)
 Q +$P($G(^XTMP("EC LED",0)),U,5)  ;Return last extract date
"RTN","ECEFPAT",260,0)
 ;
"RTN","ECEFPAT",261,0)
OOSCLIN ;139 Create an OOS related clinic for a location and DSS unit when DSS unit is an OOS type
"RTN","ECEFPAT",262,0)
 N CLNAME,STOP,ECCLN
"RTN","ECEFPAT",263,0)
 S STOP=$$GET1^DIQ(40.7,+$P(^ECD(ECD,0),U,10),1) ;Get stop code for DSS unit
"RTN","ECEFPAT",264,0)
 S CLNAME="EC "_$$GET1^DIQ(4,ECL,99)_" OOS "_STOP ;Create clinic name as EC_STA6_OOS_Stop code number
"RTN","ECEFPAT",265,0)
 S EC4=+$$FIND1^DIC(44,"","X",CLNAME) I EC4 Q  ;If clinic exists, skip creation
"RTN","ECEFPAT",266,0)
 S ECCLN=$$LOC^SCDXUAPI(CLNAME,ECL,STOP,"EC")
"RTN","ECEFPAT",267,0)
 S EC4=+ECCLN ;Set EC4 (clinic) to newly created clinic
"RTN","ECEFPAT",268,0)
 Q
"RTN","ECLATESH")
0^3^B12606729^n/a
"RTN","ECLATESH",1,0)
ECLATESH ;ALB/DAN - Possible Late State Home Entries Report ;10/5/17  11:50
"RTN","ECLATESH",2,0)
 ;;2.0;EVENT CAPTURE;**139**;8 May 96;Build 7
"RTN","ECLATESH",3,0)
 ;
"RTN","ECLATESH",4,0)
START ;
"RTN","ECLATESH",5,0)
 K ^TMP($J,"ECLATESH") ;Clear space for printed report
"RTN","ECLATESH",6,0)
 D GETRECS
"RTN","ECLATESH",7,0)
 I $G(ECPTYP)="E" S ^TMP($J,"ECRPT",1)="DSS UNIT^LOCATION^PATIENT^SSN^PROCEDURE DATE/TIME^ENTERED ON DATE/TIME^ENTERED BY^PROCEDURE^VOLUME^PRIMARY PROVIDER" K ^TMP($J,"ECLATESH") Q
"RTN","ECLATESH",8,0)
 D PRINT
"RTN","ECLATESH",9,0)
 K ^TMP($J,"ECLATESH") ;Clear space used for printed report
"RTN","ECLATESH",10,0)
 Q
"RTN","ECLATESH",11,0)
 ;
"RTN","ECLATESH",12,0)
GETRECS ;Find records for report
"RTN","ECLATESH",13,0)
 N CNT,DATE,REC,ECDATA,DSSU,PAT,PDT,IDT,USER,PROC,VOL,PROV,LOC
"RTN","ECLATESH",14,0)
 S CNT=1
"RTN","ECLATESH",15,0)
 S DATE=ECSD F  S DATE=$O(^ECH("AC",DATE)) Q:'+DATE!(DATE>ECED)  S REC=0 F  S REC=$O(^ECH("AC",DATE,REC)) Q:'+REC  D
"RTN","ECLATESH",16,0)
 .I $$GET1^DIQ(721,REC,46,"E")'["LATE" Q  ;Only looking for records with a "l"ate status
"RTN","ECLATESH",17,0)
 .S CNT=CNT+1
"RTN","ECLATESH",18,0)
 .D GETS^DIQ(721,REC,"1;2;3;6;8;9;13;47","IE","ECDATA")
"RTN","ECLATESH",19,0)
 .S DSSU=$G(ECDATA(721,REC_",",6,"E")) ;DSS Unit
"RTN","ECLATESH",20,0)
 .S PAT=$G(ECDATA(721,REC_",",1,"E")) ;Patient Name
"RTN","ECLATESH",21,0)
 .S SSN=$$GETSSN^ECRDSSA(REC) ;SSN - 4 digit for printed, 9 for export
"RTN","ECLATESH",22,0)
 .S PDT=$$FMTE^XLFDT($G(ECDATA(721,REC_",",2,"I")),5) ;Procedure date/time
"RTN","ECLATESH",23,0)
 .S IDT=$$FMTE^XLFDT($G(ECDATA(721,REC_",",47,"I")),5) ;Import date/time
"RTN","ECLATESH",24,0)
 .S USER=$G(ECDATA(721,REC_",",13,"E")) ;Entered by
"RTN","ECLATESH",25,0)
 .S PROC=$$GETPROC^ECRDSSA($G(ECDATA(721,REC_",",8,"I"))) ;Procedure Name
"RTN","ECLATESH",26,0)
 .S VOL=$G(ECDATA(721,REC_",",9,"E")) ;Volume
"RTN","ECLATESH",27,0)
 .S PROV=$$GETPROV^ECRDSSA(REC) ;Primary Provider Name
"RTN","ECLATESH",28,0)
 .S LOC=$G(ECDATA(721,REC_",",3,"E")) ;Location
"RTN","ECLATESH",29,0)
 .S ^TMP($J,"ECRPT",CNT)=DSSU_U_LOC_U_PAT_U_SSN_U_PDT_U_IDT_U_USER_U_PROC_U_VOL_U_PROV ;Exported fields
"RTN","ECLATESH",30,0)
 .S ^TMP($J,"ECLATESH",LOC,DSSU,REC)=PAT_U_SSN_U_PDT_U_IDT_U_PROC_U_VOL_U_PROV ;Printed report fields
"RTN","ECLATESH",31,0)
 .K ECDATA
"RTN","ECLATESH",32,0)
 Q
"RTN","ECLATESH",33,0)
 ;
"RTN","ECLATESH",34,0)
PRINT ;Display results
"RTN","ECLATESH",35,0)
 N LOC,REC,PAGE,DSSU,TVOL,NODE
"RTN","ECLATESH",36,0)
 U IO
"RTN","ECLATESH",37,0)
 I '$D(^TMP($J,"ECLATESH")) W !,"No potentially late entered state home records were found for this date range."
"RTN","ECLATESH",38,0)
 S LOC="" F  S LOC=$O(^TMP($J,"ECLATESH",LOC)) Q:LOC=""  D
"RTN","ECLATESH",39,0)
 .D HDR
"RTN","ECLATESH",40,0)
 .S DSSU="" F  S DSSU=$O(^TMP($J,"ECLATESH",LOC,DSSU)) Q:DSSU=""  D
"RTN","ECLATESH",41,0)
 ..W !,"DSS Unit: ",DSSU,!
"RTN","ECLATESH",42,0)
 ..S REC=0 F  S REC=$O(^TMP($J,"ECLATESH",LOC,DSSU,REC)) Q:'+REC  D
"RTN","ECLATESH",43,0)
 ...S NODE=^TMP($J,"ECLATESH",LOC,DSSU,REC)
"RTN","ECLATESH",44,0)
 ...W !,$P(NODE,U),?32,$P(NODE,U,2),?38,$P(NODE,U,3),?56,$P(NODE,U,4),?76,$P(NODE,U,5),?85,$J($P(NODE,U,6),5),?93,$P(NODE,U,7) S TVOL=$G(TVOL)+$P(NODE,U,6)
"RTN","ECLATESH",45,0)
 ...I $Y>(IOSL-4) D HDR
"RTN","ECLATESH",46,0)
 ..W !,?85,"-----",!,"Total for DSS Unit: ",DSSU,?85,$J(TVOL,5),! S TVOL=0
"RTN","ECLATESH",47,0)
 Q
"RTN","ECLATESH",48,0)
 ;
"RTN","ECLATESH",49,0)
HDR ;
"RTN","ECLATESH",50,0)
 W @IOF W:$G(PAGE) !
"RTN","ECLATESH",51,0)
 S PAGE=$G(PAGE)+1
"RTN","ECLATESH",52,0)
 W ?40,"EVENT CAPTURE POSSIBLE LATE STATE HOME ENTRIES REPORT",?124,"PAGE:",PAGE
"RTN","ECLATESH",53,0)
 W !,?50,"For Location ",LOC
"RTN","ECLATESH",54,0)
 W !,?50,"From ",$$FMTE^XLFDT((ECSD+.0001),5)," through ",$$FMTE^XLFDT((ECED-.9999),5)
"RTN","ECLATESH",55,0)
 W !!,"PATIENT",?32,"SSN",?38,"PROCEDURE",?56,"ENTERED ON",?76,"PROCEDURE",?87,"VOL",?93,"PRIMARY PROVIDER"
"RTN","ECLATESH",56,0)
 W !,?38,"DATE/TIME",?56,"DATE/TIME"
"RTN","ECLATESH",57,0)
 W !,$$REPEAT^XLFSTR("-",132)
"RTN","ECLATESH",58,0)
 Q
"RTN","ECLATESH",59,0)
 ;
"RTN","ECMFDSSU")
0^17^B67578246^B64085384
"RTN","ECMFDSSU",1,0)
ECMFDSSU ;ALB/JAM-Event Capture Management Filer DSS Unit ;2/6/18  14:41
"RTN","ECMFDSSU",2,0)
 ;;2.0;EVENT CAPTURE ;**25,30,33,126,131,139**;8 May 96;Build 7
"RTN","ECMFDSSU",3,0)
 ;
"RTN","ECMFDSSU",4,0)
FILE ;Used by the RPC broker to file DSS Units in file #724
"RTN","ECMFDSSU",5,0)
 ;     Variables passed in
"RTN","ECMFDSSU",6,0)
 ;       ECIEN  - IEN of #724, if editing
"RTN","ECMFDSSU",7,0)
 ;       ECDUNM - DSS Unit Name
"RTN","ECMFDSSU",8,0)
 ;       ECS    - Service
"RTN","ECMFDSSU",9,0)
 ;       ECM    - Medical Speciality
"RTN","ECMFDSSU",10,0)
 ;       ECTR   - Cost Center
"RTN","ECMFDSSU",11,0)
 ;       ECUN   - Unit Number
"RTN","ECMFDSSU",12,0)
 ;       ECST   - Status Flag (Active/Inactive)
"RTN","ECMFDSSU",13,0)
 ;       ECASC  - Associated Stop Code
"RTN","ECMFDSSU",14,0)
 ;       ECC    - Category
"RTN","ECMFDSSU",15,0)
 ;       ECDFDT - Default Data Entry Date
"RTN","ECMFDSSU",16,0)
 ;       ECPCE  - Send to PCE
"RTN","ECMFDSSU",17,0)
 ;       ECSCN  - Event Code Screens status
"RTN","ECMFDSSU",18,0)
 ;       ECCSC  - Credit stop code, can be used when PCE status is
"RTN","ECMFDSSU",19,0)
 ;                no records
"RTN","ECMFDSSU",20,0)
 ;       ECHAR4 - CHAR4 code, can be used when PCE status is no records
"RTN","ECMFDSSU",21,0)
 ;       ECADUP - DSS Unit allows duplicate records during upload
"RTN","ECMFDSSU",22,0)
 ;
"RTN","ECMFDSSU",23,0)
 ;     Variable return
"RTN","ECMFDSSU",24,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #724^Message
"RTN","ECMFDSSU",25,0)
 ;
"RTN","ECMFDSSU",26,0)
 N ECERR,ECX,ECFLG,ECRES,ECONAM
"RTN","ECMFDSSU",27,0)
 S ECERR=0 D CHKDT I ECERR Q
"RTN","ECMFDSSU",28,0)
 D VALDATA I ECERR Q
"RTN","ECMFDSSU",29,0)
 S ECIEN=$G(ECIEN),ECFLG=1,ECONAM="",ECC=$S(ECC="Y":1,1:0)
"RTN","ECMFDSSU",30,0)
 I ECIEN'="" S ECFLG=0 D  I ECERR D END Q
"RTN","ECMFDSSU",31,0)
 . I '$D(^ECD(ECIEN,0)) D  Q
"RTN","ECMFDSSU",32,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Not on File" Q
"RTN","ECMFDSSU",33,0)
 . D CATCHK^ECUMRPC1(.ECRES,ECIEN) I ECRES,ECC'=$P(^ECD(ECIEN,0),U,11) D 
"RTN","ECMFDSSU",34,0)
 . . I ECC=0 D FIXSCRNS Q  ;131 If Category changed to no, update existing event code screens
"RTN","ECMFDSSU",35,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^Category Changed, EC Screen exist"
"RTN","ECMFDSSU",36,0)
 . S ECONAM=$P($G(^ECD(ECIEN,0)),U)
"RTN","ECMFDSSU",37,0)
 D  I ECERR D END Q   ;Check name
"RTN","ECMFDSSU",38,0)
 . I (ECFLG)!((ECONAM'="")&(ECONAM'=ECDUNM)),$D(^ECD("B",ECDUNM)) D  Q
"RTN","ECMFDSSU",39,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Name already exist"
"RTN","ECMFDSSU",40,0)
 . I 'ECFLG K DIE S DIE="^ECD(",DA=ECIEN,DR=".01////"_ECDUNM D ^DIE
"RTN","ECMFDSSU",41,0)
 S ECPCE=$S(ECPCE="A":"A",ECPCE="OOS":"OOS",1:"N") ;139
"RTN","ECMFDSSU",42,0)
 I ECPCE'="A",$G(ECASC)="" D  D END Q  ;139
"RTN","ECMFDSSU",43,0)
 . S ECERR=1,^TMP($J,"ECMSG",1)="0^No associated stop code, send to PCE setting requires an associated stop code" ;126,139 Corrected error message
"RTN","ECMFDSSU",44,0)
 I 'ECFLG,ECPCE'="A",$P($G(^ECD(+$G(ECIEN),0)),U,14)="A" D UPDSCRN ;131,139 If existing DSS Unit and PCE is changing from All records then update related EC screens
"RTN","ECMFDSSU",45,0)
 I ECIEN="" D NEWIEN
"RTN","ECMFDSSU",46,0)
 K DA,DR,DIE
"RTN","ECMFDSSU",47,0)
 S ECST=$E($G(ECST)),ECST=$S(ECST="I":1,1:0),ECDFDT=$E($G(ECDFDT))
"RTN","ECMFDSSU",48,0)
 S ECDFDT=$S(ECDFDT="N":"N",1:"X"),DIE="^ECD(",DA=ECIEN
"RTN","ECMFDSSU",49,0)
 S DR="1////"_ECS_";2////"_ECM_";3////"_ECTR_";4////"_$G(ECUN)
"RTN","ECMFDSSU",50,0)
 S DR=DR_";5////"_ECST_";7////1;9////"_$S(ECPCE="A":"@",1:$G(ECASC)) ;139
"RTN","ECMFDSSU",51,0)
 S DR=DR_";10////"_ECC_";11////"_ECDFDT_";13////"_ECPCE
"RTN","ECMFDSSU",52,0)
 S DR=DR_";14////"_$S(ECPCE="A":"@",$G(ECCSC)="":"@",1:$G(ECCSC))_";15////"_$S(ECPCE'="N":"@",$G(ECHAR4)="":"@",1:$G(ECHAR4)) ;126,139 Add credit stop and char4 fields, 139 Update logic for deleting stop code
"RTN","ECMFDSSU",53,0)
 S DR=DR_";16////"_$G(ECADUP,"N") ;139 Does DSS Unit allow duplicate records to be uploaded
"RTN","ECMFDSSU",54,0)
 D ^DIE I $D(DTOUT) D RECDEL D  D END Q
"RTN","ECMFDSSU",55,0)
 . S ^TMP($J,"ECMSG",1)="0^DSS Unit Record not Filed"
"RTN","ECMFDSSU",56,0)
 I 'ECFLG D ECSCRNS
"RTN","ECMFDSSU",57,0)
 S ^TMP($J,"ECMSG",1)="1^DSS Unit Record Filed"_U_ECIEN
"RTN","ECMFDSSU",58,0)
END K DIE,DIC,DR,DA,DO,ECIEN
"RTN","ECMFDSSU",59,0)
 Q
"RTN","ECMFDSSU",60,0)
VALDATA ;validate data
"RTN","ECMFDSSU",61,0)
 N ECRRX
"RTN","ECMFDSSU",62,0)
 D CHK^DIE(724,.01,"E",ECDUNM,.ECRRX) I ECRRX'=ECDUNM D  Q
"RTN","ECMFDSSU",63,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid DSS Unit Name"
"RTN","ECMFDSSU",64,0)
 D CHK^DIE(724,1,"E","`"_ECS,.ECRRX) I ECRRX'=ECS D  Q
"RTN","ECMFDSSU",65,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Service"
"RTN","ECMFDSSU",66,0)
 D CHK^DIE(724,2,"E","`"_ECM,.ECRRX) I ECRRX'=ECM D  Q
"RTN","ECMFDSSU",67,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Medical Speciality"
"RTN","ECMFDSSU",68,0)
 D CHK^DIE(724,3,"E","`"_ECTR,.ECRRX) I ECRRX'=ECTR D  Q
"RTN","ECMFDSSU",69,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Cost Center"
"RTN","ECMFDSSU",70,0)
 I $G(ECUN)'="" D CHK^DIE(724,4,"E",ECUN,.ECRRX) I ECRRX'=ECUN D  Q
"RTN","ECMFDSSU",71,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Unit Number"
"RTN","ECMFDSSU",72,0)
 I $G(ECASC)'="" D CHK^DIE(724,9,"E","`"_ECASC,.ECRRX) I ECRRX'=ECASC D  Q
"RTN","ECMFDSSU",73,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Associated Stop Code" ;126 Corrected error message
"RTN","ECMFDSSU",74,0)
 I $G(ECCSC)'="" D CHK^DIE(724,14,"E","`"_ECCSC,.ECRRX) I ECRRX'=ECCSC S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Credit Stop Code" Q  ;126
"RTN","ECMFDSSU",75,0)
 I $G(ECHAR4)'="" D CHK^DIE(724,15,"E","`"_ECHAR4,.ECRRX) I ECRRX'=ECHAR4 S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid CHAR4 Code" Q  ;126
"RTN","ECMFDSSU",76,0)
 Q
"RTN","ECMFDSSU",77,0)
ECSCRNS ;Determine if event codes should be updated based on change of DSS Unit
"RTN","ECMFDSSU",78,0)
 ;status
"RTN","ECMFDSSU",79,0)
 ;  DSS Unit status changed from Active to Inactive, if EC screen status
"RTN","ECMFDSSU",80,0)
 ;      A - retain, do nothing,  B - inactiviate
"RTN","ECMFDSSU",81,0)
 ;  DSS Unit status changed from Inactive to Active, if EC screen status
"RTN","ECMFDSSU",82,0)
 ;      C - reactiviate,         D - remain inactive
"RTN","ECMFDSSU",83,0)
 ;
"RTN","ECMFDSSU",84,0)
 N ECD,ECINC,ZTDESC,ZTSAVE,ZTIO,ZTRTN,ZTDTH
"RTN","ECMFDSSU",85,0)
 I ($G(ECSCN)="")!(ECSCN="A")!(ECSCN="D") Q
"RTN","ECMFDSSU",86,0)
 I "^B^C^"']"^"_ECSCN_"^" Q
"RTN","ECMFDSSU",87,0)
 S ECD=ECIEN,ECINC=DT
"RTN","ECMFDSSU",88,0)
 I ECSCN="B" D
"RTN","ECMFDSSU",89,0)
 .S ZTDESC="DEALLOCATE DSS UNIT & INACTIVATE EVENT CODE SCREENS"
"RTN","ECMFDSSU",90,0)
 I ECSCN="C" D
"RTN","ECMFDSSU",91,0)
 .S ZTDESC="REACTIVIATE EVENT CODE SCREENS",ECINC="@"
"RTN","ECMFDSSU",92,0)
 S ZTRTN=$S(ECSCN="B":"DIK",1:"INSCRN")_"^ECDEAL",ZTDTH=$H
"RTN","ECMFDSSU",93,0)
 N ECSCN
"RTN","ECMFDSSU",94,0)
 S ECSCN=1,(ZTSAVE("ECD"),ZTSAVE("ECSCN"),ZTSAVE("ECINC"))="",ZTIO=""
"RTN","ECMFDSSU",95,0)
 D ^%ZTLOAD K ZTSK Q
"RTN","ECMFDSSU",96,0)
 D @ZTRTN
"RTN","ECMFDSSU",97,0)
 Q
"RTN","ECMFDSSU",98,0)
 ;
"RTN","ECMFDSSU",99,0)
RECDEL ; Delete record
"RTN","ECMFDSSU",100,0)
 I ECFLG S DA=ECIEN,DIK="^ECD(" D ^DIK K DA,DIK
"RTN","ECMFDSSU",101,0)
 Q
"RTN","ECMFDSSU",102,0)
NEWIEN ;Create new IEN in file #724
"RTN","ECMFDSSU",103,0)
 N DIC,DA,DD,DO
"RTN","ECMFDSSU",104,0)
 L +^ECD(0):3 ;126 Added lock time out as required by standard
"RTN","ECMFDSSU",105,0)
 S DIC=724,DIC(0)="L",X=ECDUNM
"RTN","ECMFDSSU",106,0)
 D FILE^DICN
"RTN","ECMFDSSU",107,0)
 L -^ECD(0)
"RTN","ECMFDSSU",108,0)
 S ECIEN=+Y
"RTN","ECMFDSSU",109,0)
 Q
"RTN","ECMFDSSU",110,0)
CHKDT ;Required Data Check
"RTN","ECMFDSSU",111,0)
 N I,C
"RTN","ECMFDSSU",112,0)
 S C=1
"RTN","ECMFDSSU",113,0)
 F I="ECDUNM","ECS","ECM","ECTR","ECC" D
"RTN","ECMFDSSU",114,0)
 .I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECMFDSSU",115,0)
 Q
"RTN","ECMFDSSU",116,0)
USER ;Used by the RPC broker to allocate or de-allocate users for DSS Units
"RTN","ECMFDSSU",117,0)
 ;in file #200
"RTN","ECMFDSSU",118,0)
 ;     Variables passed in
"RTN","ECMFDSSU",119,0)
 ;       ECIEN      - IEN of DSS Unit in file #724
"RTN","ECMFDSSU",120,0)
 ;       ECUSR0..n  - Users to allocate/deallocate to DSS Unit
"RTN","ECMFDSSU",121,0)
 ;
"RTN","ECMFDSSU",122,0)
 ;     Variable return
"RTN","ECMFDSSU",123,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #724^Message
"RTN","ECMFDSSU",124,0)
 ;
"RTN","ECMFDSSU",125,0)
 N EDUZ,ECERR,ECI,ECX,USER,DIC,DIK,X,Y,DA
"RTN","ECMFDSSU",126,0)
 S (EDUZ,ECERR)=0,ECIEN=$G(ECIEN)
"RTN","ECMFDSSU",127,0)
 I ECIEN="" S ^TMP($J,"ECMSG",1)="0^DSS Unit missing" Q
"RTN","ECMFDSSU",128,0)
 D  I ECERR Q
"RTN","ECMFDSSU",129,0)
 . I '$D(^ECD(ECIEN,0)) D
"RTN","ECMFDSSU",130,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit Not on File"
"RTN","ECMFDSSU",131,0)
 F ECI=0:1 S ECX="ECUSR"_ECI Q:'$D(@ECX)  S:@ECX'="" USER(@ECX)=""
"RTN","ECMFDSSU",132,0)
 F  S EDUZ=$O(^VA(200,EDUZ)) Q:'EDUZ  I $D(^VA(200,EDUZ,"EC",ECIEN,0)) D
"RTN","ECMFDSSU",133,0)
 . I $D(USER(EDUZ)) K USER(EDUZ) Q
"RTN","ECMFDSSU",134,0)
 . K DA,DIK S DA(1)=EDUZ,DA=ECIEN,DIK="^VA(200,"_DA(1)_",""EC"","
"RTN","ECMFDSSU",135,0)
 . D ^DIK K USER(EDUZ)
"RTN","ECMFDSSU",136,0)
 ;add users for DSS Unit
"RTN","ECMFDSSU",137,0)
 S EDUZ=0 F  S EDUZ=$O(USER(EDUZ)) Q:'EDUZ  D
"RTN","ECMFDSSU",138,0)
 . K DIC,DD,DO S DIC=200,DIC(0)="QNMX",X=EDUZ D ^DIC I Y<0 Q
"RTN","ECMFDSSU",139,0)
 . K DIC,DD,DO S DIC(0)="L",DA(1)=EDUZ,DIC("P")=$P(^DD(200,720,0),U,2)
"RTN","ECMFDSSU",140,0)
 . S DINUM=ECIEN,DIC="^VA(200,"_DA(1)_",""EC"",",X=ECIEN
"RTN","ECMFDSSU",141,0)
 . D FILE^DICN
"RTN","ECMFDSSU",142,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN K DINUM
"RTN","ECMFDSSU",143,0)
 Q
"RTN","ECMFDSSU",144,0)
DSSU ;Used by the RPC broker to allocate or de-allocate DSS Units for a user
"RTN","ECMFDSSU",145,0)
 ;in file #200
"RTN","ECMFDSSU",146,0)
 ;     Variables passed in
"RTN","ECMFDSSU",147,0)
 ;       ECIEN   - User IEN in file #200
"RTN","ECMFDSSU",148,0)
 ;       ECD0..n - IEN of DSS Unit in file #724 to allocate/deallocate
"RTN","ECMFDSSU",149,0)
 ;       
"RTN","ECMFDSSU",150,0)
 ;
"RTN","ECMFDSSU",151,0)
 ;     Variable return
"RTN","ECMFDSSU",152,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #200^Message
"RTN","ECMFDSSU",153,0)
 ;
"RTN","ECMFDSSU",154,0)
 N EDU,ECERR,ECI,ECX,ECDSSU,DIC,DIK,DA,X,Y
"RTN","ECMFDSSU",155,0)
 S (EDU,ECERR)=0,ECIEN=$G(ECIEN)
"RTN","ECMFDSSU",156,0)
 I ECIEN="" S ^TMP($J,"ECMSG",1)="0^User missing" Q
"RTN","ECMFDSSU",157,0)
 D  I ECERR Q
"RTN","ECMFDSSU",158,0)
 . S DIC=200,DIC(0)="QNX",X=ECIEN D ^DIC D:Y<0
"RTN","ECMFDSSU",159,0)
 . . S ECERR=1,^TMP($J,"ECMSG",1)="0^User Not on File"
"RTN","ECMFDSSU",160,0)
 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  S:@ECX'="" ECDSSU(@ECX)=""
"RTN","ECMFDSSU",161,0)
 F  S EDU=$O(^VA(200,ECIEN,"EC",EDU)) Q:'EDU  D
"RTN","ECMFDSSU",162,0)
 . I $D(ECDSSU(EDU)) K ECDSSU(EDU) Q
"RTN","ECMFDSSU",163,0)
 . K DA,DIK S DA(1)=ECIEN,DA=EDU,DIK="^VA(200,"_DA(1)_",""EC"","
"RTN","ECMFDSSU",164,0)
 . D ^DIK
"RTN","ECMFDSSU",165,0)
 ;add DSS Units for user
"RTN","ECMFDSSU",166,0)
 S EDU=0 F  S EDU=$O(ECDSSU(EDU)) Q:'EDU  D
"RTN","ECMFDSSU",167,0)
 . I '$D(^ECD(EDU,0)) Q
"RTN","ECMFDSSU",168,0)
 . K DIC,DD,DO S DIC(0)="L",DA(1)=ECIEN,DIC("P")=$P(^DD(200,720,0),U,2)
"RTN","ECMFDSSU",169,0)
 . S DINUM=EDU,DIC="^VA(200,"_DA(1)_",""EC"",",X=EDU
"RTN","ECMFDSSU",170,0)
 . D FILE^DICN
"RTN","ECMFDSSU",171,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN
"RTN","ECMFDSSU",172,0)
 Q
"RTN","ECMFDSSU",173,0)
 ;
"RTN","ECMFDSSU",174,0)
UPDSCRN ;131 Section added to remove default associated clinic from event capture screens for a specific DSS Unit
"RTN","ECMFDSSU",175,0)
 N LOC,CAT,PROC,DA,DIE,DR
"RTN","ECMFDSSU",176,0)
 S LOC=0 F  S LOC=$O(^ECJ("AP",LOC)) Q:'+LOC  S CAT="" F  S CAT=$O(^ECJ("AP",LOC,ECIEN,CAT)) Q:CAT=""  S PROC="" F  S PROC=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC)) Q:PROC=""  D
"RTN","ECMFDSSU",177,0)
 .S DA=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC,0)) Q:'+DA
"RTN","ECMFDSSU",178,0)
 .S DIE="^ECJ("
"RTN","ECMFDSSU",179,0)
 .S DR="55///@"
"RTN","ECMFDSSU",180,0)
 .D ^DIE
"RTN","ECMFDSSU",181,0)
 Q
"RTN","ECMFDSSU",182,0)
 ;
"RTN","ECMFDSSU",183,0)
FIXSCRNS ;131 Section added to inactivate existing event code screens
"RTN","ECMFDSSU",184,0)
 ;when category changed from yes to no.  Equivalent event code screens
"RTN","ECMFDSSU",185,0)
 ;without a category will either be reactivated or created, as needed
"RTN","ECMFDSSU",186,0)
 ;
"RTN","ECMFDSSU",187,0)
 N LOC,CAT,PROC,DR,DA,DIE,DSS,ECCH,ECL,ECD,ECC,ECP,ECST,ECSYN,ECVOL,ECAC,ECREAS,NODE
"RTN","ECMFDSSU",188,0)
 S LOC=0 F  S LOC=$O(^ECJ("AP",LOC)) Q:'+LOC  S CAT=0 F  S CAT=$O(^ECJ("AP",LOC,ECIEN,CAT)) Q:'+CAT  S PROC="" F  S PROC=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC)) Q:PROC=""  D
"RTN","ECMFDSSU",189,0)
 .S DA=$O(^ECJ("AP",LOC,ECIEN,CAT,PROC,0)) Q:'+DA  ;Get record # of existing event code screen
"RTN","ECMFDSSU",190,0)
 .I $P(^ECJ(DA,0),U,2)'="" Q  ;Screen is already inactive, no action needed
"RTN","ECMFDSSU",191,0)
 .S DIE="^ECJ(",DR="1///"_$$DT^XLFDT D ^DIE ;Inactivate screen using today's date
"RTN","ECMFDSSU",192,0)
 .;Create or activate/update equivalent event code screen without a category
"RTN","ECMFDSSU",193,0)
 .S ECCH=LOC_"-"_ECIEN_"-"_0_"-"_PROC,DSS=ECIEN S ECIEN="" ;protecting ECIEN as it's used in another routine
"RTN","ECMFDSSU",194,0)
 .I $D(^ECJ("B",ECCH)) S ECIEN=$O(^ECJ("B",ECCH,0)) Q:'+ECIEN  ;Non-category event code screen exists, identify record number for updating
"RTN","ECMFDSSU",195,0)
 .S ECL=LOC,ECD=DSS,ECC=0,ECP=PROC,ECST="A"
"RTN","ECMFDSSU",196,0)
 .S NODE=$G(^ECJ(DA,"PRO")),ECSYN=$P(NODE,U,2),ECVOL=$P(NODE,U,3),ECAC=$P(NODE,U,4),ECREAS=$E($$GET1^DIQ(720.3,DA,56,"E"),1) ;Setting input variables needed for call to ECMFECS
"RTN","ECMFDSSU",197,0)
 .D FILE^ECMFECS ;File update or create new event code screen
"RTN","ECMFDSSU",198,0)
 .S ECIEN=DSS ;Reset ECIEN to DSS Unit IEN
"RTN","ECMFDSSU",199,0)
 Q
"RTN","ECPAT")
0^6^B58151375^B55958670
"RTN","ECPAT",1,0)
ECPAT ;BIR/MAM,JPW - Event Capture Patient Summary ;10/12/17  08:47
"RTN","ECPAT",2,0)
 ;;2.0;EVENT CAPTURE;**5,18,47,72,95,112,119,131,134,139**;8 May 96;Build 7
"RTN","ECPAT",3,0)
SET ; set ^TMP($J,"ECPAT")
"RTN","ECPAT",4,0)
 N ECPXD,EC725
"RTN","ECPAT",5,0)
 I $G(ECPTYP)'="E" I $Y+11>IOSL D PAGE I ECOUT Q  ;119
"RTN","ECPAT",6,0)
 S ECEC=$G(^ECH(ECFN,0))
"RTN","ECPAT",7,0)
 S ECL=+$P(ECEC,"^",4),ECC=+$P(ECEC,"^",8),ECP=$P(ECEC,"^",9),ECD=+$P(ECEC,"^",7),ECV=+$P(ECEC,"^",10)
"RTN","ECPAT",8,0)
 S ECU=$$GETPPRV^ECPRVMUT(ECFN,.ECUN),ECUN=$S(ECU:"UNKNOWN",1:$P(ECUN,"^",2))
"RTN","ECPAT",9,0)
 Q:ECP']""
"RTN","ECPAT",10,0)
 ;set default med spec and ord sect to administrative if blank
"RTN","ECPAT",11,0)
 S ECM=$S($P(ECEC,"^",6)]"":+$P(ECEC,"^",6),1:108),ECO=$S($P(ECEC,"^",12)]"":+$P(ECEC,"^",12),1:108)
"RTN","ECPAT",12,0)
 S ECMN=$S($P($G(^ECC(723,ECM,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",13,0)
 S ECON=$S($P($G(^ECC(723,ECO,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",14,0)
 S ECS=+$P(ECEC,"^",5),ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",15,0)
 S ECCN=$S($P($G(^EC(726,ECC,0)),"^")]"":$P(^(0),"^"),1:"None")
"RTN","ECPAT",16,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECPAT",17,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2)
"RTN","ECPAT",18,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,1:725)
"RTN","ECPAT",19,0)
 S ECCPT=$S(ECFILE=81:+ECP,1:$P($G(^EC(725,+ECP,0)),"^",5)),ECPXD=""
"RTN","ECPAT",20,0)
 I ECCPT'="" D
"RTN","ECPAT",21,0)
 . S ECPXD=$$CPT^ICPTCOD(ECCPT,$P(ECEC,"^",3)),ECCPT=$P(ECPXD,"^",2)
"RTN","ECPAT",22,0)
 . I ECCPT'="" S ECCPT=ECCPT_" "
"RTN","ECPAT",23,0)
 I ECFILE=81 S ECPN=$S($P(ECPXD,"^",3)]"":$P(ECPXD,"^",3),1:"UNKNOWN")
"RTN","ECPAT",24,0)
 I ECFILE=725 D
"RTN","ECPAT",25,0)
 .S EC725=$G(^EC(725,+ECP,0)),ECPN=$P(EC725,"^",2)_" "_$P(EC725,"^")
"RTN","ECPAT",26,0)
 S ECEPN=$S(ECFILE=81:ECPN,1:$P(EC725,U))_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"") ;119 Set export version of procedure name
"RTN","ECPAT",27,0)
 S ECPN=$J(ECCPT,6)_$E(ECPN,1,38)_$S(ECPSYN]"":" ["_ECPSYN_"] ",1:"")
"RTN","ECPAT",28,0)
 S ECDN=$S($P($G(^ECD(ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",29,0)
 S ECLN=$S($P($G(^DIC(4,ECL,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPAT",30,0)
 S ECUN=$S(ECUN'="UNKNOWN":$P(ECUN,",",2)_" "_$P(ECUN,","),1:"UNKNOWN")
"RTN","ECPAT",31,0)
 S ECDT=$$FMTE^XLFDT(DATE)
"RTN","ECPAT",32,0)
 ;
"RTN","ECPAT",33,0)
 ;ALB/ESD - Add Procedure Reason to report
"RTN","ECPAT",34,0)
 N ECLNK,ECRAR ;112,119
"RTN","ECPAT",35,0)
 D GETS^DIQ(721,ECFN,"26;34;43;44","IE","ECRAR") ;112,134 Get associated clinics and reasons
"RTN","ECPAT",36,0)
 S ECPRSN=$G(ECRAR(721,ECFN_",",34,"E")) S:ECPRSN="" ECPRSN="REASON NOT DEFINED" ;112,134
"RTN","ECPAT",37,0)
 S ECPRSN2=$G(ECRAR(721,ECFN_",",43,"E")) ;112,134
"RTN","ECPAT",38,0)
 S ECPRSN3=$G(ECRAR(721,ECFN_",",44,"E")) ;112,134
"RTN","ECPAT",39,0)
 S ECACLN=$G(ECRAR(721,ECFN_",",26,"E")) ;134
"RTN","ECPAT",40,0)
 S CLNODE=$G(^ECX(728.44,+$G(ECRAR(721,ECFN_",",26,"I")),0)) ;134
"RTN","ECPAT",41,0)
 ;
"RTN","ECPAT",42,0)
 ;Get Procedure CPT modifiers
"RTN","ECPAT",43,0)
 I $G(ECPTYP)="E" Q  ;119 Don't need modifiers for exportable version
"RTN","ECPAT",44,0)
 S ECMODF=0 K ECMOD
"RTN","ECPAT",45,0)
 I $O(^ECH(ECFN,"MOD",0))'="" S ECMODF=$$MOD^ECUTL(ECFN,"E",.ECMOD)
"RTN","ECPAT",46,0)
 I $D(ECY) DO
"RTN","ECPAT",47,0)
 .W !!,ECDT,?32,ECCN,?87,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",48,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",49,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",50,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?91,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",51,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECSN,?87,ECMN,! ;112,131
"RTN","ECPAT",52,0)
 .I '$D(ECRY) W ?32,ECON,?87,ECUN ;119
"RTN","ECPAT",53,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",54,0)
 ..W ECPRSN,?32,ECON,?87,ECUN ;112
"RTN","ECPAT",55,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",56,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",57,0)
 I $D(ECN) DO
"RTN","ECPAT",58,0)
 .W !!,ECDT,?32,ECPN_" ("_ECV_")",! ;112
"RTN","ECPAT",59,0)
 .I ECMODF S MD="" D  K MD I ECOUT Q
"RTN","ECPAT",60,0)
 ..F  S MD=$O(ECMOD(MD)) Q:MD=""  D  I ECOUT Q
"RTN","ECPAT",61,0)
 ...D:$Y+5>IOSL PAGE Q:ECOUT  W ?36,"- ",MD," ",$P(ECMOD(MD),U,3),! ;112
"RTN","ECPAT",62,0)
 .W $E(ECLN,1,22),?32,ECDN_" ("_ECD_")",!,?32,ECACLN,?64,$P(CLNODE,U,2),?70,$P(CLNODE,U,3),?78,$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U) ;139
"RTN","ECPAT",63,0)
 .W ?85,$$GET1^DIQ(728.442,$P(CLNODE,U,14),.01),!?32,ECSN,?94,ECMN,! ;139
"RTN","ECPAT",64,0)
 .I '$D(ECRY) W ?32,ECON,?94,ECUN ;119,139
"RTN","ECPAT",65,0)
 .I $D(ECRY) D  ;112
"RTN","ECPAT",66,0)
 ..W ECPRSN,?32,ECON,?94,ECUN ;112,139
"RTN","ECPAT",67,0)
 ..I $G(ECPRSN2)'="" W !,ECPRSN2 ;112
"RTN","ECPAT",68,0)
 ..I $G(ECPRSN3)'="" W !,ECPRSN3 ;112
"RTN","ECPAT",69,0)
 Q
"RTN","ECPAT",70,0)
PAT ; entry point
"RTN","ECPAT",71,0)
 K DIC S DIC=2,DIC(0)="QEAMZ",DIC("A")="Select Patient: " D ^DIC K DIC G:Y<0 END S ECDFN=+Y,ECPAT=$P(Y,"^",2)
"RTN","ECPAT",72,0)
DATE K %DT S %DT="AEX",%DT("A")="Start with Date:  " D ^%DT G:Y<0 END S ECSD=Y,%DT("A")="End with Date:  " D ^%DT G:Y<0 END S ECED=Y I ECED<ECSD W !,"End date must be after start date",! G DATE
"RTN","ECPAT",73,0)
 S ECDATE=$$FMTE^XLFDT(ECSD)_"^"_$$FMTE^XLFDT(ECED),ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECPAT",74,0)
 D REASON^ECRUTL ;* Prompt to report Procedure Reasons
"RTN","ECPAT",75,0)
 K IOP,%ZIS,POP,IO("Q") S %ZIS("A")="Select Device: ",%ZIS="QM" W !!,"This report is designed to use a 132 column format.",! D ^%ZIS G:POP END
"RTN","ECPAT",76,0)
 I $D(IO("Q")) S:$D(ECRY) ZTSAVE("ECRY")=""
"RTN","ECPAT",77,0)
 I $D(IO("Q")) K IO("Q") S (ZTSAVE("ECDFN"),ZTSAVE("ECPAT"),ZTSAVE("ECDATE"),ZTSAVE("ECED"),ZTSAVE("ECSD"))="",ZTDESC="EVENT CAPTURE PATIENT SUMMARY",ZTRTN="SUM^ECPAT",ZTIO=ION D ^%ZTLOAD,HOME^%ZIS G END
"RTN","ECPAT",78,0)
SUM ; entry when queued
"RTN","ECPAT",79,0)
 N ECPRSN,ECPRSN2,ECPRSN3,%H,ECACLN,CLNODE ;112,119,134
"RTN","ECPAT",80,0)
 I $G(ECPTYP)="E" D EXPORT,^ECKILL Q  ;119
"RTN","ECPAT",81,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECPAT",82,0)
 U IO S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE W:$Y @IOF W !!,"No Data for "_ECPAT_" during the time selected." G END
"RTN","ECPAT",83,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",84,0)
 S DATE=ECSD,(ECFN,ECOUT)=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)!(ECOUT)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN!(ECOUT)  D SET
"RTN","ECPAT",85,0)
 D FOOTER  ;for last page
"RTN","ECPAT",86,0)
END I $D(ECGUI) D ^ECKILL Q
"RTN","ECPAT",87,0)
 W ! I $D(ECOUT),'ECOUT D
"RTN","ECPAT",88,0)
 . I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue  " R X:DTIME
"RTN","ECPAT",89,0)
 W @IOF D ^%ZISC D ^ECKILL S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECPAT",90,0)
 Q
"RTN","ECPAT",91,0)
HDR ; print heading
"RTN","ECPAT",92,0)
 ;
"RTN","ECPAT",93,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",94,0)
 W:$Y @IOF
"RTN","ECPAT",95,0)
 W !,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?32,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?32,"Run Date : ",ECRDT
"RTN","ECPAT",96,0)
 W !,"PROCEDURE DATE/TIME",?32,"CATEGORY",?87,"PROCEDURE",!,?87,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)",!,?32,"SERVICE",?87,"SECTION" ;112,131
"RTN","ECPAT",97,0)
 W !
"RTN","ECPAT",98,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",99,0)
 W ?32,"ORDERING SECTION",?87,"PROVIDER",! F LINE=1:1:132 W "-" ;112
"RTN","ECPAT",100,0)
 W !
"RTN","ECPAT",101,0)
 Q
"RTN","ECPAT",102,0)
PAGE ; end of page
"RTN","ECPAT",103,0)
 I $G(X)'["?" D FOOTER
"RTN","ECPAT",104,0)
 S X="" I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue, or ^ to quit   " R X:DTIME I '$T!(X="^") S ECOUT=1 Q
"RTN","ECPAT",105,0)
 I X["?" W !!,"If you want to continue with this report, press <RET>.  Entering an ^ will",!,"exit you from this option." G PAGE
"RTN","ECPAT",106,0)
 D:$D(ECY) HDR D:$D(ECN) HDR1
"RTN","ECPAT",107,0)
 Q
"RTN","ECPAT",108,0)
HDR1 ; print heading without categories
"RTN","ECPAT",109,0)
 ;
"RTN","ECPAT",110,0)
 ;ALB/ESD - Add Run Date to header
"RTN","ECPAT",111,0)
 W @IOF,!!,?32,"EVENT CAPTURE PATIENT SUMMARY FOR "_ECPAT,!,?36,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!,?36,"Run Date : ",ECRDT
"RTN","ECPAT",112,0)
 ;
"RTN","ECPAT",113,0)
 ;ALB/ESD - Add Procedure Reason to column headings
"RTN","ECPAT",114,0)
 W !!,"PROCEDURE DATE/TIME",?32,"PROCEDURE(VOLUME)",!,?32,"PROCEDURE (CPT) MODIFIER",!,"LOCATION",?32,"DSS UNIT NAME (IEN)" ;112,131,134
"RTN","ECPAT",115,0)
 W !,?32,"CLINIC",?64,"STOP",?70,"CREDIT",?78,"CHAR4",?85,"MCA",!,?32,"SERVICE",?85,"LABOR",?94,"SECTION" ;112,131,134,139
"RTN","ECPAT",116,0)
 W !
"RTN","ECPAT",117,0)
 W:$D(ECRY) "PROCEDURE REASON(S)" ;112
"RTN","ECPAT",118,0)
 W ?32,"ORDERING SECTION",?85,"CODE",?94,"PROVIDER",! F LINE=1:1:132 W "-" ;112,139
"RTN","ECPAT",119,0)
 W !
"RTN","ECPAT",120,0)
 Q
"RTN","ECPAT",121,0)
 ;
"RTN","ECPAT",122,0)
FOOTER ;print page footer
"RTN","ECPAT",123,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECPAT",124,0)
 W !?4,"and/or a combination of these."
"RTN","ECPAT",125,0)
 Q
"RTN","ECPAT",126,0)
 ;
"RTN","ECPAT",127,0)
BRO ;ask prt with category or without
"RTN","ECPAT",128,0)
 S ECN=1
"RTN","ECPAT",129,0)
 Q
"RTN","ECPAT",130,0)
 ;
"RTN","ECPAT",131,0)
EXPORT ;Section added in 119
"RTN","ECPAT",132,0)
 N DATE,CNT,ECEPN
"RTN","ECPAT",133,0)
 S CNT=1
"RTN","ECPAT",134,0)
 S ^TMP($J,"ECRPT",CNT)="PATIENT NAME^SSN^PROCEDURE DATE/TIME^LOCATION^DSS UNIT IEN^DSS UNIT NAME^CLINIC^STOP CODE^CREDIT STOP^CHAR4^MCA LABOR CODE" ;131,134,139
"RTN","ECPAT",135,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"^CPT CODE^PROCEDURE CODE^PROCEDURE NAME^VOLUME^"_$S($D(ECRY):"REASON #1^REASON #2^REASON #3^",1:"")_"SERVICE^SECTION^ORDERING SECTION^PROVIDER" ;131,134
"RTN","ECPAT",136,0)
 S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE Q
"RTN","ECPAT",137,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D BRO
"RTN","ECPAT",138,0)
 S DATE=ECSD,ECFN=0 F I=0:0 S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)  F I=0:0 S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN  D
"RTN","ECPAT",139,0)
 .D SET
"RTN","ECPAT",140,0)
 .S CNT=CNT+1 ;139
"RTN","ECPAT",141,0)
 .S ^TMP($J,"ECRPT",CNT)=ECPAT_U_$E($$GET1^DIQ(2,(ECDFN_","),.09),6,9)_U_ECDT_U_ECLN_U_ECD_U_ECDN_U_ECACLN_U_$P(CLNODE,U,2)_U_$P(CLNODE,U,3)_U_$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U)_U_$$GET1^DIQ(728.442,$P(CLNODE,U,14),.01) ;131,134,139
"RTN","ECPAT",142,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$E(ECCPT,1,5)_U_$S(ECFILE=725:$P($G(^EC(725,+ECP,0)),U,2),1:"")_U_ECEPN_U_ECV_U_$S($D(ECRY):ECPRSN_U_ECPRSN2_U_ECPRSN3_U,1:"")_ECSN_U_ECMN_U_ECON_U_ECUN ;139
"RTN","ECPCER")
0^9^B38226237^B35285752
"RTN","ECPCER",1,0)
ECPCER ;BIR/JPW - Event Capture PCE Data Summary ;10/11/17  11:07
"RTN","ECPCER",2,0)
 ;;2.0;EVENT CAPTURE;**4,18,23,47,72,95,119,114,126,139**;8 May 96;Build 7
"RTN","ECPCER",3,0)
 ;
"RTN","ECPCER",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECPCER",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR #5747
"RTN","ECPCER",6,0)
 ;
"RTN","ECPCER",7,0)
EN ; entry point
"RTN","ECPCER",8,0)
 K DIC S DIC=2,DIC(0)="QEAMZ",DIC("A")="Select Patient: " D ^DIC K DIC G:Y<0 END S ECDFN=+Y,ECPAT=$P(Y,"^",2)
"RTN","ECPCER",9,0)
DATE K %DT S %DT="AEX",%DT("A")="Start with Date:  " D ^%DT G:Y<0 END S ECSD=Y,%DT("A")="End with Date:  " D ^%DT G:Y<0 END S ECED=Y I ECED<ECSD W !,"End date must be after start date",! G DATE
"RTN","ECPCER",10,0)
 S ECDATE=$$FMTE^XLFDT(ECSD)_"^"_$$FMTE^XLFDT(ECED),ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECPCER",11,0)
 K IOP,%ZIS,POP,IO("Q") S %ZIS("A")="Select Device: ",%ZIS="QM" W !!,"This report is designed to use a 132 column format.",! D ^%ZIS G:POP END
"RTN","ECPCER",12,0)
 I $D(IO("Q")) K IO("Q") S (ZTSAVE("ECDFN"),ZTSAVE("ECPAT"),ZTSAVE("ECDATE"),ZTSAVE("ECED"),ZTSAVE("ECSD"))="",ZTDESC="ECS/PCE PATIENT SUMMARY",ZTRTN="SUM^ECPCER",ZTIO=ION D ^%ZTLOAD,HOME^%ZIS G END
"RTN","ECPCER",13,0)
SUM ; entry when queued
"RTN","ECPCER",14,0)
 N ECEPN,ECPCODE,ECEXDS,ECEI,ECCSC,ECCHAR,ECMCA ;119,139
"RTN","ECPCER",15,0)
 I $G(ECPTYP)="E" D EXPORT,^ECKILL Q  ;119
"RTN","ECPCER",16,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECPCER",17,0)
 U IO S DATE=$O(^ECH("APAT",ECDFN,ECSD)) I 'DATE W:$Y @IOF W !!,"No Data for "_ECPAT_" during the time selected." G END
"RTN","ECPCER",18,0)
 S ECFN=+$O(^ECH("APAT",ECDFN,DATE,0)),ECL=+$P(^ECH(ECFN,0),"^",4) D HDR1
"RTN","ECPCER",19,0)
 S DATE=ECSD,(ECFN,ECOUT)=0 F  S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'DATE!(DATE>ECED)!(ECOUT)  F  S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'ECFN!(ECOUT)  D SET
"RTN","ECPCER",20,0)
 D FOOTER  ;print footer on last page
"RTN","ECPCER",21,0)
END I $D(ECGUI) D ^ECKILL Q
"RTN","ECPCER",22,0)
 W ! I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue  " R X:DTIME
"RTN","ECPCER",23,0)
 W @IOF D ^%ZISC D ^ECKILL S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECPCER",24,0)
 Q
"RTN","ECPCER",25,0)
PAGE ; end of page
"RTN","ECPCER",26,0)
 I $G(X)'["?" D FOOTER
"RTN","ECPCER",27,0)
 S X="" I $E(IOST,1,2)="C-" W !!,"Press <RET> to continue, or ^ to quit   " R X:DTIME I '$T!(X="^") S ECOUT=1 Q
"RTN","ECPCER",28,0)
 I X["?" W !!,"If you want to continue with this report, press <RET>.  Entering an ^ will",!,"exit you from this option." G PAGE
"RTN","ECPCER",29,0)
 D HDR1
"RTN","ECPCER",30,0)
 Q
"RTN","ECPCER",31,0)
HDR1 ; print heading without categories
"RTN","ECPCER",32,0)
 W:$Y @IOF
"RTN","ECPCER",33,0)
 W !,?31,"ECS/PCE PATIENT SUMMARY FOR "_ECPAT,!,?36,"FROM "_$P(ECDATE,"^")_"   TO "_$P(ECDATE,"^",2),!!,"PROCEDURE DATE/TIME",?25,"PROCEDURE NAME SENT (VOLUME)",?78,"PROVIDER"
"RTN","ECPCER",34,0)
 W !,"LOCATION",?25,"CLINIC (STOP CODE/CREDIT STOP/CHAR4/MCA LABOR CODE)",?78,"CPT CODE" ;126,139
"RTN","ECPCER",35,0)
 W !,?25,"DIAGNOSIS",?78,"PROCEDURE (CPT) MODIFIER",!
"RTN","ECPCER",36,0)
 F LINE=1:1:132 W "-"
"RTN","ECPCER",37,0)
 W !
"RTN","ECPCER",38,0)
 Q
"RTN","ECPCER",39,0)
FOOTER ;print page footer
"RTN","ECPCER",40,0)
 W !!?4,"Volume totals may represent days, minutes, numbers of procedures"
"RTN","ECPCER",41,0)
 W !?4,"and/or a combination of these."
"RTN","ECPCER",42,0)
 Q
"RTN","ECPCER",43,0)
 ;
"RTN","ECPCER",44,0)
SET ; set data
"RTN","ECPCER",45,0)
 I $G(ECPTYP)'="E" I $Y+10>IOSL D PAGE I ECOUT Q  ;119
"RTN","ECPCER",46,0)
 Q:'$D(^ECH(ECFN,"PCE"))  S ECEC=$G(^ECH(ECFN,"PCE"))
"RTN","ECPCER",47,0)
 I '$P($G(^ECH(ECFN,"P")),"^",7) Q
"RTN","ECPCER",48,0)
 S ECL=+$P(ECEC,"~",4),ECCPT=+$P(ECEC,"~",10),ECD=+$P(ECEC,"~",3),ECV=+$P(ECEC,"~",9),ECDX=+$P(ECEC,"~",11),ECID=$P(ECEC,"~",5),ECDT=+$P(ECEC,"~")
"RTN","ECPCER",49,0)
 S ECDN=$S($P($G(^SC(ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPCER",50,0)
 S ECCSC=$$GET1^DIQ(728.44,ECD,2,"E") ;139 Credit Stop Code
"RTN","ECPCER",51,0)
 S ECCHAR=$$GET1^DIQ(728.44,ECD,7,"E") ;139 CHAR4 Code
"RTN","ECPCER",52,0)
 S ECMCA=$$GET1^DIQ(728.44,ECD,13,"E") ;139 MCA Labor Code
"RTN","ECPCER",53,0)
 S ECPS=$$CPT^ICPTCOD(ECCPT,$P(ECEC,"~")),ECCPT=$S(+ECPS>0:$P(ECPS,"^",2),1:""),ECEPN=$S(+ECPS>0:$P(ECPS,U,3),1:""),ECPS=$S(+ECPS>0:$P(ECPS,"^",2)_" "_$P(ECPS,"^",3),1:"CPT NAME UNKNOWN") ;119
"RTN","ECPCER",54,0)
 S ECLN=$S($P($G(^DIC(4,ECL,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECPCER",55,0)
 S ECID=$S($P($G(^DIC(40.7,ECID,0)),"^",2)]"":$P(^(0),"^",2),1:"DSS ID UNKNOWN")
"RTN","ECPCER",56,0)
 ; Changes for ICD10
"RTN","ECPCER",57,0)
 N ECCS
"RTN","ECPCER",58,0)
 S ECCS=$$SINFO^ICDEX("DIAG",$P(ECEC,"~")) ; Supported by ICR 5747
"RTN","ECPCER",59,0)
 S ECDXN=$$ICDDX^ICDEX(ECDX,$P(ECEC,"~"),+ECCS,"I") ; Supported by ICR 5747
"RTN","ECPCER",60,0)
 S ECDXN=$S($P(ECDXN,U,1)=-1:"UNKNOWN",1:$P(ECDXN,U,2))
"RTN","ECPCER",61,0)
 S ECPN=$S($P(ECEC,"~",16)]"":$P(ECEC,"~",16),1:ECPS)
"RTN","ECPCER",62,0)
 S ECPCODE="" ;119
"RTN","ECPCER",63,0)
 I $P(^ECH(ECFN,0),U,9)["EC" S:$P(ECEC,"~",16)]"" ECEPN=$$GET1^DIQ(721,ECFN,8) S ECPCODE=$P($P(ECEC,"~",16)," ") ;119
"RTN","ECPCER",64,0)
 S ECU=$$GETPPRV^ECPRVMUT(ECFN,.ECUN),ECUN=$S(ECU:"UNKNOWN",1:$P(ECUN,"^",2))
"RTN","ECPCER",65,0)
 S ECUN=$S(ECUN'="UNKNOWN":$P(ECUN,",",2)_" "_$P(ECUN,","),1:"UNKNOWN")
"RTN","ECPCER",66,0)
 S ECDT=$$FMTE^XLFDT(ECDT)
"RTN","ECPCER",67,0)
 ;get secondary diagnosis codes, ALB/JAM
"RTN","ECPCER",68,0)
 S DXS=0,ECI=2,ECEI=1 F  S DXS=$O(^ECH(ECFN,"DX",DXS)) Q:'DXS  D  ;119
"RTN","ECPCER",69,0)
 . S DXSIEN=+$G(^ECH(ECFN,"DX",DXS,0)) I DXSIEN="" Q
"RTN","ECPCER",70,0)
 . S ECDXSN=$$ICDDX^ICDEX(DXSIEN,$P(ECEC,"~"),+ECCS,"I")
"RTN","ECPCER",71,0)
 . S ECDXSN=$S($P(ECDXSN,U,1)=-1:"UNKNOWN",1:$P(ECDXSN,U,2))
"RTN","ECPCER",72,0)
 . I $L($G(ECDXS(ECI)))+$L(ECDXSN)>52 S ECI=ECI+1
"RTN","ECPCER",73,0)
 . I $G(ECDXS(ECI))="" S ECDXS(ECI)="Secondary Dx: "
"RTN","ECPCER",74,0)
 . S ECDXS(ECI)=ECDXS(ECI)_$S($L(ECDXS(ECI))=14:"",1:", ")_ECDXSN
"RTN","ECPCER",75,0)
 . S ECEXDS(ECEI)=ECDXSN,ECEI=ECEI+1 ;119
"RTN","ECPCER",76,0)
 S ECMOD="" I $D(^ECH(ECFN,"PCE1")) S ECMOD=^("PCE1")
"RTN","ECPCER",77,0)
 I $G(ECPTYP)="E" Q  ;119
"RTN","ECPCER",78,0)
PRT W !,ECDT,?25,ECPN_" ("_ECV_")",?78,ECUN,!
"RTN","ECPCER",79,0)
 W $E(ECLN,1,22),?25,ECDN_" ("_ECID_"/"_ECCSC_"/"_ECCHAR_"/"_ECMCA_")",?78,ECCPT,!
"RTN","ECPCER",80,0)
 W ?25,"Primary DX: ",ECDXN
"RTN","ECPCER",81,0)
 ;ALB/JAM print CPT modifiers and secondary diagnosis code
"RTN","ECPCER",82,0)
 F I=1:1 S MOD=$P(ECMOD,";",I) Q:MOD=""  D  I ECOUT Q
"RTN","ECPCER",83,0)
 . S MODESC=$$MODP^ICPTMOD(ECCPT,MOD,"E",$P(ECEC,"~")) I +MODESC'>0 Q
"RTN","ECPCER",84,0)
 . W ?25,$S(I>1:$G(ECDXS(I)),1:""),?79,"- ",MOD," ",$P(MODESC,"^",2),!
"RTN","ECPCER",85,0)
 . K ECDXS(I) I ($Y+6)>IOSL D PAGE I ECOUT Q
"RTN","ECPCER",86,0)
 W:ECMOD="" ! S DXS=""
"RTN","ECPCER",87,0)
 F  S DXS=$O(ECDXS(DXS)) Q:DXS=""  W ?25,ECDXS(DXS),!
"RTN","ECPCER",88,0)
 K I,MOD,MODESC,ECI,DXS,DXSIEN,ECDXS,ECDXN,ECDXSN
"RTN","ECPCER",89,0)
 Q
"RTN","ECPCER",90,0)
EXPORT ;Produce exportable version, added in patch 119
"RTN","ECPCER",91,0)
 N CNT,DATE,ECFN,I,MOD,MODESC
"RTN","ECPCER",92,0)
 S CNT=1
"RTN","ECPCER",93,0)
 S ^TMP($J,"ECRPT",CNT)="PATIENT^PROCEDURE DATE/TIME^LOCATION^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE^MCA LABOR CODE^CPT CODE^PROCEDURE CODE^PROCEDURE NAME" ;126,139
"RTN","ECPCER",94,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"^PROCEDURE VOLUME^CPT MOD 1^CPT MOD 2^CPT MOD 3^PROVIDER^PRIMARY DIAGNOSIS^2ND DIAG 1^2ND DIAG 2^2ND DIAG 3^2ND DIAG 4" ;126,139
"RTN","ECPCER",95,0)
 S DATE=ECSD F  S DATE=$O(^ECH("APAT",ECDFN,DATE)) Q:'+DATE!(DATE>ECED)  S ECFN=0 F  S ECFN=$O(^ECH("APAT",ECDFN,DATE,ECFN)) Q:'+ECFN  D
"RTN","ECPCER",96,0)
 .Q:'$D(^ECH(ECFN,"PCE"))
"RTN","ECPCER",97,0)
 .I '$P($G(^ECH(ECFN,"P")),U,7) Q
"RTN","ECPCER",98,0)
 .K ECEXDS D SET
"RTN","ECPCER",99,0)
 .S CNT=CNT+1
"RTN","ECPCER",100,0)
 .S ^TMP($J,"ECRPT",CNT)=ECPAT_U_ECDT_U_ECLN_U_ECDN_U_ECID_U_ECCSC_U_ECCHAR_U_ECMCA_U_ECCPT_U_ECPCODE_U_ECEPN_U_ECV ;139
"RTN","ECPCER",101,0)
 .F I=1:1:3 D
"RTN","ECPCER",102,0)
 ..S MOD=$P(ECMOD,";",I),MODESC="" I MOD'="" S MODESC=$$MODP^ICPTMOD(ECCPT,MOD,"E",$P(ECEC,"~")) S MODESC=$S(+MODESC>0:MOD_" "_$P(MODESC,U,2),1:"")
"RTN","ECPCER",103,0)
 ..S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_MODESC
"RTN","ECPCER",104,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_ECUN_U_ECDXN
"RTN","ECPCER",105,0)
 .F I=1:1:4 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_$G(ECEXDS(I))
"RTN","ECPCER",106,0)
 Q
"RTN","ECRECER")
0^5^B38346891^B34819903
"RTN","ECRECER",1,0)
ECRECER ;ALB/DAN-Event Capture Encounter Report ;10/12/17  08:44
"RTN","ECRECER",2,0)
 ;;2.0;EVENT CAPTURE;**112,122,126,139**;8 May 96;Build 7
"RTN","ECRECER",3,0)
 ;
"RTN","ECRECER",4,0)
STRPT ;
"RTN","ECRECER",5,0)
 K ^TMP("ECRECER",$J),^TMP($J,"ECRPT")
"RTN","ECRECER",6,0)
 D GETREC
"RTN","ECRECER",7,0)
 I ECPTYP="E" D EXPORT Q
"RTN","ECRECER",8,0)
 U IO
"RTN","ECRECER",9,0)
 D PRINT
"RTN","ECRECER",10,0)
 Q
"RTN","ECRECER",11,0)
 ;
"RTN","ECRECER",12,0)
GETREC ;Find records to put on report
"RTN","ECRECER",13,0)
 N ECLI,ECDFN,ECD,ECDT,ECIEN,ECPROV,ECPATN,ECSSN,ECVOL,ECARR,ECIO,CLNODE ;122,126
"RTN","ECRECER",14,0)
 S ECLI=0 F  S ECLI=$O(ECLOC1(ECLI)) Q:'+ECLI  D
"RTN","ECRECER",15,0)
 .S ECDFN=0 K ^TMP("UNI",$J) ;126
"RTN","ECRECER",16,0)
 .F  S ECDFN=+$O(^ECH("ADT",ECLI,ECDFN)) Q:'ECDFN  D
"RTN","ECRECER",17,0)
 ..S ECD=0
"RTN","ECRECER",18,0)
 ..F  S ECD=$O(ECDSSU(ECD)) Q:'ECD  D
"RTN","ECRECER",19,0)
 ...S ECDT=ECSD-.1
"RTN","ECRECER",20,0)
 ...F  S ECDT=+$O(^ECH("ADT",ECLI,ECDFN,ECD,ECDT)) Q:'ECDT!(ECDT>(ECED_.24))  D
"RTN","ECRECER",21,0)
 ....S ECIEN=0
"RTN","ECRECER",22,0)
 ....F  S ECIEN=+$O(^ECH("ADT",ECLI,ECDFN,ECD,ECDT,ECIEN)) Q:'ECIEN  D
"RTN","ECRECER",23,0)
 .....S ECPROV=$$GETPROV^ECRDSSA(ECIEN)
"RTN","ECRECER",24,0)
 .....Q:$D(^TMP("UNI",$J,ECDFN,ECDT,ECD))  S ^TMP("UNI",$J,ECDFN,ECDT,ECD)="" ;126 don't count if already counted
"RTN","ECRECER",25,0)
 .....K ECARR D GETS^DIQ(721,ECIEN,"1;9;26;29","IE","ECARR","ECERROR") ;122 Add associated clinic (26) to list of fields returned
"RTN","ECRECER",26,0)
 .....S ECPATN=ECARR(721,ECIEN_",",1,"E")_"~"_ECDFN
"RTN","ECRECER",27,0)
 .....S ECSSN=$$GETSSN^ECRDSSA(ECIEN)
"RTN","ECRECER",28,0)
 .....S ECVOL=ECARR(721,ECIEN_",",9,"E"),ECIO=ECARR(721,ECIEN_",",29,"I")
"RTN","ECRECER",29,0)
 .....S CLNODE=$G(^ECX(728.44,+$G(ECARR(721,ECIEN_",",26,"I")),0)) ;122
"RTN","ECRECER",30,0)
 .....I $G(ECSORT)="P" D
"RTN","ECRECER",31,0)
 ......S ^TMP("ECRECER",$J,ECLOC1(ECLI),ECPATN,ECPROV,ECIEN)=ECIO_U_ECDT_U_ECD_U_ECVOL_U_ECSSN_U_$G(ECARR(721,ECIEN_",",26,"E"))_U_$P(CLNODE,U,2)_U_$P(CLNODE,U,3)_U_$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U)_U_$P(CLNODE,U,14) ;122,139
"RTN","ECRECER",32,0)
 .....I $G(ECSORT)="D" D
"RTN","ECRECER",33,0)
 ......S ^TMP("ECRECER",$J,ECLOC1(ECLI),ECPROV,ECPATN,ECIEN)=ECIO_U_ECDT_U_ECD_U_ECVOL_U_ECSSN_U_$G(ECARR(721,ECIEN_",",26,"E"))_U_$P(CLNODE,U,2)_U_$P(CLNODE,U,3)_U_$P($G(^ECX(728.441,+$P(CLNODE,U,8),0)),U)_U_$P(CLNODE,U,14) ;122,139
"RTN","ECRECER",34,0)
 Q
"RTN","ECRECER",35,0)
 ;
"RTN","ECRECER",36,0)
EXPORT ;Put in delimited format for exporting
"RTN","ECRECER",37,0)
 N CNT,LOC,PATN,PROV,IEN,DATA,MCA ;139
"RTN","ECRECER",38,0)
 Q:'$D(^TMP("ECRECER",$J))
"RTN","ECRECER",39,0)
 S CNT=1,^TMP($J,"ECRPT",CNT)="LOCATION^PATIENT^SSN^I/O^DATE/TIME^PROVIDER #1^DSS UNIT^VOLUME^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE^MCA LABOR CODE" ;122,139
"RTN","ECRECER",40,0)
 I ECSORT="P" D
"RTN","ECRECER",41,0)
 .S LOC="" F  S LOC=$O(^TMP("ECRECER",$J,LOC)) Q:LOC=""  D
"RTN","ECRECER",42,0)
 ..S PATN="" F  S PATN=$O(^TMP("ECRECER",$J,LOC,PATN)) Q:PATN=""  D
"RTN","ECRECER",43,0)
 ...S PROV="" F  S PROV=$O(^TMP("ECRECER",$J,LOC,PATN,PROV)) Q:PROV=""  D
"RTN","ECRECER",44,0)
 ....S IEN=0 F  S IEN=$O(^TMP("ECRECER",$J,LOC,PATN,PROV,IEN)) Q:'+IEN  D
"RTN","ECRECER",45,0)
 .....S DATA=^(IEN) ;Naked reference to above line
"RTN","ECRECER",46,0)
 .....S MCA=$$GET1^DIQ(728.442,$P(DATA,U,10),.01) ;139
"RTN","ECRECER",47,0)
 .....S CNT=CNT+1 ;139
"RTN","ECRECER",48,0)
 .....S ^TMP($J,"ECRPT",CNT)=LOC_U_$P(PATN,"~")_U_$P(DATA,U,5)_U_$P(DATA,U,1)_U_$$FMTE^XLFDT($P(DATA,U,2),2)_U_PROV_U_ECDSSU($P(DATA,U,3))_U_$P(DATA,U,4)_U_$P(DATA,U,6)_U_$P(DATA,U,7)_U_$P(DATA,U,8)_U_$P(DATA,U,9)_U_MCA ;122,139
"RTN","ECRECER",49,0)
 I ECSORT="D" D
"RTN","ECRECER",50,0)
 .S LOC="" F  S LOC=$O(^TMP("ECRECER",$J,LOC)) Q:LOC=""  D
"RTN","ECRECER",51,0)
 ..S PROV="" F  S PROV=$O(^TMP("ECRECER",$J,LOC,PROV)) Q:PROV=""  D
"RTN","ECRECER",52,0)
 ...S PATN="" F  S PATN=$O(^TMP("ECRECER",$J,LOC,PROV,PATN)) Q:PATN=""  D
"RTN","ECRECER",53,0)
 ....S IEN=0 F  S IEN=$O(^TMP("ECRECER",$J,LOC,PROV,PATN,IEN)) Q:'+IEN  D
"RTN","ECRECER",54,0)
 .....S DATA=^(IEN) ;Naked reference to above line
"RTN","ECRECER",55,0)
 .....S MCA=$$GET1^DIQ(728.442,$P(DATA,U,10),.01) ;139
"RTN","ECRECER",56,0)
 .....S CNT=CNT+1 ;139
"RTN","ECRECER",57,0)
 .....S ^TMP($J,"ECRPT",CNT)=LOC_U_$P(PATN,"~")_U_$P(DATA,U,5)_U_$P(DATA,U,1)_U_$$FMTE^XLFDT($P(DATA,U,2),2)_U_PROV_U_ECDSSU($P(DATA,U,3))_U_$P(DATA,U,4)_U_$P(DATA,U,6)_U_$P(DATA,U,7)_U_$P(DATA,U,8)_U_$P(DATA,U,9)_U_MCA ;122,139
"RTN","ECRECER",58,0)
 Q
"RTN","ECRECER",59,0)
 ;
"RTN","ECRECER",60,0)
PRINT ;Display results
"RTN","ECRECER",61,0)
 N LOC,PATN,PROV,IEN,DATA,PAGE,PTOT,PROTOT
"RTN","ECRECER",62,0)
 I '$D(^TMP("ECRECER",$J)) S LOC="NONE" D HDR W !,"No data found"
"RTN","ECRECER",63,0)
 S PAGE=0
"RTN","ECRECER",64,0)
 I ECSORT="P" D
"RTN","ECRECER",65,0)
 .S LOC="" F  S LOC=$O(^TMP("ECRECER",$J,LOC)) Q:LOC=""  D HDR D
"RTN","ECRECER",66,0)
 ..S PATN="" F  S PATN=$O(^TMP("ECRECER",$J,LOC,PATN)) Q:PATN=""  K PTOT,PROTOT D  D SUB
"RTN","ECRECER",67,0)
 ...S PROV="" F  S PROV=$O(^TMP("ECRECER",$J,LOC,PATN,PROV)) Q:PROV=""  D
"RTN","ECRECER",68,0)
 ....S IEN=0 F  S IEN=$O(^TMP("ECRECER",$J,LOC,PATN,PROV,IEN)) Q:'+IEN  D
"RTN","ECRECER",69,0)
 .....S DATA=^(IEN) ;Naked reference to above line
"RTN","ECRECER",70,0)
 .....W !,$P(PATN,"~"),?32,$P(DATA,U,5),?38,$P(DATA,U,1),?43,$$FMTE^XLFDT($P(DATA,U,2),2),?59,PROV,?91,ECDSSU($P(DATA,U,3)),?123,$P(DATA,U,4)
"RTN","ECRECER",71,0)
 .....W !,?4,$P(DATA,U,6),?36,$P(DATA,U,7),?47,$P(DATA,U,8),?60,$P(DATA,U,9),?68,$$GET1^DIQ(728.442,$P(DATA,U,10),.01) ;122,139
"RTN","ECRECER",72,0)
 .....S PTOT=+$G(PTOT)+1,PROTOT(PROV)=+$G(PROTOT(PROV))+1
"RTN","ECRECER",73,0)
 I ECSORT="D" D
"RTN","ECRECER",74,0)
 .S LOC="" F  S LOC=$O(^TMP("ECRECER",$J,LOC)) Q:LOC=""  D HDR D
"RTN","ECRECER",75,0)
 ..S PROV="" F  S PROV=$O(^TMP("ECRECER",$J,LOC,PROV)) Q:PROV=""  K PROTOT,PTOT D  D SUB
"RTN","ECRECER",76,0)
 ...S PATN="" F  S PATN=$O(^TMP("ECRECER",$J,LOC,PROV,PATN)) Q:PATN=""  D
"RTN","ECRECER",77,0)
 ....S IEN=0 F  S IEN=$O(^TMP("ECRECER",$J,LOC,PROV,PATN,IEN)) Q:'+IEN  D
"RTN","ECRECER",78,0)
 .....S DATA=^(IEN) ;Naked reference to above line
"RTN","ECRECER",79,0)
 .....W !,$P(PATN,"~"),?32,$P(DATA,U,5),?38,$P(DATA,U,1),?43,$$FMTE^XLFDT($P(DATA,U,2),2),?59,PROV,?91,ECDSSU($P(DATA,U,3)),?123,$P(DATA,U,4)
"RTN","ECRECER",80,0)
 .....W !,?4,$P(DATA,U,6),?36,$P(DATA,U,7),?47,$P(DATA,U,8),?60,$P(DATA,U,9),?68,$$GET1^DIQ(728.442,$P(DATA,U,10),.01) ;122,139
"RTN","ECRECER",81,0)
 .....S PTOT(PATN)=+$G(PTOT(PATN))+1,PROTOT=+$G(PROTOT)+1
"RTN","ECRECER",82,0)
 Q
"RTN","ECRECER",83,0)
HDR ;Print Header
"RTN","ECRECER",84,0)
 N SORT
"RTN","ECRECER",85,0)
 W @IOF
"RTN","ECRECER",86,0)
 S PAGE=+$G(PAGE)+1
"RTN","ECRECER",87,0)
 W ?51,"Event Capture Encounters Report",?123,"Page: ",PAGE
"RTN","ECRECER",88,0)
 W !,?(132-(12+$L(LOC))\2),"For Location ",LOC
"RTN","ECRECER",89,0)
 W !,?47,"From ",$$FMTE^XLFDT(ECSD)," through ",$$FMTE^XLFDT(ECED)
"RTN","ECRECER",90,0)
 S SORT=$S(ECSORT="P":"Patient Name",1:"Provider")
"RTN","ECRECER",91,0)
 W !,?(132-(9+$L(SORT))\2),"Sorted by ",SORT,!
"RTN","ECRECER",92,0)
 W !,"Patient",?32,"SSN",?38,"I/O",?43,"Date/Time",?59,"Provider #1",?91,"DSS Unit",?123,"Vol"
"RTN","ECRECER",93,0)
 W !,?4,"Clinic",?36,"Stop Code",?47,"Credit Stop",?60,"CHAR4",?68,"MCA Labor Code" ;122,139
"RTN","ECRECER",94,0)
 W !,$$REPEAT^XLFSTR("-",132)
"RTN","ECRECER",95,0)
 Q
"RTN","ECRECER",96,0)
SUB ;Print totals
"RTN","ECRECER",97,0)
 N ARR,DISP
"RTN","ECRECER",98,0)
 I ECSORT="P" D
"RTN","ECRECER",99,0)
 .W !
"RTN","ECRECER",100,0)
 .S ARR="" F  S ARR=$O(PROTOT(ARR)) Q:ARR=""  S DISP="Subtotal for provider "_ARR W !,$J(DISP,128),$J(PROTOT(ARR),4)
"RTN","ECRECER",101,0)
 .W !,?128,"===="
"RTN","ECRECER",102,0)
 .S DISP="Total for patient "_$P(PATN,"~") W !,$J(DISP,128),$J(PTOT,4),!
"RTN","ECRECER",103,0)
 I ECSORT="D" D
"RTN","ECRECER",104,0)
 .W !
"RTN","ECRECER",105,0)
 .S ARR="" F  S ARR=$O(PTOT(ARR)) Q:ARR=""  S DISP="Subtotal for patient "_$P(ARR,"~") W !,$J(DISP,128),$J(PTOT(ARR),4)
"RTN","ECRECER",106,0)
 .W !,?128,"===="
"RTN","ECRECER",107,0)
 .S DISP="Total for provider "_PROV W !,$J(DISP,128),$J(PROTOT,4),!
"RTN","ECRECER",108,0)
 Q
"RTN","ECRRPC")
0^1^B24100495^B23213577
"RTN","ECRRPC",1,0)
ECRRPC ;ALB/JAM - Event Capture Report RPC Broker ;9/28/17  14:12
"RTN","ECRRPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,47,61,72,95,101,100,107,112,131,139**;8 May 96;Build 7
"RTN","ECRRPC",3,0)
 ;
"RTN","ECRRPC",4,0)
RPTEN(RESULTS,ECARY) ;RPC Broker entry point for EC Reports
"RTN","ECRRPC",5,0)
 ;All EC GUI reports will call this line tag
"RTN","ECRRPC",6,0)
 ;        RPC: EC REPORTS
"RTN","ECRRPC",7,0)
 ;INPUTS  ECARY   - Contains the following elements for report printing
"RTN","ECRRPC",8,0)
 ;        ECDEV   - Print to queue, if device
"RTN","ECRRPC",9,0)
 ;        ECQDT   - Queue to print (date/time), optional
"RTN","ECRRPC",10,0)
 ;        ECPTYP  - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPC",11,0)
 ;
"RTN","ECRRPC",12,0)
 ;OUTPUTS RESULTS - Array of help text in the HELP FRAM File (#9.2)
"RTN","ECRRPC",13,0)
 ;
"RTN","ECRRPC",14,0)
 N HLPDA,HND,ECSTR,ECFILER,ECERR,ECDIRY,ECUFILE,ECGUI
"RTN","ECRRPC",15,0)
 N ECQTIME ;CMF should not need this!  %DT call below fails for future dates within this routine
"RTN","ECRRPC",16,0)
 D SETENV^ECUMRPC
"RTN","ECRRPC",17,0)
 S ECERR=0,ECGUI=1 D PARSE,CHKDT I ECERR Q
"RTN","ECRRPC",18,0)
 K ^TMP("ECMSG",$J),^TMP($J,"ECRPT")
"RTN","ECRRPC",19,0)
 D  I ECERR D END Q
"RTN","ECRRPC",20,0)
 . I ECPTYP="E" Q  ;112 For exporable format, no device needed
"RTN","ECRRPC",21,0)
 . I ECPTYP="D" D HFSOPEN(ECHNDL) Q
"RTN","ECRRPC",22,0)
 . I '$D(ECDEV) S ^TMP("ECMSG",$J,1)="0^Device undefined",ECERR=1
"RTN","ECRRPC",23,0)
 S HND=$P($T(@ECHNDL),";;",2) I HND="" D  Q
"RTN","ECRRPC",24,0)
 . S ^TMP("ECMSG",$J,1)="0^Line Tag undefined" D END
"RTN","ECRRPC",25,0)
 S ^XTMP("ECRRPT","ECRRPC","ECQDTbefore")=$G(ECQDT)  ;;cmf diagnostic hack
"RTN","ECRRPC",26,0)
 S:ECPTYP="P" ECQTIME=$TR($P(ECQDT,"@",2),":","")
"RTN","ECRRPC",27,0)
 S ECQDT=$G(ECQDT,"NOW"),%DT="XT",X=ECQDT D ^%DT  ;Print time
"RTN","ECRRPC",28,0)
 S ECQDT=$S(Y>0:Y,1:"NOW")
"RTN","ECRRPC",29,0)
 S:ECPTYP="P"&(ECQDT="NOW") ECQDT=DT_"."_ECQTIME  ;Should not have to do this! %DT malfunctions inside this routine!!!
"RTN","ECRRPC",30,0)
 D @$P(HND,";",2)
"RTN","ECRRPC",31,0)
 I ECPTYP="D" D HFSCLOSE(ECFILER) ;S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",32,0)
END D KILLVAR
"RTN","ECRRPC",33,0)
 I $D(^TMP("ECMSG",$J)) S RESULTS=$NA(^TMP("ECMSG",$J)) Q
"RTN","ECRRPC",34,0)
 S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",35,0)
 Q
"RTN","ECRRPC",36,0)
 ;
"RTN","ECRRPC",37,0)
PARSE ;Parse data from array for filing
"RTN","ECRRPC",38,0)
 N SUB
"RTN","ECRRPC",39,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  S @SUB=ECARY(SUB)
"RTN","ECRRPC",40,0)
 Q
"RTN","ECRRPC",41,0)
CHKDT ;Required Data Check
"RTN","ECRRPC",42,0)
 N I,C
"RTN","ECRRPC",43,0)
 S C=1
"RTN","ECRRPC",44,0)
 F I="ECHNDL","ECPTYP" D
"RTN","ECRRPC",45,0)
 .I $G(@I)="" S ^TMP("ECMSG",$J,C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECRRPC",46,0)
 Q
"RTN","ECRRPC",47,0)
KILLVAR ;Kill variables
"RTN","ECRRPC",48,0)
 N SUB
"RTN","ECRRPC",49,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  K @SUB
"RTN","ECRRPC",50,0)
 K ECARY,POP,ECQDT
"RTN","ECRRPC",51,0)
 Q
"RTN","ECRRPC",52,0)
HFSOPEN(HANDLE) ; 
"RTN","ECRRPC",53,0)
 ;S ECDIRY=$$GET^XPAR("DIV","EC HFS SCRATCH")
"RTN","ECRRPC",54,0)
 S ECDIRY=$$DEFDIR^%ZISH()
"RTN","ECRRPC",55,0)
 I ECDIRY="" S ECERR=1 D  Q
"RTN","ECRRPC",56,0)
 .S ^TMP("ECMSG",$J,1)="0^A scratch directory for reports doesn't exist"
"RTN","ECRRPC",57,0)
 S ECFILER="EC"_DUZ_".DAT",ECUFILE=ECFILER S ^TMP("JEN",$J,.1)=ECUFILE
"RTN","ECRRPC",58,0)
 D OPEN^%ZISH(HANDLE,ECDIRY,ECFILER,"W") D:POP  Q:POP
"RTN","ECRRPC",59,0)
 .S ECERR=1,^TMP("ECMSG",$J,1)="0^Unable to open file "_ECDIRY_ECFILER
"RTN","ECRRPC",60,0)
 S IOM=132,IOSL=99999,IOST="P-DUMMY",IOF=""""""
"RTN","ECRRPC",61,0)
 Q
"RTN","ECRRPC",62,0)
 ;
"RTN","ECRRPC",63,0)
HFSCLOSE(HANDLE) ; 
"RTN","ECRRPC",64,0)
 N ECDEL
"RTN","ECRRPC",65,0)
 D CLOSE^%ZISH(ECDIRY_HANDLE)
"RTN","ECRRPC",66,0)
 K ^TMP($J)
"RTN","ECRRPC",67,0)
 S ECDEL(ECFILER)=""
"RTN","ECRRPC",68,0)
 S X=$$FTG^%ZISH(ECDIRY,ECFILER,$NAME(^TMP($J,1)),2)
"RTN","ECRRPC",69,0)
 S X=$$DEL^%ZISH(ECDIRY,$NA(ECDEL))
"RTN","ECRRPC",70,0)
 Q
"RTN","ECRRPC",71,0)
 ;added ECSTPCD for EC*2*107
"RTN","ECRRPC",72,0)
 ;added ECDSSUA, ECRUDSS, ECRECER, ECRECSIC,ECRECSPC, ECRGP and ECRDSSEC for patch EC*2*112
"RTN","ECRRPC",73,0)
 ;131 Added ECDSSSNR and ECDISSUM reports
"RTN","ECRRPC",74,0)
 ;139 Added ECLATESH report
"RTN","ECRRPC",75,0)
ECPAT ;;Patient Summary Report;ECPAT^ECRRPT
"RTN","ECRRPC",76,0)
ECRDSSA ;;DSS Unit Activity;ECRDSSA^ECRRPT
"RTN","ECRRPC",77,0)
ECRDSSU ;;DSS Unit Workload Summary;ECRDSSU^ECRRPT
"RTN","ECRRPC",78,0)
ECPROV ;;Provider Summary Report;ECPROV^ECRRPT
"RTN","ECRRPC",79,0)
PROSUM ;;Provider (1-7) Summary Report;PROSUM^ECRRPT
"RTN","ECRRPC",80,0)
ECOSSUM ;;Ordering Section Summary Report;ECOSSUM^ECRRPT
"RTN","ECRRPC",81,0)
ECPCER ;;PCE Data Summary Report;ECPCER^ECRRPT
"RTN","ECRRPC",82,0)
ECRPERS ;;Inactive Person Class Report;ECRPERS^ECRRPT1
"RTN","ECRRPC",83,0)
ECRPRSN ;;Procedure Reason Report;ECRPRSN^ECRRPT1
"RTN","ECRRPC",84,0)
ECDSS1 ;;National/Local Procedure Reports;ECDSS1^ECRRPT1
"RTN","ECRRPC",85,0)
ECDSS3 ;;Category Reports;ECDSS3^ECRRPT1
"RTN","ECRRPC",86,0)
ECSUM ;;Print Category and Procedure Summary (Report);ECSUM^ECRRPT1
"RTN","ECRRPC",87,0)
ECNTPCE ;;Records Failing Transmission to PCE Report;ECNTPCE^ECRRPT1
"RTN","ECRRPC",88,0)
ECSCPT ;;Event Code Screens with CPT Codes;ECSCPT^ECRRPT1
"RTN","ECRRPC",89,0)
ECINCPT ;;National/Local Procedure Codes with Inactive CPT;ECINCPT^ECRRPT1
"RTN","ECRRPC",90,0)
ECGTP ;;Generic Table Printer;ECGTP^ECRRPT1
"RTN","ECRRPC",91,0)
ECSTPCD ;;DSS Units with Associated Stop Code Error Report;ECSTPCD^ECRRPT1
"RTN","ECRRPC",92,0)
ECRDSSUA ;;Users with access to selected DSS Unit;ECRDSSUA^ECRRPT2
"RTN","ECRRPC",93,0)
ECRUDSS ;;DSS unit access by selected user;ECRUDSS^ECRRPT2
"RTN","ECRRPC",94,0)
ECRDSSEC ;;Event code screen for selected DSS Unit;ECRDSSEC^ECRRPT2
"RTN","ECRRPC",95,0)
ECRECER ;;Event capture encounters report;ECRECER^ECRRPT2
"RTN","ECRRPC",96,0)
ECRECSIC ;;Event Code Screens with Inactive Clinics;ECRECSIC^ECRRPT2
"RTN","ECRRPC",97,0)
ECRECSPC ;;Event Code Screens by Procedure Code;ECRECSPC^ECRRPT2
"RTN","ECRRPC",98,0)
ECRGP ;;Generic print of report;ECRGP^ECRRPT2
"RTN","ECRRPC",99,0)
ECDSSSNR ;;DSS Units set to send no records to PCE;ECDSSSNR^ECRRPT2
"RTN","ECRRPC",100,0)
ECDISSUM ;;Disabled Category and Procedure Summary Report;ECDISSUM^ECRRPT2
"RTN","ECRRPC",101,0)
ECLATESH ;;Possible Late State Home Entries Report;ECLATESH^ECRRPT2
"RTN","ECRRPT1")
0^19^B60357464^B64773176
"RTN","ECRRPT1",1,0)
ECRRPT1 ;ALB/JAM;Event Capture Report RPC Broker ;2/1/18  13:59
"RTN","ECRRPT1",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,61,78,72,90,95,100,107,112,119,139**;8 May 96;Build 7
"RTN","ECRRPT1",3,0)
 ;
"RTN","ECRRPT1",4,0)
 ;119 Updated comments for reports to include (E)xport as a value for ECPTYP
"RTN","ECRRPT1",5,0)
ECRPRSN ;Procedure Reason Report for RPC Call
"RTN","ECRRPT1",6,0)
 ;     Variables passed in
"RTN","ECRRPT1",7,0)
 ;       ECSD     - Start Date or Report
"RTN","ECRRPT1",8,0)
 ;       ECED     - End Date or Report
"RTN","ECRRPT1",9,0)
 ;       ECL0..n  - Location to report (1,some or ALL)
"RTN","ECRRPT1",10,0)
 ;       ECD0..n  - DSS Unit to report (1,some or ALL)
"RTN","ECRRPT1",11,0)
 ;       ECRY0..n - Procedure reason (some or ALL)
"RTN","ECRRPT1",12,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",13,0)
 ;                  or (E)xport
"RTN","ECRRPT1",14,0)
 ;
"RTN","ECRRPT1",15,0)
 ;     Variable return
"RTN","ECRRPT1",16,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",17,0)
 N ECV,ECI,ECLOC,ECDSSU,ECDN,ECDATE,ECUN,ECNT,ECKEY,ECX,ECLINK,ECZ
"RTN","ECRRPT1",18,0)
 N ECROU,ECSAVE,ECDESC,ECW,DIC,X,Y,I,LIEN,ECJ
"RTN","ECRRPT1",19,0)
 S ECV="ECL0^ECD0^ECSD^ECED^ECRY0" D REQCHK^ECRRPT(ECV) I ECERR Q  ;112
"RTN","ECRRPT1",20,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",21,0)
 . D LOCARRY^ECRUTL I ECL0="ALL" Q  ;112
"RTN","ECRRPT1",22,0)
 . K ECLOC F I=0:1 S LIEN=$G(@("ECL"_I)) Q:'+LIEN  I $D(ECLOC1(LIEN)) S ECLOC(I+1)=LIEN_"^"_ECLOC1(LIEN) ;112
"RTN","ECRRPT1",23,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",24,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT1",25,0)
 . . I '$D(ECDUZ) Q
"RTN","ECRRPT1",26,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU^ECRUTL
"RTN","ECRRPT1",27,0)
 . S (ECI,ECNT)=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT1",28,0)
 . . K DIC S DIC=724,DIC(0)="QNMZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT1",29,0)
 . . S ECNT=ECNT+1,ECDSSU(ECNT)=Y
"RTN","ECRRPT1",30,0)
 S ECX=0 D
"RTN","ECRRPT1",31,0)
 .I ECRY0="ALL" D PXREAS Q
"RTN","ECRRPT1",32,0)
 .N TLOC,TDSS,ECY
"RTN","ECRRPT1",33,0)
 .S ECI=0 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  S TLOC(+ECLOC(ECI))=""
"RTN","ECRRPT1",34,0)
 .S ECI=0 F  S ECI=$O(ECDSSU(ECI)) Q:'ECI  S TDSS(+ECDSSU(ECI))=""
"RTN","ECRRPT1",35,0)
 .S ECI=0 F ECI=0:1 S ECZ="ECRY"_ECI Q:'$D(@ECZ)  D
"RTN","ECRRPT1",36,0)
 ..S ECW=0 F  S ECW=$O(^ECL("B",@ECZ,ECW)) Q:'ECW  D
"RTN","ECRRPT1",37,0)
 ...S ECY=$P($G(^ECL(ECW,0)),U,2) Q:ECY=""  S ECJ=$P($G(^ECJ(ECY,0)),U)
"RTN","ECRRPT1",38,0)
 ...Q:ECJ=""  Q:'$D(TLOC($P(ECJ,"-")))  Q:'$D(TDSS($P(ECJ,"-",2)))
"RTN","ECRRPT1",39,0)
 ...S ECLINK(ECW)=$P($G(^ECL(ECW,0)),U)
"RTN","ECRRPT1",40,0)
 D DATECHK^ECRRPT(.ECSD,.ECED) S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",41,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",42,0)
 . S ECV="ECSD^ECED^ECPTYP",ECROU="STRPT^ECRPRSN2"
"RTN","ECRRPT1",43,0)
 . S (ECSAVE("ECLOC("),ECSAVE("ECDSSU("),ECSAVE("ECLINK("))=""
"RTN","ECRRPT1",44,0)
 . S ECDESC="EC Procedure Reason Report"
"RTN","ECRRPT1",45,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",46,0)
 D STRPT^ECRPRSN2 ;112
"RTN","ECRRPT1",47,0)
 Q
"RTN","ECRRPT1",48,0)
PXREAS ;Procedure reason link
"RTN","ECRRPT1",49,0)
 N ECZ,ECX,ECY,ECV
"RTN","ECRRPT1",50,0)
 S ECX=0 F  S ECX=$O(ECLOC(ECX)) Q:'ECX  S ECY=0 D
"RTN","ECRRPT1",51,0)
 . F  S ECY=$O(ECDSSU(ECY)) Q:'ECY  S ECV=+ECLOC(ECX)_"-"_+ECDSSU(ECY) D
"RTN","ECRRPT1",52,0)
 . . S ECZ=ECV_"-0-0"
"RTN","ECRRPT1",53,0)
 . . F  S ECZ=$O(^ECJ("B",ECZ)) Q:('ECZ)!($P(ECZ,"-",1,2)'=ECV)  D
"RTN","ECRRPT1",54,0)
 . . . S ECW=$O(^ECJ("B",ECZ,"")) Q:ECW=""  D REALNK
"RTN","ECRRPT1",55,0)
 Q
"RTN","ECRRPT1",56,0)
REALNK ;Reason link
"RTN","ECRRPT1",57,0)
 N XX,YY,ZZ
"RTN","ECRRPT1",58,0)
 S XX=0 F  S XX=$O(^ECL("AD",ECW,XX)) Q:'XX  S YY=0 D
"RTN","ECRRPT1",59,0)
 . F  S YY=$O(^ECL("AD",ECW,XX,YY)) Q:'YY  D
"RTN","ECRRPT1",60,0)
 . . Q:$G(^ECL(YY,0))=""  S ECLINK(YY)=XX
"RTN","ECRRPT1",61,0)
 Q
"RTN","ECRRPT1",62,0)
ECRPERS ;Inactive Person Class Report for RPC Call
"RTN","ECRRPT1",63,0)
 ;     Variables passed in
"RTN","ECRRPT1",64,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",65,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",66,0)
 ;       ECSORT - Sort by Patient (P) or Provider (R)
"RTN","ECRRPT1",67,0)
 ;       ECPTYP - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",68,0)
 ;                or (E)xport
"RTN","ECRRPT1",69,0)
 ;
"RTN","ECRRPT1",70,0)
 ;     Variable return
"RTN","ECRRPT1",71,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",72,0)
 N ECV,ECDATE,ECBEGIN,ECEND,ECROU,ECDESC
"RTN","ECRRPT1",73,0)
 S ECV="ECSD^ECED^ECSORT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",74,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",75,0)
 S ECBEGIN=ECSD-.0001,ECEND=ECED+.9999
"RTN","ECRRPT1",76,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",77,0)
 . S ECV="ECBEGIN^ECEND^ECSORT",ECROU="START^ECRPCLS"
"RTN","ECRRPT1",78,0)
 . S ECDESC="EC Invalid Provider Report"
"RTN","ECRRPT1",79,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",80,0)
 D START^ECRPCLS
"RTN","ECRRPT1",81,0)
 Q
"RTN","ECRRPT1",82,0)
ECDSS1 ;National/Local Procedure Reports for RPC Call
"RTN","ECRRPT1",83,0)
 ;     Variables passed in
"RTN","ECRRPT1",84,0)
 ;       ECRTN    - Procedure Report (A-active or I-inactive)
"RTN","ECRRPT1",85,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",86,0)
 ;                  or (E)xport
"RTN","ECRRPT1",87,0)
 ;    If ECRTN=A, also
"RTN","ECRRPT1",88,0)
 ;       ECRN     - Preferred Report (N-ational, L-ocal or Both)
"RTN","ECRRPT1",89,0)
 ;       ECRD     - Sort Method (P-rocedure Name, N-ational Number)
"RTN","ECRRPT1",90,0)
 ;
"RTN","ECRRPT1",91,0)
 ;     Variable return
"RTN","ECRRPT1",92,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",93,0)
 N ECV,ECDESC,ECROU,DQTIME
"RTN","ECRRPT1",94,0)
 S ECV=$S($G(ECRTN)="A":"ECRTN^ECRN^ECRD",1:"ECRTN")
"RTN","ECRRPT1",95,0)
 D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",96,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",97,0)
 I $G(ECPTYP)="E" D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1") Q  ;119
"RTN","ECRRPT1",98,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",99,0)
 . S ECV="ECRTN^ECRN^ECRD",ECROU=$S(ECRTN="I":"LISTI",1:"PRT")_"^ECDSS1"
"RTN","ECRRPT1",100,0)
 . S ECDESC="Event Capture National Procedure Report",ECDIP=1
"RTN","ECRRPT1",101,0)
 . ;S ECSAVE("IO*")=""
"RTN","ECRRPT1",102,0)
 .D QUEDIP D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",103,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",104,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",105,0)
 D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",106,0)
 Q
"RTN","ECRRPT1",107,0)
ECDSS3 ;Category Reports for RPC Call
"RTN","ECRRPT1",108,0)
 ;     Variables passed in
"RTN","ECRRPT1",109,0)
 ;       ECRTN    - Category Procedure Report 
"RTN","ECRRPT1",110,0)
 ;                  (A-active, I-inactive or B-oth)
"RTN","ECRRPT1",111,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",112,0)
 ;                  or (E)xport
"RTN","ECRRPT1",113,0)
 ;
"RTN","ECRRPT1",114,0)
 ;     Variable return
"RTN","ECRRPT1",115,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",116,0)
 N ECV,ECDIP,DQTIME
"RTN","ECRRPT1",117,0)
 S ECV="ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",118,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",119,0)
 I $G(ECPTYP)="E" D PRINT^ECDSS3 Q  ;119
"RTN","ECRRPT1",120,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",121,0)
 . S ECV="ECRTN",ECROU="PRINT^ECDSS3"
"RTN","ECRRPT1",122,0)
 . S ECDESC="Event Capture Category Reports"
"RTN","ECRRPT1",123,0)
 . D QUEDIP D PRINT^ECDSS3
"RTN","ECRRPT1",124,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",125,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",126,0)
 D PRINT^ECDSS3
"RTN","ECRRPT1",127,0)
 Q
"RTN","ECRRPT1",128,0)
QUEDIP ;Queue when using DIP
"RTN","ECRRPT1",129,0)
 N DIC,X,Y
"RTN","ECRRPT1",130,0)
 D  I Y=-1 S ECERR=1 Q
"RTN","ECRRPT1",131,0)
 . S DIC(0)="MN",X=ECDEV,DIC="^%ZIS(1," D ^DIC
"RTN","ECRRPT1",132,0)
 . S:+Y>0 IOP="Q;"_$P(Y,U,2)
"RTN","ECRRPT1",133,0)
 . S Y=ECQDT X ^DD("DD") S DQTIME=Y
"RTN","ECRRPT1",134,0)
 Q
"RTN","ECRRPT1",135,0)
ECSUM ;Print Category and Procedure Summary (Report) for RPC Call
"RTN","ECRRPT1",136,0)
 ;     Variables passed in
"RTN","ECRRPT1",137,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",138,0)
 ;       ECD0...n - DSS Unit to report (ECD0, first unit, ECD1, second 
"RTN","ECRRPT1",139,0)
 ;                  unit, etc.)
"RTN","ECRRPT1",140,0)
 ;       ECC      - Category (defaults to ALL, even if sent) (optional)
"RTN","ECRRPT1",141,0)
 ;       ECRTN    - Event Code Screen (Active, Inactive or Both)
"RTN","ECRRPT1",142,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",143,0)
 ;                  or (E)xport
"RTN","ECRRPT1",144,0)
 ;
"RTN","ECRRPT1",145,0)
 ;     Variable return
"RTN","ECRRPT1",146,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",147,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECSN,ECALL,DIC,X,Y
"RTN","ECRRPT1",148,0)
 N ECSCN,ECUNITS,ECNUM ;139
"RTN","ECRRPT1",149,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD0^ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q  ;139
"RTN","ECRRPT1",150,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",151,0)
 . D LOCARRY^ECRUTL I ECL="ALL" Q
"RTN","ECRRPT1",152,0)
 . K ECLOC I $D(ECLOC1(ECL)) S ECLOC(1)=ECL_"^"_ECLOC1(ECL)
"RTN","ECRRPT1",153,0)
 S ECSCN=ECRTN,ECD="ALL",ECALL=1 ;139
"RTN","ECRRPT1",154,0)
 F ECNUM=0:1 Q:'$D(@("ECD"_ECNUM))  S ECUNITS(@("ECD"_ECNUM))="" K @("ECD"_ECNUM) ;139 Convert DSS units to array of units
"RTN","ECRRPT1",155,0)
 I ECALL D PXRUN Q
"RTN","ECRRPT1",156,0)
PXRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",157,0)
 . S ECV="ECALL^ECSCN",ECROU="START^ECSUM"
"RTN","ECRRPT1",158,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",159,0)
 . S ECSAVE("ECUNITS(")="" ;139 Save units for queued report
"RTN","ECRRPT1",160,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECSN^ECDN^ECJLP^ECCN^ECSCN"
"RTN","ECRRPT1",161,0)
 . S ECDESC="EC Print Category and Procedure Summary"
"RTN","ECRRPT1",162,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",163,0)
 U IO D START^ECSUM
"RTN","ECRRPT1",164,0)
 Q
"RTN","ECRRPT1",165,0)
ECNTPCE ;ECS Records Failing Transmission to PCE
"RTN","ECRRPT1",166,0)
 ;     Variables passed in
"RTN","ECRRPT1",167,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",168,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",169,0)
 ;       ECPTYP - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",170,0)
 ;                or (E)xport
"RTN","ECRRPT1",171,0)
 ;
"RTN","ECRRPT1",172,0)
 ;     Variable return
"RTN","ECRRPT1",173,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",174,0)
 N ECV,ECDATE,ECROU,ECDESC
"RTN","ECRRPT1",175,0)
 S ECV="ECSD^ECED" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",176,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",177,0)
 S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",178,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",179,0)
 . S ECV="ECSD^ECED^ECDATE",ECROU="START^ECNTPCE"
"RTN","ECRRPT1",180,0)
 . S ECDESC="ECS Records Failing Transmission to PCE Report"
"RTN","ECRRPT1",181,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",182,0)
 D START^ECNTPCE
"RTN","ECRRPT1",183,0)
 Q
"RTN","ECRRPT1",184,0)
ECSCPT ;Event Code Screens with CPT Codes
"RTN","ECRRPT1",185,0)
 ;     Variables passed in
"RTN","ECRRPT1",186,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",187,0)
 ;       ECD      - DSS Unit to report (1 or ALL), If ECD'="ALL" then ECC
"RTN","ECRRPT1",188,0)
 ;       ECC      - Category (1 or ALL) (optional)
"RTN","ECRRPT1",189,0)
 ;       ECCPT    - CPT Codes to Display (Active, Inactive or Both)
"RTN","ECRRPT1",190,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",191,0)
 ;                  or (E)xport
"RTN","ECRRPT1",192,0)
 ;
"RTN","ECRRPT1",193,0)
 ;     Variable return
"RTN","ECRRPT1",194,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",195,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECALL,DIC,X,Y
"RTN","ECRRPT1",196,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD^ECCPT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",197,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",198,0)
 . I ECL="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT1",199,0)
 . S DIC=4,DIC(0)="QNZX",X=ECL D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2)
"RTN","ECRRPT1",200,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",201,0)
 . I ECD="ALL" S ECALL=1 Q
"RTN","ECRRPT1",202,0)
 . K DIC S DIC=724,DIC(0)="QNMZX",X=ECD D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",203,0)
 . S ECDN=$P(Y,U,2)_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECRRPT1",204,0)
 . S ECJLP=+$P(^ECD(ECD,0),"^",11)
"RTN","ECRRPT1",205,0)
 . I 'ECJLP S ECC=0,ECCN="None"
"RTN","ECRRPT1",206,0)
 I ECALL D CPTRUN Q
"RTN","ECRRPT1",207,0)
 S ECV="ECC" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",208,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid Category." Q
"RTN","ECRRPT1",209,0)
 . I (ECC="ALL")!(ECC=0) Q
"RTN","ECRRPT1",210,0)
 . K DIC S DIC=726,DIC(0)="QNMZX",X=ECC D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",211,0)
 . S ECCN=$P(Y,U,2)
"RTN","ECRRPT1",212,0)
CPTRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",213,0)
 . S ECV="ECALL^ECCPT",ECROU="START^ECSCPT"
"RTN","ECRRPT1",214,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",215,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECDN^ECJLP^ECCN"
"RTN","ECRRPT1",216,0)
 . S ECDESC="Event Code Screens with CPT Codes"
"RTN","ECRRPT1",217,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",218,0)
 U IO D START^ECSCPT
"RTN","ECRRPT1",219,0)
 Q
"RTN","ECRRPT1",220,0)
ECINCPT ;National/Local Procedure Codes with Inactive CPT Reports for RPC Call
"RTN","ECRRPT1",221,0)
 ;     Variables passed in
"RTN","ECRRPT1",222,0)
 ;       ECPTYP  - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",223,0)
 ;                 or (E)xport
"RTN","ECRRPT1",224,0)
 ;
"RTN","ECRRPT1",225,0)
 ;     Variable return
"RTN","ECRRPT1",226,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",227,0)
 N ECV,ECL,ECDESC,ECROU,DQTIME,ECPG
"RTN","ECRRPT1",228,0)
 S ECPG=1
"RTN","ECRRPT1",229,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",230,0)
 . S ECROU="START^ECINCPT",ECV="ECL",ECL=""
"RTN","ECRRPT1",231,0)
 . S ECDESC="National/Local Procedure Codes with Inactive CPT"
"RTN","ECRRPT1",232,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",233,0)
 U IO D START^ECINCPT
"RTN","ECRRPT1",234,0)
 Q
"RTN","ECRRPT1",235,0)
ECGTP ;ECS Generic Table Printer
"RTN","ECRRPT1",236,0)
 ;     Variables passed in
"RTN","ECRRPT1",237,0)
 ;       ECOBHNDL   - Handle to generic table print obj
"RTN","ECRRPT1",238,0)
 ;       ECPTYP     - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",239,0)
 ;
"RTN","ECRRPT1",240,0)
 ;     Variable return
"RTN","ECRRPT1",241,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",242,0)
 N ECV,ECROU,ECDESC
"RTN","ECRRPT1",243,0)
 S ECV="ECOBHNDL" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",244,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",245,0)
 . S ECV="ECOBHNDL",ECROU="START^ECGTP"
"RTN","ECRRPT1",246,0)
 . S ECDESC="ECS Generic Table Printer"
"RTN","ECRRPT1",247,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",248,0)
 D START^ECGTP
"RTN","ECRRPT1",249,0)
 Q
"RTN","ECRRPT1",250,0)
ECSTPCD ;DSS Units with Associated Stop Code Error REPORT
"RTN","ECRRPT1",251,0)
 ;  EC*2*107 - added to GUI reports
"RTN","ECRRPT1",252,0)
 ;     Variables passed in
"RTN","ECRRPT1",253,0)
 ;       ECPTYP  - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT1",254,0)
 ;                 or (E)xport
"RTN","ECRRPT1",255,0)
 ;
"RTN","ECRRPT1",256,0)
 ;     Variable return
"RTN","ECRRPT1",257,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",258,0)
 N ECV,ECL,ECDESC,ECROU,DQTIME,ECPG
"RTN","ECRRPT1",259,0)
 S ECPG=1
"RTN","ECRRPT1",260,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",261,0)
 . S ECROU="STRTGUI^ECUNTRPT",ECV="ECL",ECL=""
"RTN","ECRRPT1",262,0)
 . S ECDESC="DSS Units with Associated Stop Code Error"
"RTN","ECRRPT1",263,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",264,0)
 U IO D STRTGUI^ECUNTRPT
"RTN","ECRRPT1",265,0)
 Q 
"RTN","ECRRPT2")
0^2^B50858655^B45393143
"RTN","ECRRPT2",1,0)
ECRRPT2 ;ALB/DAN - Event Capture Report RPC Broker (Cont) ;9/28/17  14:16
"RTN","ECRRPT2",2,0)
 ;;2.0;EVENT CAPTURE;**112,131,139**;8 May 96;Build 7
"RTN","ECRRPT2",3,0)
 ;
"RTN","ECRRPT2",4,0)
ECRDSSUA ;List users with access to DSS Units
"RTN","ECRRPT2",5,0)
 ;     Variables passed in
"RTN","ECRRPT2",6,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",7,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",8,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",9,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",10,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",11,0)
 ;
"RTN","ECRRPT2",12,0)
 ;     Variable return
"RTN","ECRRPT2",13,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",14,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y
"RTN","ECRRPT2",15,0)
 S ECV="ECD0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",16,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",17,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",18,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",19,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",20,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",21,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",22,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",23,0)
 . S ECROU="STRPT^ECRDSSUA"
"RTN","ECRRPT2",24,0)
 . S ECSAVE("ECDSSU(")=""
"RTN","ECRRPT2",25,0)
 . S ECDESC="Users with access to DSS Units"
"RTN","ECRRPT2",26,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",27,0)
 D STRPT^ECRDSSUA
"RTN","ECRRPT2",28,0)
 Q
"RTN","ECRRPT2",29,0)
ALLU ;-- Get all DSS Units and create ECDSSU array
"RTN","ECRRPT2",30,0)
 N ECD,ECN,ECX,Y
"RTN","ECRRPT2",31,0)
 S ECD="",ECN=0
"RTN","ECRRPT2",32,0)
 F  S ECD=$O(^ECD("B",ECD)) Q:ECD=""  F  S ECN=$O(^ECD("B",ECD,ECN)) Q:'ECN  D
"RTN","ECRRPT2",33,0)
 . Q:'$$VALID(ECN)!('ECKEY&('$D(^VA(200,ECDUZ,"EC",+ECN))))
"RTN","ECRRPT2",34,0)
 . S ECDSSU(ECN)=ECD
"RTN","ECRRPT2",35,0)
ALLUQ Q
"RTN","ECRRPT2",36,0)
 ;
"RTN","ECRRPT2",37,0)
VALID(IEN) ;-- Check DSS Unit for use by Event Capture
"RTN","ECRRPT2",38,0)
 N NODE
"RTN","ECRRPT2",39,0)
 S NODE=$G(^ECD(IEN,0))
"RTN","ECRRPT2",40,0)
 Q $S($P(NODE,"^",8):1,1:0)
"RTN","ECRRPT2",41,0)
 ;
"RTN","ECRRPT2",42,0)
ECRUDSS ;List all DSS units user has access to
"RTN","ECRRPT2",43,0)
 ;     Variables passed in
"RTN","ECRRPT2",44,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",45,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",46,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",47,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",48,0)
 ;
"RTN","ECRRPT2",49,0)
 ;     Variable return
"RTN","ECRRPT2",50,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",51,0)
 N ECV,ECROU,ECSAVE,ECDESC
"RTN","ECRRPT2",52,0)
 S ECV="ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",53,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",54,0)
 . S ECROU="STRPT^ECRUDSS"
"RTN","ECRRPT2",55,0)
 . S ECSAVE("ECDUZ")=""
"RTN","ECRRPT2",56,0)
 . S ECDESC="DSS unit access for a selected user"
"RTN","ECRRPT2",57,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",58,0)
 D STRPT^ECRUDSS
"RTN","ECRRPT2",59,0)
 Q
"RTN","ECRRPT2",60,0)
 ;
"RTN","ECRRPT2",61,0)
ECRDSSEC ;List event code screens for selected DSS unit
"RTN","ECRRPT2",62,0)
 ;     Variables passed in
"RTN","ECRRPT2",63,0)
 ;       ECD       - DSS Unit IEN
"RTN","ECRRPT2",64,0)
 ;       STAT      - Event code screen, (A)ctive, (I)nactive,(B)oth
"RTN","ECRRPT2",65,0)
 ;       ECPTYP    - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",66,0)
 ;
"RTN","ECRRPT2",67,0)
 ;     Variable return
"RTN","ECRRPT2",68,0)
 ;       ^TMP($J,"ECRPT",n)=delimited data
"RTN","ECRRPT2",69,0)
 ;
"RTN","ECRRPT2",70,0)
 ;
"RTN","ECRRPT2",71,0)
 N ECV,ECROU,ECSAVE,ECDESC
"RTN","ECRRPT2",72,0)
 S ECV="ECD^STAT^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",73,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",74,0)
 . S ECROU="STRPT^ECRDSSEC"
"RTN","ECRRPT2",75,0)
 . S ECSAVE("ECD")="",ECSAVE("STAT")="",ECSAVE("ECPTYP")=""
"RTN","ECRRPT2",76,0)
 . S ECDESC="Event code screens for selected DSS Unit"
"RTN","ECRRPT2",77,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",78,0)
 D STRPT^ECRDSSEC
"RTN","ECRRPT2",79,0)
 Q
"RTN","ECRRPT2",80,0)
 ;
"RTN","ECRRPT2",81,0)
ECRECER ;Event Capture Encounter Report
"RTN","ECRRPT2",82,0)
 ;     Variables passed in
"RTN","ECRRPT2",83,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",84,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",85,0)
 ;       ECL0        - Location IEN (1 or ALL)
"RTN","ECRRPT2",86,0)
 ;       ECSORT      - Sort ordered by (P)atient or (D)octor (provider)
"RTN","ECRRPT2",87,0)
 ;       ECSD        - Start date range
"RTN","ECRRPT2",88,0)
 ;       ECED        - End date range
"RTN","ECRRPT2",89,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",90,0)
 ;
"RTN","ECRRPT2",91,0)
 ;     Variable return
"RTN","ECRRPT2",92,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",93,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECLOC,ECLOC1
"RTN","ECRRPT2",94,0)
 S ECV="ECD0^ECDUZ^ECL0^ECSORT^ECSD^ECED^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",95,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT2",96,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",97,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",98,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",99,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",100,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",101,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",102,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",103,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",104,0)
 . S DIC=4,DIC(0)="QNZX",X=ECL0 D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",105,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",106,0)
 . S ECROU="STRPT^ECRECER"
"RTN","ECRRPT2",107,0)
 . S ECSAVE("ECDSSU(")="",ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",108,0)
 . S ECDESC="Event Capture Encounter Report"
"RTN","ECRRPT2",109,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",110,0)
 D STRPT^ECRECER
"RTN","ECRRPT2",111,0)
 Q
"RTN","ECRRPT2",112,0)
 ;
"RTN","ECRRPT2",113,0)
ECRECSIC ;Event Capture Report, Event Capture Screen, Inactive Clinics
"RTN","ECRRPT2",114,0)
 ;     Variables passed in
"RTN","ECRRPT2",115,0)
 ;       ECD0...n    - DSS Unit to report (1, some or ALL)
"RTN","ECRRPT2",116,0)
 ;       ECL0...n    - Location IEN (1,some or ALL)
"RTN","ECRRPT2",117,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",118,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",119,0)
 ;
"RTN","ECRRPT2",120,0)
 ;     Variable return
"RTN","ECRRPT2",121,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",122,0)
 N ECDSSU,ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECLOC,ECLOC1
"RTN","ECRRPT2",123,0)
 S ECV="ECD0^ECL0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",124,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT2",125,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT2",126,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU
"RTN","ECRRPT2",127,0)
 . S ECI=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",128,0)
 . . K DIC S DIC=724,DIC(0)="QNZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT2",129,0)
 . . S ECDSSU(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",130,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",131,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",132,0)
 . S ECI=0 F ECI=0:1 S ECX="ECL"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",133,0)
 . . S DIC=4,DIC(0)="QNZX",X=@ECX D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",134,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",135,0)
 . S ECROU="STRPT^ECRECSIC"
"RTN","ECRRPT2",136,0)
 . S ECSAVE("ECDSSU(")=""
"RTN","ECRRPT2",137,0)
 . S ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",138,0)
 . S ECDESC="Event Capture Event Code Screens with Inactive Clinics"
"RTN","ECRRPT2",139,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",140,0)
 D STRPT^ECRECSIC
"RTN","ECRRPT2",141,0)
 Q
"RTN","ECRRPT2",142,0)
 ;
"RTN","ECRRPT2",143,0)
ECRECSPC ;Event code screens by procedure code
"RTN","ECRRPT2",144,0)
 ;     Variables passed in
"RTN","ECRRPT2",145,0)
 ;       ECLPC0...n  - Procedure Code (1, some or ALL)
"RTN","ECRRPT2",146,0)
 ;       ECL0...n    - Location IEN (1,some or ALL)
"RTN","ECRRPT2",147,0)
 ;       ECDUZ       - User IEN from file (#200)
"RTN","ECRRPT2",148,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice (screen), (E)xport
"RTN","ECRRPT2",149,0)
 ;
"RTN","ECRRPT2",150,0)
 ;     Variable return
"RTN","ECRRPT2",151,0)
 ;       ^TMP($J,"ECRPT",n)=returned if exported
"RTN","ECRRPT2",152,0)
 N ECV,ECI,ECKEY,ECROU,ECSAVE,ECDESC,ECX,DIC,X,Y,ECPROC,ECLOC,ECLOC1
"RTN","ECRRPT2",153,0)
 S ECV="ECLPC0^ECL0^ECDUZ^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",154,0)
 D  I '$D(ECPROC)&(ECLPC0'="ALL") S ^TMP("ECMSG",$J)="1^Invalid Procedure Code." Q
"RTN","ECRRPT2",155,0)
 . I ECLPC0="ALL" Q
"RTN","ECRRPT2",156,0)
 . S ECI=0 F ECI=0:1 S ECX="ECLPC"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",157,0)
 . . S ECPROC(@ECX)=""
"RTN","ECRRPT2",158,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",159,0)
 . I ECL0="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT2",160,0)
 . S ECI=0 F ECI=0:1 S ECX="ECL"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT2",161,0)
 . . S DIC=4,DIC(0)="QNZX",X=@ECX D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2),ECLOC1(+Y)=$P(Y,U,2)
"RTN","ECRRPT2",162,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",163,0)
 . S ECROU="STRPT^ECRECSPC"
"RTN","ECRRPT2",164,0)
 . S ECSAVE("ECPROC(")=""
"RTN","ECRRPT2",165,0)
 . S ECSAVE("ECLOC(")="",ECSAVE("ECLOC1(")=""
"RTN","ECRRPT2",166,0)
 . S ECDESC="Event Capture Event Code Screens by procedure code"
"RTN","ECRRPT2",167,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",168,0)
 D STRPT^ECRECSPC
"RTN","ECRRPT2",169,0)
 Q
"RTN","ECRRPT2",170,0)
ECRGP ;generic print capability
"RTN","ECRRPT2",171,0)
 ;  Variables passed in
"RTN","ECRRPT2",172,0)
 ;  ECLIN0...n  - Lines of data to be printed out
"RTN","ECRRPT2",173,0)
 ;
"RTN","ECRRPT2",174,0)
 ;  Variables returned - none
"RTN","ECRRPT2",175,0)
 ;
"RTN","ECRRPT2",176,0)
 N ECROU,ECSAVE,ECDESC,ECX,I,ECV
"RTN","ECRRPT2",177,0)
 S ECV="ECLIN0" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",178,0)
 S ECROU="PRINT^ECRRPT2"
"RTN","ECRRPT2",179,0)
 S ECDESC="Generic Print of Event Capture Report"
"RTN","ECRRPT2",180,0)
 F I=0:1 S ECX="ECLIN"_I Q:'$D(@ECX)  S ECSAVE(ECX)=""
"RTN","ECRRPT2",181,0)
 D QUEUE^ECRRPT
"RTN","ECRRPT2",182,0)
 Q
"RTN","ECRRPT2",183,0)
 ;
"RTN","ECRRPT2",184,0)
PRINT ;Send data to printer
"RTN","ECRRPT2",185,0)
 N I,ECX
"RTN","ECRRPT2",186,0)
 U IO
"RTN","ECRRPT2",187,0)
 W @IOF
"RTN","ECRRPT2",188,0)
 F I=0:1 S ECX="ECLIN"_I Q:'$D(@ECX)  W !,@ECX I $Y>(IOSL-4) W @IOF
"RTN","ECRRPT2",189,0)
 Q
"RTN","ECRRPT2",190,0)
 ;
"RTN","ECRRPT2",191,0)
ECDSSSNR ;131 DSS units set to send no records to PCE
"RTN","ECRRPT2",192,0)
 ;     Variables passed in
"RTN","ECRRPT2",193,0)
 ;       ECPTYP      - Where to send output (P)rinter, (D)evice or screen, (E)xport
"RTN","ECRRPT2",194,0)
 ;                     data will be returned in ^TMP($J,"ECRPT") in
"RTN","ECRRPT2",195,0)
 ;                     delimited format for export to spreadsheet
"RTN","ECRRPT2",196,0)
 ;
"RTN","ECRRPT2",197,0)
 ;     Variable return
"RTN","ECRRPT2",198,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",199,0)
 N ECV,ECROU,ECDESC
"RTN","ECRRPT2",200,0)
 S ECV="ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",201,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",202,0)
 . S ECROU="START^ECDSSSNR"
"RTN","ECRRPT2",203,0)
 . S ECDESC="DSS Units set to send no records to PCE"
"RTN","ECRRPT2",204,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",205,0)
 D START^ECDSSSNR
"RTN","ECRRPT2",206,0)
 Q
"RTN","ECRRPT2",207,0)
 ;
"RTN","ECRRPT2",208,0)
ECDISSUM ;131 Disabled Category and Procedure Summary Report
"RTN","ECRRPT2",209,0)
 ;     Variables passed in
"RTN","ECRRPT2",210,0)
 ;       ECL0..n  - Location to report (1,some or ALL)
"RTN","ECRRPT2",211,0)
 ;       ECPTYP   - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT2",212,0)
 ;                  or (E)xport
"RTN","ECRRPT2",213,0)
 ;
"RTN","ECRRPT2",214,0)
 ;     Variable return
"RTN","ECRRPT2",215,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",216,0)
 N ECV,ECLOC,I,LIEN,ECSAVE,ECDESC,ECROU
"RTN","ECRRPT2",217,0)
 S ECV="ECL0^ECPTYP" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",218,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT2",219,0)
 . D LOCARRY^ECRUTL I ECL0="ALL" Q
"RTN","ECRRPT2",220,0)
 . K ECLOC F I=0:1 S LIEN=$G(@("ECL"_I)) Q:'+LIEN  I $D(ECLOC1(LIEN)) S ECLOC(I+1)=LIEN_"^"_ECLOC1(LIEN)
"RTN","ECRRPT2",221,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",222,0)
 . S ECV="ECL0^ECPTYP",ECROU="EN^ECDISSUM"
"RTN","ECRRPT2",223,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT2",224,0)
 . S ECDESC="EC Disabled Category Report"
"RTN","ECRRPT2",225,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",226,0)
 D EN^ECDISSUM
"RTN","ECRRPT2",227,0)
 Q
"RTN","ECRRPT2",228,0)
 ;
"RTN","ECRRPT2",229,0)
ECLATESH ;139 Possible Late State Home Entries Report
"RTN","ECRRPT2",230,0)
 ;     Variables passed in
"RTN","ECRRPT2",231,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT2",232,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT2",233,0)
 ;       ECPTYP - Where to send output (P)rinter, (D)evice or screen
"RTN","ECRRPT2",234,0)
 ;                or (E)xport
"RTN","ECRRPT2",235,0)
 ;
"RTN","ECRRPT2",236,0)
 ;     Variable return
"RTN","ECRRPT2",237,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT2",238,0)
 N ECV,ECDATE,ECROU,ECDESC
"RTN","ECRRPT2",239,0)
 S ECV="ECSD^ECED" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT2",240,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT2",241,0)
 S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT2",242,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT2",243,0)
 . S ECV="ECSD^ECED^ECDATE",ECROU="START^ECLATESH"
"RTN","ECRRPT2",244,0)
 . S ECDESC="Possible Late State Home Entries Report"
"RTN","ECRRPT2",245,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT2",246,0)
 D START^ECLATESH
"RTN","ECRRPT2",247,0)
 Q
"RTN","ECSCPT")
0^14^B14113911^B12785074
"RTN","ECSCPT",1,0)
ECSCPT ;ALB/JAM - Event Code Screen With CPT Codes ;10/19/17  15:48
"RTN","ECSCPT",2,0)
 ;;2.0;EVENT CAPTURE;**72,92,95,119,139**;8 May 96;Build 7
"RTN","ECSCPT",3,0)
LOC K ECL S EC1=0 D ^ECL S:$D(LOC(2)) EC1=1 K LOC I '$D(ECL) S ECOUT=1 G END
"RTN","ECSCPT",4,0)
UNIT ;set var and sel dss unit
"RTN","ECSCPT",5,0)
 S ECJLP=0
"RTN","ECSCPT",6,0)
 S (ECOUT,ECALL)=0,ECPG=1
"RTN","ECSCPT",7,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSCPT",8,0)
 .W !!,"Do you want to list all DSS Units for "_ECLN S %=1 D YN^DICN Q:%
"RTN","ECSCPT",9,0)
 .W !!?5,"Enter <RET> to list all your DSS Units for this location, or"
"RTN","ECSCPT",10,0)
 .W !?11,"NO to select a specific DSS Unit"
"RTN","ECSCPT",11,0)
 G:%<0 END I %=1 S ECALL=1 G ECCPT
"RTN","ECSCPT",12,0)
 W @IOF,! K DIC S DIC=724,DIC(0)="QEAMZ",DIC("A")="Select DSS Unit: "
"RTN","ECSCPT",13,0)
 S:ECL DIC("S")="I $D(^ECJ(""AP"",ECL,+Y))"
"RTN","ECSCPT",14,0)
 D ^DIC K DIC G:Y<0 END S ECD=+Y,ECDN=$P(Y,"^",2)
"RTN","ECSCPT",15,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSCPT",16,0)
 S ECJLP=+$P(^ECD(ECD,0),"^",11)
"RTN","ECSCPT",17,0)
SEL ;
"RTN","ECSCPT",18,0)
 I 'ECJLP S ECC=0,ECCN="None" G ECCPT
"RTN","ECSCPT",19,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSCPT",20,0)
 .W !!,"Do you want to list all categories for "_ECDN S %=1 D YN^DICN Q:%
"RTN","ECSCPT",21,0)
 .W !!,"Enter <RET> if you would like to list all categories for this "
"RTN","ECSCPT",22,0)
 .W "DSS Unit,",!," or NO to select a specific category"
"RTN","ECSCPT",23,0)
 G:%<0 END I %=1 S ECC="ALL" G ECCPT
"RTN","ECSCPT",24,0)
 W @IOF,! K DIC S DIC=726,DIC(0)="QEAMZ",DIC("A")="Select Category for "
"RTN","ECSCPT",25,0)
 S DIC("A")=DIC("A")_ECDN_" DSS Unit:  "
"RTN","ECSCPT",26,0)
 S:ECD DIC("S")="I $D(^ECJ(""AP"",ECL,ECD,+Y))"
"RTN","ECSCPT",27,0)
 D ^DIC K DIC G:Y<0 END S ECC=+Y,ECCN=$P(Y,"^",2)
"RTN","ECSCPT",28,0)
ECCPT ;CPT Codes to display
"RTN","ECSCPT",29,0)
 K DIR
"RTN","ECSCPT",30,0)
 S DIR(0)="SO^A:Active CPT Codes;I:Inactive CPT Codes;B:Both"
"RTN","ECSCPT",31,0)
 S DIR("B")="I",DIR("A")="CPT Codes to display"
"RTN","ECSCPT",32,0)
 S DIR("?",1)="Enter an A for Event Code screens with Active CPT Codes,"
"RTN","ECSCPT",33,0)
 S DIR("?",1)=DIR("?",1)_" I for Inactive Codes,"
"RTN","ECSCPT",34,0)
 S DIR("?")="B for a consolidated report of CPT codes, or ^ to quit."
"RTN","ECSCPT",35,0)
 S DIR("??")="ECSCPT^"
"RTN","ECSCPT",36,0)
 D ^DIR K DIR I $D(DIRUT) G END
"RTN","ECSCPT",37,0)
 S ECCPT=Y
"RTN","ECSCPT",38,0)
DEV W !! K IOP,POP,IO("Q"),%ZIS,ZTSK
"RTN","ECSCPT",39,0)
 S %ZIS="QM",%ZIS("A")="Select Device:  " D ^%ZIS I POP S ECOUT=1 G END
"RTN","ECSCPT",40,0)
 I $D(IO("Q")) K IO("Q") D  G END
"RTN","ECSCPT",41,0)
 .S ZTDESC="CATEGORY AND PROCEDURE SUMMARY",ZTRTN="START^ECSCPT",ZTIO=ION
"RTN","ECSCPT",42,0)
 .D SAVE,^%ZTLOAD,HOME^%ZIS K ZTSK
"RTN","ECSCPT",43,0)
 U IO
"RTN","ECSCPT",44,0)
START ;
"RTN","ECSCPT",45,0)
 N ECI  ;generic index
"RTN","ECSCPT",46,0)
 N ECL  ;location IEN
"RTN","ECSCPT",47,0)
 N ECLN  ;location name
"RTN","ECSCPT",48,0)
 N CNT  ;119 Subscript for exported data
"RTN","ECSCPT",49,0)
 N ECAC ;139 Associated Clinic name
"RTN","ECSCPT",50,0)
 N ECACIEN ;139 Associated Clinic IEN
"RTN","ECSCPT",51,0)
 N ECMCA ;139 MCA Labor Code
"RTN","ECSCPT",52,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECSCPT",53,0)
 S ECOUT=0,ECPG=1
"RTN","ECSCPT",54,0)
 I $G(ECPTYP)="E" S CNT=1 S ^TMP($J,"ECRPT",CNT)="LOCATION^DSS UNIT^CATEGORY^CPT CODE^PROCEDURE CODE^PROCEDURE NAME^SYNONYM^ASSOCIATED CLINIC^MCA LABOR CODE" ;119,139
"RTN","ECSCPT",55,0)
 S ECI=0
"RTN","ECSCPT",56,0)
 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  D
"RTN","ECSCPT",57,0)
 . S ECL=$P(ECLOC(ECI),U),ECLN=$P(ECLOC(ECI),U,2)
"RTN","ECSCPT",58,0)
 . D ^ECSCPT1
"RTN","ECSCPT",59,0)
 I $G(ECPTYP)="E" D ^ECKILL Q  ;119 Nothing to write if exporting
"RTN","ECSCPT",60,0)
CLEAR I $E(IOST,1,2)'="C-" G END
"RTN","ECSCPT",61,0)
 G:ECOUT END
"RTN","ECSCPT",62,0)
 I ECPG W !!!!!,"Press <RET> to continue  " R X:DTIME I '$T!(X="^") S ECOUT=1 G END
"RTN","ECSCPT",63,0)
 G:ECALL END
"RTN","ECSCPT",64,0)
ASK ;
"RTN","ECSCPT",65,0)
 W @IOF F Q=0:0 D  I % Q
"RTN","ECSCPT",66,0)
 .W !!,"Would you like to list another DSS Unit for this Location"
"RTN","ECSCPT",67,0)
 .S %=2 D YN^DICN I % Q
"RTN","ECSCPT",68,0)
 .W !!,"Enter YES to list another DSS Unit or <RET> to continue"
"RTN","ECSCPT",69,0)
 G:%<0 END I %=1 D  G UNIT
"RTN","ECSCPT",70,0)
 .K ECD,ECDN,ECC,ECCN,ECP,ECPN,NATN,ECFILE,ECCPT
"RTN","ECSCPT",71,0)
 K ECD,ECDN,ECC,ECCN,ECP,ECPN,NATN,ECFILE,ECCPT
"RTN","ECSCPT",72,0)
 I EC1 G LOC
"RTN","ECSCPT",73,0)
END ;
"RTN","ECSCPT",74,0)
 D ^ECKILL Q:$D(ECGUI)  W @IOF D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@"
"RTN","ECSCPT",75,0)
 Q
"RTN","ECSCPT",76,0)
SAVE ;
"RTN","ECSCPT",77,0)
 S (ZTSAVE("ECALL"),ZTSAVE("ECJLP"),ZTSAVE("ECC*"),ZTSAVE("ECD*"),ZTSAVE("ECL*"),ZTSAVE("ECP*"))=""
"RTN","ECSCPT",78,0)
 Q
"RTN","ECSCPT1")
0^15^B15662403^B12941962
"RTN","ECSCPT1",1,0)
ECSCPT1 ;ALB/JAM - Event Code Screens with CPT Codes ;10/19/17  15:50
"RTN","ECSCPT1",2,0)
 ;;2.0;EVENT CAPTURE;**72,95,119,131,139**;8 May 96;Build 7
"RTN","ECSCPT1",3,0)
EN ;entry point
"RTN","ECSCPT1",4,0)
 N UCNT,ECDO,ECCO,ECNT,ECINDT,ECP0
"RTN","ECSCPT1",5,0)
 S (ECMORE,ECNT,ECDO,ECCO)=0,ECPG=$G(ECPG,1),ECCPT=$G(ECCPT,"B")
"RTN","ECSCPT1",6,0)
 ;Process all DSS Units
"RTN","ECSCPT1",7,0)
 I ECALL S ECD=0 D  G END
"RTN","ECSCPT1",8,0)
 .F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'ECD  D  Q:ECOUT
"RTN","ECSCPT1",9,0)
 ..D SET,CATS,PAGE:'ECOUT&UCNT
"RTN","ECSCPT1",10,0)
 ;Process a specific DSS Unit
"RTN","ECSCPT1",11,0)
 S UCNT=0 D
"RTN","ECSCPT1",12,0)
 .I ECC="ALL" D CATS Q
"RTN","ECSCPT1",13,0)
 .I 'ECJLP S ECC=0,ECCN="None",ECCO=999
"RTN","ECSCPT1",14,0)
 .D PROC
"RTN","ECSCPT1",15,0)
END I 'ECNT,$G(ECPTYP)'="E" W !!!,"Nothing Found." ;119 Nothing to write if exporting
"RTN","ECSCPT1",16,0)
 S ECPG=$G(ECPG,1)
"RTN","ECSCPT1",17,0)
 Q
"RTN","ECSCPT1",18,0)
SET ;set var
"RTN","ECSCPT1",19,0)
 S ECDN=$S($P($G(^ECD(+ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),UCNT=0
"RTN","ECSCPT1",20,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSCPT1",21,0)
 Q
"RTN","ECSCPT1",22,0)
SETC ;set cats
"RTN","ECSCPT1",23,0)
 I ECC=0 S ECCN="None" Q
"RTN","ECSCPT1",24,0)
 S ECCN=$S($P($G(^EC(726,+ECC,0)),"^")]"":$P(^(0),"^"),1:"ZZ #"_ECC_" MISSING DATA")
"RTN","ECSCPT1",25,0)
 S ECMORE=1
"RTN","ECSCPT1",26,0)
 Q
"RTN","ECSCPT1",27,0)
HEADER ;
"RTN","ECSCPT1",28,0)
 W:$E(IOST,1,2)="C-"!(ECPG>1) @IOF
"RTN","ECSCPT1",29,0)
 W !!,?24,"EVENT CODE SCREENS WITH"
"RTN","ECSCPT1",30,0)
 W $S(ECCPT="I":" INACTIVE",ECCPT="A":" ACTIVE",1:"")_" CPT CODES"
"RTN","ECSCPT1",31,0)
 W ?70,"Page: ",ECPG,!?25,"Run Date: ",ECRDT,!?25,"LOCATION:  "_ECLN
"RTN","ECSCPT1",32,0)
 W !?25,"DSS UNIT:  "_ECDN,! S ECPG=ECPG+1
"RTN","ECSCPT1",33,0)
 F I=1:1:80 W "-"
"RTN","ECSCPT1",34,0)
 Q
"RTN","ECSCPT1",35,0)
CATS ;
"RTN","ECSCPT1",36,0)
 S ECC="",ECCO=0
"RTN","ECSCPT1",37,0)
 F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  D  Q:ECOUT  ;131 Moved calls to dot structure
"RTN","ECSCPT1",38,0)
 .I ECC,'$P(^ECD(ECD,0),U,11) Q  ;131 Don't include categories if unit is set to "no categories"
"RTN","ECSCPT1",39,0)
 .D SETC,PROC ;131 Moved from for loop
"RTN","ECSCPT1",40,0)
 S ECMORE=0
"RTN","ECSCPT1",41,0)
 Q
"RTN","ECSCPT1",42,0)
PROC ;
"RTN","ECSCPT1",43,0)
 S ECP=""
"RTN","ECSCPT1",44,0)
 F  S ECP=$O(^ECJ("AP",ECL,ECD,ECC,ECP)) Q:ECP=""  D SETP Q:ECOUT
"RTN","ECSCPT1",45,0)
 S ECMORE=0
"RTN","ECSCPT1",46,0)
 Q
"RTN","ECSCPT1",47,0)
SETP ;set procs
"RTN","ECSCPT1",48,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,"")),ECPI=""
"RTN","ECSCPT1",49,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2),ECFILE=$P(ECP,";",2)
"RTN","ECSCPT1",50,0)
 S ECACIEN=+$P($G(^ECJ(ECPSY,"PRO")),U,4) ;Get clinic IEN
"RTN","ECSCPT1",51,0)
 S ECAC=$$GET1^DIQ(44,ECACIEN,.01) ;139 Get associated clinic
"RTN","ECSCPT1",52,0)
 S ECMCA=$$GET1^DIQ(728.442,$P($G(^ECX(728.44,+ECACIEN,0)),U,14),.01) ;139 Get MCA Labor Code for associated clinic
"RTN","ECSCPT1",53,0)
 S ECFILE=$S($E(ECFILE)="I":81,$E(ECFILE)="E":725,1:"")
"RTN","ECSCPT1",54,0)
 I ECFILE="" Q
"RTN","ECSCPT1",55,0)
 S (ECPN,ECPT,NATN)="",ECPI=0
"RTN","ECSCPT1",56,0)
 I ECFILE=81 S ECPI=$$CPT^ICPTCOD(+ECP) I +ECPI>0 D
"RTN","ECSCPT1",57,0)
 .S ECPN=$P(ECPI,"^",3),ECPT=$P(ECPI,"^",2),ECINDT=$P(ECPI,"^",7)
"RTN","ECSCPT1",58,0)
 I ECFILE=725 D
"RTN","ECSCPT1",59,0)
 .S ECP0=$G(^EC(725,+ECP,0)),ECPT="",ECPN=$P(ECP0,"^")
"RTN","ECSCPT1",60,0)
 .S NATN=$P(ECP0,"^",2)
"RTN","ECSCPT1",61,0)
 .I $P(ECP0,"^",5)'="" S ECPI=$$CPT^ICPTCOD($P(ECP0,"^",5)) I +ECPI>0 D 
"RTN","ECSCPT1",62,0)
 ..S ECPT=$P(ECPI,"^",2),ECINDT=$P(ECPI,"^",7)
"RTN","ECSCPT1",63,0)
 I +ECPI<1 Q
"RTN","ECSCPT1",64,0)
 I ECCPT="A",'ECINDT Q
"RTN","ECSCPT1",65,0)
 I ECCPT="I",ECINDT Q
"RTN","ECSCPT1",66,0)
 I $G(ECPTYP)="E" D EXPORT Q  ;119 Nothing to write if exporting
"RTN","ECSCPT1",67,0)
 I ECD'=ECDO D HEADER S ECDO=ECD
"RTN","ECSCPT1",68,0)
 I ECC'=ECCO D  S ECCO=ECC I ECOUT Q
"RTN","ECSCPT1",69,0)
 .W !!,"Category:  "_ECCN D:$Y+4>IOSL CONTD
"RTN","ECSCPT1",70,0)
 S ECNT=ECNT+1,UCNT=UCNT+1 ;139
"RTN","ECSCPT1",71,0)
 W !,"Procedure: ",$E(ECPN,1,30)," (",$S(ECFILE=81:"CPT",1:"EC"),")",?48,"Nat'l #: ",NATN,?64,"CPT: ",ECPT
"RTN","ECSCPT1",72,0)
 I ECCPT="B",'ECINDT W ?70," *I*"
"RTN","ECSCPT1",73,0)
 I $G(ECPSYN)'="" W !,"  Synonym: ",ECPSYN ;139
"RTN","ECSCPT1",74,0)
 I $G(ECAC)'="" W !,"  Associated Clinic: ",ECAC,?52,"MCA Labor Code: ",ECMCA ;139
"RTN","ECSCPT1",75,0)
 D:($Y+3)>IOSL CONTD I ECOUT Q
"RTN","ECSCPT1",76,0)
 Q
"RTN","ECSCPT1",77,0)
CONTD ;Check whether to continue or exit
"RTN","ECSCPT1",78,0)
 D PAGE I ECOUT Q
"RTN","ECSCPT1",79,0)
 D HEADER:ECPG,MORE:$D(ECCN)
"RTN","ECSCPT1",80,0)
 Q
"RTN","ECSCPT1",81,0)
 ;
"RTN","ECSCPT1",82,0)
PAGE ;
"RTN","ECSCPT1",83,0)
 N SS,JJ
"RTN","ECSCPT1",84,0)
 I $D(ECPG),$E(IOST,1,2)="C-" D
"RTN","ECSCPT1",85,0)
 . S SS=22-$Y F JJ=1:1:SS W !
"RTN","ECSCPT1",86,0)
 . S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECSCPT1",87,0)
 Q
"RTN","ECSCPT1",88,0)
MORE I ECMORE W !!,"Category:  "_ECCN
"RTN","ECSCPT1",89,0)
 Q
"RTN","ECSCPT1",90,0)
 ;
"RTN","ECSCPT1",91,0)
EXPORT ;Section added in patch 119
"RTN","ECSCPT1",92,0)
 S CNT=CNT+1
"RTN","ECSCPT1",93,0)
 S ^TMP($J,"ECRPT",CNT)=ECLN_U_ECDN_U_ECCN_U_ECPT_$S('ECINDT:" **Inactive**",1:"")_U_NATN_U_ECPN_" ("_$S(ECFILE=81:"CPT",1:"EC")_")"_U_ECPSYN_U_ECAC_U_ECMCA ;139
"RTN","ECSCPT1",94,0)
 Q
"RTN","ECSUM")
0^8^B16622195^B16700984
"RTN","ECSUM",1,0)
ECSUM ;BIR/JLP,RHK-Category and Procedure Summary ;9/27/17  11:22
"RTN","ECSUM",2,0)
 ;;2.0;EVENT CAPTURE;**4,19,33,47,95,119,122,126,131,139**;8 May 96;Build 7
"RTN","ECSUM",3,0)
LOC K ECL S EC1=0 D ^ECL S:$D(LOC(2)) EC1=1 K LOC I '$D(ECL) S ECOUT=1 G END
"RTN","ECSUM",4,0)
UNIT ;set var and sel dss unit
"RTN","ECSUM",5,0)
 S ECJLP=0
"RTN","ECSUM",6,0)
 S (ECOUT,ECALL)=0,ECPG=1
"RTN","ECSUM",7,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSUM",8,0)
 .W !!,"Do you want to list all DSS Units for "_ECLN S %=1 D YN^DICN Q:%
"RTN","ECSUM",9,0)
 .W !!?5,"Enter <RET> to list all your DSS Units for this location, or"
"RTN","ECSUM",10,0)
 .W !?11,"NO to select a specific DSS Unit"
"RTN","ECSUM",11,0)
 G:%<0 END I %=1 S ECALL=1 G ECSCN
"RTN","ECSUM",12,0)
 W @IOF,! K DIC S DIC=724,DIC(0)="QEAMZ",DIC("A")="Select DSS Unit: "
"RTN","ECSUM",13,0)
 S:ECL DIC("S")="I $D(^ECJ(""AP"",ECL,+Y))"
"RTN","ECSUM",14,0)
 D ^DIC K DIC G:Y<0 END S ECD=+Y,ECDN=$P(Y,"^",2)
"RTN","ECSUM",15,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSUM",16,0)
 S ECS=+$P(^ECD(ECD,0),"^",2),ECJLP=+$P(^(0),"^",11)
"RTN","ECSUM",17,0)
 S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECSUM",18,0)
SEL ;
"RTN","ECSUM",19,0)
 I 'ECJLP S ECC=0,ECCN="None" G ECSCN
"RTN","ECSUM",20,0)
 W @IOF F Q=0:0 D  Q:%
"RTN","ECSUM",21,0)
 .W !!,"Do you want to list all categories for "_ECDN S %=1 D YN^DICN Q:%
"RTN","ECSUM",22,0)
 .W !!,"Enter <RET> if you would like to list all categories for this "
"RTN","ECSUM",23,0)
 .W "DSS Unit,",!," or NO to select a specific category"
"RTN","ECSUM",24,0)
 G:%<0 END I %=1 S ECC="ALL" G ECSCN
"RTN","ECSUM",25,0)
 W @IOF,! K DIC S DIC=726,DIC(0)="QEAMZ",DIC("A")="Select Category for "
"RTN","ECSUM",26,0)
 S DIC("A")=DIC("A")_ECDN_" DSS Unit:  "
"RTN","ECSUM",27,0)
 S:ECD DIC("S")="I $D(^ECJ(""AP"",ECL,ECD,+Y))"
"RTN","ECSUM",28,0)
 D ^DIC K DIC G:Y<0 END S ECC=+Y,ECCN=$P(Y,"^",2)
"RTN","ECSUM",29,0)
ECSCN ;Event Codes Screens to display, ALB/JAM-10/16/01
"RTN","ECSUM",30,0)
 K DIR
"RTN","ECSUM",31,0)
 S DIR(0)="SO^A:Active Event Code Screens;I:Inactive Event Code Screens"
"RTN","ECSUM",32,0)
 S DIR(0)=DIR(0)_";B:Both",DIR("B")="A"
"RTN","ECSUM",33,0)
 S DIR("A")="Event Code Screen to display"
"RTN","ECSUM",34,0)
 S DIR("?",1)="Enter an A for Active Event Code Screens, I for Inactive "
"RTN","ECSUM",35,0)
 S DIR("?",1)=DIR("?",1)_"Code Screens,"
"RTN","ECSUM",36,0)
 S DIR("?")="B for a consolidated report of all Event Code Screens, or "
"RTN","ECSUM",37,0)
 S DIR("?")=DIR("?")_"^ to quit."
"RTN","ECSUM",38,0)
 S DIR("??")="ECSUM^"
"RTN","ECSUM",39,0)
 D ^DIR K DIR I $D(DIRUT) G END
"RTN","ECSUM",40,0)
 S ECSCN=Y
"RTN","ECSUM",41,0)
DEV W !! K IOP,POP,IO("Q"),%ZIS,ZTSK
"RTN","ECSUM",42,0)
 S %ZIS="QM",%ZIS("A")="Select Device:  " D ^%ZIS I POP S ECOUT=1 G END
"RTN","ECSUM",43,0)
 I $D(IO("Q")) K IO("Q") D  G END
"RTN","ECSUM",44,0)
 .S ZTDESC="CATEGORY AND PROCEDURE SUMMARY",ZTRTN="START^ECSUM",ZTIO=ION
"RTN","ECSUM",45,0)
 .D SAVE,^%ZTLOAD,HOME^%ZIS K ZTSK
"RTN","ECSUM",46,0)
 U IO
"RTN","ECSUM",47,0)
START ;
"RTN","ECSUM",48,0)
 N ECI  ;generic index
"RTN","ECSUM",49,0)
 N ECL  ;location IEN
"RTN","ECSUM",50,0)
 N ECLN  ;location name
"RTN","ECSUM",51,0)
 N CNT ;122 Subscript for export
"RTN","ECSUM",52,0)
 S CNT=1 ;139
"RTN","ECSUM",53,0)
 S ^TMP($J,"ECRPT",CNT)="EC SCREEN STATUS^LOCATION^SERVICE^DSS UNIT^DSS UNIT IEN^DSS DEPT^SEND STATUS^DSS UNIT INACTIVE^CATEGORY^" ;139
"RTN","ECSUM",54,0)
 S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_"CPT CODE^PROCEDURE CODE^PROCEDURE NAME^SYNONYM^CLINIC IEN^CLINIC^STOP CODE^CREDIT STOP CODE^CHAR4 CODE^MCA LABOR CODE" ;139
"RTN","ECSUM",55,0)
 S %H=$H D YX^%DTC S ECRDT=Y
"RTN","ECSUM",56,0)
 S ECOUT=0,ECPG=1
"RTN","ECSUM",57,0)
 S ECI=0
"RTN","ECSUM",58,0)
 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  D
"RTN","ECSUM",59,0)
 . S ECL=$P(ECLOC(ECI),U),ECLN=$P(ECLOC(ECI),U,2)
"RTN","ECSUM",60,0)
 . I ECALL D ^ECSUM1 Q  ;122
"RTN","ECSUM",61,0)
 . D SUM2^ECSUM1 ;122 Selected DSS units
"RTN","ECSUM",62,0)
CLEAR I $E(IOST,1,2)'="C-" G END
"RTN","ECSUM",63,0)
 G:ECOUT END
"RTN","ECSUM",64,0)
 I ECPG W !!!!!,"Press <RET> to continue  " R X:DTIME I '$T!(X="^") S ECOUT=1 G END
"RTN","ECSUM",65,0)
 G:ECALL END
"RTN","ECSUM",66,0)
ASK ;
"RTN","ECSUM",67,0)
 W @IOF F Q=0:0 D  I % Q
"RTN","ECSUM",68,0)
 .W !!,"Would you like to list another DSS Unit for this Location"
"RTN","ECSUM",69,0)
 .S %=2 D YN^DICN I % Q
"RTN","ECSUM",70,0)
 .W !!,"Enter YES to list another DSS Unit or <RET> to continue"
"RTN","ECSUM",71,0)
 G:%<0 END I %=1 D  G UNIT
"RTN","ECSUM",72,0)
 .K EC4,ECD,ECDN,ECC,ECCN,ECP,ECPN,ECSY,ECSYN,NATN,ECS,ECSN,ECFILE,ECSCN
"RTN","ECSUM",73,0)
 K EC4,ECD,ECDN,ECC,ECCN,ECP,ECPN,ECSY,ECSYN,NATN,ECS,ECSN,ECFILE,ECSCN
"RTN","ECSUM",74,0)
 I EC1 G LOC
"RTN","ECSUM",75,0)
END ;
"RTN","ECSUM",76,0)
 D ^ECKILL Q:$D(ECGUI)!($G(ECPTYP)="E")  W @IOF D ^%ZISC S:$D(ZTQUEUED) ZTREQ="@" ;119
"RTN","ECSUM",77,0)
 Q
"RTN","ECSUM",78,0)
SAVE ;
"RTN","ECSUM",79,0)
 S (ZTSAVE("ECA*"),ZTSAVE("ECJLP"),ZTSAVE("ECC*"),ZTSAVE("ECD*"),ZTSAVE("ECL*"),ZTSAVE("ECM*"),ZTSAVE("ECP*"),ZTSAVE("ECS*"),ZTSAVE("EC4"))=""
"RTN","ECSUM",80,0)
 Q
"RTN","ECSUM1")
0^10^B32805163^B30607449
"RTN","ECSUM1",1,0)
ECSUM1 ;BIR/JLP,RHK-Category and Procedure Summary (cont'd) ;2/1/18  13:14
"RTN","ECSUM1",2,0)
 ;;2.0;EVENT CAPTURE;**4,19,23,33,47,95,100,119,122,126,131,139**;8 May 96;Build 7
"RTN","ECSUM1",3,0)
ALLU ;
"RTN","ECSUM1",4,0)
 N UCNT,ECDO,ECCO,ECNT,ECD,ECMORE,ECEDN,ECEDNST,ECCPT,ECDNPCE,ECDNDEPT ;119,122,126
"RTN","ECSUM1",5,0)
 S (ECD,ECMORE,ECNT,ECDO,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",6,0)
 F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'ECD  D  Q:ECOUT
"RTN","ECSUM1",7,0)
 .Q:'$D(ECUNITS(ECD))  ;139 Stop if DSS unit isn't in list
"RTN","ECSUM1",8,0)
 .D SET,CATS I $G(ECPTYP)'="E" D PAGE:'ECOUT&UCNT ;119
"RTN","ECSUM1",9,0)
END Q:$G(ECPTYP)="E"  I 'ECNT N ECNOCNT S ECNOCNT=1 D HEADER W !!!,"Nothing Found." ;119
"RTN","ECSUM1",10,0)
 S ECPG=$G(ECPG,1)
"RTN","ECSUM1",11,0)
 Q
"RTN","ECSUM1",12,0)
SUM2 ;Prints Categories and Procedures for a DSS Unit
"RTN","ECSUM1",13,0)
 N UCNT,ECDO,ECCO,ECNT,ECMORE,ECEDN,ECEDNST,ECCPT,ECDNPCE,ECDNDEPT ;119,122,126
"RTN","ECSUM1",14,0)
 S (ECDO,ECMORE,UCNT,ECNT,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",15,0)
 D SET ;126
"RTN","ECSUM1",16,0)
 I ECC="ALL" D CATS G END
"RTN","ECSUM1",17,0)
 I 'ECJLP S ECC=0,ECCN="None",ECCO=999
"RTN","ECSUM1",18,0)
 D PROC
"RTN","ECSUM1",19,0)
 D END
"RTN","ECSUM1",20,0)
 Q
"RTN","ECSUM1",21,0)
SET ;set var
"RTN","ECSUM1",22,0)
 S (ECDN,ECEDN)=$S($P($G(^ECD(+ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),UCNT=0 ;119
"RTN","ECSUM1",23,0)
 S ECDN=ECDN_" ("_+ECD_")"_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"") ;131
"RTN","ECSUM1",24,0)
 S ECEDNST=$S($P($G(^ECD(+ECD,0)),U,6):"INACTIVE",1:"") ;119
"RTN","ECSUM1",25,0)
 S ECDNPCE=$$GET1^DIQ(724,+ECD,13,"E") ;126 send to pce
"RTN","ECSUM1",26,0)
 S ECDNDEPT=$$GET1^DIQ(724,+ECD,4,"E") ;126 DSS Dept
"RTN","ECSUM1",27,0)
 S ECS=+$P($G(^ECD(+ECD,0)),"^",2)
"RTN","ECSUM1",28,0)
 S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECSUM1",29,0)
 Q
"RTN","ECSUM1",30,0)
SETC ;set cats
"RTN","ECSUM1",31,0)
 I ECC=0 S ECCN="None" Q
"RTN","ECSUM1",32,0)
 S ECCN=$S($P($G(^EC(726,+ECC,0)),"^")]"":$P(^(0),"^"),1:"ZZ #"_ECC_" MISSING DATA")
"RTN","ECSUM1",33,0)
 S ECCN=ECCN_$S($P($G(^EC(726,+ECC,0)),"^",3):" **Inactive**",1:"")
"RTN","ECSUM1",34,0)
 S ECMORE=1
"RTN","ECSUM1",35,0)
 Q
"RTN","ECSUM1",36,0)
HEADER ;
"RTN","ECSUM1",37,0)
 W:$E(IOST,1,2)="C-"!(ECPG>1) @IOF
"RTN","ECSUM1",38,0)
 W !!,?25,$S($G(ECDIS):"DISABLED ",1:""),"CATEGORY AND PROCEDURE SUMMARY",?70,"Page: ",ECPG,! ;131 added conditional print of disabled
"RTN","ECSUM1",39,0)
 W ?27,$S(ECSCN="I":"INACTIVE",ECSCN="A":"ACTIVE",1:" ALL")_" EVENT CODE"
"RTN","ECSUM1",40,0)
 W " SCREENS",!?25,"Run Date:    ",ECRDT,!?25,"LOCATION:    "_ECLN ;126
"RTN","ECSUM1",41,0)
 I $G(ECNOCNT) W ! S ECPG=ECPG+1
"RTN","ECSUM1",42,0)
 I '$G(ECNOCNT) D  ;126
"RTN","ECSUM1",43,0)
 .W !,?25,"SERVICE:     ",ECSN,!?25,"DSS UNIT:    "_ECDN,!,?25,"SEND STATUS: ",ECDNPCE,!,?25,"DSS DEPT:    ",ECDNDEPT ;126
"RTN","ECSUM1",44,0)
 .W !!,"PROC",?7,"PROCEDURE NAME",!,"CODE",?7,"SYNONYM",!,?9,"CLINIC IEN/CLINIC/STOP CODE/CREDIT STOP/CHAR4/MCA LABOR CODE",! S ECPG=ECPG+1 ;126,139
"RTN","ECSUM1",45,0)
 F I=1:1:80 W "-"
"RTN","ECSUM1",46,0)
 Q
"RTN","ECSUM1",47,0)
CATS ;
"RTN","ECSUM1",48,0)
 S ECC="",ECCO=0
"RTN","ECSUM1",49,0)
 F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  D  Q:ECOUT  ;131 Moved calls to dot structure
"RTN","ECSUM1",50,0)
 .I '$G(ECDIS),ECC,'$P(^ECD(ECD,0),U,11) Q  ;131 If running the category and procedure summary report, and there's a category, and the DSS unit is set to "no categories" then quit
"RTN","ECSUM1",51,0)
 .D SETC,PROC ;131 Moved calls here from for loop
"RTN","ECSUM1",52,0)
 S ECMORE=0
"RTN","ECSUM1",53,0)
 Q
"RTN","ECSUM1",54,0)
PROC ;
"RTN","ECSUM1",55,0)
 S ECP=""
"RTN","ECSUM1",56,0)
 F  S ECP=$O(^ECJ("AP",ECL,ECD,ECC,ECP)) Q:ECP=""  D SETP Q:ECOUT
"RTN","ECSUM1",57,0)
 S ECMORE=0
"RTN","ECSUM1",58,0)
 Q
"RTN","ECSUM1",59,0)
SETP ;set procs
"RTN","ECSUM1",60,0)
 N ECSC,ECSSC,EC4CHAR,NODE0,ECINDT,ECMCA ;122,126,139
"RTN","ECSUM1",61,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECSUM1",62,0)
 S ECINDT=$P($G(^ECJ(ECPSY,0)),"^",2)
"RTN","ECSUM1",63,0)
 I ECSCN="A",ECINDT'="" Q
"RTN","ECSUM1",64,0)
 I ECSCN="I",ECINDT="" Q
"RTN","ECSUM1",65,0)
 I ECD'=ECDO D:$G(ECPTYP)'="E" HEADER S ECDO=ECD ;119
"RTN","ECSUM1",66,0)
 I ECC'=ECCO D  S ECCO=ECC I ECOUT Q
"RTN","ECSUM1",67,0)
 .I $G(ECPTYP)="E" Q  ;119
"RTN","ECSUM1",68,0)
 .W !!,$S($G(ECDIS):"Disabled ",1:""),"Category:  "_ECCN D:$Y+4>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN) ;122,131 Removed white space from front of line
"RTN","ECSUM1",69,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2),EC4=+$P($G(^("PRO")),"^",4)
"RTN","ECSUM1",70,0)
 S EC2="" I EC4 S EC2=$S($P($G(^SC(EC4,0)),"^")]"":$P(^(0),"^"),1:"NO ASSOCIATED CLINIC")
"RTN","ECSUM1",71,0)
 S (ECSC,ECSSC,EC4CHAR,ECMCA)="" ;122,139
"RTN","ECSUM1",72,0)
 I EC4 D  ;139
"RTN","ECSUM1",73,0)
 .S NODE0=$G(^ECX(728.44,EC4,0)),ECSC=$P(NODE0,U,2),ECSSC=$S($P(NODE0,U,3)'="":$P(NODE0,U,3),$G(ECPTYP)="E":"",1:"000"),EC4CHAR=$P($G(^ECX(728.441,+$P(NODE0,U,8),0)),U) ;122,139 Get stop code, credit stop code, char4 code
"RTN","ECSUM1",74,0)
 .S ECMCA=$$GET1^DIQ(728.442,$P(NODE0,U,14),.01) ;139 Get MCA labor code
"RTN","ECSUM1",75,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,$E(ECFILE)="E":725,1:"UNKNOWN")
"RTN","ECSUM1",76,0)
 I ECFILE="UNKNOWN" S ECPN="UNKNOWN",NATN="UNKNOWN"
"RTN","ECSUM1",77,0)
 I ECFILE=81 S ECPI=$$CPT^ICPTCOD(+ECP) D
"RTN","ECSUM1",78,0)
 .S ECPN=$S($P(ECPI,"^",3)]"":$P(ECPI,"^",3),1:"UNKNOWN"),NATN=$S($P(ECPI,"^",2)]"":$P(ECPI,"^",2),1:"NOT LISTED") K ECPI
"RTN","ECSUM1",79,0)
 I ECFILE=725 S ECPN=$S($P($G(^EC(725,+ECP,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),NATN=$S($P($G(^EC(725,+ECP,0)),"^",2)]"":$P(^(0),"^",2),1:"NOT LISTED")
"RTN","ECSUM1",80,0)
 I ECFILE=725 S ECCPT=$$CPT^ICPTCOD(+$P($G(^EC(725,+ECP,0)),U,5)),ECCPT=$S($P(ECCPT,U)=-1:"",1:$P(ECCPT,U,2)) ;119
"RTN","ECSUM1",81,0)
 S ECNT=ECNT+1,UCNT=UCNT+1 ;126
"RTN","ECSUM1",82,0)
 I $G(ECPTYP)="E" D  Q  ;119
"RTN","ECSUM1",83,0)
 .D SET ; SET THE DSS UNIT AND UNIT STATUS VARIABLES 119
"RTN","ECSUM1",84,0)
 .S CNT=CNT+1 ;119
"RTN","ECSUM1",85,0)
 .S ^TMP($J,"ECRPT",CNT)=$S($P($G(^ECJ(+ECPSY,0)),U,2):"INACTIVE",1:"ACTIVE")_U_ECLN_U_ECSN_U_ECEDN_U_+ECD_U_ECDNDEPT ;119,122,126,131
"RTN","ECSUM1",86,0)
 .S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_ECDNPCE_U_ECEDNST_U_ECCN_U_$S(ECFILE=81:NATN_U,1:ECCPT_U_NATN)_U_ECPN_U_ECPSYN_U_$S(EC4:EC4,1:"")_U_EC2_U_ECSC_U_ECSSC_U_EC4CHAR_U_ECMCA ;119,122,126,139
"RTN","ECSUM1",87,0)
 W !,NATN,?7,ECPN,"  (",$S(ECFILE=81:"CPT",1:"EC"),")" ;122,126,139
"RTN","ECSUM1",88,0)
 I $P($G(^ECJ(+ECPSY,0)),"^",2),ECSCN="B" W ?70,"*INACTIVE*"
"RTN","ECSUM1",89,0)
 W:ECPSYN'="" !,?7,ECPSYN ;139 Moved line here from above
"RTN","ECSUM1",90,0)
 W:EC2]"" !,?9,EC4_"/"_EC2_"/"_ECSC_"/"_ECSSC_"/"_EC4CHAR_"/"_ECMCA ;122,126,139
"RTN","ECSUM1",91,0)
 D:($Y+3)>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN) Q:ECOUT
"RTN","ECSUM1",92,0)
 Q
"RTN","ECSUM1",93,0)
PAGE ;
"RTN","ECSUM1",94,0)
 N SS,JJ
"RTN","ECSUM1",95,0)
 I $D(ECPG),$E(IOST,1,2)="C-" D
"RTN","ECSUM1",96,0)
 . S SS=22-$Y F JJ=1:1:SS W !
"RTN","ECSUM1",97,0)
 . S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECSUM1",98,0)
 Q
"RTN","ECSUM1",99,0)
MORE I ECMORE W !!,$S($G(ECDIS):"Disabled ",1:""),"Category:  "_ECCN ;122,131 Removed white space from front of line
"RTN","ECSUM1",100,0)
 Q
"RTN","ECU1RPC")
0^11^B55545194^B55194101
"RTN","ECU1RPC",1,0)
ECU1RPC ;ALB/ACS;Event Capture Spreadsheet Utilities ;2/13/18  16:21
"RTN","ECU1RPC",2,0)
 ;;2.0;EVENT CAPTURE ;**25,30,49,61,131,139**;8 May 96;Build 7
"RTN","ECU1RPC",3,0)
 ;
"RTN","ECU1RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECU1RPC",5,0)
 ;
"RTN","ECU1RPC",6,0)
 ;INPUT     ECDATA  - Contains column headers or a row of Event Capture
"RTN","ECU1RPC",7,0)
 ;                    spreadshet data
"RTN","ECU1RPC",8,0)
 ;
"RTN","ECU1RPC",9,0)
 ;
"RTN","ECU1RPC",10,0)
 ;OTHER     ^TMP($J,"COLS" array will store the column header order
"RTN","ECU1RPC",11,0)
 ;
"RTN","ECU1RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECU1RPC",13,0)
 ;======================================================================
"RTN","ECU1RPC",14,0)
 ;MODIFICATIONS:
"RTN","ECU1RPC",15,0)
 ;
"RTN","ECU1RPC",16,0)
 ;08/2001    EC*2.0*30   Changed column header from 'Station' to
"RTN","ECU1RPC",17,0)
 ;                       'Location'.
"RTN","ECU1RPC",18,0)
 ;08/2016    EC*2.0*131  Added many new columns
"RTN","ECU1RPC",19,0)
 ;======================================================================
"RTN","ECU1RPC",20,0)
 ;
"RTN","ECU1RPC",21,0)
ECHDRS(ECDATA) ;
"RTN","ECU1RPC",22,0)
 ;
"RTN","ECU1RPC",23,0)
 ;--kill temporary file
"RTN","ECU1RPC",24,0)
 K ^TMP($J,"COLS")
"RTN","ECU1RPC",25,0)
 N PIECENUM,NUMCOLS
"RTN","ECU1RPC",26,0)
 ;
"RTN","ECU1RPC",27,0)
 ; --Set up column header order
"RTN","ECU1RPC",28,0)
 S NUMCOLS=$L(ECDATA,U)
"RTN","ECU1RPC",29,0)
 ;
"RTN","ECU1RPC",30,0)
 ; --Remove first piece "COLHEADERS" from colum header string--
"RTN","ECU1RPC",31,0)
 S ECDATA=$P(ECDATA,U,2,NUMCOLS)
"RTN","ECU1RPC",32,0)
 S NUMCOLS=$L(ECDATA,U)
"RTN","ECU1RPC",33,0)
 ;
"RTN","ECU1RPC",34,0)
 ; --Spin through each piece in string and assign 'piece' value 
"RTN","ECU1RPC",35,0)
 F PIECENUM=1:1 Q:PIECENUM>NUMCOLS  D
"RTN","ECU1RPC",36,0)
 . S DATA=$P(ECDATA,U,PIECENUM)
"RTN","ECU1RPC",37,0)
 . I DATA["Record Num" S ECRECPC=PIECENUM Q
"RTN","ECU1RPC",38,0)
 . I DATA["Location" S ECSTAPC=PIECENUM Q
"RTN","ECU1RPC",39,0)
 . I DATA["SSN" S ECSSNPC=PIECENUM Q
"RTN","ECU1RPC",40,0)
 . I DATA["Pat LName" S ECPATLPC=PIECENUM Q
"RTN","ECU1RPC",41,0)
 . I DATA["Pat FName" S ECPATFPC=PIECENUM Q
"RTN","ECU1RPC",42,0)
 . I DATA["Unit Name" S ECDSSPC=PIECENUM Q
"RTN","ECU1RPC",43,0)
 . I DATA["DSS Department" S ECDCMPC=PIECENUM Q  ;139 Updated column header name
"RTN","ECU1RPC",44,0)
 . I DATA["Unit IEN" S ECUNITPC=PIECENUM Q
"RTN","ECU1RPC",45,0)
 . I DATA["Proc" S ECPROCPC=PIECENUM Q
"RTN","ECU1RPC",46,0)
 . I DATA["Volume" S ECVOLPC=PIECENUM Q
"RTN","ECU1RPC",47,0)
 . I DATA["Ordering Sect" S ECOSPC=PIECENUM Q
"RTN","ECU1RPC",48,0)
 . I DATA["Prov 1" S ECPRV1PC=PIECENUM Q  ;131
"RTN","ECU1RPC",49,0)
 . I DATA["Prov 2" S ECPRV2PC=PIECENUM Q  ;131
"RTN","ECU1RPC",50,0)
 . I DATA["Prov 3" S ECPRV3PC=PIECENUM Q  ;131
"RTN","ECU1RPC",51,0)
 . I DATA["Prov 4" S ECPRV4PC=PIECENUM Q  ;131
"RTN","ECU1RPC",52,0)
 . I DATA["Prov 5" S ECPRV5PC=PIECENUM Q  ;131
"RTN","ECU1RPC",53,0)
 . I DATA["Prov 6" S ECPRV6PC=PIECENUM Q  ;131
"RTN","ECU1RPC",54,0)
 . I DATA["Prov 7" S ECPRV7PC=PIECENUM Q  ;131
"RTN","ECU1RPC",55,0)
 . I DATA["Date/Time" S ECENCPC=PIECENUM Q
"RTN","ECU1RPC",56,0)
 . I DATA["Category" S ECCATPC=PIECENUM Q
"RTN","ECU1RPC",57,0)
 . I DATA["Diag" S ECDXPC=PIECENUM Q
"RTN","ECU1RPC",58,0)
 . I DATA["Assoc Clin Name" S ECCLNNPC=PIECENUM Q  ;131
"RTN","ECU1RPC",59,0)
 . I DATA["Assoc Clin IEN" S ECCLNIPC=PIECENUM Q  ;131
"RTN","ECU1RPC",60,0)
 . I DATA["Mod 1" S ECMOD1PC=PIECENUM Q  ;131
"RTN","ECU1RPC",61,0)
 . I DATA["Mod 2" S ECMOD2PC=PIECENUM Q  ;131
"RTN","ECU1RPC",62,0)
 . I DATA["Mod 3" S ECMOD3PC=PIECENUM Q  ;131
"RTN","ECU1RPC",63,0)
 . I DATA["Mod 4" S ECMOD4PC=PIECENUM Q  ;131
"RTN","ECU1RPC",64,0)
 . I DATA["Mod 5" S ECMOD5PC=PIECENUM Q  ;131
"RTN","ECU1RPC",65,0)
 . I DATA["Agent" S ECAOPC=PIECENUM Q  ;131
"RTN","ECU1RPC",66,0)
 . I DATA["Ion" S ECIRPC=PIECENUM Q  ;131
"RTN","ECU1RPC",67,0)
 . I DATA["Service" S ECSCPC=PIECENUM Q  ;131
"RTN","ECU1RPC",68,0)
 . I DATA["SW A" S ECSWAPC=PIECENUM Q  ;131
"RTN","ECU1RPC",69,0)
 . I DATA["Mil Sexual" S ECMSTPC=PIECENUM Q  ;131
"RTN","ECU1RPC",70,0)
 . I DATA["Head" S ECHNCPC=PIECENUM Q  ;131
"RTN","ECU1RPC",71,0)
 . I DATA["Combat" S ECCVPC=PIECENUM Q  ;131
"RTN","ECU1RPC",72,0)
 . I DATA["SHAD" S ECSHADPC=PIECENUM Q  ;131
"RTN","ECU1RPC",73,0)
 . I DATA["Camp" S ECCLPC=PIECENUM Q  ;131
"RTN","ECU1RPC",74,0)
 . ;
"RTN","ECU1RPC",75,0)
 . I DATA["Pat Stat" S ECPSTATV=+DATA Q
"RTN","ECU1RPC",76,0)
 . I DATA["Override Deceased" S ECDECPAT=+DATA Q
"RTN","ECU1RPC",77,0)
 . I DATA["Override Duplicate" S ECFILDUP=+DATA
"RTN","ECU1RPC",78,0)
 ; 
"RTN","ECU1RPC",79,0)
 ;--Move column header piece numbers into Temp file ^TMP($J,"COLS")
"RTN","ECU1RPC",80,0)
 ;   for future reference
"RTN","ECU1RPC",81,0)
 ;
"RTN","ECU1RPC",82,0)
 K ^TMP($J,"COLS")
"RTN","ECU1RPC",83,0)
 S ^TMP($J,"COLS","ECRECPC")=ECRECPC
"RTN","ECU1RPC",84,0)
 S ^TMP($J,"COLS","ECSTAPC")=ECSTAPC
"RTN","ECU1RPC",85,0)
 S ^TMP($J,"COLS","ECSSNPC")=ECSSNPC
"RTN","ECU1RPC",86,0)
 S ^TMP($J,"COLS","ECPATLPC")=ECPATLPC
"RTN","ECU1RPC",87,0)
 S ^TMP($J,"COLS","ECPATFPC")=ECPATFPC
"RTN","ECU1RPC",88,0)
 S ^TMP($J,"COLS","ECDSSPC")=ECDSSPC
"RTN","ECU1RPC",89,0)
 S ^TMP($J,"COLS","ECDCMPC")=ECDCMPC
"RTN","ECU1RPC",90,0)
 S ^TMP($J,"COLS","ECUNITPC")=ECUNITPC
"RTN","ECU1RPC",91,0)
 S ^TMP($J,"COLS","ECPROCPC")=ECPROCPC
"RTN","ECU1RPC",92,0)
 S ^TMP($J,"COLS","ECVOLPC")=ECVOLPC
"RTN","ECU1RPC",93,0)
 S ^TMP($J,"COLS","ECOSPC")=ECOSPC
"RTN","ECU1RPC",94,0)
 S ^TMP($J,"COLS","ECPRV1PC")=ECPRV1PC ;131
"RTN","ECU1RPC",95,0)
 S ^TMP($J,"COLS","ECENCPC")=ECENCPC
"RTN","ECU1RPC",96,0)
 S ^TMP($J,"COLS","ECCATPC")=ECCATPC
"RTN","ECU1RPC",97,0)
 S ^TMP($J,"COLS","ECDXPC")=ECDXPC
"RTN","ECU1RPC",98,0)
 S ^TMP($J,"COLS","ECCLNNPC")=ECCLNNPC ;131
"RTN","ECU1RPC",99,0)
 ;131 New entries added here
"RTN","ECU1RPC",100,0)
 S ^TMP($J,"COLS","ECCLNIPC")=ECCLNIPC
"RTN","ECU1RPC",101,0)
 S ^TMP($J,"COLS","ECMOD1PC")=ECMOD1PC
"RTN","ECU1RPC",102,0)
 S ^TMP($J,"COLS","ECMOD2PC")=ECMOD2PC
"RTN","ECU1RPC",103,0)
 S ^TMP($J,"COLS","ECMOD3PC")=ECMOD3PC
"RTN","ECU1RPC",104,0)
 S ^TMP($J,"COLS","ECMOD4PC")=ECMOD4PC
"RTN","ECU1RPC",105,0)
 S ^TMP($J,"COLS","ECMOD5PC")=ECMOD5PC
"RTN","ECU1RPC",106,0)
 S ^TMP($J,"COLS","ECAOPC")=ECAOPC
"RTN","ECU1RPC",107,0)
 S ^TMP($J,"COLS","ECIRPC")=ECIRPC
"RTN","ECU1RPC",108,0)
 S ^TMP($J,"COLS","ECSCPC")=ECSCPC
"RTN","ECU1RPC",109,0)
 S ^TMP($J,"COLS","ECSWAPC")=ECSWAPC
"RTN","ECU1RPC",110,0)
 S ^TMP($J,"COLS","ECMSTPC")=ECMSTPC
"RTN","ECU1RPC",111,0)
 S ^TMP($J,"COLS","ECHNCPC")=ECHNCPC
"RTN","ECU1RPC",112,0)
 S ^TMP($J,"COLS","ECCVPC")=ECCVPC
"RTN","ECU1RPC",113,0)
 S ^TMP($J,"COLS","ECSHADPC")=ECSHADPC
"RTN","ECU1RPC",114,0)
 S ^TMP($J,"COLS","ECCLPC")=ECCLPC
"RTN","ECU1RPC",115,0)
 S ^TMP($J,"COLS","ECPRV2PC")=ECPRV2PC
"RTN","ECU1RPC",116,0)
 S ^TMP($J,"COLS","ECPRV3PC")=ECPRV3PC
"RTN","ECU1RPC",117,0)
 S ^TMP($J,"COLS","ECPRV4PC")=ECPRV4PC
"RTN","ECU1RPC",118,0)
 S ^TMP($J,"COLS","ECPRV5PC")=ECPRV5PC
"RTN","ECU1RPC",119,0)
 S ^TMP($J,"COLS","ECPRV6PC")=ECPRV6PC
"RTN","ECU1RPC",120,0)
 S ^TMP($J,"COLS","ECPRV7PC")=ECPRV7PC
"RTN","ECU1RPC",121,0)
 S ^TMP($J,"COLS","ECPSTATV")=ECPSTATV
"RTN","ECU1RPC",122,0)
 S ^TMP($J,"COLS","ECDECPAT")=ECDECPAT
"RTN","ECU1RPC",123,0)
 S ^TMP($J,"COLS","ECFILDUP")=ECFILDUP
"RTN","ECU1RPC",124,0)
 ;
"RTN","ECU1RPC",125,0)
 Q
"RTN","ECU1RPC",126,0)
 ;
"RTN","ECU1RPC",127,0)
GETDATA(ECDATA) ;
"RTN","ECU1RPC",128,0)
 ;
"RTN","ECU1RPC",129,0)
 N NUM ;131
"RTN","ECU1RPC",130,0)
 ;--Get data piece numbers and uploaded data values
"RTN","ECU1RPC",131,0)
 S ECRECPC=$G(^TMP($J,"COLS","ECRECPC"))
"RTN","ECU1RPC",132,0)
 S ECRECV=$P(ECDATA,U,ECRECPC)
"RTN","ECU1RPC",133,0)
 ;
"RTN","ECU1RPC",134,0)
 S ECSTAPC=$G(^TMP($J,"COLS","ECSTAPC"))
"RTN","ECU1RPC",135,0)
 S ECSTAV=$P(ECDATA,U,ECSTAPC)
"RTN","ECU1RPC",136,0)
 ;
"RTN","ECU1RPC",137,0)
 S ECSSNPC=$G(^TMP($J,"COLS","ECSSNPC"))
"RTN","ECU1RPC",138,0)
 I ECSSNPC S ECSSNV=$P(ECDATA,U,ECSSNPC)
"RTN","ECU1RPC",139,0)
 ;
"RTN","ECU1RPC",140,0)
 S ECPATLPC=$G(^TMP($J,"COLS","ECPATLPC"))
"RTN","ECU1RPC",141,0)
 S ECPATLV=$$UP^XLFSTR($P(ECDATA,U,ECPATLPC)) ;131 Convert to upper case
"RTN","ECU1RPC",142,0)
 ;
"RTN","ECU1RPC",143,0)
 S ECPATFPC=$G(^TMP($J,"COLS","ECPATFPC"))
"RTN","ECU1RPC",144,0)
 S ECPATFV=$$UP^XLFSTR($P(ECDATA,U,ECPATFPC)) ;131 Convert to upper case
"RTN","ECU1RPC",145,0)
 ; --concatenate patient name into one string, comma separated
"RTN","ECU1RPC",146,0)
 S ECPATV=ECPATLV_","_ECPATFV
"RTN","ECU1RPC",147,0)
 ;
"RTN","ECU1RPC",148,0)
 S ECDSSPC=$G(^TMP($J,"COLS","ECDSSPC"))
"RTN","ECU1RPC",149,0)
 S ECDSSV=$P(ECDATA,U,ECDSSPC)
"RTN","ECU1RPC",150,0)
 ;
"RTN","ECU1RPC",151,0)
 S ECDCMPC=$G(^TMP($J,"COLS","ECDCMPC"))
"RTN","ECU1RPC",152,0)
 S ECDCMV=$P(ECDATA,U,ECDCMPC)
"RTN","ECU1RPC",153,0)
 ;
"RTN","ECU1RPC",154,0)
 S ECUNITPC=$G(^TMP($J,"COLS","ECUNITPC"))
"RTN","ECU1RPC",155,0)
 S ECUNITV=$P(ECDATA,U,ECUNITPC)
"RTN","ECU1RPC",156,0)
 ;
"RTN","ECU1RPC",157,0)
 S ECPROCPC=$G(^TMP($J,"COLS","ECPROCPC"))
"RTN","ECU1RPC",158,0)
 S ECPROCV=$P(ECDATA,U,ECPROCPC)
"RTN","ECU1RPC",159,0)
 ;
"RTN","ECU1RPC",160,0)
 S ECVOLPC=$G(^TMP($J,"COLS","ECVOLPC"))
"RTN","ECU1RPC",161,0)
 S ECVOLV=$P(ECDATA,U,ECVOLPC)
"RTN","ECU1RPC",162,0)
 ;
"RTN","ECU1RPC",163,0)
 S ECOSPC=$G(^TMP($J,"COLS","ECOSPC"))
"RTN","ECU1RPC",164,0)
 S ECOSV=$P(ECDATA,U,ECOSPC)
"RTN","ECU1RPC",165,0)
 ;Get all the provider values
"RTN","ECU1RPC",166,0)
 ;
"RTN","ECU1RPC",167,0)
 F NUM=1:1:7 S @("ECPRV"_NUM_"V")=$$UP^XLFSTR($P(ECDATA,U,$G(^TMP($J,"COLS",("ECPRV"_NUM_"PC"))))),@("ECPRV"_NUM_"PC")=$G(^TMP($J,"COLS",("ECPRV"_NUM_"PC"))) ;131
"RTN","ECU1RPC",168,0)
 ;
"RTN","ECU1RPC",169,0)
 S ECENCPC=$G(^TMP($J,"COLS","ECENCPC"))
"RTN","ECU1RPC",170,0)
 S ECENCV=$P(ECDATA,U,ECENCPC),ECENCV=$TR(ECENCV," ","")
"RTN","ECU1RPC",171,0)
 ;
"RTN","ECU1RPC",172,0)
 S ECCATPC=$G(^TMP($J,"COLS","ECCATPC"))
"RTN","ECU1RPC",173,0)
 S ECCATV=$P(ECDATA,U,ECCATPC)
"RTN","ECU1RPC",174,0)
 ;
"RTN","ECU1RPC",175,0)
 S ECDXPC=$G(^TMP($J,"COLS","ECDXPC"))
"RTN","ECU1RPC",176,0)
 S ECDXV=$P(ECDATA,U,ECDXPC)
"RTN","ECU1RPC",177,0)
 ;
"RTN","ECU1RPC",178,0)
 S ECCLNNPC=$G(^TMP($J,"COLS","ECCLNNPC")) ;131
"RTN","ECU1RPC",179,0)
 S ECCLNNV=$P(ECDATA,U,ECCLNNPC) ;131
"RTN","ECU1RPC",180,0)
 S ECCLNIV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCLNIPC"))),ECCLNIPC=$G(^TMP($J,"COLS","ECCLNIPC")) ;131
"RTN","ECU1RPC",181,0)
 ;
"RTN","ECU1RPC",182,0)
 ;Get all CPT Mod values
"RTN","ECU1RPC",183,0)
 F NUM=1:1:5 S @("ECMOD"_NUM_"V")=$$UP^XLFSTR($P(ECDATA,U,$G(^TMP($J,"COLS",("ECMOD"_NUM_"PC"))))),@("ECMOD"_NUM_"PC")=$G(^TMP($J,"COLS",("ECMOD"_NUM_"PC"))) ;131
"RTN","ECU1RPC",184,0)
 ;
"RTN","ECU1RPC",185,0)
 ;131, all patient eligibilities added in this section
"RTN","ECU1RPC",186,0)
 S ECAOV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECAOPC"))),ECAOPC=$G(^TMP($J,"COLS","ECAOPC"))
"RTN","ECU1RPC",187,0)
 S ECIRV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECIRPC"))),ECIRPC=$G(^TMP($J,"COLS","ECIRPC"))
"RTN","ECU1RPC",188,0)
 S ECSCV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSCPC"))),ECSCPC=$G(^TMP($J,"COLS","ECSCPC"))
"RTN","ECU1RPC",189,0)
 S ECSWAV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSWAPC"))),ECSWAPC=$G(^TMP($J,"COLS","ECSWAPC"))
"RTN","ECU1RPC",190,0)
 S ECMSTV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECMSTPC"))),ECMSTPC=$G(^TMP($J,"COLS","ECMSTPC"))
"RTN","ECU1RPC",191,0)
 S ECHNCV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECHNCPC"))),ECHNCPC=$G(^TMP($J,"COLS","ECHNCPC"))
"RTN","ECU1RPC",192,0)
 S ECCVV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCVPC"))),ECCVPC=$G(^TMP($J,"COLS","ECCVPC"))
"RTN","ECU1RPC",193,0)
 S ECSHADV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECSHADPC"))),ECSHADPC=$G(^TMP($J,"COLS","ECSHADPC"))
"RTN","ECU1RPC",194,0)
 S ECCLV=$P(ECDATA,U,$G(^TMP($J,"COLS","ECCLPC"))),ECCLPC=$G(^TMP($J,"COLS","ECCLPC"))
"RTN","ECU1RPC",195,0)
 ;
"RTN","ECU1RPC",196,0)
 S ECPSTATV=$G(^TMP($J,"COLS","ECPSTATV"))
"RTN","ECU1RPC",197,0)
 ;
"RTN","ECU1RPC",198,0)
 S ECDECPAT=$G(^TMP($J,"COLS","ECDECPAT"))
"RTN","ECU1RPC",199,0)
 ;
"RTN","ECU1RPC",200,0)
 S ECFILDUP=$G(^TMP($J,"COLS","ECFILDUP"))
"RTN","ECU1RPC",201,0)
 ;
"RTN","ECU1RPC",202,0)
END Q
"RTN","ECUERPC")
0^18^B78089602^B63459075
"RTN","ECUERPC",1,0)
ECUERPC ;ALB/JAM - Event Capture Data Entry Broker Utilities ;1/25/18  12:38
"RTN","ECUERPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,46,47,59,72,95,114,126,129,131,139**;8 May 96;Build 7
"RTN","ECUERPC",3,0)
 ;
"RTN","ECUERPC",4,0)
 ; Reference to $$SINFO^ICDEX supported by ICR #5747
"RTN","ECUERPC",5,0)
 ; Reference to $$ICDDX^ICDEX supported by ICR5747
"RTN","ECUERPC",6,0)
 ;
"RTN","ECUERPC",7,0)
USRUNT(RESULTS,ECARY) ;
"RTN","ECUERPC",8,0)
 ;This broker call returns an array of DSS units for a user & location
"RTN","ECUERPC",9,0)
 ;        RPC: EC GETUSRDSSUNIT
"RTN","ECUERPC",10,0)
 ;INPUTS     ECARY  - Contains the following delimited elements
"RTN","ECUERPC",11,0)
 ;            1. ECL      - Location IEN (if define gives User's DSS 
"RTN","ECUERPC",12,0)
 ;                          units for a location)
"RTN","ECUERPC",13,0)
 ;            2. ECDUZ    - New Person IEN (if define gives list of 
"RTN","ECUERPC",14,0)
 ;                          DSS Units available to user)
"RTN","ECUERPC",15,0)
 ;            3. ECSUMUSR - Indicates which report is requesting this
"RTN","ECUERPC",16,0)
 ;                          list. (optional)
"RTN","ECUERPC",17,0)
 ;            4. ECDUST   - Indicates DSS unit status requested (A)ctive
"RTN","ECUERPC",18,0)
 ;                          (I)nactive or (B)oth. (optional)
"RTN","ECUERPC",19,0)
 ;
"RTN","ECUERPC",20,0)
 ;OUTPUTS     RESULTS - Array of DSS Units. Data pieces as follows:-
"RTN","ECUERPC",21,0)
 ;            PIECE - Description
"RTN","ECUERPC",22,0)
 ;              1     IEN of file 724
"RTN","ECUERPC",23,0)
 ;              2     Name of DSS Unit
"RTN","ECUERPC",24,0)
 ;              3     Send to PCE Flag
"RTN","ECUERPC",25,0)
 ;              4     Data Entry Date/Time Default
"RTN","ECUERPC",26,0)
 N ECL,ECDUZ,CNT,STR,DPT,IEN,ECSUMUSR,ECDUST ;139
"RTN","ECUERPC",27,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",28,0)
 S ECL=$P(ECARY,U),ECDUZ=$P(ECARY,U,2) I ECL="",ECDUZ="" Q
"RTN","ECUERPC",29,0)
 S ECSUMUSR=$P(ECARY,U,3),ECDUST=$P(ECARY,U,4) S:ECDUST="" ECDUST="B" ;139
"RTN","ECUERPC",30,0)
 K ^TMP($J,"ECUSRUNT") S (DPT,CNT)=0
"RTN","ECUERPC",31,0)
 I ECL'="",ECDUZ="" S ECDUZ=$G(DUZ,U) I ECDUZ="" Q
"RTN","ECUERPC",32,0)
 I $G(ECSUMUSR)="ECSUM" D ECSUM S RESULTS=$NA(^TMP($J,"ECUSRUNT")) Q  ;139 Add special branch for the ECSUM report
"RTN","ECUERPC",33,0)
 I $D(^XUSEC("ECALLU",ECDUZ)) S DPT="" D
"RTN","ECUERPC",34,0)
 .I ECL="" S ^TMP($J,"ECUSRUNT",CNT+1)="ALL^ALL" Q
"RTN","ECUERPC",35,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",36,0)
 .F  S DPT=$O(^ECD("B",DPT))  Q:DPT=""  S IEN=0 D
"RTN","ECUERPC",37,0)
 ..F  S IEN=$O(^ECD("B",DPT,IEN)) Q:'IEN  D UNTCHK
"RTN","ECUERPC",38,0)
 E  D
"RTN","ECUERPC",39,0)
 .I ECL="ALL" S ECL=""
"RTN","ECUERPC",40,0)
 .F  S DPT=$O(^VA(200,ECDUZ,"EC",DPT)) Q:'DPT  S IEN=DPT D UNTCHK
"RTN","ECUERPC",41,0)
 S RESULTS=$NA(^TMP($J,"ECUSRUNT"))
"RTN","ECUERPC",42,0)
 Q
"RTN","ECUERPC",43,0)
UNTCHK ;Check if DSS unit exist as event code screen and if active
"RTN","ECUERPC",44,0)
 N DSSF,DFD
"RTN","ECUERPC",45,0)
 ;I '$D(^ECJ("AP",ECL,IEN))!($P($G(^ECD(IEN,0)),U,6)) Q
"RTN","ECUERPC",46,0)
 I ECL'="",'$D(^ECJ("AP",ECL,IEN)) Q
"RTN","ECUERPC",47,0)
 I ($P($G(^ECD(IEN,0)),U,6))!('$P($G(^ECD(IEN,0)),U,8)) Q
"RTN","ECUERPC",48,0)
 ;Check if event code screens associated with DSS unit are active
"RTN","ECUERPC",49,0)
 I ECL'="",'$$ECSCHK(ECL,IEN) Q
"RTN","ECUERPC",50,0)
 S DSSF=$P(^ECD(IEN,0),"^",14) S:DSSF="" DSSF="N"
"RTN","ECUERPC",51,0)
 S DFD=$S($P(^ECD(IEN,0),"^",12)="N":"N",1:"X") ; added by VMP
"RTN","ECUERPC",52,0)
 S CNT=CNT+1,STR=IEN_"^"_$P(^ECD(IEN,0),"^")_U_DSSF_"^"_DFD
"RTN","ECUERPC",53,0)
 S ^TMP($J,"ECUSRUNT",CNT)=STR
"RTN","ECUERPC",54,0)
 Q
"RTN","ECUERPC",55,0)
ECSCHK(ECL,ECIEN) ;Check if any event code screens associated with DSS unit are active; EC*129
"RTN","ECUERPC",56,0)
 N ECAT,ECPRX,ECS,ECNODE,ECFLG
"RTN","ECUERPC",57,0)
 S ECAT="",ECFLG=0
"RTN","ECUERPC",58,0)
 F  S ECAT=$O(^ECJ("AP",ECL,ECIEN,ECAT)) Q:ECAT=""  D  Q:ECFLG
"RTN","ECUERPC",59,0)
 .S ECPRX="" F  S ECPRX=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX)) Q:ECPRX=""  D  Q:ECFLG
"RTN","ECUERPC",60,0)
 ..S ECS=0 F  S ECS=$O(^ECJ("AP",ECL,ECIEN,ECAT,ECPRX,ECS)) Q:'ECS  D  Q:ECFLG
"RTN","ECUERPC",61,0)
 ...S ECNODE=$G(^ECJ(ECS,0)) I $P(ECNODE,"^",2)="" S ECFLG=1
"RTN","ECUERPC",62,0)
 Q ECFLG
"RTN","ECUERPC",63,0)
 ;
"RTN","ECUERPC",64,0)
ECSUM ;139 Section added to allow for sorting DSS units by status
"RTN","ECUERPC",65,0)
 N DSSIEN,DSSNAME,NODE,STAT,DSSF,DFO,STR
"RTN","ECUERPC",66,0)
 S DSSNAME="" F  S DSSNAME=$O(^ECD("B",DSSNAME)) Q:DSSNAME=""  S DSSIEN=0 F  S DSSIEN=$O(^ECD("B",DSSNAME,DSSIEN)) Q:'+DSSIEN  D
"RTN","ECUERPC",67,0)
 .S NODE=$G(^ECD(DSSIEN,0)) Q:NODE=""
"RTN","ECUERPC",68,0)
 .I '$P(NODE,U,8) Q  ;DSS Unit not for use in Event Capture
"RTN","ECUERPC",69,0)
 .S STAT=$S($P(NODE,U,6):"I",1:"A") ;DSS Unit status
"RTN","ECUERPC",70,0)
 .I ECDUST'="B",STAT'=ECDUST Q  ;If not getting both active and inactive units, quit if unit status isn't what we're looking for
"RTN","ECUERPC",71,0)
 .I ECL'="ALL",'$D(^ECJ("AP",ECL,DSSIEN)) Q  ;For all locations, no need to check for event code screens. For single location, DSS unit must have at least one event code screen
"RTN","ECUERPC",72,0)
 .S DSSF=$P(NODE,U,14) S:DSSF="" DSSF="N" ;Send to PCE setting
"RTN","ECUERPC",73,0)
 .S DFD=$S($P(NODE,U,12)="N":"N",1:"X") ;Unit's default date/time setting
"RTN","ECUERPC",74,0)
 .S CNT=CNT+1,STR=DSSIEN_U_$P(NODE,U)_U_DSSF_U_DFD
"RTN","ECUERPC",75,0)
 .S ^TMP($J,"ECUSRUNT",CNT)=STR
"RTN","ECUERPC",76,0)
 Q
"RTN","ECUERPC",77,0)
 ;
"RTN","ECUERPC",78,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUERPC",79,0)
 ;This broker entry point returns an array of categories for an Event 
"RTN","ECUERPC",80,0)
 ;Code screen based on location and DSS unit.
"RTN","ECUERPC",81,0)
 ;        RPC: EC GETECSCATS
"RTN","ECUERPC",82,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",83,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",84,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",85,0)
 ;            ECCSTA-Active or inactive category
"RTN","ECUERPC",86,0)
 ;                   A-ctive (default), I-nactive, B-oth
"RTN","ECUERPC",87,0)
 ;
"RTN","ECUERPC",88,0)
 ;OUTPUTS     RESULTS - Array of categories. Data pieces as follows:-
"RTN","ECUERPC",89,0)
 ;            PIECE - Description
"RTN","ECUERPC",90,0)
 ;              1 - Category IEN
"RTN","ECUERPC",91,0)
 ;              2 - Category description
"RTN","ECUERPC",92,0)
 ;
"RTN","ECUERPC",93,0)
 N ECL,ECD,ECC,CNT,DATA,ECCSTA
"RTN","ECUERPC",94,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",95,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2) I (ECL="")!(ECD="") Q
"RTN","ECUERPC",96,0)
 S ECCSTA=$P(ECARY,U,3)
"RTN","ECUERPC",97,0)
 K ^TMP($J,"ECSCATS")
"RTN","ECUERPC",98,0)
 D CATS^ECHECK1
"RTN","ECUERPC",99,0)
 M ^TMP($J,"ECSCATS")=ECC
"RTN","ECUERPC",100,0)
 S RESULTS=$NA(^TMP($J,"ECSCATS"))
"RTN","ECUERPC",101,0)
 Q
"RTN","ECUERPC",102,0)
PROC(RESULTS,ECARY) ;
"RTN","ECUERPC",103,0)
 ;This broker entry point returns an array of procedures for an Event 
"RTN","ECUERPC",104,0)
 ;Code screen (file #720.3) based on location, DSS unit, and Category
"RTN","ECUERPC",105,0)
 ;        RPC: EC GETECSPROCS
"RTN","ECUERPC",106,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",107,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",108,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",109,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",110,0)
 ;            ECDT - Procedure Date
"RTN","ECUERPC",111,0)
 ;
"RTN","ECUERPC",112,0)
 ;OUTPUTS     RESULTS - Array of procedures. Data pieces as follows:-
"RTN","ECUERPC",113,0)
 ;            PIECE - Description
"RTN","ECUERPC",114,0)
 ;              1  - EC National Number SPACE Procedure Name SPACE
"RTN","ECUERPC",115,0)
 ;                - [Synonym]
"RTN","ECUERPC",116,0)
 ;              2  - Procedure Code
"RTN","ECUERPC",117,0)
 ;              3  - CPT Code
"RTN","ECUERPC",118,0)
 ;              4  - Default volume (1 if no default volume)
"RTN","ECUERPC",119,0)
 ;              5  - Event code screen IEN
"RTN","ECUERPC",120,0)
 ;
"RTN","ECUERPC",121,0)
 N ECL,ECD,ECC,CNT,DATA,STR,ECCPT,PX,NAME,NUM ;126
"RTN","ECUERPC",122,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",123,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3)
"RTN","ECUERPC",124,0)
 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",125,0)
 S:$P($G(^ECD(ECD,0)),U,11)=0 ECC="" S:ECC="" ECC=0 ;131
"RTN","ECUERPC",126,0)
 S ECDT=$P(ECARY,U,4)
"RTN","ECUERPC",127,0)
 K ^TMP($J,"ECPRO")
"RTN","ECUERPC",128,0)
 D PROS^ECHECK1
"RTN","ECUERPC",129,0)
 S CNT=1,NAME="" F  S NAME=$O(^TMP("ECPRO",$J,"N2",NAME)) Q:NAME=""  S NUM=$O(^TMP("ECPRO",$J,"N2",NAME,0)) D  ;126
"RTN","ECUERPC",130,0)
 .S DATA=^TMP("ECPRO",$J,NUM),PX=$P(DATA,U) ;126
"RTN","ECUERPC",131,0)
 .S ECCPT=$S(PX["EC":$P($G(^EC(725,+PX,0)),"^",5),1:+PX)
"RTN","ECUERPC",132,0)
 .S STR=$P(DATA,U,5)_" "_$P(DATA,U,4)_" ["_$P(DATA,U,3)_"]"_U_PX
"RTN","ECUERPC",133,0)
 .S STR=STR_U_ECCPT_U_$S($P(DATA,U,6):+$P(DATA,U,6),1:1)_U_$P(DATA,U,2)
"RTN","ECUERPC",134,0)
 .S ^TMP($J,"ECPRO",CNT)=STR,CNT=CNT+1 ;126
"RTN","ECUERPC",135,0)
 S RESULTS=$NA(^TMP($J,"ECPRO"))
"RTN","ECUERPC",136,0)
 K ^TMP("ECPRO",$J)
"RTN","ECUERPC",137,0)
 Q
"RTN","ECUERPC",138,0)
ECPXMOD(RESULTS,ECARY) ;
"RTN","ECUERPC",139,0)
 ;Broker call returns modifier entries for a CPT Procedure
"RTN","ECUERPC",140,0)
 ;        RPC: EC GETPXMODIFIER
"RTN","ECUERPC",141,0)
 ;INPUTS   ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",142,0)
 ;          ECCPT - CPT code ien (file #81)
"RTN","ECUERPC",143,0)
 ;          ECDT  - Procedure date and time (fileman format)
"RTN","ECUERPC",144,0)
 ;
"RTN","ECUERPC",145,0)
 ;OUTPUTS  RESULTS - Array of procedure modifiers
"RTN","ECUERPC",146,0)
 ;          2-character modifier^modifer name^modifier ien #81.3
"RTN","ECUERPC",147,0)
 ;
"RTN","ECUERPC",148,0)
 N CNT,SUB,ECCPT,ECDT,DATA,ECMOD
"RTN","ECUERPC",149,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",150,0)
 S ECCPT=$P(ECARY,U),ECDT=$P(ECARY,U,2) I ECDT="" D NOW^%DTC S ECDT=%
"RTN","ECUERPC",151,0)
 I ECCPT="" Q
"RTN","ECUERPC",152,0)
 K ^TMP($J,"ECPXMODS") S (SUB,CNT)=0
"RTN","ECUERPC",153,0)
 S DATA=$$CODM^ICPTCOD(ECCPT,"ECMOD","",ECDT) I +DATA<0 Q
"RTN","ECUERPC",154,0)
 F  S SUB=$O(ECMOD(SUB)) Q:SUB=""  I $P(ECMOD(SUB),U,2)'="" D
"RTN","ECUERPC",155,0)
 . I +$$MODP^ICPTMOD(ECCPT,$P(ECMOD(SUB),U,2),"I",ECDT)>0 D
"RTN","ECUERPC",156,0)
 . . S CNT=CNT+1,^TMP($J,"ECPXMODS",CNT)=SUB_U_ECMOD(SUB)
"RTN","ECUERPC",157,0)
 S RESULTS=$NA(^TMP($J,"ECPXMODS"))
"RTN","ECUERPC",158,0)
 Q
"RTN","ECUERPC",159,0)
PRVDER(RESULTS,ECARY) ;
"RTN","ECUERPC",160,0)
 ;remove this rpc before release;JAM 6/4/01
"RTN","ECUERPC",161,0)
 ;This broker entry point returns an array of valid providers
"RTN","ECUERPC",162,0)
 ;        RPC: EC GETPROVIDER
"RTN","ECUERPC",163,0)
 ;INPUTS     ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",164,0)
 ;            ECDT  - Procedure date
"RTN","ECUERPC",165,0)
 ;
"RTN","ECUERPC",166,0)
 ;OUTPUTS     RESULTS - Array of providers. Data pieces as follows:-
"RTN","ECUERPC",167,0)
 ;            PIECE - Description
"RTN","ECUERPC",168,0)
 ;             IEN of file 200^Provider Name^occupation^specialty^
"RTN","ECUERPC",169,0)
 ;             subspecialty
"RTN","ECUERPC",170,0)
 ;
"RTN","ECUERPC",171,0)
 N IEN,CNT,ECUTN,KEY,USR
"RTN","ECUERPC",172,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",173,0)
 S ECDT=$P($G(ECARY),U),ECDT=$S(ECDT="":DT,1:ECDT)
"RTN","ECUERPC",174,0)
 K ^TMP($J,"ECPRVDRS") S CNT=0
"RTN","ECUERPC",175,0)
 F KEY="PROVIDER" S IEN=0 D
"RTN","ECUERPC",176,0)
 .F  S IEN=$O(^XUSEC(KEY,IEN)) Q:'IEN  S USR=$G(^VA(200,IEN,0)) D:USR'=""
"RTN","ECUERPC",177,0)
 ..S ECUTN=$$GET^XUA4A72(IEN,ECDT) I +ECUTN'>0 Q
"RTN","ECUERPC",178,0)
 ..S CNT=CNT+1,^TMP($J,"ECPRVDRS",CNT)=IEN_U_$P(USR,U)_U_$P(ECUTN,2,4)
"RTN","ECUERPC",179,0)
 S RESULTS=$NA(^TMP($J,"ECPRVDRS"))
"RTN","ECUERPC",180,0)
 Q
"RTN","ECUERPC",181,0)
 ;
"RTN","ECUERPC",182,0)
ELIG(RESULTS,ECARY) ;
"RTN","ECUERPC",183,0)
 ;
"RTN","ECUERPC",184,0)
 ;Broker call returns a list of patient eligibilities
"RTN","ECUERPC",185,0)
 ;        RPC: EC GETPATELIG
"RTN","ECUERPC",186,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUERPC",187,0)
 ;          DFN - Patient ien (file #2)
"RTN","ECUERPC",188,0)
 ;
"RTN","ECUERPC",189,0)
 ;OUTPUTS  RESULTS - Array of eligibilities
"RTN","ECUERPC",190,0)
 ;          primary/secondary elig flag^elig ien^elig description
"RTN","ECUERPC",191,0)
 ;
"RTN","ECUERPC",192,0)
 N CNT,SUB,DFN,VAEL
"RTN","ECUERPC",193,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",194,0)
 S DFN=$P(ECARY,U) I DFN="" Q
"RTN","ECUERPC",195,0)
 K ^TMP($J,"ECPATELIG")
"RTN","ECUERPC",196,0)
 D ELIG^VADPT I $G(VAEL(1))="" Q
"RTN","ECUERPC",197,0)
 S ^TMP($J,"ECPATELIG",1)="1^"_VAEL(1),SUB=0,CNT=1
"RTN","ECUERPC",198,0)
 F  S SUB=$O(VAEL(1,SUB)) Q:SUB=""  D
"RTN","ECUERPC",199,0)
 . S CNT=CNT+1,^TMP($J,"ECPATELIG",CNT)="0^"_VAEL(1,SUB)
"RTN","ECUERPC",200,0)
 S RESULTS=$NA(^TMP($J,"ECPATELIG"))
"RTN","ECUERPC",201,0)
 Q
"RTN","ECUERPC",202,0)
PRDEFS(RESULTS,ECARY) ;
"RTN","ECUERPC",203,0)
 ;This broker entry point returns the defaults for procedure data entry
"RTN","ECUERPC",204,0)
 ;        RPC: EC GETPRODEFS
"RTN","ECUERPC",205,0)
 ;INPUTS     ECARY  - Contains the following values separated by "^"
"RTN","ECUERPC",206,0)
 ;            ECL  - Location IEN
"RTN","ECUERPC",207,0)
 ;            ECD  - DSS Unit IEN
"RTN","ECUERPC",208,0)
 ;            ECC  - Category IEN
"RTN","ECUERPC",209,0)
 ;
"RTN","ECUERPC",210,0)
 ;OUTPUTS    RESULTS - Data pieces as follows:-
"RTN","ECUERPC",211,0)
 ;           PIECE - Description
"RTN","ECUERPC",212,0)
 ;             1 - Associated Clinic IEN
"RTN","ECUERPC",213,0)
 ;             2 - Associated Clinic
"RTN","ECUERPC",214,0)
 ;             3 - Medical Specialty IEN
"RTN","ECUERPC",215,0)
 ;             4 - Medical Specialty
"RTN","ECUERPC",216,0)
 ;
"RTN","ECUERPC",217,0)
 N ECL,ECD,ECC,ECP,IEN,ASC,ASCNM,MEDSP,MEDSPNM,ECCH
"RTN","ECUERPC",218,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC",219,0)
 S ECL=$P(ECARY,U),ECD=$P(ECARY,U,2),ECC=$P(ECARY,U,3),ECP=$P(ECARY,U,4)
"RTN","ECUERPC",220,0)
 S:ECC="" ECC=0 I (ECL="")!(ECD="") Q
"RTN","ECUERPC",221,0)
 S (ASCNM,MEDSPNM)="",ECCH=ECL_"-"_ECD_"-"_ECC_"-"_ECP
"RTN","ECUERPC",222,0)
 I '$D(^ECJ("B",ECCH)) Q
"RTN","ECUERPC",223,0)
 S IEN=$O(^ECJ("B",ECCH,0)) I IEN="" Q
"RTN","ECUERPC",224,0)
 S ASC=$P($G(^ECJ(IEN,"PRO")),U,4) I ASC D
"RTN","ECUERPC",225,0)
 .S ASCNM=$$GET1^DIQ(44,ASC,.01,"I")
"RTN","ECUERPC",226,0)
 S MEDSP=$P($G(^ECD(ECD,0)),U,3) I MEDSP D 
"RTN","ECUERPC",227,0)
 .S MEDSPNM=$$GET1^DIQ(723,MEDSP,.01,"I")
"RTN","ECUERPC",228,0)
 S RESULTS=ASC_U_ASCNM_U_MEDSP_U_MEDSPNM
"RTN","ECUERPC",229,0)
 Q
"RTN","ECUERPC",230,0)
PATPROC(RESULTS,ECARY) ;
"RTN","ECUERPC",231,0)
 ;
"RTN","ECUERPC",232,0)
 ;Broker call returns the entries from EVENT CAPTURE PATIENT FILE #721
"RTN","ECUERPC",233,0)
 ;
"RTN","ECUERPC",234,0)
 ;RPC: EC GETPATPROCS
"RTN","ECUERPC",235,0)
 ;
"RTN","ECUERPC",236,0)
 ;INPUTS   ECARY - Contains the following values separated by "^"
"RTN","ECUERPC",237,0)
 ;         ECLOC - Location ien
"RTN","ECUERPC",238,0)
 ;         ECPAT - Patient DFN ien
"RTN","ECUERPC",239,0)
 ;         ECUNT - DSS unit ien
"RTN","ECUERPC",240,0)
 ;         ECSD  - Start Date
"RTN","ECUERPC",241,0)
 ;         ECED  - End Date
"RTN","ECUERPC",242,0)
 ;                                                                         
"RTN","ECUERPC",243,0)
 ;OUTPUTS  RESULTS - Array of Event Capture Patient entries contain
"RTN","ECUERPC",244,0)
 ;          721 IEN^Procedure date/time^Category^Procedure^Volume^
"RTN","ECUERPC",245,0)
 ;          Provider^ordering section^associated clinic^
"RTN","ECUERPC",246,0)
 ;          (ICD Coding system) primary dx code primary dx code description
"RTN","ECUERPC",247,0)
 ;          ^Provider IEN
"RTN","ECUERPC",248,0)
 ;
"RTN","ECUERPC",249,0)
 N IEN,CNT,ECCS,ECV,ECLOC,ECUNT,ECPAT,PX,NODE,DATA,PDT,PDX,PND,PDXD,CAT,ECI
"RTN","ECUERPC",250,0)
 N ORS,PRV,PRO,PROV,ECU
"RTN","ECUERPC",251,0)
 D SETENV^ECUMRPC ;set environment variables for RPC broker
"RTN","ECUERPC",252,0)
 S ECV="ECLOC^ECPAT^ECUNT^ECSD^ECED"
"RTN","ECUERPC",253,0)
 D PARSE(ECV,ECARY) I (ECLOC="")!(ECPAT="")!(ECUNT="") Q
"RTN","ECUERPC",254,0)
 K ^TMP($J,"ECPATPX")
"RTN","ECUERPC",255,0)
 S ECSD=$G(ECSD,DT),ECED=$G(ECED,DT)
"RTN","ECUERPC",256,0)
 S %DT="X" F ECI="ECSD","ECED" S X=@ECI D ^%DT S @ECI=Y
"RTN","ECUERPC",257,0)
 K X,Y
"RTN","ECUERPC",258,0)
 S ECSD=$S(ECSD=-1:DT,1:ECSD)-.0001,ECED=$S(ECED=-1:DT,1:ECED)+.9999
"RTN","ECUERPC",259,0)
 Q:ECED'>ECSD  S PDT=ECSD,CNT=0
"RTN","ECUERPC",260,0)
 F  S PDT=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT)) Q:'PDT!(PDT>ECED)  D
"RTN","ECUERPC",261,0)
 . S IEN=0 F  S IEN=$O(^ECH("ADT",ECLOC,ECPAT,ECUNT,PDT,IEN)) Q:'IEN  D
"RTN","ECUERPC",262,0)
 . . S NODE=$G(^ECH(IEN,0)),PND=$G(^ECH(IEN,"P")),PX=$P(NODE,U,9)
"RTN","ECUERPC",263,0)
 . . Q:NODE=""  S (PRV,CAT,ORS,ASC,PDXD)="",PDX=$P(PND,U,2)
"RTN","ECUERPC",264,0)
 . . I PX["EC" D
"RTN","ECUERPC",265,0)
 . . . S PRO=$G(^EC(725,$P(PX,";"),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUERPC",266,0)
 . . E  S PRO=$$CPT^ICPTCOD($P(PX,";"),PDT) S PX=$P(PRO,U,2)_" "_$P(PRO,U,3)
"RTN","ECUERPC",267,0)
 . . S:$P(NODE,U,8) CAT=$$GET1^DIQ(726,$P(NODE,U,8),.01,"I")
"RTN","ECUERPC",268,0)
 . . K PROV S ECU=$$GETPPRV^ECPRVMUT(IEN,.PROV),PRV=$S(ECU:"UNKNOWN",1:$P(PROV,"^",2)),ECU=$S('ECU:+PROV,1:"")
"RTN","ECUERPC",269,0)
 . . S:$P(NODE,U,12) ORS=$$GET1^DIQ(723,$P(NODE,U,12),.01,"I")
"RTN","ECUERPC",270,0)
 . . S:$P(NODE,U,19) ASC=$$GET1^DIQ(44,$P(NODE,U,19),.01,"I")
"RTN","ECUERPC",271,0)
 . . I PDX D
"RTN","ECUERPC",272,0)
 . . . ; ICD10 Changes
"RTN","ECUERPC",273,0)
 . . . S ECCS=$$SINFO^ICDEX("DIAG",PDT) ; Supported by ICR 5747
"RTN","ECUERPC",274,0)
 . . . S PDXD=$$ICDDX^ICDEX(PDX,PDT,+ECCS,"I") ; Supported by ICR 5747
"RTN","ECUERPC",275,0)
 . . . S ECCS=$P(ECCS,U,2),ECCS=" ("_$P(ECCS,"-",1)_$P(ECCS,"-",2)_")"
"RTN","ECUERPC",276,0)
 . . . S PDXD=$P(PDXD,U,2)_" "_$P(PDXD,U,4)_ECCS
"RTN","ECUERPC",277,0)
 . . S DATA=$P(NODE,U)_U_$$FMTE^XLFDT($P(NODE,U,3),"2F")_U_CAT_U_PX
"RTN","ECUERPC",278,0)
 . . S DATA=DATA_U_$P(NODE,U,10)_U_PRV_U_ORS_U_ASC_U_PDXD_U_ECU
"RTN","ECUERPC",279,0)
 . . S CNT=CNT+1,^TMP($J,"ECPATPX",CNT)=DATA
"RTN","ECUERPC",280,0)
 S RESULTS=$NA(^TMP($J,"ECPATPX"))
"RTN","ECUERPC",281,0)
 Q
"RTN","ECUERPC",282,0)
PARSE(ECV,ECARY) ;Parse Variable
"RTN","ECUERPC",283,0)
 N I
"RTN","ECUERPC",284,0)
 F I=1:1:$L(ECARY,U) S @$P(ECV,U,I)=$P(ECARY,U,I)
"RTN","ECUERPC",285,0)
 Q
"RTN","ECUERPC2")
0^23^B11049596^B10728700
"RTN","ECUERPC2",1,0)
ECUERPC2 ;ALB/JAM;Event Capture Data Entry Broker Utilities ;3/6/18  09:26
"RTN","ECUERPC2",2,0)
 ;;2.0;EVENT CAPTURE;**41,39,50,72,134,139**;8 May 96;Build 7
"RTN","ECUERPC2",3,0)
 ;
"RTN","ECUERPC2",4,0)
ECDOD(RESULTS,ECARY) ;RPC Broker entry point to get a patient's date of death
"RTN","ECUERPC2",5,0)
 ;        RPC: EC DIEDON
"RTN","ECUERPC2",6,0)
 ;INPUTS   ECARY - Contains the following elements as input
"RTN","ECUERPC2",7,0)
 ;          ECDFN - Patient DFN
"RTN","ECUERPC2",8,0)
 ;
"RTN","ECUERPC2",9,0)
 ;OUTPUTS  RESULTS - Fileman Internal Date of Patient date of Death^
"RTN","ECUERPC2",10,0)
 ;                   Message with Patient External Date of Death
"RTN","ECUERPC2",11,0)
 ;
"RTN","ECUERPC2",12,0)
 N ECDFN,DFN,VADM
"RTN","ECUERPC2",13,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC2",14,0)
 S ECDFN=$P(ECARY,U),RESULTS="^"
"RTN","ECUERPC2",15,0)
 I ECDFN="" S RESULTS="0^Patient DFN not defined" Q
"RTN","ECUERPC2",16,0)
 ;NOIS MWV-0603-21781: line below changed by VMP
"RTN","ECUERPC2",17,0)
 S DFN=ECDFN D 2^VADPT I +VADM(6) S RESULTS=$P(VADM(6),U)_"^"_"[PATIENT DIED ON "_$P(VADM(6),U,2)_"]"
"RTN","ECUERPC2",18,0)
 Q
"RTN","ECUERPC2",19,0)
VISINFO(RESULTS,ECARY) ;
"RTN","ECUERPC2",20,0)
 ;
"RTN","ECUERPC2",21,0)
 ;Broker call returns the EC values based on a Visit Number
"RTN","ECUERPC2",22,0)
 ;        RPC: EC GETVISITINFO
"RTN","ECUERPC2",23,0)
 ;INPUTS   ECARY - Contains the following subscripted elements
"RTN","ECUERPC2",24,0)
 ;          ECVSN - Visit Number, IEN in file (#9000010)
"RTN","ECUERPC2",25,0)
 ;
"RTN","ECUERPC2",26,0)
 ;OUTPUTS  RESULTS - Contains the following data:-
"RTN","ECUERPC2",27,0)
 ;        Location IEN^Location Name^DSS Unit IEN^DSS Unit Name^Send to
"RTN","ECUERPC2",28,0)
 ;        PCE^Procedure Date/Time Fileman^Procedure Date/Time Readable^
"RTN","ECUERPC2",29,0)
 ;        Patient DFN
"RTN","ECUERPC2",30,0)
 ;        or, if error encountered
"RTN","ECUERPC2",31,0)
 ;        0^Error Message
"RTN","ECUERPC2",32,0)
 ;
"RTN","ECUERPC2",33,0)
 N ECLOC,ECUNT,NODE,Y,ECPXDT,DA,ECVSN,ECDFN,DSSF,LOC,UNT
"RTN","ECUERPC2",34,0)
 D SETENV^ECUMRPC
"RTN","ECUERPC2",35,0)
 S ECVSN=$P(ECARY,U) I ECVSN="" S RESULTS=0_"^Visit undefined" Q
"RTN","ECUERPC2",36,0)
 K ^TMP($J,"ECVISINFO")
"RTN","ECUERPC2",37,0)
 S DA=$O(^ECH("C",ECVSN,0)) I 'DA D  Q
"RTN","ECUERPC2",38,0)
 . S RESULTS=0_"^Visit not on File"
"RTN","ECUERPC2",39,0)
 S NODE=$G(^ECH(DA,0)) I NODE="" D  Q
"RTN","ECUERPC2",40,0)
 . S RESULTS=0_"No corresponding EC procedures found for Visit"
"RTN","ECUERPC2",41,0)
 S ECLOC=$P(NODE,U,4),ECUNT=$P(NODE,U,7),ECPXDT=$P(NODE,U,3)
"RTN","ECUERPC2",42,0)
 S LOC=$P($G(^DIC(4,ECLOC,0)),U),UNT=$G(^ECD(ECUNT,0)),DSSF=$P(UNT,U,14)
"RTN","ECUERPC2",43,0)
 S UNT=$P(UNT,U) S:DSSF="" DSSF="N"
"RTN","ECUERPC2",44,0)
 S ECDFN=$P(NODE,U,2),Y=ECPXDT X ^DD("DD")
"RTN","ECUERPC2",45,0)
 S RESULTS=ECLOC_U_LOC_U_ECUNT_U_UNT_U_DSSF_U_ECPXDT_U_Y_U_ECDFN
"RTN","ECUERPC2",46,0)
 Q
"RTN","ECUERPC2",47,0)
PATPRV(ECIEN) ;
"RTN","ECUERPC2",48,0)
 ;Returns to broker a patient providers (primary & secondary) entries 
"RTN","ECUERPC2",49,0)
 ;from EVENT CAPTURE PATIENT FILE #721
"RTN","ECUERPC2",50,0)
 ;INPUTS   ECIEN - Event Capture Patient ien
"RTN","ECUERPC2",51,0)
 ;
"RTN","ECUERPC2",52,0)
 ;OUTPUTS  RESULTS - Array of Event Capture Patient file contains
"RTN","ECUERPC2",53,0)
 ;          ^ECH IEN^provider ien^provider description^Primary/Secondary
"RTN","ECUERPC2",54,0)
 ;           code^Primary/Secondary description
"RTN","ECUERPC2",55,0)
 ;
"RTN","ECUERPC2",56,0)
 N ECPRV,ECPROV
"RTN","ECUERPC2",57,0)
 I '$D(^ECH(ECIEN,"PRV")) Q
"RTN","ECUERPC2",58,0)
 K ^TMP($J,"ECPRV")
"RTN","ECUERPC2",59,0)
 S ECPRV=$$GETPRV^ECPRVMUT(ECIEN,.ECPROV) I 'ECPRV D
"RTN","ECUERPC2",60,0)
 .M ^TMP($J,"ECPRV")=ECPROV
"RTN","ECUERPC2",61,0)
 S RESULTS=$NA(^TMP($J,"ECPRV"))
"RTN","ECUERPC2",62,0)
 Q
"RTN","ECUERPC2",63,0)
 ;
"RTN","ECUERPC2",64,0)
ECDEFPRV(RESULTS,ECARY) ;134 Section added
"RTN","ECUERPC2",65,0)
 ;Returns default provider based on user and DSS unit
"RTN","ECUERPC2",66,0)
 ;INPUT    ECARY contains IEN of DSS unit^Procedure date/time
"RTN","ECUERPC2",67,0)
 ;
"RTN","ECUERPC2",68,0)
 ;OUTPUT   RESULTS - IEN^Provider Name if default found
"RTN","ECUERPC2",69,0)
 ;                   -1^ if no default identified
"RTN","ECUERPC2",70,0)
 N DSSIEN,PROCDT,DSSUPCE,PROVIEN
"RTN","ECUERPC2",71,0)
 S RESULTS=-1_"^"
"RTN","ECUERPC2",72,0)
 S DSSIEN=+ECARY Q:'DSSIEN  ;Quit if no DSS unit identified
"RTN","ECUERPC2",73,0)
 S PROCDT=$S($P(ECARY,U,2):$P(ECARY,U,2),1:$$DT^XLFDT) ;if no procedure date/time sent in use today's date
"RTN","ECUERPC2",74,0)
 S DSSUPCE=$P($G(^ECD(DSSIEN,0)),U,14) S:DSSUPCE="" DSSUPCE="N" ;139 Get send to PCE setting, set to 'send no records' if null
"RTN","ECUERPC2",75,0)
 S RESULTS=$$CHK(DUZ) Q:+RESULTS>0  ;Stop if current user is a provider
"RTN","ECUERPC2",76,0)
 D ECDEF^ECUERPC1(.PROVIEN,200) Q:'+PROVIEN  ;Stop if no record in 200 for this user was identified
"RTN","ECUERPC2",77,0)
 S RESULTS=$$CHK(+PROVIEN)
"RTN","ECUERPC2",78,0)
 Q
"RTN","ECUERPC2",79,0)
 ;
"RTN","ECUERPC2",80,0)
CHK(NUM) ;134 Section added to find default provider
"RTN","ECUERPC2",81,0)
 N ECINFO
"RTN","ECUERPC2",82,0)
 S ECINFO=$$GET^XUA4A72(NUM,PROCDT)
"RTN","ECUERPC2",83,0)
 I +ECINFO>0 Q NUM_U_$$GET1^DIQ(200,NUM_",",.01)_U_$P(ECINFO,U,2,4)
"RTN","ECUERPC2",84,0)
 I +ECINFO<0,DSSUPCE="N",$D(^EC(722,"B",NUM)) Q NUM_U_$$GET1^DIQ(200,NUM_",",.01)
"RTN","ECUERPC2",85,0)
 Q -1_"^"
"RTN","ECUMRPC")
0^24^B32856501^B30601632
"RTN","ECUMRPC",1,0)
ECUMRPC ;ALB/JAM;Event Capture Management Broker Utilities ;2/9/18  13:58
"RTN","ECUMRPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,32,33,131,139**;8 May 96;Build 7
"RTN","ECUMRPC",3,0)
ECUSR(RESULTS,ECARY) ;
"RTN","ECUMRPC",4,0)
 ;
"RTN","ECUMRPC",5,0)
 ;This broker entry point returns an array of users with access to a 
"RTN","ECUMRPC",6,0)
 ;DSS unit in file 200.
"RTN","ECUMRPC",7,0)
 ;        RPC: EC GETDSSUNITUSRS
"RTN","ECUMRPC",8,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC",9,0)
 ;               UNT   - DSS unit IEN
"RTN","ECUMRPC",10,0)
 ;
"RTN","ECUMRPC",11,0)
 ;OUTPUTS        RESULTS - The array of users. Data pieces as follows:-
"RTN","ECUMRPC",12,0)
 ;               PIECE - Description
"RTN","ECUMRPC",13,0)
 ;                 1     NAME of user
"RTN","ECUMRPC",14,0)
 ;                 2     DUZ or IEN of file 200
"RTN","ECUMRPC",15,0)
 ;
"RTN","ECUMRPC",16,0)
 N UNT,EDUZ,CNT
"RTN","ECUMRPC",17,0)
 D SETENV
"RTN","ECUMRPC",18,0)
 S UNT=$P(ECARY,U) Q:UNT=""
"RTN","ECUMRPC",19,0)
 K ^TMP($J,"ECUSR") S (EDUZ,CNT)=0
"RTN","ECUMRPC",20,0)
 F  S EDUZ=$O(^VA(200,EDUZ)) Q:'EDUZ  I $D(^VA(200,EDUZ,"EC",UNT,0)) D
"RTN","ECUMRPC",21,0)
 . S CNT=CNT+1,^TMP($J,"ECUSR",CNT)=$P(^VA(200,EDUZ,0),U)_U_EDUZ
"RTN","ECUMRPC",22,0)
 S RESULTS=$NA(^TMP($J,"ECUSR"))
"RTN","ECUMRPC",23,0)
 Q
"RTN","ECUMRPC",24,0)
 ;
"RTN","ECUMRPC",25,0)
ECLOC(RESULTS) ;
"RTN","ECUMRPC",26,0)
 ;
"RTN","ECUMRPC",27,0)
 ;This broker entry point returns all active Event Capture locations
"RTN","ECUMRPC",28,0)
 ;        RPC: EC GETECLOC
"RTN","ECUMRPC",29,0)
 ;
"RTN","ECUMRPC",30,0)
 ;OUTPUTS        RESULTS - The array of active Event Capture locations.
"RTN","ECUMRPC",31,0)
 ;               PIECE - Description
"RTN","ECUMRPC",32,0)
 ;                 1     Location description
"RTN","ECUMRPC",33,0)
 ;                 2     LOC IEN
"RTN","ECUMRPC",34,0)
 N LOC
"RTN","ECUMRPC",35,0)
 D SETENV
"RTN","ECUMRPC",36,0)
 K ^TMP($J,"ECLOC")
"RTN","ECUMRPC",37,0)
 D GETLOC^ECL(.LOC) M ^TMP($J,"ECLOC")=LOC
"RTN","ECUMRPC",38,0)
 S RESULTS=$NA(^TMP($J,"ECLOC"))
"RTN","ECUMRPC",39,0)
 Q
"RTN","ECUMRPC",40,0)
ECSCN(RESULTS,ECARY) ;
"RTN","ECUMRPC",41,0)
 ;
"RTN","ECUMRPC",42,0)
 ;Broker call returns the entries from EC EVENT CODE SCREENS FILE #720.3
"RTN","ECUMRPC",43,0)
 ;        RPC: GETECSCREEN
"RTN","ECUMRPC",44,0)
 ;INPUTS   ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC",45,0)
 ;          STAT   - Active or inactive Event Code Screens
"RTN","ECUMRPC",46,0)
 ;                   A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC",47,0)
 ;          LOCIEN - Location IEN (optional)
"RTN","ECUMRPC",48,0)
 ;          DSSIEN - DSS IEN (optional)
"RTN","ECUMRPC",49,0)
 ;
"RTN","ECUMRPC",50,0)
 ;OUTPUTS  RESULTS - Array of EC screens, contains
"RTN","ECUMRPC",51,0)
 ;          720.3 ien^location description^DSS Unit description^Category
"RTN","ECUMRPC",52,0)
 ;          desription^Procedure 5 digit code and description
"RTN","ECUMRPC",53,0)
 ;
"RTN","ECUMRPC",54,0)
 N STAT,IEN,CNT,ACT,FL,V,EI,ECSCR,CLN,LOC,UNT,CAT,PX,NODE,LOCIEN,DSSIEN
"RTN","ECUMRPC",55,0)
 D SETENV K ^TMP($J,"ECSCN")
"RTN","ECUMRPC",56,0)
 S STAT=$P($G(ECARY,"A"),U),LOCIEN=$P($G(ECARY),U,2),FL="4,724,726"
"RTN","ECUMRPC",57,0)
 S V="LOC,UNT,CAT",(IEN,CNT)=0,DSSIEN=$P(ECARY,U,3)
"RTN","ECUMRPC",58,0)
 F  S IEN=$O(^ECJ(IEN)) Q:'IEN  S NODE=$G(^ECJ(IEN,0)) I NODE'="" D
"RTN","ECUMRPC",59,0)
 .S ACT=$P(NODE,U,2),ECSCR=$TR($P(NODE,U),"-;,","^^")
"RTN","ECUMRPC",60,0)
 .I $S(STAT="A"&(ACT'=""):1,STAT="I"&(ACT=""):1,1:0) Q
"RTN","ECUMRPC",61,0)
 .I LOCIEN'="",LOCIEN'=$P(ECSCR,U) Q
"RTN","ECUMRPC",62,0)
 .I DSSIEN'="",DSSIEN'=$P(ECSCR,U,2) Q
"RTN","ECUMRPC",63,0)
 .F EI=1:1:3 D
"RTN","ECUMRPC",64,0)
 ..S @$P(V,",",EI)=$$GET1^DIQ($P(FL,",",EI),$P(ECSCR,U,EI),.01,"E"),PX=""
"RTN","ECUMRPC",65,0)
 .I $P(ECSCR,U,5)["EC" D
"RTN","ECUMRPC",66,0)
 ..S PRO=$G(^EC(725,$P(ECSCR,U,4),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUMRPC",67,0)
 .E  S PRO=$$CPT^ICPTCOD($P(ECSCR,U,4)) S PX=$P(PRO,U,2)_" "_$P(PRO,U,3)
"RTN","ECUMRPC",68,0)
 .S CNT=CNT+1,^TMP($J,"ECSCN",CNT)=IEN_U_LOC_U_UNT_U_CAT_U_PX
"RTN","ECUMRPC",69,0)
 S RESULTS=$NA(^TMP($J,"ECSCN"))
"RTN","ECUMRPC",70,0)
 Q
"RTN","ECUMRPC",71,0)
ECSDTLS(RESULTS,ECARY) ;
"RTN","ECUMRPC",72,0)
 ;
"RTN","ECUMRPC",73,0)
 ;Broker call returns details on an Event Code Screen from EC EVENT 
"RTN","ECUMRPC",74,0)
 ;CODE SCREENS FILE #720.3
"RTN","ECUMRPC",75,0)
 ;        RPC: GETECSDETAIL
"RTN","ECUMRPC",76,0)
 ;INPUTS   ECARY  - Contains the following data
"RTN","ECUMRPC",77,0)
 ;                   Event code screen IEN
"RTN","ECUMRPC",78,0)
 ;
"RTN","ECUMRPC",79,0)
 ;OUTPUTS  RESULTS - Details of EC screen, contains
"RTN","ECUMRPC",80,0)
 ;          720.3 ien^event code screen key^synonym^volume^associated 
"RTN","ECUMRPC",81,0)
 ;          clinic^Procedure reason indicator^event code screen status
"RTN","ECUMRPC",82,0)
 ;          flag (y-active,n-inactive)^Send To PCE
"RTN","ECUMRPC",83,0)
 ;
"RTN","ECUMRPC",84,0)
 N NODE,PRO,CLN,STAT,STR,SPCE
"RTN","ECUMRPC",85,0)
 Q:$G(ECARY)=""  Q:'$D(^ECJ(ECARY,0))
"RTN","ECUMRPC",86,0)
 D SETENV
"RTN","ECUMRPC",87,0)
 S NODE=^ECJ(ECARY,0),PRO=$G(^ECJ(ECARY,"PRO")),SPCE=$P(NODE,"-",2)
"RTN","ECUMRPC",88,0)
 S SPCE=$P($G(^ECD(SPCE,0)),U,14),SPCE=$S(SPCE="A":1,1:0) ;139 Modified $S logic to set SPCE to 1 if "A" and 0 for all others.  Value is used to determine if clinic is asked for as a choice
"RTN","ECUMRPC",89,0)
 S STAT=$S($P(NODE,U,2)="":"Y",1:"N")
"RTN","ECUMRPC",90,0)
 S:$P(PRO,U,4)'="" CLN=$$GET1^DIQ(44,$P(PRO,U,4),.01,"E")
"RTN","ECUMRPC",91,0)
 S STR=ECARY_U_$P(NODE,U)_U_$P(PRO,U,2,3)_U_$G(CLN)_U_$P(PRO,U,5)_U_STAT
"RTN","ECUMRPC",92,0)
 S RESULTS=STR_U_SPCE
"RTN","ECUMRPC",93,0)
 Q
"RTN","ECUMRPC",94,0)
 ;
"RTN","ECUMRPC",95,0)
DSSECS(RESULTS,ECARY) ;
"RTN","ECUMRPC",96,0)
 ;
"RTN","ECUMRPC",97,0)
 ;Broker call returns a list of Event Code Screen from EC EVENT CODE
"RTN","ECUMRPC",98,0)
 ;SCREENS FILE #720.3 based on a DSS Unit
"RTN","ECUMRPC",99,0)
 ;        RPC: EC GETDSSECS
"RTN","ECUMRPC",100,0)
 ;INPUTS   ECARY  - Contains the following data
"RTN","ECUMRPC",101,0)
 ;          ECD   - DSS Unit IEN
"RTN","ECUMRPC",102,0)
 ;          ECL   - Location
"RTN","ECUMRPC",103,0)
 ;
"RTN","ECUMRPC",104,0)
 ;OUTPUTS  RESULTS - Data on EC screen, contains
"RTN","ECUMRPC",105,0)
 ;          720.3 ien^Procedure 5 digit code and description^Location^
"RTN","ECUMRPC",106,0)
 ;          status(Y-active, N-inactive)^Category description^synonym
"RTN","ECUMRPC",107,0)
 ;
"RTN","ECUMRPC",108,0)
 N NODE,PRO,STAT,CNT,ECD,LOC,CAT,IEN,PX,PN,CATD,LOCDS,ECL,ECSYN
"RTN","ECUMRPC",109,0)
 S ECD=$P(ECARY,U),ECL=$P(ECARY,U,2) I ECD="",ECL="" Q
"RTN","ECUMRPC",110,0)
 D SETENV K ^TMP($J,"ECDSSECS")
"RTN","ECUMRPC",111,0)
 S (CNT,LOC)=0 I ECL'="" S LOC=ECL-1
"RTN","ECUMRPC",112,0)
 F  S LOC=$O(^ECJ("AP",LOC)) Q:'LOC  S CAT=""  Q:ECL&(ECL'=LOC)  D
"RTN","ECUMRPC",113,0)
 .I ECD'="" D:$D(^ECJ("AP",LOC,ECD)) GETSCN Q 
"RTN","ECUMRPC",114,0)
 .S ECD=0 F  S ECD=$O(^ECJ("AP",LOC,ECD)) Q:'ECD  D GETSCN
"RTN","ECUMRPC",115,0)
 S RESULTS=$NA(^TMP($J,"ECDSSECS"))
"RTN","ECUMRPC",116,0)
 Q
"RTN","ECUMRPC",117,0)
GETSCN F  S CAT=$O(^ECJ("AP",LOC,ECD,CAT)) Q:CAT=""  S PX="" D
"RTN","ECUMRPC",118,0)
 .I CAT,'$P(^ECD(ECD,0),U,11) Q  ;131 Don't show screen if it has a category and the DSS Unit is set to "no categories"
"RTN","ECUMRPC",119,0)
 .F  S PX=$O(^ECJ("AP",LOC,ECD,CAT,PX)) Q:PX=""  S IEN=0 D
"RTN","ECUMRPC",120,0)
 ..F  S IEN=$O(^ECJ("AP",LOC,ECD,CAT,PX,IEN)) Q:'IEN  D
"RTN","ECUMRPC",121,0)
 ...S NODE=$G(^ECJ(IEN,0)) I NODE="" Q
"RTN","ECUMRPC",122,0)
 ...S PRO=$G(^ECJ(IEN,"PRO")),ECSYN=$P(PRO,U,2),PN=$P($P(PRO,U),";")
"RTN","ECUMRPC",123,0)
 ...I PN="" Q
"RTN","ECUMRPC",124,0)
 ...I $P(PRO,U)["EC" S PN=$G(^EC(725,PN,0)),PRO=$P(PN,U,2)_" "_$P(PN,U)
"RTN","ECUMRPC",125,0)
 ...E  S PN=$$CPT^ICPTCOD(PN) S PRO=$P(PN,U,2)_" "_$P(PN,U,3)
"RTN","ECUMRPC",126,0)
 ...S STAT=$S($P(NODE,U,2)'="":"No",1:"Yes")
"RTN","ECUMRPC",127,0)
 ...S CATD=$S('CAT:"None",1:$P($G(^EC(726,CAT,0)),U))
"RTN","ECUMRPC",128,0)
 ...S LOCDS=$$GET1^DIQ(4,LOC,.01,"I"),CNT=CNT+1
"RTN","ECUMRPC",129,0)
 ...S ^TMP($J,"ECDSSECS",CNT)=IEN_U_PRO_U_LOCDS_U_STAT_U_CATD_U_ECSYN
"RTN","ECUMRPC",130,0)
 Q
"RTN","ECUMRPC",131,0)
 ;
"RTN","ECUMRPC",132,0)
ECPXRS(RESULTS,ECARY) ;
"RTN","ECUMRPC",133,0)
 ;
"RTN","ECUMRPC",134,0)
 ;Broker call returns entries for Procedure reasons linked to EC screen.
"RTN","ECUMRPC",135,0)
 ;        RPC: EC GETPXREASON
"RTN","ECUMRPC",136,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC",137,0)
 ;          ECSCR - Event code screen ien (file #720.3)
"RTN","ECUMRPC",138,0)
 ;
"RTN","ECUMRPC",139,0)
 ;OUTPUTS  RESULTS - Array of procedure reasons for EC screen
"RTN","ECUMRPC",140,0)
 ;          Procedure reason^procedure reason ien #720.4^Event Code 
"RTN","ECUMRPC",141,0)
 ;          screens/procedure reason link ien #720.5
"RTN","ECUMRPC",142,0)
 ;
"RTN","ECUMRPC",143,0)
 N RSN,IEN,CNT,RIEN
"RTN","ECUMRPC",144,0)
 S ECSCR=$G(ECARY,"") I ECSCR="" Q
"RTN","ECUMRPC",145,0)
 D SETENV
"RTN","ECUMRPC",146,0)
 K ^TMP($J,"ECPXREAS") S (IEN,CNT)=0
"RTN","ECUMRPC",147,0)
 F  S IEN=$O(^ECL("AD",ECSCR,IEN)) Q:'IEN  D
"RTN","ECUMRPC",148,0)
 . S RSN=$G(^ECR(IEN,0)),RIEN=$O(^ECL("AD",ECSCR,IEN,0)) Q:'$P(RSN,U,2)
"RTN","ECUMRPC",149,0)
 . S CNT=CNT+1,^TMP($J,"ECPXREAS",CNT)=$P(RSN,U)_U_IEN_U_RIEN
"RTN","ECUMRPC",150,0)
 S RESULTS=$NA(^TMP($J,"ECPXREAS"))
"RTN","ECUMRPC",151,0)
 Q
"RTN","ECUMRPC",152,0)
 ;
"RTN","ECUMRPC",153,0)
ECNATPX(RESULTS,ECARY) ;
"RTN","ECUMRPC",154,0)
 ;
"RTN","ECUMRPC",155,0)
 ;Broker call returns EC national & local  Procedures from file #725.
"RTN","ECUMRPC",156,0)
 ;        RPC: EC GETNATPX
"RTN","ECUMRPC",157,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC",158,0)
 ;          ECPX - Procedures to output, L- local, N- National, B- Both
"RTN","ECUMRPC",159,0)
 ;          STAT - Active or inactive EC Nat Codes
"RTN","ECUMRPC",160,0)
 ;                 A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC",161,0)
 ;
"RTN","ECUMRPC",162,0)
 ;OUTPUTS  RESULTS - Array of EC local procedures
"RTN","ECUMRPC",163,0)
 ;          ien #725^Procedure name^national number^inactive date^
"RTN","ECUMRPC",164,0)
 ;          synonym^CPT ien^CPT code^CPT Short Name
"RTN","ECUMRPC",165,0)
 ;
"RTN","ECUMRPC",166,0)
 N STAT,IEN,STR,CNT,ACT,CPT,CPTDAT,ECPX
"RTN","ECUMRPC",167,0)
 D SETENV
"RTN","ECUMRPC",168,0)
 S ECPX=$P(ECARY,U),STAT=$P(ECARY,U,2)
"RTN","ECUMRPC",169,0)
 S:ECPX="" ECPX="L" S:STAT="" STAT="A"
"RTN","ECUMRPC",170,0)
 K ^TMP($J,"ECLOCPX")
"RTN","ECUMRPC",171,0)
 S IEN=$S(ECPX="L":90000,1:0),CNT=0
"RTN","ECUMRPC",172,0)
 F  S IEN=$O(^EC(725,IEN)) Q:'IEN!((ECPX="N")&(IEN>90000))  D
"RTN","ECUMRPC",173,0)
 . S STR=$G(^EC(725,IEN,0)) I STR="" Q
"RTN","ECUMRPC",174,0)
 . S ACT=$P(STR,U,3),CPT=$P(STR,U,5)
"RTN","ECUMRPC",175,0)
 . I $S(STAT="A"&(ACT'=""):1,STAT="I"&(ACT=""):1,1:0) Q
"RTN","ECUMRPC",176,0)
 . S CPTDAT=$S(CPT="":"",1:$$CPT^ICPTCOD(CPT))
"RTN","ECUMRPC",177,0)
 . S CNT=CNT+1,^TMP($J,"ECLOCPX",CNT)=IEN_U_STR_U_$P(CPTDAT,U,2,3)
"RTN","ECUMRPC",178,0)
 S RESULTS=$NA(^TMP($J,"ECLOCPX"))
"RTN","ECUMRPC",179,0)
 Q
"RTN","ECUMRPC",180,0)
SETENV ;set environment variables for RPC broker
"RTN","ECUMRPC",181,0)
 I '$G(DUZ) D
"RTN","ECUMRPC",182,0)
 . S DUZ=.5,DUZ(0)="@",U="^",DTIME=300
"RTN","ECUMRPC",183,0)
 . D NOW^%DTC S DT=X
"RTN","ECUMRPC",184,0)
 Q
"RTN","ECUMRPC1")
0^16^B116888350^B107083588
"RTN","ECUMRPC1",1,0)
ECUMRPC1 ;ALB/JAM-Event Capture Management Broker Utilities ;3/9/18  08:59
"RTN","ECUMRPC1",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,33,72,94,95,105,100,107,110,112,126,130,131,134,139**;8 May 96;Build 7
"RTN","ECUMRPC1",3,0)
 ;
"RTN","ECUMRPC1",4,0)
DSSUNT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",5,0)
 ;
"RTN","ECUMRPC1",6,0)
 ;This broker entry point returns DSS units from file 724
"RTN","ECUMRPC1",7,0)
 ;        RPC: EC GETDSSUNIT
"RTN","ECUMRPC1",8,0)
 ;INPUTS         ECARY -Contains the following subscripted elements
"RTN","ECUMRPC1",9,0)
 ;               P1 =   optional field to return DSS Units
"RTN","ECUMRPC1",10,0)
 ;                      STAT; 'A'ctive (default), 'I'nactive, 'B'oth
"RTN","ECUMRPC1",11,0)
 ;               P2 =   optional field to filter based on the DSS Name
"RTN","ECUMRPC1",12,0)
 ;               P3 =   optional field to return 1 DSS unit by IEN, if used
"RTN","ECUMRPC1",13,0)
 ;                      no other filters evaluated
"RTN","ECUMRPC1",14,0)
 ;               P4 =   optional field to filter based on the DSS Unit Number (DSS Dept)
"RTN","ECUMRPC1",15,0)
 ;               
"RTN","ECUMRPC1",16,0)
 ;               if data is passed into the other fields then all criteria
"RTN","ECUMRPC1",17,0)
 ;               must be met for data on a unit to be returned
"RTN","ECUMRPC1",18,0)
 ;
"RTN","ECUMRPC1",19,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","ECUMRPC1",20,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",21,0)
 ;                 1     IEN of DSS Unit 
"RTN","ECUMRPC1",22,0)
 ;                 2     Name of DSS Unit
"RTN","ECUMRPC1",23,0)
 ;                 3     IEN of DSS Unit
"RTN","ECUMRPC1",24,0)
 ;                 4     Inactive flag
"RTN","ECUMRPC1",25,0)
 ;                 5     Send to PCE   
"RTN","ECUMRPC1",26,0)
 ;                 6     Unit Number
"RTN","ECUMRPC1",27,0)
 ;                 7     Service
"RTN","ECUMRPC1",28,0)
 ;                 8     Medical Specialty
"RTN","ECUMRPC1",29,0)
 ;                 9     Cost Center
"RTN","ECUMRPC1",30,0)
 ;                 10    Associated Stop code (if not sending to PCE)
"RTN","ECUMRPC1",31,0)
 ;                 11    Category flag
"RTN","ECUMRPC1",32,0)
 ;                 12    Default date entry
"RTN","ECUMRPC1",33,0)
 ;                 13    Credit Stop Code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",34,0)
 ;                 14    CHAR4 code (only available when SEND TO PCE is set to "no records"
"RTN","ECUMRPC1",35,0)
 ;                 15    Allow duplicate records in spreadsheet upload
"RTN","ECUMRPC1",36,0)
 ;
"RTN","ECUMRPC1",37,0)
 N UNT,STAT,CNT,CAT,NODE,ECS,STR,SRV,MED,CST,UNO,INACT,ASC,PCE,ACT,NODE
"RTN","ECUMRPC1",38,0)
 N DFD,DIEN,DNM,DUNIT,GET1,CSC,CHAR4,ADSS ;126,139
"RTN","ECUMRPC1",39,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",40,0)
 K ^TMP($J,"ECDSSUNT")
"RTN","ECUMRPC1",41,0)
 S DNM=$P($G(ECARY),U,2),DIEN=$P($G(ECARY),U,3),DUNIT=$P($G(ECARY),U,4)
"RTN","ECUMRPC1",42,0)
 S:DNM'="" DNM=$$UP^XLFSTR(DNM)
"RTN","ECUMRPC1",43,0)
 S:DUNIT'="" DUNIT=$$UP^XLFSTR(DUNIT)
"RTN","ECUMRPC1",44,0)
 S STAT=$P($G(ECARY),U),(CNT,UNT,GET1)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",45,0)
 ; if IEN passed in - use that, then quit, GET1 used as control to stop
"RTN","ECUMRPC1",46,0)
 I $G(DIEN) S UNT=DIEN-.001,GET1=1
"RTN","ECUMRPC1",47,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT!((UNT>DIEN&(GET1)))  S NODE=$G(^ECD(UNT,0)) I NODE'="" D
"RTN","ECUMRPC1",48,0)
 . S ECS=$P(NODE,U,8),ACT=$P(NODE,U,6),ACT=$S(ACT:1,1:0)
"RTN","ECUMRPC1",49,0)
 . Q:('ECS)
"RTN","ECUMRPC1",50,0)
 . I '$G(DIEN),$S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC1",51,0)
 . ; execute new filters
"RTN","ECUMRPC1",52,0)
 . I DNM'="",$$UP^XLFSTR($P(NODE,U))'[DNM Q
"RTN","ECUMRPC1",53,0)
 . I DUNIT'="",$$UP^XLFSTR($P(NODE,U,5))'[DUNIT Q
"RTN","ECUMRPC1",54,0)
 . I DIEN'="",$$UP^XLFSTR(UNT)'[DIEN Q
"RTN","ECUMRPC1",55,0)
 . S CNT=CNT+1,CAT=$P(NODE,U,11),CAT=$S(CAT:"Y",1:"N"),UNO=$P(NODE,U,5)
"RTN","ECUMRPC1",56,0)
 . S SRV=$$GET1^DIQ(49,$P(NODE,U,2),.01,"I")
"RTN","ECUMRPC1",57,0)
 . S MED=$$GET1^DIQ(723,$P(NODE,U,3),.01,"I")
"RTN","ECUMRPC1",58,0)
 . S CST=$$GET1^DIQ(420.1,$P(NODE,U,4),.01,"I")
"RTN","ECUMRPC1",59,0)
 . S INACT=$P(NODE,U,6),INACT=$S(INACT:"I",1:"A"),ASC=$P(NODE,U,10),CSC=$P(NODE,U,13),CHAR4=$P(NODE,U,15) ;126
"RTN","ECUMRPC1",60,0)
 . S:ASC ASC=$$GET1^DIQ(40.7,ASC,.01,"I")
"RTN","ECUMRPC1",61,0)
 . S:CSC CSC=$$GET1^DIQ(40.7,CSC,.01) ;126
"RTN","ECUMRPC1",62,0)
 . S:CHAR4 CHAR4=$$GET1^DIQ(728.441,CHAR4,.01) ;126
"RTN","ECUMRPC1",63,0)
 . S DFD=$S($P(NODE,U,12)="N":"N",1:"X"),PCE=$P(NODE,U,14)
"RTN","ECUMRPC1",64,0)
 . S PCE=$S(PCE'="":PCE,1:"N") ;139
"RTN","ECUMRPC1",65,0)
 . S ADSS=$S($P(NODE,U,16)'="":$P(NODE,U,16),1:"N") ;139 Does DSS Unit allow duplicate record upload
"RTN","ECUMRPC1",66,0)
 . S STR=UNT_U_$P(NODE,U)_U_UNT_U_INACT_U_PCE_U_UNO_U_SRV_U_MED_U_CST
"RTN","ECUMRPC1",67,0)
 . S STR=STR_U_ASC_U_CAT_U_DFD_U_CSC_U_CHAR4_U_ADSS,^TMP($J,"ECDSSUNT",CNT)=STR ;126,139
"RTN","ECUMRPC1",68,0)
 S RESULTS=$NA(^TMP($J,"ECDSSUNT"))
"RTN","ECUMRPC1",69,0)
 Q
"RTN","ECUMRPC1",70,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",71,0)
 ;
"RTN","ECUMRPC1",72,0)
 ;This broker entry point returns a list of categories from file 726
"RTN","ECUMRPC1",73,0)
 ;        RPC: EC GETCAT
"RTN","ECUMRPC1",74,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC1",75,0)
 ;                STAT - Active or inactive category (optional)
"RTN","ECUMRPC1",76,0)
 ;                A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC1",77,0)
 ;
"RTN","ECUMRPC1",78,0)
 ;OUTPUTS        RESULTS - Array of category. Data pieces as follows:-
"RTN","ECUMRPC1",79,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",80,0)
 ;                 1     IEN of Category
"RTN","ECUMRPC1",81,0)
 ;                 2     Name of Category
"RTN","ECUMRPC1",82,0)
 ;                 3     Creation Date
"RTN","ECUMRPC1",83,0)
 ;                 4     Inactive Date
"RTN","ECUMRPC1",84,0)
 ;
"RTN","ECUMRPC1",85,0)
 N STAT,CNT,CAT,NODE,ECDT,INDT,CRDT
"RTN","ECUMRPC1",86,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",87,0)
 K ^TMP($J,"ECCAT")
"RTN","ECUMRPC1",88,0)
 S STAT=$P($G(ECARY),U),(CNT,CAT)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",89,0)
 F  S CAT=$O(^EC(726,CAT)) Q:'CAT  S NODE=$G(^EC(726,CAT,0)) I NODE'="" D
"RTN","ECUMRPC1",90,0)
 . S ECDT=$P(NODE,U,3)
"RTN","ECUMRPC1",91,0)
 . I STAT="A",ECDT'="",ECDT'>DT Q
"RTN","ECUMRPC1",92,0)
 . I STAT="I",ECDT="" Q
"RTN","ECUMRPC1",93,0)
 . S CRDT=$$FMTE^XLFDT($P(NODE,U,2),"2F")
"RTN","ECUMRPC1",94,0)
 . S INDT=$$FMTE^XLFDT($P(NODE,U,3),"2F")
"RTN","ECUMRPC1",95,0)
 . ;S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_CRDT_U_INDT
"RTN","ECUMRPC1",96,0)
 . S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_$P(CRDT,"@",1)_U_$P(INDT,"@",1)
"RTN","ECUMRPC1",97,0)
 S RESULTS=$NA(^TMP($J,"ECCAT"))
"RTN","ECUMRPC1",98,0)
 Q
"RTN","ECUMRPC1",99,0)
 ;
"RTN","ECUMRPC1",100,0)
CATCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",101,0)
 ;
"RTN","ECUMRPC1",102,0)
 ;Broker call checks whether category is used in an Event Code Screen.
"RTN","ECUMRPC1",103,0)
 ;        RPC: EC DSSCATCHECK
"RTN","ECUMRPC1",104,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",105,0)
 ;          ECDA  - DSS Unit ien (file #724)
"RTN","ECUMRPC1",106,0)
 ;
"RTN","ECUMRPC1",107,0)
 ;OUTPUTS  RESULTS - Category used in Event Code Screen, 1-Yes or 0-No
"RTN","ECUMRPC1",108,0)
 ;
"RTN","ECUMRPC1",109,0)
 N ECDA,ECFLG,ECX
"RTN","ECUMRPC1",110,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",111,0)
 S ECDA=$P(ECARY,U) I ECDA="" Q
"RTN","ECUMRPC1",112,0)
 S (ECFLG,ECX)=0
"RTN","ECUMRPC1",113,0)
 F  S ECX=$O(^ECJ("AP",ECX)) Q:'ECX!(ECFLG)  D
"RTN","ECUMRPC1",114,0)
 . I $D(^ECJ("AP",ECX,ECDA)) S ECFLG=1
"RTN","ECUMRPC1",115,0)
 S RESULTS=ECFLG
"RTN","ECUMRPC1",116,0)
 Q
"RTN","ECUMRPC1",117,0)
PXCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",118,0)
 ;
"RTN","ECUMRPC1",119,0)
 ;Checks whether procedure description or national number exist
"RTN","ECUMRPC1",120,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",121,0)
 ;          ECP - Procedure description
"RTN","ECUMRPC1",122,0)
 ;          ECN - EC National Number
"RTN","ECUMRPC1",123,0)
 ;
"RTN","ECUMRPC1",124,0)
 ;OUTPUTS  RESULTS - Px used^National # used, 1-Yes or 0-No ex. 1^0
"RTN","ECUMRPC1",125,0)
 ;
"RTN","ECUMRPC1",126,0)
 N ECX,ECP,ECN
"RTN","ECUMRPC1",127,0)
 Q:$G(ECARY)
"RTN","ECUMRPC1",128,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",129,0)
 S ECP=$P(ECARY,U),ECN=$P(ECARY,U,2),RESULTS="0^0"
"RTN","ECUMRPC1",130,0)
 I ECP'="",$D(^EC(725,"B",ECP)) S $P(RESULTS,U)=1
"RTN","ECUMRPC1",131,0)
 I ECN'="" F ECX="E","D","DL" D  I $P(RESULTS,U,2) Q
"RTN","ECUMRPC1",132,0)
 . I $D(^EC(725,ECX,ECN)) S $P(RESULTS,U,2)=1
"RTN","ECUMRPC1",133,0)
 Q
"RTN","ECUMRPC1",134,0)
SRCLST(RESULTS,ECARY) ;
"RTN","ECUMRPC1",135,0)
 ;
"RTN","ECUMRPC1",136,0)
 ;This broker entry returns an array of codes from a file based on a 
"RTN","ECUMRPC1",137,0)
 ;search string.
"RTN","ECUMRPC1",138,0)
 ;        RPC: EC GETLIST
"RTN","ECUMRPC1",139,0)
 ;
"RTN","ECUMRPC1",140,0)
 ;INPUTS    ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC1",141,0)
 ;          ECFIL   - File to search
"RTN","ECUMRPC1",142,0)
 ;          ECSTR   - Search string
"RTN","ECUMRPC1",143,0)
 ;          ECDIR   - Search order
"RTN","ECUMRPC1",144,0)
 ;          ECNUM   - (Optional) # records to return [default=44]
"RTN","ECUMRPC1",145,0)
 ;          ECADT   - (Optional) date to determine clinic inactivity
"RTN","ECUMRPC1",146,0)
 ;          ECLOC   - (Optional) location to filter associated clinics
"RTN","ECUMRPC1",147,0)
 ;          ECTYPE  - (Optional) primary or secondary stop codes desired
"RTN","ECUMRPC1",148,0)
 ;          ECOOS   - (Optional) Set to "OOS" to only see "OOS" related stop codes
"RTN","ECUMRPC1",149,0)
 ;OUTPUTS   RESULTS - Array of values based on the search criteria.
"RTN","ECUMRPC1",150,0)
 ;
"RTN","ECUMRPC1",151,0)
 N ECNT,DIC,ECSTR,ECFIL,ECORD,ECER,ECDI,ECNUM,ECDIR,ECADT,ECLOC,ECTYPE,ECOOS ;112,126,139
"RTN","ECUMRPC1",152,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",153,0)
 S ECNT=0,ECFIL=$P(ECARY,U),ECSTR=$P(ECARY,U,2),ECDIR=$P(ECARY,U,3)
"RTN","ECUMRPC1",154,0)
 S ECORD=$S(ECDIR=-1:"B",1:"I")
"RTN","ECUMRPC1",155,0)
 K ^TMP($J,"ECFIND"),^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",156,0)
 I ECFIL="" Q
"RTN","ECUMRPC1",157,0)
 S ECNUM=$S(+$P(ECARY,U,4)>0:$P(ECARY,U,4),1:44)
"RTN","ECUMRPC1",158,0)
 S ECADT=$S(+$P(ECARY,U,5):$P(ECARY,U,5),1:DT) ;112
"RTN","ECUMRPC1",159,0)
 S ECLOC=$P(ECARY,U,6) ;126 IEN of location if filtering.  Null if no filtering
"RTN","ECUMRPC1",160,0)
 S ECTYPE=$P(ECARY,U,7) ;126 Null if primary, not null for secondary
"RTN","ECUMRPC1",161,0)
 S ECOOS=$P(ECARY,U,8) ;139 Set to "OOS" if list is restricted to "OOS" type stop codes
"RTN","ECUMRPC1",162,0)
 I ECFIL=420.1 D CSTCTR            ;Cost Center search
"RTN","ECUMRPC1",163,0)
 I ECFIL=49 D SERVC                ;Service search
"RTN","ECUMRPC1",164,0)
 I ECFIL=723 D MEDSPC              ;Medical specialty
"RTN","ECUMRPC1",165,0)
 I ECFIL=40.7 D STPCDE G EXIT      ;Associated stop code
"RTN","ECUMRPC1",166,0)
 I ECFIL=724 D DUNT G EXIT         ;DSS Unit
"RTN","ECUMRPC1",167,0)
 I ECFIL=726 D ECAT                ;Category
"RTN","ECUMRPC1",168,0)
 I ECFIL=4 D LOC                   ;Location
"RTN","ECUMRPC1",169,0)
 I ECFIL=44 D ASCLN G EXIT         ;Associated clinic
"RTN","ECUMRPC1",170,0)
 I ECFIL=757.01 D LEX^ECUMRPC2 G EXIT  ;Lex ICD code
"RTN","ECUMRPC1",171,0)
 I ECFIL=200 D PROV^ECUMRPC2(ECNUM)      ;Providers
"RTN","ECUMRPC1",172,0)
 I ECFIL=728.441 D CHAR4                 ;126 National Clinic code (CHAR4)
"RTN","ECUMRPC1",173,0)
 I ECFIL=722 D LIST^ECPRVDR              ;134 EC Providers
"RTN","ECUMRPC1",174,0)
 I $D(ECER) S ^TMP($J,"ECFIND",1)="0^Error occurred during search" G EXIT
"RTN","ECUMRPC1",175,0)
 D SORT
"RTN","ECUMRPC1",176,0)
EXIT K ^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",177,0)
 S RESULTS=$NA(^TMP($J,"ECFIND"))
"RTN","ECUMRPC1",178,0)
 Q
"RTN","ECUMRPC1",179,0)
ASCLN ;Search for active associated clinics (file #44)
"RTN","ECUMRPC1",180,0)
 N CLN,CNT,NOD,ECDT,INACT,REACT,ERR,ECNOD ;126
"RTN","ECUMRPC1",181,0)
 S CNT=0,ECDT=ECADT ;112
"RTN","ECUMRPC1",182,0)
 I (ECDIR'=1)&(ECDIR'=-1) S ECDIR=1
"RTN","ECUMRPC1",183,0)
 ;the next 2 lines of code compensate for the M collating sequence & how the
"RTN","ECUMRPC1",184,0)
 ;clinic code is passed in from a CPRS RPC, in a unique situation. If the
"RTN","ECUMRPC1",185,0)
 ;code is numeric, ending in 0 and there is a similar code ending with a
"RTN","ECUMRPC1",186,0)
 ;letter, the correct clinic is not returned. EX: 2 clinics, 3010 and "3010A"
"RTN","ECUMRPC1",187,0)
 ;exist, the code is written to return 3010, yet 3010A is incorrectly returned. 
"RTN","ECUMRPC1",188,0)
 ;This code puts the 0 back on and subtracts 1 to the clinic code
"RTN","ECUMRPC1",189,0)
 I $E(ECSTR,$L(ECSTR)-1)="/",$E(ECSTR,1,($L(ECSTR)-2))?.N D
"RTN","ECUMRPC1",190,0)
 .S ECSTR=$E(ECSTR,1,($L(ECSTR)-2))_0,ECSTR=ECSTR-1
"RTN","ECUMRPC1",191,0)
 F  Q:CNT'<ECNUM  S ECSTR=$O(^SC("B",ECSTR),ECDIR) Q:ECSTR=""  S CLN="" D  ;134 Stop if counter is greater than or equal to ECNUM - allows for duplicate clinic names
"RTN","ECUMRPC1",192,0)
 .F  S CLN=$O(^SC("B",ECSTR,CLN),ECDIR) Q:CLN=""  S NOD=$G(^SC(CLN,0)) D
"RTN","ECUMRPC1",193,0)
 ..Q:NOD=""  Q:$P(NOD,U,3)'="C"  ;Q:+$G(^SC(CLN,"OOS"))
"RTN","ECUMRPC1",194,0)
 ..I $G(ECLOC) I ECLOC'=$$GET1^DIQ(44,CLN,"3.5:.07","I") Q  ;126,130 Clinic must be assoicated with the selected location, if one was selected
"RTN","ECUMRPC1",195,0)
 ..S ERR=0 I $D(^SC(CLN,"I")) D  I ERR Q
"RTN","ECUMRPC1",196,0)
 ...S INACT=$P(^SC(CLN,"I"),U),REACT=$P(^SC(CLN,"I"),U,2)
"RTN","ECUMRPC1",197,0)
 ...I INACT D  I ERR Q
"RTN","ECUMRPC1",198,0)
 ....I REACT="" S:ECDT'<INACT ERR=1 Q
"RTN","ECUMRPC1",199,0)
 ....I ECDT'<INACT,ECDT<REACT S ERR=1 Q
"RTN","ECUMRPC1",200,0)
 ...;I REACT,ECDT<REACT S ERR=1  removed in EC*110 - BGP
"RTN","ECUMRPC1",201,0)
 ..S ECNOD=$G(^ECX(728.44,CLN,0)) ;126 Get clinic and stop code zero node for selected clinic
"RTN","ECUMRPC1",202,0)
 ..S CNT=CNT+1,^TMP($J,"ECFIND",CNT)=CLN_U_$P(NOD,U)_U_$P(ECNOD,U,2)_U_$P(ECNOD,U,3)_U_$P($G(^ECX(728.441,+$P(ECNOD,U,8),0)),U) ;126 Add stop code, credit stop, and char4 code
"RTN","ECUMRPC1",203,0)
 Q
"RTN","ECUMRPC1",204,0)
CSTCTR ;Search for cost centers (File #420.1)
"RTN","ECUMRPC1",205,0)
 N ECNULL,INDX,STR,NSTR,I
"RTN","ECUMRPC1",206,0)
 S $P(ECNULL," ",7)=" ",INDX="B"
"RTN","ECUMRPC1",207,0)
 I $E(ECSTR)?.N,$L(ECSTR)<7 S ECSTR=ECSTR_$E(ECNULL,1,7-$L(ECSTR))
"RTN","ECUMRPC1",208,0)
 I $L($P(ECSTR," "))=6,$P(ECSTR," ",2)?.A D   ;truncate for x-ref
"RTN","ECUMRPC1",209,0)
 . S ECSTR=$P(ECSTR," ")_" "_$E($P(ECSTR," ",2,999),1,22)
"RTN","ECUMRPC1",210,0)
 I $E(ECSTR)?.A S INDX="C",(STR,NSTR)="" D  S ECSTR=NSTR
"RTN","ECUMRPC1",211,0)
 .F I=1:1 S STR=$P(ECSTR," ",I) Q:STR=""  D
"RTN","ECUMRPC1",212,0)
 ..S STR=$E(STR)_$TR($E(STR,2,9999),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
"RTN","ECUMRPC1",213,0)
 ..S NSTR=NSTR_STR
"RTN","ECUMRPC1",214,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"",INDX,"I '$P(^(0),U,2)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",215,0)
 Q
"RTN","ECUMRPC1",216,0)
SERVC ;Search for services (File #49)
"RTN","ECUMRPC1",217,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",218,0)
 Q
"RTN","ECUMRPC1",219,0)
MEDSPC ;Search for medical specialty (File #723)
"RTN","ECUMRPC1",220,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",221,0)
 Q
"RTN","ECUMRPC1",222,0)
STPCDE ;Search for associated stop code (File #40.7)
"RTN","ECUMRPC1",223,0)
 N ECNT,INDX,ECNUL,STR,IEN,SCRN ;139
"RTN","ECUMRPC1",224,0)
 S $P(ECNUL,"  ",30)=" ",INDX="B",ECNT=0,ECSTR=$P(ECSTR,"~")
"RTN","ECUMRPC1",225,0)
 I +ECSTR,ECSTR["/" S ECSTR=$TR(ECSTR,"/",0) S:ECSTR>0 ECSTR=ECSTR-1 ;131 If number sent, remove / and replace with 0
"RTN","ECUMRPC1",226,0)
 I +ECSTR,+ECSTR?.N S INDX="C",IEN=0 D  Q
"RTN","ECUMRPC1",227,0)
 .S ECSTR=$O(^DIC(40.7,INDX,+ECSTR)) I ECSTR="" Q
"RTN","ECUMRPC1",228,0)
 .F  S IEN=$O(^DIC(40.7,INDX,ECSTR,IEN)) Q:'IEN  D  I ECNT>(ECNUM-1) Q
"RTN","ECUMRPC1",229,0)
 ..;07/27/09 llh added checks on piece 2 and 6
"RTN","ECUMRPC1",230,0)
 ..S STR=$G(^DIC(40.7,IEN,0)) I ($P(STR,U,3)'=""&($P(STR,U,3)'>DT))!($P(STR,U,6)=$S($G(ECTYPE)="":"S",1:"P"))!($P(STR,U,6)="")!($L($P(STR,U,2))'=3) Q  ;126 allow for searches for primary or secondary
"RTN","ECUMRPC1",231,0)
 ..I $G(ECOOS)="OOS" I '$$EX^SDCOU2(IEN,$$NOW^XLFDT) Q  ;139 If setting up OOS DSS unit, only show OOS related stop codes
"RTN","ECUMRPC1",232,0)
 ..S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)_U_IEN
"RTN","ECUMRPC1",233,0)
 ..S ECNT=ECNT+1,^TMP($J,"ECFIND",ECNT)=STR
"RTN","ECUMRPC1",234,0)
 ;added validation checks here as well
"RTN","ECUMRPC1",235,0)
 S SCRN="I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($L($P(^(0),U,2))=3)&(($P(^(0),U,6)=$S($G(ECTYPE)="""":""P"",1:""S""))!($P(^(0),U,6)=""E""))"_$S(ECOOS="OOS":" I $$EX^SDCOU2(Y,$$NOW^XLFDT)",1:"") ;139
"RTN","ECUMRPC1",236,0)
 D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,SCRN,"","^TMP(""ECSRCH"",$J)","ECER") ;126,139
"RTN","ECUMRPC1",237,0)
 S ECNT=0
"RTN","ECUMRPC1",238,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",239,0)
 .S STR=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_$G(^(1))
"RTN","ECUMRPC1",240,0)
 .S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)
"RTN","ECUMRPC1",241,0)
 .S ^TMP($J,"ECFIND",ECNT)=STR_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",242,0)
 Q
"RTN","ECUMRPC1",243,0)
DUNT ;Search for DSS unit (File #724)
"RTN","ECUMRPC1",244,0)
 N ECNT,SNDPCE
"RTN","ECUMRPC1",245,0)
 D LISTDIC(ECFIL,"",".01;10;13",ECORD,ECNUM,ECSTR,"","","I '$P(^(0),""^"",6),$P(^(0),U,8)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",246,0)
 S ECNT=0
"RTN","ECUMRPC1",247,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",248,0)
 .S SNDPCE=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,13))
"RTN","ECUMRPC1",249,0)
 .S SNDPCE=$S(SNDPCE="A":1,1:0) ;139 Send all records enables clinic selection, else no clinic
"RTN","ECUMRPC1",250,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)_U_$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,10))_U_SNDPCE
"RTN","ECUMRPC1",251,0)
 Q
"RTN","ECUMRPC1",252,0)
ECAT ;Search for Category (File #726)
"RTN","ECUMRPC1",253,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P(^(0),""^"",3)=""""!($P(^(0),U,3)>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",254,0)
 Q
"RTN","ECUMRPC1",255,0)
LOC ;Search for Location (File #4)
"RTN","ECUMRPC1",256,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $G(^(""EC""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",257,0)
 Q
"RTN","ECUMRPC1",258,0)
LISTDIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER) ;
"RTN","ECUMRPC1",259,0)
 ;Produces a list of records in a file base on search string
"RTN","ECUMRPC1",260,0)
 N DIC
"RTN","ECUMRPC1",261,0)
 D LIST^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER)
"RTN","ECUMRPC1",262,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECID
"RTN","ECUMRPC1",263,0)
 Q
"RTN","ECUMRPC1",264,0)
SORT ;Extracts data to be returned to broker
"RTN","ECUMRPC1",265,0)
 N ECNT,STR
"RTN","ECUMRPC1",266,0)
 S ECNT=0
"RTN","ECUMRPC1",267,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",268,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",269,0)
 Q
"RTN","ECUMRPC1",270,0)
 ;
"RTN","ECUMRPC1",271,0)
CHAR4 ;126, returns list of CHAR4 codes from the NATIONAL CLINIC file (#728.441)
"RTN","ECUMRPC1",272,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P($G(^(2)),""^"")=""""!($P($G(^(2)),""^"")>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",273,0)
 Q
"RTN","ECUNTRPT")
0^28^B9743210^B8713813
"RTN","ECUNTRPT",1,0)
ECUNTRPT ;ALB/DHE DSS Units Errors Report ;3/7/18  15:25
"RTN","ECUNTRPT",2,0)
 ;;2.0;EVENT CAPTURE;**107,119,139**;8 May 96;Build 7
"RTN","ECUNTRPT",3,0)
 ;
"RTN","ECUNTRPT",4,0)
 ;This report displays DSS Units with any Associated Stop Codes
"RTN","ECUNTRPT",5,0)
 ;with any errors or warnings.
"RTN","ECUNTRPT",6,0)
 ;
"RTN","ECUNTRPT",7,0)
 ;Routine entry point, START if from roll and scroll, EN if
"RTN","ECUNTRPT",8,0)
 ;from GUI
"RTN","ECUNTRPT",9,0)
 ;
"RTN","ECUNTRPT",10,0)
 ;need to set up output device and taskman
"RTN","ECUNTRPT",11,0)
START ;
"RTN","ECUNTRPT",12,0)
 W @IOF,!!,"This option displays DSS Units with Associated Stop Code Errors.",!!
"RTN","ECUNTRPT",13,0)
 S %ZIS="QM" D ^%ZIS G EXIT:POP
"RTN","ECUNTRPT",14,0)
 I $D(IO("Q")) D  Q
"RTN","ECUNTRPT",15,0)
 . N ZTRTN,ZTDESC
"RTN","ECUNTRPT",16,0)
 . S ZTRTN="EN^ECUNTRPT",ZTDESC="DSS Units with Assoc Stop Codes"
"RTN","ECUNTRPT",17,0)
 . D ^%ZTLOAD D HOME^%ZIS K IO("Q") Q
"RTN","ECUNTRPT",18,0)
 U IO
"RTN","ECUNTRPT",19,0)
EN ;
"RTN","ECUNTRPT",20,0)
 N I,CNTR,DATE,ECERR,ECNAME,ECOUT,ECRDT,ECSTOP,ECSTOP1,ERR,INACT,LN
"RTN","ECUNTRPT",21,0)
 N PG,RTYPE,STR,UNITNM,UNT,CNT ;119
"RTN","ECUNTRPT",22,0)
 ;
"RTN","ECUNTRPT",23,0)
 S %H=$H,ECRDT=$$HTE^XLFDT(%H,"5M"),ECOUT=0
"RTN","ECUNTRPT",24,0)
 S CNTR=0,PG=1,UNT=0,$P(LN,"-",80)=""
"RTN","ECUNTRPT",25,0)
 I $G(ECPTYP)'="E" D HEAD ;119
"RTN","ECUNTRPT",26,0)
 I $G(ECPTYP)="E" S CNT=1,^TMP($J,"ECRPT",CNT)="DSS UNIT #^DSS UNIT NAME^STOP CODE^STOP CODE NAME^ERROR #1^ERROR #2^ERROR #3" ;119
"RTN","ECUNTRPT",27,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT  D  I ECOUT Q
"RTN","ECUNTRPT",28,0)
 .Q:'$D(^ECD(UNT,0))
"RTN","ECUNTRPT",29,0)
 .;check to see if unit is inactive
"RTN","ECUNTRPT",30,0)
 .I $P(^ECD(UNT,0),"^",6)=1 Q
"RTN","ECUNTRPT",31,0)
 .;get associated stop code
"RTN","ECUNTRPT",32,0)
 .S ECSTOP=$P(^ECD(UNT,0),"^",10) Q:$G(ECSTOP)=0!(ECSTOP="")
"RTN","ECUNTRPT",33,0)
 .;
"RTN","ECUNTRPT",34,0)
 .S UNITNM=$P($G(^ECD(UNT,0)),U),ERR=0
"RTN","ECUNTRPT",35,0)
 .S STR=$G(^DIC(40.7,ECSTOP,0))
"RTN","ECUNTRPT",36,0)
 .I $G(STR)="" S ERR=ERR+1,ECERR(ERR)="CODE DOES NOT EXIST IN FILE 40.7",ECNAME="" Q
"RTN","ECUNTRPT",37,0)
 .S ECNAME=$P(STR,U),ECSTOP1=$P(STR,U,2),INACT=$P(STR,U,3),RTYPE=$P(STR,U,6)
"RTN","ECUNTRPT",38,0)
 .I $L(ECSTOP1)'=3 S ERR=ERR+1,ECERR(ERR)="CODE MUST BE 3 DIGITS"
"RTN","ECUNTRPT",39,0)
 .I $G(INACT),((DT>INACT)!(DT=INACT)) S ERR=ERR+1,ECERR(ERR)="INACTIVE CODE"
"RTN","ECUNTRPT",40,0)
 .I (RTYPE'=("P"))&(RTYPE'=("E")) S ERR=ERR+1,ECERR(ERR)="SECONDARY CODE"
"RTN","ECUNTRPT",41,0)
 .I $P(^ECD(UNT,0),U,14)="OOS" D  ;139
"RTN","ECUNTRPT",42,0)
 ..I '$$EX^SDCOU2(ECSTOP,DT) S ERR=ERR+1,ECERR(ERR)="INVALID OR INACTIVE STOP CODE ASSOCIATED WITH AN OOS DSS UNIT" ;139
"RTN","ECUNTRPT",43,0)
 .I $G(ECPTYP)'="E" I ($Y+4)>IOSL D PAGE Q:ECOUT  D HEAD ;119
"RTN","ECUNTRPT",44,0)
 .;if errors, loop through array, write, then kill
"RTN","ECUNTRPT",45,0)
 .I ERR D  S ERR=0 K ECERR
"RTN","ECUNTRPT",46,0)
 ..I $G(ECPTYP)="E" D EXPORT Q  ;119
"RTN","ECUNTRPT",47,0)
 ..W !!,"DSS Unit: ",?12,UNT,?19,UNITNM
"RTN","ECUNTRPT",48,0)
 ..W !,"Stop Code: ",?12,ECSTOP1,?19,ECNAME
"RTN","ECUNTRPT",49,0)
 ..F I=1:1:ERR W !,"Reason: ",ECERR(I) ;119
"RTN","ECUNTRPT",50,0)
 Q
"RTN","ECUNTRPT",51,0)
EXIT ;
"RTN","ECUNTRPT",52,0)
 K POP,QUIT,ZTQUEUED
"RTN","ECUNTRPT",53,0)
 Q
"RTN","ECUNTRPT",54,0)
 ;
"RTN","ECUNTRPT",55,0)
HEAD ;header
"RTN","ECUNTRPT",56,0)
 W:$E(IOST,1,2)="C-"!(PG>1) @IOF
"RTN","ECUNTRPT",57,0)
 W !!,"DSS UNITS WITH ANY ASSOCIATED STOP CODE ERRORS"
"RTN","ECUNTRPT",58,0)
 W !,"Page: ",PG,?53,"Run Date: ",ECRDT,!,LN
"RTN","ECUNTRPT",59,0)
 S PG=PG+1
"RTN","ECUNTRPT",60,0)
 Q
"RTN","ECUNTRPT",61,0)
PAGE ;
"RTN","ECUNTRPT",62,0)
 N SS,JJ
"RTN","ECUNTRPT",63,0)
 I $D(PG),$E(IOST,1,2)="C-" D
"RTN","ECUNTRPT",64,0)
 .S SS=22-$Y F JJ=1:1:22 W !
"RTN","ECUNTRPT",65,0)
 .S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECUNTRPT",66,0)
 Q
"RTN","ECUNTRPT",67,0)
 ;
"RTN","ECUNTRPT",68,0)
STRTGUI ; if called from GUI, enter routine here
"RTN","ECUNTRPT",69,0)
 D EN
"RTN","ECUNTRPT",70,0)
 Q
"RTN","ECUNTRPT",71,0)
 ;
"RTN","ECUNTRPT",72,0)
EXPORT ;Section added in 119, puts data in exportable format
"RTN","ECUNTRPT",73,0)
 N I
"RTN","ECUNTRPT",74,0)
 S CNT=CNT+1,^TMP($J,"ECRPT",CNT)=UNT_U_UNITNM_U_ECSTOP1_U_ECNAME
"RTN","ECUNTRPT",75,0)
 F I=1:1:ERR S ^TMP($J,"ECRPT",CNT)=^TMP($J,"ECRPT",CNT)_U_ECERR(I)
"RTN","ECUNTRPT",76,0)
 Q
"RTN","ECUTL0")
0^21^B15671674^B14949344
"RTN","ECUTL0",1,0)
ECUTL0 ;ALB/ESD - Event Capture Eligibility and In/Outpat Utilities ;2/9/18  16:51
"RTN","ECUTL0",2,0)
 ;;2.0;EVENT CAPTURE;**10,139**;8 May 96;Build 7
"RTN","ECUTL0",3,0)
 ;
"RTN","ECUTL0",4,0)
 ;
"RTN","ECUTL0",5,0)
CHKDSS(DSSU,INOUT) ;  Determine if DSS Unit is sending data to PCE
"RTN","ECUTL0",6,0)
 ;
"RTN","ECUTL0",7,0)
 ;   Input:
"RTN","ECUTL0",8,0)
 ;      DSSU - DSS Unit IEN
"RTN","ECUTL0",9,0)
 ;      INOUT - Inpatient or Outpatient
"RTN","ECUTL0",10,0)
 ;
"RTN","ECUTL0",11,0)
 ;  Output:
"RTN","ECUTL0",12,0)
 ;      Function Value - 0 if DSS Unit not sending to PCE or input
"RTN","ECUTL0",13,0)
 ;                           parameters not passed in
"RTN","ECUTL0",14,0)
 ;                       1 if DSS Unit sending to PCE
"RTN","ECUTL0",15,0)
 ;
"RTN","ECUTL0",16,0)
 N ECDSS,ECSEND
"RTN","ECUTL0",17,0)
 ;
"RTN","ECUTL0",18,0)
 ;- Drops out if invalid condition
"RTN","ECUTL0",19,0)
 D
"RTN","ECUTL0",20,0)
 . I '$G(DSSU),($G(INOUT)="") S ECDSS=0 Q
"RTN","ECUTL0",21,0)
 .;
"RTN","ECUTL0",22,0)
 .;- Get 'Send to PCE' field
"RTN","ECUTL0",23,0)
 . S ECSEND=$P($G(^ECD(+DSSU,0)),"^",14)
"RTN","ECUTL0",24,0)
 . I ECSEND="A" S ECDSS=1 ;139 Change logic to set to 1 if sending (asking SC related questions)
"RTN","ECUTL0",25,0)
 . E  S ECDSS=0 ;139 else we're not asking SC related questions
"RTN","ECUTL0",26,0)
 Q ECDSS
"RTN","ECUTL0",27,0)
 ;
"RTN","ECUTL0",28,0)
 ;
"RTN","ECUTL0",29,0)
ELGLST() ;  Display list of patient eligibilities and allow user to
"RTN","ECUTL0",30,0)
 ;          select eligibility, given ELIG^VADPT has been previously called.
"RTN","ECUTL0",31,0)
 ;
"RTN","ECUTL0",32,0)
 ;   Input:
"RTN","ECUTL0",33,0)
 ;      None
"RTN","ECUTL0",34,0)
 ;  Output:
"RTN","ECUTL0",35,0)
 ;      Function value - IEN of eligibility from ELIGIBILITY CODE file
"RTN","ECUTL0",36,0)
 ;                       (#8) or 0 if unsuccessful
"RTN","ECUTL0",37,0)
 ;
"RTN","ECUTL0",38,0)
 N ECALLEL,ECELIEN,ECELIG,ECPRIMEL
"RTN","ECUTL0",39,0)
 S (ECELIEN,ECELIG)=0
"RTN","ECUTL0",40,0)
 ;
"RTN","ECUTL0",41,0)
 ;- If VAEL not previously called, exit with error condition
"RTN","ECUTL0",42,0)
 I '$D(VAEL)!('$G(VAEL(1))) G ELGLSTQ
"RTN","ECUTL0",43,0)
ELIG S ECALLEL=""
"RTN","ECUTL0",44,0)
 S ECPRIMEL=$P(VAEL(1),"^",2)
"RTN","ECUTL0",45,0)
 W !!,"THIS PATIENT HAS OTHER ENTITLED ELIGIBILITIES:"
"RTN","ECUTL0",46,0)
 ;
"RTN","ECUTL0",47,0)
 ;- Display all of patient's eligibilities
"RTN","ECUTL0",48,0)
 F ECELIEN=0:0 S ECELIEN=$O(VAEL(1,ECELIEN)) Q:'ECELIEN  D
"RTN","ECUTL0",49,0)
 . W !?5,$P(VAEL(1,ECELIEN),"^",2)
"RTN","ECUTL0",50,0)
 . S ECALLEL=ECALLEL_"^"_$P(VAEL(1,ECELIEN),"^",2)
"RTN","ECUTL0",51,0)
 ;
"RTN","ECUTL0",52,0)
 ;- Use patient's primary elig as default
"RTN","ECUTL0",53,0)
CHOOSE W !!,"ENTER THE ELIGIBILITY FOR THIS APPOINTMENT: "_ECPRIMEL_"// "
"RTN","ECUTL0",54,0)
 ;
"RTN","ECUTL0",55,0)
 ;- If return, uparrow, or time out get prim elig w/o searching for match
"RTN","ECUTL0",56,0)
 R X:DTIME G PRIMELG:"^"[X!('$T)  S X=$$UPPER^VALM1(X) G ELIG:X["?",CHOOSE:ECALLEL'[("^"_X)
"RTN","ECUTL0",57,0)
 S ECPRIMEL=X_$P($P(ECALLEL,"^"_X,2),"^")
"RTN","ECUTL0",58,0)
 W $P($P(ECALLEL,"^"_X,2),"^")
"RTN","ECUTL0",59,0)
 ;
"RTN","ECUTL0",60,0)
 ;- If match found, exit with eligibility IEN from file #8
"RTN","ECUTL0",61,0)
 F ECELIEN=0:0 S ECELIEN=$O(VAEL(1,ECELIEN)) Q:'ECELIEN  I $P(VAEL(1,ECELIEN),"^",2)=ECPRIMEL S ECELIG=+ECELIEN G ELGLSTQ
"RTN","ECUTL0",62,0)
 ;
"RTN","ECUTL0",63,0)
 ;- If default or error cond exit with IEN of primary elig from file #8
"RTN","ECUTL0",64,0)
PRIMELG I ('$T)!(X["^") D ELIGERR^ECUTL0
"RTN","ECUTL0",65,0)
 I ('$T)!(X["^")!($P(VAEL(1),"^",2)=ECPRIMEL) S ECELIG=+$P(VAEL(1),"^")
"RTN","ECUTL0",66,0)
 ;
"RTN","ECUTL0",67,0)
ELGLSTQ Q ECELIG
"RTN","ECUTL0",68,0)
 ;
"RTN","ECUTL0",69,0)
 ;
"RTN","ECUTL0",70,0)
MULTELG(DFN) ;  Determine if patient has multiple eligibilites (calls
"RTN","ECUTL0",71,0)
 ;          ELIG^VADPT).
"RTN","ECUTL0",72,0)
 ;
"RTN","ECUTL0",73,0)
 ;   Input:
"RTN","ECUTL0",74,0)
 ;      DFN - IEN of Patient file (#2)
"RTN","ECUTL0",75,0)
 ;  Output:
"RTN","ECUTL0",76,0)
 ;      Function value - 0 if no additional eligibilities exist,
"RTN","ECUTL0",77,0)
 ;      otherwise a number greater than 0 if addt'l eligibilities exist
"RTN","ECUTL0",78,0)
 ;
"RTN","ECUTL0",79,0)
 D ELIG^VADPT
"RTN","ECUTL0",80,0)
 Q +$O(VAEL(1,0))
"RTN","ECUTL0",81,0)
 ;
"RTN","ECUTL0",82,0)
 ;
"RTN","ECUTL0",83,0)
ASKIF(ELIGNM) ;  Ask user whether to edit the eligibility during the edit
"RTN","ECUTL0",84,0)
 ;          of an existing EC Patient file (#721) record
"RTN","ECUTL0",85,0)
 ;
"RTN","ECUTL0",86,0)
 ;   Input:
"RTN","ECUTL0",87,0)
 ;      ELIGNM - Eligibility Name
"RTN","ECUTL0",88,0)
 ;
"RTN","ECUTL0",89,0)
 ;  Output:
"RTN","ECUTL0",90,0)
 ;      Function value - 1 if user wants to edit eligibility
"RTN","ECUTL0",91,0)
 ;                       0 if user does not want to edit eligibility
"RTN","ECUTL0",92,0)
 ;                      -1 if uparrow or time out
"RTN","ECUTL0",93,0)
 ;
"RTN","ECUTL0",94,0)
 N DIR
"RTN","ECUTL0",95,0)
 Q:$G(ELIGNM)="" 0
"RTN","ECUTL0",96,0)
 ;- Display patient's current eligibility
"RTN","ECUTL0",97,0)
 W !!,"The eligibility previously filed for this patient's procedure is:",!?5,ELIGNM,!!
"RTN","ECUTL0",98,0)
 ;- Ask user
"RTN","ECUTL0",99,0)
 S DIR(0)="YA"
"RTN","ECUTL0",100,0)
 S DIR("A")="Do you wish to edit the patient's eligibility? "
"RTN","ECUTL0",101,0)
 S DIR("B")="NO"
"RTN","ECUTL0",102,0)
 D ^DIR
"RTN","ECUTL0",103,0)
 Q $S($D(DIRUT):-1,'Y:0,1:Y)
"RTN","ECUTL0",104,0)
 ;
"RTN","ECUTL0",105,0)
 ;
"RTN","ECUTL0",106,0)
ELIGERR ;  If user uparrows or times out while choosing eligibility, display
"RTN","ECUTL0",107,0)
 ;  primary eligibility msg to screen
"RTN","ECUTL0",108,0)
 ;
"RTN","ECUTL0",109,0)
 ;   Input:
"RTN","ECUTL0",110,0)
 ;      None
"RTN","ECUTL0",111,0)
 ;
"RTN","ECUTL0",112,0)
 ;  Output:
"RTN","ECUTL0",113,0)
 ;      Display primary eligibility message to screen
"RTN","ECUTL0",114,0)
 ;
"RTN","ECUTL0",115,0)
 W !!?5,"No eligibility entered.  The primary eligibility of the patient"
"RTN","ECUTL0",116,0)
 W !?5,"will be sent to PCE for workload reporting (if the patient's"
"RTN","ECUTL0",117,0)
 W !?5,"procedure data is complete).",!
"RTN","ECUTL0",118,0)
 Q
"RTN","ECUTL0",119,0)
 ;
"RTN","ECUTL0",120,0)
 ;
"RTN","ECUTL0",121,0)
INOUTPT(DFN,PROCDT) ;  Determine inpatient/outpatient status
"RTN","ECUTL0",122,0)
 ;
"RTN","ECUTL0",123,0)
 ;   Input:
"RTN","ECUTL0",124,0)
 ;      DFN - IEN of Patient file (#2)
"RTN","ECUTL0",125,0)
 ;      PROCDT - Procedure Date/Time
"RTN","ECUTL0",126,0)
 ;
"RTN","ECUTL0",127,0)
 ;  Output:
"RTN","ECUTL0",128,0)
 ;      Function value - I if inpatient, O if outpatient, null if error
"RTN","ECUTL0",129,0)
 ;
"RTN","ECUTL0",130,0)
 N ECPTSTAT
"RTN","ECUTL0",131,0)
 S ECPTSTAT=1
"RTN","ECUTL0",132,0)
 I '$G(DFN)!('$G(PROCDT)) S ECPTSTAT=0
"RTN","ECUTL0",133,0)
 ;
"RTN","ECUTL0",134,0)
 ;- Call inpat/outpat function if both input variables are present
"RTN","ECUTL0",135,0)
 I ECPTSTAT D
"RTN","ECUTL0",136,0)
 . S ECPTSTAT=$$INP^SDAM2(DFN,PROCDT)
"RTN","ECUTL0",137,0)
 . I $G(ECPTSTAT)="" S ECPTSTAT="O"
"RTN","ECUTL0",138,0)
 ;
"RTN","ECUTL0",139,0)
 ;- If either one of input variables are missing, return null (otherwise 
"RTN","ECUTL0",140,0)
 ;  return "I" or "O")
"RTN","ECUTL0",141,0)
 Q $S(ECPTSTAT=0:"",1:ECPTSTAT)
"RTN","ECUTL0",142,0)
 ;
"RTN","ECUTL0",143,0)
 ;
"RTN","ECUTL0",144,0)
DSPSTAT(ECSTAT) ;  Display inpatient/outpatient status
"RTN","ECUTL0",145,0)
 ;
"RTN","ECUTL0",146,0)
 ;   Input:
"RTN","ECUTL0",147,0)
 ;      ECSTAT - Inpatient/Outpatient status (I=inpatient, O=outpatient)
"RTN","ECUTL0",148,0)
 ;
"RTN","ECUTL0",149,0)
 ;  Output:
"RTN","ECUTL0",150,0)
 ;      Display inpatient/outpatient status to screen
"RTN","ECUTL0",151,0)
 ;
"RTN","ECUTL0",152,0)
 N ECTXT
"RTN","ECUTL0",153,0)
 S ECTXT="This patient is an "
"RTN","ECUTL0",154,0)
 W !!,ECTXT_$S(ECSTAT="I":"Inpatient",1:"Outpatient"),!
"RTN","ECUTL0",155,0)
 Q
"RTN","ECUTL0",156,0)
 ;
"RTN","ECUTL0",157,0)
 ;
"RTN","ECUTL0",158,0)
INOUTERR ;  Display inpat/outpat status error msg to screen and set exit
"RTN","ECUTL0",159,0)
 ;          variable
"RTN","ECUTL0",160,0)
 ;
"RTN","ECUTL0",161,0)
 ;   Input:
"RTN","ECUTL0",162,0)
 ;      None
"RTN","ECUTL0",163,0)
 ;
"RTN","ECUTL0",164,0)
 ;  Output:
"RTN","ECUTL0",165,0)
 ;      Display error message to screen
"RTN","ECUTL0",166,0)
 ;
"RTN","ECUTL0",167,0)
 W !,"Patient record data or procedure date/time data is missing.  No action taken."
"RTN","ECUTL0",168,0)
 S ECOUT=1
"RTN","ECUTL0",169,0)
 Q
"RTN","ECUTL3")
0^25^B35350036^B34886716
"RTN","ECUTL3",1,0)
ECUTL3 ;ALB/DAN - Event capture utilities (cont) ;2/9/18  14:58
"RTN","ECUTL3",2,0)
 ;;2.0;EVENT CAPTURE;**122,131,139**;8 May 96;Build 7
"RTN","ECUTL3",3,0)
INACTSCR(ACTION) ;Inactivate event code screens associated with inactive national procedure codes
"RTN","ECUTL3",4,0)
 ;
"RTN","ECUTL3",5,0)
 ;ACTION - optional
"RTN","ECUTL3",6,0)
 ;         0 - Don't inactivate, test what would happen
"RTN","ECUTL3",7,0)
 ;         1 - Inactivate identified event code screens
"RTN","ECUTL3",8,0)
 ;
"RTN","ECUTL3",9,0)
 N SCREEN,LOC,DSSU,ECIEN,DA,DIE,DR,ECSCR,ECPTR,ECDATA,ECFILE
"RTN","ECUTL3",10,0)
 S:'$D(ACTION) ACTION=0 ;If not sent in, assume testing
"RTN","ECUTL3",11,0)
 S ECSCR=0
"RTN","ECUTL3",12,0)
 F  S ECSCR=$O(^ECJ("B",ECSCR)) Q:+ECSCR=0  D
"RTN","ECUTL3",13,0)
 .S ECPTR=$P(ECSCR,"-",4),ECIEN=$O(^ECJ("B",ECSCR,0))
"RTN","ECUTL3",14,0)
 .Q:'$D(^ECJ(ECIEN,0))  ;Screen doesn't exist
"RTN","ECUTL3",15,0)
 .Q:+$P(^ECJ(ECIEN,0),"^",2)  ;Skip if event code screen is already inactive
"RTN","ECUTL3",16,0)
 .S ECFILE=$P(ECPTR,";",2)
"RTN","ECUTL3",17,0)
 .;ec screens pointing to file #725
"RTN","ECUTL3",18,0)
 .I ECFILE["EC(725" S ECDATA=$G(^EC(725,$P(ECPTR,";",1),0)) D
"RTN","ECUTL3",19,0)
 ..Q:$P(ECDATA,U,3)=""  ;Skip if national procedure code is active
"RTN","ECUTL3",20,0)
 ..I $P(ECDATA,U,3)>DT,ACTION Q  ;If inactivation date is in the future and we're inactivating event code screens, skip it as we don't want to inactivate screen until procedure is inactive
"RTN","ECUTL3",21,0)
 ..S DSSU=$P(ECSCR,"-",2) Q:DSSU=""  ;If no DSS unit, quit
"RTN","ECUTL3",22,0)
 ..S SCREEN(DSSU,ECIEN)="" ;put on list to inactivate if not already inactive
"RTN","ECUTL3",23,0)
 I $G(ACTION) S DSSU=0 F  S DSSU=$O(SCREEN(DSSU)) Q:'+DSSU  S ECIEN=0 F  S ECIEN=$O(SCREEN(DSSU,ECIEN)) Q:'+ECIEN  D
"RTN","ECUTL3",24,0)
 .S DA=ECIEN,DIE="^ECJ(",DR="1////"_$$DT^XLFDT D ^DIE ;Set inactivation date to today
"RTN","ECUTL3",25,0)
 ;
"RTN","ECUTL3",26,0)
MAIL ;Send email to group showing action taken
"RTN","ECUTL3",27,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,LOC,PRO,CNT,PX,CAT,CPT,ACLIN
"RTN","ECUTL3",28,0)
 S XMDUZ="Event Capture Package"
"RTN","ECUTL3",29,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","ECUTL3",30,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","ECUTL3",31,0)
 S XMSUB="Inactivation of Event Code Screens from inactive procedure codes"
"RTN","ECUTL3",32,0)
 S XMTEXT="ECTEXT("
"RTN","ECUTL3",33,0)
 S CNT=1
"RTN","ECUTL3",34,0)
 I '$D(SCREEN) D
"RTN","ECUTL3",35,0)
 .S ECTEXT(CNT)="No Event Code Screens were inactivated, as no inactive",CNT=CNT+1,ECTEXT(CNT)="EC Procedure Codes were found in use.",CNT=CNT+1
"RTN","ECUTL3",36,0)
 I $D(SCREEN) D
"RTN","ECUTL3",37,0)
 .S ECTEXT(CNT)="The following event code screens "_$S($G(ACTION):"",1:"would ")_"have been inactivated",CNT=CNT+1
"RTN","ECUTL3",38,0)
 .S ECTEXT(CNT)="because these Event Code Screens were associated",CNT=CNT+1
"RTN","ECUTL3",39,0)
 .S ECTEXT(CNT)="with inactive EC Procedure Codes.",CNT=CNT+1
"RTN","ECUTL3",40,0)
 I '$G(ACTION),$D(SCREEN) S ECTEXT(CNT)=" ",CNT=CNT+1 D
"RTN","ECUTL3",41,0)
 .S ECTEXT(CNT)="Inactivations have not yet occurred; this list represents event code",CNT=CNT+1,ECTEXT(CNT)="screens that will be inactivated automatically "_$S($G(DAYS):DAYS_" days ",1:"")_"in the future.",CNT=CNT+1
"RTN","ECUTL3",42,0)
 S ECTEXT(CNT)=" ",CNT=CNT+1
"RTN","ECUTL3",43,0)
 S DSSU=0 F  S DSSU=$O(SCREEN(DSSU)) Q:'+DSSU  D
"RTN","ECUTL3",44,0)
 .S ECTEXT(CNT)="DSS UNIT: "_$$GET1^DIQ(724,DSSU,.01,"E")_" ("_DSSU_")",CNT=CNT+1
"RTN","ECUTL3",45,0)
 .S ECIEN=0 F  S ECIEN=$O(SCREEN(DSSU,ECIEN)) Q:'+ECIEN  D
"RTN","ECUTL3",46,0)
 ..S LOC=$$GET1^DIQ(4,$P($P(^ECJ(ECIEN,0),U),"-"),.01,"E"),PRO=$G(^EC(725,+$P($P(^ECJ(ECIEN,0),U),"-",4),0)),PX=$P(PRO,U,2)_" "_$P(PRO,U)
"RTN","ECUTL3",47,0)
 ..S ECTEXT(CNT)="  LOC: "_LOC_$$REPEAT^XLFSTR(" ",(27-$L(LOC)))_"PROC: "_PX,CNT=CNT+1
"RTN","ECUTL3",48,0)
 ..S CAT=$P($P(^ECJ(ECIEN,0),U),"-",3),CAT=$S(CAT:$P($G(^EC(726,CAT,0)),U),1:""),CPT=$$GET1^DIQ(81,+$P(PRO,U,5),.01,"E")
"RTN","ECUTL3",49,0)
 ..S ECTEXT(CNT)="  CAT: "_CAT_$$REPEAT^XLFSTR(" ",(27-$L(CAT)))_"CPT: "_CPT,CNT=CNT+1
"RTN","ECUTL3",50,0)
 ..S ACLIN=$$GET1^DIQ(44,+$P(^ECJ(ECIEN,"PRO"),U,4),.01,"E"),ECTEXT(CNT)="  DEFAULT ASSOCIATED CLINIC: "_ACLIN,CNT=CNT+1
"RTN","ECUTL3",51,0)
 ..S ECTEXT(CNT)=" ",CNT=CNT+1
"RTN","ECUTL3",52,0)
 D ^XMD ;Send email
"RTN","ECUTL3",53,0)
 Q
"RTN","ECUTL3",54,0)
 ;
"RTN","ECUTL3",55,0)
QINACT ;Queue the inactivation of event code screens to happen
"RTN","ECUTL3",56,0)
 ;in the background.  Comes from "AC" cross reference of the
"RTN","ECUTL3",57,0)
 ;INACTIVE DATE (#2) field of file 725
"RTN","ECUTL3",58,0)
 N ZTRTN,ZTDTH,ZTDESC,ZTIO,ZTSK
"RTN","ECUTL3",59,0)
 S ZTRTN="INACTSCR^ECUTL3(1)",ZTDTH=$H,ZTDESC="Inactivate event code screens with inactive procedure codes",ZTIO="" D ^%ZTLOAD
"RTN","ECUTL3",60,0)
 Q
"RTN","ECUTL3",61,0)
 ;
"RTN","ECUTL3",62,0)
CHKDSS ;131,139 Inactivate any DSS units that are set to send no records or OOS and have an inactive/invalid stop code
"RTN","ECUTL3",63,0)
 N UNIT,DSS0,SC0,BAD,UPDATE
"RTN","ECUTL3",64,0)
 S UNIT=0 F  S UNIT=$O(^ECD(UNIT)) Q:'+UNIT  D
"RTN","ECUTL3",65,0)
 .S BAD=0
"RTN","ECUTL3",66,0)
 .S DSS0=$G(^ECD(UNIT,0))
"RTN","ECUTL3",67,0)
 .I $P(DSS0,U,6) Q  ;DSS Unit is inactive
"RTN","ECUTL3",68,0)
 .I $P(DSS0,U,14)="A" Q  ;139 only look at "send no records" and "OOS" units
"RTN","ECUTL3",69,0)
 .S SC0=$G(^DIC(40.7,+$P(DSS0,U,10),0)) ;Get stop code zero node
"RTN","ECUTL3",70,0)
 .I $P(SC0,U,3) I $P(SC0,U,3)'>DT S BAD=1 ;Stop code is inactive
"RTN","ECUTL3",71,0)
 .I $P(SC0,U,6)="S"!($P(SC0,U,6)="") S BAD=1 ;Stop code is a secondary code or is not set
"RTN","ECUTL3",72,0)
 .I $L($P(SC0,U,2))'=3 S BAD=1 ;Stop code is not 3 digits in length
"RTN","ECUTL3",73,0)
 .I BAD S UPDATE($P(DSS0,U)_U_UNIT)="" S $P(^ECD(UNIT,0),U,6)=1 ;Store changed DSS unit for report and inactivate DSS unit
"RTN","ECUTL3",74,0)
 ;Send results via email
"RTN","ECUTL3",75,0)
 N XMSUB,ECTEXT,XMDUZ,XMY,XMZ,XMTEXT,KIEN,DIFROM,NAME,CNT
"RTN","ECUTL3",76,0)
 S XMDUZ="Event Capture Package"
"RTN","ECUTL3",77,0)
 S XMY($G(DUZ,.5))="" ;Set recipient to installer or postmaster
"RTN","ECUTL3",78,0)
 S KIEN=0 F  S KIEN=$O(^XUSEC("ECMGR",KIEN)) Q:'+KIEN  S XMY(KIEN)="" ;Holders of ECMGR included in email, XUSEC read allowed by DBIA #10076
"RTN","ECUTL3",79,0)
 S ECTEXT(1)="The check for DSS Units with a Send to PCE setting of 'Send no records'"
"RTN","ECUTL3",80,0)
 S ECTEXT(2)="or 'OOS' and an invalid/inactive stop code has completed." ;139
"RTN","ECUTL3",81,0)
 S ECTEXT(3)="" ;139
"RTN","ECUTL3",82,0)
 S ECTEXT(4)="Below are the results." ;139
"RTN","ECUTL3",83,0)
 S ECTEXT(5)="" ;139
"RTN","ECUTL3",84,0)
 I '$D(UPDATE) S ECTEXT(6)="No DSS Units were identified.  No further action is required." ;139
"RTN","ECUTL3",85,0)
 S CNT=6 ;139 start with line 6 to add to message
"RTN","ECUTL3",86,0)
 I $D(UPDATE) D
"RTN","ECUTL3",87,0)
 .S ECTEXT(CNT)="The following DSS Units were inactivated:",CNT=CNT+1,ECTEXT(CNT)="",CNT=CNT+1
"RTN","ECUTL3",88,0)
 .S ECTEXT(CNT)="NAME"_$$REPEAT^XLFSTR(" ",28)_"DSS IEN",CNT=CNT+1,ECTEXT(CNT)="----"_$$REPEAT^XLFSTR(" ",28)_"-------",CNT=CNT+1
"RTN","ECUTL3",89,0)
 .S NAME="" F  S NAME=$O(UPDATE(NAME)) Q:NAME=""  S ECTEXT(CNT)=$P(NAME,U)_$$REPEAT^XLFSTR(" ",(32-$L($P(NAME,U))))_$P(NAME,U,2),CNT=CNT+1
"RTN","ECUTL3",90,0)
 S XMTEXT="ECTEXT(",XMSUB="DSS Unit stop code review"
"RTN","ECUTL3",91,0)
 D ^XMD ;Send email
"RTN","ECUTL3",92,0)
 Q
"RTN","ECUURPC")
0^27^B6184913^B6143414
"RTN","ECUURPC",1,0)
ECUURPC ;ALB/JAM - Event Capture Data Entry Broker Utilities ;3/29/18  13:59
"RTN","ECUURPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,42,49,94,95,76,104,124,139**;8 May 96;Build 7
"RTN","ECUURPC",3,0)
 ;
"RTN","ECUURPC",4,0)
 ; Reference to $$CODEN^ICDEX supported by ICR #5747
"RTN","ECUURPC",5,0)
 ;
"RTN","ECUURPC",6,0)
ECHELP(RESULTS,ECARY) ;
"RTN","ECUURPC",7,0)
 ;
"RTN","ECUURPC",8,0)
 ;Broker call returns the entries from HELP FILE #9.2
"RTN","ECUURPC",9,0)
 ;        RPC: EC GETSCNHELP
"RTN","ECUURPC",10,0)
 ;INPUTS   ECARY - Contains the following elements
"RTN","ECUURPC",11,0)
 ;          HLPDA  - Help Frame Name
"RTN","ECUURPC",12,0)
 ;
"RTN","ECUURPC",13,0)
 ;OUTPUTS  RESULTS - Array of help text in the HELP FRAM File (#9.2)
"RTN","ECUURPC",14,0)
 ;
"RTN","ECUURPC",15,0)
 N HLPDA,DIC,X,Y
"RTN","ECUURPC",16,0)
 S HLPDA=$G(ECARY) I HLPDA="" Q
"RTN","ECUURPC",17,0)
 D SETENV^ECUMRPC K ^TMP($J,"ECHELP")
"RTN","ECUURPC",18,0)
 S DIC="^DIC(9.2,",DIC(0)="MN",X=HLPDA
"RTN","ECUURPC",19,0)
 D ^DIC M ^TMP($J,"ECHELP")=^DIC(9.2,+Y,1)
"RTN","ECUURPC",20,0)
 I $D(^TMP($J,"ECHELP")) D
"RTN","ECUURPC",21,0)
 . S $P(^TMP($J,"ECHELP",0),U)=$P(^DIC(9.2,+Y,0),U,2)
"RTN","ECUURPC",22,0)
 S RESULTS=$NA(^TMP($J,"ECHELP"))
"RTN","ECUURPC",23,0)
 Q
"RTN","ECUURPC",24,0)
FNDIEN(RESULTS,ECARY) ;find IEN
"RTN","ECUURPC",25,0)
 ;Broker call returns the IEN from a file
"RTN","ECUURPC",26,0)
 ;        RPC: EC GETIEN
"RTN","ECUURPC",27,0)
 ;INPUTS   ECARY - Contains the following data elements
"RTN","ECUURPC",28,0)
 ;          FIL  - File number
"RTN","ECUURPC",29,0)
 ;          TXT  - .01 description
"RTN","ECUURPC",30,0)
 ;
"RTN","ECUURPC",31,0)
 ;OUTPUTS  RESULTS - File IEN
"RTN","ECUURPC",32,0)
 ;
"RTN","ECUURPC",33,0)
 N TXT,FIL,DIC,X,Y
"RTN","ECUURPC",34,0)
 D SETENV^ECUMRPC
"RTN","ECUURPC",35,0)
 S FIL=$P(ECARY,U),TXT=$P(ECARY,U,2) I TXT=""!(FIL="") Q
"RTN","ECUURPC",36,0)
 ; For lookups on #80, use approved API
"RTN","ECUURPC",37,0)
 I FIL=80 S RESULTS=+$$CODEN^ICDEX(TXT,80) Q
"RTN","ECUURPC",38,0)
 ;
"RTN","ECUURPC",39,0)
 S DIC=FIL,DIC(0)="MN",X=TXT
"RTN","ECUURPC",40,0)
 I FIL=81.3 S DIC("S")="I +$P($$MOD^ICPTMOD(Y,""I""),U,7)=1"
"RTN","ECUURPC",41,0)
 D ^DIC I Y=-1 Q
"RTN","ECUURPC",42,0)
 S RESULTS=+Y
"RTN","ECUURPC",43,0)
 Q
"RTN","ECUURPC",44,0)
ECDATE(RESULTS,ECARY) ;
"RTN","ECUURPC",45,0)
 ;
"RTN","ECUURPC",46,0)
 ;Broker call returns an Fileman internal date
"RTN","ECUURPC",47,0)
 ;        RPC: EC GETDATE
"RTN","ECUURPC",48,0)
 ;INPUTS   ECARY - Contains the following elements
"RTN","ECUURPC",49,0)
 ;          DTSTR  - Date String
"RTN","ECUURPC",50,0)
 ;          FLG    - Date Flag (optional)
"RTN","ECUURPC",51,0)
 ;
"RTN","ECUURPC",52,0)
 ;OUTPUTS  RESULTS - A valid Fileman date format^External format
"RTN","ECUURPC",53,0)
 ;
"RTN","ECUURPC",54,0)
 N ECDTSTR,DIC,X,Y,DTSTR,FLG
"RTN","ECUURPC",55,0)
 D SETENV^ECUMRPC
"RTN","ECUURPC",56,0)
 S DTSTR=$P(ECARY,U),FLG=$P(ECARY,U,2) I DTSTR="" Q
"RTN","ECUURPC",57,0)
 S X=DTSTR,%DT="XT"_$S(FLG="R":"R",1:""),%DT(0)="-NOW" D ^%DT
"RTN","ECUURPC",58,0)
 I +Y<1 S RESULTS="0^Invalid Date/Time" Q
"RTN","ECUURPC",59,0)
 S RESULTS=Y D D^DIQ
"RTN","ECUURPC",60,0)
 S RESULTS=RESULTS_U_Y
"RTN","ECUURPC",61,0)
 Q
"RTN","ECUURPC",62,0)
PATCH(RESULTS,ECARY)    ;
"RTN","ECUURPC",63,0)
 ;
"RTN","ECUURPC",64,0)
 ;Broker call returns 1 if patch X is installed
"RTN","ECUURPC",65,0)
 ;        RPC: EC GETPATCH
"RTN","ECUURPC",66,0)
 ;INPUTS   ECARY - contains the patch number
"RTN","ECUURPC",67,0)
 ;
"RTN","ECUURPC",68,0)
 ;OUTPUTS  RESULTS 1 OR 0
"RTN","ECUURPC",69,0)
 ;
"RTN","ECUURPC",70,0)
 I ECARY="" Q
"RTN","ECUURPC",71,0)
 D SETENV^ECUMRPC
"RTN","ECUURPC",72,0)
 S RESULTS=$$PATCH^XPDUTL(ECARY)
"RTN","ECUURPC",73,0)
 Q
"RTN","ECUURPC",74,0)
VERSRV(RESULTS,ECARY,VERSION)   ; Return server version of option name and 
"RTN","ECUURPC",75,0)
 ; minimum GUI client version.
"RTN","ECUURPC",76,0)
 ;
"RTN","ECUURPC",77,0)
 ;Server/client version consist of 4 pieces, namely
"RTN","ECUURPC",78,0)
 ;    major version.minor version.release.build  (ex. 2.0.10.1)
"RTN","ECUURPC",79,0)
 ;
"RTN","ECUURPC",80,0)
 ;Broker call returns server version of option name
"RTN","ECUURPC",81,0)
 ;        RPC: EC GETVERSION
"RTN","ECUURPC",82,0)
 ;INPUTS   ECARY - contains the option name
"RTN","ECUURPC",83,0)
 ;         VERSION - EC GUI client version ;stay in partition for session
"RTN","ECUURPC",84,0)
 ;
"RTN","ECUURPC",85,0)
 ;OUTPUTS  RESULTS version number OR null ("")
"RTN","ECUURPC",86,0)
 ;           current server version^minimum client version
"RTN","ECUURPC",87,0)
 ;
"RTN","ECUURPC",88,0)
 S ECCLVER=$G(VERSION)
"RTN","ECUURPC",89,0)
 I $G(ECARY)="" Q
"RTN","ECUURPC",90,0)
 N ECLST,ECMINV
"RTN","ECUURPC",91,0)
 S ECMINV="2.5.0.0"  ;139, Minimum version of EC GUI client
"RTN","ECUURPC",92,0)
 D FIND^DIC(19,"",1,"X",ECARY,1,,,,"ECLST")
"RTN","ECUURPC",93,0)
 I 'ECLST("DILIST",0) S RESULTS="" Q
"RTN","ECUURPC",94,0)
 S RESULTS=ECLST("DILIST","ID",1,1)
"RTN","ECUURPC",95,0)
 S RESULTS=$P(RESULTS,"version ",2)_U_ECMINV
"RTN","ECUURPC",96,0)
 Q
"RTN","ECV1RPC")
0^12^B18261455^B15098086
"RTN","ECV1RPC",1,0)
ECV1RPC ;ALB/ACS;Event Capture Spreadsheet Upload Broker Utilities ;3/1/18  10:24
"RTN","ECV1RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,33,49,61,131,139**;8 May 96;Build 7
"RTN","ECV1RPC",3,0)
 ;
"RTN","ECV1RPC",4,0)
IN(RESULTS,ECDATA) ;
"RTN","ECV1RPC",5,0)
 ;----------------------------------------------------------------------
"RTN","ECV1RPC",6,0)
 ;This broker entry point receives a row of data from the Event
"RTN","ECV1RPC",7,0)
 ;Capture GUI Spreadsheet (a module of the Event Capture GUI app).
"RTN","ECV1RPC",8,0)
 ;The data is validated and an array is returned to the spreadsheet
"RTN","ECV1RPC",9,0)
 ;module.
"RTN","ECV1RPC",10,0)
 ;
"RTN","ECV1RPC",11,0)
 ;          RPC: EC VALIDATE SPREADSHEET DATA
"RTN","ECV1RPC",12,0)
 ;
"RTN","ECV1RPC",13,0)
 ;INPUT     ECDATA  - Contains either the column headers or a row of
"RTN","ECV1RPC",14,0)
 ;                    spreadshet data.  Fields included are:
"RTN","ECV1RPC",15,0)
 ;                    Record number, station, SSN, patient last
"RTN","ECV1RPC",16,0)
 ;                    name, patient first name, DSS unit name, DSS
"RTN","ECV1RPC",17,0)
 ;                    unit number, DSS unit IEN, procedure code,
"RTN","ECV1RPC",18,0)
 ;                    volume, ordering section, encounter d/t,category,
"RTN","ECV1RPC",19,0)
 ;                    diag code, associated clinic name,
"RTN","ECV1RPC",20,0)
 ;                    Associated Clinic IEN, CPT Mod #1, CPT Mod #2, 
"RTN","ECV1RPC",21,0)
 ;                    CPT Mod #3, CPT Mod #4, CPT Mod #5, Agent Orange, 
"RTN","ECV1RPC",22,0)
 ;                    Ionizing Rad, Service connected, SW Asia, MST, 
"RTN","ECV1RPC",23,0)
 ;                    HNC, Combat Vet, SHAD, Camp Lejeune, Prov #1,
"RTN","ECV1RPC",24,0)
 ;                    Prov #2, Prov #3, Prov #4,Prov #5, Prov #6,
"RTN","ECV1RPC",25,0)
 ;                    Prov #7, patient status override flag, override 
"RTN","ECV1RPC",26,0)
 ;                    deceased flag and file duplicate(s) flag.
"RTN","ECV1RPC",27,0)
 ;
"RTN","ECV1RPC",28,0)
 ;OUTPUT    RESULTS - If an error is found during data validation,
"RTN","ECV1RPC",29,0)
 ;                    then the output contains an array of error
"RTN","ECV1RPC",30,0)
 ;                    messages:
"RTN","ECV1RPC",31,0)
 ;
"RTN","ECV1RPC",32,0)
 ;                    PIECE     Description
"RTN","ECV1RPC",33,0)
 ;                    -----     ------------------------
"RTN","ECV1RPC",34,0)
 ;                      1       Record number
"RTN","ECV1RPC",35,0)
 ;                      2       Column number (on spreadsheet)
"RTN","ECV1RPC",36,0)
 ;                              containing the record number
"RTN","ECV1RPC",37,0)
 ;                      3       Column number (on spreadsheet)
"RTN","ECV1RPC",38,0)
 ;                              containing the data in error
"RTN","ECV1RPC",39,0)
 ;                      4       Error message
"RTN","ECV1RPC",40,0)
 ;
"RTN","ECV1RPC",41,0)
 ;                  - If no errors are found during data validation,
"RTN","ECV1RPC",42,0)
 ;                    then the output contains a string of Event
"RTN","ECV1RPC",43,0)
 ;                    Capture data for that patient, beginning with
"RTN","ECV1RPC",44,0)
 ;                    the string "NO ERRORS":
"RTN","ECV1RPC",45,0)
 ;
"RTN","ECV1RPC",46,0)
 ;                    "NO ERRORS"^Patient SSN IEN^Encounter Date/Time^
"RTN","ECV1RPC",47,0)
 ;                    Station IEN^DSS Unit IEN^Category^Procedure^Volume
"RTN","ECV1RPC",48,0)
 ;                    ^Ordering Section IEN^User IEN^Primary Diagnosis^
"RTN","ECV1RPC",49,0)
 ;                    Associated ClinicCPT Mod #1 IEN^CPT Mod #2 IEN^
"RTN","ECV1RPC",50,0)
 ;                    CPT Mod #3 IEN^CPT Mod #4 IEN^CPT Mode #5 IEN^
"RTN","ECV1RPC",51,0)
 ;                    AO^Ion Rad^SC^SW Asia^MST^HNC^CV^SHAD^Camp 
"RTN","ECV1RPC",52,0)
 ;                    Lejeune^Prov 1^Prov 2^Prov 3^Prov 4^Prov 5^Prov 6^
"RTN","ECV1RPC",53,0)
 ;                    Prov 7^Patient Status^
"RTN","ECV1RPC",54,0)
 ;                 
"RTN","ECV1RPC",55,0)
 ;OTHER     ^TMP($J,"COLS") will store the column/data order
"RTN","ECV1RPC",56,0)
 ;          (used as data 'piece') of the input data string.
"RTN","ECV1RPC",57,0)
 ;          For example:
"RTN","ECV1RPC",58,0)
 ;
"RTN","ECV1RPC",59,0)
 ;          ^TMP($J,"COLS","ECRECPC")=1   => Record number is 1st piece
"RTN","ECV1RPC",60,0)
 ;          ^TMP($J,"COLS","ECSTAPC")=2   => Station is 2nd piece
"RTN","ECV1RPC",61,0)
 ;
"RTN","ECV1RPC",62,0)
 ;SPECIAL PROCESSING
"RTN","ECV1RPC",63,0)
 ;          An exception to the above described output exists when no
"RTN","ECV1RPC",64,0)
 ;          exact match is found on the provider.  In this case, some
"RTN","ECV1RPC",65,0)
 ;          provider info will be sent back with the error message
"RTN","ECV1RPC",66,0)
 ;          so the user can determine which provider they want.  For
"RTN","ECV1RPC",67,0)
 ;          example, provider JONES,WILLIAM is entered by the user, but
"RTN","ECV1RPC",68,0)
 ;          the file contains JONES,WILLIAM H and JONES,WILLIAM J.
"RTN","ECV1RPC",69,0)
 ;          Both of those providers and their associated information 
"RTN","ECV1RPC",70,0)
 ;          will be sent with the error message.
"RTN","ECV1RPC",71,0)
 ;       
"RTN","ECV1RPC",72,0)
 ;State Home Spreadsheet
"RTN","ECV1RPC",73,0)
 ;        If incoming data in ECDATA is from a state home spreadsheet
"RTN","ECV1RPC",74,0)
 ;        then the first piece of ECDATA will be set to 'State Home
"RTN","ECV1RPC",75,0)
 ;        Record'.  This identifier will be used when processing the
"RTN","ECV1RPC",76,0)
 ;        location associated with the record.
"RTN","ECV1RPC",77,0)
 ;----------------------------------------------------------------------
"RTN","ECV1RPC",78,0)
 ;
"RTN","ECV1RPC",79,0)
INIT ;-- piece numbers (associated with column numbers in the spreadsheet)
"RTN","ECV1RPC",80,0)
 N ECRECPC,ECSTAPC,ECSSNPC,ECPATLPC,ECPATFPC,ECDSSPC,ECDCMPC,ECUNITPC
"RTN","ECV1RPC",81,0)
 N ECPROCPC,ECVOLPC,ECOSPC,ECPRV1PC,ECENCPC,ECCATPC,ECDXPC ;131
"RTN","ECV1RPC",82,0)
 N ECCLNNPC,ECCLNIPC,ECMOD1PC,ECMOD2PC,ECMOD3PC,ECMOD4PC,ECMOD5PC,ECAOPC,ECIRPC,ECSCPC,ECSWAPC,ECMSTPC,ECHNCPC,ECCVPC,ECSHADPC,ECCLPC ;131
"RTN","ECV1RPC",83,0)
 N ECPRV2PC,ECPRV3PC,ECPRV4PC,ECPRV5PC,ECPRV6PC,ECPRV7PC ;131
"RTN","ECV1RPC",84,0)
 ;-- spreadsheet values entered by user
"RTN","ECV1RPC",85,0)
 N ECRECV,ECSTAV,ECSSNV,ECPATLV,ECPATFV,ECPATV,ECDSSV,ECDCMV,ECUNITV
"RTN","ECV1RPC",86,0)
 N ECPROCV,ECVOLV,ECOSV,ECPRV1V,ECENCV,ECCATV,ECDXV ;131
"RTN","ECV1RPC",87,0)
 N ECCLNNV,ECPSTATV,ECDECPAT,ECFILDUP ;131
"RTN","ECV1RPC",88,0)
 N ECPRV2V,ECPRV3V,ECPRV4V,ECPRV5V,ECPRV6V,ECPRV7V,ECCLNIV,ECMOD1V,ECMOD2V,ECMOD3V,ECMOD4V,ECMOD5V,ECAOV,ECIRV,ECSCV,ECSWAV,ECMSTV,ECHNCV,ECCVV,ECSHADV,ECCLV ;131
"RTN","ECV1RPC",89,0)
 ;-- error flags and derived data
"RTN","ECV1RPC",90,0)
 N ECERR,ECERRFLG,ECERRMSG,ECCOLERR,ECPRVIEN,ECOSIEN,ECVSSN,ECDSSIEN
"RTN","ECV1RPC",91,0)
 N ECINDEX,ECSSNIEN,ECPCLASS,ECPRVTYP,ECCATIEN,ECDXIEN,ECCLNIEN
"RTN","ECV1RPC",92,0)
 N ECPSTAT,ECSOURCE ;139
"RTN","ECV1RPC",93,0)
 ;
"RTN","ECV1RPC",94,0)
 S U="^"
"RTN","ECV1RPC",95,0)
 S (ECINDEX,ECERR)=0
"RTN","ECV1RPC",96,0)
 K RESULTS
"RTN","ECV1RPC",97,0)
 ;
"RTN","ECV1RPC",98,0)
 ;--Call utility program to set up piece numbers and column header info
"RTN","ECV1RPC",99,0)
 I ECDATA["COLHEADERS" D ECHDRS^ECU1RPC(ECDATA) Q
"RTN","ECV1RPC",100,0)
 ;
"RTN","ECV1RPC",101,0)
 I ECDATA["END OF PROCESSING" D CLEANUP Q
"RTN","ECV1RPC",102,0)
 I $P(ECDATA,U)="State Home Record" S ECSOURCE="STATE HOME",ECDATA=$P(ECDATA,U,2,999) ;139 For state home records, strip off state home identifier before processing
"RTN","ECV1RPC",103,0)
 ;
"RTN","ECV1RPC",104,0)
MAIN ;--Call utility program to get piece numbers and set up data values
"RTN","ECV1RPC",105,0)
 D GETDATA^ECU1RPC(ECDATA)
"RTN","ECV1RPC",106,0)
 ;
"RTN","ECV1RPC",107,0)
 ;--Call validation routines to validate the data
"RTN","ECV1RPC",108,0)
 D ^ECV2RPC
"RTN","ECV1RPC",109,0)
 D ^ECV3RPC
"RTN","ECV1RPC",110,0)
 D ^ECV4RPC
"RTN","ECV1RPC",111,0)
 ;
"RTN","ECV1RPC",112,0)
FINAL ;If no errors, send data back to spreadsheet module
"RTN","ECV1RPC",113,0)
 ;note: ECDXIEN and ECCLNIEN will be set to null if the record is 
"RTN","ECV1RPC",114,0)
 ;not being sent to PCE or the DSS Unit is an OOS type unit.
"RTN","ECV1RPC",115,0)
 ;For OOS type DSS units, the encoutner status values (combat vet, etc.)
"RTN","ECV1RPC",116,0)
 ;will be returned as null as they aren't needed.
"RTN","ECV1RPC",117,0)
 ;
"RTN","ECV1RPC",118,0)
 I '($D(RESULTS(1))) D
"RTN","ECV1RPC",119,0)
 . N RESDATA
"RTN","ECV1RPC",120,0)
 . S RESDATA="NO ERRORS"_U_ECSSNIEN_U_ECENCV_U_ECSTAV_U_ECDSSIEN ;131
"RTN","ECV1RPC",121,0)
 . S RESDATA=RESDATA_U_ECCATIEN_U_ECPROCV_U_ECVOLV ;131
"RTN","ECV1RPC",122,0)
 . S RESDATA=RESDATA_U_ECOSIEN_U_ECDUZ_U_$G(ECDXIEN) ;131
"RTN","ECV1RPC",123,0)
 . S RESDATA=RESDATA_U_$G(ECCLNIEN)_U_ECMOD1V_U_ECMOD2V_U_ECMOD3V_U_ECMOD4V_U_ECMOD5V ;131
"RTN","ECV1RPC",124,0)
 . S RESDATA=RESDATA_U_ECAOV_U_ECIRV_U_ECSCV_U_ECSWAV_U_ECMSTV_U_ECHNCV_U_ECCVV_U_ECSHADV_U_ECCLV ;131
"RTN","ECV1RPC",125,0)
 . S RESDATA=RESDATA_U_ECPRV1V_U_ECPRV2V_U_ECPRV3V_U_ECPRV4V_U_ECPRV5V_U_ECPRV6V_U_ECPRV7V_U_ECPSTAT_U ;131
"RTN","ECV1RPC",126,0)
 . S RESULTS(1)=RESDATA
"RTN","ECV1RPC",127,0)
 . Q
"RTN","ECV1RPC",128,0)
 Q
"RTN","ECV1RPC",129,0)
 ;
"RTN","ECV1RPC",130,0)
CLEANUP ;Delete temporary files
"RTN","ECV1RPC",131,0)
 I $D(^TMP($J,"COLS")) K ^TMP($J,"COLS")
"RTN","ECV1RPC",132,0)
 Q
"RTN","ECV2RPC")
0^13^B25981039^B23577970
"RTN","ECV2RPC",1,0)
ECV2RPC ;ALB/ACS - Event Capture Spreadsheet Validation ;10/31/17  12:33
"RTN","ECV2RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,30,49,95,139**;8 May 96;Build 7
"RTN","ECV2RPC",3,0)
 ;
"RTN","ECV2RPC",4,0)
 ;-----------------------------------------------------------------------
"RTN","ECV2RPC",5,0)
 ;       Validates the following Event Capture spreadsheet fields:
"RTN","ECV2RPC",6,0)
 ;       1. Location
"RTN","ECV2RPC",7,0)
 ;       2. Patient SSN
"RTN","ECV2RPC",8,0)
 ;       3. Patient Name
"RTN","ECV2RPC",9,0)
 ;-----------------------------------------------------------------------
"RTN","ECV2RPC",10,0)
 ;=======================================================================
"RTN","ECV2RPC",11,0)
 ;MODIFICATIONS
"RTN","ECV2RPC",12,0)
 ;08/2001    EC*2.0*30  Updated the error message for Location
"RTN","ECV2RPC",13,0)
 ;=======================================================================
"RTN","ECV2RPC",14,0)
 ;
"RTN","ECV2RPC",15,0)
 ;--Set up error flag
"RTN","ECV2RPC",16,0)
 S ECERRFLG=0
"RTN","ECV2RPC",17,0)
 ;
"RTN","ECV2RPC",18,0)
 ;--Location must be on the Institution file
"RTN","ECV2RPC",19,0)
 N ERR ;139
"RTN","ECV2RPC",20,0)
 I $G(ECSOURCE)="STATE HOME",'$D(^DIC(4,ECSTAV)) S ERR=1 ;139
"RTN","ECV2RPC",21,0)
 I $G(ECSOURCE)'="STATE HOME",'$D(^DIC(4,"D",ECSTAV)) S ERR=1 ;139
"RTN","ECV2RPC",22,0)
 I $G(ERR) D  ;139
"RTN","ECV2RPC",23,0)
 . ; Location not on the VistA file
"RTN","ECV2RPC",24,0)
 . S ECERRMSG=$P($T(STA1^ECV2RPC),";;",2)_$S($G(ECSOURCE)="STATE HOME":" - Invalid Internal Entry Number (IEN)",1:" - Invalid Station Number") ;139
"RTN","ECV2RPC",25,0)
 . S ECCOLERR=ECSTAPC
"RTN","ECV2RPC",26,0)
 . D ERROR
"RTN","ECV2RPC",27,0)
 . Q
"RTN","ECV2RPC",28,0)
 ;Check for multiple station number entries
"RTN","ECV2RPC",29,0)
 I $G(ECSOURCE)'="STATE HOME" D  ;139 Check for multiple station numbers
"RTN","ECV2RPC",30,0)
 .N LOC,C,STR
"RTN","ECV2RPC",31,0)
 .S (LOC,C)=0,STR=""
"RTN","ECV2RPC",32,0)
 .F  S LOC=$O(^DIC(4,"D",ECSTAV,LOC)) Q:'LOC  S C=C+1 D
"RTN","ECV2RPC",33,0)
 .. S LOC(LOC)=ECSTAV_", Location IEN "_LOC_", "_$P(^DIC(4,LOC,0),"^")
"RTN","ECV2RPC",34,0)
 .I C>1 S LOC=0 F  S LOC=$O(LOC(LOC)) Q:'LOC  D
"RTN","ECV2RPC",35,0)
 .. S ECERRMSG=$P($T(STA2^ECV2RPC),";;",2)_LOC(LOC)
"RTN","ECV2RPC",36,0)
 .. S ECCOLERR=ECSTAPC
"RTN","ECV2RPC",37,0)
 .. D ERROR
"RTN","ECV2RPC",38,0)
 .I C=1,$D(^DIC(4,"D",ECSTAV)) S ECSTAV=$O(^DIC(4,"D",ECSTAV,"")) ;get ien
"RTN","ECV2RPC",39,0)
 ;
"RTN","ECV2RPC",40,0)
 ;--Patient SSN must be on the Patient file--
"RTN","ECV2RPC",41,0)
 N ECNAMEU,ECVNAMEV,ECVNAME,ECSSNNUM,ECI
"RTN","ECV2RPC",42,0)
 S (ECSSNIEN,ECERRFLG)=0,ECSSNNUM=+ECSSNV
"RTN","ECV2RPC",43,0)
 I $L(ECSSNNUM)>9!$L(ECSSNV)>10 D
"RTN","ECV2RPC",44,0)
 . ; User has entered an SSN that is too long
"RTN","ECV2RPC",45,0)
 . S ECERRMSG=$P($T(SSN5^ECV2RPC),";;",2)
"RTN","ECV2RPC",46,0)
 . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",47,0)
 . D ERROR
"RTN","ECV2RPC",48,0)
 . Q
"RTN","ECV2RPC",49,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",50,0)
 . ; -add leading zeros if needed
"RTN","ECV2RPC",51,0)
 . I $L(ECSSNNUM)<9 S ECSSNV=$E("000000000",1,9-$L(ECSSNNUM))_ECSSNNUM
"RTN","ECV2RPC",52,0)
 . I $L(ECSSNV)>10 D 
"RTN","ECV2RPC",53,0)
 . . ; User has entered an invalid SSN
"RTN","ECV2RPC",54,0)
 . . S ECERRMSG=$P($T(SSN5^ECV2RPC),";;",2)
"RTN","ECV2RPC",55,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",56,0)
 . . D ERROR
"RTN","ECV2RPC",57,0)
 . . Q
"RTN","ECV2RPC",58,0)
 . I 'ECERRFLG,$L(ECSSNV)=10 D
"RTN","ECV2RPC",59,0)
 . . I $E(ECSSNV,10,10)'="P" D
"RTN","ECV2RPC",60,0)
 . . . ; Invalid SSN
"RTN","ECV2RPC",61,0)
 . . . S ECERRMSG=$P($T(SSN5^ECV2RPC),";;",2)
"RTN","ECV2RPC",62,0)
 . . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",63,0)
 . . . D ERROR
"RTN","ECV2RPC",64,0)
 . . Q
"RTN","ECV2RPC",65,0)
 . I 'ECERRFLG,'$D(^DPT("SSN",ECSSNV)) D
"RTN","ECV2RPC",66,0)
 . . ; No SSN x-ref on patient file
"RTN","ECV2RPC",67,0)
 . . S ECERRMSG=$P($T(SSN1^ECV2RPC),";;",2)
"RTN","ECV2RPC",68,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",69,0)
 . . D ERROR
"RTN","ECV2RPC",70,0)
 . . Q
"RTN","ECV2RPC",71,0)
 . Q
"RTN","ECV2RPC",72,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",73,0)
 . ; -get SSN IEN
"RTN","ECV2RPC",74,0)
 . S ECSSNIEN=$O(^DPT("SSN",ECSSNV,0))
"RTN","ECV2RPC",75,0)
 . I 'ECSSNIEN D
"RTN","ECV2RPC",76,0)
 . . S ECERRMSG=$P($T(SSN2^ECV2RPC),";;",2)
"RTN","ECV2RPC",77,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",78,0)
 . . D ERROR
"RTN","ECV2RPC",79,0)
 . . Q
"RTN","ECV2RPC",80,0)
 . Q
"RTN","ECV2RPC",81,0)
 I 'ECERRFLG,'$D(^DPT(ECSSNIEN,0)) D
"RTN","ECV2RPC",82,0)
 . ; SSN record not found
"RTN","ECV2RPC",83,0)
 . S ECERRMSG=$P($T(SSN3^ECV2RPC),";;",2)
"RTN","ECV2RPC",84,0)
 . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",85,0)
 . D ERROR
"RTN","ECV2RPC",86,0)
 . Q
"RTN","ECV2RPC",87,0)
 ;
"RTN","ECV2RPC",88,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",89,0)
 . ; -Compare patient file ssn to patient ssn
"RTN","ECV2RPC",90,0)
 . S ECVSSN=$P(^DPT(ECSSNIEN,0),U,9)
"RTN","ECV2RPC",91,0)
 . I ECVSSN'=ECSSNV D
"RTN","ECV2RPC",92,0)
 . . ; Spreadsheet ssn doesn't match vista
"RTN","ECV2RPC",93,0)
 . . S ECERRMSG=$P($T(SSN4^ECV2RPC),";;",2)
"RTN","ECV2RPC",94,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",95,0)
 . . D ERROR
"RTN","ECV2RPC",96,0)
 . . Q
"RTN","ECV2RPC",97,0)
 . Q
"RTN","ECV2RPC",98,0)
 ;--Patient Name must match VistA name--
"RTN","ECV2RPC",99,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",100,0)
 . S ECVNAME=$P(^DPT(ECSSNIEN,0),U,1)
"RTN","ECV2RPC",101,0)
 . I '$D(ECVNAME) D
"RTN","ECV2RPC",102,0)
 . . ; Patient name missing from VistA file
"RTN","ECV2RPC",103,0)
 . . S ECERRMSG=$P($T(NAME1^ECV2RPC),";;",2)
"RTN","ECV2RPC",104,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",105,0)
 . . D ERROR
"RTN","ECV2RPC",106,0)
 . . Q
"RTN","ECV2RPC",107,0)
 . Q
"RTN","ECV2RPC",108,0)
 I 'ECERRFLG,'ECDECPAT D
"RTN","ECV2RPC",109,0)
 . N DFN,VADM S DFN=ECSSNIEN D 2^VADPT I +VADM(6) D
"RTN","ECV2RPC",110,0)
 . . S ECERRMSG="WARNING: [PATIENT DIED ON "_$P(VADM(6),U,2)_"]"
"RTN","ECV2RPC",111,0)
 . . S ECCOLERR=ECSSNPC
"RTN","ECV2RPC",112,0)
 . . D ERROR
"RTN","ECV2RPC",113,0)
 ; -- Patient last name check
"RTN","ECV2RPC",114,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",115,0)
 . F ECI=1:1:$L($P(ECPATV,",")) D  Q:ECERRFLG
"RTN","ECV2RPC",116,0)
 . .S ECVNAMEV=$E($P(ECVNAME,","),1,ECI),ECNAMEU=$E($P(ECPATV,","),1,ECI)
"RTN","ECV2RPC",117,0)
 . .I ECVNAMEV=ECNAMEU Q
"RTN","ECV2RPC",118,0)
 . .S ECERRMSG=$P($T(NAME2^ECV2RPC),";;",2)
"RTN","ECV2RPC",119,0)
 . .S ECCOLERR=ECPATLPC
"RTN","ECV2RPC",120,0)
 . .D ERROR
"RTN","ECV2RPC",121,0)
 ; -- Patient first name check
"RTN","ECV2RPC",122,0)
 I 'ECERRFLG D
"RTN","ECV2RPC",123,0)
 . F ECI=1:1:$L($P(ECPATV,",",2)) D  Q:ECERRFLG
"RTN","ECV2RPC",124,0)
 . .S ECVNAMEV=$E($P(ECVNAME,",",2),1,ECI),ECNAMEU=$E($P(ECPATV,",",2),1,ECI)
"RTN","ECV2RPC",125,0)
 . .I ECVNAMEV=ECNAMEU Q
"RTN","ECV2RPC",126,0)
 . .S ECERRMSG=$P($T(NAME3^ECV2RPC),";;",2)
"RTN","ECV2RPC",127,0)
 . .S ECCOLERR=ECPATLPC
"RTN","ECV2RPC",128,0)
 . .D ERROR
"RTN","ECV2RPC",129,0)
 Q
"RTN","ECV2RPC",130,0)
 ;
"RTN","ECV2RPC",131,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV2RPC",132,0)
 ;1. record number
"RTN","ECV2RPC",133,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV2RPC",134,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV2RPC",135,0)
 ;4. error message
"RTN","ECV2RPC",136,0)
 ;
"RTN","ECV2RPC",137,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV2RPC",138,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV2RPC",139,0)
 S ECERRFLG=1
"RTN","ECV2RPC",140,0)
 Q
"RTN","ECV2RPC",141,0)
 ;
"RTN","ECV2RPC",142,0)
 ;Error messages:
"RTN","ECV2RPC",143,0)
 ;
"RTN","ECV2RPC",144,0)
STA1 ;;Location not in Institution file (#4)
"RTN","ECV2RPC",145,0)
STA2 ;;Multiple entries found for Station #
"RTN","ECV2RPC",146,0)
SSN1 ;;No SSN x-ref on patient file(#2)
"RTN","ECV2RPC",147,0)
SSN2 ;;No SSN entry on patient file(#2)
"RTN","ECV2RPC",148,0)
SSN3 ;;No internal entry on patient file(#2) for ssn x-ref
"RTN","ECV2RPC",149,0)
SSN4 ;;SSN doesn't match SSN on patient file(#2)
"RTN","ECV2RPC",150,0)
SSN5 ;;SSN invalid
"RTN","ECV2RPC",151,0)
NAME1 ;;Patient Name is missing from VistA patient file(#2)
"RTN","ECV2RPC",152,0)
NAME2 ;;Patient last name doesn't match VistA
"RTN","ECV2RPC",153,0)
NAME3 ;;Patient first name doesn't match VistA
"RTN","ECV3RPC")
0^20^B71779614^B66640374
"RTN","ECV3RPC",1,0)
ECV3RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;2/5/18  11:05
"RTN","ECV3RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,47,49,61,72,131,134,139**;8 May 96;Build 7
"RTN","ECV3RPC",3,0)
 ;
"RTN","ECV3RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV3RPC",6,0)
 ;    1. DSS UNIT IEN, DSS UNIT NAME (DSS UNIT NUMBER IS NO LONGER CHECKED PER PATCH 134)
"RTN","ECV3RPC",7,0)
 ;    2. ORDERING SECTION
"RTN","ECV3RPC",8,0)
 ;    3. PROCEDURE CODE
"RTN","ECV3RPC",9,0)
 ;    4. CPT Modifiers
"RTN","ECV3RPC",10,0)
 ;    5. CATEGORY
"RTN","ECV3RPC",11,0)
 ;
"RTN","ECV3RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV3RPC",13,0)
 ;
"RTN","ECV3RPC",14,0)
 ;--Set up error flag
"RTN","ECV3RPC",15,0)
 S ECERRFLG=0
"RTN","ECV3RPC",16,0)
 ;
"RTN","ECV3RPC",17,0)
 ;--GET DSS Unit IEN--
"RTN","ECV3RPC",18,0)
 S ECDSSIEN=""
"RTN","ECV3RPC",19,0)
 ; -Check for DSS Unit IEN first
"RTN","ECV3RPC",20,0)
 I ECUNITV'="",(ECUNITV'=+ECUNITV) D
"RTN","ECV3RPC",21,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",22,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",23,0)
 . D ERROR
"RTN","ECV3RPC",24,0)
 I ECUNITV,'ECERRFLG,$D(^ECD(ECUNITV,0)) S ECDSSIEN=ECUNITV
"RTN","ECV3RPC",25,0)
 I ECUNITV,'ECERRFLG,'$D(^ECD(ECUNITV,0)) D
"RTN","ECV3RPC",26,0)
 . ; DSS unit ien not found on VistA
"RTN","ECV3RPC",27,0)
 . S ECERRMSG=$P($T(DSS1^ECV3RPC),";;",2)
"RTN","ECV3RPC",28,0)
 . S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",29,0)
 . D ERROR
"RTN","ECV3RPC",30,0)
 . Q
"RTN","ECV3RPC",31,0)
 ; -Check for DSS Unit Number - Starting with patch 134, DSS Unit Number is no longer checked. Entire section commented out
"RTN","ECV3RPC",32,0)
 ;I ECDCMV'="",'$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",33,0)
 ;. ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",34,0)
 ;. S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",35,0)
 ;. S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",36,0)
 ;. D ERROR
"RTN","ECV3RPC",37,0)
 ;I 'ECERRFLG,ECDCMV'="",$D(^ECD("C",ECDCMV)) S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",38,0)
 ;Check if the next record is a match
"RTN","ECV3RPC",39,0)
 ;I 'ECERRFLG,'ECDSSIEN,ECDCMV'="",$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",40,0)
 ;. S ECDSSIEN=$O(^ECD("C",ECDCMV,0))
"RTN","ECV3RPC",41,0)
 ;. I '$D(^ECD("C",ECDCMV)) D
"RTN","ECV3RPC",42,0)
 ;. . ; DSS Unit Number not found on VistA
"RTN","ECV3RPC",43,0)
 ;. . S ECERRMSG=$P($T(DSS2^ECV3RPC),";;",2)
"RTN","ECV3RPC",44,0)
 ;. . S ECCOLERR=ECDCMPC
"RTN","ECV3RPC",45,0)
 ;. . D ERROR
"RTN","ECV3RPC",46,0)
 ;. . Q
"RTN","ECV3RPC",47,0)
 ; -Check for DSS Unit Name
"RTN","ECV3RPC",48,0)
 I ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",49,0)
 . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",50,0)
 . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",51,0)
 . D ERROR
"RTN","ECV3RPC",52,0)
 ; 
"RTN","ECV3RPC",53,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",$D(^ECD("B",ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECDSSV,0))
"RTN","ECV3RPC",54,0)
 I 'ECERRFLG,'ECDSSIEN,ECDSSV'="",'$D(^ECD("B",ECDSSV)) D
"RTN","ECV3RPC",55,0)
 . N ECNXTDSS
"RTN","ECV3RPC",56,0)
 . S ECNXTDSS=$O(^ECD("B",ECDSSV))
"RTN","ECV3RPC",57,0)
 . I ECDSSV=$E(ECNXTDSS,1,$L(ECDSSV)) S ECDSSIEN=$O(^ECD("B",ECNXTDSS,0))
"RTN","ECV3RPC",58,0)
 . ;
"RTN","ECV3RPC",59,0)
 . I ECDSSV'=$E(ECNXTDSS,1,$L(ECDSSV)) D
"RTN","ECV3RPC",60,0)
 . . ; DSS unit name not found on VistA
"RTN","ECV3RPC",61,0)
 . . S ECERRMSG=$P($T(DSS3^ECV3RPC),";;",2)
"RTN","ECV3RPC",62,0)
 . . S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",63,0)
 . . D ERROR
"RTN","ECV3RPC",64,0)
 . . Q
"RTN","ECV3RPC",65,0)
 . Q
"RTN","ECV3RPC",66,0)
 ;
"RTN","ECV3RPC",67,0)
 I ECDSSIEN="" D  ;131 Need to have a DSS Unit identified
"RTN","ECV3RPC",68,0)
 .S ECERRMSG=$P($T(DSS4^ECV3RPC),";;",2)
"RTN","ECV3RPC",69,0)
 .S ECCOLERR=ECDSSPC
"RTN","ECV3RPC",70,0)
 .D ERROR
"RTN","ECV3RPC",71,0)
 .Q
"RTN","ECV3RPC",72,0)
 ;--Validate Ordering section or derive from DSS Unit IEN--
"RTN","ECV3RPC",73,0)
 I ECOSV'="" D
"RTN","ECV3RPC",74,0)
 . S ECOSIEN=$O(^ECC(723,"B",ECOSV,0))
"RTN","ECV3RPC",75,0)
 . I ECOSIEN="" D
"RTN","ECV3RPC",76,0)
 . . ; Ordering Section "B" x-ref doesn't exist
"RTN","ECV3RPC",77,0)
 . . S ECERRMSG=$P($T(ORDSEC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",78,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",79,0)
 . . D ERROR
"RTN","ECV3RPC",80,0)
 . . Q
"RTN","ECV3RPC",81,0)
 . Q
"RTN","ECV3RPC",82,0)
 I ECOSV="" D
"RTN","ECV3RPC",83,0)
 . I 'ECDSSIEN D
"RTN","ECV3RPC",84,0)
 . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",85,0)
 . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",86,0)
 . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",87,0)
 . . D ERROR
"RTN","ECV3RPC",88,0)
 . . Q
"RTN","ECV3RPC",89,0)
 . I ECDSSIEN D
"RTN","ECV3RPC",90,0)
 . . S ECOSIEN=$P(^ECD(ECDSSIEN,0),U,3)
"RTN","ECV3RPC",91,0)
 . . I ECOSIEN="" D
"RTN","ECV3RPC",92,0)
 . . . ; Unable to derive Ordering section from DSS Unit
"RTN","ECV3RPC",93,0)
 . . . S ECERRMSG=$P($T(ORDSEC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",94,0)
 . . . S ECCOLERR=ECOSPC
"RTN","ECV3RPC",95,0)
 . . . D ERROR
"RTN","ECV3RPC",96,0)
 . . . Q
"RTN","ECV3RPC",97,0)
 . . Q
"RTN","ECV3RPC",98,0)
 ;
"RTN","ECV3RPC",99,0)
 ;--Procedure must be a National Procedure, Local Procedure,   --
"RTN","ECV3RPC",100,0)
 ;--or a CPT code, and the EC Event Code Screen must be active --
"RTN","ECV3RPC",101,0)
 N ECFOUND,ECPI,ECDT
"RTN","ECV3RPC",102,0)
 S ECERRFLG=0,ECFOUND=0
"RTN","ECV3RPC",103,0)
 S %DT="XST",X=$G(ECENCV,"NOW") D ^%DT S ECDT=+Y
"RTN","ECV3RPC",104,0)
 ; Check for National Procedure code (D x-ref)
"RTN","ECV3RPC",105,0)
 I $D(^EC(725,"D",ECPROCV)) D
"RTN","ECV3RPC",106,0)
 . S ECPROCV=$O(^EC(725,"D",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",107,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",108,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",109,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7) S ECFOUND=1
"RTN","ECV3RPC",110,0)
 ; Check for local procedure code (DL x-ref)
"RTN","ECV3RPC",111,0)
 I 'ECFOUND,$D(^EC(725,"DL",ECPROCV)) D
"RTN","ECV3RPC",112,0)
 . S ECPROCV=$O(^EC(725,"DL",ECPROCV,0))_";EC(725,"
"RTN","ECV3RPC",113,0)
 . S ECPI=$P($G(^EC(725,ECPROCV,0)),"^",5)
"RTN","ECV3RPC",114,0)
 . I ECPI="" S ECFOUND=1 Q
"RTN","ECV3RPC",115,0)
 . S ECPI=$$CPT^ICPTCOD(ECPI,ECDT) I +ECPI>0,$P(ECPI,"^",7)  S ECFOUND=1
"RTN","ECV3RPC",116,0)
 ; Check for CPT code (B x-ref)
"RTN","ECV3RPC",117,0)
 I 'ECFOUND S ECPI=$$CPT^ICPTCOD(ECPROCV,ECDT) I +ECPI>0,$P(ECPI,"^",7) D
"RTN","ECV3RPC",118,0)
 . S ECPROCV=$P(ECPI,"^")_";ICPT("
"RTN","ECV3RPC",119,0)
 . S ECFOUND=1
"RTN","ECV3RPC",120,0)
 ;
"RTN","ECV3RPC",121,0)
 I 'ECFOUND D
"RTN","ECV3RPC",122,0)
 . ; Invalid procedure code
"RTN","ECV3RPC",123,0)
 . S ECERRMSG=$P($T(PROC1^ECV3RPC),";;",2)
"RTN","ECV3RPC",124,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",125,0)
 . D ERROR
"RTN","ECV3RPC",126,0)
 . Q
"RTN","ECV3RPC",127,0)
 I ECFOUND,$G(ECPI) D  ;Section added in 131 to check CPT Modifiers
"RTN","ECV3RPC",128,0)
 .N MODLIST,VALUES,MODARR,MSUB,ENTRY
"RTN","ECV3RPC",129,0)
 .S VALUES=$P(ECPI,U)_U_$G(ECENCV,$$DT^XLFDT) ;Procedure code and encounter date or today's date
"RTN","ECV3RPC",130,0)
 .D ECPXMOD^ECUERPC(.MODLIST,VALUES) ;Call returns valid modifiers for selected CPT code
"RTN","ECV3RPC",131,0)
 .S MSUB=0 F  S MSUB=$O(@MODLIST@(MSUB)) Q:'+MSUB  S MODARR($P(@MODLIST@(MSUB),U))=@MODLIST@(MSUB)
"RTN","ECV3RPC",132,0)
 .F MSUB=1:1:5 S ENTRY=@("ECMOD"_MSUB_"V") I ENTRY'="" D  ;Look at each modifier
"RTN","ECV3RPC",133,0)
 ..I '$D(MODARR(ENTRY)) D  Q
"RTN","ECV3RPC",134,0)
 ...S ECERRMSG=$P($T(MOD1^ECV3RPC),";;",2)
"RTN","ECV3RPC",135,0)
 ...S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",136,0)
 ...D ERROR
"RTN","ECV3RPC",137,0)
 ..S @("ECMOD"_MSUB_"V")=$P(MODARR(ENTRY),U,3) K MODARR(ENTRY) ;Delete modifer from list if used so it can't be duplicated
"RTN","ECV3RPC",138,0)
 ..Q
"RTN","ECV3RPC",139,0)
 .Q
"RTN","ECV3RPC",140,0)
 I ECFOUND,'$G(ECPI) D  ;131 Section checks to see if modifiers sent for a non-CPT procedure
"RTN","ECV3RPC",141,0)
 .N MSUB
"RTN","ECV3RPC",142,0)
 .F MSUB=1:1:5 I $G(@("ECMOD"_MSUB_"V"))'="" D
"RTN","ECV3RPC",143,0)
 ..S ECERRMSG=$P($T(MOD2^ECV3RPC),";;",2)
"RTN","ECV3RPC",144,0)
 ..S ECCOLERR=@("ECMOD"_MSUB_"PC")
"RTN","ECV3RPC",145,0)
 ..D ERROR
"RTN","ECV3RPC",146,0)
 ..Q
"RTN","ECV3RPC",147,0)
 .Q
"RTN","ECV3RPC",148,0)
 ;
"RTN","ECV3RPC",149,0)
 ; -Category must exist on the Event Capture Category file
"RTN","ECV3RPC",150,0)
 I ECCATV="" S ECCATIEN=0
"RTN","ECV3RPC",151,0)
 I ECCATV'="" D
"RTN","ECV3RPC",152,0)
 . I $D(^EC(726,"B",ECCATV)) S ECCATIEN=$O(^EC(726,"B",ECCATV,0))
"RTN","ECV3RPC",153,0)
 . I '$D(^EC(726,"B",ECCATV)) D
"RTN","ECV3RPC",154,0)
 . . ; B cross reference not found for category
"RTN","ECV3RPC",155,0)
 . . S ECERRMSG=$P($T(CAT1^ECV3RPC),";;",2)
"RTN","ECV3RPC",156,0)
 . . S ECCOLERR=ECCATPC
"RTN","ECV3RPC",157,0)
 . . D ERROR
"RTN","ECV3RPC",158,0)
 . . Q
"RTN","ECV3RPC",159,0)
 ;
"RTN","ECV3RPC",160,0)
 ; -check for active Event Code screen
"RTN","ECV3RPC",161,0)
 N ECEVNT,ECSNODE,ECSDATA,ECSFOUND
"RTN","ECV3RPC",162,0)
 I 'ECERRFLG D
"RTN","ECV3RPC",163,0)
 . S ECEVNT=ECSTAV_"-"_ECDSSIEN_"-"_ECCATIEN_"-"_ECPROCV
"RTN","ECV3RPC",164,0)
 . S (ECSNODE,ECSFOUND)=0
"RTN","ECV3RPC",165,0)
 . F  S ECSNODE=$O(^ECJ(ECSNODE)) Q:ECSNODE=""  D
"RTN","ECV3RPC",166,0)
 . . S ECSDATA=$G(^ECJ(ECSNODE,0))
"RTN","ECV3RPC",167,0)
 . . I ECEVNT=$P(ECSDATA,U,1) D
"RTN","ECV3RPC",168,0)
 . . . S ECSFOUND=1
"RTN","ECV3RPC",169,0)
 . . . I $P(ECSDATA,U,2)'="" D
"RTN","ECV3RPC",170,0)
 . . . . ; Event Code screen inactive
"RTN","ECV3RPC",171,0)
 . . . . S ECERRMSG=$P($T(PROC2^ECV3RPC),";;",2)
"RTN","ECV3RPC",172,0)
 . . . . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",173,0)
 . . . . D ERROR
"RTN","ECV3RPC",174,0)
 . . . . Q
"RTN","ECV3RPC",175,0)
 . . . Q
"RTN","ECV3RPC",176,0)
 . . Q
"RTN","ECV3RPC",177,0)
 . Q
"RTN","ECV3RPC",178,0)
 ;
"RTN","ECV3RPC",179,0)
 ;Generate error if event code screen not found
"RTN","ECV3RPC",180,0)
 I 'ECERRFLG,'ECSFOUND,ECDSSIEN D
"RTN","ECV3RPC",181,0)
 . ; Event Code screen not found
"RTN","ECV3RPC",182,0)
 . S ECERRMSG=$P($T(PROC3^ECV3RPC),";;",2)
"RTN","ECV3RPC",183,0)
 . S ECCOLERR=ECPROCPC
"RTN","ECV3RPC",184,0)
 . D ERROR
"RTN","ECV3RPC",185,0)
 . Q
"RTN","ECV3RPC",186,0)
 ;
"RTN","ECV3RPC",187,0)
 ;139 Modified section to add testing for DSS Unit allowing duplicates
"RTN","ECV3RPC",188,0)
 I 'ECERRFLG D
"RTN","ECV3RPC",189,0)
 .;Check for duplicate uploaded record base on Loc_DSS Unit_Category_Proc
"RTN","ECV3RPC",190,0)
 .;Date_Procedure
"RTN","ECV3RPC",191,0)
 . N ECDUP,ECNAM,ECPNAM,ECI,ECX,Y,ECPRV,ECPROV
"RTN","ECV3RPC",192,0)
 . S (ECDA,ECDUP)=0
"RTN","ECV3RPC",193,0)
 . F  S ECDA=$O(^ECH("ADT",ECSTAV,ECSSNIEN,+ECDSSIEN,ECDT,ECDA)) Q:'ECDA  D  I ECDUP Q  ;131 Make sure DSS IEN has a value
"RTN","ECV3RPC",194,0)
 . . S ECX=$G(^ECH(ECDA,0)) I ECX="" Q
"RTN","ECV3RPC",195,0)
 . . I $P(ECX,U,8)'=ECCATIEN Q
"RTN","ECV3RPC",196,0)
 . . I $P(ECX,U,9)'=ECPROCV Q
"RTN","ECV3RPC",197,0)
 . . S ECPNAM="",ECDUP=1
"RTN","ECV3RPC",198,0)
 . . K ECPRV S ECPROV=$$GETPRV^ECPRVMUT(ECDA,.ECPRV)
"RTN","ECV3RPC",199,0)
 . . F ECI=1:1:3 S Y=$O(ECPRV("")) I Y'="" D
"RTN","ECV3RPC",200,0)
 . . . S ECNAM=$P(ECPRV(Y),U,2) K ECPRV(Y)
"RTN","ECV3RPC",201,0)
 . . . S ECPNAM=ECPNAM_" "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",202,0)
 . . I 'ECFILDUP D
"RTN","ECV3RPC",203,0)
 . . . S ECERRMSG="**DUPLICATE** "
"RTN","ECV3RPC",204,0)
 . . . S ECERRMSG=ECERRMSG_" Clinic: "_$$GET1^DIQ(44,$P(ECX,U,19),.01,"I")
"RTN","ECV3RPC",205,0)
 . . . S ECERRMSG=ECERRMSG_" Order Sect: "_$$GET1^DIQ(723,$P(ECX,U,12),.01,"I")
"RTN","ECV3RPC",206,0)
 . . . S ECERRMSG=ECERRMSG_" Provider: "_ECPNAM
"RTN","ECV3RPC",207,0)
 . . . S ECNAM=$$GET1^DIQ(200,$P(ECX,U,13),.01,"I")
"RTN","ECV3RPC",208,0)
 . . . S ECERRMSG=ECERRMSG_" Entered: "_$P(ECNAM,",")_","_$E($P(ECNAM,",",2))
"RTN","ECV3RPC",209,0)
 . . . S ECCOLERR=ECSTAPC
"RTN","ECV3RPC",210,0)
 . . . D ERROR
"RTN","ECV3RPC",211,0)
 . .I ECFILDUP D
"RTN","ECV3RPC",212,0)
 . . .I $$GET1^DIQ(724,+ECDSSIEN,16,"I")'="Y" D
"RTN","ECV3RPC",213,0)
 . . . .S ECERRMSG="The DSS Unit associated with this record does not allow duplicate entries - Record NOT filed."
"RTN","ECV3RPC",214,0)
 . . . .S ECCOLERR=ECUNITPC
"RTN","ECV3RPC",215,0)
 . . . .D ERROR
"RTN","ECV3RPC",216,0)
 . . . .Q
"RTN","ECV3RPC",217,0)
 . . .Q
"RTN","ECV3RPC",218,0)
 . .Q
"RTN","ECV3RPC",219,0)
 .Q
"RTN","ECV3RPC",220,0)
 Q
"RTN","ECV3RPC",221,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV3RPC",222,0)
 ;1. record number
"RTN","ECV3RPC",223,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV3RPC",224,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV3RPC",225,0)
 ;4. error message
"RTN","ECV3RPC",226,0)
 ;
"RTN","ECV3RPC",227,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV3RPC",228,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV3RPC",229,0)
 S ECERRFLG=1
"RTN","ECV3RPC",230,0)
 Q
"RTN","ECV3RPC",231,0)
 ;
"RTN","ECV3RPC",232,0)
DSS1 ;;Invalid DSS Unit IEN
"RTN","ECV3RPC",233,0)
DSS2 ;;Invalid DSS Unit Number
"RTN","ECV3RPC",234,0)
DSS3 ;;Invalid DSS Unit Name
"RTN","ECV3RPC",235,0)
DSS4 ;;DSS Unit required. Must enter DSS Unit Name or DSS IEN
"RTN","ECV3RPC",236,0)
ORDSEC1 ;;Ordering Section "B" x-ref not on Med Specialty file(#723)
"RTN","ECV3RPC",237,0)
ORDSEC2 ;;Unable to derive Ordering Section from DSS Unit
"RTN","ECV3RPC",238,0)
PROC1 ;;Procedure/CPT invalid
"RTN","ECV3RPC",239,0)
PROC2 ;;Procedure/CPT invalid for this Station and DSS Unit
"RTN","ECV3RPC",240,0)
PROC3 ;;Event Code screen not found
"RTN","ECV3RPC",241,0)
CAT1 ;;Category "B" x-ref not on EC Category file(#726)
"RTN","ECV3RPC",242,0)
MOD1 ;;Modifier is invalid or duplicated for the selected procedure
"RTN","ECV3RPC",243,0)
MOD2 ;;Modifiers cannot be used with this procedure - no CPT identified
"RTN","ECV4RPC")
0^26^B78304168^B76866291
"RTN","ECV4RPC",1,0)
ECV4RPC ;ALB/ACS;Event Capture Spreadsheet Data Validation ;3/1/18  10:36
"RTN","ECV4RPC",2,0)
 ;;2.0;EVENT CAPTURE;**25,33,49,131,134,139**;8 May 96;Build 7
"RTN","ECV4RPC",3,0)
 ;
"RTN","ECV4RPC",4,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",5,0)
 ;  Validates the following Event Capture Spreadsheet Upload fields:
"RTN","ECV4RPC",6,0)
 ;    1. VOLUME
"RTN","ECV4RPC",7,0)
 ;    2. ENCOUNTER DATE/TIME
"RTN","ECV4RPC",8,0)
 ;    3. PROVIDER NAME
"RTN","ECV4RPC",9,0)
 ;
"RTN","ECV4RPC",10,0)
 ;  Determines the following:
"RTN","ECV4RPC",11,0)
 ;    1. PATIENT STATUS
"RTN","ECV4RPC",12,0)
 ;----------------------------------------------------------------------
"RTN","ECV4RPC",13,0)
 ;
"RTN","ECV4RPC",14,0)
 ;--Volume must be 1 thru 99--
"RTN","ECV4RPC",15,0)
 N ECVOLVN,ECPDT
"RTN","ECV4RPC",16,0)
 S ECVOLVN=ECVOLV
"RTN","ECV4RPC",17,0)
 I (+ECVOLVN'=ECVOLVN)!(ECVOLVN<1)!(ECVOLVN>99)!(ECVOLVN?.E1"."1N.N) D
"RTN","ECV4RPC",18,0)
 . S ECERRMSG=$P($T(VOL1^ECV4RPC),";;",2)
"RTN","ECV4RPC",19,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",20,0)
 . D ERROR
"RTN","ECV4RPC",21,0)
 . Q
"RTN","ECV4RPC",22,0)
 I $L(ECVOLVN)'=$L(ECVOLV) D
"RTN","ECV4RPC",23,0)
 . ; Volume must be numeric
"RTN","ECV4RPC",24,0)
 . S ECERRMSG=$P($T(VOL2^ECV4RPC),";;",2)
"RTN","ECV4RPC",25,0)
 . S ECCOLERR=ECVOLPC
"RTN","ECV4RPC",26,0)
 . D ERROR
"RTN","ECV4RPC",27,0)
 . Q
"RTN","ECV4RPC",28,0)
 ;
"RTN","ECV4RPC",29,0)
 ;--Encounter Date/Time--
"RTN","ECV4RPC",30,0)
 S ECERRFLG=0
"RTN","ECV4RPC",31,0)
 N ECRETVAL
"RTN","ECV4RPC",32,0)
 S %DT(0)="-NOW",ECENCV=$TR(ECENCV," ","")
"RTN","ECV4RPC",33,0)
 D CHK^DIE(721,2,"E",ECENCV,.ECRETVAL)
"RTN","ECV4RPC",34,0)
 I $G(ECRETVAL)="^" D
"RTN","ECV4RPC",35,0)
 . ; Invalid encounter date/time
"RTN","ECV4RPC",36,0)
 . S ECERRMSG=$P($T(ENC1^ECV4RPC),";;",2)
"RTN","ECV4RPC",37,0)
 . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",38,0)
 . D ERROR
"RTN","ECV4RPC",39,0)
 . Q
"RTN","ECV4RPC",40,0)
 I $G(ECRETVAL)'="^" D
"RTN","ECV4RPC",41,0)
 . S %DT="XST",X=ECENCV
"RTN","ECV4RPC",42,0)
 . D ^%DT
"RTN","ECV4RPC",43,0)
 . S ECENCV=+Y
"RTN","ECV4RPC",44,0)
 . Q
"RTN","ECV4RPC",45,0)
 ;
"RTN","ECV4RPC",46,0)
 ;--Provider Name or IEN must be on the New Person file--
"RTN","ECV4RPC",47,0)
 ;--and provider must have active person class  --
"RTN","ECV4RPC",48,0)
 N ECPROV1,ECPROVV,NUM,PRVARR,DSSUPCE ;131,134
"RTN","ECV4RPC",49,0)
 S DSSUPCE=$P($G(^ECD(+$G(ECDSSIEN),0)),U,14) S:DSSUPCE="" DSSUPCE="N" ;139
"RTN","ECV4RPC",50,0)
 ;131 Entire section modified to add checking for up to 7 providers
"RTN","ECV4RPC",51,0)
 F NUM=1:1:7 S ECPROVV=@("ECPRV"_NUM_"V") I ECPROVV'="" D  I '$G(ECERRFLG) S @("ECPRV"_NUM_"V")=$G(ECPRVIEN)  ;If no error, set provider value to IEN
"RTN","ECV4RPC",52,0)
 .S ECERRFLG=0,ECPRVIEN=0
"RTN","ECV4RPC",53,0)
 .; Remove punctuation if necessary
"RTN","ECV4RPC",54,0)
 .I ECPROVV?.E1P S ECPROVV=$E(ECPROVV,1,$L(ECPROVV)-1)
"RTN","ECV4RPC",55,0)
 .; If provider ien passed in, find on file
"RTN","ECV4RPC",56,0)
 .S ECPROV1=ECPROVV
"RTN","ECV4RPC",57,0)
 .I +ECPROVV>0 D
"RTN","ECV4RPC",58,0)
 . . I '$D(^VA(200,ECPROVV)) D
"RTN","ECV4RPC",59,0)
 . . . ; Provider ien not found on New Person file
"RTN","ECV4RPC",60,0)
 . . . S ECERRMSG=$P($T(PROV4^ECV4RPC),";;",2)
"RTN","ECV4RPC",61,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",62,0)
 . . . D ERROR
"RTN","ECV4RPC",63,0)
 . . E  S ECPRVIEN=ECPROVV
"RTN","ECV4RPC",64,0)
 .;
"RTN","ECV4RPC",65,0)
 .; If provider name passed in, find on B x-ref and
"RTN","ECV4RPC",66,0)
 .; make sure there isn't more than 1 with same name
"RTN","ECV4RPC",67,0)
 .N ECPRVNXT,ECPRVMOR,ECPRVMNT
"RTN","ECV4RPC",68,0)
 .S (ECPRVMOR,ECPRVMNT)=0,ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",69,0)
 .I +ECPROVV'>0,$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",70,0)
 . . S ECPRVIE2=$O(^VA(200,"B",ECPROVV,""))
"RTN","ECV4RPC",71,0)
 . . S ECPRVNXT=$O(^VA(200,"B",ECPROVV,ECPRVIE2))
"RTN","ECV4RPC",72,0)
 . . I ECPRVNXT'="" D
"RTN","ECV4RPC",73,0)
 . . . S ECERRMSG=$P($T(PROV5^ECV4RPC),";;",2)
"RTN","ECV4RPC",74,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",75,0)
 . . . D ERROR
"RTN","ECV4RPC",76,0)
 . . . S ECPRVMOR=1
"RTN","ECV4RPC",77,0)
 . . E  S ECPRVIEN=ECPRVIE2
"RTN","ECV4RPC",78,0)
 .;
"RTN","ECV4RPC",79,0)
 .I +ECPROVV'>0,'$D(^VA(200,"B",ECPROVV)) D
"RTN","ECV4RPC",80,0)
 . . ; Exact match not found on New Person file
"RTN","ECV4RPC",81,0)
 . . ; Generate standard error message
"RTN","ECV4RPC",82,0)
 . . S ECERRMSG=$P($T(PROV1^ECV4RPC),";;",2)
"RTN","ECV4RPC",83,0)
 . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",84,0)
 . . D ERROR
"RTN","ECV4RPC",85,0)
 . . S ECPRVMNT=1
"RTN","ECV4RPC",86,0)
 .; If exact match not found, get provider info
"RTN","ECV4RPC",87,0)
 .I ECPRVMNT D
"RTN","ECV4RPC",88,0)
 . . ; look at next provider on file for 'close' match
"RTN","ECV4RPC",89,0)
 . . N ECINFO,ECLENPRV,NOMATCH,ECSPEC,ECSUBSP
"RTN","ECV4RPC",90,0)
 . . N ECCOUNT,ECFIRST,ECLAST,ECPRVNXT,ECPRVIE2,ECPRVIE3
"RTN","ECV4RPC",91,0)
 . . S ECLENPRV=$L(ECPROVV),(ECPRVIE2,ECPRVIE3)="",(ECCOUNT,NOMATCH)=0
"RTN","ECV4RPC",92,0)
 . . S ECPRVNXT=ECPROVV
"RTN","ECV4RPC",93,0)
 . . F  S ECPRVNXT=$O(^VA(200,"B",ECPRVNXT)) Q:NOMATCH=1!(ECPRVNXT="")  D  ;131 Added check for null
"RTN","ECV4RPC",94,0)
 . . . F  S ECPRVIE3=$O(^VA(200,"B",ECPRVNXT,ECPRVIE3)) Q:ECPRVIE3=""  D
"RTN","ECV4RPC",95,0)
 . . . . I ECPROVV'=$E(ECPRVNXT,1,ECLENPRV) S NOMATCH=1
"RTN","ECV4RPC",96,0)
 . . . . E  D
"RTN","ECV4RPC",97,0)
 . . . . . ;get provider info and add to end of error string
"RTN","ECV4RPC",98,0)
 . . . . . S ECINFO=$$GET^XUA4A72(ECPRVIE3,ECENCV)
"RTN","ECV4RPC",99,0)
 . . . . . I +ECINFO'>0 D
"RTN","ECV4RPC",100,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-"_$S(DSSUPCE="N"&($D(^EC(722,"B",ECPRVIE3))):"Non Licensed Provider",+ECINFO=-1:"Not a provider",1:"Inactive Provider for this encounter date") ;134
"RTN","ECV4RPC",101,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",102,0)
 . . . . . . ;S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",103,0)
 . . . . . I +ECINFO>0 D
"RTN","ECV4RPC",104,0)
 . . . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",105,0)
 . . . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",106,0)
 . . . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",107,0)
 . . . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",108,0)
 . . . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",109,0)
 . . . . . . S ECPCLASS=$P(^VA(200,ECPRVIE3,"USC1",0),U,3)
"RTN","ECV4RPC",110,0)
 . . . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",111,0)
 . . . . . . S ECERRMSG=ECPRVNXT_"-"_ECPRVIE3_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",112,0)
 . . . . . . D ERROR
"RTN","ECV4RPC",113,0)
 .; If more than one provider with that name, get info
"RTN","ECV4RPC",114,0)
 .I ECPRVMOR D
"RTN","ECV4RPC",115,0)
 . . N ECINFO,ECSPEC,ECSUBSP,ECPCLASS,ECCOUNT,ECFIRST,ECLAST,ECPRVIE2
"RTN","ECV4RPC",116,0)
 . . S ECCOUNT=0,ECPRVIE2=0
"RTN","ECV4RPC",117,0)
 . . ;look at each provider for exact match
"RTN","ECV4RPC",118,0)
 . . F  S ECPRVIE2=$O(^VA(200,"B",ECPROVV,ECPRVIE2)) Q:ECPRVIE2=""  D
"RTN","ECV4RPC",119,0)
 . . . S ECINFO=$$GET^XUA4A72(ECPRVIE2,ECENCV)
"RTN","ECV4RPC",120,0)
 . . . I +ECINFO'>0 D
"RTN","ECV4RPC",121,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-"_$S(DSSUPCE="N"&($D(^EC(722,"B",ECPRVIE2))):"Non Licensed Provider",+ECINFO=-1:"Not a provider",1:"Inactive Provider for this encounter date") ;134
"RTN","ECV4RPC",122,0)
 . . . . D ERROR
"RTN","ECV4RPC",123,0)
 . . . I +ECINFO>0 D
"RTN","ECV4RPC",124,0)
 . . . . S ECCOUNT=ECCOUNT+1
"RTN","ECV4RPC",125,0)
 . . . . S ECSPEC=$P(ECINFO,U,3)
"RTN","ECV4RPC",126,0)
 . . . . I ECSPEC=" " S ECSPEC=""
"RTN","ECV4RPC",127,0)
 . . . . S ECSUBSP=$P(ECINFO,U,4)
"RTN","ECV4RPC",128,0)
 . . . . I ECSUBSP=" " S ECSUBSP=""
"RTN","ECV4RPC",129,0)
 . . . . S ECPCLASS=$P(^VA(200,ECPRVIE2,"USC1",0),U,3)
"RTN","ECV4RPC",130,0)
 . . . . I ECPCLASS="" S ECPCLASS="PERSON CLASS NOT FOUND"
"RTN","ECV4RPC",131,0)
 . . . . S ECERRMSG=ECPROVV_"-"_ECPRVIE2_"-"_ECSPEC_"-"_ECSUBSP_"-"_ECPCLASS
"RTN","ECV4RPC",132,0)
 . . . . D ERROR
"RTN","ECV4RPC",133,0)
 .;
"RTN","ECV4RPC",134,0)
 .; Check for valid provider
"RTN","ECV4RPC",135,0)
 .S ECPROVV=ECPROV1
"RTN","ECV4RPC",136,0)
 .S %DT="XST",X=ECENCV D ^%DT S ECPDT=$S(+Y>0:+Y,1:DT)
"RTN","ECV4RPC",137,0)
 .I 'ECERRFLG D  ;134
"RTN","ECV4RPC",138,0)
 . .I DSSUPCE'="N"!(DSSUPCE="N"&('$D(^EC(722,"B",ECPRVIEN)))) D  ;134,139 Check providers for units that send to PCE or for units that don't send but have a traditional provider
"RTN","ECV4RPC",139,0)
 . . . ;134 section updated
"RTN","ECV4RPC",140,0)
 . . . I ECPRVIEN=0 S ECPRVIEN=$O(^VA(200,"B",ECPROVV,0))
"RTN","ECV4RPC",141,0)
 . . . S ECINFO=$$GET^XUA4A72(ECPRVIEN,ECPDT) I +ECINFO<0 D  ;134
"RTN","ECV4RPC",142,0)
 . . . . S ECERRMSG=$S(+ECINFO=-1:$P($T(PROV8^ECV4RPC),";;",2),1:$P($T(PROV3^ECV4RPC),";;",2)) ;134
"RTN","ECV4RPC",143,0)
 . . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",144,0)
 . . . . D ERROR
"RTN","ECV4RPC",145,0)
 . . . . Q
"RTN","ECV4RPC",146,0)
 . . . Q
"RTN","ECV4RPC",147,0)
 . .;134 Added section to check for non licensed providers
"RTN","ECV4RPC",148,0)
 . .I DSSUPCE="N",'$D(^EC(722,"B",ECPRVIEN)),$$GET^XUA4A72(ECPRVIEN,ECPDT)<0 D
"RTN","ECV4RPC",149,0)
 . . . S ECERRMSG=$P($T(PROV7^ECV4RPC),";;",2)
"RTN","ECV4RPC",150,0)
 . . . S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",151,0)
 . . . D ERROR
"RTN","ECV4RPC",152,0)
 . . . Q
"RTN","ECV4RPC",153,0)
 . . Q
"RTN","ECV4RPC",154,0)
 .I 'ECERRFLG D  ;131 Section added to check for duplicate providers
"RTN","ECV4RPC",155,0)
 ..I $D(PRVARR(ECPRVIEN)) D
"RTN","ECV4RPC",156,0)
 ...S ECERRMSG=$P($T(PROV6^ECV4RPC),";;",2)
"RTN","ECV4RPC",157,0)
 ...S ECCOLERR=@("ECPRV"_NUM_"PC")
"RTN","ECV4RPC",158,0)
 ...D ERROR
"RTN","ECV4RPC",159,0)
 ..S PRVARR(ECPRVIEN)=""
"RTN","ECV4RPC",160,0)
 ..Q
"RTN","ECV4RPC",161,0)
 . Q
"RTN","ECV4RPC",162,0)
 ;
"RTN","ECV4RPC",163,0)
 ;--Determine Patient Status--
"RTN","ECV4RPC",164,0)
 S ECPSTAT=""
"RTN","ECV4RPC",165,0)
 I ECSSNIEN D
"RTN","ECV4RPC",166,0)
 . S ECERRFLG=0
"RTN","ECV4RPC",167,0)
 . S ECPSTAT=$$INOUTPT^ECUTL0(ECSSNIEN,+ECENCV)
"RTN","ECV4RPC",168,0)
 . I ECPSTAT="" D
"RTN","ECV4RPC",169,0)
 . . ; Unable to determine patient status
"RTN","ECV4RPC",170,0)
 . . S ECERRMSG=$P($T(STAT1^ECV4RPC),";;",2)
"RTN","ECV4RPC",171,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",172,0)
 . . D ERROR
"RTN","ECV4RPC",173,0)
 . . Q
"RTN","ECV4RPC",174,0)
 . I ECPSTAT="I",'ECPSTATV,'ECERRFLG D
"RTN","ECV4RPC",175,0)
 . . ; Patient status is Inpatient and override flag is false
"RTN","ECV4RPC",176,0)
 . . S ECERRMSG=$P($T(STAT2^ECV4RPC),";;",2)
"RTN","ECV4RPC",177,0)
 . . S ECCOLERR=ECENCPC
"RTN","ECV4RPC",178,0)
 . . D ERROR
"RTN","ECV4RPC",179,0)
 . . Q
"RTN","ECV4RPC",180,0)
 ;
"RTN","ECV4RPC",181,0)
 ;--Check to see if the DSS Unit is 'send to PCE'--
"RTN","ECV4RPC",182,0)
 S ECDXIEN="",ECCLNIEN=""
"RTN","ECV4RPC",183,0)
 I ECPSTAT'="",ECDSSIEN'="" D
"RTN","ECV4RPC",184,0)
 . N ECDSSDAT,ECDSSPCE
"RTN","ECV4RPC",185,0)
 . S ECDSSDAT=$G(^ECD(ECDSSIEN,0))
"RTN","ECV4RPC",186,0)
 . S ECDSSPCE=$P(ECDSSDAT,U,14)
"RTN","ECV4RPC",187,0)
 . ; If send is 'all records'
"RTN","ECV4RPC",188,0)
 . I ECDSSPCE="A" D  ;139
"RTN","ECV4RPC",189,0)
 . . ;Validate Diagnosis code and Associated Clinic
"RTN","ECV4RPC",190,0)
 . . D VALDIAG^ECV5RPC
"RTN","ECV4RPC",191,0)
 . . D VALCLIN^ECV5RPC
"RTN","ECV4RPC",192,0)
 . I ECDSSPCE="OOS" D  ;139 Set encounter values to null
"RTN","ECV4RPC",193,0)
 . . S (ECAOV,ECIRV,ECSCV,ECSWAV,ECMSTV,ECHNCV,ECCVV,ECSHADV,ECCLV)="" ;139 Values not use in OOS units
"RTN","ECV4RPC",194,0)
 . Q
"RTN","ECV4RPC",195,0)
 ;
"RTN","ECV4RPC",196,0)
 ;--Check to see if DUZ is defined
"RTN","ECV4RPC",197,0)
 S ECDUZ=$S($D(DUZ):DUZ,1:"")
"RTN","ECV4RPC",198,0)
 I ECDUZ="" D
"RTN","ECV4RPC",199,0)
 . ; Invalid DUZ
"RTN","ECV4RPC",200,0)
 . S ECERRMSG=$P($T(DUZ^ECV4RPC),";;",2),ECCOLERR=0
"RTN","ECV4RPC",201,0)
 . D ERROR
"RTN","ECV4RPC",202,0)
 Q
"RTN","ECV4RPC",203,0)
 ;;
"RTN","ECV4RPC",204,0)
ERROR ;--Set up array entry to contain the following:
"RTN","ECV4RPC",205,0)
 ;1. record number
"RTN","ECV4RPC",206,0)
 ;2. column number on spreadsheet containing the record number
"RTN","ECV4RPC",207,0)
 ;3. column number on spreadsheet containing the data in error
"RTN","ECV4RPC",208,0)
 ;4. error message
"RTN","ECV4RPC",209,0)
 ;
"RTN","ECV4RPC",210,0)
 S ECINDEX=ECINDEX+1
"RTN","ECV4RPC",211,0)
 S RESULTS(ECINDEX)=ECRECV_"^"_ECRECPC_"^"_ECCOLERR_"^"_ECERRMSG_"^"
"RTN","ECV4RPC",212,0)
 S ECERRFLG=1
"RTN","ECV4RPC",213,0)
 Q
"RTN","ECV4RPC",214,0)
 ;
"RTN","ECV4RPC",215,0)
 ;Error messages:
"RTN","ECV4RPC",216,0)
 ;
"RTN","ECV4RPC",217,0)
VOL1 ;;Volume must be a whole number from 1 to 99
"RTN","ECV4RPC",218,0)
VOL2 ;;Volume must contain numeric characters only
"RTN","ECV4RPC",219,0)
PROV1 ;;Provider has no B x-ref on New Person file(#200)
"RTN","ECV4RPC",220,0)
PROV2 ;;Unable to determine person class
"RTN","ECV4RPC",221,0)
PROV3 ;;Provider does not have an active person class
"RTN","ECV4RPC",222,0)
PROV4 ;;Provider IEN not found on New Person file(#200)
"RTN","ECV4RPC",223,0)
PROV5 ;;More than one provider with this name - use IEN
"RTN","ECV4RPC",224,0)
PROV6 ;;Duplicate provider identified - providers must be unique
"RTN","ECV4RPC",225,0)
PROV7 ;;Provider not identified as a non licensed provider
"RTN","ECV4RPC",226,0)
PROV8 ;;The provider has never been assigned a provider class
"RTN","ECV4RPC",227,0)
ENC1 ;;Invalid encounter date/time.  Date cannot be in the future.
"RTN","ECV4RPC",228,0)
STAT1 ;;Unable to determine patient status
"RTN","ECV4RPC",229,0)
STAT2 ;;The patient status is Inpatient
"RTN","ECV4RPC",230,0)
DUZ ;;User DUZ not defined
"VER")
8.0^22.2
"^DD",721,721,45,0)
SOURCE^FJ30^^2;1^K:$L(X)>30!($L(X)<1) X
"^DD",721,721,45,3)
Enter the source of this record.  Answer must be between 1 and 30 characters.
"^DD",721,721,45,21,0)
^.001^2^2^3180621^^^
"^DD",721,721,45,21,1,0)
This field will identify the source by which this record was added
"^DD",721,721,45,21,2,0)
to the file if it's not entered through Event Capture data entry options.
"^DD",721,721,45,23,0)
^.001^4^4^3180621^^
"^DD",721,721,45,23,1,0)
This field will identify a record entered through another method
"^DD",721,721,45,23,2,0)
besides the Event Capture data entry options.  For example, records
"^DD",721,721,45,23,3,0)
entered through spread sheet upload would have the source field
"^DD",721,721,45,23,4,0)
populated indicating that the record was loaded from a spread sheet.
"^DD",721,721,45,"DT")
3180622
"^DD",721,721,46,0)
ENTRY STATUS^S^L:LATE;C:LATE CORRECTED;^2;2^Q
"^DD",721,721,46,3)
Indicate the status of the record.
"^DD",721,721,46,21,0)
^.001^2^2^3180621^^^^
"^DD",721,721,46,21,1,0)
This field will be used to indicate the entry status of the record
"^DD",721,721,46,21,2,0)
when entered through spread sheet upload.
"^DD",721,721,46,23,0)
^.001^6^6^3180621^^^^
"^DD",721,721,46,23,1,0)
When entering records through the spread sheet upload option, this
"^DD",721,721,46,23,2,0)
field will indicate the status of the record at the time of entry.  If the
"^DD",721,721,46,23,3,0)
record is entered and its procedure date/time is after the last DSS
"^DD",721,721,46,23,4,0)
extract date for Event Capture then the record will be considered
"^DD",721,721,46,23,5,0)
"late".  If the record is entered in a timely fashion or is entered via
"^DD",721,721,46,23,6,0)
options other than the spread sheet upload, this field will be blank.
"^DD",721,721,46,"DT")
3171005
"^DD",721,721,47,0)
DATE/TIME IMPORTED^D^^2;3^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",721,721,47,3)
Enter the date and time this record was imported.
"^DD",721,721,47,21,0)
^.001^2^2^3170921^^
"^DD",721,721,47,21,1,0)
For records entered via spread sheet upload, this will indicate the
"^DD",721,721,47,21,2,0)
date and time that the records were imported.
"^DD",721,721,47,23,0)
^^3^3^3170921^
"^DD",721,721,47,23,1,0)
For any records entered via spread sheet upload, this field will store
"^DD",721,721,47,23,2,0)
the date and time that the records were imported.  This date and time
"^DD",721,721,47,23,3,0)
will be used to identify records that were imported together.
"^DD",721,721,47,"DT")
3170921
"^DD",721,721,48,0)
SSID^FJ30^^2;4^K:$L(X)>30!($L(X)<3) X
"^DD",721,721,48,3)
Enter a unique spread sheet identifier for this record.  Answer must be between 3 and 30 characters.
"^DD",721,721,48,21,0)
^.001^2^2^3180621^^^^
"^DD",721,721,48,21,1,0)
This field will store the Spread Sheet Identification (SSID) for
"^DD",721,721,48,21,2,0)
records entered via the spread sheet upload option.
"^DD",721,721,48,23,0)
^^15^15^3180621^
"^DD",721,721,48,23,1,0)
For any records entered via the spread sheet upload options a unique
"^DD",721,721,48,23,2,0)
SSID will be assigned to all records imported and uploaded at the same
"^DD",721,721,48,23,3,0)
time.  This information will be used to group records together so that
"^DD",721,721,48,23,4,0)
action can be taken on all records within a spread sheet, such
"^DD",721,721,48,23,5,0)
as deleting or resubmitting.
"^DD",721,721,48,23,6,0)
 
"^DD",721,721,48,23,7,0)
The format of the SSID is as follows:
"^DD",721,721,48,23,8,0)
 2 char month
"^DD",721,721,48,23,9,0)
 2 char day
"^DD",721,721,48,23,10,0)
 4 char year
"^DD",721,721,48,23,11,0)
 2 char military hour
"^DD",721,721,48,23,12,0)
 2 char minutes
"^DD",721,721,48,23,13,0)
 2 char seconds
"^DD",721,721,48,23,14,0)
 4 char imported row count
"^DD",721,721,48,23,15,0)
 6 char imported volume sum
"^DD",721,721,48,"DT")
3180622
"^DD",724,724,13,0)
SEND TO PCE^S^A:Send All Records;N:Send No Records;OOS:Send OOS Records;^0;14^Q
"^DD",724,724,13,.1)
Send to PCE
"^DD",724,724,13,3)
Select the method to send your data, by DSS Unit, to PCE.
"^DD",724,724,13,21,0)
^^4^4^3171213^
"^DD",724,724,13,21,1,0)
This field controls the method of sending data, by DSS Unit, to the PCE
"^DD",724,724,13,21,2,0)
software. If the field contains an A (all records) or OOS (Occasion Of
"^DD",724,724,13,21,3,0)
Service) for this DSS Unit, data will be filed with PCE.  If the field
"^DD",724,724,13,21,4,0)
contains an N or is null, no filing will occur.
"^DD",724,724,13,23,0)
^.001^2^2^3171213^^^^
"^DD",724,724,13,23,1,0)
Set of codes that control sending data, by DSS Unit, to the PCE
"^DD",724,724,13,23,2,0)
software.
"^DD",724,724,13,"DT")
3171213
"^DD",724,724,16,0)
ALLOW DUPLICATES^S^Y:YES;N:NO;^0;16^Q
"^DD",724,724,16,3)
Indicate if this DSS Unit should allow duplicate workload entry.
"^DD",724,724,16,21,0)
^.001^5^5^3180205^^^^
"^DD",724,724,16,21,1,0)
This field will control whether workload associated with this DSS Unit,
"^DD",724,724,16,21,2,0)
when entered through the spreadsheet upload process, can be duplicated.
"^DD",724,724,16,21,3,0)
 
"^DD",724,724,16,21,4,0)
A value of yes will allow the user to override the duplicate entry warning
"^DD",724,724,16,21,5,0)
and create duplicate workload.
"^DD",724,724,16,23,0)
^.001^5^5^3180205^^^^
"^DD",724,724,16,23,1,0)
When entering workload through the spreadsheet upload process, there are
"^DD",724,724,16,23,2,0)
some instances where duplicate workload can occur for a specific DSS Unit.
"^DD",724,724,16,23,3,0)
However, in most cases, duplicate workload is not allowed and should be 
"^DD",724,724,16,23,4,0)
rejected.  This field will control whether the user can invoke the 
"^DD",724,724,16,23,5,0)
"file duplicate record" process during spreadsheet upload.
"^DD",724,724,16,"DT")
3180202
"BLD",10199,6)
^136
**END**
**END**

