KIDS Distribution saved on Mar 21, 2018@08:24:07
VistA Capacity Planning V2
**KIDS**:XU*8.0*670^KMP*4.0*0^

**INSTALL NAME**
XU*8.0*670
"BLD",9464,0)
XU*8.0*670^KERNEL^0^3180321^y
"BLD",9464,1,0)
^^1^1^3170427^
"BLD",9464,1,1,0)
Kernel support routines for KMP Capacity Management.
"BLD",9464,4,0)
^9.64PA^^
"BLD",9464,6.3)
45
"BLD",9464,"ABPKG")
n
"BLD",9464,"INI")
PRE^ZOSVKSP2
"BLD",9464,"INID")
^n^n
"BLD",9464,"INIT")
EN^ZOSVKSP2
"BLD",9464,"KRN",0)
^9.67PA^779.2^20
"BLD",9464,"KRN",.4,0)
.4
"BLD",9464,"KRN",.401,0)
.401
"BLD",9464,"KRN",.402,0)
.402
"BLD",9464,"KRN",.403,0)
.403
"BLD",9464,"KRN",.5,0)
.5
"BLD",9464,"KRN",.84,0)
.84
"BLD",9464,"KRN",3.6,0)
3.6
"BLD",9464,"KRN",3.8,0)
3.8
"BLD",9464,"KRN",9.2,0)
9.2
"BLD",9464,"KRN",9.8,0)
9.8
"BLD",9464,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",9464,"KRN",9.8,"NM",1,0)
ZOSVKRO^^0^B32258746
"BLD",9464,"KRN",9.8,"NM",2,0)
ZOSVKSD^^0^B19282396
"BLD",9464,"KRN",9.8,"NM","B","ZOSVKRO",1)

"BLD",9464,"KRN",9.8,"NM","B","ZOSVKSD",2)

"BLD",9464,"KRN",19,0)
19
"BLD",9464,"KRN",19.1,0)
19.1
"BLD",9464,"KRN",101,0)
101
"BLD",9464,"KRN",409.61,0)
409.61
"BLD",9464,"KRN",771,0)
771
"BLD",9464,"KRN",779.2,0)
779.2
"BLD",9464,"KRN",870,0)
870
"BLD",9464,"KRN",8989.51,0)
8989.51
"BLD",9464,"KRN",8989.52,0)
8989.52
"BLD",9464,"KRN",8994,0)
8994
"BLD",9464,"KRN","B",.4,.4)

"BLD",9464,"KRN","B",.401,.401)

"BLD",9464,"KRN","B",.402,.402)

"BLD",9464,"KRN","B",.403,.403)

"BLD",9464,"KRN","B",.5,.5)

"BLD",9464,"KRN","B",.84,.84)

"BLD",9464,"KRN","B",3.6,3.6)

"BLD",9464,"KRN","B",3.8,3.8)

"BLD",9464,"KRN","B",9.2,9.2)

"BLD",9464,"KRN","B",9.8,9.8)

"BLD",9464,"KRN","B",19,19)

"BLD",9464,"KRN","B",19.1,19.1)

"BLD",9464,"KRN","B",101,101)

"BLD",9464,"KRN","B",409.61,409.61)

"BLD",9464,"KRN","B",771,771)

"BLD",9464,"KRN","B",779.2,779.2)

"BLD",9464,"KRN","B",870,870)

"BLD",9464,"KRN","B",8989.51,8989.51)

"BLD",9464,"KRN","B",8989.52,8989.52)

"BLD",9464,"KRN","B",8994,8994)

"BLD",9464,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9464,"QUES",0)
^9.62^^
"BLD",9464,"REQB",0)
^9.611^1^1
"BLD",9464,"REQB",1,0)
XU*8.0*568^1
"BLD",9464,"REQB","B","XU*8.0*568",1)

"INI")
PRE^ZOSVKSP2
"INIT")
EN^ZOSVKSP2
"MBREQ")
0
"PKG",173,-1)
1^1
"PKG",173,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",173,20,0)
^9.402P^^0
"PKG",173,22,0)
^9.49I^1^1
"PKG",173,22,1,0)
8.0^2950703^2951015^1
"PKG",173,22,1,"PAH",1,0)
670^3180321^520791172
"PKG",173,22,1,"PAH",1,1,0)
^^1^1^3180321
"PKG",173,22,1,"PAH",1,1,1,0)
Kernel support routines for KMP Capacity Management.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","ZOSVKRO")
0^1^B32258746
"RTN","ZOSVKRO",1,0)
%ZOSVKR ;SF/KAK/RAK/JML - ZOSVKRO - Collect RUM Statistics for Cache on VMS/Linux/Windows ;7/7/2010
"RTN","ZOSVKRO",2,0)
 ;;8.0;KERNEL;**90,94,107,122,143,186,550,568,670**;3/1/2018;Build 45
"RTN","ZOSVKRO",3,0)
 ;
"RTN","ZOSVKRO",4,0)
RO(KMPVOPT) ; Record option resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",5,0)
 ;
"RTN","ZOSVKRO",6,0)
 N KMPVTYP S KMPVTYP=0  ; option
"RTN","ZOSVKRO",7,0)
 G EN
"RTN","ZOSVKRO",8,0)
 ;
"RTN","ZOSVKRO",9,0)
RP(KMPEVENT) ; Record protocol resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",10,0)
 ; Variable PRTCL = option_name^protocol_name
"RTN","ZOSVKRO",11,0)
 ;
"RTN","ZOSVKRO",12,0)
 ; quit if rum is turned off
"RTN","ZOSVKRO",13,0)
 Q:'$G(^%ZTSCH("LOGRSRC"))
"RTN","ZOSVKRO",14,0)
 ;
"RTN","ZOSVKRO",15,0)
 N KMPVOPT,KMPVPROT
"RTN","ZOSVKRO",16,0)
 S KMPVOPT=$P(KMPEVENT,"^"),KMPVPROT=$P(KMPEVENT,"^",2)
"RTN","ZOSVKRO",17,0)
 Q:KMPVPROT=""
"RTN","ZOSVKRO",18,0)
 ;
"RTN","ZOSVKRO",19,0)
 N KMPVTYP S KMPVTYP=1  ; protocol
"RTN","ZOSVKRO",20,0)
 G EN
"RTN","ZOSVKRO",21,0)
 ;
"RTN","ZOSVKRO",22,0)
RU(KMPEVENT,KMPVTYP,KMPVEXT) ;
"RTN","ZOSVKRO",23,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",24,0)
 ; Set metrics into ^KMPTMP("KMPV","VBEM","DLY"
"RTN","ZOSVKRO",25,0)
 ; Set negative number errors into ^KMPTMP("KMPV","VBEM","ERROR"
"RTN","ZOSVKRO",26,0)
 ;
"RTN","ZOSVKRO",27,0)
 ;Inputs: - MIRRORS RUM COLLECTOR
"RTN","ZOSVKRO",28,0)
 ;  KMPVOPT... Option name (may be option, protocol, rpc, etc.)
"RTN","ZOSVKRO",29,0)
 ;  KMPVTYP... type of option:
"RTN","ZOSVKRO",30,0)
 ;                   0 - Option
"RTN","ZOSVKRO",31,0)
 ;                   1 - Protocol
"RTN","ZOSVKRO",32,0)
 ;                   2 - RPC (Remote Procedure Call)
"RTN","ZOSVKRO",33,0)
 ;                   3 - HL7
"RTN","ZOSVKRO",34,0)
 ;  KMPVEXT... Possible: Extended option type - to identify requests from non-legacy sources
"RTN","ZOSVKRO",35,0)
 ;
"RTN","ZOSVKRO",36,0)
 ; ^KMPTMP("KMPV","VBEM","DLY"... Storage of data for current day
"RTN","ZOSVKRO",37,0)
 ;
"RTN","ZOSVKRO",38,0)
 ;NOTE: KMPV("NOKILL" is not "NEWED" or "KILLED" as it must exist between calls
"RTN","ZOSVKRO",39,0)
 ;         KMPV("NOKILL",node) contains stats that must exist between routine calls
"RTN","ZOSVKRO",40,0)
 ;         KMPV("NOKILL","KMPVMUMPS") persists M implementation to decrease overhead
"RTN","ZOSVKRO",41,0)
 ;         KMPV("NOKILL","KMPVVER") persists Version number to decrease overhead 
"RTN","ZOSVKRO",42,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",43,0)
 ;
"RTN","ZOSVKRO",44,0)
 Q:$G(KMPEVENT)=""
"RTN","ZOSVKRO",45,0)
 ;
"RTN","ZOSVKRO",46,0)
 N KMPVOPT,KMPVPROT
"RTN","ZOSVKRO",47,0)
 S KMPVOPT=$P(KMPEVENT,"^"),KMPVPROT=$P(KMPEVENT,"^",2)
"RTN","ZOSVKRO",48,0)
 ;
"RTN","ZOSVKRO",49,0)
 S KMPVTYP=+$G(KMPVTYP),KMPVEXT=+$G(KMPVEXT)
"RTN","ZOSVKRO",50,0)
 ;
"RTN","ZOSVKRO",51,0)
EN ;
"RTN","ZOSVKRO",52,0)
 ;
"RTN","ZOSVKRO",53,0)
 N KMPVCSTAT,KMPVDIFF,KMPVH,KMPVHOUR,KMPVHRSEC,KMPVHTIME,KMPVI,KMPVMET
"RTN","ZOSVKRO",54,0)
 N KMPVMIN,KMPVNODE,KMPVPOPT,KMPVPSTAT,KMPVSINT,KMPVSLOT,Y
"RTN","ZOSVKRO",55,0)
 ;
"RTN","ZOSVKRO",56,0)
 S KMPVSINT=$$GETVAL^KMPVCCFG("VBEM","COLLECTION INTERVAL",8969)
"RTN","ZOSVKRO",57,0)
 ;
"RTN","ZOSVKRO",58,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2) ;  IA 10097
"RTN","ZOSVKRO",59,0)
 I KMPVTYP I KMPVOPT="" S:$P($G(KMPV("NOKILL",KMPVNODE,$J)),U,10)["$LOGIN$" KMPVOPT="$LOGIN$"
"RTN","ZOSVKRO",60,0)
 I KMPVOPT="" Q:'+$G(^XUTL("XQ",$J,"T"))  S KMPVOPT=$P($G(^XUTL("XQ",$J,^XUTL("XQ",$J,"T"))),U,2) Q:KMPVOPT=""
"RTN","ZOSVKRO",61,0)
 ;
"RTN","ZOSVKRO",62,0)
 ; KMPVCSTAT = current stats for this $job:  cpu^lines^commands^GloRefs^ElapsedTime
"RTN","ZOSVKRO",63,0)
 S KMPVCSTAT=$$STATS()
"RTN","ZOSVKRO",64,0)
 Q:KMPVCSTAT=""
"RTN","ZOSVKRO",65,0)
 S $P(KMPVCSTAT,"^",5)=$ZTIMESTAMP
"RTN","ZOSVKRO",66,0)
 ;
"RTN","ZOSVKRO",67,0)
 ; KMPVPSTAT = previous stats for this $job
"RTN","ZOSVKRO",68,0)
 S KMPVPSTAT=$G(KMPV("NOKILL",KMPVNODE,$J,"STATS"))
"RTN","ZOSVKRO",69,0)
 S KMPVPOPT=$G(KMPV("NOKILL",KMPVNODE,$J,"OPT"))
"RTN","ZOSVKRO",70,0)
 ;
"RTN","ZOSVKRO",71,0)
 ; if previous option was tagged as being run from taskman(!)
"RTN","ZOSVKRO",72,0)
 ; then mark current OPTion as running from taskman(!)
"RTN","ZOSVKRO",73,0)
 I $P(KMPVPOPT,"***")=("!"_KMPVOPT) S KMPVOPT="!"_KMPVOPT
"RTN","ZOSVKRO",74,0)
 ;
"RTN","ZOSVKRO",75,0)
 ; concatenate to KMPVCSTAT: ...^OPTion^option_type
"RTN","ZOSVKRO",76,0)
 S KMPV("NOKILL",KMPVNODE,$J,"STATS")=KMPVCSTAT
"RTN","ZOSVKRO",77,0)
 S KMPV("NOKILL",KMPVNODE,$J,"OPT")=$S(KMPVTYP=2:"`"_KMPVOPT,KMPVTYP=3:"&"_KMPVOPT,1:KMPVOPT)_"***"_$G(KMPVPROT)
"RTN","ZOSVKRO",78,0)
 ;
"RTN","ZOSVKRO",79,0)
 ; if option and login or taskman
"RTN","ZOSVKRO",80,0)
 I 'KMPVTYP I KMPVOPT="$LOGIN$"!(KMPVOPT="$STRT ZTMS$") Q
"RTN","ZOSVKRO",81,0)
 ;
"RTN","ZOSVKRO",82,0)
 I KMPVOPT="$LOGOUT$"!(KMPVOPT="$STOP ZTMS$")!(KMPVOPT="XUPROGMODE") K KMPV("NOKILL",KMPVNODE,$J)
"RTN","ZOSVKRO",83,0)
 ;
"RTN","ZOSVKRO",84,0)
 Q:KMPVPSTAT=""
"RTN","ZOSVKRO",85,0)
 ; difference = current stats minus previous stats
"RTN","ZOSVKRO",86,0)
 ; KMPVDIFF       = KMPVCSTAT - KMPVPSTAT
"RTN","ZOSVKRO",87,0)
 ;            = cpu^lines^commands^GloRefs^ElapsedTime
"RTN","ZOSVKRO",88,0)
 F KMPVI=1:1:4 S $P(KMPVDIFF,"^",KMPVI)=$P(KMPVCSTAT,U,KMPVI)-$P(KMPVPSTAT,"^",KMPVI)
"RTN","ZOSVKRO",89,0)
 S $P(KMPVDIFF,U,5)=$$ETIME($P(KMPVCSTAT,U,5),$P(KMPVPSTAT,U,5))
"RTN","ZOSVKRO",90,0)
 ;
"RTN","ZOSVKRO",91,0)
 S KMPVOPT=KMPVPOPT ; Setting data from previous call
"RTN","ZOSVKRO",92,0)
 ;
"RTN","ZOSVKRO",93,0)
 S KMPVH=$H
"RTN","ZOSVKRO",94,0)
 S KMPVHRSEC=$ZT($P(KMPVH,",",2))
"RTN","ZOSVKRO",95,0)
 S KMPVHOUR=$P(KMPVHRSEC,":")
"RTN","ZOSVKRO",96,0)
 S KMPVMIN=$P(KMPVHRSEC,":",2)
"RTN","ZOSVKRO",97,0)
 S KMPVSLOT=+$P(KMPVMIN/KMPVSINT,".")
"RTN","ZOSVKRO",98,0)
 S KMPVHTIME=(KMPVHOUR*3600)+(KMPVSLOT*KMPVSINT*60) ; Same as KMPVVTCM using KMPVHANG. 
"RTN","ZOSVKRO",99,0)
 ;
"RTN","ZOSVKRO",100,0)
 S KMPVMET=$G(^KMPTMP("KMPV","VBEM","DLY",+KMPVH,KMPVNODE,KMPVHTIME,KMPVPOPT,$J))
"RTN","ZOSVKRO",101,0)
 S $P(KMPVMET,U)=$P(KMPVMET,U)+1
"RTN","ZOSVKRO",102,0)
 F KMPVI=2:1:6 S $P(KMPVMET,U,KMPVI)=$P(KMPVMET,U,KMPVI)+$P(KMPVDIFF,U,KMPVI-1)
"RTN","ZOSVKRO",103,0)
 F KMPVI=2:1:6 I $P(KMPVMET,U,KMPVI)<0 D  Q
"RTN","ZOSVKRO",104,0)
 .S ^KMPTMP("KMPV","VBEM","ERROR",+KMPVH,KMPVNODE,KMPVHTIME,KMPVPOPT,$J)=KMPVMET
"RTN","ZOSVKRO",105,0)
 S ^KMPTMP("KMPV","VBEM","DLY",+KMPVH,KMPVNODE,KMPVHTIME,KMPVPOPT,$J)=KMPVMET
"RTN","ZOSVKRO",106,0)
 ;
"RTN","ZOSVKRO",107,0)
 Q
"RTN","ZOSVKRO",108,0)
 ;
"RTN","ZOSVKRO",109,0)
STATS() ;  return current stats for this $job
"RTN","ZOSVKRO",110,0)
 N KMPVCPU,KMPVMUMPS,KMPVOS,KMPVPROC,KMPVRET,KMPVTCPU,KMPVV,KMPVVER,KMPVZH
"RTN","ZOSVKRO",111,0)
 ;
"RTN","ZOSVKRO",112,0)
 S KMPVRET=""
"RTN","ZOSVKRO",113,0)
 ; mumps implementation
"RTN","ZOSVKRO",114,0)
 I $G(KMPV("NOKILL","KMPVMUMPS"))="" S KMPV("NOKILL","KMPVMUMPS")=$$VERSION^%ZOSV(1) ; IA 10097
"RTN","ZOSVKRO",115,0)
 ; quit if not cache
"RTN","ZOSVKRO",116,0)
 Q:$TR(KMPV("NOKILL","KMPVMUMPS"),"cahe","CAHE")'["CACHE" ""
"RTN","ZOSVKRO",117,0)
 ; cache version
"RTN","ZOSVKRO",118,0)
 I $G(KMPV("NOKILL","KMPVVER"))="" S KMPV("NOKILL","KMPVVER")=$P($$VERSION^%ZOSV(0),".",1,2) ; IA 10097
"RTN","ZOSVKRO",119,0)
 ;
"RTN","ZOSVKRO",120,0)
 ; if version is greater than 2007
"RTN","ZOSVKRO",121,0)
 I KMPV("NOKILL","KMPVVER")>2007 D 
"RTN","ZOSVKRO",122,0)
 .; RETURN = cpu^lines^commands^GloRefs
"RTN","ZOSVKRO",123,0)
 .S KMPVPROC=##class(%SYS.ProcessQuery).%OpenId($J)
"RTN","ZOSVKRO",124,0)
 .Q:KMPVPROC=""
"RTN","ZOSVKRO",125,0)
 .; cpu time
"RTN","ZOSVKRO",126,0)
 .S KMPVCPU=KMPVPROC.GetCPUTime()
"RTN","ZOSVKRO",127,0)
 .S KMPVTCPU=$P(KMPVCPU,",")+$P(KMPVCPU,",",2)
"RTN","ZOSVKRO",128,0)
 .S $P(KMPVRET,U)=KMPVTCPU
"RTN","ZOSVKRO",129,0)
 .; m commands - lines
"RTN","ZOSVKRO",130,0)
 .S $P(KMPVRET,U,2)=KMPVPROC.LinesExecuted
"RTN","ZOSVKRO",131,0)
 .; m commands - commands
"RTN","ZOSVKRO",132,0)
 .S $P(KMPVRET,U,3)=KMPVPROC.CommandsExecuted
"RTN","ZOSVKRO",133,0)
 .; global references
"RTN","ZOSVKRO",134,0)
 .S $P(KMPVRET,U,4)=KMPVPROC.GlobalReferences
"RTN","ZOSVKRO",135,0)
 .; current time UTC
"RTN","ZOSVKRO",136,0)
 .S $P(KMPVRET,U,5)=$ZTIMESTAMP
"RTN","ZOSVKRO",137,0)
 ;
"RTN","ZOSVKRO",138,0)
 ; if version is 4 or greater and not linux and not unknown
"RTN","ZOSVKRO",139,0)
 E  D
"RTN","ZOSVKRO",140,0)
 .; operating system
"RTN","ZOSVKRO",141,0)
 .S KMPVOS=$$OS^%ZOSV ; IA 10097
"RTN","ZOSVKRO",142,0)
 .I (+KMPV("NOKILL","KMPVVER"))'<4&(KMPVOS'["UNIX")&(KMPVOS'["UNK") D
"RTN","ZOSVKRO",143,0)
 ..S KMPVV=$V(-1,$J),KMPVZH=$ZU(171)
"RTN","ZOSVKRO",144,0)
 ..; cpu time
"RTN","ZOSVKRO",145,0)
 ..S $P(KMPVRET,U)=$P(KMPVZH,",")
"RTN","ZOSVKRO",146,0)
 ..; m commands
"RTN","ZOSVKRO",147,0)
 ..S $P(KMPVRET,U,2)=$P($P(KMPVV,U,7),",")
"RTN","ZOSVKRO",148,0)
 ..; global references
"RTN","ZOSVKRO",149,0)
 ..S $P(KMPVRET,U,4)=$P($P(KMPVV,U,7),",",2)
"RTN","ZOSVKRO",150,0)
 ;
"RTN","ZOSVKRO",151,0)
 Q KMPVRET
"RTN","ZOSVKRO",152,0)
 ;
"RTN","ZOSVKRO",153,0)
ETIME(KMPVCUR,KMPVPREV) ;Calculate elapsed time for event
"RTN","ZOSVKRO",154,0)
 N KMPVDAYS,KMPVETIME
"RTN","ZOSVKRO",155,0)
 ; IF WITHIN SAME DAY
"RTN","ZOSVKRO",156,0)
 S KMPVETIME=""
"RTN","ZOSVKRO",157,0)
 I +KMPVCUR=+KMPVPREV D
"RTN","ZOSVKRO",158,0)
 .S KMPVETIME=$P(KMPVCUR,",",2)-$P(KMPVPREV,",",2)
"RTN","ZOSVKRO",159,0)
 ; IF OVER CHANGE OF DAY
"RTN","ZOSVKRO",160,0)
 E  D
"RTN","ZOSVKRO",161,0)
 .S KMPVETIME=$P(KMPVCUR,",",2)+(86400-$P(KMPVPREV,",",2))
"RTN","ZOSVKRO",162,0)
 .; IN CASE RUNS OVER 2 DAY BOUNDARIES
"RTN","ZOSVKRO",163,0)
 .S KMPVDAYS=(+KMPVCUR)-(+KMPVPREV)
"RTN","ZOSVKRO",164,0)
 .I KMPVDAYS>1 S KMPVETIME=KMPVETIME+((KMPVDAYS-1)*86400)
"RTN","ZOSVKRO",165,0)
 Q KMPVETIME
"RTN","ZOSVKSD")
0^2^B19282396
"RTN","ZOSVKSD",1,0)
%ZOSVKSD ;OAK/KAK/RAK/JML - ZOSVKSD - Calculate Disk Capacity ;7/25/2004
"RTN","ZOSVKSD",2,0)
 ;;8.0;KERNEL;**121,197,268,456,568,670**;3/1/2018;Build 45
"RTN","ZOSVKSD",3,0)
 ;
"RTN","ZOSVKSD",4,0)
 ; This routine will help to calculate disk capacity for
"RTN","ZOSVKSD",5,0)
 ; Cache system platforms by looking up volume set table information
"RTN","ZOSVKSD",6,0)
 ;
"RTN","ZOSVKSD",7,0)
EN(SITENUM,SESSNUM,OS) ;-- called by routine SYS+2^KMPSLK
"RTN","ZOSVKSD",8,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",9,0)
 ; SITENUM = Station number of site
"RTN","ZOSVKSD",10,0)
 ; SESSNUM = SAGG session number
"RTN","ZOSVKSD",11,0)
 ; VOLS    = Array containing names of monitored volumes
"RTN","ZOSVKSD",12,0)
 ; OS      = Type of M platform (CVMS, CWINNT)
"RTN","ZOSVKSD",13,0)
 ;
"RTN","ZOSVKSD",14,0)
 ; Returns ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",vol_name) = vol_size
"RTN","ZOSVKSD",15,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",16,0)
 ;
"RTN","ZOSVKSD",17,0)
 Q:'$G(SITENUM)
"RTN","ZOSVKSD",18,0)
 Q:$G(SESSNUM)=""
"RTN","ZOSVKSD",19,0)
 Q:$G(OS)=""
"RTN","ZOSVKSD",20,0)
 ;
"RTN","ZOSVKSD",21,0)
 D ALLOS
"RTN","ZOSVKSD",22,0)
 ;
"RTN","ZOSVKSD",23,0)
 Q
"RTN","ZOSVKSD",24,0)
 ;
"RTN","ZOSVKSD",25,0)
ALLOS ; Using InterSystems APIs.  Designed to work on all OS's
"RTN","ZOSVKSD",26,0)
 N KMPSARR,KMPSDIR,KMPSRNS,KMPSTNS,KMPSPTR
"RTN","ZOSVKSD",27,0)
 ; 
"RTN","ZOSVKSD",28,0)
 ; KMPS*2.0*1 -- now monitoring all volume sets
"RTN","ZOSVKSD",29,0)
 ;
"RTN","ZOSVKSD",30,0)
 S KMPSDIR="",KMPSARR=""
"RTN","ZOSVKSD",31,0)
 S KMPSRNS=$ZU(5),KMPSTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",32,0)
 F  S KMPSDIR=$O(^SYS("UCI",KMPSDIR)) Q:KMPSDIR=""  D
"RTN","ZOSVKSD",33,0)
 .Q:$G(^SYS("UCI",KMPSDIR))]""
"RTN","ZOSVKSD",34,0)
 .; get TOTAL BLOCKS for directory
"RTN","ZOSVKSD",35,0)
 .S KMPSPTR=##class(SYS.Database).%OpenId(KMPSDIR)
"RTN","ZOSVKSD",36,0)
 .; quit if not mounted
"RTN","ZOSVKSD",37,0)
 .Q:KMPSPTR.Mounted'=1
"RTN","ZOSVKSD",38,0)
 .;
"RTN","ZOSVKSD",39,0)
 .S KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)=KMPSPTR.Blocks
"RTN","ZOSVKSD",40,0)
 S KMPSTNS=$ZU(5,KMPSRNS)
"RTN","ZOSVKSD",41,0)
 S KMPSDIR=""
"RTN","ZOSVKSD",42,0)
 F  S KMPSDIR=$O(KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)) Q:KMPSDIR=""  D
"RTN","ZOSVKSD",43,0)
 .S ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)=KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)
"RTN","ZOSVKSD",44,0)
 Q
"RTN","ZOSVKSD",45,0)
 ;
"RTN","ZOSVKSD",46,0)
KMPVVSTM(KMPVDATA) ; Get storage metrics for Vista Storage Monitor (VSTM) within VistA System Monitor (VSM)
"RTN","ZOSVKSD",47,0)
 N KMPVRNS,KMPVTNS,KMPVDIR,KMPVDB,KMPVMAX,KMPVSIZE,KMPVBSIZ,KMPVBPM,KMPVSTAT,KMPVFMB
"RTN","ZOSVKSD",48,0)
 N KMPVFBLK,KMPVSYSD,KMPVESIZ,KMPVFLAG,KMPVRSET,KMPVDFSP
"RTN","ZOSVKSD",49,0)
 S U="^"
"RTN","ZOSVKSD",50,0)
 ; get current namespace, switch to %SYS
"RTN","ZOSVKSD",51,0)
 S KMPVRNS=$ZU(5),KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",52,0)
 S KMPVDIR=""
"RTN","ZOSVKSD",53,0)
 S KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",54,0)
 F  S KMPVDIR=$O(^SYS("UCI",KMPVDIR)) Q:KMPVDIR=""  D
"RTN","ZOSVKSD",55,0)
 .Q:$G(^SYS("UCI",KMPVDIR))]""
"RTN","ZOSVKSD",56,0)
 .S KMPVDB=##class(SYS.Database).%OpenId(KMPVDIR)
"RTN","ZOSVKSD",57,0)
 .S KMPVMAX=KMPVDB.MaxSize,KMPVSIZE=KMPVDB.Size
"RTN","ZOSVKSD",58,0)
 .S KMPVBSIZ=KMPVDB.BlockSize,KMPVBPM=KMPVDB.BlocksPerMap
"RTN","ZOSVKSD",59,0)
 .S KMPVSTAT=KMPVDB.GetFreeSpace(KMPVDIR,.KMPVFMB,.KMPVFBLK)
"RTN","ZOSVKSD",60,0)
 .S KMPVSYSD=KMPVDB.IsSystemDB(KMPVDIR),KMPVESIZ=KMPVDB.ExpansionSize
"RTN","ZOSVKSD",61,0)
 .; MaxSize(MB)^Current Size(MB)^Block Size(int)^Bocks per Map(int)^Free space(MB)^
"RTN","ZOSVKSD",62,0)
 .; Free Space(int-Blocks)^System Dir(bool)^Expansion size
"RTN","ZOSVKSD",63,0)
 .S KMPVDATA(KMPVDIR)=KMPVMAX_U_KMPVSIZE_U_KMPVBSIZ_U_KMPVBPM_U_KMPVFMB_U_KMPVFBLK_U_KMPVSYSD_U_KMPVESIZ
"RTN","ZOSVKSD",64,0)
 ; Execute FreeSpace Query to add Directory Free Space
"RTN","ZOSVKSD",65,0)
 S KMPVFLAG="*"
"RTN","ZOSVKSD",66,0)
 S KMPVRSET=##class(%Library.ResultSet).%New("SYS.Database:FreeSpace")
"RTN","ZOSVKSD",67,0)
 D KMPVRSET.Execute(KMPVFLAG,0)
"RTN","ZOSVKSD",68,0)
 While (KMPVRSET.Next()) {
"RTN","ZOSVKSD",69,0)
  I (KMPVRSET.Data("Available")["Dismounted") continue
"RTN","ZOSVKSD",70,0)
  S KMPVDFSP=KMPVRSET.Data("DiskFreeSpace"),KMPVDIR=KMPVRSET.Data("Directory")
"RTN","ZOSVKSD",71,0)
  I $D(KMPVDATA(KMPVDIR)) S $P(KMPVDATA(KMPVDIR),"^",9)=KMPVDFSP
"RTN","ZOSVKSD",72,0)
 }
"RTN","ZOSVKSD",73,0)
 D KMPVRSET.Close()
"RTN","ZOSVKSD",74,0)
 ; Switch back to production namespace
"RTN","ZOSVKSD",75,0)
 S KMPVTNS=$ZU(5,KMPVRNS)
"RTN","ZOSVKSD",76,0)
 Q
"RTN","ZOSVKSD",77,0)
 ;
"RTN","ZOSVKSD",78,0)
KMPVVTCM(KMPVDATA) ; Get Cache metrics for Vista Timed Collection Monitor (VTCM) within VistA System Monitor (VSM)
"RTN","ZOSVKSD",79,0)
 N U,KMPVRNS,KMPVTNS
"RTN","ZOSVKSD",80,0)
 S U="^"
"RTN","ZOSVKSD",81,0)
 ; get current namespace, switch to %SYS
"RTN","ZOSVKSD",82,0)
 S KMPVRNS=$ZU(5),KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",83,0)
 S KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",84,0)
 ;
"RTN","ZOSVKSD",85,0)
 S KMPVDATA("KMPVDASH")=##class(SYS.Stats.Dashboard).Sample()
"RTN","ZOSVKSD",86,0)
 S KMPVDATA("KMPVROUT")=##class(SYS.Stats.Routine).Sample()
"RTN","ZOSVKSD",87,0)
 S KMPVDATA("KMPVSMH")=##class(%SYSTEM.Config.SharedMemoryHeap).GetUsageSummary()
"RTN","ZOSVKSD",88,0)
 S KMPVDATA("KMPVMEM")=##class(%SYSTEM.Config.SharedMemoryHeap).FreeCount()
"RTN","ZOSVKSD",89,0)
 ;
"RTN","ZOSVKSD",90,0)
 ; Return to 'from' namespace
"RTN","ZOSVKSD",91,0)
 S KMPVTNS=$ZU(5,KMPVRNS)
"RTN","ZOSVKSD",92,0)
 Q
"RTN","ZOSVKSD",93,0)
 ;
"RTN","ZOSVKSD",94,0)
BLKCOL(KMPVRET) ;
"RTN","ZOSVKSD",95,0)
 ; ** Non interactive subset of Intersystems' ^BLKCOL routine - includes parts of BLKCOL and RUNERR line tags
"RTN","ZOSVKSD",96,0)
 ;
"RTN","ZOSVKSD",97,0)
 N KMPVRNS,KMPVTNS,KMPVSEC,KMPVWAIT,KMPVDET,KMPVCOL,KMPVTO,KMPVCNT,KMPVINFO
"RTN","ZOSVKSD",98,0)
 ; get current namespace, switch to %SYS
"RTN","ZOSVKSD",99,0)
 S KMPVRNS=$ZU(5),KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",100,0)
 S KMPVSEC=10,KMPVWAIT=10,KMPVDET=2,KMPVRET=""
"RTN","ZOSVKSD",101,0)
 ;
"RTN","ZOSVKSD",102,0)
 S $ZTRAP="RUNERR"
"RTN","ZOSVKSD",103,0)
 L +^SYS("BLKCOL"):5 E  Q
"RTN","ZOSVKSD",104,0)
 K ^||BLKCOL
"RTN","ZOSVKSD",105,0)
 S KMPVCOL=0,KMPVTO=$ZH+KMPVSEC
"RTN","ZOSVKSD",106,0)
 F KMPVCNT=1:1:1000 D
"RTN","ZOSVKSD",107,0)
 .S KMPVINFO=$zu(190,17)
"RTN","ZOSVKSD",108,0)
 .I KMPVINFO]"" S KMPVCOL=KMPVCOL+1
"RTN","ZOSVKSD",109,0)
 .H KMPVWAIT/1000
"RTN","ZOSVKSD",110,0)
 S KMPVRET=KMPVCNT_","_KMPVCOL
"RTN","ZOSVKSD",111,0)
 L -^SYS("BLKCOL")
"RTN","ZOSVKSD",112,0)
 ; Return to 'from' namespace
"RTN","ZOSVKSD",113,0)
 S KMPVTNS=$ZU(5,KMPVRNS)
"RTN","ZOSVKSD",114,0)
 Q
"RTN","ZOSVKSD",115,0)
RUNERR ; Trap errors
"RTN","ZOSVKSD",116,0)
 S $ZTRAP=""
"RTN","ZOSVKSD",117,0)
 L -^SYS("BLKCOL")
"RTN","ZOSVKSD",118,0)
 ; Return to 'from' namespace
"RTN","ZOSVKSD",119,0)
 S KMPVTNS=$ZU(5,KMPVRNS)
"RTN","ZOSVKSD",120,0)
 Q
"RTN","ZOSVKSP2")
0^^B1286573
"RTN","ZOSVKSP2",1,0)
ZOSVKSP2 ;BP/RAK/JML - Post install routine ;7/26/2004
"RTN","ZOSVKSP2",2,0)
 ;;8.0;KERNEL;**670**;3/1/2018;Build 45
"RTN","ZOSVKSP2",3,0)
 ;
"RTN","ZOSVKSP2",4,0)
EN ;-- entry point for post-install
"RTN","ZOSVKSP2",5,0)
 ;
"RTN","ZOSVKSP2",6,0)
 D BMES^XPDUTL(" Begin Post-Install...")
"RTN","ZOSVKSP2",7,0)
 D SAVE
"RTN","ZOSVKSP2",8,0)
 D MES^XPDUTL(" Post-Install complete!")
"RTN","ZOSVKSP2",9,0)
 ;
"RTN","ZOSVKSP2",10,0)
 Q
"RTN","ZOSVKSP2",11,0)
 ;
"RTN","ZOSVKSP2",12,0)
SAVE ;-save correct files as '%' routines 
"RTN","ZOSVKSP2",13,0)
 ;
"RTN","ZOSVKSP2",14,0)
 N %D,%S,SCR,ZTOS
"RTN","ZOSVKSP2",15,0)
 S ZTOS=$$OSNUM^ZTMGRSET
"RTN","ZOSVKSP2",16,0)
 ; if not supported
"RTN","ZOSVKSP2",17,0)
 I ZTOS'=3 D  Q
"RTN","ZOSVKSP2",18,0)
 .D MES^XPDUTL(" "_$P($T(@ZTOS^ZTMGRSET),";",3)_" is not supported.  No routine saved!")
"RTN","ZOSVKSP2",19,0)
 ; supported
"RTN","ZOSVKSP2",20,0)
 S %D="%ZOSVKSD^%ZOSVKR",%S="ZOSVKSD^ZOSVKRO",SCR="I 1"
"RTN","ZOSVKSP2",21,0)
 D MOVE^ZTMGRSET
"RTN","ZOSVKSP2",22,0)
 D MES^XPDUTL("          for "_$P($T(@ZTOS^ZTMGRSET),";",3)_".")
"RTN","ZOSVKSP2",23,0)
 ;
"RTN","ZOSVKSP2",24,0)
 Q
"RTN","ZOSVKSP2",25,0)
 ;
"RTN","ZOSVKSP2",26,0)
PRE ; Stop RUM handler prior to installing anything.
"RTN","ZOSVKSP2",27,0)
 N DA,DIE,DR
"RTN","ZOSVKSP2",28,0)
 S DIE=8989.3,DA=1,DR="300///NO" D ^DIE
"RTN","ZOSVKSP2",29,0)
 Q
"RTN","ZOSVKSP2",30,0)
 ;
"VER")
8.0^22.0
**INSTALL NAME**
KMP*4.0*0
"BLD",9465,0)
KMP*4.0*0^CAPCITY MANAGEMENT^0^3180321^y
"BLD",9465,1,0)
^^10^10^3170428^
"BLD",9465,1,1,0)
The purpose of patch KMP*4.0*0 is to deploy the VistA Business Event 
"BLD",9465,1,2,0)
Monitor  (VBEM) as part of the Capacity Management (KMP*) VistA System
"BLD",9465,1,3,0)
Monitor (KMPV) tools suite. T VBEM will collect Cache metrics for VistA
"BLD",9465,1,4,0)
functions  (Menu Options, TaskMan Jobs and Remote Procedure Calls) such
"BLD",9465,1,5,0)
that they can be used in conjunction with metrics collected via other
"BLD",9465,1,6,0)
deployed capacity management tools. This functionality will replace
"BLD",9465,1,7,0)
current Resource Utilization Monitor (RUM) functionality.
"BLD",9465,1,8,0)
 
"BLD",9465,1,9,0)
This patch also updates the existing VistA Timed Collection Monitor (VTCM)
"BLD",9465,1,10,0)
to collect metrics using standard InterSystems provided APIs.
"BLD",9465,4,0)
^9.64PA^8969^3
"BLD",9465,4,8969,0)
8969
"BLD",9465,4,8969,222)
y^n^f^^^^n
"BLD",9465,4,8969.02,0)
8969.02
"BLD",9465,4,8969.02,2,0)
^9.641^8969.02^1
"BLD",9465,4,8969.02,2,8969.02,0)
VSM MONITOR DEFAULTS  (File-top level)
"BLD",9465,4,8969.02,2,8969.02,1,0)
^9.6411^.03^1
"BLD",9465,4,8969.02,2,8969.02,1,.03,0)
COLLECTION INTERVAL
"BLD",9465,4,8969.02,222)
y^n^p^^^^n^^n
"BLD",9465,4,8969.02,224)

"BLD",9465,4,8969.03,0)
8969.03
"BLD",9465,4,8969.03,2,0)
^9.641^8969.03^1
"BLD",9465,4,8969.03,2,8969.03,0)
VSM CACHE TASK LOG  (File-top level)
"BLD",9465,4,8969.03,2,8969.03,1,0)
^9.6411^.05^1
"BLD",9465,4,8969.03,2,8969.03,1,.05,0)
VMCM RUNTIME
"BLD",9465,4,8969.03,222)
y^n^p^^^^n^^n
"BLD",9465,4,8969.03,224)

"BLD",9465,4,"APDD",8969.02,8969.02)

"BLD",9465,4,"APDD",8969.02,8969.02,.03)

"BLD",9465,4,"APDD",8969.03,8969.03)

"BLD",9465,4,"APDD",8969.03,8969.03,.05)

"BLD",9465,4,"B",8969,8969)

"BLD",9465,4,"B",8969.02,8969.02)

"BLD",9465,4,"B",8969.03,8969.03)

"BLD",9465,6.3)
38
"BLD",9465,"ABPKG")
n
"BLD",9465,"INID")
^n
"BLD",9465,"INIT")
KMPVPST2
"BLD",9465,"KRN",0)
^9.67PA^779.2^20
"BLD",9465,"KRN",.4,0)
.4
"BLD",9465,"KRN",.401,0)
.401
"BLD",9465,"KRN",.402,0)
.402
"BLD",9465,"KRN",.403,0)
.403
"BLD",9465,"KRN",.403,"NM",0)
^9.68A^2^2
"BLD",9465,"KRN",.403,"NM",1,0)
KMPV EDIT CONFIGURATION    FILE #8969^8969^0
"BLD",9465,"KRN",.403,"NM",2,0)
KMPV VIEW CONFIGURATION    FILE #8969^8969^0
"BLD",9465,"KRN",.403,"NM","B","KMPV EDIT CONFIGURATION    FILE #8969",1)

"BLD",9465,"KRN",.403,"NM","B","KMPV VIEW CONFIGURATION    FILE #8969",2)

"BLD",9465,"KRN",.5,0)
.5
"BLD",9465,"KRN",.84,0)
.84
"BLD",9465,"KRN",3.6,0)
3.6
"BLD",9465,"KRN",3.8,0)
3.8
"BLD",9465,"KRN",9.2,0)
9.2
"BLD",9465,"KRN",9.8,0)
9.8
"BLD",9465,"KRN",9.8,"NM",0)
^9.68A^12^12
"BLD",9465,"KRN",9.8,"NM",1,0)
KMPVVTCM^^0^B40949860
"BLD",9465,"KRN",9.8,"NM",2,0)
KMPVVSTM^^0^B25044497
"BLD",9465,"KRN",9.8,"NM",3,0)
KMPVBETR^^0^B27830424
"BLD",9465,"KRN",9.8,"NM",4,0)
KMPVCCFG^^0^B56139201
"BLD",9465,"KRN",9.8,"NM",5,0)
KMPVCSRV^^0^B125192908
"BLD",9465,"KRN",9.8,"NM",6,0)
KMPVCBG^^0^B123736244
"BLD",9465,"KRN",9.8,"NM",7,0)
KMPVLM^^0^B24931836
"BLD",9465,"KRN",9.8,"NM",8,0)
KMPDSS^^0^B5431197
"BLD",9465,"KRN",9.8,"NM",9,0)
KMPDUTL1^^0^B28860851
"BLD",9465,"KRN",9.8,"NM",10,0)
KMPDRDAT^^0^B18926908
"BLD",9465,"KRN",9.8,"NM",11,0)
KMPVVMCM^^0^B42787451
"BLD",9465,"KRN",9.8,"NM",12,0)
KMPVVHLM^^0^B195443115
"BLD",9465,"KRN",9.8,"NM","B","KMPDRDAT",10)

"BLD",9465,"KRN",9.8,"NM","B","KMPDSS",8)

"BLD",9465,"KRN",9.8,"NM","B","KMPDUTL1",9)

"BLD",9465,"KRN",9.8,"NM","B","KMPVBETR",3)

"BLD",9465,"KRN",9.8,"NM","B","KMPVCBG",6)

"BLD",9465,"KRN",9.8,"NM","B","KMPVCCFG",4)

"BLD",9465,"KRN",9.8,"NM","B","KMPVCSRV",5)

"BLD",9465,"KRN",9.8,"NM","B","KMPVLM",7)

"BLD",9465,"KRN",9.8,"NM","B","KMPVVHLM",12)

"BLD",9465,"KRN",9.8,"NM","B","KMPVVMCM",11)

"BLD",9465,"KRN",9.8,"NM","B","KMPVVSTM",2)

"BLD",9465,"KRN",9.8,"NM","B","KMPVVTCM",1)

"BLD",9465,"KRN",19,0)
19
"BLD",9465,"KRN",19,"NM",0)
^9.68A^14^14
"BLD",9465,"KRN",19,"NM",1,0)
KMPV VBEM DATA TRANSMISSION^^0
"BLD",9465,"KRN",19,"NM",2,0)
KMPR BACKGROUND DRIVER^^0
"BLD",9465,"KRN",19,"NM",3,0)
KMPR RUM MANAGER MENU^^0
"BLD",9465,"KRN",19,"NM",4,0)
KMPR START COLLECTION^^0
"BLD",9465,"KRN",19,"NM",5,0)
KMPR STATUS COLLECTION^^0
"BLD",9465,"KRN",19,"NM",6,0)
KMPR STOP COLLECTION^^0
"BLD",9465,"KRN",19,"NM",7,0)
KMPR REPORTS MENU^^0
"BLD",9465,"KRN",19,"NM",8,0)
KMPR GRAPH ALL NODES^^0
"BLD",9465,"KRN",19,"NM",9,0)
KMPR GRAPH HOURLY SINGLE NODE^^0
"BLD",9465,"KRN",19,"NM",10,0)
KMPR PRINT HOURLY OCCURRENCE^^0
"BLD",9465,"KRN",19,"NM",11,0)
KMPR PRINT NODE PERCENT^^0
"BLD",9465,"KRN",19,"NM",12,0)
KMPR PRINT OPTION DATA^^0
"BLD",9465,"KRN",19,"NM",13,0)
KMPV VMCM DATA TRANSMISSION^^0
"BLD",9465,"KRN",19,"NM",14,0)
KMPV VHLM DATA TRANSMISSION^^0
"BLD",9465,"KRN",19,"NM","B","KMPR BACKGROUND DRIVER",2)

"BLD",9465,"KRN",19,"NM","B","KMPR GRAPH ALL NODES",8)

"BLD",9465,"KRN",19,"NM","B","KMPR GRAPH HOURLY SINGLE NODE",9)

"BLD",9465,"KRN",19,"NM","B","KMPR PRINT HOURLY OCCURRENCE",10)

"BLD",9465,"KRN",19,"NM","B","KMPR PRINT NODE PERCENT",11)

"BLD",9465,"KRN",19,"NM","B","KMPR PRINT OPTION DATA",12)

"BLD",9465,"KRN",19,"NM","B","KMPR REPORTS MENU",7)

"BLD",9465,"KRN",19,"NM","B","KMPR RUM MANAGER MENU",3)

"BLD",9465,"KRN",19,"NM","B","KMPR START COLLECTION",4)

"BLD",9465,"KRN",19,"NM","B","KMPR STATUS COLLECTION",5)

"BLD",9465,"KRN",19,"NM","B","KMPR STOP COLLECTION",6)

"BLD",9465,"KRN",19,"NM","B","KMPV VBEM DATA TRANSMISSION",1)

"BLD",9465,"KRN",19,"NM","B","KMPV VHLM DATA TRANSMISSION",14)

"BLD",9465,"KRN",19,"NM","B","KMPV VMCM DATA TRANSMISSION",13)

"BLD",9465,"KRN",19.1,0)
19.1
"BLD",9465,"KRN",101,0)
101
"BLD",9465,"KRN",409.61,0)
409.61
"BLD",9465,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",9465,"KRN",409.61,"NM",1,0)
KMPV MANAGEMENT^^0
"BLD",9465,"KRN",409.61,"NM","B","KMPV MANAGEMENT",1)

"BLD",9465,"KRN",771,0)
771
"BLD",9465,"KRN",779.2,0)
779.2
"BLD",9465,"KRN",870,0)
870
"BLD",9465,"KRN",8989.51,0)
8989.51
"BLD",9465,"KRN",8989.52,0)
8989.52
"BLD",9465,"KRN",8994,0)
8994
"BLD",9465,"KRN","B",.4,.4)

"BLD",9465,"KRN","B",.401,.401)

"BLD",9465,"KRN","B",.402,.402)

"BLD",9465,"KRN","B",.403,.403)

"BLD",9465,"KRN","B",.5,.5)

"BLD",9465,"KRN","B",.84,.84)

"BLD",9465,"KRN","B",3.6,3.6)

"BLD",9465,"KRN","B",3.8,3.8)

"BLD",9465,"KRN","B",9.2,9.2)

"BLD",9465,"KRN","B",9.8,9.8)

"BLD",9465,"KRN","B",19,19)

"BLD",9465,"KRN","B",19.1,19.1)

"BLD",9465,"KRN","B",101,101)

"BLD",9465,"KRN","B",409.61,409.61)

"BLD",9465,"KRN","B",771,771)

"BLD",9465,"KRN","B",779.2,779.2)

"BLD",9465,"KRN","B",870,870)

"BLD",9465,"KRN","B",8989.51,8989.51)

"BLD",9465,"KRN","B",8989.52,8989.52)

"BLD",9465,"KRN","B",8994,8994)

"BLD",9465,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9465,"QUES",0)
^9.62^^
"BLD",9465,"REQB",0)
^9.611^1^1
"BLD",9465,"REQB",1,0)
KMPV*1.0*0^1
"BLD",9465,"REQB","B","KMPV*1.0*0",1)

"FIA",8969)
VSM CONFIGURATION
"FIA",8969,0)
^KMPV(8969,
"FIA",8969,0,0)
8969
"FIA",8969,0,1)
y^n^f^^^^n
"FIA",8969,0,10)

"FIA",8969,0,11)

"FIA",8969,0,"RLRO")

"FIA",8969,0,"VR")
4.0^KMP
"FIA",8969,8969)
0
"FIA",8969.02)
VSM MONITOR DEFAULTS
"FIA",8969.02,0)
^KMPV(8969.02,
"FIA",8969.02,0,0)
8969.02
"FIA",8969.02,0,1)
y^n^p^^^^n^^n
"FIA",8969.02,0,10)

"FIA",8969.02,0,11)

"FIA",8969.02,0,"RLRO")

"FIA",8969.02,0,"VR")
4.0^KMP
"FIA",8969.02,8969.02)
1
"FIA",8969.02,8969.02,.03)

"FIA",8969.03)
VSM CACHE TASK LOG
"FIA",8969.03,0)
^KMPV(8969.03,
"FIA",8969.03,0,0)
8969.03D
"FIA",8969.03,0,1)
y^n^p^^^^n^^n
"FIA",8969.03,0,10)

"FIA",8969.03,0,11)

"FIA",8969.03,0,"RLRO")

"FIA",8969.03,0,"VR")
4.0^KMP
"FIA",8969.03,8969.03)
1
"FIA",8969.03,8969.03,.05)

"INIT")
KMPVPST2
"KRN",.403,152,-1)
0^1
"KRN",.403,152,0)
KMPV EDIT CONFIGURATION^@^@^^3141014.1428^^^8969^0^0^1
"KRN",.403,152,40,0)
^.4031I^1^1
"KRN",.403,152,40,1,0)
1^^1,1
"KRN",.403,152,40,1,1)
Page 1
"KRN",.403,152,40,1,40,0)
^.4032IP^557^2
"KRN",.403,152,40,1,40,554,0)
KMPV EDIT CFG^1^1,1^e
"KRN",.403,152,40,1,40,557,0)
KMPV EDIT TITLE^2^16,1^d
"KRN",.403,153,-1)
0^2
"KRN",.403,153,0)
KMPV VIEW CONFIGURATION^@^@^^3141015.0848^^^8969^1^0^1
"KRN",.403,153,40,0)
^.4031I^1^1
"KRN",.403,153,40,1,0)
1^^1,1
"KRN",.403,153,40,1,1)
Page 1
"KRN",.403,153,40,1,40,0)
^.4032IP^556^2
"KRN",.403,153,40,1,40,555,0)
KMPV VIEW CFG^1^1,1^d
"KRN",.403,153,40,1,40,556,0)
KMPV VIEW TITLE^2^16,1^d
"KRN",.404,554,0)
KMPV EDIT CFG^8969
"KRN",.404,554,40,0)
^.4044I^9^7
"KRN",.404,554,40,1,0)
1^EDIT VSM CONFIGURATION^1
"KRN",.404,554,40,1,2)
^^1,27
"KRN",.404,554,40,2,0)
2^DAYS TO KEEP DATA^3
"KRN",.404,554,40,2,1)
1.01
"KRN",.404,554,40,2,2)
3,22^1^3,1
"KRN",.404,554,40,3,0)
3^COLLECTION INTERVAL^3
"KRN",.404,554,40,3,1)
1.02
"KRN",.404,554,40,3,2)
5,22^3^5,1
"KRN",.404,554,40,6,0)
4^ALLOW TEST SYSTEM^3
"KRN",.404,554,40,6,1)
1.04
"KRN",.404,554,40,6,2)
7,22^3^7,1
"KRN",.404,554,40,7,0)
5^LOCAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,554,40,7,1)
3.04
"KRN",.404,554,40,7,2)
9,30^50^9,1
"KRN",.404,554,40,8,0)
7^TASKMAN SCHEDULE START^3
"KRN",.404,554,40,8,1)
1.06
"KRN",.404,554,40,8,2)
13,30^20^13,1
"KRN",.404,554,40,9,0)
6^TASKMAN SCHEDULE FREQUENCY^3
"KRN",.404,554,40,9,1)
1.05
"KRN",.404,554,40,9,2)
11,30^10^11,1
"KRN",.404,555,0)
KMPV VIEW CFG^8969^
"KRN",.404,555,40,0)
^.4044I^23^19
"KRN",.404,555,40,2,0)
3^ONOFF^3
"KRN",.404,555,40,2,1)
.02
"KRN",.404,555,40,2,2)
3,27^3^3,20
"KRN",.404,555,40,3,0)
4^VERSION^3
"KRN",.404,555,40,3,1)
.04
"KRN",.404,555,40,3,2)
3,41^6^3,32
"KRN",.404,555,40,4,0)
5^INSTALL DATE^3
"KRN",.404,555,40,4,1)
.05
"KRN",.404,555,40,4,2)
3,62^17^3,48
"KRN",.404,555,40,5,0)
11^DAYS TO KEEP DATA^3
"KRN",.404,555,40,5,1)
1.01
"KRN",.404,555,40,5,2)
6,77^1^6,56
"KRN",.404,555,40,6,0)
10^COLLECTION INTERVAL^3
"KRN",.404,555,40,6,1)
1.02
"KRN",.404,555,40,6,2)
5,77^3^5,56
"KRN",.404,555,40,9,0)
13^NATIONAL DATA EMAIL ADDRESS^3
"KRN",.404,555,40,9,1)
3.01
"KRN",.404,555,40,9,2)
10,30^50^10,1
"KRN",.404,555,40,10,0)
14^NATIONAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,555,40,10,1)
3.02
"KRN",.404,555,40,10,2)
11,33^47^11,1
"KRN",.404,555,40,11,0)
15^VSM CFG EMAIL ADDRESS^3
"KRN",.404,555,40,11,1)
3.03
"KRN",.404,555,40,11,2)
12,24^50^12,1
"KRN",.404,555,40,12,0)
16^LOCAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,555,40,12,1)
3.04
"KRN",.404,555,40,12,2)
13,30^50^13,1
"KRN",.404,555,40,13,0)
17^LAST START TIME^3
"KRN",.404,555,40,13,1)
2.01
"KRN",.404,555,40,13,2)
15,18^20^15,1
"KRN",.404,555,40,14,0)
18^LAST STOP TIME^3
"KRN",.404,555,40,14,1)
2.02
"KRN",.404,555,40,14,2)
15,57^20^15,41
"KRN",.404,555,40,15,0)
19^LAST RUN TIME^3
"KRN",.404,555,40,15,1)
2.03
"KRN",.404,555,40,15,2)
16,18^4^16,1
"KRN",.404,555,40,16,0)
12^ALLOW TEST SYSTEM^3
"KRN",.404,555,40,16,1)
1.04
"KRN",.404,555,40,16,2)
7,77^3^7,56
"KRN",.404,555,40,18,0)
2^MONITOR KEY^3
"KRN",.404,555,40,18,1)
.01
"KRN",.404,555,40,18,2)
3,14^4^3,1
"KRN",.404,555,40,19,0)
6^TASKMAN SCHEDULE START^3
"KRN",.404,555,40,19,1)
1.06
"KRN",.404,555,40,19,2)
5,29^20^5,1
"KRN",.404,555,40,20,0)
7^TASKMAN SCHEDULE FREQUENCY^3
"KRN",.404,555,40,20,1)
1.05
"KRN",.404,555,40,20,2)
6,29^10^6,1
"KRN",.404,555,40,21,0)
8^TASKMAN OPTION^3
"KRN",.404,555,40,21,1)
1.07
"KRN",.404,555,40,21,2)
7,19^35^7,1
"KRN",.404,555,40,22,0)
1^VSM CONFIGURATION FOR ^3
"KRN",.404,555,40,22,1)
.03
"KRN",.404,555,40,22,2)
1,34^40^1,10
"KRN",.404,555,40,23,0)
9^CACHE DAILY TASK^3
"KRN",.404,555,40,23,1)
1.03
"KRN",.404,555,40,23,2)
8,19^25^8,1
"KRN",.404,556,0)
KMPV VIEW TITLE^8969^
"KRN",.404,556,40,0)
^.4044I^^0
"KRN",.404,557,0)
KMPV EDIT TITLE^8969^
"KRN",.404,557,40,0)
^.4044I^1^1
"KRN",.404,557,40,1,0)
8^^3
"KRN",.404,557,40,1,1)
.03
"KRN",.404,557,40,1,2)
1,24^40
"KRN",.404,557,40,1,4)
^^^1
"KRN",19,2918532,-1)
0^3
"KRN",19,2918532,0)
KMPR RUM MANAGER MENU^RUM Manager Menu^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^M^^^^^^^^CAPACITY MANAGEMENT - RUM^^
"KRN",19,2918532,1,0)
^19.06^2^2^3041117^^^^
"KRN",19,2918532,1,1,0)
This menu will help the site to manage the Resource Usage Monitor (RUM)
"KRN",19,2918532,1,2,0)
component of Capacity Management monitoring tools.
"KRN",19,2918532,10,0)
^19.01IP^7^7
"KRN",19,2918532,10,4,0)
2918635^STR^2
"KRN",19,2918532,10,4,"^")
KMPR START COLLECTION
"KRN",19,2918532,10,5,0)
2918634^STP^3
"KRN",19,2918532,10,5,"^")
KMPR STOP COLLECTION
"KRN",19,2918532,10,6,0)
2918636^STA^1
"KRN",19,2918532,10,6,"^")
KMPR STATUS COLLECTION
"KRN",19,2918532,10,7,0)
2918640^RPT^4
"KRN",19,2918532,10,7,"^")
KMPR REPORTS MENU
"KRN",19,2918532,20)

"KRN",19,2918532,99)
64707,50960
"KRN",19,2918532,99.1)
59924,79210
"KRN",19,2918532,"U")
RUM MANAGER MENU
"KRN",19,2918632,-1)
0^11
"KRN",19,2918632,0)
KMPR PRINT NODE PERCENT^Package Resource Usage^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918632,1,0)
^^3^3^2981119^^
"KRN",19,2918632,1,1,0)
This option will display the package Resource Usage Monitor statistics.
"KRN",19,2918632,1,2,0)
The printout summarizes the statistics of the options, protocols and
"KRN",19,2918632,1,3,0)
tasks for a selected namespace as percentages.
"KRN",19,2918632,25)
KMPRPN03
"KRN",19,2918632,"U")
PACKAGE RESOURCE USAGE
"KRN",19,2918633,-1)
0^2
"KRN",19,2918633,0)
KMPR BACKGROUND DRIVER^RUM Background Driver^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918633,1,0)
^19.06^3^3^3100618^^^^
"KRN",19,2918633,1,1,0)
This option will compress the Resource Usage Monitor statistics located in
"KRN",19,2918633,1,2,0)
^KMPTMP("KMPR") into daily stats.  This option must be queued to run each
"KRN",19,2918633,1,3,0)
day on off hours (recommended run time at 1 a.m.) .
"KRN",19,2918633,25)
KMPRBD01
"KRN",19,2918633,200.9)
y^y
"KRN",19,2918633,"U")
RUM BACKGROUND DRIVER
"KRN",19,2918634,-1)
0^6
"KRN",19,2918634,0)
KMPR STOP COLLECTION^Stop RUM Collection^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918634,1,0)
^^1^1^2970819^^^
"KRN",19,2918634,1,1,0)
This option will stop Resource Usage Monitor (RUM) collection.
"KRN",19,2918634,25)
STOP^KMPRSS
"KRN",19,2918634,"U")
STOP RUM COLLECTION
"KRN",19,2918635,-1)
0^4
"KRN",19,2918635,0)
KMPR START COLLECTION^Start RUM Collection^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM^^
"KRN",19,2918635,1,0)
^19.06^1^1^3130130^^^
"KRN",19,2918635,1,1,0)
This option will start Resource Usage Monitor (RUM) collection.
"KRN",19,2918635,20)

"KRN",19,2918635,25)
START^KMPRSS
"KRN",19,2918635,"U")
START RUM COLLECTION
"KRN",19,2918636,-1)
0^5
"KRN",19,2918636,0)
KMPR STATUS COLLECTION^Status of RUM Collection^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918636,1,0)
^^2^2^2970819^
"KRN",19,2918636,1,1,0)
This option will display the status of Resource Usage Monitor (RUM)
"KRN",19,2918636,1,2,0)
collection.
"KRN",19,2918636,25)
STAT^KMPRSS
"KRN",19,2918636,"U")
STATUS OF RUM COLLECTION
"KRN",19,2918637,-1)
0^8
"KRN",19,2918637,0)
KMPR GRAPH ALL NODES^RUM Data for All Nodes (Graph)^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918637,1,0)
^^2^2^2981119^
"KRN",19,2918637,1,1,0)
This option will display a graph of the selected RUM Data Element for all
"KRN",19,2918637,1,2,0)
nodes.
"KRN",19,2918637,25)
EN^KMPRPG01
"KRN",19,2918637,"U")
RUM DATA FOR ALL NODES (GRAPH)
"KRN",19,2918638,-1)
0^9
"KRN",19,2918638,0)
KMPR GRAPH HOURLY SINGLE NODE^RUM Data by Date for Single Node (Graph)^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918638,1,0)
^^2^2^2981119^
"KRN",19,2918638,1,1,0)
This option will display a graph of the selected RUM Data Element for a
"KRN",19,2918638,1,2,0)
single node.
"KRN",19,2918638,25)
EN^KMPRPG02
"KRN",19,2918638,"U")
RUM DATA BY DATE FOR SINGLE NO
"KRN",19,2918639,-1)
0^12
"KRN",19,2918639,0)
KMPR PRINT OPTION DATA^RUM Data for an Option^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918639,1,0)
^^3^3^2981119^
"KRN",19,2918639,1,1,0)
This option will display all the RUM Data Elements for a selected option.
"KRN",19,2918639,1,2,0)
The output shows each Element per Occurrence, as well as the totals of
"KRN",19,2918639,1,3,0)
each Element.
"KRN",19,2918639,25)
EN^KMPRP1
"KRN",19,2918639,"U")
RUM DATA FOR AN OPTION
"KRN",19,2918640,-1)
0^7
"KRN",19,2918640,0)
KMPR REPORTS MENU^RUM Reports^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^M^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2918640,10,0)
^19.01IP^10^10
"KRN",19,2918640,10,6,0)
2918637^GAN
"KRN",19,2918640,10,6,"^")
KMPR GRAPH ALL NODES
"KRN",19,2918640,10,7,0)
2918638^GSN
"KRN",19,2918640,10,7,"^")
KMPR GRAPH HOURLY SINGLE NODE
"KRN",19,2918640,10,8,0)
2918632^PRU
"KRN",19,2918640,10,8,"^")
KMPR PRINT NODE PERCENT
"KRN",19,2918640,10,9,0)
2918639^PDO
"KRN",19,2918640,10,9,"^")
KMPR PRINT OPTION DATA
"KRN",19,2918640,10,10,0)
2919269^PHO
"KRN",19,2918640,10,10,"^")
KMPR PRINT HOURLY OCCURRENCE
"KRN",19,2918640,99)
64707,50960
"KRN",19,2918640,"U")
RUM REPORTS
"KRN",19,2919269,-1)
0^10
"KRN",19,2919269,0)
KMPR PRINT HOURLY OCCURRENCE^Print Hourly Occurrence Distribution^CONTACT VAITEPMOCPEENGINEERS@VA.GOV FOR INFO^R^^^^^^^^CAPACITY MANAGEMENT - RUM
"KRN",19,2919269,1,0)
^^2^2^3030303^
"KRN",19,2919269,1,1,0)
This option will display the hourly occurrence distribution for the
"KRN",19,2919269,1,2,0)
specified option, protocol or RPC for the selected date.
"KRN",19,2919269,25)
KMPRP2
"KRN",19,2919269,"U")
PRINT HOURLY OCCURRENCE DISTRI
"KRN",19,2922041,-1)
0^1
"KRN",19,2922041,0)
KMPV VBEM DATA TRANSMISSION^KMPV VBEM DATA TRANSMISSION^^R^^^^^^^^
"KRN",19,2922041,1,0)
^19.06^2^2^3140922^^
"KRN",19,2922041,1,1,0)
Daily background job to compress VBEM metrics and send to national 
"KRN",19,2922041,1,2,0)
database. This job should be scheduled to run during non-peak hours. 
"KRN",19,2922041,25)
EN^KMPVBETR
"KRN",19,2922041,200.9)
y^y
"KRN",19,2922041,"U")
KMPV VBEM DATA TRANSMISSION
"KRN",19,2922046,-1)
0^13
"KRN",19,2922046,0)
KMPV VMCM DATA TRANSMISSION^KMPV VMCM DATA TRANSMISSION^^R^^^^^^^^
"KRN",19,2922046,1,0)
^^1^1^3171106^
"KRN",19,2922046,1,1,0)
Daily background job to send VMCM metrics to national database. This job should be scheduled to run during non-peak hours.
"KRN",19,2922046,25)
SEND^KMPVVMCM
"KRN",19,2922046,200.9)
y^y
"KRN",19,2922046,"U")
KMPV VMCM DATA TRANSMISSION
"KRN",19,2922047,-1)
0^14
"KRN",19,2922047,0)
KMPV VHLM DATA TRANSMISSION^KMPV VHLM DATA TRANSMISSION^^R^^^^^^^^CAPCITY MANAGEMENT
"KRN",19,2922047,1,0)
^^2^2^3180216^
"KRN",19,2922047,1,1,0)
Daily background job to send VHLM metrics to national database. This job 
"KRN",19,2922047,1,2,0)
should be scheduled to run during non-peak hours.
"KRN",19,2922047,10.1)
KMPV VTCM DATA TRANSMISSION
"KRN",19,2922047,25)
RUN^KMPVVHLM
"KRN",19,2922047,200.9)
y^y
"KRN",19,2922047,"U")
KMPV VHLM DATA TRANSMISSION
"KRN",409.61,710,-1)
0^1
"KRN",409.61,710,0)
KMPV MANAGEMENT^1^^80^11^15^0^1^^KMPV MANAGEMENT MENU^VSM MANAGEMENT^2^^1
"KRN",409.61,710,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,710,"COL",0)
^409.621^6^6
"KRN",409.61,710,"COL",1,0)
Monitor^2^8^Monitor
"KRN",409.61,710,"COL",2,0)
Status^12^6^Status^R
"KRN",409.61,710,"COL",3,0)
LastTransmission^20^20^Last Transmission^
"KRN",409.61,710,"COL",4,0)
DLY^42^5^DLY^B
"KRN",409.61,710,"COL",5,0)
COMP^49^5^COMP^B
"KRN",409.61,710,"COL",6,0)
NextTransmission^56^20^Next Transmission^R
"KRN",409.61,710,"COL","B","COMP",5)

"KRN",409.61,710,"COL","B","DLY",4)

"KRN",409.61,710,"COL","B","LastTransmission",3)

"KRN",409.61,710,"COL","B","Monitor",1)

"KRN",409.61,710,"COL","B","NextTransmission",6)

"KRN",409.61,710,"COL","B","Status",2)

"KRN",409.61,710,"FNL")
D EXIT^KMPVLM
"KRN",409.61,710,"HDR")
D HDR^KMPVLM
"KRN",409.61,710,"HLP")
D HELP^KMPVLM
"KRN",409.61,710,"INIT")
D INIT^KMPVLM
"MBREQ")
0
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",659,-1)
1^1
"PKG",659,0)
CAPCITY MANAGEMENT^KMP^Capacity and resource measurements for software & hardware
"PKG",659,20,0)
^9.402P^^
"PKG",659,22,0)
^9.49I^1^1
"PKG",659,22,1,0)
4.0
"PKG",659,22,1,"PAH",1,0)
0^3180321^520791172
"PKG",659,22,1,"PAH",1,1,0)
^^10^10^3180321
"PKG",659,22,1,"PAH",1,1,1,0)
The purpose of patch KMP*4.0*0 is to deploy the VistA Business Event 
"PKG",659,22,1,"PAH",1,1,2,0)
Monitor  (VBEM) as part of the Capacity Management (KMP*) VistA System
"PKG",659,22,1,"PAH",1,1,3,0)
Monitor (KMPV) tools suite. T VBEM will collect Cache metrics for VistA
"PKG",659,22,1,"PAH",1,1,4,0)
functions  (Menu Options, TaskMan Jobs and Remote Procedure Calls) such
"PKG",659,22,1,"PAH",1,1,5,0)
that they can be used in conjunction with metrics collected via other
"PKG",659,22,1,"PAH",1,1,6,0)
deployed capacity management tools. This functionality will replace
"PKG",659,22,1,"PAH",1,1,7,0)
current Resource Utilization Monitor (RUM) functionality.
"PKG",659,22,1,"PAH",1,1,8,0)
 
"PKG",659,22,1,"PAH",1,1,9,0)
This patch also updates the existing VistA Timed Collection Monitor (VTCM)
"PKG",659,22,1,"PAH",1,1,10,0)
to collect metrics using standard InterSystems provided APIs.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","KMPDRDAT")
0^10^B18926908
"RTN","KMPDRDAT",1,0)
KMPDRDAT ;SP/JML - Cover Sheet Load Raw Data Extract ;5/1/2017
"RTN","KMPDRDAT",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPDRDAT",3,0)
 ;
"RTN","KMPDRDAT",4,0)
 ; Send raw data to CPE database
"RTN","KMPDRDAT",5,0)
 ; START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",6,0)
 ;"KMPD","RDAT",
"RTN","KMPDRDAT",7,0)
EN ;
"RTN","KMPDRDAT",8,0)
 N KMPDBDLT,KMPDBGD,KMPDBGSS,KMPDDAT1,KMPDDATA,KMPDDELT,KMPDDOM,KMPDFDLT,KMPDFGBG,KMPDFGD,KMPDFGSS
"RTN","KMPDRDAT",9,0)
 N KMPDFMDAY,KMPDHDAY,KMPDID,KMPDLN,KMPDP,KMPDPROD,KMPDSINF,KMPDSITE,KMPDSYS,KMPDTDLT,KMPDWD,Y
"RTN","KMPDRDAT",10,0)
 ;
"RTN","KMPDRDAT",11,0)
 K ^KMPTMP("KMPD","RDAT")
"RTN","KMPDRDAT",12,0)
 S KMPDHDAY=+$H-1
"RTN","KMPDRDAT",13,0)
 S KMPDFMDAY=+$$HTFM^XLFDT(KMPDHDAY,1)
"RTN","KMPDRDAT",14,0)
 S KMPDWD=$$WORKDAY^XUWORKDY(KMPDFMDAY) ; IA#10046
"RTN","KMPDRDAT",15,0)
 ;
"RTN","KMPDRDAT",16,0)
 ; SET HEADER LINES
"RTN","KMPDRDAT",17,0)
 S KMPDLN=1
"RTN","KMPDRDAT",18,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="SYSTEM ID="_$$SITEINFO^KMPVCCFG(),KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",19,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="UPDATE CONFIG="_KMPDHDAY_U_KMPDWD_"^DAILY",KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",20,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",21,0)
 ;
"RTN","KMPDRDAT",22,0)
 ; DETERMINE FOREGROUND, BACKGROUND OR BOTH
"RTN","KMPDRDAT",23,0)
 S KMPDFGBG=0,U="^"
"RTN","KMPDRDAT",24,0)
 I $D(^KMPTMP("KMPDT","ORWCV")) S KMPDFGBG=1
"RTN","KMPDRDAT",25,0)
 I $D(^KMPTMP("KMPDT","ORWCV-FT")) S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDRDAT",26,0)
 I KMPDFGBG=1 D ORONE("ORWCV")
"RTN","KMPDRDAT",27,0)
 I KMPDFGBG=2 D ORONE("ORWCV-FT")
"RTN","KMPDRDAT",28,0)
 I KMPDFGBG=3 D ORBOTH
"RTN","KMPDRDAT",29,0)
 ;
"RTN","KMPDRDAT",30,0)
 D TRANSMIT
"RTN","KMPDRDAT",31,0)
 ;
"RTN","KMPDRDAT",32,0)
 K ^KMPTMP("KMPD","RDAT")
"RTN","KMPDRDAT",33,0)
 Q
"RTN","KMPDRDAT",34,0)
 ;
"RTN","KMPDRDAT",35,0)
ORONE(KMPDSUB) ;
"RTN","KMPDRDAT",36,0)
 S KMPDID=""
"RTN","KMPDRDAT",37,0)
 F  S KMPDID=$O(^KMPTMP("KMPDT",KMPDSUB,KMPDID)) Q:KMPDID=""  D
"RTN","KMPDRDAT",38,0)
 .S KMPDDAT1=$G(^KMPTMP("KMPDT",KMPDSUB,KMPDID))
"RTN","KMPDRDAT",39,0)
 .Q:$P(KMPDDAT1,U,5)=1
"RTN","KMPDRDAT",40,0)
 .; identifier
"RTN","KMPDRDAT",41,0)
 .S KMPDDATA=""
"RTN","KMPDRDAT",42,0)
 .; server start date/time
"RTN","KMPDRDAT",43,0)
 .S $P(KMPDDATA,U,1)=$P(KMPDDAT1,U)
"RTN","KMPDRDAT",44,0)
 .;  (FG or BG delta) and (Total server delta)
"RTN","KMPDRDAT",45,0)
 .D:$P(KMPDDAT1,U,2)
"RTN","KMPDRDAT",46,0)
 ..S KMPDDELT=$$HDIFF^XLFDT($P(KMPDDAT1,U,2),$P(KMPDDAT1,U),2)
"RTN","KMPDRDAT",47,0)
 ..S KMPDP=$S(KMPDSUB="ORWCV-FT":2,1:3)
"RTN","KMPDRDAT",48,0)
 ..S $P(KMPDDATA,U,KMPDP)=KMPDDELT
"RTN","KMPDRDAT",49,0)
 ..S $P(KMPDDATA,U,4)=KMPDDELT
"RTN","KMPDRDAT",50,0)
 .; client duz
"RTN","KMPDRDAT",51,0)
 .S $P(KMPDDATA,U,5)=$P(KMPDDAT1,U,3)
"RTN","KMPDRDAT",52,0)
 .; client name
"RTN","KMPDRDAT",53,0)
 .S $P(KMPDDATA,U,6)=$P(KMPDDAT1,U,4)
"RTN","KMPDRDAT",54,0)
 .; kmptmp subscript key
"RTN","KMPDRDAT",55,0)
 .S $P(KMPDDATA,U,7)=KMPDSUB
"RTN","KMPDRDAT",56,0)
 .; application title
"RTN","KMPDRDAT",57,0)
 .S $P(KMPDDATA,U,8)="CPRS Cover Sheet"
"RTN","KMPDRDAT",58,0)
 .; ip address 
"RTN","KMPDRDAT",59,0)
 .S $P(KMPDDATA,U,9)=$P($P(KMPDID,"-")," ",2)
"RTN","KMPDRDAT",60,0)
 .; patient DFN
"RTN","KMPDRDAT",61,0)
 .S $P(KMPDDATA,U,10)=$P(KMPDID,"-",3)
"RTN","KMPDRDAT",62,0)
 .; START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",63,0)
 .S ^KMPTMP("KMPD","RDAT",KMPDLN)="CVLOAD DATA="_KMPDDATA,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",64,0)
 .S $P(^KMPTMP("KMPDT",KMPDSUB,KMPDID),U,5)=1
"RTN","KMPDRDAT",65,0)
 Q
"RTN","KMPDRDAT",66,0)
 ;
"RTN","KMPDRDAT",67,0)
ORBOTH ;
"RTN","KMPDRDAT",68,0)
 ; loop foreground node and concurrently look at related background node
"RTN","KMPDRDAT",69,0)
 S KMPDBGSS="ORWCV",KMPDFGSS="ORWCV-FT"
"RTN","KMPDRDAT",70,0)
 S KMPDID=""
"RTN","KMPDRDAT",71,0)
 F  S KMPDID=$O(^KMPTMP("KMPDT",KMPDFGSS,KMPDID)) Q:KMPDID=""  D
"RTN","KMPDRDAT",72,0)
 .S KMPDFGD=$G(^KMPTMP("KMPDT",KMPDFGSS,KMPDID))
"RTN","KMPDRDAT",73,0)
 .Q:$P(KMPDFGD,U,5)=1  ;  ALREADY SENT
"RTN","KMPDRDAT",74,0)
 .S KMPDBGD=$G(^KMPTMP("KMPDT",KMPDBGSS,KMPDID))
"RTN","KMPDRDAT",75,0)
 .S KMPDDATA=""
"RTN","KMPDRDAT",76,0)
 .S $P(KMPDDATA,U,1)=$P(KMPDFGD,U)
"RTN","KMPDRDAT",77,0)
 .S (KMPDFDLT,KMPDBDLT,KMPDTDLT)=""
"RTN","KMPDRDAT",78,0)
 .I $P(KMPDFGD,U,2) S KMPDFDLT=$$HDIFF^XLFDT($P(KMPDFGD,U,2),$P(KMPDFGD,U),2)
"RTN","KMPDRDAT",79,0)
 .I $P(KMPDBGD,U,2) S KMPDBDLT=$$HDIFF^XLFDT($P(KMPDBGD,U,2),$P(KMPDBGD,U),2)
"RTN","KMPDRDAT",80,0)
 .S KMPDTDLT=KMPDFDLT+KMPDBDLT
"RTN","KMPDRDAT",81,0)
 .S $P(KMPDDATA,U,2)=KMPDFDLT
"RTN","KMPDRDAT",82,0)
 .S $P(KMPDDATA,U,3)=KMPDBDLT
"RTN","KMPDRDAT",83,0)
 .S $P(KMPDDATA,U,4)=KMPDTDLT
"RTN","KMPDRDAT",84,0)
 .; client duz
"RTN","KMPDRDAT",85,0)
 .S $P(KMPDDATA,U,5)=$P(KMPDFGD,U,3)
"RTN","KMPDRDAT",86,0)
 .; client name
"RTN","KMPDRDAT",87,0)
 .S $P(KMPDDATA,U,6)=$P(KMPDFGD,U,4)
"RTN","KMPDRDAT",88,0)
 .; kmptmp subscript key
"RTN","KMPDRDAT",89,0)
 .S $P(KMPDDATA,U,7)="ORWCV-FGBG"
"RTN","KMPDRDAT",90,0)
 .; application title
"RTN","KMPDRDAT",91,0)
 .S $P(KMPDDATA,U,8)="CPRS Cover Sheet"
"RTN","KMPDRDAT",92,0)
 .; ip address
"RTN","KMPDRDAT",93,0)
 .S $P(KMPDDATA,U,9)=$P($P(KMPDID,"-")," ",2)
"RTN","KMPDRDAT",94,0)
 .; patient DFN
"RTN","KMPDRDAT",95,0)
 .S $P(KMPDDATA,U,10)=$P(KMPDID,"-",3)
"RTN","KMPDRDAT",96,0)
 .;  START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",97,0)
 .S ^KMPTMP("KMPD","RDAT",KMPDLN)="CVLOAD DATA="_KMPDDATA,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",98,0)
 .S $P(^KMPTMP("KMPDT",KMPDFGSS,KMPDID),U,5)=1
"RTN","KMPDRDAT",99,0)
 .S $P(^KMPTMP("KMPDT",KMPDBGSS,KMPDID),U,5)=1
"RTN","KMPDRDAT",100,0)
 ; Loop BG node in case there is an entry that didn't have a FG entry.
"RTN","KMPDRDAT",101,0)
 ; The reverse situation already handled in first loop.
"RTN","KMPDRDAT",102,0)
 D ORONE("ORWCV")
"RTN","KMPDRDAT",103,0)
 Q
"RTN","KMPDRDAT",104,0)
 ;
"RTN","KMPDRDAT",105,0)
TRANSMIT ;
"RTN","KMPDRDAT",106,0)
 ; quit if no data to transmit.
"RTN","KMPDRDAT",107,0)
 Q:'$D(^KMPTMP("KMPD","RDAT"))
"RTN","KMPDRDAT",108,0)
 N XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPDRDAT",109,0)
 ; send data via mail message.
"RTN","KMPDRDAT",110,0)
 S XMTEXT="^KMPTMP(""KMPD"",""RDAT"","
"RTN","KMPDRDAT",111,0)
 S XMSUB="CVLOAD DAILY DATA"
"RTN","KMPDRDAT",112,0)
 S XMY("S.KMPD-ORWCV-SERVER@VISTA.CPE.DOMAIN.EXT")=""
"RTN","KMPDRDAT",113,0)
 D ^XMD
"RTN","KMPDRDAT",114,0)
 Q
"RTN","KMPDSS")
0^8^B5431197
"RTN","KMPDSS",1,0)
KMPDSS ;OAK/RAK,JML - CM Tools Status ;2/14/05
"RTN","KMPDSS",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;11/15/2017;Build 38
"RTN","KMPDSS",3,0)
 ;
"RTN","KMPDSS",4,0)
EN ;-entry point
"RTN","KMPDSS",5,0)
 ;
"RTN","KMPDSS",6,0)
 N DIR,OUT,X,Y
"RTN","KMPDSS",7,0)
 ;
"RTN","KMPDSS",8,0)
 S OUT=0
"RTN","KMPDSS",9,0)
 F  D  Q:OUT
"RTN","KMPDSS",10,0)
 .D HDR^KMPDUTL4(" Check Capacity Planning Environment ")
"RTN","KMPDSS",11,0)
 .S DIR(0)="SO^H:HL7;S:SAGG;T:Timing"
"RTN","KMPDSS",12,0)
 .W !! D ^DIR I Y=""!(Y="^") SET OUT=1 Q
"RTN","KMPDSS",13,0)
 .D DISPLAY^KMPDSS1(Y_"^"_Y(0))
"RTN","KMPDSS",14,0)
 ;
"RTN","KMPDSS",15,0)
 Q
"RTN","KMPDSS",16,0)
 ;
"RTN","KMPDSS",17,0)
VERDSPL(KMPDPKG) ;--display routine version info
"RTN","KMPDSS",18,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDSS",19,0)
 ; KMPDPKG... CM Package:
"RTN","KMPDSS",20,0)
 ;            "D" - CM Tools
"RTN","KMPDSS",21,0)
 ;            "R" - RUM - Decommissioned
"RTN","KMPDSS",22,0)
 ;            "S" - SAGG
"RTN","KMPDSS",23,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDSS",24,0)
 Q:$G(KMPDPKG)=""
"RTN","KMPDSS",25,0)
 Q:KMPDPKG'="D"&(KMPDPKG'="S")
"RTN","KMPDSS",26,0)
 N I,X
"RTN","KMPDSS",27,0)
 ; routine check
"RTN","KMPDSS",28,0)
 D VERPTCH^KMPDUTL1(KMPDPKG,.X)
"RTN","KMPDSS",29,0)
 W !?5,$S(KMPDPKG="D":"CM TOOLS",1:"SAGG")
"RTN","KMPDSS",30,0)
 W " routines",$$REPEAT^XLFSTR(".",28-$X),": "
"RTN","KMPDSS",31,0)
 I '$P($G(X(0)),U,3) W "No Problems"
"RTN","KMPDSS",32,0)
 E  D 
"RTN","KMPDSS",33,0)
 .W !?20,"Current Version",?55,"Should be"
"RTN","KMPDSS",34,0)
 .S I=0 F  S I=$O(X(I)) Q:I=""  I $P(X(I),U) D 
"RTN","KMPDSS",35,0)
 ..W !?3,I,?20,$P(X(I),U,4)
"RTN","KMPDSS",36,0)
 ..W:$P(X(I),U,5)]"" " - ",$P(X(I),U,5)
"RTN","KMPDSS",37,0)
 ..W ?55,$P(X(I),U,2)
"RTN","KMPDSS",38,0)
 ..W:$P(X(I),U,3)]"" " - ",$P(X(I),U,3)
"RTN","KMPDSS",39,0)
 Q
"RTN","KMPDSS",40,0)
 ;
"RTN","KMPDSS",41,0)
PRM ;-- edit parameters file
"RTN","KMPDSS",42,0)
 ;
"RTN","KMPDSS",43,0)
 N DDSFILE,DR,DA
"RTN","KMPDSS",44,0)
 ;
"RTN","KMPDSS",45,0)
 S DA=$O(^KMPD(8973,0)) Q:'DA
"RTN","KMPDSS",46,0)
 S DDSFILE=8973,DR="[KMPD PARAMETERS EDIT]" D ^DDS
"RTN","KMPDSS",47,0)
 ;
"RTN","KMPDSS",48,0)
 Q
"RTN","KMPDSS",49,0)
 ;
"RTN","KMPDSS",50,0)
SST ;-- start/stop coversheet collection
"RTN","KMPDSS",51,0)
 ; check for cprs patch
"RTN","KMPDSS",52,0)
 I '$$PATCH^XPDUTL("OR*3.0*209") D  Q
"RTN","KMPDSS",53,0)
 .W !! D EN^DDIOL($C(7)_"*** Patch OR*3.0*209 must be installed for CPRS Timing data to be collected ***")
"RTN","KMPDSS",54,0)
 ;
"RTN","KMPDSS",55,0)
 N DIR,STAT,X,Y
"RTN","KMPDSS",56,0)
 S STAT=$G(^KMPTMP("KMPD-CPRS"))
"RTN","KMPDSS",57,0)
 W !!!,"Timing Collection is currently [ ",$S(STAT:"Running",1:"STOPPED")," ]",!
"RTN","KMPDSS",58,0)
 S DIR(0)="YO",DIR("B")="N"
"RTN","KMPDSS",59,0)
 S DIR("A")="Do you want to '"_$S(STAT:"Stop",1:"Start")_"' the collection"
"RTN","KMPDSS",60,0)
 D ^DIR Q:'Y
"RTN","KMPDSS",61,0)
 S ^KMPTMP("KMPD-CPRS")=$S(STAT:"",1:1)
"RTN","KMPDSS",62,0)
 W !!,"Timing Collection has been [ ",$S(STAT:"STOPPED",1:"Started")," ]"
"RTN","KMPDSS",63,0)
 Q
"RTN","KMPDUTL1")
0^9^B28860851
"RTN","KMPDUTL1",1,0)
KMPDUTL1 ;OAK/RAK,KAK,JML - CM TOOLS Utilities ;2/17/04
"RTN","KMPDUTL1",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;11/15/2017;Build 38
"RTN","KMPDUTL1",3,0)
 ;
"RTN","KMPDUTL1",4,0)
CONT(KMPDEXT)  ;-- function displays 'return to continue' message at bottom of page
"RTN","KMPDUTL1",5,0)
 ;--------------------------------------------------------------------
"RTN","KMPDUTL1",6,0)
 ; KMPDEXT 0 = do not show 'to exit' text
"RTN","KMPDUTL1",7,0)
 ;         1 = show 'to exit' text
"RTN","KMPDUTL1",8,0)
 ;
"RTN","KMPDUTL1",9,0)
 ; Return: 0 = continue
"RTN","KMPDUTL1",10,0)
 ;         1 = quit
"RTN","KMPDUTL1",11,0)
 ;--------------------------------------------------------------------
"RTN","KMPDUTL1",12,0)
 ;
"RTN","KMPDUTL1",13,0)
 N DIR,X,Y
"RTN","KMPDUTL1",14,0)
 ;
"RTN","KMPDUTL1",15,0)
 S KMPDEXT=+$G(KMPDEXT)
"RTN","KMPDUTL1",16,0)
 F  Q:$Y>(IOSL-3)  W !
"RTN","KMPDUTL1",17,0)
 S DIR(0)="EA"
"RTN","KMPDUTL1",18,0)
 S DIR("A")="Press RETURN to continue"_$S(KMPDEXT:" or '^' to exit: ",1:": ")
"RTN","KMPDUTL1",19,0)
 D ^DIR
"RTN","KMPDUTL1",20,0)
 Q +$G(Y)
"RTN","KMPDUTL1",21,0)
 ;
"RTN","KMPDUTL1",22,0)
CURSTAT(STAT)   ;-- current status
"RTN","KMPDUTL1",23,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",24,0)
 ; input:  STAT (optional) = data from $$TSKSTAT^KMPSUTL1
"RTN","KMPDUTL1",25,0)
 ; output: See codes below
"RTN","KMPDUTL1",26,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",27,0)
 ;
"RTN","KMPDUTL1",28,0)
 N RESULT,SITNUM,STRTDT
"RTN","KMPDUTL1",29,0)
 ;
"RTN","KMPDUTL1",30,0)
 S RESULT="",SITNUM=^DD("SITE",1),STRTDT=$G(^XTMP("KMPS",SITNUM,0))
"RTN","KMPDUTL1",31,0)
 ;
"RTN","KMPDUTL1",32,0)
 I $D(^XTMP("KMPS","ERROR")) Q "6^ERRORS RECORDED"
"RTN","KMPDUTL1",33,0)
 I $D(^XTMP("KMPS","STOP")) Q "7^STOPPING"
"RTN","KMPDUTL1",34,0)
 I $D(^XTMP("KMPS","START")) L +^XTMP("KMPS"):0 I $T L -^XTMP("KMPS") Q "5^DID NOT COMPLETE"
"RTN","KMPDUTL1",35,0)
 I +STRTDT I +$H-STRTDT>2 Q "5^DID NOT COMPLETE"
"RTN","KMPDUTL1",36,0)
 I +STRTDT I +$H-STRTDT>1 Q "4^RUNNING TOO LONG"
"RTN","KMPDUTL1",37,0)
 I $D(^XTMP("KMPS","START")) Q "0^RUNNING"
"RTN","KMPDUTL1",38,0)
 I $D(STAT) Q $P(STAT,U,1,2)
"RTN","KMPDUTL1",39,0)
 E  Q "3^NOT RUNNING"
"RTN","KMPDUTL1",40,0)
 Q "9^UNKNOWN"
"RTN","KMPDUTL1",41,0)
 ;
"RTN","KMPDUTL1",42,0)
SYSINFO() ;-- returns system information
"RTN","KMPDUTL1",43,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",44,0)
 ; Returns:
"RTN","KMPDUTL1",45,0)
 ;         "^" piece 1 - type of M platform
"RTN","KMPDUTL1",46,0)
 ;         "^" piece 2 - $ZV => name and version of M system
"RTN","KMPDUTL1",47,0)
 ;         "^" piece 3 - operating system version
"RTN","KMPDUTL1",48,0)
 ;
"RTN","KMPDUTL1",49,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",50,0)
 ;
"RTN","KMPDUTL1",51,0)
 N MPLTF,OSVER,SYSINFO
"RTN","KMPDUTL1",52,0)
 ;
"RTN","KMPDUTL1",53,0)
 S MPLTF=$$MPLTF(),OSVER=$$OSVER(MPLTF)
"RTN","KMPDUTL1",54,0)
 S SYSINFO=MPLTF_U_$ZV_U_OSVER
"RTN","KMPDUTL1",55,0)
 Q SYSINFO
"RTN","KMPDUTL1",56,0)
 ;
"RTN","KMPDUTL1",57,0)
MPLTF() ;-- returns the type of M platform
"RTN","KMPDUTL1",58,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",59,0)
 ; Returns:  DSM    for DSM platform
"RTN","KMPDUTL1",60,0)
 ;           CVMS   for Cache for OpenVMS platform
"RTN","KMPDUTL1",61,0)
 ;           CWINNT for Cache for Windows NT platform
"RTN","KMPDUTL1",62,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",63,0)
 ;
"RTN","KMPDUTL1",64,0)
 N MPLTF,ZV
"RTN","KMPDUTL1",65,0)
 ;
"RTN","KMPDUTL1",66,0)
 S ZV=$ZV
"RTN","KMPDUTL1",67,0)
 S MPLTF=$S(ZV["DSM":"DSM",ZV["VMS":"CVMS",ZV["Windows":"CWINNT",1:"UNK")
"RTN","KMPDUTL1",68,0)
 Q MPLTF
"RTN","KMPDUTL1",69,0)
 ;
"RTN","KMPDUTL1",70,0)
OSVER(MPLTF) ;-- returns the operating system version
"RTN","KMPDUTL1",71,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",72,0)
 ; input: MPLTF = type of M platform
"RTN","KMPDUTL1",73,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",74,0)
 ;
"RTN","KMPDUTL1",75,0)
 I $G(MPLTF)="" Q ""
"RTN","KMPDUTL1",76,0)
 ;
"RTN","KMPDUTL1",77,0)
 I MPLTF["DSM" Q $ZC(%GETSYI,"VERSION")
"RTN","KMPDUTL1",78,0)
 I MPLTF["CVMS" Q $$CVMSVER^KMPDUTL5()
"RTN","KMPDUTL1",79,0)
 I MPLTF["CWINNT" Q $$CWNTVER^KMPDUTL5()
"RTN","KMPDUTL1",80,0)
 Q ""
"RTN","KMPDUTL1",81,0)
 ;
"RTN","KMPDUTL1",82,0)
TSKSTAT(OPT) ;-- status of scheduled task option
"RTN","KMPDUTL1",83,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",84,0)
 ; input  OPT = option name
"RTN","KMPDUTL1",85,0)
 ; 
"RTN","KMPDUTL1",86,0)
 ; output RTN = by "^" piece
"RTN","KMPDUTL1",87,0)
 ;               1 - status code
"RTN","KMPDUTL1",88,0)
 ;               2 - literal condition
"RTN","KMPDUTL1",89,0)
 ;               3 - scheduled date@time (day)
"RTN","KMPDUTL1",90,0)
 ;               4 - numeric day-of-week
"RTN","KMPDUTL1",91,0)
 ;               5 - expanded scheduled frequency
"RTN","KMPDUTL1",92,0)
 ;               6 - short form frequency
"RTN","KMPDUTL1",93,0)
 ;               7 - task id
"RTN","KMPDUTL1",94,0)
 ;               8 - queued by
"RTN","KMPDUTL1",95,0)
 ;               9 - user status
"RTN","KMPDUTL1",96,0)
 ;
"RTN","KMPDUTL1",97,0)
 ; where status code^condition:
"RTN","KMPDUTL1",98,0)
 ;            = 0^SCHEDULED
"RTN","KMPDUTL1",99,0)
 ;            = 1^NOT SCHEDULED and 'scheduled date@time' will
"RTN","KMPDUTL1",100,0)
 ;                   be UNKNOWN and 'numeric day of week' will be -1
"RTN","KMPDUTL1",101,0)
 ;            = 2^NOT RESCHEDULED
"RTN","KMPDUTL1",102,0)
 ;            = 3^MISSING when OPT does not exist
"RTN","KMPDUTL1",103,0)
 ;            = 9^UNKNOWN
"RTN","KMPDUTL1",104,0)
 ;            = ""^UNDEFINED
"RTN","KMPDUTL1",105,0)
 ;
"RTN","KMPDUTL1",106,0)
 ; where user status = ACTIVE or NOT ACTIVE
"RTN","KMPDUTL1",107,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",108,0)
 ;
"RTN","KMPDUTL1",109,0)
 Q:$G(OPT)="" "^UNDEFINED"
"RTN","KMPDUTL1",110,0)
 ;
"RTN","KMPDUTL1",111,0)
 N ACTV,DA,DAY,DOW,FREQ,RTN,TSK,TSKINFO,USER
"RTN","KMPDUTL1",112,0)
 ;
"RTN","KMPDUTL1",113,0)
 S (DOW,FREQ)=-1
"RTN","KMPDUTL1",114,0)
 S RTN="9^UNKNOWN^NO DATE^-1^UNKNOWN^^^UNKNOWN^NOT ACTIVE"
"RTN","KMPDUTL1",115,0)
 ;
"RTN","KMPDUTL1",116,0)
 I '$D(^DIC(19,"B",OPT)) S $P(RTN,U,1,2)="3^MISSING" Q RTN
"RTN","KMPDUTL1",117,0)
 S DA=$O(^DIC(19,"B",OPT,0)),DA=+$O(^DIC(19.2,"B",DA,0))
"RTN","KMPDUTL1",118,0)
 S TSKINFO=$G(^DIC(19.2,DA,0)),(DOW,Y)=$P(TSKINFO,U,2),FREQ=$P(TSKINFO,U,6)
"RTN","KMPDUTL1",119,0)
 S $P(TSKINFO,U,2)=$$FMTE^XLFDT($P(TSKINFO,U,2))
"RTN","KMPDUTL1",120,0)
 I DOW'="" S DAY=$$DOW^XLFDT(DOW),DOW=$$DOW^XLFDT(DOW,1)
"RTN","KMPDUTL1",121,0)
 K:$G(DAY)="day" DAY
"RTN","KMPDUTL1",122,0)
 S TSK=+$G(^DIC(19.2,+DA,1))
"RTN","KMPDUTL1",123,0)
 I (DOW="")!(TSK="") S $P(RTN,U,1,2)="1^NOT SCHEDULED"
"RTN","KMPDUTL1",124,0)
 E  D
"RTN","KMPDUTL1",125,0)
 .S $P(RTN,U,1,2)="0^SCHEDULED"
"RTN","KMPDUTL1",126,0)
 .I FREQ="" S $P(RTN,U,1,2)="2^NOT RESCHEDULED"
"RTN","KMPDUTL1",127,0)
 .; queued to run at
"RTN","KMPDUTL1",128,0)
 .S $P(RTN,U,3,4)=$S($P(TSKINFO,U,2)="":"NO DATE",1:$P(TSKINFO,U,2))_$S($D(DAY):" ("_DAY_")",1:"")_U_DOW
"RTN","KMPDUTL1",129,0)
 ; rescheduling frequency
"RTN","KMPDUTL1",130,0)
 I FREQ?1.3N1A D
"RTN","KMPDUTL1",131,0)
 .S $P(RTN,U,5,6)=+FREQ_" "_$S(FREQ["D":"day",FREQ["M":"month",1:FREQ)_$S(+FREQ>1:"s",1:"")_U_FREQ
"RTN","KMPDUTL1",132,0)
 E  S $P(RTN,U,5,6)=$S(FREQ="":"UNKNOWN",1:FREQ)_U_FREQ
"RTN","KMPDUTL1",133,0)
 ; task id
"RTN","KMPDUTL1",134,0)
 S $P(RTN,U,7)=TSK
"RTN","KMPDUTL1",135,0)
 ; find if the user is active
"RTN","KMPDUTL1",136,0)
 I TSK D
"RTN","KMPDUTL1",137,0)
 .S TSKINFO=$G(^%ZTSK(TSK,0))
"RTN","KMPDUTL1",138,0)
 .S USER=+$P(TSKINFO,U,3)
"RTN","KMPDUTL1",139,0)
 .S ACTV=+$$ACTIVE^XUSER(USER)
"RTN","KMPDUTL1",140,0)
 .; queued by
"RTN","KMPDUTL1",141,0)
 .S $P(RTN,U,8)=$P($G(^VA(200,USER,0)),U)
"RTN","KMPDUTL1",142,0)
 I $G(ACTV) S $P(RTN,U,9)="ACTIVE"
"RTN","KMPDUTL1",143,0)
 Q RTN
"RTN","KMPDUTL1",144,0)
 ;
"RTN","KMPDUTL1",145,0)
VERPTCH(PKG,RTNARRY)    ;-- returns current version and patch status of specified CM package
"RTN","KMPDUTL1",146,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",147,0)
 ; input PKG = 'D' for CM TOOLS
"RTN","KMPDUTL1",148,0)
 ;             'R' for RUM - DECOMMISSIONED
"RTN","KMPDUTL1",149,0)
 ;             'S' for SAGG
"RTN","KMPDUTL1",150,0)
 ; Return array (passed by reference) in format:
"RTN","KMPDUTL1",151,0)
 ; output RTNARRY = -1 for error
"RTN","KMPDUTL1",152,0)
 ;        RTNARRY(0) = number of routines^total rtns ok^total rtns bad^total rtns missing
"RTN","KMPDUTL1",153,0)
 ;        RTNARRY(rtn name) = {0=good 1=bad 2=missing routine}^released version^released patch(es)^site version^site patch(es)
"RTN","KMPDUTL1",154,0)
 ;
"RTN","KMPDUTL1",155,0)
 ; This code will reference line tag PTCHINFO^KMP_pkg_UTL for the
"RTN","KMPDUTL1",156,0)
 ; following patch information text starting at PTCHINFO+1:
"RTN","KMPDUTL1",157,0)
 ;
"RTN","KMPDUTL1",158,0)
 ;        ;;routine name ^ current version ^ current patch(es)
"RTN","KMPDUTL1",159,0)
 ;
"RTN","KMPDUTL1",160,0)
 ; Example:    
"RTN","KMPDUTL1",161,0)
 ;           PATCHINFO  ;-- patch information
"RTN","KMPDUTL1",162,0)
 ;                      ;;KMPSGE^1.8^**1,2**
"RTN","KMPDUTL1",163,0)
 ;                      ;;KMPSUTL^1.8^**1,2**
"RTN","KMPDUTL1",164,0)
 ;  last line >         ;;
"RTN","KMPDUTL1",165,0)
 ;---------------------------------------------------------------------
"RTN","KMPDUTL1",166,0)
 ;
"RTN","KMPDUTL1",167,0)
 K RTNARRY
"RTN","KMPDUTL1",168,0)
 ;
"RTN","KMPDUTL1",169,0)
 N BAD,I,INFO,INFOSITE,OK,OUT,PTCH,PTCHSITE,RTN
"RTN","KMPDUTL1",170,0)
 N TAG,TOTBAD,TOTMISS,TOTOK,TOTRTN,X,VER,VERSITE
"RTN","KMPDUTL1",171,0)
 ;
"RTN","KMPDUTL1",172,0)
 I $G(PKG)=""!("DS"'[$G(PKG))!($L(PKG)'=1) S RTNARRY=-1 Q
"RTN","KMPDUTL1",173,0)
 S X="KMP"_PKG_"UTL"
"RTN","KMPDUTL1",174,0)
 X ^%ZOSF("TEST") I '$T S RTNARRY=-1 Q
"RTN","KMPDUTL1",175,0)
 ;
"RTN","KMPDUTL1",176,0)
 S (OUT,TOTBAD,TOTMISS,TOTOK,TOTRTN)=0
"RTN","KMPDUTL1",177,0)
 F I=1:1 D  Q:OUT
"RTN","KMPDUTL1",178,0)
 .S TAG="PTCHINFO+"_I_"^KMP"_PKG_"UTL"
"RTN","KMPDUTL1",179,0)
 .S INFO=$P($T(@TAG),";;",2)
"RTN","KMPDUTL1",180,0)
 .I INFO="" S OUT=1 Q
"RTN","KMPDUTL1",181,0)
 .S RTN=$P(INFO,U),VER=$P(INFO,U,2),PTCH=$P(INFO,U,3)
"RTN","KMPDUTL1",182,0)
 .; if routine is missing
"RTN","KMPDUTL1",183,0)
 .I $T(@(RTN_"^"_RTN))="" D  Q
"RTN","KMPDUTL1",184,0)
 ..S TOTMISS=TOTMISS+1,TOTRTN=TOTRTN+1
"RTN","KMPDUTL1",185,0)
 ..S RTNARRY(RTN)="2^"_VER_U_PTCH_"^^"
"RTN","KMPDUTL1",186,0)
 .X "ZL @RTN S INFOSITE=$T(+2)"
"RTN","KMPDUTL1",187,0)
 .S VERSITE=$P(INFOSITE,";",3),PTCHSITE=$P(INFOSITE,";",5)
"RTN","KMPDUTL1",188,0)
 .I VERSITE'=VER!(PTCHSITE'=PTCH) S BAD=1,OK=0
"RTN","KMPDUTL1",189,0)
 .E  S BAD=0,OK=1
"RTN","KMPDUTL1",190,0)
 .S TOTBAD=TOTBAD+BAD,TOTOK=TOTOK+OK,TOTRTN=TOTRTN+1
"RTN","KMPDUTL1",191,0)
 .S RTNARRY(RTN)=BAD_U_VER_U_PTCH_U_VERSITE_U_PTCHSITE
"RTN","KMPDUTL1",192,0)
 S RTNARRY(0)=TOTRTN_U_TOTOK_U_TOTBAD_U_TOTMISS
"RTN","KMPDUTL1",193,0)
 Q
"RTN","KMPVBETR")
0^3^B27830424
"RTN","KMPVBETR",1,0)
KMPVBETR ;SP/JML - VBEM Nightly compression and transmission;5/1/2017;
"RTN","KMPVBETR",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVBETR",3,0)
 ;
"RTN","KMPVBETR",4,0)
 ;
"RTN","KMPVBETR",5,0)
EN ;  Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVBETR",6,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVBETR",7,0)
 ; ^KMPTMP("KMPV","VBEM","TRANSMIT",$J)............. temporary storage for daily VBEM data to be transmitted
"RTN","KMPVBETR",8,0)
 ; ^KMPTMP("KMPV","VBEM","COMPRESS",KMPHDAY)........ temporary storage for compressed data prior to transmission
"RTN","KMPVBETR",9,0)
 ; Data in "DLY" node is deleted upon compression
"RTN","KMPVBETR",10,0)
 ; Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVBETR",11,0)
 ; Data in "COMPRESS" node:
"RTN","KMPVBETR",12,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVBETR",13,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVBETR",14,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVBETR",15,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVBETR",16,0)
 ;
"RTN","KMPVBETR",17,0)
 N KMPVCFG,KMPVDATA,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY,KMPVI,KMPVJ,KMPVJTOT
"RTN","KMPVBETR",18,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVOPT,KMPVRT,KMPVSINF,KMPVSITE,KMPVTIME,KMPVUTOT,KMPVWD
"RTN","KMPVBETR",19,0)
 N %H,ZTREQ,ZTSTOP
"RTN","KMPVBETR",20,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVBETR",21,0)
 D PURGEDLY^KMPVCBG("VBEM")
"RTN","KMPVBETR",22,0)
 ;
"RTN","KMPVBETR",23,0)
 K ^KMPTMP("KMPV","VBEM","TRANSMIT",$J) S U="^"
"RTN","KMPVBETR",24,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE  ; IA 10112
"RTN","KMPVBETR",25,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVBETR",26,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VBEM","LAST START TIME",8969,"I")
"RTN","KMPVBETR",27,0)
 I KMPVLAST'="" D
"RTN","KMPVBETR",28,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVBETR",29,0)
 .I KMPVHLAST<KMPVHYDAY,KMPVHLAST'="" D CANMESS^KMPVCBG("JOBLATE","VBEM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVBETR",30,0)
 ;
"RTN","KMPVBETR",31,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VBEM","DAYS TO KEEP DATA",8969)
"RTN","KMPVBETR",32,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVBETR",33,0)
 ;
"RTN","KMPVBETR",34,0)
 ; COMPRESS DATA - REMOVE $J SPECIFICITY - KILL 'DLY' NODE
"RTN","KMPVBETR",35,0)
 S KMPVHDAY=""
"RTN","KMPVBETR",36,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY)) Q:(KMPVHDAY="")!(KMPVHDAY>KMPVHYDAY)  D
"RTN","KMPVBETR",37,0)
 .S KMPVNODE=""
"RTN","KMPVBETR",38,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVBETR",39,0)
 ..S KMPVTIME=""
"RTN","KMPVBETR",40,0)
 ..F  S KMPVTIME=$O(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY,KMPVNODE,KMPVTIME)) Q:KMPVTIME=""  D
"RTN","KMPVBETR",41,0)
 ...S KMPVOPT=""
"RTN","KMPVBETR",42,0)
 ...F  S KMPVOPT=$O(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY,KMPVNODE,KMPVTIME,KMPVOPT)) Q:KMPVOPT=""  D
"RTN","KMPVBETR",43,0)
 ....S KMPVJ="",KMPVDATA="",KMPVJTOT="",KMPVUTOT=0
"RTN","KMPVBETR",44,0)
 ....F  S KMPVJ=$O(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY,KMPVNODE,KMPVTIME,KMPVOPT,KMPVJ)) Q:KMPVJ=""  D
"RTN","KMPVBETR",45,0)
 .....S KMPVDATA=$G(^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY,KMPVNODE,KMPVTIME,KMPVOPT,KMPVJ))
"RTN","KMPVBETR",46,0)
 .....F KMPVI=1:1:6 S $P(KMPVJTOT,"^",KMPVI)=$P(KMPVDATA,"^",KMPVI)+$P(KMPVJTOT,"^",KMPVI)
"RTN","KMPVBETR",47,0)
 .....S KMPVUTOT=KMPVUTOT+1
"RTN","KMPVBETR",48,0)
 ....S ^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY,KMPVNODE,KMPVOPT,KMPVTIME)=KMPVJTOT_"^"_KMPVUTOT
"RTN","KMPVBETR",49,0)
 .K ^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY)  ; Kill 'daily' node once all data compiled in 'compress' node
"RTN","KMPVBETR",50,0)
 .I $$S^%ZTLOAD G TASKSTOP
"RTN","KMPVBETR",51,0)
 ;
"RTN","KMPVBETR",52,0)
 ; PROCESS 'COMPRESS' NODE FOR TRANSMISSION
"RTN","KMPVBETR",53,0)
 S KMPVHDAY=""
"RTN","KMPVBETR",54,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY)) Q:KMPVHDAY=""  D
"RTN","KMPVBETR",55,0)
 .; IF OLDER THAN 'X' DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVBETR",56,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVBETR",57,0)
 ..D CANMESS^KMPVCBG("DELETE","VBEM",KMPVSITE,KMPVHDAY)
"RTN","KMPVBETR",58,0)
 ..K ^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY),^KMPTMP("KMPV","VBEM","DLY",KMPVHDAY)
"RTN","KMPVBETR",59,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVBETR",60,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY)  ; IA #10046
"RTN","KMPVBETR",61,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVBETR",62,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVBETR",63,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVBETR",64,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VBEM",KMPVSITE,KMPVHDAY)
"RTN","KMPVBETR",65,0)
 .K ^KMPTMP("KMPV","VBEM","TRANSMIT",$J)
"RTN","KMPVBETR",66,0)
 .S KMPVLN=1
"RTN","KMPVBETR",67,0)
 .S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVBETR",68,0)
 .S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVBETR",69,0)
 .S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVBETR",70,0)
 .S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VBEM"),KMPVLN=KMPVLN+1
"RTN","KMPVBETR",71,0)
 .S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVBETR",72,0)
 .S KMPVNODE=""
"RTN","KMPVBETR",73,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVBETR",74,0)
 ..S KMPVOPT=""
"RTN","KMPVBETR",75,0)
 ..F  S KMPVOPT=$O(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY,KMPVNODE,KMPVOPT)) Q:KMPVOPT=""  D
"RTN","KMPVBETR",76,0)
 ...S KMPVTIME=""
"RTN","KMPVBETR",77,0)
 ...F  S KMPVTIME=$O(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY,KMPVNODE,KMPVOPT,KMPVTIME)) Q:KMPVTIME=""  D
"RTN","KMPVBETR",78,0)
 ....S KMPVDATA=$G(^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY,KMPVNODE,KMPVOPT,KMPVTIME))
"RTN","KMPVBETR",79,0)
 ....S ^KMPTMP("KMPV","VBEM","TRANSMIT",$J,KMPVLN)="VBEM DATA="_KMPVNODE_U_KMPVOPT_U_KMPVTIME_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVBETR",80,0)
 .D TRANSMIT
"RTN","KMPVBETR",81,0)
 .I $$S^%ZTLOAD G TASKSTOP
"RTN","KMPVBETR",82,0)
 D STRSTP^KMPVCCFG("VBEM",KMPVHSTRT)
"RTN","KMPVBETR",83,0)
 ;  Let TaskMan know the job is complete
"RTN","KMPVBETR",84,0)
 S ZTREQ="@"
"RTN","KMPVBETR",85,0)
 Q
"RTN","KMPVBETR",86,0)
 ;
"RTN","KMPVBETR",87,0)
TRANSMIT ; Transmit data
"RTN","KMPVBETR",88,0)
 ; quit if no data to transmit.
"RTN","KMPVBETR",89,0)
 Q:'$D(^KMPTMP("KMPV","VBEM","TRANSMIT",$J))
"RTN","KMPVBETR",90,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVBETR",91,0)
 ; send packman message.
"RTN","KMPVBETR",92,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VBEM"",""TRANSMIT"","_$J_","
"RTN","KMPVBETR",93,0)
 S XMSUB="VBEM DAILY DATA"
"RTN","KMPVBETR",94,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VBEM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVBETR",95,0)
 D ^XMD
"RTN","KMPVBETR",96,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVBETR",97,0)
 I +$G(XMZ)>0 D
"RTN","KMPVBETR",98,0)
 .S ^KMPTMP("KMPV","VBEM","COMPRESS",KMPVHDAY)=XMZ
"RTN","KMPVBETR",99,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VBEM",KMPVSITE,KMPVHDAY)
"RTN","KMPVBETR",100,0)
 K ^KMPTMP("KMPV","VBEM","TRANSMIT",$J)
"RTN","KMPVBETR",101,0)
 Q
"RTN","KMPVBETR",102,0)
 ;
"RTN","KMPVBETR",103,0)
TASKSTOP ; Clean-up code if task Stopped via TaskMan
"RTN","KMPVBETR",104,0)
 D STRSTP^KMPVCCFG("VBEM",KMPVHSTRT)
"RTN","KMPVBETR",105,0)
 ;  Let TaskMan know the job is complete
"RTN","KMPVBETR",106,0)
 S ZTREQ="@"
"RTN","KMPVBETR",107,0)
 S ZTSTOP=1
"RTN","KMPVBETR",108,0)
 Q
"RTN","KMPVCBG")
0^6^B123736244
"RTN","KMPVCBG",1,0)
KMPVCBG ;SP/JML VSM background utility functions ;5/1/2017
"RTN","KMPVCBG",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVCBG",3,0)
 ;
"RTN","KMPVCBG",4,0)
 ;
"RTN","KMPVCBG",5,0)
MONLIST(KMPVML) ; Return list of configured Monitors
"RTN","KMPVCBG",6,0)
 K KMPVML
"RTN","KMPVCBG",7,0)
 N KMPVMKEY,KMPVIEN
"RTN","KMPVCBG",8,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",9,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",10,0)
 .S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCBG",11,0)
 .I KMPVIEN>0 S KMPVML(KMPVMKEY)=$P($G(^KMPV(8969,KMPVIEN,0)),"^",3)
"RTN","KMPVCBG",12,0)
 Q
"RTN","KMPVCBG",13,0)
 ;
"RTN","KMPVCBG",14,0)
STARTMON(KMPVMKEY,KMPVAUTO) ; Schedule transmission task in TaskMan and set ONOFF to ON
"RTN","KMPVCBG",15,0)
 N DA,DIE,DIR,DR,DTOUT,DUOUT,X,Y
"RTN","KMPVCBG",16,0)
 N KMPVEARR,KMPVERROR,KMPVNVAL,KMPVOVAL,KMPVRFREQ,KMPVOPT,KMPVSTAT,KMPVSTRT
"RTN","KMPVCBG",17,0)
 ;
"RTN","KMPVCBG",18,0)
 S KMPVAUTO=+$G(KMPVAUTO)
"RTN","KMPVCBG",19,0)
 ; Do not start monitor in test if ALLOW TEST SYSTEM is set to NO
"RTN","KMPVCBG",20,0)
 I $$PROD^KMPVCCFG()="Test",$$GETVAL^KMPVCCFG(KMPVMKEY,"ALLOW TEST SYSTEM",8969)="NO" D  Q
"RTN","KMPVCBG",21,0)
 .Q:KMPVAUTO=1
"RTN","KMPVCBG",22,0)
 .N DIR S DIR(0)="E"
"RTN","KMPVCBG",23,0)
 .S DIR("A",1)="",DIR("A",2)="Cannot start monitor in test environment"
"RTN","KMPVCBG",24,0)
 .S DIR("A",3)="'ALLOW TEST SYSTEM' is set to 'NO'",DIR("A")="Press any key to continue"
"RTN","KMPVCBG",25,0)
 .D ^DIR
"RTN","KMPVCBG",26,0)
 ;
"RTN","KMPVCBG",27,0)
 S KMPVOVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",28,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="No"
"RTN","KMPVCBG",29,0)
 S DIR("?")="Answer YES to start collecting "_KMPVMKEY_" data"
"RTN","KMPVCBG",30,0)
 S DIR("A")="Do you want to start "_KMPVMKEY_" collection?"
"RTN","KMPVCBG",31,0)
 I 'KMPVAUTO D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVCBG",32,0)
 I ($G(Y)=1)!KMPVAUTO D
"RTN","KMPVCBG",33,0)
 .N KMPVOPT,KMPVSTRT,KMPVRFREQ,KMPVERROR,KMPVSTAT
"RTN","KMPVCBG",34,0)
 .S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",35,0)
 .S KMPVSTRT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE START",8969)
"RTN","KMPVCBG",36,0)
 .S KMPVRFREQ=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE FREQUENCY",8969)
"RTN","KMPVCBG",37,0)
 .I KMPVSTRT=""!(KMPVRFREQ="") D  Q
"RTN","KMPVCBG",38,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",39,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",40,0)
 ..S DIR("A",1)="",DIR("A",2)="This is not configured correctly to be a repeating task."
"RTN","KMPVCBG",41,0)
 ..S DIR("A",3)="Check VSM Configuration related to this task. Task not started."
"RTN","KMPVCBG",42,0)
 ..S DIR("A")="Press any key to continue."
"RTN","KMPVCBG",43,0)
 ..D ^DIR
"RTN","KMPVCBG",44,0)
 .;
"RTN","KMPVCBG",45,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","ON",.KMPVEARR)
"RTN","KMPVCBG",46,0)
 .; If VBEM set ^%ZTSCH("LOGRSRC")=1
"RTN","KMPVCBG",47,0)
 .I KMPVSTAT=0,KMPVMKEY="VBEM" S DIE=8989.3,DA=1,DR="300///YES" D ^DIE
"RTN","KMPVCBG",48,0)
 .; schedule background job 
"RTN","KMPVCBG",49,0)
 .D RESCH^XUTMOPT(KMPVOPT,KMPVSTRT,,KMPVRFREQ,"L",.KMPVERROR)
"RTN","KMPVCBG",50,0)
 .I $G(KMPVERROR)=-1 D  Q
"RTN","KMPVCBG",51,0)
 ..S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",52,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",53,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",54,0)
 ..S DIR("A",1)="",DIR("A",2)="ERROR: "_KMPVMKEY_" BACKGROUND TASK NOT STARTED!",DIR("A")="Press any key to continue."
"RTN","KMPVCBG",55,0)
 ..I KMPVSTAT>0 S DIR("A",3)="Failed to set 'ONOFF' field back to 'OFF'"
"RTN","KMPVCBG",56,0)
 ..D ^DIR
"RTN","KMPVCBG",57,0)
 ;
"RTN","KMPVCBG",58,0)
 S KMPVNVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",59,0)
 I KMPVOVAL'=KMPVNVAL D CFGMSG()
"RTN","KMPVCBG",60,0)
 Q
"RTN","KMPVCBG",61,0)
 ;
"RTN","KMPVCBG",62,0)
STOPMON(KMPVMKEY,KMPVAUTO) ;   Un-schedule transmission task in TaskMan and set ONOFF to OFF
"RTN","KMPVCBG",63,0)
 N DA,DIE,DIR,DR,DTOUT,DUOUT,X,Y
"RTN","KMPVCBG",64,0)
 N KMPVEARR,KMPVERROR,KMPVNVAL,KMPVOPT,KMPVOVAL,KMPVSTAT
"RTN","KMPVCBG",65,0)
 ;
"RTN","KMPVCBG",66,0)
 S KMPVAUTO=+$G(KMPVAUTO)
"RTN","KMPVCBG",67,0)
 S KMPVOVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",68,0)
 S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",69,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="No"
"RTN","KMPVCBG",70,0)
 S DIR("?")="Answer YES to stop collecting "_KMPVMKEY_" data"
"RTN","KMPVCBG",71,0)
 S DIR("A")="Do you want to stop "_KMPVMKEY_" collection?"
"RTN","KMPVCBG",72,0)
 I 'KMPVAUTO D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVCBG",73,0)
 I ($G(Y)=1)!KMPVAUTO D
"RTN","KMPVCBG",74,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",75,0)
 .; If VBEM set ^%ZTSCH("LOGRSRC")=1
"RTN","KMPVCBG",76,0)
 .I KMPVSTAT=0,KMPVMKEY="VBEM" S DIE=8989.3,DA=1,DR="300///NO" D ^DIE
"RTN","KMPVCBG",77,0)
 .; unschedule background job
"RTN","KMPVCBG",78,0)
 .D RESCH^XUTMOPT(KMPVOPT,"@",,,.KMPVERROR)
"RTN","KMPVCBG",79,0)
 .I $G(KMPVERROR) D  Q
"RTN","KMPVCBG",80,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",81,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",82,0)
 ..S DIR("A",1)="",DIR("A",2)="ERROR: "_KMPVMKEY_" BACKGROUND TASK NOT STOPPED!",DIR("A")="Press any key to continue."
"RTN","KMPVCBG",83,0)
 ..S DIR("A",3)=$G(KMPVERROR)
"RTN","KMPVCBG",84,0)
 ..D ^DIR
"RTN","KMPVCBG",85,0)
 S KMPVNVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",86,0)
 I KMPVOVAL'=KMPVNVAL D CFGMSG()
"RTN","KMPVCBG",87,0)
 Q
"RTN","KMPVCBG",88,0)
 ;
"RTN","KMPVCBG",89,0)
RESCH(KMPVMKEY,KMPVERR) ; Reschedule transmission task in TaskMan
"RTN","KMPVCBG",90,0)
 K KMPVERR
"RTN","KMPVCBG",91,0)
 N KMPVOPT,KMPVSTRT,KMPVRFREQ,KMPVERROR
"RTN","KMPVCBG",92,0)
 S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",93,0)
 S KMPVSTRT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE START",8969)
"RTN","KMPVCBG",94,0)
 S KMPVRFREQ=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE FREQUENCY",8969)
"RTN","KMPVCBG",95,0)
 D RESCH^XUTMOPT(KMPVOPT,KMPVSTRT,,KMPVRFREQ,"L",.KMPVERROR)
"RTN","KMPVCBG",96,0)
 I $D(KMPVERROR) D
"RTN","KMPVCBG",97,0)
 .S KMPVERR(1)="Failed to add "_KMPVOPT_" to 'OPTION SCHEDULING' file"
"RTN","KMPVCBG",98,0)
 .S KMPVERR(2)=KMPVERROR
"RTN","KMPVCBG",99,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",100,0)
 .I KMPVSTAT'=0 S KMPVERR(3)=$P(KMPVSTAT,"^",2),KMPVERR(4)="Failed to reset 'ONOFF' to 'OFF' after rescheduling failure."
"RTN","KMPVCBG",101,0)
 Q
"RTN","KMPVCBG",102,0)
 ;
"RTN","KMPVCBG",103,0)
DESCH(KMPVMKEY,KMPVERR) ; De-schedule transmission task in TaskMan
"RTN","KMPVCBG",104,0)
 S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",105,0)
 D RESCH^XUTMOPT(KMPVOPT,"@",,,.KMPVERROR)
"RTN","KMPVCBG",106,0)
 I $D(KMPVERROR) D
"RTN","KMPVCBG",107,0)
 .S KMPVERR(1)="Failed to remove "_KMPVOPT_" from 'OPTION SCHEDULING' file"
"RTN","KMPVCBG",108,0)
 .S KMPVERR(2)=KMPVERROR
"RTN","KMPVCBG",109,0)
 Q
"RTN","KMPVCBG",110,0)
 ;
"RTN","KMPVCBG",111,0)
CANMESS(MTYPE,KMPVMKEY,KMPVSITE,KMPVD) ; Repeatable, configured informational mail messages
"RTN","KMPVCBG",112,0)
 N KMPVEMAIL,KMPVPROD,KMPVTEXT,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",113,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",114,0)
 ;
"RTN","KMPVCBG",115,0)
 I MTYPE="JOBLATE" D
"RTN","KMPVCBG",116,0)
 .S KMPVTEXT($J,1)="Daily "_KMPVMKEY_" job behind for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",117,0)
 .S KMPVTEXT($J,2)="Number of days behind: "_KMPVD
"RTN","KMPVCBG",118,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",119,0)
 .S XMSUB=KMPVMKEY_" DAILY JOB NOT RUN: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",120,0)
 I MTYPE="DELETE" D
"RTN","KMPVCBG",121,0)
 .S KMPVTEXT($J,1)="Purging "_KMPVMKEY_" data for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",122,0)
 .S KMPVTEXT($J,2)="Data purged for: "_KMPVD
"RTN","KMPVCBG",123,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",124,0)
 .S XMSUB=KMPVMKEY_" PURGING DATA -- NOT TRANSMITTED: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",125,0)
 I MTYPE="TRANWARN" D
"RTN","KMPVCBG",126,0)
 .S KMPVTEXT($J,1)="Data transmissions of "_KMPVMKEY_" data late for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",127,0)
 .S KMPVTEXT($J,2)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",128,0)
 .S XMSUB=KMPVMKEY_" Late Transmission Warning: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",129,0)
 I MTYPE="FAILTRAN" D
"RTN","KMPVCBG",130,0)
 .S KMPVTEXT($J,1)="Failed transmission for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",131,0)
 .S KMPVTEXT($J,2)="Collection date: "_KMPVD
"RTN","KMPVCBG",132,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",133,0)
 .S XMSUB=KMPVMKEY_" FAILED "_KMPVMKEY_" TRANSMISSION: "_$P(KMPVSITE,"^",2)_"  "_KMPVD_"  Production="_KMPVPROD
"RTN","KMPVCBG",134,0)
 I MTYPE="KILL" D
"RTN","KMPVCBG",135,0)
 .S KMPVTEXT($J,1)="All data deleted at "_$P(KMPVSITE,"^",2)_" for "_KMPVMKEY
"RTN","KMPVCBG",136,0)
 .S KMPVTEXT($J,2)="Username: "_$$USERNAME^KMPVCCFG(DUZ)
"RTN","KMPVCBG",137,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",138,0)
 .S XMSUB="EMERGENCY DATA DELETION AT "_$P(KMPVSITE,"^",2)_"  "_KMPVMKEY_"  Production="_KMPVPROD
"RTN","KMPVCBG",139,0)
 Q:$D(XMSUB)=""
"RTN","KMPVCBG",140,0)
 S XMTEXT="KMPVTEXT("_$J_","
"RTN","KMPVCBG",141,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",142,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"LOCAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",143,0)
 D ^XMD
"RTN","KMPVCBG",144,0)
 Q
"RTN","KMPVCBG",145,0)
 ;
"RTN","KMPVCBG",146,0)
SUPMSG(KMPVTEXT) ;  Send email to local/national support mail groups
"RTN","KMPVCBG",147,0)
 N KMPVEMAIL,KMPVPROD,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",148,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",149,0)
 ;
"RTN","KMPVCBG",150,0)
 S XMSUB=KMPVTEXT_" Prod="_KMPVPROD
"RTN","KMPVCBG",151,0)
 S XMTEXT="KMPVTEXT("
"RTN","KMPVCBG",152,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",153,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",154,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"LOCAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",155,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",156,0)
 D ^XMD
"RTN","KMPVCBG",157,0)
 Q
"RTN","KMPVCBG",158,0)
 ;
"RTN","KMPVCBG",159,0)
DBAMSG(KMPVTEXT) ;  Send email to national support mail groups
"RTN","KMPVCBG",160,0)
 N KMPVEMAIL,KMPVPROD,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",161,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",162,0)
 ;
"RTN","KMPVCBG",163,0)
 S XMSUB=KMPVTEXT_" Prod="_KMPVPROD
"RTN","KMPVCBG",164,0)
 S XMTEXT="KMPVTEXT("
"RTN","KMPVCBG",165,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",166,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",167,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",168,0)
 D ^XMD
"RTN","KMPVCBG",169,0)
 Q
"RTN","KMPVCBG",170,0)
 ;
"RTN","KMPVCBG",171,0)
CFGMSG(KMPVRQNAM) ;  Send configuration data to update Location Table at National VSM Database
"RTN","KMPVCBG",172,0)
 N KMPVDOM,KMPVEMAIL,KMPVLN,KMPVMKEY,KMPVPROD,KMPVSINF,KMPVSITE,KMPVUP,KMPVUPCFG,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",173,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",174,0)
 ;
"RTN","KMPVCBG",175,0)
 I $G(KMPVRQNAM)="" S KMPVRQNAM=$$USERNAME^KMPVCCFG($G(DUZ))
"RTN","KMPVCBG",176,0)
 S KMPVSITE=$$SITE^VASITE ;IA 10112
"RTN","KMPVCBG",177,0)
 S KMPVLN=1
"RTN","KMPVCBG",178,0)
 S KMPVUP="KMP CFG"
"RTN","KMPVCBG",179,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVCBG",180,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVCBG",181,0)
 S KMPVUP(KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVCBG",182,0)
 S KMPVUP(KMPVLN)="UPDATE CONFIG="_+$H_"^"_KMPVRQNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCBG",183,0)
 S KMPVUP(KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVCBG",184,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",185,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",186,0)
 .S KMPVUP(KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG(KMPVMKEY),KMPVLN=KMPVLN+1
"RTN","KMPVCBG",187,0)
 S XMSUB=KMPVUP,XMTEXT="KMPVUP("
"RTN","KMPVCBG",188,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",189,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",190,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"VSM CFG EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",191,0)
 D ^XMD
"RTN","KMPVCBG",192,0)
 Q
"RTN","KMPVCBG",193,0)
 ;
"RTN","KMPVCBG",194,0)
PURGEDLY(KMPVMKEY) ; Purge any data older than VSM CONFIURATION file specifies
"RTN","KMPVCBG",195,0)
 N KMPVCURH,KMPVH,KMPVKEEP
"RTN","KMPVCBG",196,0)
 S KMPVH="",KMPVCURH=+$H,KMPVKEEP=$$GETVAL^KMPVCCFG(KMPVMKEY,"DAYS TO KEEP DATA",8969)
"RTN","KMPVCBG",197,0)
 F  S KMPVH=$O(^KMPTMP("KMPV",KMPVMKEY,"DLY",KMPVH)) Q:KMPVH=""  D
"RTN","KMPVCBG",198,0)
 .I (KMPVCURH-KMPVH)>KMPVKEEP K ^KMPTMP("KMPV",KMPVMKEY,"DLY",KMPVH)
"RTN","KMPVCBG",199,0)
 Q
"RTN","KMPVCBG",200,0)
 ;
"RTN","KMPVCBG",201,0)
KMPVTSK(KMPVNSP) ; CHECK CREATE OR RESUME KMPVRUN TASK IN CACHE TASKMGR
"RTN","KMPVCBG",202,0)
 N I,KMPVMSG,KMPVNSPE,KMPVROLS,KMPVTASK,KMPVTFLG,KMPVTSK,KMPVTSKS
"RTN","KMPVCBG",203,0)
 ;
"RTN","KMPVCBG",204,0)
 ; Start: only in KMPVCBG version - comment out for ZSTU
"RTN","KMPVCBG",205,0)
 S KMPVROLS=$ROLES
"RTN","KMPVCBG",206,0)
 I (KMPVROLS'["%All")&(KMPVROLS'["%Manager") D  Q
"RTN","KMPVCBG",207,0)
 .W !,"You must have either the %Manager or the %All Role",!
"RTN","KMPVCBG",208,0)
 ; End: only in KMPV version ----
"RTN","KMPVCBG",209,0)
 ;
"RTN","KMPVCBG",210,0)
 I '$D(KMPVNSP)||'##Class(%SYS.Namespace).Exists(KMPVNSP) S KMPVNSP=$ZDEFNSP
"RTN","KMPVCBG",211,0)
 S KMPVTSK="KMPVRUN"
"RTN","KMPVCBG",212,0)
 I KMPVNSP'=$ZDEFNSP S KMPVTSK=KMPVTSK_"_"_KMPVNSP
"RTN","KMPVCBG",213,0)
 S KMPVMSG="CHECKING KMPV SETUP IN "_KMPVNSP_" NAMESPACE..."
"RTN","KMPVCBG",214,0)
 W !,KMPVMSG,!!
"RTN","KMPVCBG",215,0)
 DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",216,0)
 ; Start: only in ZSTU version - comment out for KMPVCBG
"RTN","KMPVCBG",217,0)
 ;I '$$EXIST^%R("KMPVRUN",KMPVNSP) D  Q "VSMRUN Check Complete... No Routine."
"RTN","KMPVCBG",218,0)
 ;.S KMPVMSG(1)="KMPVRUN routine does not exist in "_KMPVNSP_" namespace."
"RTN","KMPVCBG",219,0)
 ;.S KMPVMSG(2)="Please verify that patch KMPV*1.0*0 has been successfully installed."
"RTN","KMPVCBG",220,0)
 ;.F I=1:1:2 W !,KMPVMSG(I) DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG(I),0,0)
"RTN","KMPVCBG",221,0)
 ;.W !
"RTN","KMPVCBG",222,0)
 ; End: only in ZSTU version ----
"RTN","KMPVCBG",223,0)
 S KMPVTFLG=0
"RTN","KMPVCBG",224,0)
 S KMPVTSKS=##class(%ResultSet).%New("%SYS.TaskSuper.TaskListDetail")
"RTN","KMPVCBG",225,0)
 S KMPVSTAT=KMPVTSKS.Execute()
"RTN","KMPVCBG",226,0)
 D DisplayError^%apiOBJ(KMPVSTAT)
"RTN","KMPVCBG",227,0)
 while KMPVTSKS.Next() {
"RTN","KMPVCBG",228,0)
 if (KMPVTSKS.GetDataByName("Task Name")=KMPVTSK) {
"RTN","KMPVCBG",229,0)
 	set KMPVTID=KMPVTSKS.GetDataByName("ID")
"RTN","KMPVCBG",230,0)
 	set KMPVTRUN=KMPVTSKS.GetDataByName("Next Scheduled Date")_" at "_KMPVTSKS.GetDataByName("Next Scheduled Time")
"RTN","KMPVCBG",231,0)
 	if KMPVTSKS.GetDataByName("Suspended")'="" {
"RTN","KMPVCBG",232,0)
 		do ##class(%SYS.Task).Resume(KMPVTID)
"RTN","KMPVCBG",233,0)
 		S KMPVMSG=KMPVTSK_" Task #"_KMPVTID_" Exists and Resumed to Run at "_KMPVTRUN
"RTN","KMPVCBG",234,0)
 	} Else {
"RTN","KMPVCBG",235,0)
 		S KMPVMSG=KMPVTSK_" Task #"_KMPVTID_" Exists and Scheduled to Run at "_KMPVTRUN
"RTN","KMPVCBG",236,0)
 		}
"RTN","KMPVCBG",237,0)
 	set KMPVTFLG=1
"RTN","KMPVCBG",238,0)
 	W !,KMPVMSG
"RTN","KMPVCBG",239,0)
 	DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",240,0)
 	quit
"RTN","KMPVCBG",241,0)
 		}
"RTN","KMPVCBG",242,0)
 }
"RTN","KMPVCBG",243,0)
 ;
"RTN","KMPVCBG",244,0)
 ;create task if it doesn't exist
"RTN","KMPVCBG",245,0)
 I 'KMPVTFLG D
"RTN","KMPVCBG",246,0)
 .S KMPVTASK=##Class(%SYS.Task).%New()
"RTN","KMPVCBG",247,0)
 .S KMPVTASK.Name=KMPVTSK
"RTN","KMPVCBG",248,0)
 .S KMPVTASK.Description = "Start VSM Collection Drivers"
"RTN","KMPVCBG",249,0)
 .S KMPVTASK.NameSpace=KMPVNSP
"RTN","KMPVCBG",250,0)
 .S KMPVTASK.TaskClass="%SYS.Task.RunLegacyTask"
"RTN","KMPVCBG",251,0)
 .S KMPVTASK.Settings=$lb("ExecuteCode","D RUN^KMPVRUN")
"RTN","KMPVCBG",252,0)
 .S KMPVTASK.RunAsUser = "_SYSTEM"
"RTN","KMPVCBG",253,0)
 .S KMPVTASK.Priority=0
"RTN","KMPVCBG",254,0)
 .S KMPVTASK.StartDate = $p($h,",",1)+1
"RTN","KMPVCBG",255,0)
 .S KMPVTASK.DailyFrequency=0 ;task.DailyFrequencyDisplayToLogical("Once")
"RTN","KMPVCBG",256,0)
 .S KMPVTASK.DailyFrequencyTime=""
"RTN","KMPVCBG",257,0)
 .S KMPVTASK.DailyIncrement=""
"RTN","KMPVCBG",258,0)
 .S KMPVTASK.DailyStartTime=60
"RTN","KMPVCBG",259,0)
 .S KMPVTASK.Expires=0
"RTN","KMPVCBG",260,0)
 .S KMPVTASK.DailyEndTime=""
"RTN","KMPVCBG",261,0)
 .S KMPVTASK.RescheduleOnStart=1
"RTN","KMPVCBG",262,0)
 .S KMPVSTAT=KMPVTASK.%Save()
"RTN","KMPVCBG",263,0)
 .I $System.Status.IsError(KMPVSTAT) D  Q
"RTN","KMPVCBG",264,0)
 ..S KMPVMSG(1)="Error #"_$System.Status.GetErrorCodes(KMPVSTAT)
"RTN","KMPVCBG",265,0)
 ..S KMPVMSG(2)=$System.Status.GetOneStatusText(KMPVSTAT,1)
"RTN","KMPVCBG",266,0)
 ..S KMPVMSG(3)="Failed to Create and Schedule Task "_KMPVTSK_" in Cache Task Manager"
"RTN","KMPVCBG",267,0)
 ..F I=1:1:3 W !,KMPVMSG(I) DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG(I),0,1)
"RTN","KMPVCBG",268,0)
 .S KMPVMSG="Created and scheduled Task "_KMPVTSK_" in Cache Task Manager"
"RTN","KMPVCBG",269,0)
 .W !,KMPVMSG DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",270,0)
 Q
"RTN","KMPVCBG",271,0)
 ;
"RTN","KMPVCCFG")
0^4^B56139201
"RTN","KMPVCCFG",1,0)
KMPVCCFG ;SP/JML - VSM configuration functions -- APIs for data access ;5/1/2017
"RTN","KMPVCCFG",2,0)
 ;;4.0;CAPACITY MANAGEMENT;3/1/2018;Build 19;Build 38
"RTN","KMPVCCFG",3,0)
 ;
"RTN","KMPVCCFG",4,0)
 ;
"RTN","KMPVCCFG",5,0)
 ;  ACCESSOR FUNCTIONS
"RTN","KMPVCCFG",6,0)
 ;
"RTN","KMPVCCFG",7,0)
CFGARR(KMPVMKEY,KMPVCFG,KMPVFLAG) ; Return configuration by monitor in array
"RTN","KMPVCCFG",8,0)
 K KMPVCFG S U="^"
"RTN","KMPVCCFG",9,0)
 N KMPVIEN,KMPV0,KMPV1,KMPV2,KMPV3
"RTN","KMPVCCFG",10,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",11,0)
 Q:$G(KMPVIEN)=""
"RTN","KMPVCCFG",12,0)
 S KMPV0=$G(^KMPV(8969,KMPVIEN,0)),KMPV1=$G(^KMPV(8969,KMPVIEN,1))
"RTN","KMPVCCFG",13,0)
 S KMPV2=$G(^KMPV(8969,KMPVIEN,2)),KMPV3=$G(^KMPV(8969,KMPVIEN,3))
"RTN","KMPVCCFG",14,0)
 S KMPVCFG("ONOFF")=$$GETVAL(KMPVMKEY,"ONOFF",8969,$G(KMPVFLAG)),KMPVCFG("VERSION")=$P(KMPV0,U,4)
"RTN","KMPVCCFG",15,0)
 S KMPVCFG("VERSION INSTALL DATE")=$P(KMPV0,U,5),KMPVCFG("DAYS TO KEEP DATA")=$P(KMPV1,U)
"RTN","KMPVCCFG",16,0)
 S KMPVCFG("COLLECTION INTERVAL")=$P(KMPV1,U,2),KMPVCFG("CACHE DAILY TASK")=$P(KMPV1,U,3)
"RTN","KMPVCCFG",17,0)
 S KMPVCFG("ALLOW TEST SYSTEM")=$$GETVAL(KMPVMKEY,"ALLOW TEST SYSTEM",8969,$G(KMPVFLAG)),KMPVCFG("TASKMAN SCHEDULE FREQUENCY")=$P(KMPV1,U,5)
"RTN","KMPVCCFG",18,0)
 S KMPVCFG("TASKMAN SCHEDULE START")=$P(KMPV1,U,6),KMPVCFG("TASKMAN OPTION")=$P(KMPV1,U,7)
"RTN","KMPVCCFG",19,0)
 S KMPVCFG("LAST START TIME")=$P(KMPV2,U),KMPVCFG("LAST STOP TIME")=$P(KMPV2,U,2)
"RTN","KMPVCCFG",20,0)
 S KMPVCFG("LAST RUN TIME")=$P(KMPV2,U,3),KMPVCFG("NATIONAL DATA EMAIL ADDRESS")=$P(KMPV3,U)
"RTN","KMPVCCFG",21,0)
 S KMPVCFG("NATIONAL SUPPORT EMAIL ADDRESS")=$P(KMPV3,U,2)
"RTN","KMPVCCFG",22,0)
 S KMPVCFG("VSM CFG EMAIL ADDRESS")=$P(KMPV3,U,3),KMPVCFG("LOCAL SUPPORT EMAIL ADDRESS")=$P(KMPV3,U,4)
"RTN","KMPVCCFG",23,0)
 Q
"RTN","KMPVCCFG",24,0)
 ;
"RTN","KMPVCCFG",25,0)
GETDEF(KMPVMKEY,KMPVDEF,KMPVFLAG) ; Return default configuration in array
"RTN","KMPVCCFG",26,0)
 K KMPVDEF S U="^"
"RTN","KMPVCCFG",27,0)
 N KMPVIEN,KMPV0,KMPV1
"RTN","KMPVCCFG",28,0)
 I $D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969.02,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",29,0)
 Q:$G(KMPVIEN)=""
"RTN","KMPVCCFG",30,0)
 S KMPV0=$G(^KMPV(8969.02,KMPVIEN,0)),KMPV1=$G(^KMPV(8969.02,KMPVIEN,1))
"RTN","KMPVCCFG",31,0)
 S KMPVDEF("DAYS TO KEEP DATA")=$P(KMPV0,U,2),KMPVDEF("COLLECTION INTERVAL")=$P(KMPV0,U,3)
"RTN","KMPVCCFG",32,0)
 S KMPVDEF("CACHE DAILY TASK")=$P(KMPV0,U,4),KMPVDEF("ALLOW TEST SYSTEM")=$P(KMPV0,U,5)
"RTN","KMPVCCFG",33,0)
 S KMPVDEF("TASKMAN SCHEDULE FREQUENCY")=$P(KMPV0,U,6),KMPVDEF("TASKMAN SCHEDULE START")=$P(KMPV0,U,7)
"RTN","KMPVCCFG",34,0)
 S KMPVDEF("TASKMAN OPTION")=$P(KMPV0,U,8),KMPVDEF("NATIONAL DATA EMAIL ADDRESS")=$P(KMPV1,U)
"RTN","KMPVCCFG",35,0)
 S KMPVDEF("NATIONAL SUPPORT EMAIL ADDRESS")=$P(KMPV1,U,2),KMPVDEF("VSM CFG EMAIL ADDRESS")=$P(KMPV1,U,3)
"RTN","KMPVCCFG",36,0)
 Q
"RTN","KMPVCCFG",37,0)
 ;
"RTN","KMPVCCFG",38,0)
CFGSTR(KMPVMKEY,KMPVFLAG) ; Return configuration in "^" delimited string
"RTN","KMPVCCFG",39,0)
 S U="^"
"RTN","KMPVCCFG",40,0)
 N KMPVIEN,KMPV0,KMPV1,KMPV2,KMPV3,KMPVCFG
"RTN","KMPVCCFG",41,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",42,0)
 Q:$G(KMPVIEN)="" ""
"RTN","KMPVCCFG",43,0)
 S KMPVCFG=""
"RTN","KMPVCCFG",44,0)
 S KMPV0=$G(^KMPV(8969,KMPVIEN,0)),KMPV1=$G(^KMPV(8969,KMPVIEN,1))
"RTN","KMPVCCFG",45,0)
 ; MONITOR KEY^ONOFF^VERSION^VERSION INSTALL DATE^DAYS TO KEEP DATA^COLLECTION INTERVAL^SCHEDULE FREQUENCY^SCHEDULE START^ALLOW TEST
"RTN","KMPVCCFG",46,0)
 ; ^CACHE DAILY TASK^TASKMAN TASK
"RTN","KMPVCCFG",47,0)
 S KMPVCFG=KMPVMKEY_U_$$GETVAL(KMPVMKEY,"ONOFF",8969,$G(KMPVFLAG))_U_$P(KMPV0,U,4)_U_$P(KMPV0,U,5)_U_$P(KMPV1,U,1)_U_$P(KMPV1,U,2)_U
"RTN","KMPVCCFG",48,0)
 S KMPVCFG=KMPVCFG_$P(KMPV1,U,5)_U_$P(KMPV1,U,6)_U_$$GETVAL(KMPVMKEY,"ALLOW TEST SYSTEM",8969,$G(KMPVFLAG))_U
"RTN","KMPVCCFG",49,0)
 S KMPVCFG=KMPVCFG_$P(KMPV1,U,3)_U_$P(KMPV1,U,7)
"RTN","KMPVCCFG",50,0)
 Q KMPVCFG
"RTN","KMPVCCFG",51,0)
 ;
"RTN","KMPVCCFG",52,0)
GETVAL(KMPVMKEY,KMPVFLD,KMPVFILE,KMPVFLAG) ; retrieve value from VSM CONFIGURATION or VSM MONITOR DEFAULTS files
"RTN","KMPVCCFG",53,0)
 N KMPVIEN
"RTN","KMPVCCFG",54,0)
 I KMPVFILE=8969,$D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",55,0)
 I KMPVFILE=8969.02,$D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969.02,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",56,0)
 Q:$G(KMPVIEN)="" ""
"RTN","KMPVCCFG",57,0)
 Q $$GET1^DIQ(KMPVFILE,KMPVIEN,KMPVFLD,$G(KMPVFLAG))
"RTN","KMPVCCFG",58,0)
 ;
"RTN","KMPVCCFG",59,0)
 ; SETTER FUNCTIONS
"RTN","KMPVCCFG",60,0)
 ;
"RTN","KMPVCCFG",61,0)
SETONE(KMPVMKEY,KMPVFNAM,KMPVNVAL,KMPVERR) ; set a value into the VSM CONFIGURATION file
"RTN","KMPVCCFG",62,0)
 K KMPVERR,KMPVEARR
"RTN","KMPVCCFG",63,0)
 N KMPVIEN,KMPVEARR,KMPVOVAL,KMPVSTAT,KMPVUP
"RTN","KMPVCCFG",64,0)
 N FDA
"RTN","KMPVCCFG",65,0)
 S KMPVSTAT=0,KMPVLOG=+$G(KMPVLOG)
"RTN","KMPVCCFG",66,0)
 S KMPVOVAL=$$GETVAL(KMPVMKEY,KMPVFNAM,8969)
"RTN","KMPVCCFG",67,0)
 I KMPVOVAL=KMPVNVAL Q KMPVSTAT
"RTN","KMPVCCFG",68,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",69,0)
 I $G(KMPVIEN)="" S KMPVSTAT="1^MONITOR TYPE NOT CONFIGURED" Q KMPVSTAT
"RTN","KMPVCCFG",70,0)
 S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCCFG",71,0)
 I +KMPVFNUM=0 S KMPVSTAT="1^FIELD NAME '"_KMPVFNAM_"' DOES NOT EXIST" Q KMPVSTAT
"RTN","KMPVCCFG",72,0)
 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVNVAL
"RTN","KMPVCCFG",73,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCCFG",74,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",75,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",76,0)
 .S KMPVSTAT="1^FILING ERROR"
"RTN","KMPVCCFG",77,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",78,0)
 ;
"RTN","KMPVCCFG",79,0)
SETVALS(KMPVMKEY,KMPVFVAL,KMPVERR,KMPVLOG) ; set multiple values into the VSM CONFIGURATION file
"RTN","KMPVCCFG",80,0)
 ; KMPVFVAL(FieldName)=FieldValue,  KMPVERR: Output array if errors
"RTN","KMPVCCFG",81,0)
 K KMPVERR,KMPVEARR
"RTN","KMPVCCFG",82,0)
 N KMPVDATA,KMPVIEN,KMVEARR,KMPVFNAM,KMPVFNUM,KMPVSTAT
"RTN","KMPVCCFG",83,0)
 N FDA
"RTN","KMPVCCFG",84,0)
 S KMPVSTAT=0,KMPVLOG=+$G(KMPVLOG)
"RTN","KMPVCCFG",85,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",86,0)
 I $G(KMPVIEN)="" S KMPVSTAT="1^MONITOR TYPE NOT CONFIGURED" Q KMPVSTAT
"RTN","KMPVCCFG",87,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCCFG",88,0)
 S KMPVFNAM=""
"RTN","KMPVCCFG",89,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCCFG",90,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCCFG",91,0)
 .I KMPVFNUM>0 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCCFG",92,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCCFG",93,0)
 ; If field name does not exist set error array and quit
"RTN","KMPVCCFG",94,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",95,0)
 .S KMPVSTAT="1^FIELD NAME DOES NOT EXIST"
"RTN","KMPVCCFG",96,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",97,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCCFG",98,0)
 ; If filing errors set error array
"RTN","KMPVCCFG",99,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",100,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",101,0)
 .S KMPVSTAT="1^FILING ERROR"
"RTN","KMPVCCFG",102,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",103,0)
 ;
"RTN","KMPVCCFG",104,0)
 ; OTHER FUNCTIONS
"RTN","KMPVCCFG",105,0)
 ;
"RTN","KMPVCCFG",106,0)
RESTCFG(KMPVMKEY) ; Restore default configuration to VSM CONFIGURATION file
"RTN","KMPVCCFG",107,0)
 N KMPVSTAT
"RTN","KMPVCCFG",108,0)
 D GETDEF(KMPVMKEY,.KMPVDEF)
"RTN","KMPVCCFG",109,0)
 S KMPVSTAT=$$SETVALS(KMPVMKEY,.KMPVDEF,.KMPVERR)
"RTN","KMPVCCFG",110,0)
 D CFGMSG^KMPVCBG()
"RTN","KMPVCCFG",111,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",112,0)
 ;
"RTN","KMPVCCFG",113,0)
STRSTP(KMPVMKEY,KMPVSTIME) ; Record run time values
"RTN","KMPVCCFG",114,0)
 Q:KMPVMKEY=""
"RTN","KMPVCCFG",115,0)
 Q:KMPVSTIME=""
"RTN","KMPVCCFG",116,0)
 N %,%H,X,KMPVETFM,KMPVFVAL,KMPVSTAT,KMPVSTFM,KMPVTDIFF
"RTN","KMPVCCFG",117,0)
 S %H=KMPVSTIME D YMD^%DTC S KMPVSTFM=X_%
"RTN","KMPVCCFG",118,0)
 S %H=$H D YMD^%DTC S KMPVETFM=X_%
"RTN","KMPVCCFG",119,0)
 S KMPVTDIFF=$$FMDIFF^XLFDT(KMPVETFM,KMPVSTFM,2)
"RTN","KMPVCCFG",120,0)
 S KMPVFVAL("LAST START TIME")=KMPVSTFM
"RTN","KMPVCCFG",121,0)
 S KMPVFVAL("LAST STOP TIME")=KMPVETFM
"RTN","KMPVCCFG",122,0)
 S KMPVFVAL("LAST RUN TIME")=KMPVTDIFF
"RTN","KMPVCCFG",123,0)
 S KMPVSTAT=$$SETVALS(KMPVMKEY,.KMPVFVAL,.KMPVEARR,1)
"RTN","KMPVCCFG",124,0)
 Q
"RTN","KMPVCCFG",125,0)
 ;
"RTN","KMPVCCFG",126,0)
SYSCFG() ; Return system configuration values
"RTN","KMPVCCFG",127,0)
 Q $$VERSION^%ZOSV(1)_"^"_$$OS^%ZOSV_"^"_$$VERSION^%ZOSV(0)_"^"_$$PROD() ; IA 10097
"RTN","KMPVCCFG",128,0)
 ;
"RTN","KMPVCCFG",129,0)
MONSTAT(KMPVTEXT) ; Return status information for all configured monitors
"RTN","KMPVCCFG",130,0)
 K KMPVTEXT
"RTN","KMPVCCFG",131,0)
 N KMPVBGD,KMPVCDAYS,KMPVCOMP,KMPVDDAYS,KMPVDLY,KMPVENT,KMPVI,KMPVML,KMPVMKEY,KMPVOPT,KMPVTASK,Y
"RTN","KMPVCCFG",132,0)
 ;
"RTN","KMPVCCFG",133,0)
 D MONLIST^KMPVCBG(.KMPVML)
"RTN","KMPVCCFG",134,0)
 S KMPVMKEY=""
"RTN","KMPVCCFG",135,0)
 F  S KMPVMKEY=$O(KMPVML(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCCFG",136,0)
 .D CFGARR(KMPVMKEY,.KMPVCFG)
"RTN","KMPVCCFG",137,0)
 .S KMPVDLY=$O(^KMPTMP("KMPV",KMPVMKEY,"DLY",""))
"RTN","KMPVCCFG",138,0)
 .S KMPVDDAYS=$S(KMPVDLY="":0,1:+$H-KMPVDLY)
"RTN","KMPVCCFG",139,0)
 .S KMPVCOMP=$O(^KMPTMP("KMPV",KMPVMKEY,"COMPRESS",""))
"RTN","KMPVCCFG",140,0)
 .S KMPVCDAYS=$S(KMPVCOMP="":0,1:+$H-KMPVCOMP)
"RTN","KMPVCCFG",141,0)
 .S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCCFG",142,0)
 .D OPTSTAT^XUTMOPT(KMPVOPT,.KMPVBGD)
"RTN","KMPVCCFG",143,0)
 .S KMPVTEXT(KMPVMKEY,"ONOFF")=KMPVCFG("ONOFF")
"RTN","KMPVCCFG",144,0)
 .S KMPVTEXT(KMPVMKEY,"LAST START TIME")=KMPVCFG("LAST START TIME")
"RTN","KMPVCCFG",145,0)
 .S KMPVTEXT(KMPVMKEY,"LAST RUN TIME")=KMPVCFG("LAST RUN TIME")
"RTN","KMPVCCFG",146,0)
 .S KMPVTEXT(KMPVMKEY,"DAILY NODE DAYS")=KMPVDDAYS
"RTN","KMPVCCFG",147,0)
 .S KMPVTEXT(KMPVMKEY,"COMPRESS NODE DAYS")=KMPVCDAYS
"RTN","KMPVCCFG",148,0)
 .S KMPVTEXT(KMPVMKEY,"OPTION SCHEDULE FILE ENTRIES")=$G(KMPVBGD)
"RTN","KMPVCCFG",149,0)
 .S KMPVI=""
"RTN","KMPVCCFG",150,0)
 .F  S KMPVI=$O(KMPVBGD(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCCFG",151,0)
 ..S KMPVENT=$G(KMPVBGD(KMPVI))
"RTN","KMPVCCFG",152,0)
 ..S KMPVTASK=+$P(KMPVENT,"^")
"RTN","KMPVCCFG",153,0)
 ..S Y=$P(KMPVENT,"^",2) D DD^%DT
"RTN","KMPVCCFG",154,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"SCHEDULED TIME")=Y
"RTN","KMPVCCFG",155,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"RESCHEDULE FREQUENCY")=$P(KMPVENT,"^",3)
"RTN","KMPVCCFG",156,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"QUEUEING FLAG")=$P(KMPVENT,"^",4)
"RTN","KMPVCCFG",157,0)
 Q
"RTN","KMPVCCFG",158,0)
 ;
"RTN","KMPVCCFG",159,0)
USERNAME(KMPVDUZ) ; Return users name from DUZ
"RTN","KMPVCCFG",160,0)
 N KMPVNAME,KMPVOUT
"RTN","KMPVCCFG",161,0)
 ; IA 10060 for lookup into NEW PERSON file
"RTN","KMPVCCFG",162,0)
 I +KMPVDUZ'>0 Q ""
"RTN","KMPVCCFG",163,0)
 D FIND^DIC(200,"","","A",KMPVDUZ,"","","","","KMPVOUT")
"RTN","KMPVCCFG",164,0)
 S KMPVNAME=$G(KMPVOUT("DILIST",1,1))
"RTN","KMPVCCFG",165,0)
 Q KMPVNAME
"RTN","KMPVCCFG",166,0)
 ;
"RTN","KMPVCCFG",167,0)
PROD() ; Return "Prod" if production, "Test" otherwise
"RTN","KMPVCCFG",168,0)
 N KMPVPROD
"RTN","KMPVCCFG",169,0)
 S KMPVPROD=$$PROD^XUPROD() ; IA 4440
"RTN","KMPVCCFG",170,0)
 S KMPVPROD=$S(KMPVPROD=1:"Prod",1:"Test")
"RTN","KMPVCCFG",171,0)
 Q KMPVPROD
"RTN","KMPVCCFG",172,0)
 ;
"RTN","KMPVCCFG",173,0)
SITEINFO() ;
"RTN","KMPVCCFG",174,0)
 N KMPVPROD,KMPVDOM,KMPVSITE,KMPVSCD,KMPVSINF
"RTN","KMPVCCFG",175,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCCFG",176,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVCCFG",177,0)
 S KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVCCFG",178,0)
 D GETENV^%ZOSV S KMPVSCD=$P(Y,U,1) ;  IA 10097
"RTN","KMPVCCFG",179,0)
 S KMPVSINF=$P(KMPVSITE,U,2)_"^"_$P(KMPVSITE,U,3)_"^"_KMPVDOM_"^"_KMPVPROD_"^"_KMPVSCD
"RTN","KMPVCCFG",180,0)
 Q KMPVSINF
"RTN","KMPVCCFG",181,0)
 ;
"RTN","KMPVCCFG",182,0)
SLOT(KMPTIME,KMPSINT,KMPTFORM) ;
"RTN","KMPVCCFG",183,0)
 ; NOTE: code in %ZOSVKR similar. All other VSM monitors call here.
"RTN","KMPVCCFG",184,0)
 N X,%T,%H,KMPSSEC,KMPSEC,X,KMPSLOT,KMPSTIME
"RTN","KMPVCCFG",185,0)
 S KMPSSEC=KMPSINT*60
"RTN","KMPVCCFG",186,0)
 I KMPTFORM="HOROLOG" D
"RTN","KMPVCCFG",187,0)
 .S KMPSEC=$P(KMPTIME,",",2)
"RTN","KMPVCCFG",188,0)
 I KMPTFORM="FILEMAN" D
"RTN","KMPVCCFG",189,0)
 .S X=KMPTIME D H^%DTC S KMPSEC=%T
"RTN","KMPVCCFG",190,0)
 .I KMPSEC>86399 S KMPSEC=86399
"RTN","KMPVCCFG",191,0)
 S KMPSLOT=KMPSEC\KMPSSEC
"RTN","KMPVCCFG",192,0)
 S KMPSTIME=KMPSLOT*KMPSSEC
"RTN","KMPVCCFG",193,0)
 Q KMPSTIME
"RTN","KMPVCCFG",194,0)
 ;
"RTN","KMPVCCFG",195,0)
ISBENODE(KMPNODE) ;
"RTN","KMPVCCFG",196,0)
 N RET,KMPINST,KMPNTYP
"RTN","KMPVCCFG",197,0)
 S RET=0
"RTN","KMPVCCFG",198,0)
 Q:$P(KMPNODE,":",2)="" -1
"RTN","KMPVCCFG",199,0)
 S KMPINST=$P(KMPNODE,":",2)
"RTN","KMPVCCFG",200,0)
 I $E(KMPINST,7,9)="SVR" S RET=1
"RTN","KMPVCCFG",201,0)
 Q RET
"RTN","KMPVCSRV")
0^5^B125192908
"RTN","KMPVCSRV",1,0)
KMPVCSRV ;SP/JML - VSM Server routine for VistA functions ;5/1/2017
"RTN","KMPVCSRV",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38;
"RTN","KMPVCSRV",3,0)
 ;
"RTN","KMPVCSRV",4,0)
 ;
"RTN","KMPVCSRV",5,0)
EN ;  Server routine entry point
"RTN","KMPVCSRV",6,0)
 ;
"RTN","KMPVCSRV",7,0)
 Q:'$G(XQMSG)
"RTN","KMPVCSRV",8,0)
 N XMZ,XMRG,XMER
"RTN","KMPVCSRV",9,0)
 S XMZ=XQMSG
"RTN","KMPVCSRV",10,0)
 S XQSUB=$G(XQSUB)
"RTN","KMPVCSRV",11,0)
 N KMPVCHKF,KMPVFNUM,KMPVFUNC,KMPVRQNAM,KMPVSITE,KMPVSNAME,KMPVTEXT
"RTN","KMPVCSRV",12,0)
 ;
"RTN","KMPVCSRV",13,0)
 S KMPVFUNC=$P(XQSUB,"^"),KMPVSNAME=$P(XQSUB,"^",2),KMPVFNUM=$P(XQSUB,"^",3),KMPVRQNAM=$P(XQSUB,"^",4)
"RTN","KMPVCSRV",14,0)
 S KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVCSRV",15,0)
 I KMPVSNAME'=$P(KMPVSITE,"^",2)!(KMPVFNUM'=$P(KMPVSITE,"^",3)) D  Q
"RTN","KMPVCSRV",16,0)
 .S KMPVTEXT="WARN^CLIENT REQUEST LOCATION MISMATCH^"
"RTN","KMPVCSRV",17,0)
 .S KMPVTEXT(1)="SITE DATA IN EMAIL: "_KMPVSNAME_"^"_KMPVFNUM
"RTN","KMPVCSRV",18,0)
 .S KMPVTEXT(2)="SITE DATA AT SITE: "_KMPVSITE
"RTN","KMPVCSRV",19,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",20,0)
 ; verify request is for valid function
"RTN","KMPVCSRV",21,0)
 S KMPVCHKF="^"_KMPVFUNC_"^"
"RTN","KMPVCSRV",22,0)
 I "^ACK^GETSTAT^RESEND^SETCFG^KMPUPDEF^CTMLOG^PACKUPDT^"'[KMPVCHKF D  Q
"RTN","KMPVCSRV",23,0)
 .S KMPVTEXT="WARN^CLIENT REQUEST INVALID FUNCTION^"
"RTN","KMPVCSRV",24,0)
 .S KMPVTEXT(1)="FUNCTION REQUEST="_KMPVFUNC
"RTN","KMPVCSRV",25,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",26,0)
 D @KMPVFUNC
"RTN","KMPVCSRV",27,0)
 Q
"RTN","KMPVCSRV",28,0)
 ; -- Tasks Via Email Requests --
"RTN","KMPVCSRV",29,0)
 ;
"RTN","KMPVCSRV",30,0)
ACK ; Receive acknowledge VSM receipt of VTCM data - delete from local node
"RTN","KMPVCSRV",31,0)
 N KMPVCDATE,KMPVTSTAT,KMPVMT,KMPPAR1
"RTN","KMPVCSRV",32,0)
 N XMER,XMRG
"RTN","KMPVCSRV",33,0)
 ; IA #10073
"RTN","KMPVCSRV",34,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",35,0)
 .I $P(XMRG,"=")="TRANSMISSION STATUS" S KMPVTSTAT=$P(XMRG,"=",2)
"RTN","KMPVCSRV",36,0)
 .I $P(XMRG,"=")="COLLECTION DATE" S KMPVCDATE=$P(XMRG,"=",2)
"RTN","KMPVCSRV",37,0)
 .I $P(XMRG,"=")="COLLECTION TYPE" S KMPVMKEY=$P(XMRG,"=",2)
"RTN","KMPVCSRV",38,0)
 .I $P(XMRG,"=")="PARAM 1" S KMPPAR1=$P(XMRG,"=",2)
"RTN","KMPVCSRV",39,0)
 Q:KMPVCDATE=""
"RTN","KMPVCSRV",40,0)
 I KMPVTSTAT="TRANSMISSION RECEIVED" D
"RTN","KMPVCSRV",41,0)
 .I KMPVMKEY="VTCM" K ^KMPTMP("KMPV","VTCM","DLY",KMPVCDATE)
"RTN","KMPVCSRV",42,0)
 .I KMPVMKEY="VSTM" K ^KMPTMP("KMPV","VSTM","DLY",KMPVCDATE)
"RTN","KMPVCSRV",43,0)
 .I KMPVMKEY="VMCM" K ^KMPTMP("KMPV","VMCM","DLY",KMPVCDATE)
"RTN","KMPVCSRV",44,0)
 .I KMPVMKEY="VBEM" K ^KMPTMP("KMPV","VBEM","COMPRESS",KMPVCDATE)
"RTN","KMPVCSRV",45,0)
 .I KMPVMKEY="VHLM" K ^KMPTMP("KMPV","VHLM","DLY",KMPVCDATE,KMPPAR1)
"RTN","KMPVCSRV",46,0)
 Q
"RTN","KMPVCSRV",47,0)
 ;
"RTN","KMPVCSRV",48,0)
GETSTAT ; Returns current status of VSM
"RTN","KMPVCSRV",49,0)
 N KMPVFLD,KMPVFNAM,KMPVLN,KMPVMKEY,KMPVSTAT,KMPVTEXT,KMPVTFLD,KMPVTNUM
"RTN","KMPVCSRV",50,0)
 D CFGMSG^KMPVCBG("SERVER-VSMSTAT")
"RTN","KMPVCSRV",51,0)
 Q
"RTN","KMPVCSRV",52,0)
 ;
"RTN","KMPVCSRV",53,0)
RESEND ;  Resend data for one or more monitors
"RTN","KMPVCSRV",54,0)
 N KMPVMKEY,KMPVML
"RTN","KMPVCSRV",55,0)
 N XMER,XMRG
"RTN","KMPVCSRV",56,0)
 ; IA #10073
"RTN","KMPVCSRV",57,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",58,0)
 .I $P(XMRG,"=")="CollectionType" D
"RTN","KMPVCSRV",59,0)
 ..S KMPVMKEY=$P(XMRG,"=",2)
"RTN","KMPVCSRV",60,0)
 ..I KMPVMKEY'="" S KMPVML(KMPVMKEY)=""
"RTN","KMPVCSRV",61,0)
 S KMPVMKEY=""
"RTN","KMPVCSRV",62,0)
 F  S KMPVMKEY=$O(KMPVML(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCSRV",63,0)
 .I KMPVMKEY="VBEM" D EN^KMPVBETR
"RTN","KMPVCSRV",64,0)
 .I KMPVMKEY="VTCM" D SEND^KMPVVTCM
"RTN","KMPVCSRV",65,0)
 .I KMPVMKEY="VSTM" D SEND^KMPVVSTM
"RTN","KMPVCSRV",66,0)
 .I KMPVMKEY="VMCM" D SEND^KMPVVMCM
"RTN","KMPVCSRV",67,0)
 .I KMPVMKEY="VHLM" D PREPARE^KMPVVHLM
"RTN","KMPVCSRV",68,0)
 Q
"RTN","KMPVCSRV",69,0)
 ;
"RTN","KMPVCSRV",70,0)
SETCFG() ; Change VSM configuration via national server change request
"RTN","KMPVCSRV",71,0)
 N KMPVCALL,KMPVCFG,KMPVCFGAR,KMPVFVAL,KMPVDATA,KMPVERR,KMPVFNAM,KMPVI,KMPVLN
"RTN","KMPVCSRV",72,0)
 N KMPVMKEY,KMPVSET,KMPVSTAT,KMPVTEXT,KMPVVAL,KMPVVALID,KMPVEARR
"RTN","KMPVCSRV",73,0)
 N FDA,XMER,XMRG
"RTN","KMPVCSRV",74,0)
 ;
"RTN","KMPVCSRV",75,0)
 S KMPVMKEY="NONE"
"RTN","KMPVCSRV",76,0)
 ; Read message text and attempt to update VSM configuration
"RTN","KMPVCSRV",77,0)
 ; IA #10073
"RTN","KMPVCSRV",78,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",79,0)
 .I $P(XMRG,"=")="MONITOR KEY" S KMPVMKEY=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",80,0)
 .Q:$P(XMRG,"=")'="UPDATE KMPCFG"
"RTN","KMPVCSRV",81,0)
 .S KMPVDATA=$P(XMRG,"=",2)
"RTN","KMPVCSRV",82,0)
 .S KMPVFNAM=$P(KMPVDATA,"^"),KMPVVAL=$P(KMPVDATA,"^",2)
"RTN","KMPVCSRV",83,0)
 .S KMPVFVAL(KMPVFNAM)=KMPVVAL
"RTN","KMPVCSRV",84,0)
 ;
"RTN","KMPVCSRV",85,0)
 ; verify Monitor Type is valid
"RTN","KMPVCSRV",86,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCSRV",87,0)
 I $G(KMPVIEN)="" D  Q
"RTN","KMPVCSRV",88,0)
 .S KMPVTEXT="Monitor "_KMPVMKEY_" not defined"
"RTN","KMPVCSRV",89,0)
 .S KMPVTEXT(1)="Monitor "_KMPVMKEY_"not defined. No changes made."
"RTN","KMPVCSRV",90,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",91,0)
 ;
"RTN","KMPVCSRV",92,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCSRV",93,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",94,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",95,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCSRV",96,0)
 .I KMPVFNUM>0 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",97,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCSRV",98,0)
 ;
"RTN","KMPVCSRV",99,0)
 ; If field name does not exist send message and quit
"RTN","KMPVCSRV",100,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",101,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: field(s) do not exist"
"RTN","KMPVCSRV",102,0)
 .S KMPVTEXT(1)="The following field(s) do not exist in the VSM CONFIGURATION file"
"RTN","KMPVCSRV",103,0)
 .S KMPVFNAM="",KMPVLN=2
"RTN","KMPVCSRV",104,0)
 .F  S KMPVFNAM=$O(KMPVEARR(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",105,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",106,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",107,0)
 ;
"RTN","KMPVCSRV",108,0)
 ; If still good get old values for logging changes
"RTN","KMPVCSRV",109,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",110,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",111,0)
 .S $P(KMPVFVAL(KMPVFNAM),"^",2)=$$GETVAL^KMPVCCFG(KMPVMKEY,KMPVFNAM,8969,"I")
"RTN","KMPVCSRV",112,0)
 ;
"RTN","KMPVCSRV",113,0)
 S KMPVLN=1
"RTN","KMPVCSRV",114,0)
 I $D(KMPVEARR) D  Q 
"RTN","KMPVCSRV",115,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: FILING ERRORS - NO CHANGES MADE"
"RTN","KMPVCSRV",116,0)
 .S KMPVTEXT(KMPVLN)="CONFIGURATION CHANGES NOT APPLIED!",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",117,0)
 .S KMPVTEXT(KMPVLN)="ERROR DETAILS: ",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",118,0)
 .S KMPVI=""
"RTN","KMPVCSRV",119,0)
 .F  S KMPVI=$O(KMPVEARR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",120,0)
 ..S KMPVTEXT(KMPVLN)=KMPVEARR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",121,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",122,0)
 ;
"RTN","KMPVCSRV",123,0)
 ; ATTEMPT TO MAKE CHANGES
"RTN","KMPVCSRV",124,0)
 K KMPVEARR
"RTN","KMPVCSRV",125,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCSRV",126,0)
 ; IF ERRORS SEND MESSAGE WITH ERRORS
"RTN","KMPVCSRV",127,0)
 I $D(KMPVEARR) D  ; Add filing errors to support message
"RTN","KMPVCSRV",128,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",129,0)
 .S KMPVTEXT(KMPVLN)="Changes NOT applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",130,0)
 .S KMPVTEXT(KMPVLN)="Number of errors: "_+KMPVEARR("DIERR"),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",131,0)
 .S KMPVENUM=""
"RTN","KMPVCSRV",132,0)
 .F  S KMPVENUM=$O(KMPVEARR("DIERR",KMPVENUM)) Q:+KMPVENUM=0  D
"RTN","KMPVCSRV",133,0)
 ..S KMPVTNUM=""
"RTN","KMPVCSRV",134,0)
 ..F  S KMPVTNUM=$O(KMPVEARR("DIERR",KMPVENUM,"TEXT",KMPVTNUM)) Q:+KMPVTNUM=0  D
"RTN","KMPVCSRV",135,0)
 ...S KMPVTEXT(KMPVLN)=KMPVEARR("DIERR",KMPVENUM,"TEXT",KMPVTNUM),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",136,0)
 ; If no FILING errors then list changes in Support Message and Log Changes
"RTN","KMPVCSRV",137,0)
 I '$D(KMPVEARR) D
"RTN","KMPVCSRV",138,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: No Errors"
"RTN","KMPVCSRV",139,0)
 .S KMPVTEXT(KMPVLN)="Changes applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",140,0)
 .S KMPVTEXT(KMPVLN)="CHANGED FIELDS:",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",141,0)
 .; list changes in Support Message
"RTN","KMPVCSRV",142,0)
 .S KMPVFNAM=""
"RTN","KMPVCSRV",143,0)
 .F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",144,0)
 ..S KMPVDATA=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",145,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM_"  :  "_$P(KMPVDATA,"^",2)_" --> "_$P(KMPVDATA,"^"),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",146,0)
 ;
"RTN","KMPVCSRV",147,0)
 ; if end state is 'ON' then re-schedule -- if 'OFF' then de-schedule
"RTN","KMPVCSRV",148,0)
 S KMPVON=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCSRV",149,0)
 I KMPVON="ON" D STARTMON^KMPVCBG(KMPVMKEY,1)
"RTN","KMPVCSRV",150,0)
 I KMPVON="OFF" D STOPMON^KMPVCBG(KMPVMKEY,1)
"RTN","KMPVCSRV",151,0)
 ;
"RTN","KMPVCSRV",152,0)
 ; Mail config back to National Server
"RTN","KMPVCSRV",153,0)
 D CFGMSG^KMPVCBG("SERVER-VSMCFG")
"RTN","KMPVCSRV",154,0)
 ; Mail results back to SUPPORT mail groups
"RTN","KMPVCSRV",155,0)
 D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",156,0)
 ;
"RTN","KMPVCSRV",157,0)
 Q
"RTN","KMPVCSRV",158,0)
 ;
"RTN","KMPVCSRV",159,0)
KMPUPDEF ; Update VSM MONITOR DEFAULTS file.  Optionally apply defaults to VSM CONFIGURATION file.
"RTN","KMPVCSRV",160,0)
 N KMPVADEF,KMPVDATA,KMPVEARR,KMPVENUM,KMPVFNAM,KMPVFVAL,KMPVI,KMPVIEN,KMPVIEN,KMPVLN,KMPVMKEY
"RTN","KMPVCSRV",161,0)
 N KMPVON,KMPVREST,KMPVTEXT,KMPVTNUM,KMPVVAL
"RTN","KMPVCSRV",162,0)
 N FDA,XMER,XMRG
"RTN","KMPVCSRV",163,0)
 ;
"RTN","KMPVCSRV",164,0)
 S KMPVMKEY="NONE"
"RTN","KMPVCSRV",165,0)
 ; Read message text to get data to change
"RTN","KMPVCSRV",166,0)
 ; IA #10073
"RTN","KMPVCSRV",167,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",168,0)
 .I $P(XMRG,"=")="MONITOR KEY" S KMPVMKEY=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",169,0)
 .I $P(XMRG,"=")="APPLY DEFAULTS" S KMPVADEF=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",170,0)
 .Q:$P(XMRG,"=")'="UPDATE KMPDEF"
"RTN","KMPVCSRV",171,0)
 .S KMPVDATA=$P(XMRG,"=",2)
"RTN","KMPVCSRV",172,0)
 .S KMPVFNAM=$P(KMPVDATA,"^"),KMPVVAL=$P(KMPVDATA,"^",2)
"RTN","KMPVCSRV",173,0)
 .S KMPVFVAL(KMPVFNAM)=KMPVVAL
"RTN","KMPVCSRV",174,0)
 ;
"RTN","KMPVCSRV",175,0)
 ; verify Monitor Type is valid
"RTN","KMPVCSRV",176,0)
 I $D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969.02,"B",KMPVMKEY,""))
"RTN","KMPVCSRV",177,0)
 I $G(KMPVIEN)="" D  Q
"RTN","KMPVCSRV",178,0)
 .S KMPVTEXT="Monitor "_KMPVMKEY_" not defined"
"RTN","KMPVCSRV",179,0)
 .S KMPVTEXT(1)="Monitor "_KMPVMKEY_"not defined. No changes made."
"RTN","KMPVCSRV",180,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",181,0)
 ;
"RTN","KMPVCSRV",182,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCSRV",183,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",184,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",185,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969.02,KMPVFNAM)
"RTN","KMPVCSRV",186,0)
 .I KMPVFNUM>0 S FDA($J,8969.02,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",187,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCSRV",188,0)
 ; If field name does not exist send message and quit
"RTN","KMPVCSRV",189,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",190,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: field(s) do not exist"
"RTN","KMPVCSRV",191,0)
 .S KMPVTEXT(1)="The following field(s) do not exist in the VSM MONITOR DEFAULTS file"
"RTN","KMPVCSRV",192,0)
 .S KMPVFNAM="",KMPVLN=2
"RTN","KMPVCSRV",193,0)
 .F  S KMPVFNAM=$O(KMPVEARR(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",194,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",195,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",196,0)
 ;
"RTN","KMPVCSRV",197,0)
 ; If still good get old values for logging changes
"RTN","KMPVCSRV",198,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",199,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",200,0)
 .S $P(KMPVFVAL(KMPVFNAM),"^",2)=$$GETVAL^KMPVCCFG(KMPVMKEY,KMPVFNAM,8969.02,"I")
"RTN","KMPVCSRV",201,0)
 ;
"RTN","KMPVCSRV",202,0)
 ; Update VSM MONITOR DEFAULTS file
"RTN","KMPVCSRV",203,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCSRV",204,0)
 ;
"RTN","KMPVCSRV",205,0)
 ; If filing errors send message and quit
"RTN","KMPVCSRV",206,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",207,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: Filing Errors",KMPVLN=1
"RTN","KMPVCSRV",208,0)
 .S KMPVI=0
"RTN","KMPVCSRV",209,0)
 .F  S KMPVI=$O(KMPVEARR("DIERR",KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",210,0)
 ..S KMPVTNUM=""
"RTN","KMPVCSRV",211,0)
 ..F  S KMPVTNUM=$O(KMPVEARR("DIERR",KMPVI,"TEXT",KMPVTNUM)) Q:KMPVTNUM=""  D
"RTN","KMPVCSRV",212,0)
 ...S KMPVTEXT(KMPVLN)=KMPVEARR("DIERR",KMPVI,"TEXT",KMPVTNUM),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",213,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",214,0)
 ;
"RTN","KMPVCSRV",215,0)
 ; If not applying defaults send SUPMSG and quit
"RTN","KMPVCSRV",216,0)
 I +$G(KMPVADEF)=0 D  Q
"RTN","KMPVCSRV",217,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: Successful"
"RTN","KMPVCSRV",218,0)
 .S KMPVTEXT(1)="Changes made to VSM MONITOR DEFAULTS file"
"RTN","KMPVCSRV",219,0)
 .S KMPVTEXT(2)="Changes not applied to VSM CONFIGURATION file"
"RTN","KMPVCSRV",220,0)
 .D CFGMSG^KMPVCBG("SERVER-VSMUPDEF")
"RTN","KMPVCSRV",221,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",222,0)
 .
"RTN","KMPVCSRV",223,0)
 ;
"RTN","KMPVCSRV",224,0)
 ; if applying defaults set defaults into VSM CONFIGURATION file
"RTN","KMPVCSRV",225,0)
 S KMPVLN=1
"RTN","KMPVCSRV",226,0)
 S KMPVTEXT(KMPVLN)="Changes successfully made to VSM MONITOR DEFAULTS file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",227,0)
 S KMPVSTAT=$$RESTCFG^KMPVCCFG(KMPVMKEY)
"RTN","KMPVCSRV",228,0)
 I KMPVSTAT=0 D
"RTN","KMPVCSRV",229,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: No Errors"
"RTN","KMPVCSRV",230,0)
 .S KMPVTEXT(KMPVLN)="Changes applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",231,0)
 I KMPVSTAT>0 D
"RTN","KMPVCSRV",232,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update:  WITH ERRORS"
"RTN","KMPVCSRV",233,0)
 .S KMPVTEXT(KMPVLN)="Changes NOT applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",234,0)
 ;
"RTN","KMPVCSRV",235,0)
 ; if end state is 'ON' then reschedule
"RTN","KMPVCSRV",236,0)
 S KMPVON=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCSRV",237,0)
 I KMPVON="ON" D
"RTN","KMPVCSRV",238,0)
 .D RESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",239,0)
 .I '$D(KMPVERR) S KMPVTEXT(KMPVLN)="Data Transmission task successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",240,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",241,0)
 ..S KMPVTEXT=KMPVMKEY_" Default Value Update: WITH ERRORS"
"RTN","KMPVCSRV",242,0)
 ..S KMPVTEXT(KMPVLN)="Data Transmission NOT successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",243,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",244,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",245,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",246,0)
 I KMPVON="OFF" D
"RTN","KMPVCSRV",247,0)
 .D DESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",248,0)
 .S KMPVTEXT(KMPVLN)="Data Transmission task successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",249,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",250,0)
 ..S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",251,0)
 ..S KMPVTEXT(KMPVLN-1)="Data Transmission NOT successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",252,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",253,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",254,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",255,0)
 ;
"RTN","KMPVCSRV",256,0)
 D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",257,0)
 Q
"RTN","KMPVCSRV",258,0)
 ;
"RTN","KMPVCSRV",259,0)
CTMLOG ; Return run history recorded in the VSM CACHE TASK LOG file
"RTN","KMPVCSRV",260,0)
 N KMPVMKEY,KMPVML,KMPVTEXT
"RTN","KMPVCSRV",261,0)
 N XMER
"RTN","KMPVCSRV",262,0)
 ;
"RTN","KMPVCSRV",263,0)
 S KMPVIEN=0,KMPVLN=1
"RTN","KMPVCSRV",264,0)
 S KMPVTEXT(KMPVLN)="Raw data from VSM CACHE TASK LOG file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",265,0)
 F  S KMPVIEN=$O(^KMPV(8969.03,KMPVIEN)) Q:+KMPVIEN=0  D
"RTN","KMPVCSRV",266,0)
 .S KMPVDATA=$G(^KMPV(8969.03,KMPVIEN,0))
"RTN","KMPVCSRV",267,0)
 .S KMPVTEXT(KMPVLN)=KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",268,0)
 S KMPVTEXT="Task Manager Run History for "_KMPVSITE
"RTN","KMPVCSRV",269,0)
 D DBAMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",270,0)
 Q
"RTN","KMPVCSRV",271,0)
 ;
"RTN","KMPVCSRV",272,0)
PACKUPDT ; Get data from PACKAGE file
"RTN","KMPVCSRV",273,0)
 N KMPVCNAM,KMPVCNS,KMPVDOM,KMPVEMAIL,KMPVIEN,KMPVIEN2,KMPVLN,KMPVPDATA,KMPVPNAM,KMPVPNS,KMPVPRE,KMPVPROD,KMPVSCD,KMPVSINF
"RTN","KMPVCSRV",274,0)
 N X,XMSUB,XMTEXT,XMY,XMZ,Y
"RTN","KMPVCSRV",275,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCSRV",276,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVCSRV",277,0)
 S KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVCSRV",278,0)
 D GETENV^%ZOSV S KMPVSCD=$P(Y,U,1) ;  IA 10097
"RTN","KMPVCSRV",279,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVCSRV",280,0)
 S XMSUB="VBEMPACK"
"RTN","KMPVCSRV",281,0)
 S KMPVPRE="",KMPVLN=1
"RTN","KMPVCSRV",282,0)
 S KMPVTEXT(KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",283,0)
 F  S KMPVPRE=$O(^DIC(9.4,"C",KMPVPRE)) Q:KMPVPRE=""  D
"RTN","KMPVCSRV",284,0)
 .S KMPVIEN=""
"RTN","KMPVCSRV",285,0)
 .; NO WAY TO DECIDE WHICH IS CORRECT SO TAKE FIRST - DON'T LOOP
"RTN","KMPVCSRV",286,0)
 .S KMPVIEN=$O(^DIC(9.4,"C",KMPVPRE,KMPVIEN)) Q:KMPVIEN=""  D
"RTN","KMPVCSRV",287,0)
 ..S KMPVPNAM=$P($G(^DIC(9.4,KMPVIEN,0)),"^") ;,KMPVCNAM=KMPVPNAM
"RTN","KMPVCSRV",288,0)
 ..S KMPVTEXT(KMPVLN)="PACKINFO="_KMPVPRE_"^"_KMPVPNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",289,0)
 S XMTEXT=$S($D(KMPVTEXT):"KMPVTEXT(",1:"No package data collected")
"RTN","KMPVCSRV",290,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VBEM","VSM CFG EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCSRV",291,0)
 D ^XMD
"RTN","KMPVCSRV",292,0)
 Q
"RTN","KMPVLM")
0^7^B24931836
"RTN","KMPVLM",1,0)
KMPVLM ;SP/JML - VSM List Manager Functions ;5/1/2017
"RTN","KMPVLM",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVLM",3,0)
 ;
"RTN","KMPVLM",4,0)
 ;
"RTN","KMPVLM",5,0)
EN ; Main entry point for VSM MANAGEMENT menu option
"RTN","KMPVLM",6,0)
 D EN^VALM("KMPV MANAGEMENT")
"RTN","KMPVLM",7,0)
 Q
"RTN","KMPVLM",8,0)
 ;
"RTN","KMPVLM",9,0)
HDR ; Header code
"RTN","KMPVLM",10,0)
 N KMPVHEAD,KMPVKEY,KMPVLN,KMPVML,KMPVMNUM,KMPVMSTR
"RTN","KMPVLM",11,0)
 D MONLIST^KMPVCBG(.KMPVML)
"RTN","KMPVLM",12,0)
 S KMPVLN=0
"RTN","KMPVLM",13,0)
 S VALMHDR(KMPVLN)="",KMPVLN=KMPVLN+1
"RTN","KMPVLM",14,0)
 S KMPVHEAD="VistA System Monitor(VSM) -- Status and Configuration"
"RTN","KMPVLM",15,0)
 S KMPVMNUM=(VALMWD-$L(KMPVHEAD))/2,$P(KMPVMSTR," ",KMPVMNUM)=""
"RTN","KMPVLM",16,0)
 S VALMHDR(KMPVLN)=KMPVMSTR_KMPVHEAD,KMPVLN=KMPVLN+1
"RTN","KMPVLM",17,0)
 S VALMHDR(KMPVLN)="",KMPVLN=KMPVLN+1
"RTN","KMPVLM",18,0)
 S KMPVKEY=0
"RTN","KMPVLM",19,0)
 F  S KMPVKEY=$O(KMPVML(KMPVKEY)) Q:KMPVKEY=""  D
"RTN","KMPVLM",20,0)
 .S VALMHDR(KMPVLN)=KMPVKEY_": "_KMPVML(KMPVKEY),KMPVLN=KMPVLN+1
"RTN","KMPVLM",21,0)
 Q
"RTN","KMPVLM",22,0)
 ;
"RTN","KMPVLM",23,0)
INIT ; Initialize variables and list array
"RTN","KMPVLM",24,0)
 D BUILD
"RTN","KMPVLM",25,0)
 Q
"RTN","KMPVLM",26,0)
 ;
"RTN","KMPVLM",27,0)
BUILD ; Build array with collector status information
"RTN","KMPVLM",28,0)
 N KMPVCOMP,KMPVDLY,KMPVMKEY,KMPVNEXT,KMPVSTAT,KMPVTCNT,KMPVTSK,KMPVX
"RTN","KMPVLM",29,0)
 ;
"RTN","KMPVLM",30,0)
 S VALMCNT=0
"RTN","KMPVLM",31,0)
 D MONSTAT^KMPVCCFG(.KMPVSTAT)
"RTN","KMPVLM",32,0)
 S KMPVMKEY=""
"RTN","KMPVLM",33,0)
 F  S KMPVMKEY=$O(KMPVSTAT(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVLM",34,0)
 .S VALMCNT=VALMCNT+1
"RTN","KMPVLM",35,0)
 .S KMPVX=""
"RTN","KMPVLM",36,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVMKEY,KMPVX,"Monitor")
"RTN","KMPVLM",37,0)
 .S KMPVX=$$SETFLD^VALM1($G(KMPVSTAT(KMPVMKEY,"ONOFF")),KMPVX,"Status")
"RTN","KMPVLM",38,0)
 .S KMPVX=$$SETFLD^VALM1($G(KMPVSTAT(KMPVMKEY,"LAST START TIME")),KMPVX,"LastTransmission")
"RTN","KMPVLM",39,0)
 .S KMPVDLY=$G(KMPVSTAT(KMPVMKEY,"DAILY NODE DAYS"))
"RTN","KMPVLM",40,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVDLY,KMPVX,"DLY")
"RTN","KMPVLM",41,0)
 .S KMPVCOMP=$S(KMPVMKEY="VBEM":$G(KMPVSTAT(KMPVMKEY,"COMPRESS NODE DAYS")),1:"NA")
"RTN","KMPVLM",42,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVCOMP,KMPVX,"COMP")
"RTN","KMPVLM",43,0)
 .S KMPVTSK="",KMPVTCNT=0,KMPVNEXT=""
"RTN","KMPVLM",44,0)
 .F  S KMPVTSK=$O(KMPVSTAT(KMPVMKEY,"BGTask",KMPVTSK)) Q:KMPVTSK=""  D
"RTN","KMPVLM",45,0)
 ..S KMPVTCNT=KMPVTCNT=1
"RTN","KMPVLM",46,0)
 ..S KMPVNEXT=$G(KMPVSTAT(KMPVMKEY,"BGTask",KMPVTSK,"SCHEDULED TIME"))
"RTN","KMPVLM",47,0)
 .I KMPVTCNT>1 S KMPVNEXT="Multiple!"
"RTN","KMPVLM",48,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVNEXT,KMPVX,"NextTransmission")
"RTN","KMPVLM",49,0)
 .D SET^VALM10(VALMCNT,KMPVX,VALMCNT)
"RTN","KMPVLM",50,0)
 .D RESTORE^VALM10(VALMCNT)
"RTN","KMPVLM",51,0)
 .I KMPVDLY>3 D FLDCTRL^VALM10(VALMCNT,"DLY",,1)
"RTN","KMPVLM",52,0)
 .I KMPVCOMP>3 D FLDCTRL^VALM10(VALMCNT,"COMP",,1)
"RTN","KMPVLM",53,0)
 .I KMPVSTAT(KMPVMKEY,"ONOFF")="On",KMPVNEXT="" D 
"RTN","KMPVLM",54,0)
 ..D FLDCTRL^VALM10(VALMCNT,"Status",,1),FLDCTRL^VALM10(VALMCNT,"NextTransmission",,1)
"RTN","KMPVLM",55,0)
 Q
"RTN","KMPVLM",56,0)
 ;
"RTN","KMPVLM",57,0)
STARTMON ; Supports List Manager protocol 'STRT Start Monitor' 
"RTN","KMPVLM",58,0)
 N KMPVMON
"RTN","KMPVLM",59,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",60,0)
 I KMPVMON'=-1 D STARTMON^KMPVCBG($P(KMPVMON,"^",2))
"RTN","KMPVLM",61,0)
 D REFRESH
"RTN","KMPVLM",62,0)
 Q
"RTN","KMPVLM",63,0)
 ;
"RTN","KMPVLM",64,0)
STOPMON ; Supports List Manager protocol 'STOP Stop Monitor'
"RTN","KMPVLM",65,0)
 N KMPVMON
"RTN","KMPVLM",66,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",67,0)
 I KMPVMON'=-1 D STOPMON^KMPVCBG($P(KMPVMON,"^",2))
"RTN","KMPVLM",68,0)
 D REFRESH
"RTN","KMPVLM",69,0)
 Q
"RTN","KMPVLM",70,0)
 ;
"RTN","KMPVLM",71,0)
VIEWCFG ; Supports List Manager protocol 'VIEW View CFG'
"RTN","KMPVLM",72,0)
 N KMPVMON,KMPVMDA
"RTN","KMPVLM",73,0)
 N DDSFILE,DR,DA
"RTN","KMPVLM",74,0)
 ;
"RTN","KMPVLM",75,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",76,0)
 I KMPVMON>0 D
"RTN","KMPVLM",77,0)
 .S DDSFILE=8969,DR="[KMPV VIEW CONFIGURATION]",DA=+KMPVMON
"RTN","KMPVLM",78,0)
 .D ^DDS
"RTN","KMPVLM",79,0)
 D REFRESH
"RTN","KMPVLM",80,0)
 Q
"RTN","KMPVLM",81,0)
 ;
"RTN","KMPVLM",82,0)
EDITCFG ; Supports List Manager protocol 'EDIT Edit CFG'
"RTN","KMPVLM",83,0)
 N KMPVMON,KMPVMDA,KMPVMKEY,KMPVOLD,KMPVNEW,KMPVFNAM,KMPVSET
"RTN","KMPVLM",84,0)
 N DDSFILE,DR,DA
"RTN","KMPVLM",85,0)
 ;
"RTN","KMPVLM",86,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",87,0)
 S KMPVMDA=+KMPVMON,KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",88,0)
 I KMPVMDA>0 D
"RTN","KMPVLM",89,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVOLD)
"RTN","KMPVLM",90,0)
 .S DDSFILE=8969,DR="[KMPV EDIT CONFIGURATION]",DA=+KMPVMDA
"RTN","KMPVLM",91,0)
 .D ^DDS
"RTN","KMPVLM",92,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVNEW)
"RTN","KMPVLM",93,0)
 .S KMPVFNAM="",KMPVSET=0
"RTN","KMPVLM",94,0)
 .F  S KMPVFNAM=$O(KMPVOLD(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVLM",95,0)
 ..I KMPVOLD(KMPVFNAM)'=$G(KMPVNEW(KMPVFNAM)) S KMPVSET=1
"RTN","KMPVLM",96,0)
 .I KMPVSET>0 D CFGMSG^KMPVCBG()
"RTN","KMPVLM",97,0)
 D REFRESH
"RTN","KMPVLM",98,0)
 Q
"RTN","KMPVLM",99,0)
 ;
"RTN","KMPVLM",100,0)
RESTCFG ; Supports List Manager protocol 'REST Restore CFG'
"RTN","KMPVLM",101,0)
 N KMPVMKEY,KMPVSTAT
"RTN","KMPVLM",102,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",103,0)
 I KMPVMON>0 D
"RTN","KMPVLM",104,0)
 .S KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",105,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVOLD)
"RTN","KMPVLM",106,0)
 .S KMPVSTAT=$$RESTCFG^KMPVCCFG(KMPVMKEY)
"RTN","KMPVLM",107,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVNEW)
"RTN","KMPVLM",108,0)
 .S KMPVFNAM="",KMPVSET=0
"RTN","KMPVLM",109,0)
 .F  S KMPVFNAM=$O(KMPVOLD(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVLM",110,0)
 ..I KMPVOLD(KMPVFNAM)'=$G(KMPVNEW(KMPVFNAM)) S KMPVSET=1
"RTN","KMPVLM",111,0)
 .I KMPVSET>0 D CFGMSG^KMPVCBG()
"RTN","KMPVLM",112,0)
 D REFRESH
"RTN","KMPVLM",113,0)
 Q
"RTN","KMPVLM",114,0)
 ;
"RTN","KMPVLM",115,0)
KILL(KMPVMKEY) ; Supports List Manager protocol 'DEL Delete Data
"RTN","KMPVLM",116,0)
 ; Emergency KILL of all data for a given monitor
"RTN","KMPVLM",117,0)
 N DIR,DTOUT,DUOUT,KMPVERR,KMPVLN,KMPVMKEY,KMPVMON,Y
"RTN","KMPVLM",118,0)
 ;
"RTN","KMPVLM",119,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",120,0)
 S KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",121,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="NO"
"RTN","KMPVLM",122,0)
 S DIR("?")="Answer YES to KILL all "_KMPVMKEY_" data."
"RTN","KMPVLM",123,0)
 S DIR("A")="Do you want to KILL all local "_KMPVMKEY_" data?"
"RTN","KMPVLM",124,0)
 S DIR("A",1)="This option is for emergency use only."
"RTN","KMPVLM",125,0)
 S DIR("A",2)="Data will be permanently DELETED and "_KMPVMKEY_" monitor will be STOPPED"
"RTN","KMPVLM",126,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVLM",127,0)
 I Y D
"RTN","KMPVLM",128,0)
 .K DIR
"RTN","KMPVLM",129,0)
 .K ^KMPTMP("KMPV",KMPVMKEY)
"RTN","KMPVLM",130,0)
 .D CANMESS^KMPVCBG("KILL",KMPVMKEY,$$SITE^VASITE,"") ;  IA 10112
"RTN","KMPVLM",131,0)
 .D STOPMON^KMPVCBG(KMPVMKEY,1)
"RTN","KMPVLM",132,0)
 D REFRESH
"RTN","KMPVLM",133,0)
 Q
"RTN","KMPVLM",134,0)
 ;
"RTN","KMPVLM",135,0)
PICKMON() ; Supports selection of Monitor Type for List Manager functions
"RTN","KMPVLM",136,0)
 N DIC,Y
"RTN","KMPVLM",137,0)
 W !
"RTN","KMPVLM",138,0)
 S DIC=8969,DIC(0)="QEA"
"RTN","KMPVLM",139,0)
 S DIC("A")="Choose Monitor Type: "
"RTN","KMPVLM",140,0)
 D ^DIC
"RTN","KMPVLM",141,0)
 Q Y
"RTN","KMPVLM",142,0)
 ;
"RTN","KMPVLM",143,0)
REFRESH ; Refresh display
"RTN","KMPVLM",144,0)
 DO BUILD
"RTN","KMPVLM",145,0)
 SET VALMBCK="R"
"RTN","KMPVLM",146,0)
 QUIT
"RTN","KMPVLM",147,0)
 ;
"RTN","KMPVLM",148,0)
HELP ; Help code
"RTN","KMPVLM",149,0)
 N X
"RTN","KMPVLM",150,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","KMPVLM",151,0)
 Q
"RTN","KMPVLM",152,0)
 ;
"RTN","KMPVLM",153,0)
EXIT ; Exit code
"RTN","KMPVLM",154,0)
 Q
"RTN","KMPVLM",155,0)
 ;
"RTN","KMPVLM",156,0)
EXPND ; Expand code
"RTN","KMPVLM",157,0)
 Q
"RTN","KMPVLM",158,0)
 ;
"RTN","KMPVPST2")
0^^B29687723
"RTN","KMPVPST2",1,0)
KMPVPST2 ;SP/JML - VSM VERSION 2 POST INSTALL ROUTINE ;5/1/2017
"RTN","KMPVPST2",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVPST2",3,0)
 ;
"RTN","KMPVPST2",4,0)
 ;
"RTN","KMPVPST2",5,0)
 N %DT,FDA,X,Y,KMPVDATE,KMPVERR,KMPOPT,KMPVERROR,KMPVTEXT,KMPVI
"RTN","KMPVPST2",6,0)
 N DA,DIC,DIE,DIK,DR
"RTN","KMPVPST2",7,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN
"RTN","KMPVPST2",8,0)
 S X="T",%DT="ESTX" D ^%DT S KMPVDATE=Y
"RTN","KMPVPST2",9,0)
 ;
"RTN","KMPVPST2",10,0)
 ; Delete VBEM, VMCM and VHLM entries in case of re-installation
"RTN","KMPVPST2",11,0)
 S DA=3,DIK="^KMPV(8969," D ^DIK
"RTN","KMPVPST2",12,0)
 S DA=3,DIK="^KMPV(8969.02," D ^DIK
"RTN","KMPVPST2",13,0)
 S DA=4,DIK="^KMPV(8969," D ^DIK
"RTN","KMPVPST2",14,0)
 S DA=4,DIK="^KMPV(8969.02," D ^DIK
"RTN","KMPVPST2",15,0)
 S DA=5,DIK="^KMPV(8969," D ^DIK
"RTN","KMPVPST2",16,0)
 S DA=5,DIK="^KMPV(8969.02," D ^DIK
"RTN","KMPVPST2",17,0)
 ; create entries in the VSM CONFIGURAION file for VBEM and VMCM
"RTN","KMPVPST2",18,0)
 ; VBEM
"RTN","KMPVPST2",19,0)
 S FDA($J,8969,"+3,",.01)="VBEM"
"RTN","KMPVPST2",20,0)
 S FDA($J,8969,"+3,",.02)=0
"RTN","KMPVPST2",21,0)
 S FDA($J,8969,"+3,",.03)="VISTA BUSINESS EVENT MONITOR"
"RTN","KMPVPST2",22,0)
 S FDA($J,8969,"+3,",.04)=1
"RTN","KMPVPST2",23,0)
 S FDA($J,8969,"+3,",.05)=KMPVDATE
"RTN","KMPVPST2",24,0)
 S FDA($J,8969,"+3,",1.01)=7
"RTN","KMPVPST2",25,0)
 S FDA($J,8969,"+3,",1.02)=15
"RTN","KMPVPST2",26,0)
 S FDA($J,8969,"+3,",1.03)=""
"RTN","KMPVPST2",27,0)
 S FDA($J,8969,"+3,",1.04)=0
"RTN","KMPVPST2",28,0)
 S FDA($J,8969,"+3,",1.05)="1D"
"RTN","KMPVPST2",29,0)
 S FDA($J,8969,"+3,",1.06)="T+1@0115"
"RTN","KMPVPST2",30,0)
 S FDA($J,8969,"+3,",1.07)="KMPV VBEM DATA TRANSMISSION"
"RTN","KMPVPST2",31,0)
 S FDA($J,8969,"+3,",3.01)="S.KMPV-VBEM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",32,0)
 S FDA($J,8969,"+3,",3.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",33,0)
 S FDA($J,8969,"+3,",3.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",34,0)
 ; VMCM
"RTN","KMPVPST2",35,0)
 S FDA($J,8969,"+4,",.01)="VMCM"
"RTN","KMPVPST2",36,0)
 S FDA($J,8969,"+4,",.02)=0
"RTN","KMPVPST2",37,0)
 S FDA($J,8969,"+4,",.03)="VISTA MESSAGE COUNT MONITOR"
"RTN","KMPVPST2",38,0)
 S FDA($J,8969,"+4,",.04)=1
"RTN","KMPVPST2",39,0)
 S FDA($J,8969,"+4,",.05)=KMPVDATE
"RTN","KMPVPST2",40,0)
 S FDA($J,8969,"+4,",1.01)=7
"RTN","KMPVPST2",41,0)
 S FDA($J,8969,"+4,",1.02)=15
"RTN","KMPVPST2",42,0)
 S FDA($J,8969,"+4,",1.03)="KMPVVMCM"
"RTN","KMPVPST2",43,0)
 S FDA($J,8969,"+4,",1.04)=0
"RTN","KMPVPST2",44,0)
 S FDA($J,8969,"+4,",1.05)="1D"
"RTN","KMPVPST2",45,0)
 S FDA($J,8969,"+4,",1.06)="T+1@0130"
"RTN","KMPVPST2",46,0)
 S FDA($J,8969,"+4,",1.07)="KMPV VMCM DATA TRANSMISSION"
"RTN","KMPVPST2",47,0)
 S FDA($J,8969,"+4,",3.01)="S.KMPV-VMCM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",48,0)
 S FDA($J,8969,"+4,",3.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",49,0)
 S FDA($J,8969,"+4,",3.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",50,0)
 ; VHLM
"RTN","KMPVPST2",51,0)
 S FDA($J,8969,"+5,",.01)="VHLM"
"RTN","KMPVPST2",52,0)
 S FDA($J,8969,"+5,",.02)=0
"RTN","KMPVPST2",53,0)
 S FDA($J,8969,"+5,",.03)="VISTA HL7 MONITOR"
"RTN","KMPVPST2",54,0)
 S FDA($J,8969,"+5,",.04)=1
"RTN","KMPVPST2",55,0)
 S FDA($J,8969,"+5,",.05)=KMPVDATE
"RTN","KMPVPST2",56,0)
 S FDA($J,8969,"+5,",1.01)=3
"RTN","KMPVPST2",57,0)
 S FDA($J,8969,"+5,",1.02)=720
"RTN","KMPVPST2",58,0)
 S FDA($J,8969,"+5,",1.03)=""
"RTN","KMPVPST2",59,0)
 S FDA($J,8969,"+5,",1.04)=0
"RTN","KMPVPST2",60,0)
 S FDA($J,8969,"+5,",1.05)="1D"
"RTN","KMPVPST2",61,0)
 S FDA($J,8969,"+5,",1.06)="T+1@02"
"RTN","KMPVPST2",62,0)
 S FDA($J,8969,"+5,",1.07)="KMPV VHLM DATA TRANSMISSION"
"RTN","KMPVPST2",63,0)
 S FDA($J,8969,"+5,",3.01)="S.KMPV-VHLM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",64,0)
 S FDA($J,8969,"+5,",3.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",65,0)
 S FDA($J,8969,"+5,",3.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",66,0)
 D UPDATE^DIE("","FDA($J)","ZIEN","KMPVERR")
"RTN","KMPVPST2",67,0)
 I $D(KMPVERR) W !!,"*** THERE WAS AN ERROR IN UPDATING THE 'VSM CONFIGURATION' FILE! ***"
"RTN","KMPVPST2",68,0)
 ;
"RTN","KMPVPST2",69,0)
 ; create entries in the VSM MONITOR DEFAULTS file for VBEM and VMCM
"RTN","KMPVPST2",70,0)
 ; VBEM
"RTN","KMPVPST2",71,0)
 S FDA($J,8969.02,"+3,",.01)="VBEM"
"RTN","KMPVPST2",72,0)
 S FDA($J,8969.02,"+3,",.02)=7
"RTN","KMPVPST2",73,0)
 S FDA($J,8969.02,"+3,",.03)=15
"RTN","KMPVPST2",74,0)
 S FDA($J,8969.02,"+3,",.04)=""
"RTN","KMPVPST2",75,0)
 S FDA($J,8969.02,"+3,",.05)=0
"RTN","KMPVPST2",76,0)
 S FDA($J,8969.02,"+3,",.06)="1D"
"RTN","KMPVPST2",77,0)
 S FDA($J,8969.02,"+3,",.07)="T+1@01"
"RTN","KMPVPST2",78,0)
 S FDA($J,8969.02,"+3,",.08)="KMPV VBEM DATA TRANSMISSION"
"RTN","KMPVPST2",79,0)
 S FDA($J,8969.02,"+3,",1.01)="S.KMPV-VBEM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",80,0)
 S FDA($J,8969.02,"+3,",1.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",81,0)
 S FDA($J,8969.02,"+3,",1.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",82,0)
 ; VMCM
"RTN","KMPVPST2",83,0)
 S FDA($J,8969.02,"+4,",.01)="VMCM"
"RTN","KMPVPST2",84,0)
 S FDA($J,8969.02,"+4,",.02)=7
"RTN","KMPVPST2",85,0)
 S FDA($J,8969.02,"+4,",.03)=15
"RTN","KMPVPST2",86,0)
 S FDA($J,8969.02,"+4,",.04)="KMPVVMCM"
"RTN","KMPVPST2",87,0)
 S FDA($J,8969.02,"+4,",.05)=0
"RTN","KMPVPST2",88,0)
 S FDA($J,8969.02,"+4,",.06)="1D"
"RTN","KMPVPST2",89,0)
 S FDA($J,8969.02,"+4,",.07)="T+1@01"
"RTN","KMPVPST2",90,0)
 S FDA($J,8969.02,"+4,",.08)="KMPV VMCM DATA TRANSMISSION"
"RTN","KMPVPST2",91,0)
 S FDA($J,8969.02,"+4,",1.01)="S.KMPV-VMCM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",92,0)
 S FDA($J,8969.02,"+4,",1.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",93,0)
 S FDA($J,8969.02,"+4,",1.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",94,0)
 ; VHLM
"RTN","KMPVPST2",95,0)
 S FDA($J,8969.02,"+5,",.01)="VHLM"
"RTN","KMPVPST2",96,0)
 S FDA($J,8969.02,"+5,",.02)=3
"RTN","KMPVPST2",97,0)
 S FDA($J,8969.02,"+5,",.03)=720
"RTN","KMPVPST2",98,0)
 S FDA($J,8969.02,"+5,",.04)=""
"RTN","KMPVPST2",99,0)
 S FDA($J,8969.02,"+5,",.05)=0
"RTN","KMPVPST2",100,0)
 S FDA($J,8969.02,"+5,",.06)="1D"
"RTN","KMPVPST2",101,0)
 S FDA($J,8969.02,"+5,",.07)="T+1@0130"
"RTN","KMPVPST2",102,0)
 S FDA($J,8969.02,"+5,",.08)="KMPV VHLM DATA TRANSMISSION"
"RTN","KMPVPST2",103,0)
 S FDA($J,8969.02,"+5,",1.01)="S.KMPV-VHLM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",104,0)
 S FDA($J,8969.02,"+5,",1.02)="G.CPE-CP-SUPPORT@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",105,0)
 S FDA($J,8969.02,"+5,",1.03)="S.KMPV-VSM-SERVER@VISTA.CPE.DOMAIN.EXT"
"RTN","KMPVPST2",106,0)
 D UPDATE^DIE("","FDA($J)","ZIEN","KMPVERR")
"RTN","KMPVPST2",107,0)
 I $D(KMPVERR) W !!,"*** THERE WAS AN ERROR IN UPDATING THE 'VSM MONITOR DEFAULTS' FILE! ***"
"RTN","KMPVPST2",108,0)
 ; make sure RUM is off
"RTN","KMPVPST2",109,0)
 S DIE=8989.3,DA=1,DR="300///NO" D ^DIE
"RTN","KMPVPST2",110,0)
 ;
"RTN","KMPVPST2",111,0)
 ; KMPV maintenance routines must be tasked
"RTN","KMPVPST2",112,0)
 N ZTDESC,ZTDTH,ZTIO,ZTRTN
"RTN","KMPVPST2",113,0)
 S ZTDTH=$H,ZTRTN="RESTART^KMPVPST2",ZTDESC="RESTART VTCM"
"RTN","KMPVPST2",114,0)
 S ZTIO="NULL"
"RTN","KMPVPST2",115,0)
 D ^%ZTLOAD
"RTN","KMPVPST2",116,0)
 Q
"RTN","KMPVPST2",117,0)
 ;
"RTN","KMPVPST2",118,0)
 ;
"RTN","KMPVPST2",119,0)
RESTART ; - Hang to let current routine stop - then restart VTCM collection
"RTN","KMPVPST2",120,0)
 N KMPVINT,KMPVI,KMPVJ,KMPVDATE,X,%DT,DIE,DA,DR
"RTN","KMPVPST2",121,0)
 ; Stop VTCM - Change VTCM version to 2, VersionInstallDate to today and CollectionInterval to 15
"RTN","KMPVPST2",122,0)
 D STOPMON^KMPVCBG("VTCM",1)
"RTN","KMPVPST2",123,0)
 ; Edit VSM CONFIGURATION file
"RTN","KMPVPST2",124,0)
 S DIE=8969,DA=1,DR=".04///2" D ^DIE
"RTN","KMPVPST2",125,0)
 S DIE=8969,DA=1,DR="1.02///15" D ^DIE
"RTN","KMPVPST2",126,0)
 S X="T",%DT="ESTX" D ^%DT S KMPVDATE=Y
"RTN","KMPVPST2",127,0)
 S DIE=8969,DA=1,DR=".05///"_KMPVDATE D ^DIE
"RTN","KMPVPST2",128,0)
 ; Edit VSM MONITOR DEFAULTS file
"RTN","KMPVPST2",129,0)
 S DIE=8969.02,DA=1,DR=".03///15" D ^DIE
"RTN","KMPVPST2",130,0)
 ; Remove KMPR BACKGROUND DRIVER from TaskMan
"RTN","KMPVPST2",131,0)
 D RESCH^XUTMOPT("KMPR BACKGROUND DRIVER","@",,,.KMPVERROR)
"RTN","KMPVPST2",132,0)
 ; WAIT for VTCM Monitor to exit
"RTN","KMPVPST2",133,0)
 S KMPVINT=$$GETVAL^KMPVCCFG("VTCM","COLLECTION INTERVAL",8969)
"RTN","KMPVPST2",134,0)
 H KMPVINT*60*2 ; collection interval in seconds doubled
"RTN","KMPVPST2",135,0)
 ; Kill existing VTCM Version 1 data - not compatible
"RTN","KMPVPST2",136,0)
 S KMPVI=""
"RTN","KMPVPST2",137,0)
 F  S KMPVI=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVI)) Q:KMPVI=""  D
"RTN","KMPVPST2",138,0)
 .K ^KMPTMP("KMPV","VTCM","DLY",KMPVI)
"RTN","KMPVPST2",139,0)
 ; Kill existing VMCM data - not compatible
"RTN","KMPVPST2",140,0)
 S KMPVJ=""
"RTN","KMPVPST2",141,0)
 F  S KMPVJ=$O(^KMPTMP("KMPV","VMCM","DLY",KMPVJ)) Q:KMPVJ=""  D
"RTN","KMPVPST2",142,0)
 .K ^KMPTMP("KMPV","VMCM","DLY",KMPVJ)
"RTN","KMPVPST2",143,0)
 ; start Monitors
"RTN","KMPVPST2",144,0)
 D STARTMON^KMPVCBG("VTCM",1)
"RTN","KMPVPST2",145,0)
 D STARTMON^KMPVCBG("VBEM",1)
"RTN","KMPVPST2",146,0)
 D STARTMON^KMPVCBG("VMCM",1)
"RTN","KMPVPST2",147,0)
 D STARTMON^KMPVCBG("VHLM",1)
"RTN","KMPVPST2",148,0)
 ; send package information
"RTN","KMPVPST2",149,0)
 D PACKUPDT^KMPVCSRV
"RTN","KMPVPST2",150,0)
 ; Send config message to nat'l server
"RTN","KMPVPST2",151,0)
 D CFGMSG^KMPVCBG()
"RTN","KMPVPST2",152,0)
 Q
"RTN","KMPVVHLM")
0^12^B195443115
"RTN","KMPVVHLM",1,0)
KMPVVHLM ;SP/JML - Collecthl7 Metrics for the VistA HL7 Monitor ;5/1/2017
"RTN","KMPVVHLM",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVVHLM",3,0)
 ;
"RTN","KMPVVHLM",4,0)
 ;
"RTN","KMPVVHLM",5,0)
 ;
"RTN","KMPVVHLM",6,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VHLM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVHLM",7,0)
 ;
"RTN","KMPVVHLM",8,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVHLM",9,0)
 ;  NOTE:  this routine is written to be tasked off daily at 2:00 AM via the VistA Task Manager.
"RTN","KMPVVHLM",10,0)
 ;
"RTN","KMPVVHLM",11,0)
 ; ^KMPTMP("KMPV","VHLM","DLY"... storage of data for current day
"RTN","KMPVVHLM",12,0)
 ; ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)............. temporary storage for daily VTCM data to be transmitted
"RTN","KMPVVHLM",13,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVHLM",14,0)
 ;   Data in "DLY" node:
"RTN","KMPVVHLM",15,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of receipt from server.
"RTN","KMPVVHLM",16,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVHLM",17,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVHLM",18,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVHLM",19,0)
 ;    
"RTN","KMPVVHLM",20,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVHLM",21,0)
 ; Data Read IAs
"RTN","KMPVVHLM",22,0)
 ; 6877 - Read access to HL7 MESSAGE TEXT file for capacity planning
"RTN","KMPVVHLM",23,0)
 ; 6878 - Read access to FILE 773 for capacity planning
"RTN","KMPVVHLM",24,0)
 ; 6882 - Read access to HLO MESSAGE BODY file for capacity planning
"RTN","KMPVVHLM",25,0)
 ; 6883 - Read access to HLO MESSAGES file for capacity planning
"RTN","KMPVVHLM",26,0)
 ;
"RTN","KMPVVHLM",27,0)
 N KMPVTEST,KMPSINT,KMPDAY,KMPVNODE,Y,KMPMT,KMPVHSTRT
"RTN","KMPVVHLM",28,0)
 S KMPVHSTRT=$H
"RTN","KMPVVHLM",29,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVHLM",30,0)
 D PURGEDLY^KMPVCBG("VHLM") ;
"RTN","KMPVVHLM",31,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVHLM",32,0)
 Q:$$GETVAL^KMPVCCFG("VHLM","ONOFF",8969)'="ON"
"RTN","KMPVVHLM",33,0)
 ; Check environment
"RTN","KMPVVHLM",34,0)
 S KMPVTEST=$$GETVAL^KMPVCCFG("VHLM","ALLOW TEST SYSTEM",8969,"I")
"RTN","KMPVVHLM",35,0)
 I $$PROD^KMPVCCFG'="Prod",KMPVTEST'=1 Q
"RTN","KMPVVHLM",36,0)
 S U="^"
"RTN","KMPVVHLM",37,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2) ;  IA 10097
"RTN","KMPVVHLM",38,0)
 ; Quit if not BE node or if Allow Test System is NO
"RTN","KMPVVHLM",39,0)
 I $$ISBENODE^KMPVCCFG(KMPVNODE)=0&(KMPVTEST=0) Q
"RTN","KMPVVHLM",40,0)
 ;
"RTN","KMPVVHLM",41,0)
 S KMPDAY=$$DT^XLFDT-1
"RTN","KMPVVHLM",42,0)
 D COLLECT(KMPDAY)
"RTN","KMPVVHLM",43,0)
 D STRSTP^KMPVCCFG("VHLM",KMPVHSTRT)
"RTN","KMPVVHLM",44,0)
 Q
"RTN","KMPVVHLM",45,0)
 ;
"RTN","KMPVVHLM",46,0)
COLLECT(KMPDAY) ;
"RTN","KMPVVHLM",47,0)
 S KMPSINT=$$GETVAL^KMPVCCFG("VHLM","COLLECTION INTERVAL",8969)
"RTN","KMPVVHLM",48,0)
 D AGGRAGAT(KMPDAY)
"RTN","KMPVVHLM",49,0)
 D PREPARE
"RTN","KMPVVHLM",50,0)
 Q
"RTN","KMPVVHLM",51,0)
 ;
"RTN","KMPVVHLM",52,0)
 ;
"RTN","KMPVVHLM",53,0)
AGGRAGAT(KMPDAY) ;
"RTN","KMPVVHLM",54,0)
 N KMPSTIME,KMPMDT,KMPEND,KMPI772,KMPI773,KMPMA0,KMPMSH,KMPMAS,KMPMAP,K7720,K772S,KMPDTTM,KMPTRAN,KMPPRI,KMPHTYP,KMPIEN,KMPLL,KMPSPROT,KMPEPROT,KMPAA,KMPHDAY
"RTN","KMPVVHLM",55,0)
 N KMPMTYP,KMPETYP,KMPD1,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE,KMPNS,KMPTCHAR,KMPTEVTS,KMPTTIME,KMPPTCA,KMPTAA,KMPTSENT,KMPCDAT,KMPDATA,KMPI,KMPSYNC,KMPTCA
"RTN","KMPVVHLM",56,0)
 ;
"RTN","KMPVVHLM",57,0)
 S X=KMPDAY D H^%DTC S KMPHDAY=%H
"RTN","KMPVVHLM",58,0)
 K ^KMPTMP("KMPV","VHLM","DLY",KMPHDAY)
"RTN","KMPVVHLM",59,0)
 S KMPMDT=KMPDAY-.000001
"RTN","KMPVVHLM",60,0)
 S KMPEND=KMPDAY+.999999
"RTN","KMPVVHLM",61,0)
 F  S KMPMDT=$O(^HL(772,"B",KMPMDT)) Q:KMPMDT=""!(KMPMDT>KMPEND)  D
"RTN","KMPVVHLM",62,0)
 .S KMPI772=0
"RTN","KMPVVHLM",63,0)
 .F  S KMPI772=$O(^HL(772,"B",KMPMDT,KMPI772)) Q:KMPI772=""  D
"RTN","KMPVVHLM",64,0)
 ..S KMPI773=""
"RTN","KMPVVHLM",65,0)
 ..F  S KMPI773=$O(^HLMA("B",KMPI772,KMPI773)) Q:KMPI773=""  D
"RTN","KMPVVHLM",66,0)
 ...S KMPMA0=$G(^HLMA(KMPI773,0)),KMPMSH=$G(^HLMA(KMPI773,"MSH",1,0))
"RTN","KMPVVHLM",67,0)
 ...S KMPMAS=$G(^HLMA(KMPI773,"S")),KMPMAP=$G(^HLMA(KMPI773,"P"))
"RTN","KMPVVHLM",68,0)
 ...S K7720=$G(^HL(772,KMPI772,0)),K772S=$G(^HL(772,KMPI772,"S"))
"RTN","KMPVVHLM",69,0)
 ...Q:$P(KMPMA0,"^",6)'=KMPI773  ; Has parent, Local,parent will be counted
"RTN","KMPVVHLM",70,0)
 ...S KMPDTTM=$P(K7720,U)
"RTN","KMPVVHLM",71,0)
 ...S KMPTRAN=$P(KMPMA0,U,3)
"RTN","KMPVVHLM",72,0)
 ...S KMPPRI=$P(KMPMA0,U,4)
"RTN","KMPVVHLM",73,0)
 ...S KMPHTYP=$P(KMPMA0,U,5) I KMPHTYP="" S KMPHTYP=$P(K7720,U,14)
"RTN","KMPVVHLM",74,0)
 ...S KMPLL="",KMPIEN=$P(KMPMA0,U,7) I KMPIEN'="" S KMPLL=$P($G(^HLCS(870,KMPIEN,0)),U)
"RTN","KMPVVHLM",75,0)
 ...S KMPIEN=$P(KMPMA0,U,8),KMPSPROT=$$GET1^DIQ(101,KMPIEN,.01,"","","")
"RTN","KMPVVHLM",76,0)
 ...S KMPIEN=$P(K7720,U,10),KMPEPROT=$$GET1^DIQ(101,KMPIEN,.01,"","","")
"RTN","KMPVVHLM",77,0)
 ...S KMPIEN=$P(KMPMA0,U,13),KMPMTYP="" I KMPIEN'="" S KMPMTYP=$P($G(^HL(771.2,KMPIEN,0)),U)
"RTN","KMPVVHLM",78,0)
 ...S KMPIEN=$P(KMPMA0,U,14),KMPETYP="" I KMPIEN'="" S KMPETYP=$P($G(^HL(779.001,KMPIEN,0)),U)
"RTN","KMPVVHLM",79,0)
 ...; parse out site info with correct delimiters
"RTN","KMPVVHLM",80,0)
 ...S KMPD1=$E(KMPMSH,4),KMPDELS=$P(KMPMSH,KMPD1,2),KMPD2=$E(KMPDELS,1)
"RTN","KMPVVHLM",81,0)
 ...S KMPSAPP=$P(KMPMSH,KMPD1,3),KMPRAPP=$P(KMPMSH,KMPD1,5)
"RTN","KMPVVHLM",82,0)
 ...S KMPSEND=$P(KMPMSH,KMPD1,4),KMPSNUM=$P(KMPSEND,KMPD2),KMPSFQDN=$P(KMPSEND,KMPD2,2),KMPSDNS=$P(KMPSEND,KMPD2,3)
"RTN","KMPVVHLM",83,0)
 ...S KMPSSITE=KMPSNUM_"~"_KMPSFQDN_"~"_KMPSDNS
"RTN","KMPVVHLM",84,0)
 ...S KMPREC=$P(KMPMSH,KMPD1,6),KMPRNUM=$P(KMPREC,KMPD2),KMPRFQDN=$P(KMPREC,KMPD2,2),KMPRDNS=$P(KMPREC,KMPD2,3)
"RTN","KMPVVHLM",85,0)
 ...S KMPRSITE=KMPRNUM_"~"_KMPRFQDN_"~"_KMPRDNS
"RTN","KMPVVHLM",86,0)
 ...;
"RTN","KMPVVHLM",87,0)
 ...S KMPAA=$P(KMPMSH,KMPD1,16),KMPSYNC=$S(KMPAA="AL":"SYNC",1:"ASYNC")
"RTN","KMPVVHLM",88,0)
 ...S KMPNS=$P(K7720,U,13),KMPTCHAR=$P(K772S,U)+$L(KMPMSH)
"RTN","KMPVVHLM",89,0)
 ...S KMPTEVTS=$P(K772S,U,2),KMPTTIME=$P(K772S,U,3)
"RTN","KMPVVHLM",90,0)
 ...S (KMPTCA,KMPTAA)=""
"RTN","KMPVVHLM",91,0)
 ...S KMPTSENT=$P(KMPMAS,U,3)
"RTN","KMPVVHLM",92,0)
 ...I KMPTSENT'="" D
"RTN","KMPVVHLM",93,0)
 ....S KMPTCA=$P(KMPMAS,U,4),KMPTAA=$P(KMPMAS,U,5)
"RTN","KMPVVHLM",94,0)
 ....S KMPTCA=$$FMDIFF^XLFDT(KMPTCA,KMPTSENT,2)
"RTN","KMPVVHLM",95,0)
 ....S KMPTAA=$$FMDIFF^XLFDT(KMPTAA,KMPTSENT,2)
"RTN","KMPVVHLM",96,0)
 ...S KMPCDAT=1_U_KMPTCHAR_U_KMPTEVTS_U_KMPTTIME_U_KMPTCA_U_KMPTAA
"RTN","KMPVVHLM",97,0)
 ...; GET SLOT TIME
"RTN","KMPVVHLM",98,0)
 ...S KMPSTIME=$$SLOT^KMPVCCFG(KMPMDT,KMPSINT,"FILEMAN")
"RTN","KMPVVHLM",99,0)
 ...; Can't be null
"RTN","KMPVVHLM",100,0)
 ...F KMPVAR="KMPTRAN","KMPPRI","KMPHTYP","KMPLL","KMPSPROT","KMPEPROT","KMPMTYP","KMPETYP","KMPSAPP","KMPRAPP","KMPSSITE","KMPRSITE" I @KMPVAR="" S @KMPVAR="X"
"RTN","KMPVVHLM",101,0)
 ...; SET DATA
"RTN","KMPVVHLM",102,0)
 ...I KMPSYNC="ASYNC" D
"RTN","KMPVVHLM",103,0)
 ....S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"ASYNC",KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE))
"RTN","KMPVVHLM",104,0)
 ....F KMPI=1:1:4 S $P(KMPDATA,U,KMPI)=$P(KMPDATA,U,KMPI)+$P(KMPCDAT,U,KMPI)
"RTN","KMPVVHLM",105,0)
 ....S ^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"ASYNC",KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE)=KMPDATA
"RTN","KMPVVHLM",106,0)
 ...I KMPSYNC="SYNC" D
"RTN","KMPVVHLM",107,0)
 ....S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"SYNC",KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE))
"RTN","KMPVVHLM",108,0)
 ....F KMPI=1:1:6 S $P(KMPDATA,U,KMPI)=$P(KMPDATA,U,KMPI)+$P(KMPCDAT,U,KMPI)
"RTN","KMPVVHLM",109,0)
 ....S ^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"SYNC",KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE)=KMPDATA
"RTN","KMPVVHLM",110,0)
 ; Aggragate HLO data
"RTN","KMPVVHLM",111,0)
 N KI,KMPADT,KMPAMEVT,KMPAMTYP,KMPD1,KMPD2,KMPDELS,KMPDIR,KMPHLA,KMPHLA0,KMPHLB,KMPHLB0,KMPMLEN,KMPMSH,KMPQUE,KMPRDNS,KMPREC,KMPRFQDN,KMPRNUM,KMPSDNS
"RTN","KMPVVHLM",112,0)
 N KMPSEND,KMPSFQDN,KMPSNUM,KMPTLEN,KMPTYP,KMPVAR
"RTN","KMPVVHLM",113,0)
 S KMPMDT=KMPDAY-.000001
"RTN","KMPVVHLM",114,0)
 S KMPEND=KMPDAY+.999999
"RTN","KMPVVHLM",115,0)
 F  S KMPMDT=$O(^HLA("B",KMPMDT)) Q:KMPMDT=""!(KMPMDT>KMPEND)  D
"RTN","KMPVVHLM",116,0)
 .S KMPHLA=0
"RTN","KMPVVHLM",117,0)
 .F  S KMPHLA=$O(^HLA("B",KMPMDT,KMPHLA)) Q:KMPHLA=""  D
"RTN","KMPVVHLM",118,0)
 ..S KMPHLB=""
"RTN","KMPVVHLM",119,0)
 ..F  S KMPHLB=$O(^HLB("C",KMPHLA,KMPHLB)) Q:KMPHLB=""  D
"RTN","KMPVVHLM",120,0)
 ...S KMPHLA0=$G(^HLA(KMPHLA,0))
"RTN","KMPVVHLM",121,0)
 ...S KMPHLB0=$G(^HLB(KMPHLB,0))
"RTN","KMPVVHLM",122,0)
 ...;
"RTN","KMPVVHLM",123,0)
 ...S KMPMLEN=0,KI=0 ; CALCULATE TOTAL LENGTH OF MESSAGE BODY
"RTN","KMPVVHLM",124,0)
 ...F  S KI=$O(^HLA(KMPHLA,1,KI)) Q:KI=""  S KMPMLEN=KMPMLEN+$L(^HLA(KMPHLA,1,KI,0))
"RTN","KMPVVHLM",125,0)
 ...S KMPMSH=^HLB(KMPHLB,1)_^HLB(KMPHLB,2)
"RTN","KMPVVHLM",126,0)
 ...S KMPTLEN=KMPMLEN+$L(KMPMSH)
"RTN","KMPVVHLM",127,0)
 ...; fields from HLA - (required) 
"RTN","KMPVVHLM",128,0)
 ...S KMPADT=$P(KMPHLA0,"^"),KMPAMTYP=$P(KMPHLA0,"^",3),KMPAMEVT=$P(KMPHLA0,"^",4)
"RTN","KMPVVHLM",129,0)
 ...; fields from HLB
"RTN","KMPVVHLM",130,0)
 ...S KMPTYP=$S($P(KMPHLB0,"^",3)="":"PRIME",1:"ACK")
"RTN","KMPVVHLM",131,0)
 ...S KMPDIR=$P(KMPHLB0,"^",4),KMPLL=$P(KMPHLB0,"^",5),KMPQUE=$P(KMPHLB0,"^",6)
"RTN","KMPVVHLM",132,0)
 ...; fields from MSH Header
"RTN","KMPVVHLM",133,0)
 ...S KMPD1=$E(KMPMSH,4),KMPDELS=$P(KMPMSH,KMPD1,2),KMPD2=$E(KMPDELS,1)
"RTN","KMPVVHLM",134,0)
 ...S KMPSAPP=$P(KMPMSH,KMPD1,3),KMPRAPP=$P(KMPMSH,KMPD1,5)
"RTN","KMPVVHLM",135,0)
 ...; parse out site info with correct delimiters
"RTN","KMPVVHLM",136,0)
 ...S KMPSEND=$P(KMPMSH,KMPD1,4),KMPSNUM=$P(KMPSEND,KMPD2),KMPSFQDN=$P(KMPSEND,KMPD2,2),KMPSDNS=$P(KMPSEND,KMPD2,3)
"RTN","KMPVVHLM",137,0)
 ...S KMPSSITE=KMPSNUM_"~"_KMPSFQDN_"~"_KMPSDNS
"RTN","KMPVVHLM",138,0)
 ...S KMPREC=$P(KMPMSH,KMPD1,6),KMPRNUM=$P(KMPREC,KMPD2),KMPRFQDN=$P(KMPREC,KMPD2,2),KMPRDNS=$P(KMPREC,KMPD2,3)
"RTN","KMPVVHLM",139,0)
 ...S KMPRSITE=KMPRNUM_"~"_KMPRFQDN_"~"_KMPRDNS
"RTN","KMPVVHLM",140,0)
 ...S KMPAA=$P(KMPMSH,KMPD1,16),KMPSYNC=$S(KMPAA="AL":"SYNCH",1:"ASYNC")
"RTN","KMPVVHLM",141,0)
 ...; GET SLOT TIME
"RTN","KMPVVHLM",142,0)
 ...S KMPSTIME=$$SLOT^KMPVCCFG(KMPADT,KMPSINT,"FILEMAN")
"RTN","KMPVVHLM",143,0)
 ...; can't be null
"RTN","KMPVVHLM",144,0)
 ...F KMPVAR="KMPSYNC","KMPTYP","KMPDIR","KMPAMTYP","KMPAMEVT","KMPLL","KMPQUE","KMPSAPP","KMPSSITE","KMPRAPP","KMPRSITE" I @KMPVAR="" S @KMPVAR="X"
"RTN","KMPVVHLM",145,0)
 ...S KMPCDAT=1_U_KMPTLEN
"RTN","KMPVVHLM",146,0)
 ...S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"HLO",KMPSTIME,KMPSYNC,KMPTYP,KMPDIR,KMPAMTYP,KMPAMEVT,KMPLL,KMPQUE,KMPSAPP,KMPSSITE,KMPRAPP,KMPRSITE))
"RTN","KMPVVHLM",147,0)
 ...F KMPI=1:1:2 S $P(KMPDATA,U,KMPI)=$P(KMPDATA,U,KMPI)+$P(KMPCDAT,U,KMPI)
"RTN","KMPVVHLM",148,0)
 ...S ^KMPTMP("KMPV","VHLM","DLY",KMPHDAY,"HLO",KMPSTIME,KMPSYNC,KMPTYP,KMPDIR,KMPAMTYP,KMPAMEVT,KMPLL,KMPQUE,KMPSAPP,KMPSSITE,KMPRAPP,KMPRSITE)=KMPCDAT
"RTN","KMPVVHLM",149,0)
 Q
"RTN","KMPVVHLM",150,0)
PREPARE ; PUT DATA INTO FORM FOR SENDING
"RTN","KMPVVHLM",151,0)
 ; 
"RTN","KMPVVHLM",152,0)
 N K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,KMPLNST,KMPTMP
"RTN","KMPVVHLM",153,0)
 N KMPVHSTRT,KMPVHTODAY,KMPVSITE,KMPVLAST,X,KMPVHLAST,KMPVKEEP,KMPVSINF,KMPVHDAY,KMPVHYDAY,KMPVFMDAY,KMPVWD,KMPVRT,KMPVLN,KMPSET
"RTN","KMPVVHLM",154,0)
 ;
"RTN","KMPVVHLM",155,0)
 N %H
"RTN","KMPVVHLM",156,0)
 K ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)
"RTN","KMPVVHLM",157,0)
 I $G(KMPVHSTRT)="" S KMPVHSTRT=$H
"RTN","KMPVVHLM",158,0)
 S KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVHLM",159,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVHLM",160,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VHLM","LAST START TIME",8969,"I")
"RTN","KMPVVHLM",161,0)
 I KMPVLAST'="" D
"RTN","KMPVVHLM",162,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVHLM",163,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VHLM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVHLM",164,0)
 ;
"RTN","KMPVVHLM",165,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VHLM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVHLM",166,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVVHLM",167,0)
 S KMPVHDAY=""
"RTN","KMPVVHLM",168,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY)) Q:KMPVHDAY=""!(KMPVHDAY>KMPVHYDAY)  D
"RTN","KMPVVHLM",169,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVHLM",170,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVHLM",171,0)
 ..D CANMESS^KMPVCBG("DELETE","VHLM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY)
"RTN","KMPVVHLM",172,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVHLM",173,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVHLM",174,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVHLM",175,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVHLM",176,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVHLM",177,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VHLM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVHLM",178,0)
 .;
"RTN","KMPVVHLM",179,0)
 .; PREPARE HEADER NODES
"RTN","KMPVVHLM",180,0)
 .S KMPTMP(1)="SYSTEM ID="_KMPVSINF
"RTN","KMPVVHLM",181,0)
 .S KMPTMP(2)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY"
"RTN","KMPVVHLM",182,0)
 .S KMPTMP(3)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG()
"RTN","KMPVVHLM",183,0)
 .S KMPTMP(4)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VHLM")
"RTN","KMPVVHLM",184,0)
 .S KMPTMP(5)="RETRANSMISSION="_KMPVRT
"RTN","KMPVVHLM",185,0)
 .S KMPLNST=7
"RTN","KMPVVHLM",186,0)
 .K ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)
"RTN","KMPVVHLM",187,0)
 .S KMPVLN=KMPLNST ; SET HEADER NODES ONLY IF THERE IS DATA
"RTN","KMPVVHLM",188,0)
 .S K1=""
"RTN","KMPVVHLM",189,0)
 .F  S K1=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1)) Q:K1=""  D
"RTN","KMPVVHLM",190,0)
 ..S K2=""
"RTN","KMPVVHLM",191,0)
 ..F  S K2=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2)) Q:K2=""  D
"RTN","KMPVVHLM",192,0)
 ...S K3=""
"RTN","KMPVVHLM",193,0)
 ...F  S K3=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3)) Q:K3=""  D
"RTN","KMPVVHLM",194,0)
 ....S K4=""
"RTN","KMPVVHLM",195,0)
 ....F  S K4=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4)) Q:K4=""  D
"RTN","KMPVVHLM",196,0)
 .....S K5=""
"RTN","KMPVVHLM",197,0)
 .....F  S K5=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5)) Q:K5=""  D
"RTN","KMPVVHLM",198,0)
 ......S K6=""
"RTN","KMPVVHLM",199,0)
 ......F  S K6=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6)) Q:K6=""  D
"RTN","KMPVVHLM",200,0)
 .......S K7=""
"RTN","KMPVVHLM",201,0)
 .......F  S K7=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7)) Q:K7=""  D
"RTN","KMPVVHLM",202,0)
 ........S K8=""
"RTN","KMPVVHLM",203,0)
 ........F  S K8=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8)) Q:K8=""  D
"RTN","KMPVVHLM",204,0)
 .........S K9=""
"RTN","KMPVVHLM",205,0)
 .........F  S K9=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9)) Q:K9=""  D
"RTN","KMPVVHLM",206,0)
 ..........S K10=""
"RTN","KMPVVHLM",207,0)
 ..........F  S K10=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10)) Q:K10=""  D
"RTN","KMPVVHLM",208,0)
 ...........S K11=""
"RTN","KMPVVHLM",209,0)
 ...........F  S K11=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11)) Q:K11=""  D
"RTN","KMPVVHLM",210,0)
 ............S K12=""
"RTN","KMPVVHLM",211,0)
 ............F  S K12=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12)) Q:K12=""  D
"RTN","KMPVVHLM",212,0)
 .............S K13=""
"RTN","KMPVVHLM",213,0)
 .............F  S K13=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13)) Q:K13=""  D
"RTN","KMPVVHLM",214,0)
 ..............S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"ASYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13))
"RTN","KMPVVHLM",215,0)
 ..............S KMPSET=K1_U_K2_U_K3_U_K4_U_K5_U_K6_U_K7_U_K8_U_K9_U_K10_U_K11_U_K12_U_K13_U_KMPDATA
"RTN","KMPVVHLM",216,0)
 ..............S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"ASYNC",KMPVLN)="VHLM DATA="_KMPSET,KMPVLN=KMPVLN+1
"RTN","KMPVVHLM",217,0)
 .I $D(^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"ASYNC")) D
"RTN","KMPVVHLM",218,0)
 ..M ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"ASYNC")=KMPTMP
"RTN","KMPVVHLM",219,0)
 ..S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"ASYNC",6)="MESSAGE TYPE=ASYNC"
"RTN","KMPVVHLM",220,0)
 ..D TRANSMIT("ASYNC")
"RTN","KMPVVHLM",221,0)
 .;
"RTN","KMPVVHLM",222,0)
 .K ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)
"RTN","KMPVVHLM",223,0)
 .S KMPVLN=KMPLNST
"RTN","KMPVVHLM",224,0)
 .S K1=""
"RTN","KMPVVHLM",225,0)
 .F  S K1=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1)) Q:K1=""  D
"RTN","KMPVVHLM",226,0)
 ..S K2=""
"RTN","KMPVVHLM",227,0)
 ..F  S K2=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2)) Q:K2=""  D
"RTN","KMPVVHLM",228,0)
 ...S K3=""
"RTN","KMPVVHLM",229,0)
 ...F  S K3=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3)) Q:K3=""  D
"RTN","KMPVVHLM",230,0)
 ....S K4=""
"RTN","KMPVVHLM",231,0)
 ....F  S K4=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4)) Q:K4=""  D
"RTN","KMPVVHLM",232,0)
 .....S K5=""
"RTN","KMPVVHLM",233,0)
 .....F  S K5=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5)) Q:K5=""  D
"RTN","KMPVVHLM",234,0)
 ......S K6=""
"RTN","KMPVVHLM",235,0)
 ......F  S K6=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6)) Q:K6=""  D
"RTN","KMPVVHLM",236,0)
 .......S K7=""
"RTN","KMPVVHLM",237,0)
 .......F  S K7=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7)) Q:K7=""  D
"RTN","KMPVVHLM",238,0)
 ........S K8=""
"RTN","KMPVVHLM",239,0)
 ........F  S K8=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8)) Q:K8=""  D
"RTN","KMPVVHLM",240,0)
 .........S K9=""
"RTN","KMPVVHLM",241,0)
 .........F  S K9=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9)) Q:K9=""  D
"RTN","KMPVVHLM",242,0)
 ..........S K10=""
"RTN","KMPVVHLM",243,0)
 ..........F  S K10=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10)) Q:K10=""  D
"RTN","KMPVVHLM",244,0)
 ...........S K11=""
"RTN","KMPVVHLM",245,0)
 ...........F  S K11=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11)) Q:K11=""  D
"RTN","KMPVVHLM",246,0)
 ............S K12=""
"RTN","KMPVVHLM",247,0)
 ............F  S K12=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12)) Q:K12=""  D
"RTN","KMPVVHLM",248,0)
 .............S K13=""
"RTN","KMPVVHLM",249,0)
 .............F  S K13=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13)) Q:K13=""  D
"RTN","KMPVVHLM",250,0)
 ..............S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"SYNC",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13))
"RTN","KMPVVHLM",251,0)
 ..............S KMPSET=K1_U_K2_U_K3_U_K4_U_K5_U_K6_U_K7_U_K8_U_K9_U_K10_U_K11_U_K12_U_K13_U_KMPDATA
"RTN","KMPVVHLM",252,0)
 ..............S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"SYNC",KMPVLN)="VHLM DATA="_KMPSET,KMPVLN=KMPVLN+1
"RTN","KMPVVHLM",253,0)
 .I $D(^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"SYNC")) D
"RTN","KMPVVHLM",254,0)
 ..M ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"SYNC")=KMPTMP
"RTN","KMPVVHLM",255,0)
 ..S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"SYNC",6)="MESSAGE TYPE=SYNC"
"RTN","KMPVVHLM",256,0)
 ..D TRANSMIT("SYNC")
"RTN","KMPVVHLM",257,0)
 .;
"RTN","KMPVVHLM",258,0)
 .K ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)
"RTN","KMPVVHLM",259,0)
 .S KMPVLN=KMPLNST
"RTN","KMPVVHLM",260,0)
 .S K1=""
"RTN","KMPVVHLM",261,0)
 .F  S K1=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1)) Q:K1=""  D
"RTN","KMPVVHLM",262,0)
 ..S K2=""
"RTN","KMPVVHLM",263,0)
 ..F  S K2=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2)) Q:K2=""  D
"RTN","KMPVVHLM",264,0)
 ...S K3=""
"RTN","KMPVVHLM",265,0)
 ...F  S K3=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3)) Q:K3=""  D
"RTN","KMPVVHLM",266,0)
 ....S K4=""
"RTN","KMPVVHLM",267,0)
 ....F  S K4=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4)) Q:K4=""  D
"RTN","KMPVVHLM",268,0)
 .....S K5=""
"RTN","KMPVVHLM",269,0)
 .....F  S K5=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5)) Q:K5=""  D
"RTN","KMPVVHLM",270,0)
 ......S K6=""
"RTN","KMPVVHLM",271,0)
 ......F  S K6=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6)) Q:K6=""  D
"RTN","KMPVVHLM",272,0)
 .......S K7=""
"RTN","KMPVVHLM",273,0)
 .......F  S K7=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7)) Q:K7=""  D
"RTN","KMPVVHLM",274,0)
 ........S K8=""
"RTN","KMPVVHLM",275,0)
 ........F  S K8=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8)) Q:K8=""  D
"RTN","KMPVVHLM",276,0)
 .........S K9=""
"RTN","KMPVVHLM",277,0)
 .........F  S K9=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8,K9)) Q:K9=""  D
"RTN","KMPVVHLM",278,0)
 ..........S K10=""
"RTN","KMPVVHLM",279,0)
 ..........F  S K10=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10)) Q:K10=""  D
"RTN","KMPVVHLM",280,0)
 ...........S K11=""
"RTN","KMPVVHLM",281,0)
 ...........F  S K11=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11)) Q:K11=""  D
"RTN","KMPVVHLM",282,0)
 ............S K12=""
"RTN","KMPVVHLM",283,0)
 ............F  S K12=$O(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12)) Q:K12=""  D
"RTN","KMPVVHLM",284,0)
 .............S KMPDATA=$G(^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,"HLO",K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12))
"RTN","KMPVVHLM",285,0)
 .............S KMPSET=K1_U_K2_U_K3_U_K4_U_K5_U_K6_U_K7_U_K8_U_K9_U_K10_U_K11_U_K12_U_KMPDATA
"RTN","KMPVVHLM",286,0)
 .............S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"HLO",KMPVLN)="VHLM DATA="_KMPSET,KMPVLN=KMPVLN+1
"RTN","KMPVVHLM",287,0)
 .I $D(^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"HLO")) D
"RTN","KMPVVHLM",288,0)
 ..M ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"HLO")=KMPTMP
"RTN","KMPVVHLM",289,0)
 ..S ^KMPTMP("KMPV","VHLM","TRANSMIT",$J,"HLO",6)="MESSAGE TYPE=HLO"
"RTN","KMPVVHLM",290,0)
 ..D TRANSMIT("HLO")
"RTN","KMPVVHLM",291,0)
 Q
"RTN","KMPVVHLM",292,0)
 ; DATA STRINGS
"RTN","KMPVVHLM",293,0)
 ; ASYNC: KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,   X    ,    X   ,NumMsgs,TotChar,NumEvents,TransTime,CATime,AATime
"RTN","KMPVVHLM",294,0)
 ;  KMPDATA = NumMsgs^TotChar^NumEvents^TransTime 
"RTN","KMPVVHLM",295,0)
 ;  SYNC: KMPSTIME,KMPTRAN,KMPPRI,KMPHTYP,KMPLL,KMPSPROT,KMPEPROT,KMPMTYP,KMPETYP,KMPSAPP,KMPRAPP,KMPSSITE,KMPRSITE,NumMsgs,TotChar,NumEvents,TransTime,CATime,AATimE
"RTN","KMPVVHLM",296,0)
 ;   KMPDATA = NumMsgs^TotChar^NumEvents^TransTime^CATime^AATime
"RTN","KMPVVHLM",297,0)
 ;   HLO: KMPSTIME,KMPSYNC,KMPTYP,KMPDIR,KMPAMTYP,KMPAMEVT,KMPLL,KMPQUE,KMPSAPP,KMPSSITE,KMPRAPP,KMPRSITE,NumMsgs,TotChar
"RTN","KMPVVHLM",298,0)
 ;   KMPDATA=NumMsgs^TotChar
"RTN","KMPVVHLM",299,0)
 Q
"RTN","KMPVVHLM",300,0)
TRANSMIT(KMPMT) ;
"RTN","KMPVVHLM",301,0)
 ; quit if no data to transmit.
"RTN","KMPVVHLM",302,0)
 Q:'$D(^KMPTMP("KMPV","VHLM","TRANSMIT",$J))
"RTN","KMPVVHLM",303,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVHLM",304,0)
 ; send data via mail message.
"RTN","KMPVVHLM",305,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VHLM"",""TRANSMIT"","_$J_","""_KMPMT_""","
"RTN","KMPVVHLM",306,0)
 S XMSUB="VHLM DAILY DATA"
"RTN","KMPVVHLM",307,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VHLM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVHLM",308,0)
 D ^XMD
"RTN","KMPVVHLM",309,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVHLM",310,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVHLM",311,0)
 .S ^KMPTMP("KMPV","VHLM","DLY",KMPVHDAY,KMPMT)=XMZ
"RTN","KMPVVHLM",312,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VHLM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVHLM",313,0)
 K ^KMPTMP("KMPV","VHLM","TRANSMIT",$J)
"RTN","KMPVVHLM",314,0)
 Q
"RTN","KMPVVHLM",315,0)
 ;
"RTN","KMPVVMCM")
0^11^B42787451
"RTN","KMPVVMCM",1,0)
KMPVVMCM ;ATL/JMF - Collect HL7/HLO counts for the VistA Message Count Monitor ;3/1/2017
"RTN","KMPVVMCM",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVVMCM",3,0)
 ;
"RTN","KMPVVMCM",4,0)
 ;
"RTN","KMPVVMCM",5,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VMCM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVMCM",6,0)
 ;
"RTN","KMPVVMCM",7,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVMCM",8,0)
 ;  NOTE:  this routine is written to be tasked off daily at prior to 5 minutes past midnight via the Cache Task Manager on each node.
"RTN","KMPVVMCM",9,0)
 ;
"RTN","KMPVVMCM",10,0)
 ; ^KMPTMP("KMPV","VMCM","DLY"... storage of data for current day
"RTN","KMPVVMCM",11,0)
 ; ^KMPTMP("KMPV","VMCM","TRANSMIT",$J)............. temporary storage for daily VMCM data to be transmitted
"RTN","KMPVVMCM",12,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVMCM",13,0)
 ;   Data in "DLY" node:
"RTN","KMPVVMCM",14,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of receipt from server.
"RTN","KMPVVMCM",15,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVMCM",16,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVMCM",17,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVMCM",18,0)
 ;    
"RTN","KMPVVMCM",19,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVMCM",20,0)
 ;
"RTN","KMPVVMCM",21,0)
 N KMPVARR,KMPVBLK,KMPVCHKH,KMPVDASH,KMPVDATA,KMPVHANG,KMPVH,KMPVHOUR,KMPVHRSEC,KMPVHTIME,KMPVMEM
"RTN","KMPVVMCM",22,0)
 N KMPVMET,KMPVMETS,KMPVMIN,KMPVNODE,KMPVOSET,KMPVROUT,KMPVSMH,KMPVSINT,KMPVSLOT,KMPVSTOP,KMPVLIEN
"RTN","KMPVVMCM",23,0)
 N KMPVLLINE,KMPVLNAME,KMPVLSTATE,KMPVLRECV,KMPVLPROC,KMPVLSEND,KMPVLSENT,KMPVTEST,Y
"RTN","KMPVVMCM",24,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVMCM",25,0)
 D PURGEDLY^KMPVCBG("VMCM")
"RTN","KMPVVMCM",26,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVMCM",27,0)
 Q:$$GETVAL^KMPVCCFG("VMCM","ONOFF",8969)'="ON"
"RTN","KMPVVMCM",28,0)
 ; Check environment
"RTN","KMPVVMCM",29,0)
 S KMPVTEST=$$GETVAL^KMPVCCFG("VMCM","ALLOW TEST SYSTEM",8969,"I")
"RTN","KMPVVMCM",30,0)
 I $$PROD^KMPVCCFG'="Prod",KMPVTEST'=1 Q
"RTN","KMPVVMCM",31,0)
 S U="^"
"RTN","KMPVVMCM",32,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2) ;  IA 10097
"RTN","KMPVVMCM",33,0)
 ; Quit if not BE node or if Allow Test System is NO
"RTN","KMPVVMCM",34,0)
 I $$ISBENODE^KMPVCCFG(KMPVNODE)=0&(KMPVTEST=0) Q
"RTN","KMPVVMCM",35,0)
 ;
"RTN","KMPVVMCM",36,0)
 S KMPVSTOP=0,KMPVCHKH=+$H
"RTN","KMPVVMCM",37,0)
 F  D  Q:KMPVSTOP
"RTN","KMPVVMCM",38,0)
 .I $$GETVAL^KMPVCCFG("VMCM","ONOFF",8969)'="ON" S KMPVSTOP=1 Q  ; RUN FLAG SET TO 0
"RTN","KMPVVMCM",39,0)
 .S KMPVH=$H
"RTN","KMPVVMCM",40,0)
 .I KMPVH>KMPVCHKH SET KMPVSTOP=1 Q
"RTN","KMPVVMCM",41,0)
 .S KMPVSINT=$$GETVAL^KMPVCCFG("VMCM","COLLECTION INTERVAL",8969)
"RTN","KMPVVMCM",42,0)
 .S KMPVHANG=KMPVSINT*60
"RTN","KMPVVMCM",43,0)
 .S KMPVHTIME=$$SLOT^KMPVCCFG(KMPVH,KMPVSINT,"HOROLOG")
"RTN","KMPVVMCM",44,0)
 .S (KMPVLIEN,KMPVLLINE,KMPVLNAME,KMPVLSTATE)=""
"RTN","KMPVVMCM",45,0)
 .S (KMPVLRECV,KMPVLPROC,KMPVLSEND,KMPVLSENT)=0
"RTN","KMPVVMCM",46,0)
 .F  S KMPVLIEN=$O(^HLCS(870,KMPVLIEN)) Q:KMPVLIEN=""  D
"RTN","KMPVVMCM",47,0)
 ..I $D(^HLCS(870,KMPVLIEN,0)) D
"RTN","KMPVVMCM",48,0)
 ...S KMPVLLINE=$G(^HLCS(870,KMPVLIEN,0))
"RTN","KMPVVMCM",49,0)
 ...S KMPVLNAME=$P(KMPVLLINE,"^",1)_":"_$P(KMPVLLINE,"^",4)
"RTN","KMPVVMCM",50,0)
 ...S KMPVLSTATE=$P(KMPVLLINE,"^",5)
"RTN","KMPVVMCM",51,0)
 ...S KMPVLRECV=+$G(^HLCS(870,KMPVLIEN,"IN QUEUE BACK POINTER"))
"RTN","KMPVVMCM",52,0)
 ...S KMPVLPROC=+$G(^HLCS(870,KMPVLIEN,"IN QUEUE FRONT POINTER"))
"RTN","KMPVVMCM",53,0)
 ...S KMPVLSEND=+$G(^HLCS(870,KMPVLIEN,"OUT QUEUE BACK POINTER"))
"RTN","KMPVVMCM",54,0)
 ...S KMPVLSENT=+$G(^HLCS(870,KMPVLIEN,"OUT QUEUE FRONT POINTER"))
"RTN","KMPVVMCM",55,0)
 ...S ^KMPTMP("KMPV","VMCM","DLY",+KMPVH,KMPVNODE,KMPVLNAME,KMPVHTIME)=KMPVLRECV_"^"_KMPVLPROC_"^"_KMPVLSEND_"^"_KMPVLSENT_"^"_KMPVLSTATE
"RTN","KMPVVMCM",56,0)
 .S ^KMPTMP("KMPV","VMCM","DLY",+KMPVH,KMPVNODE,"HLO:",KMPVHTIME)="0^"_$$HLODAILY("IN")_"^0^"_$$HLODAILY("OUT")_"^"
"RTN","KMPVVMCM",57,0)
 .H KMPVHANG
"RTN","KMPVVMCM",58,0)
 Q
"RTN","KMPVVMCM",59,0)
 ;
"RTN","KMPVVMCM",60,0)
HLODAILY(KMPVHDIR) ;
"RTN","KMPVVMCM",61,0)
 ;
"RTN","KMPVVMCM",62,0)
 N KMPVHTOTAL,KMPVHTODAY,KMPVHTIME,KMPVHSAP,KMPVHRAP,KMPVHTYPE
"RTN","KMPVVMCM",63,0)
 S KMPVHTOTAL=0
"RTN","KMPVVMCM",64,0)
 S KMPVHTODAY=$$DT^XLFDT
"RTN","KMPVVMCM",65,0)
 S KMPVHTIME=KMPVHTODAY-.0001
"RTN","KMPVVMCM",66,0)
 F  S KMPVHTIME=$O(^HLSTATS(KMPVHDIR,"HOURLY",KMPVHTIME)) Q:'KMPVHTIME  Q:((KMPVHTIME\1)>KMPVHTODAY)  D
"RTN","KMPVVMCM",67,0)
 .S KMPVHSAP=""
"RTN","KMPVVMCM",68,0)
 .F  S KMPVHSAP=$O(^HLSTATS(KMPVHDIR,"HOURLY",KMPVHTIME,KMPVHSAP)) Q:KMPVHSAP=""  D
"RTN","KMPVVMCM",69,0)
 ..Q:KMPVHSAP="ACCEPT ACK"
"RTN","KMPVVMCM",70,0)
 ..S KMPVHRAP=""
"RTN","KMPVVMCM",71,0)
 ..F  S KMPVHRAP=$O(^HLSTATS(KMPVHDIR,"HOURLY",KMPVHTIME,KMPVHSAP,KMPVHRAP)) Q:KMPVHRAP=""  D
"RTN","KMPVVMCM",72,0)
 ...S KMPVHTYPE=""
"RTN","KMPVVMCM",73,0)
 ...F  S KMPVHTYPE=$O(^HLSTATS(KMPVHDIR,"HOURLY",KMPVHTIME,KMPVHSAP,KMPVHRAP,KMPVHTYPE)) Q:KMPVHTYPE=""  D
"RTN","KMPVVMCM",74,0)
 ....S KMPVHTOTAL=KMPVHTOTAL+$G(^HLSTATS(KMPVHDIR,"HOURLY",KMPVHTIME,KMPVHSAP,KMPVHRAP,KMPVHTYPE))
"RTN","KMPVVMCM",75,0)
 Q KMPVHTOTAL
"RTN","KMPVVMCM",76,0)
 ;
"RTN","KMPVVMCM",77,0)
SEND ; Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVVMCM",78,0)
 N KMPVCFG,KMPVDATA,KMPVDOM,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHOUR,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY
"RTN","KMPVVMCM",79,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVRT,KMPVSINF,KMPVSITE,KMPVWD,KMPVLINK
"RTN","KMPVVMCM",80,0)
 N %H
"RTN","KMPVVMCM",81,0)
 K ^KMPTMP("KMPV","VMCM","TRANSMIT",$J)
"RTN","KMPVVMCM",82,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVMCM",83,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVMCM",84,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VMCM","LAST START TIME",8969,"I")
"RTN","KMPVVMCM",85,0)
 I KMPVLAST'="" D
"RTN","KMPVVMCM",86,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVMCM",87,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VMCM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVMCM",88,0)
 ;
"RTN","KMPVVMCM",89,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VMCM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVMCM",90,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVVMCM",91,0)
 S KMPVHDAY=""
"RTN","KMPVVMCM",92,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY)) Q:KMPVHDAY=""!(KMPVHDAY>KMPVHYDAY)  D
"RTN","KMPVVMCM",93,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVMCM",94,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVMCM",95,0)
 ..D CANMESS^KMPVCBG("DELETE","VMCM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY)
"RTN","KMPVVMCM",96,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVMCM",97,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVMCM",98,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVMCM",99,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVMCM",100,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVMCM",101,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VMCM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVMCM",102,0)
 .K ^KMPTMP("KMPV","VMCM","TRANSMIT",$J)
"RTN","KMPVVMCM",103,0)
 .S KMPVLN=1
"RTN","KMPVVMCM",104,0)
 .S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",105,0)
 .S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",106,0)
 .S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",107,0)
 .S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VMCM"),KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",108,0)
 .S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",109,0)
 .S KMPVNODE=""
"RTN","KMPVVMCM",110,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVVMCM",111,0)
 ..S KMPVLINK=""
"RTN","KMPVVMCM",112,0)
 ..F  S KMPVLINK=$O(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY,KMPVNODE,KMPVLINK)) Q:KMPVLINK=""  D
"RTN","KMPVVMCM",113,0)
 ...S KMPVHOUR=""
"RTN","KMPVVMCM",114,0)
 ...F  S KMPVHOUR=$O(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY,KMPVNODE,KMPVLINK,KMPVHOUR)) Q:KMPVHOUR=""  D
"RTN","KMPVVMCM",115,0)
 ....S KMPVDATA=$G(^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY,KMPVNODE,KMPVLINK,KMPVHOUR))
"RTN","KMPVVMCM",116,0)
 ....S ^KMPTMP("KMPV","VMCM","TRANSMIT",$J,KMPVLN)="VMCM DATA="_KMPVNODE_U_KMPVLINK_U_KMPVHOUR_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVVMCM",117,0)
 .D TRANSMIT
"RTN","KMPVVMCM",118,0)
 D STRSTP^KMPVCCFG("VMCM",KMPVHSTRT)
"RTN","KMPVVMCM",119,0)
 Q
"RTN","KMPVVMCM",120,0)
 ;
"RTN","KMPVVMCM",121,0)
TRANSMIT ; Transmit data
"RTN","KMPVVMCM",122,0)
 ; quit if no data to transmit.
"RTN","KMPVVMCM",123,0)
 Q:'$D(^KMPTMP("KMPV","VMCM","TRANSMIT",$J))
"RTN","KMPVVMCM",124,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVMCM",125,0)
 ; send data via mail message.
"RTN","KMPVVMCM",126,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VMCM"",""TRANSMIT"","_$J_","
"RTN","KMPVVMCM",127,0)
 S XMSUB="VMCM DAILY DATA"
"RTN","KMPVVMCM",128,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VMCM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVMCM",129,0)
 D ^XMD
"RTN","KMPVVMCM",130,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVMCM",131,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVMCM",132,0)
 .S ^KMPTMP("KMPV","VMCM","DLY",KMPVHDAY)=XMZ
"RTN","KMPVVMCM",133,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VMCM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVMCM",134,0)
 K ^KMPTMP("KMPV","VMCM","TRANSMIT",$J)
"RTN","KMPVVMCM",135,0)
 Q
"RTN","KMPVVSTM")
0^2^B25044497
"RTN","KMPVVSTM",1,0)
KMPVVSTM ;SP/JML - Collect Cache Metrics for the VistA Storage Monitor ;5/1/2017
"RTN","KMPVVSTM",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVVSTM",3,0)
 ;
"RTN","KMPVVSTM",4,0)
 ;
"RTN","KMPVVSTM",5,0)
 ;
"RTN","KMPVVSTM",6,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VSTM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVSTM",7,0)
 ;
"RTN","KMPVVSTM",8,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVSTM",9,0)
 ;
"RTN","KMPVVSTM",10,0)
 ; ^KMPTMP("KMPV","VSTM","DLY"... storage of data for current day
"RTN","KMPVVSTM",11,0)
 ; ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)............. temporary storage for daily VSTM data to be transmitted
"RTN","KMPVVSTM",12,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVSTM",13,0)
 ;   Data in "DLY" node:
"RTN","KMPVVSTM",14,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of receipt from server.
"RTN","KMPVVSTM",15,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVSTM",16,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVSTM",17,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVSTM",18,0)
 ;    
"RTN","KMPVVSTM",19,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVSTM",20,0)
 ;
"RTN","KMPVVSTM",21,0)
 N KMPVBPM,KMPVBSIZ,KMPVDATA,KMPVDB,KMPVDFSP,KMPVDIR,KMPVDNUM,KMPVEND,KMPVESIZ,KMPVFBLK,KMPVFLAG,KMPVFREE
"RTN","KMPVVSTM",22,0)
 N KMPVFMB,KMPVMAX,KMPVNODE,KMPVRNS,KMPVRSET,KMPVSIZE,KMPVSTAT,KMPVSYSD,KMPVTNS,Y,SYS
"RTN","KMPVVSTM",23,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVSTM",24,0)
 D PURGEDLY^KMPVCBG("VSTM")
"RTN","KMPVVSTM",25,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVSTM",26,0)
 Q:$$GETVAL^KMPVCCFG("VSTM","ONOFF",8969)'="ON"
"RTN","KMPVVSTM",27,0)
 ; Check environment, quit if Test and test systems not allowed
"RTN","KMPVVSTM",28,0)
 I $$PROD^KMPVCCFG()'="Prod",$$GETVAL^KMPVCCFG("VSTM","ALLOW TEST SYSTEM",8969,"I")'=1 Q
"RTN","KMPVVSTM",29,0)
 ; Only run if 15th or last day of the month
"RTN","KMPVVSTM",30,0)
 S KMPVDNUM=$SYSTEM.SQL.DAYOFMONTH(+$H)
"RTN","KMPVVSTM",31,0)
 S KMPVEND=$$LASTDAY()
"RTN","KMPVVSTM",32,0)
 ; SET KMPVTEST="TESTING" TO RUN TEST ON DAYS OTHER THAN THE 15TH OR LAST DAY OF MONTH
"RTN","KMPVVSTM",33,0)
 I $G(KMPVTEST)="TESTING" S KMPVEND=1 K KMPVTEST
"RTN","KMPVVSTM",34,0)
 W !,$G(KMPVTEST),!
"RTN","KMPVVSTM",35,0)
 I (KMPVDNUM=15)!(KMPVEND) D 
"RTN","KMPVVSTM",36,0)
 .D KMPVVSTM^%ZOSVKSD(.KMPVDATA) ; IA 6342
"RTN","KMPVVSTM",37,0)
 .D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2) ;  IA 10097
"RTN","KMPVVSTM",38,0)
 .S KMPVDIR=""
"RTN","KMPVVSTM",39,0)
 .F  S KMPVDIR=$O(KMPVDATA(KMPVDIR)) Q:KMPVDIR=""  D
"RTN","KMPVVSTM",40,0)
 ..S ^KMPTMP("KMPV","VSTM","DLY",+$H,KMPVNODE,KMPVDIR)=$G(KMPVDATA(KMPVDIR))
"RTN","KMPVVSTM",41,0)
 Q
"RTN","KMPVVSTM",42,0)
 ;
"RTN","KMPVVSTM",43,0)
LASTDAY() ; Return 1 if today is the last day of the month
"RTN","KMPVVSTM",44,0)
 N %H,Y,X,%,MON1,MON2
"RTN","KMPVVSTM",45,0)
 ;
"RTN","KMPVVSTM",46,0)
 S %H=$H D YX^%DTC S MON1=$P(Y," ")
"RTN","KMPVVSTM",47,0)
 S %H=$H+1 D YX^%DTC S MON2=$P(Y," ")
"RTN","KMPVVSTM",48,0)
 I MON1=MON2 Q 0
"RTN","KMPVVSTM",49,0)
 Q 1
"RTN","KMPVVSTM",50,0)
 ;
"RTN","KMPVVSTM",51,0)
 ;
"RTN","KMPVVSTM",52,0)
SEND ; Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVVSTM",53,0)
 N KMPVCFG,KMPVDATA,KMPVDOM,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHOUR,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY
"RTN","KMPVVSTM",54,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVRT,KMPVSINF,KMPVSITE,KMPVWD
"RTN","KMPVVSTM",55,0)
 N %H
"RTN","KMPVVSTM",56,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVSTM",57,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVSTM",58,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VSTM","LAST START TIME",8969,"I")
"RTN","KMPVVSTM",59,0)
 I KMPVLAST'="" D
"RTN","KMPVVSTM",60,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVSTM",61,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VSTM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVSTM",62,0)
 ;
"RTN","KMPVVSTM",63,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VSTM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVSTM",64,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVVSTM",65,0)
 S KMPVHDAY=""
"RTN","KMPVVSTM",66,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)) Q:KMPVHDAY=""  D
"RTN","KMPVVSTM",67,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVSTM",68,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVSTM",69,0)
 ..D CANMESS^KMPVCBG("DELETE","VSTM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)
"RTN","KMPVVSTM",70,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVSTM",71,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVSTM",72,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVSTM",73,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVSTM",74,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVSTM",75,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VSTM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVSTM",76,0)
 .K ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)
"RTN","KMPVVSTM",77,0)
 .S KMPVLN=1
"RTN","KMPVVSTM",78,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",79,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",80,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",81,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VSTM"),KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",82,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",83,0)
 .S KMPVNODE=""
"RTN","KMPVVSTM",84,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVVSTM",85,0)
 ..S KMPVDIR=""
"RTN","KMPVVSTM",86,0)
 ..F  S KMPVDIR=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE,KMPVDIR)) Q:KMPVDIR=""  D
"RTN","KMPVVSTM",87,0)
 ...S KMPVDATA=$G(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE,KMPVDIR))
"RTN","KMPVVSTM",88,0)
 ...S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="VSTM DATA="_KMPVNODE_U_KMPVDIR_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",89,0)
 .D TRANSMIT
"RTN","KMPVVSTM",90,0)
 D STRSTP^KMPVCCFG("VSTM",KMPVHSTRT)
"RTN","KMPVVSTM",91,0)
 Q
"RTN","KMPVVSTM",92,0)
 ;
"RTN","KMPVVSTM",93,0)
TRANSMIT ; Transmit data
"RTN","KMPVVSTM",94,0)
 ; quit if no data to transmit.
"RTN","KMPVVSTM",95,0)
 Q:'$D(^KMPTMP("KMPV","VSTM","TRANSMIT",$J))
"RTN","KMPVVSTM",96,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVSTM",97,0)
 ; send data via mail message.
"RTN","KMPVVSTM",98,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VSTM"",""TRANSMIT"","_$J_","
"RTN","KMPVVSTM",99,0)
 S XMSUB="VSTM DAILY DATA"
"RTN","KMPVVSTM",100,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VSTM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVSTM",101,0)
 D ^XMD
"RTN","KMPVVSTM",102,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVSTM",103,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVSTM",104,0)
 .S ^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)=XMZ
"RTN","KMPVVSTM",105,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VSTM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVSTM",106,0)
 K ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)
"RTN","KMPVVSTM",107,0)
 Q
"RTN","KMPVVSTM",108,0)
 ;
"RTN","KMPVVTCM")
0^1^B40949860
"RTN","KMPVVTCM",1,0)
KMPVVTCM ;SP/JML - Collect Cache Metrics for the VistA Timed Collection Monitor ;5/1/2017
"RTN","KMPVVTCM",2,0)
 ;;4.0;CAPACITY MANAGEMENT;;3/1/2018;Build 38
"RTN","KMPVVTCM",3,0)
 ;
"RTN","KMPVVTCM",4,0)
 ;
"RTN","KMPVVTCM",5,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VTCM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVTCM",6,0)
 ;
"RTN","KMPVVTCM",7,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVTCM",8,0)
 ;  NOTE:  this routine is written to be tasked off daily at prior to 5 minutes past midnight via the Cache Task Manager on each node.
"RTN","KMPVVTCM",9,0)
 ;
"RTN","KMPVVTCM",10,0)
 ; ^KMPTMP("KMPV","VTCM","DLY"... storage of data for current day
"RTN","KMPVVTCM",11,0)
 ; ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)............. temporary storage for daily VTCM data to be transmitted
"RTN","KMPVVTCM",12,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVTCM",13,0)
 ;   Data in "DLY" node:
"RTN","KMPVVTCM",14,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of receipt from server.
"RTN","KMPVVTCM",15,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVTCM",16,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVTCM",17,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVTCM",18,0)
 ;    
"RTN","KMPVVTCM",19,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVTCM",20,0)
 ;
"RTN","KMPVVTCM",21,0)
 N KMPVARR,KMPVBLK,KMPVCHKH,KMPVDASH,KMPVDATA,KMPVHANG,KMPVH,KMPVHOUR,KMPVHRSEC,KMPVHTIME,KMPVMEM,KMPVMET,KMPVMETS,KMPVMIN
"RTN","KMPVVTCM",22,0)
 N KMPVNODE,KMPVOSET,KMPVROUT,KMPVSMH,KMPVSINT,KMPVSLOT,KMPVSTOP,Y
"RTN","KMPVVTCM",23,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVTCM",24,0)
 D PURGEDLY^KMPVCBG("VTCM")
"RTN","KMPVVTCM",25,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVTCM",26,0)
 Q:$$GETVAL^KMPVCCFG("VTCM","ONOFF",8969)'="ON"
"RTN","KMPVVTCM",27,0)
 ; Check environment
"RTN","KMPVVTCM",28,0)
 I $$PROD^KMPVCCFG'="Prod",$$GETVAL^KMPVCCFG("VTCM","ALLOW TEST SYSTEM",8969,"I")'=1 Q
"RTN","KMPVVTCM",29,0)
 S U="^"
"RTN","KMPVVTCM",30,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2) ;  IA 10097
"RTN","KMPVVTCM",31,0)
 ;
"RTN","KMPVVTCM",32,0)
 S KMPVSTOP=0,KMPVCHKH=+$H
"RTN","KMPVVTCM",33,0)
 F  D  Q:KMPVSTOP
"RTN","KMPVVTCM",34,0)
 .I $$GETVAL^KMPVCCFG("VTCM","ONOFF",8969)'="ON" S KMPVSTOP=1 Q  ; RUN FLAG SET TO 0
"RTN","KMPVVTCM",35,0)
 .S KMPVH=$H
"RTN","KMPVVTCM",36,0)
 .I KMPVH>KMPVCHKH SET KMPVSTOP=1 Q
"RTN","KMPVVTCM",37,0)
 .S KMPVSINT=$$GETVAL^KMPVCCFG("VTCM","COLLECTION INTERVAL",8969)
"RTN","KMPVVTCM",38,0)
 .S KMPVHANG=KMPVSINT*60
"RTN","KMPVVTCM",39,0)
 .; Get metrics
"RTN","KMPVVTCM",40,0)
 .D KMPVVTCM^%ZOSVKSD(.KMPVMETS)
"RTN","KMPVVTCM",41,0)
 .S KMPVDASH=KMPVMETS("KMPVDASH"),KMPVROUT=KMPVMETS("KMPVROUT")
"RTN","KMPVVTCM",42,0)
 .S KMPVSMH=KMPVMETS("KMPVSMH"),KMPVMEM=KMPVMETS("KMPVMEM")
"RTN","KMPVVTCM",43,0)
 .D BLKCOL^%ZOSVKSD(.KMPVBLK)
"RTN","KMPVVTCM",44,0)
 .;
"RTN","KMPVVTCM",45,0)
 .; Create metric string
"RTN","KMPVVTCM",46,0)
 .; p1:GloRefs^p2:GloRefsPerSec^p3:GloSets^p4:LogicalReads^p5:DiskReads^p6:DiskWrites^p7:Processes^p8:RtnCommands
"RTN","KMPVVTCM",47,0)
 .; p9:RtnLines^p10:RouRefs^p11:CSPSessions^p12:CacheEfficiency^p13:ECPAppSrvRate^p14:ECPDataSrvRate^p15:JournalEntries
"RTN","KMPVVTCM",48,0)
 .; p16:ApplicationErrors^p17:TotalSMHMemUsed^p18:SMHPagesUsed^p19:ConfiguredSMHMemory^
"RTN","KMPVVTCM",49,0)
 .; p20:total Shared Memory Heap available (including pages, smt, genstrtab^
"RTN","KMPVVTCM",50,0)
 .; p21:pages total available Shared Memory Heap pages (in bytes)^
"RTN","KMPVVTCM",51,0)
 .; p22:smt total available memory in SMT table^
"RTN","KMPVVTCM",52,0)
 .; p23:genstrtab total available memory in General String Table^
"RTN","KMPVVTCM",53,0)
 .; p24:BlkColSamples^p25:BlkCollisions
"RTN","KMPVVTCM",54,0)
 .S KMPVMET=KMPVDASH.GloRefs_U_KMPVDASH.GloRefsPerSec_U_KMPVDASH.GloSets
"RTN","KMPVVTCM",55,0)
 .S KMPVMET=KMPVMET_U_KMPVDASH.LogicalReads_U_KMPVDASH.DiskReads_U_KMPVDASH.DiskWrites
"RTN","KMPVVTCM",56,0)
 .S KMPVMET=KMPVMET_U_KMPVDASH.Processes_U_KMPVROUT.RtnCommands_U_KMPVROUT.RtnLines_U_KMPVDASH.RouRefs
"RTN","KMPVVTCM",57,0)
 .S KMPVMET=KMPVMET_U_KMPVDASH.CSPSessions_U_KMPVDASH.CacheEfficiency
"RTN","KMPVVTCM",58,0)
 .S KMPVMET=KMPVMET_U_KMPVDASH.ECPAppSrvRate_U_KMPVDASH.ECPDataSrvRate
"RTN","KMPVVTCM",59,0)
 .S KMPVMET=KMPVMET_U_KMPVDASH.JournalEntries_U_KMPVDASH.ApplicationErrors
"RTN","KMPVVTCM",60,0)
 .S KMPVMET=KMPVMET_U_$P(KMPVSMH,",")_U_$P(KMPVSMH,",",2)_U_$P(KMPVSMH,",",3)
"RTN","KMPVVTCM",61,0)
 .S KMPVMET=KMPVMET_U_$P(KMPVMEM,",")_U_$P(KMPVMEM,",",2)_U_$P(KMPVMEM,",",3)_U_$P(KMPVMEM,",",4)
"RTN","KMPVVTCM",62,0)
 .S KMPVMET=KMPVMET_U_$P(KMPVBLK,",")_U_$P(KMPVBLK,",",2)
"RTN","KMPVVTCM",63,0)
 .;
"RTN","KMPVVTCM",64,0)
 .S KMPVHTIME=$$SLOT^KMPVCCFG(KMPVH,KMPVSINT,"HOROLOG")
"RTN","KMPVVTCM",65,0)
 .S ^KMPTMP("KMPV","VTCM","DLY",+KMPVH,KMPVNODE,KMPVHTIME)=KMPVMET
"RTN","KMPVVTCM",66,0)
 .H KMPVHANG
"RTN","KMPVVTCM",67,0)
 Q
"RTN","KMPVVTCM",68,0)
 ;
"RTN","KMPVVTCM",69,0)
 ;
"RTN","KMPVVTCM",70,0)
SEND ; Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVVTCM",71,0)
 N KMPVCFG,KMPVDATA,KMPVDOM,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHOUR,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY
"RTN","KMPVVTCM",72,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVRT,KMPVSINF,KMPVSITE,KMPVWD
"RTN","KMPVVTCM",73,0)
 N %H
"RTN","KMPVVTCM",74,0)
 K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",75,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVTCM",76,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVTCM",77,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VTCM","LAST START TIME",8969,"I")
"RTN","KMPVVTCM",78,0)
 I KMPVLAST'="" D
"RTN","KMPVVTCM",79,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVTCM",80,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VTCM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVTCM",81,0)
 ;
"RTN","KMPVVTCM",82,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VTCM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVTCM",83,0)
 S KMPVSINF=$$SITEINFO^KMPVCCFG()
"RTN","KMPVVTCM",84,0)
 S KMPVHDAY=""
"RTN","KMPVVTCM",85,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)) Q:KMPVHDAY=""!(KMPVHDAY>KMPVHYDAY)  D
"RTN","KMPVVTCM",86,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVTCM",87,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVTCM",88,0)
 ..D CANMESS^KMPVCBG("DELETE","VTCM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)
"RTN","KMPVVTCM",89,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVTCM",90,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVTCM",91,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVTCM",92,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVTCM",93,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVTCM",94,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VTCM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVTCM",95,0)
 .K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",96,0)
 .S KMPVLN=1
"RTN","KMPVVTCM",97,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",98,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",99,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",100,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VTCM"),KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",101,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",102,0)
 .S KMPVNODE=""
"RTN","KMPVVTCM",103,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVVTCM",104,0)
 ..S KMPVHOUR=""
"RTN","KMPVVTCM",105,0)
 ..F  S KMPVHOUR=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE,KMPVHOUR)) Q:KMPVHOUR=""  D
"RTN","KMPVVTCM",106,0)
 ...S KMPVDATA=$G(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE,KMPVHOUR))
"RTN","KMPVVTCM",107,0)
 ...S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="VTCM DATA="_KMPVNODE_U_KMPVHOUR_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",108,0)
 .D TRANSMIT
"RTN","KMPVVTCM",109,0)
 D STRSTP^KMPVCCFG("VTCM",KMPVHSTRT)
"RTN","KMPVVTCM",110,0)
 Q
"RTN","KMPVVTCM",111,0)
 ;
"RTN","KMPVVTCM",112,0)
TRANSMIT ; Transmit data
"RTN","KMPVVTCM",113,0)
 ; quit if no data to transmit.
"RTN","KMPVVTCM",114,0)
 Q:'$D(^KMPTMP("KMPV","VTCM","TRANSMIT",$J))
"RTN","KMPVVTCM",115,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVTCM",116,0)
 ; send data via mail message.
"RTN","KMPVVTCM",117,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VTCM"",""TRANSMIT"","_$J_","
"RTN","KMPVVTCM",118,0)
 S XMSUB="VTCM DAILY DATA"
"RTN","KMPVVTCM",119,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VTCM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVTCM",120,0)
 D ^XMD
"RTN","KMPVVTCM",121,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVTCM",122,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVTCM",123,0)
 .S ^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)=XMZ
"RTN","KMPVVTCM",124,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VTCM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVTCM",125,0)
 K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",126,0)
 Q
"RTN","KMPVVTCM",127,0)
 ;
"VER")
8.0^22.0
"^DD",8969,8969,0)
FIELD^^3.04^19
"^DD",8969,8969,0,"DDA")
N
"^DD",8969,8969,0,"DT")
3180226
"^DD",8969,8969,0,"IX","B",8969,.01)

"^DD",8969,8969,0,"NM","VSM CONFIGURATION")

"^DD",8969,8969,0,"VRPK")
KMPV
"^DD",8969,8969,.01,0)
MONITOR KEY^RF^^0;1^K:$L(X)>4!($L(X)<2)!'(X'?1P.E) X
"^DD",8969,8969,.01,1,0)
^.1
"^DD",8969,8969,.01,1,1,0)
8969^B
"^DD",8969,8969,.01,1,1,1)
S ^KMPV(8969,"B",$E(X,1,30),DA)=""
"^DD",8969,8969,.01,1,1,2)
K ^KMPV(8969,"B",$E(X,1,30),DA)
"^DD",8969,8969,.01,3)
Answer must be 2-4 characters in length.
"^DD",8969,8969,.01,21,0)
^^1^1^3141202^
"^DD",8969,8969,.01,21,1,0)
Two to four Letter acronym used to identify specific monitor.
"^DD",8969,8969,.01,"DT")
3141202
"^DD",8969,8969,.02,0)
ONOFF^S^1:ON;0:OFF;^0;2^Q
"^DD",8969,8969,.02,3)
Enter 'ON' to start monitor or 'OFF' to stop monitor from running.
"^DD",8969,8969,.02,21,0)
^^1^1^3141202^
"^DD",8969,8969,.02,21,1,0)
Flag used to stop or continue monitor collection.
"^DD",8969,8969,.02,"DT")
3150706
"^DD",8969,8969,.03,0)
FULL NAME^F^^0;3^K:$L(X)>40!($L(X)<4) X
"^DD",8969,8969,.03,3)
Answer must be 4-40 characters in length.
"^DD",8969,8969,.03,21,0)
^^2^2^3141202^
"^DD",8969,8969,.03,21,1,0)
Descriptive name for specific monitor. Usually related to the MonitorKey. 
"^DD",8969,8969,.03,21,2,0)
Ex. VTCM = VistA Timed Collection Monitor.
"^DD",8969,8969,.03,"DT")
3141202
"^DD",8969,8969,.04,0)
VERSION^NJ6,2^^0;4^K:+X'=X!(X>100)!(X<1)!(X?.E1"."3.N) X
"^DD",8969,8969,.04,3)
Type a number between 1 and 100, 2 decimal digits.
"^DD",8969,8969,.04,21,0)
^^1^1^3141202^
"^DD",8969,8969,.04,21,1,0)
Current version of VSM software.
"^DD",8969,8969,.04,"DT")
3141202
"^DD",8969,8969,.05,0)
VERSION INSTALL DATE^D^^0;5^S %DT="ESTX" D ^%DT S X=Y K:3140923>X X
"^DD",8969,8969,.05,3)
Type a date not earlier than SEP 23, 2014.
"^DD",8969,8969,.05,21,0)
^^1^1^3141202^
"^DD",8969,8969,.05,21,1,0)
Date current version of software was installed.
"^DD",8969,8969,.05,"DT")
3141202
"^DD",8969,8969,1.01,0)
DAYS TO KEEP DATA^RNJ1,0^^1;1^K:+X'=X!(X>7)!(X<3)!(X?.E1"."1.N) X
"^DD",8969,8969,1.01,3)
Type a number between 3 and 7, 0 decimal digits.
"^DD",8969,8969,1.01,21,0)
^^5^5^3141202^
"^DD",8969,8969,1.01,21,1,0)
Number of days that unsent data will be allowed to remain in 
"^DD",8969,8969,1.01,21,2,0)
^KMPTMP("KMPV" before the purge routine kills it. Limited to 3-7 days. 
"^DD",8969,8969,1.01,21,3,0)
Data older than this value will be deleted regardless of reason it has 
"^DD",8969,8969,1.01,21,4,0)
not been sent to the national database in order to assure global does not 
"^DD",8969,8969,1.01,21,5,0)
grow unchecked.
"^DD",8969,8969,1.01,"DT")
3141202
"^DD",8969,8969,1.02,0)
COLLECTION INTERVAL^RNJ3,0^^1;2^K:+X'=X!(X>720)!(X<5)!(X?.E1"."1.N) X
"^DD",8969,8969,1.02,3)
Type a number between 5 and 720, 0 decimal digits.
"^DD",8969,8969,1.02,21,0)
^^4^4^3141202^
"^DD",8969,8969,1.02,21,1,0)
The number in minutes used to gather or aggregate metrics. Monitors that 
"^DD",8969,8969,1.02,21,2,0)
collect metrics on a periodic basis will use this value to wait between 
"^DD",8969,8969,1.02,21,3,0)
collects. Monitors that collect data continuously will use this value for 
"^DD",8969,8969,1.02,21,4,0)
aggregation of metrics. 
"^DD",8969,8969,1.02,"DT")
3180226
"^DD",8969,8969,1.03,0)
CACHE DAILY TASK^F^^1;3^K:$L(X)>25!($L(X)<3) X
"^DD",8969,8969,1.03,3)
Answer must be 3-25 characters in length.
"^DD",8969,8969,1.03,21,0)
^^4^4^3150706^
"^DD",8969,8969,1.03,21,1,0)
The name of the routine, if applicable, to start each days collection. 
"^DD",8969,8969,1.03,21,2,0)
The Cache' Task Manager will call the RUN linetag of this routine at the 
"^DD",8969,8969,1.03,21,3,0)
start of every day. This allows collection tasks to run on each node of a 
"^DD",8969,8969,1.03,21,4,0)
VistA system - front end and back end.
"^DD",8969,8969,1.03,"DT")
3150706
"^DD",8969,8969,1.04,0)
ALLOW TEST SYSTEM^S^1:YES;0:NO;^1;4^Q
"^DD",8969,8969,1.04,3)
Enter 'YES' to allow monitor to run on a test system. Otherwise monitor will exit if the current UCI is not set to 'PROD' per ^%ZOSF("UCI").
"^DD",8969,8969,1.04,21,0)
^^3^3^3150706^
"^DD",8969,8969,1.04,21,1,0)
If set to 'Yes' this will allow the monitor to run on test systems. 
"^DD",8969,8969,1.04,21,2,0)
Otherwise monitor will exit if the current UCI is not set as 'PROD' per 
"^DD",8969,8969,1.04,21,3,0)
^%ZOSF("UCI").
"^DD",8969,8969,1.04,"DT")
3150706
"^DD",8969,8969,1.05,0)
TASKMAN SCHEDULE FREQUENCY^F^^1;5^K:$L(X)>10!($L(X)<1) X
"^DD",8969,8969,1.05,3)
Answer must be 1-10 characters in length.
"^DD",8969,8969,1.05,21,0)
^^2^2^3141202^
"^DD",8969,8969,1.05,21,1,0)
The value used to automatically reschedule the TaskMan tasks. (ex. 1D or
"^DD",8969,8969,1.05,21,2,0)
1W)
"^DD",8969,8969,1.05,"DT")
3141202
"^DD",8969,8969,1.06,0)
TASKMAN SCHEDULE START^F^^1;6^K:$L(X)>20!($L(X)<1) X
"^DD",8969,8969,1.06,3)
Answer must be 1-20 characters in length.
"^DD",8969,8969,1.06,21,0)
^^1^1^3141202^
"^DD",8969,8969,1.06,21,1,0)
The time each monitor's TaskMan task should be scheduled. (ex. T+1@0001)
"^DD",8969,8969,1.06,"DT")
3141202
"^DD",8969,8969,1.07,0)
TASKMAN OPTION^F^^1;7^K:$L(X)>35!($L(X)<1) X
"^DD",8969,8969,1.07,3)
Answer must be 1-35 characters in length.
"^DD",8969,8969,1.07,21,0)
^^2^2^3141202^
"^DD",8969,8969,1.07,21,1,0)
The OPTION file entry used by TaskMan to schedule the daily background
"^DD",8969,8969,1.07,21,2,0)
jobs.
"^DD",8969,8969,1.07,"DT")
3141202
"^DD",8969,8969,2.01,0)
LAST START TIME^D^^2;1^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",8969,8969,2.01,3)
(No range limit on date)
"^DD",8969,8969,2.01,21,0)
^^1^1^3141202^
"^DD",8969,8969,2.01,21,1,0)
Time last TaskMan task was started for a specific monitor.
"^DD",8969,8969,2.01,"DT")
3141202
"^DD",8969,8969,2.02,0)
LAST STOP TIME^D^^2;2^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",8969,8969,2.02,3)
(No range limit on date)
"^DD",8969,8969,2.02,21,0)
^^1^1^3141202^
"^DD",8969,8969,2.02,21,1,0)
Time last TaskMan task completed for a specific monitor.
"^DD",8969,8969,2.02,"DT")
3141202
"^DD",8969,8969,2.03,0)
LAST RUN TIME^NJ4,0^^2;3^K:+X'=X!(X>3600)!(X<0)!(X?.E1"."1N.N) X
"^DD",8969,8969,2.03,3)
Type a number between 0 and 3600, 0 decimal digits.
"^DD",8969,8969,2.03,21,0)
^^2^2^3141202^
"^DD",8969,8969,2.03,21,1,0)
Time in seconds from start to completion of most recent run for a 
"^DD",8969,8969,2.03,21,2,0)
specific monitor TaskMan task.
"^DD",8969,8969,2.03,"DT")
3141202
"^DD",8969,8969,3.01,0)
NATIONAL DATA EMAIL ADDRESS^F^^3;1^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.01,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.01,21,0)
^^1^1^3150706^
"^DD",8969,8969,3.01,21,1,0)
Email address (VistA MailMan) to which daily data collections are sent.
"^DD",8969,8969,3.01,"DT")
3150706
"^DD",8969,8969,3.02,0)
NATIONAL SUPPORT EMAIL ADDRESS^F^^3;2^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.02,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.02,21,0)
^^2^2^3150706^
"^DD",8969,8969,3.02,21,1,0)
Email address (VistA MailMan) where emails are sent informing support 
"^DD",8969,8969,3.02,21,2,0)
staff of configuration changes or potential problems.
"^DD",8969,8969,3.02,"DT")
3150706
"^DD",8969,8969,3.03,0)
VSM CFG EMAIL ADDRESS^F^^3;3^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.03,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.03,21,0)
^^2^2^3150706^
"^DD",8969,8969,3.03,21,1,0)
Email address (VistA MailMan) were local configuration changes are sent 
"^DD",8969,8969,3.03,21,2,0)
to update the national database.
"^DD",8969,8969,3.03,"DT")
3150706
"^DD",8969,8969,3.04,0)
LOCAL SUPPORT EMAIL ADDRESS^F^^3;4^K:$L(X)>30!($L(X)<10) X
"^DD",8969,8969,3.04,3)
Answer must be 10-30 characters in length.
"^DD",8969,8969,3.04,21,0)
^^2^2^3150706^^
"^DD",8969,8969,3.04,21,1,0)
Local email address (Vista MailMan) used for inform local support staff 
"^DD",8969,8969,3.04,21,2,0)
of configuration changes or potential problems.
"^DD",8969,8969,3.04,"DT")
3150706
"^DD",8969.02,8969.02,.03,0)
COLLECTION INTERVAL^NJ3,0^^0;3^K:+X'=X!(X>720)!(X<5)!(X?.E1"."1.N) X
"^DD",8969.02,8969.02,.03,3)
Type a number between 5 and 720, 0 decimal digits.
"^DD",8969.02,8969.02,.03,21,0)
^^4^4^3141202^
"^DD",8969.02,8969.02,.03,21,1,0)
The number in minutes used to gather or aggregate metrics. Monitors that 
"^DD",8969.02,8969.02,.03,21,2,0)
collect metrics on a periodic basis will use this value to wait between 
"^DD",8969.02,8969.02,.03,21,3,0)
collects. Monitors that collect data continuously will use this value for 
"^DD",8969.02,8969.02,.03,21,4,0)
aggregation of metrics. 
"^DD",8969.02,8969.02,.03,"DT")
3180226
"^DD",8969.03,8969.03,.05,0)
VMCM RUNTIME^D^^0;5^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",8969.03,8969.03,.05,3)
(No range limit on date)
"^DD",8969.03,8969.03,.05,21,0)
^.001^1^1^3171129^^^^
"^DD",8969.03,8969.03,.05,21,1,0)
Time the VTCM monitor was started in FileMan datetime format.
"^DD",8969.03,8969.03,.05,"DT")
3171129
"^DIC",8969,8969,0)
VSM CONFIGURATION^8969
"^DIC",8969,8969,0,"GL")
^KMPV(8969,
"^DIC",8969,8969,"%",0)
^1.005^^0
"^DIC",8969,8969,"%D",0)
^^2^2^3150707^
"^DIC",8969,8969,"%D",1,0)
This file contains current configuration data related to the daily 
"^DIC",8969,8969,"%D",2,0)
operation of each monitor deployed.
"^DIC",8969,"B","VSM CONFIGURATION",8969)

**END**
**END**
