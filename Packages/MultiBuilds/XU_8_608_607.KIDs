KIDS Distribution saved on Oct 28, 2019@13:30:02
Kernel Lock Manager
**KIDS**:XU*8.0*608^XU*8.0*607^

**INSTALL NAME**
XU*8.0*608
"BLD",1543,0)
XU*8.0*608^KERNEL^0^3191028^y
"BLD",1543,1,0)
^9.61A^1^1^3191028^^
"BLD",1543,1,1,0)
See National Patch Module for complete information on this patch.  
"BLD",1543,4,0)
^9.64PA^8993.2^3
"BLD",1543,4,8993,0)
8993
"BLD",1543,4,8993,222)
y^n^f^^^^n^^
"BLD",1543,4,8993,224)

"BLD",1543,4,8993.1,0)
8993.1
"BLD",1543,4,8993.1,222)
y^n^f^^^^n^^
"BLD",1543,4,8993.1,224)

"BLD",1543,4,8993.2,0)
8993.2
"BLD",1543,4,8993.2,222)
y^n^f^^^^n
"BLD",1543,4,"B",8993,8993)

"BLD",1543,4,"B",8993.1,8993.1)

"BLD",1543,4,"B",8993.2,8993.2)

"BLD",1543,6.3)
82
"BLD",1543,10,0)
^9.63^2^1
"BLD",1543,10,2,0)
XU*8.0*607^0
"BLD",1543,10,"B","XU*8.0*607",2)

"BLD",1543,"ABPKG")
n
"BLD",1543,"INID")
^n
"BLD",1543,"INIT")
POST^XU8P608
"BLD",1543,"KRN",0)
^9.67PA^1.5^26
"BLD",1543,"KRN",.4,0)
.4
"BLD",1543,"KRN",.401,0)
.401
"BLD",1543,"KRN",.402,0)
.402
"BLD",1543,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",1543,"KRN",.402,"NM",1,0)
XULM EDIT PARAMETERS    FILE #8993.1^8993.1^0
"BLD",1543,"KRN",.402,"NM","B","XULM EDIT PARAMETERS    FILE #8993.1",1)

"BLD",1543,"KRN",.403,0)
.403
"BLD",1543,"KRN",.5,0)
.5
"BLD",1543,"KRN",.84,0)
.84
"BLD",1543,"KRN",1.5,0)
1.5
"BLD",1543,"KRN",1.6,0)
1.6
"BLD",1543,"KRN",1.61,0)
1.61
"BLD",1543,"KRN",1.62,0)
1.62
"BLD",1543,"KRN",3.6,0)
3.6
"BLD",1543,"KRN",3.8,0)
3.8
"BLD",1543,"KRN",9.2,0)
9.2
"BLD",1543,"KRN",9.8,0)
9.8
"BLD",1543,"KRN",9.8,"NM",0)
^9.68A^12^12
"BLD",1543,"KRN",9.8,"NM",1,0)
XU8P608^^0^B17447365
"BLD",1543,"KRN",9.8,"NM",2,0)
XULM^^0^B81106667
"BLD",1543,"KRN",9.8,"NM",3,0)
XULM1^^0^B50526613
"BLD",1543,"KRN",9.8,"NM",4,0)
XULMLD^^0^B21250798
"BLD",1543,"KRN",9.8,"NM",5,0)
XULMLOG^^0^B1246554
"BLD",1543,"KRN",9.8,"NM",6,0)
XULMOUT^^0^B5021337
"BLD",1543,"KRN",9.8,"NM",7,0)
XULMP^^0^B4650714
"BLD",1543,"KRN",9.8,"NM",8,0)
XULMRPC^^0^B1268183
"BLD",1543,"KRN",9.8,"NM",9,0)
XULMU^^0^B42882077
"BLD",1543,"KRN",9.8,"NM",10,0)
XULMUI^^0^B168290703
"BLD",1543,"KRN",9.8,"NM",11,0)
XULMUI1^^0^B48620576
"BLD",1543,"KRN",9.8,"NM",12,0)
XU8P608B^^0^B804645
"BLD",1543,"KRN",9.8,"NM","B","XU8P608",1)

"BLD",1543,"KRN",9.8,"NM","B","XU8P608B",12)

"BLD",1543,"KRN",9.8,"NM","B","XULM",2)

"BLD",1543,"KRN",9.8,"NM","B","XULM1",3)

"BLD",1543,"KRN",9.8,"NM","B","XULMLD",4)

"BLD",1543,"KRN",9.8,"NM","B","XULMLOG",5)

"BLD",1543,"KRN",9.8,"NM","B","XULMOUT",6)

"BLD",1543,"KRN",9.8,"NM","B","XULMP",7)

"BLD",1543,"KRN",9.8,"NM","B","XULMRPC",8)

"BLD",1543,"KRN",9.8,"NM","B","XULMU",9)

"BLD",1543,"KRN",9.8,"NM","B","XULMUI",10)

"BLD",1543,"KRN",9.8,"NM","B","XULMUI1",11)

"BLD",1543,"KRN",19,0)
19
"BLD",1543,"KRN",19,"NM",0)
^9.68A^9^8
"BLD",1543,"KRN",19,"NM",1,0)
XULM EDIT LOCK DICTIONARY^^0
"BLD",1543,"KRN",19,"NM",2,0)
XULM EDIT PARAMETERS^^0
"BLD",1543,"KRN",19,"NM",3,0)
XULM LOCK MANAGER^^0
"BLD",1543,"KRN",19,"NM",5,0)
XULM PURGE LOCK MANAGER LOG^^0
"BLD",1543,"KRN",19,"NM",6,0)
XULM RPC BROKER CONTEXT^^0
"BLD",1543,"KRN",19,"NM",7,0)
XULM VIEW LOCK MANAGER LOG^^0
"BLD",1543,"KRN",19,"NM",8,0)
XUSITEMGR^^3
"BLD",1543,"KRN",19,"NM",9,0)
XULM LOCK MANAGER MENU^^0
"BLD",1543,"KRN",19,"NM","B","XULM EDIT LOCK DICTIONARY",1)

"BLD",1543,"KRN",19,"NM","B","XULM EDIT PARAMETERS",2)

"BLD",1543,"KRN",19,"NM","B","XULM LOCK MANAGER",3)

"BLD",1543,"KRN",19,"NM","B","XULM LOCK MANAGER MENU",9)

"BLD",1543,"KRN",19,"NM","B","XULM PURGE LOCK MANAGER LOG",5)

"BLD",1543,"KRN",19,"NM","B","XULM RPC BROKER CONTEXT",6)

"BLD",1543,"KRN",19,"NM","B","XULM VIEW LOCK MANAGER LOG",7)

"BLD",1543,"KRN",19,"NM","B","XUSITEMGR",8)

"BLD",1543,"KRN",19.1,0)
19.1
"BLD",1543,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",1543,"KRN",19.1,"NM",1,0)
XULM LOCKS^^0
"BLD",1543,"KRN",19.1,"NM",2,0)
XULM SYSTEM LOCKS^^0
"BLD",1543,"KRN",19.1,"NM","B","XULM LOCKS",1)

"BLD",1543,"KRN",19.1,"NM","B","XULM SYSTEM LOCKS",2)

"BLD",1543,"KRN",101,0)
101
"BLD",1543,"KRN",101,"NM",0)
^9.68A^12^9
"BLD",1543,"KRN",101,"NM",2,0)
XULM DISPLAY SYSTEM LOCKS^^0
"BLD",1543,"KRN",101,"NM",3,0)
XULM GO TO^^0
"BLD",1543,"KRN",101,"NM",4,0)
XULM LOCK MANAGER MENU^^0
"BLD",1543,"KRN",101,"NM",5,0)
XULM REFRESH LOCKS^^0
"BLD",1543,"KRN",101,"NM",6,0)
XULM SELECT LOCK^^0
"BLD",1543,"KRN",101,"NM",8,0)
XULM SELECT NODE^^0
"BLD",1543,"KRN",101,"NM",9,0)
XULM SINGLE LOCK MENU^^0
"BLD",1543,"KRN",101,"NM",11,0)
XULM SORT/SCREEN LOCKS^^0
"BLD",1543,"KRN",101,"NM",12,0)
XULM TERMINATE PROCESS^^0
"BLD",1543,"KRN",101,"NM","B","XULM DISPLAY SYSTEM LOCKS",2)

"BLD",1543,"KRN",101,"NM","B","XULM GO TO",3)

"BLD",1543,"KRN",101,"NM","B","XULM LOCK MANAGER MENU",4)

"BLD",1543,"KRN",101,"NM","B","XULM REFRESH LOCKS",5)

"BLD",1543,"KRN",101,"NM","B","XULM SELECT LOCK",6)

"BLD",1543,"KRN",101,"NM","B","XULM SELECT NODE",8)

"BLD",1543,"KRN",101,"NM","B","XULM SINGLE LOCK MENU",9)

"BLD",1543,"KRN",101,"NM","B","XULM SORT/SCREEN LOCKS",11)

"BLD",1543,"KRN",101,"NM","B","XULM TERMINATE PROCESS",12)

"BLD",1543,"KRN",409.61,0)
409.61
"BLD",1543,"KRN",409.61,"NM",0)
^9.68A^2^2
"BLD",1543,"KRN",409.61,"NM",1,0)
XULM DISPLAY SINGLE LOCK^^0
"BLD",1543,"KRN",409.61,"NM",2,0)
XULM LOCK MANAGER^^0
"BLD",1543,"KRN",409.61,"NM","B","XULM DISPLAY SINGLE LOCK",1)

"BLD",1543,"KRN",409.61,"NM","B","XULM LOCK MANAGER",2)

"BLD",1543,"KRN",771,0)
771
"BLD",1543,"KRN",779.2,0)
779.2
"BLD",1543,"KRN",870,0)
870
"BLD",1543,"KRN",8989.51,0)
8989.51
"BLD",1543,"KRN",8989.52,0)
8989.52
"BLD",1543,"KRN",8993,0)
8993
"BLD",1543,"KRN",8994,0)
8994
"BLD",1543,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",1543,"KRN",8994,"NM",1,0)
XULM GET LOCK TABLE^^0
"BLD",1543,"KRN",8994,"NM",2,0)
XULM KILL PROCESS^^0
"BLD",1543,"KRN",8994,"NM","B","XULM GET LOCK TABLE",1)

"BLD",1543,"KRN",8994,"NM","B","XULM KILL PROCESS",2)

"BLD",1543,"KRN",9002226,0)
9002226
"BLD",1543,"KRN","B",.4,.4)

"BLD",1543,"KRN","B",.401,.401)

"BLD",1543,"KRN","B",.402,.402)

"BLD",1543,"KRN","B",.403,.403)

"BLD",1543,"KRN","B",.5,.5)

"BLD",1543,"KRN","B",.84,.84)

"BLD",1543,"KRN","B",1.5,1.5)

"BLD",1543,"KRN","B",1.6,1.6)

"BLD",1543,"KRN","B",1.61,1.61)

"BLD",1543,"KRN","B",1.62,1.62)

"BLD",1543,"KRN","B",3.6,3.6)

"BLD",1543,"KRN","B",3.8,3.8)

"BLD",1543,"KRN","B",9.2,9.2)

"BLD",1543,"KRN","B",9.8,9.8)

"BLD",1543,"KRN","B",19,19)

"BLD",1543,"KRN","B",19.1,19.1)

"BLD",1543,"KRN","B",101,101)

"BLD",1543,"KRN","B",409.61,409.61)

"BLD",1543,"KRN","B",771,771)

"BLD",1543,"KRN","B",779.2,779.2)

"BLD",1543,"KRN","B",870,870)

"BLD",1543,"KRN","B",8989.51,8989.51)

"BLD",1543,"KRN","B",8989.52,8989.52)

"BLD",1543,"KRN","B",8993,8993)

"BLD",1543,"KRN","B",8994,8994)

"BLD",1543,"KRN","B",9002226,9002226)

"BLD",1543,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1543,"QUES",0)
^9.62^^
"BLD",1543,"REQB",0)
^9.611^2^2
"BLD",1543,"REQB",1,0)
XU*8.0*584^2
"BLD",1543,"REQB",2,0)
XU*8.0*672^2
"BLD",1543,"REQB","B","XU*8.0*584",1)

"BLD",1543,"REQB","B","XU*8.0*672",2)

"FIA",8993)
XULM LOCK DICTIONARY
"FIA",8993,0)
^XLM(8993,
"FIA",8993,0,0)
8993I
"FIA",8993,0,1)
y^n^f^^^^n^^
"FIA",8993,0,10)

"FIA",8993,0,11)

"FIA",8993,0,"RLRO")

"FIA",8993,0,"VR")
8.0^XU
"FIA",8993,8993)
0
"FIA",8993,8993.02)
0
"FIA",8993,8993.03)
0
"FIA",8993,8993.04)
0
"FIA",8993,8993.32)
0
"FIA",8993.1)
XULM LOCK MANAGER PARAMETERS
"FIA",8993.1,0)
^XLM(8993.1,
"FIA",8993.1,0,0)
8993.1P
"FIA",8993.1,0,1)
y^n^f^^^^n^^
"FIA",8993.1,0,10)

"FIA",8993.1,0,11)

"FIA",8993.1,0,"RLRO")

"FIA",8993.1,0,"VR")
8.0^XU
"FIA",8993.1,8993.1)
0
"FIA",8993.1,8993.11)
0
"FIA",8993.1,8993.15)
0
"FIA",8993.2)
XULM LOCK MANAGER LOG
"FIA",8993.2,0)
^XLM(8993.2,
"FIA",8993.2,0,0)
8993.2DI
"FIA",8993.2,0,1)
y^n^f^^^^n
"FIA",8993.2,0,10)

"FIA",8993.2,0,11)

"FIA",8993.2,0,"RLRO")

"FIA",8993.2,0,"VR")
8.0^XU
"FIA",8993.2,8993.2)
0
"FIA",8993.2,8993.21)
0
"INIT")
POST^XU8P608
"IX",8993,8993,"AC",0)
8993^AC^Used to find global references.^R^^R^IR^I^8993^^^^^S
"IX",8993,8993,"AC",.1,0)
^^9^9^3120828^^
"IX",8993,8993,"AC",.1,1,0)
This cross-reference will index global references.  It does
"IX",8993,8993,"AC",.1,2,0)
that by concatenating "^" to the front of the variable
"IX",8993,8993,"AC",.1,3,0)
name ( from the .01 field) if the GLOBAL LOCK? field 
"IX",8993,8993,"AC",.1,4,0)
(# 1.02) indicates that the entry refers to a global.  
"IX",8993,8993,"AC",.1,5,0)
                     
"IX",8993,8993,"AC",.1,6,0)
This is necessary because FileMan doesn't allow the .01
"IX",8993,8993,"AC",.1,7,0)
field to start with "^".
"IX",8993,8993,"AC",.1,8,0)

"IX",8993,8993,"AC",.1,9,0)

"IX",8993,8993,"AC",1)
S ^XLM(8993,"AC",X(3),DA)=""
"IX",8993,8993,"AC",2)
K ^XLM(8993,"AC",X(3),DA)
"IX",8993,8993,"AC",2.5)
K ^XLM(8993,"AC")
"IX",8993,8993,"AC",11.1,0)
^.114IA^3^3
"IX",8993,8993,"AC",11.1,1,0)
1^F^8993^1.02^1^^F
"IX",8993,8993,"AC",11.1,2,0)
2^F^8993^.01^30^^F
"IX",8993,8993,"AC",11.1,3,0)
3^C^^^^1
"IX",8993,8993,"AC",11.1,3,1.5)
S X=$S(X(1):"^",1:"")_$P(X(2),"(")
"IX",8993,8993,"C",0)
8993^C^Uniqueness Index for Key 'A' of File #8993^R^^F^IR^I^8993^^^^^LS
"IX",8993,8993,"C",1)
S ^XLM(8993,"C",X,DA)=""
"IX",8993,8993,"C",2)
K ^XLM(8993,"C",X,DA)
"IX",8993,8993,"C",2.5)
K ^XLM(8993,"C")
"IX",8993,8993,"C",11.1,0)
^.114IA^1^1
"IX",8993,8993,"C",11.1,1,0)
1^F^8993^.01^^1
"IX",8993,8993,"E",0)
8993^E^Lookup on the #1.02 and .01 fields^R^^R^IR^I^8993^^^^^LS
"IX",8993,8993,"E",.1,0)
^^4^4^3120828^
"IX",8993,8993,"E",.1,1,0)
Because the LOCK TEMPLATE field (#.01) doesn't contain the '^' prefix for
"IX",8993,8993,"E",.1,2,0)
locks on globals, this index will make up for that by allowing lookups on
"IX",8993,8993,"E",.1,3,0)
both the LOCK TEMPLATE field (#.01) and GLOBAL LOCK? field (#1.02). 
"IX",8993,8993,"E",.1,4,0)

"IX",8993,8993,"E",1)
S ^XLM(8993,"E",$E(X(1),1,1),$E(X(2),1,240),DA)=""
"IX",8993,8993,"E",2)
K ^XLM(8993,"E",$E(X(1),1,1),$E(X(2),1,240),DA)
"IX",8993,8993,"E",2.5)
K ^XLM(8993,"E")
"IX",8993,8993,"E",11.1,0)
^.114IA^2^2
"IX",8993,8993,"E",11.1,1,0)
1^F^8993^1.02^1^1^F
"IX",8993,8993,"E",11.1,1,3)

"IX",8993,8993,"E",11.1,2,0)
2^F^8993^.01^240^2^F
"IX",8993,8993,"E",11.1,2,3)

"IX",8993,8993.03,"C",0)
8993.03^C^Uniqueness Index for Key 'A' of Subfile #8993.03^R^^F^IR^I^8993.03^^^^^LS
"IX",8993,8993.03,"C",.1,0)
^^3^3^3120713^
"IX",8993,8993.03,"C",.1,1,0)
This index guarantees that a particular file will be entered at most
"IX",8993,8993.03,"C",.1,2,0)
once in this multiple.
"IX",8993,8993.03,"C",.1,3,0)

"IX",8993,8993.03,"C",1)
S ^XLM(8993,DA(1),3,"C",X,DA)=""
"IX",8993,8993.03,"C",2)
K ^XLM(8993,DA(1),3,"C",X,DA)
"IX",8993,8993.03,"C",2.5)
K ^XLM(8993,DA(1),3,"C")
"IX",8993,8993.03,"C",11.1,0)
^.114IA^1^1
"IX",8993,8993.03,"C",11.1,1,0)
1^F^8993.03^.01^^1
"IX",8993.1,8993.1,"AC",0)
8993.1^AC^Used for matching entries to the lock table.^R^^R^IR^W^8993.15^^^^^S
"IX",8993.1,8993.1,"AC",.1,0)
^^5^5^3120718^^
"IX",8993.1,8993.1,"AC",.1,1,0)
This cross-reference is used to quickly find if an entry in the lock table
"IX",8993.1,8993.1,"AC",.1,2,0)
is a system lock as opposed to an application lock.  
"IX",8993.1,8993.1,"AC",.1,3,0)

"IX",8993.1,8993.1,"AC",.1,4,0)

"IX",8993.1,8993.1,"AC",.1,5,0)

"IX",8993.1,8993.1,"AC",1)
S ^XLM(8993.1,"AC",X(3),DA(1),DA)=""
"IX",8993.1,8993.1,"AC",2)
K ^XLM(8993.1,"AC",X(3),DA(1),DA)
"IX",8993.1,8993.1,"AC",2.5)
K ^XLM(8993.1,"AC")
"IX",8993.1,8993.1,"AC",11.1,0)
^.114IA^3^3
"IX",8993.1,8993.1,"AC",11.1,1,0)
1^F^8993.15^.02^30^^F
"IX",8993.1,8993.1,"AC",11.1,2,0)
2^F^8993.15^.03^^^F
"IX",8993.1,8993.1,"AC",11.1,3,0)
3^C^^^^1
"IX",8993.1,8993.1,"AC",11.1,3,1.5)
S X=$S(X(2):"^",1:"")_X(1)
"KEY",8993,8993,"A",0)
8993^A^P^176
"KEY",8993,8993,"A",2,0)
^.312IA^1^1
"KEY",8993,8993,"A",2,1,0)
.01^8993^1
"KEY",8993,8993.03,"A",0)
8993.03^A^P^178
"KEY",8993,8993.03,"A",2,0)
^.312IA^1^1
"KEY",8993,8993.03,"A",2,1,0)
.01^8993.03^1
"KEYPTR",8993,8993,"A")
8993^C
"KEYPTR",8993,8993.03,"A")
8993.03^C
"KRN",.402,126,-1)
0^1
"KRN",.402,126,0)
XULM EDIT PARAMETERS^3121024.1949^^8993.1^^^3180514
"KRN",.402,126,"DR",1,8993.1)
1;3;I '$$ASKYESNO^XULMU("Do you want to edit the list of system-type locks","NO") S Y=0;5;
"KRN",.402,126,"DR",2,8993.11)
.02;.03;.04;
"KRN",.402,126,"DR",2,8993.15)
.01;.03;.02;
"KRN",19,59,-1)
3^8
"KRN",19,59,0)
XUSITEMGR^Operations Management^^M^^^^^^^y^KERNEL^n^^
"KRN",19,59,1,0)
^19.06^3^3^3161122^^^^
"KRN",19,59,1,1,0)
This is a menu which contains options of use to the site manager:
"KRN",19,59,1,2,0)
options for managing kernel site parameters, sign-on log,
"KRN",19,59,1,3,0)
introductory text, etc.
"KRN",19,59,10,0)
^19.01IP^46^17
"KRN",19,59,10,45,0)
1715^LOCK
"KRN",19,59,10,45,"^")
XULM LOCK MANAGER MENU
"KRN",19,59,99)
64944,24430
"KRN",19,59,99.1)
53165,58889
"KRN",19,59,"U")
OPERATIONS MANAGEMENT
"KRN",19,1712,-1)
0^1
"KRN",19,1712,0)
XULM EDIT LOCK DICTIONARY^Edit Lock Dictionary^^A^^^^^^^y^KERNEL^^1
"KRN",19,1712,1,0)
^19.06^3^3^3120828^^
"KRN",19,1712,1,1,0)
This option allows users to add entries to the lock dictionary or edit
"KRN",19,1712,1,2,0)
existing entries.
"KRN",19,1712,1,3,0)

"KRN",19,1712,20)
D ASK^XULM1
"KRN",19,1712,"U")
EDIT LOCK DICTIONARY
"KRN",19,1713,-1)
0^6
"KRN",19,1713,0)
XULM RPC BROKER CONTEXT^KERNEL LOCK MANAGER^^B^^^^^^^y^
"KRN",19,1713,1,0)
^19.06^2^2^3121004^^^^
"KRN",19,1713,1,1,0)
This is the 'B' type option used by the the Kernel Lock Manager.
"KRN",19,1713,1,2,0)

"KRN",19,1713,99.1)
64782,51126
"KRN",19,1713,"RPC",0)
^19.05P^3^3
"KRN",19,1713,"RPC",2,0)
XULM GET LOCK TABLE^XULM LOCKS
"KRN",19,1713,"RPC",3,0)
XULM KILL PROCESS^XULM LOCKS
"KRN",19,1713,"U")
KERNEL LOCK MANAGER
"KRN",19,1714,-1)
0^3
"KRN",19,1714,0)
XULM LOCK MANAGER^Kernel Lock Manager^^A^^^^^^^y^KERNEL^^1
"KRN",19,1714,1,0)
^19.06^3^3^3120619^^
"KRN",19,1714,1,1,0)
This option allows the user to display the lock table and terminate processes
"KRN",19,1714,1,2,0)
that hold problem locks.
"KRN",19,1714,1,3,0)

"KRN",19,1714,20)
D MAIN^XULM
"KRN",19,1714,"U")
KERNEL LOCK MANAGER
"KRN",19,1715,-1)
0^9
"KRN",19,1715,0)
XULM LOCK MANAGER MENU^Lock Manager Menu^^M^^XULM LOCKS^^^^^y^KERNEL
"KRN",19,1715,1,0)
^19.06^2^2^3120814^^^^
"KRN",19,1715,1,1,0)
This menu holds all the options for the Kernel Lock Manager.
"KRN",19,1715,1,2,0)

"KRN",19,1715,10,0)
^19.01IP^5^5
"KRN",19,1715,10,1,0)
1714^LM^1
"KRN",19,1715,10,1,"^")
XULM LOCK MANAGER
"KRN",19,1715,10,2,0)
1712^EDIT^4
"KRN",19,1715,10,2,"^")
XULM EDIT LOCK DICTIONARY
"KRN",19,1715,10,3,0)
1717^PURG^6
"KRN",19,1715,10,3,"^")
XULM PURGE LOCK MANAGER LOG
"KRN",19,1715,10,4,0)
1716^LOG^5
"KRN",19,1715,10,4,"^")
XULM VIEW LOCK MANAGER LOG
"KRN",19,1715,10,5,0)
1718^SITE^5
"KRN",19,1715,10,5,"^")
XULM EDIT PARAMETERS
"KRN",19,1715,99)
63938,48497
"KRN",19,1715,99.1)
63567,44529
"KRN",19,1715,"U")
LOCK MANAGER MENU
"KRN",19,1716,-1)
0^7
"KRN",19,1716,0)
XULM VIEW LOCK MANAGER LOG^View Lock Manager Log^^I^^^^^^^^KERNEL^^^^^1
"KRN",19,1716,1,0)
^^2^2^3120619^
"KRN",19,1716,1,1,0)
This option is for viewing the Kernel Lock Manager Log.
"KRN",19,1716,1,2,0)

"KRN",19,1716,26)
W !,"Kernel Lock Manager Log"
"KRN",19,1716,30)
XLM(8993.2,
"KRN",19,1716,31)
AEMQ
"KRN",19,1716,36)
B
"KRN",19,1716,80)
XLM(8993.2,
"KRN",19,1716,"U")
VIEW LOCK MANAGER LOG
"KRN",19,1717,-1)
0^5
"KRN",19,1717,0)
XULM PURGE LOCK MANAGER LOG^Purge Lock Manager Log^^A^^^^^^^y^KERNEL^^1
"KRN",19,1717,1,0)
^^2^2^3120619^
"KRN",19,1717,1,1,0)
This option is used to purge the Lock Manger Log of old entries.
"KRN",19,1717,1,2,0)

"KRN",19,1717,20)
D PURGE^XULMLOG
"KRN",19,1717,"U")
PURGE LOCK MANAGER LOG
"KRN",19,1718,-1)
0^2
"KRN",19,1718,0)
XULM EDIT PARAMETERS^Edit Lock Manager Parameters^^A^^^^^^^y^KERNEL^^1
"KRN",19,1718,1,0)
^^2^2^3120621^
"KRN",19,1718,1,1,0)
This option is for editing the site parameters for the Kernel Lock Manager.
"KRN",19,1718,1,2,0)

"KRN",19,1718,20)
D EDIT^XULMP
"KRN",19,1718,"U")
EDIT LOCK MANAGER PARAMETERS
"KRN",19.1,130,-1)
0^1
"KRN",19.1,130,0)
XULM LOCKS^Key for VistA Locked Record^^n^0
"KRN",19.1,130,1,0)
^^1^1^3080503^
"KRN",19.1,130,1,1,0)
Controls access to VistA Locked Records Utility.
"KRN",19.1,131,-1)
0^2
"KRN",19.1,131,0)
XULM SYSTEM LOCKS^DON'T SHOW SYSTEM LOCKS
"KRN",19.1,131,1,0)
^19.11^2^2^3140820^^^
"KRN",19.1,131,1,1,0)
This key prevents users who do not hold this key from seeing
"KRN",19.1,131,1,2,0)
system level locks in the Lock Manager application.
"KRN",101,588,-1)
0^4
"KRN",101,588,0)
XULM LOCK MANAGER MENU^XULM LOCK MANAGER MENU^^M^^^^^^^^KERNEL
"KRN",101,588,1,0)
^101.06^2^2^3140604^^^^
"KRN",101,588,1,1,0)
This is the protocol menu for the Kernel Lock Manager List Manager screen.
"KRN",101,588,1,2,0)

"KRN",101,588,4)
26^4
"KRN",101,588,10,0)
^101.01PAI^7^7
"KRN",101,588,10,1,0)
589^SL^1^^^Select a Lock
"KRN",101,588,10,1,"^")
XULM SELECT LOCK
"KRN",101,588,10,2,0)
594^GO^2^^^Go To a List Entry
"KRN",101,588,10,2,"^")
XULM GO TO
"KRN",101,588,10,3,0)
595^SS^5^^^Sort/Screen User Locks
"KRN",101,588,10,3,"^")
XULM SORT/SCREEN LOCKS
"KRN",101,588,10,4,0)
591^SYS^4^^^System Locks
"KRN",101,588,10,4,1)
^^^
"KRN",101,588,10,4,"^")
XULM DISPLAY SYSTEM LOCKS
"KRN",101,588,10,6,0)
592^RL^3^^^Refresh Locks
"KRN",101,588,10,6,"^")
XULM REFRESH LOCKS
"KRN",101,588,10,7,0)
596^SN^6^^^Select Node
"KRN",101,588,10,7,"^")
XULM SELECT NODE
"KRN",101,588,26)
D SHOW^VALM
"KRN",101,588,28)
Select Action: 
"KRN",101,588,29)

"KRN",101,588,99)
63938,48496
"KRN",101,589,-1)
0^6
"KRN",101,589,0)
XULM SELECT LOCK^SELECT LOCK^^A^^^^^^^^KERNEL
"KRN",101,589,1,0)
^^3^3^3120608^
"KRN",101,589,1,1,0)
This action allows a user to select a lock from the list.  It then
"KRN",101,589,1,2,0)
displays a new screen with detailed information about the lock.
"KRN",101,589,1,3,0)

"KRN",101,589,2,0)
^101.02A^1^1
"KRN",101,589,2,1,0)
SL
"KRN",101,589,2,"B","SL",1)

"KRN",101,589,4)
^^^SL
"KRN",101,589,20)
D SELECT^XULMUI
"KRN",101,589,99)
63938,48496
"KRN",101,590,-1)
0^9
"KRN",101,590,0)
XULM SINGLE LOCK MENU^^^M^^^^^^^^KERNEL
"KRN",101,590,1,0)
^101.06^2^2^3150714^^^^
"KRN",101,590,1,1,0)
This is the protocol menu for the XULM DISPLAY SINGLE LOCK List Template.
"KRN",101,590,1,2,0)

"KRN",101,590,4)
80^6
"KRN",101,590,10,0)
^101.01PAI^1^1
"KRN",101,590,10,1,0)
593^KILL^1^^^Terminate this Process
"KRN",101,590,10,1,"^")
XULM TERMINATE PROCESS
"KRN",101,590,26)
D SHOW^VALM
"KRN",101,590,28)
Select Action:
"KRN",101,590,99)
63938,48496
"KRN",101,591,-1)
0^2
"KRN",101,591,0)
XULM DISPLAY SYSTEM LOCKS^^^A^^^^^^^^KERNEL
"KRN",101,591,1,0)
^101.06^4^4^3140604^^^^
"KRN",101,591,1,1,0)
This List Template action protocol displays a list of the system locks.
"KRN",101,591,1,2,0)
System locks are generally ignored within the Lock Manager.  They are locks
"KRN",101,591,1,3,0)
held by infrastucture packages, such as the Kernel or HL7 package.
"KRN",101,591,1,4,0)

"KRN",101,591,2,0)
^101.02A^1^1
"KRN",101,591,2,1,0)
SYS
"KRN",101,591,2,"B","SYS",1)

"KRN",101,591,3,0)
^101.03P^^0
"KRN",101,591,20)
D SYSTEM^XULMUI
"KRN",101,591,24)

"KRN",101,592,-1)
0^5
"KRN",101,592,0)
XULM REFRESH LOCKS^^^A^^^^^^^^KERNEL
"KRN",101,592,1,0)
^^3^3^3120618^
"KRN",101,592,1,1,0)
This List Manager action protocol re-builds the list of locks by
"KRN",101,592,1,2,0)
reading the lock table. 
"KRN",101,592,1,3,0)

"KRN",101,592,20)
D REFRESH^XULMUI
"KRN",101,593,-1)
0^12
"KRN",101,593,0)
XULM TERMINATE PROCESS^TERMINATE PROCESS^^A^^^^^^^^KERNEL
"KRN",101,593,1,0)
^101.06^3^3^3120618^^^^
"KRN",101,593,1,1,0)
This List Manager action protocol will terminate the process that is 
"KRN",101,593,1,2,0)
currently selected.
"KRN",101,593,1,3,0)

"KRN",101,593,2,0)
^101.02A^1^1
"KRN",101,593,2,1,0)
KILL
"KRN",101,593,2,"B","KILL",1)

"KRN",101,593,20)
D KILLPROC^XULMUI1
"KRN",101,593,99)
63938,48496
"KRN",101,594,-1)
0^3
"KRN",101,594,0)
XULM GO TO^GO TO^^A^^^^^^^^KERNEL
"KRN",101,594,1,0)
^101.06^5^5^3121001^^^
"KRN",101,594,1,1,0)
This List Manager action asks the user where he wants to go to on the list and
"KRN",101,594,1,2,0)
then shifts the display to that location.
"KRN",101,594,1,3,0)

"KRN",101,594,1,4,0)

"KRN",101,594,1,5,0)

"KRN",101,594,2,0)
^101.02A^2^2
"KRN",101,594,2,1,0)
USER
"KRN",101,594,2,2,0)
GO
"KRN",101,594,2,"B","GO",2)

"KRN",101,594,2,"B","USER",1)

"KRN",101,594,20)
D GOTO^XULMUI
"KRN",101,594,99)
63938,48496
"KRN",101,595,-1)
0^11
"KRN",101,595,0)
XULM SORT/SCREEN LOCKS^Sort/Screen Locks^^A^^^^^^^^KERNEL
"KRN",101,595,1,0)
^101.06^6^6^3121001^^^^
"KRN",101,595,1,1,0)
This action provides the user with several options for how the list locks
"KRN",101,595,1,2,0)
should be displayed.  The options include sorting the list by patient name,
"KRN",101,595,1,3,0)
sorting the list by the user name, sorting the list by the lock string,
"KRN",101,595,1,4,0)
or screening the entries by lock reference, which means that only locks that
"KRN",101,595,1,5,0)
relate to a specific file will be included in the display. 
"KRN",101,595,1,6,0)

"KRN",101,595,2,0)
^101.02A^2^1
"KRN",101,595,2,2,0)
SS
"KRN",101,595,2,"B","SS",2)

"KRN",101,595,4)
^^^SF
"KRN",101,595,20)
D OPTIONS^XULMUI
"KRN",101,595,99)
63938,48496
"KRN",101,596,-1)
0^8
"KRN",101,596,0)
XULM SELECT NODE^Select Node^^A^^^^^^^^KERNEL
"KRN",101,596,1,0)
^101.06^7^7^3121023^^
"KRN",101,596,1,1,0)
This action allows the user to select either a single computer node or all the
"KRN",101,596,1,2,0)
computer nodes.
"KRN",101,596,1,3,0)

"KRN",101,596,1,4,0)
If the user selects a single node then the display of locks will include
"KRN",101,596,1,5,0)
only locks placed by processess running on that node.
"KRN",101,596,1,6,0)

"KRN",101,596,1,7,0)

"KRN",101,596,2,0)
^101.02A^1^1
"KRN",101,596,2,1,0)
SN
"KRN",101,596,2,"B","SN",1)

"KRN",101,596,20)
D SLCTNODE^XULMUI
"KRN",101,596,99)
63938,48496
"KRN",409.61,270,-1)
0^2
"KRN",409.61,270,0)
XULM LOCK MANAGER^1^1^120^3^20^1^1^LOCK^XULM LOCK MANAGER MENU^KERNEL LOCK MANAGER^1
"KRN",409.61,270,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,270,"ARRAY")
 ^XTMP("XULM",$J,"XULM DISPLAY",0)
"KRN",409.61,270,"COL",0)
^409.621^2^2
"KRN",409.61,270,"COL",1,0)
COL1^2^3^ #^^1
"KRN",409.61,270,"COL",2,0)
COL2^7^80^   ^
"KRN",409.61,270,"COL","AIDENT",1,1)

"KRN",409.61,270,"COL","B","COL1",1)

"KRN",409.61,270,"COL","B","COL2",2)

"KRN",409.61,270,"FNL")
D EXIT^XULMUI
"KRN",409.61,270,"HDR")

"KRN",409.61,270,"HLP")
D HELP^XULMUI
"KRN",409.61,270,"INIT")
D BYPAT^XULMUI
"KRN",409.61,271,-1)
0^1
"KRN",409.61,271,0)
XULM DISPLAY SINGLE LOCK^1^1^120^2^21^1^1^LOCK^XULM SINGLE LOCK MENU^DETAILED LOCK INFORMATION^1
"KRN",409.61,271,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,271,"ARRAY")
 ^XTMP("XULM",$J,"XULM SINGLE LOCK")
"KRN",409.61,271,"COL",0)
^409.621^^0
"KRN",409.61,271,"FNL")
D EXIT^XULMUI1
"KRN",409.61,271,"HDR")

"KRN",409.61,271,"HLP")
D HELP^XULMUI1
"KRN",409.61,271,"INIT")
D INIT^XULMUI1
"KRN",8994,340,-1)
0^1
"KRN",8994,340,0)
XULM GET LOCK TABLE^LOCKS^XULMRPC^1^P^0
"KRN",8994,340,1,0)
^8994.01^3^3^3120622^^
"KRN",8994,340,1,1,0)
This RPC is used by the Lock Manager to obtain the lock table on a specific
"KRN",8994,340,1,2,0)
node.  The lock table is returned in a global.
"KRN",8994,340,1,3,0)

"KRN",8994,340,2,0)
^8994.02A^2^2
"KRN",8994,340,2,1,0)
LOCKGBL^1^245^1^1
"KRN",8994,340,2,1,1,0)
^^3^3^3120621^
"KRN",8994,340,2,1,1,1,0)
This is the global reference of the location where the lock table
"KRN",8994,340,2,1,1,2,0)
should be returned.
"KRN",8994,340,2,1,1,3,0)

"KRN",8994,340,2,2,0)
RESULT^1^200^1^2
"KRN",8994,340,2,2,1,0)
^^2^2^3120622^
"KRN",8994,340,2,2,1,1,0)
Global location to place the result.
"KRN",8994,340,2,2,1,2,0)

"KRN",8994,340,2,"B","LOCKGBL",1)

"KRN",8994,340,2,"B","RESULT",2)

"KRN",8994,340,2,"PARAMSEQ",1,1)

"KRN",8994,340,2,"PARAMSEQ",2,2)

"KRN",8994,340,3,0)
^^2^2^3120622^
"KRN",8994,340,3,1,0)
Returns 0 on failure, 1 on success.
"KRN",8994,340,3,2,0)

"KRN",8994,341,-1)
0^2
"KRN",8994,341,0)
XULM KILL PROCESS^KILLPROC^XULMRPC^1^P^0
"KRN",8994,341,1,0)
^8994.01^2^2^3120624^^^^
"KRN",8994,341,1,1,0)
This RPC is used by the Kernel Lock Manager to terminate a process.
"KRN",8994,341,1,2,0)

"KRN",8994,341,2,0)
^8994.02A^2^2
"KRN",8994,341,2,1,0)
PID^1^250^1^1
"KRN",8994,341,2,1,1,0)
^8994.021^2^2^3120624^^^
"KRN",8994,341,2,1,1,1,0)
This is the PID of the process to be killed.
"KRN",8994,341,2,1,1,2,0)

"KRN",8994,341,2,2,0)
RETURN^1^200^1^2
"KRN",8994,341,2,2,1,0)
^^3^3^3120624^
"KRN",8994,341,2,2,1,1,0)
This is the global location to return the result. The result shuould be
"KRN",8994,341,2,2,1,2,0)
returned in ^XTMP, since it is translated between nodes.
"KRN",8994,341,2,2,1,3,0)

"KRN",8994,341,2,"B","PID",1)

"KRN",8994,341,2,"B","RETURN",2)

"KRN",8994,341,2,"PARAMSEQ",1,1)

"KRN",8994,341,2,"PARAMSEQ",2,2)

"MBREQ")
0
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",16,8994)
8994;16;1;;;;RPCE1^XPDIA1;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
608^3191028^1010
"PKG",3,22,1,"PAH",1,1,0)
^^1^1^3191028
"PKG",3,22,1,"PAH",1,1,1,0)
See National Patch Module for complete information on this patch.  
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
12
"RTN","XU8P608")
0^1^B17447365
"RTN","XU8P608",1,0)
XU8P608 ;IRMFO-ALB/CJM - Kernel Lock Manager ;11/28/2012
"RTN","XU8P608",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XU8P608",3,0)
 ;;
"RTN","XU8P608",4,0)
 ;
"RTN","XU8P608",5,0)
 ;  ******************************************************************
"RTN","XU8P608",6,0)
 ;  *                                                                *
"RTN","XU8P608",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XU8P608",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XU8P608",9,0)
 ;  *                                                                *
"RTN","XU8P608",10,0)
 ;  ******************************************************************
"RTN","XU8P608",11,0)
 ;
"RTN","XU8P608",12,0)
POST ;
"RTN","XU8P608",13,0)
 ;D PATCH^ZTMGRSET(608)
"RTN","XU8P608",14,0)
 D INPUT2
"RTN","XU8P608",15,0)
 Q
"RTN","XU8P608",16,0)
INPUT1 ;
"RTN","XU8P608",17,0)
 ;Not needed - replaced by patch xu*8.0*607
"RTN","XU8P608",18,0)
 N LINE,OFFSET,LOCKIEN,SUBIEN,RTN
"RTN","XU8P608",19,0)
 S RTN="XU8P608A"
"RTN","XU8P608",20,0)
 S OFFSET=1
"RTN","XU8P608",21,0)
 F  S LINE=$T(LOCKS+OFFSET^@RTN) Q:'$L(LINE)  Q:$P(LINE,";;",2)="EXIT"  S OFFSET=OFFSET+1 D
"RTN","XU8P608",22,0)
 .I $P(LINE,";",3)="LOCK" S LOCKIEN=$$LOCK($P(LINE,";",4,99)) Q:LOCKIEN  I 'LOCKIEN D BMES^XPDUTL("Failed to create an entry in the XULM LOCK DICTIONARY file for "_$P(LINE,";",4,99)) Q
"RTN","XU8P608",23,0)
 .Q:'LOCKIEN
"RTN","XU8P608",24,0)
 .I $P(LINE,";",3)="PACKAGE" D  Q
"RTN","XU8P608",25,0)
 ..N PACKAGE,DATA
"RTN","XU8P608",26,0)
 ..S PACKAGE=$P(LINE,";",4)
"RTN","XU8P608",27,0)
 ..S PACKAGE=$O(^DIC(9.4,"B",PACKAGE,0))
"RTN","XU8P608",28,0)
 ..I PACKAGE S DATA(1.01)=PACKAGE D UPD^XULMU(8993,LOCKIEN,.DATA)
"RTN","XU8P608",29,0)
 .I $P(LINE,";",3)="PARTIAL MATCH OK?" D  Q
"RTN","XU8P608",30,0)
 ..N DATA
"RTN","XU8P608",31,0)
 ..S DATA(1.03)=$P(LINE,";",4)
"RTN","XU8P608",32,0)
 ..D UPD^XULMU(8993,LOCKIEN,.DATA)
"RTN","XU8P608",33,0)
 .I $P(LINE,";",3)="USAGE" D  Q
"RTN","XU8P608",34,0)
 ..S ^XLM(8993,LOCKIEN,4,0)=$P(LINE,";",4,99)
"RTN","XU8P608",35,0)
 ..N CNT S CNT=0
"RTN","XU8P608",36,0)
 ..F  S LINE=$T(LOCKS+OFFSET^@RTN) Q:$E(LINE,2,4)'=";;;"  D
"RTN","XU8P608",37,0)
 ...S OFFSET=OFFSET+1
"RTN","XU8P608",38,0)
 ...S LINE=$P(LINE,";;;",2,99)
"RTN","XU8P608",39,0)
 ...S CNT=CNT+1
"RTN","XU8P608",40,0)
 ...S ^XLM(8993,LOCKIEN,4,CNT,0)=LINE
"RTN","XU8P608",41,0)
 .I $P(LINE,";",3)="SUBSCRIPT" D  Q
"RTN","XU8P608",42,0)
 ..N DA,DATA
"RTN","XU8P608",43,0)
 ..S LINE=$P(LINE,";",4,99)
"RTN","XU8P608",44,0)
 ..S DATA(.01)=$P(LINE,"^")
"RTN","XU8P608",45,0)
 ..S DATA(.02)=$P(LINE,"^",2)
"RTN","XU8P608",46,0)
 ..S DATA(.04)=$P(LINE,"^",4)
"RTN","XU8P608",47,0)
 ..S DA(1)=LOCKIEN
"RTN","XU8P608",48,0)
 ..S SUBIEN=$$ADD^XULMU(8993.02,.DA,.DATA)
"RTN","XU8P608",49,0)
 .I $P(LINE,";",3)="CHECK LOGIC" D
"RTN","XU8P608",50,0)
 ..S:LOCKIEN&SUBIEN ^XLM(8993,LOCKIEN,2,SUBIEN,1)=$P(LINE,";",4,99)
"RTN","XU8P608",51,0)
 .I $P(LINE,";",3)="FILE REFERENCE" D  Q
"RTN","XU8P608",52,0)
 ..N DA,DATA
"RTN","XU8P608",53,0)
 ..S DATA(.01)=$P(LINE,";",4)
"RTN","XU8P608",54,0)
 ..S DA(1)=LOCKIEN
"RTN","XU8P608",55,0)
 ..S SUBIEN=$$ADD^XULMU(8993.03,.DA,.DATA)
"RTN","XU8P608",56,0)
 .I $P(LINE,";",3)="L" D
"RTN","XU8P608",57,0)
 ..N CODE,X
"RTN","XU8P608",58,0)
 ..S (CODE,X)=$P(LINE,";",4,99)
"RTN","XU8P608",59,0)
 ..D:$L(X) ^DIM
"RTN","XU8P608",60,0)
 ..I '$D(X) D BMES^XPDUTL("Failed syntax check:"),BMES^XPDUTL(CODE) Q
"RTN","XU8P608",61,0)
 ..S:LOCKIEN&SUBIEN ^XLM(8993,LOCKIEN,3,SUBIEN,1)=$G(X)
"RTN","XU8P608",62,0)
 .I $P(LINE,";",3)="REFERENCE DESCRIPTION" D  Q
"RTN","XU8P608",63,0)
 ..S:SUBIEN&LOCKIEN ^XLM(8993,LOCKIEN,3,SUBIEN,2,0)=$P(LINE,";",4,99)
"RTN","XU8P608",64,0)
 ..N CNT S CNT=0
"RTN","XU8P608",65,0)
 ..F  S LINE=$T(LOCKS+OFFSET^@RTN) Q:$E(LINE,2,4)'=";;;"  D
"RTN","XU8P608",66,0)
 ...S OFFSET=OFFSET+1
"RTN","XU8P608",67,0)
 ...S LINE=$P(LINE,";;;",2,99)
"RTN","XU8P608",68,0)
 ...S CNT=CNT+1
"RTN","XU8P608",69,0)
 ...S:LOCKIEN&SUBIEN ^XLM(8993,LOCKIEN,3,SUBIEN,2,CNT,0)=LINE
"RTN","XU8P608",70,0)
 Q
"RTN","XU8P608",71,0)
LOCK(LOCK) ;Deletes the old entry and adds a new one.
"RTN","XU8P608",72,0)
 N DATA,DA,QUIT,ERROR
"RTN","XU8P608",73,0)
 S QUIT=0
"RTN","XU8P608",74,0)
 S DATA(.01)=$P(LOCK,"^",2,99)
"RTN","XU8P608",75,0)
 S DATA(1.02)=$S($E(LOCK)="^":1,1:0)
"RTN","XU8P608",76,0)
 S DA=$O(^XLM(8993,"E",DATA(1.02),DATA(.01),0))
"RTN","XU8P608",77,0)
 I DA D DELETE^XULMU(8993,DA)
"RTN","XU8P608",78,0)
 Q $$ADD^XULMU(8993,,.DATA,.ERROR)
"RTN","XU8P608",79,0)
 ;
"RTN","XU8P608",80,0)
 K DATA
"RTN","XU8P608",81,0)
 F  S LINE=$T(LOCKS+OFFSET^@RTN),OFFSET=OFFSET+1 D  Q:QUIT
"RTN","XU8P608",82,0)
 .N DATA
"RTN","XU8P608",83,0)
 .I $P(LINE,";",3)="SUBSCRIPT" D  Q
"RTN","XU8P608",84,0)
 ..N PARENT S PARENT=DA N DA
"RTN","XU8P608",85,0)
 ..S LINE=$P(LINE,";",4,99)
"RTN","XU8P608",86,0)
 ..S DATA(.01)=$P(LINE,"^")
"RTN","XU8P608",87,0)
 ..S DATA(.02)=$P(LINE,"^",2)
"RTN","XU8P608",88,0)
 ..S DATA(.04)=$P(LINE,"^",4)
"RTN","XU8P608",89,0)
 ..S DA(1)=PARENT
"RTN","XU8P608",90,0)
 ..S DA=$$ADD^XULMU(8993.02,.DA,.DATA)
"RTN","XU8P608",91,0)
 ..S LINE=$T(LOCKS+OFFSET^@RTN)
"RTN","XU8P608",92,0)
 .S OFFSET=OFFSET-1,QUIT=1
"RTN","XU8P608",93,0)
 Q
"RTN","XU8P608",94,0)
 ;
"RTN","XU8P608",95,0)
INPUT2 ;Add system lock list to parameters
"RTN","XU8P608",96,0)
 N IEN,LOCK,RTN,OFFSET,TEXT,EXIT,SITE
"RTN","XU8P608",97,0)
 S EXIT=0
"RTN","XU8P608",98,0)
 S IEN=$O(^XLM(8993.1,0))
"RTN","XU8P608",99,0)
 I 'IEN D
"RTN","XU8P608",100,0)
 .N DATA
"RTN","XU8P608",101,0)
 .S SITE=+$$SITE^VASITE
"RTN","XU8P608",102,0)
 .I SITE<1 S SITE=$O(^XTV(8989.3,0)) I SITE S SITE=$P($G(^XTV(8989.3,SITE,"XUS")),"^",17)
"RTN","XU8P608",103,0)
 .I 'SITE S SITE="NOT YET ENTERED"
"RTN","XU8P608",104,0)
 .S DATA(.01)=SITE
"RTN","XU8P608",105,0)
 .S IEN=$$ADD^XULMU(8993.1,,.DATA)
"RTN","XU8P608",106,0)
 S RTN="XU8P608B"
"RTN","XU8P608",107,0)
 S OFFSET=1
"RTN","XU8P608",108,0)
 F  S TEXT=$T(LOCKS+OFFSET^@RTN) Q:'$L(TEXT)  Q:EXIT  D
"RTN","XU8P608",109,0)
 .S LOCK=$P(TEXT,";;",2,99)
"RTN","XU8P608",110,0)
 .I LOCK="" S EXIT=1 Q
"RTN","XU8P608",111,0)
 .I LOCK="EXIT" S EXIT=1 Q
"RTN","XU8P608",112,0)
 .S OFFSET=OFFSET+1
"RTN","XU8P608",113,0)
 .Q:$D(^XLM(8993.1,"AC",LOCK))
"RTN","XU8P608",114,0)
 .N DATA,DA
"RTN","XU8P608",115,0)
 .S DA(1)=IEN
"RTN","XU8P608",116,0)
 .I $E(LOCK,1)="^" D
"RTN","XU8P608",117,0)
 ..S DATA(.01)=$P($P(LOCK,"^",2,99),"(")
"RTN","XU8P608",118,0)
 ..S DATA(.02)=$P(LOCK,"^",2,99)
"RTN","XU8P608",119,0)
 ..S DATA(.03)=1
"RTN","XU8P608",120,0)
 .E  D
"RTN","XU8P608",121,0)
 ..S DATA(.01)=$P(LOCK,"(")
"RTN","XU8P608",122,0)
 ..S DATA(.02)=LOCK
"RTN","XU8P608",123,0)
 ..S DATA(.03)=0
"RTN","XU8P608",124,0)
 .D ADD^XULMU(8993.15,.DA,.DATA)
"RTN","XU8P608",125,0)
 ;
"RTN","XU8P608",126,0)
 Q
"RTN","XU8P608",127,0)
 ;
"RTN","XU8P608B")
0^12^B804645
"RTN","XU8P608B",1,0)
XU8P608B ;IRMFO-ALB/CJM - Kernel Lock Manager ;12/09/2012
"RTN","XU8P608B",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XU8P608B",3,0)
 ;;
"RTN","XU8P608B",4,0)
 ;;
"RTN","XU8P608B",5,0)
 ;;List of system locks
"RTN","XU8P608B",6,0)
 ;;
"RTN","XU8P608B",7,0)
LOCKS ;;START
"RTN","XU8P608B",8,0)
 ;;^HLB(
"RTN","XU8P608B",9,0)
 ;;^ROUTINE(
"RTN","XU8P608B",10,0)
 ;;^$CLUSTER
"RTN","XU8P608B",11,0)
 ;;^%SYS("CSP","Daemon"
"RTN","XU8P608B",12,0)
 ;;^%ZTSCH
"RTN","XU8P608B",13,0)
 ;;^AYI(177100.39
"RTN","XU8P608B",14,0)
 ;;^CACHE
"RTN","XU8P608B",15,0)
 ;;^DDP
"RTN","XU8P608B",16,0)
 ;;^GATEWAY
"RTN","XU8P608B",17,0)
 ;;^HLCS
"RTN","XU8P608B",18,0)
 ;;^HLMA
"RTN","XU8P608B",19,0)
 ;;^HLTMP
"RTN","XU8P608B",20,0)
 ;;^LA("ADL"
"RTN","XU8P608B",21,0)
 ;;^LAHM
"RTN","XU8P608B",22,0)
 ;;^MAG
"RTN","XU8P608B",23,0)
 ;;^RGWEB("PORT"
"RTN","XU8P608B",24,0)
 ;;^RMPO
"RTN","XU8P608B",25,0)
 ;;^TASKMGR
"RTN","XU8P608B",26,0)
 ;;^VDEFHL7
"RTN","XU8P608B",27,0)
 ;;^VEFS
"RTN","XU8P608B",28,0)
 ;;^Waiters
"RTN","XU8P608B",29,0)
 ;;^XMB
"RTN","XU8P608B",30,0)
 ;;^XTMP("HL7 FAST PURGE
"RTN","XU8P608B",31,0)
 ;;^XTMP("MAGJ2"
"RTN","XU8P608B",32,0)
 ;;^XTMP("PXRM PXK EVENT5
"RTN","XU8P608B",33,0)
 ;;^XUTL("XQORM"
"RTN","XU8P608B",34,0)
 ;;^XWB(
"RTN","XU8P608B",35,0)
 ;;XWB
"RTN","XU8P608B",36,0)
 ;;HL
"RTN","XU8P608B",37,0)
 ;;^MDD("CPGATEWAY"
"RTN","XU8P608B",38,0)
 ;;EXIT
"RTN","XULM")
0^2^B81106667
"RTN","XULM",1,0)
XULM ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;12/09/2012
"RTN","XULM",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULM",4,0)
 ;
"RTN","XULM",5,0)
 ;  ******************************************************************
"RTN","XULM",6,0)
 ;  *                                                                *
"RTN","XULM",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULM",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULM",9,0)
 ;  *                                                                *
"RTN","XULM",10,0)
 ;  ******************************************************************
"RTN","XULM",11,0)
 ;
"RTN","XULM",12,0)
 ;
"RTN","XULM",13,0)
MAIN ;Main Program
"RTN","XULM",14,0)
 N XUPARMS,ERROR,NODE,WHERETO,RESULT,VALMIOXY,VALMSGR,VALMWD,XWBCRLFL,NIO
"RTN","XULM",15,0)
 ;
"RTN","XULM",16,0)
 N $ETRAP,$ESTACK S $ETRAP="G ERROR^XULM"
"RTN","XULM",17,0)
 ;
"RTN","XULM",18,0)
 I $$VERSION^%ZOSV(1)'["Cache" W !,"This application is for Cache systems only!" D PAUSE^XULMU QUIT
"RTN","XULM",19,0)
 ;
"RTN","XULM",20,0)
 ;Automatic update of HOSTS IP addresses
"RTN","XULM",21,0)
 ;D GETIP^XULMU
"RTN","XULM",22,0)
 ;
"RTN","XULM",23,0)
 I '$$GETPARMS^XULMP(.XUPARMS,.ERROR) W:$L($G(ERROR)) !,ERROR Q
"RTN","XULM",24,0)
 I 'XUPARMS("ON?") W "This application has been disabled. Please contact the application manager.",!! D PAUSE^XULMU Q
"RTN","XULM",25,0)
 S XUPARMS("LOCKS")=$NA(^XTMP("XULM",$J,"LOCKS",0)) ;location where lock table is placed
"RTN","XULM",26,0)
 S XUPARMS("LOCK INDICES")=$NA(^XTMP("XULM",$J,"LOCK IDX",0)) ;indices on @XUPARMS@(LOCKS)
"RTN","XULM",27,0)
 I (XUPARMS("NODES")>1)!'$D(XUPARMS("NODES",$$NODE^XULMU)) D  Q:ERROR
"RTN","XULM",28,0)
 .N LOGIN
"RTN","XULM",29,0)
 .I '$$LOGIN(.LOGIN,.ERROR) W:$L(ERROR) !,ERROR S ERROR=1 Q
"RTN","XULM",30,0)
 .S XUPARMS("LOGIN")=LOGIN
"RTN","XULM",31,0)
 Q:'$$GETLOCKS(.XUPARMS)
"RTN","XULM",32,0)
 W !!,"Building the display screen...."
"RTN","XULM",33,0)
 D
"RTN","XULM",34,0)
 .N IDX,LOCKS,XUENTRY,XULMEXIT,XUTOPIC
"RTN","XULM",35,0)
 .S XULMEXIT=0
"RTN","XULM",36,0)
 .S LOCKS=XUPARMS("LOCKS"),IDX=XUPARMS("LOCK INDICES")
"RTN","XULM",37,0)
 .D EN^VALM("XULM LOCK MANAGER")
"RTN","XULM",38,0)
 ;
"RTN","XULM",39,0)
 K ^XTMP("XULM",$J)
"RTN","XULM",40,0)
 D FULL^VALM1
"RTN","XULM",41,0)
 Q
"RTN","XULM",42,0)
 ;
"RTN","XULM",43,0)
GETLOCKS(PARMS) ; query each & every node for its lock table
"RTN","XULM",44,0)
 N NODE,QUIT,IDX,LOCKS
"RTN","XULM",45,0)
 S LOCKS=PARMS("LOCKS"),IDX=PARMS("LOCK INDICES")
"RTN","XULM",46,0)
 K @LOCKS,@IDX,PARMS("REPORTING NODES")
"RTN","XULM",47,0)
 W !!,"Compiling the locks..."
"RTN","XULM",48,0)
 S NODE="",QUIT=0
"RTN","XULM",49,0)
 F  S NODE=$O(PARMS("NODES",NODE)) Q:NODE=""  D  Q:QUIT
"RTN","XULM",50,0)
 .I $$SAMENODE^XULMU(NODE) D
"RTN","XULM",51,0)
 ..;
"RTN","XULM",52,0)
 ..;Don't need the M-to-M broker to run RPC on this node!
"RTN","XULM",53,0)
 ..I $$LOCKS^XULMRPC("",LOCKS,,0) S PARMS("REPORTING NODES",$$NODE^XULMU)=""
"RTN","XULM",54,0)
 .E  D
"RTN","XULM",55,0)
 ..;
"RTN","XULM",56,0)
 ..;need to use the broker
"RTN","XULM",57,0)
 ..N CONNECT,ERROR,RPTNODE
"RTN","XULM",58,0)
 ..N $ETRAP,$ESTACK S $ETRAP="G ERROR2^XULM"
"RTN","XULM",59,0)
 ..S CONNECT=0
"RTN","XULM",60,0)
 ..L +@LOCKS@("XULM REPORTED NODE"):1 L -@LOCKS@("XULM REPORTED NODE")
"RTN","XULM",61,0)
 ..K @LOCKS@("XULM REPORTED NODE")
"RTN","XULM",62,0)
 ..L +@LOCKS@("XULM REPORTED NODE"):1 L -@LOCKS@("XULM REPORTED NODE")
"RTN","XULM",63,0)
 ..D
"RTN","XULM",64,0)
 ...S CONNECT=$$LOCKRPC(NODE,PARMS("NODES",NODE,"IP ADDRESS"),PARMS("NODES",NODE,"PORT"),PARMS("LOGIN"),LOCKS,.ERROR)
"RTN","XULM",65,0)
 ...I CONNECT D
"RTN","XULM",66,0)
 ....L +@LOCKS@("XULM REPORTED NODE"):1 L -@LOCKS@("XULM REPORTED NODE")
"RTN","XULM",67,0)
 ....I '$L($G(@LOCKS@("XULM REPORTED NODE"))) D
"RTN","XULM",68,0)
 .....N I F I=1:1:5 Q:$L($G(@LOCKS@("XULM REPORTED NODE")))
"RTN","XULM",69,0)
 ....S RPTNODE=$G(@LOCKS@("XULM REPORTED NODE"))
"RTN","XULM",70,0)
 ....Q:'$L(RPTNODE)
"RTN","XULM",71,0)
 ....I NODE'=RPTNODE,'$D(PARMS("REPORTING NODES",RPTNODE)) D
"RTN","XULM",72,0)
 .....N DA,DATA
"RTN","XULM",73,0)
 .....S DA(1)=1,DA=PARMS("NODES",NODE)
"RTN","XULM",74,0)
 .....S DATA(.01)=RPTNODE
"RTN","XULM",75,0)
 .....D UPD^XULMU(8993.11,.DA,.DATA)
"RTN","XULM",76,0)
 .....M PARMS("NODES",RPTNODE)=PARMS("NODES",NODE)
"RTN","XULM",77,0)
 .....K PARMS("NODES",NODE)
"RTN","XULM",78,0)
 ....S PARMS("REPORTING NODES",RPTNODE)=""
"RTN","XULM",79,0)
 ..I 'CONNECT,'$D(PARMS("REPORTING NODES",NODE)) W !,"Failed to connect to node '"_NODE_"': ",ERROR I '$$ASKYESNO^XULMU("Continue with lock display","YES") S QUIT=1 Q
"RTN","XULM",80,0)
 ;
"RTN","XULM",81,0)
 ;
"RTN","XULM",82,0)
 ;match against the LOCK DICTIONARY and set indices
"RTN","XULM",83,0)
 D:'QUIT
"RTN","XULM",84,0)
 .N LOCK,OWNER,PID,NODE
"RTN","XULM",85,0)
 .S LOCK=""
"RTN","XULM",86,0)
 .L +@LOCKS:5 L -@LOCKS
"RTN","XULM",87,0)
 .F  S LOCK=$O(@LOCKS@(LOCK)) Q:LOCK=""  D
"RTN","XULM",88,0)
 ..;
"RTN","XULM",89,0)
 ..S NODE=""
"RTN","XULM",90,0)
 ..F  S NODE=$O(@LOCKS@(LOCK,NODE)) Q:NODE=""  D
"RTN","XULM",91,0)
 ...;set the OWNER and PID index
"RTN","XULM",92,0)
 ...S OWNER=$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2)
"RTN","XULM",93,0)
 ...S:$L(OWNER) @IDX@("OWNER",OWNER_"^"_+@LOCKS@(LOCK,NODE,"OWNER"),LOCK,NODE)=""
"RTN","XULM",94,0)
 ...S PID=@LOCKS@(LOCK,NODE,"PID")
"RTN","XULM",95,0)
 ...S:$L(PID) @IDX@("PID",PID,LOCK,NODE)="",@IDX@("PID",PID)=1+$G(@IDX@("PID",PID))
"RTN","XULM",96,0)
 ...;
"RTN","XULM",97,0)
 ...N TEMPLATE,FILES,VARS
"RTN","XULM",98,0)
 ...S TEMPLATE=$$FIND^XULMLD(LOCK,.FILES,.VARS)
"RTN","XULM",99,0)
 ...I TEMPLATE D
"RTN","XULM",100,0)
 ....S @LOCKS@(LOCK,NODE,"TEMPLATE")=TEMPLATE
"RTN","XULM",101,0)
 ....M @LOCKS@(LOCK,NODE,"FILES")=FILES,@LOCKS@(LOCK,NODE,"VARIABLES")=VARS
"RTN","XULM",102,0)
 ....;
"RTN","XULM",103,0)
 ....;set index on the file references
"RTN","XULM",104,0)
 ....S FILES="" F  S FILES=$O(FILES(FILES)) Q:'FILES  S @IDX@("FILE",FILES,LOCK,NODE)=""
"RTN","XULM",105,0)
 Q 'QUIT
"RTN","XULM",106,0)
 ;
"RTN","XULM",107,0)
LOGIN(LOGIN,ERROR) ;
"RTN","XULM",108,0)
 S ERROR=""
"RTN","XULM",109,0)
 D
"RTN","XULM",110,0)
 .N OPTION
"RTN","XULM",111,0)
 .I '$D(DUZ)#2 S ERROR="Your DUZ is not defined." Q
"RTN","XULM",112,0)
 .I '$D(^XUSEC("XULM LOCKS",DUZ)) S ERROR="You do not hold the XULM LOCKS security key." Q
"RTN","XULM",113,0)
 .; 
"RTN","XULM",114,0)
 .; Check for user having context option
"RTN","XULM",115,0)
 .S OPTION=$O(^DIC(19,"B","XULM RPC BROKER CONTEXT",0))
"RTN","XULM",116,0)
 .I 'OPTION S ERROR="The application XULM RPC BROKER CONTEXT option was not found." Q
"RTN","XULM",117,0)
 .I '$D(^VA(200,DUZ,203,"B",OPTION)) S ERROR="You do not have access to the XULM RPC BROKER CONTEXT option." Q
"RTN","XULM",118,0)
 .;
"RTN","XULM",119,0)
 Q:$L(ERROR) 0
"RTN","XULM",120,0)
 Q $$ASKAV(.LOGIN)
"RTN","XULM",121,0)
 ;
"RTN","XULM",122,0)
ASKAV(LOGIN) ; Ask user for access and verify code, return in LOGIN
"RTN","XULM",123,0)
 N OK,CNT,XUF,XUSTMP
"RTN","XULM",124,0)
 D
"RTN","XULM",125,0)
 .S (OK,XUF)=0
"RTN","XULM",126,0)
 .S XUSTMP(51)="ACCESS CODE:",XUSTMP(52)="VERIFY CODE:"
"RTN","XULM",127,0)
 .F CNT=1:1:3 D  Q:OK
"RTN","XULM",128,0)
 ..W !!,"Please enter your VistA access and verify codes.",!
"RTN","XULM",129,0)
 ..X ^%ZOSF("EOFF") S LOGIN=$$ASKAV^XUS() X ^%ZOSF("EON")
"RTN","XULM",130,0)
 ..Q:LOGIN="^;^"
"RTN","XULM",131,0)
 ..S OK=$$CHECKAV^XUS(LOGIN)
"RTN","XULM",132,0)
 ..I OK=0 D  Q
"RTN","XULM",133,0)
 ...W !,"Invalid access/verify code pair"
"RTN","XULM",134,0)
 ...I CNT<3,'$$ASKYESNO^XULMU("Try again","YES") S CNT=4
"RTN","XULM",135,0)
 ..;S ACCESS=$$ENCRYP^XUSRB1($P(LOGIN,";")),VERIFY=$$ENCRYP^XUSRB1($P(LOGIN,";",2))
"RTN","XULM",136,0)
 Q OK
"RTN","XULM",137,0)
 ;
"RTN","XULM",138,0)
LOCKRPC(NODE,IP,PORT,LOGIN,GLOBAL,XULMERR) ;
"RTN","XULM",139,0)
 ;Run the XULM LOCKS RPC on the specified system
"RTN","XULM",140,0)
 ;
"RTN","XULM",141,0)
 N TMP,DIVISION,XURESULT
"RTN","XULM",142,0)
 K XULMERR S XULMERR=""
"RTN","XULM",143,0)
 K ^TMP("XWBM2ME",$J,"ERROR")
"RTN","XULM",144,0)
 ;before trying to logon, check if port can be opened
"RTN","XULM",145,0)
 I '$$TEST(NODE,IP,PORT) S XULMERR="RPC Server appears to not be running" Q 0
"RTN","XULM",146,0)
 D
"RTN","XULM",147,0)
 .I '$$CONNECT^XWBM2MC(PORT,IP,LOGIN) S XULMERR="Connection error: Port, IP or server logon error." Q
"RTN","XULM",148,0)
 .I '$$SETCONTX^XWBM2MC("XULM RPC BROKER CONTEXT") S XULMERR="Type 'B' option does not exist on the VistA server." Q
"RTN","XULM",149,0)
 .I '$$GETDIV^XWBM2MC("DIVISION") S XULMERR="Division error: Could not find the user's division." Q
"RTN","XULM",150,0)
 .I '$$SETDIV^XWBM2MC(DIVISION(1)) S XULMERR="Division error: Could not setup the user's division." Q
"RTN","XULM",151,0)
 .D
"RTN","XULM",152,0)
 ..S XULMERR="Unable to execute the remote procedure = 'XULM GET LOCK TABLE'!"
"RTN","XULM",153,0)
 ..S TMP($J,"TYPE")="STRING",TMP($J,"VALUE")=GLOBAL
"RTN","XULM",154,0)
 ..Q:'$$PARAM^XWBM2MC(1,$NA(TMP($J)))
"RTN","XULM",155,0)
 ..;
"RTN","XULM",156,0)
 ..S XURESULT=$NA(^XTMP("XULM",$J,"RPC RESULT",0)) ;@XURESULT is where the RPCs place a return value
"RTN","XULM",157,0)
 ..S TMP($J,"TYPE")="STRING",TMP($J,"VALUE")=XURESULT
"RTN","XULM",158,0)
 ..Q:'$$PARAM^XWBM2MC(2,$NA(TMP($J)))
"RTN","XULM",159,0)
 ..;
"RTN","XULM",160,0)
 ..Q:'$$CALLRPC^XWBM2MC("XULM GET LOCK TABLE",,1)
"RTN","XULM",161,0)
 ..S XULMERR=""
"RTN","XULM",162,0)
 ;
"RTN","XULM",163,0)
 D CLOSE^XWBM2MC()
"RTN","XULM",164,0)
 U $PRINCIPAL
"RTN","XULM",165,0)
 D HOME^%ZIS
"RTN","XULM",166,0)
 Q:$L(XULMERR) 0
"RTN","XULM",167,0)
 Q 1
"RTN","XULM",168,0)
 ;
"RTN","XULM",169,0)
KILLRPC(IP,PORT,LOGIN,PID,ERROR) ;
"RTN","XULM",170,0)
 ;Run the XULM KILL PROCESS RPC on the specified system
"RTN","XULM",171,0)
 ;
"RTN","XULM",172,0)
 N TMP,DIVISION,XURESULT
"RTN","XULM",173,0)
 S XURESULT=$NA(^XTMP("XULM",$J,"RPC RESULT",0)) ;@XURESULT is where the RPCs place a return value
"RTN","XULM",174,0)
 K ERROR S ERROR=""
"RTN","XULM",175,0)
 D
"RTN","XULM",176,0)
 .N ERRCNT S ERRCNT=0
"RTN","XULM",177,0)
 .I '$$CONNECT^XWBM2MC(PORT,IP,LOGIN) S ERROR="Connection error: Port, IP or server logon error." Q
"RTN","XULM",178,0)
 .I '$$SETCONTX^XWBM2MC("XULM RPC BROKER CONTEXT") S ERROR="Type 'B' option does not exist on the VistA server." Q
"RTN","XULM",179,0)
 .I '$$GETDIV^XWBM2MC("DIVISION") S ERROR="Division error: Could not find the user's division." Q
"RTN","XULM",180,0)
 .I '$$SETDIV^XWBM2MC(DIVISION(1)) S ERROR="Division error: Could not setup the user's division." Q
"RTN","XULM",181,0)
 .D
"RTN","XULM",182,0)
 ..S TMP($J,"TYPE")="STRING",TMP($J,"VALUE")=PID
"RTN","XULM",183,0)
 ..I '$$PARAM^XWBM2MC(1,$NA(TMP($J))) S ERROR="Call to PARAM^XQBM2MC filed while trying to execute the remote procedure XULM KILL PROCESS,",ERROR(1)="PID="_PID Q
"RTN","XULM",184,0)
 ..;
"RTN","XULM",185,0)
 ..S TMP($J,"TYPE")="STRING",TMP($J,"VALUE")=XURESULT
"RTN","XULM",186,0)
 ..I '$$PARAM^XWBM2MC(2,$NA(TMP($J))) S ERROR="Call to PARAM^XQBM2MC failed while trying to execute the remote procedure XULM KILL PROCESS,",ERROR(1)="XURESULT="_XURESULT Q
"RTN","XULM",187,0)
 ..;
"RTN","XULM",188,0)
 ..I '$$CALLRPC^XWBM2MC("XULM KILL PROCESS",,1) S ERROR="Call to CALLRPC^XQBM2MC failed while trying to execute the remote procedure",ERROR(1)="XULM KILL PROCESS, PID="_PID_" ,XURESULT="_XURESULT Q
"RTN","XULM",189,0)
 ..S ERROR=""
"RTN","XULM",190,0)
 ;
"RTN","XULM",191,0)
 D CLOSE^XWBM2MC()
"RTN","XULM",192,0)
 U $PRINCIPAL
"RTN","XULM",193,0)
 D HOME^%ZIS
"RTN","XULM",194,0)
 Q:$L(ERROR) 0
"RTN","XULM",195,0)
 Q 1
"RTN","XULM",196,0)
 ;
"RTN","XULM",197,0)
ERROR ;
"RTN","XULM",198,0)
 S $ETRAP="Q:$QUIT """"  Q"
"RTN","XULM",199,0)
 K XUPARMS("LOGIN"),LOGIN,PARMS("LOGIN")
"RTN","XULM",200,0)
 Q:$QUIT ""
"RTN","XULM",201,0)
 Q
"RTN","XULM",202,0)
 ;
"RTN","XULM",203,0)
ERROR2 ;
"RTN","XULM",204,0)
 S $ETRAP="Q:$QUIT """"  Q"
"RTN","XULM",205,0)
 S ERROR=$ZE
"RTN","XULM",206,0)
 S $ECODE=""
"RTN","XULM",207,0)
 S CONNECT=0
"RTN","XULM",208,0)
 U $PRINCIPAL
"RTN","XULM",209,0)
 Q:$QUIT "" Q
"RTN","XULM",210,0)
 Q
"RTN","XULM",211,0)
TEST(NODE,IP,SOCK) ;Tests if the port can be opened - waits only 2 seconds.
"RTN","XULM",212,0)
 ;If not, asks user if  he wants to try to connect anyway - can take
"RTN","XULM",213,0)
 ;60 seconds.
"RTN","XULM",214,0)
 ;
"RTN","XULM",215,0)
 N POP,TO,OK
"RTN","XULM",216,0)
 S TO=2
"RTN","XULM",217,0)
 D CONT^%ZISTCP
"RTN","XULM",218,0)
 S OK='POP
"RTN","XULM",219,0)
 D CLOSE^%ZISTCP
"RTN","XULM",220,0)
 U $PRINCIPAL
"RTN","XULM",221,0)
 I 'OK D
"RTN","XULM",222,0)
 .W !,"Node '"_NODE_"' does not appear to be a valid system name, please correct"
"RTN","XULM",223,0)
 .W !,"if necessary. This node will not be included in the Lockmanager list."
"RTN","XULM",224,0)
 .S OK=$$ASKYESNO^XULMU("Would you like to try to connect anyway (could take a long while)?","NO")
"RTN","XULM",225,0)
 .I OK=0 K PARMS("NODE",NODE)
"RTN","XULM",226,0)
 Q OK
"RTN","XULM",227,0)
EXIT ;clean up and exit
"RTN","XULM",228,0)
 K ^XTMP("XULM",$J)
"RTN","XULM",229,0)
 Q
"RTN","XULM1")
0^3^B50526613
"RTN","XULM1",1,0)
XULM1 ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;12/04/2012
"RTN","XULM1",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULM1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULM1",4,0)
 ;
"RTN","XULM1",5,0)
 ;  ******************************************************************
"RTN","XULM1",6,0)
 ;  *                                                                *
"RTN","XULM1",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULM1",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULM1",9,0)
 ;  *                                                                *
"RTN","XULM1",10,0)
 ;  ******************************************************************
"RTN","XULM1",11,0)
 ;Contains routines for editing and creating entries in the LOCK DICTIONARY
"RTN","XULM1",12,0)
 ;
"RTN","XULM1",13,0)
SNTXLOCK(X,PARTS) ;
"RTN","XULM1",14,0)
 ;
"RTN","XULM1",15,0)
 ;Checks the syntax for a lock, returns 1 if ok, 0 otherwise
"RTN","XULM1",16,0)
 ;
"RTN","XULM1",17,0)
 ;Input: 
"RTN","XULM1",18,0)
 ;  X - the value of the LOCK TEMPLATE that was entered
"RTN","XULM1",19,0)
 ;  DA - if defined, it should be the ien of the record that is being edited
"RTN","XULM1",20,0)
 ;Output:
"RTN","XULM1",21,0)
 ;  function returns 1 if X is syntactically correct, 0 otherwise
"RTN","XULM1",22,0)
 ;  PARTS - optional, pass-by-references.  Returns the parsed of the LOCK TEMPLATE
"RTN","XULM1",23,0)
 ;  PARTS(<subscripts>):
"RTN","XULM1",24,0)
 ;       ("GLOBAL") =1 if the lock is on a global, 0 otherwise
"RTN","XULM1",25,0)
 ;       ("VARIABLE") = the locked variable, without subscripts
"RTN","XULM1",26,0)
 ;       (0) = count of subscripts
"RTN","XULM1",27,0)
 ;       (<1,2,3,...>) = the subscripts, in the order they occur
"RTN","XULM1",28,0)
 ;
"RTN","XULM1",29,0)
 N LOCK,BAD,NODE0,NODE1
"RTN","XULM1",30,0)
 I $E(X)=" " S X=$E(X,2,500)
"RTN","XULM1",31,0)
 I $L(X)>245 Q 0
"RTN","XULM1",32,0)
 I $G(DA) S NODE1=$G(^XLM(8993,DA,1)) I $P(NODE1,"^",2),$E(X)'="^" S X="^"_X
"RTN","XULM1",33,0)
 ;
"RTN","XULM1",34,0)
 S LOCK=X
"RTN","XULM1",35,0)
 K PARTS
"RTN","XULM1",36,0)
 S PARTS(0)=0
"RTN","XULM1",37,0)
 S PARTS("GLOBAL")=0
"RTN","XULM1",38,0)
 S BAD=0
"RTN","XULM1",39,0)
 ;
"RTN","XULM1",40,0)
 I $E(LOCK)="^" D
"RTN","XULM1",41,0)
 .S LOCK=$E(LOCK,2,245)
"RTN","XULM1",42,0)
 .S PARTS("GLOBAL")=1
"RTN","XULM1",43,0)
 S PARTS("VARIABLE")=$P(LOCK,"(")
"RTN","XULM1",44,0)
 I $G(DA) S NODE0=$G(^XLM(8993,DA,0)),NODE1=$G(^XLM(8993,DA,1)) I $L(NODE1) Q:($L($P(NODE1,"^",2))&($P(NODE1,"^",2)'=PARTS("GLOBAL")))!($L($P(NODE0,"^"))&($P($P(NODE0,"^"),"(")'=PARTS("VARIABLE"))) 0
"RTN","XULM1",45,0)
 D
"RTN","XULM1",46,0)
 .N COUNT
"RTN","XULM1",47,0)
 .I '$$SNTXVAR(PARTS("VARIABLE")) S BAD=1 Q
"RTN","XULM1",48,0)
 .Q:LOCK'["("
"RTN","XULM1",49,0)
 .I $E(LOCK,$L(LOCK))'=")" S BAD=1 Q
"RTN","XULM1",50,0)
 .S LOCK=$P(LOCK,"(",2,99)
"RTN","XULM1",51,0)
 .F COUNT=1:1 S PARTS=$P(LOCK,",",COUNT) Q:PARTS=""  D  Q:BAD
"RTN","XULM1",52,0)
 ..I $E(PARTS,$L(PARTS))=")" S PARTS=$E(PARTS,1,$L(PARTS)-1) I $P(LOCK,",",COUNT+1)'="" S BAD=1 Q
"RTN","XULM1",53,0)
 ..S PARTS(COUNT)=PARTS,PARTS(0)=COUNT
"RTN","XULM1",54,0)
 ..;
"RTN","XULM1",55,0)
 ..D
"RTN","XULM1",56,0)
 ...;PARTS is either a number, a string, or a variable
"RTN","XULM1",57,0)
 ...I PARTS=+PARTS S PARTS(COUNT,"VARIABLE")=0 Q
"RTN","XULM1",58,0)
 ...I $E(PARTS)="""",$E(PARTS,$L(PARTS))="""" S PARTS(COUNT,"VARIABLE")=0 Q
"RTN","XULM1",59,0)
 ...I '$$SNTXVAR(PARTS) S BAD=1 Q
"RTN","XULM1",60,0)
 ...S PARTS(COUNT,"VARIABLE")=1 Q
"RTN","XULM1",61,0)
 ;
"RTN","XULM1",62,0)
 I BAD K PARTS S PARTS(0)=0
"RTN","XULM1",63,0)
 S PARTS=""
"RTN","XULM1",64,0)
 Q 'BAD
"RTN","XULM1",65,0)
SNTXVAR(X) ;
"RTN","XULM1",66,0)
 ;Checks the syntax for a variable.  Returns 1 if ok, 0 otherwise.
"RTN","XULM1",67,0)
 ;
"RTN","XULM1",68,0)
 N PATTERN,LEN
"RTN","XULM1",69,0)
 S LEN=$L(X)
"RTN","XULM1",70,0)
 Q:LEN>8 0
"RTN","XULM1",71,0)
 S PATTERN=$S(LEN>1:"1U"_(LEN-1)_"UN",1:"1U")
"RTN","XULM1",72,0)
 I X?@PATTERN Q 1
"RTN","XULM1",73,0)
 Q 0
"RTN","XULM1",74,0)
 ;
"RTN","XULM1",75,0)
ADDPARTS(IEN) ;
"RTN","XULM1",76,0)
 ;Adds the parts parsed from the lock template to the dictionary
"RTN","XULM1",77,0)
 ;IEN is the record in the LOCK DICTIONARY.
"RTN","XULM1",78,0)
 ;PARTS is an array containing the elements parsed out of the lock template
"RTN","XULM1",79,0)
 ;
"RTN","XULM1",80,0)
 N TEMPLATE,PARTS
"RTN","XULM1",81,0)
 S TEMPLATE=$$TEMPLATE^XULMU(IEN)
"RTN","XULM1",82,0)
 Q:'$$SNTXLOCK(TEMPLATE,.PARTS)
"RTN","XULM1",83,0)
 N ORDER,DATA,DA
"RTN","XULM1",84,0)
 S DATA(1.02)=PARTS("GLOBAL")
"RTN","XULM1",85,0)
 D UPD^XULMU(8993,IEN,.DATA)
"RTN","XULM1",86,0)
 K DATA
"RTN","XULM1",87,0)
 F ORDER=1:1:PARTS(0) D
"RTN","XULM1",88,0)
 .S DA(1)=IEN
"RTN","XULM1",89,0)
 .S DATA(.01)=ORDER
"RTN","XULM1",90,0)
 .S DATA(.02)=PARTS(ORDER)
"RTN","XULM1",91,0)
 .S DATA(.04)=$S($G(PARTS(ORDER,"VARIABLE")):"V",1:"L")
"RTN","XULM1",92,0)
 .S DA=$O(^XLM(8993,DA(1),2,"B",ORDER,0))
"RTN","XULM1",93,0)
 .I 'DA D
"RTN","XULM1",94,0)
 ..D ADD^XULMU(8993.02,.DA,.DATA)
"RTN","XULM1",95,0)
 .E  D
"RTN","XULM1",96,0)
 ..D UPD^XULMU(8993.02,.DA,.DATA)
"RTN","XULM1",97,0)
 ;
"RTN","XULM1",98,0)
 ;delete any subscripts not found in the LOCK TEMPLATE
"RTN","XULM1",99,0)
 S ORDER=PARTS(0) F  S ORDER=$O(^XLM(8993,IEN,2,"B",ORDER)) Q:'ORDER  S DA=$O(^XLM(8993,IEN,2,"B",ORDER,0)) I DA S DA(1)=IEN D DELETE^XULMU(8993.02,.DA)
"RTN","XULM1",100,0)
 Q
"RTN","XULM1",101,0)
 ;
"RTN","XULM1",102,0)
SELECT() ;Select a LOCK TEMPLATE to edit
"RTN","XULM1",103,0)
 N DA,DIC,Y,DTOUT
"RTN","XULM1",104,0)
 S DA=0
"RTN","XULM1",105,0)
 S DIC=8993
"RTN","XULM1",106,0)
 S DIC(0)="AEMNO"
"RTN","XULM1",107,0)
 W !,"** You cannot enter the '^' prefix when selecting a lock template. **"
"RTN","XULM1",108,0)
 D ^DIC
"RTN","XULM1",109,0)
 S:+Y>0 DA=+Y
"RTN","XULM1",110,0)
 Q DA
"RTN","XULM1",111,0)
 ;
"RTN","XULM1",112,0)
EDIT(DA) ;Edit the lock dictionary entry ien=DA
"RTN","XULM1",113,0)
 ;
"RTN","XULM1",114,0)
 Q:'$G(DA)
"RTN","XULM1",115,0)
 N DIE,DR,Y,RET,DTOUT,ORDER,D,D0,DI,DQ,QUIT
"RTN","XULM1",116,0)
 S QUIT=0
"RTN","XULM1",117,0)
 ;
"RTN","XULM1",118,0)
 D
"RTN","XULM1",119,0)
 .S RET=DA
"RTN","XULM1",120,0)
 .S DR=".01;1.02;1.01;1.03//YES;W !!,""What is the purpose of the lock?"",!;4Purpose;S QUIT=0"
"RTN","XULM1",121,0)
 .S DIE=8993
"RTN","XULM1",122,0)
 .S QUIT=1
"RTN","XULM1",123,0)
 .D ^DIE
"RTN","XULM1",124,0)
 .Q:QUIT
"RTN","XULM1",125,0)
 .D ADDPARTS(RET)
"RTN","XULM1",126,0)
 .S DA(1)=RET
"RTN","XULM1",127,0)
 .F ORDER=1:1 S DA=$O(^XLM(8993,DA(1),2,"B",ORDER,0)) Q:'DA  D  I QUIT S QUIT=0 Q
"RTN","XULM1",128,0)
 ..I ORDER=1 W !!,"Checking for variables within the LOCK TEMPLATE..."
"RTN","XULM1",129,0)
 ..N NODE
"RTN","XULM1",130,0)
 ..S NODE=$G(^XLM(8993,DA(1),2,DA,0))
"RTN","XULM1",131,0)
 ..I $P(NODE,"^",4)="V" D
"RTN","XULM1",132,0)
 ...N VARIABLE
"RTN","XULM1",133,0)
 ...S VARIABLE=$P(NODE,"^",2)
"RTN","XULM1",134,0)
 ...W !!,"Found variable '"_VARIABLE_"'..."
"RTN","XULM1",135,0)
 ...S DIE="^XLM(8993,DA(1),2,"
"RTN","XULM1",136,0)
 ...W !!,"You can optionally enter MUMPS code to verify that the variable '"_VARIABLE_"'",!,"has a permissible value. It should set Y=0 if not ok, Y=1 if ok.",!
"RTN","XULM1",137,0)
 ...S DR="1Executable check logic"
"RTN","XULM1",138,0)
 ...D ^DIE I $D(DTOUT)!$D(Y) S QUIT=1 Q
"RTN","XULM1",139,0)
 .;
"RTN","XULM1",140,0)
 .W !!,"You can display file identifiers for the locked record, or for a record in"
"RTN","XULM1",141,0)
 .W !,"another file related to the locked record.  Most locks are related to a"
"RTN","XULM1",142,0)
 .W !,"specific patient, so most entries in the lock dictionary should include a"
"RTN","XULM1",143,0)
 .W !,"file reference to the PATIENT file (#2) and to the file of the locked record,"
"RTN","XULM1",144,0)
 .W !,"and perhaps other files as well."
"RTN","XULM1",145,0)
 .W !!,"If you would like to include file references, first select the file, and then",!,"enter the MUMPS code that will retrieve the file identifiers from that file.",!
"RTN","XULM1",146,0)
 .K DA S DA=+RET
"RTN","XULM1",147,0)
 .S DR="3"
"RTN","XULM1",148,0)
 .S DR(2,8993.03)=".01File;W !!,""Enter MUMPS code to return identifiers for the record related to the lock."",!;1MUMPS Code;W !!,""List the identifiers that are returned for this file reference."",!;2Identifiers"
"RTN","XULM1",149,0)
 .S DIE=8993
"RTN","XULM1",150,0)
 .D ^DIE
"RTN","XULM1",151,0)
 .I $D(DTOUT)!$D(Y) S QUIT=1 Q
"RTN","XULM1",152,0)
 Q QUIT
"RTN","XULM1",153,0)
 ;
"RTN","XULM1",154,0)
ASK() ;Ask user if he wants to edit an existing lock template or create
"RTN","XULM1",155,0)
 ;a new one.
"RTN","XULM1",156,0)
 ;
"RTN","XULM1",157,0)
 N DIR
"RTN","XULM1",158,0)
 S DIR(0)="S^A:Add a new entry;E:Edit an existing entry;D:Delete an existing entry"
"RTN","XULM1",159,0)
 S DIR("?")="Do you want to Add, Edit, or Delete an entry in the lock dictionary?"
"RTN","XULM1",160,0)
 W !,DIR("?"),!
"RTN","XULM1",161,0)
 S DIR("B")="E"
"RTN","XULM1",162,0)
 D ^DIR
"RTN","XULM1",163,0)
 I Y="E" D
"RTN","XULM1",164,0)
 .D EDIT($$SELECT)
"RTN","XULM1",165,0)
 E  I Y="D" D
"RTN","XULM1",166,0)
 .D DELETE($$SELECT)
"RTN","XULM1",167,0)
 E  I Y="A" D
"RTN","XULM1",168,0)
 .D EDIT($$CREATE)
"RTN","XULM1",169,0)
 Q
"RTN","XULM1",170,0)
DELETE(IEN) ;
"RTN","XULM1",171,0)
 Q:'IEN
"RTN","XULM1",172,0)
 I $$ASKYESNO^XULMU("Are you sure","NO") D DELETE^XULMU(8993,IEN) W !,"Deleted!"
"RTN","XULM1",173,0)
 Q
"RTN","XULM1",174,0)
 ;
"RTN","XULM1",175,0)
 ;
"RTN","XULM1",176,0)
CREATE() ;Ask the user to enter a LOCK TEMPLATE, then
"RTN","XULM1",177,0)
 ;create a new entry in the lock dictionary.
"RTN","XULM1",178,0)
 ;
"RTN","XULM1",179,0)
 N DA,QUIT
"RTN","XULM1",180,0)
 S (DA,QUIT)=0
"RTN","XULM1",181,0)
 ;
"RTN","XULM1",182,0)
 F  D  Q:QUIT
"RTN","XULM1",183,0)
 .N I,DIR,X,Y
"RTN","XULM1",184,0)
 .N TEMPLATE,GLOBAL
"RTN","XULM1",185,0)
 .S DIR(0)="8993,.01"
"RTN","XULM1",186,0)
 .;ask user for LOCK TEMPLATE
"RTN","XULM1",187,0)
 .D ^DIR
"RTN","XULM1",188,0)
 .I $D(DIRUT) S QUIT=1 K DIRUT Q
"RTN","XULM1",189,0)
 .S GLOBAL=$S($E(X,1,2)["^":1,1:0)
"RTN","XULM1",190,0)
 .S TEMPLATE=$P(X,"^",(1+GLOBAL))
"RTN","XULM1",191,0)
 .I TEMPLATE="" S QUIT=1 QUIT
"RTN","XULM1",192,0)
 .S DA=$O(^XLM(8993,"E",GLOBAL,TEMPLATE,0))
"RTN","XULM1",193,0)
 .S:'DA DA=$O(^XLM(8993,"E",'GLOBAL,TEMPLATE,0))
"RTN","XULM1",194,0)
 .I DA S QUIT='$$ASKYESNO^XULMU("That LOCK TEMPLATE already exists!  Do you want to edit it","NO") I QUIT S DA=0 Q
"RTN","XULM1",195,0)
 .;
"RTN","XULM1",196,0)
 .;create a new entry
"RTN","XULM1",197,0)
 .I 'DA D
"RTN","XULM1",198,0)
 ..N DATA,ERROR
"RTN","XULM1",199,0)
 ..S DATA(.01)=TEMPLATE
"RTN","XULM1",200,0)
 ..S DATA(1.02)=GLOBAL
"RTN","XULM1",201,0)
 ..S DA=$$ADD^XULMU(8993,,.DATA,.ERROR)
"RTN","XULM1",202,0)
 ..I 'DA W !,ERROR
"RTN","XULM1",203,0)
 ..S QUIT=1
"RTN","XULM1",204,0)
 ;
"RTN","XULM1",205,0)
 ;
"RTN","XULM1",206,0)
 Q DA
"RTN","XULM1",207,0)
 ;
"RTN","XULM1",208,0)
 ;
"RTN","XULM1",209,0)
 ;
"RTN","XULMLD")
0^4^B21250798
"RTN","XULMLD",1,0)
XULMLD ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;08/28/2012
"RTN","XULMLD",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMLD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMLD",4,0)
 ;
"RTN","XULMLD",5,0)
 ;  ******************************************************************
"RTN","XULMLD",6,0)
 ;  *                                                                *
"RTN","XULMLD",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMLD",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMLD",9,0)
 ;  *                                                                *
"RTN","XULMLD",10,0)
 ;  ******************************************************************
"RTN","XULMLD",11,0)
 ;
"RTN","XULMLD",12,0)
 ;
"RTN","XULMLD",13,0)
 ;Contains routines that derive information from a lock by using
"RTN","XULMLD",14,0)
 ;the LOCK DICTIONARY
"RTN","XULMLD",15,0)
 ;
"RTN","XULMLD",16,0)
FIND(LOCK,FILES,XULMVAR) ;
"RTN","XULMLD",17,0)
 ;Description:  This function finds a match to the LOCK in the lock
"RTN","XULMLD",18,0)
 ;dictionary.  If successful it returns the ien of the lock template,
"RTN","XULMLD",19,0)
 ;0 otherwise.
"RTN","XULMLD",20,0)
 ;
"RTN","XULMLD",21,0)
 ;Input:
"RTN","XULMLD",22,0)
 ;   LOCK - an entry in the lock table
"RTN","XULMLD",23,0)
 ;Output:
"RTN","XULMLD",24,0)
 ;   function returns the ien of the matching lock template, 0 otherwise
"RTN","XULMLD",25,0)
 ;   FILES (pass-by-reference) a list of files that can be referenced
"RTN","XULMLD",26,0)
 ;                             by LOCK. Subscripts are:
"RTN","XULMLD",27,0)
 ;           (<file #>)=<ien of the entry in FILE REFERENCES multip>
"RTN","XULMLD",28,0)
 ;   XULMVAR (pass-by-references) list of variables found within the lock
"RTN","XULMLD",29,0)
 ;                                template.  Subscripts are:
"RTN","XULMLD",30,0)
 ;           (<variable name>)=<value>
"RTN","XULMLD",31,0)
 ;
"RTN","XULMLD",32,0)
 N TEMPLATE,VAR,MATCH,VARS
"RTN","XULMLD",33,0)
 S (MATCH,TEMPLATE)=0
"RTN","XULMLD",34,0)
 S VAR=$P(LOCK,"(")
"RTN","XULMLD",35,0)
 S VAR=$O(^XLM(8993,"AC",VAR),-1)
"RTN","XULMLD",36,0)
 F  S VAR=$O(^XLM(8993,"AC",VAR)) Q:VAR'=$P(LOCK,"(")  D  Q:TEMPLATE
"RTN","XULMLD",37,0)
 .S TEMPLATE=0
"RTN","XULMLD",38,0)
 .F  S TEMPLATE=$O(^XLM(8993,"AC",VAR,TEMPLATE)) Q:'TEMPLATE  Q:$$MATCH(LOCK,TEMPLATE,.FILES,.VARS)
"RTN","XULMLD",39,0)
 .;
"RTN","XULMLD",40,0)
 .;If no full match, check for allowable partial match
"RTN","XULMLD",41,0)
 .I 'TEMPLATE D
"RTN","XULMLD",42,0)
 ..N PARTS,PCOUNT,PLOCK
"RTN","XULMLD",43,0)
 ..D PARSE(LOCK,.PARTS) ;PARTS(0)=count of subscripts in LOCK
"RTN","XULMLD",44,0)
 ..F  S TEMPLATE=$O(^XLM(8993,"AC",VAR,+TEMPLATE)) Q:'TEMPLATE  D  Q:MATCH
"RTN","XULMLD",45,0)
 ...Q:'$P($G(^XLM(8993,TEMPLATE,1)),"^",3)
"RTN","XULMLD",46,0)
 ...S PCOUNT=$P($G(^XLM(8993,TEMPLATE,2,0)),"^",4) ;PCOUNT=count of subscripts in TEMPLATE
"RTN","XULMLD",47,0)
 ...Q:PCOUNT'<PARTS(0)
"RTN","XULMLD",48,0)
 ...S PLOCK=$NA(LOCK,PCOUNT)
"RTN","XULMLD",49,0)
 ...S:$$MATCH(PLOCK,TEMPLATE,.FILES,.VARS) MATCH=1
"RTN","XULMLD",50,0)
 Q +TEMPLATE
"RTN","XULMLD",51,0)
 ;
"RTN","XULMLD",52,0)
MATCH(LOCK,IEN,FILES,XULMVAR) ;
"RTN","XULMLD",53,0)
 ;Description:  This function compares a lock to entries in the lock
"RTN","XULMLD",54,0)
 ;and returns 1 if they match, 0 otherwise.
"RTN","XULMLD",55,0)
 ;Input:
"RTN","XULMLD",56,0)
 ;   LOCK - an entry in the lock table
"RTN","XULMLD",57,0)
 ;   IEN - an entry# in the LOCK DICTIONARY
"RTN","XULMLD",58,0)
 ;Output:
"RTN","XULMLD",59,0)
 ;   function returns 1 if the lock matches the lock template, 0 otherwise
"RTN","XULMLD",60,0)
 ;   FILES (pass-by-reference) a list of files that can be referenced
"RTN","XULMLD",61,0)
 ;                             by LOCK. Subscripts are:
"RTN","XULMLD",62,0)
 ;           (<file #>)=<ien of the entry in FILE REFERENCES multip>
"RTN","XULMLD",63,0)
 ;   XULMVAR (pass-by-references) list of variables found within the lock
"RTN","XULMLD",64,0)
 ;                                template.  Subscripts are:
"RTN","XULMLD",65,0)
 ;           (<variable name>)=<value>
"RTN","XULMLD",66,0)
 ;           
"RTN","XULMLD",67,0)
 ;
"RTN","XULMLD",68,0)
 N NODE,ORDER,PARTS,PART,XULMBAD,XULMCODE,FILE,SUB,PARTIAL
"RTN","XULMLD",69,0)
 ;
"RTN","XULMLD",70,0)
 D PARSE(LOCK,.PARTS)
"RTN","XULMLD",71,0)
 Q:PARTS'=$P($$TEMPLATE^XULMU(IEN),"(") 0
"RTN","XULMLD",72,0)
 ;
"RTN","XULMLD",73,0)
 ;must have the same number of subscripts, OR, if partial matches allowed, possibly greater number of subscripts
"RTN","XULMLD",74,0)
 S PARTIAL=$P($G(^XLM(8993,IEN,1)),"^",3)
"RTN","XULMLD",75,0)
 I 'PARTIAL Q:PARTS(0)'=$P($G(^XLM(8993,IEN,2,0)),"^",4) 0
"RTN","XULMLD",76,0)
 I PARTIAL Q:PARTS(0)<$P($G(^XLM(8993,IEN,2,0)),"^",4) 0
"RTN","XULMLD",77,0)
 ;
"RTN","XULMLD",78,0)
 S (ORDER,SUB,XULMBAD)=0
"RTN","XULMLD",79,0)
 F ORDER=1:1:PARTS(0) S SUB=$O(^XLM(8993,IEN,2,"B",ORDER,0)) Q:'SUB  D  Q:XULMBAD
"RTN","XULMLD",80,0)
 .S NODE=$G(^XLM(8993,IEN,2,SUB,0))
"RTN","XULMLD",81,0)
 .I $P(NODE,"^",2)'=PARTS(ORDER) D
"RTN","XULMLD",82,0)
 ..N MUMPS
"RTN","XULMLD",83,0)
 ..I $P(NODE,"^",4)'="V" S XULMBAD=1 Q
"RTN","XULMLD",84,0)
 ..S XULMVAR($P(NODE,"^",2))=PARTS(ORDER)
"RTN","XULMLD",85,0)
 ..S MUMPS=$G(^XLM(8993,IEN,2,SUB,1))
"RTN","XULMLD",86,0)
 ..I $L(MUMPS) S XULMCODE($I(XULMCODE))=MUMPS
"RTN","XULMLD",87,0)
 ;
"RTN","XULMLD",88,0)
 Q:XULMBAD 'XULMBAD
"RTN","XULMLD",89,0)
 ;
"RTN","XULMLD",90,0)
 ;If there is variable check logic, execute it
"RTN","XULMLD",91,0)
 D
"RTN","XULMLD",92,0)
 .;define the application variables, but protect my own first
"RTN","XULMLD",93,0)
 .N I,IEN,LOCK,ORDER,PARTS,SUB,X,NODE,FILES,FILE,VAR,IDX,LOCKS
"RTN","XULMLD",94,0)
 .S VAR=""
"RTN","XULMLD",95,0)
 .F  S VAR=$O(XULMVAR(VAR)) Q:(VAR="")  N @VAR S @VAR=XULMVAR(VAR)
"RTN","XULMLD",96,0)
 .S XULMCODE=0
"RTN","XULMLD",97,0)
 .;
"RTN","XULMLD",98,0)
 .;execute the check logic - cached in XULMCODE
"RTN","XULMLD",99,0)
 .F  S XULMCODE=$O(XULMCODE(XULMCODE)) Q:'XULMCODE  D  Q:XULMBAD
"RTN","XULMLD",100,0)
 ..N Y
"RTN","XULMLD",101,0)
 ..N $ETRAP,$ESTACK S $ETRAP="G ERROR^XULMLD"
"RTN","XULMLD",102,0)
 ..X XULMCODE(XULMCODE)
"RTN","XULMLD",103,0)
 ..I $G(Y)'=1 S XULMBAD=1
"RTN","XULMLD",104,0)
 ;
"RTN","XULMLD",105,0)
 ;If this matches, get the file references
"RTN","XULMLD",106,0)
 I 'XULMBAD D
"RTN","XULMLD",107,0)
 .S FILE=0
"RTN","XULMLD",108,0)
 .F  S FILE=$O(^XLM(8993,IEN,3,"B",FILE)) Q:'FILE  S FILES(FILE)=$O(^XLM(8993,IEN,3,"B",FILE,0))
"RTN","XULMLD",109,0)
 E  K XULMVAR
"RTN","XULMLD",110,0)
 ;
"RTN","XULMLD",111,0)
 ;
"RTN","XULMLD",112,0)
 Q 'XULMBAD
"RTN","XULMLD",113,0)
 ;
"RTN","XULMLD",114,0)
PARSE(LOCK,PARTS) ;
"RTN","XULMLD",115,0)
 ;Parse the lock into its partS
"RTN","XULMLD",116,0)
 ;Input:
"RTN","XULMLD",117,0)
 ;   LOCK - entry from the lock table
"RTN","XULMLD",118,0)
 ;Output:
"RTN","XULMLD",119,0)
 ;   PARTS (pass by reference) the LOCK components are in this array
"RTN","XULMLD",120,0)
 ;
"RTN","XULMLD",121,0)
 N I
"RTN","XULMLD",122,0)
 K PARTS
"RTN","XULMLD",123,0)
 S PARTS(0)=$QLENGTH(LOCK)
"RTN","XULMLD",124,0)
 S PARTS=$QSUBSCRIPT(LOCK,0)
"RTN","XULMLD",125,0)
 F I=1:1:PARTS(0) S PARTS(I)=$QSUBSCRIPT(LOCK,I)
"RTN","XULMLD",126,0)
 Q
"RTN","XULMLD",127,0)
 ;
"RTN","XULMLD",128,0)
 ;
"RTN","XULMLD",129,0)
GETREFS(IEN,FILES,XULMVAR) ;
"RTN","XULMLD",130,0)
 ;Get file referencs for a lock.
"RTN","XULMLD",131,0)
 ;Input:
"RTN","XULMLD",132,0)
 ;  IEN - entry in the LOCK DICTIONARY
"RTN","XULMLD",133,0)
 ;  FILES - list of files to get references for
"RTN","XULMLD",134,0)
 ;  XULMVAR - variables parsed out of a lock table entry
"RTN","XULMLD",135,0)
 ;Output:
"RTN","XULMLD",136,0)
 ;  FILES - for each file on the list, returns the references info
"RTN","XULMLD",137,0)
 ;      (<file #>,"IEN")=<DA>^<DA(1)^DA(2)^etc.
"RTN","XULMLD",138,0)
 ;      (file #>,<1,2,3,etc.>)=<file identifier element>
"RTN","XULMLD",139,0)
 ;
"RTN","XULMLD",140,0)
 ;
"RTN","XULMLD",141,0)
 N XULMCODE,ID,FILE
"RTN","XULMLD",142,0)
 S FILE=0
"RTN","XULMLD",143,0)
 F  S FILE=$O(FILES(FILE)) Q:'FILE  S XULMCODE=$G(^XLM(8993,IEN,3,FILES(FILE),1)) D
"RTN","XULMLD",144,0)
 .D
"RTN","XULMLD",145,0)
 ..N FILE,IEN,FILES
"RTN","XULMLD",146,0)
 ..N $ETRAP,$ESTACK S $ETRAP="G ERROR^XULMLD"
"RTN","XULMLD",147,0)
 ..;we have the computable code, now set the variables
"RTN","XULMLD",148,0)
 ..S XULMVAR=""
"RTN","XULMLD",149,0)
 ..F  S XULMVAR=$O(XULMVAR(XULMVAR)) Q:(XULMVAR="")  N @XULMVAR S @XULMVAR=XULMVAR(XULMVAR)
"RTN","XULMLD",150,0)
 ..;
"RTN","XULMLD",151,0)
 ..;now XECUTE it! It will return ID()
"RTN","XULMLD",152,0)
 ..X XULMCODE
"RTN","XULMLD",153,0)
 .M FILES(FILE)=ID
"RTN","XULMLD",154,0)
 Q
"RTN","XULMLD",155,0)
 ;
"RTN","XULMLD",156,0)
ERROR ;
"RTN","XULMLD",157,0)
 S $ETRAP="Q:$QUIT """" Q"
"RTN","XULMLD",158,0)
 ;quit back to the Taskman error trap on these errors
"RTN","XULMLD",159,0)
 I ($ECODE["TOOMANYFILES")!($ECODE["EDITED") D  Q:$QUIT "" Q
"RTN","XULMLD",160,0)
 .D UNWIND^%ZTER
"RTN","XULMLD",161,0)
 ;can log error and continue processing
"RTN","XULMLD",162,0)
 N XUPARMS,LOGIN,PARMS
"RTN","XULMLD",163,0)
 D ^%ZTER
"RTN","XULMLD",164,0)
 S $ECODE=""
"RTN","XULMLD",165,0)
 Q:$QUIT "" Q
"RTN","XULMLD",166,0)
 ;
"RTN","XULMLD",167,0)
 ;
"RTN","XULMLD",168,0)
 ;
"RTN","XULMLD",169,0)
 ;
"RTN","XULMLD",170,0)
 ;
"RTN","XULMLD",171,0)
 ;
"RTN","XULMLD",172,0)
 ;
"RTN","XULMLD",173,0)
 ;
"RTN","XULMLOG")
0^5^B1246554
"RTN","XULMLOG",1,0)
XULMLOG ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;08/21/2012
"RTN","XULMLOG",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMLOG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMLOG",4,0)
 ;
"RTN","XULMLOG",5,0)
 ;  ******************************************************************
"RTN","XULMLOG",6,0)
 ;  *                                                                *
"RTN","XULMLOG",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMLOG",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMLOG",9,0)
 ;  *                                                                *
"RTN","XULMLOG",10,0)
 ;  ******************************************************************
"RTN","XULMLOG",11,0)
 ;
"RTN","XULMLOG",12,0)
 ;
"RTN","XULMLOG",13,0)
PURGE ;
"RTN","XULMLOG",14,0)
 ;
"RTN","XULMLOG",15,0)
 N DIR,LAST,TIME,IEN,DIRUT,Y
"RTN","XULMLOG",16,0)
 S DIR(0)="N^0:365:0"
"RTN","XULMLOG",17,0)
 S DIR("B")=30
"RTN","XULMLOG",18,0)
 S DIR("A")="How many days of data should be retained"
"RTN","XULMLOG",19,0)
 D ^DIR
"RTN","XULMLOG",20,0)
 Q:$D(DIRUT)
"RTN","XULMLOG",21,0)
 S LAST=$$FMADD^XLFDT(($$NOW^XLFDT\1),-Y)
"RTN","XULMLOG",22,0)
 S TIME=0
"RTN","XULMLOG",23,0)
 F  S TIME=$O(^XLM(8993.2,"B",TIME)) Q:'TIME  Q:TIME>LAST  D
"RTN","XULMLOG",24,0)
 .S IEN=0
"RTN","XULMLOG",25,0)
 .F  S IEN=$O(^XLM(8993.2,"B",TIME,IEN)) Q:'IEN  D DELETE^XULMU(8993.2,IEN)
"RTN","XULMLOG",26,0)
 W !,"DONE!" D PAUSE^XULMU
"RTN","XULMLOG",27,0)
 ;
"RTN","XULMLOG",28,0)
 Q
"RTN","XULMLOG",29,0)
 ;
"RTN","XULMLOG",30,0)
 ;
"RTN","XULMOUT")
0^6^B5021337
"RTN","XULMOUT",1,0)
XULMOUT ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;08/28/2012
"RTN","XULMOUT",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMOUT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMOUT",4,0)
 ;
"RTN","XULMOUT",5,0)
 ;  ******************************************************************
"RTN","XULMOUT",6,0)
 ;  *                                                                *
"RTN","XULMOUT",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMOUT",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMOUT",9,0)
 ;  *                                                                *
"RTN","XULMOUT",10,0)
 ;  ******************************************************************
"RTN","XULMOUT",11,0)
 ;
"RTN","XULMOUT",12,0)
OUTPUT1 ; Lock Dictionary
"RTN","XULMOUT",13,0)
 N LOCK,IEN,DATA,LINE,RLINE
"RTN","XULMOUT",14,0)
 S IEN=0
"RTN","XULMOUT",15,0)
 F  S IEN=$O(^XLM(8993,IEN)) Q:'IEN  D
"RTN","XULMOUT",16,0)
 .N NODE1
"RTN","XULMOUT",17,0)
 .S LOCK=$NA(^XLM(8993,IEN))
"RTN","XULMOUT",18,0)
 .S DATA=$G(@LOCK@(0))
"RTN","XULMOUT",19,0)
 .Q:DATA=""
"RTN","XULMOUT",20,0)
 .S NODE1=$G(@LOCK@(1))
"RTN","XULMOUT",21,0)
 .I $P(NODE1,"^",2) S DATA="^"_DATA
"RTN","XULMOUT",22,0)
 .D W(";;LOCK;"_DATA)
"RTN","XULMOUT",23,0)
 .S DATA=$P($G(NODE1),"^",1)
"RTN","XULMOUT",24,0)
 .I DATA S DATA=$P($G(^DIC(9.4,DATA,0)),"^")
"RTN","XULMOUT",25,0)
 .I $L(DATA) D W(";;PACKAGE;"_DATA)
"RTN","XULMOUT",26,0)
 .;
"RTN","XULMOUT",27,0)
 .S DATA=$P($G(NODE1),"^",3)
"RTN","XULMOUT",28,0)
 .I $L(DATA) D W(";;PARTIAL MATCH OK?;"_DATA)
"RTN","XULMOUT",29,0)
 .;
"RTN","XULMOUT",30,0)
 .;description of lock
"RTN","XULMOUT",31,0)
 .D W(";;USAGE;"_$G(@LOCK@(4,0)))
"RTN","XULMOUT",32,0)
 .S LINE=0 F  S LINE=$O(@LOCK@(4,LINE)) Q:'LINE  D W(";;;"_$G(@LOCK@(4,LINE,0)))
"RTN","XULMOUT",33,0)
 .;
"RTN","XULMOUT",34,0)
 .;subscripts in lock expression
"RTN","XULMOUT",35,0)
 .S LINE=0 F  S LINE=$O(@LOCK@(2,LINE)) Q:'LINE  D
"RTN","XULMOUT",36,0)
 ..D W(";;SUBSCRIPT;"_$G(@LOCK@(2,LINE,0))) D:$D(@LOCK@(2,LINE,1)) W(";;CHECK LOGIC;"_$G(@LOCK@(2,LINE,1)))
"RTN","XULMOUT",37,0)
 .;
"RTN","XULMOUT",38,0)
 .;file references
"RTN","XULMOUT",39,0)
 .S LINE=0 F  S LINE=$O(@LOCK@(3,LINE)) Q:'LINE  D
"RTN","XULMOUT",40,0)
 ..D W(";;FILE REFERENCE;"_$G(@LOCK@(3,LINE,0))),W(";;L;"_$G(@LOCK@(3,LINE,1)))
"RTN","XULMOUT",41,0)
 ..;
"RTN","XULMOUT",42,0)
 ..N LINE2
"RTN","XULMOUT",43,0)
 ..D W(";;REFERENCE DESCRIPTION;"_$G(@LOCK@(3,LINE,2,0)))
"RTN","XULMOUT",44,0)
 ..S LINE2=0 F  S LINE2=$O(@LOCK@(3,LINE,2,LINE2)) Q:'LINE2  D W(";;;"_$G(@LOCK@(3,LINE,2,LINE2,0)))
"RTN","XULMOUT",45,0)
 D W(";;EXIT")
"RTN","XULMOUT",46,0)
 Q
"RTN","XULMOUT",47,0)
 ;
"RTN","XULMOUT",48,0)
OUTPUT2 ;system locks for parameter file
"RTN","XULMOUT",49,0)
 N GLB,TEXT,RLINE
"RTN","XULMOUT",50,0)
 S GLB=$NA(^XLM(8993.1,"AC"))
"RTN","XULMOUT",51,0)
 S TEXT=""
"RTN","XULMOUT",52,0)
 F  S TEXT=$O(@GLB@(TEXT)) Q:TEXT=""  D W(";;"_TEXT)
"RTN","XULMOUT",53,0)
 Q
"RTN","XULMOUT",54,0)
 ;
"RTN","XULMOUT",55,0)
 ;
"RTN","XULMOUT",56,0)
 ;
"RTN","XULMOUT",57,0)
 ;
"RTN","XULMOUT",58,0)
 ;
"RTN","XULMOUT",59,0)
 ;
"RTN","XULMOUT",60,0)
W(LINE) ;
"RTN","XULMOUT",61,0)
 I '$G(RLINE) D
"RTN","XULMOUT",62,0)
 .K ^TMP($J,"RTN")
"RTN","XULMOUT",63,0)
 .S RLINE=0
"RTN","XULMOUT",64,0)
 S RLINE=RLINE+1
"RTN","XULMOUT",65,0)
 S ^TMP($J,"RTN",RLINE)=" "_LINE
"RTN","XULMOUT",66,0)
 Q
"RTN","XULMOUT",67,0)
 ;
"RTN","XULMOUT",68,0)
 ;
"RTN","XULMOUT",69,0)
 ;
"RTN","XULMP")
0^7^B4650714
"RTN","XULMP",1,0)
XULMP ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;12/01/2012
"RTN","XULMP",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMP",4,0)
 ;
"RTN","XULMP",5,0)
 ;  ******************************************************************
"RTN","XULMP",6,0)
 ;  *                                                                *
"RTN","XULMP",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMP",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMP",9,0)
 ;  *                                                                *
"RTN","XULMP",10,0)
 ;  ******************************************************************
"RTN","XULMP",11,0)
 ;Setting up parameters
"RTN","XULMP",12,0)
 ;
"RTN","XULMP",13,0)
GETPARMS(PARMS,ERROR) ;
"RTN","XULMP",14,0)
 ;
"RTN","XULMP",15,0)
 K PARMS
"RTN","XULMP",16,0)
 S ERROR=""
"RTN","XULMP",17,0)
 D
"RTN","XULMP",18,0)
 .N IEN,NODE,SUB,COUNT
"RTN","XULMP",19,0)
 .S IEN=$O(^XLM(8993.1,0))
"RTN","XULMP",20,0)
 .I 'IEN S ERROR="Parameter file not setup" Q
"RTN","XULMP",21,0)
 .S NODE=$G(^XLM(8993.1,IEN,0))
"RTN","XULMP",22,0)
 .S PARMS("ON?")=$S($P(NODE,"^",2)="e":1,1:0)
"RTN","XULMP",23,0)
 .S PARMS("PRODUCTION?")=$$PROD^XUPROD()
"RTN","XULMP",24,0)
 .S (COUNT,SUB)=0
"RTN","XULMP",25,0)
 .F  S SUB=$O(^XLM(8993.1,IEN,3,SUB)) Q:'SUB  D
"RTN","XULMP",26,0)
 ..N BOX,IP,PORT,SHORTNM
"RTN","XULMP",27,0)
 ..S NODE=$G(^XLM(8993.1,IEN,3,SUB,0))
"RTN","XULMP",28,0)
 ..S BOX=$P(NODE,"^")
"RTN","XULMP",29,0)
 ..Q:BOX=""
"RTN","XULMP",30,0)
 ..S PORT=$P(NODE,"^",3)
"RTN","XULMP",31,0)
 ..I PORT="",BOX'=$$NODE^XULMU Q
"RTN","XULMP",32,0)
 ..S IP=$P(NODE,"^",2)
"RTN","XULMP",33,0)
 ..I '$L(IP),BOX'=$$NODE^XULMU Q
"RTN","XULMP",34,0)
 ..S PARMS("NODES",BOX,"IP ADDRESS")=IP
"RTN","XULMP",35,0)
 ..S PARMS("NODES",BOX,"PORT")=PORT
"RTN","XULMP",36,0)
 ..S PARMS("NODES",BOX,"SHORT NAME")=$P(NODE,"^",4)
"RTN","XULMP",37,0)
 ..S PARMS("NODES",BOX)=SUB
"RTN","XULMP",38,0)
 ..S COUNT=COUNT+1
"RTN","XULMP",39,0)
 ..S PARMS("NODES")=COUNT
"RTN","XULMP",40,0)
 .I '$D(PARMS("NODES",$$NODE^XULMU)) S PARMS("NODES",$$NODE^XULMU,"IP ADDRESS")="",PARMS("NODES",$$NODE^XULMU,"PORT")="",PARMS("NODES")=$G(PARMS("NODES"))+1
"RTN","XULMP",41,0)
 Q $S($L($G(ERROR)):0,1:1)
"RTN","XULMP",42,0)
 ;
"RTN","XULMP",43,0)
EDIT ;Edit the site parameters
"RTN","XULMP",44,0)
 N DA,DIE,DR
"RTN","XULMP",45,0)
 S DA=$O(^XLM(8993.1,0))
"RTN","XULMP",46,0)
 I 'DA D
"RTN","XULMP",47,0)
 .N DATA
"RTN","XULMP",48,0)
 .S DATA(.01)=+$$SITE^VASITE
"RTN","XULMP",49,0)
 .S DA=$$ADD^XULMU(8993.1,,.DATA)
"RTN","XULMP",50,0)
 I 'DA D PAUSE^XULMU("There is no entry in the XULM LOCK MANAGER PARAMETERS file!") Q
"RTN","XULMP",51,0)
 S DR="[XULM EDIT PARAMETERS]"
"RTN","XULMP",52,0)
 S DIE=8993.1
"RTN","XULMP",53,0)
 D ^DIE
"RTN","XULMP",54,0)
 Q
"RTN","XULMP",55,0)
 ;
"RTN","XULMP",56,0)
 ;
"RTN","XULMP",57,0)
 ;
"RTN","XULMP",58,0)
 ;
"RTN","XULMP",59,0)
 ;
"RTN","XULMP",60,0)
 ;
"RTN","XULMRPC")
0^8^B1268183
"RTN","XULMRPC",1,0)
XULMRPC ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;10/15/2012
"RTN","XULMRPC",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMRPC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMRPC",4,0)
 ;
"RTN","XULMRPC",5,0)
 ;  ******************************************************************
"RTN","XULMRPC",6,0)
 ;  *                                                                *
"RTN","XULMRPC",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMRPC",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMRPC",9,0)
 ;  *                                                                *
"RTN","XULMRPC",10,0)
 ;  ******************************************************************
"RTN","XULMRPC",11,0)
 ;
"RTN","XULMRPC",12,0)
 ;
"RTN","XULMRPC",13,0)
LOCKS(RETURN,LOCKS,RESULT,SCREEN) ; Compile lock table
"RTN","XULMRPC",14,0)
 ;
"RTN","XULMRPC",15,0)
 ;Inputs:
"RTN","XULMRPC",16,0)
 ;  LOCKS - the global location to set the data, referenced by indirection
"RTN","XULMRPC",17,0)
 ;  SCREEN = 1 if system locks should be screened out, 0 otherwise
"RTN","XULMRPC",18,0)
 ;  RESULT - global location to store the result
"RTN","XULMRPC",19,0)
 ;Outputs:
"RTN","XULMRPC",20,0)
 ;    @LOCKS will contain the locks obtained from the lock table
"RTN","XULMRPC",21,0)
 ;    RETURN - return variable required for a RPC (doesn't seem to work)
"RTN","XULMRPC",22,0)
 ;    @RESULT - global location where result is placed  1 if success, 0 otherwise
"RTN","XULMRPC",23,0)
 ;
"RTN","XULMRPC",24,0)
 D GETLOCKS^XULMU(LOCKS)
"RTN","XULMRPC",25,0)
 S:$L($G(RESULT)) @RESULT=1
"RTN","XULMRPC",26,0)
 S RETURN=1
"RTN","XULMRPC",27,0)
 Q RETURN
"RTN","XULMRPC",28,0)
 ;
"RTN","XULMRPC",29,0)
 ;
"RTN","XULMRPC",30,0)
KILLPROC(RETURN,PID,RESULT) ;
"RTN","XULMRPC",31,0)
 ;Description:
"RTN","XULMRPC",32,0)
 ;  Kills the process identified to OS by PID
"RTN","XULMRPC",33,0)
 ;Inputs:
"RTN","XULMRPC",34,0)
 ;  PID - 
"RTN","XULMRPC",35,0)
 ;  RESULT - global location to store the result
"RTN","XULMRPC",36,0)
 ;Outputs:
"RTN","XULMRPC",37,0)
 ;    RETURN - return variable required for a RPC (doesn't seem to work)
"RTN","XULMRPC",38,0)
 ;    @RESULT - global location where result is placed - 1 if success, 0 otherwise
"RTN","XULMRPC",39,0)
 ;
"RTN","XULMRPC",40,0)
 D
"RTN","XULMRPC",41,0)
 .N $ETRAP S $ETRAP="G ERROR^XULMRPC"
"RTN","XULMRPC",42,0)
 .S RETURN=$$KILL^%ZLMLIB(PID)
"RTN","XULMRPC",43,0)
 S:$L($G(RESULT)) @RESULT=RETURN
"RTN","XULMRPC",44,0)
 I RETURN D CLEANUP^XULMU(PID)
"RTN","XULMRPC",45,0)
 Q RETURN
"RTN","XULMRPC",46,0)
 ;
"RTN","XULMRPC",47,0)
ERROR ;
"RTN","XULMRPC",48,0)
 S $ETRAP="Q:$QUIT """"  Q"
"RTN","XULMRPC",49,0)
 S $ECODE=""
"RTN","XULMRPC",50,0)
 Q:$QUIT ""
"RTN","XULMRPC",51,0)
 Q
"RTN","XULMU")
0^9^B42882077
"RTN","XULMU",1,0)
XULMU ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;11/16/2012
"RTN","XULMU",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMU",4,0)
 ;
"RTN","XULMU",5,0)
 ;  ******************************************************************
"RTN","XULMU",6,0)
 ;  *                                                                *
"RTN","XULMU",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMU",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMU",9,0)
 ;  *                                                                *
"RTN","XULMU",10,0)
 ;  ******************************************************************
"RTN","XULMU",11,0)
 ;
"RTN","XULMU",12,0)
 ; Miscellaneous utilities
"RTN","XULMU",13,0)
 ;
"RTN","XULMU",14,0)
GETLOCKS(LOCKS) ;
"RTN","XULMU",15,0)
 N NODE,QUIT,RSET
"RTN","XULMU",16,0)
 ;
"RTN","XULMU",17,0)
 S NODE=$$NODE
"RTN","XULMU",18,0)
 S @LOCKS@("XULM REPORTED NODE")=NODE
"RTN","XULMU",19,0)
 S QUIT=0
"RTN","XULMU",20,0)
 D LOCKQRY^%ZLMLIB(.RSET)
"RTN","XULMU",21,0)
 F  D  Q:QUIT
"RTN","XULMU",22,0)
 .N PID,LOCK
"RTN","XULMU",23,0)
 .I '$$NXTLOCK^%ZLMLIB(.RSET,.LOCK) S QUIT=1 Q
"RTN","XULMU",24,0)
 .S PID=LOCK(LOCK,"PID")
"RTN","XULMU",25,0)
 .D:PID
"RTN","XULMU",26,0)
 ..S @LOCKS@(LOCK,NODE)=LOCK(LOCK)
"RTN","XULMU",27,0)
 ..S @LOCKS@(LOCK,NODE,"SYSTEM")=$$IFSYSTEM(LOCK)
"RTN","XULMU",28,0)
 ..S @LOCKS@(LOCK,NODE,"PID")=PID
"RTN","XULMU",29,0)
 ..S @LOCKS@(LOCK,NODE,"TASK")=$G(^XUTL("XQ",PID,"ZTSKNUM"))
"RTN","XULMU",30,0)
 ..S @LOCKS@(LOCK,NODE,"OWNER")=$$OWNER(PID,@LOCKS@(LOCK,NODE,"SYSTEM"))
"RTN","XULMU",31,0)
 Q
"RTN","XULMU",32,0)
 ;
"RTN","XULMU",33,0)
OWNER(PID,SYSTEM) ;Return the DUZ^<name> of owner of this process
"RTN","XULMU",34,0)
 N OWNER,OWNERDUZ
"RTN","XULMU",35,0)
 S (OWNER,OWNERDUZ)=""
"RTN","XULMU",36,0)
 I PID=$J S OWNERDUZ=$G(DUZ)
"RTN","XULMU",37,0)
 S:'OWNERDUZ OWNERDUZ=$G(^XUTL("XQ",PID,"DUZ"))
"RTN","XULMU",38,0)
 S:OWNERDUZ OWNER=$P($G(^VA(200,OWNERDUZ,0)),"^")
"RTN","XULMU",39,0)
 I OWNER="",'$G(SYSTEM) S OWNER=$$OSUSER^%ZLMLIB(PID)
"RTN","XULMU",40,0)
 I OWNER="" S OWNER="{?}"
"RTN","XULMU",41,0)
 I OWNER="{?}",$E(LOCK,1,4)["%ZT" S OWNER="TASKMAN"
"RTN","XULMU",42,0)
 Q OWNERDUZ_"^"_OWNER
"RTN","XULMU",43,0)
 ;
"RTN","XULMU",44,0)
 ;
"RTN","XULMU",45,0)
PAT(DFN) ;
"RTN","XULMU",46,0)
 ;Returns ID() array with patient information
"RTN","XULMU",47,0)
 K ID
"RTN","XULMU",48,0)
 I 'DFN S ID(0)=0,ID("IEN")="" Q
"RTN","XULMU",49,0)
 S ID("IEN")=DFN
"RTN","XULMU",50,0)
 D ADDPAT(DFN)
"RTN","XULMU",51,0)
 Q
"RTN","XULMU",52,0)
ADDPAT(DFN) ;
"RTN","XULMU",53,0)
 ;Adds patient information to the existing ID() array.
"RTN","XULMU",54,0)
 Q:'DFN
"RTN","XULMU",55,0)
 N NODE
"RTN","XULMU",56,0)
 S NODE=$G(^DPT(DFN,0))
"RTN","XULMU",57,0)
 Q:NODE=""
"RTN","XULMU",58,0)
 S ID(0)=+$G(ID(0))
"RTN","XULMU",59,0)
 S ID(ID(0)+1)="Patient Name:"_$P(NODE,"^"),ID(ID(0)+2)="Sex:"_$S($P(NODE,"^",2)="M":"MALE",1:"FEMALE"),ID(ID(0)+3)="DOB:"_$$FMTE^XLFDT($P(NODE,"^",3)),ID(ID(0)+4)="SSN:"_$P(NODE,"^",9),ID(0)=ID(0)+4
"RTN","XULMU",60,0)
 Q
"RTN","XULMU",61,0)
 ; 
"RTN","XULMU",62,0)
PAUSE(MSG) ;
"RTN","XULMU",63,0)
 ;Screen pause without scrolling. Returns 1 if the user quits out
"RTN","XULMU",64,0)
 ;
"RTN","XULMU",65,0)
 I $L($G(MSG)) W !,MSG,!
"RTN","XULMU",66,0)
 N DIR,DIRUT,X,Y
"RTN","XULMU",67,0)
 S DIR(0)="E"
"RTN","XULMU",68,0)
 D ^DIR
"RTN","XULMU",69,0)
 Q:('(+Y))!$D(DIRUT) 1
"RTN","XULMU",70,0)
 Q 0
"RTN","XULMU",71,0)
PAUSE2(MSG) ;
"RTN","XULMU",72,0)
 ;First scroll to the bottome of the page, then does a screen pause. Returns 1 if user decides to quit, otherwise returns 0
"RTN","XULMU",73,0)
 ;
"RTN","XULMU",74,0)
 I $L($G(MSG)) W !,MSG,!
"RTN","XULMU",75,0)
 N DIR,X,Y,QUIT
"RTN","XULMU",76,0)
 S QUIT=0
"RTN","XULMU",77,0)
 F  Q:$Y>(IOSL-3)  W !
"RTN","XULMU",78,0)
 S DIR(0)="E"
"RTN","XULMU",79,0)
 D ^DIR
"RTN","XULMU",80,0)
 I ('(+Y))!$D(DIRUT) S QUIT=1
"RTN","XULMU",81,0)
 Q QUIT
"RTN","XULMU",82,0)
 ;
"RTN","XULMU",83,0)
ASKYESNO(PROMPT,DEFAULT) ;
"RTN","XULMU",84,0)
 ;Description: Displays PROMPT, appending '?'.  Expects a YES NO response
"RTN","XULMU",85,0)
 ;Input:
"RTN","XULMU",86,0)
 ;   PROMPT - text to display as prompt.  Appends '?'
"RTN","XULMU",87,0)
 ;   DEFAULT - (optional) YES or NO.  If not passed, defaults to YES
"RTN","XULMU",88,0)
 ;Output:
"RTN","XULMU",89,0)
 ;  Function value: 1 if yes, 0 if no, "" if '^' entered or timeout
"RTN","XULMU",90,0)
 ;
"RTN","XULMU",91,0)
 N DIR,Y
"RTN","XULMU",92,0)
 S DIR(0)="Y"
"RTN","XULMU",93,0)
 S DIR("A")=PROMPT
"RTN","XULMU",94,0)
 S DIR("B")=$S($G(DEFAULT)="NO":"NO",1:"YES")
"RTN","XULMU",95,0)
 D ^DIR
"RTN","XULMU",96,0)
 Q:$D(DIRUT) ""
"RTN","XULMU",97,0)
 Q Y
"RTN","XULMU",98,0)
 ;
"RTN","XULMU",99,0)
 ;
"RTN","XULMU",100,0)
IFSYSTEM(LOCK) ;returns 1 if system lock, 0 otherwise
"RTN","XULMU",101,0)
 N SUB,LEN,FOUND,NOTFOUND
"RTN","XULMU",102,0)
 I $P(LOCK,"(")["%" Q 1
"RTN","XULMU",103,0)
 S (FOUND,NOTFOUND)=0
"RTN","XULMU",104,0)
 S LEN=$L(LOCK)
"RTN","XULMU",105,0)
 F I=1:1:LEN S SUB=$E(LOCK,1,I) D  Q:FOUND  Q:NOTFOUND
"RTN","XULMU",106,0)
 .I $D(^XLM(8993.1,"AC",SUB)) S FOUND=1 Q
"RTN","XULMU",107,0)
 .N NEXT
"RTN","XULMU",108,0)
 .S NEXT=$O(^XLM(8993.1,"AC",SUB))
"RTN","XULMU",109,0)
 .I NEXT="" S NOTFOUND=1 Q
"RTN","XULMU",110,0)
 .I NEXT]LOCK S NOTFOUND=1 Q
"RTN","XULMU",111,0)
 Q FOUND
"RTN","XULMU",112,0)
 ;
"RTN","XULMU",113,0)
NODE() ;Get Cache' instance name for this process
"RTN","XULMU",114,0)
 Q ##class(%SYS.System).GetInstanceName()
"RTN","XULMU",115,0)
 ;
"RTN","XULMU",116,0)
VOLUME() ;Returns the namespace of current environment
"RTN","XULMU",117,0)
 Q $SYSTEM.SYS.NameSpace()
"RTN","XULMU",118,0)
 ;
"RTN","XULMU",119,0)
SAMENODE(NODE) ;Is the current process running on the indicated node?
"RTN","XULMU",120,0)
 N SNODE
"RTN","XULMU",121,0)
 S SNODE=$$NODE()
"RTN","XULMU",122,0)
 I $G(NODE)=SNODE Q 1
"RTN","XULMU",123,0)
 Q 0
"RTN","XULMU",124,0)
 ;
"RTN","XULMU",125,0)
OS() ;Get OS
"RTN","XULMU",126,0)
 N X
"RTN","XULMU",127,0)
 S X=$$VERSION^%ZOSV(1)
"RTN","XULMU",128,0)
 Q $S(X["VMS":"VMS",X["UNIX":"LNX",X["Linux":"LNX",X["Windows":"WIN",1:"? OS")
"RTN","XULMU",129,0)
 ;
"RTN","XULMU",130,0)
 ;
"RTN","XULMU",131,0)
HEX(DEC) ;Convert decimal number to hexidecimal
"RTN","XULMU",132,0)
 Q $$BASE^XLFUTL(DEC,10,16)
"RTN","XULMU",133,0)
 ;
"RTN","XULMU",134,0)
ADD(FILE,DA,DATA,ERROR,IEN) ;
"RTN","XULMU",135,0)
 ;
"RTN","XULMU",136,0)
 ;Description: Creates a new record and files the data.
"RTN","XULMU",137,0)
 ; Input:
"RTN","XULMU",138,0)
 ;   FILE - File or sub-file number
"RTN","XULMU",139,0)
 ;   DA - Traditional FileMan DA array with same
"RTN","XULMU",140,0)
 ;  meaning. Pass by reference.  Only needed if adding to a
"RTN","XULMU",141,0)
 ;  subfile.
"RTN","XULMU",142,0)
 ;   DATA - Data array to file, pass by reference
"RTN","XULMU",143,0)
 ;Format: DATA(<field #>)=<value>
"RTN","XULMU",144,0)
 ;   IEN - internal entry number to use (optional)
"RTN","XULMU",145,0)
 ;
"RTN","XULMU",146,0)
 ; Output:
"RTN","XULMU",147,0)
 ;   Function Value - If no error then it returns the ien of the created 
"RTN","XULMU",148,0)
 ;record, else returns NULL.
"RTN","XULMU",149,0)
 ;  DA - returns the ien of the new record, NULL if none created.  If needed, pass by reference.
"RTN","XULMU",150,0)
 ;  ERROR - optional error message - if needed, pass by reference
"RTN","XULMU",151,0)
 ;
"RTN","XULMU",152,0)
 ; Example: To add a record in subfile 2.0361 in the record with ien=353
"RTN","XULMU",153,0)
 ;with the field .01 value = 21:
"RTN","XULMU",154,0)
 ;  S DATA(.01)=21,DA(1)=353 I $$ADD(2.0361,.DA,.DATA) W !,"DONE"
"RTN","XULMU",155,0)
 ;
"RTN","XULMU",156,0)
 ; Example: If creating a record not in a subfile, would look like this:
"RTN","XULMU",157,0)
 ;S DATA(.01)=21 I $$ADD(867,,.DATA) W !,"DONE"
"RTN","XULMU",158,0)
 ;
"RTN","XULMU",159,0)
 N FDA,FIELD,IENA,IENS,ERRORS,DIERR
"RTN","XULMU",160,0)
 ;
"RTN","XULMU",161,0)
 ;IENS - Internal Entry Number String defined by FM
"RTN","XULMU",162,0)
 ;IENA - the Internal Entry Number Array defined by FM
"RTN","XULMU",163,0)
 ;FDA - the FDA array defined by FM
"RTN","XULMU",164,0)
 ;IEN - the ien of the new record
"RTN","XULMU",165,0)
 ;
"RTN","XULMU",166,0)
 S DA="+1"
"RTN","XULMU",167,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","XULMU",168,0)
 S FIELD=0
"RTN","XULMU",169,0)
 F  S FIELD=$O(DATA(FIELD)) Q:'FIELD  D
"RTN","XULMU",170,0)
 .S FDA(FILE,IENS,FIELD)=$G(DATA(FIELD))
"RTN","XULMU",171,0)
 I $G(IEN) S IENA(1)=IEN
"RTN","XULMU",172,0)
 D UPDATE^DIE("","FDA","IENA","ERRORS(1)")
"RTN","XULMU",173,0)
 I +$G(DIERR) D
"RTN","XULMU",174,0)
 .S ERROR=$G(ERRORS(1,"DIERR",1,"TEXT",1))
"RTN","XULMU",175,0)
 .S IEN=""
"RTN","XULMU",176,0)
 E  D
"RTN","XULMU",177,0)
 .S IEN=IENA(1)
"RTN","XULMU",178,0)
 .S ERROR=""
"RTN","XULMU",179,0)
 D CLEAN^DILF
"RTN","XULMU",180,0)
 S DA=IEN
"RTN","XULMU",181,0)
 Q IEN
"RTN","XULMU",182,0)
 ;
"RTN","XULMU",183,0)
DELETE(FILE,DA,ERROR) ;
"RTN","XULMU",184,0)
 ;Delete an existing record.
"RTN","XULMU",185,0)
 N DATA
"RTN","XULMU",186,0)
 S DATA(.01)="@"
"RTN","XULMU",187,0)
 Q $$UPD(FILE,.DA,.DATA,.ERROR)
"RTN","XULMU",188,0)
 Q
"RTN","XULMU",189,0)
 ;
"RTN","XULMU",190,0)
UPD(FILE,DA,DATA,ERROR) ;File data into an existing record.
"RTN","XULMU",191,0)
 ; Input:
"RTN","XULMU",192,0)
 ;   FILE - File or sub-file number
"RTN","XULMU",193,0)
 ;   DA - Traditional DA array, with same meaning.
"RTN","XULMU",194,0)
 ;  Pass by reference.
"RTN","XULMU",195,0)
 ;   DATA - Data array to file (pass by reference)
"RTN","XULMU",196,0)
 ;Format: DATA(<field #>)=<value>
"RTN","XULMU",197,0)
 ;
"RTN","XULMU",198,0)
 ; Output:
"RTN","XULMU",199,0)
 ;  Function Value -     0=error and 1=no error
"RTN","XULMU",200,0)
 ;  ERROR - optional error message - if needed, pass by reference
"RTN","XULMU",201,0)
 ;
"RTN","XULMU",202,0)
 ; Example: To update a record in subfile 2.0361 in record with ien=353,
"RTN","XULMU",203,0)
 ;subrecord ien=68, with the field .01 value = 21:
"RTN","XULMU",204,0)
 ;    S DATA(.01)=21,DA=68,DA(1)=353 I $$UPD(2.0361,.DA,.DATA,.ERROR) W !,"DONE"
"RTN","XULMU",205,0)
 ;
"RTN","XULMU",206,0)
 N FDA,FIELD,IENS,ERRORS
"RTN","XULMU",207,0)
 ;
"RTN","XULMU",208,0)
 ;IENS - Internal Entry Number String defined by FM
"RTN","XULMU",209,0)
 ;FDA - the FDA array as defined by FM
"RTN","XULMU",210,0)
 ;
"RTN","XULMU",211,0)
 I '$G(DA) S ERROR="IEN OF RECORD TO BE UPDATED NOT SPECIFIED" Q 0
"RTN","XULMU",212,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","XULMU",213,0)
 S FIELD=0
"RTN","XULMU",214,0)
 F  S FIELD=$O(DATA(FIELD)) Q:'FIELD  D
"RTN","XULMU",215,0)
 .S FDA(FILE,IENS,FIELD)=$G(DATA(FIELD))
"RTN","XULMU",216,0)
 D FILE^DIE("","FDA","ERRORS(1)")
"RTN","XULMU",217,0)
 I +$G(DIERR) D
"RTN","XULMU",218,0)
 .S ERROR=$G(ERRORS(1,"DIERR",1,"TEXT",1))
"RTN","XULMU",219,0)
 E  D
"RTN","XULMU",220,0)
 .S ERROR=""
"RTN","XULMU",221,0)
 ;
"RTN","XULMU",222,0)
 D CLEAN^DILF
"RTN","XULMU",223,0)
 Q $S(+$G(DIERR):0,1:1)
"RTN","XULMU",224,0)
 ;
"RTN","XULMU",225,0)
SETCLEAN(RTN,VAR) ;
"RTN","XULMU",226,0)
 ;Description:  The purpose of this API is to register a cleanup routine
"RTN","XULMU",227,0)
 ;   that should be executed when the process is terminated by the 
"RTN","XULMU",228,0)
 ;   Kernel Lock Manager.  An entry is created on a stack kept for the
"RTN","XULMU",229,0)
 ;   process.  The location is ^XTMP("XULM","XULM CLEANUP_"_$J,0) where $J
"RTN","XULMU",230,0)
 ;   uniquely identifies the process.  A process may call SETCLEAN^XULMU
"RTN","XULMU",231,0)
 ;   repeatedly, and each time a new entry is placed on the stack.
"RTN","XULMU",232,0)
 ;
"RTN","XULMU",233,0)
 ;Input:
"RTN","XULMU",234,0)
 ;  RTN -   The routine to be executed when the process is terminated.
"RTN","XULMU",235,0)
 ;  VAR - A list of variables that should be defined whent the routine
"RTN","XULMU",236,0)
 ;        is executed.  It is up to the application to insure that
"RTN","XULMU",237,0)
 ;        all the required variables are defined. 
"RTN","XULMU",238,0)
 ;  Function:  An integer is returned that identifies the entry created
"RTN","XULMU",239,0)
 ;             on the stack.  The application needs to retain this only
"RTN","XULMU",240,0)
 ;             if it may need to later remove the entry from the stack.
"RTN","XULMU",241,0)
 ;
"RTN","XULMU",242,0)
 ;  Example:
"RTN","XULMU",243,0)
 ;      S VAR("DFN")=DFN
"RTN","XULMU",244,0)
 ;      S CLNENTRY=$$SETCLEAN^XULMU("MYCLEAN^MYRTN",.VAR)
"RTN","XULMU",245,0)
 ;
"RTN","XULMU",246,0)
 N I,GBL
"RTN","XULMU",247,0)
 S GBL=$NA(^XTMP("XULM","XULM CLEANUP_"_$J,0))
"RTN","XULMU",248,0)
 ;I '$D(@GBL@(0)) S @GBL@(0)=$$FMADD^XLFDT($$NOW^XLFDT\1,2)_"me^here"_$$NOW^XLFDT\1
"RTN","XULMU",249,0)
 I '$D(@GBL@(0)) D
"RTN","XULMU",250,0)
 .S @GBL@(0)=$$FMADD^XLFDT($$NOW^XLFDT\1,2)
"RTN","XULMU",251,0)
 .S @GBL@(0)=@GBL@(0)_"^"_($$NOW^XLFDT\1)
"RTN","XULMU",252,0)
 S I=+$O(@GBL@(9999999),-1)+1
"RTN","XULMU",253,0)
 S @GBL@(I,"ROUTINE")=RTN
"RTN","XULMU",254,0)
 M @GBL@(I,"VARIABLES")=VAR
"RTN","XULMU",255,0)
 Q I
"RTN","XULMU",256,0)
 ;
"RTN","XULMU",257,0)
CLEANUP(XULAST,DOLLARJ) ;
"RTN","XULMU",258,0)
 ;Description:  This API will execute the housecleaning stack set by the
"RTN","XULMU",259,0)
 ;process identified by DOLLARJ. Entries are executed in the FIFO order,
"RTN","XULMU",260,0)
 ;with the last entry added being the first to be executed, and XULAST
"RTN","XULMU",261,0)
 ;being the last entry executed. If LAST is not passed in,
"RTN","XULMU",262,0)
 ;then the entire stack is executed.
"RTN","XULMU",263,0)
 ;
"RTN","XULMU",264,0)
 ;Input:
"RTN","XULMU",265,0)
 ;  XULAST (optional) - This is the last entry that will be executed.
"RTN","XULMU",266,0)
 ;     If not passed in, then the entire housecleaning stack is executed.
"RTN","XULMU",267,0)
 ;  DOLLARJ - The $J value of the process that created the housecleaning
"RTN","XULMU",268,0)
 ;     stack. If DOLLARJ is not passed in, the value defaults to be $J. 
"RTN","XULMU",269,0)
 ;
"RTN","XULMU",270,0)
 N XUGBL,XUENTRY
"RTN","XULMU",271,0)
 I $G(DOLLARJ)="" S DOLLARJ=$J
"RTN","XULMU",272,0)
 S XUGBL=$NA(^XTMP("XULM","XULM CLEANUP_"_DOLLARJ,0))
"RTN","XULMU",273,0)
 S XULAST=+$G(XULAST)
"RTN","XULMU",274,0)
 S XUENTRY=9999
"RTN","XULMU",275,0)
 F  S XUENTRY=$O(@XUGBL@(XUENTRY),-1) Q:XUENTRY<XULAST  D
"RTN","XULMU",276,0)
 .N XURTN,XUVAR
"RTN","XULMU",277,0)
 .S XURTN=$G(@XUGBL@(XUENTRY,"ROUTINE"))
"RTN","XULMU",278,0)
 .S XUVAR=""
"RTN","XULMU",279,0)
 .F  S XUVAR=$O(@XUGBL@(XUENTRY,"VARIABLES",XUVAR)) Q:XUVAR=""  N @XUVAR S @XUVAR=@XUGBL@(XUENTRY,"VARIABLES",XUVAR)
"RTN","XULMU",280,0)
 .D:$L(XURTN) @XURTN
"RTN","XULMU",281,0)
 .K @XUGBL@(XUENTRY)
"RTN","XULMU",282,0)
 Q
"RTN","XULMU",283,0)
UNCLEAN(LAST,DOLLARJ) ;
"RTN","XULMU",284,0)
 ;Description - this removes entries form the housecleaning stack set by
"RTN","XULMU",285,0)
 ;calling SETCLEAN^XULMU. Entries are removed in FIFO order.  If LAST is
"RTN","XULMU",286,0)
 ;not passed in, then the entire stack is deleted, otherwise just the
"RTN","XULMU",287,0)
 ;entries back to LAST are removed.
"RTN","XULMU",288,0)
 ;Input:
"RTN","XULMU",289,0)
 ;  LAST - Identifies the last entry on the housekeeping stack to remove.
"RTN","XULMU",290,0)
 ;       Entries are removed in FIFO order, so the first entry removed is
"RTN","XULMU",291,0)
 ;       the last entry that was added, and the last entry removed is
"RTN","XULMU",292,0)
 ;       LAST. If not passed in, the entire housecleainging stack is
"RTN","XULMU",293,0)
 ;       deleted. 
"RTN","XULMU",294,0)
 ;  DOLLARJ (optional) The $J value of process that set the stack.  If
"RTN","XULMU",295,0)
 ;          not passed in then its value is assumed to be $J.
"RTN","XULMU",296,0)
 ;
"RTN","XULMU",297,0)
 N GBL,ENTRY
"RTN","XULMU",298,0)
 I $G(DOLLARJ)="" S DOLLARJ=$J
"RTN","XULMU",299,0)
 S GBL=$NA(^XTMP("XULM","XULM CLEANUP_"_DOLLARJ,0))
"RTN","XULMU",300,0)
 S LAST=+$G(LAST)
"RTN","XULMU",301,0)
 I 'LAST K @GBL Q
"RTN","XULMU",302,0)
 S ENTRY=9999
"RTN","XULMU",303,0)
 F  S ENTRY=$O(@GBL@(ENTRY),-1)  Q:ENTRY<LAST  K @GBL@(ENTRY) I 'ENTRY K @GBL
"RTN","XULMU",304,0)
 Q
"RTN","XULMU",305,0)
 ;
"RTN","XULMU",306,0)
TEMPLATE(IEN) ;Returns the lock template, with the "^" prefix if it is on a global
"RTN","XULMU",307,0)
 N LOCK
"RTN","XULMU",308,0)
 S LOCK=$G(^XLM(8993,IEN,0))
"RTN","XULMU",309,0)
 I $P($G(^XLM(8993,IEN,1)),"^",2) S LOCK="^"_LOCK
"RTN","XULMU",310,0)
 Q LOCK
"RTN","XULMU",311,0)
 ;
"RTN","XULMU",312,0)
 ;
"RTN","XULMUI")
0^10^B168290703
"RTN","XULMUI",1,0)
XULMUI ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;10/24/2012
"RTN","XULMUI",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMUI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMUI",4,0)
 ;
"RTN","XULMUI",5,0)
 ;  ******************************************************************
"RTN","XULMUI",6,0)
 ;  *                                                                *
"RTN","XULMUI",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMUI",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMUI",9,0)
 ;  *                                                                *
"RTN","XULMUI",10,0)
 ;  ******************************************************************
"RTN","XULMUI",11,0)
 ;
"RTN","XULMUI",12,0)
 ;
"RTN","XULMUI",13,0)
REFRESH ;
"RTN","XULMUI",14,0)
 K @LOCKS,@IDX
"RTN","XULMUI",15,0)
 Q:'$$GETLOCKS^XULM(.XUPARMS)
"RTN","XULMUI",16,0)
 I $D(XUPARMS("LAST ACTION")) D
"RTN","XULMUI",17,0)
 .D @XUPARMS("LAST ACTION")
"RTN","XULMUI",18,0)
 E  D BYPAT
"RTN","XULMUI",19,0)
 Q
"RTN","XULMUI",20,0)
BYLOCK ; display user locks sorted by lock
"RTN","XULMUI",21,0)
 N LOCK,XUTOPIC
"RTN","XULMUI",22,0)
 S XUTOPIC="LOCK"
"RTN","XULMUI",23,0)
 S XUPARMS("LAST ACTION")="BYLOCK^XULMUI"
"RTN","XULMUI",24,0)
 S VALMCNT=0
"RTN","XULMUI",25,0)
 D CLEAN^VALM10
"RTN","XULMUI",26,0)
 S VALMBG=1
"RTN","XULMUI",27,0)
 S VALMSG="User Locks Sorted by Lock   ["_$S($L($G(XUPARMS("SELECTED NODE"))):$$LAST8(XUPARMS("SELECTED NODE")),1:"ALL NODES")_"]"
"RTN","XULMUI",28,0)
 D HDR("Lock",35,"Node",8,"User",13,"Patient",25)
"RTN","XULMUI",29,0)
 S LOCK=""
"RTN","XULMUI",30,0)
 F  S LOCK=$O(@LOCKS@(LOCK)) Q:LOCK=""  D
"RTN","XULMUI",31,0)
 .N NODE
"RTN","XULMUI",32,0)
 .S NODE=""
"RTN","XULMUI",33,0)
 .F  S NODE=$O(@LOCKS@(LOCK,NODE)) Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  I '$G(@LOCKS@(LOCK,NODE,"SYSTEM")) D
"RTN","XULMUI",34,0)
 ..D NEWENTRY(LOCK,NODE,LOCK,35,$$LAST8(NODE),8,$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2),13,$$GETID(LOCK,NODE,2),25)
"RTN","XULMUI",35,0)
 ;
"RTN","XULMUI",36,0)
 S VALMBCK="R"
"RTN","XULMUI",37,0)
 Q
"RTN","XULMUI",38,0)
 ;
"RTN","XULMUI",39,0)
SYSTEM ; display system locks sorted by lock
"RTN","XULMUI",40,0)
 N LOCK
"RTN","XULMUI",41,0)
 I '$$KCHK^XUSRB("XULM SYSTEM LOCKS") D  Q 
"RTN","XULMUI",42,0)
 . W *7,!!!,?10,"***You are not authorized to view SYSTEM LOCKS***" H 5
"RTN","XULMUI",43,0)
 . S VALMBCK="R"
"RTN","XULMUI",44,0)
 S XUPARMS("LAST ACTION")="SYSTEM^XULMUI"
"RTN","XULMUI",45,0)
 S XUTOPIC="LOCK"
"RTN","XULMUI",46,0)
 S VALMCNT=0
"RTN","XULMUI",47,0)
 D CLEAN^VALM10
"RTN","XULMUI",48,0)
 S VALMBG=1
"RTN","XULMUI",49,0)
 S VALMSG="System Locks Sorted by Lock   ["_$S($L($G(XUPARMS("SELECTED NODE"))):$$LAST8(XUPARMS("SELECTED NODE")),1:"ALL NODES")_"]"
"RTN","XULMUI",50,0)
 D HDR("Lock",50,"Node",8,"User",15)
"RTN","XULMUI",51,0)
 S LOCK=""
"RTN","XULMUI",52,0)
 F  S LOCK=$O(@LOCKS@(LOCK)) Q:LOCK=""  D
"RTN","XULMUI",53,0)
 .N NODE
"RTN","XULMUI",54,0)
 .S NODE=""
"RTN","XULMUI",55,0)
 .F  S NODE=$O(@LOCKS@(LOCK,NODE)) Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  I $G(@LOCKS@(LOCK,NODE,"SYSTEM")) D
"RTN","XULMUI",56,0)
 ..D NEWENTRY(LOCK,NODE,LOCK,50,$$LAST8(NODE),8,$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2),15)
"RTN","XULMUI",57,0)
 ;
"RTN","XULMUI",58,0)
 S VALMBCK="R"
"RTN","XULMUI",59,0)
 Q
"RTN","XULMUI",60,0)
 ;
"RTN","XULMUI",61,0)
GOTO ;Jumps to a location on the screen
"RTN","XULMUI",62,0)
 S VALMBG=$$ASKWHERE(XUTOPIC)
"RTN","XULMUI",63,0)
 S VALMBCK="R"
"RTN","XULMUI",64,0)
 Q
"RTN","XULMUI",65,0)
 ;
"RTN","XULMUI",66,0)
BYUSER ; display list sorted by user
"RTN","XULMUI",67,0)
 N LOCK,USER
"RTN","XULMUI",68,0)
 S XUPARMS("LAST ACTION")="BYUSER^XULMUI"
"RTN","XULMUI",69,0)
 S XUTOPIC="USER"
"RTN","XULMUI",70,0)
 D HDR("User",14,"Lock",33,"Node",8,"Patient",25)
"RTN","XULMUI",71,0)
 S VALMCNT=0
"RTN","XULMUI",72,0)
 S VALMBG=1
"RTN","XULMUI",73,0)
 D CLEAN^VALM10
"RTN","XULMUI",74,0)
 S VALMSG="User Locks Sorted by User Name   ["_$S($L($G(XUPARMS("SELECTED NODE"))):$$LAST8(XUPARMS("SELECTED NODE")),1:"ALL NODES")_"]"
"RTN","XULMUI",75,0)
 S USER=""
"RTN","XULMUI",76,0)
 ;
"RTN","XULMUI",77,0)
 F  S USER=$O(@IDX@("OWNER",USER)) Q:USER=""  D
"RTN","XULMUI",78,0)
 .S LOCK=""
"RTN","XULMUI",79,0)
 .F  S LOCK=$O(@IDX@("OWNER",USER,LOCK)) Q:LOCK=""  D
"RTN","XULMUI",80,0)
 ..N NODE
"RTN","XULMUI",81,0)
 ..S NODE=""
"RTN","XULMUI",82,0)
 ..F  S NODE=$O(@IDX@("OWNER",USER,LOCK,NODE)) Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  Q:$G(@LOCKS@(LOCK,NODE,"SYSTEM"))  D
"RTN","XULMUI",83,0)
 ...D NEWENTRY(LOCK,NODE,$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2),14,LOCK,33,$$LAST8(NODE),8,$$GETID(LOCK,NODE,2),25)
"RTN","XULMUI",84,0)
 S VALMBCK="R"
"RTN","XULMUI",85,0)
 Q
"RTN","XULMUI",86,0)
 ;
"RTN","XULMUI",87,0)
BYPAT ; display list sorted by Patient
"RTN","XULMUI",88,0)
 N LOCK,USER,PAT
"RTN","XULMUI",89,0)
 S XUPARMS("LAST ACTION")="BYPAT^XULMUI"
"RTN","XULMUI",90,0)
 S XUTOPIC="PATIENT"
"RTN","XULMUI",91,0)
 D HDR("Patient",15,"Lock",33,"Node",8,"User",15)
"RTN","XULMUI",92,0)
 S VALMCNT=0
"RTN","XULMUI",93,0)
 S VALMBG=1
"RTN","XULMUI",94,0)
 D CLEAN^VALM10
"RTN","XULMUI",95,0)
 K @IDX@("FILE/ID")
"RTN","XULMUI",96,0)
 S VALMSG="User Locks Sorted by Patient Name   ["_$S($L($G(XUPARMS("SELECTED NODE"))):$$LAST8(XUPARMS("SELECTED NODE")),1:"ALL NODES")_"]"
"RTN","XULMUI",97,0)
 S LOCK=""
"RTN","XULMUI",98,0)
 F  S LOCK=$O(@LOCKS@(LOCK)) Q:LOCK=""  D
"RTN","XULMUI",99,0)
 .S NODE=""
"RTN","XULMUI",100,0)
 .F  S NODE=$O(@LOCKS@(LOCK,NODE)) Q:NODE=""  Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  I '$G(@LOCKS@(LOCK,NODE,"SYSTEM")) D
"RTN","XULMUI",101,0)
 ..S PAT=$$GETID(LOCK,NODE,2) S:PAT="" PAT="{?}"
"RTN","XULMUI",102,0)
 ..S @IDX@("FILE/ID",PAT,LOCK,NODE)=""
"RTN","XULMUI",103,0)
 S PAT=""
"RTN","XULMUI",104,0)
 F  S PAT=$O(@IDX@("FILE/ID",PAT)) Q:PAT=""  D
"RTN","XULMUI",105,0)
 .S LOCK=""
"RTN","XULMUI",106,0)
 .F  S LOCK=$O(@IDX@("FILE/ID",PAT,LOCK)) Q:LOCK=""  D
"RTN","XULMUI",107,0)
 ..N NODE
"RTN","XULMUI",108,0)
 ..S NODE=""
"RTN","XULMUI",109,0)
 ..F  S NODE=$O(@IDX@("FILE/ID",PAT,LOCK,NODE)) Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  D
"RTN","XULMUI",110,0)
 ...D NEWENTRY(LOCK,NODE,PAT,15,LOCK,33,$$LAST8(NODE),8,$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2),25)
"RTN","XULMUI",111,0)
 S VALMBCK="R"
"RTN","XULMUI",112,0)
 Q
"RTN","XULMUI",113,0)
 ;
"RTN","XULMUI",114,0)
SLCTFILE() ;Select a file reference to screen locks by
"RTN","XULMUI",115,0)
 D FULL^VALM1
"RTN","XULMUI",116,0)
 W !
"RTN","XULMUI",117,0)
 N NAME,FILE,I,FILES
"RTN","XULMUI",118,0)
 S (FILE,I)=0
"RTN","XULMUI",119,0)
 F  S FILE=$O(@IDX@("FILE",FILE)) Q:'FILE  D
"RTN","XULMUI",120,0)
 .S NAME=$P($G(^DIC(FILE,0)),"^")
"RTN","XULMUI",121,0)
 .I $L(NAME) D
"RTN","XULMUI",122,0)
 ..S I=I+1
"RTN","XULMUI",123,0)
 ..S FILES(I)=FILE
"RTN","XULMUI",124,0)
 ..W !,$$LJ("("_I_")",8),NAME," File (#"_FILE_")"
"RTN","XULMUI",125,0)
 I 'I D PAUSE^XULMU("There are no file references available!") Q 0
"RTN","XULMUI",126,0)
 W !
"RTN","XULMUI",127,0)
 S DIR(0)="NO^"_1_":"_I_":0"
"RTN","XULMUI",128,0)
 S DIR("A")="Select a file from the list: "
"RTN","XULMUI",129,0)
 I I>0 S DIR("B")=1
"RTN","XULMUI",130,0)
 S DIR("?")="Enter the number of an entry on the screen to select a file."
"RTN","XULMUI",131,0)
 D ^DIR
"RTN","XULMUI",132,0)
 ;
"RTN","XULMUI",133,0)
 I +Y Q $G(FILES(+Y))
"RTN","XULMUI",134,0)
 Q 0
"RTN","XULMUI",135,0)
 ;
"RTN","XULMUI",136,0)
BYFILE(FILE) ; Display locks that have a computable references to a particular file
"RTN","XULMUI",137,0)
 N LOCK,USER
"RTN","XULMUI",138,0)
 S XUPARMS("LAST ACTION")="BYFILE^XULMUI("_FILE_")"
"RTN","XULMUI",139,0)
 I FILE D
"RTN","XULMUI",140,0)
 .N FID
"RTN","XULMUI",141,0)
 .S XUTOPIC="PATIENT"
"RTN","XULMUI",142,0)
 .D CLEAN^VALM10
"RTN","XULMUI",143,0)
 .D HDR("Patient",15,"User",14,"Node",8,"LOCK",60)
"RTN","XULMUI",144,0)
 .S VALMSG="User Locks Related to the "_$P($G(^DIC(FILE,0)),"^")_" File"
"RTN","XULMUI",145,0)
 .K @IDX@("FILE/ID")
"RTN","XULMUI",146,0)
 .S VALMCNT=0
"RTN","XULMUI",147,0)
 .S VALMBG=1
"RTN","XULMUI",148,0)
 .S LOCK=""
"RTN","XULMUI",149,0)
 .F  S LOCK=$O(@IDX@("FILE",FILE,LOCK)) Q:LOCK=""  D
"RTN","XULMUI",150,0)
 ..N NODE S NODE=""
"RTN","XULMUI",151,0)
 ..F  S NODE=$O(@IDX@("FILE",FILE,LOCK,NODE)) Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  S FID=$$GETID(LOCK,NODE,2) S:FID="" FID="?" S @IDX@("FILE/ID",FID,LOCK,NODE)=""
"RTN","XULMUI",152,0)
 .S FID=""
"RTN","XULMUI",153,0)
 .F  S FID=$O(@IDX@("FILE/ID",FID)) Q:FID=""  D
"RTN","XULMUI",154,0)
 ..S LOCK=""
"RTN","XULMUI",155,0)
 ..F  S LOCK=$O(@IDX@("FILE/ID",FID,LOCK)) Q:LOCK=""  D
"RTN","XULMUI",156,0)
 ...N NODE S NODE=""
"RTN","XULMUI",157,0)
 ...F  S NODE=$O(@IDX@("FILE/ID",FID,LOCK,NODE)) Q:NODE=""  Q:NODE=""  Q:$D(XUPARMS("SELECTED NODE"))&'(NODE=$G(XUPARMS("SELECTED NODE")))  D
"RTN","XULMUI",158,0)
 ....D NEWENTRY(LOCK,NODE,FID,15,$P(@LOCKS@(LOCK,NODE,"OWNER"),"^",2),14,$$LAST8(NODE),8,LOCK,60)
"RTN","XULMUI",159,0)
 S VALMBCK="R"
"RTN","XULMUI",160,0)
 Q
"RTN","XULMUI",161,0)
ASKWHERE(TOPIC) ;Asks the user where to jump to.
"RTN","XULMUI",162,0)
 N Y,DIR,DIRUT,RESPONSE,GOTO,WHERETO
"RTN","XULMUI",163,0)
 W !!,"Are you looking for a specific "_TOPIC_"?"
"RTN","XULMUI",164,0)
 W !,"If so, enter the "_TOPIC_", or the first few letters of "_TOPIC_"."
"RTN","XULMUI",165,0)
 S DIR("A")=TOPIC_": "
"RTN","XULMUI",166,0)
 S DIR(0)="FOA^1:45"
"RTN","XULMUI",167,0)
 D ^DIR
"RTN","XULMUI",168,0)
 I $D(DIRUT),(TOPIC'="LOCK")!(Y="^") Q VALMBG
"RTN","XULMUI",169,0)
 I TOPIC'="LOCK" S Y=$$UP^XLFSTR(Y)
"RTN","XULMUI",170,0)
 S WHERETO=Y
"RTN","XULMUI",171,0)
 I WHERETO="" Q 1
"RTN","XULMUI",172,0)
 S GOTO=$O(@VALMAR@("IDX1",WHERETO))
"RTN","XULMUI",173,0)
 I $E(GOTO,1,$L(WHERETO))'=WHERETO S GOTO=$O(@VALMAR@("IDX1",GOTO),-1)
"RTN","XULMUI",174,0)
 I $L(GOTO) D
"RTN","XULMUI",175,0)
 .S VALMBG=+$G(@VALMAR@("IDX1",GOTO))
"RTN","XULMUI",176,0)
 E  S VALMBG=1
"RTN","XULMUI",177,0)
 Q VALMBG
"RTN","XULMUI",178,0)
 ;
"RTN","XULMUI",179,0)
 ;
"RTN","XULMUI",180,0)
NEWENTRY(LOCK,NODE,COL1,W1,COL2,W2,COL3,W3,COL4,W4) ;
"RTN","XULMUI",181,0)
 N TEMP
"RTN","XULMUI",182,0)
 S:$G(COL1)="{?}" COL1=" "
"RTN","XULMUI",183,0)
 S:$G(COL2)="{?}" COL2=" "
"RTN","XULMUI",184,0)
 S:$G(COL3)="{?}" COL3=" "
"RTN","XULMUI",185,0)
 S:$G(COL4)="{?}" COL3=" "
"RTN","XULMUI",186,0)
 S @VALMAR@($$I,0)=$$RJ(VALMCNT,4)_" "_$$LJ($E(COL1,1,W1),W1)_"  "_$$LJ($E($G(COL2),1,$G(W2)),$G(W2))_"  "_$$LJ($E($G(COL3),1,$G(W3)),$G(W3))_"  "_$$LJ($E($G(COL4),1,$G(W4)),$G(W4))
"RTN","XULMUI",187,0)
 D CNTRL^VALM10(VALMCNT,1,5,IOINHI,IOINORM)
"RTN","XULMUI",188,0)
 S TEMP=$G(@VALMAR@("IDX1",COL1))
"RTN","XULMUI",189,0)
 I ('TEMP)!(VALMCNT<TEMP) S @VALMAR@("IDX1",COL1)=VALMCNT
"RTN","XULMUI",190,0)
 S @VALMAR@("IDX2",VALMCNT)=NODE_"|XULM|"_LOCK
"RTN","XULMUI",191,0)
 Q
"RTN","XULMUI",192,0)
 ;
"RTN","XULMUI",193,0)
GETID(LOCK,NODE,FILE) ;gets first ID for sorting purposes.
"RTN","XULMUI",194,0)
 ;
"RTN","XULMUI",195,0)
 N ID,TEMPLATE,VARS,FILES
"RTN","XULMUI",196,0)
 S TEMPLATE=$G(@LOCKS@(LOCK,NODE,"TEMPLATE"))
"RTN","XULMUI",197,0)
 Q:'TEMPLATE ""
"RTN","XULMUI",198,0)
 S FILES(FILE)=$G(@LOCKS@(LOCK,NODE,"FILES",FILE))
"RTN","XULMUI",199,0)
 Q:'FILES(FILE) ""
"RTN","XULMUI",200,0)
 M VARS=@LOCKS@(LOCK,NODE,"VARIABLES")
"RTN","XULMUI",201,0)
 D GETREFS^XULMLD(TEMPLATE,.FILES,.VARS)
"RTN","XULMUI",202,0)
 Q $S($D(FILES(FILE,1)):$P(FILES(FILE,1),":",2,5),1:"?")
"RTN","XULMUI",203,0)
 ;
"RTN","XULMUI",204,0)
ADDLINE(LINE) ;
"RTN","XULMUI",205,0)
 N LIN
"RTN","XULMUI",206,0)
 S LIN="    "_LINE
"RTN","XULMUI",207,0)
 D ADD(LINE)
"RTN","XULMUI",208,0)
 Q
"RTN","XULMUI",209,0)
ADD(LINE) ;
"RTN","XULMUI",210,0)
 S @VALMAR@($$I,0)=LINE
"RTN","XULMUI",211,0)
 Q
"RTN","XULMUI",212,0)
 ;
"RTN","XULMUI",213,0)
EXIT ; -- exit code
"RTN","XULMUI",214,0)
 D CLEAN^VALM10
"RTN","XULMUI",215,0)
 D CLEAR^VALM1
"RTN","XULMUI",216,0)
 Q
"RTN","XULMUI",217,0)
SELECT ;
"RTN","XULMUI",218,0)
 N START,END,DIR,XULMLOCK,Y,XULMNODE,XULMEXIT
"RTN","XULMUI",219,0)
 S START=$G(@VALMAR@("IDX1",VALMBG),1)
"RTN","XULMUI",220,0)
 I START,$G(@VALMAR@("IDX1",(VALMBG-1)))=START,(START+1)'>VALMCNT S START=START+1
"RTN","XULMUI",221,0)
 S END=$G(@VALMAR@("IDX1",VALMBG+17))
"RTN","XULMUI",222,0)
 I 'END S END=VALMCNT
"RTN","XULMUI",223,0)
 I START,START=END S Y=START
"RTN","XULMUI",224,0)
 E  D
"RTN","XULMUI",225,0)
 .S DIR(0)="NO^"_START_":"_END_":0"
"RTN","XULMUI",226,0)
 .S DIR("A")="Select a lock: "
"RTN","XULMUI",227,0)
 .S DIR("?")="Enter the number of an entry on the screen to select a lock."
"RTN","XULMUI",228,0)
 .D ^DIR
"RTN","XULMUI",229,0)
 ;
"RTN","XULMUI",230,0)
 I +Y D
"RTN","XULMUI",231,0)
 .N X
"RTN","XULMUI",232,0)
 .S X=@VALMAR@("IDX2",+Y)
"RTN","XULMUI",233,0)
 .S XULMNODE=$P(X,"|XULM|")
"RTN","XULMUI",234,0)
 .S XULMLOCK=$P(X,"|XULM|",2)
"RTN","XULMUI",235,0)
 .S XUPARMS("KILL")=0
"RTN","XULMUI",236,0)
 .D EN^VALM("XULM DISPLAY SINGLE LOCK")
"RTN","XULMUI",237,0)
 .I $G(XUPARMS("KILL")),'$G(XULMEXIT) K XUPARMS("KILL") D REFRESH
"RTN","XULMUI",238,0)
 S VALMBCK=$S($G(XULMEXIT):"Q",1:"R")
"RTN","XULMUI",239,0)
 Q
"RTN","XULMUI",240,0)
 ;
"RTN","XULMUI",241,0)
 ;
"RTN","XULMUI",242,0)
SLCTNODE ;
"RTN","XULMUI",243,0)
 N NODE,DIR
"RTN","XULMUI",244,0)
 S NODE(0)=1,NODE(1)="ALL NODES"
"RTN","XULMUI",245,0)
 S NODE=""
"RTN","XULMUI",246,0)
 F  S NODE=$O(XUPARMS("REPORTING NODES",NODE)) Q:NODE=""  S NODE(0)=NODE(0)+1,NODE(NODE(0))=NODE
"RTN","XULMUI",247,0)
 D FULL^VALM1
"RTN","XULMUI",248,0)
 W !!,"You can display locks from all the nodes or a single node."
"RTN","XULMUI",249,0)
 F I=1:1:NODE(0) S DIR("A",I)="["_I_"]   "_NODE(I)
"RTN","XULMUI",250,0)
 S NODE(0)=NODE(0)+1
"RTN","XULMUI",251,0)
 S DIR("A",NODE(0))=" "
"RTN","XULMUI",252,0)
 S DIR(0)="NO^"_1_":"_NODE(0)_":0"
"RTN","XULMUI",253,0)
 S DIR("A")="Select a node"
"RTN","XULMUI",254,0)
 S DIR("?")="Enter a number to select a node."
"RTN","XULMUI",255,0)
 S DIR("B")=1
"RTN","XULMUI",256,0)
 D ^DIR
"RTN","XULMUI",257,0)
 I +Y D
"RTN","XULMUI",258,0)
 .I +Y=1 K XUPARMS("SELECTED NODE")
"RTN","XULMUI",259,0)
 .I +Y>1,+Y<NODE(0) S XUPARMS("SELECTED NODE")=$G(NODE(+Y))
"RTN","XULMUI",260,0)
 .D:$D(XUPARMS("LAST ACTION")) @XUPARMS("LAST ACTION")
"RTN","XULMUI",261,0)
 S VALMBCK="R"
"RTN","XULMUI",262,0)
 Q
"RTN","XULMUI",263,0)
 ;
"RTN","XULMUI",264,0)
 ;
"RTN","XULMUI",265,0)
LJ(STRING,LEN) ;
"RTN","XULMUI",266,0)
 Q $$LJ^XLFSTR(STRING,LEN)
"RTN","XULMUI",267,0)
RJ(STRING,LEN) ;
"RTN","XULMUI",268,0)
 Q $$RJ^XLFSTR(STRING,LEN)
"RTN","XULMUI",269,0)
 ;
"RTN","XULMUI",270,0)
I() ;
"RTN","XULMUI",271,0)
 S VALMCNT=VALMCNT+1
"RTN","XULMUI",272,0)
 Q VALMCNT
"RTN","XULMUI",273,0)
 ;
"RTN","XULMUI",274,0)
 ;
"RTN","XULMUI",275,0)
HELP ; -- help code
"RTN","XULMUI",276,0)
 N COUNT,LINE
"RTN","XULMUI",277,0)
 D CLEAR^VALM1
"RTN","XULMUI",278,0)
 F COUNT=1:1:19 S LINE=$T(HLPTEXT+COUNT) W !,$P(LINE,";",3,9)
"RTN","XULMUI",279,0)
 W !!!
"RTN","XULMUI",280,0)
 D:'$$PAUSE^XULMU
"RTN","XULMUI",281,0)
 .W @IOF
"RTN","XULMUI",282,0)
 .F COUNT=20:1:35 S LINE=$T(HLPTEXT+COUNT) W !,$P(LINE,";",3,9)
"RTN","XULMUI",283,0)
 .W !!!!!!
"RTN","XULMUI",284,0)
 .D PAUSE^XULMU
"RTN","XULMUI",285,0)
 D RE^VALM4
"RTN","XULMUI",286,0)
 Q
"RTN","XULMUI",287,0)
 ;
"RTN","XULMUI",288,0)
HDR(COL1,W1,COL2,W2,COL3,W3,COL4,W4) ;
"RTN","XULMUI",289,0)
 S VALMCAP="  #  "_$$LJ($G(COL1),W1)_"  "_$$LJ($G(COL2),$G(W2))_"  "_$$LJ($G(COL3),$G(W3))_"  "_$$LJ($G(COL4),$G(W4))_"                           "
"RTN","XULMUI",290,0)
 Q
"RTN","XULMUI",291,0)
 ;
"RTN","XULMUI",292,0)
OPTIONS ;Give options for how the lock list should be displayed.
"RTN","XULMUI",293,0)
 N DIR
"RTN","XULMUI",294,0)
 D FULL^VALM1
"RTN","XULMUI",295,0)
 S DIR(0)="S^1:Sort List by Patient Name;2:Sort List by User Name;3:Sort List by Lock;4:Screen List by File Reference"
"RTN","XULMUI",296,0)
 S DIR("A")="Select a display option: "
"RTN","XULMUI",297,0)
 ;S DIR("A",#)=""
"RTN","XULMUI",298,0)
 S DIR("B")=1
"RTN","XULMUI",299,0)
 S DIR("?",1)="   [1]  - Sorts the list of user locks by patient name."
"RTN","XULMUI",300,0)
 S DIR("?",2)=""
"RTN","XULMUI",301,0)
 S DIR("?",3)="   [2]  - Sorts the list of user locks by user name."
"RTN","XULMUI",302,0)
 S DIR("?",4)=""
"RTN","XULMUI",303,0)
 S DIR("?",5)="   [3]  - Sorts the list of user locks by the lock string."
"RTN","XULMUI",304,0)
 S DIR("?",6)=""
"RTN","XULMUI",305,0)
 S DIR("?",7)="   [4]  - Diplays only those user locks that reference the specific file"
"RTN","XULMUI",306,0)
 S DIR("?",8)="          that you select, sorted by patient name."
"RTN","XULMUI",307,0)
 S DIR("?",9)=" "
"RTN","XULMUI",308,0)
 S DIR("?")=" *System locks are not included in the display list."
"RTN","XULMUI",309,0)
 D ^DIR
"RTN","XULMUI",310,0)
 D
"RTN","XULMUI",311,0)
 .I Y=1 D BYPAT Q
"RTN","XULMUI",312,0)
 .I Y=2 D BYUSER Q
"RTN","XULMUI",313,0)
 .I Y=3 D BYLOCK Q
"RTN","XULMUI",314,0)
 .I Y=4 D  Q
"RTN","XULMUI",315,0)
 ..N FILE
"RTN","XULMUI",316,0)
 ..S FILE=$$SLCTFILE
"RTN","XULMUI",317,0)
 ..I FILE D BYFILE(FILE)
"RTN","XULMUI",318,0)
 S VALMBCK="R"
"RTN","XULMUI",319,0)
 ;
"RTN","XULMUI",320,0)
 ;
"RTN","XULMUI",321,0)
 ;
"RTN","XULMUI",322,0)
LAST8(STRING) ;
"RTN","XULMUI",323,0)
 I $L(STRING)>8,$L($G(XUPARMS("NODES",STRING,"SHORT NAME"))) Q $G(XUPARMS("NODES",STRING,"SHORT NAME"))
"RTN","XULMUI",324,0)
 N LEN
"RTN","XULMUI",325,0)
 S LEN=$L(STRING)
"RTN","XULMUI",326,0)
 Q $E(STRING,$S(LEN>8:LEN-7,1:1),LEN)
"RTN","XULMUI",327,0)
 ;
"RTN","XULMUI",328,0)
 ;;
"RTN","XULMUI",329,0)
HLPTEXT ;;
"RTN","XULMUI",330,0)
 ;;Select an action from the bottom of the screen. 
"RTN","XULMUI",331,0)
 ;;
"RTN","XULMUI",332,0)
 ;;Enter '??' to see additional actions that are available.
"RTN","XULMUI",333,0)
 ;;
"RTN","XULMUI",334,0)
 ;;SL - This action will prompt you to select a lock by its number on the list.
"RTN","XULMUI",335,0)
 ;;     It will then display additional information about the lock and the
"RTN","XULMUI",336,0)
 ;;     process that holds the lock. 
"RTN","XULMUI",337,0)
 ;;
"RTN","XULMUI",338,0)
 ;; 
"RTN","XULMUI",339,0)
 ;;GO  -This action asks where you want to go to on the list and then shifts
"RTN","XULMUI",340,0)
 ;;     the display to that location.
"RTN","XULMUI",341,0)
 ;;
"RTN","XULMUI",342,0)
 ;;
"RTN","XULMUI",343,0)
 ;;RL - This action will rebuild the list of locks displayed on the screen.
"RTN","XULMUI",344,0)
 ;;     Active locks usually change from moment to moment, but users of the
"RTN","XULMUI",345,0)
 ;;     Lock Manager are generally only interested in those locks that are
"RTN","XULMUI",346,0)
 ;;     being improperly held for prolonged periods of time.
"RTN","XULMUI",347,0)
 ;;
"RTN","XULMUI",348,0)
 ;;
"RTN","XULMUI",349,0)
 ;;SYS - This action will display only system locks.  System locks are
"RTN","XULMUI",350,0)
 ;;     those locks set by the Kernel, HL7, and other infrastructure packages.
"RTN","XULMUI",351,0)
 ;;
"RTN","XULMUI",352,0)
 ;;
"RTN","XULMUI",353,0)
 ;;
"RTN","XULMUI",354,0)
 ;;SS - This action provides several options for how the list locks should be
"RTN","XULMUI",355,0)
 ;;     displayed.  The options include sorting the list by patient name, sorting
"RTN","XULMUI",356,0)
 ;;     the list by the user name, sorting the list by the lock string, and
"RTN","XULMUI",357,0)
 ;;     screening the entries by lock reference, which means that only locks
"RTN","XULMUI",358,0)
 ;;     that relate to that specific file will be included in the display.
"RTN","XULMUI",359,0)
 ;;
"RTN","XULMUI",360,0)
 ;;
"RTN","XULMUI",361,0)
 ;;SN - This action allows the user to select either a single computer node or
"RTN","XULMUI",362,0)
 ;;     all the computer nodes.  If the user selects a single node then the display
"RTN","XULMUI",363,0)
 ;;     of locks will include only locks placed by processess running on that node.  
"RTN","XULMUI",364,0)
 ;;
"RTN","XULMUI",365,0)
 ;; 
"RTN","XULMUI",366,0)
 ;;
"RTN","XULMUI",367,0)
 ;;
"RTN","XULMUI",368,0)
 ;; 
"RTN","XULMUI",369,0)
ENDHELP ;;END
"RTN","XULMUI1")
0^11^B48620576
"RTN","XULMUI1",1,0)
XULMUI1 ;IRMFO-ALB/CJM/SWO/RGG - KERNEL LOCK MANAGER ;11/29/2012
"RTN","XULMUI1",2,0)
 ;;8.0;KERNEL;**608**;JUL 10, 1995;Build 84
"RTN","XULMUI1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified
"RTN","XULMUI1",4,0)
 ;
"RTN","XULMUI1",5,0)
 ;  ******************************************************************
"RTN","XULMUI1",6,0)
 ;  *                                                                *
"RTN","XULMUI1",7,0)
 ;  *  The Kernel Lock Manager is based on the VistA Lock Manager    *
"RTN","XULMUI1",8,0)
 ;  *        developed by Tommy Martin.                              *
"RTN","XULMUI1",9,0)
 ;  *                                                                *
"RTN","XULMUI1",10,0)
 ;  ******************************************************************
"RTN","XULMUI1",11,0)
 ;
"RTN","XULMUI1",12,0)
 ;
"RTN","XULMUI1",13,0)
 ;
"RTN","XULMUI1",14,0)
INIT ; Build list for displaying a single lock = XULMLOCK
"RTN","XULMUI1",15,0)
 N OWNER,LOCK,PID
"RTN","XULMUI1",16,0)
 K @VALMAR
"RTN","XULMUI1",17,0)
 S VALMCNT=0
"RTN","XULMUI1",18,0)
 D ADD("Node: "_XULMNODE),CNTRL^VALM10(VALMCNT,1,5,IOINHI,IOINORM)
"RTN","XULMUI1",19,0)
 D ADD("Lock:  "_XULMLOCK),CNTRL^VALM10(VALMCNT,1,5,IOINHI,IOINORM)
"RTN","XULMUI1",20,0)
 D ADD("Full Reference: "_@LOCKS@(XULMLOCK,XULMNODE)),CNTRL^VALM10(VALMCNT,1,15,IOINHI,IOINORM)
"RTN","XULMUI1",21,0)
 S PID=@LOCKS@(XULMLOCK,XULMNODE,"PID")
"RTN","XULMUI1",22,0)
 D ADD("Process ID (decimal): "_PID),CNTRL^VALM10(VALMCNT,1,21,IOINHI,IOINORM)
"RTN","XULMUI1",23,0)
 D ADD("Process ID (hex): "_$$HEX^XULMU(PID)),CNTRL^VALM10(VALMCNT,1,17,IOINHI,IOINORM)
"RTN","XULMUI1",24,0)
 S OWNER=@LOCKS@(XULMLOCK,XULMNODE,"OWNER")
"RTN","XULMUI1",25,0)
 I $P(OWNER,"^",2)="{?}" S $P(OWNER,"^",2)="unavailable"
"RTN","XULMUI1",26,0)
 D ADD("User Name: "_$$LJ($P(OWNER,"^",2),40)_"   DUZ: "_$S(+OWNER:$P(OWNER,"^"),1:"")),CNTRL^VALM10(VALMCNT,1,10,IOINHI,IOINORM),CNTRL^VALM10(VALMCNT,55,4,IOINHI,IOINORM)
"RTN","XULMUI1",27,0)
 D TASK(@LOCKS@(XULMLOCK,XULMNODE,"TASK"))
"RTN","XULMUI1",28,0)
 D TEMPLATE($G(@LOCKS@(XULMLOCK,XULMNODE,"TEMPLATE")))
"RTN","XULMUI1",29,0)
 D FILES(XULMLOCK)
"RTN","XULMUI1",30,0)
 I @IDX@("PID",PID)<2 D
"RTN","XULMUI1",31,0)
 .D ADD(" "),ADD("Other locks held by process:  none"),CNTRL^VALM10(VALMCNT,1,28,IOINHI,IOINORM),ADD(" ")
"RTN","XULMUI1",32,0)
 E  D
"RTN","XULMUI1",33,0)
 .D ADD("  "),ADD("Other locks held by process:"),CNTRL^VALM10(VALMCNT,1,28,IOINHI,IOINORM)
"RTN","XULMUI1",34,0)
 .S LOCK=""
"RTN","XULMUI1",35,0)
 .F  S LOCK=$O(@IDX@("PID",PID,LOCK)) Q:LOCK=""  I LOCK'=XULMLOCK D ADD("       "_LOCK)
"RTN","XULMUI1",36,0)
 Q
"RTN","XULMUI1",37,0)
FILES(XULMLOCK) ;
"RTN","XULMUI1",38,0)
 N FILES,FILE,VARS,TEMPLATE
"RTN","XULMUI1",39,0)
 S TEMPLATE=$G(@LOCKS@(XULMLOCK,XULMNODE,"TEMPLATE"))
"RTN","XULMUI1",40,0)
 I 'TEMPLATE D ADD("File References: unavailable"),CNTRL^VALM10(VALMCNT,1,16,IOINHI,IOINORM) QUIT
"RTN","XULMUI1",41,0)
 D ADD("File References:"),CNTRL^VALM10(VALMCNT,1,16,IOINHI,IOINORM)
"RTN","XULMUI1",42,0)
 S FILE=0
"RTN","XULMUI1",43,0)
 M VARS=@LOCKS@(XULMLOCK,XULMNODE,"VARIABLES"),FILES=@LOCKS@(XULMLOCK,XULMNODE,"FILES")
"RTN","XULMUI1",44,0)
 D GETREFS^XULMLD(@LOCKS@(XULMLOCK,XULMNODE,"TEMPLATE"),.FILES,.VARS)
"RTN","XULMUI1",45,0)
 F  S FILE=$O(FILES(FILE)) Q:'FILE  D
"RTN","XULMUI1",46,0)
 .N LABEL,I
"RTN","XULMUI1",47,0)
 .S LABEL=$P($G(^DIC(FILE,0)),"^")
"RTN","XULMUI1",48,0)
 .Q:'$L(LABEL)
"RTN","XULMUI1",49,0)
 .S LABEL="   "_LABEL_" FILE RECORD:"
"RTN","XULMUI1",50,0)
 .D ADD(LABEL),CNTRL^VALM10(VALMCNT,4,($L(LABEL)-3),IOINHI,IOINORM)
"RTN","XULMUI1",51,0)
 .S I=0
"RTN","XULMUI1",52,0)
 .F  S I=$O(FILES(FILE,I)) Q:'I  D
"RTN","XULMUI1",53,0)
 ..S LABEL=$P(FILES(FILE,I),":")_":"
"RTN","XULMUI1",54,0)
 ..D ADD("      "_LABEL_"  "_$P(FILES(FILE,I),":",2,5))
"RTN","XULMUI1",55,0)
 ..D CNTRL^VALM10(VALMCNT,7,$L(LABEL),IOINHI,IOINORM)
"RTN","XULMUI1",56,0)
 Q
"RTN","XULMUI1",57,0)
 ;
"RTN","XULMUI1",58,0)
TEMPLATE(TEMPLATE,OFFSET) ;
"RTN","XULMUI1",59,0)
 S OFFSET=$$RJ("",+$G(OFFSET))
"RTN","XULMUI1",60,0)
 I 'TEMPLATE D ADD(OFFSET_"Lock Usage:  unavailable"),CNTRL^VALM10(VALMCNT,$L(OFFSET)+1,11,IOINHI,IOINORM) Q
"RTN","XULMUI1",61,0)
 D ADD(OFFSET_"Lock Usage:"),CNTRL^VALM10(VALMCNT,1+$L(OFFSET),11,IOINHI,IOINORM)
"RTN","XULMUI1",62,0)
 N NODE,SUB,FILE
"RTN","XULMUI1",63,0)
 S SUB=0
"RTN","XULMUI1",64,0)
 F  S SUB=$O(^XLM(8993,TEMPLATE,4,SUB)) Q:'SUB  D ADD(OFFSET_$G(^XLM(8993,TEMPLATE,4,SUB,0)))
"RTN","XULMUI1",65,0)
 Q
"RTN","XULMUI1",66,0)
 ;
"RTN","XULMUI1",67,0)
TASK(TASK) ;
"RTN","XULMUI1",68,0)
 N NODE
"RTN","XULMUI1",69,0)
 I 'TASK D ADD("Task Information: unavailable"),CNTRL^VALM10(VALMCNT,1,17,IOINHI,IOINORM) Q
"RTN","XULMUI1",70,0)
 S NODE=$G(^%ZTSK(TASK,0))
"RTN","XULMUI1",71,0)
 D ADD("Task Information:"),CNTRL^VALM10(VALMCNT,1,17,IOINHI,IOINORM)
"RTN","XULMUI1",72,0)
 D ADD("    Task#: "_$$LJ(TASK,30)),CNTRL^VALM10(VALMCNT,5,6,IOINHI,IOINORM)
"RTN","XULMUI1",73,0)
 D ADD("    Started: "_$$HTE^XLFDT($P(NODE,"^",5))),CNTRL^VALM10(VALMCNT,5,8,IOINHI,IOINORM)
"RTN","XULMUI1",74,0)
 D ADD("    Option: "_$P(NODE,"^",9)),CNTRL^VALM10(VALMCNT,5,7,IOINHI,IOINORM)
"RTN","XULMUI1",75,0)
 D ADD("    Description: "_$G(^%ZTSK(TASK,.03))),CNTRL^VALM10(VALMCNT,5,13,IOINHI,IOINORM)
"RTN","XULMUI1",76,0)
 Q
"RTN","XULMUI1",77,0)
 ;
"RTN","XULMUI1",78,0)
KILLPROC ;
"RTN","XULMUI1",79,0)
 N PID,RETURN,ERROR
"RTN","XULMUI1",80,0)
 D FULL^VALM1
"RTN","XULMUI1",81,0)
 S RETURN=0
"RTN","XULMUI1",82,0)
 S PID=$G(@LOCKS@(XULMLOCK,XULMNODE,"PID"))
"RTN","XULMUI1",83,0)
 I PID=$J D PAUSE^XULMU("You cannot kill your own process!") Q
"RTN","XULMUI1",84,0)
 I $G(@LOCKS@(XULMLOCK,XULMNODE,"SYSTEM")) W !,"You selected a system lock! Releasing a systems lock can have a",!,"widespread affect!"
"RTN","XULMUI1",85,0)
 I '$$ASKYESNO^XULMU("Are you sure you want to terminate this process","NO") S VALMBCK="R" Q
"RTN","XULMUI1",86,0)
 ;
"RTN","XULMUI1",87,0)
 ;
"RTN","XULMUI1",88,0)
 S XUPARMS("KILL")=1
"RTN","XULMUI1",89,0)
 I $$SAMENODE^XULMU(XULMNODE) D
"RTN","XULMUI1",90,0)
 .S RETURN=$$KILLPROC^XULMRPC(.RETURN,PID)
"RTN","XULMUI1",91,0)
 E  D
"RTN","XULMUI1",92,0)
 .N $ETRAP,$ESTACK S $ETRAP="G ERROR2^XULM"
"RTN","XULMUI1",93,0)
 .N IP,PORT
"RTN","XULMUI1",94,0)
 .S IP=$G(XUPARMS("NODES",XULMNODE,"IP ADDRESS"))
"RTN","XULMUI1",95,0)
 .S PORT=$G(XUPARMS("NODES",XULMNODE,"PORT"))
"RTN","XULMUI1",96,0)
 .S RETURN=0
"RTN","XULMUI1",97,0)
 .I (IP="")!(PORT="") D  Q
"RTN","XULMUI1",98,0)
 ..S RETURN=-1
"RTN","XULMUI1",99,0)
 ..W !,"Unable to execute the KILL RPC!"
"RTN","XULMUI1",100,0)
 ..W !,"The XULM LOCK MANAGER PARAMETERS file is missing the IP address/port"
"RTN","XULMUI1",101,0)
 ..D PAUSE^XULMU("for "_XULMNODE_".")
"RTN","XULMUI1",102,0)
 .S RETURN=$$KILLRPC^XULM(XUPARMS("NODES",XULMNODE,"IP ADDRESS"),XUPARMS("NODES",XULMNODE,"PORT"),XUPARMS("LOGIN"),PID,.ERROR)
"RTN","XULMUI1",103,0)
 ;
"RTN","XULMUI1",104,0)
 S VALMBCK="Q"
"RTN","XULMUI1",105,0)
 I RETURN>0 D
"RTN","XULMUI1",106,0)
 .;clean task from TaskMan
"RTN","XULMUI1",107,0)
 .K:@LOCKS@(XULMLOCK,XULMNODE,"TASK") ^%ZTSCH("TASK",@LOCKS@(XULMLOCK,XULMNODE,"TASK"))
"RTN","XULMUI1",108,0)
 .;
"RTN","XULMUI1",109,0)
 .;log the process termination event
"RTN","XULMUI1",110,0)
 .N LOG,DATA
"RTN","XULMUI1",111,0)
 .S DATA(.01)=$$NOW^XLFDT,DATA(.02)=$G(DUZ)
"RTN","XULMUI1",112,0)
 .S LOG=$$ADD^XULMU(8993.2,,.DATA) I LOG M ^XLM(8993.2,LOG,1)=@VALMAR
"RTN","XULMUI1",113,0)
 .;
"RTN","XULMUI1",114,0)
 .;check that the lock really is gone
"RTN","XULMUI1",115,0)
 .L +@XULMLOCK:2
"RTN","XULMUI1",116,0)
 .I $T D
"RTN","XULMUI1",117,0)
 ..L -@XULMLOCK
"RTN","XULMUI1",118,0)
 ..I $$ASKYESNO^XULMU("Process TERMINATED! Do you want to quit Lock Manager","YES") S XULMEXIT=1
"RTN","XULMUI1",119,0)
 .E  D
"RTN","XULMUI1",120,0)
 ..S XUPARMS("KILL")=0
"RTN","XULMUI1",121,0)
 ..W !,"The RPC to terminate the process was executed."
"RTN","XULMUI1",122,0)
 ..D PAUSE^XULMU("However, it appears there may still be a lock blocking access.")
"RTN","XULMUI1",123,0)
 .; 
"RTN","XULMUI1",124,0)
 I RETURN=0 D
"RTN","XULMUI1",125,0)
 .L +@XULMLOCK:0
"RTN","XULMUI1",126,0)
 .I $T D
"RTN","XULMUI1",127,0)
 ..L -@XULMLOCK
"RTN","XULMUI1",128,0)
 ..I $$ASKYESNO^XULMU("The lock was released! Do you want to quit Lock Manager","YES") S XULMEXIT=1
"RTN","XULMUI1",129,0)
 .E  D
"RTN","XULMUI1",130,0)
 ..N CNT
"RTN","XULMUI1",131,0)
 ..S VALMBCK="R"
"RTN","XULMUI1",132,0)
 ..S XUPARMS("KILL")=0
"RTN","XULMUI1",133,0)
 ..I $D(ERROR) W !,ERROR,!,$G(ERROR(1))
"RTN","XULMUI1",134,0)
 ..W !,"The RPC to terminate the process was called, but its return value"
"RTN","XULMUI1",135,0)
 ..D PAUSE^XULMU("indicates failure!")
"RTN","XULMUI1",136,0)
 Q
"RTN","XULMUI1",137,0)
 ;
"RTN","XULMUI1",138,0)
 ;
"RTN","XULMUI1",139,0)
HELP ; -- help code
"RTN","XULMUI1",140,0)
 N COUNT,LINE
"RTN","XULMUI1",141,0)
 D CLEAR^VALM1
"RTN","XULMUI1",142,0)
 F COUNT=1:1:24 S LINE=$P($T(HELPTEXT+COUNT),";;",2) Q:LINE="END"  W !,LINE
"RTN","XULMUI1",143,0)
 D PAUSE^XULMU
"RTN","XULMUI1",144,0)
 D RE^VALM4
"RTN","XULMUI1",145,0)
 Q
"RTN","XULMUI1",146,0)
 ;
"RTN","XULMUI1",147,0)
EXIT ; -- exit code
"RTN","XULMUI1",148,0)
 S VALMBCK="R"
"RTN","XULMUI1",149,0)
 Q
"RTN","XULMUI1",150,0)
ADD(LINE) ;
"RTN","XULMUI1",151,0)
 S @VALMAR@($$I,0)=LINE
"RTN","XULMUI1",152,0)
 S:$G(XUENTRY) @VALMAR@("IDX1",VALMCNT)=XUENTRY
"RTN","XULMUI1",153,0)
 Q
"RTN","XULMUI1",154,0)
 ;
"RTN","XULMUI1",155,0)
LJ(STRING,LEN) ;
"RTN","XULMUI1",156,0)
 Q $$LJ^XLFSTR(STRING,LEN)
"RTN","XULMUI1",157,0)
RJ(STRING,LEN) ;
"RTN","XULMUI1",158,0)
 Q $$RJ^XLFSTR(STRING,LEN)
"RTN","XULMUI1",159,0)
 ;
"RTN","XULMUI1",160,0)
I() ;
"RTN","XULMUI1",161,0)
 S VALMCNT=VALMCNT+1
"RTN","XULMUI1",162,0)
 Q VALMCNT
"RTN","XULMUI1",163,0)
 ;
"RTN","XULMUI1",164,0)
 ;
"RTN","XULMUI1",165,0)
HELPTEXT ;
"RTN","XULMUI1",166,0)
 ;; ** USE EXTREME CAUTION **
"RTN","XULMUI1",167,0)
 ;;
"RTN","XULMUI1",168,0)
 ;;You can terminate a process and release all of its locks by selecting the
"RTN","XULMUI1",169,0)
 ;;KILL action.  Do NOT do so unless you are sure that the process is not for
"RTN","XULMUI1",170,0)
 ;;an active user.
"RTN","XULMUI1",171,0)
 ;;
"RTN","XULMUI1",172,0)
 ;;Additionally, you need to exercise extreme caution if terminating a
"RTN","XULMUI1",173,0)
 ;;system process, such as MailMan or TaskManager, because doing so could
"RTN","XULMUI1",174,0)
 ;;impact multiple users. 
"RTN","XULMUI1",175,0)
 ;;
"RTN","XULMUI1",176,0)
 ;;If you do terminate the process, an entry will be made in the 
"RTN","XULMUI1",177,0)
 ;;XULM LOCK MANAGER LOG file.
"RTN","XULMUI1",178,0)
 ;;
"RTN","XULMUI1",179,0)
HLPEND ;;END
"VER")
8.0^22.2
"^DD",8993,8993,0)
FIELD^^1.03^7
"^DD",8993,8993,0,"DDA")
N
"^DD",8993,8993,0,"DT")
3120926
"^DD",8993,8993,0,"ID","WRITE")
W:$P($G(^(1)),"^",2) "^" W $E(^(0),1,245)
"^DD",8993,8993,0,"IX","B",8993,.01)

"^DD",8993,8993,0,"IX","D",8993.03,.01)

"^DD",8993,8993,0,"NM","XULM LOCK DICTIONARY")

"^DD",8993,8993,0,"VRPK")
XU
"^DD",8993,8993,.01,0)
LOCK TEMPLATE^RFXO^^0;E1,245^K:'$$SNTXLOCK^XULM1(.X) X I $E($G(X),1,2)["^" S X=$P(X,"^",2,999)
"^DD",8993,8993,.01,1,0)
^.1^^-1
"^DD",8993,8993,.01,1,1,0)
8993^B
"^DD",8993,8993,.01,1,1,1)
S ^XLM(8993,"B",$E(X,1,30),DA)=""
"^DD",8993,8993,.01,1,1,2)
K ^XLM(8993,"B",$E(X,1,30),DA)
"^DD",8993,8993,.01,2)
S Y(0)=Y S:$G(DA) Y=$S($P($G(^XLM(8993,DA,1)),"^",2):"^",1:"")_Y
"^DD",8993,8993,.01,2.1)
S:$G(DA) Y=$S($P($G(^XLM(8993,DA,1)),"^",2):"^",1:"")_Y
"^DD",8993,8993,.01,3)
Answer must be 1-245 characters in length with valid syntax. For global locks, enter one space before the '^'.
"^DD",8993,8993,.01,21,0)
^^24^24^3120827^^^^
"^DD",8993,8993,.01,21,1,0)
Enter the locked data structure as set in the LOCK command, except:
"^DD",8993,8993,.01,21,2,0)
  1) If the lock is on a global data structure, enter a space before
"^DD",8993,8993,.01,21,3,0)
     the '^'.
"^DD",8993,8993,.01,21,4,0)
  2) If an array subscript is a variable, enter a legal variable name.
"^DD",8993,8993,.01,21,5,0)
   
"^DD",8993,8993,.01,21,6,0)
In examples 2-4, note that a space is necessary before the '^' of the
"^DD",8993,8993,.01,21,7,0)
global reference.
"^DD",8993,8993,.01,21,8,0)
   
"^DD",8993,8993,.01,21,9,0)
Example 1:
"^DD",8993,8993,.01,21,10,0)
   If the lock is on the local variable 'DPT', enter 'DPT'.
"^DD",8993,8993,.01,21,11,0)
   
"^DD",8993,8993,.01,21,12,0)
Example 2:
"^DD",8993,8993,.01,21,13,0)
   If the lock is on the entire ^DPT global, enter ' ^DPT'.  
"^DD",8993,8993,.01,21,14,0)
   
"^DD",8993,8993,.01,21,15,0)
Example 3:
"^DD",8993,8993,.01,21,16,0)
   If the lock is on the 0 node of a record in the patient file then the
"^DD",8993,8993,.01,21,17,0)
   record number must be represented by a variable.  Select a variable,
"^DD",8993,8993,.01,21,18,0)
   lets say DFN. So if the lock is on '^DPT(<IEN of patient record>,0)',
"^DD",8993,8993,.01,21,19,0)
   the lock template may be entered as ' ^DPT(DFN,0)'.
"^DD",8993,8993,.01,21,20,0)
    
"^DD",8993,8993,.01,21,21,0)
Example 4:
"^DD",8993,8993,.01,21,22,0)
    The same as example 3, except that the ""POV"" node is locked.  Enter 
"^DD",8993,8993,.01,21,23,0)
    the lock template as ' ^DPT(DFN,"POV")'.
"^DD",8993,8993,.01,21,24,0)

"^DD",8993,8993,.01,"DT")
3120829
"^DD",8993,8993,1.01,0)
PACKAGE^P9.4'^DIC(9.4,^1;1^Q
"^DD",8993,8993,1.01,3)
Select the package that owns this entry in the lock dictionary.
"^DD",8993,8993,1.01,21,0)
^^4^4^3120718^^
"^DD",8993,8993,1.01,21,1,0)
This is the package for which the lock is set.  Locks usually are used
"^DD",8993,8993,1.01,21,2,0)
to control access to a package's data.
"^DD",8993,8993,1.01,21,3,0)

"^DD",8993,8993,1.01,21,4,0)

"^DD",8993,8993,1.01,"DT")
3120718
"^DD",8993,8993,1.02,0)
GLOBAL LOCK?^RS^0:NO;1:YES;^1;2^Q
"^DD",8993,8993,1.02,3)
Is this lock on a global?
"^DD",8993,8993,1.02,21,0)
^^5^5^3120829^^
"^DD",8993,8993,1.02,21,1,0)
Both local and global variables maybe locked.  This field explicitly
"^DD",8993,8993,1.02,21,2,0)
identifies which type of variable the lock applies to. Global
"^DD",8993,8993,1.02,21,3,0)
variables start with '^'.
"^DD",8993,8993,1.02,21,4,0)

"^DD",8993,8993,1.02,21,5,0)

"^DD",8993,8993,1.02,"DT")
3120829
"^DD",8993,8993,1.03,0)
PARTIAL MATCH ALLOWED?^S^0:NO;1:YES;^1;3^Q
"^DD",8993,8993,1.03,3)
Should a lock that has additional subscripts be counted as a match to this template?
"^DD",8993,8993,1.03,21,0)
^^8^8^3120829^^
"^DD",8993,8993,1.03,21,1,0)
If this field is set to YES, then a lock that has additional subscripts
"^DD",8993,8993,1.03,21,2,0)
will be considered a match to this template as long as the first parts
"^DD",8993,8993,1.03,21,3,0)
match.  A partial match will be allowed only if no full match exists.
"^DD",8993,8993,1.03,21,4,0)

"^DD",8993,8993,1.03,21,5,0)
For example, for the input template ^DPT(DFN), the lock on ^DPT(<dfn>,0)
"^DD",8993,8993,1.03,21,6,0)
will be considered a match if this field is set to YES.
"^DD",8993,8993,1.03,21,7,0)

"^DD",8993,8993,1.03,21,8,0)

"^DD",8993,8993,1.03,"DT")
3120829
"^DD",8993,8993,2,0)
ARRAY SUBSCRIPTS^8993.02I^^2;0
"^DD",8993,8993,2,21,0)
^^5^5^3120509^
"^DD",8993,8993,2,21,1,0)
This multiple has an entry for each subscript in the locked data structure.
"^DD",8993,8993,2,21,2,0)

"^DD",8993,8993,2,21,3,0)
For example, a lock on ^DPT(<ien>,0) has two subscripts so should have
"^DD",8993,8993,2,21,4,0)
two entries in this multiple.
"^DD",8993,8993,2,21,5,0)

"^DD",8993,8993,2,23,0)
^^1^1^3120509^
"^DD",8993,8993,2,23,1,0)

"^DD",8993,8993,2,"DT")
3120509
"^DD",8993,8993,3,0)
COMPUTABLE FILE REFERENCES^8993.03P^^3;0
"^DD",8993,8993,3,21,0)
^^3^3^3120713^
"^DD",8993,8993,3,21,1,0)
This multiple provides information about the VistA files referenced by the
"^DD",8993,8993,3,21,2,0)
locked data structure.
"^DD",8993,8993,3,21,3,0)

"^DD",8993,8993,4,0)
USAGE^8993.04^^4;0
"^DD",8993,8993,4,21,0)
^^2^2^3120713^
"^DD",8993,8993,4,21,1,0)
This field should describe how the lock is used and what its purpose is.
"^DD",8993,8993,4,21,2,0)

"^DD",8993,8993.02,0)
ARRAY SUBSCRIPTS SUB-FIELD^^3^4
"^DD",8993,8993.02,0,"DT")
3120515
"^DD",8993,8993.02,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",8993,8993.02,0,"IX","B",8993.02,.01)

"^DD",8993,8993.02,0,"NM","ARRAY SUBSCRIPTS")

"^DD",8993,8993.02,0,"UP")
8993
"^DD",8993,8993.02,.01,0)
SUBSCRIPT ORDER NUMBER^MMMNJ2,0^^0;1^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1.N) X
"^DD",8993,8993.02,.01,1,0)
^.1
"^DD",8993,8993.02,.01,1,1,0)
8993.02^B
"^DD",8993,8993.02,.01,1,1,1)
S ^XLM(8993,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",8993,8993.02,.01,1,1,2)
K ^XLM(8993,DA(1),2,"B",$E(X,1,30),DA)
"^DD",8993,8993.02,.01,3)
Enter an integer indicating the order of the subscript within the locked data structure.  The first subscript is 1, then 2, etc.
"^DD",8993,8993.02,.01,21,0)
^^6^6^3120509^
"^DD",8993,8993.02,.01,21,1,0)
This field is the order number of the subscript in the locked data structure.
"^DD",8993,8993.02,.01,21,2,0)
For example,  if the lock is on ^DPT(<DFN>,0), the '0' should have 2 as its
"^DD",8993,8993.02,.01,21,3,0)
order number.
"^DD",8993,8993.02,.01,21,4,0)

"^DD",8993,8993.02,.01,21,5,0)

"^DD",8993,8993.02,.01,21,6,0)

"^DD",8993,8993.02,.01,"DT")
3120510
"^DD",8993,8993.02,.02,0)
SUBSCRIPT^RF^^0;2^K:$L(X)>240!($L(X)<1) X
"^DD",8993,8993.02,.02,3)
Enter the subscript exactly as it appears in the lock template.
"^DD",8993,8993.02,.02,21,0)
^^4^4^3120509^
"^DD",8993,8993.02,.02,21,1,0)
This is the text parsed out of the LOCK TEMPLATE.  For example,
"^DD",8993,8993.02,.02,21,2,0)
if the lock template is ^DPT(DFN,0), the first subscript is DFN and the second
"^DD",8993,8993.02,.02,21,3,0)
subscript is 0.
"^DD",8993,8993.02,.02,21,4,0)

"^DD",8993,8993.02,.02,"DT")
3120509
"^DD",8993,8993.02,.04,0)
TYPE^RS^L:LITERAL;V:VARIABLE;^0;4^Q
"^DD",8993,8993.02,.04,3)
What type of subscript is this?
"^DD",8993,8993.02,.04,21,0)
^^22^22^3120716^
"^DD",8993,8993.02,.04,21,1,0)
Subscripts in the LOCK TEMPLATE can either be a literal or a variable.
"^DD",8993,8993.02,.04,21,2,0)
A literal subscript is one whose value in the lock table will match
"^DD",8993,8993.02,.04,21,3,0)
the value in this field exactly.  A variable subscript is one whose
"^DD",8993,8993.02,.04,21,4,0)
value in the table need not match. 
"^DD",8993,8993.02,.04,21,5,0)

"^DD",8993,8993.02,.04,21,6,0)
There are several fields within this file that provide for executable MUMPS
"^DD",8993,8993.02,.04,21,7,0)
code to be specified.  At the point the MUMPS code is executed, for each
"^DD",8993,8993.02,.04,21,8,0)
subscript defined as being type VARIABLE, the variable of that same name will
"^DD",8993,8993.02,.04,21,9,0)
be defined and be assigned the value that appears in the lock table for the
"^DD",8993,8993.02,.04,21,10,0)
subscript of the same position.
"^DD",8993,8993.02,.04,21,11,0)

"^DD",8993,8993.02,.04,21,12,0)
For example, given the lock template ^DPT(DFN,0), with DFN defined as a
"^DD",8993,8993.02,.04,21,13,0)
variable subscript and 0 as a literal subscript.
"^DD",8993,8993.02,.04,21,14,0)

"^DD",8993,8993.02,.04,21,15,0)
An entry in the lock table of '^DPT(123,0)' might be considered a match to
"^DD",8993,8993.02,.04,21,16,0)
this lock template.  For any of the M code specified in the MUMPS fields,
"^DD",8993,8993.02,.04,21,17,0)
the variable DFN=123 would be defined at the point the M code is executed.
"^DD",8993,8993.02,.04,21,18,0)
Assuming that the variable DFN was defined to the the IEN of a record in the
"^DD",8993,8993.02,.04,21,19,0)
patient file, then the variable could be used to supply information about the
"^DD",8993,8993.02,.04,21,20,0)
patient record that the lock was on. 
"^DD",8993,8993.02,.04,21,21,0)
 
"^DD",8993,8993.02,.04,21,22,0)

"^DD",8993,8993.02,.04,"DT")
3120716
"^DD",8993,8993.02,1,0)
VARIABLE CHECK LOGIC^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",8993,8993.02,1,3)
Enter standard MUMPS code that will check whether the value of the subscript is consistent with the lock template or should be screened out. Matches should return Y=1, non-matches should return Y=0.
"^DD",8993,8993.02,1,9)
@
"^DD",8993,8993.02,1,21,0)
^^26^26^3120829^^^^
"^DD",8993,8993.02,1,21,1,0)
 
"^DD",8993,8993.02,1,21,2,0)
This field applies only to subscripts that are represented as a variable
"^DD",8993,8993.02,1,21,3,0)
in the lock template, and is optional even for variables.
"^DD",8993,8993.02,1,21,4,0)

"^DD",8993,8993.02,1,21,5,0)
If the subscript is represented by a variable, this field may
"^DD",8993,8993.02,1,21,6,0)
contain MUMPS code that checks that the value is consistent with the
"^DD",8993,8993.02,1,21,7,0)
use of the lock.
"^DD",8993,8993.02,1,21,8,0)

"^DD",8993,8993.02,1,21,9,0)
For example, suppose the lock template is ^DPT(DFN,0).  Does the lock on
"^DD",8993,8993.02,1,21,10,0)
^DPT("sally",0) match the lock template?  Yes, but that is not the
"^DD",8993,8993.02,1,21,11,0)
intention.  In order to screen out erroneous matches this field may be
"^DD",8993,8993.02,1,21,12,0)
used to specify a check.
"^DD",8993,8993.02,1,21,13,0)

"^DD",8993,8993.02,1,21,14,0)
All variables that appear in the LOCK TEMPLATE will be defined at the
"^DD",8993,8993.02,1,21,15,0)
time the logic is executed with the values parsed from the lock table. 
"^DD",8993,8993.02,1,21,16,0)
It should return the value of Y=1 if the variable value is consistent
"^DD",8993,8993.02,1,21,17,0)
with the lock template, or Y=0 if not.
"^DD",8993,8993.02,1,21,18,0)

"^DD",8993,8993.02,1,21,19,0)
For example:    S Y=$S((DFN)&&$D(^DPT(DFN,0)):1,1:0)
"^DD",8993,8993.02,1,21,20,0)

"^DD",8993,8993.02,1,21,21,0)
If the lock template contains more than one variable, it is only
"^DD",8993,8993.02,1,21,22,0)
necessary to provide the check logic once.  For example, if the
"^DD",8993,8993.02,1,21,23,0)
lock is on ^DPT(DFN,"INSURANCE",POLICY), you could associate the full
"^DD",8993,8993.02,1,21,24,0)
check logic with either DFN or POLICY.  Both variables will be defined
"^DD",8993,8993.02,1,21,25,0)
at the time the check logic is called.
"^DD",8993,8993.02,1,21,26,0)

"^DD",8993,8993.02,1,"DT")
3120829
"^DD",8993,8993.03,0)
COMPUTABLE FILE REFERENCES SUB-FIELD^^2^3
"^DD",8993,8993.03,0,"DT")
3120515
"^DD",8993,8993.03,0,"IX","B",8993.03,.01)

"^DD",8993,8993.03,0,"NM","COMPUTABLE FILE REFERENCES")

"^DD",8993,8993.03,0,"UP")
8993
"^DD",8993,8993.03,.01,0)
FILE^MP1'^DIC(^0;1^Q
"^DD",8993,8993.03,.01,1,0)
^.1
"^DD",8993,8993.03,.01,1,1,0)
8993.03^B
"^DD",8993,8993.03,.01,1,1,1)
S ^XLM(8993,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",8993,8993.03,.01,1,1,2)
K ^XLM(8993,DA(1),3,"B",$E(X,1,30),DA)
"^DD",8993,8993.03,.01,1,2,0)
8993^D
"^DD",8993,8993.03,.01,1,2,1)
S ^XLM(8993,"D",$E(X,1,30),DA(1),DA)=""
"^DD",8993,8993.03,.01,1,2,2)
K ^XLM(8993,"D",$E(X,1,30),DA(1),DA)
"^DD",8993,8993.03,.01,1,2,"%D",0)
^^5^5^3120718^
"^DD",8993,8993.03,.01,1,2,"%D",1,0)
This allows lock templates to be found that refer to a particular file. The
"^DD",8993,8993.03,.01,1,2,"%D",2,0)
lock may refer to the file either directly or indirectly via the navigation
"^DD",8993,8993.03,.01,1,2,"%D",3,0)
logic.
"^DD",8993,8993.03,.01,1,2,"%D",4,0)

"^DD",8993,8993.03,.01,1,2,"%D",5,0)

"^DD",8993,8993.03,.01,1,2,"DT")
3120718
"^DD",8993,8993.03,.01,3)
Enter the file for which a reference may be computed based on the lock.
"^DD",8993,8993.03,.01,21,0)
^^6^6^3120713^
"^DD",8993,8993.03,.01,21,1,0)
This field identifies a VistA file referenced directly or indirectly by
"^DD",8993,8993.03,.01,21,2,0)
the locked data structure. Most locks of interest to users of the 
"^DD",8993,8993.03,.01,21,3,0)
Lock Manager will relate in some way to a specific patient, so most
"^DD",8993,8993.03,.01,21,4,0)
entries in the lock dictionary should contain a reference to the PATIENT
"^DD",8993,8993.03,.01,21,5,0)
file (#2)
"^DD",8993,8993.03,.01,21,6,0)

"^DD",8993,8993.03,.01,"DT")
3120718
"^DD",8993,8993.03,1,0)
FILE REFERENCE LOGIC^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",8993,8993.03,1,3)
Enter Standard MUMPS code that returns record identifiers for the record that is locked. The variables in the LOCK TEMPLATE may be used within the code.
"^DD",8993,8993.03,1,9)
@
"^DD",8993,8993.03,1,21,0)
^^55^55^3120829^^^^
"^DD",8993,8993.03,1,21,1,0)
This field contains MUMPS code that references the file.  At the time
"^DD",8993,8993.03,1,21,2,0)
this code is executed, all the variables defined in the lock template
"^DD",8993,8993.03,1,21,3,0)
will be defined with the values found in the actual lock.
"^DD",8993,8993.03,1,21,4,0)

"^DD",8993,8993.03,1,21,5,0)
The MUMPS code should return the ien of the matching record and
"^DD",8993,8993.03,1,21,6,0)
a list of identifiers that can be displayed to the user.  The
"^DD",8993,8993.03,1,21,7,0)
identifiers will be displayed to the user.
"^DD",8993,8993.03,1,21,8,0)

"^DD",8993,8993.03,1,21,9,0)
The MUMPS code should NEW all variables it uses, other than the
"^DD",8993,8993.03,1,21,10,0)
variables defined in the lock template and the variable ID.
"^DD",8993,8993.03,1,21,11,0)

"^DD",8993,8993.03,1,21,12,0)
The variable ID should be returned with the the ien and a list of
"^DD",8993,8993.03,1,21,13,0)
identifiers that can be displayed to the user.  The format should be:
"^DD",8993,8993.03,1,21,14,0)

"^DD",8993,8993.03,1,21,15,0)
ID(0) = <a count of the number of identfiers returned>
"^DD",8993,8993.03,1,21,16,0)
ID("IEN")= If the record is not in a subfile, then:
"^DD",8993,8993.03,1,21,17,0)
 
"^DD",8993,8993.03,1,21,18,0)
              <IEN of the file record that the lock refers to>
"^DD",8993,8993.03,1,21,19,0)
 
"^DD",8993,8993.03,1,21,20,0)
           If the record is in a subfile, then:
"^DD",8993,8993.03,1,21,21,0)
             <(IEN of top-most file record)^
"^DD",8993,8993.03,1,21,22,0)
              (IEN of record in top-most sub-file)^etc.>
"^DD",8993,8993.03,1,21,23,0)
 
"^DD",8993,8993.03,1,21,24,0)
ID(1) = <label for the first idenfier>:<value>
"^DD",8993,8993.03,1,21,25,0)
ID(2) = <label for the second idenfier>:<value>
"^DD",8993,8993.03,1,21,26,0)
...  etc.
"^DD",8993,8993.03,1,21,27,0)

"^DD",8993,8993.03,1,21,28,0)

"^DD",8993,8993.03,1,21,29,0)
*** NOTE *** For computable references to the PATIENT file,
"^DD",8993,8993.03,1,21,30,0)
applications should call the API PATIENT^XULMU(<DFN>). This will provide
"^DD",8993,8993.03,1,21,31,0)
a uniform set of identifiers for the patient.  
"^DD",8993,8993.03,1,21,32,0)

"^DD",8993,8993.03,1,21,33,0)

"^DD",8993,8993.03,1,21,34,0)
Example: Supposing the lock is on a record of a subfile of the PATIENT
"^DD",8993,8993.03,1,21,35,0)
file containing insurance policies owned by the user, and 
"^DD",8993,8993.03,1,21,36,0)
the lock template is ^DPF(DFN,"INS",IEN,0)
"^DD",8993,8993.03,1,21,37,0)

"^DD",8993,8993.03,1,21,38,0)
The FILE REFERENCES LOGIC may use the variables DFN and IEN, which will
"^DD",8993,8993.03,1,21,39,0)
be defined at the time the code is executed, and their values will be
"^DD",8993,8993.03,1,21,40,0)
parsed from the actual lock as found in the lock table.
"^DD",8993,8993.03,1,21,41,0)

"^DD",8993,8993.03,1,21,42,0)
The returned value of ID might look like this:
"^DD",8993,8993.03,1,21,43,0)

"^DD",8993,8993.03,1,21,44,0)
  ID(0)=4
"^DD",8993,8993.03,1,21,45,0)
  ID("IEN")="999483^4"  <-- where 999483=DFN, 4 is the IEN in the sub-file.
"^DD",8993,8993.03,1,21,46,0)
  ID(1)="Patient Name:SMITH,JOHN"
"^DD",8993,8993.03,1,21,47,0)
  ID(2)="Patient DOB:JULY 1,1995"
"^DD",8993,8993.03,1,21,48,0)
  ID(3)="Policy #: 1345E5"
"^DD",8993,8993.03,1,21,49,0)
  ID(4)="Company: AETNA"
"^DD",8993,8993.03,1,21,50,0)

"^DD",8993,8993.03,1,21,51,0)
Note that the print template actually references two files, the PATIENT
"^DD",8993,8993.03,1,21,52,0)
file and a subfile.  It is the application's choice as to whether or not
"^DD",8993,8993.03,1,21,53,0)
to return information via two separate entries for the FILE REFERENCE LOGIC
"^DD",8993,8993.03,1,21,54,0)
field or to combine it in one as in the above example.
"^DD",8993,8993.03,1,21,55,0)

"^DD",8993,8993.03,1,23,0)
^^1^1^3120510^
"^DD",8993,8993.03,1,23,1,0)

"^DD",8993,8993.03,1,"DT")
3120829
"^DD",8993,8993.03,2,0)
DESCRIPTION^8993.32^^2;0
"^DD",8993,8993.03,2,21,0)
^^4^4^3120713^
"^DD",8993,8993.03,2,21,1,0)
The description should consist of a list of the identifiers returned from
"^DD",8993,8993.03,2,21,2,0)
the referenced file and optionally a description of the relationship
"^DD",8993,8993.03,2,21,3,0)
between the lock and this file.
"^DD",8993,8993.03,2,21,4,0)

"^DD",8993,8993.04,0)
USAGE SUB-FIELD^^.01^1
"^DD",8993,8993.04,0,"DT")
3120515
"^DD",8993,8993.04,0,"NM","USAGE")

"^DD",8993,8993.04,0,"UP")
8993
"^DD",8993,8993.04,.01,0)
USAGE^Wx^^0;1
"^DD",8993,8993.04,.01,.1)
What is the purpose of this lock?
"^DD",8993,8993.04,.01,3)
Enter a brief description of what file the lock is on, it is used and its purpose. Limit each line to 75 characters.
"^DD",8993,8993.04,.01,"DT")
3120713
"^DD",8993,8993.32,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",8993,8993.32,0,"DT")
3120515
"^DD",8993,8993.32,0,"NM","DESCRIPTION")

"^DD",8993,8993.32,0,"UP")
8993.03
"^DD",8993,8993.32,.01,0)
DESCRIPTION^Wx^^0;1
"^DD",8993,8993.32,.01,3)
What identifiers are returned?
"^DD",8993,8993.32,.01,21,0)
^^4^4^3120713^^
"^DD",8993,8993.32,.01,21,1,0)
This field should be used to document the information returned from the
"^DD",8993,8993.32,.01,21,2,0)
file by the FILE REFERENCE LOGIC.
"^DD",8993,8993.32,.01,21,3,0)

"^DD",8993,8993.32,.01,21,4,0)

"^DD",8993,8993.32,.01,23,0)
^^1^1^3120515^
"^DD",8993,8993.32,.01,23,1,0)

"^DD",8993,8993.32,.01,"DT")
3120713
"^DD",8993.1,8993.1,0)
FIELD^^5^10
"^DD",8993.1,8993.1,0,"DDA")
N
"^DD",8993.1,8993.1,0,"DT")
3121024
"^DD",8993.1,8993.1,0,"IX","B",8993.1,.01)

"^DD",8993.1,8993.1,0,"IX","C",8993.15,.01)

"^DD",8993.1,8993.1,0,"NM","XULM LOCK MANAGER PARAMETERS")

"^DD",8993.1,8993.1,0,"VRPK")
XU
"^DD",8993.1,8993.1,.01,0)
SITE NAME^RP4'X^DIC(4,^0;1^S:+$$SITE^VASITE X=+$$SITE^VASITE
"^DD",8993.1,8993.1,.01,1,0)
^.1
"^DD",8993.1,8993.1,.01,1,1,0)
8993.1^B
"^DD",8993.1,8993.1,.01,1,1,1)
S ^XLM(8993.1,"B",$E(X,1,30),DA)=""
"^DD",8993.1,8993.1,.01,1,1,2)
K ^XLM(8993.1,"B",$E(X,1,30),DA)
"^DD",8993.1,8993.1,.01,3)
Enter the institution name of your site.
"^DD",8993.1,8993.1,.01,21,0)
^^2^2^3120718^
"^DD",8993.1,8993.1,.01,21,1,0)
This identifies the site for which the parameters in this file apply to.
"^DD",8993.1,8993.1,.01,21,2,0)

"^DD",8993.1,8993.1,.01,"DT")
3120829
"^DD",8993.1,8993.1,1,0)
APPLICATION STATUS^S^e:ENABLED;d:DISABLED;^0;2^Q
"^DD",8993.1,8993.1,1,3)
Enter the application status.
"^DD",8993.1,8993.1,1,21,0)
^^1^1^3080528^
"^DD",8993.1,8993.1,1,21,1,0)
This field controls whether the application can be used or not.
"^DD",8993.1,8993.1,1,"DT")
3120718
"^DD",8993.1,8993.1,3,0)
NODES^8993.11^^3;0
"^DD",8993.1,8993.1,3,21,0)
^.001^3^3^3140701^^^
"^DD",8993.1,8993.1,3,21,1,0)
This is the list of nodes that make up the system.  For example,
"^DD",8993.1,8993.1,3,21,2,0)
if this is a system that runs on two nodes, there should be
"^DD",8993.1,8993.1,3,21,3,0)
two entries in this multiple.
"^DD",8993.1,8993.1,4,0)
PARAM FILE LAST EDITED^D^^0;4^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",8993.1,8993.1,4,3)
The date the parameter file was last edited.
"^DD",8993.1,8993.1,4,4)
D HELP^AYILOCKH
"^DD",8993.1,8993.1,4,"DT")
3120313
"^DD",8993.1,8993.1,4.5,0)
LAST EDITED BY^P200'^VA(200,^0;7^Q
"^DD",8993.1,8993.1,4.5,3)
The name of the person who last edited the file.
"^DD",8993.1,8993.1,4.5,"DT")
3120313
"^DD",8993.1,8993.1,5,0)
SYSTEM LOCKS^8993.15I^^2;0
"^DD",8993.1,8993.1,5,21,0)
^^4^4^3120625^
"^DD",8993.1,8993.1,5,21,1,0)
This multiple contains system locks that should generally be screened from
"^DD",8993.1,8993.1,5,21,2,0)
view.  System locks include those for Kernel, MailMan, Cache, HL7, VDEF,
"^DD",8993.1,8993.1,5,21,3,0)
and other infrastructure type applications.  
"^DD",8993.1,8993.1,5,21,4,0)

"^DD",8993.1,8993.1,5,"DT")
3120613
"^DD",8993.1,8993.1,6,0)
NETWORK LATENCY DELAY^NJ2,0^^0;6^K:+X'=X!(X>15)!(X<0)!(X?.E1"."1N.N) X
"^DD",8993.1,8993.1,6,3)
Type a number between 0 and 15.  This is the number of seconds to wait to allow all nodes to report data back to the program which requested it.
"^DD",8993.1,8993.1,6,21,0)
^^3^3^3110917^
"^DD",8993.1,8993.1,6,21,1,0)
Some networks are slower than others and consequently some data is sent 
"^DD",8993.1,8993.1,6,21,2,0)
back slower than other nodes.  Because of this, some lock reports may not 
"^DD",8993.1,8993.1,6,21,3,0)
arrive with all others and not be indexed correctly for display.
"^DD",8993.1,8993.1,6,"DT")
3110917
"^DD",8993.1,8993.1,7,0)
USE ABBREVIATED MENU?^S^0:NO;1:YES;^0;8^Q
"^DD",8993.1,8993.1,7,3)
Enter 1 or Y to use an abbreviated menu for lock selection or 0 or N to use the full menu.
"^DD",8993.1,8993.1,7,21,0)
^^2^2^3120403^
"^DD",8993.1,8993.1,7,21,1,0)
This controlls whether the site uses an abbreviated menu of four options 
"^DD",8993.1,8993.1,7,21,2,0)
as opposed to the full menu of twelve options.
"^DD",8993.1,8993.1,7,"DT")
3120403
"^DD",8993.1,8993.1,8,0)
ABBREVIATED MENU DEFAULT #^NJ1,0^^0;9^K:+X'=X!(X>3)!(X<1)!(X?.E1"."1N.N) X
"^DD",8993.1,8993.1,8,3)
Enter the default selection for the abbreviated menu.  If this field is left blank it will default to 3. [Numeric, between 1 and 3].
"^DD",8993.1,8993.1,8,"DT")
3120411
"^DD",8993.1,8993.1,9,0)
FULL MENU DEFAULT #^NJ2,0^^0;10^K:+X'=X!(X>11)!(X<1)!(X?.E1"."1N.N) X
"^DD",8993.1,8993.1,9,3)
Enter the default selection for the abbreviated menu.  If this field is left  blank, it will default to 11. [Numeric, between 1 and 11].
"^DD",8993.1,8993.1,9,"DT")
3120411
"^DD",8993.1,8993.11,0)
NODES SUB-FIELD^^.04^4
"^DD",8993.1,8993.11,0,"DT")
3121024
"^DD",8993.1,8993.11,0,"IX","B",8993.11,.01)

"^DD",8993.1,8993.11,0,"IX","C",8993.11,.04)

"^DD",8993.1,8993.11,0,"NM","NODES")

"^DD",8993.1,8993.11,0,"UP")
8993.1
"^DD",8993.1,8993.11,.01,0)
NODES^MRF^^0;1^K:$L(X)>60!($L(X)<1) X
"^DD",8993.1,8993.11,.01,1,0)
^.1
"^DD",8993.1,8993.11,.01,1,1,0)
8993.11^B
"^DD",8993.1,8993.11,.01,1,1,1)
S ^XLM(8993.1,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",8993.1,8993.11,.01,1,1,2)
K ^XLM(8993.1,DA(1),3,"B",$E(X,1,30),DA)
"^DD",8993.1,8993.11,.01,3)
Enter the name of a node on your system. Answer must be 1-60 characters in length. 
"^DD",8993.1,8993.11,.01,12)
Requires each selected node to use the same volume.
"^DD",8993.1,8993.11,.01,12.1)
S DIC("S")="I $P($P(^(0),""^""),"":"")=$$VOLUME^XULMU"
"^DD",8993.1,8993.11,.01,21,0)
^.001^12^12^3140701^^^^
"^DD",8993.1,8993.11,.01,21,1,0)
This field will identify a node that makes up a part of the system.
"^DD",8993.1,8993.11,.01,21,2,0)

"^DD",8993.1,8993.11,.01,21,3,0)
While logged onto a node, its name can be obtained by entering at the
"^DD",8993.1,8993.11,.01,21,4,0)
MUMPS prompt:  W ##class(%SYS.System).GetInstanceName()
"^DD",8993.1,8993.11,.01,21,5,0)

"^DD",8993.1,8993.11,.01,21,6,0)

"^DD",8993.1,8993.11,.01,21,7,0)
In the following example the node is named ISFKDASVR.
"^DD",8993.1,8993.11,.01,21,8,0)

"^DD",8993.1,8993.11,.01,21,9,0)
NXT>W ##class(%SYS.System).GetInstanceName()
"^DD",8993.1,8993.11,.01,21,10,0)
ISFKDASVR
"^DD",8993.1,8993.11,.01,21,11,0)

"^DD",8993.1,8993.11,.01,21,12,0)

"^DD",8993.1,8993.11,.01,"DT")
3121024
"^DD",8993.1,8993.11,.02,0)
TCP/IP ADDRESS^RF^^0;2^K:$L(X)>40!($L(X)<7) X
"^DD",8993.1,8993.11,.02,3)
Enter the TCP/IP Address of the node in the format nn.nn.nn.nn.
"^DD",8993.1,8993.11,.02,21,0)
^^5^5^3121010^^^
"^DD",8993.1,8993.11,.02,21,1,0)
This is the TCP/IP address of the node.  It will be used to communicate with
"^DD",8993.1,8993.11,.02,21,2,0)
the M-TO-M Broker running on that node.
"^DD",8993.1,8993.11,.02,21,3,0)

"^DD",8993.1,8993.11,.02,21,4,0)

"^DD",8993.1,8993.11,.02,21,5,0)

"^DD",8993.1,8993.11,.02,"DT")
3121010
"^DD",8993.1,8993.11,.03,0)
BROKER PORT^RNJ5,0^^0;3^K:+X'=X!(X>65535)!(X<1)!(X?.E1"."1.N) X
"^DD",8993.1,8993.11,.03,3)
Enter the port number for either the RPC Broker or the M-TO-M Broker running on this node. Either port can be used, but the RPC Broker port is recommended.
"^DD",8993.1,8993.11,.03,21,0)
^^8^8^3121014^^^^
"^DD",8993.1,8993.11,.03,21,1,0)
This is the port number that the RPC Broker or M-TO-M Broker is listening on
"^DD",8993.1,8993.11,.03,21,2,0)
for this node and IP address.  Either port can be used, but hte RPC broker
"^DD",8993.1,8993.11,.03,21,3,0)
port is recommended.
"^DD",8993.1,8993.11,.03,21,4,0)

"^DD",8993.1,8993.11,.03,21,5,0)

"^DD",8993.1,8993.11,.03,21,6,0)

"^DD",8993.1,8993.11,.03,21,7,0)

"^DD",8993.1,8993.11,.03,21,8,0)

"^DD",8993.1,8993.11,.03,"DT")
3121014
"^DD",8993.1,8993.11,.04,0)
SHORT DISPLAY NAME^F^^0;4^K:$L(X)>8!($L(X)<1) X
"^DD",8993.1,8993.11,.04,1,0)
^.1
"^DD",8993.1,8993.11,.04,1,1,0)
8993.11^C
"^DD",8993.1,8993.11,.04,1,1,1)
S ^XLM(8993.1,DA(1),3,"C",$E(X,1,30),DA)=""
"^DD",8993.1,8993.11,.04,1,1,2)
K ^XLM(8993.1,DA(1),3,"C",$E(X,1,30),DA)
"^DD",8993.1,8993.11,.04,1,1,"%D",0)
^^2^2^3120531^
"^DD",8993.1,8993.11,.04,1,1,"%D",1,0)
This is index is used to find link all nodes that make up the production system.
"^DD",8993.1,8993.11,.04,1,1,"%D",2,0)

"^DD",8993.1,8993.11,.04,1,1,"DT")
3120531
"^DD",8993.1,8993.11,.04,3)
If the node's name is over 8 characters, you may enter a shortened name here, to be used when the display is limited to 8 characters. 
"^DD",8993.1,8993.11,.04,21,0)
^^5^5^3121024^
"^DD",8993.1,8993.11,.04,21,1,0)
If the node name is over 8 characters, only the last 8 characters will appear
"^DD",8993.1,8993.11,.04,21,2,0)
at times in the Lock Manager display screens. If that is not acceptable,
"^DD",8993.1,8993.11,.04,21,3,0)
a shortened version may be entered in this field, and it will appear in the
"^DD",8993.1,8993.11,.04,21,4,0)
display when a space is limited to 8 characters.
"^DD",8993.1,8993.11,.04,21,5,0)

"^DD",8993.1,8993.11,.04,"DT")
3121024
"^DD",8993.1,8993.15,0)
SYSTEM LOCKS SUB-FIELD^^.03^3
"^DD",8993.1,8993.15,0,"DT")
3120625
"^DD",8993.1,8993.15,0,"ID",.02)
W "   ",$S($P(^(0),"^",3):"^",1:""),$P(^(0),U,2)
"^DD",8993.1,8993.15,0,"IX","B",8993.15,.01)

"^DD",8993.1,8993.15,0,"NM","SYSTEM LOCKS")

"^DD",8993.1,8993.15,0,"UP")
8993.1
"^DD",8993.1,8993.15,.01,0)
VARIABLE NAME^MRFX^^0;1^K:$L(X)>12!($L(X)<1) X
"^DD",8993.1,8993.15,.01,1,0)
^.1
"^DD",8993.1,8993.15,.01,1,1,0)
8993.15^B
"^DD",8993.1,8993.15,.01,1,1,1)
S ^XLM(8993.1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",8993.1,8993.15,.01,1,1,2)
K ^XLM(8993.1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",8993.1,8993.15,.01,1,2,0)
8993.1^C
"^DD",8993.1,8993.15,.01,1,2,1)
S ^XLM(8993.1,"C",$E(X,1,60),DA(1),DA)=""
"^DD",8993.1,8993.15,.01,1,2,2)
K ^XLM(8993.1,"C",$E(X,1,60),DA(1),DA)
"^DD",8993.1,8993.15,.01,1,2,"%D",0)
^.101^1^1^3120605^^
"^DD",8993.1,8993.15,.01,1,2,"%D",1,0)
Cross-reference used to set up ignored locks in VistA Lock Manager.
"^DD",8993.1,8993.15,.01,1,2,"DT")
3110908
"^DD",8993.1,8993.15,.01,3)
Enter the variable name of the data structure that is locked, 1-12 characters.  Do not include the '^' prefix.  For example, if the lock is on ^TMP($J), enter TMP.
"^DD",8993.1,8993.15,.01,21,0)
^^3^3^3121015^^
"^DD",8993.1,8993.15,.01,21,1,0)
This field contains the variable name of the locked data structure.
"^DD",8993.1,8993.15,.01,21,2,0)

"^DD",8993.1,8993.15,.01,21,3,0)

"^DD",8993.1,8993.15,.01,"DT")
3121015
"^DD",8993.1,8993.15,.02,0)
SYSTEM LOCK^FX^^0;2^K:$L(X)>200!($L(X)<1) X
"^DD",8993.1,8993.15,.02,3)
Enter the locked data structure, fully or partially, up to 240 characters, of an infrastructure-type application that can usually be ignored by users of the Lock Manager. Do not include '^'.
"^DD",8993.1,8993.15,.02,21,0)
^^6^6^3120718^^
"^DD",8993.1,8993.15,.02,21,1,0)
This is a string that matches or partially matches entries in the lock table
"^DD",8993.1,8993.15,.02,21,2,0)
held by infrastructure software such as the Kernel or HL7.  It will be used
"^DD",8993.1,8993.15,.02,21,3,0)
to identify locks held by system-oriented applications as opposed to
"^DD",8993.1,8993.15,.02,21,4,0)
user-oriented applications.  
"^DD",8993.1,8993.15,.02,21,5,0)

"^DD",8993.1,8993.15,.02,21,6,0)

"^DD",8993.1,8993.15,.02,"DT")
3120823
"^DD",8993.1,8993.15,.03,0)
GLOBAL LOCK?^RS^0:NO;1:YES;^0;3^Q
"^DD",8993.1,8993.15,.03,3)
Is this lock on a global?
"^DD",8993.1,8993.15,.03,21,0)
^^4^4^3120625^
"^DD",8993.1,8993.15,.03,21,1,0)
The .01 field is prohibited from containing a '^' in its value, so this
"^DD",8993.1,8993.15,.03,21,2,0)
field is necessary to indicate whether or not the lock is on a global or
"^DD",8993.1,8993.15,.03,21,3,0)
local variable.
"^DD",8993.1,8993.15,.03,21,4,0)

"^DD",8993.1,8993.15,.03,"DT")
3120718
"^DD",8993.2,8993.2,0)
FIELD^^1^3
"^DD",8993.2,8993.2,0,"DDA")
N
"^DD",8993.2,8993.2,0,"DT")
3120618
"^DD",8993.2,8993.2,0,"ID",.02)
S %I=Y,Y=$S('$D(^(0)):"",$D(^VA(200,+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(200,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",8993.2,8993.2,0,"IX","B",8993.2,.01)

"^DD",8993.2,8993.2,0,"NM","XULM LOCK MANAGER LOG")

"^DD",8993.2,8993.2,0,"VRPK")
XU
"^DD",8993.2,8993.2,.01,0)
DATE/TIME PROCESS TERMINATED^RD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",8993.2,8993.2,.01,1,0)
^.1
"^DD",8993.2,8993.2,.01,1,1,0)
8993.2^B
"^DD",8993.2,8993.2,.01,1,1,1)
S ^XLM(8993.2,"B",$E(X,1,30),DA)=""
"^DD",8993.2,8993.2,.01,1,1,2)
K ^XLM(8993.2,"B",$E(X,1,30),DA)
"^DD",8993.2,8993.2,.01,3)
Enter the date and time that the process was killed.
"^DD",8993.2,8993.2,.01,21,0)
^^2^2^3120618^
"^DD",8993.2,8993.2,.01,21,1,0)
This field records the date and time that the process was killed.
"^DD",8993.2,8993.2,.01,21,2,0)

"^DD",8993.2,8993.2,.01,"DT")
3120618
"^DD",8993.2,8993.2,.02,0)
THE TERMINATOR^RP200'^VA(200,^0;2^Q
"^DD",8993.2,8993.2,.02,3)
Who used the Lock Manager to terminate the process?
"^DD",8993.2,8993.2,.02,21,0)
^^2^2^3120618^
"^DD",8993.2,8993.2,.02,21,1,0)
This field is used to record the user who terminated the process and its locks.
"^DD",8993.2,8993.2,.02,21,2,0)

"^DD",8993.2,8993.2,.02,"DT")
3120618
"^DD",8993.2,8993.2,1,0)
PROCESS DESCRIPTION^8993.21^^1;0
"^DD",8993.2,8993.2,1,21,0)
^^3^3^3120713^
"^DD",8993.2,8993.2,1,21,1,0)
This field contains information about the process that was terminated
"^DD",8993.2,8993.2,1,21,2,0)
and the locks that it held.
"^DD",8993.2,8993.2,1,21,3,0)

"^DD",8993.2,8993.21,0)
PROCESS DESCRIPTION SUB-FIELD^^.01^1
"^DD",8993.2,8993.21,0,"DT")
3120618
"^DD",8993.2,8993.21,0,"NM","PROCESS DESCRIPTION")

"^DD",8993.2,8993.21,0,"UP")
8993.2
"^DD",8993.2,8993.21,.01,0)
PROCESS DESCRIPTION^Wx^^0;1
"^DD",8993.2,8993.21,.01,3)
Enter a description of the process that was terminated and the locks that it held.
"^DD",8993.2,8993.21,.01,21,0)
^^3^3^3120618^
"^DD",8993.2,8993.21,.01,21,1,0)
This field will contain the detailed information that was displayed to the
"^DD",8993.2,8993.21,.01,21,2,0)
user prior to termination of the process.
"^DD",8993.2,8993.21,.01,21,3,0)

"^DD",8993.2,8993.21,.01,"DT")
3120618
"^DIC",8993,8993,0)
XULM LOCK DICTIONARY^8993
"^DIC",8993,8993,0,"GL")
^XLM(8993,
"^DIC",8993,8993,"%",0)
^1.005^^0
"^DIC",8993,8993,"%D",0)
^^4^4^3120618^
"^DIC",8993,8993,"%D",1,0)
This file contains descriptions and specifications for locks held
"^DIC",8993,8993,"%D",2,0)
by various applications.  The Lock Manager uses it to provide information
"^DIC",8993,8993,"%D",3,0)
and guidance to the user about locks found in the lock table.
"^DIC",8993,8993,"%D",4,0)

"^DIC",8993,"B","XULM LOCK DICTIONARY",8993)

"^DIC",8993.1,8993.1,0)
XULM LOCK MANAGER PARAMETERS^8993.1
"^DIC",8993.1,8993.1,0,"GL")
^XLM(8993.1,
"^DIC",8993.1,8993.1,"%",0)
^1.005^^0
"^DIC",8993.1,8993.1,"%D",0)
^1.001^5^5^3120625^^^^
"^DIC",8993.1,8993.1,"%D",1,0)
This is the parameter file for the Kernel Lock Manager.  It should contain
"^DIC",8993.1,8993.1,"%D",2,0)
only one entry.
"^DIC",8993.1,8993.1,"%D",3,0)

"^DIC",8993.1,8993.1,"%D",4,0)

"^DIC",8993.1,8993.1,"%D",5,0)

"^DIC",8993.1,"B","XULM LOCK MANAGER PARAMETERS",8993.1)

"^DIC",8993.2,8993.2,0)
XULM LOCK MANAGER LOG^8993.2
"^DIC",8993.2,8993.2,0,"GL")
^XLM(8993.2,
"^DIC",8993.2,8993.2,"%",0)
^1.005^^0
"^DIC",8993.2,8993.2,"%D",0)
^^3^3^3120618^
"^DIC",8993.2,8993.2,"%D",1,0)
This file records each instance of the Kernel Lock Manager being used
"^DIC",8993.2,8993.2,"%D",2,0)
to terminate a process and the locks that the process held.
"^DIC",8993.2,8993.2,"%D",3,0)

"^DIC",8993.2,"B","XULM LOCK MANAGER LOG",8993.2)

**INSTALL NAME**
XU*8.0*607
"BLD",1545,0)
XU*8.0*607^KERNEL^0^3191028^y
"BLD",1545,1,0)
^^2^2^3191023^
"BLD",1545,1,1,0)
See patch XU*8*607 in the National Patch Module for complete information
"BLD",1545,1,2,0)
on this patch.
"BLD",1545,4,0)
^9.64PA^^
"BLD",1545,6.3)
45
"BLD",1545,"ABPKG")
n
"BLD",1545,"KRN",0)
^9.67PA^9002226^22
"BLD",1545,"KRN",.4,0)
.4
"BLD",1545,"KRN",.401,0)
.401
"BLD",1545,"KRN",.402,0)
.402
"BLD",1545,"KRN",.403,0)
.403
"BLD",1545,"KRN",.5,0)
.5
"BLD",1545,"KRN",.84,0)
.84
"BLD",1545,"KRN",3.6,0)
3.6
"BLD",1545,"KRN",3.8,0)
3.8
"BLD",1545,"KRN",9.2,0)
9.2
"BLD",1545,"KRN",9.8,0)
9.8
"BLD",1545,"KRN",19,0)
19
"BLD",1545,"KRN",19.1,0)
19.1
"BLD",1545,"KRN",101,0)
101
"BLD",1545,"KRN",409.61,0)
409.61
"BLD",1545,"KRN",771,0)
771
"BLD",1545,"KRN",779.2,0)
779.2
"BLD",1545,"KRN",870,0)
870
"BLD",1545,"KRN",8989.51,0)
8989.51
"BLD",1545,"KRN",8989.52,0)
8989.52
"BLD",1545,"KRN",8993,0)
8993
"BLD",1545,"KRN",8993,"NM",0)
^9.68A^22^22
"BLD",1545,"KRN",8993,"NM",1,0)
DPT(DFN)^^0
"BLD",1545,"KRN",8993,"NM",2,0)
AUPNPAT(IEN)^^0
"BLD",1545,"KRN",8993,"NM",3,0)
AUPNPROB(IEN)^^0
"BLD",1545,"KRN",8993,"NM",4,0)
AUPNVPOV(IEN)^^0
"BLD",1545,"KRN",8993,"NM",5,0)
DGBT(392,IEN)^^0
"BLD",1545,"KRN",8993,"NM",6,0)
DGCR(399,IEN)^^0
"BLD",1545,"KRN",8993,"NM",7,0)
DGM(IEN)^^0
"BLD",1545,"KRN",8993,"NM",8,0)
DGPT(IEN)^^0
"BLD",1545,"KRN",8993,"NM",9,0)
DVB(396.17,IEN)^^0
"BLD",1545,"KRN",8993,"NM",10,0)
GMR(120.86,DFN)^^0
"BLD",1545,"KRN",8993,"NM",11,0)
GMR(123,IEN)^^0
"BLD",1545,"KRN",8993,"NM",12,0)
LR(LRDFN)^^0
"BLD",1545,"KRN",8993,"NM",13,0)
OR(100,IEN)^^0
"BLD",1545,"KRN",8993,"NM",14,0)
PS(55,DFN)^^0
"BLD",1545,"KRN",8993,"NM",15,0)
PSB(53.79,IEN)^^0
"BLD",1545,"KRN",8993,"NM",16,0)
PSRX("B",RX)^^0
"BLD",1545,"KRN",8993,"NM",17,0)
RADPT(IEN)^^0
"BLD",1545,"KRN",8993,"NM",18,0)
RARPT(IEN)^^0
"BLD",1545,"KRN",8993,"NM",19,0)
TIU(8925,IEN)^^0
"BLD",1545,"KRN",8993,"NM",20,0)
XTMP("PSSLOCK",DFN)^^0
"BLD",1545,"KRN",8993,"NM",21,0)
XTMP(ORPTLK)^^0
"BLD",1545,"KRN",8993,"NM",22,0)
XTMP(SRLOCK)^^0
"BLD",1545,"KRN",8993,"NM","B","AUPNPAT(IEN)",2)

"BLD",1545,"KRN",8993,"NM","B","AUPNPROB(IEN)",3)

"BLD",1545,"KRN",8993,"NM","B","AUPNVPOV(IEN)",4)

"BLD",1545,"KRN",8993,"NM","B","DGBT(392,IEN)",5)

"BLD",1545,"KRN",8993,"NM","B","DGCR(399,IEN)",6)

"BLD",1545,"KRN",8993,"NM","B","DGM(IEN)",7)

"BLD",1545,"KRN",8993,"NM","B","DGPT(IEN)",8)

"BLD",1545,"KRN",8993,"NM","B","DPT(DFN)",1)

"BLD",1545,"KRN",8993,"NM","B","DVB(396.17,IEN)",9)

"BLD",1545,"KRN",8993,"NM","B","GMR(120.86,DFN)",10)

"BLD",1545,"KRN",8993,"NM","B","GMR(123,IEN)",11)

"BLD",1545,"KRN",8993,"NM","B","LR(LRDFN)",12)

"BLD",1545,"KRN",8993,"NM","B","OR(100,IEN)",13)

"BLD",1545,"KRN",8993,"NM","B","PS(55,DFN)",14)

"BLD",1545,"KRN",8993,"NM","B","PSB(53.79,IEN)",15)

"BLD",1545,"KRN",8993,"NM","B","PSRX(""B"",RX)",16)

"BLD",1545,"KRN",8993,"NM","B","RADPT(IEN)",17)

"BLD",1545,"KRN",8993,"NM","B","RARPT(IEN)",18)

"BLD",1545,"KRN",8993,"NM","B","TIU(8925,IEN)",19)

"BLD",1545,"KRN",8993,"NM","B","XTMP(""PSSLOCK"",DFN)",20)

"BLD",1545,"KRN",8993,"NM","B","XTMP(ORPTLK)",21)

"BLD",1545,"KRN",8993,"NM","B","XTMP(SRLOCK)",22)

"BLD",1545,"KRN",8994,0)
8994
"BLD",1545,"KRN",8994,"NM",0)
^9.68A^^
"BLD",1545,"KRN",9002226,0)
9002226
"BLD",1545,"KRN","B",.4,.4)

"BLD",1545,"KRN","B",.401,.401)

"BLD",1545,"KRN","B",.402,.402)

"BLD",1545,"KRN","B",.403,.403)

"BLD",1545,"KRN","B",.5,.5)

"BLD",1545,"KRN","B",.84,.84)

"BLD",1545,"KRN","B",3.6,3.6)

"BLD",1545,"KRN","B",3.8,3.8)

"BLD",1545,"KRN","B",9.2,9.2)

"BLD",1545,"KRN","B",9.8,9.8)

"BLD",1545,"KRN","B",19,19)

"BLD",1545,"KRN","B",19.1,19.1)

"BLD",1545,"KRN","B",101,101)

"BLD",1545,"KRN","B",409.61,409.61)

"BLD",1545,"KRN","B",771,771)

"BLD",1545,"KRN","B",779.2,779.2)

"BLD",1545,"KRN","B",870,870)

"BLD",1545,"KRN","B",8989.51,8989.51)

"BLD",1545,"KRN","B",8989.52,8989.52)

"BLD",1545,"KRN","B",8993,8993)

"BLD",1545,"KRN","B",8994,8994)

"BLD",1545,"KRN","B",9002226,9002226)

"BLD",1545,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1545,"QUES",0)
^9.62^^
"BLD",1545,"REQB",0)
^9.611^2^2
"BLD",1545,"REQB",1,0)
XU*8.0*608^2
"BLD",1545,"REQB",2,0)
XU*8.0*672^2
"BLD",1545,"REQB","B","XU*8.0*608",1)

"BLD",1545,"REQB","B","XU*8.0*672",2)

"KRN",8993,1,-1)
0^1
"KRN",8993,1,0)
DPT(DFN)
"KRN",8993,1,1)
REGISTRATION^1^1^^
"KRN",8993,1,2,0)
^8993.02I^1^1
"KRN",8993,1,2,1,0)
1^DFN^^V
"KRN",8993,1,2,1,1)
S Y=$S($D(^DPT(DFN,0)):1,1:0)
"KRN",8993,1,2,"B",1,1)

"KRN",8993,1,3,0)
^8993.03P^1^1
"KRN",8993,1,3,1,0)
2
"KRN",8993,1,3,1,1)
D PAT^XULMU(DFN)
"KRN",8993,1,3,1,2,0)
^8993.32^1^1^3140529^^^^
"KRN",8993,1,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,1,3,"B",2,1)

"KRN",8993,1,3,"C",2,1)

"KRN",8993,1,4,0)
^8993.04^2^2^3140529^^^^
"KRN",8993,1,4,1,0)
This lock is on a record in the PATIENT file (#2).  It is used by the 
"KRN",8993,1,4,2,0)
Registration package while registering a patient or editing a patient.
"KRN",8993,2,-1)
0^8
"KRN",8993,2,0)
DGPT(IEN)
"KRN",8993,2,1)
REGISTRATION^1^1^^
"KRN",8993,2,2,0)
^8993.02I^1^1
"KRN",8993,2,2,1,0)
1^IEN^^V
"KRN",8993,2,2,1,1)
S Y=$S($D(^DGPT(IEN,0)):1,1:0)
"KRN",8993,2,2,"B",1,1)

"KRN",8993,2,3,0)
^8993.03P^2^2
"KRN",8993,2,3,1,0)
2
"KRN",8993,2,3,1,1)
D PAT^XULMU(+$G(^DGPT(IEN,0)))
"KRN",8993,2,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,2,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,2,3,2,0)
45
"KRN",8993,2,3,2,1)
N ND S ND=$G(^DGPT(IEN,0)),ID("IEN")=IEN,ID(0)=0 D ADDPAT^XULMU(+ND) S ID(0)=ID(0)+1,ID(ID(0))="Admission Date:"_$S($P(ND,"^",2):$$FMTE^XLFDT($P(ND,"^",2)),1:"")
"KRN",8993,2,3,2,2,0)
^8993.32^2^2^3120704^^
"KRN",8993,2,3,2,2,1,0)
This references returns the patient name, date of birth, sex, Social
"KRN",8993,2,3,2,2,2,0)
Security Number, and date of admission.
"KRN",8993,2,3,"B",2,1)

"KRN",8993,2,3,"B",45,2)

"KRN",8993,2,3,"C",2,1)

"KRN",8993,2,3,"C",45,2)

"KRN",8993,2,4,0)
^8993.04^1^1^3120704^^^^
"KRN",8993,2,4,1,0)
This lock is on a record in the PTF file (#45).
"KRN",8993,3,-1)
0^5
"KRN",8993,3,0)
DGBT(392,IEN)
"KRN",8993,3,1)
FEE BASIS^1^1^^
"KRN",8993,3,2,0)
^8993.02I^2^2
"KRN",8993,3,2,1,0)
1^392^^L
"KRN",8993,3,2,2,0)
2^IEN^^V
"KRN",8993,3,2,2,1)
S Y=$S($D(^DGBT(392,IEN,0)):1,1:0)
"KRN",8993,3,2,"B",1,1)

"KRN",8993,3,2,"B",2,2)

"KRN",8993,3,3,0)
^8993.03P^2^2
"KRN",8993,3,3,1,0)
2
"KRN",8993,3,3,1,1)
D PAT^XULMU(+$P($G(^DGBT(392,IEN,0)),"^",2))
"KRN",8993,3,3,1,2,0)
^8993.32^2^2^3120704^^
"KRN",8993,3,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security.
"KRN",8993,3,3,2,0)
392
"KRN",8993,3,3,2,1)
N ND S ND=^DGBT(392,IEN,0),ID(0)=2,ID("IEN")=IEN,ID(1)="Claim Dt/Tm:"_$S(+ND:$$FMTE^XLFDT(+ND),1:""),ID(2)="Account#:"_$S($P(ND,"^",6):$P($G(^DGBT(392.3,$P(ND,"^",6),0)),"^"),1:"") D ADDPAT^XULMU($P(ND,"^",2))
"KRN",8993,3,3,2,2,0)
^8993.32^2^2^3120704^^^
"KRN",8993,3,3,2,2,1,0)
This references returns the patient name, date of birth, sex, Social
"KRN",8993,3,3,2,2,2,0)
Security Number, and claim date/time.
"KRN",8993,3,3,"B",2,1)

"KRN",8993,3,3,"B",392,2)

"KRN",8993,3,3,"C",2,1)

"KRN",8993,3,3,"C",392,2)

"KRN",8993,3,4,0)
^8993.04^2^2^3120704^^^^
"KRN",8993,3,4,1,0)
This lock is on a record in the BENEFICIARY TRAVEL CLAIM file (#392).
"KRN",8993,4,-1)
0^7
"KRN",8993,4,0)
DGM(IEN)
"KRN",8993,4,1)
REGISTRATION^1^1^^
"KRN",8993,4,2,0)
^8993.02I^1^1
"KRN",8993,4,2,1,0)
1^IEN^^V
"KRN",8993,4,2,1,1)
S Y=$S($D(^DGM(IEN,0)):1,1:0)
"KRN",8993,4,2,"B",1,1)

"KRN",8993,4,3,0)
^8993.03P^2^2
"KRN",8993,4,3,1,0)
2
"KRN",8993,4,3,1,1)
N ND S ND=$G(^DGM(IEN,0)) D PAT^XULMU($P(ND,"^",2))
"KRN",8993,4,3,1,2,0)
^^1^1^3120703^
"KRN",8993,4,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,4,3,2,0)
45.5
"KRN",8993,4,3,2,1)
N ND S ID("IEN")=IEN,ND=$G(^DGM(IEN,0)) D ADDPAT^XULMU($P(ND,"^",2))
"KRN",8993,4,3,2,2,0)
^^1^1^3120703^
"KRN",8993,4,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,4,3,"B",2,1)

"KRN",8993,4,3,"B",45.5,2)

"KRN",8993,4,3,"C",2,1)

"KRN",8993,4,3,"C",45.5,2)

"KRN",8993,4,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,4,4,1,0)
This lock is on a record in the PTF MESSAGE file (#45.5).
"KRN",8993,5,-1)
0^10
"KRN",8993,5,0)
GMR(120.86,DFN)
"KRN",8993,5,1)
ADVERSE REACTION TRACKING^1^1^^
"KRN",8993,5,2,0)
^8993.02I^2^2
"KRN",8993,5,2,1,0)
1^120.8^^L
"KRN",8993,5,2,2,0)
2^DFN^^V
"KRN",8993,5,2,2,1)
S Y=$S($D(^GMR(120.8,DFN,0)):1,1:0)
"KRN",8993,5,2,"B",1,1)

"KRN",8993,5,2,"B",2,2)

"KRN",8993,5,3,0)
^8993.03P^2^2
"KRN",8993,5,3,1,0)
2
"KRN",8993,5,3,1,1)
D PAT^XULMU(DFN)
"KRN",8993,5,3,1,2,0)
^^1^1^3120703^
"KRN",8993,5,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,5,3,2,0)
120.8
"KRN",8993,5,3,2,1)
S ID("IEN")=DFN D ADDPAT^XULMU(DFN)
"KRN",8993,5,3,2,2,0)
^^1^1^3120703^
"KRN",8993,5,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,5,3,"B",2,1)

"KRN",8993,5,3,"B",120.8,2)

"KRN",8993,5,3,"C",2,1)

"KRN",8993,5,3,"C",120.8,2)

"KRN",8993,5,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,5,4,1,0)
This lock is on a record in the ADVERSE REACTION ASSESSMENT file.
"KRN",8993,6,-1)
0^15
"KRN",8993,6,0)
PSB(53.79,IEN)
"KRN",8993,6,1)
^1^1^^
"KRN",8993,6,2,0)
^8993.02I^2^2
"KRN",8993,6,2,1,0)
1^53.79^^L
"KRN",8993,6,2,2,0)
2^IEN^^V
"KRN",8993,6,2,2,1)
S Y=$S($D(^PSB(53.79,IEN,0)):1,1:0)
"KRN",8993,6,2,"B",1,1)

"KRN",8993,6,2,"B",2,2)

"KRN",8993,6,3,0)
^8993.03P^2^2
"KRN",8993,6,3,1,0)
2
"KRN",8993,6,3,1,1)
N ND S ND=$G(^PSB(53.79,IEN,0)) D PAT^XULMU($P(ND,"^"))
"KRN",8993,6,3,1,2,0)
^^1^1^3120703^
"KRN",8993,6,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,6,3,2,0)
53.79
"KRN",8993,6,3,2,1)
N ND S ID("IEN")=IEN,ND=$G(^PSB(53.79,IEN,0)) D ADDPAT^XULMU($P(ND,"^"))
"KRN",8993,6,3,2,2,0)
^^1^1^3120703^
"KRN",8993,6,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,6,3,"B",2,1)

"KRN",8993,6,3,"B",53.79,2)

"KRN",8993,6,3,"C",2,1)

"KRN",8993,6,3,"C",53.79,2)

"KRN",8993,6,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,6,4,1,0)
This lock is on a record in the BCM MEDICATION LOG file (#53.79).
"KRN",8993,7,-1)
0^9
"KRN",8993,7,0)
DVB(396.17,IEN)
"KRN",8993,7,1)
AUTOMATED MED INFO EXCHANGE^1^1^^
"KRN",8993,7,2,0)
^8993.02I^2^2
"KRN",8993,7,2,1,0)
1^396.17^^L
"KRN",8993,7,2,2,0)
2^IEN^^V
"KRN",8993,7,2,2,1)
S Y=$S($D(^DVB(396.17,IEN,0)):1,1:0)
"KRN",8993,7,2,"B",1,1)

"KRN",8993,7,2,"B",2,2)

"KRN",8993,7,3,0)
^8993.03P^2^2
"KRN",8993,7,3,1,0)
2
"KRN",8993,7,3,1,1)
N ND S ND=$G(^DVB(396.17,IEN,0)) D PAT^XULMU($P(ND,"^"))
"KRN",8993,7,3,1,2,0)
^^1^1^3120703^
"KRN",8993,7,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,7,3,2,0)
396.17
"KRN",8993,7,3,2,1)
N ND S ID("IEN")=IEN,ND=$G(^DVB(396.17,IEN,0)) D ADDPAT^XULMU($P(ND,"^"))
"KRN",8993,7,3,2,2,0)
^^1^1^3120703^
"KRN",8993,7,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,7,3,"B",2,1)

"KRN",8993,7,3,"B",396.17,2)

"KRN",8993,7,3,"C",2,1)

"KRN",8993,7,3,"C",396.17,2)

"KRN",8993,7,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,7,4,1,0)
This lock is on a record in the CAPRI TEMPLATE file (#396.17).
"KRN",8993,8,-1)
0^11
"KRN",8993,8,0)
GMR(123,IEN)
"KRN",8993,8,1)
CONSULT/REQUEST TRACKING^1^1^^
"KRN",8993,8,2,0)
^8993.02I^2^2
"KRN",8993,8,2,1,0)
1^123^^L
"KRN",8993,8,2,2,0)
2^IEN^^V
"KRN",8993,8,2,2,1)
S Y=$S($D(^GMR(123,IEN,0)):1,1:0)
"KRN",8993,8,2,"B",1,1)

"KRN",8993,8,2,"B",2,2)

"KRN",8993,8,3,0)
^8993.03P^2^2
"KRN",8993,8,3,1,0)
2
"KRN",8993,8,3,1,1)
N ND S ND=$G(^GMR(123,IEN,0)) D PAT^XULMU($P(ND,"^",2))
"KRN",8993,8,3,1,2,0)
^^1^1^3120703^
"KRN",8993,8,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,8,3,2,0)
123
"KRN",8993,8,3,2,1)
N ND S ID("IEN")=IEN,ND=$G(^GMR(123,IEN,0)) D ADDPAT^XULMU($P(ND,"^",2))
"KRN",8993,8,3,2,2,0)
^8993.32^1^1^3140529^^
"KRN",8993,8,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,8,3,"B",2,1)

"KRN",8993,8,3,"B",123,2)

"KRN",8993,8,3,"C",2,1)

"KRN",8993,8,3,"C",123,2)

"KRN",8993,8,4,0)
^8993.04^1^1^3140529^^^^
"KRN",8993,8,4,1,0)
This lock is on a record in the REQUEST/CONSULTATION file (#123).
"KRN",8993,9,-1)
0^21
"KRN",8993,9,0)
XTMP(ORPTLK)
"KRN",8993,9,1)
ORDER ENTRY/RESULTS REPORTING^1^0^^
"KRN",8993,9,2,0)
^8993.02I^1^1
"KRN",8993,9,2,1,0)
1^ORPTLK^^V
"KRN",8993,9,2,1,1)
S Y=0 I ORPTLK["ORPTLK-",$D(^DPT(+$P(ORPTLK,"-",2),0)) S Y=1
"KRN",8993,9,2,"B",1,1)

"KRN",8993,9,3,0)
^8993.03P^1^1
"KRN",8993,9,3,1,0)
2
"KRN",8993,9,3,1,1)
D PAT^XULMU(+$P(ORPTLK,"-",2))
"KRN",8993,9,3,1,2,0)
^^1^1^3120703^
"KRN",8993,9,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,9,3,"B",2,1)

"KRN",8993,9,3,"C",2,1)

"KRN",8993,9,4,0)
^8993.04^2^2^3120703^^^^
"KRN",8993,9,4,1,0)
This lock is on a patient's chart in ORDER ENTRY/RESULTS REPORTING for CPRS.
"KRN",8993,9,4,2,0)
It indicates that someone is editing an order for the patient.
"KRN",8993,10,-1)
0^13
"KRN",8993,10,0)
OR(100,IEN)
"KRN",8993,10,1)
ORDER ENTRY/RESULTS REPORTING^1^1^^
"KRN",8993,10,2,0)
^8993.02I^2^2
"KRN",8993,10,2,1,0)
1^100^^L
"KRN",8993,10,2,2,0)
2^IEN^^V
"KRN",8993,10,2,2,1)
S Y=0 I $G(^OR(100,IEN,0)) S Y=1
"KRN",8993,10,2,"B",1,1)

"KRN",8993,10,2,"B",2,2)

"KRN",8993,10,3,0)
^8993.03P^2^2
"KRN",8993,10,3,1,0)
2
"KRN",8993,10,3,1,1)
N DFN S DFN=$P($G(^OR(100,IEN,0)),"^",2) S:$P(DFN,";",2)'="DPT(" DFN=0 D PAT^XULMU(+DFN)
"KRN",8993,10,3,1,2,0)
^^2^2^3120703^
"KRN",8993,10,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,10,3,1,2,2,0)
if the order is for a patient in the PATIENT file (#2).
"KRN",8993,10,3,2,0)
100
"KRN",8993,10,3,2,1)
N ND,DFN S ID("IEN")=IEN,ND=$G(^OR(100,IEN,0)),DFN=$P(ND,"^",2) S:$P(DFN,";",2)'="DPT(" DFN=0 D ADDPAT^XULMU(+DFN) S ID(0)=ID(0)+1,ID(ID(0))="Order #:"_$P(ND,"^")
"KRN",8993,10,3,2,2,0)
^8993.32^1^1^3140528^^
"KRN",8993,10,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number, and the order #.
"KRN",8993,10,3,"B",2,1)

"KRN",8993,10,3,"B",100,2)

"KRN",8993,10,3,"C",2,1)

"KRN",8993,10,3,"C",100,2)

"KRN",8993,10,4,0)
^8993.04^1^1^3140528^^^^
"KRN",8993,10,4,1,0)
This lock is on a record in the ORDER file (#100).
"KRN",8993,11,-1)
0^14
"KRN",8993,11,0)
PS(55,DFN)
"KRN",8993,11,1)
^1^1^^
"KRN",8993,11,2,0)
^8993.02I^2^2
"KRN",8993,11,2,1,0)
1^55^^L
"KRN",8993,11,2,2,0)
2^DFN^^V
"KRN",8993,11,2,2,1)
S Y=$S($D(^PS(55,DFN,0)):1,1:0)
"KRN",8993,11,2,"B",1,1)

"KRN",8993,11,2,"B",2,2)

"KRN",8993,11,3,0)
^8993.03P^2^2
"KRN",8993,11,3,1,0)
2
"KRN",8993,11,3,1,1)
D PAT^XULMU(DFN)
"KRN",8993,11,3,1,2,0)
^^1^1^3120703^
"KRN",8993,11,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,11,3,2,0)
55
"KRN",8993,11,3,2,1)
S ID("IEN")=DFN D ADDPAT^XULMU(DFN)
"KRN",8993,11,3,2,2,0)
^^1^1^3120703^
"KRN",8993,11,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,11,3,"B",2,1)

"KRN",8993,11,3,"B",55,2)

"KRN",8993,11,3,"C",2,1)

"KRN",8993,11,3,"C",55,2)

"KRN",8993,11,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,11,4,1,0)
This lock is on a record in the PHARMACY PATIENT file (#55).
"KRN",8993,12,-1)
0^16
"KRN",8993,12,0)
PSRX("B",RX)
"KRN",8993,12,1)
^1^0^^
"KRN",8993,12,2,0)
^8993.02I^2^2
"KRN",8993,12,2,1,0)
1^B^^L
"KRN",8993,12,2,2,0)
2^RX^^V
"KRN",8993,12,2,2,1)
S Y=$S($O(^PSRX("B",RX,0)):1,1:0)
"KRN",8993,12,2,"B",1,1)

"KRN",8993,12,2,"B",2,2)

"KRN",8993,12,3,0)
^8993.03P^2^2
"KRN",8993,12,3,1,0)
2
"KRN",8993,12,3,1,1)
N IEN S IEN=$O(^PSRX("B",RX,0)) I IEN D PAT^XULMU($P($G(^PSRX(IEN,0)),"^",2))
"KRN",8993,12,3,1,2,0)
^^1^1^3120703^
"KRN",8993,12,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,12,3,2,0)
52
"KRN",8993,12,3,2,1)
N IEN S IEN=$O(^PSRX("B",RX,0)) I IEN S ID("IEN")=IEN D ADDPAT^XULMU($P($G(^PSRX(IEN,0)),"^",2)) S ID(0)=ID(0)+1,ID(ID(0))="RX#:"_RX
"KRN",8993,12,3,2,2,0)
^^2^2^3120703^
"KRN",8993,12,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number and prescription number.
"KRN",8993,12,3,"B",2,1)

"KRN",8993,12,3,"B",52,2)

"KRN",8993,12,3,"C",2,1)

"KRN",8993,12,3,"C",52,2)

"KRN",8993,12,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,12,4,1,0)
This lock is on a record in the PRESCRIPTION file (#52).
"KRN",8993,13,-1)
0^20
"KRN",8993,13,0)
XTMP("PSSLOCK",DFN)
"KRN",8993,13,1)
PHARMACY DATA MANAGEMENT^1^0^^
"KRN",8993,13,2,0)
^8993.02I^2^2
"KRN",8993,13,2,1,0)
1^PSSLOCK^^L
"KRN",8993,13,2,2,0)
2^DFN^^V
"KRN",8993,13,2,2,1)
S Y=$S($D(^DPT(DFN,0)):1,1:0)
"KRN",8993,13,2,"B",1,1)

"KRN",8993,13,2,"B",2,2)

"KRN",8993,13,3,0)
^8993.03P^1^1
"KRN",8993,13,3,1,0)
2
"KRN",8993,13,3,1,1)
D PAT^XULMU(DFN)
"KRN",8993,13,3,1,2,0)
^^1^1^3120703^
"KRN",8993,13,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,13,3,"B",2,1)

"KRN",8993,13,3,"C",2,1)

"KRN",8993,13,4,0)
^8993.04^1^1^3120703^^^^
"KRN",8993,13,4,1,0)
This lock indicates that someone is placing a pharmacy order for the patient.
"KRN",8993,14,-1)
0^22
"KRN",8993,14,0)
XTMP(SRLOCK)
"KRN",8993,14,1)
SURGERY^1^1^^
"KRN",8993,14,2,0)
^8993.02I^1^1
"KRN",8993,14,2,1,0)
1^SRLOCK^^V
"KRN",8993,14,2,1,1)
S Y=0 I SRLOCK["SRLOCK-",$D(^SRF(+$P(SRLOCK,"-",2),0)) S Y=1
"KRN",8993,14,2,"B",1,1)

"KRN",8993,14,3,0)
^8993.03P^2^2
"KRN",8993,14,3,1,0)
2
"KRN",8993,14,3,1,1)
N ND S ND=$G(^SRF(+$P(SRLOCK,"-",2),0)) D PAT^XULMU(+ND)
"KRN",8993,14,3,1,2,0)
^8993.32^1^1^3121218^^
"KRN",8993,14,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,14,3,2,0)
130
"KRN",8993,14,3,2,1)
N ND S ID("IEN")=+$P(SRLOCK,"-",2),ND=$G(^SRF(ID("IEN"),0)) D ADDPAT^XULMU(+ND)
"KRN",8993,14,3,2,2,0)
^8993.32^1^1^3121218^^
"KRN",8993,14,3,2,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,14,3,"B",2,1)

"KRN",8993,14,3,"B",130,2)

"KRN",8993,14,3,"C",2,1)

"KRN",8993,14,3,"C",130,2)

"KRN",8993,14,4,0)
^8993.04^1^1^3121218^^^^
"KRN",8993,14,4,1,0)
This lock is on a surgery case in the SURGERY file (#130).
"KRN",8993,15,-1)
0^19
"KRN",8993,15,0)
TIU(8925,IEN)
"KRN",8993,15,1)
TEXT INTEGRATION UTILITIES^1^1^^
"KRN",8993,15,2,0)
^8993.02I^2^2
"KRN",8993,15,2,1,0)
1^8925^^L
"KRN",8993,15,2,2,0)
2^IEN^^V
"KRN",8993,15,2,2,1)
S Y=$S($D(^TIU(8925,IEN,0)):1,1:0)
"KRN",8993,15,2,"B",1,1)

"KRN",8993,15,2,"B",2,2)

"KRN",8993,15,3,0)
^8993.03P^2^2
"KRN",8993,15,3,1,0)
2
"KRN",8993,15,3,1,1)
D PAT^XULMU(+$P($G(^TIU(8925,IEN,0)),"^",2))
"KRN",8993,15,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,15,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security nNumber.
"KRN",8993,15,3,2,0)
8925
"KRN",8993,15,3,2,1)
N ND S ND=$G(^TIU(8925,IEN,0)),ID("IEN")=IEN D ADDPAT^XULMU(+$P(ND,"^",2)) S ID(0)=ID(0)+1,ID(ID(0))="Document Type:"_$P($G(^TIU(8925.1,+ND,0)),"^")
"KRN",8993,15,3,2,2,0)
^8993.32^2^2^3120704^^^
"KRN",8993,15,3,2,2,1,0)
This file reference returns the patient name, date of birth, sex,
"KRN",8993,15,3,2,2,2,0)
Social Security Number, and document type.
"KRN",8993,15,3,"B",2,1)

"KRN",8993,15,3,"B",8925,2)

"KRN",8993,15,3,"C",2,1)

"KRN",8993,15,3,"C",8925,2)

"KRN",8993,15,4,0)
^8993.04^2^2^3120704^^^^
"KRN",8993,15,4,1,0)
This lock is on a document in the TIU DOCUMENT file (#8925).
"KRN",8993,16,-1)
0^17
"KRN",8993,16,0)
RADPT(IEN)
"KRN",8993,16,1)
RADIOLOGY/NUCLEAR MEDICINE^1^1^^
"KRN",8993,16,2,0)
^8993.02I^1^1
"KRN",8993,16,2,1,0)
1^IEN^^V
"KRN",8993,16,2,1,1)
S Y=$S($D(^RADPT(IEN,0)):1,1:0)
"KRN",8993,16,2,"B",1,1)

"KRN",8993,16,3,0)
^8993.03P^1^1
"KRN",8993,16,3,1,0)
2
"KRN",8993,16,3,1,1)
D PAT^XULMU(+$G(^RADPT(IEN,0)))
"KRN",8993,16,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,16,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,16,3,"B",2,1)

"KRN",8993,16,3,"C",2,1)

"KRN",8993,16,4,0)
^8993.04^1^1^3120704^^^^
"KRN",8993,16,4,1,0)
This lock is on a record in the RAD/NUC MED PATIENT file (#70).
"KRN",8993,17,-1)
0^12
"KRN",8993,17,0)
LR(LRDFN)
"KRN",8993,17,1)
LAB SERVICE^1^1^^
"KRN",8993,17,2,0)
^8993.02I^1^1
"KRN",8993,17,2,1,0)
1^LRDFN^^V
"KRN",8993,17,2,1,1)
S Y=$S($D(^LR(LRDFN,0)):1,1:0)
"KRN",8993,17,2,"B",1,1)

"KRN",8993,17,3,0)
^8993.03P^1^1
"KRN",8993,17,3,1,0)
2
"KRN",8993,17,3,1,1)
N ND S ND=$G(^LR(LRDFN,0)) I $P(ND,"^",2)=2 D PAT^XULMU(+$P(ND,"^",3))
"KRN",8993,17,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,17,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,17,3,"B",2,1)

"KRN",8993,17,3,"C",2,1)

"KRN",8993,17,4,0)
^8993.04^1^1^3120704^^^^
"KRN",8993,17,4,1,0)
This lock is on a record in the LAB DATA file (#63).
"KRN",8993,18,-1)
0^2
"KRN",8993,18,0)
AUPNPAT(IEN)
"KRN",8993,18,1)
PCE PATIENT CARE ENCOUNTER^1^1^^
"KRN",8993,18,2,0)
^8993.02I^1^1
"KRN",8993,18,2,1,0)
1^IEN^^V
"KRN",8993,18,2,1,1)
S Y=$S($D(^AUPNPAT(IEN,0)):1,1:0)
"KRN",8993,18,2,"B",1,1)

"KRN",8993,18,3,0)
^8993.03P^1^1
"KRN",8993,18,3,1,0)
2
"KRN",8993,18,3,1,1)
D PAT^XULMU(+$G(^AUPNPAT(IEN,0)))
"KRN",8993,18,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,18,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,18,3,"B",2,1)

"KRN",8993,18,3,"C",2,1)

"KRN",8993,18,4,0)
^8993.04^1^1^3140528^^^^
"KRN",8993,18,4,1,0)
This lock is on a record in the PATIENT/IHS file (#9000001).
"KRN",8993,19,-1)
0^4
"KRN",8993,19,0)
AUPNVPOV(IEN)
"KRN",8993,19,1)
PCE PATIENT CARE ENCOUNTER^1^1^^
"KRN",8993,19,2,0)
^8993.02I^1^1
"KRN",8993,19,2,1,0)
1^IEN^^V
"KRN",8993,19,2,1,1)
S Y=$S($D(^AUPNVPOV(IEN,0)):1,1:0)
"KRN",8993,19,2,"B",1,1)

"KRN",8993,19,3,0)
^8993.03P^1^1
"KRN",8993,19,3,1,0)
2
"KRN",8993,19,3,1,1)
D PAT^XULMU($P($G(^AUPNVPAT(IEN,0)),"^",2))
"KRN",8993,19,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,19,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,19,3,"B",2,1)

"KRN",8993,19,3,"C",2,1)

"KRN",8993,19,4,0)
^8993.04^1^1^3120704^^^^
"KRN",8993,19,4,1,0)
This lock is on a record in the V POV file (#9000010.07).
"KRN",8993,20,-1)
0^18
"KRN",8993,20,0)
RARPT(IEN)
"KRN",8993,20,1)
RADIOLOGY/NUCLEAR MEDICINE^1^1^^
"KRN",8993,20,2,0)
^8993.02I^1^1
"KRN",8993,20,2,1,0)
1^IEN^^V
"KRN",8993,20,2,1,1)
S Y=$S($D(^RARPT(IEN,0)):1,1:0)
"KRN",8993,20,2,"B",1,1)

"KRN",8993,20,3,0)
^8993.03P^2^2
"KRN",8993,20,3,1,0)
2
"KRN",8993,20,3,1,1)
D PAT^XULMU($P($G(^RARPT(IEN,0)),"^",2))
"KRN",8993,20,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,20,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,20,3,2,0)
74
"KRN",8993,20,3,2,1)
N ND S ND=$G(^RARPT(IEN,0)),ID("IEN")=IEN D ADDPAT^XULMU(+$P(ND,"^",2)) S ID(0)=ID(0)+1,ID(ID(0))="DAY-CASE#:"_$P(ND,"^")
"KRN",8993,20,3,2,2,0)
^8993.32^2^2^3140528^^^^
"KRN",8993,20,3,2,2,1,0)
This file reference returns the patient name, date of birth, sex,
"KRN",8993,20,3,2,2,2,0)
Social Security Number, and DAY-CASE#.
"KRN",8993,20,3,"B",2,1)

"KRN",8993,20,3,"B",74,2)

"KRN",8993,20,3,"C",2,1)

"KRN",8993,20,3,"C",74,2)

"KRN",8993,20,4,0)
^8993.04^1^1^3140528^^^^
"KRN",8993,20,4,1,0)
This lock is on a record in the RAD/NUC MED REPORTS file (#74).
"KRN",8993,21,-1)
0^6
"KRN",8993,21,0)
DGCR(399,IEN)
"KRN",8993,21,1)
INTEGRATED BILLING^1^1^^
"KRN",8993,21,2,0)
^8993.02I^2^2
"KRN",8993,21,2,1,0)
1^399^^L
"KRN",8993,21,2,1,1)

"KRN",8993,21,2,2,0)
2^IEN^^V
"KRN",8993,21,2,2,1)
S Y=$S($D(^DGCR(399,IEN,0)):1,1:0)
"KRN",8993,21,2,"B",1,1)

"KRN",8993,21,2,"B",2,2)

"KRN",8993,21,3,0)
^8993.03P^2^2
"KRN",8993,21,3,1,0)
2
"KRN",8993,21,3,1,1)
D PAT^XULMU($P($G(^DGCR(399,IEN,0)),"^",2))
"KRN",8993,21,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,21,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,21,3,2,0)
399
"KRN",8993,21,3,2,1)
N ND S ND=$G(^DGCR(399,IEN,0)),ID("IEN")=IEN D ADDPAT^XULMU(+$P(ND,"^",2)) S ID(0)=ID(0)+1,ID(ID(0))="BILL NUMBER:"_$P(ND,"^")
"KRN",8993,21,3,2,2,0)
^8993.32^2^2^3140528^^^^
"KRN",8993,21,3,2,2,1,0)
This file reference returns the patient name, date of birth, sex,
"KRN",8993,21,3,2,2,2,0)
Social Security Number, and BILL NUMBER.
"KRN",8993,21,3,"B",2,1)

"KRN",8993,21,3,"B",399,2)

"KRN",8993,21,3,"C",2,1)

"KRN",8993,21,3,"C",399,2)

"KRN",8993,21,4,0)
^8993.04^1^1^3140528^^^^
"KRN",8993,21,4,1,0)
This lock is on a record in the BILL/CLAIMS file (#399).
"KRN",8993,22,-1)
0^3
"KRN",8993,22,0)
AUPNPROB(IEN)
"KRN",8993,22,1)
PROBLEM LIST^1^1^^
"KRN",8993,22,2,0)
^8993.02I^1^1
"KRN",8993,22,2,1,0)
1^IEN^^V
"KRN",8993,22,2,1,1)
S Y=$S($D(^AUPNPROB(IEN,0)):1,1:0)
"KRN",8993,22,2,"B",1,1)

"KRN",8993,22,3,0)
^8993.03P^2^2
"KRN",8993,22,3,1,0)
2
"KRN",8993,22,3,1,1)
D PAT^XULMU($P($G(^AUPNPROB(IEN,0)),"^",2))
"KRN",8993,22,3,1,2,0)
^8993.32^1^1^3120704^^
"KRN",8993,22,3,1,2,1,0)
Returns the patient's name, sex, date of birth, and Social Security Number.
"KRN",8993,22,3,2,0)
9000011
"KRN",8993,22,3,2,1)
S ID("IEN")=IEN D ADDPAT^XULMU($P($G(^AUPNPROB(IEN,0)),"^",2))
"KRN",8993,22,3,2,2,0)
^8993.32^2^2^3120704^^^
"KRN",8993,22,3,2,2,1,0)
This file reference returns the patient name, date of birth, sex,
"KRN",8993,22,3,2,2,2,0)
and Social Security Number.
"KRN",8993,22,3,"B",2,1)

"KRN",8993,22,3,"B",9000011,2)

"KRN",8993,22,3,"C",2,1)

"KRN",8993,22,3,"C",9000011,2)

"KRN",8993,22,4,0)
^8993.04^1^1^3120704^^^^
"KRN",8993,22,4,1,0)
This lock is on a record in the PROBLEM file (#9000011).
"MBREQ")
0
"ORD",23,8993)
8993;23;1;;XULM^XPDTA2;;XULM^XPDIA3;;;
"ORD",23,8993,0)
XULM LOCK DICTIONARY
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
607^3191028^1010
"PKG",3,22,1,"PAH",1,1,0)
^^2^2^3191028
"PKG",3,22,1,"PAH",1,1,1,0)
See patch XU*8*607 in the National Patch Module for complete information
"PKG",3,22,1,"PAH",1,1,2,0)
on this patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.2
**END**
**END**
