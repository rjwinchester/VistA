KIDS Distribution saved on Dec 20, 2018@14:59:23
IVM CLEANUP OF SOCIAL SECURITY NUMBERS
**KIDS**:IVM*2.0*174^EAS*1.0*172^

**INSTALL NAME**
IVM*2.0*174
"BLD",10597,0)
IVM*2.0*174^INCOME VERIFICATION MATCH^0^3181220^y
"BLD",10597,1,0)
^^1^1^3181001^
"BLD",10597,1,1,0)
Please refer to the Patch Description in FORUM for patch IVM*2.0*174
"BLD",10597,4,0)
^9.64PA^^
"BLD",10597,6.3)
15
"BLD",10597,"ABPKG")
n
"BLD",10597,"INIT")
EP^IVM2174P
"BLD",10597,"KRN",0)
^9.67PA^779.2^20
"BLD",10597,"KRN",.4,0)
.4
"BLD",10597,"KRN",.401,0)
.401
"BLD",10597,"KRN",.402,0)
.402
"BLD",10597,"KRN",.403,0)
.403
"BLD",10597,"KRN",.5,0)
.5
"BLD",10597,"KRN",.84,0)
.84
"BLD",10597,"KRN",3.6,0)
3.6
"BLD",10597,"KRN",3.8,0)
3.8
"BLD",10597,"KRN",9.2,0)
9.2
"BLD",10597,"KRN",9.8,0)
9.8
"BLD",10597,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",10597,"KRN",9.8,"NM",1,0)
IVMCMC^^0^B43788420
"BLD",10597,"KRN",9.8,"NM",2,0)
IVM2174F^^0^B29322365
"BLD",10597,"KRN",9.8,"NM",3,0)
IVMCM2^^0^B32817951
"BLD",10597,"KRN",9.8,"NM","B","IVM2174F",2)

"BLD",10597,"KRN",9.8,"NM","B","IVMCM2",3)

"BLD",10597,"KRN",9.8,"NM","B","IVMCMC",1)

"BLD",10597,"KRN",19,0)
19
"BLD",10597,"KRN",19.1,0)
19.1
"BLD",10597,"KRN",101,0)
101
"BLD",10597,"KRN",409.61,0)
409.61
"BLD",10597,"KRN",771,0)
771
"BLD",10597,"KRN",779.2,0)
779.2
"BLD",10597,"KRN",870,0)
870
"BLD",10597,"KRN",8989.51,0)
8989.51
"BLD",10597,"KRN",8989.52,0)
8989.52
"BLD",10597,"KRN",8994,0)
8994
"BLD",10597,"KRN","B",.4,.4)

"BLD",10597,"KRN","B",.401,.401)

"BLD",10597,"KRN","B",.402,.402)

"BLD",10597,"KRN","B",.403,.403)

"BLD",10597,"KRN","B",.5,.5)

"BLD",10597,"KRN","B",.84,.84)

"BLD",10597,"KRN","B",3.6,3.6)

"BLD",10597,"KRN","B",3.8,3.8)

"BLD",10597,"KRN","B",9.2,9.2)

"BLD",10597,"KRN","B",9.8,9.8)

"BLD",10597,"KRN","B",19,19)

"BLD",10597,"KRN","B",19.1,19.1)

"BLD",10597,"KRN","B",101,101)

"BLD",10597,"KRN","B",409.61,409.61)

"BLD",10597,"KRN","B",771,771)

"BLD",10597,"KRN","B",779.2,779.2)

"BLD",10597,"KRN","B",870,870)

"BLD",10597,"KRN","B",8989.51,8989.51)

"BLD",10597,"KRN","B",8989.52,8989.52)

"BLD",10597,"KRN","B",8994,8994)

"BLD",10597,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10597,"QUES",0)
^9.62^^
"BLD",10597,"REQB",0)
^9.611^3^2
"BLD",10597,"REQB",1,0)
DG*5.3*970^1
"BLD",10597,"REQB",3,0)
IVM*2.0*121^1
"BLD",10597,"REQB","B","DG*5.3*970",1)

"BLD",10597,"REQB","B","IVM*2.0*121",3)

"INIT")
EP^IVM2174P
"MBREQ")
0
"PKG",120,-1)
1^1
"PKG",120,0)
INCOME VERIFICATION MATCH^IVM^IVM Software for interface with the IVM Center
"PKG",120,20,0)
^9.402P^^
"PKG",120,22,0)
^9.49I^1^1
"PKG",120,22,1,0)
2.0^2941021^2960823
"PKG",120,22,1,"PAH",1,0)
174^3181220
"PKG",120,22,1,"PAH",1,1,0)
^^1^1^3181220
"PKG",120,22,1,"PAH",1,1,1,0)
Please refer to the Patch Description in FORUM for patch IVM*2.0*174
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","IVM2174F")
0^2^B29322365
"RTN","IVM2174F",1,0)
IVM2174F ;ALB/JAM - IVM*2.0*174 - FIX BLANK SSN IN PERSON INCOME FILE ;9/26/2018 3:21pm
"RTN","IVM2174F",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**174**;21-OCT-94;Build 15
"RTN","IVM2174F",3,0)
 ;
"RTN","IVM2174F",4,0)
 Q
"RTN","IVM2174F",5,0)
EP ; Entry Point
"RTN","IVM2174F",6,0)
 Q
"RTN","IVM2174F",7,0)
IVMFSSN(DFN,IVMJOB) ; Process only ZDP segments to store SSNs into 408.13 file if IEN is in ^XTMP("DG53970P")
"RTN","IVM2174F",8,0)
 ; Called by: ^IVMCM if DFN is defined in ^XTMP("DG53970P") when processing ORU-Z10 message
"RTN","IVM2174F",9,0)
 ;
"RTN","IVM2174F",10,0)
 ; Input:   DFN - Patient DFN from the ORU-Z10 PID
"RTN","IVM2174F",11,0)
 ;          IVMJOB - job number in ^XTMP("DG53970P",JOB)
"RTN","IVM2174F",12,0)
 ;
"RTN","IVM2174F",13,0)
 N IVMCTR,IVMSEG,IVMVAL,IEN,IVMIEN,IVMFOUND,IVMIENCNT
"RTN","IVM2174F",14,0)
 ; spouse segment
"RTN","IVM2174F",15,0)
 S IVMSEG=$G(^TMP($J,"IVMCM","ZDPS"))
"RTN","IVM2174F",16,0)
 I IVMSEG'="" D FILESSN(DFN,IVMJOB,IVMSEG)
"RTN","IVM2174F",17,0)
 ; inactive spouse segments
"RTN","IVM2174F",18,0)
 S IVMCTR=0
"RTN","IVM2174F",19,0)
 F  S IVMCTR=$O(^TMP($J,"IVMCM","ZDPIS",IVMCTR)) Q:(IVMCTR="")  D
"RTN","IVM2174F",20,0)
 . S IVMSEG=$G(^TMP($J,"IVMCM","ZDPIS",IVMCTR)) Q:IVMSEG=""
"RTN","IVM2174F",21,0)
 . D FILESSN(DFN,IVMJOB,IVMSEG)
"RTN","IVM2174F",22,0)
 ; dependent segments
"RTN","IVM2174F",23,0)
 S IVMCTR=0
"RTN","IVM2174F",24,0)
 F  S IVMCTR=$O(^TMP($J,"IVMCM","ZDPC",IVMCTR)) Q:(IVMCTR="")  D
"RTN","IVM2174F",25,0)
 . S IVMSEG=$G(^TMP($J,"IVMCM","ZDPC",IVMCTR)) Q:IVMSEG=""
"RTN","IVM2174F",26,0)
 . D FILESSN(DFN,IVMJOB,IVMSEG)
"RTN","IVM2174F",27,0)
 ; inactive dependent segments
"RTN","IVM2174F",28,0)
 S IVMCTR=0
"RTN","IVM2174F",29,0)
 F  S IVMCTR=$O(^TMP($J,"IVMCM","ZDPIC",IVMCTR)) Q:(IVMCTR="")  D
"RTN","IVM2174F",30,0)
 . S IVMSEG=$G(^TMP($J,"IVMCM","ZDPIC",IVMCTR)) Q:IVMSEG=""
"RTN","IVM2174F",31,0)
 . D FILESSN(DFN,IVMJOB,IVMSEG)
"RTN","IVM2174F",32,0)
 ; All ZDP segments processed
"RTN","IVM2174F",33,0)
 ; If all IENs related to the DFN are gone from ^XTMP, remove the DFN from ^XTMP
"RTN","IVM2174F",34,0)
 S IVMFOUND=0
"RTN","IVM2174F",35,0)
 ; For the DFN, loop over ALL the dependent IENs in the 408.12 file "B" index
"RTN","IVM2174F",36,0)
 S IEN="" F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:'IEN  D  Q:IVMFOUND
"RTN","IVM2174F",37,0)
 . ; get the related 408.13 IEN
"RTN","IVM2174F",38,0)
 . S IVMVAL=$P(^DGPR(408.12,IEN,0),"^",3)
"RTN","IVM2174F",39,0)
 . I $P(IVMVAL,";",2)'="DGPR(408.13," Q
"RTN","IVM2174F",40,0)
 . S IVMIEN=$P(IVMVAL,";",1)
"RTN","IVM2174F",41,0)
 . S IVMIENCNT=0
"RTN","IVM2174F",42,0)
 . ; If IVMIEN is in ^XTMP("DG53970P",IVMJOB,"SSN",count)=IVMIEN set flag
"RTN","IVM2174F",43,0)
 . F  S IVMIENCNT=$O(^XTMP("DG53970P",IVMJOB,"SSN",IVMIENCNT)) Q:'IVMIENCNT  I ^XTMP("DG53970P",IVMJOB,"SSN",IVMIENCNT)=IVMIEN S IVMFOUND=1 Q
"RTN","IVM2174F",44,0)
 ; If no IENs found, clear the DFN out of the ^XTMP global
"RTN","IVM2174F",45,0)
 I 'IVMFOUND K ^XTMP("DG53970P",IVMJOB,"DFN",DFN)
"RTN","IVM2174F",46,0)
 Q
"RTN","IVM2174F",47,0)
FILESSN(DFN,IVMJOB,IVMSEG) ; Check segment and store SSN in 408.13 if criteria met
"RTN","IVM2174F",48,0)
 ; Input:   DFN - DFN from PID segment
"RTN","IVM2174F",49,0)
 ;          IVMJOB - job number in ^XTMP("DG53970P",JOB) 
"RTN","IVM2174F",50,0)
 ;          IVMSEG - the ZDPS or ZDPC segment
"RTN","IVM2174F",51,0)
 N IVMPRI,IVMVAL,IVMIEN,IVMFOUND,IVMIENCNT,IVMSSN,IVMPSSNR,IVMFLG1,IVMERR
"RTN","IVM2174F",52,0)
 N IVMSEX,IVMSEX13,IVMDOB,IVMDOB13,IVMRELN,IVMRELO
"RTN","IVM2174F",53,0)
 N FDA,IVMERRORS,DIERR
"RTN","IVM2174F",54,0)
 S IVMRELN=$P(IVMSEG,"^",6)
"RTN","IVM2174F",55,0)
 ; skip segment if RELATIONSHIP is SELF
"RTN","IVM2174F",56,0)
 Q:IVMRELN=1
"RTN","IVM2174F",57,0)
 S IVMPRI=$P(IVMSEG,"^",7) ; ien of patient relation file 408.12
"RTN","IVM2174F",58,0)
 ; if IEN not supplied, derive it by looping over dependents in 408.12 file
"RTN","IVM2174F",59,0)
 I IVMPRI="" D
"RTN","IVM2174F",60,0)
 . ; get Sex and DOB from segment
"RTN","IVM2174F",61,0)
 . S IVMSEX=$P(IVMSEG,"^",3),IVMDOB=$$FMDATE^HLFNC($P(IVMSEG,"^",4))
"RTN","IVM2174F",62,0)
 . S IVMFLG1=0
"RTN","IVM2174F",63,0)
 . ; loop over dependents for this DFN in the 408.12 file
"RTN","IVM2174F",64,0)
 . S IVMPRI=0 F  S IVMPRI=$O(^DGPR(408.12,"B",DFN,IVMPRI)) Q:'IVMPRI  D  Q:IVMFLG1
"RTN","IVM2174F",65,0)
 . . ; Get Relationship, DOB, and Sex from income person file 408.13
"RTN","IVM2174F",66,0)
 . . D GETIP(IVMPRI,.IVMRELO,.IVMDOB13,.IVMSEX13)
"RTN","IVM2174F",67,0)
 . . Q:(IVMRELO=1)  ; quit if RELATIONSHIP is SELF
"RTN","IVM2174F",68,0)
 . . ; match sex, dob and relationship from segment with values from 408.13 file 
"RTN","IVM2174F",69,0)
 . . I (IVMSEX=IVMSEX13)&(IVMDOB=IVMDOB13)&(IVMRELN=IVMRELO) S IVMFLG1=1   ; Match - found dependent in 408.13.
"RTN","IVM2174F",70,0)
 ; If dependent IEN from 408.12 file not defined - Quit
"RTN","IVM2174F",71,0)
 Q:IVMPRI=""
"RTN","IVM2174F",72,0)
 ; get the related 408.13 IEN
"RTN","IVM2174F",73,0)
 S IVMVAL=$P(^DGPR(408.12,IVMPRI,0),"^",3)
"RTN","IVM2174F",74,0)
 I $P(IVMVAL,";",2)'="DGPR(408.13," Q
"RTN","IVM2174F",75,0)
 S IVMIEN=$P(IVMVAL,";",1) ; ien of income person file 408.13
"RTN","IVM2174F",76,0)
 S IVMFOUND=0,IVMIENCNT=0
"RTN","IVM2174F",77,0)
 ; loop over IENs in ^XTMP to see if IVMIEN is there
"RTN","IVM2174F",78,0)
 F  S IVMIENCNT=$O(^XTMP("DG53970P",IVMJOB,"SSN",IVMIENCNT)) Q:'IVMIENCNT  I ^XTMP("DG53970P",IVMJOB,"SSN",IVMIENCNT)=IVMIEN S IVMFOUND=1 Q
"RTN","IVM2174F",79,0)
 Q:'IVMFOUND
"RTN","IVM2174F",80,0)
 ; IVMIEN is the IEN that needs the SSN updated in 408.13 - ^DGPR(408.13,IEN,0) piece 9
"RTN","IVM2174F",81,0)
 S IVMSSN=$P(IVMSEG,"^",5) ;SSN
"RTN","IVM2174F",82,0)
 ; Validate the SSN and if not valid, place the error in the ^XTMP global and quit
"RTN","IVM2174F",83,0)
 S IVMERR=""
"RTN","IVM2174F",84,0)
 I '$$VALSSN(IVMSSN,.IVMERR) S ^XTMP("DG53970P",IVMJOB,"SSNERR",IVMIEN)=$G(IVMERR) Q
"RTN","IVM2174F",85,0)
 ; strip dashes
"RTN","IVM2174F",86,0)
 S IVMSSN=$TR(IVMSSN,"-")
"RTN","IVM2174F",87,0)
 ; check for Pseudo SSN
"RTN","IVM2174F",88,0)
 S IVMPSSNR=$P(IVMSEG,"^",10) ;Pseudo SSN Reason
"RTN","IVM2174F",89,0)
 ; If not valid value, set it to null
"RTN","IVM2174F",90,0)
 I IVMPSSNR]"",IVMPSSNR'="R",IVMPSSNR'="S",IVMPSSNR'="N" S IVMPSSNR=""
"RTN","IVM2174F",91,0)
 ; If there is a valid Pseudo SSN Reason, then append a "P" to the end
"RTN","IVM2174F",92,0)
 ;  of the SSN so that it can be recognized on VistA as a pseudo
"RTN","IVM2174F",93,0)
 I IVMPSSNR'="" S IVMSSN=$G(IVMSSN)_"P"
"RTN","IVM2174F",94,0)
 ; Recheck the SSN field in 408.13 file and if corrupted, clean it up
"RTN","IVM2174F",95,0)
 D CHKSSN(IVMIEN)
"RTN","IVM2174F",96,0)
 ; Update the SSN - if not successful, place the error in the ^XTMP global and quit
"RTN","IVM2174F",97,0)
 S FDA(408.13,IVMIEN_",",.09)=IVMSSN
"RTN","IVM2174F",98,0)
 S FDA(408.13,IVMIEN_",",.1)=IVMPSSNR
"RTN","IVM2174F",99,0)
 D FILE^DIE("K","FDA","IVMERRORS(1)")
"RTN","IVM2174F",100,0)
 I +$G(DIERR) D  Q
"RTN","IVM2174F",101,0)
 . S IVMERR=$G(IVMERRORS(1,"DIERR",1,"TEXT",1))
"RTN","IVM2174F",102,0)
 . S ^XTMP("DG53970P",IVMJOB,"SSNERR",IVMIEN)=IVMERR
"RTN","IVM2174F",103,0)
 ; update was successful, clean the IEN out of the ^XTMP global
"RTN","IVM2174F",104,0)
 K ^XTMP("DG53970P",IVMJOB,"SSN",IVMIENCNT),^XTMP("DG53970P",IVMJOB,"SSNERR",IVMIEN)
"RTN","IVM2174F",105,0)
 Q
"RTN","IVM2174F",106,0)
VALSSN(X,ERROR) ; Validate the SSN format
"RTN","IVM2174F",107,0)
 ; Input:  X - SSN to validate
"RTN","IVM2174F",108,0)
 ;         ERROR - pass by reference, returns error text if validation fails
"RTN","IVM2174F",109,0)
 ; Output: 1 if valid, 0 if invalid
"RTN","IVM2174F",110,0)
 N CNT
"RTN","IVM2174F",111,0)
 I X'?9N&(X'?3N1"-"2N1"-"4N) S ERROR="SSN must be either nine numbers, or be in the format nnn-nn-nnnn." Q 0
"RTN","IVM2174F",112,0)
 ; strip dashes
"RTN","IVM2174F",113,0)
 I X'?.AN F CNT=1:1:$L(X) I $E(X,CNT)?1P S X=$E(X,0,CNT-1)_$E(X,CNT+1,999),CNT=CNT-1
"RTN","IVM2174F",114,0)
 I X'?9N S ERROR="Invalid format for SSN." Q 0
"RTN","IVM2174F",115,0)
 I $E(X,1)=9 S ERROR="The SSN must not begin with 9." Q 0
"RTN","IVM2174F",116,0)
 I $E(X,1,3)="000" S ERROR="First three digits of SSN cannot be zeros." Q 0
"RTN","IVM2174F",117,0)
 Q 1
"RTN","IVM2174F",118,0)
GETIP(IVMPRI,IVMRELO,IVMDOB13,IVMSEX13) ; Return 408.13 Sex,DOB,Relationship via 408.12 record
"RTN","IVM2174F",119,0)
 ; Input: IVMPRI - IEN of 408.12 entry
"RTN","IVM2174F",120,0)
 ;        IVMRELO - Relationship from 408.12 piece 2 (pass by ref)
"RTN","IVM2174F",121,0)
 ;        IVMDOB13 - Date of Birth from 408.13 piece 3 (pass by ref)
"RTN","IVM2174F",122,0)
 ;        IVMSEX13 - Sex from 408.13 piece 2  (pass by ref)
"RTN","IVM2174F",123,0)
 N IVMPRN
"RTN","IVM2174F",124,0)
 S IVMPRN=$G(^DGPR(408.12,+IVMPRI,0))
"RTN","IVM2174F",125,0)
 S IVMRELO=$P(IVMPRN,"^",2)
"RTN","IVM2174F",126,0)
 I IVMPRN']"" Q
"RTN","IVM2174F",127,0)
 ; Quit if RELATIONSHIP is SELF
"RTN","IVM2174F",128,0)
 Q:IVMRELO=1
"RTN","IVM2174F",129,0)
 N IVMSEG13
"RTN","IVM2174F",130,0)
 ; ivmseg13 is 0 node of income person file 408.13
"RTN","IVM2174F",131,0)
 S IVMSEG13=$$DEM^DGMTU1(IVMPRI)
"RTN","IVM2174F",132,0)
 I IVMSEG13']"" Q   ; Can't find 408.13 record
"RTN","IVM2174F",133,0)
 ; get Sex and DOB from 408.13 file
"RTN","IVM2174F",134,0)
 S IVMSEX13=$P(IVMSEG13,"^",2),IVMDOB13=$P(IVMSEG13,"^",3)
"RTN","IVM2174F",135,0)
 Q
"RTN","IVM2174F",136,0)
CHKSSN(IEN) ; Check to see if SSN IN 408.13 is corrupted and clean up if it is
"RTN","IVM2174F",137,0)
 ; Input:  IEN - 408.13 ien
"RTN","IVM2174F",138,0)
 N IVMSSN
"RTN","IVM2174F",139,0)
 S IVMSSN=$P(^DGPR(408.13,IEN,0),"^",9)
"RTN","IVM2174F",140,0)
 I IVMSSN=" "!(IVMSSN=" P") D
"RTN","IVM2174F",141,0)
 . S $P(^DGPR(408.13,IEN,0),"^",9)=""
"RTN","IVM2174F",142,0)
 . ; we have to assume the xrefs are bad and need to be cleaned up
"RTN","IVM2174F",143,0)
 . D XREF(IEN)
"RTN","IVM2174F",144,0)
 Q
"RTN","IVM2174F",145,0)
XREF(IEN) ; clean "SSN", "BS" and "BS5" xrefs for this INCOME PERSON file (#408.13) record
"RTN","IVM2174F",146,0)
 N VAL,XREF
"RTN","IVM2174F",147,0)
 F XREF="SSN","BS","BS5" D
"RTN","IVM2174F",148,0)
 . S VAL=""
"RTN","IVM2174F",149,0)
 . F  S VAL=$O(^DGPR(408.13,XREF,VAL)) Q:VAL=""  D
"RTN","IVM2174F",150,0)
 . . I $D(^DGPR(408.13,XREF,VAL,IEN)) K ^DGPR(408.13,XREF,VAL,IEN)
"RTN","IVM2174F",151,0)
 Q
"RTN","IVM2174P")
0^^B19273328
"RTN","IVM2174P",1,0)
IVM2174P ;ALB/JAM - IVM*2.0*174 POST-INSTALL TO FIX DEPENDENT SSN IN (#408.13) FILE ;9/26/2018 3:21pm
"RTN","IVM2174P",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**174**;21-OCT-94;Build 15
"RTN","IVM2174P",3,0)
 ;
"RTN","IVM2174P",4,0)
 Q
"RTN","IVM2174P",5,0)
EP ; Entry Point
"RTN","IVM2174P",6,0)
 ; Extend the expiration date of the ^XTMP("DG53970P") global to +120 days
"RTN","IVM2174P",7,0)
 S $P(^XTMP("DG53970P",0),"^",1)=$$FMADD^XLFDT(DT,120)
"RTN","IVM2174P",8,0)
 ;
"RTN","IVM2174P",9,0)
 N ZTRTN,ZTDESC,ZTDTH,IVMTEXT,ZTIO,ZTSK
"RTN","IVM2174P",10,0)
 S IVMTEXT(1)="    >>> Tasking job to gather list of ICNs/DFNs in ^XTMP(""DG53970P"" global"
"RTN","IVM2174P",11,0)
 S IVMTEXT(2)="    that need an update of dependent SSNs..."
"RTN","IVM2174P",12,0)
 D BMES^XPDUTL(.IVMTEXT)
"RTN","IVM2174P",13,0)
 ; Quit if already installed
"RTN","IVM2174P",14,0)
 I $$PATCH^XPDUTL("IVM*2.0*174") D MES^XPDUTL("    Job does not need to be run since patch has been installed previously.") Q
"RTN","IVM2174P",15,0)
 ;queue off job
"RTN","IVM2174P",16,0)
 S ZTRTN="TASK^IVM2174P"
"RTN","IVM2174P",17,0)
 S ZTDESC="IVM*2.0*174 Gather list of ICNs/DFNs in ^XTMP(""DG53970P"") that need update of dependent SSNs."
"RTN","IVM2174P",18,0)
 S ZTDTH=$$NOW^XLFDT
"RTN","IVM2174P",19,0)
 S ZTIO=""
"RTN","IVM2174P",20,0)
 D ^%ZTLOAD
"RTN","IVM2174P",21,0)
 K IVMTEXT
"RTN","IVM2174P",22,0)
 S IVMTEXT(1)="    The task number is "_$G(ZTSK)_"."
"RTN","IVM2174P",23,0)
 D MES^XPDUTL(.IVMTEXT)
"RTN","IVM2174P",24,0)
 Q
"RTN","IVM2174P",25,0)
TASK ;Build and send MailMan message with list of patient records needing SSN updates
"RTN","IVM2174P",26,0)
 N JOB,DFN,IEN,PCNT,ICN,I,DCNT,IENCNT,VAL,XIEN,FOUND,LINE
"RTN","IVM2174P",27,0)
 S (PCNT,JOB,DCNT)=0
"RTN","IVM2174P",28,0)
 K ^TMP("IVM2174P")
"RTN","IVM2174P",29,0)
 S JOB=$O(^XTMP("DG53970P",JOB))
"RTN","IVM2174P",30,0)
 I JOB D GETDATA
"RTN","IVM2174P",31,0)
 D MSG
"RTN","IVM2174P",32,0)
 K ^TMP("IVM2174P")
"RTN","IVM2174P",33,0)
 Q
"RTN","IVM2174P",34,0)
GETDATA ; loop over DFNs in ^XTMP("DG53970P",JOB,"DFN") - store all data in ^TMP global 
"RTN","IVM2174P",35,0)
 S DFN=0
"RTN","IVM2174P",36,0)
 F I=1:1 S DFN=$O(^XTMP("DG53970P",JOB,"DFN",DFN)) Q:'DFN  D
"RTN","IVM2174P",37,0)
 . S PCNT=PCNT+1
"RTN","IVM2174P",38,0)
 . ; get the ICN and store the ICN/DFN
"RTN","IVM2174P",39,0)
 . S ICN=$$GETICN^MPIF001(DFN)
"RTN","IVM2174P",40,0)
 . S ^TMP("IVM2174P",$J,"DFN",I)=ICN_"/"_DFN
"RTN","IVM2174P",41,0)
 . ; for this DFN, loop over the associated IENs in the 408.12 file "B" index
"RTN","IVM2174P",42,0)
 . S IEN="" F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:'IEN  D
"RTN","IVM2174P",43,0)
 . . ; get the related 408.13 IEN
"RTN","IVM2174P",44,0)
 . . S VAL=$P(^DGPR(408.12,IEN,0),"^",3)
"RTN","IVM2174P",45,0)
 . . I $P(VAL,";",2)'="DGPR(408.13," Q
"RTN","IVM2174P",46,0)
 . . S XIEN=$P(VAL,";",1)
"RTN","IVM2174P",47,0)
 . . ; If this IEN is in ^XTMP("DG53970P",JOB,"SSN",count)=IEN, it still needs SSN update - so store the info
"RTN","IVM2174P",48,0)
 . . ;  If there is an error logged when the SSN was unsuccessfully updated, include that error in ^TMP global
"RTN","IVM2174P",49,0)
 . . S FOUND=0
"RTN","IVM2174P",50,0)
 . . S IENCNT=0 F  S IENCNT=$O(^XTMP("DG53970P",JOB,"SSN",IENCNT)) Q:'IENCNT  D  Q:FOUND
"RTN","IVM2174P",51,0)
 . . . I ^XTMP("DG53970P",JOB,"SSN",IENCNT)=XIEN S DCNT=DCNT+1,FOUND=1,^TMP("IVM2174P",$J,"DFN",I,XIEN)=$G(^XTMP("DG53970P",JOB,"SSNERR",XIEN))
"RTN","IVM2174P",52,0)
 Q
"RTN","IVM2174P",53,0)
MSG ; All data is collected in ^TMP("IVM2174P") - put together email message
"RTN","IVM2174P",54,0)
 N XMSUB,XMDUZ,XMY,XMTEXT,MSG,LN,IVMSITE,ERRMSG
"RTN","IVM2174P",55,0)
 S IVMSITE=$$SITE^VASITE
"RTN","IVM2174P",56,0)
 S XMY("G.IVM20174MONITOR@FORUM.VA.GOV")=""
"RTN","IVM2174P",57,0)
 S XMY(DUZ)=""
"RTN","IVM2174P",58,0)
 S XMTEXT="MSG("
"RTN","IVM2174P",59,0)
 S XMDUZ=.5,XMSUB="IVM*2.0*174-#"_$P(IVMSITE,"^",3)_"-VHA/ES CLEANUP OF SSNs IN (#408.13) FILE"
"RTN","IVM2174P",60,0)
 S MSG($$LN)=""
"RTN","IVM2174P",61,0)
 S MSG($$LN)="The job completed to check if patient records still exist in the"
"RTN","IVM2174P",62,0)
 S MSG($$LN)="^XTMP(""DG53970P"" global and require a push of corrected SSN data from ES"
"RTN","IVM2174P",63,0)
 S MSG($$LN)="via an HL7(ORU-Z10) message."
"RTN","IVM2174P",64,0)
 S MSG($$LN)=""
"RTN","IVM2174P",65,0)
 S MSG($$LN)="Job Results:"
"RTN","IVM2174P",66,0)
 S MSG($$LN)="------------"
"RTN","IVM2174P",67,0)
 S MSG($$LN)=" Facility Name: "_$P(IVMSITE,"^",2)
"RTN","IVM2174P",68,0)
 S MSG($$LN)="Station Number: "_$P(IVMSITE,"^",3)
"RTN","IVM2174P",69,0)
 S MSG($$LN)=""
"RTN","IVM2174P",70,0)
 S MSG($$LN)="Total patients (ICN/DFN) with dependents not updated: "_PCNT
"RTN","IVM2174P",71,0)
 S MSG($$LN)="                  Total dependent (IENs) not updated: "_DCNT
"RTN","IVM2174P",72,0)
 F I=1:1:PCNT D
"RTN","IVM2174P",73,0)
 . SET DFN=^TMP("IVM2174P",$J,"DFN",I)
"RTN","IVM2174P",74,0)
 . S MSG($$LN)=""
"RTN","IVM2174P",75,0)
 . S MSG($$LN)="Patient ICN/DFN: "_DFN
"RTN","IVM2174P",76,0)
 . ; loop over IENs - include the error message if there is one.
"RTN","IVM2174P",77,0)
 . S IEN="",LINE=0 F  S IEN=$O(^TMP("IVM2174P",$J,"DFN",I,IEN)) Q:'IEN  D
"RTN","IVM2174P",78,0)
 . . S ERRMSG=^TMP("IVM2174P",$J,"DFN",I,IEN)
"RTN","IVM2174P",79,0)
 . . I ERRMSG'="" S ERRMSG="  ("_ERRMSG_")"
"RTN","IVM2174P",80,0)
 . . I LINE=0 S MSG($$LN)=" Dependent IENs: "_IEN_ERRMSG,LINE=1
"RTN","IVM2174P",81,0)
 . . E  S MSG($$LN)="                 "_IEN_ERRMSG
"RTN","IVM2174P",82,0)
 ; send mail message with results
"RTN","IVM2174P",83,0)
 D ^XMD
"RTN","IVM2174P",84,0)
 ; if we have data in the ^XTMP global, requeue this job to run in 2 days
"RTN","IVM2174P",85,0)
 I PCNT D
"RTN","IVM2174P",86,0)
 . N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTSK
"RTN","IVM2174P",87,0)
 . S ZTRTN="TASK^IVM2174P"
"RTN","IVM2174P",88,0)
 . S ZTDESC="IVM*2.0*174 Gather list of ICNs/DFNs in ^XTMP(""DG53970P"") that need update of dependent SSNs."
"RTN","IVM2174P",89,0)
 . S ZTDTH=$$SCH^XLFDT("2D",$$NOW^XLFDT)
"RTN","IVM2174P",90,0)
 . S ZTIO=""
"RTN","IVM2174P",91,0)
 . D ^%ZTLOAD
"RTN","IVM2174P",92,0)
 Q
"RTN","IVM2174P",93,0)
LN() ;Increment line counter
"RTN","IVM2174P",94,0)
 S LN=$G(LN)+1
"RTN","IVM2174P",95,0)
 Q LN
"RTN","IVMCM2")
0^3^B32817951
"RTN","IVMCM2",1,0)
IVMCM2 ;ALB/SEK,CKN,TDM,JAM - ADD NEW DCD DEPENDENT TO INCOME PERSON FILE ;3/18/10 2:07pm
"RTN","IVMCM2",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,105,115,139,121,174**;21-OCT-94;Build 15
"RTN","IVMCM2",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IVMCM2",4,0)
 ;
"RTN","IVMCM2",5,0)
EN ; this routine will add entries to INCOME PERSON file (408.13) for
"RTN","IVMCM2",6,0)
 ; new dependents (spouse/children).  if DCD demo data (name, dob, 
"RTN","IVMCM2",7,0)
 ; ssn, sex) is different than VAMC data, 408.13 will be changed to
"RTN","IVMCM2",8,0)
 ; contain the DCD data.  the MEANS TEST CHANGES file (408.41) will
"RTN","IVMCM2",9,0)
 ; contain both values.
"RTN","IVMCM2",10,0)
 ;
"RTN","IVMCM2",11,0)
INPIEN ; get INCOME PERSON IEN
"RTN","IVMCM2",12,0)
 ; if PATIENT RELATION IEN not in ZDP
"RTN","IVMCM2",13,0)
 ;    add dependent to INCOME PERSON file if dependent not found
"RTN","IVMCM2",14,0)
 ;    dependent found if dob, sex, & relationship (408.12) match
"RTN","IVMCM2",15,0)
 ;
"RTN","IVMCM2",16,0)
 ;     Input    DFN     IEN of file #2
"RTN","IVMCM2",17,0)
 ;              IVMSEG  dependent's ZDP segment
"RTN","IVMCM2",18,0)
 ;
"RTN","IVMCM2",19,0)
 ; ivmflg1=1 have 408.13 ien when exit (found or added)
"RTN","IVMCM2",20,0)
 ; ivmflg2=1 dep record must be added to 408.12
"RTN","IVMCM2",21,0)
 ; ivmflg5=1 spouse ZDP incomplete(not dependent) - always spouse records
"RTN","IVMCM2",22,0)
 N IVMSPFLG,IVMSPMNM
"RTN","IVMCM2",23,0)
 N IVMZDP13,IVMSADL1,IVMSADL2,IVMSADL3,IVMSCITY,IVMSST,IVMSZIP,IVMSALU,IVMSTELE
"RTN","IVMCM2",24,0)
 N IVMAL113,IVMAL213,IVMAL313,IVMCTY13,IVMST13,IVMZIP13,IVMTEL13,IVMALU13
"RTN","IVMCM2",25,0)
 S (IVMFLG1,IVMFLG2,IVMFLG5)=0
"RTN","IVMCM2",26,0)
 S IVMSPFLG=1 ; VOA
"RTN","IVMCM2",27,0)
 S DGPRI=$P(IVMSEG,"^",7) ; ien of patient relation file
"RTN","IVMCM2",28,0)
 ;
"RTN","IVMCM2",29,0)
 S IVMNM=$$FMNAME^HLFNC($P(IVMSEG,"^",2)),IVMSEX=$P(IVMSEG,"^",3),IVMDOB=$$FMDATE^HLFNC($P(IVMSEG,"^",4)),IVMSSN=$P(IVMSEG,"^",5)
"RTN","IVMCM2",30,0)
 I IVMSSN=" " S IVMFERR="" Q  ; IVM*2.0*174 ;jam; Set error variable IVMFERR so the ZDP will not be processed if IVMSSN=blank
"RTN","IVMCM2",31,0)
 S IVMPSSNR=$P(IVMSEG,"^",10) ;Pseudo SSN Reason IVM*2*105
"RTN","IVMCM2",32,0)
 ;if there is a valid Pseudo SSN Reason, then append a "P" to the end
"RTN","IVMCM2",33,0)
 ;of the SSN so that it cam be recognized on VistA as a pseudo - IVM*2*115
"RTN","IVMCM2",34,0)
 S IVMSSN=$G(IVMSSN)_$S($G(IVMPSSNR)="N":"P",$G(IVMPSSNR)="R":"P",$G(IVMPSSNR)="S":"P",1:"")
"RTN","IVMCM2",35,0)
 S IVMEFFDT=$$FMDATE^HLFNC($P(IVMSEG,"^",9)),IVMRELN=$P(IVMSEG,"^",6)
"RTN","IVMCM2",36,0)
 S IVMSPMNM=$P(IVMSEG,"^",8) ;Spouse Maiden Name IVM*2*105
"RTN","IVMCM2",37,0)
 ;If not valid value, set it to null
"RTN","IVMCM2",38,0)
 I IVMPSSNR]"",IVMPSSNR'="R",IVMPSSNR'="S",IVMPSSNR'="N" S IVMPSSNR=""
"RTN","IVMCM2",39,0)
 S IVMSSNVS=$P(IVMSEG,"^",12) ;SSN Verification Status IVM*2*115
"RTN","IVMCM2",40,0)
 ;If not valid value, set it to null
"RTN","IVMCM2",41,0)
 I IVMSSNVS]"",IVMSSNVS'=2,IVMSSNVS'=4 S IVMSSNVS=""  ;IVM*2*115
"RTN","IVMCM2",42,0)
 ;
"RTN","IVMCM2",43,0)
 I IVMSPCHV="S"&((IVMNM']"")!(IVMSEX']"")!(IVMDOB']"")) S IVMFLG5=1 Q
"RTN","IVMCM2",44,0)
 ;
"RTN","IVMCM2",45,0)
 ; VOA Spouse additional info
"RTN","IVMCM2",46,0)
 S IVMZDP13=$P(IVMSEG,"^",13)
"RTN","IVMCM2",47,0)
 S IVMSADL1=$P(IVMZDP13,$E(HLECH,1),1) ; Addr Line 1 - 13.1
"RTN","IVMCM2",48,0)
 S IVMSADL2=$P(IVMZDP13,$E(HLECH,1),2) ; Addr Line 2 - 13.2
"RTN","IVMCM2",49,0)
 S IVMSADL3=$P(IVMZDP13,$E(HLECH,1),8) ; Addr Line 3 - 13.8
"RTN","IVMCM2",50,0)
 S IVMSCITY=$P(IVMZDP13,$E(HLECH,1),3) ; City - 13.3
"RTN","IVMCM2",51,0)
 S IVMSST=$P(IVMZDP13,$E(HLECH,1),4) ; State - 13.4
"RTN","IVMCM2",52,0)
 S IVMSZIP=$P(IVMZDP13,$E(HLECH,1),5) ; Zip - 13.5
"RTN","IVMCM2",53,0)
 S IVMSALU=$P(IVMZDP13,$E(HLECH,1),12)
"RTN","IVMCM2",54,0)
 S IVMSALU=$P(IVMSALU,$E(HLECH,2),1) ; Addr Last DT/TM Upt - 13.12.1
"RTN","IVMCM2",55,0)
 S IVMSALU=$$FMDATE^HLFNC(IVMSALU) ; Convert DT/TM from HL7 to FM
"RTN","IVMCM2",56,0)
 S IVMSTELE=$P(IVMSEG,"^",14)
"RTN","IVMCM2",57,0)
 S IVMSTELE=$P(IVMSTELE,$E(HLECH,1),1) ; Telephone - 14.1
"RTN","IVMCM2",58,0)
 ;
"RTN","IVMCM2",59,0)
 I 'DGPRI G NOIEN
"RTN","IVMCM2",60,0)
 ;
"RTN","IVMCM2",61,0)
 ; if ien of patient relation file (dgpri) transmitted by IVM Center
"RTN","IVMCM2",62,0)
 ; and found in 408.12, get ien of income person.  if DCD demo data
"RTN","IVMCM2",63,0)
 ; is different, change in 408.13 & add to 408.41
"RTN","IVMCM2",64,0)
 ; ivmprn is 0 node of 408.12
"RTN","IVMCM2",65,0)
 ; dgipi is ien of 408.13
"RTN","IVMCM2",66,0)
 S IVMPRN=$G(^DGPR(408.12,+DGPRI,0))
"RTN","IVMCM2",67,0)
 I IVMPRN]"" D GETIPI Q:$D(IVMFERR)  S DGIPI=+$P($P(IVMPRN,"^",3),";"),IVMFLG1=1,IVMRELO=$P(IVMPRN,"^",2) D AUDITP^IVMCM9,AUDIT^IVMCM9 Q
"RTN","IVMCM2",68,0)
 ;
"RTN","IVMCM2",69,0)
NOIEN ; ien of patient relation file is not transmitted or transmitted and
"RTN","IVMCM2",70,0)
 ; not found
"RTN","IVMCM2",71,0)
 ; check if dependent in income person file
"RTN","IVMCM2",72,0)
 ; if dependent not found in 408.13, setup ivmstr =  0 node of 408.13
"RTN","IVMCM2",73,0)
 ; subscript of array IVMAR is ien of 408.12 transmitted by IVM Center or
"RTN","IVMCM2",74,0)
 ; created or found by upload.
"RTN","IVMCM2",75,0)
 ;
"RTN","IVMCM2",76,0)
 S DGPRI=0 F  S DGPRI=$O(^DGPR(408.12,"B",DFN,DGPRI)) Q:'DGPRI  D  Q:IVMFLG1!($D(IVMFERR))
"RTN","IVMCM2",77,0)
 .D GETIP
"RTN","IVMCM2",78,0)
 .Q:$D(IVMFERR)!($D(IVMAR(DGPRI)))!(IVMRELO=1)
"RTN","IVMCM2",79,0)
 .I IVMSEX=IVMSEX13&(IVMDOB=IVMDOB13)&(IVMRELN=IVMRELO) S IVMFLG1=1,IVMAR(DGPRI)=""
"RTN","IVMCM2",80,0)
 .Q
"RTN","IVMCM2",81,0)
 ;
"RTN","IVMCM2",82,0)
 ; found dependent in 408.13. if demo data different, change in 408.13
"RTN","IVMCM2",83,0)
 ; and add in 408.41
"RTN","IVMCM2",84,0)
 Q:$D(IVMFERR)
"RTN","IVMCM2",85,0)
 I IVMFLG1 S DGIPI=+$P($P(IVMPRN,"^",3),";") D AUDITP^IVMCM9,AUDIT1^IVMCM9 Q
"RTN","IVMCM2",86,0)
 ;
"RTN","IVMCM2",87,0)
 ; dependent not found. add record to 408.13
"RTN","IVMCM2",88,0)
 I 'IVMFLG1 D
"RTN","IVMCM2",89,0)
 .S $P(IVMSTR,"^")=IVMNM,$P(IVMSTR,"^",2)=IVMSEX,$P(IVMSTR,"^",3)=IVMDOB,$P(IVMSTR,"^",9)=IVMSSN,$P(IVMSTR,"^",10)=IVMPSSNR,$P(IVMSTR,"^",11)=IVMSSNVS
"RTN","IVMCM2",90,0)
 .S $P(IVMSTR1,"^")=IVMSPMNM
"RTN","IVMCM2",91,0)
 .S $P(IVMSTR1,"^",2)=IVMSADL1,$P(IVMSTR1,"^",3)=IVMSADL2,$P(IVMSTR1,"^",4)=IVMSADL3
"RTN","IVMCM2",92,0)
 .S $P(IVMSTR1,"^",5)=IVMSCITY,$P(IVMSTR1,"^",6)=IVMSST,$P(IVMSTR1,"^",7)=IVMSZIP,$P(IVMSTR1,"^",8)=IVMSTELE
"RTN","IVMCM2",93,0)
 .S $P(IVMSTR1,"^",9)=IVMSALU
"RTN","IVMCM2",94,0)
 .D ADDDEP
"RTN","IVMCM2",95,0)
 Q
"RTN","IVMCM2",96,0)
 ;
"RTN","IVMCM2",97,0)
ADDDEP ; add dependent to 408.13 file
"RTN","IVMCM2",98,0)
 ; In - DFN=IEN of File #2
"RTN","IVMCM2",99,0)
 ;      DGRP0ND=0 node of 408.13
"RTN","IVMCM2",100,0)
 ;      DGRP1ND=1 node of 408.13
"RTN","IVMCM2",101,0)
 ;Out - DGIPI=408.13 IEN
"RTN","IVMCM2",102,0)
 ;
"RTN","IVMCM2",103,0)
 N X,Y
"RTN","IVMCM2",104,0)
 S DGRP0ND=IVMSTR
"RTN","IVMCM2",105,0)
 S DGRP1ND=IVMSTR1
"RTN","IVMCM2",106,0)
 K DINUM
"RTN","IVMCM2",107,0)
 N CNT,I S CNT=0
"RTN","IVMCM2",108,0)
 F I=2,3,9 D
"RTN","IVMCM2",109,0)
 .S CNT=CNT+1,$P(DIC("DR"),";",CNT)=".0"_I_"////"_$P(DGRP0ND,U,I)
"RTN","IVMCM2",110,0)
 F I=10,11 D
"RTN","IVMCM2",111,0)
 .S CNT=CNT+1,$P(DIC("DR"),";",CNT)="."_I_"////"_$P(DGRP0ND,U,I)
"RTN","IVMCM2",112,0)
 F I=1:1:8 S DIC("DR")=DIC("DR")_";1."_I_"////"_$P(DGRP1ND,U,I)
"RTN","IVMCM2",113,0)
 S (DIK,DIC)="^DGPR(408.13,",DIC(0)="L",DLAYGO=408.13,X=$P(DGRP0ND,"^") K DD,DO D FILE^DICN S (DGIPI,DA)=+Y K DLAYGO
"RTN","IVMCM2",114,0)
 ;
"RTN","IVMCM2",115,0)
 ; if can't create stub notify site & IVM Center
"RTN","IVMCM2",116,0)
 I DGIPI'>0 D  Q
"RTN","IVMCM2",117,0)
 .S (IVMTEXT(6))="Can't create stub for file 408.13"
"RTN","IVMCM2",118,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",119,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",120,0)
 .S IVMFERR=""
"RTN","IVMCM2",121,0)
 S IVMFLG2=1 ; added dep to 408.13 must add to 408.12
"RTN","IVMCM2",122,0)
 K DIK,DIC
"RTN","IVMCM2",123,0)
 Q
"RTN","IVMCM2",124,0)
 ;
"RTN","IVMCM2",125,0)
 ;
"RTN","IVMCM2",126,0)
GETIP ; if can't find 408.12 record notify site & IVM Center
"RTN","IVMCM2",127,0)
 S IVMPRN=$G(^DGPR(408.12,+DGPRI,0))
"RTN","IVMCM2",128,0)
 S IVMRELO=$P(IVMPRN,"^",2)
"RTN","IVMCM2",129,0)
 I IVMPRN']"" D  Q
"RTN","IVMCM2",130,0)
 .S (IVMTEXT(6))="Can't find 408.12 record "_DGPRI
"RTN","IVMCM2",131,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",132,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",133,0)
 .S IVMFERR=""
"RTN","IVMCM2",134,0)
 Q:IVMRELO=1
"RTN","IVMCM2",135,0)
 ;
"RTN","IVMCM2",136,0)
GETIPI ; ivmseg13 is 0 node of income person file
"RTN","IVMCM2",137,0)
 ; get demo data in 408.13 & 408.12
"RTN","IVMCM2",138,0)
 S IVMSEG13=$$DEM^DGMTU1(DGPRI)
"RTN","IVMCM2",139,0)
 S IVMSG131=$$DEM1^DGMTU1(DGPRI) ;Get node 1
"RTN","IVMCM2",140,0)
 I IVMSEG13']"" D  Q
"RTN","IVMCM2",141,0)
 .S (IVMTEXT(6))="Can't find 408.13 record"
"RTN","IVMCM2",142,0)
 .D PROB^IVMCMC(IVMTEXT(6))
"RTN","IVMCM2",143,0)
 .D ERRBULL^IVMPREC7,MAIL^IVMUFNC("DGMT MT/CT UPLOAD ALERTS")
"RTN","IVMCM2",144,0)
 .S IVMFERR=""
"RTN","IVMCM2",145,0)
 S IVMSEX13=$P(IVMSEG13,"^",2),IVMDOB13=$P(IVMSEG13,"^",3),IVMSSN13=$P(IVMSEG13,"^",9),IVMPSR13=$P(IVMSEG13,"^",10),IVMSVS13=$P(IVMSEG13,"^",11)
"RTN","IVMCM2",146,0)
 S IVMSMN13=$P($G(IVMSG131),"^")
"RTN","IVMCM2",147,0)
 S IVMNM13=$P(IVMSEG13,"^")
"RTN","IVMCM2",148,0)
 S IVMAL113=$P($G(IVMSG131),"^",2),IVMAL213=$P($G(IVMSG131),"^",3),IVMAL313=$P($G(IVMSG131),"^",4)
"RTN","IVMCM2",149,0)
 S IVMCTY13=$P($G(IVMSG131),"^",5),IVMST13=$P($G(IVMSG131),"^",6),IVMZIP13=$P($G(IVMSG131),"^",7)
"RTN","IVMCM2",150,0)
 S IVMTEL13=$P($G(IVMSG131),"^",8),IVMALU13=$P($G(IVMSG131),"^",9)
"RTN","IVMCM2",151,0)
 Q
"RTN","IVMCMC")
0^1^B43788420
"RTN","IVMCMC",1,0)
IVMCMC ;ALB/SEK,BRM,GN,TDM,JAM - CHECK INCOME TEST TRANSMISSION SEGMENTS ;8/15/08 10:20am
"RTN","IVMCMC",2,0)
 ;;2.0;INCOME VERIFICATION MATCH;**17,34,49,51,90,115,174**;21-OCT-94;Build 15
"RTN","IVMCMC",3,0)
 ;
"RTN","IVMCMC",4,0)
 ;IVM*2*90 - stop upload of LTC type 4 test when staus code not valid
"RTN","IVMCMC",5,0)
 ;
"RTN","IVMCMC",6,0)
EN ; Check segment structure of Income Test (Z10) transmission.
"RTN","IVMCMC",7,0)
 ;  Variable input:
"RTN","IVMCMC",8,0)
 ;      IVMDA  --  pointer to an incoming message line in file #772
"RTN","IVMCMC",9,0)
 ;     IVMORF  --  [optional]: set to 1 if Z10 is an ORF message
"RTN","IVMCMC",10,0)
 ;     IVMSEG  --  the MSH segment string
"RTN","IVMCMC",11,0)
 ; 
"RTN","IVMCMC",12,0)
 ;     plus the usual HL7 variables: HLDA, HLFS, HLQ, HLECH
"RTN","IVMCMC",13,0)
 ; 
"RTN","IVMCMC",14,0)
 ;  Variable output:
"RTN","IVMCMC",15,0)
 ;        DFN  --  pointer to the patient in file #2
"RTN","IVMCMC",16,0)
 ;       DGLY  --  Income Year
"RTN","IVMCMC",17,0)
 ;    IVMFLGC  --  Number of Dependent Children
"RTN","IVMCMC",18,0)
 ;    IVMMCI   --  HL7 message control id of query sent to IVM Center
"RTN","IVMCMC",19,0)
 ; 
"RTN","IVMCMC",20,0)
 ;    and the global array ^TMP($J,"IVMCM" which holds the message.
"RTN","IVMCMC",21,0)
 ;
"RTN","IVMCMC",22,0)
 N ERRMSG,DOBP,SEXP,X,Y,ZDPIFLG,TMPARY,PID3ARY,ICN
"RTN","IVMCMC",23,0)
 ;
"RTN","IVMCMC",24,0)
 ; - message control id from MSH segment
"RTN","IVMCMC",25,0)
 S MSGID=$P(IVMSEG,HLFS,10)
"RTN","IVMCMC",26,0)
 ;
"RTN","IVMCMC",27,0)
 ; - if query response (ORF), do additional edit checks
"RTN","IVMCMC",28,0)
 I $G(IVMORF) D ADDL I $D(HLERR) G ENQ
"RTN","IVMCMC",29,0)
 ;
"RTN","IVMCMC",30,0)
 ; - check the PID segment and get a match on patient
"RTN","IVMCMC",31,0)
 D GET("PIDV") I IVMSEG1'="PID" D PROB("Missing PID segment") G ENQ
"RTN","IVMCMC",32,0)
 ;S DOBP=$P(IVMSEG,HLFS,8),SEXP=$P(IVMSEG,HLFS,9)
"RTN","IVMCMC",33,0)
 S DOBP=$G(^TMP($J,"IVMCM","PIDV",7)),SEXP=$G(^TMP($J,"IVMCM","PIDV",8))
"RTN","IVMCMC",34,0)
 ;S SSNP=$G(^TMP($J,"IVMCM","PIDV",19))
"RTN","IVMCMC",35,0)
 I SEXP'="F"&(SEXP'="M") D PROB("Incorrect value for Sex") G ENQ
"RTN","IVMCMC",36,0)
 S X=$$FMDATE^HLFNC(DOBP),%DT=X D ^%DT I Y<0 D PROB("Invalid Date of Birth") G ENQ
"RTN","IVMCMC",37,0)
 ;S DFN=$$LOOKUP^IVMUFNC(SSNP,Y,SEXP,.ERRMSG)
"RTN","IVMCMC",38,0)
 ;I 'DFN D PROB(ERRMSG) G ENQ
"RTN","IVMCMC",39,0)
 M TMPARY(3)=^TMP($J,"IVMCM","PIDV",3) D PARSPID3^IVMUFNC(.TMPARY,.PID3ARY)
"RTN","IVMCMC",40,0)
 S DFN=$G(PID3ARY("PI")),ICN=$G(PID3ARY("NI"))
"RTN","IVMCMC",41,0)
 I '$$MATCH^IVMUFNC(DFN,ICN,"","","I",.ERRMSG) D PROB(ERRMSG) G ENQ
"RTN","IVMCMC",42,0)
 K TMPARY,PID3ARY
"RTN","IVMCMC",43,0)
 ;
"RTN","IVMCMC",44,0)
 ; - check for veteran's ZIC and ZIR segments
"RTN","IVMCMC",45,0)
 D GET("ZICV") I IVMSEG1'="ZIC" D PROB("Missing veteran's ZIC segment") G ENQ
"RTN","IVMCMC",46,0)
 S DGLY=$$FMDATE^HLFNC($P(IVMSEG,"^",3)) ; income year
"RTN","IVMCMC",47,0)
 I 'DGLY D PROB("Missing veteran's Income Year") G ENQ
"RTN","IVMCMC",48,0)
 D GET("ZIRV") I IVMSEG1'="ZIR" D PROB("Missing veteran's ZIR segment") G ENQ
"RTN","IVMCMC",49,0)
 ;
"RTN","IVMCMC",50,0)
 ; - check for spouse's ZDP, ZIC, ZIR segments
"RTN","IVMCMC",51,0)
 D GET("ZDPS") I IVMSEG1'="ZDP" D PROB("Missing spouse's ZDP segment") G ENQ
"RTN","IVMCMC",52,0)
 D GET("ZICS") I IVMSEG1'="ZIC" D PROB("Missing spouse's ZIC segment") G ENQ
"RTN","IVMCMC",53,0)
 D GET("ZIRS") I IVMSEG1'="ZIR" D PROB("Missing spouse's ZIR segment") G ENQ
"RTN","IVMCMC",54,0)
 ;
"RTN","IVMCMC",55,0)
 ; - check for dependent children's ZDP, ZIC, ZIR segments and ZMT segment
"RTN","IVMCMC",56,0)
 S (IVMFLGC,ZDPIFLG)=0
"RTN","IVMCMC",57,0)
 F IVMNBR=1:1 D  I $D(HLERR)!(IVMSEG1="ZMT") Q
"RTN","IVMCMC",58,0)
 .D GET("ZDPC",IVMNBR) I IVMSEG1'="ZDP",IVMSEG1'="ZMT" D PROB("Missing child's ZDP segment or ZMT segment") Q
"RTN","IVMCMC",59,0)
 .I IVMSEG1="ZMT" Q
"RTN","IVMCMC",60,0)
 .I $P(IVMSEG,"^",2)=""!($P(IVMSEG,"^",3)="")!($P(IVMSEG,"^",4)="") D PROB("Missing child data from ZDP segment") Q
"RTN","IVMCMC",61,0)
 .Q:ZDPIFLG  ;No ZIC,ZIR segs or # of children for inactive dependents
"RTN","IVMCMC",62,0)
 .D GET("ZICC",IVMNBR) I IVMSEG1'="ZIC" D PROB("Missing child's ZIC segment") Q
"RTN","IVMCMC",63,0)
 .D GET("ZIRC",IVMNBR) I IVMSEG1'="ZIR" D PROB("Missing child's ZIR segment") Q
"RTN","IVMCMC",64,0)
 .S IVMFLGC=IVMFLGC+1 ; # of children
"RTN","IVMCMC",65,0)
 ;
"RTN","IVMCMC",66,0)
 I $D(HLERR) G ENQ
"RTN","IVMCMC",67,0)
 ;
"RTN","IVMCMC",68,0)
 ; Patch IVM*2.0*174 - jam - For ORU-Z10, process SSN for IENs in ^XTMP("DG53970P")
"RTN","IVMCMC",69,0)
 ; -----------------
"RTN","IVMCMC",70,0)
 ; Do this for ORU message only
"RTN","IVMCMC",71,0)
 ; The caller routine ^EASCM sets IVMSSNFLAG=0, quit if this var gets set to 1
"RTN","IVMCMC",72,0)
 I $G(IVMORF)'=1 D  I $G(IVMSSNFLAG)=1 G ENQ
"RTN","IVMCMC",73,0)
 . ; Check if there is a job number in ^XTMP("DG53970P") 
"RTN","IVMCMC",74,0)
 . N IVMJOB
"RTN","IVMCMC",75,0)
 . S IVMJOB=0
"RTN","IVMCMC",76,0)
 . S IVMJOB=$O(^XTMP("DG53970P",IVMJOB))
"RTN","IVMCMC",77,0)
 . I 'IVMJOB Q
"RTN","IVMCMC",78,0)
 . ; If this DFN is in the ^XTMP global, process the SSNs in the ZDP, and set IVMSSNFLAG=1 to have caller quit further processing
"RTN","IVMCMC",79,0)
 . I $D(^XTMP("DG53970P",IVMJOB,"DFN",DFN)) D IVMFSSN^IVM2174F(DFN,IVMJOB) S IVMSSNFLAG=1
"RTN","IVMCMC",80,0)
 ; ------------------
"RTN","IVMCMC",81,0)
 ; - check for remaining ZMT and ZBT segments
"RTN","IVMCMC",82,0)
 D GET("ZMT2") I IVMSEG1'="ZMT" D PROB("Missing Copay Test ZMT segment") G ENQ
"RTN","IVMCMC",83,0)
 ;
"RTN","IVMCMC",84,0)
 ; ** added ZMT4 lines for LTC phase II (IVM*2*49)
"RTN","IVMCMC",85,0)
 ; uncomment after all sites have installed to enable consistency chk
"RTN","IVMCMC",86,0)
 D GET("ZMT4") I IVMSEG1'="ZMT" D PROB("Missing LTC Test ZMT segment") G ENQ
"RTN","IVMCMC",87,0)
 ;
"RTN","IVMCMC",88,0)
 ; remove next line after all sites have installed
"RTN","IVMCMC",89,0)
 ;D GET("ZMT4") I IVMSEG1'="ZMT" K ^TMP($J,"IVMCM","ZMT4") S IVMDA=IVMDA-1
"RTN","IVMCMC",90,0)
 ;
"RTN","IVMCMC",91,0)
 D GET("ZBT") I IVMSEG1'="ZBT" D PROB("Missing Beneficiary Travel ZBT segment") G ENQ
"RTN","IVMCMC",92,0)
 ;
"RTN","IVMCMC",93,0)
ENQ I IVMSEG1="MSH" S IVMDA=IVMDA-1,HLERR="",IVMTYPE=5
"RTN","IVMCMC",94,0)
 K IVMSEG1,IVMNBR
"RTN","IVMCMC",95,0)
 Q
"RTN","IVMCMC",96,0)
 ;
"RTN","IVMCMC",97,0)
 ;
"RTN","IVMCMC",98,0)
GET(SEG,NUM) ; Get the next HL7 segment.
"RTN","IVMCMC",99,0)
 ;  Formal input:
"RTN","IVMCMC",100,0)
 ;        SEG  --  String with which to build ^TMP($J,"IVMCM"
"RTN","IVMCMC",101,0)
 ;        NUM  --  Number to index child dependent strings [optional]
"RTN","IVMCMC",102,0)
 ;  Required variable input:
"RTN","IVMCMC",103,0)
 ;       HLDA  --  Pointer to the incoming message in file #772
"RTN","IVMCMC",104,0)
 ;      IVMDA  --  Pointer to the next message line within file #772
"RTN","IVMCMC",105,0)
 N NEXTSEG,NOPID,PIDCNTR,PIDSTR,SEQ
"RTN","IVMCMC",106,0)
 S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA)),IVMSEG=$G(^(+IVMDA,0))
"RTN","IVMCMC",107,0)
 S NEXTSEG=$E($G(^TMP($J,IVMRTN,IVMDA+1,0)),1,3)
"RTN","IVMCMC",108,0)
 S IVMSEG1=$E(IVMSEG,1,3)
"RTN","IVMCMC",109,0)
 I $G(SEG)="" G GETQ
"RTN","IVMCMC",110,0)
 I IVMSEG1="ZIR" S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS,15)  ;Strip ""
"RTN","IVMCMC",111,0)
 I IVMSEG1="ZDP" S IVMSEG=$$CLEARF^IVMPRECA(IVMSEG,HLFS)     ;Strip ""
"RTN","IVMCMC",112,0)
 I $G(NUM),IVMSEG1'="ZMT" D  G GETQ
"RTN","IVMCMC",113,0)
 .I IVMSEG1="ZDP",$P(IVMSEG,HLFS,12)="",NEXTSEG'="ZIC" D PROB("Missing Child ZIC segment OR Inactive ZDP missing Inactivation Date") Q
"RTN","IVMCMC",114,0)
 .I IVMSEG1="ZDP",$P(IVMSEG,HLFS,12)'="" D
"RTN","IVMCMC",115,0)
 ..I NEXTSEG="ZIC" D PROB("ZIC segment following Inactive ZDP segment") Q
"RTN","IVMCMC",116,0)
 ..S ZDPIFLG=1
"RTN","IVMCMC",117,0)
 ..S SEG=$S($P(IVMSEG,HLFS,7)=2:"ZDPIS",1:"ZDPIC")
"RTN","IVMCMC",118,0)
 ..S NUM=$O(^TMP($J,"IVMCM",SEG,""),-1)+1
"RTN","IVMCMC",119,0)
 .Q:$D(HLERR)
"RTN","IVMCMC",120,0)
 .S ^TMP($J,"IVMCM",SEG,NUM)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",121,0)
 I IVMSEG1="ZMT",$E(SEG,1,3)'="ZMT" S SEG="ZMT1"
"RTN","IVMCMC",122,0)
 ;
"RTN","IVMCMC",123,0)
 ;IVM*2*90   don't allow upload of LTC with a date & a bad status code
"RTN","IVMCMC",124,0)
 I SEG="ZMT4",$P(IVMSEG,HLFS,3),$P(IVMSEG,HLFS,4)'=0,$P(IVMSEG,HLFS,4)'=1,$P(IVMSEG,HLFS,4)'="""""" Q
"RTN","IVMCMC",125,0)
 ;
"RTN","IVMCMC",126,0)
 I IVMSEG1="PID" D  Q
"RTN","IVMCMC",127,0)
 .K ^TMP($J,"IVMCM",SEG)
"RTN","IVMCMC",128,0)
 .S (NOPID,PIDCNTR)=1
"RTN","IVMCMC",129,0)
 .S PIDSTR(PIDCNTR)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",130,0)
 .F I=1:1 D  Q:NOPID
"RTN","IVMCMC",131,0)
 ..I $E($G(^TMP($J,IVMRTN,IVMDA+1,0)),1,4)="ZIC^" S NOPID=1 Q
"RTN","IVMCMC",132,0)
 ..S IVMDA=$O(^TMP($J,IVMRTN,+IVMDA))
"RTN","IVMCMC",133,0)
 ..S IVMSEG=$G(^TMP($J,IVMRTN,+IVMDA,0))
"RTN","IVMCMC",134,0)
 ..S PIDCNTR=PIDCNTR+1,PIDSTR(PIDCNTR)=IVMSEG
"RTN","IVMCMC",135,0)
 .D BLDPID^IVMPREC6(.PIDSTR,.IVMPID)
"RTN","IVMCMC",136,0)
 .M ^TMP($J,"IVMCM","PIDV")=IVMPID
"RTN","IVMCMC",137,0)
 ;
"RTN","IVMCMC",138,0)
 S ^TMP($J,"IVMCM",SEG)=$P(IVMSEG,HLFS,2,99)
"RTN","IVMCMC",139,0)
GETQ Q
"RTN","IVMCMC",140,0)
 ;
"RTN","IVMCMC",141,0)
PROB(ERR) ; Process encountered errors.
"RTN","IVMCMC",142,0)
 ;  Input:  ERR  --  Error text
"RTN","IVMCMC",143,0)
 S HLERR=ERR
"RTN","IVMCMC",144,0)
 D ACK^IVMPREC
"RTN","IVMCMC",145,0)
 Q
"RTN","IVMCMC",146,0)
 ;
"RTN","IVMCMC",147,0)
ADDL ; Perform additional segment checks for ORF messages.
"RTN","IVMCMC",148,0)
 ;
"RTN","IVMCMC",149,0)
 N DOB,ERRMSG,IVMMSA,IVMPAT,IVMQRD,IVMQRF,QARRAY,QRYIEN,SEX,SSN
"RTN","IVMCMC",150,0)
 ;
"RTN","IVMCMC",151,0)
 ; edit checks for MSA, QRD, and QRF segments
"RTN","IVMCMC",152,0)
 D GET("") I IVMSEG1'="MSA" D PROB("Missing required MSA segment") G ADDLQ
"RTN","IVMCMC",153,0)
 S IVMMCI=$P(IVMSEG,"^",3) ; msg control id of msg being acknowledged
"RTN","IVMCMC",154,0)
 S IVMMSA=IVMSEG
"RTN","IVMCMC",155,0)
 ; trace reply back to the original query msg
"RTN","IVMCMC",156,0)
 S QRYIEN=$$FINDMSG^IVMCQ2(IVMMCI)
"RTN","IVMCMC",157,0)
 I 'QRYIEN D PROB("Query not found") G ADDLQ
"RTN","IVMCMC",158,0)
 I QRYIEN,'$$GET^IVMCQ2(QRYIEN,.QARRAY) D PROB("Query not found") G ADDLQ
"RTN","IVMCMC",159,0)
 S DFN=QARRAY("DFN")
"RTN","IVMCMC",160,0)
 ;
"RTN","IVMCMC",161,0)
 D GET("") I IVMSEG1'="QRD" D PROB("Missing required QRD segment") G ADDLQ
"RTN","IVMCMC",162,0)
 S IVMQRD=IVMSEG
"RTN","IVMCMC",163,0)
 S SSN=$P(IVMQRD,HLFS,9)
"RTN","IVMCMC",164,0)
 ;
"RTN","IVMCMC",165,0)
 D GET("") I IVMSEG1'="QRF" D PROB("Missing required QRF segment") G ADDLQ
"RTN","IVMCMC",166,0)
 S IVMQRF=IVMSEG
"RTN","IVMCMC",167,0)
 S DOB=$$FMDATE^HLFNC($P(IVMQRF,HLFS,5))
"RTN","IVMCMC",168,0)
 S SEX=$P(IVMQRF,HLFS,6)
"RTN","IVMCMC",169,0)
 ;
"RTN","IVMCMC",170,0)
 ;
"RTN","IVMCMC",171,0)
 ; if application reject rec'd from HEC (i.e. No income data on file)
"RTN","IVMCMC",172,0)
 I $P(IVMMSA,HLFS,2)="AR" D
"RTN","IVMCMC",173,0)
 .S HLERR=""
"RTN","IVMCMC",174,0)
 .S IVMTYPE=7  ;type 4 is now used for LTC test (IVM*2*49)
"RTN","IVMCMC",175,0)
 .; - if patient identifiers rec'd from HEC incorrect, 
"RTN","IVMCMC",176,0)
 .;   queue off job to send a new query
"RTN","IVMCMC",177,0)
 .I $$GETPAT^IVMUFNC(DFN,.IVMPAT),((SSN'=IVMPAT("SSN"))!(DOB'=IVMPAT("DOB"))!(SEX'=IVMPAT("SEX"))) D QRYQUE^IVMCQ2(DFN)
"RTN","IVMCMC",178,0)
 ;
"RTN","IVMCMC",179,0)
ADDLQ Q
"VER")
8.0^22.2
**INSTALL NAME**
EAS*1.0*172
"BLD",10905,0)
EAS*1.0*172^ENROLLMENT APPLICATION SYSTEM^0^3181220^y
"BLD",10905,4,0)
^9.64PA^^
"BLD",10905,6.3)
3
"BLD",10905,"ABPKG")
n
"BLD",10905,"KRN",0)
^9.67PA^779.2^20
"BLD",10905,"KRN",.4,0)
.4
"BLD",10905,"KRN",.401,0)
.401
"BLD",10905,"KRN",.402,0)
.402
"BLD",10905,"KRN",.403,0)
.403
"BLD",10905,"KRN",.5,0)
.5
"BLD",10905,"KRN",.84,0)
.84
"BLD",10905,"KRN",3.6,0)
3.6
"BLD",10905,"KRN",3.8,0)
3.8
"BLD",10905,"KRN",9.2,0)
9.2
"BLD",10905,"KRN",9.8,0)
9.8
"BLD",10905,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",10905,"KRN",9.8,"NM",1,0)
EASCM^^0^B84464053
"BLD",10905,"KRN",9.8,"NM","B","EASCM",1)

"BLD",10905,"KRN",19,0)
19
"BLD",10905,"KRN",19.1,0)
19.1
"BLD",10905,"KRN",101,0)
101
"BLD",10905,"KRN",409.61,0)
409.61
"BLD",10905,"KRN",771,0)
771
"BLD",10905,"KRN",779.2,0)
779.2
"BLD",10905,"KRN",870,0)
870
"BLD",10905,"KRN",8989.51,0)
8989.51
"BLD",10905,"KRN",8989.52,0)
8989.52
"BLD",10905,"KRN",8994,0)
8994
"BLD",10905,"KRN","B",.4,.4)

"BLD",10905,"KRN","B",.401,.401)

"BLD",10905,"KRN","B",.402,.402)

"BLD",10905,"KRN","B",.403,.403)

"BLD",10905,"KRN","B",.5,.5)

"BLD",10905,"KRN","B",.84,.84)

"BLD",10905,"KRN","B",3.6,3.6)

"BLD",10905,"KRN","B",3.8,3.8)

"BLD",10905,"KRN","B",9.2,9.2)

"BLD",10905,"KRN","B",9.8,9.8)

"BLD",10905,"KRN","B",19,19)

"BLD",10905,"KRN","B",19.1,19.1)

"BLD",10905,"KRN","B",101,101)

"BLD",10905,"KRN","B",409.61,409.61)

"BLD",10905,"KRN","B",771,771)

"BLD",10905,"KRN","B",779.2,779.2)

"BLD",10905,"KRN","B",870,870)

"BLD",10905,"KRN","B",8989.51,8989.51)

"BLD",10905,"KRN","B",8989.52,8989.52)

"BLD",10905,"KRN","B",8994,8994)

"BLD",10905,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",10905,"QUES",0)
^9.62^^
"BLD",10905,"REQB",0)
^9.611^1^1
"BLD",10905,"REQB",1,0)
EAS*1.0*152^1
"BLD",10905,"REQB","B","EAS*1.0*152",1)

"MBREQ")
0
"PKG",187,-1)
1^1
"PKG",187,0)
ENROLLMENT APPLICATION SYSTEM^EAS^ENROLLMENT
"PKG",187,20,0)
^9.402P^1^1
"PKG",187,20,1,0)
2^^EASXDR
"PKG",187,20,1,1)
 
"PKG",187,20,"B",2,1)

"PKG",187,22,0)
^9.49I^1^1
"PKG",187,22,1,0)
1.0^3010315^3010321^66481
"PKG",187,22,1,"PAH",1,0)
172^3181220
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","EASCM")
0^1^B84464053
"RTN","EASCM",1,0)
EASCM ;ALB/PJH,JAM - PROCESS INCOME TEST (Z10) TRANSMISSIONS ;7/1/09 3:36pm
"RTN","EASCM",2,0)
 ;;1.0;ENROLLMENT APPLICATION SYSTEM;**71,96,152,172**;15-MAR-01;Build 3
"RTN","EASCM",3,0)
 ;
"RTN","EASCM",4,0)
 ;CLONED FROM IVMCM (ESR EVENT DRIVER)
"RTN","EASCM",5,0)
 ;
"RTN","EASCM",6,0)
ORF ; Handler for ORF type HL7 messages received from HEC
"RTN","EASCM",7,0)
 ;
"RTN","EASCM",8,0)
 ; Make sure POSTMASTER DUZ instead of DUZ of Person who
"RTN","EASCM",9,0)
 ; started Incoming Logical Link.
"RTN","EASCM",10,0)
 S DUZ=.5
"RTN","EASCM",11,0)
 N CNT,IVMRTN,SEGCNT
"RTN","EASCM",12,0)
 S IVMRTN="IVMCMX"  ;USE "IVMCMX" BECAUSE "IVMCM" ALREADY USED
"RTN","EASCM",13,0)
 K ^TMP($J,IVMRTN),DIC
"RTN","EASCM",14,0)
 S (DGMSGF,DGMTMSG)=1  ; HL7 rtn. Don't need DG interative messages.
"RTN","EASCM",15,0)
 S HLECH=HL("ECH"),HLQ=HL("Q"),HLMID=HL("MID")
"RTN","EASCM",16,0)
 K %,%H,%I D NOW^%DTC S HLDT=%
"RTN","EASCM",17,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","EASCM",18,0)
 . S CNT=0
"RTN","EASCM",19,0)
 . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE
"RTN","EASCM",20,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","EASCM",21,0)
 . . S ^TMP($J,IVMRTN,SEGCNT,CNT)=HLNODE(CNT)
"RTN","EASCM",22,0)
 S HLDA=HLMTIEN
"RTN","EASCM",23,0)
 ;
"RTN","EASCM",24,0)
 N SEG,EVENT,MSGID
"RTN","EASCM",25,0)
 S:'$D(HLEVN) HLEVN=0
"RTN","EASCM",26,0)
 D NXTSEG^DGENUPL(HLDA,0,.SEG)
"RTN","EASCM",27,0)
 Q:(SEG("TYPE")'="MSH")  ;would not have reached here if this happened!
"RTN","EASCM",28,0)
 S EVENT=$P(SEG(9),$E(HLECH),2)
"RTN","EASCM",29,0)
 ;
"RTN","EASCM",30,0)
 ; INITIALIZE HL7 VARIABLES
"RTN","EASCM",31,0)
 S HLEID="EAS ESR "_$P($$SITE^VASITE,"^",3)_" ORF-"_EVENT_" SERVER"
"RTN","EASCM",32,0)
 S HLEID=$O(^ORD(101,"B",HLEID,0))
"RTN","EASCM",33,0)
 D INIT^HLFNC2(HLEID,.HL)
"RTN","EASCM",34,0)
 S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","EASCM",35,0)
 ;
"RTN","EASCM",36,0)
 ; Handle means test signature ORF (Z06) event
"RTN","EASCM",37,0)
 I EVENT="Z06" D ORF^IVMPREC7
"RTN","EASCM",38,0)
 ;
"RTN","EASCM",39,0)
 ; Handle income test ORF (Z10) event
"RTN","EASCM",40,0)
 I EVENT="Z10" D Z10^IVMCM
"RTN","EASCM",41,0)
 ;
"RTN","EASCM",42,0)
 ; Handle enrollment/elig. ORF (Z11) event
"RTN","EASCM",43,0)
 I EVENT="Z11" D
"RTN","EASCM",44,0)
 .S MSGID=SEG(10)
"RTN","EASCM",45,0)
 .D ORFZ11^DGENUPL(HLDA,MSGID)
"RTN","EASCM",46,0)
 ;
"RTN","EASCM",47,0)
 K ^TMP($J,IVMRTN)
"RTN","EASCM",48,0)
 Q
"RTN","EASCM",49,0)
 ; Code below this line is not used - left in place for reference only
"RTN","EASCM",50,0)
 ; all Z10 processing performed within IVMCM
"RTN","EASCM",51,0)
Z10 ; Entry point for receipt of ORF~Z10 transmission
"RTN","EASCM",52,0)
 ; The Income Test (Z10) transmission has the following format:
"RTN","EASCM",53,0)
 ;
"RTN","EASCM",54,0)
 ;       BHS           ORF msgs do not include batch header or trailer.
"RTN","EASCM",55,0)
 ;       {MSH
"RTN","EASCM",56,0)
 ;        PID          They will include the sequence:  MSA 
"RTN","EASCM",57,0)
 ;        ZIC                                           QRD
"RTN","EASCM",58,0)
 ;        ZIR                                           QRF
"RTN","EASCM",59,0)
 ;        {ZDP         These segments will follow the MSH segment.
"RTN","EASCM",60,0)
 ;         ZIC
"RTN","EASCM",61,0)
 ;         ZIR
"RTN","EASCM",62,0)
 ;        }
"RTN","EASCM",63,0)
 ;        {ZDP}        Inactive Dependent Spouse Entries
"RTN","EASCM",64,0)
 ;        {ZDP}        Inactive Dependent Child Entries
"RTN","EASCM",65,0)
 ;        {ZMT
"RTN","EASCM",66,0)
 ;        }
"RTN","EASCM",67,0)
 ;        ZBT
"RTN","EASCM",68,0)
 ;       }
"RTN","EASCM",69,0)
 ;       BTS
"RTN","EASCM",70,0)
 ;
"RTN","EASCM",71,0)
 S IVMORF=1 ; set ORF msg flag
"RTN","EASCM",72,0)
 S (HLEVN,IVMCT,IVMERROR,IVMCNTR)=0 ; init vars
"RTN","EASCM",73,0)
 ;
"RTN","EASCM",74,0)
ORU ; Entry point for receipt of ORU~Z10 trans (called by IVMPREC2)
"RTN","EASCM",75,0)
 S IVMTYPE=5,IVMZ10F=1
"RTN","EASCM",76,0)
 ;
"RTN","EASCM",77,0)
 ; - loop through the msg in (#772 file), and process (PROC) msgs
"RTN","EASCM",78,0)
 S IVMDA=0 F  S IVMDA=$O(^TMP($J,IVMRTN,IVMDA)) Q:'IVMDA  S IVMSEG=$G(^(IVMDA,0)) I $E(IVMSEG,1,3)="MSH" D PROC Q:'IVMDA
"RTN","EASCM",79,0)
 ;
"RTN","EASCM",80,0)
 ; - if ORF msg flag, update the Query Tran Log and send ACK
"RTN","EASCM",81,0)
 I $G(IVMORF) D
"RTN","EASCM",82,0)
 .I $G(DFN),$D(IVMMCI) D
"RTN","EASCM",83,0)
 ..N IVMCR
"RTN","EASCM",84,0)
 ..S IVMCR=$P("1^2^3^7^5^6^4","^",IVMTYPE)  ;map reason to test type
"RTN","EASCM",85,0)
 ..D FIND^IVMCQ2(DFN,IVMMCI,HLDT,$S($D(HLERR):5,1:IVMCR),1)
"RTN","EASCM",86,0)
 .;D ACK^IVMPREC:'$D(HLERR)
"RTN","EASCM",87,0)
 .;N HLRESLTA,HLP
"RTN","EASCM",88,0)
 .;D GENACK^HLMA1(HLEID,HLMTIEN,HLEIDS,"LM",1,.HLRESLTA,"",.HLP)
"RTN","EASCM",89,0)
 ;
"RTN","EASCM",90,0)
 ; - if tests are uploaded, generate notification msg
"RTN","EASCM",91,0)
 I $D(^TMP($J,"IVMBULL")) D ^IVMCMB
"RTN","EASCM",92,0)
 ;
"RTN","EASCM",93,0)
ENQ ;
"RTN","EASCM",94,0)
 K IVMDA,IVMORF,IVMSEG,IVMFLGC,IVMTYPE,IVMMTIEN,IVMMTDT,IVMDGBT,IVMMCI
"RTN","EASCM",95,0)
 K ^TMP($J,"IVMCM"),^("IVMBULL"),DGMSGF,DGADDF,IVMCPAY,IVMBULL,DFN
"RTN","EASCM",96,0)
 K DGMTMSG,IVMZ10F
"RTN","EASCM",97,0)
 Q
"RTN","EASCM",98,0)
 ;
"RTN","EASCM",99,0)
PROC ; Process each HL7 message from (#772) file
"RTN","EASCM",100,0)
 ;
"RTN","EASCM",101,0)
 N IVMFUTR,TMSTAMP,SOURCE,NODE,HSDATE,IVMZ10,DGMTP,DGMTACT,DGMTI,DGMTA
"RTN","EASCM",102,0)
 S DGMTACT="ADD"
"RTN","EASCM",103,0)
 D PRIOR^DGMTEVT
"RTN","EASCM",104,0)
 S IVMZ10="UPLOAD IN PROGRESS"
"RTN","EASCM",105,0)
 S IVMFUTR=0 ;this flag will indicate whether or not a test with a future date is being uploaded
"RTN","EASCM",106,0)
 S IVMMTIEN=0
"RTN","EASCM",107,0)
 ;
"RTN","EASCM",108,0)
 S MSGID=$P(IVMSEG,HLFS,10) ; msg control id for ACK's
"RTN","EASCM",109,0)
 ; - check if DCD messaging is enabled
"RTN","EASCM",110,0)
 I '$$DCDON^IVMUPAR1() D PROB^IVMCMC("Facility has DCD messaging disabled") Q
"RTN","EASCM",111,0)
 ;
"RTN","EASCM",112,0)
 ; - check HL7 msg structure for errors
"RTN","EASCM",113,0)
 K HLERR,^TMP($J,"IVMCM")
"RTN","EASCM",114,0)
 ; jam; EAS*1.0*172 - set IVMSSNFLAG=0 and quit processing if the flag is set upon return from ^IVMCMC
"RTN","EASCM",115,0)
 ;  (see ^IVMCMC for what sets this flag)
"RTN","EASCM",116,0)
 N IVMSSNFLAG
"RTN","EASCM",117,0)
 S IVMSSNFLAG=0
"RTN","EASCM",118,0)
 D ^IVMCMC I $D(HLERR) K:HLERR="" HLERR Q
"RTN","EASCM",119,0)
 I IVMSSNFLAG Q
"RTN","EASCM",120,0)
 ;
"RTN","EASCM",121,0)
 ; Determine type of test/transmission
"RTN","EASCM",122,0)
 S IVMTYPE=0
"RTN","EASCM",123,0)
 ;
"RTN","EASCM",124,0)
 ; - was a means test sent?
"RTN","EASCM",125,0)
 I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2) S IVMTYPE=1 ; MT trans
"RTN","EASCM",126,0)
 ;
"RTN","EASCM",127,0)
 ; - if MT and CT transmitted, error - pt can't have both unless
"RTN","EASCM",128,0)
 ;   one is a deletion, but HEC not currently handling that situation
"RTN","EASCM",129,0)
 I IVMTYPE,$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) D PROB^IVMCMC("Patient  can not have both a Means Test and Copay Test") Q
"RTN","EASCM",130,0)
 I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2) S IVMTYPE=2 ; CT trans
"RTN","EASCM",131,0)
 ;
"RTN","EASCM",132,0)
 ; - if no MT or CT or LTC then Income Screening
"RTN","EASCM",133,0)
 I 'IVMTYPE,'$P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) S IVMTYPE=3 ; IS trans
"RTN","EASCM",134,0)
 ;
"RTN","EASCM",135,0)
 ;send an eligibility query if no eligibility code
"RTN","EASCM",136,0)
 I '$$ELIG^IVMCUF1(DFN),'$$PENDING^DGENQRY(DFN) I $$SEND^DGENQRY1(DFN)
"RTN","EASCM",137,0)
 ;
"RTN","EASCM",138,0)
 ; obtain locks used to sychronize upload with local income test options
"RTN","EASCM",139,0)
 D GETLOCKS^IVMCUPL(DFN)
"RTN","EASCM",140,0)
 ;
"RTN","EASCM",141,0)
 ;
"RTN","EASCM",142,0)
MT ; If transmission is a Means Test
"RTN","EASCM",143,0)
 N NODE0,RET,CODE,DATA,MTSIG,MTSIGDT
"RTN","EASCM",144,0)
 S HLQ=$G(HL("Q"))
"RTN","EASCM",145,0)
 S:HLQ="" HLQ=""""""
"RTN","EASCM",146,0)
 I IVMTYPE=1 D  I $D(HLERR) G PROCQ
"RTN","EASCM",147,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,2))
"RTN","EASCM",148,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,25))
"RTN","EASCM",149,0)
 .S HSDATE=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,24))
"RTN","EASCM",150,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,22)
"RTN","EASCM",151,0)
 .S MTSIG=$P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,27)
"RTN","EASCM",152,0)
 .S MTSIGDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,15))
"RTN","EASCM",153,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,1)
"RTN","EASCM",154,0)
 .; Check that test is for same year *152
"RTN","EASCM",155,0)
 .I $P(IVMLAST,U,2),$E($P(IVMLAST,U,2),1,3)'=$E(IVMMTDT,1,3) S IVMLAST="" ;*152
"RTN","EASCM",156,0)
 .Q:$$UPDMTSIG^IVMCMF(+IVMLAST,TMSTAMP,MTSIG,MTSIGDT)
"RTN","EASCM",157,0)
 .I $$Z06MT^EASPTRN1(+IVMLAST) Q
"RTN","EASCM",158,0)
 .I '$$ELIG^IVMUFNC5(DFN) S ERRMSG="Means Test upload not appropriate for current patient"
"RTN","EASCM",159,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D
"RTN","EASCM",160,0)
 ..N CATCZMT S CATCZMT=$G(^TMP($J,"IVMCM","ZMT1"))
"RTN","EASCM",161,0)
 ..S CATC=$$CATC^IVMUFNC5(CATCZMT)
"RTN","EASCM",162,0)
 ..I '+$G(CATC) S ERRMSG="Only Means Tests in current/previous income years are valid (not effective)"
"RTN","EASCM",163,0)
 .I $G(ERRMSG)'="" D PROB^IVMCMC(ERRMSG) K ERRMSG,CATC Q
"RTN","EASCM",164,0)
 .;
"RTN","EASCM",165,0)
 .; - perform edit checks and file MT
"RTN","EASCM",166,0)
 .D CHKDT
"RTN","EASCM",167,0)
 .;deletion indicator sent?
"RTN","EASCM",168,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT1")),HLFS,3)=HLQ D  Q
"RTN","EASCM",169,0)
 ..D
"RTN","EASCM",170,0)
 ...;if there is a future test for that income year, delete that
"RTN","EASCM",171,0)
 ...N IEN,DATA,IVMPAT
"RTN","EASCM",172,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1,.IVMPAT)
"RTN","EASCM",173,0)
 ...I IEN S DATA(.06)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","EASCM",174,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","EASCM",175,0)
 ....S IVMMTIEN=IEN
"RTN","EASCM",176,0)
 ....S IVMFUTR=1
"RTN","EASCM",177,0)
 ...E  D
"RTN","EASCM",178,0)
 ....S IVMFUTR=0
"RTN","EASCM",179,0)
 ..Q:('IVMMTIEN)
"RTN","EASCM",180,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","EASCM",181,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","EASCM",182,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","EASCM",183,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","EASCM",184,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","EASCM",185,0)
 .;
"RTN","EASCM",186,0)
 .;check timestamp - if matches current primary test and hardship matches, then this is a duplicate and does not need to be uploaded
"RTN","EASCM",187,0)
 .I TMSTAMP D
"RTN","EASCM",188,0)
 ..S NODE=""
"RTN","EASCM",189,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),1)
"RTN","EASCM",190,0)
 ..Q:'IVMMTIEN
"RTN","EASCM",191,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","EASCM",192,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","EASCM",193,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5),(HSDATE=$P(NODE,"^")) Q
"RTN","EASCM",194,0)
 .;
"RTN","EASCM",195,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,2)
"RTN","EASCM",196,0)
 .D EN^IVMCM1
"RTN","EASCM",197,0)
 ;
"RTN","EASCM",198,0)
 ;
"RTN","EASCM",199,0)
CT ; If transmission is a Copay Test
"RTN","EASCM",200,0)
 N NODE0,RET,CODE,DATA
"RTN","EASCM",201,0)
 I IVMTYPE=2 D  I $D(HLERR) G PROCQ
"RTN","EASCM",202,0)
 .S IVMMTDT=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,2))
"RTN","EASCM",203,0)
 .S TMSTAMP=$$FMDATE^HLFNC($P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,25))
"RTN","EASCM",204,0)
 .S SOURCE=$P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,22)
"RTN","EASCM",205,0)
 .S IVMLAST=$$LST^DGMTU(DFN,$E(IVMMTDT,1,3)_1231,2)
"RTN","EASCM",206,0)
 .S IVMCPAY=$$RXST^IBARXEU(DFN)
"RTN","EASCM",207,0)
 .I $$AGE^IVMUFNC5(DT)>$$INCY^IVMUFNC5(IVMMTDT) D PROB^IVMCMC("Only Copay Tests in the current/previous income years are valid. (Not effective)") Q
"RTN","EASCM",208,0)
 .; - perform edit checks and file CT
"RTN","EASCM",209,0)
 .D CHKDT
"RTN","EASCM",210,0)
 .;deletion indicator sent?
"RTN","EASCM",211,0)
 .I $P($G(^TMP($J,"IVMCM","ZMT2")),HLFS,3)=HLQ D  Q
"RTN","EASCM",212,0)
 ..D
"RTN","EASCM",213,0)
 ...;if there is a future test for that income year, delete that
"RTN","EASCM",214,0)
 ...N IEN,DATA,IVMPAT
"RTN","EASCM",215,0)
 ...S IEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2,.IVMPAT)
"RTN","EASCM",216,0)
 ...I IEN S DATA(.07)="" I $$UPD^DGENDBS(301.5,IVMPAT,.DATA)
"RTN","EASCM",217,0)
 ...I IEN,$D(^DGMT(408.31,IEN,0)) D
"RTN","EASCM",218,0)
 ....S IVMMTIEN=IEN
"RTN","EASCM",219,0)
 ....S IVMFUTR=1
"RTN","EASCM",220,0)
 ...E  D
"RTN","EASCM",221,0)
 ....S IVMFUTR=0
"RTN","EASCM",222,0)
 ..Q:('IVMMTIEN)
"RTN","EASCM",223,0)
 ..S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","EASCM",224,0)
 ..I $$EN^IVMCMD(IVMMTIEN) D
"RTN","EASCM",225,0)
 ...S RET=$$LST^DGMTU(DFN,DT,IVMTYPE)
"RTN","EASCM",226,0)
 ...S CODE=$S(($E($P(RET,"^",2),1,3)=$E(DT,1,3)):$P(RET,"^",4),1:"")
"RTN","EASCM",227,0)
 ...D ADD^IVMCMB(DFN,IVMTYPE,$S(IVMFUTR:"DELETE FUTR TEST",1:"DELETE PRMRY TEST"),+$G(NODE0),$$GETCODE^DGMTH($P(NODE0,"^",3)),CODE)
"RTN","EASCM",228,0)
 .;
"RTN","EASCM",229,0)
 .;check timestamp - if matches current primary test, then this is a duplicate and does not need to be uploaded
"RTN","EASCM",230,0)
 .I TMSTAMP D
"RTN","EASCM",231,0)
 ..S NODE=""
"RTN","EASCM",232,0)
 ..I IVMFUTR N IVMMTIEN S IVMMTIEN=$$FUTURE(DFN,($E(IVMMTDT,1,3)-1),2)
"RTN","EASCM",233,0)
 ..Q:'IVMMTIEN
"RTN","EASCM",234,0)
 ..S NODE=$G(^DGMT(408.31,IVMMTIEN,2))
"RTN","EASCM",235,0)
 .S NODE0=$G(^DGMT(408.31,IVMMTIEN,0))
"RTN","EASCM",236,0)
 .I TMSTAMP,TMSTAMP=$P(NODE,"^",2),IVMMTDT=$P(NODE0,"^"),SOURCE=$P(NODE,"^",5) Q
"RTN","EASCM",237,0)
 .;
"RTN","EASCM",238,0)
 .D DELTYPE^IVMCMD(DFN,IVMMTDT,1)
"RTN","EASCM",239,0)
 .D EN^IVMCM1
"RTN","EASCM",240,0)
 ;
"RTN","EASCM",241,0)
IS ; - If transmission is income screening info only then do not process
"RTN","EASCM",242,0)
 ; - outside of the scope of MTS
"RTN","EASCM",243,0)
 I IVMTYPE=3 S IVMMTDT=0
"RTN","EASCM",244,0)
 ;
"RTN","EASCM",245,0)
LTC ; If transmission contains a Long Term Care Test (TYPE 4 TEST)
"RTN","EASCM",246,0)
 I $P($G(^TMP($J,"IVMCM","ZMT4")),HLFS,2) D LTC^IVMCM1
"RTN","EASCM",247,0)
 ;
"RTN","EASCM",248,0)
PROCQ ;
"RTN","EASCM",249,0)
 ; release locks used to sychronize upload with local income test options
"RTN","EASCM",250,0)
 D RELLOCKS^IVMCUPL(DFN)
"RTN","EASCM",251,0)
 Q
"RTN","EASCM",252,0)
 ;
"RTN","EASCM",253,0)
CHKDT ; check date of income test being uploaded
"RTN","EASCM",254,0)
 ; Is it a future date?  If so, set IVMFUTR=1
"RTN","EASCM",255,0)
 ;
"RTN","EASCM",256,0)
 ; IVMMTIEN is the IEN of current primary test for the year
"RTN","EASCM",257,0)
 ;
"RTN","EASCM",258,0)
 I $E($P(IVMLAST,"^",2),1,3)=$E(IVMMTDT,1,3) S IVMMTIEN=+IVMLAST
"RTN","EASCM",259,0)
 I IVMMTDT>DT S IVMFUTR=1
"RTN","EASCM",260,0)
 Q
"RTN","EASCM",261,0)
FUTURE(DFN,YEAR,TYPE,IVMPAT) ;
"RTN","EASCM",262,0)
 ;Returns the ien of the future test, if there is one
"RTN","EASCM",263,0)
 ;Inputs:  DFN
"RTN","EASCM",264,0)
 ;         YEAR  - income year
"RTN","EASCM",265,0)
 ;         TYPE - type of test
"RTN","EASCM",266,0)
 ;Output:
"RTN","EASCM",267,0)
 ;  function value - ien of future means test, if there is one, "" otherwise
"RTN","EASCM",268,0)
 ;  IVMPAT - Pointer to the IVM Patient file for the income year if there is an entry (pass by reference)
"RTN","EASCM",269,0)
 ;
"RTN","EASCM",270,0)
 N RET
"RTN","EASCM",271,0)
 S RET=""
"RTN","EASCM",272,0)
 S IVMPAT=$$FIND^IVMPLOG(DFN,YEAR)
"RTN","EASCM",273,0)
 I IVMPAT S RET=$P($G(^IVM(301.5,IVMPAT,0)),"^",$S(TYPE=1:6,1:7))
"RTN","EASCM",274,0)
 Q RET
"VER")
8.0^22.2
**END**
**END**
