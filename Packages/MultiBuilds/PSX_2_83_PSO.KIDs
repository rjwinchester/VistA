KIDS Distribution saved on Jan 25, 2018@13:37:15
PSX PSO BUNDLE 1.0
**KIDS**:PSX PSO BUNDLE 1.0^PSX*2.0*83^PSO*7.0*513^

**INSTALL NAME**
PSX PSO BUNDLE 1.0
"BLD",10549,0)
PSX PSO BUNDLE 1.0^^1^3180125^y
"BLD",10549,6.3)
2
"BLD",10549,10,0)
^9.63^2^2
"BLD",10549,10,1,0)
PSX*2.0*83^1
"BLD",10549,10,2,0)
PSO*7.0*513^1
"BLD",10549,10,"B","PSO*7.0*513",2)

"BLD",10549,10,"B","PSX*2.0*83",1)

"BLD",10549,"KRN",0)
^9.67PA^779.2^20
"BLD",10549,"KRN",.4,0)
.4
"BLD",10549,"KRN",.401,0)
.401
"BLD",10549,"KRN",.402,0)
.402
"BLD",10549,"KRN",.403,0)
.403
"BLD",10549,"KRN",.5,0)
.5
"BLD",10549,"KRN",.84,0)
.84
"BLD",10549,"KRN",3.6,0)
3.6
"BLD",10549,"KRN",3.8,0)
3.8
"BLD",10549,"KRN",9.2,0)
9.2
"BLD",10549,"KRN",9.8,0)
9.8
"BLD",10549,"KRN",19,0)
19
"BLD",10549,"KRN",19.1,0)
19.1
"BLD",10549,"KRN",101,0)
101
"BLD",10549,"KRN",409.61,0)
409.61
"BLD",10549,"KRN",771,0)
771
"BLD",10549,"KRN",779.2,0)
779.2
"BLD",10549,"KRN",870,0)
870
"BLD",10549,"KRN",8989.51,0)
8989.51
"BLD",10549,"KRN",8989.52,0)
8989.52
"BLD",10549,"KRN",8994,0)
8994
"BLD",10549,"KRN","B",.4,.4)

"BLD",10549,"KRN","B",.401,.401)

"BLD",10549,"KRN","B",.402,.402)

"BLD",10549,"KRN","B",.403,.403)

"BLD",10549,"KRN","B",.5,.5)

"BLD",10549,"KRN","B",.84,.84)

"BLD",10549,"KRN","B",3.6,3.6)

"BLD",10549,"KRN","B",3.8,3.8)

"BLD",10549,"KRN","B",9.2,9.2)

"BLD",10549,"KRN","B",9.8,9.8)

"BLD",10549,"KRN","B",19,19)

"BLD",10549,"KRN","B",19.1,19.1)

"BLD",10549,"KRN","B",101,101)

"BLD",10549,"KRN","B",409.61,409.61)

"BLD",10549,"KRN","B",771,771)

"BLD",10549,"KRN","B",779.2,779.2)

"BLD",10549,"KRN","B",870,870)

"BLD",10549,"KRN","B",8989.51,8989.51)

"BLD",10549,"KRN","B",8989.52,8989.52)

"BLD",10549,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.2
**INSTALL NAME**
PSX*2.0*83
"BLD",10547,0)
PSX*2.0*83^CMOP^0^3180125^y
"BLD",10547,4,0)
^9.64PA^^
"BLD",10547,6.3)
2
"BLD",10547,"KRN",0)
^9.67PA^779.2^20
"BLD",10547,"KRN",.4,0)
.4
"BLD",10547,"KRN",.401,0)
.401
"BLD",10547,"KRN",.402,0)
.402
"BLD",10547,"KRN",.403,0)
.403
"BLD",10547,"KRN",.5,0)
.5
"BLD",10547,"KRN",.84,0)
.84
"BLD",10547,"KRN",3.6,0)
3.6
"BLD",10547,"KRN",3.8,0)
3.8
"BLD",10547,"KRN",9.2,0)
9.2
"BLD",10547,"KRN",9.8,0)
9.8
"BLD",10547,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",10547,"KRN",9.8,"NM",1,0)
PSXRPPL^^0^B69154405
"BLD",10547,"KRN",9.8,"NM",2,0)
PSXRPPL1^^0^B56796011
"BLD",10547,"KRN",9.8,"NM",3,0)
PSXRPPL2^^0^B74625439
"BLD",10547,"KRN",9.8,"NM","B","PSXRPPL",1)

"BLD",10547,"KRN",9.8,"NM","B","PSXRPPL1",2)

"BLD",10547,"KRN",9.8,"NM","B","PSXRPPL2",3)

"BLD",10547,"KRN",19,0)
19
"BLD",10547,"KRN",19.1,0)
19.1
"BLD",10547,"KRN",101,0)
101
"BLD",10547,"KRN",409.61,0)
409.61
"BLD",10547,"KRN",771,0)
771
"BLD",10547,"KRN",779.2,0)
779.2
"BLD",10547,"KRN",870,0)
870
"BLD",10547,"KRN",8989.51,0)
8989.51
"BLD",10547,"KRN",8989.52,0)
8989.52
"BLD",10547,"KRN",8994,0)
8994
"BLD",10547,"KRN","B",.4,.4)

"BLD",10547,"KRN","B",.401,.401)

"BLD",10547,"KRN","B",.402,.402)

"BLD",10547,"KRN","B",.403,.403)

"BLD",10547,"KRN","B",.5,.5)

"BLD",10547,"KRN","B",.84,.84)

"BLD",10547,"KRN","B",3.6,3.6)

"BLD",10547,"KRN","B",3.8,3.8)

"BLD",10547,"KRN","B",9.2,9.2)

"BLD",10547,"KRN","B",9.8,9.8)

"BLD",10547,"KRN","B",19,19)

"BLD",10547,"KRN","B",19.1,19.1)

"BLD",10547,"KRN","B",101,101)

"BLD",10547,"KRN","B",409.61,409.61)

"BLD",10547,"KRN","B",771,771)

"BLD",10547,"KRN","B",779.2,779.2)

"BLD",10547,"KRN","B",870,870)

"BLD",10547,"KRN","B",8989.51,8989.51)

"BLD",10547,"KRN","B",8989.52,8989.52)

"BLD",10547,"KRN","B",8994,8994)

"BLD",10547,"QUES",0)
^9.62^^
"MBREQ")
1
"PKG",519,-1)
1^1
"PKG",519,0)
CMOP^PSX^Consolidated Mail Outpatient Pharmacy
"PKG",519,22,0)
^9.49I^1^1
"PKG",519,22,1,0)
2.0^2970411^2970412^1
"PKG",519,22,1,"PAH",1,0)
83^3180125
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","PSXRPPL")
0^1^B69154405
"RTN","PSXRPPL",1,0)
PSXRPPL ;BIR/WPB,BAB-Gathers data for the CMOP Transmission ;13 Mar 2002  10:31 AM
"RTN","PSXRPPL",2,0)
 ;;2.0;CMOP;**3,23,33,28,40,42,41,48,62,58,66,65,69,70,81,83**;11 Apr 97;Build 2
"RTN","PSXRPPL",3,0)
 ;Reference to ^PS(52.5,  supported by DBIA #1978
"RTN","PSXRPPL",4,0)
 ;Reference to ^PSRX(     supported by DBIA #1977
"RTN","PSXRPPL",5,0)
 ;Reference to ^PSOHLSN1  supported by DBIA #2385
"RTN","PSXRPPL",6,0)
 ;Reference to ^PSORXL    supported by DBIA #1969
"RTN","PSXRPPL",7,0)
 ;Reference to ^PSOLSET   supported by DBIA #1973
"RTN","PSXRPPL",8,0)
 ;Reference to %ZIS(1     supported by DBIA #290
"RTN","PSXRPPL",9,0)
 ;Reference to %ZIS(2     supported by DBIA #2247
"RTN","PSXRPPL",10,0)
 ;Reference to ^PSSLOCK   supported by DBIA #2789
"RTN","PSXRPPL",11,0)
 ;Reference to ^XTMP("ORLK-" supported by DBIA #4001
"RTN","PSXRPPL",12,0)
 ;Reference to ^BPSUTIL   supported by DBIA #4410
"RTN","PSXRPPL",13,0)
 ;Reference to ^PS(59     supported by DBIA #1976
"RTN","PSXRPPL",14,0)
 ;Reference to $$SELPRT^PSOFDAUT supported by DBIA #5740
"RTN","PSXRPPL",15,0)
 ;
"RTN","PSXRPPL",16,0)
 ;Called from PSXRSUS -Builds ^PSX(550.2,,15,"C" , and returns to PSXRSUS or PSXRTRAN
"RTN","PSXRPPL",17,0)
 ;
"RTN","PSXRPPL",18,0)
SDT ;
"RTN","PSXRPPL",19,0)
 K ^TMP($J,"PSX"),^TMP($J,"PSXDFN"),^TMP("PSXEPHNB",$J)
"RTN","PSXRPPL",20,0)
 K PSXBAT,ZCNT
"RTN","PSXRPPL",21,0)
 I $D(XRTL) D T0^%ZOSV
"RTN","PSXRPPL",22,0)
 S PSXTDIV=PSOSITE,PSXTYP=$S(+$G(PSXCS):"C",1:"N")
"RTN","PSXRPPL",23,0)
 ;
"RTN","PSXRPPL",24,0)
 ; - Submitting prescriptions to ECME (Electronic Claims Mgmt Engine) - 3rd pary
"RTN","PSXRPPL",25,0)
 I $$ECMEON^BPSUTIL(PSXTDIV),$$CMOPON^BPSUTIL(PSXTDIV) D
"RTN","PSXRPPL",26,0)
 . N BPSCNT S BPSCNT=$$SBTECME^PSXRPPL1(PSXTYP,PSXTDIV,PRTDT,PSXDTRG)
"RTN","PSXRPPL",27,0)
 . ; - Wait 15 seconds per prescription sent to ECME (max of 2 hours)
"RTN","PSXRPPL",28,0)
 . I BPSCNT>0 H 60+$S((BPSCNT*15)>7200:7200,1:(BPSCNT*15))
"RTN","PSXRPPL",29,0)
 ;
"RTN","PSXRPPL",30,0)
 ; - Transmitting prescription to CMOP (up to THROUGH DATE)
"RTN","PSXRPPL",31,0)
 K ^TMP("PSXEPHIN",$J)
"RTN","PSXRPPL",32,0)
 S SDT=0 F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)) S XDFN=0 Q:(SDT>PRTDT)!(SDT'>0)  D
"RTN","PSXRPPL",33,0)
 . F  S XDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN)) S REC=0 Q:(XDFN'>0)!(XDFN="")  D
"RTN","PSXRPPL",34,0)
 . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC)) Q:(REC'>0)!(REC="")  D
"RTN","PSXRPPL",35,0)
 . . . D GETDATA D:$G(RXN) PSOUL^PSSLOCK(RXN),OERRLOCK(RXN)
"RTN","PSXRPPL",36,0)
 ;
"RTN","PSXRPPL",37,0)
 ; - Pulling prescriptions ahead (parameter in OUTPATIENT SITE file #59)
"RTN","PSXRPPL",38,0)
 I $G(PSXBAT),'$G(PSXRTRAN) D CHKDFN^PSXRPPL2(PRTDT)
"RTN","PSXRPPL",39,0)
 I $G(PSXBAT),'$G(PSXRTRAN) D CHKDFN
"RTN","PSXRPPL",40,0)
 ;
"RTN","PSXRPPL",41,0)
 ; - Sends a Mailman message if there were transmission problems with the 3rd Party Payer
"RTN","PSXRPPL",42,0)
 I $D(^TMP("PSXEPHIN",$J)) D ^PSXBPSMS K ^TMP("PSXEPHIN",$J),^TMP("PSXEPHNB",$J)
"RTN","PSXRPPL",43,0)
 ;
"RTN","PSXRPPL",44,0)
EXIT ;   
"RTN","PSXRPPL",45,0)
 K SDT,DFN,REC,RXNUM,PSXOK,FILNUM,REF,PNAME,CNAME,DIE,DR,NDFN,%,CNT,COM,DTTM,FILL,JJ,PRTDT,PSXDIV,XDFN,NFLAG,CIND,XDFN
"RTN","PSXRPPL",46,0)
 K CHKDT,DAYS,DRUG,DRUGCHK,NM,OPDT,PHARCLK,PHY,PSTAT,PTRA,PTRB,QTY,REL,RXERR,RXF,SFN,PSXDGST,PSXMC,PSXMDT
"RTN","PSXRPPL",47,0)
 S:$D(XRT0) XRTN=$T(+0) D:$D(XRT0) T1^%ZOSV
"RTN","PSXRPPL",48,0)
 K ^TMP("PSXEPHIN",$J),^TMP("PSXEPHNB",$J)
"RTN","PSXRPPL",49,0)
 Q
"RTN","PSXRPPL",50,0)
GETDATA ;Screens rxs and builds data
"RTN","PSXRPPL",51,0)
 ;PSXOK=1:NOT CMOP DRUG OR DO NOT MAIL,2:TRADENAME,3:WINDOW,4:PRINTED,5:NOT SUSPENDED
"RTN","PSXRPPL",52,0)
 ;PSXOK=6:ALREADY RELEASED,7:DIFFERENT DIVISION,8:BAD DATA IN 52.5
"RTN","PSXRPPL",53,0)
 ;9:CS Mismatch,10:DEA 1 or 2
"RTN","PSXRPPL",54,0)
 I '$D(^PS(52.5,REC,0)) K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",55,0)
 I $P(^PS(52.5,REC,0),"^",7)="" K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",56,0)
 I ($P(^PS(52.5,REC,0),"^",3)'=XDFN) K ^PS(52.5,"AQ",SDT,XDFN,REC),^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,XDFN,REC) Q
"RTN","PSXRPPL",57,0)
 N DFN S DFN=XDFN D DEM^VADPT
"RTN","PSXRPPL",58,0)
 I $G(VADM(6))'="" D DELETE K VADM Q
"RTN","PSXRPPL",59,0)
 S PSXOK=0,NFLAG=0
"RTN","PSXRPPL",60,0)
 S RXN=$P($G(^PS(52.5,REC,0)),"^",1) I RXN="" S PSXOK=8 Q
"RTN","PSXRPPL",61,0)
 S RFL=+$$GET1^DIQ(52.5,REC,9,"I")
"RTN","PSXRPPL",62,0)
 I '$D(^TMP($J,"PSXBAI",DFN)) D
"RTN","PSXRPPL",63,0)
 .S PSXGOOD=$$ADDROK^PSXMISC1(RXN)
"RTN","PSXRPPL",64,0)
 .I 'PSXGOOD S PSXFIRST=1 D  I 'PSXFIRST S PSXOK=8
"RTN","PSXRPPL",65,0)
 ..D CHKACT^PSXMISC1(RXN)
"RTN","PSXRPPL",66,0)
 I PSXOK=8 K RXN Q
"RTN","PSXRPPL",67,0)
 ;
"RTN","PSXRPPL",68,0)
 N EPHQT S EPHQT=0
"RTN","PSXRPPL",69,0)
 I $$PATCH^XPDUTL("PSO*7.0*148") D EPHARM^PSXRPPL2 I EPHQT Q
"RTN","PSXRPPL",70,0)
 D CHKDATA^PSXMISC1
"RTN","PSXRPPL",71,0)
SET Q:(PSXOK=7)!(PSXOK=8)!(PSXOK=9)
"RTN","PSXRPPL",72,0)
 S PNAME=$G(VADM(1))
"RTN","PSXRPPL",73,0)
 I ($G(PSXCSRX)=1)&($G(PSXCS)=1) S ^XTMP("PSXCS",PSOSITE,DT,RXN)=""
"RTN","PSXRPPL",74,0)
 I (PSXOK=0)&(PSXFLAG=1) S ^TMP($J,"PSXDFN",XDFN)="",NFLAG=4 D DQUE,RX550215 Q
"RTN","PSXRPPL",75,0)
 I (PSXOK=0)&(PSXFLAG=2) D RX550215 Q
"RTN","PSXRPPL",76,0)
 I (PSXOK>0)&(PSXOK<7)!(PSXOK=10) D DELETE Q
"RTN","PSXRPPL",77,0)
 Q
"RTN","PSXRPPL",78,0)
 ;
"RTN","PSXRPPL",79,0)
DELETE ; deletes the CMOP STATUS field in PS(52.5, reindex 'AC' x-ref
"RTN","PSXRPPL",80,0)
 L +^PS(52.5,REC):600 Q:'$T
"RTN","PSXRPPL",81,0)
 N DR,DIE,DA S DIE="^PS(52.5,",DA=REC,DR="3///@" D ^DIE
"RTN","PSXRPPL",82,0)
 S ^PS(52.5,"AC",$P(^PS(52.5,REC,0),"^",3),$P(^PS(52.5,REC,0),"^",2),REC)=""
"RTN","PSXRPPL",83,0)
 L -^PS(52.5,REC)
"RTN","PSXRPPL",84,0)
 Q
"RTN","PSXRPPL",85,0)
 ;the rest of the sub-routines go through the ^PSX(550.2,,15,"C"
"RTN","PSXRPPL",86,0)
 ;global and checks for RXs within the days ahead range and
"RTN","PSXRPPL",87,0)
 ;builds the ^PSX(550.2,PSXBAT,
"RTN","PSXRPPL",88,0)
CHKDFN ; use the patient 'C' index under RX multiple in file 550.2 to GET dfn to gather Patients' future RXs
"RTN","PSXRPPL",89,0)
 I '$D(^PSX(550.2,PSXBAT,15,"C")) Q
"RTN","PSXRPPL",90,0)
 S PSXPTNM="" F  S PSXPTNM=$O(^PSX(550.2,PSXBAT,15,"C",PSXPTNM)) Q:PSXPTNM=""  D
"RTN","PSXRPPL",91,0)
 . S XDFN=0 F  S XDFN=$O(^PSX(550.2,PSXBAT,"15","C",PSXPTNM,XDFN)) Q:(XDFN'>0)  D
"RTN","PSXRPPL",92,0)
 . . S SDT=PRTDT F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)),NDFN=0 Q:(SDT>PSXDTRG)!(SDT="")  D
"RTN","PSXRPPL",93,0)
 . . . F  S NDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN)),REC=0 Q:NDFN'>0  I NDFN=XDFN D
"RTN","PSXRPPL",94,0)
 . . . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN,REC)) Q:REC'>0  D
"RTN","PSXRPPL",95,0)
 . . . . . D GETDATA D:$G(RXN) PSOUL^PSSLOCK(RXN),OERRLOCK(RXN)
"RTN","PSXRPPL",96,0)
 Q
"RTN","PSXRPPL",97,0)
 ;
"RTN","PSXRPPL",98,0)
BEGIN ; Select print device
"RTN","PSXRPPL",99,0)
 I '$D(PSOPAR) D ^PSOLSET
"RTN","PSXRPPL",100,0)
 I $D(PSOLAP),($G(PSOLAP)'=ION) S PSLION=PSOLAP G PROFILE
"RTN","PSXRPPL",101,0)
 W ! S %ZIS("A")="PRINTER 'LABEL' DEVICE:  ",%ZIS("B")="",%ZIS="MQN" D ^%ZIS S PSLION=ION G:POP EXIT
"RTN","PSXRPPL",102,0)
 I $G(IOST)["C-" W !,"You must select a printer!",! G BEGIN
"RTN","PSXRPPL",103,0)
 F J=0,1 S @("PSOBAR"_J)="" I $D(^%ZIS(2,^%ZIS(1,IOS,"SUBTYPE"),"BAR"_J)) S @("PSOBAR"_J)=^("BAR"_J)
"RTN","PSXRPPL",104,0)
 S PSOBARS=PSOBAR1]""&(PSOBAR0]"")&$P(PSOPAR,"^",19)
"RTN","PSXRPPL",105,0)
 K PSOION,J D ^%ZISC I $D(IO("Q")) K IO("Q")
"RTN","PSXRPPL",106,0)
 ;
"RTN","PSXRPPL",107,0)
PROFILE I $D(PSOPROP),($G(PSOPROP)'=ION) G FDAMG
"RTN","PSXRPPL",108,0)
 I $P(PSOPAR,"^",8) S %ZIS="MNQ",%ZIS("A")="Select PROFILE PRINTER: " D ^%ZIS K %ZIS,IO("Q"),IOP G:POP EXIT S PSOPROP=ION D ^%ZISC
"RTN","PSXRPPL",109,0)
 I $G(PSOPROP)=ION W !,"You must select a printer!",! G PROFILE
"RTN","PSXRPPL",110,0)
 ;
"RTN","PSXRPPL",111,0)
FDAMG ; Selects FDA Medication Guide Printer
"RTN","PSXRPPL",112,0)
 I $$GET1^DIQ(59,PSOSITE,134)'="" N FDAPRT S FDAPRT="" D  I FDAPRT="^"!($G(PSOFDAPT)="") S POP=1 G EXIT
"RTN","PSXRPPL",113,0)
 . F  D  Q:FDAPRT'=""
"RTN","PSXRPPL",114,0)
 . . S FDAPRT=$$SELPRT^PSOFDAUT($P($G(PSOFDAPT),"^"))
"RTN","PSXRPPL",115,0)
 . . I FDAPRT="" W $C(7),!,"You must select a valid FDA Medication Guide printer."
"RTN","PSXRPPL",116,0)
 . I FDAPRT'="",(FDAPRT'="^") S PSOFDAPT=FDAPRT
"RTN","PSXRPPL",117,0)
 Q
"RTN","PSXRPPL",118,0)
 ;
"RTN","PSXRPPL",119,0)
PRT ; w auto error trapping
"RTN","PSXRPPL",120,0)
 D NOW^%DTC S DTTM=% K %
"RTN","PSXRPPL",121,0)
 S NM="" F  S NM=$O(^PSX(550.2,PSXBAT,15,"C",NM)) Q:NM=""  D DFN,PPL ;gather patient RXs, print patient RXs
"RTN","PSXRPPL",122,0)
 S DIK="^PSX(550.2,",DA=PSXBAT D ^DIK K PSXBAT
"RTN","PSXRPPL",123,0)
 K CHKDT,CIND,DAYS,DRUG,DRUGCHK,NFLAG,NM,ORD,PDT,PHARCLK,PHY,PSTAT,PTRA,PTRB,QTY,REL,RXERR,RXF,SFN,SIG,SITE,SUS,SUSPT
"RTN","PSXRPPL",124,0)
 Q
"RTN","PSXRPPL",125,0)
DFN S DFN=0,NFLAG=2
"RTN","PSXRPPL",126,0)
 F  S DFN=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN)),RXN=0 Q:(DFN="")!(DFN'>0)  D
"RTN","PSXRPPL",127,0)
 .F  S RXN=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN,RXN)),RXF="" Q:(RXN="")!(RXN'>0)  D
"RTN","PSXRPPL",128,0)
 ..F  S RXF=$O(^PSX(550.2,PSXBAT,15,"C",NM,DFN,RXN,RXF)) Q:RXF=""  D BLD
"RTN","PSXRPPL",129,0)
 Q
"RTN","PSXRPPL",130,0)
BLD ;
"RTN","PSXRPPL",131,0)
 S BATRXDA=$O(^PSX(550.2,PSXBAT,15,"B",RXN,0)) D NOW^%DTC S DTTM=%
"RTN","PSXRPPL",132,0)
 S REC=$P(^PSX(550.2,PSXBAT,15,BATRXDA,0),U,5),SUS=$O(^PS(52.5,"B",RXN,0))
"RTN","PSXRPPL",133,0)
 I SUS=REC,+SUS'=0 I 1 ;rx still valid in suspense
"RTN","PSXRPPL",134,0)
 E  D  Q  ;rx gone
"RTN","PSXRPPL",135,0)
 . N DA,DIK S DIK=550.2,DA(1)=PSXBAT,DA=BATRXDA
"RTN","PSXRPPL",136,0)
 . D ^DIK
"RTN","PSXRPPL",137,0)
 S PSOSU(DFN,SUS)=RXN,RXCNTR=$G(RXCNTR)+1,NFLAG=2
"RTN","PSXRPPL",138,0)
 S $P(^PSRX(RXN,0),U,15)=0,$P(^PSRX(RXN,"STA"),U,1)=0
"RTN","PSXRPPL",139,0)
 K % S COM="CMOP Suspense Label "_$S($G(^PS(52.5,SUS,"P"))=0:"Printed",$G(^PS(52.5,SUS,"P"))="":"Printed",1:"Reprinted")_$S($G(^PSRX(RXN,"TYPE"))>0:" (PARTIAL)",1:"")
"RTN","PSXRPPL",140,0)
 D EN^PSOHLSN1(RXN,"SC","ZU",COM)
"RTN","PSXRPPL",141,0)
 S DA=SUS D DQUE K DA
"RTN","PSXRPPL",142,0)
ACTLOG F JJ=0:0 S JJ=$O(^PSRX(RXN,"A",JJ)) Q:'JJ  S CNT=JJ
"RTN","PSXRPPL",143,0)
 S RFCNT=0 F RF=0:0 S RF=$O(^PSRX(RXN,1,RF)) Q:'RF  S RFCNT=$S(RF<6:RF,1:RF+1)
"RTN","PSXRPPL",144,0)
 S CNT=CNT+1,^PSRX(RXN,"A",0)="^52.3DA^"_CNT_"^"_CNT
"RTN","PSXRPPL",145,0)
LOCK L +^PSRX(RXN):600 G:'$T LOCK
"RTN","PSXRPPL",146,0)
 S ^PSRX(RXN,"A",CNT,0)=DTTM_"^S^"_DUZ_"^"_RFCNT_"^"_COM L -^PSRX(RXN)
"RTN","PSXRPPL",147,0)
 K CNT,COM,RFCNT,%,JJ,RF,Y,RXCNTR
"RTN","PSXRPPL",148,0)
 Q
"RTN","PSXRPPL",149,0)
PPL K PPL,PPL1 S ORD="" F  S ORD=$O(PSOSU(ORD)) Q:(ORD="")!(ORD'>0)  D PPL1
"RTN","PSXRPPL",150,0)
 Q
"RTN","PSXRPPL",151,0)
PPL1 ; print patient labels
"RTN","PSXRPPL",152,0)
 F SFN=0:0 S SFN=$O(PSOSU(ORD,SFN)) Q:'SFN  D
"RTN","PSXRPPL",153,0)
 . S:$L($G(PPL))<240 PPL=$P(PSOSU(ORD,SFN),"^")_","_$G(PPL)
"RTN","PSXRPPL",154,0)
 . S:$L($G(PPL))>239 PPL1=$P(PSOSU(ORD,SFN),"^")_","_$G(PPL1)
"RTN","PSXRPPL",155,0)
 . S DFN=$P(^PS(52.5,SFN,0),"^",3)
"RTN","PSXRPPL",156,0)
 S SUSPT=1,PSNP=$S($P(PSOPAR,"^",8):1,1:0) S:$D(PSOPROP) PFIO=PSOPROP
"RTN","PSXRPPL",157,0)
 D QLBL^PSORXL
"RTN","PSXRPPL",158,0)
 I $D(PPL1) S PSNP=0,PPL=PPL1 D QLBL^PSORXL
"RTN","PSXRPPL",159,0)
 K PPL,PPL1,PSOSU(ORD)
"RTN","PSXRPPL",160,0)
 Q
"RTN","PSXRPPL",161,0)
DQUE ; sets the CMOP indicator field, and printed field in 52.5
"RTN","PSXRPPL",162,0)
 L +^PS(52.5,REC):600 G:'$T DQUE
"RTN","PSXRPPL",163,0)
 I NFLAG=4 D
"RTN","PSXRPPL",164,0)
 . S DA=REC,DIE="^PS(52.5,",DR="3////L;4////"_DT D ^DIE K DIE,DA,DR L -^PS(52.5,REC)  ; the rest moved into PSXRTR
"RTN","PSXRPPL",165,0)
 S CIND=$S(NFLAG=1:"X",NFLAG=2:"P",NFLAG=3:"@",1:0)
"RTN","PSXRPPL",166,0)
 I $G(NFLAG)'=2 D
"RTN","PSXRPPL",167,0)
 .S DA=REC,DIE="^PS(52.5,",DR="3////"_CIND_";4////"_DT
"RTN","PSXRPPL",168,0)
 .D ^DIE K DIE,DA,DR
"RTN","PSXRPPL",169,0)
 .S ^PS(52.5,REC,"P")=1,^PS(52.5,"ADL",DT,REC)=""
"RTN","PSXRPPL",170,0)
 I $G(NFLAG)=2 D  ;print label cycle
"RTN","PSXRPPL",171,0)
 . S DA=REC,DIE="^PS(52.5,",DR="3////"_CIND_";4////"_DTTM_";5////"_DUZ_";7////"_RXCNTR
"RTN","PSXRPPL",172,0)
 . D ^DIE K DIE,DA,DR
"RTN","PSXRPPL",173,0)
 . S ^PS(52.5,REC,"P")=1,^PS(52.5,"ADL",$E($P(^PS(52.5,REC,0),"^",8),1,7),REC)=""
"RTN","PSXRPPL",174,0)
 L -^PS(52.5,REC)
"RTN","PSXRPPL",175,0)
 I $G(NFLAG)=2 D EN^PSOHLSN1(RXN,"SC","ZU","CMOP Suspense Label Printed")
"RTN","PSXRPPL",176,0)
 Q
"RTN","PSXRPPL",177,0)
RX550215 ; put RX into RX multiple TRANS 550.215 for PSXBAT
"RTN","PSXRPPL",178,0)
 I '$G(PSXBAT) D BATCH^PSXRSYU ; first time through create batch, & return PSXBAT
"RTN","PSXRPPL",179,0)
 K DD,DO,DIC,DA,DR,D0
"RTN","PSXRPPL",180,0)
 S:'$D(^PSX(550.2,PSXBAT,15,0)) ^PSX(550.2,PSXBAT,15,0)="^550.215P^^"
"RTN","PSXRPPL",181,0)
 S X=RXN,DA(1)=PSXBAT
"RTN","PSXRPPL",182,0)
 S DIC="^PSX(550.2,"_PSXBAT_",15,",DIC("DR")=".02////^S X=RXF;.03////^S X=DFN;.05////^S X=REC",DIC(0)="ZF"
"RTN","PSXRPPL",183,0)
 D FILE^DICN
"RTN","PSXRPPL",184,0)
 S PSXRXTDA=+Y ;RX DA within PSXBAT 'T'ransmission
"RTN","PSXRPPL",185,0)
 K DD,DO,DIC,DA,DR,D0
"RTN","PSXRPPL",186,0)
 Q
"RTN","PSXRPPL",187,0)
OERRLOCK(RXN) ; set XTMP for OERR/CPRS order locking
"RTN","PSXRPPL",188,0)
 I $G(PSXBAT),$G(RXN),$G(PSXRXTDA) I 1
"RTN","PSXRPPL",189,0)
 E  Q
"RTN","PSXRPPL",190,0)
 I $P(^PSX(550.2,PSXBAT,15,PSXRXTDA,0),U,1)'=RXN Q
"RTN","PSXRPPL",191,0)
RXNSET ; set ^XTMP("ORLK-"_ORDER per IA 4001 needs RXN
"RTN","PSXRPPL",192,0)
 Q:'$G(RXN)
"RTN","PSXRPPL",193,0)
 N ORD,NOW,NOW1 S ORD=+$P($G(^PSRX(+$G(RXN),"OR1")),"^",2)
"RTN","PSXRPPL",194,0)
 Q:'ORD
"RTN","PSXRPPL",195,0)
 S NOW=$$NOW^XLFDT,NOW1=$$FMADD^XLFDT(NOW,1)
"RTN","PSXRPPL",196,0)
 S ^XTMP("ORLK-"_+ORD,0)=NOW1_U_NOW_"^CPRS/CMOP RX/Order Lock",^(1)=DUZ_U_$J
"RTN","PSXRPPL",197,0)
 Q
"RTN","PSXRPPL",198,0)
RXNCLEAR ; needs RXN
"RTN","PSXRPPL",199,0)
 Q:'$G(RXN)
"RTN","PSXRPPL",200,0)
 N ORD S ORD=+$P($G(^PSRX(+$G(RXN),"OR1")),"^",2) Q:'ORD
"RTN","PSXRPPL",201,0)
 I $D(^XTMP("ORLK-"_ORD,0)),^(0)["CPRS/CMOP" K ^XTMP("ORLK-"_ORD)
"RTN","PSXRPPL",202,0)
 Q
"RTN","PSXRPPL1")
0^2^B56796011
"RTN","PSXRPPL1",1,0)
PSXRPPL1 ;BIR/WPB - Resets Suspense to Print/Transmit ;10/02/97
"RTN","PSXRPPL1",2,0)
 ;;2.0;CMOP;**3,48,62,66,65,69,73,74,81,83**;11 Apr 97;Build 2
"RTN","PSXRPPL1",3,0)
 ;Reference to ^PSRX( supported by DBIA #1977
"RTN","PSXRPPL1",4,0)
 ;Reference to File #59  supported by DBIA #1976
"RTN","PSXRPPL1",5,0)
 ;Reference to PSOSURST  supported by DBIA #1970
"RTN","PSXRPPL1",6,0)
 ;Reference to ^PS(52.5, supported by DBIA #1978
"RTN","PSXRPPL1",7,0)
 ;Reference to ^BPSUTIL  supported by DBIA #4410
"RTN","PSXRPPL1",8,0)
 ;Reference to ^PSSLOCK  supported by DBIA #2789
"RTN","PSXRPPL1",9,0)
 ;Reference to ^PSOBPSUT supported by DBIA #4701
"RTN","PSXRPPL1",10,0)
 ;Reference to ^PSOBPSU1 supported by DBIA #4702
"RTN","PSXRPPL1",11,0)
 ;Reference to ^PSOREJUT supported by DBIA #4706
"RTN","PSXRPPL1",12,0)
 ;Reference to ^PSOREJU3 supported by DBIA #5186
"RTN","PSXRPPL1",13,0)
 ;Reference to ^PSOBPSU2 supported by DBIA #4970
"RTN","PSXRPPL1",14,0)
 ;Reference to ^PSOSULB1 supported by DBIA #2478
"RTN","PSXRPPL1",15,0)
 ;Reference to LOG^BPSOSL supported by ICR# 6764
"RTN","PSXRPPL1",16,0)
 ;Reference to IEN59^BPSOSRX supported by ICR# 4412
"RTN","PSXRPPL1",17,0)
 ;
"RTN","PSXRPPL1",18,0)
 ;This routine will reset the Queued flags and the printed flags in
"RTN","PSXRPPL1",19,0)
 ;PS(52.5 to 'Queued' and 'Printed' respectively and either retransmits
"RTN","PSXRPPL1",20,0)
 ;the data to the CMOP or prints the labels.
"RTN","PSXRPPL1",21,0)
START ;initializes local variables
"RTN","PSXRPPL1",22,0)
 I '$D(^XUSEC("PSXCMOPMGR",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRPPL1",23,0)
 I '$D(^XUSEC("PSX XMIT",DUZ)) W !,"You are not authorized to use this option!" Q
"RTN","PSXRPPL1",24,0)
 S SWITCH=0
"RTN","PSXRPPL1",25,0)
 K ^TMP($J,"PSX")
"RTN","PSXRPPL1",26,0)
QRY ;initial message and option menu
"RTN","PSXRPPL1",27,0)
 W !
"RTN","PSXRPPL1",28,0)
 S DIR(0)="NAO^1:3:0",DIR("A")="Select (1, 2, 3):  ",DIR("A",1)="  1 - Reset CMOP Batches for Transmission"
"RTN","PSXRPPL1",29,0)
 S DIR("A",2)="  2 - Reprint CMOP Batches",DIR("A",4)="  3 - Standard Reprint Batches from Suspense"
"RTN","PSXRPPL1",30,0)
 S DIR("?")="Enter a number between 1 and 3.",DIR("??")=$S($G(PSXVER):"^D HELP^PSXSRP",1:"^D MSG2^PSXRHLP") D ^DIR K DIR G:(Y<0)!($D(DIRUT)) EXIT S REPLY=Y K Y,X
"RTN","PSXRPPL1",31,0)
 I REPLY=1 S (PSXTRANS,PSXFLAG,SWITCH)=1 G:$G(PSXVER) ^PSXSRST G:'$G(PSXVER) BEGIN
"RTN","PSXRPPL1",32,0)
 I REPLY=2 S (PSXTRANS,PSXFLAG,SWITCH)=2 G:$G(PSXVER) ^PSXSRST G:'$G(PSXVER) BEGIN
"RTN","PSXRPPL1",33,0)
 I REPLY=3 S PSXFLG=1 G START^PSOSURST
"RTN","PSXRPPL1",34,0)
 K REPLY
"RTN","PSXRPPL1",35,0)
 Q
"RTN","PSXRPPL1",36,0)
BEGIN ;confirms CMOP processing, if Yes, checks for active site and status
"RTN","PSXRPPL1",37,0)
 ;in the CMOP System file, if not an active site or the system status
"RTN","PSXRPPL1",38,0)
 ;is not stopped the routine exits and processing stops
"RTN","PSXRPPL1",39,0)
 W !
"RTN","PSXRPPL1",40,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Are you sure you want to continue",DIR("?",1)="No - Exits."
"RTN","PSXRPPL1",41,0)
 S DIR("?")=$S(SWITCH=1:"Yes - Transmits data to the CMOP.",SWITCH=2:"Yes - Prints labels.",1:0) D ^DIR K DIR G:(Y=0)!($D(DIRUT)) EXIT K Y
"RTN","PSXRPPL1",42,0)
 S STATUS=$P($G(^PSX(550,+PSXSYS,0)),"^",3) I STATUS'="H" W !,"There is another job in process, please try again later." G EXIT
"RTN","PSXRPPL1",43,0)
ASK ;gets date for the resets
"RTN","PSXRPPL1",44,0)
 K BEGDATE,ENDDATE W !!,?10,$S($G(SWITCH)=1:"RESET and TRANSMIT CMOP DATA",$G(SWITCH)=2:"RESET and REPRINT CMOP LABELS",1:""),!!!,"**** Date Selection ****",!!
"RTN","PSXRPPL1",45,0)
ASK1 I SWITCH=1 S %DT="AEX",%DT("A")="   BEGIN DATE:  " D ^%DT K %DT,%DT("A") G:Y<0 EXIT S PRTDT=Y
"RTN","PSXRPPL1",46,0)
 I SWITCH=2 S %DT="AEX",%DT("A")="   BEGIN DATE:  " D ^%DT K %DT,%DT("A") G:Y<0 EXIT S PRTDT=Y
"RTN","PSXRPPL1",47,0)
 W !! S %DT="AEX",%DT("A")="   ENDING DATE:  " D ^%DT Q:Y<0  S PSXDTRG=Y K %DT,%DT("A")
"RTN","PSXRPPL1",48,0)
 I $G(PRTDT)>$G(PSXDTRG) W !,"Begin Date must be before Ending Date!" G ASK1
"RTN","PSXRPPL1",49,0)
 I '$O(^PS(52.5,"AP",PRTDT-1))!($O(^(0))>PSXDTRG) W !!,$S(SWITCH=1:"Nothing to Transmit.",SWITCH=2:"Nothing to Reprint.",1:0) G EXIT
"RTN","PSXRPPL1",50,0)
 D SDT S PSXERFLG=0
"RTN","PSXRPPL1",51,0)
 I SWITCH=1 D PSXTRANS Q
"RTN","PSXRPPL1",52,0)
 I SWITCH=2 D PRINT Q
"RTN","PSXRPPL1",53,0)
 S PSXSTAT="H" D PSXSTAT^PSXRSYU
"RTN","PSXRPPL1",54,0)
 G EXIT
"RTN","PSXRPPL1",55,0)
PSXTRANS ;
"RTN","PSXRPPL1",56,0)
 W !!
"RTN","PSXRPPL1",57,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="DO YOU WISH TO TRANSMIT TO THE CMOP NOW",DIR("?",1)="No - Exits the option.",DIR("?")="Yes - Transmits to the CMOP." D ^DIR K DIR Q:(Y=0)!($D(DIRUT))  K Y
"RTN","PSXRPPL1",58,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU,ASK^PSXRSUS
"RTN","PSXRPPL1",59,0)
 Q
"RTN","PSXRPPL1",60,0)
PRINT ;
"RTN","PSXRPPL1",61,0)
 W !!
"RTN","PSXRPPL1",62,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="DO YOU WISH REPRINT CMOP LABELS NOW",DIR("?",1)="No - Exits the option.",DIR("?")="Yes - Reprints CMOP labels." D ^DIR K DIR Q:(Y=0)!($D(DIRUT))  K Y
"RTN","PSXRPPL1",63,0)
 S PSXSTAT="T" D PSXSTAT^PSXRSYU,ASK^PSXRSUS
"RTN","PSXRPPL1",64,0)
 Q
"RTN","PSXRPPL1",65,0)
SDT ;the following subroutines go through the PS(52.5 global and pull the
"RTN","PSXRPPL1",66,0)
 ;data needed to reset the Queued/Printed nodes
"RTN","PSXRPPL1",67,0)
 S SDT=PRTDT-1 F  S SDT=$O(^PS(52.5,"AP",SDT)),DFN=0 Q:(SDT>PSXDTRG)!(SDT="")  D DFN
"RTN","PSXRPPL1",68,0)
 Q
"RTN","PSXRPPL1",69,0)
DFN ;
"RTN","PSXRPPL1",70,0)
 F  S DFN=$O(^PS(52.5,"AP",SDT,DFN)),REC=0 Q:(DFN="")!(DFN'>0)  D REC
"RTN","PSXRPPL1",71,0)
 Q
"RTN","PSXRPPL1",72,0)
REC ;
"RTN","PSXRPPL1",73,0)
 F  S REC=$O(^PS(52.5,"AP",SDT,DFN,REC)) Q:(REC'>0)!(REC="")  D:$G(^PS(52.5,REC,0)) CHECK
"RTN","PSXRPPL1",74,0)
 K ZDIV
"RTN","PSXRPPL1",75,0)
 Q
"RTN","PSXRPPL1",76,0)
CHECK ;
"RTN","PSXRPPL1",77,0)
 S STAT=$P($G(^PS(52.5,REC,0)),U,7),PRINT=$G(^PS(52.5,REC,"P")),PSXPTR=$P($G(^PS(52.5,REC,0)),U,1)
"RTN","PSXRPPL1",78,0)
 S RXF="" F XXF=0:0 S XXF=$O(^PSRX(PSXPTR,1,XXF)) Q:XXF'>0  S RXF=XXF
"RTN","PSXRPPL1",79,0)
 S ZDIV=$S($G(RXF)>0:$P($G(^PSRX(PSXPTR,1,RXF,0)),U,9),1:$P($G(^PSRX(PSXPTR,2)),U,9)) I $G(ZDIV)'=$G(PSOSITE) Q
"RTN","PSXRPPL1",80,0)
 S:RXF'="" GONE=$P($G(^PSRX(PSXPTR,1,RXF,0)),U,18)
"RTN","PSXRPPL1",81,0)
 S:RXF="" GONE=$P($G(^PSRX(PSXPTR,2)),U,13)
"RTN","PSXRPPL1",82,0)
 I (STAT="P")&(PRINT=1)&($G(GONE)="") D RESET
"RTN","PSXRPPL1",83,0)
 K GONE,RXF,XXF
"RTN","PSXRPPL1",84,0)
 Q
"RTN","PSXRPPL1",85,0)
RESET ;resets the Queued/Printed flags to Queued and not Printed
"RTN","PSXRPPL1",86,0)
 L +^PS(52.5,REC):DTIME Q:'$T
"RTN","PSXRPPL1",87,0)
 S DIE="^PS(52.5,",DA=REC,DR="2////2;3////Q" D ^DIE L -^PS(52.5,REC) K DIE,DR,DA
"RTN","PSXRPPL1",88,0)
 S:$G(PSXVER) $P(^PSRX(PSXPTR,"STA"),U,1)=5 S:'$G(PSXVER) $P(^PSRX(PSXPTR,0),U,15)=5 K ^PS(52.5,"AC",DFN,SDT,REC)
"RTN","PSXRPPL1",89,0)
 Q
"RTN","PSXRPPL1",90,0)
PRTERR ; auto error trap for prt cmop local
"RTN","PSXRPPL1",91,0)
 S XXERR=$$EC^%ZOSV
"RTN","PSXRPPL1",92,0)
 S PSXDIVNM=$$GET1^DIQ(59,PSOSITE,.01)
"RTN","PSXRPPL1",93,0)
 ;save an image of the transient file 550.1 for 2 days
"RTN","PSXRPPL1",94,0)
 D NOW^%DTC S DTTM=%
"RTN","PSXRPPL1",95,0)
 S X=$$FMADD^XLFDT(DT,+2) S ^XTMP("PSXERR "_DTTM,0)=X_U_DT_U_"CMOP "_XXERR
"RTN","PSXRPPL1",96,0)
 M ^XTMP("PSXERR "_DTTM,550.1)=^PSX(550.1)
"RTN","PSXRPPL1",97,0)
 S XMSUB="CMOP Error "_PSXDIVNM_" "_$$GET1^DIQ(550.2,+$G(PSXBAT),.01)
"RTN","PSXRPPL1",98,0)
 D GRP1^PSXNOTE
"RTN","PSXRPPL1",99,0)
 ;S XMY(DUZ)=""
"RTN","PSXRPPL1",100,0)
 S XMTEXT="TEXT("
"RTN","PSXRPPL1",101,0)
 S TEXT(1,0)=$S($G(PSXCS):"",1:"NON-")_"CS CMOP Print Local encountered the following error. Please investigate"
"RTN","PSXRPPL1",102,0)
 S TEXT(2,0)="Division:         "_PSXDIVNM
"RTN","PSXRPPL1",103,0)
 S TEXT(3,0)="Type/Batch        "_$S($G(PSXCS):"CS",1:"NON-CS")_" / "_$$GET1^DIQ(550.2,$G(PSXBAT),.01)
"RTN","PSXRPPL1",104,0)
 S TEXT(4,0)="Error:            "_XXERR
"RTN","PSXRPPL1",105,0)
 S TEXT(5,0)="This batch has been set to closed."
"RTN","PSXRPPL1",106,0)
 S TEXT(6,0)="Call NVS to investigate which prescriptions have been printed and which are yet to print."
"RTN","PSXRPPL1",107,0)
 S TEXT(7,0)="A copy of file 550.1 can be found in ^XTMP(""PSXERR "_DTTM_""")"
"RTN","PSXRPPL1",108,0)
 D ^%ZTER
"RTN","PSXRPPL1",109,0)
 D ^XMD
"RTN","PSXRPPL1",110,0)
 I $G(PSXBAT) D
"RTN","PSXRPPL1",111,0)
 . N DA,DIE,DR S DIE="^PSX(550.2,",DA=PSXBAT,DR="1////4"
"RTN","PSXRPPL1",112,0)
 . D ^DIE
"RTN","PSXRPPL1",113,0)
 G UNWIND^%ZTER
"RTN","PSXRPPL1",114,0)
 ;
"RTN","PSXRPPL1",115,0)
SBTECME(PSXTP,PSXDV,THRDT,PULLDT) ; - Sumitting prescriptions to EMCE (3rd Party Billing)
"RTN","PSXRPPL1",116,0)
 ;Input: PSXTP  - Type of prescriptions "C" - Controlled Subs / "N" Non-Controlled Subs
"RTN","PSXRPPL1",117,0)
 ;       PSXDV  - Pointer to DIVSION file (#59)
"RTN","PSXRPPL1",118,0)
 ;       THRDT  - T+N when scheduling the THROUGH DATE to run CMOP Transmission
"RTN","PSXRPPL1",119,0)
 ;       PULLDT - T+N+PULL DAYS parameter in file# 59, OUTPATIENT SITE
"RTN","PSXRPPL1",120,0)
 ;Output:SBTECME- Number of prescriptions submitted to ECME
"RTN","PSXRPPL1",121,0)
 ;
"RTN","PSXRPPL1",122,0)
 N PSOLRX,REC,RESP,RFL,RX,SBTECME,SDT,XDFN
"RTN","PSXRPPL1",123,0)
 ;
"RTN","PSXRPPL1",124,0)
 I '$$ECMEON^BPSUTIL(PSXDV)!'$$CMOPON^BPSUTIL(PSXDV) Q
"RTN","PSXRPPL1",125,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL1",126,0)
 S (SDT,SBTECME)=0
"RTN","PSXRPPL1",127,0)
 F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT)) S XDFN=0 Q:(SDT>PULLDT)!(SDT'>0)  D
"RTN","PSXRPPL1",128,0)
 . F  S XDFN=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT,XDFN)) S REC=0 Q:(XDFN'>0)!(XDFN="")  D
"RTN","PSXRPPL1",129,0)
 . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTP,PSXDV,SDT,XDFN,REC)) Q:(REC'>0)!(REC="")  D
"RTN","PSXRPPL1",130,0)
 . . . S (PSOLRX,RX)=+$$GET1^DIQ(52.5,REC,.01,"I") I 'RX Q
"RTN","PSXRPPL1",131,0)
 . . . S RFL=$$GET1^DIQ(52.5,REC,9,"I") I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL1",132,0)
 . . . I $$XMIT^PSXBPSUT(REC) D
"RTN","PSXRPPL1",133,0)
 . . . . I SDT>THRDT,'$D(^TMP("PSXEPHDFN",$J,XDFN)) Q
"RTN","PSXRPPL1",134,0)
 . . . . I $$PATCH^XPDUTL("PSO*7.0*148") D
"RTN","PSXRPPL1",135,0)
 . . . . . I $$RETRX^PSOBPSUT(RX,RFL),SDT>DT Q
"RTN","PSXRPPL1",136,0)
 . . . . . I $$DOUBLE(RX,RFL) Q
"RTN","PSXRPPL1",137,0)
 . . . . . I $$FIND^PSOREJUT(RX,RFL,,"79,88",,1) Q
"RTN","PSXRPPL1",138,0)
 . . . . . I '$$RETRX^PSOBPSUT(RX,RFL),'$$ECMESTAT^PSXRPPL2(RX,RFL) Q
"RTN","PSXRPPL1",139,0)
 . . . . . I $$PATCH^XPDUTL("PSO*7.0*289") Q:'$$DUR^PSXRPPL2(RX,RFL)  ;ePharm Host error hold
"RTN","PSXRPPL1",140,0)
 . . . . . I $$PATCH^XPDUTL("PSO*7.0*289"),RFL>0,$$STATUS^PSOBPSUT(RX,RFL-1)'="" Q:'$$DSH^PSXRPPL2(REC)  ;ePharm 3/4 days supply (refill)
"RTN","PSXRPPL1",141,0)
 . . . . . I $$PATCH^XPDUTL("PSO*7.0*289"),RFL=0 Q:'$$DSH^PSXRPPL2(REC)  ;ePharm 3/4 days supply (original fill)
"RTN","PSXRPPL1",142,0)
 . . . . . D ECMESND^PSOBPSU1(RX,RFL,"","PC",,1,,,,.RESP)
"RTN","PSXRPPL1",143,0)
 . . . . . ;
"RTN","PSXRPPL1",144,0)
 . . . . . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-SBTECME, RESP="_$G(RESP))  ; ICR #4412,6764
"RTN","PSXRPPL1",145,0)
 . . . . . ;
"RTN","PSXRPPL1",146,0)
 . . . . . I $G(RESP)'["IN PROGRESS",$$PATCH^XPDUTL("PSO*7.0*287"),$$TRISTA^PSOREJU3(RX,RFL,.RESP,"PC") S ^TMP("PSXEPHNB",$J,RX,RFL)=$G(RESP)
"RTN","PSXRPPL1",147,0)
 . . . . . ;
"RTN","PSXRPPL1",148,0)
 . . . . . I $D(RESP),'RESP S SBTECME=SBTECME+1
"RTN","PSXRPPL1",149,0)
 . . . . . S ^TMP("PSXEPHDFN",$J,XDFN)=""
"RTN","PSXRPPL1",150,0)
 . . . D PSOUL^PSSLOCK(PSOLRX)
"RTN","PSXRPPL1",151,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL1",152,0)
 Q SBTECME
"RTN","PSXRPPL1",153,0)
 ;
"RTN","PSXRPPL1",154,0)
DOUBLE(RX,RFL) ; Checks if previous fill is still being worked on by CMOP
"RTN","PSXRPPL1",155,0)
 ;Input: (r) RX  - Prescription IEN
"RTN","PSXRPPL1",156,0)
 ;       (r) RFL - Fill number
"RTN","PSXRPPL1",157,0)
 ;Output:    0 - Previous fill not with CMOP / 1 - CMOP working on previous fill
"RTN","PSXRPPL1",158,0)
 N CMP,DOUBLE,STS
"RTN","PSXRPPL1",159,0)
 ; 
"RTN","PSXRPPL1",160,0)
 I 'RFL!'$D(^PSRX(RX,4)) Q 0
"RTN","PSXRPPL1",161,0)
 I $$STATUS^PSOBPSUT(RX,RFL-1)="" Q 0
"RTN","PSXRPPL1",162,0)
 S DOUBLE=0,CMP=999
"RTN","PSXRPPL1",163,0)
 F  S CMP=$O(^PSRX(RX,4,CMP),-1) Q:'CMP  D  I DOUBLE Q
"RTN","PSXRPPL1",164,0)
 . I $$GET1^DIQ(52.01,CMP_","_RX,2,"I")'=(RFL-1) Q
"RTN","PSXRPPL1",165,0)
 . S STS=$$GET1^DIQ(52.01,CMP_","_RX,3,"I")
"RTN","PSXRPPL1",166,0)
 . I STS=0!(STS=2) S DOUBLE=1
"RTN","PSXRPPL1",167,0)
 Q DOUBLE
"RTN","PSXRPPL1",168,0)
 ;
"RTN","PSXRPPL1",169,0)
EXIT ;
"RTN","PSXRPPL1",170,0)
 K DFN,PSXDAYS,PSXDTRG,SWITCH,STAT,PRINT,PSXTRANS,REC,REPLY,SDT,X,X1,X2,Y,ANSWER,STATUS,PSXFLAG,PSXPTR,PSXSTAT
"RTN","PSXRPPL1",171,0)
 K DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","PSXRPPL1",172,0)
 Q
"RTN","PSXRPPL2")
0^3^B74625439
"RTN","PSXRPPL2",1,0)
PSXRPPL2 ;BIR/WPB - Print From Suspense Utilities ;06/10/08
"RTN","PSXRPPL2",2,0)
 ;;2.0;CMOP;**65,69,73,74,79,81,83**;11 Apr 97;Build 2
"RTN","PSXRPPL2",3,0)
 ;Reference to ^PSRX( supported by DBIA #1977
"RTN","PSXRPPL2",4,0)
 ;Reference to ^PS(52.5, supported by DBIA #1978
"RTN","PSXRPPL2",5,0)
 ;Reference to ^PSSLOCK  supported by DBIA #2789
"RTN","PSXRPPL2",6,0)
 ;Reference to ^PSOBPSUT supported by DBIA #4701
"RTN","PSXRPPL2",7,0)
 ;Reference to ^PSOBPSU1 supported by DBIA #4702
"RTN","PSXRPPL2",8,0)
 ;Reference to ^PSOBPSU2 supported by DBIA #4970
"RTN","PSXRPPL2",9,0)
 ;Reference to ^PSOREJUT supported by DBIA #4706
"RTN","PSXRPPL2",10,0)
 ;Reference to ^PSOREJU3 supported by DBIA #5186
"RTN","PSXRPPL2",11,0)
 ;Reference to CHANGE^PSOSUCH1 supported by DBIA #5427
"RTN","PSXRPPL2",12,0)
 ;Reference to PREVRX^PSOREJP2 supported by DBIA #5912
"RTN","PSXRPPL2",13,0)
 ;Reference to $$BILLABLE^IBNCPDP supported by DBIA #6243
"RTN","PSXRPPL2",14,0)
 ;Reference to LOG^BPSOSL supported by ICR# 6764
"RTN","PSXRPPL2",15,0)
 ;Reference to IEN59^BPSOSRX supported by ICR# 4412
"RTN","PSXRPPL2",16,0)
 ;
"RTN","PSXRPPL2",17,0)
CHKDFN(THRDT) ; use the patient 'C' index under RX multiple in file 550.2 to GET dfn to gather Patients' future RXs
"RTN","PSXRPPL2",18,0)
 ;Input: THRDT - THROUGH DATE to run CMOP transmission
"RTN","PSXRPPL2",19,0)
 ;
"RTN","PSXRPPL2",20,0)
 ; This procedure assumes the following variables to exist:
"RTN","PSXRPPL2",21,0)
 ;   PRTDT = Transmit/Print data through this date
"RTN","PSXRPPL2",22,0)
 ;   PSXBAT = Batch, pointer to file#550.2, CMOP Transmission
"RTN","PSXRPPL2",23,0)
 ;   PSXDTRG = Pull ahead through date
"RTN","PSXRPPL2",24,0)
 ;   PSXTDIV = Division
"RTN","PSXRPPL2",25,0)
 ;   PSXTYP = "C" if running for Controlled Substance, "N" otherwise
"RTN","PSXRPPL2",26,0)
 ;
"RTN","PSXRPPL2",27,0)
 N NDFN,PSOLRX,PSXPTNM,REC,RESP,RFL,RX,SBTECME,SDT,XDFN
"RTN","PSXRPPL2",28,0)
 ;
"RTN","PSXRPPL2",29,0)
 I '$D(^PSX(550.2,PSXBAT,15,"C")) Q
"RTN","PSXRPPL2",30,0)
 S SBTECME=0
"RTN","PSXRPPL2",31,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL2",32,0)
 S PSXPTNM=""
"RTN","PSXRPPL2",33,0)
 F  S PSXPTNM=$O(^PSX(550.2,PSXBAT,15,"C",PSXPTNM)) Q:PSXPTNM=""  D
"RTN","PSXRPPL2",34,0)
 . S XDFN=0
"RTN","PSXRPPL2",35,0)
 . F  S XDFN=$O(^PSX(550.2,PSXBAT,"15","C",PSXPTNM,XDFN)) Q:(XDFN'>0)  D
"RTN","PSXRPPL2",36,0)
 . . S SDT=PRTDT
"RTN","PSXRPPL2",37,0)
 . . F  S SDT=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT)) Q:(SDT>PSXDTRG)!(SDT="")  D
"RTN","PSXRPPL2",38,0)
 . . . S NDFN=0
"RTN","PSXRPPL2",39,0)
 . . . F  S NDFN=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN)) Q:NDFN'>0  I NDFN=XDFN D
"RTN","PSXRPPL2",40,0)
 . . . . S REC=0
"RTN","PSXRPPL2",41,0)
 . . . . F  S REC=$O(^PS(52.5,"CMP","Q",PSXTYP,PSXTDIV,SDT,NDFN,REC)) Q:REC'>0  D
"RTN","PSXRPPL2",42,0)
 . . . . . S (PSOLRX,RX)=+$$GET1^DIQ(52.5,REC,.01,"I") I 'RX Q
"RTN","PSXRPPL2",43,0)
 . . . . . S RFL=$$GET1^DIQ(52.5,REC,9,"I") I RFL="" S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",44,0)
 . . . . . I $$XMIT^PSXBPSUT(REC) D
"RTN","PSXRPPL2",45,0)
 . . . . . . I SDT>THRDT,'$D(^TMP("PSXEPHDFN",$J,XDFN)) Q
"RTN","PSXRPPL2",46,0)
 . . . . . . I $$PATCH^XPDUTL("PSO*7.0*148") D
"RTN","PSXRPPL2",47,0)
 . . . . . . . I $$RETRX^PSOBPSUT(RX,RFL),SDT>DT Q
"RTN","PSXRPPL2",48,0)
 . . . . . . . I $$DOUBLE^PSXRPPL1(RX,RFL) Q
"RTN","PSXRPPL2",49,0)
 . . . . . . . I $$FIND^PSOREJUT(RX,RFL,,"79,88",,1) Q
"RTN","PSXRPPL2",50,0)
 . . . . . . . I '$$RETRX^PSOBPSUT(RX,RFL),$$ECMESTAT(RX,RFL) Q
"RTN","PSXRPPL2",51,0)
 . . . . . . . I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DUR(RX,RFL),'$$DSH(REC) Q
"RTN","PSXRPPL2",52,0)
 . . . . . . . D ECMESND^PSOBPSU1(RX,RFL,"","PC",,1,,,,.RESP)
"RTN","PSXRPPL2",53,0)
 . . . . . . . ;
"RTN","PSXRPPL2",54,0)
 . . . . . . . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-CHKDFN, RESP="_$G(RESP))  ; ICR #4412,6764
"RTN","PSXRPPL2",55,0)
 . . . . . . . ;
"RTN","PSXRPPL2",56,0)
 . . . . . . . I $G(RESP)'["IN PROGRESS",$$PATCH^XPDUTL("PSO*7.0*287"),$$TRISTA^PSOREJU3(RX,RFL,.RESP,"PC") S ^TMP("PSXEPHNB",$J,RX,RFL)=$G(RESP)
"RTN","PSXRPPL2",57,0)
 . . . . . . . ;
"RTN","PSXRPPL2",58,0)
 . . . . . . . I $D(RESP),'RESP S SBTECME=SBTECME+1
"RTN","PSXRPPL2",59,0)
 . . . . . . . S ^TMP("PSXEPHDFN",$J,XDFN)=""
"RTN","PSXRPPL2",60,0)
 . . . . . D PSOUL^PSSLOCK(PSOLRX)
"RTN","PSXRPPL2",61,0)
 K ^TMP("PSXEPHDFN",$J)
"RTN","PSXRPPL2",62,0)
 I SBTECME>0 H 60+$S((SBTECME*15)>7200:7200,1:(SBTECME*15))
"RTN","PSXRPPL2",63,0)
 Q
"RTN","PSXRPPL2",64,0)
 ;
"RTN","PSXRPPL2",65,0)
 ; EPHARM is called only by GETDATA^PSXRPPL.  The variable EPHQT is
"RTN","PSXRPPL2",66,0)
 ; Newed in GETDATA.  If EPHQT is set to 1 here, then GETDATA does
"RTN","PSXRPPL2",67,0)
 ; not continue processing the current Rx/Fill; this Rx/Fill will
"RTN","PSXRPPL2",68,0)
 ; not be sent to CMOP if EPHQT is set to 1 here.
"RTN","PSXRPPL2",69,0)
 ;
"RTN","PSXRPPL2",70,0)
EPHARM ; - ePharmacy checks for third party billing
"RTN","PSXRPPL2",71,0)
 ;
"RTN","PSXRPPL2",72,0)
 ; If CMOP is still processing the previous fill ($$DOUBLE), or if the
"RTN","PSXRPPL2",73,0)
 ; RE-TRANSMIT flag is 'Yes' and the send date is in the future, or if
"RTN","PSXRPPL2",74,0)
 ; this prescription has an unresolved 79,88, or RRR reject, then Set
"RTN","PSXRPPL2",75,0)
 ; EPHQT to 1 and Quit.  This Rx/Fill will not be sent to CMOP.
"RTN","PSXRPPL2",76,0)
 ;
"RTN","PSXRPPL2",77,0)
 I $$DOUBLE^PSXRPPL1(RXN,RFL) S EPHQT=1 Q
"RTN","PSXRPPL2",78,0)
 I $$RETRX^PSOBPSUT(RXN,RFL),SDT>DT S EPHQT=1 Q
"RTN","PSXRPPL2",79,0)
 I $$FIND^PSOREJUT(RXN,RFL,,"79,88",,1) S EPHQT=1 Q
"RTN","PSXRPPL2",80,0)
 ;
"RTN","PSXRPPL2",81,0)
 ; $$TRISTA performs checks specific to TRICARE/CHAMPVA.  If the claim
"RTN","PSXRPPL2",82,0)
 ; was rejected or is still "IN PROGRESS", or if it is non-billable,
"RTN","PSXRPPL2",83,0)
 ; then add this Rx to the ^TMP("PSXEPHIN") array and quit.
"RTN","PSXRPPL2",84,0)
 ;
"RTN","PSXRPPL2",85,0)
 I $$PATCH^XPDUTL("PSO*7.0*287"),$$TRISTA^PSOREJU3(RXN,RFL,.RESP,"PC") D EPH Q
"RTN","PSXRPPL2",86,0)
 I $$PATCH^XPDUTL("PSO*7.0*287"),$D(^TMP("PSXEPHNB",$J,RXN,RFL)) D EPH Q
"RTN","PSXRPPL2",87,0)
 ;
"RTN","PSXRPPL2",88,0)
 ; If the claim is still "IN PROGRESS", then add this Rx to the
"RTN","PSXRPPL2",89,0)
 ; ^TMP("PSXEPHIN") array and quit.
"RTN","PSXRPPL2",90,0)
 ;
"RTN","PSXRPPL2",91,0)
 I $$STATUS^PSOBPSUT(RXN,RFL)="IN PROGRESS" D EPH Q
"RTN","PSXRPPL2",92,0)
 ;
"RTN","PSXRPPL2",93,0)
 ; If this Prescription violates the 3/4 supply (i.e. if it is too soon
"RTN","PSXRPPL2",94,0)
 ; to refill), then Set EPHQT to 1 and Quit.  This Rx/Fill will not be
"RTN","PSXRPPL2",95,0)
 ; sent to CMOP.
"RTN","PSXRPPL2",96,0)
 ;
"RTN","PSXRPPL2",97,0)
 I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DSH(REC) S EPHQT=1 Q
"RTN","PSXRPPL2",98,0)
 ;
"RTN","PSXRPPL2",99,0)
 ; If there is a host reject for this Rx/Fill, then add this Rx to the
"RTN","PSXRPPL2",100,0)
 ; ^TMP("PSXEPHIN") array and quit.
"RTN","PSXRPPL2",101,0)
 ;
"RTN","PSXRPPL2",102,0)
 I $$PATCH^XPDUTL("PSO*7.0*289"),'$$DUR(RXN,RFL) D EPH Q
"RTN","PSXRPPL2",103,0)
 Q
"RTN","PSXRPPL2",104,0)
 ;
"RTN","PSXRPPL2",105,0)
 ; EPH is called only by EPHARM, above.  It adds a prescriptions to the
"RTN","PSXRPPL2",106,0)
 ; ^TMP("PSXEPHIN") array.  Of those Prescriptions not sent to the CMOP
"RTN","PSXRPPL2",107,0)
 ; facility and left in the suspense queue, some are added to this
"RTN","PSXRPPL2",108,0)
 ; array.  Those in this array will be listed in the email sent to users
"RTN","PSXRPPL2",109,0)
 ; indicating that they were left in the queue (see ^PSXBPSMS).  That
"RTN","PSXRPPL2",110,0)
 ; email states these Rxs were not transmitted to the CMOP facility
"RTN","PSXRPPL2",111,0)
 ; because either a) a response from the payer was not received, or b)
"RTN","PSXRPPL2",112,0)
 ; the Rx is non-billable.
"RTN","PSXRPPL2",113,0)
 ;
"RTN","PSXRPPL2",114,0)
EPH ; - Store Rx not xmitted to CMOP in XTMP file for MailMan message.
"RTN","PSXRPPL2",115,0)
 S ^TMP("PSXEPHIN",$J,$$RXSITE^PSOBPSUT(RXN),RXN)=RFL,EPHQT=1
"RTN","PSXRPPL2",116,0)
 Q
"RTN","PSXRPPL2",117,0)
 ;
"RTN","PSXRPPL2",118,0)
 ;Description:
"RTN","PSXRPPL2",119,0)
 ;This function checks the Rx's ECME Status to determine if it's acceptable to resubmit
"RTN","PSXRPPL2",120,0)
 ;based on reject codes associated with a previous submission. If Rx was rejected with
"RTN","PSXRPPL2",121,0)
 ;host reject errors, and no other rejects exist, then it's OK to resubmit to ECME.
"RTN","PSXRPPL2",122,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSXRPPL2",123,0)
 ; RFL = Refill number
"RTN","PSXRPPL2",124,0)
 ;Returns: 1 = OK to resubmit
"RTN","PSXRPPL2",125,0)
 ;0 = Don't resubmit
"RTN","PSXRPPL2",126,0)
ECMESTAT(RX,RFL) ;
"RTN","PSXRPPL2",127,0)
 I '$$PATCH^XPDUTL("PSO*7.0*148") Q 0
"RTN","PSXRPPL2",128,0)
 N STATUS,HERR,CHDAT
"RTN","PSXRPPL2",129,0)
 S STATUS=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSXRPPL2",130,0)
 ; Never submitted before, OK to resubmit
"RTN","PSXRPPL2",131,0)
 I STATUS=""!(STATUS["UNSTRANDED") Q 1
"RTN","PSXRPPL2",132,0)
 ; If status other than E REJECTED, don't resubmit
"RTN","PSXRPPL2",133,0)
 I STATUS'="E REJECTED" Q 0
"RTN","PSXRPPL2",134,0)
 ; check for a previous host reject:
"RTN","PSXRPPL2",135,0)
 ;  1 - if host reject date expired allow to print; 0 - if not expired don't print
"RTN","PSXRPPL2",136,0)
 ;    2 - if not defined allow to continue with evaluation for new host reject
"RTN","PSXRPPL2",137,0)
 S CHDAT=$$CHHEDT(RX,RFL) Q:CHDAT=1 1 Q:CHDAT=0 0
"RTN","PSXRPPL2",138,0)
 ;*****************************************************************************************************
"RTN","PSXRPPL2",139,0)
 ;   NOTE: MAKE SURE THAT IGNORED REJECTS WILL PROCESS WHENEVER MODIFICATIONS ARE MADE TO HOST REJECT 
"RTN","PSXRPPL2",140,0)
 ;         Ignored rejects are handled by default when this subroutine Q 0 at the end.
"RTN","PSXRPPL2",141,0)
 ;*****************************************************************************************************
"RTN","PSXRPPL2",142,0)
  ; check host rejects
"RTN","PSXRPPL2",143,0)
 S HERR=$$HOSTREJ(RX,RFL,0)
"RTN","PSXRPPL2",144,0)
 I HERR&(CHDAT=2) D SHDTLOG(RX,RFL) Q 0  ;Host reject and no suspense hold date defined yet; define it and don't resubmit
"RTN","PSXRPPL2",145,0)
 I HERR&(CHDAT) Q 1  ;Host reject & suspense hold date has expired; resubmit
"RTN","PSXRPPL2",146,0)
 Q 0  ;NOTE - IF YOU CHANGE THIS Q 0, IGNORED REJECTS WILL RESUBMIT AND REJECT AGAIN WHICH IS VERY BAD.
"RTN","PSXRPPL2",147,0)
 ;
"RTN","PSXRPPL2",148,0)
 ;Description: 
"RTN","PSXRPPL2",149,0)
 ;This function determines whether the RX SUSPENSE has a DAYS SUPPLY HOLD
"RTN","PSXRPPL2",150,0)
 ;condition.
"RTN","PSXRPPL2",151,0)
 ;Input: REC = Pointer to Suspense file (#52.5)
"RTN","PSXRPPL2",152,0)
 ;Returns: 1 or 0
"RTN","PSXRPPL2",153,0)
 ;1 (one) if 3/4 of days supply has elapsed.
"RTN","PSXRPPL2",154,0)
 ;0 (zero) is returned if 3/4 of days supply has not elapsed. 
"RTN","PSXRPPL2",155,0)
 ;
"RTN","PSXRPPL2",156,0)
DSH(REC) ;ePharmacy API to check for 3/4 days supply hold
"RTN","PSXRPPL2",157,0)
 N PSINSUR,PSARR,SHDT,DSHOLD,DSHDT,PS0,COMM,DIE,DA,DR,RXIEN,RFL,DAYSSUP,LSTFIL,PTDFN,IBINS,DRG
"RTN","PSXRPPL2",158,0)
 N SFN,SDT,ELIG,PREVRX
"RTN","PSXRPPL2",159,0)
 S DSHOLD=1,PS0=^PS(52.5,REC,0),RXIEN=$P(PS0,U,1),RFL=$P(PS0,U,13)
"RTN","PSXRPPL2",160,0)
 S LSTFIL=$$LSTRFL^PSOBPSU1(RXIEN),PTDFN=$$GET1^DIQ(52,RXIEN,"2","I")
"RTN","PSXRPPL2",161,0)
 I RFL="" S RFL=LSTFIL
"RTN","PSXRPPL2",162,0)
 S IBSTAT=$$INSUR^IBBAPI(PTDFN,,"E",.IBINS,"1"),DRG=$$GET1^DIQ(52,RXIEN,"6","I")
"RTN","PSXRPPL2",163,0)
 S ELIG=$S(RFL:$P($G(^PSRX(+RXIEN,1,RFL,"EPH")),U,5),1:$P($G(^PSRX(+RXIEN,"EPH")),U,5))
"RTN","PSXRPPL2",164,0)
 ;
"RTN","PSXRPPL2",165,0)
 ; Don't hold Rx where the previous fill was not ebillable
"RTN","PSXRPPL2",166,0)
 I LSTFIL>0,$$STATUS^BPSOSRX(RXIEN,LSTFIL-1)="" Q DSHOLD
"RTN","PSXRPPL2",167,0)
 ; Don't hold when the Rx has SC/EI flagged
"RTN","PSXRPPL2",168,0)
 I $P($G(^PSRX(RXIEN,"ICD",1,0)),U,2,10)[1 Q DSHOLD
"RTN","PSXRPPL2",169,0)
 ; Don't hold rx if drug is non-billable
"RTN","PSXRPPL2",170,0)
 I '$$BILLABLE^IBNCPDP(DRG,ELIG) Q DSHOLD ; IA# 6243
"RTN","PSXRPPL2",171,0)
 ; Don't hold if no insurance
"RTN","PSXRPPL2",172,0)
 I 'IBSTAT!(IBSTAT=-1) Q DSHOLD
"RTN","PSXRPPL2",173,0)
 ;
"RTN","PSXRPPL2",174,0)
 S DSHDT=$$DSHDT(RXIEN,RFL) ; 3/4 of days supply date
"RTN","PSXRPPL2",175,0)
 S PREVRX=$P(DSHDT,U,2)
"RTN","PSXRPPL2",176,0)
 S DSHDT=$P(DSHDT,U)
"RTN","PSXRPPL2",177,0)
 I DSHDT>DT S DSHOLD=0 D
"RTN","PSXRPPL2",178,0)
 . I DSHDT'=$P(PS0,U,14) D  ; Update Suspense Hold Date and Activity Log
"RTN","PSXRPPL2",179,0)
 . . ; MRD;PSX*2.0*79 - If a previous Rx is used in the 3/4 days' supply
"RTN","PSXRPPL2",180,0)
 . . ; calculation, capture that Rx in the activity log.
"RTN","PSXRPPL2",181,0)
 . . S COMM="3/4 of Days Supply SUSPENSE HOLD until "_$$FMTE^XLFDT(DSHDT,"2D")
"RTN","PSXRPPL2",182,0)
 . . I PREVRX'="" S COMM=COMM_" (prior Rx "_PREVRX_")"
"RTN","PSXRPPL2",183,0)
 . . S COMM=COMM_"."
"RTN","PSXRPPL2",184,0)
 . . S DAYSSUP=$$LFDS(RXIEN)
"RTN","PSXRPPL2",185,0)
 . . D RXACT^PSOBPSU2(RXIEN,RFL,COMM,"S",+$G(DUZ)) ; Update Activity Log
"RTN","PSXRPPL2",186,0)
 . . S DR="10///^S X=DSHDT",DIE="^PS(52.5,",DA=REC D ^DIE ; File Suspense Hold Date
"RTN","PSXRPPL2",187,0)
 . . N DA,DIE,DR,PSOX,SFN,INDT,DEAD,RXREC,SUB,XOK,OLD
"RTN","PSXRPPL2",188,0)
 . . S DA=REC,DIE="^PS(52.5,",DR=".02///"_DSHDT D ^DIE
"RTN","PSXRPPL2",189,0)
 . . S SFN=REC,DEAD=0,INDT=DSHDT D CHANGE^PSOSUCH1(RXIEN,RFL)
"RTN","PSXRPPL2",190,0)
 . . Q
"RTN","PSXRPPL2",191,0)
 . Q
"RTN","PSXRPPL2",192,0)
 Q DSHOLD
"RTN","PSXRPPL2",193,0)
 ;
"RTN","PSXRPPL2",194,0)
DSHDT(RXIEN,RFL) ; ePharmacy function to determine the 3/4 of the days supply date
"RTN","PSXRPPL2",195,0)
 ; Input: RXIEN = Prescription file #52 ien
"RTN","PSXRPPL2",196,0)
 ;          RFL = fill#
"RTN","PSXRPPL2",197,0)
 ; Returns: DATE value of last date of service plus 3/4 of days supply
"RTN","PSXRPPL2",198,0)
 ;         PREVRX = Previous Rx if PREVRX^PSOREJP2 identified one that
"RTN","PSXRPPL2",199,0)
 ;                  should be used in the 3/4 days' supply calculation.
"RTN","PSXRPPL2",200,0)
 ;
"RTN","PSXRPPL2",201,0)
 N FILLDT,DAYSSUP,DSH34,PREVRX
"RTN","PSXRPPL2",202,0)
 I '$D(^PSRX(RXIEN,0)) Q -1
"RTN","PSXRPPL2",203,0)
 I $G(RFL)="" Q -1
"RTN","PSXRPPL2",204,0)
 ;
"RTN","PSXRPPL2",205,0)
 D PREVRX^PSOREJP2(RXIEN,RFL,,.FILLDT,.DAYSSUP,.PREVRX)     ; DBIA #5912
"RTN","PSXRPPL2",206,0)
 I FILLDT="" Q -1
"RTN","PSXRPPL2",207,0)
 ;
"RTN","PSXRPPL2",208,0)
 S DSH34=DAYSSUP*.75 ; 3/4 of Days Supply
"RTN","PSXRPPL2",209,0)
 S:DSH34["." DSH34=(DSH34+1)\1
"RTN","PSXRPPL2",210,0)
 ; Return last date of service plus 3/4 of Days Supply date
"RTN","PSXRPPL2",211,0)
 ; and the previous Rx used in the calculation, if any.
"RTN","PSXRPPL2",212,0)
 Q $$FMADD^XLFDT(FILLDT,DSH34)_U_PREVRX
"RTN","PSXRPPL2",213,0)
 ;
"RTN","PSXRPPL2",214,0)
 ; Description: This function returns the DAYS SUPPLY for the Latest Fill
"RTN","PSXRPPL2",215,0)
 ; for a Prescription
"RTN","PSXRPPL2",216,0)
 ; Input: RXIEN = Prescription file #52 IEN
"RTN","PSXRPPL2",217,0)
 ; Returns: DAYS SUPPLY for the latest fill
"RTN","PSXRPPL2",218,0)
 ;          -1 if RXIEN is not valid
"RTN","PSXRPPL2",219,0)
LFDS(RXIEN) ;
"RTN","PSXRPPL2",220,0)
 N RXFIL
"RTN","PSXRPPL2",221,0)
 Q:'$D(^PSRX(RXIEN)) -1
"RTN","PSXRPPL2",222,0)
 S RXFIL=$$LSTRFL^PSOBPSU1(RXIEN)
"RTN","PSXRPPL2",223,0)
 Q $S(RXFIL=0:$P(^PSRX(RXIEN,0),U,8),1:$P(^PSRX(RXIEN,1,RXFIL,0),U,10))
"RTN","PSXRPPL2",224,0)
 ;
"RTN","PSXRPPL2",225,0)
 ;
"RTN","PSXRPPL2",226,0)
 ;Description: ePharmacy API to check for host errors.
"RTN","PSXRPPL2",227,0)
 ;Input: RX = Prescription file #52 IEN
"RTN","PSXRPPL2",228,0)
 ; RFL = Refill number
"RTN","PSXRPPL2",229,0)
 ;Returns: A value of 0 (zero) will be returned when reject codes M6, M8,
"RTN","PSXRPPL2",230,0)
 ;NN, and 99 are present OR if on susp hold which means the prescription should not 
"RTN","PSXRPPL2",231,0)
 ;be sent to CMOP. Otherwise, a value of 1(one) will be returned.
"RTN","PSXRPPL2",232,0)
DUR(RX,RFL) ;
"RTN","PSXRPPL2",233,0)
 N REJ,IDX,TXT,CODE,SHCODE,SHDT,CHDAT1
"RTN","PSXRPPL2",234,0)
 S IDX=""
"RTN","PSXRPPL2",235,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",236,0)
 ; check for a previous host reject:
"RTN","PSXRPPL2",237,0)
 ;  1 - if host reject date expired allow to print; 0 - if not expired don't print
"RTN","PSXRPPL2",238,0)
 ;    2 - if not defined allow to continue with evaluation for new host reject
"RTN","PSXRPPL2",239,0)
 S CHDAT1=$$CHHEDT(RX,RFL) Q:CHDAT1=1 1 Q:CHDAT1=0 0  ;Otherwise continue on to check for a new host reject
"RTN","PSXRPPL2",240,0)
 ; If a host reject exists and no previous Susp Hold Date or log entry,
"RTN","PSXRPPL2",241,0)
 ;    create the log entry and hold rx/fill.
"RTN","PSXRPPL2",242,0)
 S HERR=$$HOSTREJ(RX,RFL,1)
"RTN","PSXRPPL2",243,0)
 I HERR,SHDT="" D SHDTLOG(RX,RFL) Q 0
"RTN","PSXRPPL2",244,0)
 Q:HERR 0
"RTN","PSXRPPL2",245,0)
 Q 1
"RTN","PSXRPPL2",246,0)
 ;
"RTN","PSXRPPL2",247,0)
CHHEDT(RX,RFL) ;
"RTN","PSXRPPL2",248,0)
 ; RX = Prescription File IEN
"RTN","PSXRPPL2",249,0)
 ; RFL = Refill
"RTN","PSXRPPL2",250,0)
 ;Returns: 
"RTN","PSXRPPL2",251,0)
 ; 0 = host reject date not expired, 1 - host reject has expired, 2 - host reject not defined 
"RTN","PSXRPPL2",252,0)
 ;
"RTN","PSXRPPL2",253,0)
 S SHDT=$$SHDT(RX,RFL) ; Get suspense hold date for rx/refill
"RTN","PSXRPPL2",254,0)
 I SHDT'="" Q:DT'<SHDT 1 Q 0
"RTN","PSXRPPL2",255,0)
 Q 2
"RTN","PSXRPPL2",256,0)
 ;
"RTN","PSXRPPL2",257,0)
 ;Description: ePharmacy
"RTN","PSXRPPL2",258,0)
 ;This subroutine checks an RX/FILL for Host Reject Errors returned
"RTN","PSXRPPL2",259,0)
 ;from previous ECME submissions. The host reject errors checked are M6, M8, NN, and 99.
"RTN","PSXRPPL2",260,0)
 ;Note that host reject errors do not pass to the pharmacy reject worklist so it's necessary
"RTN","PSXRPPL2",261,0)
 ;to check ECME for these type errors.
"RTN","PSXRPPL2",262,0)
 ;Input: 
"RTN","PSXRPPL2",263,0)
 ; RX = Prescription File IEN
"RTN","PSXRPPL2",264,0)
 ; RFL = Refill
"RTN","PSXRPPL2",265,0)
 ; ONE = Either 1 or 0 - Defaults to 1
"RTN","PSXRPPL2",266,0)
 ; If 1, At least ONE reject code associated with the RX/FILL must 
"RTN","PSXRPPL2",267,0)
 ;   match either M6, M8, NN, or 99.
"RTN","PSXRPPL2",268,0)
 ; If 0, ALL reject codes must match either M6, M8, NN, or 99
"RTN","PSXRPPL2",269,0)
 ;Return: 
"RTN","PSXRPPL2",270,0)
 ; RETV = 1 OR 0
"RTN","PSXRPPL2",271,0)
 ; 1 = host reject exists based on ONE parameter
"RTN","PSXRPPL2",272,0)
 ; 0 = no host rejects exists based on ONE parameter
"RTN","PSXRPPL2",273,0)
HOSTREJ(RX,RFL,ONE) ;
"RTN","PSXRPPL2",274,0)
 N REJ,IDX,TXT,CODE,HRCODE,HRQUIT,RETV
"RTN","PSXRPPL2",275,0)
 S IDX="",(RETV,HRQUIT)=0
"RTN","PSXRPPL2",276,0)
 I ONE="" S ONE=1
"RTN","PSXRPPL2",277,0)
 D DUR1^BPSNCPD3(RX,RFL,.REJ) ; Get reject list from last submission
"RTN","PSXRPPL2",278,0)
 F  S IDX=$O(REJ(IDX)) Q:IDX=""  D  Q:HRQUIT
"RTN","PSXRPPL2",279,0)
 . S TXT=$G(REJ(IDX,"REJ CODE LST"))
"RTN","PSXRPPL2",280,0)
 . F I=1:1:$L(TXT,",") S CODE=$P(TXT,",",I) D  Q:HRQUIT
"RTN","PSXRPPL2",281,0)
 . . F HRCODE="M6","M8","NN",99 D  Q:HRQUIT
"RTN","PSXRPPL2",282,0)
 . . . I CODE=HRCODE S RETV=1 I ONE S HRQUIT=1 Q
"RTN","PSXRPPL2",283,0)
 . . . I CODE'=HRCODE,RETV=1 S RETV=0,HRQUIT=1 Q
"RTN","PSXRPPL2",284,0)
 Q RETV
"RTN","PSXRPPL2",285,0)
 ;
"RTN","PSXRPPL2",286,0)
 ;Description: This subroutine sets the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSXRPPL2",287,0)
 ;for the rx or refill to tomorrow and adds an entry to the SUSPENSE Activity Log.
"RTN","PSXRPPL2",288,0)
 ;Input: RX = Prescription File IEN
"RTN","PSXRPPL2",289,0)
 ; RFL = Refill
"RTN","PSXRPPL2",290,0)
SHDTLOG(RX,RFL) ;
"RTN","PSXRPPL2",291,0)
 N DA,DIE,DR,COMM,SHDT
"RTN","PSXRPPL2",292,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",293,0)
 S SHDT=$$FMADD^XLFDT(DT,1)
"RTN","PSXRPPL2",294,0)
 S COMM="SUSPENSE HOLD until "_$$FMTE^XLFDT(SHDT,"2D")_" due to host reject error."
"RTN","PSXRPPL2",295,0)
 I RFL=0 S DA=RX,DIE="^PSRX(",DR="86///"_SHDT D ^DIE
"RTN","PSXRPPL2",296,0)
 E  S DA=RFL,DA(1)=RX,DIE="^PSRX("_DA(1)_",1,",DR="86///"_SHDT D ^DIE
"RTN","PSXRPPL2",297,0)
 D RXACT^PSOBPSU2(RX,RFL,COMM,"S",+$G(DUZ)) ; Create Activity Log entry
"RTN","PSXRPPL2",298,0)
 Q
"RTN","PSXRPPL2",299,0)
 ;
"RTN","PSXRPPL2",300,0)
 ;Description: This function returns the EPHARMACY SUSPENSE HOLD DATE field
"RTN","PSXRPPL2",301,0)
 ;for the rx or refill
"RTN","PSXRPPL2",302,0)
 ;Input: RX = Prescription File IEN
"RTN","PSXRPPL2",303,0)
 ; RFL = Refill
"RTN","PSXRPPL2",304,0)
SHDT(RX,RFL) ;
"RTN","PSXRPPL2",305,0)
 N FILE,IENS
"RTN","PSXRPPL2",306,0)
 I '$D(RFL) S RFL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSXRPPL2",307,0)
 S FILE=$S(RFL=0:52,1:52.1),IENS=$S(RFL=0:RX_",",1:RFL_","_RX_",")
"RTN","PSXRPPL2",308,0)
 Q $$GET1^DIQ(FILE,IENS,86,"I")
"RTN","PSXRPPL2",309,0)
 ;
"VER")
8.0^22.2
**INSTALL NAME**
PSO*7.0*513
"BLD",10548,0)
PSO*7.0*513^OUTPATIENT PHARMACY^0^3180125^y
"BLD",10548,4,0)
^9.64PA^^
"BLD",10548,6.3)
2
"BLD",10548,"KRN",0)
^9.67PA^779.2^20
"BLD",10548,"KRN",.4,0)
.4
"BLD",10548,"KRN",.401,0)
.401
"BLD",10548,"KRN",.402,0)
.402
"BLD",10548,"KRN",.403,0)
.403
"BLD",10548,"KRN",.5,0)
.5
"BLD",10548,"KRN",.84,0)
.84
"BLD",10548,"KRN",3.6,0)
3.6
"BLD",10548,"KRN",3.8,0)
3.8
"BLD",10548,"KRN",9.2,0)
9.2
"BLD",10548,"KRN",9.8,0)
9.8
"BLD",10548,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",10548,"KRN",9.8,"NM",1,0)
PSOREJU3^^0^B107526662
"BLD",10548,"KRN",9.8,"NM","B","PSOREJU3",1)

"BLD",10548,"KRN",19,0)
19
"BLD",10548,"KRN",19.1,0)
19.1
"BLD",10548,"KRN",101,0)
101
"BLD",10548,"KRN",409.61,0)
409.61
"BLD",10548,"KRN",771,0)
771
"BLD",10548,"KRN",779.2,0)
779.2
"BLD",10548,"KRN",870,0)
870
"BLD",10548,"KRN",8989.51,0)
8989.51
"BLD",10548,"KRN",8989.52,0)
8989.52
"BLD",10548,"KRN",8994,0)
8994
"BLD",10548,"KRN","B",.4,.4)

"BLD",10548,"KRN","B",.401,.401)

"BLD",10548,"KRN","B",.402,.402)

"BLD",10548,"KRN","B",.403,.403)

"BLD",10548,"KRN","B",.5,.5)

"BLD",10548,"KRN","B",.84,.84)

"BLD",10548,"KRN","B",3.6,3.6)

"BLD",10548,"KRN","B",3.8,3.8)

"BLD",10548,"KRN","B",9.2,9.2)

"BLD",10548,"KRN","B",9.8,9.8)

"BLD",10548,"KRN","B",19,19)

"BLD",10548,"KRN","B",19.1,19.1)

"BLD",10548,"KRN","B",101,101)

"BLD",10548,"KRN","B",409.61,409.61)

"BLD",10548,"KRN","B",771,771)

"BLD",10548,"KRN","B",779.2,779.2)

"BLD",10548,"KRN","B",870,870)

"BLD",10548,"KRN","B",8989.51,8989.51)

"BLD",10548,"KRN","B",8989.52,8989.52)

"BLD",10548,"KRN","B",8994,8994)

"MBREQ")
1
"PKG",170,-1)
1^1
"PKG",170,0)
OUTPATIENT PHARMACY^PSO^OUTPATIENT LABELS, PROFILE, INVENTORY, PRESCRIPTIONS
"PKG",170,22,0)
^9.49I^1^1
"PKG",170,22,1,0)
7.0^2971216^2981113^1
"PKG",170,22,1,"PAH",1,0)
513^3180125
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","PSOREJU3")
0^1^B107526662
"RTN","PSOREJU3",1,0)
PSOREJU3 ;BIRM/LJE - BPS (ECME) - Clinical Rejects Utilities (3) ;04/25/08
"RTN","PSOREJU3",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**287,290,358,359,385,421,427,448,478,513**;DEC 1997;Build 2
"RTN","PSOREJU3",3,0)
 ;References to 9002313.99 supported by IA 4305
"RTN","PSOREJU3",4,0)
 ;Reference to $$CLAIM^BPSBUTL supported by IA 4719
"RTN","PSOREJU3",5,0)
 ;Reference to LOG^BPSOSL supported by ICR# 6764
"RTN","PSOREJU3",6,0)
 ;Reference to IEN59^BPSOSRX supported by ICR# 4412
"RTN","PSOREJU3",7,0)
 ;
"RTN","PSOREJU3",8,0)
 Q
"RTN","PSOREJU3",9,0)
 ;
"RTN","PSOREJU3",10,0)
TRICCHK(RX,RFL,RESP,FROM,RVTX) ;check to see if Rx is non-billable or in an "In Progress" state on ECME
"RTN","PSOREJU3",11,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",12,0)
 ;         (r) RFL - REFILL
"RTN","PSOREJU3",13,0)
 ;         (o) RESP - Response from $$EN^BPSNCPDP api
"RTN","PSOREJU3",14,0)
 ;   TRICCHK assumes that the calling routine has validated that the fill is TRICARE or CHAMPVA.
"RTN","PSOREJU3",15,0)
 ;
"RTN","PSOREJU3",16,0)
 ;  - \Need to be mindful of foreground and background processing.
"RTN","PSOREJU3",17,0)
 ;
"RTN","PSOREJU3",18,0)
 N ESTAT,ETOUT,NFROM,PSOBEI
"RTN","PSOREJU3",19,0)
 I '$D(FROM) S FROM=""
"RTN","PSOREJU3",20,0)
 S ESTAT=$P(RESP,"^",4)
"RTN","PSOREJU3",21,0)
 S NFROM=0
"RTN","PSOREJU3",22,0)
 I FROM="PL"!(FROM="PC") S NFROM=1
"RTN","PSOREJU3",23,0)
 Q:ESTAT["PAYABLE"!(ESTAT["REJECTED")
"RTN","PSOREJU3",24,0)
 S PSOBEI=$$ELIGDISP^PSOREJP1(RX,RFL)
"RTN","PSOREJU3",25,0)
 ;
"RTN","PSOREJU3",26,0)
 D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRICCHK, RESP="_RESP)  ; ICR#s 4412,6764
"RTN","PSOREJU3",27,0)
 I ESTAT["IN PROGRESS",FROM="PC" D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-Would have noted in Activity Log that Rx was left in CMOP suspense") Q  ; ICR#s 4412,6764
"RTN","PSOREJU3",28,0)
 ;
"RTN","PSOREJU3",29,0)
 I ESTAT["IN PROGRESS",FROM="RRL"!($G(RVTX)="RX RELEASE-NDC CHANGE") D  Q
"RTN","PSOREJU3",30,0)
 . I 'NFROM D
"RTN","PSOREJU3",31,0)
 . . W !!,PSOBEI_" Prescription "_$$GET1^DIQ(52,RX,".01")_" cannot be released until ECME 'IN PROGRESS'"
"RTN","PSOREJU3",32,0)
 . . W !,"status is resolved payable.",!!
"RTN","PSOREJU3",33,0)
 ;
"RTN","PSOREJU3",34,0)
 I $D(RESP) D  Q
"RTN","PSOREJU3",35,0)
 . I +RESP=6 W:'NFROM&('$G(CMOP)) !!,"Inactive ECME "_PSOBEI,!! D  Q
"RTN","PSOREJU3",36,0)
 . . S ACT="Inactive ECME "_PSOBEI D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",37,0)
 . I +RESP=2!(+RESP=3) N PSONBILL S PSONBILL=1 D TRIC2 Q
"RTN","PSOREJU3",38,0)
 . I +RESP=4!(ESTAT["IN PROGRESS") N PSONPROG S PSONPROG=1 D TRIC2 Q
"RTN","PSOREJU3",39,0)
 Q
"RTN","PSOREJU3",40,0)
 ;
"RTN","PSOREJU3",41,0)
TRIC2 ;
"RTN","PSOREJU3",42,0)
 N ACTION,REJCOD,REJ,DIR,DIRUT,REA,DA,PSCAN,PSOTRIC,ZZZ
"RTN","PSOREJU3",43,0)
 S PSOTRIC=1,REJ=9999999999
"RTN","PSOREJU3",44,0)
 I $G(CMOP)&($G(PSONPROG)) D TACT Q 
"RTN","PSOREJU3",45,0)
 Q:$G(CMOP)
"RTN","PSOREJU3",46,0)
 I 'NFROM D DISPLAY(RX,REJ)
"RTN","PSOREJU3",47,0)
 I 'NFROM&($G(PSONPROG)) D  D SUSP Q
"RTN","PSOREJU3",48,0)
 . W !!,"This prescription will be suspended.  After the third party claim is resolved,"
"RTN","PSOREJU3",49,0)
 . W !,"it may be printed or pulled early from suspense.",!
"RTN","PSOREJU3",50,0)
 . R !!,"Press <RETURN> to continue...",ZZZ:60,!
"RTN","PSOREJU3",51,0)
 I NFROM&($G(PSONPROG)) D TACT Q
"RTN","PSOREJU3",52,0)
 Q:NFROM
"RTN","PSOREJU3",53,0)
TRIC3 ;
"RTN","PSOREJU3",54,0)
 D MSG
"RTN","PSOREJU3",55,0)
 I FROM="PL"!(FROM="PC") D SUSP Q
"RTN","PSOREJU3",56,0)
 ;cnf, PSO*7*358, add code for options
"RTN","PSOREJU3",57,0)
 N ACTION,DIR,DIRUT,OPTS,DEF,COM
"RTN","PSOREJU3",58,0)
TRIC4 S DIR(0)="SO^",DIR("A")="",OPTS="DQ",DEF="D"
"RTN","PSOREJU3",59,0)
 N PSORESP
"RTN","PSOREJU3",60,0)
 S PSORESP=$P($G(RESP),U,2)
"RTN","PSOREJU3",61,0)
 I PSORESP["NO ACTIVE/VALID ROI" S DEF="Q"  ;IB routine IBNCPDP1 contains this text.
"RTN","PSOREJU3",62,0)
 ;reference to ^XUSEC( supported by IA 10076
"RTN","PSOREJU3",63,0)
 I $D(^XUSEC("PSO TRICARE/CHAMPVA",DUZ)) S OPTS=OPTS_"I" ;PSO*7.0*358, if user has security key, include IGNORE in TRICARE/CHAMPVA options
"RTN","PSOREJU3",64,0)
 S:(OPTS["D") DIR(0)=DIR(0)_"D:(D)iscontinue - DO NOT FILL PRESCRIPTION;",DIR("A")=DIR("A")_"(D)iscontinue,"
"RTN","PSOREJU3",65,0)
 S:(OPTS["Q") DIR(0)=DIR(0)_"Q:(Q)UIT - SEND TO WORKLIST (REQUIRES INTERVENTION);",DIR("A")=DIR("A")_"(Q)uit,"
"RTN","PSOREJU3",66,0)
 S:(OPTS["I") DIR(0)=DIR(0)_"I:(I)GNORE - FILL Rx WITHOUT CLAIM SUBMISSION;",DIR("A")=DIR("A")_"(I)gnore,"
"RTN","PSOREJU3",67,0)
 S $E(DIR(0),$L(DIR(0)))="",$E(DIR("A"),$L(DIR("A")))="",DIR("??")="^D HELP^PSOREJU2("""_OPTS_""")"
"RTN","PSOREJU3",68,0)
 S:$G(DEF)'="" DIR("B")=DEF D ^DIR I $D(DIRUT) S Y="Q" W !
"RTN","PSOREJU3",69,0)
 ;
"RTN","PSOREJU3",70,0)
 S ACTION=Y
"RTN","PSOREJU3",71,0)
 I ACTION="D" S ACTION=$$DC^PSOREJU1(RX,ACTION)    ;cnf, PSO*7*358
"RTN","PSOREJU3",72,0)
 I ACTION="Q" D WRKLST^PSOREJU4(RX,RFL,,DUZ,DT,1,"",RESP)    ;cnf, PSO*7*358
"RTN","PSOREJU3",73,0)
 I ACTION="I" G TRIC4:'$$CONT^PSOREJU1() S COM=$$TCOM^PSOREJP3(RX,RFL) G TRIC4:COM="^" G TRIC4:'$$SIG^PSOREJU1() D
"RTN","PSOREJU3",74,0)
 . D CLOSE^PSOREJUT(RX,RFL,REJ,DUZ,6,COM)   ;TRICARE/CHAMPVA non-billable should have only 1 reject - eT/eC
"RTN","PSOREJU3",75,0)
 . D AUDIT^PSOTRI(RX,RFL,,COM,$S($$PSOET^PSOREJP3(RX,RFL):"N",1:"R"),$P(RESP,"^",3))
"RTN","PSOREJU3",76,0)
 Q
"RTN","PSOREJU3",77,0)
 ;
"RTN","PSOREJU3",78,0)
MSG ;
"RTN","PSOREJU3",79,0)
 W !!,"This is a non-billable "_$$ELIGDISP^PSOREJP1(RX,RFL)_" prescription."    ;cnf, PSO*7*358
"RTN","PSOREJU3",80,0)
 Q
"RTN","PSOREJU3",81,0)
SUSP ;Suspense Rx due to IN PROGRESS status in ECME
"RTN","PSOREJU3",82,0)
 N DA,ACT,RX0,SD,RXS,PSOWFLG,DIK,RXN,XFLAG,RXP,DD,DO,X,Y,DIC,VALMSG,COMM,LFD,DFLG,RXCMOP
"RTN","PSOREJU3",83,0)
 N PSOQFLAG,PSORXZD,PSOQFLAG,PSOKSPPL,PSOZXPPL,PSOZXPI,RXLTOP
"RTN","PSOREJU3",84,0)
 S DA=RX D SUS^PSORXL1
"RTN","PSOREJU3",85,0)
TACT ;
"RTN","PSOREJU3",86,0)
 S ACT=$$ELIGDISP^PSOREJP1(RX,RFL)_"-Rx placed on Suspense due to"_$S($G(PSONPROG):" ECME IN PROGRESS status",$G(PSONBILL):"the Rx being Non-billable",1:"")
"RTN","PSOREJU3",87,0)
 I '$G(DUZ) N DUZ S DUZ=.5
"RTN","PSOREJU3",88,0)
 D RXACT^PSOBPSU2(RX,RFL,ACT,"M",DUZ)
"RTN","PSOREJU3",89,0)
 Q
"RTN","PSOREJU3",90,0)
 ;
"RTN","PSOREJU3",91,0)
DISPLAY(RX,REJ,KEY,RRR) ; - Displays REJECT information
"RTN","PSOREJU3",92,0)
 ; Input:  (r) RX  - Rx IEN (#52) 
"RTN","PSOREJU3",93,0)
 ;         (r) REJ - REJECT ID (IEN)
"RTN","PSOREJU3",94,0)
 ;         (o) KEY - Display "Press any KEY to continue..." (1-YES/0-NO) (Default: 0)
"RTN","PSOREJU3",95,0)
 ;         (o) RRR - Reject Resolution Required information  Flag(0/1)^Threshold Amt^Gross Amt Due  (Default: 0)
"RTN","PSOREJU3",96,0)
 ;                   If Flag = 0, there is no Reject Resolution Required reject code.  Parameter added with PSO*421
"RTN","PSOREJU3",97,0)
 ;         
"RTN","PSOREJU3",98,0)
 Q:$G(NFROM)
"RTN","PSOREJU3",99,0)
 I '$G(RX)!'$G(REJ) Q
"RTN","PSOREJU3",100,0)
 I '$D(^PSRX(RX,"REJ",REJ))&('$G(PSONBILL))&('$G(PSONPROG)) Q
"RTN","PSOREJU3",101,0)
 ;
"RTN","PSOREJU3",102,0)
 N DATA,RFL,LINE,%
"RTN","PSOREJU3",103,0)
 S RFL=+$$GET1^DIQ(52.25,REJ_","_RX,5)
"RTN","PSOREJU3",104,0)
 I '$G(PSONBILL)&('$G(PSONPROG)) D GET^PSOREJU2(RX,RFL,.DATA,REJ) I '$D(DATA(REJ)) Q
"RTN","PSOREJU3",105,0)
 ;
"RTN","PSOREJU3",106,0)
 D HDR
"RTN","PSOREJU3",107,0)
 S $P(LINE,"-",74)="" W !?3,LINE
"RTN","PSOREJU3",108,0)
 W !?3,$$DVINFO(RX,RFL)
"RTN","PSOREJU3",109,0)
 W !?3,$$PTINFO^PSOREJU2(RX)
"RTN","PSOREJU3",110,0)
 W !?3,"Rx/Drug  : ",$$GET1^DIQ(52,RX,.01),"/",RFL," - ",$E($$GET1^DIQ(52,RX,6),1,20),?54
"RTN","PSOREJU3",111,0)
 W:'$G(PSONBILL)&('$G(PSONPROG)) "ECME#: ",$P($$CLAIM^BPSBUTL(RX,RFL),U,6)
"RTN","PSOREJU3",112,0)
 D TYPE G DISP2:$G(PSONBILL)!($G(PSONPROG))
"RTN","PSOREJU3",113,0)
 I $G(DATA(REJ,"PAYER MESSAGE"))'="" W !?3,"Payer Message: " D PRT^PSOREJU2("PAYER MESSAGE",18,58)
"RTN","PSOREJU3",114,0)
 I $G(DATA(REJ,"DUR TEXT"))'="" W !?3,"DUR Text     : ",DATA(REJ,"DUR TEXT")
"RTN","PSOREJU3",115,0)
 W !?3,"Insurance    : ",DATA(REJ,"INSURANCE NAME"),?50,"Contact: ",DATA(REJ,"PLAN CONTACT")
"RTN","PSOREJU3",116,0)
 W !?3,"Group Name   : ",DATA(REJ,"GROUP NAME"),?45,"Group Number: ",DATA(REJ,"GROUP NUMBER")
"RTN","PSOREJU3",117,0)
 I $G(DATA(REJ,"CARDHOLDER ID"))'="" W !?3,"Cardholder ID: ",DATA(REJ,"CARDHOLDER ID")
"RTN","PSOREJU3",118,0)
 I DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" D
"RTN","PSOREJU3",119,0)
 . W !?3,"Last Fill Dt.: ",DATA(REJ,"PLAN PREVIOUS FILL DATE")
"RTN","PSOREJU3",120,0)
 . W:DATA(REJ,"PLAN PREVIOUS FILL DATE")'="" "   (from payer)"
"RTN","PSOREJU3",121,0)
 I $G(RRR) D   ;added with PSO*421
"RTN","PSOREJU3",122,0)
 . W !!?3,"Reject Resolution Required"
"RTN","PSOREJU3",123,0)
 . W !?3,"Gross Amount Due ($"_$J($P(RRR,U,3)*100\1/100,0,2)_") is greater than or equal to"
"RTN","PSOREJU3",124,0)
 . W !?3,"Threshold Dollar Amount ($"_$P(RRR,U,2)_")"
"RTN","PSOREJU3",125,0)
 . W !?3,"Please select Quit to resolve this reject on the Reject Worklist."
"RTN","PSOREJU3",126,0)
DISP2 ;
"RTN","PSOREJU3",127,0)
 W !?3,LINE,$C(7) I $G(KEY) W !?3,"Press <RETURN> to continue..." R %:DTIME W !
"RTN","PSOREJU3",128,0)
 Q
"RTN","PSOREJU3",129,0)
 ;
"RTN","PSOREJU3",130,0)
TYPE ;
"RTN","PSOREJU3",131,0)
 I $G(PSONBILL)!($G(PSONPROG)) D  Q
"RTN","PSOREJU3",132,0)
 . D NOW^%DTC S Y=% D DD^%DT
"RTN","PSOREJU3",133,0)
 . W !?3,"Date/Time: "_$$FMTE^XLFDT(Y)
"RTN","PSOREJU3",134,0)
 . W !?3,"Reason   : ",$S($G(PSONBILL):"Drug not billable.",$G(PSONPROG):"ECME Status is in an 'IN PROGRESS' state and cannot be filled",1:"")
"RTN","PSOREJU3",135,0)
 ;
"RTN","PSOREJU3",136,0)
 I $G(DATA(REJ,"REASON"))'="" W !?3,"Reason   : " D PRT^PSOREJU2("REASON",14,62)
"RTN","PSOREJU3",137,0)
 N RTXT,OCODE,OTXT,I
"RTN","PSOREJU3",138,0)
 S (OTXT,RTXT,OCODE)="",RTXT=$S(DATA(REJ,"CODE")=79:"REFILL TOO SOON",DATA(REJ,"CODE")=88:"DUR REJECT",1:$$EXP^PSOREJP1(DATA(REJ,"CODE")))_" ("_DATA(REJ,"CODE")_")"
"RTN","PSOREJU3",139,0)
 F I=1:1 S OCODE=$P(DATA(REJ,"OTHER REJECTS"),",",I) Q:OCODE=""   D
"RTN","PSOREJU3",140,0)
 . S OTXT=OTXT_", "_$S(OCODE=79:"REFILL TOO SOON",OCODE=88:"DUR REJECT",1:$$EXP^PSOREJP1(OCODE))_" ("_OCODE_")"
"RTN","PSOREJU3",141,0)
 S RTXT=RTXT_OTXT_".  Received on "_$$FMTE^XLFDT($G(DATA(REJ,"DATE/TIME")))_"."
"RTN","PSOREJU3",142,0)
 S OTXT=""
"RTN","PSOREJU3",143,0)
 W !?3,"Reject(s): " D WRAP(RTXT,14)
"RTN","PSOREJU3",144,0)
 Q
"RTN","PSOREJU3",145,0)
 ;
"RTN","PSOREJU3",146,0)
WRAP(PSOTXT,INDENT) ;
"RTN","PSOREJU3",147,0)
 N I,K,PSOWRAP,PSOMARG
"RTN","PSOREJU3",148,0)
 S PSOWRAP=1,PSOMARG=$S('$G(PSORM):80,$D(IOM):IOM,1:80)-(INDENT+5)
"RTN","PSOREJU3",149,0)
W1 S:$L(PSOTXT)<PSOMARG PSOWRAP(PSOWRAP)=PSOTXT I $L(PSOTXT)'<PSOMARG F I=PSOMARG:-1:0 I $E(PSOTXT,I)?1P S PSOWRAP(PSOWRAP)=$E(PSOTXT,1,I),PSOTXT=$E(PSOTXT,I+1,999),PSOWRAP=PSOWRAP+1 G W1
"RTN","PSOREJU3",150,0)
 F K=1:1:PSOWRAP W ?INDENT,PSOWRAP(K),!
"RTN","PSOREJU3",151,0)
 Q
"RTN","PSOREJU3",152,0)
 ;
"RTN","PSOREJU3",153,0)
HDR ; Display the reject notification screen header
"RTN","PSOREJU3",154,0)
 N ELDSP,TAB
"RTN","PSOREJU3",155,0)
 S ELDSP=$$ELIGTCV^PSOREJP1(RX,RFL,1)  ; returns TRICARE, CHAMPVA or VETERAN
"RTN","PSOREJU3",156,0)
 I $L(ELDSP) S ELDSP=ELDSP_" - "       ; Add the " - " for CVA/TRI only
"RTN","PSOREJU3",157,0)
 ;
"RTN","PSOREJU3",158,0)
 I $G(PSONBILL) S TAB=$S($L(ELDSP):24,1:29) W !!?TAB,"*** "_ELDSP_"NON-BILLABLE ***" Q
"RTN","PSOREJU3",159,0)
 I $G(PSONPROG) S TAB=$S($L(ELDSP):18,1:23) W !!?TAB,"*** "_ELDSP_"'IN PROGRESS' ECME status ***" Q
"RTN","PSOREJU3",160,0)
 S TAB=$S($L(ELDSP):11,1:16) W !!?TAB,"*** "_ELDSP_"REJECT RECEIVED FROM THIRD PARTY PAYER ***"
"RTN","PSOREJU3",161,0)
 Q
"RTN","PSOREJU3",162,0)
 ;
"RTN","PSOREJU3",163,0)
SUBMIT(RXIEN,RFCNT,PSOTRIC) ;called from PSOCAN2 (routine size exceeded)
"RTN","PSOREJU3",164,0)
 N SUBMITE S SUBMITE=$$SUBMIT^PSOBPSUT(RXIEN)
"RTN","PSOREJU3",165,0)
 I SUBMITE D
"RTN","PSOREJU3",166,0)
 . N ACTION
"RTN","PSOREJU3",167,0)
 . D ECMESND^PSOBPSU1(RXIEN,,,$S($O(^PSRX(RXIEN,1,0)):"RF",1:"OF"))
"RTN","PSOREJU3",168,0)
 . ; Quit if there is an unresolved TRICARE or CHAMPVA non-billable reject code, PSO*7*358
"RTN","PSOREJU3",169,0)
 . I $$PSOET^PSOREJP3(RXIEN) S ACTION="Q" Q 
"RTN","PSOREJU3",170,0)
 . I $$FIND^PSOREJUT(RXIEN) S ACTION=$$HDLG^PSOREJU1(RXIEN,,"79,88","OF","IOQ","Q")
"RTN","PSOREJU3",171,0)
 I 'SUBMITE&(PSOTRIC) D
"RTN","PSOREJU3",172,0)
 . I $$STATUS^PSOBPSUT(RXIEN,RFCNT'["PAYABLE") D TRICCHK(RXIEN,RFCNT)
"RTN","PSOREJU3",173,0)
 Q
"RTN","PSOREJU3",174,0)
 ;
"RTN","PSOREJU3",175,0)
TRISTA(RX,RFL,RESP,FROM,RVTX) ;called from suspense
"RTN","PSOREJU3",176,0)
 N ETOUT,ESTAT,TRESP,TSTAT,PSOTRIC
"RTN","PSOREJU3",177,0)
 S:'$D(RESP) RESP=""
"RTN","PSOREJU3",178,0)
 S (ESTAT,PSOTRIC)="",PSOTRIC=$$TRIC^PSOREJP1(RX,RFL,PSOTRIC)
"RTN","PSOREJU3",179,0)
 Q:'PSOTRIC 0
"RTN","PSOREJU3",180,0)
 S TRESP=RESP,ESTAT=$P(TRESP,"^",4) S:ESTAT="" ESTAT=$$STATUS^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",181,0)
 Q:ESTAT["E PAYABLE" 0
"RTN","PSOREJU3",182,0)
 I $$TRIAUD(RX,RFL) D  Q 0  ;if TRICARE or CHAMPVA Rx is in audit due to override or bypass, allow to print from suspense, cnf
"RTN","PSOREJU3",183,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, $$TRIAUD returned 1, $$TRISTA is Quitting with 0")  ; ICR#s 4412,6764
"RTN","PSOREJU3",184,0)
 I +RESP=2,$$BYPASS^PSOBPSU1($P(RESP,"^",3),$P(RESP,"^",2)) D  Q 0   ;if 'Bypass' RX, allow to print from suspense, cnf
"RTN","PSOREJU3",185,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, $$BYPASS returned 1, $$TRISTA is Quitting with 0")  ; ICR#s 4412,6764
"RTN","PSOREJU3",186,0)
 Q:ESTAT["E REJECTED" 1  ;rejected TRICARE or CHAMPVA is not allowed to print from suspense
"RTN","PSOREJU3",187,0)
 ;if 'in progress' (4) or not billable (2,3) don't allow to print from suspense (IA 4415 Values)
"RTN","PSOREJU3",188,0)
 I '$D(RESP)!($P(RESP,"^",1)="")!($G(RESP)="") D
"RTN","PSOREJU3",189,0)
 . S TSTAT=$$STATUS^PSOBPSUT(RX,RFL) S TRESP=$S(TSTAT["IN PROGRESS":4,TSTAT["NOT BILLABLE":2,1:0)
"RTN","PSOREJU3",190,0)
 . S $P(TRESP,"^",4)=TSTAT
"RTN","PSOREJU3",191,0)
 ;
"RTN","PSOREJU3",192,0)
 I +TRESP=2!(+TRESP=3) D  Q 1
"RTN","PSOREJU3",193,0)
 . D WRKLST^PSOREJU4(RX,RFL,"",DUZ,DT,1,"",RESP)  ;send TRICARE or CHAMPVA non billable to worklist (pseudo reject), cnf
"RTN","PSOREJU3",194,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, calling WRKLST~PSOREJU4, $$TRISTA is Quitting with 1")  ; ICR#s 4412,6764
"RTN","PSOREJU3",195,0)
 I +TRESP=4!(ESTAT["IN PROGRESS") D  Q 1
"RTN","PSOREJU3",196,0)
 . D LOG^BPSOSL($$IEN59^BPSOSRX(RX,RFL),$T(+0)_"-TRISTA, TRESP="_TRESP_", ESTAT="_ESTAT_", $$TRISTA is Quitting with 1")  ; ICR#s 4412,6764
"RTN","PSOREJU3",197,0)
 Q 0
"RTN","PSOREJU3",198,0)
 ;
"RTN","PSOREJU3",199,0)
TRIAUD(RXIEN,RXFILL) ;is RXIEN in the TRICARE/CHAMPVA audit and no open rejects  ;cnf
"RTN","PSOREJU3",200,0)
 ; RXIEN will only be in TRICARE/CHAMPVA audit if a bypass or override has occurred and rejects are closed
"RTN","PSOREJU3",201,0)
 ; returns  0  if RXIEN is not in TRICARE/CHAMPVA audit at all or not in audit for right fill number
"RTN","PSOREJU3",202,0)
 ;             rejects must be closed for 0 to be returned
"RTN","PSOREJU3",203,0)
 ;          1  if RXIEN is in TRICARE/CHAMPVA audit for the right fill number and rejects are closed
"RTN","PSOREJU3",204,0)
 ;
"RTN","PSOREJU3",205,0)
 N X,AUDIEN,REJIEN
"RTN","PSOREJU3",206,0)
 S X=0,AUDIEN=""
"RTN","PSOREJU3",207,0)
 I '$D(^PS(52.87,"C",RXIEN)) Q X   ;RXIEN is not in the TRICARE/CHAMPVA audit
"RTN","PSOREJU3",208,0)
 ;
"RTN","PSOREJU3",209,0)
 I $G(RXFILL)="" S RXFILL=$$LSTRFL^PSOBPSU1(RXIEN)  ;Get latest fill if not passed in
"RTN","PSOREJU3",210,0)
 ;
"RTN","PSOREJU3",211,0)
 ;check audit entries for right fill number
"RTN","PSOREJU3",212,0)
 F  S AUDIEN=$O(^PS(52.87,"C",RXIEN,AUDIEN)) Q:AUDIEN=""  I RXFILL=$$GET1^DIQ(52.87,AUDIEN,2) S X=1 Q
"RTN","PSOREJU3",213,0)
 I 'X Q X
"RTN","PSOREJU3",214,0)
 ;
"RTN","PSOREJU3",215,0)
 ;make sure rejects are closed
"RTN","PSOREJU3",216,0)
 S REJIEN=0
"RTN","PSOREJU3",217,0)
 F  S REJIEN=$O(^PSRX(RXIEN,"REJ",REJIEN)) Q:'+REJIEN  D  I 'X Q   ;I 'X, then the reject is not closed
"RTN","PSOREJU3",218,0)
 . S X=$$CLOSED^PSOREJP1(RXIEN,REJIEN,0)
"RTN","PSOREJU3",219,0)
 ;
"RTN","PSOREJU3",220,0)
 Q X
"RTN","PSOREJU3",221,0)
 ;
"RTN","PSOREJU3",222,0)
ECMECHK(RX,FILL) ;
"RTN","PSOREJU3",223,0)
 ; This function returns a '1' if any of the conditions below are met:
"RTN","PSOREJU3",224,0)
 ;    - RX has an unresolved DUR or Refill Too Soon reject
"RTN","PSOREJU3",225,0)
 ;    - RX has an unresolved Reject Resolution Required (RRR) reject (only for Veteran and original fill)
"RTN","PSOREJU3",226,0)
 ;    - RX is TRICARE/CHAMPVA and has any unresolved reject
"RTN","PSOREJU3",227,0)
 ;    - RX is TRICARE/CHAMPVA and IN PROGRESS
"RTN","PSOREJU3",228,0)
 ; This is used by functions such as PPLADD^PSOSUPOE to determine if
"RTN","PSOREJU3",229,0)
 ;   a label should be printed (we do not want a label for the conditions)
"RTN","PSOREJU3",230,0)
 ;
"RTN","PSOREJU3",231,0)
 ; Incoming Parameters:
"RTN","PSOREJU3",232,0)
 ;   RX - Internal IEN of the Prescription File (required)
"RTN","PSOREJU3",233,0)
 ;   FILL - Fill Number (optional, defaults to last fill if not passed in)
"RTN","PSOREJU3",234,0)
 ; Returns:
"RTN","PSOREJU3",235,0)
 ;   0 - None of the conditions exists
"RTN","PSOREJU3",236,0)
 ;   1 - One of the conditions above is met
"RTN","PSOREJU3",237,0)
 ;
"RTN","PSOREJU3",238,0)
 I '$G(RX) Q 0
"RTN","PSOREJU3",239,0)
 I $G(FILL)="" S FILL=$$LSTRFL^PSOBPSU1(RX)
"RTN","PSOREJU3",240,0)
 ;
"RTN","PSOREJU3",241,0)
 ; DUR or Refill Too Soon or RRR rejects
"RTN","PSOREJU3",242,0)
 I $$FIND^PSOREJUT(RX,FILL,"","79,88",,1) Q 1
"RTN","PSOREJU3",243,0)
 ;
"RTN","PSOREJU3",244,0)
 ; If not TRICARE/CHAMPVA, quit with 0 as the rest of the checks
"RTN","PSOREJU3",245,0)
 ;   are all TRICARE/CHAMPVA dependent
"RTN","PSOREJU3",246,0)
 I '$$TRIC^PSOREJP1(RX,FILL) Q 0
"RTN","PSOREJU3",247,0)
 ;
"RTN","PSOREJU3",248,0)
 ; No label for TRICARE/CHAMPVA with unresolved rejects
"RTN","PSOREJU3",249,0)
 I $$FIND^PSOREJUT(RX,FILL,,,1) Q 1   ; 5th parameter to $$FIND also finds non-billable TRI/CVA rejects
"RTN","PSOREJU3",250,0)
 ;
"RTN","PSOREJU3",251,0)
 ;No label for TRICARE/CHAMPVA claims that are IN PROGRESS
"RTN","PSOREJU3",252,0)
 I $P($$STATUS^PSOBPSUT(RX,FILL),U)="IN PROGRESS" Q 1
"RTN","PSOREJU3",253,0)
 Q 0
"RTN","PSOREJU3",254,0)
 ;
"RTN","PSOREJU3",255,0)
DVINFO(RX,RFL,LM) ; Returns header displayable Division Information
"RTN","PSOREJU3",256,0)
 ;Input: (r) RX   - Rx IEN (#52)
"RTN","PSOREJU3",257,0)
 ;       (o) RFL  - Refill # (Default: most recent)
"RTN","PSOREJU3",258,0)
 ;       (o) LM   - ListManager format? (1 - Yes / 0 - No) - Default: 0
"RTN","PSOREJU3",259,0)
 N TXT,DVINFO,NCPNPI,DVIEN
"RTN","PSOREJU3",260,0)
 S DVIEN=+$$RXSITE^PSOBPSUT(RX,RFL)
"RTN","PSOREJU3",261,0)
 S DVINFO="Division : "_$$GET1^DIQ(59,DVIEN,.01)
"RTN","PSOREJU3",262,0)
 ;Display both NPI and NCPDP numbers - PSO*7.0*421
"RTN","PSOREJU3",263,0)
 S NCPNPI=$$DIVNCPDP^BPSBUTL(DVIEN)
"RTN","PSOREJU3",264,0)
 S $E(DVINFO,33)="NPI: "_$P(NCPNPI,U,2)
"RTN","PSOREJU3",265,0)
 S $E(DVINFO,$S($G(LM):59,1:52))="NCPDP: "_$P(NCPNPI,U)
"RTN","PSOREJU3",266,0)
 Q DVINFO
"VER")
8.0^22.2
**END**
**END**
