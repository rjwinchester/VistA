KIDS Distribution saved on Jul 11, 2016@07:33:36
CPE VistA Capacity Planning
**KIDS**:XU*8.0*568^KMPD*3.0*3^KMPR*2.0*4^KMPS*2.0*1^KMPV*1.0*0^

**INSTALL NAME**
XU*8.0*568
"BLD",9459,0)
XU*8.0*568^KERNEL^0^3160711^y
"BLD",9459,4,0)
^9.64PA^^
"BLD",9459,6.3)
48
"BLD",9459,"ABPKG")
n
"BLD",9459,"INID")
^n
"BLD",9459,"INIT")
EN^ZOSVKSPI
"BLD",9459,"KRN",0)
^9.67PA^779.2^20
"BLD",9459,"KRN",.4,0)
.4
"BLD",9459,"KRN",.401,0)
.401
"BLD",9459,"KRN",.402,0)
.402
"BLD",9459,"KRN",.403,0)
.403
"BLD",9459,"KRN",.5,0)
.5
"BLD",9459,"KRN",.84,0)
.84
"BLD",9459,"KRN",3.6,0)
3.6
"BLD",9459,"KRN",3.8,0)
3.8
"BLD",9459,"KRN",9.2,0)
9.2
"BLD",9459,"KRN",9.8,0)
9.8
"BLD",9459,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",9459,"KRN",9.8,"NM",1,0)
ZOSVKSD^^0^B10781494
"BLD",9459,"KRN",9.8,"NM",2,0)
ZOSVKSOE^^0^B38080477
"BLD",9459,"KRN",9.8,"NM",3,0)
ZOSVKRO^^0^B32829782
"BLD",9459,"KRN",9.8,"NM","B","ZOSVKRO",3)

"BLD",9459,"KRN",9.8,"NM","B","ZOSVKSD",1)

"BLD",9459,"KRN",9.8,"NM","B","ZOSVKSOE",2)

"BLD",9459,"KRN",19,0)
19
"BLD",9459,"KRN",19,"NM",0)
^9.68A^^
"BLD",9459,"KRN",19.1,0)
19.1
"BLD",9459,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9459,"KRN",101,0)
101
"BLD",9459,"KRN",101,"NM",0)
^9.68A^^
"BLD",9459,"KRN",409.61,0)
409.61
"BLD",9459,"KRN",771,0)
771
"BLD",9459,"KRN",779.2,0)
779.2
"BLD",9459,"KRN",870,0)
870
"BLD",9459,"KRN",8989.51,0)
8989.51
"BLD",9459,"KRN",8989.52,0)
8989.52
"BLD",9459,"KRN",8994,0)
8994
"BLD",9459,"KRN","B",.4,.4)

"BLD",9459,"KRN","B",.401,.401)

"BLD",9459,"KRN","B",.402,.402)

"BLD",9459,"KRN","B",.403,.403)

"BLD",9459,"KRN","B",.5,.5)

"BLD",9459,"KRN","B",.84,.84)

"BLD",9459,"KRN","B",3.6,3.6)

"BLD",9459,"KRN","B",3.8,3.8)

"BLD",9459,"KRN","B",9.2,9.2)

"BLD",9459,"KRN","B",9.8,9.8)

"BLD",9459,"KRN","B",19,19)

"BLD",9459,"KRN","B",19.1,19.1)

"BLD",9459,"KRN","B",101,101)

"BLD",9459,"KRN","B",409.61,409.61)

"BLD",9459,"KRN","B",771,771)

"BLD",9459,"KRN","B",779.2,779.2)

"BLD",9459,"KRN","B",870,870)

"BLD",9459,"KRN","B",8989.51,8989.51)

"BLD",9459,"KRN","B",8989.52,8989.52)

"BLD",9459,"KRN","B",8994,8994)

"BLD",9459,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9459,"QUES",0)
^9.62^^
"BLD",9459,"REQB",0)
^9.611^2^2
"BLD",9459,"REQB",1,0)
XU*8.0*456^2
"BLD",9459,"REQB",2,0)
XU*8.0*550^2
"BLD",9459,"REQB","B","XU*8.0*456",1)

"BLD",9459,"REQB","B","XU*8.0*550",2)

"INIT")
EN^ZOSVKSPI
"MBREQ")
0
"PKG",173,-1)
1^1
"PKG",173,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",173,20,0)
^9.402P^^0
"PKG",173,22,0)
^9.49I^1^1
"PKG",173,22,1,0)
8.0^2950703^2951015^1
"PKG",173,22,1,"PAH",1,0)
568^3160711^520791172
"PKG",173,22,1,"PAH",1,1,0)
^^1^1^3150708
"PKG",173,22,1,"PAH",1,1,1,0)
Enable SAGG to run on Linux, VMS and Windows operating systems.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","ZOSVKRO")
0^3^B32829782
"RTN","ZOSVKRO",1,0)
%ZOSVKR ;SF/KAK/RAK/JML - ZOSVKRO - Collect RUM Statistics for Cache on VMS/Linux/Windows ;9/1/2015
"RTN","ZOSVKRO",2,0)
 ;;8.0;KERNEL;**90,94,107,122,143,186,550,568**;July 7, 2010;Build 48
"RTN","ZOSVKRO",3,0)
 ;
"RTN","ZOSVKRO",4,0)
RO(OPT) ; Record option resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",5,0)
 ;
"RTN","ZOSVKRO",6,0)
 N KMPRTYP S KMPRTYP=0  ; option
"RTN","ZOSVKRO",7,0)
 G EN
"RTN","ZOSVKRO",8,0)
 ;
"RTN","ZOSVKRO",9,0)
RP(PRTCL) ; Record protocol resource usage in ^KMPTMP("KMPR"
"RTN","ZOSVKRO",10,0)
 ; Variable PRTCL = option_name^protocol_name
"RTN","ZOSVKRO",11,0)
 ;
"RTN","ZOSVKRO",12,0)
 ; quit if rum is turned off
"RTN","ZOSVKRO",13,0)
 Q:'$G(^%ZTSCH("LOGRSRC"))
"RTN","ZOSVKRO",14,0)
 ;
"RTN","ZOSVKRO",15,0)
 N OPT
"RTN","ZOSVKRO",16,0)
 S OPT=$P(PRTCL,"^"),PRTCL=$P(PRTCL,"^",2)
"RTN","ZOSVKRO",17,0)
 Q:PRTCL=""
"RTN","ZOSVKRO",18,0)
 ;
"RTN","ZOSVKRO",19,0)
 N KMPRTYP S KMPRTYP=1  ; protocol
"RTN","ZOSVKRO",20,0)
 G EN
"RTN","ZOSVKRO",21,0)
 ;
"RTN","ZOSVKRO",22,0)
RU(KMPROPT,KMPRTYP,KMPRSTAT) ;-- set resource usage into ^KMPTMP("KMPR"
"RTN","ZOSVKRO",23,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",24,0)
 ; KMPROPT... Option name (may be option, protocol, rpc, etc.)
"RTN","ZOSVKRO",25,0)
 ; KMPRTYP...
"RTN","ZOSVKRO",26,0)
 ;    Type of option:
"RTN","ZOSVKRO",27,0)
 ;                   0 - Option
"RTN","ZOSVKRO",28,0)
 ;                   1 - Protocol
"RTN","ZOSVKRO",29,0)
 ;                   2 - RPC (Remote Procedure Call)
"RTN","ZOSVKRO",30,0)
 ;                   3 - HL7
"RTN","ZOSVKRO",31,0)
 ; KMPRSTAT..
"RTN","ZOSVKRO",32,0)
 ;    Status (for future use):
"RTN","ZOSVKRO",33,0)
 ;                   1 - start
"RTN","ZOSVKRO",34,0)
 ;                   2 - stop
"RTN","ZOSVKRO",35,0)
 ;----------------------------------------------------------------------
"RTN","ZOSVKRO",36,0)
 ;
"RTN","ZOSVKRO",37,0)
 Q:$G(KMPROPT)=""
"RTN","ZOSVKRO",38,0)
 ;
"RTN","ZOSVKRO",39,0)
 S KMPRTYP=+$G(KMPRTYP)
"RTN","ZOSVKRO",40,0)
 S KMPRSTAT=$G(KMPRSTAT)
"RTN","ZOSVKRO",41,0)
 ;
"RTN","ZOSVKRO",42,0)
 N OPT,PRTCL
"RTN","ZOSVKRO",43,0)
 ; 
"RTN","ZOSVKRO",44,0)
 ; OPT   = option name
"RTN","ZOSVKRO",45,0)
 ; PRTCL = protocol name (optional)
"RTN","ZOSVKRO",46,0)
 S OPT=$P(KMPROPT,"^"),PRTCL=$P(KMPROPT,"^",2)
"RTN","ZOSVKRO",47,0)
 ;
"RTN","ZOSVKRO",48,0)
EN ;
"RTN","ZOSVKRO",49,0)
 ; CURHDAY... current $H day
"RTN","ZOSVKRO",50,0)
 ; CURHSEC... current $H seconds
"RTN","ZOSVKRO",51,0)
 ; CURSTAT... current stats
"RTN","ZOSVKRO",52,0)
 ; DIFF...... difference (CURSTAT minus PREVSTAT)
"RTN","ZOSVKRO",53,0)
 ; NODE...... current node
"RTN","ZOSVKRO",54,0)
 ; PREVHDAY.. previous $H day
"RTN","ZOSVKRO",55,0)
 ; PREVHSEC.. previous $H seconds
"RTN","ZOSVKRO",56,0)
 ; PREVSTAT.. previous stats
"RTN","ZOSVKRO",57,0)
 ; PRIMETM... prime time (1) or non-prime time (0)
"RTN","ZOSVKRO",58,0)
 ;
"RTN","ZOSVKRO",59,0)
 N ACTV,ARRAY,CURHDAY,CURHSEC,CURSTAT,CURRHR,DIFF
"RTN","ZOSVKRO",60,0)
 N I,NODE,PREVHDAY,PREVHSEC,PREVSTAT,PRIMETM,Y
"RTN","ZOSVKRO",61,0)
 ;
"RTN","ZOSVKRO",62,0)
 ; quit if not in "PROD" uci
"RTN","ZOSVKRO",63,0)
 S Y="" X $G(^%ZOSF("UCI")) Q:Y'[$G(^%ZOSF("PROD"))
"RTN","ZOSVKRO",64,0)
 ;
"RTN","ZOSVKRO",65,0)
 D GETENV^%ZOSV S NODE=$P(Y,"^",3),U="^"
"RTN","ZOSVKRO",66,0)
 I KMPRTYP I OPT="" S:$P($G(KMPR("JOB",NODE,$J)),"^",10)["$LOGIN$" OPT="$LOGIN$"
"RTN","ZOSVKRO",67,0)
 I OPT="" Q:'+$G(^XUTL("XQ",$J,"T"))  S OPT=$P($G(^XUTL("XQ",$J,^XUTL("XQ",$J,"T"))),"^",2) Q:OPT=""
"RTN","ZOSVKRO",68,0)
 ;
"RTN","ZOSVKRO",69,0)
 ; CURSTAT = current stats for this $job
"RTN","ZOSVKRO",70,0)
 ;         = cpu^dio^bio^pg_fault^cmd^glo^$H_day^$H_sec^ascii_time
"RTN","ZOSVKRO",71,0)
 S CURSTAT=$P($$STATS,"^",1,9)
"RTN","ZOSVKRO",72,0)
 Q:CURSTAT=""
"RTN","ZOSVKRO",73,0)
 ;
"RTN","ZOSVKRO",74,0)
 S CURHDAY=$P(CURSTAT,"^",7),CURHSEC=$P(CURSTAT,"^",8)
"RTN","ZOSVKRO",75,0)
 ;
"RTN","ZOSVKRO",76,0)
 ; PREVSTAT = previous stats for this $job
"RTN","ZOSVKRO",77,0)
 S PREVSTAT=$G(KMPR("JOB",NODE,$J))
"RTN","ZOSVKRO",78,0)
 ;
"RTN","ZOSVKRO",79,0)
 ; if previous option was tagged as being run from taskman(!)
"RTN","ZOSVKRO",80,0)
 ; then mark current OPTion as running from taskman(!)
"RTN","ZOSVKRO",81,0)
 I $P($P(PREVSTAT,"^",10),"***")=("!"_OPT) S OPT="!"_OPT
"RTN","ZOSVKRO",82,0)
 ;
"RTN","ZOSVKRO",83,0)
 ; concatenate to CURSTAT: ...^OPTion^option_type
"RTN","ZOSVKRO",84,0)
 S CURSTAT=CURSTAT_"^"_$S(KMPRTYP=2:"`"_OPT,KMPRTYP=3:"&"_OPT,1:OPT)_"***"_$G(PRTCL)_"^"_$G(XQT)
"RTN","ZOSVKRO",85,0)
 S KMPR("JOB",NODE,$J)=CURSTAT
"RTN","ZOSVKRO",86,0)
 ;
"RTN","ZOSVKRO",87,0)
 ; if option and login or taskman
"RTN","ZOSVKRO",88,0)
 I 'KMPRTYP I OPT="$LOGIN$"!(OPT="$STRT ZTMS$") Q
"RTN","ZOSVKRO",89,0)
 ;
"RTN","ZOSVKRO",90,0)
 I OPT="$LOGOUT$"!(OPT="$STOP ZTMS$")!(OPT="XUPROGMODE") K KMPR("JOB",NODE,$J)
"RTN","ZOSVKRO",91,0)
 ;
"RTN","ZOSVKRO",92,0)
 Q:PREVSTAT=""
"RTN","ZOSVKRO",93,0)
 ;
"RTN","ZOSVKRO",94,0)
 ; check for negative numbers for m commands and glo references
"RTN","ZOSVKRO",95,0)
 F I=5,6 I $P(CURSTAT,"^",I)<0 D 
"RTN","ZOSVKRO",96,0)
 .S $P(CURSTAT,"^",I)=$P(CURSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRO",97,0)
 .I $P(PREVSTAT,"^",I)<0 S $P(PREVSTAT,"^",I)=$P(PREVSTAT,"^",I)+(2**31)+(2**31)
"RTN","ZOSVKRO",98,0)
 ;
"RTN","ZOSVKRO",99,0)
 S PREVHDAY=$P(PREVSTAT,"^",7),$P(PREVSTAT,"^",7)=$P(PREVSTAT,"^",8)
"RTN","ZOSVKRO",100,0)
 ;
"RTN","ZOSVKRO",101,0)
 ; quit if not $h
"RTN","ZOSVKRO",102,0)
 Q:'PREVHDAY
"RTN","ZOSVKRO",103,0)
 ;
"RTN","ZOSVKRO",104,0)
 ; if option has been running more than one day
"RTN","ZOSVKRO",105,0)
 ; add the number of seconds in each day to the current $H seconds
"RTN","ZOSVKRO",106,0)
 S $P(CURSTAT,"^",7)=(CURHDAY-PREVHDAY)*86400+CURHSEC
"RTN","ZOSVKRO",107,0)
 ;
"RTN","ZOSVKRO",108,0)
 ; difference = current stats minus previous stats
"RTN","ZOSVKRO",109,0)
 ; DIFF       = CURSTAT - PREVSTAT
"RTN","ZOSVKRO",110,0)
 ;            = cpu^dio^bio^pg_fault^cmd^glo^elapsed_sec
"RTN","ZOSVKRO",111,0)
 F I=1:1:7 S $P(DIFF,"^",I)=$P(CURSTAT,"^",I)-$P(PREVSTAT,"^",I)
"RTN","ZOSVKRO",112,0)
 ;
"RTN","ZOSVKRO",113,0)
 ; quit if negative m commands or global references
"RTN","ZOSVKRO",114,0)
 Q:$P(DIFF,"^",5)<0
"RTN","ZOSVKRO",115,0)
 Q:$P(DIFF,"^",6)<0
"RTN","ZOSVKRO",116,0)
 ;
"RTN","ZOSVKRO",117,0)
 ; option name
"RTN","ZOSVKRO",118,0)
 S OPT=$P(PREVSTAT,"^",10)
"RTN","ZOSVKRO",119,0)
 ;
"RTN","ZOSVKRO",120,0)
 ; PRIMETM = 0: non-prime time
"RTN","ZOSVKRO",121,0)
 ;           1: prime time
"RTN","ZOSVKRO",122,0)
 S PRIMETM=0
"RTN","ZOSVKRO",123,0)
 ;
"RTN","ZOSVKRO",124,0)
 ; set prime time = 1 if after 8am and before 5pm
"RTN","ZOSVKRO",125,0)
 ; non-workday prime time and non-prime time will be converted
"RTN","ZOSVKRO",126,0)
 ; into non-workday time in nightly background job (KMPRBD02)
"RTN","ZOSVKRO",127,0)
 I CURHSEC>28799&(CURHSEC<61201) S PRIMETM=1
"RTN","ZOSVKRO",128,0)
 ;
"RTN","ZOSVKRO",129,0)
 ; global location for data storage
"RTN","ZOSVKRO",130,0)
 S ARRAY=$G(^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM))
"RTN","ZOSVKRO",131,0)
 ;
"RTN","ZOSVKRO",132,0)
 ; seven elements for this option
"RTN","ZOSVKRO",133,0)
 F I=1:1:7 S $P(ARRAY,"^",I)=$P($G(ARRAY),"^",I)+$P(DIFF,"^",I)
"RTN","ZOSVKRO",134,0)
 ; 8th piece is occurrence counter for this option
"RTN","ZOSVKRO",135,0)
 S $P(ARRAY,"^",8)=$P(ARRAY,"^",8)+1
"RTN","ZOSVKRO",136,0)
 ;
"RTN","ZOSVKRO",137,0)
 ; current hour => 0 - 23
"RTN","ZOSVKRO",138,0)
 S CURRHR=CURHSEC\3600
"RTN","ZOSVKRO",139,0)
 ;
"RTN","ZOSVKRO",140,0)
 ; time starts at zero hour - shift everything by 10 so zero hour
"RTN","ZOSVKRO",141,0)
 ; begins at 10th piece, hour 1 is 11th, ... and hour 23 is 33rd piece
"RTN","ZOSVKRO",142,0)
 ;
"RTN","ZOSVKRO",143,0)
 ; record last hour this option ran - this will be moved to file 8971.1
"RTN","ZOSVKRO",144,0)
 ; hourly stats are only attributed to the current hour
"RTN","ZOSVKRO",145,0)
 ;
"RTN","ZOSVKRO",146,0)
 ; add ~1 if this job runs from top of hour to 60 seconds
"RTN","ZOSVKRO",147,0)
 ; this will give active number of jobs per hour
"RTN","ZOSVKRO",148,0)
 S ACTV=$P(ARRAY,"^",(CURRHR+10)),$P(ACTV,"~")=$P(ACTV,"~")+1
"RTN","ZOSVKRO",149,0)
 I (($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))<60 S $P(ACTV,"~",2)=1
"RTN","ZOSVKRO",150,0)
 S $P(ARRAY,"^",(CURRHR+10))=ACTV
"RTN","ZOSVKRO",151,0)
 ;
"RTN","ZOSVKRO",152,0)
 ; 9th piece: current $h seconds ~ elapsed seconds ~ difference
"RTN","ZOSVKRO",153,0)
 S $P(ARRAY,"^",9)=($P(CURSTAT,"^",8))_"~"_($P(DIFF,"^",7))_"~"_(($P(CURSTAT,"^",8)#3600)-$P(DIFF,"^",7))
"RTN","ZOSVKRO",154,0)
 ;
"RTN","ZOSVKRO",155,0)
 ; set into global
"RTN","ZOSVKRO",156,0)
 S ^KMPTMP("KMPR","DLY",NODE,CURHDAY,OPT,$J,PRIMETM)=ARRAY
"RTN","ZOSVKRO",157,0)
 ;
"RTN","ZOSVKRO",158,0)
 Q
"RTN","ZOSVKRO",159,0)
 ;
"RTN","ZOSVKRO",160,0)
STATS() ;-- extrinsic - return current stats for this $job
"RTN","ZOSVKRO",161,0)
  ;
"RTN","ZOSVKRO",162,0)
 N MUMPS,OS,OSNUM,PROCESS,RETURN,V,VER,ZH,ZT
"RTN","ZOSVKRO",163,0)
 ;
"RTN","ZOSVKRO",164,0)
 S RETURN=""
"RTN","ZOSVKRO",165,0)
 ; mumps implementation
"RTN","ZOSVKRO",166,0)
 S MUMPS=$$VERSION^%ZOSV(1)
"RTN","ZOSVKRO",167,0)
 ; quit if not cache
"RTN","ZOSVKRO",168,0)
 Q:$TR(MUMPS,"cahe","CAHE")'["CACHE" ""
"RTN","ZOSVKRO",169,0)
 ; operating system
"RTN","ZOSVKRO",170,0)
 S OS=$$OS^%ZOSV
"RTN","ZOSVKRO",171,0)
 ; mumps version
"RTN","ZOSVKRO",172,0)
 S VER=$P($$VERSION^%ZOSV(0),".",1,2)
"RTN","ZOSVKRO",173,0)
 ; $h
"RTN","ZOSVKRO",174,0)
 S ZT=$H_"."_$P($ZTIMESTAMP,".",2)
"RTN","ZOSVKRO",175,0)
 ; if version is greater than 2007
"RTN","ZOSVKRO",176,0)
 I VER>2007 D 
"RTN","ZOSVKRO",177,0)
 .S PROCESS=##class(%SYS.ProcessQuery).%OpenId($J)
"RTN","ZOSVKRO",178,0)
 .Q:PROCESS=""
"RTN","ZOSVKRO",179,0)
 .; cpu time
"RTN","ZOSVKRO",180,0)
 .S KMPRCPU=PROCESS.GetCPUTime()
"RTN","ZOSVKRO",181,0)
 .S KMPRCPU=$P(KMPRCPU,",")+$P(KMPRCPU,",",2)
"RTN","ZOSVKRO",182,0)
 .S $P(RETURN,"^")=$FN(KMPRCPU/1000,"",2)
"RTN","ZOSVKRO",183,0)
 .; m commands
"RTN","ZOSVKRO",184,0)
 .S $P(RETURN,"^",5)=PROCESS.LinesExecuted
"RTN","ZOSVKRO",185,0)
 .; global references
"RTN","ZOSVKRO",186,0)
 .S $P(RETURN,"^",6)=PROCESS.GlobalReferences
"RTN","ZOSVKRO",187,0)
 .; $h date
"RTN","ZOSVKRO",188,0)
 .S $P(RETURN,"^",7)=$P(ZT,",")
"RTN","ZOSVKRO",189,0)
 .; $h seconds
"RTN","ZOSVKRO",190,0)
 .S $P(RETURN,"^",8)=$p($P(ZT,",",2),".")
"RTN","ZOSVKRO",191,0)
 .; $h seconds.thousandofsecond
"RTN","ZOSVKRO",192,0)
 .S $P(RETURN,"^",9)=$P(ZT,",",2)
"RTN","ZOSVKRO",193,0)
 ;
"RTN","ZOSVKRO",194,0)
 ; if version is 4 or greater and not linux and not unknown
"RTN","ZOSVKRO",195,0)
 E  I (+VER)'<4&(OS'["UNIX")&(OS'["UNK") D
"RTN","ZOSVKRO",196,0)
  .S V=$V(-1,$J),ZH=$ZU(171)
"RTN","ZOSVKRO",197,0)
 .; cpu time
"RTN","ZOSVKRO",198,0)
 .S $P(RETURN,"^")=$P(ZH,",")
"RTN","ZOSVKRO",199,0)
 .; direct io
"RTN","ZOSVKRO",200,0)
 .S $P(RETURN,"^",2)=$P(ZH,",",7)
"RTN","ZOSVKRO",201,0)
 .; buffered io
"RTN","ZOSVKRO",202,0)
 .S $P(RETURN,"^",3)=$P(ZH,",",8)
"RTN","ZOSVKRO",203,0)
 .; page faults
"RTN","ZOSVKRO",204,0)
 .S $P(RETURN,"^",4)=$P(ZH,",",4)
"RTN","ZOSVKRO",205,0)
 .; m commands
"RTN","ZOSVKRO",206,0)
 .S $P(RETURN,"^",5)=$P($P(V,"^",7),",")
"RTN","ZOSVKRO",207,0)
 .; global references
"RTN","ZOSVKRO",208,0)
 .S $P(RETURN,"^",6)=$P($P(V,"^",7),",",2)
"RTN","ZOSVKRO",209,0)
 .; $h date
"RTN","ZOSVKRO",210,0)
 .S $P(RETURN,"^",7)=$P(ZT,",")
"RTN","ZOSVKRO",211,0)
 .; $h seconds
"RTN","ZOSVKRO",212,0)
 .S $P(RETURN,"^",8)=$p($P(ZT,",",2),".")
"RTN","ZOSVKRO",213,0)
 .; $h seconds.thousandofsecond
"RTN","ZOSVKRO",214,0)
 .S $P(RETURN,"^",9)=$P(ZT,",",2)
"RTN","ZOSVKRO",215,0)
 ;
"RTN","ZOSVKRO",216,0)
 Q RETURN
"RTN","ZOSVKSD")
0^1^B10781494
"RTN","ZOSVKSD",1,0)
%ZOSVKSD ;OAK/KAK/RAK/JML - ZOSVKSD - Calculate Disk Capacity ;9/1/2015
"RTN","ZOSVKSD",2,0)
 ;;8.0;KERNEL;**121,197,268,456,568**;Jul 26, 2004;Build 48
"RTN","ZOSVKSD",3,0)
 ;
"RTN","ZOSVKSD",4,0)
 ; This routine will help to calculate disk capacity for
"RTN","ZOSVKSD",5,0)
 ; Cache system platforms by looking up volume set table information
"RTN","ZOSVKSD",6,0)
 ;
"RTN","ZOSVKSD",7,0)
EN(SITENUM,SESSNUM,OS) ;-- called by routine SYS+2^KMPSLK
"RTN","ZOSVKSD",8,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",9,0)
 ; SITENUM = Station number of site
"RTN","ZOSVKSD",10,0)
 ; SESSNUM = SAGG session number
"RTN","ZOSVKSD",11,0)
 ; VOLS    = Array containing names of monitored volumes
"RTN","ZOSVKSD",12,0)
 ; OS      = Type of M platform (CVMS, CWINNT)
"RTN","ZOSVKSD",13,0)
 ;
"RTN","ZOSVKSD",14,0)
 ; Returns ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",vol_name) = vol_size
"RTN","ZOSVKSD",15,0)
 ;--------------------------------------------------------------------
"RTN","ZOSVKSD",16,0)
 ;
"RTN","ZOSVKSD",17,0)
 Q:'$G(SITENUM)
"RTN","ZOSVKSD",18,0)
 Q:$G(SESSNUM)=""
"RTN","ZOSVKSD",19,0)
 Q:$G(OS)=""
"RTN","ZOSVKSD",20,0)
 ;
"RTN","ZOSVKSD",21,0)
 D ALLOS
"RTN","ZOSVKSD",22,0)
 ;
"RTN","ZOSVKSD",23,0)
 Q
"RTN","ZOSVKSD",24,0)
 ;
"RTN","ZOSVKSD",25,0)
ALLOS ; Using InterSystems APIs.  Designed to work on all OS's
"RTN","ZOSVKSD",26,0)
 N KMPSARR,KMPSDIR,KMPSRNS,KMPSTNS,KMPSPTR
"RTN","ZOSVKSD",27,0)
 ; 
"RTN","ZOSVKSD",28,0)
 ; KMPS*2.0*1 -- now monitoring all volume sets
"RTN","ZOSVKSD",29,0)
 ;
"RTN","ZOSVKSD",30,0)
 S KMPSDIR="",KMPARR=""
"RTN","ZOSVKSD",31,0)
 S KMPSRNS=$ZU(5),KMPSTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",32,0)
 F  S KMPSDIR=$O(^SYS("UCI",KMPSDIR)) Q:KMPSDIR=""  D
"RTN","ZOSVKSD",33,0)
 .Q:$G(^SYS("UCI",KMPSDIR))]""
"RTN","ZOSVKSD",34,0)
 .; get TOTAL BLOCKS for directory
"RTN","ZOSVKSD",35,0)
 .S KMPSPTR=##class(SYS.Database).%OpenId(KMPSDIR)
"RTN","ZOSVKSD",36,0)
 .; quit if not mounted
"RTN","ZOSVKSD",37,0)
 .Q:KMPSPTR.Mounted'=1
"RTN","ZOSVKSD",38,0)
 .;
"RTN","ZOSVKSD",39,0)
 .S KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)=KMPSPTR.Blocks
"RTN","ZOSVKSD",40,0)
 S KMPSTNS=$ZU(5,KMPSRNS)
"RTN","ZOSVKSD",41,0)
 S KMPSDIR=""
"RTN","ZOSVKSD",42,0)
 F  S KMPSDIR=$O(KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)) Q:KMPSDIR=""  D
"RTN","ZOSVKSD",43,0)
 .S ^XTMP("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)=KMPSARR("KMPS",SITENUM,SESSNUM,"@VOL",KMPSDIR)
"RTN","ZOSVKSD",44,0)
 Q
"RTN","ZOSVKSD",45,0)
 ;
"RTN","ZOSVKSD",46,0)
KMPVVSTM(KMPVDATA) ; Get storage metrics for Vista Storage Monitor (VSTM) within VistA System Monitor (VSM)
"RTN","ZOSVKSD",47,0)
 S U="^"
"RTN","ZOSVKSD",48,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3) ;  IA 10097
"RTN","ZOSVKSD",49,0)
 ; get current namespace, switch to %SYS
"RTN","ZOSVKSD",50,0)
 S KMPVRNS=$ZU(5),KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",51,0)
 S KMPVDIR=""
"RTN","ZOSVKSD",52,0)
 S KMPVTNS=$ZU(5,"%SYS")
"RTN","ZOSVKSD",53,0)
 F  S KMPVDIR=$O(^SYS("UCI",KMPVDIR)) Q:KMPVDIR=""  D
"RTN","ZOSVKSD",54,0)
 .Q:$G(^SYS("UCI",KMPVDIR))]""
"RTN","ZOSVKSD",55,0)
 .S KMPVDB=##class(SYS.Database).%OpenId(KMPVDIR)
"RTN","ZOSVKSD",56,0)
 .S KMPVMAX=KMPVDB.MaxSize,KMPVSIZE=KMPVDB.Size
"RTN","ZOSVKSD",57,0)
 .S KMPVBSIZ=KMPVDB.BlockSize,KMPVBPM=KMPVDB.BlocksPerMap
"RTN","ZOSVKSD",58,0)
 .S KMPVSTAT=KMPVDB.GetFreeSpace(KMPVDIR,.KMPVFMB,.KMPVFBLK)
"RTN","ZOSVKSD",59,0)
 .S KMPVSYSD=KMPVDB.IsSystemDB(KMPVDIR),KMPVESIZ=KMPVDB.ExpansionSize
"RTN","ZOSVKSD",60,0)
 .; MaxSize(MB)^Current Size(MB)^Block Size(int)^Bocks per Map(int)^Free space(MB)^
"RTN","ZOSVKSD",61,0)
 .; Free Space(int-Blocks)^System Dir(bool)^Expansion size
"RTN","ZOSVKSD",62,0)
 .S KMPVDATA(KMPVDIR)=KMPVMAX_U_KMPVSIZE_U_KMPVBSIZ_U_KMPVBPM_U_KMPVFMB_U_KMPVFBLK_U_KMPVSYSD_U_KMPVESIZ
"RTN","ZOSVKSD",63,0)
 ; Execute FreeSpace Query to add Directory Free Space
"RTN","ZOSVKSD",64,0)
 S KMPVFLAG="*"
"RTN","ZOSVKSD",65,0)
 S KMPVRSET=##class(%Library.ResultSet).%New("SYS.Database:FreeSpace")
"RTN","ZOSVKSD",66,0)
 D KMPVRSET.Execute(KMPVFLAG,0)
"RTN","ZOSVKSD",67,0)
 While (KMPVRSET.Next()) {
"RTN","ZOSVKSD",68,0)
  I (KMPVRSET.Data("Available")["Dismounted") continue
"RTN","ZOSVKSD",69,0)
  S KMPVDFSP=KMPVRSET.Data("DiskFreeSpace"),KMPVDIR=KMPVRSET.Data("Directory")
"RTN","ZOSVKSD",70,0)
  I $D(KMPVDATA(KMPVDIR)) S $P(KMPVDATA(KMPVDIR),"^",9)=KMPVDFSP
"RTN","ZOSVKSD",71,0)
 }
"RTN","ZOSVKSD",72,0)
 D KMPVRSET.Close()
"RTN","ZOSVKSD",73,0)
 ; Switch back to production namespace
"RTN","ZOSVKSD",74,0)
 S KMPVTNS=$ZU(5,KMPVRNS)
"RTN","ZOSVKSD",75,0)
 Q
"RTN","ZOSVKSOE")
0^2^B38080477
"RTN","ZOSVKSOE",1,0)
%ZOSVKSE ;OAK/KAK/RAK/JML - ZOSVKSOE - Global data (Cache) ;9/1/2015
"RTN","ZOSVKSOE",2,0)
 ;;8.0;KERNEL;**90,94,197,268,456,568**;Jul 26, 2004;Build 48
"RTN","ZOSVKSOE",3,0)
 ;
"RTN","ZOSVKSOE",4,0)
 Q
"RTN","ZOSVKSOE",5,0)
 ;
"RTN","ZOSVKSOE",6,0)
START(KMPSTEMP) ;-- called by routine CVMS+2^KMPSGE/CWINNT+1^KMPSGE in VAH
"RTN","ZOSVKSOE",7,0)
 ;------------------------------------------------------------------------
"RTN","ZOSVKSOE",8,0)
 ; KMPSTEMP... ^ piece 1: SiteNumber
"RTN","ZOSVKSOE",9,0)
 ;               piece 2: SessionNumber
"RTN","ZOSVKSOE",10,0)
 ;               piece 3: XTMP Global Location
"RTN","ZOSVKSOE",11,0)
 ;               piece 4: Current Date/Time
"RTN","ZOSVKSOE",12,0)
 ;               piece 5: Production UCI
"RTN","ZOSVKSOE",13,0)
 ;               piece 6: Volume set
"RTN","ZOSVKSOE",14,0)
 ;-------------------------------------------------------------------------
"RTN","ZOSVKSOE",15,0)
 ;
"RTN","ZOSVKSOE",16,0)
 Q:$G(KMPSTEMP)=""
"RTN","ZOSVKSOE",17,0)
 ;
"RTN","ZOSVKSOE",18,0)
 N KMPSDT,KMPSERR,KMPSERR1,KMPSERR2,KMPSERR3,KMPSERR4
"RTN","ZOSVKSOE",19,0)
 N KMPSLOC,KMPSPROD,KMPSSITE,KMPSVOL,KMPSZU,NUM,X,VERSION,ZV
"RTN","ZOSVKSOE",20,0)
 ;
"RTN","ZOSVKSOE",21,0)
 I $$NEWERR^%ZTER N $ETRAP,$ESTACK S $ETRAP="D ERROR^%ZOSVKSE"
"RTN","ZOSVKSOE",22,0)
 E  S X="ERROR^%ZOSVKSE",@^%ZOSF("TRAP")
"RTN","ZOSVKSOE",23,0)
 ;
"RTN","ZOSVKSOE",24,0)
 S U="^",KMPSSITE=$P(KMPSTEMP,U),NUM=$P(KMPSTEMP,U,2),KMPSLOC=$P(KMPSTEMP,U,3)
"RTN","ZOSVKSOE",25,0)
 S KMPSDT=$P(KMPSTEMP,U,4),KMPSPROD=$P(KMPSTEMP,U,5),KMPSVOL=$P(KMPSTEMP,U,6)
"RTN","ZOSVKSOE",26,0)
 K KMPSTEMP
"RTN","ZOSVKSOE",27,0)
 S KMPSZU=$ZNSPACE_","_KMPSVOL
"RTN","ZOSVKSOE",28,0)
 S ^XTMP("KMPS","START",KMPSVOL,NUM)=$H
"RTN","ZOSVKSOE",29,0)
 S VERSION=$$VERSION^%ZOSV ; IA# 10097
"RTN","ZOSVKSOE",30,0)
 I VERSION<2008 D DONE Q
"RTN","ZOSVKSOE",31,0)
 ;
"RTN","ZOSVKSOE",32,0)
 ; version
"RTN","ZOSVKSOE",33,0)
 S ZV=$P($$VERSION^%ZOSV(1),"/")  ; IA# 10097
"RTN","ZOSVKSOE",34,0)
 ;
"RTN","ZOSVKSOE",35,0)
 ; check for accepted operating system
"RTN","ZOSVKSOE",36,0)
 Q:'$$OSOKAY(ZV)
"RTN","ZOSVKSOE",37,0)
 ;
"RTN","ZOSVKSOE",38,0)
 D ALLOS
"RTN","ZOSVKSOE",39,0)
 ;
"RTN","ZOSVKSOE",40,0)
DONE ; normal exit
"RTN","ZOSVKSOE",41,0)
 ;
"RTN","ZOSVKSOE",42,0)
 K ^XTMP("KMPS","START",KMPSVOL)
"RTN","ZOSVKSOE",43,0)
 ;
"RTN","ZOSVKSOE",44,0)
 Q
"RTN","ZOSVKSOE",45,0)
 ;
"RTN","ZOSVKSOE",46,0)
ALLOS ;-- entry point now for all OS's
"RTN","ZOSVKSOE",47,0)
 ;
"RTN","ZOSVKSOE",48,0)
 N GLOARRAY,RC
"RTN","ZOSVKSOE",49,0)
 ;
"RTN","ZOSVKSOE",50,0)
 ; set up GLOARRAY array indexed by global name
"RTN","ZOSVKSOE",51,0)
 S RC=$$GetDirGlobals^%SYS.DATABASE(KMPSVOL,.GLOARRAY)
"RTN","ZOSVKSOE",52,0)
 ;
"RTN","ZOSVKSOE",53,0)
 I ('+RC) D ERRVMS G ERROR
"RTN","ZOSVKSOE",54,0)
 ;
"RTN","ZOSVKSOE",55,0)
 I '$D(GLOARRAY) S ^XTMP("KMPS",KMPSSITE,NUM," NO GLOBALS ",KMPSVOL)="" Q
"RTN","ZOSVKSOE",56,0)
 ;
"RTN","ZOSVKSOE",57,0)
 D ALLGLO
"RTN","ZOSVKSOE",58,0)
 ;
"RTN","ZOSVKSOE",59,0)
 Q
"RTN","ZOSVKSOE",60,0)
 ;
"RTN","ZOSVKSOE",61,0)
ALLGLO ;- collect global info
"RTN","ZOSVKSOE",62,0)
 ;
"RTN","ZOSVKSOE",63,0)
 N COLLATE,DATASIZE,FBLK,GLO,GLOINFO,GLOTOTBLKS,GLOPNTBLKS,GLOTOTBYTES
"RTN","ZOSVKSOE",64,0)
 N GLOPNTBYTES,GLOBIGBLKS,GLOBIGBYTES,GLOBIGSTRINGS,GRWBLK
"RTN","ZOSVKSOE",65,0)
 N I,INFO,JRNL,LEV,MSGLIST,PROT,PROTECT,PROTINFO,RC,TPTRBLK,TRY
"RTN","ZOSVKSOE",66,0)
 ;
"RTN","ZOSVKSOE",67,0)
 S GLO="",RC=1
"RTN","ZOSVKSOE",68,0)
 S PROT(0)="N",PROT(1)="R",PROT(2)="RW",PROT(3)="RWD"
"RTN","ZOSVKSOE",69,0)
 ;
"RTN","ZOSVKSOE",70,0)
 F  S GLO=$O(GLOARRAY(GLO)) Q:GLO=""!+$G(^XTMP("KMPS","STOP"))  D  Q:+$G(^XTMP("KMPS","STOP"))!('+RC)
"RTN","ZOSVKSOE",71,0)
 .;
"RTN","ZOSVKSOE",72,0)
 .S (COLLATE,FBLK,GRWBLK,JRNL,PROTECT,TPTRBLK)=""
"RTN","ZOSVKSOE",73,0)
 .S PROTINFO="^^^"
"RTN","ZOSVKSOE",74,0)
 .;
"RTN","ZOSVKSOE",75,0)
 .; global info - '^' delimited
"RTN","ZOSVKSOE",76,0)
 .;         piece 1: first block
"RTN","ZOSVKSOE",77,0)
 .;         piece 2: jrnl^collate
"RTN","ZOSVKSOE",78,0)
 .;         piece 3: bits(blank)
"RTN","ZOSVKSOE",79,0)
 .;         piece 4: growth area block
"RTN","ZOSVKSOE",80,0)
 .;         piece 5: protection:system(blank)
"RTN","ZOSVKSOE",81,0)
 .;         piece 6: protection:world
"RTN","ZOSVKSOE",82,0)
 .;         piece 7: group^owner
"RTN","ZOSVKSOE",83,0)
 .;         piece 8: network^top (first) pointer block
"RTN","ZOSVKSOE",84,0)
 .S GLOINFO=FBLK_U_JRNL_U_COLLATE_"^^"_GRWBLK_"^^"_PROTINFO_U_TPTRBLK
"RTN","ZOSVKSOE",85,0)
 .;
"RTN","ZOSVKSOE",86,0)
 .S ^XTMP("KMPS",KMPSSITE,NUM,KMPSDT,GLO,KMPSZU)=GLOINFO
"RTN","ZOSVKSOE",87,0)
 .;
"RTN","ZOSVKSOE",88,0)
 .; get global total blocks.... GLOTOTBLKS
"RTN","ZOSVKSOE",89,0)
 .;     global pointer blocks.. GLOPNTBLKS
"RTN","ZOSVKSOE",90,0)
 .;     global total bytes..... GLOTOTBYTES
"RTN","ZOSVKSOE",91,0)
 .;     global pointer bytes... GLOPNTBYTE
"RTN","ZOSVKSOE",92,0)
 .;     global big blocks...... GLOBIGBLKS
"RTN","ZOSVKSOE",93,0)
 .;     global big bytes....... GLOBIGBYTES
"RTN","ZOSVKSOE",94,0)
 .;     global big strings..... GLOBIGSTRINGS
"RTN","ZOSVKSOE",95,0)
 .;     data size.............. DATASIZE
"RTN","ZOSVKSOE",96,0)
 .; will stop if there are more than 999 errors with this global
"RTN","ZOSVKSOE",97,0)
 .S RC=$$CheckGlobalIntegrity^%SYS.DATABASE(KMPSVOL,GLO,999,.GLOTOTBLKS,.GLOPNTBLKS,.GLOTOTBYTES,.GLOPNTBYTES,.GLOBIGBLKS,.GLOBIGBYTES,.GLOBIGSTRINGS,.DATASIZE)
"RTN","ZOSVKSOE",98,0)
 .;
"RTN","ZOSVKSOE",99,0)
 .K MSGLIST
"RTN","ZOSVKSOE",100,0)
 .D DecomposeStatus^%SYS.DATABASE(RC,.MSGLIST,0,"")
"RTN","ZOSVKSOE",101,0)
 .;
"RTN","ZOSVKSOE",102,0)
 .S (LEV,RC)=1
"RTN","ZOSVKSOE",103,0)
 .F I=1:1:MSGLIST D
"RTN","ZOSVKSOE",104,0)
 ..S INFO=MSGLIST(I),BLK=$$BLK(INFO),EFF=$$EFF(INFO)
"RTN","ZOSVKSOE",105,0)
 ..;
"RTN","ZOSVKSOE",106,0)
 ..; more than 999 errors reported
"RTN","ZOSVKSOE",107,0)
 ..I INFO["***Further checking of this global is aborted." S RC=0 D ERRVMS Q
"RTN","ZOSVKSOE",108,0)
 ..;
"RTN","ZOSVKSOE",109,0)
 ..I ($P(INFO,":")["Top Pointer Level")!($P(INFO,":")["Top/Bottom Pnt Level") D  Q
"RTN","ZOSVKSOE",110,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,1)=BLK_"^"_EFF_"%^Pointer"
"RTN","ZOSVKSOE",111,0)
 ..I $P(INFO,":")["Pointer Level" D  Q
"RTN","ZOSVKSOE",112,0)
 ...S LEV=LEV+1,^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,LEV)=BLK_"^"_EFF_"%^Pointer"
"RTN","ZOSVKSOE",113,0)
 ..I $P(INFO,":")["Bottom Pointer Level" D  Q
"RTN","ZOSVKSOE",114,0)
 ...S LEV=LEV+1,^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,LEV)=BLK_"^"_EFF_"%^Bottom pointer"
"RTN","ZOSVKSOE",115,0)
 ..I $P(INFO,":")["Data Level" D  Q
"RTN","ZOSVKSOE",116,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,"D")=BLK_"^"_EFF_"%^Data"
"RTN","ZOSVKSOE",117,0)
 ..I $P(INFO,":")["Big Strings" D  Q
"RTN","ZOSVKSOE",118,0)
 ...S ^XTMP("KMPS",KMPSSITE,NUM,GLO,KMPSZU,KMPSDT,"L")=BLK_"^"_EFF_"%^LongString"
"RTN","ZOSVKSOE",119,0)
 ;
"RTN","ZOSVKSOE",120,0)
 I ('+RC) G ERROR
"RTN","ZOSVKSOE",121,0)
 ;
"RTN","ZOSVKSOE",122,0)
 Q
"RTN","ZOSVKSOE",123,0)
 ;
"RTN","ZOSVKSOE",124,0)
BLK(STRNG)      ;-- function to obtain number of blocks from input string
"RTN","ZOSVKSOE",125,0)
 ;
"RTN","ZOSVKSOE",126,0)
 N BLK
"RTN","ZOSVKSOE",127,0)
 Q:$G(STRNG)="" ""
"RTN","ZOSVKSOE",128,0)
 S BLK=$$NOCOMMA($P($P(STRNG,"=",2)," "))
"RTN","ZOSVKSOE",129,0)
 Q BLK
"RTN","ZOSVKSOE",130,0)
 ;
"RTN","ZOSVKSOE",131,0)
EFF(STRNG)      ;-- function to obtain efficiency from input string
"RTN","ZOSVKSOE",132,0)
 ;
"RTN","ZOSVKSOE",133,0)
 N EFF
"RTN","ZOSVKSOE",134,0)
 Q:$G(STRNG)="" ""
"RTN","ZOSVKSOE",135,0)
 S EFF=$P($P(STRNG,"%"),"(",2)
"RTN","ZOSVKSOE",136,0)
 Q EFF
"RTN","ZOSVKSOE",137,0)
 ;
"RTN","ZOSVKSOE",138,0)
NOCOMMA(IN)     ;-- strip comma from input string
"RTN","ZOSVKSOE",139,0)
 ;
"RTN","ZOSVKSOE",140,0)
 Q $TR(IN,",","")
"RTN","ZOSVKSOE",141,0)
 ;
"RTN","ZOSVKSOE",142,0)
ERRVMS ;
"RTN","ZOSVKSOE",143,0)
 S $ZE="<ERROR>UC1VMS+6^%ZOSVKSE"
"RTN","ZOSVKSOE",144,0)
 I '+RC S KMPSERR1="ERROR: Cannot find global names for "_KMPSVOL
"RTN","ZOSVKSOE",145,0)
 Q
"RTN","ZOSVKSOE",146,0)
 ;
"RTN","ZOSVKSOE",147,0)
OSOKAY(ZV) ;-- extrinsic function - operating system ok for SAGG
"RTN","ZOSVKSOE",148,0)
 ;---------------------------------------------------------------
"RTN","ZOSVKSOE",149,0)
 ; ZV - Operating system
"RTN","ZOSVKSOE",150,0)
 ;
"RTN","ZOSVKSOE",151,0)
 ; Return: 1 - os is okay for sagg
"RTN","ZOSVKSOE",152,0)
 ;         "" - os not okay
"RTN","ZOSVKSOE",153,0)
 ;---------------------------------------------------------------
"RTN","ZOSVKSOE",154,0)
 ;
"RTN","ZOSVKSOE",155,0)
 Q:$G(ZV)="" ""
"RTN","ZOSVKSOE",156,0)
 Q:ZV="Cache for OpenVMS" 1
"RTN","ZOSVKSOE",157,0)
 Q:$E(ZV,1,14)="Cache for UNIX" 1
"RTN","ZOSVKSOE",158,0)
 Q:$E(ZV,1,17)="Cache for Windows" 1
"RTN","ZOSVKSOE",159,0)
 Q ""
"RTN","ZOSVKSOE",160,0)
 ;
"RTN","ZOSVKSOE",161,0)
ERROR ; ERROR - Tell all SAGG jobs to STOP collection
"RTN","ZOSVKSOE",162,0)
 ;
"RTN","ZOSVKSOE",163,0)
 C 63
"RTN","ZOSVKSOE",164,0)
 S KMPSERR="Error encountered while running SAGG collection routine for volume set "_$G(KMPSVOL)
"RTN","ZOSVKSOE",165,0)
 S KMPSERR2="Last global reference = "_$ZR
"RTN","ZOSVKSOE",166,0)
 S KMPSERR3="Error code = "_$$EC^%ZOSV ; IA# 10097
"RTN","ZOSVKSOE",167,0)
 I $D(KMPSERR4) S KMPSERR4="For more information, read text at line tag "_KMPSERR4_" in routine ^%ZOSVKSS"
"RTN","ZOSVKSOE",168,0)
 ;
"RTN","ZOSVKSOE",169,0)
 S ^XTMP("KMPS","ERROR",KMPSVOL)="",^XTMP("KMPS","STOP")=1
"RTN","ZOSVKSOE",170,0)
 K ^XTMP("KMPS","START",KMPSVOL)
"RTN","ZOSVKSOE",171,0)
 ;
"RTN","ZOSVKSOE",172,0)
 D ^%ZTER,UNWIND^%ZTER
"RTN","ZOSVKSOE",173,0)
 ;
"RTN","ZOSVKSOE",174,0)
 Q
"RTN","ZOSVKSPI")
0^^B1280715
"RTN","ZOSVKSPI",1,0)
ZOSVKSPI ;BP/RAK/JML - Post install routine ;9/1/2015
"RTN","ZOSVKSPI",2,0)
 ;;8.0;KERNEL;**568**;Jul 26, 2004;Build 48
"RTN","ZOSVKSPI",3,0)
 ;
"RTN","ZOSVKSPI",4,0)
EN ;-- entry point for post-install
"RTN","ZOSVKSPI",5,0)
 ;
"RTN","ZOSVKSPI",6,0)
 D BMES^XPDUTL(" Begin Post-Install...")
"RTN","ZOSVKSPI",7,0)
 D SAVE
"RTN","ZOSVKSPI",8,0)
 D MES^XPDUTL(" Post-Install complete!")
"RTN","ZOSVKSPI",9,0)
 ;
"RTN","ZOSVKSPI",10,0)
 Q
"RTN","ZOSVKSPI",11,0)
 ;
"RTN","ZOSVKSPI",12,0)
SAVE ;-save correct files as '%' routines 
"RTN","ZOSVKSPI",13,0)
 ;
"RTN","ZOSVKSPI",14,0)
 N %D,%S,SCR,ZTOS
"RTN","ZOSVKSPI",15,0)
 S ZTOS=$$OSNUM^ZTMGRSET
"RTN","ZOSVKSPI",16,0)
 ; if not supported
"RTN","ZOSVKSPI",17,0)
 I ZTOS'=3 D  Q
"RTN","ZOSVKSPI",18,0)
 .D MES^XPDUTL(" "_$P($T(@ZTOS^ZTMGRSET),";",3)_" is not supported.  No routine saved!")
"RTN","ZOSVKSPI",19,0)
 ; supported
"RTN","ZOSVKSPI",20,0)
 ; - don't need to send/recompile all 
"RTN","ZOSVKSPI",21,0)
 ;   S %D="%ZOSVKSE^%ZOSVKSS^%ZOSVKSD^%ZOSVKR",%S="ZOSVKSOE^ZOSVKSOS^ZOSVKSD^ZOSVKRO",SCR="I 1"
"RTN","ZOSVKSPI",22,0)
 S %D="%ZOSVKSE^%ZOSVKSD^%ZOSVKR",%S="ZOSVKSOE^ZOSVKSD^ZOSVKRO",SCR="I 1"
"RTN","ZOSVKSPI",23,0)
 D MOVE^ZTMGRSET
"RTN","ZOSVKSPI",24,0)
 D MES^XPDUTL("          for "_$P($T(@ZTOS^ZTMGRSET),";",3)_".")
"RTN","ZOSVKSPI",25,0)
 ;
"RTN","ZOSVKSPI",26,0)
 Q
"RTN","ZOSVKSPI",27,0)
 ;
"VER")
8.0^22.0
**INSTALL NAME**
KMPD*3.0*3
"BLD",9456,0)
KMPD*3.0*3^CAPACITY MANAGEMENT TOOLS^0^3160711^y
"BLD",9456,1,0)
^^1^1^3150903^
"BLD",9456,1,1,0)
Includes fixes and upgrades to CPRS Coversheet Load functionality.
"BLD",9456,4,0)
^9.64PA^^
"BLD",9456,6.3)
42
"BLD",9456,"ABPKG")
n
"BLD",9456,"KRN",0)
^9.67PA^779.2^20
"BLD",9456,"KRN",.4,0)
.4
"BLD",9456,"KRN",.401,0)
.401
"BLD",9456,"KRN",.402,0)
.402
"BLD",9456,"KRN",.403,0)
.403
"BLD",9456,"KRN",.5,0)
.5
"BLD",9456,"KRN",.84,0)
.84
"BLD",9456,"KRN",3.6,0)
3.6
"BLD",9456,"KRN",3.8,0)
3.8
"BLD",9456,"KRN",9.2,0)
9.2
"BLD",9456,"KRN",9.8,0)
9.8
"BLD",9456,"KRN",9.8,"NM",0)
^9.68A^14^14
"BLD",9456,"KRN",9.8,"NM",1,0)
KMPDTU10^^0^B33489133
"BLD",9456,"KRN",9.8,"NM",2,0)
KMPDTM^^0^B27757282
"BLD",9456,"KRN",9.8,"NM",3,0)
KMPDTP1^^0^B37151192
"BLD",9456,"KRN",9.8,"NM",4,0)
KMPDTP2^^0^B34056989
"BLD",9456,"KRN",9.8,"NM",5,0)
KMPDTP3^^0^B41193781
"BLD",9456,"KRN",9.8,"NM",6,0)
KMPDTP4^^0^B40761189
"BLD",9456,"KRN",9.8,"NM",7,0)
KMPDTP5^^0^B39279349
"BLD",9456,"KRN",9.8,"NM",8,0)
KMPDTP6^^0^B34394776
"BLD",9456,"KRN",9.8,"NM",9,0)
KMPDTP7^^0^B26694983
"BLD",9456,"KRN",9.8,"NM",10,0)
KMPDBD01^^0^B1657961
"BLD",9456,"KRN",9.8,"NM",11,0)
KMPDRDAT^^0^B21746222
"BLD",9456,"KRN",9.8,"NM",12,0)
KMPDUTL^^0^B11972661
"BLD",9456,"KRN",9.8,"NM",13,0)
KMPDTU11^^0^B4891419
"BLD",9456,"KRN",9.8,"NM",14,0)
KMPDSSS^^0^B33242782
"BLD",9456,"KRN",9.8,"NM","B","KMPDBD01",10)

"BLD",9456,"KRN",9.8,"NM","B","KMPDRDAT",11)

"BLD",9456,"KRN",9.8,"NM","B","KMPDSSS",14)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTM",2)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP1",3)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP2",4)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP3",5)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP4",6)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP5",7)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP6",8)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTP7",9)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTU10",1)

"BLD",9456,"KRN",9.8,"NM","B","KMPDTU11",13)

"BLD",9456,"KRN",9.8,"NM","B","KMPDUTL",12)

"BLD",9456,"KRN",19,0)
19
"BLD",9456,"KRN",19,"NM",0)
^9.68A^^
"BLD",9456,"KRN",19.1,0)
19.1
"BLD",9456,"KRN",101,0)
101
"BLD",9456,"KRN",409.61,0)
409.61
"BLD",9456,"KRN",771,0)
771
"BLD",9456,"KRN",779.2,0)
779.2
"BLD",9456,"KRN",870,0)
870
"BLD",9456,"KRN",8989.51,0)
8989.51
"BLD",9456,"KRN",8989.52,0)
8989.52
"BLD",9456,"KRN",8994,0)
8994
"BLD",9456,"KRN","B",.4,.4)

"BLD",9456,"KRN","B",.401,.401)

"BLD",9456,"KRN","B",.402,.402)

"BLD",9456,"KRN","B",.403,.403)

"BLD",9456,"KRN","B",.5,.5)

"BLD",9456,"KRN","B",.84,.84)

"BLD",9456,"KRN","B",3.6,3.6)

"BLD",9456,"KRN","B",3.8,3.8)

"BLD",9456,"KRN","B",9.2,9.2)

"BLD",9456,"KRN","B",9.8,9.8)

"BLD",9456,"KRN","B",19,19)

"BLD",9456,"KRN","B",19.1,19.1)

"BLD",9456,"KRN","B",101,101)

"BLD",9456,"KRN","B",409.61,409.61)

"BLD",9456,"KRN","B",771,771)

"BLD",9456,"KRN","B",779.2,779.2)

"BLD",9456,"KRN","B",870,870)

"BLD",9456,"KRN","B",8989.51,8989.51)

"BLD",9456,"KRN","B",8989.52,8989.52)

"BLD",9456,"KRN","B",8994,8994)

"BLD",9456,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9456,"QUES",0)
^9.62^^
"BLD",9456,"REQB",0)
^9.611^1^1
"BLD",9456,"REQB",1,0)
KMPD 3.0^2
"BLD",9456,"REQB","B","KMPD 3.0",1)

"MBREQ")
0
"PKG",616,-1)
1^1
"PKG",616,0)
CAPACITY MANAGEMENT TOOLS^KMPD^Capacity Management Tools
"PKG",616,20,0)
^9.402P^^
"PKG",616,22,0)
^9.49I^1^1
"PKG",616,22,1,0)
3.0^3121026^3130109^520696071
"PKG",616,22,1,"PAH",1,0)
3^3160711
"PKG",616,22,1,"PAH",1,1,0)
^^1^1^3160711
"PKG",616,22,1,"PAH",1,1,1,0)
Includes fixes and upgrades to CPRS Coversheet Load functionality.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","KMPDBD01")
0^10^B1657961
"RTN","KMPDBD01",1,0)
KMPDBD01 ;OAK/RAK/JML - CM Tools Background Driver ;9/1/2015
"RTN","KMPDBD01",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDBD01",3,0)
 ;
"RTN","KMPDBD01",4,0)
EN ;-entry point for background driver
"RTN","KMPDBD01",5,0)
 ;
"RTN","KMPDBD01",6,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPDBD01",7,0)
 ;
"RTN","KMPDBD01",8,0)
 N DAILY,STR
"RTN","KMPDBD01",9,0)
 ;
"RTN","KMPDBD01",10,0)
 ; update cpu data in file #8973 (CP PARAMETERS)
"RTN","KMPDBD01",11,0)
 D CPUSET^KMPDUTL6(1)
"RTN","KMPDBD01",12,0)
 ;
"RTN","KMPDBD01",13,0)
 ; hl7
"RTN","KMPDBD01",14,0)
 ;compile and store daily stats in file 8973.1 (CM HL7 DATA)
"RTN","KMPDBD01",15,0)
 S STR=$$NOW^XLFDT,DAILY=$$FMADD^XLFDT(DT,-1)
"RTN","KMPDBD01",16,0)
 D DAILY^KMPDHU02(DAILY,DAILY)
"RTN","KMPDBD01",17,0)
 ; store start, stop and delta times for daily background job
"RTN","KMPDBD01",18,0)
 D STRSTP^KMPDUTL2(3,1,1,STR)
"RTN","KMPDBD01",19,0)
 ;
"RTN","KMPDBD01",20,0)
 ; timing
"RTN","KMPDBD01",21,0)
 ; send raw numbers to CPE database
"RTN","KMPDBD01",22,0)
 D ^KMPDRDAT
"RTN","KMPDBD01",23,0)
 ; compile and store timing stats in file 8973.2 (CP TIMING)
"RTN","KMPDBD01",24,0)
 S STR=$$NOW^XLFDT
"RTN","KMPDBD01",25,0)
 D DAILY^KMPDTU02
"RTN","KMPDBD01",26,0)
 ; store start, stop and delta times for daily background job
"RTN","KMPDBD01",27,0)
 D STRSTP^KMPDUTL2(4,1,1,STR)
"RTN","KMPDBD01",28,0)
 ;
"RTN","KMPDBD01",29,0)
 ; transmit 'yesterdays' daily stats to national database
"RTN","KMPDBD01",30,0)
 S STR=$$NOW^XLFDT,DAILY=$$FMADD^XLFDT(DT,-1)
"RTN","KMPDBD01",31,0)
 D DAILY^KMPDTU01(DAILY)
"RTN","KMPDBD01",32,0)
 ; store start, stop and delta times for daily background job
"RTN","KMPDBD01",33,0)
 D STRSTP^KMPDUTL2(4,2,1,STR)
"RTN","KMPDBD01",34,0)
 ;
"RTN","KMPDBD01",35,0)
 ;
"RTN","KMPDBD01",36,0)
 ; if sunday
"RTN","KMPDBD01",37,0)
 D:'$$DOW^XLFDT(DT,1) SUNDAY
"RTN","KMPDBD01",38,0)
 ;
"RTN","KMPDBD01",39,0)
 Q
"RTN","KMPDBD01",40,0)
 ;
"RTN","KMPDBD01",41,0)
SUNDAY ;-- weekly
"RTN","KMPDBD01",42,0)
 ;
"RTN","KMPDBD01",43,0)
 N STR
"RTN","KMPDBD01",44,0)
 ;
"RTN","KMPDBD01",45,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPDBD01",46,0)
 ;
"RTN","KMPDBD01",47,0)
 ; hl7 - compress & transmit hl7 data to cm national
"RTN","KMPDBD01",48,0)
 ; database, and purge file #8973.1 (CM HL7 DATA) of old data
"RTN","KMPDBD01",49,0)
 S STR=$$NOW^XLFDT
"RTN","KMPDBD01",50,0)
 D WEEKLY^KMPDHU01(DT,1)
"RTN","KMPDBD01",51,0)
 ; store start, stop and delta times for weekly background job
"RTN","KMPDBD01",52,0)
 D STRSTP^KMPDUTL2(3,2,1,STR)
"RTN","KMPDBD01",53,0)
 ;
"RTN","KMPDBD01",54,0)
 ; purge entries from file 8973.2 (CP TIMING)
"RTN","KMPDBD01",55,0)
 S STR=$$NOW^XLFDT
"RTN","KMPDBD01",56,0)
 D PURGE1^KMPDUTL3
"RTN","KMPDBD01",57,0)
 D STRSTP^KMPDUTL2(4,2,2,STR)
"RTN","KMPDBD01",58,0)
 ;
"RTN","KMPDBD01",59,0)
 Q
"RTN","KMPDRDAT")
0^11^B21746222
"RTN","KMPDRDAT",1,0)
KMPDRDAT ;SP/JML - Cover Sheet Load Raw Data Extract ;9/1/2015
"RTN","KMPDRDAT",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDRDAT",3,0)
 ;
"RTN","KMPDRDAT",4,0)
 ; Send raw data to CPE database
"RTN","KMPDRDAT",5,0)
 ; START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",6,0)
 ;"KMPD","RDAT",
"RTN","KMPDRDAT",7,0)
EN ;
"RTN","KMPDRDAT",8,0)
 N KMPDBDLT,KMPDBGD,KMPDBGSS,KMPDDAT1,KMPDDATA,KMPDDELT,KMPDDOM,KMPDFDLT,KMPDFGBG,KMPDFGD,KMPDFGSS
"RTN","KMPDRDAT",9,0)
 N KMPDFMDAY,KMPDHDAY,KMPDID,KMPDLN,KMPDP,KMPDPROD,KMPDSINF,KMPDSITE,KMPDSYS,KMPDTDLT,KMPDWD,Y
"RTN","KMPDRDAT",10,0)
 ;
"RTN","KMPDRDAT",11,0)
 K ^KMPTMP("KMPD","RDAT")
"RTN","KMPDRDAT",12,0)
 ; following 3 lines must match $$PROD^KMPVCCFG()
"RTN","KMPDRDAT",13,0)
 S Y="" X $G(^%ZOSF("UCI"))
"RTN","KMPDRDAT",14,0)
 S KMPDPROD=$S(Y[$G(^%ZOSF("PROD")):1,1:0)
"RTN","KMPDRDAT",15,0)
 S KMPDPROD=$S(KMPDPROD=1:"Prod",1:"Test")
"RTN","KMPDRDAT",16,0)
 S KMPDSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPDRDAT",17,0)
 S KMPDDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPDRDAT",18,0)
 S KMPDSINF=$P(KMPDSITE,U,2)_"^"_$P(KMPDSITE,U,3)_"^"_KMPDDOM_"^"_KMPDPROD
"RTN","KMPDRDAT",19,0)
 S KMPDHDAY=+$H-1
"RTN","KMPDRDAT",20,0)
 S KMPDFMDAY=+$$HTFM^XLFDT(KMPDHDAY,1)
"RTN","KMPDRDAT",21,0)
 S KMPDWD=$$WORKDAY^XUWORKDY(KMPDFMDAY) ; IA#10046
"RTN","KMPDRDAT",22,0)
 ;
"RTN","KMPDRDAT",23,0)
 ; SET HEADER LINES
"RTN","KMPDRDAT",24,0)
 S KMPDLN=1
"RTN","KMPDRDAT",25,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="SYSTEM ID="_KMPDSINF,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",26,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="UPDATE CONFIG="_KMPDHDAY_U_KMPDWD_"^DAILY",KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",27,0)
 ; following line must match $$SYSCFG^KMPVCCFG()
"RTN","KMPDRDAT",28,0)
 S KMPDSYS=$$VERSION^%ZOSV(1)_"^"_$$OS^%ZOSV_"^"_$$VERSION^%ZOSV(0)_"^"_KMPDPROD ; IA 10097
"RTN","KMPDRDAT",29,0)
 S ^KMPTMP("KMPD","RDAT",KMPDLN)="SYSTEM CONFIG="_KMPDSYS,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",30,0)
 ;
"RTN","KMPDRDAT",31,0)
 ; DETERMINE FOREGROUND, BACKGROUND OR BOTH
"RTN","KMPDRDAT",32,0)
 S KMPDFGBG=0,U="^"
"RTN","KMPDRDAT",33,0)
 I $D(^KMPTMP("KMPDT","ORWCV")) S KMPDFGBG=1
"RTN","KMPDRDAT",34,0)
 I $D(^KMPTMP("KMPDT","ORWCV-FT")) S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDRDAT",35,0)
 I KMPDFGBG=1 D ORONE("ORWCV")
"RTN","KMPDRDAT",36,0)
 I KMPDFGBG=2 D ORONE("ORWCV-FT")
"RTN","KMPDRDAT",37,0)
 I KMPDFGBG=3 D ORBOTH
"RTN","KMPDRDAT",38,0)
 ;
"RTN","KMPDRDAT",39,0)
 D TRANSMIT
"RTN","KMPDRDAT",40,0)
 ;
"RTN","KMPDRDAT",41,0)
 K ^KMPTMP("KMPD","RDAT")
"RTN","KMPDRDAT",42,0)
 Q
"RTN","KMPDRDAT",43,0)
 ;
"RTN","KMPDRDAT",44,0)
ORONE(KMPDSUB) ;
"RTN","KMPDRDAT",45,0)
 S KMPDID=""
"RTN","KMPDRDAT",46,0)
 F  S KMPDID=$O(^KMPTMP("KMPDT",KMPDSUB,KMPDID)) Q:KMPDID=""  D
"RTN","KMPDRDAT",47,0)
 .S KMPDDAT1=$G(^KMPTMP("KMPDT",KMPDSUB,KMPDID))
"RTN","KMPDRDAT",48,0)
 .Q:$P(KMPDDAT1,U,5)=1
"RTN","KMPDRDAT",49,0)
 .; identifier
"RTN","KMPDRDAT",50,0)
 .S KMPDDATA=""
"RTN","KMPDRDAT",51,0)
 .; server start date/time
"RTN","KMPDRDAT",52,0)
 .S $P(KMPDDATA,U,1)=$P(KMPDDAT1,U)
"RTN","KMPDRDAT",53,0)
 .;  (FG or BG delta) and (Total server delta)
"RTN","KMPDRDAT",54,0)
 .D:$P(KMPDDAT1,U,2)
"RTN","KMPDRDAT",55,0)
 ..S KMPDDELT=$$HDIFF^XLFDT($P(KMPDDAT1,U,2),$P(KMPDDAT1,U),2)
"RTN","KMPDRDAT",56,0)
 ..S KMPDP=$S(KMPDSUB="ORWCV-FT":2,1:3)
"RTN","KMPDRDAT",57,0)
 ..S $P(KMPDDATA,U,KMPDP)=KMPDDELT
"RTN","KMPDRDAT",58,0)
 ..S $P(KMPDDATA,U,4)=KMPDDELT
"RTN","KMPDRDAT",59,0)
 .; client duz
"RTN","KMPDRDAT",60,0)
 .S $P(KMPDDATA,U,5)=$P(KMPDDAT1,U,3)
"RTN","KMPDRDAT",61,0)
 .; client name
"RTN","KMPDRDAT",62,0)
 .S $P(KMPDDATA,U,6)=$P(KMPDDAT1,U,4)
"RTN","KMPDRDAT",63,0)
 .; kmptmp subscript key
"RTN","KMPDRDAT",64,0)
 .S $P(KMPDDATA,U,7)=KMPDSUB
"RTN","KMPDRDAT",65,0)
 .; application title
"RTN","KMPDRDAT",66,0)
 .S $P(KMPDDATA,U,8)="CPRS Cover Sheet"
"RTN","KMPDRDAT",67,0)
 .; ip address 
"RTN","KMPDRDAT",68,0)
 .S $P(KMPDDATA,U,9)=$P($P(KMPDID,"-")," ",2)
"RTN","KMPDRDAT",69,0)
 .; patient DFN
"RTN","KMPDRDAT",70,0)
 .S $P(KMPDDATA,U,10)=$P(KMPDID,"-",3)
"RTN","KMPDRDAT",71,0)
 .; START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",72,0)
 .S ^KMPTMP("KMPD","RDAT",KMPDLN)="CVLOAD DATA="_KMPDDATA,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",73,0)
 .S $P(^KMPTMP("KMPDT",KMPDSUB,KMPDID),U,5)=1
"RTN","KMPDRDAT",74,0)
 Q
"RTN","KMPDRDAT",75,0)
 ;
"RTN","KMPDRDAT",76,0)
ORBOTH ;
"RTN","KMPDRDAT",77,0)
 ; loop foreground node and concurrently look at related background node
"RTN","KMPDRDAT",78,0)
 S KMPDBGSS="ORWCV",KMPDFGSS="ORWCV-FT"
"RTN","KMPDRDAT",79,0)
 S KMPDID=""
"RTN","KMPDRDAT",80,0)
 F  S KMPDID=$O(^KMPTMP("KMPDT",KMPDFGSS,KMPDID)) Q:KMPDID=""  D
"RTN","KMPDRDAT",81,0)
 .S KMPDFGD=$G(^KMPTMP("KMPDT",KMPDFGSS,KMPDID))
"RTN","KMPDRDAT",82,0)
 .Q:$P(KMPDFGD,U,5)=1  ;  ALREADY SENT
"RTN","KMPDRDAT",83,0)
 .S KMPDBGD=$G(^KMPTMP("KMPDT",KMPDBGSS,KMPDID))
"RTN","KMPDRDAT",84,0)
 .S KMPDDATA=""
"RTN","KMPDRDAT",85,0)
 .S $P(KMPDDATA,U,1)=$P(KMPDFGD,U)
"RTN","KMPDRDAT",86,0)
 .S (KMPDFDLT,KMPDBDLT,KMPDTDLT)=""
"RTN","KMPDRDAT",87,0)
 .I $P(KMPDFGD,U,2) S KMPDFDLT=$$HDIFF^XLFDT($P(KMPDFGD,U,2),$P(KMPDFGD,U),2)
"RTN","KMPDRDAT",88,0)
 .I $P(KMPDBGD,U,2) S KMPDBDLT=$$HDIFF^XLFDT($P(KMPDBGD,U,2),$P(KMPDBGD,U),2)
"RTN","KMPDRDAT",89,0)
 .S KMPDTDLT=KMPDFDLT+KMPDBDLT
"RTN","KMPDRDAT",90,0)
 .S $P(KMPDDATA,U,2)=KMPDFDLT
"RTN","KMPDRDAT",91,0)
 .S $P(KMPDDATA,U,3)=KMPDBDLT
"RTN","KMPDRDAT",92,0)
 .S $P(KMPDDATA,U,4)=KMPDTDLT
"RTN","KMPDRDAT",93,0)
 .; client duz
"RTN","KMPDRDAT",94,0)
 .S $P(KMPDDATA,U,5)=$P(KMPDFGD,U,3)
"RTN","KMPDRDAT",95,0)
 .; client name
"RTN","KMPDRDAT",96,0)
 .S $P(KMPDDATA,U,6)=$P(KMPDFGD,U,4)
"RTN","KMPDRDAT",97,0)
 .; kmptmp subscript key
"RTN","KMPDRDAT",98,0)
 .S $P(KMPDDATA,U,7)="ORWCV-FGBG"
"RTN","KMPDRDAT",99,0)
 .; application title
"RTN","KMPDRDAT",100,0)
 .S $P(KMPDDATA,U,8)="CPRS Cover Sheet"
"RTN","KMPDRDAT",101,0)
 .; ip address
"RTN","KMPDRDAT",102,0)
 .S $P(KMPDDATA,U,9)=$P($P(KMPDID,"-")," ",2)
"RTN","KMPDRDAT",103,0)
 .; patient DFN
"RTN","KMPDRDAT",104,0)
 .S $P(KMPDDATA,U,10)=$P(KMPDID,"-",3)
"RTN","KMPDRDAT",105,0)
 .;  START TIME^FG DELTA^BG DELTA^TOT DELTA^CLIENT DUZ^CLIENT NAME^KMPTMP SUBSCRIPT KEY^APPLICATION TITLE^IP^DFN
"RTN","KMPDRDAT",106,0)
 .S ^KMPTMP("KMPD","RDAT",KMPDLN)="CVLOAD DATA="_KMPDDATA,KMPDLN=KMPDLN+1
"RTN","KMPDRDAT",107,0)
 .S $P(^KMPTMP("KMPDT",KMPDFGSS,KMPDID),U,5)=1
"RTN","KMPDRDAT",108,0)
 .S $P(^KMPTMP("KMPDT",KMPDBGSS,KMPDID),U,5)=1
"RTN","KMPDRDAT",109,0)
 ; Loop BG node in case there is an entry that didn't have a FG entry.
"RTN","KMPDRDAT",110,0)
 ; The reverse situation already handled in first loop.
"RTN","KMPDRDAT",111,0)
 D ORONE("ORWCV")
"RTN","KMPDRDAT",112,0)
 Q
"RTN","KMPDRDAT",113,0)
 ;
"RTN","KMPDRDAT",114,0)
TRANSMIT ;
"RTN","KMPDRDAT",115,0)
 ; quit if no data to transmit.
"RTN","KMPDRDAT",116,0)
 Q:'$D(^KMPTMP("KMPD","RDAT"))
"RTN","KMPDRDAT",117,0)
 N XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPDRDAT",118,0)
 ; send data via mail message.
"RTN","KMPDRDAT",119,0)
 S XMTEXT="^KMPTMP(""KMPD"",""RDAT"","
"RTN","KMPDRDAT",120,0)
 S XMSUB="CVLOAD DAILY DATA"
"RTN","KMPDRDAT",121,0)
 S XMY("s.server@domain.ext")=""
"RTN","KMPDRDAT",122,0)
 D ^XMD
"RTN","KMPDRDAT",123,0)
 Q
"RTN","KMPDSSS")
0^14^B33242782
"RTN","KMPDSSS",1,0)
KMPDSSS ;OAK/RAK/JML - CP Status - SAGG ;5/1/07  15:07
"RTN","KMPDSSS",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 22, 2009;Build 42
"RTN","KMPDSSS",3,0)
 ;
"RTN","KMPDSSS",4,0)
 ;
"RTN","KMPDSSS",5,0)
FORMAT(KMPDLN) ;-format text for dislay
"RTN","KMPDSSS",6,0)
 ;-----------------------------------------------------------------------------
"RTN","KMPDSSS",7,0)
 ; KMPDLN.... return number of lines - called by reference
"RTN","KMPDSSS",8,0)
 ;-----------------------------------------------------------------------------
"RTN","KMPDSSS",9,0)
 ;
"RTN","KMPDSSS",10,0)
 Q:$G(KMPDNMSP)=""
"RTN","KMPDSSS",11,0)
 ;
"RTN","KMPDSSS",12,0)
 N LN,X S LN=0 K TMP
"RTN","KMPDSSS",13,0)
 ;
"RTN","KMPDSSS",14,0)
 ; if no kmpsutl routine
"RTN","KMPDSSS",15,0)
 S X="KMPSUTL" X ^%ZOSF("TEST") I '$T D  Q
"RTN","KMPDSSS",16,0)
 .S LN=LN+1
"RTN","KMPDSSS",17,0)
 .D SET^VALM10(LN,"The SAGG Package is not installed!")
"RTN","KMPDSSS",18,0)
 ;
"RTN","KMPDSSS",19,0)
 ; status
"RTN","KMPDSSS",20,0)
 D STATUS
"RTN","KMPDSSS",21,0)
 ;
"RTN","KMPDSSS",22,0)
 ; option data
"RTN","KMPDSSS",23,0)
 D OPT^KMPDSSD("KMPS SAGG REPORT")
"RTN","KMPDSSS",24,0)
 ;
"RTN","KMPDSSS",25,0)
 ; bacground data
"RTN","KMPDSSS",26,0)
 D BKGRND
"RTN","KMPDSSS",27,0)
 ;
"RTN","KMPDSSS",28,0)
 ; file data
"RTN","KMPDSSS",29,0)
 D FILES
"RTN","KMPDSSS",30,0)
 ;
"RTN","KMPDSSS",31,0)
 ; routine version check
"RTN","KMPDSSS",32,0)
 D ROUCHK^KMPDSSD1("S")
"RTN","KMPDSSS",33,0)
 ;
"RTN","KMPDSSS",34,0)
 ; node/cpu data
"RTN","KMPDSSS",35,0)
 D CPU^KMPDSSD1
"RTN","KMPDSSS",36,0)
 ;
"RTN","KMPDSSS",37,0)
 ; mail group member
"RTN","KMPDSSS",38,0)
 D MGRP^KMPDSSD1
"RTN","KMPDSSS",39,0)
 ;
"RTN","KMPDSSS",40,0)
 ; legend
"RTN","KMPDSSS",41,0)
 D LEGEND
"RTN","KMPDSSS",42,0)
 ;
"RTN","KMPDSSS",43,0)
 S KMPDLN=LN
"RTN","KMPDSSS",44,0)
 ;
"RTN","KMPDSSS",45,0)
 Q
"RTN","KMPDSSS",46,0)
 ;
"RTN","KMPDSSS",47,0)
BKGRND ;- background
"RTN","KMPDSSS",48,0)
 ;
"RTN","KMPDSSS",49,0)
 N CURSTAT,LOC,OPT,PLTFRM,PROD,SITENUM,STAT,TEXT,VOL,VOLDA
"RTN","KMPDSSS",50,0)
 ;
"RTN","KMPDSSS",51,0)
 S SITENUM=$P($$SITE^VASITE(),U,3) Q:'SITENUM
"RTN","KMPDSSS",52,0)
 S OPT="KMPS SAGG REPORT",STAT=$$TSKSTAT^KMPSUTL1(OPT),CURSTAT=$$CURSTAT^KMPDUTL1(STAT)
"RTN","KMPDSSS",53,0)
 ;
"RTN","KMPDSSS",54,0)
 S LN=LN+1
"RTN","KMPDSSS",55,0)
 D SET^VALM10(LN,"")
"RTN","KMPDSSS",56,0)
 S LN=LN+1
"RTN","KMPDSSS",57,0)
 D SET^VALM10(LN,"   Temporary collection global.")
"RTN","KMPDSSS",58,0)
 S LN=LN+1
"RTN","KMPDSSS",59,0)
 D SET^VALM10(LN,"   ^XTMP(""KMPS"")............... "_$S('$D(^XTMP("KMPS",SITENUM,0)):"NOT ",1:"")_"Present")
"RTN","KMPDSSS",60,0)
 ;
"RTN","KMPDSSS",61,0)
 S PLTFRM=$$MPLTF^KMPDUTL1,PROD=$P(^%ZOSF("PROD"),",")
"RTN","KMPDSSS",62,0)
 I PLTFRM="DSM" D
"RTN","KMPDSSS",63,0)
 .S LOC=$G(^KMPS(8970.1,1,0))
"RTN","KMPDSSS",64,0)
 .S TEXT="   Global Location............ "
"RTN","KMPDSSS",65,0)
 .S TEXT=TEXT_$S($P(LOC,U,3)="":PROD,1:$P(LOC,U,3))_","_$S($P(LOC,U,2)="":"UNKNOWN",1:$P(LOC,U,2))
"RTN","KMPDSSS",66,0)
 .S LN=LN+1
"RTN","KMPDSSS",67,0)
 .D SET^VALM10(LN,TEXT)
"RTN","KMPDSSS",68,0)
 ;
"RTN","KMPDSSS",69,0)
 S LN=LN+1
"RTN","KMPDSSS",70,0)
 D SET^VALM10(LN,"")
"RTN","KMPDSSS",71,0)
 S LN=LN+1
"RTN","KMPDSSS",72,0)
 ;  SAGG now collects on all volumes.  Legacy code in case needed in future
"RTN","KMPDSSS",73,0)
 D SET^VALM10(LN,"   SAGG Project will collect metrics on ALL volumes")
"RTN","KMPDSSS",74,0)
 S LN=LN+1
"RTN","KMPDSSS",75,0)
 D SET^VALM10(LN,"")
"RTN","KMPDSSS",76,0)
 S LN=LN+1
"RTN","KMPDSSS",77,0)
 ;D SET^VALM10(LN,"   SAGG Project collection routines will monitor the following:")
"RTN","KMPDSSS",78,0)
 ;S LN=LN+1
"RTN","KMPDSSS",79,0)
 ;D SET^VALM10(LN,"")
"RTN","KMPDSSS",80,0)
 ;S (TEXT,VOL)=""
"RTN","KMPDSSS",81,0)
 ;F  S VOL=$O(^KMPS(8970.1,1,1,"B",VOL)) Q:VOL=""  D
"RTN","KMPDSSS",82,0)
 ;.S VOLDA=$O(^KMPS(8970.1,1,1,"B",VOL,0))
"RTN","KMPDSSS",83,0)
 ;.S LOC=$P(^KMPS(8970.1,1,1,VOLDA,0),U,2)
"RTN","KMPDSSS",84,0)
 ;.S:LOC="" LOC=PROD
"RTN","KMPDSSS",85,0)
 ;.S TEXT=$J(" ",10)_VOL,LN=LN+1
"RTN","KMPDSSS",86,0)
 ;.D SET^VALM10(LN,TEXT)
"RTN","KMPDSSS",87,0)
 ;
"RTN","KMPDSSS",88,0)
 I '+CURSTAT&$D(^XTMP("KMPS","START")) D 
"RTN","KMPDSSS",89,0)
 .S LN=LN+1 D SET^VALM10(LN,"") S LN=LN+1 D SET^VALM10(LN,"")
"RTN","KMPDSSS",90,0)
 .S LN=LN+1
"RTN","KMPDSSS",91,0)
 .D SET^VALM10(LN,"   SAGG Project collection routines are still running on:")
"RTN","KMPDSSS",92,0)
 .S (TEXT,VOL)=""
"RTN","KMPDSSS",93,0)
 .F  S VOL=$O(^XTMP("KMPS","START",VOL)) Q:VOL=""  D
"RTN","KMPDSSS",94,0)
 ..S TEXT=$J(" ",10)_VOL,LN=LN+1
"RTN","KMPDSSS",95,0)
 ..D SET^VALM10(LN,TEXT)
"RTN","KMPDSSS",96,0)
 ;
"RTN","KMPDSSS",97,0)
 ; check for any reported errors
"RTN","KMPDSSS",98,0)
 I $D(^XTMP("KMPS","ERROR")) D 
"RTN","KMPDSSS",99,0)
 .S LN=LN+1 D SET^VALM10(LN,"") S LN=LN+1 D SET^VALM10(LN,"")
"RTN","KMPDSSS",100,0)
 .S LN=LN+1
"RTN","KMPDSSS",101,0)
 .D SET^VALM10(LN,"   SAGG Project collection routines have recorded an error on")
"RTN","KMPDSSS",102,0)
 .S LN=LN+1
"RTN","KMPDSSS",103,0)
 .D SET^VALM10(LN,"   the following Volume Set(s):")
"RTN","KMPDSSS",104,0)
 .S LN=LN+1 D SET^VALM10(LN,"")
"RTN","KMPDSSS",105,0)
 .S (TEXT,VOL)=""
"RTN","KMPDSSS",106,0)
 .F  S VOL=$O(^XTMP("KMPS","ERROR",VOL)) Q:VOL=""  D
"RTN","KMPDSSS",107,0)
 ..S TEXT=$J(" ",10)_VOL,LN=LN+1
"RTN","KMPDSSS",108,0)
 ..D SET^VALM10(LN,TEXT) S TEXT=""
"RTN","KMPDSSS",109,0)
 ;
"RTN","KMPDSSS",110,0)
 ; check to see if SAGG was told to stop or has reported errors
"RTN","KMPDSSS",111,0)
 I (+CURSTAT)>3 D 
"RTN","KMPDSSS",112,0)
 .I +CURSTAT=4 D
"RTN","KMPDSSS",113,0)
 ..S LN=LN+1
"RTN","KMPDSSS",114,0)
 ..D SET^VALM10(LN,"   SAGG has been running over a day. Use ^%S"_$S(PLTFRM="DSM":"Y",1:"S")_" and check to see if")
"RTN","KMPDSSS",115,0)
 ..S LN=LN+1
"RTN","KMPDSSS",116,0)
 ..D SET^VALM10(LN,"   the KMPSGE routine is still running.")
"RTN","KMPDSSS",117,0)
 .S LN=LN+1
"RTN","KMPDSSS",118,0)
 .D SET^VALM10(LN,"   NOTE:  Any incomplete data that has been collected will be")
"RTN","KMPDSSS",119,0)
 .S LN=LN+1
"RTN","KMPDSSS",120,0)
 .D SET^VALM10(LN,"   deleted automatically the next time that SAGG runs.")
"RTN","KMPDSSS",121,0)
 .I $D(^XTMP("KMPS","ERROR")) S LN=LN+1 D SET^VALM10(LN,"            First determine the cause of any volume set errors.")
"RTN","KMPDSSS",122,0)
 .S LN=LN+1
"RTN","KMPDSSS",123,0)
 .D SET^VALM10(LN,"            Reschedule SAGG to collect global data if necessary.")
"RTN","KMPDSSS",124,0)
 ;
"RTN","KMPDSSS",125,0)
 Q
"RTN","KMPDSSS",126,0)
 ;
"RTN","KMPDSSS",127,0)
FILES ;-- file data
"RTN","KMPDSSS",128,0)
 ;
"RTN","KMPDSSS",129,0)
 N TEXT,X
"RTN","KMPDSSS",130,0)
 ;
"RTN","KMPDSSS",131,0)
 S LN=LN+1
"RTN","KMPDSSS",132,0)
 D SET^VALM10(LN,"")
"RTN","KMPDSSS",133,0)
 S LN=LN+1
"RTN","KMPDSSS",134,0)
 D SET^VALM10(LN,$J(" ",35)_" # of") ;     Oldest     Recent")
"RTN","KMPDSSS",135,0)
 S LN=LN+1
"RTN","KMPDSSS",136,0)
 D SET^VALM10(LN,"   File"_$J(" ",28)_"Entries") ;    Date       Date")
"RTN","KMPDSSS",137,0)
 S LN=LN+1
"RTN","KMPDSSS",138,0)
 D SET^VALM10(LN,"   -------------------------       -------") ;   -------   -------")
"RTN","KMPDSSS",139,0)
 ; file name
"RTN","KMPDSSS",140,0)
 S TEXT="   8970.1-SAGG PROJECT"
"RTN","KMPDSSS",141,0)
 ; number of entries
"RTN","KMPDSSS",142,0)
 S TEXT=TEXT_$J(" ",35-$L(TEXT))_$J($FN($P($G(^KMPS(8970.1,0)),U,4),",",0),7)
"RTN","KMPDSSS",143,0)
 S LN=LN+1
"RTN","KMPDSSS",144,0)
 D SET^VALM10(LN,TEXT)
"RTN","KMPDSSS",145,0)
 ;
"RTN","KMPDSSS",146,0)
 Q
"RTN","KMPDSSS",147,0)
 ;
"RTN","KMPDSSS",148,0)
LEGEND ;-- display full package name
"RTN","KMPDSSS",149,0)
 ;
"RTN","KMPDSSS",150,0)
 S LN=LN+1 D SET^VALM10(LN,"")
"RTN","KMPDSSS",151,0)
 S LN=LN+1 D SET^VALM10(LN,"")
"RTN","KMPDSSS",152,0)
 S LN=LN+1
"RTN","KMPDSSS",153,0)
 D SET^VALM10(LN,"   SAGG = Statistical Analysis of Global Growth")
"RTN","KMPDSSS",154,0)
 ;
"RTN","KMPDSSS",155,0)
 Q
"RTN","KMPDSSS",156,0)
 ;
"RTN","KMPDSSS",157,0)
STATUS ;-- current status
"RTN","KMPDSSS",158,0)
 ;
"RTN","KMPDSSS",159,0)
 N CURSTAT,DOW,OPT,SESSNUM,SITNUM,STAT,STRTDT
"RTN","KMPDSSS",160,0)
 ;
"RTN","KMPDSSS",161,0)
 S SITNUM=$P($$SITE^VASITE(),U,3) Q:'SITNUM
"RTN","KMPDSSS",162,0)
 S OPT="KMPS SAGG REPORT",STAT=$$TSKSTAT^KMPSUTL1(OPT),CURSTAT=$$CURSTAT^KMPDUTL1(STAT)
"RTN","KMPDSSS",163,0)
 S LN=LN+1
"RTN","KMPDSSS",164,0)
 D SET^VALM10(LN,"   Current Status.............. "_$P(CURSTAT,U,2))
"RTN","KMPDSSS",165,0)
 I $D(^XTMP("KMPS",SITNUM,0)) D
"RTN","KMPDSSS",166,0)
 .S SESSNUM=^XTMP("KMPS",SITNUM,0),STRTDT=$P(SESSNUM,U,4),SESSNUM=+SESSNUM
"RTN","KMPDSSS",167,0)
 .S LN=LN+1
"RTN","KMPDSSS",168,0)
 .D SET^VALM10(LN,"   Session Number.............. "_SESSNUM)
"RTN","KMPDSSS",169,0)
 .S DOW=$$DOW^XLFDT(STRTDT)
"RTN","KMPDSSS",170,0)
 .S LN=LN+1
"RTN","KMPDSSS",171,0)
 .D SET^VALM10(LN,"   Start Date.................. "_$$FMTE^XLFDT(STRTDT,"P")_" ("_DOW_")")
"RTN","KMPDSSS",172,0)
 ;
"RTN","KMPDSSS",173,0)
 S LN=LN+1
"RTN","KMPDSSS",174,0)
 D SET^VALM10(LN,"")
"RTN","KMPDSSS",175,0)
 ;
"RTN","KMPDSSS",176,0)
 Q
"RTN","KMPDTM")
0^2^B27757282
"RTN","KMPDTM",1,0)
KMPDTM ;OAK/RAK/JML - CM Tools Timing Monitor ;9/1/2015
"RTN","KMPDTM",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTM",3,0)
 ;
"RTN","KMPDTM",4,0)
EN ;-- entry point
"RTN","KMPDTM",5,0)
 ;
"RTN","KMPDTM",6,0)
 N DIR,X,Y,KMPDLTYP
"RTN","KMPDTM",7,0)
 ;
"RTN","KMPDTM",8,0)
 D HDR^KMPDUTL4(" Timing Data Monitor ")
"RTN","KMPDTM",9,0)
 ;
"RTN","KMPDTM",10,0)
 ; if no data
"RTN","KMPDTM",11,0)
 S KMPDLTYP=0
"RTN","KMPDTM",12,0)
 I $D(^KMPTMP("KMPDT","ORWCV")) S KMPDLTYP=KMPDLTYP+1
"RTN","KMPDTM",13,0)
 I $D(^KMPTMP("KMPDT","ORWCV-FT")) S KMPDLTYP=KMPDLTYP+2
"RTN","KMPDTM",14,0)
 I KMPDLTYP=0 D  Q
"RTN","KMPDTM",15,0)
 .W !!?7,"*** There is currently no data in global ^KMPTMP(""KMPDT"") ***"
"RTN","KMPDTM",16,0)
 ;
"RTN","KMPDTM",17,0)
 W !
"RTN","KMPDTM",18,0)
 W !?7,"This option displays CPRS Coversheet time-to-load data, as a"
"RTN","KMPDTM",19,0)
 W !?7,"bar graph, for the current day.  This option can be left"
"RTN","KMPDTM",20,0)
 W !?7,"running on a terminal (if desired).  The monitor is updated"
"RTN","KMPDTM",21,0)
 W !?7,"every 10 minutes (site configurable through the [KMPD PARAM"
"RTN","KMPDTM",22,0)
 W !?7,"EDIT] Edit CP Parameters File option), and displays current"
"RTN","KMPDTM",23,0)
 W !?7,"average time-to-load data starting at midnight.  An alarm"
"RTN","KMPDTM",24,0)
 W !?7,"message is displayed if the average time-to-load exceeds 30"
"RTN","KMPDTM",25,0)
 W !?7,"seconds (site configurable through the [KMPD PARAM EDIT] Edit"
"RTN","KMPDTM",26,0)
 W !?7,"CP Parameters File option)."
"RTN","KMPDTM",27,0)
 W !
"RTN","KMPDTM",28,0)
 S DIR(0)="YO",DIR("A")="Continue",DIR("B")="YES"
"RTN","KMPDTM",29,0)
 W ! D ^DIR Q:Y'=1
"RTN","KMPDTM",30,0)
 ;
"RTN","KMPDTM",31,0)
 ;
"RTN","KMPDTM",32,0)
 W !!,"Compiling timing stats..."
"RTN","KMPDTM",33,0)
 D EN1
"RTN","KMPDTM",34,0)
 ;
"RTN","KMPDTM",35,0)
 Q
"RTN","KMPDTM",36,0)
 ;
"RTN","KMPDTM",37,0)
EN1 ;-- main loop
"RTN","KMPDTM",38,0)
 ;
"RTN","KMPDTM",39,0)
 N KMPUALRT,KMPUTIME,KMPUTMP,OUT
"RTN","KMPDTM",40,0)
 ;
"RTN","KMPDTM",41,0)
 S KMPUALRT=0,KMPUTIME=$$NOW^XLFDT
"RTN","KMPDTM",42,0)
 S OUT=0
"RTN","KMPDTM",43,0)
 F  D  Q:OUT
"RTN","KMPDTM",44,0)
 .D DATA
"RTN","KMPDTM",45,0)
 .D GRAPH
"RTN","KMPDTM",46,0)
 .S OUT=$$FTR Q:OUT
"RTN","KMPDTM",47,0)
 .D EXIT
"RTN","KMPDTM",48,0)
 Q
"RTN","KMPDTM",49,0)
 ;
"RTN","KMPDTM",50,0)
DATA ;-- compile data
"RTN","KMPDTM",51,0)
 ;
"RTN","KMPDTM",52,0)
 N DATA,DATA1,DATE,DELTA,DOT,HOURS,HR,I
"RTN","KMPDTM",53,0)
 N KMPDI,KMPDSUB,TDELT
"RTN","KMPDTM",54,0)
 ;
"RTN","KMPDTM",55,0)
 K KMPUTMP
"RTN","KMPDTM",56,0)
 S DOT=1,DATE=$$DT^XLFDT
"RTN","KMPDTM",57,0)
 ; array with hours
"RTN","KMPDTM",58,0)
 S HOURS=$$RLTMHR^KMPDTU11(1,0) Q:HOURS=""
"RTN","KMPDTM",59,0)
 F HR=1:1 Q:$P(HOURS,",",HR)=""  S KMPUTMP(HR,0)=""
"RTN","KMPDTM",60,0)
 ;
"RTN","KMPDTM",61,0)
 ; collate BG and FG data
"RTN","KMPDTM",62,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D
"RTN","KMPDTM",63,0)
 .S KMPDI=""
"RTN","KMPDTM",64,0)
 .F  S KMPDI=$O(^KMPTMP("KMPDT",KMPDSUB,KMPDI)) Q:KMPDI=""  S DATA=^(KMPDI) I DATA]"" D
"RTN","KMPDTM",65,0)
 ..Q:$P($$HTFM^XLFDT($P(DATA,U)),".")'=DATE
"RTN","KMPDTM",66,0)
 ..S DOT=DOT+1 W:('(DOT#1000)) "."
"RTN","KMPDTM",67,0)
 ..S ^TMP($J,"DATA",KMPDI,KMPDSUB)=DATA
"RTN","KMPDTM",68,0)
 ; Add BG and FG data
"RTN","KMPDTM",69,0)
 S I=""
"RTN","KMPDTM",70,0)
 F  S I=$O(^TMP($J,"DATA",I)) Q:I=""  D
"RTN","KMPDTM",71,0)
 .S DELTA=0
"RTN","KMPDTM",72,0)
 .S KMPDSUB=""
"RTN","KMPDTM",73,0)
 .F  S KMPDSUB=$O(^TMP($J,"DATA",I,KMPDSUB)) Q:KMPDSUB=""  D
"RTN","KMPDTM",74,0)
 ..S DATA=$G(^TMP($J,"DATA",I,KMPDSUB)) Q:DATA=""
"RTN","KMPDTM",75,0)
 ..S DATE(1)=$$HTFM^XLFDT($P(DATA,U)),DATE(2)=$$HTFM^XLFDT($P(DATA,U,2))
"RTN","KMPDTM",76,0)
 ..Q:'DATE(1)!('DATE(2))
"RTN","KMPDTM",77,0)
 ..S TDELT=$$FMDIFF^XLFDT(DATE(2),DATE(1),2)
"RTN","KMPDTM",78,0)
 ..S:TDELT<0 TDELT=0
"RTN","KMPDTM",79,0)
 ..S DELTA=DELTA+TDELT
"RTN","KMPDTM",80,0)
 .; determine hour
"RTN","KMPDTM",81,0)
 .S HR=+$E($P(DATE(1),".",2),1,2) Q:HR=""  ;HR="0"
"RTN","KMPDTM",82,0)
 .S DATA1="^^^"_DELTA_"^"_$P(DATA,U,3)_"^"_$P(DATA,U,4)_"^^^"_$P($P(I," ",2),"-")
"RTN","KMPDTM",83,0)
 .;
"RTN","KMPDTM",84,0)
 .; quit if no delta
"RTN","KMPDTM",85,0)
 .Q:$P(DATA1,U,4)=""
"RTN","KMPDTM",86,0)
 .; hour
"RTN","KMPDTM",87,0)
 .S $P(KMPUTMP(HR,0),U)=HR
"RTN","KMPDTM",88,0)
 .; total delta
"RTN","KMPDTM",89,0)
 .S $P(KMPUTMP(HR,0),U,2)=$P(KMPUTMP(HR,0),U,2)+$P(DATA1,U,4)
"RTN","KMPDTM",90,0)
 .; count
"RTN","KMPDTM",91,0)
 .S $P(KMPUTMP(HR,0),U,3)=$P(KMPUTMP(HR,0),U,3)+1
"RTN","KMPDTM",92,0)
 ;
"RTN","KMPDTM",93,0)
 ; average
"RTN","KMPDTM",94,0)
 F HR=1:1 S I=$P(HOURS,",",HR) Q:I=""  I $P($G(KMPUTMP(I,0)),U,2) D 
"RTN","KMPDTM",95,0)
 .S $P(KMPUTMP(I,0),U,2)=$FN($P(KMPUTMP(I,0),U,2)/$P(KMPUTMP(I,0),U,3),"",1)
"RTN","KMPDTM",96,0)
 ;
"RTN","KMPDTM",97,0)
 Q
"RTN","KMPDTM",98,0)
 ;
"RTN","KMPDTM",99,0)
FTR() ;-- extrinsic function - footer
"RTN","KMPDTM",100,0)
 N OUT,PROMPT,UTIME,X
"RTN","KMPDTM",101,0)
 ; update time - how often graph will refress itself
"RTN","KMPDTM",102,0)
 S UTIME=$P($G(^KMPD(8973,1,19)),U)
"RTN","KMPDTM",103,0)
 ; value is in minutes and is converted to seconds for timed read
"RTN","KMPDTM",104,0)
 S UTIME=$S(UTIME:UTIME,1:10)*60
"RTN","KMPDTM",105,0)
 S PROMPT="[Q]uit, [U]pdate: "
"RTN","KMPDTM",106,0)
 S OUT=0
"RTN","KMPDTM",107,0)
 F  D  Q:OUT
"RTN","KMPDTM",108,0)
 .S DX=(IOM-$L(PROMPT)\2),DY=(IOSL-1) X IOXY
"RTN","KMPDTM",109,0)
 .W PROMPT R X:UTIME
"RTN","KMPDTM",110,0)
 .S X=$$UP^XLFSTR(X)
"RTN","KMPDTM",111,0)
 .I X="Q"!(X="^")!(X="U")!('$T) S OUT=1
"RTN","KMPDTM",112,0)
 .E  W $C(7) S DY=(IOSL-1) F DX=1:1:IOM W " " X IOXY
"RTN","KMPDTM",113,0)
 W $S(X="Q":"uit",X="^":"Quit",X="U":"pdate",1:"Update")
"RTN","KMPDTM",114,0)
 Q $S(X="Q"!(X="^"):1,1:0)
"RTN","KMPDTM",115,0)
 ;
"RTN","KMPDTM",116,0)
GRAPH ;-- display graph
"RTN","KMPDTM",117,0)
 Q:'$D(KMPUTMP)
"RTN","KMPDTM",118,0)
 N ALERT,DATA,LOADTM,NOW,TITLE,TXT,UPDATE,KMPDMESS
"RTN","KMPDTM",119,0)
 ; alert time in seconds - if average time-to-load is not less than this
"RTN","KMPDTM",120,0)
 ;                         value an alert will appear on screen
"RTN","KMPDTM",121,0)
 S NOW=$$NOW^XLFDT
"RTN","KMPDTM",122,0)
 S KMPDMESS=$S(KMPDLTYP=1:"Foreground",KMPDLTYP=2:"Background",KMPDLTYP=3:"Foreground and Background",1:"")
"RTN","KMPDTM",123,0)
 S DATA=$G(^KMPD(8973,1,19))
"RTN","KMPDTM",124,0)
 ; if no ALERT set default to 30 seconds
"RTN","KMPDTM",125,0)
 S ALERT=$S($P(DATA,U,2):$P(DATA,U,2),1:30)
"RTN","KMPDTM",126,0)
 ; if not UPDATE default to 10 minutes
"RTN","KMPDTM",127,0)
 S UPDATE=$S($P(DATA,U):$P(DATA,U),1:10)
"RTN","KMPDTM",128,0)
 ; current hour
"RTN","KMPDTM",129,0)
 S HR=+$E($P(NOW,".",2),1,2)
"RTN","KMPDTM",130,0)
 ; current time-to-load value
"RTN","KMPDTM",131,0)
 S LOADTM=0
"RTN","KMPDTM",132,0)
 S:HR&($D(KMPUTMP(HR))) LOADTM=$P(KMPUTMP(HR,0),U,2)
"RTN","KMPDTM",133,0)
 ; determine if is now an alert condition
"RTN","KMPDTM",134,0)
 S KMPUALRT=$S(LOADTM>ALERT:1,1:0)
"RTN","KMPDTM",135,0)
 ;
"RTN","KMPDTM",136,0)
 ; if load time is greater than alert time
"RTN","KMPDTM",137,0)
 I KMPUALRT S TXT(1,0)=$C(7)_"ALERT!!! - Current Average Time-To-Load exceeds '"_ALERT_" seconds'"
"RTN","KMPDTM",138,0)
 ; else
"RTN","KMPDTM",139,0)
 E  S TXT(1,0)=""
"RTN","KMPDTM",140,0)
 ;
"RTN","KMPDTM",141,0)
 ;S TXT(2,0)=""
"RTN","KMPDTM",142,0)
 S TXT(2,0)="Coversheet loads executed in the "_KMPDMESS
"RTN","KMPDTM",143,0)
 S TXT(3,0)="Last Updated: "_$P($$FMTE^XLFDT(NOW),"@",2)_"  > "
"RTN","KMPDTM",144,0)
 S TXT(3,0)=TXT(3,0)_"Monitor will be updated every "_UPDATE_" min."
"RTN","KMPDTM",145,0)
 I $G(KMPUTIME) D 
"RTN","KMPDTM",146,0)
 .S TXT(4,0)="Running Time: "_$$FMDIFF^XLFDT(NOW,KMPUTIME,3)_"  > "
"RTN","KMPDTM",147,0)
 .S TXT(4,0)=TXT(4,0)_"ALERT will display if Load Time exceeds "_ALERT_" sec."
"RTN","KMPDTM",148,0)
 S TITLE="Timing Data Monitor^CPRS Coversheet^Load Time (Sec)^Hour"
"RTN","KMPDTM",149,0)
 ;
"RTN","KMPDTM",150,0)
 D EN^KMPDUG("KMPUTMP",TITLE,"DV","","TXT",1,40)
"RTN","KMPDTM",151,0)
 ;
"RTN","KMPDTM",152,0)
 Q
"RTN","KMPDTM",153,0)
 ;
"RTN","KMPDTM",154,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTM",155,0)
 D ^%ZISC
"RTN","KMPDTM",156,0)
 Q
"RTN","KMPDTP1")
0^3^B37151192
"RTN","KMPDTP1",1,0)
KMPDTP1 ;OAK/RAK/JML - CP Timing Time to Load Summary ;9/1/2015
"RTN","KMPDTP1",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP1",3,0)
 ;
"RTN","KMPDTP1",4,0)
EN ;-- entry point
"RTN","KMPDTP1",5,0)
 N KMPDATE,KMPDFGBG,KMPDPTNP,KMPDSTAR,KMPDSTTL,KMPDSUB,KMPDTTL,POP,X,Y,ZTDESC,ZTRTN,ZTRSAVE,%ZIS
"RTN","KMPDTP1",6,0)
 N KMPDLFG,KMPDLBG,KMPDDTSS
"RTN","KMPDTP1",7,0)
 S KMPDTTL=" Average Coversheet Time-to-Load (TTL) Report "
"RTN","KMPDTP1",8,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP1",9,0)
 W !
"RTN","KMPDTP1",10,0)
 W !?7,"This report displays the daily average time-to-load value for"
"RTN","KMPDTP1",11,0)
 W !?7,"the coversheet at this site.  Average time-to-load values are"
"RTN","KMPDTP1",12,0)
 W !?7,"given for either daily prime time or non-prime time periods."
"RTN","KMPDTP1",13,0)
 W !?7,"Foreground, background and combined values are reported."
"RTN","KMPDTP1",14,0)
 W !
"RTN","KMPDTP1",15,0)
 ;
"RTN","KMPDTP1",16,0)
 I '$O(^KMPD(8973.2,0)) D  Q
"RTN","KMPDTP1",17,0)
 .W !!?7,"*** There is currently no data in file #8973.2 (CP TIMING) ***"
"RTN","KMPDTP1",18,0)
 ;
"RTN","KMPDTP1",19,0)
 ; select date range - first determine which subscript to use in API due to addition of foreground processing
"RTN","KMPDTP1",20,0)
 S KMPDLFG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV-FT","A"),-1)
"RTN","KMPDTP1",21,0)
 S KMPDLBG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV","A"),-1)
"RTN","KMPDTP1",22,0)
 S KMPDDTSS=$S(KMPDLFG=KMPDLBG:"ORWCV-FT",KMPDLFG>KMPDLBG:"ORWCV-FT",KMPDLFG<KMPDLBG:"ORWCV",1:"UNKNOWN")
"RTN","KMPDTP1",23,0)
 D DATERNG^KMPDTU10(KMPDDTSS,7,.KMPDATE)
"RTN","KMPDTP1",24,0)
 Q:$G(KMPDATE(0))=""
"RTN","KMPDTP1",25,0)
 S KMPDPTNP=$$PTNPSEL^KMPDUTL4
"RTN","KMPDTP1",26,0)
 Q:'KMPDPTNP
"RTN","KMPDTP1",27,0)
 ; select output device.
"RTN","KMPDTP1",28,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP1",29,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP1",30,0)
 ; if queued.
"RTN","KMPDTP1",31,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP1",32,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP1",33,0)
 .S ZTRTN="EN1^KMPDTP1"
"RTN","KMPDTP1",34,0)
 .S ZTSAVE("KMPDATE(")="",ZTSAVE("KMPDPTNP")="",ZTSAVE("KMPDTTL")=""
"RTN","KMPDTP1",35,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP1",36,0)
 .D EXIT
"RTN","KMPDTP1",37,0)
 ;
"RTN","KMPDTP1",38,0)
 ; if output to terminal display message.
"RTN","KMPDTP1",39,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP1",40,0)
 D EN1
"RTN","KMPDTP1",41,0)
 ;
"RTN","KMPDTP1",42,0)
 Q
"RTN","KMPDTP1",43,0)
 ;
"RTN","KMPDTP1",44,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP1",45,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP1",46,0)
 Q:'$G(KMPDPTNP)
"RTN","KMPDTP1",47,0)
 K ^TMP($J)
"RTN","KMPDTP1",48,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D DATA(.KMPDATE,KMPDPTNP,KMPDSUB)
"RTN","KMPDTP1",49,0)
 D PRINT,EXIT
"RTN","KMPDTP1",50,0)
 K ^TMP($J)
"RTN","KMPDTP1",51,0)
 Q
"RTN","KMPDTP1",52,0)
 ;
"RTN","KMPDTP1",53,0)
DATA(KMPDATE,KMPDPTNP,KMPDSUB) ;-- compile data
"RTN","KMPDTP1",54,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP1",55,0)
 Q:'$G(KMPDPTNP)
"RTN","KMPDTP1",56,0)
 N DATA,DATE,DOT,END,IEN,PTNP,QUEUED
"RTN","KMPDTP1",57,0)
 S PTNP=(+KMPDPTNP)
"RTN","KMPDTP1",58,0)
 S DOT=1,QUEUED=$D(ZTQUEUED)
"RTN","KMPDTP1",59,0)
 S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)
"RTN","KMPDTP1",60,0)
 Q:'DATE!('END)!('PTNP)
"RTN","KMPDTP1",61,0)
 F  S DATE=$O(^KMPD(8973.2,"ASSDTPT",KMPDSUB,DATE)) Q:'DATE!(DATE>END)  D 
"RTN","KMPDTP1",62,0)
 .S IEN=0,^TMP($J,KMPDSUB,DATE)=""
"RTN","KMPDTP1",63,0)
 .F  S IEN=$O(^KMPD(8973.2,"ASSDTPT",KMPDSUB,DATE,PTNP,IEN)) Q:'IEN  D 
"RTN","KMPDTP1",64,0)
 ..Q:'$D(^KMPD(8973.2,IEN,0))  S DATA=^(0) Q:DATA=""
"RTN","KMPDTP1",65,0)
 ..I 'QUEUED S DOT=DOT+1 W:'(DOT#1000) "."
"RTN","KMPDTP1",66,0)
 ..; if delta
"RTN","KMPDTP1",67,0)
 ..I $P(DATA,U,4)'="" D 
"RTN","KMPDTP1",68,0)
 ...; minimum delta
"RTN","KMPDTP1",69,0)
 ...I $P(^TMP($J,KMPDSUB,DATE),U,2)=""!($P(DATA,U,4)<$P(^TMP($J,KMPDSUB,DATE),U,2)) D 
"RTN","KMPDTP1",70,0)
 ....S $P(^TMP($J,KMPDSUB,DATE),U,2)=$P(DATA,U,4)
"RTN","KMPDTP1",71,0)
 ...; maximum delta
"RTN","KMPDTP1",72,0)
 ...I $P(DATA,U,4)>$P(^TMP($J,KMPDSUB,DATE),U,3) S $P(^TMP($J,KMPDSUB,DATE),U,3)=$P(DATA,U,4)
"RTN","KMPDTP1",73,0)
 ...; total delta
"RTN","KMPDTP1",74,0)
 ...S $P(^TMP($J,KMPDSUB,DATE),U,4)=$P(^TMP($J,KMPDSUB,DATE),U,4)+$P(DATA,U,4)
"RTN","KMPDTP1",75,0)
 ...; count
"RTN","KMPDTP1",76,0)
 ...S $P(^TMP($J,KMPDSUB,DATE),U,5)=$P(^TMP($J,KMPDSUB,DATE),U,5)+1
"RTN","KMPDTP1",77,0)
 ..; if no delta
"RTN","KMPDTP1",78,0)
 ..E  S $P(^TMP($J,KMPDSUB,DATE),U,6)=$P(^TMP($J,KMPDSUB,DATE),U,6)+1
"RTN","KMPDTP1",79,0)
 ..;
"RTN","KMPDTP1",80,0)
 .; back to DATE level
"RTN","KMPDTP1",81,0)
 .; average
"RTN","KMPDTP1",82,0)
 .S:$P(^TMP($J,KMPDSUB,DATE),U,5) $P(^TMP($J,KMPDSUB,DATE),U)=$P(^TMP($J,KMPDSUB,DATE),U,4)/$P(^TMP($J,KMPDSUB,DATE),U,5)
"RTN","KMPDTP1",83,0)
 ;
"RTN","KMPDTP1",84,0)
 ;
"RTN","KMPDTP1",85,0)
 Q
"RTN","KMPDTP1",86,0)
 ;
"RTN","KMPDTP1",87,0)
PRINT ;-- print data
"RTN","KMPDTP1",88,0)
 U IO
"RTN","KMPDTP1",89,0)
 S KMPDFGBG=0
"RTN","KMPDTP1",90,0)
 I $D(^TMP($J,"ORWCV")) S KMPDFGBG=1
"RTN","KMPDTP1",91,0)
 I $D(^TMP($J,"ORWCV-FT")) S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDTP1",92,0)
 I KMPDFGBG=1 D PRINTONE("ORWCV","Background")
"RTN","KMPDTP1",93,0)
 I KMPDFGBG=2 D PRINTONE("ORWCV-FT","Foreground")
"RTN","KMPDTP1",94,0)
 I KMPDFGBG=3 D PRNTBOTH
"RTN","KMPDTP1",95,0)
 Q
"RTN","KMPDTP1",96,0)
 ;
"RTN","KMPDTP1",97,0)
PRINTONE(KMPDSUB,KMPDSTTL) ;
"RTN","KMPDTP1",98,0)
 D HDR(KMPDSTTL)
"RTN","KMPDTP1",99,0)
 Q:'$D(^TMP($J,KMPDSUB))
"RTN","KMPDTP1",100,0)
 N DATE,TOTAL S (DATE,TOTAL)=""
"RTN","KMPDTP1",101,0)
 S (DATE,TOTAL,KMPDSTAR)=""
"RTN","KMPDTP1",102,0)
 F  S DATE=$O(^TMP($J,KMPDSUB,DATE)) Q:'DATE  S DATA=^TMP($J,KMPDSUB,DATE) D 
"RTN","KMPDTP1",103,0)
 .W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP1",104,0)
 .W ?12,$J($FN($P(DATA,U),",",0),10)
"RTN","KMPDTP1",105,0)
 .W ?26,$J($FN($P(DATA,U,2),",",0),10)
"RTN","KMPDTP1",106,0)
 .W ?40,$J($FN($P(DATA,U,3),",",0),10)
"RTN","KMPDTP1",107,0)
 .W ?54,$J($FN($P(DATA,U,5),",",0),10)
"RTN","KMPDTP1",108,0)
 .I $P(DATA,U,5)["*" W "*" S KMPDSTAR=1
"RTN","KMPDTP1",109,0)
 .; total incompletes
"RTN","KMPDTP1",110,0)
 .S TOTAL=TOTAL+$P(DATA,U,6)
"RTN","KMPDTP1",111,0)
 ;
"RTN","KMPDTP1",112,0)
 W !!?12,"Incomplete: ",$J($FN(TOTAL,",",0),$L(TOTAL)+2)
"RTN","KMPDTP1",113,0)
 ; legend
"RTN","KMPDTP1",114,0)
 W !!?2,"CV  = Coversheet" I KMPDSTAR=1 W ?35,"* = BG/FG Load Counts not equal."
"RTN","KMPDTP1",115,0)
 W !?2,"TTL = Time-to-Load" I KMPDSTAR=1 W ?35,"Listing FOREGROUND Load Count"
"RTN","KMPDTP1",116,0)
 ; pause if output to terminal
"RTN","KMPDTP1",117,0)
 D CONTINUE^KMPDUTL4("Press RETURN to continue",4)
"RTN","KMPDTP1",118,0)
 Q
"RTN","KMPDTP1",119,0)
 ;
"RTN","KMPDTP1",120,0)
PRNTBOTH ;
"RTN","KMPDTP1",121,0)
 ; AVG ^ MIN ^ MAX ^ TOTAL DELTA ^ COUNT
"RTN","KMPDTP1",122,0)
 N DATE,TOTDATA,BGDATA,FGDATA,BGMIN,BGMAX,FGMIN,FGMAX,BGTOT,FGTOT
"RTN","KMPDTP1",123,0)
 S DATE=""
"RTN","KMPDTP1",124,0)
 F  S DATE=$O(^TMP($J,"ORWCV-FT",DATE)) Q:'DATE  D
"RTN","KMPDTP1",125,0)
 .S TOTDATA=""
"RTN","KMPDTP1",126,0)
 .S FGDATA=$G(^TMP($J,"ORWCV-FT",DATE))
"RTN","KMPDTP1",127,0)
 .S BGDATA=$G(^TMP($J,"ORWCV",DATE))
"RTN","KMPDTP1",128,0)
 .S $P(TOTDATA,U,1)=$P(BGDATA,U)+$P(FGDATA,U)
"RTN","KMPDTP1",129,0)
 .S BGMIN=$P(BGDATA,U,2),FGMIN=$P(FGDATA,U,2)
"RTN","KMPDTP1",130,0)
 .S $P(TOTDATA,U,2)=$S(FGMIN<BGMIN:FGMIN,1:BGMIN)
"RTN","KMPDTP1",131,0)
 .S BGMAX=$P(BGDATA,U,3),FGMAX=$P(FGDATA,U,3)
"RTN","KMPDTP1",132,0)
 .S $P(TOTDATA,U,3)=$S(BGMAX>FGMAX:BGMAX,1:FGMAX)
"RTN","KMPDTP1",133,0)
 .S $P(TOTDATA,U,4)=$P(BGDATA,U,4)+$P(FGDATA,U,4)
"RTN","KMPDTP1",134,0)
 .S BGTOT=$P(BGDATA,U,5),FGTOT=$P(FGDATA,U,5)
"RTN","KMPDTP1",135,0)
 .S $P(TOTDATA,U,5)=$S(FGTOT=BGTOT:FGTOT,1:FGTOT_"*")
"RTN","KMPDTP1",136,0)
 .S $P(TOTDATA,U,6)=$P(BGDATA,U,6)+$P(FGDATA,U,6)
"RTN","KMPDTP1",137,0)
 .S ^TMP($J,"ORWCV-BOTH",DATE)=TOTDATA
"RTN","KMPDTP1",138,0)
 D PRINTONE("ORWCV","BACKGROUND")
"RTN","KMPDTP1",139,0)
 D PRINTONE("ORWCV-FT","FOREGROUND")
"RTN","KMPDTP1",140,0)
 D PRINTONE("ORWCV-BOTH","Combined FOREGROUND and BACKGROUND")
"RTN","KMPDTP1",141,0)
 ;
"RTN","KMPDTP1",142,0)
HDR(KMPDSTTL) ;-- print header
"RTN","KMPDTP1",143,0)
 W @IOF
"RTN","KMPDTP1",144,0)
 N HDR,I
"RTN","KMPDTP1",145,0)
 D HDR1(.HDR,KMPDSTTL)
"RTN","KMPDTP1",146,0)
 F I=0:0 S I=$O(HDR(I)) Q:'I  W !,HDR(I)
"RTN","KMPDTP1",147,0)
 Q
"RTN","KMPDTP1",148,0)
 ;
"RTN","KMPDTP1",149,0)
HDR1(KMPDHDR,KMPDSTTL) ;- set up header array
"RTN","KMPDTP1",150,0)
 K KMPDHDR
"RTN","KMPDTP1",151,0)
 N X
"RTN","KMPDTP1",152,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP1",153,0)
 S KMPDHDR(1)=$J(" ",(80-$L(X)\2))_X
"RTN","KMPDTP1",154,0)
 S X=$P($G(KMPDPTNP),U,2)_" - "_KMPDSTTL
"RTN","KMPDTP1",155,0)
 S KMPDHDR(2)=$J(" ",(80-$L(X)\2))_X
"RTN","KMPDTP1",156,0)
 S X=$G(KMPDATE(0)),X=$P(X,U,3)_" - "_$P(X,U,4)
"RTN","KMPDTP1",157,0)
 S KMPDHDR(3)=$J(" ",(80-$L(X)\2))_X
"RTN","KMPDTP1",158,0)
 S KMPDHDR(3)=KMPDHDR(3)_$J(" ",61-$L(KMPDHDR(3)))_"Printed: "_$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP1",159,0)
 S KMPDHDR(4)=""
"RTN","KMPDTP1",160,0)
 S KMPDHDR(6)=$J("",12)_"|---------------Seconds---------------|"
"RTN","KMPDTP1",161,0)
 S KMPDHDR(7)="Date"_$J(" ",8)_"Average TTL"_$J(" ",3)_"Minimum TTL"_$J(" ",3)_"Maximum TTL"_$J(" ",3)_"# of CV Loads"
"RTN","KMPDTP1",162,0)
 S KMPDHDR(8)=$$REPEAT^XLFSTR("-",80)
"RTN","KMPDTP1",163,0)
 ;
"RTN","KMPDTP1",164,0)
 Q
"RTN","KMPDTP1",165,0)
 ;
"RTN","KMPDTP1",166,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP1",167,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP1",168,0)
 D ^%ZISC
"RTN","KMPDTP1",169,0)
 K KMPDATE,KMPDPTNP,KMPDTTL
"RTN","KMPDTP1",170,0)
 Q
"RTN","KMPDTP2")
0^4^B34056989
"RTN","KMPDTP2",1,0)
KMPDTP2 ;OAK/RAK/JML - CP Timing Daily Time-to-Load Detail ;9/1/2015
"RTN","KMPDTP2",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP2",3,0)
 ;
"RTN","KMPDTP2",4,0)
EN ;-- entry point
"RTN","KMPDTP2",5,0)
 N KMPDATE,KMPDBIDX,KMPDFGBG,KMPDSSCR,KMPDTOT,KMPDPTNP,KMPDSUB,KMPDTTL,POP,X,Y,ZTDESC,ZTRTN,ZTSAVE,ZTSK,%ZIS
"RTN","KMPDTP2",6,0)
 N KMPDLBG,KMPDLFG,KMPDDTSS
"RTN","KMPDTP2",7,0)
 S KMPDTTL=" Daily Coversheet Time-to-Load (TTL) Detailed Report "
"RTN","KMPDTP2",8,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP2",9,0)
 W !
"RTN","KMPDTP2",10,0)
 W !?7,"This detailed report displays daily time-to-load values for the"
"RTN","KMPDTP2",11,0)
 W !?7,"coversheet at this site.  The report breaks the time-to-load"
"RTN","KMPDTP2",12,0)
 W !?7,"metrics into ten second groupings."
"RTN","KMPDTP2",13,0)
 W !
"RTN","KMPDTP2",14,0)
 ;
"RTN","KMPDTP2",15,0)
 ; if no data
"RTN","KMPDTP2",16,0)
 I '$O(^KMPD(8973.2,0)) D  Q
"RTN","KMPDTP2",17,0)
 .W !!?7,"*** There is currently no data in file #8973.2 (CP TIMING) ***"
"RTN","KMPDTP2",18,0)
 ;
"RTN","KMPDTP2",19,0)
 ; select date range - first determine which subscript to use in API due to addition of foreground processing
"RTN","KMPDTP2",20,0)
 S KMPDLFG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV-FT","A"),-1)
"RTN","KMPDTP2",21,0)
 S KMPDLBG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV","A"),-1)
"RTN","KMPDTP2",22,0)
 S KMPDDTSS=$S(KMPDLFG=KMPDLBG:"ORWCV-FT",KMPDLFG>KMPDLBG:"ORWCV-FT",KMPDLFG<KMPDLBG:"ORWCV",1:"UNKNOWN")
"RTN","KMPDTP2",23,0)
 D DATERNG^KMPDTU10(KMPDDTSS,1,.KMPDATE)
"RTN","KMPDTP2",24,0)
 Q:$G(KMPDATE(0))=""
"RTN","KMPDTP2",25,0)
 ;
"RTN","KMPDTP2",26,0)
 ; select time frame
"RTN","KMPDTP2",27,0)
 S KMPDPTNP=$$PTNPSEL^KMPDUTL4
"RTN","KMPDTP2",28,0)
 Q:'KMPDPTNP
"RTN","KMPDTP2",29,0)
 ;
"RTN","KMPDTP2",30,0)
 ; select output device.
"RTN","KMPDTP2",31,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP2",32,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP2",33,0)
 ; if queued.
"RTN","KMPDTP2",34,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP2",35,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP2",36,0)
 .S ZTRTN="EN1^KMPDTP2"
"RTN","KMPDTP2",37,0)
 .S ZTSAVE("KMPDATE(")="",ZTSAVE("KMPDPTNP")="",ZTSAVE("KMPDTTL")=""
"RTN","KMPDTP2",38,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP2",39,0)
 .D EXIT
"RTN","KMPDTP2",40,0)
 ;
"RTN","KMPDTP2",41,0)
 ; if output to terminal display message.
"RTN","KMPDTP2",42,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP2",43,0)
 D EN1
"RTN","KMPDTP2",44,0)
 ;
"RTN","KMPDTP2",45,0)
 Q
"RTN","KMPDTP2",46,0)
 ;
"RTN","KMPDTP2",47,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP2",48,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP2",49,0)
 Q:'$G(KMPDPTNP)
"RTN","KMPDTP2",50,0)
 ;
"RTN","KMPDTP2",51,0)
 K ^TMP($J)
"RTN","KMPDTP2",52,0)
 D DATA,PRINT,EXIT
"RTN","KMPDTP2",53,0)
 K ^TMP($J)
"RTN","KMPDTP2",54,0)
 ;
"RTN","KMPDTP2",55,0)
 Q
"RTN","KMPDTP2",56,0)
 ;
"RTN","KMPDTP2",57,0)
DATA ;-- compile data
"RTN","KMPDTP2",58,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP2",59,0)
 Q:'$G(KMPDPTNP)
"RTN","KMPDTP2",60,0)
 ;
"RTN","KMPDTP2",61,0)
 N DATA,DATE,DELTA,DOT,END,I,IEN,PTNP,QUEUED,TOTAL
"RTN","KMPDTP2",62,0)
 ;
"RTN","KMPDTP2",63,0)
 S QUEUED=$D(ZTQUEUED),DOT=1
"RTN","KMPDTP2",64,0)
 ;
"RTN","KMPDTP2",65,0)
 S KMPDTOT("ORWCV")=0,KMPDTOT("ORWCV-FT")=0
"RTN","KMPDTP2",66,0)
 S PTNP=+KMPDPTNP
"RTN","KMPDTP2",67,0)
 Q:'PTNP
"RTN","KMPDTP2",68,0)
 ; Loop data - combine Foreground and Background timings
"RTN","KMPDTP2",69,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D
"RTN","KMPDTP2",70,0)
 .S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)
"RTN","KMPDTP2",71,0)
 .Q:'DATE!('END)
"RTN","KMPDTP2",72,0)
 .F  S DATE=$O(^KMPD(8973.2,"ASSDTPT",KMPDSUB,DATE)) Q:'DATE!(DATE>END)  D
"RTN","KMPDTP2",73,0)
 ..S (IEN,TOTAL)=0,^TMP($J,"DATA",DATE)="",^TMP($J,"RPT",DATE)="",TOTAL(KMPDSUB)=0
"RTN","KMPDTP2",74,0)
 ..F  S IEN=$O(^KMPD(8973.2,"ASSDTPT",KMPDSUB,DATE,PTNP,IEN)) Q:'IEN  D
"RTN","KMPDTP2",75,0)
 ...Q:'$D(^KMPD(8973.2,IEN,0))
"RTN","KMPDTP2",76,0)
 ...S DATA=^KMPD(8973.2,IEN,0)
"RTN","KMPDTP2",77,0)
 ...S KMPDBIDX=$P(DATA,U),KMPDSSCR=$P(DATA,U,7)
"RTN","KMPDTP2",78,0)
 ...S ^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSSCR)=$P(DATA,U,4)
"RTN","KMPDTP2",79,0)
 ...S KMPDTOT(KMPDSSCR)=KMPDTOT(KMPDSSCR)+1
"RTN","KMPDTP2",80,0)
 ;
"RTN","KMPDTP2",81,0)
 ; Print combined timings
"RTN","KMPDTP2",82,0)
 S DATE=""
"RTN","KMPDTP2",83,0)
 F  S DATE=$O(^TMP($J,"DATA",DATE)) Q:DATE=""  D
"RTN","KMPDTP2",84,0)
 .S KMPDBIDX=""
"RTN","KMPDTP2",85,0)
 .F  S KMPDBIDX=$O(^TMP($J,"DATA",DATE,KMPDBIDX)) Q:KMPDBIDX=""  D
"RTN","KMPDTP2",86,0)
 ..S DELTA=""
"RTN","KMPDTP2",87,0)
 ..S KMPDSUB=""
"RTN","KMPDTP2",88,0)
 ..F  S KMPDSUB=$O(^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSUB)) Q:KMPDSUB=""  D
"RTN","KMPDTP2",89,0)
 ...S DELTA=DELTA+^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSUB)
"RTN","KMPDTP2",90,0)
 ..S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP2",91,0)
 ..;
"RTN","KMPDTP2",92,0)
 ..; if delta is null increment by 1 and quit
"RTN","KMPDTP2",93,0)
 ..I DELTA="" S $P(^TMP($J,"RPT",DATE),U,50)=$P(^TMP($J,"RPT",DATE),U,50)+1 Q
"RTN","KMPDTP2",94,0)
 ..; total
"RTN","KMPDTP2",95,0)
 ..S TOTAL=TOTAL+1
"RTN","KMPDTP2",96,0)
 ..;
"RTN","KMPDTP2",97,0)
 ..; loop - less than I*10 seconds
"RTN","KMPDTP2",98,0)
 ..F I=1:1:9 I DELTA<(I*10) S $P(^TMP($J,"RPT",DATE),U,I)=$P(^TMP($J,"RPT",DATE),U,I)+1 Q
"RTN","KMPDTP2",99,0)
 ..; 90 or greater seconds
"RTN","KMPDTP2",100,0)
 ..I DELTA>89 S $P(^TMP($J,"RPT",DATE),U,10)=$P($G(^TMP($J,"RPT",DATE)),U,10)+1
"RTN","KMPDTP2",101,0)
 ..;
"RTN","KMPDTP2",102,0)
 ..; back to DATE level
"RTN","KMPDTP2",103,0)
 ..; determine percentage
"RTN","KMPDTP2",104,0)
 .I TOTAL F I=1:1:10 D 
"RTN","KMPDTP2",105,0)
 ..S $P(^TMP($J,"RPT",DATE,1),U,I)=$FN($P(^TMP($J,"RPT",DATE),U,I)/TOTAL*100,"",1)
"RTN","KMPDTP2",106,0)
 ;
"RTN","KMPDTP2",107,0)
 Q
"RTN","KMPDTP2",108,0)
 ;
"RTN","KMPDTP2",109,0)
PRINT ;-- print data
"RTN","KMPDTP2",110,0)
 U IO
"RTN","KMPDTP2",111,0)
 D HDR
"RTN","KMPDTP2",112,0)
 Q:'$D(^TMP($J))
"RTN","KMPDTP2",113,0)
 ;
"RTN","KMPDTP2",114,0)
 N CONT,DATE,I,TOTAL
"RTN","KMPDTP2",115,0)
 ;
"RTN","KMPDTP2",116,0)
 S DATE="",CONT=1
"RTN","KMPDTP2",117,0)
 F  S DATE=$O(^TMP($J,"RPT",DATE)) Q:'DATE  D  Q:'CONT
"RTN","KMPDTP2",118,0)
 .S TOTAL=""
"RTN","KMPDTP2",119,0)
 .S DATA=^TMP($J,"RPT",DATE),DATA(1)=$G(^TMP($J,"RPT",DATE,1))
"RTN","KMPDTP2",120,0)
 .W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP2",121,0)
 .; if no data
"RTN","KMPDTP2",122,0)
 .I DATA="" W ?12,"<No Data for ",$P(KMPDPTNP,U,2),">",! Q
"RTN","KMPDTP2",123,0)
 .; display data
"RTN","KMPDTP2",124,0)
 .F I=1:1:10 D
"RTN","KMPDTP2",125,0)
 ..W ?12
"RTN","KMPDTP2",126,0)
 ..I I<10 W $J(I-1*10,2)," to <",I*10
"RTN","KMPDTP2",127,0)
 ..E  W "90 or greater"
"RTN","KMPDTP2",128,0)
 ..W ?28,$J($FN($P(DATA,U,I),",",0),10)
"RTN","KMPDTP2",129,0)
 ..; percentages
"RTN","KMPDTP2",130,0)
 ..W ?44,$J($FN($P(DATA(1),U,I),"",1),10),"%",!
"RTN","KMPDTP2",131,0)
 ..; totals
"RTN","KMPDTP2",132,0)
 ..S $P(TOTAL,U)=$P(TOTAL,U)+$P(DATA,U,I)
"RTN","KMPDTP2",133,0)
 ..S $P(TOTAL,U,2)=$P(TOTAL,U,2)+$P(DATA(1),U,I)
"RTN","KMPDTP2",134,0)
 .;
"RTN","KMPDTP2",135,0)
 .; back to DATE level
"RTN","KMPDTP2",136,0)
 .; totals
"RTN","KMPDTP2",137,0)
 .W ?28,"----------",?44,"----------"
"RTN","KMPDTP2",138,0)
 .W !?28,$J($FN($P(TOTAL,U),",",0),10)
"RTN","KMPDTP2",139,0)
 .W ?44,$J($FN($P(TOTAL,U,2),"",0),10),"%"
"RTN","KMPDTP2",140,0)
 .W !!?12,"Incomplete",?28,$J($FN($P(DATA,U,50),",",0),10)
"RTN","KMPDTP2",141,0)
 .; page feed if another date
"RTN","KMPDTP2",142,0)
 .I $O(^TMP($J,"RPT",DATE)) D 
"RTN","KMPDTP2",143,0)
 ..D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT
"RTN","KMPDTP2",144,0)
 ..D HDR
"RTN","KMPDTP2",145,0)
 ;
"RTN","KMPDTP2",146,0)
 I CONT D 
"RTN","KMPDTP2",147,0)
 .; legend
"RTN","KMPDTP2",148,0)
 .S KMPDFGBG=0
"RTN","KMPDTP2",149,0)
 .I KMPDTOT("ORWCV")>0 S KMPDFGBG=1
"RTN","KMPDTP2",150,0)
 .I KMPDTOT("ORWCV-FT")>0 S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDTP2",151,0)
 .W !!?2,"CV  = Coversheet",?30,"Coversheet sections run in:"
"RTN","KMPDTP2",152,0)
 .W !?2,"TTL = Time-to-Load"
"RTN","KMPDTP2",153,0)
 .W ?30,$S(KMPDFGBG=1:"Background Only",KMPDFGBG=2:"Foreground Only",KMPDFGBG=3:"Both Foreground and Background",1:"Unknown")
"RTN","KMPDTP2",154,0)
 .; pause if output to terminal
"RTN","KMPDTP2",155,0)
 .D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP2",156,0)
 ;
"RTN","KMPDTP2",157,0)
 Q
"RTN","KMPDTP2",158,0)
 ;
"RTN","KMPDTP2",159,0)
HDR ;-- print header
"RTN","KMPDTP2",160,0)
 W @IOF
"RTN","KMPDTP2",161,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP2",162,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP2",163,0)
 S X=$P($G(KMPDPTNP),U,2)
"RTN","KMPDTP2",164,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP2",165,0)
 S X=$G(KMPDATE(0)),X=$P(X,U,3)_" - "_$P(X,U,4)
"RTN","KMPDTP2",166,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP2",167,0)
 W !
"RTN","KMPDTP2",168,0)
 W !,"Date",?12,"TTL Seconds",?28,"# of CV Loads",?44,"CV Percent"
"RTN","KMPDTP2",169,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP2",170,0)
 ;
"RTN","KMPDTP2",171,0)
 Q
"RTN","KMPDTP2",172,0)
 ;
"RTN","KMPDTP2",173,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP2",174,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP2",175,0)
 D ^%ZISC
"RTN","KMPDTP2",176,0)
 K KMPDATE,KMPDPTNP,KMPDTTL
"RTN","KMPDTP2",177,0)
 Q
"RTN","KMPDTP3")
0^5^B41193781
"RTN","KMPDTP3",1,0)
KMPDTP3 ;OAK/RAK/JML - CP Timing Hourly Time-to-Load ;9/1/2015
"RTN","KMPDTP3",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP3",3,0)
 ;
"RTN","KMPDTP3",4,0)
EN ;-- entry point
"RTN","KMPDTP3",5,0)
 N KMPDATE,KMPDFGBG,KMPDSTAR,KMPDSTTL,KMPDSUB,KMPDTTL,POP,X,Y,ZTDESC,ZTRTN,ZTRSAVE,%ZIS
"RTN","KMPDTP3",6,0)
 N KMPDLBG,KMPDLFG,KMPDDTSS
"RTN","KMPDTP3",7,0)
 S KMPDTTL=" Hourly Coversheet Time-to-Load (TTL) Report "
"RTN","KMPDTP3",8,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP3",9,0)
 W !
"RTN","KMPDTP3",10,0)
 W !?7,"This report displays the hourly average time-to-load value"
"RTN","KMPDTP3",11,0)
 W !?7,"for the coversheet at this site over 24 hours."
"RTN","KMPDTP3",12,0)
 W !?7,"Foreground, background and combined values are reported."
"RTN","KMPDTP3",13,0)
 W !
"RTN","KMPDTP3",14,0)
 ;
"RTN","KMPDTP3",15,0)
 ; if no data
"RTN","KMPDTP3",16,0)
 I '$O(^KMPD(8973.2,0)) D  Q
"RTN","KMPDTP3",17,0)
 .W !!?7,"*** There is currently no data in file #8973.2 (CP TIMING) ***"
"RTN","KMPDTP3",18,0)
 ;
"RTN","KMPDTP3",19,0)
 ; select date range - first determine which subscript to use in API due to addition of foreground processing
"RTN","KMPDTP3",20,0)
 S KMPDLFG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV-FT","A"),-1)
"RTN","KMPDTP3",21,0)
 S KMPDLBG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV","A"),-1)
"RTN","KMPDTP3",22,0)
 S KMPDDTSS=$S(KMPDLFG=KMPDLBG:"ORWCV-FT",KMPDLFG>KMPDLBG:"ORWCV-FT",KMPDLFG<KMPDLBG:"ORWCV",1:"UNKNOWN")
"RTN","KMPDTP3",23,0)
 D DATERNG^KMPDTU10(KMPDDTSS,1,.KMPDATE)
"RTN","KMPDTP3",24,0)
 Q:$G(KMPDATE(0))=""
"RTN","KMPDTP3",25,0)
 ; select output device.
"RTN","KMPDTP3",26,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP3",27,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP3",28,0)
 ; if queued.
"RTN","KMPDTP3",29,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP3",30,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP3",31,0)
 .S ZTRTN="EN1^KMPDTP3"
"RTN","KMPDTP3",32,0)
 .S ZTSAVE("KMPDATE(")="",ZTSAVE("KMPDTTL")=""
"RTN","KMPDTP3",33,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP3",34,0)
 .D EXIT
"RTN","KMPDTP3",35,0)
 ;
"RTN","KMPDTP3",36,0)
 ; if output to terminal display message.
"RTN","KMPDTP3",37,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP3",38,0)
 D EN1
"RTN","KMPDTP3",39,0)
 ;
"RTN","KMPDTP3",40,0)
 Q
"RTN","KMPDTP3",41,0)
 ;
"RTN","KMPDTP3",42,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP3",43,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP3",44,0)
 K ^TMP($J)
"RTN","KMPDTP3",45,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D DATA(KMPDSUB)
"RTN","KMPDTP3",46,0)
 D PRINT,EXIT
"RTN","KMPDTP3",47,0)
 K ^TMP($J)
"RTN","KMPDTP3",48,0)
 Q
"RTN","KMPDTP3",49,0)
 ;
"RTN","KMPDTP3",50,0)
DATA(KMPDSUB) ;-- compile data
"RTN","KMPDTP3",51,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP3",52,0)
 N DATA,DATE,DELTA,DOT,END,HR,I,IEN,PTNP,QUEUED,TOTAL
"RTN","KMPDTP3",53,0)
 S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)
"RTN","KMPDTP3",54,0)
 Q:'DATE!('END)
"RTN","KMPDTP3",55,0)
 S DOT=1,QUEUED=$D(ZTQUEUED)
"RTN","KMPDTP3",56,0)
 F  S DATE=$O(^KMPD(8973.2,"ASVDTSS",KMPDSUB,DATE)) Q:'DATE!(DATE>END)  D 
"RTN","KMPDTP3",57,0)
 .S (IEN,TOTAL)=0
"RTN","KMPDTP3",58,0)
 .; array with hours
"RTN","KMPDTP3",59,0)
 .F I=0:1:23 S ^TMP($J,KMPDSUB,DATE,I)=""
"RTN","KMPDTP3",60,0)
 .F  S IEN=$O(^KMPD(8973.2,"ASVDTSS",KMPDSUB,DATE,IEN)) Q:'IEN  D 
"RTN","KMPDTP3",61,0)
 ..Q:'$D(^KMPD(8973.2,IEN,0))  S DATA=^(0) Q:DATA=""
"RTN","KMPDTP3",62,0)
 ..S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP3",63,0)
 ..; get delta and hour
"RTN","KMPDTP3",64,0)
 ..S DELTA=$P(DATA,U,4),HR=+$E($P($P(DATA,U,3),".",2),1,2)
"RTN","KMPDTP3",65,0)
 ..S HR=$S(HR="":0,HR=24:0,1:HR)
"RTN","KMPDTP3",66,0)
 ..; if delta
"RTN","KMPDTP3",67,0)
 ..I $P(DATA,U,4)'="" D 
"RTN","KMPDTP3",68,0)
 ...; minimum delta
"RTN","KMPDTP3",69,0)
 ...I $P(^TMP($J,KMPDSUB,DATE,HR),U,2)=""!($P(DATA,U,4)<$P(^TMP($J,KMPDSUB,DATE,HR),U,2)) D 
"RTN","KMPDTP3",70,0)
 ....S $P(^TMP($J,KMPDSUB,DATE,HR),U,2)=$P(DATA,U,4)
"RTN","KMPDTP3",71,0)
 ...; maximum delta
"RTN","KMPDTP3",72,0)
 ...I $P(DATA,U,4)>$P(^TMP($J,KMPDSUB,DATE,HR),U,3) S $P(^TMP($J,KMPDSUB,DATE,HR),U,3)=$P(DATA,U,4)
"RTN","KMPDTP3",73,0)
 ...; total delta
"RTN","KMPDTP3",74,0)
 ...S $P(^TMP($J,KMPDSUB,DATE,HR),U,4)=$P(^TMP($J,KMPDSUB,DATE,HR),U,4)+$P(DATA,U,4)
"RTN","KMPDTP3",75,0)
 ...; count
"RTN","KMPDTP3",76,0)
 ...S $P(^TMP($J,KMPDSUB,DATE,HR),U,5)=$P(^TMP($J,KMPDSUB,DATE,HR),U,5)+1
"RTN","KMPDTP3",77,0)
 ..; if no delta
"RTN","KMPDTP3",78,0)
 ..E  S $P(^TMP($J,KMPDSUB,DATE,HR),U,6)=$P(^TMP($J,KMPDSUB,DATE,HR),U,6)+1
"RTN","KMPDTP3",79,0)
 .;
"RTN","KMPDTP3",80,0)
 .; back to DATE level
"RTN","KMPDTP3",81,0)
 .; average
"RTN","KMPDTP3",82,0)
 .F I=0:1:23 I $P(^TMP($J,KMPDSUB,DATE,I),U,5) D 
"RTN","KMPDTP3",83,0)
 ..S $P(^TMP($J,KMPDSUB,DATE,I),U)=$P(^TMP($J,KMPDSUB,DATE,I),U,4)/$P(^TMP($J,KMPDSUB,DATE,I),U,5)
"RTN","KMPDTP3",84,0)
 ;
"RTN","KMPDTP3",85,0)
 Q
"RTN","KMPDTP3",86,0)
 ;
"RTN","KMPDTP3",87,0)
PRINT ;-- print data
"RTN","KMPDTP3",88,0)
 U IO
"RTN","KMPDTP3",89,0)
 S KMPDFGBG=0
"RTN","KMPDTP3",90,0)
 I $D(^TMP($J,"ORWCV")) S KMPDFGBG=1
"RTN","KMPDTP3",91,0)
 I $D(^TMP($J,"ORWCV-FT")) S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDTP3",92,0)
 I KMPDFGBG=1 D PRINTONE("ORWCV","Background")
"RTN","KMPDTP3",93,0)
 I KMPDFGBG=2 D PRINTONE("ORWCV-FT","Foreground")
"RTN","KMPDTP3",94,0)
 I KMPDFGBG=3 D PRNTBOTH
"RTN","KMPDTP3",95,0)
 Q
"RTN","KMPDTP3",96,0)
 ;
"RTN","KMPDTP3",97,0)
PRINTONE(KMPDSUB,KMPDSTTL) ;
"RTN","KMPDTP3",98,0)
 U IO
"RTN","KMPDTP3",99,0)
 D HDR(KMPDSTTL)
"RTN","KMPDTP3",100,0)
 Q:'$D(^TMP($J,KMPDSUB))
"RTN","KMPDTP3",101,0)
 N CONT,DATE,HR,I,TOTAL
"RTN","KMPDTP3",102,0)
 S DATE="",CONT=1,KMPDSTAR=0
"RTN","KMPDTP3",103,0)
 F  S DATE=$O(^TMP($J,KMPDSUB,DATE)) Q:'DATE  S HR="" D  Q:'CONT
"RTN","KMPDTP3",104,0)
 .S TOTAL=""
"RTN","KMPDTP3",105,0)
 .W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP3",106,0)
 .F  S HR=$O(^TMP($J,KMPDSUB,DATE,HR)) Q:HR=""  D  Q:'CONT
"RTN","KMPDTP3",107,0)
 ..; page feed
"RTN","KMPDTP3",108,0)
 ..I $Y>(IOSL-3) D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT  D HDR(KMPDSTTL) W !
"RTN","KMPDTP3",109,0)
 ..W ?12," ",$S($L(HR)=1:"0",1:""),HR
"RTN","KMPDTP3",110,0)
 ..S DATA=^TMP($J,KMPDSUB,DATE,HR)
"RTN","KMPDTP3",111,0)
 ..W ?20,$J($FN($P(DATA,U),",",0),10)
"RTN","KMPDTP3",112,0)
 ..W ?34,$J($FN($P(DATA,U,2),",",0),10)
"RTN","KMPDTP3",113,0)
 ..W ?48,$J($FN($P(DATA,U,3),",",0),10)
"RTN","KMPDTP3",114,0)
 ..W ?62,$J($FN($P(DATA,U,5),",",0),10)
"RTN","KMPDTP3",115,0)
 ..I $P(DATA,U,5)["*" W "*" S KMPDSTAR=1
"RTN","KMPDTP3",116,0)
 ..W !
"RTN","KMPDTP3",117,0)
 ..S $P(TOTAL,U)=$P(TOTAL,U)+$P(DATA,U,5)
"RTN","KMPDTP3",118,0)
 ..S $P(TOTAL,U,2)=$P(TOTAL,U,2)+$P(DATA,U,6)
"RTN","KMPDTP3",119,0)
 .;
"RTN","KMPDTP3",120,0)
 .; back to DATE level
"RTN","KMPDTP3",121,0)
 .; totals
"RTN","KMPDTP3",122,0)
 .W ?62,"----------",!?62,$J($FN(TOTAL,",",0),10),!
"RTN","KMPDTP3",123,0)
 .W !?12,"Incomplete: ",$J($FN($P(TOTAL,U,2),",",0),$L($P(TOTAL,U,2))+2),!
"RTN","KMPDTP3",124,0)
 .; if another date
"RTN","KMPDTP3",125,0)
 .I $O(^TMP($J,KMPDSUB,DATE)) D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT  D HDR(KMPDSTTL) W !
"RTN","KMPDTP3",126,0)
 ;
"RTN","KMPDTP3",127,0)
 I CONT D 
"RTN","KMPDTP3",128,0)
 .; legend
"RTN","KMPDTP3",129,0)
 .W !!?2,"CV  = Coversheet" I KMPDSTAR=1 W ?35,"* = BG/FG Load Counts not equal."
"RTN","KMPDTP3",130,0)
 .W !?2,"TTL = Time-to-Load" I KMPDSTAR=1 W ?35,"Listing FOREGROUND Load Count"
"RTN","KMPDTP3",131,0)
 .; pause if output to terminal
"RTN","KMPDTP3",132,0)
 .D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP3",133,0)
 ;
"RTN","KMPDTP3",134,0)
 Q
"RTN","KMPDTP3",135,0)
 ;
"RTN","KMPDTP3",136,0)
PRNTBOTH ;
"RTN","KMPDTP3",137,0)
 ; AVG ^ MIN ^ MAX ^ TOTDELTA ^  CNT
"RTN","KMPDTP3",138,0)
 N DATE,TOTDATA,HR,BGDATA,BGMAX,BGMIN,BGTOT,FGDATA,FGMAX,FGMIN,FGTOT
"RTN","KMPDTP3",139,0)
 S DATE=""
"RTN","KMPDTP3",140,0)
 F  S DATE=$O(^TMP($J,"ORWCV-FT",DATE)) Q:DATE=""  D
"RTN","KMPDTP3",141,0)
 .S HR=""
"RTN","KMPDTP3",142,0)
 .F  S HR=$O(^TMP($J,"ORWCV-FT",DATE,HR)) Q:HR=""  D
"RTN","KMPDTP3",143,0)
 ..S TOTDATA=""
"RTN","KMPDTP3",144,0)
 ..S FGDATA=$G(^TMP($J,"ORWCV-FT",DATE,HR))
"RTN","KMPDTP3",145,0)
 ..S BGDATA=$G(^TMP($J,"ORWCV",DATE,HR))
"RTN","KMPDTP3",146,0)
 ..S $P(TOTDATA,U)=$P(FGDATA,U)+$P(BGDATA,U)
"RTN","KMPDTP3",147,0)
 ..S FGMIN=$P(FGDATA,U,2),BGMIN=$P(BGDATA,U,2)
"RTN","KMPDTP3",148,0)
 ..S $P(TOTDATA,U,2)=$S(FGMIN<BGMIN:FGMIN,1:BGMIN)
"RTN","KMPDTP3",149,0)
 ..S FGMAX=$P(FGDATA,U,3),BGMAX=$P(BGDATA,U,3)
"RTN","KMPDTP3",150,0)
 ..S $P(TOTDATA,U,3)=$S(BGMAX>FGMAX:BGMAX,1:FGMAX)
"RTN","KMPDTP3",151,0)
 ..S $P(TOTDATA,U,4)=$P(FGDATA,U,5)+$P(BGDATA,U,4)
"RTN","KMPDTP3",152,0)
 ..S FGTOT=$P(FGDATA,U,5),BGTOT=$P(BGDATA,U,5)
"RTN","KMPDTP3",153,0)
 ..S $P(TOTDATA,U,5)=$S(FGTOT=BGTOT:FGTOT,1:FGTOT_"*")
"RTN","KMPDTP3",154,0)
 ..S $P(TOTDATA,U,6)=$P(FGDATA,U,6)+$P(BGDATA,U,6)
"RTN","KMPDTP3",155,0)
 ..S ^TMP($J,"ORWCV-BOTH",DATE,HR)=TOTDATA
"RTN","KMPDTP3",156,0)
 D PRINTONE("ORWCV","BACKGROUND")
"RTN","KMPDTP3",157,0)
 D PRINTONE("ORWCV-FT","FOREGROUND")
"RTN","KMPDTP3",158,0)
 D PRINTONE("ORWCV-BOTH","Combined FOREGROUND and BACKGROUND")
"RTN","KMPDTP3",159,0)
 Q
"RTN","KMPDTP3",160,0)
 ;
"RTN","KMPDTP3",161,0)
HDR(KMPDSTTL) ;-- print header
"RTN","KMPDTP3",162,0)
 W @IOF
"RTN","KMPDTP3",163,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP3",164,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP3",165,0)
 S X=KMPDSTTL_" Coversheet Loads"
"RTN","KMPDTP3",166,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP3",167,0)
 S X=$G(KMPDATE(0)),X=$P(X,U,3)_" - "_$P(X,U,4)
"RTN","KMPDTP3",168,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP3",169,0)
 W !
"RTN","KMPDTP3",170,0)
 W !?20,"|---------------Seconds---------------|"
"RTN","KMPDTP3",171,0)
 W !,"Date",?12,"Hour",?20,"TTL Average",?34,"TTL Minimum",?48,"TTL Maximum",?62,"# of CV Loads"
"RTN","KMPDTP3",172,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP3",173,0)
 ;
"RTN","KMPDTP3",174,0)
 Q
"RTN","KMPDTP3",175,0)
 ;
"RTN","KMPDTP3",176,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP3",177,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP3",178,0)
 D ^%ZISC
"RTN","KMPDTP3",179,0)
 K KMPDATE,KMPDTTL
"RTN","KMPDTP3",180,0)
 Q
"RTN","KMPDTP4")
0^6^B40761189
"RTN","KMPDTP4",1,0)
KMPDTP4 ;OAK/RAK/JML - CP Timing Hourly Time-to-Load ;9/1/2015
"RTN","KMPDTP4",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP4",3,0)
 ;
"RTN","KMPDTP4",4,0)
EN ;-- entry point
"RTN","KMPDTP4",5,0)
 ;
"RTN","KMPDTP4",6,0)
 N KMPDATE,KMPDTTL,POP,X,Y,ZTDESC,ZTRTN,ZTRSAVE,ZTSK,%ZIS
"RTN","KMPDTP4",7,0)
 N KMPDLBG,KMPDLFG,KMPDDTSS
"RTN","KMPDTP4",8,0)
 ;
"RTN","KMPDTP4",9,0)
 S KMPDTTL=" Hourly Coversheet Time-to-Load (TTL) Detail Report "
"RTN","KMPDTP4",10,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP4",11,0)
 W !
"RTN","KMPDTP4",12,0)
 W !?7,"This detail report displays the hourly time-to-load values"
"RTN","KMPDTP4",13,0)
 W !?7,"for the coversheet at this site.  The report breaks the"
"RTN","KMPDTP4",14,0)
 W !?7,"time-to-load metrics into ten second groupings."
"RTN","KMPDTP4",15,0)
 W !
"RTN","KMPDTP4",16,0)
 ;
"RTN","KMPDTP4",17,0)
 ; if no data
"RTN","KMPDTP4",18,0)
 I '$O(^KMPD(8973.2,0)) D  Q
"RTN","KMPDTP4",19,0)
 .W !!?7,"*** There is currently no data in file #8973.2 (CP TIMING) ***"
"RTN","KMPDTP4",20,0)
 ;
"RTN","KMPDTP4",21,0)
 ; select date range - first determine which subscript to use in API due to addition of foreground processing
"RTN","KMPDTP4",22,0)
 S KMPDLFG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV-FT","A"),-1)
"RTN","KMPDTP4",23,0)
 S KMPDLBG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV","A"),-1)
"RTN","KMPDTP4",24,0)
 S KMPDDTSS=$S(KMPDLFG=KMPDLBG:"ORWCV-FT",KMPDLFG>KMPDLBG:"ORWCV-FT",KMPDLFG<KMPDLBG:"ORWCV",1:"UNKNOWN")
"RTN","KMPDTP4",25,0)
 D DTTMRNG^KMPDTU10(KMPDDTSS,1,.KMPDATE,8)
"RTN","KMPDTP4",26,0)
 Q:$G(KMPDATE(0))=""
"RTN","KMPDTP4",27,0)
 Q:$G(KMPDATE(1))=""
"RTN","KMPDTP4",28,0)
 ;
"RTN","KMPDTP4",29,0)
 ; select output device.
"RTN","KMPDTP4",30,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP4",31,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP4",32,0)
 ; if queued.
"RTN","KMPDTP4",33,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP4",34,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP4",35,0)
 .S ZTRTN="EN1^KMPDTP4"
"RTN","KMPDTP4",36,0)
 .S ZTSAVE("KMPDATE(")="",ZTSAVE("KMPDTTL")=""
"RTN","KMPDTP4",37,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP4",38,0)
 .D EXIT
"RTN","KMPDTP4",39,0)
 ;
"RTN","KMPDTP4",40,0)
 ; if output to terminal display message.
"RTN","KMPDTP4",41,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP4",42,0)
 D EN1
"RTN","KMPDTP4",43,0)
 ;
"RTN","KMPDTP4",44,0)
 Q
"RTN","KMPDTP4",45,0)
 ;
"RTN","KMPDTP4",46,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP4",47,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP4",48,0)
 N KMPDTOT,KMPDFG,KMPDBG
"RTN","KMPDTP4",49,0)
 K ^TMP($J)
"RTN","KMPDTP4",50,0)
 D DATA,PRINT,EXIT
"RTN","KMPDTP4",51,0)
 K ^TMP($J)
"RTN","KMPDTP4",52,0)
 Q
"RTN","KMPDTP4",53,0)
 ;
"RTN","KMPDTP4",54,0)
DATA ;-- compile data
"RTN","KMPDTP4",55,0)
 ;
"RTN","KMPDTP4",56,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP4",57,0)
 ;
"RTN","KMPDTP4",58,0)
 N DATA,DATE,DATE1,DELTA,DOT,END,HOUR,HR,I,IEN,PTNP,QUEUED,TOTAL
"RTN","KMPDTP4",59,0)
 N KMPDSUB,KMPDBIDX
"RTN","KMPDTP4",60,0)
 ;
"RTN","KMPDTP4",61,0)
 S DOT=1,QUEUED=$D(ZTQUEUED)
"RTN","KMPDTP4",62,0)
 ; set up HOUR() array
"RTN","KMPDTP4",63,0)
 F I=1:1:24 S:$P(KMPDATE(1),",",I)'="" HOUR(+$P(KMPDATE(1),",",I))=""
"RTN","KMPDTP4",64,0)
 Q:'$D(HOUR)
"RTN","KMPDTP4",65,0)
 S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)+.9
"RTN","KMPDTP4",66,0)
 Q:'DATE!('END)
"RTN","KMPDTP4",67,0)
 ; Loop data - combine Foreground and Background timings
"RTN","KMPDTP4",68,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D
"RTN","KMPDTP4",69,0)
 .S KMPDTOT(KMPDSUB)=0
"RTN","KMPDTP4",70,0)
 .S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)+.9
"RTN","KMPDTP4",71,0)
 .F  S DATE=$O(^KMPD(8973.2,"ASSDTTM",KMPDSUB,DATE)) Q:'DATE!(DATE>END)  D
"RTN","KMPDTP4",72,0)
 ..S HR=+$E($P(DATE,".",2),1,2) S:HR="" HR="0"
"RTN","KMPDTP4",73,0)
 ..Q:'$D(HOUR(HR))
"RTN","KMPDTP4",74,0)
 ..S (IEN,TOTAL)=0,TOTAL(KMPDSUB)=0
"RTN","KMPDTP4",75,0)
 ..F  S IEN=$O(^KMPD(8973.2,"ASSDTTM",KMPDSUB,DATE,IEN)) Q:'IEN  D
"RTN","KMPDTP4",76,0)
 ...S DATA=$G(^KMPD(8973.2,IEN,0))
"RTN","KMPDTP4",77,0)
 ...Q:DATA=""
"RTN","KMPDTP4",78,0)
 ...S KMPDBIDX=$P(DATA,U)
"RTN","KMPDTP4",79,0)
 ...S ^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSUB)=$P(DATA,U,4)
"RTN","KMPDTP4",80,0)
 ...S KMPDTOT(KMPDSUB)=KMPDTOT(KMPDSUB)+1
"RTN","KMPDTP4",81,0)
 ;
"RTN","KMPDTP4",82,0)
 ; Calculate percentages
"RTN","KMPDTP4",83,0)
 S DATE=""
"RTN","KMPDTP4",84,0)
 F  S DATE=$O(^TMP($J,"DATA",DATE)) Q:DATE=""  D
"RTN","KMPDTP4",85,0)
 .; date without time
"RTN","KMPDTP4",86,0)
 .S DATE1=$P(DATE,".")
"RTN","KMPDTP4",87,0)
 .; set up HOUR() array
"RTN","KMPDTP4",88,0)
 .M:'$D(^TMP($J,"RPT",DATE1)) ^TMP($J,"RPT",DATE1)=HOUR
"RTN","KMPDTP4",89,0)
 .; set up TOTAL() array
"RTN","KMPDTP4",90,0)
 .M:'$D(TOTAL(DATE1)) TOTAL(DATE1)=HOUR
"RTN","KMPDTP4",91,0)
 .S KMPDBIDX=""
"RTN","KMPDTP4",92,0)
 .F  S KMPDBIDX=$O(^TMP($J,"DATA",DATE,KMPDBIDX)) Q:KMPDBIDX=""  D
"RTN","KMPDTP4",93,0)
 ..S (DELTA,KMPDSUB)=""
"RTN","KMPDTP4",94,0)
 ..F  S KMPDSUB=$O(^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSUB)) Q:KMPDSUB=""  D
"RTN","KMPDTP4",95,0)
 ...S DELTA=DELTA+$G(^TMP($J,"DATA",DATE,KMPDBIDX,KMPDSUB))
"RTN","KMPDTP4",96,0)
 ..S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP4",97,0)
 ..S HR=+$E($P(DATE,".",2),1,2) S:HR="" HR="0"
"RTN","KMPDTP4",98,0)
 ..; if delta is null increment by 1 and quit
"RTN","KMPDTP4",99,0)
 ..I DELTA="" S $P(^TMP($J,"RPT",DATE1,HR),U,50)=$P(^TMP($J,"RPT",DATE1,HR),U,50)+1 Q
"RTN","KMPDTP4",100,0)
 ..; loop - less than I*10 seconds
"RTN","KMPDTP4",101,0)
 ..F I=1:1:9 I DELTA<(I*10) S $P(^TMP($J,"RPT",DATE1,HR),U,I)=$P(^TMP($J,"RPT",DATE1,HR),U,I)+1 Q
"RTN","KMPDTP4",102,0)
 ..; 90 or greater seconds
"RTN","KMPDTP4",103,0)
 ..I DELTA>89 S $P(^TMP($J,"RPT",DATE1,HR),U,10)=$P(^TMP($J,"RPT",DATE1,HR),U,10)+1
"RTN","KMPDTP4",104,0)
 ..; total
"RTN","KMPDTP4",105,0)
 ..S TOTAL(DATE1,HR)=TOTAL(DATE1,HR)+1
"RTN","KMPDTP4",106,0)
 ; determine percentage
"RTN","KMPDTP4",107,0)
 S DATE1=0
"RTN","KMPDTP4",108,0)
 F  S DATE1=$O(TOTAL(DATE1)) Q:'DATE1  S HR="" D 
"RTN","KMPDTP4",109,0)
 .F  S HR=$O(TOTAL(DATE1,HR)) Q:HR=""  I TOTAL(DATE1,HR) F I=1:1:10 D 
"RTN","KMPDTP4",110,0)
 ..S $P(^TMP($J,"RPT",DATE1,HR,1),U,I)=$FN($P(^TMP($J,"RPT",DATE1,HR),U,I)/TOTAL(DATE1,HR)*100,"",1)
"RTN","KMPDTP4",111,0)
 Q
"RTN","KMPDTP4",112,0)
 ;
"RTN","KMPDTP4",113,0)
PRINT ;-- print data
"RTN","KMPDTP4",114,0)
 ;
"RTN","KMPDTP4",115,0)
 U IO
"RTN","KMPDTP4",116,0)
 D HDR
"RTN","KMPDTP4",117,0)
 Q:'$D(^TMP($J))
"RTN","KMPDTP4",118,0)
 N CONT,DATE,I,TOTAL,KMPDFGBG,KMPDMESS
"RTN","KMPDTP4",119,0)
 S (KMPDFG,KMPDBG)=0
"RTN","KMPDTP4",120,0)
 S DATE="",CONT=1
"RTN","KMPDTP4",121,0)
 F  S DATE=$O(^TMP($J,"RPT",DATE)) Q:'DATE  D  Q:'CONT
"RTN","KMPDTP4",122,0)
 .W !,$$FMTE^XLFDT(DATE,2) S HR=""
"RTN","KMPDTP4",123,0)
 .F  S HR=$O(^TMP($J,"RPT",DATE,HR)) Q:HR=""  D  Q:'CONT
"RTN","KMPDTP4",124,0)
 ..I $Y>(IOSL-9) D  Q:'CONT
"RTN","KMPDTP4",125,0)
 ...D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT
"RTN","KMPDTP4",126,0)
 ...D HDR W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP4",127,0)
 ..W ?12,HR
"RTN","KMPDTP4",128,0)
 ..S TOTAL="",DATA=^TMP($J,"RPT",DATE,HR),DATA(1)=$G(^TMP($J,"RPT",DATE,HR,1))
"RTN","KMPDTP4",129,0)
 ..; if no data
"RTN","KMPDTP4",130,0)
 ..I DATA="" W ?12,"  <No Data>",! Q
"RTN","KMPDTP4",131,0)
 ..; display data
"RTN","KMPDTP4",132,0)
 ..F I=1:1:9 D 
"RTN","KMPDTP4",133,0)
 ...W ?16,I-1*10," to <",I*10
"RTN","KMPDTP4",134,0)
 ...W ?32,$J($FN($P(DATA,U,I),",",0),10)
"RTN","KMPDTP4",135,0)
 ...; percentages
"RTN","KMPDTP4",136,0)
 ...W ?48,$J($FN($P(DATA(1),U,I),"",1),10),"%"
"RTN","KMPDTP4",137,0)
 ...W !
"RTN","KMPDTP4",138,0)
 ...; totals
"RTN","KMPDTP4",139,0)
 ...S $P(TOTAL,U)=$P(TOTAL,U)+$P(DATA,U,I)
"RTN","KMPDTP4",140,0)
 ...S $P(TOTAL,U,2)=$P(TOTAL,U,2)+$P(DATA(1),U,I)
"RTN","KMPDTP4",141,0)
 ..; greater than 90
"RTN","KMPDTP4",142,0)
 ..W ?16,"90 or greater",?32,$J($FN($P(DATA,U,10),",",0),10)
"RTN","KMPDTP4",143,0)
 ..W ?48,$J($FN($P(DATA(1),U,10),"",1),10),"%"
"RTN","KMPDTP4",144,0)
 ..S $P(TOTAL,U)=$P(TOTAL,U)+$P(DATA,U,10)
"RTN","KMPDTP4",145,0)
 ..S $P(TOTAL,U,2)=$P(TOTAL,U,2)+$P(DATA(1),U,10)
"RTN","KMPDTP4",146,0)
 ..; totals
"RTN","KMPDTP4",147,0)
 ..W !?32,"----------",?48,"----------"
"RTN","KMPDTP4",148,0)
 ..W !?32,$J($FN($P(TOTAL,U),",",0),10)
"RTN","KMPDTP4",149,0)
 ..W ?48,$J($FN($P(TOTAL,U,2),"",0),10),"%"
"RTN","KMPDTP4",150,0)
 ..W !?16,"Incomplete",?32,$J($FN($P(DATA,U,50),",",0),10),!
"RTN","KMPDTP4",151,0)
 ..; page feed if another date
"RTN","KMPDTP4",152,0)
 ..I $O(^TMP($J,DATE)) D 
"RTN","KMPDTP4",153,0)
 ...D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT
"RTN","KMPDTP4",154,0)
 ...D HDR
"RTN","KMPDTP4",155,0)
 ..W !
"RTN","KMPDTP4",156,0)
 ;
"RTN","KMPDTP4",157,0)
 I CONT D 
"RTN","KMPDTP4",158,0)
 .; legend
"RTN","KMPDTP4",159,0)
 .S KMPDFGBG=0
"RTN","KMPDTP4",160,0)
 .I $G(KMPDTOT("ORWCV"))>0 S KMPDFGBG=KMPDFGBG+1
"RTN","KMPDTP4",161,0)
 .I $G(KMPDTOT("ORWCV-FT"))>0 S KMPDFGBG=KMPDFGBG+2
"RTN","KMPDTP4",162,0)
 .W !!?2,"CV  = Coversheet",?30,"Coversheet sections run in:"
"RTN","KMPDTP4",163,0)
 .W !?2,"TTL = Time-to-Load"
"RTN","KMPDTP4",164,0)
 .W ?30,$S(KMPDFGBG=1:"Background Only",KMPDFGBG=2:"Foreground Only",KMPDFGBG=3:"Both Foreground and Background",1:"Unknown")
"RTN","KMPDTP4",165,0)
 .; pause if output to terminal
"RTN","KMPDTP4",166,0)
 .D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP4",167,0)
 ;
"RTN","KMPDTP4",168,0)
 Q
"RTN","KMPDTP4",169,0)
 ;
"RTN","KMPDTP4",170,0)
HDR ;-- print header
"RTN","KMPDTP4",171,0)
 W @IOF
"RTN","KMPDTP4",172,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP4",173,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP4",174,0)
 S X=$G(KMPDATE(0)),X=$P(X,U,3)_" - "_$P(X,U,4)
"RTN","KMPDTP4",175,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP4",176,0)
 W !
"RTN","KMPDTP4",177,0)
 W !,"Date",?12,"Hr",?16,"TTL Seconds",?32,"# CV Loads",?48,"CV Percent"
"RTN","KMPDTP4",178,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP4",179,0)
 ;
"RTN","KMPDTP4",180,0)
 Q
"RTN","KMPDTP4",181,0)
 ;
"RTN","KMPDTP4",182,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP4",183,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP4",184,0)
 D ^%ZISC
"RTN","KMPDTP4",185,0)
 K KMPDATE,KMPDTTL
"RTN","KMPDTP4",186,0)
 Q
"RTN","KMPDTP5")
0^7^B39279349
"RTN","KMPDTP5",1,0)
KMPDTP5 ;OAK/RAK/JML - CP Timing Threshold Alert ;9/1/2015
"RTN","KMPDTP5",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP5",3,0)
 ;
"RTN","KMPDTP5",4,0)
EN ;-- entry point
"RTN","KMPDTP5",5,0)
 ;
"RTN","KMPDTP5",6,0)
 N I,KMPDATE,KMPDSRCH,KMPDTSEC,KMPDTTL,POP,X,Y
"RTN","KMPDTP5",7,0)
 N ZTDESC,ZTRTN,ZTRSAVE,ZTSK,%ZIS
"RTN","KMPDTP5",8,0)
 N KMPDLBG,KMPDLFG,KMPDDTSS
"RTN","KMPDTP5",9,0)
 ;
"RTN","KMPDTP5",10,0)
 S KMPDTTL=" Coversheet Time-to-Load (TTL) Alert Report "
"RTN","KMPDTP5",11,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP5",12,0)
 W !
"RTN","KMPDTP5",13,0)
 W !?7,"This alerting report shows the particular coversheet loads"
"RTN","KMPDTP5",14,0)
 W !?7,"that had excessive time-to-load values. This report will"
"RTN","KMPDTP5",15,0)
 W !?7,"search for a particular person, a particular client name or"
"RTN","KMPDTP5",16,0)
 W !?7,"IP address."
"RTN","KMPDTP5",17,0)
 W !?7,"Foreground and background times are combined."
"RTN","KMPDTP5",18,0)
 W !
"RTN","KMPDTP5",19,0)
 ;
"RTN","KMPDTP5",20,0)
 ; if no data
"RTN","KMPDTP5",21,0)
 I '$O(^KMPD(8973.2,0)) D  Q
"RTN","KMPDTP5",22,0)
 .W !!?7,"*** There is currently no data in file #8973.2 (CP TIMING) ***"
"RTN","KMPDTP5",23,0)
 ;
"RTN","KMPDTP5",24,0)
 ; date & hour(s) - first determine which subscript to use in API due to addition of foreground processing
"RTN","KMPDTP5",25,0)
 S KMPDLFG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV-FT","A"),-1)
"RTN","KMPDTP5",26,0)
 S KMPDLBG=$O(^KMPD(8973.2,"ASSDTTM","ORWCV","A"),-1)
"RTN","KMPDTP5",27,0)
 S KMPDDTSS=$S(KMPDLFG=KMPDLBG:"ORWCV-FT",KMPDLFG>KMPDLBG:"ORWCV-FT",KMPDLFG<KMPDLBG:"ORWCV",1:"UNKNOWN")
"RTN","KMPDTP5",28,0)
 D DTTMRNG^KMPDTU10(KMPDDTSS,1,.KMPDATE,8)
"RTN","KMPDTP5",29,0)
 Q:$G(KMPDATE(0))=""
"RTN","KMPDTP5",30,0)
 Q:$G(KMPDATE(1))=""
"RTN","KMPDTP5",31,0)
 ;
"RTN","KMPDTP5",32,0)
 ; time-to-load threshold seconds
"RTN","KMPDTP5",33,0)
 S KMPDTSEC=$$TTLSEC^KMPDTU10
"RTN","KMPDTP5",34,0)
 Q:'KMPDTSEC
"RTN","KMPDTP5",35,0)
 ;
"RTN","KMPDTP5",36,0)
 ; search by
"RTN","KMPDTP5",37,0)
 D SRCHBY^KMPDTU10(.KMPDSRCH,"ORWCV")
"RTN","KMPDTP5",38,0)
 Q:'KMPDSRCH
"RTN","KMPDTP5",39,0)
 ;
"RTN","KMPDTP5",40,0)
 ; select output device.
"RTN","KMPDTP5",41,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP5",42,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP5",43,0)
 ; if queued.
"RTN","KMPDTP5",44,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP5",45,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP5",46,0)
 .S ZTRTN="EN1^KMPDTP5"
"RTN","KMPDTP5",47,0)
 .F I="KMPDATE(","KMPDSRCH(","KMPDTSEC","KMPDTTL" S ZTSAVE(I)=""
"RTN","KMPDTP5",48,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP5",49,0)
 .D EXIT
"RTN","KMPDTP5",50,0)
 ;
"RTN","KMPDTP5",51,0)
 ; if output to terminal display message.
"RTN","KMPDTP5",52,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP5",53,0)
 D EN1
"RTN","KMPDTP5",54,0)
 ;
"RTN","KMPDTP5",55,0)
 Q
"RTN","KMPDTP5",56,0)
 ;
"RTN","KMPDTP5",57,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP5",58,0)
 I '$D(KMPDATE) D EXIT Q
"RTN","KMPDTP5",59,0)
 I '$D(KMPDSRCH) D EXIT Q
"RTN","KMPDTP5",60,0)
 I '$G(KMPDTSEC) D EXIT Q
"RTN","KMPDTP5",61,0)
 I $G(KMPDTTL)="" D EXIT Q
"RTN","KMPDTP5",62,0)
 ;
"RTN","KMPDTP5",63,0)
 K ^TMP($J)
"RTN","KMPDTP5",64,0)
 U IO
"RTN","KMPDTP5",65,0)
 D DATA,PRINT,EXIT
"RTN","KMPDTP5",66,0)
 K ^TMP($J)
"RTN","KMPDTP5",67,0)
 Q
"RTN","KMPDTP5",68,0)
 ;
"RTN","KMPDTP5",69,0)
DATA ;-- compile data
"RTN","KMPDTP5",70,0)
 ;
"RTN","KMPDTP5",71,0)
 Q:'$D(KMPDATE)
"RTN","KMPDTP5",72,0)
 Q:'$G(KMPDSRCH)
"RTN","KMPDTP5",73,0)
 Q:'$G(KMPDTSEC)
"RTN","KMPDTP5",74,0)
 ;
"RTN","KMPDTP5",75,0)
 N DATA,DATE,DATE1,DELTA,DOT,END,GBL,GBLREF,HOUR,HR,I,IEN,QUEUED,TIME,XREF
"RTN","KMPDTP5",76,0)
 N KMPDBIDX,KMPDTOT,KMPDSS,KMPDLUSS
"RTN","KMPDTP5",77,0)
 ;
"RTN","KMPDTP5",78,0)
 S GBLREF=$$GLOBAL(.KMPDSRCH) Q:GBLREF=""
"RTN","KMPDTP5",79,0)
 S XREF=$P(GBLREF,U),KMPDLUSS=$P(GBLREF,U,2)
"RTN","KMPDTP5",80,0)
 ;
"RTN","KMPDTP5",81,0)
 S DOT=1,QUEUED=$D(ZTQUEUED)
"RTN","KMPDTP5",82,0)
 ; set up HOUR() array
"RTN","KMPDTP5",83,0)
 F I=1:1:24 S:$P(KMPDATE(1),",",I)'="" HOUR(+$P(KMPDATE(1),",",I))=""
"RTN","KMPDTP5",84,0)
 Q:'$D(HOUR)
"RTN","KMPDTP5",85,0)
 S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)+.9
"RTN","KMPDTP5",86,0)
 Q:'DATE!('END)
"RTN","KMPDTP5",87,0)
 ;
"RTN","KMPDTP5",88,0)
 K ^TMP($J)
"RTN","KMPDTP5",89,0)
 F KMPDSS="ORWCV","ORWCV-FT" D
"RTN","KMPDTP5",90,0)
 .; reset date and end for each pass
"RTN","KMPDTP5",91,0)
 .S DATE=$P(KMPDATE(0),U)-.1,END=$P(KMPDATE(0),U,2)+.9
"RTN","KMPDTP5",92,0)
 .S KMPDTOT(KMPDSS)=0
"RTN","KMPDTP5",93,0)
 .I KMPDLUSS="" S GBL=$NA(^KMPD(8973.2,XREF,KMPDSS))
"RTN","KMPDTP5",94,0)
 .I KMPDLUSS'="" S GBL=$NA(^KMPD(8973.2,XREF,KMPDSS,KMPDLUSS))
"RTN","KMPDTP5",95,0)
 .F  S DATE=$O(@GBL@(DATE)) Q:'DATE!(DATE>END)  D
"RTN","KMPDTP5",96,0)
 ..; determine hour
"RTN","KMPDTP5",97,0)
 ..S HR=+$E($P(DATE,".",2),1,2)
"RTN","KMPDTP5",98,0)
 ..S HR=$S(HR="":0,HR=24:0,1:HR)
"RTN","KMPDTP5",99,0)
 ..; quit if not in HOUR() array
"RTN","KMPDTP5",100,0)
 ..Q:'$D(HOUR(HR))
"RTN","KMPDTP5",101,0)
 ..; hour & second
"RTN","KMPDTP5",102,0)
 ..S TIME=$E($P(DATE,".",2),1,6) Q:'TIME
"RTN","KMPDTP5",103,0)
 ..; insert colon (:) between hour & second
"RTN","KMPDTP5",104,0)
 ..S TIME=$E(TIME,1,2)_":"_$E(TIME,3,4)_":"_$E(TIME,5,6)
"RTN","KMPDTP5",105,0)
 ..; date without time
"RTN","KMPDTP5",106,0)
 ..S DATE1=$P(DATE,".")
"RTN","KMPDTP5",107,0)
 ..S IEN=0
"RTN","KMPDTP5",108,0)
 ..F  S IEN=$O(@GBL@(DATE,IEN)) Q:'IEN  D 
"RTN","KMPDTP5",109,0)
 ...Q:'$D(^KMPD(8973.2,IEN,0))  S DATA=^(0) Q:DATA=""
"RTN","KMPDTP5",110,0)
 ...S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP5",111,0)
 ...S KMPDBIDX=$P(DATA,U)
"RTN","KMPDTP5",112,0)
 ...S ^TMP($J,"DATA",DATE,TIME,KMPDBIDX,KMPDSS)=DATA
"RTN","KMPDTP5",113,0)
 ...S $P(^TMP($J,"DATA",DATE,TIME,KMPDBIDX,KMPDSS),U,5)=$P($G(^VA(200,+$P(DATA,U,5),0)),U)
"RTN","KMPDTP5",114,0)
 ...S KMPDTOT(KMPDSS)=KMPDTOT(KMPDSS)+1
"RTN","KMPDTP5",115,0)
 ;
"RTN","KMPDTP5",116,0)
 Q
"RTN","KMPDTP5",117,0)
 ;
"RTN","KMPDTP5",118,0)
PRINT ;-- print data
"RTN","KMPDTP5",119,0)
 ;
"RTN","KMPDTP5",120,0)
 U IO
"RTN","KMPDTP5",121,0)
 N KMPDCNAM,KMPDUNAM,KMPDIP,KMPDSET,KMPDPDT,KMPDTOTD
"RTN","KMPDTP5",122,0)
 D HDR
"RTN","KMPDTP5",123,0)
 Q:'$D(^TMP($J))
"RTN","KMPDTP5",124,0)
 N CONT,DATE,I,TOTAL
"RTN","KMPDTP5",125,0)
 S DATE="",CONT=1,TOTAL=0
"RTN","KMPDTP5",126,0)
 F  S DATE=$O(^TMP($J,"DATA",DATE)) Q:'DATE  D  Q:'CONT
"RTN","KMPDTP5",127,0)
 .S HR=""
"RTN","KMPDTP5",128,0)
 .F  S HR=$O(^TMP($J,"DATA",DATE,HR)) Q:HR=""  D  Q:'CONT
"RTN","KMPDTP5",129,0)
 ..I $Y>(IOSL-4) D  Q:'CONT
"RTN","KMPDTP5",130,0)
 ...D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT
"RTN","KMPDTP5",131,0)
 ...D HDR ;W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP5",132,0)
 ..S KMPDBIDX=""
"RTN","KMPDTP5",133,0)
 ..F  S KMPDBIDX=$O(^TMP($J,"DATA",DATE,HR,KMPDBIDX)) Q:KMPDBIDX=""  D
"RTN","KMPDTP5",134,0)
 ...S KMPDSS="",KMPDSET=1,KMPDTOTD=0
"RTN","KMPDTP5",135,0)
 ...F  S KMPDSS=$O(^TMP($J,"DATA",DATE,HR,KMPDBIDX,KMPDSS)) Q:KMPDSS=""  D
"RTN","KMPDTP5",136,0)
 ....S DATA=$G(^TMP($J,"DATA",DATE,HR,KMPDBIDX,KMPDSS))
"RTN","KMPDTP5",137,0)
 ....I KMPDSET D
"RTN","KMPDTP5",138,0)
 .....S KMPDUNAM=$S($P(DATA,U,5)]"":$E($P(DATA,U,5),1,23),1:"N/A")
"RTN","KMPDTP5",139,0)
 .....S KMPDCNAM=$S($P(DATA,U,6)]"":$E($P(DATA,U,6),1,23),1:"N/A")
"RTN","KMPDTP5",140,0)
 .....S KMPDIP=$S($P(DATA,U,9)]"":$P(DATA,U,9),1:"N/A")
"RTN","KMPDTP5",141,0)
 .....S KMPDSET=0
"RTN","KMPDTP5",142,0)
 ....S KMPDTOTD=KMPDTOTD+$P(DATA,U,4)
"RTN","KMPDTP5",143,0)
 ...; W COMBINED DATA
"RTN","KMPDTP5",144,0)
 ...Q:KMPDTOTD<KMPDTSEC
"RTN","KMPDTP5",145,0)
 ...S TOTAL=TOTAL+1
"RTN","KMPDTP5",146,0)
 ...S KMPDPDT=$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP5",147,0)
 ...W !,$P(KMPDPDT,"@",2),?10,KMPDUNAM,?35,KMPDCNAM,?60,KMPDIP,?76,KMPDTOTD
"RTN","KMPDTP5",148,0)
 K ^TMP($J)
"RTN","KMPDTP5",149,0)
 ;
"RTN","KMPDTP5",150,0)
 I TOTAL W !!?3,"Total Count: ",$J($FN(TOTAL,",",0),$L(TOTAL)+1)
"RTN","KMPDTP5",151,0)
 ;
"RTN","KMPDTP5",152,0)
 ; pause if output to terminal
"RTN","KMPDTP5",153,0)
 I CONT D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP5",154,0)
 ;
"RTN","KMPDTP5",155,0)
 Q
"RTN","KMPDTP5",156,0)
 ;
"RTN","KMPDTP5",157,0)
HDR ;-- print header
"RTN","KMPDTP5",158,0)
 W @IOF
"RTN","KMPDTP5",159,0)
 N HRS
"RTN","KMPDTP5",160,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP5",161,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP5",162,0)
 S HRS=$E(KMPDATE(1),1,$L(KMPDATE(1))-1)
"RTN","KMPDTP5",163,0)
 S X=$G(KMPDATE(0)),X=$P(X,U,3)_" - Hours: "_HRS
"RTN","KMPDTP5",164,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP5",165,0)
 I +KMPDSRCH<4 D
"RTN","KMPDTP5",166,0)
 .S X=$P($G(KMPDSRCH),U,2)_": "
"RTN","KMPDTP5",167,0)
 .S X=X_$P($G(KMPDSRCH(1)),U,$S((+$G(KMPDSRCH))=1:2,1:1))
"RTN","KMPDTP5",168,0)
 .W !?(80-$L(X)\2),X
"RTN","KMPDTP5",169,0)
 S X="Threshold: "_$G(KMPDTSEC)_" seconds"
"RTN","KMPDTP5",170,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP5",171,0)
 W !
"RTN","KMPDTP5",172,0)
 W !,"Time",?10,"User Name",?35,"Client Name",?60,"IP Address",?76,"TTL"
"RTN","KMPDTP5",173,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP5",174,0)
 ;
"RTN","KMPDTP5",175,0)
 Q
"RTN","KMPDTP5",176,0)
 ;
"RTN","KMPDTP5",177,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP5",178,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP5",179,0)
 D ^%ZISC
"RTN","KMPDTP5",180,0)
 K KMPDATE,KMPDSRCH,KMPDTSEC,KMPDTTL
"RTN","KMPDTP5",181,0)
 Q
"RTN","KMPDTP5",182,0)
 ;
"RTN","KMPDTP5",183,0)
GLOBAL(KMPDSRCH) ;-- extrinsic function
"RTN","KMPDTP5",184,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTP5",185,0)
 ; KMPDSRCH... see above
"RTN","KMPDTP5",186,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTP5",187,0)
 Q:'$G(KMPDSRCH) ""
"RTN","KMPDTP5",188,0)
 N RETURN,TYPE
"RTN","KMPDTP5",189,0)
 S RETURN=""
"RTN","KMPDTP5",190,0)
 S TYPE=+$G(KMPDSRCH),KMPDSRCH(1)=$G(KMPDSRCH(1))
"RTN","KMPDTP5",191,0)
 Q:'TYPE ""
"RTN","KMPDTP5",192,0)
 I TYPE<4 Q:KMPDSRCH(1)="" ""
"RTN","KMPDTP5",193,0)
 ; any occurrence
"RTN","KMPDTP5",194,0)
 I TYPE=4 S RETURN="ASSDTTM^"
"RTN","KMPDTP5",195,0)
 ; username
"RTN","KMPDTP5",196,0)
 I TYPE=1 S RETURN="ASSNPDTTM^"_+$P(KMPDSRCH(1),U)
"RTN","KMPDTP5",197,0)
 ; client name
"RTN","KMPDTP5",198,0)
 I TYPE=2 S RETURN="ASSCLDTTM^"_KMPDSRCH(1)
"RTN","KMPDTP5",199,0)
 ; ip address
"RTN","KMPDTP5",200,0)
 I TYPE=3 S RETURN="ASSIPDTTM^"_KMPDSRCH(1)
"RTN","KMPDTP5",201,0)
 Q RETURN
"RTN","KMPDTP5",202,0)
 ;
"RTN","KMPDTP6")
0^8^B34394776
"RTN","KMPDTP6",1,0)
KMPDTP6 ;OAK/RAK/JML - CP Timing Real-Time Threshold Alert ;9/1/2015
"RTN","KMPDTP6",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP6",3,0)
 ;
"RTN","KMPDTP6",4,0)
EN ;-- entry point
"RTN","KMPDTP6",5,0)
 ;
"RTN","KMPDTP6",6,0)
 N I,KMPDHOUR,KMPDSRCH,KMPDTSEC,KMPDTTL,POP,X,Y
"RTN","KMPDTP6",7,0)
 N ZTDESC,ZTRTN,ZTRSAVE,ZTSK,%ZIS
"RTN","KMPDTP6",8,0)
 ;
"RTN","KMPDTP6",9,0)
 S KMPDTTL=" Coversheet Time-to-Load Alert Report > Real-Time "
"RTN","KMPDTP6",10,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP6",11,0)
 W !
"RTN","KMPDTP6",12,0)
 W !?7,"This alerting report shows the particular coversheet loads"
"RTN","KMPDTP6",13,0)
 W !?7,"that have excessive time-to-load values for TODAY (Real-Time)."
"RTN","KMPDTP6",14,0)
 W !?7,"This report will search for a particular person, a particular"
"RTN","KMPDTP6",15,0)
 W !?7,"client name or IP address."
"RTN","KMPDTP6",16,0)
 W !?7,"Foreground and background times are combined."
"RTN","KMPDTP6",17,0)
 W !
"RTN","KMPDTP6",18,0)
 ;
"RTN","KMPDTP6",19,0)
 ; if no data
"RTN","KMPDTP6",20,0)
 I ($O(^KMPTMP("KMPDT","ORWCV",""))="")&($O(^KMPTMP("KMPDT","ORWCV-FT",""))="") D  Q
"RTN","KMPDTP6",21,0)
 .W !!?7,"*** There is currently no data in global ^KMPTMP(""KMPDT"", ***"
"RTN","KMPDTP6",22,0)
 ;
"RTN","KMPDTP6",23,0)
 ; hours
"RTN","KMPDTP6",24,0)
 S KMPDHOUR=$$RLTMHR^KMPDTU11(0,1,1)
"RTN","KMPDTP6",25,0)
 Q:KMPDHOUR=""
"RTN","KMPDTP6",26,0)
 ;
"RTN","KMPDTP6",27,0)
 ; time-to-load threshold seconds
"RTN","KMPDTP6",28,0)
 S KMPDTSEC=$$TTLSEC^KMPDTU10
"RTN","KMPDTP6",29,0)
 Q:'KMPDTSEC
"RTN","KMPDTP6",30,0)
 ;
"RTN","KMPDTP6",31,0)
 ; search by
"RTN","KMPDTP6",32,0)
 D SRCHBY^KMPDTU10(.KMPDSRCH,"ORWCV",1)
"RTN","KMPDTP6",33,0)
 Q:'KMPDSRCH
"RTN","KMPDTP6",34,0)
 ;
"RTN","KMPDTP6",35,0)
 ; select output device.
"RTN","KMPDTP6",36,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP6",37,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP6",38,0)
 ; if queued.
"RTN","KMPDTP6",39,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP6",40,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP6",41,0)
 .S ZTRTN="EN1^KMPDTP6"
"RTN","KMPDTP6",42,0)
 .F I="KMPDHOUR","KMPDSRCH","KMPDTSEC","KMPDTTL" S ZTSAVE(I)=""
"RTN","KMPDTP6",43,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP6",44,0)
 .D EXIT
"RTN","KMPDTP6",45,0)
 ;
"RTN","KMPDTP6",46,0)
 ; if output to terminal display message.
"RTN","KMPDTP6",47,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP6",48,0)
 D EN1
"RTN","KMPDTP6",49,0)
 ;
"RTN","KMPDTP6",50,0)
 Q
"RTN","KMPDTP6",51,0)
 ;
"RTN","KMPDTP6",52,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP6",53,0)
 Q:'$D(KMPDHOUR)
"RTN","KMPDTP6",54,0)
 Q:'$D(KMPDSRCH)
"RTN","KMPDTP6",55,0)
 Q:'$G(KMPDTSEC)
"RTN","KMPDTP6",56,0)
 Q:$G(KMPDTTL)=""
"RTN","KMPDTP6",57,0)
 ;
"RTN","KMPDTP6",58,0)
 K ^TMP($J)
"RTN","KMPDTP6",59,0)
 D DATA,PRINT,EXIT
"RTN","KMPDTP6",60,0)
 K ^TMP($J)
"RTN","KMPDTP6",61,0)
 Q
"RTN","KMPDTP6",62,0)
 ;
"RTN","KMPDTP6",63,0)
DATA ;-- compile data
"RTN","KMPDTP6",64,0)
 ;
"RTN","KMPDTP6",65,0)
 Q:'$D(KMPDHOUR)
"RTN","KMPDTP6",66,0)
 Q:'$G(KMPDSRCH)
"RTN","KMPDTP6",67,0)
 Q:'$G(KMPDTSEC)
"RTN","KMPDTP6",68,0)
 ;
"RTN","KMPDTP6",69,0)
 N DATA,DATA1,DATE,DATE1,DELTA,DOT,HOUR,HR,I,QUEUED,TIME
"RTN","KMPDTP6",70,0)
 N KMPDSS,DELTA,TOTDELT,KMPDUZ
"RTN","KMPDTP6",71,0)
 ;
"RTN","KMPDTP6",72,0)
 S DOT=1,QUEUED=$D(ZTQUEUED)
"RTN","KMPDTP6",73,0)
 ; set up HOUR() array
"RTN","KMPDTP6",74,0)
 F I=1:1:24 S:$P(KMPDHOUR,",",I)'="" HOUR(+$P(KMPDHOUR,",",I))=""
"RTN","KMPDTP6",75,0)
 Q:'$D(HOUR)
"RTN","KMPDTP6",76,0)
 ; collect raw data
"RTN","KMPDTP6",77,0)
 F KMPDSS="ORWCV","ORWCV-FT" D
"RTN","KMPDTP6",78,0)
 .S I=""
"RTN","KMPDTP6",79,0)
 .F  S I=$O(^KMPTMP("KMPDT",KMPDSS,I)) Q:I=""  S DATA=^(I) I DATA]"" D
"RTN","KMPDTP6",80,0)
 ..S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP6",81,0)
 ..; start/end date/time in fileman format
"RTN","KMPDTP6",82,0)
 ..S DATE(1)=$$HTFM^XLFDT($P(DATA,U)),DATE(2)=$$HTFM^XLFDT($P(DATA,U,2))
"RTN","KMPDTP6",83,0)
 ..Q:'DATE(1)!('DATE(2))
"RTN","KMPDTP6",84,0)
 ..S ^TMP($J,"DATA",I,KMPDSS)=DATA
"RTN","KMPDTP6",85,0)
 ; collate raw data - combined FG and BG
"RTN","KMPDTP6",86,0)
 S I=""
"RTN","KMPDTP6",87,0)
 F  S I=$O(^TMP($J,"DATA",I)) Q:I=""  D
"RTN","KMPDTP6",88,0)
 .S (KMPDSS,DATA1,KMPDUZ)=""
"RTN","KMPDTP6",89,0)
 .S (DELTA,TOTDELT)=0
"RTN","KMPDTP6",90,0)
 .F KMPDSS="ORWCV","ORWCV-FT" D
"RTN","KMPDTP6",91,0)
 ..S DATA=$G(^TMP($J,"DATA",I,KMPDSS))
"RTN","KMPDTP6",92,0)
 ..Q:DATA=""
"RTN","KMPDTP6",93,0)
 ..S KMPDUZ=$P(DATA,U,3)
"RTN","KMPDTP6",94,0)
 ..S DATE(1)=$$HTFM^XLFDT($P(DATA,U)),DATE(2)=$$HTFM^XLFDT($P(DATA,U,2))
"RTN","KMPDTP6",95,0)
 ..Q:'DATE(1)!('DATE(2))
"RTN","KMPDTP6",96,0)
 ..; get delta
"RTN","KMPDTP6",97,0)
 ..S DELTA=$$HDIFF^XLFDT($P(DATA,U,2),$P(DATA,U),2)
"RTN","KMPDTP6",98,0)
 ..; determine hour
"RTN","KMPDTP6",99,0)
 ..S HR=+$E($P(DATE(1),".",2),1,2)
"RTN","KMPDTP6",100,0)
 ..S HR=$S(HR="":0,HR=24:0,1:HR)
"RTN","KMPDTP6",101,0)
 ..; quit if not in HOUR() array
"RTN","KMPDTP6",102,0)
 ..Q:'$D(HOUR(HR))
"RTN","KMPDTP6",103,0)
 ..; date without time
"RTN","KMPDTP6",104,0)
 ..S DATE1=$P(DATE(1),".") Q:'DATE1
"RTN","KMPDTP6",105,0)
 ..S TOTDELT=$G(TOTDELT)+DELTA
"RTN","KMPDTP6",106,0)
 ..S DATA1="^^^"_TOTDELT_"^"_$P(DATA,U,3)_"^"_$P(DATA,U,4)_"^^^"_$P($P(I," ",2),"-")
"RTN","KMPDTP6",107,0)
 .Q:DATA1=""
"RTN","KMPDTP6",108,0)
 .Q:'$$MATCH
"RTN","KMPDTP6",109,0)
 .Q:$P(DATA1,"^",4)<KMPDTSEC
"RTN","KMPDTP6",110,0)
 .; hour & second
"RTN","KMPDTP6",111,0)
 .S TIME=$P(DATE(1),".",2) Q:'TIME
"RTN","KMPDTP6",112,0)
 .; insert colon (:) between hour & second
"RTN","KMPDTP6",113,0)
 .S TIME=$E(TIME,1,2)_":"_$E(TIME,3,4)_":"_$E(TIME,5,6)
"RTN","KMPDTP6",114,0)
 .S:$P(TIME,":",2)="" $P(TIME,":",2)="00"
"RTN","KMPDTP6",115,0)
 .S:$P(TIME,":",3)="" $P(TIME,":",3)="00"
"RTN","KMPDTP6",116,0)
 .S ^TMP($J,"RPT",DATE1,TIME)=DATA1
"RTN","KMPDTP6",117,0)
 .; new person - external format
"RTN","KMPDTP6",118,0)
 .S $P(^TMP($J,"RPT",DATE1,TIME),U,5)=$P($G(^VA(200,KMPDUZ,0)),U)
"RTN","KMPDTP6",119,0)
 Q
"RTN","KMPDTP6",120,0)
 ;
"RTN","KMPDTP6",121,0)
PRINT ;-- print data
"RTN","KMPDTP6",122,0)
 ;
"RTN","KMPDTP6",123,0)
 U IO
"RTN","KMPDTP6",124,0)
 D HDR
"RTN","KMPDTP6",125,0)
 Q:'$D(^TMP($J))
"RTN","KMPDTP6",126,0)
 N CONT,DATE,I,TOTAL
"RTN","KMPDTP6",127,0)
 S DATE="",CONT=1,TOTAL=0
"RTN","KMPDTP6",128,0)
 F  S DATE=$O(^TMP($J,"RPT",DATE)) Q:'DATE  D  Q:'CONT
"RTN","KMPDTP6",129,0)
 .W !,$$FMTE^XLFDT(DATE,2) S HR=""
"RTN","KMPDTP6",130,0)
 .F  S HR=$O(^TMP($J,"RPT",DATE,HR)) Q:HR=""  D  Q:'CONT
"RTN","KMPDTP6",131,0)
 ..I $Y>(IOSL-4) D  Q:'CONT
"RTN","KMPDTP6",132,0)
 ...D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT
"RTN","KMPDTP6",133,0)
 ...D HDR W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP6",134,0)
 ..W ?10,HR
"RTN","KMPDTP6",135,0)
 ..S DATA=^TMP($J,"RPT",DATE,HR),TOTAL=TOTAL+1
"RTN","KMPDTP6",136,0)
 ..; user name
"RTN","KMPDTP6",137,0)
 ..W ?20,$S($P(DATA,U,5)]"":$E($P(DATA,U,5),1,19),1:"N/A")
"RTN","KMPDTP6",138,0)
 ..; client name
"RTN","KMPDTP6",139,0)
 ..W ?39,$S($P(DATA,U,6)]"":$E($P(DATA,U,6),1,19),1:"N/A")
"RTN","KMPDTP6",140,0)
 ..; ip address
"RTN","KMPDTP6",141,0)
 ..W ?60,$S($P(DATA,U,9)]"":$P(DATA,U,9),1:"N/A")
"RTN","KMPDTP6",142,0)
 ..; server delta
"RTN","KMPDTP6",143,0)
 ..W ?75,$P(DATA,U,4)
"RTN","KMPDTP6",144,0)
 ..W ! W:$E($O(^TMP($J,"RPT",DATE,HR)),1,2)'=$E(HR,1,2) !
"RTN","KMPDTP6",145,0)
 ;
"RTN","KMPDTP6",146,0)
 I CONT&(TOTAL) W !!?3,"Total Count: ",$J($FN(TOTAL,",",0),$L(TOTAL)+1)
"RTN","KMPDTP6",147,0)
 ;
"RTN","KMPDTP6",148,0)
 ; pause if output to terminal
"RTN","KMPDTP6",149,0)
 I CONT D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP6",150,0)
 ;
"RTN","KMPDTP6",151,0)
 Q
"RTN","KMPDTP6",152,0)
 ;
"RTN","KMPDTP6",153,0)
HDR ;-- print header
"RTN","KMPDTP6",154,0)
 W @IOF
"RTN","KMPDTP6",155,0)
 N HRS
"RTN","KMPDTP6",156,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP6",157,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP6",158,0)
 S KMPDHOUR=$G(KMPDHOUR)
"RTN","KMPDTP6",159,0)
 S HRS=$E(KMPDHOUR,1,$L(KMPDHOUR)-1)
"RTN","KMPDTP6",160,0)
 S X="Hour(s): "_HRS
"RTN","KMPDTP6",161,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP6",162,0)
 I +KMPDSRCH<4 D
"RTN","KMPDTP6",163,0)
 .S X=$P($G(KMPDSRCH),U,2)_": "
"RTN","KMPDTP6",164,0)
 .S X=X_$P($G(KMPDSRCH(1)),U,$S((+$G(KMPDSRCH))=1:2,1:1))
"RTN","KMPDTP6",165,0)
 .W !?(80-$L(X)\2),X
"RTN","KMPDTP6",166,0)
 S X="Threshold: "_$G(KMPDTSEC)_" seconds"
"RTN","KMPDTP6",167,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP6",168,0)
 W !
"RTN","KMPDTP6",169,0)
 W !,"Date",?10,"Time",?20,"User Name",?39,"Client Name",?60,"IP Address",?75,"TTL"
"RTN","KMPDTP6",170,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP6",171,0)
 ;
"RTN","KMPDTP6",172,0)
 Q
"RTN","KMPDTP6",173,0)
 ;
"RTN","KMPDTP6",174,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP6",175,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP6",176,0)
 D ^%ZISC
"RTN","KMPDTP6",177,0)
 K KMPDHOUR,KMPDSRCH,KMPDTSEC,KMPDTTL
"RTN","KMPDTP6",178,0)
 Q
"RTN","KMPDTP6",179,0)
 ;
"RTN","KMPDTP6",180,0)
MATCH() ;-- extrinsic function - check for matches
"RTN","KMPDTP6",181,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTP6",182,0)
 ; Return: 1 - match found
"RTN","KMPDTP6",183,0)
 ;         0 - no match found
"RTN","KMPDTP6",184,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTP6",185,0)
 Q:'$G(KMPDSRCH) 0
"RTN","KMPDTP6",186,0)
 ; any occurrence
"RTN","KMPDTP6",187,0)
 Q:(+KMPDSRCH)=4 1
"RTN","KMPDTP6",188,0)
 ; if not 'any occurrence' then must have kmpdsrch(1) node
"RTN","KMPDTP6",189,0)
 Q:'$D(KMPDSRCH(1)) 0
"RTN","KMPDTP6",190,0)
 ; if not 'any occurrence' must have DATA1 to determine match
"RTN","KMPDTP6",191,0)
 Q:$G(DATA1)=""
"RTN","KMPDTP6",192,0)
 ; user name
"RTN","KMPDTP6",193,0)
 Q:(+KMPDSRCH)=1&($P(DATA1,U,5)'=$P(KMPDSRCH(1),U)) 0
"RTN","KMPDTP6",194,0)
 ; client name
"RTN","KMPDTP6",195,0)
 Q:(+KMPDSRCH)=2&($P(DATA1,U,6)'=$P(KMPDSRCH(1),U)) 0
"RTN","KMPDTP6",196,0)
 ; ip address
"RTN","KMPDTP6",197,0)
 Q:(+KMPDSRCH)=3&($P(DATA1,U,9)'=$P(KMPDSRCH(1),U)) 0
"RTN","KMPDTP6",198,0)
 Q 1
"RTN","KMPDTP7")
0^9^B26694983
"RTN","KMPDTP7",1,0)
KMPDTP7 ;OAK/RAK/JML - Real-Time CP Timing Hourly Time-to-Load ;9/1/2015
"RTN","KMPDTP7",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTP7",3,0)
 ;
"RTN","KMPDTP7",4,0)
EN ;-- entry point
"RTN","KMPDTP7",5,0)
 N KMPDTTL,POP,X,Y,ZTDESC,ZTRTN,ZTRSAVE,ZTSK,%ZIS
"RTN","KMPDTP7",6,0)
 S KMPDTTL=" Real-Time Hourly Coversheet Time-to-Load (TTL) Report "
"RTN","KMPDTP7",7,0)
 D HDR^KMPDUTL4(KMPDTTL)
"RTN","KMPDTP7",8,0)
 W !
"RTN","KMPDTP7",9,0)
 W !?7,"This report displays the hourly average time-to-load value"
"RTN","KMPDTP7",10,0)
 W !?7,"for the coversheet at this site over 24 hours."
"RTN","KMPDTP7",11,0)
 W !
"RTN","KMPDTP7",12,0)
 ;
"RTN","KMPDTP7",13,0)
 ; if no data
"RTN","KMPDTP7",14,0)
 I ($O(^KMPTMP("KMPDT","ORWCV",""))="")&($O(^KMPTMP("KMPDT","ORWCV-FT",""))="") D  Q
"RTN","KMPDTP7",15,0)
 .W !!?7,"*** There is currently no data in global ^KMPTMP(""KMPDT"", ***"
"RTN","KMPDTP7",16,0)
 ;
"RTN","KMPDTP7",17,0)
 ; select output device.
"RTN","KMPDTP7",18,0)
 S %ZIS="Q",%ZIS("A")="Device: ",%ZIS("B")="HOME"
"RTN","KMPDTP7",19,0)
 W ! D ^%ZIS I POP W !,"No action taken." Q
"RTN","KMPDTP7",20,0)
 ; if queued.
"RTN","KMPDTP7",21,0)
 I $D(IO("Q")) K IO("Q") D  Q
"RTN","KMPDTP7",22,0)
 .S ZTDESC=KMPDTTL
"RTN","KMPDTP7",23,0)
 .S ZTRTN="EN1^KMPDTP7"
"RTN","KMPDTP7",24,0)
 .S ZTSAVE("KMPDTTL")=""
"RTN","KMPDTP7",25,0)
 .D ^%ZTLOAD W:$G(ZTSK) !,"Task #",ZTSK
"RTN","KMPDTP7",26,0)
 .D EXIT
"RTN","KMPDTP7",27,0)
 ;
"RTN","KMPDTP7",28,0)
 ; if output to terminal display message.
"RTN","KMPDTP7",29,0)
 W:$E(IOST,1,2)="C-" !,"Compiling timing stats..."
"RTN","KMPDTP7",30,0)
 D EN1
"RTN","KMPDTP7",31,0)
 ;
"RTN","KMPDTP7",32,0)
 Q
"RTN","KMPDTP7",33,0)
 ;
"RTN","KMPDTP7",34,0)
EN1 ;-- entry point from taskman
"RTN","KMPDTP7",35,0)
 K ^TMP($J)
"RTN","KMPDTP7",36,0)
 D DATA,PRINT,EXIT
"RTN","KMPDTP7",37,0)
 K ^TMP($J)
"RTN","KMPDTP7",38,0)
 Q
"RTN","KMPDTP7",39,0)
 ;
"RTN","KMPDTP7",40,0)
DATA ;-- compile data
"RTN","KMPDTP7",41,0)
 ;
"RTN","KMPDTP7",42,0)
 N DATA,DATA1,DATE,DATE1,DELTA,DOT,HOURS,HR,I,QUEUED,TIME
"RTN","KMPDTP7",43,0)
 N KMPDSS,DELTA,TOTDELT,HRDATE,COMPLETE
"RTN","KMPDTP7",44,0)
 ;
"RTN","KMPDTP7",45,0)
 S DOT=1,QUEUED=$D(ZTQUEUED),DATE=$$DT^XLFDT
"RTN","KMPDTP7",46,0)
 ; array with hours
"RTN","KMPDTP7",47,0)
 S HOURS=$$RLTMHR^KMPDTU11(1,0) Q:HOURS=""
"RTN","KMPDTP7",48,0)
 F I=1:1 Q:$P(HOURS,",",I)=""  S ^TMP($J,"RPT",DATE,$P(HOURS,",",I))=""
"RTN","KMPDTP7",49,0)
 ; collect raw data
"RTN","KMPDTP7",50,0)
 F KMPDSS="ORWCV","ORWCV-FT" D
"RTN","KMPDTP7",51,0)
 .S I=""
"RTN","KMPDTP7",52,0)
 .F  S I=$O(^KMPTMP("KMPDT",KMPDSS,I)) Q:I=""  S DATA=^(I) I DATA]"" D
"RTN","KMPDTP7",53,0)
 ..S DOT=DOT+1 W:'QUEUED&('(DOT#1000)) "."
"RTN","KMPDTP7",54,0)
 ..; start/end date/time in fileman format
"RTN","KMPDTP7",55,0)
 ..S DATE(1)=$$HTFM^XLFDT($P(DATA,U)),DATE(2)=$$HTFM^XLFDT($P(DATA,U,2))
"RTN","KMPDTP7",56,0)
 ..Q:'DATE(1)!('DATE(2))
"RTN","KMPDTP7",57,0)
 ..S ^TMP($J,"DATA",I,KMPDSS)=DATA
"RTN","KMPDTP7",58,0)
 ; collate raw data - combined FG and BG 
"RTN","KMPDTP7",59,0)
 S I=""
"RTN","KMPDTP7",60,0)
 F  S I=$O(^TMP($J,"DATA",I)) Q:I=""  D
"RTN","KMPDTP7",61,0)
 .S (KMPDSS,DATA1,HRDATE,TOTDELT)=""
"RTN","KMPDTP7",62,0)
 .S DELTA=0,COMPLETE=1
"RTN","KMPDTP7",63,0)
 .F KMPDSS="ORWCV","ORWCV-FT" D
"RTN","KMPDTP7",64,0)
 ..S DATA=$G(^TMP($J,"DATA",I,KMPDSS))
"RTN","KMPDTP7",65,0)
 ..Q:DATA=""
"RTN","KMPDTP7",66,0)
 ..S DATE(1)=$$HTFM^XLFDT($P(DATA,U)),DATE(2)=$$HTFM^XLFDT($P(DATA,U,2))
"RTN","KMPDTP7",67,0)
 ..I DATE(1)>1 S HRDATE=DATE(1)
"RTN","KMPDTP7",68,0)
 ..I (DATE(1)<0)!(DATE(2)<0) S COMPLETE=0 Q
"RTN","KMPDTP7",69,0)
 ..; get delta
"RTN","KMPDTP7",70,0)
 ..S DELTA=$$HDIFF^XLFDT($P(DATA,U,2),$P(DATA,U),2)
"RTN","KMPDTP7",71,0)
 ..; date without time
"RTN","KMPDTP7",72,0)
 ..S DATE1=$P(DATE(1),".") I 'DATE1 Q
"RTN","KMPDTP7",73,0)
 ..S TOTDELT=$G(TOTDELT)+DELTA
"RTN","KMPDTP7",74,0)
 .; determine hour
"RTN","KMPDTP7",75,0)
 .Q:TOTDELT=""
"RTN","KMPDTP7",76,0)
 .Q:HRDATE=""
"RTN","KMPDTP7",77,0)
 .S HR=+$E($P(HRDATE,".",2),1,2)
"RTN","KMPDTP7",78,0)
 .S HR=$S(HR="":0,HR=24:0,1:HR)
"RTN","KMPDTP7",79,0)
 .; calculate min/max/tot/count
"RTN","KMPDTP7",80,0)
 .; if delta
"RTN","KMPDTP7",81,0)
 .I COMPLETE D 
"RTN","KMPDTP7",82,0)
 ..; minimum delta
"RTN","KMPDTP7",83,0)
 ..I $P(^TMP($J,"RPT",DATE,HR),U,2)=""!(TOTDELT<$P(^TMP($J,"RPT",DATE,HR),U,2)) D 
"RTN","KMPDTP7",84,0)
 ...S $P(^TMP($J,"RPT",DATE,HR),U,2)=TOTDELT
"RTN","KMPDTP7",85,0)
 ..; maximum delta
"RTN","KMPDTP7",86,0)
 ..I TOTDELT>$P(^TMP($J,"RPT",DATE,HR),U,3) S $P(^TMP($J,"RPT",DATE,HR),U,3)=TOTDELT
"RTN","KMPDTP7",87,0)
 ..; total delta
"RTN","KMPDTP7",88,0)
 ..S $P(^TMP($J,"RPT",DATE,HR),U,4)=$P(^TMP($J,"RPT",DATE,HR),U,4)+TOTDELT
"RTN","KMPDTP7",89,0)
 ..; count
"RTN","KMPDTP7",90,0)
 ..S $P(^TMP($J,"RPT",DATE,HR),U,5)=$P(^TMP($J,"RPT",DATE,HR),U,5)+1
"RTN","KMPDTP7",91,0)
 .; if no delta
"RTN","KMPDTP7",92,0)
 .E  S $P(^TMP($J,"RPT",DATE,HR),U,6)=$P(^TMP($J,"RPT",DATE,HR),U,6)+1
"RTN","KMPDTP7",93,0)
 ; calculate average
"RTN","KMPDTP7",94,0)
 F HR=1:1 S I=$P(HOURS,",",HR) Q:I=""  I $P(^TMP($J,"RPT",DATE,I),U,5) D 
"RTN","KMPDTP7",95,0)
 .S $P(^TMP($J,"RPT",DATE,I),U)=$P(^TMP($J,"RPT",DATE,I),U,4)/$P(^TMP($J,"RPT",DATE,I),U,5)
"RTN","KMPDTP7",96,0)
 Q
"RTN","KMPDTP7",97,0)
 ;
"RTN","KMPDTP7",98,0)
PRINT ;-- print data
"RTN","KMPDTP7",99,0)
 U IO
"RTN","KMPDTP7",100,0)
 D HDR
"RTN","KMPDTP7",101,0)
 Q:'$D(^TMP($J))
"RTN","KMPDTP7",102,0)
 N CONT,DATE,HR,I,TOTAL
"RTN","KMPDTP7",103,0)
 S DATE="",CONT=1
"RTN","KMPDTP7",104,0)
 F  S DATE=$O(^TMP($J,"RPT",DATE)) Q:'DATE  S HR="" D  Q:'CONT
"RTN","KMPDTP7",105,0)
 .S TOTAL=""
"RTN","KMPDTP7",106,0)
 .W !,$$FMTE^XLFDT(DATE,2)
"RTN","KMPDTP7",107,0)
 .F  S HR=$O(^TMP($J,"RPT",DATE,HR)) Q:HR=""  D  Q:'CONT
"RTN","KMPDTP7",108,0)
 ..; page feed
"RTN","KMPDTP7",109,0)
 ..I $Y>(IOSL-3) D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT  D HDR W !
"RTN","KMPDTP7",110,0)
 ..W ?12," ",$S($L(HR)=1:"0",1:""),HR
"RTN","KMPDTP7",111,0)
 ..S DATA=^TMP($J,"RPT",DATE,HR)
"RTN","KMPDTP7",112,0)
 ..W ?20,$J($FN($P(DATA,U),",",0),10)
"RTN","KMPDTP7",113,0)
 ..W ?34,$J($FN($P(DATA,U,2),",",0),10)
"RTN","KMPDTP7",114,0)
 ..W ?48,$J($FN($P(DATA,U,3),",",0),10)
"RTN","KMPDTP7",115,0)
 ..W ?62,$J($FN($P(DATA,U,5),",",0),10)
"RTN","KMPDTP7",116,0)
 ..W !
"RTN","KMPDTP7",117,0)
 ..S $P(TOTAL,U)=$P(TOTAL,U)+$P(DATA,U,5)
"RTN","KMPDTP7",118,0)
 ..S $P(TOTAL,U,2)=$P(TOTAL,U,2)+$P(DATA,U,6)
"RTN","KMPDTP7",119,0)
 .;
"RTN","KMPDTP7",120,0)
 .; back to DATE level
"RTN","KMPDTP7",121,0)
 .; totals
"RTN","KMPDTP7",122,0)
 .W ?62,"----------",!?62,$J($FN(TOTAL,",",0),10),!
"RTN","KMPDTP7",123,0)
 .W !?12,"Incomplete: ",$J($FN($P(TOTAL,U,2),",",0),$L($P(TOTAL,U,2))+2),!
"RTN","KMPDTP7",124,0)
 .; if another date
"RTN","KMPDTP7",125,0)
 .I $O(^TMP($J,"RPT",DATE)) D CONTINUE^KMPDUTL4("",1,.CONT) Q:'CONT  D HDR W !
"RTN","KMPDTP7",126,0)
 ;
"RTN","KMPDTP7",127,0)
 I CONT D 
"RTN","KMPDTP7",128,0)
 .; legend
"RTN","KMPDTP7",129,0)
 .W !!?2,"CV  = Coversheet",!?2,"TTL = Time-to-Load"
"RTN","KMPDTP7",130,0)
 .; pause if output to terminal
"RTN","KMPDTP7",131,0)
 .D CONTINUE^KMPDUTL4("Press RETURN to continue",1)
"RTN","KMPDTP7",132,0)
 ;
"RTN","KMPDTP7",133,0)
 Q
"RTN","KMPDTP7",134,0)
 ;
"RTN","KMPDTP7",135,0)
HDR ;-- print header
"RTN","KMPDTP7",136,0)
 W @IOF
"RTN","KMPDTP7",137,0)
 S X=$G(KMPDTTL)
"RTN","KMPDTP7",138,0)
 W !?(80-$L(X)\2),X
"RTN","KMPDTP7",139,0)
 S X=$$FMTE^XLFDT($$DT^XLFDT)
"RTN","KMPDTP7",140,0)
 W !?(80-$L(X)\2),X,?61,"Printed: ",$$FMTE^XLFDT(DT,2)
"RTN","KMPDTP7",141,0)
 W !
"RTN","KMPDTP7",142,0)
 W !?20,"|---------------Seconds---------------|"
"RTN","KMPDTP7",143,0)
 W !,"Date",?12,"Hour",?20,"TTL Average",?34,"TTL Minimum",?48,"TTL Maximum",?62,"# of CV Loads"
"RTN","KMPDTP7",144,0)
 W !,$$REPEAT^XLFSTR("-",IOM)
"RTN","KMPDTP7",145,0)
 ;
"RTN","KMPDTP7",146,0)
 Q
"RTN","KMPDTP7",147,0)
 ;
"RTN","KMPDTP7",148,0)
EXIT ;-- cleanup on exit
"RTN","KMPDTP7",149,0)
 S:$D(ZTQUEUED) ZTREQ="@"
"RTN","KMPDTP7",150,0)
 D ^%ZISC
"RTN","KMPDTP7",151,0)
 K KMPDTTL
"RTN","KMPDTP7",152,0)
 Q
"RTN","KMPDTU10")
0^1^B33489133
"RTN","KMPDTU10",1,0)
KMPDTU10 ;OAK/RAK/JML - CP Tools Timing Utility ;9/1/2015
"RTN","KMPDTU10",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTU10",3,0)
 ;
"RTN","KMPDTU10",4,0)
DATERNG(KMPDSS,KMPDEF,KMPDRES,KMPDDT) ; timing date range for a subscript
"RTN","KMPDTU10",5,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",6,0)
 ; KMPDSS.... KMPTMP SUBSCRIPT
"RTN","KMPDTU10",7,0)
 ; KMPDEF.... (optional) default number of days to track - if not defined
"RTN","KMPDTU10",8,0)
 ;            will default to seven (7)
"RTN","KMPDTU10",9,0)
 ; KMPDRES(). Results of api in format:
"RTN","KMPDTU10",10,0)
 ;             KMPDRES(0)=piece 1 - Start Date Internal
"RTN","KMPDTU10",11,0)
 ;                        piece 2 - End Date Internal
"RTN","KMPDTU10",12,0)
 ;                        piece 3 - Start Date External
"RTN","KMPDTU10",13,0)
 ;                        piece 4 - End Date External
"RTN","KMPDTU10",14,0)
 ;                 Null ("") is returned if no results are found
"RTN","KMPDTU10",15,0)
 ;             KMPDRES(1)=NumberOfDays
"RTN","KMPDTU10",16,0)
 ; KMPDDT.... Date only (do not ask for days)
"RTN","KMPDTU10",17,0)
 ;             0 - both date & days
"RTN","KMPDTU10",18,0)
 ;             1 - date only - do not ask for days
"RTN","KMPDTU10",19,0)
 ;
"RTN","KMPDTU10",20,0)
 ; This api determines the date range for KMPDSS (ex: ORWCV for CPRS 
"RTN","KMPDTU10",21,0)
 ; cover sheets).  It asks the user the ending date.  After the ending
"RTN","KMPDTU10",22,0)
 ; date is entered, the user is prompted for the number of days to track.
"RTN","KMPDTU10",23,0)
 ; Results are returned in the KMPDRES() array as described above.
"RTN","KMPDTU10",24,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",25,0)
 K KMPDRES S KMPDRES(0)="",KMPDRES(1)=""
"RTN","KMPDTU10",26,0)
 Q:$G(KMPDSS)=""
"RTN","KMPDTU10",27,0)
 S:'$G(KMPDEF) KMPDEF=7
"RTN","KMPDTU10",28,0)
 S KMPDDT=+$G(KMPDDT)
"RTN","KMPDTU10",29,0)
 N COUNT,DATE,DAYS,END,SESS,START
"RTN","KMPDTU10",30,0)
 ; start & end dates
"RTN","KMPDTU10",31,0)
 S DATE=$$DATERNG1(KMPDSS,.SESS)
"RTN","KMPDTU10",32,0)
 Q:'$D(SESS)
"RTN","KMPDTU10",33,0)
 S START=$P(DATE,U),END=$P(DATE,U,2)
"RTN","KMPDTU10",34,0)
 Q:'START!('END)
"RTN","KMPDTU10",35,0)
 ; get end date
"RTN","KMPDTU10",36,0)
 K DIR S DIR(0)="DO^"_START_":"_END_":E"
"RTN","KMPDTU10",37,0)
 S DIR("A")="Select End Date",DIR("B")=$$FMTE^XLFDT(END)
"RTN","KMPDTU10",38,0)
 W ! D ^DIR Q:'Y  S END=Y
"RTN","KMPDTU10",39,0)
 ; if date only
"RTN","KMPDTU10",40,0)
 I KMPDDT D  Q
"RTN","KMPDTU10",41,0)
 .S KMPDRES(0)=END_U_END_U_$$FMTE^XLFDT(END)_U_$$FMTE^XLFDT(END)
"RTN","KMPDTU10",42,0)
 ; determine number of days
"RTN","KMPDTU10",43,0)
 S DATE=END+.1,START=END,DAYS=0
"RTN","KMPDTU10",44,0)
 F  S DATE=$O(SESS(DATE),-1) Q:'DATE   S START=DATE,DAYS=DAYS+1
"RTN","KMPDTU10",45,0)
 Q:'DAYS
"RTN","KMPDTU10",46,0)
 ; days to go back
"RTN","KMPDTU10",47,0)
 K DIR S DIR(0)="NO^1:"_DAYS_":O"
"RTN","KMPDTU10",48,0)
 S DIR("A")="Select # of Days Review"
"RTN","KMPDTU10",49,0)
 S DIR("B")=$S(DAYS'<KMPDEF:KMPDEF,1:DAYS)
"RTN","KMPDTU10",50,0)
 D ^DIR Q:Y=""!(Y="^")
"RTN","KMPDTU10",51,0)
 ; determine start date
"RTN","KMPDTU10",52,0)
 S START=END
"RTN","KMPDTU10",53,0)
 I Y'=1 S COUNT=1 D 
"RTN","KMPDTU10",54,0)
 .F  S START=$O(SESS(START),-1) Q:'START  S COUNT=COUNT+1 Q:COUNT'<Y
"RTN","KMPDTU10",55,0)
 S KMPDRES(0)=START_U_END_U_$$FMTE^XLFDT(START)_U_$$FMTE^XLFDT(END)
"RTN","KMPDTU10",56,0)
 S KMPDRES(1)=Y
"RTN","KMPDTU10",57,0)
 ;
"RTN","KMPDTU10",58,0)
 Q
"RTN","KMPDTU10",59,0)
 ;
"RTN","KMPDTU10",60,0)
DATERNG1(KMPDSS,KMPDSESS) ;-- extrinsic function
"RTN","KMPDTU10",61,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",62,0)
 ; KMPDSS.... KMPTMP SUBSCRIPT
"RTN","KMPDTU10",63,0)
 ; KMPDSESS() Array of dates: 
"RTN","KMPDTU10",64,0)
 ;             KMPDSESS(3030801)=""
"RTN","KMPDTU10",65,0)
 ;             KMPDSESS(3030802)=""
"RTN","KMPDTU10",66,0)
 ;             ...
"RTN","KMPDTU10",67,0)
 ;
"RTN","KMPDTU10",68,0)
 ; Return: StartDate^EndDate - in internal fileman format
"RTN","KMPDTU10",69,0)
 ;         "" - no results
"RTN","KMPDTU10",70,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",71,0)
 Q:$G(KMPDSS)="" ""
"RTN","KMPDTU10",72,0)
 N DATE,END,START
"RTN","KMPDTU10",73,0)
 ; determine most recent date
"RTN","KMPDTU10",74,0)
 F DATE=0:0 S DATE=$O(^KMPD(8973.2,"ASVDTSS",KMPDSS,DATE)) Q:'DATE  D 
"RTN","KMPDTU10",75,0)
 .; set array of session dates
"RTN","KMPDTU10",76,0)
 .S KMPDSESS(DATE)=""
"RTN","KMPDTU10",77,0)
 Q:'$D(KMPDSESS) ""
"RTN","KMPDTU10",78,0)
 ; set start and end dates according to SESS() array
"RTN","KMPDTU10",79,0)
 S END=$O(KMPDSESS("A"),-1),START=$O(KMPDSESS(""))
"RTN","KMPDTU10",80,0)
 Q START_"^"_END
"RTN","KMPDTU10",81,0)
 ;
"RTN","KMPDTU10",82,0)
DTTMRNG(KMPDSS,KMPDEF,KMPDRES,KMPDEFH) ; timing date/time range for a subscript
"RTN","KMPDTU10",83,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",84,0)
 ; KMPDSS.... KMPTMP SUBSCRIPT
"RTN","KMPDTU10",85,0)
 ; KMPDEF.... (optional) default number of days to track - if not defined
"RTN","KMPDTU10",86,0)
 ;            will default to seven (7)
"RTN","KMPDTU10",87,0)
 ; KMPDRES(). Results of api in format:
"RTN","KMPDTU10",88,0)
 ;             KMPDRES(0)=piece 1 - Start Date Internal
"RTN","KMPDTU10",89,0)
 ;                        piece 2 - End Date Internal
"RTN","KMPDTU10",90,0)
 ;                        piece 3 - Start Date External
"RTN","KMPDTU10",91,0)
 ;                        piece 4 - End Date External
"RTN","KMPDTU10",92,0)
 ;                 Null ("") is returned if no results are found
"RTN","KMPDTU10",93,0)
 ;             KMPDRES(1)=NumberOfDays
"RTN","KMPDTU10",94,0)
 ; KMPDEFH.. (optional) Default hour.
"RTN","KMPDTU10",95,0)
 ;
"RTN","KMPDTU10",96,0)
 ; This api determines the date range for KMPDSS (ex: ORWCV for CPRS 
"RTN","KMPDTU10",97,0)
 ; cover sheets).  It asks the user the ending date.  After the ending
"RTN","KMPDTU10",98,0)
 ; date is entered, the user is prompted for the number of hours to
"RTN","KMPDTU10",99,0)
 ; review. Results are returned in the KMPDRES() array as described 
"RTN","KMPDTU10",100,0)
 ; above.
"RTN","KMPDTU10",101,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",102,0)
 K KMPDRES S KMPDRES(0)="",KMPDRES(1)=""
"RTN","KMPDTU10",103,0)
 Q:$G(KMPDSS)=""
"RTN","KMPDTU10",104,0)
 S:'$G(KMPDEF) KMPDEF=7
"RTN","KMPDTU10",105,0)
 S KMPDEFH=$G(KMPDEFH)
"RTN","KMPDTU10",106,0)
 N COUNT,DATE,DAYS,END,SESS,START
"RTN","KMPDTU10",107,0)
 ; get date
"RTN","KMPDTU10",108,0)
 D DATERNG(KMPDSS,1,.KMPDRES,1)
"RTN","KMPDTU10",109,0)
 Q:'$D(KMPDRES)
"RTN","KMPDTU10",110,0)
 Q:$G(KMPDRES(0))=""
"RTN","KMPDTU10",111,0)
 S KMPDRES(1)=""
"RTN","KMPDTU10",112,0)
 ; determine number of hours
"RTN","KMPDTU10",113,0)
 K DIR S DIR(0)="LO^0:23:O"
"RTN","KMPDTU10",114,0)
 S DIR("A")="Select Hour(s) to Review"
"RTN","KMPDTU10",115,0)
 S:KMPDEFH'="" DIR("B")=KMPDEFH
"RTN","KMPDTU10",116,0)
 D ^DIR Q:Y=""!(Y="^")
"RTN","KMPDTU10",117,0)
 S KMPDRES(1)=Y
"RTN","KMPDTU10",118,0)
 Q
"RTN","KMPDTU10",119,0)
 ;
"RTN","KMPDTU10",120,0)
LISTSEL(KMPDLIST,KMPDSS,KMPDRLTM) ;-- extrinsic function - build list and select entry
"RTN","KMPDTU10",121,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",122,0)
 ; KMPDLIST... 2 - Client Name
"RTN","KMPDTU10",123,0)
 ;             3 - IP Address
"RTN","KMPDTU10",124,0)
 ; KMPDSS..... Field #.07 (KMPTMP SUBSCRIPT)
"RTN","KMPDTU10",125,0)
 ; KMPDRLTM... Real-Time data
"RTN","KMPDTU10",126,0)
 ;              0 - not real-time
"RTN","KMPDTU10",127,0)
 ;              1 - real-time
"RTN","KMPDTU10",128,0)
 ;
"RTN","KMPDTU10",129,0)
 ; Return: "" - no selection 
"RTN","KMPDTU10",130,0)
 ;         Name - free text
"RTN","KMPDTU10",131,0)
 ;
"RTN","KMPDTU10",132,0)
 ; This function will build a list of entries from file #8973.2 
"RTN","KMPDTU10",133,0)
 ;(CP TIMING) and ask the user to select an entry.
"RTN","KMPDTU10",134,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",135,0)
 S KMPDLIST=+$G(KMPDLIST)
"RTN","KMPDTU10",136,0)
 Q:KMPDLIST<2!(KMPDLIST>3) ""
"RTN","KMPDTU10",137,0)
 Q:$G(KMPDSS)="" ""
"RTN","KMPDTU10",138,0)
 S KMPDRLTM=+$G(KMPDRLTM)
"RTN","KMPDTU10",139,0)
 ;
"RTN","KMPDTU10",140,0)
 N DIC,I,X,XREF,Y
"RTN","KMPDTU10",141,0)
 ;
"RTN","KMPDTU10",142,0)
 W " ==> building list..."
"RTN","KMPDTU10",143,0)
 K ^TMP("KMPDTU10-LIST",$J)
"RTN","KMPDTU10",144,0)
 D @$S('KMPDRLTM:"LISTSELH",1:"LISTSELR")
"RTN","KMPDTU10",145,0)
 ; quit if no data
"RTN","KMPDTU10",146,0)
 Q:'$D(^TMP("KMPDTU10-LIST",$J))
"RTN","KMPDTU10",147,0)
 S DIC="^TMP(""KMPDTU10-LIST"",$J,"
"RTN","KMPDTU10",148,0)
 S DIC(0)="AEQZ"
"RTN","KMPDTU10",149,0)
 S DIC("A")=$S(KMPDLIST=2:"Select Client",1:"IP Address")_": "
"RTN","KMPDTU10",150,0)
 D ^DIC
"RTN","KMPDTU10",151,0)
 K ^TMP("KMPDTU10-LIST",$J)
"RTN","KMPDTU10",152,0)
 Q $S(Y<1:"",1:$P(Y,"^",2))
"RTN","KMPDTU10",153,0)
 ;
"RTN","KMPDTU10",154,0)
LISTSELH ;-- historical data list
"RTN","KMPDTU10",155,0)
 N I,CNT,DOT,XREF
"RTN","KMPDTU10",156,0)
 ; determine xref to build list
"RTN","KMPDTU10",157,0)
 S XREF=$S(KMPDLIST=2:"ASSCLDTTM",KMPDLIST=3:"ASSIPDTTM",1:"")
"RTN","KMPDTU10",158,0)
 W !,"XREF: ",XREF
"RTN","KMPDTU10",159,0)
 S I="",(CNT,DOT)=0
"RTN","KMPDTU10",160,0)
 F  S I=$O(^KMPD(8973.2,XREF,KMPDSS,I)) Q:I=""  D 
"RTN","KMPDTU10",161,0)
 .S CNT=CNT+1,DOT=DOT+1 W:'(DOT#100) "."
"RTN","KMPDTU10",162,0)
 .S ^TMP("KMPDTU10-LIST",$J,CNT,0)=I
"RTN","KMPDTU10",163,0)
 .S ^TMP("KMPDTU10-LIST",$J,"B",I,CNT)=""
"RTN","KMPDTU10",164,0)
 S ^TMP("KMPDTU10-LIST",$J,0)=$S(KMPDLIST=2:"Client Name",1:"IP Address")_"^1.01^"_CNT_"^"_CNT
"RTN","KMPDTU10",165,0)
 Q
"RTN","KMPDTU10",166,0)
 ;
"RTN","KMPDTU10",167,0)
LISTSELR ;-- real-time data list
"RTN","KMPDTU10",168,0)
 N I,CNT,DATA,DOT,X
"RTN","KMPDTU10",169,0)
 S I="",(CNT,DOT)=0
"RTN","KMPDTU10",170,0)
 F  S I=$O(^KMPTMP("KMPDT",KMPDSS,I)) Q:I=""  S DATA=^(I) I DATA]"" D 
"RTN","KMPDTU10",171,0)
 .S X=$S(KMPDLIST=2:$P(DATA,U,4),1:$P($P(I," ",2),"-"))
"RTN","KMPDTU10",172,0)
 .Q:$O(^TMP("KMPDTU10-LIST",$J,"B",X,0))
"RTN","KMPDTU10",173,0)
 .S CNT=CNT+1,DOT=DOT+1 W:'(DOT#100) "."
"RTN","KMPDTU10",174,0)
 .S ^TMP("KMPDTU10-LIST",$J,CNT,0)=X
"RTN","KMPDTU10",175,0)
 .S ^TMP("KMPDTU10-LIST",$J,"B",X,CNT)=""
"RTN","KMPDTU10",176,0)
 S ^TMP("KMPDTU10-LIST",$J,0)=$S(KMPDLIST=2:"Client Name",1:"IP Address")_"^1.01^"_CNT_"^"_CNT
"RTN","KMPDTU10",177,0)
 Q
"RTN","KMPDTU10",178,0)
 ;
"RTN","KMPDTU10",179,0)
SRCHBY(KMPDRES,KMPDSS,KMPDRLTM) ;-- api - search by criteria
"RTN","KMPDTU10",180,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",181,0)
 ; KMPDRES().. Array (passed by reference) containing results in format:
"RTN","KMPDTU10",182,0)
 ;             KMPDRES    = "" - no valid selection
"RTN","KMPDTU10",183,0)
 ;             KMPDRES    = 1^User Name
"RTN","KMPDTU10",184,0)
 ;             KMPDRES(1) = DUZ^NewPersonName
"RTN","KMPDTU10",185,0)
 ;             KMPDRES    = 2^Client Name
"RTN","KMPDTU10",186,0)
 ;             KMPDRES(1) = ClientName (free text)
"RTN","KMPDTU10",187,0)
 ;             KMPDRES    = 3^IP Address
"RTN","KMPDTU10",188,0)
 ;             KMPDRES(1) = IPAddress
"RTN","KMPDTU10",189,0)
 ;             KMPDRES    = 4^Any Occurrence
"RTN","KMPDTU10",190,0)
 ; KMPDSS..... KMPTMP SUBSCIPT - field #.07 from file #8973.2 (CP TIMING)
"RTN","KMPDTU10",191,0)
 ; KMPDRLTM... Real-Time data
"RTN","KMPDTU10",192,0)
 ;              0 - not real-time
"RTN","KMPDTU10",193,0)
 ;              1 - real-time
"RTN","KMPDTU10",194,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",195,0)
 K KMPDRES S KMPDRES=""
"RTN","KMPDTU10",196,0)
 Q:$G(KMPDSS)=""
"RTN","KMPDTU10",197,0)
 S KMPDRLTM=+$G(KMPDRLTM)
"RTN","KMPDTU10",198,0)
 N DIC,DIR,X,Y
"RTN","KMPDTU10",199,0)
 S DIR(0)="SO^1:User Name;2:Client Name;3:IP Address;4:All of the Above"
"RTN","KMPDTU10",200,0)
 S DIR("A")="Search By"
"RTN","KMPDTU10",201,0)
 S DIR("B")=4
"RTN","KMPDTU10",202,0)
 D ^DIR
"RTN","KMPDTU10",203,0)
 Q:'Y
"RTN","KMPDTU10",204,0)
 S KMPDRES=Y_"^"_Y(0)
"RTN","KMPDTU10",205,0)
 ; quit if 'all of the above'
"RTN","KMPDTU10",206,0)
 Q:(+KMPDRES)=4
"RTN","KMPDTU10",207,0)
 ;
"RTN","KMPDTU10",208,0)
 ; user name
"RTN","KMPDTU10",209,0)
 I (+KMPDRES)=1 D  Q
"RTN","KMPDTU10",210,0)
 .S DIC=200,DIC(0)="AEMQZ",DIC("A")="Select User: "
"RTN","KMPDTU10",211,0)
 .D ^DIC
"RTN","KMPDTU10",212,0)
 .I Y<1 S KMPDRES="" Q
"RTN","KMPDTU10",213,0)
 .S KMPDRES(1)=Y
"RTN","KMPDTU10",214,0)
 ;
"RTN","KMPDTU10",215,0)
 ; client name
"RTN","KMPDTU10",216,0)
 I (+KMPDRES)=2 D  Q
"RTN","KMPDTU10",217,0)
 .S KMPDRES(1)=$$LISTSEL(+KMPDRES,KMPDSS,KMPDRLTM)
"RTN","KMPDTU10",218,0)
 .S:KMPDRES(1)="" KMPDRES=""
"RTN","KMPDTU10",219,0)
 ;
"RTN","KMPDTU10",220,0)
 ; ip address
"RTN","KMPDTU10",221,0)
 I (+KMPDRES)=3 D  Q
"RTN","KMPDTU10",222,0)
 .S KMPDRES(1)=$$LISTSEL(+KMPDRES,KMPDSS,KMPDRLTM)
"RTN","KMPDTU10",223,0)
 .S:KMPDRES(1)="" KMPDRES=""
"RTN","KMPDTU10",224,0)
 ;
"RTN","KMPDTU10",225,0)
 Q
"RTN","KMPDTU10",226,0)
 ;
"RTN","KMPDTU10",227,0)
TTLSEC() ;-- extrinsic function - time-to-load threshold seconds
"RTN","KMPDTU10",228,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",229,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU10",230,0)
 N DIR,X,Y
"RTN","KMPDTU10",231,0)
 S DIR(0)="NAO^1"
"RTN","KMPDTU10",232,0)
 S DIR("A")="Select Time-To-Load Threshold (Seconds): "
"RTN","KMPDTU10",233,0)
 S DIR("B")=60
"RTN","KMPDTU10",234,0)
 D ^DIR
"RTN","KMPDTU10",235,0)
 Q $S(Y:Y,1:"")
"RTN","KMPDTU11")
0^13^B4891419
"RTN","KMPDTU11",1,0)
KMPDTU11 ;OAK/RAK/JML - CP Tools Timing Utility ;9/1/2015
"RTN","KMPDTU11",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDTU11",3,0)
 ;
"RTN","KMPDTU11",4,0)
RLTMHR(KMPDQIET,KMPDASK,KMPDEF) ;-- extrinsic function - real time hours
"RTN","KMPDTU11",5,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU11",6,0)
 ; KMPDQIET... Display output
"RTN","KMPDTU11",7,0)
 ;              0 - display output (not quiet)
"RTN","KMPDTU11",8,0)
 ;              1 - do not display output (quiet)
"RTN","KMPDTU11",9,0)
 ; KMPDASK.... Ask user to select hours
"RTN","KMPDTU11",10,0)
 ;              0 - do not ask user to select
"RTN","KMPDTU11",11,0)
 ;              1 - ask user to select
"RTN","KMPDTU11",12,0)
 ; KMPDEF..... Default
"RTN","KMPDTU11",13,0)
 ;              0 - do not use default
"RTN","KMPDTU11",14,0)
 ;              1 - use time range as default
"RTN","KMPDTU11",15,0)
 ;
"RTN","KMPDTU11",16,0)
 ; Return: List of hours (ie, 1,2,5,6,7...)
"RTN","KMPDTU11",17,0)
 ;         "" - no selection made
"RTN","KMPDTU11",18,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDTU11",19,0)
 ;
"RTN","KMPDTU11",20,0)
 S KMPDQIET=+$G(KMPDQIET),KMPDASK=+$G(KMPDASK),KMPDEF=+$G(KMPDEF)
"RTN","KMPDTU11",21,0)
 N DATA,DIR,DOT,HOURS,HR,I,QUEUED,X,Y,KMPDSUB
"RTN","KMPDTU11",22,0)
 W:'KMPDQIET !," ==> building Hours list..."
"RTN","KMPDTU11",23,0)
 F KMPDSUB="ORWCV","ORWCV-FT" D
"RTN","KMPDTU11",24,0)
 .S I="",DOT=0
"RTN","KMPDTU11",25,0)
 .F  S I=$O(^KMPTMP("KMPDT",KMPDSUB,I)) Q:I=""  S DATA=^(I) I DATA]"" D 
"RTN","KMPDTU11",26,0)
 ..S DOT=DOT+1 W:'(DOT#1000)&('KMPDQIET) "."
"RTN","KMPDTU11",27,0)
 ..; change $h to fileman format and get hour
"RTN","KMPDTU11",28,0)
 ..S HR=$E($P($$HTFM^XLFDT($P(DATA,U)),".",2),1,2) S:HR>23 HR="0"
"RTN","KMPDTU11",29,0)
 ..; create HOURS() array
"RTN","KMPDTU11",30,0)
 ..S:HR'="" HOURS(+HR)=""
"RTN","KMPDTU11",31,0)
 ;
"RTN","KMPDTU11",32,0)
 ; if no HOURS() array
"RTN","KMPDTU11",33,0)
 Q:'$D(HOURS) ""
"RTN","KMPDTU11",34,0)
 ;
"RTN","KMPDTU11",35,0)
 ; do not ask user to select hours
"RTN","KMPDTU11",36,0)
 I 'KMPDASK D  Q X
"RTN","KMPDTU11",37,0)
 .S (I,X)="" F  S I=$O(HOURS(I)) Q:I=""  S X=X_I_","
"RTN","KMPDTU11",38,0)
 ;
"RTN","KMPDTU11",39,0)
 ; ask user to select hour(s)
"RTN","KMPDTU11",40,0)
 S DIR(0)="LO^"_$O(HOURS(""))_":"_$O(HOURS("A"),-1)
"RTN","KMPDTU11",41,0)
 S DIR("A")="Select Hour(s)"
"RTN","KMPDTU11",42,0)
 S:KMPDEF DIR("B")=$O(HOURS(""))_"-"_$O(HOURS("A"),-1)
"RTN","KMPDTU11",43,0)
 W ! D ^DIR
"RTN","KMPDTU11",44,0)
 Q $S(Y=""!(Y="^"):"",1:$G(Y(0)))
"RTN","KMPDTU11",45,0)
 ;
"RTN","KMPDTU11",46,0)
TIMING(KMPDSS,KMPDNODE,KMPDST,KMPDHTM,KMPDUZ,KMPDCL) ;-- start/stop timing stats
"RTN","KMPDTU11",47,0)
 ;--------------------------------------------------------------------
"RTN","KMPDTU11",48,0)
 ; KMPDSS... subscript (free text)
"RTN","KMPDTU11",49,0)
 ; KMPDNODE. node name (free text)
"RTN","KMPDTU11",50,0)
 ; KMPDST... start/stop
"RTN","KMPDTU11",51,0)
 ;            1 - start
"RTN","KMPDTU11",52,0)
 ;            2 - stop
"RTN","KMPDTU11",53,0)
 ; KMPDHTM.. (optional - if not defined the current $h will be used)
"RTN","KMPDTU11",54,0)
 ;           time in $h format
"RTN","KMPDTU11",55,0)
 ; KMPDUZ... (optional -if not defined the current duz will be used)
"RTN","KMPDTU11",56,0)
 ;           user duz
"RTN","KMPDTU11",57,0)
 ; KMPDCL... (optional - if not defined the current IO("CLNM")) will be used)
"RTN","KMPDTU11",58,0)
 ;           client name (free text)
"RTN","KMPDTU11",59,0)
 ; 
"RTN","KMPDTU11",60,0)
 ;--------------------------------------------------------------------
"RTN","KMPDTU11",61,0)
 ; quit if timing stats not turned on
"RTN","KMPDTU11",62,0)
 Q:'$G(^KMPTMP("KMPD-CPRS"))
"RTN","KMPDTU11",63,0)
 ; quit if no subscript
"RTN","KMPDTU11",64,0)
 Q:$G(KMPDSS)=""
"RTN","KMPDTU11",65,0)
 ; quit if no node
"RTN","KMPDTU11",66,0)
 Q:$G(KMPDNODE)=""
"RTN","KMPDTU11",67,0)
 ; start/stop
"RTN","KMPDTU11",68,0)
 S KMPDST=+$G(KMPDST)
"RTN","KMPDTU11",69,0)
 Q:KMPDST<1!(KMPDST>2)
"RTN","KMPDTU11",70,0)
 S:'$G(KMPDHTM) KMPDHTM=$H
"RTN","KMPDTU11",71,0)
 S:'$G(KMPDUZ) KMPDUZ=$G(DUZ)
"RTN","KMPDTU11",72,0)
 S:$G(KMPDCL)="" KMPDCL=$G(IO("CLNM"))
"RTN","KMPDTU11",73,0)
 ;
"RTN","KMPDTU11",74,0)
 ; start timing
"RTN","KMPDTU11",75,0)
 S:KMPDST=1 ^KMPTMP("KMPDT",KMPDSS,KMPDNODE)=KMPDHTM_"^^"_KMPDUZ_"^"_KMPDCL
"RTN","KMPDTU11",76,0)
 ; stop timing
"RTN","KMPDTU11",77,0)
 S:KMPDST=2 $P(^KMPTMP("KMPDT",KMPDSS,KMPDNODE),"^",2)=KMPDHTM
"RTN","KMPDTU11",78,0)
 ;
"RTN","KMPDTU11",79,0)
 Q
"RTN","KMPDUTL")
0^12^B11972661
"RTN","KMPDUTL",1,0)
KMPDUTL ;OAK/RAK - CM Tools Utility ;9/1/2015
"RTN","KMPDUTL",2,0)
 ;;3.0;Capacity Management Tools;**3**;Jan 15, 2013;Build 42
"RTN","KMPDUTL",3,0)
 ;
"RTN","KMPDUTL",4,0)
QUEBKG(KMPDOPT,KMPDTIME,KMPDFREQ,KMPDDEL) ;-- queue background job
"RTN","KMPDUTL",5,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDUTL",6,0)
 ; KMPDOPT.... Option name to queue (free text name in .01 field of 
"RTN","KMPDUTL",7,0)
 ;                                   OPTION file)
"RTN","KMPDUTL",8,0)
 ; KMPDTIME... Date/time to queue option (T@1400, etc)
"RTN","KMPDUTL",9,0)
 ; KMPDFREQ... Scheduling frequency (1D, etc)
"RTN","KMPDUTL",10,0)
 ; KMPDDEL.... Delete option if it already exists in file 19.2
"RTN","KMPDUTL",11,0)
 ;              0 - do not delete (quit if already scheduled)
"RTN","KMPDUTL",12,0)
 ;              1 - delete if already in file 19.2
"RTN","KMPDUTL",13,0)
 ;
"RTN","KMPDUTL",14,0)
 ; This API will queue an option from file #19 (OPTION) to run in file
"RTN","KMPDUTL",15,0)
 ; 19.2 (OPTION SCHEDULE).
"RTN","KMPDUTL",16,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDUTL",17,0)
 Q:$G(KMPDOPT)=""
"RTN","KMPDUTL",18,0)
 Q:$G(KMPDTIME)=""
"RTN","KMPDUTL",19,0)
 Q:$G(KMPDFREQ)=""
"RTN","KMPDUTL",20,0)
 S KMPDDEL=+$G(KMPDDEL)
"RTN","KMPDUTL",21,0)
 N DA,DIFROM,DIK,FDA,ERROR,IEN,IEN1,IENZ,TEXT,X,Y,Z
"RTN","KMPDUTL",22,0)
 ; Newing DIFROM will force reschedule when installing from KIDS
"RTN","KMPDUTL",23,0)
 S:'$G(DT) DT=$$DT^XLFDT
"RTN","KMPDUTL",24,0)
 ; change to internal format
"RTN","KMPDUTL",25,0)
 D FMDTI^KMPDU(.Z,KMPDTIME)
"RTN","KMPDUTL",26,0)
 Q:Z(0)="^"!(Z(0)="")
"RTN","KMPDUTL",27,0)
 S KMPDTIME=Z(0) K Z
"RTN","KMPDUTL",28,0)
 S TEXT=KMPDOPT
"RTN","KMPDUTL",29,0)
 ; quit if not in file 19
"RTN","KMPDUTL",30,0)
 S IEN=$O(^DIC(19,"B",TEXT,0)) Q:'IEN
"RTN","KMPDUTL",31,0)
 S IEN1=$O(^DIC(19.2,"B",IEN,0))
"RTN","KMPDUTL",32,0)
 ; quit if already in file 19.2 and not KMPDDEL
"RTN","KMPDUTL",33,0)
 Q:IEN1&('KMPDDEL)
"RTN","KMPDUTL",34,0)
 ; delete if in file 19.2
"RTN","KMPDUTL",35,0)
 I IEN1 S DIK="^DIC(19.2,",DA=IEN1 D ^DIK
"RTN","KMPDUTL",36,0)
 ; add entry
"RTN","KMPDUTL",37,0)
 S FDA($J,19.2,"+1,",.01)=IEN
"RTN","KMPDUTL",38,0)
 ; queued to run at what time
"RTN","KMPDUTL",39,0)
 S FDA($J,19.2,"+1,",2)=KMPDTIME
"RTN","KMPDUTL",40,0)
 ; rescheduling frequency.
"RTN","KMPDUTL",41,0)
 S FDA($J,19.2,"+1,",6)=KMPDFREQ
"RTN","KMPDUTL",42,0)
 D UPDATE^DIE("","FDA($J)",.IENZ,"ERROR")
"RTN","KMPDUTL",43,0)
 I $D(ERROR) D MSG^DIALOG("W","",60,10,"ERROR")
"RTN","KMPDUTL",44,0)
 S IEN1=$O(^DIC(19.2,"B",IEN,0))
"RTN","KMPDUTL",45,0)
 I '$G(^DIC(19.2,+IEN1,1)) D 
"RTN","KMPDUTL",46,0)
 .D MES^XPDUTL("     ERROR - Not able to reschedule "_KMPDOPT)
"RTN","KMPDUTL",47,0)
 .D MES^XPDUTL("     Use 'Schedule/Unschedule Options' [XUTM SCHEDULE] to reschedule.")
"RTN","KMPDUTL",48,0)
 ;
"RTN","KMPDUTL",49,0)
 Q
"RTN","KMPDUTL",50,0)
 ;
"RTN","KMPDUTL",51,0)
VERSION() ;-- extrinsic - return current version.
"RTN","KMPDUTL",52,0)
 Q $P($T(+2^KMPDUTL),";",3)_"^"_$P($T(+2^KMPDUTL),";",5)
"RTN","KMPDUTL",53,0)
 ;
"RTN","KMPDUTL",54,0)
VRSNGET(KMPDAPPL) ;-- extrinsic function - get version^patches
"RTN","KMPDUTL",55,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDUTL",56,0)
 ; KMPDAPPL... application:
"RTN","KMPDUTL",57,0)
 ;              0 - CM Tools
"RTN","KMPDUTL",58,0)
 ;              1 - SAGG
"RTN","KMPDUTL",59,0)
 ;              2 - RUM
"RTN","KMPDUTL",60,0)
 ;
"RTN","KMPDUTL",61,0)
 ; Return: Version^Patch^VersionInstallDate^PatchInstallDate
"RTN","KMPDUTL",62,0)
 ;         null = no application
"RTN","KMPDUTL",63,0)
 ;-----------------------------------------------------------------------
"RTN","KMPDUTL",64,0)
 ;
"RTN","KMPDUTL",65,0)
 Q:$G(KMPDAPPL)="" ""
"RTN","KMPDUTL",66,0)
 Q:KMPDAPPL<0!(KMPDAPPL>2) ""
"RTN","KMPDUTL",67,0)
 ;
"RTN","KMPDUTL",68,0)
 N DATA,VERSION S VERSION=""
"RTN","KMPDUTL",69,0)
 ;
"RTN","KMPDUTL",70,0)
 ; cm tools
"RTN","KMPDUTL",71,0)
 I KMPDAPPL=0 D 
"RTN","KMPDUTL",72,0)
 .S DATA=$G(^KMPD(8973,1,KMPDAPPL))
"RTN","KMPDUTL",73,0)
 .S VERSION=$P(DATA,U,2)_U_$P(DATA,U,4)_U_$P(DATA,U,3)_U_$P(DATA,U,5)
"RTN","KMPDUTL",74,0)
 ;
"RTN","KMPDUTL",75,0)
 ; all other applications
"RTN","KMPDUTL",76,0)
 E  D 
"RTN","KMPDUTL",77,0)
 .S DATA=$G(^KMPD(8973,1,KMPDAPPL))
"RTN","KMPDUTL",78,0)
 .S VERSION=$P(DATA,U)_U_$P(DATA,U,3)_U_$P(DATA,U,2)_U_$P(DATA,U,4)
"RTN","KMPDUTL",79,0)
 ;
"RTN","KMPDUTL",80,0)
 Q VERSION
"RTN","KMPDUTL",81,0)
 ;
"RTN","KMPDUTL",82,0)
PTCHINFO ; -- patch information: routine name ^ current version ^ current patch(es)
"RTN","KMPDUTL",83,0)
 ;;KMPDBD01^3.0^**3**
"RTN","KMPDUTL",84,0)
 ;;KMPDECH^3.0^
"RTN","KMPDUTL",85,0)
 ;;KMPDHU01^3.0^
"RTN","KMPDUTL",86,0)
 ;;KMPDHU02^3.0
"RTN","KMPDUTL",87,0)
 ;;KMPDHU03^3.0
"RTN","KMPDUTL",88,0)
 ;;KMPDHUA^3.0
"RTN","KMPDUTL",89,0)
 ;;KMPDPOST^3.0^
"RTN","KMPDUTL",90,0)
 ;;KMPDSS^3.0^
"RTN","KMPDUTL",91,0)
 ;;KMPDSS1^3.0^
"RTN","KMPDUTL",92,0)
 ;;KMPDSSD^3.0^
"RTN","KMPDUTL",93,0)
 ;;KMPDSSD1^3.0^
"RTN","KMPDUTL",94,0)
 ;;KMPDSSR^3.0^
"RTN","KMPDUTL",95,0)
 ;;KMPDSSS^3.0^**3**
"RTN","KMPDUTL",96,0)
 ;;KMPDTM^3.0^**3**
"RTN","KMPDUTL",97,0)
 ;;KMPDTP1^3.0^**3**
"RTN","KMPDUTL",98,0)
 ;;KMPDTP2^3.0^**3**
"RTN","KMPDUTL",99,0)
 ;;KMPDTP3^3.0^**3**
"RTN","KMPDUTL",100,0)
 ;;KMPDTP4^3.0^**3**
"RTN","KMPDUTL",101,0)
 ;;KMPDTP5^3.0^**3**
"RTN","KMPDUTL",102,0)
 ;;KMPDTP6^3.0^**3**
"RTN","KMPDUTL",103,0)
 ;;KMPDTP7^3.0^**3**
"RTN","KMPDUTL",104,0)
 ;;KMPDTU01^3.0^
"RTN","KMPDUTL",105,0)
 ;;KMPDTU02^3.0^
"RTN","KMPDUTL",106,0)
 ;;KMPDTU10^3.0^**3**
"RTN","KMPDUTL",107,0)
 ;;KMPDTU11^3.0^**3**
"RTN","KMPDUTL",108,0)
 ;;KMPDU^3.0^
"RTN","KMPDUTL",109,0)
 ;;KMPDU1^3.0^
"RTN","KMPDUTL",110,0)
 ;;KMPDU2^3.0^
"RTN","KMPDUTL",111,0)
 ;;KMPDU3^3.0^
"RTN","KMPDUTL",112,0)
 ;;KMPDU4^3.0
"RTN","KMPDUTL",113,0)
 ;;KMPDU5^3.0^
"RTN","KMPDUTL",114,0)
 ;;KMPDU11^3.0^
"RTN","KMPDUTL",115,0)
 ;;KMPDUG^3.0^
"RTN","KMPDUTL",116,0)
 ;;KMPDUG1^3.0^
"RTN","KMPDUTL",117,0)
 ;;KMPDUG2^3.0^
"RTN","KMPDUTL",118,0)
 ;;KMPDUGV^3.0^
"RTN","KMPDUTL",119,0)
 ;;KMPDUT^3.0^
"RTN","KMPDUTL",120,0)
 ;;KMPDUT1^3.0^
"RTN","KMPDUTL",121,0)
 ;;KMPDUT2^3.0^
"RTN","KMPDUTL",122,0)
 ;;KMPDUT4^3.0^
"RTN","KMPDUTL",123,0)
 ;;KMPDUT4A^3.0^
"RTN","KMPDUTL",124,0)
 ;;KMPDUT4B^3.0^
"RTN","KMPDUTL",125,0)
 ;;KMPDUT4C^3.0^
"RTN","KMPDUTL",126,0)
 ;;KMPDUT5^3.0^
"RTN","KMPDUTL",127,0)
 ;;KMPDUTL^3.0^**3**
"RTN","KMPDUTL",128,0)
 ;;KMPDUTL1^3.0^
"RTN","KMPDUTL",129,0)
 ;;KMPDUTL2^3.0^
"RTN","KMPDUTL",130,0)
 ;;KMPDUTL3^3.0^
"RTN","KMPDUTL",131,0)
 ;;KMPDUTL4^3.0^
"RTN","KMPDUTL",132,0)
 ;;KMPDUTL5^3.0^
"RTN","KMPDUTL",133,0)
 ;;KMPDUTL6^3.0^
"RTN","KMPDUTL",134,0)
 ;;KMPDUTL7^3.0^
"RTN","KMPDUTL",135,0)
 ;;KMPDUTL8^3.0^
"RTN","KMPDUTL",136,0)
 ;;KMPDRDAT^3.0^**3**
"VER")
8.0^22.0
**INSTALL NAME**
KMPR*2.0*4
"BLD",9458,0)
KMPR*2.0*4^CAPACITY MANAGEMENT - RUM^0^3160711^y
"BLD",9458,4,0)
^9.64PA^^
"BLD",9458,6.3)
41
"BLD",9458,"ABPKG")
n
"BLD",9458,"KRN",0)
^9.67PA^779.2^20
"BLD",9458,"KRN",.4,0)
.4
"BLD",9458,"KRN",.401,0)
.401
"BLD",9458,"KRN",.402,0)
.402
"BLD",9458,"KRN",.403,0)
.403
"BLD",9458,"KRN",.5,0)
.5
"BLD",9458,"KRN",.84,0)
.84
"BLD",9458,"KRN",3.6,0)
3.6
"BLD",9458,"KRN",3.8,0)
3.8
"BLD",9458,"KRN",9.2,0)
9.2
"BLD",9458,"KRN",9.8,0)
9.8
"BLD",9458,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",9458,"KRN",9.8,"NM",1,0)
KMPRUTL^^0^B12482343
"BLD",9458,"KRN",9.8,"NM","B","KMPRUTL",1)

"BLD",9458,"KRN",19,0)
19
"BLD",9458,"KRN",19.1,0)
19.1
"BLD",9458,"KRN",101,0)
101
"BLD",9458,"KRN",409.61,0)
409.61
"BLD",9458,"KRN",771,0)
771
"BLD",9458,"KRN",779.2,0)
779.2
"BLD",9458,"KRN",870,0)
870
"BLD",9458,"KRN",8989.51,0)
8989.51
"BLD",9458,"KRN",8989.52,0)
8989.52
"BLD",9458,"KRN",8994,0)
8994
"BLD",9458,"KRN","B",.4,.4)

"BLD",9458,"KRN","B",.401,.401)

"BLD",9458,"KRN","B",.402,.402)

"BLD",9458,"KRN","B",.403,.403)

"BLD",9458,"KRN","B",.5,.5)

"BLD",9458,"KRN","B",.84,.84)

"BLD",9458,"KRN","B",3.6,3.6)

"BLD",9458,"KRN","B",3.8,3.8)

"BLD",9458,"KRN","B",9.2,9.2)

"BLD",9458,"KRN","B",9.8,9.8)

"BLD",9458,"KRN","B",19,19)

"BLD",9458,"KRN","B",19.1,19.1)

"BLD",9458,"KRN","B",101,101)

"BLD",9458,"KRN","B",409.61,409.61)

"BLD",9458,"KRN","B",771,771)

"BLD",9458,"KRN","B",779.2,779.2)

"BLD",9458,"KRN","B",870,870)

"BLD",9458,"KRN","B",8989.51,8989.51)

"BLD",9458,"KRN","B",8989.52,8989.52)

"BLD",9458,"KRN","B",8994,8994)

"BLD",9458,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",9458,"QUES",0)
^9.62^^
"BLD",9458,"REQB",0)
^9.611^1^1
"BLD",9458,"REQB",1,0)
KMPR*2.0*2^2
"BLD",9458,"REQB","B","KMPR*2.0*2",1)

"MBREQ")
0
"PKG",597,-1)
1^1
"PKG",597,0)
CAPACITY MANAGEMENT - RUM^KMPR^Capacity Management - Resource Usage Monitor
"PKG",597,20,0)
^9.402P^^
"PKG",597,22,0)
^9.49I^1^1
"PKG",597,22,1,0)
2.0^3030602^3030820^568
"PKG",597,22,1,"PAH",1,0)
4^3160711
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","KMPRUTL")
0^1^B12482343
"RTN","KMPRUTL",1,0)
KMPRUTL ;OAK/KAK/RAK - Resource Usage Monitor Utilities ;9/1/2015
"RTN","KMPRUTL",2,0)
 ;;2.0;CAPACITY MANAGEMENT - RUM;**1,2,4**;May 28, 2003;Build 41
"RTN","KMPRUTL",3,0)
 ;
"RTN","KMPRUTL",4,0)
GRPHMSG ;-- graph message.
"RTN","KMPRUTL",5,0)
 N TXT
"RTN","KMPRUTL",6,0)
 S TXT(1)="This option displays data in a graphical format.  Please make"
"RTN","KMPRUTL",7,0)
 S TXT(2)="note that this output is intended for comparison/trends only,"
"RTN","KMPRUTL",8,0)
 S TXT(3)="and should not be used for detailed analysis."
"RTN","KMPRUTL",9,0)
 S TXT(1,"F")="!?9",TXT(2,"F")="!?9",TXT(3,"F")="!?9"
"RTN","KMPRUTL",10,0)
 D EN^DDIOL(.TXT)
"RTN","KMPRUTL",11,0)
 Q
"RTN","KMPRUTL",12,0)
 ;
"RTN","KMPRUTL",13,0)
ID(KMPRIEN) ;-- display - called from ^DD(8971.1,0,"ID","W")
"RTN","KMPRUTL",14,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",15,0)
 ; KMPRIEN... Ien for file #8971.1 (RESOURCE USAGE MONITOR).
"RTN","KMPRUTL",16,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",17,0)
 Q:'$G(KMPRIEN)
"RTN","KMPRUTL",18,0)
 Q:'$D(^KMPR(8971.1,+KMPRIEN,0))
"RTN","KMPRUTL",19,0)
 N DATA,TXT
"RTN","KMPRUTL",20,0)
 S DATA=$G(^KMPR(8971.1,+KMPRIEN,0))
"RTN","KMPRUTL",21,0)
 ; sent to cm national database.
"RTN","KMPRUTL",22,0)
 S TXT(1)=$S($P(DATA,U,2):"sent",1:"not sent")
"RTN","KMPRUTL",23,0)
 S TXT(1)=TXT(1)_$J(" ",10-$L(TXT(1)))
"RTN","KMPRUTL",24,0)
 ; node.
"RTN","KMPRUTL",25,0)
 S TXT(1)=TXT(1)_$P(DATA,U,3)
"RTN","KMPRUTL",26,0)
 S TXT(1)=TXT(1)_$J(" ",22-$L(TXT(1)))
"RTN","KMPRUTL",27,0)
 ; option.
"RTN","KMPRUTL",28,0)
 I $P(DATA,U,4)]"" S TXT(1)=TXT(1)_"option: "_$P(DATA,U,4)
"RTN","KMPRUTL",29,0)
 ; rpc.
"RTN","KMPRUTL",30,0)
 E  I $P(DATA,U,7)]"" S TXT(1)=TXT(1)_"   rpc: "_$P(DATA,U,7)
"RTN","KMPRUTL",31,0)
 S TXT(1,"F")="?16"
"RTN","KMPRUTL",32,0)
 ; if protocol
"RTN","KMPRUTL",33,0)
 I $P(DATA,U,5)'="" D 
"RTN","KMPRUTL",34,0)
 .S TXT(2)="protocol: "_$E($P(DATA,U,5),1,40) ;_" (protocol)"
"RTN","KMPRUTL",35,0)
 .S TXT(2,"F")="!?"_$S($G(DDSDIW):40,1:42)
"RTN","KMPRUTL",36,0)
 ; display TXT() array.
"RTN","KMPRUTL",37,0)
 D EN^DDIOL(.TXT)
"RTN","KMPRUTL",38,0)
 Q
"RTN","KMPRUTL",39,0)
 ;
"RTN","KMPRUTL",40,0)
NODEARRY(KMPRARRY) ;-- put nodes into array.
"RTN","KMPRUTL",41,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",42,0)
 ; KMPRARRY.. Array to contain nodes in format:
"RTN","KMPRUTL",43,0)
 ;            KMPRARRY(NODENAME)=""
"RTN","KMPRUTL",44,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",45,0)
 ;
"RTN","KMPRUTL",46,0)
 K @KMPRARRY
"RTN","KMPRUTL",47,0)
 ;
"RTN","KMPRUTL",48,0)
 N NODE S NODE=""
"RTN","KMPRUTL",49,0)
 F  S NODE=$O(^KMPR(8971.1,"ANODE",NODE)) Q:NODE=""  S @KMPRARRY@(NODE)=""
"RTN","KMPRUTL",50,0)
 Q
"RTN","KMPRUTL",51,0)
 ;
"RTN","KMPRUTL",52,0)
RUMDATES(KMPRDATE) ;-- get RUM date ranges from file 8971.1
"RTN","KMPRUTL",53,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",54,0)
 ; KMPRDATE... Return value (access by reference) in format:
"RTN","KMPRUTL",55,0)
 ;             StartDate^EndDate^ExtStartDate^ExtEndDate
"RTN","KMPRUTL",56,0)
 ;             2981101^2981104^Nov 1, 1998^Nov 4, 1998
"RTN","KMPRUTL",57,0)
 ;---------------------------------------------------------------------
"RTN","KMPRUTL",58,0)
 ;
"RTN","KMPRUTL",59,0)
 S KMPRDATE=""
"RTN","KMPRUTL",60,0)
 N END,START
"RTN","KMPRUTL",61,0)
 ; determine start date from file 8971.1
"RTN","KMPRUTL",62,0)
 S START=$O(^KMPR(8971.1,"B",0))
"RTN","KMPRUTL",63,0)
 ; determine end date from file 8971.1
"RTN","KMPRUTL",64,0)
 S END=$O(^KMPR(8971.1,"B","A"),-1)
"RTN","KMPRUTL",65,0)
 D DATERNG^KMPRUTL1(.KMPRDATE,START,END)
"RTN","KMPRUTL",66,0)
 ;
"RTN","KMPRUTL",67,0)
 Q
"RTN","KMPRUTL",68,0)
 ;
"RTN","KMPRUTL",69,0)
VERSION() ;-- extrinsic - return current version
"RTN","KMPRUTL",70,0)
 ;
"RTN","KMPRUTL",71,0)
 Q $P($T(+2^KMPRUTL),";",3)_"^"_$P($T(+2^KMPRUTL),";",5)
"RTN","KMPRUTL",72,0)
 ;
"RTN","KMPRUTL",73,0)
ELEARRY(KMPRARRY) ;-- set elements data into KMPRARRY.
"RTN","KMPRUTL",74,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",75,0)
 ; KMPRARRY... Array to contain elements data.
"RTN","KMPRUTL",76,0)
 ;             Format: ElementName^DataPiece
"RTN","KMPRUTL",77,0)
 ;                     KMPRARRY(1)=CPU Time^1
"RTN","KMPRUTL",78,0)
 ;                     KMPRARRY(2)=Elapsed Time^7
"RTN","KMPRUTL",79,0)
 ;                     KMPRARRY(...)=...
"RTN","KMPRUTL",80,0)
 ;-----------------------------------------------------------------------
"RTN","KMPRUTL",81,0)
 ;
"RTN","KMPRUTL",82,0)
 Q:$G(KMPRARRY)=""
"RTN","KMPRUTL",83,0)
 ;
"RTN","KMPRUTL",84,0)
 N DATA,I
"RTN","KMPRUTL",85,0)
 F I=1:1 Q:$P($T(ELEMENTS+I),";",3)=""  D 
"RTN","KMPRUTL",86,0)
 .S DATA=$T(ELEMENTS+I)
"RTN","KMPRUTL",87,0)
 .S @KMPRARRY@(I)=$P(DATA,";",3)_"^"_$P(DATA,";",4)
"RTN","KMPRUTL",88,0)
 Q
"RTN","KMPRUTL",89,0)
 ;
"RTN","KMPRUTL",90,0)
ELEMENT(KMPUVAR) ;-- select RUM data element.
"RTN","KMPRUTL",91,0)
 ; Output Variable:
"RTN","KMPRUTL",92,0)
 ;   KMPUVAR    = Number of Data Piece
"RTN","KMPRUTL",93,0)
 ;              = '^' if DTOUT or DUOUT
"RTN","KMPRUTL",94,0)
 ;   KMPUVAR(0) = Set of Code's Verbiage
"RTN","KMPRUTL",95,0)
 ;
"RTN","KMPRUTL",96,0)
 N DIR,DTOUT,DUOUT,I,X,Y
"RTN","KMPRUTL",97,0)
 S KMPUVAR=""
"RTN","KMPRUTL",98,0)
 S DIR(0)="SXO^"
"RTN","KMPRUTL",99,0)
 F I=1:1 Q:$P($T(ELEMENTS+I),";",3)=""  D 
"RTN","KMPRUTL",100,0)
 .S DIR(0)=DIR(0)_I_":"_$P($T(ELEMENTS+I),";",3)_";"
"RTN","KMPRUTL",101,0)
 S DIR("A")="Enter Key Data Element for Searching RUM Data"
"RTN","KMPRUTL",102,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT)!(Y="") S KMPUVAR="^",KMPUVAR(0)="" Q
"RTN","KMPRUTL",103,0)
 S KMPUVAR=$TR(Y,"12345678^","17562348^"),KMPUVAR(0)=Y(0)
"RTN","KMPRUTL",104,0)
 Q
"RTN","KMPRUTL",105,0)
 ;
"RTN","KMPRUTL",106,0)
ELEMENTS ;-- ;;Element Name;data piece in file 8971.1
"RTN","KMPRUTL",107,0)
 ;;CPU Time;1
"RTN","KMPRUTL",108,0)
 ;;Elapsed Time;7
"RTN","KMPRUTL",109,0)
 ;;M Commands;5
"RTN","KMPRUTL",110,0)
 ;;GLO References;6
"RTN","KMPRUTL",111,0)
 ;;DIO References;2
"RTN","KMPRUTL",112,0)
 ;;BIO References;3
"RTN","KMPRUTL",113,0)
 ;;Page Faults;4
"RTN","KMPRUTL",114,0)
 ;;Occurrences;8
"RTN","KMPRUTL",115,0)
 ;;
"RTN","KMPRUTL",116,0)
PTCHINFO ; -- patch information: routine name ^ current version ^ current patch(es)
"RTN","KMPRUTL",117,0)
 ;;KMPRBD01^2.0^**1,2**
"RTN","KMPRUTL",118,0)
 ;;KMPRBD02^2.0^**2**
"RTN","KMPRUTL",119,0)
 ;;KMPRBD03^2.0^
"RTN","KMPRUTL",120,0)
 ;;KMPRBD04^2.0^**2**
"RTN","KMPRUTL",121,0)
 ;;KMPRBD05^2.0^**2**
"RTN","KMPRUTL",122,0)
 ;;KMPRP1^2.0^**1**
"RTN","KMPRUTL",123,0)
 ;;KMPRP2^2.0^**1**
"RTN","KMPRUTL",124,0)
 ;;KMPRPG01^2.0^**1**
"RTN","KMPRUTL",125,0)
 ;;KMPRPG02^2.0^**1**
"RTN","KMPRUTL",126,0)
 ;;KMPRPN03^2.0^**1**
"RTN","KMPRUTL",127,0)
 ;;KMPRPOST^2.0^**2**
"RTN","KMPRUTL",128,0)
 ;;KMPRSS^2.0^**1,2**
"RTN","KMPRUTL",129,0)
 ;;KMPRUTL^2.0^**1,2,4**
"RTN","KMPRUTL",130,0)
 ;;KMPRUTL1^2.0^**1,2**
"RTN","KMPRUTL",131,0)
 ;;KMPRUTL2^2.0^
"RTN","KMPRUTL",132,0)
 ;;KMPRUTL3^2.0^
"RTN","KMPRUTL",133,0)
 ;;%ZOSVKR^8.0^**90,94,107,122,143,186,550,568**
"RTN","KMPRUTL",134,0)
 ;;
"VER")
8.0^22.0
**INSTALL NAME**
KMPS*2.0*1
"BLD",9454,0)
KMPS*2.0*1^SAGG PROJECT^0^3160711^y
"BLD",9454,4,0)
^9.64PA^^
"BLD",9454,6)
1^
"BLD",9454,6.3)
67
"BLD",9454,"ABPKG")
n
"BLD",9454,"INIT")
EN^KMPSPOST
"BLD",9454,"KRN",0)
^9.67PA^779.2^20
"BLD",9454,"KRN",.4,0)
.4
"BLD",9454,"KRN",.401,0)
.401
"BLD",9454,"KRN",.402,0)
.402
"BLD",9454,"KRN",.403,0)
.403
"BLD",9454,"KRN",.5,0)
.5
"BLD",9454,"KRN",.84,0)
.84
"BLD",9454,"KRN",3.6,0)
3.6
"BLD",9454,"KRN",3.8,0)
3.8
"BLD",9454,"KRN",9.2,0)
9.2
"BLD",9454,"KRN",9.8,0)
9.8
"BLD",9454,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",9454,"KRN",9.8,"NM",1,0)
KMPSGE^^0^B32317948
"BLD",9454,"KRN",9.8,"NM",2,0)
KMPSLK^^0^B24217869
"BLD",9454,"KRN",9.8,"NM",3,0)
KMPSUTL^^0^B14390275
"BLD",9454,"KRN",9.8,"NM",4,0)
KMPSUTL1^^0^B5780636
"BLD",9454,"KRN",9.8,"NM","B","KMPSGE",1)

"BLD",9454,"KRN",9.8,"NM","B","KMPSLK",2)

"BLD",9454,"KRN",9.8,"NM","B","KMPSUTL",3)

"BLD",9454,"KRN",9.8,"NM","B","KMPSUTL1",4)

"BLD",9454,"KRN",19,0)
19
"BLD",9454,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",9454,"KRN",19,"NM",1,0)
KMPS SAGG MANAGER^^0
"BLD",9454,"KRN",19,"NM",2,0)
KMPS SAGG STATUS^^4^
"BLD",9454,"KRN",19,"NM",3,0)
KMPS SAGG STOP^^4^
"BLD",9454,"KRN",19,"NM","B","KMPS SAGG MANAGER",1)

"BLD",9454,"KRN",19,"NM","B","KMPS SAGG STATUS",2)

"BLD",9454,"KRN",19,"NM","B","KMPS SAGG STOP",3)

"BLD",9454,"KRN",19.1,0)
19.1
"BLD",9454,"KRN",101,0)
101
"BLD",9454,"KRN",409.61,0)
409.61
"BLD",9454,"KRN",771,0)
771
"BLD",9454,"KRN",779.2,0)
779.2
"BLD",9454,"KRN",870,0)
870
"BLD",9454,"KRN",8989.51,0)
8989.51
"BLD",9454,"KRN",8989.52,0)
8989.52
"BLD",9454,"KRN",8994,0)
8994
"BLD",9454,"KRN","B",.4,.4)

"BLD",9454,"KRN","B",.401,.401)

"BLD",9454,"KRN","B",.402,.402)

"BLD",9454,"KRN","B",.403,.403)

"BLD",9454,"KRN","B",.5,.5)

"BLD",9454,"KRN","B",.84,.84)

"BLD",9454,"KRN","B",3.6,3.6)

"BLD",9454,"KRN","B",3.8,3.8)

"BLD",9454,"KRN","B",9.2,9.2)

"BLD",9454,"KRN","B",9.8,9.8)

"BLD",9454,"KRN","B",19,19)

"BLD",9454,"KRN","B",19.1,19.1)

"BLD",9454,"KRN","B",101,101)

"BLD",9454,"KRN","B",409.61,409.61)

"BLD",9454,"KRN","B",771,771)

"BLD",9454,"KRN","B",779.2,779.2)

"BLD",9454,"KRN","B",870,870)

"BLD",9454,"KRN","B",8989.51,8989.51)

"BLD",9454,"KRN","B",8989.52,8989.52)

"BLD",9454,"KRN","B",8994,8994)

"BLD",9454,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9454,"QUES",0)
^9.62^^
"BLD",9454,"REQB",0)
^9.611^1^1
"BLD",9454,"REQB",1,0)
XU*8.0*568^2
"BLD",9454,"REQB","B","XU*8.0*568",1)

"INIT")
EN^KMPSPOST
"KRN",19,2918009,-1)
4^2
"KRN",19,2918009,0)
KMPS SAGG STATUS
"KRN",19,2918010,-1)
4^3
"KRN",19,2918010,0)
KMPS SAGG STOP
"KRN",19,2918011,-1)
0^1
"KRN",19,2918011,0)
KMPS SAGG MANAGER^SAGG Project Manager Menu^^M^^^^^^^^
"KRN",19,2918011,1,0)
^19.06^2^2^3151027^^^^
"KRN",19,2918011,1,1,0)
This menu will help the site to manage the SAGG (Statistical Analysis of
"KRN",19,2918011,1,2,0)
Global Growth) Project.
"KRN",19,2918011,10,0)
^19.01IP^3^2
"KRN",19,2918011,10,1,0)
2918009^^1
"KRN",19,2918011,10,1,"^")
KMPS SAGG STATUS
"KRN",19,2918011,10,3,0)
2918010
"KRN",19,2918011,10,3,"^")
KMPS SAGG STOP
"KRN",19,2918011,99)
63852,22321
"KRN",19,2918011,"U")
SAGG PROJECT MANAGER MENU
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",269,-1)
1^1
"PKG",269,0)
SAGG PROJECT^KMPS^SAGG (Statistical Analysis of Global Growth) Project
"PKG",269,20,0)
^9.402P^^
"PKG",269,22,0)
^9.49I^1^1
"PKG",269,22,1,0)
2.0^3070709^3150914^520791172
"PKG",269,22,1,"PAH",1,0)
1^3160711^520791172
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","KMPSGE")
0^1^B32317948
"RTN","KMPSGE",1,0)
KMPSGE ;OAK/KAK/JML - Master Routine ;9/1/2015
"RTN","KMPSGE",2,0)
 ;;2.0;SAGG PROJECT;**1**;Jul 02, 2007;Build 67
"RTN","KMPSGE",3,0)
 ;
"RTN","KMPSGE",4,0)
EN ;-- this routine can only be run as a TaskMan background job
"RTN","KMPSGE",5,0)
 ;
"RTN","KMPSGE",6,0)
 Q:'$D(ZTQUEUED)
"RTN","KMPSGE",7,0)
 ;
"RTN","KMPSGE",8,0)
 N CNT,COMPDT,HANG,KMPSVOLS,KMPSZE,LOC,MAXJOB,MGR,NOWDT,OS
"RTN","KMPSGE",9,0)
 N PROD,PTCHINFO,QUIT,SESSNUM,SITENUM,TEMP,TEXT,UCI,UCIVOL
"RTN","KMPSGE",10,0)
 N VOL,X,ZUZR,RESULT,XMZSENT
"RTN","KMPSGE",11,0)
 ;
"RTN","KMPSGE",12,0)
 ; maximum number of consecutively running jobs
"RTN","KMPSGE",13,0)
 S MAXJOB=6
"RTN","KMPSGE",14,0)
 ; hang time for LOOP and WAIT code
"RTN","KMPSGE",15,0)
 S HANG=300
"RTN","KMPSGE",16,0)
 ;
"RTN","KMPSGE",17,0)
 S SESSNUM=+$H,U="^",SITENUM=$P($$SITE^VASITE(),U,3)
"RTN","KMPSGE",18,0)
 ;
"RTN","KMPSGE",19,0)
 S NOWDT=$$NOW^XLFDT
"RTN","KMPSGE",20,0)
 ;
"RTN","KMPSGE",21,0)
 S OS=$$MPLTF^KMPSUTL1
"RTN","KMPSGE",22,0)
 I OS="UNK" D  Q
"RTN","KMPSGE",23,0)
 .S TEXT(1)="   SAGG Project for this M platform is NOT implemented !"
"RTN","KMPSGE",24,0)
 .D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",25,0)
 ;
"RTN","KMPSGE",26,0)
 S MGR=^%ZOSF("MGR"),PROD=$P(^%ZOSF("PROD"),",")
"RTN","KMPSGE",27,0)
 S PROD=$S($P(^KMPS(8970.1,1,0),U,3)="":PROD,1:$P(^(0),U,3))
"RTN","KMPSGE",28,0)
 S LOC=$P(^KMPS(8970.1,1,0),U,2)
"RTN","KMPSGE",29,0)
 ;
"RTN","KMPSGE",30,0)
 L +^XTMP("KMPS")
"RTN","KMPSGE",31,0)
 S ^XTMP("KMPS",0)=$$FMADD^XLFDT($$DT^XLFDT,14)_U_NOWDT_U_"SAGG data"
"RTN","KMPSGE",32,0)
 K ^XTMP("KMPS",SITENUM),^XTMP("KMPS","ERROR")
"RTN","KMPSGE",33,0)
 K ^XTMP("KMPS","START"),^XTMP("KMPS","STOP")
"RTN","KMPSGE",34,0)
 ;
"RTN","KMPSGE",35,0)
 ; routine KMPSUTL will always be updated with patch release
"RTN","KMPSGE",36,0)
 S X="KMPSUTL"
"RTN","KMPSGE",37,0)
 X "ZL @X S PTCHINFO=$T(+2)"
"RTN","KMPSGE",38,0)
 S PTCHINFO=$P(PTCHINFO,";",3)_" "_$P(PTCHINFO,";",5)
"RTN","KMPSGE",39,0)
 ; session number^M platform^SAGG version_" "_patch^start date-time^
"RTN","KMPSGE",40,0)
 ;     -> completed date-time will be set in $$PACK
"RTN","KMPSGE",41,0)
 S ^XTMP("KMPS",SITENUM,0)=SESSNUM_U_OS_U_PTCHINFO_U_NOWDT_U
"RTN","KMPSGE",42,0)
 S X="ERR1^KMPSGE",@^%ZOSF("TRAP")
"RTN","KMPSGE",43,0)
 S TEMP=SITENUM_U_SESSNUM_U_LOC_U_NOWDT_U_PROD
"RTN","KMPSGE",44,0)
 ;
"RTN","KMPSGE",45,0)
 ; KMPS*2.0*1 - Now analyzing all volumes, not just those in the SAGG PROJECT file
"RTN","KMPSGE",46,0)
 ;
"RTN","KMPSGE",47,0)
 ; NOTE:  ^XINDEX incorrectly sees SYS("UCI" as an array.  It is a global in the %SYS namespace
"RTN","KMPSGE",48,0)
 S CNT=0
"RTN","KMPSGE",49,0)
 S VOL=""
"RTN","KMPSGE",50,0)
 F  S VOL=$O(^|"%SYS"|SYS("UCI",VOL)) Q:VOL=""  D
"RTN","KMPSGE",51,0)
 .Q:$G(^|"%SYS"|SYS("UCI",VOL))]""
"RTN","KMPSGE",52,0)
 .J START^%ZOSVKSE(TEMP_U_VOL)
"RTN","KMPSGE",53,0)
 .S CNT=CNT+1
"RTN","KMPSGE",54,0)
 .I CNT=MAXJOB S CNT=$$WAIT(HANG,MAXJOB)
"RTN","KMPSGE",55,0)
 ;
"RTN","KMPSGE",56,0)
 D EN^KMPSLK(SESSNUM,SITENUM)
"RTN","KMPSGE",57,0)
 S QUIT=0
"RTN","KMPSGE",58,0)
 D LOOP(HANG,SESSNUM,OS)
"RTN","KMPSGE",59,0)
 I 'QUIT D
"RTN","KMPSGE",60,0)
 .S RESULT=$$PACK(SESSNUM,SITENUM)
"RTN","KMPSGE",61,0)
 .S XMZSENT=+RESULT,COMPDT=$P(RESULT,U,2)
"RTN","KMPSGE",62,0)
 .S X=$$OUT^KMPSLK(NOWDT,OS,SESSNUM,SITENUM,XMZSENT,.TEXT)
"RTN","KMPSGE",63,0)
 .D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT,COMPDT)
"RTN","KMPSGE",64,0)
 D END^KMPSLK
"RTN","KMPSGE",65,0)
 Q
"RTN","KMPSGE",66,0)
 ;
"RTN","KMPSGE",67,0)
LOOP(HANG,SESSNUM,OS) ;
"RTN","KMPSGE",68,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",69,0)
 ; Loop until all volume sets complete
"RTN","KMPSGE",70,0)
 ;
"RTN","KMPSGE",71,0)
 ; HANG.....  time to wait to see if all volume sets have completed
"RTN","KMPSGE",72,0)
 ; OS.......  type of operating system
"RTN","KMPSGE",73,0)
 ; SESSNUM..  +$Horolog number of session
"RTN","KMPSGE",74,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",75,0)
 N GBL,UCIVOL1,I
"RTN","KMPSGE",76,0)
 ;
"RTN","KMPSGE",77,0)
 F  Q:'$D(^XTMP("KMPS","START"))!+$G(^XTMP("KMPS","STOP"))  H HANG I (+$H>(SESSNUM+3)) D TOOLNG Q
"RTN","KMPSGE",78,0)
 ;
"RTN","KMPSGE",79,0)
 Q:QUIT
"RTN","KMPSGE",80,0)
 ;
"RTN","KMPSGE",81,0)
 I $D(^XTMP("KMPS","ERROR")) D  Q
"RTN","KMPSGE",82,0)
 .N J,JEND,OUT,TEXT,VOL
"RTN","KMPSGE",83,0)
 .S QUIT=1
"RTN","KMPSGE",84,0)
 .S TEXT(1)=" The SAGG Project has recorded an error on volume set(s):"
"RTN","KMPSGE",85,0)
 .S OUT=0,VOL="",JEND=$S(OS="CVMS":2,OS="CWINNT":4,1:5)
"RTN","KMPSGE",86,0)
 .F I=3:1 Q:OUT  D
"RTN","KMPSGE",87,0)
 ..S TEXT(I)="      "
"RTN","KMPSGE",88,0)
 ..F J=1:1:JEND S VOL=$O(^XTMP("KMPS","ERROR",VOL)) S:VOL="" OUT=1 Q:VOL=""  S TEXT(I)=TEXT(I)_VOL_"   "
"RTN","KMPSGE",89,0)
 .S (TEXT(2),TEXT(I))=""
"RTN","KMPSGE",90,0)
 .S TEXT(I+1)=" See system error log for more details."
"RTN","KMPSGE",91,0)
 .I OS["C" D
"RTN","KMPSGE",92,0)
 ..S TEXT(I+2)=""
"RTN","KMPSGE",93,0)
 ..S TEXT(I+3)=" Also run "_$S(OS="CVMS":"Integrity",1:"INTEGRIT")_" on the listed volume(s)."
"RTN","KMPSGE",94,0)
 .D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",95,0)
 ;
"RTN","KMPSGE",96,0)
 I $D(^XTMP("KMPS","STOP")) D  Q
"RTN","KMPSGE",97,0)
 .N TEXT
"RTN","KMPSGE",98,0)
 .S QUIT=1
"RTN","KMPSGE",99,0)
 .S TEXT(1)=" The SAGG Project collection routines have been STOPPED!  No report"
"RTN","KMPSGE",100,0)
 .S TEXT(2)=" has been generated."
"RTN","KMPSGE",101,0)
 .D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",102,0)
 ;
"RTN","KMPSGE",103,0)
 I '$D(^XTMP("KMPS",SITENUM,SESSNUM,NOWDT)) D  Q
"RTN","KMPSGE",104,0)
 .N TEXT
"RTN","KMPSGE",105,0)
 .S QUIT=1
"RTN","KMPSGE",106,0)
 .S TEXT(1)=" The SAGG Project collection routines did NOT obtain ANY global"
"RTN","KMPSGE",107,0)
 .S TEXT(2)=" information.  Please ensure that the SAGG PROJECT file is"
"RTN","KMPSGE",108,0)
 .S TEXT(3)=" properly setup.  Then use the 'One-time Option Queue' under"
"RTN","KMPSGE",109,0)
 .S TEXT(4)=" Task Manager to re-run the 'SAGG Master Background Task'"
"RTN","KMPSGE",110,0)
 .S TEXT(5)=" [KMPS SAGG REPORT] option."
"RTN","KMPSGE",111,0)
 .D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",112,0)
 ;
"RTN","KMPSGE",113,0)
 Q
"RTN","KMPSGE",114,0)
 ;
"RTN","KMPSGE",115,0)
PACK(SESSNUM,SITENUM)       ;
"RTN","KMPSGE",116,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",117,0)
 ; PackMan ^XTMP global to KMP1-SAGG-SERVER at Albany FO
"RTN","KMPSGE",118,0)
 ;
"RTN","KMPSGE",119,0)
 ; SESSNUM..  +$Horolog number of session
"RTN","KMPSGE",120,0)
 ; SITENUM..  site number
"RTN","KMPSGE",121,0)
 ;
"RTN","KMPSGE",122,0)
 ; Return:
"RTN","KMPSGE",123,0)
 ; RETURN...  number of SAGG data message^completed date-time
"RTN","KMPSGE",124,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",125,0)
 ;
"RTN","KMPSGE",126,0)
 N COMPDT,N,NM,RETURN,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPSGE",127,0)
 S U="^",N=$O(^DIC(4,"D",SITENUM,0))
"RTN","KMPSGE",128,0)
 S NM=$S($D(^DIC(4,N,0)):$P(^(0),U),1:SITENUM)
"RTN","KMPSGE",129,0)
 ;
"RTN","KMPSGE",130,0)
 I '$D(XMDUZ) N XMDUZ S XMDUZ=.5 S:'$D(DUZ) DUZ=.5
"RTN","KMPSGE",131,0)
 ; PROTECTED VARIABLE -- REMOVING KILL: KMPS*2.0*1
"RTN","KMPSGE",132,0)
 ; K:$G(IO)="" IO
"RTN","KMPSGE",133,0)
 ;
"RTN","KMPSGE",134,0)
 ; set completed date-time
"RTN","KMPSGE",135,0)
 S COMPDT=$$NOW^XLFDT
"RTN","KMPSGE",136,0)
 S $P(^XTMP("KMPS",SITENUM,0),U,5)=COMPDT
"RTN","KMPSGE",137,0)
 ;
"RTN","KMPSGE",138,0)
 S XMSUB=NM_" (Session #"_SESSNUM_") XTMP(""KMPS"") Global"
"RTN","KMPSGE",139,0)
 ;
"RTN","KMPSGE",140,0)
 I SITENUM=+SITENUM S XMTEXT="^XTMP(""KMPS"","_SITENUM_","
"RTN","KMPSGE",141,0)
 E  S XMTEXT="^XTMP(""KMPS"","""_SITENUM_""","
"RTN","KMPSGE",142,0)
 S XMY("s.server@domain.ext")=""
"RTN","KMPSGE",143,0)
 D ENT^XMPG
"RTN","KMPSGE",144,0)
 ;
"RTN","KMPSGE",145,0)
 S RETURN=XMZ_U_COMPDT
"RTN","KMPSGE",146,0)
 ;
"RTN","KMPSGE",147,0)
 Q RETURN
"RTN","KMPSGE",148,0)
 ;
"RTN","KMPSGE",149,0)
WAIT(HANG,MAXJOB)    ;
"RTN","KMPSGE",150,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",151,0)
 ; Wait here until less than MAXJOB volume sets are running
"RTN","KMPSGE",152,0)
 ;
"RTN","KMPSGE",153,0)
 ; HANG....  amount of time to wait
"RTN","KMPSGE",154,0)
 ; MAXJOB..  maximum number of jobs allowed to run
"RTN","KMPSGE",155,0)
 ;
"RTN","KMPSGE",156,0)
 ; Return:
"RTN","KMPSGE",157,0)
 ; RUN.....  number of currently running jobs
"RTN","KMPSGE",158,0)
 ;---------------------------------------------------------------------
"RTN","KMPSGE",159,0)
 ;
"RTN","KMPSGE",160,0)
 N RUN
"RTN","KMPSGE",161,0)
 ;
"RTN","KMPSGE",162,0)
 F  H HANG S RUN=$$RUN Q:(RUN<MAXJOB)!+$G(^XTMP("KMPS","STOP"))
"RTN","KMPSGE",163,0)
 ;
"RTN","KMPSGE",164,0)
 Q RUN
"RTN","KMPSGE",165,0)
 ;
"RTN","KMPSGE",166,0)
RUN() ;-- number of currently running jobs
"RTN","KMPSGE",167,0)
 N RUN,VOL
"RTN","KMPSGE",168,0)
 ;
"RTN","KMPSGE",169,0)
 S RUN=0,VOL=""
"RTN","KMPSGE",170,0)
 F  S VOL=$O(^XTMP("KMPS","START",VOL)) Q:VOL=""  S RUN=RUN+1
"RTN","KMPSGE",171,0)
 ;
"RTN","KMPSGE",172,0)
 Q RUN
"RTN","KMPSGE",173,0)
 ;
"RTN","KMPSGE",174,0)
TOOLNG ;-- job has been running too long
"RTN","KMPSGE",175,0)
 ;
"RTN","KMPSGE",176,0)
 N TEXT
"RTN","KMPSGE",177,0)
 ;
"RTN","KMPSGE",178,0)
 S QUIT=1
"RTN","KMPSGE",179,0)
 S TEXT(1)=" The SAGG Project collection routines have been running for more"
"RTN","KMPSGE",180,0)
 S TEXT(2)=" than 3 days.  No report has been generated."
"RTN","KMPSGE",181,0)
 D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",182,0)
 Q
"RTN","KMPSGE",183,0)
 ;
"RTN","KMPSGE",184,0)
ERR1 ;
"RTN","KMPSGE",185,0)
 S KMPSZE=$ZE,ZUZR=$ZR,X="",@^%ZOSF("TRAP")
"RTN","KMPSGE",186,0)
 D @^%ZOSF("ERRTN")
"RTN","KMPSGE",187,0)
 K TEXT
"RTN","KMPSGE",188,0)
 S TEXT(1)=" SAGG Project Error: "_KMPSZE
"RTN","KMPSGE",189,0)
 S TEXT(2)=" See system error log for more details."
"RTN","KMPSGE",190,0)
 S ^XTMP("KMPS","STOP")=""
"RTN","KMPSGE",191,0)
 D MSG^KMPSLK(NOWDT,SESSNUM,.TEXT)
"RTN","KMPSGE",192,0)
 G ^XUSCLEAN
"RTN","KMPSLK")
0^2^B24217869
"RTN","KMPSLK",1,0)
KMPSLK ;OAK/KAK - Thru The Looking Glass ;9/1/2015
"RTN","KMPSLK",2,0)
 ;;2.0;SAGG PROJECT;**1**;Jul 02, 2007;Build 67
"RTN","KMPSLK",3,0)
 ;
"RTN","KMPSLK",4,0)
EN(SESSNUM,SITENUM) ;
"RTN","KMPSLK",5,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",6,0)
 ; SESSNUM..  +$Horolog number of session
"RTN","KMPSLK",7,0)
 ; SITENUM..  site number
"RTN","KMPSLK",8,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",9,0)
 ;
"RTN","KMPSLK",10,0)
ZER ;-- collect zeroth node information
"RTN","KMPSLK",11,0)
 ;
"RTN","KMPSLK",12,0)
 N FNUM,GNAM
"RTN","KMPSLK",13,0)
 ;
"RTN","KMPSLK",14,0)
 S ^XTMP("KMPS",SITENUM,SESSNUM,"@ZER",0)=$P(^DIC(0),U)_U_$P(^DIC(0),U,4)_"^DIC(^"
"RTN","KMPSLK",15,0)
 S ^XTMP("KMPS",SITENUM,SESSNUM,"@ZER","TM")=$S($D(^%ZTSK(-1)):^(-1),1:^%ZTSK(0))
"RTN","KMPSLK",16,0)
 S FNUM=0 F  S FNUM=$O(^DIC(FNUM)) Q:'+FNUM  D
"RTN","KMPSLK",17,0)
 .Q:$G(^DIC(FNUM,0))=""
"RTN","KMPSLK",18,0)
 .Q:'$D(^DIC(FNUM,0,"GL"))
"RTN","KMPSLK",19,0)
 .S GNAM=$G(^DIC(FNUM,0,"GL")) Q:GNAM=""
"RTN","KMPSLK",20,0)
 .;
"RTN","KMPSLK",21,0)
 .; file# = ^ piece 1: file_name
"RTN","KMPSLK",22,0)
 .;                 2: # of entries
"RTN","KMPSLK",23,0)
 .;                 3: global_name
"RTN","KMPSLK",24,0)
 .;                 4: file_version
"RTN","KMPSLK",25,0)
 .;                 5: last id number
"RTN","KMPSLK",26,0)
 .;                 6: global_name (GNAM) has embedded '^' - no extra 'U' needed
"RTN","KMPSLK",27,0)
 .S ^XTMP("KMPS",SITENUM,SESSNUM,"@ZER",FNUM)=$P(^DIC(FNUM,0),U)_U_$P($G(@(GNAM_"0)")),U,4)_GNAM_U_$G(^DD(+$P(^DIC(FNUM,0),U,2),0,"VR"))_U_$P($G(@(GNAM_"0)")),U,3)
"RTN","KMPSLK",28,0)
 ;
"RTN","KMPSLK",29,0)
PKG ;-- collect package file information
"RTN","KMPSLK",30,0)
 ;
"RTN","KMPSLK",31,0)
 N PKNUM
"RTN","KMPSLK",32,0)
 ;
"RTN","KMPSLK",33,0)
 S PKNUM=0
"RTN","KMPSLK",34,0)
 F  S PKNUM=$O(^DIC(9.4,PKNUM)) Q:'+PKNUM  I $D(^DIC(9.4,PKNUM,0)) S KMPSD=$P($G(^DIC(9.4,PKNUM,0)),U,2) D
"RTN","KMPSLK",35,0)
 .I $E(KMPSD)="A" I ($A($E(KMPSD,2))>64)&($A($E(KMPSD,2))<88) I (($A($E(KMPSD,3))>64)&($A($E(KMPSD,3))<89)) Q
"RTN","KMPSLK",36,0)
 .S KMPSV=0,(KMPSVL,KMPSD)=""
"RTN","KMPSLK",37,0)
 .F  S KMPSV=$O(^DIC(9.4,PKNUM,22,KMPSV)) Q:'+KMPSV  S KMPSVL=KMPSV
"RTN","KMPSLK",38,0)
 .I +KMPSVL S KMPSV=$G(^DIC(9.4,PKNUM,22,KMPSVL,0)),KMPSD=$P(KMPSV,U,3),KMPSV=$P(KMPSV,U)
"RTN","KMPSLK",39,0)
 .;
"RTN","KMPSLK",40,0)
 .; pkg_name = pkg_prefix^current version^last version^install date
"RTN","KMPSLK",41,0)
 .S ^XTMP("KMPS",SITENUM,SESSNUM,"@PKG",$P(^DIC(9.4,PKNUM,0),U))=$P($G(^DIC(9.4,PKNUM,0)),U,2)_U_$G(^("VERSION"))_U_KMPSV_U_KMPSD
"RTN","KMPSLK",42,0)
 ;
"RTN","KMPSLK",43,0)
SYS ;  Collect volume set (@VOL) and system (@SYS) information
"RTN","KMPSLK",44,0)
 ;
"RTN","KMPSLK",45,0)
 D EN^%ZOSVKSD(SITENUM,SESSNUM,OS),@OS
"RTN","KMPSLK",46,0)
 ;
"RTN","KMPSLK",47,0)
 K KMPSD,KMPSNM,KMPSV,KMPSVL
"RTN","KMPSLK",48,0)
 Q
"RTN","KMPSLK",49,0)
 ;
"RTN","KMPSLK",50,0)
CUNIX ;-- Cache for Unix/Linux
"RTN","KMPSLK",51,0)
CVMS ;-- Cache for VMS platform
"RTN","KMPSLK",52,0)
 S ^XTMP("KMPS",SITENUM,SESSNUM,"@SYS")=$ZV_U
"RTN","KMPSLK",53,0)
 Q
"RTN","KMPSLK",54,0)
 ;
"RTN","KMPSLK",55,0)
CWINNT ;-- for Cache for NT platform
"RTN","KMPSLK",56,0)
 S ^XTMP("KMPS",SITENUM,SESSNUM,"@SYS")=$ZV_U_$S($ZU(100)=0:"Windows NT",$ZU(100)=1:"Windows 95",1:$ZU(100))
"RTN","KMPSLK",57,0)
 Q
"RTN","KMPSLK",58,0)
 ;        
"RTN","KMPSLK",59,0)
OUT(NOWDT,OS,SESSNUM,SITENUM,XMZSENT,TEXT) ;
"RTN","KMPSLK",60,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",61,0)
 ;   Create 'successful' end-game message text
"RTN","KMPSLK",62,0)
 ; NOWDT....   FM date and time that SAGG started
"RTN","KMPSLK",63,0)
 ; OS.......   type of operating system
"RTN","KMPSLK",64,0)
 ; SESSNUM..   +$Horolog number of session
"RTN","KMPSLK",65,0)
 ; SITENUM..   site number
"RTN","KMPSLK",66,0)
 ; XMZSENT..   mailman message number created by SAGG
"RTN","KMPSLK",67,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",68,0)
 ;
"RTN","KMPSLK",69,0)
 N DOW,GBL,I,J,JEND,UCIVOL,VOLS,X
"RTN","KMPSLK",70,0)
 ;
"RTN","KMPSLK",71,0)
 ; check to see if SAGG not started over weekend (Fri - Sun)
"RTN","KMPSLK",72,0)
 S DOW=$$DOW^XLFDT(NOWDT,1)
"RTN","KMPSLK",73,0)
 I (DOW>0)&(DOW<5) D
"RTN","KMPSLK",74,0)
 .S TEXT(1)=" *** It is STRONGLY recommended that the 'SAGG Master Background Task' ***"
"RTN","KMPSLK",75,0)
 .S TEXT(2)=" *** [KMPS SAGG REPORT] be rescheduled to run over the weekend hours.  ***"
"RTN","KMPSLK",76,0)
 .S TEXT(3)=""
"RTN","KMPSLK",77,0)
 ;
"RTN","KMPSLK",78,0)
 S TEXT(4)=" The SAGG Project collection routines monitored the following:"
"RTN","KMPSLK",79,0)
 S TEXT(5)=""
"RTN","KMPSLK",80,0)
 K VOLS
"RTN","KMPSLK",81,0)
 S GBL=""
"RTN","KMPSLK",82,0)
 F  S GBL=$O(^XTMP("KMPS",SITENUM,SESSNUM,NOWDT,GBL)) Q:GBL=""  D
"RTN","KMPSLK",83,0)
 .S UCIVOL=""
"RTN","KMPSLK",84,0)
 .F  S UCIVOL=$O(^XTMP("KMPS",SITENUM,SESSNUM,NOWDT,GBL,UCIVOL)) Q:UCIVOL=""  S VOLS(UCIVOL)=""
"RTN","KMPSLK",85,0)
 S X=0,UCIVOL="",JEND=$S(OS="CVMS":2,OS="CWINNT":4,1:5)
"RTN","KMPSLK",86,0)
 F I=6:1 Q:X  D
"RTN","KMPSLK",87,0)
 .S TEXT(I)="          "
"RTN","KMPSLK",88,0)
 .F J=1:1:JEND S UCIVOL=$O(VOLS(UCIVOL)) S:UCIVOL="" X=1 Q:UCIVOL=""  S TEXT(I)=TEXT(I)_UCIVOL_"   "
"RTN","KMPSLK",89,0)
 S TEXT(I)=""
"RTN","KMPSLK",90,0)
 S TEXT(I+1)=" Please ensure that this list concurs with your present volume set"
"RTN","KMPSLK",91,0)
 S TEXT(I+2)=" configuration.",TEXT(I+3)=""
"RTN","KMPSLK",92,0)
 S TEXT(I+4)=" A local e-mail message #"_XMZSENT_" was created by the collection"
"RTN","KMPSLK",93,0)
 S TEXT(I+5)=" routines.  Check the NetMail Queue to ensure"
"RTN","KMPSLK",94,0)
 S TEXT(I+6)=" transmission delivery."
"RTN","KMPSLK",95,0)
 ;
"RTN","KMPSLK",96,0)
 Q ""
"RTN","KMPSLK",97,0)
 ;
"RTN","KMPSLK",98,0)
MSG(STRTDT,SESSNUM,TEXT,COMPDT)       ;-- send e-mail message to local KMP-CAPMAN mailgroup
"RTN","KMPSLK",99,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",100,0)
 ; Send e-mail message to local KMP-CAPMAN mailgroup
"RTN","KMPSLK",101,0)
 ;
"RTN","KMPSLK",102,0)
 ; STRTDT...  SAGG start date and time
"RTN","KMPSLK",103,0)
 ; SESSNUM..  +$Horolog number of session
"RTN","KMPSLK",104,0)
 ; TEXT.....  text of message
"RTN","KMPSLK",105,0)
 ; COMPDT...  (optional) SAGG completion date and time
"RTN","KMPSLK",106,0)
 ;---------------------------------------------------------------------
"RTN","KMPSLK",107,0)
 N XMSUB,XMTEXT,XMY
"RTN","KMPSLK",108,0)
 ;
"RTN","KMPSLK",109,0)
 S COMPDT=+$G(COMPDT)
"RTN","KMPSLK",110,0)
 ;
"RTN","KMPSLK",111,0)
 S:'$D(XMDUZ) XMDUZ=.5
"RTN","KMPSLK",112,0)
 S:'$D(DUZ) DUZ=.5 S U="^"
"RTN","KMPSLK",113,0)
 ;
"RTN","KMPSLK",114,0)
 S TEXT(.1)=" SAGG Session: "_SESSNUM
"RTN","KMPSLK",115,0)
 S TEXT(.2)=" Started:      "_$$FMTE^XLFDT(STRTDT,"P")_" ("_$$DOW^XLFDT(STRTDT)_")"
"RTN","KMPSLK",116,0)
 S:+COMPDT TEXT(.3)=" Completed:    "_$$FMTE^XLFDT(COMPDT,"P")_" ("_$$DOW^XLFDT(COMPDT)_")"
"RTN","KMPSLK",117,0)
 S TEXT(.4)=""
"RTN","KMPSLK",118,0)
 S XMSUB="SAGG Project Message (Session #"_SESSNUM_")",XMTEXT="TEXT("
"RTN","KMPSLK",119,0)
 I $D(^XMB(3.8,"B","KMP-CAPMAN")) S XMY("G.KMP-CAPMAN")=""
"RTN","KMPSLK",120,0)
 D:$D(XMY) ^XMD
"RTN","KMPSLK",121,0)
 Q
"RTN","KMPSLK",122,0)
 ;
"RTN","KMPSLK",123,0)
END ;
"RTN","KMPSLK",124,0)
 K ^XTMP("KMPS",SITENUM),^XTMP("KMPS","ERROR")
"RTN","KMPSLK",125,0)
 K ^XTMP("KMPS","START"),^XTMP("KMPS","STOP"),^XTMP("KMPS",0)
"RTN","KMPSLK",126,0)
 K X,XMDUZ
"RTN","KMPSLK",127,0)
 S ZTREQ="@"
"RTN","KMPSLK",128,0)
 L -^XTMP("KMPS")
"RTN","KMPSLK",129,0)
 Q
"RTN","KMPSPOST")
0^^B859700
"RTN","KMPSPOST",1,0)
KMPSPOST ;OAK/RAK - SAGG Post Install Routine ;9/1/2015
"RTN","KMPSPOST",2,0)
 ;;2.0;SAGG PROJECT;**1**;Jul 02, 2007;Build 67
"RTN","KMPSPOST",3,0)
 ;
"RTN","KMPSPOST",4,0)
EN ;-- entry point for post-install
"RTN","KMPSPOST",5,0)
 ;
"RTN","KMPSPOST",6,0)
 D BMES^XPDUTL(" Begin Post-Install...")
"RTN","KMPSPOST",7,0)
 D GROUP
"RTN","KMPSPOST",8,0)
 D MES^XPDUTL(" Post-Install complete!")
"RTN","KMPSPOST",9,0)
 ;
"RTN","KMPSPOST",10,0)
 Q
"RTN","KMPSPOST",11,0)
 ;
"RTN","KMPSPOST",12,0)
GROUP ;-- 
"RTN","KMPSPOST",13,0)
 N ERROR,FDA,GROUP,IEN,IEN1
"RTN","KMPSPOST",14,0)
 S IEN=$O(^XMB(3.8,"B","KMP-CAPMAN",0))
"RTN","KMPSPOST",15,0)
 Q:'IEN
"RTN","KMPSPOST",16,0)
 F GROUP="G.mailgroup@domain.ext","G.mailgroup@domain.ext" D 
"RTN","KMPSPOST",17,0)
 .K FDA,IEN1
"RTN","KMPSPOST",18,0)
 .S IEN1=$O(^XMB(3.8,IEN,6,"B",GROUP,0))
"RTN","KMPSPOST",19,0)
 .; MEMBER - REMOTE field
"RTN","KMPSPOST",20,0)
 .S FDA($J,3.812,IEN1_","_IEN_",",.01)="@"
"RTN","KMPSPOST",21,0)
 .D FILE^DIE("","FDA($J)","ERROR")
"RTN","KMPSPOST",22,0)
 Q
"RTN","KMPSUTL")
0^3^B14390275
"RTN","KMPSUTL",1,0)
KMPSUTL ;OAK/KAK/JML - SAGG Utilities ;9/1/2015
"RTN","KMPSUTL",2,0)
 ;;2.0;SAGG PROJECT;**1**;Jul 02, 2007;Build 67
"RTN","KMPSUTL",3,0)
 ;
"RTN","KMPSUTL",4,0)
CURSTAT(STAT)   ;-- current status
"RTN","KMPSUTL",5,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL",6,0)
 ; input:  STAT (optional) = data from $$TSKSTAT^KMPSUTL1
"RTN","KMPSUTL",7,0)
 ; output: See codes below
"RTN","KMPSUTL",8,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL",9,0)
 ;
"RTN","KMPSUTL",10,0)
 N RESULT,SITNUM,STRTDT
"RTN","KMPSUTL",11,0)
 ;
"RTN","KMPSUTL",12,0)
 S RESULT="",SITNUM=^DD("SITE",1),STRTDT=$G(^XTMP("KMPS",SITNUM,0))
"RTN","KMPSUTL",13,0)
 ;
"RTN","KMPSUTL",14,0)
 I $D(^XTMP("KMPS","ERROR")) Q "6^ERRORS RECORDED"
"RTN","KMPSUTL",15,0)
 I $D(^XTMP("KMPS","STOP")) Q "7^STOPPING"
"RTN","KMPSUTL",16,0)
 I $D(^XTMP("KMPS","START")) L +^XTMP("KMPS"):0 I $T L -^XTMP("KMPS") Q "5^DID NOT COMPLETE"
"RTN","KMPSUTL",17,0)
 I +STRTDT I +$H-STRTDT>2 Q "5^DID NOT COMPLETE"
"RTN","KMPSUTL",18,0)
 I +STRTDT I +$H-STRTDT>1 Q "4^RUNNING TOO LONG"
"RTN","KMPSUTL",19,0)
 I $D(^XTMP("KMPS","START")) Q "0^RUNNING"
"RTN","KMPSUTL",20,0)
 I $D(STAT) Q $P(STAT,U,1,2)
"RTN","KMPSUTL",21,0)
 E  Q "3^NOT RUNNING"
"RTN","KMPSUTL",22,0)
 Q "9^UNKNOWN"
"RTN","KMPSUTL",23,0)
 ;
"RTN","KMPSUTL",24,0)
STOP ;-- stop SAGG collection routines
"RTN","KMPSUTL",25,0)
 ;
"RTN","KMPSUTL",26,0)
 N DIR,X,Y
"RTN","KMPSUTL",27,0)
 ;
"RTN","KMPSUTL",28,0)
 I '$D(^XTMP("KMPS","START")) D  Q
"RTN","KMPSUTL",29,0)
 .W !!,?5,"The SAGG Project collection routines are not running.",!
"RTN","KMPSUTL",30,0)
 E  W !!,"Current status of SAGG is ",$P($$CURSTAT(),U,2),!
"RTN","KMPSUTL",31,0)
 S DIR("A")="Do you wish to manually STOP the SAGG Project collection routines (Y/N)",DIR("B")="N",DIR(0)="Y"
"RTN","KMPSUTL",32,0)
 D ^DIR W !
"RTN","KMPSUTL",33,0)
 I Y D
"RTN","KMPSUTL",34,0)
 .S ^XTMP("KMPS","STOP")=1
"RTN","KMPSUTL",35,0)
 .W !,?5,"The SAGG Project collection routines have been notified to begin an"
"RTN","KMPSUTL",36,0)
 .W !,?5,"orderly shut-down process.",!
"RTN","KMPSUTL",37,0)
 Q
"RTN","KMPSUTL",38,0)
 ;
"RTN","KMPSUTL",39,0)
FILE ;-- modifies data in the SAGG PROJECT file #8970.1
"RTN","KMPSUTL",40,0)
 ;
"RTN","KMPSUTL",41,0)
 N DA,DIC,DIE,DLAYGO,DR,PLTFRM,X
"RTN","KMPSUTL",42,0)
 ;
"RTN","KMPSUTL",43,0)
 S PLTFRM=$$MPLTF^KMPSUTL1
"RTN","KMPSUTL",44,0)
 W !!,"Specify the Directories"
"RTN","KMPSUTL",45,0)
 W " which hold your VistA production globals.",!!,"For example:",!!,?5
"RTN","KMPSUTL",46,0)
 I PLTFRM="CWINNT" W "Cache for Windows NT =>  W:\VAA, W:\VBB, W:\VCC ... V:\Vxx"
"RTN","KMPSUTL",47,0)
 I PLTFRM="CVMS" W "Cache for OpenVMS =>  _$1$DKAn:[CACHSYS.VAA] ... _$1$DKAx:[CACHSYS.Vxx]"
"RTN","KMPSUTL",48,0)
 I PLTFRM="UNK" W "Specify all locations of VistA globals"
"RTN","KMPSUTL",49,0)
 W !!,"Do NOT specify 'test/training' Directories, (i.e., UTL,TST, etc.).",!
"RTN","KMPSUTL",50,0)
 S DIE="^KMPS(8970.1,",DA=1,DR=.03
"RTN","KMPSUTL",51,0)
 S:PLTFRM'="DSM" DR(2,8970.11)=.01
"RTN","KMPSUTL",52,0)
 D ^DIE
"RTN","KMPSUTL",53,0)
 ;
"RTN","KMPSUTL",54,0)
 Q
"RTN","KMPSUTL",55,0)
 ;
"RTN","KMPSUTL",56,0)
HELP ;-- extended help for SAGG PROJECT file VOLUME SET TO MONITOR (.01) field
"RTN","KMPSUTL",57,0)
 ;
"RTN","KMPSUTL",58,0)
 N PLTFRM
"RTN","KMPSUTL",59,0)
 ;
"RTN","KMPSUTL",60,0)
 S PLTFRM=$$MPLTF^KMPSUTL1 Q:PLTFRM="UNK"
"RTN","KMPSUTL",61,0)
 W !," This field will contain the name of the Directories that the site wants"
"RTN","KMPSUTL",62,0)
 W !," to monitor with the SAGG Project collection routines. The site should"
"RTN","KMPSUTL",63,0)
 W !," specify only the Directories which hold their VistA production globals:"
"RTN","KMPSUTL",64,0)
 W !!
"RTN","KMPSUTL",65,0)
 W " For example:",!!
"RTN","KMPSUTL",66,0)
 I PLTFRM="CWINNT" W "    Cache for Windows NT =>  W:\VAA, W:\VBB, W:\VCC ... V:\Vxx",!!
"RTN","KMPSUTL",67,0)
 I PLTFRM="CVMS" W "    Cache for OpenVMS =>  _$1$DKAn:[CACHSYS.VAA] ... _$1$DKAx:[CACHSYS.Vxx]",!!
"RTN","KMPSUTL",68,0)
 W " Do NOT specify 'test/training' Directories (e.g., UTL, TST, etc.).",!
"RTN","KMPSUTL",69,0)
 Q
"RTN","KMPSUTL",70,0)
 ;
"RTN","KMPSUTL",71,0)
VERSION() ;-- extrinsic - return current version.
"RTN","KMPSUTL",72,0)
 Q $P($T(+2^KMPSUTL),";",3)_"^"_$P($T(+2^KMPSUTL),";",5)
"RTN","KMPSUTL",73,0)
 ;
"RTN","KMPSUTL",74,0)
PTCHINFO        ; -- patch information: routine name ^ current version ^ current patch(es) ^ package namespace
"RTN","KMPSUTL",75,0)
 ;;KMPSGE^2.0^**1**^KMPS
"RTN","KMPSUTL",76,0)
 ;;KMPSLK^2.0^**1**^KMPS
"RTN","KMPSUTL",77,0)
 ;;KMPSUTL^2.0^**1**^KMPS
"RTN","KMPSUTL",78,0)
 ;;KMPSUTL1^2.0^**1**^KMPS
"RTN","KMPSUTL",79,0)
 ;;%ZOSVKSD^8.0^**121,197,268,456,568**^XU
"RTN","KMPSUTL",80,0)
 ;;%ZOSVKSE^8.0^**90,94,197,268,456,568**^XU
"RTN","KMPSUTL",81,0)
 ;;%ZOSVKSS^8.0^**90,94,197,268,456**^XU
"RTN","KMPSUTL1")
0^4^B5780636
"RTN","KMPSUTL1",1,0)
KMPSUTL1        ;OAK/KAK - SAGG Utilities ;9/1/2015
"RTN","KMPSUTL1",2,0)
 ;;2.0;SAGG PROJECT;**1**;Jul 02, 2007;Build 67
"RTN","KMPSUTL1",3,0)
 ;
"RTN","KMPSUTL1",4,0)
MPLTF() ;-- returns the type of M platform
"RTN","KMPSUTL1",5,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL1",6,0)
 ; Returns:  CVMS   for Cache for OpenVMS platform
"RTN","KMPSUTL1",7,0)
 ;           CWINNT for Cache for Windows NT platform
"RTN","KMPSUTL1",8,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL1",9,0)
 ;
"RTN","KMPSUTL1",10,0)
 N MPLTF,ZV
"RTN","KMPSUTL1",11,0)
 ;
"RTN","KMPSUTL1",12,0)
 S ZV=$$OS^%ZOSV ; IA# 10097
"RTN","KMPSUTL1",13,0)
 S MPLTF=$S(ZV["VMS":"CVMS",ZV["UNIX":"CUNIX",ZV["NT":"CWINNT",1:"UNK")
"RTN","KMPSUTL1",14,0)
 Q MPLTF
"RTN","KMPSUTL1",15,0)
 ;
"RTN","KMPSUTL1",16,0)
TSKSTAT(OPT)       ;-- status of scheduled task option
"RTN","KMPSUTL1",17,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL1",18,0)
 ; input  OPT = option name
"RTN","KMPSUTL1",19,0)
 ; output RTN = status code^literal condition
"RTN","KMPSUTL1",20,0)
 ;              ...^scheduled date@time (day)^numeric day-of-week
"RTN","KMPSUTL1",21,0)
 ;              ...^expanded scheduled frequency^short form frequency
"RTN","KMPSUTL1",22,0)
 ;              ...^task id^queued by^user status
"RTN","KMPSUTL1",23,0)
 ;
"RTN","KMPSUTL1",24,0)
 ; where status code^condition:
"RTN","KMPSUTL1",25,0)
 ;            = 0^SCHEDULED
"RTN","KMPSUTL1",26,0)
 ;            = 1^NOT SCHEDULED and 'scheduled date@time' will
"RTN","KMPSUTL1",27,0)
 ;                   be UNKNOWN and 'numeric day of week' will be -1
"RTN","KMPSUTL1",28,0)
 ;            = 2^NOT RESCHEDULED
"RTN","KMPSUTL1",29,0)
 ;            = 3^MISSING when OPT does not exist
"RTN","KMPSUTL1",30,0)
 ;            = 9^UNKNOWN
"RTN","KMPSUTL1",31,0)
 ;
"RTN","KMPSUTL1",32,0)
 ; where user status = ACTIVE or NOT ACTIVE
"RTN","KMPSUTL1",33,0)
 ;---------------------------------------------------------------------
"RTN","KMPSUTL1",34,0)
 ;
"RTN","KMPSUTL1",35,0)
 N ACTV,DA,DAY,DOW,FREQ,RTN,TSK,TSKINFO,USER,Y
"RTN","KMPSUTL1",36,0)
 ;
"RTN","KMPSUTL1",37,0)
 S (DOW,FREQ)=-1
"RTN","KMPSUTL1",38,0)
 S RTN="9^UNKNOWN^NO DATE^-1^UNKNOWN^^^UNKNOWN^NOT ACTIVE"
"RTN","KMPSUTL1",39,0)
 ;
"RTN","KMPSUTL1",40,0)
 I '$D(^DIC(19,"B",OPT)) S $P(RTN,U,1,2)="3^MISSING" Q RTN
"RTN","KMPSUTL1",41,0)
 S DA=$O(^DIC(19,"B",OPT,0)),DA=+$O(^DIC(19.2,"B",DA,0))
"RTN","KMPSUTL1",42,0)
 S TSKINFO=$G(^DIC(19.2,DA,0)),(DOW,Y)=$P(TSKINFO,U,2),FREQ=$P(TSKINFO,U,6)
"RTN","KMPSUTL1",43,0)
 S:+Y $P(TSKINFO,U,2)=$$FMTE^XLFDT(Y)
"RTN","KMPSUTL1",44,0)
 I DOW'="" S DAY=$$DOW^XLFDT(DOW),DOW=$$DOW^XLFDT(DOW,1)
"RTN","KMPSUTL1",45,0)
 S TSK=+$G(^DIC(19.2,+DA,1))
"RTN","KMPSUTL1",46,0)
 I (DOW="")!(TSK="") S $P(RTN,U,1,2)="1^NOT SCHEDULED"
"RTN","KMPSUTL1",47,0)
 E  D
"RTN","KMPSUTL1",48,0)
 .S $P(RTN,U,1,2)="0^SCHEDULED"
"RTN","KMPSUTL1",49,0)
 .I FREQ="" S $P(RTN,U,1,2)="2^NOT RESCHEDULED"
"RTN","KMPSUTL1",50,0)
 .; queued to run at
"RTN","KMPSUTL1",51,0)
 .S $P(RTN,U,3,4)=$S($P(TSKINFO,U,2)="":"NO DATE",1:$P(TSKINFO,U,2))_$S($D(DAY):" ("_DAY_")",1:"")_U_DOW
"RTN","KMPSUTL1",52,0)
 ; rescheduling frequency
"RTN","KMPSUTL1",53,0)
 I FREQ?1.3N1A D
"RTN","KMPSUTL1",54,0)
 .S $P(RTN,U,5,6)=+FREQ_" "_$S(FREQ["D":"day",FREQ["M":"month",1:FREQ)_$S(+FREQ>1:"s",1:"")_U_FREQ
"RTN","KMPSUTL1",55,0)
 E  S $P(RTN,U,5,6)=$S(FREQ="":"UNKNOWN",1:FREQ)_U_FREQ
"RTN","KMPSUTL1",56,0)
 ; task id
"RTN","KMPSUTL1",57,0)
 S $P(RTN,U,7)=TSK
"RTN","KMPSUTL1",58,0)
 ; find if the user is active
"RTN","KMPSUTL1",59,0)
 I TSK D
"RTN","KMPSUTL1",60,0)
 .S TSKINFO=$G(^%ZTSK(TSK,0))
"RTN","KMPSUTL1",61,0)
 .S USER=+$P(TSKINFO,U,3)
"RTN","KMPSUTL1",62,0)
 .S ACTV=+$$ACTIVE^XUSER(USER)
"RTN","KMPSUTL1",63,0)
 .; queued by
"RTN","KMPSUTL1",64,0)
 .S $P(RTN,U,8)=$P($G(^VA(200,USER,0)),U)
"RTN","KMPSUTL1",65,0)
 I $G(ACTV) S $P(RTN,U,9)="ACTIVE"
"RTN","KMPSUTL1",66,0)
 Q RTN
"VER")
8.0^22.0
**INSTALL NAME**
KMPV*1.0*0
"BLD",9462,0)
KMPV*1.0*0^VISTA SYSTEM MONITOR^0^3160711^y
"BLD",9462,1,0)
^^1^1^3141209^
"BLD",9462,1,1,0)
VTCM INITIAL INSTALLATION
"BLD",9462,4,0)
^9.64PA^8969.03^3
"BLD",9462,4,8969,0)
8969
"BLD",9462,4,8969,222)
y^n^f^^^^n
"BLD",9462,4,8969.02,0)
8969.02
"BLD",9462,4,8969.02,222)
y^n^f^^^^n
"BLD",9462,4,8969.03,0)
8969.03
"BLD",9462,4,8969.03,222)
y^n^f^^^^n
"BLD",9462,4,"B",8969,8969)

"BLD",9462,4,"B",8969.02,8969.02)

"BLD",9462,4,"B",8969.03,8969.03)

"BLD",9462,6.3)
89
"BLD",9462,"INID")
^n
"BLD",9462,"INIT")
KMPVPST1
"BLD",9462,"KRN",0)
^9.67PA^779.2^20
"BLD",9462,"KRN",.4,0)
.4
"BLD",9462,"KRN",.401,0)
.401
"BLD",9462,"KRN",.402,0)
.402
"BLD",9462,"KRN",.403,0)
.403
"BLD",9462,"KRN",.403,"NM",0)
^9.68A^2^2
"BLD",9462,"KRN",.403,"NM",1,0)
KMPV EDIT CONFIGURATION    FILE #8969^8969^0
"BLD",9462,"KRN",.403,"NM",2,0)
KMPV VIEW CONFIGURATION    FILE #8969^8969^0
"BLD",9462,"KRN",.403,"NM","B","KMPV EDIT CONFIGURATION    FILE #8969",1)

"BLD",9462,"KRN",.403,"NM","B","KMPV VIEW CONFIGURATION    FILE #8969",2)

"BLD",9462,"KRN",.5,0)
.5
"BLD",9462,"KRN",.84,0)
.84
"BLD",9462,"KRN",3.6,0)
3.6
"BLD",9462,"KRN",3.8,0)
3.8
"BLD",9462,"KRN",9.2,0)
9.2
"BLD",9462,"KRN",9.8,0)
9.8
"BLD",9462,"KRN",9.8,"NM",0)
^9.68A^13^8
"BLD",9462,"KRN",9.8,"NM",2,0)
KMPVCBG^^0^B127056439
"BLD",9462,"KRN",9.8,"NM",3,0)
KMPVCCFG^^0^B46283730
"BLD",9462,"KRN",9.8,"NM",4,0)
KMPVCSRV^^0^B116070804
"BLD",9462,"KRN",9.8,"NM",6,0)
KMPVLM^^0^B26751962
"BLD",9462,"KRN",9.8,"NM",8,0)
KMPVRUN^^0^B4241858
"BLD",9462,"KRN",9.8,"NM",11,0)
KMPVVTCM^^0^B33477833
"BLD",9462,"KRN",9.8,"NM",12,0)
KMPVPST1^^0^B16080867
"BLD",9462,"KRN",9.8,"NM",13,0)
KMPVVSTM^^0^B25826060
"BLD",9462,"KRN",9.8,"NM","B","KMPVCBG",2)

"BLD",9462,"KRN",9.8,"NM","B","KMPVCCFG",3)

"BLD",9462,"KRN",9.8,"NM","B","KMPVCSRV",4)

"BLD",9462,"KRN",9.8,"NM","B","KMPVLM",6)

"BLD",9462,"KRN",9.8,"NM","B","KMPVPST1",12)

"BLD",9462,"KRN",9.8,"NM","B","KMPVRUN",8)

"BLD",9462,"KRN",9.8,"NM","B","KMPVVSTM",13)

"BLD",9462,"KRN",9.8,"NM","B","KMPVVTCM",11)

"BLD",9462,"KRN",19,0)
19
"BLD",9462,"KRN",19,"NM",0)
^9.68A^6^5
"BLD",9462,"KRN",19,"NM",2,0)
KMPV VSM MANAGEMENT^^0
"BLD",9462,"KRN",19,"NM",3,0)
KMPV VTCM DATA TRANSMISSION^^0
"BLD",9462,"KRN",19,"NM",4,0)
KMPV-CLIENT-SRV^^0
"BLD",9462,"KRN",19,"NM",5,0)
XTCM MAIN^^2
"BLD",9462,"KRN",19,"NM",6,0)
KMPV VSTM DATA TRANSMISSION^^0
"BLD",9462,"KRN",19,"NM","B","KMPV VSM MANAGEMENT",2)

"BLD",9462,"KRN",19,"NM","B","KMPV VSTM DATA TRANSMISSION",6)

"BLD",9462,"KRN",19,"NM","B","KMPV VTCM DATA TRANSMISSION",3)

"BLD",9462,"KRN",19,"NM","B","KMPV-CLIENT-SRV",4)

"BLD",9462,"KRN",19,"NM","B","XTCM MAIN",5)

"BLD",9462,"KRN",19.1,0)
19.1
"BLD",9462,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",9462,"KRN",19.1,"NM",1,0)
KMPVOPS^^0
"BLD",9462,"KRN",19.1,"NM","B","KMPVOPS",1)

"BLD",9462,"KRN",101,0)
101
"BLD",9462,"KRN",101,"NM",0)
^9.68A^7^7
"BLD",9462,"KRN",101,"NM",1,0)
KMPV DELETE DATA^^0
"BLD",9462,"KRN",101,"NM",2,0)
KMPV EDIT CFG^^0
"BLD",9462,"KRN",101,"NM",3,0)
KMPV MANAGEMENT MENU^^0
"BLD",9462,"KRN",101,"NM",4,0)
KMPV RESTORE CFG^^0
"BLD",9462,"KRN",101,"NM",5,0)
KMPV START MONITOR^^0
"BLD",9462,"KRN",101,"NM",6,0)
KMPV STOP MONITOR^^0
"BLD",9462,"KRN",101,"NM",7,0)
KMPV VIEW CFG^^0
"BLD",9462,"KRN",101,"NM","B","KMPV DELETE DATA",1)

"BLD",9462,"KRN",101,"NM","B","KMPV EDIT CFG",2)

"BLD",9462,"KRN",101,"NM","B","KMPV MANAGEMENT MENU",3)

"BLD",9462,"KRN",101,"NM","B","KMPV RESTORE CFG",4)

"BLD",9462,"KRN",101,"NM","B","KMPV START MONITOR",5)

"BLD",9462,"KRN",101,"NM","B","KMPV STOP MONITOR",6)

"BLD",9462,"KRN",101,"NM","B","KMPV VIEW CFG",7)

"BLD",9462,"KRN",409.61,0)
409.61
"BLD",9462,"KRN",409.61,"NM",0)
^9.68A^1^1
"BLD",9462,"KRN",409.61,"NM",1,0)
KMPV MANAGEMENT^^0
"BLD",9462,"KRN",409.61,"NM","B","KMPV MANAGEMENT",1)

"BLD",9462,"KRN",771,0)
771
"BLD",9462,"KRN",779.2,0)
779.2
"BLD",9462,"KRN",870,0)
870
"BLD",9462,"KRN",8989.51,0)
8989.51
"BLD",9462,"KRN",8989.52,0)
8989.52
"BLD",9462,"KRN",8994,0)
8994
"BLD",9462,"KRN","B",.4,.4)

"BLD",9462,"KRN","B",.401,.401)

"BLD",9462,"KRN","B",.402,.402)

"BLD",9462,"KRN","B",.403,.403)

"BLD",9462,"KRN","B",.5,.5)

"BLD",9462,"KRN","B",.84,.84)

"BLD",9462,"KRN","B",3.6,3.6)

"BLD",9462,"KRN","B",3.8,3.8)

"BLD",9462,"KRN","B",9.2,9.2)

"BLD",9462,"KRN","B",9.8,9.8)

"BLD",9462,"KRN","B",19,19)

"BLD",9462,"KRN","B",19.1,19.1)

"BLD",9462,"KRN","B",101,101)

"BLD",9462,"KRN","B",409.61,409.61)

"BLD",9462,"KRN","B",771,771)

"BLD",9462,"KRN","B",779.2,779.2)

"BLD",9462,"KRN","B",870,870)

"BLD",9462,"KRN","B",8989.51,8989.51)

"BLD",9462,"KRN","B",8989.52,8989.52)

"BLD",9462,"KRN","B",8994,8994)

"BLD",9462,"PRE")

"BLD",9462,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9462,"QUES",0)
^9.62^^
"BLD",9462,"REQB",0)
^9.611^^
"FIA",8969)
VSM CONFIGURATION
"FIA",8969,0)
^KMPV(8969,
"FIA",8969,0,0)
8969
"FIA",8969,0,1)
y^n^f^^^^n
"FIA",8969,0,10)

"FIA",8969,0,11)

"FIA",8969,0,"RLRO")

"FIA",8969,0,"VR")
1.0^KMPV
"FIA",8969,8969)
0
"FIA",8969.02)
VSM MONITOR DEFAULTS
"FIA",8969.02,0)
^KMPV(8969.02,
"FIA",8969.02,0,0)
8969.02
"FIA",8969.02,0,1)
y^n^f^^^^n
"FIA",8969.02,0,10)

"FIA",8969.02,0,11)

"FIA",8969.02,0,"RLRO")

"FIA",8969.02,0,"VR")
1.0^KMPV
"FIA",8969.02,8969.02)
0
"FIA",8969.03)
VSM CACHE TASK LOG
"FIA",8969.03,0)
^KMPV(8969.03,
"FIA",8969.03,0,0)
8969.03D
"FIA",8969.03,0,1)
y^n^f^^^^n
"FIA",8969.03,0,10)

"FIA",8969.03,0,11)

"FIA",8969.03,0,"RLRO")

"FIA",8969.03,0,"VR")
1.0^KMPV
"FIA",8969.03,8969.03)
0
"INIT")
KMPVPST1
"IX",8969.03,8969.03,"C",0)
8969.03^C^DATE AND NODE^R^^R^IR^I^8969.03^^^^^LS
"IX",8969.03,8969.03,"C",.1,0)
^^2^2^3150706^^
"IX",8969.03,8969.03,"C",.1,1,0)
This cross reference will be used to lookup the IEN for the record 
"IX",8969.03,8969.03,"C",.1,2,0)
containing monitor RUNTIME data for a specific DATE and NODE.
"IX",8969.03,8969.03,"C",1)
S ^KMPV(8969.03,"C",X(1),$E(X(2),1,50),DA)=""
"IX",8969.03,8969.03,"C",2)
K ^KMPV(8969.03,"C",X(1),$E(X(2),1,50),DA)
"IX",8969.03,8969.03,"C",2.5)
K ^KMPV(8969.03,"C")
"IX",8969.03,8969.03,"C",11.1,0)
^.114IA^2^2
"IX",8969.03,8969.03,"C",11.1,1,0)
1^F^8969.03^.01^^1^F
"IX",8969.03,8969.03,"C",11.1,2,0)
2^F^8969.03^.02^50^2^F
"KRN",.403,152,-1)
0^1
"KRN",.403,152,0)
KMPV EDIT CONFIGURATION^@^@^^3141014.1428^^^8969^0^0^1
"KRN",.403,152,40,0)
^.4031I^1^1
"KRN",.403,152,40,1,0)
1^^1,1
"KRN",.403,152,40,1,1)
Page 1
"KRN",.403,152,40,1,40,0)
^.4032IP^557^2
"KRN",.403,152,40,1,40,554,0)
KMPV EDIT CFG^1^1,1^e
"KRN",.403,152,40,1,40,557,0)
KMPV EDIT TITLE^2^16,1^d
"KRN",.403,153,-1)
0^2
"KRN",.403,153,0)
KMPV VIEW CONFIGURATION^@^@^^3141015.0848^^^8969^1^0^1
"KRN",.403,153,40,0)
^.4031I^1^1
"KRN",.403,153,40,1,0)
1^^1,1
"KRN",.403,153,40,1,1)
Page 1
"KRN",.403,153,40,1,40,0)
^.4032IP^556^2
"KRN",.403,153,40,1,40,555,0)
KMPV VIEW CFG^1^1,1^d
"KRN",.403,153,40,1,40,556,0)
KMPV VIEW TITLE^2^16,1^d
"KRN",.404,554,0)
KMPV EDIT CFG^8969
"KRN",.404,554,40,0)
^.4044I^9^7
"KRN",.404,554,40,1,0)
1^EDIT VSM CONFIGURATION^1
"KRN",.404,554,40,1,2)
^^1,27
"KRN",.404,554,40,2,0)
2^DAYS TO KEEP DATA^3
"KRN",.404,554,40,2,1)
1.01
"KRN",.404,554,40,2,2)
3,22^1^3,1
"KRN",.404,554,40,3,0)
3^COLLECTION INTERVAL^3
"KRN",.404,554,40,3,1)
1.02
"KRN",.404,554,40,3,2)
5,22^2^5,1
"KRN",.404,554,40,6,0)
4^ALLOW TEST SYSTEM^3
"KRN",.404,554,40,6,1)
1.04
"KRN",.404,554,40,6,2)
7,22^3^7,1
"KRN",.404,554,40,7,0)
5^LOCAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,554,40,7,1)
3.04
"KRN",.404,554,40,7,2)
9,30^50^9,1
"KRN",.404,554,40,8,0)
7^TASKMAN SCHEDULE START^3
"KRN",.404,554,40,8,1)
1.06
"KRN",.404,554,40,8,2)
13,30^20^13,1
"KRN",.404,554,40,9,0)
6^TASKMAN SCHEDULE FREQUENCY^3
"KRN",.404,554,40,9,1)
1.05
"KRN",.404,554,40,9,2)
11,30^10^11,1
"KRN",.404,555,0)
KMPV VIEW CFG^8969^
"KRN",.404,555,40,0)
^.4044I^23^19
"KRN",.404,555,40,2,0)
3^ONOFF^3
"KRN",.404,555,40,2,1)
.02
"KRN",.404,555,40,2,2)
3,27^3^3,20
"KRN",.404,555,40,3,0)
4^VERSION^3
"KRN",.404,555,40,3,1)
.04
"KRN",.404,555,40,3,2)
3,41^6^3,32
"KRN",.404,555,40,4,0)
5^INSTALL DATE^3
"KRN",.404,555,40,4,1)
.05
"KRN",.404,555,40,4,2)
3,62^17^3,48
"KRN",.404,555,40,5,0)
11^DAYS TO KEEP DATA^3
"KRN",.404,555,40,5,1)
1.01
"KRN",.404,555,40,5,2)
6,77^1^6,56
"KRN",.404,555,40,6,0)
10^COLLECTION INTERVAL^3
"KRN",.404,555,40,6,1)
1.02
"KRN",.404,555,40,6,2)
5,77^2^5,56
"KRN",.404,555,40,9,0)
13^NATIONAL DATA EMAIL ADDRESS^3
"KRN",.404,555,40,9,1)
3.01
"KRN",.404,555,40,9,2)
10,30^50^10,1
"KRN",.404,555,40,10,0)
14^NATIONAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,555,40,10,1)
3.02
"KRN",.404,555,40,10,2)
11,33^47^11,1
"KRN",.404,555,40,11,0)
15^VSM CFG EMAIL ADDRESS^3
"KRN",.404,555,40,11,1)
3.03
"KRN",.404,555,40,11,2)
12,24^50^12,1
"KRN",.404,555,40,12,0)
16^LOCAL SUPPORT EMAIL ADDRESS^3
"KRN",.404,555,40,12,1)
3.04
"KRN",.404,555,40,12,2)
13,30^50^13,1
"KRN",.404,555,40,13,0)
17^LAST START TIME^3
"KRN",.404,555,40,13,1)
2.01
"KRN",.404,555,40,13,2)
15,18^20^15,1
"KRN",.404,555,40,14,0)
18^LAST STOP TIME^3
"KRN",.404,555,40,14,1)
2.02
"KRN",.404,555,40,14,2)
15,57^20^15,41
"KRN",.404,555,40,15,0)
19^LAST RUN TIME^3
"KRN",.404,555,40,15,1)
2.03
"KRN",.404,555,40,15,2)
16,18^4^16,1
"KRN",.404,555,40,16,0)
12^ALLOW TEST SYSTEM^3
"KRN",.404,555,40,16,1)
1.04
"KRN",.404,555,40,16,2)
7,77^3^7,56
"KRN",.404,555,40,18,0)
2^MONITOR KEY^3
"KRN",.404,555,40,18,1)
.01
"KRN",.404,555,40,18,2)
3,14^4^3,1
"KRN",.404,555,40,19,0)
6^TASKMAN SCHEDULE START^3
"KRN",.404,555,40,19,1)
1.06
"KRN",.404,555,40,19,2)
5,29^20^5,1
"KRN",.404,555,40,20,0)
7^TASKMAN SCHEDULE FREQUENCY^3
"KRN",.404,555,40,20,1)
1.05
"KRN",.404,555,40,20,2)
6,29^10^6,1
"KRN",.404,555,40,21,0)
8^TASKMAN OPTION^3
"KRN",.404,555,40,21,1)
1.07
"KRN",.404,555,40,21,2)
7,19^35^7,1
"KRN",.404,555,40,22,0)
1^VSM CONFIGURATION FOR ^3
"KRN",.404,555,40,22,1)
.03
"KRN",.404,555,40,22,2)
1,34^40^1,10
"KRN",.404,555,40,23,0)
9^CACHE DAILY TASK^3
"KRN",.404,555,40,23,1)
1.03
"KRN",.404,555,40,23,2)
8,19^25^8,1
"KRN",.404,556,0)
KMPV VIEW TITLE^8969^
"KRN",.404,556,40,0)
^.4044I^^0
"KRN",.404,557,0)
KMPV EDIT TITLE^8969^
"KRN",.404,557,40,0)
^.4044I^1^1
"KRN",.404,557,40,1,0)
8^^3
"KRN",.404,557,40,1,1)
.03
"KRN",.404,557,40,1,2)
1,24^40
"KRN",.404,557,40,1,4)
^^^1
"KRN",19,2913279,-1)
2^5
"KRN",19,2913279,0)
XTCM MAIN^Capacity Planning^^M^520696071^^^^^^^393
"KRN",19,2913279,10,0)
^19.01IP^14^14
"KRN",19,2913279,10,14,0)
2922043^VSM
"KRN",19,2913279,10,14,"^")
KMPV VSM MANAGEMENT
"KRN",19,2913279,"U")
CAPACITY PLANNING
"KRN",19,2922038,-1)
0^4
"KRN",19,2922038,0)
KMPV-CLIENT-SRV^KMPV-CLIENT-SRV^^S^^^^^^^^
"KRN",19,2922038,25)
KMPVCSRV
"KRN",19,2922038,220)
^R^CPE-CP-SUPPORT^^Y
"KRN",19,2922038,"U")
KMPV-CLIENT-SRV
"KRN",19,2922042,-1)
0^3
"KRN",19,2922042,0)
KMPV VTCM DATA TRANSMISSION^KMPV VTCM DATA TRANSMISSION^^R^^^^^^^^
"KRN",19,2922042,1,0)
^^4^4^3141120^
"KRN",19,2922042,1,1,0)
Daily background job to send VTCM metrics to national database. This job 
"KRN",19,2922042,1,2,0)
should be scheduled to run during non-peak hours.
"KRN",19,2922042,1,3,0)
 
"KRN",19,2922042,1,4,0)
during non-peak hours.
"KRN",19,2922042,25)
SEND^KMPVVTCM
"KRN",19,2922042,200.9)
y^y
"KRN",19,2922042,"U")
KMPV VTCM DATA TRANSMISSION
"KRN",19,2922043,-1)
0^2
"KRN",19,2922043,0)
KMPV VSM MANAGEMENT^VSM MANAGEMENT^^R^^KMPVOPS^^^^^^
"KRN",19,2922043,25)
EN^KMPVLM
"KRN",19,2922043,"U")
VSM MANAGEMENT
"KRN",19,2922044,-1)
0^6
"KRN",19,2922044,0)
KMPV VSTM DATA TRANSMISSION^KMPV VSTM DATA TRANSMISSION^^R^^^^^^^^VISTA SYSTEM MONITOR
"KRN",19,2922044,1,0)
^^2^2^3150414^
"KRN",19,2922044,1,1,0)
Background job to send VSTM metrics to national database. This job should 
"KRN",19,2922044,1,2,0)
be scheduled to run during non-peak hours.
"KRN",19,2922044,25)
SEND^KMPVVSTM
"KRN",19,2922044,200.9)
y^y
"KRN",19,2922044,"U")
KMPV VSTM DATA TRANSMISSION
"KRN",19.1,927,-1)
0^1
"KRN",19.1,927,0)
KMPVOPS^VSM OPERATIONS LOCK
"KRN",101,7857,-1)
0^3
"KRN",101,7857,0)
KMPV MANAGEMENT MENU^KMPV MANAGEMENT MENU^^M^^^^^^^^
"KRN",101,7857,4)
26^6
"KRN",101,7857,10,0)
^101.01PA^8^6
"KRN",101,7857,10,5,0)
7868^STRT^1^
"KRN",101,7857,10,5,"^")
KMPV START MONITOR
"KRN",101,7857,10,6,0)
7869^STOP^2^
"KRN",101,7857,10,6,"^")
KMPV STOP MONITOR
"KRN",101,7857,10,7,0)
7867^VIEW^3^
"KRN",101,7857,10,7,"^")
KMPV VIEW CFG
"KRN",101,7857,10,8,0)
7870^DEL^6^
"KRN",101,7857,10,8,"^")
KMPV DELETE DATA
"KRN",101,7857,10,9,0)
7865^REST^5^
"KRN",101,7857,10,9,"^")
KMPV RESTORE CFG
"KRN",101,7857,10,10,0)
7866^EDIT^4^
"KRN",101,7857,10,10,"^")
KMPV EDIT CFG
"KRN",101,7857,26)
D SHOW^VALM
"KRN",101,7857,28)
Select Action 
"KRN",101,7857,99)
63452,46698
"KRN",101,7865,-1)
0^4
"KRN",101,7865,0)
KMPV RESTORE CFG^Restore CFG^^A^^^^^^^^
"KRN",101,7865,20)
D RESTCFG^KMPVLM
"KRN",101,7865,99)
63417,35298
"KRN",101,7866,-1)
0^2
"KRN",101,7866,0)
KMPV EDIT CFG^Edit CFG^^A^^^^^^^^
"KRN",101,7866,20)
D EDITCFG^KMPVLM
"KRN",101,7866,99)
63417,36668
"KRN",101,7867,-1)
0^7
"KRN",101,7867,0)
KMPV VIEW CFG^View CFG^^A^^^^^^^^
"KRN",101,7867,20)
D VIEWCFG^KMPVLM
"KRN",101,7867,99)
63417,38175
"KRN",101,7868,-1)
0^5
"KRN",101,7868,0)
KMPV START MONITOR^Start Monitor^^A^^^^^^^^
"KRN",101,7868,20)
D STARTMON^KMPVLM
"KRN",101,7868,99)
63417,37931
"KRN",101,7869,-1)
0^6
"KRN",101,7869,0)
KMPV STOP MONITOR^Stop Monitor^^A^^^^^^^^
"KRN",101,7869,20)
D STOPMON^KMPVLM
"KRN",101,7869,99)
63417,37989
"KRN",101,7870,-1)
0^1
"KRN",101,7870,0)
KMPV DELETE DATA^Delete Data^^A^^^^^^^^
"KRN",101,7870,20)
D KILL^KMPVLM
"KRN",101,7870,99)
63419,42385
"KRN",409.61,709,-1)
0^1
"KRN",409.61,709,0)
KMPV MANAGEMENT^1^^80^9^13^0^1^^KMPV MANAGEMENT MENU^VSM MANAGEMENT^2^^1
"KRN",409.61,709,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,709,"COL",0)
^409.621^6^6
"KRN",409.61,709,"COL",1,0)
Monitor^2^8^Monitor
"KRN",409.61,709,"COL",2,0)
Status^12^6^Status^R
"KRN",409.61,709,"COL",3,0)
LastTransmission^20^20^Last Transmission^
"KRN",409.61,709,"COL",4,0)
DLY^42^5^DLY^B
"KRN",409.61,709,"COL",5,0)
COMP^49^5^COMP^B
"KRN",409.61,709,"COL",6,0)
NextTransmission^56^20^Next Transmission^R
"KRN",409.61,709,"COL","B","COMP",5)

"KRN",409.61,709,"COL","B","DLY",4)

"KRN",409.61,709,"COL","B","LastTransmission",3)

"KRN",409.61,709,"COL","B","Monitor",1)

"KRN",409.61,709,"COL","B","NextTransmission",6)

"KRN",409.61,709,"COL","B","Status",2)

"KRN",409.61,709,"FNL")
D EXIT^KMPVLM
"KRN",409.61,709,"HDR")
D HDR^KMPVLM
"KRN",409.61,709,"HLP")
D HELP^KMPVLM
"KRN",409.61,709,"INIT")
D INIT^KMPVLM
"MBREQ")
0
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",8,.403)
.403;8;;;EDEOUT^DIFROMSO(.403,DA,"",XPDA);FPRE^DIFROMSI(.403,"",XPDA);EPRE^DIFROMSI(.403,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.403,DA,"",XPDA);DEL^DIFROMSK(.403,"",%)
"ORD",8,.403,0)
FORM
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",658,-1)
1^1
"PKG",658,0)
VISTA SYSTEM MONITOR^KMPV^VistA System Monitor is a set of CP monitoring tools.
"PKG",658,20,0)
^9.402P^^
"PKG",658,22,0)
^9.49I^1^1
"PKG",658,22,1,0)
1.0^3150911
"PKG",658,22,1,"PAH",1,0)
0^3160711
"PKG",658,22,1,"PAH",1,1,0)
^^1^1^3160711
"PKG",658,22,1,"PAH",1,1,1,0)
VTCM INITIAL INSTALLATION
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","KMPVCBG")
0^2^B127056439
"RTN","KMPVCBG",1,0)
KMPVCBG ;SP/JML VSM background utility functions ;9/1/2015
"RTN","KMPVCBG",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVCBG",3,0)
 ;
"RTN","KMPVCBG",4,0)
 ;
"RTN","KMPVCBG",5,0)
MONLIST(KMPVML) ; Return list of configured Monitors
"RTN","KMPVCBG",6,0)
 K KMPVML
"RTN","KMPVCBG",7,0)
 N KMPVMKEY,KMPVIEN
"RTN","KMPVCBG",8,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",9,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",10,0)
 .S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCBG",11,0)
 .I KMPVIEN>0 S KMPVML(KMPVMKEY)=$P($G(^KMPV(8969,KMPVIEN,0)),"^",3)
"RTN","KMPVCBG",12,0)
 Q
"RTN","KMPVCBG",13,0)
 ;
"RTN","KMPVCBG",14,0)
STARTMON(KMPVMKEY,KMPVAUTO) ; Schedule transmission task in TaskMan and set ONOFF to ON
"RTN","KMPVCBG",15,0)
 N DA,DIE,DIR,DR,DTOUT,DUOUT,X,Y
"RTN","KMPVCBG",16,0)
 N KMPVEARR,KMPVERROR,KMPVNVAL,KMPVOVAL,KMPVRFREQ,KMPVOPT,KMPVSTAT,KMPVSTRT
"RTN","KMPVCBG",17,0)
 ;
"RTN","KMPVCBG",18,0)
 S KMPVAUTO=+$G(KMPVAUTO)
"RTN","KMPVCBG",19,0)
 ; Do not start monitor in test if ALLOW TEST SYSTEM is set to NO
"RTN","KMPVCBG",20,0)
 I $$PROD^KMPVCCFG()="Test",$$GETVAL^KMPVCCFG(KMPVMKEY,"ALLOW TEST SYSTEM",8969)="NO" D  Q
"RTN","KMPVCBG",21,0)
 .Q:KMPVAUTO=1
"RTN","KMPVCBG",22,0)
 .N DIR S DIR(0)="E"
"RTN","KMPVCBG",23,0)
 .S DIR("A",1)="",DIR("A",2)="Cannot start monitor in test environment"
"RTN","KMPVCBG",24,0)
 .S DIR("A",3)="'ALLOW TEST SYSTEM' is set to 'NO'",DIR("A")="Press any key to continue"
"RTN","KMPVCBG",25,0)
 .D ^DIR
"RTN","KMPVCBG",26,0)
 ;
"RTN","KMPVCBG",27,0)
 S KMPVOVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",28,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="No"
"RTN","KMPVCBG",29,0)
 S DIR("?")="Answer YES to start collecting "_KMPVMKEY_" data"
"RTN","KMPVCBG",30,0)
 S DIR("A")="Do you want to start "_KMPVMKEY_" collection?"
"RTN","KMPVCBG",31,0)
 I 'KMPVAUTO D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVCBG",32,0)
 I ($G(Y)=1)!KMPVAUTO D
"RTN","KMPVCBG",33,0)
 .N KMPVOPT,KMPVSTRT,KMPVRFREQ,KMPVERROR,KMPVSTAT
"RTN","KMPVCBG",34,0)
 .S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",35,0)
 .S KMPVSTRT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE START",8969)
"RTN","KMPVCBG",36,0)
 .S KMPVRFREQ=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE FREQUENCY",8969)
"RTN","KMPVCBG",37,0)
 .I KMPVSTRT=""!(KMPVRFREQ="") D  Q
"RTN","KMPVCBG",38,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",39,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",40,0)
 ..S DIR("A",1)="",DIR("A",2)="This is not configured correctly to be a repeating task."
"RTN","KMPVCBG",41,0)
 ..S DIR("A",3)="Check VSM Configuration related to this task. Task not started."
"RTN","KMPVCBG",42,0)
 ..S DIR("A")="Press any key to continue."
"RTN","KMPVCBG",43,0)
 ..D ^DIR
"RTN","KMPVCBG",44,0)
 .;
"RTN","KMPVCBG",45,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","ON",.KMPVEARR)
"RTN","KMPVCBG",46,0)
 .I KMPVSTAT'=0 D  Q
"RTN","KMPVCBG",47,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",48,0)
 ..N DIR S DIR(0)="E",DIR("A",1)=""
"RTN","KMPVCBG",49,0)
 ..S DIR("A",2)="ERROR: Unable to set start switch for "_KMPVMKEY,DIR("A")="Press any key to continue."
"RTN","KMPVCBG",50,0)
 ..D ^DIR
"RTN","KMPVCBG",51,0)
 .; 
"RTN","KMPVCBG",52,0)
 .D RESCH^XUTMOPT(KMPVOPT,KMPVSTRT,,KMPVRFREQ,"L",.KMPVERROR)
"RTN","KMPVCBG",53,0)
 .I $G(KMPVERROR)=-1 D  Q
"RTN","KMPVCBG",54,0)
 ..S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",55,0)
 ..Q:KMPVAUTO=1
"RTN","KMPVCBG",56,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",57,0)
 ..S DIR("A",1)="",DIR("A",2)="ERROR: "_KMPVMKEY_" BACKGROUND TASK NOT STARTED!",DIR("A")="Press any key to continue."
"RTN","KMPVCBG",58,0)
 ..I KMPVSTAT>0 S DIR("A",3)="Failed to set 'ONOFF' field back to 'OFF'"
"RTN","KMPVCBG",59,0)
 ..D ^DIR
"RTN","KMPVCBG",60,0)
 ;
"RTN","KMPVCBG",61,0)
 S KMPVNVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",62,0)
 I KMPVOVAL'=KMPVNVAL D CFGMSG()
"RTN","KMPVCBG",63,0)
 Q
"RTN","KMPVCBG",64,0)
 ;
"RTN","KMPVCBG",65,0)
STOPMON(KMPVMKEY) ;   Un-schedule transmission task in TaskMan and set ONOFF to OFF
"RTN","KMPVCBG",66,0)
 N DA,DIE,DIR,DR,DTOUT,DUOUT,X,Y
"RTN","KMPVCBG",67,0)
 N KMPVEARR,KMPVERROR,KMPVNVAL,KMPVOPT,KMPVOVAL,KMPVSTAT
"RTN","KMPVCBG",68,0)
 ;
"RTN","KMPVCBG",69,0)
 S KMPVOVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",70,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="No"
"RTN","KMPVCBG",71,0)
 S DIR("?")="Answer YES to stop collecting "_KMPVMKEY_" data"
"RTN","KMPVCBG",72,0)
 S DIR("A")="Do you want to stop "_KMPVMKEY_" collection?"
"RTN","KMPVCBG",73,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVCBG",74,0)
 I Y D
"RTN","KMPVCBG",75,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",76,0)
 .I KMPVSTAT'=0 D  Q
"RTN","KMPVCBG",77,0)
 ..N DIR S DIR(0)="E",DIR("A",1)=""
"RTN","KMPVCBG",78,0)
 ..S DIR("A",2)="ERROR: Unable to set 'ONOFF' switch to 'OFF' for "_KMPVMKEY,DIR("A")="Press any key to continue."
"RTN","KMPVCBG",79,0)
 ..S DIR("A",3)="Monitor NOT stopped!"
"RTN","KMPVCBG",80,0)
 ..D ^DIR
"RTN","KMPVCBG",81,0)
 .S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",82,0)
 .D RESCH^XUTMOPT(KMPVOPT,"@",,,.KMPVERROR)
"RTN","KMPVCBG",83,0)
 .I $G(KMPVERROR) D  Q
"RTN","KMPVCBG",84,0)
 ..N DIR S DIR(0)="E"
"RTN","KMPVCBG",85,0)
 ..S DIR("A",1)="",DIR("A",2)="ERROR: "_KMPVMKEY_" BACKGROUND TASK NOT STOPPED!",DIR("A")="Press any key to continue."
"RTN","KMPVCBG",86,0)
 ..S DIR("A",3)=$G(KMPVERROR)
"RTN","KMPVCBG",87,0)
 ..D ^DIR
"RTN","KMPVCBG",88,0)
 S KMPVNVAL=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCBG",89,0)
 I KMPVOVAL'=KMPVNVAL D CFGMSG()
"RTN","KMPVCBG",90,0)
 Q
"RTN","KMPVCBG",91,0)
 ;
"RTN","KMPVCBG",92,0)
RESCH(KMPVMKEY,KMPVERR) ; Reschedule transmission task in TaskMan
"RTN","KMPVCBG",93,0)
 K KMPVERR
"RTN","KMPVCBG",94,0)
 N KMPVOPT,KMPVSTRT,KMPVRFREQ,KMPVERROR
"RTN","KMPVCBG",95,0)
 S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",96,0)
 S KMPVSTRT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE START",8969)
"RTN","KMPVCBG",97,0)
 S KMPVRFREQ=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN SCHEDULE FREQUENCY",8969)
"RTN","KMPVCBG",98,0)
 D RESCH^XUTMOPT(KMPVOPT,KMPVSTRT,,KMPVRFREQ,"L",.KMPVERROR)
"RTN","KMPVCBG",99,0)
 I $D(KMPVERROR) D
"RTN","KMPVCBG",100,0)
 .S KMPVERR(1)="Failed to add "_KMPVOPT_" to 'OPTION SCHEDULING' file"
"RTN","KMPVCBG",101,0)
 .S KMPVERR(2)=KMPVERROR
"RTN","KMPVCBG",102,0)
 .S KMPVSTAT=$$SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVEARR)
"RTN","KMPVCBG",103,0)
 .I KMPVSTAT'=0 S KMPVERR(3)=$P(KMPVSTAT,"^",2),KMPVERR(4)="Failed to reset 'ONOFF' to 'OFF' after rescheduling failure."
"RTN","KMPVCBG",104,0)
 Q
"RTN","KMPVCBG",105,0)
 ;
"RTN","KMPVCBG",106,0)
DESCH(KMPVMKEY,KMPVERR) ; De-schedule transmission task in TaskMan
"RTN","KMPVCBG",107,0)
 S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCBG",108,0)
 D RESCH^XUTMOPT(KMPVOPT,"@",,,.KMPVERROR)
"RTN","KMPVCBG",109,0)
 I $D(KMPVERROR) D
"RTN","KMPVCBG",110,0)
 .S KMPVERR(1)="Failed to remove "_KMPVOPT_" from 'OPTION SCHEDULING' file"
"RTN","KMPVCBG",111,0)
 .S KMPVERR(2)=KMPVERROR
"RTN","KMPVCBG",112,0)
 Q
"RTN","KMPVCBG",113,0)
 ;
"RTN","KMPVCBG",114,0)
CANMESS(MTYPE,KMPVMKEY,KMPVSITE,KMPVD) ; Repeatable, configured informational mail messages
"RTN","KMPVCBG",115,0)
 N KMPVEMAIL,KMPVPROD,KMPVTEXT,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",116,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",117,0)
 ;
"RTN","KMPVCBG",118,0)
 I MTYPE="JOBLATE" D
"RTN","KMPVCBG",119,0)
 .S KMPVTEXT($J,1)="Daily "_KMPVMKEY_" job behind for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",120,0)
 .S KMPVTEXT($J,2)="Number of days behind: "_KMPVD
"RTN","KMPVCBG",121,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",122,0)
 .S XMSUB=KMPVMKEY_" DAILY JOB NOT RUN: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",123,0)
 I MTYPE="DELETE" D
"RTN","KMPVCBG",124,0)
 .S KMPVTEXT($J,1)="Purging "_KMPVMKEY_" data for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",125,0)
 .S KMPVTEXT($J,2)="Data purged for: "_KMPVD
"RTN","KMPVCBG",126,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",127,0)
 .S XMSUB=KMPVMKEY_" PURGING DATA -- NOT TRANSMITTED: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",128,0)
 I MTYPE="TRANWARN" D
"RTN","KMPVCBG",129,0)
 .S KMPVTEXT($J,1)="Data transmissions of "_KMPVMKEY_" data late for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",130,0)
 .S KMPVTEXT($J,2)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",131,0)
 .S XMSUB=KMPVMKEY_" Late Transmission Warning: "_$P(KMPVSITE,"^",2)_"  Production="_KMPVPROD
"RTN","KMPVCBG",132,0)
 I MTYPE="FAILTRAN" D
"RTN","KMPVCBG",133,0)
 .S KMPVTEXT($J,1)="Failed transmission for "_$P(KMPVSITE,"^",2)
"RTN","KMPVCBG",134,0)
 .S KMPVTEXT($J,2)="Collection date: "_KMPVD
"RTN","KMPVCBG",135,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",136,0)
 .S XMSUB=KMPVMKEY_" FAILED "_KMPVMKEY_" TRANSMISSION: "_$P(KMPVSITE,"^",2)_"  "_KMPVD_"  Production="_KMPVPROD
"RTN","KMPVCBG",137,0)
 I MTYPE="KILL" D
"RTN","KMPVCBG",138,0)
 .S KMPVTEXT($J,1)="All data deleted at "_$P(KMPVSITE,"^",2)_" for "_KMPVMKEY
"RTN","KMPVCBG",139,0)
 .S KMPVTEXT($J,2)="Username: "_$$USERNAME^KMPVCCFG(DUZ)
"RTN","KMPVCBG",140,0)
 .S KMPVTEXT($J,3)="Message date: "_$ZD(+$H)
"RTN","KMPVCBG",141,0)
 .S XMSUB="EMERGENCY DATA DELETION AT "_$P(KMPVSITE,"^",2)_"  "_KMPVMKEY_"  Production="_KMPVPROD
"RTN","KMPVCBG",142,0)
 Q:$D(XMSUB)=""
"RTN","KMPVCBG",143,0)
 S XMTEXT="KMPVTEXT("_$J_","
"RTN","KMPVCBG",144,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",145,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"LOCAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",146,0)
 D ^XMD
"RTN","KMPVCBG",147,0)
 Q
"RTN","KMPVCBG",148,0)
 ;
"RTN","KMPVCBG",149,0)
SUPMSG(KMPVTEXT) ;  Send email to local/national support mail groups
"RTN","KMPVCBG",150,0)
 N KMPVEMAIL,KMPVPROD,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",151,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",152,0)
 ;
"RTN","KMPVCBG",153,0)
 S XMSUB=KMPVTEXT_" Prod="_KMPVPROD
"RTN","KMPVCBG",154,0)
 S XMTEXT="KMPVTEXT("
"RTN","KMPVCBG",155,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",156,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",157,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"LOCAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",158,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",159,0)
 D ^XMD
"RTN","KMPVCBG",160,0)
 Q
"RTN","KMPVCBG",161,0)
 ;
"RTN","KMPVCBG",162,0)
DBAMSG(KMPVTEXT) ;  Send email to national support mail groups
"RTN","KMPVCBG",163,0)
 N KMPVEMAIL,KMPVPROD,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",164,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",165,0)
 ;
"RTN","KMPVCBG",166,0)
 S XMSUB=KMPVTEXT_" Prod="_KMPVPROD
"RTN","KMPVCBG",167,0)
 S XMTEXT="KMPVTEXT("
"RTN","KMPVCBG",168,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",169,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",170,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"NATIONAL SUPPORT EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",171,0)
 D ^XMD
"RTN","KMPVCBG",172,0)
 Q
"RTN","KMPVCBG",173,0)
 ;
"RTN","KMPVCBG",174,0)
CFGMSG(KMPVRQNAM) ;  Send configuration data to update Location Table at National VSM Database
"RTN","KMPVCBG",175,0)
 N KMPVDOM,KMPVEMAIL,KMPVLN,KMPVMKEY,KMPVPROD,KMPVSINF,KMPVSITE,KMPVUP,KMPVUPCFG,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVCBG",176,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVCBG",177,0)
 ;
"RTN","KMPVCBG",178,0)
 I $G(KMPVRQNAM)="" S KMPVRQNAM=$$USERNAME^KMPVCCFG($G(DUZ))
"RTN","KMPVCBG",179,0)
 S KMPVSITE=$$SITE^VASITE ;IA 10112
"RTN","KMPVCBG",180,0)
 S KMPVLN=1
"RTN","KMPVCBG",181,0)
 S KMPVUP="KMP CFG"
"RTN","KMPVCBG",182,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVCBG",183,0)
 S KMPVSINF=$P(KMPVSITE,U,2)_"^"_$P(KMPVSITE,U,3)_"^"_KMPVDOM_"^"_KMPVPROD
"RTN","KMPVCBG",184,0)
 S KMPVUP(KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVCBG",185,0)
 S KMPVUP(KMPVLN)="UPDATE CONFIG="_+$H_"^"_KMPVRQNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCBG",186,0)
 S KMPVUP(KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVCBG",187,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",188,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",189,0)
 .S KMPVUP(KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG(KMPVMKEY),KMPVLN=KMPVLN+1
"RTN","KMPVCBG",190,0)
 S XMSUB=KMPVUP,XMTEXT="KMPVUP("
"RTN","KMPVCBG",191,0)
 S KMPVMKEY=""
"RTN","KMPVCBG",192,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCBG",193,0)
 .S KMPVEMAIL=$$GETVAL^KMPVCCFG(KMPVMKEY,"VSM CFG EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVCBG",194,0)
 D ^XMD
"RTN","KMPVCBG",195,0)
 Q
"RTN","KMPVCBG",196,0)
 ;
"RTN","KMPVCBG",197,0)
PURGEDLY(KMPVMKEY) ; Purge any data older than VSM CONFIURATION file specifies
"RTN","KMPVCBG",198,0)
 N KMPVCURH,KMPVH,KMPVKEEP
"RTN","KMPVCBG",199,0)
 S KMPVH="",KMPVCURH=+$H,KMPVKEEP=$$GETVAL^KMPVCCFG(KMPVMKEY,"DAYS TO KEEP DATA",8969)
"RTN","KMPVCBG",200,0)
 F  S KMPVH=$O(^KMPTMP("KMPV",KMPVMKEY,"DLY",KMPVH)) Q:KMPVH=""  D
"RTN","KMPVCBG",201,0)
 .I (KMPVCURH-KMPVH)>KMPVKEEP K ^KMPTMP("KMPV",KMPVMKEY,"DLY",KMPVH)
"RTN","KMPVCBG",202,0)
 Q
"RTN","KMPVCBG",203,0)
 ;
"RTN","KMPVCBG",204,0)
KMPVTSK(KMPVNSP) ; CHECK CREATE OR RESUME KMPVRUN TASK IN CACHE TASKMGR
"RTN","KMPVCBG",205,0)
 N I,KMPVMSG,KMPVNSPE,KMPVROLS,KMPVTASK,KMPVTFLG,KMPVTSK,KMPVTSKS
"RTN","KMPVCBG",206,0)
 ;
"RTN","KMPVCBG",207,0)
 ; Start: only in KMPVCBG version - comment out for ZSTU
"RTN","KMPVCBG",208,0)
 S KMPVROLS=$ROLES
"RTN","KMPVCBG",209,0)
 I (KMPVROLS'["%All")&(KMPVROLS'["%Manager") D  Q
"RTN","KMPVCBG",210,0)
 .W !,"You must have either the %Manager or the %All Role",!
"RTN","KMPVCBG",211,0)
 ; End: only in KMPV version ----
"RTN","KMPVCBG",212,0)
 ;
"RTN","KMPVCBG",213,0)
 I '$D(KMPVNSP)||'##Class(%SYS.Namespace).Exists(KMPVNSP) S KMPVNSP=$ZDEFNSP
"RTN","KMPVCBG",214,0)
 S KMPVTSK="KMPVRUN"
"RTN","KMPVCBG",215,0)
 I KMPVNSP'=$ZDEFNSP S KMPVTSK=KMPVTSK_"_"_KMPVNSP
"RTN","KMPVCBG",216,0)
 S KMPVMSG="CHECKING KMPV SETUP IN "_KMPVNSP_" NAMESPACE..."
"RTN","KMPVCBG",217,0)
 W !,KMPVMSG,!!
"RTN","KMPVCBG",218,0)
 DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",219,0)
 ; Start: only in ZSTU version - comment out for KMPVCBG
"RTN","KMPVCBG",220,0)
 ;I '$$EXIST^%R("KMPVRUN",KMPVNSP) D  Q "VSMRUN Check Complete... No Routine."
"RTN","KMPVCBG",221,0)
 ;.S KMPVMSG(1)="KMPVRUN routine does not exist in "_KMPVNSP_" namespace."
"RTN","KMPVCBG",222,0)
 ;.S KMPVMSG(2)="Please verify that patch KMPV*1.0*0 has been successfully installed."
"RTN","KMPVCBG",223,0)
 ;.F I=1:1:2 W !,KMPVMSG(I) DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG(I),0,0)
"RTN","KMPVCBG",224,0)
 ;.W !
"RTN","KMPVCBG",225,0)
 ; End: only in ZSTU version ----
"RTN","KMPVCBG",226,0)
 S KMPVTFLG=0
"RTN","KMPVCBG",227,0)
 S KMPVTSKS=##class(%ResultSet).%New("%SYS.TaskSuper.TaskListDetail")
"RTN","KMPVCBG",228,0)
 S KMPVSTAT=KMPVTSKS.Execute()
"RTN","KMPVCBG",229,0)
 D DisplayError^%apiOBJ(KMPVSTAT)
"RTN","KMPVCBG",230,0)
 while KMPVTSKS.Next() {
"RTN","KMPVCBG",231,0)
 if (KMPVTSKS.GetDataByName("Task Name")=KMPVTSK) {
"RTN","KMPVCBG",232,0)
 	set KMPVTID=KMPVTSKS.GetDataByName("ID")
"RTN","KMPVCBG",233,0)
 	set KMPVTRUN=KMPVTSKS.GetDataByName("Next Scheduled Date")_" at "_KMPVTSKS.GetDataByName("Next Scheduled Time")
"RTN","KMPVCBG",234,0)
 	if KMPVTSKS.GetDataByName("Suspended")'="" {
"RTN","KMPVCBG",235,0)
 		do ##class(%SYS.Task).Resume(KMPVTID)
"RTN","KMPVCBG",236,0)
 		S KMPVMSG=KMPVTSK_" Task #"_KMPVTID_" Exists and Resumed to Run at "_KMPVTRUN
"RTN","KMPVCBG",237,0)
 	} Else {
"RTN","KMPVCBG",238,0)
 		S KMPVMSG=KMPVTSK_" Task #"_KMPVTID_" Exists and Scheduled to Run at "_KMPVTRUN
"RTN","KMPVCBG",239,0)
 		}
"RTN","KMPVCBG",240,0)
 	set KMPVTFLG=1
"RTN","KMPVCBG",241,0)
 	W !,KMPVMSG
"RTN","KMPVCBG",242,0)
 	DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",243,0)
 	quit
"RTN","KMPVCBG",244,0)
 		}
"RTN","KMPVCBG",245,0)
 }
"RTN","KMPVCBG",246,0)
 ;
"RTN","KMPVCBG",247,0)
 ;create task if it doesn't exist
"RTN","KMPVCBG",248,0)
 I 'KMPVTFLG D
"RTN","KMPVCBG",249,0)
 .S KMPVTASK=##Class(%SYS.Task).%New()
"RTN","KMPVCBG",250,0)
 .S KMPVTASK.Name=KMPVTSK
"RTN","KMPVCBG",251,0)
 .S KMPVTASK.Description = "Start VSM Collection Drivers"
"RTN","KMPVCBG",252,0)
 .S KMPVTASK.NameSpace=KMPVNSP
"RTN","KMPVCBG",253,0)
 .S KMPVTASK.TaskClass="%SYS.Task.RunLegacyTask"
"RTN","KMPVCBG",254,0)
 .S KMPVTASK.Settings=$lb("ExecuteCode","D RUN^KMPVRUN")
"RTN","KMPVCBG",255,0)
 .S KMPVTASK.RunAsUser = "_SYSTEM"
"RTN","KMPVCBG",256,0)
 .S KMPVTASK.Priority=0
"RTN","KMPVCBG",257,0)
 .S KMPVTASK.StartDate = $p($h,",",1)+1
"RTN","KMPVCBG",258,0)
 .S KMPVTASK.DailyFrequency=0 ;task.DailyFrequencyDisplayToLogical("Once")
"RTN","KMPVCBG",259,0)
 .S KMPVTASK.DailyFrequencyTime=""
"RTN","KMPVCBG",260,0)
 .S KMPVTASK.DailyIncrement=""
"RTN","KMPVCBG",261,0)
 .S KMPVTASK.DailyStartTime=60
"RTN","KMPVCBG",262,0)
 .S KMPVTASK.Expires=0
"RTN","KMPVCBG",263,0)
 .S KMPVTASK.DailyEndTime=""
"RTN","KMPVCBG",264,0)
 .S KMPVTASK.RescheduleOnStart=1
"RTN","KMPVCBG",265,0)
 .S KMPVSTAT=KMPVTASK.%Save()
"RTN","KMPVCBG",266,0)
 .I $System.Status.IsError(KMPVSTAT) D  Q
"RTN","KMPVCBG",267,0)
 ..S KMPVMSG(1)="Error #"_$System.Status.GetErrorCodes(KMPVSTAT)
"RTN","KMPVCBG",268,0)
 ..S KMPVMSG(2)=$System.Status.GetOneStatusText(KMPVSTAT,1)
"RTN","KMPVCBG",269,0)
 ..S KMPVMSG(3)="Failed to Create and Schedule Task "_KMPVTSK_" in Cache Task Manager"
"RTN","KMPVCBG",270,0)
 ..F I=1:1:3 W !,KMPVMSG(I) DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG(I),0,1)
"RTN","KMPVCBG",271,0)
 .S KMPVMSG="Created and scheduled Task "_KMPVTSK_" in Cache Task Manager"
"RTN","KMPVCBG",272,0)
 .W !,KMPVMSG DO ##class(%SYS.System).WriteToConsoleLog("ZSTU: "_KMPVMSG,0,0)
"RTN","KMPVCBG",273,0)
 Q
"RTN","KMPVCBG",274,0)
 ;
"RTN","KMPVCCFG")
0^3^B46283730
"RTN","KMPVCCFG",1,0)
KMPVCCFG ;SP/JML - VSM configuration functions -- APIs for data access ;9/1/2015
"RTN","KMPVCCFG",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVCCFG",3,0)
 ;
"RTN","KMPVCCFG",4,0)
 ;
"RTN","KMPVCCFG",5,0)
 ;  ACCESSOR FUNCTIONS
"RTN","KMPVCCFG",6,0)
 ;
"RTN","KMPVCCFG",7,0)
CFGARR(KMPVMKEY,KMPVCFG,KMPVFLAG) ; Return configuration by monitor in array
"RTN","KMPVCCFG",8,0)
 K KMPVCFG S U="^"
"RTN","KMPVCCFG",9,0)
 N KMPVIEN,KMPV0,KMPV1,KMPV2,KMPV3
"RTN","KMPVCCFG",10,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",11,0)
 Q:$G(KMPVIEN)=""
"RTN","KMPVCCFG",12,0)
 S KMPV0=$G(^KMPV(8969,KMPVIEN,0)),KMPV1=$G(^KMPV(8969,KMPVIEN,1))
"RTN","KMPVCCFG",13,0)
 S KMPV2=$G(^KMPV(8969,KMPVIEN,2)),KMPV3=$G(^KMPV(8969,KMPVIEN,3))
"RTN","KMPVCCFG",14,0)
 S KMPVCFG("ONOFF")=$$GETVAL(KMPVMKEY,"ONOFF",8969,$G(KMPVFLAG)),KMPVCFG("VERSION")=$P(KMPV0,U,4)
"RTN","KMPVCCFG",15,0)
 S KMPVCFG("VERSION INSTALL DATE")=$P(KMPV0,U,5),KMPVCFG("DAYS TO KEEP DATA")=$P(KMPV1,U)
"RTN","KMPVCCFG",16,0)
 S KMPVCFG("COLLECTION INTERVAL")=$P(KMPV1,U,2),KMPVCFG("CACHE DAILY TASK")=$P(KMPV1,U,3)
"RTN","KMPVCCFG",17,0)
 S KMPVCFG("ALLOW TEST SYSTEM")=$$GETVAL(KMPVMKEY,"ALLOW TEST SYSTEM",8969,$G(KMPVFLAG)),KMPVCFG("TASKMAN SCHEDULE FREQUENCY")=$P(KMPV1,U,5)
"RTN","KMPVCCFG",18,0)
 S KMPVCFG("TASKMAN SCHEDULE START")=$P(KMPV1,U,6),KMPVCFG("TASKMAN OPTION")=$P(KMPV1,U,7)
"RTN","KMPVCCFG",19,0)
 S KMPVCFG("LAST START TIME")=$P(KMPV2,U),KMPVCFG("LAST STOP TIME")=$P(KMPV2,U,2)
"RTN","KMPVCCFG",20,0)
 S KMPVCFG("LAST RUN TIME")=$P(KMPV2,U,3),KMPVCFG("NATIONAL DATA EMAIL ADDRESS")=$P(KMPV3,U)
"RTN","KMPVCCFG",21,0)
 S KMPVCFG("NATIONAL SUPPORT EMAIL ADDRESS")=$P(KMPV3,U,2)
"RTN","KMPVCCFG",22,0)
 S KMPVCFG("VSM CFG EMAIL ADDRESS")=$P(KMPV3,U,3),KMPVCFG("LOCAL SUPPORT EMAIL ADDRESS")=$P(KMPV3,U,4)
"RTN","KMPVCCFG",23,0)
 Q
"RTN","KMPVCCFG",24,0)
 ;
"RTN","KMPVCCFG",25,0)
GETDEF(KMPVMKEY,KMPVDEF,KMPVFLAG) ; Return default configuration in array
"RTN","KMPVCCFG",26,0)
 K KMPVDEF S U="^"
"RTN","KMPVCCFG",27,0)
 N KMPVIEN,KMPV0,KMPV1
"RTN","KMPVCCFG",28,0)
 I $D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",29,0)
 Q:$G(KMPVIEN)=""
"RTN","KMPVCCFG",30,0)
 S KMPV0=$G(^KMPV(8969.02,KMPVIEN,0)),KMPV1=$G(^KMPV(8969.02,KMPVIEN,1))
"RTN","KMPVCCFG",31,0)
 S KMPVDEF("DAYS TO KEEP DATA")=$P(KMPV0,U,2),KMPVDEF("COLLECTION INTERVAL")=$P(KMPV0,U,3)
"RTN","KMPVCCFG",32,0)
 S KMPVDEF("CACHE DAILY TASK")=$P(KMPV0,U,4),KMPVDEF("ALLOW TEST SYSTEM")=$P(KMPV0,U,5)
"RTN","KMPVCCFG",33,0)
 S KMPVDEF("TASKMAN SCHEDULE FREQUENCY")=$P(KMPV0,U,6),KMPVDEF("TASKMAN SCHEDULE START")=$P(KMPV0,U,7)
"RTN","KMPVCCFG",34,0)
 S KMPVDEF("TASKMAN OPTION")=$P(KMPV0,U,8),KMPVDEF("NATIONAL DATA EMAIL ADDRESS")=$P(KMPV1,U)
"RTN","KMPVCCFG",35,0)
 S KMPVDEF("NATIONAL SUPPORT EMAIL ADDRESS")=$P(KMPV1,U,2),KMPVDEF("VSM CFG EMAIL ADDRESS")=$P(KMPV1,U,3)
"RTN","KMPVCCFG",36,0)
 Q
"RTN","KMPVCCFG",37,0)
 ;
"RTN","KMPVCCFG",38,0)
CFGSTR(KMPVMKEY,KMPVFLAG) ; Return configuration in "^" delimited string
"RTN","KMPVCCFG",39,0)
 S U="^"
"RTN","KMPVCCFG",40,0)
 N KMPVIEN,KMPV0,KMPV1,KMPV2,KMPV3,KMPVCFG
"RTN","KMPVCCFG",41,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",42,0)
 Q:$G(KMPVIEN)="" ""
"RTN","KMPVCCFG",43,0)
 S KMPVCFG=""
"RTN","KMPVCCFG",44,0)
 S KMPV0=$G(^KMPV(8969,KMPVIEN,0)),KMPV1=$G(^KMPV(8969,KMPVIEN,1))
"RTN","KMPVCCFG",45,0)
 ; MONITOR KEY^ONOFF^VERSION^VERSION INSTALL DATE^DAYS TO KEEP DATA^COLLECTION INTERVAL^SCHEDULE FREQUENCY^SCHEDULE START^ALLOW TEST
"RTN","KMPVCCFG",46,0)
 ; ^CACHE DAILY TASK^TASKMAN TASK
"RTN","KMPVCCFG",47,0)
 S KMPVCFG=KMPVMKEY_U_$$GETVAL(KMPVMKEY,"ONOFF",8969,$G(KMPVFLAG))_U_$P(KMPV0,U,4)_U_$P(KMPV0,U,5)_U_$P(KMPV1,U,1)_U_$P(KMPV1,U,2)_U
"RTN","KMPVCCFG",48,0)
 S KMPVCFG=KMPVCFG_$P(KMPV1,U,5)_U_$P(KMPV1,U,6)_U_$$GETVAL(KMPVMKEY,"ALLOW TEST SYSTEM",8969,$G(KMPVFLAG))_U
"RTN","KMPVCCFG",49,0)
 S KMPVCFG=KMPVCFG_$P(KMPV1,U,3)_U_$P(KMPV1,U,7)
"RTN","KMPVCCFG",50,0)
 Q KMPVCFG
"RTN","KMPVCCFG",51,0)
 ;
"RTN","KMPVCCFG",52,0)
GETVAL(KMPVMKEY,KMPVFLD,KMPVFILE,KMPVFLAG) ; retrieve value from VSM CONFIGURATION or VSM MONITOR DEFAULTS files
"RTN","KMPVCCFG",53,0)
 N KMPVIEN
"RTN","KMPVCCFG",54,0)
 I KMPVFILE=8969,$D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",55,0)
 I KMPVFILE=8969.02,$D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969.02,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",56,0)
 Q:$G(KMPVIEN)="" ""
"RTN","KMPVCCFG",57,0)
 Q $$GET1^DIQ(KMPVFILE,KMPVIEN,KMPVFLD,$G(KMPVFLAG))
"RTN","KMPVCCFG",58,0)
 ;
"RTN","KMPVCCFG",59,0)
 ; SETTER FUNCTIONS
"RTN","KMPVCCFG",60,0)
 ;
"RTN","KMPVCCFG",61,0)
SETONE(KMPVMKEY,KMPVFNAM,KMPVNVAL,KMPVERR) ; set a value into the VSM CONFIGURATION file
"RTN","KMPVCCFG",62,0)
 K KMPVERR,KMPVEARR
"RTN","KMPVCCFG",63,0)
 N KMPVIEN,KMPVEARR,KMPVOVAL,KMPVSTAT,KMPVUP
"RTN","KMPVCCFG",64,0)
 N FDA
"RTN","KMPVCCFG",65,0)
 S KMPVSTAT=0,KMPVLOG=+$G(KMPVLOG)
"RTN","KMPVCCFG",66,0)
 S KMPVOVAL=$$GETVAL(KMPVMKEY,KMPVFNAM,8969)
"RTN","KMPVCCFG",67,0)
 I KMPVOVAL=KMPVNVAL Q KMPVSTAT
"RTN","KMPVCCFG",68,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",69,0)
 I $G(KMPVIEN)="" S KMPVSTAT="1^MONITOR TYPE NOT CONFIGURED" Q KMPVSTAT
"RTN","KMPVCCFG",70,0)
 S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCCFG",71,0)
 I +KMPVFNUM=0 S KMPVSTAT="1^FIELD NAME '"_KMPVFNAM_"' DOES NOT EXIST" Q KMPVSTAT
"RTN","KMPVCCFG",72,0)
 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVNVAL
"RTN","KMPVCCFG",73,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCCFG",74,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",75,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",76,0)
 .S KMPVSTAT="1^FILING ERROR"
"RTN","KMPVCCFG",77,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",78,0)
 ;
"RTN","KMPVCCFG",79,0)
SETVALS(KMPVMKEY,KMPVFVAL,KMPVERR,KMPVLOG) ; set multiple values into the VSM CONFIGURATION file
"RTN","KMPVCCFG",80,0)
 ; KMPVFVAL(FieldName)=FieldValue,  KMPVERR: Output array if errors
"RTN","KMPVCCFG",81,0)
 K KMPVERR,KMPVEARR
"RTN","KMPVCCFG",82,0)
 N KMPVDATA,KMPVIEN,KMVEARR,KMPVFNAM,KMPVFNUM,KMPVSTAT
"RTN","KMPVCCFG",83,0)
 N FDA
"RTN","KMPVCCFG",84,0)
 S KMPVSTAT=0,KMPVLOG=+$G(KMPVLOG)
"RTN","KMPVCCFG",85,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCCFG",86,0)
 I $G(KMPVIEN)="" S KMPVSTAT="1^MONITOR TYPE NOT CONFIGURED" Q KMPVSTAT
"RTN","KMPVCCFG",87,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCCFG",88,0)
 S KMPVFNAM=""
"RTN","KMPVCCFG",89,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCCFG",90,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCCFG",91,0)
 .I KMPVFNUM>0 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCCFG",92,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCCFG",93,0)
 ; If field name does not exist set error array and quit
"RTN","KMPVCCFG",94,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",95,0)
 .S KMPVSTAT="1^FIELD NAME DOES NOT EXIST"
"RTN","KMPVCCFG",96,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",97,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCCFG",98,0)
 ; If filing errors set error array
"RTN","KMPVCCFG",99,0)
 I $D(KMPVEARR) D  Q KMPVSTAT
"RTN","KMPVCCFG",100,0)
 .M KMPVERR=KMPVEARR
"RTN","KMPVCCFG",101,0)
 .S KMPVSTAT="1^FILING ERROR"
"RTN","KMPVCCFG",102,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",103,0)
 ;
"RTN","KMPVCCFG",104,0)
 ; OTHER FUNCTIONS
"RTN","KMPVCCFG",105,0)
 ;
"RTN","KMPVCCFG",106,0)
RESTCFG(KMPVMKEY) ; Restore default configuration to VSM CONFIGURATION file
"RTN","KMPVCCFG",107,0)
 N KMPVSTAT
"RTN","KMPVCCFG",108,0)
 D GETDEF(KMPVMKEY,.KMPVDEF)
"RTN","KMPVCCFG",109,0)
 S KMPVSTAT=$$SETVALS(KMPVMKEY,.KMPVDEF,.KMPVERR)
"RTN","KMPVCCFG",110,0)
 D CFGMSG^KMPVCBG()
"RTN","KMPVCCFG",111,0)
 Q KMPVSTAT
"RTN","KMPVCCFG",112,0)
 ;
"RTN","KMPVCCFG",113,0)
STRSTP(KMPVMKEY,KMPVSTIME) ; Record run time values
"RTN","KMPVCCFG",114,0)
 Q:KMPVMKEY=""
"RTN","KMPVCCFG",115,0)
 Q:KMPVSTIME=""
"RTN","KMPVCCFG",116,0)
 N %,%H,X,KMPVETFM,KMPVFVAL,KMPVSTAT,KMPVSTFM,KMPVTDIFF
"RTN","KMPVCCFG",117,0)
 S %H=KMPVSTIME D YMD^%DTC S KMPVSTFM=X_%
"RTN","KMPVCCFG",118,0)
 S %H=$H D YMD^%DTC S KMPVETFM=X_%
"RTN","KMPVCCFG",119,0)
 S KMPVTDIFF=$$FMDIFF^XLFDT(KMPVETFM,KMPVSTFM,2)
"RTN","KMPVCCFG",120,0)
 S KMPVFVAL("LAST START TIME")=KMPVSTFM
"RTN","KMPVCCFG",121,0)
 S KMPVFVAL("LAST STOP TIME")=KMPVETFM
"RTN","KMPVCCFG",122,0)
 S KMPVFVAL("LAST RUN TIME")=KMPVTDIFF
"RTN","KMPVCCFG",123,0)
 S KMPVSTAT=$$SETVALS(KMPVMKEY,.KMPVFVAL,.KMPVEARR,1)
"RTN","KMPVCCFG",124,0)
 Q
"RTN","KMPVCCFG",125,0)
 ;
"RTN","KMPVCCFG",126,0)
SYSCFG() ; Return system configuration values
"RTN","KMPVCCFG",127,0)
 Q $$VERSION^%ZOSV(1)_"^"_$$OS^%ZOSV_"^"_$$VERSION^%ZOSV(0)_"^"_$$PROD() ; IA 10097
"RTN","KMPVCCFG",128,0)
 ;
"RTN","KMPVCCFG",129,0)
MONSTAT(KMPVTEXT) ; Return status information for all configured monitors
"RTN","KMPVCCFG",130,0)
 K KMPVTEXT
"RTN","KMPVCCFG",131,0)
 N KMPVBGD,KMPVCDAYS,KMPVCOMP,KMPVDDAYS,KMPVDLY,KMPVENT,KMPVI,KMPVML,KMPVMKEY,KMPVOPT,KMPVTASK,Y
"RTN","KMPVCCFG",132,0)
 ;
"RTN","KMPVCCFG",133,0)
 D MONLIST^KMPVCBG(.KMPVML)
"RTN","KMPVCCFG",134,0)
 S KMPVMKEY=""
"RTN","KMPVCCFG",135,0)
 F  S KMPVMKEY=$O(KMPVML(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCCFG",136,0)
 .D CFGARR(KMPVMKEY,.KMPVCFG)
"RTN","KMPVCCFG",137,0)
 .S KMPVDLY=$O(^KMPTMP("KMPV",KMPVMKEY,"DLY",""))
"RTN","KMPVCCFG",138,0)
 .S KMPVDDAYS=$S(KMPVDLY="":0,1:+$H-KMPVDLY)
"RTN","KMPVCCFG",139,0)
 .S KMPVCOMP=$O(^KMPTMP("KMPV",KMPVMKEY,"COMPRESS",""))
"RTN","KMPVCCFG",140,0)
 .S KMPVCDAYS=$S(KMPVCOMP="":0,1:+$H-KMPVCOMP)
"RTN","KMPVCCFG",141,0)
 .S KMPVOPT=$$GETVAL^KMPVCCFG(KMPVMKEY,"TASKMAN OPTION",8969)
"RTN","KMPVCCFG",142,0)
 .D OPTSTAT^XUTMOPT(KMPVOPT,.KMPVBGD)
"RTN","KMPVCCFG",143,0)
 .S KMPVTEXT(KMPVMKEY,"ONOFF")=KMPVCFG("ONOFF")
"RTN","KMPVCCFG",144,0)
 .S KMPVTEXT(KMPVMKEY,"LAST START TIME")=KMPVCFG("LAST START TIME")
"RTN","KMPVCCFG",145,0)
 .S KMPVTEXT(KMPVMKEY,"LAST RUN TIME")=KMPVCFG("LAST RUN TIME")
"RTN","KMPVCCFG",146,0)
 .S KMPVTEXT(KMPVMKEY,"DAILY NODE DAYS")=KMPVDDAYS
"RTN","KMPVCCFG",147,0)
 .S KMPVTEXT(KMPVMKEY,"COMPRESS NODE DAYS")=KMPVCDAYS
"RTN","KMPVCCFG",148,0)
 .S KMPVTEXT(KMPVMKEY,"OPTION SCHEDULE FILE ENTRIES")=$G(KMPVBGD)
"RTN","KMPVCCFG",149,0)
 .S KMPVI=""
"RTN","KMPVCCFG",150,0)
 .F  S KMPVI=$O(KMPVBGD(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCCFG",151,0)
 ..S KMPVENT=$G(KMPVBGD(KMPVI))
"RTN","KMPVCCFG",152,0)
 ..S KMPVTASK=+$P(KMPVENT,"^")
"RTN","KMPVCCFG",153,0)
 ..S Y=$P(KMPVENT,"^",2) D DD^%DT
"RTN","KMPVCCFG",154,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"SCHEDULED TIME")=Y
"RTN","KMPVCCFG",155,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"RESCHEDULE FREQUENCY")=$P(KMPVENT,"^",3)
"RTN","KMPVCCFG",156,0)
 ..S KMPVTEXT(KMPVMKEY,"BGTask",KMPVTASK,"QUEUEING FLAG")=$P(KMPVENT,"^",4)
"RTN","KMPVCCFG",157,0)
 Q
"RTN","KMPVCCFG",158,0)
 ;
"RTN","KMPVCCFG",159,0)
USERNAME(KMPVDUZ) ; Return users name from DUZ
"RTN","KMPVCCFG",160,0)
 N KMPVNAME,KMPVOUT
"RTN","KMPVCCFG",161,0)
 ; IA 10060 for lookup into NEW PERSON file
"RTN","KMPVCCFG",162,0)
 I +KMPVDUZ'>0 Q ""
"RTN","KMPVCCFG",163,0)
 D FIND^DIC(200,"","","A",KMPVDUZ,"","","","","KMPVOUT")
"RTN","KMPVCCFG",164,0)
 S KMPVNAME=$G(KMPVOUT("DILIST",1,1))
"RTN","KMPVCCFG",165,0)
 Q KMPVNAME
"RTN","KMPVCCFG",166,0)
 ;
"RTN","KMPVCCFG",167,0)
PROD() ; Return "Prod" if production, "Test" otherwise
"RTN","KMPVCCFG",168,0)
 N KMPVPROD,Y
"RTN","KMPVCCFG",169,0)
 S Y="" X $G(^%ZOSF("UCI"))
"RTN","KMPVCCFG",170,0)
 S KMPVPROD=$S(Y[$G(^%ZOSF("PROD")):1,1:0)
"RTN","KMPVCCFG",171,0)
 S KMPVPROD=$S(KMPVPROD=1:"Prod",1:"Test")
"RTN","KMPVCCFG",172,0)
 Q KMPVPROD
"RTN","KMPVCCFG",173,0)
 ;
"RTN","KMPVCSRV")
0^4^B116070804
"RTN","KMPVCSRV",1,0)
KMPVCSRV ;SP/JML - VSM Server routine for VistA functions ;9/1/2015
"RTN","KMPVCSRV",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVCSRV",3,0)
 ;
"RTN","KMPVCSRV",4,0)
 ;
"RTN","KMPVCSRV",5,0)
EN ;  Server routine entry point
"RTN","KMPVCSRV",6,0)
 ;
"RTN","KMPVCSRV",7,0)
 Q:'$G(XQMSG)
"RTN","KMPVCSRV",8,0)
 N XMZ,XMRG,XMER
"RTN","KMPVCSRV",9,0)
 S XMZ=XQMSG
"RTN","KMPVCSRV",10,0)
 S XQSUB=$G(XQSUB)
"RTN","KMPVCSRV",11,0)
 N KMPVCHKF,KMPVFNUM,KMPVFUNC,KMPVRQNAM,KMPVSITE,KMPVSNAME,KMPVTEXT
"RTN","KMPVCSRV",12,0)
 ;
"RTN","KMPVCSRV",13,0)
 S KMPVFUNC=$P(XQSUB,"^"),KMPVSNAME=$P(XQSUB,"^",2),KMPVFNUM=$P(XQSUB,"^",3),KMPVRQNAM=$P(XQSUB,"^",4)
"RTN","KMPVCSRV",14,0)
 S KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVCSRV",15,0)
 I KMPVSNAME'=$P(KMPVSITE,"^",2)!(KMPVFNUM'=$P(KMPVSITE,"^",3)) D  Q
"RTN","KMPVCSRV",16,0)
 .S KMPVTEXT="WARN^CLIENT REQUEST LOCATION MISMATCH^"
"RTN","KMPVCSRV",17,0)
 .S KMPVTEXT(1)="SITE DATA IN EMAIL: "_KMPVSNAME_"^"_KMPVFNUM
"RTN","KMPVCSRV",18,0)
 .S KMPVTEXT(2)="SITE DATA AT SITE: "_KMPVSITE
"RTN","KMPVCSRV",19,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",20,0)
 ; verify request is for valid function
"RTN","KMPVCSRV",21,0)
 S KMPVCHKF="^"_KMPVFUNC_"^"
"RTN","KMPVCSRV",22,0)
 I "^ACK^GETSTAT^RESEND^SETCFG^KMPUPDEF^CTMLOG^VBEMPACK^"'[KMPVCHKF D  Q
"RTN","KMPVCSRV",23,0)
 .S KMPVTEXT="WARN^CLIENT REQUEST INVALID FUNCTION^"
"RTN","KMPVCSRV",24,0)
 .S KMPVTEXT(1)="FUNCTION REQUEST="_KMPVFUNC
"RTN","KMPVCSRV",25,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",26,0)
 D @KMPVFUNC
"RTN","KMPVCSRV",27,0)
 Q
"RTN","KMPVCSRV",28,0)
 ; -- Tasks Via Email Requests --
"RTN","KMPVCSRV",29,0)
 ;
"RTN","KMPVCSRV",30,0)
ACK ; Receive acknowledge VSM receipt of VTCM data - delete from local node
"RTN","KMPVCSRV",31,0)
 N KMPVCDATE,KMPVTSTAT
"RTN","KMPVCSRV",32,0)
 N XMER,XMRG
"RTN","KMPVCSRV",33,0)
 ; IA #10073
"RTN","KMPVCSRV",34,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",35,0)
 .I $P(XMRG,"=")="TRANSMISSION STATUS" S KMPVTSTAT=$P(XMRG,"=",2)
"RTN","KMPVCSRV",36,0)
 .I $P(XMRG,"=")="COLLECTION DATE" S KMPVCDATE=$P(XMRG,"=",2)
"RTN","KMPVCSRV",37,0)
 .I $P(XMRG,"=")="COLLECTION TYPE" S KMPVMKEY=$P(XMRG,"=",2)
"RTN","KMPVCSRV",38,0)
 Q:KMPVCDATE=""
"RTN","KMPVCSRV",39,0)
 I KMPVTSTAT="TRANSMISSION RECEIVED" D
"RTN","KMPVCSRV",40,0)
 .I KMPVMKEY="VTCM" K ^KMPTMP("KMPV","VTCM","DLY",KMPVCDATE)
"RTN","KMPVCSRV",41,0)
 .I KMPVMKEY="VSTM" K ^KMPTMP("KMPV","VSTM","DLY",KMPVCDATE)
"RTN","KMPVCSRV",42,0)
 .I KMPVMKEY="VBEM" K ^KMPTMP("KMPV","VBEM","COMPRESS",KMPVCDATE)
"RTN","KMPVCSRV",43,0)
 Q
"RTN","KMPVCSRV",44,0)
 ;
"RTN","KMPVCSRV",45,0)
GETSTAT ; Returns current status of VSM
"RTN","KMPVCSRV",46,0)
 N KMPVFLD,KMPVFNAM,KMPVLN,KMPVMKEY,KMPVSTAT,KMPVTEXT,KMPVTFLD,KMPVTNUM
"RTN","KMPVCSRV",47,0)
 D CFGMSG^KMPVCBG("SERVER-VSMSTAT")
"RTN","KMPVCSRV",48,0)
 Q
"RTN","KMPVCSRV",49,0)
 ;
"RTN","KMPVCSRV",50,0)
RESEND ;  Resend data for one or more monitors
"RTN","KMPVCSRV",51,0)
 N KMPVMKEY,KMPVML
"RTN","KMPVCSRV",52,0)
 N XMER,XMRG
"RTN","KMPVCSRV",53,0)
 ; IA #10073
"RTN","KMPVCSRV",54,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",55,0)
 .I $P(XMRG,"=")="CollectionType" D
"RTN","KMPVCSRV",56,0)
 ..S KMPVMKEY=$P(XMRG,"=",2)
"RTN","KMPVCSRV",57,0)
 ..I KMPVMKEY'="" S KMPVML(KMPVMKEY)=""
"RTN","KMPVCSRV",58,0)
 S KMPVMKEY=""
"RTN","KMPVCSRV",59,0)
 F  S KMPVMKEY=$O(KMPVML(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVCSRV",60,0)
 .I KMPVMKEY="VBEM" D EN^KMPVBETR
"RTN","KMPVCSRV",61,0)
 .I KMPVMKEY="VTCM" D SEND^KMPVVTCM
"RTN","KMPVCSRV",62,0)
 .I KMPVMKEY="VSTM" D SEND^KMPVVSTM
"RTN","KMPVCSRV",63,0)
 Q
"RTN","KMPVCSRV",64,0)
 ;
"RTN","KMPVCSRV",65,0)
SETCFG() ; Change VSM configuration via national server change request
"RTN","KMPVCSRV",66,0)
 N KMPVCALL,KMPVCFG,KMPVCFGAR,KMPVFVAL,KMPVDATA,KMPVERR,KMPVFNAM,KMPVI,KMPVLN
"RTN","KMPVCSRV",67,0)
 N KMPVMKEY,KMPVSET,KMPVSTAT,KMPVTEXT,KMPVVAL,KMPVVALID,KMPVEARR
"RTN","KMPVCSRV",68,0)
 N FDA,XMER,XMRG
"RTN","KMPVCSRV",69,0)
 ;
"RTN","KMPVCSRV",70,0)
 S KMPVMKEY="NONE"
"RTN","KMPVCSRV",71,0)
 ; Read message text and attempt to update VSM configuration
"RTN","KMPVCSRV",72,0)
 ; IA #10073
"RTN","KMPVCSRV",73,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",74,0)
 .I $P(XMRG,"=")="MONITOR KEY" S KMPVMKEY=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",75,0)
 .Q:$P(XMRG,"=")'="UPDATE KMPCFG"
"RTN","KMPVCSRV",76,0)
 .S KMPVDATA=$P(XMRG,"=",2)
"RTN","KMPVCSRV",77,0)
 .S KMPVFNAM=$P(KMPVDATA,"^"),KMPVVAL=$P(KMPVDATA,"^",2)
"RTN","KMPVCSRV",78,0)
 .S KMPVFVAL(KMPVFNAM)=KMPVVAL
"RTN","KMPVCSRV",79,0)
 ;
"RTN","KMPVCSRV",80,0)
 ; verify Monitor Type is valid
"RTN","KMPVCSRV",81,0)
 I $D(^KMPV(8969,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969,"B",KMPVMKEY,""))
"RTN","KMPVCSRV",82,0)
 I $G(KMPVIEN)="" D  Q
"RTN","KMPVCSRV",83,0)
 .S KMPVTEXT="Monitor "_KMPVMKEY_" not defined"
"RTN","KMPVCSRV",84,0)
 .S KMPVTEXT(1)="Monitor "_KMPVMKEY_"not defined. No changes made."
"RTN","KMPVCSRV",85,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",86,0)
 ;
"RTN","KMPVCSRV",87,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCSRV",88,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",89,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",90,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969,KMPVFNAM)
"RTN","KMPVCSRV",91,0)
 .I KMPVFNUM>0 S FDA($J,8969,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",92,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCSRV",93,0)
 ;
"RTN","KMPVCSRV",94,0)
 ; If field name does not exist send message and quit
"RTN","KMPVCSRV",95,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",96,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: field(s) do not exist"
"RTN","KMPVCSRV",97,0)
 .S KMPVTEXT(1)="The following field(s) do not exist in the VSM CONFIGURATION file"
"RTN","KMPVCSRV",98,0)
 .S KMPVFNAM="",KMPVLN=2
"RTN","KMPVCSRV",99,0)
 .F  S KMPVFNAM=$O(KMPVEARR(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",100,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",101,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",102,0)
 ;
"RTN","KMPVCSRV",103,0)
 ; If still good get old values for logging changes
"RTN","KMPVCSRV",104,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",105,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",106,0)
 .S $P(KMPVFVAL(KMPVFNAM),"^",2)=$$GETVAL^KMPVCCFG(KMPVMKEY,KMPVFNAM,8969,"I")
"RTN","KMPVCSRV",107,0)
 ;
"RTN","KMPVCSRV",108,0)
 S KMPVLN=1
"RTN","KMPVCSRV",109,0)
 I $D(KMPVEARR) D  Q 
"RTN","KMPVCSRV",110,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: FILING ERRORS - NO CHANGES MADE"
"RTN","KMPVCSRV",111,0)
 .S KMPVTEXT(KMPVLN)="CONFIGURATION CHANGES NOT APPLIED!",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",112,0)
 .S KMPVTEXT(KMPVLN)="ERROR DETAILS: ",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",113,0)
 .S KMPVI=""
"RTN","KMPVCSRV",114,0)
 .F  S KMPVI=$O(KMPVEARR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",115,0)
 ..S KMPVTEXT(KMPVLN)=KMPVEARR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",116,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",117,0)
 ;
"RTN","KMPVCSRV",118,0)
 ; ATTEMPT TO MAKE CHANGES
"RTN","KMPVCSRV",119,0)
 K KMPVEARR
"RTN","KMPVCSRV",120,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCSRV",121,0)
 ; IF ERRORS SEND MESSAGE WITH ERRORS
"RTN","KMPVCSRV",122,0)
 I $D(KMPVEARR) D  ; Add filing errors to support message
"RTN","KMPVCSRV",123,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",124,0)
 .S KMPVTEXT(KMPVLN)="Changes NOT applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",125,0)
 .S KMPVTEXT(KMPVLN)="Number of errors: "_+KMPVEARR("DIERR"),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",126,0)
 .S KMPVENUM=""
"RTN","KMPVCSRV",127,0)
 .F  S KMPVENUM=$O(KMPVEARR("DIERR",KMPVENUM)) Q:+KMPVENUM=0  D
"RTN","KMPVCSRV",128,0)
 ..S KMPVTNUM=""
"RTN","KMPVCSRV",129,0)
 ..F  S KMPVTNUM=$O(KMPVEARR("DIERR",KMPVENUM,"TEXT",KMPVTNUM)) Q:+KMPVTNUM=0  D
"RTN","KMPVCSRV",130,0)
 ...S KMPVTEXT(KMPVLN)=KMPVEARR("DIERR",KMPVENUM,"TEXT",KMPVTNUM),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",131,0)
 ; If no FILING errors then list changes in Support Message and Log Changes
"RTN","KMPVCSRV",132,0)
 I '$D(KMPVEARR) D
"RTN","KMPVCSRV",133,0)
 .S KMPVTEXT=KMPVMKEY_" Configuration Update: No Errors"
"RTN","KMPVCSRV",134,0)
 .S KMPVTEXT(KMPVLN)="Changes applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",135,0)
 .S KMPVTEXT(KMPVLN)="CHANGED FIELDS:",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",136,0)
 .; list changes in Support Message
"RTN","KMPVCSRV",137,0)
 .S KMPVFNAM=""
"RTN","KMPVCSRV",138,0)
 .F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",139,0)
 ..S KMPVDATA=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",140,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM_"  :  "_$P(KMPVDATA,"^",2)_" --> "_$P(KMPVDATA,"^"),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",141,0)
 ;
"RTN","KMPVCSRV",142,0)
 ; if end state is 'ON' then re-schedule -- if 'OFF' then de-schedule
"RTN","KMPVCSRV",143,0)
 S KMPVON=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCSRV",144,0)
 I KMPVON="ON" D
"RTN","KMPVCSRV",145,0)
 .D RESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",146,0)
 .S KMPVTEXT(KMPVLN)="Data Transmission task successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",147,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",148,0)
 ..S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",149,0)
 ..S KMPVTEXT(KMPVLN-1)="Data Transmission NOT successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",150,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",151,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",152,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",153,0)
 I KMPVON="OFF" D
"RTN","KMPVCSRV",154,0)
 .D DESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",155,0)
 .S KMPVTEXT(KMPVLN)="Data Transmission task successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",156,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",157,0)
 ..S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",158,0)
 ..S KMPVTEXT(KMPVLN-1)="Data Transmission NOT successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",159,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",160,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",161,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",162,0)
 ;
"RTN","KMPVCSRV",163,0)
 ; Mail config back to National Server
"RTN","KMPVCSRV",164,0)
 D CFGMSG^KMPVCBG("SERVER-VSMCFG")
"RTN","KMPVCSRV",165,0)
 ; Mail results back to SUPPORT mail groups
"RTN","KMPVCSRV",166,0)
 D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",167,0)
 ;
"RTN","KMPVCSRV",168,0)
 Q
"RTN","KMPVCSRV",169,0)
 ;
"RTN","KMPVCSRV",170,0)
KMPUPDEF ; Update VSM MONITOR DEFAULTS file.  Optionally apply defaults to VSM CONFIGURATION file.
"RTN","KMPVCSRV",171,0)
 N KMPVADEF,KMPVDATA,KMPVEARR,KMPVENUM,KMPVFNAM,KMPVFVAL,KMPVI,KMPVIEN,KMPVIEN,KMPVLN,KMPVMKEY
"RTN","KMPVCSRV",172,0)
 N KMPVON,KMPVREST,KMPVTEXT,KMPVTNUM,KMPVVAL
"RTN","KMPVCSRV",173,0)
 N FDA,XMER,XMRG
"RTN","KMPVCSRV",174,0)
 ;
"RTN","KMPVCSRV",175,0)
 S KMPVMKEY="NONE"
"RTN","KMPVCSRV",176,0)
 ; Read message text to get data to change
"RTN","KMPVCSRV",177,0)
 ; IA #10073
"RTN","KMPVCSRV",178,0)
 F  D REC^XMS3 Q:XMER=-1  D
"RTN","KMPVCSRV",179,0)
 .I $P(XMRG,"=")="MONITOR KEY" S KMPVMKEY=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",180,0)
 .I $P(XMRG,"=")="APPLY DEFAULTS" S KMPVADEF=$P(XMRG,"=",2) Q
"RTN","KMPVCSRV",181,0)
 .Q:$P(XMRG,"=")'="UPDATE KMPDEF"
"RTN","KMPVCSRV",182,0)
 .S KMPVDATA=$P(XMRG,"=",2)
"RTN","KMPVCSRV",183,0)
 .S KMPVFNAM=$P(KMPVDATA,"^"),KMPVVAL=$P(KMPVDATA,"^",2)
"RTN","KMPVCSRV",184,0)
 .S KMPVFVAL(KMPVFNAM)=KMPVVAL
"RTN","KMPVCSRV",185,0)
 ;
"RTN","KMPVCSRV",186,0)
 ; verify Monitor Type is valid
"RTN","KMPVCSRV",187,0)
 I $D(^KMPV(8969.02,"B",KMPVMKEY)) S KMPVIEN=$O(^KMPV(8969.02,"B",KMPVMKEY,""))
"RTN","KMPVCSRV",188,0)
 I $G(KMPVIEN)="" D  Q
"RTN","KMPVCSRV",189,0)
 .S KMPVTEXT="Monitor "_KMPVMKEY_" not defined"
"RTN","KMPVCSRV",190,0)
 .S KMPVTEXT(1)="Monitor "_KMPVMKEY_"not defined. No changes made."
"RTN","KMPVCSRV",191,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",192,0)
 ;
"RTN","KMPVCSRV",193,0)
 ;  get field numbers and set FDA array
"RTN","KMPVCSRV",194,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",195,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",196,0)
 .S KMPVFNUM=$$FLDNUM^DILFD(8969.02,KMPVFNAM)
"RTN","KMPVCSRV",197,0)
 .I KMPVFNUM>0 S FDA($J,8969.02,KMPVIEN_",",KMPVFNUM)=KMPVFVAL(KMPVFNAM)
"RTN","KMPVCSRV",198,0)
 .E  S KMPVEARR(KMPVFNAM)=""
"RTN","KMPVCSRV",199,0)
 ; If field name does not exist send message and quit
"RTN","KMPVCSRV",200,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",201,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: field(s) do not exist"
"RTN","KMPVCSRV",202,0)
 .S KMPVTEXT(1)="The following field(s) do not exist in the VSM MONITOR DEFAULTS file"
"RTN","KMPVCSRV",203,0)
 .S KMPVFNAM="",KMPVLN=2
"RTN","KMPVCSRV",204,0)
 .F  S KMPVFNAM=$O(KMPVEARR(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",205,0)
 ..S KMPVTEXT(KMPVLN)=KMPVFNAM,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",206,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",207,0)
 ;
"RTN","KMPVCSRV",208,0)
 ; If still good get old values for logging changes
"RTN","KMPVCSRV",209,0)
 S KMPVFNAM=""
"RTN","KMPVCSRV",210,0)
 F  S KMPVFNAM=$O(KMPVFVAL(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVCSRV",211,0)
 .S $P(KMPVFVAL(KMPVFNAM),"^",2)=$$GETVAL^KMPVCCFG(KMPVMKEY,KMPVFNAM,8969.02,"I")
"RTN","KMPVCSRV",212,0)
 ;
"RTN","KMPVCSRV",213,0)
 ; Update VSM MONITOR DEFAULTS file
"RTN","KMPVCSRV",214,0)
 D FILE^DIE("ET","FDA($J)","KMPVEARR")
"RTN","KMPVCSRV",215,0)
 ;
"RTN","KMPVCSRV",216,0)
 ; If filing errors send message and quit
"RTN","KMPVCSRV",217,0)
 I $D(KMPVEARR) D  Q
"RTN","KMPVCSRV",218,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: Filing Errors",KMPVLN=1
"RTN","KMPVCSRV",219,0)
 .S KMPVI=0
"RTN","KMPVCSRV",220,0)
 .F  S KMPVI=$O(KMPVEARR("DIERR",KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",221,0)
 ..S KMPVTNUM=""
"RTN","KMPVCSRV",222,0)
 ..F  S KMPVTNUM=$O(KMPVEARR("DIERR",KMPVI,"TEXT",KMPVTNUM)) Q:KMPVTNUM=""  D
"RTN","KMPVCSRV",223,0)
 ...S KMPVTEXT(KMPVLN)=KMPVEARR("DIERR",KMPVI,"TEXT",KMPVTNUM),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",224,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",225,0)
 ;
"RTN","KMPVCSRV",226,0)
 ; If not applying defaults send SUPMSG and quit
"RTN","KMPVCSRV",227,0)
 I +$G(KMPVADEF)=0 D  Q
"RTN","KMPVCSRV",228,0)
 .S KMPVTEXT=KMPVMKEY_" Default Vaule Update: Successful"
"RTN","KMPVCSRV",229,0)
 .S KMPVTEXT(1)="Changes made to VSM MONITOR DEFAULTS file"
"RTN","KMPVCSRV",230,0)
 .S KMPVTEXT(2)="Changes not applied to VSM CONFIGURATION file"
"RTN","KMPVCSRV",231,0)
 .D CFGMSG^KMPVCBG("SERVER-VSMUPDEF")
"RTN","KMPVCSRV",232,0)
 .D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",233,0)
 .
"RTN","KMPVCSRV",234,0)
 ;
"RTN","KMPVCSRV",235,0)
 ; if applying defaults set defaults into VSM CONFIGURATION file
"RTN","KMPVCSRV",236,0)
 S KMPVLN=1
"RTN","KMPVCSRV",237,0)
 S KMPVTEXT(KMPVLN)="Changes successfully made to VSM MONITOR DEFAULTS file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",238,0)
 S KMPVSTAT=$$RESTCFG^KMPVCCFG(KMPVMKEY)
"RTN","KMPVCSRV",239,0)
 I KMPVSTAT=0 D
"RTN","KMPVCSRV",240,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update: No Errors"
"RTN","KMPVCSRV",241,0)
 .S KMPVTEXT(KMPVLN)="Changes applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",242,0)
 I KMPVSTAT>0 D
"RTN","KMPVCSRV",243,0)
 .S KMPVTEXT=KMPVMKEY_" Default Value Update:  WITH ERRORS"
"RTN","KMPVCSRV",244,0)
 .S KMPVTEXT(KMPVLN)="Changes NOT applied to VSM CONFIGURATION file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",245,0)
 ;
"RTN","KMPVCSRV",246,0)
 ; if end state is 'ON' then reschedule
"RTN","KMPVCSRV",247,0)
 S KMPVON=$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)
"RTN","KMPVCSRV",248,0)
 I KMPVON="ON" D
"RTN","KMPVCSRV",249,0)
 .D RESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",250,0)
 .I '$D(KMPVERR) S KMPVTEXT(KMPVLN)="Data Transmission task successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",251,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",252,0)
 ..S KMPVTEXT=KMPVMKEY_" Default Value Update: WITH ERRORS"
"RTN","KMPVCSRV",253,0)
 ..S KMPVTEXT(KMPVLN)="Data Transmission NOT successfully rescheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",254,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",255,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",256,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",257,0)
 I KMPVON="OFF" D
"RTN","KMPVCSRV",258,0)
 .D DESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVCSRV",259,0)
 .S KMPVTEXT(KMPVLN)="Data Transmission task successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",260,0)
 .I $D(KMPVERR)>0 D
"RTN","KMPVCSRV",261,0)
 ..S KMPVTEXT=KMPVMKEY_" Configuration Update: WITH ERRORS"
"RTN","KMPVCSRV",262,0)
 ..S KMPVTEXT(KMPVLN-1)="Data Transmission NOT successfully unscheduled",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",263,0)
 ..S KMPVI=""
"RTN","KMPVCSRV",264,0)
 ..F  S KMPVI=$O(KMPVERR(KMPVI)) Q:KMPVI=""  D
"RTN","KMPVCSRV",265,0)
 ...S KMPVTEXT(KMPVLN)=KMPVERR(KMPVI),KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",266,0)
 ;
"RTN","KMPVCSRV",267,0)
 D SUPMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",268,0)
 Q
"RTN","KMPVCSRV",269,0)
 ;
"RTN","KMPVCSRV",270,0)
CTMLOG ; Return run history recorded in the VSM CACHE TASK LOG file
"RTN","KMPVCSRV",271,0)
 N KMPVMKEY,KMPVML,KMPVTEXT
"RTN","KMPVCSRV",272,0)
 N XMER
"RTN","KMPVCSRV",273,0)
 ;
"RTN","KMPVCSRV",274,0)
 S KMPVIEN=0,KMPVLN=1
"RTN","KMPVCSRV",275,0)
 S KMPVTEXT(KMPVLN)="Raw data from VSM CACHE TASK LOG file",KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",276,0)
 F  S KMPVIEN=$O(^KMPV(8969.03,KMPVIEN)) Q:+KMPVIEN=0  D
"RTN","KMPVCSRV",277,0)
 .S KMPVDATA=$G(^KMPV(8969.03,KMPVIEN,0))
"RTN","KMPVCSRV",278,0)
 .S KMPVTEXT(KMPVLN)=KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVCSRV",279,0)
 S KMPVTEXT="Task Manager Run History for "_KMPVSITE
"RTN","KMPVCSRV",280,0)
 D DBAMSG^KMPVCBG(.KMPVTEXT)
"RTN","KMPVCSRV",281,0)
 Q
"RTN","KMPVCSRV",282,0)
 ;
"RTN","KMPVLM")
0^6^B26751962
"RTN","KMPVLM",1,0)
KMPVLM ;SP/JML - VSM List Manager Functions ;9/1/2015
"RTN","KMPVLM",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVLM",3,0)
 ;
"RTN","KMPVLM",4,0)
 ;
"RTN","KMPVLM",5,0)
EN ; Main entry point for VSM MANAGEMENT menu option
"RTN","KMPVLM",6,0)
 D EN^VALM("KMPV MANAGEMENT")
"RTN","KMPVLM",7,0)
 Q
"RTN","KMPVLM",8,0)
 ;
"RTN","KMPVLM",9,0)
HDR ; Header code
"RTN","KMPVLM",10,0)
 N KMPVHEAD,KMPVKEY,KMPVLN,KMPVML,KMPVMNUM,KMPVMSTR
"RTN","KMPVLM",11,0)
 D MONLIST^KMPVCBG(.KMPVML)
"RTN","KMPVLM",12,0)
 S KMPVLN=0
"RTN","KMPVLM",13,0)
 S VALMHDR(KMPVLN)="",KMPVLN=KMPVLN+1
"RTN","KMPVLM",14,0)
 S KMPVHEAD="VistA System Monitor(VSM) -- Status and Configuration"
"RTN","KMPVLM",15,0)
 S KMPVMNUM=(VALMWD-$L(KMPVHEAD))/2,$P(KMPVMSTR," ",KMPVMNUM)=""
"RTN","KMPVLM",16,0)
 S VALMHDR(KMPVLN)=KMPVMSTR_KMPVHEAD,KMPVLN=KMPVLN+1
"RTN","KMPVLM",17,0)
 S VALMHDR(KMPVLN)="",KMPVLN=KMPVLN+1
"RTN","KMPVLM",18,0)
 S KMPVKEY=0
"RTN","KMPVLM",19,0)
 F  S KMPVKEY=$O(KMPVML(KMPVKEY)) Q:KMPVKEY=""  D
"RTN","KMPVLM",20,0)
 .S VALMHDR(KMPVLN)=KMPVKEY_": "_KMPVML(KMPVKEY),KMPVLN=KMPVLN+1
"RTN","KMPVLM",21,0)
 Q
"RTN","KMPVLM",22,0)
 ;
"RTN","KMPVLM",23,0)
INIT ; Initialize variables and list array
"RTN","KMPVLM",24,0)
 D BUILD
"RTN","KMPVLM",25,0)
 Q
"RTN","KMPVLM",26,0)
 ;
"RTN","KMPVLM",27,0)
BUILD ; Build array with collector status information
"RTN","KMPVLM",28,0)
 N KMPVCOMP,KMPVDLY,KMPVMKEY,KMPVNEXT,KMPVSTAT,KMPVTCNT,KMPVTSK,KMPVX
"RTN","KMPVLM",29,0)
 ;
"RTN","KMPVLM",30,0)
 S VALMCNT=0
"RTN","KMPVLM",31,0)
 D MONSTAT^KMPVCCFG(.KMPVSTAT)
"RTN","KMPVLM",32,0)
 S KMPVMKEY=""
"RTN","KMPVLM",33,0)
 F  S KMPVMKEY=$O(KMPVSTAT(KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVLM",34,0)
 .S VALMCNT=VALMCNT+1
"RTN","KMPVLM",35,0)
 .S KMPVX=""
"RTN","KMPVLM",36,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVMKEY,KMPVX,"Monitor")
"RTN","KMPVLM",37,0)
 .S KMPVX=$$SETFLD^VALM1($G(KMPVSTAT(KMPVMKEY,"ONOFF")),KMPVX,"Status")
"RTN","KMPVLM",38,0)
 .S KMPVX=$$SETFLD^VALM1($G(KMPVSTAT(KMPVMKEY,"LAST START TIME")),KMPVX,"LastTransmission")
"RTN","KMPVLM",39,0)
 .S KMPVDLY=$G(KMPVSTAT(KMPVMKEY,"DAILY NODE DAYS"))
"RTN","KMPVLM",40,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVDLY,KMPVX,"DLY")
"RTN","KMPVLM",41,0)
 .S KMPVCOMP=$S(KMPVMKEY="VBEM":$G(KMPVSTAT(KMPVMKEY,"COMPRESS NODE DAYS")),1:"NA")
"RTN","KMPVLM",42,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVCOMP,KMPVX,"COMP")
"RTN","KMPVLM",43,0)
 .S KMPVTSK="",KMPVTCNT=0,KMPVNEXT=""
"RTN","KMPVLM",44,0)
 .F  S KMPVTSK=$O(KMPVSTAT(KMPVMKEY,"BGTask",KMPVTSK)) Q:KMPVTSK=""  D
"RTN","KMPVLM",45,0)
 ..S KMPVTCNT=KMPVTCNT=1
"RTN","KMPVLM",46,0)
 ..S KMPVNEXT=$G(KMPVSTAT(KMPVMKEY,"BGTask",KMPVTSK,"SCHEDULED TIME"))
"RTN","KMPVLM",47,0)
 .I KMPVTCNT>1 S KMPVNEXT="Multiple!"
"RTN","KMPVLM",48,0)
 .S KMPVX=$$SETFLD^VALM1(KMPVNEXT,KMPVX,"NextTransmission")
"RTN","KMPVLM",49,0)
 .D SET^VALM10(VALMCNT,KMPVX,VALMCNT)
"RTN","KMPVLM",50,0)
 .D RESTORE^VALM10(VALMCNT)
"RTN","KMPVLM",51,0)
 .I KMPVDLY>3 D FLDCTRL^VALM10(VALMCNT,"DLY",,1)
"RTN","KMPVLM",52,0)
 .I KMPVCOMP>3 D FLDCTRL^VALM10(VALMCNT,"COMP",,1)
"RTN","KMPVLM",53,0)
 .I KMPVSTAT(KMPVMKEY,"ONOFF")="On",KMPVNEXT="" D 
"RTN","KMPVLM",54,0)
 ..D FLDCTRL^VALM10(VALMCNT,"Status",,1),FLDCTRL^VALM10(VALMCNT,"NextTransmission",,1)
"RTN","KMPVLM",55,0)
 Q
"RTN","KMPVLM",56,0)
 ;
"RTN","KMPVLM",57,0)
STARTMON ; Supports List Manager protocol 'STRT Start Monitor' 
"RTN","KMPVLM",58,0)
 N KMPVMON
"RTN","KMPVLM",59,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",60,0)
 I KMPVMON'=-1 D STARTMON^KMPVCBG($P(KMPVMON,"^",2))
"RTN","KMPVLM",61,0)
 D REFRESH
"RTN","KMPVLM",62,0)
 Q
"RTN","KMPVLM",63,0)
 ;
"RTN","KMPVLM",64,0)
STOPMON ; Supports List Manager protocol 'STOP Stop Monitor'
"RTN","KMPVLM",65,0)
 N KMPVMON
"RTN","KMPVLM",66,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",67,0)
 I KMPVMON'=-1 D STOPMON^KMPVCBG($P(KMPVMON,"^",2))
"RTN","KMPVLM",68,0)
 D REFRESH
"RTN","KMPVLM",69,0)
 Q
"RTN","KMPVLM",70,0)
 ;
"RTN","KMPVLM",71,0)
VIEWCFG ; Supports List Manager protocol 'VIEW View CFG'
"RTN","KMPVLM",72,0)
 N KMPVMON,KMPVMDA
"RTN","KMPVLM",73,0)
 N DDSFILE,DR,DA
"RTN","KMPVLM",74,0)
 ;
"RTN","KMPVLM",75,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",76,0)
 I KMPVMON>0 D
"RTN","KMPVLM",77,0)
 .S DDSFILE=8969,DR="[KMPV VIEW CONFIGURATION]",DA=+KMPVMON
"RTN","KMPVLM",78,0)
 .D ^DDS
"RTN","KMPVLM",79,0)
 D REFRESH
"RTN","KMPVLM",80,0)
 Q
"RTN","KMPVLM",81,0)
 ;
"RTN","KMPVLM",82,0)
EDITCFG ; Supports List Manager protocol 'EDIT Edit CFG'
"RTN","KMPVLM",83,0)
 N KMPVMON,KMPVMDA,KMPVMKEY,KMPVOLD,KMPVNEW,KMPVFNAM,KMPVSET
"RTN","KMPVLM",84,0)
 N DDSFILE,DR,DA
"RTN","KMPVLM",85,0)
 ;
"RTN","KMPVLM",86,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",87,0)
 S KMPVMDA=+KMPVMON,KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",88,0)
 I KMPVMDA>0 D
"RTN","KMPVLM",89,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVOLD)
"RTN","KMPVLM",90,0)
 .S DDSFILE=8969,DR="[KMPV EDIT CONFIGURATION]",DA=+KMPVMDA
"RTN","KMPVLM",91,0)
 .D ^DDS
"RTN","KMPVLM",92,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVNEW)
"RTN","KMPVLM",93,0)
 .S KMPVFNAM="",KMPVSET=0
"RTN","KMPVLM",94,0)
 .F  S KMPVFNAM=$O(KMPVOLD(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVLM",95,0)
 ..I KMPVOLD(KMPVFNAM)'=$G(KMPVNEW(KMPVFNAM)) S KMPVSET=1
"RTN","KMPVLM",96,0)
 .I KMPVSET>0 D CFGMSG^KMPVCBG()
"RTN","KMPVLM",97,0)
 D REFRESH
"RTN","KMPVLM",98,0)
 Q
"RTN","KMPVLM",99,0)
 ;
"RTN","KMPVLM",100,0)
RESTCFG ; Supports List Manager protocol 'REST Restore CFG'
"RTN","KMPVLM",101,0)
 N KMPVMKEY,KMPVSTAT
"RTN","KMPVLM",102,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",103,0)
 I KMPVMON>0 D
"RTN","KMPVLM",104,0)
 .S KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",105,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVOLD)
"RTN","KMPVLM",106,0)
 .S KMPVSTAT=$$RESTCFG^KMPVCCFG(KMPVMKEY)
"RTN","KMPVLM",107,0)
 .D CFGARR^KMPVCCFG(KMPVMKEY,.KMPVNEW)
"RTN","KMPVLM",108,0)
 .S KMPVFNAM="",KMPVSET=0
"RTN","KMPVLM",109,0)
 .F  S KMPVFNAM=$O(KMPVOLD(KMPVFNAM)) Q:KMPVFNAM=""  D
"RTN","KMPVLM",110,0)
 ..I KMPVOLD(KMPVFNAM)'=$G(KMPVNEW(KMPVFNAM)) S KMPVSET=1
"RTN","KMPVLM",111,0)
 .I KMPVSET>0 D CFGMSG^KMPVCBG()
"RTN","KMPVLM",112,0)
 D REFRESH
"RTN","KMPVLM",113,0)
 Q
"RTN","KMPVLM",114,0)
 ;
"RTN","KMPVLM",115,0)
KILL(KMPVMKEY) ; Supports List Manager protocol 'DEL Delete Data
"RTN","KMPVLM",116,0)
 ; Emergency KILL of all data for a given monitor
"RTN","KMPVLM",117,0)
 N DIR,DTOUT,DUOUT,KMPVERR,KMPVLN,KMPVMKEY,KMPVMON,Y
"RTN","KMPVLM",118,0)
 ;
"RTN","KMPVLM",119,0)
 S KMPVMON=$$PICKMON()
"RTN","KMPVLM",120,0)
 S KMPVMKEY=$P(KMPVMON,"^",2)
"RTN","KMPVLM",121,0)
 W ! K DIR S DIR(0)="Y",DIR("B")="NO"
"RTN","KMPVLM",122,0)
 S DIR("?")="Answer YES to KILL all "_KMPVMKEY_" data."
"RTN","KMPVLM",123,0)
 S DIR("A")="Do you want to KILL all local "_KMPVMKEY_" data?"
"RTN","KMPVLM",124,0)
 S DIR("A",1)="This option is for emergency use only."
"RTN","KMPVLM",125,0)
 S DIR("A",2)="Data will be permanently DELETED and "_KMPVMKEY_" monitor will be STOPPED"
"RTN","KMPVLM",126,0)
 D ^DIR Q:$D(DTOUT)!$D(DUOUT)
"RTN","KMPVLM",127,0)
 I Y D
"RTN","KMPVLM",128,0)
 .K DIR
"RTN","KMPVLM",129,0)
 .K ^KMPTMP("KMPV",KMPVMKEY)
"RTN","KMPVLM",130,0)
 .D CANMESS^KMPVCBG("KILL",KMPVMKEY,$$SITE^VASITE,"") ;  IA 10112
"RTN","KMPVLM",131,0)
 .D SETONE^KMPVCCFG(KMPVMKEY,"ONOFF","OFF",.KMPVERR)
"RTN","KMPVLM",132,0)
 .D DESCH^KMPVCBG(KMPVMKEY,.KMPVERR)
"RTN","KMPVLM",133,0)
 .I $D(KMPVERR) D
"RTN","KMPVLM",134,0)
 ..S KMPVLN=""
"RTN","KMPVLM",135,0)
 ..F  S KMPVLN=$O(KMPVERR(KMPVLN)) Q:KMPVLN=""  D
"RTN","KMPVLM",136,0)
 ...W !,KMPVERR(KMPVLN)
"RTN","KMPVLM",137,0)
 ..D PAUSE^VALM1
"RTN","KMPVLM",138,0)
 D REFRESH
"RTN","KMPVLM",139,0)
 Q
"RTN","KMPVLM",140,0)
 ;
"RTN","KMPVLM",141,0)
PICKMON() ; Supports selection of Monitor Type for List Manager functions
"RTN","KMPVLM",142,0)
 N DIC,Y
"RTN","KMPVLM",143,0)
 W !
"RTN","KMPVLM",144,0)
 S DIC=8969,DIC(0)="QEA"
"RTN","KMPVLM",145,0)
 S DIC("A")="Choose Monitor Type: "
"RTN","KMPVLM",146,0)
 D ^DIC
"RTN","KMPVLM",147,0)
 Q Y
"RTN","KMPVLM",148,0)
 ;
"RTN","KMPVLM",149,0)
REFRESH ; Refresh display
"RTN","KMPVLM",150,0)
 DO BUILD
"RTN","KMPVLM",151,0)
 SET VALMBCK="R"
"RTN","KMPVLM",152,0)
 QUIT
"RTN","KMPVLM",153,0)
 ;
"RTN","KMPVLM",154,0)
HELP ; Help code
"RTN","KMPVLM",155,0)
 N X
"RTN","KMPVLM",156,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","KMPVLM",157,0)
 Q
"RTN","KMPVLM",158,0)
 ;
"RTN","KMPVLM",159,0)
EXIT ; Exit code
"RTN","KMPVLM",160,0)
 Q
"RTN","KMPVLM",161,0)
 ;
"RTN","KMPVLM",162,0)
EXPND ; Expand code
"RTN","KMPVLM",163,0)
 Q
"RTN","KMPVLM",164,0)
 ;
"RTN","KMPVPST1")
0^12^B16080867
"RTN","KMPVPST1",1,0)
KMPVPST1 ;SP/JML - VSM VERSION 1 POST INSTALL ROUTINE ;9/1/2015
"RTN","KMPVPST1",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVPST1",3,0)
 ;
"RTN","KMPVPST1",4,0)
 ;
"RTN","KMPVPST1",5,0)
 ;
"RTN","KMPVPST1",6,0)
 N %DT,FDA,X,Y,KMPVDATE,KMPVERR,KMPVMSG,DA,DIK
"RTN","KMPVPST1",7,0)
 S X="T",%DT="ESTX" D ^%DT S KMPVDATE=Y
"RTN","KMPVPST1",8,0)
 ;
"RTN","KMPVPST1",9,0)
 ; KILL ^KMPV in case routine is being run more than once.
"RTN","KMPVPST1",10,0)
 S DA=0,DIK="^KMPV(8969,"
"RTN","KMPVPST1",11,0)
 F  S DA=$O(^KMPV(8969,DA)) Q:+DA=0  D ^DIK
"RTN","KMPVPST1",12,0)
 S DA=0,DIK="^KMPV(8969.02,"
"RTN","KMPVPST1",13,0)
 F  S DA=$O(^KMPV(8969.02,DA)) Q:+DA=0  D ^DIK
"RTN","KMPVPST1",14,0)
 ;
"RTN","KMPVPST1",15,0)
 ; create entries in the VSM CONFIGURAION file for VTCM and VSTM
"RTN","KMPVPST1",16,0)
 ; VTCM
"RTN","KMPVPST1",17,0)
 K FDA,KMPVERR
"RTN","KMPVPST1",18,0)
 S FDA($J,8969,"+1,",.01)="VTCM"
"RTN","KMPVPST1",19,0)
 S FDA($J,8969,"+1,",.02)=0
"RTN","KMPVPST1",20,0)
 S FDA($J,8969,"+1,",.03)="VISTA TIMED COLLECTION MONITOR"
"RTN","KMPVPST1",21,0)
 S FDA($J,8969,"+1,",.04)=1
"RTN","KMPVPST1",22,0)
 S FDA($J,8969,"+1,",.05)=KMPVDATE
"RTN","KMPVPST1",23,0)
 S FDA($J,8969,"+1,",1.01)=7
"RTN","KMPVPST1",24,0)
 S FDA($J,8969,"+1,",1.02)=5
"RTN","KMPVPST1",25,0)
 S FDA($J,8969,"+1,",1.03)="KMPVVTCM"
"RTN","KMPVPST1",26,0)
 S FDA($J,8969,"+1,",1.04)=0
"RTN","KMPVPST1",27,0)
 S FDA($J,8969,"+1,",1.05)="1D"
"RTN","KMPVPST1",28,0)
 S FDA($J,8969,"+1,",1.06)="T+1@01"
"RTN","KMPVPST1",29,0)
 S FDA($J,8969,"+1,",1.07)="KMPV VTCM DATA TRANSMISSION"
"RTN","KMPVPST1",30,0)
 S FDA($J,8969,"+1,",3.01)="s.server@domain.ext"
"RTN","KMPVPST1",31,0)
 S FDA($J,8969,"+1,",3.02)="G.mailgroup@domain.ext"
"RTN","KMPVPST1",32,0)
 S FDA($J,8969,"+1,",3.03)="s.server@domain.ext"
"RTN","KMPVPST1",33,0)
 ; VSTM
"RTN","KMPVPST1",34,0)
 S FDA($J,8969,"+2,",.01)="VSTM"
"RTN","KMPVPST1",35,0)
 S FDA($J,8969,"+2,",.02)=0
"RTN","KMPVPST1",36,0)
 S FDA($J,8969,"+2,",.03)="VISTA STORAGE MONITOR"
"RTN","KMPVPST1",37,0)
 S FDA($J,8969,"+2,",.04)=1
"RTN","KMPVPST1",38,0)
 S FDA($J,8969,"+2,",.05)=KMPVDATE
"RTN","KMPVPST1",39,0)
 S FDA($J,8969,"+2,",1.01)=7
"RTN","KMPVPST1",40,0)
 S FDA($J,8969,"+2,",1.02)=60
"RTN","KMPVPST1",41,0)
 S FDA($J,8969,"+2,",1.03)="KMPVVSTM"
"RTN","KMPVPST1",42,0)
 S FDA($J,8969,"+2,",1.04)=0
"RTN","KMPVPST1",43,0)
 S FDA($J,8969,"+2,",1.05)="1D"
"RTN","KMPVPST1",44,0)
 S FDA($J,8969,"+2,",1.06)="T+1@01"
"RTN","KMPVPST1",45,0)
 S FDA($J,8969,"+2,",1.07)="KMPV VSTM DATA TRANSMISSION"
"RTN","KMPVPST1",46,0)
 S FDA($J,8969,"+2,",3.01)="s.server@domain.ext"
"RTN","KMPVPST1",47,0)
 S FDA($J,8969,"+2,",3.02)="G.mailgroup@domain.ext"
"RTN","KMPVPST1",48,0)
 S FDA($J,8969,"+2,",3.03)="s.server@domain.ext"
"RTN","KMPVPST1",49,0)
 D UPDATE^DIE("","FDA($J)","ZIEN","KMPVERR")
"RTN","KMPVPST1",50,0)
 I $D(KMPVERR) D
"RTN","KMPVPST1",51,0)
 .S KMPVMSG(1)="There was an error in updating the 'VSM CONFIGURATION' file!"
"RTN","KMPVPST1",52,0)
 .S KMPVMSG(2)="Please send message to G.mailgroup@domain.ext for support."
"RTN","KMPVPST1",53,0)
 .S KMPVMSG(3)="OR send email to 'VA IT ESE CPE System Engineering' via Exchange."
"RTN","KMPVPST1",54,0)
 .D MES^XPDUTL(.KMPVMSG)
"RTN","KMPVPST1",55,0)
 ;
"RTN","KMPVPST1",56,0)
 ; create entries in the VSM MONITOR DEFAULTS file for VTCM and VSTM
"RTN","KMPVPST1",57,0)
 ; VTCM
"RTN","KMPVPST1",58,0)
 K FDA,KMPVERR
"RTN","KMPVPST1",59,0)
 S FDA($J,8969.02,"+1,",.01)="VTCM"
"RTN","KMPVPST1",60,0)
 S FDA($J,8969.02,"+1,",.02)=7
"RTN","KMPVPST1",61,0)
 S FDA($J,8969.02,"+1,",.03)=5
"RTN","KMPVPST1",62,0)
 S FDA($J,8969.02,"+1,",.04)="KMPVVTCM"
"RTN","KMPVPST1",63,0)
 S FDA($J,8969.02,"+1,",.05)=0
"RTN","KMPVPST1",64,0)
 S FDA($J,8969.02,"+1,",.06)="1D"
"RTN","KMPVPST1",65,0)
 S FDA($J,8969.02,"+1,",.07)="T+1@01"
"RTN","KMPVPST1",66,0)
 S FDA($J,8969.02,"+1,",.08)="KMPV VTCM DATA TRANSMISSION"
"RTN","KMPVPST1",67,0)
 S FDA($J,8969.02,"+1,",1.01)="s.server@domain.ext"
"RTN","KMPVPST1",68,0)
 S FDA($J,8969.02,"+1,",1.02)="G.mailgroup@domain.ext"
"RTN","KMPVPST1",69,0)
 S FDA($J,8969.02,"+1,",1.03)="s.server@domain.ext"
"RTN","KMPVPST1",70,0)
 ; VSTM
"RTN","KMPVPST1",71,0)
 S FDA($J,8969.02,"+2,",.01)="VSTM"
"RTN","KMPVPST1",72,0)
 S FDA($J,8969.02,"+2,",.02)=7
"RTN","KMPVPST1",73,0)
 S FDA($J,8969.02,"+2,",.03)=60
"RTN","KMPVPST1",74,0)
 S FDA($J,8969.02,"+2,",.04)="KMPVVSTM"
"RTN","KMPVPST1",75,0)
 S FDA($J,8969.02,"+2,",.05)=0
"RTN","KMPVPST1",76,0)
 S FDA($J,8969.02,"+2,",.06)="1D"
"RTN","KMPVPST1",77,0)
 S FDA($J,8969.02,"+2,",.07)="T+1@01"
"RTN","KMPVPST1",78,0)
 S FDA($J,8969.02,"+2,",.08)="KMPV VSTM DATA TRANSMISSION"
"RTN","KMPVPST1",79,0)
 S FDA($J,8969.02,"+2,",1.01)="s.server@domain.ext"
"RTN","KMPVPST1",80,0)
 S FDA($J,8969.02,"+2,",1.02)="G.mailgroup@domain.ext"
"RTN","KMPVPST1",81,0)
 S FDA($J,8969.02,"+2,",1.03)="s.server@domain.ext"
"RTN","KMPVPST1",82,0)
 D UPDATE^DIE("","FDA($J)","ZIEN","KMPVERR")
"RTN","KMPVPST1",83,0)
 I $D(KMPVERR) D
"RTN","KMPVPST1",84,0)
 .S KMPVMSG(1)="There was an error in updating the 'VSM MONITOR DEFAULTS' file!"
"RTN","KMPVPST1",85,0)
 .S KMPVMSG(2)="Please send message to G.mailgroup@domain.ext for support."
"RTN","KMPVPST1",86,0)
 .S KMPVMSG(3)="OR send email to 'VA IT ESE CPE System Engineering' via Exchange."
"RTN","KMPVPST1",87,0)
 .D MES^XPDUTL(.KMPVMSG)
"RTN","KMPVPST1",88,0)
 ;
"RTN","KMPVPST1",89,0)
 ; START MONITORS
"RTN","KMPVPST1",90,0)
 D STARTMON^KMPVCBG("VTCM",1)
"RTN","KMPVPST1",91,0)
 D STARTMON^KMPVCBG("VSTM",1)
"RTN","KMPVPST1",92,0)
 ;
"RTN","KMPVPST1",93,0)
 Q
"RTN","KMPVRUN")
0^8^B4241858
"RTN","KMPVRUN",1,0)
KMPVRUN ;SP/JML - VSM Cache Task Manager driver ;9/1/2015
"RTN","KMPVRUN",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVRUN",3,0)
 ;
"RTN","KMPVRUN",4,0)
 ;
"RTN","KMPVRUN",5,0)
RUN ;  Loop VSM CONFIGURATION file and run collection routine for monitors set to "ON"
"RTN","KMPVRUN",6,0)
 S $ETRAP="D ERR^KMPVRUN"
"RTN","KMPVRUN",7,0)
 N DA,DIK,FDA,Y
"RTN","KMPVRUN",8,0)
 N KMPVDAT,KMPVFNUM,KMPVH,KMPVIEN,KMPVMKEY,KMPVNODE,KMPVPDAT,KMPVROUT,KMPVTASK
"RTN","KMPVRUN",9,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,"^",3) ;  IA 10097
"RTN","KMPVRUN",10,0)
 S KMPVH=+$H
"RTN","KMPVRUN",11,0)
 ;
"RTN","KMPVRUN",12,0)
 ; Ensure process only runs once a day
"RTN","KMPVRUN",13,0)
 ; Lock global,node - note: this node is not real, only for locking mechanism
"RTN","KMPVRUN",14,0)
 L ^KMPV(8969.03,KMPVNODE):30
"RTN","KMPVRUN",15,0)
 ; Quit if currently locked - concurrent processes
"RTN","KMPVRUN",16,0)
 I '$T G CLEANUP
"RTN","KMPVRUN",17,0)
 ;
"RTN","KMPVRUN",18,0)
 S KMPVIEN=$O(^KMPV(8969.03,"C",KMPVH,KMPVNODE,""))
"RTN","KMPVRUN",19,0)
 ; Quit if entry already exists for today - job was run previously
"RTN","KMPVRUN",20,0)
 I KMPVIEN'="" G CLEANUP
"RTN","KMPVRUN",21,0)
 ;
"RTN","KMPVRUN",22,0)
 ; Once single process verified - Execute Tasks and record date/times
"RTN","KMPVRUN",23,0)
 S FDA($J,8969.03,"+1,",.01)=+$H
"RTN","KMPVRUN",24,0)
 S FDA($J,8969.03,"+1,",.02)=KMPVNODE
"RTN","KMPVRUN",25,0)
 S KMPVMKEY=""
"RTN","KMPVRUN",26,0)
 F  S KMPVMKEY=$O(^KMPV(8969,"B",KMPVMKEY)) Q:KMPVMKEY=""  D
"RTN","KMPVRUN",27,0)
 .; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVRUN",28,0)
 .D PURGEDLY^KMPVCBG(KMPVMKEY)
"RTN","KMPVRUN",29,0)
 .Q:$$GETVAL^KMPVCCFG(KMPVMKEY,"ONOFF",8969)'="ON"
"RTN","KMPVRUN",30,0)
 .S KMPVROUT=$$GETVAL^KMPVCCFG(KMPVMKEY,"CACHE DAILY TASK",8969)
"RTN","KMPVRUN",31,0)
 .I KMPVROUT'="" D
"RTN","KMPVRUN",32,0)
 ..S KMPVTASK="RUN^"_KMPVROUT J @KMPVTASK
"RTN","KMPVRUN",33,0)
 ..S KMPVFNUM=+$$FLDNUM^DILFD(8969.03,KMPVMKEY_" RUNTIME")
"RTN","KMPVRUN",34,0)
 ..I KMPVFNUM>0 S FDA($J,8969.03,"+1,",KMPVFNUM)=$$NOW^XLFDT
"RTN","KMPVRUN",35,0)
 D UPDATE^DIE("","FDA($J)","","")
"RTN","KMPVRUN",36,0)
 ;
"RTN","KMPVRUN",37,0)
CLEANUP ; Purge old data in VSM CACHE TASK LOG file and release lock
"RTN","KMPVRUN",38,0)
 S KMPVPDAT=KMPVH-190
"RTN","KMPVRUN",39,0)
 S DIK="^KMPV(8969.03,"
"RTN","KMPVRUN",40,0)
 S KMPVDAT=""
"RTN","KMPVRUN",41,0)
 F  S KMPVDAT=$O(^KMPV(8969.03,"B",KMPVDAT)) Q:KMPVDAT>KMPVPDAT!(KMPVDAT="")  D
"RTN","KMPVRUN",42,0)
 .S DA=""
"RTN","KMPVRUN",43,0)
 .F  S DA=$O(^KMPV(8969.03,"B",KMPVDAT,DA)) Q:DA=""  D ^DIK
"RTN","KMPVRUN",44,0)
 L -^KMPV(8969.03,KMPVNODE)
"RTN","KMPVRUN",45,0)
 Q
"RTN","KMPVRUN",46,0)
 ;
"RTN","KMPVRUN",47,0)
ERR ; Error trap as routine is called from Cache Task Manager
"RTN","KMPVRUN",48,0)
 D ^%ZTER
"RTN","KMPVRUN",49,0)
 D UNWIND^%ZTER
"RTN","KMPVRUN",50,0)
 Q
"RTN","KMPVVSTM")
0^13^B25826060
"RTN","KMPVVSTM",1,0)
KMPVVSTM ;SP/JML - Collect Cache Metrics for the VistA Storage Monitor ;9/1/2015
"RTN","KMPVVSTM",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVVSTM",3,0)
 ;
"RTN","KMPVVSTM",4,0)
 ;
"RTN","KMPVVSTM",5,0)
 ;
"RTN","KMPVVSTM",6,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VSTM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVSTM",7,0)
 ;
"RTN","KMPVVSTM",8,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVSTM",9,0)
 ;
"RTN","KMPVVSTM",10,0)
 ; ^KMPTMP("KMPV","VSTM","DLY"... storage of data for current day
"RTN","KMPVVSTM",11,0)
 ; ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)............. temporary storage for daily VSTM data to be tranmitted
"RTN","KMPVVSTM",12,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVSTM",13,0)
 ;   Data in "DLY" node:
"RTN","KMPVVSTM",14,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of reciept from server.
"RTN","KMPVVSTM",15,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVSTM",16,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVSTM",17,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVSTM",18,0)
 ;    
"RTN","KMPVVSTM",19,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVSTM",20,0)
 ;
"RTN","KMPVVSTM",21,0)
 N KMPVBPM,KMPVBSIZ,KMPVDATA,KMPVDB,KMPVDFSP,KMPVDIR,KMPVDNUM,KMPVEND,KMPVESIZ,KMPVFBLK,KMPVFLAG,KMPVFREE
"RTN","KMPVVSTM",22,0)
 N KMPVFMB,KMPVMAX,KMPVNODE,KMPVRNS,KMPVRSET,KMPVSIZE,KMPVSTAT,KMPVSYSD,KMPVTNS,Y,SYS
"RTN","KMPVVSTM",23,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVSTM",24,0)
 D PURGEDLY^KMPVCBG("VSTM")
"RTN","KMPVVSTM",25,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVSTM",26,0)
 Q:$$GETVAL^KMPVCCFG("VSTM","ONOFF",8969)'="ON"
"RTN","KMPVVSTM",27,0)
 ; Check environment, quit if Test and test systems not allowed
"RTN","KMPVVSTM",28,0)
 I $$PROD^KMPVCCFG()'="Prod",$$GETVAL^KMPVCCFG("VSTM","ALLOW TEST SYSTEM",8969,"I")'=1 Q
"RTN","KMPVVSTM",29,0)
 ; Only run if 15th or last day of the month
"RTN","KMPVVSTM",30,0)
 S KMPVDNUM=$SYSTEM.SQL.DAYOFMONTH(+$H)
"RTN","KMPVVSTM",31,0)
 S KMPVEND=$$LASTDAY()
"RTN","KMPVVSTM",32,0)
 ; SET KMPVTEST="TESTING" TO RUN TEST ON DAYS OTHER THAN THE 15TH OR LAST DAY OF MONTH
"RTN","KMPVVSTM",33,0)
 I $G(KMPVTEST)="TESTING" S KMPVEND=1 K KMPVTEST
"RTN","KMPVVSTM",34,0)
 I (KMPVDNUM=15)!(KMPVEND) D 
"RTN","KMPVVSTM",35,0)
 .D KMPVVSTM^%ZOSVKSD(.KMPVDATA) ; IA 6342
"RTN","KMPVVSTM",36,0)
 .D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3) ;  IA 10097
"RTN","KMPVVSTM",37,0)
 .S KMPVDIR=""
"RTN","KMPVVSTM",38,0)
 .F  S KMPVDIR=$O(KMPVDATA(KMPVDIR)) Q:KMPVDIR=""  D
"RTN","KMPVVSTM",39,0)
 ..S ^KMPTMP("KMPV","VSTM","DLY",+$H,KMPVNODE,KMPVDIR)=$G(KMPVDATA(KMPVDIR))
"RTN","KMPVVSTM",40,0)
 Q
"RTN","KMPVVSTM",41,0)
 ;
"RTN","KMPVVSTM",42,0)
LASTDAY() ; Return 1 if today is the last day of the month
"RTN","KMPVVSTM",43,0)
 N %H,Y,X,%,MON1,MON2
"RTN","KMPVVSTM",44,0)
 ;
"RTN","KMPVVSTM",45,0)
 S %H=$H D YX^%DTC S MON1=$P(Y," ")
"RTN","KMPVVSTM",46,0)
 S %H=$H+1 D YX^%DTC S MON2=$P(Y," ")
"RTN","KMPVVSTM",47,0)
 I MON1=MON2 Q 0
"RTN","KMPVVSTM",48,0)
 Q 1
"RTN","KMPVVSTM",49,0)
 ;
"RTN","KMPVVSTM",50,0)
 ;
"RTN","KMPVVSTM",51,0)
SEND ; Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVVSTM",52,0)
 N KMPVCFG,KMPVDATA,KMPVDOM,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHOUR,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY
"RTN","KMPVVSTM",53,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVPROD,KMPVRT,KMPVSINF,KMPVSITE,KMPVWD
"RTN","KMPVVSTM",54,0)
 N %H
"RTN","KMPVVSTM",55,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVVSTM",56,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVSTM",57,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVSTM",58,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VSTM","LAST START TIME",8969,"I")
"RTN","KMPVVSTM",59,0)
 I KMPVLAST'="" D
"RTN","KMPVVSTM",60,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVSTM",61,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VSTM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVSTM",62,0)
 ;
"RTN","KMPVVSTM",63,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VSTM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVSTM",64,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVVSTM",65,0)
 S KMPVSINF=$P(KMPVSITE,U,2)_"^"_$P(KMPVSITE,U,3)_"^"_KMPVDOM_"^"_KMPVPROD
"RTN","KMPVVSTM",66,0)
 S KMPVHDAY=""
"RTN","KMPVVSTM",67,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)) Q:KMPVHDAY=""  D
"RTN","KMPVVSTM",68,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVSTM",69,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVSTM",70,0)
 ..D CANMESS^KMPVCBG("DELETE","VSTM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)
"RTN","KMPVVSTM",71,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVSTM",72,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVSTM",73,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVSTM",74,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVSTM",75,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVSTM",76,0)
 .I KMPVHDAY<(KMPVHTODAY-1) D CANMESS^KMPVCBG("TRANWARN","VSTM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVSTM",77,0)
 .K ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)
"RTN","KMPVVSTM",78,0)
 .S KMPVLN=1
"RTN","KMPVVSTM",79,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",80,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",81,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",82,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VSTM"),KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",83,0)
 .S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",84,0)
 .S KMPVNODE=""
"RTN","KMPVVSTM",85,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVVSTM",86,0)
 ..S KMPVDIR=""
"RTN","KMPVVSTM",87,0)
 ..F  S KMPVDIR=$O(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE,KMPVDIR)) Q:KMPVDIR=""  D
"RTN","KMPVVSTM",88,0)
 ...S KMPVDATA=$G(^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY,KMPVNODE,KMPVDIR))
"RTN","KMPVVSTM",89,0)
 ...S ^KMPTMP("KMPV","VSTM","TRANSMIT",$J,KMPVLN)="VSTM DATA="_KMPVNODE_U_KMPVDIR_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVVSTM",90,0)
 .D TRANSMIT
"RTN","KMPVVSTM",91,0)
 D STRSTP^KMPVCCFG("VSTM",KMPVHSTRT)
"RTN","KMPVVSTM",92,0)
 Q
"RTN","KMPVVSTM",93,0)
 ;
"RTN","KMPVVSTM",94,0)
TRANSMIT ; Transmit data
"RTN","KMPVVSTM",95,0)
 ; quit if no data to transmit.
"RTN","KMPVVSTM",96,0)
 Q:'$D(^KMPTMP("KMPV","VSTM","TRANSMIT",$J))
"RTN","KMPVVSTM",97,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVSTM",98,0)
 ; send data via mail message.
"RTN","KMPVVSTM",99,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VSTM"",""TRANSMIT"","_$J_","
"RTN","KMPVVSTM",100,0)
 S XMSUB="VSTM DAILY DATA"
"RTN","KMPVVSTM",101,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VSTM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVSTM",102,0)
 D ^XMD
"RTN","KMPVVSTM",103,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVSTM",104,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVSTM",105,0)
 .S ^KMPTMP("KMPV","VSTM","DLY",KMPVHDAY)=XMZ
"RTN","KMPVVSTM",106,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VSTM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVSTM",107,0)
 K ^KMPTMP("KMPV","VSTM","TRANSMIT",$J)
"RTN","KMPVVSTM",108,0)
 Q
"RTN","KMPVVSTM",109,0)
 ;
"RTN","KMPVVTCM")
0^11^B33477833
"RTN","KMPVVTCM",1,0)
KMPVVTCM ;SP/JML - Collect Cache Metrics for the VistA Timed Collection Monitor ;9/1/2015
"RTN","KMPVVTCM",2,0)
 ;;1.0;VISTA SYSTEM MONITOR;;9/1/2015;Build 89
"RTN","KMPVVTCM",3,0)
 ;
"RTN","KMPVVTCM",4,0)
 ;
"RTN","KMPVVTCM",5,0)
RUN ; Collect metrics per configured interval and store in ^KMPTMP("KMPV","VTCM","DLY" -- CALLED VIA CACHE TASK MANAGER
"RTN","KMPVVTCM",6,0)
 ;
"RTN","KMPVVTCM",7,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVTCM",8,0)
 ;  NOTE:  this routine is written to be tasked off daily at prior to 5 minutes past midnight via the Cache Task Manager on each node.
"RTN","KMPVVTCM",9,0)
 ;
"RTN","KMPVVTCM",10,0)
 ; ^KMPTMP("KMPV","VTCM","DLY"... storage of data for current day
"RTN","KMPVVTCM",11,0)
 ; ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)............. temporary storage for daily VTCM data to be tranmitted
"RTN","KMPVVTCM",12,0)
 ;   Data in "TRANSMIT" node is deleted upon transmission
"RTN","KMPVVTCM",13,0)
 ;   Data in "DLY" node:
"RTN","KMPVVTCM",14,0)
 ;    "DLY" Data marked with message number upon transmission - deleted upon Acknowledgement of reciept from server.
"RTN","KMPVVTCM",15,0)
 ;    IF DATA MORE THAN 7 DAYS OLD SEND ERROR MESSAGE TO CPE GROUP AND DELETE DATA
"RTN","KMPVVTCM",16,0)
 ;    IF DATA MORE THAN 1 DAY OLD SEND WARNING MESSAGE TO CPE GROUP AND SEND DATA
"RTN","KMPVVTCM",17,0)
 ;    IF DATA 1 DAY OLD SEND DATA
"RTN","KMPVVTCM",18,0)
 ;    
"RTN","KMPVVTCM",19,0)
 ;-----------------------------------------------------------------------
"RTN","KMPVVTCM",20,0)
 ;
"RTN","KMPVVTCM",21,0)
 N KMPVARR,KMPVCHKH,KMPVH,KMPVHOUR,KMPVHRSEC,KMPVHTIME,KMPVMET,KMPVMIN
"RTN","KMPVVTCM",22,0)
 N KMPVNODE,KMPVOSET,KMPVPROD,KMPVSINT,KMPVSLOT,KMPVSTOP,Y
"RTN","KMPVVTCM",23,0)
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
"RTN","KMPVVTCM",24,0)
 D PURGEDLY^KMPVCBG("VTCM")
"RTN","KMPVVTCM",25,0)
 ; Quit if monitor is not turned on
"RTN","KMPVVTCM",26,0)
 Q:$$GETVAL^KMPVCCFG("VTCM","ONOFF",8969)'="ON"
"RTN","KMPVVTCM",27,0)
 ; Check environment
"RTN","KMPVVTCM",28,0)
 I $$PROD^KMPVCCFG'="Prod",$$GETVAL^KMPVCCFG("VTCM","ALLOW TEST SYSTEM",8969,"I")'=1 Q
"RTN","KMPVVTCM",29,0)
 S U="^"
"RTN","KMPVVTCM",30,0)
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3) ;  IA 10097
"RTN","KMPVVTCM",31,0)
 ;
"RTN","KMPVVTCM",32,0)
 S KMPVSTOP=0,KMPVCHKH=+$H
"RTN","KMPVVTCM",33,0)
 F  D  Q:KMPVSTOP
"RTN","KMPVVTCM",34,0)
 .I $$GETVAL^KMPVCCFG("VTCM","ONOFF",8969)'="ON" S KMPVSTOP=1 Q  ; RUN FLAG SET TO 0
"RTN","KMPVVTCM",35,0)
 .S KMPVH=$H
"RTN","KMPVVTCM",36,0)
 .I KMPVH>KMPVCHKH SET KMPVSTOP=1 Q
"RTN","KMPVVTCM",37,0)
 .S KMPVSINT=$$GETVAL^KMPVCCFG("VTCM","COLLECTION INTERVAL",8969)
"RTN","KMPVVTCM",38,0)
 .M KMPVARR=^CacheTemp.SysMetrics
"RTN","KMPVVTCM",39,0)
 .;
"RTN","KMPVVTCM",40,0)
 .S KMPVMET=$G(KMPVARR("GlobalRefs"))_U_$G(KMPVARR("GlobalRefsPerSecond"))_U_$G(KMPVARR("GlobalSetKill"))
"RTN","KMPVVTCM",41,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("LogicalBlockRequests"))_U_$G(KMPVARR("PhysicalBlockReads"))_U_$G(KMPVARR("PhysicalBlockWrites"))
"RTN","KMPVVTCM",42,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("Processes"))_U_$G(KMPVARR("RoutineCommands"))_U_$G(KMPVARR("RoutineLines"))_U_$G(KMPVARR("RoutineRefs"))
"RTN","KMPVVTCM",43,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("SMHMemUsed"))_U_$G(KMPVARR("SMHPageUsed"))
"RTN","KMPVVTCM",44,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("CSPSessions"))_U_$G(KMPVARR("CacheEfficiency"))
"RTN","KMPVVTCM",45,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("ECPClientBytesPerSecond"))_U_$G(KMPVARR("ECPServerBytesPerSecond"))
"RTN","KMPVVTCM",46,0)
 .S KMPVMET=KMPVMET_U_$G(KMPVARR("Paging"))_U_$G(KMPVARR("Paging","PageSpace"))_U_$G(KMPVARR("Paging","PhysicalMemory"))
"RTN","KMPVVTCM",47,0)
 .;
"RTN","KMPVVTCM",48,0)
 .S KMPVHRSEC=$ZT($P(KMPVH,",",2))
"RTN","KMPVVTCM",49,0)
 .S KMPVHOUR=$P(KMPVHRSEC,":")
"RTN","KMPVVTCM",50,0)
 .S KMPVMIN=$P(KMPVHRSEC,":",2)
"RTN","KMPVVTCM",51,0)
 .S KMPVSLOT=+$P(KMPVMIN/KMPVSINT,".")
"RTN","KMPVVTCM",52,0)
 .S KMPVHTIME=(KMPVHOUR*3600)+(KMPVSLOT*300)
"RTN","KMPVVTCM",53,0)
 .S ^KMPTMP("KMPV","VTCM","DLY",+KMPVH,KMPVNODE,KMPVHTIME)=KMPVMET
"RTN","KMPVVTCM",54,0)
 .H 60*KMPVSINT
"RTN","KMPVVTCM",55,0)
 Q
"RTN","KMPVVTCM",56,0)
 ;
"RTN","KMPVVTCM",57,0)
 ;
"RTN","KMPVVTCM",58,0)
SEND ; Format and send data to CPE once a day -- TASKED VIA TASKMAN
"RTN","KMPVVTCM",59,0)
 N KMPVCFG,KMPVDATA,KMPVDOM,KMPVFMDAY,KMPVHDAY,KMPVHLAST,KMPVHOUR,KMPVHSTRT,KMPVHTODAY,KMPVHYDAY
"RTN","KMPVVTCM",60,0)
 N KMPVKEEP,KMPVLAST,KMPVLN,KMPVNODE,KMPVPROD,KMPVRT,KMPVSINF,KMPVSITE,KMPVWD
"RTN","KMPVVTCM",61,0)
 N %H
"RTN","KMPVVTCM",62,0)
 K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",63,0)
 S KMPVPROD=$$PROD^KMPVCCFG()
"RTN","KMPVVTCM",64,0)
 S KMPVHSTRT=$H,KMPVHTODAY=+KMPVHSTRT,KMPVSITE=$$SITE^VASITE ;  IA 10112
"RTN","KMPVVTCM",65,0)
 S KMPVHYDAY=+$H-1
"RTN","KMPVVTCM",66,0)
 S KMPVLAST=$$GETVAL^KMPVCCFG("VTCM","LAST START TIME",8969,"I")
"RTN","KMPVVTCM",67,0)
 I KMPVLAST'="" D
"RTN","KMPVVTCM",68,0)
 .S X=KMPVLAST D H^%DTC S KMPVHLAST=%H
"RTN","KMPVVTCM",69,0)
 .I KMPVHLAST<KMPVHYDAY D CANMESS^KMPVCBG("JOBLATE","VTCM",KMPVSITE,(KMPVHYDAY-KMPVHLAST))
"RTN","KMPVVTCM",70,0)
 ;
"RTN","KMPVVTCM",71,0)
 S KMPVKEEP=$$GETVAL^KMPVCCFG("VTCM","DAYS TO KEEP DATA",8969)
"RTN","KMPVVTCM",72,0)
 S KMPVDOM=$P($$NETNAME^XMXUTIL(.5),"@",2) ;IA 2734
"RTN","KMPVVTCM",73,0)
 S KMPVSINF=$P(KMPVSITE,U,2)_"^"_$P(KMPVSITE,U,3)_"^"_KMPVDOM_"^"_KMPVPROD
"RTN","KMPVVTCM",74,0)
 S KMPVHDAY=""
"RTN","KMPVVTCM",75,0)
 F  S KMPVHDAY=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)) Q:KMPVHDAY=""!(KMPVHDAY>KMPVHYDAY)  D
"RTN","KMPVVTCM",76,0)
 .; IF OLDER THAN 7 DAYS AND NOT MARKED AS SENT SEND ERROR MESSAGE, KILL NODE AND GO TO NEXT DAY
"RTN","KMPVVTCM",77,0)
 .I KMPVHDAY<(KMPVHTODAY-KMPVKEEP) D  Q
"RTN","KMPVVTCM",78,0)
 ..D CANMESS^KMPVCBG("DELETE","VTCM",KMPVSITE,KMPVHDAY) K ^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)
"RTN","KMPVVTCM",79,0)
 .S KMPVFMDAY=+$$HTFM^XLFDT(KMPVHDAY,1)
"RTN","KMPVVTCM",80,0)
 .S KMPVWD=$$WORKDAY^XUWORKDY(KMPVFMDAY) ; IA#10046
"RTN","KMPVVTCM",81,0)
 .; RETRANSMISSION FLAG: GREATER THAN ZERO MEANS MESSAGE WAS SENT TO CPE BUT ACK MESSAGE NOT YET REC'D
"RTN","KMPVVTCM",82,0)
 .S KMPVRT=$S(+$G(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY))>0:"YES",1:"NO")
"RTN","KMPVVTCM",83,0)
 .; IF BETWEEN 1 AND 7 DAYS OLD AND NOT TRANSMITTED SEND WARNING MESSAGE AND ATTEMPT TO TRANSMIT AGAIN
"RTN","KMPVVTCM",84,0)
 .I KMPVHDAY<(KMPVHTODAY-1)
"RTN","KMPVVTCM",85,0)
 .K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",86,0)
 .S KMPVLN=1
"RTN","KMPVVTCM",87,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="SYSTEM ID="_KMPVSINF,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",88,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="UPDATE CONFIG="_KMPVHDAY_U_KMPVWD_"^DAILY",KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",89,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="SYSTEM CONFIG="_$$SYSCFG^KMPVCCFG(),KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",90,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="MONITOR CONFIG="_$$CFGSTR^KMPVCCFG("VTCM"),KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",91,0)
 .S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="RETRANSMISSION="_KMPVRT,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",92,0)
 .S KMPVNODE=""
"RTN","KMPVVTCM",93,0)
 .F  S KMPVNODE=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE)) Q:KMPVNODE=""  D
"RTN","KMPVVTCM",94,0)
 ..S KMPVHOUR=""
"RTN","KMPVVTCM",95,0)
 ..F  S KMPVHOUR=$O(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE,KMPVHOUR)) Q:KMPVHOUR=""  D
"RTN","KMPVVTCM",96,0)
 ...S KMPVDATA=$G(^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY,KMPVNODE,KMPVHOUR))
"RTN","KMPVVTCM",97,0)
 ...S ^KMPTMP("KMPV","VTCM","TRANSMIT",$J,KMPVLN)="VTCM DATA="_KMPVNODE_U_KMPVHOUR_U_KMPVDATA,KMPVLN=KMPVLN+1
"RTN","KMPVVTCM",98,0)
 .D TRANSMIT
"RTN","KMPVVTCM",99,0)
 D STRSTP^KMPVCCFG("VTCM",KMPVHSTRT)
"RTN","KMPVVTCM",100,0)
 Q
"RTN","KMPVVTCM",101,0)
 ;
"RTN","KMPVVTCM",102,0)
TRANSMIT ; Transmit data
"RTN","KMPVVTCM",103,0)
 ; quit if no data to transmit.
"RTN","KMPVVTCM",104,0)
 Q:'$D(^KMPTMP("KMPV","VTCM","TRANSMIT",$J))
"RTN","KMPVVTCM",105,0)
 N KMPVEMAIL,X,XMSUB,XMTEXT,XMY,XMZ
"RTN","KMPVVTCM",106,0)
 ; send data via mail message.
"RTN","KMPVVTCM",107,0)
 S XMTEXT="^KMPTMP(""KMPV"",""VTCM"",""TRANSMIT"","_$J_","
"RTN","KMPVVTCM",108,0)
 S XMSUB="VTCM DAILY DATA"
"RTN","KMPVVTCM",109,0)
 S KMPVEMAIL=$$GETVAL^KMPVCCFG("VTCM","NATIONAL DATA EMAIL ADDRESS",8969) I KMPVEMAIL'="" S XMY(KMPVEMAIL)=""
"RTN","KMPVVTCM",110,0)
 D ^XMD
"RTN","KMPVVTCM",111,0)
 ; RECORD SUCCESS/FAILURE -- SEND MESSAGE IF FAILURE
"RTN","KMPVVTCM",112,0)
 I +$G(XMZ)>0 D
"RTN","KMPVVTCM",113,0)
 .S ^KMPTMP("KMPV","VTCM","DLY",KMPVHDAY)=XMZ
"RTN","KMPVVTCM",114,0)
 E  D CANMESS^KMPVCBG("FAILTRAN","VTCM",KMPVSITE,KMPVHDAY)
"RTN","KMPVVTCM",115,0)
 K ^KMPTMP("KMPV","VTCM","TRANSMIT",$J)
"RTN","KMPVVTCM",116,0)
 Q
"RTN","KMPVVTCM",117,0)
 ;
"VER")
8.0^22.0
"^DD",8969,8969,0)
FIELD^^3.04^19
"^DD",8969,8969,0,"DDA")
N
"^DD",8969,8969,0,"DT")
3150331
"^DD",8969,8969,0,"IX","B",8969,.01)

"^DD",8969,8969,0,"NM","VSM CONFIGURATION")

"^DD",8969,8969,.01,0)
MONITOR KEY^RF^^0;1^K:$L(X)>4!($L(X)<2)!'(X'?1P.E) X
"^DD",8969,8969,.01,1,0)
^.1
"^DD",8969,8969,.01,1,1,0)
8969^B
"^DD",8969,8969,.01,1,1,1)
S ^KMPV(8969,"B",$E(X,1,30),DA)=""
"^DD",8969,8969,.01,1,1,2)
K ^KMPV(8969,"B",$E(X,1,30),DA)
"^DD",8969,8969,.01,3)
Answer must be 2-4 characters in length.
"^DD",8969,8969,.01,21,0)
^^1^1^3141202^
"^DD",8969,8969,.01,21,1,0)
Two to four Letter acronym used to identify specific monitor.
"^DD",8969,8969,.01,"DT")
3141202
"^DD",8969,8969,.02,0)
ONOFF^S^1:ON;0:OFF;^0;2^Q
"^DD",8969,8969,.02,3)
Enter 'ON' to start monitor or 'OFF' to stop monitor from running.
"^DD",8969,8969,.02,21,0)
^^1^1^3141202^
"^DD",8969,8969,.02,21,1,0)
Flag used to stop or continue monitor collection.
"^DD",8969,8969,.02,"DT")
3150706
"^DD",8969,8969,.03,0)
FULL NAME^F^^0;3^K:$L(X)>40!($L(X)<4) X
"^DD",8969,8969,.03,3)
Answer must be 4-40 characters in length.
"^DD",8969,8969,.03,21,0)
^^2^2^3141202^
"^DD",8969,8969,.03,21,1,0)
Descriptive name for specific monitor. Usually related to the MonitorKey. 
"^DD",8969,8969,.03,21,2,0)
Ex. VTCM = VistA Timed Collection Monitor.
"^DD",8969,8969,.03,"DT")
3141202
"^DD",8969,8969,.04,0)
VERSION^NJ6,2^^0;4^K:+X'=X!(X>100)!(X<1)!(X?.E1"."3.N) X
"^DD",8969,8969,.04,3)
Type a number between 1 and 100, 2 decimal digits.
"^DD",8969,8969,.04,21,0)
^^1^1^3141202^
"^DD",8969,8969,.04,21,1,0)
Current version of VSM software.
"^DD",8969,8969,.04,"DT")
3141202
"^DD",8969,8969,.05,0)
VERSION INSTALL DATE^D^^0;5^S %DT="ESTX" D ^%DT S X=Y K:3140923>X X
"^DD",8969,8969,.05,3)
Type a date not earlier than SEP 23, 2014.
"^DD",8969,8969,.05,21,0)
^^1^1^3141202^
"^DD",8969,8969,.05,21,1,0)
Date current version of software was installed.
"^DD",8969,8969,.05,"DT")
3141202
"^DD",8969,8969,1.01,0)
DAYS TO KEEP DATA^RNJ1,0^^1;1^K:+X'=X!(X>7)!(X<3)!(X?.E1"."1.N) X
"^DD",8969,8969,1.01,3)
Type a number between 3 and 7, 0 decimal digits.
"^DD",8969,8969,1.01,21,0)
^^5^5^3141202^
"^DD",8969,8969,1.01,21,1,0)
Number of days that unsent data will be allowed to remain in 
"^DD",8969,8969,1.01,21,2,0)
^KMPTMP("KMPV" before the purge routine kills it. Limited to 3-7 days. 
"^DD",8969,8969,1.01,21,3,0)
Data older than this value will be deleted regardless of reason it has 
"^DD",8969,8969,1.01,21,4,0)
not been sent to the national database in order to assure global does not 
"^DD",8969,8969,1.01,21,5,0)
grow unchecked.
"^DD",8969,8969,1.01,"DT")
3141202
"^DD",8969,8969,1.02,0)
COLLECTION INTERVAL^RNJ2,0^^1;2^K:+X'=X!(X>60)!(X<5)!(X?.E1"."1.N) X
"^DD",8969,8969,1.02,3)
Type a number between 5 and 60, 0 decimal digits.
"^DD",8969,8969,1.02,21,0)
^^4^4^3141202^
"^DD",8969,8969,1.02,21,1,0)
The number in minutes used to gather or aggregate metrics. Monitors that 
"^DD",8969,8969,1.02,21,2,0)
collect metrics on a periodic basis will use this value to wait between 
"^DD",8969,8969,1.02,21,3,0)
collects. Monitors that collect data continuously will use this value for 
"^DD",8969,8969,1.02,21,4,0)
aggregation of metrics. 
"^DD",8969,8969,1.02,"DT")
3141202
"^DD",8969,8969,1.03,0)
CACHE DAILY TASK^F^^1;3^K:$L(X)>25!($L(X)<3) X
"^DD",8969,8969,1.03,3)
Answer must be 3-25 characters in length.
"^DD",8969,8969,1.03,21,0)
^^4^4^3150706^
"^DD",8969,8969,1.03,21,1,0)
The name of the routine, if applicable, to start each days collection. 
"^DD",8969,8969,1.03,21,2,0)
The Cache' Task Manager will call the RUN linetag of this routine at the 
"^DD",8969,8969,1.03,21,3,0)
start of every day. This allows collection tasks to run on each node of a 
"^DD",8969,8969,1.03,21,4,0)
VistA system - front end and back end.
"^DD",8969,8969,1.03,"DT")
3150706
"^DD",8969,8969,1.04,0)
ALLOW TEST SYSTEM^S^1:YES;0:NO;^1;4^Q
"^DD",8969,8969,1.04,3)
Enter 'YES' to allow monitor to run on a test system. Otherwise monitor will exit if the current UCI is not set to 'PROD' per ^%ZOSF("UCI").
"^DD",8969,8969,1.04,21,0)
^^3^3^3150706^
"^DD",8969,8969,1.04,21,1,0)
If set to 'Yes' this will allow the monitor to run on test systems. 
"^DD",8969,8969,1.04,21,2,0)
Otherwise monitor will exit if the current UCI is not set as 'PROD' per 
"^DD",8969,8969,1.04,21,3,0)
^%ZOSF("UCI").
"^DD",8969,8969,1.04,"DT")
3150706
"^DD",8969,8969,1.05,0)
TASKMAN SCHEDULE FREQUENCY^F^^1;5^K:$L(X)>10!($L(X)<1) X
"^DD",8969,8969,1.05,3)
Answer must be 1-10 characters in length.
"^DD",8969,8969,1.05,21,0)
^^2^2^3141202^
"^DD",8969,8969,1.05,21,1,0)
The value used to automatically reschedule the TaskMan tasks. (ex. 1D or
"^DD",8969,8969,1.05,21,2,0)
1W)
"^DD",8969,8969,1.05,"DT")
3141202
"^DD",8969,8969,1.06,0)
TASKMAN SCHEDULE START^F^^1;6^K:$L(X)>20!($L(X)<1) X
"^DD",8969,8969,1.06,3)
Answer must be 1-20 characters in length.
"^DD",8969,8969,1.06,21,0)
^^1^1^3141202^
"^DD",8969,8969,1.06,21,1,0)
The time each monitor's TaskMan task should be scheduled. (ex. T+1@0001)
"^DD",8969,8969,1.06,"DT")
3141202
"^DD",8969,8969,1.07,0)
TASKMAN OPTION^F^^1;7^K:$L(X)>35!($L(X)<1) X
"^DD",8969,8969,1.07,3)
Answer must be 1-35 characters in length.
"^DD",8969,8969,1.07,21,0)
^^2^2^3141202^
"^DD",8969,8969,1.07,21,1,0)
The OPTION file entry used by TaskMan to schedule the daily background
"^DD",8969,8969,1.07,21,2,0)
jobs.
"^DD",8969,8969,1.07,"DT")
3141202
"^DD",8969,8969,2.01,0)
LAST START TIME^D^^2;1^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",8969,8969,2.01,3)
(No range limit on date)
"^DD",8969,8969,2.01,21,0)
^^1^1^3141202^
"^DD",8969,8969,2.01,21,1,0)
Time last TaskMan task was started for a specific monitor.
"^DD",8969,8969,2.01,"DT")
3141202
"^DD",8969,8969,2.02,0)
LAST STOP TIME^D^^2;2^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",8969,8969,2.02,3)
(No range limit on date)
"^DD",8969,8969,2.02,21,0)
^^1^1^3141202^
"^DD",8969,8969,2.02,21,1,0)
Time last TaskMan task completed for a specific monitor.
"^DD",8969,8969,2.02,"DT")
3141202
"^DD",8969,8969,2.03,0)
LAST RUN TIME^NJ4,0^^2;3^K:+X'=X!(X>3600)!(X<0)!(X?.E1"."1N.N) X
"^DD",8969,8969,2.03,3)
Type a number between 0 and 3600, 0 decimal digits.
"^DD",8969,8969,2.03,21,0)
^^2^2^3141202^
"^DD",8969,8969,2.03,21,1,0)
Time in seconds from start to completion of most recent run for a 
"^DD",8969,8969,2.03,21,2,0)
specific monitor TaskMan task.
"^DD",8969,8969,2.03,"DT")
3141202
"^DD",8969,8969,3.01,0)
NATIONAL DATA EMAIL ADDRESS^F^^3;1^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.01,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.01,21,0)
^^1^1^3150706^
"^DD",8969,8969,3.01,21,1,0)
Email address (VistA MailMan) to which daily data collections are sent.
"^DD",8969,8969,3.01,"DT")
3150706
"^DD",8969,8969,3.02,0)
NATIONAL SUPPORT EMAIL ADDRESS^F^^3;2^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.02,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.02,21,0)
^^2^2^3150706^
"^DD",8969,8969,3.02,21,1,0)
Email address (VistA MailMan) where emails are sent informing support 
"^DD",8969,8969,3.02,21,2,0)
staff of configuration changes or potential problems.
"^DD",8969,8969,3.02,"DT")
3150706
"^DD",8969,8969,3.03,0)
VSM CFG EMAIL ADDRESS^F^^3;3^K:$L(X)>50!($L(X)<10) X
"^DD",8969,8969,3.03,3)
Answer must be 10-50 characters in length.
"^DD",8969,8969,3.03,21,0)
^^2^2^3150706^
"^DD",8969,8969,3.03,21,1,0)
Email address (VistA MailMan) were local configuration changes are sent 
"^DD",8969,8969,3.03,21,2,0)
to update the national database.
"^DD",8969,8969,3.03,"DT")
3150706
"^DD",8969,8969,3.04,0)
LOCAL SUPPORT EMAIL ADDRESS^F^^3;4^K:$L(X)>30!($L(X)<10) X
"^DD",8969,8969,3.04,3)
Answer must be 10-30 characters in length.
"^DD",8969,8969,3.04,21,0)
^^2^2^3150706^^
"^DD",8969,8969,3.04,21,1,0)
Local email address (Vista MailMan) used for inform local support staff 
"^DD",8969,8969,3.04,21,2,0)
of configuration changes or potential problems.
"^DD",8969,8969,3.04,"DT")
3150706
"^DD",8969.02,8969.02,0)
FIELD^^1.03^11
"^DD",8969.02,8969.02,0,"DDA")
N
"^DD",8969.02,8969.02,0,"DT")
3150706
"^DD",8969.02,8969.02,0,"IX","B",8969.02,.01)

"^DD",8969.02,8969.02,0,"NM","VSM MONITOR DEFAULTS")

"^DD",8969.02,8969.02,.01,0)
MONITOR KEY^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",8969.02,8969.02,.01,1,0)
^.1
"^DD",8969.02,8969.02,.01,1,1,0)
8969.02^B
"^DD",8969.02,8969.02,.01,1,1,1)
S ^KMPV(8969.02,"B",$E(X,1,30),DA)=""
"^DD",8969.02,8969.02,.01,1,1,2)
K ^KMPV(8969.02,"B",$E(X,1,30),DA)
"^DD",8969.02,8969.02,.01,3)
Answer must be 3-30 characters in length.
"^DD",8969.02,8969.02,.01,21,0)
^.001^1^1^3150706^^
"^DD",8969.02,8969.02,.01,21,1,0)
Two to four Letter acronym used to identify specific monitor.
"^DD",8969.02,8969.02,.01,"DT")
3150706
"^DD",8969.02,8969.02,.02,0)
DAYS TO KEEP DATA^NJ1,0^^0;2^K:+X'=X!(X>7)!(X<3)!(X?.E1"."1.N) X
"^DD",8969.02,8969.02,.02,3)
Type a number between 3 and 7, 0 decimal digits.
"^DD",8969.02,8969.02,.02,21,0)
^^5^5^3141202^
"^DD",8969.02,8969.02,.02,21,1,0)
Number of days that unsent data will be allowed to remain in 
"^DD",8969.02,8969.02,.02,21,2,0)
^KMPTMP("KMPV" before the purge routine kills it. Limited to 3-7 days. 
"^DD",8969.02,8969.02,.02,21,3,0)
Data older than this value will be deleted regardless of reason it has 
"^DD",8969.02,8969.02,.02,21,4,0)
not been sent to the national database in order to assure global does not 
"^DD",8969.02,8969.02,.02,21,5,0)
grow unchecked.
"^DD",8969.02,8969.02,.02,"DT")
3141202
"^DD",8969.02,8969.02,.03,0)
COLLECTION INTERVAL^NJ2,0^^0;3^K:+X'=X!(X>60)!(X<5)!(X?.E1"."1.N) X
"^DD",8969.02,8969.02,.03,3)
Type a number between 5 and 60, 0 decimal digits.
"^DD",8969.02,8969.02,.03,21,0)
^^4^4^3141202^
"^DD",8969.02,8969.02,.03,21,1,0)
The number in minutes used to gather or aggregate metrics. Monitors that 
"^DD",8969.02,8969.02,.03,21,2,0)
collect metrics on a periodic basis will use this value to wait between 
"^DD",8969.02,8969.02,.03,21,3,0)
collects. Monitors that collect data continuously will use this value for 
"^DD",8969.02,8969.02,.03,21,4,0)
aggregation of metrics. 
"^DD",8969.02,8969.02,.03,"DT")
3141202
"^DD",8969.02,8969.02,.04,0)
CACHE DAILY TASK^F^^0;4^K:$L(X)>20!($L(X)<3) X
"^DD",8969.02,8969.02,.04,3)
Answer must be 3-20 characters in length.
"^DD",8969.02,8969.02,.04,21,0)
^^4^4^3150706^
"^DD",8969.02,8969.02,.04,21,1,0)
The name of the routine, if applicable, to start each days collection. 
"^DD",8969.02,8969.02,.04,21,2,0)
The Cache' Task Manager will call the RUN linetag of this routine at the 
"^DD",8969.02,8969.02,.04,21,3,0)
start of every day. This allows collection tasks to run on each node of a 
"^DD",8969.02,8969.02,.04,21,4,0)
VistA system - front end and back end.
"^DD",8969.02,8969.02,.04,"DT")
3150706
"^DD",8969.02,8969.02,.05,0)
ALLOW TEST SYSTEM^S^1:YES;0:NO;^0;5^Q
"^DD",8969.02,8969.02,.05,3)
Enter 'Yes" to allow monitors to run on test system. Otherwise monitors will exit if the current UCI is not set as "PROD" per ^%ZOSF(UCI).
"^DD",8969.02,8969.02,.05,21,0)
^^3^3^3150706^
"^DD",8969.02,8969.02,.05,21,1,0)
If set to 'Yes' this will allow the monitor to run on test systems. 
"^DD",8969.02,8969.02,.05,21,2,0)
Otherwise monitor will exit if the current UCI is not set as 'PROD' per 
"^DD",8969.02,8969.02,.05,21,3,0)
^%ZOSF("UCI").
"^DD",8969.02,8969.02,.05,"DT")
3150706
"^DD",8969.02,8969.02,.06,0)
TASKMAN SCHEDULE FREQUENCY^F^^0;6^K:$L(X)>10!($L(X)<1) X
"^DD",8969.02,8969.02,.06,3)
Answer must be 1-10 characters in length.
"^DD",8969.02,8969.02,.06,21,0)
^^2^2^3141202^
"^DD",8969.02,8969.02,.06,21,1,0)
The value used to automatically reschedule the TaskMan tasks. (ex. 1D or
"^DD",8969.02,8969.02,.06,21,2,0)
1W)
"^DD",8969.02,8969.02,.06,"DT")
3141202
"^DD",8969.02,8969.02,.07,0)
TASKMAN SCHEDULE START^F^^0;7^K:$L(X)>20!($L(X)<1) X
"^DD",8969.02,8969.02,.07,3)
Answer must be 1-20 characters in length.
"^DD",8969.02,8969.02,.07,21,0)
^^1^1^3141202^
"^DD",8969.02,8969.02,.07,21,1,0)
The time each monitor's TaskMan task should be scheduled. (ex. T+1@0001)
"^DD",8969.02,8969.02,.07,"DT")
3141202
"^DD",8969.02,8969.02,.08,0)
TASKMAN OPTION^F^^0;8^K:$L(X)>35!($L(X)<1) X
"^DD",8969.02,8969.02,.08,3)
Answer must be 1-35 characters in length.
"^DD",8969.02,8969.02,.08,21,0)
^^2^2^3141202^
"^DD",8969.02,8969.02,.08,21,1,0)
The OPTION file entry used by TaskMan to schedule the daily background
"^DD",8969.02,8969.02,.08,21,2,0)
jobs.
"^DD",8969.02,8969.02,.08,"DT")
3141202
"^DD",8969.02,8969.02,1.01,0)
NATIONAL DATA EMAIL ADDRESS^F^^1;1^K:$L(X)>50!($L(X)<10) X
"^DD",8969.02,8969.02,1.01,3)
Answer must be 10-50 characters in length.
"^DD",8969.02,8969.02,1.01,21,0)
^^1^1^3150706^
"^DD",8969.02,8969.02,1.01,21,1,0)
Email address (VistA MailMan) to which daily data collections are sent.
"^DD",8969.02,8969.02,1.01,"DT")
3150706
"^DD",8969.02,8969.02,1.02,0)
NATIONAL SUPPORT EMAIL ADDRESS^F^^1;2^K:$L(X)>50!($L(X)<10) X
"^DD",8969.02,8969.02,1.02,3)
Answer must be 10-50 characters in length.
"^DD",8969.02,8969.02,1.02,21,0)
^^2^2^3150706^
"^DD",8969.02,8969.02,1.02,21,1,0)
Email address (VistA MailMan) where emails are sent informing support 
"^DD",8969.02,8969.02,1.02,21,2,0)
staff of potential problems or changes.
"^DD",8969.02,8969.02,1.02,"DT")
3150706
"^DD",8969.02,8969.02,1.03,0)
VSM CFG EMAIL ADDRESS^F^^1;3^K:$L(X)>50!($L(X)<10) X
"^DD",8969.02,8969.02,1.03,3)
Answer must be 10-50 characters in length.
"^DD",8969.02,8969.02,1.03,21,0)
^^2^2^3150706^
"^DD",8969.02,8969.02,1.03,21,1,0)
Email address (VistA MailMan) where local configuration changes are sent 
"^DD",8969.02,8969.02,1.03,21,2,0)
to update the national database.
"^DD",8969.02,8969.02,1.03,"DT")
3150706
"^DD",8969.03,8969.03,0)
FIELD^^.04^4
"^DD",8969.03,8969.03,0,"DDA")
N
"^DD",8969.03,8969.03,0,"DT")
3150707
"^DD",8969.03,8969.03,0,"IX","B",8969.03,.01)

"^DD",8969.03,8969.03,0,"NM","VSM CACHE TASK LOG")

"^DD",8969.03,8969.03,.01,0)
DATE^RD^^0;1^S %DT="EX" D ^%DT S X=Y K:X<1 X
"^DD",8969.03,8969.03,.01,1,0)
^.1
"^DD",8969.03,8969.03,.01,1,1,0)
8969.03^B
"^DD",8969.03,8969.03,.01,1,1,1)
S ^KMPV(8969.03,"B",$E(X,1,30),DA)=""
"^DD",8969.03,8969.03,.01,1,1,2)
K ^KMPV(8969.03,"B",$E(X,1,30),DA)
"^DD",8969.03,8969.03,.01,3)
(No range limit on date)
"^DD",8969.03,8969.03,.01,21,0)
^^1^1^3141202^
"^DD",8969.03,8969.03,.01,21,1,0)
Run date for specific monitor as started from the Cache` Task Manager.
"^DD",8969.03,8969.03,.01,"DT")
3141202
"^DD",8969.03,8969.03,.02,0)
NODE^F^^0;2^K:$L(X)>50!($L(X)<5) X
"^DD",8969.03,8969.03,.02,1,0)
^.1^^0
"^DD",8969.03,8969.03,.02,3)
Answer must be 5-50 characters in length.
"^DD",8969.03,8969.03,.02,21,0)
^.001^1^1^3150706^^
"^DD",8969.03,8969.03,.02,21,1,0)
Specific node on which collection routine was run.
"^DD",8969.03,8969.03,.02,"DT")
3150706
"^DD",8969.03,8969.03,.03,0)
VTCM RUNTIME^D^^0;3^S %DT="ESTR" D ^%DT S X=Y K:X<1 X
"^DD",8969.03,8969.03,.03,3)
(No range limit on date)
"^DD",8969.03,8969.03,.03,21,0)
^^1^1^3141205^
"^DD",8969.03,8969.03,.03,21,1,0)
Time the VTCM monitor was started in FileMan datetime format.
"^DD",8969.03,8969.03,.03,"DT")
3150707
"^DD",8969.03,8969.03,.04,0)
VSTM RUNTIME^D^^0;4^S %DT="ESTR" D ^%DT S X=Y K:X<1 X
"^DD",8969.03,8969.03,.04,3)
(No range limit on date)
"^DD",8969.03,8969.03,.04,21,0)
^^1^1^3141205^
"^DD",8969.03,8969.03,.04,21,1,0)
Time the VBEM monitor was started in FileMan datetime format.
"^DD",8969.03,8969.03,.04,"DT")
3150707
"^DIC",8969,8969,0)
VSM CONFIGURATION^8969
"^DIC",8969,8969,0,"GL")
^KMPV(8969,
"^DIC",8969,8969,"%",0)
^1.005^^
"^DIC",8969,8969,"%D",0)
^^2^2^3150707^
"^DIC",8969,8969,"%D",1,0)
This file contains current configuration data related to the daily 
"^DIC",8969,8969,"%D",2,0)
operation of each monitor deployed.
"^DIC",8969,"B","VSM CONFIGURATION",8969)

"^DIC",8969.02,8969.02,0)
VSM MONITOR DEFAULTS^8969.02
"^DIC",8969.02,8969.02,0,"GL")
^KMPV(8969.02,
"^DIC",8969.02,8969.02,"%",0)
^1.005^^
"^DIC",8969.02,8969.02,"%D",0)
^^4^4^3150706^
"^DIC",8969.02,8969.02,"%D",1,0)
Contains default configuration values for each VSM Monitor deployed. 
"^DIC",8969.02,8969.02,"%D",2,0)
These values can be restored via the Restore action in the VSM Management 
"^DIC",8969.02,8969.02,"%D",3,0)
List Manager Application. These values are not to be edited by an 
"^DIC",8969.02,8969.02,"%D",4,0)
individual site.
"^DIC",8969.02,"B","VSM MONITOR DEFAULTS",8969.02)

"^DIC",8969.03,8969.03,0)
VSM CACHE TASK LOG^8969.03
"^DIC",8969.03,8969.03,0,"GL")
^KMPV(8969.03,
"^DIC",8969.03,8969.03,"%",0)
^1.005^^
"^DIC",8969.03,8969.03,"%D",0)
^^2^2^3150706^
"^DIC",8969.03,8969.03,"%D",1,0)
Records the time each VSM Monitor is run on a given day. If a monitor is 
"^DIC",8969.03,8969.03,"%D",2,0)
not run the appropriate RUNTIME field for that monitor will be null.
"^DIC",8969.03,"B","VSM CACHE TASK LOG",8969.03)

**END**
**END**
