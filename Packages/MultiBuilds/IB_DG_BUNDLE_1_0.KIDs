KIDS Distribution saved on Jun 29, 2016@13:32:59
IB DG BUNDLE 1.0
**KIDS**:IB DG BUNDLE 1.0^IB*2.0*549^DG*5.3*916^

**INSTALL NAME**
IB DG BUNDLE 1.0
"BLD",9767,0)
IB DG BUNDLE 1.0^^1^3160629^y
"BLD",9767,6.3)
42
"BLD",9767,10,0)
^9.63^2^2
"BLD",9767,10,1,0)
IB*2.0*549^1
"BLD",9767,10,2,0)
DG*5.3*916^1
"BLD",9767,10,"B","DG*5.3*916",2)

"BLD",9767,10,"B","IB*2.0*549",1)

"BLD",9767,"KRN",0)
^9.67PA^779.2^20
"BLD",9767,"KRN",.4,0)
.4
"BLD",9767,"KRN",.401,0)
.401
"BLD",9767,"KRN",.402,0)
.402
"BLD",9767,"KRN",.403,0)
.403
"BLD",9767,"KRN",.5,0)
.5
"BLD",9767,"KRN",.84,0)
.84
"BLD",9767,"KRN",3.6,0)
3.6
"BLD",9767,"KRN",3.8,0)
3.8
"BLD",9767,"KRN",9.2,0)
9.2
"BLD",9767,"KRN",9.8,0)
9.8
"BLD",9767,"KRN",19,0)
19
"BLD",9767,"KRN",19.1,0)
19.1
"BLD",9767,"KRN",101,0)
101
"BLD",9767,"KRN",409.61,0)
409.61
"BLD",9767,"KRN",771,0)
771
"BLD",9767,"KRN",779.2,0)
779.2
"BLD",9767,"KRN",870,0)
870
"BLD",9767,"KRN",8989.51,0)
8989.51
"BLD",9767,"KRN",8989.52,0)
8989.52
"BLD",9767,"KRN",8994,0)
8994
"BLD",9767,"KRN","B",.4,.4)

"BLD",9767,"KRN","B",.401,.401)

"BLD",9767,"KRN","B",.402,.402)

"BLD",9767,"KRN","B",.403,.403)

"BLD",9767,"KRN","B",.5,.5)

"BLD",9767,"KRN","B",.84,.84)

"BLD",9767,"KRN","B",3.6,3.6)

"BLD",9767,"KRN","B",3.8,3.8)

"BLD",9767,"KRN","B",9.2,9.2)

"BLD",9767,"KRN","B",9.8,9.8)

"BLD",9767,"KRN","B",19,19)

"BLD",9767,"KRN","B",19.1,19.1)

"BLD",9767,"KRN","B",101,101)

"BLD",9767,"KRN","B",409.61,409.61)

"BLD",9767,"KRN","B",771,771)

"BLD",9767,"KRN","B",779.2,779.2)

"BLD",9767,"KRN","B",870,870)

"BLD",9767,"KRN","B",8989.51,8989.51)

"BLD",9767,"KRN","B",8989.52,8989.52)

"BLD",9767,"KRN","B",8994,8994)

"BLD",9767,"QDEF")
^^^^^^^^^^YES
"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
**INSTALL NAME**
IB*2.0*549
"BLD",9504,0)
IB*2.0*549^INTEGRATED BILLING^0^3160629^y
"BLD",9504,4,0)
^9.64PA^365^3
"BLD",9504,4,2,0)
2
"BLD",9504,4,2,2,0)
^9.641^2.342^2
"BLD",9504,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",9504,4,2,2,2.312,1,0)
^9.6411^8.03^2
"BLD",9504,4,2,2,2.312,1,3.04,0)
POLICY NOT BILLABLE
"BLD",9504,4,2,2,2.312,1,8.03,0)
EB DISPLAY ENTRY
"BLD",9504,4,2,2,2.342,0)
COMMENT - SUBSCRIBER POLICY  (sub-file)
"BLD",9504,4,2,2,2.342,1,0)
^9.6411^.08^5
"BLD",9504,4,2,2,2.342,1,.04,0)
PERSON CONTACTED
"BLD",9504,4,2,2,2.342,1,.05,0)
CONTACT PHONE #
"BLD",9504,4,2,2,2.342,1,.06,0)
CALL REFERENCE NUMBER
"BLD",9504,4,2,2,2.342,1,.07,0)
METHOD OF CONTACT
"BLD",9504,4,2,2,2.342,1,.08,0)
AUTHORIZATION NUMBER
"BLD",9504,4,2,222)
y^y^p^^^^n^^n
"BLD",9504,4,2,224)

"BLD",9504,4,350.9,0)
350.9
"BLD",9504,4,350.9,2,0)
^9.641^350.9^1
"BLD",9504,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",9504,4,350.9,2,350.9,1,0)
^9.6411^51.16^4
"BLD",9504,4,350.9,2,350.9,1,51.16,0)
*CONTACT PERSON
"BLD",9504,4,350.9,2,350.9,1,51.27,0)
270 MASTER SWITCH REALTIME
"BLD",9504,4,350.9,2,350.9,1,51.28,0)
270 MASTER SWITCH NIGHTLY
"BLD",9504,4,350.9,2,350.9,1,51.29,0)
DAILY NIF STATUS CHECK TIME
"BLD",9504,4,350.9,222)
y^y^p^^^^n^^n
"BLD",9504,4,350.9,224)

"BLD",9504,4,365,0)
365
"BLD",9504,4,365,2,0)
^9.641^365^1
"BLD",9504,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",9504,4,365,2,365,1,0)
^9.6411^.11^1
"BLD",9504,4,365,2,365,1,.11,0)
DO NOT PURGE
"BLD",9504,4,365,222)
y^y^p^^^^n^^n
"BLD",9504,4,365,224)

"BLD",9504,4,"APDD",2,2.312)

"BLD",9504,4,"APDD",2,2.312,3.04)

"BLD",9504,4,"APDD",2,2.312,8.03)

"BLD",9504,4,"APDD",2,2.342)

"BLD",9504,4,"APDD",2,2.342,.04)

"BLD",9504,4,"APDD",2,2.342,.05)

"BLD",9504,4,"APDD",2,2.342,.06)

"BLD",9504,4,"APDD",2,2.342,.07)

"BLD",9504,4,"APDD",2,2.342,.08)

"BLD",9504,4,"APDD",350.9,350.9)

"BLD",9504,4,"APDD",350.9,350.9,51.16)

"BLD",9504,4,"APDD",350.9,350.9,51.27)

"BLD",9504,4,"APDD",350.9,350.9,51.28)

"BLD",9504,4,"APDD",350.9,350.9,51.29)

"BLD",9504,4,"APDD",365,365)

"BLD",9504,4,"APDD",365,365,.11)

"BLD",9504,4,"B",2,2)

"BLD",9504,4,"B",350.9,350.9)

"BLD",9504,4,"B",365,365)

"BLD",9504,6.3)
54
"BLD",9504,"ABPKG")
n
"BLD",9504,"INI")

"BLD",9504,"INID")
n^n^n
"BLD",9504,"INIT")
IBY549PO
"BLD",9504,"KRN",0)
^9.67PA^779.2^20
"BLD",9504,"KRN",.4,0)
.4
"BLD",9504,"KRN",.401,0)
.401
"BLD",9504,"KRN",.402,0)
.402
"BLD",9504,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",9504,"KRN",.402,"NM",1,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",9504,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",1)

"BLD",9504,"KRN",.403,0)
.403
"BLD",9504,"KRN",.5,0)
.5
"BLD",9504,"KRN",.84,0)
.84
"BLD",9504,"KRN",3.6,0)
3.6
"BLD",9504,"KRN",3.8,0)
3.8
"BLD",9504,"KRN",9.2,0)
9.2
"BLD",9504,"KRN",9.8,0)
9.8
"BLD",9504,"KRN",9.8,"NM",0)
^9.68A^68^58
"BLD",9504,"KRN",9.8,"NM",1,0)
IBCMDT^^0^B47701451
"BLD",9504,"KRN",9.8,"NM",2,0)
IBCMDT2^^0^B30988652
"BLD",9504,"KRN",9.8,"NM",3,0)
IBCMDT1^^0^B32717848
"BLD",9504,"KRN",9.8,"NM",4,0)
IBCNCH^^0^B89930576
"BLD",9504,"KRN",9.8,"NM",5,0)
IBCNCH2^^0^B47844912
"BLD",9504,"KRN",9.8,"NM",6,0)
IBCNCH3^^0^B90566636
"BLD",9504,"KRN",9.8,"NM",7,0)
IBCNSP^^0^B77034837
"BLD",9504,"KRN",9.8,"NM",8,0)
IBCNSP3^^0^B38303205
"BLD",9504,"KRN",9.8,"NM",9,0)
IBJPI^^0^B42432107
"BLD",9504,"KRN",9.8,"NM",10,0)
IBCNEHLT^^0^B100567838
"BLD",9504,"KRN",9.8,"NM",11,0)
IBCNERTQ^^0^B44950178
"BLD",9504,"KRN",9.8,"NM",12,0)
IBCNSJ5^^0^B31714664
"BLD",9504,"KRN",9.8,"NM",13,0)
IBCNSP1^^0^B78908703
"BLD",9504,"KRN",9.8,"NM",14,0)
IBCNSP11^^0^B15254637
"BLD",9504,"KRN",9.8,"NM",15,0)
IBCNSJ1^^0^B22191790
"BLD",9504,"KRN",9.8,"NM",16,0)
IBCEMMR^^0^B216048164
"BLD",9504,"KRN",9.8,"NM",17,0)
IBCNEHLM^^0^B23803518
"BLD",9504,"KRN",9.8,"NM",18,0)
IBY549PO^^0^B123219661
"BLD",9504,"KRN",9.8,"NM",19,0)
IBCOMA^^0^B58613523
"BLD",9504,"KRN",9.8,"NM",20,0)
IBCOMA1^^0^B81021832
"BLD",9504,"KRN",9.8,"NM",21,0)
IBCNILK^^0^B142073526
"BLD",9504,"KRN",9.8,"NM",22,0)
IBCNEUT7^^0^B72027534
"BLD",9504,"KRN",9.8,"NM",23,0)
IBCOPP^^0^B31702280
"BLD",9504,"KRN",9.8,"NM",24,0)
IBCOPP1^^0^B23382519
"BLD",9504,"KRN",9.8,"NM",25,0)
IBCOPP2^^0^B66671846
"BLD",9504,"KRN",9.8,"NM",26,0)
IBCOPP3^^0^B54551933
"BLD",9504,"KRN",9.8,"NM",28,0)
IBCNSM1^^0^B24284030
"BLD",9504,"KRN",9.8,"NM",29,0)
IBCMDT3^^0^B9544257
"BLD",9504,"KRN",9.8,"NM",30,0)
IBCNSU2^^0^B25020492
"BLD",9504,"KRN",9.8,"NM",31,0)
IBCNERP1^^0^B87896793
"BLD",9504,"KRN",9.8,"NM",32,0)
IBCNERPF^^0^B35587922
"BLD",9504,"KRN",9.8,"NM",33,0)
IBCNERPG^^0^B51210670
"BLD",9504,"KRN",9.8,"NM",34,0)
IBCNERPH^^0^B48112420
"BLD",9504,"KRN",9.8,"NM",35,0)
IBCNSUR^^0^B24782605
"BLD",9504,"KRN",9.8,"NM",36,0)
IBCNSUR1^^0^B169714351
"BLD",9504,"KRN",9.8,"NM",37,0)
IBCNSUR4^^0^B155856313
"BLD",9504,"KRN",9.8,"NM",38,0)
IBCNICB^^0^B144732955
"BLD",9504,"KRN",9.8,"NM",43,0)
IBCNEHL1^^0^B181786202
"BLD",9504,"KRN",9.8,"NM",44,0)
IBCNBLL^^0^B147621313
"BLD",9504,"KRN",9.8,"NM",45,0)
IBCNES3^^0^B27490264
"BLD",9504,"KRN",9.8,"NM",46,0)
IBCNBCD^^0^B122951188
"BLD",9504,"KRN",9.8,"NM",49,0)
IBCNHUT2^^0^B92403346
"BLD",9504,"KRN",9.8,"NM",50,0)
IBAMTC^^0^B27117465
"BLD",9504,"KRN",9.8,"NM",52,0)
IBCNEDST^^0^B57795358
"BLD",9504,"KRN",9.8,"NM",55,0)
IBCNSM31^^0^B23516960
"BLD",9504,"KRN",9.8,"NM",56,0)
IBJTNB^^0^B12738894
"BLD",9504,"KRN",9.8,"NM",57,0)
IBCNSUR3^^0^B6784776
"BLD",9504,"KRN",9.8,"NM",58,0)
IBCNES4^^0^B22279537
"BLD",9504,"KRN",9.8,"NM",59,0)
IBCNES1^^0^B145689947
"BLD",9504,"KRN",9.8,"NM",60,0)
IBCNEKIT^^0^B55673167
"BLD",9504,"KRN",9.8,"NM",61,0)
IBCNEHL5^^0^B40778838
"BLD",9504,"KRN",9.8,"NM",62,0)
IBCNICB2^^0^B5848128
"BLD",9504,"KRN",9.8,"NM",63,0)
IBCNEDE^^0^B35084322
"BLD",9504,"KRN",9.8,"NM",64,0)
IBCNEDE1^^0^B49194842
"BLD",9504,"KRN",9.8,"NM",65,0)
IBCNEDE2^^0^B81972539
"BLD",9504,"KRN",9.8,"NM",66,0)
IBCNEDE5^^0^B29541392
"BLD",9504,"KRN",9.8,"NM",67,0)
IBCNEDEP^^0^B91001263
"BLD",9504,"KRN",9.8,"NM",68,0)
IBCNEHLU^^0^B104037838
"BLD",9504,"KRN",9.8,"NM","B","IBAMTC",50)

"BLD",9504,"KRN",9.8,"NM","B","IBCEMMR",16)

"BLD",9504,"KRN",9.8,"NM","B","IBCMDT",1)

"BLD",9504,"KRN",9.8,"NM","B","IBCMDT1",3)

"BLD",9504,"KRN",9.8,"NM","B","IBCMDT2",2)

"BLD",9504,"KRN",9.8,"NM","B","IBCMDT3",29)

"BLD",9504,"KRN",9.8,"NM","B","IBCNBCD",46)

"BLD",9504,"KRN",9.8,"NM","B","IBCNBLL",44)

"BLD",9504,"KRN",9.8,"NM","B","IBCNCH",4)

"BLD",9504,"KRN",9.8,"NM","B","IBCNCH2",5)

"BLD",9504,"KRN",9.8,"NM","B","IBCNCH3",6)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDE",63)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDE1",64)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDE2",65)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDE5",66)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDEP",67)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEDST",52)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEHL1",43)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEHL5",61)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEHLM",17)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEHLT",10)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEHLU",68)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEKIT",60)

"BLD",9504,"KRN",9.8,"NM","B","IBCNERP1",31)

"BLD",9504,"KRN",9.8,"NM","B","IBCNERPF",32)

"BLD",9504,"KRN",9.8,"NM","B","IBCNERPG",33)

"BLD",9504,"KRN",9.8,"NM","B","IBCNERPH",34)

"BLD",9504,"KRN",9.8,"NM","B","IBCNERTQ",11)

"BLD",9504,"KRN",9.8,"NM","B","IBCNES1",59)

"BLD",9504,"KRN",9.8,"NM","B","IBCNES3",45)

"BLD",9504,"KRN",9.8,"NM","B","IBCNES4",58)

"BLD",9504,"KRN",9.8,"NM","B","IBCNEUT7",22)

"BLD",9504,"KRN",9.8,"NM","B","IBCNHUT2",49)

"BLD",9504,"KRN",9.8,"NM","B","IBCNICB",38)

"BLD",9504,"KRN",9.8,"NM","B","IBCNICB2",62)

"BLD",9504,"KRN",9.8,"NM","B","IBCNILK",21)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSJ1",15)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSJ5",12)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSM1",28)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSM31",55)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSP",7)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSP1",13)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSP11",14)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSP3",8)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSU2",30)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSUR",35)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSUR1",36)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSUR3",57)

"BLD",9504,"KRN",9.8,"NM","B","IBCNSUR4",37)

"BLD",9504,"KRN",9.8,"NM","B","IBCOMA",19)

"BLD",9504,"KRN",9.8,"NM","B","IBCOMA1",20)

"BLD",9504,"KRN",9.8,"NM","B","IBCOPP",23)

"BLD",9504,"KRN",9.8,"NM","B","IBCOPP1",24)

"BLD",9504,"KRN",9.8,"NM","B","IBCOPP2",25)

"BLD",9504,"KRN",9.8,"NM","B","IBCOPP3",26)

"BLD",9504,"KRN",9.8,"NM","B","IBJPI",9)

"BLD",9504,"KRN",9.8,"NM","B","IBJTNB",56)

"BLD",9504,"KRN",9.8,"NM","B","IBY549PO",18)

"BLD",9504,"KRN",19,0)
19
"BLD",9504,"KRN",19,"NM",0)
^9.68A^5^4
"BLD",9504,"KRN",19,"NM",2,0)
IBCN INSURANCE MGMT MENU^^2
"BLD",9504,"KRN",19,"NM",3,0)
IBCNE EIV UPDATE REPORT^^0
"BLD",9504,"KRN",19,"NM",4,0)
IBCN INS PLANS MISSING DATA^^0
"BLD",9504,"KRN",19,"NM",5,0)
IBCN INS RPTS^^2
"BLD",9504,"KRN",19,"NM","B","IBCN INS PLANS MISSING DATA",4)

"BLD",9504,"KRN",19,"NM","B","IBCN INS RPTS",5)

"BLD",9504,"KRN",19,"NM","B","IBCN INSURANCE MGMT MENU",2)

"BLD",9504,"KRN",19,"NM","B","IBCNE EIV UPDATE REPORT",3)

"BLD",9504,"KRN",19.1,0)
19.1
"BLD",9504,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9504,"KRN",101,0)
101
"BLD",9504,"KRN",101,"NM",0)
^9.68A^72^69
"BLD",9504,"KRN",101,"NM",1,0)
IBCNSP POLICY MENU^^0
"BLD",9504,"KRN",101,"NM",2,0)
IBCNCH ADD COMMENT^^0
"BLD",9504,"KRN",101,"NM",3,0)
IBCNCH COMMENT HISTORY EXPAND^^0
"BLD",9504,"KRN",101,"NM",4,0)
IBCNCH COMMENT HISTORY EXPAND VIEW^^0
"BLD",9504,"KRN",101,"NM",5,0)
IBCNCH COMMENT HISTORY MENU^^0
"BLD",9504,"KRN",101,"NM",6,0)
IBCNCH COMMENT HISTORY SEARCH^^0
"BLD",9504,"KRN",101,"NM",7,0)
IBCNCH COMMENT HISTORY VIEW^^0
"BLD",9504,"KRN",101,"NM",8,0)
IBCNCH DELETE COMMENT^^0
"BLD",9504,"KRN",101,"NM",10,0)
IBCNCH EDIT COMMENT^^0
"BLD",9504,"KRN",101,"NM",11,0)
IBCNCH EDIT COMMENT EXPAND^^0
"BLD",9504,"KRN",101,"NM",12,0)
IBCNCH EXPAND COMMENT^^0
"BLD",9504,"KRN",101,"NM",13,0)
IBCNCH EXPAND COMMENT VIEW^^0
"BLD",9504,"KRN",101,"NM",14,0)
IBCNCH PREVIOUS COMMENT^^0
"BLD",9504,"KRN",101,"NM",15,0)
IBCNCH SEARCH LIST^^0
"BLD",9504,"KRN",101,"NM",16,0)
IBCNCH SEARCH LIST EXPAND^^0
"BLD",9504,"KRN",101,"NM",17,0)
IBCNCH SEARCH NEXT^^0
"BLD",9504,"KRN",101,"NM",18,0)
IBCNSP PATIENT POLICY COMMENTS ADD/EDIT^^0
"BLD",9504,"KRN",101,"NM",19,0)
IBCNSP ADD GROUP COMMENT^^0
"BLD",9504,"KRN",101,"NM",20,0)
IBCNSV POLICY MENU^^0
"BLD",9504,"KRN",101,"NM",22,0)
IBCNSP PATIENT POLICY COMMENTS VIEW^^0
"BLD",9504,"KRN",101,"NM",23,0)
IBJT PATIENT POLICY COMMENTS VIEW^^0
"BLD",9504,"KRN",101,"NM",24,0)
IBCN INS CO ACTIVE MENU^^0
"BLD",9504,"KRN",101,"NM",25,0)
IBCN INS CO ACTIVE UNSELECT^^0
"BLD",9504,"KRN",101,"NM",26,0)
IBCN INS CO MENU^^0
"BLD",9504,"KRN",101,"NM",27,0)
IBCN INS CO NEW SEARCH^^0
"BLD",9504,"KRN",101,"NM",28,0)
IBCN INS CO SELECT^^0
"BLD",9504,"KRN",101,"NM",29,0)
IBCN INS CO SHOW SEL^^0
"BLD",9504,"KRN",101,"NM",30,0)
IBCN INS CO UNSELECT^^0
"BLD",9504,"KRN",101,"NM",31,0)
IBCNB ENTRY SCREEN MENU^^0
"BLD",9504,"KRN",101,"NM",32,0)
IBCN SUBSCRIBER ACTIVE MENU^^0
"BLD",9504,"KRN",101,"NM",33,0)
IBCN SUBSCRIBER ACTIVE UNSELECT^^0
"BLD",9504,"KRN",101,"NM",34,0)
IBCN SUBSCRIBER MENU^^0
"BLD",9504,"KRN",101,"NM",35,0)
IBCN SUBSCRIBER SELECT^^0
"BLD",9504,"KRN",101,"NM",36,0)
IBCN SUBSCRIBER SHOW SEL^^0
"BLD",9504,"KRN",101,"NM",37,0)
IBCN SUBSCRIBER SORT LIST^^0
"BLD",9504,"KRN",101,"NM",38,0)
IBCN SUBSCRIBER UNSELECT^^0
"BLD",9504,"KRN",101,"NM",39,0)
IBJ EXIT^^4^
"BLD",9504,"KRN",101,"NM",40,0)
VALM BLANK 1^^4^
"BLD",9504,"KRN",101,"NM",41,0)
IBCNS EXIT^^4^
"BLD",9504,"KRN",101,"NM",42,0)
IBCNB ENTRY EDIT INSURANCE^^4^
"BLD",9504,"KRN",101,"NM",43,0)
IBCNB ENTRY EDIT ALL^^4^
"BLD",9504,"KRN",101,"NM",44,0)
IBCNB ENTRY EDIT GROUP^^4^
"BLD",9504,"KRN",101,"NM",45,0)
IBCNB ENTRY EDIT POLICY^^4^
"BLD",9504,"KRN",101,"NM",46,0)
IBCNB FAST EXIT^^4^
"BLD",9504,"KRN",101,"NM",47,0)
IBCNB EXPAND BENEFITS^^4^
"BLD",9504,"KRN",101,"NM",48,0)
IBCNB ENTRY ESCALATE^^4^
"BLD",9504,"KRN",101,"NM",49,0)
VALM BLANK 2^^4^
"BLD",9504,"KRN",101,"NM",50,0)
IBCNCH DELETE COMMENT EXPAND^^0
"BLD",9504,"KRN",101,"NM",51,0)
IBCNSP EDIT POLICY INFO^^4^
"BLD",9504,"KRN",101,"NM",52,0)
IBCNSP EDIT EFFECTIVE DATES^^4^
"BLD",9504,"KRN",101,"NM",53,0)
IBCNSP VERIFY COVERAGE^^4^
"BLD",9504,"KRN",101,"NM",54,0)
IBCNSP SUBSCRIBER UPDATE^^4^
"BLD",9504,"KRN",101,"NM",55,0)
IBCNSP EMPLOYER INFO FOR CLAIMS^^4^
"BLD",9504,"KRN",101,"NM",56,0)
IBCNSP UR INFO^^4^
"BLD",9504,"KRN",101,"NM",57,0)
IBCNSP ANNUAL BENEFITS^^4^
"BLD",9504,"KRN",101,"NM",58,0)
IBCNSP BENEFITS USED^^4^
"BLD",9504,"KRN",101,"NM",59,0)
IBCNSJ INACTIVATE PLAN^^4^
"BLD",9504,"KRN",101,"NM",60,0)
IBCNSJ CHANGE PLAN^^4^
"BLD",9504,"KRN",101,"NM",61,0)
IBCNSJ EDIT COVERAGE LIMITS^^4^
"BLD",9504,"KRN",101,"NM",62,0)
IBCNSP EDIT ALL^^4^
"BLD",9504,"KRN",101,"NM",64,0)
IBJT ACTIVE LIST SCREEN SKIP^^4^
"BLD",9504,"KRN",101,"NM",65,0)
IBJP INS VER MENU^^0
"BLD",9504,"KRN",101,"NM",66,0)
IBJP IIV GENERAL EDIT^^4^
"BLD",9504,"KRN",101,"NM",67,0)
IBJT SHORT MENU 2^^0
"BLD",9504,"KRN",101,"NM",68,0)
IBCNB ELIG PAYER SUMMARY^^0
"BLD",9504,"KRN",101,"NM",69,0)
IBCNE ELIG PAY SUM MENU^^0
"BLD",9504,"KRN",101,"NM",70,0)
IBCNE ELIG BEN INFO MENU^^0
"BLD",9504,"KRN",101,"NM",71,0)
IBCNE FAST EXIT^^4^
"BLD",9504,"KRN",101,"NM",72,0)
IBCNE VP VIEW EXP ELIG BEN SCREEN^^4^
"BLD",9504,"KRN",101,"NM","B","IBCN INS CO ACTIVE MENU",24)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO ACTIVE UNSELECT",25)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO MENU",26)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO NEW SEARCH",27)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO SELECT",28)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO SHOW SEL",29)

"BLD",9504,"KRN",101,"NM","B","IBCN INS CO UNSELECT",30)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER ACTIVE MENU",32)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER ACTIVE UNSELECT",33)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER MENU",34)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER SELECT",35)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER SHOW SEL",36)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER SORT LIST",37)

"BLD",9504,"KRN",101,"NM","B","IBCN SUBSCRIBER UNSELECT",38)

"BLD",9504,"KRN",101,"NM","B","IBCNB ELIG PAYER SUMMARY",68)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY EDIT ALL",43)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY EDIT GROUP",44)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY EDIT INSURANCE",42)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY EDIT POLICY",45)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY ESCALATE",48)

"BLD",9504,"KRN",101,"NM","B","IBCNB ENTRY SCREEN MENU",31)

"BLD",9504,"KRN",101,"NM","B","IBCNB EXPAND BENEFITS",47)

"BLD",9504,"KRN",101,"NM","B","IBCNB FAST EXIT",46)

"BLD",9504,"KRN",101,"NM","B","IBCNCH ADD COMMENT",2)

"BLD",9504,"KRN",101,"NM","B","IBCNCH COMMENT HISTORY EXPAND",3)

"BLD",9504,"KRN",101,"NM","B","IBCNCH COMMENT HISTORY EXPAND VIEW",4)

"BLD",9504,"KRN",101,"NM","B","IBCNCH COMMENT HISTORY MENU",5)

"BLD",9504,"KRN",101,"NM","B","IBCNCH COMMENT HISTORY SEARCH",6)

"BLD",9504,"KRN",101,"NM","B","IBCNCH COMMENT HISTORY VIEW",7)

"BLD",9504,"KRN",101,"NM","B","IBCNCH DELETE COMMENT",8)

"BLD",9504,"KRN",101,"NM","B","IBCNCH DELETE COMMENT EXPAND",50)

"BLD",9504,"KRN",101,"NM","B","IBCNCH EDIT COMMENT",10)

"BLD",9504,"KRN",101,"NM","B","IBCNCH EDIT COMMENT EXPAND",11)

"BLD",9504,"KRN",101,"NM","B","IBCNCH EXPAND COMMENT",12)

"BLD",9504,"KRN",101,"NM","B","IBCNCH EXPAND COMMENT VIEW",13)

"BLD",9504,"KRN",101,"NM","B","IBCNCH PREVIOUS COMMENT",14)

"BLD",9504,"KRN",101,"NM","B","IBCNCH SEARCH LIST",15)

"BLD",9504,"KRN",101,"NM","B","IBCNCH SEARCH LIST EXPAND",16)

"BLD",9504,"KRN",101,"NM","B","IBCNCH SEARCH NEXT",17)

"BLD",9504,"KRN",101,"NM","B","IBCNE ELIG BEN INFO MENU",70)

"BLD",9504,"KRN",101,"NM","B","IBCNE ELIG PAY SUM MENU",69)

"BLD",9504,"KRN",101,"NM","B","IBCNE FAST EXIT",71)

"BLD",9504,"KRN",101,"NM","B","IBCNE VP VIEW EXP ELIG BEN SCREEN",72)

"BLD",9504,"KRN",101,"NM","B","IBCNS EXIT",41)

"BLD",9504,"KRN",101,"NM","B","IBCNSJ CHANGE PLAN",60)

"BLD",9504,"KRN",101,"NM","B","IBCNSJ EDIT COVERAGE LIMITS",61)

"BLD",9504,"KRN",101,"NM","B","IBCNSJ INACTIVATE PLAN",59)

"BLD",9504,"KRN",101,"NM","B","IBCNSP ADD GROUP COMMENT",19)

"BLD",9504,"KRN",101,"NM","B","IBCNSP ANNUAL BENEFITS",57)

"BLD",9504,"KRN",101,"NM","B","IBCNSP BENEFITS USED",58)

"BLD",9504,"KRN",101,"NM","B","IBCNSP EDIT ALL",62)

"BLD",9504,"KRN",101,"NM","B","IBCNSP EDIT EFFECTIVE DATES",52)

"BLD",9504,"KRN",101,"NM","B","IBCNSP EDIT POLICY INFO",51)

"BLD",9504,"KRN",101,"NM","B","IBCNSP EMPLOYER INFO FOR CLAIMS",55)

"BLD",9504,"KRN",101,"NM","B","IBCNSP PATIENT POLICY COMMENTS ADD/EDIT",18)

"BLD",9504,"KRN",101,"NM","B","IBCNSP PATIENT POLICY COMMENTS VIEW",22)

"BLD",9504,"KRN",101,"NM","B","IBCNSP POLICY MENU",1)

"BLD",9504,"KRN",101,"NM","B","IBCNSP SUBSCRIBER UPDATE",54)

"BLD",9504,"KRN",101,"NM","B","IBCNSP UR INFO",56)

"BLD",9504,"KRN",101,"NM","B","IBCNSP VERIFY COVERAGE",53)

"BLD",9504,"KRN",101,"NM","B","IBCNSV POLICY MENU",20)

"BLD",9504,"KRN",101,"NM","B","IBJ EXIT",39)

"BLD",9504,"KRN",101,"NM","B","IBJP IIV GENERAL EDIT",66)

"BLD",9504,"KRN",101,"NM","B","IBJP INS VER MENU",65)

"BLD",9504,"KRN",101,"NM","B","IBJT ACTIVE LIST SCREEN SKIP",64)

"BLD",9504,"KRN",101,"NM","B","IBJT PATIENT POLICY COMMENTS VIEW",23)

"BLD",9504,"KRN",101,"NM","B","IBJT SHORT MENU 2",67)

"BLD",9504,"KRN",101,"NM","B","VALM BLANK 1",40)

"BLD",9504,"KRN",101,"NM","B","VALM BLANK 2",49)

"BLD",9504,"KRN",409.61,0)
409.61
"BLD",9504,"KRN",409.61,"NM",0)
^9.68A^11^11
"BLD",9504,"KRN",409.61,"NM",1,0)
IBCNCH POL COMMENT EXPAND VIEW^^0
"BLD",9504,"KRN",409.61,"NM",2,0)
IBCNCH POLICY COMMENT EXPAND^^0
"BLD",9504,"KRN",409.61,"NM",3,0)
IBCNCH POLICY COMMENT HISTORY^^0
"BLD",9504,"KRN",409.61,"NM",4,0)
IBCNCH POLICY COMMENT SEARCH^^0
"BLD",9504,"KRN",409.61,"NM",5,0)
IBCNCH POLICY COMMENT VIEW^^0
"BLD",9504,"KRN",409.61,"NM",6,0)
IBJP IIV SITE PARAMETERS^^0
"BLD",9504,"KRN",409.61,"NM",7,0)
IBCN INS CO SELECTED^^0
"BLD",9504,"KRN",409.61,"NM",8,0)
IBCN INS CO SELECTOR^^0
"BLD",9504,"KRN",409.61,"NM",9,0)
IBCN SUBSCRIBER SELECTED^^0
"BLD",9504,"KRN",409.61,"NM",10,0)
IBCN SUBSCRIBER SELECTOR^^0
"BLD",9504,"KRN",409.61,"NM",11,0)
IBCNB INSURANCE BUFFER PAYER^^0
"BLD",9504,"KRN",409.61,"NM","B","IBCN INS CO SELECTED",7)

"BLD",9504,"KRN",409.61,"NM","B","IBCN INS CO SELECTOR",8)

"BLD",9504,"KRN",409.61,"NM","B","IBCN SUBSCRIBER SELECTED",9)

"BLD",9504,"KRN",409.61,"NM","B","IBCN SUBSCRIBER SELECTOR",10)

"BLD",9504,"KRN",409.61,"NM","B","IBCNB INSURANCE BUFFER PAYER",11)

"BLD",9504,"KRN",409.61,"NM","B","IBCNCH POL COMMENT EXPAND VIEW",1)

"BLD",9504,"KRN",409.61,"NM","B","IBCNCH POLICY COMMENT EXPAND",2)

"BLD",9504,"KRN",409.61,"NM","B","IBCNCH POLICY COMMENT HISTORY",3)

"BLD",9504,"KRN",409.61,"NM","B","IBCNCH POLICY COMMENT SEARCH",4)

"BLD",9504,"KRN",409.61,"NM","B","IBCNCH POLICY COMMENT VIEW",5)

"BLD",9504,"KRN",409.61,"NM","B","IBJP IIV SITE PARAMETERS",6)

"BLD",9504,"KRN",771,0)
771
"BLD",9504,"KRN",771,"NM",0)
^9.68A^^
"BLD",9504,"KRN",779.2,0)
779.2
"BLD",9504,"KRN",870,0)
870
"BLD",9504,"KRN",8989.51,0)
8989.51
"BLD",9504,"KRN",8989.52,0)
8989.52
"BLD",9504,"KRN",8994,0)
8994
"BLD",9504,"KRN","B",.4,.4)

"BLD",9504,"KRN","B",.401,.401)

"BLD",9504,"KRN","B",.402,.402)

"BLD",9504,"KRN","B",.403,.403)

"BLD",9504,"KRN","B",.5,.5)

"BLD",9504,"KRN","B",.84,.84)

"BLD",9504,"KRN","B",3.6,3.6)

"BLD",9504,"KRN","B",3.8,3.8)

"BLD",9504,"KRN","B",9.2,9.2)

"BLD",9504,"KRN","B",9.8,9.8)

"BLD",9504,"KRN","B",19,19)

"BLD",9504,"KRN","B",19.1,19.1)

"BLD",9504,"KRN","B",101,101)

"BLD",9504,"KRN","B",409.61,409.61)

"BLD",9504,"KRN","B",771,771)

"BLD",9504,"KRN","B",779.2,779.2)

"BLD",9504,"KRN","B",870,870)

"BLD",9504,"KRN","B",8989.51,8989.51)

"BLD",9504,"KRN","B",8989.52,8989.52)

"BLD",9504,"KRN","B",8994,8994)

"BLD",9504,"PRE")

"BLD",9504,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",9504,"QUES",0)
^9.62^^
"BLD",9504,"REQB",0)
^9.611^7^6
"BLD",9504,"REQB",2,0)
IB*2.0*516^2
"BLD",9504,"REQB",3,0)
IB*2.0*366^2
"BLD",9504,"REQB",4,0)
IB*2.0*521^2
"BLD",9504,"REQB",5,0)
IB*2.0*533^2
"BLD",9504,"REQB",6,0)
IB*2.0*528^2
"BLD",9504,"REQB","B","IB*2.0*366",3)

"BLD",9504,"REQB","B","IB*2.0*516",2)

"BLD",9504,"REQB","B","IB*2.0*521",4)

"BLD",9504,"REQB","B","IB*2.0*528",6)

"BLD",9504,"REQB","B","IB*2.0*533",5)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,3.04)

"FIA",2,2.312,8.03)

"FIA",2,2.342)
1
"FIA",2,2.342,.04)

"FIA",2,2.342,.05)

"FIA",2,2.342,.06)

"FIA",2,2.342,.07)

"FIA",2,2.342,.08)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.16)

"FIA",350.9,350.9,51.27)

"FIA",350.9,350.9,51.28)

"FIA",350.9,350.9,51.29)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^y^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,.11)

"INIT")
IBY549PO
"KRN",.402,2683,-1)
0^1
"KRN",.402,2683,0)
IBCNE GENERAL PARAMETER EDIT^3160314.1329^@^350.9^^@^3160603
"KRN",.402,2683,"DIAB",1,0,350.9,0)
51.25;"Medicare Payer"
"KRN",.402,2683,"DIAB",2,0,350.9,0)
13.01;"HMS Directory"
"KRN",.402,2683,"DIAB",3,0,350.9,0)
13.02;"EII Active"
"KRN",.402,2683,"DIAB",4,0,350.9,0)
100;"SSVI Enabled"
"KRN",.402,2683,"DIAB",5,0,350.9,0)
103;"Number of days to retain SSVI data"
"KRN",.402,2683,"DR",1,350.9)
51.25Medicare Payer~;13.01HMS Directory~;13.02EII Active~;100SSVI Enabled~;103Number of days to retain SSVI data~;
"KRN",19,4160,-1)
2^2
"KRN",19,4160,0)
IBCN INSURANCE MGMT MENU^Patient Insurance Menu^^M^.5^^^^^^^266
"KRN",19,4160,10,0)
^19.01IP^24^24
"KRN",19,4160,10,21,0)
13891^MD
"KRN",19,4160,10,21,"^")
IBCN INS PLANS MISSING DATA
"KRN",19,4160,10,22,0)
13893^INSR
"KRN",19,4160,10,22,"^")
IBCN INS RPTS
"KRN",19,4160,"U")
PATIENT INSURANCE MENU
"KRN",19,13417,-1)
0^3
"KRN",19,13417,0)
IBCNE EIV UPDATE REPORT^eIV Auto Update Report^^R^^^^^^^^INTEGRATED BILLING^^
"KRN",19,13417,1,0)
^^2^2^3151217^
"KRN",19,13417,1,1,0)
Generate eIV Auto Update Report based on eIV Inquiries and
"KRN",19,13417,1,2,0)
Responses for a given date range and current Patient Insurance data.
"KRN",19,13417,20)

"KRN",19,13417,25)
EN^IBCNERPF
"KRN",19,13417,"U")
EIV AUTO UPDATE REPORT
"KRN",19,13891,-1)
0^4
"KRN",19,13891,0)
IBCN INS PLANS MISSING DATA^Insurance Plans Missing Data Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,13891,1,0)
^19.06^2^2^3151215^^
"KRN",19,13891,1,1,0)
This report allows the user to list insurance companies that have missing 
"KRN",19,13891,1,2,0)
data in specified fields.
"KRN",19,13891,25)
IBCMDT
"KRN",19,13891,"U")
INSURANCE PLANS MISSING DATA R
"KRN",19,13893,-1)
2^5
"KRN",19,13893,0)
IBCN INS RPTS^Insurance Reports^^M^101110^^^^^^^200
"KRN",19,13893,10,0)
^19.01IP^52^52
"KRN",19,13893,10,38,0)
13417^IU
"KRN",19,13893,10,38,"^")
IBCNE EIV UPDATE REPORT
"KRN",19,13893,10,52,0)
13891^MD
"KRN",19,13893,10,52,"^")
IBCN INS PLANS MISSING DATA
"KRN",19,13893,"U")
INSURANCE REPORTS
"KRN",101,455,-1)
4^40
"KRN",101,455,0)
VALM BLANK 1
"KRN",101,457,-1)
4^49
"KRN",101,457,0)
VALM BLANK 2
"KRN",101,822,-1)
4^51
"KRN",101,822,0)
IBCNSP EDIT POLICY INFO
"KRN",101,823,-1)
4^52
"KRN",101,823,0)
IBCNSP EDIT EFFECTIVE DATES
"KRN",101,824,-1)
4^53
"KRN",101,824,0)
IBCNSP VERIFY COVERAGE
"KRN",101,825,-1)
4^54
"KRN",101,825,0)
IBCNSP SUBSCRIBER UPDATE
"KRN",101,826,-1)
4^55
"KRN",101,826,0)
IBCNSP EMPLOYER INFO FOR CLAIMS
"KRN",101,828,-1)
4^56
"KRN",101,828,0)
IBCNSP UR INFO
"KRN",101,847,-1)
4^57
"KRN",101,847,0)
IBCNSP ANNUAL BENEFITS
"KRN",101,848,-1)
4^58
"KRN",101,848,0)
IBCNSP BENEFITS USED
"KRN",101,849,-1)
4^62
"KRN",101,849,0)
IBCNSP EDIT ALL
"KRN",101,855,-1)
0^1
"KRN",101,855,0)
IBCNSP POLICY MENU^Insurance Policy Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,855,4)
26^4
"KRN",101,855,10,0)
^101.01PA^22^20
"KRN",101,855,10,1,0)
822^PI^11^
"KRN",101,855,10,1,"^")
IBCNSP EDIT POLICY INFO
"KRN",101,855,10,2,0)
823^ED^13^
"KRN",101,855,10,2,"^")
IBCNSP EDIT EFFECTIVE DATES
"KRN",101,855,10,3,0)
824^VC^32^
"KRN",101,855,10,3,"^")
IBCNSP VERIFY COVERAGE
"KRN",101,855,10,4,0)
825^SU^14^
"KRN",101,855,10,4,"^")
IBCNSP SUBSCRIBER UPDATE
"KRN",101,855,10,5,0)
826^EM^22^
"KRN",101,855,10,5,"^")
IBCNSP EMPLOYER INFO FOR CLAIMS
"KRN",101,855,10,7,0)
828^UI^12^
"KRN",101,855,10,7,"^")
IBCNSP UR INFO
"KRN",101,855,10,8,0)
847^AB^33^
"KRN",101,855,10,8,"^")
IBCNSP ANNUAL BENEFITS
"KRN",101,855,10,9,0)
848^BU^34^
"KRN",101,855,10,9,"^")
IBCNSP BENEFITS USED
"KRN",101,855,10,11,0)
858^EX^16^
"KRN",101,855,10,11,"^")
IBCNS EXIT
"KRN",101,855,10,14,0)
1077^IP^15^
"KRN",101,855,10,14,"^")
IBCNSJ INACTIVATE PLAN
"KRN",101,855,10,15,0)
1076^CP^31^
"KRN",101,855,10,15,"^")
IBCNSJ CHANGE PLAN
"KRN",101,855,10,16,0)
1082^CV^23^
"KRN",101,855,10,16,"^")
IBCNSJ EDIT COVERAGE LIMITS
"KRN",101,855,10,18,0)
849^EA^25^
"KRN",101,855,10,18,"^")
IBCNSP EDIT ALL
"KRN",101,855,10,19,0)
4362^EB^35^
"KRN",101,855,10,19,"^")
IBCNE VP VIEW EXP ELIG BEN SCREEN
"KRN",101,855,10,20,0)
455^^26^
"KRN",101,855,10,20,"^")
VALM BLANK 1
"KRN",101,855,10,21,0)
4649^PT^24^
"KRN",101,855,10,21,"^")
IBCNSP PATIENT POLICY COMMENTS ADD/EDIT
"KRN",101,855,10,22,0)
4652^GC^21^
"KRN",101,855,10,22,"^")
IBCNSP ADD GROUP COMMENT
"KRN",101,855,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,855,26)
D SHOW^VALM
"KRN",101,855,28)
Select Action: 
"KRN",101,855,99)
63699,41534
"KRN",101,858,-1)
4^41
"KRN",101,858,0)
IBCNS EXIT
"KRN",101,865,-1)
0^20
"KRN",101,865,0)
IBCNSV POLICY MENU^Insurance Policy Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,865,4)
26^4
"KRN",101,865,10,0)
^101.01PA^3^3
"KRN",101,865,10,1,0)
858^EX^31^
"KRN",101,865,10,1,"^")
IBCNS EXIT
"KRN",101,865,10,2,0)
4362^EB^11^
"KRN",101,865,10,2,"^")
IBCNE VP VIEW EXP ELIG BEN SCREEN
"KRN",101,865,10,3,0)
4650^PT^12^
"KRN",101,865,10,3,"^")
IBCNSP PATIENT POLICY COMMENTS VIEW
"KRN",101,865,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,865,26)
D SHOW^VALM
"KRN",101,865,28)
Select Action: 
"KRN",101,865,99)
63699,54192
"KRN",101,1076,-1)
4^60
"KRN",101,1076,0)
IBCNSJ CHANGE PLAN
"KRN",101,1077,-1)
4^59
"KRN",101,1077,0)
IBCNSJ INACTIVATE PLAN
"KRN",101,1082,-1)
4^61
"KRN",101,1082,0)
IBCNSJ EDIT COVERAGE LIMITS
"KRN",101,1121,-1)
4^39
"KRN",101,1121,0)
IBJ EXIT
"KRN",101,1135,-1)
4^64
"KRN",101,1135,0)
IBJT ACTIVE LIST SCREEN SKIP
"KRN",101,2401,-1)
0^31
"KRN",101,2401,0)
IBCNB ENTRY SCREEN MENU^Entry Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2401,4)
26^4
"KRN",101,2401,10,0)
^101.01PA^9^8
"KRN",101,2401,10,1,0)
2402^EI^11^
"KRN",101,2401,10,1,"^")
IBCNB ENTRY EDIT INSURANCE
"KRN",101,2401,10,2,0)
2405^EA^12^
"KRN",101,2401,10,2,"^")
IBCNB ENTRY EDIT ALL
"KRN",101,2401,10,3,0)
2403^PE^13^
"KRN",101,2401,10,3,"^")
IBCNB ENTRY EDIT GROUP
"KRN",101,2401,10,5,0)
2404^PI^22^
"KRN",101,2401,10,5,"^")
IBCNB ENTRY EDIT POLICY
"KRN",101,2401,10,6,0)
2408^EX^32^
"KRN",101,2401,10,6,"^")
IBCNB FAST EXIT
"KRN",101,2401,10,8,0)
4368^EB^31^
"KRN",101,2401,10,8,"^")
IBCNB EXPAND BENEFITS
"KRN",101,2401,10,9,0)
4590^ES^21^
"KRN",101,2401,10,9,"^")
IBCNB ENTRY ESCALATE
"KRN",101,2401,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,2401,20)
K IBFASTXT
"KRN",101,2401,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2401,26)
D SHOW^VALM
"KRN",101,2401,28)
Select Action: 
"KRN",101,2401,99)
63924,45501
"KRN",101,2402,-1)
4^42
"KRN",101,2402,0)
IBCNB ENTRY EDIT INSURANCE
"KRN",101,2403,-1)
4^44
"KRN",101,2403,0)
IBCNB ENTRY EDIT GROUP
"KRN",101,2404,-1)
4^45
"KRN",101,2404,0)
IBCNB ENTRY EDIT POLICY
"KRN",101,2405,-1)
4^43
"KRN",101,2405,0)
IBCNB ENTRY EDIT ALL
"KRN",101,2408,-1)
4^46
"KRN",101,2408,0)
IBCNB FAST EXIT
"KRN",101,3577,-1)
4^66
"KRN",101,3577,0)
IBJP IIV GENERAL EDIT
"KRN",101,3579,-1)
0^65
"KRN",101,3579,0)
IBJP INS VER MENU^Insurance Verification Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,3579,4)
26^4
"KRN",101,3579,10,0)
^101.01PA^5^5
"KRN",101,3579,10,3,0)
3577^GP^1^
"KRN",101,3579,10,3,"^")
IBJP IIV GENERAL EDIT
"KRN",101,3579,10,5,0)
1121^EX^5^
"KRN",101,3579,10,5,"^")
IBJ EXIT
"KRN",101,3579,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,3579,20)
K IBFASTXT
"KRN",101,3579,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,3579,26)
D SHOW^VALM
"KRN",101,3579,28)
Select Action: 
"KRN",101,3579,99)
63700,68297
"KRN",101,3586,-1)
4^71
"KRN",101,3586,0)
IBCNE FAST EXIT
"KRN",101,4360,-1)
0^70
"KRN",101,4360,0)
IBCNE ELIG BEN INFO MENU^eIV elig/ben menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4360,4)
26^4
"KRN",101,4360,10,0)
^101.01PA^2^2
"KRN",101,4360,10,1,0)
3586^EX^11^
"KRN",101,4360,10,1,"^")
IBCNE FAST EXIT
"KRN",101,4360,10,2,0)
4739^PS^5^
"KRN",101,4360,10,2,"^")
IBCNB ELIG PAYER SUMMARY
"KRN",101,4360,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4360,26)
D SHOW^VALM
"KRN",101,4360,28)
Select Action: 
"KRN",101,4360,99)
63924,45504
"KRN",101,4362,-1)
4^72
"KRN",101,4362,0)
IBCNE VP VIEW EXP ELIG BEN SCREEN
"KRN",101,4368,-1)
4^47
"KRN",101,4368,0)
IBCNB EXPAND BENEFITS
"KRN",101,4590,-1)
4^48
"KRN",101,4590,0)
IBCNB ENTRY ESCALATE
"KRN",101,4641,-1)
0^5
"KRN",101,4641,0)
IBCNCH COMMENT HISTORY MENU^Pt Policy Comments^^M^^^^^^^^
"KRN",101,4641,4)
26^4
"KRN",101,4641,10,0)
^101.01PA^6^6
"KRN",101,4641,10,1,0)
4642^AC^30^
"KRN",101,4641,10,1,"^")
IBCNCH ADD COMMENT
"KRN",101,4641,10,2,0)
4643^EE^10^
"KRN",101,4641,10,2,"^")
IBCNCH EXPAND COMMENT
"KRN",101,4641,10,3,0)
858^EX^60^
"KRN",101,4641,10,3,"^")
IBCNS EXIT
"KRN",101,4641,10,4,0)
4647^EC^20^
"KRN",101,4641,10,4,"^")
IBCNCH EDIT COMMENT
"KRN",101,4641,10,5,0)
4645^DC^40^
"KRN",101,4641,10,5,"^")
IBCNCH DELETE COMMENT
"KRN",101,4641,10,6,0)
4646^SL^50^
"KRN",101,4641,10,6,"^")
IBCNCH SEARCH LIST
"KRN",101,4641,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4641,26)
D SHOW^VALM
"KRN",101,4641,28)
Select Action: 
"KRN",101,4641,99)
63813,47501
"KRN",101,4642,-1)
0^2
"KRN",101,4642,0)
IBCNCH ADD COMMENT^Add Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4642,20)
D ADDCOM^IBCNCH
"KRN",101,4642,99)
63623,46878
"KRN",101,4643,-1)
0^12
"KRN",101,4643,0)
IBCNCH EXPAND COMMENT^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4643,20)
D EXPCOM^IBCNCH3
"KRN",101,4643,99)
63671,18054
"KRN",101,4645,-1)
0^8
"KRN",101,4645,0)
IBCNCH DELETE COMMENT^Delete Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4645,2,0)
^101.02A^1^1
"KRN",101,4645,2,1,0)
DC
"KRN",101,4645,2,"B","DC",1)

"KRN",101,4645,20)
D DELETE^IBCNCH
"KRN",101,4645,99)
63627,29315
"KRN",101,4646,-1)
0^15
"KRN",101,4646,0)
IBCNCH SEARCH LIST^Search List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4646,2,0)
^101.02A^1^1
"KRN",101,4646,2,1,0)
SL
"KRN",101,4646,2,"B","SL",1)

"KRN",101,4646,20)
D SEARCH^IBCNCH2
"KRN",101,4646,99)
63627,29363
"KRN",101,4647,-1)
0^10
"KRN",101,4647,0)
IBCNCH EDIT COMMENT^Edit Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4647,2,0)
^101.02A^1^1
"KRN",101,4647,2,1,0)
EC
"KRN",101,4647,2,"B","EC",1)

"KRN",101,4647,20)
D EDIT^IBCNCH
"KRN",101,4647,99)
63627,29584
"KRN",101,4649,-1)
0^18
"KRN",101,4649,0)
IBCNSP PATIENT POLICY COMMENTS ADD/EDIT^Pt Policy Comments^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4649,2,0)
^101.02A^^0
"KRN",101,4649,15)
D BLD^IBCNSP
"KRN",101,4649,20)
D EN^IBCNCH($G(DFN),$P($G(IBPPOL),"^",4),1)
"KRN",101,4649,99)
63670,30603
"KRN",101,4650,-1)
0^22
"KRN",101,4650,0)
IBCNSP PATIENT POLICY COMMENTS VIEW^Pt Policy Comments^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4650,20)
D EN^IBCNCH($G(DFN),$P($G(IBPPOL),"^",4),0)
"KRN",101,4650,99)
63673,35950
"KRN",101,4651,-1)
0^7
"KRN",101,4651,0)
IBCNCH COMMENT HISTORY VIEW^Pt Policy Comments^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4651,4)
26^4
"KRN",101,4651,10,0)
^101.01PA^3^3
"KRN",101,4651,10,1,0)
4661^EE^10^
"KRN",101,4651,10,1,"^")
IBCNCH EXPAND COMMENT VIEW
"KRN",101,4651,10,2,0)
4646^SL^20^
"KRN",101,4651,10,2,"^")
IBCNCH SEARCH LIST
"KRN",101,4651,10,3,0)
858^EX^30^
"KRN",101,4651,10,3,"^")
IBCNS EXIT
"KRN",101,4651,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4651,26)
D SHOW^VALM
"KRN",101,4651,28)
Select Action: 
"KRN",101,4651,99)
63813,47913
"KRN",101,4652,-1)
0^19
"KRN",101,4652,0)
IBCNSP ADD GROUP COMMENT^Group Plan Comments^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4652,4)
^^^GC
"KRN",101,4652,15)
S VALMBG=$G(IB1ST("COMMENT"),1)
"KRN",101,4652,20)
D GC^IBCNSP3
"KRN",101,4652,99)
63670,28635
"KRN",101,4653,-1)
0^3
"KRN",101,4653,0)
IBCNCH COMMENT HISTORY EXPAND^^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4653,4)
26^4
"KRN",101,4653,10,0)
^101.01PA^6^5
"KRN",101,4653,10,1,0)
4654^EC^10^
"KRN",101,4653,10,1,"^")
IBCNCH EDIT COMMENT EXPAND
"KRN",101,4653,10,2,0)
4655^DC^30^
"KRN",101,4653,10,2,"^")
IBCNCH DELETE COMMENT EXPAND
"KRN",101,4653,10,4,0)
858^EX^50^
"KRN",101,4653,10,4,"^")
IBCNS EXIT
"KRN",101,4653,10,5,0)
455^^40^
"KRN",101,4653,10,5,"^")
VALM BLANK 1
"KRN",101,4653,10,6,0)
457^^20^
"KRN",101,4653,10,6,"^")
VALM BLANK 2
"KRN",101,4653,15)

"KRN",101,4653,26)
D SHOW^VALM
"KRN",101,4653,28)
Select Action: 
"KRN",101,4653,99)
63813,47537
"KRN",101,4654,-1)
0^11
"KRN",101,4654,0)
IBCNCH EDIT COMMENT EXPAND^Edit Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4654,20)
D EDIT^IBCNCH($G(COMIEN))
"KRN",101,4654,99)
63670,31820
"KRN",101,4655,-1)
0^50
"KRN",101,4655,0)
IBCNCH DELETE COMMENT EXPAND^Delete Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4655,20)
D DELETE^IBCNCH($G(COMIEN))
"KRN",101,4655,99)
63670,31949
"KRN",101,4656,-1)
0^16
"KRN",101,4656,0)
IBCNCH SEARCH LIST EXPAND^Search List^^^^^^^^^^INTEGRATED BILLING
"KRN",101,4656,20)
D SEARCH^IBCNCH2($G(COMIEN))
"KRN",101,4656,99)
63670,32062
"KRN",101,4657,-1)
0^6
"KRN",101,4657,0)
IBCNCH COMMENT HISTORY SEARCH^^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4657,4)
26^4
"KRN",101,4657,10,0)
^101.01PA^8^5
"KRN",101,4657,10,4,0)
858^EX^50^
"KRN",101,4657,10,4,"^")
IBCNS EXIT
"KRN",101,4657,10,5,0)
4658^NC^10^
"KRN",101,4657,10,5,"^")
IBCNCH SEARCH NEXT
"KRN",101,4657,10,6,0)
4659^PC^30^
"KRN",101,4657,10,6,"^")
IBCNCH PREVIOUS COMMENT
"KRN",101,4657,10,7,0)
455^^20^
"KRN",101,4657,10,7,"^")
VALM BLANK 1
"KRN",101,4657,10,8,0)
457^^40^
"KRN",101,4657,10,8,"^")
VALM BLANK 2
"KRN",101,4657,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4657,26)
D SHOW^VALM
"KRN",101,4657,28)
Select Action: 
"KRN",101,4657,99)
63813,48276
"KRN",101,4658,-1)
0^17
"KRN",101,4658,0)
IBCNCH SEARCH NEXT^Next Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4658,20)
D NEXTCOM^IBCNCH3
"KRN",101,4658,99)
63671,18704
"KRN",101,4659,-1)
0^14
"KRN",101,4659,0)
IBCNCH PREVIOUS COMMENT^Previous Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4659,2,0)
^101.02A^^0
"KRN",101,4659,20)
D PREVCOM^IBCNCH3
"KRN",101,4659,99)
63671,18774
"KRN",101,4660,-1)
0^4
"KRN",101,4660,0)
IBCNCH COMMENT HISTORY EXPAND VIEW^^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4660,4)
26^4
"KRN",101,4660,10,0)
^101.01PA^1^1
"KRN",101,4660,10,1,0)
1121^EX^10^
"KRN",101,4660,10,1,"^")
IBJ EXIT
"KRN",101,4660,26)
D SHOW^VALM
"KRN",101,4660,28)
Select Action: 
"KRN",101,4660,99)
63817,45813
"KRN",101,4661,-1)
0^13
"KRN",101,4661,0)
IBCNCH EXPAND COMMENT VIEW^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4661,20)
D EXPCOM^IBCNCH3(1)
"KRN",101,4661,99)
63672,53373
"KRN",101,4662,-1)
0^23
"KRN",101,4662,0)
IBJT PATIENT POLICY COMMENTS VIEW^Pt Policy Comments^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4662,20)
D EN^IBCNCH($G(DFN),+$G(IBJPOL),0)
"KRN",101,4662,99)
63673,36255
"KRN",101,4716,-1)
0^28
"KRN",101,4716,0)
IBCN INS CO SELECT^Select Ins Co^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4716,20)
D SEL^IBCNILK
"KRN",101,4716,99)
63827,36144
"KRN",101,4717,-1)
0^30
"KRN",101,4717,0)
IBCN INS CO UNSELECT^Deselect Ins Co^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4717,20)
D UNSEL^IBCNILK
"KRN",101,4717,99)
63841,42915
"KRN",101,4718,-1)
0^29
"KRN",101,4718,0)
IBCN INS CO SHOW SEL^Show Selections^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4718,20)
D SHOWSEL^IBCNILK
"KRN",101,4718,99)
63827,36334
"KRN",101,4719,-1)
0^25
"KRN",101,4719,0)
IBCN INS CO ACTIVE UNSELECT^Deselect Ins Co^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4719,20)
D UNSEL^IBCNILK(1)
"KRN",101,4719,99)
63841,42865
"KRN",101,4720,-1)
0^26
"KRN",101,4720,0)
IBCN INS CO MENU^Insurance Company Selection^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4720,4)
26^4
"KRN",101,4720,10,0)
^101.01PA^6^5
"KRN",101,4720,10,1,0)
4716^SE^10^
"KRN",101,4720,10,1,"^")
IBCN INS CO SELECT
"KRN",101,4720,10,2,0)
858^EX^40^
"KRN",101,4720,10,2,"^")
IBCNS EXIT
"KRN",101,4720,10,3,0)
4717^DE^15^
"KRN",101,4720,10,3,"^")
IBCN INS CO UNSELECT
"KRN",101,4720,10,5,0)
4718^SH^50^
"KRN",101,4720,10,5,"^")
IBCN INS CO SHOW SEL
"KRN",101,4720,10,6,0)
4722^NE^20^
"KRN",101,4720,10,6,"^")
IBCN INS CO NEW SEARCH
"KRN",101,4720,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4720,20)
K IBFASTXT
"KRN",101,4720,26)
D SHOW^VALM
"KRN",101,4720,28)
Select Action: 
"KRN",101,4720,99)
63841,47468
"KRN",101,4721,-1)
0^24
"KRN",101,4721,0)
IBCN INS CO ACTIVE MENU^Show Ins Co Selections^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4721,4)
36^4
"KRN",101,4721,10,0)
^101.01PA^3^3
"KRN",101,4721,10,1,0)
4719^DE^10^
"KRN",101,4721,10,1,"^")
IBCN INS CO ACTIVE UNSELECT
"KRN",101,4721,10,2,0)
455^^20^
"KRN",101,4721,10,2,"^")
VALM BLANK 1
"KRN",101,4721,10,3,0)
858^EX^30^
"KRN",101,4721,10,3,"^")
IBCNS EXIT
"KRN",101,4721,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4721,26)
D SHOW^VALM
"KRN",101,4721,28)
Select Action: 
"KRN",101,4721,99)
63841,48468
"KRN",101,4722,-1)
0^27
"KRN",101,4722,0)
IBCN INS CO NEW SEARCH^New Search^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4722,20)
D NEWSRCH^IBCNILK
"KRN",101,4722,99)
63830,22198
"KRN",101,4723,-1)
0^34
"KRN",101,4723,0)
IBCN SUBSCRIBER MENU^Subscriber Selection^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4723,1,0)
^^1^1^3151211^
"KRN",101,4723,1,1,0)
Menu used to select and unselect Subscribers.
"KRN",101,4723,4)
26^4^^
"KRN",101,4723,10,0)
^101.01PA^5^5
"KRN",101,4723,10,1,0)
4724^SE^10^
"KRN",101,4723,10,1,"^")
IBCN SUBSCRIBER SELECT
"KRN",101,4723,10,2,0)
858^EX^40^
"KRN",101,4723,10,2,"^")
IBCNS EXIT
"KRN",101,4723,10,3,0)
4725^DE^15^
"KRN",101,4723,10,3,"^")
IBCN SUBSCRIBER UNSELECT
"KRN",101,4723,10,4,0)
4726^SH^50^
"KRN",101,4723,10,4,"^")
IBCN SUBSCRIBER SHOW SEL
"KRN",101,4723,10,5,0)
4727^SO^20^
"KRN",101,4723,10,5,"^")
IBCN SUBSCRIBER SORT LIST
"KRN",101,4723,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4723,20)
K IBFASTXT
"KRN",101,4723,26)
D SHOW^VALM
"KRN",101,4723,28)
Select Action: 
"KRN",101,4723,99)
63853,37640
"KRN",101,4724,-1)
0^35
"KRN",101,4724,0)
IBCN SUBSCRIBER SELECT^Select Subscriber^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4724,20)
D SEL^IBCNSUR4
"KRN",101,4724,21,0)
^101.021A
"KRN",101,4724,99)
63833,41063
"KRN",101,4725,-1)
0^38
"KRN",101,4725,0)
IBCN SUBSCRIBER UNSELECT^Deselect Subscriber^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4725,20)
D UNSEL^IBCNSUR4
"KRN",101,4725,99)
63852,55925
"KRN",101,4726,-1)
0^36
"KRN",101,4726,0)
IBCN SUBSCRIBER SHOW SEL^Show Selections^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4726,20)
D SHOWSEL^IBCNSUR4
"KRN",101,4726,99)
63833,41534
"KRN",101,4727,-1)
0^37
"KRN",101,4727,0)
IBCN SUBSCRIBER SORT LIST^Sort List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4727,20)
D SELSORT^IBCNSUR4
"KRN",101,4727,99)
63853,37479
"KRN",101,4728,-1)
0^32
"KRN",101,4728,0)
IBCN SUBSCRIBER ACTIVE MENU^Show Subscriber Selections^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4728,4)
36^4
"KRN",101,4728,10,0)
^101.01PA^3^3
"KRN",101,4728,10,1,0)
4729^DE^10^
"KRN",101,4728,10,1,"^")
IBCN SUBSCRIBER ACTIVE UNSELECT
"KRN",101,4728,10,2,0)
455^^20^
"KRN",101,4728,10,2,"^")
VALM BLANK 1
"KRN",101,4728,10,3,0)
858^EX^30^
"KRN",101,4728,10,3,"^")
IBCNS EXIT
"KRN",101,4728,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,4728,26)
D SHOW^VALM
"KRN",101,4728,28)
Select Action: 
"KRN",101,4728,99)
63855,38189
"KRN",101,4729,-1)
0^33
"KRN",101,4729,0)
IBCN SUBSCRIBER ACTIVE UNSELECT^Deselect Subscriber^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4729,20)
D UNSEL^IBCNSUR4(1)
"KRN",101,4729,99)
63847,45147
"KRN",101,4738,-1)
0^67
"KRN",101,4738,0)
IBJT SHORT MENU 2^Short Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4738,1,0)
^^2^2^3151231^
"KRN",101,4738,1,1,0)
Short menu used from Third Party Joint Inquiry->PI->VP option.  Includes 
"KRN",101,4738,1,2,0)
the new PT (Patient Policy Comments) action.
"KRN",101,4738,4)
26^4
"KRN",101,4738,10,0)
^101.01PA^3^3
"KRN",101,4738,10,1,0)
1135^AL^17^
"KRN",101,4738,10,1,"^")
IBJT ACTIVE LIST SCREEN SKIP
"KRN",101,4738,10,2,0)
1121^EX^37^
"KRN",101,4738,10,2,"^")
IBJ EXIT
"KRN",101,4738,10,3,0)
4662^PT^29^
"KRN",101,4738,10,3,"^")
IBJT PATIENT POLICY COMMENTS VIEW
"KRN",101,4738,15)
I $G(IBFASTXT)>2 S VALMBCK="Q"
"KRN",101,4738,20)
K IBFASTXT
"KRN",101,4738,26)
D BM^IBJU1(20,20),SHOW^VALM
"KRN",101,4738,28)
Select Action: 
"KRN",101,4738,99)
63917,50538
"KRN",101,4739,-1)
0^68
"KRN",101,4739,0)
IBCNB ELIG PAYER SUMMARY^Payer Summary^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4739,20)
D EN^IBCNES4
"KRN",101,4739,21,0)
^101.021A
"KRN",101,4739,24)
I '$G(AVIEW)
"KRN",101,4739,99)
63924,43342
"KRN",101,4740,-1)
0^69
"KRN",101,4740,0)
IBCNE ELIG PAY SUM MENU^eIV Elig/ben payer summary menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4740,4)
26^4
"KRN",101,4740,10,0)
^101.01PA^1^1
"KRN",101,4740,10,1,0)
3586^EX^11^
"KRN",101,4740,10,1,"^")
IBCNE FAST EXIT
"KRN",101,4740,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4740,26)
D SHOW^VALM
"KRN",101,4740,28)
Select Action:
"KRN",101,4740,99)
63928,37388
"KRN",409.61,748,-1)
0^6
"KRN",409.61,748,0)
IBJP IIV SITE PARAMETERS^1^^80^4^20^1^1^^IBJP INS VER MENU^IV Site Parameters^1^^1
"KRN",409.61,748,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,748,"ARRAY")
 ^TMP($J,"IBJPI")
"KRN",409.61,748,"FNL")
D EXIT^IBJPI
"KRN",409.61,748,"HDR")
D HDR^IBJPI
"KRN",409.61,748,"HLP")
D HELP^IBJPI
"KRN",409.61,748,"INIT")
D INIT^IBJPI
"KRN",409.61,925,-1)
0^3
"KRN",409.61,925,0)
IBCNCH POLICY COMMENT HISTORY^1^^80^5^20^1^1^Comment History^IBCNCH COMMENT HISTORY MENU^Patient Policy Comments^1^^1
"KRN",409.61,925,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,925,"ARRAY")
 ^TMP("IBCNCH",$J)
"KRN",409.61,925,"COL",0)
^409.621^5^5
"KRN",409.61,925,"COL",1,0)
CTR^1^4^#
"KRN",409.61,925,"COL",2,0)
Date Entered^7^10^Dt Entered
"KRN",409.61,925,"COL",3,0)
Entered By^19^30^Entered By
"KRN",409.61,925,"COL",4,0)
Method^45^10^Method
"KRN",409.61,925,"COL",5,0)
Person Contacted^56^23^Person Contacted^
"KRN",409.61,925,"COL","B","CTR",1)

"KRN",409.61,925,"COL","B","Date Entered",2)

"KRN",409.61,925,"COL","B","Entered By",3)

"KRN",409.61,925,"COL","B","Method",4)

"KRN",409.61,925,"COL","B","Person Contacted",5)

"KRN",409.61,925,"FNL")
D EXIT^IBCNCH
"KRN",409.61,925,"HDR")
D HDR^IBCNCH
"KRN",409.61,925,"HLP")
D HELP^IBCNCH
"KRN",409.61,925,"INIT")
D INIT^IBCNCH
"KRN",409.61,928,-1)
0^5
"KRN",409.61,928,0)
IBCNCH POLICY COMMENT VIEW^1^^80^5^20^1^1^Comment History View^IBCNCH COMMENT HISTORY VIEW^View Patient Policy Comments^1^^1
"KRN",409.61,928,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,928,"ARRAY")
 ^TMP("IBCNCH",$J)
"KRN",409.61,928,"COL",0)
^409.621^5^5
"KRN",409.61,928,"COL",1,0)
CTR^1^4^#
"KRN",409.61,928,"COL",2,0)
Date Entered^7^10^Dt Entered
"KRN",409.61,928,"COL",3,0)
Entered By^19^30^Entered By
"KRN",409.61,928,"COL",4,0)
Method^45^10^Method
"KRN",409.61,928,"COL",5,0)
Person Contacted^56^23^Person Contacted
"KRN",409.61,928,"COL","B","CTR",1)

"KRN",409.61,928,"COL","B","Date Entered",2)

"KRN",409.61,928,"COL","B","Entered By",3)

"KRN",409.61,928,"COL","B","Method",4)

"KRN",409.61,928,"COL","B","Person Contacted",5)

"KRN",409.61,928,"FNL")
D EXIT^IBCNCH
"KRN",409.61,928,"HDR")
D HDR^IBCNCH
"KRN",409.61,928,"HLP")
D HELP^IBCNCH
"KRN",409.61,928,"INIT")
D INIT^IBCNCH
"KRN",409.61,929,-1)
0^2
"KRN",409.61,929,0)
IBCNCH POLICY COMMENT EXPAND^1^^80^5^20^1^1^Comment History Expand^IBCNCH COMMENT HISTORY EXPAND^Expand Patient Policy Comment^1^^1
"KRN",409.61,929,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,929,"ARRAY")
 ^TMP("IBCNCH3",$J)
"KRN",409.61,929,"FNL")
D EXIT^IBCNCH3
"KRN",409.61,929,"HDR")
D HDR^IBCNCH3
"KRN",409.61,929,"HLP")
D HELP^IBCNCH3
"KRN",409.61,929,"INIT")
D INIT^IBCNCH3
"KRN",409.61,930,-1)
0^4
"KRN",409.61,930,0)
IBCNCH POLICY COMMENT SEARCH^1^^80^6^20^1^1^Comment History Search^IBCNCH COMMENT HISTORY SEARCH^Search Pt Policy Comments^1^^1
"KRN",409.61,930,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,930,"ARRAY")
 ^TMP("IBCNCH3",$J)
"KRN",409.61,930,"COL",0)
^409.621^^0
"KRN",409.61,930,"FNL")
D EXIT^IBCNCH3
"KRN",409.61,930,"HDR")
D HDR^IBCNCH3
"KRN",409.61,930,"HLP")
D HELP^IBCNCH3
"KRN",409.61,930,"INIT")
D INIT^IBCNCH3
"KRN",409.61,931,-1)
0^1
"KRN",409.61,931,0)
IBCNCH POL COMMENT EXPAND VIEW^1^^80^5^20^1^1^Comment History Expand^IBCNCH COMMENT HISTORY EXPAND VIEW^Expand Patient Policy Comment^1^^1
"KRN",409.61,931,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,931,"ARRAY")
 ^TMP("IBCNCH3",$J)
"KRN",409.61,931,"FNL")
D EXIT^IBCNCH3
"KRN",409.61,931,"HDR")
D HDR^IBCNCH3
"KRN",409.61,931,"HLP")
D HELP^IBCNCH3
"KRN",409.61,931,"INIT")
D INIT^IBCNCH3
"KRN",409.61,943,-1)
0^8
"KRN",409.61,943,0)
IBCN INS CO SELECTOR^1^^160^6^20^1^1^Insurance Company^IBCN INS CO MENU^Insurance Company Selection^1^^1
"KRN",409.61,943,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,943,"ARRAY")
 ^TMP("IBCNILK",$J)
"KRN",409.61,943,"COL",0)
^409.621^7^7
"KRN",409.61,943,"COL",1,0)
CTR^1^4^#
"KRN",409.61,943,"COL",2,0)
NAME^7^30^Name
"KRN",409.61,943,"COL",3,0)
ADDRESS LINE 1^46^35^Street Address
"KRN",409.61,943,"COL",4,0)
CITY^84^25^City
"KRN",409.61,943,"COL",5,0)
STATE^111^2^St
"KRN",409.61,943,"COL",6,0)
ACTIVE^40^3^A/I
"KRN",409.61,943,"COL",7,0)
ZIP^116^9^Zip Code
"KRN",409.61,943,"COL","B","ACTIVE",6)

"KRN",409.61,943,"COL","B","ADDRESS LINE 1",3)

"KRN",409.61,943,"COL","B","CITY",4)

"KRN",409.61,943,"COL","B","CTR",1)

"KRN",409.61,943,"COL","B","NAME",2)

"KRN",409.61,943,"COL","B","STATE",5)

"KRN",409.61,943,"COL","B","ZIP",7)

"KRN",409.61,943,"FNL")
D EXIT^IBCNILK
"KRN",409.61,943,"HDR")
D HDR^IBCNILK
"KRN",409.61,943,"HLP")
D HELP^IBCNILK
"KRN",409.61,943,"INIT")
D INIT^IBCNILK
"KRN",409.61,944,-1)
0^7
"KRN",409.61,944,0)
IBCN INS CO SELECTED^1^^160^6^20^1^1^Selected Insurance Companies^IBCN INS CO ACTIVE MENU^Selected Insurance Companies^1^^1
"KRN",409.61,944,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,944,"ARRAY")
 ^TMP("IBCNILKS",$J)
"KRN",409.61,944,"COL",0)
^409.621^7^7
"KRN",409.61,944,"COL",1,0)
CTR^1^4^#
"KRN",409.61,944,"COL",2,0)
NAME^7^30^Name
"KRN",409.61,944,"COL",3,0)
ADDRESS LINE 1^46^35^Street Address
"KRN",409.61,944,"COL",4,0)
CITY^84^25^City
"KRN",409.61,944,"COL",5,0)
State^111^2^St
"KRN",409.61,944,"COL",6,0)
ACTIVE^40^3^A/I
"KRN",409.61,944,"COL",7,0)
ZIP^116^9^Zip Code
"KRN",409.61,944,"COL","B","ACTIVE",6)

"KRN",409.61,944,"COL","B","ADDRESS LINE 1",3)

"KRN",409.61,944,"COL","B","CITY",4)

"KRN",409.61,944,"COL","B","CTR",1)

"KRN",409.61,944,"COL","B","NAME",2)

"KRN",409.61,944,"COL","B","State",5)

"KRN",409.61,944,"COL","B","ZIP",7)

"KRN",409.61,944,"FNL")
D EXIT2^IBCNILK
"KRN",409.61,944,"HDR")
D HDR^IBCNILK(1)
"KRN",409.61,944,"HLP")
D HELP^IBCNILK
"KRN",409.61,944,"INIT")
D INIT2^IBCNILK
"KRN",409.61,945,-1)
0^10
"KRN",409.61,945,0)
IBCN SUBSCRIBER SELECTOR^1^^120^8^20^1^1^Subscriber Selection^IBCN SUBSCRIBER MENU^Subscriber Selection^1^^1
"KRN",409.61,945,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,945,"ARRAY")
 ^TMP("IBCNSUR4",$J)
"KRN",409.61,945,"COL",0)
^409.621^9^8
"KRN",409.61,945,"COL",1,0)
CTR^1^4^#^^0
"KRN",409.61,945,"COL",2,0)
PATIENT NAME^6^15^PATIENT NAME^^0
"KRN",409.61,945,"COL",3,0)
SSN^22^4^SSN^^0
"KRN",409.61,945,"COL",5,0)
SUB ID^27^20^SUB^^0
"KRN",409.61,945,"COL",6,0)
EFF^48^8^EFF^^0
"KRN",409.61,945,"COL",7,0)
EXP^57^8^EXP^^0
"KRN",409.61,945,"COL",8,0)
WHOSE^66^4^WHO?^^0
"KRN",409.61,945,"COL",9,0)
PAT ID^71^30^PAT ID
"KRN",409.61,945,"COL","AIDENT",0,1)

"KRN",409.61,945,"COL","AIDENT",0,2)

"KRN",409.61,945,"COL","AIDENT",0,3)

"KRN",409.61,945,"COL","AIDENT",0,5)

"KRN",409.61,945,"COL","AIDENT",0,6)

"KRN",409.61,945,"COL","AIDENT",0,7)

"KRN",409.61,945,"COL","AIDENT",0,8)

"KRN",409.61,945,"COL","B","CTR",1)

"KRN",409.61,945,"COL","B","EFF",6)

"KRN",409.61,945,"COL","B","EXP",7)

"KRN",409.61,945,"COL","B","PAT ID",9)

"KRN",409.61,945,"COL","B","PATIENT NAME",2)

"KRN",409.61,945,"COL","B","SSN",3)

"KRN",409.61,945,"COL","B","SUB ID",5)

"KRN",409.61,945,"COL","B","WHOSE",8)

"KRN",409.61,945,"FNL")
D EXIT^IBCNSUR4
"KRN",409.61,945,"HDR")
D HDR^IBCNSUR4
"KRN",409.61,945,"HLP")
D HELP^IBCNSUR4
"KRN",409.61,945,"INIT")
D INIT^IBCNSUR4
"KRN",409.61,946,-1)
0^9
"KRN",409.61,946,0)
IBCN SUBSCRIBER SELECTED^1^^120^8^20^1^1^Selected Subscribers^IBCN SUBSCRIBER ACTIVE MENU^Selected Subscribers^1^^1
"KRN",409.61,946,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,946,"ARRAY")
 ^TMP("IBCNSUR4S",$J)
"KRN",409.61,946,"COL",0)
^409.621^8^8
"KRN",409.61,946,"COL",1,0)
CTR^1^4^#
"KRN",409.61,946,"COL",2,0)
PATIENT NAME^6^15^PATIENT NAME
"KRN",409.61,946,"COL",3,0)
SSN^22^4^SSN
"KRN",409.61,946,"COL",4,0)
SUB ID^27^20^SUB
"KRN",409.61,946,"COL",5,0)
EFF^48^8^EFF
"KRN",409.61,946,"COL",6,0)
EXP^57^8^EXP
"KRN",409.61,946,"COL",7,0)
WHOSE^66^4^WHO?
"KRN",409.61,946,"COL",8,0)
PAT ID^71^30^PAT ID
"KRN",409.61,946,"COL","B","CTR",1)

"KRN",409.61,946,"COL","B","EFF",5)

"KRN",409.61,946,"COL","B","EXP",6)

"KRN",409.61,946,"COL","B","PAT ID",8)

"KRN",409.61,946,"COL","B","PATIENT NAME",2)

"KRN",409.61,946,"COL","B","SSN",3)

"KRN",409.61,946,"COL","B","SUB ID",4)

"KRN",409.61,946,"COL","B","WHOSE",7)

"KRN",409.61,946,"FNL")
D EXIT2^IBCNSUR4
"KRN",409.61,946,"HDR")
D HDR^IBCNSUR4(1)
"KRN",409.61,946,"HLP")
D HELP^IBCNSUR4
"KRN",409.61,946,"INIT")
D INIT2^IBCNSUR4
"KRN",409.61,950,-1)
0^11
"KRN",409.61,950,0)
IBCNB INSURANCE BUFFER PAYER^1^^80^6^21^1^1^^IBCNE ELIG PAY SUM MENU^eIV Elig/Benefit Payer Summary
"KRN",409.61,950,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,950,"ARRAY")
 ^TMP("IBCNES PAY SUM",$J)
"KRN",409.61,950,"EXP")

"KRN",409.61,950,"FNL")
D EXIT^IBCNES4
"KRN",409.61,950,"HDR")
D HDR^IBCNES4
"KRN",409.61,950,"HLP")
D HELP^IBCNES4
"KRN",409.61,950,"INIT")
D INIT^IBCNES4
"MBREQ")
1
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
549^3160629
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
58
"RTN","IBAMTC")
0^50^B27117465
"RTN","IBAMTC",1,0)
IBAMTC ;ALB/CPM-MEANS TEST NIGHTLY COMPILATION JOB ;09-OCT-91
"RTN","IBAMTC",2,0)
 ;;2.0;INTEGRATED BILLING;**34,52,70,93,100,118,115,132,150,153,137,176,215,275,321,312,457,519,549**;21-MAR-94;Build 54
"RTN","IBAMTC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBAMTC",4,0)
 ;
"RTN","IBAMTC",5,0)
INIT ; Entry point - initialize variables and parameters
"RTN","IBAMTC",6,0)
 ;
"RTN","IBAMTC",7,0)
 ;***
"RTN","IBAMTC",8,0)
 ;S XRTL=$ZU(0),XRTN="IBAMTC-1" D T0^%ZOSV ;start rt clock
"RTN","IBAMTC",9,0)
 ;
"RTN","IBAMTC",10,0)
 D UPDT^IBARXEPS($$FMADD^XLFDT(DT,-30),DT,1)
"RTN","IBAMTC",11,0)
 ;
"RTN","IBAMTC",12,0)
 D NIGHTLY^IBTRKR ; claims tracking nightly update
"RTN","IBAMTC",13,0)
 ;
"RTN","IBAMTC",14,0)
 D ^IBCD ; automated biller
"RTN","IBAMTC",15,0)
 ;
"RTN","IBAMTC",16,0)
 D RELPR^IBAMTV3 ; auto-release patient charges on hold at least 60 days
"RTN","IBAMTC",17,0)
 ;
"RTN","IBAMTC",18,0)
 D EN^IBOHRL ; auto-release patient charges on hold longer than 90 days
"RTN","IBAMTC",19,0)
 ;
"RTN","IBAMTC",20,0)
 K IBDT D BJ^IBJDE  ; Automated DM extract monthly background job.
"RTN","IBAMTC",21,0)
 ;
"RTN","IBAMTC",22,0)
 ; - transfer pricing background job
"RTN","IBAMTC",23,0)
 I '+$$SWSTAT^IBBAPI() D ^IBATEI1                           ;IB*2.0*312
"RTN","IBAMTC",24,0)
 ;
"RTN","IBAMTC",25,0)
 D NIGHT^IBARXMA ; transmit copay cap info
"RTN","IBAMTC",26,0)
 ;
"RTN","IBAMTC",27,0)
 D NOW^%DTC S IBAFY=$$FY^IBOUTL(X),DT=X,U="^"
"RTN","IBAMTC",28,0)
 S (IBERRN,IBWHER,IBJOB,IBY,Y)=1,IBCNT=0 K ^TMP($J,"IBAMTC")
"RTN","IBAMTC",29,0)
 D SITE^IBAUTL I Y<1 S IBY=Y D ERR G CLEAN
"RTN","IBAMTC",30,0)
 D SERV^IBAUTL2 I IBY<1 D ERR G CLEAN
"RTN","IBAMTC",31,0)
 ;
"RTN","IBAMTC",32,0)
 ; Compile Means Test copay and per diem charges for all inpatients
"RTN","IBAMTC",33,0)
 ; Check PFSS Switch                                        ;IB*2.0*312
"RTN","IBAMTC",34,0)
 ; IB*2.0*549 Remove naked global
"RTN","IBAMTC",35,0)
 I '+$$SWSTAT^IBBAPI() S (IBWARD,DFN)="" F  S IBWARD=$O(^DPT("CN",IBWARD)) Q:IBWARD=""  F  S DFN=$O(^DPT("CN",IBWARD,DFN)) Q:'DFN  W !,DFN S IBA=^DPT("CN",IBWARD,DFN),IBY=1 D PROC
"RTN","IBAMTC",36,0)
 ;
"RTN","IBAMTC",37,0)
 ;send inpatients' CV (CombatVet) expiration e-mail alert
"RTN","IBAMTC",38,0)
 D CVEXMAIL^IBACV(DT)
"RTN","IBAMTC",39,0)
 ;
"RTN","IBAMTC",40,0)
 ;check & start LTC Monthly Job if necessary
"RTN","IBAMTC",41,0)
 ; This code may need to be expanded, IF we don't          ;IB*2.0*312 
"RTN","IBAMTC",42,0)
 ; implement on the 1st of the month, for a clean cut over ;IB*2.0*312
"RTN","IBAMTC",43,0)
 I '+$$SWSTAT^IBBAPI() D NJ^IBAECN1                        ;IB*2.0*312
"RTN","IBAMTC",44,0)
 ;
"RTN","IBAMTC",45,0)
 D EN^IBCE ; Transmit electronic bills
"RTN","IBAMTC",46,0)
 ; Clean up expired Means Test billing clocks
"RTN","IBAMTC",47,0)
CLEAN S %H=+$H-1 D YMD^%DTC S IBDT=X,(IBN,DFN)=0,IBWHER=23
"RTN","IBAMTC",48,0)
 F  S DFN=$O(^IBE(351,"ACT",DFN)) Q:'DFN  D
"RTN","IBAMTC",49,0)
 . F  S IBN=$O(^IBE(351,"ACT",DFN,IBN)) Q:'IBN  D
"RTN","IBAMTC",50,0)
 ..  S IBY=1,X1=IBDT,(X2,IBCLDT)=+$P($G(^IBE(351,+IBN,0)),"^",3) D ^%DTC
"RTN","IBAMTC",51,0)
 ..  I X>364 S IBCLDA=IBN D CLOCKCL^IBAUTL3,ERR:IBY<1
"RTN","IBAMTC",52,0)
 ;
"RTN","IBAMTC",53,0)
 ; Close out incomplete events where the patient has been discharged,
"RTN","IBAMTC",54,0)
 ; pass the related charges if they appear correct, and send a bulletin
"RTN","IBAMTC",55,0)
 ; - also, send bulletins on old incomplete charges where there is no
"RTN","IBAMTC",56,0)
 ; incomplete event
"RTN","IBAMTC",57,0)
 D MAIN^IBAMTC2
"RTN","IBAMTC",58,0)
 ;
"RTN","IBAMTC",59,0)
 ;D ^IBAMTC1
"RTN","IBAMTC",60,0)
 ;
"RTN","IBAMTC",61,0)
 ; Send bulletin reporting job completion
"RTN","IBAMTC",62,0)
 I '+$$SWSTAT^IBBAPI() D BULL^IBAMTC1                     ;IB*2.0*312
"RTN","IBAMTC",63,0)
 ;
"RTN","IBAMTC",64,0)
 ; -- purge alerts
"RTN","IBAMTC",65,0)
 D PURGE^IBAERR3
"RTN","IBAMTC",66,0)
 ;
"RTN","IBAMTC",67,0)
 ; purge HPID files -- IB*2.0*519
"RTN","IBAMTC",68,0)
 ; IB*2.0*549 - PUR^IBCNHUT2 also checks to make sure the HL7 link is still up and
"RTN","IBAMTC",69,0)
 ;              running properly
"RTN","IBAMTC",70,0)
 D PUR^IBCNHUT2
"RTN","IBAMTC",71,0)
 ;
"RTN","IBAMTC",72,0)
 ; Monitor special inpatient billing cases
"RTN","IBAMTC",73,0)
 D BGJ^IBAMTI
"RTN","IBAMTC",74,0)
 ;
"RTN","IBAMTC",75,0)
 ; Print Pharmacy Copay Exemption Income Test Reminder Letters
"RTN","IBAMTC",76,0)
 D EN^IBARXEL
"RTN","IBAMTC",77,0)
 ;
"RTN","IBAMTC",78,0)
 ; Send HMS extract files to AITC DMI queues
"RTN","IBAMTC",79,0)
 D SENDEII^IBCNFSND
"RTN","IBAMTC",80,0)
 ;
"RTN","IBAMTC",81,0)
 ; Kill variables and quit.
"RTN","IBAMTC",82,0)
 D KILL1
"RTN","IBAMTC",83,0)
 ;
"RTN","IBAMTC",84,0)
 I $D(ZTQUEUED),$G(ZTSK) D KILL^%ZTLOAD
"RTN","IBAMTC",85,0)
 ;***
"RTN","IBAMTC",86,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBAMTC" D T1^%ZOSV ;stop rt clock
"RTN","IBAMTC",87,0)
 ;
"RTN","IBAMTC",88,0)
 Q
"RTN","IBAMTC",89,0)
 ;
"RTN","IBAMTC",90,0)
 ;
"RTN","IBAMTC",91,0)
PROC ; Process all currently admitted patients.
"RTN","IBAMTC",92,0)
 ;
"RTN","IBAMTC",93,0)
 D IFCVEXP^IBACV(DFN,DT,IBA) ;if CV has expired (see CVEXMAIL^IBACV)
"RTN","IBAMTC",94,0)
 ;--
"RTN","IBAMTC",95,0)
 ;1) checks effective date for LTC legislation.
"RTN","IBAMTC",96,0)
 ;2) determine current treating specialty (TS) for the 
"RTN","IBAMTC",97,0)
 ;"original" admission.
"RTN","IBAMTC",98,0)
 ;if TS is LTC: 
"RTN","IBAMTC",99,0)
 ;  - creates new LTC #350 parent event entry if necessary.
"RTN","IBAMTC",100,0)
 ;NOTE: It doesn't stop MT billing for LTC. CALC^IBAUTL4 does it.
"RTN","IBAMTC",101,0)
 I $$ISLTCADM^IBAECN1(DFN,IBA)
"RTN","IBAMTC",102,0)
 ;--
"RTN","IBAMTC",103,0)
 D ORIG  ; find "original" admission date
"RTN","IBAMTC",104,0)
 Q:$$BILST^DGMTUB(DFN)<IBADMDT  ; pat. was last billable before admission
"RTN","IBAMTC",105,0)
 Q:IBADMDT\1=DT  ; patient was admitted today - process tomorrow
"RTN","IBAMTC",106,0)
 Q:+$$MVT^DGPMOBS(IBA)  ; admitted for Observation & Examination
"RTN","IBAMTC",107,0)
 Q:$O(^IBE(351.2,"AC",IBA,0))  ; skip special inpatient admissions
"RTN","IBAMTC",108,0)
 ;
"RTN","IBAMTC",109,0)
 ; - if vet is SC, create a Special Inpatient Billing Case
"RTN","IBAMTC",110,0)
 ;   in file #351.2 (use code 3 for SC, as it is changed to 4 in IBAMTI)
"RTN","IBAMTC",111,0)
 D ELIG^VADPT I VAEL(3) D ADM^IBAMTI(DFN,IBA,3) Q
"RTN","IBAMTC",112,0)
 ;
"RTN","IBAMTC",113,0)
 ; - gather event information
"RTN","IBAMTC",114,0)
 D EVFIND^IBAUTL3 I 'IBEVDA D BSEC Q:'IBBS  ; wasn't billable yesterday
"RTN","IBAMTC",115,0)
 S X=IBADMDT D H^%DTC S IBBDT=%H D:'IBEVDA LAST^IBAUTL5
"RTN","IBAMTC",116,0)
 I IBEVDA,IBEVCAL S X1=IBEVCAL,X2=1 D C^%DTC S IBBDT=%H
"RTN","IBAMTC",117,0)
 S IBEDT=+$H-1
"RTN","IBAMTC",118,0)
 ; - gather clock information
"RTN","IBAMTC",119,0)
 S IBWHER=24 D CLOCK^IBAUTL3 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",120,0)
 I IBCLDA S X=IBCLDT D H^%DTC S IBCLCT=IBBDT-%H
"RTN","IBAMTC",121,0)
 ; - build charges for inpatient days
"RTN","IBAMTC",122,0)
 D ^IBAUTL4 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",123,0)
 ; - pass per diem if over 30 days old, or both per diem and the copay
"RTN","IBAMTC",124,0)
 ; - if 4 days from patient's statement date; update event, clock
"RTN","IBAMTC",125,0)
 S IBWHER=22
"RTN","IBAMTC",126,0)
 I $G(IBCHPDA),$P($G(^IB(+IBCHPDA,0)),"^",6)>30!($$STD^IBAUTL5(DFN)) S IBNOS=IBCHPDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",127,0)
 I $G(IBCHCDA),$$STD^IBAUTL5(DFN) S IBNOS=IBCHCDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",128,0)
 I IBEVDA,$D(IBDT) S IBEVCLD=IBDT D EVUPD^IBAUTL3
"RTN","IBAMTC",129,0)
 I IBCLDA D CLUPD^IBAUTL3
"RTN","IBAMTC",130,0)
PROCQ D KILL Q
"RTN","IBAMTC",131,0)
 ;
"RTN","IBAMTC",132,0)
BSEC ; Determine patient's bed section for the previous day.
"RTN","IBAMTC",133,0)
 S X1=DT,X2=-1 D C^%DTC
"RTN","IBAMTC",134,0)
 S VAIP("D")=X_.2359 D IN5^VADPT S IBBS=$$SECT^IBAUTL5(+VAIP(8)) Q
"RTN","IBAMTC",135,0)
 ;
"RTN","IBAMTC",136,0)
ERR ; Error processing.  Input:  IBY, IBWHER, IBCNT
"RTN","IBAMTC",137,0)
 S IBDUZ=DUZ,IBCNT=IBCNT+1 D ^IBAERR1 K IBDUZ Q
"RTN","IBAMTC",138,0)
 ;S ^TMP($J,"IBAMTC","E",IBERRN)=$P(IBY,"^",2)_"^"_$S($D(DFN):DFN,1:"")_"^"_IBWHER,IBERRN=IBERRN+1 Q
"RTN","IBAMTC",139,0)
 ;
"RTN","IBAMTC",140,0)
ORIG ; Find first admission date, considering ASIH movements
"RTN","IBAMTC",141,0)
 ;  Input:  IBA    Output:  IBADMDT
"RTN","IBAMTC",142,0)
 N X,Y,Z S Z=IBA
"RTN","IBAMTC",143,0)
 F  S X=$G(^DGPM(Z,0)),Y=$P(X,"^",21) Q:Y=""  S Z=+$P($G(^DGPM(Y,0)),"^",14)
"RTN","IBAMTC",144,0)
 S IBADMDT=+X Q
"RTN","IBAMTC",145,0)
 ;
"RTN","IBAMTC",146,0)
KILL1 ; Kill all IB variables.
"RTN","IBAMTC",147,0)
 K VAERR,VAEL,VAIP,IBA,IBADMDT,IBAFY,IBATYP,IBBDT,IBBS,IBCHARG,IBCHG,IBCNT,IBCUR,IBDESC,IBDISDT,IBDT,IBDUZ,IBFAC,IBI,IBIL,IBJOB,IBLC,IBMAX
"RTN","IBAMTC",148,0)
 K IBN,IBNOS,IBSAVBS,IBSEQNO,IBSERV,IBSITE,IBSL,IBTRAN,IBX,IBY,IBWHER,IBWARD,IBEDT,IBCHCTY,IBCHPDE,IBERRN,IBASIH,IBRTED
"RTN","IBAMTC",149,0)
KILL ; Kill all IB variables needed to build charges.
"RTN","IBAMTC",150,0)
 K IBCLCT,IBCLDA,IBCLDT,IBCLDAY,IBCLDOL,IBCHPDA,IBCHCDA,IBCHG,IBCHFR,IBCHTO,IBCHTOTL,IBBS,IBNH
"RTN","IBAMTC",151,0)
 K IBEVDA,IBEVDT,IBEVCLD,IBEVCAL,IBEVNEW,IBEVOLD,IBMED,IBTOTL,IBDESC,IBIL,IBTRAN,IBATYP,IBDATE
"RTN","IBAMTC",152,0)
 Q
"RTN","IBCEMMR")
0^16^B216048164
"RTN","IBCEMMR",1,0)
IBCEMMR ;ALB/ESG - IB MRA Report of Patients w/o Medicare WNR ; 03 Dec 2015  1:57 PM
"RTN","IBCEMMR",2,0)
 ;;2.0;INTEGRATED BILLING;**155,366,528,549**;21-MAR-94;Build 54
"RTN","IBCEMMR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEMMR",4,0)
 ;
"RTN","IBCEMMR",5,0)
 ; Find patients with Medicare supplemental insurance or Medigap
"RTN","IBCEMMR",6,0)
 ; insurance (etc.) but who do not have MEDICARE (WNR) on file as
"RTN","IBCEMMR",7,0)
 ; one of their insurances.
"RTN","IBCEMMR",8,0)
 ;
"RTN","IBCEMMR",9,0)
 Q
"RTN","IBCEMMR",10,0)
 ;
"RTN","IBCEMMR",11,0)
EN ; Entry Point
"RTN","IBCEMMR",12,0)
 ; ENDDATE - IB*2.0*549 End date for new filtering criteria
"RTN","IBCEMMR",13,0)
 ; STARTDT - IB*2.0*549 Start date for new filtering criteria
"RTN","IBCEMMR",14,0)
 ; IBCEEXCEL - IB*2.0*549 Enabling the capture of output and state report width to be 80 characters to a 
"RTN","IBCEMMR",15,0)
 ; spreadsheet
"RTN","IBCEMMR",16,0)
 ;
"RTN","IBCEMMR",17,0)
 ; IB*2.0*549 New variables STARTDT, ENDDATE, IBCEEXCEL, STOP
"RTN","IBCEMMR",18,0)
 ; and STOP2.
"RTN","IBCEMMR",19,0)
 N ENDDATE,IBCEEXCEL,IBMSORT,STARTDT,STOP,STOP2
"RTN","IBCEMMR",20,0)
 ;
"RTN","IBCEMMR",21,0)
 ; IB*2.0*549 Add call to FILTER for new filtering criteria
"RTN","IBCEMMR",22,0)
 F  D  Q:STOP
"RTN","IBCEMMR",23,0)
 . S STOP=$$FILTER(.STARTDT,.ENDDATE)
"RTN","IBCEMMR",24,0)
 . ; IB*2.0*549 If STOP=1, exit outer loop (ABORTS from FILTER)
"RTN","IBCEMMR",25,0)
 . I 'STOP D
"RTN","IBCEMMR",26,0)
 . . F  D  Q:STOP!STOP2
"RTN","IBCEMMR",27,0)
 . . . D SORT
"RTN","IBCEMMR",28,0)
 . . . S STOP2='IBMSORT
"RTN","IBCEMMR",29,0)
 . . . ; IB*2.0*549 If no sort parameter, go back to top instead of
"RTN","IBCEMMR",30,0)
 . . . ;            jumping to top
"RTN","IBCEMMR",31,0)
 . . . I 'STOP2 D
"RTN","IBCEMMR",32,0)
 . . . . ; IB*2.0*549 Add code to prompt for delimited file output and state report width to be 80 characters
"RTN","IBCEMMR",33,0)
 . . . . ; IB*2.0*549 If true, do SORT again
"RTN","IBCEMMR",34,0)
 . . . . I $$FORMAT(.IBCEEXCEL) D
"RTN","IBCEMMR",35,0)
 . . . . . ; IB*2.0*549 Add STARTDT, ENDDATE and IBCEEXCEL arguments 
"RTN","IBCEMMR",36,0)
 . . . . . ; to call to DEVICE tag
"RTN","IBCEMMR",37,0)
 . . . . . D DEVICE(STARTDT,ENDDATE,IBCEEXCEL)
"RTN","IBCEMMR",38,0)
 . . . . . S STOP=2 ; Exit both loops / All input and state report width to be 80 characters good
"RTN","IBCEMMR",39,0)
 . . . . E  D
"RTN","IBCEMMR",40,0)
 . . . . . S STOP2=2
"RTN","IBCEMMR",41,0)
 Q
"RTN","IBCEMMR",42,0)
 ;
"RTN","IBCEMMR",43,0)
FILTER(STARTDT,ENDDATE) ; IB*2.0*549 New tag for getting 
"RTN","IBCEMMR",44,0)
 ;                            start/end dates to filter by Last 
"RTN","IBCEMMR",45,0)
 ;                            Appointment Date
"RTN","IBCEMMR",46,0)
 ; Input and state report width to be 80 characters/Output and state report width to be 80 characters (passed by reference)
"RTN","IBCEMMR",47,0)
 ;   STARTDT - Start date for new filtering criteria
"RTN","IBCEMMR",48,0)
 ;   ENDDATE - End date for new filtering criteria
"RTN","IBCEMMR",49,0)
 ;   Return - 1 for continuing on in EN
"RTN","IBCEMMR",50,0)
 ;            0 for exiting EN
"RTN","IBCEMMR",51,0)
 ;
"RTN","IBCEMMR",52,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,STOP
"RTN","IBCEMMR",53,0)
 W @IOF,!?20,"Patients Without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",54,0)
 W !
"RTN","IBCEMMR",55,0)
 W !?2,"This option finds patients who do not have active MEDICARE (WNR) insurance,"
"RTN","IBCEMMR",56,0)
 W !?2,"but who do have active insurance with a Plan Type of Medigap, Carve-Out, or"
"RTN","IBCEMMR",57,0)
 W !?2,"Medicare Secondary. In these cases, MEDICARE (WNR) should be primary."
"RTN","IBCEMMR",58,0)
 W !
"RTN","IBCEMMR",59,0)
 W !?2,"The insurances for all living patients will be analyzed, but"
"RTN","IBCEMMR",60,0)
 W !?2,"you can determine how this information will be sorted."
"RTN","IBCEMMR",61,0)
 W !!
"RTN","IBCEMMR",62,0)
 W !," Please enter Last Appointment Dates:"
"RTN","IBCEMMR",63,0)
 F  D  Q:STOP
"RTN","IBCEMMR",64,0)
 . D GETSTDT(.STARTDT)
"RTN","IBCEMMR",65,0)
 . I STARTDT?1.N D
"RTN","IBCEMMR",66,0)
 . . D GETENDDT(STARTDT,.ENDDATE)
"RTN","IBCEMMR",67,0)
 . . ; Exit loop (STOP=1) or redo START DATE
"RTN","IBCEMMR",68,0)
 . . S STOP=$S(ENDDATE?1.N:1,1:0)
"RTN","IBCEMMR",69,0)
 . E  S STOP=2 ; Exit loop / EN needs to abort
"RTN","IBCEMMR",70,0)
 Q (STOP=2)
"RTN","IBCEMMR",71,0)
 ;
"RTN","IBCEMMR",72,0)
GETSTDT(STARTDT) ; IB*2.0*549 Get start date for date filter
"RTN","IBCEMMR",73,0)
 ; Input and state report width to be 80 characters/Output and state report width to be 80 characters (Passed by reference)
"RTN","IBCEMMR",74,0)
 ;   STARTDT - Start date for new filtering criteria
"RTN","IBCEMMR",75,0)
 ;
"RTN","IBCEMMR",76,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEMMR",77,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCEMMR",78,0)
 S DIR("A")=" Start DATE"
"RTN","IBCEMMR",79,0)
 S DIR("?",1)=" Please enter a valid date for filtering"
"RTN","IBCEMMR",80,0)
 S DIR("?",2)=" the Last Appointment Date. Future dates"
"RTN","IBCEMMR",81,0)
 S DIR("?")=" are not allowed."
"RTN","IBCEMMR",82,0)
 D ^DIR K DIR
"RTN","IBCEMMR",83,0)
 S STARTDT=Y
"RTN","IBCEMMR",84,0)
 Q
"RTN","IBCEMMR",85,0)
 ;
"RTN","IBCEMMR",86,0)
GETENDDT(STARTDT,ENDDATE) ; IB*2.0*549 Get end date for date filter
"RTN","IBCEMMR",87,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",88,0)
 ;   STARTDT - Start date for new filtering criteria
"RTN","IBCEMMR",89,0)
 ;   ENDDT   - End date for new filtering criteria
"RTN","IBCEMMR",90,0)
 ;
"RTN","IBCEMMR",91,0)
 ; Output and state report width to be 80 characters (Passed by reference)
"RTN","IBCEMMR",92,0)
 ;   ENDDT - End date for new filtering criteria
"RTN","IBCEMMR",93,0)
 ;
"RTN","IBCEMMR",94,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEMMR",95,0)
 S DIR(0)="DA^"_STARTDT_":-NOW:EX"
"RTN","IBCEMMR",96,0)
 S DIR("A")="  End DATE: "
"RTN","IBCEMMR",97,0)
 S DIR("B")=$$FMTE^XLFDT($$DT^XLFDT,"2DZ")
"RTN","IBCEMMR",98,0)
 S DIR("?",1)=" Please enter a valid date filtering the"
"RTN","IBCEMMR",99,0)
 S DIR("?",2)=" Last Appointment Date. This date must"
"RTN","IBCEMMR",100,0)
 S DIR("?",3)=" not precede the Start Date. Future"
"RTN","IBCEMMR",101,0)
 S DIR("?")=" dates are not allowed."
"RTN","IBCEMMR",102,0)
 D ^DIR K DIR
"RTN","IBCEMMR",103,0)
 S ENDDATE=Y
"RTN","IBCEMMR",104,0)
 Q
"RTN","IBCEMMR",105,0)
 ;
"RTN","IBCEMMR",106,0)
FORMAT(IBCEEXCEL) ; IB*2.0*549 - capture the report format from 
"RTN","IBCEMMR",107,0)
 ;                              the user (normal or CSV output and state report width to be 80 characters)
"RTN","IBCEMMR",108,0)
 ; Input and state report width to be 80 characters (passed by reference)
"RTN","IBCEMMR",109,0)
 ;   IBCEEXCEL
"RTN","IBCEMMR",110,0)
 ; Output and state report width to be 80 characters
"RTN","IBCEMMR",111,0)
 ;   IBCEEXCEL=0 for normal output and state report width to be 80 characters
"RTN","IBCEMMR",112,0)
 ;   IBCEEXCEL=1 for CSV (comma separated values) for Excel 
"RTN","IBCEMMR",113,0)
 ; Return
"RTN","IBCEMMR",114,0)
 ;   1 for good input and state report width to be 80 characters; or
"RTN","IBCEMMR",115,0)
 ;   0 for going back
"RTN","IBCEMMR",116,0)
 ;
"RTN","IBCEMMR",117,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,STOP
"RTN","IBCEMMR",118,0)
 S IBCEEXCEL=""
"RTN","IBCEMMR",119,0)
 K DIR S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCEMMR",120,0)
 S DIR("A")=" (E)xcel Format or (R)eport Format: "
"RTN","IBCEMMR",121,0)
 S DIR("B")="Report"
"RTN","IBCEMMR",122,0)
 W ! D ^DIR
"RTN","IBCEMMR",123,0)
 S IBCEEXCEL=$S(Y="R":0,Y="E":1,1:Y)
"RTN","IBCEMMR",124,0)
 Q $S(IBCEEXCEL?1N:1,1:0)
"RTN","IBCEMMR",125,0)
 ;
"RTN","IBCEMMR",126,0)
 ; IB*2.0*549 Change sort to secondary sort and add documentation
"RTN","IBCEMMR",127,0)
SORT ; Ask user how to sort the report 
"RTN","IBCEMMR",128,0)
 ; (Secondary sort)
"RTN","IBCEMMR",129,0)
 ;
"RTN","IBCEMMR",130,0)
 N CH,DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEMMR",131,0)
 ; IB*2.0*549 Move IOF, title and description to FILTER tag
"RTN","IBCEMMR",132,0)
 S IBMSORT=""
"RTN","IBCEMMR",133,0)
 ; IB*2.0*549 Primary sort will be by Appointment Date and
"RTN","IBCEMMR",134,0)
 ;            Secondary sort will not be by Appointment Date
"RTN","IBCEMMR",135,0)
 S CH="1:Patient Name;2:SSN - Last 4 Digits;3:Insurance Company;"
"RTN","IBCEMMR",136,0)
 S CH=CH_"4:Type of Plan"
"RTN","IBCEMMR",137,0)
 ;
"RTN","IBCEMMR",138,0)
 S DIR(0)="SO^"_CH
"RTN","IBCEMMR",139,0)
 S DIR("A")=" Please enter the secondary Sort Criteria"
"RTN","IBCEMMR",140,0)
 S DIR("B")="Patient Name"
"RTN","IBCEMMR",141,0)
 S DIR("?",1)="The primary sort for this report is the last appointment date.  Please enter"
"RTN","IBCEMMR",142,0)
 S DIR("?")="a code from the list to identify the secondary sort."
"RTN","IBCEMMR",143,0)
 D ^DIR
"RTN","IBCEMMR",144,0)
 S:Y IBMSORT=Y
"RTN","IBCEMMR",145,0)
SORTX ;
"RTN","IBCEMMR",146,0)
 Q
"RTN","IBCEMMR",147,0)
 ;
"RTN","IBCEMMR",148,0)
COMPILE ; Entry point for both background and foreground task execution
"RTN","IBCEMMR",149,0)
 ;
"RTN","IBCEMMR",150,0)
 ; IB*2.0*549 - Document input and state report width to be 80 characters and output and state report width to be 80 characters
"RTN","IBCEMMR",151,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",152,0)
 ;   ZTQUEUED - Queued flag
"RTN","IBCEMMR",153,0)
 ;   STARTDT  - Start date for new filtering criteria
"RTN","IBCEMMR",154,0)
 ;   ENDDT  -   End date for new filtering criteria
"RTN","IBCEMMR",155,0)
 ;
"RTN","IBCEMMR",156,0)
 ; Output and state report width to be 80 characters
"RTN","IBCEMMR",157,0)
 ;   ZTSTOP - Flag for stopping routine
"RTN","IBCEMMR",158,0)
 ;
"RTN","IBCEMMR",159,0)
 ; IB*2.0*549 - Add DATA and SUBSCRIPT variables and alphabetize variables
"RTN","IBCEMMR",160,0)
 ; IB*2.0*549 - Enables filtering of dates, includes last verified date
"RTN","IBCEMMR",161,0)
 ;              LSTVERDT   - Last verified date
"RTN","IBCEMMR",162,0)
 ;
"RTN","IBCEMMR",163,0)
 N A,APPT,APTDTE,CNT,DATA,DFN,DPT,GRP,IBNEXT,INS,INSNM,LSTVERDT,MS,PLN
"RTN","IBCEMMR",164,0)
 N PLNTYP,PTNM,RTN,SORT,SSN,SUBSCRIPT,X
"RTN","IBCEMMR",165,0)
 S RTN="IBCEMMR"
"RTN","IBCEMMR",166,0)
 ; IB*2.0*528 - Add IBNEXT subscript to be initialized 
"RTN","IBCEMMR",167,0)
 F X=RTN,"IBCEPT","IBSDNEXT","IBDPT","IBNEXT","IBLAST" K ^TMP($J,X)
"RTN","IBCEMMR",168,0)
 S DFN=" ",CNT=0
"RTN","IBCEMMR",169,0)
 F  S DFN=$O(^DPT(DFN),-1) Q:'DFN!($G(ZTSTOP))  D
"RTN","IBCEMMR",170,0)
 . S CNT=CNT+1
"RTN","IBCEMMR",171,0)
 . I '$D(ZTQUEUED),CNT#500=0 U IO(0) W "." U IO
"RTN","IBCEMMR",172,0)
 . I $D(ZTQUEUED),CNT#500=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCEMMR",173,0)
 . I $P($G(^DPT(DFN,.35)),U,1) Q           ; date of death
"RTN","IBCEMMR",174,0)
 . I '$$PTINS(DFN,.MS) Q                   ; eligible for report
"RTN","IBCEMMR",175,0)
 . S ^TMP($J,"IBNEXT",DFN)=""
"RTN","IBCEMMR",176,0)
 . S ^TMP($J,"IBLAST",DFN)=""
"RTN","IBCEMMR",177,0)
 . S ^TMP($J,"IBDPT",DFN)=""
"RTN","IBCEMMR",178,0)
 ;
"RTN","IBCEMMR",179,0)
 S X=$$NEXT^IBSDU("^TMP($J,""IBNEXT"",")
"RTN","IBCEMMR",180,0)
 S X=$$LAST^IBSDU("^TMP($J,""IBLAST"",")
"RTN","IBCEMMR",181,0)
 ;
"RTN","IBCEMMR",182,0)
 S DFN=0
"RTN","IBCEMMR",183,0)
 F  S DFN=$O(^TMP($J,"IBDPT",DFN)) Q:'DFN!($G(ZTSTOP))  D
"RTN","IBCEMMR",184,0)
 . I '$D(ZTQUEUED),CNT#500=0 U IO(0) W "." U IO
"RTN","IBCEMMR",185,0)
 . I $D(ZTQUEUED),CNT#500=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCEMMR",186,0)
 . I '$$PTINS(DFN,.MS) ; get MS data
"RTN","IBCEMMR",187,0)
 . S DPT=$G(^DPT(DFN,0))
"RTN","IBCEMMR",188,0)
 . S PTNM=$P(DPT,U,1)
"RTN","IBCEMMR",189,0)
 . I PTNM="" S PTNM="~UNKNOWN"
"RTN","IBCEMMR",190,0)
 . S SSN=$E($P(DPT,U,9),6,99)_" "
"RTN","IBCEMMR",191,0)
 . S:SSN=" " SSN="~UNK"
"RTN","IBCEMMR",192,0)
 . ; IB*2.0*549 - Change default value to empty string
"RTN","IBCEMMR",193,0)
 . S (APPT,IBNEXT)=$G(^TMP($J,"IBNEXT",DFN))
"RTN","IBCEMMR",194,0)
 . I 'APPT S APPT=$G(^TMP($J,"IBLAST",DFN))
"RTN","IBCEMMR",195,0)
 . ;
"RTN","IBCEMMR",196,0)
 . ; IB*2.0*549 - Simplify $S assignment with $$GETAPDT
"RTN","IBCEMMR",197,0)
 . S APTDTE=$$GETAPDT(APPT,IBNEXT)
"RTN","IBCEMMR",198,0)
 . ; IB*2.0*549 - Delete non-day portion of APPT
"RTN","IBCEMMR",199,0)
 . S APPT=APPT\1
"RTN","IBCEMMR",200,0)
 . ; IB*2.0*549 FILTER BASED ON START DATE AND END DATE
"RTN","IBCEMMR",201,0)
 . Q:APTDTE="N/A"!(APPT<STARTDT)!(APPT>ENDDATE)
"RTN","IBCEMMR",202,0)
 . S A=0
"RTN","IBCEMMR",203,0)
 . F  S A=$O(MS(A)) Q:'A  D
"RTN","IBCEMMR",204,0)
 . . S INS=+$P(MS(A),U,1),GRP=+$P(MS(A),U,2)
"RTN","IBCEMMR",205,0)
 . . S PLN=+$P(MS(A),U,3)
"RTN","IBCEMMR",206,0)
 . . S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCEMMR",207,0)
 . . I INSNM="" S INSNM="~UNKNOWN"
"RTN","IBCEMMR",208,0)
 . . S PLNTYP=$P($G(^IBE(355.1,PLN,0)),U,1)
"RTN","IBCEMMR",209,0)
 . . I PLNTYP="" S PLNTYP="~UNKNOWN"
"RTN","IBCEMMR",210,0)
 . . ; IB*2.0*549 - Simplify $S assignment
"RTN","IBCEMMR",211,0)
 . . S SORT=$$GETIBMST(IBMSORT,PTNM,SSN,INSNM,PLNTYP)
"RTN","IBCEMMR",212,0)
 . . ; IB*2.0*549 Primary sort order by Last Appointment Date with 
"RTN","IBCEMMR",213,0)
 . . ;            most recent date at top. Data includes Last 
"RTN","IBCEMMR",214,0)
 . . ;            Verified Date.
"RTN","IBCEMMR",215,0)
 . . S LSTVERDT=$$GET1^DIQ(2.312,A_","_DFN_",",1.03,"I")
"RTN","IBCEMMR",216,0)
 . . S LSTVERDT=$$FMTE^XLFDT(LSTVERDT,"2DZ")
"RTN","IBCEMMR",217,0)
 . . S DATA=SSN_U_INSNM_U_PLNTYP_U_APTDTE_U_LSTVERDT
"RTN","IBCEMMR",218,0)
 . . S ^TMP($J,RTN,-APPT,SORT,PTNM,DFN,A)=DATA
"RTN","IBCEMMR",219,0)
 . . ; IB*2.0*549 Delete trailing quits
"RTN","IBCEMMR",220,0)
 ;
"RTN","IBCEMMR",221,0)
 I '$G(ZTSTOP) D PRINT             ; print the report
"RTN","IBCEMMR",222,0)
 D ^%ZISC ; close the device
"RTN","IBCEMMR",223,0)
 ; IB*2.0*528 Add IBNEXT subscript to be cleaned up
"RTN","IBCEMMR",224,0)
 F SUBSCRIPT=RTN,"IBCEPT","IBSDNEXT","IBDPT","IBNEXT","IBLAST" K ^TMP($J,SUBSCRIPT)
"RTN","IBCEMMR",225,0)
 I $D(ZTQUEUED) S ZTREQ="@"        ; purge the task record
"RTN","IBCEMMR",226,0)
COMPX ;
"RTN","IBCEMMR",227,0)
 Q
"RTN","IBCEMMR",228,0)
 ;
"RTN","IBCEMMR",229,0)
 ; IB*2.0*549 Simplify setting of APTDTE from $S
"RTN","IBCEMMR",230,0)
GETAPDT(APPT,IBNEXT) ; Get APTDTE from APPT/IBNEXT
"RTN","IBCEMMR",231,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",232,0)
 ;   APPT   - Appointment date (external format)
"RTN","IBCEMMR",233,0)
 ;   IBNEXT - Next appointment date
"RTN","IBCEMMR",234,0)
 ; Output and state report width to be 80 characters
"RTN","IBCEMMR",235,0)
 ;   APTDTE  - Appointment date (external format)
"RTN","IBCEMMR",236,0)
 ;
"RTN","IBCEMMR",237,0)
 N APTDTE
"RTN","IBCEMMR",238,0)
 D  ; Simplification of $S
"RTN","IBCEMMR",239,0)
 . I APPT S APTDTE=$$FMTE^XLFDT($P(APPT,"."),"2Z") Q
"RTN","IBCEMMR",240,0)
 . I $L(IBNEXT) S APTDTE=IBNEXT Q
"RTN","IBCEMMR",241,0)
 . I $L(APPT) S APTDTE=APPT Q
"RTN","IBCEMMR",242,0)
 . S APTDTE="N/A"
"RTN","IBCEMMR",243,0)
 Q APTDTE
"RTN","IBCEMMR",244,0)
 ;
"RTN","IBCEMMR",245,0)
 ; IB*2.0*549 Simplify setting of SORT from $S
"RTN","IBCEMMR",246,0)
GETIBMST(IBMSORT,PTNM,SSN,INSNM,PLNTYP) ; Get SORT from PTNM/SSN/INSNM/PLNTYP
"RTN","IBCEMMR",247,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",248,0)
 ;   IBMSORT - Sort choice index
"RTN","IBCEMMR",249,0)
 ;   PTNM    - Patient name
"RTN","IBCEMMR",250,0)
 ;   SSN     - SSN
"RTN","IBCEMMR",251,0)
 ;   INSNM   - Insurance name
"RTN","IBCEMMR",252,0)
 ;   PLNTYP  - Plan type
"RTN","IBCEMMR",253,0)
 ; Output and state report width to be 80 characters
"RTN","IBCEMMR",254,0)
 ;   SORT    - Secondary sort for report
"RTN","IBCEMMR",255,0)
 ;
"RTN","IBCEMMR",256,0)
 N SORT
"RTN","IBCEMMR",257,0)
 ; IB*2.0*549 Secondary sort does not include Last Appointment 
"RTN","IBCEMMR",258,0)
 ;            Date
"RTN","IBCEMMR",259,0)
 D  ; Simplification of $S
"RTN","IBCEMMR",260,0)
 . I IBMSORT=1 S SORT=PTNM Q
"RTN","IBCEMMR",261,0)
 . I IBMSORT=2 S SORT=SSN Q
"RTN","IBCEMMR",262,0)
 . I IBMSORT=3 S SORT=INSNM Q
"RTN","IBCEMMR",263,0)
 . I IBMSORT=4 S SORT=PLNTYP Q
"RTN","IBCEMMR",264,0)
 . S SORT=PTNM
"RTN","IBCEMMR",265,0)
 Q SORT
"RTN","IBCEMMR",266,0)
 ;
"RTN","IBCEMMR",267,0)
PRINT ; print the report to the device specified
"RTN","IBCEMMR",268,0)
 ; IB*2.0*549 APTDTE - Last appointment date (Primary sort criteria)
"RTN","IBCEMMR",269,0)
 ;                    Add APTDTE/DTOUT/DUOUT and alphabetize variables
"RTN","IBCEMMR",270,0)
 ;                    Add DF for data found
"RTN","IBCEMMR",271,0)
 N A,APTDTE,CRT,DATA,DF,DFN,DIR,DIROUT,DIRUT,DTOUT,DUOUT,IBX,MAXCNT,PAGECNT,PTNM
"RTN","IBCEMMR",272,0)
 N SORT,STOP,X,Y
"RTN","IBCEMMR",273,0)
 ; IB*2.0*549 APTDTE - Last appointment date (Primary sort criteria)
"RTN","IBCEMMR",274,0)
 S APTDTE=""
"RTN","IBCEMMR",275,0)
 ;
"RTN","IBCEMMR",276,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCEMMR",277,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCEMMR",278,0)
 I IBCEEXCEL S IOSL=999999 ; IB*2.0*549 Long screen length for Excel 
"RTN","IBCEMMR",279,0)
 ;                                      output and state report width to be 80 characters
"RTN","IBCEMMR",280,0)
 S PAGECNT=0,STOP=0
"RTN","IBCEMMR",281,0)
 ;
"RTN","IBCEMMR",282,0)
 ; IB*2.0*549 Handle no data found in better fashion
"RTN","IBCEMMR",283,0)
 I '$D(^TMP($J,RTN)) D
"RTN","IBCEMMR",284,0)
 . S DF=0
"RTN","IBCEMMR",285,0)
 . D HEADER
"RTN","IBCEMMR",286,0)
 . W !!?5,"No Data Found"
"RTN","IBCEMMR",287,0)
 ;
"RTN","IBCEMMR",288,0)
 ; IB*2.0*549 for Excel CSV, display the header line first before looping
"RTN","IBCEMMR",289,0)
 ;            Handle for instances where there is data found
"RTN","IBCEMMR",290,0)
 E  D
"RTN","IBCEMMR",291,0)
 . S DF=1
"RTN","IBCEMMR",292,0)
 . I IBCEEXCEL W ! D HEADER Q:STOP
"RTN","IBCEMMR",293,0)
 . ;
"RTN","IBCEMMR",294,0)
 . D PRINT2(.STOP)
"RTN","IBCEMMR",295,0)
 Q:STOP
"RTN","IBCEMMR",296,0)
 W !!?30,"*** End of Report ***"
"RTN","IBCEMMR",297,0)
 ; IB*2.0*549 Where data is found
"RTN","IBCEMMR",298,0)
 I DF,CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEMMR",299,0)
PRINTX ;
"RTN","IBCEMMR",300,0)
 Q
"RTN","IBCEMMR",301,0)
 ;
"RTN","IBCEMMR",302,0)
PRINT2(STOP) ; Rest of Print tag
"RTN","IBCEMMR",303,0)
 ; IB*2.0*549 Put loops in new tag
"RTN","IBCEMMR",304,0)
 ; IB*2.0*549 Incorporate new primary sort criteria
"RTN","IBCEMMR",305,0)
 S APTDTE=""
"RTN","IBCEMMR",306,0)
 F  S APTDTE=$O(^TMP($J,RTN,APTDTE)) Q:APTDTE=""  D  Q:STOP
"RTN","IBCEMMR",307,0)
 . S SORT=""
"RTN","IBCEMMR",308,0)
 . F  S SORT=$O(^TMP($J,RTN,APTDTE,SORT)) Q:SORT=""  D  Q:STOP
"RTN","IBCEMMR",309,0)
 . . S PTNM=""
"RTN","IBCEMMR",310,0)
 . . F  S PTNM=$O(^TMP($J,RTN,APTDTE,SORT,PTNM)) Q:PTNM=""  D  Q:STOP
"RTN","IBCEMMR",311,0)
 . . . S DFN=0
"RTN","IBCEMMR",312,0)
 . . . F  S DFN=$O(^TMP($J,RTN,APTDTE,SORT,PTNM,DFN)) Q:'DFN  D  Q:STOP
"RTN","IBCEMMR",313,0)
 . . . . S A=0
"RTN","IBCEMMR",314,0)
 . . . . F  S A=$O(^TMP($J,RTN,APTDTE,SORT,PTNM,DFN,A)) Q:'A  D  Q:STOP
"RTN","IBCEMMR",315,0)
 . . . . . S DATA=$G(^TMP($J,RTN,APTDTE,SORT,PTNM,DFN,A))
"RTN","IBCEMMR",316,0)
 . . . . . ; IB*2.0*549 for Excel output and state report width to be 80 characters, print a CSV format record
"RTN","IBCEMMR",317,0)
 . . . . . I IBCEEXCEL D EXCELN(PTNM,DATA) Q
"RTN","IBCEMMR",318,0)
 . . . . . ;
"RTN","IBCEMMR",319,0)
 . . . . . I $Y+1>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEMMR",320,0)
 . . . . . ; IB*2.0*549 Add new field (Last Verified Date)
"RTN","IBCEMMR",321,0)
 . . . . . W !,$E(PTNM,1,16),?19,$P(DATA,U,1),?26,$E($P(DATA,U,2),1,17)
"RTN","IBCEMMR",322,0)
 . . . . . W ?45,$E($P(DATA,U,3),1,12),?59,$P(DATA,U,4),?69,$P(DATA,U,5)
"RTN","IBCEMMR",323,0)
 Q
"RTN","IBCEMMR",324,0)
 ;
"RTN","IBCEMMR",325,0)
EXCELN(PTNM,DATA) ; IB*2.0*549 output and state report width to be 80 characters one Excel line
"RTN","IBCEMMR",326,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",327,0)
 ;   PTNM - Patient name
"RTN","IBCEMMR",328,0)
 ;   DATA - Report data
"RTN","IBCEMMR",329,0)
 ;
"RTN","IBCEMMR",330,0)
 N IBZ
"RTN","IBCEMMR",331,0)
 S IBZ=$$CSV("",PTNM)          ; patient name
"RTN","IBCEMMR",332,0)
 S IBZ=$$CSV(IBZ,$P(DATA,U,1)) ; SSN (Keeps leading zeroes)
"RTN","IBCEMMR",333,0)
 S IBZ=$$CSV(IBZ,$P(DATA,U,2)) ; insurance company
"RTN","IBCEMMR",334,0)
 S IBZ=$$CSV(IBZ,$P(DATA,U,3)) ; type of plan
"RTN","IBCEMMR",335,0)
 S IBZ=$$CSV(IBZ,$P(DATA,U,4)) ; appointment date
"RTN","IBCEMMR",336,0)
 S IBZ=$$CSV(IBZ,$P(DATA,U,5)) ; last verified date
"RTN","IBCEMMR",337,0)
 W !,IBZ
"RTN","IBCEMMR",338,0)
 Q
"RTN","IBCEMMR",339,0)
 ;
"RTN","IBCEMMR",340,0)
HEADER ; page break and report header information
"RTN","IBCEMMR",341,0)
 ; IB*2.0*549 Add DIR/DIROUT/DIRUT/DTOUT/DUOUT
"RTN","IBCEMMR",342,0)
 ;
"RTN","IBCEMMR",343,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,HDR,LIN,TAB
"RTN","IBCEMMR",344,0)
 S STOP=0
"RTN","IBCEMMR",345,0)
 ; ask screen user if they want to continue
"RTN","IBCEMMR",346,0)
 I CRT,PAGECNT>0,'$D(ZTQUEUED) D  Q:STOP
"RTN","IBCEMMR",347,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCEMMR",348,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEMMR",349,0)
 . I 'Y S STOP=1 Q
"RTN","IBCEMMR",350,0)
 . ; IB*2.0*549 Delete trailing quits
"RTN","IBCEMMR",351,0)
 ;
"RTN","IBCEMMR",352,0)
 S PAGECNT=PAGECNT+1
"RTN","IBCEMMR",353,0)
 ; IB*2.0*549 *** Enable printing to delimited file ***
"RTN","IBCEMMR",354,0)
 I IBCEEXCEL D EXCELHD(ENDDATE,IBMSORT,STARTDT) Q  ; IB*2.0*549 For Excel CSV format, display all headers
"RTN","IBCEMMR",355,0)
 ;
"RTN","IBCEMMR",356,0)
 W @IOF,!,"Patients Without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",357,0)
 S HDR="Page: "_PAGECNT
"RTN","IBCEMMR",358,0)
 S TAB=80-$L(HDR)-1
"RTN","IBCEMMR",359,0)
 W ?TAB,HDR
"RTN","IBCEMMR",360,0)
 ; IB*2.0*549 Appointment Date no longer Secondary Sort option
"RTN","IBCEMMR",361,0)
 W !,"Sorted by Appt, ",$S(IBMSORT=1:"Patient Name",IBMSORT=2:"SSN - Last 4 Digits",IBMSORT=3:"Insurance Company",IBMSORT=4:"Type of Plan",1:"Patient Name")
"RTN","IBCEMMR",362,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,"1Z")
"RTN","IBCEMMR",363,0)
 S TAB=80-$L(HDR)-1
"RTN","IBCEMMR",364,0)
 W ?TAB,HDR
"RTN","IBCEMMR",365,0)
 W !,"Appointment Dates: ",$$CNVTDT(STARTDT)," - ",$$CNVTDT(ENDDATE)
"RTN","IBCEMMR",366,0)
 ; IB*2.0*549 Added blank line before column headers
"RTN","IBCEMMR",367,0)
 W !!,"Patient Name",?20,"SSN",?26,"Insurance Company"
"RTN","IBCEMMR",368,0)
 ; IB*2.0*549 Add new field (Last Verified Date)
"RTN","IBCEMMR",369,0)
 W ?45,"Type of Plan",?59,"ApptDate",?69,"LstVerDt"
"RTN","IBCEMMR",370,0)
 W !,$$RJ^XLFSTR("",80,"=")
"RTN","IBCEMMR",371,0)
 ;
"RTN","IBCEMMR",372,0)
 ; check for stop request
"RTN","IBCEMMR",373,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  Q
"RTN","IBCEMMR",374,0)
 . S (ZTSTOP,STOP)=1
"RTN","IBCEMMR",375,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCEMMR",376,0)
 . ; IB*2.0*549 Delete trailing quits
"RTN","IBCEMMR",377,0)
 ;
"RTN","IBCEMMR",378,0)
HEADERX ;
"RTN","IBCEMMR",379,0)
 Q
"RTN","IBCEMMR",380,0)
 ;
"RTN","IBCEMMR",381,0)
CNVTDT(DATE) ; IB*2.0*549 Convert from VA internal date to MM/DD/YY
"RTN","IBCEMMR",382,0)
 N DAY,MON,YR
"RTN","IBCEMMR",383,0)
 S YR=(17+$E(DATE))_$E(DATE,2,3),MON=$E(DATE,4,5),DAY=$E(DATE,6,7)
"RTN","IBCEMMR",384,0)
 Q MON_"/"_DAY_"/"_YR
"RTN","IBCEMMR",385,0)
 ;
"RTN","IBCEMMR",386,0)
EXCELHD(ENDDATE,IBMSORT,STARTDT) ; IB*2.0*549 print an Excel CSV header record (only 1 Excel CSV header 
"RTN","IBCEMMR",387,0)
 ; should print for the whole report)
"RTN","IBCEMMR",388,0)
 ; IB*2.0*549 - Added code to enhance report header and simplify setting of IBMSORT
"RTN","IBCEMMR",389,0)
 N IBH,IBHDT,STR
"RTN","IBCEMMR",390,0)
 D NOW^%DTC
"RTN","IBCEMMR",391,0)
 S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCEMMR",392,0)
 W !,"Patients Without MEDICARE (WNR) Insurance",?53,"Run On: ",IBHDT
"RTN","IBCEMMR",393,0)
 W !,"Sorted by Appt, "
"RTN","IBCEMMR",394,0)
 D
"RTN","IBCEMMR",395,0)
 . I IBMSORT=1 W "Patient Name" Q
"RTN","IBCEMMR",396,0)
 . I IBMSORT=2 W "SSN - Last 4 Digits" Q
"RTN","IBCEMMR",397,0)
 . I IBMSORT=3 W "Insurance Company" Q
"RTN","IBCEMMR",398,0)
 . I IBMSORT=4 W "Type of Plan" Q
"RTN","IBCEMMR",399,0)
 . W "Patient Name"
"RTN","IBCEMMR",400,0)
 W !,"Appointment Dates: ",$$CNVTDT(STARTDT)," - ",$$CNVTDT(ENDDATE)
"RTN","IBCEMMR",401,0)
 S IBH="Patient Name"
"RTN","IBCEMMR",402,0)
 F STR="SSN","Insurance Company","Type of Plan","ApptDate","LstVerDt" S IBH=IBH_U_STR
"RTN","IBCEMMR",403,0)
 W !!,IBH
"RTN","IBCEMMR",404,0)
 Q
"RTN","IBCEMMR",405,0)
 ;
"RTN","IBCEMMR",406,0)
CSV(STRING,DATA) ; IB*2.0*549 build the Excel data string for CSV format
"RTN","IBCEMMR",407,0)
 ; Input and state report width to be 80 characters
"RTN","IBCEMMR",408,0)
 ;   STRING - Excel data string being added on to
"RTN","IBCEMMR",409,0)
 ;   DATA   - Data to be added to string
"RTN","IBCEMMR",410,0)
 ; Output and state report width to be 80 characters
"RTN","IBCEMMR",411,0)
 ;   STRING - Data string which was added to
"RTN","IBCEMMR",412,0)
 ;
"RTN","IBCEMMR",413,0)
 S DATA=$TR(DATA,U,"?")
"RTN","IBCEMMR",414,0)
 S STRING=$S(STRING="":DATA,1:STRING_U_DATA)
"RTN","IBCEMMR",415,0)
 Q STRING
"RTN","IBCEMMR",416,0)
 ;
"RTN","IBCEMMR",417,0)
PTINS(DFN,MCRSUP) ; Function to determine if a patient should be
"RTN","IBCEMMR",418,0)
 ; included in this report or not.
"RTN","IBCEMMR",419,0)
 ; Input and state report width to be 80 characters: DFN - patient ien
"RTN","IBCEMMR",420,0)
 ; Output and state report width to be 80 characters: Function value is either 0 (don't include) or 1 (include)
"RTN","IBCEMMR",421,0)
 ; MCRSUP array pass by reference
"RTN","IBCEMMR",422,0)
 ; MCRSUP(seq) = [1] insurance co ien pointer to file 36
"RTN","IBCEMMR",423,0)
 ; [2] group pointer to file 355.3
"RTN","IBCEMMR",424,0)
 ; [3] type of plan pointer to file 355.1
"RTN","IBCEMMR",425,0)
 ;
"RTN","IBCEMMR",426,0)
 ;IB*2.0*549 Abbreviate NEW to N and alphabetize variables
"RTN","IBCEMMR",427,0)
 N A,GP,IBGRP,IBINS,INCLUDE,INS,MCRWNR,MCRZ,PLABBR,TP
"RTN","IBCEMMR",428,0)
 S INCLUDE=0 KILL MCRSUP
"RTN","IBCEMMR",429,0)
 I '$G(DFN) G PTINSX
"RTN","IBCEMMR",430,0)
 I '$D(^DPT(DFN)) G PTINSX
"RTN","IBCEMMR",431,0)
 D ALLWNR^IBCNS1(DFN,"INS",DT)
"RTN","IBCEMMR",432,0)
 S A=0,(MCRWNR,MCRZ)=0
"RTN","IBCEMMR",433,0)
 F  S A=$O(INS(A)) Q:'A  D  Q:MCRWNR
"RTN","IBCEMMR",434,0)
 . S IBINS=$P($G(INS(A,0)),U,1)
"RTN","IBCEMMR",435,0)
 . S IBGRP=$P($G(INS(A,0)),U,18)
"RTN","IBCEMMR",436,0)
 . I $$MCRWNR^IBEFUNC(IBINS) S MCRWNR=1 Q      ; Medicare WNR on file
"RTN","IBCEMMR",437,0)
 . S GP=$G(INS(A,355.3)) ; group/plan info
"RTN","IBCEMMR",438,0)
 . S TP=$P(GP,U,9),PLABBR=""                   ; type of plan pointer
"RTN","IBCEMMR",439,0)
 . I TP S PLABBR=$P($G(^IBE(355.1,TP,0)),U,2) ; plan abbreviation
"RTN","IBCEMMR",440,0)
 . I '$F(".MG.MS.COUT.","."_PLABBR_".") Q      ; check plan
"RTN","IBCEMMR",441,0)
 . S MCRZ=1 ; Medicare other on file
"RTN","IBCEMMR",442,0)
 . S MCRSUP(A)=IBINS_U_IBGRP_U_TP
"RTN","IBCEMMR",443,0)
 . ; IB*2.0*549 Delete trailing quits
"RTN","IBCEMMR",444,0)
 ;
"RTN","IBCEMMR",445,0)
 ; If Medicare Other was found, but no Medicare WNR, then include it
"RTN","IBCEMMR",446,0)
 I MCRZ,'MCRWNR S INCLUDE=1
"RTN","IBCEMMR",447,0)
 ;
"RTN","IBCEMMR",448,0)
PTINSX ;
"RTN","IBCEMMR",449,0)
 I 'INCLUDE K MCRSUP
"RTN","IBCEMMR",450,0)
 Q INCLUDE
"RTN","IBCEMMR",451,0)
 ;
"RTN","IBCEMMR",452,0)
 ; IB*2.0*549 Add STARTDT, ENDDATE and IBCEEXCEL arguments to pass to 
"RTN","IBCEMMR",453,0)
 ;            DEVICE tag
"RTN","IBCEMMR",454,0)
DEVICE(STARTDT,ENDDATE,IBCEEXCEL) ; This procedure displays a warning message
"RTN","IBCEMMR",455,0)
 ; AND prompts for the device on which to
"RTN","IBCEMMR",456,0)
 ; print the report.
"RTN","IBCEMMR",457,0)
 ;
"RTN","IBCEMMR",458,0)
 ;IB*2.0*549 Add DIR/DIROUT/DIRUT/DTOUT/DUOUT
"RTN","IBCEMMR",459,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,POP,ZTDESC,ZTRTN,ZTSAVE
"RTN","IBCEMMR",460,0)
 ; IB*2.0*549 Allow for CSV output and state report width to be 80 characters
"RTN","IBCEMMR",461,0)
 I 'IBCEEXCEL D
"RTN","IBCEMMR",462,0)
 . W !!,"This report is 80 characters wide. "
"RTN","IBCEMMR",463,0)
 . W "Please choose an appropriate device.",!
"RTN","IBCEMMR",464,0)
 E  D
"RTN","IBCEMMR",465,0)
 . W !!,"For CSV output and state report width to be 80 characters, turn logging or capture on now."
"RTN","IBCEMMR",466,0)
 . W !,"To avoid undesired wrapping of the data saved to the file,"
"RTN","IBCEMMR",467,0)
 . W !,"please enter ""0;256;99999"" at the ""DEVICE:"" prompt.",!
"RTN","IBCEMMR",468,0)
 ;
"RTN","IBCEMMR",469,0)
 W *7,!!!?14,"*** WARNING ***"
"RTN","IBCEMMR",470,0)
 W !?2,"This report takes a long time to compile!"
"RTN","IBCEMMR",471,0)
 W !!?2,"The active insurance coverage for all living patients is analyzed."
"RTN","IBCEMMR",472,0)
 W !!?2,"It is recommended that you queue this report to the background and"
"RTN","IBCEMMR",473,0)
 W !?2,"run it after hours or on the weekend."
"RTN","IBCEMMR",474,0)
 W !!?2,"This report is 80 characters wide."
"RTN","IBCEMMR",475,0)
 W !
"RTN","IBCEMMR",476,0)
 ;
"RTN","IBCEMMR",477,0)
 S ZTRTN="COMPILE^IBCEMMR"
"RTN","IBCEMMR",478,0)
 S ZTDESC="Patients without MEDICARE (WNR) Insurance"
"RTN","IBCEMMR",479,0)
 S ZTSAVE("IBMSORT")=""
"RTN","IBCEMMR",480,0)
 ; IB*2.0*549 Add code to save STARTDT, ENDDATE and IBCEEXCEL
"RTN","IBCEMMR",481,0)
 S ZTSAVE("STARTDT")=""
"RTN","IBCEMMR",482,0)
 S ZTSAVE("ENDDATE")=""
"RTN","IBCEMMR",483,0)
 S ZTSAVE("IBCEEXCEL")=""
"RTN","IBCEMMR",484,0)
 ; IB*2.0*549 Enable report to choose a file in delimited format
"RTN","IBCEMMR",485,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","IBCEMMR",486,0)
 I $G(ZTSK) D
"RTN","IBCEMMR",487,0)
 . W !!,"Report compilation has started with task# ",ZTSK,".",!
"RTN","IBCEMMR",488,0)
 . S DIR(0)="E" D ^DIR
"RTN","IBCEMMR",489,0)
DEVICEX ;
"RTN","IBCEMMR",490,0)
 Q
"RTN","IBCEMMR",491,0)
 ;
"RTN","IBCMDT")
0^1^B47701451
"RTN","IBCMDT",1,0)
IBCMDT ;ALB/VD - INSURANCE PLANS MISSING DATA REPORT (DRIVER) ; 10-APR-15
"RTN","IBCMDT",2,0)
 ;;2.0;INTEGRATED BILLING ;**549**; 10-APR-15;Build 54
"RTN","IBCMDT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCMDT",4,0)
 ;
"RTN","IBCMDT",5,0)
 ; IB - Insurance Plans Missing Data Report.
"RTN","IBCMDT",6,0)
 ;
"RTN","IBCMDT",7,0)
 ;Input parameters: N/A
"RTN","IBCMDT",8,0)
 ;
"RTN","IBCMDT",9,0)
 ;Other relevant variables:
"RTN","IBCMDT",10,0)
 ; ZTSAVED for queuing
"RTN","IBCMDT",11,0)
 ;
"RTN","IBCMDT",12,0)
 ; IBMDTSPC("FLTRS") n where n is the number of filters selected
"RTN","IBCMDT",13,0)
 ; IBMDTSPC("IBAI")  0 = user selected insurance companies.
"RTN","IBCMDT",14,0)
 ;                   1 = all insurance companies w/plans.
"RTN","IBCMDT",15,0)
 ;
"RTN","IBCMDT",16,0)
 ; IBMDTSPC("IBAPL") 0 = user selected plans (may be ALL for certain companies, some for other companies).
"RTN","IBCMDT",17,0)
 ;                   1 = all plans for the insurance companies (all or selected).
"RTN","IBCMDT",18,0)
 ;
"RTN","IBCMDT",19,0)
 ; IBMDTSPC("IBGRN") 0 = ignore Missing Group Number filter.
"RTN","IBCMDT",20,0)
 ;                   1 = include Missing Group Number filter.
"RTN","IBCMDT",21,0)
 ;
"RTN","IBCMDT",22,0)
 ; IBMDTSPC("IBPTY") 0 = ignore Missing Type of Plan filter.
"RTN","IBCMDT",23,0)
 ;                   1 = include Missing Type of Plan filter.
"RTN","IBCMDT",24,0)
 ;
"RTN","IBCMDT",25,0)
 ; IBMDTSPC("IBTFT") 0 = ignore Missing Timely Filing Time Frame filter.
"RTN","IBCMDT",26,0)
 ;                   1 = include Missing Timely Filing Time Frame filter.
"RTN","IBCMDT",27,0)
 ;
"RTN","IBCMDT",28,0)
 ; IBMDTSPC("IBEPT") 0 = ignore Missing Electronic Plan Type filter.
"RTN","IBCMDT",29,0)
 ;                   1 = include Missing Electronic Plan Type filter.
"RTN","IBCMDT",30,0)
 ;
"RTN","IBCMDT",31,0)
 ; IBMDTSPC("IBCLM") 0 = ignore Missing Coverage Limitation filter.
"RTN","IBCMDT",32,0)
 ;                   1 = include Missing Coverage Limitation filter.
"RTN","IBCMDT",33,0)
 ;
"RTN","IBCMDT",34,0)
 ; IBMDTSPC("IBBIN") 0 = ignore Missing BIN (Banking Identification Number) filter.
"RTN","IBCMDT",35,0)
 ;                   1 = include Missing BIN (Banking Identification Number) filter.
"RTN","IBCMDT",36,0)
 ;
"RTN","IBCMDT",37,0)
 ; IBMDTSPC("IBPCN") 0 = ignore Missing PCN (Processor Control Number) filter.
"RTN","IBCMDT",38,0)
 ;                   1 = include Missing PCN (Processor Control Number) filter.
"RTN","IBCMDT",39,0)
 ; IBMDTSPC("IBNMSPC") = $J of the parent job (if queued)
"RTN","IBCMDT",40,0)
 ;
"RTN","IBCMDT",41,0)
EN ; Main Entry point.
"RTN","IBCMDT",42,0)
 ; Initialize variables.
"RTN","IBCMDT",43,0)
 N IBAI,IBMDTSPC,POP,STOP
"RTN","IBCMDT",44,0)
 ;
"RTN","IBCMDT",45,0)
C0 ; Start the Insurance Company Prompts.
"RTN","IBCMDT",46,0)
 K IBMDTSPC,^TMP("IBCMDT",$J),^TMP($J,"IBSEL")
"RTN","IBCMDT",47,0)
 S STOP=0,IBMDTSPC("IBNMSPC")=$J
"RTN","IBCMDT",48,0)
 ;
"RTN","IBCMDT",49,0)
 W @IOF
"RTN","IBCMDT",50,0)
 W !!?5,"This report will generate a list of ACTIVE insurance companies"
"RTN","IBCMDT",51,0)
 W !?5,"that are missing the data that you select to be reported upon.",!!
"RTN","IBCMDT",52,0)
 ;
"RTN","IBCMDT",53,0)
 ; Select Insurance Companies or All Insurance Companies w/Plans
"RTN","IBCMDT",54,0)
C10 D SLAI^IBCMDT1 I STOP G:$$STOP EXIT G C0
"RTN","IBCMDT",55,0)
 N IBQUIT S IBQUIT=0
"RTN","IBCMDT",56,0)
 S IBAI=+$G(IBMDTSPC("IBAI"))
"RTN","IBCMDT",57,0)
 D START
"RTN","IBCMDT",58,0)
 I IBQUIT G EXIT
"RTN","IBCMDT",59,0)
 I '$D(^TMP("IBCMDT",$J)) W !!,"No plans selected!" G EXIT
"RTN","IBCMDT",60,0)
 ;
"RTN","IBCMDT",61,0)
FILTERS ; Begin the Filtering Questions.
"RTN","IBCMDT",62,0)
 ;
"RTN","IBCMDT",63,0)
 N STOP
"RTN","IBCMDT",64,0)
F0 ; Start of Filters.
"RTN","IBCMDT",65,0)
 S (IBMDTSPC("FLTRS"),STOP)=0
"RTN","IBCMDT",66,0)
 S IBMDTSPC("SUBHD")="Missing Data: "
"RTN","IBCMDT",67,0)
 ; Filter on Missing Group Number
"RTN","IBCMDT",68,0)
F10 D SLGRN^IBCMDT1
"RTN","IBCMDT",69,0)
 I STOP G:$$STOP EXIT G C0
"RTN","IBCMDT",70,0)
 I +IBMDTSPC("IBGRN") D
"RTN","IBCMDT",71,0)
 . S IBMDTSPC("SUBHD")=IBMDTSPC("SUBHD")_"Group #"
"RTN","IBCMDT",72,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",73,0)
 ;
"RTN","IBCMDT",74,0)
 ; Filter on Missing Type of Plan
"RTN","IBCMDT",75,0)
F20 D SLPTY^IBCMDT1
"RTN","IBCMDT",76,0)
 I STOP G:$$STOP EXIT G F10
"RTN","IBCMDT",77,0)
 I +IBMDTSPC("IBPTY") D
"RTN","IBCMDT",78,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S(+IBMDTSPC("FLTRS"):", ",1:"")_"Plan Type"
"RTN","IBCMDT",79,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",80,0)
 ;
"RTN","IBCMDT",81,0)
 ; Filter on Missing Timely Filing Time Frame
"RTN","IBCMDT",82,0)
F30 D SLTFT^IBCMDT1
"RTN","IBCMDT",83,0)
 I STOP G:$$STOP EXIT G F20
"RTN","IBCMDT",84,0)
 I +IBMDTSPC("IBTFT") D
"RTN","IBCMDT",85,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S(+IBMDTSPC("FLTRS"):", ",1:"")_"FTF"
"RTN","IBCMDT",86,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",87,0)
 ;
"RTN","IBCMDT",88,0)
 ; Filter on Missing Electronic Plan Type
"RTN","IBCMDT",89,0)
F40 D SLEPT^IBCMDT1
"RTN","IBCMDT",90,0)
 I STOP G:$$STOP EXIT G F30
"RTN","IBCMDT",91,0)
 I +IBMDTSPC("IBEPT") D
"RTN","IBCMDT",92,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S(+IBMDTSPC("FLTRS"):", ",1:"")_"Elec Plan"
"RTN","IBCMDT",93,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",94,0)
 ;
"RTN","IBCMDT",95,0)
 ; Filter on Missing Coverage Limitations
"RTN","IBCMDT",96,0)
F50 D SLCLM^IBCMDT1
"RTN","IBCMDT",97,0)
 I STOP G:$$STOP EXIT G F40
"RTN","IBCMDT",98,0)
 I +IBMDTSPC("IBCLM") S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",99,0)
 ;
"RTN","IBCMDT",100,0)
 ; Filter on Missing BIN (Banking Identification Number)
"RTN","IBCMDT",101,0)
F60 D SLBIN^IBCMDT1
"RTN","IBCMDT",102,0)
 I STOP G:$$STOP EXIT G F50
"RTN","IBCMDT",103,0)
 I +IBMDTSPC("IBBIN") D
"RTN","IBCMDT",104,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S(+IBMDTSPC("FLTRS"):", ",1:"")_"BIN"
"RTN","IBCMDT",105,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",106,0)
 ;
"RTN","IBCMDT",107,0)
 ; Filter on Missing PCN (Processor Control Number)
"RTN","IBCMDT",108,0)
F70 D SLPCN^IBCMDT1
"RTN","IBCMDT",109,0)
 I STOP G:$$STOP EXIT G F60
"RTN","IBCMDT",110,0)
 I +IBMDTSPC("IBPCN") D
"RTN","IBCMDT",111,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S(+IBMDTSPC("FLTRS"):", ",1:"")_"PCN"
"RTN","IBCMDT",112,0)
 . S IBMDTSPC("FLTRS")=IBMDTSPC("FLTRS")+1
"RTN","IBCMDT",113,0)
 ;
"RTN","IBCMDT",114,0)
 I '+IBMDTSPC("FLTRS") D  G:$D(DUOUT) EXIT G FILTERS
"RTN","IBCMDT",115,0)
 . W !!,"** No Filters were selected **"   ; No Filters were selected so quit.
"RTN","IBCMDT",116,0)
 . D PAUSE^VALM1
"RTN","IBCMDT",117,0)
 I +IBMDTSPC("IBCLM") D
"RTN","IBCMDT",118,0)
 . S IBMDTSPC("SUBHD")=$G(IBMDTSPC("SUBHD"))_$S((+IBMDTSPC("FLTRS")>1):", ",1:"")
"RTN","IBCMDT",119,0)
 . S IBMDTSPC("SUBHD")=IBMDTSPC("SUBHD")_"Coverage Limitations"
"RTN","IBCMDT",120,0)
 ;
"RTN","IBCMDT",121,0)
F100 D DEVICE(.IBMDTSPC)
"RTN","IBCMDT",122,0)
 I STOP G:$$STOP EXIT G F0
"RTN","IBCMDT",123,0)
 G EXIT
"RTN","IBCMDT",124,0)
 ;
"RTN","IBCMDT",125,0)
EXIT ; Exit point
"RTN","IBCMDT",126,0)
 Q
"RTN","IBCMDT",127,0)
 ;
"RTN","IBCMDT",128,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCMDT",129,0)
 ; Initialize Variables
"RTN","IBCMDT",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCMDT",131,0)
 ;
"RTN","IBCMDT",132,0)
 W !
"RTN","IBCMDT",133,0)
 S DIR(0)="Y"
"RTN","IBCMDT",134,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCMDT",135,0)
 S DIR("B")="YES"
"RTN","IBCMDT",136,0)
 S DIR("?",1)=" Enter YES to immediately exit out of this option."
"RTN","IBCMDT",137,0)
 S DIR("?")=" Enter NO to return to the previous question."
"RTN","IBCMDT",138,0)
 D ^DIR K DIR
"RTN","IBCMDT",139,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCMDT",140,0)
 I 'Y S STOP=0
"RTN","IBCMDT",141,0)
STOPX ; STOP Exit Point
"RTN","IBCMDT",142,0)
 Q Y
"RTN","IBCMDT",143,0)
 ;
"RTN","IBCMDT",144,0)
START ; Gather the Insurance Companies and respective Plans
"RTN","IBCMDT",145,0)
 I 'IBAI D GTSEL,GTPLNS G STARTQ
"RTN","IBCMDT",146,0)
 D GTALL,GTPLNS
"RTN","IBCMDT",147,0)
 G STARTQ
"RTN","IBCMDT",148,0)
 ;
"RTN","IBCMDT",149,0)
GTSEL ; Gather plans for all selected companies.
"RTN","IBCMDT",150,0)
 N IBCNS,IBIC
"RTN","IBCMDT",151,0)
 S (IBCT,IBQUIT)=0
"RTN","IBCMDT",152,0)
 K ^TMP("IBCMDT",$J),^TMP($J,"IBSEL")
"RTN","IBCMDT",153,0)
 ;
"RTN","IBCMDT",154,0)
 ; Allow user selection of Insurance Companies, if required
"RTN","IBCMDT",155,0)
 D EN^IBCNILK(1)  ; Only want Active Insurance Companies
"RTN","IBCMDT",156,0)
 I '$D(^TMP("IBCNILKA",$J)) S IBQUIT=1 Q  ; No Insurance Companies selected
"RTN","IBCMDT",157,0)
 S IBCNS=""
"RTN","IBCMDT",158,0)
 F  S IBCNS=$O(^TMP("IBCNILKA",$J,IBCNS)) Q:IBCNS=""  D
"RTN","IBCMDT",159,0)
 . ; Insurance Company Name
"RTN","IBCMDT",160,0)
 . S IBIC=$E($$GET1^DIQ(36,IBCNS_",",.01),1,25)
"RTN","IBCMDT",161,0)
 . S ^TMP("IBCMDT",$J,IBIC,IBCNS)=""
"RTN","IBCMDT",162,0)
 K ^TMP("IBCNILKA",$J)
"RTN","IBCMDT",163,0)
 Q
"RTN","IBCMDT",164,0)
 ;
"RTN","IBCMDT",165,0)
GTALL ; - gather all companies if required
"RTN","IBCMDT",166,0)
 N IBCNS,IBIC1
"RTN","IBCMDT",167,0)
 K ^TMP("IBCMDT",$J),^TMP($J,"IBSEL")
"RTN","IBCMDT",168,0)
 S IBIC1=""
"RTN","IBCMDT",169,0)
 F  S IBIC1=$O(^DIC(36,"B",IBIC1)) Q:IBIC1=""  D
"RTN","IBCMDT",170,0)
 . S IBCNS=0
"RTN","IBCMDT",171,0)
 . F  S IBCNS=$O(^DIC(36,"B",IBIC1,IBCNS)) Q:'IBCNS  D
"RTN","IBCMDT",172,0)
 . . I +$$GET1^DIQ(36,IBCNS_",",.05,"I") Q  ; Inactive
"RTN","IBCMDT",173,0)
 . . S ^TMP("IBCMDT",$J,$E(IBIC1,1,25),IBCNS)=""
"RTN","IBCMDT",174,0)
 Q
"RTN","IBCMDT",175,0)
 ;
"RTN","IBCMDT",176,0)
GTPLNS ; - gather plans for selected companies
"RTN","IBCMDT",177,0)
 N IBCNS,IBIC,IBP
"RTN","IBCMDT",178,0)
 S IBIC=""
"RTN","IBCMDT",179,0)
 F  S IBIC=$O(^TMP("IBCMDT",$J,IBIC)) Q:IBIC=""!IBQUIT  D
"RTN","IBCMDT",180,0)
 . S IBCNS=""
"RTN","IBCMDT",181,0)
 . F  S IBCNS=$O(^TMP("IBCMDT",$J,IBIC,IBCNS)) Q:IBCNS=""!(IBQUIT)  D
"RTN","IBCMDT",182,0)
 . . S IBP=0
"RTN","IBCMDT",183,0)
 . . F  S IBP=$O(^IBA(355.3,"B",+IBCNS,IBP)) Q:'IBP  D
"RTN","IBCMDT",184,0)
 . . . S ^TMP("IBCMDT",$J,IBIC,IBCNS,IBP)=""   ; Set plans into the array.
"RTN","IBCMDT",185,0)
 Q
"RTN","IBCMDT",186,0)
 ;
"RTN","IBCMDT",187,0)
STARTQ ;
"RTN","IBCMDT",188,0)
 K IBCNS,IBIC,IBCT,IBP,IBSEL,^TMP($J,"IBSEL")
"RTN","IBCMDT",189,0)
 Q
"RTN","IBCMDT",190,0)
 ;
"RTN","IBCMDT",191,0)
DEVICE(IBMDTSPC) ; Device Handler and possible TaskManager calls
"RTN","IBCMDT",192,0)
 ; Input:   IBMDTSPC    - Array passed by reference of the report parameters
"RTN","IBCMDT",193,0)
 ;                        See top of routine for a detailed explanation
"RTN","IBCMDT",194,0)
 ;
"RTN","IBCMDT",195,0)
 N I,POP,ZTDESC,ZTRTN,ZTSAVE
"RTN","IBCMDT",196,0)
 W *7,!!!?14,"*** WARNING ***"
"RTN","IBCMDT",197,0)
 W !?2,"This report may take a little while to compile!"
"RTN","IBCMDT",198,0)
 W !!?2,"This report is 132 characters wide."
"RTN","IBCMDT",199,0)
 W !?2,"Please choose an appropriate device.",!
"RTN","IBCMDT",200,0)
 S ZTRTN="COMPILE^IBCMDT(.IBMDTSPC)"
"RTN","IBCMDT",201,0)
 S ZTDESC="IB - INSURANCE PLANS MISSING DATA REPORT"
"RTN","IBCMDT",202,0)
 S ZTSAVE("IBMDTSPC(")=""
"RTN","IBCMDT",203,0)
 S ZTSAVE("^TMP(""IBCMDT"",$J,")=""
"RTN","IBCMDT",204,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","IBCMDT",205,0)
 I POP S STOP=1
"RTN","IBCMDT",206,0)
DEVICEX ; DEVICE Exit Point
"RTN","IBCMDT",207,0)
 Q
"RTN","IBCMDT",208,0)
 ;
"RTN","IBCMDT",209,0)
COMPILE(IBMDTSPC) ;
"RTN","IBCMDT",210,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCMDT",211,0)
 ; Input:   IBMDTSPC    - Array passed by reference of the report parameters
"RTN","IBCMDT",212,0)
 ;                        See top of routine for a detailed explanation
"RTN","IBCMDT",213,0)
 ;
"RTN","IBCMDT",214,0)
 N FLTRS,IBAI,IBAPL,IBBIN,IBCLM,IBEPT,IBGRN,IBNMSPC,IBPCN,IBPTY,IBTFT,SUBHD
"RTN","IBCMDT",215,0)
 S FLTRS=$G(IBMDTSPC("FLTRS"))
"RTN","IBCMDT",216,0)
 S IBAI=$G(IBMDTSPC("IBAI"))
"RTN","IBCMDT",217,0)
 S IBAPL=$G(IBMDTSPC("IBAPL"))
"RTN","IBCMDT",218,0)
 S IBGRN=$G(IBMDTSPC("IBGRN"))
"RTN","IBCMDT",219,0)
 S IBPTY=$G(IBMDTSPC("IBPTY"))
"RTN","IBCMDT",220,0)
 S IBTFT=$G(IBMDTSPC("IBTFT"))
"RTN","IBCMDT",221,0)
 S IBEPT=$G(IBMDTSPC("IBEPT"))
"RTN","IBCMDT",222,0)
 S IBCLM=$G(IBMDTSPC("IBCLM"))
"RTN","IBCMDT",223,0)
 S IBBIN=$G(IBMDTSPC("IBBIN"))
"RTN","IBCMDT",224,0)
 S IBNMSPC=$G(IBMDTSPC("IBNMSPC"))
"RTN","IBCMDT",225,0)
 S IBPCN=$G(IBMDTSPC("IBPCN"))
"RTN","IBCMDT",226,0)
 S SUBHD=$G(IBMDTSPC("SUBHD"))
"RTN","IBCMDT",227,0)
 ;
"RTN","IBCMDT",228,0)
 ; Compile
"RTN","IBCMDT",229,0)
 D EN^IBCMDT2
"RTN","IBCMDT",230,0)
 ; Print
"RTN","IBCMDT",231,0)
 D EN^IBCMDT3
"RTN","IBCMDT",232,0)
 ;
"RTN","IBCMDT",233,0)
COMPILX ; COMPILE Exit Point
"RTN","IBCMDT",234,0)
 Q
"RTN","IBCMDT1")
0^3^B32717848
"RTN","IBCMDT1",1,0)
IBCMDT1 ;ALB/VD - INSURANCE PLANS MISSING DATA REPORT (DRIVER 1) ; 10-APR-15
"RTN","IBCMDT1",2,0)
 ;;2.0;INTEGRATED BILLING ;**549**; 10-APR-15;Build 54
"RTN","IBCMDT1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCMDT1",4,0)
 ;
"RTN","IBCMDT1",5,0)
SLAI ; Prompt user to select all or subset of insurance companies 
"RTN","IBCMDT1",6,0)
 ; Count ins. companies with plans
"RTN","IBCMDT1",7,0)
 ;
"RTN","IBCMDT1",8,0)
 ; 0 -- user selects insurance companies
"RTN","IBCMDT1",9,0)
 ; 1 -- run report for all insurance companies with plans
"RTN","IBCMDT1",10,0)
 ;
"RTN","IBCMDT1",11,0)
 N A,B
"RTN","IBCMDT1",12,0)
 S (A,B)=0
"RTN","IBCMDT1",13,0)
 F  S A=$O(^IBA(355.3,"B",A)) Q:'A  S B=B+1
"RTN","IBCMDT1",14,0)
 S DIR(0)="SA^1:List All "_B_" Ins. Companies;2:List Only Ins. Companies That You Select"
"RTN","IBCMDT1",15,0)
 W !!,"     There are "_B_" insurance companies associated with plans.",!
"RTN","IBCMDT1",16,0)
 S DIR("A",1)="1. List All "_B_" Active Ins. Companies"
"RTN","IBCMDT1",17,0)
 S DIR("A",2)="2. List Only Active Ins. Companies That You Select"
"RTN","IBCMDT1",18,0)
 S DIR("A")="     SELECT 1 or 2:  "
"RTN","IBCMDT1",19,0)
 S DIR("?",1)="Enter a code from the list:  1 or 2.  Only insurance"
"RTN","IBCMDT1",20,0)
 S DIR("?")="companies with one or more plans can be selected."
"RTN","IBCMDT1",21,0)
 D ^DIR K DIR
"RTN","IBCMDT1",22,0)
 I $D(DIRUT) S STOP=1 G SLAIQ
"RTN","IBCMDT1",23,0)
 S IBMDTSPC("IBAI")=(+Y=1) K Y
"RTN","IBCMDT1",24,0)
SLAIQ ;
"RTN","IBCMDT1",25,0)
 Q
"RTN","IBCMDT1",26,0)
 ;
"RTN","IBCMDT1",27,0)
SLAPL ; Prompt user to select all or subset of plans
"RTN","IBCMDT1",28,0)
 ;
"RTN","IBCMDT1",29,0)
 ; 0 -- whether some or all ins. co's., user selects plans (may be
"RTN","IBCMDT1",30,0)
 ;      all for certain companies, some for other companies
"RTN","IBCMDT1",31,0)
 ; 1 -- whether some or all ins. co's., run report for all plans
"RTN","IBCMDT1",32,0)
 ;      associated with those co's.
"RTN","IBCMDT1",33,0)
 ;
"RTN","IBCMDT1",34,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",35,0)
 S DIR("A")="There are "_$P(^IBA(355.3,0),"^",4)_" plans.  List all plans for each company"
"RTN","IBCMDT1",36,0)
 S DIR("B")="No"
"RTN","IBCMDT1",37,0)
 S DIR("?",1)="If you say yes, the report will list all of the plans for each company."
"RTN","IBCMDT1",38,0)
 S DIR("?",2)="If you say no, you must make plan selections for each individual company"
"RTN","IBCMDT1",39,0)
 S DIR("?")="(anywhere from one plan to all)."
"RTN","IBCMDT1",40,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",41,0)
 I $D(DIRUT) S STOP=1 G SLAPLQ
"RTN","IBCMDT1",42,0)
 S IBMDTSPC("IBAPL")=+Y K Y
"RTN","IBCMDT1",43,0)
SLAPLQ ;
"RTN","IBCMDT1",44,0)
 Q
"RTN","IBCMDT1",45,0)
 ;
"RTN","IBCMDT1",46,0)
SLGRN ; Prompt user to report missing Group Numbers
"RTN","IBCMDT1",47,0)
 ;
"RTN","IBCMDT1",48,0)
 ; 0 -- Do not print missing Group Numbers.
"RTN","IBCMDT1",49,0)
 ; 1 -- Print missing Group Numbers.
"RTN","IBCMDT1",50,0)
 ;
"RTN","IBCMDT1",51,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",52,0)
 S DIR("A")="Display Active Group(s) missing Group Number"
"RTN","IBCMDT1",53,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",54,0)
 S DIR("?",1)="If you say yes, the report will print X's when Group Number is missing."
"RTN","IBCMDT1",55,0)
 S DIR("?")="If you say no, missing Group Number will not be indicated."
"RTN","IBCMDT1",56,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",57,0)
 I $D(DIRUT) S STOP=1 G SLGRNQ
"RTN","IBCMDT1",58,0)
 S IBMDTSPC("IBGRN")=+Y K Y
"RTN","IBCMDT1",59,0)
SLGRNQ ;
"RTN","IBCMDT1",60,0)
 Q
"RTN","IBCMDT1",61,0)
 ;
"RTN","IBCMDT1",62,0)
SLPTY ; Prompt user to report missing Type of Plan
"RTN","IBCMDT1",63,0)
 ;
"RTN","IBCMDT1",64,0)
 ; 0 -- Do not print missing Type of Plan.
"RTN","IBCMDT1",65,0)
 ; 1 -- Print missing Type of Plan.
"RTN","IBCMDT1",66,0)
 ;
"RTN","IBCMDT1",67,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",68,0)
 S DIR("A")="Display Active Group(s) missing Type of Plan"
"RTN","IBCMDT1",69,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",70,0)
 S DIR("?",1)="If you say yes, the report will print X's when Type of Plan is missing."
"RTN","IBCMDT1",71,0)
 S DIR("?")="If you say no, missing Type of Plan will not be indicated."
"RTN","IBCMDT1",72,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",73,0)
 I $D(DIRUT) S STOP=1 G SLPTYQ
"RTN","IBCMDT1",74,0)
 S IBMDTSPC("IBPTY")=+Y K Y
"RTN","IBCMDT1",75,0)
SLPTYQ ;
"RTN","IBCMDT1",76,0)
 Q
"RTN","IBCMDT1",77,0)
 ;
"RTN","IBCMDT1",78,0)
SLTFT ; Prompt user to report missing Timely Filing Time Frame
"RTN","IBCMDT1",79,0)
 ;
"RTN","IBCMDT1",80,0)
 ; 0 -- Do not print missing Timely Filing Time Frame.
"RTN","IBCMDT1",81,0)
 ; 1 -- Print missing Timely Filing Time Frame.
"RTN","IBCMDT1",82,0)
 ;
"RTN","IBCMDT1",83,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",84,0)
 S DIR("A")="Display Active Group(s) missing Timely Filing Time Frame"
"RTN","IBCMDT1",85,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",86,0)
 S DIR("?",1)="If you say yes, the report will print X's when Timely Filing Time Frame"
"RTN","IBCMDT1",87,0)
 S DIR("?",2)="is missing."
"RTN","IBCMDT1",88,0)
 S DIR("?")="If you say no, missing Timely Filing Time Frame will not be indicated."
"RTN","IBCMDT1",89,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",90,0)
 I $D(DIRUT) S STOP=1 G SLTFTQ
"RTN","IBCMDT1",91,0)
 S IBMDTSPC("IBTFT")=+Y K Y
"RTN","IBCMDT1",92,0)
SLTFTQ ;
"RTN","IBCMDT1",93,0)
 Q
"RTN","IBCMDT1",94,0)
 ;
"RTN","IBCMDT1",95,0)
SLEPT ; Prompt user to report missing Electronic Plan Type
"RTN","IBCMDT1",96,0)
 ;
"RTN","IBCMDT1",97,0)
 ; 0 -- Do not print missing Electronic Plan Type.
"RTN","IBCMDT1",98,0)
 ; 1 -- Print missing Electronic Plan Type.
"RTN","IBCMDT1",99,0)
 ;
"RTN","IBCMDT1",100,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",101,0)
 S DIR("A")="Display Active Group(s) missing Electronic Plan Type"
"RTN","IBCMDT1",102,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",103,0)
 S DIR("?",1)="If you say yes, the report will print X's when Electronic Plan Type is missing."
"RTN","IBCMDT1",104,0)
 S DIR("?")="If you say no, missing Electronic Plan Type will not be indicated."
"RTN","IBCMDT1",105,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",106,0)
 I $D(DIRUT) S STOP=1 G SLEPTQ
"RTN","IBCMDT1",107,0)
 S IBMDTSPC("IBEPT")=+Y K Y
"RTN","IBCMDT1",108,0)
SLEPTQ ;
"RTN","IBCMDT1",109,0)
 Q
"RTN","IBCMDT1",110,0)
 ;
"RTN","IBCMDT1",111,0)
SLCLM ; Prompt user to report missing Coverage Limitations
"RTN","IBCMDT1",112,0)
 ;
"RTN","IBCMDT1",113,0)
 ; 0 -- Do not print missing Coverage Limitations.
"RTN","IBCMDT1",114,0)
 ; 1 -- Print missing Coverage Limitations.
"RTN","IBCMDT1",115,0)
 ;
"RTN","IBCMDT1",116,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",117,0)
 S DIR("A")="Display Active Group(s) missing Coverage Limitations"
"RTN","IBCMDT1",118,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",119,0)
 S DIR("?",1)="If you say yes, the report will print X's when Coverage Limitations is missing."
"RTN","IBCMDT1",120,0)
 S DIR("?")="If you say no, missing Coverage Limitations will not be indicated."
"RTN","IBCMDT1",121,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",122,0)
 I $D(DIRUT) S STOP=1 G SLCLMQ
"RTN","IBCMDT1",123,0)
 S IBMDTSPC("IBCLM")=+Y K Y
"RTN","IBCMDT1",124,0)
SLCLMQ ;
"RTN","IBCMDT1",125,0)
 Q
"RTN","IBCMDT1",126,0)
 ;
"RTN","IBCMDT1",127,0)
SLBIN ; Prompt user to report missing Banking Identification Numbers (BIN)
"RTN","IBCMDT1",128,0)
 ;
"RTN","IBCMDT1",129,0)
 ; 0 -- Do not print missing Banking Identification Numbers (BIN).
"RTN","IBCMDT1",130,0)
 ; 1 -- Print missing Banking Identification Numbers (BIN).
"RTN","IBCMDT1",131,0)
 ;
"RTN","IBCMDT1",132,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",133,0)
 S DIR("A")="Display Active Group(s) missing BIN"
"RTN","IBCMDT1",134,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",135,0)
 S DIR("?",1)="If you say yes, the report will print X's when Banking Identification Number"
"RTN","IBCMDT1",136,0)
 S DIR("?",2)="(BIN) is missing."
"RTN","IBCMDT1",137,0)
 S DIR("?",3)="If you say no, missing Banking Identification Number (BIN) will not be"
"RTN","IBCMDT1",138,0)
 S DIR("?")="indicated."
"RTN","IBCMDT1",139,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",140,0)
 I $D(DIRUT) S STOP=1 G SLBINQ
"RTN","IBCMDT1",141,0)
 S IBMDTSPC("IBBIN")=+Y K Y
"RTN","IBCMDT1",142,0)
SLBINQ ;
"RTN","IBCMDT1",143,0)
 Q
"RTN","IBCMDT1",144,0)
 ;
"RTN","IBCMDT1",145,0)
SLPCN   ; Prompt user to report missing Processor Control Numbers (PCN)
"RTN","IBCMDT1",146,0)
 ;
"RTN","IBCMDT1",147,0)
 ; 0 -- Do not print missing Processor Control Numbers (PCN).
"RTN","IBCMDT1",148,0)
 ; 1 -- Print missing Processor Control Numbers (PCN).
"RTN","IBCMDT1",149,0)
 ;
"RTN","IBCMDT1",150,0)
 S DIR(0)="YO"
"RTN","IBCMDT1",151,0)
 S DIR("A")="Display Active Group(s) missing PCN"
"RTN","IBCMDT1",152,0)
 S DIR("B")="YES"
"RTN","IBCMDT1",153,0)
 S DIR("?",1)="If you say yes, the report will print X's when Processor Control Number"
"RTN","IBCMDT1",154,0)
 S DIR("?",2)="(PCN) is missing."
"RTN","IBCMDT1",155,0)
 S DIR("?",3)="If you say no, missing Processor Control Number (PCN) will not be"
"RTN","IBCMDT1",156,0)
 S DIR("?")="indicated."
"RTN","IBCMDT1",157,0)
 W ! D ^DIR K DIR
"RTN","IBCMDT1",158,0)
 I $D(DIRUT) S STOP=1 G SLPCNQ
"RTN","IBCMDT1",159,0)
 S IBMDTSPC("IBPCN")=+Y K Y
"RTN","IBCMDT1",160,0)
SLPCNQ ;
"RTN","IBCMDT1",161,0)
 Q
"RTN","IBCMDT1",162,0)
 ;
"RTN","IBCMDT2")
0^2^B30988652
"RTN","IBCMDT2",1,0)
IBCMDT2 ;ALB/VD - INSURANCE PLANS MISSING DATA REPORT (COMPILE) ; 10-APR-15
"RTN","IBCMDT2",2,0)
 ;;2.0;INTEGRATED BILLING ;**549**; 10-APR-15;Build 54
"RTN","IBCMDT2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCMDT2",4,0)
 ;
"RTN","IBCMDT2",5,0)
EN ; Queued Entry Point for Report.
"RTN","IBCMDT2",6,0)
 ;  Required variable input:  FLTRS,IBAI, IBAPL, IBGRN, IBPTY, IBTFT, IBEPT,
"RTN","IBCMDT2",7,0)
 ;                            IBCLM, IBBIN, IBNMSPC,IBPCN
"RTN","IBCMDT2",8,0)
 ;  ^TMP("IBCMDT",IBNMSPC) required if all companies and plans not selected
"RTN","IBCMDT2",9,0)
 ;
"RTN","IBCMDT2",10,0)
 ; - compile report data
"RTN","IBCMDT2",11,0)
 N IBI,IBIC1,IBCNS
"RTN","IBCMDT2",12,0)
 S IBI=0 K ^TMP($J,"PR")
"RTN","IBCMDT2",13,0)
 S IBIC1=""
"RTN","IBCMDT2",14,0)
 F  S IBIC1=$O(^TMP("IBCMDT",IBNMSPC,IBIC1)) Q:IBIC1=""  D
"RTN","IBCMDT2",15,0)
 . S IBCNS=0
"RTN","IBCMDT2",16,0)
 . F  S IBCNS=$O(^TMP("IBCMDT",IBNMSPC,IBIC1,IBCNS)) Q:'IBCNS  D
"RTN","IBCMDT2",17,0)
 . . D GATH
"RTN","IBCMDT2",18,0)
 Q
"RTN","IBCMDT2",19,0)
 ;
"RTN","IBCMDT2",20,0)
GATH ; Gather all data for a company.
"RTN","IBCMDT2",21,0)
 N IBCPS,IBCPT,IBCST
"RTN","IBCMDT2",22,0)
 S IBI=IBI+1,(IBCPT,IBCPS,IBCST)=0 ; initialize counters
"RTN","IBCMDT2",23,0)
 D PLAN ; gather plan info
"RTN","IBCMDT2",24,0)
 ;
"RTN","IBCMDT2",25,0)
 ; - set final company info
"RTN","IBCMDT2",26,0)
 S ^TMP($J,"PR",IBI)=$$COMPINF(IBCNS)_"^"_IBCPT_"^"_IBCPS
"RTN","IBCMDT2",27,0)
 Q
"RTN","IBCMDT2",28,0)
 ;
"RTN","IBCMDT2",29,0)
PLAN ; Gather Insurance Plan information, if necessary
"RTN","IBCMDT2",30,0)
 ;  Input:  IBCNS -- Pointer to the insurance company in file #36
"RTN","IBCMDT2",31,0)
 ;         initialized counters, plus the 'Plan' array (^TMP("IBINC",$J))
"RTN","IBCMDT2",32,0)
 ;
"RTN","IBCMDT2",33,0)
 N FNDONE,IBPTR,PLNDATA,POSWT
"RTN","IBCMDT2",34,0)
 S IBPTR=0
"RTN","IBCMDT2",35,0)
 S POSWT=$S($$GET1^DIQ(36,IBCNS,.13)="PRESCRIPTION ONLY":1,1:0)
"RTN","IBCMDT2",36,0)
 F  S IBPTR=$O(^IBA(355.3,"B",IBCNS,IBPTR)) Q:'IBPTR  D
"RTN","IBCMDT2",37,0)
 . S PLNDATA=$$PLANINF(IBPTR,POSWT)
"RTN","IBCMDT2",38,0)
 . Q:(+PLNDATA=-2)                          ; Skip inactive plans.
"RTN","IBCMDT2",39,0)
 . ;
"RTN","IBCMDT2",40,0)
 . ; If there's no Missing Plan Data & not looking for coverage limitations.
"RTN","IBCMDT2",41,0)
 . I (+PLNDATA=-1),'+$G(IBMDTSPC("IBCLM")) Q
"RTN","IBCMDT2",42,0)
 . S ^TMP($J,"PR",IBI,IBPTR)=PLNDATA
"RTN","IBCMDT2",43,0)
 . I +$G(IBMDTSPC("IBCLM")) D
"RTN","IBCMDT2",44,0)
 . . S FNDONE=+$$GCVLIMS(IBI,IBPTR,1)  ; This will create the cov. limit. nodes
"RTN","IBCMDT2",45,0)
 . . ;
"RTN","IBCMDT2",46,0)
 . . ; No missing coverage limitations AND no other missing data on requested
"RTN","IBCMDT2",47,0)
 . . ; Filters found, kill reference to the plan.
"RTN","IBCMDT2",48,0)
 . . I '+FNDONE,+PLNDATA=-1 K ^TMP($J,"PR",IBI,IBPTR)
"RTN","IBCMDT2",49,0)
 Q
"RTN","IBCMDT2",50,0)
 ;
"RTN","IBCMDT2",51,0)
COMPINF(IBCNS) ; Return formatted Insurance Company information
"RTN","IBCMDT2",52,0)
 ;  Input:  IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCMDT2",53,0)
 ; Output:  company name ^ addr ^ city/st/zip
"RTN","IBCMDT2",54,0)
 ;
"RTN","IBCMDT2",55,0)
 N POSWT,ST,X
"RTN","IBCMDT2",56,0)
 S POSWT=$S($$GET1^DIQ(36,IBCNS,.13)="PRESCRIPTION ONLY":1,1:0)
"RTN","IBCMDT2",57,0)
 S ST=$P($G(^DIC(5,+$$GET1^DIQ(36,IBCNS,.115,"I"),0)),U,2)
"RTN","IBCMDT2",58,0)
 S X=POSWT_U_$$GET1^DIQ(36,IBCNS,.01)_U_$$GET1^DIQ(36,IBCNS,.111)
"RTN","IBCMDT2",59,0)
 S X=X_U_$$GET1^DIQ(36,IBCNS,.114)_", "_ST_" "_$$GET1^DIQ(36,IBCNS,.116)
"RTN","IBCMDT2",60,0)
 Q X
"RTN","IBCMDT2",61,0)
 ;
"RTN","IBCMDT2",62,0)
PLANINF(PLAN,POSWT) ; Return formatted Insurance Plan information.
"RTN","IBCMDT2",63,0)
 ; Input:   PLAN    - Pointer to the plan in file #355.3
"RTN","IBCMDT2",64,0)
 ;          POSWT   -  PRESCRIPTION ONLY indicator
"RTN","IBCMDT2",65,0)
 ; Returns: A1^A2^A3^...^A8 Where
"RTN","IBCMDT2",66,0)
 ;           A1 - -2 if inactive plan, -1 if no missing data found, else 0
"RTN","IBCMDT2",67,0)
 ;           A2 - Plan Number
"RTN","IBCMDT2",68,0)
 ;           A3 - Plan Name
"RTN","IBCMDT2",69,0)
 ;           A4 - Type of Plan (Group or Individual
"RTN","IBCMDT2",70,0)
 ;           A5 - Electronic Plan Type
"RTN","IBCMDT2",71,0)
 ;           A6 - Timely filing Time Frame
"RTN","IBCMDT2",72,0)
 ;           A7 - Banking Identification Number
"RTN","IBCMDT2",73,0)
 ;           A8 - Process Control Number
"RTN","IBCMDT2",74,0)
 ;
"RTN","IBCMDT2",75,0)
 N BIN,EPT,NAME,NUM,PCN,TFTF,TYP,VAL
"RTN","IBCMDT2",76,0)
 S VAL=-2
"RTN","IBCMDT2",77,0)
 I +$$GET1^DIQ(355.3,+PLAN,.11,"I") Q VAL       ; INACTIVE Plan, skip
"RTN","IBCMDT2",78,0)
 S VAL=-1
"RTN","IBCMDT2",79,0)
 S NAME=$E($$GET1^DIQ(355.3,+PLAN,.03),1,45)    ; 45 Chars max
"RTN","IBCMDT2",80,0)
 S NUM=$$GET1^DIQ(355.3,+PLAN,.04)              ; 17 Chars max
"RTN","IBCMDT2",81,0)
 S:'$L(NUM) NUM="#######"
"RTN","IBCMDT2",82,0)
 I +$G(IBMDTSPC("IBGRN")),NUM="#######" S VAL=0 ; Found Missing data for a Filter
"RTN","IBCMDT2",83,0)
 S TYP=$$GET1^DIQ(355.3,+PLAN,.09)              ; 40 Chars max
"RTN","IBCMDT2",84,0)
 S:'$L(TYP) TYP="#######"
"RTN","IBCMDT2",85,0)
 I +$G(IBMDTSPC("IBPTY")),TYP="#######" S VAL=0 ; Found Missing data for a Filter
"RTN","IBCMDT2",86,0)
 S EPT=$$GET1^DIQ(355.3,+PLAN,.15)              ; 26 Chars max
"RTN","IBCMDT2",87,0)
 S:'$L(EPT) EPT="#######"
"RTN","IBCMDT2",88,0)
 I +$G(IBMDTSPC("IBEPT")),EPT="#######" S VAL=0 ; Found Missing data for a Filter
"RTN","IBCMDT2",89,0)
 S TFTF=$$FTFGP^IBCNEUT7(PLAN,1)                ; Around 30 Chars max
"RTN","IBCMDT2",90,0)
 I +$G(IBMDTSPC("IBTFT")),TFTF["###" S VAL=0    ; Found Missing data for a Filter
"RTN","IBCMDT2",91,0)
 S BIN=$$GET1^DIQ(355.3,+PLAN,6.02)             ; 10 Chars max
"RTN","IBCMDT2",92,0)
 ;
"RTN","IBCMDT2",93,0)
 ; If the plan is Prescription Only AND the Banking Identifier is blank, indicate it
"RTN","IBCMDT2",94,0)
 I +POSWT,'$L(BIN) S BIN="#######"
"RTN","IBCMDT2",95,0)
 I +$G(IBMDTSPC("IBBIN")),+POSWT,BIN="#######" S VAL=0  ; Found Missing data for a Filter
"RTN","IBCMDT2",96,0)
 S PCN=$$GET1^DIQ(355.3,+PLAN,6.03)             ; 20 Chars max
"RTN","IBCMDT2",97,0)
 ;
"RTN","IBCMDT2",98,0)
 ; If the plan is Prescription Only AND the Process Control Number is blank, indicate it
"RTN","IBCMDT2",99,0)
 I +POSWT,'$L(PCN) S PCN="#######"
"RTN","IBCMDT2",100,0)
 I +$G(IBMDTSPC("IBPCN")),+POSWT,PCN="#######" S VAL=0    ; Found Missing data for a Filter
"RTN","IBCMDT2",101,0)
 Q VAL_U_NUM_U_$E(NAME,1,12)_U_$E(TYP,1,12)_U_$E(EPT,1,12)_U_TFTF_U_BIN_U_PCN
"RTN","IBCMDT2",102,0)
 ;
"RTN","IBCMDT2",103,0)
GCVLIMS(IBI,PLAN,RECIND) ; Obtain Plans that may have Coverage Limits missing.
"RTN","IBCMDT2",104,0)
 ;  Input:  IBI    --  Line counter
"RTN","IBCMDT2",105,0)
 ;          IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCMDT2",106,0)
 ;          RECIND --  Indicator to determine if header record for plan is already set
"RTN","IBCMDT2",107,0)
 ;                     0 means ^TMP($J,"PR",IBI,IBPTR) is already set.
"RTN","IBCMDT2",108,0)
 ;                     1 means ^TMP($J,"PR",IBI,IBPTR) is not set yet.
"RTN","IBCMDT2",109,0)
 ;  Output: This will create the ^TMP($J,"PR",IBI,IBPTR,IBCVLM) node
"RTN","IBCMDT2",110,0)
 ;          FOUND  --  0 means a missing data coverage limitation was not found.
"RTN","IBCMDT2",111,0)
 ;                     1 means a missing data coverage limitation was found.
"RTN","IBCMDT2",112,0)
 ;
"RTN","IBCMDT2",113,0)
 N FOUND,IBCAT,IBCOV,IBCPTR,IBCSTA,IBCVDAT,IBEFDT,IBRECDT,IBRECN,IBREC,VAL
"RTN","IBCMDT2",114,0)
 S (FOUND,IBCPTR)=0
"RTN","IBCMDT2",115,0)
 I '$D(^IBA(355.32,"APCD",PLAN)) D  Q +FOUND
"RTN","IBCMDT2",116,0)
 . I '+$G(IBMDTSPC("IBCLM")) Q
"RTN","IBCMDT2",117,0)
 . S FOUND=1,IBCPTR=IBCPTR+1
"RTN","IBCMDT2",118,0)
 . S ^TMP($J,"PR",IBI,IBPTR,IBCPTR)="This plan has no coverage limitations defined."
"RTN","IBCMDT2",119,0)
 S IBCAT=0
"RTN","IBCMDT2",120,0)
 F  S IBCAT=$O(^IBE(355.31,IBCAT)) Q:'+IBCAT  D
"RTN","IBCMDT2",121,0)
 . I '$D(^IBA(355.32,"APCD",PLAN,IBCAT)) D  Q
"RTN","IBCMDT2",122,0)
 . . S IBCOV=$$GET1^DIQ(355.31,IBCAT,.01)
"RTN","IBCMDT2",123,0)
 . . S IBEFDT="#######",IBCSTA="#######"
"RTN","IBCMDT2",124,0)
 . . S IBCVDAT=IBCOV_U_IBEFDT_U_IBCSTA,FOUND=1
"RTN","IBCMDT2",125,0)
 . . S IBCPTR=IBCPTR+1
"RTN","IBCMDT2",126,0)
 . . S ^TMP($J,"PR",IBI,IBPTR,IBCPTR)=IBCVDAT
"RTN","IBCMDT2",127,0)
 F  S IBCAT=$O(^IBA(355.32,"APCD",PLAN,IBCAT)) Q:IBCAT=""  D
"RTN","IBCMDT2",128,0)
 . S IBRECDT=""
"RTN","IBCMDT2",129,0)
 . F  S IBRECDT=$O(^IBA(355.32,"APCD",PLAN,IBCAT,IBRECDT)) Q:IBRECDT=""  D
"RTN","IBCMDT2",130,0)
 . . S IBRECN=""
"RTN","IBCMDT2",131,0)
 . . F  S IBRECN=$O(^IBA(355.32,"APCD",PLAN,IBCAT,IBRECDT,IBRECN)) Q:IBRECN=""  D
"RTN","IBCMDT2",132,0)
 . . . S IBEFDT=$$DAT1^IBOUTL($$GET1^DIQ(355.32,IBRECN,.03,"I"))
"RTN","IBCMDT2",133,0)
 . . . I +$G(IBMDTSPC("IBCLM")) S IBEFDT=$S(+$L(IBEFDT):IBEFDT,1:"#######")   ; Effective Date
"RTN","IBCMDT2",134,0)
 . . . S IBCOV=$$GET1^DIQ(355.32,IBRECN,.02)
"RTN","IBCMDT2",135,0)
 . . . I +$G(IBMDTSPC("IBCLM")) S IBCOV=$S(+$L(IBCOV):IBCOV,1:"#######")      ; Coverage Category
"RTN","IBCMDT2",136,0)
 . . . S IBCSTA=$$GET1^DIQ(355.32,IBRECN,.04)
"RTN","IBCMDT2",137,0)
 . . . I +$G(IBMDTSPC("IBCLM")) S IBCSTA=$S(+$L(IBCSTA):IBCSTA,1:"#######")   ; Coverage Status
"RTN","IBCMDT2",138,0)
 . . . S IBCVDAT=IBCOV_U_IBEFDT_U_IBCSTA
"RTN","IBCMDT2",139,0)
 . . . I IBCVDAT["#######" S FOUND=1
"RTN","IBCMDT2",140,0)
 . . . S IBCPTR=IBCPTR+1
"RTN","IBCMDT2",141,0)
 . . . I +FOUND S ^TMP($J,"PR",IBI,IBPTR,IBCPTR)=IBCVDAT
"RTN","IBCMDT2",142,0)
 Q +FOUND
"RTN","IBCMDT2",143,0)
 ;
"RTN","IBCMDT3")
0^29^B9544257
"RTN","IBCMDT3",1,0)
IBCMDT3 ;ALB/VD - INSURANCE PLANS MISSING DATA REPORT (PRINT) ; 10-APR-15
"RTN","IBCMDT3",2,0)
 ;;2.0;INTEGRATED BILLING ;**549**; 10-APR-15;Build 54
"RTN","IBCMDT3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCMDT3",4,0)
 ;
"RTN","IBCMDT3",5,0)
 ; Print the report.
"RTN","IBCMDT3",6,0)
 ;  Required Input:  Global print array ^TMP($J,"PR"
"RTN","IBCMDT3",7,0)
 ;
"RTN","IBCMDT3",8,0)
 ;
"RTN","IBCMDT3",9,0)
EN ; - Entry point to print report
"RTN","IBCMDT3",10,0)
 N EORMSG,IBHDT,NODATA
"RTN","IBCMDT3",11,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCMDT3",12,0)
 D NOW^%DTC S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCMDT3",13,0)
 S NODATA=1
"RTN","IBCMDT3",14,0)
 D PRINT
"RTN","IBCMDT3",15,0)
 K ^TMP($J,"PR"),^TMP("IBCMDT",IBNMSPC)
"RTN","IBCMDT3",16,0)
 I NODATA D
"RTN","IBCMDT3",17,0)
 . N IBPAG
"RTN","IBCMDT3",18,0)
 . S IBPAG=0
"RTN","IBCMDT3",19,0)
 . D COMP
"RTN","IBCMDT3",20,0)
 W !!!,EORMSG
"RTN","IBCMDT3",21,0)
 D PAUSE
"RTN","IBCMDT3",22,0)
 ;
"RTN","IBCMDT3",23,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCMDT3",24,0)
 ; Close Device
"RTN","IBCMDT3",25,0)
 D ^%ZISC
"RTN","IBCMDT3",26,0)
 Q
"RTN","IBCMDT3",27,0)
 ;
"RTN","IBCMDT3",28,0)
PRINT ; Print report
"RTN","IBCMDT3",29,0)
 ; Input:   NODATA  - Set to 1 initially
"RTN","IBCMDT3",30,0)
 ; Output:  NODATE  - Set to 1 if at least one Insurance Company
"RTN","IBCMDT3",31,0)
 ;                    with data found
"RTN","IBCMDT3",32,0)
 N CVLMRC,CVLPRT,CVSWT,IBC,IBCVLT,IBI,IBP,IBPAG,IBQUIT,NEWIC,POSWT,%
"RTN","IBCMDT3",33,0)
 S (IBI,IBQUIT,IBPAG,CVLPRT,POSWT)=0,IBCVLT=""
"RTN","IBCMDT3",34,0)
 F  S IBI=$O(^TMP($J,"PR",IBI)) Q:('IBI!IBQUIT)  D
"RTN","IBCMDT3",35,0)
 . S IBC=$G(^TMP($J,"PR",IBI)),POSWT=+$P(IBC,U,1)
"RTN","IBCMDT3",36,0)
 . I $D(^TMP($J,"PR",IBI))=1 Q
"RTN","IBCMDT3",37,0)
 . S NODATA=0
"RTN","IBCMDT3",38,0)
 . D COMP D  Q:IBQUIT
"RTN","IBCMDT3",39,0)
 . . S IBP=0
"RTN","IBCMDT3",40,0)
 . . F  S IBP=$O(^TMP($J,"PR",IBI,IBP)) Q:'IBP  D  Q:IBQUIT
"RTN","IBCMDT3",41,0)
 . . . S IBPD=$G(^TMP($J,"PR",IBI,IBP))
"RTN","IBCMDT3",42,0)
 . . . I $Y>(IOSL-5) D PAUSE Q:IBQUIT  D COMP
"RTN","IBCMDT3",43,0)
 . . . S CVSWT=1 D PLAN
"RTN","IBCMDT3",44,0)
 . . . S IBCVLT=""
"RTN","IBCMDT3",45,0)
 . . . F  S IBCVLT=$O(^TMP($J,"PR",IBI,IBP,IBCVLT)) Q:IBCVLT=""  D  Q:IBQUIT
"RTN","IBCMDT3",46,0)
 . . . . S CVLMRC=$G(^TMP($J,"PR",IBI,IBP,IBCVLT))
"RTN","IBCMDT3",47,0)
 . . . . I +CVSWT D CVLMHD S CVSWT=0
"RTN","IBCMDT3",48,0)
 . . . . W !?4,$P(CVLMRC,U,1),?30,$P(CVLMRC,U,2),?50,$P(CVLMRC,U,3)
"RTN","IBCMDT3",49,0)
 . . . . S CVLPRT=1
"RTN","IBCMDT3",50,0)
 ;
"RTN","IBCMDT3",51,0)
 K IBC,IBCVLM,IBI,IBJJ,IBQUIT,IBP,IBPAG,IBPD,IBS,IBSD
"RTN","IBCMDT3",52,0)
 Q
"RTN","IBCMDT3",53,0)
 ;
"RTN","IBCMDT3",54,0)
COMP ; Print Company header
"RTN","IBCMDT3",55,0)
 ; Input:   NODATA - 1 if no data was found
"RTN","IBCMDT3",56,0)
 I $E(IOST,1,2)="C-"!(IBPAG) W @IOF
"RTN","IBCMDT3",57,0)
 S IBPAG=IBPAG+1
"RTN","IBCMDT3",58,0)
 W !,"INSURANCE PLANS MISSING DATA"
"RTN","IBCMDT3",59,0)
 W ?80,IBHDT,?110,"Page: ",IBPAG
"RTN","IBCMDT3",60,0)
 W !,$G(SUBHD),!
"RTN","IBCMDT3",61,0)
 I +$G(NODATA) D  Q
"RTN","IBCMDT3",62,0)
 . W !!!,"--- No Data To Report ---",!
"RTN","IBCMDT3",63,0)
 ;
"RTN","IBCMDT3",64,0)
 ; - sub-header
"RTN","IBCMDT3",65,0)
 W !?1,$P(IBC,U,2)_"  "_$P(IBC,U,3)_"  "_$P(IBC,U,4)
"RTN","IBCMDT3",66,0)
 I +POSWT W ?90,"PRESCRIPTION ONLY"
"RTN","IBCMDT3",67,0)
 S NEWIC=1
"RTN","IBCMDT3",68,0)
 Q
"RTN","IBCMDT3",69,0)
 ;
"RTN","IBCMDT3",70,0)
PLAN ; Print plan information.
"RTN","IBCMDT3",71,0)
 I CVLPRT W ! S CVLPRT=0
"RTN","IBCMDT3",72,0)
 I +NEWIC D
"RTN","IBCMDT3",73,0)
 . W !!?2,"GROUP NUMBER",?20,"GROUP NAME",?46,"TYPE OF PLAN",?62,"ELEC PLAN",?78,"FTF"
"RTN","IBCMDT3",74,0)
 . W:+$G(POSWT) ?98,"BIN",?109,"PCN"
"RTN","IBCMDT3",75,0)
 . W !?2,"------------",?20,"----------",?46,"------------",?62,"---------",?78,"---"
"RTN","IBCMDT3",76,0)
 . W:+$G(POSWT) ?98,"---",?109,"---"
"RTN","IBCMDT3",77,0)
 W !?2,$P(IBPD,U,2),?20,$E($P(IBPD,U,3),1,25),?46,$E($P(IBPD,U,4),1,15)
"RTN","IBCMDT3",78,0)
 W ?62,$E($P(IBPD,U,5),1,15),?78,$P(IBPD,U,6)
"RTN","IBCMDT3",79,0)
 W:+$G(POSWT) ?98,$P(IBPD,U,7),?109,$P(IBPD,U,8)
"RTN","IBCMDT3",80,0)
 S NEWIC=0
"RTN","IBCMDT3",81,0)
 Q
"RTN","IBCMDT3",82,0)
 ;
"RTN","IBCMDT3",83,0)
CVLMHD ; Print Coverage Limit sub-header
"RTN","IBCMDT3",84,0)
 W !!?4,"Coverage",?30,"Effective Date",?50,"Covered?"
"RTN","IBCMDT3",85,0)
 W !?4,"--------",?30,"--------------",?50,"--------"
"RTN","IBCMDT3",86,0)
 Q
"RTN","IBCMDT3",87,0)
 ;
"RTN","IBCMDT3",88,0)
PAUSE ; Pause for screen output.
"RTN","IBCMDT3",89,0)
 Q:$E(IOST,1,2)'["C-"
"RTN","IBCMDT3",90,0)
 F IBJJ=$Y:1:(IOSL-7) W !
"RTN","IBCMDT3",91,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCMDT3",92,0)
 I $D(DIRUT)!($D(DUOUT)) S IBQUIT=1 K DIRUT,DTOUT,DUOUT
"RTN","IBCMDT3",93,0)
 Q
"RTN","IBCNBCD")
0^46^B122951188
"RTN","IBCNBCD",1,0)
IBCNBCD ;ALB/ARH - Ins Buffer: display/compare buffer and existing ins ;1 Jun 97
"RTN","IBCNBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**82,251,361,371,416,438,452,497,528,549**;21-MAR-94;Build 54
"RTN","IBCNBCD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBCD",4,0)
 ;
"RTN","IBCNBCD",5,0)
INS(IBBUFDA,IBINSDA) ; display a buffer entry's insurance company fields and
"RTN","IBCNBCD",6,0)
 ; an existing insurance company's fields for comparison
"RTN","IBCNBCD",7,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",8,0)
 ;
"RTN","IBCNBCD",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBCD",10,0)
 ;
"RTN","IBCNBCD",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBCD",12,0)
 ;
"RTN","IBCNBCD",13,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBCD",14,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",16,0)
 ;
"RTN","IBCNBCD",17,0)
 D DISPLAY(20.02,36,.131,"Phone Number:")
"RTN","IBCNBCD",18,0)
 D DISPLAY(20.03,36,.132,"Billing Phone:")
"RTN","IBCNBCD",19,0)
 D DISPLAY(20.04,36,.133,"Pre-Cert Phone:")
"RTN","IBCNBCD",20,0)
 D DISPLAY(21.01,36,.111,"Street [Line 1]:")
"RTN","IBCNBCD",21,0)
 D DISPLAY(21.02,36,.112,"Street [Line 2]:")
"RTN","IBCNBCD",22,0)
 D DISPLAY(21.03,36,.113,"Street [Line 3]:")
"RTN","IBCNBCD",23,0)
 D DISPLAY(21.04,36,.114,"City:")
"RTN","IBCNBCD",24,0)
 D DISPLAY(21.05,36,.115,"State:")
"RTN","IBCNBCD",25,0)
 D DISPLAY(21.06,36,.116,"Zip Code:")
"RTN","IBCNBCD",26,0)
 ;
"RTN","IBCNBCD",27,0)
 S IBFLD1="(bold=accepted on Merge)",IBFLD2="(bold=replaced on Overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",28,0)
 Q
"RTN","IBCNBCD",29,0)
 ;
"RTN","IBCNBCD",30,0)
GRP(IBBUFDA,IBGRPDA) ; display a buffer entry's group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBCD",31,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",32,0)
 ;
"RTN","IBCNBCD",33,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBCD",34,0)
 ;
"RTN","IBCNBCD",35,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBCD",36,0)
 ;
"RTN","IBCNBCD",37,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBCD",38,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",39,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",40,0)
 ;
"RTN","IBCNBCD",41,0)
 D DISPLAY(90.01,355.3,2.01,"Group Name:")
"RTN","IBCNBCD",42,0)
 D DISPLAY(90.02,355.3,2.02,"Group Number:")
"RTN","IBCNBCD",43,0)
 D DISPLAY(40.1,355.3,6.02,"BIN:") ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNBCD",44,0)
 D DISPLAY(40.11,355.3,6.03,"PCN:")
"RTN","IBCNBCD",45,0)
 D DISPLAY(40.04,355.3,.05,"Require UR:")
"RTN","IBCNBCD",46,0)
 D DISPLAY(40.05,355.3,.06,"Require Pre-Cert:")
"RTN","IBCNBCD",47,0)
 D DISPLAY(40.06,355.3,.12,"Require Amb Cert:")
"RTN","IBCNBCD",48,0)
 D DISPLAY(40.07,355.3,.07,"Exclude Pre-Cond:")
"RTN","IBCNBCD",49,0)
 D DISPLAY(40.08,355.3,.08,"Benefits Assign:")
"RTN","IBCNBCD",50,0)
 D DISPLAY(40.09,355.3,.09,"Type of Plan:")
"RTN","IBCNBCD",51,0)
 ;
"RTN","IBCNBCD",52,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",53,0)
 Q
"RTN","IBCNBCD",54,0)
 ;
"RTN","IBCNBCD",55,0)
POLICY(IBBUFDA,IBPOLDA) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBCD",56,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBCD",57,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",58,0)
 ;
"RTN","IBCNBCD",59,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBCD",60,0)
 ;
"RTN","IBCNBCD",61,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBCD",62,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",63,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,90.02),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",64,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",65,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",66,0)
 ;
"RTN","IBCNBCD",67,0)
 D DISPLAY(60.02,2.312,8,"Effective Date:")
"RTN","IBCNBCD",68,0)
 D DISPLAY(60.03,2.312,3,"Expiration Date:")
"RTN","IBCNBCD",69,0)
 D DISPLAY(90.03,2.312,7.02,"Subscriber Id:")
"RTN","IBCNBCD",70,0)
 D DISPLAY(60.05,2.312,6,"Whose Insurance:")
"RTN","IBCNBCD",71,0)
 D DISPLAY(60.06,2.312,16,"Relationship:")
"RTN","IBCNBCD",72,0)
 D DISPLAY(60.15,2.312,4.05,"Rx Relationship:")
"RTN","IBCNBCD",73,0)
 D DISPLAY(60.16,2.312,4.06,"Rx Person Code:")
"RTN","IBCNBCD",74,0)
 D DISPLAY(91.01,2.312,7.01,"Subscriber Name:")
"RTN","IBCNBCD",75,0)
 D DISPLAY(60.08,2.312,3.01,"Subscriber's DOB:")
"RTN","IBCNBCD",76,0)
 D DISPLAY(60.09,2.312,3.05,"Subscriber's SSN:")
"RTN","IBCNBCD",77,0)
 D DISPLAY(60.13,2.312,3.12,"Subscriber's SEX:")
"RTN","IBCNBCD",78,0)
 D DISPLAY(60.1,2.312,4.01,"Primary Provider:")
"RTN","IBCNBCD",79,0)
 D DISPLAY(60.11,2.312,4.02,"Provider Phone:")
"RTN","IBCNBCD",80,0)
 D DISPLAY(60.12,2.312,.2,"Coor of Benefits:")
"RTN","IBCNBCD",81,0)
 D DISPLAY(61.01,2.312,2.1,"Emp Sponsored?:")
"RTN","IBCNBCD",82,0)
 D DISPLAY(62.01,2.312,5.01,"Patient Id:")
"RTN","IBCNBCD",83,0)
 D DISPLAY(62.02,2.312,3.06,"Subscr Str Ln 1:")
"RTN","IBCNBCD",84,0)
 D DISPLAY(62.03,2.312,3.07,"Subscr Str Ln 2:")
"RTN","IBCNBCD",85,0)
 D DISPLAY(62.04,2.312,3.08,"Subscr City:")
"RTN","IBCNBCD",86,0)
 D DISPLAY(62.05,2.312,3.09,"Subscr State:")
"RTN","IBCNBCD",87,0)
 D DISPLAY(62.06,2.312,3.1,"Subscr Zip:")
"RTN","IBCNBCD",88,0)
 D DISPLAY(62.07,2.312,3.13,"Subscr Country:")
"RTN","IBCNBCD",89,0)
 D DISPLAY(62.08,2.312,3.14,"Subscr Subdiv:")
"RTN","IBCNBCD",90,0)
 D DISPLAY(62.09,2.312,3.11,"Subscr Phone:")  ; 528 - baa
"RTN","IBCNBCD",91,0)
 ;
"RTN","IBCNBCD",92,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP
"RTN","IBCNBCD",93,0)
 ;
"RTN","IBCNBCD",94,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",95,0)
 ;
"RTN","IBCNBCD",96,0)
 Q
"RTN","IBCNBCD",97,0)
 ;
"RTN","IBCNBCD",98,0)
ESGHP ; display employee sponsored group health plan
"RTN","IBCNBCD",99,0)
 W ! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W ! Q:$D(DIRUT)
"RTN","IBCNBCD",100,0)
 ;
"RTN","IBCNBCD",101,0)
 D DISPLAY(61.02,2.312,2.015,"Employer Name:")
"RTN","IBCNBCD",102,0)
 D DISPLAY(61.03,2.312,2.11,"Emp Status:")
"RTN","IBCNBCD",103,0)
 D DISPLAY(61.04,2.312,2.12,"Retirement Date:")
"RTN","IBCNBCD",104,0)
 D DISPLAY(61.05,2.312,2.01,"Send to Employer:")
"RTN","IBCNBCD",105,0)
 D DISPLAY(61.06,2.312,2.02,"Emp Street Ln 1:")
"RTN","IBCNBCD",106,0)
 D DISPLAY(61.07,2.312,2.03,"Emp Street Ln 2:")
"RTN","IBCNBCD",107,0)
 D DISPLAY(61.08,2.312,2.04,"Emp Street Ln 3:")
"RTN","IBCNBCD",108,0)
 D DISPLAY(61.09,2.312,2.05,"Emp City:")
"RTN","IBCNBCD",109,0)
 D DISPLAY(61.1,2.312,2.06,"Emp State:")
"RTN","IBCNBCD",110,0)
 D DISPLAY(61.11,2.312,2.07,"Emp Zip Code:")
"RTN","IBCNBCD",111,0)
 D DISPLAY(61.12,2.312,2.08,"Emp Phone:")
"RTN","IBCNBCD",112,0)
 Q
"RTN","IBCNBCD",113,0)
 ;
"RTN","IBCNBCD",114,0)
ELIG(IBBUFDA,IBPOLDA) ; Display eligibility/benefit data
"RTN","IBCNBCD",115,0)
 ; IB*2.0*549 Added EBGSTR,EBGLEN, arranged in alphabetical order
"RTN","IBCNBCD",116,0)
 N ATTR,BRELEN,BRESTR,BRPLEN,BRPSTR,CMPLEN,CMPSTR,DFN,EBDDATA,EBGLEN,EBGSTR,EBILEN,EBISTR
"RTN","IBCNBCD",117,0)
 N ENDSEC,EX,FLD1,FLD2,FLDIDX,GRPLEN,GRPSTR,HCSLEN,HCSSTR,I,I1,I2,IBVEBCOL,IDATA,LEN,NOBLEN
"RTN","IBCNBCD",118,0)
 N NOBSTR,NOCLEN,NOCSTR,NODATA,NOHLEN,NOHSTR,NOIDATA,RDATA,RESPIEN,SECEND,XX
"RTN","IBCNBCD",119,0)
 S EBGSTR="Payer Summary - from Payer's Response",EBGLEN=$L(EBGSTR)  ;IB*2.0*549 Added line
"RTN","IBCNBCD",120,0)
 S GRPSTR="Eligibility/Group Plan Information",GRPLEN=$L(GRPSTR)  ;IB*2*497 
"RTN","IBCNBCD",121,0)
 S EBISTR="Eligibility/Benefit Information",EBILEN=$L(EBISTR)
"RTN","IBCNBCD",122,0)
 S CMPSTR="Composite Medical Procedure Information",CMPLEN=$L(CMPSTR)
"RTN","IBCNBCD",123,0)
 S HCSSTR="Health Care Service Delivery",HCSLEN=$L(HCSSTR)
"RTN","IBCNBCD",124,0)
 S BRESTR="Benefit Related Entity",BRELEN=$L(BRESTR)
"RTN","IBCNBCD",125,0)
 S BRPSTR="Benefit Related Provider Information",BRPLEN=$L(BRPSTR)
"RTN","IBCNBCD",126,0)
 S NOHSTR="   No Health Care Service Delivery data on file for this EB record.",NOHLEN=$L(NOHSTR)
"RTN","IBCNBCD",127,0)
 S NOCSTR="   No Composite Medical Procedure Information data on file for this EB record.",NOCLEN=$L(NOCSTR)
"RTN","IBCNBCD",128,0)
 S NOBSTR="   No Benefit Related Entity data on file for this EB record.",NOBLEN=$L(NOBSTR)
"RTN","IBCNBCD",129,0)
 S EBDDATA="                    eIV Eligibility/Benefit Data Group#"
"RTN","IBCNBCD",130,0)
 S NODATA=1,EX=0
"RTN","IBCNBCD",131,0)
 ;
"RTN","IBCNBCD",132,0)
 ; Get the last response and make sure it contains EB data
"RTN","IBCNBCD",133,0)
 I $G(IBBUFDA) D
"RTN","IBCNBCD",134,0)
 . S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBCD",135,0)
 . I RESPIEN S:$O(^IBCN(365,RESPIEN,2,""))'="" NODATA=0
"RTN","IBCNBCD",136,0)
 W !
"RTN","IBCNBCD",137,0)
 S XX="        *** Non-editable Patient Eligibility/Benefit data from payer ***        "
"RTN","IBCNBCD",138,0)
 D WRTFLD(XX,0,80,"B")
"RTN","IBCNBCD",139,0)
 I NODATA D  Q
"RTN","IBCNBCD",140,0)
 . W !
"RTN","IBCNBCD",141,0)
 . S XX="          *** No Patient Eligibility/Benefit data from payer found***           "
"RTN","IBCNBCD",142,0)
 . D WRTFLD(XX,0,80,"B")
"RTN","IBCNBCD",143,0)
 . D ELIGX
"RTN","IBCNBCD",144,0)
 W !
"RTN","IBCNBCD",145,0)
 S XX="                   Payer Response                  VISTA Pt.Insurance           "
"RTN","IBCNBCD",146,0)
 D WRTFLD(XX,0,80,"BU")
"RTN","IBCNBCD",147,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",148,0)
 K ^TMP("RESP. PS DATA",$J),^TMP("INS. PS DATA",$J)
"RTN","IBCNBCD",149,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",150,0)
 S IBVEBCOL=1,IDATA=""
"RTN","IBCNBCD",151,0)
 ;
"RTN","IBCNBCD",152,0)
 ; Fetch data from both eIV response and pat. insurance
"RTN","IBCNBCD",153,0)
 D INIT^IBCNES(365.02,RESPIEN_",","A",1,"RESP. EB DATA")
"RTN","IBCNBCD",154,0)
 D INIT0^IBCNES4(365.02,RESPIEN_",","RESP. PS DATA")
"RTN","IBCNBCD",155,0)
 D INIT^IBCNES(2.322,IBPOLDA_","_DFN_",","A",1,"INS. EB DATA")
"RTN","IBCNBCD",156,0)
 D INIT0^IBCNES4(2.322,IBPOLDA_","_DFN_",","INS. PS DATA",1)
"RTN","IBCNBCD",157,0)
 ;
"RTN","IBCNBCD",158,0)
 ; Check if there is any existing pat. insurance data
"RTN","IBCNBCD",159,0)
 I $E(^TMP("INS. EB DATA",$J,"DISP",2,0),1,41)="    No eIV Eligibility/Benefit Data Found" D
"RTN","IBCNBCD",160,0)
 . S NOIDATA=1
"RTN","IBCNBCD",161,0)
 ;
"RTN","IBCNBCD",162,0)
 ; Loop through response data and display it
"RTN","IBCNBCD",163,0)
 F FLDIDX=0:1:1 Q:EX  D
"RTN","IBCNBCD",164,0)
 . I +FLDIDX S FLD1=$NA(^TMP("RESP. EB DATA",$J,"DISP")),FLD2=$NA(^TMP("INS. EB DATA",$J,"DISP"))
"RTN","IBCNBCD",165,0)
 . E  S FLD1=$NA(^TMP("RESP. PS DATA",$J)),FLD2=$NA(^TMP("INS. PS DATA",$J))
"RTN","IBCNBCD",166,0)
 . S (I,I1)="",NOIDATA=0
"RTN","IBCNBCD",167,0)
 . F  S I=$O(@FLD1@(I)) Q:I=""!EX  D
"RTN","IBCNBCD",168,0)
 . . I $Y+3>IOSL D PAUSE^VALM1 W @IOF I 'Y S EX=1 Q
"RTN","IBCNBCD",169,0)
 . . S RDATA=@FLD1@(I,0)
"RTN","IBCNBCD",170,0)
 . . ;
"RTN","IBCNBCD",171,0)
 . . ; If group title, display it and quit
"RTN","IBCNBCD",172,0)
 . . I RDATA[EBDDATA D  Q
"RTN","IBCNBCD",173,0)
 . . . W !
"RTN","IBCNBCD",174,0)
 . . . D WRTFLD(RDATA,0,80,"B")
"RTN","IBCNBCD",175,0)
 . . . S IDATA=""
"RTN","IBCNBCD",176,0)
 . . ;
"RTN","IBCNBCD",177,0)
 . . ; If section title, display it and quit
"RTN","IBCNBCD",178,0)
 . . I $E(RDATA,1,EBGLEN)=EBGSTR D  Q         ; IB*2.0*549 Added if statement
"RTN","IBCNBCD",179,0)
 . . . W !!
"RTN","IBCNBCD",180,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",181,0)
 . . . S I1=$$FNDNXT(I1,EBGSTR,EBGLEN),SECEND=0
"RTN","IBCNBCD",182,0)
 . . I $E(RDATA,1,GRPLEN)=GRPSTR D  Q         ;IB*2*497
"RTN","IBCNBCD",183,0)
 . . . W !!
"RTN","IBCNBCD",184,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",185,0)
 . . . S I1=$$FNDNXT(I1,GRPSTR,GRPLEN),SECEND=0
"RTN","IBCNBCD",186,0)
 . . I $E(RDATA,1,EBILEN)=EBISTR D  Q
"RTN","IBCNBCD",187,0)
 . . . W !!
"RTN","IBCNBCD",188,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",189,0)
 . . . S I1=$$FNDNXT(I1,EBISTR,EBILEN),SECEND=0
"RTN","IBCNBCD",190,0)
 . . I $E(RDATA,1,CMPLEN)=CMPSTR D  Q
"RTN","IBCNBCD",191,0)
 . . . W !!
"RTN","IBCNBCD",192,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",193,0)
 . . . S I1=$$FNDNXT(I1,CMPSTR,CMPLEN),SECEND=0
"RTN","IBCNBCD",194,0)
 . . I $E(RDATA,1,HCSLEN)=HCSSTR D  Q
"RTN","IBCNBCD",195,0)
 . . . W !!
"RTN","IBCNBCD",196,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",197,0)
 . . . S I1=$$FNDNXT(I1,HCSSTR,HCSLEN),SECEND=0
"RTN","IBCNBCD",198,0)
 . . I $E(RDATA,1,BRELEN)=BRESTR D  Q
"RTN","IBCNBCD",199,0)
 . . . W !!
"RTN","IBCNBCD",200,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",201,0)
 . . . S I1=$$FNDNXT(I1,BRESTR,BRELEN),SECEND=0
"RTN","IBCNBCD",202,0)
 . . I $E(RDATA,1,BRPLEN)=BRPSTR D  Q
"RTN","IBCNBCD",203,0)
 . . . W !!
"RTN","IBCNBCD",204,0)
 . . . D WRTFLD(RDATA,0,80,"U")
"RTN","IBCNBCD",205,0)
 . . . S I1=$$FNDNXT(I1,BRPSTR,BRPLEN),SECEND=0
"RTN","IBCNBCD",206,0)
 . . I $E(RDATA,1,NOHLEN)=NOHSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",207,0)
 . . I $E(RDATA,1,NOCLEN)=NOCSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",208,0)
 . . I $E(RDATA,1,NOBLEN)=NOBSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",209,0)
 . . ;
"RTN","IBCNBCD",210,0)
 . . ; Build line with both eIV and pat. insurance values to compare
"RTN","IBCNBCD",211,0)
 . . I 'NOIDATA,I1'="",'SECEND S IDATA=$G(@FLD2@(I1,0)) D
"RTN","IBCNBCD",212,0)
 . . . ; if we run out of data for this section in pat. insurance
"RTN","IBCNBCD",213,0)
 . . . I $E(IDATA,1,EBILEN)=EBISTR!($E(IDATA,1,CMPLEN)=CMPSTR)!($E(IDATA,1,HCSLEN)=HCSSTR) D  Q
"RTN","IBCNBCD",214,0)
 . . . . S SECEND=1,IDATA=""
"RTN","IBCNBCD",215,0)
 . . . I $E(IDATA,1,BRELEN)=BRESTR!($E(IDATA,1,BRPLEN)=BRPSTR)!($E(IDATA,1,NOHLEN)=NOHSTR) D  Q
"RTN","IBCNBCD",216,0)
 . . . . S SECEND=1,IDATA=""
"RTN","IBCNBCD",217,0)
 . . . I $E(IDATA,1,GRPLEN)=GRPSTR!(IDATA[EBDDATA) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",218,0)
 . . . S I1=I1+1
"RTN","IBCNBCD",219,0)
 . . . I '$D(@FLD2@(I1)) S NOIDATA=1
"RTN","IBCNBCD",220,0)
 . . W !
"RTN","IBCNBCD",221,0)
 . . D WRTFLD(RDATA,0,47,""),WRTFLD(" | ",48,3,""),WRTFLD(IDATA,51,29,"")
"RTN","IBCNBCD",222,0)
 . I 'NOIDATA,'SECEND,'EX D  ; Print remaining data in second file, if any
"RTN","IBCNBCD",223,0)
 . . S I2=$O(@FLD2@(999999),-1)
"RTN","IBCNBCD",224,0)
 . . F I=I1:1:I2 S IDATA=$G(@FLD2@(I,0)) I $TR(IDATA," ")'="" D
"RTN","IBCNBCD",225,0)
 . . . W ! D WRTFLD(" | ",48,3,""),WRTFLD(IDATA,51,29,"")
"RTN","IBCNBCD",226,0)
ELIGX ;
"RTN","IBCNBCD",227,0)
 I 'EX D PAUSE^VALM1
"RTN","IBCNBCD",228,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",229,0)
 K ^TMP("RESP. PS DATA",$J),^TMP("INS. PS DATA",$J)
"RTN","IBCNBCD",230,0)
 Q
"RTN","IBCNBCD",231,0)
 ;
"RTN","IBCNBCD",232,0)
FNDNXT(IDX,STR,LEN) ; find next node in INS. EB DATA after one that starts with string STR (section title)
"RTN","IBCNBCD",233,0)
 ; IDX - current index
"RTN","IBCNBCD",234,0)
 ; STR - string to find
"RTN","IBCNBCD",235,0)
 ; LEN - length of STR
"RTN","IBCNBCD",236,0)
 ; returns index of the node found or "" if nothing is found
"RTN","IBCNBCD",237,0)
 ;
"RTN","IBCNBCD",238,0)
 N I
"RTN","IBCNBCD",239,0)
 S I=IDX F  S I=$O(@FLD2@(I)) Q:I=""  Q:($E(@FLD2@(I,0),1,LEN)=STR)
"RTN","IBCNBCD",240,0)
 I +I S I=I+1 ; if found a match for section title, return the next index
"RTN","IBCNBCD",241,0)
 Q I
"RTN","IBCNBCD",242,0)
 ;
"RTN","IBCNBCD",243,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBCD",244,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG,IBITER,IBITER1,IBITER2 S EXTDATA=""
"RTN","IBCNBCD",245,0)
 S (IBITER1,IBITER2)=0
"RTN","IBCNBCD",246,0)
 S IBITER=1
"RTN","IBCNBCD",247,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBCD",248,0)
 ;S IBITER1=$L(BUFDATA)/29
"RTN","IBCNBCD",249,0)
 ;I $P(IBITER1,".",2)>0 S IBITER1=$P(IBITER1,".",1)+1
"RTN","IBCNBCD",250,0)
 S IBITER1=$L(BUFDATA)-1\29+1
"RTN","IBCNBCD",251,0)
 I +IBEXTDA D
"RTN","IBCNBCD",252,0)
 . S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBCD",253,0)
 . ; S IBITER2=$L(EXTDATA)/29
"RTN","IBCNBCD",254,0)
 . ; I $P(IBITER2,".",2)>0 S IBITER2=$P(IBITER2,".",1)+1
"RTN","IBCNBCD",255,0)
 . S IBITER2=$L(EXTDATA)-1\29+1
"RTN","IBCNBCD",256,0)
 ;
"RTN","IBCNBCD",257,0)
 S IBITER=$S(IBITER2>IBITER1:IBITER2,IBITER1>IBITER2:IBITER1,IBITER1=IBITER2:IBITER1,1:1)
"RTN","IBCNBCD",258,0)
 S IBOVER=$S(BUFDATA'=""&(BUFDATA'=EXTDATA):"B",1:""),IBMERG=$S(EXTDATA="":"B",1:"")
"RTN","IBCNBCD",259,0)
 ;
"RTN","IBCNBCD",260,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG)
"RTN","IBCNBCD",261,0)
 Q
"RTN","IBCNBCD",262,0)
 ;
"RTN","IBCNBCD",263,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBCD",264,0)
 N IBCTR,IBSV,IBEV,IBBUFV,IBSPV
"RTN","IBCNBCD",265,0)
 S IBSV=1,IBEV=29
"RTN","IBCNBCD",266,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBCD",267,0)
 ;S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBCD",268,0)
 S LABEL=$J(LABEL,17)_"  "
"RTN","IBCNBCD",269,0)
 W !
"RTN","IBCNBCD",270,0)
 I '$G(IBITER) S IBITER=1
"RTN","IBCNBCD",271,0)
 F IBCTR=1:1:IBITER D
"RTN","IBCNBCD",272,0)
 . S IBBUFV=$E(FLD1,IBSV,IBEV)
"RTN","IBCNBCD",273,0)
 . S IBSPV=$E(FLD2,IBSV,IBEV)
"RTN","IBCNBCD",274,0)
 . I $L(IBBUFV)<29 S IBBUFV=IBBUFV_$J("",29-$L(IBBUFV))
"RTN","IBCNBCD",275,0)
 . I $L(IBSPV)<29 S IBSPV=IBSPV_$J("",29-$L(IBSPV))
"RTN","IBCNBCD",276,0)
 . D:IBCTR=1 WRTFLD(LABEL,0,19,ATTR)
"RTN","IBCNBCD",277,0)
 . D WRTFLD(IBBUFV,19,29,MERG)
"RTN","IBCNBCD",278,0)
 . D WRTFLD(" | ",48,3,ATTR),WRTFLD(IBSPV,51,29,OVER)
"RTN","IBCNBCD",279,0)
 . I IBITER>1,IBCTR'=IBITER W !
"RTN","IBCNBCD",280,0)
 . S IBSV=IBSV+29
"RTN","IBCNBCD",281,0)
 . S IBEV=IBEV+29
"RTN","IBCNBCD",282,0)
 Q
"RTN","IBCNBCD",283,0)
 ;
"RTN","IBCNBCD",284,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBCD",285,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBCD",286,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBCD",287,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBCD",288,0)
 ;
"RTN","IBCNBCD",289,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBCD",290,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBCD",291,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBCD",292,0)
 Q
"RTN","IBCNBLL")
0^44^B147621313
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438,435,506,519,528,549**;21-MAR-94;Build 54
"RTN","IBCNBLL",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
 ; DBIA# 642 for call to $$LST^DGMTU
"RTN","IBCNBLL",6,0)
 ; DBIA# 4433 for call to $$SDAPI^SDAMA301
"RTN","IBCNBLL",7,0)
 ;
"RTN","IBCNBLL",8,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",9,0)
 N VIEW,AVIEW,DFLG,IBKEYS
"RTN","IBCNBLL",10,0)
 S VIEW=6,AVIEW=0 ; default to complete view ;IB*2*506/taz changed
"RTN","IBCNBLL",11,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",12,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",13,0)
 Q
"RTN","IBCNBLL",14,0)
 ;
"RTN","IBCNBLL",15,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",16,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",17,0)
 D INIT,HDR
"RTN","IBCNBLL",18,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",19,0)
 Q
"RTN","IBCNBLL",20,0)
 ;
"RTN","IBCNBLL",21,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",22,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",23,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",24,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active" ;IB*2*506/taz Only shows Verified and Active records.
"RTN","IBCNBLL",25,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active"  ;IB*2*506/taz Only shows Verified and N/Active records.
"RTN","IBCNBLL",26,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",27,0)
 I VIEW=4 S VALM("TITLE")="Failure Buffer",VALMSG="!Unable/Send"  ;IB*2*506/taz changed
"RTN","IBCNBLL",28,0)
 I VIEW=5 S VALM("TITLE")="e-Pharmacy Buffer",VALMSG="*Verified"     ; IB*2*435
"RTN","IBCNBLL",29,0)
 I VIEW=6 S VALM("TITLE")="Complete Buffer",VALMSG=""     ; IB*2*506/taz added
"RTN","IBCNBLL",30,0)
 I VIEW=7 S VALM("TITLE")="TRICARE/CHAMPVA",VALMSG=""   ;528/baa added
"RTN","IBCNBLL",31,0)
 Q
"RTN","IBCNBLL",32,0)
 ;
"RTN","IBCNBLL",33,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",34,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",35,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",36,0)
 S IBKEYS=$$GETKEYS(DUZ) ;IB*2*506/taz user must have either IB INSURANCE EDIT or IB GROUP/PLAN EDIT in order to view entries without defined insurance company entries
"RTN","IBCNBLL",37,0)
 D BLD
"RTN","IBCNBLL",38,0)
 Q
"RTN","IBCNBLL",39,0)
 ;
"RTN","IBCNBLL",40,0)
HELP ;  list manager help
"RTN","IBCNBLL",41,0)
 D FULL^VALM1
"RTN","IBCNBLL",42,0)
 S VALMBCK="R"
"RTN","IBCNBLL",43,0)
 W @IOF
"RTN","IBCNBLL",44,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",45,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",46,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",47,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",48,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",49,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",50,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",51,0)
 W !
"RTN","IBCNBLL",52,0)
 ;D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",53,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",54,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",55,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",56,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",57,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",58,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",59,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",60,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",61,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",62,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",63,0)
 W !,"   X - e-Pharmacy"           ; IB*2*435
"RTN","IBCNBLL",64,0)
 W !,"   F - Intrafacility Insurance Update" ; IB*2*528
"RTN","IBCNBLL",65,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",66,0)
 ;
"RTN","IBCNBLL",67,0)
 I VIEW'=5 D     ; IB*2*435
"RTN","IBCNBLL",68,0)
 . W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",69,0)
 . W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",70,0)
 . Q
"RTN","IBCNBLL",71,0)
 ;
"RTN","IBCNBLL",72,0)
 I VIEW=1 D
"RTN","IBCNBLL",73,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",74,0)
 .W !,"      $ - Escalated active policy."
"RTN","IBCNBLL",75,0)
 .W !,"      * - Previously an active policy."
"RTN","IBCNBLL",76,0)
 .Q
"RTN","IBCNBLL",77,0)
 I VIEW=2 D
"RTN","IBCNBLL",78,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",79,0)
 .W !,"      * - Previously an not active policy."
"RTN","IBCNBLL",80,0)
 .Q
"RTN","IBCNBLL",81,0)
 I $F(",3,6,7,",VIEW) D   ;528/baa
"RTN","IBCNBLL",82,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",83,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",84,0)
 .W !,"      $ - Escalated Active policy."
"RTN","IBCNBLL",85,0)
 .W !,"      * - Previously either an active or not active policy."
"RTN","IBCNBLL",86,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",87,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",88,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",89,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",90,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",91,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",92,0)
 .Q
"RTN","IBCNBLL",93,0)
 I VIEW=4 D
"RTN","IBCNBLL",94,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",95,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",96,0)
 .Q
"RTN","IBCNBLL",97,0)
 ;
"RTN","IBCNBLL",98,0)
 I VIEW=5 D      ; IB*2*435
"RTN","IBCNBLL",99,0)
 . W !,"      e-Pharmacy buffer entries are not applicable for e-IV processing."
"RTN","IBCNBLL",100,0)
 . Q
"RTN","IBCNBLL",101,0)
 ;
"RTN","IBCNBLL",102,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",103,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",104,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",105,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",106,0)
 W !
"RTN","IBCNBLL",107,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",108,0)
 W !!
"RTN","IBCNBLL",109,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",110,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",111,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",112,0)
 W !!
"RTN","IBCNBLL",113,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",114,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",115,0)
 Q
"RTN","IBCNBLL",116,0)
 ;
"RTN","IBCNBLL",117,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",118,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",119,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",120,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",121,0)
 Q
"RTN","IBCNBLL",122,0)
 ;
"RTN","IBCNBLL",123,0)
BLD ;  build screen display
"RTN","IBCNBLL",124,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",125,0)
 ;
"RTN","IBCNBLL",126,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",127,0)
 ;
"RTN","IBCNBLL",128,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",129,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",130,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",131,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",132,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",133,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG) I IBLINE="" S IBCNT=IBCNT-1 Q  ; IB*2*506/taz If line is null stop processing this entry.
"RTN","IBCNBLL",134,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",135,0)
 ;
"RTN","IBCNBLL",136,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",137,0)
 Q
"RTN","IBCNBLL",138,0)
 ;
"RTN","IBCNBLL",139,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",140,0)
 N DFN,IB0,IB20,IB40,IB60,IBLINE,IBMTS,IBY,MCFLAG,VA,VADM,VAERR,VAIN,X,Y
"RTN","IBCNBLL",141,0)
 S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",142,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40)),MCFLAG=$$GTMFLG(IBBUFDA)  ;IB*2.0*549
"RTN","IBCNBLL",143,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",144,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",145,0)
 ;
"RTN","IBCNBLL",146,0)
 ;IB*2.0*549 - Replaced the following line of code:
"RTN","IBCNBLL",147,0)
 ;I 'IBKEYS,'$$ACTIVE(DFN) G BLDLNQ  ;IB*2*506/taz Only allow active insurance for users not holding IB INSURANCE EDIT or IB GROUP/PLAN EDIT keys
"RTN","IBCNBLL",148,0)
 ; With the following code that will determine if the list item is Medicare (+MCFLAG,) then include it on
"RTN","IBCNBLL",149,0)
 ; the list even if the user doesn't have the security keys and if the patient has ACTIVE or INACTIVE policies.
"RTN","IBCNBLL",150,0)
 I 'IBKEYS,'$$ACTIVE(DFN),'MCFLAG G BLDLNQ  ;IB*2.0*549
"RTN","IBCNBLL",151,0)
 ;
"RTN","IBCNBLL",152,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",153,0)
 ;
"RTN","IBCNBLL",154,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",155,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",156,0)
 ;
"RTN","IBCNBLL",157,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",158,0)
 I IBY="*" S IBY=" "  ;528/baa
"RTN","IBCNBLL",159,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",160,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",161,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",162,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",163,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",164,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",165,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",166,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",167,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",168,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",169,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",170,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",171,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",172,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",173,0)
BLDLNQ ; IB*2*506/taz Tag added
"RTN","IBCNBLL",174,0)
 Q IBLINE
"RTN","IBCNBLL",175,0)
 ;
"RTN","IBCNBLL",176,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",177,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",178,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",179,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",180,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",181,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",182,0)
 Q
"RTN","IBCNBLL",183,0)
 ;
"RTN","IBCNBLL",184,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",185,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",186,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,X,Y
"RTN","IBCNBLL",187,0)
 S IBCNT=0
"RTN","IBCNBLL",188,0)
 ;
"RTN","IBCNBLL",189,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",190,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",191,0)
 ;
"RTN","IBCNBLL",192,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",193,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",194,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",195,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",196,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",197,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",198,0)
 ..;
"RTN","IBCNBLL",199,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",200,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",201,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",202,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",203,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",204,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",205,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",206,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",207,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",208,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",209,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",210,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",211,0)
 ..;
"RTN","IBCNBLL",212,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",213,0)
 ..;
"RTN","IBCNBLL",214,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",215,0)
 ..; get future appointments
"RTN","IBCNBLL",216,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",217,0)
 ..S DFLG="" ;,APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag ;IB*2*506 appointment data removed.
"RTN","IBCNBLL",218,0)
 ..I $$INCL(VIEW,SYM,IB0) S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",219,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",220,0)
 ..Q
"RTN","IBCNBLL",221,0)
 .Q
"RTN","IBCNBLL",222,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",223,0)
 Q
"RTN","IBCNBLL",224,0)
 ;
"RTN","IBCNBLL",225,0)
INCL(VIEW,SYM,IB0) ;
"RTN","IBCNBLL",226,0)
 N INCL,IENS,IBEBI,MCFLAG
"RTN","IBCNBLL",227,0)
 S INCL=0
"RTN","IBCNBLL",228,0)
 ; IB*2*549 - Added 'MCFLAG to allow Medicare in the following line.
"RTN","IBCNBLL",229,0)
 S MCFLAG=$$GTMFLG(IBBUFDA)
"RTN","IBCNBLL",230,0)
 I 'IBKEYS,'MCFLAG,(SYM'="+") G INCLQ ; If users don't have required keys, they only see current Positive Entries.
"RTN","IBCNBLL",231,0)
 I VIEW=6 S INCL=1 G INCLQ  ;Include Everything  (Complete view)
"RTN","IBCNBLL",232,0)
 I VIEW=7,((INAME["TRICARE")!(INAME["CHAMPVA")) S INCL=1 G INCLQ  ; Tricare/Champva;528/baa 
"RTN","IBCNBLL",233,0)
 I VIEW=5,$P(IB0,U,17) S INCL=1 G INCLQ  ;Only e-Pharmacy on e-Pharmacy view (IB*2*435)
"RTN","IBCNBLL",234,0)
 I $P(IB0,U,17) G INCLQ  ;Exclude e-Pharmacy (IB*2*435)
"RTN","IBCNBLL",235,0)
 I VIEW=3,MCFLAG S INCL=1 G INCLQ ;Only Medicare View
"RTN","IBCNBLL",236,0)
 I MCFLAG G INCLQ  ;Exclude Medicare from Positive, Negative and Failure Views
"RTN","IBCNBLL",237,0)
 I VIEW=4,(SYM="!") S INCL=1 G INCLQ  ;Only failures on Failure view
"RTN","IBCNBLL",238,0)
 I VIEW=1,((SYM="+")!(SYM="$")) S INCL=1 G INCLQ  ;Positive View
"RTN","IBCNBLL",239,0)
 I VIEW=2,(SYM="-") S INCL=1 G INCLQ  ;Negative View
"RTN","IBCNBLL",240,0)
 I SYM="*" D  G INCLQ
"RTN","IBCNBLL",241,0)
 . ;find history in Response file for verified entries.
"RTN","IBCNBLL",242,0)
 . I $$GET1^DIQ(355.33,IBBUFDA,.15)="" S:(VIEW=1) INCL=1 Q  ;IIV PROCESSED DATE field is empty entry is positive
"RTN","IBCNBLL",243,0)
 . S IENS="1,"_$O(^IBCN(365,"AF",IBBUFDA,""))_","
"RTN","IBCNBLL",244,0)
 . ;the following line of code is necessary to check for both "eIV Eligibility Determination" and "IIV Eligibility Determination" (IB*2.0*506)
"RTN","IBCNBLL",245,0)
 . I $$GET1^DIQ(365.02,IENS,.06)["IV Eligibility Determination" Q
"RTN","IBCNBLL",246,0)
 . S IBEBI=$$GET1^DIQ(365.02,IENS,.02)  ;Eligibility/Benefits Info
"RTN","IBCNBLL",247,0)
 . I IBEBI=1 S:(VIEW=1) INCL=1 Q
"RTN","IBCNBLL",248,0)
 . I VIEW=2 S INCL=1 Q
"RTN","IBCNBLL",249,0)
INCLQ ;
"RTN","IBCNBLL",250,0)
 Q INCL
"RTN","IBCNBLL",251,0)
 ;
"RTN","IBCNBLL",252,0)
DATE(X) ;
"RTN","IBCNBLL",253,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",254,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",255,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",256,0)
 ;
"RTN","IBCNBLL",257,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",258,0)
 NEW IB0,SYM
"RTN","IBCNBLL",259,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",260,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",261,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",262,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",263,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",264,0)
 Q SYM
"RTN","IBCNBLL",265,0)
 ;
"RTN","IBCNBLL",266,0)
 ;
"RTN","IBCNBLL",267,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",268,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",269,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",270,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",271,0)
 ;
"RTN","IBCNBLL",272,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",273,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",274,0)
 ;
"RTN","IBCNBLL",275,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",276,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",277,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",278,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",279,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",280,0)
 ;
"RTN","IBCNBLL",281,0)
 ; if the action is EDITED then the line for the buffer entry is recompiled and the updated line is set into 
"RTN","IBCNBLL",282,0)
 ; the display array
"RTN","IBCNBLL",283,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",284,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",285,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",286,0)
 Q
"RTN","IBCNBLL",287,0)
 ;
"RTN","IBCNBLL",288,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",289,0)
 N CODSTR,I,SRCSTR,CODE
"RTN","IBCNBLL",290,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS^eRxEL^IIU"
"RTN","IBCNBLL",291,0)
 S CODSTR="I^D^V^P^E^H^M^R^C^X^F"
"RTN","IBCNBLL",292,0)
 S CODE=""
"RTN","IBCNBLL",293,0)
 I $G(SRC)'="" F I=1:1:11 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",294,0)
 Q CODE
"RTN","IBCNBLL",295,0)
 ;
"RTN","IBCNBLL",296,0)
GETKEYS(DUZ) ; 
"RTN","IBCNBLL",297,0)
 ;Make sure that user has the INSURANCE EDIT key and/or the GROUP/PLAN EDIT key.  User
"RTN","IBCNBLL",298,0)
 ;must have either key in order to see non_Positive Entries.
"RTN","IBCNBLL",299,0)
 N KEY1,KEY2
"RTN","IBCNBLL",300,0)
 S KEY1=$O(^DIC(19.1,"B","IB INSURANCE COMPANY EDIT","")) I KEY1 S KEY1=$D(^VA(200,DUZ,51,KEY1))
"RTN","IBCNBLL",301,0)
 S KEY2=$O(^DIC(19.1,"B","IB GROUP PLAN EDIT","")) I KEY2 S KEY2=$D(^VA(200,DUZ,51,KEY2))
"RTN","IBCNBLL",302,0)
 Q KEY1!KEY2
"RTN","IBCNBLL",303,0)
 ;
"RTN","IBCNBLL",304,0)
ACTIVE(DFN) ;Check for active insurance
"RTN","IBCNBLL",305,0)
 N IBINSCO
"RTN","IBCNBLL",306,0)
 D ALL^IBCNS1(DFN,"IBINSCO",3,DT,0)  ;IB*2.0*519 allow WNRs and Indemnity plans
"RTN","IBCNBLL",307,0)
 Q +$G(IBINSCO(0))
"RTN","IBCNBLL",308,0)
 ;
"RTN","IBCNBLL",309,0)
GTMFLG(IBBUFDA) ;Check if Medicare
"RTN","IBCNBLL",310,0)
 ; IB*2.0*549 Added method
"RTN","IBCNBLL",311,0)
 N MWNRIEN,MWNRFLG
"RTN","IBCNBLL",312,0)
 S MWNRFLG=0
"RTN","IBCNBLL",313,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",314,0)
 S MWNRFLG=0
"RTN","IBCNBLL",315,0)
 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",316,0)
 Q MWNRFLG
"RTN","IBCNCH")
0^4^B89930576
"RTN","IBCNCH",1,0)
IBCNCH ;ALB/FA - PATIENT POLICY COMMENT HISTORY ;05-MAR-2015
"RTN","IBCNCH",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNCH",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNCH",4,0)
 ;
"RTN","IBCNCH",5,0)
EN(DFN,IBIIEN,MODE) ;EP 
"RTN","IBCNCH",6,0)
 ; Main entry point
"RTN","IBCNCH",7,0)
 ; Input:   DFN     - IEN of the patient
"RTN","IBCNCH",8,0)
 ;          IBIIEN  - IEN of patient policy multiple (^DPT(DFN,.312,IBIIEN)
"RTN","IBCNCH",9,0)
 ;          MODE    - 1 - User is allowed to Add/Edit/Delete/View/Search comments
"RTN","IBCNCH",10,0)
 ;                    0 - User is allowed to View/Search comments
"RTN","IBCNCH",11,0)
 K VALMQUIT
"RTN","IBCNCH",12,0)
 I $G(DFN)="" D  Q
"RTN","IBCNCH",13,0)
 . W !!,*7,"Patient is not identified."
"RTN","IBCNCH",14,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",15,0)
 I +$G(IBIIEN)=0 D  Q
"RTN","IBCNCH",16,0)
 . W !!,*7,"Patient Policy is not identified."
"RTN","IBCNCH",17,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",18,0)
 S:'$D(MODE) MODE=0
"RTN","IBCNCH",19,0)
 ;
"RTN","IBCNCH",20,0)
 I MODE=1 D EN^VALM("IBCNCH POLICY COMMENT HISTORY") Q
"RTN","IBCNCH",21,0)
 D EN^VALM("IBCNCH POLICY COMMENT VIEW")
"RTN","IBCNCH",22,0)
 Q
"RTN","IBCNCH",23,0)
 ;
"RTN","IBCNCH",24,0)
HDR ;EP
"RTN","IBCNCH",25,0)
 ; Build the listman template header information
"RTN","IBCNCH",26,0)
 ; Input:   DFN     - IEN of the patient
"RTN","IBCNCH",27,0)
 ;          IBPPOL  - ^DPT(DFN,.312,PIEN,0) Where PIEN is the IEN of the
"RTN","IBCNCH",28,0)
 ;                    selected patient policy
"RTN","IBCNCH",29,0)
 N WW,XX,YY,ZZ
"RTN","IBCNCH",30,0)
 S XX=$E($P(^DPT(DFN,0),"^",1),1,20)_"  "_$P($$PT^IBEFUNC(DFN),"^",2)
"RTN","IBCNCH",31,0)
 S ZZ=$$GET1^DIQ(2,DFN_",",.03),XX=XX_"  "_ZZ
"RTN","IBCNCH",32,0)
 S VALMHDR(1)="Policy Comment History for: "_XX
"RTN","IBCNCH",33,0)
 S ZZ=$G(^DPT(DFN,.312,+$P(IBPPOL,"^",4),0))
"RTN","IBCNCH",34,0)
 S WW=$P($G(^IBA(355.3,+$P(ZZ,"^",18),0)),"^",11)
"RTN","IBCNCH",35,0)
 S YY=$E($P($G(^DIC(36,+ZZ,0)),"^",1),1,20)_" Insurance Company"
"RTN","IBCNCH",36,0)
 S XX="** Plan Currently "_$S(WW:"Ina",1:"A")_"ctive **"
"RTN","IBCNCH",37,0)
 S VALMHDR(2)=$$SETSTR^VALM1(XX,YY,48,29)
"RTN","IBCNCH",38,0)
 Q
"RTN","IBCNCH",39,0)
 ;
"RTN","IBCNCH",40,0)
INIT ;EP
"RTN","IBCNCH",41,0)
 ; Initialize the listman template
"RTN","IBCNCH",42,0)
 ; Input:   DFN                 - IEN of the patient
"RTN","IBCNCH",43,0)
 ;          IBIIEN              - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",44,0)
 ;                                multiple IEN of the selected patient policy
"RTN","IBCNCH",45,0)
 ; Output:  ^TMP("IBCNCH",$J)   - Body lines to display for specified template
"RTN","IBCNCH",46,0)
 ;          ^TMP($J,"IBCNCHIX") - Index of displayed comments (see GETCOMS)
"RTN","IBCNCH",47,0)
 K ^TMP("IBCNCH",$J),^TMP($J,"IBCNCHIX")
"RTN","IBCNCH",48,0)
 D BLD^IBCNCH2(DFN,IBIIEN)
"RTN","IBCNCH",49,0)
 Q
"RTN","IBCNCH",50,0)
 ;
"RTN","IBCNCH",51,0)
ADDCOM  ;EP
"RTN","IBCNCH",52,0)
 ; Protocol action to Add a new Patient Policy Comment
"RTN","IBCNCH",53,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH",54,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",55,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",56,0)
 N COMDT,COMIEN,DA,DIE,DR,DTOUT,XX
"RTN","IBCNCH",57,0)
 D FULL^VALM1
"RTN","IBCNCH",58,0)
 S VALMBCK="R"
"RTN","IBCNCH",59,0)
 ;
"RTN","IBCNCH",60,0)
 ; If last comment entered today by this user, edit it instead of adding
"RTN","IBCNCH",61,0)
 ; a new one
"RTN","IBCNCH",62,0)
 S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",""),-1)
"RTN","IBCNCH",63,0)
 I COMDT'="" D
"RTN","IBCNCH",64,0)
 . S COMIEN=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,""))
"RTN","IBCNCH",65,0)
 . S XX=$$GET1^DIQ(2.342,COMIEN_","_IBIIEN_","_DFN_",",.02,"I")
"RTN","IBCNCH",66,0)
 I COMDT'="",XX=DUZ,$P(COMDT,".",1)=$P($$NOW^XLFDT(),".",1) D  Q
"RTN","IBCNCH",67,0)
 . D EDITCOM(DFN,IBIIEN,COMIEN,0)
"RTN","IBCNCH",68,0)
 ;
"RTN","IBCNCH",69,0)
 ; Lock Adding of comments for this patient and policy
"RTN","IBCNCH",70,0)
 I '$$LOCKN(DFN,IBIIEN) D  Q
"RTN","IBCNCH",71,0)
 . W !!,*7,"Someone else is adding a comment for this patient and policy."
"RTN","IBCNCH",72,0)
 . W !,"Try again later."
"RTN","IBCNCH",73,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",74,0)
 S COMIEN=$$NEXTCOM(DFN,IBIIEN)             ; Get next Comment IEN
"RTN","IBCNCH",75,0)
 ;
"RTN","IBCNCH",76,0)
 ; Let the user add the comment
"RTN","IBCNCH",77,0)
 S DIE="^DPT(DFN,.312,IBIIEN,13,"
"RTN","IBCNCH",78,0)
 S DA=COMIEN,DA(1)=IBIIEN,DA(2)=DFN
"RTN","IBCNCH",79,0)
 S DR=".04Person Contacted;.05Contact Person Phone;.07Contact Method"
"RTN","IBCNCH",80,0)
 S DR=DR_";.06Call Reference Number;.08Authorization Number;.03Comment"
"RTN","IBCNCH",81,0)
 D ^DIE
"RTN","IBCNCH",82,0)
 ;
"RTN","IBCNCH",83,0)
 ; Check to make sure a comment was actually entered
"RTN","IBCNCH",84,0)
 I $$DELCOM(DFN,IBIIEN,COMIEN) D  Q
"RTN","IBCNCH",85,0)
 . W !!,*7,"No Comment was entered.  Nothing Filed"
"RTN","IBCNCH",86,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",87,0)
 . D UNLOCKN(DFN,IBIIEN)
"RTN","IBCNCH",88,0)
 ;
"RTN","IBCNCH",89,0)
 D UNLOCKN(DFN,IBIIEN)
"RTN","IBCNCH",90,0)
 D INIT                                     ; Rebuild the list
"RTN","IBCNCH",91,0)
 Q
"RTN","IBCNCH",92,0)
 ;
"RTN","IBCNCH",93,0)
NEXTCOM(DFN,IBIIEN) ; Get the next available Patient Policy Comment IEN for
"RTN","IBCNCH",94,0)
 ; the selected Patient and Policy
"RTN","IBCNCH",95,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH",96,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",97,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",98,0)
 ;          DUZ     - IEN of the user creating the comment
"RTN","IBCNCH",99,0)
 ; Returns: IEN number of newly created Patient Policy Comment
"RTN","IBCNCH",100,0)
 N ERRMSG,FDA,IENS,NOW,RETIEN
"RTN","IBCNCH",101,0)
 S NOW=$$NOW^XLFDT()
"RTN","IBCNCH",102,0)
 S IENS="+1,"_IBIIEN_","_DFN_","
"RTN","IBCNCH",103,0)
 S FDA(2.342,IENS,.01)=NOW                      ; Date/Time of the comment
"RTN","IBCNCH",104,0)
 S FDA(2.342,IENS,.02)=DUZ                      ; User adding the comment
"RTN","IBCNCH",105,0)
 D UPDATE^DIE("","FDA","RETIEN","ERRMSG")       ; File new policy comment shell
"RTN","IBCNCH",106,0)
 Q RETIEN(1)
"RTN","IBCNCH",107,0)
 ;
"RTN","IBCNCH",108,0)
LOCKN(DFN,IBIIEN) ; Lock Adding of comments for a specified patient
"RTN","IBCNCH",109,0)
 ; and policy
"RTN","IBCNCH",110,0)
 ; Input:   DFN     - IEN of the Patient a comment will be added for
"RTN","IBCNCH",111,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",112,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",113,0)
 ; Returns: 1 - Lock was obtained, 0 otherwise
"RTN","IBCNCH",114,0)
 L +^POLCOM(DFN,IBIIEN):3
"RTN","IBCNCH",115,0)
 I '$T Q 0
"RTN","IBCNCH",116,0)
 Q 1
"RTN","IBCNCH",117,0)
 ;
"RTN","IBCNCH",118,0)
UNLOCKN(DFN,IBIIEN) ; Unlock Adding of comments for a specified patient
"RTN","IBCNCH",119,0)
 ; Input:   DFN     - IEN of the Patient a comment will be added for
"RTN","IBCNCH",120,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",121,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",122,0)
 L -^POLCCOM(DFN,IBIIEN)
"RTN","IBCNCH",123,0)
 Q
"RTN","IBCNCH",124,0)
 ;
"RTN","IBCNCH",125,0)
DELETE(COMIN)  ;EP
"RTN","IBCNCH",126,0)
 ; Protocol action to Delete a Patient Policy Comment
"RTN","IBCNCH",127,0)
 ; Input:   COMIN   - IEN of the selected Patient Policy Comment
"RTN","IBCNCH",128,0)
 ;                    Optional - Only sent when called from the expanded
"RTN","IBCNCH",129,0)
 ;                               comment listman template.
"RTN","IBCNCH",130,0)
 ;          DFN     - IEN of the selected Patient
"RTN","IBCNCH",131,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",132,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",133,0)
 N COMIEN,DA,DIK,FROMEE
"RTN","IBCNCH",134,0)
 S VALMBCK="R"
"RTN","IBCNCH",135,0)
 D FULL^VALM1
"RTN","IBCNCH",136,0)
 S COMIEN=$S($D(COMIN):COMIN,1:"")
"RTN","IBCNCH",137,0)
 S FROMEE=$S(COMIEN'="":1,1:0)
"RTN","IBCNCH",138,0)
 S:COMIEN="" COMIEN=$$SELCOM(1,"Select Comment to delete","","IBCNCHIX")
"RTN","IBCNCH",139,0)
 Q:COMIEN=""
"RTN","IBCNCH",140,0)
 ;
"RTN","IBCNCH",141,0)
 ; Lock Deletion of this patient policy comment
"RTN","IBCNCH",142,0)
 I '$$LOCKC(DFN,IBIIEN,COMIEN) D  Q
"RTN","IBCNCH",143,0)
 . W !!,*7,"Someone is editing or deleting this Patient Policy Comment."
"RTN","IBCNCH",144,0)
 . W !,"Try again later."
"RTN","IBCNCH",145,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",146,0)
 ;
"RTN","IBCNCH",147,0)
 ; Ok to delete this comment?
"RTN","IBCNCH",148,0)
 S XX=$$OK2EDIT(DFN,IBIIEN,COMIEN,"Delete")
"RTN","IBCNCH",149,0)
 I +XX=-1 D  Q                              ; Unable to delete
"RTN","IBCNCH",150,0)
 . D UNLOCKC(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",151,0)
 . W !,*7,$P(XX,"^",2)
"RTN","IBCNCH",152,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",153,0)
 ;
"RTN","IBCNCH",154,0)
 ; Give final Warning
"RTN","IBCNCH",155,0)
 I '$$ASKYN("Are you Sure you want to Delete this Comment") D  Q
"RTN","IBCNCH",156,0)
 . D UNLOCKC(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",157,0)
 ;
"RTN","IBCNCH",158,0)
 S DA=COMIEN,DA(1)=IBIIEN,DA(2)=DFN
"RTN","IBCNCH",159,0)
 S DIK="^DPT(DA(2),.312,DA(1),13,"
"RTN","IBCNCH",160,0)
 D ^DIK                                     ; Delete the Patient Policy Comment
"RTN","IBCNCH",161,0)
 D UNLOCKC(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",162,0)
 I FROMEE=1 S VALMBCK="Q" Q
"RTN","IBCNCH",163,0)
 D INIT                                     ; Rebuild the list
"RTN","IBCNCH",164,0)
 Q
"RTN","IBCNCH",165,0)
 ;
"RTN","IBCNCH",166,0)
ASKYN(PROMPT,DEFAULT)   ; Ask a yes/no question
"RTN","IBCNCH",167,0)
 ; Input:   PROMPT      - Question to be asked
"RTN","IBCNCH",168,0)
 ;          DEFAULT     - Default Answer
"RTN","IBCNCH",169,0)
 ;                        1 - YES, 0 - NO
"RTN","IBCNCH",170,0)
 ;                        Optional, defaults to 0
"RTN","IBCNCH",171,0)
 ; Returns: 1 - User answered YES, 0 otherwise
"RTN","IBCNCH",172,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNCH",173,0)
 S:$G(DEFAULT)'=1 DEFAULT=0
"RTN","IBCNCH",174,0)
 S DIR(0)="Y",DIR("A")=PROMPT
"RTN","IBCNCH",175,0)
 S DIR("B")=$S(DEFAULT:"YES",1:"NO")
"RTN","IBCNCH",176,0)
 D ^DIR
"RTN","IBCNCH",177,0)
 Q Y
"RTN","IBCNCH",178,0)
 ;  
"RTN","IBCNCH",179,0)
EDIT(COMIN)  ;EP
"RTN","IBCNCH",180,0)
 ; Protocol action to Edit a Patient Policy Comment Fields
"RTN","IBCNCH",181,0)
 ; Input:   COMIN   - IEN of the selected Patient Policy Comment
"RTN","IBCNCH",182,0)
 ;                    Optional - Only sent when called from the expanded
"RTN","IBCNCH",183,0)
 ;                               comment listman template.
"RTN","IBCNCH",184,0)
 ;          DFN     - IEN of the selected Patient
"RTN","IBCNCH",185,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",186,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",187,0)
 N COMCNT,COMIEN,DA,DIC,DIE,DO,DR,DTOUT,EDT,FROMEE,LINE,SRCHTXT,X,XX,Y
"RTN","IBCNCH",188,0)
 S COMIEN=$S($D(COMIN):COMIN,1:"")
"RTN","IBCNCH",189,0)
 S FROMEE=$S(COMIEN'="":1,1:0)
"RTN","IBCNCH",190,0)
 S VALMBCK="R"
"RTN","IBCNCH",191,0)
 D FULL^VALM1
"RTN","IBCNCH",192,0)
 S:COMIEN="" COMIEN=$$SELCOM(1,"Select Comment to edit",.COMCNT,"IBCNCHIX")
"RTN","IBCNCH",193,0)
 Q:COMIEN=""
"RTN","IBCNCH",194,0)
 D EDITCOM(DFN,IBIIEN,COMIEN,FROMEE)
"RTN","IBCNCH",195,0)
 Q
"RTN","IBCNCH",196,0)
 ;
"RTN","IBCNCH",197,0)
EDITCOM(DFN,IBIIEN,COMIEN,FROMEE) ; Edit the selected comment
"RTN","IBCNCH",198,0)
 ; Called from EDIT and ADDCOM
"RTN","IBCNCH",199,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH",200,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",201,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",202,0)
 ;          COMIEN  - IEN of the comment being edited
"RTN","IBCNCH",203,0)
 ;          FROMEE  - 1 edit from Expand Entry, 0 otherwise
"RTN","IBCNCH",204,0)
 ;                    Optional, defaults to 0
"RTN","IBCNCH",205,0)
 S:'$D(FROMEE) FROMEE=0
"RTN","IBCNCH",206,0)
 ;
"RTN","IBCNCH",207,0)
 ; Lock Editing of this patient policy comment
"RTN","IBCNCH",208,0)
 I '$$LOCKC(DFN,IBIIEN,COMIEN) D  Q
"RTN","IBCNCH",209,0)
 . W !!,*7,"Someone else is editing or deleting this Patient Policy Comment."
"RTN","IBCNCH",210,0)
 . W !,"Try again later."
"RTN","IBCNCH",211,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",212,0)
 ;
"RTN","IBCNCH",213,0)
 ; Ok to edit this comment?
"RTN","IBCNCH",214,0)
 S XX=$$OK2EDIT(DFN,IBIIEN,COMIEN,"Edit")
"RTN","IBCNCH",215,0)
 I +XX=-1 D  Q                              ; Unable to edit
"RTN","IBCNCH",216,0)
 . D UNLOCKC(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",217,0)
 . W !,*7,$P(XX,"^",2)
"RTN","IBCNCH",218,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",219,0)
 ;
"RTN","IBCNCH",220,0)
 ; Let the user edit the comment
"RTN","IBCNCH",221,0)
 S EDT=$$NOW^XLFDT()
"RTN","IBCNCH",222,0)
 S DIE="^DPT(DFN,.312,IBIIEN,13,"
"RTN","IBCNCH",223,0)
 S DA=COMIEN,DA(1)=IBIIEN,DA(2)=DFN
"RTN","IBCNCH",224,0)
 S DR=".01///"_EDT_";.02///"_DUZ_";.04Person Contacted;.05Contact Person Phone"
"RTN","IBCNCH",225,0)
 S DR=DR_";.07Contact Method;.06Call Reference Number;.08Authorization Number"
"RTN","IBCNCH",226,0)
 S DR=DR_";.03Comment"
"RTN","IBCNCH",227,0)
 D ^DIE
"RTN","IBCNCH",228,0)
 D UNLOCKC(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",229,0)
 I FROMEE D INIT^IBCNCH3 Q
"RTN","IBCNCH",230,0)
 D INIT                                     ; Rebuild the list
"RTN","IBCNCH",231,0)
 Q
"RTN","IBCNCH",232,0)
 ;
"RTN","IBCNCH",233,0)
OK2EDIT(DFN,IBIIEN,COMIEN,WHICH) ; Check to see if it's ok to Edit/Delete the
"RTN","IBCNCH",234,0)
 ; selected Patient Policy Comment
"RTN","IBCNCH",235,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH",236,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",237,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",238,0)
 ;          COMIEN  - IEN of the selected Patient Policy comment
"RTN","IBCNCH",239,0)
 ;          WHICH   - 'Delete' when called from DELETE
"RTN","IBCNCH",240,0)
 ;                    'Edit' whe called fomr EDIT
"RTN","IBCNCH",241,0)
 ; Returns: 1 - OK to edit or delete, -1^Error Message otherwise
"RTN","IBCNCH",242,0)
 N COMDT,OK,TDT,XX
"RTN","IBCNCH",243,0)
 S OK=1                                         ; Assume it's OK
"RTN","IBCNCH",244,0)
 ;
"RTN","IBCNCH",245,0)
 ; Make sure the selected comment is the latest comment
"RTN","IBCNCH",246,0)
 S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",""),-1)
"RTN","IBCNCH",247,0)
 S XX=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,""))
"RTN","IBCNCH",248,0)
 I COMIEN'=XX D  Q OK
"RTN","IBCNCH",249,0)
 . S OK="-1^Unable to "_WHICH_". Selected comment is not the latest comment."
"RTN","IBCNCH",250,0)
 ;
"RTN","IBCNCH",251,0)
 ; Make sure the user trying to edit or delete is the user who entered the
"RTN","IBCNCH",252,0)
 ; comment
"RTN","IBCNCH",253,0)
 S XX=$$GET1^DIQ(2.342,COMIEN_","_IBIIEN_","_DFN_",",.02,"I")
"RTN","IBCNCH",254,0)
 I XX'=DUZ D  Q OK
"RTN","IBCNCH",255,0)
 . S OK="-1^Unable to "_WHICH_". Selected comment was entered by a different user."
"RTN","IBCNCH",256,0)
 ;
"RTN","IBCNCH",257,0)
 ; Make sure today's date is the same as when the comment was last edited
"RTN","IBCNCH",258,0)
 ; comment
"RTN","IBCNCH",259,0)
 S XX=$$GET1^DIQ(2.342,COMIEN_","_IBIIEN_","_DFN_",",.01,"I")
"RTN","IBCNCH",260,0)
 S XX=$P(XX,".",1)
"RTN","IBCNCH",261,0)
 S TDT=$$NOW^XLFDT(),TDT=$P(TDT,".",1)
"RTN","IBCNCH",262,0)
 I XX'=TDT D  Q OK
"RTN","IBCNCH",263,0)
 . S OK="-1^Unable to "_WHICH_". Selected comment is outside the "_WHICH_" window."
"RTN","IBCNCH",264,0)
 Q OK
"RTN","IBCNCH",265,0)
 ;
"RTN","IBCNCH",266,0)
LOCKC(DFN,IBIIEN,COMIEN) ; Lock Editing of a selected Patient Policy Comment
"RTN","IBCNCH",267,0)
 ; Input:   DFN     - IEN of the Patient a comment will be added for
"RTN","IBCNCH",268,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",269,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",270,0)
 ;          COMIEN  - IEN of the Patient Policy comment being edited
"RTN","IBCNCH",271,0)
 ; Returns: 1 - Lock was obtained, 0 otherwise
"RTN","IBCNCH",272,0)
 L +^POLCOM(DFN,IBIIEN,COMIEN):3
"RTN","IBCNCH",273,0)
 I '$T Q 0
"RTN","IBCNCH",274,0)
 Q 1
"RTN","IBCNCH",275,0)
 ;
"RTN","IBCNCH",276,0)
UNLOCKC(DFN,IBIIEN,COMIEN) ; Unlock Editing of a selected Patient Policy Comment
"RTN","IBCNCH",277,0)
 ; Input:   DFN     - IEN of the Patient a comment will be added for
"RTN","IBCNCH",278,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH",279,0)
 ;                    multiple IEN of the selected patient policy
"RTN","IBCNCH",280,0)
 ;          COMIEN  - IEN of the Patient Policy comment being edited
"RTN","IBCNCH",281,0)
 L -^POLCCOM(DFN,IBIIEN,COMIEN)
"RTN","IBCNCH",282,0)
 Q
"RTN","IBCNCH",283,0)
 ;
"RTN","IBCNCH",284,0)
HELP ;EP
"RTN","IBCNCH",285,0)
 ; Display the listman template help
"RTN","IBCNCH",286,0)
 N X
"RTN","IBCNCH",287,0)
 S X="?"
"RTN","IBCNCH",288,0)
 D DISP^XQORM1
"RTN","IBCNCH",289,0)
 W !!
"RTN","IBCNCH",290,0)
 Q
"RTN","IBCNCH",291,0)
 ;
"RTN","IBCNCH",292,0)
SELCOM(FULL,PROMPT,COMCNT,WLIST)    ;EP
"RTN","IBCNCH",293,0)
 ; Select Entry(s) to perform an action upon
"RTN","IBCNCH",294,0)
 ; Input:   FULL                - 1 - full screen mode, 0 otherwise
"RTN","IBCNCH",295,0)
 ;          PROMPT              - Prompt to be displayed to the user
"RTN","IBCNCH",296,0)
 ;          WLIST               - Worklist, the user is selecting from
"RTN","IBCNCH",297,0)
 ;          ^TMP($J,"IBCNCHIX") - Index of displayed lines of the Comment 
"RTN","IBCNCH",298,0)
 ;                                History Worklist
"RTN","IBCNCH",299,0)
 ; Output:  COMCNT              - Comment Number of the selected Comment
"RTN","IBCNCH",300,0)
 ; Returns: Select Comment IEN
"RTN","IBCNCH",301,0)
 ;          Error message if invalid selection
"RTN","IBCNCH",302,0)
 N COMIEN,DIROUT,DIRUT,DLINE,DTOUT,DUOUT,END,START,X,Y
"RTN","IBCNCH",303,0)
 S:'$D(WLIST) WLIST="IBCNCHIX"
"RTN","IBCNCH",304,0)
 S START=1,END=$O(^TMP($J,WLIST,""),-1)+0
"RTN","IBCNCH",305,0)
 D:FULL FULL^VALM1
"RTN","IBCNCH",306,0)
 S COMCNT=$P($P($G(XQORNOD(0)),"^",4),"=",2)    ; User selection with action
"RTN","IBCNCH",307,0)
 S COMCNT=$TR(COMCNT,"/\; .",",,,,,")           ; Check for multi-selection
"RTN","IBCNCH",308,0)
 ;
"RTN","IBCNCH",309,0)
 I COMCNT["," D  Q ""                           ; Invalid multi-selection
"RTN","IBCNCH",310,0)
 . W !,*7,">>>> Only single entry selection is allowed"
"RTN","IBCNCH",311,0)
 . K DIR
"RTN","IBCNCH",312,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",313,0)
 ;
"RTN","IBCNCH",314,0)
 I $O(^TMP($J,"IBCNCHIX",""))="" D  Q ""
"RTN","IBCNCH",315,0)
 . S X=$P(PROMPT," ",$L(PROMPT," "))
"RTN","IBCNCH",316,0)
 . W !,*7,">>>> No comments to "_X
"RTN","IBCNCH",317,0)
 . K DIR
"RTN","IBCNCH",318,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",319,0)
 ;
"RTN","IBCNCH",320,0)
 S:COMCNT="" COMCNT=$$SELENTRY(PROMPT,START,END)
"RTN","IBCNCH",321,0)
 Q:COMCNT="" ""
"RTN","IBCNCH",322,0)
 S COMIEN=$P($G(^TMP($J,"IBCNCHIX",COMCNT)),"^",9)
"RTN","IBCNCH",323,0)
 I COMIEN="" D  Q ""
"RTN","IBCNCH",324,0)
 . W !,*7,">>>> Invalid selection number"
"RTN","IBCNCH",325,0)
 . K DIR
"RTN","IBCNCH",326,0)
 . D PAUSE^VALM1
"RTN","IBCNCH",327,0)
 Q COMIEN
"RTN","IBCNCH",328,0)
 ;
"RTN","IBCNCH",329,0)
DELCOM(DFN,IBIIEN,COMIEN) ; Checks to see if the user was attempting to
"RTN","IBCNCH",330,0)
 ; create new Patient Policy comment but didn't enter a comment. If so,
"RTN","IBCNCH",331,0)
 ; If so, the new Patient Policy Comment is deleted
"RTN","IBCNCH",332,0)
 ; Input:   DFN     - IEN of the Patient a policy comment is being added for
"RTN","IBCNCH",333,0)
 ;          IBIIEN  - IEN of the Policy a policy comment is being added for
"RTN","IBCNCH",334,0)
 ;          COMIEN  - IEN of the new Policy Comment being added
"RTN","IBCNCH",335,0)
 ; Returns: 1 - New Patient Policy Comment was deleted, 0 otherwise
"RTN","IBCNCH",336,0)
 ;          
"RTN","IBCNCH",337,0)
 N DA,DIK,IENS,X,XX,Y
"RTN","IBCNCH",338,0)
 S IENS=COMIEN_","_IBIIEN_","_DFN_","
"RTN","IBCNCH",339,0)
 S XX=$$GET1^DIQ(2.342,IENS,.03)                    ; Check the comment field
"RTN","IBCNCH",340,0)
 Q:XX'="" 0
"RTN","IBCNCH",341,0)
 S DA=COMIEN,DA(1)=IBIIEN,DA(2)=DFN
"RTN","IBCNCH",342,0)
 S DIK="^DPT(DA(2),.312,DA(1),13,"
"RTN","IBCNCH",343,0)
 D ^DIK                                             ; Delete the multiple
"RTN","IBCNCH",344,0)
 Q 1
"RTN","IBCNCH",345,0)
 ;
"RTN","IBCNCH",346,0)
SELENTRY(PROMPT,START,END)    ; select a comment
"RTN","IBCNCH",347,0)
 ; Input:   PROMPT  - Prompt to be displayed to the user
"RTN","IBCNCH",348,0)
 ;          START   - Start comment # that can be selected
"RTN","IBCNCH",349,0)
 ;          END     - Ending comment # that can be selected
"RTN","IBCNCH",350,0)
 ; Returns: Selected Comment # or "" if not selected
"RTN","IBCNCH",351,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNCH",352,0)
 S DIR(0)="NO^"_START_":"_END_":0"
"RTN","IBCNCH",353,0)
 S DIR("A")=PROMPT
"RTN","IBCNCH",354,0)
 D ^DIR K DIR
"RTN","IBCNCH",355,0)
 Q X
"RTN","IBCNCH",356,0)
 ;
"RTN","IBCNCH",357,0)
EXIT ;EP
"RTN","IBCNCH",358,0)
 ; Exit the listman template
"RTN","IBCNCH",359,0)
 K ^TMP("IBCNCH",$J),^TMP($J,"IBCNCHIX")
"RTN","IBCNCH",360,0)
 D CLEAR^VALM1
"RTN","IBCNCH",361,0)
 Q
"RTN","IBCNCH2")
0^5^B47844912
"RTN","IBCNCH2",1,0)
IBCNCH2 ;ALB/FA - PATIENT POLICY COMMENT HISTORY ;27-APR-2015
"RTN","IBCNCH2",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNCH2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNCH2",4,0)
 ;
"RTN","IBCNCH2",5,0)
 ; Patient Policy Comments - 1. Build main insurance comment display
"RTN","IBCNCH2",6,0)
 ;                           2. Search Comments for a specified String
"RTN","IBCNCH2",7,0)
 ;
"RTN","IBCNCH2",8,0)
BLD(DFN,IBIIEN) ;EP
"RTN","IBCNCH2",9,0)
 ; Build the listman template body of the main Insurance Comment display
"RTN","IBCNCH2",10,0)
 ; Input:   DFN                     - IEN of the patient
"RTN","IBCNCH2",11,0)
 ;          IBIIEN                  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH2",12,0)
 ;                                    multiple IEN of the selected patient policy
"RTN","IBCNCH2",13,0)
 ;          ^TMP($J,"IBCNCHIX",CNT) - See GETCOMS
"RTN","IBCNCH2",14,0)
 N CNT,LINE,LN,XX
"RTN","IBCNCH2",15,0)
 D GETCOMS(DFN,IBIIEN)
"RTN","IBCNCH2",16,0)
 S VALMCNT=0,LINE="",CNT=""
"RTN","IBCNCH2",17,0)
 ;
"RTN","IBCNCH2",18,0)
 F  D  Q:CNT=""
"RTN","IBCNCH2",19,0)
 . S CNT=$O(^TMP($J,"IBCNCHIX",CNT))
"RTN","IBCNCH2",20,0)
 . Q:CNT=""
"RTN","IBCNCH2",21,0)
 . I CNT'=1 D
"RTN","IBCNCH2",22,0)
 . . S VALMCNT=VALMCNT+1
"RTN","IBCNCH2",23,0)
 . . D SET^VALM10(VALMCNT,"",VALMCNT)
"RTN","IBCNCH2",24,0)
 . ;
"RTN","IBCNCH2",25,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNCH2",26,0)
 . D BLDONEC(.VALMCNT,CNT)
"RTN","IBCNCH2",27,0)
 ;
"RTN","IBCNCH2",28,0)
 I VALMCNT=0  D
"RTN","IBCNCH2",29,0)
 . S VALMCNT=1,XX="   *** No comments to display ***"
"RTN","IBCNCH2",30,0)
 . D SET^VALM10(VALMCNT,XX,VALMCNT)
"RTN","IBCNCH2",31,0)
 Q
"RTN","IBCNCH2",32,0)
 ;
"RTN","IBCNCH2",33,0)
BLDONEC(VALMCNT,COMCNT) ; (Re)Build one comment into the listman display
"RTN","IBCNCH2",34,0)
 ; Called from BLD and after adding or editing a comment
"RTN","IBCNCH2",35,0)
 ; Input:   VALMCNT                     - Current Line of the display being
"RTN","IBCNCH2",36,0)
 ;                                       (re)built
"RTN","IBCNCH2",37,0)
 ;          COMCNT                      - Comment Number
"RTN","IBCNCH2",38,0)
 ;          ^TMP($J,"IBCNCHIX",COMCNT)  - See GETONEC for details
"RTN","IBCNCH2",39,0)
 ; Output:  VALMCNT                     - Updated Line of the display being
"RTN","IBCNCH2",40,0)
 ;                                       (re)built
"RTN","IBCNCH2",41,0)
 N DATALN,LINE
"RTN","IBCNCH2",42,0)
 S LINE=$$SETL("",COMCNT,"",1,4)                ; Comment #
"RTN","IBCNCH2",43,0)
 S DATALN=^TMP($J,"IBCNCHIX",COMCNT)
"RTN","IBCNCH2",44,0)
 S XX=$P(DATALN,"^",1)                          ; Dt Entered
"RTN","IBCNCH2",45,0)
 S LINE=$$SETL(LINE,XX,"",6,15)
"RTN","IBCNCH2",46,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","IBCNCH2",47,0)
 S XX=$P(DATALN,"^",2)                          ; Entered By
"RTN","IBCNCH2",48,0)
 S LINE=$$SETL(LINE,XX,"",18,37)
"RTN","IBCNCH2",49,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","IBCNCH2",50,0)
 S XX=$P(DATALN,"^",4)                          ; Method
"RTN","IBCNCH2",51,0)
 S LINE=$$SETL(LINE,XX,"",44,52)
"RTN","IBCNCH2",52,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","IBCNCH2",53,0)
 S XX=$P(DATALN,"^",3)                          ; Person Contacted
"RTN","IBCNCH2",54,0)
 S LINE=$$SETL(LINE,XX,"",55,80)
"RTN","IBCNCH2",55,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","IBCNCH2",56,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNCH2",57,0)
 S XX=$E($P(DATALN,"^",8),1,132)                ; Start of Comment
"RTN","IBCNCH2",58,0)
 S LINE=$$SETL("",XX,"",6,80)
"RTN","IBCNCH2",59,0)
 D SET^VALM10(VALMCNT,LINE,VALMCNT)
"RTN","IBCNCH2",60,0)
 Q
"RTN","IBCNCH2",61,0)
 ;
"RTN","IBCNCH2",62,0)
GETCOMS(DFN,IBIIEN) ; Retrieves the policy comments for the selected
"RTN","IBCNCH2",63,0)
 ; patient and policy in most recent date order
"RTN","IBCNCH2",64,0)
 ; Input:   DFN                     - IEN of the patient
"RTN","IBCNCH2",65,0)
 ;          IBIIEN                  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH2",66,0)
 ;                                    multiple IEN of the selected patient policy
"RTN","IBCNCH2",67,0)
 ; Output:  ^TMP($J,"IBCNCHIX",CNT) - A1^A2^A3^A4^A5^A6^A7^A8^A9^A10
"RTN","IBCNCH2",68,0)
 ;                                    See GETONEC for detailed explanation
"RTN","IBCNCH2",69,0)
 N CNT,COMDT,COMIEN
"RTN","IBCNCH2",70,0)
 S CNT=0,COMDT=""
"RTN","IBCNCH2",71,0)
 F  D  Q:COMDT=""
"RTN","IBCNCH2",72,0)
 . S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT),-1)
"RTN","IBCNCH2",73,0)
 . Q:COMDT=""
"RTN","IBCNCH2",74,0)
 . S COMIEN=""
"RTN","IBCNCH2",75,0)
 . F  D  Q:COMIEN=""
"RTN","IBCNCH2",76,0)
 . . S COMIEN=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,COMIEN),-1)
"RTN","IBCNCH2",77,0)
 . . Q:COMIEN=""
"RTN","IBCNCH2",78,0)
 . . S CNT=CNT+1
"RTN","IBCNCH2",79,0)
 . . D GETONEC(DFN,IBIIEN,COMIEN,CNT)           ; Get One Comment
"RTN","IBCNCH2",80,0)
 Q
"RTN","IBCNCH2",81,0)
 ;
"RTN","IBCNCH2",82,0)
GETONEC(DFN,IBIIEN,COMIEN,CNT,CLEN,FULL,NOSET)  ;EP
"RTN","IBCNCH2",83,0)
 ; Get the Data for a specified Policy Comment
"RTN","IBCNCH2",84,0)
 ; Input:   DFN                     - IEN of the patient
"RTN","IBCNCH2",85,0)
 ;          IBIIEN                  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH2",86,0)
 ;                                    multiple IEN of the selected patient policy
"RTN","IBCNCH2",87,0)
 ;          COMIEN                  - ^DPT(DFN,.312,IBIIEN,13,COMIEN,0) Where 
"RTN","IBCNCH2",88,0)
 ;                                    COMIEN is the multiple IEN of the selected
"RTN","IBCNCH2",89,0)
 ;                                    Patient Policy Comment
"RTN","IBCNCH2",90,0)
 ;          CNT                     - Current Comment Selection Number
"RTN","IBCNCH2",91,0)
 ;          CLEN                    - Length of Partial Comment to be displayed
"RTN","IBCNCH2",92,0)
 ;                                    Optional, defaults to 74
"RTN","IBCNCH2",93,0)
 ;          FULL                    - 1 to return the full comment text,
"RTN","IBCNCH2",94,0)
 ;                                    otherwise
"RTN","IBCNCH2",95,0)
 ;                                    Optional - defaults to 0
"RTN","IBCNCH2",96,0)
 ;          NOSET                   - 1 to not set into ^TMP, 0 otherwise
"RTN","IBCNCH2",97,0)
 ;                                    Optional, defaults to 0
"RTN","IBCNCH2",98,0)
 ; Output:  NOTE: ^TMP($J,"IBCNCHIX",CNT) only set if NOSET=0
"RTN","IBCNCH2",99,0)
 ;          ^TMP($J,"IBCNCHIX",CNT) - A1^A2^A3^A4^A5^A6^A7^A8^A9^A10
"RTN","IBCNCH2",100,0)
 ;                  Where:
"RTN","IBCNCH2",101,0)
 ;                          CNT - Comment selection # (comments ordered by
"RTN","IBCNCH2",102,0)
 ;                               (date entered)
"RTN","IBCNCH2",103,0)
 ;                          A1  - External date/time the comment was entered
"RTN","IBCNCH2",104,0)
 ;                                NOTE: has a leading '+' when A8 > CLEN
"RTN","IBCNCH2",105,0)
 ;                          A2  - External User Name of the user who entered
"RTN","IBCNCH2",106,0)
 ;                                the comment 
"RTN","IBCNCH2",107,0)
 ;                          A3  - Person Contacted
"RTN","IBCNCH2",108,0)
 ;                          A4  - Method of Contact
"RTN","IBCNCH2",109,0)
 ;                          A5  - Contact Phone #
"RTN","IBCNCH2",110,0)
 ;                          A6  - Call Reference #
"RTN","IBCNCH2",111,0)
 ;                          A7  - Authorization #
"RTN","IBCNCH2",112,0)
 ;                          A8  - Comment
"RTN","IBCNCH2",113,0)
 ;                          A9  - Patient Policy Comment IEN
"RTN","IBCNCH2",114,0)
 ;                          A10 - Comment Selection Number
"RTN","IBCNCH2",115,0)
 N COMMENT,DATAOUT,IENS,XX,ZZ
"RTN","IBCNCH2",116,0)
 S:'$D(FULL) FULL=0
"RTN","IBCNCH2",117,0)
 S:'$D(NOSET) NOSET=0
"RTN","IBCNCH2",118,0)
 S:'$D(CLEN) CLEN=74
"RTN","IBCNCH2",119,0)
 S IENS=COMIEN_","_IBIIEN_","_DFN_","
"RTN","IBCNCH2",120,0)
 S COMMENT=$$GET1^DIQ(2.342,IENS,.03)           ; Comment Text
"RTN","IBCNCH2",121,0)
 S XX=$$GET1^DIQ(2.342,IENS,.01,"I")            ; Internal Date/Time entered
"RTN","IBCNCH2",122,0)
 S ZZ=$S($L(COMMENT)>CLEN:"+",1:" ")            ; Truncated Comment Indicator
"RTN","IBCNCH2",123,0)
 S DATAOUT=ZZ_$$FMTE^XLFDT($P(XX,"^",1),"2DZ")
"RTN","IBCNCH2",124,0)
 S XX=$$GET1^DIQ(2.342,IENS,.02,"I")            ; IEN of Last Edited By User
"RTN","IBCNCH2",125,0)
 S ZZ=$$GET1^DIQ(200,XX,.01)                    ; Entered by user
"RTN","IBCNCH2",126,0)
 S $P(DATAOUT,"^",2)=$E(ZZ,1,24)
"RTN","IBCNCH2",127,0)
 S $P(DATAOUT,"^",3)=$$GET1^DIQ(2.342,IENS,.04) ; Person Contacted
"RTN","IBCNCH2",128,0)
 S ZZ=$$GET1^DIQ(2.342,IENS,.07)
"RTN","IBCNCH2",129,0)
 S $P(DATAOUT,"^",4)=$E(ZZ,1,10)                ; Method of Contact
"RTN","IBCNCH2",130,0)
 S $P(DATAOUT,"^",5)=$$GET1^DIQ(2.342,IENS,.05) ; Contact Phone #
"RTN","IBCNCH2",131,0)
 S $P(DATAOUT,"^",6)=$$GET1^DIQ(2.342,IENS,.06) ; Call Reference #
"RTN","IBCNCH2",132,0)
 S $P(DATAOUT,"^",7)=$$GET1^DIQ(2.342,IENS,.08) ; Authorization #
"RTN","IBCNCH2",133,0)
 S ZZ=$S('FULL:$E(COMMENT,1,CLEN),1:COMMENT)
"RTN","IBCNCH2",134,0)
 S $P(DATAOUT,"^",8)=ZZ                         ; Comment
"RTN","IBCNCH2",135,0)
 S $P(DATAOUT,"^",9)=COMIEN                     ; IEN of the Comment
"RTN","IBCNCH2",136,0)
 S $P(DATAOUT,"^",10)=CNT                       ; Comment Number
"RTN","IBCNCH2",137,0)
 S:'NOSET ^TMP($J,"IBCNCHIX",CNT)=DATAOUT
"RTN","IBCNCH2",138,0)
 Q DATAOUT
"RTN","IBCNCH2",139,0)
 ;
"RTN","IBCNCH2",140,0)
SETL(LINE,DATA,LABEL,COL,LNG) ; Creates a line of data to be set into the body
"RTN","IBCNCH2",141,0)
 ; of the worklist
"RTN","IBCNCH2",142,0)
 ; Input:   LINE    - Current line being created
"RTN","IBCNCH2",143,0)
 ;          DATA    - Information to be added to the end of the current line
"RTN","IBCNCH2",144,0)
 ;          LABEL   - Label to describe the information being added
"RTN","IBCNCH2",145,0)
 ;          COL     - Column position in line to add information add
"RTN","IBCNCH2",146,0)
 ;          LNG     - Maximum length of data information to include on the line
"RTN","IBCNCH2",147,0)
 ; Returns: Line updated with added information
"RTN","IBCNCH2",148,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNCH2",149,0)
 Q LINE
"RTN","IBCNCH2",150,0)
 ;
"RTN","IBCNCH2",151,0)
SEARCH(COMIN)  ;EP
"RTN","IBCNCH2",152,0)
 ; Protocol action to Search Patient Policy Comments for selected text
"RTN","IBCNCH2",153,0)
 ; Input:   COMIN   - IEN of the selected Patient Policy Comment
"RTN","IBCNCH2",154,0)
 ;                    Optional - Only sent when called from the expanded
"RTN","IBCNCH2",155,0)
 ;                               comment listman template.
"RTN","IBCNCH2",156,0)
 ;          DFN     - IEN of the selected Patient
"RTN","IBCNCH2",157,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH2",158,0)
 ;                    multiple IEN of the selected Patient Policy
"RTN","IBCNCH2",159,0)
 N FOUND,STEXT
"RTN","IBCNCH2",160,0)
 S VALMBCK="R"
"RTN","IBCNCH2",161,0)
 D FULL^VALM1
"RTN","IBCNCH2",162,0)
 S STEXT=$$GETSTXT()                            ; Get the text to search for
"RTN","IBCNCH2",163,0)
 I STEXT="" D  Q
"RTN","IBCNCH2",164,0)
 . W !!,*7,"No search text selected."
"RTN","IBCNCH2",165,0)
 . D PAUSE^VALM1
"RTN","IBCNCH2",166,0)
 ;
"RTN","IBCNCH2",167,0)
 ; Search all of the Patient Policy Comments for the specified search text
"RTN","IBCNCH2",168,0)
 D SEARCHC(DFN,IBIIEN,STEXT,.FOUND)
"RTN","IBCNCH2",169,0)
 I 'FOUND D  Q
"RTN","IBCNCH2",170,0)
 . W !!,*7,STEXT," not found in any Patient Policy Comments."
"RTN","IBCNCH2",171,0)
 . D PAUSE^VALM1
"RTN","IBCNCH2",172,0)
 ;
"RTN","IBCNCH2",173,0)
 ; Display all the Patient Policy Comments where the text was found
"RTN","IBCNCH2",174,0)
 W !!,STEXT," was found in ",FOUND," Patient Policy Comment(s)."
"RTN","IBCNCH2",175,0)
 W !,"The found text will be highlighted within each comment in the Expanded Entry"
"RTN","IBCNCH2",176,0)
 W !,"display.",!!
"RTN","IBCNCH2",177,0)
 Q:'$$ASKYN^IBCNCH("View the results now",1)
"RTN","IBCNCH2",178,0)
 D SEARCH^IBCNCH3(DFN,IBIIEN,STEXT,.FOUND)
"RTN","IBCNCH2",179,0)
 Q
"RTN","IBCNCH2",180,0)
 ;
"RTN","IBCNCH2",181,0)
GETSTXT() ; Get the text to search for
"RTN","IBCNCH2",182,0)
 ; Input:   None
"RTN","IBCNCH2",183,0)
 ; Returns: text to search for or "" if not entered
"RTN","IBCNCH2",184,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNCH2",185,0)
 S DIR(0)="F",DIR("A")="Enter the text to search for"
"RTN","IBCNCH2",186,0)
 D ^DIR
"RTN","IBCNCH2",187,0)
 Q Y
"RTN","IBCNCH2",188,0)
 ;
"RTN","IBCNCH2",189,0)
SEARCHC(DFN,IBIIEN,STEXT,FOUND) ; Search all the Patient Policy Comments
"RTN","IBCNCH2",190,0)
 ; Input:   DFN         - IEN of the Patient
"RTN","IBCNCH2",191,0)
 ;          IBIIEN      - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the multiple
"RTN","IBCNCH2",192,0)
 ;                        IEN of the selected Patient Policy
"RTN","IBCNCH2",193,0)
 ;          STEXT       - Text to search for
"RTN","IBCNCH2",194,0)
 ; Output:  FOUND       - Array of Patient Policy Comments 
"RTN","IBCNCH2",195,0)
 ;                        FOUND        - A1
"RTN","IBCNCH2",196,0)
 ;                        FOUND(0,CTR) - A2                  
"RTN","IBCNCH2",197,0)
 ;                        FOUND(1,A2)  - CTR
"RTN","IBCNCH2",198,0)
 ;                          Where: A1 - Number of comments where text was found
"RTN","IBCNCH2",199,0)
 ;                                 A2 - IEN of the comment where text was found
"RTN","IBCNCH2",200,0)
 ;                                 CTR- Counter to put sort comments by date
"RTN","IBCNCH2",201,0)
 N CNT,COMDT,COMIEN
"RTN","IBCNCH2",202,0)
 S (CNT,FOUND)=0,COMDT=""
"RTN","IBCNCH2",203,0)
 F  D  Q:COMDT=""
"RTN","IBCNCH2",204,0)
 . S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT),-1)
"RTN","IBCNCH2",205,0)
 . Q:COMDT=""
"RTN","IBCNCH2",206,0)
 . S COMIEN=""
"RTN","IBCNCH2",207,0)
 . F  D  Q:COMIEN=""
"RTN","IBCNCH2",208,0)
 . . S COMIEN=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,COMIEN),-1)
"RTN","IBCNCH2",209,0)
 . . Q:COMIEN=""
"RTN","IBCNCH2",210,0)
 . . Q:'$$FOUNDT(DFN,IBIIEN,COMIEN,STEXT)
"RTN","IBCNCH2",211,0)
 . . S CNT=CNT+1,FOUND=FOUND+1
"RTN","IBCNCH2",212,0)
 . . S FOUND(0,CNT)=COMIEN,FOUND(1,COMIEN)=CNT
"RTN","IBCNCH2",213,0)
 Q
"RTN","IBCNCH2",214,0)
 ;
"RTN","IBCNCH2",215,0)
FOUNDT(DFN,IBIIEN,COMIEN,STEXT) ; Search the specified comment for the
"RTN","IBCNCH2",216,0)
 ; specified text
"RTN","IBCNCH2",217,0)
 ; Input:   DFN         - IEN of the Patient
"RTN","IBCNCH2",218,0)
 ;          IBIIEN      - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the multiple
"RTN","IBCNCH2",219,0)
 ;                        IEN of the selected Patient Policy
"RTN","IBCNCH2",220,0)
 ;          COMIEN      - IEN of the selected Patient Policy Comment
"RTN","IBCNCH2",221,0)
 ;          STEXT       - Text to search for
"RTN","IBCNCH2",222,0)
 ; Returns: 1 if the STEXT was found, 0 otherwise
"RTN","IBCNCH2",223,0)
 N IENS,XX
"RTN","IBCNCH2",224,0)
 S IENS=COMIEN_","_IBIIEN_","_DFN_","
"RTN","IBCNCH2",225,0)
 S STEXT=$$UP^XLFSTR(STEXT)
"RTN","IBCNCH2",226,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.04))
"RTN","IBCNCH2",227,0)
 I XX[STEXT Q 1                                 ; Search Contact Person
"RTN","IBCNCH2",228,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.05))
"RTN","IBCNCH2",229,0)
 I XX[STEXT Q 1                                 ; Search Contact Phone
"RTN","IBCNCH2",230,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.07))
"RTN","IBCNCH2",231,0)
 I XX[STEXT Q 1                                 ; Search Method
"RTN","IBCNCH2",232,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.06))
"RTN","IBCNCH2",233,0)
 I XX[STEXT Q 1                                 ; Search Call Reference #
"RTN","IBCNCH2",234,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.08))
"RTN","IBCNCH2",235,0)
 I XX[STEXT Q 1                                 ; Search Authorization #
"RTN","IBCNCH2",236,0)
 S XX=$$UP^XLFSTR($$GET1^DIQ(2.342,IENS,.03))
"RTN","IBCNCH2",237,0)
 I XX[STEXT Q 1                                 ; Search Comment Text
"RTN","IBCNCH2",238,0)
 Q 0
"RTN","IBCNCH2",239,0)
 ; 
"RTN","IBCNCH3")
0^6^B90566636
"RTN","IBCNCH3",1,0)
IBCNCH3 ;ALB/FA - PATIENT POLICY COMMENT HISTORY ;27-APR-2015
"RTN","IBCNCH3",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNCH3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNCH3",4,0)
 ;
"RTN","IBCNCH3",5,0)
 ; Patient Policy Comment - Expand the selected Comment
"RTN","IBCNCH3",6,0)
 ;                     OR
"RTN","IBCNCH3",7,0)
 ; Patient Policy Comment - Display Search Comment Results
"RTN","IBCNCH3",8,0)
 ;
"RTN","IBCNCH3",9,0)
EXPCOM(VMODE) ;EP
"RTN","IBCNCH3",10,0)
 ; Protocol action to expand a selected Patient Policy Comment
"RTN","IBCNCH3",11,0)
 ; After selected a comment to expand the IBCNCH POLICY COMMENT EXPAND
"RTN","IBCNCH3",12,0)
 ; Listman template is shown
"RTN","IBCNCH3",13,0)
 ; Input:   VMODE   - 1 if in view only mode, 0 otherwise
"RTN","IBCNCH3",14,0)
 ;                    Optional, defaults to 0
"RTN","IBCNCH3",15,0)
 ;          DFN     - IEN of the selected Patient
"RTN","IBCNCH3",16,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",17,0)
 ;                    multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",18,0)
 ; Output:  All Policy Comment History fields displayed
"RTN","IBCNCH3",19,0)
 N COMNUM
"RTN","IBCNCH3",20,0)
 S:'$D(VMODE) VMODE=0
"RTN","IBCNCH3",21,0)
 S VALMBCK="R"
"RTN","IBCNCH3",22,0)
 S COMNUM=$$SELCOM^IBCNCH(1,"Select Comment to expand","","IBCNCHIX")
"RTN","IBCNCH3",23,0)
 Q:COMNUM=""
"RTN","IBCNCH3",24,0)
 D EN(DFN,IBIIEN,COMNUM,VMODE)
"RTN","IBCNCH3",25,0)
 Q
"RTN","IBCNCH3",26,0)
 ;
"RTN","IBCNCH3",27,0)
SEARCH(DFN,IBIIEN,SRCHTXT,FOUNDTXT) ;EP
"RTN","IBCNCH3",28,0)
 ; Called from SEARCH^IBCNCH2 to display all the comments with the found search
"RTN","IBCNCH3",29,0)
 ; text in expanded mode with the search text highlighted wherever it was found
"RTN","IBCNCH3",30,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH3",31,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",32,0)
 ;                    multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",33,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",34,0)
 ;          FOUNDTXT- Array of Patient Policy Comment IENS Where the search
"RTN","IBCNCH3",35,0)
 ;                    text was found
"RTN","IBCNCH3",36,0)
 D EN(DFN,IBIIEN,"","",SRCHTXT,.FOUNDTXT)
"RTN","IBCNCH3",37,0)
 Q
"RTN","IBCNCH3",38,0)
 ;
"RTN","IBCNCH3",39,0)
EN(DFN,IBIIEN,COMIEN,VMODE,SRCHTXT,FOUNDTXT) ; Display the expand Listman template
"RTN","IBCNCH3",40,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH3",41,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the multiple IEN
"RTN","IBCNCH3",42,0)
 ;                    of the selected Patient Policy
"RTN","IBCNCH3",43,0)
 ;          COMIEN  - IEN of the selected Patient Policy Comment
"RTN","IBCNCH3",44,0)
 ;                    "" when called to in display search text mode
"RTN","IBCNCH3",45,0)
 ;          VMODE   - 1 if in view only mode, 0 otherwise
"RTN","IBCNCH3",46,0)
 ;                    Optional, defaults to 0
"RTN","IBCNCH3",47,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",48,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",49,0)
 ;          FOUNDTXT- Array of Patient Policy Comment IENS Where the search
"RTN","IBCNCH3",50,0)
 ;                    text was found
"RTN","IBCNCH3",51,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",52,0)
 ; Output:  COMIEN  - COMIEN of comment to display in search mode
"RTN","IBCNCH3",53,0)
 ;                    Only set when in search mode
"RTN","IBCNCH3",54,0)
 S:'$D(FOUNDTXT) FOUNDTXT=0
"RTN","IBCNCH3",55,0)
 K VALMQUIT
"RTN","IBCNCH3",56,0)
 I $G(DFN)="" D  Q
"RTN","IBCNCH3",57,0)
 . W !!,*7,"Patient is not identified."
"RTN","IBCNCH3",58,0)
 . D PAUSE^VALM1
"RTN","IBCNCH3",59,0)
 I IBIIEN=0 D  Q
"RTN","IBCNCH3",60,0)
 . W !!,*7,"Patient Policy is not identified."
"RTN","IBCNCH3",61,0)
 . D PAUSE^VALM1
"RTN","IBCNCH3",62,0)
 ;
"RTN","IBCNCH3",63,0)
 I FOUNDTXT D  Q                                ; Display Search listman
"RTN","IBCNCH3",64,0)
 . S COMIEN=FOUNDTXT(0,1)
"RTN","IBCNCH3",65,0)
 . D EN^VALM("IBCNCH POLICY COMMENT SEARCH")
"RTN","IBCNCH3",66,0)
 ;
"RTN","IBCNCH3",67,0)
 I VMODE D  Q
"RTN","IBCNCH3",68,0)
 . D EN^VALM("IBCNCH POL COMMENT EXPAND VIEW")
"RTN","IBCNCH3",69,0)
 D EN^VALM("IBCNCH POLICY COMMENT EXPAND")
"RTN","IBCNCH3",70,0)
 I $G(IBFASTXT)'=1 D
"RTN","IBCNCH3",71,0)
 . D CLEAN^VALM10,INIT^IBCNCH,HDR^IBCNCH
"RTN","IBCNCH3",72,0)
 . S VALMBCK="R"
"RTN","IBCNCH3",73,0)
 Q
"RTN","IBCNCH3",74,0)
 ;
"RTN","IBCNCH3",75,0)
HDR ;EP
"RTN","IBCNCH3",76,0)
 ; Build the listman template header information
"RTN","IBCNCH3",77,0)
 ; Input:   DFN     - IEN of the select Patient
"RTN","IBCNCH3",78,0)
 ;          IBPPOL  - ^DPT(DFN,.312,PIEN,0) Where PIEN is the IEN of the
"RTN","IBCNCH3",79,0)
 ;                    selected Patient Policy
"RTN","IBCNCH3",80,0)
 ;          COMIEN  - IEN of the selected Patient Policy Comment
"RTN","IBCNCH3",81,0)
 ;                    "" when called to in display search text mode
"RTN","IBCNCH3",82,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",83,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",84,0)
 ;          FOUNDTXT- Array of Patient Policy Comments Where the search
"RTN","IBCNCH3",85,0)
 ;                    text was found
"RTN","IBCNCH3",86,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",87,0)
 N WW,XX,YY,ZZ
"RTN","IBCNCH3",88,0)
 S XX=$E($P(^DPT(DFN,0),"^",1),1,20)_"  "_$P($$PT^IBEFUNC(DFN),"^",2)
"RTN","IBCNCH3",89,0)
 S ZZ=$$GET1^DIQ(2,DFN_",",.03),XX=XX_"  "_ZZ
"RTN","IBCNCH3",90,0)
 S VALMHDR(1)="Policy Comment History for: "_XX
"RTN","IBCNCH3",91,0)
 S ZZ=$G(^DPT(DFN,.312,+$P(IBPPOL,"^",4),0))
"RTN","IBCNCH3",92,0)
 S WW=$P($G(^IBA(355.3,+$P(ZZ,"^",18),0)),"^",11)
"RTN","IBCNCH3",93,0)
 S YY=$E($P($G(^DIC(36,+ZZ,0)),"^",1),1,20)_" Insurance Company"
"RTN","IBCNCH3",94,0)
 S XX="** Plan Currently "_$S(WW:"Ina",1:"A")_"ctive **"
"RTN","IBCNCH3",95,0)
 S VALMHDR(2)=$$SETSTR^VALM1(XX,YY,48,29)
"RTN","IBCNCH3",96,0)
 I FOUNDTXT D
"RTN","IBCNCH3",97,0)
 . S YY=FOUNDTXT(1,COMIEN)
"RTN","IBCNCH3",98,0)
 . S XX=$S(YY=1:"1st",YY=2:"2nd",YY=3:"3rd",1:YY_"th")
"RTN","IBCNCH3",99,0)
 . S ZZ="Displaying "_XX_" of "_FOUNDTXT_" Pt Policy Comments where '"
"RTN","IBCNCH3",100,0)
 . S ZZ=ZZ_SRCHTXT_"' was found."
"RTN","IBCNCH3",101,0)
 . S VALMHDR(3)=ZZ
"RTN","IBCNCH3",102,0)
 Q
"RTN","IBCNCH3",103,0)
 ;
"RTN","IBCNCH3",104,0)
INIT ;EP
"RTN","IBCNCH3",105,0)
 ; Initialize the listman template
"RTN","IBCNCH3",106,0)
 ; Input:   DFN                 - IEN of the selected Patient
"RTN","IBCNCH3",107,0)
 ;          IBIIEN              - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",108,0)
 ;                                multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",109,0)
 ;          COMIEN              - IEN of the selected Patient Policy Comment
"RTN","IBCNCH3",110,0)
 ;          SRCHTXT             - Text user was searching for
"RTN","IBCNCH3",111,0)
 ;                                Optional, only passed when displaying found
"RTN","IBCNCH3",112,0)
 ;                                          search text
"RTN","IBCNCH3",113,0)
 ;          FOUNDTXT            - Array of Patient Policy Comment IENS Where 
"RTN","IBCNCH3",114,0)
 ;                                the search text was found
"RTN","IBCNCH3",115,0)
 ;                                Optional, only passed when displaying found
"RTN","IBCNCH3",116,0)
 ;                                search text
"RTN","IBCNCH3",117,0)
 ; Output:  ^TMP("IBCNCH3",$J)  - Body lines to display for specified template
"RTN","IBCNCH3",118,0)
 K ^TMP("IBCNCH3",$J)
"RTN","IBCNCH3",119,0)
 S:'$D(SRCHTXT) SRCHTXT=""
"RTN","IBCNCH3",120,0)
 D BLD(DFN,IBIIEN,COMIEN,SRCHTXT)
"RTN","IBCNCH3",121,0)
 Q
"RTN","IBCNCH3",122,0)
 ;
"RTN","IBCNCH3",123,0)
BLD(DFN,IBIIEN,COMIEN,SRCHTXT,SMODE) ; Build the listman template body
"RTN","IBCNCH3",124,0)
 ; Input:   DFN         - IEN of the select Patient
"RTN","IBCNCH3",125,0)
 ;          IBIIEN      - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",126,0)
 ;                        multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",127,0)
 ;          COMIEN      - IEN of the selected Patient Policy Comment
"RTN","IBCNCH3",128,0)
 ;          SRCHTXT     - Text user was searching for or null if not in search
"RTN","IBCNCH3",129,0)
 ;                        mode
"RTN","IBCNCH3",130,0)
 N ELINEL,ELINER,IENS,SLINE,STARTR
"RTN","IBCNCH3",131,0)
 S VALMCNT=0,SLINE=1
"RTN","IBCNCH3",132,0)
 S IENS=COMIEN_","_IBIIEN_","_DFN_","
"RTN","IBCNCH3",133,0)
 D BLDCOML(IENS,SLINE,.STARTR,.ELINEL,SRCHTXT)  ; Build Left Column
"RTN","IBCNCH3",134,0)
 ;
"RTN","IBCNCH3",135,0)
 ; The next two lines are in place in case a build right column is ever added.
"RTN","IBCNCH3",136,0)
 ; If one is added, we would need to determine which side has more lines but
"RTN","IBCNCH3",137,0)
 ; since none is currently present, temporarily setting ELINER=ELINEL.
"RTN","IBCNCH3",138,0)
 S ELINER=ELINEL
"RTN","IBCNCH3",139,0)
 S SLINE=$S(ELINEL'>ELINER:ELINER,1:ELINEL)
"RTN","IBCNCH3",140,0)
 D BLDCOMT(IENS,SLINE,.ELINEL,SRCHTXT)          ; Build Comment Text
"RTN","IBCNCH3",141,0)
 S VALMCNT=$O(^TMP("IBCNCH3",$J,""),-1)
"RTN","IBCNCH3",142,0)
 Q
"RTN","IBCNCH3",143,0)
 ;
"RTN","IBCNCH3",144,0)
BLDCOML(IENS,SLINE,STARTR,ELINE,SRCHTXT) ; Build the non-comment section
"RTN","IBCNCH3",145,0)
 ; of the Expanded Comment Display
"RTN","IBCNCH3",146,0)
 ; NOTE:    Code is set-up to allow a section display to the right of
"RTN","IBCNCH3",147,0)
 ;          this section but none exists at present
"RTN","IBCNCH3",148,0)
 ; Input:   IENS    - String of IENS needed to access comment fields
"RTN","IBCNCH3",149,0)
 ;          SLINE   - Starting Line Number
"RTN","IBCNCH3",150,0)
 ;          ELINE   - Current Ending Line Number
"RTN","IBCNCH3",151,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",152,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",153,0)
 ; Output:  STARTR  - Line to start displaying Right Column
"RTN","IBCNCH3",154,0)
 ;          ELINE   - Updated Ending Line
"RTN","IBCNCH3",155,0)
 ;
"RTN","IBCNCH3",156,0)
 N XX
"RTN","IBCNCH3",157,0)
 S STARTR=SLINE                                 ; Start of Right Section
"RTN","IBCNCH3",158,0)
 S XX=$$GET1^DIQ(2.342,IENS,.01,"I")
"RTN","IBCNCH3",159,0)
 S XX=$$FMTE^XLFDT(XX,"2SZ")
"RTN","IBCNCH3",160,0)
 S ELINE=$$SET("Last Edited Date: ",XX,SLINE,1)
"RTN","IBCNCH3",161,0)
 S ELINE=$$SET("  Last Edited By: ",$$GET1^DIQ(2.342,IENS,.02),ELINE,1)
"RTN","IBCNCH3",162,0)
 S ELINE=$$SET("  Contact Person: ",$$GET1^DIQ(2.342,IENS,.04),ELINE,1,SRCHTXT)
"RTN","IBCNCH3",163,0)
 S ELINE=$$SET(" Contact Phone #: ",$$GET1^DIQ(2.342,IENS,.05),ELINE,1,SRCHTXT)
"RTN","IBCNCH3",164,0)
 S ELINE=$$SET("          Method: ",$$GET1^DIQ(2.342,IENS,.07),ELINE,1,SRCHTXT)
"RTN","IBCNCH3",165,0)
 S ELINE=$$SET("Call Reference #: ",$$GET1^DIQ(2.342,IENS,.06),ELINE,1,SRCHTXT)
"RTN","IBCNCH3",166,0)
 S ELINE=$$SET(" Authorization #: ",$$GET1^DIQ(2.342,IENS,.08),ELINE,1,SRCHTXT)
"RTN","IBCNCH3",167,0)
 Q
"RTN","IBCNCH3",168,0)
 ;
"RTN","IBCNCH3",169,0)
BLDCOMT(IENS,SLINE,ELINE,SRCHTXT) ; Build the Comment Text Section
"RTN","IBCNCH3",170,0)
 ; Input:   IENS    - String of IENS needed to access comment fields
"RTN","IBCNCH3",171,0)
 ;          SLINE   - Starting Line Number
"RTN","IBCNCH3",172,0)
 ;          ELINE   - Current Ending Line Number
"RTN","IBCNCH3",173,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",174,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",175,0)
 ; Output:  ELINE   - Updated Ending Line Number
"RTN","IBCNCH3",176,0)
 ;
"RTN","IBCNCH3",177,0)
 N COMTEXT,CPOS,REM,XX
"RTN","IBCNCH3",178,0)
 S COMTEXT=$$GET1^DIQ(2.342,IENS,.03)
"RTN","IBCNCH3",179,0)
 S ELINE=$$SET("","",SLINE,1)                   ; Spacing Blank Line
"RTN","IBCNCH3",180,0)
 S ELINE=$$SET("Comment","",ELINE,1)
"RTN","IBCNCH3",181,0)
 S ELINE=$$SETC(COMTEXT,ELINE,SRCHTXT)          ; Display comment line(s)
"RTN","IBCNCH3",182,0)
 Q
"RTN","IBCNCH3",183,0)
 ;
"RTN","IBCNCH3",184,0)
SETC(DATA,LINE,SRCHTXT) ; Sets comment text into the body of the worklist
"RTN","IBCNCH3",185,0)
 ; Input:   DATA    - Comment Text to set into line(s)
"RTN","IBCNCH3",186,0)
 ;          LINE    - Current Line text is being set into
"RTN","IBCNCH3",187,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",188,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",189,0)
 ; Returns: LINE    - Updated Line text is being set into
"RTN","IBCNCH3",190,0)
 ;
"RTN","IBCNCH3",191,0)
 N CLNEND,CPOS,CWLPOS,CWPOS,CWEPOS,DATAU,SPOS,STLEN,STXTU,XX
"RTN","IBCNCH3",192,0)
 S:'$D(SRCHTXT) SRCHTXT=""
"RTN","IBCNCH3",193,0)
 S STLEN=$L(SRCHTXT)
"RTN","IBCNCH3",194,0)
 S DATAU=$$UP^XLFSTR(DATA)
"RTN","IBCNCH3",195,0)
 S STXTU=$$UP^XLFSTR(SRCHTXT)
"RTN","IBCNCH3",196,0)
 ;
"RTN","IBCNCH3",197,0)
 ; Display the comment text 1 line at a time and if in search mode displaying
"RTN","IBCNCH3",198,0)
 ; any instances of found search text in reverse video
"RTN","IBCNCH3",199,0)
 S (CPOS,SPOS)=0,CLNEND=80
"RTN","IBCNCH3",200,0)
 S (CWLPOS,CWPOS)=1,CWEPOS=$L(DATA)
"RTN","IBCNCH3",201,0)
 F  D  Q:(CWPOS>CWEPOS)
"RTN","IBCNCH3",202,0)
 . I SRCHTXT'="" D
"RTN","IBCNCH3",203,0)
 . . S CPOS=$F(DATAU,STXTU,CWPOS),SPOS=0
"RTN","IBCNCH3",204,0)
 . . Q:'CPOS
"RTN","IBCNCH3",205,0)
 . . S SPOS=CPOS-STLEN                      ; Starting position of found text
"RTN","IBCNCH3",206,0)
 . ;
"RTN","IBCNCH3",207,0)
 . ; Not in search mode OR search text not found in characters CWPOS-CLNEND
"RTN","IBCNCH3",208,0)
 . ; of the comment. Display the text from position CWPOS-CLNEND
"RTN","IBCNCH3",209,0)
 . I 'SPOS!(SPOS>CLNEND) D  Q
"RTN","IBCNCH3",210,0)
 . . S XX=$E(DATA,CWPOS,CLNEND)
"RTN","IBCNCH3",211,0)
 . . D SET1(XX,LINE,CWLPOS,$L(XX))
"RTN","IBCNCH3",212,0)
 . . S LINE=LINE+1,CWLPOS=1
"RTN","IBCNCH3",213,0)
 . . S CWPOS=CLNEND+1,CLNEND=CLNEND+80
"RTN","IBCNCH3",214,0)
 . ;
"RTN","IBCNCH3",215,0)
 . ; Search text found starting somewhere in current comment line.  First
"RTN","IBCNCH3",216,0)
 . ; display any text in front of the found search text
"RTN","IBCNCH3",217,0)
 . I SPOS>1 D
"RTN","IBCNCH3",218,0)
 . . S XX=$E(DATA,CWPOS,SPOS-1),CWPOS=SPOS
"RTN","IBCNCH3",219,0)
 . . D SET1(XX,LINE,CWLPOS,$L(XX))
"RTN","IBCNCH3",220,0)
 . . S CWLPOS=CWLPOS+$L(XX)
"RTN","IBCNCH3",221,0)
 . ;
"RTN","IBCNCH3",222,0)
 . ; If entire search text found in characters CWPOS-CLNEND. Display search
"RTN","IBCNCH3",223,0)
 . ; text in reverse video
"RTN","IBCNCH3",224,0)
 . I (CPOS-1)'>CLNEND D  Q
"RTN","IBCNCH3",225,0)
 . . S XX=$E(DATA,CWPOS,(CPOS-1)),CWPOS=CPOS
"RTN","IBCNCH3",226,0)
 . . D SET1(XX,LINE,CWLPOS,$L(XX),0,1)
"RTN","IBCNCH3",227,0)
 . . S CWLPOS=CWLPOS+STLEN
"RTN","IBCNCH3",228,0)
 . ;
"RTN","IBCNCH3",229,0)
 . ; Search text is straddling comment text lines. First display the start of
"RTN","IBCNCH3",230,0)
 . ; the search text on the current line in reverse video
"RTN","IBCNCH3",231,0)
 . S XX=$E(DATA,SPOS,CLNEND),CWPOS=CLNEND+1
"RTN","IBCNCH3",232,0)
 . D SET1(XX,LINE,CWLPOS,$L(XX),0,1)
"RTN","IBCNCH3",233,0)
 . S LINE=LINE+1,CLNEND=CLNEND+80,CWLPOS=1
"RTN","IBCNCH3",234,0)
 . ;
"RTN","IBCNCH3",235,0)
 . ; Next display remaining search text in reverse video
"RTN","IBCNCH3",236,0)
 . S XX=$E(DATA,CWPOS,(CPOS-1)),CWPOS=CPOS
"RTN","IBCNCH3",237,0)
 . D SET1(XX,LINE,CWLPOS,$L(XX),0,1)
"RTN","IBCNCH3",238,0)
 . S CWLPOS=CWLPOS+$L(XX)
"RTN","IBCNCH3",239,0)
 Q LINE
"RTN","IBCNCH3",240,0)
 ;
"RTN","IBCNCH3",241,0)
SET(LABEL,DATA,LINE,COL,SRCHTXT) ; Sets text into the body of the worklist
"RTN","IBCNCH3",242,0)
 ; Input:   LABEL   - Label text to set into the line
"RTN","IBCNCH3",243,0)
 ;          DATA    - Field Data to set into the line
"RTN","IBCNCH3",244,0)
 ;          LINE    - Line to set LABEL and DATA into
"RTN","IBCNCH3",245,0)
 ;          COL     - Starting column position in LINE to insert
"RTN","IBCNCH3",246,0)
 ;                    LABEL_DATA text
"RTN","IBCNCH3",247,0)
 ;          SRCHTXT - Text user was searching for
"RTN","IBCNCH3",248,0)
 ;                    Optional, only passed when displaying found search text
"RTN","IBCNCH3",249,0)
 ; Returns: LINE    - Updated Line by 1
"RTN","IBCNCH3",250,0)
 ;
"RTN","IBCNCH3",251,0)
 N COL,DATAU,FPOS,START,STXTU,WHICH,XX
"RTN","IBCNCH3",252,0)
 S:'$D(SRCHTXT) SRCHTXT=""
"RTN","IBCNCH3",253,0)
 S DATAU=$$UP^XLFSTR(DATA)
"RTN","IBCNCH3",254,0)
 S STXTU=$$UP^XLFSTR(SRCHTXT)
"RTN","IBCNCH3",255,0)
 S WHICH=$S(SRCHTXT="":0,DATAU[STXTU:1,1:0)
"RTN","IBCNCH3",256,0)
 D SET1(LABEL,LINE,1,$L(LABEL),1)               ; First display the label
"RTN","IBCNCH3",257,0)
 ;
"RTN","IBCNCH3",258,0)
 ; Not in search mode OR search text not found
"RTN","IBCNCH3",259,0)
 I 'WHICH D  Q LINE
"RTN","IBCNCH3",260,0)
 . D SET1(DATA,LINE,$L(LABEL)+1,$L(DATA))
"RTN","IBCNCH3",261,0)
 . S LINE=LINE+1
"RTN","IBCNCH3",262,0)
 ;
"RTN","IBCNCH3",263,0)
 ; Display text with all occurrences of the search text in reverse video
"RTN","IBCNCH3",264,0)
 S COL=$L(LABEL)+1
"RTN","IBCNCH3",265,0)
 F  D  Q:(DATA="")!'FPOS
"RTN","IBCNCH3",266,0)
 . S FPOS=$F(DATAU,STXTU)                       ; Find the search text
"RTN","IBCNCH3",267,0)
 . Q:'FPOS                                      ; No more occurrences found
"RTN","IBCNCH3",268,0)
 . S XX=FPOS-$L(SRCHTXT)-1
"RTN","IBCNCH3",269,0)
 . S START=$S(XX:$E(DATA,1,XX),1:"")
"RTN","IBCNCH3",270,0)
 . I START'="" D
"RTN","IBCNCH3",271,0)
 . . D SET1(START,LINE,COL,$L(START))
"RTN","IBCNCH3",272,0)
 . . S COL=COL+$L(START)
"RTN","IBCNCH3",273,0)
 . S XX=$E(DATA,XX+1,FPOS-1)
"RTN","IBCNCH3",274,0)
 . D SET1(XX,LINE,COL,$L(XX),0,1)
"RTN","IBCNCH3",275,0)
 . S COL=COL+$L(SRCHTXT)
"RTN","IBCNCH3",276,0)
 . S DATA=$E(DATA,FPOS,$L(DATA))
"RTN","IBCNCH3",277,0)
 . S DATAU=$E(DATAU,FPOS,$L(DATAU))
"RTN","IBCNCH3",278,0)
 D:DATA'="" SET1(DATA,LINE,COL,$L(DATA))        ; Display any remaining text
"RTN","IBCNCH3",279,0)
 S LINE=LINE+1
"RTN","IBCNCH3",280,0)
 Q LINE
"RTN","IBCNCH3",281,0)
 ;
"RTN","IBCNCH3",282,0)
SET1(TEXT,LINE,COL,WIDTH,BOLD,RV) ; Sets the TMP array with body data
"RTN","IBCNCH3",283,0)
 ; Input:   TEXT                - Text to be set into the specified line
"RTN","IBCNCH3",284,0)
 ;          LINE                - Line to set TEXT into
"RTN","IBCNCH3",285,0)
 ;          COL                 - Column of LINE to set TEXT into
"RTN","IBCNCH3",286,0)
 ;          WIDTH               - Width of the TEXT being set into line
"RTN","IBCNCH3",287,0)
 ;          BOLD                - 1 - Set bold on, 0 otherwise
"RTN","IBCNCH3",288,0)
 ;                                Optional, defaults to ""
"RTN","IBCNCH3",289,0)
 ;          RV                  - 1 - Set Reverse Video on, 0 otherwise
"RTN","IBCNCH3",290,0)
 ;                                Optional, defaults to ""
"RTN","IBCNCH3",291,0)
 ;          ^TMP("IBCNCH3",$J)  - Current ^TMP array
"RTN","IBCNCH3",292,0)
 ; Output:  ^TMP("IBCNCH3",$J)  - Updated ^TMP array
"RTN","IBCNCH3",293,0)
 ;
"RTN","IBCNCH3",294,0)
 N IBX
"RTN","IBCNCH3",295,0)
 S:'$D(BOLD) BOLD=0
"RTN","IBCNCH3",296,0)
 S:'$D(RV) RV=0
"RTN","IBCNCH3",297,0)
 S IBX=$G(^TMP("IBCNCH3",$J,LINE,0))
"RTN","IBCNCH3",298,0)
 S IBX=$$SETSTR^VALM1(TEXT,IBX,COL,WIDTH)
"RTN","IBCNCH3",299,0)
 D SET^VALM10(LINE,IBX)
"RTN","IBCNCH3",300,0)
 D:BOLD CNTRL^VALM10(LINE,COL,WIDTH,IOINHI,IOINORM)
"RTN","IBCNCH3",301,0)
 D:RV CNTRL^VALM10(LINE,COL,WIDTH,IORVON,IORVOFF)
"RTN","IBCNCH3",302,0)
 Q
"RTN","IBCNCH3",303,0)
 ;
"RTN","IBCNCH3",304,0)
HELP ;EP
"RTN","IBCNCH3",305,0)
 ; Display the listman template help
"RTN","IBCNCH3",306,0)
 N X
"RTN","IBCNCH3",307,0)
 S X="?"
"RTN","IBCNCH3",308,0)
 D DISP^XQORM1
"RTN","IBCNCH3",309,0)
 W !!
"RTN","IBCNCH3",310,0)
 Q
"RTN","IBCNCH3",311,0)
 ;
"RTN","IBCNCH3",312,0)
EXIT ;EP
"RTN","IBCNCH3",313,0)
 ; Exit the listman template
"RTN","IBCNCH3",314,0)
 K ^TMP("IBCNCH3",$J)
"RTN","IBCNCH3",315,0)
 D CLEAR^VALM1
"RTN","IBCNCH3",316,0)
 Q
"RTN","IBCNCH3",317,0)
 ;
"RTN","IBCNCH3",318,0)
NEXTCOM ;EP
"RTN","IBCNCH3",319,0)
 ; Protocol action to show the next comment with the found Search text
"RTN","IBCNCH3",320,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH3",321,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",322,0)
 ;                    multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",323,0)
 ;          COMIEN  - IEN of the currently displayed Patient Policy Comment
"RTN","IBCNCH3",324,0)
 ;          FOUNDTXT- Array of Patient Policy Comment IENS Where the search
"RTN","IBCNCH3",325,0)
 ;                    text was found
"RTN","IBCNCH3",326,0)
 ; Output:  Next Patient Policy Comment is displayed
"RTN","IBCNCH3",327,0)
 ;          COMIEN  - IEN of the next Patient Policy Comment to display
"RTN","IBCNCH3",328,0)
 N XX
"RTN","IBCNCH3",329,0)
 S VALMBCK="R"
"RTN","IBCNCH3",330,0)
 S XX=FOUNDTXT(1,COMIEN),XX=$O(FOUNDTXT(0,XX))
"RTN","IBCNCH3",331,0)
 I XX="" D  Q
"RTN","IBCNCH3",332,0)
 . W !!,*7,"No more comments with the search text were found."
"RTN","IBCNCH3",333,0)
 . D PAUSE^VALM1
"RTN","IBCNCH3",334,0)
 S COMIEN=FOUNDTXT(0,XX)
"RTN","IBCNCH3",335,0)
 D CLEAN^VALM10
"RTN","IBCNCH3",336,0)
 D HDR,INIT
"RTN","IBCNCH3",337,0)
 Q
"RTN","IBCNCH3",338,0)
 ;
"RTN","IBCNCH3",339,0)
PREVCOM ;EP
"RTN","IBCNCH3",340,0)
 ; Protocol action to show the previous comment with the found Search text
"RTN","IBCNCH3",341,0)
 ; Input:   DFN     - IEN of the selected Patient
"RTN","IBCNCH3",342,0)
 ;          IBIIEN  - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNCH3",343,0)
 ;                    multiple IEN of the selected Patient Policy
"RTN","IBCNCH3",344,0)
 ;          FOUNDTXT- Array of Patient Policy Comment IENS Where the search
"RTN","IBCNCH3",345,0)
 ;                    text was found
"RTN","IBCNCH3",346,0)
 ; Output:  Next Patient Policy Comment is displayed
"RTN","IBCNCH3",347,0)
 ;          COMIENS - Updated Index into the FOUNDTXT array of the Patient
"RTN","IBCNCH3",348,0)
 ;                    Policy Comment currently being shown
"RTN","IBCNCH3",349,0)
 N XX
"RTN","IBCNCH3",350,0)
 S VALMBCK="R"
"RTN","IBCNCH3",351,0)
 S XX=FOUNDTXT(1,COMIEN),XX=$O(FOUNDTXT(0,XX),-1)
"RTN","IBCNCH3",352,0)
 I XX="" D  Q
"RTN","IBCNCH3",353,0)
 . W !!,*7,"First comment with the search text is already being displayed."
"RTN","IBCNCH3",354,0)
 . D PAUSE^VALM1
"RTN","IBCNCH3",355,0)
 S COMIEN=FOUNDTXT(0,XX)
"RTN","IBCNCH3",356,0)
 D CLEAN^VALM10
"RTN","IBCNCH3",357,0)
 D HDR,INIT
"RTN","IBCNCH3",358,0)
 Q
"RTN","IBCNEDE")
0^63^B35084322
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;07-MAY-2015
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,497,549**;21-MAR-94;Build 54
"RTN","IBCNEDE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 ;
"RTN","IBCNEDE",25,0)
 ; IB*2.0*549 - Quit if Nightly Extract Master switch is off
"RTN","IBCNEDE",26,0)
 Q:$$GET1^DIQ(350.9,"1,",51.28,"I")="N"
"RTN","IBCNEDE",27,0)
 ;
"RTN","IBCNEDE",28,0)
 N $ES,$ET
"RTN","IBCNEDE",29,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",30,0)
 ; Check lock
"RTN","IBCNEDE",31,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",32,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",33,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",34,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",35,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",36,0)
 ;  the existing utility
"RTN","IBCNEDE",37,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",40,0)
 ; before the extract is run
"RTN","IBCNEDE",41,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",42,0)
 ;
"RTN","IBCNEDE",43,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",44,0)
 ;
"RTN","IBCNEDE",45,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",46,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",47,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",48,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",49,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",50,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",51,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",52,0)
 ; Send enrollment message
"RTN","IBCNEDE",53,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",54,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",55,0)
 I '$G(QFL) D
"RTN","IBCNEDE",56,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",57,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",58,0)
 . KILL QFL
"RTN","IBCNEDE",59,0)
 . ;
"RTN","IBCNEDE",60,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",61,0)
 ;
"RTN","IBCNEDE",62,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",63,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",64,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",65,0)
 D DSTQ        ; queue daily statistical message to FSC
"RTN","IBCNEDE",66,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",67,0)
 ;  eligible to be purged
"RTN","IBCNEDE",68,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",69,0)
 ;
"RTN","IBCNEDE",70,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",71,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",72,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",73,0)
 Q
"RTN","IBCNEDE",74,0)
 ;
"RTN","IBCNEDE",75,0)
TBLCHK() ;
"RTN","IBCNEDE",76,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",77,0)
 ; have been loaded
"RTN","IBCNEDE",78,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",79,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",80,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",81,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",82,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",83,0)
 I PAYOK D
"RTN","IBCNEDE",84,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",85,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",86,0)
 ;
"RTN","IBCNEDE",87,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",88,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",89,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",90,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",91,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",92,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",93,0)
 . Q:QFL'=""
"RTN","IBCNEDE",94,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",95,0)
 KILL CT
"RTN","IBCNEDE",96,0)
 Q
"RTN","IBCNEDE",97,0)
 ;
"RTN","IBCNEDE",98,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",99,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",100,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",101,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",102,0)
 N STALEDT
"RTN","IBCNEDE",103,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",104,0)
 Q STALEDT
"RTN","IBCNEDE",105,0)
 ;
"RTN","IBCNEDE",106,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",107,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",108,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",109,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",110,0)
 ;
"RTN","IBCNEDE",111,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",112,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",113,0)
 ;
"RTN","IBCNEDE",114,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",115,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",116,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",117,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",118,0)
 ;
"RTN","IBCNEDE",119,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",120,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",121,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",122,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",123,0)
 ;
"RTN","IBCNEDE",124,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",125,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",126,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",127,0)
 ;
"RTN","IBCNEDE",128,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",129,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",130,0)
 ;
"RTN","IBCNEDE",131,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",132,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",133,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",134,0)
 S ZTIO=""
"RTN","IBCNEDE",135,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",136,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",137,0)
 ;
"RTN","IBCNEDE",138,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",139,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",140,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",141,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",142,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",143,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",144,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",145,0)
 ;
"RTN","IBCNEDE",146,0)
MMQX ;
"RTN","IBCNEDE",147,0)
 Q
"RTN","IBCNEDE",148,0)
 ;
"RTN","IBCNEDE",149,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",150,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",151,0)
 D ^%ZTER
"RTN","IBCNEDE",152,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",153,0)
 Q
"RTN","IBCNEDE",154,0)
 ;
"RTN","IBCNEDE",155,0)
DSTQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",156,0)
 ; sending of the daily statistical message to FSC.
"RTN","IBCNEDE",157,0)
 ;
"RTN","IBCNEDE",158,0)
 N IIV,CURRTIME,MTIME,MSG,MGRP
"RTN","IBCNEDE",159,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",160,0)
 ;
"RTN","IBCNEDE",161,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",162,0)
 I '$P(IIV,U,3) G DSTQX          ; MM message time is not defined
"RTN","IBCNEDE",163,0)
 ;
"RTN","IBCNEDE",164,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",165,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",166,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",167,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",168,0)
 ;
"RTN","IBCNEDE",169,0)
 ; If the current time is after the MailMan message time, then schedule the message for tomorrow at that time.
"RTN","IBCNEDE",170,0)
 ; Otherwise, schedule it for later today.
"RTN","IBCNEDE",171,0)
 S ZTDTH=$S(CURRTIME>MTIME:$H+1,1:+$H)_","_MTIME
"RTN","IBCNEDE",172,0)
 ;
"RTN","IBCNEDE",173,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",174,0)
 S ZTRTN="EN1^IBCNEHLM"
"RTN","IBCNEDE",175,0)
 S ZTDESC="eIV Daily Statistics HL7 Message"
"RTN","IBCNEDE",176,0)
 S ZTIO=""
"RTN","IBCNEDE",177,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",178,0)
 I $G(ZTSK) G DSTQX    ; Task# is OK so get out
"RTN","IBCNEDE",179,0)
 ;
"RTN","IBCNEDE",180,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",181,0)
 S MSG(1)="TaskManager could not schedule the daily eIV Statistics HL7 message"
"RTN","IBCNEDE",182,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",183,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",184,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",185,0)
 S MGRP=$$MGRP^IBCNEUT5() I MGRP'="" D MSG^IBCNEUT5(MGRP,"eIV Statistical HL7 Message Not Sent","MSG(")
"RTN","IBCNEDE",186,0)
 ;
"RTN","IBCNEDE",187,0)
DSTQX ;
"RTN","IBCNEDE",188,0)
 Q
"RTN","IBCNEDE1")
0^64^B49194842
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,435,467,497,528,549**;21-MAR-94;Build 54
"RTN","IBCNEDE1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when appropriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME,PREL,IFSRC
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S IFSRC=$O(^IBE(355.12,"C","INTERFACILITY INS UPDATE",""))  ;10/24/14 *528* baa
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",31,0)
 ;
"RTN","IBCNEDE1",32,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",33,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",34,0)
 ;
"RTN","IBCNEDE1",35,0)
 S LOOPDT="" ; Date used to loop through the IB global
"RTN","IBCNEDE1",36,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 . S IEN=""
"RTN","IBCNEDE1",38,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",39,0)
 .. ;
"RTN","IBCNEDE1",40,0)
 .. ; IBCN 10/24/14 *528* baa
"RTN","IBCNEDE1",41,0)
 .. ;  prevent when SOURCE OF INFORMATION field = "Inter-facility Insurance update.
"RTN","IBCNEDE1",42,0)
 .. I $P($G(^IBA(355.33,IEN,0)),U,3)=IFSRC Q
"RTN","IBCNEDE1",43,0)
 .. ; IBCN END MOD
"RTN","IBCNEDE1",44,0)
 .. ;
"RTN","IBCNEDE1",45,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",46,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",47,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",48,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",51,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",52,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",53,0)
 .. ; Don't extract ePharmacy buffer entries - IB*2*435
"RTN","IBCNEDE1",54,0)
 .. I +$P($G(^IBA(355.33,IEN,0)),U,17) Q
"RTN","IBCNEDE1",55,0)
 .. ;
"RTN","IBCNEDE1",56,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",57,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",58,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",59,0)
 .. ;
"RTN","IBCNEDE1",60,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",61,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",62,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",63,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",64,0)
 .. ;
"RTN","IBCNEDE1",65,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",66,0)
 .. S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18)
"RTN","IBCNEDE1",67,0)
 .. S:'SRVICEDT SRVICEDT=DT                         ; Service Date
"RTN","IBCNEDE1",68,0)
 .. ;
"RTN","IBCNEDE1",69,0)
 .. ; IB*2.0*549 Removed following line
"RTN","IBCNEDE1",70,0)
 .. ;I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNEDE1",71,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",72,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",73,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",74,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",75,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",76,0)
 .. ;
"RTN","IBCNEDE1",77,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",78,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",79,0)
 .. ;
"RTN","IBCNEDE1",80,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",83,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",84,0)
 .. ;
"RTN","IBCNEDE1",85,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",86,0)
 .. ;  date range
"RTN","IBCNEDE1",87,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",88,0)
 .. ;
"RTN","IBCNEDE1",89,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",90,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",91,0)
 .. ;
"RTN","IBCNEDE1",92,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",93,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",94,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",95,0)
 .. ;
"RTN","IBCNEDE1",96,0)
 .. ; set pat. relationship to "self" if it's blank
"RTN","IBCNEDE1",97,0)
 .. D SETREL(IEN)
"RTN","IBCNEDE1",98,0)
 .. ;
"RTN","IBCNEDE1",99,0)
 .. ; make sure that service type codes are set
"RTN","IBCNEDE1",100,0)
 .. I '+$G(^IBA(355.33,IEN,80)) D SETSTC^IBCNERTQ(IEN)
"RTN","IBCNEDE1",101,0)
 .. ;
"RTN","IBCNEDE1",102,0)
 .. ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNEDE1",103,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",104,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",105,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",106,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",107,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",108,0)
 .. ; not included
"RTN","IBCNEDE1",109,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",110,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",111,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",112,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",113,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",114,0)
 Q
"RTN","IBCNEDE1",115,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",116,0)
 ;
"RTN","IBCNEDE1",117,0)
 K SIDARRAY
"RTN","IBCNEDE1",118,0)
 S BSID=$P($G(^IBA(355.33,IEN,90)),U,3)   ; Subscriber ID from buffer (IB*2.0*497 - vd)
"RTN","IBCNEDE1",119,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U)    ; Patient ID from buffer
"RTN","IBCNEDE1",120,0)
 S PREL=$P($G(^IBA(355.33,IEN,60)),U,14)  ; Pat. relationship from buffer
"RTN","IBCNEDE1",121,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",122,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",123,0)
 S SIDCNT=$P(SIDDATA,U,2)                 ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",124,0)
 ;
"RTN","IBCNEDE1",125,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q   ; update buffer w/ bang & quit - no subscriber id
"RTN","IBCNEDE1",126,0)
 I PREL'=18 D  Q
"RTN","IBCNEDE1",127,0)
 .I PATID="" D BUFF^IBCNEUT2(IEN,23) Q  ; update buffer w/ bang & quit - no patient id
"RTN","IBCNEDE1",128,0)
 .D SET(IEN,OVRFRESH,1,"") ; set TQ entry
"RTN","IBCNEDE1",129,0)
 .Q
"RTN","IBCNEDE1",130,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",131,0)
 S SID=""
"RTN","IBCNEDE1",132,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",133,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",134,0)
 Q
"RTN","IBCNEDE1",135,0)
 ;
"RTN","IBCNEDE1",136,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",137,0)
 ;
"RTN","IBCNEDE1",138,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",139,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,90)) ; Original group string (IB*2.0*497 - vd)
"RTN","IBCNEDE1",140,0)
 S ORGRPNUM=$P(ORGRPSTR,U,2) ;Original group number (IB*2.0*497 - vd)
"RTN","IBCNEDE1",141,0)
 S ORGRPNAM=$P(ORGRPSTR,U,1) ;Original group name (IB*2.0*497 - vd)
"RTN","IBCNEDE1",142,0)
 S ORGSUBCR=$P(ORGRPSTR,U,3) ; Original subscriber (IB*2.0*497 - vd)
"RTN","IBCNEDE1",143,0)
 ;
"RTN","IBCNEDE1",144,0)
 Q
"RTN","IBCNEDE1",145,0)
 ;
"RTN","IBCNEDE1",146,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",147,0)
 D RET
"RTN","IBCNEDE1",148,0)
 ;
"RTN","IBCNEDE1",149,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",150,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",151,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",152,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",153,0)
 ;
"RTN","IBCNEDE1",154,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",155,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",156,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",157,0)
 ;
"RTN","IBCNEDE1",158,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",159,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",160,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",161,0)
 ;
"RTN","IBCNEDE1",162,0)
 Q
"RTN","IBCNEDE1",163,0)
 ;
"RTN","IBCNEDE1",164,0)
SETREL(IEN) ; set pat. relationship to "self"
"RTN","IBCNEDE1",165,0)
 N DA,DIE,DR,X,Y
"RTN","IBCNEDE1",166,0)
 I $P($G(^IBA(355.33,IEN,60)),U,14)="" S DIE="^IBA(355.33,",DA=IEN,DR="60.14///SELF" D ^DIE
"RTN","IBCNEDE1",167,0)
 Q
"RTN","IBCNEDE2")
0^65^B81972539
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;23-SEP-2015
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416,438,506,549**;21-MAR-94;Build 54
"RTN","IBCNEDE2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 ; IB*2.0*549 - Added YY,ZZ, Re-Arranged in alphabetical order
"RTN","IBCNEDE2",16,0)
 N ACTINS,APTDT,CLNC,CNT,DATA1,DATA2,DFN,DISYS,ELG,ENDDT,FOUND1,FOUND2,FRESHDAY
"RTN","IBCNEDE2",17,0)
 N FRESHDT,GIEN,IBCNETOT,IBDDI,IBINDT,IBINS,IBSDA,IBSDATA,IBOUTP,INREC,INS,INSIEN,INSNAME
"RTN","IBCNEDE2",18,0)
 N MAXCNT,MCAREFLG,NUM,OK,PATID,PAYER,PAYERID,PAYERSTR,PIEN
"RTN","IBCNEDE2",19,0)
 N SETSTR,SID,SIDACT,SIDARRAY,SIDCNT,SIDDATA,SLCCRIT1,SRVICEDT,SUPPBUFF,SYMBOL
"RTN","IBCNEDE2",20,0)
 N TODAYSDT,TQIEN,QURYFLAG,VAIN,VDATE,YY,ZZ
"RTN","IBCNEDE2",21,0)
 ;
"RTN","IBCNEDE2",22,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",23,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",24,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",25,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",27,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",29,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",30,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",31,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",32,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",33,0)
 ;
"RTN","IBCNEDE2",34,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",35,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",36,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",37,0)
 . ;
"RTN","IBCNEDE2",38,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",39,0)
 . ;
"RTN","IBCNEDE2",40,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",41,0)
 ;
"RTN","IBCNEDE2",42,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",43,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",44,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",45,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",46,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",47,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",48,0)
 ;
"RTN","IBCNEDE2",49,0)
 ;
"RTN","IBCNEDE2",50,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",51,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",52,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",53,0)
 . ;
"RTN","IBCNEDE2",54,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",55,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",56,0)
 .. ;
"RTN","IBCNEDE2",57,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",58,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",59,0)
 .. ;
"RTN","IBCNEDE2",60,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",61,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",62,0)
 ... ;
"RTN","IBCNEDE2",63,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",64,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",65,0)
 ... ;
"RTN","IBCNEDE2",66,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",67,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",68,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",69,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",70,0)
 ... ;
"RTN","IBCNEDE2",71,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",72,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",73,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",74,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",75,0)
 ... ; IB*2.0*549 removed the following line
"RTN","IBCNEDE2",76,0)
 ... ;I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",77,0)
 ... ;
"RTN","IBCNEDE2",78,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",79,0)
 ... ;
"RTN","IBCNEDE2",80,0)
 ... K ACTINS
"RTN","IBCNEDE2",81,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",82,0)
 ... ;
"RTN","IBCNEDE2",83,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",84,0)
 ... ;
"RTN","IBCNEDE2",85,0)
 ... S INREC=0 ; Record IEN
"RTN","IBCNEDE2",86,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",87,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",88,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",89,0)
 ... . ;
"RTN","IBCNEDE2",90,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Coverages
"RTN","IBCNEDE2",91,0)
 ... . S ZZ=$$GET1^DIQ(36,INSIEN_",",.13,"I")   ; Type of Coverage
"RTN","IBCNEDE2",92,0)
 ... . S YY=$$GETELST(355.2)                    ; Type of Coverages to exclude
"RTN","IBCNEDE2",93,0)
 ... . Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Coverage
"RTN","IBCNEDE2",94,0)
 ... . ;
"RTN","IBCNEDE2",95,0)
 ... . ; Exclude policies that have been verified within "freshness days"
"RTN","IBCNEDE2",96,0)
 ... . S VDATE=$P($G(ACTINS(INREC,1)),U,3)
"RTN","IBCNEDE2",97,0)
 ... . I VDATE'="",SRVICEDT'>$$FMADD^XLFDT(VDATE,FRESHDAY) Q
"RTN","IBCNEDE2",98,0)
 ... . ; Allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",99,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",100,0)
 ... . ; Exclude pharmacy policies IB*2.0*549 - Commented out following line
"RTN","IBCNEDE2",101,0)
 ... . ;I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",102,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",103,0)
 ... . ;
"RTN","IBCNEDE2",104,0)
 ... . ; IB*2.0*549 Added next 3 lines to exclude certain Type of Plans
"RTN","IBCNEDE2",105,0)
 ... . S ZZ=$$GET1^DIQ(355.3,GIEN_",",.09,"I")  ; Type of Plan
"RTN","IBCNEDE2",106,0)
 ... . S YY=$$GETELST(355.1)                    ; Type of Plans to exclude
"RTN","IBCNEDE2",107,0)
 ... . Q:YY[("^"_ZZ_"^")                        ; Excluded Type of Plan
"RTN","IBCNEDE2",108,0)
 ... . ;
"RTN","IBCNEDE2",109,0)
 ... . ;I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q  ; IB*2.0*549 - Removed line
"RTN","IBCNEDE2",110,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",111,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",112,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",113,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",114,0)
 ... . ;
"RTN","IBCNEDE2",115,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",116,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",117,0)
 ... . ;
"RTN","IBCNEDE2",118,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",119,0)
 ... . ;
"RTN","IBCNEDE2",120,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",121,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",122,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",123,0)
 ... . ;
"RTN","IBCNEDE2",124,0)
 ... . ; If Payer is Nationally Inactive create an Insurance Buffer record w/blank SYMBOL & quit. - IB*2.0*506
"RTN","IBCNEDE2",125,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) D  Q
"RTN","IBCNEDE2",126,0)
 ... .. S SYMBOL=""
"RTN","IBCNEDE2",127,0)
 ... .. I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",128,0)
 ... .. Q
"RTN","IBCNEDE2",129,0)
 ... . ;
"RTN","IBCNEDE2",130,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",131,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",132,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",133,0)
 ... . ;
"RTN","IBCNEDE2",134,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",135,0)
 ... . ;  date range
"RTN","IBCNEDE2",136,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",137,0)
 ... . ;
"RTN","IBCNEDE2",138,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",139,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",140,0)
 ... . ;
"RTN","IBCNEDE2",141,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",142,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",143,0)
 ... . ;
"RTN","IBCNEDE2",144,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",145,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",146,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",147,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",148,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",149,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",150,0)
 ... . ;
"RTN","IBCNEDE2",151,0)
 ... . S SID=""
"RTN","IBCNEDE2",152,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",153,0)
 ... . I SIDACT=4 D
"RTN","IBCNEDE2",154,0)
 ... . . D SET("","",PATID)
"RTN","IBCNEDE2",155,0)
 ... . . S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",156,0)
 ... . Q
"RTN","IBCNEDE2",157,0)
 ... Q
"RTN","IBCNEDE2",158,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",159,0)
 Q
"RTN","IBCNEDE2",160,0)
 ;
"RTN","IBCNEDE2",161,0)
GETELST(FILE) ; Returns a '^' delimited list of Type of Plans or Type of
"RTN","IBCNEDE2",162,0)
 ; coverages to be excluded with leading and trailing '^'s
"RTN","IBCNEDE2",163,0)
 ; IB*2.0*549 Added method
"RTN","IBCNEDE2",164,0)
 ; Input: FILE  - 355.1 - Return a list of Type of Plans to be excluded
"RTN","IBCNEDE2",165,0)
 ;                355.2 - Return a list of Type of Coverages to be excluded
"RTN","IBCNEDE2",166,0)
 ; Returns: '^' delimited list of Type of Plans or Type of Coverages
"RTN","IBCNEDE2",167,0)
 ;          to be excluded
"RTN","IBCNEDE2",168,0)
 N EXCLIST,IEN,NM,XX
"RTN","IBCNEDE2",169,0)
 S EXCLIST="",NM("AUTOMOBILE")="",NM("MEDI-CAL")="",NM("TORT FEASOR")=""
"RTN","IBCNEDE2",170,0)
 S NM("WORKERS' COMPENSATION INSURANCE")="",NM("VA SPECIAL CLASS")=""
"RTN","IBCNEDE2",171,0)
 S NM("MEDICAID")=""
"RTN","IBCNEDE2",172,0)
 S XX=""
"RTN","IBCNEDE2",173,0)
 F  D  Q:XX=""
"RTN","IBCNEDE2",174,0)
 . S XX=$O(NM(XX))
"RTN","IBCNEDE2",175,0)
 . Q:XX=""
"RTN","IBCNEDE2",176,0)
 . S IEN=""
"RTN","IBCNEDE2",177,0)
 . F  D  Q:IEN=""
"RTN","IBCNEDE2",178,0)
 . . S IEN=$O(^IBE(FILE,"B",XX,IEN))
"RTN","IBCNEDE2",179,0)
 . . Q:IEN=""
"RTN","IBCNEDE2",180,0)
 . . S EXCLIST=$S(EXCLIST="":IEN,1:EXCLIST_"^"_IEN)
"RTN","IBCNEDE2",181,0)
 Q "^"_EXCLIST_"^"
"RTN","IBCNEDE2",182,0)
 ;
"RTN","IBCNEDE2",183,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",184,0)
 S OK=1
"RTN","IBCNEDE2",185,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",186,0)
 Q
"RTN","IBCNEDE2",187,0)
 ;
"RTN","IBCNEDE2",188,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",189,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",190,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",191,0)
 S OK=1
"RTN","IBCNEDE2",192,0)
 Q
"RTN","IBCNEDE2",193,0)
 ;
"RTN","IBCNEDE2",194,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",195,0)
 D INP^VADPT
"RTN","IBCNEDE2",196,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",197,0)
 K VAIN
"RTN","IBCNEDE2",198,0)
 S OK=1
"RTN","IBCNEDE2",199,0)
 Q
"RTN","IBCNEDE2",200,0)
 ;
"RTN","IBCNEDE2",201,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",202,0)
 ;
"RTN","IBCNEDE2",203,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",204,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",205,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",206,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",207,0)
 ;
"RTN","IBCNEDE2",208,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",209,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",210,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",211,0)
 ;
"RTN","IBCNEDE2",212,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",213,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",214,0)
 ;
"RTN","IBCNEDE2",215,0)
 Q
"RTN","IBCNEDE2",216,0)
 ;
"RTN","IBCNEDE2",217,0)
ERRMSG ; Send a message indicating an extract error has occurred
"RTN","IBCNEDE2",218,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",219,0)
 ;
"RTN","IBCNEDE2",220,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",221,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",222,0)
 ;
"RTN","IBCNEDE2",223,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",224,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",225,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",226,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",227,0)
 S MSG(4)=""
"RTN","IBCNEDE2",228,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",229,0)
 S MSG(6)=""
"RTN","IBCNEDE2",230,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",231,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",232,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",233,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",234,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",235,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",236,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",237,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",238,0)
 ;
"RTN","IBCNEDE2",239,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",240,0)
 ;
"RTN","IBCNEDE2",241,0)
 Q
"RTN","IBCNEDE2",242,0)
 ;
"RTN","IBCNEDE2",243,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",244,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",245,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",246,0)
 N X1,X2
"RTN","IBCNEDE2",247,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",248,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",249,0)
 Q 0
"RTN","IBCNEDE5")
0^66^B29541392
"RTN","IBCNEDE5",1,0)
IBCNEDE5 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,497,549**;21-MAR-94;Build 54
"RTN","IBCNEDE5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDE5",4,0)
 ;
"RTN","IBCNEDE5",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE5",6,0)
 ;
"RTN","IBCNEDE5",7,0)
SIDCHK(PIEN,DFN,BSID,SIDARRAY,FRESHDT) ; Checks the flag setting of
"RTN","IBCNEDE5",8,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",9,0)
 ; delimited string.  The first value is between 1 and 5 telling the
"RTN","IBCNEDE5",10,0)
 ; calling program what action(s) it should perform. The 2nd piece
"RTN","IBCNEDE5",11,0)
 ; indicates the Subcriber ID that the calling program should use for
"RTN","IBCNEDE5",12,0)
 ; setting the Subscriber IDs in the eIV Transmission Queue file (365.1).
"RTN","IBCNEDE5",13,0)
 ; The calling program is to address the blank Sub IDs.
"RTN","IBCNEDE5",14,0)
 ;
"RTN","IBCNEDE5",15,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",16,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",17,0)
 ; INREC - Insurance IEN of Patients record (subfile 2.312)
"RTN","IBCNEDE5",18,0)
 ; BSID - Subscriber ID from buffer file (file 355.33 field 60.04)
"RTN","IBCNEDE5",19,0)
 ; SIDARRAY - Array of active subscribers
"RTN","IBCNEDE5",20,0)
 ; FRESHDT - Freshness Date - used for checking verified date
"RTN","IBCNEDE5",21,0)
 ;
"RTN","IBCNEDE5",22,0)
 ; Logic to follow:
"RTN","IBCNEDE5",23,0)
 ;
"RTN","IBCNEDE5",24,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",25,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",26,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",27,0)
 ; YES        YES     1     1 Verification TQ entry w/ Sub ID
"RTN","IBCNEDE5",28,0)
 ; YES        NO      3     new buffer entry or modify existing saying manual verification required
"RTN","IBCNEDE5",29,0)
 ; NO         NO      4     1 Ver. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",30,0)
 ;
"RTN","IBCNEDE5",31,0)
 ; * Note: The insurance record found with the proper PIEN will only be
"RTN","IBCNEDE5",32,0)
 ;         picked up if the insurance policy is active, and if the insurance
"RTN","IBCNEDE5",33,0)
 ;         policy hasn't been verified within the Freshness period.
"RTN","IBCNEDE5",34,0)
 ;
"RTN","IBCNEDE5",35,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ
"RTN","IBCNEDE5",36,0)
 N INSSTR,INSSTR1,INSSTR7,SYMBOL,EXP,SUBID,SUBIDS,SIDCNT,INREC,MVER,VFLG,MCRTQ
"RTN","IBCNEDE5",37,0)
 ;
"RTN","IBCNEDE5",38,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",39,0)
 ;
"RTN","IBCNEDE5",40,0)
 ; if the subscriber ID from the buffer extract exists, this is the only entry
"RTN","IBCNEDE5",41,0)
 I $G(BSID)'="" D  G SIDCHKX
"RTN","IBCNEDE5",42,0)
 . S SID=BSID,(SIDACT,SIDCNT)=1
"RTN","IBCNEDE5",43,0)
 . S SIDARRAY($$STRIP(SID,,DFN)_"_")=""
"RTN","IBCNEDE5",44,0)
 . Q
"RTN","IBCNEDE5",45,0)
 ;
"RTN","IBCNEDE5",46,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",47,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",48,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",49,0)
 ;
"RTN","IBCNEDE5",50,0)
 S INSSTR="",SIDCNT=0,INREC=$O(^DPT(DFN,.312,0)),MCRTQ=0 S:'INREC INREC=1
"RTN","IBCNEDE5",51,0)
 ;
"RTN","IBCNEDE5",52,0)
 I $D(BSID),BSID="" G SIDC1
"RTN","IBCNEDE5",53,0)
 ;
"RTN","IBCNEDE5",54,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC
"RTN","IBCNEDE5",55,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",56,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",57,0)
 . S INSSTR7=$G(^DPT(DFN,.312,INREC,7))    ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",58,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",59,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",60,0)
 .. N MCRPYR
"RTN","IBCNEDE5",61,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",62,0)
 .. ;
"RTN","IBCNEDE5",63,0)
 .. S MCRPYR=0                                           ; Medicare payer flag
"RTN","IBCNEDE5",64,0)
 .. I PIEN=+$P($G(^IBE(350.9,1,51)),U,25) S MCRPYR=1     ; this is the Medicare payer
"RTN","IBCNEDE5",65,0)
 .. I MCRPYR,MCRTQ Q      ; the Medicare payer is already in the array
"RTN","IBCNEDE5",66,0)
 .. ;
"RTN","IBCNEDE5",67,0)
 .. S SUBID=$P(INSSTR7,U,2)                ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",68,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",69,0)
 .. I $P(INSSTR,U,8)>DT Q                  ; future effective date
"RTN","IBCNEDE5",70,0)
 .. S EXP=$P(INSSTR,U,4) I EXP,EXP<DT Q    ; expired
"RTN","IBCNEDE5",71,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",72,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q     ; verified recently
"RTN","IBCNEDE5",73,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",74,0)
 .. I $D(SIDARRAY(SUBIDS_"_"_INREC)) Q            ; already in the array
"RTN","IBCNEDE5",75,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",76,0)
 .. I MCRPYR S MCRTQ=1     ; flag indicating Medicare payer is in the array
"RTN","IBCNEDE5",77,0)
 .. Q
"RTN","IBCNEDE5",78,0)
 . ;
"RTN","IBCNEDE5",79,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",80,0)
 . Q
"RTN","IBCNEDE5",81,0)
 ;
"RTN","IBCNEDE5",82,0)
 I SIDCNT S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",83,0)
 I 'SIDCNT,VFLG S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",84,0)
SIDC1 ;
"RTN","IBCNEDE5",85,0)
 S SIDACT=$S(SIDREQ:3,1:4)
"RTN","IBCNEDE5",86,0)
 ;
"RTN","IBCNEDE5",87,0)
SIDCHKX ; EXIT POINT
"RTN","IBCNEDE5",88,0)
 ;
"RTN","IBCNEDE5",89,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",90,0)
 ;
"RTN","IBCNEDE5",91,0)
SSN(DFN) ; Get Patient SSN and update SIDARRAY, if needed
"RTN","IBCNEDE5",92,0)
 S SSN=$$GETSSN(DFN)
"RTN","IBCNEDE5",93,0)
 N SSNS
"RTN","IBCNEDE5",94,0)
 S SSNS=$$STRIP(SSN,1,DFN)
"RTN","IBCNEDE5",95,0)
 I $P($O(SIDARRAY(SSNS_"_")),"_")=SSNS Q
"RTN","IBCNEDE5",96,0)
 I SSNS'="",'$D(SIDARRAY(SSNS_"_")) S SIDARRAY(SSNS_"_")="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",97,0)
 Q
"RTN","IBCNEDE5",98,0)
 ;
"RTN","IBCNEDE5",99,0)
GETSSN(DFN) ; Get Patient SSN
"RTN","IBCNEDE5",100,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDE5",101,0)
 Q $P($G(^DPT(DFN,0)),U,9)
"RTN","IBCNEDE5",102,0)
 ;
"RTN","IBCNEDE5",103,0)
STRIP(ID,SS,DFN) ; Strip dashes and spaces if ssn
"RTN","IBCNEDE5",104,0)
 ;         ID can be ssn or subid
"RTN","IBCNEDE5",105,0)
 ;         if SS, ssn is being passed
"RTN","IBCNEDE5",106,0)
 N SSN,IDS,IDB
"RTN","IBCNEDE5",107,0)
 S SS=$G(SS)
"RTN","IBCNEDE5",108,0)
 ; If a ssn is passed, strip dashes and spaces
"RTN","IBCNEDE5",109,0)
 I SS Q $TR(ID,"- ")
"RTN","IBCNEDE5",110,0)
 ; If not ssn format, do not strip
"RTN","IBCNEDE5",111,0)
 S IDB=$TR(ID," ")
"RTN","IBCNEDE5",112,0)
 I IDB'?3N1"-"2N1"-"4N,IDB'?9N Q ID
"RTN","IBCNEDE5",113,0)
 ; Compare w/SSN - if it matches, strip dashes and spaces
"RTN","IBCNEDE5",114,0)
 S IDS=$TR(ID,"- ")
"RTN","IBCNEDE5",115,0)
 S SSN=$TR($$GETSSN(DFN),"- ")
"RTN","IBCNEDE5",116,0)
 I SSN=IDS Q IDS
"RTN","IBCNEDE5",117,0)
 Q ID
"RTN","IBCNEDE5",118,0)
 ;
"RTN","IBCNEDE5",119,0)
SIDCHK2(DFN,PIEN,SIDARRAY,FRESHDT) ;Checks the flag setting of 
"RTN","IBCNEDE5",120,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",121,0)
 ; delimited string.  The first value is between 1 and 8 telling the
"RTN","IBCNEDE5",122,0)
 ; calling program what action(s) it should perform.  The 2nd piece
"RTN","IBCNEDE5",123,0)
 ; indicates the number of unique Subscriber IDs found for the patient/payer
"RTN","IBCNEDE5",124,0)
 ; combo.  In addition, a local array of Subcriber IDs are passed back by
"RTN","IBCNEDE5",125,0)
 ; reference that the calling program should use for setting the Subscriber
"RTN","IBCNEDE5",126,0)
 ; IDs in eIV Transmission Queue file (#365.1).  The calling program is to
"RTN","IBCNEDE5",127,0)
 ; address the blank Sub IDs.
"RTN","IBCNEDE5",128,0)
 ;
"RTN","IBCNEDE5",129,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",130,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",131,0)
 ; SIDARRAY - Local array passed by reference.  This function returns
"RTN","IBCNEDE5",132,0)
 ;            the array populated with the possible Subscriber IDs for
"RTN","IBCNEDE5",133,0)
 ;            that patient/payer combination.
"RTN","IBCNEDE5",134,0)
 ; FRESHDT - Freshness date used for checking last verified condition
"RTN","IBCNEDE5",135,0)
 ;
"RTN","IBCNEDE5",136,0)
 ; Logic to follow:
"RTN","IBCNEDE5",137,0)
 ;
"RTN","IBCNEDE5",138,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",139,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",140,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",141,0)
 ; YES       YES     3     1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",142,0)
 ; YES       NO      4     No TQ entries (may flag as error)
"RTN","IBCNEDE5",143,0)
 ; NO        YES     5     1 Iden. TQ entry w/ blank Sub ID, & 1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",144,0)
 ; NO        NO      6     1 Iden. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",145,0)
 ;
"RTN","IBCNEDE5",146,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,INSSTR,INSSTR1,INSSTR7,INREC
"RTN","IBCNEDE5",147,0)
 N SYMBOL,SUBID,SUBIDS,SIDCNT,MVER,VFLG
"RTN","IBCNEDE5",148,0)
 ;
"RTN","IBCNEDE5",149,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",150,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",151,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",152,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",153,0)
 S INSSTR="",(SID,SIDCNT)=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",154,0)
 ;
"RTN","IBCNEDE5",155,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC!VFLG
"RTN","IBCNEDE5",156,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",157,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",158,0)
 . S INSSTR7=$G(^DPT(DFN,.312,INREC,7))    ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",159,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",160,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",161,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",162,0)
 .. S SUBID=$P(INSSTR7,U,2)       ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",163,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",164,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",165,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q    ; verified recently
"RTN","IBCNEDE5",166,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",167,0)
 .. I $D(SIDARRAY(SUBIDS_"_")) Q            ; already in the array
"RTN","IBCNEDE5",168,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SID=1,SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",169,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",170,0)
 ;
"RTN","IBCNEDE5",171,0)
 I VFLG K SIDARRAY S SIDCNT=0,SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",172,0)
 I SIDREQ S SIDACT=$S(SID:3,1:4)
"RTN","IBCNEDE5",173,0)
 I 'SIDREQ S SIDACT=$S(SID:5,1:6)
"RTN","IBCNEDE5",174,0)
 ;
"RTN","IBCNEDE5",175,0)
SIDCK2X ; EXIT POINT
"RTN","IBCNEDE5",176,0)
 ;
"RTN","IBCNEDE5",177,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",178,0)
 ;
"RTN","IBCNEDEP")
0^67^B91001263
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;14-OCT-2015
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,506,533,549**;21-MAR-94;Build 54
"RTN","IBCNEDEP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    RETRYFLG = determines if a Transmitted message can be resent
"RTN","IBCNEDEP",11,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",12,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",13,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",15,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",16,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",17,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",18,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",19,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",20,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",21,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",22,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",23,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",24,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",25,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",26,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",27,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",28,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",29,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",30,0)
 ;
"RTN","IBCNEDEP",31,0)
EN ;  Entry point
"RTN","IBCNEDEP",32,0)
 ;
"RTN","IBCNEDEP",33,0)
 ;  Start processing of data
"RTN","IBCNEDEP",34,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",35,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",36,0)
 ;IB*533 RRA CREATE VARIABLES TO ACCOUNT FOR MAX SENT LIMITATIONS
"RTN","IBCNEDEP",37,0)
 N IBMAXCNT,IBSENT
"RTN","IBCNEDEP",38,0)
 S IBCNETOT=0,IBSENT=0
"RTN","IBCNEDEP",39,0)
 ;
"RTN","IBCNEDEP",40,0)
 S C1CODE=$O(^IBE(365.15,"B","C1",""))
"RTN","IBCNEDEP",41,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",42,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",43,0)
 S RETR=+$P(IBCNEP,U,6),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",44,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",45,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",46,0)
 S RETRYFLG=$P(IBCNEP,U,26)        ;set value to (#350.9, 51.26) - IB*2.0*506
"RTN","IBCNEDEP",47,0)
 S IBMAXCNT=$P(IBCNEP,U,15)   ;get HL7 MAXIMUM NUMBER - IB*533
"RTN","IBCNEDEP",48,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",49,0)
 ; Statuses
"RTN","IBCNEDEP",50,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",51,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",52,0)
 ;   4 = Hold
"RTN","IBCNEDEP",53,0)
 ;   6 = Retry
"RTN","IBCNEDEP",54,0)
 ;
"RTN","IBCNEDEP",55,0)
 ; If the status is 'HOLD' is this a 'Retry'?   -  IB*2.0*506
"RTN","IBCNEDEP",56,0)
 ;  DO HLD   ; this is not to be called unless the status of HOLD is reinstated...see HLD tag
"RTN","IBCNEDEP",57,0)
 ;  below and the code within ERROR^IBCNEHL3
"RTN","IBCNEDEP",58,0)
 ;
"RTN","IBCNEDEP",59,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",60,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",61,0)
 ;
"RTN","IBCNEDEP",62,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",63,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",64,0)
 S IEN=""
"RTN","IBCNEDEP",65,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",66,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",67,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",68,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",69,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",70,0)
 . ;
"RTN","IBCNEDEP",71,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",72,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",73,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",74,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",75,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",76,0)
 . ;
"RTN","IBCNEDEP",77,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",78,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",79,0)
 . ;
"RTN","IBCNEDEP",80,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",81,0)
 . I RETRYFLG="Y" D  Q     ; IB*2.0*506
"RTN","IBCNEDEP",82,0)
 .. ;
"RTN","IBCNEDEP",83,0)
 .. I '$$PYRACTV^IBCNEDE7(PAYR) Q    ; If Payer is not Nationally Active skip record  -  IB*2.0*506
"RTN","IBCNEDEP",84,0)
 .. ;
"RTN","IBCNEDEP",85,0)
 .. D SST^IBCNEUT2(IEN,6)    ; mark TQ entry status as 'retry'
"RTN","IBCNEDEP",86,0)
 .. Q
"RTN","IBCNEDEP",87,0)
 . ;
"RTN","IBCNEDEP",88,0)
 . D SST^IBCNEUT2(IEN,5)     ; if RETRYFLG=NO set TQ record to 'communication failure'
"RTN","IBCNEDEP",89,0)
 . ;
"RTN","IBCNEDEP",90,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",91,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",92,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",93,0)
 . ;
"RTN","IBCNEDEP",94,0)
 . ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",95,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",96,0)
 . ;
"RTN","IBCNEDEP",97,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",98,0)
 . ;
"RTN","IBCNEDEP",99,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",100,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",101,0)
 ;
"RTN","IBCNEDEP",102,0)
 ; Exit for stop request
"RTN","IBCNEDEP",103,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",104,0)
 ;
"RTN","IBCNEDEP",105,0)
RET ;  If status is 'Retry'     ; retries only exist if the RETRYFLG=YES - IB*2.0*506
"RTN","IBCNEDEP",106,0)
 S IEN=""
"RTN","IBCNEDEP",107,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",108,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",109,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",110,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",111,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",112,0)
 . ;
"RTN","IBCNEDEP",113,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",114,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",115,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",116,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",117,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",118,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",119,0)
 . ;
"RTN","IBCNEDEP",120,0)
 . ;  If retries are finished, set to communication failure  - IB*2.0*506
"RTN","IBCNEDEP",121,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",122,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",123,0)
 .. ;
"RTN","IBCNEDEP",124,0)
 .. ;  Set Buffer symbol to 'C1' (Comm Failure)    ; used to be 'B12' - ien of 15
"RTN","IBCNEDEP",125,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,C1CODE)        ; set to "#" communication failure - IB*2.0*506
"RTN","IBCNEDEP",126,0)
 .. ;
"RTN","IBCNEDEP",127,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",128,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",129,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",130,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",131,0)
 .. ;
"RTN","IBCNEDEP",132,0)
 .. ;I VERID="V" D CERE^IBCNEDEQ      ; removed IB*2.0*506
"RTN","IBCNEDEP",133,0)
 . ; If generating retry, set eIV status to comm failure (5) for
"RTN","IBCNEDEP",134,0)
 . ; remaining related responses
"RTN","IBCNEDEP",135,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",136,0)
 ;
"RTN","IBCNEDEP",137,0)
 ; Exit for stop request
"RTN","IBCNEDEP",138,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",139,0)
 ;
"RTN","IBCNEDEP",140,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",141,0)
 ;
"RTN","IBCNEDEP",142,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",143,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",144,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",145,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",146,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",147,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",148,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",149,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",150,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",151,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",152,0)
 ... S VNUM=4
"RTN","IBCNEDEP",153,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",154,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",155,0)
 ... S VNUM=1
"RTN","IBCNEDEP",156,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",157,0)
 ;
"RTN","IBCNEDEP",158,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",159,0)
 ;  or identifications
"RTN","IBCNEDEP",160,0)
 N IHCNT,IBSTOP
"RTN","IBCNEDEP",161,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",162,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:$G(ZTSTOP)!$G(QFL)=1!($G(IBSTOP)=1)
"RTN","IBCNEDEP",163,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",164,0)
 . ;D ID
"RTN","IBCNEDEP",165,0)
 ;
"RTN","IBCNEDEP",166,0)
EXIT ;  Finish
"RTN","IBCNEDEP",167,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",168,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",169,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",170,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",171,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RETRYFLG,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",172,0)
 K ZMID,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",173,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA,PATID,C1CODE
"RTN","IBCNEDEP",174,0)
 Q
"RTN","IBCNEDEP",175,0)
 ;
"RTN","IBCNEDEP",176,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",177,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",178,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",179,0)
 ;
"RTN","IBCNEDEP",180,0)
 S DFN=""
"RTN","IBCNEDEP",181,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!($G(IBSTOP)=1)
"RTN","IBCNEDEP",182,0)
 . ;
"RTN","IBCNEDEP",183,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",184,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",185,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",186,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",187,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",188,0)
 . ;
"RTN","IBCNEDEP",189,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",190,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)!($G(IBSTOP)=1)
"RTN","IBCNEDEP",191,0)
 .. ;
"RTN","IBCNEDEP",192,0)
 .. ; IB*2.0*549 - quit if test site and not a valid test case
"RTN","IBCNEDEP",193,0)
 .. Q:'$$XMITOK^IBCNEUT7(IEN)
"RTN","IBCNEDEP",194,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",195,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",196,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",197,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",198,0)
 .. ;
"RTN","IBCNEDEP",199,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",200,0)
 .. ;
"RTN","IBCNEDEP",201,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",202,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",203,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",204,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",205,0)
 .. ;
"RTN","IBCNEDEP",206,0)
 .. ;  If not successful
"RTN","IBCNEDEP",207,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",208,0)
 .. ;  If successful
"RTN","IBCNEDEP",209,0)
 .. ; increment counter and quit if reached IBMAXCNT IB*533
"RTN","IBCNEDEP",210,0)
 .. S IBSENT=IBSENT+1
"RTN","IBCNEDEP",211,0)
 .. I IBMAXCNT'="",IBSENT+1>IBMAXCNT S IBSTOP=1
"RTN","IBCNEDEP",212,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",213,0)
 .. I BNDL D
"RTN","IBCNEDEP",214,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",215,0)
 ;
"RTN","IBCNEDEP",216,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",217,0)
 Q
"RTN","IBCNEDEP",218,0)
 ;
"RTN","IBCNEDEP",219,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",220,0)
 ;
"RTN","IBCNEDEP",221,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",222,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",223,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",224,0)
 ;
"RTN","IBCNEDEP",225,0)
 S DFN=""
"RTN","IBCNEDEP",226,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",227,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",228,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",229,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",230,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",231,0)
 . ;
"RTN","IBCNEDEP",232,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",233,0)
 . ;
"RTN","IBCNEDEP",234,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",235,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",236,0)
 . ;
"RTN","IBCNEDEP",237,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",238,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",239,0)
 .. D PROC
"RTN","IBCNEDEP",240,0)
 .. ;
"RTN","IBCNEDEP",241,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",242,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",243,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",244,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",245,0)
 .. ;
"RTN","IBCNEDEP",246,0)
 .. ;  If not successful
"RTN","IBCNEDEP",247,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",248,0)
 .. ;
"RTN","IBCNEDEP",249,0)
 .. ;  If successful
"RTN","IBCNEDEP",250,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",251,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",252,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",253,0)
 ;
"RTN","IBCNEDEP",254,0)
 Q
"RTN","IBCNEDEP",255,0)
 ;
"RTN","IBCNEDEP",256,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",257,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",258,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",259,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",260,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",261,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",262,0)
 S FRDT=$P(TRANSR,U,17),PATID=$P(TRANSR,U,19)
"RTN","IBCNEDEP",263,0)
 ;
"RTN","IBCNEDEP",264,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",265,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",266,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",267,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",268,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",269,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",270,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",271,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",272,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",273,0)
 . S CNT=CNT+1 I TOT=0 S TOT=1
"RTN","IBCNEDEP",274,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",275,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",276,0)
 ;
"RTN","IBCNEDEP",277,0)
 ;  Build multi-field NTE segment
"RTN","IBCNEDEP",278,0)
 D NTE^IBCNEHLQ
"RTN","IBCNEDEP",279,0)
 ;  If build successful
"RTN","IBCNEDEP",280,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",281,0)
 K NTE
"RTN","IBCNEDEP",282,0)
 Q
"RTN","IBCNEDEP",283,0)
 ;
"RTN","IBCNEDEP",284,0)
 ; The tag HLD was found at the top of this routine.  It was moved
"RTN","IBCNEDEP",285,0)
 ; to its own procedure because it isn't needed anymore at this time.
"RTN","IBCNEDEP",286,0)
 ; Responses will not have the status of HOLD starting with patch IB*2.0*506.
"RTN","IBCNEDEP",287,0)
 ; If HOLD is reinstated, then the logic below must be rewritten for the
"RTN","IBCNEDEP",288,0)
 ; appropriate retry logic at that time.
"RTN","IBCNEDEP",289,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",290,0)
 Q  ; Quit added as safety valve
"RTN","IBCNEDEP",291,0)
 ;S IEN=""
"RTN","IBCNEDEP",292,0)
 ;F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",293,0)
 ;. ; Update count for periodic check
"RTN","IBCNEDEP",294,0)
 ;. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",295,0)
 ;. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",296,0)
 ;. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",297,0)
 ;. ;
"RTN","IBCNEDEP",298,0)
 ;. S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",299,0)
 ;. ;
"RTN","IBCNEDEP",300,0)
 ;. ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",301,0)
 ;. ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",302,0)
 ;. ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",303,0)
 ;. I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",304,0)
 ;. ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",305,0)
 ;. ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",306,0)
 ;.. ;
"RTN","IBCNEDEP",307,0)
 ;.. D SST^IBCNEUT2(IEN,6)     ; set TQ status to 'retry'
"RTN","IBCNEDEP",308,0)
 Q
"RTN","IBCNEDST")
0^52^B57795358
"RTN","IBCNEDST",1,0)
IBCNEDST ;ALB/YMG - HL7 Registration Message Statistics ;07-MAR-2013
"RTN","IBCNEDST",2,0)
 ;;2.0;INTEGRATED BILLING;**497,506,549**;21-MAR-94;Build 54
"RTN","IBCNEDST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEDST",4,0)
 ;
"RTN","IBCNEDST",5,0)
 Q
"RTN","IBCNEDST",6,0)
 ;
"RTN","IBCNEDST",7,0)
GETSTAT2() ;EP
"RTN","IBCNEDST",8,0)
 ; IB*2.0*549 - Added method
"RTN","IBCNEDST",9,0)
 ; Get additional IB Site Parameter fields
"RTN","IBCNEDST",10,0)
 ; Input:   None
"RTN","IBCNEDST",11,0)
 ; Output:  A1^A2^A3^A4^A5 - Where:
"RTN","IBCNEDST",12,0)
 ;            A1 - 350.9, 51.27     - 270 MASTER SWITCH REALTIME
"RTN","IBCNEDST",13,0)
 ;            A2 - 350.9, 51.28     - 270 MASTER SWITCH NIGHTLY
"RTN","IBCNEDST",14,0)
 ;            A3 - 350.9, 51.15     - HL7 MAXIMUM NUMBER
"RTN","IBCNEDST",15,0)
 ;            A4 - 350.9002, .05    - MAXIMUM EXTRACT NUMBER (appt)
"RTN","IBCNEDST",16,0)
 ;            A5 - 350.9002, .05    - MAXIMUM EXTRACT NUMBER (buffer)
"RTN","IBCNEDST",17,0)
 ;
"RTN","IBCNEDST",18,0)
 N DATA,XX
"RTN","IBCNEDST",19,0)
 S DATA=$$GET1^DIQ(350.9,"1,",51.27,"I")            ; 270 Master Switch Realtime
"RTN","IBCNEDST",20,0)
 S $P(DATA,"^",2)=$$GET1^DIQ(350.9,"1,",51.28,"I")  ; 270 Master Switch Nightly
"RTN","IBCNEDST",21,0)
 S $P(DATA,"^",3)=$$GET1^DIQ(350.9,"1,",51.15,"I")  ; HL7 Maximum Number
"RTN","IBCNEDST",22,0)
 S XX=$O(^IBE(350.9,1,51.17,"B",2,""))              ; Find Appointment multiple
"RTN","IBCNEDST",23,0)
 S XX=$$GET1^DIQ(350.9002,XX_",1,",.05,"I")         ; Maximum Appointment Extract
"RTN","IBCNEDST",24,0)
 S $P(DATA,"^",4)=XX
"RTN","IBCNEDST",25,0)
 S XX=$O(^IBE(350.9,1,51.17,"B",1,""))              ; Find Buffer multiple
"RTN","IBCNEDST",26,0)
 S XX=$$GET1^DIQ(350.9002,XX_",1,",.05,"I")         ; Maximum Buffer Extract
"RTN","IBCNEDST",27,0)
 S $P(DATA,"^",5)=XX
"RTN","IBCNEDST",28,0)
 Q DATA
"RTN","IBCNEDST",29,0)
 ;
"RTN","IBCNEDST",30,0)
GETSTAT() ; get statistical data
"RTN","IBCNEDST",31,0)
 ; Statistics are to match the eIV Statistical Report (^IBCNEPR8)
"RTN","IBCNEDST",32,0)
 ;
"RTN","IBCNEDST",33,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",34,0)
 ;
"RTN","IBCNEDST",35,0)
 ;   piece 1  - Number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",36,0)
 ;   piece 2  - Number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",37,0)
 ;   piece 3  - Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",38,0)
 ;   piece 4  - Number of queued 270 inquiries
"RTN","IBCNEDST",39,0)
 ;   piece 5  - Number of deferred 270 inquiries
"RTN","IBCNEDST",40,0)
 ;   piece 6  - Number of insurance companies with no National ID
"RTN","IBCNEDST",41,0)
 ;   piece 7  - Number of locally disabled payers
"RTN","IBCNEDST",42,0)
 ;   piece 8  - Number of Verified (*) buffer entries
"RTN","IBCNEDST",43,0)
 ;   piece 9  - Number of buffer entries indicated as having Active insurance (+)
"RTN","IBCNEDST",44,0)
 ;   piece 10 - Number of buffer entries indicated as having Inactive insurance (-)
"RTN","IBCNEDST",45,0)
 ;   piece 11 - Number of buffer entries indicated as policy status undetermined (#)
"RTN","IBCNEDST",46,0)
 ;   piece 12 - Number of buffer entries indicated as requiring correction before 270 can be sent (!)
"RTN","IBCNEDST",47,0)
 ;   piece 13 - Number of buffer entries awaiting processing
"RTN","IBCNEDST",48,0)
 ;   piece 14 - Number of buffer entries indicated as waiting for a 271 response (?)
"RTN","IBCNEDST",49,0)
 ;   piece 15 - Number of buffer entries entered by manual process with no further processing (blank)
"RTN","IBCNEDST",50,0)
 ;   piece 16 - Number of unlinked insurance companies
"RTN","IBCNEDST",51,0)
 ;
"RTN","IBCNEDST",52,0)
 N BUFINFO,PAYINFO,RESPINFO,STARTDTTM,TQINFO,STATS
"RTN","IBCNEDST",53,0)
 ;
"RTN","IBCNEDST",54,0)
 S STARTDTTM=$$FMADD^XLFDT($$NOW^XLFDT(),,-24) ; set to current date/time - 24 hours
"RTN","IBCNEDST",55,0)
 S RESPINFO=$$RESPINFO(STARTDTTM) ; get data from file 365
"RTN","IBCNEDST",56,0)
 S TQINFO=$$TQINFO() ; get data from file 365.1
"RTN","IBCNEDST",57,0)
 S PAYINFO=$$PAYINFO() ; get data from file 36 & 365.12
"RTN","IBCNEDST",58,0)
 S BUFINFO=$$BUFINFO() ; get data from file 355.33
"RTN","IBCNEDST",59,0)
 S STATS=RESPINFO_U_TQINFO_U_$P(PAYINFO,U)_U_$P(PAYINFO,U,2)
"RTN","IBCNEDST",60,0)
 S STATS=STATS_U_BUFINFO_U_$P(PAYINFO,U,3)
"RTN","IBCNEDST",61,0)
 Q STATS
"RTN","IBCNEDST",62,0)
 ;
"RTN","IBCNEDST",63,0)
RESPINFO(DTTM) ; get data from IIV response file (file 365)
"RTN","IBCNEDST",64,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",65,0)
 ;
"RTN","IBCNEDST",66,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",67,0)
 ;   piece 1: number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",68,0)
 ;   piece 2: number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",69,0)
 ;   piece 3: Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",70,0)
 ;
"RTN","IBCNEDST",71,0)
 N AUTOUPD,DATE,DFN,EBIEN,IEN,INSNAMES,INSTYPE,INQP,POLICY,PAYER,PAYERWNR,PYRNAME,SECINS,Z
"RTN","IBCNEDST",72,0)
 S (AUTOUPD,SECINS)=0
"RTN","IBCNEDST",73,0)
 S PAYERWNR=$P($G(^IBE(350.9,1,51)),U,25) ; get Medicare payer ien from IB site parameters
"RTN","IBCNEDST",74,0)
 S DATE=DTTM-0.000001 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",75,0)
 .; if response received within the last 24 hrs, check if it auto-updated insurance policy
"RTN","IBCNEDST",76,0)
 .S PAYER=0 F  S PAYER=$O(^IBCN(365,"AD",DATE,PAYER)) Q:PAYER=""  D
"RTN","IBCNEDST",77,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYER,DFN)) Q:DFN=""  S AUTOUPD=AUTOUPD+$$PATINFO(DFN)
"RTN","IBCNEDST",78,0)
 ..Q
"RTN","IBCNEDST",79,0)
 .I PAYERWNR,$D(^IBCN(365,"AD",DATE,PAYERWNR)) D
"RTN","IBCNEDST",80,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN)) Q:DFN=""  D
"RTN","IBCNEDST",81,0)
 ...; create array of ins. company names for this patient (active policies only)
"RTN","IBCNEDST",82,0)
 ...K INSNAMES S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",83,0)
 ....S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",84,0)
 .....; skip policies that are not active
"RTN","IBCNEDST",85,0)
 .....I $$CHK^IBCNS1(^DPT(DFN,.312,POLICY,0),DT,1) S INSNAMES($$EXTERNAL^DILFD(2.312,.01,,INSTYPE))=""
"RTN","IBCNEDST",86,0)
 .....Q
"RTN","IBCNEDST",87,0)
 ....Q
"RTN","IBCNEDST",88,0)
 ...S IEN=0 F  S IEN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDST",89,0)
 ....S Z="" F  S Z=$O(^IBCN(365,IEN,2,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",90,0)
 .....S EBIEN=$O(^IBCN(365,IEN,2,"B",Z,""))
"RTN","IBCNEDST",91,0)
 .....; make sure eligibility code is "R"
"RTN","IBCNEDST",92,0)
 .....I $$GET1^DIQ(365.02,EBIEN_","_IEN_",",.02)'="R" Q
"RTN","IBCNEDST",93,0)
 .....S PYRNAME=$E($P($G(^IBCN(365,IEN,2,EBIEN,3)),U,3),1,30) ; grab first 30 chars to compare to 36/.01
"RTN","IBCNEDST",94,0)
 .....I PYRNAME'="",'$D(INSNAMES(PYRNAME)) S SECINS=SECINS+1
"RTN","IBCNEDST",95,0)
 .....Q
"RTN","IBCNEDST",96,0)
 ....Q
"RTN","IBCNEDST",97,0)
 ...Q
"RTN","IBCNEDST",98,0)
 ..Q
"RTN","IBCNEDST",99,0)
 .Q
"RTN","IBCNEDST",100,0)
 ;
"RTN","IBCNEDST",101,0)
 ; Number of 270 inquiries pending receipt of 271 responses
"RTN","IBCNEDST",102,0)
 S (INQP,IEN)=0 F  S IEN=$O(^IBCN(365,"AC",2,IEN)) Q:'IEN  D   ; Transmitted status = 2
"RTN","IBCNEDST",103,0)
 . S INQP=INQP+1
"RTN","IBCNEDST",104,0)
 Q SECINS_U_AUTOUPD_U_INQP
"RTN","IBCNEDST",105,0)
 ;
"RTN","IBCNEDST",106,0)
PATINFO(DFN) ; get data from pat. insurance multiple (file 2.312)
"RTN","IBCNEDST",107,0)
 ; DFN - file 2 ien
"RTN","IBCNEDST",108,0)
 ;
"RTN","IBCNEDST",109,0)
 ; returns
"RTN","IBCNEDST",110,0)
 ;   number of automatically updated patient insurance records for a given patient within last 24 hours
"RTN","IBCNEDST",111,0)
 ;
"RTN","IBCNEDST",112,0)
 N AUTOUPD,INSTYPE,POLICY
"RTN","IBCNEDST",113,0)
 I 'DFN Q
"RTN","IBCNEDST",114,0)
 S AUTOUPD=0
"RTN","IBCNEDST",115,0)
 S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",116,0)
 .S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",117,0)
 ..; if DATE LAST VERIFIED is no more than one day old and EIV AUTO-UPDATE is set, increment auto-update counter
"RTN","IBCNEDST",118,0)
 ..I +$P($G(^DPT(DFN,.312,POLICY,4)),U,4),$$FMDIFF^XLFDT(DT,+$P($G(^DPT(DFN,.312,POLICY,1)),U,3),1)<2 S AUTOUPD=AUTOUPD+1
"RTN","IBCNEDST",119,0)
 ..Q
"RTN","IBCNEDST",120,0)
 .Q
"RTN","IBCNEDST",121,0)
 Q AUTOUPD
"RTN","IBCNEDST",122,0)
 ;
"RTN","IBCNEDST",123,0)
TQINFO() ; get data from transmission queue (file 365.1)
"RTN","IBCNEDST",124,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",125,0)
 ;   piece 1  - Number of queued 270 inquiries
"RTN","IBCNEDST",126,0)
 ;   piece 2  - Number of deferred 270 inquiries
"RTN","IBCNEDST",127,0)
 ;
"RTN","IBCNEDST",128,0)
 N INQD,INQQ,INQUIRY,INSTS,TQSTATUS
"RTN","IBCNEDST",129,0)
 S (INQD,INQQ)=0
"RTN","IBCNEDST",130,0)
 ;
"RTN","IBCNEDST",131,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and
"RTN","IBCNEDST",132,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNEDST",133,0)
 F INSTS=1,6,4 D
"RTN","IBCNEDST",134,0)
 .S INQUIRY=0 F  S INQUIRY=$O(^IBCN(365.1,"AC",INSTS,INQUIRY)) Q:'INQUIRY  D
"RTN","IBCNEDST",135,0)
 ..I INSTS'=4 S INQQ=INQQ+1 Q   ; counter for queued inquiries
"RTN","IBCNEDST",136,0)
 ..S INQD=INQD+1 ; counter for deferred inquiries
"RTN","IBCNEDST",137,0)
 ..Q
"RTN","IBCNEDST",138,0)
 .Q
"RTN","IBCNEDST",139,0)
 Q INQQ_U_INQD
"RTN","IBCNEDST",140,0)
 ;
"RTN","IBCNEDST",141,0)
PAYINFO() ; get data from payer (file 365.12) & insurance company (file #36)
"RTN","IBCNEDST",142,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",143,0)
 ;   piece 1  - Number of insurance companies with no National ID
"RTN","IBCNEDST",144,0)
 ;   piece 2  - Number of locally disabled payers
"RTN","IBCNEDST",145,0)
 ;   piece 3  - Number of unlinked insurance companies
"RTN","IBCNEDST",146,0)
 ;
"RTN","IBCNEDST",147,0)
 N ACTIVE,APP,DATA,IDLIST,INSCO,INSTID,LOCDIS,NONATID,PAYER,PROFID,UNLINK
"RTN","IBCNEDST",148,0)
 S (LOCDIS,NONATID,UNLINK)=0
"RTN","IBCNEDST",149,0)
 ;
"RTN","IBCNEDST",150,0)
 ; Determine # of locally disabled payers
"RTN","IBCNEDST",151,0)
 ; loop through PAYER file
"RTN","IBCNEDST",152,0)
 S PAYER=0 F  S PAYER=$O(^IBE(365.12,PAYER)) Q:'PAYER  D
"RTN","IBCNEDST",153,0)
 .;I '$$ACTAPP^IBCNEUT5(PAYER) Q  ; no active payer applications
"RTN","IBCNEDST",154,0)
 .; Check for National ID
"RTN","IBCNEDST",155,0)
 .S DATA=^IBE(365.12,PAYER,0)
"RTN","IBCNEDST",156,0)
 .I $P(DATA,U,2)="" Q  ;Must have National ID
"RTN","IBCNEDST",157,0)
 .;
"RTN","IBCNEDST",158,0)
 .; Check for Locally Disabled
"RTN","IBCNEDST",159,0)
 .S APP=$$PYRAPP^IBCNEUT5("IIV",PAYER) I 'APP Q
"RTN","IBCNEDST",160,0)
 .S DATA=$G(^IBE(365.12,PAYER,1,APP,0))
"RTN","IBCNEDST",161,0)
 .I $P(DATA,U,2),'$P(DATA,U,3) S LOCDIS=LOCDIS+1 ; nationally active but locally disabled payers
"RTN","IBCNEDST",162,0)
 .Q
"RTN","IBCNEDST",163,0)
 ;
"RTN","IBCNEDST",164,0)
 ; Loop through INSURANCE COMPANY file for insurance companies not linked to a payer
"RTN","IBCNEDST",165,0)
 ; and insurance companies with No National ID 
"RTN","IBCNEDST",166,0)
 ; No National ID [defined by VA CBO as no EDI IDs fields (#36,3.02) & (#36,3.04) - 3/4/14]
"RTN","IBCNEDST",167,0)
 ; This is *Not* a check for the 'VA NATIONAL ID' associated with linked payer.
"RTN","IBCNEDST",168,0)
 ; 
"RTN","IBCNEDST",169,0)
 S INSCO=0 F  S INSCO=$O(^DIC(36,INSCO)) Q:'INSCO  D
"RTN","IBCNEDST",170,0)
 .S ACTIVE=$$ACTIVE^IBCNEUT4(INSCO) Q:'ACTIVE  I $$EXCLUDE^IBCNEUT4($P(ACTIVE,U,2)) Q  ; Exclude Medicaid, etc.
"RTN","IBCNEDST",171,0)
 .S PAYER=$P($G(^DIC(36,INSCO,3)),U,10)  ; associated payer
"RTN","IBCNEDST",172,0)
 .I 'PAYER S UNLINK=UNLINK+1             ; Not linked to a payer. Increment UNLINK
"RTN","IBCNEDST",173,0)
 .I ($$GET1^DIQ(36,INSCO_",",3.02)=""),($$GET1^DIQ(36,INSCO_",",3.04)="") S NONATID=NONATID+1
"RTN","IBCNEDST",174,0)
 .Q
"RTN","IBCNEDST",175,0)
 Q NONATID_U_LOCDIS_U_UNLINK
"RTN","IBCNEDST",176,0)
 ;
"RTN","IBCNEDST",177,0)
BUFINFO() ; get data from insurance buffer (file 355.33)
"RTN","IBCNEDST",178,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",179,0)
 ;
"RTN","IBCNEDST",180,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",181,0)
 ;   piece 1 - Number of Verified (*) buffer entries within last 24 hours
"RTN","IBCNEDST",182,0)
 ;   piece 2 - Number of buffer entries indicated as having Active insurance (+) within last 24 hours
"RTN","IBCNEDST",183,0)
 ;   piece 3 - Number of buffer entries indicated as having Inactive insurance (-) within last 24 hours
"RTN","IBCNEDST",184,0)
 ;   piece 4 - Number of buffer entries indicated as policy status undetermined (#) within last 24 hours
"RTN","IBCNEDST",185,0)
 ;   piece 5 - Number of buffer entries indicated as requiring correction before 270 can be sent (!) within last 24 hours
"RTN","IBCNEDST",186,0)
 ;   piece 6 - Number of buffer entries awaiting processing within last 24 hours
"RTN","IBCNEDST",187,0)
 ;   piece 7 - Number of buffer entries indicated as waiting for a 271 response (?) within last 24 hours
"RTN","IBCNEDST",188,0)
 ;   piece 8 - Number of buffer entries entered by manual process with no further processing (blank) within last 24 hours 
"RTN","IBCNEDST",189,0)
 ;
"RTN","IBCNEDST",190,0)
 N ACTIVE,AMBIG,BUFF,DATE,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,STATUS,SYM,VERIFIED
"RTN","IBCNEDST",191,0)
 S (ACTIVE,AMBIG,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,VERIFIED)=0
"RTN","IBCNEDST",192,0)
 S DATE=0 F  S DATE=$O(^IBA(355.33,"AEST","E",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",193,0)
 .S BUFF=0 F  S BUFF=$O(^IBA(355.33,"AEST","E",DATE,BUFF)) Q:BUFF=""  D
"RTN","IBCNEDST",194,0)
 ..S SYM=$$SYMBOL^IBCNBLL(BUFF)
"RTN","IBCNEDST",195,0)
 ..I SYM="*" S VERIFIED=VERIFIED+1 Q  ; verified entries
"RTN","IBCNEDST",196,0)
 ..I SYM="+" S ACTIVE=ACTIVE+1 Q      ; active insurance
"RTN","IBCNEDST",197,0)
 ..I SYM="$" S ACTIVE=ACTIVE+1 Q      ; include "$" (Escalated entries) in with the active insurance  - IB*2.0*506 (vd)
"RTN","IBCNEDST",198,0)
 ..I SYM="-" S INACTIVE=INACTIVE+1 Q  ; inactive insurance
"RTN","IBCNEDST",199,0)
 ..I SYM="#" S AMBIG=AMBIG+1 Q        ; ambiguous response
"RTN","IBCNEDST",200,0)
 ..I SYM="!" S ERROR=ERROR+1 Q        ; entries requiring correction
"RTN","IBCNEDST",201,0)
 ..I SYM="?" S RESPWAIT=RESPWAIT+1 Q  ; awaiting response
"RTN","IBCNEDST",202,0)
 ..I SYM=" " S MANUAL=MANUAL+1        ; manually entered entries (no further processing)
"RTN","IBCNEDST",203,0)
 .S PROCWAIT=RESPWAIT+MANUAL          ; entries awaiting processing
"RTN","IBCNEDST",204,0)
 Q VERIFIED_U_ACTIVE_U_INACTIVE_U_AMBIG_U_ERROR_U_PROCWAIT_U_RESPWAIT_U_MANUAL
"RTN","IBCNEDST",205,0)
 ;
"RTN","IBCNEHL1")
0^43^B181786202
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497,506,549**;21-MAR-94;Build 54
"RTN","IBCNEHL1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    ACK       - Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",13,0)
 ;    ERACT     - Error Action
"RTN","IBCNEHL1",14,0)
 ;    ERCON     - Error Condition
"RTN","IBCNEHL1",15,0)
 ;    ERFLG     - Error quit flag
"RTN","IBCNEHL1",16,0)
 ;    ERTXT     - Error Message Text
"RTN","IBCNEHL1",17,0)
 ;    HL        - Array of HL7 variables
"RTN","IBCNEHL1",18,0)
 ;    IBSEG     - Optional, array of fields in segment
"RTN","IBCNEHL1",19,0)
 ;    IIVSTAT   - EC generated flag interpreting status of response
"RTN","IBCNEHL1",20,0)
 ;                 1 = + (auto-update requirement)
"RTN","IBCNEHL1",21,0)
 ;                 6 = -
"RTN","IBCNEHL1",22,0)
 ;                 V = #
"RTN","IBCNEHL1",23,0)
 ;    MAP       - Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",24,0)
 ;    MSGID     - Original Message Control ID
"RTN","IBCNEHL1",25,0)
 ;    RIEN      - Response Record IEN
"RTN","IBCNEHL1",26,0)
 ;    SEG       - HL7 Segment Name
"RTN","IBCNEHL1",27,0)
 ;
"RTN","IBCNEHL1",28,0)
EN ; Entry Point
"RTN","IBCNEHL1",29,0)
 N ACK,AUTO,EBDA,ERACT,ERCON,ERFLG,ERROR,ERTXT,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN
"RTN","IBCNEHL1",30,0)
 N MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP
"RTN","IBCNEHL1",31,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",32,0)
 ;
"RTN","IBCNEHL1",33,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",34,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",35,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",36,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",37,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",38,0)
 ;
"RTN","IBCNEHL1",39,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",40,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",41,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",42,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",43,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",44,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",45,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",46,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",47,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",48,0)
 .;
"RTN","IBCNEHL1",49,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",50,0)
 .;
"RTN","IBCNEHL1",51,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",52,0)
 .;
"RTN","IBCNEHL1",53,0)
 .;  Contact Segment
"RTN","IBCNEHL1",54,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Patient Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",63,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",66,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",69,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",72,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",75,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",78,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",81,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",84,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Notes Segment
"RTN","IBCNEHL1",102,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 .;
"RTN","IBCNEHL1",104,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",105,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",107,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",108,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 . ;
"RTN","IBCNEHL1",110,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",111,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",112,0)
 .;
"RTN","IBCNEHL1",113,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",114,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",115,0)
 ;
"RTN","IBCNEHL1",116,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",117,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",118,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",119,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",120,0)
 .Q
"RTN","IBCNEHL1",121,0)
 D FIL
"RTN","IBCNEHL1",122,0)
 Q
"RTN","IBCNEHL1",123,0)
 ;
"RTN","IBCNEHL1",124,0)
 ; =================================================================
"RTN","IBCNEHL1",125,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",126,0)
 ;
"RTN","IBCNEHL1",127,0)
 N BUFF,DATA,ERROR,IENS,MIL,OKAY,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,XX   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",128,0)
 ;
"RTN","IBCNEHL1",129,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",130,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",131,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",132,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",133,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",134,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",135,0)
 S XX=$$GET1^DIQ(2.312,IENS,7.01,"I")
"RTN","IBCNEHL1",136,0)
 I ISSUB,XX="" S DATA(2.312,IENS,7.01)=$P(RDATA13,U)    ; Name
"RTN","IBCNEHL1",137,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.01,"I")
"RTN","IBCNEHL1",138,0)
 I XX="" S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2)         ; DOB
"RTN","IBCNEHL1",139,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.05,"I")
"RTN","IBCNEHL1",140,0)
 I XX="" S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3)         ; SSN
"RTN","IBCNEHL1",141,0)
 S XX=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNEHL1",142,0)
 I ISSUB,XX="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8)      ; Whose insurance
"RTN","IBCNEHL1",143,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",144,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01)
"RTN","IBCNEHL1",145,0)
 S XX=$$GET1^DIQ(2.312,IENS,4.03,"I")
"RTN","IBCNEHL1",146,0)
 I ISSUB,XX="",PREL'="" D
"RTN","IBCNEHL1",147,0)
 . S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",148,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",149,0)
 S DATA(2.312,IENS,1.03)=TSTAMP                         ; Date last verified
"RTN","IBCNEHL1",150,0)
 S DATA(2.312,IENS,1.04)=""                             ; Last verified by
"RTN","IBCNEHL1",151,0)
 S DATA(2.312,IENS,1.05)=TSTAMP                         ; Date last edited
"RTN","IBCNEHL1",152,0)
 S DATA(2.312,IENS,1.06)=""                             ; Last edited by
"RTN","IBCNEHL1",153,0)
 S DATA(2.312,IENS,1.09)=5                              ; Source of info = eIV
"RTN","IBCNEHL1",154,0)
 ;
"RTN","IBCNEHL1",155,0)
 ; Set Subscriber address Fields if none of the fields are currently defined
"RTN","IBCNEHL1",156,0)
 ;\Beginning IB*2.0*549 - Modified the following lines
"RTN","IBCNEHL1",157,0)
 S XX=$$GET1^DIQ(2.312,IENS,3.06,"I")       ; Current Ins Street Line 1
"RTN","IBCNEHL1",158,0)
 I XX="" D
"RTN","IBCNEHL1",159,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.07,"I")     ; Current Ins Street Line 2
"RTN","IBCNEHL1",160,0)
 . Q:XX'=""
"RTN","IBCNEHL1",161,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.08,"I")     ; Current Ins City
"RTN","IBCNEHL1",162,0)
 . Q:XX'=""
"RTN","IBCNEHL1",163,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.09,"I")     ; Current Ins State
"RTN","IBCNEHL1",164,0)
 . Q:XX'=""
"RTN","IBCNEHL1",165,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.1,"I")      ; Current Ins Zip
"RTN","IBCNEHL1",166,0)
 . Q:XX'=""
"RTN","IBCNEHL1",167,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.13,"I")     ; Current Ins Country
"RTN","IBCNEHL1",168,0)
 . Q:XX'=""
"RTN","IBCNEHL1",169,0)
 . S XX=$$GET1^DIQ(2.312,IENS,3.14,"I")     ; Current Ins Country Subdivision
"RTN","IBCNEHL1",170,0)
 . Q:XX'=""
"RTN","IBCNEHL1",171,0)
 . S DATA(2.312,IENS,3.06)=$P(RDATA5,U)     ; Street line 1
"RTN","IBCNEHL1",172,0)
 . S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2)   ; Street line 2
"RTN","IBCNEHL1",173,0)
 . S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3)   ; City
"RTN","IBCNEHL1",174,0)
 . S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4)   ; State
"RTN","IBCNEHL1",175,0)
 . S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5)    ; Zip
"RTN","IBCNEHL1",176,0)
 . S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6)   ; Country
"RTN","IBCNEHL1",177,0)
 . S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7)   ; Country subdivision
"RTN","IBCNEHL1",178,0)
 ;\End of IB*2.0*549 changes.
"RTN","IBCNEHL1",179,0)
 ;
"RTN","IBCNEHL1",180,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",181,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",182,0)
 I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",183,0)
 ;
"RTN","IBCNEHL1",184,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",185,0)
 K DATA
"RTN","IBCNEHL1",186,0)
 S DATA(2.312,IENS,4.04)="YES"
"RTN","IBCNEHL1",187,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",188,0)
 I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",189,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",190,0)
 I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",191,0)
 ; file new EB data
"RTN","IBCNEHL1",192,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",193,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",194,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",195,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",196,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",197,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",198,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",199,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",200,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",201,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",202,0)
 I BUFF D
"RTN","IBCNEHL1",203,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",204,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",205,0)
 .Q
"RTN","IBCNEHL1",206,0)
AUTOFILX ;
"RTN","IBCNEHL1",207,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",208,0)
 Q
"RTN","IBCNEHL1",209,0)
 ;
"RTN","IBCNEHL1",210,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",211,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",212,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",213,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",214,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",215,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",216,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",217,0)
 ;          1 - successful update
"RTN","IBCNEHL1",218,0)
 N DA,DATA12,DIAG,DIAG3121,ERFLG,ERROR,IENS,IENS365,IENS312,NODE,PROV,PROV332,REF,REF3129,Z,Z2
"RTN","IBCNEHL1",219,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",220,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",221,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",222,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",223,0)
 D FILE^DIE("ET","DATA12","ERROR")
"RTN","IBCNEHL1",224,0)
 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",225,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",226,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",227,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",228,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",229,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",230,0)
 ; update node 9 data
"RTN","IBCNEHL1",231,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",232,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",233,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",234,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",235,0)
 ; update node 10 data
"RTN","IBCNEHL1",236,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",237,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",238,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",239,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",240,0)
 ; update node 11 data
"RTN","IBCNEHL1",241,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",242,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",243,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",244,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",245,0)
GRPFILEX ;
"RTN","IBCNEHL1",246,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",247,0)
 ;
"RTN","IBCNEHL1",248,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",249,0)
 ;
"RTN","IBCNEHL1",250,0)
 ; Input Variables
"RTN","IBCNEHL1",251,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",252,0)
 ;
"RTN","IBCNEHL1",253,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",254,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",255,0)
 ;
"RTN","IBCNEHL1",256,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",257,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",258,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",259,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",260,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",261,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",262,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",263,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",264,0)
 ;
"RTN","IBCNEHL1",265,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",266,0)
 ; send a warning email message
"RTN","IBCNEHL1",267,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",268,0)
 ;
"RTN","IBCNEHL1",269,0)
 ; IB*2.0*506 Removed the following line of code to Treat all AAA Action Codes
"RTN","IBCNEHL1",270,0)
 ; as though the Payer/FSC Responded.
"RTN","IBCNEHL1",271,0)
 ;I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT^IBCNEHL3
"RTN","IBCNEHL1",272,0)
 ;
"RTN","IBCNEHL1",273,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",274,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",275,0)
 ;
"RTN","IBCNEHL1",276,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",277,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",278,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",279,0)
 ;
"RTN","IBCNEHL1",280,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",281,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",282,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",283,0)
 ;
"RTN","IBCNEHL1",284,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",285,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",286,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",287,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",288,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",289,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",290,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",291,0)
 ;
"RTN","IBCNEHL1",292,0)
 ;  Check for error action
"RTN","IBCNEHL1",293,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U) D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",294,0)
 ;
"RTN","IBCNEHL1",295,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",296,0)
 S FILEIT=1
"RTN","IBCNEHL1",297,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",298,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",299,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",300,0)
 . S FILEIT=0
"RTN","IBCNEHL1",301,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",302,0)
 ;
"RTN","IBCNEHL1",303,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",304,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",305,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",306,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",307,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",308,0)
 ;
"RTN","IBCNEHL1",309,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",310,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",311,0)
 ;
"RTN","IBCNEHL1",312,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",313,0)
 ;  response data
"RTN","IBCNEHL1",314,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",315,0)
 ;
"RTN","IBCNEHL1",316,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",317,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",318,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",319,0)
 ;
"RTN","IBCNEHL1",320,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",321,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",322,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",323,0)
FILX ;
"RTN","IBCNEHL1",324,0)
 Q
"RTN","IBCNEHL1",325,0)
 ;
"RTN","IBCNEHL1",326,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",327,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",328,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",329,0)
 ;
"RTN","IBCNEHL1",330,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",331,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",332,0)
 ;
"RTN","IBCNEHL1",333,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",334,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",335,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",336,0)
 ;
"RTN","IBCNEHL1",337,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",338,0)
 ;
"RTN","IBCNEHL1",339,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",340,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",341,0)
 S RES=0
"RTN","IBCNEHL1",342,0)
 I +$G(RIEN)'>0 Q RES                       ; Invalid ien for file 365
"RTN","IBCNEHL1",343,0)
 ;
"RTN","IBCNEHL1",344,0)
 ; IB*2.0*549 - Moved up the next 5 lines.  Originally, these lines were
"RTN","IBCNEHL1",345,0)
 ;              directly after line 'I $G(IIVSTAT)'=1 Q RES'
"RTN","IBCNEHL1",346,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",347,0)
 ;
"RTN","IBCNEHL1",348,0)
 ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",349,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))
"RTN","IBCNEHL1",350,0)
 S PIEN=$P(RDATA0,U,3)
"RTN","IBCNEHL1",351,0)
 ;
"RTN","IBCNEHL1",352,0)
 ; IB*2.0*549 - Moved up the next 2 lines.  Originally, these lines were
"RTN","IBCNEHL1",353,0)
 ;              directly after 'S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES'
"RTN","IBCNEHL1",354,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",355,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",356,0)
 ;
"RTN","IBCNEHL1",357,0)
 ; IB*2.0*549 - Added ',MWNRTYP' below to only quit for non-medicare policies
"RTN","IBCNEHL1",358,0)
 I $G(IIVSTAT)'=1,'MWNRTYP Q RES            ; Only auto-update 'active policy' responses
"RTN","IBCNEHL1",359,0)
 I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",360,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",361,0)
 ;
"RTN","IBCNEHL1",362,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",363,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",364,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",365,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",366,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",367,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",368,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",369,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",370,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",371,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",372,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",373,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",374,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",375,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",376,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",377,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",378,0)
 ..; check group number
"RTN","IBCNEHL1",379,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",380,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",381,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",382,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",383,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",384,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",385,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",386,0)
 ....Q
"RTN","IBCNEHL1",387,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",388,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",389,0)
 ....Q
"RTN","IBCNEHL1",390,0)
 ...Q
"RTN","IBCNEHL1",391,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",392,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",393,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",394,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",395,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",396,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",397,0)
 ....;           To     $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",398,0)
 ....I $P(MWNRTYP,U,5)="MA"!($P(MWNRTYP,U,5)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",399,0)
 ....S GOK=0
"RTN","IBCNEHL1",400,0)
 ....Q
"RTN","IBCNEHL1",401,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",402,0)
 ....;IB*2.0*549 Change $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B")
"RTN","IBCNEHL1",403,0)
 ....;           To     $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B")
"RTN","IBCNEHL1",404,0)
 ....I $P(MWNRTYP,U,5)="MB"!($P(MWNRTYP,U,5)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",405,0)
 ....S GOK=0
"RTN","IBCNEHL1",406,0)
 ....Q
"RTN","IBCNEHL1",407,0)
 ...Q
"RTN","IBCNEHL1",408,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",409,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",410,0)
 ..Q
"RTN","IBCNEHL1",411,0)
 .Q
"RTN","IBCNEHL1",412,0)
 Q RES
"RTN","IBCNEHL1",413,0)
 ;
"RTN","IBCNEHL1",414,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; File eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",415,0)
 ; Input:   DFN     - Internal Patient IEN
"RTN","IBCNEHL1",416,0)
 ;          IEN312  - Insurance multiple #
"RTN","IBCNEHL1",417,0)
 ;          RIEN    - file 365 ien
"RTN","IBCNEHL1",418,0)
 ;          AFLG    - 1 if called from autoupdate
"RTN","IBCNEHL1",419,0)
 ;                    0 if called from ins. buffer process entry
"RTN","IBCNEHL1",420,0)
 ; Returns: "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR
"RTN","IBCNEHL1",421,0)
 ;          for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",422,0)
 ;
"RTN","IBCNEHL1",423,0)
 ;
"RTN","IBCNEHL1",424,0)
 Q $$EBFILE^IBCNEHL5(DFN,IEN312,RIEN,AFLG)  ;IB*2.0*549 moved because of routine size
"RTN","IBCNEHL1",425,0)
 ;
"RTN","IBCNEHL5")
0^61^B40778838
"RTN","IBCNEHL5",1,0)
IBCNEHL5 ;DALOI/KML - HL7 Process Incoming RPI Msgs (cont.) ;1-APRIL-2013
"RTN","IBCNEHL5",2,0)
 ;;2.0;INTEGRATED BILLING;**497,549**;21-MAR-94;Build 54
"RTN","IBCNEHL5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHL5",4,0)
 ;
"RTN","IBCNEHL5",5,0)
 ;**Program Description**
"RTN","IBCNEHL5",6,0)
 Q  ; No direct calls
"RTN","IBCNEHL5",7,0)
 ;
"RTN","IBCNEHL5",8,0)
GZRF(ERROR,IBSEG,RIEN) ; Process Group level ZRF Reference identification segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL5",9,0)
 ;
"RTN","IBCNEHL5",10,0)
 ; Input:
"RTN","IBCNEHL5",11,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",12,0)
 ;
"RTN","IBCNEHL5",13,0)
 ; Output:
"RTN","IBCNEHL5",14,0)
 ; ERROR
"RTN","IBCNEHL5",15,0)
 ;
"RTN","IBCNEHL5",16,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",17,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",18,0)
 S RSUPDT(365.09,IENSTR,.01)=+$O(^IBCN(365,RIEN,9,"B",""),-1)+1  ; node 9 sequence #
"RTN","IBCNEHL5",19,0)
 ; Reference id & qualifier
"RTN","IBCNEHL5",20,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL5",21,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.09,IENSTR,.02)=VALUE,RSUPDT(365.09,IENSTR,.03)=QUAL
"RTN","IBCNEHL5",22,0)
 S RSUPDT(365.09,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL5",23,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",24,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",25,0)
 Q
"RTN","IBCNEHL5",26,0)
 ;
"RTN","IBCNEHL5",27,0)
ZMP(ERROR,IBSEG,RIEN) ; Process Military Personnel Information that comes from X12 271 MPI segment of the 2100C and 2100D  loops 
"RTN","IBCNEHL5",28,0)
 ;
"RTN","IBCNEHL5",29,0)
 ; Input:
"RTN","IBCNEHL5",30,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",31,0)
 ;
"RTN","IBCNEHL5",32,0)
 ; Output:
"RTN","IBCNEHL5",33,0)
 ; ERROR
"RTN","IBCNEHL5",34,0)
 ;
"RTN","IBCNEHL5",35,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",36,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL5",37,0)
 S RSUPDT(365,IENSTR,12.01)=$G(IBSEG(3)) ; information status code
"RTN","IBCNEHL5",38,0)
 S RSUPDT(365,IENSTR,12.02)=$G(IBSEG(4))  ;employment status code
"RTN","IBCNEHL5",39,0)
 S RSUPDT(365,IENSTR,12.03)=$G(IBSEG(5))  ; government service affiliation code
"RTN","IBCNEHL5",40,0)
 S RSUPDT(365,IENSTR,12.04)=$G(IBSEG(6))  ; description
"RTN","IBCNEHL5",41,0)
 S RSUPDT(365,IENSTR,12.05)=$G(IBSEG(7))  ; Military service rank code
"RTN","IBCNEHL5",42,0)
 ;Date time period format qualifier and Date time period
"RTN","IBCNEHL5",43,0)
 S QUAL=$P($G(IBSEG(8)),HLCMP),VALUE=$G(IBSEG(9))
"RTN","IBCNEHL5",44,0)
 I VALUE'="",QUAL'="" S RSUPDT(365,IENSTR,12.06)=QUAL,RSUPDT(365,IENSTR,12.07)=VALUE
"RTN","IBCNEHL5",45,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",46,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",47,0)
 Q
"RTN","IBCNEHL5",48,0)
 ;
"RTN","IBCNEHL5",49,0)
ROL(ERROR,IBSEG,RIEN) ; process group level Provider Information in the X12 271 PRV segment of X12 loops: 2100B, 2100C, 2100D
"RTN","IBCNEHL5",50,0)
 ;
"RTN","IBCNEHL5",51,0)
 ; Input:
"RTN","IBCNEHL5",52,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",53,0)
 ;
"RTN","IBCNEHL5",54,0)
 ; Output:
"RTN","IBCNEHL5",55,0)
 ; ERROR
"RTN","IBCNEHL5",56,0)
 ;
"RTN","IBCNEHL5",57,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",58,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",59,0)
 S RSUPDT(365.04,IENSTR,.01)=+$O(^IBCN(365,RIEN,10,"B",""),-1)+1  ; node 10 sequence #
"RTN","IBCNEHL5",60,0)
 S RSUPDT(365.04,IENSTR,.02)=$P($G(IBSEG(4)),HLCMP)  ; provider code
"RTN","IBCNEHL5",61,0)
 S RSUPDT(365.04,IENSTR,.03)=$P($G(IBSEG(5)),HLCMP)   ; reference ID
"RTN","IBCNEHL5",62,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",63,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",64,0)
 Q
"RTN","IBCNEHL5",65,0)
 ;
"RTN","IBCNEHL5",66,0)
DG1(ERROR,IBSEG,RIEN) ; process DIAGNOSIS codes in the X12 271 HI segment of X12 loops: 2100C, 2100D
"RTN","IBCNEHL5",67,0)
 ;
"RTN","IBCNEHL5",68,0)
 ; Input:
"RTN","IBCNEHL5",69,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",70,0)
 ;
"RTN","IBCNEHL5",71,0)
 ; Output:
"RTN","IBCNEHL5",72,0)
 ; ERROR
"RTN","IBCNEHL5",73,0)
 ;
"RTN","IBCNEHL5",74,0)
 N IENSTR,RSUPDT,DCODE
"RTN","IBCNEHL5",75,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",76,0)
 S RSUPDT(365.01,IENSTR,.01)=+$O(^IBCN(365,RIEN,11,"B",""),-1)+1  ; node 11 sequence #
"RTN","IBCNEHL5",77,0)
 S DCODE=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL5",78,0)
 S RSUPDT(365.01,IENSTR,.02)=$E(DCODE,1,3)_"."_$E(DCODE,4,99)  ; diagnosis code
"RTN","IBCNEHL5",79,0)
 S RSUPDT(365.01,IENSTR,.03)=$P($G(IBSEG(4)),HLCMP,3) ; diagnosis code qualifier
"RTN","IBCNEHL5",80,0)
 S RSUPDT(365.01,IENSTR,.04)=$S($P($G(IBSEG(16)),HLCMP)=1:"P",1:"S")  ; primary or secondary diagnosis code
"RTN","IBCNEHL5",81,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",82,0)
 Q
"RTN","IBCNEHL5",83,0)
 ;
"RTN","IBCNEHL5",84,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ;EP
"RTN","IBCNEHL5",85,0)
 ; File eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL5",86,0)
 ; IB*2.0*549 moved method from IBCNEHL1 because of routine size limitations
"RTN","IBCNEHL5",87,0)
 ; Input:   DFN     - Internal Patient IEN
"RTN","IBCNEHL5",88,0)
 ;          IEN312  - Insurance multiple #
"RTN","IBCNEHL5",89,0)
 ;          RIEN    - file 365 ien
"RTN","IBCNEHL5",90,0)
 ;          AFLG    - 1 if called from autoupdate
"RTN","IBCNEHL5",91,0)
 ;                    0 if called from ins. buffer process entry
"RTN","IBCNEHL5",92,0)
 ; Returns: "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR
"RTN","IBCNEHL5",93,0)
 ;          for manual processing of ins. buffer entry.
"RTN","IBCNEHL5",94,0)
 ;
"RTN","IBCNEHL5",95,0)
 ;
"RTN","IBCNEHL5",96,0)
 N DA,DIK,DATA,DATA1,EBIENS,ERFLG,ERROR,GIEN,GSKIP,IENROOT,IENS,IENSTR,TYPE,TYPE1,Z,Z1,Z2
"RTN","IBCNEHL5",97,0)
 ; delete existing EB data
"RTN","IBCNEHL5",98,0)
 S DIK="^DPT("_DFN_",.312,"_IEN312_",6,",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL5",99,0)
 S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,6,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL5",100,0)
 ;
"RTN","IBCNEHL5",101,0)
 ; /IB*2.0*506 Beginning
"RTN","IBCNEHL5",102,0)
 ; File the new Requested Service Date field (file #2.312,8.01) from the file #365,1.1 field,
"RTN","IBCNEHL5",103,0)
 ; if the Service Date is not present, then use the Eligibility Date which would be from the file #365,1.11 field
"RTN","IBCNEHL5",104,0)
 ; ALSO, file the new Requested Service Type field (file #2.312,8.02) from the file #365.02,.04 field.
"RTN","IBCNEHL5",105,0)
 N DIE,DR,NODE0,RSRVDT,RSTYPE,TQIEN
"RTN","IBCNEHL5",106,0)
 S TQIEN=$P($G(^IBCN(365,RIEN,0)),U,5),NODE0=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEHL5",107,0)
 S RSTYPE=$P(NODE0,U,20),RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL5",108,0)
 I RSRVDT="" S RSRVDT=$P(NODE0,U,12)
"RTN","IBCNEHL5",109,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IEN312
"RTN","IBCNEHL5",110,0)
 ;
"RTN","IBCNEHL5",111,0)
 ; IB*2.0*549 - File the pointer to the IIV RESPONSE (file 365)
"RTN","IBCNEHL5",112,0)
 D UPDT365(RIEN,IEN312_","_DFN_",")
"RTN","IBCNEHL5",113,0)
 S DR="8.01///"_RSRVDT_";8.02///"_RSTYPE_";8.03///"_RIEN
"RTN","IBCNEHL5",114,0)
 D ^DIE
"RTN","IBCNEHL5",115,0)
 ; /IB*2.0*506 End
"RTN","IBCNEHL5",116,0)
 ;
"RTN","IBCNEHL5",117,0)
 ; file new EB data
"RTN","IBCNEHL5",118,0)
 S IENSTR=IEN312_","_DFN_","
"RTN","IBCNEHL5",119,0)
 S GIEN=+$P($G(^DPT(DFN,.312,IEN312,0)),U,18)
"RTN","IBCNEHL5",120,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!$G(ERFLG)  D
"RTN","IBCNEHL5",121,0)
 .S EBIENS=$O(^IBCN(365,RIEN,2,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL5",122,0)
 .; if filing Medicare Part A/B data, make sure we only file the correct EB group
"RTN","IBCNEHL5",123,0)
 .S GSKIP=0 I GIEN>0 D
"RTN","IBCNEHL5",124,0)
 ..S TYPE=$$GET1^DIQ(365.02,EBIENS,.05)
"RTN","IBCNEHL5",125,0)
 ..S TYPE1=$P($G(^IBA(355.3,GIEN,0)),U,14)
"RTN","IBCNEHL5",126,0)
 ..I TYPE="MA",TYPE1="B" S GSKIP=1
"RTN","IBCNEHL5",127,0)
 ..I TYPE="MB",TYPE1="A" S GSKIP=1
"RTN","IBCNEHL5",128,0)
 ..Q
"RTN","IBCNEHL5",129,0)
 .I GSKIP Q  ; wrong Medicare Part A/B EB group - skip it
"RTN","IBCNEHL5",130,0)
 .D GETS^DIQ(365.02,EBIENS,"**",,"DATA","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL5",131,0)
 .; make sure we have data to file
"RTN","IBCNEHL5",132,0)
 .I '$D(DATA(365.02)) Q
"RTN","IBCNEHL5",133,0)
 .S IENS="+1,"_IENSTR,Z1=$O(DATA(365.02,"")) M DATA1(2.322,IENS)=DATA(365.02,Z1)
"RTN","IBCNEHL5",134,0)
 .D UPDATE^DIE("E","DATA1","IENROOT","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL5",135,0)
 .S IENS="+1,"_IENROOT(1)_","_IENSTR K DATA1,IENROOT
"RTN","IBCNEHL5",136,0)
 .S Z2="" F  S Z2=$O(DATA(365.26,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",137,0)
 ..M DATA1(2.3226,IENS)=DATA(365.26,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",138,0)
 ..Q
"RTN","IBCNEHL5",139,0)
 .S Z2="" F  S Z2=$O(DATA(365.27,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",140,0)
 ..M DATA1(2.3227,IENS)=DATA(365.27,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",141,0)
 ..Q
"RTN","IBCNEHL5",142,0)
 .S Z2="" F  S Z2=$O(DATA(365.28,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",143,0)
 ..M DATA1(2.3228,IENS)=DATA(365.28,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",144,0)
 ..Q
"RTN","IBCNEHL5",145,0)
 .S Z2="" F  S Z2=$O(DATA(365.29,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",146,0)
 ..M DATA1(2.3229,IENS)=DATA(365.29,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",147,0)
 ..Q
"RTN","IBCNEHL5",148,0)
 .S Z2="" F  S Z2=$O(DATA(365.291,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",149,0)
 ..M DATA1(2.32291,IENS)=DATA(365.291,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",150,0)
 ..Q
"RTN","IBCNEHL5",151,0)
 .S Z2="" F  S Z2=$O(DATA(365.292,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL5",152,0)
 ..M DATA1(2.32292,IENS)=DATA(365.292,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL5",153,0)
 ..Q
"RTN","IBCNEHL5",154,0)
 .K DATA
"RTN","IBCNEHL5",155,0)
 .Q
"RTN","IBCNEHL5",156,0)
 Q $G(ERFLG)
"RTN","IBCNEHL5",157,0)
 ;
"RTN","IBCNEHL5",158,0)
UPDT365(RIEN,IEN312)    ; Sets the DO NOT PURGE flag in file 365
"RTN","IBCNEHL5",159,0)
 ; Input:   RIEN        - IEN of the entry in file 365 to be set
"RTN","IBCNEHL5",160,0)
 ;          IEN312      - IENS of the Insurance multiple entry
"RTN","IBCNEHL5",161,0)
 ; IB*2.0*549 added method
"RTN","IBCNEHL5",162,0)
 N DA,DIE,DR,XX
"RTN","IBCNEHL5",163,0)
 S XX=$$GET1^DIQ(2.312,IEN312,8.03,"I")     ; Get current file 365 pointer
"RTN","IBCNEHL5",164,0)
 I XX'="" D                                 ; Remove the DO NOT PURGE flag
"RTN","IBCNEHL5",165,0)
 . S DIE=365,DA=XX
"RTN","IBCNEHL5",166,0)
 . S DR=".11///0"
"RTN","IBCNEHL5",167,0)
 . D ^DIE
"RTN","IBCNEHL5",168,0)
 ;
"RTN","IBCNEHL5",169,0)
 ; Set the DO NOT PURGE Flag
"RTN","IBCNEHL5",170,0)
 S DIE=365,DA=RIEN
"RTN","IBCNEHL5",171,0)
 S DR=".11///1"
"RTN","IBCNEHL5",172,0)
 D ^DIE
"RTN","IBCNEHL5",173,0)
 Q
"RTN","IBCNEHL5",174,0)
 ;
"RTN","IBCNEHLM")
0^17^B23803518
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;02-JUN-2015
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416,438,497,506,549**;21-MAR-94;Build 54
"RTN","IBCNEHLM",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    APP = Application
"RTN","IBCNEHLM",19,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",20,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",21,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",22,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",23,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",24,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",25,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",26,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",27,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",28,0)
 ;    TIMOUT = Timeout Days Site Parameter
"RTN","IBCNEHLM",29,0)
 ;    RETRY = Retry Flag Site Parameter
"RTN","IBCNEHLM",30,0)
 ;
"RTN","IBCNEHLM",31,0)
 N IBPERSIST
"RTN","IBCNEHLM",32,0)
 S IBPERSIST="N" ; persistence flag - If "N", FSC will not use the statistics on the NTE segment
"RTN","IBCNEHLM",33,0)
 D REG
"RTN","IBCNEHLM",34,0)
 Q
"RTN","IBCNEHLM",35,0)
 ;
"RTN","IBCNEHLM",36,0)
EN1 ; TaskMan entry point
"RTN","IBCNEHLM",37,0)
 N IBPERSIST
"RTN","IBCNEHLM",38,0)
 S IBPERSIST="Y" ; persistence flag - If "Y", FSC will use NTE segment to update their copy of the site's stats
"RTN","IBCNEHLM",39,0)
 D REG
"RTN","IBCNEHLM",40,0)
 ; Purge the task record
"RTN","IBCNEHLM",41,0)
 S ZTREQ="@"
"RTN","IBCNEHLM",42,0)
 Q
"RTN","IBCNEHLM",43,0)
 ;
"RTN","IBCNEHLM",44,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",45,0)
 N APP,CNTCEM,CNTCNM,CNTCPH,CODE,EDT,EVENT,FRSH,HL,HLCDOM,HLCINS,HLCS
"RTN","IBCNEHLM",46,0)
 N HLCSTCP,HLECH,HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLNHLQ,HLPROD,HLQ,HLREP
"RTN","IBCNEHLM",47,0)
 N HLRESLT,HLSAN,HLTYPE,HLX,IBCNE,IBCNEDAT,IHLP,IHLS,IHLT,ID,INACT,IPA,IPP
"RTN","IBCNEHLM",48,0)
 N MCT,MFE,MFN,MGRP,QFL,RESP,TAXID,ZMID,%I
"RTN","IBCNEHLM",49,0)
 N IVER,RETRY,TIMOUT,VMFE         ; IB*2.0*506
"RTN","IBCNEHLM",50,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",51,0)
 ;
"RTN","IBCNEHLM",52,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",53,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",54,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",55,0)
 S FRSH=$P(IBCNE,U,1),TIMOUT=$P(IBCNE,U,5),RETRY=$P(IBCNE,U,26) ; IB*2.0*506
"RTN","IBCNEHLM",56,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",57,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",58,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14)
"RTN","IBCNEHLM",59,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 ; IB*2.0*549 Updated version to 7, Removed retrieval of Contact Name, Phone, email
"RTN","IBCNEHLM",62,0)
 S IVER="7"
"RTN","IBCNEHLM",63,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",64,0)
 ;
"RTN","IBCNEHLM",65,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",66,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",67,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",68,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",69,0)
 ;
"RTN","IBCNEHLM",70,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",71,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",72,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic re-verification checks"" is blank.  "
"RTN","IBCNEHLM",73,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",74,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",75,0)
 . Q
"RTN","IBCNEHLM",76,0)
 ;
"RTN","IBCNEHLM",77,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",78,0)
 I QFL=1 Q
"RTN","IBCNEHLM",79,0)
 ;
"RTN","IBCNEHLM",80,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",81,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",82,0)
 N DSTAT,DSTAT2,VNTE,VZRR                   ; IB*2.0*549 added DSTAT2
"RTN","IBCNEHLM",83,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",84,0)
 ;
"RTN","IBCNEHLM",85,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",86,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",87,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3),HLREP=$E(HL("ECH"),2)
"RTN","IBCNEHLM",88,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",89,0)
 ;
"RTN","IBCNEHLM",90,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",91,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",92,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",93,0)
 ;
"RTN","IBCNEHLM",94,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",95,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",96,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",97,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",98,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",99,0)
 ;
"RTN","IBCNEHLM",100,0)
 ; Set the ZRR segment
"RTN","IBCNEHLM",101,0)
 ;IB*549 Added line to send null values for removed fields so msg layout remains unchanged
"RTN","IBCNEHLM",102,0)
 S (CNTCPH,CNTCEM,CNTCNM)=""
"RTN","IBCNEHLM",103,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",104,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",105,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",106,0)
 ;
"RTN","IBCNEHLM",107,0)
 ; Set the NTE segment
"RTN","IBCNEHLM",108,0)
 S DSTAT=$$GETSTAT^IBCNEDST()
"RTN","IBCNEHLM",109,0)
 S DSTAT2=$$GETSTAT2^IBCNEDST()                 ; IB*2.0*549 Added line
"RTN","IBCNEHLM",110,0)
 S VNTE="NTE"_HLFS_"1"_HLFS_HLFS_IBPERSIST_HLREP_$TR(DSTAT,U,HLREP)
"RTN","IBCNEHLM",111,0)
 S VNTE=VNTE_HLREP_RETRY_HLREP_TIMOUT           ; IB*2.0*506
"RTN","IBCNEHLM",112,0)
 S VNTE=VNTE_HLREP_$TR(DSTAT2,U,HLREP)          ; IB*2.0*549 Added line
"RTN","IBCNEHLM",113,0)
 S ^TMP("HLS",$J,4)=VNTE
"RTN","IBCNEHLM",114,0)
 ;
"RTN","IBCNEHLM",115,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",116,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",117,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",118,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",119,0)
 . D MLMN
"RTN","IBCNEHLM",120,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",121,0)
 Q
"RTN","IBCNEHLM",122,0)
 ;
"RTN","IBCNEHLM",123,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",124,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",125,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",126,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",127,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",128,0)
 Q
"RTN","IBCNEHLT")
0^10^B100567838
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 15 Mar 2016  3:00 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300,416,438,506,549**;21-MAR-94;Build 54
"RTN","IBCNEHLT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,REQSUB,NAFLG,NPFLG,TRUSTED
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an eIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; ** With national release of IB*2*550 ePharmacy will no longer use this routine to process table
"RTN","IBCNEHLT",20,0)
 ;    updates.
"RTN","IBCNEHLT",21,0)
 ; ** Therefore, several lines of code will become obsolete as commented in this routine.
"RTN","IBCNEHLT",22,0)
 ;
"RTN","IBCNEHLT",23,0)
 ; ** Upon national release of IB*2*550 reword statement below to drop ePHARM reference
"RTN","IBCNEHLT",24,0)
 ;
"RTN","IBCNEHLT",25,0)
 ; Build local table of file numbers to determine if response is eIV or ePHARM
"RTN","IBCNEHLT",26,0)
 ; * Warning: Before adding a new table to be updated by FSC, one must get FSC
"RTN","IBCNEHLT",27,0)
 ;            to agree and the eIV ICD documentation has to be updated and 
"RTN","IBCNEHLT",28,0)
 ;            approved by the VA HL7 team. Just adding a table number here does
"RTN","IBCNEHLT",29,0)
 ;            absolutely nothing without involving the other teams.
"RTN","IBCNEHLT",30,0)
 ;
"RTN","IBCNEHLT",31,0)
 F D=11:1:18 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",32,0)
 ;F D=21:1:28 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",33,0)
 S X12TABLE(350.021)=""
"RTN","IBCNEHLT",34,0)
 S X12TABLE(350.9)=""     ; IB*2.0*506
"RTN","IBCNEHLT",35,0)
 S X12TABLE(350.9002)=""  ; IB*2.0*549
"RTN","IBCNEHLT",36,0)
 ;
"RTN","IBCNEHLT",37,0)
 ; Decide if message belongs to "E-Pharm" or "eIV"
"RTN","IBCNEHLT",38,0)
 S APP=""
"RTN","IBCNEHLT",39,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",40,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",41,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"   ; ** Obsolete line upon release of IB*2*550
"RTN","IBCNEHLT",42,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",43,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",44,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",45,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",46,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",47,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",48,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",49,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the Vista eIV payer tables may be out"
"RTN","IBCNEHLT",50,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",51,0)
 ... S MSG(4)="update message from Austin."
"RTN","IBCNEHLT",52,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",53,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",54,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",55,0)
 ;
"RTN","IBCNEHLT",56,0)
 ; ** Upon release of IB*2*550, drop the ePharm reference in the comment below
"RTN","IBCNEHLT",57,0)
 ; If neither eIV or ePHARM then quit
"RTN","IBCNEHLT",58,0)
 I APP="" Q
"RTN","IBCNEHLT",59,0)
 ;
"RTN","IBCNEHLT",60,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",61,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",62,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",63,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",64,0)
 . ;
"RTN","IBCNEHLT",65,0)
 . I APP="E-PHARM" D   ;  ** This Do-loop is obsolete upon release of IB*2*550
"RTN","IBCNEHLT",66,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",67,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",68,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",69,0)
 ... ;
"RTN","IBCNEHLT",70,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",71,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",72,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",73,0)
 ... ;
"RTN","IBCNEHLT",74,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",75,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",76,0)
 .. ;
"RTN","IBCNEHLT",77,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",78,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",79,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",80,0)
 ... ;
"RTN","IBCNEHLT",81,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",82,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",83,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",84,0)
 ... ;
"RTN","IBCNEHLT",85,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",86,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",87,0)
 ... ;
"RTN","IBCNEHLT",88,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",89,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",90,0)
 ... ;
"RTN","IBCNEHLT",91,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",92,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",93,0)
 .. ;
"RTN","IBCNEHLT",94,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",95,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",96,0)
 . ; ** end of obsolete do-loop upon national release of IB*2*550
"RTN","IBCNEHLT",97,0)
 . ;
"RTN","IBCNEHLT",98,0)
 . ;
"RTN","IBCNEHLT",99,0)
 . ;** Upon release of IB*2*550 this if statement (I APP="IIV") won't be necessary but it DOES NOT
"RTN","IBCNEHLT",100,0)
 . ;   hurt to leave it in moving forward as a safety valve.
"RTN","IBCNEHLT",101,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",102,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",103,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",104,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",105,0)
 .. ;
"RTN","IBCNEHLT",106,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",107,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",108,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",109,0)
 ... ;
"RTN","IBCNEHLT",110,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",111,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",112,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",113,0)
 .... D TFIL
"RTN","IBCNEHLT",114,0)
 ... ;
"RTN","IBCNEHLT",115,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",116,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",117,0)
 ... ; Effective Date
"RTN","IBCNEHLT",118,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",119,0)
 .. ;
"RTN","IBCNEHLT",120,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",121,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",122,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",123,0)
 .. ;
"RTN","IBCNEHLT",124,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",125,0)
 ... S STAT=$S(IBSEG(4)="Y":1,1:0)
"RTN","IBCNEHLT",126,0)
 ... S TSSN=IBSEG(5),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",127,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",128,0)
 ... S TRUSTED=$S(IBSEG(10)="N":0,1:1)
"RTN","IBCNEHLT",129,0)
 ... D PFIL
"RTN","IBCNEHLT",130,0)
 Q
"RTN","IBCNEHLT",131,0)
 ;
"RTN","IBCNEHLT",132,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",133,0)
 ;  Set the action:
"RTN","IBCNEHLT",134,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",135,0)
 N OLDAF,OLDTF
"RTN","IBCNEHLT",136,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",137,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",138,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",139,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",140,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",141,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",142,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",143,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",144,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",145,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",146,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",147,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",148,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",149,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",150,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",151,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",152,0)
 N IBCNTYPE
"RTN","IBCNEHLT",153,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",154,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",155,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",156,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",157,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",158,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",159,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",160,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",161,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",162,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",163,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",164,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",165,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",166,0)
 ;
"RTN","IBCNEHLT",167,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",168,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",169,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",170,0)
 ;
"RTN","IBCNEHLT",171,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",172,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",173,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",174,0)
 ;
"RTN","IBCNEHLT",175,0)
 ;  Check for application
"RTN","IBCNEHLT",176,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",177,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",178,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",179,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",180,0)
 . K DD,DO
"RTN","IBCNEHLT",181,0)
 . D FILE^DICN
"RTN","IBCNEHLT",182,0)
 . K DO
"RTN","IBCNEHLT",183,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",184,0)
 ;
"RTN","IBCNEHLT",185,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",186,0)
 I APIEN="" D
"RTN","IBCNEHLT",187,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",188,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",189,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",190,0)
 . K DD,DO
"RTN","IBCNEHLT",191,0)
 . D FILE^DICN
"RTN","IBCNEHLT",192,0)
 . K DO
"RTN","IBCNEHLT",193,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",194,0)
 ; get current values for Active and Trusted flags
"RTN","IBCNEHLT",195,0)
 S OLDAF=$P(^IBE(365.12,IEN,1,APIEN,0),U,2),OLDTF=$P(^IBE(365.12,IEN,1,APIEN,0),U,7)
"RTN","IBCNEHLT",196,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",197,0)
 ;
"RTN","IBCNEHLT",198,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",199,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",200,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT();.07///^S X=TRUSTED"
"RTN","IBCNEHLT",201,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",202,0)
 ;
"RTN","IBCNEHLT",203,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",204,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",205,0)
 ;
"RTN","IBCNEHLT",206,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",207,0)
 ; Update flag logs
"RTN","IBCNEHLT",208,0)
 I STAT'=OLDAF D UPDLOG("A",STAT,IEN,APIEN)
"RTN","IBCNEHLT",209,0)
 I TRUSTED'=OLDTF D UPDLOG("T",TRUSTED,IEN,APIEN)
"RTN","IBCNEHLT",210,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",211,0)
PFILX ;
"RTN","IBCNEHLT",212,0)
 Q
"RTN","IBCNEHLT",213,0)
 ;
"RTN","IBCNEHLT",214,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",215,0)
 ; Input: DESC  - Field Number
"RTN","IBCNEHLT",216,0)
 ;        ID    - Field Value
"RTN","IBCNEHLT",217,0)
 ;        FLN   - File Number
"RTN","IBCNEHLT",218,0)
 N DA,DIC,DIE,DLAYGO,DR,EXTRACT,IEN,MAX,XX,X,Y   ;IB*2.0*549 - Added DA,DIE,DR,EXTRACT,XX
"RTN","IBCNEHLT",219,0)
 ;
"RTN","IBCNEHLT",220,0)
 ; store the FILENAME, FIELDNAME and VALUE if the APP is IIV and FLN is 350.9.  - IB*2.0*506
"RTN","IBCNEHLT",221,0)
 ; For file #350.9, DESC represents the FIELD NUMBER and ID represents the VALUE.
"RTN","IBCNEHLT",222,0)
 I APP="IIV",FLN=350.9 D  Q
"RTN","IBCNEHLT",223,0)
 . S DIE=FLN,DA=1,DR=DESC_"///"_ID
"RTN","IBCNEHLT",224,0)
 . D ^DIE
"RTN","IBCNEHLT",225,0)
 ;
"RTN","IBCNEHLT",226,0)
 ; IB*2.0*549 Added if statement 
"RTN","IBCNEHLT",227,0)
 I APP="IIV",FLN=350.9002 D  Q
"RTN","IBCNEHLT",228,0)
 . S EXTRACT=$E(DESC,1,4)                   ; Either "Buff" or "Appt"
"RTN","IBCNEHLT",229,0)
 . S XX=$S(EXTRACT="Buff":1,EXTRACT="Appt":2,1:3)
"RTN","IBCNEHLT",230,0)
 . S DESC=$E(DESC,5,99)                     ; Field number
"RTN","IBCNEHLT",231,0)
 . S DA(1)=1
"RTN","IBCNEHLT",232,0)
 . S DA=$O(^IBE(350.9,1,51.17,"B",XX,""))   ; Find correct multiple
"RTN","IBCNEHLT",233,0)
 . ;
"RTN","IBCNEHLT",234,0)
 . ; File the new value
"RTN","IBCNEHLT",235,0)
 . S DIE="^IBE(350.9,1,51.17,"
"RTN","IBCNEHLT",236,0)
 . S DR=DESC_"///"_ID
"RTN","IBCNEHLT",237,0)
 . D ^DIE
"RTN","IBCNEHLT",238,0)
 ;
"RTN","IBCNEHLT",239,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",240,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",241,0)
 ; don't update existing entries
"RTN","IBCNEHLT",242,0)
 I IEN>0 Q
"RTN","IBCNEHLT",243,0)
 ;
"RTN","IBCNEHLT",244,0)
 D FIELD^DID(FLN,.02,,"FIELD LENGTH","MAX")
"RTN","IBCNEHLT",245,0)
 I MAX("FIELD LENGTH")>0 S DESC=$E(DESC,1,MAX("FIELD LENGTH")) ; restriction of the field in the DD
"RTN","IBCNEHLT",246,0)
 ; add new entry to the table
"RTN","IBCNEHLT",247,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///"_DESC
"RTN","IBCNEHLT",248,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///^S X=DESC"
"RTN","IBCNEHLT",249,0)
 K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",250,0)
 Q
"RTN","IBCNEHLT",251,0)
 ;
"RTN","IBCNEHLT",252,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",253,0)
 D FND
"RTN","IBCNEHLT",254,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",255,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",256,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",257,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",258,0)
 K DD,DO
"RTN","IBCNEHLT",259,0)
 D FILE^DICN
"RTN","IBCNEHLT",260,0)
 K DO
"RTN","IBCNEHLT",261,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",262,0)
MADX ;
"RTN","IBCNEHLT",263,0)
 Q
"RTN","IBCNEHLT",264,0)
 ;
"RTN","IBCNEHLT",265,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",266,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",267,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",268,0)
 ;
"RTN","IBCNEHLT",269,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",270,0)
 D IX^DIC
"RTN","IBCNEHLT",271,0)
 S IEN=+Y
"RTN","IBCNEHLT",272,0)
 Q
"RTN","IBCNEHLT",273,0)
 ;
"RTN","IBCNEHLT",274,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",275,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",276,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",277,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",278,0)
 .. ;
"RTN","IBCNEHLT",279,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",280,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",281,0)
 .. ;
"RTN","IBCNEHLT",282,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",283,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",284,0)
 .. ;
"RTN","IBCNEHLT",285,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",286,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",287,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",288,0)
 .. ;
"RTN","IBCNEHLT",289,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",290,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",291,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",292,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",293,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",294,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",295,0)
 Q
"RTN","IBCNEHLT",296,0)
 ;
"RTN","IBCNEHLT",297,0)
UPDLOG(FLAG,VALUE,PIEN,APIEN) ; Update active/trusted flag logs
"RTN","IBCNEHLT",298,0)
 ; FLAG - "A" for Active flag, "T" for Trusted flag
"RTN","IBCNEHLT",299,0)
 ; VALUE - new flag value (0 or 1)
"RTN","IBCNEHLT",300,0)
 ; PIEN - ien in PAYER file (365.12)
"RTN","IBCNEHLT",301,0)
 ; APIEN - ien in APPLICATION sub-file (365.121)
"RTN","IBCNEHLT",302,0)
 ;
"RTN","IBCNEHLT",303,0)
 N FILE,IENSTR,UPDT
"RTN","IBCNEHLT",304,0)
 I $G(FLAG)=""!($G(VALUE)="") Q
"RTN","IBCNEHLT",305,0)
 I +$G(PIEN)=0!(+$G(APIEN)=0) Q
"RTN","IBCNEHLT",306,0)
 S FILE=$S(FLAG="A":"365.1212",FLAG="T":"365.1213",1:"") I FILE="" Q
"RTN","IBCNEHLT",307,0)
 S IENSTR="+1,"_APIEN_","_PIEN_","
"RTN","IBCNEHLT",308,0)
 S UPDT(FILE,IENSTR,.01)=$$NOW^XLFDT()
"RTN","IBCNEHLT",309,0)
 S UPDT(FILE,IENSTR,.02)=VALUE
"RTN","IBCNEHLT",310,0)
 D UPDATE^DIE("E","UPDT")
"RTN","IBCNEHLT",311,0)
 Q
"RTN","IBCNEHLU")
0^68^B104037838
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002  ; Compiled December 16, 2004 15:36:12
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300,416,438,497,549**;21-MAR-94;Build 54
"RTN","IBCNEHLU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEHLU",30,0)
DODCK(DFN,DOD,MGRP,NAME,RIEN,SSN) ;  Date of death check
"RTN","IBCNEHLU",31,0)
 ;
"RTN","IBCNEHLU",32,0)
 ; Input Variables
"RTN","IBCNEHLU",33,0)
 ; DFN, DOD, MGRP, NAME, RIEN, SSN
"RTN","IBCNEHLU",34,0)
 ;
"RTN","IBCNEHLU",35,0)
 N CDOD,CIDDSP,IDDSP,IDSSN,MSG,XMSUB
"RTN","IBCNEHLU",36,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLU",37,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLU",38,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLU",39,0)
 ;
"RTN","IBCNEHLU",40,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLU",41,0)
 I CDOD=DOD G DODCKX
"RTN","IBCNEHLU",42,0)
 ;
"RTN","IBCNEHLU",43,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLU",44,0)
 I CDOD="" D  G DODCKX
"RTN","IBCNEHLU",45,0)
 . ;  Send an email message
"RTN","IBCNEHLU",46,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLU",47,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLU",48,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLU",49,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLU",50,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",51,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",52,0)
 ;
"RTN","IBCNEHLU",53,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLU",54,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLU",55,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLU",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",58,0)
DODCKX   ;
"RTN","IBCNEHLU",59,0)
 Q
"RTN","IBCNEHLU",60,0)
 ;
"RTN","IBCNEHLU",61,0)
SPAR     ;  Segment Parsing
"RTN","IBCNEHLU",62,0)
 ;
"RTN","IBCNEHLU",63,0)
 ; This tag will parse the current segment referenced by the HCT index
"RTN","IBCNEHLU",64,0)
 ; and place the results in the IBSEG array.
"RTN","IBCNEHLU",65,0)
 ;
"RTN","IBCNEHLU",66,0)
 ; Input Variables
"RTN","IBCNEHLU",67,0)
 ; HCT
"RTN","IBCNEHLU",68,0)
 ;
"RTN","IBCNEHLU",69,0)
 ; Output Variables
"RTN","IBCNEHLU",70,0)
 ; IBSEG (ARRAY of fields in segment)
"RTN","IBCNEHLU",71,0)
 ;
"RTN","IBCNEHLU",72,0)
 N II,IJ,IK,IM,IS,ISBEG,ISCT,ISDATA,ISEND,ISPEC,LSDATA,NPC
"RTN","IBCNEHLU",73,0)
 ;
"RTN","IBCNEHLU",74,0)
 ;Reset IBSEG
"RTN","IBCNEHLU",75,0)
 K IBSEG
"RTN","IBCNEHLU",76,0)
 ;
"RTN","IBCNEHLU",77,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLU",78,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLU",79,0)
 . S IS=IS+1
"RTN","IBCNEHLU",80,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLU",81,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_HLFS
"RTN","IBCNEHLU",82,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLU",83,0)
 ;
"RTN","IBCNEHLU",84,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLU",85,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLU",86,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLU",87,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLU",88,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLU",89,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLU",90,0)
 G LP
"RTN","IBCNEHLU",91,0)
CLNSTR(STRING,CHARS,SUBSEP)      ; Remove extra trailing components and subcomponents in the HL7 seg
"RTN","IBCNEHLU",92,0)
 ;
"RTN","IBCNEHLU",93,0)
 N NUMPEC,PEC,RTSTRING
"RTN","IBCNEHLU",94,0)
 ;
"RTN","IBCNEHLU",95,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLU",96,0)
 ; Now we have string w/o trailing chars, remove from subs
"RTN","IBCNEHLU",97,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLU",98,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLU",99,0)
 Q RTSTRING
"RTN","IBCNEHLU",100,0)
 ;
"RTN","IBCNEHLU",101,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLU",102,0)
 ;
"RTN","IBCNEHLU",103,0)
 N R,L
"RTN","IBCNEHLU",104,0)
 ;
"RTN","IBCNEHLU",105,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLU",106,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLU",107,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLU",108,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLU",109,0)
 ;
"RTN","IBCNEHLU",110,0)
 ;
"RTN","IBCNEHLU",111,0)
GTICNM(ICN,NAME) ; Retrieve PID segment and set ICN and patient name
"RTN","IBCNEHLU",112,0)
 ;
"RTN","IBCNEHLU",113,0)
 N HCT,ERFLG,SEG,IBSEG
"RTN","IBCNEHLU",114,0)
 S (HCT,ICN,NAME)="",ERFLG=0
"RTN","IBCNEHLU",115,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLU",116,0)
 .  D SPAR
"RTN","IBCNEHLU",117,0)
 .  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLU",118,0)
 .  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLU",119,0)
 Q
"RTN","IBCNEHLU",120,0)
 ;
"RTN","IBCNEHLU",121,0)
PATISSUB(IDATA0) ; check if patient is the subscriber
"RTN","IBCNEHLU",122,0)
 ; IDATA0 - 0 node of file 2.312
"RTN","IBCNEHLU",123,0)
 ;
"RTN","IBCNEHLU",124,0)
 ; returns 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHLU",125,0)
 ;
"RTN","IBCNEHLU",126,0)
 N PREL,RES
"RTN","IBCNEHLU",127,0)
 S RES=0
"RTN","IBCNEHLU",128,0)
 ; check field 2.312/16 first
"RTN","IBCNEHLU",129,0)
 S PREL=$P(IDATA0,U,16) I PREL'="" S:PREL="01" RES=1 Q RES
"RTN","IBCNEHLU",130,0)
 ; if 2.312/16 is empty, try field 2.312/6
"RTN","IBCNEHLU",131,0)
 I $P(IDATA0,U,6)="v" S RES=1
"RTN","IBCNEHLU",132,0)
 Q RES
"RTN","IBCNEHLU",133,0)
 ;
"RTN","IBCNEHLU",134,0)
ONEPOL(PIEN,IEN2) ; check if patient has only one policy on file for a given payer
"RTN","IBCNEHLU",135,0)
 ; PIEN - payer ien
"RTN","IBCNEHLU",136,0)
 ; IEN2 - patient ien (file 2)
"RTN","IBCNEHLU",137,0)
 ;
"RTN","IBCNEHLU",138,0)
 ; returns 1 if only one policy is found, 0 otherwise
"RTN","IBCNEHLU",139,0)
 N CNT,IEN36,IEN312,RES
"RTN","IBCNEHLU",140,0)
 S (CNT,RES)=0
"RTN","IBCNEHLU",141,0)
 I +$G(PIEN)'>0!(+$G(IEN2)'>0) Q RES
"RTN","IBCNEHLU",142,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""  D
"RTN","IBCNEHLU",143,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""  S CNT=CNT+1
"RTN","IBCNEHLU",144,0)
 .Q
"RTN","IBCNEHLU",145,0)
 I CNT=1 S RES=1
"RTN","IBCNEHLU",146,0)
 Q RES
"RTN","IBCNEHLU",147,0)
 ;
"RTN","IBCNEHLU",148,0)
MCRDT(RIEN,EBIEN) ; find effective date for Medicare response
"RTN","IBCNEHLU",149,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",150,0)
 ; EBIEN - subfile 365.02 ien
"RTN","IBCNEHLU",151,0)
 ;
"RTN","IBCNEHLU",152,0)
 ; returns date in FM format or "" if effective date was not found
"RTN","IBCNEHLU",153,0)
 ;
"RTN","IBCNEHLU",154,0)
 N DONE,DTIEN,IENS,RES,Z
"RTN","IBCNEHLU",155,0)
 S RES="",DONE=0
"RTN","IBCNEHLU",156,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",157,0)
 .S DTIEN=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z,"")) I 'DTIEN Q
"RTN","IBCNEHLU",158,0)
 .S IENS=DTIEN_","_EBIEN_","_RIEN_","
"RTN","IBCNEHLU",159,0)
 .; effective date has "eligibility" qualifier
"RTN","IBCNEHLU",160,0)
 .I $$GET1^DIQ(365.28,IENS,.03)=307 S RES=$$FMDATE^HLFNC($$GET1^DIQ(365.28,IENS,.02)),DONE=1
"RTN","IBCNEHLU",161,0)
 .Q
"RTN","IBCNEHLU",162,0)
 Q RES
"RTN","IBCNEHLU",163,0)
 ;
"RTN","IBCNEHLU",164,0)
ISMCR(RIEN) ; Check if response is for Medicare part A/B
"RTN","IBCNEHLU",165,0)
 ; Input:   RIEN        - Internal ien for file 365
"RTN","IBCNEHLU",166,0)
 ; Returns  A1^A2^A3^A4^A5 Where:
"RTN","IBCNEHLU",167,0)
 ;                  A1 - 1 if response if for Medicare, 0 otherwise
"RTN","IBCNEHLU",168,0)
 ;                  A2 - "MA" if response is for Medicare Part A
"RTN","IBCNEHLU",169,0)
 ;                       "MB" if response is for Medicare Part B
"RTN","IBCNEHLU",170,0)
 ;                        "B" if response is for both Part A and Part B
"RTN","IBCNEHLU",171,0)
 ;                        "" if response if not for Medicare
"RTN","IBCNEHLU",172,0)
 ;                  A3 - Effective date for Medicare Part A if response if for 
"RTN","IBCNEHLU",173,0)
 ;                       Part A or both parts, "" otherwise
"RTN","IBCNEHLU",174,0)
 ;                  A4 - Effective date for Medicare Part B if response if for
"RTN","IBCNEHLU",175,0)
 ;                       Part B or both parts, "" otherwise
"RTN","IBCNEHLU",176,0)
 ;                  A5 - "MA" - Response is for active Medicare Part A only
"RTN","IBCNEHLU",177,0)
 ;                       "MB" - Response is for active Medicare Part B only
"RTN","IBCNEHLU",178,0)
 ;                       "B"  - Response is for active Medicare Parts A and B
"RTN","IBCNEHLU",179,0)
 ;                       ""   - Response is not for active Medicare
"RTN","IBCNEHLU",180,0)
 ;                       IB*2.0*549 - added return of A5
"RTN","IBCNEHLU",181,0)
 ;
"RTN","IBCNEHLU",182,0)
 N ACTIVE,DONE,EBIEN,RES,TYPE,TYPEA,TYPEB,Z,ZZ ;IB*2.0*549 added ACTIVE,TYPEA,TYPEB,ZZ
"RTN","IBCNEHLU",183,0)
 S RES="0^",DONE=0,(TYPEA,TYPEB)=0             ;IB*2.0*549 added ,(TYPEA,TYPEB)=0
"RTN","IBCNEHLU",184,0)
 I +RIEN'>0 Q RES
"RTN","IBCNEHLU",185,0)
 I '$D(^IBCN(365,RIEN)) Q RES
"RTN","IBCNEHLU",186,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",187,0)
 . S EBIEN=$O(^IBCN(365,RIEN,2,"B",Z,""))
"RTN","IBCNEHLU",188,0)
 . S TYPE=$$GET1^DIQ(365.02,EBIEN_","_RIEN_",",.05)
"RTN","IBCNEHLU",189,0)
 . ;
"RTN","IBCNEHLU",190,0)
 . ; IB*2.0*549 added next two lines
"RTN","IBCNEHLU",191,0)
 . S ACTIVE=$$GET1^DIQ(365.02,EBIEN_","_RIEN_",",.02,"I")
"RTN","IBCNEHLU",192,0)
 . S ACTIVE=$S(ACTIVE=1:1,1:0)
"RTN","IBCNEHLU",193,0)
 . I TYPE="MA" D
"RTN","IBCNEHLU",194,0)
 . . S:ACTIVE TYPEA=1                       ;IB*2.0*549 added line
"RTN","IBCNEHLU",195,0)
 . . S ZZ=$P(RES,U,2)                       ;IB*2.0*549 added line
"RTN","IBCNEHLU",196,0)
 . . S $P(RES,U)=1,$P(RES,U,2)=$S(ZZ="":"MA",ZZ="MA":"MA",1:"B")
"RTN","IBCNEHLU",197,0)
 . . S $P(RES,U,3)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",198,0)
 . . ;
"RTN","IBCNEHLU",199,0)
 . . ; IB*2.0*549 added line
"RTN","IBCNEHLU",200,0)
 . . S:ACTIVE $P(RES,U,5)=$S((TYPEA&TYPEB):"B",1:"MA")
"RTN","IBCNEHLU",201,0)
 . I TYPE="MB" D
"RTN","IBCNEHLU",202,0)
 . . S:ACTIVE TYPEB=1                       ;IB*2.0*549 added line
"RTN","IBCNEHLU",203,0)
 . . S ZZ=$P(RES,U,2)                       ;IB*2.0*549 added line
"RTN","IBCNEHLU",204,0)
 . . S $P(RES,U)=1,$P(RES,U,2)=$S(ZZ="":"MB",ZZ="MB":"MB",1:"B")
"RTN","IBCNEHLU",205,0)
 . . S $P(RES,U,4)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",206,0)
 . . ;
"RTN","IBCNEHLU",207,0)
 . . ; IB*2.0*549 added line
"RTN","IBCNEHLU",208,0)
 . . S:ACTIVE $P(RES,U,5)=$S((TYPEA&TYPEB):"B",1:"MB")
"RTN","IBCNEHLU",209,0)
 . I $P(RES,U,2)="B" S DONE=1
"RTN","IBCNEHLU",210,0)
 Q RES
"RTN","IBCNEHLU",211,0)
 ;
"RTN","IBCNEHLU",212,0)
ERRACT(RIEN) ; Pick error action code to use for re-transmission
"RTN","IBCNEHLU",213,0)
 ; Input:   RIEN      - IEN in file 365 (Transmission file)
"RTN","IBCNEHLU",214,0)
 ; Returns: Error action^Error condition; "" if no error found
"RTN","IBCNEHLU",215,0)
 ;
"RTN","IBCNEHLU",216,0)
 ; If any of C,N,S,Y action codes are found, the  first one encountered is returned.
"RTN","IBCNEHLU",217,0)
 ; Otherwise, if W action code is found, it is returned.
"RTN","IBCNEHLU",218,0)
 ; Otherwise, if X action code is found, it is returned.
"RTN","IBCNEHLU",219,0)
 ; Otherwise, one of the P,R action codes is returned.
"RTN","IBCNEHLU",220,0)
 ;
"RTN","IBCNEHLU",221,0)
 N ACODE,AIEN,ECCODE,ECIEN,DONE,IEN,RES,Z
"RTN","IBCNEHLU",222,0)
 S RES=""
"RTN","IBCNEHLU",223,0)
 I '+$G(RIEN) G ERRACTX
"RTN","IBCNEHLU",224,0)
 S DONE=0
"RTN","IBCNEHLU",225,0)
 S Z="" F  S IEN=$O(^IBCN(365,RIEN,6,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",226,0)
 . S IEN=+$O(^IBCN(365,RIEN,6,"B",Z,""))
"RTN","IBCNEHLU",227,0)
 . Q:'IEN
"RTN","IBCNEHLU",228,0)
 . S ECIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,3)
"RTN","IBCNEHLU",229,0)
 . Q:'ECIEN
"RTN","IBCNEHLU",230,0)
 . S AIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,4)
"RTN","IBCNEHLU",231,0)
 . Q:'AIEN
"RTN","IBCNEHLU",232,0)
 . S ACODE=$P(^IBE(365.018,AIEN,0),U),ECCODE=$P(^IBE(365.017,ECIEN,0),U)
"RTN","IBCNEHLU",233,0)
 . ;
"RTN","IBCNEHLU",234,0)
 . ; One of "do not retransmit" codes
"RTN","IBCNEHLU",235,0)
 . I ".C.N.S.Y"[("."_ACODE_".") S RES=ACODE_U_ECCODE,DONE=1 Q
"RTN","IBCNEHLU",236,0)
 . ;
"RTN","IBCNEHLU",237,0)
 . ; Retransmit after 30 days code
"RTN","IBCNEHLU",238,0)
 . I ACODE="W" S RES=ACODE_U_ECCODE Q
"RTN","IBCNEHLU",239,0)
 . ;
"RTN","IBCNEHLU",240,0)
 . ; Retransmit after 10 days code
"RTN","IBCNEHLU",241,0)
 . I ACODE="X" S:RES'="W" RES=ACODE_U_ECCODE Q
"RTN","IBCNEHLU",242,0)
 . ;
"RTN","IBCNEHLU",243,0)
 . ; Retransmit whenever codes
"RTN","IBCNEHLU",244,0)
 . I RES'="W",RES'="X" S RES=ACODE_U_ECCODE
"RTN","IBCNEHLU",245,0)
ERRACTX  ;
"RTN","IBCNEHLU",246,0)
 Q RES
"RTN","IBCNEHLU",247,0)
 ;
"RTN","IBCNEHLU",248,0)
NAMECMP(NAME1,NAME2) ; check if 2 names have the same first name and last name components
"RTN","IBCNEHLU",249,0)
 ; NAME1, NAME2 - names to compare, should be in "last,first [middle]" format
"RTN","IBCNEHLU",250,0)
 ;
"RTN","IBCNEHLU",251,0)
 ; returns 1 if both first name and last name are the same between two names, returns 0 otherwise
"RTN","IBCNEHLU",252,0)
 N NM1,NM2,RES
"RTN","IBCNEHLU",253,0)
 S RES=0
"RTN","IBCNEHLU",254,0)
 S NM1=$$HLNAME^HLFNC(NAME1),NM2=$$HLNAME^HLFNC(NAME2)
"RTN","IBCNEHLU",255,0)
 I $P(NM1,U)=$P(NM2,U),$P(NM1,U,2)=$P(NM2,U,2) S RES=1
"RTN","IBCNEHLU",256,0)
 Q RES
"RTN","IBCNEHLU",257,0)
 ;
"RTN","IBCNEHLU",258,0)
TRNCWARN(GNUM,TRACE) ; send group number truncation warning message
"RTN","IBCNEHLU",259,0)
 N MSG
"RTN","IBCNEHLU",260,0)
 S MSG(1)="WARNING: Group number in the Response Message from the EC has been truncated"
"RTN","IBCNEHLU",261,0)
 S MSG(2)="----------------------------------------------------------------------------"
"RTN","IBCNEHLU",262,0)
 S MSG(3)="Original group number (in the eIV response received): "_$G(GNUM)
"RTN","IBCNEHLU",263,0)
 S MSG(4)="Truncated group number (filed into response file): "_$E($G(GNUM),1,17)
"RTN","IBCNEHLU",264,0)
 S MSG(5)=" "
"RTN","IBCNEHLU",265,0)
 S MSG(6)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)
"RTN","IBCNEHLU",266,0)
 S MSG(7)=" "
"RTN","IBCNEHLU",267,0)
 D MSG^IBCNEUT5($G(MGRP),MSG(1),"MSG(")
"RTN","IBCNEHLU",268,0)
 Q
"RTN","IBCNEHLU",269,0)
 ;
"RTN","IBCNEHLU",270,0)
CODECHK(RSUPDT) ;  IB*2*497
"RTN","IBCNEHLU",271,0)
 ; need to determine if codes and qualifiers sent in the 271 HL7 message
"RTN","IBCNEHLU",272,0)
 ; are new.  If code/qualifier does not exist in table then file new code into table 
"RTN","IBCNEHLU",273,0)
 ; input -
"RTN","IBCNEHLU",274,0)
 ; RSUPDT = FDA array that will be passed to the DBS filer to update the 
"RTN","IBCNEHLU",275,0)
 ;          entry/subentry into the IIV RESPONSE file
"RTN","IBCNEHLU",276,0)
 ; example: RSUPDT(365.02,IENS,".02") = data to be filed into 365.02 subfile at field .02
"RTN","IBCNEHLU",277,0)
 ; order through the RSUPDT array and determine if pointer to file
"RTN","IBCNEHLU",278,0)
 ; if pointer to file then pass file name and value of code/qualifier
"RTN","IBCNEHLU",279,0)
 N IENS,FLD,FILE,RES,TOFILE,NEWARRY,Z,ZIENS
"RTN","IBCNEHLU",280,0)
 S (IENS,FILE,FLD)="",Z=0
"RTN","IBCNEHLU",281,0)
 F  S FILE=$O(RSUPDT(FILE)) Q:FILE=""  F  S IENS=$O(RSUPDT(FILE,IENS))  Q:IENS=""  D
"RTN","IBCNEHLU",282,0)
 . F  S FLD=$O(RSUPDT(FILE,IENS,FLD)) Q:FLD=""  D
"RTN","IBCNEHLU",283,0)
 . . Q:RSUPDT(FILE,IENS,FLD)=""   ; value was not sent by payer; no need to continue
"RTN","IBCNEHLU",284,0)
 . . D FIELD^DID(FILE,FLD,"","POINTER","RES") ; get the name of the file that is pointed to (if any)
"RTN","IBCNEHLU",285,0)
 . . Q:RES("POINTER")=""  ; field is not defined as a pointer to a file
"RTN","IBCNEHLU",286,0)
 . . S TOFILE=$P($P(RES("POINTER"),","),"(",2)  ; example: RES("POINTER")="IBE(365.011,"
"RTN","IBCNEHLU",287,0)
 . . Q:+TOFILE=0
"RTN","IBCNEHLU",288,0)
 . . Q:$$FIND1^DIC(TOFILE,"","X",RSUPDT(FILE,IENS,FLD))  ; code is already in file.  No need to update the pointed-to-file
"RTN","IBCNEHLU",289,0)
 . . S Z=Z+1,ZIENS="+"_Z_","
"RTN","IBCNEHLU",290,0)
 . . S NEWARRY(TOFILE,ZIENS,.01)=RSUPDT(FILE,IENS,FLD) ; code passed into VistA from 271 message
"RTN","IBCNEHLU",291,0)
 . . S NEWARRY(TOFILE,ZIENS,.02)="OTHER"  ; Description of code
"RTN","IBCNEHLU",292,0)
 . . S NEWARRY(TOFILE,ZIENS,.03)=0   ; INACTIVE FLAG
"RTN","IBCNEHLU",293,0)
 I $D(NEWARRY) D UPDATE^DIE("","NEWARRY")
"RTN","IBCNEHLU",294,0)
 Q
"RTN","IBCNEHLU",295,0)
 ;
"RTN","IBCNEHLU",296,0)
PREL(FILE,FIELD,CODE) ; IB*2*497  code from x12 271 message may need to be converted to 'other' if there is no match.  Refer to tag SETLST 
"RTN","IBCNEHLU",297,0)
 ;
"RTN","IBCNEHLU",298,0)
 ;          INPUT - FILE = file # of the file that will be evaluated
"RTN","IBCNEHLU",299,0)
 ;                  FIELD = field # that is defined with the SET OF CODE values
"RTN","IBCNEHLU",300,0)
 ;                  CODE = patient relationship code sent by the X12 271 message
"RTN","IBCNEHLU",301,0)
 ;          OUTPUT - = converted or non-converted coded value
"RTN","IBCNEHLU",302,0)
 N STRING,CODESTR,ARRAY,VAL,I,DEF
"RTN","IBCNEHLU",303,0)
 S CODE=$G(CODE)
"RTN","IBCNEHLU",304,0)
 I CODE="" Q CODE   ; quit when code was not sent from payer
"RTN","IBCNEHLU",305,0)
 D FIELD^DID(FILE,FIELD,"","TYPE","DEF")
"RTN","IBCNEHLU",306,0)
 I DEF("TYPE")="SET" D
"RTN","IBCNEHLU",307,0)
 . S CODESTR=$P($G(^DD(FILE,FIELD,0)),U,3)
"RTN","IBCNEHLU",308,0)
 . F I=1:1 S VAL=$P($P(CODESTR,";",I),":") Q:VAL=""  S ARRAY(VAL)=$P($P(CODESTR,";",I),":",2)
"RTN","IBCNEHLU",309,0)
 Q $S($D(ARRAY(CODE)):CODE,1:"G8") ; if coded value does not exist in the array of codes then this is a new code sent by X12 271 message and will default to OTHER
"RTN","IBCNEHLU",310,0)
 ;
"RTN","IBCNEHLU",311,0)
SETLST ; SET OF CODES defined to 355.33,60.14 and 2.312,4.03; this tag is not referenced in any procedure.  It's here for documentation purposes.
"RTN","IBCNEHLU",312,0)
 ;;01^SPOUSE
"RTN","IBCNEHLU",313,0)
 ;;18^SELF 
"RTN","IBCNEHLU",314,0)
 ;;19^CHILD 
"RTN","IBCNEHLU",315,0)
 ;;20^EMPLOYEE 
"RTN","IBCNEHLU",316,0)
 ;;29^SIGNIFICANT OTHER 
"RTN","IBCNEHLU",317,0)
 ;;32^MOTHER 
"RTN","IBCNEHLU",318,0)
 ;;33^FATHER 
"RTN","IBCNEHLU",319,0)
 ;;39^ORGAN DONOR 
"RTN","IBCNEHLU",320,0)
 ;;41^INJURED PLAINTIFF 
"RTN","IBCNEHLU",321,0)
 ;;53^LIFE PARTNER 
"RTN","IBCNEHLU",322,0)
 ;;G8^OTHER RELATIONSHIP
"RTN","IBCNEKIT")
0^60^B55673167
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE eIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,549**;21-MAR-94;Build 54
"RTN","IBCNEKIT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the eIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; eIV Transmission Queue file (#365.1) and in the eIV Response file (#365).
"RTN","IBCNEKIT",7,0)
 ; User can pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",8,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",9,0)
 ; task after hours (8:00pm).
"RTN","IBCNEKIT",10,0)
 ;
"RTN","IBCNEKIT",11,0)
EN ;
"RTN","IBCNEKIT",12,0)
 NEW STOP,BEGDT,ENDDT,STATLIST
"RTN","IBCNEKIT",13,0)
 D INIT I STOP G EXIT       ; initialize/calculate default dates
"RTN","IBCNEKIT",14,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",15,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",16,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",17,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",18,0)
EXIT ;
"RTN","IBCNEKIT",19,0)
 Q
"RTN","IBCNEKIT",20,0)
 ;
"RTN","IBCNEKIT",21,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",22,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",23,0)
 ;
"RTN","IBCNEKIT",24,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",25,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",26,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",27,0)
 ;
"RTN","IBCNEKIT",28,0)
 ; First loop through the eIV Transmission Queue file and delete all
"RTN","IBCNEKIT",29,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",30,0)
 ;
"RTN","IBCNEKIT",31,0)
 N CNT,DA,DATE,DIK,HLIEN,PFLAG,TQIEN,TQS    ;IB*2.0*549 added PFLAG
"RTN","IBCNEKIT",32,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",33,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",34,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",35,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",36,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; trans queue status
"RTN","IBCNEKIT",37,0)
 . I '$F(STATLIST,","_TQS_",") Q             ; must be in the list
"RTN","IBCNEKIT",38,0)
 . S PFLAG=$$GET1^DIQ(365,TQIEN_",",.11,"I") ; Do Not Purge Flag IB*2.0*549 added line
"RTN","IBCNEKIT",39,0)
 . Q:+PFLAG                                  ; IB*2.0*549 added line
"RTN","IBCNEKIT",40,0)
 . ;
"RTN","IBCNEKIT",41,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",42,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",43,0)
 . S HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",44,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",45,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) I DA D ^DIK
"RTN","IBCNEKIT",46,0)
 .. Q
"RTN","IBCNEKIT",47,0)
 . ;
"RTN","IBCNEKIT",48,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",49,0)
 . S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBCNEKIT",50,0)
 . Q
"RTN","IBCNEKIT",51,0)
 ;
"RTN","IBCNEKIT",52,0)
 ; Check for a stop request
"RTN","IBCNEKIT",53,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",54,0)
 ;
"RTN","IBCNEKIT",55,0)
 ; Now we must loop through the eIV Response file itself to purge any
"RTN","IBCNEKIT",56,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",57,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",58,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",59,0)
 ; check the status. For this loop, start from the very beginning of
"RTN","IBCNEKIT",60,0)
 ; the file.
"RTN","IBCNEKIT",61,0)
 ;
"RTN","IBCNEKIT",62,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",63,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",64,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",65,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",66,0)
 . ;
"RTN","IBCNEKIT",67,0)
 . ; If there is a pointer to the transmission queue file, then we
"RTN","IBCNEKIT",68,0)
 . ; should get out of this loop because the purpose of this section
"RTN","IBCNEKIT",69,0)
 . ; is to purge those responses with no link to the transmission
"RTN","IBCNEKIT",70,0)
 . ; queue file.
"RTN","IBCNEKIT",71,0)
 . ;
"RTN","IBCNEKIT",72,0)
 . I $P($G(^IBCN(365,DA,0)),U,5) Q
"RTN","IBCNEKIT",73,0)
 . D ^DIK
"RTN","IBCNEKIT",74,0)
 . Q
"RTN","IBCNEKIT",75,0)
 ;
"RTN","IBCNEKIT",76,0)
PURGEX ;
"RTN","IBCNEKIT",77,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",78,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",79,0)
 Q
"RTN","IBCNEKIT",80,0)
 ;
"RTN","IBCNEKIT",81,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",82,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",83,0)
 ;
"RTN","IBCNEKIT",84,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS
"RTN","IBCNEKIT",85,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",86,0)
 ;
"RTN","IBCNEKIT",87,0)
 S STOP=0
"RTN","IBCNEKIT",88,0)
 ;
"RTN","IBCNEKIT",89,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",90,0)
 ;   3=Response Received
"RTN","IBCNEKIT",91,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",92,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",93,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKIT",94,0)
 ;
"RTN","IBCNEKIT",95,0)
 ; Try to find a beginning date in the eIV Transmission Queue file
"RTN","IBCNEKIT",96,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",97,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",98,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",99,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKIT",100,0)
 . S FOUND=1
"RTN","IBCNEKIT",101,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",102,0)
 . Q
"RTN","IBCNEKIT",103,0)
 ;
"RTN","IBCNEKIT",104,0)
 ; If not successful, try to find a beginning date in the eIV Response file.
"RTN","IBCNEKIT",105,0)
 I 'FOUND D
"RTN","IBCNEKIT",106,0)
 . S DATE=""
"RTN","IBCNEKIT",107,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",108,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",109,0)
 .. I '$F(STATLIST,","_RPS_",") Q
"RTN","IBCNEKIT",110,0)
 .. S FOUND=1
"RTN","IBCNEKIT",111,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",112,0)
 .. Q
"RTN","IBCNEKIT",113,0)
 . Q
"RTN","IBCNEKIT",114,0)
 ;
"RTN","IBCNEKIT",115,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",116,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",117,0)
 ;
"RTN","IBCNEKIT",118,0)
 I 'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",119,0)
 . W !!?5,"Purging of eIV data is not possible at this time."
"RTN","IBCNEKIT",120,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",121,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",122,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",123,0)
 . Q
"RTN","IBCNEKIT",124,0)
 ;
"RTN","IBCNEKIT",125,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",126,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",127,0)
 W @IOF
"RTN","IBCNEKIT",128,0)
 W !?8,"Purge Electronic Insurance Verification (eIV) Data Files"
"RTN","IBCNEKIT",129,0)
 W !!!," This option will allow you to purge data from the eIV Response File (#365)"
"RTN","IBCNEKIT",130,0)
 W !," and the eIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",131,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",132,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",133,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",134,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",135,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",136,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",137,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",138,0)
 W !!
"RTN","IBCNEKIT",139,0)
INITX ;
"RTN","IBCNEKIT",140,0)
 Q
"RTN","IBCNEKIT",141,0)
 ;
"RTN","IBCNEKIT",142,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",143,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",144,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",145,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",146,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",147,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",148,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",149,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",150,0)
 S BEGDT=Y
"RTN","IBCNEKIT",151,0)
BEGDTX ;
"RTN","IBCNEKIT",152,0)
 Q
"RTN","IBCNEKIT",153,0)
 ;
"RTN","IBCNEKIT",154,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",155,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",156,0)
 W !
"RTN","IBCNEKIT",157,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",158,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",159,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",160,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",161,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",162,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",163,0)
 S ENDDT=Y
"RTN","IBCNEKIT",164,0)
ENDDTX ;
"RTN","IBCNEKIT",165,0)
 Q
"RTN","IBCNEKIT",166,0)
 ;
"RTN","IBCNEKIT",167,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",168,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",169,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",170,0)
 W !!!," You want to purge all eIV data created between "
"RTN","IBCNEKIT",171,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",172,0)
 W !
"RTN","IBCNEKIT",173,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",174,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",175,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",176,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",177,0)
CONFX ;
"RTN","IBCNEKIT",178,0)
 Q
"RTN","IBCNEKIT",179,0)
 ;
"RTN","IBCNEKIT",180,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",181,0)
 ; The concept for queuing the purge came from the insurance buffer
"RTN","IBCNEKIT",182,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",183,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",184,0)
 ;
"RTN","IBCNEKIT",185,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",186,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",187,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",188,0)
 S ZTDESC="Purge eIV Data"    ; Task description
"RTN","IBCNEKIT",189,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",190,0)
 S ZTIO=""
"RTN","IBCNEKIT",191,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",192,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",193,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",194,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",195,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the eIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",196,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",197,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",198,0)
QUEUEX ;
"RTN","IBCNEKIT",199,0)
 Q
"RTN","IBCNERP1")
0^31^B87896793
"RTN","IBCNERP1",1,0)
IBCNERP1 ;DAOU/BHS - IBCNE USER IF eIV RESPONSE REPORT ;03-JUN-2002
"RTN","IBCNERP1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,528,549**;21-MAR-94;Build 54
"RTN","IBCNERP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERP1",4,0)
 ;
"RTN","IBCNERP1",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP1",6,0)
 ;
"RTN","IBCNERP1",7,0)
 ; Input parameters: N/A
"RTN","IBCNERP1",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERP1",9,0)
 ;  IBCNERTN = "IBCNERP1" (current routine name for queueing the 
"RTN","IBCNERP1",10,0)
 ;   COMPILE process)
"RTN","IBCNERP1",11,0)
 ;  IBCNESPC("BEGDT")=start dt for rpt
"RTN","IBCNERP1",12,0)
 ;  IBCNESPC("ENDDT")=end dt for rpt
"RTN","IBCNERP1",13,0)
 ;  IBCNESPC("PYR")=payer ien (365.12) or "" for all payers
"RTN","IBCNERP1",14,0)
 ;  IBCNESPC("SORT")=1 (Payer name) OR 2 (Patient name)
"RTN","IBCNERP1",15,0)
 ;  IBCNESPC("PAT")=patient ien (2) or "" for all patients
"RTN","IBCNERP1",16,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP1",17,0)
 ;   Responses) for date range (by unique Payer/Pat pair)
"RTN","IBCNERP1",18,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null all other params are null
"RTN","IBCNERP1",19,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP1",20,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous 
"RTN","IBCNERP1",21,0)
 ;   Report (2).
"RTN","IBCNERP1",22,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP1",23,0)
 ;  IBOUT="R" for Report format or "E" for Excel format
"RTN","IBCNERP1",24,0)
 ;
"RTN","IBCNERP1",25,0)
 ; Only call this routine at a tag
"RTN","IBCNERP1",26,0)
 Q
"RTN","IBCNERP1",27,0)
EN(IPRF) ; Main entry pt
"RTN","IBCNERP1",28,0)
 ; Init vars
"RTN","IBCNERP1",29,0)
 N IBCNERTN,IBCNESPC,IBOUT,POP,STOP
"RTN","IBCNERP1",30,0)
 S IBCNESPC("RFLAG")=$G(IPRF)
"RTN","IBCNERP1",31,0)
 ;
"RTN","IBCNERP1",32,0)
 S STOP=0
"RTN","IBCNERP1",33,0)
 S IBCNERTN="IBCNERP1"
"RTN","IBCNERP1",34,0)
 W @IOF
"RTN","IBCNERP1",35,0)
 W !,"eIV ",$S(IPRF=1:"Inactive Policy",IPRF=2:"Ambiguous Policy",1:"Response")," Report",!
"RTN","IBCNERP1",36,0)
 I $G(IPRF) D
"RTN","IBCNERP1",37,0)
 . W !,"Please select a date range to view ",$S(IPRF=1:"inactive",1:"ambiguous")," policy information that the eIV"
"RTN","IBCNERP1",38,0)
 . W !,"process turned up while attempting to discover previously unknown"
"RTN","IBCNERP1",39,0)
 . W !,"insurance policies. (Date range selection is based on the date that"
"RTN","IBCNERP1",40,0)
 . W !,"eIV receives the response from the payer.)"
"RTN","IBCNERP1",41,0)
 ;
"RTN","IBCNERP1",42,0)
 I '$G(IPRF) D
"RTN","IBCNERP1",43,0)
 . W !,"Insurance verification responses are received daily."
"RTN","IBCNERP1",44,0)
 . W !,"Please select a date range in which responses were received to view the"
"RTN","IBCNERP1",45,0)
 . W !,"associated response detail.  Otherwise, select a Trace # to view specific"
"RTN","IBCNERP1",46,0)
 . W !,"response detail."
"RTN","IBCNERP1",47,0)
 ;
"RTN","IBCNERP1",48,0)
 ; Rpt by Date Range or Trace #
"RTN","IBCNERP1",49,0)
R05 I '$G(IPRF) D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",50,0)
 ; If rpt by Trace # - no other criteria is necessary
"RTN","IBCNERP1",51,0)
 I $G(IBCNESPC("TRCN")) G R60
"RTN","IBCNERP1",52,0)
 ; Date Range params
"RTN","IBCNERP1",53,0)
R10 D DTRANGE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",54,0)
 ; Payer Selection param
"RTN","IBCNERP1",55,0)
R20 D PYRSEL I STOP G:$$STOP EXIT G R10
"RTN","IBCNERP1",56,0)
 ; Patient Selection param
"RTN","IBCNERP1",57,0)
R30 D PTSEL I STOP G:$$STOP EXIT G R20
"RTN","IBCNERP1",58,0)
 ; Type of data to return param
"RTN","IBCNERP1",59,0)
R40 D TYPE I STOP G:$$STOP EXIT G R30
"RTN","IBCNERP1",60,0)
 ; How far back do you want the expiration date
"RTN","IBCNERP1",61,0)
R45 I $G(IPRF)=1 D DTEXP I STOP G:$$STOP EXIT G R40
"RTN","IBCNERP1",62,0)
 ; Sort by param - Payer or Patient
"RTN","IBCNERP1",63,0)
R50 D SORT I STOP G:$$STOP EXIT G R45
"RTN","IBCNERP1",64,0)
 ; Select the output type
"RTN","IBCNERP1",65,0)
R60 S IBOUT=$$OUT I STOP G:$$STOP EXIT G R50
"RTN","IBCNERP1",66,0)
 I IBOUT="E" W !!,"To avoid undesired wrapping, please enter '0;256;999' at the 'DEVICE:' prompt.",!
"RTN","IBCNERP1",67,0)
 ; Select output device
"RTN","IBCNERP1",68,0)
R100 D DEVICE(IBCNERTN,.IBCNESPC,IBOUT) I STOP Q:+$G(IBFRB)&($G(IBOUT)="E")  G:$$STOP EXIT G:$G(IBCNESPC("TRCN"))'="" R05 G R50
"RTN","IBCNERP1",69,0)
 G EXIT
"RTN","IBCNERP1",70,0)
 ;
"RTN","IBCNERP1",71,0)
EXIT ; Exit pt
"RTN","IBCNERP1",72,0)
 Q
"RTN","IBCNERP1",73,0)
 ;
"RTN","IBCNERP1",74,0)
COMPILE(IBCNERTN,IBCNESPC,IBOUT) ; 
"RTN","IBCNERP1",75,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERP1",76,0)
 ; Input params:
"RTN","IBCNERP1",77,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",78,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",79,0)
 ;
"RTN","IBCNERP1",80,0)
 ; Init scratch globals
"RTN","IBCNERP1",81,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",82,0)
 ; Compile
"RTN","IBCNERP1",83,0)
 I IBCNERTN="IBCNERP1" D EN^IBCNERP2(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",84,0)
 I IBCNERTN="IBCNERP4" D EN^IBCNERP5(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",85,0)
 I IBCNERTN="IBCNERP7" D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",86,0)
 I IBCNERTN="IBCNERPF" D EN^IBCNERPG(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",87,0)
 ; Print
"RTN","IBCNERP1",88,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERP1",89,0)
 . I IBCNERTN="IBCNERP1" D EN3^IBCNERPA(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",90,0)
 . I IBCNERTN="IBCNERP4" D EN6^IBCNERPA(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",91,0)
 . I IBCNERTN="IBCNERP7" D EN^IBCNERP9(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",92,0)
 . I IBCNERTN="IBCNERPF" D EN^IBCNERPH(IBCNERTN,.IBCNESPC,IBOUT)
"RTN","IBCNERP1",93,0)
 ; Close device
"RTN","IBCNERP1",94,0)
 D ^%ZISC
"RTN","IBCNERP1",95,0)
 ; Kill scratch globals
"RTN","IBCNERP1",96,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",97,0)
 ; Purge task record
"RTN","IBCNERP1",98,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP1",99,0)
 ;
"RTN","IBCNERP1",100,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERP1",101,0)
 Q
"RTN","IBCNERP1",102,0)
 ;
"RTN","IBCNERP1",103,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERP1",104,0)
 ; Init vars
"RTN","IBCNERP1",105,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",106,0)
 ;
"RTN","IBCNERP1",107,0)
 W !
"RTN","IBCNERP1",108,0)
 S DIR(0)="Y"
"RTN","IBCNERP1",109,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERP1",110,0)
 S DIR("B")="YES"
"RTN","IBCNERP1",111,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERP1",112,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERP1",113,0)
 D ^DIR K DIR
"RTN","IBCNERP1",114,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERP1",115,0)
 I 'Y S STOP=0
"RTN","IBCNERP1",116,0)
 ;
"RTN","IBCNERP1",117,0)
STOPX ; STOP exit pt
"RTN","IBCNERP1",118,0)
 Q Y
"RTN","IBCNERP1",119,0)
 ;
"RTN","IBCNERP1",120,0)
DTRANGE ; Determine start and end dates for date range param
"RTN","IBCNERP1",121,0)
 ; Init vars
"RTN","IBCNERP1",122,0)
 N X,Y,DIRUT
"RTN","IBCNERP1",123,0)
 ;
"RTN","IBCNERP1",124,0)
 W !
"RTN","IBCNERP1",125,0)
 ;
"RTN","IBCNERP1",126,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",127,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP1",128,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNERP1",129,0)
 S DIR("?")="   would have been received. Future dates are not allowed."
"RTN","IBCNERP1",130,0)
 D ^DIR K DIR
"RTN","IBCNERP1",131,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",132,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP1",133,0)
 ; End date
"RTN","IBCNERP1",134,0)
DTRANG1 S DIR(0)="DA^"_Y_":-NOW:EX"
"RTN","IBCNERP1",135,0)
 S DIR("A")="  End DATE:  "
"RTN","IBCNERP1",136,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNERP1",137,0)
 S DIR("?",2)="   would have been received.  This date must not precede"
"RTN","IBCNERP1",138,0)
 S DIR("?")="   the Start Date.  Future dates are not allowed."
"RTN","IBCNERP1",139,0)
 D ^DIR K DIR
"RTN","IBCNERP1",140,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",141,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP1",142,0)
 ;
"RTN","IBCNERP1",143,0)
DTRANGX ; DTRANGE exit pt
"RTN","IBCNERP1",144,0)
 Q
"RTN","IBCNERP1",145,0)
 ;
"RTN","IBCNERP1",146,0)
PYRSEL ; Select one payer or ALL - File #365.12
"RTN","IBCNERP1",147,0)
 ; Init vars
"RTN","IBCNERP1",148,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",149,0)
 ;
"RTN","IBCNERP1",150,0)
 W !
"RTN","IBCNERP1",151,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERP1",152,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer or <Return> for All Payers: ",40,"R")
"RTN","IBCNERP1",153,0)
 ; Do not allow selection of '~NO PAYER' and non-eIV payers
"RTN","IBCNERP1",154,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERP1",155,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERP1",156,0)
 D ^DIC
"RTN","IBCNERP1",157,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PYRSELX
"RTN","IBCNERP1",158,0)
 ; If nothing was selected (Y=-1), select ALL payers
"RTN","IBCNERP1",159,0)
 S IBCNESPC("PYR")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",160,0)
 ;
"RTN","IBCNERP1",161,0)
PYRSELX ; PYRSEL exit pt
"RTN","IBCNERP1",162,0)
 Q
"RTN","IBCNERP1",163,0)
 ;
"RTN","IBCNERP1",164,0)
PTSEL ; Select one patient or ALL - File #2
"RTN","IBCNERP1",165,0)
 ; Init vars
"RTN","IBCNERP1",166,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",167,0)
 ; Patient lookup
"RTN","IBCNERP1",168,0)
 W !
"RTN","IBCNERP1",169,0)
 S DIC(0)="AEQM"
"RTN","IBCNERP1",170,0)
 S DIC("A")=$$FO^IBCNEUT1("Patient or <Return> for All Patients: ",40,"R")
"RTN","IBCNERP1",171,0)
 S DIC="^DPT("
"RTN","IBCNERP1",172,0)
 D ^DIC
"RTN","IBCNERP1",173,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PTSELX
"RTN","IBCNERP1",174,0)
 ; If nothing was selected (Y=-1), select ALL patients
"RTN","IBCNERP1",175,0)
 S IBCNESPC("PAT")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",176,0)
 ;
"RTN","IBCNERP1",177,0)
PTSELX ; PTSEL exit pt
"RTN","IBCNERP1",178,0)
 Q
"RTN","IBCNERP1",179,0)
 ;
"RTN","IBCNERP1",180,0)
TYPE ; Prompt to select to display All or Most Recent Responses for
"RTN","IBCNERP1",181,0)
 ; Patient/Payer combos
"RTN","IBCNERP1",182,0)
 ; Init vars
"RTN","IBCNERP1",183,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",184,0)
 ;
"RTN","IBCNERP1",185,0)
 S DIR(0)="S^A:All Responses;M:Most Recent Responses"
"RTN","IBCNERP1",186,0)
 S DIR("A")="Select the type of responses to display"
"RTN","IBCNERP1",187,0)
 S DIR("B")="A"
"RTN","IBCNERP1",188,0)
 S DIR("?",1)="  A - All responses from the payer during the date range will be"
"RTN","IBCNERP1",189,0)
 S DIR("?",2)="      displayed for each unique payer/patient combination."
"RTN","IBCNERP1",190,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",191,0)
 S DIR("?",4)="  M - Only the most recently received response from the payer"
"RTN","IBCNERP1",192,0)
 S DIR("?",5)="      during the date range will be displayed for each unique"
"RTN","IBCNERP1",193,0)
 S DIR("?")="      payer/patient combination."
"RTN","IBCNERP1",194,0)
 D ^DIR K DIR
"RTN","IBCNERP1",195,0)
 I $D(DIRUT) S STOP=1 G TYPEX
"RTN","IBCNERP1",196,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERP1",197,0)
 ;
"RTN","IBCNERP1",198,0)
TYPEX ; TYPE exit pt
"RTN","IBCNERP1",199,0)
 Q
"RTN","IBCNERP1",200,0)
 ;
"RTN","IBCNERP1",201,0)
DTEXP ; Prompt for oldest expiration date to pull for.
"RTN","IBCNERP1",202,0)
 ; Init Vars
"RTN","IBCNERP1",203,0)
 N Y,DIRUT,TODAY
"RTN","IBCNERP1",204,0)
 ;
"RTN","IBCNERP1",205,0)
 W !
"RTN","IBCNERP1",206,0)
 ;
"RTN","IBCNERP1",207,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",208,0)
 S DIR("A")="Earliest Policy Expiration Date to Select From"
"RTN","IBCNERP1",209,0)
 S DIR("B")="T-365"
"RTN","IBCNERP1",210,0)
 S DIR("?",1)=" Please enter a valid date in the past. Any policy with a reported"
"RTN","IBCNERP1",211,0)
 S DIR("?")=" expiration date prior to this date will not be selected."
"RTN","IBCNERP1",212,0)
 D ^DIR K DIR
"RTN","IBCNERP1",213,0)
 I $D(DIRUT) S STOP=1 G DTEXPX
"RTN","IBCNERP1",214,0)
 S IBCNESPC("DTEXP")=Y
"RTN","IBCNERP1",215,0)
 ;
"RTN","IBCNERP1",216,0)
DTEXPX ; DTEXP Exit
"RTN","IBCNERP1",217,0)
 Q
"RTN","IBCNERP1",218,0)
 ;
"RTN","IBCNERP1",219,0)
SORT ; Prompt to allow users to sort the report by Payer(default) or 
"RTN","IBCNERP1",220,0)
 ;  Patient
"RTN","IBCNERP1",221,0)
 ; Init vars
"RTN","IBCNERP1",222,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",223,0)
 ;
"RTN","IBCNERP1",224,0)
 S DIR(0)="S^1:Payer Name;2:Patient Name"
"RTN","IBCNERP1",225,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERP1",226,0)
 S DIR("B")=1
"RTN","IBCNERP1",227,0)
 S DIR("?",1)="  1 - Payer Name is the primary sort, Patient Name is secondary."
"RTN","IBCNERP1",228,0)
 S DIR("?",2)="      (Default)"
"RTN","IBCNERP1",229,0)
 S DIR("?")="  2 - Patient Name is the primary sort, Payer Name is secondary."
"RTN","IBCNERP1",230,0)
 D ^DIR K DIR
"RTN","IBCNERP1",231,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP1",232,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP1",233,0)
 ;
"RTN","IBCNERP1",234,0)
SORTX ; SORT exit pt
"RTN","IBCNERP1",235,0)
 Q
"RTN","IBCNERP1",236,0)
 ;
"RTN","IBCNERP1",237,0)
RTYPE ; Prompt to allow users to report by date range or Trace #
"RTN","IBCNERP1",238,0)
 ; Init vars
"RTN","IBCNERP1",239,0)
 N D,DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT
"RTN","IBCNERP1",240,0)
 ;
"RTN","IBCNERP1",241,0)
 S DIR(0)="S^1:Report by Date Range;2:Report by Trace #"
"RTN","IBCNERP1",242,0)
 S DIR("A")="Select the type of report to generate"
"RTN","IBCNERP1",243,0)
 S DIR("B")=1
"RTN","IBCNERP1",244,0)
 S DIR("?",1)="  1 - Generate report by date range, payer range, patient range"
"RTN","IBCNERP1",245,0)
 S DIR("?",2)="      and All or Most Recent responses for payer/patient."
"RTN","IBCNERP1",246,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",247,0)
 S DIR("?",4)="  2 - Generate report for a specific Trace # which corresponds"
"RTN","IBCNERP1",248,0)
 S DIR("?")="      to an unique response."
"RTN","IBCNERP1",249,0)
 D ^DIR K DIR
"RTN","IBCNERP1",250,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",251,0)
 I Y=1 S IBCNESPC("TRCN")="" G RTYPEX
"RTN","IBCNERP1",252,0)
 ;
"RTN","IBCNERP1",253,0)
 ; Allow user to select Trace # from x-ref "C"
"RTN","IBCNERP1",254,0)
 W !
"RTN","IBCNERP1",255,0)
 S DIC(0)="AEVZSQ"
"RTN","IBCNERP1",256,0)
 S DIC="^IBCN(365,",D="C",DIC("A")="Enter Trace # for report: "
"RTN","IBCNERP1",257,0)
 S DIC("W")="N IBX S IBX=$P($G(^(0)),U,2,3) W:$P(IBX,U,1) $P($G(^DPT($P(IBX,U,1),0)),U,1) W:$P(IBX,U,2) ""  ""_$P($G(^IBE(365.12,$P(IBX,U,2),0)),U,1)"
"RTN","IBCNERP1",258,0)
 D IX^DIC K DIC
"RTN","IBCNERP1",259,0)
 I $D(DTOUT)!$D(DUOUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",260,0)
 I 'Y!(Y<0) S STOP=1 G RTYPEX
"RTN","IBCNERP1",261,0)
 S IBCNESPC("TRCN")=$P(Y(0),U,9)_"^"_$P(Y,U,1)
"RTN","IBCNERP1",262,0)
 ;
"RTN","IBCNERP1",263,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERP1",264,0)
 Q
"RTN","IBCNERP1",265,0)
 ;
"RTN","IBCNERP1",266,0)
DEVICE(IBCNERTN,IBCNESPC,IBOUT) ; Device Handler and possible TaskManager calls
"RTN","IBCNERP1",267,0)
 ;
"RTN","IBCNERP1",268,0)
 ; Input params:
"RTN","IBCNERP1",269,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",270,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",271,0)
 ;  IBOUT    = "R" for Report format or "E" for Excel format 
"RTN","IBCNERP1",272,0)
 ;
"RTN","IBCNERP1",273,0)
 ; Output params:
"RTN","IBCNERP1",274,0)
 ;  STOP = Flag to stop routine
"RTN","IBCNERP1",275,0)
 ;
"RTN","IBCNERP1",276,0)
 ; Init vars
"RTN","IBCNERP1",277,0)
 N POP,ZTDESC,ZTRTN,ZTSAVE
"RTN","IBCNERP1",278,0)
 ;
"RTN","IBCNERP1",279,0)
 I IBCNERTN="IBCNERP4"!(IBCNERTN="IBCNERPF"&($G(IBCNESPC("TYPE"))="D")) W:$G(IBOUT)="R" !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERP1",280,0)
 S ZTRTN="COMPILE^IBCNERP1("""_IBCNERTN_""",.IBCNESPC,"""_IBOUT_""")"
"RTN","IBCNERP1",281,0)
 ; IB*2.0*549 Change name of report from "Patient Insurance Update" to "Auto Update"
"RTN","IBCNERP1",282,0)
 S ZTDESC="IBCNE eIV "_$S(IBCNERTN="IBCNERP1":"Response",IBCNERTN="IBCNERPF":"Auto Update",1:"Payer")_" Report"
"RTN","IBCNERP1",283,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERP1",284,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERP1",285,0)
 S ZTSAVE("IBOUT")=""
"RTN","IBCNERP1",286,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM",1)
"RTN","IBCNERP1",287,0)
 I POP S STOP=1
"RTN","IBCNERP1",288,0)
 ;
"RTN","IBCNERP1",289,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERP1",290,0)
 Q
"RTN","IBCNERP1",291,0)
 ;
"RTN","IBCNERP1",292,0)
OUT() ; Prompt to allow users to select output format
"RTN","IBCNERP1",293,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",294,0)
 W !
"RTN","IBCNERP1",295,0)
 S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCNERP1",296,0)
 S DIR("A")="(E)xcel Format or (R)eport Format: "
"RTN","IBCNERP1",297,0)
 S DIR("B")="Report"
"RTN","IBCNERP1",298,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q ""
"RTN","IBCNERP1",299,0)
 Q Y
"RTN","IBCNERPF")
0^32^B35587922
"RTN","IBCNERPF",1,0)
IBCNERPF ;BP/YMG - IBCNE USER INTERFACE EIV INSURANCE UPDATE REPORT ;16-SEP-2009
"RTN","IBCNERPF",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549**;16-SEP-09;Build 54
"RTN","IBCNERPF",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPF",4,0)
 ;
"RTN","IBCNERPF",5,0)
 ; IB*2.0*549 Change value of IBCNESPC("PYR",ien)
"RTN","IBCNERPF",6,0)
 ;            Add IBCNESPC("PYR",ien,coien)
"RTN","IBCNERPF",7,0)
 ;                IBCNESPC("INSCO"))
"RTN","IBCNERPF",8,0)
 ; IB*2.0*549 Sort by payer name
"RTN","IBCNERPF",9,0)
 ; Variables:
"RTN","IBCNERPF",10,0)
 ;   IBCNERTN = "IBCNERPF" (current routine name for queueing the 
"RTN","IBCNERPF",11,0)
 ;                          COMPILE process)
"RTN","IBCNERPF",12,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPF",13,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPF",14,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPF",15,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPF",16,0)
 ;                       = (1) ^ (2)
"RTN","IBCNERPF",17,0)
 ;     (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPF",18,0)
 ;     (2) Display all or some insurance companies - A = All companies/
"RTN","IBCNERPF",19,0)
 ;                                                   S = Specified companies
"RTN","IBCNERPF",20,0)
 ;   IBCNESPC("PYR",ien,coien) - payer iens and company ien for report
"RTN","IBCNERPF",21,0)
 ;                             = Count for insurance company
"RTN","IBCNERPF",22,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPF",23,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPF",24,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPF",25,0)
 ;
"RTN","IBCNERPF",26,0)
 Q
"RTN","IBCNERPF",27,0)
EN ; entry point
"RTN","IBCNERPF",28,0)
 N IBCNERTN,IBCNESPC,IBOUT,STOP
"RTN","IBCNERPF",29,0)
 ;
"RTN","IBCNERPF",30,0)
 S STOP=0,IBCNERTN="IBCNERPF"
"RTN","IBCNERPF",31,0)
 W @IOF
"RTN","IBCNERPF",32,0)
 ; IB*2.0*549 - Change report name to eIV Auto Update Report
"RTN","IBCNERPF",33,0)
 W !,"eIV Auto Update Report"
"RTN","IBCNERPF",34,0)
 ; Prompts for eIV Update Report
"RTN","IBCNERPF",35,0)
 ; Report Type - Summary or Detailed
"RTN","IBCNERPF",36,0)
P10 D TYPE I STOP G EXIT
"RTN","IBCNERPF",37,0)
 ; Payer Selection parameter
"RTN","IBCNERPF",38,0)
P20 D PAYER I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERPF",39,0)
 ; Date Range parameters
"RTN","IBCNERPF",40,0)
P30 D DTRANGE I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERPF",41,0)
 ; Patient Selection parameter
"RTN","IBCNERPF",42,0)
P40 D PATIENT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERPF",43,0)
 ; IB*2.0*549 Set flag for all/selected insurance companies
"RTN","IBCNERPF",44,0)
P50 D INSCO
"RTN","IBCNERPF",45,0)
 ; IB*2.0*549 Sort is by payer name, so call to choose sort order not needed
"RTN","IBCNERPF",46,0)
 ; Select the output type
"RTN","IBCNERPF",47,0)
P60 S IBOUT=$$OUT^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P50
"RTN","IBCNERPF",48,0)
 ; Select the output device
"RTN","IBCNERPF",49,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC,IBOUT) I STOP G:$$STOP^IBCNERP1 EXIT G P50
"RTN","IBCNERPF",50,0)
 ;
"RTN","IBCNERPF",51,0)
EXIT ;
"RTN","IBCNERPF",52,0)
 Q
"RTN","IBCNERPF",53,0)
 ;
"RTN","IBCNERPF",54,0)
PAYER ;
"RTN","IBCNERPF",55,0)
 ; IB*2.0*549 Add PIEN for payer IEN
"RTN","IBCNERPF",56,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,PIEN,X,Y
"RTN","IBCNERPF",57,0)
 W !
"RTN","IBCNERPF",58,0)
 S DIR("A")="Run for (A)ll Payers or (S)elected Payers: "
"RTN","IBCNERPF",59,0)
 S DIR("A",1)="PAYER SELECTION:"
"RTN","IBCNERPF",60,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",61,0)
 D ^DIR
"RTN","IBCNERPF",62,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",63,0)
 I Y="A" S IBCNESPC("PYR")="A" Q  ; "All Payers" selected
"RTN","IBCNERPF",64,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",65,0)
 ; IB*2.0*549 Change prompt from "Select Insurance Company" to "Select Payer"
"RTN","IBCNERPF",66,0)
 W !
"RTN","IBCNERPF",67,0)
 S DIC("A")="Select Payer: "
"RTN","IBCNERPF",68,0)
 ; Do not allow selection of '~NO PAYER' and non-eIV payers
"RTN","IBCNERPF",69,0)
 ; IB*2.0*549 Only include payers with eIV Auto Update flag = Yes
"RTN","IBCNERPF",70,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER"") I $$AUTOUPDT^IBCNERPF($P($G(Y),U,1))"
"RTN","IBCNERPF",71,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPF",72,0)
 ;
"RTN","IBCNERPF",73,0)
PAYER1 ;
"RTN","IBCNERPF",74,0)
 D ^DIC
"RTN","IBCNERPF",75,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PYR") Q
"RTN","IBCNERPF",76,0)
 ; IB*2.0*549 Get PIEN value
"RTN","IBCNERPF",77,0)
 S PIEN=$P(Y,U,1) K IBCNESPC("PYR",PIEN) S IBCNESPC("PYR",PIEN)=""
"RTN","IBCNERPF",78,0)
 ; IB*2.0*549 Get corresponding insurance companies
"RTN","IBCNERPF",79,0)
 D GETCOMPS(PIEN,.IBCNESPC)
"RTN","IBCNERPF",80,0)
 ; IB*2.0*549 Change Select Another to Select Another Payer 
"RTN","IBCNERPF",81,0)
 W !
"RTN","IBCNERPF",82,0)
 I $$ANOTHER("Payer") W ! G PAYER1
"RTN","IBCNERPF",83,0)
 Q
"RTN","IBCNERPF",84,0)
 ;
"RTN","IBCNERPF",85,0)
INSCO ; IB*2.0*549 Setup insurance company flag
"RTN","IBCNERPF",86,0)
 N PIEN,STOP
"RTN","IBCNERPF",87,0)
 S STOP=0
"RTN","IBCNERPF",88,0)
 I '$D(IBCNESPC("PYR")) D
"RTN","IBCNERPF",89,0)
 . K IBCNESPC("INSCO")
"RTN","IBCNERPF",90,0)
 E  D
"RTN","IBCNERPF",91,0)
 . I $G(IBCNESPC("PYR"))="A" D
"RTN","IBCNERPF",92,0)
 . . S IBCNESPC("INSCO")="A"
"RTN","IBCNERPF",93,0)
 . E  D
"RTN","IBCNERPF",94,0)
 . . S PIEN=""
"RTN","IBCNERPF",95,0)
 . . F  S PIEN=$O(IBCNESPC("PYR",PIEN)) Q:PIEN=""  D  Q:STOP
"RTN","IBCNERPF",96,0)
 . . . I $D(IBCNESPC("PYR",PIEN))\10 S IBCNESPC("INSCO")="S",STOP=1 Q
"RTN","IBCNERPF",97,0)
 . . S:'STOP IBCNESPC("INSCO")="A"
"RTN","IBCNERPF",98,0)
 Q
"RTN","IBCNERPF",99,0)
 ;
"RTN","IBCNERPF",100,0)
AUTOUPDT(PIEN) ; Determine if the Auto update flag for payer = Yes
"RTN","IBCNERPF",101,0)
 ; Input:   PIEN        - IEN of the Payer (file 365.12)
"RTN","IBCNERPF",102,0)
 ; Returns  1 - Auto update flag is set to 'Y', 0 otherwise
"RTN","IBCNERPF",103,0)
 ; IB*2.0*549 Only include payers with eIV Auto Update flag = Yes
"RTN","IBCNERPF",104,0)
 N AUTOUPDT,IENS,MULT
"RTN","IBCNERPF",105,0)
 S MULT=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERPF",106,0)
 I MULT D
"RTN","IBCNERPF",107,0)
 . S IENS=MULT_","_PIEN_","
"RTN","IBCNERPF",108,0)
 . S AUTOUPDT=$$GET1^DIQ(365.121,IENS,".07","I")
"RTN","IBCNERPF",109,0)
 E  S AUTOUPDT=0
"RTN","IBCNERPF",110,0)
 Q AUTOUPDT
"RTN","IBCNERPF",111,0)
 ;
"RTN","IBCNERPF",112,0)
GETCOMPS(PIEN,IBCNESPC) ; Get companies linked to payer
"RTN","IBCNERPF",113,0)
 ; IB*2.0*549 Get associated insurance companies 
"RTN","IBCNERPF",114,0)
 ; IB*2.0*549 If user wants to display insurance companies, prompt only 
"RTN","IBCNERPF",115,0)
 ;            for those linked to payer
"RTN","IBCNERPF",116,0)
 ; IB*2.0*549 Allow the user to select none, one, or multiple insurance 
"RTN","IBCNERPF",117,0)
 ;            companies associated with a given payer
"RTN","IBCNERPF",118,0)
 ;
"RTN","IBCNERPF",119,0)
 ; IB*2.0*549 Add to IBCNESPC documentation
"RTN","IBCNERPF",120,0)
 ; Input
"RTN","IBCNERPF",121,0)
 ;  PIEN     - Payer ID
"RTN","IBCNERPF",122,0)
 ;  IBCNESPC - Array holding payer id and related insurance companies
"RTN","IBCNERPF",123,0)
 ; Output
"RTN","IBCNERPF",124,0)
 ;  IBCNESPC - Array holding payer id and related insurance companies
"RTN","IBCNERPF",125,0)
 ;  IBCNESPC("PYR",PIEN) = (1) ^ (2)
"RTN","IBCNERPF",126,0)
 ;    (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPF",127,0)
 ;    (2) Display all or some insurance companies - A = All companies/ S = Specified companies
"RTN","IBCNERPF",128,0)
 ;
"RTN","IBCNERPF",129,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,IBCNS,X,Y
"RTN","IBCNERPF",130,0)
 ; IB*2.0*549 Query to display associated insurance companies
"RTN","IBCNERPF",131,0)
 W !
"RTN","IBCNERPF",132,0)
 S DIR("A")="Do you want to display insurance company detail"
"RTN","IBCNERPF",133,0)
 S DIR("B")="NO"
"RTN","IBCNERPF",134,0)
 S DIR(0)="Y" D ^DIR
"RTN","IBCNERPF",135,0)
 Q:$D(DIRUT)
"RTN","IBCNERPF",136,0)
 ; IB*2.0*549 Display or do not display company detail
"RTN","IBCNERPF",137,0)
 S IBCNESPC("PYR",PIEN)=Y
"RTN","IBCNERPF",138,0)
 Q:'Y  ; IB*2.0*549 Do not display company detail
"RTN","IBCNERPF",139,0)
 ;
"RTN","IBCNERPF",140,0)
 W !
"RTN","IBCNERPF",141,0)
 K DIR
"RTN","IBCNERPF",142,0)
 S DIR("A")="Run for (A)ll Insurance Companies or Selected Insurance Companies: "
"RTN","IBCNERPF",143,0)
 S DIR("B")="A"
"RTN","IBCNERPF",144,0)
 S DIR(0)="SA^A:All;S:Selected" D ^DIR
"RTN","IBCNERPF",145,0)
 Q:$D(DIRUT)
"RTN","IBCNERPF",146,0)
 ; IB*2.0*549 Display all or specified companies
"RTN","IBCNERPF",147,0)
 S $P(IBCNESPC("PYR",PIEN),U,2)=Y
"RTN","IBCNERPF",148,0)
 Q:Y="A"  ; IB*2.0*549 Run for all companies
"RTN","IBCNERPF",149,0)
 ; IB*2.0*549 - Replaced dictionary look-up of Insurance Companies with
"RTN","IBCNERPF",150,0)
 ;                           call to Insurance Company look-up listman template
"RTN","IBCNERPF",151,0)
 K ^TMP("IBCNILKA",$J)
"RTN","IBCNERPF",152,0)
 D EN^IBCNILK(2,PIEN,4)
"RTN","IBCNERPF",153,0)
 I $D(^TMP("IBCNILKA",$J)) D
"RTN","IBCNERPF",154,0)
 .S IBCNS=""
"RTN","IBCNERPF",155,0)
 .F  S IBCNS=$O(^TMP("IBCNILKA",$J,IBCNS)) Q:IBCNS=""  D
"RTN","IBCNERPF",156,0)
 ..S IBCNESPC("PYR",PIEN,IBCNS)=""
"RTN","IBCNERPF",157,0)
 .K ^TMP("IBCNILKA",$J)
"RTN","IBCNERPF",158,0)
 Q
"RTN","IBCNERPF",159,0)
 ;
"RTN","IBCNERPF",160,0)
DTRANGE ;
"RTN","IBCNERPF",161,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",162,0)
 W !
"RTN","IBCNERPF",163,0)
 S DIR(0)="D^::EX",DIR("B")="Today"
"RTN","IBCNERPF",164,0)
 S DIR("A")="Earliest Date Received"
"RTN","IBCNERPF",165,0)
 S DIR("A",1)="RESPONSE RECEIVED DATE RANGE SELECTION:"
"RTN","IBCNERPF",166,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",167,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERPF",168,0)
 ; End date
"RTN","IBCNERPF",169,0)
DTRANGE1 ;
"RTN","IBCNERPF",170,0)
 K DIR("A") S DIR("A")="  Latest Date Received"
"RTN","IBCNERPF",171,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",172,0)
 I Y<IBCNESPC("BEGDT") W !,"     Latest Date must not precede the Earliest Date." G DTRANGE1
"RTN","IBCNERPF",173,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERPF",174,0)
 Q
"RTN","IBCNERPF",175,0)
 ;
"RTN","IBCNERPF",176,0)
PATIENT ;
"RTN","IBCNERPF",177,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",178,0)
 ; summary report is always run for all patients
"RTN","IBCNERPF",179,0)
 I $G(IBCNESPC("TYPE"))="S" S IBCNESPC("PAT")="A" Q
"RTN","IBCNERPF",180,0)
 W !
"RTN","IBCNERPF",181,0)
 S DIR("A")="Run for (A)ll Patients or (S)elected Patients: "
"RTN","IBCNERPF",182,0)
 S DIR("A",1)="PATIENT SELECTION:"
"RTN","IBCNERPF",183,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",184,0)
 D ^DIR
"RTN","IBCNERPF",185,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",186,0)
 I Y="A" S IBCNESPC("PAT")="A" Q  ; "All Patients" selected
"RTN","IBCNERPF",187,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",188,0)
 S DIC("A")="Select Patient: "
"RTN","IBCNERPF",189,0)
 S DIC="^DPT("
"RTN","IBCNERPF",190,0)
PATIENT1 ;
"RTN","IBCNERPF",191,0)
 D ^DIC
"RTN","IBCNERPF",192,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PAT") Q
"RTN","IBCNERPF",193,0)
 S IBCNESPC("PAT",$P(Y,U,1))=""
"RTN","IBCNERPF",194,0)
 ; IB*2.0*549 Change Select Another to Select Another Patient
"RTN","IBCNERPF",195,0)
 I $$ANOTHER("Patient") G PATIENT1
"RTN","IBCNERPF",196,0)
 Q
"RTN","IBCNERPF",197,0)
 ;
"RTN","IBCNERPF",198,0)
ANOTHER(TYPE) ; "Select Another" prompt
"RTN","IBCNERPF",199,0)
 ;IB*2.0*549 Change Select Another to Select Another Patient
"RTN","IBCNERPF",200,0)
 ;
"RTN","IBCNERPF",201,0)
 ; returns 1, if response was "YES", returns 0 otherwise
"RTN","IBCNERPF",202,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",203,0)
 ; IB*2.0*549 Change Select Another to Select Another [Type]
"RTN","IBCNERPF",204,0)
 S DIR("A")="Select Another "_TYPE_"?" S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCNERPF",205,0)
 D ^DIR I $D(DIRUT) S STOP=1
"RTN","IBCNERPF",206,0)
 Q Y
"RTN","IBCNERPF",207,0)
 ;
"RTN","IBCNERPF",208,0)
TYPE ;
"RTN","IBCNERPF",209,0)
 ;IB*2.0*549 Sort by payer name (Delete SORT tag)
"RTN","IBCNERPF",210,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",211,0)
 W !
"RTN","IBCNERPF",212,0)
 S DIR(0)="SA^S:Summary;D:Detailed"
"RTN","IBCNERPF",213,0)
 S DIR("A")="Run a (S)ummary or (D)etailed Report: "
"RTN","IBCNERPF",214,0)
 S DIR("B")="Summary"
"RTN","IBCNERPF",215,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",216,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERPF",217,0)
 Q
"RTN","IBCNERPG")
0^33^B51210670
"RTN","IBCNERPG",1,0)
IBCNERPG ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT COMPILE;16-SEP-2009
"RTN","IBCNERPG",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549**;16-SEP-09;Build 54
"RTN","IBCNERPG",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPG",4,0)
 ;
"RTN","IBCNERPG",5,0)
 ; IB*2.0*549 Changes to documentation for IBCNESPC("PYR")
"RTN","IBCNERPG",6,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPG",7,0)
 ; IB*2.0*549 Add IBCNESPC("INSCO")
"RTN","IBCNERPG",8,0)
 ;
"RTN","IBCNERPG",9,0)
 ; variables from IBCNERPF:
"RTN","IBCNERPG",10,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPG",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPG",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPG",13,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPG",14,0)
 ;   IBCNESPC("PYR") - If this ="A", then include all
"RTN","IBCNERPG",15,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report
"RTN","IBCNERPG",16,0)
 ;                       = 0 = No company detail
"RTN","IBCNERPG",17,0)
 ;                       = 1^A = Company detail, all corresponding companies
"RTN","IBCNERPG",18,0)
 ;                       = 1^S = Company detail, selected corresponding companies
"RTN","IBCNERPG",19,0)
 ;   
"RTN","IBCNERPG",20,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPG",21,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPG",22,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPG",23,0)
 ;
"RTN","IBCNERPG",24,0)
 ; Output variables passed to IBCNERPH:
"RTN","IBCNERPG",25,0)
 ;   Summary report:
"RTN","IBCNERPG",26,0)
 ;     ^TMP($J,IBCNERTN)=Total Count
"RTN","IBCNERPG",27,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Payer Count
"RTN","IBCNERPG",28,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Company Count
"RTN","IBCNERPG",29,0)
 ;     SORT1 - Payer Name, SORT2 - Company Name
"RTN","IBCNERPG",30,0)
 ;
"RTN","IBCNERPG",31,0)
 ;   Detailed report:
"RTN","IBCNERPG",32,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPG",33,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count 
"RTN","IBCNERPG",34,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=Payer Name ^ Insurance Company Name ^ Pat. Name ^ SSN ^
"RTN","IBCNERPG",35,0)
 ;                                         Date Inquiry Sent ^ Date Policy Auto Updated ^ Days old ^ 
"RTN","IBCNERPG",36,0)
 ;                                         Trace Number
"RTN","IBCNERPG",37,0)
 ;     SORT1 - Payer Name, SORT2 - Date received, SORT3 - Count
"RTN","IBCNERPG",38,0)
 ;
"RTN","IBCNERPG",39,0)
 Q
"RTN","IBCNERPG",40,0)
 ;
"RTN","IBCNERPG",41,0)
EN(IBCNERTN,IBCNESPCI,IBOUT) ; Entry point
"RTN","IBCNERPG",42,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",43,0)
 ; IB*2.0*549 Report on selected payers and insurance companies
"RTN","IBCNERPG",44,0)
 N ALLPYR,ALLPAT,DATE,BDATE,EDATE,RPDATA,RTYPE,SORT
"RTN","IBCNERPG",45,0)
 S ALLPYR=$S($G(IBCNESPC("PYR"))="A":1,1:0)
"RTN","IBCNERPG",46,0)
 S ALLPAT=$S($G(IBCNESPC("PAT"))="A":1,1:0)
"RTN","IBCNERPG",47,0)
 S BDATE=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPG",48,0)
 S EDATE=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPG",49,0)
 I EDATE'="",$P(EDATE,".",2)="" S EDATE=$$FMADD^XLFDT(EDATE,0,23,59,59)
"RTN","IBCNERPG",50,0)
 S RTYPE=$G(IBCNESPC("TYPE"))
"RTN","IBCNERPG",51,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPG",52,0)
 I '$D(ZTQUEUED),$G(IOST)["C-",IBOUT="R" W !!,"Compiling report data ..."
"RTN","IBCNERPG",53,0)
 ; Kill scratch global
"RTN","IBCNERPG",54,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPG",55,0)
 S DATE=$O(^IBCN(365,"AD",BDATE),-1)
"RTN","IBCNERPG",56,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",57,0)
 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:'DATE!(DATE>EDATE)  D PAYERS(DATE,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",58,0)
 ; IB*2.0*549 Report all selected payers and insurance companies
"RTN","IBCNERPG",59,0)
 I RTYPE="S" D RPTSEL(.IBCNESPC,.RPDATA)
"RTN","IBCNERPG",60,0)
 M ^TMP($J,IBCNERTN)=RPDATA
"RTN","IBCNERPG",61,0)
 Q
"RTN","IBCNERPG",62,0)
 ;
"RTN","IBCNERPG",63,0)
PAYERS(DATE,ALLPYR,ALLPAT,RTYPE) ; loop through payers
"RTN","IBCNERPG",64,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",65,0)
 N PYR
"RTN","IBCNERPG",66,0)
 S PYR=""
"RTN","IBCNERPG",67,0)
 ; IB*2.0*549 For summary report, look at all payers (only report company info sometimes)
"RTN","IBCNERPG",68,0)
 I 'ALLPYR D
"RTN","IBCNERPG",69,0)
 .I RTYPE="D" D
"RTN","IBCNERPG",70,0)
 ..F  S PYR=$O(IBCNESPC("PYR",PYR)) Q:'PYR  D:$O(^IBCN(365,"AD",DATE,PYR,"")) PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",71,0)
 .E  D
"RTN","IBCNERPG",72,0)
 ..F  S PYR=$O(^IBCN(365,"AD",DATE,PYR)) Q:'PYR  D PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",73,0)
 E  D
"RTN","IBCNERPG",74,0)
 .F  S PYR=$O(^IBCN(365,"AD",DATE,PYR)) Q:'PYR  D PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",75,0)
 Q
"RTN","IBCNERPG",76,0)
 ;
"RTN","IBCNERPG",77,0)
PATIENTS(DATE,PYR,ALLPYR,ALLPAT,RTYPE) ; loop through patients
"RTN","IBCNERPG",78,0)
 ; IB*2.0*549 For summary reports go through all payers regardless of settings
"RTN","IBCNERPG",79,0)
 N PAT
"RTN","IBCNERPG",80,0)
 S PAT=""
"RTN","IBCNERPG",81,0)
 I 'ALLPAT F  S PAT=$O(IBCNESPC("PAT",PAT)) Q:'PAT  D:$O(^IBCN(365,"AD",DATE,PYR,PAT,"")) GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",82,0)
 I ALLPAT F  S PAT=$O(^IBCN(365,"AD",DATE,PYR,PAT)) Q:'PAT  D GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) Q:$G(ZTSTOP)
"RTN","IBCNERPG",83,0)
 Q
"RTN","IBCNERPG",84,0)
 ;
"RTN","IBCNERPG",85,0)
GETDATA(DATE,PYR,ALLPYR,PAT,RTYPE) ; loop through responses and compile report
"RTN","IBCNERPG",86,0)
 ; IB*2.0*549 Remove fields to be printed and variables
"RTN","IBCNERPG",87,0)
 ; IB*2.0*549 Add fields and INSCONM,DTINQSNT,DTPOLUPD,TRACENUM and others
"RTN","IBCNERPG",88,0)
 N AUTOUPD,CLNAME,DTINQSNT,DTPOLUPD,FLG,IENS2,IENS312,IIEN,INS,INSCOMNM,NOW
"RTN","IBCNERPG",89,0)
 N PATNAME,PYRNAME,RIEN,SORT1,SORT2,SORT3,SSN,TOTMES,TQ,TRACENUM,TYPE,VDATE
"RTN","IBCNERPG",90,0)
 ;
"RTN","IBCNERPG",91,0)
 S NOW=$$NOW^XLFDT
"RTN","IBCNERPG",92,0)
 S (TOTMES,INS)=0
"RTN","IBCNERPG",93,0)
 S RIEN="" F  S RIEN=$O(^IBCN(365,"AD",DATE,PYR,PAT,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERPG",94,0)
 .S TOTMES=TOTMES+1 I $D(ZTQUEUED),TOTMES#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPG",95,0)
 .S TQ=+$P(^IBCN(365,RIEN,0),U,5) I TQ S INS=+$P(^IBCN(365.1,TQ,0),U,13)
"RTN","IBCNERPG",96,0)
 .I 'INS Q
"RTN","IBCNERPG",97,0)
 .; IB*2.0*549 If summary version of report & selected ins co were chosen, do not consider others
"RTN","IBCNERPG",98,0)
 .; IB*2.0*549 If summary version of report & selected ins co were chosen, count for payer only includes
"RTN","IBCNERPG",99,0)
 .;                         counts for selected ins co
"RTN","IBCNERPG",100,0)
 .S IENS2=PAT_",",IENS312=INS_","_IENS2
"RTN","IBCNERPG",101,0)
 .S VDATE=$$GET1^DIQ(2.312,IENS312,1.03,"I") I VDATE=""!(VDATE<BDATE)!(VDATE>EDATE) Q
"RTN","IBCNERPG",102,0)
 .S PYRNAME=$P(^IBE(365.12,PYR,0),U),PATNAME=$$GET1^DIQ(2,IENS2,.01,"E")
"RTN","IBCNERPG",103,0)
 .S AUTOUPD=+$$GET1^DIQ(2.312,IENS312,4.04,"I")
"RTN","IBCNERPG",104,0)
 .; IB*2.0*549 Only include the auto update person
"RTN","IBCNERPG",105,0)
 .Q:'AUTOUPD
"RTN","IBCNERPG",106,0)
 .; IB*2.0*549 Add insurance company name
"RTN","IBCNERPG",107,0)
 .S IIEN=$$GET1^DIQ(2.312,IENS312,.01,"I")
"RTN","IBCNERPG",108,0)
 .S INSCOMNM=$$GET1^DIQ(36,IIEN,".01","I") ; Insurance Company name
"RTN","IBCNERPG",109,0)
 .; IB*2.0*549 Remove unnecessary variables
"RTN","IBCNERPG",110,0)
 .; IB*2.0*549 Sort by Payer's name
"RTN","IBCNERPG",111,0)
 .; IB*2.0*549 For summary version of report, include count for insurance company
"RTN","IBCNERPG",112,0)
 .; IB*2.0*549 Do not display insurance company detail if user selected to not display such
"RTN","IBCNERPG",113,0)
 .S SORT1=PYRNAME
"RTN","IBCNERPG",114,0)
 .S TYPE=$G(IBCNESPC("PYR",PYR))
"RTN","IBCNERPG",115,0)
 .I RTYPE="S" D  Q
"RTN","IBCNERPG",116,0)
 ..S RPDATA=$G(RPDATA)+1
"RTN","IBCNERPG",117,0)
 ..; IB*2.0*549 If all payers was not chosen; and
"RTN","IBCNERPG",118,0)
 ..;            If selected payers was chosen and this payer was not selected then quit here
"RTN","IBCNERPG",119,0)
 ..I '(ALLPYR!('ALLPYR&$D(IBCNESPC("PYR",PYR)))) Q
"RTN","IBCNERPG",120,0)
 ..S RPDATA(SORT1)=$G(RPDATA(SORT1))+1
"RTN","IBCNERPG",121,0)
 ..; IB*2.0*549 Do not display company data if:
"RTN","IBCNERPG",122,0)
 ..;              1) If the user chose to not display company data
"RTN","IBCNERPG",123,0)
 ..;              2) The use chose to display company data, and chose to 
"RTN","IBCNERPG",124,0)
 ..;                 select companies, but did not choose this company
"RTN","IBCNERPG",125,0)
 ..S FLG=$S($P(TYPE,"^",1)=0:0,(TYPE="1^S")&'$D(IBCNESPC("PYR",PYR,IIEN)):0,1:1)
"RTN","IBCNERPG",126,0)
 ..I FLG D
"RTN","IBCNERPG",127,0)
 ...S SORT2=INSCOMNM
"RTN","IBCNERPG",128,0)
 ...S RPDATA(SORT1,SORT2)=$G(RPDATA(SORT1,SORT2))+1
"RTN","IBCNERPG",129,0)
 .S SSN=$$GET1^DIQ(2,IENS2,.09,"E")
"RTN","IBCNERPG",130,0)
 .; IB*2.0*549 Get date eIV inquiry sent, date policy auto-updated and eIV Trace number
"RTN","IBCNERPG",131,0)
 .S DTINQSNT=$$FMTE^XLFDT($$GET1^DIQ(365,RIEN_",",".08","I"),"2DZ")
"RTN","IBCNERPG",132,0)
 .S DTPOLUPD=$$FMTE^XLFDT($$GET1^DIQ(2.312,IENS312,1.05,"I"),"2DZ")
"RTN","IBCNERPG",133,0)
 .S TRACENUM=$$GET1^DIQ(365,RIEN_",",".09","I")
"RTN","IBCNERPG",134,0)
 .; IB*2.0*549 Remove 'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPG",135,0)
 .; IB*2.0*549 Add Insurance Company, date eIV inquiry sent,
"RTN","IBCNERPG",136,0)
 .;            date policy auto updated and eIV Trace number
"RTN","IBCNERPG",137,0)
 .S SORT2=DATE
"RTN","IBCNERPG",138,0)
 .S RPDATA=$G(RPDATA)+1
"RTN","IBCNERPG",139,0)
 .S RPDATA(SORT1)=$G(RPDATA(SORT1))+1
"RTN","IBCNERPG",140,0)
 .; IB*2.0*549 On the detailed report do not display date eIV response
"RTN","IBCNERPG",141,0)
 .;            received, 'Ck AB', 'Clerk/Auto' and Verified
"RTN","IBCNERPG",142,0)
 .; IB*2.0*549 Add insurance company name, date eIV inquiry sent,
"RTN","IBCNERPG",143,0)
 .;            date policy auto-updated, and eIV Trace number
"RTN","IBCNERPG",144,0)
 .I TYPE="1^S",'$D(IBCNESPC("PYR",PYR,IIEN)) Q  ; If user chose selected co option, and company was not selected
"RTN","IBCNERPG",145,0)
 .;                                               don't print company info
"RTN","IBCNERPG",146,0)
 .S (RPDATA(SORT1,SORT2),SORT3)=$G(RPDATA(SORT1,SORT2))+1
"RTN","IBCNERPG",147,0)
 .S RPDATA(SORT1,SORT2,SORT3)=PYRNAME_U_INSCOMNM_U_PATNAME_U_SSN_U_DTINQSNT_U_DTPOLUPD
"RTN","IBCNERPG",148,0)
 .S RPDATA(SORT1,SORT2,SORT3)=RPDATA(SORT1,SORT2,SORT3)_U_$$FMDIFF^XLFDT(NOW,DATE)_U_TRACENUM
"RTN","IBCNERPG",149,0)
 .Q
"RTN","IBCNERPG",150,0)
 Q
"RTN","IBCNERPG",151,0)
 ;
"RTN","IBCNERPG",152,0)
RPTSEL(IBCNESPC,RPDATA) ; Report all selected payers/insurance companies
"RTN","IBCNERPG",153,0)
 ; IB*2.0*549 Report all selected payers/insurance companies
"RTN","IBCNERPG",154,0)
 N PYR,PYRNAME,IIEN,INSCOMNM
"RTN","IBCNERPG",155,0)
 S PYR=""
"RTN","IBCNERPG",156,0)
 F  S PYR=$O(IBCNESPC("PYR",PYR)) Q:'PYR  D
"RTN","IBCNERPG",157,0)
 .S PYRNAME=$$GET1^DIQ(365.12,PYR,".01","I")
"RTN","IBCNERPG",158,0)
 .S:'$D(RPDATA(PYRNAME)) RPDATA(PYRNAME)=0
"RTN","IBCNERPG",159,0)
 .S IIEN=""
"RTN","IBCNERPG",160,0)
 .F  S IIEN=$O(IBCNESPC("PYR",PYR,IIEN)) Q:IIEN=""  D
"RTN","IBCNERPG",161,0)
 ..S INSCOMNM=$$GET1^DIQ(36,IIEN,".01","I")
"RTN","IBCNERPG",162,0)
 ..S:'$D(RPDATA(PYRNAME,INSCOMNM)) RPDATA(PYRNAME,INSCOMNM)=0
"RTN","IBCNERPG",163,0)
 Q
"RTN","IBCNERPG",164,0)
 ;
"RTN","IBCNERPH")
0^34^B48112420
"RTN","IBCNERPH",1,0)
IBCNERPH ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT PRINT;16-SEP-2009
"RTN","IBCNERPH",2,0)
 ;;2.0;INTEGRATED BILLING;**416,528,549**;16-SEP-09;Build 54
"RTN","IBCNERPH",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERPH",4,0)
 ;
"RTN","IBCNERPH",5,0)
 ; IB*2.0*549 Changes to documentation
"RTN","IBCNERPH",6,0)
 ; IB*2.0*549 Sort is by payer name
"RTN","IBCNERPH",7,0)
 ; IB*2.0*549 Allow for new sort level
"RTN","IBCNERPH",8,0)
 ; variables from IBCNERPF and IBCNERPG:
"RTN","IBCNERPH",9,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPH",10,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPH",11,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPH",12,0)
 ;   IBCNESPC("INSCO") = "A" (All ins. cos.) OR "S" (Selected ins. cos.)
"RTN","IBCNERPH",13,0)
 ;   IBCNESPC("PYR") - If this ="A", then include all
"RTN","IBCNERPH",14,0)
 ;   IBCNESPC("PYR",ien) - payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPH",15,0)
 ;                       = (1) ^ (2)
"RTN","IBCNERPH",16,0)
 ;     (1) Display insurance company detail - 0 = No / 1 = Yes
"RTN","IBCNERPH",17,0)
 ;     (2) Display all or some insurance companies - A = All companies/
"RTN","IBCNERPH",18,0)
 ;                                                   S = Specified companies
"RTN","IBCNERPH",19,0)
 ;   IBCNESPC("PYR",ien,coien) - payer iens and company ien for report
"RTN","IBCNERPH",20,0)
 ;                             = Count for insurance company
"RTN","IBCNERPH",21,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPH",22,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPH",23,0)
 ;   IBOUT = "R" for Report format or "E" for Excel format
"RTN","IBCNERPH",24,0)
 ;
"RTN","IBCNERPH",25,0)
 ;   Summary report:
"RTN","IBCNERPH",26,0)
 ;     ^TMP($J,IBCNERTN)=Total Count
"RTN","IBCNERPH",27,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Payer Count
"RTN","IBCNERPH",28,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Company Count
"RTN","IBCNERPH",29,0)
 ;     SORT1 - Payer Name, SORT2 - Company Name
"RTN","IBCNERPH",30,0)
 ;
"RTN","IBCNERPH",31,0)
 ;   Detailed report:
"RTN","IBCNERPH",32,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPH",33,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count 
"RTN","IBCNERPH",34,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=Payer Name ^ Insurance Company Name ^ Pat. Name ^ SSN ^
"RTN","IBCNERPH",35,0)
 ;                                         Date Inquiry Sent ^ Date Policy Auto Updated ^ Days old ^ 
"RTN","IBCNERPH",36,0)
 ;                                         Trace Number
"RTN","IBCNERPH",37,0)
 ;     SORT1 - Payer Name, SORT2 - Date received, SORT3 - Count
"RTN","IBCNERPH",38,0)
 ;
"RTN","IBCNERPH",39,0)
 Q
"RTN","IBCNERPH",40,0)
 ;
"RTN","IBCNERPH",41,0)
EN(IBCNERTN,IBCNESPC,IBOUT) ; Entry point
"RTN","IBCNERPH",42,0)
 ; IB*2.0*549 Delete printed fields and their variables
"RTN","IBCNERPH",43,0)
 ; IB*2.0*549 Allow for new sort level
"RTN","IBCNERPH",44,0)
 N CRT,DDATA,DLINE,EORMSG,IBPGC,IBPXT,MAXCNT,NONEMSG,NPROC,SSN,SSNLEN,SRT1,SRT2,SRT3,TSTAMP,TYPE,WIDTH,X,Y
"RTN","IBCNERPH",45,0)
 S (IBPGC,IBPXT)=0
"RTN","IBCNERPH",46,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPH",47,0)
 ; IB*2.0*549 Modify EOR msg
"RTN","IBCNERPH",48,0)
 S EORMSG="*****END OF REPORT*****"
"RTN","IBCNERPH",49,0)
 S NPROC="Not Processed"
"RTN","IBCNERPH",50,0)
 S TSTAMP=$$FMTE^XLFDT($$NOW^XLFDT,1) ; time of report
"RTN","IBCNERPH",51,0)
 S TYPE=$G(IBCNESPC("TYPE")) ; report type
"RTN","IBCNERPH",52,0)
 S WIDTH=$S(TYPE="S":79,1:131)
"RTN","IBCNERPH",53,0)
 ; Determine IO parameters
"RTN","IBCNERPH",54,0)
 I "^R^E^"'[(U_$G(IBOUT)_U) S IBOUT="R"
"RTN","IBCNERPH",55,0)
 S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPH",56,0)
 S:IOST["C-" MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPH",57,0)
 ; print data
"RTN","IBCNERPH",58,0)
 S SRT1=""
"RTN","IBCNERPH",59,0)
 D HEADER:IBOUT="R",PHDL:IBOUT="E" I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",60,0)
 ; IB*2.0*549 Reformat header
"RTN","IBCNERPH",61,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERPH",62,0)
 I '$D(^TMP($J,IBCNERTN)) D LINE($$FO^IBCNEUT1(NONEMSG,$L(NONEMSG),"L"),IBOUT) G EXIT
"RTN","IBCNERPH",63,0)
 I TYPE="S" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",64,0)
 .; summary report
"RTN","IBCNERPH",65,0)
 .; IB*2.0*549 Add Total Auto Updated line
"RTN","IBCNERPH",66,0)
 .D LINE("TOTAL AUTO UPDATED = "_+$G(^TMP($J,IBCNERTN)),IBOUT)
"RTN","IBCNERPH",67,0)
 .W !
"RTN","IBCNERPH",68,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",69,0)
 ..; IB*2.0*549 Add payer count
"RTN","IBCNERPH",70,0)
 ..I SRT1'="*",IBOUT="R" D LINE(SRT1_" = "_+$G(^TMP($J,IBCNERTN,SRT1)),IBOUT)
"RTN","IBCNERPH",71,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",72,0)
 ...; IB*2.0*549 Change line
"RTN","IBCNERPH",73,0)
 ...I IBOUT="E" D LINE($S(SRT1="*":"ALL",1:SRT1)_U_$S(SRT2=0:NPROC,1:SRT2)_U_^TMP($J,IBCNERTN,SRT1,SRT2),IBOUT) Q
"RTN","IBCNERPH",74,0)
 ...D LINE("       "_SRT2_" = "_+$G(^TMP($J,IBCNERTN,SRT1,SRT2)),IBOUT)
"RTN","IBCNERPH",75,0)
 ...Q
"RTN","IBCNERPH",76,0)
 ..Q
"RTN","IBCNERPH",77,0)
 .; IB*2.0*549 Add space between report and end of report line
"RTN","IBCNERPH",78,0)
 .W !
"RTN","IBCNERPH",79,0)
 .Q
"RTN","IBCNERPH",80,0)
 I TYPE="D" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",81,0)
 .; detailed report
"RTN","IBCNERPH",82,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",83,0)
 ..; IB*2.0*549 Get rid of the count line
"RTN","IBCNERPH",84,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",85,0)
 ...S SRT3="" F  S SRT3=$O(^TMP($J,IBCNERTN,SRT1,SRT2,SRT3)) Q:SRT3=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",86,0)
 ....S DDATA=$G(^TMP($J,IBCNERTN,SRT1,SRT2,SRT3)),DLINE="",SSN=$P(DDATA,U,4)
"RTN","IBCNERPH",87,0)
 ....I IBOUT="E" D XLDATA(SSN) Q
"RTN","IBCNERPH",88,0)
 ....; IB*2.0*549 For detailed version do not display date eIV response received,
"RTN","IBCNERPH",89,0)
 ....;            'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPH",90,0)
 ....; IB*2.0*549 Add fields:  Insurance Company, date eIV inquiry sent, date
"RTN","IBCNERPH",91,0)
 ....;                         policy auto updated, and eIV Trace number
"RTN","IBCNERPH",92,0)
 ....S $E(DLINE,1,24)=$E($P(DDATA,U),1,24) ;     Payer name
"RTN","IBCNERPH",93,0)
 ....S $E(DLINE,28,43)=$E($P(DDATA,U,2),1,16) ;  Insurance company name
"RTN","IBCNERPH",94,0)
 ....S $E(DLINE,46,60)=$E($P(DDATA,U,3),1,15) ;  Patient name
"RTN","IBCNERPH",95,0)
 ....S SSNLEN=$L(SSN),$E(DLINE,63,66)=$E(SSN,SSNLEN-3,SSNLEN)
"RTN","IBCNERPH",96,0)
 ....S $E(DLINE,69,76)=$E($P(DDATA,U,5),1,8) ;   Date sent
"RTN","IBCNERPH",97,0)
 ....S $E(DLINE,79,86)=$E($P(DDATA,U,6),1,8) ;   Date auto updated
"RTN","IBCNERPH",98,0)
 ....S $E(DLINE,89,95)=$J($P(DDATA,U,7),4) ;     Days
"RTN","IBCNERPH",99,0)
 ....S $E(DLINE,98,107)=$E($P(DDATA,U,8),1,10) ; eIV trace number
"RTN","IBCNERPH",100,0)
 ....D LINE(DLINE,IBOUT)
"RTN","IBCNERPH",101,0)
 ....Q
"RTN","IBCNERPH",102,0)
 ...Q
"RTN","IBCNERPH",103,0)
 ..Q
"RTN","IBCNERPH",104,0)
 .; IB*2.0*549 Add space between report and end of report line
"RTN","IBCNERPH",105,0)
 .W !
"RTN","IBCNERPH",106,0)
 .Q
"RTN","IBCNERPH",107,0)
 ;
"RTN","IBCNERPH",108,0)
EXIT ;
"RTN","IBCNERPH",109,0)
 ; IB*2.0*549 Left-justify end of report message
"RTN","IBCNERPH",110,0)
 D LINE($$FO^IBCNEUT1(EORMSG,$L(EORMSG),"L"),IBOUT)
"RTN","IBCNERPH",111,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL
"RTN","IBCNERPH",112,0)
 Q
"RTN","IBCNERPH",113,0)
 ;
"RTN","IBCNERPH",114,0)
XLDATA(SSN) ; Excel detailed output
"RTN","IBCNERPH",115,0)
 W !,$P(DDATA,U,1,3)_U_$E(SSN,$L(SSN)-3,$L(SSN))_U_$P(DDATA,U,5,8)
"RTN","IBCNERPH",116,0)
 Q
"RTN","IBCNERPH",117,0)
 ;
"RTN","IBCNERPH",118,0)
EOL ; display "end of page" message and set exit flag
"RTN","IBCNERPH",119,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,LIN
"RTN","IBCNERPH",120,0)
 I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPH",121,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPH",122,0)
 I $D(DTOUT)!$D(DUOUT) S IBPXT=1
"RTN","IBCNERPH",123,0)
 Q
"RTN","IBCNERPH",124,0)
 ;
"RTN","IBCNERPH",125,0)
HEADER ; print header for each page
"RTN","IBCNERPH",126,0)
 N DASHES,DELTA,HDR,LEN,OFFSET,POS,STRING
"RTN","IBCNERPH",127,0)
 ;
"RTN","IBCNERPH",128,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL I IBPXT Q
"RTN","IBCNERPH",129,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 Q
"RTN","IBCNERPH",130,0)
 S IBPGC=IBPGC+1
"RTN","IBCNERPH",131,0)
 ; IB*2.0*549 Change report name to Auto Update Report
"RTN","IBCNERPH",132,0)
 W @IOF,!
"RTN","IBCNERPH",133,0)
 S HDR=$J("",WIDTH)
"RTN","IBCNERPH",134,0)
 S STRING=" Auto Update Report",$E(HDR,1,$L(STRING))=STRING
"RTN","IBCNERPH",135,0)
 S STRING="  Page: "_IBPGC,$E(HDR,WIDTH-$L(STRING)+1,WIDTH)=STRING
"RTN","IBCNERPH",136,0)
 S LEN=$L(TSTAMP)
"RTN","IBCNERPH",137,0)
 S DELTA=(WIDTH#2),POS=(WIDTH\2+DELTA)-(LEN\2)+1
"RTN","IBCNERPH",138,0)
 S $E(HDR,POS,POS+$L(TSTAMP)-1)=TSTAMP
"RTN","IBCNERPH",139,0)
 W HDR W:TYPE="S" !
"RTN","IBCNERPH",140,0)
 S HDR=$$FMTE^XLFDT($G(IBCNESPC("BEGDT")),"5Z")_" - "_$$FMTE^XLFDT($G(IBCNESPC("ENDDT")),"5Z")
"RTN","IBCNERPH",141,0)
 W !?1,"Response Received: ",HDR
"RTN","IBCNERPH",142,0)
 W !?2,$S(TYPE="D":"Detailed",1:"Summary")_" Report: "
"RTN","IBCNERPH",143,0)
 W $S($G(IBCNESPC("PYR"))="A":"All",1:"Selected")_" Payers"
"RTN","IBCNERPH",144,0)
 ; IB*2.0*549 For detailed version do not display date eIV response received,
"RTN","IBCNERPH",145,0)
 ;            'Ck AB', 'Clerk/Auto' and 'Verified'
"RTN","IBCNERPH",146,0)
 ; IB*2.0*549 Add fields:  Insurance Company, date eIV inquiry sent, date
"RTN","IBCNERPH",147,0)
 ;                         policy auto updated, and eIV Trace number
"RTN","IBCNERPH",148,0)
 I TYPE="D" D
"RTN","IBCNERPH",149,0)
 .; IB*2.0*549 Fix selected/all insurance co
"RTN","IBCNERPH",150,0)
 .W "; ",$S($G(IBCNESPC("INSCO"))="S":"Selected",1:"All")
"RTN","IBCNERPH",151,0)
 .W " Insurance Companies; "
"RTN","IBCNERPH",152,0)
 .W $S($G(IBCNESPC("PAT"))="A":"All",1:"Selected")_" Patients"
"RTN","IBCNERPH",153,0)
 .; IB*2.0*549 Fix header for screen
"RTN","IBCNERPH",154,0)
 .S STRING="Payer",$E(STRING,28,45)="Insurance Co",$E(STRING,46,62)="Patient Name"
"RTN","IBCNERPH",155,0)
 .S $E(STRING,63,68)="SSN",$E(STRING,69,78)="Dt Sent",$E(STRING,79,88)="Auto Dt"
"RTN","IBCNERPH",156,0)
 .S $E(STRING,89,97)="Days",$E(STRING,98,131)="eIV Trace#"
"RTN","IBCNERPH",157,0)
 .W !!,?1,STRING
"RTN","IBCNERPH",158,0)
 S $P(DASHES,"-",WIDTH-2)="" W !,?1,DASHES
"RTN","IBCNERPH",159,0)
 Q
"RTN","IBCNERPH",160,0)
 ;
"RTN","IBCNERPH",161,0)
LINE(LINE,IBOUT) ; Print line of data
"RTN","IBCNERPH",162,0)
 I $Y+1>MAXCNT,IBOUT="R" D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",163,0)
 W ! W:IBOUT="R" ?1 W LINE
"RTN","IBCNERPH",164,0)
 Q
"RTN","IBCNERPH",165,0)
 ;
"RTN","IBCNERPH",166,0)
CENTER(LINE) ; return length of a centered line
"RTN","IBCNERPH",167,0)
 ; LINE - line to center
"RTN","IBCNERPH",168,0)
 N LENGTH,OFFSET
"RTN","IBCNERPH",169,0)
 S LENGTH=$L(LINE),OFFSET=IOM-$L(LINE)\2
"RTN","IBCNERPH",170,0)
 Q OFFSET+LENGTH
"RTN","IBCNERPH",171,0)
 ;
"RTN","IBCNERPH",172,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBCNERPH",173,0)
 ; IB*2.0*549 - Add report header
"RTN","IBCNERPH",174,0)
 N HDR,IBHDT,X
"RTN","IBCNERPH",175,0)
 D NOW^%DTC
"RTN","IBCNERPH",176,0)
 S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCNERPH",177,0)
 W "Auto Update Report",?53,"Run On: ",IBHDT
"RTN","IBCNERPH",178,0)
 S HDR=$$FMTE^XLFDT($G(IBCNESPC("BEGDT")),"5Z")_" - "_$$FMTE^XLFDT($G(IBCNESPC("ENDDT")),"5Z")
"RTN","IBCNERPH",179,0)
 W !?1,"Response Received: ",HDR
"RTN","IBCNERPH",180,0)
 W !?2,$S(TYPE="D":"Detailed",1:"Summary")_" Report: "
"RTN","IBCNERPH",181,0)
 W $S($G(IBCNESPC("PYR"))="A":"All",1:"Selected")_" Payers"
"RTN","IBCNERPH",182,0)
 I TYPE="D" D
"RTN","IBCNERPH",183,0)
 .W "; ",$S($G(IBCNESPC("INSCO"))="S":"Selected",1:"All")
"RTN","IBCNERPH",184,0)
 .W " Insurance Companies; "
"RTN","IBCNERPH",185,0)
 .W $S($G(IBCNESPC("PAT"))="A":"All",1:"Selected")_" Patients"
"RTN","IBCNERPH",186,0)
 W !!
"RTN","IBCNERPH",187,0)
 S IBPGC=1
"RTN","IBCNERPH",188,0)
 D
"RTN","IBCNERPH",189,0)
 .I TYPE="S" S X="Payer Name^Insurance Co^Count" Q
"RTN","IBCNERPH",190,0)
 .I TYPE="D" D
"RTN","IBCNERPH",191,0)
 ..S X="Payer^Insurance Co^Patient Name^SSN^Dt Sent^Auto Dt"
"RTN","IBCNERPH",192,0)
 ..S X=X_"^Days^eIV Trace#"
"RTN","IBCNERPH",193,0)
 W X
"RTN","IBCNERPH",194,0)
 Q
"RTN","IBCNERTQ")
0^11^B44950178
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;ALB/BI - Real-time Insurance Verification ;15-OCT-2015
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438,467,497,549**;21-MAR-94;Build 54
"RTN","IBCNERTQ",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          90.01 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          90.02 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          90.03 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;          62.01 - PATIENT ID
"RTN","IBCNERTQ",14,0)
 ;
"RTN","IBCNERTQ",15,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",16,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",17,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",18,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",19,0)
 ;          90.03 - SUBSCRIBER ID (if patient is the subscriber)
"RTN","IBCNERTQ",20,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",21,0)
 ;          62.01 - PATIENT ID (if patient is not the subscriber)
"RTN","IBCNERTQ",22,0)
 ;
"RTN","IBCNERTQ",23,0)
 ;
"RTN","IBCNERTQ",24,0)
 N TQIEN,TQN0,NODE20,NODE60,NODE90,QF,N4,PTID,SUBID,MGRP,DFN,PREL
"RTN","IBCNERTQ",25,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",26,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",27,0)
 N DA,DB,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",28,0)
 ;
"RTN","IBCNERTQ",29,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",30,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",31,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",32,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",33,0)
 S NODE90=$G(^IBA(355.33,N2,90))
"RTN","IBCNERTQ",34,0)
 S PREL=$P(NODE60,U,14)
"RTN","IBCNERTQ",35,0)
 I $P(NODE20,U,1)="" Q RESPONSE                       ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",36,0)
 I $P(NODE60,U,1)="" Q RESPONSE                       ;PATIENT NAME
"RTN","IBCNERTQ",37,0)
 I $P(NODE90,U,3)="" Q RESPONSE                       ;SUBSCRIBER ID
"RTN","IBCNERTQ",38,0)
 ; exclude dependent inquiries w/o patient id or DOB
"RTN","IBCNERTQ",39,0)
 I PREL'=18,PREL'="",($P($G(^IBA(355.33,N2,62)),U)=""!($P(NODE60,U,8)="")) Q RESPONSE
"RTN","IBCNERTQ",40,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",41,0)
 I $G(IBNCPDPELIG) Q RESPONSE  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",42,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",43,0)
 ;
"RTN","IBCNERTQ",44,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",45,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",46,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",PREL="" Q RESPONSE
"RTN","IBCNERTQ",47,0)
 ;
"RTN","IBCNERTQ",48,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",49,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",50,0)
 S SUBID=$P(NODE90,U,3)
"RTN","IBCNERTQ",51,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",52,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",53,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",54,0)
 .; don't send again if there's an entry in the queue with the same subscriber id, same buffer entry, and
"RTN","IBCNERTQ",55,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",56,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",57,0)
 .Q
"RTN","IBCNERTQ",58,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",59,0)
 ;
"RTN","IBCNERTQ",60,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",61,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",62,0)
 ;
"RTN","IBCNERTQ",63,0)
 ;Store Service Type Code in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",64,0)
 I +$G(^IBA(355.33,N2,80))'>0 D SETSTC(N2)
"RTN","IBCNERTQ",65,0)
 ;
"RTN","IBCNERTQ",66,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",67,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",68,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",69,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",70,0)
 ;
"RTN","IBCNERTQ",71,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",72,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",73,0)
 ;
"RTN","IBCNERTQ",74,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",75,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",76,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",77,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",78,0)
 ;
"RTN","IBCNERTQ",79,0)
ENDTRIG ; Final Clean Up.
"RTN","IBCNERTQ",80,0)
 ;
"RTN","IBCNERTQ",81,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",82,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",83,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",84,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",85,0)
 ;
"RTN","IBCNERTQ",86,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",87,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",88,0)
 Q RESPONSE
"RTN","IBCNERTQ",89,0)
 ;
"RTN","IBCNERTQ",90,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",91,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",92,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",93,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",94,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",95,0)
 ;
"RTN","IBCNERTQ",96,0)
 S CNT=0
"RTN","IBCNERTQ",97,0)
 ;
"RTN","IBCNERTQ",98,0)
 S QUEUED=0
"RTN","IBCNERTQ",99,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",100,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",101,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",102,0)
 ;
"RTN","IBCNERTQ",103,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",104,0)
 ;
"RTN","IBCNERTQ",105,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",106,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",107,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",108,0)
 ;
"RTN","IBCNERTQ",109,0)
 ; IB*2.0*549 -  Quit if Realtime  Extract Master switch is off
"RTN","IBCNERTQ",110,0)
 ; Note: Checking here instead of the top of TRIG to check for above error conditions first
"RTN","IBCNERTQ",111,0)
 Q:$$GET1^DIQ(350.9,"1,",51.27,"I")="N" 0
"RTN","IBCNERTQ",112,0)
 ;
"RTN","IBCNERTQ",113,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",114,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",115,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",116,0)
 ;
"RTN","IBCNERTQ",117,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",118,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",119,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",120,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",121,0)
 ;
"RTN","IBCNERTQ",122,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",123,0)
 S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18) S:'SRVICEDT SRVICEDT=DT ; Service Date
"RTN","IBCNERTQ",124,0)
 ;
"RTN","IBCNERTQ",125,0)
 ; IB*2.0*549 Removed following line
"RTN","IBCNERTQ",126,0)
 ;I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNERTQ",127,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",128,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",129,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",130,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",131,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",132,0)
 ;
"RTN","IBCNERTQ",133,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",134,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",135,0)
 ;
"RTN","IBCNERTQ",136,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",137,0)
 ;
"RTN","IBCNERTQ",138,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",139,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",140,0)
 ;
"RTN","IBCNERTQ",141,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",142,0)
 ;  date range
"RTN","IBCNERTQ",143,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",144,0)
 ;
"RTN","IBCNERTQ",145,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",146,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",147,0)
 ;
"RTN","IBCNERTQ",148,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",149,0)
 S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",150,0)
 I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",151,0)
 ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNERTQ",152,0)
 D SETREL^IBCNEDE1(IEN)
"RTN","IBCNERTQ",153,0)
 ;
"RTN","IBCNERTQ",154,0)
 ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNERTQ",155,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",156,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",157,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",158,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",159,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",160,0)
 ; not included
"RTN","IBCNERTQ",161,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",162,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",163,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",164,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",165,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",166,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",167,0)
 ;
"RTN","IBCNERTQ",168,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",169,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",170,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",171,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",172,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",173,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",174,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",175,0)
 ;
"RTN","IBCNERTQ",176,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",177,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",178,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",179,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",180,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",181,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",182,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",183,0)
 ;
"RTN","IBCNERTQ",184,0)
 ; IB*2.0*549 - quit if test site and not a valid test case
"RTN","IBCNERTQ",185,0)
 Q:'$$XMITOK^IBCNEUT7(IEN) 0
"RTN","IBCNERTQ",186,0)
 ;
"RTN","IBCNERTQ",187,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",188,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",189,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",190,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",191,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",192,0)
 ;  If not successful
"RTN","IBCNERTQ",193,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",194,0)
 ;  If successful
"RTN","IBCNERTQ",195,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",196,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",197,0)
 ;
"RTN","IBCNERTQ",198,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",199,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",200,0)
 ;
"RTN","IBCNERTQ",201,0)
 Q 1
"RTN","IBCNERTQ",202,0)
 ;
"RTN","IBCNERTQ",203,0)
SETSTC(BUFF) ; set service type code
"RTN","IBCNERTQ",204,0)
 N DIE,DA,DR,X,Y
"RTN","IBCNERTQ",205,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",206,0)
 ; Define Service Type Code (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",207,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",208,0)
 S DR="80.01////"_$P($G(^IBE(350.9,1,60)),U)
"RTN","IBCNERTQ",209,0)
 D ^DIE
"RTN","IBCNERTQ",210,0)
 Q
"RTN","IBCNES1")
0^59^B145689947
"RTN","IBCNES1",1,0)
IBCNES1 ;ALB/ESG/JM - eIV elig/benefit utilities ;01/13/2016
"RTN","IBCNES1",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438,497,549**;21-MAR-94;Build 54
"RTN","IBCNES1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNES1",4,0)
 ;
"RTN","IBCNES1",5,0)
 Q
"RTN","IBCNES1",6,0)
 ;
"RTN","IBCNES1",7,0)
EB(IBVF,IBVIENS,IBVV,IBVSUB) ; Main Eligibility/Benefit Information
"RTN","IBCNES1",8,0)
 ;
"RTN","IBCNES1",9,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",10,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",11,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",12,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",13,0)
 ;
"RTN","IBCNES1",14,0)
 N EB,EBERR,DSP,LN,COL1,COL2,ZF,ZIEN
"RTN","IBCNES1",15,0)
 D GETS^DIQ(IBVF,IBVIENS,".02:.13;8*;11*","IEN","EB","EBERR")
"RTN","IBCNES1",16,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",17,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",18,0)
 ;
"RTN","IBCNES1",19,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",20,0)
 ;
"RTN","IBCNES1",21,0)
 S LN=LN+1
"RTN","IBCNES1",22,0)
 D SET(LN,1,"Eligibility/Benefit Information",,IBVV)
"RTN","IBCNES1",23,0)
 ;
"RTN","IBCNES1",24,0)
 S LN=LN+1
"RTN","IBCNES1",25,0)
 D SET(LN,COL1,"Elig/Ben Info",$P($G(^IBE(365.011,+$G(EB(IBVF,IBVIENS,.02,"I")),0)),U,2))
"RTN","IBCNES1",26,0)
 D SET(.LN,COL2,"Coverage Level",$P($G(^IBE(365.012,+$G(EB(IBVF,IBVIENS,.03,"I")),0)),U,2))
"RTN","IBCNES1",27,0)
 ;
"RTN","IBCNES1",28,0)
 ; now loop through and display all of the dates and date qualifiers
"RTN","IBCNES1",29,0)
 S ZF=2.3228
"RTN","IBCNES1",30,0)
 I IBVF=365.02 S ZF=365.28     ; subscriber dates subfile#
"RTN","IBCNES1",31,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",32,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",33,0)
 . N HLDT,DTYP,EXDT
"RTN","IBCNES1",34,0)
 . S LN=LN+1
"RTN","IBCNES1",35,0)
 . D SET(LN,COL1,"Date/Time Qual",$P($G(^IBE(365.026,+$G(EB(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",36,0)
 . S HLDT=$G(EB(ZF,ZIEN,.02,"E"))
"RTN","IBCNES1",37,0)
 . S DTYP=$G(EB(ZF,ZIEN,.04,"E"))           ;IB*2.0*549 changed "I" to "E"
"RTN","IBCNES1",38,0)
 . S EXDT=$S(DTYP="D8":$$DATE(HLDT),DTYP="RD8":($$DATE($P(HLDT,"-",1))_"-"_$$DATE($P(HLDT,"-",2))),1:HLDT)
"RTN","IBCNES1",39,0)
 . D SET(.LN,COL2,"D/T Period",EXDT)
"RTN","IBCNES1",40,0)
 . Q
"RTN","IBCNES1",41,0)
 ; loop through service type codes
"RTN","IBCNES1",42,0)
 S ZF=2.32292
"RTN","IBCNES1",43,0)
 I IBVF=365.02 S ZF=365.292  ; service types subfile#
"RTN","IBCNES1",44,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",45,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  S LN=LN+1 D SET(LN,COL1,"Service Type",$P($G(^IBE(365.013,+$G(EB(ZF,ZIEN,.01,"I")),0)),U,2))
"RTN","IBCNES1",46,0)
 ;
"RTN","IBCNES1",47,0)
 S LN=LN+1
"RTN","IBCNES1",48,0)
 D SET(LN,COL1,"Time Period",$P($G(^IBE(365.015,+$G(EB(IBVF,IBVIENS,.07,"I")),0)),U,2))
"RTN","IBCNES1",49,0)
 ;
"RTN","IBCNES1",50,0)
 S LN=LN+1
"RTN","IBCNES1",51,0)
 D SET(LN,COL1,"Insurance Type",$P($G(^IBE(365.014,+$G(EB(IBVF,IBVIENS,.05,"I")),0)),U,2))
"RTN","IBCNES1",52,0)
 ;
"RTN","IBCNES1",53,0)
 S LN=LN+1
"RTN","IBCNES1",54,0)
 D SET(LN,COL1,"Plan Coverage Desc",$G(EB(IBVF,IBVIENS,.06,"E")))
"RTN","IBCNES1",55,0)
 ;
"RTN","IBCNES1",56,0)
 S LN=LN+1
"RTN","IBCNES1",57,0)
 D SET(LN,COL1,"Benefit Amount",$G(EB(IBVF,IBVIENS,.08,"E")))
"RTN","IBCNES1",58,0)
 D SET(.LN,COL2,"Benefit %",$G(EB(IBVF,IBVIENS,.09,"E")))
"RTN","IBCNES1",59,0)
 ;
"RTN","IBCNES1",60,0)
 S LN=LN+1
"RTN","IBCNES1",61,0)
 D SET(LN,COL1,"Quantity Qual",$P($G(^IBE(365.016,+$G(EB(IBVF,IBVIENS,.1,"I")),0)),U,2))
"RTN","IBCNES1",62,0)
 D SET(.LN,COL2,"Quantity Amount",$G(EB(IBVF,IBVIENS,.11,"E")))
"RTN","IBCNES1",63,0)
 ;
"RTN","IBCNES1",64,0)
 S LN=LN+1
"RTN","IBCNES1",65,0)
 D SET(LN,COL1,"Auth/Certification Required",$P($G(^IBE(365.033,+$G(EB(IBVF,IBVIENS,.12,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",66,0)
 D SET(.LN,COL2,"In-Plan-Network",$P($G(^IBE(365.033,+$G(EB(IBVF,IBVIENS,.13,"I")),0)),U,2)) ;IB*2*497
"RTN","IBCNES1",67,0)
 ;
"RTN","IBCNES1",68,0)
 S LN=LN+1
"RTN","IBCNES1",69,0)
 D SET(LN)
"RTN","IBCNES1",70,0)
 ;
"RTN","IBCNES1",71,0)
EBX ;
"RTN","IBCNES1",72,0)
 Q
"RTN","IBCNES1",73,0)
 ;
"RTN","IBCNES1",74,0)
CMPI(IBVF,IBVIENS,IBVV,IBVSUB) ; Composite Medical Procedure Information
"RTN","IBCNES1",75,0)
 ;
"RTN","IBCNES1",76,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",77,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",78,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",79,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",80,0)
 ;
"RTN","IBCNES1",81,0)
 N CMPI,CMPIERR,DSP,LN,COL1,COL2,PCTYP,PCODE,PCIEN,PCDESC,MODLST,FCZ,PM,ZF,ZIEN,POS,POSD,DX,DXD
"RTN","IBCNES1",82,0)
 D GETS^DIQ(IBVF,IBVIENS,"1.01:1.06;9*","IEN","CMPI","CMPIERR")
"RTN","IBCNES1",83,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",84,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",85,0)
 ;
"RTN","IBCNES1",86,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",87,0)
 ;
"RTN","IBCNES1",88,0)
 S LN=LN+1
"RTN","IBCNES1",89,0)
 I '$D(CMPI) G CMPIX
"RTN","IBCNES1",90,0)
 D SET(LN,1,"Composite Medical Procedure Information",,IBVV)
"RTN","IBCNES1",91,0)
 ;
"RTN","IBCNES1",92,0)
 ; get procedure code, desc, and type information
"RTN","IBCNES1",93,0)
 S PCTYP=$G(CMPI(IBVF,IBVIENS,1.01,"E"))  ;IB*2*497
"RTN","IBCNES1",94,0)
 S PCODE=$G(CMPI(IBVF,IBVIENS,1.02,"E"))
"RTN","IBCNES1",95,0)
 S PCIEN=0,PCDESC=""
"RTN","IBCNES1",96,0)
 I PCTYP="CJ"!(PCTYP="HC") D     ; cpt or hcpcs procedure codes
"RTN","IBCNES1",97,0)
 . Q:PCODE=""
"RTN","IBCNES1",98,0)
 . S PCIEN=+$O(^ICPT("BA",PCODE_" ",0))
"RTN","IBCNES1",99,0)
 . Q:'PCIEN
"RTN","IBCNES1",100,0)
 . S PCDESC=$P($$CPT^IBACSV(PCIEN),U,2)
"RTN","IBCNES1",101,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",102,0)
 . Q
"RTN","IBCNES1",103,0)
 ;
"RTN","IBCNES1",104,0)
 I PCTYP="ID" D         ; icd-9-cm procedure codes
"RTN","IBCNES1",105,0)
 . Q:PCODE=""
"RTN","IBCNES1",106,0)
 . S PCIEN=+$O(^ICD0("BA",PCODE_" ",0))
"RTN","IBCNES1",107,0)
 . Q:'PCIEN
"RTN","IBCNES1",108,0)
 . S PCDESC=$P($$ICD0^IBACSV(PCIEN),U,4)
"RTN","IBCNES1",109,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",110,0)
 . Q
"RTN","IBCNES1",111,0)
 ;
"RTN","IBCNES1",112,0)
 S LN=LN+1
"RTN","IBCNES1",113,0)
 D SET(LN,COL1,"Prod/Serv ID Qual",$G(CMPI(IBVF,IBVIENS,1.01,"E")))
"RTN","IBCNES1",114,0)
 D SET(.LN,COL2,"Procedure Code",PCODE_" "_PCDESC)
"RTN","IBCNES1",115,0)
 ;
"RTN","IBCNES1",116,0)
 S LN=LN+1
"RTN","IBCNES1",117,0)
 S MODLST=""
"RTN","IBCNES1",118,0)
 F FCZ=1.03:.01:1.06 S PM=$G(CMPI(IBVF,IBVIENS,FCZ,"E")) I PM'="" S MODLST=$S(MODLST="":PM,1:(MODLST_", "_PM))
"RTN","IBCNES1",119,0)
 D SET(LN,COL1,"Procedure Modifier(s)",MODLST)
"RTN","IBCNES1",120,0)
 ;
"RTN","IBCNES1",121,0)
 ; now loop through and display all of the additional info (POS and DX)
"RTN","IBCNES1",122,0)
 S ZF=2.3229
"RTN","IBCNES1",123,0)
 I IBVF=365.02 S ZF=365.29   ; additional info subfile#
"RTN","IBCNES1",124,0)
 ;
"RTN","IBCNES1",125,0)
 ; if no additional info (POS and DX), then display the prompts here once
"RTN","IBCNES1",126,0)
 I '$D(CMPI(ZF)) D
"RTN","IBCNES1",127,0)
 . S LN=LN+1
"RTN","IBCNES1",128,0)
 . D SET(LN,COL1,"DX/Facility Qual","")
"RTN","IBCNES1",129,0)
 . D SET(.LN,COL2,"DX/Facility","")
"RTN","IBCNES1",130,0)
 . S LN=LN+1
"RTN","IBCNES1",131,0)
 . D SET(LN,COL1,"Nature of Injury Code","")
"RTN","IBCNES1",132,0)
 . D SET(.LN,COL2,"Injury Category","")
"RTN","IBCNES1",133,0)
 . S LN=LN+1
"RTN","IBCNES1",134,0)
 . D SET(LN,COL1,"Nature of Injury Description","")
"RTN","IBCNES1",135,0)
 . Q
"RTN","IBCNES1",136,0)
 ;
"RTN","IBCNES1",137,0)
 S ZIEN="" F  S ZIEN=$O(CMPI(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",138,0)
 . ;
"RTN","IBCNES1",139,0)
 . ; check to see if we have a valid POS pointer
"RTN","IBCNES1",140,0)
 . S POS=+$G(CMPI(ZF,ZIEN,.02,"I")),POSD=""
"RTN","IBCNES1",141,0)
 . I POS S POSD=$P($G(^IBE(353.1,POS,0)),U,2)
"RTN","IBCNES1",142,0)
 . I POSD'="" D
"RTN","IBCNES1",143,0)
 .. S POSD=$$TITLE^XLFSTR(POSD)
"RTN","IBCNES1",144,0)
 .. S LN=LN+1
"RTN","IBCNES1",145,0)
 .. D SET(LN,COL1,"DX/Facility Qual","POS")
"RTN","IBCNES1",146,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.02,"E"))_" "_POSD)
"RTN","IBCNES1",147,0)
 .. Q
"RTN","IBCNES1",148,0)
 . ;
"RTN","IBCNES1",149,0)
 . ; now check for a DX
"RTN","IBCNES1",150,0)
 . S DX=+$G(CMPI(ZF,ZIEN,.03,"I")),DXD=""
"RTN","IBCNES1",151,0)
 . I DX S DXD=$P($$ICD9^IBACSV(DX),U,3)
"RTN","IBCNES1",152,0)
 . I DXD'="" D
"RTN","IBCNES1",153,0)
 .. S DXD=$$TITLE^XLFSTR(DXD)
"RTN","IBCNES1",154,0)
 .. S LN=LN+1
"RTN","IBCNES1",155,0)
 .. D SET(LN,COL1,"DX/Facility Qual","DX")
"RTN","IBCNES1",156,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.03,"E"))_" "_DXD)
"RTN","IBCNES1",157,0)
 .. Q
"RTN","IBCNES1",158,0)
 . ;
"RTN","IBCNES1",159,0)
 . ; nature of injury code
"RTN","IBCNES1",160,0)
 . S LN=LN+1
"RTN","IBCNES1",161,0)
 . D SET(LN,COL1,"Nature of Injury Code",$G(CMPI(ZF,ZIEN,.05,"E")))
"RTN","IBCNES1",162,0)
 . D SET(.LN,COL2,"Injury Category",$G(CMPI(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",163,0)
 . S LN=LN+1
"RTN","IBCNES1",164,0)
 . D SET(LN,COL1,"Nature of Injury Description",$G(CMPI(ZF,ZIEN,.07,"E")))
"RTN","IBCNES1",165,0)
 . Q
"RTN","IBCNES1",166,0)
 ;
"RTN","IBCNES1",167,0)
 S LN=LN+1
"RTN","IBCNES1",168,0)
 D SET(LN)
"RTN","IBCNES1",169,0)
 ;
"RTN","IBCNES1",170,0)
CMPIX ;
"RTN","IBCNES1",171,0)
 Q
"RTN","IBCNES1",172,0)
 ;
"RTN","IBCNES1",173,0)
HCSD(IBVF,IBVIENS,IBVV,IBVSUB) ; Healthcare Services Delivery multiple display
"RTN","IBCNES1",174,0)
 ;
"RTN","IBCNES1",175,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",176,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",177,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",178,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",179,0)
 ;
"RTN","IBCNES1",180,0)
 N HCSD,HCSDERR,DSP,LN,ZF,HCNT,ZIEN,HCTOT,COL1,COL2
"RTN","IBCNES1",181,0)
 D GETS^DIQ(IBVF,IBVIENS,"7*","IEN","HCSD","HCSDERR")
"RTN","IBCNES1",182,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",183,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",184,0)
 ;
"RTN","IBCNES1",185,0)
 ; loop through and count the # of hcsd multiples
"RTN","IBCNES1",186,0)
 S ZF=2.3227,HCNT=0
"RTN","IBCNES1",187,0)
 I IBVF=365.02 S ZF=365.27   ; healthcare services delivery subfile#
"RTN","IBCNES1",188,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  S HCNT=HCNT+1
"RTN","IBCNES1",189,0)
 S HCTOT=HCNT
"RTN","IBCNES1",190,0)
 ;
"RTN","IBCNES1",191,0)
 I 'HCTOT G HCSDX
"RTN","IBCNES1",192,0)
 ;
"RTN","IBCNES1",193,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",194,0)
 ;
"RTN","IBCNES1",195,0)
 ; loop again to display
"RTN","IBCNES1",196,0)
 S HCNT=0
"RTN","IBCNES1",197,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",198,0)
 . S HCNT=HCNT+1
"RTN","IBCNES1",199,0)
 . ;
"RTN","IBCNES1",200,0)
 . S LN=LN+1
"RTN","IBCNES1",201,0)
 . I HCTOT>1 D SET(LN,1,"Health Care Service Delivery ("_HCNT_" of "_HCTOT_")",,IBVV)
"RTN","IBCNES1",202,0)
 . I HCTOT'>1 D SET(LN,1,"Health Care Service Delivery",,IBVV)
"RTN","IBCNES1",203,0)
 . ;
"RTN","IBCNES1",204,0)
 . S LN=LN+1
"RTN","IBCNES1",205,0)
 . D SET(LN,COL1,"Quantity Qualifier",$P($G(^IBE(365.016,+$G(HCSD(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",206,0)
 . D SET(.LN,COL2,"Benefit Quantity",$G(HCSD(ZF,ZIEN,.02,"E")))
"RTN","IBCNES1",207,0)
 . ;
"RTN","IBCNES1",208,0)
 . S LN=LN+1
"RTN","IBCNES1",209,0)
  .D SET(LN,COL1,"Unit/Basis for Measurement",$P($G(^IBE(365.029,+$G(HCSD(ZF,ZIEN,.05,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",210,0)
 . D SET(.LN,COL2,"Sampling Frequency",$G(HCSD(ZF,ZIEN,.04,"E")))
"RTN","IBCNES1",211,0)
 . ;
"RTN","IBCNES1",212,0)
 . S LN=LN+1
"RTN","IBCNES1",213,0)
 . D SET(LN,COL1,"Period Count Qual",$P($G(^IBE(365.015,+$G(HCSD(ZF,ZIEN,.07,"I")),0)),U,2))
"RTN","IBCNES1",214,0)
 . D SET(.LN,COL2,"Period Count",$G(HCSD(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",215,0)
 . ;
"RTN","IBCNES1",216,0)
 . S LN=LN+1
"RTN","IBCNES1",217,0)
 . D SET(LN,COL1,"Delivery Freq. Code",$P($G(^IBE(365.025,+$G(HCSD(ZF,ZIEN,.08,"I")),0)),U,2))
"RTN","IBCNES1",218,0)
 . ;
"RTN","IBCNES1",219,0)
 . S LN=LN+1
"RTN","IBCNES1",220,0)
 . D SET(LN,COL1,"Delivery Pattern Time Code",$P($G(^IBE(365.036,+$G(HCSD(ZF,ZIEN,.09,"I")),0)),U,2)) ;IB*2*497
"RTN","IBCNES1",221,0)
 . ;
"RTN","IBCNES1",222,0)
 . S LN=LN+1
"RTN","IBCNES1",223,0)
 . D SET(LN)
"RTN","IBCNES1",224,0)
 . Q
"RTN","IBCNES1",225,0)
 ;
"RTN","IBCNES1",226,0)
HCSDX ;
"RTN","IBCNES1",227,0)
 Q
"RTN","IBCNES1",228,0)
 ;
"RTN","IBCNES1",229,0)
NTE(IBVF,IBVIENS,IBVV,IBVSUB) ; Notes display
"RTN","IBCNES1",230,0)
 ;
"RTN","IBCNES1",231,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",232,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",233,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",234,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",235,0)
 ;
"RTN","IBCNES1",236,0)
 N COL,DSP,LN,NTED,NTEDERR,ZIEN
"RTN","IBCNES1",237,0)
 D GETS^DIQ(IBVF,IBVIENS,2,"N","NTED","NTEDERR")
"RTN","IBCNES1",238,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",239,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",240,0)
 I '$D(NTED) G NTEX
"RTN","IBCNES1",241,0)
 S COL=2
"RTN","IBCNES1",242,0)
 S LN=LN+1 D SET(LN,1,"Notes and Comments",,IBVV)
"RTN","IBCNES1",243,0)
 S ZIEN=0 F  S ZIEN=$O(NTED(IBVF,IBVIENS,2,ZIEN)) Q:'ZIEN  S LN=LN+1 D SET(LN,COL,$G(NTED(IBVF,IBVIENS,2,ZIEN)))
"RTN","IBCNES1",244,0)
 S LN=LN+1
"RTN","IBCNES1",245,0)
 D SET(LN)
"RTN","IBCNES1",246,0)
 ;
"RTN","IBCNES1",247,0)
NTEX ;
"RTN","IBCNES1",248,0)
 Q
"RTN","IBCNES1",249,0)
 ;
"RTN","IBCNES1",250,0)
BRE(IBVF,IBVIENS,IBVV,IBVSUB) ; Benefit Related Entity data extract/display
"RTN","IBCNES1",251,0)
 ;
"RTN","IBCNES1",252,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",253,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",254,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",255,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",256,0)
 ;
"RTN","IBCNES1",257,0)
 N BRE,BREERR,DSP,LN,ADDR,ADDR1,ADDR2,CITY,ST,ZIP,ZF,ZIEN,COL1,COL2
"RTN","IBCNES1",258,0)
 D GETS^DIQ(IBVF,IBVIENS,"3.01:5.03;6*","IEN","BRE","BREERR")
"RTN","IBCNES1",259,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",260,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",261,0)
 ;
"RTN","IBCNES1",262,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",263,0)
 ;
"RTN","IBCNES1",264,0)
 S LN=LN+1
"RTN","IBCNES1",265,0)
 I '$D(BRE) G BREX
"RTN","IBCNES1",266,0)
 D SET(LN,1,"Benefit Related Entity",,IBVV)
"RTN","IBCNES1",267,0)
 ;
"RTN","IBCNES1",268,0)
 S LN=LN+1
"RTN","IBCNES1",269,0)
 D SET(LN,COL1,"Entity ID Code",$P($G(^IBE(365.022,+$G(BRE(IBVF,IBVIENS,3.01,"I")),0)),U,2))
"RTN","IBCNES1",270,0)
 D SET(.LN,COL2,"Entity Type Qual",$P($G(^IBE(365.043,+$G(BRE(IBVF,IBVIENS,3.02,"I")),0)),U,2))  ; IB*2*497
"RTN","IBCNES1",271,0)
 ;
"RTN","IBCNES1",272,0)
 S LN=LN+1
"RTN","IBCNES1",273,0)
 D SET(LN,COL1,"Entity ID Name",$G(BRE(IBVF,IBVIENS,3.03,"E")))
"RTN","IBCNES1",274,0)
 ;
"RTN","IBCNES1",275,0)
 S LN=LN+1
"RTN","IBCNES1",276,0)
 D SET(LN,COL1,"ID Qualifier",$P($G(^IBE(365.023,+$G(BRE(IBVF,IBVIENS,3.05,"I")),0)),U,2))
"RTN","IBCNES1",277,0)
 D SET(.LN,COL2,"Entity ID Number",$G(BRE(IBVF,IBVIENS,3.04,"E")))
"RTN","IBCNES1",278,0)
 ;
"RTN","IBCNES1",279,0)
 S LN=LN+1  ;IB*2*497
"RTN","IBCNES1",280,0)
 D SET(LN,COL1,"Entity Relationship",$P($G(^IBE(365.031,+$G(BRE(IBVF,IBVIENS,3.06,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",281,0)
 ;
"RTN","IBCNES1",282,0)
 S ADDR1=$G(BRE(IBVF,IBVIENS,4.01,"E"))
"RTN","IBCNES1",283,0)
 S ADDR2=$G(BRE(IBVF,IBVIENS,4.02,"E"))
"RTN","IBCNES1",284,0)
 S CITY=$G(BRE(IBVF,IBVIENS,4.03,"E"))
"RTN","IBCNES1",285,0)
 S ST=+$G(BRE(IBVF,IBVIENS,4.04,"I"))
"RTN","IBCNES1",286,0)
 S ST=$S(ST:$P($G(^DIC(5,ST,0)),U,2),1:"")
"RTN","IBCNES1",287,0)
 S ZIP=$G(BRE(IBVF,IBVIENS,4.05,"E"))
"RTN","IBCNES1",288,0)
 S ADDR=ADDR1
"RTN","IBCNES1",289,0)
 I ADDR2'="" S ADDR=ADDR_" "_ADDR2
"RTN","IBCNES1",290,0)
 ;I CITY'="" S ADDR=ADDR_", "_CITY  
"RTN","IBCNES1",291,0)
 ;I ST'="" S ADDR=ADDR_","_ST
"RTN","IBCNES1",292,0)
 ;I ZIP'="" S ADDR=ADDR_" "_ZIP
"RTN","IBCNES1",293,0)
 S ADDR=ADDR_" "_CITY_" "_ST_" "_ZIP   ;IB*2*497  prevent orphan commas being displayed
"RTN","IBCNES1",294,0)
 S LN=LN+1
"RTN","IBCNES1",295,0)
 D SET(LN,COL1,"Entity Address",ADDR)
"RTN","IBCNES1",296,0)
 ;
"RTN","IBCNES1",297,0)
 S LN=LN+1
"RTN","IBCNES1",298,0)
 D SET(LN,COL1,"Country Code",$G(BRE(IBVF,IBVIENS,4.06,"E")))
"RTN","IBCNES1",299,0)
 D SET(.LN,COL2,"Country Subdivision",$G(BRE(IBVF,IBVIENS,4.09,"E")))
"RTN","IBCNES1",300,0)
 ;
"RTN","IBCNES1",301,0)
 S LN=LN+1
"RTN","IBCNES1",302,0)
 D SET(LN,COL1,"Location Qual",$P($G(^IBE(365.034,+$G(BRE(IBVF,IBVIENS,4.08,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",303,0)
 D SET(.LN,COL2,"DOD Health Service Region Code",$G(BRE(IBVF,IBVIENS,4.07,"E")))
"RTN","IBCNES1",304,0)
 ;
"RTN","IBCNES1",305,0)
 ; now loop through and display all of the benefit related entity contact information
"RTN","IBCNES1",306,0)
 S ZF=2.3226
"RTN","IBCNES1",307,0)
 I IBVF=365.02 S ZF=365.26       ; contact information subfile#
"RTN","IBCNES1",308,0)
 I '$D(BRE(ZF)) S BRE(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",309,0)
 S ZIEN="" F  S ZIEN=$O(BRE(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",310,0)
 . N IBDATA,IBLABEL,IBLEN
"RTN","IBCNES1",311,0)
 . S LN=LN+1
"RTN","IBCNES1",312,0)
 . D SET(LN,COL1,"Comm. Number Qual",$P($G(^IBE(365.021,+$G(BRE(ZF,ZIEN,.04,"I")),0)),U,2))
"RTN","IBCNES1",313,0)
 . S IBDATA=$G(BRE(ZF,ZIEN,1,"E")),IBLABEL="Entity Comm. Number"
"RTN","IBCNES1",314,0)
 . I $L(IBLABEL)+2+$L(IBDATA)<40 D  Q
"RTN","IBCNES1",315,0)
 .. D SET(.LN,COL2,IBLABEL,IBDATA)
"RTN","IBCNES1",316,0)
 . I $L(IBLABEL)+2+$L(IBDATA)<80 D  Q
"RTN","IBCNES1",317,0)
 .. S LN=LN+1
"RTN","IBCNES1",318,0)
 .. D SET(LN,COL1,IBLABEL,IBDATA)
"RTN","IBCNES1",319,0)
 . F  D  I '$L(IBDATA) Q
"RTN","IBCNES1",320,0)
 .. S IBLEN=80-$L(IBLABEL),LN=LN+1
"RTN","IBCNES1",321,0)
 .. D SET(LN,COL1,IBLABEL,$E(IBDATA,1,IBLEN))
"RTN","IBCNES1",322,0)
 .. S IBDATA=$E(IBDATA,IBLEN+1,$L(IBDATA)),IBLABEL=""
"RTN","IBCNES1",323,0)
 . Q
"RTN","IBCNES1",324,0)
 ;
"RTN","IBCNES1",325,0)
 S LN=LN+1
"RTN","IBCNES1",326,0)
 D SET(LN)
"RTN","IBCNES1",327,0)
 ;
"RTN","IBCNES1",328,0)
 S LN=LN+1
"RTN","IBCNES1",329,0)
 D SET(LN,1,"Benefit Related Provider Information",,IBVV)
"RTN","IBCNES1",330,0)
 ;
"RTN","IBCNES1",331,0)
 S LN=LN+1
"RTN","IBCNES1",332,0)
 D SET(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(BRE(IBVF,IBVIENS,5.01,"I")),0)),U,2))
"RTN","IBCNES1",333,0)
 D SET(.LN,COL2,"Provider ID Qual",$P($G(^IBE(365.028,+$G(BRE(IBVF,IBVIENS,5.03,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",334,0)
 ;
"RTN","IBCNES1",335,0)
 S LN=LN+1
"RTN","IBCNES1",336,0)
 D SET(LN,COL1,"Provider ID",$G(BRE(IBVF,IBVIENS,5.02,"E")))
"RTN","IBCNES1",337,0)
 ;
"RTN","IBCNES1",338,0)
 S LN=LN+1
"RTN","IBCNES1",339,0)
 D SET(LN)
"RTN","IBCNES1",340,0)
BREX ;
"RTN","IBCNES1",341,0)
 Q
"RTN","IBCNES1",342,0)
 ;
"RTN","IBCNES1",343,0)
SET(LN,COL,LABEL,DATA,IBVV) ; set data into display scratch global
"RTN","IBCNES1",344,0)
 ;
"RTN","IBCNES1",345,0)
 ; LN must be passed by reference when COL>20 because of the special variable IBVEBCOL flag to produce a single column
"RTN","IBCNES1",346,0)
 ;
"RTN","IBCNES1",347,0)
 ; IBVV - video attributes flag
"RTN","IBCNES1",348,0)
 ;        1 = reverse video
"RTN","IBCNES1",349,0)
 ;        2 = bold
"RTN","IBCNES1",350,0)
 ;        3 = underline
"RTN","IBCNES1",351,0)
 ;
"RTN","IBCNES1",352,0)
 N STR,D1
"RTN","IBCNES1",353,0)
 S COL=$G(COL,1)
"RTN","IBCNES1",354,0)
 I $G(IBVEBCOL),COL>20 S LN=LN+1,COL=2   ; single column flag
"RTN","IBCNES1",355,0)
 I $G(LABEL)'="",COL>1 S LABEL=" "_LABEL,COL=COL-1
"RTN","IBCNES1",356,0)
 S STR=$G(@DSP@(LN,0))    ; get the current string
"RTN","IBCNES1",357,0)
 S D1=""
"RTN","IBCNES1",358,0)
 I $G(LABEL)'="" S D1=LABEL
"RTN","IBCNES1",359,0)
 I $D(DATA) S D1=D1_": "_$G(DATA)   ; build the new display
"RTN","IBCNES1",360,0)
 ;
"RTN","IBCNES1",361,0)
 S STR=$$SETSTR^VALM1(D1,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES1",362,0)
 ;
"RTN","IBCNES1",363,0)
 S @DSP@(LN,0)=STR    ; set the new data back into the scratch global
"RTN","IBCNES1",364,0)
 ;
"RTN","IBCNES1",365,0)
 ; Add the video attributes if requested
"RTN","IBCNES1",366,0)
 I $G(IBVV) D
"RTN","IBCNES1",367,0)
 . I IBVV=1 D CNTRL^VALM10(LN,COL,$L(LABEL),IORVON,IORVOFF)  ; reverse video
"RTN","IBCNES1",368,0)
 . I IBVV=2 D CNTRL^VALM10(LN,COL,$L(LABEL),IOINHI,IOINORM)  ; bold
"RTN","IBCNES1",369,0)
 . I IBVV=3 D CNTRL^VALM10(LN,COL,$L(LABEL),IOUON,IOUOFF)    ; underline
"RTN","IBCNES1",370,0)
 . Q
"RTN","IBCNES1",371,0)
 ;
"RTN","IBCNES1",372,0)
SETX ;
"RTN","IBCNES1",373,0)
 Q
"RTN","IBCNES1",374,0)
 ;
"RTN","IBCNES1",375,0)
DATE(Z) ; convert date in Z in format CCYYMMDD to MM/DD/CCYY format for display
"RTN","IBCNES1",376,0)
 I Z?8N S Z=$E(Z,5,6)_"/"_$E(Z,7,8)_"/"_$E(Z,1,4)
"RTN","IBCNES1",377,0)
 Q Z
"RTN","IBCNES1",378,0)
 ;
"RTN","IBCNES3")
0^45^B27490264
"RTN","IBCNES3",1,0)
IBCNES3 ;DALOI/KML/JNM - eIV elig/Benefit screen, con't ;01-05-2016
"RTN","IBCNES3",2,0)
 ;;2.0;INTEGRATED BILLING;**497,549**;21-MAR-94;Build 54
"RTN","IBCNES3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNES3",4,0)
 ;
"RTN","IBCNES3",5,0)
 Q
"RTN","IBCNES3",6,0)
 ; called by IBCNES
"RTN","IBCNES3",7,0)
RPDM(IBVF,IBVDA,IBVV,IBVSUB) ; Eligibility/Group Information procedure
"RTN","IBCNES3",8,0)
 ; --- Called by IBCNES
"RTN","IBCNES3",9,0)
 ;          input
"RTN","IBCNES3",10,0)
 ;              IBVF = file file# 2.322 or 365.02
"RTN","IBCNES3",11,0)
 ;              IBVDA - ien of 365 OR 2.312
"RTN","IBCNES3",12,0)
 S IBVV=+$G(IBVV)
"RTN","IBCNES3",13,0)
 N IBL,IBY,IBLINE,LN,DSP,COL1,COL2,GLO
"RTN","IBCNES3",14,0)
 ;^DPT(D0,.312,D1,9,0)
"RTN","IBCNES3",15,0)
 I IBVF=2.312 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA)))   ; pt. insurance
"RTN","IBCNES3",16,0)
 I IBVF=365 S GLO=$NA(^IBCN(365,+$G(IBVDA)))                ; response file
"RTN","IBCNES3",17,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES3",18,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES3",19,0)
 S COL1=2,COL2=47
"RTN","IBCNES3",20,0)
 ;
"RTN","IBCNES3",21,0)
 S LN=LN+1
"RTN","IBCNES3",22,0)
 D SET^IBCNES1(LN,1,"Eligibility/Group Plan Information",,IBVV)
"RTN","IBCNES3",23,0)
 S LN=LN+1
"RTN","IBCNES3",24,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",25,0)
 D REF(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",26,0)
 D PROV(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",27,0)
 D DIAG(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",28,0)
 D MIL(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",29,0)
 Q
"RTN","IBCNES3",30,0)
 ;
"RTN","IBCNES3",31,0)
REF(GLO,IBVF,IBVDA) ;  policy level reference ID display
"RTN","IBCNES3",32,0)
 ; 
"RTN","IBCNES3",33,0)
 ;    input - 
"RTN","IBCNES3",34,0)
 N REF,SIEN,IENS,REFLST
"RTN","IBCNES3",35,0)
 S IBVF=$S(IBVF=365:365.09,1:2.3129)
"RTN","IBCNES3",36,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(9,SIEN)) Q:'SIEN  S REFLST(SIEN)=""
"RTN","IBCNES3",37,0)
 I '$D(REFLST) S REFLST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",38,0)
 S SIEN=0 F  S SIEN=$O(REFLST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",39,0)
 . S IENS=$S(IBVF=365.09:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",40,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","REF")
"RTN","IBCNES3",41,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID Qualifier",$P($G(^IBE(365.028,+$G(REF(IBVF,IENS,.03,"I")),0)),U,2))
"RTN","IBCNES3",42,0)
 . D SET^IBCNES1(.LN,COL2,"Reference ID",$G(REF(IBVF,IENS,.02,"E")))
"RTN","IBCNES3",43,0)
 . S LN=LN+1
"RTN","IBCNES3",44,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID description",$G(REF(IBVF,IENS,.04,"E")))
"RTN","IBCNES3",45,0)
 . S LN=LN+1
"RTN","IBCNES3",46,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",47,0)
 S LN=LN+1
"RTN","IBCNES3",48,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",49,0)
 Q
"RTN","IBCNES3",50,0)
 ;
"RTN","IBCNES3",51,0)
PROV(GLO,IBVF,IBVDA) ; GROUP level provider info
"RTN","IBCNES3",52,0)
 ;          input
"RTN","IBCNES3",53,0)
 ;              RIEN - ien of 365
"RTN","IBCNES3",54,0)
 N PVLIST,SIEN,IENS,PV
"RTN","IBCNES3",55,0)
 S IBVF=$S(IBVF=365:365.04,1:2.332)
"RTN","IBCNES3",56,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(10,SIEN)) Q:'SIEN  S PVLIST(SIEN)=""
"RTN","IBCNES3",57,0)
 I '$D(PVLIST) S PVLIST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",58,0)
 S SIEN=0 F  S SIEN=$O(PVLIST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",59,0)
 . S IENS=$S(IBVF=365.04:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",60,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","PV")
"RTN","IBCNES3",61,0)
 . D SET^IBCNES1(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(PV(IBVF,IENS,.02,"I")),0)),U,2))
"RTN","IBCNES3",62,0)
 . S LN=LN+1
"RTN","IBCNES3",63,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID",$G(PV(IBVF,IENS,.03,"E")))
"RTN","IBCNES3",64,0)
 . S LN=LN+1
"RTN","IBCNES3",65,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",66,0)
 S LN=LN+1
"RTN","IBCNES3",67,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",68,0)
 Q
"RTN","IBCNES3",69,0)
 ;
"RTN","IBCNES3",70,0)
DIAG(GLO,IBVF,IBVDA) ; DIAGNOSIS INFO
"RTN","IBCNES3",71,0)
 N IENS,SIEN,HDLIST,DIAG,ICDSTR,PRIMSEC
"RTN","IBCNES3",72,0)
 S IBVF=$S(IBVF=365:365.01,1:2.31211)
"RTN","IBCNES3",73,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(11,SIEN)) Q:'SIEN  S HDLIST(SIEN)=""
"RTN","IBCNES3",74,0)
 I '$D(HDLIST) S HDLIST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",75,0)
 S SIEN=0 F  S SIEN=$O(HDLIST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",76,0)
 . S IENS=$S(IBVF=365.01:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",77,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","DIAG")
"RTN","IBCNES3",78,0)
 . S ICDSTR=$G(^ICD9(+$G(DIAG(IBVF,IENS,.02,"I")),0))  ; IA# 5388 (Supported agreement)
"RTN","IBCNES3",79,0)
 . S PRIMSEC=$G(DIAG(IBVF,IENS,.04,"I"))
"RTN","IBCNES3",80,0)
 . D SET^IBCNES1(LN,COL1,$S(PRIMSEC="P":"Primary ",PRIMSEC="":"Primary ",1:"Secondary ")_"Diagnosis Code",$P(ICDSTR,U)_" "_$P(ICDSTR,U,3))
"RTN","IBCNES3",81,0)
 . S LN=LN+1
"RTN","IBCNES3",82,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",83,0)
 S LN=LN+1
"RTN","IBCNES3",84,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",85,0)
 Q
"RTN","IBCNES3",86,0)
 ;
"RTN","IBCNES3",87,0)
MIL(GLO,IBVF,IBVDA) ; military personnel information display
"RTN","IBCNES3",88,0)
 ; 
"RTN","IBCNES3",89,0)
 ;    input - 
"RTN","IBCNES3",90,0)
 N IENS
"RTN","IBCNES3",91,0)
 S IENS=IBVDA_","
"RTN","IBCNES3",92,0)
 S IENS=$S(IBVF=365:IBVDA_",",1:IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",93,0)
 S IBVF=$S(IBVF=365:365,1:2.312)
"RTN","IBCNES3",94,0)
 D GETS^DIQ(IBVF,IENS,"12.01:12.07","IEN","MIL")
"RTN","IBCNES3",95,0)
 D SET^IBCNES1(LN,COL1,"Military Info Status",$P($G(^IBE(365.039,+$G(MIL(IBVF,IENS,12.01,"I")),0)),U,2))
"RTN","IBCNES3",96,0)
 D SET^IBCNES1(.LN,COL2,"Employment Status",$P($G(^IBE(365.046,+$G(MIL(IBVF,IENS,12.02,"I")),0)),U,2))
"RTN","IBCNES3",97,0)
 S LN=LN+1
"RTN","IBCNES3",98,0)
 D SET^IBCNES1(LN,COL1,"Government Affiliation",$P($G(^IBE(365.041,+$G(MIL(IBVF,IENS,12.03,"I")),0)),U,2))
"RTN","IBCNES3",99,0)
 D SET^IBCNES1(.LN,COL2,"Date Time Period",$$DFMT(.MIL,IBVF,IENS))
"RTN","IBCNES3",100,0)
 S LN=LN+1
"RTN","IBCNES3",101,0)
 D SET^IBCNES1(LN,COL1,"Service Rank",$P($G(^IBE(365.042,+$G(MIL(IBVF,IENS,12.05,"I")),0)),U,2))
"RTN","IBCNES3",102,0)
 S LN=LN+1
"RTN","IBCNES3",103,0)
 D SET^IBCNES1(LN,COL1,"Desc",$G(MIL(IBVF,IENS,12.04,"E")))
"RTN","IBCNES3",104,0)
 S LN=LN+1
"RTN","IBCNES3",105,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",106,0)
 Q
"RTN","IBCNES3",107,0)
 ;
"RTN","IBCNES3",108,0)
DFMT(MIL,IBVF,IENS) ;  return proper date format string
"RTN","IBCNES3",109,0)
 ; 
"RTN","IBCNES3",110,0)
 ;    input - MIL = data array containing the data extracted from the military information fields (365, 12.01-12.07)
"RTN","IBCNES3",111,0)
 ;            IENS = ien of 365 entry or 2.312 entry
"RTN","IBCNES3",112,0)
 ;    output - RES = formatted date string
"RTN","IBCNES3",113,0)
 N TODT,FROMDT,RES
"RTN","IBCNES3",114,0)
 ; date range  
"RTN","IBCNES3",115,0)
 I $G(MIL(IBVF,IENS,12.06,"E"))="RD8" S FROMDT=$P($G(MIL(IBVF,IENS,12.07,"E")),"-"),TODT=$P($G(MIL(IBVF,IENS,12.07,"E")),"-",2),RES=$$FMTE^XLFDT($$HL7TFM^XLFDT(FROMDT),2)_" - "_$$FMTE^XLFDT($$HL7TFM^XLFDT(TODT),2)
"RTN","IBCNES3",116,0)
 E  S RES=$$FMTE^XLFDT($$HL7TFM^XLFDT($G(MIL(IBVF,IENS,12.07,"E"))),2)  ; single date
"RTN","IBCNES3",117,0)
 Q RES
"RTN","IBCNES3",118,0)
 ;
"RTN","IBCNES3",119,0)
SET(LN,DATA,COL) ;set display data in scratch global
"RTN","IBCNES3",120,0)
 N STR
"RTN","IBCNES3",121,0)
 S STR=""
"RTN","IBCNES3",122,0)
 S STR=$$SETSTR^VALM1(DATA,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES3",123,0)
 S @DSP@(LN,0)=STR ; set the new data back into the scratch global
"RTN","IBCNES3",124,0)
 Q
"RTN","IBCNES3",125,0)
 ;
"RTN","IBCNES4")
0^58^B22279537
"RTN","IBCNES4",1,0)
IBCNES4 ;ALB/JNM - eIV elig/Benefit screen ;06/08/2016
"RTN","IBCNES4",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNES4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNES4",4,0)
 ;
"RTN","IBCNES4",5,0)
EN ; entry point for IBCNB ELIG PAYER SUMMARY action protocol
"RTN","IBCNES4",6,0)
 I +IBVIENS,+IBVF D
"RTN","IBCNES4",7,0)
 . D EN^VALM("IBCNB INSURANCE BUFFER PAYER")
"RTN","IBCNES4",8,0)
ENX ;
"RTN","IBCNES4",9,0)
 S VALMBCK="R"
"RTN","IBCNES4",10,0)
 Q
"RTN","IBCNES4",11,0)
 ;
"RTN","IBCNES4",12,0)
HDR ; -- header code
"RTN","IBCNES4",13,0)
 D HDR^IBCNES
"RTN","IBCNES4",14,0)
 Q
"RTN","IBCNES4",15,0)
 ;
"RTN","IBCNES4",16,0)
INIT0(IBVF,IBVIENS,IBSUBID,IBNOLBL) ; -- Used by IBCNBCD to fetch data
"RTN","IBCNES4",17,0)
 D INIT(IBSUBID)
"RTN","IBCNES4",18,0)
 Q
"RTN","IBCNES4",19,0)
 ;
"RTN","IBCNES4",20,0)
INIT(IBSUBID) ; -- init variables and list array
"RTN","IBCNES4",21,0)
 N IBVDA,LN,COL,COL1,COL2,VALMAR,IBVF2,IBVIENS2
"RTN","IBCNES4",22,0)
 S IBVF2=IBVF,IBVIENS2=IBVIENS
"RTN","IBCNES4",23,0)
 I $G(IBSUBID)="" S IBSUBID="IBCNES PAY SUM"
"RTN","IBCNES4",24,0)
 S VALMAR=$NA(^TMP(IBSUBID,$J))
"RTN","IBCNES4",25,0)
 K @VALMAR ; clear out the existing data, if any
"RTN","IBCNES4",26,0)
 S LN=0,COL1=2,COL2=47
"RTN","IBCNES4",27,0)
 I IBVF=2.322 D
"RTN","IBCNES4",28,0)
 . N IEN
"RTN","IBCNES4",29,0)
 . S IEN=$$GET1^DIQ(2.312,IBVIENS,8.03,"I")
"RTN","IBCNES4",30,0)
 . I +$G(IEN) S IBVF=365.02,IBVIENS=IEN_","
"RTN","IBCNES4",31,0)
 I IBVF=2.322 G NODATA
"RTN","IBCNES4",32,0)
 D DA^DILF(IBVIENS,.IBVDA)  ; build the IBVDA array for the iens
"RTN","IBCNES4",33,0)
 I '$D(IBVDA) G NODATA
"RTN","IBCNES4",34,0)
 D INIT2(365)
"RTN","IBCNES4",35,0)
 Q
"RTN","IBCNES4",36,0)
 ;
"RTN","IBCNES4",37,0)
INIT2(IBVF) ; allows changing IBVF just for this routine
"RTN","IBCNES4",38,0)
 N INIEN,X1,TEMP,NOLBL
"RTN","IBCNES4",39,0)
 S INIEN=IBVDA,NOLBL=$G(IBNOLBL),IBNOLBL=0
"RTN","IBCNES4",40,0)
 D SET1("Payer Summary - from Payer's Response",,1,1)
"RTN","IBCNES4",41,0)
 I $$GET1^DIQ(IBVF,INIEN,.07,"I")'>0 G WAITING ; If Response requested but not yet received
"RTN","IBCNES4",42,0)
 S IBNOLBL=NOLBL
"RTN","IBCNES4",43,0)
 D SET1("Subscriber",$$GET1^DIQ(IBVF,INIEN,13.01))
"RTN","IBCNES4",44,0)
 D SET1("Subscriber ID",$$GET1^DIQ(IBVF,INIEN,13.02))
"RTN","IBCNES4",45,0)
 D SET1("Subscriber DOB",$$FMTE^XLFDT($$GET1^DIQ(IBVF,INIEN,1.02)))
"RTN","IBCNES4",46,0)
 D SET1("Subscriber SSN",$$GET1^DIQ(IBVF,INIEN,1.03))
"RTN","IBCNES4",47,0)
 D SET2("Subscriber Sex",$$GET1^DIQ(IBVF,INIEN,1.04))
"RTN","IBCNES4",48,0)
 D SET1("Group Name",$$GET1^DIQ(IBVF,INIEN,14.01))
"RTN","IBCNES4",49,0)
 D SET1("Group ID",$$GET1^DIQ(IBVF,INIEN,14.02))
"RTN","IBCNES4",50,0)
 D SET1("Whose Insurance",$$GET1^DIQ(IBVF,INIEN,1.08))
"RTN","IBCNES4",51,0)
 I +$G(IBVEBCOL) S TEMP="Pt. Rel. to Subscriber"
"RTN","IBCNES4",52,0)
 E  S TEMP="Patient Relationship to Subscriber"
"RTN","IBCNES4",53,0)
 D SET1(TEMP,$$GET1^DIQ(IBVF,INIEN,1.09))
"RTN","IBCNES4",54,0)
 D SET1("Member ID",$$GET1^DIQ(IBVF,INIEN,1.18))
"RTN","IBCNES4",55,0)
 D SET1("COB",$$GET1^DIQ(IBVF,INIEN,1.13))
"RTN","IBCNES4",56,0)
 D SET1("Service Date",$$GET1^DIQ(IBVF,INIEN,1.1))
"RTN","IBCNES4",57,0)
 D SET2("Date of Death",$$GET1^DIQ(IBVF,INIEN,1.16))
"RTN","IBCNES4",58,0)
 D SET1("Effective Date",$$GET1^DIQ(IBVF,INIEN,1.11))
"RTN","IBCNES4",59,0)
 D SET2("Certification Date",$$GET1^DIQ(IBVF,INIEN,1.17))
"RTN","IBCNES4",60,0)
 D SET1("Expiration Date",$$GET1^DIQ(IBVF,INIEN,1.12))
"RTN","IBCNES4",61,0)
 D SET2("Payer Updated Policy",$$GET1^DIQ(IBVF,INIEN,1.19))
"RTN","IBCNES4",62,0)
 D SET1("Response Date",$$GET1^DIQ(IBVF,INIEN,.07))
"RTN","IBCNES4",63,0)
 D SET2("Trace #",$$GET1^DIQ(IBVF,INIEN,.09))
"RTN","IBCNES4",64,0)
 D SET1("Policy Number",$$GET1^DIQ(IBVF,INIEN,1.2))
"RTN","IBCNES4",65,0)
 D SET1()
"RTN","IBCNES4",66,0)
 S IBNOLBL=0
"RTN","IBCNES4",67,0)
 D SET1("Contact Information",,1,1)
"RTN","IBCNES4",68,0)
 S X1=0 F  S X1=$O(^IBCN(365,IBVDA,3,X1)) Q:X1'=+X1  D
"RTN","IBCNES4",69,0)
 . N DATA,STRTLINE,QFILE,QIEN
"RTN","IBCNES4",70,0)
 . S STRTLINE=LN
"RTN","IBCNES4",71,0)
 . S QFILE=365.03,QIEN=X1_","_IBVDA
"RTN","IBCNES4",72,0)
 . S DATA=$$GET1^DIQ(QFILE,QIEN,.01)
"RTN","IBCNES4",73,0)
 . I DATA'="" D SET1(DATA)
"RTN","IBCNES4",74,0)
 . D SET4($$GETQUAL(.02),$$GET1^DIQ(QFILE,QIEN,1))
"RTN","IBCNES4",75,0)
 . D SET4($$GETQUAL(.04),$$GET1^DIQ(QFILE,QIEN,2))
"RTN","IBCNES4",76,0)
 . D SET4($$GETQUAL(.06),$$GET1^DIQ(QFILE,QIEN,3))
"RTN","IBCNES4",77,0)
 . D:STRTLINE'=LN SET1()
"RTN","IBCNES4",78,0)
 D SET1()
"RTN","IBCNES4",79,0)
 G INITX
"RTN","IBCNES4",80,0)
 ;
"RTN","IBCNES4",81,0)
WAITING ;
"RTN","IBCNES4",82,0)
 D SET1()
"RTN","IBCNES4",83,0)
 D SET1("Awaiting Payer Response.")
"RTN","IBCNES4",84,0)
 G INITX
"RTN","IBCNES4",85,0)
 ; 
"RTN","IBCNES4",86,0)
NODATA ; display no data found
"RTN","IBCNES4",87,0)
 D SET1()
"RTN","IBCNES4",88,0)
 D SET1("No Payer Summary Data Found")
"RTN","IBCNES4",89,0)
 ;
"RTN","IBCNES4",90,0)
INITX ;
"RTN","IBCNES4",91,0)
 S IBVF=IBVF2,IBVIENS2=IBVIENS
"RTN","IBCNES4",92,0)
 S VALMCNT=LN
"RTN","IBCNES4",93,0)
 Q
"RTN","IBCNES4",94,0)
 ;
"RTN","IBCNES4",95,0)
GETQUAL(QREC) ; Return Communication Qualifier text
"RTN","IBCNES4",96,0)
 N IEN
"RTN","IBCNES4",97,0)
 S IEN=$$GET1^DIQ(QFILE,QIEN,QREC,"I")
"RTN","IBCNES4",98,0)
 Q $$GET1^DIQ(365.021,+$G(IEN),.02)
"RTN","IBCNES4",99,0)
 ;
"RTN","IBCNES4",100,0)
SET2(LABEL,DATA,IBVV,COLUMN) ; Update previous line at COL2
"RTN","IBCNES4",101,0)
 I +$G(IBVEBCOL) D SET1($G(LABEL),$G(DATA),$G(IBVV),$G(COLUMN)) Q
"RTN","IBCNES4",102,0)
 S COL=COL2
"RTN","IBCNES4",103,0)
 G SETSTART
"RTN","IBCNES4",104,0)
 ;
"RTN","IBCNES4",105,0)
SET4(LABEL,DATA) ; print on column 4 if data is not blank
"RTN","IBCNES4",106,0)
 I ($G(LABEL)'="")!($G(DATA)'="") D SET1(LABEL,DATA,,4)
"RTN","IBCNES4",107,0)
 Q
"RTN","IBCNES4",108,0)
 ;
"RTN","IBCNES4",109,0)
SET1(LABEL,DATA,IBVV,COLUMN) ; Set next line at COL1
"RTN","IBCNES4",110,0)
 ;
"RTN","IBCNES4",111,0)
 ; IBVV - video attributes flag
"RTN","IBCNES4",112,0)
 ;        1 = reverse video
"RTN","IBCNES4",113,0)
 ;        2 = bold
"RTN","IBCNES4",114,0)
 ;        3 = underline
"RTN","IBCNES4",115,0)
 ;
"RTN","IBCNES4",116,0)
 S LN=LN+1
"RTN","IBCNES4",117,0)
 S COL=COL1
"RTN","IBCNES4",118,0)
 ;
"RTN","IBCNES4",119,0)
SETSTART ;
"RTN","IBCNES4",120,0)
 N STR,D1
"RTN","IBCNES4",121,0)
 I $G(COLUMN)>0 S COL=COLUMN
"RTN","IBCNES4",122,0)
 I $G(LABEL)'="",COL>1 S LABEL=" "_LABEL,COL=COL-1
"RTN","IBCNES4",123,0)
 S STR=$G(@VALMAR@(LN,0))    ; get the current string
"RTN","IBCNES4",124,0)
 S D1=""
"RTN","IBCNES4",125,0)
 I $G(IBNOLBL) S D1=$G(DATA)
"RTN","IBCNES4",126,0)
 E  D 
"RTN","IBCNES4",127,0)
 . I $G(LABEL)'="" S D1=LABEL_": "
"RTN","IBCNES4",128,0)
 . I $G(DATA)'="" S D1=D1_$G(DATA)   ; build the new display
"RTN","IBCNES4",129,0)
 ;
"RTN","IBCNES4",130,0)
 S STR=$$SETSTR^VALM1(D1,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES4",131,0)
 ;
"RTN","IBCNES4",132,0)
 D SET^VALM10(LN,STR)
"RTN","IBCNES4",133,0)
 ;
"RTN","IBCNES4",134,0)
 ; Add the video attributes if requested
"RTN","IBCNES4",135,0)
 I $G(IBVV) D
"RTN","IBCNES4",136,0)
 . I IBVV=1 D CNTRL^VALM10(LN,COL,$L(LABEL),IORVON,IORVOFF)  ; reverse video
"RTN","IBCNES4",137,0)
 . I IBVV=2 D CNTRL^VALM10(LN,COL,$L(LABEL),IOINHI,IOINORM)  ; bold
"RTN","IBCNES4",138,0)
 . I IBVV=3 D CNTRL^VALM10(LN,COL,$L(LABEL),IOUON,IOUOFF)    ; underline
"RTN","IBCNES4",139,0)
 . Q
"RTN","IBCNES4",140,0)
 ;
"RTN","IBCNES4",141,0)
SETX ;
"RTN","IBCNES4",142,0)
 Q
"RTN","IBCNES4",143,0)
HELP ; -- help code
"RTN","IBCNES4",144,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNES4",145,0)
 Q
"RTN","IBCNES4",146,0)
 ;
"RTN","IBCNES4",147,0)
EXIT ; -- exit code
"RTN","IBCNES4",148,0)
 Q
"RTN","IBCNES4",149,0)
 ;
"RTN","IBCNES4",150,0)
EXPND ; -- expand code
"RTN","IBCNES4",151,0)
 Q
"RTN","IBCNES4",152,0)
 ;
"RTN","IBCNEUT7")
0^22^B72027534
"RTN","IBCNEUT7",1,0)
IBCNEUT7 ;DAOU/ALA - IIV MISC. UTILITIES ;14-OCT-2015
"RTN","IBCNEUT7",2,0)
 ;;2.0;INTEGRATED BILLING;**184,549**;21-MAR-94;Build 54
"RTN","IBCNEUT7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNEUT7",4,0)
 ;
"RTN","IBCNEUT7",5,0)
 ;**Program Description**
"RTN","IBCNEUT7",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT7",7,0)
 ;
"RTN","IBCNEUT7",8,0)
 Q
"RTN","IBCNEUT7",9,0)
 ;
"RTN","IBCNEUT7",10,0)
DEATH(DFN,DOD)   ;EP
"RTN","IBCNEUT7",11,0)
 ; IB*2.0*549 added method
"RTN","IBCNEUT7",12,0)
 ; Sets the INSURANCE EXPIRATION DATE (file 2.3121, field ) for all active
"RTN","IBCNEUT7",13,0)
 ; insurances of the selected patient to be the date of death +1
"RTN","IBCNEUT7",14,0)
 ; Input:   DFN     - IEN of the patient to term insurances for
"RTN","IBCNEUT7",15,0)
 ;          DOD     - Internal date of death (file 2, field .351) of the patient
"RTN","IBCNEUT7",16,0)
 N MTIME,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEUT7",17,0)
 S MTIME=$$NOW^XLFDT()                      ; Fileman date/time
"RTN","IBCNEUT7",18,0)
 S ZTDTH=$$FMTH^XLFDT(MTIME)                ; Convert to $H format
"RTN","IBCNEUT7",19,0)
 ;
"RTN","IBCNEUT7",20,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEUT7",21,0)
 S ZTRTN="DEATH2^IBCNEUT7"
"RTN","IBCNEUT7",22,0)
 S ZTDESC="eIV Auto Termination of Policies for deceased patients"
"RTN","IBCNEUT7",23,0)
 S ZTIO=""
"RTN","IBCNEUT7",24,0)
 S ZTSAVE("DFN")="",ZTSAVE("DOD")=""
"RTN","IBCNEUT7",25,0)
 D ^%ZTLOAD ; Call TaskManager
"RTN","IBCNEUT7",26,0)
 Q
"RTN","IBCNEUT7",27,0)
 ;
"RTN","IBCNEUT7",28,0)
DEATH2 ;EP from TaskMan
"RTN","IBCNEUT7",29,0)
 ; IB*2.0*549 added method
"RTN","IBCNEUT7",30,0)
 ; Sets the INSURANCE EXPIRATION DATE (file 2.3121, field ) for all active
"RTN","IBCNEUT7",31,0)
 ; insurances of the selected patient to be the date of death +1
"RTN","IBCNEUT7",32,0)
 ; Input:   DFN     - IEN of the patient to term insurances for
"RTN","IBCNEUT7",33,0)
 ;          DOD     - Internal date of death (file 2, field .351) of the patient
"RTN","IBCNEUT7",34,0)
 N EXPDT,DA,DODX,FDA,IBIEN
"RTN","IBCNEUT7",35,0)
 S DODX=$P($$FMADD^XLFDT(DOD,1),".",1)               ; Date of Death +1
"RTN","IBCNEUT7",36,0)
 S IBIEN=0
"RTN","IBCNEUT7",37,0)
 F  S IBIEN=$O(^DPT(DFN,.312,IBIEN)) Q:+IBIEN=0  D
"RTN","IBCNEUT7",38,0)
 . S EXPDT=$$GET1^DIQ(2.312,IBIEN_","_DFN_",",3,"I") ; Policy Expiration Date
"RTN","IBCNEUT7",39,0)
 . Q:EXPDT'=""                                       ; Policy has an expiration date
"RTN","IBCNEUT7",40,0)
 . L +^DPT(DFN,.312,IBIEN):5
"RTN","IBCNEUT7",41,0)
 . I '$T D  Q                                        ; Send email IB SUPERVISOR users
"RTN","IBCNEUT7",42,0)
 . . N EDT,MLGRP,MSG,PNM,SSN,SUBJECT,XMY
"RTN","IBCNEUT7",43,0)
 . . S SUBJECT="eIV: Policy Expiration for deceased patient"
"RTN","IBCNEUT7",44,0)
 . . S MLGRP=$$MGRP^IBCNEUT5
"RTN","IBCNEUT7",45,0)
 . . S PNM=$$GET1^DIQ(2,DFN,.01)
"RTN","IBCNEUT7",46,0)
 . . S EDT=$$FMTE^XLFDT(DODX,"2DZ")
"RTN","IBCNEUT7",47,0)
 . . S SSN=$$GET1^DIQ(2,DFN,.09),SSN=$E(SSN,6,9)
"RTN","IBCNEUT7",48,0)
 . . S MSG(1)=PNM_" "_SSN_" was just marked as deceased. Action Needed:"
"RTN","IBCNEUT7",49,0)
 . . S MSG(2)=" Update the patient's active policies and enter and expiration date of "_EDT_"."
"RTN","IBCNEUT7",50,0)
 . . D GETPER("IB SUPERVISOR",.XMY)
"RTN","IBCNEUT7",51,0)
 . . D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEUT7",52,0)
 . ;
"RTN","IBCNEUT7",53,0)
 . ; Set Policy expiration date to be date of death +1
"RTN","IBCNEUT7",54,0)
 . K DA,FDA
"RTN","IBCNEUT7",55,0)
 . S DA=IBIEN,DA(1)=DFN
"RTN","IBCNEUT7",56,0)
 . S FDA(2.312,DA_","_DA(1)_",",1.05)=$$NOW^XLFDT() ; Date Last Edited
"RTN","IBCNEUT7",57,0)
 . S FDA(2.312,DA_","_DA(1)_",",1.06)=.5            ; Last Edited By
"RTN","IBCNEUT7",58,0)
 . S FDA(2.312,DA_","_DA(1)_",",3)=DODX             ; Date of Death +1
"RTN","IBCNEUT7",59,0)
 . D FILE^DIE("","FDA")
"RTN","IBCNEUT7",60,0)
 . L -^DPT(DFN,.312,IBIEN)
"RTN","IBCNEUT7",61,0)
 Q
"RTN","IBCNEUT7",62,0)
 ;
"RTN","IBCNEUT7",63,0)
GETPER(SECKEY,XMY) ;EP
"RTN","IBCNEUT7",64,0)
 ; IB*2.0*549 Added method
"RTN","IBCNEUT7",65,0)
 ; Returns a list of users with the specified security key
"RTN","IBCNEUT7",66,0)
 ; Input: SECKEY - Security key to search for
"RTN","IBCNEUT7",67,0)
 ; Output: XMY() - Array email addresses for users who have the specified key
"RTN","IBCNEUT7",68,0)
 N XUSIEN,X
"RTN","IBCNEUT7",69,0)
 S XUSIEN=0
"RTN","IBCNEUT7",70,0)
 F  S XUSIEN=$O(^XUSEC(SECKEY,XUSIEN)) Q:'XUSIEN  D
"RTN","IBCNEUT7",71,0)
 . ;
"RTN","IBCNEUT7",72,0)
 . ; Don't return TERMINATED or DISUSERed users
"RTN","IBCNEUT7",73,0)
 . S X=$$ACTIVE^XUSER(XUSIEN)
"RTN","IBCNEUT7",74,0)
 . I X=""!($P(X,"^",1)=0) Q
"RTN","IBCNEUT7",75,0)
 . ;
"RTN","IBCNEUT7",76,0)
 . ; Put users emails into output array
"RTN","IBCNEUT7",77,0)
 . S XMY(XUSIEN)=""
"RTN","IBCNEUT7",78,0)
 Q
"RTN","IBCNEUT7",79,0)
 ;
"RTN","IBCNEUT7",80,0)
FTFIC(IBIEN,MDCALL) ;EP
"RTN","IBCNEUT7",81,0)
 ; IB*2.0*549 added function
"RTN","IBCNEUT7",82,0)
 ; Returns Timely Filing Timeframe text for a specified Insurance Company
"RTN","IBCNEUT7",83,0)
 ; translate fields 36,.18 and 36,.19 to agreed upon displayed text for
"RTN","IBCNEUT7",84,0)
 ; Insurance company Reports
"RTN","IBCNEUT7",85,0)
 ; Input:   IBIEN   - IEN of the insurance company to get data from
"RTN","IBCNEUT7",86,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",87,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",88,0)
 ; Returns: Timely Filing Timeframe text for the specified Insurance Company
"RTN","IBCNEUT7",89,0)
 ;          NOTE: If MDCALL=1 null Standard FTF Values and Qualifiers are 
"RTN","IBCNEUT7",90,0)
 ;                as '###' instead of null or 'UNKNOWN' respectively
"RTN","IBCNEUT7",91,0)
 N FTF,FTFV
"RTN","IBCNEUT7",92,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",93,0)
 Q:'$D(IBIEN) ""
"RTN","IBCNEUT7",94,0)
 S FTF=$$GET1^DIQ(36,IBIEN_",",.18,"I")     ; Standard FTF IEN (file 355.13)
"RTN","IBCNEUT7",95,0)
 S FTFV=$$GET1^DIQ(36,IBIEN_",",.19,"I")    ; Standard FTF Value
"RTN","IBCNEUT7",96,0)
 Q $$FTFMAP(FTF,FTFV,MDCALL)
"RTN","IBCNEUT7",97,0)
 ;
"RTN","IBCNEUT7",98,0)
FTFGP(GIEN,MDCALL) ;EP
"RTN","IBCNEUT7",99,0)
 ; IB*2.0*549 added function
"RTN","IBCNEUT7",100,0)
 ; Returns Timely Filing Timeframe text for a specified Group Insurance Plan
"RTN","IBCNEUT7",101,0)
 ; translate fields 355.3,.16 and 355.3,.17 to agreed upon displayed text for
"RTN","IBCNEUT7",102,0)
 ; Insurance company Reports
"RTN","IBCNEUT7",103,0)
 ; Input:   GIEN   - IEN of the group insurance plan to get data from
"RTN","IBCNEUT7",104,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",105,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",106,0)
 ; Returns: Timely Filing Timeframe text for the specified Group Insurance Plan
"RTN","IBCNEUT7",107,0)
 ;          NOTE: If MDCALL=1 null Standard FTF Values and Qualifiers are 
"RTN","IBCNEUT7",108,0)
 ;                as '###' instead of null or 'UNKNOWN' respectively
"RTN","IBCNEUT7",109,0)
 N FTF,FTFV,XX,ZZ
"RTN","IBCNEUT7",110,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",111,0)
 Q:'$D(GIEN) ""
"RTN","IBCNEUT7",112,0)
 S FTF=$$GET1^DIQ(355.3,GIEN_",",.16,"I")   ; Standard FTF IEN (file 355.13)
"RTN","IBCNEUT7",113,0)
 S FTFV=$$GET1^DIQ(355.3,GIEN_",",.17,"I")  ; Standard FTF Value
"RTN","IBCNEUT7",114,0)
 Q $$FTFMAP(FTF,FTFV,MDCALL)
"RTN","IBCNEUT7",115,0)
 ;
"RTN","IBCNEUT7",116,0)
FTFMAP(FIEN,FTFV,MDCALL) ; Returns Timely Filing Text for the specified Standard FTF
"RTN","IBCNEUT7",117,0)
 ; and Standard FTF Value
"RTN","IBCNEUT7",118,0)
 ;IB*2.0*549 added function
"RTN","IBCNEUT7",119,0)
 ; Input:   FIEN   - IEN of the Standard FTF (filer 355.13)
"RTN","IBCNEUT7",120,0)
 ;          MDCALL - 1 if being called from the Missing Data Report
"RTN","IBCNEUT7",121,0)
 ;                   0 otherwise. Optional, defaults to 0
"RTN","IBCNEUT7",122,0)
 ; Output:  FTFV    - Standard FTF Value
"RTN","IBCNEUT7",123,0)
 ; Returns: Timely Filing Timeframe text
"RTN","IBCNEUT7",124,0)
 N FTF
"RTN","IBCNEUT7",125,0)
 S:'$D(MDCALL) MDCALL=0
"RTN","IBCNEUT7",126,0)
 I MDCALL,FTFV="" S FTFV="###"
"RTN","IBCNEUT7",127,0)
 S FTF=$$GET1^DIQ(355.13,FIEN_",",.01)       ; Standard FTF name
"RTN","IBCNEUT7",128,0)
 Q:FTF="" FTFV_" ("_$S(MDCALL:"###",1:"UNKNOWN")_")"
"RTN","IBCNEUT7",129,0)
 Q:FTF="DAYS" FTFV_" (DYS)"
"RTN","IBCNEUT7",130,0)
 Q:FTF="DAYS OF FOLLOWING YEAR" FTFV_" (DYS OF NEXT YR)"
"RTN","IBCNEUT7",131,0)
 Q:FTF="DAYS PLUS ONE YEAR" FTFV_" (DYS_1 YR)"
"RTN","IBCNEUT7",132,0)
 Q:FTF="END OF FOLLOWING YEAR" FTFV_" (END OF NEXT YR)"
"RTN","IBCNEUT7",133,0)
 Q:FTF="MONTH(S)" FTFV_" (MOS)"
"RTN","IBCNEUT7",134,0)
 Q:FTF="MONTHS OF FOLLOWING YEAR" FTFV_" (MOS OF NEXT YR)"
"RTN","IBCNEUT7",135,0)
 Q:FTF="NO FILING TIME FRAME LIMIT" FTFV_" (N/A)"
"RTN","IBCNEUT7",136,0)
 Q:FTF="YEAR(S)" FTFV_" (YRS)"
"RTN","IBCNEUT7",137,0)
 Q FTFV_" ("_$S(MDCALL:"###",1:"UNKNOWN")_")"
"RTN","IBCNEUT7",138,0)
 ;
"RTN","IBCNEUT7",139,0)
XMITOK(TQIEN) ;EP
"RTN","IBCNEUT7",140,0)
 ; IB*2.0*549 added function
"RTN","IBCNEUT7",141,0)
 ; Checks if the site is a test site (not a production site) and if so
"RTN","IBCNEUT7",142,0)
 ; only allows transactions in the eIV queue that meet specific criteria
"RTN","IBCNEUT7",143,0)
 ; to be transmitted to FSC. Prevents invalid transmissions from a test
"RTN","IBCNEUT7",144,0)
 ; site to FSC which blocks the interface and need to be manually resolved
"RTN","IBCNEUT7",145,0)
 ; at FSC.
"RTN","IBCNEUT7",146,0)
 ; Input:   TQIEN   - IEN of the IIV Transmission Queue entry
"RTN","IBCNEUT7",147,0)
 ; Returns: 1       - Ok to add item to the eIV queue
"RTN","IBCNEUT7",148,0)
 ;          0       - Not ok to add item to the eIV queue
"RTN","IBCNEUT7",149,0)
 N GOOD,GRPNUM,IBIEN,IBCNMPI,IENS,IVPIEN,MCARE,PATDOB,PATID,PATNM,PATSEX,PAYRNM,PIEN
"RTN","IBCNEUT7",150,0)
 N SUBID,SUBNM,TSITE,XX
"RTN","IBCNEUT7",151,0)
 S MCARE=$$GET1^DIQ(350.9,"1,",51.25,"E")    ; Medicare Payer Name
"RTN","IBCNEUT7",152,0)
 S XX=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT7",153,0)
 S (GRPNUM,PATID,SUBID,SUBNM)=""
"RTN","IBCNEUT7",154,0)
 S DFN=$$GET1^DIQ(365.1,TQIEN_",",.02,"I")   ; Patient IEN                   
"RTN","IBCNEUT7",155,0)
 S IBCNMPI=$$GET1^DIQ(2,DFN_",",991.01,"I")  ; Integration Control Number MPI
"RTN","IBCNEUT7",156,0)
 S PIEN=$$GET1^DIQ(365.1,TQIEN_",",.03,"I")  ; Payer IEN
"RTN","IBCNEUT7",157,0)
 S IBIEN=$$GET1^DIQ(365.1,TQIEN_",",.13,"I") ; Insurance multiple number
"RTN","IBCNEUT7",158,0)
 ;
"RTN","IBCNEUT7",159,0)
 ; If the insurance multiple is not in the transmission queue, get the
"RTN","IBCNEUT7",160,0)
 ; following fields from the Insurance Verification Processor file
"RTN","IBCNEUT7",161,0)
 I IBIEN="" D
"RTN","IBCNEUT7",162,0)
 . S IVPIEN=$$GET1^DIQ(365.1,TQIEN_",",.05,"I") ; IVP file IEN
"RTN","IBCNEUT7",163,0)
 . S GRPNUM=$$GET1^DIQ(355.33,IVPIEN_",",90.02) ; Group Plan Number
"RTN","IBCNEUT7",164,0)
 . S PATID=$$GET1^DIQ(355.33,IVPIEN_",",62.01)  ; Group Plan Number
"RTN","IBCNEUT7",165,0)
 . S SUBID=$$GET1^DIQ(355.33,IVPIEN_",",90.03)  ; Subscriber ID
"RTN","IBCNEUT7",166,0)
 . S SUBNM=$$GET1^DIQ(355.33,IVPIEN_",",91.01)  ; Subscriber Name
"RTN","IBCNEUT7",167,0)
 E  D
"RTN","IBCNEUT7",168,0)
 . S IENS=IBIEN_","_DFN_","
"RTN","IBCNEUT7",169,0)
 . S XX=$$GET1^DIQ(2.312,IENS,.18,"I")       ; IEN of the Group Plan
"RTN","IBCNEUT7",170,0)
 . S GRPNUM=$$GET1^DIQ(355.3,XX_",",2.02)    ; Group Plan Number
"RTN","IBCNEUT7",171,0)
 . S PATID=$$GET1^DIQ(2.312,IENS,5.01)       ; Patient ID
"RTN","IBCNEUT7",172,0)
 . S SUBID=$$GET1^DIQ(2.312,IENS,1)          ; Subscriber ID
"RTN","IBCNEUT7",173,0)
 . S SUBNM=$$GET1^DIQ(2.312,IENS,7.01)       ; Subscriber NM
"RTN","IBCNEUT7",174,0)
 ;
"RTN","IBCNEUT7",175,0)
 ; First check to see if the site is a test or a production site
"RTN","IBCNEUT7",176,0)
 S TSITE=$S($$PROD^XUPROD(1):0,1:1)
"RTN","IBCNEUT7",177,0)
 Q:'TSITE 1                                  ; Production site no checks done
"RTN","IBCNEUT7",178,0)
 ;
"RTN","IBCNEUT7",179,0)
 ; Quit if the Integration Control Number MPI is null - MUST be present
"RTN","IBCNEUT7",180,0)
 Q:IBCNMPI="" 0
"RTN","IBCNEUT7",181,0)
 ;
"RTN","IBCNEUT7",182,0)
 I (SUBID="")!(SUBNM="") Q 0                 ; Key elements not defined
"RTN","IBCNEUT7",183,0)
 S XX=$$GET1^DIQ(2,DFN_",",.03,"I")          ; Internal Patient DOB
"RTN","IBCNEUT7",184,0)
 S PATDOB=$TR($$FMTE^XLFDT(XX,"7DZ"),"/","") ; YYYYMMDD format
"RTN","IBCNEUT7",185,0)
 S PATSEX=$$GET1^DIQ(2,DFN_",",.02,"I")      ; Patient Sex
"RTN","IBCNEUT7",186,0)
 S PATNM=$$GET1^DIQ(2,DFN_",",.01,"I")       ; Patient Name
"RTN","IBCNEUT7",187,0)
 S PAYRNM=$$GET1^DIQ(365.12,PIEN_",",.01)    ; Payer Name
"RTN","IBCNEUT7",188,0)
 S PAYRNM=$$UP^XLFSTR(PAYRNM)
"RTN","IBCNEUT7",189,0)
 S GOOD=0
"RTN","IBCNEUT7",190,0)
 ; 
"RTN","IBCNEUT7",191,0)
 ; Profile P1 Test
"RTN","IBCNEUT7",192,0)
 I PAYRNM="AETNA",GRPNUM="GRP NUM 13805",SUBID="111111AE" D  Q:GOOD 1
"RTN","IBCNEUT7",193,0)
 . Q:SUBNM'="IBSUB,ACTIVE"
"RTN","IBCNEUT7",194,0)
 . Q:PATDOB'="19220202"
"RTN","IBCNEUT7",195,0)
 . Q:PATSEX'="M"
"RTN","IBCNEUT7",196,0)
 . S GOOD=1
"RTN","IBCNEUT7",197,0)
 ;
"RTN","IBCNEUT7",198,0)
 ; Profile P2 Test
"RTN","IBCNEUT7",199,0)
 I PAYRNM="AETNA",GRPNUM="GRP NUM 13188",SUBID="111111FG" D  Q:GOOD 1
"RTN","IBCNEUT7",200,0)
 . Q:SUBNM'="IBSUB,INACTIVE"
"RTN","IBCNEUT7",201,0)
 . Q:PATDOB'="19480101"
"RTN","IBCNEUT7",202,0)
 . Q:PATSEX'="F"
"RTN","IBCNEUT7",203,0)
 . S GOOD=1
"RTN","IBCNEUT7",204,0)
 ;
"RTN","IBCNEUT7",205,0)
 ; Profile P3 Test
"RTN","IBCNEUT7",206,0)
 I PAYRNM="CIGNA",GRPNUM="GRP NUM 5442",SUBID="012345678" D  Q:GOOD 1
"RTN","IBCNEUT7",207,0)
 . Q:SUBNM'="IBSUB,AAAERROR"
"RTN","IBCNEUT7",208,0)
 . Q:PATDOB'="19470211"
"RTN","IBCNEUT7",209,0)
 . Q:PATSEX'="M"
"RTN","IBCNEUT7",210,0)
 . S GOOD=1
"RTN","IBCNEUT7",211,0)
 ;
"RTN","IBCNEUT7",212,0)
 ; Profile P4 Test
"RTN","IBCNEUT7",213,0)
 I PAYRNM="AETNA",GRPNUM="AET1234",SUBID="W1234561111" D  Q:GOOD 1
"RTN","IBCNEUT7",214,0)
 . Q:SUBNM'="IBINS,ACTIVE"                  ; Note this patient is male
"RTN","IBCNEUT7",215,0)
 . Q:PATID'="W123452222"
"RTN","IBCNEUT7",216,0)
 . Q:PATNM'="IBDEP,ACTIVE"
"RTN","IBCNEUT7",217,0)
 . Q:PATDOB'="19900304"
"RTN","IBCNEUT7",218,0)
 . Q:PATSEX'="F"                            ; Note this is subscriber's spouse
"RTN","IBCNEUT7",219,0)
 . S GOOD=1
"RTN","IBCNEUT7",220,0)
 ;
"RTN","IBCNEUT7",221,0)
 ; Profile P5 Test
"RTN","IBCNEUT7",222,0)
 I MCARE'="",PAYRNM=MCARE,SUBID="333113333A",SUBNM="IB,PATIENT" D  Q:GOOD 1
"RTN","IBCNEUT7",223,0)
 . Q:PATDOB'="19350309"
"RTN","IBCNEUT7",224,0)
 . Q:PATSEX'="M"
"RTN","IBCNEUT7",225,0)
 . S GOOD=1
"RTN","IBCNEUT7",226,0)
 ;
"RTN","IBCNEUT7",227,0)
 ; Profile P6 Test
"RTN","IBCNEUT7",228,0)
 I MCARE'="",PAYRNM=MCARE,SUBID="111223333A",SUBNM="IBSUB,TWOTRLRS" D  Q:GOOD 1
"RTN","IBCNEUT7",229,0)
 . Q:PATDOB'="19550505"
"RTN","IBCNEUT7",230,0)
 . Q:PATSEX'="M"
"RTN","IBCNEUT7",231,0)
 . S GOOD=1
"RTN","IBCNEUT7",232,0)
 Q 0
"RTN","IBCNEUT7",233,0)
 ;
"RTN","IBCNEUT7",234,0)
RSTA(REC) ; Update status in Response File from Transmission Queue to
"RTN","IBCNEUT7",235,0)
 ;         Communication Timeout
"RTN","IBCNEUT7",236,0)
 ;  Input Parameters
"RTN","IBCNEUT7",237,0)
 ;    REC = IEN from TQ file
"RTN","IBCNEUT7",238,0)
 ;    -- Removed 10/29/02 --WCH = Which Record 'P'=Previous, 'C'=Current
"RTN","IBCNEUT7",239,0)
 ;    -- if no Which Record passed, it will assume the current one
"RTN","IBCNEUT7",240,0)
 ;
"RTN","IBCNEUT7",241,0)
 N HIEN,RIEN
"RTN","IBCNEUT7",242,0)
 S HIEN=0
"RTN","IBCNEUT7",243,0)
 ; Loop thru HL7 messages associated with the IIV Inquiry
"RTN","IBCNEUT7",244,0)
 F  S HIEN=$O(^IBCN(365.1,REC,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEUT7",245,0)
 .  ; Determine IIV Response associated with the HL7 message
"RTN","IBCNEUT7",246,0)
 .  S RIEN=$P($G(^IBCN(365.1,REC,2,HIEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT7",247,0)
 .  ; If IIV Response status is 'Response Received', don't update it
"RTN","IBCNEUT7",248,0)
 .  I $P($G(^IBCN(365,RIEN,0)),U,6)=3 Q
"RTN","IBCNEUT7",249,0)
 .  ; Update IIV Response status to 'Communication Timeout'
"RTN","IBCNEUT7",250,0)
 .  D RSP^IBCNEUT2(RIEN,5)
"RTN","IBCNEUT7",251,0)
 .  Q
"RTN","IBCNEUT7",252,0)
 ;
"RTN","IBCNEUT7",253,0)
 Q
"RTN","IBCNEUT7",254,0)
 ;
"RTN","IBCNEUT7",255,0)
TXT(TXT) ;Parse text for wrapping
"RTN","IBCNEUT7",256,0)
 ;  Input Parameter
"RTN","IBCNEUT7",257,0)
 ;   TXT = The array name
"RTN","IBCNEUT7",258,0)
 ;
"RTN","IBCNEUT7",259,0)
 I '$D(@(TXT)) Q
"RTN","IBCNEUT7",260,0)
 ;
"RTN","IBCNEUT7",261,0)
 K ^UTILITY($J,"W")
"RTN","IBCNEUT7",262,0)
 ;
"RTN","IBCNEUT7",263,0)
 ;  Define length of text string; left is 1 and right is 78
"RTN","IBCNEUT7",264,0)
 S DIWF="",DIWL=1,DIWR=78
"RTN","IBCNEUT7",265,0)
 ;
"RTN","IBCNEUT7",266,0)
 ;  Format text into scratch file
"RTN","IBCNEUT7",267,0)
 S CT=0
"RTN","IBCNEUT7",268,0)
 F  S CT=$O(@(TXT)@(CT)) Q:'CT  D
"RTN","IBCNEUT7",269,0)
 . S X=@TXT@(CT) D ^DIWP
"RTN","IBCNEUT7",270,0)
 ;
"RTN","IBCNEUT7",271,0)
 K @(TXT)
"RTN","IBCNEUT7",272,0)
 ;
"RTN","IBCNEUT7",273,0)
 ;  Reset formatted text back to array
"RTN","IBCNEUT7",274,0)
 S CT=0
"RTN","IBCNEUT7",275,0)
 F  S CT=$O(^UTILITY($J,"W",1,CT)) Q:'CT  D
"RTN","IBCNEUT7",276,0)
 . S @(TXT)@(CT)=^UTILITY($J,"W",1,CT,0)
"RTN","IBCNEUT7",277,0)
 ;
"RTN","IBCNEUT7",278,0)
 K ^UTILITY($J,"W"),CT,DIWF,DIWL,DIWR,X,Z,DIW,DIWI,DIWT,DIWTC,DIWX,DN,I
"RTN","IBCNEUT7",279,0)
 Q
"RTN","IBCNEUT7",280,0)
 ;
"RTN","IBCNEUT7",281,0)
ERRN(ARRAY) ;  Get the next FileMan error number from the array
"RTN","IBCNEUT7",282,0)
 ;  Input
"RTN","IBCNEUT7",283,0)
 ;    ARRAY = the array name, include "DIERR"
"RTN","IBCNEUT7",284,0)
 ;  Output
"RTN","IBCNEUT7",285,0)
 ;    IBEY = the next error number
"RTN","IBCNEUT7",286,0)
 ;
"RTN","IBCNEUT7",287,0)
 ;  Example call
"RTN","IBCNEUT7",288,0)
 ;    S IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEUT7",289,0)
 ;
"RTN","IBCNEUT7",290,0)
 NEW IBEY
"RTN","IBCNEUT7",291,0)
 ;
"RTN","IBCNEUT7",292,0)
 I '$D(@(ARRAY)) S @(ARRAY)=1 Q 1
"RTN","IBCNEUT7",293,0)
 ;
"RTN","IBCNEUT7",294,0)
 S IBEY=$P(@(ARRAY),U,1)
"RTN","IBCNEUT7",295,0)
 S IBEY=IBEY+1,$P(@(ARRAY),U,1)=IBEY
"RTN","IBCNEUT7",296,0)
 Q IBEY
"RTN","IBCNEUT7",297,0)
 ;
"RTN","IBCNHUT2")
0^49^B92403346
"RTN","IBCNHUT2",1,0)
IBCNHUT2 ;ALB/GEF - HPID/OEID UTILITIES ;11-MAR-14
"RTN","IBCNHUT2",2,0)
 ;;2.0;INTEGRATED BILLING;**519,549**;21-MAR-94;Build 54
"RTN","IBCNHUT2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNHUT2",4,0)
 ;
"RTN","IBCNHUT2",5,0)
 ; this routine contains HL7 utilities for the HPID project.
"RTN","IBCNHUT2",6,0)
 Q
"RTN","IBCNHUT2",7,0)
 ;
"RTN","IBCNHUT2",8,0)
PUR ;
"RTN","IBCNHUT2",9,0)
 ; This section handles the purging of the HPID/OEID data stored in the
"RTN","IBCNHUT2",10,0)
 ; HPID/OEID Transmission Queue file (#367.1) and in the HPID/OEID Response file (#367).
"RTN","IBCNHUT2",11,0)
 ; This is called from a nightly tasked routine IBAMTC.  Data created within the last 2 weeks
"RTN","IBCNHUT2",12,0)
 ; cannot be purged. Only requested data that has a NIF-ID response received will be purged.
"RTN","IBCNHUT2",13,0)
 ; Unsolicited responses will also be purged as will those with a status of EXR (Exception 
"RTN","IBCNHUT2",14,0)
 ; Report Reject), whether they have a NIF ID or not.
"RTN","IBCNHUT2",15,0)
 ; The system will not purge entries with no response, entries that have dropped to 
"RTN","IBCNHUT2",16,0)
 ; an exception queue, or entries with a response less than 14 days old.
"RTN","IBCNHUT2",17,0)
 ; Uses this x-ref on file 367:  ^IBCNH(367,"E",future purge date/time,ien)=""
"RTN","IBCNHUT2",18,0)
 ; and finds the corresponding entry in file 367.1 with:  ^IBCNH(367,ien,0)=2nd piece is ien in 367.1
"RTN","IBCNHUT2",19,0)
 ;
"RTN","IBCNHUT2",20,0)
 ; IB*2.0*549 - This segment also verifies that the HL7 logical link is up and running properly
"RTN","IBCNHUT2",21,0)
 ;
"RTN","IBCNHUT2",22,0)
 N ENDDT,TQIEN,RSIEN,DA,DIK,RDTA,STDT,RST,TST,ID,RTYP
"RTN","IBCNHUT2",23,0)
 S ENDDT=$$FMADD^XLFDT(DT,-15)
"RTN","IBCNHUT2",24,0)
 S STDT="" F  S STDT=$O(^IBCNH(367,"E",STDT)) Q:STDT=""!($P(STDT,".",1)>ENDDT)  D
"RTN","IBCNHUT2",25,0)
 .S RSIEN="" F  S RSIEN=$O(^IBCNH(367,"E",STDT,RSIEN)) Q:RSIEN=""  D
"RTN","IBCNHUT2",26,0)
 ..; double check to make sure they are both correct status with status R having a NIF ID before deleting
"RTN","IBCNHUT2",27,0)
 ..S RDTA=$G(^IBCNH(367,RSIEN,0))
"RTN","IBCNHUT2",28,0)
 ..S RST=$P(RDTA,U,5),RTYP=$P(RDTA,U,3)
"RTN","IBCNHUT2",29,0)
 ..I $E(RST)'="R"&(RST'="EXR") Q
"RTN","IBCNHUT2",30,0)
 ..; as of 6/23/14, do not purge EXR
"RTN","IBCNHUT2",31,0)
 ..Q:RST="EXR"
"RTN","IBCNHUT2",32,0)
 ..S TQIEN=$P(RDTA,U,2)
"RTN","IBCNHUT2",33,0)
 ..I TQIEN'="" S TST=$P($G(^IBCNH(367.1,TQIEN,0)),U,4) I $E(TST)'="R" Q
"RTN","IBCNHUT2",34,0)
 ..; if this is a requested response, make sure we got a NIF
"RTN","IBCNHUT2",35,0)
 ..I RTYP="R",RST="R" Q:'$D(^IBCNH(367,"D",8,RSIEN))
"RTN","IBCNHUT2",36,0)
 ..I RTYP="R",RST="R" S ID=$O(^IBCNH(367,"D",8,RSIEN,"")) Q:$P($G(^IBCNH(367,RSIEN,1,ID,0)),U,2)=""
"RTN","IBCNHUT2",37,0)
 ..; OK TO DELETE
"RTN","IBCNHUT2",38,0)
 ..S DA=RSIEN,DIK="^IBCNH(367," D ^DIK
"RTN","IBCNHUT2",39,0)
 ..Q:TQIEN=""
"RTN","IBCNHUT2",40,0)
 ..S DA=TQIEN,DIK="^IBCNH(367.1," D ^DIK
"RTN","IBCNHUT2",41,0)
 ;
"RTN","IBCNHUT2",42,0)
 K ENDDT,TQIEN,RSIEN,DA,DIK,RDTA,STDT,ID,RTYP
"RTN","IBCNHUT2",43,0)
 ;
"RTN","IBCNHUT2",44,0)
 ; IB*2.0*549 Set up for verifying logical link
"RTN","IBCNHUT2",45,0)
 D SETUPVER
"RTN","IBCNHUT2",46,0)
 Q
"RTN","IBCNHUT2",47,0)
 ;
"RTN","IBCNHUT2",48,0)
EXT ; kick off HL7 queries of each insurance company sent to the NIF for the initial HPID extract
"RTN","IBCNHUT2",49,0)
 ; called from option IBCNH HPID NIF BATCH QUERY.  To be run once FSC notifies site that they are
"RTN","IBCNHUT2",50,0)
 ; ready - ie. they have received and processed the data extracts and have the NIF ID's for each
"RTN","IBCNHUT2",51,0)
 ; insurance company.
"RTN","IBCNHUT2",52,0)
 ;
"RTN","IBCNHUT2",53,0)
 N IBN,DIE,DA,DR,C
"RTN","IBCNHUT2",54,0)
 ; activate HPID/OEID flag in IB SITE PARAMS
"RTN","IBCNHUT2",55,0)
 S DIE="^IBE(350.9,",DA=$P($G(^IBE(350.9,0)),U,3),DR=70.01_"///"_1 D ^DIE
"RTN","IBCNHUT2",56,0)
 S IBN=0,C=0 F  S IBN=$O(^DIC(36,IBN)) Q:'IBN  D
"RTN","IBCNHUT2",57,0)
 .; update display with status
"RTN","IBCNHUT2",58,0)
 .S C=C+1 I C#20 W "."
"RTN","IBCNHUT2",59,0)
 .; don't send if we already have a pending message for this insurance company
"RTN","IBCNHUT2",60,0)
 .Q:$D(^IBCNH(367.1,"INS",IBN))
"RTN","IBCNHUT2",61,0)
 .; don't send if we already have a NIF ID for this insurance company
"RTN","IBCNHUT2",62,0)
 .Q:$$NIF^IBCNHUT1(IBN)
"RTN","IBCNHUT2",63,0)
 .; don't send if there are no patients associated with this ins.co. OR if there are no groups associated with this insurance co.
"RTN","IBCNHUT2",64,0)
 .Q:'$D(^DPT("AB",IBN))
"RTN","IBCNHUT2",65,0)
 .Q:'$D(^IBA(355.3,"B",IBN))
"RTN","IBCNHUT2",66,0)
 .; only active insurance companies
"RTN","IBCNHUT2",67,0)
 .Q:$P($G(^DIC(36,IBN,0)),U,5)=1
"RTN","IBCNHUT2",68,0)
 .; from here we can kick off the HL7 message.  
"RTN","IBCNHUT2",69,0)
 .D SEND^IBCNHHLO(IBN)
"RTN","IBCNHUT2",70,0)
 K IBN,DIE,DA,DR,C
"RTN","IBCNHUT2",71,0)
 Q
"RTN","IBCNHUT2",72,0)
 ;
"RTN","IBCNHUT2",73,0)
FM36(INS,DATA,TQN) ; updates file 36, 8 node with data received from the NIF
"RTN","IBCNHUT2",74,0)
 ; INS = insurance company ien (REQUIRED)
"RTN","IBCNHUT2",75,0)
 ; DATA=String containing HPID data in this format:  HPID^CHP/SHP^PARENT^NIF ID
"RTN","IBCNHUT2",76,0)
 ;  NIF = NIF ID for insurance company
"RTN","IBCNHUT2",77,0)
 ; TQN=ien of entry in file 367.1 (if data came from a requested response)
"RTN","IBCNHUT2",78,0)
 ; returns "-1^Error code^Error reason" if entry not added and Processing Status if added/updated
"RTN","IBCNHUT2",79,0)
 ;
"RTN","IBCNHUT2",80,0)
 N DIC,DR,DA,DIE,I,X
"RTN","IBCNHUT2",81,0)
 Q:INS="" "-1^ED^DATABASE Error:  Not a valid Insurance Company ien!"
"RTN","IBCNHUT2",82,0)
 ; validate Vista Unique ID and HPID data format
"RTN","IBCNHUT2",83,0)
 Q:'$D(^DIC(36,INS)) "-1^ED^Error:  Insurance ien does NOT exist at this site!"
"RTN","IBCNHUT2",84,0)
 ; don't update insurance file if Legacy ID's have changed since we sent the request
"RTN","IBCNHUT2",85,0)
 Q:$$LEG($G(TQN),INS) "-1^EL^LEGACY ID Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",86,0)
 ; ready to update file 36, fields 8.01, 8.02, 8.03 and 8.04 with DATA
"RTN","IBCNHUT2",87,0)
 S DIE="^DIC(36,",DA=INS,DR="" K DIC
"RTN","IBCNHUT2",88,0)
 F I=2:1:4 S DR=DR_"8.0"_I_"///^S X=$P(DATA,U,"_I_");"
"RTN","IBCNHUT2",89,0)
 D ^DIE
"RTN","IBCNHUT2",90,0)
 ; add HPID separately since if it fails input transform nothing else updates
"RTN","IBCNHUT2",91,0)
 S DR="8.01///^S X=$P(DATA,U)" D ^DIE
"RTN","IBCNHUT2",92,0)
 K DIE,DR,I,INS,X,LID,DIC
"RTN","IBCNHUT2",93,0)
 Q DA_"^R^RESPONSE PROCESSED:  File 36 Updated"
"RTN","IBCNHUT2",94,0)
 ;
"RTN","IBCNHUT2",95,0)
FM71(INS,HLID) ; adds entry to file 367.1 (HPID/OEID TRANSMISSION QUEUE) and file 367 (HPID/OEID RESPONSE) 
"RTN","IBCNHUT2",96,0)
 ; INS =insurance company ien (required)
"RTN","IBCNHUT2",97,0)
 ; HLID =  message control ID number assigned by HL7 when HL7 message was created (required)
"RTN","IBCNHUT2",98,0)
 ; returns ien of entry added to file 367.1
"RTN","IBCNHUT2",99,0)
 ;
"RTN","IBCNHUT2",100,0)
 N DIC,DR,DA,DIE,Y,IDN,DATA,TQN,RSN,X,DLAYGO
"RTN","IBCNHUT2",101,0)
 Q:INS="" "-1^Error:  Not a valid Insurance Company ien!"
"RTN","IBCNHUT2",102,0)
 Q:HLID="" "-1^Error:  No HL7 Control Number defined!"
"RTN","IBCNHUT2",103,0)
 S DIC="^IBCNH(367.1,",DIC(0)="LS",X=$P($G(^IBCNH(367.1,0)),U,3)+1,DLAYGO=367.1 D ^DIC
"RTN","IBCNHUT2",104,0)
 Q:Y=-1 "-1^Error:  HPID QUEUE entry NOT added!"
"RTN","IBCNHUT2",105,0)
 S TQN=+Y
"RTN","IBCNHUT2",106,0)
 ; add stub record in file 367
"RTN","IBCNHUT2",107,0)
 S DIC="^IBCNH(367,",DIC(0)="LS",X=HLID,DLAYGO=367 D ^DIC
"RTN","IBCNHUT2",108,0)
 ; update 367 with additional fields.
"RTN","IBCNHUT2",109,0)
 S RSN=+Y
"RTN","IBCNHUT2",110,0)
 I Y>0 S DIE=DIC,DA=+Y,DR=".01///"_HLID_";.02///"_TQN_";.03///R" K DIC D ^DIE
"RTN","IBCNHUT2",111,0)
 ; now update new 367.1 entry with insurance company data fields on 2 node, response info and status of A for AWAITING RESPONSE
"RTN","IBCNHUT2",112,0)
 Q:'$$R36(INS,.DATA)
"RTN","IBCNHUT2",113,0)
 S DIE="^IBCNH(367.1,",DA=TQN,DR="" K DIC
"RTN","IBCNHUT2",114,0)
 S DR=".02///"_INS_";"_".04///"_"A"_";.07///"_RSN
"RTN","IBCNHUT2",115,0)
 F I=1:1:8 S DR=DR_";2.0"_I_"///^S X=$P(DATA(1),U,"_I_")"
"RTN","IBCNHUT2",116,0)
 D ^DIE
"RTN","IBCNHUT2",117,0)
 ; update ID multiple with ID data
"RTN","IBCNHUT2",118,0)
 F IDN=1:1:10 I $P($G(DATA(2)),U,IDN)'="" D
"RTN","IBCNHUT2",119,0)
 .; create ID multiple
"RTN","IBCNHUT2",120,0)
 .S DIC="^IBCNH(367.1,"_TQN_",1,",DA(1)=TQN,DIC(0)="LS" S X="`"_IDN,DLAYGO=367.1 D ^DIC Q:Y=-1
"RTN","IBCNHUT2",121,0)
 .; add ID data to new multiple entry
"RTN","IBCNHUT2",122,0)
 .S DIE=DIC,DA=+Y,DR=".01///"_IDN_";.02///^S X=$P($G(DATA(2)),U,"_IDN_");.03///"_$P($G(DATA(3)),U,IDN) K DIC
"RTN","IBCNHUT2",123,0)
 .D ^DIE
"RTN","IBCNHUT2",124,0)
 K DIC,DR,DA,DIE,Y,IDN,DATA,RSN,X,DLAYGO
"RTN","IBCNHUT2",125,0)
 Q TQN
"RTN","IBCNHUT2",126,0)
 ;
"RTN","IBCNHUT2",127,0)
FM367(IEN,DATA,ID,QL) ; updates entry to file 367 (HPID/OEID RESPONSE) for requested responses,
"RTN","IBCNHUT2",128,0)
 ; or creates a new entry for unsolicited responses.
"RTN","IBCNHUT2",129,0)
 ; IEN = ien of existing entry in file 367 (will only exist for requested responses)
"RTN","IBCNHUT2",130,0)
 ; DATA = data string containing response data for 0 node (NOTE:  You do not have to pass all this data, but it must be in this format):
"RTN","IBCNHUT2",131,0)
 ; HLID^TQN^RTY^INS NAME^NPS^STAT D/T^UID^PARENT HPID^CHP or SHP
"RTN","IBCNHUT2",132,0)
 ;      TQN = Transaction ien in file 367.1 (HPID/OEID TRANSMISSION QUEUE), null for unsolicited responses 
"RTN","IBCNHUT2",133,0)
 ;      RTY = Response Type:  R for Requested or U for Unsolicited
"RTN","IBCNHUT2",134,0)
 ;      NPS = Processing status at NIF, either R for Response Processed or X for Exception Report or EXR for Rejected
"RTN","IBCNHUT2",135,0)
 ;  HLID = control ID of HL7 message (required if this is an unsolicited response, not req'd if you have ien)
"RTN","IBCNHUT2",136,0)
 ; ID = Data string of ID data sent from NIF.  MUST BE in this format: 
"RTN","IBCNHUT2",137,0)
 ;(ie.  HPID must always be 9th piece, NIF must be 8, If no EDI numbers received, those pieces will be null, etc.):
"RTN","IBCNHUT2",138,0)
 ; EDI ID NUMBER-PROF^EDI ID NUMBER-INST^EDI PROF SECONDARY ID(1)^EDI PROF SECONDARY ID(2)^EDI INST SECONDARY ID(1)^EDI INST SECONDARY ID(2)^VA NATIONAL ID^NIF ID^HPID/OEID^VISTA UNIQUE ID    
"RTN","IBCNHUT2",139,0)
 ; QL=string of secondary ID qualifiers, in this format:  ^^QUAL1(PS1)^QUAL2(PS2)^QAUL3(IS1)^QUAL4(IS2)
"RTN","IBCNHUT2",140,0)
 ; RETURNS:  IEN of file 367 entry that was updated, or -1 for error condition
"RTN","IBCNHUT2",141,0)
 ;
"RTN","IBCNHUT2",142,0)
 N DIC,DR,DA,DIE,Y,IDN,HLID,RTY,INS,TQN,PS,NPS,DLAYGO
"RTN","IBCNHUT2",143,0)
 S DATA=$G(DATA),ID=$G(ID),QL=$G(QL)
"RTN","IBCNHUT2",144,0)
 S HLID=$P($G(DATA),U),RTY=$P($G(DATA),U,3)
"RTN","IBCNHUT2",145,0)
 I RTY="R",$G(IEN)="" Q "-1^Error:  No HPID/OEID Response ien!"
"RTN","IBCNHUT2",146,0)
 I $G(IEN)="",$G(HLID)="" Q "-1^Error:  No HPID/OEID Response and no HL7 ien!"
"RTN","IBCNHUT2",147,0)
 ; if NIF processing status is not R, update response status only and quit
"RTN","IBCNHUT2",148,0)
 Q:$P(DATA,U,5)'="R" $$STAT^IBCNHUT1(IEN,$P(DATA,U,5))
"RTN","IBCNHUT2",149,0)
 ; create new entry in 367 for unsolicited responses and update file 36 using NIF ID
"RTN","IBCNHUT2",150,0)
 I RTY="U" S IEN=$$UNSOL^IBCNHUT1(HLID,RTY,ID,DATA)
"RTN","IBCNHUT2",151,0)
 Q:$P(IEN,U)=-1 "-1^Error:  HPID RESPONSE entry NOT added!"
"RTN","IBCNHUT2",152,0)
 ; create and update ID multiple
"RTN","IBCNHUT2",153,0)
 F IDN=1:1:10 I $P(ID,U,IDN)'="" D
"RTN","IBCNHUT2",154,0)
 .S DIC="^IBCNH(367,"_IEN_",1,",DA(1)=IEN,DIC(0)="LS",X="`"_IDN,DLAYGO=367 D ^DIC Q:Y=-1
"RTN","IBCNHUT2",155,0)
 .S DIE=DIC,DA=+Y,DR=".01///"_IDN_";.02///^S X=$P(ID,U,"_IDN_");.03///"_$P(QL,U,IDN) K DIC
"RTN","IBCNHUT2",156,0)
 .D ^DIE
"RTN","IBCNHUT2",157,0)
 ; update 367 with additional fields.
"RTN","IBCNHUT2",158,0)
 S DIE="^IBCNH(367,",DA=IEN,DR=""
"RTN","IBCNHUT2",159,0)
 F I=3,4,7,8,9 S DR=DR_".0"_I_"///^S X=$P(DATA,U,"_I_");"
"RTN","IBCNHUT2",160,0)
 D ^DIE
"RTN","IBCNHUT2",161,0)
 ; now update the insurance company entry in file 36 for requested responses.  Use the insurance
"RTN","IBCNHUT2",162,0)
 ; ien that was sent in the original request.  
"RTN","IBCNHUT2",163,0)
 ; Unsolicited response are updated via previous call to $$UNSOL^IBCNHUT1
"RTN","IBCNHUT2",164,0)
 Q:RTY="U" IEN
"RTN","IBCNHUT2",165,0)
 S INS="",TQN=$P($G(^IBCNH(367,IEN,0)),U,2) S:TQN'="" INS=$P(^IBCNH(367.1,TQN,0),U,2)
"RTN","IBCNHUT2",166,0)
 S PS=$$FM36(INS,$P(ID,U,9)_U_$P(DATA,U,9)_U_$P(DATA,U,8)_U_$P(ID,U,8),TQN)
"RTN","IBCNHUT2",167,0)
 ; update field .05 in file 367 (PROCESSING STATUS)
"RTN","IBCNHUT2",168,0)
 Q $$STAT^IBCNHUT1(IEN,$P(PS,U,2))
"RTN","IBCNHUT2",169,0)
 ;
"RTN","IBCNHUT2",170,0)
R36(INS,DATA) ; this function gathers all the insurance company data we need to send to the NIF
"RTN","IBCNHUT2",171,0)
 ; INS= ien of insurance company entry (required)
"RTN","IBCNHUT2",172,0)
 ; DATA=name of array to store data results in
"RTN","IBCNHUT2",173,0)
 ; Returns:  DATA(0) = Insurance Ien^Insurance Company Name^INACTIVE FLAG^UID^NIF ID^HPID/OEID^CHP/SHP^PARENT HPID
"RTN","IBCNHUT2",174,0)
 ;           DATA(1) = STREET ADDRESS 1^STR AD2^CITY^STATE^ZIP^BILLING CO NAME^TYPE OF COVERAGE^PHONE#
"RTN","IBCNHUT2",175,0)
 ;           DATA(2) = string of ID's in this format: 
"RTN","IBCNHUT2",176,0)
 ; EDI ID NUMBER-PROF^EDI ID NUMBER-INST^EDI PROF SECONDARY ID(1)^EDI PROF SECONDARY ID(2)^EDI INST SECONDARY ID(1)^EDI INST SECONDARY ID(2)^VA NATIONAL ID^NIF ID^HPID/OEID^VISTA UNIQUE ID
"RTN","IBCNHUT2",177,0)
 ;           DATA(3) = string of ID qualifiers in this format:   ^^QUAL1(PS1)^QUAL2(PS2)^QAUL3(IS1)^QUAL4(IS2)
"RTN","IBCNHUT2",178,0)
 ;
"RTN","IBCNHUT2",179,0)
 N ID,QL,I,ND
"RTN","IBCNHUT2",180,0)
 F I=0:1:3 S DATA(I)=""
"RTN","IBCNHUT2",181,0)
 S ND(.11)=$G(^DIC(36,INS,.11)),ND(0)=$G(^DIC(36,INS,0))
"RTN","IBCNHUT2",182,0)
 F I=1,2,4:1:7 S DATA(1)=DATA(1)_$P(ND(.11),U,I)_U
"RTN","IBCNHUT2",183,0)
 S DATA(1)=DATA(1)_$P(ND(0),U,13)_U_$P($G(^DIC(36,INS,.13)),U)
"RTN","IBCNHUT2",184,0)
 S ID(7)=$$VID^IBCNHUT1(INS),ND(6)=$G(^DIC(36,INS,6)),ND(3)=$G(^DIC(36,INS,3))
"RTN","IBCNHUT2",185,0)
 S ID(3)=$P(ND(6),U,6),ID(4)=$P(ND(6),U,8),ID(5)=$P(ND(6),U,2),ID(6)=$P(ND(6),U,4)
"RTN","IBCNHUT2",186,0)
 S QL(3)=$P(ND(6),U,5),QL(4)=$P(ND(6),U,7),QL(5)=$P(ND(6),U),QL(6)=$P(ND(6),U,3)
"RTN","IBCNHUT2",187,0)
 S ID(1)=$P(ND(3),U,2),ID(2)=$P(ND(3),U,4),ID(10)=$$UID^IBCNHUT1(INS)
"RTN","IBCNHUT2",188,0)
 S DATA(0)=INS_U_$P(ND(0),U)_U_$P(ND(0),U,5)_U_$$UID^IBCNHUT1(INS)_U_$$NIF^IBCNHUT1(INS)_U_$$HPD^IBCNHUT1(INS)_U_$$SHP^IBCNHUT1(INS)_U_$$PHP^IBCNHUT1(INS)
"RTN","IBCNHUT2",189,0)
 S ID(8)=$P(DATA(0),U,5),ID(9)=$P(DATA(0),U,6)
"RTN","IBCNHUT2",190,0)
 F I=1:1:10 S DATA(2)=DATA(2)_$G(ID(I))_U
"RTN","IBCNHUT2",191,0)
 F I=1:1:6 S DATA(3)=DATA(3)_$G(QL(I))_U
"RTN","IBCNHUT2",192,0)
 K ID,QL,I,ND
"RTN","IBCNHUT2",193,0)
 Q 1
"RTN","IBCNHUT2",194,0)
 ;
"RTN","IBCNHUT2",195,0)
SETUPVER ; Set up verifying of IB NIF TCP logical link
"RTN","IBCNHUT2",196,0)
 ; IB*2.0*549 added method
"RTN","IBCNHUT2",197,0)
 ;
"RTN","IBCNHUT2",198,0)
 N CURRTIME,MTIME
"RTN","IBCNHUT2",199,0)
 N DIFROM,LLIEN,NIFTM,XMDUN,XMDUZ,XMMG,XMSUB,XMTEXT,XMY,XMZ,XX,YY,ZTRTN,ZTDESC
"RTN","IBCNHUT2",200,0)
 N ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNHUT2",201,0)
 ;
"RTN","IBCNHUT2",202,0)
 I '$$PROD^XUPROD(1) G SETUPVRX             ; Only check for stuck messages in production
"RTN","IBCNHUT2",203,0)
 ;
"RTN","IBCNHUT2",204,0)
 S NIFTM=$$GET1^DIQ(350.9,"1,",51.29,"I")   ; Get IB NIF TCP data
"RTN","IBCNHUT2",205,0)
 I NIFTM="" G SETUPVRX                      ; MM message time is not defined
"RTN","IBCNHUT2",206,0)
 S LLIEN=$O(^HLCS(870,"B","IB NIF TCP","")) ; IB NIF TCP Logical Link
"RTN","IBCNHUT2",207,0)
 I LLIEN="" G SETUPVRX
"RTN","IBCNHUT2",208,0)
 ;
"RTN","IBCNHUT2",209,0)
 S CURRTIME=$P($H,",",2)     ; current $H time
"RTN","IBCNHUT2",210,0)
 S MTIME=DT_"."_NIFTM        ; build a FileMan date/time
"RTN","IBCNHUT2",211,0)
 S MTIME=$$FMTH^XLFDT(MTIME) ; convert to $H format
"RTN","IBCNHUT2",212,0)
 S MTIME=$P(MTIME,",",2)     ; $H time of MM message
"RTN","IBCNHUT2",213,0)
 ;
"RTN","IBCNHUT2",214,0)
 ; If the current time is after the MailMan message time, then schedule the message for tomorrow at that time.
"RTN","IBCNHUT2",215,0)
 ; Otherwise, schedule it for later today.
"RTN","IBCNHUT2",216,0)
 S ZTDTH=$S(CURRTIME>MTIME:$H+1,1:+$H)_","_MTIME
"RTN","IBCNHUT2",217,0)
 ;
"RTN","IBCNHUT2",218,0)
 ; Set up the other TaskManager variables
"RTN","IBCNHUT2",219,0)
 S ZTRTN="VERFYLNK^IBCNHUT2"              ; The tag that we want TASKMAN to call
"RTN","IBCNHUT2",220,0)
 S ZTDESC="Verify HL7 Logical link 'IB NIF TCP' is running"
"RTN","IBCNHUT2",221,0)
 S ZTIO=""
"RTN","IBCNHUT2",222,0)
 S ZTSAVE("LLIEN")=""
"RTN","IBCNHUT2",223,0)
 S ZTSAVE("NIFTM")=""
"RTN","IBCNHUT2",224,0)
 D ^%ZTLOAD ; Call TaskManager
"RTN","IBCNHUT2",225,0)
 I '$G(ZTSK) D  ; Task # is not okay
"RTN","IBCNHUT2",226,0)
 . ;
"RTN","IBCNHUT2",227,0)
 . ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNHUT2",228,0)
 . S MGRP="InsuranceRapidResponse@domain.ext"
"RTN","IBCNHUT2",229,0)
 . ;
"RTN","IBCNHUT2",230,0)
 . S XMSUB=" Daily verification of IB NIF TCP link Not Scheduled"
"RTN","IBCNHUT2",231,0)
 . S XMTEXT="XMTEXT("
"RTN","IBCNHUT2",232,0)
 . S XMTEXT(1)="TaskManager could not schedule the daily verification of IB NIF TCP link"
"RTN","IBCNHUT2",233,0)
 . S XMTEXT(2)="at the specified time of "_$E(NIFTM,1,2)_":"_$E(NIFTM,3,4)_"."
"RTN","IBCNHUT2",234,0)
 . D ^XMD
"RTN","IBCNHUT2",235,0)
 ;
"RTN","IBCNHUT2",236,0)
SETUPVRX ;
"RTN","IBCNHUT2",237,0)
 Q
"RTN","IBCNHUT2",238,0)
 ;
"RTN","IBCNHUT2",239,0)
VERFYLNK ; Verify IB NIF TCP entry in the HL Logical Link file (#870) on a daily basis
"RTN","IBCNHUT2",240,0)
 ; IB*2.0*549 added Method
"RTN","IBCNHUT2",241,0)
 ; Input - LLIEN [thru ZTSAVE("LLIEN")]
"RTN","IBCNHUT2",242,0)
 ;         NIFTM [thru ZTSAVE("NIFTM")]
"RTN","IBCNHUT2",243,0)
 ;
"RTN","IBCNHUT2",244,0)
 N FLG,IEN,X,XMSUB,XMTEXT,XMY,XX,YY
"RTN","IBCNHUT2",245,0)
 S IEN=$O(^HLMA("AC","O",LLIEN,""))
"RTN","IBCNHUT2",246,0)
 I IEN="" S FLG=1
"RTN","IBCNHUT2",247,0)
 E  D
"RTN","IBCNHUT2",248,0)
 . H 30
"RTN","IBCNHUT2",249,0)
 . S FLG=$S('$D(^HLMA("AC","O",LLIEN,IEN)):1,1:0) ; Processing observed / No processing
"RTN","IBCNHUT2",250,0)
 ;
"RTN","IBCNHUT2",251,0)
 I 'FLG D  ; Link is apparently not processing records
"RTN","IBCNHUT2",252,0)
 . S XX=$$SITE^VASITE()
"RTN","IBCNHUT2",253,0)
 . S YY=$P(XX,"^",2)_"(#"_$P(XX,"^",1)_")"
"RTN","IBCNHUT2",254,0)
 . S X="No activity seen in link"
"RTN","IBCNHUT2",255,0)
 . ;
"RTN","IBCNHUT2",256,0)
 . ; Send a MailMan message if link is not processing records
"RTN","IBCNHUT2",257,0)
 . S XMY("InsuranceRapidResponse@domain.ext")=""
"RTN","IBCNHUT2",258,0)
 . S XMY(.5)=""
"RTN","IBCNHUT2",259,0)
 . ;
"RTN","IBCNHUT2",260,0)
 . S XMSUB=" Daily verification of IB NIF TCP link: "_X
"RTN","IBCNHUT2",261,0)
 . S XMTEXT="XMTEXT("
"RTN","IBCNHUT2",262,0)
 . S XMTEXT(1)="Daily verification of IB NIF TCP was unsuccessful ("_X_")"
"RTN","IBCNHUT2",263,0)
 . S XMTEXT(2)="at the specified time of "_$E(NIFTM,1,2)_":"_$E(NIFTM,3,4)_" for site: "_YY_"."
"RTN","IBCNHUT2",264,0)
 . D ^XMD
"RTN","IBCNHUT2",265,0)
 Q
"RTN","IBCNHUT2",266,0)
 ;
"RTN","IBCNHUT2",267,0)
LEG(TQN,INS) ; function to determine if legacy ID's changed since we sent them out
"RTN","IBCNHUT2",268,0)
 ; returns a 0 if Legacy ID has not changed and a "1^EL^Error:  Legacy ID Changed!" if it has.
"RTN","IBCNHUT2",269,0)
 ;
"RTN","IBCNHUT2",270,0)
 N N,TID,I
"RTN","IBCNHUT2",271,0)
 Q:TQN="" 0
"RTN","IBCNHUT2",272,0)
 Q:INS="" 0
"RTN","IBCNHUT2",273,0)
 F I=1,2 D
"RTN","IBCNHUT2",274,0)
 .S N=$O(^IBCNH(367.1,TQN,1,"B",I,"")) Q:N=""
"RTN","IBCNHUT2",275,0)
 .S TID(I)=$P($G(^IBCNH(367.1,TQN,1,N,0)),U,2)
"RTN","IBCNHUT2",276,0)
 Q:$G(TID(1))'=$P($G(^DIC(36,INS,3)),U,2) "1^EL^Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",277,0)
 Q:$G(TID(2))'=$P($G(^DIC(36,INS,3)),U,4) "1^EL^Error:  Legacy ID Changed!"
"RTN","IBCNHUT2",278,0)
 K N,TID,I
"RTN","IBCNHUT2",279,0)
 Q 0
"RTN","IBCNHUT2",280,0)
  ;
"RTN","IBCNHUT2",281,0)
SMAIL(MGRP,XMSUB,MSG) ; Summary email
"RTN","IBCNHUT2",282,0)
 ; IB*2.0*549 Send e-mail
"RTN","IBCNHUT2",283,0)
 N DIFROM,XMDUN,XMDUZ,XMMG,XMTEXT,XMY,XMZ
"RTN","IBCNHUT2",284,0)
 S XMY(MGRP)=""
"RTN","IBCNHUT2",285,0)
 S XMTEXT=MSG
"RTN","IBCNHUT2",286,0)
 D ^XMD
"RTN","IBCNHUT2",287,0)
 Q
"RTN","IBCNICB")
0^38^B144732955
"RTN","IBCNICB",1,0)
IBCNICB ;ALB/SBW - Update utilities for the ICB interface ;1 SEP 2009
"RTN","IBCNICB",2,0)
 ;;2.0;INTEGRATED BILLING;**413,416,528,549**;21-MAR-94;Build 54
"RTN","IBCNICB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNICB",4,0)
 ;
"RTN","IBCNICB",5,0)
ACCEPAPI(RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IVMREPTR,IBELIG) ;
"RTN","IBCNICB",6,0)
 ;Provides API to be called by the Insurance Capture Buffer (ICB) 
"RTN","IBCNICB",7,0)
 ;application to move buffer data in Insurance Files then cleanup
"RTN","IBCNICB",8,0)
 ;
"RTN","IBCNICB",9,0)
 ;The call to PROCESS^IBCNBAR and embedded Sub calls are updated to 
"RTN","IBCNICB",10,0)
 ;provide data in the RESULT parameter and suppress user I/O when 
"RTN","IBCNICB",11,0)
 ;function is called by ICB.
"RTN","IBCNICB",12,0)
 ;Input
"RTN","IBCNICB",13,0)
 ;  IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number (IEN) (Required)
"RTN","IBCNICB",14,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",15,0)
 ;  IBINSDA  - INSURANCE COMPANY (#36) File IEN if not adding new entry (Optional)
"RTN","IBCNICB",16,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN if not adding new entry (Optional)
"RTN","IBCNICB",17,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN if
"RTN","IBCNICB",18,0)
 ;             not adding new entry (Optional)
"RTN","IBCNICB",19,0)
 ;  IBMVINS  - Type for INSURANCE (Required)
"RTN","IBCNICB",20,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",21,0)
 ;  IBMVGRP  - Type for GROUP (Optional)
"RTN","IBCNICB",22,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",23,0)
 ;  IBMVPOL  - Type for POLICY (Optional)
"RTN","IBCNICB",24,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",25,0)
 ;  IBNEWINS - Add new INSURANCE COMPANY flag (non-zero means add)
"RTN","IBCNICB",26,0)
 ;  IBNEWGRP - Add new GROUP INSURANCE PLAN flag (non-zero means add)
"RTN","IBCNICB",27,0)
 ;  IBNEWPOL - Add new patient insurance policy (non-zero means add)
"RTN","IBCNICB",28,0)
 ;  IVMREPTR - IVM REASONS FOR NOT UPLOADING (#301.91) IEN (Optional)
"RTN","IBCNICB",29,0)
 ;
"RTN","IBCNICB",30,0)
 ;OUTPUT
"RTN","IBCNICB",31,0)
 ;  RESULT   - Returned Parameter Array with IENS of new entries and/or errors/warning.
"RTN","IBCNICB",32,0)
 ;     RESULT(0) = -1^error message
"RTN","IBCNICB",33,0)
 ;     RESULT(0) =   0 -Move worked
"RTN","IBCNICB",34,0)
 ;     RESULT(0) =   0 ^ warning message ^ warning message ^ 
"RTN","IBCNICB",35,0)
 ;                   warning message ^ warning message
"RTN","IBCNICB",36,0)
 ;             - Move worked but there may be zero to 4 warning messages
"RTN","IBCNICB",37,0)
 ;     RESULT(1) = "IBINSDA^" IEN of new Insurance Company (#36) File
"RTN","IBCNICB",38,0)
 ;     RESULT(1,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",39,0)
 ;                         from file 355.33 to 36.
"RTN","IBCNICB",40,0)
 ;     RESULT(2) = "IBGRPDA^" IEN of new GROUP INSURANCE PLAN (#355.3) File
"RTN","IBCNICB",41,0)
 ;     RESULT(2,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",42,0)
 ;                         from file 355.33 to 355.3.
"RTN","IBCNICB",43,0)
 ;     RESULT(3) = "IBPOLDA^" IEN of new INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN
"RTN","IBCNICB",44,0)
 ;     RESULT(3,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",45,0)
 ;                         from file 355.33 to 2.312.
"RTN","IBCNICB",46,0)
 ;     RESULT(4) Contains the results of the call to UPDPOL^IBCNICB which
"RTN","IBCNICB",47,0)
 ;               is used to update a new group into an existing patient
"RTN","IBCNICB",48,0)
 ;               policy entry when applicable.
"RTN","IBCNICB",49,0)
 ;     RESULT(4) =-1^error message      
"RTN","IBCNICB",50,0)
 ;     RESULT(4) =0 ^ message that process was successful or not required
"RTN","IBCNICB",51,0)
 ;
"RTN","IBCNICB",52,0)
 N IBSUPRES,IBUFSTAT,IBX
"RTN","IBCNICB",53,0)
 I '$D(IBELIG) S IBELIG=0
"RTN","IBCNICB",54,0)
 ;Set IBSUPRES to suppress screen I/O within ACCEPT
"RTN","IBCNICB",55,0)
 S IBSUPRES=1,IBUFSTAT=$P($G(^IBA(355.33,$G(IBBUFDA),0)),U,4)
"RTN","IBCNICB",56,0)
 ;
"RTN","IBCNICB",57,0)
 S RESULT(0)="-1^INSURANCE BUFFER (#355.33) IEN required" Q:'$G(IBBUFDA)
"RTN","IBCNICB",58,0)
 S RESULT(0)="-1^INSURANCE BUFFER ENTRY PREVIOUSLY PROCESSED"
"RTN","IBCNICB",59,0)
 Q:"~A~R~"[("~"_IBUFSTAT_"~")
"RTN","IBCNICB",60,0)
 S RESULT(0)="-1^INSURANCE BUFFER ENTRY STATUS SHOULD BE ENTERED"
"RTN","IBCNICB",61,0)
 Q:IBUFSTAT'="E"
"RTN","IBCNICB",62,0)
 S RESULT(0)="-1^PATIENT (#2) IEN required" Q:'$G(DFN)
"RTN","IBCNICB",63,0)
 S IBINSDA=$G(IBINSDA),IBGRPDA=$G(IBGRPDA),IBPOLDA=$G(IBPOLDA)
"RTN","IBCNICB",64,0)
 S IBMVINS=$G(IBMVINS,2),IBMVGRP=$G(IBMVGRP,2),IBMVPOL=$G(IBMVPOL,2)
"RTN","IBCNICB",65,0)
 S IBNEWINS=$G(IBNEWINS),IBNEWGRP=$G(IBNEWGRP),IBNEWPOL=$G(IBNEWPOL)
"RTN","IBCNICB",66,0)
 ;
"RTN","IBCNICB",67,0)
 S RESULT(0)="-1^Passed INSURANCE COMPANY (#36) entry doesn't exist"
"RTN","IBCNICB",68,0)
 I +IBINSDA,$G(^DIC(36,IBINSDA,0))="" Q
"RTN","IBCNICB",69,0)
 S RESULT(0)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry doesn't exist"
"RTN","IBCNICB",70,0)
 I +IBGRPDA,$G(^IBA(355.3,IBGRPDA,0))="" Q
"RTN","IBCNICB",71,0)
 ; \Beginning IB*2*549 - added the following lines.
"RTN","IBCNICB",72,0)
 S RESULT(0)="-1^Unable to add new INSURANCE COMPANY (#36) - See your supervisor"
"RTN","IBCNICB",73,0)
 I +IBNEWINS,'$D(^XUSEC("IB INSURANCE COMPANY EDIT",DUZ)) Q
"RTN","IBCNICB",74,0)
 S RESULT(0)="-1^Unable to add new GROUP INSURANCE PLAN (#355.3) - See your supervisor"
"RTN","IBCNICB",75,0)
 I +IBNEWGRP,'$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) Q
"RTN","IBCNICB",76,0)
 S RESULT(0)="-1^Unable to add new GROUP INSURANCE PLAN (#355.3) - Duplicate Group Plan"
"RTN","IBCNICB",77,0)
 ;
"RTN","IBCNICB",78,0)
 ; If new insurance company cont. processing
"RTN","IBCNICB",79,0)
 I '(+IBNEWINS),+IBNEWGRP,$$EXACTM^IBCNICB2(IBINSDA,IBBUFDA) Q
"RTN","IBCNICB",80,0)
 ; \End of IB*2*549
"RTN","IBCNICB",81,0)
 S RESULT(0)="-1^Passed Patient INSURANCE TYPE (#2.312) entry doesn't exist"
"RTN","IBCNICB",82,0)
 I +IBPOLDA,$G(^DPT(DFN,.312,IBPOLDA,0))="" Q
"RTN","IBCNICB",83,0)
 S RESULT(0)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry"
"RTN","IBCNICB",84,0)
 I +IBGRPDA,+IBINSDA,+$G(^IBA(355.3,IBGRPDA,0))'=IBINSDA Q
"RTN","IBCNICB",85,0)
 S RESULT(0)="-1^Individual Policy Patient required to be Patient DFN when Group Insurance Plan is not Group Policy"
"RTN","IBCNICB",86,0)
 I +IBGRPDA S IBX=$G(^IBA(355.3,IBGRPDA,0)) I $P(IBX,U,2)=0,+$P(IBX,U,10),$P(IBX,U,10)'=DFN Q
"RTN","IBCNICB",87,0)
 ;
"RTN","IBCNICB",88,0)
 ;If existing GROUP INSURANCE PLAN (#355.3) entry is being changed from 
"RTN","IBCNICB",89,0)
 ;a group plan to individual plan with other subscribers, send error 
"RTN","IBCNICB",90,0)
 ;message and abort update
"RTN","IBCNICB",91,0)
 S RESULT(0)="-1^Can't change GROUP INSURANCE PLAN from Group Plan to Individual Plan when there are subscribers"
"RTN","IBCNICB",92,0)
 I +IBGRPDA,$P(IBX,U,2)=1,$P($G(^IBA(355.33,+$G(IBBUFDA),40)),U,1)'=1,$$SUBS^IBCNSJ(IBINSDA,IBGRPDA)>1 Q
"RTN","IBCNICB",93,0)
 ;
"RTN","IBCNICB",94,0)
 D PROCESS^IBCNBAR
"RTN","IBCNICB",95,0)
 Q
"RTN","IBCNICB",96,0)
 ;
"RTN","IBCNICB",97,0)
REJECAPI(RESULT,IBBUFDA,IVMREPTR) ;
"RTN","IBCNICB",98,0)
 ;Provides API to be called by the Insurance Capture Buffer (ICB) 
"RTN","IBCNICB",99,0)
 ;application to reject buffer entry.
"RTN","IBCNICB",100,0)
 ;The REJPROC^IBCNBAR call and embedded Sub calls are updated to 
"RTN","IBCNICB",101,0)
 ;provide data in the RESULT parameter and suppress I/O when function 
"RTN","IBCNICB",102,0)
 ;is called by ICB.
"RTN","IBCNICB",103,0)
 ;Input:
"RTN","IBCNICB",104,0)
 ;   IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number
"RTN","IBCNICB",105,0)
 ;              (required)
"RTN","IBCNICB",106,0)
 ;   IVMREPTR - IVM REASONS FOR NOT UPLOADING (#301.91) File internal
"RTN","IBCNICB",107,0)
 ;              internal entry number (Optional)
"RTN","IBCNICB",108,0)
 ;Output:
"RTN","IBCNICB",109,0)
 ;   RESULT   - Returned parameter variable with errors messages if
"RTN","IBCNICB",110,0)
 ;              problems with the reject processing. Format:
"RTN","IBCNICB",111,0)
 ;     REJECT = -1 ^ error message
"RTN","IBCNICB",112,0)
 ;     REJECT =  0                     - Reject worked
"RTN","IBCNICB",113,0)
 ;     REJECT =  0 ^ warning message   - Reject process worked but there
"RTN","IBCNICB",114,0)
 ;                                       is a warning message
"RTN","IBCNICB",115,0)
 ;
"RTN","IBCNICB",116,0)
 N IBSUPRES
"RTN","IBCNICB",117,0)
 ;Set IBSUPRES to suppress screen I/O within REJECT
"RTN","IBCNICB",118,0)
 S IBSUPRES=1
"RTN","IBCNICB",119,0)
 S RESULT="-1^INSURANCE BUFFER IEN required" Q:'$G(IBBUFDA)
"RTN","IBCNICB",120,0)
 S RESULT="-1^INSURANCE BUFFER ENTRY PREVIOUSLY PROCESSED"
"RTN","IBCNICB",121,0)
 Q:"~A~R~"[("~"_$$GET1^DIQ(355.33,IBBUFDA,.04,"I")_"~")
"RTN","IBCNICB",122,0)
 D REJPROC^IBCNBAR
"RTN","IBCNICB",123,0)
 Q
"RTN","IBCNICB",124,0)
 ;
"RTN","IBCNICB",125,0)
UPDTICB(RESULT,DFN,IBPOLDA,IBGRPDA,IBPOLCOM,IBPOLBIL,IBPLAN,IBELEC,IBGPCOM,IBFTF,IBFTFVAL) ;
"RTN","IBCNICB",126,0)
 ;Updates additional fields for ICB Interface
"RTN","IBCNICB",127,0)
 ;
"RTN","IBCNICB",128,0)
 ;Input:
"RTN","IBCNICB",129,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",130,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN (Optional)
"RTN","IBCNICB",131,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN 
"RTN","IBCNICB",132,0)
 ;             (Optional)
"RTN","IBCNICB",133,0)
 ;  IBPOLCOM - Data to be filed into the COMMENT - SUBSCRIBER POLICY 
"RTN","IBCNICB",134,0)
 ;              MULTIPLE (2.312, 1.18) optional
"RTN","IBCNICB",135,0)
 ;  IBPOLBIL - Data to be filed into the STOP POLICY FROM BILLING  (#3.04)
"RTN","IBCNICB",136,0)
 ;             field of the 2.312 sub-file. (Optional)
"RTN","IBCNICB",137,0)
 ;             Corresponds to the Internal codes in 3.04 field of 
"RTN","IBCNICB",138,0)
 ;             2.312 sub-file: '0' FOR NO; '1' FOR YES;
"RTN","IBCNICB",139,0)
 ;  IBPLAN   - Data to be filed in PLAN FILING TIME FRAME (#.13) field 
"RTN","IBCNICB",140,0)
 ;             of 355.3 file (Optional)
"RTN","IBCNICB",141,0)
 ;  IBELEC   - Data to be file in ELECTRONIC PLAN TYPE  (#.15) field 
"RTN","IBCNICB",142,0)
 ;             of 355.3 file (Optional)
"RTN","IBCNICB",143,0)
 ;             Corresponds to the Internal Codes in .15 field of 355.3 file
"RTN","IBCNICB",144,0)
 ;  IBGPCOM  - Group Plan Comment array that contains the word
"RTN","IBCNICB",145,0)
 ;             processing data to be filed the COMMENTS (#11) word-
"RTN","IBCNICB",146,0)
 ;             processing field of  355.3 file. (Optional)
"RTN","IBCNICB",147,0)
 ;              Example:  IBGPCOM(1)="This is line 1"
"RTN","IBCNICB",148,0)
 ;                        IBGPCOM(2)="This is line 2"
"RTN","IBCNICB",149,0)
 ;  IBFTF    - Data to be filed in the PLAN STANDARD FTF (#.16) field of
"RTN","IBCNICB",150,0)
 ;             355.3 file (Optional)
"RTN","IBCNICB",151,0)
 ;             Corresponds to the Internal Entry Number of the entry in 
"RTN","IBCNICB",152,0)
 ;             the INSURANCE FILING TIME FRAME (#355.13) File.
"RTN","IBCNICB",153,0)
 ;  IBFTFVAL - Data to be filed in the PLAN STANDARD FTF VALUE (#.17)
"RTN","IBCNICB",154,0)
 ;             field of 355.3 file (Optional - Calling application 
"RTN","IBCNICB",155,0)
 ;             responsible to pass value if required for Plan Standard FTF) 
"RTN","IBCNICB",156,0)
 ;
"RTN","IBCNICB",157,0)
 ;Output:
"RTN","IBCNICB",158,0)
 ;  RESULT - Returned Parameter Array with results of call
"RTN","IBCNICB",159,0)
 ;   RESULT = 0 ^ No data to update
"RTN","IBCNICB",160,0)
 ;   RESULT(1) = -1^ error with Insurance Type (#2.312) file update
"RTN","IBCNICB",161,0)
 ;   RESULT(1) = 0                   - Insurance Type update worked
"RTN","IBCNICB",162,0)
 ;   RESULT(2) = -1^ error with GROUP INSURANCE PLAN (#355.3) file update
"RTN","IBCNICB",163,0)
 ;   RESULT(2) = 0                   - Group Insurance Plan update worked
"RTN","IBCNICB",164,0)
 ;
"RTN","IBCNICB",165,0)
 ; Update Patient Policy Comment (#1.08) and/or 
"RTN","IBCNICB",166,0)
 ; Stop Policy From Billing (#3.04) fields in 2.312 subfile
"RTN","IBCNICB",167,0)
 I $G(IBPOLCOM)]""!($G(IBPOLBIL)]"") D
"RTN","IBCNICB",168,0)
 . N IBIENS,IBFDA
"RTN","IBCNICB",169,0)
 . I $G(DFN)']"" S RESULT(1)="-1^PATIENT (#2) DFN not passed" Q
"RTN","IBCNICB",170,0)
 . I $G(IBPOLDA)'>0 S RESULT(1)="-1^INSURANCE TYPE (#2.312) sub-file IEN not defined" Q
"RTN","IBCNICB",171,0)
 . I +IBPOLDA,$G(^DPT(DFN,.312,IBPOLDA,0))="" S RESULT(0)="-1^Passed Patient INSURANCE TYPE (#2.312) entry doesn't exist" Q
"RTN","IBCNICB",172,0)
 . L +^DPT(DFN,.312,IBPOLDA):5 I '$T S RESULT(1)="-1^INSURANCE TYPE (#2.312) sub-file entry locked, data not updated" Q
"RTN","IBCNICB",173,0)
 . S IBIENS=+IBPOLDA_","_+DFN_","
"RTN","IBCNICB",174,0)
 . ; IB*2.0*549 Change IS THIS POLICY BILLABLE to STOP POLICY FROM BILLING
"RTN","IBCNICB",175,0)
 . I $G(IBPOLBIL)]"",$$EXTERNAL^DILFD(2.312,3.04,"",IBPOLBIL)']"" S RESULT(1)="-1^STOP POLICY FROM BILLING ("_IBPOLBIL_") not a valid value",IBPOLBIL=""
"RTN","IBCNICB",176,0)
 . S:$G(IBPOLBIL)]"" IBFDA(2.312,IBIENS,3.04)=IBPOLBIL
"RTN","IBCNICB",177,0)
 . I $D(IBFDA)>0 D FILE^DIE(,"IBFDA") S:$D(RESULT(1))'>0 RESULT(1)=0
"RTN","IBCNICB",178,0)
 . D PPCOMM(DFN,IBPOLDA,IBPOLCOM,.RESULT)
"RTN","IBCNICB",179,0)
 . L -^DPT(DFN,.312,IBPOLDA)
"RTN","IBCNICB",180,0)
 ;
"RTN","IBCNICB",181,0)
 ; Update Plan Filing Time Frame (#.13), Electronic Plan Type (#.15)
"RTN","IBCNICB",182,0)
 ; Plan Standard FTF (#.16), Plan Standard FTF Value (#.17), and/or
"RTN","IBCNICB",183,0)
 ; Group Plan Comments (#11) fields in 355.3 file
"RTN","IBCNICB",184,0)
 I $G(IBPLAN)]""!($G(IBELEC)]"")!($D(IBGPCOM)>0)!($G(IBFTF)]"")!($G(IBFTFVAL)]"") D
"RTN","IBCNICB",185,0)
 . N IBIENS,IBFDA
"RTN","IBCNICB",186,0)
 . I $G(IBGRPDA)'>0 S RESULT(2)="-1^GROUP INSURANCE PLAN (#355.3) file IEN not defined" Q
"RTN","IBCNICB",187,0)
 . I +IBGRPDA,$G(^IBA(355.3,IBGRPDA,0))="" S RESULT(2)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry doesn't exist" Q
"RTN","IBCNICB",188,0)
 . L +^IBA(355.3,IBGRPDA):5 I '$T S RESULT(2)="-1^GROUP INSURANCE PLAN (#355.3) file entry locked, data not updated" Q
"RTN","IBCNICB",189,0)
 . S IBIENS=+IBGRPDA_","
"RTN","IBCNICB",190,0)
 . ; Consistency Checks for Plan Standard FTF and FTF VALUE fields
"RTN","IBCNICB",191,0)
 . I $G(IBELEC)]"",$$EXTERNAL^DILFD(355.3,.15,"",IBELEC)']"" S RESULT(2)="-1^ELECTRONIC PLAN TYPE ("_IBELEC_") not a valid value",IBELEC=""
"RTN","IBCNICB",192,0)
 . I $G(IBFTFVAL)]"",$G(IBFTF)']"" S RESULT(2)="-1^PLAN STANDARD FTF should be passed with PLAN STANDARD FTF VALUE",IBFTFVAL=""
"RTN","IBCNICB",193,0)
 . I $G(IBFTF)]"",$$EXTERNAL^DILFD(355.3,.16,"",IBFTF)']"" S RESULT(2)="-1^PLAN STANDARD FTF ("_IBFTF_") not a valid value",IBFTF=""
"RTN","IBCNICB",194,0)
 . I $G(IBFTF)]"",$$GET1^DIQ(355.13,+IBFTF_",",.02,"I")=1,$G(IBFTFVAL)'>0 S RESULT(2)="-1^Valid PLAN STANDARD FTF VALUE not passed for "_$$GET1^DIQ(355.13,+IBFTF,.01,"E"),IBFTF="",IBFTFVAL=""
"RTN","IBCNICB",195,0)
 . ;
"RTN","IBCNICB",196,0)
 . S:$G(IBPLAN)]"" IBFDA(355.3,IBIENS,.13)=IBPLAN
"RTN","IBCNICB",197,0)
 . S:$G(IBELEC)]"" IBFDA(355.3,IBIENS,.15)=IBELEC
"RTN","IBCNICB",198,0)
 . S:$G(IBFTF)]"" IBFDA(355.3,IBIENS,.16)=IBFTF
"RTN","IBCNICB",199,0)
 . S:$G(IBFTFVAL)]"" IBFDA(355.3,IBIENS,.17)=IBFTFVAL
"RTN","IBCNICB",200,0)
 . I $D(IBFDA)>0 D FILE^DIE(,"IBFDA") S:$D(RESULT(2))'>0 RESULT(2)=0
"RTN","IBCNICB",201,0)
 . ;
"RTN","IBCNICB",202,0)
 . ; Update Group Plan Comments (#11) word processing field in 355.3 file
"RTN","IBCNICB",203,0)
 . I $O(IBGPCOM(""))>0 D WP^DIE(355.3,+IBGRPDA_",",11,,"IBGPCOM") S:$D(RESULT(2))'>0 RESULT(2)=0
"RTN","IBCNICB",204,0)
 . L -^IBA(355.3,IBGRPDA)
"RTN","IBCNICB",205,0)
 I $D(RESULT(1))'>0&($D(RESULT(2))'>0) S RESULT="0^No data to update"
"RTN","IBCNICB",206,0)
 Q
"RTN","IBCNICB",207,0)
 ;
"RTN","IBCNICB",208,0)
PPCOMM(DFN,IBPOLDA,IBPOLCOM,RESULT) ; ib*2*528   record patient policy comments
"RTN","IBCNICB",209,0)
 ; Input:
"RTN","IBCNICB",210,0)
 ;   DFN      = patient IEN
"RTN","IBCNICB",211,0)
 ;   IBPOLDA  = ien of selected INSURANCE POLICY at ^DPT("_DFN_",.312,
"RTN","IBCNICB",212,0)
 ;   IBPOLCOM = patient policy COMMENT data
"RTN","IBCNICB",213,0)
 ;
"RTN","IBCNICB",214,0)
 ; Output:
"RTN","IBCNICB",215,0)
 ;   RESULT   = Returned Parameter Array with results of call
"RTN","IBCNICB",216,0)
 ;
"RTN","IBCNICB",217,0)
 N IBDT,IBVCOM
"RTN","IBCNICB",218,0)
 S IBVCOM=""
"RTN","IBCNICB",219,0)
 ;
"RTN","IBCNICB",220,0)
 ; -- get the last comment made for the policy within VistA
"RTN","IBCNICB",221,0)
 S IBDT=$O(^DPT(DFN,.312,IBPOLDA,13,"B",""),-1)
"RTN","IBCNICB",222,0)
 I IBDT]"" S IBCDA=$O(^DPT(DFN,.312,IBPOLDA,13,"B",IBDT,""),-1) S IBVCOM=$G(^DPT(DFN,.312,IBPOLDA,13,IBCDA,1))
"RTN","IBCNICB",223,0)
 ;
"RTN","IBCNICB",224,0)
 ; -- no VistA comments for patient policy so go add the new ICB comment
"RTN","IBCNICB",225,0)
 I IBVCOM="",IBPOLCOM]"" D ADCOM(DFN,IBPOLDA,IBPOLCOM,.RESULT) Q
"RTN","IBCNICB",226,0)
 ;
"RTN","IBCNICB",227,0)
 ; -- the last comment within VistA is the same comment as the new ICB comment
"RTN","IBCNICB",228,0)
 I IBVCOM=IBPOLCOM Q
"RTN","IBCNICB",229,0)
 ;
"RTN","IBCNICB",230,0)
 ; -- VistA comment is different from ICB comment so add the ICB comment
"RTN","IBCNICB",231,0)
 D ADCOM(DFN,IBPOLDA,IBPOLCOM,.RESULT)
"RTN","IBCNICB",232,0)
 Q
"RTN","IBCNICB",233,0)
 ;
"RTN","IBCNICB",234,0)
ADCOM(DFN,IBPOLDA,IBPOLCOM,RESULT) ; add new entry to the COMMENT - SUBSCRIBER POLICY multiple
"RTN","IBCNICB",235,0)
 ; Input:
"RTN","IBCNICB",236,0)
 ;   DFN      = patient IEN
"RTN","IBCNICB",237,0)
 ;   IBPOLDA  = ien of INSURANCE POLICY at ^DPT("_DFN_",.312,
"RTN","IBCNICB",238,0)
 ;   IBPOLCOM = patient policy COMMENT data
"RTN","IBCNICB",239,0)
 ;   DUZ      = user IEN - system wide variable   
"RTN","IBCNICB",240,0)
 ;
"RTN","IBCNICB",241,0)
 ; Output:
"RTN","IBCNICB",242,0)
 ;   RESULT   = Returned Parameter Array with results of call
"RTN","IBCNICB",243,0)
 ;
"RTN","IBCNICB",244,0)
 ; -- lock the COMMENT - SUBSCRIBER POLICY multiple so that previous comments can't be edited
"RTN","IBCNICB",245,0)
 L +^DPT(DFN,.312,IBPOLDA,13):5 I '$T S RESULT(1)="-1^INSURANCE TYPE (#2.312,1.18) sub-file entry locked, data not updated" Q
"RTN","IBCNICB",246,0)
 ;
"RTN","IBCNICB",247,0)
 N FDA,IENS,DIERR
"RTN","IBCNICB",248,0)
 ;
"RTN","IBCNICB",249,0)
 ; -- populate the FDA array with data
"RTN","IBCNICB",250,0)
 S IENS="+1,"_IBPOLDA_","_DFN_","
"RTN","IBCNICB",251,0)
 S FDA(2.342,IENS,.01)=$$NOW^XLFDT()
"RTN","IBCNICB",252,0)
 S FDA(2.342,IENS,.02)=DUZ
"RTN","IBCNICB",253,0)
 S FDA(2.342,IENS,.03)=IBPOLCOM
"RTN","IBCNICB",254,0)
 ;
"RTN","IBCNICB",255,0)
 ; -- update comment
"RTN","IBCNICB",256,0)
 D UPDATE^DIE(,"FDA",,"DIERR")
"RTN","IBCNICB",257,0)
 ;
"RTN","IBCNICB",258,0)
 ; -- check for error
"RTN","IBCNICB",259,0)
 I $D(DIERR) S RESULT(1)="-1^INSURANCE TYPE (#2.312,1.18) error adding comment to INSURANCE TYPE (#2.312,1.18)"
"RTN","IBCNICB",260,0)
 E  S RESULT(1)=0
"RTN","IBCNICB",261,0)
 ;
"RTN","IBCNICB",262,0)
 ; -- unlock comment multiple
"RTN","IBCNICB",263,0)
 L -^DPT(DFN,.312,IBPOLDA,13)
"RTN","IBCNICB",264,0)
 Q
"RTN","IBCNICB",265,0)
 ;
"RTN","IBCNICB",266,0)
EDCOM(IBPOLDA,IBPOLCOM,IBDT) ; edit the existing entry at 2.312,1.18 multiple
"RTN","IBCNICB",267,0)
 ; input - IBPOLDA = ien of INSURANCE POLICY at ^DPT("_DFN_",.312,
"RTN","IBCNICB",268,0)
 ;         IBDT = date/time that comment was made
"RTN","IBCNICB",269,0)
 N DA,DIE,DR,IBNM
"RTN","IBCNICB",270,0)
 ; retrieve the latest comment made by the user
"RTN","IBCNICB",271,0)
 S DA=$O(^DPT(DFN,.312,IBPOLDA,13,"BB",DUZ,IBDT,""),-1)
"RTN","IBCNICB",272,0)
 S DIE="^DPT("_DFN_",.312,"_IBPOLDA_",13,"
"RTN","IBCNICB",273,0)
 S DA(2)=DFN,DA(1)=IBPOLDA
"RTN","IBCNICB",274,0)
 ;  retrieve the latest comment made by the user
"RTN","IBCNICB",275,0)
 S IBNM=$$GET1^DIQ(200,DUZ_",",.01,"E")
"RTN","IBCNICB",276,0)
 I $G(^DPT(DFN,.312,IBPOLDA,13,DA,1))]"" S DR=".01///"_$$NOW^XLFDT()_";.02///"_IBNM_";.03///"_IBPOLCOM
"RTN","IBCNICB",277,0)
 E  S DR=".01///@;.02///@"
"RTN","IBCNICB",278,0)
 D ^DIE
"RTN","IBCNICB",279,0)
 Q
"RTN","IBCNICB",280,0)
 ;
"RTN","IBCNICB",281,0)
UPDPOL(RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA) ;update a new group into 
"RTN","IBCNICB",282,0)
 ;an existing patient policy entry for ICB interface
"RTN","IBCNICB",283,0)
 ;Input
"RTN","IBCNICB",284,0)
 ;  IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number (IEN) (Required)
"RTN","IBCNICB",285,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",286,0)
 ;  IBINSDA  - INSURANCE COMPANY (#36) File IEN if not adding new entry (Optional)
"RTN","IBCNICB",287,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN if not adding new entry (Required)
"RTN","IBCNICB",288,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN if
"RTN","IBCNICB",289,0)
 ;             not adding new entry (Required)
"RTN","IBCNICB",290,0)
 ;Output:
"RTN","IBCNICB",291,0)
 ;  RESULT(4) - Returned Parameter Array with results of call
"RTN","IBCNICB",292,0)
 ;     RESULT(4) =-1^error message
"RTN","IBCNICB",293,0)
 ;     RESULT(4) =0 ^ message that process was successful or not require
"RTN","IBCNICB",294,0)
 ;
"RTN","IBCNICB",295,0)
 N IBPAT
"RTN","IBCNICB",296,0)
 I $G(IBBUFDA)'>0 S RESULT(4)="-1^INSURANCE BUFFER (#355.33) IEN required" Q
"RTN","IBCNICB",297,0)
 I $G(DFN)'>0 S RESULT(4)="-1^PATIENT (#2) IEN required" Q
"RTN","IBCNICB",298,0)
 I $G(IBPOLDA)'>0 S RESULT(4)="-1^INSURANCE TYPE (#2.312) SUB-FILE IEN required" Q
"RTN","IBCNICB",299,0)
 I $G(^DPT(DFN,.312,IBPOLDA,0))'>0 S RESULT(4)="-1^PATIENT INSURANCE TYPE(#2.312) entry doesn't exist" Q
"RTN","IBCNICB",300,0)
 I $G(IBGRPDA)'>0 S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) IEN required" Q
"RTN","IBCNICB",301,0)
 ;
"RTN","IBCNICB",302,0)
 ; NO changes required
"RTN","IBCNICB",303,0)
 S IBPAT=$G(^DPT(DFN,.312,IBPOLDA,0))
"RTN","IBCNICB",304,0)
 I $G(IBINSDA)>0,$P(IBPAT,U,1)=IBINSDA,$P(IBPAT,U,18)=IBGRPDA S RESULT(4)="0^NO CHANGE REQUIRE" Q
"RTN","IBCNICB",305,0)
 I $G(IBINSDA)'>0,$P(IBPAT,U,18)=IBGRPDA S RESULT(4)="0^NO CHANGE REQUIRE" Q
"RTN","IBCNICB",306,0)
 ;
"RTN","IBCNICB",307,0)
 ;Additional error checks
"RTN","IBCNICB",308,0)
 I $G(^IBA(355.3,IBGRPDA,0))="" S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry doesn't exist" Q
"RTN","IBCNICB",309,0)
 I $G(IBINSDA)>0,$G(^DIC(36,IBINSDA,0))="" S RESULT(4)="-1^INSURANCE COMPANY (#36) entry doesn't exist" Q
"RTN","IBCNICB",310,0)
 I $G(IBINSDA)>0,$P($G(^IBA(355.3,IBGRPDA,0)),U,1)'=IBINSDA S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry" Q
"RTN","IBCNICB",311,0)
 I $G(IBINSDA)'>0,$P($G(^IBA(355.3,IBGRPDA,0)),U,1)'=$P(IBPAT,U,1) S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry" Q
"RTN","IBCNICB",312,0)
 ;
"RTN","IBCNICB",313,0)
 D CLEANUP
"RTN","IBCNICB",314,0)
 ;
"RTN","IBCNICB",315,0)
 L +^DPT(DFN,.312,IBPOLDA):5 I '$T S RESULT(4)="-1^INSURANCE TYPE (#2.312) SUB-FILE ENTRY LOCKED, DATA NOT UPDATED" Q
"RTN","IBCNICB",316,0)
 ;
"RTN","IBCNICB",317,0)
 N IBXIFN,IBFIELDS,IBERR
"RTN","IBCNICB",318,0)
 S IBXIFN=IBPOLDA_","_DFN_","
"RTN","IBCNICB",319,0)
 I $G(IBINSDA) S IBFIELDS(2.312,IBXIFN,.01)=IBINSDA
"RTN","IBCNICB",320,0)
 S IBFIELDS(2.312,IBXIFN,.18)=IBGRPDA ;policy's group/plan always update 
"RTN","IBCNICB",321,0)
 Q:'$D(IBFIELDS)
"RTN","IBCNICB",322,0)
 ;Source
"RTN","IBCNICB",323,0)
 S IBFIELDS(2.312,IBXIFN,1.09)=$P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,3)
"RTN","IBCNICB",324,0)
 ;Source Date
"RTN","IBCNICB",325,0)
 S IBFIELDS(2.312,IBXIFN,1.1)=+$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNICB",326,0)
 D FILE^DIE("","IBFIELDS","IBERR")
"RTN","IBCNICB",327,0)
 I $D(IBERR)>0 S RESULT(4)="-1^Fileman DIE error"
"RTN","IBCNICB",328,0)
 I $D(IBERR)'>0 S RESULT(4)="0^Data successfully updated"
"RTN","IBCNICB",329,0)
 L -^DPT(DFN,.312,IBPOLDA)
"RTN","IBCNICB",330,0)
 Q
"RTN","IBCNICB",331,0)
 ;
"RTN","IBCNICB",332,0)
CLEANUP ;This logic will delete obsolete Individual Plans, Repoint Insurance 
"RTN","IBCNICB",333,0)
 ;Reviews if Insurance Company changes, and Remove any Old Benefits Used.
"RTN","IBCNICB",334,0)
 N IBPAT,IBOLDINS,IBOLDGRP,IBIP,IBT,IBTNODE0,IBTNODE1,IBFIELDS,IBARR
"RTN","IBCNICB",335,0)
 S IBPAT=$G(^DPT(DFN,.312,IBPOLDA,0))
"RTN","IBCNICB",336,0)
 S IBOLDINS=$P(IBPAT,U,1),IBOLDGRP=$P(IBPAT,U,18)
"RTN","IBCNICB",337,0)
 S IBIP=$P($G(^IBA(355.3,+$P(IBPAT,U,18),0)),U,2)
"RTN","IBCNICB",338,0)
 ;If Old Group Insurance Plan is an Individual Plan with only one
"RTN","IBCNICB",339,0)
 ;subscriber for the same Patient Insurance Policy Entry, delete it
"RTN","IBCNICB",340,0)
 I IBIP=0,$$SUBS^IBCNSJ(IBOLDINS,IBOLDGRP,,"IBARR")'>1,($D(IBARR(DFN,IBPOLDA))>0) D DEL^IBCNSJ(IBOLDGRP)
"RTN","IBCNICB",341,0)
 ;If changing to a new Insurance Company
"RTN","IBCNICB",342,0)
 I $G(IBINSDA)>0,IBOLDINS'=IBINSDA D  Q
"RTN","IBCNICB",343,0)
 . ; - repoint all Insurance Reviews to new company
"RTN","IBCNICB",344,0)
 . I $$IR^IBCNSJ21(DFN,IBPOLDA) D
"RTN","IBCNICB",345,0)
 . S IBT=0
"RTN","IBCNICB",346,0)
 . F  S IBT=$O(^IBT(356.2,"D",DFN,IBT)) Q:'IBT  D
"RTN","IBCNICB",347,0)
 . . S IBTNODE0=$G(^IBT(356.2,IBT,0)),IBTNODE1=$G(^IBT(356.2,IBT,1))
"RTN","IBCNICB",348,0)
 . . I $P(IBTNODE1,U,5)=IBPOLDA,$P(IBTNODE0,U,8)'=IBINSDA D
"RTN","IBCNICB",349,0)
 . . . S IBFIELDS(356.2,IBT_",",.08)=IBINSDA
"RTN","IBCNICB",350,0)
 . . . D FILE^DIE("","IBFIELDS")
"RTN","IBCNICB",351,0)
 ;Delete Benefits Used (#355.5) corresponding to old Patient Group Plan
"RTN","IBCNICB",352,0)
 D DELBU
"RTN","IBCNICB",353,0)
 Q
"RTN","IBCNICB",354,0)
 ;
"RTN","IBCNICB",355,0)
DELBU ;Delete Benefits Used
"RTN","IBCNICB",356,0)
 N IBCDFN,IBPLAN,IBBU
"RTN","IBCNICB",357,0)
 S IBCDFN=IBPOLDA,IBPLAN=IBOLDGRP
"RTN","IBCNICB",358,0)
 ;Get Benefits Used
"RTN","IBCNICB",359,0)
 D BU^IBCNSJ21
"RTN","IBCNICB",360,0)
 ;If there are Benefits Used, then delete them
"RTN","IBCNICB",361,0)
 I $O(IBBU(0)) D
"RTN","IBCNICB",362,0)
 . N IBDAT
"RTN","IBCNICB",363,0)
 . S IBDAT=""
"RTN","IBCNICB",364,0)
 . F  S IBDAT=$O(IBBU(IBDAT)) Q:IBDAT=""  D DBU^IBCNSJ(IBBU(IBDAT))
"RTN","IBCNICB",365,0)
 Q
"RTN","IBCNICB2")
0^62^B5848128
"RTN","IBCNICB2",1,0)
IBCNICB2 ;FA/ALB - Update utilities for the ICB interface ;1 SEP 2009
"RTN","IBCNICB2",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNICB2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNICB2",4,0)
 ;
"RTN","IBCNICB2",5,0)
 ; IB*2.0*549 - New routine because of routine size of IBCNICB
"RTN","IBCNICB2",6,0)
 ;
"RTN","IBCNICB2",7,0)
EXACTM(IBINSDA,IBBUFDA) ;EP
"RTN","IBCNICB2",8,0)
 ; Check for an exact match on an existing group plan  when trying to add a
"RTN","IBCNICB2",9,0)
 ; new one
"RTN","IBCNICB2",10,0)
 ; IB*2.0*549 - Added method
"RTN","IBCNICB2",11,0)
 ; Input:   IBINSDA     - IEN of the Insurance Company (file 36) associated
"RTN","IBCNICB2",12,0)
 ;                        with the group plan being added
"RTN","IBCNICB2",13,0)
 ;          IBBUFDA     - IEN of the Insurance Buffer entry (file 355.33)
"RTN","IBCNICB2",14,0)
 ; Returns: 1 - Exact match found on Insurance Company, Group Name and Group Number
"RTN","IBCNICB2",15,0)
 ;          0 - Otherwise
"RTN","IBCNICB2",16,0)
 N BGRPNM,BGRPNUM,FOUND,GRPNM,GRPNUM,IEN
"RTN","IBCNICB2",17,0)
 S BGRPNM=$$GET1^DIQ(355.33,IBBUFDA_",",90.01)      ; External Group Name from buffer
"RTN","IBCNICB2",18,0)
 S BGRPNM=$$UP^XLFSTR(BGRPNM)                       ; Convert to Upper case
"RTN","IBCNICB2",19,0)
 S BGRPNM=$$TRIM^XLFSTR(BGRPNM,"R"," ")             ; Strip Trailing spaces
"RTN","IBCNICB2",20,0)
 S BGRPNUM=$$GET1^DIQ(355.33,IBBUFDA_",",90.02)     ; External Group Number from buffer
"RTN","IBCNICB2",21,0)
 S BGRPNUM=$$UP^XLFSTR(BGRPNUM)                     ; Convert to Upper case
"RTN","IBCNICB2",22,0)
 S BGRPNUM=$$TRIM^XLFSTR(BGRPNUM,"R"," ")           ; Strip Trailing spaces
"RTN","IBCNICB2",23,0)
 S FOUND=0,IEN=""
"RTN","IBCNICB2",24,0)
 ;
"RTN","IBCNICB2",25,0)
 ; No need to execute for loop if no group name and no group number
"RTN","IBCNICB2",26,0)
 I BGRPNM="",BGRPNUM="" Q FOUND
"RTN","IBCNICB2",27,0)
 F  D  Q:IEN=""!FOUND
"RTN","IBCNICB2",28,0)
 . S IEN=$O(^IBA(355.3,"B",IBINSDA,IEN))
"RTN","IBCNICB2",29,0)
 . Q:IEN=""
"RTN","IBCNICB2",30,0)
 . S GRPNM=$$GET1^DIQ(355.3,IEN_",",2.01)           ; External Group Name from group plan
"RTN","IBCNICB2",31,0)
 . S GRPNM=$$UP^XLFSTR(GRPNM)                       ; Convert to Upper case
"RTN","IBCNICB2",32,0)
 . S GRPNM=$$TRIM^XLFSTR(GRPNM,"R"," ")             ; Strip Trailing spaces
"RTN","IBCNICB2",33,0)
 . Q:GRPNM'=BGRPNM                                  ; Not an 'exact' match
"RTN","IBCNICB2",34,0)
 . S GRPNUM=$$GET1^DIQ(355.3,IEN_",",2.02)          ; External Group Number from group plan
"RTN","IBCNICB2",35,0)
 . S GRPNUM=$$UP^XLFSTR(GRPNUM)                     ; Convert to Upper case
"RTN","IBCNICB2",36,0)
 . S GRPNUM=$$TRIM^XLFSTR(GRPNUM,"R"," ")           ; Strip Trailing spaces
"RTN","IBCNICB2",37,0)
 . Q:GRPNUM'=BGRPNUM                                ; Not an 'exact' match
"RTN","IBCNICB2",38,0)
 . S FOUND=1
"RTN","IBCNICB2",39,0)
 Q FOUND
"RTN","IBCNICB2",40,0)
 ; 
"RTN","IBCNILK")
0^21^B142073526
"RTN","IBCNILK",1,0)
IBCNILK ;ALB/FA - Insurance Company Selection ; 02-OCT-2015
"RTN","IBCNILK",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBCNILK",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNILK",4,0)
 ;;
"RTN","IBCNILK",5,0)
 ;
"RTN","IBCNILK",6,0)
EN(WHICH,PIEN,FILTER) ;EP
"RTN","IBCNILK",7,0)
 ; Main entry point for the Insurance Company Selection template
"RTN","IBCNILK",8,0)
 ; Input:   WHICH     - 1 - Only Show Active Insurance Companies
"RTN","IBCNILK",9,0)
 ;                      0 - Only Show Inactive Insurance Companies
"RTN","IBCNILK",10,0)
 ;                      2 - Show Both Active and Inactive Insurance Companies
"RTN","IBCNILK",11,0)
 ;          PIEN      - IEN of the Payer to use to filter Insurance Company
"RTN","IBCNILK",12,0)
 ;                      lookups. Optional, defaults to "".
"RTN","IBCNILK",13,0)
 ;          FILTER    - A^B^C Where:
"RTN","IBCNILK",14,0)
 ;                       A - 1 - Search for Insurance Companies that begin with
"RTN","IBCNILK",15,0)
 ;                               the specified text (case insensitive)
"RTN","IBCNILK",16,0)
 ;                           2 - Search for Insurance Companies that contain
"RTN","IBCNILK",17,0)
 ;                               the specified text (case insensitive)
"RTN","IBCNILK",18,0)
 ;                           3 - Search for Insurance Companies in a specified
"RTN","IBCNILK",19,0)
 ;                               range (inclusive, case insensitive)
"RTN","IBCNILK",20,0)
 ;                           4 - Filter by Selected Payer only
"RTN","IBCNILK",21,0)
 ;                       B - Begin with text if A=1, Contains Text if A=2 or
"RTN","IBCNILK",22,0)
 ;                            the range start if A=3
"RTN","IBCNILK",23,0)
 ;                       C - Range End text (only present when A=3)
"RTN","IBCNILK",24,0)
 ;                      Optional, if not passed, user is prompted for filter
"RTN","IBCNILK",25,0)
 ;                      selection
"RTN","IBCNILK",26,0)
 ; Output:  ^TMP("IBCNILKA,$J,IIEN)    - Array of selected insurance companies
"RTN","IBCNILK",27,0)
 N NUMSEL
"RTN","IBCNILK",28,0)
 S:'$D(PIEN) PIEN=""
"RTN","IBCNILK",29,0)
 S:'$D(FILTER) FILTER=$$GETFILT()
"RTN","IBCNILK",30,0)
 Q:FILTER=""
"RTN","IBCNILK",31,0)
 S NUMSEL=0
"RTN","IBCNILK",32,0)
 K ^TMP("IBCNILKA",$J)
"RTN","IBCNILK",33,0)
 D EN^VALM("IBCN INS CO SELECTOR")
"RTN","IBCNILK",34,0)
 Q
"RTN","IBCNILK",35,0)
 ;
"RTN","IBCNILK",36,0)
NEWSRCH() ; EP
"RTN","IBCNILK",37,0)
 ; Protocol action to get new filter criteria and redisplay the listman
"RTN","IBCNILK",38,0)
 ; template body and header
"RTN","IBCNILK",39,0)
 ; Input:   FILTER      - Current Insurance Company Filter (See EN for details)
"RTN","IBCNILK",40,0)
 ; Output:  FILTER      - Update Insurance Company Filter (See EN for details)
"RTN","IBCNILK",41,0)
 N XX
"RTN","IBCNILK",42,0)
 S VALMBCK="R"
"RTN","IBCNILK",43,0)
 D FULL^VALM1
"RTN","IBCNILK",44,0)
 W !!
"RTN","IBCNILK",45,0)
 S XX=$$GETFILT()
"RTN","IBCNILK",46,0)
 I XX=-1 D  Q
"RTN","IBCNILK",47,0)
 . W *7,"Invalid Filter - nothing done"
"RTN","IBCNILK",48,0)
 . D PAUSE^VALM1
"RTN","IBCNILK",49,0)
 S FILTER=XX
"RTN","IBCNILK",50,0)
 K ^TMP("IBCNILK",$J),^TMP("IBCNILKIX",$J)
"RTN","IBCNILK",51,0)
 D BLD,HDR
"RTN","IBCNILK",52,0)
 Q
"RTN","IBCNILK",53,0)
 ;
"RTN","IBCNILK",54,0)
GETFILT() ; Gets the Insurance company filter
"RTN","IBCNILK",55,0)
 ; Input:   None
"RTN","IBCNILK",56,0)
 ; Returns: A^B^C Where:
"RTN","IBCNILK",57,0)
 ;           A - 1 - Search for Insurance Companies that begin with
"RTN","IBCNILK",58,0)
 ;                   the specified text (case insensitive)
"RTN","IBCNILK",59,0)
 ;               2 - Search for Insurance Companies that contain
"RTN","IBCNILK",60,0)
 ;                   the specified text (case insensitive)
"RTN","IBCNILK",61,0)
 ;               3 - Search for Insurance Companies in a specified
"RTN","IBCNILK",62,0)
 ;                   range (inclusive, case insensitive)
"RTN","IBCNILK",63,0)
 ;           B - Begin with text if A=1, Contains Text if A=2 or
"RTN","IBCNILK",64,0)
 ;               the range start if A=3
"RTN","IBCNILK",65,0)
 ;           C - Range End text (only present when A=3)
"RTN","IBCNILK",66,0)
 ;         -1 if a valid filter was not selected
"RTN","IBCNILK",67,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,FILTER,X,XX,Y
"RTN","IBCNILK",68,0)
 ;
"RTN","IBCNILK",69,0)
 ; First ask what kind of filter to use
"RTN","IBCNILK",70,0)
 W !
"RTN","IBCNILK",71,0)
 S DIR(0)="SA^1:Begins with;2:Contains;3:Range"
"RTN","IBCNILK",72,0)
 S DIR("A")="     Select 1, 2 or 3: "
"RTN","IBCNILK",73,0)
 S DIR("A",1)=" 1 - Select Insurance Companies that Begin with: XXX"
"RTN","IBCNILK",74,0)
 S DIR("A",2)=" 2 - Select Insurance Companies that Contain: XXX"
"RTN","IBCNILK",75,0)
 S DIR("A",3)=" 3 - Select Insurance Companies in Range: XXX - YYY"
"RTN","IBCNILK",76,0)
 S DIR("B")=1
"RTN","IBCNILK",77,0)
 S DIR("?",1)="Select the type of filter to determine what Insurance Companies"
"RTN","IBCNILK",78,0)
 S DIR("?",2)="will be displayed as follows:"
"RTN","IBCNILK",79,0)
 S DIR("?",3)="   Begins with - Displays all insurance companies that begin with"
"RTN","IBCNILK",80,0)
 S DIR("?",4)="                 the specified text (inclusive, case insensitive)"
"RTN","IBCNILK",81,0)
 S DIR("?",5)="   Contains    - Displays all insurance companies that contain"
"RTN","IBCNILK",82,0)
 S DIR("?",6)="                 the specified text (inclusive, case insensitive)"
"RTN","IBCNILK",83,0)
 S DIR("?",7)="   Range       - Displays all insurance companies within the "
"RTN","IBCNILK",84,0)
 S DIR("?")="                 the specified range (inclusive, case insensitive)"
"RTN","IBCNILK",85,0)
 S XX="1:Begins with;2:Contains;3:Range"
"RTN","IBCNILK",86,0)
 D ^DIR
"RTN","IBCNILK",87,0)
 I $D(DTOUT)!$D(DUOUT) Q -1                 ; No valid search selected
"RTN","IBCNILK",88,0)
 S FILTER=Y
"RTN","IBCNILK",89,0)
 ;
"RTN","IBCNILK",90,0)
 ; Next ask for 'Begin with', 'Contains' or 'Range Start' text
"RTN","IBCNILK",91,0)
 W !
"RTN","IBCNILK",92,0)
 K DIR
"RTN","IBCNILK",93,0)
 S DIR(0)="F^1;30"
"RTN","IBCNILK",94,0)
 S XX=$S(FILTER=1:"that begin with",FILTER=2:"that contain",1:"Start of Range")
"RTN","IBCNILK",95,0)
 S DIR("A")="     Select Insurance Companies "_XX
"RTN","IBCNILK",96,0)
 I FILTER=1 D
"RTN","IBCNILK",97,0)
 . S DIR("?")="Enter the text the each Insurance Company will begin with"
"RTN","IBCNILK",98,0)
 I FILTER=2 D
"RTN","IBCNILK",99,0)
 . S DIR("?")="Enter the text the each Insurance Company will contains"
"RTN","IBCNILK",100,0)
 I FILTER=3 D
"RTN","IBCNILK",101,0)
 . S DIR("?")="Enter the starting range text"
"RTN","IBCNILK",102,0)
 D ^DIR K DIR
"RTN","IBCNILK",103,0)
 I $D(DTOUT)!$D(DUOUT) Q -1                 ; No valid search selected
"RTN","IBCNILK",104,0)
 S $P(FILTER,"^",2)=Y
"RTN","IBCNILK",105,0)
 Q:$P(FILTER,"^",1)'=3 FILTER
"RTN","IBCNILK",106,0)
 ;
"RTN","IBCNILK",107,0)
 ; Finally, ask for 'Range End' text if using a range filter
"RTN","IBCNILK",108,0)
 W !
"RTN","IBCNILK",109,0)
 K DIR
"RTN","IBCNILK",110,0)
 S DIR(0)="F^1;30"
"RTN","IBCNILK",111,0)
 S DIR("A")="     Select Insurance Companies End of Range"
"RTN","IBCNILK",112,0)
 S DIR("B")=$P(FILTER,"^",2)
"RTN","IBCNILK",113,0)
 S DIR("?")="Enter the ending Range text"
"RTN","IBCNILK",114,0)
 D ^DIR
"RTN","IBCNILK",115,0)
 I $D(DTOUT)!$D(DUOUT) Q -1                 ; No valid search selected
"RTN","IBCNILK",116,0)
 S $P(FILTER,"^",3)=Y
"RTN","IBCNILK",117,0)
 Q FILTER
"RTN","IBCNILK",118,0)
 ;
"RTN","IBCNILK",119,0)
HDR(SELECTED) ;EP
"RTN","IBCNILK",120,0)
 ; Header code for the Insurance Company Selection template
"RTN","IBCNILK",121,0)
 ; Input:   SELECTED        - 1 - Showing header for selected listman
"RTN","IBCNILK",122,0)
 ;                                Optional, defaults to 0
"RTN","IBCNILK",123,0)
 ;          NUMSEL          - Current # of Insurance Companies Selected
"RTN","IBCNILK",124,0)
 ;          FILTER          - Current Insurance Company Filter (See EN for details)
"RTN","IBCNILK",125,0)
 ;          WHICH           - Active/Inactive/Both filter option
"RTN","IBCNILK",126,0)
 ; Output:  VALMHDR         - Header information to display
"RTN","IBCNILK",127,0)
 N PNM,XX
"RTN","IBCNILK",128,0)
 S:'$D(SELECTED) SELECTED=0
"RTN","IBCNILK",129,0)
 I 'SELECTED D
"RTN","IBCNILK",130,0)
 . I $P(FILTER,"^",1)=4 S VALMHDR(1)="" Q
"RTN","IBCNILK",131,0)
 . I $P(FILTER,"^",1)=1 D  Q
"RTN","IBCNILK",132,0)
 . . S VALMHDR(1)="Insurance Companies that begin with: "_$P(FILTER,"^",2)
"RTN","IBCNILK",133,0)
 . I $P(FILTER,"^",1)=2 D  Q
"RTN","IBCNILK",134,0)
 . . S VALMHDR(1)="Insurance Companies that contain: "_$P(FILTER,"^",2)
"RTN","IBCNILK",135,0)
 . S XX=$P(FILTER,"^",2)_" - "_$P(FILTER,"^",3)
"RTN","IBCNILK",136,0)
 . S VALMHDR(1)="Insurance Companies in range: "_XX
"RTN","IBCNILK",137,0)
 S XX=$S(WHICH=1:"Active ",WHICH=0:"Inactive ",1:"All ")
"RTN","IBCNILK",138,0)
 S XX="Showing "_XX_"Insurance Companies"
"RTN","IBCNILK",139,0)
 ;
"RTN","IBCNILK",140,0)
 ; Add Payer filter, if present
"RTN","IBCNILK",141,0)
 I PIEN'="" D
"RTN","IBCNILK",142,0)
 . S PNM=$E($$GET1^DIQ(365.12,PIEN_",",.01),1,30)
"RTN","IBCNILK",143,0)
 . S PNM="Payer: "_PNM
"RTN","IBCNILK",144,0)
 . S XX=$$SETSTR^VALM1(PNM,XX,40,40)        ; Payer Name
"RTN","IBCNILK",145,0)
 S VALMHDR(2)=XX
"RTN","IBCNILK",146,0)
 S VALMHDR(3)=NUMSEL_" Insurance Companies selected"
"RTN","IBCNILK",147,0)
 Q
"RTN","IBCNILK",148,0)
 ;
"RTN","IBCNILK",149,0)
INIT ;EP
"RTN","IBCNILK",150,0)
 ; Initialize variables and list array
"RTN","IBCNILK",151,0)
 ; Input: None
"RTN","IBCNILK",152,0)
 ; Output:  ^TMP("IBCNILK",$J) - Body lines to display
"RTN","IBCNILK",153,0)
 K ^TMP("IBCNILK",$J),^TMP("IBCNILKIX",$J),^TMP("IBCNILKA",$J)
"RTN","IBCNILK",154,0)
 D BLD
"RTN","IBCNILK",155,0)
 Q
"RTN","IBCNILK",156,0)
 ;
"RTN","IBCNILK",157,0)
BLD ; Build listman body
"RTN","IBCNILK",158,0)
 ; Input:   FILTER    - Current Insurance Company Filter (See EN for details)
"RTN","IBCNILK",159,0)
 ;          WHICH     - 1 - Only Show Active Insurance Companies
"RTN","IBCNILK",160,0)
 ;                      0 - Only Show Inactive Insurance Companies
"RTN","IBCNILK",161,0)
 ;                      2 - Show Both Active and Inactive Insurance Companies
"RTN","IBCNILK",162,0)
 ; Output:  VALMCNT   - Total number of lines displayed in the body
"RTN","IBCNILK",163,0)
 ;          ^TMP("IBCNILK",$J)   - Body lines to display
"RTN","IBCNILK",164,0)
 ;          ^TMP("IBCNILKIX",$J) - Index of Entry IENs by display line
"RTN","IBCNILK",165,0)
 N FTEXT1,FTEXT2,FTYPE,ICTR,IIEN,INACT,INM,INMU,LINE,PLEN,SKIP,START,STOP,XX
"RTN","IBCNILK",166,0)
 S FTYPE=$P(FILTER,"^",1)
"RTN","IBCNILK",167,0)
 S FTEXT1=$P(FILTER,"^",2),FTEXT1=$$UP^XLFSTR(FTEXT1)
"RTN","IBCNILK",168,0)
 S FTEXT2=$P(FILTER,"^",3),FTEXT2=$$UP^XLFSTR(FTEXT2)
"RTN","IBCNILK",169,0)
 S:FTYPE=4 FTEXT1="A"
"RTN","IBCNILK",170,0)
 S:FTYPE=1 PLEN=$L(FTEXT1)
"RTN","IBCNILK",171,0)
 S:FTYPE=3 PLEN=$L(FTEXT2)
"RTN","IBCNILK",172,0)
 S (ICTR,STOP,VALMCNT)=0,INM=""
"RTN","IBCNILK",173,0)
 S:FTYPE'=2 INM=$O(^DIC(36,"B",FTEXT1),-1)
"RTN","IBCNILK",174,0)
 F  D  Q:(INM="")!STOP
"RTN","IBCNILK",175,0)
 . S INM=$O(^DIC(36,"B",INM))
"RTN","IBCNILK",176,0)
 . Q:INM=""
"RTN","IBCNILK",177,0)
 . S INMU=$$UP^XLFSTR(INM)
"RTN","IBCNILK",178,0)
 . I FTYPE=1,$E(INMU,1,PLEN)'=FTEXT1 S STOP=1 Q
"RTN","IBCNILK",179,0)
 . I FTYPE=2,INMU'[FTEXT1 Q
"RTN","IBCNILK",180,0)
 . I FTYPE=3 D  Q:STOP
"RTN","IBCNILK",181,0)
 . . S START=$E(FTEXT1,1,$L(FTEXT1))
"RTN","IBCNILK",182,0)
 . . S XX=$E(INMU,1,$L(FTEXT1))
"RTN","IBCNILK",183,0)
 . . Q:XX=START
"RTN","IBCNILK",184,0)
 . . Q:$E(INMU,1,PLEN)']FTEXT2
"RTN","IBCNILK",185,0)
 . . S STOP=1
"RTN","IBCNILK",186,0)
 . S IIEN=""
"RTN","IBCNILK",187,0)
 . F  D  Q:IIEN=""
"RTN","IBCNILK",188,0)
 . . S IIEN=$O(^DIC(36,"B",INM,IIEN))
"RTN","IBCNILK",189,0)
 . . Q:IIEN=""
"RTN","IBCNILK",190,0)
 . . Q:'$D(^DIC(36,IIEN))                   ; Corrupt data index, skip
"RTN","IBCNILK",191,0)
 . . S SKIP=0
"RTN","IBCNILK",192,0)
 . . I PIEN'="" D  Q:SKIP                   ; Wrong payer
"RTN","IBCNILK",193,0)
 . . . S XX=$$GET1^DIQ(36,IIEN_",",3.1,"I")
"RTN","IBCNILK",194,0)
 . . . S:XX'=PIEN SKIP=1
"RTN","IBCNILK",195,0)
 . . S INACT=+$$GET1^DIQ(36,IIEN_",",.05,"I")
"RTN","IBCNILK",196,0)
 . . I WHICH=1,INACT=1 Q                    ; Not Active
"RTN","IBCNILK",197,0)
 . . I WHICH=0,INACT=0 Q                    ; Not Inactive
"RTN","IBCNILK",198,0)
 . . S ICTR=ICTR+1
"RTN","IBCNILK",199,0)
 . . S LINE=$$BLDLN(ICTR,IIEN)
"RTN","IBCNILK",200,0)
 . . S VALMCNT=VALMCNT+1
"RTN","IBCNILK",201,0)
 . . D SET^VALM10(VALMCNT,LINE,LINE)
"RTN","IBCNILK",202,0)
 . . S ^TMP("IBCNILKIX",$J,ICTR)=IIEN
"RTN","IBCNILK",203,0)
 ;
"RTN","IBCNILK",204,0)
 I VALMCNT=0 D
"RTN","IBCNILK",205,0)
 . S ^TMP("IBCNILK",$J,1,0)="No Insurance Companies matching filter criteria were found."
"RTN","IBCNILK",206,0)
 Q
"RTN","IBCNILK",207,0)
 ;
"RTN","IBCNILK",208,0)
BLDLN(ICTR,IIEN) ;EP
"RTN","IBCNILK",209,0)
 ; Builds a line to display one insurance company
"RTN","IBCNILK",210,0)
 ; Input:   ICTR                        - Selection Number
"RTN","IBCNILK",211,0)
 ;          IIEN                        - IEN of the insurance company to be
"RTN","IBCNILK",212,0)
 ;                                        displayed
"RTN","IBCNILK",213,0)
 ;          ^TMP("IBCNILKA",$J,IIEN)   - Array of currently selected
"RTN","IBCNILK",214,0)
 ;                                        Insurance Companies
"RTN","IBCNILK",215,0)
 ; Output:  LINE    - Formatted for setting into the list display
"RTN","IBCNILK",216,0)
 N LINE,LINEI,XX
"RTN","IBCNILK",217,0)
 S:$D(^TMP("IBCNILKA",$J,IIEN)) ICTR=ICTR_">"       ; Mark as selected
"RTN","IBCNILK",218,0)
 S LINE=$$SETSTR^VALM1(ICTR,"",1,4)                 ; Selection #
"RTN","IBCNILK",219,0)
 S XX=$$GET1^DIQ(36,IIEN_",",.01)
"RTN","IBCNILK",220,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,7,30)                ; Ins Co Name
"RTN","IBCNILK",221,0)
 S XX=+$$GET1^DIQ(36,IIEN_",",.05,"I")
"RTN","IBCNILK",222,0)
 S XX=$S(XX:"I",1:"A")
"RTN","IBCNILK",223,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,41,1)                ; Active/Inactive
"RTN","IBCNILK",224,0)
 S XX=$$GET1^DIQ(36,IIEN_",",.111)
"RTN","IBCNILK",225,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,46,35)               ; Street Address
"RTN","IBCNILK",226,0)
 S XX=$$GET1^DIQ(36,IIEN_",",.114)
"RTN","IBCNILK",227,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,84,25)               ; City
"RTN","IBCNILK",228,0)
 S XX=$$GET1^DIQ(36,IIEN_",",.115,"I")
"RTN","IBCNILK",229,0)
 S XX=$$GET1^DIQ(5,XX_",",1)
"RTN","IBCNILK",230,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,111,2)               ; State
"RTN","IBCNILK",231,0)
 S XX=$$GET1^DIQ(36,IIEN_",",.116)
"RTN","IBCNILK",232,0)
 S LINE=$$SETSTR^VALM1(XX,LINE,116,20)              ; Zip Code
"RTN","IBCNILK",233,0)
 Q LINE
"RTN","IBCNILK",234,0)
 ;
"RTN","IBCNILK",235,0)
HELP ;EP
"RTN","IBCNILK",236,0)
 ; Help code
"RTN","IBCNILK",237,0)
 ; Input: None
"RTN","IBCNILK",238,0)
 D FULL^VALM1
"RTN","IBCNILK",239,0)
 S VALMBCK="R"
"RTN","IBCNILK",240,0)
 W @IOF,"A '>' after the Insurance Company Selection number indicates that this Insurance"
"RTN","IBCNILK",241,0)
 W !,"Company has already been selected."
"RTN","IBCNILK",242,0)
 Q
"RTN","IBCNILK",243,0)
 ;
"RTN","IBCNILK",244,0)
EXIT ;EP
"RTN","IBCNILK",245,0)
 ; Exit code
"RTN","IBCNILK",246,0)
 ; Input: None
"RTN","IBCNILK",247,0)
 K ^TMP("IBCNILK",$J),^TMP("IBCNILKIX",$J)
"RTN","IBCNILK",248,0)
 D CLEAR^VALM1
"RTN","IBCNILK",249,0)
 Q
"RTN","IBCNILK",250,0)
 ;
"RTN","IBCNILK",251,0)
SEL ;EP
"RTN","IBCNILK",252,0)
 ; Protocol Action to de-select an already selected insurance company
"RTN","IBCNILK",253,0)
 ; Input:   NUMSEL                  - Current number of selected insurance
"RTN","IBCNILK",254,0)
 ;                                    companies
"RTN","IBCNILK",255,0)
 ;          ^TMP("IBCNILK",$J)     - Current Array of displayed Ins Cos
"RTN","IBCNILK",256,0)
 ;          ^TMP("IBCNILKIX",$J)   - Current Index of displayed Ins Cos
"RTN","IBCNILK",257,0)
 ;          ^TMP("IBCNILKA,$J,IIEN)- Current Array of selected Ins Cos
"RTN","IBCNILK",258,0)
 ; Output:  NUMSEL                  - Updated number of selected insurance
"RTN","IBCNILK",259,0)
 ;                                    companies
"RTN","IBCNILK",260,0)
 ;          ^TMP("IBCNILKA,$J,IIEN)- Updated Array of selected Ins Cos
"RTN","IBCNILK",261,0)
 ;          Selected Insurance Company is removed from the worklist 
"RTN","IBCNILK",262,0)
 ;          Error message displayed (potentially)
"RTN","IBCNILK",263,0)
 N DIR,DIROUT,DIRUT,DLINE,DTOUT,DUOUT,ERROR,IEN,IIENS,IX,LINE,PROMPT
"RTN","IBCNILK",264,0)
 S VALMBCK="R",ERROR=0
"RTN","IBCNILK",265,0)
 ; 
"RTN","IBCNILK",266,0)
 ; First select the Insurance Company(s) to be selected
"RTN","IBCNILK",267,0)
 S PROMPT="Select Insurance Company(s)"
"RTN","IBCNILK",268,0)
 S IIENS=$$SELINS(1,PROMPT,.DLINE,1,"IBCNILKIX")
"RTN","IBCNILK",269,0)
 I IIENS="" S VALMBCK="R" Q                 ; None Selected
"RTN","IBCNILK",270,0)
 F IX=1:1:$L(IIENS,",") D
"RTN","IBCNILK",271,0)
 . S IIEN=$P(IIENS,",",IX)
"RTN","IBCNILK",272,0)
 . S LINE=$P(DLINE,",",IX)
"RTN","IBCNILK",273,0)
 . ;
"RTN","IBCNILK",274,0)
 . ; If currently selected, display an error message
"RTN","IBCNILK",275,0)
 . I $D(^TMP("IBCNILKA",$J,IIEN)) D  Q
"RTN","IBCNILK",276,0)
 . . W !,*7,">>>> # ",LINE," is currently selected."
"RTN","IBCNILK",277,0)
 . . S ERROR=1
"RTN","IBCNILK",278,0)
 . D MARK(1,IIEN,LINE,.NUMSEL)              ; Show the selection mark
"RTN","IBCNILK",279,0)
 D HDR                                      ; Update the header
"RTN","IBCNILK",280,0)
 D:ERROR PAUSE^VALM1
"RTN","IBCNILK",281,0)
 Q
"RTN","IBCNILK",282,0)
 ;
"RTN","IBCNILK",283,0)
UNSEL(SELECTED) ;EP
"RTN","IBCNILK",284,0)
 ; Protocol Action to deselect an already selected insurance company
"RTN","IBCNILK",285,0)
 ; Input:   SELECTED                - 1 - Called from IBCN INS CO ACTIVE UNSELECT
"RTN","IBCNILK",286,0)
 ;                                    0 - Called from IBCN INS CO UNSELECT
"RTN","IBCNILK",287,0)
 ;                                    Optional, defaults to 0
"RTN","IBCNILK",288,0)
 ;          NUMSEL                  - Current number of selected insurance
"RTN","IBCNILK",289,0)
 ;                                    companies
"RTN","IBCNILK",290,0)
 ;          ^TMP("IBCNILK",$J)     - Current Array of displayed Ins Cos
"RTN","IBCNILK",291,0)
 ;          ^TMP("IBCNILKS",$J)    - Current Array of selecte Ins Cos
"RTN","IBCNILK",292,0)
 ;          ^TMP("IBCNILKIX",$J)   - Current Index of displayed Ins Cos
"RTN","IBCNILK",293,0)
 ;          ^TMP("IBCNILKA,$J,IIEN)- Current Array of selected Ins Cos
"RTN","IBCNILK",294,0)
 ; Output:  NUMSEL                  - Current number of selected insurance
"RTN","IBCNILK",295,0)
 ;                                    companies
"RTN","IBCNILK",296,0)
 ;          ^TMP("IBCNILKA,$J,IIEN)- Updated Array of selected Ins Cos
"RTN","IBCNILK",297,0)
 ;          Selected Insurance Company is removed from the worklist 
"RTN","IBCNILK",298,0)
 ;          Error message displayed (potentially)
"RTN","IBCNILK",299,0)
 N DIR,DIROUT,DIRUT,DLINE,DTOUT,DUOUT,ERROR,IEN,IIENS,IX,LINE,PROMPT,WARRAY
"RTN","IBCNILK",300,0)
 I '$D(SELECTED) D
"RTN","IBCNILK",301,0)
 . S SELECTED=0,WARRAY="IBCNILKIX"
"RTN","IBCNILK",302,0)
 E  S WARRAY="IBCNILKSIX"
"RTN","IBCNILK",303,0)
 S VALMBCK="R",ERROR=0
"RTN","IBCNILK",304,0)
 ; 
"RTN","IBCNILK",305,0)
 ; First select the Insurance Company(s) to be deselected
"RTN","IBCNILK",306,0)
 S PROMPT="Deselect Insurance Company(s)"
"RTN","IBCNILK",307,0)
 S IIENS=$$SELINS(1,PROMPT,.DLINE,1,WARRAY)
"RTN","IBCNILK",308,0)
 I IIENS="" S VALMBCK="R" Q                 ; None Selected
"RTN","IBCNILK",309,0)
 F IX=1:1:$L(IIENS,",") D
"RTN","IBCNILK",310,0)
 . S IIEN=$P(IIENS,",",IX)
"RTN","IBCNILK",311,0)
 . S LINE=$P(DLINE,",",IX)
"RTN","IBCNILK",312,0)
 . ;
"RTN","IBCNILK",313,0)
 . ; If not currently selected, display an error message
"RTN","IBCNILK",314,0)
 . I '$D(^TMP("IBCNILKA",$J,IIEN)) D  Q
"RTN","IBCNILK",315,0)
 . . W !,*7,">>>> # ",LINE," is not currently selected. It cannot be deselected."
"RTN","IBCNILK",316,0)
 . . S ERROR=1
"RTN","IBCNILK",317,0)
 . D MARK(0,IIEN,LINE,.NUMSEL)              ; Deselect the entry
"RTN","IBCNILK",318,0)
 D HDR(SELECTED)                            ; Update the header
"RTN","IBCNILK",319,0)
 D:ERROR PAUSE^VALM1
"RTN","IBCNILK",320,0)
 Q
"RTN","IBCNILK",321,0)
 ;
"RTN","IBCNILK",322,0)
MARK(WHICH,IIEN,LINE,NUMSEL)   ;EP
"RTN","IBCNILK",323,0)
 ; Mark/Remove 'Selection' from a selected
"RTN","IBCNILK",324,0)
 ; Insurance Company line
"RTN","IBCNILK",325,0)
 ; Input:   WHICH   - 0 - Remove 'Selection' mark
"RTN","IBCNILK",326,0)
 ;                    1 - Set 'Selection' mark
"RTN","IBCNILK",327,0)
 ;          IENIN   - IEN of the entry to Mark/Remove 'In-Progress'
"RTN","IBCNILK",328,0)
 ;          LINE    - Line number being marked/unmarked
"RTN","IBCNILK",329,0)
 ;          WLIST   - Worklist, the user is selecting from.
"RTN","IBCNILK",330,0)
 ;          NUMSEL  - Current # of selected Insurance Companies
"RTN","IBCNILK",331,0)
 ;          ^TMP("IBCNILKA",$J)- Current array of selected Insurance Companies 
"RTN","IBCNILK",332,0)
 ; Output:  Insurance  Company is marked or unmarked as selected
"RTN","IBCNILK",333,0)
 ;          NUMSEL  - Current # of selected Insurance Companies
"RTN","IBCNILK",334,0)
 ;          ^TMP("IBCNILKA",$J)- Updated array of selected Insurance Companies 
"RTN","IBCNILK",335,0)
 ;      
"RTN","IBCNILK",336,0)
 N TEXT
"RTN","IBCNILK",337,0)
 I WHICH D                                  ; Mark as selected
"RTN","IBCNILK",338,0)
 . S ^TMP("IBCNILKA",$J,IIEN)=""
"RTN","IBCNILK",339,0)
 . S TEXT=LINE_">",NUMSEL=NUMSEL+1
"RTN","IBCNILK",340,0)
 E  D                                       ; Mark as selected
"RTN","IBCNILK",341,0)
 . K ^TMP("IBCNILKA",$J,IIEN)
"RTN","IBCNILK",342,0)
 . S TEXT=LINE,NUMSEL=NUMSEL-1
"RTN","IBCNILK",343,0)
 D FLDTEXT^VALM10(LINE,"CTR",TEXT)          ; Update display
"RTN","IBCNILK",344,0)
 D WRITE^VALM10(LINE)                       ; Redisplay line
"RTN","IBCNILK",345,0)
 Q
"RTN","IBCNILK",346,0)
 ;
"RTN","IBCNILK",347,0)
SHOWSEL ;EP
"RTN","IBCNILK",348,0)
 ; Protocol action used to display a listman template of the currently
"RTN","IBCNILK",349,0)
 ; selected Insurance companies
"RTN","IBCNILK",350,0)
 ; Input:   NUMSEL                      - Current number of selected insurance
"RTN","IBCNILK",351,0)
 ;                                        companies
"RTN","IBCNILK",352,0)
 ;          ^TMP("IBCNILKA",$J,IEN)    - Current Array of selected insurance
"RTN","IBCNILK",353,0)
 ;                                        companies
"RTN","IBCNILK",354,0)
 ; Output:  NUMSEL                      - Updated number of selected insurance companies
"RTN","IBCNILK",355,0)
 ;          ^TMP("IBCNILKA",$J,IEN)    - Updated Array of selected insurance
"RTN","IBCNILK",356,0)
 ;                                        companies
"RTN","IBCNILK",357,0)
 S VALMBCK="R"
"RTN","IBCNILK",358,0)
 D EN^VALM("IBCN INS CO SELECTED")
"RTN","IBCNILK",359,0)
 D HDR,BLD
"RTN","IBCNILK",360,0)
 Q
"RTN","IBCNILK",361,0)
 ;
"RTN","IBCNILK",362,0)
SELINS(FULL,PROMPT,DLINE,MULT,WLIST)    ;EP
"RTN","IBCNILK",363,0)
 ; Select Insurance Company(s) to perform an action upon
"RTN","IBCNILK",364,0)
 ; Also called from IBCNILK@UNSEL
"RTN","IBCNILK",365,0)
 ; Input:   FULL                    - 1 - full screen mode, 0 otherwise
"RTN","IBCNILK",366,0)
 ;          PROMPT                  - Prompt to be displayed to the user
"RTN","IBCNILK",367,0)
 ;          MULT                    - 1 to allow multiple entry selection
"RTN","IBCNILK",368,0)
 ;                                    0 to only allow single entry selection
"RTN","IBCNILK",369,0)
 ;                                    Optional, defaults to 0
"RTN","IBCNILK",370,0)
 ;          WLIST                   - Worklist, the user is selecting from
"RTN","IBCNILK",371,0)
 ;          ^TMP("IBCNILKIX",$J)   - Index of displayed lines of the Ins Co
"RTN","IBCNILK",372,0)
 ;                                    Selector Template. 
"RTN","IBCNILK",373,0)
 ;                                    Only used when WLIST="IBCNILKIX"
"RTN","IBCNILK",374,0)
 ;          ^TMP("IBCNILKSIX",$J)  - Index of displayed lines of the Ins Cos
"RTN","IBCNILK",375,0)
 ;                                    Selected Template
"RTN","IBCNILK",376,0)
 ;                                    Only used if WLIST is "IBCNILKSIX"
"RTN","IBCNILK",377,0)
 ; Output:  DLINE                   - Comma delimited list of Line #(s) of the 
"RTN","IBCNILK",378,0)
 ;                                    selected Ins Cos
"RTN","IBCNILK",379,0)
 ; Returns: IIEN(s) - Comma delimited string or IENS for the selected Ins Co(s)
"RTN","IBCNILK",380,0)
 ;          Error message and "" IENS if multi-selection and not allowed
"RTN","IBCNILK",381,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,IIEN,IIENS,IX,VALMY,X,Y
"RTN","IBCNILK",382,0)
 S:'$D(MULT) MULT=0
"RTN","IBCNILK",383,0)
 S:'$D(WLIST) WLIST="IBCNILK"
"RTN","IBCNILK",384,0)
 D:FULL FULL^VALM1
"RTN","IBCNILK",385,0)
 S DLINE=$P($P($G(XQORNOD(0)),"^",4),"=",2)     ; User selection with action
"RTN","IBCNILK",386,0)
 S DLINE=$TR(DLINE,"/\; .",",,,,,")             ; Check for multi-selection
"RTN","IBCNILK",387,0)
 S IIENS=""
"RTN","IBCNILK",388,0)
 I 'MULT,DLINE["," D  Q ""                      ; Invalid multi-selection
"RTN","IBCNILK",389,0)
 . W !,*7,">>>> Only single entry selection is allowed"
"RTN","IBCNILK",390,0)
 . S DLINE=""
"RTN","IBCNILK",391,0)
 . K DIR
"RTN","IBCNILK",392,0)
 . D PAUSE^VALM1
"RTN","IBCNILK",393,0)
 ;
"RTN","IBCNILK",394,0)
 ; Let the user enter their selection(s)
"RTN","IBCNILK",395,0)
 D EN^VALM2($G(XQORNOD(0)),"O")                 ; ListMan generic selector
"RTN","IBCNILK",396,0)
 I '$D(VALMY) Q ""
"RTN","IBCNILK",397,0)
 S IX="",DLINE=""
"RTN","IBCNILK",398,0)
 F  D  Q:IX=""
"RTN","IBCNILK",399,0)
 . S IX=$O(VALMY(IX))
"RTN","IBCNILK",400,0)
 . Q:IX=""
"RTN","IBCNILK",401,0)
 . S DLINE=$S(DLINE="":IX,1:DLINE_","_IX)
"RTN","IBCNILK",402,0)
 . S IIEN=$G(^TMP(WLIST,$J,IX))
"RTN","IBCNILK",403,0)
 . S IIENS=$S(IIENS="":IIEN,1:IIENS_","_IIEN)
"RTN","IBCNILK",404,0)
 Q IIENS
"RTN","IBCNILK",405,0)
 ;
"RTN","IBCNILK",406,0)
INIT2 ;EP for Show Selections
"RTN","IBCNILK",407,0)
 ; Initialize variables and list array
"RTN","IBCNILK",408,0)
 ; Input: None
"RTN","IBCNILK",409,0)
 ; Output:  ^TMP("IBCNILK",$J) - Body lines to display
"RTN","IBCNILK",410,0)
 K ^TMP("IBCNILKS",$J),^TMP("IBCNILKSIX",$J)
"RTN","IBCNILK",411,0)
 D BLD2
"RTN","IBCNILK",412,0)
 Q
"RTN","IBCNILK",413,0)
 ;
"RTN","IBCNILK",414,0)
BLD2 ; Build listman body for Show Selections
"RTN","IBCNILK",415,0)
 ; Input:   None
"RTN","IBCNILK",416,0)
 ; Output:  VALMCNT   - Total number of lines displayed in the body
"RTN","IBCNILK",417,0)
 ;          ^TMP("IBCNILKS",$J)   - Body lines to display
"RTN","IBCNILK",418,0)
 ;          ^TMP("IBCNILKSIX",$J) - Index of Entry IENs by display line
"RTN","IBCNILK",419,0)
 N IIEN,LINE,NM,SORTED
"RTN","IBCNILK",420,0)
 ;
"RTN","IBCNILK",421,0)
 ; First sort the currently selected insurance companies into name order
"RTN","IBCNILK",422,0)
 S IIEN=""
"RTN","IBCNILK",423,0)
 F  D  Q:IIEN=""
"RTN","IBCNILK",424,0)
 . S IIEN=$O(^TMP("IBCNILKA",$J,IIEN))
"RTN","IBCNILK",425,0)
 . Q:IIEN=""
"RTN","IBCNILK",426,0)
 . S NM=$$GET1^DIQ(36,IIEN_",",.01)
"RTN","IBCNILK",427,0)
 . S SORTED(NM,IIEN)=""
"RTN","IBCNILK",428,0)
 ;
"RTN","IBCNILK",429,0)
 ; Now build the lines to be displayed
"RTN","IBCNILK",430,0)
 S (ICTR,VALMCNT)=0,NM=""
"RTN","IBCNILK",431,0)
 F  D  Q:NM=""
"RTN","IBCNILK",432,0)
 . S NM=$O(SORTED(NM))
"RTN","IBCNILK",433,0)
 . Q:NM=""
"RTN","IBCNILK",434,0)
 . S IIEN=""
"RTN","IBCNILK",435,0)
 . F  D  Q:IIEN=""
"RTN","IBCNILK",436,0)
 . . S IIEN=$O(SORTED(NM,IIEN))
"RTN","IBCNILK",437,0)
 . . Q:IIEN=""
"RTN","IBCNILK",438,0)
 . . S ICTR=ICTR+1
"RTN","IBCNILK",439,0)
 . . S LINE=$$BLDLN(ICTR,IIEN)
"RTN","IBCNILK",440,0)
 . . S VALMCNT=VALMCNT+1
"RTN","IBCNILK",441,0)
 . . D SET^VALM10(VALMCNT,LINE,LINE)
"RTN","IBCNILK",442,0)
 . . S ^TMP("IBCNILKSIX",$J,ICTR)=IIEN
"RTN","IBCNILK",443,0)
 ;
"RTN","IBCNILK",444,0)
 I VALMCNT=0 D
"RTN","IBCNILK",445,0)
 . S ^TMP("IBCNILK",$J,1,0)="No Selected Insurance Companies were found."
"RTN","IBCNILK",446,0)
 Q
"RTN","IBCNILK",447,0)
 ;
"RTN","IBCNILK",448,0)
EXIT2 ;EP for Show Selections
"RTN","IBCNILK",449,0)
 ; Exit code
"RTN","IBCNILK",450,0)
 ; Input: None
"RTN","IBCNILK",451,0)
 K ^TMP("IBCNILKS",$J),^TMP("IBCNILKSIX",$J)
"RTN","IBCNILK",452,0)
 D CLEAR^VALM1
"RTN","IBCNILK",453,0)
 Q
"RTN","IBCNILK",454,0)
 ;
"RTN","IBCNSJ1")
0^15^B22191790
"RTN","IBCNSJ1",1,0)
IBCNSJ1 ;ALB/CPM - INACTIVATE AN INSURANCE PLAN ;05-MAY-2015
"RTN","IBCNSJ1",2,0)
 ;;2.0;INTEGRATED BILLING;**28,549**; 21-MAR-94;Build 54
"RTN","IBCNSJ1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSJ1",4,0)
 ;
"RTN","IBCNSJ1",5,0)
IA ; 'Inactivate Plan' Action
"RTN","IBCNSJ1",6,0)
 ;   Required variable input:
"RTN","IBCNSJ1",7,0)
 ;             DFN  --  Pointer to the patient in file #2
"RTN","IBCNSJ1",8,0)
 ;          IBPPOL  --  Patient insurance policy definition
"RTN","IBCNSJ1",9,0)
 ;
"RTN","IBCNSJ1",10,0)
 D FULL^VALM1
"RTN","IBCNSJ1",11,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D  G IAQ
"RTN","IBCNSJ1",12,0)
 . W !!,"Sorry, but you do not have the required privileges to inactivate plans."
"RTN","IBCNSJ1",13,0)
 ;
"RTN","IBCNSJ1",14,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ1",15,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ1",16,0)
 . W !!,"Sorry, but you do not have the required privileges to inactivate plans."
"RTN","IBCNSJ1",17,0)
 . D IAQ
"RTN","IBCNSJ1",18,0)
 ;
"RTN","IBCNSJ1",19,0)
 N IBCNS,IBPLAN,IBPLAND,IBPICK,IBQUIT,X
"RTN","IBCNSJ1",20,0)
 S X=+$P($G(IBPPOL),"^",4),X=$G(^DPT(DFN,.312,X,0))
"RTN","IBCNSJ1",21,0)
 S IBCNS=+X,IBPLAN=+$P(X,"^",18),(IBPICK,IBQUIT)=0
"RTN","IBCNSJ1",22,0)
 I 'IBPLAN D NOPL^IBCNSJ2 G IAQ
"RTN","IBCNSJ1",23,0)
 S IBPLAND=$G(^IBA(355.3,+IBPLAN,0))
"RTN","IBCNSJ1",24,0)
 I 'IBPLAND W !!,"This plan has no company!  Please contact your IRM for assistance." G IAQ
"RTN","IBCNSJ1",25,0)
 I IBCNS'=+IBPLAND D PLAN^IBCNSM32(DFN,+$P($G(IBPPOL),"^",4),+IBPLAND) G IAQ
"RTN","IBCNSJ1",26,0)
 ;
"RTN","IBCNSJ1",27,0)
 ; - inactivate multiple plans?
"RTN","IBCNSJ1",28,0)
 S X=$$ASK^IBCNSJ4 G:X<0 IAQ I X D EN^IBCNSJ4 G IAQ
"RTN","IBCNSJ1",29,0)
 ;
"RTN","IBCNSJ1",30,0)
 W !!,"This action will allow you to inactivate an insurance plan."
"RTN","IBCNSJ1",31,0)
 W !,"Inactivating a plan will inactivate all current subscribers to the plan."
"RTN","IBCNSJ1",32,0)
 ;
"RTN","IBCNSJ1",33,0)
 ; - main processing loop
"RTN","IBCNSJ1",34,0)
 F  D  Q:IBQUIT
"RTN","IBCNSJ1",35,0)
 .I IBPICK D SEL^IBCNSJ14 Q:IBQUIT
"RTN","IBCNSJ1",36,0)
 .;
"RTN","IBCNSJ1",37,0)
 .; - invoke inactivate function
"RTN","IBCNSJ1",38,0)
 .S IBPICK=1
"RTN","IBCNSJ1",39,0)
 .D INACT(IBCNS,IBPLAN)
"RTN","IBCNSJ1",40,0)
 .;
"RTN","IBCNSJ1",41,0)
 .; - select and inactivate another plan?
"RTN","IBCNSJ1",42,0)
 .S DIR(0)="Y",DIR("A")="Do you wish to inactivate another plan",DIR("?")="To inactivate another plan, answer 'YES.'  Otherwise, answer 'NO.'"
"RTN","IBCNSJ1",43,0)
 .W ! D ^DIR K DIR,DIRUT,DTOUT,DUOUT,DIROUT I 'Y S IBQUIT=1
"RTN","IBCNSJ1",44,0)
 ;
"RTN","IBCNSJ1",45,0)
IAQ ;
"RTN","IBCNSJ1",46,0)
 D PAUSE^VALM1
"RTN","IBCNSJ1",47,0)
 D HDR^IBCNSP,BLD^IBCNSP
"RTN","IBCNSJ1",48,0)
 S VALMBCK="R"
"RTN","IBCNSJ1",49,0)
 Q
"RTN","IBCNSJ1",50,0)
 ;
"RTN","IBCNSJ1",51,0)
 ;
"RTN","IBCNSJ1",52,0)
INACT(IBCNS,IBPLAN) ; Inactivate an Insurance Plan
"RTN","IBCNSJ1",53,0)
 ;  Input:   IBCNS  --  Pointer to the company in file #36 which
"RTN","IBCNSJ1",54,0)
 ;          IBPLAN  --  Pointer to the plan in file #355.3
"RTN","IBCNSJ1",55,0)
 ;
"RTN","IBCNSJ1",56,0)
 N DA,DIK,IBX,IBPLAND,IBNEWP,IBFG
"RTN","IBCNSJ1",57,0)
 N DFN,IBACT,IBSUB,IBQUIT,IBCDFN,IBREP,IBCPOL,IBALR,IBMAIL,IBBU,IBARR
"RTN","IBCNSJ1",58,0)
 S IBPLAND=$G(^IBA(355.3,IBPLAN,0))
"RTN","IBCNSJ1",59,0)
 D DISP
"RTN","IBCNSJ1",60,0)
 I 'IBPLAND!(+IBPLAND'=+$G(IBCNS)) W !!,"This is not a valid insurance plan!" G INACTQ
"RTN","IBCNSJ1",61,0)
 ;
"RTN","IBCNSJ1",62,0)
 ; - is the plan an Individual Plan?
"RTN","IBCNSJ1",63,0)
 I '$P(IBPLAND,"^",2) D  G INACTQ
"RTN","IBCNSJ1",64,0)
 .W !,"You cannot inactivate an Individual Plan!"
"RTN","IBCNSJ1",65,0)
 .W !!,"You must either delete the policy using the 'Delete Policy' action,"
"RTN","IBCNSJ1",66,0)
 .W !,"or change the plan to which the patient has subscribed, using the action"
"RTN","IBCNSJ1",67,0)
 .W !,"'Change Policy Plan'."
"RTN","IBCNSJ1",68,0)
 ;
"RTN","IBCNSJ1",69,0)
 ; - handle inactive plans
"RTN","IBCNSJ1",70,0)
 S IBACT=$P(IBPLAND,"^",11),IBSUB=$$SUBS^IBCNSJ(IBCNS,IBPLAN,1)
"RTN","IBCNSJ1",71,0)
 I IBACT D NOTACT^IBCNSJ11 G INACTQ
"RTN","IBCNSJ1",72,0)
 ;
"RTN","IBCNSJ1",73,0)
 ; - inactivate plan if there are no plan subscriptions
"RTN","IBCNSJ1",74,0)
 I 'IBSUB D NAC^IBCNSJ12(IBPLAN,"There are no subscribers to this plan.  Would you like to inactivate it",1) G INACTQ
"RTN","IBCNSJ1",75,0)
 ;
"RTN","IBCNSJ1",76,0)
 ; - display plan attributes
"RTN","IBCNSJ1",77,0)
 W !,"There are currently subscribers to this plan."
"RTN","IBCNSJ1",78,0)
 I $D(^IBA(355.4,"APY",IBPLAN)) W !,*7,"  ** There are Annual Benefits associated with this plan!"
"RTN","IBCNSJ1",79,0)
 I $D(^IBA(355.5,"B",IBPLAN)) S IBBU=1 W !,*7,"  ** There are Benefits Used associated with this plan!"
"RTN","IBCNSJ1",80,0)
 ;
"RTN","IBCNSJ1",81,0)
 ; - should subscriptions to this plan be switched to another plan?
"RTN","IBCNSJ1",82,0)
 S DIR(0)="Y",DIR("A")="Would you like to re-point these policies to a new plan",DIR("?")="^D HLRP^IBCNSJ11"
"RTN","IBCNSJ1",83,0)
 W ! D ^DIR K DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNSJ1",84,0)
 I 'Y D MAIL^IBCNSJ11 G OKAY
"RTN","IBCNSJ1",85,0)
 ;
"RTN","IBCNSJ1",86,0)
 ; - select or add a new plan to re-point the policies
"RTN","IBCNSJ1",87,0)
 S IBREP=1,IBFG=$$SUBS^IBCNSJ(IBCNS,IBPLAN,0,"",1)>1
"RTN","IBCNSJ1",88,0)
 D GETPL^IBCNSJ12
"RTN","IBCNSJ1",89,0)
 I 'IBCPOL S IBREP=0 D MAIL^IBCNSJ11 G OKAY
"RTN","IBCNSJ1",90,0)
 ;
"RTN","IBCNSJ1",91,0)
 ; - alert user that current plan has benefits used
"RTN","IBCNSJ1",92,0)
 I $G(IBBU) D BU^IBCNSJ13(.IBQUIT) I IBQUIT G INACTQ
"RTN","IBCNSJ1",93,0)
 ;
"RTN","IBCNSJ1",94,0)
OKAY ; - okay to inactivate the plan?
"RTN","IBCNSJ1",95,0)
 D DISP,NAC^IBCNSJ12(IBPLAN,"  Okay to inactivate this plan",0,.IBQUIT) I IBQUIT G INACTQ
"RTN","IBCNSJ1",96,0)
 ;
"RTN","IBCNSJ1",97,0)
 ; - if there is no-repointing, send the user the subscription list
"RTN","IBCNSJ1",98,0)
 I $G(IBMAIL) D MSG^IBCNSJ12(IBCNS,IBPLAN)
"RTN","IBCNSJ1",99,0)
 ;
"RTN","IBCNSJ1",100,0)
 ; - re-point existing policies if necessary; allow plan deletion
"RTN","IBCNSJ1",101,0)
 I $G(IBREP) D REP^IBCNSJ13(IBCNS,IBCPOL,IBPLAN,$G(IBMERGE)),DEL^IBCNSJ11(IBPLAN)
"RTN","IBCNSJ1",102,0)
INACTQ Q
"RTN","IBCNSJ1",103,0)
 ;
"RTN","IBCNSJ1",104,0)
DISP ; Display plan name/number.
"RTN","IBCNSJ1",105,0)
 W !!,$S($P(IBPLAND,"^",2):"Group",1:"Individual")," Plan Number: ",$S($P(IBPLAND,"^",4)]"":$P(IBPLAND,"^",4),1:"<not specified>"),?50,"Plan Name: ",$S($P(IBPLAND,"^",3)]"":$P(IBPLAND,"^",3),1:"<not specified>"),!
"RTN","IBCNSJ1",106,0)
 Q
"RTN","IBCNSJ5")
0^12^B31714664
"RTN","IBCNSJ5",1,0)
IBCNSJ5 ;ALB/TMP - INSURANCE PLAN MAINTENANCE ACTION PROCESSING ; 09-AUG-95
"RTN","IBCNSJ5",2,0)
 ;;2.0;INTEGRATED BILLING;**43,516,549**;21-MAR-94;Build 54
"RTN","IBCNSJ5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSJ5",4,0)
 ;
"RTN","IBCNSJ5",5,0)
PL ; -- Insurance Company Plan List
"RTN","IBCNSJ5",6,0)
 D FULL^VALM1 W !!
"RTN","IBCNSJ5",7,0)
 N VALMY,VALMHDR,IBIND,IBMULT,IBW,IBSEL
"RTN","IBCNSJ5",8,0)
 S (IBIND,IBMULT)=1,IBW=1,IBSEL=0
"RTN","IBCNSJ5",9,0)
 D EN^VALM("IBCNS PLAN LIST")
"RTN","IBCNSJ5",10,0)
 Q
"RTN","IBCNSJ5",11,0)
 ;
"RTN","IBCNSJ5",12,0)
AB ; -- Edit Annual Benefits from insurance company edit OR plan detail edit
"RTN","IBCNSJ5",13,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ5",14,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ5",15,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Annual Benefits."
"RTN","IBCNSJ5",16,0)
 . K DIR
"RTN","IBCNSJ5",17,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",18,0)
 . D ABQ
"RTN","IBCNSJ5",19,0)
 ;
"RTN","IBCNSJ5",20,0)
 I $D(IBCPOL) D FULL^VALM1,EN^VALM("IBCNS ANNUAL BENEFITS") S VALMBCK="R" G ABQ
"RTN","IBCNSJ5",21,0)
 D FULL^VALM1
"RTN","IBCNSJ5",22,0)
 N I,J,IBXX,VALMY,IBCDFN
"RTN","IBCNSJ5",23,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSJ5",24,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSJ5",25,0)
 .N IBCPOL
"RTN","IBCNSJ5",26,0)
 .S IBCPOL=$G(^TMP("IBCNSJ",$J,"IDX",IBXX,+$O(^TMP("IBCNSJ",$J,"IDX",IBXX,0))))
"RTN","IBCNSJ5",27,0)
 .Q:IBCPOL=""
"RTN","IBCNSJ5",28,0)
 .D FULL^VALM1
"RTN","IBCNSJ5",29,0)
 .W !!,"Plan Name: ",$$GET1^DIQ(355.3,IBCPOL,2.01),"   Number: ",$$GET1^DIQ(355.3,IBCPOL,2.02)  ;Get new HIPAA fields - IB*2*516
"RTN","IBCNSJ5",30,0)
 .K IBCDFN
"RTN","IBCNSJ5",31,0)
 .D EN^VALM("IBCNS ANNUAL BENEFITS")
"RTN","IBCNSJ5",32,0)
 .Q
"RTN","IBCNSJ5",33,0)
ABQ ; Annual Benefits exit
"RTN","IBCNSJ5",34,0)
 I $D(IBCPOL) D INIT^IBCNSC4
"RTN","IBCNSJ5",35,0)
 S VALMBCK=$S($D(IBFASTXT):"Q",1:"R")
"RTN","IBCNSJ5",36,0)
 K IBFASTXT
"RTN","IBCNSJ5",37,0)
 Q
"RTN","IBCNSJ5",38,0)
 ;
"RTN","IBCNSJ5",39,0)
IA ; -- (In)activate plan from insurance company edit OR plan detail edit
"RTN","IBCNSJ5",40,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D  G IAQ
"RTN","IBCNSJ5",41,0)
 . W !!,"Sorry, but you do not have the required privileges to inactivate plans."
"RTN","IBCNSJ5",42,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",43,0)
 ;
"RTN","IBCNSJ5",44,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ5",45,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ5",46,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to inactivate plans."
"RTN","IBCNSJ5",47,0)
 . K DIR
"RTN","IBCNSJ5",48,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",49,0)
 . D IAQ
"RTN","IBCNSJ5",50,0)
 ;
"RTN","IBCNSJ5",51,0)
 D FULL^VALM1
"RTN","IBCNSJ5",52,0)
 I $D(IBCPOL) D INACT^IBCNSJ1(+$P($G(^IBA(355.3,IBCPOL,0)),U),IBCPOL) G IAQ
"RTN","IBCNSJ5",53,0)
 N I,J,IBXX,VALMY,IBCDFN
"RTN","IBCNSJ5",54,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSJ5",55,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSJ5",56,0)
 . N IBCPOL,IBCPND,IBCPND1
"RTN","IBCNSJ5",57,0)
 . S IBCPOL=$G(^TMP("IBCNSJ",$J,"IDX",IBXX,+$O(^TMP("IBCNSJ",$J,"IDX",IBXX,0))))
"RTN","IBCNSJ5",58,0)
 . Q:IBCPOL=""
"RTN","IBCNSJ5",59,0)
 . D FULL^VALM1
"RTN","IBCNSJ5",60,0)
 . S IBCPND=$G(^IBA(355.3,IBCPOL,0))
"RTN","IBCNSJ5",61,0)
 . I '$P(IBCPND,U,2) W !,"You cannot inactivate an individual plan." D PAUSE^VALM1 Q
"RTN","IBCNSJ5",62,0)
 . K IBCDFN
"RTN","IBCNSJ5",63,0)
 . D INACT^IBCNSJ1(+$P($G(^IBA(355.3,IBCPOL,0)),U),IBCPOL),PAUSE^VALM1
"RTN","IBCNSJ5",64,0)
 . S IBCPND1=$G(^IBA(355.3,IBCPOL,0))
"RTN","IBCNSJ5",65,0)
 . I $P(IBCPND1,U,11)'=$P(IBCPND,U,11)!(IBCPND1="") D
"RTN","IBCNSJ5",66,0)
 . . D INIT^IBCNSU2 ;Rebuild list if plan changed or deleted
"RTN","IBCNSJ5",67,0)
 . . N IBCPOLD S IBCPOLD=$G(^IBA(355.3,+$G(IBCPOL),0))
"RTN","IBCNSJ5",68,0)
 . . I IBCPOLD'="" D HDR^IBCNSC41
"RTN","IBCNSJ5",69,0)
IAQ ; Inactivate Plans exit
"RTN","IBCNSJ5",70,0)
 I $G(IBCPOL) D  ;Rebuild header
"RTN","IBCNSJ5",71,0)
 . N IBCPOLD
"RTN","IBCNSJ5",72,0)
 . S IBCPOLD=$G(^IBA(355.3,+$G(IBCPOL),0))
"RTN","IBCNSJ5",73,0)
 . I IBCPOLD'="" D HDR^IBCNSC41
"RTN","IBCNSJ5",74,0)
 S VALMBCK="R"
"RTN","IBCNSJ5",75,0)
 Q
"RTN","IBCNSJ5",76,0)
 ;
"RTN","IBCNSJ5",77,0)
VP ; -- Edit/View Plan
"RTN","IBCNSJ5",78,0)
 D FULL^VALM1
"RTN","IBCNSJ5",79,0)
 N IBCND1,IBCDFND,IBCPOL,IBCPOLD,IBXX,VALMY,IBCDFN
"RTN","IBCNSJ5",80,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSJ5",81,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSJ5",82,0)
 .S IBCPOL=$G(^TMP("IBCNSJ",$J,"IDX",IBXX,+$O(^TMP("IBCNSJ",$J,"IDX",IBXX,0))))
"RTN","IBCNSJ5",83,0)
 .Q:IBCPOL=""
"RTN","IBCNSJ5",84,0)
 .D FULL^VALM1
"RTN","IBCNSJ5",85,0)
 .K IBCDFN
"RTN","IBCNSJ5",86,0)
 .D EN^VALM("IBCNS INS CO PLAN DETAIL")
"RTN","IBCNSJ5",87,0)
 .Q
"RTN","IBCNSJ5",88,0)
 I '$D(IBFASTXT) D INIT^IBCNSU2
"RTN","IBCNSJ5",89,0)
 S VALMBCK="R"
"RTN","IBCNSJ5",90,0)
 Q
"RTN","IBCNSJ5",91,0)
 ;
"RTN","IBCNSJ5",92,0)
PC ; Plan comments
"RTN","IBCNSJ5",93,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ5",94,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ5",95,0)
 . W !!,*7,"Sorry, you do not have the required privileges enter comments"
"RTN","IBCNSJ5",96,0)
 . W " about this plan."
"RTN","IBCNSJ5",97,0)
 . K DIR
"RTN","IBCNSJ5",98,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",99,0)
 . D PCQ
"RTN","IBCNSJ5",100,0)
 ;
"RTN","IBCNSJ5",101,0)
 W !!,"You may now enter comments about this plan."
"RTN","IBCNSJ5",102,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G PCQ
"RTN","IBCNSJ5",103,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="11" D ^DIE
"RTN","IBCNSJ5",104,0)
 D INIT^IBCNSC4
"RTN","IBCNSJ5",105,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSJ5",106,0)
PCQ ; Exit Enter plan comments
"RTN","IBCNSJ5",107,0)
 S VALMBCK="R"
"RTN","IBCNSJ5",108,0)
 Q
"RTN","IBCNSJ5",109,0)
 ;
"RTN","IBCNSJ5",110,0)
CP ;Change insurance plans
"RTN","IBCNSJ5",111,0)
 D FULL^VALM1
"RTN","IBCNSJ5",112,0)
 S DIR(0)="Y",DIR("A")="Do you want to see the list of plans for this insurance company"
"RTN","IBCNSJ5",113,0)
 S DIR("?")="Enter 'YES' if you want to use the LIST MANAGER lookup facility on the previous screen to select a plan.  Enter 'NO' to select a plan using the standard Fileman lookup."
"RTN","IBCNSJ5",114,0)
 S VALMBCK="R"
"RTN","IBCNSJ5",115,0)
 D ^DIR K DIR I $D(DIRUT) G CPEX
"RTN","IBCNSJ5",116,0)
 I Y S VALMBCK="Q" G CPEX
"RTN","IBCNSJ5",117,0)
 ; MRD;IB*2.0*516 - Display new Group Name and Number fields.
"RTN","IBCNSJ5",118,0)
 S DIC("S")="I $P(^(0),U)=$G(IBCNS)",DIC="^IBA(355.3,",DIC(0)="AEMQ"
"RTN","IBCNSJ5",119,0)
 ;S DIC("W")="N IBX S IBX=$G(^(0)) W ""  Name: "",$E($S($P(IBX,U,3)'="""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""  Number: "",$S($P(IBX,U,4)'="""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSJ5",120,0)
 S DIC("W")="N IBX,IBX2 S IBX=$G(^(0)),IBX2=$G(^(2)) W ""  Name: "",$E($S($P(IBX2,U,1)'="""":$P(IBX2,U,1),1:""<none>"")_$J("""",20),1,20),""  Number: "",$E($S($P(IBX2,U,2)'="""":$P(IBX2,U,2),1:""<none>""),1,14)"
"RTN","IBCNSJ5",121,0)
 S DIC("W")=DIC("W")_",""  "",$S($P(IBX,U,2):""GROUP"",1:""INDIVIDUAL""),""  "",$S($P(IBX,U,11):""IN"",1:""""),""ACTIVE"""
"RTN","IBCNSJ5",122,0)
 S DIC("A")="Select "_$P($G(^DIC(36,+$G(IBCNS),0)),U)_" PLAN: "
"RTN","IBCNSJ5",123,0)
 D ^DIC K DIC
"RTN","IBCNSJ5",124,0)
 G:Y<0 CPEX S IBCPOL=+Y
"RTN","IBCNSJ5",125,0)
 D INIT^IBCNSC4
"RTN","IBCNSJ5",126,0)
CPEX Q
"RTN","IBCNSJ5",127,0)
 ;
"RTN","IBCNSJ5",128,0)
CV ;Edit coverage limitations from edit patient policy
"RTN","IBCNSJ5",129,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ5",130,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ5",131,0)
 . W !!,*7,"Sorry, but you do not have the required privileges edit Coverage Limitations."
"RTN","IBCNSJ5",132,0)
 . K DIR
"RTN","IBCNSJ5",133,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",134,0)
 . S VALMBCK="R"
"RTN","IBCNSJ5",135,0)
 D EDCOV^IBCNSJ51
"RTN","IBCNSJ5",136,0)
 D BLD^IBCNSP
"RTN","IBCNSJ5",137,0)
 Q
"RTN","IBCNSJ5",138,0)
 ;
"RTN","IBCNSJ5",139,0)
CV1 ;Edit coverage limitations from edit plan
"RTN","IBCNSJ5",140,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSJ5",141,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSJ5",142,0)
 . W !!,*7,"Sorry, but you do not have the required privileges edit Coverage Limitations."
"RTN","IBCNSJ5",143,0)
 . K DIR
"RTN","IBCNSJ5",144,0)
 . D PAUSE^VALM1
"RTN","IBCNSJ5",145,0)
 . S VALMBCK="R"
"RTN","IBCNSJ5",146,0)
 D EDCOV^IBCNSJ51
"RTN","IBCNSJ5",147,0)
 D INIT^IBCNSC4
"RTN","IBCNSJ5",148,0)
 Q
"RTN","IBCNSJ5",149,0)
 ;
"RTN","IBCNSM1")
0^28^B24284030
"RTN","IBCNSM1",1,0)
IBCNSM1 ;ALB/AAS - INSURANCE MANAGEMENT - OUTPUTS ; 05-MAY-2015
"RTN","IBCNSM1",2,0)
 ;;2.0;INTEGRATED BILLING;**28,56,549**; 21-MAR-94;Build 54
"RTN","IBCNSM1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSM1",4,0)
 ;
"RTN","IBCNSM1",5,0)
% G EN^IBCNSM
"RTN","IBCNSM1",6,0)
 ;
"RTN","IBCNSM1",7,0)
VP ; -- View Patient Policy Info
"RTN","IBCNSM1",8,0)
 D FULL^VALM1
"RTN","IBCNSM1",9,0)
 N I,J,IBXX,VALMY
"RTN","IBCNSM1",10,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM1",11,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D  ;W !,"Entry ",X,"Selected" D
"RTN","IBCNSM1",12,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM1",13,0)
 .Q:IBPPOL=""
"RTN","IBCNSM1",14,0)
 .D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSM1",15,0)
 .Q
"RTN","IBCNSM1",16,0)
 I '$G(IBFASTXT) D BLD^IBCNSM
"RTN","IBCNSM1",17,0)
 S VALMBCK="R" Q
"RTN","IBCNSM1",18,0)
 ;
"RTN","IBCNSM1",19,0)
AB ; -- Edit Annual Benefits
"RTN","IBCNSM1",20,0)
 D FULL^VALM1
"RTN","IBCNSM1",21,0)
 ;
"RTN","IBCNSM1",22,0)
 ; IB*2.0*549 - Added Security Key check
"RTN","IBCNSM1",23,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSM1",24,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Annual Benefits."
"RTN","IBCNSM1",25,0)
 . K DIR
"RTN","IBCNSM1",26,0)
 . D PAUSE^VALM1
"RTN","IBCNSM1",27,0)
 . S VALMBCK="R"
"RTN","IBCNSM1",28,0)
 ;
"RTN","IBCNSM1",29,0)
 N I,J,IBXX,VALMY
"RTN","IBCNSM1",30,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM1",31,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSM1",32,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM1",33,0)
 .Q:IBPPOL=""
"RTN","IBCNSM1",34,0)
 .S IBCNS=$P(IBPPOL,"^",5),IBCPOL=$P(IBPPOL,"^",22)
"RTN","IBCNSM1",35,0)
 .D FULL^VALM1
"RTN","IBCNSM1",36,0)
 .D EN^VALM("IBCNS ANNUAL BENEFITS")
"RTN","IBCNSM1",37,0)
 .Q
"RTN","IBCNSM1",38,0)
 S VALMBCK="R"
"RTN","IBCNSM1",39,0)
 Q
"RTN","IBCNSM1",40,0)
 ;
"RTN","IBCNSM1",41,0)
UP ; -- Print new, not verified insurance
"RTN","IBCNSM1",42,0)
 ;
"RTN","IBCNSM1",43,0)
 N I,J,IBXX,IBCNS,VALMY
"RTN","IBCNSM1",44,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM1",45,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) W !,IBXX,! H 2 Q:'IBXX  D
"RTN","IBCNSM1",46,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM1",47,0)
 .Q:IBPPOL=""
"RTN","IBCNSM1",48,0)
 .S IBCNS=$P(IBPPOL,"^",5),IBCPOL=$P(IBPPOL,"^",22)
"RTN","IBCNSM1",49,0)
 .S INSCO=^DIC(36,IBCNS,0)
"RTN","IBCNSM1",50,0)
 .W !!,$P(INSCO,"^"),!! H 2
"RTN","IBCNSM1",51,0)
 .W !!,$P(IBPPOL,"^",4),!! H 2
"RTN","IBCNSM1",52,0)
 .Q
"RTN","IBCNSM1",53,0)
 D FULL^VALM1
"RTN","IBCNSM1",54,0)
 W !!,"REPORT OF NEW NOT VERIFIED INSURANCE",!! H 2
"RTN","IBCNSM1",55,0)
 S VALMBCK="R" Q
"RTN","IBCNSM1",56,0)
 ;
"RTN","IBCNSM1",57,0)
PC ; -- Print Patient Insurance info
"RTN","IBCNSM1",58,0)
 ;N IBLINE,IBCY,IBWP
"RTN","IBCNSM1",59,0)
 N IBWP
"RTN","IBCNSM1",60,0)
 ;
"RTN","IBCNSM1",61,0)
PCWP ; -- Print Insurance Coverage, Worksheet
"RTN","IBCNSM1",62,0)
 ;
"RTN","IBCNSM1",63,0)
 N I,J,IBXX,IBLINE,IBCY,VALMY
"RTN","IBCNSM1",64,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM1",65,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSM1",66,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM1",67,0)
 .Q:IBPPOL=""
"RTN","IBCNSM1",68,0)
 .S IBCPOL=$P(IBPPOL,"^",22)
"RTN","IBCNSM1",69,0)
 .S IBLINE=$S($G(IBWP):1,1:0)
"RTN","IBCNSM1",70,0)
 .S IBCY=$S($G(IBWP):0,1:1)
"RTN","IBCNSM1",71,0)
 .D WPPC^IBCNSM5
"RTN","IBCNSM1",72,0)
 .Q
"RTN","IBCNSM1",73,0)
 S VALMBCK="R" Q
"RTN","IBCNSM1",74,0)
 ;
"RTN","IBCNSM1",75,0)
WP ; -- Print Worksheet
"RTN","IBCNSM1",76,0)
 N IBWP
"RTN","IBCNSM1",77,0)
 S IBWP=1
"RTN","IBCNSM1",78,0)
 D PCWP
"RTN","IBCNSM1",79,0)
 S VALMBCK="R" Q
"RTN","IBCNSM1",80,0)
 ;
"RTN","IBCNSM1",81,0)
DP ; -- Delete insurance policy
"RTN","IBCNSM1",82,0)
 D FULL^VALM1
"RTN","IBCNSM1",83,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY^IBTRE1 G DPQ
"RTN","IBCNSM1",84,0)
 N I,J,IBXX,DIR,DIRUT,IBBCNT,BLD,IBCOVP,IBFNOPOL,VALMY
"RTN","IBCNSM1",85,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM1",86,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),"^",11)
"RTN","IBCNSM1",87,0)
 ;  if no policies, set ibfnopol flag to prevent call to pause^valm1
"RTN","IBCNSM1",88,0)
 ;  at label dpq
"RTN","IBCNSM1",89,0)
 I '$D(VALMY) S IBFNOPOL=1
"RTN","IBCNSM1",90,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX!$D(DIRUT)  D
"RTN","IBCNSM1",91,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM1",92,0)
 .; do some error checking here
"RTN","IBCNSM1",93,0)
 .I $$DELP^IBCNSU(DFN,$P(IBPPOL,"^",5)) D  Q
"RTN","IBCNSM1",94,0)
 ..W !,"You can't delete this policy, there are bills associated with it."
"RTN","IBCNSM1",95,0)
 ..W ! S J=0 F  S J=$O(^DGCR(399,"AE",DFN,$P(IBPPOL,"^",5),J)) Q:'J  I $P(^DGCR(399,J,"S"),"^",17)="" W $P(^DGCR(399,J,0),"^")_"   " S IBBCNT=$G(IBBCNT)+1 W:'(IBBCNT#8) !
"RTN","IBCNSM1",96,0)
 ..K IBBCNT
"RTN","IBCNSM1",97,0)
 ..Q
"RTN","IBCNSM1",98,0)
 .;
"RTN","IBCNSM1",99,0)
 .; - warn if there are associated Insurance reviews
"RTN","IBCNSM1",100,0)
 .I $$IR^IBCNSJ21(DFN,+$P(IBPPOL,"^",4)) W !,*7,"Please note that there are Insurance Reviews associated with this policy!!",!
"RTN","IBCNSM1",101,0)
 .;
"RTN","IBCNSM1",102,0)
 .S DIR(0)="Y",DIR("B")="NO",DIR("A")="Are You Sure you want to delete policy #"_IBXX
"RTN","IBCNSM1",103,0)
 .D ^DIR K DIR I Y'=1 W !,"Policy #",IBXX," not Deleted!" Q
"RTN","IBCNSM1",104,0)
 .S IBCDFN=$P(IBPPOL,"^",4)
"RTN","IBCNSM1",105,0)
 .D DP1
"RTN","IBCNSM1",106,0)
 .Q
"RTN","IBCNSM1",107,0)
DPQ D COVERED^IBCNSM31(DFN,$G(IBCOVP))
"RTN","IBCNSM1",108,0)
 I '$G(IBFNOPOL) D PAUSE^VALM1
"RTN","IBCNSM1",109,0)
 I $G(BLD) D BLD^IBCNSM
"RTN","IBCNSM1",110,0)
 S VALMBCK="R" Q
"RTN","IBCNSM1",111,0)
 ;
"RTN","IBCNSM1",112,0)
DP1 ; -- actual deletion
"RTN","IBCNSM1",113,0)
 N DA,DIC,DIK,IBJJ,IBJJJ,IBBU,IBPLAN,IBCPOLD
"RTN","IBCNSM1",114,0)
 S IBPLAN=$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18),IBCPOLD=$G(^IBA(355.3,+IBPLAN,0))
"RTN","IBCNSM1",115,0)
 ;
"RTN","IBCNSM1",116,0)
 ; -- delete riders
"RTN","IBCNSM1",117,0)
 S IBJJ=0 F  S IBJJ=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBJJ)) Q:'IBJJ  D
"RTN","IBCNSM1",118,0)
 .S IBJJJ=0 F  S IBJJJ=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBJJ,IBJJJ)) Q:'IBJJJ  S DA=IBJJJ,DIK="^IBA(355.7,",DIDEL=355.7 D ^DIK
"RTN","IBCNSM1",119,0)
 ;
"RTN","IBCNSM1",120,0)
 ; -- delete benefits used
"RTN","IBCNSM1",121,0)
 I IBPLAN D BU^IBCNSJ21 S IBJJ="" F  S IBJJ=$O(IBBU(IBJJ)) Q:IBJJ=""  D DBU^IBCNSJ(IBBU(IBJJ))
"RTN","IBCNSM1",122,0)
 ;
"RTN","IBCNSM1",123,0)
 ; -- remove pointers from Insurance reviews
"RTN","IBCNSM1",124,0)
 S IBJJ=0 F  S IBJJ=$O(^IBT(356.2,"D",DFN,IBJJ)) Q:'IBJJ  I $P($G(^IBT(356.2,IBJJ,1)),"^",5)=IBCDFN S $P(^(1),"^",5)=""
"RTN","IBCNSM1",125,0)
 ;
"RTN","IBCNSM1",126,0)
 ; -- if individual policy, and is right patient, delete HIP
"RTN","IBCNSM1",127,0)
 S BLD=1
"RTN","IBCNSM1",128,0)
 I '$P(IBCPOLD,"^",2),DFN=$P(IBCPOLD,"^",10) D DEL^IBCNSJ(IBPLAN)
"RTN","IBCNSM1",129,0)
 ;
"RTN","IBCNSM1",130,0)
 ; -- delete entry in patient file
"RTN","IBCNSM1",131,0)
 S DA=IBCDFN,DA(1)=DFN,DIK="^DPT("_DFN_",.312," D ^DIK
"RTN","IBCNSM1",132,0)
 W:$G(IBXX) !,"Entry ",$G(IBXX)," Deleted"
"RTN","IBCNSM1",133,0)
 Q
"RTN","IBCNSM31")
0^55^B23516960
"RTN","IBCNSM31",1,0)
IBCNSM31 ;ALB/AAS/JNM - INSURANCE MANAGEMENT - OUTPUTS ;28-MAY-93
"RTN","IBCNSM31",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,68,413,497,516,549**;21-MAR-94;Build 54
"RTN","IBCNSM31",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSM31",4,0)
 ;
"RTN","IBCNSM31",5,0)
% G EN^IBCNSM
"RTN","IBCNSM31",6,0)
 ;
"RTN","IBCNSM31",7,0)
EA ; -- Edit all insurance policy data
"RTN","IBCNSM31",8,0)
 N IBDIF,I,J,IBXX,IBCDFN,IBTRC,VALMY
"RTN","IBCNSM31",9,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM31",10,0)
 D FULL^VALM1
"RTN","IBCNSM31",11,0)
 ;
"RTN","IBCNSM31",12,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSM31",13,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSM31",14,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to Edit All"
"RTN","IBCNSM31",15,0)
 . K DIR
"RTN","IBCNSM31",16,0)
 . D PAUSE^VALM1
"RTN","IBCNSM31",17,0)
 . D EAQ
"RTN","IBCNSM31",18,0)
 ;
"RTN","IBCNSM31",19,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D  ;W !,"Entry ",X,"Selected" D
"RTN","IBCNSM31",20,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM31",21,0)
 .Q:IBPPOL=""
"RTN","IBCNSM31",22,0)
 .S IBCDFN=$P($G(IBPPOL),"^",4) I 'IBCDFN W !!,"Can't identify the policy!" Q
"RTN","IBCNSM31",23,0)
 .; -- edit patient data
"RTN","IBCNSM31",24,0)
 .N IBQUIT S IBQUIT=0
"RTN","IBCNSM31",25,0)
 .S IBCNSEH=$P($G(^IBE(350.9,1,4)),"^",1) D PAT^IBCNSEH
"RTN","IBCNSM31",26,0)
 .D BEFORE^IBCNSEVT
"RTN","IBCNSM31",27,0)
 .D PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSM31",28,0)
 .D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSM31",29,0)
 .; -- edit policy data
"RTN","IBCNSM31",30,0)
 .D:'$G(IBQUIT) POL^IBCNSEH,EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSM31",31,0)
 .W ! D AI^IBCNSP1 D:$G(IBTRC) AIP^IBCNSP02(IBTRC)
"RTN","IBCNSM31",32,0)
 .Q
"RTN","IBCNSM31",33,0)
 ;
"RTN","IBCNSM31",34,0)
EAQ D BLD^IBCNSM
"RTN","IBCNSM31",35,0)
 S VALMBCK="R"
"RTN","IBCNSM31",36,0)
 Q
"RTN","IBCNSM31",37,0)
 ;
"RTN","IBCNSM31",38,0)
LK(IBCNS) ; -- screened look up to policy file
"RTN","IBCNSM31",39,0)
 ;      input:   IBCNS = pointer to insurance company file (36)
"RTN","IBCNSM31",40,0)
 ;
"RTN","IBCNSM31",41,0)
 N DIC,IBX,DIR,DUOUT,DTOUT,DIROUT,DIRUT,X,Y,IBCPOL
"RTN","IBCNSM31",42,0)
 S IBCPOL=""
"RTN","IBCNSM31",43,0)
 I $G(IBCNS)="" G LKQ
"RTN","IBCNSM31",44,0)
 ;
"RTN","IBCNSM31",45,0)
 I '$$ANYGP^IBCNSJ(IBCNS) W !!,"This company does not offer any active group plans." G LKQ
"RTN","IBCNSM31",46,0)
 ;
"RTN","IBCNSM31",47,0)
 S DIR(0)="Y",DIR("A")="This company offers active group plans.  Do you wish to select one"
"RTN","IBCNSM31",48,0)
 S DIR("?")="The look-up facility to select an active group plan has been enhanced to use the List Manager.  Enter 'YES' if you wish to select a plan from this look-up, or 'NO' to add your own plan."
"RTN","IBCNSM31",49,0)
 D ^DIR K DIR I 'Y G LKQ
"RTN","IBCNSM31",50,0)
 ;
"RTN","IBCNSM31",51,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you wish to directly enter this plan"
"RTN","IBCNSM31",52,0)
 S DIR("?")="The look-up facility to select an active group plan has been enhanced to use the List Manager.  Enter 'NO' if you wish to select a plan from this look-up, or 'YES' to directly enter the plan."
"RTN","IBCNSM31",53,0)
 D ^DIR K DIR I $D(DIRUT) G LKQ
"RTN","IBCNSM31",54,0)
 ;
"RTN","IBCNSM31",55,0)
 I 'Y D LKP^IBCNSU2(IBCNS,0,0,.IBCPOL,$G(IBALR)) G LKQ
"RTN","IBCNSM31",56,0)
 ;
"RTN","IBCNSM31",57,0)
 ; MRD;IB*2.0*516 - Display new Group Name and Number fields.
"RTN","IBCNSM31",58,0)
 S DIC("A")="Select an Active GROUP PLAN: "
"RTN","IBCNSM31",59,0)
 S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I +^(0)=IBCNS,$P(^(0),U,2),'$P(^(0),U,11),$G(IBALR)'=+Y"
"RTN","IBCNSM31",60,0)
 ;S DIC("W")="N IBX S IBX=$G(^(0)) W ""   Name: "",$E($S($P(IBX,U,3)]"""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""   Number: "",$S($P(IBX,U,4)]"""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSM31",61,0)
 S DIC("W")="N IBX S IBX=$G(^(2)) W ""   Name: "",$E($S($P(IBX,U,1)]"""":$P(IBX,U,1),1:""<none>"")_$J("""",20),1,20),""   Number: "",$E($S($P(IBX,U,2)]"""":$P(IBX,U,2),1:""<none>""),1,14)"
"RTN","IBCNSM31",62,0)
 D ^DIC K DIC I +Y>0 S IBCPOL=+Y
"RTN","IBCNSM31",63,0)
 ;
"RTN","IBCNSM31",64,0)
 ; -- see if only one policy
"RTN","IBCNSM31",65,0)
 ;I '$O(^IBA(355.3,"B",+IBCNS,IBX) D  G LKQ
"RTN","IBCNSM31",66,0)
 ;
"RTN","IBCNSM31",67,0)
 ; -- is more than one plan to choose from, let fileman do it.
"RTN","IBCNSM31",68,0)
 ;S DIC("A")="Select GROUP INSURANCE PLAN: "
"RTN","IBCNSM31",69,0)
 ;
"RTN","IBCNSM31",70,0)
 ;S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I $P(^(0),U)=IBCNS,($P(^(0),U,2)=1!($P(^(0),U,10)=$G(DFN)))"
"RTN","IBCNSM31",71,0)
 ;
"RTN","IBCNSM31",72,0)
 ;D ^DIC K DIC I +Y>0 S IBCPOL=+Y
"RTN","IBCNSM31",73,0)
 ;
"RTN","IBCNSM31",74,0)
LKQ Q IBCPOL
"RTN","IBCNSM31",75,0)
 ;
"RTN","IBCNSM31",76,0)
FUTURE ; -- if expiration date in future give warning
"RTN","IBCNSM31",77,0)
 I $G(IBFUTUR) K IBFUTUR Q
"RTN","IBCNSM31",78,0)
 I $P(^DPT(DFN,.312,IBCDFN,0),"^",4),$P(^(0),"^",4)>DT W !!,*7,"WARNING:  The expiration date for this policy is in the future!",!,"          Normally this is a past date or left blank or a past date",! S Y="@333"
"RTN","IBCNSM31",79,0)
 S IBFUTUR=1
"RTN","IBCNSM31",80,0)
 Q
"RTN","IBCNSM31",81,0)
 ;
"RTN","IBCNSM31",82,0)
COVERED(DFN,IBCOVP) ; -- update covered by insurance in background
"RTN","IBCNSM31",83,0)
 ; -- input ibcovp = the covered by insurance field prior to editing
"RTN","IBCNSM31",84,0)
 ;                   (add/edit/delete) of the 2.312 insurance type mult.
"RTN","IBCNSM31",85,0)
 ;
"RTN","IBCNSM31",86,0)
 Q:$G(DFN)<1
"RTN","IBCNSM31",87,0)
 N X,Y,I,IBCOV,IBNCOV,DA,DR,DIE,DIC,IBINS,IBINSD
"RTN","IBCNSM31",88,0)
 S (IBCOV,IBNCOV)=$P($G(^DPT(DFN,.31)),"^",11)
"RTN","IBCNSM31",89,0)
 D ALL^IBCNS1(DFN,"IBINS",2,DT) S IBINSD=+$G(IBINS(0))
"RTN","IBCNSM31",90,0)
 ;
"RTN","IBCNSM31",91,0)
 ; -- initial value ="" or Unknown
"RTN","IBCNSM31",92,0)
 I $G(IBCOVP)=""!($G(IBCOVP)="U") S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"U",IBINSD:"Y",1:"N")
"RTN","IBCNSM31",93,0)
 ;
"RTN","IBCNSM31",94,0)
 ; -- initial value = YES or NO (treat the same)
"RTN","IBCNSM31",95,0)
 I $G(IBCOVP)="Y"!($G(IBCOVP)="N") S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"N",IBINSD:"Y",1:"N")
"RTN","IBCNSM31",96,0)
 ;
"RTN","IBCNSM31",97,0)
 ;
"RTN","IBCNSM31",98,0)
 I IBCOV'=IBNCOV D
"RTN","IBCNSM31",99,0)
 .S DIE="^DPT(",DR=".3192////"_IBNCOV,DA=DFN D ^DIE
"RTN","IBCNSM31",100,0)
 .I '$D(ZTQUEUED)&($G(IBSUPRES)'>0) W !!,"COVERED BY HEALTH INSURANCE changed to '"_$S(IBNCOV="Y":"YES",IBNCOV="N":"NO",1:"UNKNOWN"),"'.",! H 3
"RTN","IBCNSM31",101,0)
 .Q
"RTN","IBCNSM31",102,0)
 Q
"RTN","IBCNSM31",103,0)
 ;
"RTN","IBCNSM31",104,0)
3 ; -- display group name as uneditable
"RTN","IBCNSM31",105,0)
 ;    called by die, expects da = entry in 355.3
"RTN","IBCNSM31",106,0)
 N X
"RTN","IBCNSM31",107,0)
 S X=$P($G(^IBA(355.3,DA,2)),"^",1)      ; IB*2.0*497 (vd)
"RTN","IBCNSM31",108,0)
 W !,"GROUP NAME: ",X,$S(X'="":"// ",1:""),"  (No Editing)"
"RTN","IBCNSM31",109,0)
 Q
"RTN","IBCNSM31",110,0)
 ;
"RTN","IBCNSM31",111,0)
4 ; -- display group number as uneditable
"RTN","IBCNSM31",112,0)
 ;    called by die, expects da = entry in 355.3
"RTN","IBCNSM31",113,0)
 N X
"RTN","IBCNSM31",114,0)
 S X=$P($G(^IBA(355.3,DA,2)),"^",2)      ; IB*2.0*497 (vd)
"RTN","IBCNSM31",115,0)
 W !,"GROUP NUMBER: ",X,$S(X'="":"// ",1:""),"  (No Editing)"
"RTN","IBCNSM31",116,0)
 Q
"RTN","IBCNSP")
0^7^B77034837
"RTN","IBCNSP",1,0)
IBCNSP ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,43,52,85,251,363,371,416,497,516,528,549**;21-MAR-94;Build 54
"RTN","IBCNSP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP",4,0)
% ;
"RTN","IBCNSP",5,0)
EN ; -- main entry point for IBCNS EXPANDED POLICY
"RTN","IBCNSP",6,0)
 N IB1ST
"RTN","IBCNSP",7,0)
 K VALMQUIT,IBPPOL,IBTOP
"RTN","IBCNSP",8,0)
 S IBTOP="IBCNSP"
"RTN","IBCNSP",9,0)
 D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSP",10,0)
 Q
"RTN","IBCNSP",11,0)
 ;
"RTN","IBCNSP",12,0)
HDR ; -- header code
"RTN","IBCNSP",13,0)
 N DOD,IBDOB,IBNAME,W,X,Y,Z                 ; IB*2.0*549 Added DOD
"RTN","IBCNSP",14,0)
 S IBNAME=^DPT(DFN,0)                       ; Direct global read on file 2 supported by IA 10035
"RTN","IBCNSP",15,0)
 S IBDOB=$P(IBNAME,"^",3)
"RTN","IBCNSP",16,0)
 S IBNAME=$E($P(IBNAME,U),1,20)
"RTN","IBCNSP",17,0)
 ;
"RTN","IBCNSP",18,0)
 ; IB*2.0*549 Shortened 'Expanded Policy Information For ' to 'For: ' below
"RTN","IBCNSP",19,0)
 S VALMHDR(1)="For: "_IBNAME_"  "_$P($$PT^IBEFUNC(DFN),U,2)_"  "_$$FMTE^XLFDT(IBDOB,"5DZ")
"RTN","IBCNSP",20,0)
 ;
"RTN","IBCNSP",21,0)
 ; IB*2.0*549 Added next 4 lines
"RTN","IBCNSP",22,0)
 S DOD=$$GET1^DIQ(2,DFN_",",.351,"I")
"RTN","IBCNSP",23,0)
 I DOD'="" D
"RTN","IBCNSP",24,0)
 . S DOD=$$FMTE^XLFDT(DOD,"5DZ")
"RTN","IBCNSP",25,0)
 . S VALMHDR(1)=VALMHDR(1)_"    DoD: "_DOD
"RTN","IBCNSP",26,0)
 S Z=$G(^DPT(DFN,.312,+$P(IBPPOL,U,4),0))
"RTN","IBCNSP",27,0)
 S W=$P($G(^IBA(355.3,+$P(Z,U,18),0)),U,11)
"RTN","IBCNSP",28,0)
 S Y=$E($P($G(^DIC(36,+Z,0)),U),1,20)_" Insurance Company"
"RTN","IBCNSP",29,0)
 S X="** Plan Currently "_$S(W:"Ina",1:"A")_"ctive **"
"RTN","IBCNSP",30,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,Y,48,29)
"RTN","IBCNSP",31,0)
 Q
"RTN","IBCNSP",32,0)
 ;
"RTN","IBCNSP",33,0)
INIT ; -- init variables and list array
"RTN","IBCNSP",34,0)
 K VALMQUIT
"RTN","IBCNSP",35,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSP",36,0)
 I '$D(IBPPOL) D PPOL Q:$D(VALMQUIT)
"RTN","IBCNSP",37,0)
 D BLD,HDR
"RTN","IBCNSP",38,0)
 Q
"RTN","IBCNSP",39,0)
 ;
"RTN","IBCNSP",40,0)
BLD ; -- list builder
"RTN","IBCNSP",41,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPDX",$J)
"RTN","IBCNSP",42,0)
 D KILL^VALM10()
"RTN","IBCNSP",43,0)
 N IBCDFND,IBCDFND1,IBCDFND2,IBCDFND4,IBCDFND5,IBCDFND7
"RTN","IBCNSP",44,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,U,4),0)),IBCDFND1=$G(^(1)),IBCDFND2=$G(^(2)),IBCDFND4=$G(^(4)),IBCDFND5=$G(^(5)),IBCDFND7=$G(^(7))
"RTN","IBCNSP",45,0)
 ; MRD;IB*2.0*516 - Use $$ZND^IBCNS1 to pull zero node of 2.312.
"RTN","IBCNSP",46,0)
 S IBCDFND=$$ZND^IBCNS1(DFN,$P(IBPPOL,U,4))
"RTN","IBCNSP",47,0)
 S IBCPOL=+$P(IBCDFND,U,18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,U,4)
"RTN","IBCNSP",48,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,U,18),0)),IBCPOLD1=$G(^(1))
"RTN","IBCNSP",49,0)
 S IBCPOLD2=$G(^IBA(355.3,+$G(IBCPOL),6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSP",50,0)
 S IBCPOLDL=$G(^IBA(355.3,+$G(IBCPOL),2))  ;IB*2*497  new group name and group number locations
"RTN","IBCNSP",51,0)
 ;
"RTN","IBCNSP",52,0)
 D INS^IBCNSP0                      ; insurance company
"RTN","IBCNSP",53,0)
 D POLICY^IBCNSP0                   ; plan information
"RTN","IBCNSP",54,0)
 D UR                               ; utilization review info
"RTN","IBCNSP",55,0)
 D EFFECT                           ; effective dates & source of info
"RTN","IBCNSP",56,0)
 D SUBSC^IBCNSP01                   ; subscriber info
"RTN","IBCNSP",57,0)
 D EMP                              ; subscriber's employer info
"RTN","IBCNSP",58,0)
 D PRV^IBCNSP01                     ; subscriber's provider contact info ;IB*2*497
"RTN","IBCNSP",59,0)
 D SPON^IBCNSP0                     ; insured person's info
"RTN","IBCNSP",60,0)
 D ID^IBCNSP01                      ; ins co ID numbers (IB*2*371)
"RTN","IBCNSP",61,0)
 D PLIM                             ; plan coverage limitations
"RTN","IBCNSP",62,0)
 D VER^IBCNSP01                     ; user/verifier/editor info
"RTN","IBCNSP",63,0)
 ;
"RTN","IBCNSP",64,0)
 ;IB*2.0*549 Removed next line
"RTN","IBCNSP",65,0)
 ;D CONTACT^IBCNSP0                  ; last insurance contact
"RTN","IBCNSP",66,0)
 D COMMENT                          ; comments - policy & plan
"RTN","IBCNSP",67,0)
 D RIDER^IBCNSP01                   ; policy rider info
"RTN","IBCNSP",68,0)
 ;
"RTN","IBCNSP",69,0)
 S VALMCNT=+$O(^TMP("IBCNSVP",$J,""),-1)
"RTN","IBCNSP",70,0)
 Q
"RTN","IBCNSP",71,0)
 ;
"RTN","IBCNSP",72,0)
COMMENT ; -- Comment region
"RTN","IBCNSP",73,0)
 ; Input:   DFN                 - IEN of the currently selected patient
"RTN","IBCNSP",74,0)
 ;          IBCPOL              -
"RTN","IBCNSP",75,0)
 ;          IBPPOL              - O node of the selected Patient Policy
"RTN","IBCNSP",76,0)
 ;          ^TMP("IBCNSVP",$J)  - Current global Array of display lines
"RTN","IBCNSP",77,0)
 ; Output:  IB1ST("COMMENT")    - 1st line of comments display
"RTN","IBCNSP",78,0)
 ;          ^TMP("IBCNSVP",$J)  - Updated global Array of display lines
"RTN","IBCNSP",79,0)
 ;
"RTN","IBCNSP",80,0)
 ;IB*2.0*549 Moved Group Plan Comment above Patient Policy Comment. Changed
"RTN","IBCNSP",81,0)
 ;           Patient Policy Comment to display the two most recent comments
"RTN","IBCNSP",82,0)
 ;           in the patient policy comment multiple (2.342,1.18)
"RTN","IBCNSP",83,0)
 N COMDT,COMIEN,COMCTR,COMSTOP,IBI,IBIIEN,IBL,OFFSET,XX
"RTN","IBCNSP",84,0)
 S IBL=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",85,0)
 S IB1ST("COMMENT")=IBL
"RTN","IBCNSP",86,0)
 ;
"RTN","IBCNSP",87,0)
 ; Display Group Plan Comment 
"RTN","IBCNSP",88,0)
 D SET(IBL,OFFSET," Comment -- Group Plan ",IORVON,IORVOFF)
"RTN","IBCNSP",89,0)
 S IBI=0
"RTN","IBCNSP",90,0)
 F  S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:IBI<1  D
"RTN","IBCNSP",91,0)
 . S IBL=IBL+1
"RTN","IBCNSP",92,0)
 . D SET(IBL,OFFSET," "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSP",93,0)
 S IBL=IBL+1
"RTN","IBCNSP",94,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",95,0)
 ;
"RTN","IBCNSP",96,0)
 ; Display Last two Patient Policy Comments
"RTN","IBCNSP",97,0)
 S IBIIEN=$P(IBPPOL,"^",4),IBL=IBL+1
"RTN","IBCNSP",98,0)
 D SET(IBL,OFFSET," Comment -- Patient Policy ",IORVON,IORVOFF)
"RTN","IBCNSP",99,0)
 S IBL=IBL+1,XX=" Dt Entered  Entered By                Method     Person Contacted"
"RTN","IBCNSP",100,0)
 S XX=XX_$J("",78-$L(XX))
"RTN","IBCNSP",101,0)
 D SET(IBL,OFFSET,XX,IOUON,IOUOFF)
"RTN","IBCNSP",102,0)
 S COMDT="",(COMCTR,COMSTOP)=0
"RTN","IBCNSP",103,0)
 F  D  Q:(COMDT="")!COMSTOP
"RTN","IBCNSP",104,0)
 . S COMDT=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT),-1)
"RTN","IBCNSP",105,0)
 . Q:COMDT=""
"RTN","IBCNSP",106,0)
 . S COMIEN=""
"RTN","IBCNSP",107,0)
 . F  D  Q:(COMIEN="")!COMSTOP
"RTN","IBCNSP",108,0)
 . . S COMIEN=$O(^DPT(DFN,.312,IBIIEN,13,"B",COMDT,COMIEN),-1)
"RTN","IBCNSP",109,0)
 . . Q:COMIEN=""
"RTN","IBCNSP",110,0)
 . . S COMCTR=COMCTR+1
"RTN","IBCNSP",111,0)
 . . I COMCTR>2 S COMSTOP=1 Q
"RTN","IBCNSP",112,0)
 . . I COMCTR=2 D
"RTN","IBCNSP",113,0)
 . . . S IBL=IBL+1
"RTN","IBCNSP",114,0)
 . . . D SET(IBL,OFFSET," ")
"RTN","IBCNSP",115,0)
 . . D DISPPPC(.IBL,DFN,IBIIEN,COMIEN)          ; Display Patient Policy Comment
"RTN","IBCNSP",116,0)
 ;
"RTN","IBCNSP",117,0)
 ; Add two blank lines at end
"RTN","IBCNSP",118,0)
 S IBL=IBL+1
"RTN","IBCNSP",119,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",120,0)
 S IBL=IBL+1
"RTN","IBCNSP",121,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",122,0)
 Q
"RTN","IBCNSP",123,0)
 ;
"RTN","IBCNSP",124,0)
DISPPPC(IBL,DFN,IBIIEN,COMIEN) ; Display one Patient Policy Comment
"RTN","IBCNSP",125,0)
 ;IB*2.0*549 - Added sub-routine
"RTN","IBCNSP",126,0)
 ; Input:   IBL                 - Current Display Line Counter
"RTN","IBCNSP",127,0)
 ;          DFN                 - IEN of the currently selected patient
"RTN","IBCNSP",128,0)
 ;          IBIIEN              - ^DPT(DFN,.312,IBIIEN,0) Where IBIIEN is the
"RTN","IBCNSP",129,0)
 ;                                multiple IEN of the selected patient policy
"RTN","IBCNSP",130,0)
 ;          COMIEN              - ^DPT(DFN,.312,IBIIEN,13,COMIEN,0) Where 
"RTN","IBCNSP",131,0)
 ;                                COMIEN is the multiple IEN of the selected
"RTN","IBCNSP",132,0)
 ;                                Patient Policy Comment
"RTN","IBCNSP",133,0)
 ;          ^TMP("IBCNSVP",$J)  - Current global Array of display lines
"RTN","IBCNSP",134,0)
 ; Output:  IBL                 - Updated Display Line Counter
"RTN","IBCNSP",135,0)
 ;          ^TMP("IBCNSVP",$J)  - Updated global Array of display lines
"RTN","IBCNSP",136,0)
 N COMDATA,LINE,XX,ZZ
"RTN","IBCNSP",137,0)
 S COMDATA=$$GETONEC^IBCNCH2(DFN,IBIIEN,COMIEN,0,77,0,1)
"RTN","IBCNSP",138,0)
 S LINE=$P(COMDATA,"^",1)_"    "
"RTN","IBCNSP",139,0)
 S XX=$P(COMDATA,"^",2),ZZ=$J("",26-$L(XX))
"RTN","IBCNSP",140,0)
 S LINE=LINE_XX_ZZ
"RTN","IBCNSP",141,0)
 S XX=$P(COMDATA,"^",4),ZZ=$J("",11-$L(XX))
"RTN","IBCNSP",142,0)
 S LINE=LINE_XX_ZZ_$P(COMDATA,"^",3),IBL=IBL+1
"RTN","IBCNSP",143,0)
 D SET(IBL,OFFSET,LINE)
"RTN","IBCNSP",144,0)
 S IBL=IBL+1,LINE=" "_$P(COMDATA,"^",8)
"RTN","IBCNSP",145,0)
 D SET(IBL,OFFSET,LINE)
"RTN","IBCNSP",146,0)
 Q
"RTN","IBCNSP",147,0)
 ;
"RTN","IBCNSP",148,0)
EFFECT ; -- Effective date region
"RTN","IBCNSP",149,0)
 N START,OFFSET
"RTN","IBCNSP",150,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-6  ;ib*2*497 lines need to be displayed alongside UR region
"RTN","IBCNSP",151,0)
 S OFFSET=45
"RTN","IBCNSP",152,0)
 D SET(START,OFFSET-4," Effective Dates & Source ",IORVON,IORVOFF)
"RTN","IBCNSP",153,0)
 D SET(START+1,OFFSET," Effective Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,8)))
"RTN","IBCNSP",154,0)
 D SET(START+2,OFFSET,"Expiration Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,4)))
"RTN","IBCNSP",155,0)
 D SET(START+3,OFFSET," Source of Info: "_$$EXPAND^IBTRE(2.312,1.09,$P($G(IBCDFND1),U,9)))
"RTN","IBCNSP",156,0)
 ;
"RTN","IBCNSP",157,0)
 ;IB*2.0*549 Changed OFFSET-4 to OFFSET-8
"RTN","IBCNSP",158,0)
 ;           Changed 'Policy Not Billable' to 'Stop Policy From Billing'
"RTN","IBCNSP",159,0)
 D SET(START+4,OFFSET-9,"Stop Policy From Billing: "_$S($P($G(^DPT(DFN,.312,IBCDFN,3)),"^",4):"YES",1:"NO"))
"RTN","IBCNSP",160,0)
 Q
"RTN","IBCNSP",161,0)
 ;
"RTN","IBCNSP",162,0)
UR ; -- UR of insurance region
"RTN","IBCNSP",163,0)
 N START,OFFSET
"RTN","IBCNSP",164,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2  ;IB*2*497
"RTN","IBCNSP",165,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSP",166,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,U,5)))
"RTN","IBCNSP",167,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,U,12)))
"RTN","IBCNSP",168,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,U,6)))
"RTN","IBCNSP",169,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,U,7)))
"RTN","IBCNSP",170,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,U,8)))
"RTN","IBCNSP",171,0)
 D SET(START+6,2," ")
"RTN","IBCNSP",172,0)
 Q
"RTN","IBCNSP",173,0)
EMP ; -- Insurance Employer Region   
"RTN","IBCNSP",174,0)
 ; ib*2*497 move employer lines around
"RTN","IBCNSP",175,0)
 N OFFSET,START,IBADD,COL2
"RTN","IBCNSP",176,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",177,0)
 D SET(START,OFFSET," Subscriber's Employer Information ",IORVON,IORVOFF)
"RTN","IBCNSP",178,0)
 D SET(START+1,OFFSET,$$RJ^XLFSTR(" Employment Status: ",20)_$$EXPAND^IBTRE(2.312,2.11,$P(IBCDFND2,U,11)))
"RTN","IBCNSP",179,0)
 S COL2=START+1
"RTN","IBCNSP",180,0)
 D SET(START+2,OFFSET,$$RJ^XLFSTR("Employer: ",20)_$P(IBCDFND2,U,9))
"RTN","IBCNSP",181,0)
 D SET(START+3,OFFSET,$$RJ^XLFSTR("Street: ",20)_$P(IBCDFND2,U,2)) S IBADD=1
"RTN","IBCNSP",182,0)
 I $P(IBCDFND2,U,3)'="" D SET(START+4,OFFSET,$$RJ^XLFSTR("Street 2: ",20)_$P(IBCDFND2,U,3)) S IBADD=2
"RTN","IBCNSP",183,0)
 I $P(IBCDFND2,U,4)'="" D SET(START+5,OFFSET,$$RJ^XLFSTR("Street 3: ",20)_$P(IBCDFND2,U,4)) S IBADD=3
"RTN","IBCNSP",184,0)
 D SET(START+3+IBADD,OFFSET,$$RJ^XLFSTR("City/State: ",20)_$E($P(IBCDFND2,U,5),1,15)_$S($P(IBCDFND2,U,5)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFND2,U,6),0)),U,2)_" "_$E($P(IBCDFND2,U,7),1,5))
"RTN","IBCNSP",185,0)
 D SET(START+4+IBADD,OFFSET,$$RJ^XLFSTR("Phone: ",20)_$P(IBCDFND2,U,8))
"RTN","IBCNSP",186,0)
 D SET(START+5+IBADD,OFFSET," ")  ; ib*2*497  only 1 blank line to end the section
"RTN","IBCNSP",187,0)
 ;
"RTN","IBCNSP",188,0)
 S START=COL2,OFFSET=40
"RTN","IBCNSP",189,0)
 D SET(START,OFFSET,"Emp Sponsored Plan: "_$S(+$P(IBCDFND2,U,10):"Yes",1:"No"))
"RTN","IBCNSP",190,0)
 D SET(START+1,OFFSET,"Claims to Employer: "_$S(+IBCDFND2:"Yes, Send to Employer",1:"No, Send to Insurance Company"))
"RTN","IBCNSP",191,0)
 D SET(START+2,OFFSET,"   Retirement Date: "_$$DAT1^IBOUTL($P(IBCDFND2,U,12)))
"RTN","IBCNSP",192,0)
 ;
"RTN","IBCNSP",193,0)
EMPQ Q
"RTN","IBCNSP",194,0)
 ;
"RTN","IBCNSP",195,0)
PLIM ; plan coverage limitations/plan limitation category display
"RTN","IBCNSP",196,0)
 N START,END S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP",197,0)
 S IB1ST("PLIM")=START
"RTN","IBCNSP",198,0)
 D LIMBLD^IBCNSC41(START,2)
"RTN","IBCNSP",199,0)
 S END=$O(^TMP("IBCNSVP",$J,""),-1)  ; last line constructed
"RTN","IBCNSP",200,0)
 D SET(END+1,2," ")    ; 2 blank lines to end this section
"RTN","IBCNSP",201,0)
 D SET(END+2,2," ")
"RTN","IBCNSP",202,0)
PLIMX ;
"RTN","IBCNSP",203,0)
 Q
"RTN","IBCNSP",204,0)
 ; 
"RTN","IBCNSP",205,0)
HELP ; -- help code
"RTN","IBCNSP",206,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSP",207,0)
 Q
"RTN","IBCNSP",208,0)
 ;
"RTN","IBCNSP",209,0)
EXIT ; -- exit code
"RTN","IBCNSP",210,0)
 K IBPPOL,VALMQUIT,IBCNS,IBCDFN,IBCPOL,IBCPOLD,IBCPOLD1,IBCPOLD2,IBCPOLDL,IBCDFND,IBCDFND1,IBCDFND2,IBVPCLBG,IBVPCLEN
"RTN","IBCNSP",211,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSP",212,0)
 Q
"RTN","IBCNSP",213,0)
 ;
"RTN","IBCNSP",214,0)
EXPND ; -- expand code
"RTN","IBCNSP",215,0)
 Q
"RTN","IBCNSP",216,0)
 ;
"RTN","IBCNSP",217,0)
PPOL ; -- select patient, select policy
"RTN","IBCNSP",218,0)
 I '$D(DFN) D  G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",219,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP",220,0)
 .S DFN=+Y
"RTN","IBCNSP",221,0)
 I $G(DFN)<1 S VALMQUIT="" G PPOLQ
"RTN","IBCNSP",222,0)
 ;
"RTN","IBCNSP",223,0)
 I '$O(^DPT(DFN,.312,0)) W !!,"Patient doesn't have Insurance" K DFN G PPOL
"RTN","IBCNSP",224,0)
 ;
"RTN","IBCNSP",225,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQMN",DIC("A")="Select Patient Policy: "
"RTN","IBCNSP",226,0)
 D ^DIC I +Y<1 S VALMQUIT=""
"RTN","IBCNSP",227,0)
 G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",228,0)
 S IBPPOL="^2^"_DFN_U_+Y_U_$G(^DPT(DFN,.312,+Y,0))
"RTN","IBCNSP",229,0)
PPOLQ K DIC Q
"RTN","IBCNSP",230,0)
 ;
"RTN","IBCNSP",231,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP",232,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP",233,0)
 Q
"RTN","IBCNSP",234,0)
 ;
"RTN","IBCNSP",235,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP",236,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSP",237,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP",238,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP",239,0)
 W:'(LINE#5) "."
"RTN","IBCNSP",240,0)
 Q
"RTN","IBCNSP",241,0)
 ;
"RTN","IBCNSP1")
0^13^B78908703
"RTN","IBCNSP1",1,0)
IBCNSP1 ;ALB/AAS - INSURANCE MANAGEMENT - policy actions ;05-MAY-2015
"RTN","IBCNSP1",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,40,43,52,85,103,361,371,377,497,549**;21-MAR-94;Build 54
"RTN","IBCNSP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP1",4,0)
 ;;ICR#5002 for read of ^DIE input template data
"RTN","IBCNSP1",5,0)
 ;
"RTN","IBCNSP1",6,0)
% G EN^IBCNSP
"RTN","IBCNSP1",7,0)
 ;
"RTN","IBCNSP1",8,0)
EA ; -- Edit all
"RTN","IBCNSP1",9,0)
 N IBCDFN,IBTRC,IBTRN
"RTN","IBCNSP1",10,0)
 D FULL^VALM1
"RTN","IBCNSP1",11,0)
 ;
"RTN","IBCNSP1",12,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSP1",13,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP1",14,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to Edit All"
"RTN","IBCNSP1",15,0)
 . K DIR
"RTN","IBCNSP1",16,0)
 . D PAUSE^VALM1
"RTN","IBCNSP1",17,0)
 . D EAQ
"RTN","IBCNSP1",18,0)
 ;
"RTN","IBCNSP1",19,0)
 W !!
"RTN","IBCNSP1",20,0)
 S IBCDFN=$P($G(IBPPOL),"^",4)
"RTN","IBCNSP1",21,0)
 I 'IBCDFN W !!,"Can't identify the policy!" G EAQ
"RTN","IBCNSP1",22,0)
 S IBCNSEH=1 D PAT^IBCNSEH
"RTN","IBCNSP1",23,0)
 ;
"RTN","IBCNSP1",24,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",25,0)
 D PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSP1",26,0)
 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSP1",27,0)
 ;
"RTN","IBCNSP1",28,0)
 ; -- edit policy data
"RTN","IBCNSP1",29,0)
 D POL^IBCNSEH
"RTN","IBCNSP1",30,0)
 D EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSP1",31,0)
 ;
"RTN","IBCNSP1",32,0)
 W !!
"RTN","IBCNSP1",33,0)
 D AI
"RTN","IBCNSP1",34,0)
 ;
"RTN","IBCNSP1",35,0)
EAQ ; Edit All Exit
"RTN","IBCNSP1",36,0)
 D:$G(IBTRC) AIP^IBCNSP02(IBTRC)
"RTN","IBCNSP1",37,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",38,0)
 S VALMBCK="R"
"RTN","IBCNSP1",39,0)
 Q
"RTN","IBCNSP1",40,0)
 ;
"RTN","IBCNSP1",41,0)
AB ; -- Annual Benefits
"RTN","IBCNSP1",42,0)
 ;
"RTN","IBCNSP1",43,0)
 ; IB*2.0*549 - Added Security Key check
"RTN","IBCNSP1",44,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP1",45,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Annual Benefits."
"RTN","IBCNSP1",46,0)
 . K DIR
"RTN","IBCNSP1",47,0)
 . D PAUSE^VALM1
"RTN","IBCNSP1",48,0)
 . S VALMBCK="R"
"RTN","IBCNSP1",49,0)
 ;
"RTN","IBCNSP1",50,0)
 S X=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,X,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",51,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ABQ
"RTN","IBCNSP1",52,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",53,0)
 D EN^VALM("IBCNS ANNUAL BENEFITS")
"RTN","IBCNSP1",54,0)
 S VALMBCK="R"
"RTN","IBCNSP1",55,0)
ABQ Q
"RTN","IBCNSP1",56,0)
 ;
"RTN","IBCNSP1",57,0)
BU ; -- Benefits Used
"RTN","IBCNSP1",58,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,IBCDFN,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",59,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G BUQ
"RTN","IBCNSP1",60,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",61,0)
 D EN^VALM("IBCNS BENEFITS USED BY DATE")
"RTN","IBCNSP1",62,0)
 S VALMBCK="R"
"RTN","IBCNSP1",63,0)
BUQ Q
"RTN","IBCNSP1",64,0)
 ;
"RTN","IBCNSP1",65,0)
IT ; -- edit insurance type info from patient policy and plan edit
"RTN","IBCNSP1",66,0)
 D FULL^VALM1
"RTN","IBCNSP1",67,0)
 ;
"RTN","IBCNSP1",68,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSP1",69,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP1",70,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Insurance Type"
"RTN","IBCNSP1",71,0)
 . W !,"Information."
"RTN","IBCNSP1",72,0)
 . K DIR
"RTN","IBCNSP1",73,0)
 . D PAUSE^VALM1
"RTN","IBCNSP1",74,0)
 . D ITQ
"RTN","IBCNSP1",75,0)
 ;
"RTN","IBCNSP1",76,0)
 W !!
"RTN","IBCNSP1",77,0)
 N IBCDFN
"RTN","IBCNSP1",78,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCPOL=+$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)
"RTN","IBCNSP1",79,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ITQ
"RTN","IBCNSP1",80,0)
 D ITEDIT(IBCPOL,IBCDFN)
"RTN","IBCNSP1",81,0)
ITQ ; Edit Insurance Type Exit
"RTN","IBCNSP1",82,0)
 S VALMBCK="R"
"RTN","IBCNSP1",83,0)
 Q
"RTN","IBCNSP1",84,0)
 ;
"RTN","IBCNSP1",85,0)
IT1 ; -- edit insurance type info from patient policy
"RTN","IBCNSP1",86,0)
 D FULL^VALM1
"RTN","IBCNSP1",87,0)
 ;
"RTN","IBCNSP1",88,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSP1",89,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP1",90,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Insurance Type"
"RTN","IBCNSP1",91,0)
 . W !,"Information."
"RTN","IBCNSP1",92,0)
 . K DIR
"RTN","IBCNSP1",93,0)
 . D PAUSE^VALM1
"RTN","IBCNSP1",94,0)
 . S VALMBCK="R"
"RTN","IBCNSP1",95,0)
 ;
"RTN","IBCNSP1",96,0)
 D ITEDIT(IBCPOL)
"RTN","IBCNSP1",97,0)
 S VALMBCK="R"
"RTN","IBCNSP1",98,0)
 Q
"RTN","IBCNSP1",99,0)
 ;
"RTN","IBCNSP1",100,0)
ITEDIT(IBCPOL,IBCDFN) ;Edit insurance type info once you have plan (IBCPOL)
"RTN","IBCNSP1",101,0)
 ; IBCDFN = the ifn of the policy multiple for pt in ^DPT, node .312
"RTN","IBCNSP1",102,0)
 ;          only defined for editing via patient policy
"RTN","IBCNSP1",103,0)
 G:'$G(IBCPOL) ITEDITQ
"RTN","IBCNSP1",104,0)
 D SAVE^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",105,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G ITEDITQ
"RTN","IBCNSP1",106,0)
 I $G(IBCDFN) S IBCNSEH=+$G(^IBE(350.9,1,4)) D POL^IBCNSEH
"RTN","IBCNSP1",107,0)
 I $P($G(^IBA(355.3,IBCPOL,0)),"^",11) W !?2,*7,"Please note that this plan is inactive!",!
"RTN","IBCNSP1",108,0)
 S DA=IBCPOL,DIE="^IBA(355.3,",DR=".05;.12;.06;.07;.08"
"RTN","IBCNSP1",109,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",110,0)
 D COMP^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",111,0)
 I IBDIF D UPDATE^IBCNSP3(IBCPOL) D:$G(IBCDFN) UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP D:'$G(IBCDFN) INIT^IBCNSC4
"RTN","IBCNSP1",112,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP1",113,0)
ITEDITQ Q
"RTN","IBCNSP1",114,0)
 ;
"RTN","IBCNSP1",115,0)
ED ; -- Edit effective dates
"RTN","IBCNSP1",116,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",117,0)
 N IBDIF,DA,DR,DIE,DIC
"RTN","IBCNSP1",118,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",119,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",120,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EDQ
"RTN","IBCNSP1",121,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",122,0)
 S DR="8;3;1.09//;3.04"
"RTN","IBCNSP1",123,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",124,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN) I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),UPDCLM(DFN,IBCDFN),AFTER^IBCNSEVT,^IBCNSEVT,BLD^IBCNSP
"RTN","IBCNSP1",125,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",126,0)
EDQ S VALMBCK="R" Q
"RTN","IBCNSP1",127,0)
 ;
"RTN","IBCNSP1",128,0)
VC ; -- Verify Coverage
"RTN","IBCNSP1",129,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",130,0)
 D VFY^IBCNSM2
"RTN","IBCNSP1",131,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",132,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",133,0)
 ;
"RTN","IBCNSP1",134,0)
SU ; -- Subscriber Update
"RTN","IBCNSP1",135,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",136,0)
 ;Patch 40
"RTN","IBCNSP1",137,0)
 N IBDIF,DA,DR,DIC,DIE,DGSENFLG
"RTN","IBCNSP1",138,0)
 S DGSENFLG=1
"RTN","IBCNSP1",139,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",140,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",141,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G SUQ
"RTN","IBCNSP1",142,0)
 ;
"RTN","IBCNSP1",143,0)
 D EDIT(DFN,IBCDFN)   ; IB*371 - edit pat ins 2.312 subfile fields
"RTN","IBCNSP1",144,0)
 ;
"RTN","IBCNSP1",145,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",146,0)
 I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP1",147,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",148,0)
SUQ S VALMBCK="R" Q
"RTN","IBCNSP1",149,0)
 ;
"RTN","IBCNSP1",150,0)
IC ; -- Insurance Contact Information
"RTN","IBCNSP1",151,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",152,0)
 N IBDIF,DA,DR,DIC,DIE,IBTRC,DIR,DUOUT,DTOUT,DIRUT,IBTRN
"RTN","IBCNSP1",153,0)
 D AI
"RTN","IBCNSP1",154,0)
 D:$G(IBTRC) AIP^IBCNSP02(IBTRC),BLD^IBCNSP
"RTN","IBCNSP1",155,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",156,0)
 Q
"RTN","IBCNSP1",157,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP1",158,0)
 N X,Y,I,J,DA,DR,DIC,DIE,DR,DD,DO,VA,VAIN,VAERR,IBQUIT,IBXIFN,IBTRN,DUOUT,IBX,IBQUIT,DTOUT
"RTN","IBCNSP1",159,0)
 Q:'$G(DFN)
"RTN","IBCNSP1",160,0)
 Q:'$G(IBCDFN)  S IBQUIT=0
"RTN","IBCNSP1",161,0)
 D AI^IBCNSP02
"RTN","IBCNSP1",162,0)
 Q
"RTN","IBCNSP1",163,0)
 ;
"RTN","IBCNSP1",164,0)
PIDEF(IBREL,FLD,IBDFN,SPDEF) ; Function to return patient file defaults
"RTN","IBCNSP1",165,0)
 ; Called from input template IBCN PATIENT INSURANCE
"RTN","IBCNSP1",166,0)
 ; IBREL = value from 2.312,4.03 field (PT. RELATIONSHIP - HIPAA)
"RTN","IBCNSP1",167,0)
 ;   FLD = field# in file 2.312
"RTN","IBCNSP1",168,0)
 ; IBDFN = patient ien to file 2
"RTN","IBCNSP1",169,0)
 ; SPDEF = spouse default flag =1 if this field should be defaulted
"RTN","IBCNSP1",170,0)
 ;         when the spouse is the policy holder
"RTN","IBCNSP1",171,0)
 ;
"RTN","IBCNSP1",172,0)
 ; The purpose is to provide a default value for the field when the
"RTN","IBCNSP1",173,0)
 ; patient and the ins. subscriber are the same.
"RTN","IBCNSP1",174,0)
 ;
"RTN","IBCNSP1",175,0)
 NEW VAL
"RTN","IBCNSP1",176,0)
 S VAL=""
"RTN","IBCNSP1",177,0)
 I +$G(IBREL)'=1,+$G(IBREL)'=18 G PIDEFX     ; patient not the insured or spouse, get out
"RTN","IBCNSP1",178,0)
 I +$G(IBREL)=1,'$G(SPDEF) G PIDEFX          ; not a field for spouse default
"RTN","IBCNSP1",179,0)
 I '$G(FLD) G PIDEFX                         ; no field# passed in
"RTN","IBCNSP1",180,0)
 I '$G(IBDFN) G PIDEFX                       ; no patient passed in
"RTN","IBCNSP1",181,0)
 ;
"RTN","IBCNSP1",182,0)
 ; Build the patient demographics area
"RTN","IBCNSP1",183,0)
 I '$D(^UTILITY("VADM",$J)) D
"RTN","IBCNSP1",184,0)
 . N VAHOW,DFN,VADM
"RTN","IBCNSP1",185,0)
 . S VAHOW=2,DFN=IBDFN D DEM^VADPT
"RTN","IBCNSP1",186,0)
 . Q
"RTN","IBCNSP1",187,0)
 ;
"RTN","IBCNSP1",188,0)
 ; Build the patient address area
"RTN","IBCNSP1",189,0)
 I '$D(^UTILITY("VAPA",$J)) D
"RTN","IBCNSP1",190,0)
 . N VAHOW,DFN,VAPA
"RTN","IBCNSP1",191,0)
 . S VAHOW=2,DFN=IBDFN,VAPA("P")="" D ADD^VADPT
"RTN","IBCNSP1",192,0)
 . Q
"RTN","IBCNSP1",193,0)
 ;
"RTN","IBCNSP1",194,0)
 I FLD=7.01 S VAL=$P($G(^UTILITY("VADM",$J,1)),U,1) G PIDEFX                        ; Name    - IB*2.0*497 (vd)
"RTN","IBCNSP1",195,0)
 I FLD=3.01 S VAL=$$FMTE^XLFDT($P($G(^UTILITY("VADM",$J,3)),U,1),"5Z") G PIDEFX     ; Date of Birth
"RTN","IBCNSP1",196,0)
 I FLD=3.02 S VAL=$$EXTERNAL^DILFD(2,.325,,$P($G(^DPT(IBDFN,.32)),U,5)) G PIDEFX    ; Branch
"RTN","IBCNSP1",197,0)
 I FLD=3.05 S VAL=$P($G(^UTILITY("VADM",$J,2)),U,2) G PIDEFX                        ; SSN
"RTN","IBCNSP1",198,0)
 I FLD=3.06 S VAL=$P($G(^UTILITY("VAPA",$J,1)),U,1) G PIDEFX                        ; Street Address 1
"RTN","IBCNSP1",199,0)
 I FLD=3.07 S VAL=$P($G(^UTILITY("VAPA",$J,2)),U,1) G PIDEFX                        ; Street Address 2
"RTN","IBCNSP1",200,0)
 I FLD=3.08 S VAL=$P($G(^UTILITY("VAPA",$J,4)),U,1) G PIDEFX                        ; City
"RTN","IBCNSP1",201,0)
 I FLD=3.09 S VAL=$P($G(^UTILITY("VAPA",$J,5)),U,2) G PIDEFX                        ; State
"RTN","IBCNSP1",202,0)
 I FLD=3.1 S VAL=$P($G(^UTILITY("VAPA",$J,11)),U,2) G PIDEFX                        ; Zipcode
"RTN","IBCNSP1",203,0)
 I FLD=3.11 S VAL=$P($G(^UTILITY("VAPA",$J,8)),U,1) G PIDEFX                        ; Phone#
"RTN","IBCNSP1",204,0)
 I FLD=3.12 S VAL=$P($G(^UTILITY("VADM",$J,5)),U,2) G PIDEFX                        ; Sex
"RTN","IBCNSP1",205,0)
PIDEFX ;
"RTN","IBCNSP1",206,0)
 Q VAL
"RTN","IBCNSP1",207,0)
 ;
"RTN","IBCNSP1",208,0)
ASK(QUES,DEFLT) ; Function to ask Yes/No Question
"RTN","IBCNSP1",209,0)
 ; Returns 1 (yes), 0 (no, up-arrow, or timeout)
"RTN","IBCNSP1",210,0)
 NEW X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNSP1",211,0)
 S DIR(0)="Y",DIR("A")=$G(QUES)
"RTN","IBCNSP1",212,0)
 S DIR("B")=$S($G(DEFLT):"Yes",1:"No")
"RTN","IBCNSP1",213,0)
 W ! D ^DIR W:Y !
"RTN","IBCNSP1",214,0)
 I $D(DIRUT) S Y=0
"RTN","IBCNSP1",215,0)
ASKX ;
"RTN","IBCNSP1",216,0)
 Q Y
"RTN","IBCNSP1",217,0)
 ;
"RTN","IBCNSP1",218,0)
EDIT(IBDFN,IBCDFN,IBQUIT) ; Main call to edit data in 2.312 pat ins subfile
"RTN","IBCNSP1",219,0)
 ;  IBDFN - patient DFN
"RTN","IBCNSP1",220,0)
 ; IBCDFN - ien for patient insurance policy in subfile 2.312
"RTN","IBCNSP1",221,0)
 ; IBQUIT - Output variable.  Pass by reference.  Will be set to 1 if
"RTN","IBCNSP1",222,0)
 ;          the user entered an up-arrow, timed-out, or deleted the
"RTN","IBCNSP1",223,0)
 ;          2.312 subfile entry by entering "@" at the .01 field
"RTN","IBCNSP1",224,0)
 ; 
"RTN","IBCNSP1",225,0)
 NEW DA,DR,DIE,IBZ,IBY,X,Y,DTOUT
"RTN","IBCNSP1",226,0)
 NEW IDS,SUB,PAT,PCE,SUB1,PAT1
"RTN","IBCNSP1",227,0)
 S DA(1)=+$G(IBDFN)    ; patient IEN
"RTN","IBCNSP1",228,0)
 S DA=+$G(IBCDFN)      ; patient insurance IEN
"RTN","IBCNSP1",229,0)
 I 'DA!'DA(1) G EDITX
"RTN","IBCNSP1",230,0)
 S DIE="^DPT("_IBDFN_",.312,"
"RTN","IBCNSP1",231,0)
 ;
"RTN","IBCNSP1",232,0)
 ; Find the input template IEN for the [IBCN PATIENT INSURANCE] template
"RTN","IBCNSP1",233,0)
 S IBY=+$$FIND1^DIC(.402,,"X","IBCN PATIENT INSURANCE")
"RTN","IBCNSP1",234,0)
 I 'IBY G EDITX
"RTN","IBCNSP1",235,0)
 ;
"RTN","IBCNSP1",236,0)
 ; Build the DR array/string - ICR# 5002
"RTN","IBCNSP1",237,0)
 M DR(1)=^DIE(IBY,"DR",2)
"RTN","IBCNSP1",238,0)
 S DR=$G(DR(1,2.312))
"RTN","IBCNSP1",239,0)
 I DR="" G EDITX
"RTN","IBCNSP1",240,0)
 ;
"RTN","IBCNSP1",241,0)
 S $P(^DIE(IBY,0),U,7)=DT   ; see TEM+2^DIE  ICR# 5002
"RTN","IBCNSP1",242,0)
 ;
"RTN","IBCNSP1",243,0)
 D ^DIE     ; edit subfile data
"RTN","IBCNSP1",244,0)
 ;
"RTN","IBCNSP1",245,0)
 ; If the user entered an up-arrow, or timed-out, or deleted the entry,
"RTN","IBCNSP1",246,0)
 ; then set the output variable IBQUIT
"RTN","IBCNSP1",247,0)
 I $D(Y)!$D(DTOUT)!'$D(DA) S IBQUIT=1
"RTN","IBCNSP1",248,0)
 ;
"RTN","IBCNSP1",249,0)
 F IBZ="VADM","VAPA" K ^UTILITY(IBZ,$J)    ; cleanup scratch global
"RTN","IBCNSP1",250,0)
 ;
"RTN","IBCNSP1",251,0)
 D UPDCLM(IBDFN,IBCDFN)      ; update editable claims
"RTN","IBCNSP1",252,0)
 ;
"RTN","IBCNSP1",253,0)
 ; Cleanup any problems in the secondary ID area
"RTN","IBCNSP1",254,0)
 S IDS=$G(^DPT(IBDFN,.312,IBCDFN,5))           ; whole 5 node
"RTN","IBCNSP1",255,0)
 S (SUB,PAT)=""
"RTN","IBCNSP1",256,0)
 F PCE=3:1:8 S $P(SUB,U,PCE)=$P(IDS,U,PCE-1)   ; subscriber sec ID/qual
"RTN","IBCNSP1",257,0)
 F PCE=3:1:8 S $P(PAT,U,PCE)=$P(IDS,U,PCE+5)   ; patient sec ID/qual
"RTN","IBCNSP1",258,0)
 ; SUB and PAT are 8-piece strings with pieces 1 and 2 being nil
"RTN","IBCNSP1",259,0)
 S SUB1=$$SCRUB^IBCEF21(SUB)                   ; scrub 8-piece string
"RTN","IBCNSP1",260,0)
 S PAT1=$$SCRUB^IBCEF21(PAT)                   ; scrub 8-piece string
"RTN","IBCNSP1",261,0)
 I SUB'=SUB1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,2,7)=$P(SUB1,U,3,8)
"RTN","IBCNSP1",262,0)
 I PAT'=PAT1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,8,13)=$P(PAT1,U,3,8)
"RTN","IBCNSP1",263,0)
 ;
"RTN","IBCNSP1",264,0)
EDITX ;
"RTN","IBCNSP1",265,0)
 Q
"RTN","IBCNSP1",266,0)
 ;
"RTN","IBCNSP1",267,0)
UPDCLM(IBDFN,IBCDFN) ; Update the Insurance nodes of claims that are still editable
"RTN","IBCNSP1",268,0)
 NEW IBIFN
"RTN","IBCNSP1",269,0)
 S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"C",IBDFN,IBIFN)) Q:'IBIFN  D UPDCLM^IBCNSP2(IBIFN,IBDFN,IBCDFN)
"RTN","IBCNSP1",270,0)
 ;
"RTN","IBCNSP1",271,0)
UPDCLMX ;
"RTN","IBCNSP1",272,0)
 Q
"RTN","IBCNSP1",273,0)
 ;
"RTN","IBCNSP1",274,0)
PRELCNV(CODE,FLG) ; conversion between X12, NCPDP and VistA pt. relationship codes
"RTN","IBCNSP1",275,0)
 ; CODE - code for pt. relationship to convert
"RTN","IBCNSP1",276,0)
 ; FLG - 0 for X12 -> VistA conversion, 1 for VistA -> X12 conversion, 2 - for VistA -> NCPDP conversion
"RTN","IBCNSP1",277,0)
 ; returns converted code for pt. relationship, or null if no match found
"RTN","IBCNSP1",278,0)
 N I,RES,VSTR,X12STR
"RTN","IBCNSP1",279,0)
 S VSTR="01^02^03^08^11^15^32^33^34^35^36"
"RTN","IBCNSP1",280,0)
 S X12STR="18^01^19^20^39^41^32^33^29^53^G8"
"RTN","IBCNSP1",281,0)
 S RES=""
"RTN","IBCNSP1",282,0)
 I FLG=0 F I=1:1:11 S:$P(X12STR,U,I)=CODE RES=$P(VSTR,U,I) Q:RES'=""
"RTN","IBCNSP1",283,0)
 I FLG=1 F I=1:1:11 S:$P(VSTR,U,I)=CODE RES=$P(X12STR,U,I) Q:RES'=""
"RTN","IBCNSP1",284,0)
 I FLG=2,+CODE>0 S RES=$S(+CODE>3:"04",1:CODE)
"RTN","IBCNSP1",285,0)
 Q RES
"RTN","IBCNSP11")
0^14^B15254637
"RTN","IBCNSP11",1,0)
IBCNSP11 ;ALB/AAS - INSURANCE MANAGEMENT - EDIT PLAN ;23-JAN-95
"RTN","IBCNSP11",2,0)
 ;;2.0;INTEGRATED BILLING;**28,43,85,103,137,251,399,516,549**;21-MAR-94;Build 54
"RTN","IBCNSP11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP11",4,0)
 ;
"RTN","IBCNSP11",5,0)
PI ; -- edit plan information from policy edit
"RTN","IBCNSP11",6,0)
 D FULL^VALM1
"RTN","IBCNSP11",7,0)
 ;
"RTN","IBCNSP11",8,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSP11",9,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP11",10,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Plan Information."
"RTN","IBCNSP11",11,0)
 . K DIR
"RTN","IBCNSP11",12,0)
 . D PAUSE^VALM1
"RTN","IBCNSP11",13,0)
 . S VALMBCK="R"
"RTN","IBCNSP11",14,0)
 ;
"RTN","IBCNSP11",15,0)
 N IBCDFN,IBCPOL
"RTN","IBCNSP11",16,0)
 S IBCDFN=$P($G(IBPPOL),"^",4)
"RTN","IBCNSP11",17,0)
 ;
"RTN","IBCNSP11",18,0)
 ; - build a plan on the fly if there is not one present
"RTN","IBCNSP11",19,0)
 S IBCPOL=$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)
"RTN","IBCNSP11",20,0)
 I IBCPOL="" S IBCPOL=$$CHIP^IBCNSU($G(^DPT(DFN,.312,IBCDFN,0))) I IBCPOL D  ;Stuff in file
"RTN","IBCNSP11",21,0)
 .S DIE="^DPT("_DFN_",.312,",DR=".18////"_IBCPOL
"RTN","IBCNSP11",22,0)
 .S DA=IBCDFN,DA(1)=DFN
"RTN","IBCNSP11",23,0)
 .D ^DIE
"RTN","IBCNSP11",24,0)
 .K DA,DR,DIE,DIC
"RTN","IBCNSP11",25,0)
 .Q
"RTN","IBCNSP11",26,0)
 D PIEDIT(IBCPOL,DFN,IBCDFN)
"RTN","IBCNSP11",27,0)
 Q
"RTN","IBCNSP11",28,0)
 ;
"RTN","IBCNSP11",29,0)
PI1 ; -- edit plan information from plan edit
"RTN","IBCNSP11",30,0)
 D FULL^VALM1
"RTN","IBCNSP11",31,0)
 ;
"RTN","IBCNSP11",32,0)
 ;IB*2.0*549 - Added Security Key check
"RTN","IBCNSP11",33,0)
 I '$D(^XUSEC("IB GROUP PLAN EDIT",DUZ)) D  Q
"RTN","IBCNSP11",34,0)
 . W !!,*7,"Sorry, but you do not have the required privileges to edit Plan Information."
"RTN","IBCNSP11",35,0)
 . K DIR
"RTN","IBCNSP11",36,0)
 . D PAUSE^VALM1
"RTN","IBCNSP11",37,0)
 . S VALMBCK="R"
"RTN","IBCNSP11",38,0)
 ;
"RTN","IBCNSP11",39,0)
 D PIEDIT(IBCPOL,"","")
"RTN","IBCNSP11",40,0)
 Q
"RTN","IBCNSP11",41,0)
 ;
"RTN","IBCNSP11",42,0)
PIEDIT(IBCPOL,IBDFN,IBCDFN) ;Entry point if already have the plan (IBCPOL)
"RTN","IBCNSP11",43,0)
 ; -- Edit the plan specific info
"RTN","IBCNSP11",44,0)
 ; The following parameters are only used when editing plan via the patient policy
"RTN","IBCNSP11",45,0)
 ; IBDFN = DFN of patient
"RTN","IBCNSP11",46,0)
 ; IBCDFN = entry # of multiple for policy in .312 nodes of ^DPT
"RTN","IBCNSP11",47,0)
 N DIRUT,DTOUT,DUOUT,DIROUT,IBDIF,DA,DR,DIC,DIE,IBCPOLD,IBGRP,IBTL,IBCNSEH,IBSUB
"RTN","IBCNSP11",48,0)
 D SAVE^IBCNSP3(IBCPOL)
"RTN","IBCNSP11",49,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G PIQ
"RTN","IBCNSP11",50,0)
 S IBCNSEH=$S($G(IBDFN):+$G(^IBE(350.9,1,4)),1:0) D POL^IBCNSEH
"RTN","IBCNSP11",51,0)
 S IBCPOLD=$G(^IBA(355.3,IBCPOL,0)),IBGRP=$P(IBCPOLD,"^",2)
"RTN","IBCNSP11",52,0)
 I $P(IBCPOLD,"^",11) W !?2,*7,"Please note that this plan is inactive!",!
"RTN","IBCNSP11",53,0)
 W !,"This plan is currently defined as a",$S(IBGRP:" Group",1:"n Individual")," Plan."
"RTN","IBCNSP11",54,0)
 S IBSUB=$$SUBS^IBCNSJ(+$G(^IBA(355.3,IBCPOL,0)),IBCPOL,0,"",1)
"RTN","IBCNSP11",55,0)
 I 'IBGRP,IBSUB>1 W !!,"This Individual Plan has more than one subscriber!" G CHG
"RTN","IBCNSP11",56,0)
 I IBGRP,IBSUB>1 W !!,"There is more than one subscriber to this Group Plan.  The plan cannot",!,"be changed to an individual plan.",! G PIC
"RTN","IBCNSP11",57,0)
 ;
"RTN","IBCNSP11",58,0)
 ; - switch the plan to group/individual
"RTN","IBCNSP11",59,0)
 S DIR("A")="Do you wish to change this plan to a"_$S(IBGRP:"n Individual",1:" Group")_" Plan"
"RTN","IBCNSP11",60,0)
 S DIR(0)="Y",DIR("?")="Enter 'YES' to change this plan, or enter 'NO' to leave it as is."
"RTN","IBCNSP11",61,0)
 D ^DIR K DIR I $D(DIRUT) G PIQ1
"RTN","IBCNSP11",62,0)
 I 'Y W !,"No change was made.",! G PIC
"RTN","IBCNSP11",63,0)
 ;
"RTN","IBCNSP11",64,0)
CHG ; - change the plan type
"RTN","IBCNSP11",65,0)
 W !,"Changing the plan to a",$S(IBGRP:"n Individual",1:" Group")," Plan... "
"RTN","IBCNSP11",66,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR=".02////"_$S(IBGRP:0,1:1)_";.1////"_$S(IBGRP&$G(IBDFN):IBDFN,1:"@")
"RTN","IBCNSP11",67,0)
 D ^DIE K DIE,DA,DR W "done.",!
"RTN","IBCNSP11",68,0)
 ;
"RTN","IBCNSP11",69,0)
PIC ; - edit name/number/type
"RTN","IBCNSP11",70,0)
 S IBTL=$S($P($G(^IBA(355.3,IBCPOL,0)),"^",2):"GROUP",1:"INDIVIDUAL")_" PLAN"
"RTN","IBCNSP11",71,0)
 S DIE="^IBA(355.3,",DA=IBCPOL
"RTN","IBCNSP11",72,0)
 ;IB*2.0*516/baa Use HIPAA Compliant fields - .03 to 2.01 .04 to 2.02
"RTN","IBCNSP11",73,0)
 ;S DR=".03"_IBTL_" NAME;.04"_IBTL_" NUMBER;6.02;6.03;.09;.15;S Y=$S($$CATOK^IBCEMRA($P(^IBA(355.3,IBCPOL,0),U,14)):""@1"",1:""@10"");@1;.14;@10;.16;I '$$FTFV^IBCNSU31(X) S Y=""@13"";.17;@13;.13"
"RTN","IBCNSP11",74,0)
 S DR="2.01"_IBTL_" NAME;2.02"_IBTL_" NUMBER;6.02;6.03;.09;.15;S Y=$S($$CATOK^IBCEMRA($P(^IBA(355.3,IBCPOL,0),U,14)):""@1"",1:""@10"");@1;.14;@10;.16;I '$$FTFV^IBCNSU31(X) S Y=""@13"";.17;@13;.13"
"RTN","IBCNSP11",75,0)
 ;
"RTN","IBCNSP11",76,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP11",77,0)
 D COMP^IBCNSP3(IBCPOL)
"RTN","IBCNSP11",78,0)
 I IBDIF D UPDATE^IBCNSP3(IBCPOL) D:$G(IBDFN) UPDATPT^IBCNSP3(IBDFN,IBCDFN),BLD^IBCNSP D:'$G(IBDFN) INIT^IBCNSC4
"RTN","IBCNSP11",79,0)
PIQ1 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP11",80,0)
PIQ S VALMBCK="R"
"RTN","IBCNSP11",81,0)
 Q
"RTN","IBCNSP3")
0^8^B38303205
"RTN","IBCNSP3",1,0)
IBCNSP3 ;ALB/AAS - INSURANCE MANAGEMENT EDIT ;27-APR-2015
"RTN","IBCNSP3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,52,85,251,371,497,528,549**;21-MAR-94;Build 54
"RTN","IBCNSP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSP3",4,0)
 ;
"RTN","IBCNSP3",5,0)
% G ^IBCNSM4
"RTN","IBCNSP3",6,0)
 ;
"RTN","IBCNSP3",7,0)
SAVEPT(DFN,DA) ; -- Save the global before editing
"RTN","IBCNSP3",8,0)
 K ^TMP($J,"IBCNSPT")
"RTN","IBCNSP3",9,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)=$G(^DPT(DFN,.312,+DA,0))
"RTN","IBCNSP3",10,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)=$G(^DPT(DFN,.312,+DA,1))
"RTN","IBCNSP3",11,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)=$G(^DPT(DFN,.312,+DA,2))
"RTN","IBCNSP3",12,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)=$G(^DPT(DFN,.312,+DA,3))
"RTN","IBCNSP3",13,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)=$G(^DPT(DFN,.312,+DA,4))
"RTN","IBCNSP3",14,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)=$G(^DPT(DFN,.312,+DA,5))
"RTN","IBCNSP3",15,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,7)=$G(^DPT(DFN,.312,+DA,7))    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",16,0)
 Q
"RTN","IBCNSP3",17,0)
 ;
"RTN","IBCNSP3",18,0)
COMPPT(DFN,DA) ; -- Compare before editing with globals
"RTN","IBCNSP3",19,0)
 S IBDIF=0
"RTN","IBCNSP3",20,0)
 I $G(^DPT(DFN,.312,+DA,0))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",21,0)
 I $G(^DPT(DFN,.312,+DA,1))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",22,0)
 I $G(^DPT(DFN,.312,+DA,2))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",23,0)
 I $G(^DPT(DFN,.312,+DA,3))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",24,0)
 I $G(^DPT(DFN,.312,+DA,4))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",25,0)
 I $G(^DPT(DFN,.312,+DA,5))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",26,0)
 I $G(^DPT(DFN,.312,+DA,7))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,7)) S IBDIF=1 G COMPPTQ    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",27,0)
 ;
"RTN","IBCNSP3",28,0)
COMPPTQ I IBDIF D:'$D(IBCOVP) COVERED^IBCNSM31(DFN,$P($G(^DPT(DFN,.31)),"^",11))
"RTN","IBCNSP3",29,0)
 Q
"RTN","IBCNSP3",30,0)
 ;
"RTN","IBCNSP3",31,0)
UPDATPT(DFN,DA) ; -- enter date and user if editing has taken place
"RTN","IBCNSP3",32,0)
 N DR,DIE,DIC
"RTN","IBCNSP3",33,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN
"RTN","IBCNSP3",34,0)
 S DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",35,0)
 D ^DIE
"RTN","IBCNSP3",36,0)
 Q
"RTN","IBCNSP3",37,0)
 ;
"RTN","IBCNSP3",38,0)
EM ; -- Employer for claims update
"RTN","IBCNSP3",39,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP3",40,0)
 N IBDIF,DA,DR,DIC,DIE
"RTN","IBCNSP3",41,0)
 D SAVEPT(DFN,IBCDFN)
"RTN","IBCNSP3",42,0)
 D VARS
"RTN","IBCNSP3",43,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EMQ
"RTN","IBCNSP3",44,0)
 ;
"RTN","IBCNSP3",45,0)
 ;S DR="2.01;S:'$P($G(^DPT(DFN,.312,+$G(DA),2)),U) Y=""@999"";W !!,""*** If ROI applies, make sure current consent is signed! ***"",!;2.015;2.02;2.03;2.04;2.05;2.06;2.07;2.08;2.09;@999"
"RTN","IBCNSP3",46,0)
 ;
"RTN","IBCNSP3",47,0)
 S DR="2.1" D ^DIE K DIE,DR
"RTN","IBCNSP3",48,0)
 ;
"RTN","IBCNSP3",49,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10),$P($G(^DPT(DFN,.312,+$G(DA),2)),U,9)="" D EMPSET(DFN,$G(DA)) ; curr emp
"RTN","IBCNSP3",50,0)
 ;
"RTN","IBCNSP3",51,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.015;2.11;2.12;2.01;W:+X !!,""*** If ROI applies, make sure current consent is signed! ***"",!!;2.02;2.03;2.04;2.05;2.06;2.07;2.08;@999" D ^DIE K DIE,DR
"RTN","IBCNSP3",52,0)
 ;
"RTN","IBCNSP3",53,0)
 ;I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U) D VARS S DR="2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@" D ^DIE
"RTN","IBCNSP3",54,0)
 ;
"RTN","IBCNSP3",55,0)
 I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.01///@;2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@;2.11///@;2.12///@" D ^DIE
"RTN","IBCNSP3",56,0)
 ;
"RTN","IBCNSP3",57,0)
 D COMPPT(DFN,IBCDFN)
"RTN","IBCNSP3",58,0)
 I IBDIF D UPDATPT(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP3",59,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP3",60,0)
EMQ S VALMBCK="R" Q
"RTN","IBCNSP3",61,0)
 ;
"RTN","IBCNSP3",62,0)
GC ;EP
"RTN","IBCNSP3",63,0)
 ; IB*2.0*549 Added Method
"RTN","IBCNSP3",64,0)
 ; Protocol action to add/edit a Group Plan Comment
"RTN","IBCNSP3",65,0)
 ; Input:   DFN     - IEN of the currently selected patient
"RTN","IBCNSP3",66,0)
 ;          IBCPOL  - IEN of the currently selected group plan
"RTN","IBCNSP3",67,0)
 ; Output:  Group Plan Comment is added/edited (Potentially)
"RTN","IBCNSP3",68,0)
 N DA,DR,DIE,DIC,X,Y
"RTN","IBCNSP3",69,0)
 S VALMBCK="R"
"RTN","IBCNSP3",70,0)
 D FULL^VALM1
"RTN","IBCNSP3",71,0)
 W !!,"You may now enter comments about this Group Plan that pertains to all"
"RTN","IBCNSP3",72,0)
 W " Patients",!!
"RTN","IBCNSP3",73,0)
 L +^IBA(355.3,+IBCPOL):5                       ; Lock the Group Plan for editing
"RTN","IBCNSP3",74,0)
 I '$T D LOCKED^IBTRCD1 Q
"RTN","IBCNSP3",75,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="11Group Plan Comment"
"RTN","IBCNSP3",76,0)
 D ^DIE
"RTN","IBCNSP3",77,0)
 D BLD^IBCNSP
"RTN","IBCNSP3",78,0)
 L -^IBA(355.3,+IBCPOL)                         ; Unlock the Group Plan
"RTN","IBCNSP3",79,0)
 Q
"RTN","IBCNSP3",80,0)
 ;
"RTN","IBCNSP3",81,0)
BLS(X,Y) ; -- blank a section of lines
"RTN","IBCNSP3",82,0)
 N I
"RTN","IBCNSP3",83,0)
 F I=X:1:Y D BLANK^IBCNSP(.I)
"RTN","IBCNSP3",84,0)
 Q
"RTN","IBCNSP3",85,0)
 ;
"RTN","IBCNSP3",86,0)
VARS ; -- set vars for call to die for .312 node
"RTN","IBCNSP3",87,0)
 S DA(1)=DFN,DA=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",88,0)
 S DIE="^DPT("_DA(1)_",.312,"
"RTN","IBCNSP3",89,0)
 Q
"RTN","IBCNSP3",90,0)
 ;
"RTN","IBCNSP3",91,0)
SAVE(IBCPOL) ; -- Save the global before editing
"RTN","IBCNSP3",92,0)
 K ^TMP($J,"IBCNSP")
"RTN","IBCNSP3",93,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,0)=$G(^IBA(355.3,+IBCPOL,0))
"RTN","IBCNSP3",94,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,1)=$G(^IBA(355.3,+IBCPOL,1))
"RTN","IBCNSP3",95,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,2)=$G(^IBA(355.3,+IBCPOL,2))   ; IB*2.0*497 (vd)
"RTN","IBCNSP3",96,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",97,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,6)=$G(^IBA(355.3,+IBCPOL,6))
"RTN","IBCNSP3",98,0)
 Q
"RTN","IBCNSP3",99,0)
 ;
"RTN","IBCNSP3",100,0)
COMP(IBCPOL) ; -- Compare before editing with globals
"RTN","IBCNSP3",101,0)
 S IBDIF=0
"RTN","IBCNSP3",102,0)
 I $G(^IBA(355.3,+IBCPOL,0))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,0)) S IBDIF=1 Q
"RTN","IBCNSP3",103,0)
 I $G(^IBA(355.3,+IBCPOL,1))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,1)) S IBDIF=1 Q
"RTN","IBCNSP3",104,0)
 I $G(^IBA(355.3,+IBCPOL,2))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,2)) S IBDIF=1 Q    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",105,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",106,0)
 I $G(^IBA(355.3,+IBCPOL,6))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,6)) S IBDIF=1 Q
"RTN","IBCNSP3",107,0)
 Q
"RTN","IBCNSP3",108,0)
 ;
"RTN","IBCNSP3",109,0)
UPDATE(IBCPOL) ; -- Update last edited by
"RTN","IBCNSP3",110,0)
 N DA,DIC,DIE,DR
"RTN","IBCNSP3",111,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",112,0)
 D ^DIE
"RTN","IBCNSP3",113,0)
 Q
"RTN","IBCNSP3",114,0)
 ;
"RTN","IBCNSP3",115,0)
RIDERS ; -- add/edit personal riders
"RTN","IBCNSP3",116,0)
 ;
"RTN","IBCNSP3",117,0)
 D FULL^VALM1
"RTN","IBCNSP3",118,0)
 N IBDIF,DA,DR,DIE,DIC,X,Y,IBCDFN,IBPRD,IBPRY
"RTN","IBCNSP3",119,0)
 S IBCDFN=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",120,0)
 W ! D DISPR W !
"RTN","IBCNSP3",121,0)
 ;
"RTN","IBCNSP3",122,0)
R1 S DIC="^IBA(355.7,",DIC(0)="AEQML",DLAYGO=355.7
"RTN","IBCNSP3",123,0)
 S DIC("DR")=".02////"_DFN_";.03////"_IBCDFN
"RTN","IBCNSP3",124,0)
 S DIC("S")="I $P(^(0),U,2)=DFN,$P(^(0),U,3)=IBCDFN"
"RTN","IBCNSP3",125,0)
 I $D(IBPRD) S DIC("B")=IBPRD
"RTN","IBCNSP3",126,0)
 D ^DIC K DIC,IBPRD
"RTN","IBCNSP3",127,0)
 I +Y<1 G RIDERQ
"RTN","IBCNSP3",128,0)
 S IBPRY=+Y
"RTN","IBCNSP3",129,0)
 L +^IBA(355.7,IBPRY):5 I '$T D LOCKED^IBTRCD1 G RIDERQ
"RTN","IBCNSP3",130,0)
 S DIE="^IBA(355.7,",DA=+Y,DR=".01",DIDEL=355.7
"RTN","IBCNSP3",131,0)
 D ^DIE K DA,DR,DIE,DIC,DIDEL,DLAYGO
"RTN","IBCNSP3",132,0)
 L -^IBA(355.7,IBPRY)
"RTN","IBCNSP3",133,0)
 W ! G R1
"RTN","IBCNSP3",134,0)
RIDERQ S VALMBCK="R"
"RTN","IBCNSP3",135,0)
 Q
"RTN","IBCNSP3",136,0)
 ;
"RTN","IBCNSP3",137,0)
RD ; -- Add riders/ for multiple policies
"RTN","IBCNSP3",138,0)
 D FULL^VALM1
"RTN","IBCNSP3",139,0)
 N I,J,IBXX,VALMY
"RTN","IBCNSP3",140,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSP3",141,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSP3",142,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSP3",143,0)
 .Q:IBPPOL=""
"RTN","IBCNSP3",144,0)
 .D RIDERS
"RTN","IBCNSP3",145,0)
 .Q
"RTN","IBCNSP3",146,0)
 D BLD^IBCNSM
"RTN","IBCNSP3",147,0)
 S VALMBCK="R"
"RTN","IBCNSP3",148,0)
 Q
"RTN","IBCNSP3",149,0)
 ;
"RTN","IBCNSP3",150,0)
DISPR ; -- Display riders
"RTN","IBCNSP3",151,0)
 N IBPR,I,J
"RTN","IBCNSP3",152,0)
 S I=0
"RTN","IBCNSP3",153,0)
 I '$G(IBCDFN)!('$G(DFN)) G DISPRQ
"RTN","IBCNSP3",154,0)
 W !,"Current Personal Riders: "
"RTN","IBCNSP3",155,0)
 F  S I=$O(^IBA(355.7,"APP",DFN,IBCDFN,I)) Q:'I  S J=$O(^(I,0)),IBPR=$G(^IBA(355.7,+J,0)) D
"RTN","IBCNSP3",156,0)
 .S IBPRD=$$EXPAND^IBTRE(355.7,.01,+IBPR)
"RTN","IBCNSP3",157,0)
 .W !?5,IBPRD
"RTN","IBCNSP3",158,0)
 I '$D(IBPRD) W !?5,"None Indicated"
"RTN","IBCNSP3",159,0)
DISPRQ Q
"RTN","IBCNSP3",160,0)
 ;
"RTN","IBCNSP3",161,0)
EMPSET(DFN,IBCPOL) ; insert patient or spouses current employer as ESGHP address if that employer sponsors this plan
"RTN","IBCNSP3",162,0)
 N IBWHOS,VAOA,DIR,IBE,IBEMPST,DR,X,Y
"RTN","IBCNSP3",163,0)
 I +$G(DFN) S IBWHOS=$P($G(^DPT(DFN,.312,+$G(IBCPOL),0)),U,6) S VAOA("A")=$S(IBWHOS="v":5,IBWHOS="s":6,1:"")
"RTN","IBCNSP3",164,0)
 I $G(VAOA("A"))'="" D OAD^VADPT I $G(VAOA(9))'="" D
"RTN","IBCNSP3",165,0)
 . ;
"RTN","IBCNSP3",166,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" W ! D ^DIR W ! Q:'Y  W "...."
"RTN","IBCNSP3",167,0)
 . D VARS S IBE=$S(IBWHOS="v":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNSP3",168,0)
 . ;
"RTN","IBCNSP3",169,0)
 . S DR="2.015///"_VAOA(9)_";2.02///"_VAOA(1)_";2.03///"_VAOA(2)_";2.04///"_VAOA(3)_";2.05///"_VAOA(4) D ^DIE
"RTN","IBCNSP3",170,0)
 . S DR="2.06////"_$P(VAOA(5),U,1)_";2.07////"_$P(VAOA(11),U,1)_";2.08///"_$E(VAOA(8),1,15)_";2.11////"_IBEMPST D ^DIE
"RTN","IBCNSP3",171,0)
 Q
"RTN","IBCNSU2")
0^30^B25020492
"RTN","IBCNSU2",1,0)
IBCNSU2 ;ALB/NLR - INSURANCE PLAN LOOK-UP UTILITY ; 20-OCT-2015
"RTN","IBCNSU2",2,0)
 ;;2.0;INTEGRATED BILLING;**28,62,497,549**;21-MAR-94;Build 54
"RTN","IBCNSU2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSU2",4,0)
 ;
"RTN","IBCNSU2",5,0)
LKP(IBCNS,IBIND,IBMULT,IBSEL,IBALR,IBW,IBTLE) ; Look-up Utility for
"RTN","IBCNSU2",6,0)
 ;IB*2.0*549 passing of new input variable IBTLE
"RTN","IBCNSU2",7,0)
 ; Insurance Company Plans
"RTN","IBCNSU2",8,0)
 ;
"RTN","IBCNSU2",9,0)
 ; IB*2.0*549 - Added 2 for IBW option to only allow inactive Plan selection
"RTN","IBCNSU2",10,0)
 ; Input:   IBCNS   - IEN of the Insurance Company (file 36)
"RTN","IBCNSU2",11,0)
 ;          IBIND   - Include Individual Plans?  (1 - Yes | 0 - No)
"RTN","IBCNSU2",12,0)
 ;          IBMULT  - If set to 1, allows multiple plans to be chosen
"RTN","IBCNSU2",13,0)
 ;          IBALR   - May be set to point to a plan in file #355.3
"RTN","IBCNSU2",14,0)
 ;                    to be excluded from selection
"RTN","IBCNSU2",15,0)
 ;          IBW     - 1 - Allow both inactive and active plans to be chosen
"RTN","IBCNSU2",16,0)
 ;                    2 - Only allow inactive plans
"RTN","IBCNSU2",17,0)
 ;                    0 - Only allow active plans
"RTN","IBCNSU2",18,0)
 ;                    Optional, defaults to 0
"RTN","IBCNSU2",19,0)
 ;          IBTLE   - If set, then change the variable VALM("TITLE") to
"RTN","IBCNSU2",20,0)
 ;                    contain the value of IBTLE (IB*2.0*549)
"RTN","IBCNSU2",21,0)
 ; Output:  IBSEL   - IEN of the plan in file #355.3 if only a single plan
"RTN","IBCNSU2",22,0)
 ;                     is to be selected.
"RTN","IBCNSU2",23,0)
 ;          ^TMP($J,"IBSEL,PIEN) - Array of selected plan iens (where PIEN
"RTN","IBCNSU2",24,0)
 ;                     is the plan IEN) is returned if multiple plans may
"RTN","IBCNSU2",25,0)
 ;                     be selected.
"RTN","IBCNSU2",26,0)
 ;
"RTN","IBCNSU2",27,0)
 Q:'$G(IBCNS)                               ; No Insurance Company
"RTN","IBCNSU2",28,0)
 N VALMY,VALMHDR
"RTN","IBCNSU2",29,0)
 S IBIND=$G(IBIND)>0
"RTN","IBCNSU2",30,0)
 S:'$D(IBW) IBW=0
"RTN","IBCNSU2",31,0)
 S:'$D(IBTLE) IBTLE=""
"RTN","IBCNSU2",32,0)
 S IBMULT=+$G(IBMULT),IBSEL=0
"RTN","IBCNSU2",33,0)
 D EN^VALM("IBCNS PLAN LOOKUP")
"RTN","IBCNSU2",34,0)
 Q
"RTN","IBCNSU2",35,0)
 ;
"RTN","IBCNSU2",36,0)
INIT ; Build the list of plans.
"RTN","IBCNSU2",37,0)
 N IBP,IBCPOLD,X,IBCPOLD2  ;WCJ;IB*2*497
"RTN","IBCNSU2",38,0)
 K ^TMP("IBCNSJ",$J)
"RTN","IBCNSU2",39,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSU2",40,0)
 S IBP=0
"RTN","IBCNSU2",41,0)
 F  S IBP=$O(^IBA(355.3,"B",+IBCNS,IBP)) Q:'IBP  D
"RTN","IBCNSU2",42,0)
 . S IBCPOLD=$G(^IBA(355.3,+IBP,0))
"RTN","IBCNSU2",43,0)
 . S IBCPOLD2=$G(^IBA(355.3,+IBP,2))        ; WCJ;IB*2.0*497
"RTN","IBCNSU2",44,0)
 . I 'IBIND,'$P(IBCPOLD,"^",2) Q            ; Exclude individual plans
"RTN","IBCNSU2",45,0)
 . I 'IBW,$P(IBCPOLD,"^",11) Q              ; Plan is inactive
"RTN","IBCNSU2",46,0)
 . ;
"RTN","IBCNSU2",47,0)
 . ; IB*2.0*549 - Added check to only display inactive plans
"RTN","IBCNSU2",48,0)
 . I IBW=2,$P(IBCPOLD,"^",11)'=1 Q          ; Plan is active
"RTN","IBCNSU2",49,0)
 . ;
"RTN","IBCNSU2",50,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNSU2",51,0)
 . S X=$$SETFLD^VALM1(VALMCNT,"","NUMBER")
"RTN","IBCNSU2",52,0)
 . I '$P(IBCPOLD,"^",2) S $E(X,4)="+"
"RTN","IBCNSU2",53,0)
 . S X=$$SETFLD^VALM1($P(IBCPOLD2,"^",1),X,"GNAME")  ;WCJ;IB*2.0*497
"RTN","IBCNSU2",54,0)
 . I $P(IBCPOLD,"^",11) S $E(X,24)="*"
"RTN","IBCNSU2",55,0)
 . S X=$$SETFLD^VALM1($P(IBCPOLD2,"^",2),X,"GNUM")  ;WCJ;IB*2.0*497
"RTN","IBCNSU2",56,0)
 . S X=$$SETFLD^VALM1($$EXPAND^IBTRE(355.3,.09,$P(IBCPOLD,"^",9)),X,"TYPE")
"RTN","IBCNSU2",57,0)
 . S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",5)),X,"UR")
"RTN","IBCNSU2",58,0)
 . S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",6)),X,"PREC")
"RTN","IBCNSU2",59,0)
 . S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",7)),X,"PREEX")
"RTN","IBCNSU2",60,0)
 . S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",8)),X,"BENAS")
"RTN","IBCNSU2",61,0)
 . ;
"RTN","IBCNSU2",62,0)
 . S ^TMP("IBCNSJ",$J,VALMCNT,0)=X
"RTN","IBCNSU2",63,0)
 . S ^TMP("IBCNSJ",$J,"IDX",VALMCNT,VALMCNT)=IBP
"RTN","IBCNSU2",64,0)
 ;
"RTN","IBCNSU2",65,0)
 I '$D(^TMP("IBCNSJ",$J)) D
"RTN","IBCNSU2",66,0)
 . S VALMCNT=2,^TMP("IBCNSJ",$J,1,0)=" "
"RTN","IBCNSU2",67,0)
 . S ^TMP("IBCNSJ",$J,2,0)="   No plans were identified for this company."
"RTN","IBCNSU2",68,0)
 Q
"RTN","IBCNSU2",69,0)
 ;
"RTN","IBCNSU2",70,0)
HDR ; Build the list header.
"RTN","IBCNSU2",71,0)
 ; Input: IBTLE - If not null, then change the variable VALM("TITLE") to
"RTN","IBCNSU2",72,0)
 ;                contain the value of IBTLE (IB*2.0*549)
"RTN","IBCNSU2",73,0)
 N IBCNS0,IBCNS11,IBCNS13,IBLEAD,X,XX,X1,X2
"RTN","IBCNSU2",74,0)
 I IBTLE'="" S VALM("TITLE")=IBTLE      ; IB*2.0*549
"RTN","IBCNSU2",75,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS11=$G(^(.11)),IBCNS13=$G(^(.13))
"RTN","IBCNSU2",76,0)
 S X2=$S(IBW=2:"Inactive ",IBW:"",1:"Active ")
"RTN","IBCNSU2",77,0)
 ;
"RTN","IBCNSU2",78,0)
 ; IB*2.0*549 changed 'Plans for' to 'Plans In' for Move Subscriber lookup
"RTN","IBCNSU2",79,0)
 S XX=$S(IBTLE="Group Plan Lookup":"Plans In: ",1:"Plans for: ")
"RTN","IBCNSU2",80,0)
 S IBLEAD=$S(IBIND:"All "_X2,1:X2_"Group ")_XX
"RTN","IBCNSU2",81,0)
 S X="Phone: "_$S($P(IBCNS13,"^")]"":$P(IBCNS13,"^"),1:"<not filed>")
"RTN","IBCNSU2",82,0)
 S VALMHDR(1)=$$SETSTR^VALM1(X,IBLEAD_$P(IBCNS0,"^"),81-$L(X),40)
"RTN","IBCNSU2",83,0)
 S X1="Precerts: "_$S($P(IBCNS13,"^",3)]"":$P(IBCNS13,"^",3),1:"<not filed>")
"RTN","IBCNSU2",84,0)
 S X=$TR($J("",$L(IBLEAD)),""," ")_$S($P(IBCNS11,"^")]"":$P(IBCNS11,"^"),1:"<no street address>")
"RTN","IBCNSU2",85,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X1,X,81-$L(X1),40)
"RTN","IBCNSU2",86,0)
 S X=$S($P(IBCNS11,"^",4)]"":$P(IBCNS11,"^",4),1:"<no city>")_", "
"RTN","IBCNSU2",87,0)
 S X=X_$S($P(IBCNS11,"^",5):$P($G(^DIC(5,$P(IBCNS11,"^",5),0)),"^",2),1:"<no state>")_"  "_$E($P(IBCNS11,"^",6),1,5)_$S($E($P(IBCNS11,"^",6),6,9)]"":"-"_$E($P(IBCNS11,"^",6),6,9),1:"")
"RTN","IBCNSU2",88,0)
 S VALMHDR(3)=$$SETSTR^VALM1(X,"",$L(IBLEAD)+1,80)
"RTN","IBCNSU2",89,0)
 S X="#" I $G(IBIND) S X="#  + => Indiv. Plan"
"RTN","IBCNSU2",90,0)
 I $G(IBW) S X=$E(X_$J("",23),1,23)_"* => Inactive Plan"
"RTN","IBCNSU2",91,0)
 S VALMHDR(4)=$$SETSTR^VALM1("Pre-  Pre-  Ben",X,64,17)
"RTN","IBCNSU2",92,0)
 Q
"RTN","IBCNSU2",93,0)
 ;
"RTN","IBCNSU2",94,0)
FNL ; Exit action.
"RTN","IBCNSU2",95,0)
 K ^TMP("IBCNSJ",$J),VALMBCK
"RTN","IBCNSU2",96,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSU2",97,0)
 Q
"RTN","IBCNSU2",98,0)
 ;
"RTN","IBCNSU2",99,0)
SP ; 'Select Plan' Action
"RTN","IBCNSU2",100,0)
 N DIR,DIRUT,DUOUT,DTOUT,DIROUT,IBOK,IBQUIT,IBX,Y
"RTN","IBCNSU2",101,0)
 D EN^VALM2($G(XQORNOD(0)),"O"),FULL^VALM1
"RTN","IBCNSU2",102,0)
 S IBX=$O(VALMY(0)),VALMBCK="R"
"RTN","IBCNSU2",103,0)
 I 'IBX W !!,"No plan selected!" D SPQ Q
"RTN","IBCNSU2",104,0)
 I 'IBMULT D  G SPQ
"RTN","IBCNSU2",105,0)
 . I $O(VALMY(IBX)) W !!,*7,"You may only select a single plan!" Q
"RTN","IBCNSU2",106,0)
 . I $G(IBALR),+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX))=IBALR D  Q
"RTN","IBCNSU2",107,0)
 . . W !!,*7,"This plan is not allowed for selection!"
"RTN","IBCNSU2",108,0)
 . D OK^IBCNSM3
"RTN","IBCNSU2",109,0)
 . I IBQUIT S VALMBCK="Q" Q
"RTN","IBCNSU2",110,0)
 . I IBOK S IBSEL=+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX)),VALMBCK="Q"
"RTN","IBCNSU2",111,0)
 ;
"RTN","IBCNSU2",112,0)
 S IBX=0
"RTN","IBCNSU2",113,0)
 F  S IBX=$O(VALMY(IBX)) Q:'IBX  D
"RTN","IBCNSU2",114,0)
 . S ^TMP($J,"IBSEL",+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX)))=""
"RTN","IBCNSU2",115,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Would you like to select any other plans"
"RTN","IBCNSU2",116,0)
 S DIR("?")="If you wish to select plans from other screens, please answer 'YES'.  Otherwise, answer 'NO'."
"RTN","IBCNSU2",117,0)
 D ^DIR K DIR
"RTN","IBCNSU2",118,0)
 I Y<1!($D(DIRUT)) S VALMBCK="Q"
"RTN","IBCNSU2",119,0)
 ;
"RTN","IBCNSU2",120,0)
SPQ ;
"RTN","IBCNSU2",121,0)
 I '$O(IBSEL(0)),VALMBCK="R" D PAUSE^VALM1
"RTN","IBCNSU2",122,0)
 Q
"RTN","IBCNSUR")
0^35^B24782605
"RTN","IBCNSUR",1,0)
IBCNSUR ;ALB/CPM/CMS - MOVE SUBSCRIBERS TO DIFFERENT PLAN ;09-SEP-96
"RTN","IBCNSUR",2,0)
 ;;2.0;INTEGRATED BILLING;**103,276,506,516,549**;21-MAR-94;Build 54
"RTN","IBCNSUR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR",4,0)
 Q
"RTN","IBCNSUR",5,0)
 ;
"RTN","IBCNSUR",6,0)
EN ; Entry point from option. Main processing loop.
"RTN","IBCNSUR",7,0)
 I $S('($D(DUZ)#2):1,'$D(^VA(200,+DUZ,0)):1,1:0) W !!?3,"The variable DUZ must be set to an active user code before continuing." G ENQ
"RTN","IBCNSUR",8,0)
 W !!,?5,"MOVE SUBSCRIBERS OF ONE PLAN TO ANOTHER PLAN"
"RTN","IBCNSUR",9,0)
 W !,?5,"This option may be used to move subscribers from a selected Plan"
"RTN","IBCNSUR",10,0)
 W !,?5,"to a different Plan. The plans may be associated with the same"
"RTN","IBCNSUR",11,0)
 W !,?5,"Insurance Company or a different one. Plan and Annual Benefit"
"RTN","IBCNSUR",12,0)
 W !,?5,"information may be moved as well. Users of this option should"
"RTN","IBCNSUR",13,0)
 W !,?5,"be knowledgeable of the VistA Patient Insurance management options."
"RTN","IBCNSUR",14,0)
 W !
"RTN","IBCNSUR",15,0)
 W !,?5,"This option also gives the user the option to expire the old plan or"
"RTN","IBCNSUR",16,0)
 W !,?5,"replace it completely in the patient insurance profile.  The reason"
"RTN","IBCNSUR",17,0)
 W !,?5,"to expire the old plan is intended for use when Insurance groups change"
"RTN","IBCNSUR",18,0)
 W !,?5,"PBMs for processing electronic Pharmacy claims.  By leaving the old"
"RTN","IBCNSUR",19,0)
 W !,?5,"plan information intact (i.e. do not replace), the user will be able"
"RTN","IBCNSUR",20,0)
 W !,?5,"to monitor PBM changes  that affect the electronic Pharmacy claims."
"RTN","IBCNSUR",21,0)
 ;
"RTN","IBCNSUR",22,0)
 W !!,$TR($J("",75)," ","-")
"RTN","IBCNSUR",23,0)
 S IBSTOP=0 F  D PROC^IBCNSUR1 Q:IBSTOP
"RTN","IBCNSUR",24,0)
ENQ K IBSTOP
"RTN","IBCNSUR",25,0)
 Q
"RTN","IBCNSUR",26,0)
 ;
"RTN","IBCNSUR",27,0)
PROC ; - Process continuation from IBCNSUR1. 
"RTN","IBCNSUR",28,0)
 ; - display old plan attributes; allow new plan to be edited
"RTN","IBCNSUR",29,0)
 D PL^IBCNSUR2
"RTN","IBCNSUR",30,0)
 R !!,?10,"Press any key to continue.    ",IBX:DTIME
"RTN","IBCNSUR",31,0)
 ;
"RTN","IBCNSUR",32,0)
 ; - display coverage limitations; allow add/edit of plan 2 limitations
"RTN","IBCNSUR",33,0)
 D LIM^IBCNSUR2
"RTN","IBCNSUR",34,0)
 ;
"RTN","IBCNSUR",35,0)
 I $P($G(^IBA(355.3,IBP1,0)),"^",11) W !!,"Please note that ",IBC1N,"'s",!,"plan, subscribers were moved from, is already inactive." G PROCDP
"RTN","IBCNSUR",36,0)
 ;
"RTN","IBCNSUR",37,0)
 ; - does the user wish to inactivate the old plan?
"RTN","IBCNSUR",38,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to inactivate "_IBC1N_"'s plan subscribers were moved from"
"RTN","IBCNSUR",39,0)
 S DIR("?")="If you wish to inactivate the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",40,0)
 D ^DIR K DIR I 'Y W !," <The old plan is still active>" G PROCQ
"RTN","IBCNSUR",41,0)
 ;
"RTN","IBCNSUR",42,0)
 D IRACT^IBCNSJ(IBP1,1) W !!,"The plan has been inactivated."
"RTN","IBCNSUR",43,0)
 ;
"RTN","IBCNSUR",44,0)
PROCDP ; - does the user wish to delete the old plan?
"RTN","IBCNSUR",45,0)
 W !! S DIR(0)="Y",DIR("A")="Do you wish to delete this plan"
"RTN","IBCNSUR",46,0)
 S DIR("?")="If you wish to delete the old plan, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR",47,0)
 D ^DIR K DIR I 'Y G PROCQ
"RTN","IBCNSUR",48,0)
 ;
"RTN","IBCNSUR",49,0)
 D DEL^IBCNSJ(IBP1) W !!,"The plan has been deleted."
"RTN","IBCNSUR",50,0)
 ;
"RTN","IBCNSUR",51,0)
PROCQ Q
"RTN","IBCNSUR",52,0)
 ;
"RTN","IBCNSUR",53,0)
 ;
"RTN","IBCNSUR",54,0)
SEL(IBNP) ; Select a company and plan.
"RTN","IBCNSUR",55,0)
 ;   Input:     IBNP  --  If set to 1, allows adding a new plan and
"RTN","IBCNSUR",56,0)
 ;                    --  Screen Inactive Companies
"RTN","IBCNSUR",57,0)
 ;                    --  If set to 0, must have at least one group plan
"RTN","IBCNSUR",58,0)
 ;  Output:   IBCNS  --  Pointer to selected company in file #36
"RTN","IBCNSUR",59,0)
 ;           IBPLAN  --  Pointer to selected/added plan in file #355.3
"RTN","IBCNSUR",60,0)
 ;           IBQUIT  --  Set to 1 if the user wants to quit.
"RTN","IBCNSUR",61,0)
 ;
"RTN","IBCNSUR",62,0)
 N X,Y K DIC,DIR
"RTN","IBCNSUR",63,0)
 S DIC(0)="QEAMZ",DIC="^DIC(36,"
"RTN","IBCNSUR",64,0)
 I 'IBNP S DIC("S")="I $$ANYGP^IBCNSJ(+Y,0,1)"
"RTN","IBCNSUR",65,0)
 I IBNP S DIC("S")="I '$P($G(^DIC(36,+Y,0)),U,5)"
"RTN","IBCNSUR",66,0)
 S DIC("A")="Select INSURANCE COMPANY: "
"RTN","IBCNSUR",67,0)
 D ^DIC K DIC S IBCNS=+Y
"RTN","IBCNSUR",68,0)
 I Y<0 W "   <No Insurance Company selected>" S IBQUIT=1 G SELQ
"RTN","IBCNSUR",69,0)
 ;
"RTN","IBCNSUR",70,0)
 ; - if a new plan may be added, allow adding
"RTN","IBCNSUR",71,0)
 I IBNP D  I (IBPLAN)!(IBQUIT) G SELQ
"RTN","IBCNSUR",72,0)
 .W !!,"You may add a new Plan at this time or select an existing Plan."
"RTN","IBCNSUR",73,0)
 .; IB*2.0*506 added IBKEY parameter (4th) to the NEW^IBCNSJ3 call (check user's security keys)
"RTN","IBCNSUR",74,0)
 .D NEW^IBCNSJ3(IBCNS,.IBPLAN,1,1)
"RTN","IBCNSUR",75,0)
 .I 'IBPLAN,'$$ANYGP^IBCNSJ(+IBCNS,0,1) W !!,*7,"Insurance Company receiving subscribers must have a Plan." S IBQUIT=1
"RTN","IBCNSUR",76,0)
 ;
"RTN","IBCNSUR",77,0)
 ; - see if user wants to select the plan
"RTN","IBCNSUR",78,0)
 W !!,"You may select an existing Plan from a list or enter a specific Plan.",!
"RTN","IBCNSUR",79,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you wish to enter a specific plan"
"RTN","IBCNSUR",80,0)
 S DIR("?")="The look-up facility to select a group plan has been enhanced to use the List Manager.  Enter 'NO' if you wish to select a plan from this look-up, or 'YES' to directly enter a plan."
"RTN","IBCNSUR",81,0)
 D ^DIR K DIR I $D(DIRUT) S IBQUIT=1 G SELQ
"RTN","IBCNSUR",82,0)
 ;
"RTN","IBCNSUR",83,0)
 ; - invoke the plan look-up
"RTN","IBCNSUR",84,0)
 I 'Y D  G SELQ
"RTN","IBCNSUR",85,0)
 . N IBTITLE
"RTN","IBCNSUR",86,0)
 . S IBTITLE="Group Plan Lookup"
"RTN","IBCNSUR",87,0)
 . W "   ..."
"RTN","IBCNSUR",88,0)
 . S IBPLAN=0
"RTN","IBCNSUR",89,0)
 . D LKP^IBCNSU2(IBCNS,0,0,.IBPLAN,0,1,IBTITLE)
"RTN","IBCNSUR",90,0)
 . I 'IBPLAN W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",91,0)
 ;
"RTN","IBCNSUR",92,0)
 ; - allow a FileMan look-up
"RTN","IBCNSUR",93,0)
 ; MRD;IB*2.0*516 - Display new Group Name and Number fields.
"RTN","IBCNSUR",94,0)
 S DIC("A")="Select a GROUP PLAN: "
"RTN","IBCNSUR",95,0)
 S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I +^(0)=IBCNS,$P(^(0),U,2)"
"RTN","IBCNSUR",96,0)
 ;S DIC("W")="N IBX S IBX=$G(^(0)) W ""   Name: "",$E($S($P(IBX,U,3)]"""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""   Number: "",$S($P(IBX,U,4)]"""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSUR",97,0)
 S DIC("W")="N IBX S IBX=$G(^(2)) W ""   Name: "",$E($S($P(IBX,U,1)]"""":$P(IBX,U,1),1:""<none>"")_$J("""",20),1,20),""   Number: "",$E($S($P(IBX,U,2)]"""":$P(IBX,U,2),1:""<none>""),1,14)"
"RTN","IBCNSUR",98,0)
 D ^DIC K DIC S IBPLAN=+Y
"RTN","IBCNSUR",99,0)
 I Y<0 W !!,*7,"*  No plan selected!",! S IBQUIT=1
"RTN","IBCNSUR",100,0)
 ;
"RTN","IBCNSUR",101,0)
SELQ K DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSUR",102,0)
 Q
"RTN","IBCNSUR1")
0^36^B169714351
"RTN","IBCNSUR1",1,0)
IBCNSUR1 ;ALB/CPM/CMS - MOVE SUBSCRIBERS TO DIFFERENT PLAN (CON'T) ;09-SEP-96
"RTN","IBCNSUR1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,225,276,516,549**;21-MAR-94;Build 54
"RTN","IBCNSUR1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR1",4,0)
 Q
"RTN","IBCNSUR1",5,0)
 ;
"RTN","IBCNSUR1",6,0)
 ;
"RTN","IBCNSUR1",7,0)
PROC ; - Top of processing from IBCNSUR
"RTN","IBCNSUR1",8,0)
 ; Move subscribers to another company's insurance plan.
"RTN","IBCNSUR1",9,0)
 N D0,DA,DFN,DIC,DIE,DIK,DIR,DIROUT,DIRUT,DLAYGO,DR,DTOUT,DUOUT
"RTN","IBCNSUR1",10,0)
 N I,IBAB,IBBU,IBC1,IBC1N,IBC1X,IBC2,IBC2N,IBC2X
"RTN","IBCNSUR1",11,0)
 N IBCAB,IBCDFN,IBCDFN1,IBCNS,IBCPOL,IBDAT,IBDEAD,IBDONE
"RTN","IBCNSUR1",12,0)
 N IBEFDT,IBEFDT1,IBEFDT2,IBEFFDT,IBEXPDT,IBGRP,IBI,IBIAB,IBLN
"RTN","IBCNSUR1",13,0)
 N IBNP,IBP1,IBP1N,IBP1X,IBP2,IBP2N,IBP2X,IBPLAN,IBQ,IBQUIT
"RTN","IBCNSUR1",14,0)
 N IBSPLIT,IBST,IBSUB,IBSUBACT,IBSUBID,IBVALUE,IBW,IBXXX,IBX
"RTN","IBCNSUR1",15,0)
 N NUMSEL,REF,X,Y
"RTN","IBCNSUR1",16,0)
 ;
"RTN","IBCNSUR1",17,0)
 K ^TMP($J,"IBCNSUR")  ; subscribers
"RTN","IBCNSUR1",18,0)
 K ^TMP($J,"IBCNSUR1") ; e-mail bulletin
"RTN","IBCNSUR1",19,0)
 S REF=$NA(^TMP($J,"IBCNSUR1")),IBLN=0
"RTN","IBCNSUR1",20,0)
 ;
"RTN","IBCNSUR1",21,0)
 S (IBDONE,IBQUIT,NUMSEL)=0
"RTN","IBCNSUR1",22,0)
 ;
"RTN","IBCNSUR1",23,0)
 W !!!,"=====================",!,"MOVE SUBSCRIBERS FROM",!,"====================="
"RTN","IBCNSUR1",24,0)
 W !!,"Select the Insurance Company and Plan to move subscribers FROM.",!
"RTN","IBCNSUR1",25,0)
 ;
"RTN","IBCNSUR1",26,0)
 ; - select company/plan for subscribers to be moved
"RTN","IBCNSUR1",27,0)
 S IBQUIT=0
"RTN","IBCNSUR1",28,0)
 D SEL^IBCNSUR(0)
"RTN","IBCNSUR1",29,0)
 I IBQUIT S IBSTOP=1 Q
"RTN","IBCNSUR1",30,0)
 ;
"RTN","IBCNSUR1",31,0)
 ; IB*2.0*549 - Filtering questions begin here.
"RTN","IBCNSUR1",32,0)
 ; - ask if they want to move the entire group plan
"RTN","IBCNSUR1",33,0)
 S DIR(0)="Y",DIR("A")="Do you want to move the entire group plan"
"RTN","IBCNSUR1",34,0)
 S DIR("B")="YES"
"RTN","IBCNSUR1",35,0)
 S DIR("?")="If you wish to be Selective of which Subscribers are moved, enter 'No' - otherwise, enter 'Yes'"
"RTN","IBCNSUR1",36,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",37,0)
 I Y="^" S IBQUIT=1 G PROCQ
"RTN","IBCNSUR1",38,0)
 S IBGRP=Y
"RTN","IBCNSUR1",39,0)
 ;
"RTN","IBCNSUR1",40,0)
 ; Make sure is at least one subscriber in the selected Insurance Company/Group Plan
"RTN","IBCNSUR1",41,0)
 I '$$SUBS^IBCNSJ(IBCNS,IBPLAN,0,,1) D  G PROCQ
"RTN","IBCNSUR1",42,0)
 . W !!,?5,*7,"*  This group plan has no subscribers!"
"RTN","IBCNSUR1",43,0)
 . S IBQUIT=1
"RTN","IBCNSUR1",44,0)
 ;
"RTN","IBCNSUR1",45,0)
 I 'IBGRP D FILTER   ; IB*2.0*549 - if not moving entire plan...proceed with filter questions. 
"RTN","IBCNSUR1",46,0)
 I IBQUIT G PROCQ
"RTN","IBCNSUR1",47,0)
 ;
"RTN","IBCNSUR1",48,0)
COLLECT  ; - collect the plan subscribers
"RTN","IBCNSUR1",49,0)
 S IBC1=IBCNS,IBP1=IBPLAN
"RTN","IBCNSUR1",50,0)
 W !!,"Collecting Subscribers ..."
"RTN","IBCNSUR1",51,0)
 I IBGRP D  G:IBQUIT PROCQ
"RTN","IBCNSUR1",52,0)
 . S IBSUB=$$SUBS^IBCNSJ(IBC1,IBP1,0,"^TMP($J,""IBCNSUR"")")
"RTN","IBCNSUR1",53,0)
 . ; Proceed after all subscribers, etc. are accounted for.
"RTN","IBCNSUR1",54,0)
 . I 'IBSUB W !!,?5,*7,"*  This group plan has no subscribers!" S IBQUIT=1 Q
"RTN","IBCNSUR1",55,0)
 . W !!,"This group plan has "_+IBSUB_" subscribers. All subscribers will be moved."
"RTN","IBCNSUR1",56,0)
 . S DIR(0)="Y",DIR("A")="Okay to continue"
"RTN","IBCNSUR1",57,0)
 . S DIR("?")="If you wish to move these subscribers, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR1",58,0)
 . W ! D ^DIR K DIR
"RTN","IBCNSUR1",59,0)
 . I 'Y W !!,?10,"<Okay, nothing moved>" S IBQUIT=1 Q
"RTN","IBCNSUR1",60,0)
 ;
"RTN","IBCNSUR1",61,0)
 I 'IBGRP D  G:IBQUIT PROCQ   ; Prompt for selected subscribers to move - IB*2*549 (vd)
"RTN","IBCNSUR1",62,0)
 . S NUMSEL=$$EN^IBCNSUR4(IBC1,IBP1,IBDEAD,IBSUBID,IBVALUE,IBSUBACT,IBEFDT,IBEFDT1,IBEFDT2)   ; This is a new sub-routine to collect the subscribers using the various filters.
"RTN","IBCNSUR1",63,0)
 . I IBQUIT S IBSTOP=1 Q
"RTN","IBCNSUR1",64,0)
 . S IBSUB=+$P(NUMSEL,U,2)
"RTN","IBCNSUR1",65,0)
 . I '+NUMSEL W !!,?5,*7,"*  No subscribers selected to be moved." S IBQUIT=1 Q
"RTN","IBCNSUR1",66,0)
 . ;
"RTN","IBCNSUR1",67,0)
 . W !!,"This group plan has "_+IBSUB_" subscribers. You have selected to move"
"RTN","IBCNSUR1",68,0)
 . W !,+NUMSEL_" of these subscribers."
"RTN","IBCNSUR1",69,0)
 . S DIR(0)="Y",DIR("A")="Okay to continue"
"RTN","IBCNSUR1",70,0)
 . S DIR("?")="If you wish to move these subscribers, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR1",71,0)
 . W ! D ^DIR K DIR
"RTN","IBCNSUR1",72,0)
 . I 'Y W !!,?10,"<Okay, nothing moved>" S IBQUIT=1 Q
"RTN","IBCNSUR1",73,0)
 ;
"RTN","IBCNSUR1",74,0)
 ; - select company/plan to move subscribers
"RTN","IBCNSUR1",75,0)
 W !!!,"MOVE SUBSCRIBERS TO"
"RTN","IBCNSUR1",76,0)
 W !!,"Select the Insurance Company and Plan to move subscribers TO.",!
"RTN","IBCNSUR1",77,0)
 D SEL^IBCNSUR(1)
"RTN","IBCNSUR1",78,0)
 I IBQUIT G PROCQ
"RTN","IBCNSUR1",79,0)
 I $P($G(^DIC(36,IBCNS,0)),"^",5) W !!,*7,"You must move the subscribers to an active insurance company!" G PROCQ
"RTN","IBCNSUR1",80,0)
 S IBC2=IBCNS,IBP2=IBPLAN
"RTN","IBCNSUR1",81,0)
 ;
"RTN","IBCNSUR1",82,0)
 ; - make sure not moving the subscribers to their current plan
"RTN","IBCNSUR1",83,0)
 I (IBC1=IBC2)&(IBP1=IBP2) W !!,*7,"You must move the subscribers to a different plan!" G PROCQ
"RTN","IBCNSUR1",84,0)
 ;
"RTN","IBCNSUR1",85,0)
 ; - set name and plan number
"RTN","IBCNSUR1",86,0)
 S IBC1N=$P($G(^DIC(36,+IBC1,0)),U,1)
"RTN","IBCNSUR1",87,0)
 ;IB*2.0*516/TAZ - Retrieve data from HIPAA compliant fields
"RTN","IBCNSUR1",88,0)
 ;S IBP1N=$P($G(^IBA(355.3,+IBP1,0)),U,3,4),IBP1X=$P(IBP1N,U,2)  ; 516 - baa
"RTN","IBCNSUR1",89,0)
 S IBP1N=$$GET1^DIQ(355.3,+IBP1,2.01)_U_$$GET1^DIQ(355.3,+IBP1,2.02),IBP1X=$P(IBP1N,U,2)
"RTN","IBCNSUR1",90,0)
 S IBP1X=$S(IBP1X]"":IBP1X,1:"<Not Specified>")
"RTN","IBCNSUR1",91,0)
 S IBC2N=$P($G(^DIC(36,+IBC2,0)),U,1)
"RTN","IBCNSUR1",92,0)
 ;IB*2.0*516/TAZ - Retrieve data from HIPAA compliant fields
"RTN","IBCNSUR1",93,0)
 ;S IBP2N=$P($G(^IBA(355.3,+IBP2,0)),U,3,4),IBP2X=$P(IBP2N,U,2)  ; 516 - baa
"RTN","IBCNSUR1",94,0)
 S IBP2N=$$GET1^DIQ(355.3,+IBP2,2.01)_U_$$GET1^DIQ(355.3,+IBP2,2.02),IBP2X=$P(IBP2N,U,2)
"RTN","IBCNSUR1",95,0)
 S IBP2X=$S(IBP2X]"":IBP2X,1:"<Not Specified>")
"RTN","IBCNSUR1",96,0)
 S IBP2N=$S($P(IBP2N,U,1)="":"<Not Specified>",1:$P(IBP2N,U,1))
"RTN","IBCNSUR1",97,0)
 ;
"RTN","IBCNSUR1",98,0)
 ; - ask if they want to delete the old insurance
"RTN","IBCNSUR1",99,0)
 S DIR(0)="Y",DIR("A")="policy Effective date"
"RTN","IBCNSUR1",100,0)
 S DIR("A",1)="Do you want to EXPIRE the old patient policy(s) by entering the new"
"RTN","IBCNSUR1",101,0)
 S DIR("B")="NO"
"RTN","IBCNSUR1",102,0)
 S DIR("?")="If you wish to apply Effective Date, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBCNSUR1",103,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",104,0)
 I $D(DIRUT) G PROCQ
"RTN","IBCNSUR1",105,0)
 S IBSPLIT=''Y
"RTN","IBCNSUR1",106,0)
 ; if yes then
"RTN","IBCNSUR1",107,0)
 ; - ask the effective date of the new insurance
"RTN","IBCNSUR1",108,0)
 I IBSPLIT D  I IBQ G PROCQ
"RTN","IBCNSUR1",109,0)
 . S IBQ=0
"RTN","IBCNSUR1",110,0)
 . S %DT="AEX",%DT("A")="Effective Date of the new Plan Policy(s): "
"RTN","IBCNSUR1",111,0)
 . W ! D ^%DT K %DT I Y'>0 S IBQ=1 Q
"RTN","IBCNSUR1",112,0)
 . S IBEFFDT=$P(+Y,".")
"RTN","IBCNSUR1",113,0)
 . S IBEXPDT=$$FMADD^XLFDT(IBEFFDT,-1)
"RTN","IBCNSUR1",114,0)
 ;
"RTN","IBCNSUR1",115,0)
 ; - ask are they sure
"RTN","IBCNSUR1",116,0)
 W !!!,"You selected to move ",$S(+IBGRP:IBSUB,1:+NUMSEL)," subscriber(s) and "
"RTN","IBCNSUR1",117,0)
 W $S(IBSPLIT:"EXPIRE",1:"REPLACE")," the old group plan &"
"RTN","IBCNSUR1",118,0)
 W !,"policy in the patient profile.",!
"RTN","IBCNSUR1",119,0)
 W !?5,"FROM Insurance Company ",IBC1N
"RTN","IBCNSUR1",120,0)
 W !?10,"Plan Name ",$P(IBP1N,U,1),"     Number ",IBP1X
"RTN","IBCNSUR1",121,0)
 W !?5,"TO Insurance Company ",IBC2N
"RTN","IBCNSUR1",122,0)
 W !?10,"Plan Name ",IBP2N,"     Number ",IBP2X
"RTN","IBCNSUR1",123,0)
 I IBSPLIT D
"RTN","IBCNSUR1",124,0)
 . W !?5,"BY switching to the new Insurance/Plan"
"RTN","IBCNSUR1",125,0)
 . W !?10,"with Effective Date ",$$DAT2^IBOUTL(IBEFFDT)
"RTN","IBCNSUR1",126,0)
 W !
"RTN","IBCNSUR1",127,0)
 W !,"Please Note that the old group plan & policy will be "
"RTN","IBCNSUR1",128,0)
 W $S(IBSPLIT:"EXPIRED",1:"REPLACED")," in the patient",!,"profile!",!
"RTN","IBCNSUR1",129,0)
 ;
"RTN","IBCNSUR1",130,0)
 S DIR(0)="Y",DIR("A")="Okay to continue"
"RTN","IBCNSUR1",131,0)
 S DIR("?")="If you wish to move these subscribers, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR1",132,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",133,0)
 I 'Y W !!,?10,"<Okay, nothing moved>" G PROCQ
"RTN","IBCNSUR1",134,0)
 ;
"RTN","IBCNSUR1",135,0)
 ; - should annual benefits be moved?
"RTN","IBCNSUR1",136,0)
 S (IBAB,IBQ)=0
"RTN","IBCNSUR1",137,0)
 I $D(^IBA(355.4,"APY",IBP1)),'$D(^IBA(355.4,"APY",IBP2)) D  G:IBQ PROCQ
"RTN","IBCNSUR1",138,0)
 .S DIR(0)="Y",DIR("A")="Okay to add "_IBC1N_"'s plan Annual Benefits to "_IBC2N_"'s plan"
"RTN","IBCNSUR1",139,0)
 .S DIR("?")="If you wish to move these Annual Benefits, enter 'Yes' - otherwise, enter 'No.'"
"RTN","IBCNSUR1",140,0)
 .W ! D ^DIR K DIR I $D(DIRUT)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) S IBQ=1
"RTN","IBCNSUR1",141,0)
 .S:Y IBAB=1 K DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSUR1",142,0)
 ;
"RTN","IBCNSUR1",143,0)
 ; - copy annual benefits over to the new plan
"RTN","IBCNSUR1",144,0)
 I IBAB D
"RTN","IBCNSUR1",145,0)
 .S IBI=0 F  S IBI=$O(^IBA(355.4,"C",IBP1,IBI)) Q:'IBI  D
"RTN","IBCNSUR1",146,0)
 ..S IBIAB=$G(^IBA(355.4,IBI,0)) Q:'IBIAB
"RTN","IBCNSUR1",147,0)
 ..S X=+IBIAB,DIC(0)="L",DLAYGO=355.4,DIC="^IBA(355.4,"
"RTN","IBCNSUR1",148,0)
 ..K DD,DO D FILE^DICN Q:+Y<0  S IBCAB=+Y
"RTN","IBCNSUR1",149,0)
 ..S $P(^IBA(355.4,IBCAB,0),"^",2)=IBP2
"RTN","IBCNSUR1",150,0)
 ..S $P(^IBA(355.4,IBCAB,0),"^",5,6)=$P(IBIAB,"^",5,6)
"RTN","IBCNSUR1",151,0)
 ..F I=1:1:5 I $G(^IBA(355.4,IBI,I))]"" S ^IBA(355.4,IBCAB,I)=^(I)
"RTN","IBCNSUR1",152,0)
 ..S DA=IBCAB,DIK="^IBA(355.4," D IX1^DIK,EDUP^IBCNSA2
"RTN","IBCNSUR1",153,0)
 ;
"RTN","IBCNSUR1",154,0)
 ; - should plan comments be copied over to the new plan?
"RTN","IBCNSUR1",155,0)
 S (IBAB,IBQ)=0
"RTN","IBCNSUR1",156,0)
 I $P($G(^IBA(355.3,IBP1,11,0)),U,4),'$P($G(^IBA(355.3,IBP2,11,0)),U,4) D  G:IBQ PROCQ
"RTN","IBCNSUR1",157,0)
 .S DIR(0)="Y"
"RTN","IBCNSUR1",158,0)
 .S DIR("A")="Okay to add "_IBC1N_"'s Comments to "_IBC2N_"'s plan"
"RTN","IBCNSUR1",159,0)
 .S DIR("?")="If you wish to move these Comments, enter 'Yes'"
"RTN","IBCNSUR1",160,0)
 .S DIR("?")=DIR("?")_" - otherwise, enter 'NO'."
"RTN","IBCNSUR1",161,0)
 .W ! D ^DIR K DIR I $D(DIRUT)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) S IBQ=1
"RTN","IBCNSUR1",162,0)
 .S:Y IBAB=1 K DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCNSUR1",163,0)
 ;
"RTN","IBCNSUR1",164,0)
 ; - copy plan comments over to the new plan
"RTN","IBCNSUR1",165,0)
 I IBAB D
"RTN","IBCNSUR1",166,0)
 .S DIC="^IBA(355.3,"_IBP2_",11,",DIC(0)="L",DIC("P")=355.311
"RTN","IBCNSUR1",167,0)
 .S IBI=0 F  S IBI=$O(^IBA(355.3,IBP1,11,IBI)) Q:'IBI  D
"RTN","IBCNSUR1",168,0)
 ..I $G(^IBA(355.3,IBP1,11,IBI,0))]"" S X=^(0) D FILE^DICN
"RTN","IBCNSUR1",169,0)
 ;
"RTN","IBCNSUR1",170,0)
 ; The MailMan bulletin header
"RTN","IBCNSUR1",171,0)
 D BHEAD^IBCNSUR3
"RTN","IBCNSUR1",172,0)
 ;
"RTN","IBCNSUR1",173,0)
 ; - move the subscribers to the new plan
"RTN","IBCNSUR1",174,0)
 W !!,"Moving subscribers"
"RTN","IBCNSUR1",175,0)
 I IBGRP D  G PROCA  ; Move a group of subscribers
"RTN","IBCNSUR1",176,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"IBCNSUR",DFN)) Q:'DFN  D
"RTN","IBCNSUR1",177,0)
 . . S IBCDFN=0 F  S IBCDFN=$O(^TMP($J,"IBCNSUR",DFN,IBCDFN)) Q:'IBCDFN  D MOVESUB
"RTN","IBCNSUR1",178,0)
 ;
"RTN","IBCNSUR1",179,0)
 I 'IBGRP D    ; Move individual subscribers - IB*2*549 (VD)
"RTN","IBCNSUR1",180,0)
 . S DFN=0 F  S DFN=$O(^TMP("IBCNSUR4A",$J,DFN)) Q:'DFN  D
"RTN","IBCNSUR1",181,0)
 . . S IBCDFN=0 F  S IBCDFN=$O(^TMP("IBCNSUR4A",$J,DFN,IBCDFN)) Q:'IBCDFN  D MOVESUB
"RTN","IBCNSUR1",182,0)
 ;
"RTN","IBCNSUR1",183,0)
PROCA ; Proc continuation.
"RTN","IBCNSUR1",184,0)
 ;
"RTN","IBCNSUR1",185,0)
 W !!,"Done.  All subscribers were moved as requested!",!
"RTN","IBCNSUR1",186,0)
 D DONE^IBCNSUR3
"RTN","IBCNSUR1",187,0)
 W !,"The Bulletin was sent to you and members of 'IB NEW INSURANCE' Mail Group.",!
"RTN","IBCNSUR1",188,0)
 R !!,?10,"Press any key to continue.  ",IBX:DTIME
"RTN","IBCNSUR1",189,0)
 ;
"RTN","IBCNSUR1",190,0)
 ; - finish processing in IBCNSUR (keep RSIZE down)
"RTN","IBCNSUR1",191,0)
 D PROC^IBCNSUR
"RTN","IBCNSUR1",192,0)
 ;
"RTN","IBCNSUR1",193,0)
PROCQ ;
"RTN","IBCNSUR1",194,0)
 K ^TMP($J,"IBCNSUR")
"RTN","IBCNSUR1",195,0)
 K ^TMP($J,"IBCNSUR1")
"RTN","IBCNSUR1",196,0)
 K ^TMP($J,"IBCNSURS")
"RTN","IBCNSUR1",197,0)
 K ^TMP("IBCNSUR4A",$J)
"RTN","IBCNSUR1",198,0)
 Q
"RTN","IBCNSUR1",199,0)
 ;
"RTN","IBCNSUR1",200,0)
MOVESUB ; Move the current subscriber.
"RTN","IBCNSUR1",201,0)
 Q:$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)'=IBP1
"RTN","IBCNSUR1",202,0)
 ;
"RTN","IBCNSUR1",203,0)
 D ADS^IBCNSUR3(DFN,IBCDFN)
"RTN","IBCNSUR1",204,0)
 I 'IBSPLIT D MODIFINS(IBC2,IBP2,DFN,IBCDFN) ;regular mode
"RTN","IBCNSUR1",205,0)
 I IBSPLIT D SPLITINS(IBC2,IBP2,DFN,IBCDFN,IBEFFDT,IBEXPDT)
"RTN","IBCNSUR1",206,0)
 ; - merge previous benefits used
"RTN","IBCNSUR1",207,0)
 S IBDAT="" F  S IBDAT=$O(^IBA(355.5,"APPY",DFN,IBP1,IBDAT)) Q:IBDAT=""  D
"RTN","IBCNSUR1",208,0)
 . S IBCDFN1=0 F  S IBCDFN1=$O(^IBA(355.5,"APPY",DFN,IBP1,IBDAT,IBCDFN1)) Q:'IBCDFN1  I IBCDFN1=IBCDFN S IBBU=$O(^(IBCDFN1,0)) D
"RTN","IBCNSUR1",209,0)
 . . I '$D(^IBA(355.4,"APY",IBP2,IBDAT)) D DBU^IBCNSJ(IBBU) Q
"RTN","IBCNSUR1",210,0)
 . . D MERG^IBCNSJ13(IBP2,IBBU)
"RTN","IBCNSUR1",211,0)
 ;
"RTN","IBCNSUR1",212,0)
 W "."
"RTN","IBCNSUR1",213,0)
 Q
"RTN","IBCNSUR1",214,0)
 ;
"RTN","IBCNSUR1",215,0)
 ; modify the ins plan
"RTN","IBCNSUR1",216,0)
MODIFINS(IBC2,IBP2,DFN,IBCDFN) ;
"RTN","IBCNSUR1",217,0)
 N DA,DIE,DR,IBX,IBXXX
"RTN","IBCNSUR1",218,0)
 ; - change the policy company
"RTN","IBCNSUR1",219,0)
 S IBXXX='$G(^DPT(DFN,.312,IBCDFN,1))
"RTN","IBCNSUR1",220,0)
 S DIE="^DPT(DFN,.312,",DA(1)=DFN,DA=IBCDFN,DR=".01///`"_IBC2 D ^DIE K DIE,DA,DR
"RTN","IBCNSUR1",221,0)
 I IBXXX S $P(^DPT(DFN,.312,IBCDFN,1),"^",1,2)="^"
"RTN","IBCNSUR1",222,0)
 ;
"RTN","IBCNSUR1",223,0)
 ; - repoint Insurance Reviews to the new company
"RTN","IBCNSUR1",224,0)
 S IBX=0 F  S IBX=$O(^IBT(356.2,"D",DFN,IBX)) Q:'IBX  I $P($G(^IBT(356.2,IBX,1)),"^",5)=IBCDFN S DIE="^IBT(356.2,",DA=IBX,DR=".08////"_IBC2 D ^DIE K DIE,DA,DR
"RTN","IBCNSUR1",225,0)
 ;
"RTN","IBCNSUR1",226,0)
 ; - change the policy plan
"RTN","IBCNSUR1",227,0)
 D SWPL^IBCNSJ13(IBP2,DFN,IBCDFN)
"RTN","IBCNSUR1",228,0)
 Q
"RTN","IBCNSUR1",229,0)
 ; change the ins plan effective IBEFFDT
"RTN","IBCNSUR1",230,0)
SPLITINS(IBC2,IBP2,DFN,IBCDFN,IBEFFDT,IBEXPDT) ;
"RTN","IBCNSUR1",231,0)
 N DA,DGRUGA08,DIE,DIK,DR,IBCDFN2,IBERR,IBI,IBIEN,IBRT,IBX,IBZ,IBZ1
"RTN","IBCNSUR1",232,0)
 S IBZ=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSUR1",233,0)
 S IBZ1=$G(^DPT(DFN,.312,IBCDFN,1))
"RTN","IBCNSUR1",234,0)
 ; - ignore if the old plan expired
"RTN","IBCNSUR1",235,0)
 I $P(IBZ,U,4),$P(IBZ,U,4)<IBEFFDT Q
"RTN","IBCNSUR1",236,0)
 ; - if the ins is effective later - no need to split
"RTN","IBCNSUR1",237,0)
 I $P(IBZ,U,8),$P(IBZ,U,8)'<IBEFFDT D MODIFINS(IBC2,IBP2,DFN,IBCDFN) Q
"RTN","IBCNSUR1",238,0)
 ;
"RTN","IBCNSUR1",239,0)
 S DGRUGA08=1 ; Disable HL7 triggered by 2.312/3 and 2.312/8
"RTN","IBCNSUR1",240,0)
 ; - create the new insurance record for the DFN (clone)
"RTN","IBCNSUR1",241,0)
 S IBI="+1,"_DFN_","
"RTN","IBCNSUR1",242,0)
 ; - add a record
"RTN","IBCNSUR1",243,0)
 S IBRT(2.312,IBI,.01)=IBC2
"RTN","IBCNSUR1",244,0)
 D UPDATE^DIE("","IBRT","IBIEN","IBERR")
"RTN","IBCNSUR1",245,0)
 I $D(IBERR) Q  ; error
"RTN","IBCNSUR1",246,0)
 I '$G(IBIEN(1)) Q  ; error
"RTN","IBCNSUR1",247,0)
 S IBCDFN2=+IBIEN(1)
"RTN","IBCNSUR1",248,0)
 ; - clone the insurance data
"RTN","IBCNSUR1",249,0)
 M ^DPT(DFN,.312,IBCDFN2)=^DPT(DFN,.312,IBCDFN)
"RTN","IBCNSUR1",250,0)
 S $P(^DPT(DFN,.312,IBCDFN2,0),U,1)=IBC2
"RTN","IBCNSUR1",251,0)
 S $P(^DPT(DFN,.312,IBCDFN2,0),U,8)=IBEFFDT
"RTN","IBCNSUR1",252,0)
 ; - now reindex
"RTN","IBCNSUR1",253,0)
 S DA(1)=DFN,DA=IBCDFN2,DIK="^DPT("_DFN_",.312,"
"RTN","IBCNSUR1",254,0)
 D IX1^DIK
"RTN","IBCNSUR1",255,0)
 ; - change the policy plan
"RTN","IBCNSUR1",256,0)
 D SWPL^IBCNSJ13(IBP2,DFN,IBCDFN2)
"RTN","IBCNSUR1",257,0)
 ; - set the expiration date
"RTN","IBCNSUR1",258,0)
 S $P(^DPT(DFN,.312,IBCDFN,0),U,4)=IBEXPDT
"RTN","IBCNSUR1",259,0)
 S DA(1)=DFN,DA=IBCDFN,DIK="^DPT("_DFN_",.312,"
"RTN","IBCNSUR1",260,0)
 D IX1^DIK
"RTN","IBCNSUR1",261,0)
 Q
"RTN","IBCNSUR1",262,0)
 ;
"RTN","IBCNSUR1",263,0)
FILTER ; IB*2.0*549 - Prompts for Filter questions.
"RTN","IBCNSUR1",264,0)
 ; if no, then proceed with the filtering questions.
"RTN","IBCNSUR1",265,0)
 ; - ask if they want to continue because they are about to select individual subscribers
"RTN","IBCNSUR1",266,0)
 S DIR(0)="Y",DIR("A")="You have selected to move individual subscribers.  Okay to continue"
"RTN","IBCNSUR1",267,0)
 S DIR("B")="YES"
"RTN","IBCNSUR1",268,0)
 S DIR("?")="If you wish to continue being Selective of which Subscribers are moved, enter 'Yes' - otherwise, enter 'No' to quit."
"RTN","IBCNSUR1",269,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",270,0)
 ; if yes then proceed with collecting the subscribers for the entire plan.
"RTN","IBCNSUR1",271,0)
 I '+Y!(Y="^") S IBQUIT=1 Q  ; QUIT
"RTN","IBCNSUR1",272,0)
 ;
"RTN","IBCNSUR1",273,0)
 ; - ask if they want to filter out Deceased Patients
"RTN","IBCNSUR1",274,0)
 S DIR(0)="Y",DIR("A")="Do you want to filter out deceased patients"
"RTN","IBCNSUR1",275,0)
 S DIR("B")="YES"
"RTN","IBCNSUR1",276,0)
 S DIR("?")="If you wish to ignore Deceased Patients in the selection process, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBCNSUR1",277,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",278,0)
 I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",279,0)
 S IBDEAD=+Y   ; 1=ignore deceased patients,  0=include deceased patients.
"RTN","IBCNSUR1",280,0)
 ;
"RTN","IBCNSUR1",281,0)
 ; - ask if they want to filter based on Subscriber ID
"RTN","IBCNSUR1",282,0)
 S DIR(0)="YO",DIR("A")="Do you want to filter Subscriber ID"
"RTN","IBCNSUR1",283,0)
 S DIR("B")="YES"
"RTN","IBCNSUR1",284,0)
 S DIR("?")="If you wish to filter subscribers based upon the Subscriber ID, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBCNSUR1",285,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",286,0)
 I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",287,0)
 S IBSUBID=+Y   ; 1=filter based upon the Subscriber ID,  0=ignore Subscriber IDs.
"RTN","IBCNSUR1",288,0)
 S IBQUIT=0
"RTN","IBCNSUR1",289,0)
 S IBVALUE=""
"RTN","IBCNSUR1",290,0)
 I +IBSUBID D  I +IBQUIT Q
"RTN","IBCNSUR1",291,0)
 . ;
"RTN","IBCNSUR1",292,0)
 . ; - ask user to enter the value that subscriber IDs need to 'contain'
"RTN","IBCNSUR1",293,0)
 . S DIR(0)="FAO",DIR("A")="Filter Subscriber IDs that contain:  "
"RTN","IBCNSUR1",294,0)
 . S DIR("?")="Enter value that Subscriber IDs should contain.  NULL value means blank values."
"RTN","IBCNSUR1",295,0)
 . D ^DIR K DIR
"RTN","IBCNSUR1",296,0)
 . I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",297,0)
 . S IBVALUE=$$UP^XLFSTR(Y)
"RTN","IBCNSUR1",298,0)
 ;
"RTN","IBCNSUR1",299,0)
 ; - ask if they want to filter based on ACTIVE or INACTIVE
"RTN","IBCNSUR1",300,0)
 S DIR(0)="Y",DIR("A")="Do you want to filter for active or inactive policies"
"RTN","IBCNSUR1",301,0)
 S DIR("B")="YES"
"RTN","IBCNSUR1",302,0)
 S DIR("?")="If you wish to specify filter subscribers based upon ACTIVE or INACTIVE, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBCNSUR1",303,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",304,0)
 I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",305,0)
 S IBSUBACT=+Y   ; 1=filter based upon the ACTIVE or INACTIVE,  0=ignore ACTIVE status.
"RTN","IBCNSUR1",306,0)
 ;
"RTN","IBCNSUR1",307,0)
 I IBSUBACT D  I +IBQUIT Q
"RTN","IBCNSUR1",308,0)
 . ; Filter based on Active or Inactive policies.
"RTN","IBCNSUR1",309,0)
 . S DIR(0)="SA^1:1  Active Policies;2:2  Inactive Policies;3:3  Both"
"RTN","IBCNSUR1",310,0)
 . S DIR("A")=" SELECT 1 or 2 or 3: "
"RTN","IBCNSUR1",311,0)
 . S DIR("A",1)="1. Active Policies"
"RTN","IBCNSUR1",312,0)
 . S DIR("A",2)="2. Inactive Policies"
"RTN","IBCNSUR1",313,0)
 . S DIR("A",3)="3. Both"
"RTN","IBCNSUR1",314,0)
 . S DIR("B")=1
"RTN","IBCNSUR1",315,0)
 . S DIR("?",1)=" 1 - Only allow selection of ACTIVE Policies"
"RTN","IBCNSUR1",316,0)
 . S DIR("?",2)=" 2 - Only allow selection of INACTIVE Policies"
"RTN","IBCNSUR1",317,0)
 . S DIR("?")=" 3 - Allow selection of ACTIVE and INACTIVE Policies"
"RTN","IBCNSUR1",318,0)
 . D ^DIR K DIR I Y<0!$D(DIRUT) S IBQUIT=1 Q
"RTN","IBCNSUR1",319,0)
 . S IBSUBACT=Y K Y
"RTN","IBCNSUR1",320,0)
 ;
"RTN","IBCNSUR1",321,0)
 ; - ask if they want to filter based on Effective Dates
"RTN","IBCNSUR1",322,0)
 S DIR(0)="Y",DIR("A")="Do you want to filter Effective Dates"
"RTN","IBCNSUR1",323,0)
 S DIR("B")="NO"
"RTN","IBCNSUR1",324,0)
 S DIR("?")="If you wish to specify filter subscribers based upon Effective Dates, enter 'Yes' - otherwise, enter 'No'"
"RTN","IBCNSUR1",325,0)
 W ! D ^DIR K DIR
"RTN","IBCNSUR1",326,0)
 I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",327,0)
 S IBEFDT=+Y   ; 1=filter based upon Effective Dates,  0=ignore Effective Dates.
"RTN","IBCNSUR1",328,0)
 I 'IBEFDT S (IBEFDT1,IBEFDT2)="" Q
"RTN","IBCNSUR1",329,0)
 ;
"RTN","IBCNSUR1",330,0)
FILTERA ; Enter Effective Date range to filter subscribers.
"RTN","IBCNSUR1",331,0)
 N TODAY
"RTN","IBCNSUR1",332,0)
 S TODAY=$$DAT1^IBOUTL(DT) K DIR
"RTN","IBCNSUR1",333,0)
 W ! S DIR(0)="DAO",DIR("A")="Start with DATE: ",DIR("?")="Enter the earliest Effective Date to filter Subscribers."
"RTN","IBCNSUR1",334,0)
 D ^DIR K DIR
"RTN","IBCNSUR1",335,0)
 I '$L(Y) D  Q
"RTN","IBCNSUR1",336,0)
 . S IBEFDT=0,(IBEFDT1,IBEFDT2)="" Q
"RTN","IBCNSUR1",337,0)
 I Y="^" S IBQUIT=1 Q
"RTN","IBCNSUR1",338,0)
 S IBEFDT1=Y
"RTN","IBCNSUR1",339,0)
 ;
"RTN","IBCNSUR1",340,0)
FILTERB ; Enter End Date
"RTN","IBCNSUR1",341,0)
 W ! S DIR(0)="DA",DIR("A")="Go to DATE: ",DIR("B")=TODAY,DIR("?")="Enter the latest Effective Date to filter Subscribers."
"RTN","IBCNSUR1",342,0)
 D ^DIR K DIR
"RTN","IBCNSUR1",343,0)
 I 'Y S IBQUIT=1 Q
"RTN","IBCNSUR1",344,0)
 S IBEFDT2=Y
"RTN","IBCNSUR1",345,0)
 I IBEFDT2<IBEFDT1 W !,"End date cannot be less than Start date. Please re-enter date range." G FILTERB
"RTN","IBCNSUR1",346,0)
 Q
"RTN","IBCNSUR1",347,0)
 ;
"RTN","IBCNSUR3")
0^57^B6784776
"RTN","IBCNSUR3",1,0)
IBCNSUR3 ;WOIFO/AAT - MOVE SUBSCRIBERS (BULLETIN) ;09-SEP-96
"RTN","IBCNSUR3",2,0)
 ;;2.0;INTEGRATED BILLING;**276,549**;21-MAR-94;Build 54
"RTN","IBCNSUR3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR3",4,0)
 Q
"RTN","IBCNSUR3",5,0)
 ;
"RTN","IBCNSUR3",6,0)
 ;add line to the bulletin
"RTN","IBCNSUR3",7,0)
ADD(IBTAB,IBX1,IBX2,IBX3,IBX4,IBX5) ;
"RTN","IBCNSUR3",8,0)
 N IBX
"RTN","IBCNSUR3",9,0)
 S IBLN=IBLN+1
"RTN","IBCNSUR3",10,0)
 S IBX="" S:$G(IBTAB)>1 $E(IBX,IBTAB-1)=" "
"RTN","IBCNSUR3",11,0)
 S @REF@(IBLN)=IBX_$G(IBX1)_$G(IBX2)_$G(IBX3)_$G(IBX4)_$G(IBX5)
"RTN","IBCNSUR3",12,0)
 Q
"RTN","IBCNSUR3",13,0)
 ;
"RTN","IBCNSUR3",14,0)
BHEAD ; Bulletin header
"RTN","IBCNSUR3",15,0)
 D ADD(1,"MOVE SUBSCRIBERS OF ONE PLAN TO ANOTHER PLAN")
"RTN","IBCNSUR3",16,0)
 D ADD()
"RTN","IBCNSUR3",17,0)
 D ADD(1,"You selected to move ",$S(+$G(IBGRP):IBSUB,1:+NUMSEL)," subscriber(s)")
"RTN","IBCNSUR3",18,0)
 D ADD()
"RTN","IBCNSUR3",19,0)
 D ADD(5,"FROM Insurance Company ",IBC1N)
"RTN","IBCNSUR3",20,0)
 D ADD(10,"Plan Name ",$P(IBP1N,U,1),"     Number ",IBP1X)
"RTN","IBCNSUR3",21,0)
 D ADD(5,"TO Insurance Company ",IBC2N)
"RTN","IBCNSUR3",22,0)
 D ADD(10,"Plan Name ",IBP2N,"     Number ",IBP2X)
"RTN","IBCNSUR3",23,0)
 I IBSPLIT D
"RTN","IBCNSUR3",24,0)
 . D ADD(5,"BY switching to the new Insurance/Plan")
"RTN","IBCNSUR3",25,0)
 . D ADD(10,"with Effective Date ",$$DAT1^IBOUTL(IBEFFDT))
"RTN","IBCNSUR3",26,0)
 D ADD()
"RTN","IBCNSUR3",27,0)
 D ADD(1,"The old group plan and policy was ",$S(IBSPLIT:"set EXPIRED",1:"REPLACED")," in the patient profile."),ADD()
"RTN","IBCNSUR3",28,0)
 D ADD(1,"Patient Name/ID             Whose    Employer              Effective   Expires")
"RTN","IBCNSUR3",29,0)
 D ADD(1,"-------------------------------------------------------------------------------")
"RTN","IBCNSUR3",30,0)
 Q
"RTN","IBCNSUR3",31,0)
 ; Add subscriber to the bulletin
"RTN","IBCNSUR3",32,0)
ADS(DFN,IBCDFN) ;
"RTN","IBCNSUR3",33,0)
 N IBX,IBZ,IB2
"RTN","IBCNSUR3",34,0)
 S IBZ=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSUR3",35,0)
 S IB2=$G(^DPT(DFN,.312,IBCDFN,2))
"RTN","IBCNSUR3",36,0)
 S IBX=$E($P($G(^DPT(DFN,0)),U),1,22),$E(IBX,22)=" "
"RTN","IBCNSUR3",37,0)
 S IBX=$E(IBX_$E($P($G(^DPT(DFN,0)),U,9),6,10),1,28),$E(IBX,28)=" "
"RTN","IBCNSUR3",38,0)
 S IBX=$E(IBX_$$EXTERNAL^DILFD(2.312,6,,$P(IBZ,U,6)),1,36),$E(IBX,37)=" "
"RTN","IBCNSUR3",39,0)
 S IBX=$E(IBX_$P(IB2,U,9),1,59),$E(IBX,59)=" "
"RTN","IBCNSUR3",40,0)
 S IBX=$E(IBX_$$DAT1^IBOUTL($P(IBZ,U,8)),1,71),$E(IBX,71)=" "
"RTN","IBCNSUR3",41,0)
 S IBX=$E(IBX_$$DAT1^IBOUTL($P(IBZ,U,4)),1,80)
"RTN","IBCNSUR3",42,0)
 D ADD(1,IBX)
"RTN","IBCNSUR3",43,0)
 Q
"RTN","IBCNSUR3",44,0)
 ;
"RTN","IBCNSUR3",45,0)
DONE ;
"RTN","IBCNSUR3",46,0)
 N IBGRP,XMDUZ,XMTEXT,XMSUB,XMY,%
"RTN","IBCNSUR3",47,0)
 ;
"RTN","IBCNSUR3",48,0)
 D NOW^%DTC
"RTN","IBCNSUR3",49,0)
 D ADD()
"RTN","IBCNSUR3",50,0)
 D ADD(1,"THE PROCESS COMPLETED SUCCESSFULLY ON "_$$DAT1^IBOUTL(%,1))
"RTN","IBCNSUR3",51,0)
 ;
"RTN","IBCNSUR3",52,0)
 S XMSUB="SUBSCRIPTION LIST FOR INACTIVATED PLAN"
"RTN","IBCNSUR3",53,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="^TMP("_$J_",""IBCNSUR1"","
"RTN","IBCNSUR3",54,0)
 S XMY(DUZ)=""
"RTN","IBCNSUR3",55,0)
 S XMY("G.IB NEW INSURANCE")=""
"RTN","IBCNSUR3",56,0)
 D ^XMD
"RTN","IBCNSUR3",57,0)
 Q
"RTN","IBCNSUR4")
0^37^B155856313
"RTN","IBCNSUR4",1,0)
IBCNSUR4 ;ALB/VD - SELECT MULTIPLE SUBSCRIBERS LOOK-UP UTILITY ; 14-APR-15
"RTN","IBCNSUR4",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;14-APR-15;Build 54
"RTN","IBCNSUR4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSUR4",4,0)
 ;;
"RTN","IBCNSUR4",5,0)
 ;
"RTN","IBCNSUR4",6,0)
EN(IBC1,IBP1,IBDD,IBSBID,IBVAL,IBSUBACT,IBEFDT,IBEFDT1,IBEFDT2) ; Entry Point
"RTN","IBCNSUR4",7,0)
 ; Look-up Utility to Select Multiple Subscribers
"RTN","IBCNSUR4",8,0)
 ;  Input:  IBC1    --  Pointer to the company in file #36
"RTN","IBCNSUR4",9,0)
 ;          IBP1    --  Pointer to the plan in file #355.3
"RTN","IBCNSUR4",10,0)
 ;          IBDD    --  Deceased Subscribers Indicator (1 - Include
"RTN","IBCNSUR4",11,0)
 ;                      Deceased, 0 - Ignore Deceased)
"RTN","IBCNSUR4",12,0)
 ;          IBSBID  --  Subscriber ID Filter (1 - Use IBVAL to filter
"RTN","IBCNSUR4",13,0)
 ;                      Subscriber IDs, 0 - Ignore Subscriber IDs)
"RTN","IBCNSUR4",14,0)
 ;          IBVAL   --  Use the contained value to screen Subscriber IDs.
"RTN","IBCNSUR4",15,0)
 ;          IBSUBACT --  Subscriber Filter for Active Indicator (0 - Ignore
"RTN","IBCNSUR4",16,0)
 ;                      Active Status, 1 - Filter Active, 2 - Filter Inactive)
"RTN","IBCNSUR4",17,0)
 ;                      to be excluded from selection
"RTN","IBCNSUR4",18,0)
 ;          IBEFDT  --  Effective Date Filter Indicator (1 - Use Effective
"RTN","IBCNSUR4",19,0)
 ;                      Dates as a filter, 0 - Ignore Effective Dates.)
"RTN","IBCNSUR4",20,0)
 ;          IBEFDT1 --  Effective Date Filter Start Date.
"RTN","IBCNSUR4",21,0)
 ;          IBEFDT2 --  Effective Date Filter End Date.
"RTN","IBCNSUR4",22,0)
 ;
"RTN","IBCNSUR4",23,0)
 ; Output:  IBCNT  --  Number of Subscriber Policies to Move.
"RTN","IBCNSUR4",24,0)
 ;          ^TMP("IBCNSUR4A,$J) - Array of selected Subscribers.
"RTN","IBCNSUR4",25,0)
 D EN^VALM("IBCN SUBSCRIBER SELECTOR")
"RTN","IBCNSUR4",26,0)
 I +$G(IBFASTXT) S IBQUIT=1
"RTN","IBCNSUR4",27,0)
 Q +$G(NUMSEL)_U_+$G(IBSUB)
"RTN","IBCNSUR4",28,0)
 ;
"RTN","IBCNSUR4",29,0)
HDR(SELECTED) ;EP
"RTN","IBCNSUR4",30,0)
 ; Header code for the Subscriber Selection template
"RTN","IBCNSUR4",31,0)
 ;  Input:  SELECTED -- 1=Showing header for selected listman
"RTN","IBCNSUR4",32,0)
 ;                      0=Is the default or optional value
"RTN","IBCNSUR4",33,0)
 ;
"RTN","IBCNSUR4",34,0)
 ;          IBC1    --  Pointer to the company in file #36
"RTN","IBCNSUR4",35,0)
 ;          IBP1    --  Pointer to the plan in file #355.3
"RTN","IBCNSUR4",36,0)
 ;          IBDD    --  Deceased Subscribers Indicator (1 - Include
"RTN","IBCNSUR4",37,0)
 ;                      Deceased, 0 - Ignore Deceased)
"RTN","IBCNSUR4",38,0)
 ;          IBSBID  --  Subscriber ID Filter (1 - Use IBVAL to filter
"RTN","IBCNSUR4",39,0)
 ;                      Subscriber IDs, 0 - Ignore Subscriber IDs)
"RTN","IBCNSUR4",40,0)
 ;          IBVAL   --  Use the contained value to screen Subscriber IDs.
"RTN","IBCNSUR4",41,0)
 ;          IBSUBACT -- Subscriber Filter for Active Indicator (0 - Ignore
"RTN","IBCNSUR4",42,0)
 ;                      Active Status, 1 - Filter Active, 2 - Filter Inactive)
"RTN","IBCNSUR4",43,0)
 ;                      to be excluded from selection
"RTN","IBCNSUR4",44,0)
 ;          IBACTV  --  List of Active or Inactive policies.
"RTN","IBCNSUR4",45,0)
 ;          IBEFDT  --  Effective Date Filter Indicator (1 - Use Effective
"RTN","IBCNSUR4",46,0)
 ;                      Dates as a filter, 0 - Ignore Effective Dates.)
"RTN","IBCNSUR4",47,0)
 ;          IBEFDT1 --  Effective Date Filter Start Date.
"RTN","IBCNSUR4",48,0)
 ;          IBEFDT2 --  Effective Date Filter End Date.
"RTN","IBCNSUR4",49,0)
 ;
"RTN","IBCNSUR4",50,0)
 ; Output:  VALMHDR --  Header information to display
"RTN","IBCNSUR4",51,0)
 N HCTR
"RTN","IBCNSUR4",52,0)
 S:$G(IBSORT)="" IBSORT="1^Patient Name"
"RTN","IBCNSUR4",53,0)
 S VALMHDR(1)="Subscribers in: "_$$GET1^DIQ(36,+IBC1,.01),$E(VALMHDR(1),50,79)="Grp Name: "_$$GET1^DIQ(355.3,+IBP1,.03)
"RTN","IBCNSUR4",54,0)
 S VALMHDR(2)=$E($$GET1^DIQ(36,+IBC1,.111),1,20)_"  "_$E($$GET1^DIQ(36,+IBC1,.114),1,20)   ; Address and City
"RTN","IBCNSUR4",55,0)
 S VALMHDR(2)=VALMHDR(2)_", "_$P($G(^DIC(5,+$$GET1^DIQ(36,+IBC1,.115,"I"),0)),U,2)_" "_$E($$GET1^DIQ(36,+IBC1,.116),1,5)  ; ST Zip.
"RTN","IBCNSUR4",56,0)
 S $E(VALMHDR(2),53,99)="Grp #: "_$$GET1^DIQ(355.3,+IBP1,.04)
"RTN","IBCNSUR4",57,0)
 ;
"RTN","IBCNSUR4",58,0)
 S VALMHDR(3)=+$G(NUMSEL)_" Subscriber"_$S(+$G(NUMSEL)=1:"",1:"s")_" selected out of "_+$G(IBSUB),$E(VALMHDR(3),50,99)="Sorted by: "_$P(IBSORT,U,2)
"RTN","IBCNSUR4",59,0)
 S HCTR=4
"RTN","IBCNSUR4",60,0)
 S VALMHDR(HCTR)="Filters: "_$S(IBDD=1:"Living PATs",1:"All PATs")
"RTN","IBCNSUR4",61,0)
 I $L(IBVAL) S VALMHDR(HCTR)=VALMHDR(HCTR)_", SubIDs w/'"_IBVAL_"'"
"RTN","IBCNSUR4",62,0)
 I $L(VALMHDR(HCTR))>57 S HCTR=HCTR+1
"RTN","IBCNSUR4",63,0)
 I '$D(VALMHDR(HCTR)) S VALMHDR(HCTR)="        "
"RTN","IBCNSUR4",64,0)
 S VALMHDR(HCTR)=VALMHDR(HCTR)_$S(IBSUBACT=1:", Active",IBSUBACT=2:", Inactive",IBSUBACT=3:", All",1:$S(+IBSUBACT:"",1:", All"))_" Policies"
"RTN","IBCNSUR4",65,0)
 I $L(VALMHDR(HCTR))>46 S HCTR=HCTR+1
"RTN","IBCNSUR4",66,0)
 I +IBEFDT D
"RTN","IBCNSUR4",67,0)
 . I '$D(VALMHDR(HCTR)) S VALMHDR(HCTR)="        "
"RTN","IBCNSUR4",68,0)
 . S VALMHDR(HCTR)=VALMHDR(HCTR)_", Eff "_$$DAT1^IBOUTL(IBEFDT1)_"-"_$$DAT1^IBOUTL(IBEFDT2)
"RTN","IBCNSUR4",69,0)
 Q
"RTN","IBCNSUR4",70,0)
 ;
"RTN","IBCNSUR4",71,0)
INIT ;EP
"RTN","IBCNSUR4",72,0)
 ; Initialize variables and list array
"RTN","IBCNSUR4",73,0)
 ; Input: None
"RTN","IBCNSUR4",74,0)
 ; Output:  ^TMP("IBCNSUR4",$J) - Body lines to display
"RTN","IBCNSUR4",75,0)
 K ^TMP("IBCNSUR4",$J),^TMP("IBCNSUR4IX",$J),^TMP("IBCNSUR4A",$J)
"RTN","IBCNSUR4",76,0)
 S:$G(IBSORT)="" IBSORT="1^Patient Name"
"RTN","IBCNSUR4",77,0)
 D BLD
"RTN","IBCNSUR4",78,0)
 Q
"RTN","IBCNSUR4",79,0)
 ;
"RTN","IBCNSUR4",80,0)
BLD ; Build listman body
"RTN","IBCNSUR4",81,0)
 ;  Input:  IBC1    --  Pointer to the company in file #36
"RTN","IBCNSUR4",82,0)
 ;          IBP1    --  Pointer to the plan in file #355.3
"RTN","IBCNSUR4",83,0)
 ;          IBDD    --  Deceased Subscribers Indicator (1 - Include
"RTN","IBCNSUR4",84,0)
 ;                      Deceased, 0 - Ignore Deceased)
"RTN","IBCNSUR4",85,0)
 ;          IBSBID  --  Subscriber ID Filter (1 - Use IBVAL to filter
"RTN","IBCNSUR4",86,0)
 ;                      Subscriber IDs, 0 - Ignore Subscriber IDs)
"RTN","IBCNSUR4",87,0)
 ;          IBVAL   --  Use the contained value to screen Subscriber IDs.
"RTN","IBCNSUR4",88,0)
 ;          IBSUBACT -- Subscriber Filter for Active Indicator (0 - Include
"RTN","IBCNSUR4",89,0)
 ;                      Both Active & Inactive, 1 - Include Active,
"RTN","IBCNSUR4",90,0)
 ;                      2 - Include Inactive) to be included in selection.
"RTN","IBCNSUR4",91,0)
 ;          IBACTV  --  List of Active or Inactive policies.
"RTN","IBCNSUR4",92,0)
 ;          IBEFDT  --  Effective Date Filter Indicator (1 - Use Effective
"RTN","IBCNSUR4",93,0)
 ;                      Dates as a filter, 0 - Ignore Effective Dates.)
"RTN","IBCNSUR4",94,0)
 ;          IBEFDT1 --  Effective Date Filter Start Date.
"RTN","IBCNSUR4",95,0)
 ;          IBEFDT2 --  Effective Date Filter End Date.
"RTN","IBCNSUR4",96,0)
 ; Output:  VALMCNT   - Total number of lines displayed in the body
"RTN","IBCNSUR4",97,0)
 ;          ^TMP("IBCNSUR4",$J)   - Body lines to display
"RTN","IBCNSUR4",98,0)
 ;          ^TMP("IBCNSUR4IX",$J) - Index of Entry IENs by display line
"RTN","IBCNSUR4",99,0)
 ;
"RTN","IBCNSUR4",100,0)
 N ACTIVE,CURCNT,DFN,DFNY,OMIT,PATEFF,PATEXP,PATID,PATNAM,PATSID,PATSSN,PATWHO
"RTN","IBCNSUR4",101,0)
 N SORTED,SRTKEY1,SRTKEY2,SRTKEY3,SRTREC,Y
"RTN","IBCNSUR4",102,0)
 S IBSUB=$$SUBS^IBCNSJ(IBC1,IBP1,0,"^TMP($J,""IBCNSURS"")")
"RTN","IBCNSUR4",103,0)
 S (CURCNT,VALMCNT)=0
"RTN","IBCNSUR4",104,0)
 I '+IBSUB S ^TMP("IBCNSUR4",$J,1,0)="*  This group plan has no subscribers!" Q
"RTN","IBCNSUR4",105,0)
 I IBSUB D
"RTN","IBCNSUR4",106,0)
 . S DFN=""
"RTN","IBCNSUR4",107,0)
 . F  S DFN=$O(^TMP($J,"IBCNSURS",DFN)) Q:DFN=""  D
"RTN","IBCNSUR4",108,0)
 . . S Y=""
"RTN","IBCNSUR4",109,0)
 . . F  S Y=$O(^TMP($J,"IBCNSURS",DFN,Y)) Q:Y=""  D
"RTN","IBCNSUR4",110,0)
 . . . S OMIT=0,DFNY=DFN_"~"_Y
"RTN","IBCNSUR4",111,0)
 . . . D GTSREC(DFNY,.SRTREC)
"RTN","IBCNSUR4",112,0)
 . . . S PATSID=$P(SRTREC,U,2),PATEFF=$P(SRTREC,U,3),PATEXP=$P(SRTREC,U,4)
"RTN","IBCNSUR4",113,0)
 . . . S ACTIVE=$S('PATEXP:1,DT>+PATEXP:0,1:1)
"RTN","IBCNSUR4",114,0)
 . . . I +IBDEAD,+$$GET1^DIQ(2,DFN_",",.351,"I") Q   ; If ignoring deceased and subscriber is deceased exclude.
"RTN","IBCNSUR4",115,0)
 . . . I +IBSUBID,$L(IBVALUE),($$UP^XLFSTR(PATSID)'[IBVALUE) Q    ; Sub ID doesn't contain the Sub ID screen exclude.
"RTN","IBCNSUR4",116,0)
 . . . I +IBSUBACT D  Q:OMIT      ; Active vs Inactive
"RTN","IBCNSUR4",117,0)
 . . . . I IBSUBACT=1,'ACTIVE S OMIT=1 Q  ; Include active Policies.
"RTN","IBCNSUR4",118,0)
 . . . . I IBSUBACT=2,+ACTIVE S OMIT=1    ; Include inactive Policies.
"RTN","IBCNSUR4",119,0)
 . . . I +IBEFDT D  Q:OMIT        ; Effective Date
"RTN","IBCNSUR4",120,0)
 . . . . I PATEFF<IBEFDT1 S OMIT=1 Q    ; Effective date is less than starting date.
"RTN","IBCNSUR4",121,0)
 . . . . I PATEFF>IBEFDT2 S OMIT=1      ; Effective date is less than ending date.
"RTN","IBCNSUR4",122,0)
 . . . I '$D(IBSORT) S IBSORT=1
"RTN","IBCNSUR4",123,0)
 . . . S SRTKEY1=$P(SRTREC,U,IBSORT)
"RTN","IBCNSUR4",124,0)
 . . . S SRTKEY2=$P(SRTREC,U,1)   ; PATNAM
"RTN","IBCNSUR4",125,0)
 . . . S SRTKEY3=$O(SORTED(SRTKEY1,SRTKEY2,""),-1)+1
"RTN","IBCNSUR4",126,0)
 . . . S SORTED(SRTKEY1,SRTKEY2,SRTKEY3)=SRTREC
"RTN","IBCNSUR4",127,0)
 . . . ;
"RTN","IBCNSUR4",128,0)
 . S SRTKEY1=""
"RTN","IBCNSUR4",129,0)
 . F  S SRTKEY1=$O(SORTED(SRTKEY1)) Q:SRTKEY1=""  D
"RTN","IBCNSUR4",130,0)
 . . S SRTKEY2=""
"RTN","IBCNSUR4",131,0)
 . . F  S SRTKEY2=$O(SORTED(SRTKEY1,SRTKEY2)) Q:SRTKEY2=""  D
"RTN","IBCNSUR4",132,0)
 . . . S SRTKEY3=""
"RTN","IBCNSUR4",133,0)
 . . . F  S SRTKEY3=$O(SORTED(SRTKEY1,SRTKEY2,SRTKEY3)) Q:SRTKEY3=""  D
"RTN","IBCNSUR4",134,0)
 . . . . S SRTREC=SORTED(SRTKEY1,SRTKEY2,SRTKEY3)
"RTN","IBCNSUR4",135,0)
 . . . . S DFNY=$P(SRTREC,U,8),DFN=$P(DFNY,"~",1),Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",136,0)
 . . . . S CURCNT=CURCNT+1
"RTN","IBCNSUR4",137,0)
 . . . . S LINE=$$BLDLN(CURCNT,DFN,Y,SRTREC)
"RTN","IBCNSUR4",138,0)
 . . . . S VALMCNT=VALMCNT+1
"RTN","IBCNSUR4",139,0)
 . . . . D SET^VALM10(VALMCNT,LINE,LINE)
"RTN","IBCNSUR4",140,0)
 . . . . S ^TMP("IBCNSUR4IX",$J,CURCNT)=DFNY
"RTN","IBCNSUR4",141,0)
 I IBSUB S IBSUB=CURCNT
"RTN","IBCNSUR4",142,0)
 I VALMCNT=0 D
"RTN","IBCNSUR4",143,0)
 . S ^TMP("IBCNSUR4",$J,1,0)="No Subscribers with Selection Criteria were found."
"RTN","IBCNSUR4",144,0)
 Q
"RTN","IBCNSUR4",145,0)
 ;
"RTN","IBCNSUR4",146,0)
GTSREC(DFNY,SRTREC) ; Get the sort record data
"RTN","IBCNSUR4",147,0)
 N DFN,PATEFF,PATEXP,PATID,PATNAM,PATSID,PATSSN,PATWHO,Y
"RTN","IBCNSUR4",148,0)
 S SRTREC=""
"RTN","IBCNSUR4",149,0)
 S DFN=$P(DFNY,"~",1),Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",150,0)
 S PATNAM=$$GET1^DIQ(2,DFN_",",.01),PATNAM=$S($L(PATNAM):PATNAM,1:" ")
"RTN","IBCNSUR4",151,0)
 S PATSSN=$E($$GET1^DIQ(2,DFN_",",.09),6,9),PATSSN=$S($L(PATSSN):PATSSN,1:" ")
"RTN","IBCNSUR4",152,0)
 S PATSID=$E($$GET1^DIQ(2.312,Y_","_DFN_",",7.02),1,20),PATSID=$S($L(PATSID):PATSID,1:" ")   ;Only use the 1st 20 chars of SUBID.
"RTN","IBCNSUR4",153,0)
 S PATEFF=$$GET1^DIQ(2.312,Y_","_DFN_",",8,"I"),PATEFF=$S($L(PATEFF):PATEFF,1:" ")
"RTN","IBCNSUR4",154,0)
 S PATEXP=$$GET1^DIQ(2.312,Y_","_DFN_",",3,"I"),PATEXP=$S($L(PATEXP):PATEXP,1:" ")
"RTN","IBCNSUR4",155,0)
 S PATWHO=$$GET1^DIQ(2.312,Y_","_DFN_",",6),PATWHO=$S('$L(PATWHO):"UNK",1:$E(PATWHO,1,3))
"RTN","IBCNSUR4",156,0)
 S PATID=$$GET1^DIQ(2.312,Y_","_DFN_",",5.01),PATID=$S($L(PATID):PATID,1:" ")
"RTN","IBCNSUR4",157,0)
 S SRTREC=PATNAM_U_PATSID_U_PATEFF_U_PATEXP_U_PATWHO_U_PATID_U_PATSSN_U_DFNY
"RTN","IBCNSUR4",158,0)
 Q
"RTN","IBCNSUR4",159,0)
 ;
"RTN","IBCNSUR4",160,0)
BLDLN(ICTR,DFN,Y,SRTREC) ;EP
"RTN","IBCNSUR4",161,0)
 ; Also called from BLD^IBCNEILK2
"RTN","IBCNSUR4",162,0)
 ; Builds a line to display one Subscriber
"RTN","IBCNSUR4",163,0)
 ; Input:   ICTR                          - Selection Number
"RTN","IBCNSUR4",164,0)
 ;          DFN                           - DFN of the Subscriber to be displayed
"RTN","IBCNSUR4",165,0)
 ;          Y                             - Y of the 2.312 occurrence.
"RTN","IBCNSUR4",166,0)
 ;          ^TMP("IBCNSUR4A",$J,DFN,Y)    - Array of currently selected Subscribers
"RTN","IBCNSUR4",167,0)
 ; Output:  LINE    - Formatted for setting into the list display
"RTN","IBCNSUR4",168,0)
 N LINE,LINEI,XXN
"RTN","IBCNSUR4",169,0)
 S:$D(^TMP("IBCNSUR4A",$J,DFN,Y)) ICTR=ICTR_">"         ; Mark as selected
"RTN","IBCNSUR4",170,0)
 S LINE=$$SETSTR^VALM1(ICTR,"",1,4)                     ; Selection #
"RTN","IBCNSUR4",171,0)
 S LINE=$$SETSTR^VALM1($E($P(SRTREC,U,1),1,15),LINE,6,20)    ; Patient Name
"RTN","IBCNSUR4",172,0)
 S LINE=$$SETSTR^VALM1($S($P(SRTREC,U,7)=-9999:" ",1:$P(SRTREC,U,7)),LINE,22,25)            ; SSN
"RTN","IBCNSUR4",173,0)
 S LINE=$$SETSTR^VALM1($S($P(SRTREC,U,2)=-9999:" ",1:$E($P(SRTREC,U,2),1,20)),LINE,27,46)   ; Subscriber ID (first 20 chars)
"RTN","IBCNSUR4",174,0)
 S LINE=$$SETSTR^VALM1($S($P(SRTREC,U,3)=-9999:" ",1:$$DAT1^IBOUTL($P(SRTREC,U,3))),LINE,48,55)  ; Effective Date
"RTN","IBCNSUR4",175,0)
 S LINE=$$SETSTR^VALM1($S($P(SRTREC,U,4)=-9999:" ",1:$$DAT1^IBOUTL($P(SRTREC,U,4))),LINE,57,64)  ; Expiration Date
"RTN","IBCNSUR4",176,0)
 S LINE=$$SETSTR^VALM1($P(SRTREC,U,5),LINE,66,68)            ; Whose
"RTN","IBCNSUR4",177,0)
 S LINE=$$SETSTR^VALM1($S($P(SRTREC,U,6)=-9999:" ",1:$E($P(SRTREC,U,6),1,30)),LINE,71,100)            ; Patient ID
"RTN","IBCNSUR4",178,0)
 Q LINE
"RTN","IBCNSUR4",179,0)
 ;
"RTN","IBCNSUR4",180,0)
HELP ;EP
"RTN","IBCNSUR4",181,0)
 ; Help code
"RTN","IBCNSUR4",182,0)
 ; Input: None
"RTN","IBCNSUR4",183,0)
 D FULL^VALM1
"RTN","IBCNSUR4",184,0)
 S VALMBCK="R"
"RTN","IBCNSUR4",185,0)
 W @IOF,"A '>' after the Subscriber Selection number indicates that this Subscriber"
"RTN","IBCNSUR4",186,0)
 W !,"has already been selected."
"RTN","IBCNSUR4",187,0)
 Q
"RTN","IBCNSUR4",188,0)
 ;
"RTN","IBCNSUR4",189,0)
EXIT ;EP
"RTN","IBCNSUR4",190,0)
 ; Exit code
"RTN","IBCNSUR4",191,0)
 ; Input: None
"RTN","IBCNSUR4",192,0)
 K IBSORT,^TMP("IBCNSUR4",$J),^TMP("IBCNSUR4IX",$J)
"RTN","IBCNSUR4",193,0)
 D CLEAR^VALM1
"RTN","IBCNSUR4",194,0)
 Q
"RTN","IBCNSUR4",195,0)
 ;
"RTN","IBCNSUR4",196,0)
SEL ;EP
"RTN","IBCNSUR4",197,0)
 ; Protocol Action to de-select an already selected Subscriber
"RTN","IBCNSUR4",198,0)
 ; Input:   NUMSEL                    - Current number of selected Subscribers
"RTN","IBCNSUR4",199,0)
 ;          ^TMP("IBCNSUR4",$J)       - Current Array of displayed Subscribers
"RTN","IBCNSUR4",200,0)
 ;          ^TMP("IBCNSUR4IX",$J)     - Current Index of displayed Subscribers
"RTN","IBCNSUR4",201,0)
 ;          ^TMP("IBCNSUR4A,$J,DFN,Y) - Current Array of selected Subscribers
"RTN","IBCNSUR4",202,0)
 ;
"RTN","IBCNSUR4",203,0)
 ; Output:  NUMSEL                    - Updated number of selected Subscribers
"RTN","IBCNSUR4",204,0)
 ;          ^TMP("IBCNSUR4A,$J,DFN,Y) - Updated Array of selected Subscribers
"RTN","IBCNSUR4",205,0)
 ;          Selected Subscriber is removed from the worklist 
"RTN","IBCNSUR4",206,0)
 ;          Error message displayed (potentially)
"RTN","IBCNSUR4",207,0)
 N DFN,DFNS,DFNY,DIR,DIROUT,DIRUT,DLINE,DTOUT,DUOUT,ERROR,IX,LINE,PROMPT,Y
"RTN","IBCNSUR4",208,0)
 S VALMBCK="R",ERROR=0
"RTN","IBCNSUR4",209,0)
 ; 
"RTN","IBCNSUR4",210,0)
 ; First select the Subscriber(s) to be selected
"RTN","IBCNSUR4",211,0)
 S PROMPT="Select Subscriber(s)"
"RTN","IBCNSUR4",212,0)
 S DFNS=$$SELSUB(1,PROMPT,.DLINE,1,"IBCNSUR4IX")
"RTN","IBCNSUR4",213,0)
 I DFNS="" S VALMBCK="R" Q                 ; None Selected
"RTN","IBCNSUR4",214,0)
 F IX=1:1:$L(DFNS,",") D
"RTN","IBCNSUR4",215,0)
 . S DFNY=$P(DFNS,",",IX)
"RTN","IBCNSUR4",216,0)
 . S DFN=$P(DFNY,"~",1)
"RTN","IBCNSUR4",217,0)
 . S Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",218,0)
 . S LINE=$P(DLINE,",",IX)
"RTN","IBCNSUR4",219,0)
 . ;
"RTN","IBCNSUR4",220,0)
 . ; If currently selected, display an error message
"RTN","IBCNSUR4",221,0)
 . I $D(^TMP("IBCNSUR4A",$J,DFN,Y)) D  Q
"RTN","IBCNSUR4",222,0)
 . . W !,*7,">>>> # ",LINE," is currently selected."
"RTN","IBCNSUR4",223,0)
 . . S ERROR=1
"RTN","IBCNSUR4",224,0)
 . D MARK(1,DFNY,LINE,.NUMSEL)              ; Show the selection mark
"RTN","IBCNSUR4",225,0)
 D HDR                                      ; Update the header
"RTN","IBCNSUR4",226,0)
 D:ERROR PAUSE^VALM1
"RTN","IBCNSUR4",227,0)
 Q
"RTN","IBCNSUR4",228,0)
 ;
"RTN","IBCNSUR4",229,0)
UNSEL(SELECTED) ;EP
"RTN","IBCNSUR4",230,0)
 ; Protocol Action to de-select an already selected Subscriber
"RTN","IBCNSUR4",231,0)
 ; Input:
"RTN","IBCNSUR4",232,0)
 ; Optional, defaults to 0
"RTN","IBCNSUR4",233,0)
 ;   NUMSEL                    - Current number of selected Subscribers
"RTN","IBCNSUR4",234,0)
 ;   ^TMP("IBCNSUR4",$J)       - Current Array of displayed Subscribers
"RTN","IBCNSUR4",235,0)
 ;   ^TMP("IBCNSUR4S",$J)      - Current Array of selected Insurance Companies
"RTN","IBCNSUR4",236,0)
 ;   ^TMP("IBCNSUR4IX",$J)     - Current Index of displayed Subscribers
"RTN","IBCNSUR4",237,0)
 ;   ^TMP("IBCNSUR4A,$J,DFN,Y) - Current Array of selected Subscribers
"RTN","IBCNSUR4",238,0)
 ;
"RTN","IBCNSUR4",239,0)
 ; Output:  NUMSEL             - Current number of selected Subscribers
"RTN","IBCNSUR4",240,0)
 ;   ^TMP("IBCNSUR4A,$J,DFN,Y) - Updated Array of selected Subscribers
"RTN","IBCNSUR4",241,0)
 ;
"RTN","IBCNSUR4",242,0)
 ; Selected Subscriber is removed from the worklist 
"RTN","IBCNSUR4",243,0)
 ; Error message displayed (potentially)
"RTN","IBCNSUR4",244,0)
 N DFN,DFNS,DFNY,DIR,DIROUT,DIRUT,DLINE,DTOUT,DUOUT,ERROR,IX,LINE,MSG,PROMPT,WARRAY,Y
"RTN","IBCNSUR4",245,0)
 I '$D(SELECTED) D
"RTN","IBCNSUR4",246,0)
 . S SELECTED=0,WARRAY="IBCNSUR4IX"
"RTN","IBCNSUR4",247,0)
 E  S WARRAY="IBCNSUR4SIX"
"RTN","IBCNSUR4",248,0)
 S VALMBCK="R",ERROR=0
"RTN","IBCNSUR4",249,0)
 ;
"RTN","IBCNSUR4",250,0)
 ; First select the Subscriber(s) to be de-selected
"RTN","IBCNSUR4",251,0)
 S PROMPT="De-Select Subscriber(s)"
"RTN","IBCNSUR4",252,0)
 S MSG="Are you sure you want to De-Select "
"RTN","IBCNSUR4",253,0)
 S DFNS=$$SELSUB(1,PROMPT,.DLINE,1,WARRAY)
"RTN","IBCNSUR4",254,0)
 I DFNS="" S VALMBCK="R" Q                 ; None Selected
"RTN","IBCNSUR4",255,0)
 F IX=1:1:$L(DFNS,",") D
"RTN","IBCNSUR4",256,0)
 . S DFNY=$P(DFNS,",",IX)
"RTN","IBCNSUR4",257,0)
 . S DFN=$P(DFNY,"~",1)
"RTN","IBCNSUR4",258,0)
 . S Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",259,0)
 . S LINE=$P(DLINE,",",IX)
"RTN","IBCNSUR4",260,0)
 . ;
"RTN","IBCNSUR4",261,0)
 . ; If not currently selected, display an error message
"RTN","IBCNSUR4",262,0)
 . I '$D(^TMP("IBCNSUR4A",$J,DFN,Y)) D  Q
"RTN","IBCNSUR4",263,0)
 . . W !,*7,">>>> # ",LINE," is not currently selected. It cannot be de-selected."
"RTN","IBCNSUR4",264,0)
 . . S ERROR=1
"RTN","IBCNSUR4",265,0)
 . D MARK(0,DFNY,LINE,.NUMSEL)              ; De-Select the entry
"RTN","IBCNSUR4",266,0)
 D HDR                                     ; Update the header
"RTN","IBCNSUR4",267,0)
 D:ERROR PAUSE^VALM1
"RTN","IBCNSUR4",268,0)
 Q
"RTN","IBCNSUR4",269,0)
 ;
"RTN","IBCNSUR4",270,0)
MARK(WHICH,DFNY,LINE,NUMSEL)   ; Mark/Remove 'Selection' from a selected
"RTN","IBCNSUR4",271,0)
 ; Subscriber line
"RTN","IBCNSUR4",272,0)
 ; Input:   WHICH   - 0 - Remove 'Selection' mark
"RTN","IBCNSUR4",273,0)
 ;                    1 - Set 'Selection' mark
"RTN","IBCNSUR4",274,0)
 ;          DFNY    - DFN and Y of the entry to Mark/Remove 'In-Progress'
"RTN","IBCNSUR4",275,0)
 ;          LINE    - Line number being marked/unmarked
"RTN","IBCNSUR4",276,0)
 ;          WLIST   - Worklist, the user is selecting from.
"RTN","IBCNSUR4",277,0)
 ;          NUMSEL  - Current # of selected Subscriber
"RTN","IBCNSUR4",278,0)
 ;          ^TMP("IBCNSUR4A",$J)- Current array of selected Subscriber 
"RTN","IBCNSUR4",279,0)
 ; Output:  Subscriber is marked or unmarked as selected
"RTN","IBCNSUR4",280,0)
 ;          NUMSEL  - Current # of selected Subscribers
"RTN","IBCNSUR4",281,0)
 ;          ^TMP("IBCNSUR4A",$J)- Updated array of selected Subscribers 
"RTN","IBCNSUR4",282,0)
 ;
"RTN","IBCNSUR4",283,0)
 N TEXT,DFN,Y
"RTN","IBCNSUR4",284,0)
 S DFN=$P(DFNY,"~",1)
"RTN","IBCNSUR4",285,0)
 S Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",286,0)
 I WHICH D                                  ; Mark as selected
"RTN","IBCNSUR4",287,0)
 . S ^TMP("IBCNSUR4A",$J,DFN,Y)=""
"RTN","IBCNSUR4",288,0)
 . S TEXT=LINE_">",NUMSEL=NUMSEL+1
"RTN","IBCNSUR4",289,0)
 E  D                                       ; Mark as unselected
"RTN","IBCNSUR4",290,0)
 . K ^TMP("IBCNSUR4A",$J,DFN,Y)
"RTN","IBCNSUR4",291,0)
 . S TEXT=LINE,NUMSEL=NUMSEL-1
"RTN","IBCNSUR4",292,0)
 D FLDTEXT^VALM10(LINE,"CTR",TEXT)          ; Update display
"RTN","IBCNSUR4",293,0)
 D WRITE^VALM10(LINE)                       ; Redisplay line
"RTN","IBCNSUR4",294,0)
 Q
"RTN","IBCNSUR4",295,0)
 ;
"RTN","IBCNSUR4",296,0)
SHOWSEL ;EP
"RTN","IBCNSUR4",297,0)
 ; Protocol action used to display a listman template of the currently
"RTN","IBCNSUR4",298,0)
 ; selected Subscribers
"RTN","IBCNSUR4",299,0)
 ; Input:   NUMSEL                        - Current number of selected Subscribers
"RTN","IBCNSUR4",300,0)
 ;          ^TMP("IBCNSUR4A",$J,DFN,Y)    - Current Array of selected Subscribers
"RTN","IBCNSUR4",301,0)
 ; Output:  NUMSEL                        - Updated number of selected Subscribers
"RTN","IBCNSUR4",302,0)
 ;          ^TMP("IBCNSUR4A",$J,DFN,Y)    - Updated Array of selected Subscribers
"RTN","IBCNSUR4",303,0)
 S VALMBCK="R"
"RTN","IBCNSUR4",304,0)
 D EN^VALM("IBCN SUBSCRIBER SELECTED")
"RTN","IBCNSUR4",305,0)
 D HDR,BLD
"RTN","IBCNSUR4",306,0)
 Q
"RTN","IBCNSUR4",307,0)
 ;
"RTN","IBCNSUR4",308,0)
SELSUB(FULL,PROMPT,DLINE,MULT,WLIST)    ;EP
"RTN","IBCNSUR4",309,0)
 ; Select Subscriber(s) to perform an action upon
"RTN","IBCNSUR4",310,0)
 ; Input:   FULL                    - 1 - full screen mode, 0 otherwise
"RTN","IBCNSUR4",311,0)
 ;          PROMPT                  - Prompt to be displayed to the user
"RTN","IBCNSUR4",312,0)
 ;          MULT                    - 1 to allow multiple entry selection
"RTN","IBCNSUR4",313,0)
 ;                                    0 to only allow single entry selection
"RTN","IBCNSUR4",314,0)
 ;                                    Optional, defaults to 0
"RTN","IBCNSUR4",315,0)
 ;          WLIST                   - Worklist, the user is selecting from
"RTN","IBCNSUR4",316,0)
 ;          ^TMP("IBCNSUR4IX",$J)   - Index of displayed lines of the Subscriber
"RTN","IBCNSUR4",317,0)
 ;                                    Selector Template. 
"RTN","IBCNSUR4",318,0)
 ;                                    Only used when WLIST="IBCNSUR4IX"
"RTN","IBCNSUR4",319,0)
 ;          ^TMP("IBCNSUR4SIX",$J)  - Index of displayed lines of the Subscriber
"RTN","IBCNSUR4",320,0)
 ;                                    Selected Template
"RTN","IBCNSUR4",321,0)
 ;                                    Only used if WLIST is "IBCNSUR4IX"
"RTN","IBCNSUR4",322,0)
 ; Output:  DLINE                   - Comma delimited list of Line #(s) of the 
"RTN","IBCNSUR4",323,0)
 ;                                    selected Subscriber
"RTN","IBCNSUR4",324,0)
 ; Returns: IEN(s) - Comma delimited string or IENS for the selected Subscriber(s)
"RTN","IBCNSUR4",325,0)
 ;          Error message and "" DFNS if multi-selection and not allowed
"RTN","IBCNSUR4",326,0)
 N DFNY,DFNS,DIR,DIROUT,DIRUT,DTOUT,DUOUT,IX,VALMY,X,Y
"RTN","IBCNSUR4",327,0)
 S:'$D(MULT) MULT=0
"RTN","IBCNSUR4",328,0)
 S:'$D(WLIST) WLIST="IBCNSUR4"
"RTN","IBCNSUR4",329,0)
 D:FULL FULL^VALM1
"RTN","IBCNSUR4",330,0)
 S DLINE=$P($P($G(XQORNOD(0)),"^",4),"=",2)     ; User selection with action
"RTN","IBCNSUR4",331,0)
 S DLINE=$TR(DLINE,"/\; .",",,,,,")             ; Check for multi-selection
"RTN","IBCNSUR4",332,0)
 S DFNS=""
"RTN","IBCNSUR4",333,0)
 I 'MULT,DLINE["," D  Q ""                      ; Invalid multi-selection
"RTN","IBCNSUR4",334,0)
 . W !,*7,">>>> Only single entry selection is allowed"
"RTN","IBCNSUR4",335,0)
 . S DLINE=""
"RTN","IBCNSUR4",336,0)
 . K DIR
"RTN","IBCNSUR4",337,0)
 . D PAUSE^VALM1
"RTN","IBCNSUR4",338,0)
 ;
"RTN","IBCNSUR4",339,0)
 ; Let the user enter their selection(s)
"RTN","IBCNSUR4",340,0)
 D EN^VALM2($G(XQORNOD(0)),"O")                 ; ListMan generic selector
"RTN","IBCNSUR4",341,0)
 I '$D(VALMY) Q ""
"RTN","IBCNSUR4",342,0)
 S IX="",DLINE=""
"RTN","IBCNSUR4",343,0)
 F  D  Q:IX=""
"RTN","IBCNSUR4",344,0)
 . S IX=$O(VALMY(IX))
"RTN","IBCNSUR4",345,0)
 . Q:IX=""
"RTN","IBCNSUR4",346,0)
 . S DLINE=$S(DLINE="":IX,1:DLINE_","_IX)
"RTN","IBCNSUR4",347,0)
 . S DFNY=$G(^TMP(WLIST,$J,IX))
"RTN","IBCNSUR4",348,0)
 . S DFNS=$S(DFNS="":DFNY,1:DFNS_","_DFNY)
"RTN","IBCNSUR4",349,0)
 Q DFNS
"RTN","IBCNSUR4",350,0)
 ;
"RTN","IBCNSUR4",351,0)
INIT2 ;EP for Show Selections
"RTN","IBCNSUR4",352,0)
 ; Initialize variables and list array
"RTN","IBCNSUR4",353,0)
 ; Input: None
"RTN","IBCNSUR4",354,0)
 ; Output:  ^TMP("IBCNSUR4",$J) - Body lines to display
"RTN","IBCNSUR4",355,0)
 K ^TMP("IBCNSUR4S",$J),^TMP("IBCNSUR4SIX",$J)
"RTN","IBCNSUR4",356,0)
 D BLD2
"RTN","IBCNSUR4",357,0)
 Q
"RTN","IBCNSUR4",358,0)
 ;
"RTN","IBCNSUR4",359,0)
BLD2 ; Build listman body for Show Selections
"RTN","IBCNSUR4",360,0)
 ; Input:   None
"RTN","IBCNSUR4",361,0)
 ; Output:  VALMCNT   - Total number of lines displayed in the body
"RTN","IBCNSUR4",362,0)
 ;          ^TMP("IBCNSUR4S",$J)   - Body lines to display
"RTN","IBCNSUR4",363,0)
 ;          ^TMP("IBCNSUR4SIX",$J) - Index of Entry DFNs by display line
"RTN","IBCNSUR4",364,0)
 N DFN,DFNY,ICTR,LINE,SORTED,SRTKEY1,SRTKEY2,SRTKEY3,Y
"RTN","IBCNSUR4",365,0)
 ;
"RTN","IBCNSUR4",366,0)
 ; First sort the currently selected Subscribers into name order
"RTN","IBCNSUR4",367,0)
 S DFN=""
"RTN","IBCNSUR4",368,0)
 F  S DFN=$O(^TMP("IBCNSUR4A",$J,DFN)) Q:DFN=""  D
"RTN","IBCNSUR4",369,0)
 . S Y=""
"RTN","IBCNSUR4",370,0)
 . F  S Y=$O(^TMP("IBCNSUR4A",$J,DFN,Y)) Q:Y=""  D
"RTN","IBCNSUR4",371,0)
 . . S DFNY=DFN_"~"_Y
"RTN","IBCNSUR4",372,0)
 . . D GTSREC(DFNY,.SRTREC)
"RTN","IBCNSUR4",373,0)
 . . S SRTKEY1=$P(SRTREC,U,IBSORT)
"RTN","IBCNSUR4",374,0)
 . . S SRTKEY2=$P(SRTREC,U,1)   ; PATNAM
"RTN","IBCNSUR4",375,0)
 . . S SRTKEY3=$O(SORTED(SRTKEY1,SRTKEY2,""),-1)+1
"RTN","IBCNSUR4",376,0)
 . . S SORTED(SRTKEY1,SRTKEY2,SRTKEY3)=SRTREC
"RTN","IBCNSUR4",377,0)
 ;
"RTN","IBCNSUR4",378,0)
 ; Now build the lines to be displayed
"RTN","IBCNSUR4",379,0)
 S (ICTR,VALMCNT)=0,SRTKEY1=""
"RTN","IBCNSUR4",380,0)
 F  S SRTKEY1=$O(SORTED(SRTKEY1)) Q:SRTKEY1=""  D
"RTN","IBCNSUR4",381,0)
 . S SRTKEY2=""
"RTN","IBCNSUR4",382,0)
 . F  S SRTKEY2=$O(SORTED(SRTKEY1,SRTKEY2)) Q:SRTKEY2=""  D
"RTN","IBCNSUR4",383,0)
 . . S SRTKEY3=""
"RTN","IBCNSUR4",384,0)
 . . F  S SRTKEY3=$O(SORTED(SRTKEY1,SRTKEY2,SRTKEY3)) Q:SRTKEY3=""  D
"RTN","IBCNSUR4",385,0)
 . . . S SRTREC=SORTED(SRTKEY1,SRTKEY2,SRTKEY3)
"RTN","IBCNSUR4",386,0)
 . . . S DFNY=$P(SRTREC,U,8)
"RTN","IBCNSUR4",387,0)
 . . . S DFN=$P(DFNY,"~",1),Y=$P(DFNY,"~",2)
"RTN","IBCNSUR4",388,0)
 . . . S ICTR=ICTR+1
"RTN","IBCNSUR4",389,0)
 . . . S LINE=$$BLDLN(ICTR,DFN,Y,SRTREC)
"RTN","IBCNSUR4",390,0)
 . . . S VALMCNT=VALMCNT+1
"RTN","IBCNSUR4",391,0)
 . . . D SET^VALM10(VALMCNT,LINE,LINE)
"RTN","IBCNSUR4",392,0)
 . . . S ^TMP("IBCNSUR4SIX",$J,ICTR)=DFN_"~"_Y
"RTN","IBCNSUR4",393,0)
 ;
"RTN","IBCNSUR4",394,0)
 I VALMCNT=0 D
"RTN","IBCNSUR4",395,0)
 . S ^TMP("IBCNSUR4",$J,1,0)="No Selected Subscribers were found."
"RTN","IBCNSUR4",396,0)
 Q
"RTN","IBCNSUR4",397,0)
 ;
"RTN","IBCNSUR4",398,0)
EXIT2 ;EP for Show Selections
"RTN","IBCNSUR4",399,0)
 ; Exit code
"RTN","IBCNSUR4",400,0)
 ; Input: None
"RTN","IBCNSUR4",401,0)
 K ^TMP("IBCNSUR4S",$J),^TMP("IBCNSUR4SIX",$J)
"RTN","IBCNSUR4",402,0)
 D CLEAR^VALM1
"RTN","IBCNSUR4",403,0)
 Q
"RTN","IBCNSUR4",404,0)
 ;
"RTN","IBCNSUR4",405,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNSUR4",406,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNSUR4",407,0)
 ;
"RTN","IBCNSUR4",408,0)
 D FULL^VALM1 W !
"RTN","IBCNSUR4",409,0)
 W !,"Select the item to sort the subscriber records on the subscriber list screen."
"RTN","IBCNSUR4",410,0)
 S DIR(0)="SO^1:Patient Name;2:Subscriber ID;3:Effective Date;4:Date Expired;5:Whose;6:Patient ID"
"RTN","IBCNSUR4",411,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBSORT),"^",2)
"RTN","IBCNSUR4",412,0)
 D ^DIR K DIR
"RTN","IBCNSUR4",413,0)
 I 'Y G SELSORTX
"RTN","IBCNSUR4",414,0)
 S IBSORT=Y_"^"_Y(0)
"RTN","IBCNSUR4",415,0)
 ;
"RTN","IBCNSUR4",416,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNSUR4",417,0)
 D BLD,HDR
"RTN","IBCNSUR4",418,0)
 ;
"RTN","IBCNSUR4",419,0)
SELSORTX ;
"RTN","IBCNSUR4",420,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNSUR4",421,0)
 Q
"RTN","IBCNSUR4",422,0)
 ;
"RTN","IBCOMA")
0^19^B58613523
"RTN","IBCOMA",1,0)
IBCOMA ;ALB/CMS/JNM - IDENTIFY ACTIVE POLICIES W/NO EFFECTIVE DATE; 09-29-2015
"RTN","IBCOMA",2,0)
 ;;2.0;INTEGRATED BILLING;**103,528,549**;21-MAR-94;Build 54
"RTN","IBCOMA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOMA",4,0)
 Q
"RTN","IBCOMA",5,0)
EN ;Entry point from option
"RTN","IBCOMA",6,0)
 ; IBAIB - 1 (Patient Name Range) or 2 (Terminal Digit Range) sorting method
"RTN","IBCOMA",7,0)
 ; IBAPPTE - Ending Appointment Date for filtering
"RTN","IBCOMA",8,0)
 ; IBAPPTS - Starting Appointment Date for filtering
"RTN","IBCOMA",9,0)
 ; IBBDT - Beginning Verification Date for filtering
"RTN","IBCOMA",10,0)
 ; IBEDT - Ending Verification Date for filtering
"RTN","IBCOMA",11,0)
 ; IBEXCEL - 1 for Excel Format, 0 for Report Format
"RTN","IBCOMA",12,0)
 ; IBRF - First Patient Name or Terminal Digit, depending on sorting method
"RTN","IBCOMA",13,0)
 ; IBRL - Last Patient Name or Terminal Digit, depending on sorting method
"RTN","IBCOMA",14,0)
 ; IBPTYPE - 1 (Living Patients), 2 (Deceased Patients) or 3 (Both)
"RTN","IBCOMA",15,0)
 ; IBSIN - 1 (Verified Policies), 2 (Non-Verified Policies) or 3 (Both)
"RTN","IBCOMA",16,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,IBAIB,IBAPPTE,IBAPPTS,IBBDT,IBEDT,IBEXCEL,IBRF
"RTN","IBCOMA",17,0)
 N IBRL,IBPTYPE,IBQUIT,IBSIN,X,Y
"RTN","IBCOMA",18,0)
STRT ;
"RTN","IBCOMA",19,0)
 S (IBAIB,IBBDT,IBEDT,IBRF,IBRL,IBSIN,IBQUIT,IBAPPTS,IBAPPTE,IBEXCEL)=""
"RTN","IBCOMA",20,0)
 W !!,?10,"Identify Active Policies with NO Effective Date",!
"RTN","IBCOMA",21,0)
 S DIR("A",1)="Sort report by"
"RTN","IBCOMA",22,0)
 S DIR("A",2)="  1  - Patient Name Range"
"RTN","IBCOMA",23,0)
 S DIR("A",3)="  2  - Terminal Digit Range"
"RTN","IBCOMA",24,0)
 S DIR("A",4)="  "
"RTN","IBCOMA",25,0)
 S DIR(0)="SAXB^1:Patient Name;2:Terminal Digit"
"RTN","IBCOMA",26,0)
 S DIR("A")="  Select Number: ",DIR("B")="1",DIR("??")="^D ENH^IBCOMA"
"RTN","IBCOMA",27,0)
 D ^DIR
"RTN","IBCOMA",28,0)
 I +Y'>0 G EXIT
"RTN","IBCOMA",29,0)
 S IBAIB=+Y
"RTN","IBCOMA",30,0)
 K DIR,DIROUT,DTOUT,DUOUT,DIRUT
"RTN","IBCOMA",31,0)
 W !!
"RTN","IBCOMA",32,0)
 D @$S(IBAIB=1:"NR",1:"TR")
"RTN","IBCOMA",33,0)
 I IBQUIT=1 G EXIT
"RTN","IBCOMA",34,0)
 ;
"RTN","IBCOMA",35,0)
PATLIFE ; IB*2*549 - Prompt for Living/Deceased Patient filter
"RTN","IBCOMA",36,0)
 W !!
"RTN","IBCOMA",37,0)
 K DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOMA",38,0)
 S DIR("A",1)=$$WITEXT()
"RTN","IBCOMA",39,0)
 S DIR("A",2)="    1 - Living Patients"
"RTN","IBCOMA",40,0)
 S DIR("A",3)="    2 - Deceased Patients"
"RTN","IBCOMA",41,0)
 S DIR("A",4)="    3 - Both"
"RTN","IBCOMA",42,0)
 S DIR("A",5)=" "
"RTN","IBCOMA",43,0)
 S DIR(0)="SAXB^1:Living Patients;2:Deceased Patients;3:Both"
"RTN","IBCOMA",44,0)
 S DIR("A")="    Select Number: ",DIR("B")="1",DIR("??")="^D PATLIFEH^IBCOMA"
"RTN","IBCOMA",45,0)
 D ^DIR
"RTN","IBCOMA",46,0)
 I $D(DUOUT) G STRT
"RTN","IBCOMA",47,0)
 I +Y'>0 G EXIT
"RTN","IBCOMA",48,0)
 S IBPTYPE=Y
"RTN","IBCOMA",49,0)
 ;
"RTN","IBCOMA",50,0)
VER ;
"RTN","IBCOMA",51,0)
 W !!
"RTN","IBCOMA",52,0)
 K DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOMA",53,0)
 S DIR("A",1)=$$WITEXT()
"RTN","IBCOMA",54,0)
 S DIR("A",2)="    1  - Verified Policies"
"RTN","IBCOMA",55,0)
 S DIR("A",3)="    2  - Non-Verified Policies"
"RTN","IBCOMA",56,0)
 S DIR("A",4)="    3  - Both"
"RTN","IBCOMA",57,0)
 S DIR("A",5)="    "
"RTN","IBCOMA",58,0)
 S DIR(0)="SAXB^1:Verified Policies;2:Non-Verified Policies;3:Both"
"RTN","IBCOMA",59,0)
 S DIR("A")="      Select Number: ",DIR("B")="1",DIR("??")="^D ICH^IBCOMA" D ^DIR
"RTN","IBCOMA",60,0)
 I $D(DUOUT) G PATLIFE
"RTN","IBCOMA",61,0)
 I +Y'>0 G EXIT
"RTN","IBCOMA",62,0)
 S IBSIN=+Y
"RTN","IBCOMA",63,0)
 ;
"RTN","IBCOMA",64,0)
FILTYPE ; IB.2.0.549 added method
"RTN","IBCOMA",65,0)
 S (IBBDT,IBEDT,IBAPPTS,IBAPPTE)=0
"RTN","IBCOMA",66,0)
 K DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOMA",67,0)
 I IBSIN>1 G LADATE
"RTN","IBCOMA",68,0)
 W !!
"RTN","IBCOMA",69,0)
 S DIR("A",1)="Filter data by:"
"RTN","IBCOMA",70,0)
 S DIR("A",2)="  1 - Policy Verification Date"
"RTN","IBCOMA",71,0)
 S DIR("A",3)="  2 - Last Appointment Date"
"RTN","IBCOMA",72,0)
 S DIR("A",4)="  "
"RTN","IBCOMA",73,0)
 S DIR(0)="SAXB^1:Policy Verification Date;2:Last Appointment Date"
"RTN","IBCOMA",74,0)
 S DIR("A")="  Select Number: ",DIR("B")="1",DIR("??")="^D FILTYPEH^IBCOMA"
"RTN","IBCOMA",75,0)
 D ^DIR
"RTN","IBCOMA",76,0)
 I $D(DUOUT) G VER
"RTN","IBCOMA",77,0)
 I +Y'>0 G EXIT
"RTN","IBCOMA",78,0)
 I Y=2 G LADATE
"RTN","IBCOMA",79,0)
 ;
"RTN","IBCOMA",80,0)
PVDATE ;
"RTN","IBCOMA",81,0)
 N UPMOD
"RTN","IBCOMA",82,0)
 I '$$GETDATES("Policy Verification",.IBBDT,.IBEDT) S UPMOD=$S(+$G(IBSIN)>1:"VER",1:"FILTYPE") G @UPMOD
"RTN","IBCOMA",83,0)
 I IBQUIT=1 G EXIT
"RTN","IBCOMA",84,0)
 G FORMAT
"RTN","IBCOMA",85,0)
 ;
"RTN","IBCOMA",86,0)
LADATE ;
"RTN","IBCOMA",87,0)
 ;
"RTN","IBCOMA",88,0)
 ; IB*2*549 - Prompt for Last Appointment Date Range
"RTN","IBCOMA",89,0)
 N UPMOD
"RTN","IBCOMA",90,0)
 W !!
"RTN","IBCOMA",91,0)
 I '$$GETDATES("Last Appointment",.IBAPPTS,.IBAPPTE) S UPMOD=$S(+$G(IBSIN)>1:"VER",1:"FILTYPE") G @UPMOD
"RTN","IBCOMA",92,0)
 I IBQUIT=1 G EXIT
"RTN","IBCOMA",93,0)
 ;
"RTN","IBCOMA",94,0)
FORMAT ;  Prompt for Excel or Report Format
"RTN","IBCOMA",95,0)
 W !
"RTN","IBCOMA",96,0)
 K DIR,DIROUT,DTOUT,DUOUT,DIRUT
"RTN","IBCOMA",97,0)
 S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCOMA",98,0)
 S DIR("A")="(E)xcel Format or (R)eport Format: "
"RTN","IBCOMA",99,0)
 S DIR("B")="Report",DIR("??")="^D FORMATH^IBCOMA"
"RTN","IBCOMA",100,0)
 D ^DIR
"RTN","IBCOMA",101,0)
 S IBEXCEL=$S(Y="E":1,Y="R":0,1:-1)
"RTN","IBCOMA",102,0)
 I IBEXCEL<0 G EXIT
"RTN","IBCOMA",103,0)
 ;
"RTN","IBCOMA",104,0)
 W !!
"RTN","IBCOMA",105,0)
 D QUE
"RTN","IBCOMA",106,0)
 ;
"RTN","IBCOMA",107,0)
EXIT ;
"RTN","IBCOMA",108,0)
 Q
"RTN","IBCOMA",109,0)
 ;
"RTN","IBCOMA",110,0)
WITEXT() ;
"RTN","IBCOMA",111,0)
 Q "  Within "_$S(IBAIB=1:"Patient Name",1:"Terminal Digit")_" Include:"
"RTN","IBCOMA",112,0)
 ;
"RTN","IBCOMA",113,0)
FORMATH ; Excel or Report Format Help
"RTN","IBCOMA",114,0)
 W !,?5,"Enter E to Export data in a format readable by Microsoft Excel."
"RTN","IBCOMA",115,0)
 W !,?5,"Enter R to display output in Report format."
"RTN","IBCOMA",116,0)
 Q
"RTN","IBCOMA",117,0)
 ;
"RTN","IBCOMA",118,0)
NR ; Ask Name Range
"RTN","IBCOMA",119,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOMA",120,0)
NRR S DIR(0)="FO",DIR("B")="FIRST",DIR("A")="  START WITH PATIENT NAME"
"RTN","IBCOMA",121,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOMA",122,0)
 S:Y="FIRST" Y="A" S IBRF=Y
"RTN","IBCOMA",123,0)
 S DIR(0)="FO",DIR("B")="LAST",DIR("A")="  GO TO PATIENT NAME"
"RTN","IBCOMA",124,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOMA",125,0)
 S:Y="LAST" Y="zzzzzz" S IBRL=Y
"RTN","IBCOMA",126,0)
 I $G(IBRL)']$G(IBRF) W !!,?5,"* The Go to Patient Name must follow after the Start with Name. *",! G NRR
"RTN","IBCOMA",127,0)
 Q
"RTN","IBCOMA",128,0)
 ;
"RTN","IBCOMA",129,0)
TR ; Ask Terminal Digit Range
"RTN","IBCOMA",130,0)
 N DIR,DIRUT,DUOUT,DTOUT,X,Y
"RTN","IBCOMA",131,0)
 S DIR(0)="FO^1:9^K:X'?1.9N X"
"RTN","IBCOMA",132,0)
 S DIR("?")="Enter up to 9 digits of the Terminal Digit to include in Report"
"RTN","IBCOMA",133,0)
 S DIR("B")="0000",DIR("A")="  Start with Terminal Digit"
"RTN","IBCOMA",134,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOMA",135,0)
 S IBRF=$E((Y_"000000000"),1,9)
"RTN","IBCOMA",136,0)
 S DIR("B")="9999",DIR("A")="  GO to Terminal Digit"
"RTN","IBCOMA",137,0)
 D ^DIR I ($D(DTOUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCOMA",138,0)
 S IBRL=$E((Y_"999999999"),1,9)
"RTN","IBCOMA",139,0)
 I IBRF>IBRL W !!,?5,"* The Go to Terminal Digit must follow after the Start with Digit. *",! G TR
"RTN","IBCOMA",140,0)
 Q
"RTN","IBCOMA",141,0)
 ;
"RTN","IBCOMA",142,0)
PATLIFEH ; Living/Deceased/Both patient filter help Text 
"RTN","IBCOMA",143,0)
 W !!,?5,"Enter 1 to only display Living Patients."
"RTN","IBCOMA",144,0)
 W !,?5,"Enter 2 to only display Deceased Patients."
"RTN","IBCOMA",145,0)
 W !,?5,"Enter 3 to display both Living and Deceased Patients."
"RTN","IBCOMA",146,0)
 Q
"RTN","IBCOMA",147,0)
 ;
"RTN","IBCOMA",148,0)
FILTYPEH ; Filter by Verification Date or Last Appointment Date Help Text
"RTN","IBCOMA",149,0)
 W !!,?5,"Enter 1 to only display policies with a Verification Date falling"
"RTN","IBCOMA",150,0)
 W !,?11,"within a specified date range."
"RTN","IBCOMA",151,0)
 W !,?5,"Enter 2 to only display patients with a Last Appointment Date falling"
"RTN","IBCOMA",152,0)
 W !,?11,"within a specified date range."
"RTN","IBCOMA",153,0)
 Q
"RTN","IBCOMA",154,0)
 ;
"RTN","IBCOMA",155,0)
GETDATES(TEXT,STRTDATE,ENDDATE) ; Ask Date Range
"RTN","IBCOMA",156,0)
 K DIR,DIROUT,DTOUT,DUOUT,DIRUT
"RTN","IBCOMA",157,0)
 N %DT,X,Y
"RTN","IBCOMA",158,0)
 W !!,"      Please enter ",TEXT," Dates:"
"RTN","IBCOMA",159,0)
 ;
"RTN","IBCOMA",160,0)
VRBDT ; - get begin date
"RTN","IBCOMA",161,0)
 S (STRTDATE,ENDDATE)=""
"RTN","IBCOMA",162,0)
 S %DT="AEX",%DT("A")="        Start with DATE: " D ^%DT K %DT G VRQ:Y<0 S STRTDATE=Y
"RTN","IBCOMA",163,0)
 ;
"RTN","IBCOMA",164,0)
VREDT ; - get ending date
"RTN","IBCOMA",165,0)
 S %DT="EX" R !,"        Go to DATE: ",X:DTIME S:X=" " X=STRTDATE G VRQ:(X="")!(X["^") D ^%DT G VREDT:Y<0 S ENDDATE=Y I Y<STRTDATE W *7," ??",!,"ENDING DATE must follow BEGINNING DATE." G VRBDT
"RTN","IBCOMA",166,0)
 ;  
"RTN","IBCOMA",167,0)
VRQ ;
"RTN","IBCOMA",168,0)
 I (STRTDATE="")!(ENDDATE="") W "     <Date Range not entered>" Q 0
"RTN","IBCOMA",169,0)
 Q 1
"RTN","IBCOMA",170,0)
 ;
"RTN","IBCOMA",171,0)
ENH ; Sort help Text
"RTN","IBCOMA",172,0)
 W !!,?5,"Enter 1 to search by a Patient Name Range. (i.e. ADAMS to ADAMSZ)"
"RTN","IBCOMA",173,0)
 W !!,?5,"Enter 2 to search by Terminal Digit.  The output will be sorted"
"RTN","IBCOMA",174,0)
 W !?5,"by the 8th and 9th digits and then the 6th and 7th digits"
"RTN","IBCOMA",175,0)
 W !?5,"of the Patient's SSN.",!
"RTN","IBCOMA",176,0)
 Q
"RTN","IBCOMA",177,0)
 ;
"RTN","IBCOMA",178,0)
ICH ; Search criteria help Text
"RTN","IBCOMA",179,0)
 W !!,?5,"Enter 1 to list active policies by Verification Date Range"
"RTN","IBCOMA",180,0)
 W !,?15,"(i.e. Sort Date By: 10-1-96  Go to Date: 01-1-97)"
"RTN","IBCOMA",181,0)
 W !,?5,"Enter 2 to list active policies with no Verification Date."
"RTN","IBCOMA",182,0)
 W !,?5,"Enter 3 to include active policies with or without a Verification Date."
"RTN","IBCOMA",183,0)
 Q
"RTN","IBCOMA",184,0)
QUE ; Ask Device
"RTN","IBCOMA",185,0)
 N POP,%ZIS,ZTRTN,ZTSAVE,ZTDESC
"RTN","IBCOMA",186,0)
 W !,?10,"You may want to queue this report!"
"RTN","IBCOMA",187,0)
 W !,?10,"Report requires 132 columns.",!
"RTN","IBCOMA",188,0)
 S %ZIS="QM" D ^%ZIS G:POP QUEQ
"RTN","IBCOMA",189,0)
 I $D(IO("Q")) K IO("Q") D  G QUEQ
"RTN","IBCOMA",190,0)
 . S ZTRTN="BEG^IBCOMA1",ZTSAVE("IBRF")="",ZTSAVE("IBRL")=""
"RTN","IBCOMA",191,0)
 . S ZTSAVE("IBAIB")="",ZTSAVE("IBBDT")="",ZTSAVE("IBEDT")="",ZTSAVE("IBSIN")=""
"RTN","IBCOMA",192,0)
 . S ZTSAVE("IBPTYPE")="",ZTSAVE("IBAPPTS")="",ZTSAVE("IBAPPTE")="",ZTSAVE("IBEXCEL")=""
"RTN","IBCOMA",193,0)
 . S ZTDESC="IB - Identify Active Policies w/no Effective Date"
"RTN","IBCOMA",194,0)
 . D ^%ZTLOAD
"RTN","IBCOMA",195,0)
 . K ZTSK
"RTN","IBCOMA",196,0)
 . D HOME^%ZIS
"RTN","IBCOMA",197,0)
 ;
"RTN","IBCOMA",198,0)
 U IO
"RTN","IBCOMA",199,0)
 I $E(IOST,1,2)["C-" W !!,?15,"... One Moment Please ..."
"RTN","IBCOMA",200,0)
 D BEG^IBCOMA1
"RTN","IBCOMA",201,0)
 ;
"RTN","IBCOMA",202,0)
QUEQ ; EXIT CLEAN-UP
"RTN","IBCOMA",203,0)
 W !
"RTN","IBCOMA",204,0)
 D ^%ZISC
"RTN","IBCOMA",205,0)
 K IBAIB,IBRF,IBRL,IBSIN,IBPTYPE,IBAPPTS,IBAPPTE,IBEXCEL,^TMP("IBCOMA",$J)
"RTN","IBCOMA",206,0)
 Q
"RTN","IBCOMA",207,0)
 ;IBCOMA
"RTN","IBCOMA1")
0^20^B81021832
"RTN","IBCOMA1",1,0)
IBCOMA1 ;ALB/CMS/JNM - IDENTIFY ACTIVE POLICIES W/NO EFFECTIVE DATE (CON'T) ; 09-29-2015
"RTN","IBCOMA1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,516,528,549**;21-MAR-94;Build 54
"RTN","IBCOMA1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOMA1",4,0)
 Q
"RTN","IBCOMA1",5,0)
BEG ; Entry to run Active Policies w/no Effective Date Report
"RTN","IBCOMA1",6,0)
 ; Input variables:
"RTN","IBCOMA1",7,0)
 ; IBAIB    - Required.    How to sort
"RTN","IBCOMA1",8,0)
 ;            1= Patient Name Range      2= Terminal Digit Range
"RTN","IBCOMA1",9,0)
 ; IBSIN    - Required.   Include Active Policies with
"RTN","IBCOMA1",10,0)
 ;            1= Verification Date  2= No Verification Date 3= Both
"RTN","IBCOMA1",11,0)
 ;
"RTN","IBCOMA1",12,0)
 ; IBRF     - Required.  Name or Terminal Digit Range Start value
"RTN","IBCOMA1",13,0)
 ; IBRL     - Required.  Name or Terminal Digit Range Go to value
"RTN","IBCOMA1",14,0)
 ; IBBDT    - Optional.  Beginning Verification Date Range
"RTN","IBCOMA1",15,0)
 ; IBEDT    - Optional.  Ending Verification Date Range
"RTN","IBCOMA1",16,0)
 ; IBEXCEL  - 1 = Excel Format
"RTN","IBCOMA1",17,0)
 ;
"RTN","IBCOMA1",18,0)
 ; IB*2*549 - New filter variables
"RTN","IBCOMA1",19,0)
 ; IBPTYPE  - Living/Deceased/Both filter ;
"RTN","IBCOMA1",20,0)
 ; IBAPPTS  - Last Appointment Date Range Start
"RTN","IBCOMA1",21,0)
 ; IBAPPTE  - Last Appointment Date Range End
"RTN","IBCOMA1",22,0)
 ;
"RTN","IBCOMA1",23,0)
 N APPTDATA,CAPPT,CDOD,CGRP,CINS,CLVBY,CLVDAT,CSSN,DFN,IBC,IBC0,IBCDA
"RTN","IBCOMA1",24,0)
 N IBCDA0,IBCDA1,IBI,IBPAGE,IBQUIT,IBTD,IBTMP,IBX,IDX,LASTAPPT,LASTVER
"RTN","IBCOMA1",25,0)
 N LVDATE,MAXGRP,MAXINS,MAXPT,MAXRPT,MAXVERBY,VA,VADM,VAERR,X,Y
"RTN","IBCOMA1",26,0)
 ;
"RTN","IBCOMA1",27,0)
 ; Set starting max field sizes to length of header text
"RTN","IBCOMA1",28,0)
 F IDX=1:1:2 S MAXPT(IDX)=12,MAXINS(IDX)=13,MAXGRP(IDX)=9,MAXVERBY(IDX)=5
"RTN","IBCOMA1",29,0)
 K ^TMP("IBCOMA",$J)
"RTN","IBCOMA1",30,0)
 S IBPAGE=0,IBQUIT=0
"RTN","IBCOMA1",31,0)
 ;
"RTN","IBCOMA1",32,0)
 ; Set up filter data for the call to SDAPI^SDAMA301 for IB*2*549
"RTN","IBCOMA1",33,0)
 I IBAPPTS>0 S APPTDATA(1)=IBAPPTS_";"_IBAPPTE
"RTN","IBCOMA1",34,0)
 S APPTDATA("FLDS")=1                       ; Return Appt Date/Time Data
"RTN","IBCOMA1",35,0)
 S APPTDATA("MAX")=-1                       ; Return Last Appt
"RTN","IBCOMA1",36,0)
 K ^TMP($J,"SDAMA301")
"RTN","IBCOMA1",37,0)
 ;
"RTN","IBCOMA1",38,0)
 S IBC=0 F  S IBC=$O(^DPT("AB",IBC)) Q:'IBC  D
"RTN","IBCOMA1",39,0)
 . S IBC0=$G(^DIC(36,IBC,0))
"RTN","IBCOMA1",40,0)
 . ;
"RTN","IBCOMA1",41,0)
 . ; If company inactive quit
"RTN","IBCOMA1",42,0)
 . Q:$P(IBC0,U,1)=""
"RTN","IBCOMA1",43,0)
 . Q:$P(IBC0,U,5)=1
"RTN","IBCOMA1",44,0)
 . S DFN=0 F  S DFN=$O(^DPT("AB",IBC,DFN)) Q:'DFN  D
"RTN","IBCOMA1",45,0)
 . . K VA,VADM,VAERR
"RTN","IBCOMA1",46,0)
 . . D DEM^VADPT
"RTN","IBCOMA1",47,0)
 . . ;
"RTN","IBCOMA1",48,0)
 . . ; IB*2*549 If Pt. deceased and not showing deceased patients quit 
"RTN","IBCOMA1",49,0)
 . . I IBPTYPE=1,($G(VADM(6))>0) Q
"RTN","IBCOMA1",50,0)
 . . ;
"RTN","IBCOMA1",51,0)
 . . ; IB*2*549 If Pt. not deceased and not showing living patients quit 
"RTN","IBCOMA1",52,0)
 . . I IBPTYPE=2,($G(VADM(6))'>0) Q
"RTN","IBCOMA1",53,0)
 . . S VADM(1)=$P($G(VADM(1)),U,1)
"RTN","IBCOMA1",54,0)
 . . ;
"RTN","IBCOMA1",55,0)
 . . ; I Pt. name out of range quit
"RTN","IBCOMA1",56,0)
 . . Q:VADM(1)=""
"RTN","IBCOMA1",57,0)
 . . I IBAIB=1,VADM(1)]IBRL Q
"RTN","IBCOMA1",58,0)
 . . I IBAIB=1,IBRF]VADM(1) Q
"RTN","IBCOMA1",59,0)
 . . ;
"RTN","IBCOMA1",60,0)
 . . ; I Terminal Digit out of range quit
"RTN","IBCOMA1",61,0)
 . . I IBAIB=2 S IBTD=$$TERMDG^IBCONS2(DFN) S:IBTD="" IBTD="000000000" I (+IBTD>IBRL)!(IBRF>+IBTD) Q
"RTN","IBCOMA1",62,0)
 . . ;
"RTN","IBCOMA1",63,0)
 . . ; Fix subscript error if terminal digit is null
"RTN","IBCOMA1",64,0)
 . . I IBAIB=2,IBTD="" S IBTD=" "
"RTN","IBCOMA1",65,0)
 . . ;
"RTN","IBCOMA1",66,0)
 . . ; IB*2*549 Filter on last appointment date using ICR# 4433
"RTN","IBCOMA1",67,0)
 . . S APPTDATA(4)=DFN
"RTN","IBCOMA1",68,0)
 . . I $$SDAPI^SDAMA301(.APPTDATA)>0 D
"RTN","IBCOMA1",69,0)
 . . . S LASTAPPT=@$Q(^TMP($J,"SDAMA301"))
"RTN","IBCOMA1",70,0)
 . . . K ^TMP($J,"SDAMA301")
"RTN","IBCOMA1",71,0)
 . . E  S LASTAPPT=0 I IBAPPTS>0 Q  ; Filtering on Appt Date but no date in range
"RTN","IBCOMA1",72,0)
 . . ;
"RTN","IBCOMA1",73,0)
 . . S IBCDA=0 F  S IBCDA=$O(^DPT("AB",IBC,DFN,IBCDA)) Q:'IBCDA  D
"RTN","IBCOMA1",74,0)
 . . . ;IB*2.0*516/TAZ - Retrieve data from HIPAA compliant fields.
"RTN","IBCOMA1",75,0)
 . . . ;S IBCDA0=$G(^DPT(DFN,.312,IBCDA,0))  ;516 - baa
"RTN","IBCOMA1",76,0)
 . . . S IBCDA0=$$ZND^IBCNS1(DFN,IBCDA)  ;516 - baa
"RTN","IBCOMA1",77,0)
 . . . ;
"RTN","IBCOMA1",78,0)
 . . . ; I Effective Date populated quit
"RTN","IBCOMA1",79,0)
 . . . Q:$P(IBCDA0,U,8)
"RTN","IBCOMA1",80,0)
 . . . ;
"RTN","IBCOMA1",81,0)
 . . . ; I Expiration Date entered and expired quit
"RTN","IBCOMA1",82,0)
 . . . I $P(IBCDA0,U,4),$P(IBCDA0,U,4)'>DT Q
"RTN","IBCOMA1",83,0)
 . . . ;
"RTN","IBCOMA1",84,0)
 . . . ; Sorting by verification date or no date check
"RTN","IBCOMA1",85,0)
 . . . S IBCDA1=$G(^DPT(DFN,.312,IBCDA,1))
"RTN","IBCOMA1",86,0)
 . . . S LVDATE=+$P($P(IBCDA1,U,3),".",1)
"RTN","IBCOMA1",87,0)
 . . . I IBSIN=1,LVDATE=0 Q
"RTN","IBCOMA1",88,0)
 . . . I IBSIN=1,IBBDT>0,(LVDATE<IBBDT)!(LVDATE>IBEDT) Q
"RTN","IBCOMA1",89,0)
 . . . I IBSIN=2,LVDATE>0 Q
"RTN","IBCOMA1",90,0)
 . . . I IBSIN=3,LVDATE>0,IBBDT>0,(LVDATE<IBBDT)!(LVDATE>IBEDT) Q
"RTN","IBCOMA1",91,0)
 . . . ;
"RTN","IBCOMA1",92,0)
 . . . ; Set data line for global
"RTN","IBCOMA1",93,0)
 . . . ;S IBTMP(1)=PT NAME^SSN^DATE OF DEATH^LAST APPT DATE
"RTN","IBCOMA1",94,0)
 . . . ;S IBTMP(2)=INSURANCE NAME
"RTN","IBCOMA1",95,0)
 . . . ;S IBTMP(3)=VERIFICATION DATE^LAST VERIFIED BY^GROUP NUMBER
"RTN","IBCOMA1",96,0)
 . . . ;
"RTN","IBCOMA1",97,0)
 . . . S IBTMP(1)=VADM(1)_U_$E(VADM(2),6,9)_U_$$FMTE^XLFDT($P(VADM(6),U,1),"2ZD")
"RTN","IBCOMA1",98,0)
 . . . S IBTMP(1)=IBTMP(1)_U_$$FMTE^XLFDT(LASTAPPT,"2ZD")
"RTN","IBCOMA1",99,0)
 . . . S IBTMP(2)=$P(IBC0,U,1)
"RTN","IBCOMA1",100,0)
 . . . S LASTVER=$P(IBCDA1,U,4)
"RTN","IBCOMA1",101,0)
 . . . I LASTVER'="" S LASTVER=$P($G(^VA(200,LASTVER,0)),U)
"RTN","IBCOMA1",102,0)
 . . . S IBTMP(3)=$$FMTE^XLFDT(LVDATE,"2ZD")_U_LASTVER_U_$P(IBCDA0,U,3)
"RTN","IBCOMA1",103,0)
 . . . ;
"RTN","IBCOMA1",104,0)
 . . . ; Set variable IBI for Verified=1 or Non verified=2 
"RTN","IBCOMA1",105,0)
 . . . S IBI=$S(+$P(IBCDA1,U,3):1,1:2)
"RTN","IBCOMA1",106,0)
 . . . I 'IBEXCEL D
"RTN","IBCOMA1",107,0)
 . . . . D SETMAX(VADM(1),.MAXPT,IBI),SETMAX($P(IBC0,U,1),.MAXINS,IBI)
"RTN","IBCOMA1",108,0)
 . . . . D SETMAX(LASTVER,.MAXVERBY,IBI),SETMAX($P(IBCDA0,U,3),.MAXGRP,IBI)
"RTN","IBCOMA1",109,0)
 . . . ;
"RTN","IBCOMA1",110,0)
 . . . ; Set Global array
"RTN","IBCOMA1",111,0)
 . . . S ^TMP("IBCOMA",$J,IBI,$S(IBAIB=2:+IBTD,1:VADM(1)),DFN)=IBTMP(1)
"RTN","IBCOMA1",112,0)
 . . . S ^TMP("IBCOMA",$J,IBI,$S(IBAIB=2:+IBTD,1:VADM(1)),DFN,IBC)=IBTMP(2)
"RTN","IBCOMA1",113,0)
 . . . S ^TMP("IBCOMA",$J,IBI,$S(IBAIB=2:+IBTD,1:VADM(1)),DFN,IBC,IBCDA)=IBTMP(3)
"RTN","IBCOMA1",114,0)
 I 'IBEXCEL D CALCCOLS
"RTN","IBCOMA1",115,0)
 I '$D(^TMP("IBCOMA",$J)) D  G QUEQ
"RTN","IBCOMA1",116,0)
 . D HD(1)
"RTN","IBCOMA1",117,0)
 . W !!,"** NO RECORDS FOUND **"
"RTN","IBCOMA1",118,0)
 . D ASK^IBCOMC2
"RTN","IBCOMA1",119,0)
 D WRT
"RTN","IBCOMA1",120,0)
 W !!,"** END OF REPORT **",!
"RTN","IBCOMA1",121,0)
 ;
"RTN","IBCOMA1",122,0)
QUEQ ; Exit clean-UP
"RTN","IBCOMA1",123,0)
 W !
"RTN","IBCOMA1",124,0)
 D ^%ZISC
"RTN","IBCOMA1",125,0)
 K IBAIB,IBAPPTE,IBAPPTS,IBEXCEL,IBPTYPE,IBRF,IBRL,IBSIN,IBTMP,VA,VADM,VAERR,^TMP("IBCOMA",$J)
"RTN","IBCOMA1",126,0)
 Q
"RTN","IBCOMA1",127,0)
 ;
"RTN","IBCOMA1",128,0)
HD(IBA) ; Write Heading
"RTN","IBCOMA1",129,0)
 ; Input:   IBA         - 1 - Header for non-verified policies
"RTN","IBCOMA1",130,0)
 ;                        2 - Header for verified policies
"RTN","IBCOMA1",131,0)
 ;          CAPPT(IBA)  - Starting Column Position for the 'Last Apt' Column
"RTN","IBCOMA1",132,0)
 ;          CDOD(IBA)   - Starting Column Position for the 'DoD' Column
"RTN","IBCOMA1",133,0)
 ;          CGRP(IBA)   - Starting Column Position for the 'Group No.' Column
"RTN","IBCOMA1",134,0)
 ;          CINS(IBA)   - Starting Column Position for the 'Insurance Co.' Column
"RTN","IBCOMA1",135,0)
 ;          CSSN(IBA)   - Starting Column Position for the 'SSN' Column
"RTN","IBCOMA1",136,0)
 ;          CLVDAT(IBA) - Starting Column Position for the 'Last VC' Column
"RTN","IBCOMA1",137,0)
 ;          CLVBY(IBA)  - Starting Column Position for the 'VC By' Column
"RTN","IBCOMA1",138,0)
 ;          IBPAGE      - Current Page Number
"RTN","IBCOMA1",139,0)
 ;          MAXRPT(IBA) - Maximum number of characters in column header line
"RTN","IBCOMA1",140,0)
 ; Output:  IBPAGE      - Updated Page Number
"RTN","IBCOMA1",141,0)
 ;
"RTN","IBCOMA1",142,0)
 ; IB*2.0*549 changed include Appoint Date filtering and
"RTN","IBCOMA1",143,0)
 ;   dynamic column width based on actual data sizes
"RTN","IBCOMA1",144,0)
 I IBEXCEL D  I 1
"RTN","IBCOMA1",145,0)
 . D PGHD(0)
"RTN","IBCOMA1",146,0)
 . W !!,"Patient Name^SSN^Insurance Co.^Group No.^Last VC^VC By^Last Apt^DoD"
"RTN","IBCOMA1",147,0)
 E  D
"RTN","IBCOMA1",148,0)
 . S IBPAGE=IBPAGE+1
"RTN","IBCOMA1",149,0)
 . D PGHD(IBPAGE)
"RTN","IBCOMA1",150,0)
 . W !!,"Patient Name",?CSSN(IBA),"SSN",?CINS(IBA),"Insurance Co.",?CGRP(IBA),"Group No."
"RTN","IBCOMA1",151,0)
 . I IBA=1 W ?CLVDAT(IBA),"Last VC",?CLVBY(IBA),"VC By"
"RTN","IBCOMA1",152,0)
 . W ?CAPPT(IBA),"Last Apt",?CDOD(IBA),"DoD"
"RTN","IBCOMA1",153,0)
 . W !
"RTN","IBCOMA1",154,0)
 . F IBX=1:1:MAXRPT(IBA) W "="
"RTN","IBCOMA1",155,0)
 Q
"RTN","IBCOMA1",156,0)
 ;
"RTN","IBCOMA1",157,0)
PGHD(IBPAGE) ; Print Report Page Header
"RTN","IBCOMA1",158,0)
 ; Input:   IBPAGE  - Current Page Number, 0 if exporting to Excel
"RTN","IBCOMA1",159,0)
 ;          IBAIB   - 1 Sorting by Patient Name, 2 - Sorting by Terminal Digit
"RTN","IBCOMA1",160,0)
 ;          IBAPPTE - Internal Appointment Date Range End
"RTN","IBCOMA1",161,0)
 ;                    0 if no Appointment Date Range filter
"RTN","IBCOMA1",162,0)
 ;          IBAPPTS - Internal Appointment Date Range Start
"RTN","IBCOMA1",163,0)
 ;                    0 if no Appointment Date Range filter
"RTN","IBCOMA1",164,0)
 ;          IBBDT   - Internal Verification Start date for Verification filter
"RTN","IBCOMA1",165,0)
 ;                    Null if no Verification filter
"RTN","IBCOMA1",166,0)
 ;          IBEDT   - Internal Verification End date for Verification filter
"RTN","IBCOMA1",167,0)
 ;                    Null if no Verification filter
"RTN","IBCOMA1",168,0)
 ;          IBRF    - "A" - First Patient Name, otherwise start of range filter
"RTN","IBCOMA1",169,0)
 ;          IBRL    - End of range filter
"RTN","IBCOMA1",170,0)
 ;
"RTN","IBCOMA1",171,0)
 N IBHDT
"RTN","IBCOMA1",172,0)
 S IBHDT=$$FMTE^XLFDT($$NOW^XLFDT,"Z")
"RTN","IBCOMA1",173,0)
 W:IBPAGE @IOF
"RTN","IBCOMA1",174,0)
 W:'IBPAGE !!
"RTN","IBCOMA1",175,0)
 W "Active Policies with no Effective Date Report "
"RTN","IBCOMA1",176,0)
 I 'IBPAGE D
"RTN","IBCOMA1",177,0)
 . W "          Run On: ",IBHDT
"RTN","IBCOMA1",178,0)
 E  D
"RTN","IBCOMA1",179,0)
 . W ?IOM-34,IBHDT,?IOM-10,"Page: ",IBPAGE
"RTN","IBCOMA1",180,0)
 I IBPAGE W !,?5,"Sorted by: "
"RTN","IBCOMA1",181,0)
 E  W !,?6,"Contains: "
"RTN","IBCOMA1",182,0)
 W $S(IBAIB=1:"Patient Name",1:"Terminal Digit")
"RTN","IBCOMA1",183,0)
 W "  Range: "_$S(IBRF="A":"FIRST",1:IBRF)_" to "_$S(IBRL="zzzzzz":"LAST",1:IBRL)
"RTN","IBCOMA1",184,0)
 I IBBDT>0 D
"RTN","IBCOMA1",185,0)
 . W !,?7,"Include: Verification Date Range: "_$$FMTE^XLFDT(IBBDT,"Z")
"RTN","IBCOMA1",186,0)
 . W " to "_$$FMTE^XLFDT(IBEDT,"Z")
"RTN","IBCOMA1",187,0)
 I IBAPPTS>0 D
"RTN","IBCOMA1",188,0)
 . W !,?7,"Include: Last Appointment Date Range: "_$$FMTE^XLFDT(IBAPPTS,"Z")
"RTN","IBCOMA1",189,0)
 . W " to "_$$FMTE^XLFDT(IBAPPTE,"Z")
"RTN","IBCOMA1",190,0)
 W !,?8,"Filter: "_$S(IBPTYPE=1:"Living Patients",IBPTYPE=2:"Deceased Patients",1:"Both Living & Deceased Patients")
"RTN","IBCOMA1",191,0)
 W ", "_$S(IBSIN=1:"Verified Policies",IBSIN=2:"Non-Verified Policies",1:"Both Verified & Non-Verified Policies")
"RTN","IBCOMA1",192,0)
 Q
"RTN","IBCOMA1",193,0)
 ;
"RTN","IBCOMA1",194,0)
WRT ; Write data lines
"RTN","IBCOMA1",195,0)
 N IBA,IBCDA,IBDA,IBFIRST,IBDFN,IBINS,IBNA,IBPOL,IBPT,X,Y
"RTN","IBCOMA1",196,0)
 S IBQUIT=0,IBFIRST=1
"RTN","IBCOMA1",197,0)
 S IBA=0 F  S IBA=$O(^TMP("IBCOMA",$J,IBA)) Q:('IBA)!(IBQUIT=1)  D
"RTN","IBCOMA1",198,0)
 . I IBPAGE D ASK^IBCOMC2 I IBQUIT=1 Q
"RTN","IBCOMA1",199,0)
 . I IBEXCEL,IBFIRST D
"RTN","IBCOMA1",200,0)
 . . D HD(IBA)
"RTN","IBCOMA1",201,0)
 . . S IBFIRST=0
"RTN","IBCOMA1",202,0)
 . ;
"RTN","IBCOMA1",203,0)
 . I 'IBEXCEL D
"RTN","IBCOMA1",204,0)
 . . D HD(IBA)
"RTN","IBCOMA1",205,0)
 . . W !,$S(IBA=1:"Verified",1:"Non-Verified"),!
"RTN","IBCOMA1",206,0)
 . S IBNA="" F  S IBNA=$O(^TMP("IBCOMA",$J,IBA,IBNA)) Q:(IBNA="")!(IBQUIT=1)  D
"RTN","IBCOMA1",207,0)
 . . S IBDFN=0 F  S IBDFN=$O(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN)) Q:('IBDFN)!(IBQUIT=1)  D
"RTN","IBCOMA1",208,0)
 . . . S IBPT=$G(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN))
"RTN","IBCOMA1",209,0)
 . . . ;
"RTN","IBCOMA1",210,0)
 . . . I 'IBEXCEL,($Y+7)>IOSL D  I IBQUIT=1 Q
"RTN","IBCOMA1",211,0)
 . . . . D ASK^IBCOMC2 I IBQUIT=1 Q
"RTN","IBCOMA1",212,0)
 . . . . D HD(IBA)
"RTN","IBCOMA1",213,0)
 . . . ;
"RTN","IBCOMA1",214,0)
 . . . S IBDA=0 F  S IBDA=$O(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN,IBDA)) Q:('IBDA)!(IBQUIT=1)  D
"RTN","IBCOMA1",215,0)
 . . . . S IBINS=$G(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN,IBDA))
"RTN","IBCOMA1",216,0)
 . . . . ;
"RTN","IBCOMA1",217,0)
 . . . . S IBCDA=0 F  S IBCDA=$O(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN,IBDA,IBCDA)) Q:('IBCDA)!(IBQUIT=1)   D
"RTN","IBCOMA1",218,0)
 . . . . . S IBPOL=$G(^TMP("IBCOMA",$J,IBA,IBNA,IBDFN,IBDA,IBCDA))
"RTN","IBCOMA1",219,0)
 . . . . . I IBEXCEL D  I 1
"RTN","IBCOMA1",220,0)
 . . . . . . W !,$P(IBPT,U,1),U,$P(IBPT,U,2),U,$P(IBINS,U,1),U,$P(IBPOL,U,3),U
"RTN","IBCOMA1",221,0)
 . . . . . . I $P(IBPOL,U,1)'=0 W $P(IBPOL,U,1)
"RTN","IBCOMA1",222,0)
 . . . . . . W U_$P(IBPOL,U,2)_U
"RTN","IBCOMA1",223,0)
 . . . . . . W $P(IBPT,U,4),U,$P(IBPT,U,3)
"RTN","IBCOMA1",224,0)
 . . . . . E  D
"RTN","IBCOMA1",225,0)
 . . . . . . W !,$E($P(IBPT,U,1),1,MAXPT(IBA)),?CSSN(IBA),$P(IBPT,U,2),?CINS(IBA)
"RTN","IBCOMA1",226,0)
 . . . . . . W $E($P(IBINS,U,1),1,MAXINS(IBA)),?CGRP(IBA),$E($P(IBPOL,U,3),1,MAXGRP(IBA))
"RTN","IBCOMA1",227,0)
 . . . . . . I IBA=1 W ?CLVDAT(IBA),$P(IBPOL,U,1),?CLVBY(IBA),$E($P(IBPOL,U,2),1,MAXVERBY(IBA))
"RTN","IBCOMA1",228,0)
 . . . . . . W ?CAPPT(IBA),$P(IBPT,U,4),?CDOD(IBA),$P(IBPT,U,3)
"RTN","IBCOMA1",229,0)
 Q
"RTN","IBCOMA1",230,0)
 ;
"RTN","IBCOMA1",231,0)
SETMAX(NAME,MAX,IBI) ; Get max length of data
"RTN","IBCOMA1",232,0)
 ; Input:   NAME    - Data to get maximum length for
"RTN","IBCOMA1",233,0)
 ;          MAX(IBI)- Current Max length array
"RTN","IBCOMA1",234,0)
 ;          IBI     - Verified or Non-Verified section of the array
"RTN","IBCOMA1",235,0)
 ; Output   MAX(IBI)- Updated Max length array (potentially)
"RTN","IBCOMA1",236,0)
 N LEN
"RTN","IBCOMA1",237,0)
 S LEN=$L(NAME)
"RTN","IBCOMA1",238,0)
 I LEN>MAX(IBI) S MAX(IBI)=LEN
"RTN","IBCOMA1",239,0)
 Q
"RTN","IBCOMA1",240,0)
 ;
"RTN","IBCOMA1",241,0)
CALCCOLS ; Truncates the patient and insurance name field lengths if the total
"RTN","IBCOMA1",242,0)
 ; field lengths will not fit on the report (132 columns)
"RTN","IBCOMA1",243,0)
 ; Input:   MAXGRP(IBA)     - Maximum width of the 'Group No' column for 
"RTN","IBCOMA1",244,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",245,0)
 ;          MAXINS(IBA)     - Current Maximum width of the 'Insurance Co' column for 
"RTN","IBCOMA1",246,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",247,0)
 ;          MAXPT(IBA)      - Current Maximum width of the 'Patient Name' column for
"RTN","IBCOMA1",248,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",249,0)
 ;          MAXVERBY(IBA)   - Maximum width of the 'VC By' column for 
"RTN","IBCOMA1",250,0)
 ;                            verified (IBA=1) policies
"RTN","IBCOMA1",251,0)
 ; Output:  MAXINS(IBA)     - Updated Maximum width of the 'Insurance Co' column for 
"RTN","IBCOMA1",252,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",253,0)
 ;          MAXPT(IBA)      - Updated Maximum width of the 'Patient Name' column for
"RTN","IBCOMA1",254,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",255,0)
 N DIFF,DIFF2,DIFF3,IDX,MAX
"RTN","IBCOMA1",256,0)
 S MAX(1)=89  ; MAX=131 - SSN(4) - 3 Dates(24) - 14 (Spaces between columns)
"RTN","IBCOMA1",257,0)
 S MAX(2)=101 ; MAX=131 - SSN(4) - 2 Dates(16) - 10 (Spaces between columns)
"RTN","IBCOMA1",258,0)
 F IDX=1:1:2 D
"RTN","IBCOMA1",259,0)
 . S DIFF=MAX(IDX)-MAXPT(IDX)-MAXINS(IDX)-MAXGRP(IDX)
"RTN","IBCOMA1",260,0)
 . I IDX=1 S DIFF=DIFF-MAXVERBY(IDX)
"RTN","IBCOMA1",261,0)
 . I DIFF<0 D
"RTN","IBCOMA1",262,0)
 . . S DIFF2=(-DIFF)\2
"RTN","IBCOMA1",263,0)
 . . S DIFF3=(-DIFF)-DIFF2
"RTN","IBCOMA1",264,0)
 . . S MAXPT(IDX)=MAXPT(IDX)-DIFF2
"RTN","IBCOMA1",265,0)
 . . S MAXINS(IDX)=MAXINS(IDX)-DIFF3
"RTN","IBCOMA1",266,0)
 . D SETCOLS(IDX)
"RTN","IBCOMA1",267,0)
 Q
"RTN","IBCOMA1",268,0)
 ;
"RTN","IBCOMA1",269,0)
SETCOLS(IDX) ; Sets the column positions based on maximum data sizes
"RTN","IBCOMA1",270,0)
 ; Input:   IDX             - 1 - Verified policies section of the report
"RTN","IBCOMA1",271,0)
 ;                            2 - Non-Verified policies section of the report
"RTN","IBCOMA1",272,0)
 ;          MAXGRP(IBA)     - Maximum width of the 'Group No' column for 
"RTN","IBCOMA1",273,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",274,0)
 ;          MAXINS(IBA)     - Maximum width of the 'Insurance Co' column for 
"RTN","IBCOMA1",275,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",276,0)
 ;          MAXPT(IBA)      - Maximum width of the 'Patient Name' column for
"RTN","IBCOMA1",277,0)
 ;                            verified (IBA=1) and non-verified (IBA=2) policies
"RTN","IBCOMA1",278,0)
 ;          MAXVERBY(IBA)   - Maximum width of the 'VC By' column for 
"RTN","IBCOMA1",279,0)
 ;                            verified (IBA=1) policies
"RTN","IBCOMA1",280,0)
 ; Output:  CAPPT(IDX)      - Starting Column position for the 'Last Apt'
"RTN","IBCOMA1",281,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",282,0)
 ;          CDOD(IDX)       - Starting Column position for the 'DoD'
"RTN","IBCOMA1",283,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",284,0)
 ;          CGRP(IDX)       - Starting Column position for the 'Group No'
"RTN","IBCOMA1",285,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",286,0)
 ;          CINS(IDX)       - Starting Column position for the 'Insurance Co.'
"RTN","IBCOMA1",287,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",288,0)
 ;          CLVBY(IDX)      - Starting Column position for the 'VC By'
"RTN","IBCOMA1",289,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",290,0)
 ;          CLVDAT(IDX)     - Starting Column position for the 'Last VC'
"RTN","IBCOMA1",291,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",292,0)
 ;          CSSN(IDX)       - Starting Column position for the 'SSN'
"RTN","IBCOMA1",293,0)
 ;                            Column for Verified and Non-Verified policies
"RTN","IBCOMA1",294,0)
 S CSSN(IDX)=MAXPT(IDX)+2
"RTN","IBCOMA1",295,0)
 S CINS(IDX)=CSSN(IDX)+6
"RTN","IBCOMA1",296,0)
 S CGRP(IDX)=CINS(IDX)+MAXINS(IDX)+2
"RTN","IBCOMA1",297,0)
 I IDX=1 D
"RTN","IBCOMA1",298,0)
 . S CLVDAT(IDX)=CGRP(IDX)+MAXGRP(IDX)+2
"RTN","IBCOMA1",299,0)
 . S CLVBY(IDX)=CLVDAT(IDX)+10
"RTN","IBCOMA1",300,0)
 . S CAPPT(IDX)=CLVBY(IDX)+MAXVERBY(IDX)+2
"RTN","IBCOMA1",301,0)
 E  S CAPPT(IDX)=CGRP(IDX)+MAXGRP(IDX)+2
"RTN","IBCOMA1",302,0)
 S CDOD(IDX)=CAPPT(IDX)+10
"RTN","IBCOMA1",303,0)
 S MAXRPT(IDX)=CDOD(IDX)+8
"RTN","IBCOMA1",304,0)
 Q
"RTN","IBCOMA1",305,0)
 ;IBCOMA1
"RTN","IBCOPP")
0^23^B31702280
"RTN","IBCOPP",1,0)
IBCOPP ;ALB/NLR - LIST INS. PLANS BY CO. (DRIVER) ; 20-OCT-2015
"RTN","IBCOPP",2,0)
 ;;2.0;INTEGRATED BILLING;**28,62,528,549**;21-MAR-94;Build 54
"RTN","IBCOPP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOPP",4,0)
 ;
"RTN","IBCOPP",5,0)
EN ; Describe report
"RTN","IBCOPP",6,0)
 ; IB*2.0*549 - reworded report description
"RTN","IBCOPP",7,0)
 W !!?5,"This report will generate a list of insurance plans by company."
"RTN","IBCOPP",8,0)
 W !?5,"It will help you identify duplicates.  You must select one, many"
"RTN","IBCOPP",9,0)
 W !?5,"or all of the insurance companies; anywhere from one to all of the"
"RTN","IBCOPP",10,0)
 W !?5,"plans under each company; and whether to include the patient policies"
"RTN","IBCOPP",11,0)
 W !?5,"(subscribers) under each plan.  The number of plans you select is "
"RTN","IBCOPP",12,0)
 W !?5,"independent for each company you are including, but the subscriber"
"RTN","IBCOPP",13,0)
 W !?5,"is the same (all or none) for all companies and plans within this report."
"RTN","IBCOPP",14,0)
 W !?5,"Regardless of how you run the report, the number of group plans per"
"RTN","IBCOPP",15,0)
 W !?5,"insurance company and the number of subscribers per plan will be"
"RTN","IBCOPP",16,0)
 W !?5,"included.",!!
"RTN","IBCOPP",17,0)
 ;
"RTN","IBCOPP",18,0)
 ; Prompt user to select report type, insurance companies, plans
"RTN","IBCOPP",19,0)
 ;
"RTN","IBCOPP",20,0)
 ; Output from user selections:
"RTN","IBCOPP",21,0)
 ;
"RTN","IBCOPP",22,0)
 ; IBAO=   E - Output to Excel
"RTN","IBCOPP",23,0)
 ;         R - Report
"RTN","IBCOPP",24,0)
 ; IBAPA=  0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP",25,0)
 ;         1 - List Insurance Plans by Insurance Company with Subscriber
"RTN","IBCOPP",26,0)
 ;             information
"RTN","IBCOPP",27,0)
 ; IBAI=   0 - User selected Insurance Companies
"RTN","IBCOPP",28,0)
 ;         1 - Run report for all Insurance Companies with Plans
"RTN","IBCOPP",29,0)
 ; IBAIA=  0 - Only select Inactive Insurance Companies
"RTN","IBCOPP",30,0)
 ;         1 - Only select Active Insurance Companies
"RTN","IBCOPP",31,0)
 ;         2 - Select both Active and Inactive Insurance Companies
"RTN","IBCOPP",32,0)
 ; IBAIPA= 0 - Only select Inactive Insurance Company Plans
"RTN","IBCOPP",33,0)
 ;         1 - Only select Active Insurance Company Plans
"RTN","IBCOPP",34,0)
 ;         2 - Select both Active and Inactive Insurance Company Plans
"RTN","IBCOPP",35,0)
 ; IBAPL=  0 - Whether some or all ins. co's., user selects plans (may be
"RTN","IBCOPP",36,0)
 ;             all for certain companies, some for other companies)
"RTN","IBCOPP",37,0)
 ;         1 - Whether some or all ins. co's., run report for all plans
"RTN","IBCOPP",38,0)
 ;             associated with those co's.
"RTN","IBCOPP",39,0)
 ;
"RTN","IBCOPP",40,0)
 N A,I,IBAO,POP,ZTDESC,ZTDEXC,ZTRTN,ZTSAVE,%ZIS
"RTN","IBCOPP",41,0)
 K ^TMP("IBINC",$J)
"RTN","IBCOPP",42,0)
 S IBAPA=$$SELR^IBCOPP1                     ; Report Type prompt
"RTN","IBCOPP",43,0)
 I IBAPA<0 D ENQ Q
"RTN","IBCOPP",44,0)
 S IBAI=$$SELI^IBCOPP1                      ; All/Selected Ins. Cos. prompt
"RTN","IBCOPP",45,0)
 I IBAI<0 D ENQ Q
"RTN","IBCOPP",46,0)
 ;
"RTN","IBCOPP",47,0)
 ; IB*2.0*549 - Inactive/Active/Both Insurance Company look-up filter
"RTN","IBCOPP",48,0)
 ;              Only ask if user didn't select all Insurance Companies
"RTN","IBCOPP",49,0)
 S IBAIA=$$SELA^IBCOPP1
"RTN","IBCOPP",50,0)
 I IBAIA<0 D ENQ Q
"RTN","IBCOPP",51,0)
 ;
"RTN","IBCOPP",52,0)
 ; IB*2.0*549 - Added call to Insurance Company look-up listman template
"RTN","IBCOPP",53,0)
 ;              for selecting, moved from START method
"RTN","IBCOPP",54,0)
 ; Allow user selection of Insurance Companies, if required
"RTN","IBCOPP",55,0)
 I 'IBAI D  I IBQUIT=1 D ENQ Q
"RTN","IBCOPP",56,0)
 . N IBCNS,XX
"RTN","IBCOPP",57,0)
 . S IBQUIT=0
"RTN","IBCOPP",58,0)
 . D EN^IBCNILK(IBAIA)
"RTN","IBCOPP",59,0)
 . I '$D(^TMP("IBCNILKA",$J)) S IBQUIT=1 Q  ; No Insurance Companies selected
"RTN","IBCOPP",60,0)
 . S IBCNS=""
"RTN","IBCOPP",61,0)
 . F  S IBCNS=$O(^TMP("IBCNILKA",$J,IBCNS)) Q:IBCNS=""  D
"RTN","IBCOPP",62,0)
 . . ;
"RTN","IBCOPP",63,0)
 . . ; Insurance Company Name
"RTN","IBCOPP",64,0)
 . . S XX=$E($$GET1^DIQ(36,IBCNS_",",.01),1,25)
"RTN","IBCOPP",65,0)
 . . S ^TMP("IBINC",$J,XX,IBCNS)=""
"RTN","IBCOPP",66,0)
 . K ^TMP("IBCNILKA",$J)
"RTN","IBCOPP",67,0)
 ;
"RTN","IBCOPP",68,0)
 S IBAPL=$$SELP^IBCOPP1                     ; Plan Selection prompt
"RTN","IBCOPP",69,0)
 I IBAPL<0 D ENQ Q
"RTN","IBCOPP",70,0)
 ;
"RTN","IBCOPP",71,0)
 ; IB*2.0*549 - Inactive/Active/Both Insurance Company Plan look-up filter
"RTN","IBCOPP",72,0)
 ;              Only ask if user didn't select all Group Plan
"RTN","IBCOPP",73,0)
 S IBAIPA=2
"RTN","IBCOPP",74,0)
 S:'IBAPL IBAIPA=$$SELPA^IBCOPP1
"RTN","IBCOPP",75,0)
 I IBAIPA<0 D ENQ Q
"RTN","IBCOPP",76,0)
 ;
"RTN","IBCOPP",77,0)
 ; All Insurance Companies, All Plans, skip to device prompt
"RTN","IBCOPP",78,0)
 I IBAI,IBAPL D  Q
"RTN","IBCOPP",79,0)
 . S IBAO=$$OUT^IBCOPP1                     ; Report or CSV output
"RTN","IBCOPP",80,0)
 . I IBAO<0 D ENQ Q
"RTN","IBCOPP",81,0)
 . D DEVICE
"RTN","IBCOPP",82,0)
 ;
"RTN","IBCOPP",83,0)
 ; Obtain Plans for selected or All Insurance Companies
"RTN","IBCOPP",84,0)
 D START
"RTN","IBCOPP",85,0)
 I IBQUIT D ENQ Q
"RTN","IBCOPP",86,0)
 I '$D(^TMP("IBINC",$J)) D  Q
"RTN","IBCOPP",87,0)
 . W !!,*7,"No plans selected!"
"RTN","IBCOPP",88,0)
 . D ENQ
"RTN","IBCOPP",89,0)
 ;
"RTN","IBCOPP",90,0)
 S IBAO=$$OUT^IBCOPP1                       ; Report or CSV output
"RTN","IBCOPP",91,0)
 D DEVICE
"RTN","IBCOPP",92,0)
 Q
"RTN","IBCOPP",93,0)
 ;
"RTN","IBCOPP",94,0)
DEVICE ; Ask user to select device
"RTN","IBCOPP",95,0)
 ;
"RTN","IBCOPP",96,0)
 N I,POP
"RTN","IBCOPP",97,0)
 I IBAO'="E" D
"RTN","IBCOPP",98,0)
 . W !!,"*** You will need a 132 column printer for this report. ***",!
"RTN","IBCOPP",99,0)
 E  D
"RTN","IBCOPP",100,0)
 . W !!,"For CSV output, turn logging or capture on now. To avoid undesired wrapping"
"RTN","IBCOPP",101,0)
 . W !,"of the data saved to the file, please enter ""0;256;99999"" at the ""DEVICE:"""
"RTN","IBCOPP",102,0)
 . W !,"prompt.",!
"RTN","IBCOPP",103,0)
 S %ZIS="QM"
"RTN","IBCOPP",104,0)
 D ^%ZIS
"RTN","IBCOPP",105,0)
 I POP D ENQ Q
"RTN","IBCOPP",106,0)
 I $D(IO("Q")) D  Q
"RTN","IBCOPP",107,0)
 . S ZTRTN="^IBCOPP2",ZTDESC="IB - LIST OF PLANS BY INSURANCE COMPANY"
"RTN","IBCOPP",108,0)
 . F I="^TMP(""IBINC"",$J,","IBAPA","IBAI","IBAPL","IBAO" S ZTSAVE(I)=""
"RTN","IBCOPP",109,0)
 . D ^%ZTLOAD
"RTN","IBCOPP",110,0)
 . K IO("Q")
"RTN","IBCOPP",111,0)
 . D HOME^%ZIS
"RTN","IBCOPP",112,0)
 . W !!,$S($D(ZTSK):"This job has been queued as task #"_ZTSK_".",1:"Unable to queue this job.")
"RTN","IBCOPP",113,0)
 . K ZTSK,IO("Q")
"RTN","IBCOPP",114,0)
 . D ENQ
"RTN","IBCOPP",115,0)
 ;
"RTN","IBCOPP",116,0)
 ; Compile and print report
"RTN","IBCOPP",117,0)
 U IO
"RTN","IBCOPP",118,0)
 D ^IBCOPP2
"RTN","IBCOPP",119,0)
 ;
"RTN","IBCOPP",120,0)
ENQ ;
"RTN","IBCOPP",121,0)
 K A,DIRUT,DIROUT,DUOUT,DTOUT,IBAO,IBAI,IBAIA,IBAIPA,IBAPA,IBAPL,IBQUIT,X,Y
"RTN","IBCOPP",122,0)
 K ^TMP("IBCNILKA",$J),^TMP("IBINC",$J)
"RTN","IBCOPP",123,0)
 Q
"RTN","IBCOPP",124,0)
 ;
"RTN","IBCOPP",125,0)
START ; Gather plans for all selected companies.
"RTN","IBCOPP",126,0)
 ; Input: IBAI  - 0 - User selected Insurance Companies
"RTN","IBCOPP",127,0)
 ;                1 - Run report for all Insurance Companies with Plans
"RTN","IBCOPP",128,0)
 ;        IBAIA - 0 - Only select Inactive Insurance Companies
"RTN","IBCOPP",129,0)
 ;                1 - Only select Active Insurance Companies
"RTN","IBCOPP",130,0)
 ;                2 - Select both Active and Inactive Insurance Companies
"RTN","IBCOPP",131,0)
 ;        IBAIPA  0 - Only select Inactive Insurance Company Plans
"RTN","IBCOPP",132,0)
 ;                1 - Only select Active Insurance Company Plans
"RTN","IBCOPP",133,0)
 ;                2 - Select both Active and Inactive Insurance Company Plans
"RTN","IBCOPP",134,0)
 ;        IBAPL - 0 - Whether some or all ins. co's., user selects plans (may be
"RTN","IBCOPP",135,0)
 ;                    all for certain companies, some for other companies)
"RTN","IBCOPP",136,0)
 ;                1 - Whether some or all ins. co's., run report for all plans
"RTN","IBCOPP",137,0)
 ;                    associated with those co's.
"RTN","IBCOPP",138,0)
 S (IBCT,IBQUIT)=0
"RTN","IBCOPP",139,0)
 I IBAPL D STARTQ Q
"RTN","IBCOPP",140,0)
 ;
"RTN","IBCOPP",141,0)
 ; Gather all Insurance Companies if required
"RTN","IBCOPP",142,0)
 I IBAI D
"RTN","IBCOPP",143,0)
 . N INACT
"RTN","IBCOPP",144,0)
 . S A=0
"RTN","IBCOPP",145,0)
 . F  S A=$O(^IBA(355.3,"B",A)) Q:'A  D
"RTN","IBCOPP",146,0)
 . . Q:$G(^DIC(36,A,0))=""
"RTN","IBCOPP",147,0)
 . . S INACT=+$$GET1^DIQ(36,A_",",.05,"I")  ; Is the Insurance Company Inactive?
"RTN","IBCOPP",148,0)
 . . I INACT,IBAIA=1 Q                      ; IB*2.0*549 Only include Active Ins. Cos.
"RTN","IBCOPP",149,0)
 . . I 'INACT,IBAIA=0 Q                     ; IB*2.0*549 Only include Inactive Ins. Cos.
"RTN","IBCOPP",150,0)
 . . S ^TMP("IBINC",$J,$E($P($G(^DIC(36,A,0)),"^"),1,25),A)=""
"RTN","IBCOPP",151,0)
 ;
"RTN","IBCOPP",152,0)
 ; Gather plans for selected Insurance Companies
"RTN","IBCOPP",153,0)
 S IBIC=""
"RTN","IBCOPP",154,0)
 F  S IBIC=$O(^TMP("IBINC",$J,IBIC)) Q:IBIC=""!IBQUIT  D
"RTN","IBCOPP",155,0)
 . S IBCNS=""
"RTN","IBCOPP",156,0)
 . F  S IBCNS=$O(^TMP("IBINC",$J,IBIC,IBCNS)) Q:IBCNS=""!(IBQUIT)  D
"RTN","IBCOPP",157,0)
 . . S IBCT=IBCT+1
"RTN","IBCOPP",158,0)
 . . W !!,"Insurance Company # "_IBCT_": "_IBIC
"RTN","IBCOPP",159,0)
 . . D OK^IBCNSM3
"RTN","IBCOPP",160,0)
 . . Q:IBQUIT
"RTN","IBCOPP",161,0)
 . . I 'IBOK K ^TMP("IBINC",$J,IBIC,IBCNS) S IBAI=0 Q
"RTN","IBCOPP",162,0)
 . . W "   ...building a list of plans..."
"RTN","IBCOPP",163,0)
 . . K IBSEL,^TMP($J,"IBSEL")
"RTN","IBCOPP",164,0)
 . . ;
"RTN","IBCOPP",165,0)
 . . ; IB*2.0*549 - Add Active/Inactive/Both Plan filter
"RTN","IBCOPP",166,0)
 . . S XX=$S(IBAIPA=0:2,IBAIPA=1:0,IBAIPA=2:1)
"RTN","IBCOPP",167,0)
 . . D LKP^IBCNSU2(IBCNS,1,1,.IBSEL,0,XX)
"RTN","IBCOPP",168,0)
 . . Q:IBQUIT
"RTN","IBCOPP",169,0)
 . . I '$O(^TMP($J,"IBSEL",0)) D  Q
"RTN","IBCOPP",170,0)
 . . . K ^TMP("IBINC",$J,IBIC,IBCNS)
"RTN","IBCOPP",171,0)
 . . . S IBAI=0
"RTN","IBCOPP",172,0)
 . . ;
"RTN","IBCOPP",173,0)
 . . ; Set plans into an array
"RTN","IBCOPP",174,0)
 . . S IBPN=0
"RTN","IBCOPP",175,0)
 . . F  S IBPN=$O(^TMP($J,"IBSEL",IBPN)) Q:'IBPN  D
"RTN","IBCOPP",176,0)
 . . . S ^TMP("IBINC",$J,IBIC,IBCNS,IBPN)=""
"RTN","IBCOPP",177,0)
 ;
"RTN","IBCOPP",178,0)
STARTQ ;
"RTN","IBCOPP",179,0)
 K IBAO,IBCT,IBIC,IBJJ,IBLCT,IBCNS,IBOK,IBPN,IBSEL,^TMP($J,"IBSEL")
"RTN","IBCOPP",180,0)
 Q 
"RTN","IBCOPP1")
0^24^B23382519
"RTN","IBCOPP1",1,0)
IBCOPP1 ;ALB/NLR - LIST INS. PLANS BY CO. (DRIVER 1) ; 20-OCT-2015 
"RTN","IBCOPP1",2,0)
 ;;2.0;INTEGRATED BILLING;**28,528,549**;21-MAR-94;Build 54
"RTN","IBCOPP1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOPP1",4,0)
 ;
"RTN","IBCOPP1",5,0)
SELR() ; Prompt user to select report type
"RTN","IBCOPP1",6,0)
 ; Returns: IBV1    0 - List insurance plans by company
"RTN","IBCOPP1",7,0)
 ;                  1 - List insurance plans by company with subscriber information
"RTN","IBCOPP1",8,0)
 ;                 -1 - No selection made
"RTN","IBCOPP1",9,0)
 N IBV1
"RTN","IBCOPP1",10,0)
 S DIR(0)="SA^1:1. List Insurance Plans by Company;2:2. List Insurance Plans by Company With Subscriber Information"
"RTN","IBCOPP1",11,0)
 S DIR("A")="     Select Report (1 OR 2): "
"RTN","IBCOPP1",12,0)
 S DIR("A",1)="1. List Insurance Plans by Company"
"RTN","IBCOPP1",13,0)
 S DIR("A",2)="2. List Insurance Plans by Company With Subscriber Information"
"RTN","IBCOPP1",14,0)
 D ^DIR K DIR I Y<0!$D(DIRUT) S IBV1=-1 G SELRQ
"RTN","IBCOPP1",15,0)
 S IBV1=(+Y=2) K Y
"RTN","IBCOPP1",16,0)
SELRQ ;
"RTN","IBCOPP1",17,0)
 Q IBV1
"RTN","IBCOPP1",18,0)
 ;
"RTN","IBCOPP1",19,0)
SELI() ; Prompt user to select all or subset of insurance companies 
"RTN","IBCOPP1",20,0)
 ; Count ins. companies with plans
"RTN","IBCOPP1",21,0)
 ; Returns: IBV2    0 - User selects insurance companies
"RTN","IBCOPP1",22,0)
 ;                  1 - Run report for all insurance companies with plans
"RTN","IBCOPP1",23,0)
 ;                 -1 - No selection made
"RTN","IBCOPP1",24,0)
 ;
"RTN","IBCOPP1",25,0)
 N A,B,IBV2
"RTN","IBCOPP1",26,0)
 S (A,B)=0
"RTN","IBCOPP1",27,0)
 F  S A=$O(^IBA(355.3,"B",A)) Q:'A  S B=B+1
"RTN","IBCOPP1",28,0)
 S DIR(0)="SA^1:1. List All "_B_" Ins. Companies;2:2. List Only Ins. Companies That You Select"
"RTN","IBCOPP1",29,0)
 W !!,"     There are "_B_" insurance companies associated with "
"RTN","IBCOPP1",30,0)
 ;
"RTN","IBCOPP1",31,0)
 ; IB*2.0*549 Added Plan count below
"RTN","IBCOPP1",32,0)
 W $P(^IBA(355.3,0),"^",4)_" group plans.",!
"RTN","IBCOPP1",33,0)
 S DIR("A",1)="1. List All "_B_" Ins. Companies"
"RTN","IBCOPP1",34,0)
 S DIR("A",2)="2. List Only Ins. Companies That You Select"
"RTN","IBCOPP1",35,0)
 S DIR("A")="     SELECT 1 or 2:  "
"RTN","IBCOPP1",36,0)
 S DIR("?",1)="Enter a code from the list:  1 or 2.  Only insurance"
"RTN","IBCOPP1",37,0)
 S DIR("?")="companies with one or more plans can be selected."
"RTN","IBCOPP1",38,0)
 D ^DIR K DIR I Y<0!$D(DIRUT) S IBV2=-1 G SELIQ
"RTN","IBCOPP1",39,0)
 S IBV2=(+Y=1) K Y
"RTN","IBCOPP1",40,0)
SELIQ ;
"RTN","IBCOPP1",41,0)
 Q IBV2
"RTN","IBCOPP1",42,0)
 ;
"RTN","IBCOPP1",43,0)
SELA() ;EP
"RTN","IBCOPP1",44,0)
 ; IB*2.0*549 - Added function
"RTN","IBCOPP1",45,0)
 ; Prompt user to select Active/Inactive/Both Insurance Companies
"RTN","IBCOPP1",46,0)
 ; Input:   None
"RTN","IBCOPP1",47,0)
 ; Returns: 0   - Inactive Insurance Companies Only
"RTN","IBCOPP1",48,0)
 ;          1   - Active Insurance Companies Only
"RTN","IBCOPP1",49,0)
 ;          2   - Both Active and Inactive Insurance Companies
"RTN","IBCOPP1",50,0)
 ;         -1   - No selection made
"RTN","IBCOPP1",51,0)
 ;
"RTN","IBCOPP1",52,0)
 N DIR,DIROUT,DIRUT,DTOUT,XX
"RTN","IBCOPP1",53,0)
 W !
"RTN","IBCOPP1",54,0)
 S DIR(0)="SA^1:ACTIVE;2:INACTIVE;3:BOTH"
"RTN","IBCOPP1",55,0)
 S DIR("A")="     Select 1 or 2 or 3: "
"RTN","IBCOPP1",56,0)
 S DIR("A",1)=" 1. Select ACTIVE Insurance Companies"
"RTN","IBCOPP1",57,0)
 S DIR("A",2)=" 2. Select INACTIVE Insurance Companies"
"RTN","IBCOPP1",58,0)
 S DIR("A",3)=" 3. Select BOTH"
"RTN","IBCOPP1",59,0)
 S DIR("?",1)=" 1 - Only allow selection of ACTIVE Insurance Companies"
"RTN","IBCOPP1",60,0)
 S DIR("?",2)=" 2 - Only allow selection of INACTIVE Insurance Companies"
"RTN","IBCOPP1",61,0)
 S DIR("?")=" 3 - Allow selection of ACTIVE and INACTIVE Insurance Companies"
"RTN","IBCOPP1",62,0)
 S DIR("B")=1
"RTN","IBCOPP1",63,0)
 D ^DIR
"RTN","IBCOPP1",64,0)
 I Y<0!$D(DIRUT) Q -1
"RTN","IBCOPP1",65,0)
 S XX=$S(Y=1:1,Y=2:0,1:2)
"RTN","IBCOPP1",66,0)
 Q XX
"RTN","IBCOPP1",67,0)
 ;
"RTN","IBCOPP1",68,0)
SELPA() ;EP
"RTN","IBCOPP1",69,0)
 ; IB*2.0*549 - Added function
"RTN","IBCOPP1",70,0)
 ; Prompt user to select Active/Inactive/Both Insurance Company Plans
"RTN","IBCOPP1",71,0)
 ; Input:   None
"RTN","IBCOPP1",72,0)
 ; Returns: 0   - Inactive Insurance Company Plans Only
"RTN","IBCOPP1",73,0)
 ;          1   - Active Insurance Company Plans Only
"RTN","IBCOPP1",74,0)
 ;          2   - Both Active and Inactive Insurance Company Plans
"RTN","IBCOPP1",75,0)
 ;         -1   - No selection made
"RTN","IBCOPP1",76,0)
 ;
"RTN","IBCOPP1",77,0)
 N DIR,DIROUT,DIRUT,DTOUT,XX
"RTN","IBCOPP1",78,0)
 W !
"RTN","IBCOPP1",79,0)
 S DIR(0)="SA^1:ACTIVE;2:INACTIVE;3:BOTH"
"RTN","IBCOPP1",80,0)
 S DIR("A")="     Select 1 or 2 or 3: "
"RTN","IBCOPP1",81,0)
 S DIR("A",1)=" 1. Select ACTIVE Group Plans"
"RTN","IBCOPP1",82,0)
 S DIR("A",2)=" 2. Select INACTIVE Group Plans"
"RTN","IBCOPP1",83,0)
 S DIR("A",3)=" 3. Select BOTH"
"RTN","IBCOPP1",84,0)
 S DIR("?",1)=" 1 - Only allow selection of ACTIVE Insurance Company Plans"
"RTN","IBCOPP1",85,0)
 S DIR("?",2)=" 2 - Only allow selection of INACTIVE Insurance Company Plans"
"RTN","IBCOPP1",86,0)
 S DIR("?")=" 3 - Allow selection of ACTIVE and INACTIVE Insurance Company Plans"
"RTN","IBCOPP1",87,0)
 S DIR("B")=1
"RTN","IBCOPP1",88,0)
 D ^DIR
"RTN","IBCOPP1",89,0)
 I Y<0!$D(DIRUT) Q -1
"RTN","IBCOPP1",90,0)
 S XX=$S(Y=1:1,Y=2:0,1:2)
"RTN","IBCOPP1",91,0)
 Q XX
"RTN","IBCOPP1",92,0)
 ;
"RTN","IBCOPP1",93,0)
SELP() ; Prompt user to select all or subset of plans
"RTN","IBCOPP1",94,0)
 ; Returns: IBV3    0 - Whether some or all ins. co's., user selects plans (may be
"RTN","IBCOPP1",95,0)
 ;                      all for certain companies, some for other companies
"RTN","IBCOPP1",96,0)
 ;                  1 - Whether some or all ins. co's., run report for all plans
"RTN","IBCOPP1",97,0)
 ;                      associated with those co's.
"RTN","IBCOPP1",98,0)
 ;                 -1 - No selection made
"RTN","IBCOPP1",99,0)
 ;
"RTN","IBCOPP1",100,0)
 N IBV3
"RTN","IBCOPP1",101,0)
 ;
"RTN","IBCOPP1",102,0)
 ; IB*2.0*549 Removed total plan count sentence from line below
"RTN","IBCOPP1",103,0)
 S DIR(0)="YO",DIR("A")="List all plans for each company",DIR("B")="No"
"RTN","IBCOPP1",104,0)
 S DIR("B")="No"
"RTN","IBCOPP1",105,0)
 S DIR("?",1)="If you say yes, the report will list all of the plans for each company."
"RTN","IBCOPP1",106,0)
 S DIR("?",2)="If you selected 2. List Insurance Plans by Company With Subscriber"
"RTN","IBCOPP1",107,0)
 S DIR("?",3)="Information and 1. List All "_$P(^IBA(355.3,0),"^",4)_" Ins. Companies,"
"RTN","IBCOPP1",108,0)
 S DIR("?",4)="this will result in the most complete report possible.  However, it"
"RTN","IBCOPP1",109,0)
 S DIR("?",5)="may take awhile to run.  If you say no, you must make plan selections"
"RTN","IBCOPP1",110,0)
 S DIR("?")="for each individual company (anywhere from one plan to all)."
"RTN","IBCOPP1",111,0)
 W ! D ^DIR W ! K DIR I Y<0!$D(DIRUT) S IBV3=-1 G SELPQ
"RTN","IBCOPP1",112,0)
 S IBV3=+Y K Y
"RTN","IBCOPP1",113,0)
SELPQ ;
"RTN","IBCOPP1",114,0)
 Q IBV3
"RTN","IBCOPP1",115,0)
 ;
"RTN","IBCOPP1",116,0)
OUT() ; Prompt to allow users to select output format
"RTN","IBCOPP1",117,0)
 ; Returns: E       - Output to excel
"RTN","IBCOPP1",118,0)
 ;          R       - Output to report
"RTN","IBCOPP1",119,0)
 ;         -1       - No Selection made
"RTN","IBCOPP1",120,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCOPP1",121,0)
 W !
"RTN","IBCOPP1",122,0)
 S DIR(0)="SA^E:Excel;R:Report"
"RTN","IBCOPP1",123,0)
 S DIR("A")="(E)xcel Format or (R)eport Format: "
"RTN","IBCOPP1",124,0)
 S DIR("B")="Report"
"RTN","IBCOPP1",125,0)
 S DIR("?",1)="Select 'E' to create CSV output for import into Excel."
"RTN","IBCOPP1",126,0)
 S DIR("?")="Select 'R' to create a standard report."
"RTN","IBCOPP1",127,0)
 D ^DIR
"RTN","IBCOPP1",128,0)
 I $D(DIRUT) Q -1
"RTN","IBCOPP1",129,0)
 Q Y
"RTN","IBCOPP2")
0^25^B66671846
"RTN","IBCOPP2",1,0)
IBCOPP2 ;ALB/NLR - LIST INS. PLANS BY CO. (COMPILE) ; 20-OCT-2015
"RTN","IBCOPP2",2,0)
 ;;2.0;INTEGRATED BILLING;**28,62,93,516,528,549**;21-MAR-94;Build 54
"RTN","IBCOPP2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOPP2",4,0)
 ;
"RTN","IBCOPP2",5,0)
EN ; Queued Entry Point for Report.
"RTN","IBCOPP2",6,0)
 ; Input:   IBAI    - 0 - User selected Insurance Companies
"RTN","IBCOPP2",7,0)
 ;                    1 - Run report for all Insurance Companies with Plans
"RTN","IBCOPP2",8,0)
 ;          IBAIA   - 0 - Only select Inactive Insurance Companies
"RTN","IBCOPP2",9,0)
 ;                    1 - Only select Active Insurance Companies
"RTN","IBCOPP2",10,0)
 ;                    2 - Select both Active and Inactive Insurance Companies
"RTN","IBCOPP2",11,0)
 ;          IBAIPA    0 - Only select Inactive Insurance Company Plans
"RTN","IBCOPP2",12,0)
 ;                    1 - Only select Active Insurance Company Plans
"RTN","IBCOPP2",13,0)
 ;                    2 - Select both Active and Inactive Insurance Company Plans
"RTN","IBCOPP2",14,0)
 ;          IBAO=     E - Output to Excel
"RTN","IBCOPP2",15,0)
 ;                    R - Report
"RTN","IBCOPP2",16,0)
 ;          IBAPA   - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP2",17,0)
 ;                    1 - List Insurance Plans by Insurance Company
"RTN","IBCOPP2",18,0)
 ;                        with Subscriber information
"RTN","IBCOPP2",19,0)
 ;          IBAPA   - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP2",20,0)
 ;                    1 - List Insurance Plans by Insurance Company with Subscriber
"RTN","IBCOPP2",21,0)
 ;                        information
"RTN","IBCOPP2",22,0)
 ;          IBAPL   - 0 - User selected Group Plans
"RTN","IBCOPP2",23,0)
 ;                    1 - Run report for all Group Plans for each Ins. Co
"RTN","IBCOPP2",24,0)
 ;                    NOTE: only used if IBAI=1, otherwise, some Insurance
"RTN","IBCOPP2",25,0)
 ;                          companies may select all Group Plans and some 
"RTN","IBCOPP2",26,0)
 ;                          may be use selected Group Plans
"RTN","IBCOPP2",27,0)
 ;          ^TMP("IBINC",$J,IBIC,IBCNS,IBPTR)="" - Selected Ins Cos/Plans
"RTN","IBCOPP2",28,0)
 ;             Required if all Insurance Companies and all Group Plans
"RTN","IBCOPP2",29,0)
 ;             not selected Where:
"RTN","IBCOPP2",30,0)
 ;               IBIC   - Insurance Company Name
"RTN","IBCOPP2",31,0)
 ;               IBCNS  - IEN of the selected Insurance Company, file 36
"RTN","IBCOPP2",32,0)
 ;               IBPTR  - IEN of the selected Group Plan, file 355.3
"RTN","IBCOPP2",33,0)
 ;
"RTN","IBCOPP2",34,0)
 ; Compile report data
"RTN","IBCOPP2",35,0)
 N GIEN,XX
"RTN","IBCOPP2",36,0)
 S IBI=0
"RTN","IBCOPP2",37,0)
 K ^TMP($J,"PR"),^TMP($J,"PL")
"RTN","IBCOPP2",38,0)
 ;
"RTN","IBCOPP2",39,0)
 ; Display all Insurance Companies and all Group Plans
"RTN","IBCOPP2",40,0)
 I IBAI,IBAPL D
"RTN","IBCOPP2",41,0)
 . S IBIC1=""
"RTN","IBCOPP2",42,0)
 . F  S IBIC1=$O(^DIC(36,"B",IBIC1)) Q:IBIC1=""  D
"RTN","IBCOPP2",43,0)
 . . S IBCNS=0
"RTN","IBCOPP2",44,0)
 . . F  S IBCNS=$O(^DIC(36,"B",IBIC1,IBCNS)) Q:'IBCNS  D
"RTN","IBCOPP2",45,0)
 . . . I $D(^IBA(355.3,"B",IBCNS)) D
"RTN","IBCOPP2",46,0)
 . . . . S GIEN=$O(^IBA(355.3,"B",IBCNS,""))    ; Group Plan IEN, file 355.3
"RTN","IBCOPP2",47,0)
 . . . . ;
"RTN","IBCOPP2",48,0)
 . . . . ; Add Insurance Company/Group Plan to 'selected' list
"RTN","IBCOPP2",49,0)
 . . . . S ^TMP("IBINC",$J,IBIC1,IBCNS,GIEN)=""
"RTN","IBCOPP2",50,0)
 ;
"RTN","IBCOPP2",51,0)
 ; Display selected Insurance- user selected companies or plans
"RTN","IBCOPP2",52,0)
 S IBIC=""
"RTN","IBCOPP2",53,0)
 F  S IBIC=$O(^TMP("IBINC",$J,IBIC)) Q:IBIC=""  D
"RTN","IBCOPP2",54,0)
 . S IBCNS=0
"RTN","IBCOPP2",55,0)
 . F  S IBCNS=$O(^TMP("IBINC",$J,IBIC,IBCNS)) Q:'IBCNS  D GATH
"RTN","IBCOPP2",56,0)
 D PRINT
"RTN","IBCOPP2",57,0)
 Q
"RTN","IBCOPP2",58,0)
 ;
"RTN","IBCOPP2",59,0)
PRINT ; Print report
"RTN","IBCOPP2",60,0)
 D ^IBCOPP3
"RTN","IBCOPP2",61,0)
 K ^TMP($J,"PR"),^TMP("IBINC",$J)
"RTN","IBCOPP2",62,0)
 ;
"RTN","IBCOPP2",63,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCOPP2",64,0)
 D ^%ZISC
"RTN","IBCOPP2",65,0)
 K IBAI,IBAIA,IBAO,IBAIPA,IBAPA,IBAPL,IBCNS,IBCPS,IBCPT,IBCST,IBI,IBIC,IBIC1
"RTN","IBCOPP2",66,0)
 Q
"RTN","IBCOPP2",67,0)
 ;
"RTN","IBCOPP2",68,0)
GATH ; Gather all data for an Insurance Company.
"RTN","IBCOPP2",69,0)
 ; Input:   IBI         - Current Insurance Company Counter
"RTN","IBCOPP2",70,0)
 ;          IBIC        - Insurance Company Name
"RTN","IBCOPP2",71,0)
 ;          IBSNS       - IEN of the Insurance Company, file 36
"RTN","IBCOPP2",72,0)
 ;          ^TMP("IBINC",$J,IBIC,IBCNS,IBPTR) - See EN for detail
"RTN","IBCOPP2",73,0)
 ; Output:  IBI         - Updated Insurance Company Counter
"RTN","IBCOPP2",74,0)
 ;          ^TMP($J,"PR",IBI)=A1^A2^...^A11 Where:
"RTN","IBCOPP2",75,0)
 ;                             IBI  - Counter of # of Insurance Companies included
"RTN","IBCOPP2",76,0)
 ;                                    (starts at 1)
"RTN","IBCOPP2",77,0)
 ;                             A1   - Ins. Co. Name (1st 25 characters)
"RTN","IBCOPP2",78,0)
 ;                                    Leading '*' if inactive
"RTN","IBCOPP2",79,0)
 ;                             A2   - Street Address Line 1
"RTN","IBCOPP2",80,0)
 ;                             A3   - City, State Zip Code (up to 9 digits + dash)
"RTN","IBCOPP2",81,0)
 ;                             A4   - Timely Filing Timeframe
"RTN","IBCOPP2",82,0)
 ;                             A5   - # of total plans for the Insurance Company
"RTN","IBCOPP2",83,0)
 ;                             A6   - # of total subscribers per Insurance Company
"RTN","IBCOPP2",84,0)
 ;                             A7   - # of selected Plans per Insurance Company
"RTN","IBCOPP2",85,0)
 ;                             A8   - # of subscribers per selected plans
"RTN","IBCOPP2",86,0)
 ;                             A9   - Max length of Electronic Plan Type for Ins Co
"RTN","IBCOPP2",87,0)
 ;                             A10  - Max length of Plan Type for Ins Co
"RTN","IBCOPP2",88,0)
 ;                             A11  - Max length of Patient ID for Ins Co
"RTN","IBCOPP2",89,0)
 ;
"RTN","IBCOPP2",90,0)
 N IBCPS,IBCPT,IBCSS,IBCST,LENEP,LENPID,LENPT,XX
"RTN","IBCOPP2",91,0)
 S IBI=IBI+1,(IBCPT,IBCPS,IBCST,IBCSS)=0    ; Initialize counters
"RTN","IBCOPP2",92,0)
 S (LENEP,LENPID,LENPT)=0                   ; Init Max Elec Plan, Pat Id, Plan Type lengths
"RTN","IBCOPP2",93,0)
 D COMP(.LENPID)                            ; Gather company info
"RTN","IBCOPP2",94,0)
 D PLAN(.LENEP,.LENPT)                      ; Gather plan info
"RTN","IBCOPP2",95,0)
 ;
"RTN","IBCOPP2",96,0)
 ; Set final company info
"RTN","IBCOPP2",97,0)
 S XX=$$COMPINF(IBCNS)
"RTN","IBCOPP2",98,0)
 S XX=XX_"^"_IBCPT_"^"_IBCST_"^"_IBCPS_"^"_IBCSS_"^"_LENEP_"^"_LENPT_"^"_LENPID
"RTN","IBCOPP2",99,0)
 S ^TMP($J,"PR",IBI)=XX
"RTN","IBCOPP2",100,0)
 K ^TMP($J,"PL")
"RTN","IBCOPP2",101,0)
 Q
"RTN","IBCOPP2",102,0)
 ;
"RTN","IBCOPP2",103,0)
COMP(LENPID) ; Gather Company counts and subscription information, if necessary
"RTN","IBCOPP2",104,0)
 ; Input:   IBPA        - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP2",105,0)
 ;                        1 - List Insurance Plans by Insurance Company
"RTN","IBCOPP2",106,0)
 ;                            with Subscriber information
"RTN","IBCOPP2",107,0)
 ;          IBAPL       - 0 - User selected Group Plans
"RTN","IBCOPP2",108,0)
 ;                        1 - All Group Plans selected
"RTN","IBCOPP2",109,0)
 ;          IBCNS       - IEN of the insurance company, file #36
"RTN","IBCOPP2",110,0)
 ;          ^TMP("IBINC",$J,IBIC,ICBNS)) - See EN for details
"RTN","IBCOPP2",111,0)
 ; Output:  LENPID      - Maximum length of Patient ID field for subscribers of
"RTN","IBCOPP2",112,0)
 ;                        this Insurance Company
"RTN","IBCOPP2",113,0)
 ;          IBCSS       - Total # of Subscribers in selected Group Plans
"RTN","IBCOPP2",114,0)
 ;          IBCST       - Total # of Subscribers
"RTN","IBCOPP2",115,0)
 ;          ^TMP($J,"PR",IBI,IBPTR,IBNAM_"@@"_DFN_"@@"_IBCDFN)=B1^B2^...^B10 Where
"RTN","IBCOPP2",116,0)
 ;                DFN   - IEN of the patient, file 2
"RTN","IBCOPP2",117,0)
 ;                IBCDFN- Insurance Company multiple
"RTN","IBCOPP2",118,0)
 ;                IBI   - Insurance counter
"RTN","IBCOPP2",119,0)
 ;                IBNAM - Patient's Name (B1)
"RTN","IBCOPP2",120,0)
 ;                IBPTR - IEN of the Group Plan, file 355.3
"RTN","IBCOPP2",121,0)
 ;                B1    - Patient's Name (1st 22 chars)
"RTN","IBCOPP2",122,0)
 ;                B2    - Last 4 Patient's SSN (with trailing 'P' if pseudo)
"RTN","IBCOPP2",123,0)
 ;                B3    - Patient's DOB (mm/dd/yy)
"RTN","IBCOPP2",124,0)
 ;                B4    - Subscriber ID (20 chars max)
"RTN","IBCOPP2",125,0)
 ;                B5    - Effective Date (mm/dd/yy)
"RTN","IBCOPP2",126,0)
 ;                B6    - Expiration Date (mm/dd/yy)
"RTN","IBCOPP2",127,0)
 ;                B7    - Whose Insurance (5 chars max)
"RTN","IBCOPP2",128,0)
 ;                B8    - Patient ID (30 chars max)
"RTN","IBCOPP2",129,0)
 ;  
"RTN","IBCOPP2",130,0)
 N DFN,IBCDFN,IBIND,IBNAM,IBPTR,IBX,PTLEN,VA,VAERR,VAOA,X,XX,Y
"RTN","IBCOPP2",131,0)
 S DFN=0
"RTN","IBCOPP2",132,0)
 F  S DFN=$O(^DPT("AB",IBCNS,DFN)) Q:'DFN  D
"RTN","IBCOPP2",133,0)
 . S IBCDFN=0
"RTN","IBCOPP2",134,0)
 . ;
"RTN","IBCOPP2",135,0)
 . ; NOTE: IBCDFN is the Insurance Company Multiple that contains the 
"RTN","IBCOPP2",136,0)
 . ;       Insurance company with an IEN of IBCNS
"RTN","IBCOPP2",137,0)
 . F  S IBCDFN=$O(^DPT("AB",IBCNS,DFN,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCOPP2",138,0)
 . . ;
"RTN","IBCOPP2",139,0)
 . . ; Set company subscriber count; plan subscriber counts if necessary
"RTN","IBCOPP2",140,0)
 . . ; MRD;IB*2.0*516 - Use $$ZND^IBCNS1 to pull .312 zero node.
"RTN","IBCOPP2",141,0)
 . . ;S IBIND=$G(^DPT(DFN,.312,+IBCDFN,0)) Q:+IBIND'=IBCNS
"RTN","IBCOPP2",142,0)
 . . S IBIND=$$ZND^IBCNS1(DFN,+IBCDFN)
"RTN","IBCOPP2",143,0)
 . . Q:+IBIND'=IBCNS
"RTN","IBCOPP2",144,0)
 . . S IBPTR=+$P(IBIND,"^",18)              ; Group Plan IEN
"RTN","IBCOPP2",145,0)
 . . Q:'+IBPTR
"RTN","IBCOPP2",146,0)
 . . S IBCST=IBCST+1                        ; Update Total # of Subscribers
"RTN","IBCOPP2",147,0)
 . . ;
"RTN","IBCOPP2",148,0)
 . . ; Quit if not a selected Group Plan and All Group Plans were not selected
"RTN","IBCOPP2",149,0)
 . . I 'IBAPL,'$D(^TMP("IBINC",$J,IBIC,IBCNS,IBPTR)) Q
"RTN","IBCOPP2",150,0)
 . . S IBCSS=IBCSS+1                        ; Update Tot # of Selected Subscribers
"RTN","IBCOPP2",151,0)
 . . S ^TMP($J,"PL",IBPTR)=$G(^TMP($J,"PL",IBPTR))+1
"RTN","IBCOPP2",152,0)
 . . Q:'IBAPA                               ; Subscriber information not selected
"RTN","IBCOPP2",153,0)
 . . ;
"RTN","IBCOPP2",154,0)
 . . ; Gather Demographic/Policy information
"RTN","IBCOPP2",155,0)
 . . ; IB*2.0*549 - Changed fields retrieve for Subscriber Detail display
"RTN","IBCOPP2",156,0)
 . . S X=$$PT^IBEFUNC(DFN)
"RTN","IBCOPP2",157,0)
 . . S IBNAM=$E($P(X,"^",1),1,22)               ; Patient's Name (22 chars)
"RTN","IBCOPP2",158,0)
 . . S:IBNAM="" IBNAM="<Pt. "_DFN_" Name Missing>"
"RTN","IBCOPP2",159,0)
 . . S IBX=IBNAM
"RTN","IBCOPP2",160,0)
 . . ;
"RTN","IBCOPP2",161,0)
 . . ; Retrieve last 4 of SSN (last 5 if pseudo SSN)
"RTN","IBCOPP2",162,0)
 . . S XX=$$GET1^DIQ(2,DFN_",",.09,"I")         ; Patient's SSN
"RTN","IBCOPP2",163,0)
 . . S XX=$S($E(XX,$L(XX))="P":$E(XX,$L(XX)-4,$L(XX)),1:$E(XX,$L(XX)-3,$L(XX)))
"RTN","IBCOPP2",164,0)
 . . S $P(IBX,"^",2)=XX
"RTN","IBCOPP2",165,0)
 . . S XX=$$GET1^DIQ(2,DFN_",",.03,"I")         ; Patient's DOB
"RTN","IBCOPP2",166,0)
 . . S $P(IBX,"^",3)=$$FMTE^XLFDT(XX,"2DZ")
"RTN","IBCOPP2",167,0)
 . . S XX=$P(IBIND,"^",2),XX=$S(XX'="":XX,1:"<NO SUBS ID>")
"RTN","IBCOPP2",168,0)
 . . S $P(IBX,"^",4)=XX                         ; Subscriber ID (20 chars max)
"RTN","IBCOPP2",169,0)
 . . S XX=$$FMTE^XLFDT($P(IBIND,"^",8),"2DZ")   ; Effective Date
"RTN","IBCOPP2",170,0)
 . . S $P(IBX,"^",5)=XX
"RTN","IBCOPP2",171,0)
 . . S XX=$$FMTE^XLFDT($P(IBIND,"^",4),"2DZ")   ; Expiration Date
"RTN","IBCOPP2",172,0)
 . . S $P(IBX,"^",6)=XX
"RTN","IBCOPP2",173,0)
 . . ;
"RTN","IBCOPP2",174,0)
 . . ; Whose Insurance?
"RTN","IBCOPP2",175,0)
 . . S XX=$P(IBIND,"^",6),XX=$S(XX="v":"VET",XX="s":"SPO",XX="o":"OTH",1:"UNK")
"RTN","IBCOPP2",176,0)
 . . S $P(IBX,"^",7)=XX
"RTN","IBCOPP2",177,0)
 . . S XX=$$GET1^DIQ(2.312,IBCDFN_","_DFN_",",5.01,"I")  ; Patient ID
"RTN","IBCOPP2",178,0)
 . . S $P(IBX,"^",8)=XX
"RTN","IBCOPP2",179,0)
 . . S:LENPID<$L(XX) LENPID=$L(XX)
"RTN","IBCOPP2",180,0)
 . . S ^TMP($J,"PR",IBI,IBPTR,IBNAM_"@@"_DFN_"@@"_IBCDFN)=IBX
"RTN","IBCOPP2",181,0)
 Q
"RTN","IBCOPP2",182,0)
 ;
"RTN","IBCOPP2",183,0)
PLAN(LENEP,LENPT) ; Gather Group Insurance Plan information
"RTN","IBCOPP2",184,0)
 ; Input:   LENEP   - Current Maximum Electronic Plan length for Ins Co
"RTN","IBCOPP2",185,0)
 ;          LENPT   - Current Maximum Plan Type length for Ins Co
"RTN","IBCOPP2",186,0)
 ;          IBAPL   - 0 - User selected Group Plans
"RTN","IBCOPP2",187,0)
 ;                    1 - All Group Plans
"RTN","IBCOPP2",188,0)
 ;          IBCNS   - IEN of the Insurance Company, file #36
"RTN","IBCOPP2",189,0)
 ;          IBPTR   - IEN of the Group Insurance Plan, file 355.3
"RTN","IBCOPP2",190,0)
 ;          ^TMP("IBINC",$J,IBIC,ICBNS,IBPTR)) - See EN for details
"RTN","IBCOPP2",191,0)
 ;          ^TMP($J,"PL",IBPTR)                - Total # Subscribers for Group Plan
"RTN","IBCOPP2",192,0)
 ; Output:  LENEP   - Updated Maximum Electronic Plan length for Ins Co
"RTN","IBCOPP2",193,0)
 ;          LENPT   - Updated Maximum Plan Type length for Ins Co
"RTN","IBCOPP2",194,0)
 ;          IBCPS   - Total Number of Selected Group Plans for Ins. Co.
"RTN","IBCOPP2",195,0)
 ;          IBCPT   - Total # of Group Plans for Insurance Company
"RTN","IBCOPP2",196,0)
 ;          ^TMP($J,"PR",IBI,IBPTR)) - B1^B2^..^B6 where
"RTN","IBCOPP2",197,0)
 ;             IBI  - Counter of # of Insurance Companies included
"RTN","IBCOPP2",198,0)
 ;             IBPTR- Group Plan IEN
"RTN","IBCOPP2",199,0)
 ;             B1   - Group Number, field 355.3,2.02
"RTN","IBCOPP2",200,0)
 ;             B2   - Group Name, field 355.3,2.01
"RTN","IBCOPP2",201,0)
 ;             B3   - Group Plan Timely Filing Time frame (max len 21)
"RTN","IBCOPP2",202,0)
 ;             B4   - Electronic Plan Type (max length 26)
"RTN","IBCOPP2",203,0)
 ;             B5   - Type of Plan (max length 34)
"RTN","IBCOPP2",204,0)
 ;             B6   - Total # of subscribers for this Group Plan
"RTN","IBCOPP2",205,0)
 ;
"RTN","IBCOPP2",206,0)
 N IBPTR
"RTN","IBCOPP2",207,0)
 S IBPTR=0
"RTN","IBCOPP2",208,0)
 F  S IBPTR=$O(^IBA(355.3,"B",IBCNS,IBPTR)) Q:'IBPTR  D
"RTN","IBCOPP2",209,0)
 . S IBCPT=IBCPT+1                          ; Total # of Group Plans for Ins. Co.
"RTN","IBCOPP2",210,0)
 . ;
"RTN","IBCOPP2",211,0)
 . ; Quit if Group Plan was not selected by the user
"RTN","IBCOPP2",212,0)
 . I 'IBAPL,'$D(^TMP("IBINC",$J,IBIC,IBCNS,IBPTR)) Q
"RTN","IBCOPP2",213,0)
 . S IBCPS=IBCPS+1                          ; Total # of Selected Group Plans
"RTN","IBCOPP2",214,0)
 . S ^TMP($J,"PR",IBI,IBPTR)=$$PLANINF(IBPTR,.LENEP,.LENPT)_"^"_+$G(^TMP($J,"PL",IBPTR))
"RTN","IBCOPP2",215,0)
 Q
"RTN","IBCOPP2",216,0)
 ;
"RTN","IBCOPP2",217,0)
PLANINF(PLAN,LENEP,LENPT) ; Return formatted Group Insurance Plan information.
"RTN","IBCOPP2",218,0)
 ; Input:   PLAN    -  IEN of the Group Insurance Plan, file #355.3
"RTN","IBCOPP2",219,0)
 ;          LENEP   - Current Maximum Electronic Plan length for Ins Co
"RTN","IBCOPP2",220,0)
 ;          LENPT   - Current Maximum Plan Type length for Ins Co
"RTN","IBCOPP2",221,0)
 ; Output:  LENEP   - Updated Maximum Electronic Plan length for Ins Co
"RTN","IBCOPP2",222,0)
 ;          LENPT   - Updated Maximum Plan Type length for Ins Co
"RTN","IBCOPP2",223,0)
 ; Returns: A1^A2^A3^...^AN Where:
"RTN","IBCOPP2",224,0)
 ;            A1 - Group Plan Number
"RTN","IBCOPP2",225,0)
 ;            A2 - Group Plan Name (leading '*' if Inactive)
"RTN","IBCOPP2",226,0)
 ;            A3 - Group Plan Timely Filing Time frame (max len 21)
"RTN","IBCOPP2",227,0)
 ;            A4 - Electronic Plan Type (max length 26)
"RTN","IBCOPP2",228,0)
 ;            A5 - Type of Plan (max length 34)
"RTN","IBCOPP2",229,0)
 ;
"RTN","IBCOPP2",230,0)
 ; IB*2.0*549 Changed output to fields listed above
"RTN","IBCOPP2",231,0)
 N NAME,NUM,XX,ZZ
"RTN","IBCOPP2",232,0)
 S NUM=$$GET1^DIQ(355.3,PLAN,2.02)
"RTN","IBCOPP2",233,0)
 S:NUM="" NUM="<NO GROUP NUMBER>"
"RTN","IBCOPP2",234,0)
 S XX=$$GET1^DIQ(355.3,PLAN,.02,"I")        ; Group or Individual Plan
"RTN","IBCOPP2",235,0)
 S XX=$S(XX=1:"",1:"+")
"RTN","IBCOPP2",236,0)
 S ZZ=$$GET1^DIQ(355.3,PLAN,.11,"I")        ; Inactive Flag
"RTN","IBCOPP2",237,0)
 S ZZ=XX_$S(ZZ=1:"*",1:"")
"RTN","IBCOPP2",238,0)
 S $P(XX,"^",1)=ZZ_NUM                      ; Add Inactive/Individual flags
"RTN","IBCOPP2",239,0)
 S NAME=$$GET1^DIQ(355.3,PLAN,2.01)
"RTN","IBCOPP2",240,0)
 S:NAME="" NAME="<NO GROUP NAME>"
"RTN","IBCOPP2",241,0)
 S $P(XX,"^",2)=NAME                        ; Group Name
"RTN","IBCOPP2",242,0)
 S $P(XX,"^",3)=$$FTFGP^IBCNEUT7(PLAN)      ; Timely Filing Time Frame
"RTN","IBCOPP2",243,0)
 S ZZ=$$GET1^DIQ(355.3,PLAN_",",.15)        ; Electronic Plan Type
"RTN","IBCOPP2",244,0)
 S:$L(ZZ)>LENEP LENEP=$L(ZZ)                ; Maximum Electronic Plan length
"RTN","IBCOPP2",245,0)
 S $P(XX,"^",4)=ZZ
"RTN","IBCOPP2",246,0)
 S ZZ=$$GET1^DIQ(355.3,PLAN_",",.09)        ; Type of Plan
"RTN","IBCOPP2",247,0)
 S:$L(ZZ)>34 ZZ=$E(ZZ,1,34)
"RTN","IBCOPP2",248,0)
 S:$L(ZZ)>LENEP LENEP=$L(ZZ)                ; Maximum Plan Type length
"RTN","IBCOPP2",249,0)
 S $P(XX,"^",5)=ZZ
"RTN","IBCOPP2",250,0)
 Q XX
"RTN","IBCOPP2",251,0)
 ;
"RTN","IBCOPP2",252,0)
COMPINF(IBCNS) ; Return formatted Insurance Company information
"RTN","IBCOPP2",253,0)
 ; Input:   IBCNS   - IEN of the Insurance Company, file #36
"RTN","IBCOPP2",254,0)
 ; Output:  A1^A2^A3^A4 Where:
"RTN","IBCOPP2",255,0)
 ;           A1  - Insurance Company name (first 25 chars)
"RTN","IBCOPP2",256,0)
 ;                 with leading '*' if inactive
"RTN","IBCOPP2",257,0)
 ;           A2  - Street Address Line 1
"RTN","IBCOPP2",258,0)
 ;           A3  - City, ST ZIP
"RTN","IBCOPP2",259,0)
 ;           A4  - Timely Filing
"RTN","IBCOPP2",260,0)
 ;
"RTN","IBCOPP2",261,0)
 ; IB*2.0*549 Changed output to fields listed above
"RTN","IBCOPP2",262,0)
 N ST,X,X0,X11,XX,Z,ZZ
"RTN","IBCOPP2",263,0)
 S X0=$G(^DIC(36,IBCNS,0))
"RTN","IBCOPP2",264,0)
 S X11=$G(^DIC(36,IBCNS,.11))
"RTN","IBCOPP2",265,0)
 S Z=$P(X11,"^",6)
"RTN","IBCOPP2",266,0)
 S ST=$S($P(X11,"^",5):$P($G(^DIC(5,$P(X11,"^",5),0)),"^",2),1:"<STATE MISSING>")
"RTN","IBCOPP2",267,0)
 S XX=$S($P(X0,"^",5):"*",1:"")
"RTN","IBCOPP2",268,0)
 S X=XX_$E($P(X0,"^",1),1,25)
"RTN","IBCOPP2",269,0)
 S $P(X,"^",2)=$S($P(X11,"^",1)'="":$P(X11,"^",1),1:"<Street Addr. 1 Missing>")
"RTN","IBCOPP2",270,0)
 S $P(X,"^",3)=$P(X11,"^",4)_", "_ST_"  "_$E(Z,1,5)_$S($E(Z,6,9)]"":"-"_$E(Z,6,9),1:"")
"RTN","IBCOPP2",271,0)
 S $P(X,"^",4)=$$FTFIC^IBCNEUT7(IBCNS)
"RTN","IBCOPP2",272,0)
 Q X
"RTN","IBCOPP3")
0^26^B54551933
"RTN","IBCOPP3",1,0)
IBCOPP3 ;ALB/NLR - LIST INS. PLANS BY CO. (PRINT) ; 20-OCT-2015
"RTN","IBCOPP3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,516,528,549**;21-MAR-94;Build 54
"RTN","IBCOPP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCOPP3",4,0)
 ;
"RTN","IBCOPP3",5,0)
 ; Print the report.
"RTN","IBCOPP3",6,0)
 ; Input:   IBAI            - 0 - Only Selected Insurance Companies
"RTN","IBCOPP3",7,0)
 ;                            1 - All Insurance Companies
"RTN","IBCOPP3",8,0)
 ;          IBAIA           - 0 - Only select Inactive Insurance Companies
"RTN","IBCOPP3",9,0)
 ;                            1 - Only select Active Insurance Companies
"RTN","IBCOPP3",10,0)
 ;                            2 - Select both Active and Inactive Insurance
"RTN","IBCOPP3",11,0)
 ;                                Companies
"RTN","IBCOPP3",12,0)
 ;          IBAO            - E - Output to Excel
"RTN","IBCOPP3",13,0)
 ;                            R - Report
"RTN","IBCOPP3",14,0)
 ;          IBAPA           - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP3",15,0)
 ;                            1 - List Insurance Plans by Insurance Company
"RTN","IBCOPP3",16,0)
 ;                                with Subscriber information
"RTN","IBCOPP3",17,0)
 ;          IBAIPA          - 0 - Only select Inactive Insurance Company Plans
"RTN","IBCOPP3",18,0)
 ;                            1 - Only select Active Insurance Company Plans
"RTN","IBCOPP3",19,0)
 ;                            2 - Select both Active and Inactive Insurance 
"RTN","IBCOPP3",20,0)
 ;                                Company Plans
"RTN","IBCOPP3",21,0)
 ;          IBAPL           - 0 - Only list selected plans for Insurance Companies
"RTN","IBCOPP3",22,0)
 ;                            1 - List all plans for selected Insurance Companies
"RTN","IBCOPP3",23,0)
 ;          ^TMP($J,"PR"    - Global Print Array
"RTN","IBCOPP3",24,0)
 ;          ^TMP($J,"PR",IBI)=A1^A2^...^A10 Where:
"RTN","IBCOPP3",25,0)
 ;                             IBI  - Counter of # of Insurance Companies included
"RTN","IBCOPP3",26,0)
 ;                                    (starts at 1)
"RTN","IBCOPP3",27,0)
 ;                             A1   - Insurance Company Name (1st 25 characters)
"RTN","IBCOPP3",28,0)
 ;                             A2   - Street Address Line 1
"RTN","IBCOPP3",29,0)
 ;                             A3   - City, State Zip Code (up to 9 digits + dash)
"RTN","IBCOPP3",30,0)
 ;                             A4   - Timely Filing Timeframe
"RTN","IBCOPP3",31,0)
 ;                             A5   - # of total plans for the Insurance Company
"RTN","IBCOPP3",32,0)
 ;                             A6   - # of total subscribers per Insurance Company
"RTN","IBCOPP3",33,0)
 ;                             A7   - # of selected Plans per Insurance Company
"RTN","IBCOPP3",34,0)
 ;                             A8   - # of subscribers per selected plans
"RTN","IBCOPP3",35,0)
 ;                             A9   - Maximum Length of the Electronic Plan
"RTN","IBCOPP3",36,0)
 ;                                    Field for this Insurance Company
"RTN","IBCOPP3",37,0)
 ;                             A10  - Maximum Length of the Type of Plan
"RTN","IBCOPP3",38,0)
 ;                                    Field for this Insurance Company
"RTN","IBCOPP3",39,0)
 ;                             A11  - Max length of Patient ID for Ins Co
"RTN","IBCOPP3",40,0)
 ;          ^TMP($J,"PR",IBI,IBPTR))- B1^B2^..^B6 where
"RTN","IBCOPP3",41,0)
 ;                             IBI  - Counter of # of Insurance Companies included
"RTN","IBCOPP3",42,0)
 ;                             IBPTR- Group Plan IEN, file 355.3
"RTN","IBCOPP3",43,0)
 ;                             B1   - Group Number, field 355.3,2.02
"RTN","IBCOPP3",44,0)
 ;                             B2   - Group Name, field 355.3,2.01
"RTN","IBCOPP3",45,0)
 ;                             B3   - Group Plan Timely Filing Time frame (max len 21)
"RTN","IBCOPP3",46,0)
 ;                             B4   - Electronic Plan Type (max length 26)
"RTN","IBCOPP3",47,0)
 ;                             B5   - Type of Plan (max length 34)
"RTN","IBCOPP3",48,0)
 ;                             B6   - Total number of subscribers for Group Plan
"RTN","IBCOPP3",49,0)
 ;          ^TMP($J,"PR",IBI,IBPTR,IBNAM_"@@"_DFN_"@@"_IBCDFN)=B1^B2^...^B8 Where
"RTN","IBCOPP3",50,0)
 ;                DFN   - IEN of the patient, file 2
"RTN","IBCOPP3",51,0)
 ;                IBCDFN- Insurance Company multiple
"RTN","IBCOPP3",52,0)
 ;                IBI   - Insurance counter
"RTN","IBCOPP3",53,0)
 ;                IBNAM - Patient's Name (B1)
"RTN","IBCOPP3",54,0)
 ;                IBPTR - IEN of the Group Plan, file 355.3
"RTN","IBCOPP3",55,0)
 ;                B1    - Patient's Name (1st 22 chars)
"RTN","IBCOPP3",56,0)
 ;                B2    - Last 4 Patient's SSN (with trailing 'P' if pseudo)
"RTN","IBCOPP3",57,0)
 ;                B3    - Patient's DOB (mm/dd/yy)
"RTN","IBCOPP3",58,0)
 ;                B4    - Subscriber ID (20 chars max)
"RTN","IBCOPP3",59,0)
 ;                B5    - Effective Date (mm/dd/yy)
"RTN","IBCOPP3",60,0)
 ;                B6    - Expiration Date (mm/dd/yy)
"RTN","IBCOPP3",61,0)
 ;                B7    - Whose Insurance (5 chars max)
"RTN","IBCOPP3",62,0)
 ;                B8    - Patient ID (30 chars max)
"RTN","IBCOPP3",63,0)
 ;
"RTN","IBCOPP3",64,0)
 N COLEP,COLFTF,COLPID,TRUNCPT,XX,%
"RTN","IBCOPP3",65,0)
 I IBAO="E" D  Q
"RTN","IBCOPP3",66,0)
 . D EXCEL
"RTN","IBCOPP3",67,0)
 . W !!?30,"*** End of Report ***"
"RTN","IBCOPP3",68,0)
 ;
"RTN","IBCOPP3",69,0)
 S (IBI,IBQUIT,IBPAG)=0
"RTN","IBCOPP3",70,0)
 D NOW^%DTC
"RTN","IBCOPP3",71,0)
 S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCOPP3",72,0)
 ;
"RTN","IBCOPP3",73,0)
 F  S IBI=$O(^TMP($J,"PR",IBI)) Q:'IBI  S IBC=$G(^TMP($J,"PR",IBI)) D  Q:IBQUIT
"RTN","IBCOPP3",74,0)
 . D COMP(.COLEP,.COLFTF,.TRUNCPT)
"RTN","IBCOPP3",75,0)
 . S IBP=0
"RTN","IBCOPP3",76,0)
 . F  S IBP=$O(^TMP($J,"PR",IBI,IBP)) Q:'IBP  S IBPD=$G(^(IBP)) D  Q:IBQUIT
"RTN","IBCOPP3",77,0)
 . . I $Y>(IOSL-$S(IBAPA:9,1:5)) D PAUSE Q:IBQUIT  D COMP(.COLEP,.COLFTF,.TRUNCPT)
"RTN","IBCOPP3",78,0)
 . . D PLAN(COLEP,COLFTF,TRUNCPT)
"RTN","IBCOPP3",79,0)
 . . ; 
"RTN","IBCOPP3",80,0)
 . . ; Display Subscriber Information
"RTN","IBCOPP3",81,0)
 . . I IBAPA D
"RTN","IBCOPP3",82,0)
 . . . S XX=$O(^TMP($J,"PR",IBI,IBP,""))    ; Are the subscribers to display
"RTN","IBCOPP3",83,0)
 . . . D:XX'="" SUBHDR                      ; Display Subscriber Headers
"RTN","IBCOPP3",84,0)
 . . . S IBS=""
"RTN","IBCOPP3",85,0)
 . . . F  S IBS=$O(^TMP($J,"PR",IBI,IBP,IBS)) Q:IBS=""  D  Q:IBQUIT
"RTN","IBCOPP3",86,0)
 . . . . S IBSD=$G(^TMP($J,"PR",IBI,IBP,IBS))
"RTN","IBCOPP3",87,0)
 . . . . D SUBS
"RTN","IBCOPP3",88,0)
 . Q:IBQUIT
"RTN","IBCOPP3",89,0)
 . ;
"RTN","IBCOPP3",90,0)
 . ; Print company totals
"RTN","IBCOPP3",91,0)
 . I $Y>(IOSL-4) D PAUSE Q:IBQUIT  D
"RTN","IBCOPP3",92,0)
 . . D COMP(.COLEP,.COLFTF,.TRUNCPT)
"RTN","IBCOPP3",93,0)
 . . D PLAN(COLEP,COLFTF,TRUNCPT)
"RTN","IBCOPP3",94,0)
 . W !!?90,"Number of Plans Selected = ",$P(IBC,"^",7)
"RTN","IBCOPP3",95,0)
 . W !?76,"Total Subscribers Under Selected Plans = ",$P(IBC,"^",8)
"RTN","IBCOPP3",96,0)
 . D PAUSE
"RTN","IBCOPP3",97,0)
 ;
"RTN","IBCOPP3",98,0)
 ; IB*2.0*549 - Added next line
"RTN","IBCOPP3",99,0)
 W !!?30,"*** End of Report ***"
"RTN","IBCOPP3",100,0)
 ;
"RTN","IBCOPP3",101,0)
 K IBAIA,IBAIPA,IBAPA,IBJJ,IBI,IBQUIT,IBPAG,IBHDT,IBC,IBP,IBPD,IBS,IBSD
"RTN","IBCOPP3",102,0)
 Q
"RTN","IBCOPP3",103,0)
 ;
"RTN","IBCOPP3",104,0)
COMP(COLEP,COLFTF,TRUNCPT) ; Print Company header
"RTN","IBCOPP3",105,0)
 ; Input:   IBC     - ^TMP($J,"PR",IBC), see documentation above
"RTN","IBCOPP3",106,0)
 ;          IBPAG   - Current Page Counter
"RTN","IBCOPP3",107,0)
 ;          IBHDT   - Current date/time (external format)
"RTN","IBCOPP3",108,0)
 ;          IBAIA   - 0 - Only select Inactive Insurance Companies
"RTN","IBCOPP3",109,0)
 ;                    1 - Only select Active Insurance Companies
"RTN","IBCOPP3",110,0)
 ;                    2 - Select both Active and Inactive Insurance Companies
"RTN","IBCOPP3",111,0)
 ;          IBAIPA  - 0 - Only select Inactive Insurance Company Plans
"RTN","IBCOPP3",112,0)
 ;                    1 - Only select Active Insurance Company Plans
"RTN","IBCOPP3",113,0)
 ;                    2 - Select both Active and Inactive Insurance Company Plans
"RTN","IBCOPP3",114,0)
 ;          IBAPA   - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP3",115,0)
 ;                    1 - List Insurance Plans by Insurance Company with
"RTN","IBCOPP3",116,0)
 ;                        Subscriber information
"RTN","IBCOPP3",117,0)
 ; Output:  COLEP   - Starting Column Position of the Electronic Plan Type Col
"RTN","IBCOPP3",118,0)
 ;          COLFTF  - Starting Column Position of the FTF Col
"RTN","IBCOPP3",119,0)
 ;          TRUNCPT - # of characters to truncate from the Plan Type field (if any)   
"RTN","IBCOPP3",120,0)
 ;          IBPAG   - Updated Page Counter
"RTN","IBCOPP3",121,0)
 N LENEP,LENPT
"RTN","IBCOPP3",122,0)
 K COLEP,COLFTF,TRUNCPT
"RTN","IBCOPP3",123,0)
 S LENPT=$P(IBC,"^",9),LENEP=$P(IBC,"^",10)
"RTN","IBCOPP3",124,0)
 I $E(IOST,1,2)="C-"!(IBPAG) W @IOF
"RTN","IBCOPP3",125,0)
 S IBPAG=IBPAG+1
"RTN","IBCOPP3",126,0)
 W !,"LIST OF PLANS BY INSURANCE COMPANY"
"RTN","IBCOPP3",127,0)
 W:IBAPA " WITH SUBSCRIBER INFORMATION"
"RTN","IBCOPP3",128,0)
 W ?IOM-34,IBHDT,?IOM-10,"Page: ",IBPAG
"RTN","IBCOPP3",129,0)
 W !,$TR($J(" ",IOM)," ","-")
"RTN","IBCOPP3",130,0)
 ;
"RTN","IBCOPP3",131,0)
 ; IB*2.0*549 - Added next 3 lines
"RTN","IBCOPP3",132,0)
 W !,"+ =>INDIV. PLAN    * => INACTIVE"
"RTN","IBCOPP3",133,0)
 W !,"Filters: ",$S(IBAI=1:"All",1:"Selected")," Insurances"
"RTN","IBCOPP3",134,0)
 W ", ",$S(IBAPL=1:"All",1:"Selected")," Group Plans",!
"RTN","IBCOPP3",135,0)
 ;
"RTN","IBCOPP3",136,0)
 ; IB*2.0*549 - Changed fields displayed for each Insurance Company
"RTN","IBCOPP3",137,0)
 W !?1,$P(IBC,"^",1)                        ; Insurance Company Name (26 chars max)
"RTN","IBCOPP3",138,0)
 W !?1,$P(IBC,"^",2)                        ; Street Address line 1 (35 chars max)
"RTN","IBCOPP3",139,0)
 W ?45,"FTF = ",$P(IBC,"^",4)               ; Timely Filing Timeframe (28 chars max)
"RTN","IBCOPP3",140,0)
 W ?105,"GROUP PLAN TOTAL= ",$P(IBC,"^",5)
"RTN","IBCOPP3",141,0)
 W !?1,$P(IBC,"^",3)                        ; City State Zip Code
"RTN","IBCOPP3",142,0)
 W ?105,"SUBSCRIBER TOTAL= ",$P(IBC,"^",6)
"RTN","IBCOPP3",143,0)
 ;
"RTN","IBCOPP3",144,0)
 ; Check to see if the Plan Type and/or Electronic Plan Type fields need to be
"RTN","IBCOPP3",145,0)
 ; truncated
"RTN","IBCOPP3",146,0)
 S COLEP=$S(LENPT<13:76,LENPT:64+LENPT+3,1:76)  ; Elec Plan Col, assuming no truncation
"RTN","IBCOPP3",147,0)
 S COLFTF=$S(LENEP<10:COLEP+13,1:COLEP+LENEP+3) ; FTF Col, assuming no truncation
"RTN","IBCOPP3",148,0)
 S:'LENEP COLFTF=COLFTF+8
"RTN","IBCOPP3",149,0)
 S TRUNCPT=0                                ; Assume no truncation needed
"RTN","IBCOPP3",150,0)
 I 64+$P(IBC,"^",9)+$P(IBC,"^",10)>103 D
"RTN","IBCOPP3",151,0)
 . S TRUNCPT=(64+$P(IBC,"^",10))-103        ; # of Characters to truncate
"RTN","IBCOPP3",152,0)
 . S COLEP=(64+$P(IBC,"^",10)+3)-TRUNCPT
"RTN","IBCOPP3",153,0)
 . S COLFTF=COLEP+$P(IBC,"^",9)+2           ; FTF Col
"RTN","IBCOPP3",154,0)
 W !?5,"GROUP NUMBER",?32,"GROUP NAME",?62,"TYPE OF PLAN"
"RTN","IBCOPP3",155,0)
 W ?COLEP,"ELEC PLAN",?COLFTF,"FTF"
"RTN","IBCOPP3",156,0)
 Q
"RTN","IBCOPP3",157,0)
 ;
"RTN","IBCOPP3",158,0)
PLAN(COLEP,COLFTF,TRUNCPT) ; Print Group Plan information.
"RTN","IBCOPP3",159,0)
 ; Input:   COLEP   - Starting Column Position of the Electronic Plan Type Col
"RTN","IBCOPP3",160,0)
 ;          COLFTF  - Starting Column Position of the FTF Col
"RTN","IBCOPP3",161,0)
 ;          TRUNCPT - # of characters to truncate from the Plan Type field (if any)   
"RTN","IBCOPP3",162,0)
 ;          IBPD    - ^TMP($J,"PR",IBC,IBPTR), see documentation above
"RTN","IBCOPP3",163,0)
 ;          IBAPA   - 0 - List Insurance Plans by Insurance Company
"RTN","IBCOPP3",164,0)
 ;                    1 - List Insurance Plans by Insurance Company with
"RTN","IBCOPP3",165,0)
 ;                        Subscriber information
"RTN","IBCOPP3",166,0)
 ;          ^TMP($J,"PR",IBI,IBPTR))- B1^B2^..^B6 where
"RTN","IBCOPP3",167,0)
 ;                             IBI  - Counter of # of Insurance Companies included
"RTN","IBCOPP3",168,0)
 ;                             IBPTR- Group Plan IEN
"RTN","IBCOPP3",169,0)
 ;                             B1   - Group Number, field 355.3,2.02
"RTN","IBCOPP3",170,0)
 ;                             B2   - Group Name, field 355.3,2.01
"RTN","IBCOPP3",171,0)
 ;                             B3   - Group Plan Timely Filing Time frame (max len 21)
"RTN","IBCOPP3",172,0)
 ;                             B4   - Electronic Plan Type (max length 26)
"RTN","IBCOPP3",173,0)
 ;                             B5   - Type of Plan (max length 40)
"RTN","IBCOPP3",174,0)
 ;                             B6   - Total # of subscribers for Group Plan
"RTN","IBCOPP3",175,0)
 ;
"RTN","IBCOPP3",176,0)
 ; IB*2.0*549 - Changed fields displayed for each Group Plan
"RTN","IBCOPP3",177,0)
 N XX
"RTN","IBCOPP3",178,0)
 W !?5,$P(IBPD,"^",1)                       ; Group Plan Number
"RTN","IBCOPP3",179,0)
 W ?32,$P(IBPD,"^",2)                       ; Group Plan Name
"RTN","IBCOPP3",180,0)
 S XX=$P(IBPD,"^",5)
"RTN","IBCOPP3",181,0)
 S:TRUNCPT XX=$E(XX,1,$L(XX)-TRUNCPT)
"RTN","IBCOPP3",182,0)
 W ?62,XX                                   ; Type of Plan (40 Chars max)
"RTN","IBCOPP3",183,0)
 W ?COLEP,$P(IBPD,"^",4)                    ; Electronic Plan Type (26 Chars max)
"RTN","IBCOPP3",184,0)
 W ?COLFTF,$P(IBPD,"^",3)                   ; Group Plan FTF (26 Chars max)
"RTN","IBCOPP3",185,0)
 W !?10,"SUBSCRIBERS = ",$P(IBPD,"^",6)     ; Group Plan Subscriber total
"RTN","IBCOPP3",186,0)
 Q
"RTN","IBCOPP3",187,0)
 ;
"RTN","IBCOPP3",188,0)
SUBHDR ; Print the Subscriber Header Line
"RTN","IBCOPP3",189,0)
 ; IB*2.0*549 New Method
"RTN","IBCOPP3",190,0)
 W !?10,"SUBSCRIBER NAME",?35,"SSN",?43,"DOB",?53,"SUB ID",?76,"EFF",?86,"EXP"
"RTN","IBCOPP3",191,0)
 W ?96,"WHO",?102,"PAT ID"
"RTN","IBCOPP3",192,0)
 Q
"RTN","IBCOPP3",193,0)
 ;
"RTN","IBCOPP3",194,0)
SUBS ; Print subscriber information.
"RTN","IBCOPP3",195,0)
 ; IB*2.0*549 Changed fields displayed
"RTN","IBCOPP3",196,0)
 ; Input:   IBSD        - Subscriber detail - ^TMP($J,"PR",IBI,IBP,IBS)
"RTN","IBCOPP3",197,0)
 ; Subscriber ID to display more characters.
"RTN","IBCOPP3",198,0)
 N COLEP,COLFTF,TRUNCPT
"RTN","IBCOPP3",199,0)
 I $Y>(IOSL-4) D PAUSE Q:IBQUIT  D
"RTN","IBCOPP3",200,0)
 . D COMP(.COLEP,.COLFTF,.TRUNCPT)
"RTN","IBCOPP3",201,0)
 . D PLAN(COLEP,COLFTF,TRUNCPT)
"RTN","IBCOPP3",202,0)
 . D SUBHDR
"RTN","IBCOPP3",203,0)
 W !?10,$P(IBSD,"^",1),?35,$P(IBSD,"^",2),?43,$P(IBSD,"^",3),?53,$P(IBSD,"^",4)
"RTN","IBCOPP3",204,0)
 W ?76,$P(IBSD,"^",5),?86,$P(IBSD,"^",6),?96,$P(IBSD,"^",7),?102,$P(IBSD,"^",8)
"RTN","IBCOPP3",205,0)
 Q
"RTN","IBCOPP3",206,0)
 ;
"RTN","IBCOPP3",207,0)
PAUSE ; Pause for screen output.
"RTN","IBCOPP3",208,0)
 ; Input:   None
"RTN","IBCOPP3",209,0)
 ; Output:  IBQUIT  - 1 if user timed out or entered '^'
"RTN","IBCOPP3",210,0)
 N DIR,DIRUT,DTOUT,DUOUT,IBJJ
"RTN","IBCOPP3",211,0)
 Q:$E(IOST,1,2)'["C-"
"RTN","IBCOPP3",212,0)
 S DIR(0)="E"
"RTN","IBCOPP3",213,0)
 D ^DIR K DIR
"RTN","IBCOPP3",214,0)
 I $D(DIRUT)!($D(DUOUT)) D
"RTN","IBCOPP3",215,0)
 . S IBQUIT=1
"RTN","IBCOPP3",216,0)
 Q
"RTN","IBCOPP3",217,0)
 ;
"RTN","IBCOPP3",218,0)
EXCEL ; Output in excel format
"RTN","IBCOPP3",219,0)
 N HDR,IBC,IBHDT,IBP,IBPD,IBS,IBSD
"RTN","IBCOPP3",220,0)
 D NOW^%DTC
"RTN","IBCOPP3",221,0)
 S IBHDT=$$DAT2^IBOUTL($E(%,1,12))
"RTN","IBCOPP3",222,0)
 ;
"RTN","IBCOPP3",223,0)
 ; Set Report Header into output
"RTN","IBCOPP3",224,0)
 W !,"LIST OF PLANS BY INSURANCE COMPANY"
"RTN","IBCOPP3",225,0)
 W:IBAPA " WITH SUBSCRIBER INFORMATION"
"RTN","IBCOPP3",226,0)
 W "          Run On: ",IBHDT
"RTN","IBCOPP3",227,0)
 ;
"RTN","IBCOPP3",228,0)
 ; Set filter into output
"RTN","IBCOPP3",229,0)
 ; IB*2.0*549 - Added next 3 lines
"RTN","IBCOPP3",230,0)
 W !,"+ =>INDIV. PLAN    * => INACTIVE"
"RTN","IBCOPP3",231,0)
 W !,"Filters: ",$S(IBAI=1:"All",1:"Selected")," Insurances"
"RTN","IBCOPP3",232,0)
 W ", ",$S(IBAPL=1:"All",1:"Selected")," Group Plans",!
"RTN","IBCOPP3",233,0)
 ;
"RTN","IBCOPP3",234,0)
 S HDR="INS. CO.^ADDRESS^CITY,STATE ZIP^FTF^PLAN TOTAL^SUBS TOTAL^PLANS SELECTED^TOT SUBS"
"RTN","IBCOPP3",235,0)
 S HDR=HDR_"^GROUP NUMBER^GROUP NAME^FTF^ELEC PLAN^TYPE OF PLAN^NO. SUBS"
"RTN","IBCOPP3",236,0)
 I IBAPA S HDR=HDR_"^SUBSCRIBER NAME^SSN^DOB^SUB ID^EFF DT^EXP DT^WHOSE INS^PAT ID"
"RTN","IBCOPP3",237,0)
 W !,HDR
"RTN","IBCOPP3",238,0)
 S IBI=0
"RTN","IBCOPP3",239,0)
 F  S IBI=$O(^TMP($J,"PR",IBI)) Q:'IBI  S IBC=$G(^TMP($J,"PR",IBI)) D
"RTN","IBCOPP3",240,0)
 . S IBC=$P(IBC,"^",1,8),IBP=0
"RTN","IBCOPP3",241,0)
 . F  S IBP=$O(^TMP($J,"PR",IBI,IBP)) Q:'IBP  S IBPD=$G(^TMP($J,"PR",IBI,IBP)) D
"RTN","IBCOPP3",242,0)
 . . I 'IBAPA W !,IBC_U_IBPD Q
"RTN","IBCOPP3",243,0)
 . . S IBS=""
"RTN","IBCOPP3",244,0)
 . . F  S IBS=$O(^TMP($J,"PR",IBI,IBP,IBS)) Q:IBS=""  S IBSD=$G(^TMP($J,"PR",IBI,IBP,IBS)) D
"RTN","IBCOPP3",245,0)
 . . . W !,IBC_U_IBPD_U_IBSD
"RTN","IBCOPP3",246,0)
 Q
"RTN","IBJPI")
0^9^B42432107
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP eIV SITE PARAMETERS SCREEN ;01-APR-2015
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,438,479,506,528,549**;21-MAR-94;Build 54
"RTN","IBJPI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; eIV - Electronic Insurance Verification Interface parameters
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N CTRLCOL,POP,VALMCNT,VALMHDR,X,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIV application used for electronic Insurance Verification."
"RTN","IBJPI",28,0)
 W !!,"The General Parameters section concerns overall parameters for"
"RTN","IBJPI",29,0)
 W !,"monitoring the interface and controlling eIV communication between"
"RTN","IBJPI",30,0)
 W !,"VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The Batch Extracts section concerns extract-specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active/inactive status and selection criteria."
"RTN","IBJPI",33,0)
 W !!,"The Service Type Codes section concerns specifying up to nine"
"RTN","IBJPI",34,0)
 W !,"Site Selected Service Type Codes which will be sent with"
"RTN","IBJPI",35,0)
 W !,"insurance inquiries."
"RTN","IBJPI",36,0)
 D PAUSE^VALM1
"RTN","IBJPI",37,0)
 W @IOF
"RTN","IBJPI",38,0)
 S VALMBCK="R"
"RTN","IBJPI",39,0)
 Q
"RTN","IBJPI",40,0)
 ;
"RTN","IBJPI",41,0)
EXIT ; exit
"RTN","IBJPI",42,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",43,0)
 D CLEAN^VALM10
"RTN","IBJPI",44,0)
 Q
"RTN","IBJPI",45,0)
 ;
"RTN","IBJPI",46,0)
BLD ; Creates the body of the worklist
"RTN","IBJPI",47,0)
 ; IB*2.0*549 - rewrote this entire method and all methods called from it to
"RTN","IBJPI",48,0)
 ;              change to a totally new display of fields
"RTN","IBJPI",49,0)
 N ELINEL,ELINER,SLINE,STARTR
"RTN","IBJPI",50,0)
 S VALMCNT=0,SLINE=1
"RTN","IBJPI",51,0)
 D BLDGENE(SLINE,.ELINEL)                       ; Build Editable General Parameters
"RTN","IBJPI",52,0)
 D BLDGENNL(ELINEL,.STARTR,.ELINEL)             ; Build Non-Editable Gen Param left
"RTN","IBJPI",53,0)
 D BLDGENNR(STARTR,.ELINER)                     ; Build Non-Editable Gen Param Right
"RTN","IBJPI",54,0)
 S SLINE=$S(ELINEL>ELINER:ELINEL,1:ELINER)
"RTN","IBJPI",55,0)
 D BLDGENNB(SLINE,.ELINEL)                      ; Build Non-Editable Bottom Params
"RTN","IBJPI",56,0)
 D BLDBE(ELINEL,.ELINEL)                        ; Build Batch Extract Gen Parameters
"RTN","IBJPI",57,0)
 S VALMCNT=ELINEL-1
"RTN","IBJPI",58,0)
 Q
"RTN","IBJPI",59,0)
 ;
"RTN","IBJPI",60,0)
BLDGENE(SLINE,ELINE) ; Build the General Editable Parameters Section
"RTN","IBJPI",61,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",62,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",63,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",64,0)
 ;
"RTN","IBJPI",65,0)
 N XX
"RTN","IBJPI",66,0)
 S ELINE=$$SETN("General Parameters (editable)",SLINE,1,1)
"RTN","IBJPI",67,0)
 S ELINE=$$SET("                    Medicare Payer: ",$$GET1^DIQ(350.9,"1,",51.25),ELINE,1)
"RTN","IBJPI",68,0)
 S ELINE=$$SET("                     HMS Directory: ",$$GET1^DIQ(350.9,"1,",13.01),ELINE,1)
"RTN","IBJPI",69,0)
 S ELINE=$$SET("                        EII Active: ",$$GET1^DIQ(350.9,"1,",13.02),ELINE,1)
"RTN","IBJPI",70,0)
 ;
"RTN","IBJPI",71,0)
 S XX=$$GET1^DIQ(350.9,"1,",100,"I"),XX=$S(XX:"YES",1:"NO")
"RTN","IBJPI",72,0)
 S ELINE=$$SET("                      SSVI Enabled: ",XX,ELINE,1)    ; IB*2*528/baa
"RTN","IBJPI",73,0)
 S XX=$$GET1^DIQ(350.9,"1,",103,"I")
"RTN","IBJPI",74,0)
 S ELINE=$$SET("Number of days to retain SSVI data: ",XX,ELINE,1)    ; IB*2*528/baa
"RTN","IBJPI",75,0)
 Q
"RTN","IBJPI",76,0)
 ;
"RTN","IBJPI",77,0)
BLDGENNL(SLINE,STARTR,ELINE) ; Build the Left portion of the General
"RTN","IBJPI",78,0)
 ; Non-Editable Parameters Section
"RTN","IBJPI",79,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",80,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",81,0)
 ; Output:  STARTR  - Line to start displaying General Non-Editable Right
"RTN","IBJPI",82,0)
 ;                    Section
"RTN","IBJPI",83,0)
 ;          ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",84,0)
 ;
"RTN","IBJPI",85,0)
 N XX
"RTN","IBJPI",86,0)
 S ELINE=$$SET("",$J("",40),SLINE,1)            ; Spacing Blank Line
"RTN","IBJPI",87,0)
 S ELINE=$$SETN("General Parameters (non-editable)",ELINE,1,1)
"RTN","IBJPI",88,0)
 S STARTR=ELINE                                 ; Start of Right Section
"RTN","IBJPI",89,0)
 S ELINE=$$SET("          Freshness Days: ",$$GET1^DIQ(350.9,"1,",51.01),ELINE,1)
"RTN","IBJPI",90,0)
 S ELINE=$$SET("            Timeout Days: ",$$GET1^DIQ(350.9,"1,",51.05),ELINE,1)
"RTN","IBJPI",91,0)
 S ELINE=$$SET("     Timeout Mailman Msg: ",$$GET1^DIQ(350.9,"1,",51.07),ELINE,1)
"RTN","IBJPI",92,0)
 S ELINE=$$SET("             Default STC: ",$$GET1^DIQ(350.9,"1,",60.01),ELINE,1)
"RTN","IBJPI",93,0)
 S ELINE=$$SET("  Master Switch Realtime: ",$$GET1^DIQ(350.9,"1,",51.27),ELINE,1)
"RTN","IBJPI",94,0)
 Q
"RTN","IBJPI",95,0)
 ;
"RTN","IBJPI",96,0)
BLDGENNR(SLINE,ELINE) ; Build the Right portion of the General
"RTN","IBJPI",97,0)
 ; Non-Editable Parameters Section
"RTN","IBJPI",98,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",99,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",100,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",101,0)
 ;
"RTN","IBJPI",102,0)
 S ELINE=SLINE
"RTN","IBJPI",103,0)
 S ELINE=$$SET("   HL7 Maximum Number: ",$$GET1^DIQ(350.9,"1,",51.15),ELINE,41)
"RTN","IBJPI",104,0)
 S ELINE=$$SET("           Retry Flag: ",$$GET1^DIQ(350.9,"1,",51.26),ELINE,41)
"RTN","IBJPI",105,0)
 S ELINE=$$SET("    Number of Retries: ",$$GET1^DIQ(350.9,"1,",51.06),ELINE,41)
"RTN","IBJPI",106,0)
 S ELINE=$$SET("           Mail Group: ",$$MGRP^IBCNEUT5,ELINE,41)
"RTN","IBJPI",107,0)
 S ELINE=$$SET("Master Switch Nightly: ",$$GET1^DIQ(350.9,"1,",51.28),ELINE,41)
"RTN","IBJPI",108,0)
 Q
"RTN","IBJPI",109,0)
 ;
"RTN","IBJPI",110,0)
BLDGENNB(SLINE,ELINE) ; Build the General Non-Editable Bottom Parameters Section
"RTN","IBJPI",111,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",112,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",113,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",114,0)
 ;
"RTN","IBJPI",115,0)
 N XX
"RTN","IBJPI",116,0)
 S ELINE=$$SET("",$J("",40),SLINE,1)            ; Spacing Blank Line
"RTN","IBJPI",117,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.2)
"RTN","IBJPI",118,0)
 S:XX="" XX="NO"
"RTN","IBJPI",119,0)
 S ELINE=$$SET("Send MailMan Message if Communication Problem: ",XX,ELINE,1)
"RTN","IBJPI",120,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.02)
"RTN","IBJPI",121,0)
 S:XX="" XX="NO"
"RTN","IBJPI",122,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.02)_" at "_$$GET1^DIQ(350.9,"1,",51.03)
"RTN","IBJPI",123,0)
 S ELINE=$$SET("   Receive MailMan Message, Daily Statistical: ",XX,ELINE,1)
"RTN","IBJPI",124,0)
 Q
"RTN","IBJPI",125,0)
 ;
"RTN","IBJPI",126,0)
BLDBE(SLINE,ELINE) ; Build the Batch Extract Parameters Section
"RTN","IBJPI",127,0)
 ; Input:   SLINE   - Starting Section Line Number
"RTN","IBJPI",128,0)
 ;          ELINE   - Current Ending Section Line Number
"RTN","IBJPI",129,0)
 ; Output:  ELINE   - Updated Ending Section Line Number
"RTN","IBJPI",130,0)
 ;
"RTN","IBJPI",131,0)
 N IBEX,IBEX1,IBEX2,IBIIVB,IBST,IEN
"RTN","IBJPI",132,0)
 S ELINE=$$SET("",$J("",40),ELINE,1)            ; Spacing Blank Line
"RTN","IBJPI",133,0)
 S ELINE=$$SETN("Batch Extracts",ELINE,1,1)
"RTN","IBJPI",134,0)
 S ELINE=$$SET(" Extract              Selection  Maximum # to","",ELINE,1)
"RTN","IBJPI",135,0)
 S ELINE=$$SETN("Name         On/Off  Criteria   Extract/Day",ELINE,1,"",1)
"RTN","IBJPI",136,0)
 ;
"RTN","IBJPI",137,0)
 ; Loop thru extracts
"RTN","IBJPI",138,0)
 S IEN=0
"RTN","IBJPI",139,0)
 F  D  Q:'IEN
"RTN","IBJPI",140,0)
 . S IEN=$O(^IBE(350.9,1,51.17,IEN))
"RTN","IBJPI",141,0)
 . Q:'IEN
"RTN","IBJPI",142,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))       ; Batch Extract multiple line
"RTN","IBJPI",143,0)
 . S IBEX=+$P(IBIIVB,"^",1)                     ; Type
"RTN","IBJPI",144,0)
 . Q:'$F(".1.2.","."_IBEX_".")
"RTN","IBJPI",145,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,"^",1)'="":$$GET1^DIQ(350.9002,IEN_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",146,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,"^",2):"ON",1:"OFF"),8)
"RTN","IBJPI",147,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,"^",3),1:$P(IBIIVB,"^",3))
"RTN","IBJPI",148,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,"^",4),1:$P(IBIIVB,"^",4))
"RTN","IBJPI",149,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"n/a",IBEX=2:IBEX1,IBEX=3:IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",150,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,"^",5):+$P(IBIIVB,"^",5),1:$P(IBIIVB,"^",5)),14)
"RTN","IBJPI",151,0)
 . S ELINE=$$SET(IBST,"",ELINE,1)
"RTN","IBJPI",152,0)
 Q
"RTN","IBJPI",153,0)
 ;
"RTN","IBJPI",154,0)
SET(LABEL,DATA,LINE,COL) ; Sets text into the body of the worklist
"RTN","IBJPI",155,0)
 ; Input:   LABEL   - Label text to set into the line
"RTN","IBJPI",156,0)
 ;          DATA    - Field Data to set into the line
"RTN","IBJPI",157,0)
 ;          LINE    - Line to set LABEL and DATA into
"RTN","IBJPI",158,0)
 ;          COL     - Starting column position in LINE to insert
"RTN","IBJPI",159,0)
 ;                    LABEL_DATA text
"RTN","IBJPI",160,0)
 ; Returns: LINE    - Updated Line by 1
"RTN","IBJPI",161,0)
 ;
"RTN","IBJPI",162,0)
 N IBY
"RTN","IBJPI",163,0)
 S IBY=LABEL_DATA
"RTN","IBJPI",164,0)
 D SET1(IBY,LINE,COL,$L(IBY))
"RTN","IBJPI",165,0)
 S LINE=LINE+1
"RTN","IBJPI",166,0)
 Q LINE
"RTN","IBJPI",167,0)
 ;
"RTN","IBJPI",168,0)
SETN(TITLE,LINE,COL,RV,ULINE) ; Sets a field Section title into the body of the worklist
"RTN","IBJPI",169,0)
 ; Input:   TITLE   - Text to be used for the field Section Title
"RTN","IBJPI",170,0)
 ;          LINE    - Line number in the body to insert the field section title
"RTN","IBJPI",171,0)
 ;          COL     - Starting Column position to set Section Title into
"RTN","IBJPI",172,0)
 ;          RV      - 1 - Set Reverse Video, 0 or null don't use Reverse Video
"RTN","IBJPI",173,0)
 ;                        Optional, defaults to ""
"RTN","IBJPI",174,0)
 ;          ULINE   - 1 - Set Underline, 0 or null don't use underline
"RTN","IBJPI",175,0)
 ;                        Optional, defaults to ""
"RTN","IBJPI",176,0)
 ; Returns: LINE    - Line number increased by 1
"RTN","IBJPI",177,0)
 ;
"RTN","IBJPI",178,0)
 N IBY
"RTN","IBJPI",179,0)
 S IBY=" "_TITLE_" "
"RTN","IBJPI",180,0)
 D SET1(IBY,LINE,COL,$L(IBY),$G(RV),$G(ULINE))
"RTN","IBJPI",181,0)
 S LINE=LINE+1
"RTN","IBJPI",182,0)
 Q LINE
"RTN","IBJPI",183,0)
 ;
"RTN","IBJPI",184,0)
SET1(TEXT,LINE,COL,WIDTH,RV,ULINE) ; Sets the TMP array with body data
"RTN","IBJPI",185,0)
 ; Input:   TEXT                - Text to be set into the specified line
"RTN","IBJPI",186,0)
 ;          LINE                - Line to set TEXT into
"RTN","IBJPI",187,0)
 ;          COL                 - Column of LINE to set TEXT into
"RTN","IBJPI",188,0)
 ;          WIDTH               - Width of the TEXT being set into line
"RTN","IBJPI",189,0)
 ;          RV                  - 1 - Set Reverse Video, 0 or null don't use
"RTN","IBJPI",190,0)
 ;                                    Reverse Video
"RTN","IBJPI",191,0)
 ;                                Optional, defaults to ""
"RTN","IBJPI",192,0)
 ;          ULINE               - 1 - Set Underline, 0 or null don't use
"RTN","IBJPI",193,0)
 ;                                    Underline
"RTN","IBJPI",194,0)
 ;                                Optional, defaults to ""
"RTN","IBJPI",195,0)
 ;          ^TMP($J,"IBJPI")   - Current ^TMP array
"RTN","IBJPI",196,0)
 ; Output:  ^TMP($J,"IBJPI")   - Updated ^TMP array
"RTN","IBJPI",197,0)
 ;
"RTN","IBJPI",198,0)
 N IBX
"RTN","IBJPI",199,0)
 S IBX=$G(^TMP($J,"IBJPI",LINE,0))
"RTN","IBJPI",200,0)
 S IBX=$$SETSTR^VALM1(TEXT,IBX,COL,WIDTH)
"RTN","IBJPI",201,0)
 D SET^VALM10(LINE,IBX)
"RTN","IBJPI",202,0)
 D:$G(RV)'="" CNTRL^VALM10(LINE,COL,WIDTH,IORVON,IORVOFF)
"RTN","IBJPI",203,0)
 D:$G(ULINE)'="" CNTRL^VALM10(LINE,COL,WIDTH,IOUON,IOUOFF)
"RTN","IBJPI",204,0)
 Q
"RTN","IBJPI",205,0)
 ; 
"RTN","IBJTNB")
0^56^B12738894
"RTN","IBJTNB",1,0)
IBJTNB ;ALB/ARH - TPI INSURANCE POLICY/AB SCREENS/ACTIONS ; 12/31/15
"RTN","IBJTNB",2,0)
 ;;2.0;INTEGRATED BILLING ;**39,549**; 21-MAR-94;Build 54
"RTN","IBJTNB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTNB",4,0)
 ;
"RTN","IBJTNB",5,0)
 ;
"RTN","IBJTNB",6,0)
HDRP ; -- IBJT NS VIEW EXP POL LIST TEMPLATE:  policy header code
"RTN","IBJTNB",7,0)
 S VALMHDR(1)="Expanded Policy Information" N IBI,IBX
"RTN","IBJTNB",8,0)
 I $D(IBPPOL) D HDR^IBCNSP,PST(1)
"RTN","IBJTNB",9,0)
 Q
"RTN","IBJTNB",10,0)
INITP ; -- IBJT NS VIEW EXP POL LIST TEMPLATE:  policy init code
"RTN","IBJTNB",11,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPD",$J)
"RTN","IBJTNB",12,0)
 ;
"RTN","IBJTNB",13,0)
 ; IB*2.0*549 Replaced 'IBT SHORT MENU' with 'IBJT SHORT MENU 2' below
"RTN","IBJTNB",14,0)
 I '$G(IBIFN) D PRTCL^IBJU1("IBJT SHORT MENU 2")
"RTN","IBJTNB",15,0)
 I IBJPOL>0 S IBPPOL="^2^"_DFN_"^"_+IBJPOL_"^"_$G(^DPT(DFN,.312,+IBJPOL,0)) D INIT^IBCNSP K VALMHDR Q
"RTN","IBJTNB",16,0)
 S VALMCNT=0 D BLD("Insurance data incomplete, cannot find policy.")
"RTN","IBJTNB",17,0)
 Q
"RTN","IBJTNB",18,0)
EXITP D EXIT^IBCNSP K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPD",$J) Q
"RTN","IBJTNB",19,0)
HELPP D HELP^IBCNSP Q
"RTN","IBJTNB",20,0)
 ;
"RTN","IBJTNB",21,0)
VP(REDISP) ; -- IBJT NS VIEW EXP POL SCREEN ACTION: patient policy info screen
"RTN","IBJTNB",22,0)
 ;     user can select policy if more than one for bill, REDISP set if screen to be rebuilt for different policy
"RTN","IBJTNB",23,0)
 ;
"RTN","IBJTNB",24,0)
 I '$G(REDISP) N IBX,IBVIEW,IBCHANGE,IBCNS,IBCPOL,IBPPOL,IBJPOL,IBCDFN,IBI,IBLCNT,IBPR,IBPRD
"RTN","IBJTNB",25,0)
 I '$G(IBIFN)!'$G(DFN) G VPQ
"RTN","IBJTNB",26,0)
 D FULL^VALM1
"RTN","IBJTNB",27,0)
 S IBX=$$PST^IBJTU31(IBIFN) I 'IBX S VALMBCK="R" G VPQ
"RTN","IBJTNB",28,0)
 S IBJPOL=IBX
"RTN","IBJTNB",29,0)
 I '$G(REDISP) D EN^VALM("IBJT NS VIEW EXP POL") G VPQ
"RTN","IBJTNB",30,0)
 D INITP S VALMBCK="R"
"RTN","IBJTNB",31,0)
VPQ Q
"RTN","IBJTNB",32,0)
 ;
"RTN","IBJTNB",33,0)
 ;
"RTN","IBJTNB",34,0)
HDRA ; -- IBJT NS VIEW AN BEN LIST TEMPLATE: annual benefits header code
"RTN","IBJTNB",35,0)
 S VALMHDR(1)="Annual Benefits Information",IBCGN=$G(IBCGN),IBYE=$G(IBYE)
"RTN","IBJTNB",36,0)
 I +$G(IBCPOL)>0 D HDR^IBCNSA("Annual Benefits") D PST(1)
"RTN","IBJTNB",37,0)
 Q
"RTN","IBJTNB",38,0)
INITA ; -- IBJT NS VIEW AN BEN LIST TEMPLATE: annual benefits init code
"RTN","IBJTNB",39,0)
 ;    allow select of other benefit years, after first display of policy
"RTN","IBJTNB",40,0)
 N IBJMSG K IBYR S VALMCNT=0 I +IBJPOL<0 S IBJMSG="Insurance data incomplete, cannot find policy." G IA1
"RTN","IBJTNB",41,0)
 S IBCPOL=+$P(IBJPOL,U,20) I 'IBCPOL S IBJMSG="No Policy found." G IA1
"RTN","IBJTNB",42,0)
 I '$O(^IBA(355.4,"APY",+IBCPOL,"")) S IBJMSG="Policy has No Annual Benefits Records." G IA1
"RTN","IBJTNB",43,0)
 I +$G(IBIFN),'$D(IBJAB(IBCPOL)),$G(IBJMSG)="" D  S IBJAB(IBCPOL)=""
"RTN","IBJTNB",44,0)
 . S IBEVDT=$E(+$G(^DGCR(399,+IBIFN,"U")),1,7),IBDT=-IBEVDT-.01
"RTN","IBJTNB",45,0)
 . S IBDT=$O(^IBA(355.4,"APY",IBCPOL,IBDT))
"RTN","IBJTNB",46,0)
 . I 'IBDT!($$FMDIFF^XLFDT(IBEVDT,-IBDT)>365) S IBJMSG="No Annual Benefits cover begin date of bill ("_$$DATE^IBJU1(IBEVDT)_")." Q
"RTN","IBJTNB",47,0)
 . S IBYR=-IBDT,IBCAB=$O(^IBA(355.4,"APY",IBCPOL,IBDT,""))
"RTN","IBJTNB",48,0)
 . I 'IBCAB S IBJMSG="No Annual Benefits record found."
"RTN","IBJTNB",49,0)
IA1 I '$G(IBIFN) D PRTCL^IBJU1("IBJT SHORT MENU")
"RTN","IBJTNB",50,0)
 I $G(IBJMSG)'="" K ^TMP("IBCNSA",$J) D BLD(IBJMSG) K VALMHDR Q
"RTN","IBJTNB",51,0)
 D INIT^IBCNSA I '$D(VALMQUIT) K VALMHDR
"RTN","IBJTNB",52,0)
 Q
"RTN","IBJTNB",53,0)
EXITA D EXIT^IBCNSA K IBJAB,^TMP("IBCNSA",$J) Q
"RTN","IBJTNB",54,0)
HELPA D HELP^IBCNSA Q
"RTN","IBJTNB",55,0)
 ;
"RTN","IBJTNB",56,0)
AB(REDISP) ; -- IBJT NS VIEW AN BEN SCREEN ACTION: patient policy annual benefits for year which contains the bill's
"RTN","IBJTNB",57,0)
 ;     Statement From Date, once the annual benefits of the policy that covers the bill's year has been
"RTN","IBJTNB",58,0)
 ;     displayed, the user will be allowed to pick other AB years for the policy
"RTN","IBJTNB",59,0)
 ;     user can select policy if more than one on bill, REDISP set if screen to be rebuilt for different policy
"RTN","IBJTNB",60,0)
 ;
"RTN","IBJTNB",61,0)
 I '$G(REDISP) N IBEVDT,IBDT,IBYR,IBCAB,IBX,IBVIEW,IBCHANGE,IBCNS,IBCPOL,IBPPOL,IBCGN,IBYE,IBJPOL,IBI,IBDUZ,IBDA,IBCNT,OFFSET,START
"RTN","IBJTNB",62,0)
 I '$G(IBIFN)!'$G(DFN) G ABQ
"RTN","IBJTNB",63,0)
 D FULL^VALM1
"RTN","IBJTNB",64,0)
 S IBX=$$PST^IBJTU31(IBIFN) I 'IBX S VALMBCK="R" G ABQ
"RTN","IBJTNB",65,0)
 S IBJPOL=IBX
"RTN","IBJTNB",66,0)
 I '$G(REDISP) D EN^VALM("IBJT NS VIEW AN BEN") G ABQ
"RTN","IBJTNB",67,0)
 D INITA S VALMBCK="R"
"RTN","IBJTNB",68,0)
ABQ Q
"RTN","IBJTNB",69,0)
 ;
"RTN","IBJTNB",70,0)
 ;
"RTN","IBJTNB",71,0)
BLD(MSG) D KILL^VALM10(),SET^IBCNSP(1,1,""),SET^IBCNSP(2,1,MSG) Q
"RTN","IBJTNB",72,0)
PST(X) S IBI=$P(IBJPOL,U,2),IBX=$S(IBI=1:"Primary",IBI=2:"Secondary",IBI=3:"Tertiary",1:""),VALMHDR(X)=$E(VALMHDR(X),1,68)_$J("",(79-$L(VALMHDR(X))-$L(IBX)))_IBX Q
"RTN","IBY549PO")
0^18^B123219661
"RTN","IBY549PO",1,0)
IBY549PO ;ALB/VD - IB*2*549 POST-INSTALL ;21-APR-2015
"RTN","IBY549PO",2,0)
 ;;2.0;INTEGRATED BILLING;**549**;21-MAR-94;Build 54
"RTN","IBY549PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY549PO",4,0)
 ;
"RTN","IBY549PO",5,0)
EN ;Entry point
"RTN","IBY549PO",6,0)
 N IBXPD,XPDIDTOT
"RTN","IBY549PO",7,0)
 S XPDIDTOT=7
"RTN","IBY549PO",8,0)
 ;
"RTN","IBY549PO",9,0)
 ; Send site registration message to FSC
"RTN","IBY549PO",10,0)
 S IBXPD=1
"RTN","IBY549PO",11,0)
 D RMSG
"RTN","IBY549PO",12,0)
 ;
"RTN","IBY549PO",13,0)
 ; Req# 2.6.4.10
"RTN","IBY549PO",14,0)
 ; Remove the IP Address if it exists in the IIV EC HL7 Logical Link.
"RTN","IBY549PO",15,0)
 S IBXPD=2
"RTN","IBY549PO",16,0)
 D IIVEC(IBXPD,XPDIDTOT)
"RTN","IBY549PO",17,0)
 ;
"RTN","IBY549PO",18,0)
 ; Req# 2.6.8.1
"RTN","IBY549PO",19,0)
 ; Add a new Type of Coverage record in the ^IBE(355.2) file.
"RTN","IBY549PO",20,0)
 S IBXPD=3
"RTN","IBY549PO",21,0)
 D NEWCVTY(IBXPD,XPDIDTOT)
"RTN","IBY549PO",22,0)
 ;
"RTN","IBY549PO",23,0)
 ; Req# 2.6.8.2
"RTN","IBY549PO",24,0)
 ; Add a new Type of Plan record in the ^IBE(355.1) file.
"RTN","IBY549PO",25,0)
 S IBXPD=4
"RTN","IBY549PO",26,0)
 D NEWPLTY(IBXPD,XPDIDTOT)
"RTN","IBY549PO",27,0)
 ;
"RTN","IBY549PO",28,0)
 ; Req# 2.6.2.2
"RTN","IBY549PO",29,0)
 ; Update Policy expiration dates for deceased patients
"RTN","IBY549PO",30,0)
 S IBXPD=5
"RTN","IBY549PO",31,0)
 D POLCYUPD(IBXPD,XPDIDTOT)
"RTN","IBY549PO",32,0)
 ;
"RTN","IBY549PO",33,0)
 ; Req# 2.6.10.6
"RTN","IBY549PO",34,0)
 ; Remove the contact field value
"RTN","IBY549PO",35,0)
 S IBXPD=6
"RTN","IBY549PO",36,0)
 D DELCONT(IBXPD,XPDIDTOT)
"RTN","IBY549PO",37,0)
 ;
"RTN","IBY549PO",38,0)
 ; Req# 2.6.10.21
"RTN","IBY549PO",39,0)
 ; Set MESSAGES MAILGROUP field in Site parameters
"RTN","IBY549PO",40,0)
 S IBXPD=7
"RTN","IBY549PO",41,0)
 D MGROUP(IBXPD,XPDIDTOT)
"RTN","IBY549PO",42,0)
 ;
"RTN","IBY549PO",43,0)
 ; File a 'Y' for new Master Realtime and Nightly switches
"RTN","IBY549PO",44,0)
 D FSWITCH
"RTN","IBY549PO",45,0)
 D DONE
"RTN","IBY549PO",46,0)
 Q
"RTN","IBY549PO",47,0)
 ;
"RTN","IBY549PO",48,0)
RMSG ; send site registration message to FSC
"RTN","IBY549PO",49,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",50,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",51,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY549PO",52,0)
 I '$$PROD^XUPROD(1) D  Q                   ; only sent reg. message from production account
"RTN","IBY549PO",53,0)
 . D MES^XPDUTL(" N/A - Not a production account - No site registration message sent")
"RTN","IBY549PO",54,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY549PO",55,0)
 D ^IBCNEHLM
"RTN","IBY549PO",56,0)
 Q
"RTN","IBY549PO",57,0)
 ;
"RTN","IBY549PO",58,0)
IIVEC(IBXPD,XPDIDTOT) ; Remove the IP address if it exists in the IIV EC HL7
"RTN","IBY549PO",59,0)
 ; Logical Link.
"RTN","IBY549PO",60,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",61,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",62,0)
 N DA,DIE,DLAYGO,DR,IBPRD,X,Y
"RTN","IBY549PO",63,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",64,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",65,0)
 D MES^XPDUTL("Remove the IP Address in 'IIV EC' HL7 Logical Link.")
"RTN","IBY549PO",66,0)
 ;
"RTN","IBY549PO",67,0)
 S IBPRD=$S($$PROD^XUPROD(1)=1:"P",1:"T")
"RTN","IBY549PO",68,0)
 S DIC="^HLCS(870,",DLAYGO=870,DIC(0)="LS",X="IIV EC" D ^DIC
"RTN","IBY549PO",69,0)
 ;
"RTN","IBY549PO",70,0)
 ; For Test environments
"RTN","IBY549PO",71,0)
 I IBPRD="T",Y'=-1 D
"RTN","IBY549PO",72,0)
 . S DIE=DIC,DA=+Y,DR=".08///IIV.VITRIA-EDI-TEST.DOMAIN.EXT;400.01///@"
"RTN","IBY549PO",73,0)
 . K DIC D ^DIE
"RTN","IBY549PO",74,0)
 ;
"RTN","IBY549PO",75,0)
 ; For Production environments, use the FSC PRD domain
"RTN","IBY549PO",76,0)
 I IBPRD="P",Y'=-1 D
"RTN","IBY549PO",77,0)
 . S DIE=DIC,DA=+Y,DR=".08///IIV.VITRIA-EDI.DOMAIN.EXT;400.01///@"
"RTN","IBY549PO",78,0)
 . K DIC D ^DIE
"RTN","IBY549PO",79,0)
 Q
"RTN","IBY549PO",80,0)
 ;
"RTN","IBY549PO",81,0)
MGROUP(IBXPD,XPDIDTOT) ; Set the MESSAGES MAILGROUP in site parameters if wrong value
"RTN","IBY549PO",82,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",83,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",84,0)
 N XX
"RTN","IBY549PO",85,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",86,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",87,0)
 D MES^XPDUTL("Checking current MESSAGE MAILGROUP value ... ")
"RTN","IBY549PO",88,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.04,"E")
"RTN","IBY549PO",89,0)
 I XX'="IBCNE EIV MESSAGE" D  Q
"RTN","IBY549PO",90,0)
 . S XX=$O(^XMB(3.8,"B","IBCNE EIV MESSAGE",0))
"RTN","IBY549PO",91,0)
 . ;
"RTN","IBY549PO",92,0)
 . ; If the IBCNE EIV MESSAGE mail group doesn't exist, create and send a
"RTN","IBY549PO",93,0)
 . ; message to InsuranceRapidResponse@domain.ext 
"RTN","IBY549PO",94,0)
 . I XX="" D ADDMGRP
"RTN","IBY549PO",95,0)
 . E  D MES^XPDUTL(" Mail group IBCNE EIV MESSAGE already exists")
"RTN","IBY549PO",96,0)
 . ;
"RTN","IBY549PO",97,0)
 . N DA,DIE,DR
"RTN","IBY549PO",98,0)
 . D MES^XPDUTL(" Setting mail group to IBCNE EIV MESSAGE")
"RTN","IBY549PO",99,0)
 . S XX=$O(^XMB(3.8,"B","IBCNE EIV MESSAGE",""))
"RTN","IBY549PO",100,0)
 . S DIE=350.9,DA=1
"RTN","IBY549PO",101,0)
 . S DR="51.04///"_XX
"RTN","IBY549PO",102,0)
 . D ^DIE
"RTN","IBY549PO",103,0)
 ;
"RTN","IBY549PO",104,0)
 D MES^XPDUTL("MESSAGE MAILGROUP already set to IBCNE EIV MESSAGE - nothing done")
"RTN","IBY549PO",105,0)
 Q
"RTN","IBY549PO",106,0)
 ;
"RTN","IBY549PO",107,0)
ADDMGRP ; Create the IBCNE EIV MESSAGE mail group with no users
"RTN","IBY549PO",108,0)
 N MGDESC,MGNM,MSG,SUBJECT,XMY
"RTN","IBY549PO",109,0)
 S MGNM="IBCNE EIV MESSAGE"
"RTN","IBY549PO",110,0)
 S MGDESC(1)="This mail group will be used to deliver notifications for"
"RTN","IBY549PO",111,0)
 S MGDESC(2)="the Insurance Verification process."
"RTN","IBY549PO",112,0)
 I $$MG^XMBGRP(MGNM,0,$G(DUZ),0,,.MGDESC,1) D
"RTN","IBY549PO",113,0)
 . D MES^XPDUTL("     Mail Group "_MGNM_" was successfully created.")
"RTN","IBY549PO",114,0)
 . ;
"RTN","IBY549PO",115,0)
 . ; Notify the VA eInsurance Rapid Response Group
"RTN","IBY549PO",116,0)
 . S XMY("InsuranceRapidResponse@domain.ext")=""
"RTN","IBY549PO",117,0)
 . S MSG(1)="The Mail Group IBCNE EIV MESSAGE was created"
"RTN","IBY549PO",118,0)
 . S SUBJECT="Mail Group IBCNE EIV MESSAGE created"
"RTN","IBY549PO",119,0)
 . D MSG^IBCNEUT5(,SUBJECT,"MSG(",,.XMY)
"RTN","IBY549PO",120,0)
 E  D
"RTN","IBY549PO",121,0)
 . D MES^XPDUTL("     ERROR: Mail Group "_MGNM_" was not created!")
"RTN","IBY549PO",122,0)
 . D MES^XPDUTL("     Please enter a support ticket for assistance.")
"RTN","IBY549PO",123,0)
 Q
"RTN","IBY549PO",124,0)
 ;
"RTN","IBY549PO",125,0)
FSWITCH ; File 'YES' values for new realtime switches
"RTN","IBY549PO",126,0)
 N DA,DIE,DR,DTOUT,XX
"RTN","IBY549PO",127,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.27,"I")
"RTN","IBY549PO",128,0)
 ;
"RTN","IBY549PO",129,0)
 ; If null set to "YES"
"RTN","IBY549PO",130,0)
 I XX="" D
"RTN","IBY549PO",131,0)
 . S DIE=350.9,DA=1,DR="51.27///Y"
"RTN","IBY549PO",132,0)
 . D ^DIE
"RTN","IBY549PO",133,0)
 ;
"RTN","IBY549PO",134,0)
 S XX=$$GET1^DIQ(350.9,"1,",51.28,"I")
"RTN","IBY549PO",135,0)
 ;
"RTN","IBY549PO",136,0)
 ; If null set to "YES"
"RTN","IBY549PO",137,0)
 I XX="" D
"RTN","IBY549PO",138,0)
 . S DIE=350.9,DA=1,DR="51.28///Y"
"RTN","IBY549PO",139,0)
 . D ^DIE
"RTN","IBY549PO",140,0)
 Q
"RTN","IBY549PO",141,0)
 ;
"RTN","IBY549PO",142,0)
NEWPLTY(IBXPD,XPDIDTOT) ; Add a new code to the TYPE OF PLAN TABLE (#355.1)
"RTN","IBY549PO",143,0)
 ; for VA SPECIAL CLASS
"RTN","IBY549PO",144,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",145,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",146,0)
 N IBDATA,IBDESC,IBERR,IBIEN
"RTN","IBY549PO",147,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",148,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",149,0)
 D MES^XPDUTL("Add a new VA SPECIAL CLASS code to the TYPE OF PLAN TABLE")
"RTN","IBY549PO",150,0)
 I $D(^IBE(355.1,"D","VA SP CL")) D   Q
"RTN","IBY549PO",151,0)
 . D BMES^XPDUTL("*** NEW 'VA SP CL' CODE NOT ADDED TO TYPE OF PLAN TABLE...ALREADY EXISTS ***")
"RTN","IBY549PO",152,0)
 ;
"RTN","IBY549PO",153,0)
 ; Set up WP Arrays
"RTN","IBY549PO",154,0)
 S IBDESC("WP",1)="Pseudo plan - DO NOT BILL"
"RTN","IBY549PO",155,0)
 ;
"RTN","IBY549PO",156,0)
 ; Set up File Nodes
"RTN","IBY549PO",157,0)
 S IBDATA(.01)="VA SPECIAL CLASS"
"RTN","IBY549PO",158,0)
 S IBDATA(.02)="VA SP CL"
"RTN","IBY549PO",159,0)
 S IBDATA(.03)="12"
"RTN","IBY549PO",160,0)
 S IBDATA(10)=$NA(IBDESC("WP"))
"RTN","IBY549PO",161,0)
 S IBIEN=$$ADD^IBDFDBS(355.1,,.IBDATA,.IBERR)
"RTN","IBY549PO",162,0)
 I IBERR D  Q
"RTN","IBY549PO",163,0)
 . D BMES^XPDUTL("*** ERROR ADDING 'VSC' CODE TO THE TYPE OF PLAN TABLE (#355.1) ***")
"RTN","IBY549PO",164,0)
 Q
"RTN","IBY549PO",165,0)
 ;
"RTN","IBY549PO",166,0)
NEWCVTY(IBXPD,XPDIDTOT) ; Add a new code to the TYPE OF COVERAGE TABLE (#355.2)
"RTN","IBY549PO",167,0)
 ; for VA SPECIAL CLASS
"RTN","IBY549PO",168,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",169,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",170,0)
 N IBDATA,IBDESC,IBERR,IBIEN
"RTN","IBY549PO",171,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",172,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",173,0)
 D MES^XPDUTL("Add a new VA SPECIAL CLASS code to the TYPE OF COVERAGE TABLE")
"RTN","IBY549PO",174,0)
 I $D(^IBE(355.2,"C","VA SP CL")) D  Q
"RTN","IBY549PO",175,0)
 . D BMES^XPDUTL("*** NEW 'VA SP CL' CODE NOT ADDED TO TYPE OF COVERAGE TABLE...ALREADY EXISTS ***")
"RTN","IBY549PO",176,0)
 ;
"RTN","IBY549PO",177,0)
 ; Set up WP Arrays
"RTN","IBY549PO",178,0)
 S IBDESC("WP",1)="Pseudo type of coverage - DO NOT USE"
"RTN","IBY549PO",179,0)
 ;
"RTN","IBY549PO",180,0)
 ; Set up File Nodes
"RTN","IBY549PO",181,0)
 S IBDATA(.01)="VA SPECIAL CLASS"
"RTN","IBY549PO",182,0)
 S IBDATA(.02)="VA SP CL"
"RTN","IBY549PO",183,0)
 S IBDATA(10)=$NA(IBDESC("WP"))
"RTN","IBY549PO",184,0)
 S IBIEN=$$ADD^IBDFDBS(355.2,,.IBDATA,.IBERR)
"RTN","IBY549PO",185,0)
 I IBERR D  Q
"RTN","IBY549PO",186,0)
 . D BMES^XPDUTL("*** ERROR ADDING 'VA SP CL' CODE TO THE TYPE OF COVERAGE TABLE (#355.2) ***")
"RTN","IBY549PO",187,0)
 Q
"RTN","IBY549PO",188,0)
 ;
"RTN","IBY549PO",189,0)
DELCONT(IBXPD,XPDIDTOT) ; Remove the contact field value
"RTN","IBY549PO",190,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",191,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",192,0)
 ;
"RTN","IBY549PO",193,0)
 N FDA,DA,IBERR
"RTN","IBY549PO",194,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",195,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",196,0)
 D MES^XPDUTL("Removing Contact Person from eIV Site Parameters.")
"RTN","IBY549PO",197,0)
 S DA=1
"RTN","IBY549PO",198,0)
 S FDA(350.9,"1,",51.16)="@"
"RTN","IBY549PO",199,0)
 D FILE^DIE("","FDA","IBERR")
"RTN","IBY549PO",200,0)
 Q
"RTN","IBY549PO",201,0)
 ;
"RTN","IBY549PO",202,0)
POLCYUPD(IBXPD,XPDIDTOT) ; Update Policy Expiration Dates for deceased patients
"RTN","IBY549PO",203,0)
 ; Input:   XBXPD       - Post Installation Step
"RTN","IBY549PO",204,0)
 ;          XPDIDTOT    - Total # of Post Installation steps
"RTN","IBY549PO",205,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY549PO",206,0)
 D MES^XPDUTL("-------------")
"RTN","IBY549PO",207,0)
 D MES^XPDUTL("Update Policy Expiration Dates for deceased patients.")
"RTN","IBY549PO",208,0)
 ; 1 - For every patient in the patient file check if the patient is deceased field
"RTN","IBY549PO",209,0)
 ;    (file 2, field .351)
"RTN","IBY549PO",210,0)
 ; 2 - Quit if the patient is not deceased
"RTN","IBY549PO",211,0)
 ; 3 - Quit if the policy expiration is non-null
"RTN","IBY549PO",212,0)
 ; 4 - Change the policy expiration date to (Date of Death +1)
"RTN","IBY549PO",213,0)
 ; 5 - Add this patient and policy to a list of patient/policies  being modified
"RTN","IBY549PO",214,0)
 ; 6 - Email the list of patient/policies modified to xxx
"RTN","IBY549PO",215,0)
 ;
"RTN","IBY549PO",216,0)
 N MTIME,ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBY549PO",217,0)
 S MTIME=$$NOW^XLFDT()                      ; Fileman date/time
"RTN","IBY549PO",218,0)
 S MTIME=$$FMADD^XLFDT(MTIME,0,4)           ; Set to queue 4 hours later
"RTN","IBY549PO",219,0)
 S ZTDTH=$$FMTH^XLFDT(MTIME)                ; Convert to $H format
"RTN","IBY549PO",220,0)
 ;
"RTN","IBY549PO",221,0)
 ; Set up the other TaskManager variables
"RTN","IBY549PO",222,0)
 S ZTRTN="POLCUP2^IBY549PO"
"RTN","IBY549PO",223,0)
 S ZTDESC="IB*2.8*549 Auto Termination of Policies for deceased patients"
"RTN","IBY549PO",224,0)
 S ZTIO=""
"RTN","IBY549PO",225,0)
 D ^%ZTLOAD ; Call TaskManager
"RTN","IBY549PO",226,0)
 Q
"RTN","IBY549PO",227,0)
 ;
"RTN","IBY549PO",228,0)
POLCUP2 ;EP
"RTN","IBY549PO",229,0)
 ; Called from Task Manager
"RTN","IBY549PO",230,0)
 N CURSIZE,DFN,DOD,EMAIL,EXPDT,IIEN,LNCTR,MAXSIZE,MLGRP,MSG,NPAT
"RTN","IBY549PO",231,0)
 N PNM,SSN,SUBJECT,XMY,XX
"RTN","IBY549PO",232,0)
 K ^TMP($J,"PATLIST"),^TMP($J,"ERRLIST")
"RTN","IBY549PO",233,0)
 S DFN=0
"RTN","IBY549PO",234,0)
 F  D  Q:'+DFN
"RTN","IBY549PO",235,0)
 . S DFN=$O(^DPT(DFN))
"RTN","IBY549PO",236,0)
 . Q:'+DFN
"RTN","IBY549PO",237,0)
 . S DOD=$$GET1^DIQ(2,DFN_",",.351,"I")     ; Date of Death
"RTN","IBY549PO",238,0)
 . Q:DOD=""                                 ; Patient is not Deceased
"RTN","IBY549PO",239,0)
 . S IIEN=0
"RTN","IBY549PO",240,0)
 . F  D  Q:'+IIEN
"RTN","IBY549PO",241,0)
 . . S IIEN=$O(^DPT(DFN,.312,IIEN))
"RTN","IBY549PO",242,0)
 . . Q:'+IIEN
"RTN","IBY549PO",243,0)
 . . S EXPDT=$$GET1^DIQ(2.312,IIEN_","_DFN_",",3,"I")   ; Policy Expiration Date
"RTN","IBY549PO",244,0)
 . . Q:EXPDT'=""                                    ; Policy has an expiration date
"RTN","IBY549PO",245,0)
 . . D UPDTEDT(DFN,IIEN,DOD)                        ; Update the expiration date
"RTN","IBY549PO",246,0)
 . . Q:$D(^TMP($J,"ERRLIST",DFN,IIEN))              ; On error list
"RTN","IBY549PO",247,0)
 . . S ^TMP($J,"PATLIST",DFN,IIEN)=""               ; Add Patient Policy to list
"RTN","IBY549PO",248,0)
 Q:'$D(^TMP($J,"PATLIST"))                          ; No patients to update
"RTN","IBY549PO",249,0)
 ;
"RTN","IBY549PO",250,0)
 ; Get array of users with the 'IB SUPERVISOR' security key
"RTN","IBY549PO",251,0)
 D GETPER^IBCNEUT7("IB SUPERVISOR",.XMY)
"RTN","IBY549PO",252,0)
 ;
"RTN","IBY549PO",253,0)
 ; Begin email set up
"RTN","IBY549PO",254,0)
 S MAXSIZE=300000,CURSIZE=0,LNCTR=0
"RTN","IBY549PO",255,0)
 S MLGRP=$$MGRP^IBCNEUT5
"RTN","IBY549PO",256,0)
 S SUBJECT="eIV: Policy Expiration for deceased patient - Post Install Task"
"RTN","IBY549PO",257,0)
 ;
"RTN","IBY549PO",258,0)
 ; First add any patients that had filing errors
"RTN","IBY549PO",259,0)
 I $D(^TMP($J,"ERRLIST")) D
"RTN","IBY549PO",260,0)
 . S LNCTR=LNCTR+1
"RTN","IBY549PO",261,0)
 . S XX="The following patients will need to be manually updated: "
"RTN","IBY549PO",262,0)
 . ;
"RTN","IBY549PO",263,0)
 . ; Is the mail message getting too big?
"RTN","IBY549PO",264,0)
 . I CURSIZE+$L(XX)>MAXSIZE D
"RTN","IBY549PO",265,0)
 . . D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBY549PO",266,0)
 . . K MSG
"RTN","IBY549PO",267,0)
 . . S CURSIZE=0,LNCTR=1
"RTN","IBY549PO",268,0)
 . ;
"RTN","IBY549PO",269,0)
 . S MSG(LNCTR)=XX,CURSIZE=CURSIZE+$L(XX)
"RTN","IBY549PO",270,0)
 . S DFN=""
"RTN","IBY549PO",271,0)
 . F  D  Q:DFN=""
"RTN","IBY549PO",272,0)
 . . S DFN=$O(^TMP($J,"ERRLIST",DFN))
"RTN","IBY549PO",273,0)
 . . Q:DFN=""
"RTN","IBY549PO",274,0)
 . . S PNM=$$GET1^DIQ(2,DFN,.01)
"RTN","IBY549PO",275,0)
 . . S SSN=$$GET1^DIQ(2,DFN,.09),SSN=$E(SSN,6,9)
"RTN","IBY549PO",276,0)
 . . S NPAT="      "_PNM_"  "_SSN
"RTN","IBY549PO",277,0)
 . . ;
"RTN","IBY549PO",278,0)
 . . ; Is the mail message getting too big?
"RTN","IBY549PO",279,0)
 . . I CURSIZE+$L(NPAT)>MAXSIZE D
"RTN","IBY549PO",280,0)
 . . . D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBY549PO",281,0)
 . . . K MSG
"RTN","IBY549PO",282,0)
 . . . S LNCTR=1,MSG(1)=XX,CURSIZE=$L(XX)
"RTN","IBY549PO",283,0)
 . . S LNCTR=LNCTR+1
"RTN","IBY549PO",284,0)
 . . S MSG(LNCTR)=NPAT
"RTN","IBY549PO",285,0)
 . . S CURSIZE=CURSIZE+$L(NPAT)
"RTN","IBY549PO",286,0)
 . S LNCTR=LNCTR+1,MSG(LNCTR)="",LNCTR=LNCTR+1,MSG(LNCTR)=""
"RTN","IBY549PO",287,0)
 ;
"RTN","IBY549PO",288,0)
 ; Next add the patients who were updated to the email
"RTN","IBY549PO",289,0)
 S LNCTR=LNCTR+1
"RTN","IBY549PO",290,0)
 S MSG(LNCTR)="The policy expiration dates of active policies for the following deceased"
"RTN","IBY549PO",291,0)
 S CURSIZE=CURSIZE+$L(MSG(LNCTR))
"RTN","IBY549PO",292,0)
 S LNCTR=LNCTR+1
"RTN","IBY549PO",293,0)
 S MSG(LNCTR)="patients were updated to be the patient's date of death+1:"
"RTN","IBY549PO",294,0)
 S CURSIZE=CURSIZE+$L(MSG(LNCTR))
"RTN","IBY549PO",295,0)
 S DFN=""
"RTN","IBY549PO",296,0)
 F  D  Q:DFN=""
"RTN","IBY549PO",297,0)
 . S DFN=$O(^TMP($J,"PATLIST",DFN))
"RTN","IBY549PO",298,0)
 . Q:DFN=""
"RTN","IBY549PO",299,0)
 . S PNM=$$GET1^DIQ(2,DFN,.01)
"RTN","IBY549PO",300,0)
 . S SSN=$$GET1^DIQ(2,DFN,.09),SSN=$E(SSN,6,9)
"RTN","IBY549PO",301,0)
 . S NPAT="      "_PNM_"  "_SSN
"RTN","IBY549PO",302,0)
 . ;
"RTN","IBY549PO",303,0)
 . ; Is the mail message getting too big?
"RTN","IBY549PO",304,0)
 . I CURSIZE+$L(NPAT)>MAXSIZE D
"RTN","IBY549PO",305,0)
 . . D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBY549PO",306,0)
 . . K MSG
"RTN","IBY549PO",307,0)
 . . S CURSIZE=0,LNCTR=2
"RTN","IBY549PO",308,0)
 . . S MSG(1)="The policy expiration dates of active policies for the following deceased"
"RTN","IBY549PO",309,0)
 . . S CURSIZE=CURSIZE+$L(MSG(1))
"RTN","IBY549PO",310,0)
 . . S MSG(2)="patients were updated to be the patient's date of death+1:"
"RTN","IBY549PO",311,0)
 . . S CURSIZE=CURSIZE+$L(MSG(2))
"RTN","IBY549PO",312,0)
 . S LNCTR=LNCTR+1
"RTN","IBY549PO",313,0)
 . S MSG(LNCTR)=NPAT
"RTN","IBY549PO",314,0)
 . S CURSIZE=CURSIZE+$L(NPAT)
"RTN","IBY549PO",315,0)
 ;
"RTN","IBY549PO",316,0)
 D MSG^IBCNEUT5(MLGRP,SUBJECT,"MSG(",,.XMY)
"RTN","IBY549PO",317,0)
 K ^TMP($J,"PATLIST"),^TMP($J,"ERRLIST")
"RTN","IBY549PO",318,0)
 Q
"RTN","IBY549PO",319,0)
 ;
"RTN","IBY549PO",320,0)
UPDTEDT(DFN,IIEN,DOD) ; Update the Expiration for the specified patient policy
"RTN","IBY549PO",321,0)
 ; Input:   DFN                 - IEN of the patient whose policy is being
"RTN","IBY549PO",322,0)
 ;                                updated
"RTN","IBY549PO",323,0)
 ;          IIEN                - IEN of the patient policy multiple being
"RTN","IBY549PO",324,0)
 ;                                updated
"RTN","IBY549PO",325,0)
 ;          DOD                 - Internal Date of Death of the specified
"RTN","IBY549PO",326,0)
 ;                                patient
"RTN","IBY549PO",327,0)
 ;          ^TMP($J,"ERRLIST")  - Current array of Patient Policy update errors
"RTN","IBY549PO",328,0)
 ; Output:  ^TMP($J,"ERRLIST")  - Updated array of Patient Policy update errors
"RTN","IBY549PO",329,0)
 N DA,FDA,IBERR
"RTN","IBY549PO",330,0)
 N $ESTACK,$ETRAP
"RTN","IBY549PO",331,0)
 S $ETRAP="D POLERR^IBY549PO"
"RTN","IBY549PO",332,0)
 S DA=IIEN,DA(1)=DFN
"RTN","IBY549PO",333,0)
 S FDA(2.312,DA_","_DA(1)_",",1.05)=$$NOW^XLFDT()               ; Date Last Edited
"RTN","IBY549PO",334,0)
 S FDA(2.312,DA_","_DA(1)_",",1.06)=.5                          ; Last Edited By
"RTN","IBY549PO",335,0)
 S FDA(2.312,DA_","_DA(1)_",",3)=$P($$FMADD^XLFDT(DOD,1),".",1) ; Date of Death +1
"RTN","IBY549PO",336,0)
 N A,D,X,Y
"RTN","IBY549PO",337,0)
 D FILE^DIE("","FDA","IBERR")
"RTN","IBY549PO",338,0)
 I $D(IBERR) D
"RTN","IBY549PO",339,0)
 . S ^TMP($J,"ERRLIST",DFN,IIEN)=""
"RTN","IBY549PO",340,0)
 Q
"RTN","IBY549PO",341,0)
 ;
"RTN","IBY549PO",342,0)
POLERR ; Called when an error occurs terminating active policies for deceased
"RTN","IBY549PO",343,0)
 ; patients.  Note:  This usually occurs because of a known fileman error and a
"RTN","IBY549PO",344,0)
 ; collision of a post-filing routine updating file 2.312 with a nightly KPAS
"RTN","IBY549PO",345,0)
 ; extract doing inquiries into the 2.312 file at the same time.
"RTN","IBY549PO",346,0)
 ;
"RTN","IBY549PO",347,0)
 ; If an error occurs, this method will add the patient where the error occured
"RTN","IBY549PO",348,0)
 ; onto the error list for manual processing and move on to the next patient.
"RTN","IBY549PO",349,0)
 ; Input:   DFN                 - IIEN of the patient that was being worked 
"RTN","IBY549PO",350,0)
 ;                                when the error occured
"RTN","IBY549PO",351,0)
 ;          ^TMP($J,"ERRLIST")  - Current array of patients that had filing 
"RTN","IBY549PO",352,0)
 ;                                errors
"RTN","IBY549PO",353,0)
 ;          IIEN                - IEN of the patient policy multiple being 
"RTN","IBY549PO",354,0)
 ;                                updated when the error occured
"RTN","IBY549PO",355,0)
 ; Output:  ^TMP($J,"ERRLIST") - Updated array of patients that had filing errors
"RTN","IBY549PO",356,0)
 S ^TMP($J,"ERRLIST",DFN,IIEN)=""           ; Log collision error
"RTN","IBY549PO",357,0)
 S $ECODE=""                                ; Ignore error and continue
"RTN","IBY549PO",358,0)
 Q
"RTN","IBY549PO",359,0)
 ;
"RTN","IBY549PO",360,0)
DONE ; Displays the 'Done' message and finishes the progress bar
"RTN","IBY549PO",361,0)
 ; Input: IBXPD - Post-Installation step being performed
"RTN","IBY549PO",362,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY549PO",363,0)
 Q
"RTN","IBY549PO",364,0)
 ;
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",2,2.342,-2)
2^.312
"UP",2,2.342,-1)
2.312^13
"UP",2,2.342,0)
2.342
"VER")
8.0^22.0
"^DD",2,2.312,3.04,0)
STOP POLICY FROM BILLING^SX^0:NO;1:YES;^3;4^Q
"^DD",2,2.312,3.04,3)
Enter YES if claims should not be created against this policy.
"^DD",2,2.312,3.04,21,0)
^^5^5^3160414^
"^DD",2,2.312,3.04,21,1,0)
Determines whether or not claims may be created for the insurance policy.
"^DD",2,2.312,3.04,21,2,0)
This field is used primarily for CHAMPUS policies.  If the patient is 
"^DD",2,2.312,3.04,21,3,0)
covered under CHAMPUS, but it is known that claims should never be
"^DD",2,2.312,3.04,21,4,0)
submitted to the CHAMPUS Fiscal Intermediary, then entering YES in this
"^DD",2,2.312,3.04,21,5,0)
field will cause Pharmacy claims to the FI not to be created.
"^DD",2,2.312,3.04,"DT")
3160414
"^DD",2,2.312,8.03,0)
EB DISPLAY ENTRY^P365'^IBCN(365,^8;3^Q
"^DD",2,2.312,8.03,3)
Enter a valid IIV Response entry.
"^DD",2,2.312,8.03,21,0)
^^3^3^3160128^
"^DD",2,2.312,8.03,21,1,0)
This field will contains a pointer to the IIV Response entry that was 
"^DD",2,2.312,8.03,21,2,0)
manually or automatically accepted.  It is used to display fields from 
"^DD",2,2.312,8.03,21,3,0)
the IIV Response file in the Eligibility Benefits action.
"^DD",2,2.312,8.03,23,0)
^^6^6^3160128^
"^DD",2,2.312,8.03,23,1,0)
Before this field is set, it is checked to see if it contains a previous 
"^DD",2,2.312,8.03,23,2,0)
value.  If it does, the DO NOT PURGE field (#.11) in the IIV Response 
"^DD",2,2.312,8.03,23,3,0)
file (#365) of the previously set entry is set to 0. This allows the  
"^DD",2,2.312,8.03,23,4,0)
previous IIV Response entry to be purged the next time the purge is run.
"^DD",2,2.312,8.03,23,5,0)
The DO NOT PURGE flag of the current IIV Response entry is then set to 1
"^DD",2,2.312,8.03,23,6,0)
to prevent it from being purged.
"^DD",2,2.312,8.03,"DT")
3160128
"^DD",2,2.342,.04,0)
PERSON CONTACTED^F^^0;4^K:$L(X)>30!($L(X)<3) X
"^DD",2,2.342,.04,3)
Enter the name of the person contacted between 3-30 characters in length..
"^DD",2,2.342,.04,21,0)
^^4^4^3151104^
"^DD",2,2.342,.04,21,1,0)
This is the name of the person you contacted.
"^DD",2,2.342,.04,21,2,0)
Enter a free text name.  It is recommended that
"^DD",2,2.342,.04,21,3,0)
you use the format of Firstname MI Lastname, 
"^DD",2,2.342,.04,21,4,0)
just as they would say it to you.
"^DD",2,2.342,.04,"DT")
3151116
"^DD",2,2.342,.05,0)
CONTACT PHONE #^F^^0;5^K:$L(X)>20!($L(X)<7) X
"^DD",2,2.342,.05,3)
Enter the phone number of the person who was contacted between 7-20 characters in length..
"^DD",2,2.342,.05,21,0)
^^5^5^3151104^
"^DD",2,2.342,.05,21,1,0)
This is the phone number of the person you contacted.
"^DD",2,2.342,.05,21,2,0)
If you contacted an insurance company and this number
"^DD",2,2.342,.05,21,3,0)
is not in the insurance company file, then you may want
"^DD",2,2.342,.05,21,4,0)
to enter it into that file as well. The number entered
"^DD",2,2.342,.05,21,5,0)
here will only be seen when looking at this contact.
"^DD",2,2.342,.05,"DT")
3151116
"^DD",2,2.342,.06,0)
CALL REFERENCE NUMBER^F^^0;6^K:$L(X)>35!($L(X)<3) X
"^DD",2,2.342,.06,3)
Enter the Call reference number which was provided by the Person Contacted between 3-35 characters in length.
"^DD",2,2.342,.06,21,0)
^^5^5^3151104^
"^DD",2,2.342,.06,21,1,0)
If the company you called gave you a reference
"^DD",2,2.342,.06,21,2,0)
number for the call then enter that reference
"^DD",2,2.342,.06,21,3,0)
number here. Many companies will issue reference
"^DD",2,2.342,.06,21,4,0)
numbers so that they can track their calls and
"^DD",2,2.342,.06,21,5,0)
allow reference back to them by others.
"^DD",2,2.342,.06,"DT")
3151116
"^DD",2,2.342,.07,0)
METHOD OF CONTACT^S^1:PHONE;2:MAIL;3:OVERNIGHT MAIL;4:PERSONAL;5:VOICE MAIL;6:OTHER;^0;7^Q
"^DD",2,2.342,.07,3)
Select the Method of Contact: '1' for Phone, '2' for Mail, '3' for Overnight mail, '4' for Personal, '5' for Voice mail or '6' for Other.
"^DD",2,2.342,.07,21,0)
^^3^3^3151104^
"^DD",2,2.342,.07,21,1,0)
This is the method that you used to contact the person
"^DD",2,2.342,.07,21,2,0)
contacted in this entry.  Most contacts will be by
"^DD",2,2.342,.07,21,3,0)
phone but many others will be my mail.
"^DD",2,2.342,.07,"DT")
3151117
"^DD",2,2.342,.08,0)
AUTHORIZATION NUMBER^F^^0;8^K:$L(X)>35!($L(X)<3) X
"^DD",2,2.342,.08,3)
Enter the Authorization Number between 3-35 characters in length.
"^DD",2,2.342,.08,21,0)
^^6^6^3151116^
"^DD",2,2.342,.08,21,1,0)
Enter the treatment authorization number that the 
"^DD",2,2.342,.08,21,2,0)
insurance company gave you during this contact.
"^DD",2,2.342,.08,21,3,0)
 
"^DD",2,2.342,.08,21,4,0)
The data in this field, if it exists will be connsidered
"^DD",2,2.342,.08,21,5,0)
the Treatment Authoirzation code for this care
"^DD",2,2.342,.08,21,6,0)
and will automatically be used by the biling module.
"^DD",2,2.342,.08,"DT")
3151116
"^DD",350.9,350.9,51.16,0)
*CONTACT PERSON^RP200'^VA(200,^51;16^Q
"^DD",350.9,350.9,51.16,3)
This is the person that the Financial Services Center shall contact if there are communication problems.
"^DD",350.9,350.9,51.16,21,0)
^^5^5^3151117^
"^DD",350.9,350.9,51.16,21,1,0)
This field identifies the person that the Financial Services Center
"^DD",350.9,350.9,51.16,21,2,0)
or the Eligibility Communicator shall contact if there are any
"^DD",350.9,350.9,51.16,21,3,0)
problems that need to be addressed; e.g. communication problems.
"^DD",350.9,350.9,51.16,21,4,0)
  
"^DD",350.9,350.9,51.16,21,5,0)
This information will be sent nightly to FSC/EC to keep it up to date.
"^DD",350.9,350.9,51.16,23,0)
^^2^2^3151117^
"^DD",350.9,350.9,51.16,23,1,0)
This field will be removed.  It was marked for deletion in 
"^DD",350.9,350.9,51.16,23,2,0)
patch IB*2.0*549
"^DD",350.9,350.9,51.16,"DT")
3151117
"^DD",350.9,350.9,51.27,0)
270 MASTER SWITCH REALTIME^S^Y:YES;N:NO;^51;27^Q
"^DD",350.9,350.9,51.27,3)
Enter 'YES' if real time 270 transactions can be created and transmitted to the Eligibility Communicator (EC).
"^DD",350.9,350.9,51.27,21,0)
^^3^3^3150505^
"^DD",350.9,350.9,51.27,21,1,0)
A 'Y'es values indicates that real time 270 transactions can
"^DD",350.9,350.9,51.27,21,2,0)
be created and transmitted. A 'N'o value indicates that real
"^DD",350.9,350.9,51.27,21,3,0)
time transactions cannot be created and transmitted.
"^DD",350.9,350.9,51.27,"DT")
3151007
"^DD",350.9,350.9,51.28,0)
270 MASTER SWITCH NIGHTLY^S^Y:YES;N:NO;^51;28^Q
"^DD",350.9,350.9,51.28,3)
Enter 'YES' if nightly extract 270 transactions can be created and transmitted to the Eligibility Communicator (EC).
"^DD",350.9,350.9,51.28,21,0)
^^3^3^3150505^
"^DD",350.9,350.9,51.28,21,1,0)
A "Y'es value indicates that nightly extract 270 transactions
"^DD",350.9,350.9,51.28,21,2,0)
can be created and transmitted. A 'N'o value indicates that
"^DD",350.9,350.9,51.28,21,3,0)
nightly 270 transactions cannot be created and transmitted.
"^DD",350.9,350.9,51.28,"DT")
3151007
"^DD",350.9,350.9,51.29,0)
DAILY NIF STATUS CHECK TIME^FX^^51;29^K:(X'?4N)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.29,3)
Enter the time in four digit military format.
"^DD",350.9,350.9,51.29,21,0)
^^3^3^3151113^
"^DD",350.9,350.9,51.29,21,1,0)
This is the time of day to check to see if the 'IB NIF TCP' HL7 Logical 
"^DD",350.9,350.9,51.29,21,2,0)
Link is enabled. If problems are encountered a message will be sent via 
"^DD",350.9,350.9,51.29,21,3,0)
MailMan to the InsuranceRapidResponse@domain.ext mailgroup.
"^DD",350.9,350.9,51.29,"DT")
3151113
"^DD",365,365,.11,0)
DO NOT PURGE^S^1:YES;0:NO;^0;11^Q
"^DD",365,365,.11,3)
Enter 'YES' to prevent the entry from being purged. Otherwise, enter 'NO'.
"^DD",365,365,.11,21,0)
^^3^3^3160119^
"^DD",365,365,.11,21,1,0)
This is not to be edited by a user.  If the value is 1, then this record 
"^DD",365,365,.11,21,2,0)
may not be purged as it is being referenced by a patient's insurance 
"^DD",365,365,.11,21,3,0)
record.
"^DD",365,365,.11,23,0)
^^12^12^3160119^
"^DD",365,365,.11,23,1,0)
Those records that are being pointed to by the patient's insurance 
"^DD",365,365,.11,23,2,0)
subfile (#2.312) will be marked as DO NOT PURGE (value of 1).  The eIV 
"^DD",365,365,.11,23,3,0)
purge routine(s) will honor this flag and not purge these records. 
"^DD",365,365,.11,23,4,0)
(^IBCNEKIT)
"^DD",365,365,.11,23,5,0)
 
"^DD",365,365,.11,23,6,0)
How this value is set:  When a user accepts an insurance buffer entry 
"^DD",365,365,.11,23,7,0)
#355.33 and decides to accept the patient's eligibility benefit 
"^DD",365,365,.11,23,8,0)
information, this field for the corresponding record will be marked as DO 
"^DD",365,365,.11,23,9,0)
NOT PURGE... (ICB or VistA).  The field "EB DISPLAY ENTRY" (#2.312, 8.03) 
"^DD",365,365,.11,23,10,0)
will be set to point to this corresponding record in file #365 so that 
"^DD",365,365,.11,23,11,0)
the data can be displayed in view only mode; thus showing what the payer 
"^DD",365,365,.11,23,12,0)
returned.
"^DD",365,365,.11,"DT")
3160119
**INSTALL NAME**
DG*5.3*916
"BLD",9766,0)
DG*5.3*916^REGISTRATION^0^3160629^y
"BLD",9766,4,0)
^9.64PA^2^1
"BLD",9766,4,2,0)
2
"BLD",9766,4,2,2,0)
^9.641^2^1
"BLD",9766,4,2,2,2,0)
PATIENT  (File-top level)
"BLD",9766,4,2,2,2,1,0)
^9.6411^.351^1
"BLD",9766,4,2,2,2,1,.351,0)
DATE OF DEATH
"BLD",9766,4,2,222)
y^y^p^^^^n^^n
"BLD",9766,4,2,224)

"BLD",9766,4,"APDD",2,2)

"BLD",9766,4,"APDD",2,2,.351)

"BLD",9766,4,"B",2,2)

"BLD",9766,6.3)
42
"BLD",9766,"ABPKG")
n
"BLD",9766,"KRN",0)
^9.67PA^779.2^20
"BLD",9766,"KRN",.4,0)
.4
"BLD",9766,"KRN",.401,0)
.401
"BLD",9766,"KRN",.402,0)
.402
"BLD",9766,"KRN",.403,0)
.403
"BLD",9766,"KRN",.5,0)
.5
"BLD",9766,"KRN",.84,0)
.84
"BLD",9766,"KRN",3.6,0)
3.6
"BLD",9766,"KRN",3.8,0)
3.8
"BLD",9766,"KRN",9.2,0)
9.2
"BLD",9766,"KRN",9.8,0)
9.8
"BLD",9766,"KRN",19,0)
19
"BLD",9766,"KRN",19.1,0)
19.1
"BLD",9766,"KRN",101,0)
101
"BLD",9766,"KRN",409.61,0)
409.61
"BLD",9766,"KRN",771,0)
771
"BLD",9766,"KRN",779.2,0)
779.2
"BLD",9766,"KRN",870,0)
870
"BLD",9766,"KRN",8989.51,0)
8989.51
"BLD",9766,"KRN",8989.52,0)
8989.52
"BLD",9766,"KRN",8994,0)
8994
"BLD",9766,"KRN","B",.4,.4)

"BLD",9766,"KRN","B",.401,.401)

"BLD",9766,"KRN","B",.402,.402)

"BLD",9766,"KRN","B",.403,.403)

"BLD",9766,"KRN","B",.5,.5)

"BLD",9766,"KRN","B",.84,.84)

"BLD",9766,"KRN","B",3.6,3.6)

"BLD",9766,"KRN","B",3.8,3.8)

"BLD",9766,"KRN","B",9.2,9.2)

"BLD",9766,"KRN","B",9.8,9.8)

"BLD",9766,"KRN","B",19,19)

"BLD",9766,"KRN","B",19.1,19.1)

"BLD",9766,"KRN","B",101,101)

"BLD",9766,"KRN","B",409.61,409.61)

"BLD",9766,"KRN","B",771,771)

"BLD",9766,"KRN","B",779.2,779.2)

"BLD",9766,"KRN","B",870,870)

"BLD",9766,"KRN","B",8989.51,8989.51)

"BLD",9766,"KRN","B",8989.52,8989.52)

"BLD",9766,"KRN","B",8994,8994)

"BLD",9766,"QDEF")
^^^^^^^^^^YES
"BLD",9766,"QUES",0)
^9.62^^
"BLD",9766,"REQB",0)
^9.611^1^1
"BLD",9766,"REQB",1,0)
IB*2.0*549^2
"BLD",9766,"REQB","B","IB*2.0*549",1)

"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
5.3^DG
"FIA",2,2)
1
"FIA",2,2,.351)

"IX",2,2,"ADGFM351",0)
2^ADGFM351^This x-ref calls the DG FIELD MONITOR event point.^MU^^F^I^I^2^^^^^A
"IX",2,2,"ADGFM351",.1,0)
^^5^5^3020624
"IX",2,2,"ADGFM351",.1,1,0)
This cross reference activates the DG FIELD MONITOR event point.
"IX",2,2,"ADGFM351",.1,2,0)
Applications that wish to monitor edit activity related to this field may
"IX",2,2,"ADGFM351",.1,3,0)
subscribe to that event point and take action as indicated by the changes
"IX",2,2,"ADGFM351",.1,4,0)
that occur.  Refer to the DG FIELD MONITOR protocol for a description of
"IX",2,2,"ADGFM351",.1,5,0)
the information available at the time of the event.
"IX",2,2,"ADGFM351",1)
D FC^DGFCPROT(.DA,2,.351,"SET",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFM351",2)
D FC^DGFCPROT(.DA,2,.351,"KILL",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFM351",11.1,0)
^.114IA^1^1
"IX",2,2,"ADGFM351",11.1,1,0)
1^F^2^.351^^^F
"IX",2,2,"ADGFMD351",0)
2^ADGFMD351^This x-ref calls the DG FIELD MONITOR event point.^MU^^F^I^I^2^^^^^A
"IX",2,2,"ADGFMD351",.1,0)
^^5^5^3020820
"IX",2,2,"ADGFMD351",.1,1,0)
This cross reference activates the DG FIELD MONITOR event point.
"IX",2,2,"ADGFMD351",.1,2,0)
Applications that wish to monitor edit activity related to this field may
"IX",2,2,"ADGFMD351",.1,3,0)
subscribe to that event point and take action as indicated by the changes
"IX",2,2,"ADGFMD351",.1,4,0)
that occur.  Refer to the DG FIELD MONITOR protocol for a description of
"IX",2,2,"ADGFMD351",.1,5,0)
the information available at the time of the event.
"IX",2,2,"ADGFMD351",1)
D FC^DGFCPROT(.DA,2,.351,"SET",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD351",2)
D FC^DGFCPROT(.DA,2,.351,"KILL",$H,$G(DUZ),.X,.X1,.X2,$G(XQY0)) Q
"IX",2,2,"ADGFMD351",11.1,0)
^.114IA^1^1
"IX",2,2,"ADGFMD351",11.1,1,0)
1^F^2^.351^^^F
"IX",2,2,"AW",0)
2^AW^Terminate active policies when DATE OF DEATH is entered^MU^^F^IR^I^2^^^^^A
"IX",2,2,"AW",.1,0)
^^5^5^3151118^
"IX",2,2,"AW",.1,1,0)
Terminates all Insurance Policies that have an EFFECTIVE DATE OF POLICY 
"IX",2,2,"AW",.1,2,0)
and do not have an INSURANCE EXPIRATION DATE for a patient when the DATE 
"IX",2,2,"AW",.1,3,0)
OF DEATH field is first entered. This is done by setting the INSURANCE 
"IX",2,2,"AW",.1,4,0)
EXPIRATION DATE to be the DATE OF DEATH+1 in method DEATH^IBCNEUT7. Note: 
"IX",2,2,"AW",.1,5,0)
ICR #6231 allows the call to routine IBCNEUT7.
"IX",2,2,"AW",1)
D DEATH^IBCNEUT7(DA,X(1))
"IX",2,2,"AW",1.4)
S X=$S((X(1)'="")&(X1(1)=""):1,1:0)
"IX",2,2,"AW",2)
Q
"IX",2,2,"AW",11.1,0)
^.114IA^1^1
"IX",2,2,"AW",11.1,1,0)
1^F^2^.351^^^F
"MBREQ")
1
"PKG",5,-1)
1^1
"PKG",5,0)
REGISTRATION^DG^PATIENT REGISTRATION, ADMISSION, DISCHARGE, EMBOSSER 
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
5.3^2930813
"PKG",5,22,1,"PAH",1,0)
916^3160629
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"VER")
8.0^22.0
"^DD",2,2,.351,0)
DATE OF DEATH^DXa^^.35;1^S %DT="EPXT" D ^%DT S X=Y K:Y<1 X I $D(X) D H^DGUTL K:X>DGTIME X K DGTIME,DGDATE I $D(X) S DFN=DA D DEATH^DGLOCK
"^DD",2,2,.351,1,0)
^.1
"^DD",2,2,.351,1,1,0)
^^TRIGGER^2^.091
"^DD",2,2,.351,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X=DIV X ^DD(2,.351,1,1,49.3) S X=$E(Y(8),Y(9),X) S Y=X,X=Y(7),X=X_Y_"]" X ^DD(2,.351,1,1,1.4)
"^DD",2,2,.351,1,1,1.4)
S DIH=$G(^DPT(DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=2,DIG=.091 D ^DICR
"^DD",2,2,.351,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y X ^DD(2,.351,1,1,2.1) S DIH=$G(^DPT(DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=2,DIG=.091 D ^DICR
"^DD",2,2,.351,1,1,2.1)
S X=DIV X ^DD(2,.351,1,1,59.2) S X=$P(Y(5),Y(6),X),Y(7)=$G(X) S X="]",Y(8)=$G(X) S X=2,X=$P(Y(7),Y(8),X) S Y=X,X=Y(3),X=X_Y
"^DD",2,2,.351,1,1,49.2)
S X=DIU_"[PATIENT DIED ON ",Y(1)=$G(X) S X=DIV,Y(2)=$G(X) S X=4,Y(3)=$G(X) S X=5,X=$E(Y(2),Y(3),X) S Y=X,X=Y(1),X=X_Y_"/",Y(4)=$G(X) S X=DIV,Y(5)=$G(X) S X=6
"^DD",2,2,.351,1,1,49.3)
X ^DD(2,.351,1,1,49.2) S Y(6)=$G(X) S X=7,X=$E(Y(5),Y(6),X) S Y=X,X=Y(4),X=X_Y_"/",Y(7)=$G(X) S X=DIV,Y(8)=$G(X) S X=2,Y(9)=$G(X) S X=3
"^DD",2,2,.351,1,1,59.2)
S X=DIU,Y(1)=$G(X) S X="[PATIENT DIED",Y(2)=$G(X) S X=1,X=$P(Y(1),Y(2),X),Y(3)=$G(X),Y(4)=$G(X) S X=DIU,Y(5)=$G(X) S X="PATIENT DIED",Y(6)=$G(X) S X=2
"^DD",2,2,.351,1,1,"%D",0)
^^3^3^3150325^
"^DD",2,2,.351,1,1,"%D",1,0)
This appends into the REMARKS field a notation regarding the DATE OF
"^DD",2,2,.351,1,1,"%D",2,0)
DEATH.  If DATE OF DEATH is deleted, the notation will be stripped out
"^DD",2,2,.351,1,1,"%D",3,0)
of the REMARKS field.
"^DD",2,2,.351,1,1,"CREATE VALUE")
REMARKS_"[PATIENT DIED ON "_$E(DATE OF DEATH,4,5)_"/"_$E(DATE OF DEATH,6,7)_"/"_$E(DATE OF DEATH,2,3)_"]"
"^DD",2,2,.351,1,1,"DELETE VALUE")
$P(REMARKS,"[PATIENT DIED",1)_$P($P(REMARKS,"PATIENT DIED",2),"]",2)
"^DD",2,2,.351,1,1,"DT")
3080310
"^DD",2,2,.351,1,1,"FIELD")
REMARKS
"^DD",2,2,.351,1,2,0)
^^TRIGGER^2^.352
"^DD",2,2,.351,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DPT(D0,.35)):^(.35),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$S(($D(DUZ)#2):DUZ,1:"") S DIH=$G(^DPT(DIV(0),.35)),DIV=X S $P(^(.35),U,2)=DIV,DIH=2,DIG=.352 D ^DICR
"^DD",2,2,.351,1,2,2)
Q
"^DD",2,2,.351,1,2,"CREATE VALUE")
S X=$S(($D(DUZ)#2):DUZ,1:"")
"^DD",2,2,.351,1,2,"DELETE VALUE")
NO EFFECT
"^DD",2,2,.351,1,2,"DT")
3080310
"^DD",2,2,.351,1,2,"FIELD")
DEATH ENTERED BY
"^DD",2,2,.351,1,3,0)
2^ADGDBUL^MUMPS
"^DD",2,2,.351,1,3,1)
D DSBULL^DGDEATH
"^DD",2,2,.351,1,3,2)
D DKBULL^DGDEATH
"^DD",2,2,.351,1,3,"DT")
3031008
"^DD",2,2,.351,1,4,0)
2^AEXP1
"^DD",2,2,.351,1,4,1)
S ^DPT("AEXP1",$E(X,1,30),DA)=""
"^DD",2,2,.351,1,4,2)
K ^DPT("AEXP1",$E(X,1,30),DA)
"^DD",2,2,.351,1,5,0)
2^AOERR^MUMPS
"^DD",2,2,.351,1,5,1)
D DEATH^DGOERNOT
"^DD",2,2,.351,1,5,2)
Q
"^DD",2,2,.351,1,5,"%D",0)
^^3^3^2910716^^^^
"^DD",2,2,.351,1,5,"%D",1,0)
     This cross-reference is used in conjunction with ORDER ENTRY/RESULTS
"^DD",2,2,.351,1,5,"%D",2,0)
REPORTING v2.09 or higher to send MAS OE/RR NOTIFICATIONS of
"^DD",2,2,.351,1,5,"%D",3,0)
DEATH to users who are on an OE/RR LIST for a patient.
"^DD",2,2,.351,1,5,"DT")
2910715
"^DD",2,2,.351,1,6,0)
2^APSJD^MUMPS
"^DD",2,2,.351,1,6,1)
S XX=X,X="PSJADT" X ^%ZOSF("TEST") S X=XX K XX I  D END^PSJADT
"^DD",2,2,.351,1,6,2)
Q
"^DD",2,2,.351,1,6,3)
Cancels Inpatient Medication orders.
"^DD",2,2,.351,1,6,"%D",0)
^^3^3^2930608^^^
"^DD",2,2,.351,1,6,"%D",1,0)
This is used by the Inpatient Medications package to cancel a patient's
"^DD",2,2,.351,1,6,"%D",2,0)
IV and Unit Dose orders whenever a date of death is entered for the
"^DD",2,2,.351,1,6,"%D",3,0)
patient.
"^DD",2,2,.351,1,6,"DT")
2930608
"^DD",2,2,.351,1,7,0)
2^ARCDTH^MUMPS
"^DD",2,2,.351,1,7,1)
S RCX=X,X="RCAMDTH" X ^%ZOSF("TEST") S X=RCX K RCX I  D SET^RCAMDTH
"^DD",2,2,.351,1,7,2)
S RCX=X,X="RCAMDTH" X ^%ZOSF("TEST") S X=RCX K RCX I  D ERR^RCAMDTH
"^DD",2,2,.351,1,7,3)
ACCOUNTS RECEIVABLE DEATH NOTIFICATION
"^DD",2,2,.351,1,7,"%D",0)
^^3^3^2930722^^^^
"^DD",2,2,.351,1,7,"%D",1,0)
This cross-reference is used to notify the Accounts Receivable package (v4 or
"^DD",2,2,.351,1,7,"%D",2,0)
higher) of a patient's death so that the patient's account may be reviewed for
"^DD",2,2,.351,1,7,"%D",3,0)
appropriate action. 
"^DD",2,2,.351,1,7,"DT")
2930609
"^DD",2,2,.351,1,8,0)
2^ADEP^MUMPS
"^DD",2,2,.351,1,8,1)
D SET^DGDEPINA
"^DD",2,2,.351,1,8,2)
D KILL^DGDEPINA
"^DD",2,2,.351,1,8,"%D",0)
^^1^1^2941114^
"^DD",2,2,.351,1,8,"%D",1,0)
This is used to updated the effective dates in file 408.12.
"^DD",2,2,.351,1,8,"DT")
2941114
"^DD",2,2,.351,1,9,0)
2^AENR351^MUMPS
"^DD",2,2,.351,1,9,1)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.351,1,9,2)
D AUTOUPD^DGENA2(DA)
"^DD",2,2,.351,1,9,3)
DO NOT DELETE
"^DD",2,2,.351,1,9,"%D",0)
^^1^1^2970630^^^^
"^DD",2,2,.351,1,9,"%D",1,0)
Used to update the patient's enrollment.
"^DD",2,2,.351,1,9,"DT")
2970630
"^DD",2,2,.351,1,10,0)
2^DG714^MUMPS
"^DD",2,2,.351,1,10,1)
D START^DGMTDELS(DA)
"^DD",2,2,.351,1,10,2)
Q
"^DD",2,2,.351,1,10,3)
Deletes last REQUIRED means test
"^DD",2,2,.351,1,10,"DT")
3060814
"^DD",2,2,.351,1,52,0)
2^APSOD^MUMPS
"^DD",2,2,.351,1,52,1)
I $$VERSION^XPDUTL("PSO")>6 D APSOD^PSOCAN3(DA)
"^DD",2,2,.351,1,52,2)
I $$VERSION^XPDUTL("PSO")>6 D APSOD^PSOAUTOC(DA)
"^DD",2,2,.351,1,52,3)
Discontinues Outpatient Medications.
"^DD",2,2,.351,1,52,"%D",0)
^^3^3^2961122^^^^
"^DD",2,2,.351,1,52,"%D",1,0)
This xref is used to discontinue all active outpatient medications whenever
"^DD",2,2,.351,1,52,"%D",2,0)
a date of death is entered for the patient.  This xref is used with v7 of
"^DD",2,2,.351,1,52,"%D",3,0)
Outpatient Pharmacy (DBIA #1624).
"^DD",2,2,.351,1,52,"%D",4,0)
Kill logic updated with DG*5.3*455.  Mail message sent to pharmacy when date
"^DD",2,2,.351,1,52,"%D",5,0)
of death is deleted to holders of PSORPH key.
"^DD",2,2,.351,1,52,"DT")
3020926
"^DD",2,2,.351,1,301,0)
2^IVM351^MUMPS
"^DD",2,2,.351,1,301,1)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.351,1,301,2)
S IVMX=X,X="IVMPXFR" X ^%ZOSF("TEST") D:$T DPT^IVMPXFR S X=IVMX K IVMX
"^DD",2,2,.351,1,301,"%D",0)
^^5^5^2930605^
"^DD",2,2,.351,1,301,"%D",1,0)
This cross-reference will check the IVM PATIENT file to see if a change
"^DD",2,2,.351,1,301,"%D",2,0)
to this field will require transmission to the IVM Center.  If it does,
"^DD",2,2,.351,1,301,"%D",3,0)
the IVM PATIENT file entry's TRANSMISSION STATUS will be set to 0 and
"^DD",2,2,.351,1,301,"%D",4,0)
the nightly background job will transmit the updated information.
"^DD",2,2,.351,1,301,"DT")
2930605
"^DD",2,2,.351,1,991,0)
2^AVAFC351^MUMPS
"^DD",2,2,.351,1,991,1)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".351;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.351,1,991,2)
I ($T(AVAFC^VAFCDD01)'="") S VAFCF=".351;" D AVAFC^VAFCDD01(DA)
"^DD",2,2,.351,1,991,"%D",0)
^^15^15^2990204^^
"^DD",2,2,.351,1,991,"%D",1,0)
This cross reference is used to remember that changes were made to the
"^DD",2,2,.351,1,991,"%D",2,0)
PATIENT file (#2) outside of the Registration process.  Execution of this
"^DD",2,2,.351,1,991,"%D",3,0)
cross reference will create an entry in the ADT/HL7 PIVOT file (#391.71)
"^DD",2,2,.351,1,991,"%D",4,0)
and mark it as requiring transmission of an HL7 ADT-A08 message.
"^DD",2,2,.351,1,991,"%D",5,0)
 
"^DD",2,2,.351,1,991,"%D",6,0)
The local variable VAFCFLG will be set to 1 if the cross reference is
"^DD",2,2,.351,1,991,"%D",7,0)
not executed because the change is being made from within the Registration
"^DD",2,2,.351,1,991,"%D",8,0)
process.
"^DD",2,2,.351,1,991,"%D",9,0)
 
"^DD",2,2,.351,1,991,"%D",10,0)
Execution of this cross reference can be prevented by setting the local
"^DD",2,2,.351,1,991,"%D",11,0)
variable VAFCA08 equal to 1.
"^DD",2,2,.351,1,991,"%D",12,0)
  
"^DD",2,2,.351,1,991,"%D",13,0)
The local variable VAFCF is used to identify the field edited.
"^DD",2,2,.351,1,991,"%D",14,0)
This data is stored in the FIELD(S) EDITED (#2.1) field in the 
"^DD",2,2,.351,1,991,"%D",15,0)
ADT/HL7 PIVOT file (#391.71).
"^DD",2,2,.351,1,991,"DT")
2990204
"^DD",2,2,.351,1,992,0)
2^ADGRU351^MUMPS
"^DD",2,2,.351,1,992,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.351,1,992,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(DA)
"^DD",2,2,.351,1,992,"%D",0)
^^9^9^2990920^
"^DD",2,2,.351,1,992,"%D",1,0)
This cross reference is used to remember that changes were made to a 
"^DD",2,2,.351,1,992,"%D",2,0)
monitored data field in the PATIENT File (#2) required for a vendor
"^DD",2,2,.351,1,992,"%D",3,0)
RAI/MDS COTS system.  Execution of this cross reference will create
"^DD",2,2,.351,1,992,"%D",4,0)
an entry in the ADT/HL7 PIVOT file (#391.71) and mark it as requiring
"^DD",2,2,.351,1,992,"%D",5,0)
transmission of an HL7 demographic A08 update message to the COTS
"^DD",2,2,.351,1,992,"%D",6,0)
interface.
"^DD",2,2,.351,1,992,"%D",7,0)
 
"^DD",2,2,.351,1,992,"%D",8,0)
The local variable DGRUGA08 will be set to 1 if the cross reference is
"^DD",2,2,.351,1,992,"%D",9,0)
not to be executed as part of a re-indexing.
"^DD",2,2,.351,1,992,"DT")
2990920
"^DD",2,2,.351,3)
Enter the date the patient died.  Date must not be before date of birth.
"^DD",2,2,.351,5,1,0)
405^.01^3
"^DD",2,2,.351,5,2,0)
405^.18^2
"^DD",2,2,.351,21,0)
^^6^6^3110119^
"^DD",2,2,.351,21,1,0)
Enter the date the patient died.  Date needs to be a precise date, i.e. 
"^DD",2,2,.351,21,2,0)
a day, month, and year MUST be included.
"^DD",2,2,.351,21,3,0)
Date of Death can not be prior to
"^DD",2,2,.351,21,4,0)
        P&T Effective Date
"^DD",2,2,.351,21,5,0)
        Date Ruled Incompetent (Civil and VA)
"^DD",2,2,.351,21,6,0)
        Date of Birth
"^DD",2,2,.351,"AUDIT")
y
"^DD",2,2,.351,"DT")
3151118
**END**
**END**
