Released ROR*1.5*29 SEQ #29
Extracted from mail message
**KIDS**:ROR*1.5*29^

**INSTALL NAME**
ROR*1.5*29
"BLD",10111,0)
ROR*1.5*29^CLINICAL CASE REGISTRIES^0^3161117^y
"BLD",10111,1,0)
^^6^6^3160824^^
"BLD",10111,1,1,0)
This patch contains changes to the following:
"BLD",10111,1,2,0)
 
"BLD",10111,1,3,0)
1.      A new Selection Panel on each report to allow the user to limit 
"BLD",10111,1,4,0)
the report to patients with a diagnosis of interest in a date range. 
"BLD",10111,1,5,0)
 
"BLD",10111,1,6,0)
2.      Two new reports Hep A and Hep B are included in this patch. 
"BLD",10111,4,0)
^9.64PA^799.34^2
"BLD",10111,4,799.31,0)
799.31
"BLD",10111,4,799.31,222)
n^n^f^^n^^y^o^n
"BLD",10111,4,799.31,224)
N Z S Z=$P(^(0),U) I Z["RANGE_5"!(Z["RANGE_6")!(Z["RANGE_7")!($E(Z,1,3)="VAC")!($E(Z,1,3)="HEP")!($E(Z,1,5)="NOHEP")
"BLD",10111,4,799.34,0)
799.34
"BLD",10111,4,799.34,222)
n^y^f^^y^^y^o^n
"BLD",10111,4,799.34,224)
I $P($G(^(0)),U)["Hepatitis A"!($P($G(^(0)),U)["Hepatitis B")
"BLD",10111,4,"B",799.31,799.31)

"BLD",10111,4,"B",799.34,799.34)

"BLD",10111,6.3)
18
"BLD",10111,"ABPKG")
n
"BLD",10111,"INI")
PRE^RORP029
"BLD",10111,"INIT")
POST^RORP029
"BLD",10111,"KRN",0)
^9.67PA^779.2^20
"BLD",10111,"KRN",.4,0)
.4
"BLD",10111,"KRN",.401,0)
.401
"BLD",10111,"KRN",.402,0)
.402
"BLD",10111,"KRN",.403,0)
.403
"BLD",10111,"KRN",.5,0)
.5
"BLD",10111,"KRN",.84,0)
.84
"BLD",10111,"KRN",.84,"NM",0)
^9.68A^8^6
"BLD",10111,"KRN",.84,"NM",1,0)
7981999.001^^0
"BLD",10111,"KRN",.84,"NM",3,0)
7981024.001^^0
"BLD",10111,"KRN",.84,"NM",5,0)
7980000.018^^0
"BLD",10111,"KRN",.84,"NM",6,0)
7981025.001^^0
"BLD",10111,"KRN",.84,"NM",7,0)
7981024.002^^0
"BLD",10111,"KRN",.84,"NM",8,0)
7981025.002^^0
"BLD",10111,"KRN",.84,"NM","B",7980000.018,5)

"BLD",10111,"KRN",.84,"NM","B",7981024.001,3)

"BLD",10111,"KRN",.84,"NM","B",7981024.002,7)

"BLD",10111,"KRN",.84,"NM","B",7981025.001,6)

"BLD",10111,"KRN",.84,"NM","B",7981025.002,8)

"BLD",10111,"KRN",.84,"NM","B",7981999.001,1)

"BLD",10111,"KRN",3.6,0)
3.6
"BLD",10111,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",10111,"KRN",3.8,0)
3.8
"BLD",10111,"KRN",9.2,0)
9.2
"BLD",10111,"KRN",9.8,0)
9.8
"BLD",10111,"KRN",9.8,"NM",0)
^9.68A^9^8
"BLD",10111,"KRN",9.8,"NM",1,0)
RORXU010^^0^B25087165
"BLD",10111,"KRN",9.8,"NM",2,0)
RORP029^^0^B20741353
"BLD",10111,"KRN",9.8,"NM",3,0)
RORXU002^^0^B146259436
"BLD",10111,"KRN",9.8,"NM",4,0)
RORUTL11^^0^B4575612
"BLD",10111,"KRN",9.8,"NM",5,0)
RORX024^^0^B71003457
"BLD",10111,"KRN",9.8,"NM",6,0)
RORX024A^^0^B72187457
"BLD",10111,"KRN",9.8,"NM",7,0)
RORX025^^0^B19022640
"BLD",10111,"KRN",9.8,"NM",9,0)
RORUTL21^^0^B10076025
"BLD",10111,"KRN",9.8,"NM","B","RORP029",2)

"BLD",10111,"KRN",9.8,"NM","B","RORUTL11",4)

"BLD",10111,"KRN",9.8,"NM","B","RORUTL21",9)

"BLD",10111,"KRN",9.8,"NM","B","RORX024",5)

"BLD",10111,"KRN",9.8,"NM","B","RORX024A",6)

"BLD",10111,"KRN",9.8,"NM","B","RORX025",7)

"BLD",10111,"KRN",9.8,"NM","B","RORXU002",3)

"BLD",10111,"KRN",9.8,"NM","B","RORXU010",1)

"BLD",10111,"KRN",19,0)
19
"BLD",10111,"KRN",19,"NM",0)
^9.68A^^
"BLD",10111,"KRN",19.1,0)
19.1
"BLD",10111,"KRN",101,0)
101
"BLD",10111,"KRN",409.61,0)
409.61
"BLD",10111,"KRN",771,0)
771
"BLD",10111,"KRN",779.2,0)
779.2
"BLD",10111,"KRN",870,0)
870
"BLD",10111,"KRN",8989.51,0)
8989.51
"BLD",10111,"KRN",8989.52,0)
8989.52
"BLD",10111,"KRN",8994,0)
8994
"BLD",10111,"KRN","B",.4,.4)

"BLD",10111,"KRN","B",.401,.401)

"BLD",10111,"KRN","B",.402,.402)

"BLD",10111,"KRN","B",.403,.403)

"BLD",10111,"KRN","B",.5,.5)

"BLD",10111,"KRN","B",.84,.84)

"BLD",10111,"KRN","B",3.6,3.6)

"BLD",10111,"KRN","B",3.8,3.8)

"BLD",10111,"KRN","B",9.2,9.2)

"BLD",10111,"KRN","B",9.8,9.8)

"BLD",10111,"KRN","B",19,19)

"BLD",10111,"KRN","B",19.1,19.1)

"BLD",10111,"KRN","B",101,101)

"BLD",10111,"KRN","B",409.61,409.61)

"BLD",10111,"KRN","B",771,771)

"BLD",10111,"KRN","B",779.2,779.2)

"BLD",10111,"KRN","B",870,870)

"BLD",10111,"KRN","B",8989.51,8989.51)

"BLD",10111,"KRN","B",8989.52,8989.52)

"BLD",10111,"KRN","B",8994,8994)

"BLD",10111,"QUES",0)
^9.62^^
"BLD",10111,"REQB",0)
^9.611^1^1
"BLD",10111,"REQB",1,0)
ROR*1.5*28^1
"BLD",10111,"REQB","B","ROR*1.5*28",1)

"DATA",799.31,292,0)
DATE_RANGE_5
"DATA",799.31,293,0)
DATE_RANGE_6
"DATA",799.31,294,0)
DATE_RANGE_7
"DATA",799.31,295,0)
VAC_NAME
"DATA",799.31,296,0)
VAC_DATE
"DATA",799.31,297,0)
VACCINES
"DATA",799.31,299,0)
VAC
"DATA",799.31,300,0)
HEPAIMM
"DATA",799.31,301,0)
HEPAVAC
"DATA",799.31,302,0)
NOHEPAIMM
"DATA",799.31,303,0)
NOHEPAVAC
"DATA",799.31,304,0)
HEPBIMM
"DATA",799.31,305,0)
HEPBVAC
"DATA",799.31,306,0)
NOHEPBIMM
"DATA",799.31,307,0)
NOHEPBVAC
"DATA",799.31,308,0)
VACCINE
"DATA",799.34,24,0)
Hepatitis A Vaccine or Immunity^1^1^24^^^^^1
"DATA",799.34,24,1)
14,22,23,25,24,67,15,16,12,34,50,140,180,190,70,100
"DATA",799.34,24,10.01)
$$HEPARPT^RORX024
"DATA",799.34,24,11,0)
^799.3411^2^2^3160726^
"DATA",799.34,24,11,1,0)
  <DATE_RANGE_3 TYPE="YEAR"/>
"DATA",799.34,24,11,2,0)
  <PATIENTS CAREONLY="1" DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,24,12,0)
^^1^1^3160603^
"DATA",799.34,24,12,1,0)
  <SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,25,0)
Hepatitis B Vaccine or Immunity^1^^25^^^^^1
"DATA",799.34,25,1)
14,22,23,25,24,68,15,16,12,34,50,140,180,190,70,100
"DATA",799.34,25,10.01)
$$HEPBRPT^RORX025
"DATA",799.34,25,11,0)
^799.3411^2^2^3160726^
"DATA",799.34,25,11,1,0)
  <DATE_RANGE_3 TYPE="YEAR"/>
"DATA",799.34,25,11,2,0)
  <PATIENTS CAREONLY="1" DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,25,12,0)
^^1^1^3160603^
"DATA",799.34,25,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^n^f^^n^^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)
N Z S Z=$P(^(0),U) I Z["RANGE_5"!(Z["RANGE_6")!(Z["RANGE_7")!($E(Z,1,3)="VAC")!($E(Z,1,3)="HEP")!($E(Z,1,5)="NOHEP")
"FIA",799.31,0,"RLRO")

"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FIA",799.34)
ROR REPORT PARAMETERS
"FIA",799.34,0)
^ROR(799.34,
"FIA",799.34,0,0)
799.34I
"FIA",799.34,0,1)
n^y^f^^y^^y^o^n
"FIA",799.34,0,10)

"FIA",799.34,0,11)
I $P($G(^(0)),U)["Hepatitis A"!($P($G(^(0)),U)["Hepatitis B")
"FIA",799.34,0,"RLRO")

"FIA",799.34,0,"VR")
1.5^ROR
"FIA",799.34,799.34)
0
"FIA",799.34,799.3411)
0
"FIA",799.34,799.3412)
0
"INI")
PRE^RORP029
"INIT")
POST^RORP029
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"IX",799.34,799.34,"KEY",0)
799.34^KEY^Uniqueness Index for Key 'A' of File #799.34^R^^F^IR^I^799.34^^^^^LS
"IX",799.34,799.34,"KEY",1)
S ^ROR(799.34,"KEY",X,DA)=""
"IX",799.34,799.34,"KEY",2)
K ^ROR(799.34,"KEY",X,DA)
"IX",799.34,799.34,"KEY",2.5)
K ^ROR(799.34,"KEY")
"IX",799.34,799.34,"KEY",11.1,0)
^.114IA^1^1
"IX",799.34,799.34,"KEY",11.1,1,0)
1^F^799.34^.04^^1
"KEY",799.31,799.31,"A",0)
799.31^A^S^222
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEY",799.34,799.34,"A",0)
799.34^A^P^372
"KEY",799.34,799.34,"A",2,0)
^.312IA^1^1
"KEY",799.34,799.34,"A",2,1,0)
.04^799.34^1
"KEYPTR",799.31,799.31,"A")
799.31^B
"KEYPTR",799.34,799.34,"A")
799.34^KEY
"KRN",.84,7980000.018,-1)
0^5
"KRN",.84,7980000.018,0)
7980000.018^2^^CLINICAL CASE REGISTRIES^Report options
"KRN",.84,7980000.018,2,0)
^^109^109^3160603^
"KRN",.84,7980000.018,2,1,0)
AGGR_GENERIC
"KRN",.84,7980000.018,2,2,0)
        Aggregate by Generic Names
"KRN",.84,7980000.018,2,3,0)
 
"KRN",.84,7980000.018,2,4,0)
AGGR_FORMUL,AGGR_FORCED
"KRN",.84,7980000.018,2,5,0)
        Aggregate by Individual Formulations
"KRN",.84,7980000.018,2,6,0)
 
"KRN",.84,7980000.018,2,7,0)
        Aggregate by Individual Formulations (enforced because of investigational medications)
"KRN",.84,7980000.018,2,8,0)
 
"KRN",.84,7980000.018,2,9,0)
BASIC,COMPLEX
"KRN",.84,7980000.018,2,10,0)
        Basic Care
"KRN",.84,7980000.018,2,11,0)
        Complex Care
"KRN",.84,7980000.018,2,12,0)
        Both Basic and Complex Care
"KRN",.84,7980000.018,2,13,0)
 
"KRN",.84,7980000.018,2,14,0)
CAREONLY
"KRN",.84,7980000.018,2,15,0)
        Treated only
"KRN",.84,7980000.018,2,16,0)
 
"KRN",.84,7980000.018,2,17,0)
COMPLETE
"KRN",.84,7980000.018,2,18,0)
        Complete Report
"KRN",.84,7980000.018,2,19,0)
 
"KRN",.84,7980000.018,2,20,0)
CONFIRMED,PENDING,CONFIRM_AFTER
"KRN",.84,7980000.018,2,21,0)
        Confirmed
"KRN",.84,7980000.018,2,22,0)
        Pending
"KRN",.84,7980000.018,2,23,0)
        Both Confirmed and Pending
"KRN",.84,7980000.018,2,24,0)
        Only confirmed after
"KRN",.84,7980000.018,2,25,0)
 
"KRN",.84,7980000.018,2,26,0)
NAIVE,EXP
"KRN",.84,7980000.018,2,27,0)
        Naive
"KRN",.84,7980000.018,2,28,0)
        Experienced
"KRN",.84,7980000.018,2,29,0)
        Both Naive and Experienced
"KRN",.84,7980000.018,2,30,0)
 
"KRN",.84,7980000.018,2,31,0)
DE_BEFORE,DE_DURING,DE_AFTER
"KRN",.84,7980000.018,2,32,0)
        Added before the date range
"KRN",.84,7980000.018,2,33,0)
        Added during the date range
"KRN",.84,7980000.018,2,34,0)
        Added before and during the date range
"KRN",.84,7980000.018,2,35,0)
        Added after the date range
"KRN",.84,7980000.018,2,36,0)
        Added before and after the date range 
"KRN",.84,7980000.018,2,37,0)
        Added during and after the date range
"KRN",.84,7980000.018,2,38,0)
        Added on any date
"KRN",.84,7980000.018,2,39,0)
 
"KRN",.84,7980000.018,2,40,0)
GENERIC,FORMULATIONS
"KRN",.84,7980000.018,2,41,0)
        Generic Medications
"KRN",.84,7980000.018,2,42,0)
        Individual Formulations
"KRN",.84,7980000.018,2,43,0)
        Generic Medications and Individual Formulations
"KRN",.84,7980000.018,2,44,0)
 
"KRN",.84,7980000.018,2,45,0)
HEPAVAC
"KRN",.84,7980000.018,2,46,0)
                                Hepatitis A vaccination
"KRN",.84,7980000.018,2,47,0)
 
"KRN",.84,7980000.018,2,48,0)
HEPBVAC
"KRN",.84,7980000.018,2,49,0)
                                Hepatitis B vaccination
"KRN",.84,7980000.018,2,50,0)
 
"KRN",.84,7980000.018,2,51,0)
NOHEPAVAC
"KRN",.84,7980000.018,2,52,0)
                                No Hepatitis A vaccination
"KRN",.84,7980000.018,2,53,0)
 
"KRN",.84,7980000.018,2,54,0)
NOHEPBVAC
"KRN",.84,7980000.018,2,55,0)
                                No Hepatitis B vaccination
"KRN",.84,7980000.018,2,56,0)
 
"KRN",.84,7980000.018,2,57,0)
HEPAIMM
"KRN",.84,7980000.018,2,58,0)
                                Hepatitis A immunity
"KRN",.84,7980000.018,2,59,0)
 
"KRN",.84,7980000.018,2,60,0)
HEPBIMM
"KRN",.84,7980000.018,2,61,0)
                                Hepatitis B immunity
"KRN",.84,7980000.018,2,62,0)
 
"KRN",.84,7980000.018,2,63,0)
NOHEPAIMM
"KRN",.84,7980000.018,2,64,0)
                                No Hepatitis A immunity
"KRN",.84,7980000.018,2,65,0)
 
"KRN",.84,7980000.018,2,66,0)
NOHEPBIMM
"KRN",.84,7980000.018,2,67,0)
                                No Hepatitis B immunity
"KRN",.84,7980000.018,2,68,0)
 
"KRN",.84,7980000.018,2,69,0)
INPATIENT,OUTPATIENT
"KRN",.84,7980000.018,2,70,0)
        Inpatient
"KRN",.84,7980000.018,2,71,0)
        Outpatient
"KRN",.84,7980000.018,2,72,0)
        Both Inpatients and Outpatients
"KRN",.84,7980000.018,2,73,0)
 
"KRN",.84,7980000.018,2,74,0)
LAB
"KRN",.84,7980000.018,2,75,0)
        Selected lab tests were performed
"KRN",.84,7980000.018,2,76,0)
 
"KRN",.84,7980000.018,2,77,0)
NOLAB
"KRN",.84,7980000.018,2,78,0)
        No selected lab tests were performed
"KRN",.84,7980000.018,2,79,0)
 
"KRN",.84,7980000.018,2,80,0)
NOPHARM
"KRN",.84,7980000.018,2,81,0)
        Did not receive selected medication(s)
"KRN",.84,7980000.018,2,82,0)
 
"KRN",.84,7980000.018,2,83,0)
NOTSEEN,SEEN
"KRN",.84,7980000.018,2,84,0)
        Not Seen
"KRN",.84,7980000.018,2,85,0)
        Seen
"KRN",.84,7980000.018,2,86,0)
        Both Seen and Not Seen
"KRN",.84,7980000.018,2,87,0)
 
"KRN",.84,7980000.018,2,88,0)
PHARM
"KRN",.84,7980000.018,2,89,0)
        Received selected medication(s)
"KRN",.84,7980000.018,2,90,0)
 
"KRN",.84,7980000.018,2,91,0)
PROC
"KRN",.84,7980000.018,2,92,0)
        Selected procedures were performed
"KRN",.84,7980000.018,2,93,0)
 
"KRN",.84,7980000.018,2,94,0)
NOPROC
"KRN",.84,7980000.018,2,95,0)
        No selected procedures were performed
"KRN",.84,7980000.018,2,96,0)
 
"KRN",.84,7980000.018,2,97,0)
PTLIST
"KRN",.84,7980000.018,2,98,0)
        List of Patients
"KRN",.84,7980000.018,2,99,0)
 
"KRN",.84,7980000.018,2,100,0)
REGMEDS,INVESTIG
"KRN",.84,7980000.018,2,101,0)
        Registry Medications
"KRN",.84,7980000.018,2,102,0)
        Investigational Medications
"KRN",.84,7980000.018,2,103,0)
        Registry and Investigational Medications
"KRN",.84,7980000.018,2,104,0)
 
"KRN",.84,7980000.018,2,105,0)
REGMEDSMRY
"KRN",.84,7980000.018,2,106,0)
        Summary Registry Meds Usage Table
"KRN",.84,7980000.018,2,107,0)
 
"KRN",.84,7980000.018,2,108,0)
SUMMARY
"KRN",.84,7980000.018,2,109,0)
        Summary
"KRN",.84,7980000.018,5,0)
^.841^1^1
"KRN",.84,7980000.018,5,1,0)
RORXU002^OPTXT
"KRN",.84,7980000.018,5,"B","RORXU002",1)

"KRN",.84,7981024.001,-1)
0^3
"KRN",.84,7981024.001,0)
7981024.001^2^^CLINICAL CASE REGISTRIES^Hepatitis A Report (HTML)
"KRN",.84,7981024.001,2,0)
^^250^250^3160726^
"KRN",.84,7981024.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981024.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981024.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981024.001,2,4,0)
 
"KRN",.84,7981024.001,2,5,0)
  <xsl:import  href="template://report/998/1"/>
"KRN",.84,7981024.001,2,6,0)
  <!-- Styles   -->
"KRN",.84,7981024.001,2,7,0)
  <xsl:import  href="template://report/999/1"/>
"KRN",.84,7981024.001,2,8,0)
  <!-- Common   -->
"KRN",.84,7981024.001,2,9,0)
  <xsl:include href="template://report/997/1"/>
"KRN",.84,7981024.001,2,10,0)
  <!-- Patients -->
"KRN",.84,7981024.001,2,11,0)
 
"KRN",.84,7981024.001,2,12,0)
  <!-- Determine if vaccine parameters have been chosen for the report -->
"KRN",.84,7981024.001,2,13,0)
  <xsl:variable name="D1" 
"KRN",.84,7981024.001,2,14,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981024.001,2,15,0)
    <xsl:variable name="D2" 
"KRN",.84,7981024.001,2,16,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981024.001,2,17,0)
<xsl:variable name="D3" select="REPORT/PARAMETERS/DATE_RANGE_7"/>
"KRN",.84,7981024.001,2,18,0)
 
"KRN",.84,7981024.001,2,19,0)
  <!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981024.001,2,20,0)
  <xsl:variable name="icnyes"
"KRN",.84,7981024.001,2,21,0)
        select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981024.001,2,22,0)
 
"KRN",.84,7981024.001,2,23,0)
  <xsl:template match="/">
"KRN",.84,7981024.001,2,24,0)
    <html>
"KRN",.84,7981024.001,2,25,0)
      <head>
"KRN",.84,7981024.001,2,26,0)
        <title>Hepatitis A Report</title>
"KRN",.84,7981024.001,2,27,0)
        <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981024.001,2,28,0)
      </head>
"KRN",.84,7981024.001,2,29,0)
      <body>
"KRN",.84,7981024.001,2,30,0)
        <h1>Hepatitis A Report</h1>
"KRN",.84,7981024.001,2,31,0)
        <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981024.001,2,32,0)
        <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981024.001,2,33,0)
 
"KRN",.84,7981024.001,2,34,0)
          <xsl:if test="$D3">
"KRN",.84,7981024.001,2,35,0)
            Lab tests used to calculate scores are identified by LOINC 
"KRN",.84,7981024.001,2,36,0)
code.
"KRN",.84,7981024.001,2,37,0)
            If the values shown for test results appear unusual,
"KRN",.84,7981024.001,2,38,0)
            contact your local Lab ADPAC to verify that LOINC codes are 
"KRN",.84,7981024.001,2,39,0)
set up
"KRN",.84,7981024.001,2,40,0)
            correctly. The LOINC codes that are used are:
"KRN",.84,7981024.001,2,41,0)
            <br/>
"KRN",.84,7981024.001,2,42,0)
            <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981024.001,2,43,0)
          </xsl:if>
"KRN",.84,7981024.001,2,44,0)
        </div>
"KRN",.84,7981024.001,2,45,0)
        <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981024.001,2,46,0)
          <br />
"KRN",.84,7981024.001,2,47,0)
          <!-- The following line changed to fix page break issue in IE 7 
"KRN",.84,7981024.001,2,48,0)
-->
"KRN",.84,7981024.001,2,49,0)
          <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981024.001,2,50,0)
 border:0">
"KRN",.84,7981024.001,2,51,0)
            <span style="visibility: hidden">-</span>
"KRN",.84,7981024.001,2,52,0)
          </div>
"KRN",.84,7981024.001,2,53,0)
          <div>
"KRN",.84,7981024.001,2,54,0)
            <xsl:call-template name="MakeScrollable">
"KRN",.84,7981024.001,2,55,0)
              <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981024.001,2,56,0)
            </xsl:call-template>
"KRN",.84,7981024.001,2,57,0)
            <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981024.001,2,58,0)
          </div>
"KRN",.84,7981024.001,2,59,0)
        </xsl:if>
"KRN",.84,7981024.001,2,60,0)
      </body>
"KRN",.84,7981024.001,2,61,0)
    </html>
"KRN",.84,7981024.001,2,62,0)
  </xsl:template>
"KRN",.84,7981024.001,2,63,0)
 
"KRN",.84,7981024.001,2,64,0)
  <xsl:template name="ShowLOINCCodes">
"KRN",.84,7981024.001,2,65,0)
    <table cellpadding="5" cellspacing="0">
"KRN",.84,7981024.001,2,66,0)
      <thead>
"KRN",.84,7981024.001,2,67,0)
        <tr>
"KRN",.84,7981024.001,2,68,0)
          <th>LOINC Codes</th>
"KRN",.84,7981024.001,2,69,0)
        </tr>
"KRN",.84,7981024.001,2,70,0)
      </thead>
"KRN",.84,7981024.001,2,71,0)
      <tbody>
"KRN",.84,7981024.001,2,72,0)
        <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981024.001,2,73,0)
          <tr>
"KRN",.84,7981024.001,2,74,0)
            <td class="aLeft">
"KRN",.84,7981024.001,2,75,0)
              <xsl:value-of select="@CODE"/>
"KRN",.84,7981024.001,2,76,0)
            </td>
"KRN",.84,7981024.001,2,77,0)
          </tr>
"KRN",.84,7981024.001,2,78,0)
        </xsl:for-each>
"KRN",.84,7981024.001,2,79,0)
      </tbody>
"KRN",.84,7981024.001,2,80,0)
    </table>
"KRN",.84,7981024.001,2,81,0)
  </xsl:template>
"KRN",.84,7981024.001,2,82,0)
 
"KRN",.84,7981024.001,2,83,0)
  <!--[ TABLE HEADERS ]-->
"KRN",.84,7981024.001,2,84,0)
 
"KRN",.84,7981024.001,2,85,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_6">
"KRN",.84,7981024.001,2,86,0)
   <xsl:if test="$D2">
"KRN",.84,7981024.001,2,87,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981024.001,2,88,0)
      <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981024.001,2,89,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,90,0)
    </xsl:if>
"KRN",.84,7981024.001,2,91,0)
  </xsl:template>
"KRN",.84,7981024.001,2,92,0)
 
"KRN",.84,7981024.001,2,93,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_7">
"KRN",.84,7981024.001,2,94,0)
<xsl:if test="$D1">
"KRN",.84,7981024.001,2,95,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981024.001,2,96,0)
      <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981024.001,2,97,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,98,0)
</xsl:if>
"KRN",.84,7981024.001,2,99,0)
  </xsl:template>
"KRN",.84,7981024.001,2,100,0)
 
"KRN",.84,7981024.001,2,101,0)
  <xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981024.001,2,102,0)
    <xsl:variable name="PTCOLS" select="../COLUMN[@NAME='PATIENTS']"/>
"KRN",.84,7981024.001,2,103,0)
    <xsl:variable name="VACLST" select="../COLUMN[@NAME='VACCINES']"/>
"KRN",.84,7981024.001,2,104,0)
    <xsl:variable name="IMMLST" select="../COLUMN[@NAME='LABTESTS']"/>
"KRN",.84,7981024.001,2,105,0)
    <xsl:variable name="ICNCOL" select="../COLUMN[@NAME='ICN']"/>
"KRN",.84,7981024.001,2,106,0)
 
"KRN",.84,7981024.001,2,107,0)
    <thead>
"KRN",.84,7981024.001,2,108,0)
      <tr>
"KRN",.84,7981024.001,2,109,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,110,0)
          <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981024.001,2,111,0)
          <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981024.001,2,112,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,113,0)
          <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981024.001,2,114,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,115,0)
 
"KRN",.84,7981024.001,2,116,0)
        <xsl:if test="$D2">
"KRN",.84,7981024.001,2,117,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,118,0)
            <xsl:with-param name="column" select="$VACLST"/>
"KRN",.84,7981024.001,2,119,0)
            <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981024.001,2,120,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,121,0)
            <xsl:with-param name="colspan" select="2"/>
"KRN",.84,7981024.001,2,122,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,123,0)
        </xsl:if>
"KRN",.84,7981024.001,2,124,0)
 
"KRN",.84,7981024.001,2,125,0)
        <xsl:if test="$D1">
"KRN",.84,7981024.001,2,126,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,127,0)
            <xsl:with-param name="column" select="$IMMLST"/>
"KRN",.84,7981024.001,2,128,0)
            <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981024.001,2,129,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,130,0)
            <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981024.001,2,131,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,132,0)
        </xsl:if>
"KRN",.84,7981024.001,2,133,0)
 
"KRN",.84,7981024.001,2,134,0)
        <xsl:if test="$icnyes!=''">
"KRN",.84,7981024.001,2,135,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,136,0)
            <xsl:with-param name="column" select="$ICNCOL"/>
"KRN",.84,7981024.001,2,137,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981024.001,2,138,0)
            <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,139,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,140,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,141,0)
        </xsl:if>
"KRN",.84,7981024.001,2,142,0)
      </tr>
"KRN",.84,7981024.001,2,143,0)
 
"KRN",.84,7981024.001,2,144,0)
      <tr>
"KRN",.84,7981024.001,2,145,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981024.001,2,146,0)
          <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981024.001,2,147,0)
          <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981024.001,2,148,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,149,0)
 
"KRN",.84,7981024.001,2,150,0)
        <xsl:if test="$D2">
"KRN",.84,7981024.001,2,151,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,152,0)
            <xsl:with-param name="column" select="VAC_NAME"/>
"KRN",.84,7981024.001,2,153,0)
            <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981024.001,2,154,0)
            <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981024.001,2,155,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,156,0)
         </xsl:call-template>
"KRN",.84,7981024.001,2,157,0)
 
"KRN",.84,7981024.001,2,158,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,159,0)
            <xsl:with-param name="column" select="VAC_DATE"/>
"KRN",.84,7981024.001,2,160,0)
            <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981024.001,2,161,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,162,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,163,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,164,0)
        </xsl:if>
"KRN",.84,7981024.001,2,165,0)
 
"KRN",.84,7981024.001,2,166,0)
        <xsl:if test="$D1">
"KRN",.84,7981024.001,2,167,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,168,0)
            <xsl:with-param name="column" select="LTNAME"/>
"KRN",.84,7981024.001,2,169,0)
            <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981024.001,2,170,0)
            <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981024.001,2,171,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,172,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,173,0)
 
"KRN",.84,7981024.001,2,174,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,175,0)
            <xsl:with-param name="column" select="DATE"/>
"KRN",.84,7981024.001,2,176,0)
            <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981024.001,2,177,0)
            <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,178,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,179,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,180,0)
 
"KRN",.84,7981024.001,2,181,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,182,0)
            <xsl:with-param name="column" select="RESULT"/>
"KRN",.84,7981024.001,2,183,0)
            <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981024.001,2,184,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,185,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,186,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,187,0)
        </xsl:if>
"KRN",.84,7981024.001,2,188,0)
 
"KRN",.84,7981024.001,2,189,0)
        <xsl:if test="$icnyes!=''">
"KRN",.84,7981024.001,2,190,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,191,0)
            <xsl:with-param name="column" select="ICN"/>
"KRN",.84,7981024.001,2,192,0)
            <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981024.001,2,193,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,194,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,195,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,196,0)
        </xsl:if>
"KRN",.84,7981024.001,2,197,0)
      </tr>
"KRN",.84,7981024.001,2,198,0)
    </thead>
"KRN",.84,7981024.001,2,199,0)
 
"KRN",.84,7981024.001,2,200,0)
  </xsl:template>
"KRN",.84,7981024.001,2,201,0)
 
"KRN",.84,7981024.001,2,202,0)
  <!--[ TABLE CELLS ]-->
"KRN",.84,7981024.001,2,203,0)
 
"KRN",.84,7981024.001,2,204,0)
  <xsl:template match="PATIENT/VACCINES">
"KRN",.84,7981024.001,2,205,0)
    <td>
"KRN",.84,7981024.001,2,206,0)
      <xsl:for-each select="VACCINE">
"KRN",.84,7981024.001,2,207,0)
        <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,208,0)
          <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981024.001,2,209,0)
          <xsl:with-param name="width" select="'9%'"/>
"KRN",.84,7981024.001,2,210,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,211,0)
        <br />
"KRN",.84,7981024.001,2,212,0)
      </xsl:for-each>
"KRN",.84,7981024.001,2,213,0)
    </td>
"KRN",.84,7981024.001,2,214,0)
 
"KRN",.84,7981024.001,2,215,0)
    <td>
"KRN",.84,7981024.001,2,216,0)
      <xsl:for-each select="VACCINE">
"KRN",.84,7981024.001,2,217,0)
        <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,218,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.001,2,219,0)
          <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981024.001,2,220,0)
          <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981024.001,2,221,0)
 
"KRN",.84,7981024.001,2,222,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,223,0)
        <br />
"KRN",.84,7981024.001,2,224,0)
      </xsl:for-each>
"KRN",.84,7981024.001,2,225,0)
    </td>
"KRN",.84,7981024.001,2,226,0)
  </xsl:template>
"KRN",.84,7981024.001,2,227,0)
  <xsl:template match="PATIENT/LABTESTS">
"KRN",.84,7981024.001,2,228,0)
    <td>
"KRN",.84,7981024.001,2,229,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,230,0)
        <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981024.001,2,231,0)
        <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,232,0)
      </xsl:call-template>
"KRN",.84,7981024.001,2,233,0)
    </td>
"KRN",.84,7981024.001,2,234,0)
    <td>
"KRN",.84,7981024.001,2,235,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,236,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.001,2,237,0)
        <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981024.001,2,238,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981024.001,2,239,0)
      </xsl:call-template>
"KRN",.84,7981024.001,2,240,0)
    </td>
"KRN",.84,7981024.001,2,241,0)
    <td>
"KRN",.84,7981024.001,2,242,0)
 
"KRN",.84,7981024.001,2,243,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,244,0)
        <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981024.001,2,245,0)
        <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,246,0)
      </xsl:call-template>
"KRN",.84,7981024.001,2,247,0)
    </td>
"KRN",.84,7981024.001,2,248,0)
  </xsl:template>
"KRN",.84,7981024.001,2,249,0)
 
"KRN",.84,7981024.001,2,250,0)
</xsl:stylesheet>
"KRN",.84,7981024.001,3,0)
^.845
"KRN",.84,7981024.001,5,0)
^.841
"KRN",.84,7981024.002,-1)
0^7
"KRN",.84,7981024.002,0)
7981024.002^2^^CLINICAL CASE REGISTRIES^Hepatitis A Report (CSV)
"KRN",.84,7981024.002,2,0)
^^184^184^3160714^
"KRN",.84,7981024.002,2,1,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981024.002,2,2,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981024.002,2,3,0)
 
"KRN",.84,7981024.002,2,4,0)
  <xsl:import href="template://report/999/2"/>
"KRN",.84,7981024.002,2,5,0)
  <!-- Common   -->
"KRN",.84,7981024.002,2,6,0)
 
"KRN",.84,7981024.002,2,7,0)
  <xsl:variable name="D1" 
"KRN",.84,7981024.002,2,8,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981024.002,2,9,0)
  <xsl:variable name="D2" 
"KRN",.84,7981024.002,2,10,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981024.002,2,11,0)
  <xsl:variable name="ICN_YES" select="//PATIENT[1]/ICN"/>
"KRN",.84,7981024.002,2,12,0)
 
"KRN",.84,7981024.002,2,13,0)
 
"KRN",.84,7981024.002,2,14,0)
 
"KRN",.84,7981024.002,2,15,0)
  <xsl:template match="/">
"KRN",.84,7981024.002,2,16,0)
    <xsl:text>Hepatitis A report</xsl:text>
"KRN",.84,7981024.002,2,17,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981024.002,2,18,0)
  </xsl:template>
"KRN",.84,7981024.002,2,19,0)
 
"KRN",.84,7981024.002,2,20,0)
 
"KRN",.84,7981024.002,2,21,0)
 
"KRN",.84,7981024.002,2,22,0)
  <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981024.002,2,23,0)
    <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981024.002,2,24,0)
    <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981024.002,2,25,0)
    <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981024.002,2,26,0)
    <xsl:variable name="icn" select="ICN"/>
"KRN",.84,7981024.002,2,27,0)
    <xsl:variable name="ltname" select="LABTESTS/LTNAME"/>
"KRN",.84,7981024.002,2,28,0)
    <xsl:variable name="ltdate" select="LABTESTS/DATE"/>
"KRN",.84,7981024.002,2,29,0)
    <xsl:variable name="ltresult" select="LABTESTS/RESULT"/>
"KRN",.84,7981024.002,2,30,0)
 
"KRN",.84,7981024.002,2,31,0)
 
"KRN",.84,7981024.002,2,32,0)
    <xsl:choose>
"KRN",.84,7981024.002,2,33,0)
      <xsl:when test="($D2 and $D1) or $D2">
"KRN",.84,7981024.002,2,34,0)
 
"KRN",.84,7981024.002,2,35,0)
        <xsl:for-each select="VACCINES/VACCINE">
"KRN",.84,7981024.002,2,36,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,37,0)
            <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,38,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,39,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,40,0)
            <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,41,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,42,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,43,0)
            <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,44,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,45,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,46,0)
 
"KRN",.84,7981024.002,2,47,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,48,0)
            <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981024.002,2,49,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,50,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,51,0)
            <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981024.002,2,52,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,53,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,54,0)
 
"KRN",.84,7981024.002,2,55,0)
          <xsl:if test="$D1">
"KRN",.84,7981024.002,2,56,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,57,0)
              <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981024.002,2,58,0)
            </xsl:call-template>
"KRN",.84,7981024.002,2,59,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,60,0)
              <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981024.002,2,61,0)
              <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,62,0)
            </xsl:call-template>
"KRN",.84,7981024.002,2,63,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,64,0)
              <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981024.002,2,65,0)
            </xsl:call-template>
"KRN",.84,7981024.002,2,66,0)
          </xsl:if>
"KRN",.84,7981024.002,2,67,0)
 
"KRN",.84,7981024.002,2,68,0)
          <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,69,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,70,0)
              <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,71,0)
            </xsl:call-template>
"KRN",.84,7981024.002,2,72,0)
          </xsl:if>
"KRN",.84,7981024.002,2,73,0)
 
"KRN",.84,7981024.002,2,74,0)
          <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,75,0)
        </xsl:for-each>
"KRN",.84,7981024.002,2,76,0)
 
"KRN",.84,7981024.002,2,77,0)
      </xsl:when>
"KRN",.84,7981024.002,2,78,0)
 
"KRN",.84,7981024.002,2,79,0)
      <xsl:when test="$D1">
"KRN",.84,7981024.002,2,80,0)
 
"KRN",.84,7981024.002,2,81,0)
        <xsl:for-each select="LABTESTS">
"KRN",.84,7981024.002,2,82,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,83,0)
            <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,84,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,85,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,86,0)
            <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,87,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,88,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,89,0)
            <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,90,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,91,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,92,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,93,0)
            <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981024.002,2,94,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,95,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,96,0)
            <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981024.002,2,97,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,98,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,99,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,100,0)
            <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981024.002,2,101,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,102,0)
          <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,103,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,104,0)
              <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,105,0)
            </xsl:call-template>
"KRN",.84,7981024.002,2,106,0)
          </xsl:if>
"KRN",.84,7981024.002,2,107,0)
          <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,108,0)
        </xsl:for-each>
"KRN",.84,7981024.002,2,109,0)
      </xsl:when>
"KRN",.84,7981024.002,2,110,0)
      
"KRN",.84,7981024.002,2,111,0)
      <xsl:otherwise>
"KRN",.84,7981024.002,2,112,0)
 
"KRN",.84,7981024.002,2,113,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,114,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,115,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,116,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,117,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,118,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,119,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,120,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,121,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,122,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,123,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,124,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,125,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,126,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,127,0)
        </xsl:if>
"KRN",.84,7981024.002,2,128,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,129,0)
 
"KRN",.84,7981024.002,2,130,0)
      </xsl:otherwise>
"KRN",.84,7981024.002,2,131,0)
    </xsl:choose>
"KRN",.84,7981024.002,2,132,0)
 
"KRN",.84,7981024.002,2,133,0)
  </xsl:template>
"KRN",.84,7981024.002,2,134,0)
 
"KRN",.84,7981024.002,2,135,0)
  <xsl:template match="COLUMN[@NAME='VAC_NAME']">
"KRN",.84,7981024.002,2,136,0)
    <xsl:if test="$D2">
"KRN",.84,7981024.002,2,137,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,138,0)
        <xsl:with-param name="title" select="'Vaccine Name'"/>
"KRN",.84,7981024.002,2,139,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,140,0)
    </xsl:if>
"KRN",.84,7981024.002,2,141,0)
  </xsl:template>
"KRN",.84,7981024.002,2,142,0)
 
"KRN",.84,7981024.002,2,143,0)
  <xsl:template match="COLUMN[@NAME='VAC_DATE']">
"KRN",.84,7981024.002,2,144,0)
    <xsl:if test="$D2">
"KRN",.84,7981024.002,2,145,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,146,0)
        <xsl:with-param name="title" select="'Vaccine Date'"/>
"KRN",.84,7981024.002,2,147,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,148,0)
    </xsl:if>
"KRN",.84,7981024.002,2,149,0)
  </xsl:template>
"KRN",.84,7981024.002,2,150,0)
 
"KRN",.84,7981024.002,2,151,0)
  <xsl:template match="COLUMN[@NAME='LTNAME']">
"KRN",.84,7981024.002,2,152,0)
    <xsl:if test="$D1">
"KRN",.84,7981024.002,2,153,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,154,0)
        <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981024.002,2,155,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,156,0)
    </xsl:if>
"KRN",.84,7981024.002,2,157,0)
  </xsl:template>
"KRN",.84,7981024.002,2,158,0)
 
"KRN",.84,7981024.002,2,159,0)
  <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981024.002,2,160,0)
    <xsl:if test="$D1">
"KRN",.84,7981024.002,2,161,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,162,0)
        <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981024.002,2,163,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,164,0)
    </xsl:if>
"KRN",.84,7981024.002,2,165,0)
  </xsl:template>
"KRN",.84,7981024.002,2,166,0)
 
"KRN",.84,7981024.002,2,167,0)
  <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981024.002,2,168,0)
    <xsl:if test="$D1">
"KRN",.84,7981024.002,2,169,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,170,0)
        <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981024.002,2,171,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,172,0)
    </xsl:if>
"KRN",.84,7981024.002,2,173,0)
  </xsl:template>
"KRN",.84,7981024.002,2,174,0)
 
"KRN",.84,7981024.002,2,175,0)
  <xsl:template match="COLUMN[@NAME='ICN']">
"KRN",.84,7981024.002,2,176,0)
    <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,177,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,178,0)
        <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981024.002,2,179,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,180,0)
    </xsl:if>
"KRN",.84,7981024.002,2,181,0)
  </xsl:template>
"KRN",.84,7981024.002,2,182,0)
 
"KRN",.84,7981024.002,2,183,0)
 
"KRN",.84,7981024.002,2,184,0)
</xsl:stylesheet>
"KRN",.84,7981025.001,-1)
0^6
"KRN",.84,7981025.001,0)
7981025.001^2^^CLINICAL CASE REGISTRIES^Hepatitis B Report (HTML)
"KRN",.84,7981025.001,2,0)
^.844^249^249^3160726^
"KRN",.84,7981025.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981025.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981025.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981025.001,2,4,0)
 
"KRN",.84,7981025.001,2,5,0)
  <xsl:import  href="template://report/998/1"/>
"KRN",.84,7981025.001,2,6,0)
  <!-- Styles   -->
"KRN",.84,7981025.001,2,7,0)
  <xsl:import  href="template://report/999/1"/>
"KRN",.84,7981025.001,2,8,0)
  <!-- Common   -->
"KRN",.84,7981025.001,2,9,0)
  <xsl:include href="template://report/997/1"/>
"KRN",.84,7981025.001,2,10,0)
  <!-- Patients -->
"KRN",.84,7981025.001,2,11,0)
 
"KRN",.84,7981025.001,2,12,0)
  <!-- Determine if vaccine parameters have been chosen for the report -->
"KRN",.84,7981025.001,2,13,0)
<xsl:variable name="D1" 
"KRN",.84,7981025.001,2,14,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981025.001,2,15,0)
    <xsl:variable name="D2" 
"KRN",.84,7981025.001,2,16,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981025.001,2,17,0)
<xsl:variable name="D3" select="REPORT/PARAMETERS/DATE_RANGE_7"/>
"KRN",.84,7981025.001,2,18,0)
 
"KRN",.84,7981025.001,2,19,0)
  <!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981025.001,2,20,0)
  <xsl:variable name="icnyes"
"KRN",.84,7981025.001,2,21,0)
        select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981025.001,2,22,0)
 
"KRN",.84,7981025.001,2,23,0)
  <xsl:template match="/">
"KRN",.84,7981025.001,2,24,0)
    <html>
"KRN",.84,7981025.001,2,25,0)
      <head>
"KRN",.84,7981025.001,2,26,0)
        <title>Hepatitis B Report</title>
"KRN",.84,7981025.001,2,27,0)
        <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981025.001,2,28,0)
      </head>
"KRN",.84,7981025.001,2,29,0)
      <body>
"KRN",.84,7981025.001,2,30,0)
        <h1>Hepatitis B Report</h1>
"KRN",.84,7981025.001,2,31,0)
        <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981025.001,2,32,0)
        <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981025.001,2,33,0)
 
"KRN",.84,7981025.001,2,34,0)
          <xsl:if test="$D3">
"KRN",.84,7981025.001,2,35,0)
            Lab tests used to calculate scores are identified by LOINC 
"KRN",.84,7981025.001,2,36,0)
code.
"KRN",.84,7981025.001,2,37,0)
            If the values shown for test results appear unusual,
"KRN",.84,7981025.001,2,38,0)
            contact your local Lab ADPAC to verify that LOINC codes are 
"KRN",.84,7981025.001,2,39,0)
set up
"KRN",.84,7981025.001,2,40,0)
            correctly. The LOINC codes that are used are:
"KRN",.84,7981025.001,2,41,0)
            <br/>
"KRN",.84,7981025.001,2,42,0)
            <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981025.001,2,43,0)
          </xsl:if>
"KRN",.84,7981025.001,2,44,0)
        </div>
"KRN",.84,7981025.001,2,45,0)
        <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981025.001,2,46,0)
          <br />
"KRN",.84,7981025.001,2,47,0)
          <!-- The following line changed to fix page break issue in IE 7 
"KRN",.84,7981025.001,2,48,0)
-->
"KRN",.84,7981025.001,2,49,0)
          <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981025.001,2,50,0)
 border:0">
"KRN",.84,7981025.001,2,51,0)
            <span style="visibility: hidden">-</span>
"KRN",.84,7981025.001,2,52,0)
          </div>
"KRN",.84,7981025.001,2,53,0)
          <div>
"KRN",.84,7981025.001,2,54,0)
            <xsl:call-template name="MakeScrollable">
"KRN",.84,7981025.001,2,55,0)
              <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981025.001,2,56,0)
            </xsl:call-template>
"KRN",.84,7981025.001,2,57,0)
            <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981025.001,2,58,0)
          </div>
"KRN",.84,7981025.001,2,59,0)
        </xsl:if>
"KRN",.84,7981025.001,2,60,0)
      </body>
"KRN",.84,7981025.001,2,61,0)
    </html>
"KRN",.84,7981025.001,2,62,0)
  </xsl:template>
"KRN",.84,7981025.001,2,63,0)
 
"KRN",.84,7981025.001,2,64,0)
  <xsl:template name="ShowLOINCCodes">
"KRN",.84,7981025.001,2,65,0)
    <table cellpadding="5" cellspacing="0">
"KRN",.84,7981025.001,2,66,0)
      <thead>
"KRN",.84,7981025.001,2,67,0)
        <tr>
"KRN",.84,7981025.001,2,68,0)
          <th>LOINC Codes</th>
"KRN",.84,7981025.001,2,69,0)
        </tr>
"KRN",.84,7981025.001,2,70,0)
      </thead>
"KRN",.84,7981025.001,2,71,0)
      <tbody>
"KRN",.84,7981025.001,2,72,0)
        <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981025.001,2,73,0)
          <tr>
"KRN",.84,7981025.001,2,74,0)
            <td class="aLeft">
"KRN",.84,7981025.001,2,75,0)
              <xsl:value-of select="@CODE"/>
"KRN",.84,7981025.001,2,76,0)
            </td>
"KRN",.84,7981025.001,2,77,0)
          </tr>
"KRN",.84,7981025.001,2,78,0)
        </xsl:for-each>
"KRN",.84,7981025.001,2,79,0)
      </tbody>
"KRN",.84,7981025.001,2,80,0)
    </table>
"KRN",.84,7981025.001,2,81,0)
  </xsl:template>
"KRN",.84,7981025.001,2,82,0)
 
"KRN",.84,7981025.001,2,83,0)
  <!--[ TABLE HEADERS ]-->
"KRN",.84,7981025.001,2,84,0)
 
"KRN",.84,7981025.001,2,85,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_6">
"KRN",.84,7981025.001,2,86,0)
   <xsl:if test="$D2">
"KRN",.84,7981025.001,2,87,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981025.001,2,88,0)
      <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981025.001,2,89,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,90,0)
   </xsl:if>
"KRN",.84,7981025.001,2,91,0)
  </xsl:template>
"KRN",.84,7981025.001,2,92,0)
 
"KRN",.84,7981025.001,2,93,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_7">
"KRN",.84,7981025.001,2,94,0)
   <xsl:if test="$D1">
"KRN",.84,7981025.001,2,95,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981025.001,2,96,0)
      <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981025.001,2,97,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,98,0)
  </xsl:if>
"KRN",.84,7981025.001,2,99,0)
  </xsl:template>
"KRN",.84,7981025.001,2,100,0)
 
"KRN",.84,7981025.001,2,101,0)
  <xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981025.001,2,102,0)
    <xsl:variable name="PTCOLS" select="../COLUMN[@NAME='PATIENTS']"/>
"KRN",.84,7981025.001,2,103,0)
    <xsl:variable name="VACLST" select="../COLUMN[@NAME='VACCINES']"/>
"KRN",.84,7981025.001,2,104,0)
    <xsl:variable name="IMMLST" select="../COLUMN[@NAME='LABTESTS']"/>
"KRN",.84,7981025.001,2,105,0)
    <xsl:variable name="ICNCOL" select="../COLUMN[@NAME='ICN']"/>
"KRN",.84,7981025.001,2,106,0)
 
"KRN",.84,7981025.001,2,107,0)
    <thead>
"KRN",.84,7981025.001,2,108,0)
      <tr>
"KRN",.84,7981025.001,2,109,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,110,0)
          <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981025.001,2,111,0)
          <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981025.001,2,112,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,113,0)
          <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981025.001,2,114,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,115,0)
 
"KRN",.84,7981025.001,2,116,0)
        <xsl:if test="$D2">
"KRN",.84,7981025.001,2,117,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,118,0)
            <xsl:with-param name="column" select="$VACLST"/>
"KRN",.84,7981025.001,2,119,0)
            <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981025.001,2,120,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,121,0)
            <xsl:with-param name="colspan" select="2"/>
"KRN",.84,7981025.001,2,122,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,123,0)
        </xsl:if>
"KRN",.84,7981025.001,2,124,0)
 
"KRN",.84,7981025.001,2,125,0)
        <xsl:if test="$D1">
"KRN",.84,7981025.001,2,126,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,127,0)
            <xsl:with-param name="column" select="$IMMLST"/>
"KRN",.84,7981025.001,2,128,0)
            <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981025.001,2,129,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,130,0)
            <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981025.001,2,131,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,132,0)
        </xsl:if>
"KRN",.84,7981025.001,2,133,0)
 
"KRN",.84,7981025.001,2,134,0)
        <xsl:if test="$icnyes!=''">
"KRN",.84,7981025.001,2,135,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,136,0)
            <xsl:with-param name="column" select="$ICNCOL"/>
"KRN",.84,7981025.001,2,137,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981025.001,2,138,0)
            <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,139,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,140,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,141,0)
        </xsl:if>
"KRN",.84,7981025.001,2,142,0)
      </tr>
"KRN",.84,7981025.001,2,143,0)
 
"KRN",.84,7981025.001,2,144,0)
      <tr>
"KRN",.84,7981025.001,2,145,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981025.001,2,146,0)
          <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981025.001,2,147,0)
          <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981025.001,2,148,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,149,0)
 
"KRN",.84,7981025.001,2,150,0)
        <xsl:if test="$D2">
"KRN",.84,7981025.001,2,151,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,152,0)
            <xsl:with-param name="column" select="VAC_NAME"/>
"KRN",.84,7981025.001,2,153,0)
            <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981025.001,2,154,0)
            <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981025.001,2,155,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,156,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,157,0)
 
"KRN",.84,7981025.001,2,158,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,159,0)
            <xsl:with-param name="column" select="VAC_DATE"/>
"KRN",.84,7981025.001,2,160,0)
            <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981025.001,2,161,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,162,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,163,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,164,0)
        </xsl:if>
"KRN",.84,7981025.001,2,165,0)
 
"KRN",.84,7981025.001,2,166,0)
        <xsl:if test="$D1">
"KRN",.84,7981025.001,2,167,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,168,0)
            <xsl:with-param name="column" select="LTNAME"/>
"KRN",.84,7981025.001,2,169,0)
            <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981025.001,2,170,0)
            <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981025.001,2,171,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,172,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,173,0)
 
"KRN",.84,7981025.001,2,174,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,175,0)
            <xsl:with-param name="column" select="DATE"/>
"KRN",.84,7981025.001,2,176,0)
            <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981025.001,2,177,0)
            <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,178,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,179,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,180,0)
 
"KRN",.84,7981025.001,2,181,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,182,0)
            <xsl:with-param name="column" select="RESULT"/>
"KRN",.84,7981025.001,2,183,0)
            <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981025.001,2,184,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,185,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,186,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,187,0)
        </xsl:if>
"KRN",.84,7981025.001,2,188,0)
 
"KRN",.84,7981025.001,2,189,0)
        <xsl:if test="$icnyes!=''">
"KRN",.84,7981025.001,2,190,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,191,0)
            <xsl:with-param name="column" select="ICN"/>
"KRN",.84,7981025.001,2,192,0)
            <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981025.001,2,193,0)
            <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,194,0)
            <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,195,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,196,0)
        </xsl:if>
"KRN",.84,7981025.001,2,197,0)
      </tr>
"KRN",.84,7981025.001,2,198,0)
    </thead>
"KRN",.84,7981025.001,2,199,0)
 
"KRN",.84,7981025.001,2,200,0)
  </xsl:template>
"KRN",.84,7981025.001,2,201,0)
 
"KRN",.84,7981025.001,2,202,0)
  <!--[ TABLE CELLS ]-->
"KRN",.84,7981025.001,2,203,0)
 
"KRN",.84,7981025.001,2,204,0)
  <xsl:template match="PATIENT/VACCINES">
"KRN",.84,7981025.001,2,205,0)
    <td>
"KRN",.84,7981025.001,2,206,0)
      <xsl:for-each select="VACCINE">
"KRN",.84,7981025.001,2,207,0)
        <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,208,0)
          <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981025.001,2,209,0)
          <xsl:with-param name="width" select="'9%'"/>
"KRN",.84,7981025.001,2,210,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,211,0)
        <br />
"KRN",.84,7981025.001,2,212,0)
      </xsl:for-each>
"KRN",.84,7981025.001,2,213,0)
    </td>
"KRN",.84,7981025.001,2,214,0)
 
"KRN",.84,7981025.001,2,215,0)
    <td>
"KRN",.84,7981025.001,2,216,0)
      <xsl:for-each select="VACCINE">
"KRN",.84,7981025.001,2,217,0)
        <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,218,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.001,2,219,0)
          <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981025.001,2,220,0)
          <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981025.001,2,221,0)
 
"KRN",.84,7981025.001,2,222,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,223,0)
        <br />
"KRN",.84,7981025.001,2,224,0)
      </xsl:for-each>
"KRN",.84,7981025.001,2,225,0)
    </td>
"KRN",.84,7981025.001,2,226,0)
  </xsl:template>
"KRN",.84,7981025.001,2,227,0)
  <xsl:template match="PATIENT/LABTESTS">
"KRN",.84,7981025.001,2,228,0)
    <td>
"KRN",.84,7981025.001,2,229,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,230,0)
        <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981025.001,2,231,0)
        <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,232,0)
      </xsl:call-template>
"KRN",.84,7981025.001,2,233,0)
    </td>
"KRN",.84,7981025.001,2,234,0)
    <td>
"KRN",.84,7981025.001,2,235,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,236,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.001,2,237,0)
        <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981025.001,2,238,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981025.001,2,239,0)
      </xsl:call-template>
"KRN",.84,7981025.001,2,240,0)
    </td>
"KRN",.84,7981025.001,2,241,0)
    <td>
"KRN",.84,7981025.001,2,242,0)
 
"KRN",.84,7981025.001,2,243,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,244,0)
        <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981025.001,2,245,0)
        <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,246,0)
      </xsl:call-template>
"KRN",.84,7981025.001,2,247,0)
    </td>
"KRN",.84,7981025.001,2,248,0)
  </xsl:template>
"KRN",.84,7981025.001,2,249,0)
</xsl:stylesheet>
"KRN",.84,7981025.002,-1)
0^8
"KRN",.84,7981025.002,0)
7981025.002^2^^CLINICAL CASE REGISTRIES^Hepatitis B Report (CSV)
"KRN",.84,7981025.002,2,0)
^^193^193^3160714^
"KRN",.84,7981025.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981025.002,2,2,0)
<xsl:stylesheet version="1.0"  
"KRN",.84,7981025.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981025.002,2,4,0)
 
"KRN",.84,7981025.002,2,5,0)
  <xsl:import href="template://report/999/2"/>   <!-- Common   -->
"KRN",.84,7981025.002,2,6,0)
 
"KRN",.84,7981025.002,2,7,0)
  <xsl:variable name="D1" 
"KRN",.84,7981025.002,2,8,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981025.002,2,9,0)
  <xsl:variable name="D2" 
"KRN",.84,7981025.002,2,10,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981025.002,2,11,0)
  <xsl:variable name="ICN_YES" select="//PATIENT[1]/ICN"/>
"KRN",.84,7981025.002,2,12,0)
 
"KRN",.84,7981025.002,2,13,0)
 
"KRN",.84,7981025.002,2,14,0)
 
"KRN",.84,7981025.002,2,15,0)
  <xsl:template match="/">
"KRN",.84,7981025.002,2,16,0)
    <xsl:text>Hepatitis B report</xsl:text>
"KRN",.84,7981025.002,2,17,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981025.002,2,18,0)
  </xsl:template>
"KRN",.84,7981025.002,2,19,0)
 
"KRN",.84,7981025.002,2,20,0)
 
"KRN",.84,7981025.002,2,21,0)
 
"KRN",.84,7981025.002,2,22,0)
  <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981025.002,2,23,0)
    <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981025.002,2,24,0)
    <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981025.002,2,25,0)
    <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981025.002,2,26,0)
    <xsl:variable name="icn" select="ICN"/>
"KRN",.84,7981025.002,2,27,0)
    <xsl:variable name="ltname" select="LABTESTS/LTNAME"/>
"KRN",.84,7981025.002,2,28,0)
    <xsl:variable name="ltdate" select="LABTESTS/DATE"/>
"KRN",.84,7981025.002,2,29,0)
    <xsl:variable name="ltresult" select="LABTESTS/RESULT"/>
"KRN",.84,7981025.002,2,30,0)
 
"KRN",.84,7981025.002,2,31,0)
 
"KRN",.84,7981025.002,2,32,0)
    <xsl:choose>
"KRN",.84,7981025.002,2,33,0)
      <xsl:when test="($D2 and $D1) or $D2">
"KRN",.84,7981025.002,2,34,0)
 
"KRN",.84,7981025.002,2,35,0)
        <xsl:for-each select="VACCINES/VACCINE">
"KRN",.84,7981025.002,2,36,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,37,0)
            <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,38,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,39,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,40,0)
            <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,41,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,42,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,43,0)
            <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,44,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,45,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,46,0)
 
"KRN",.84,7981025.002,2,47,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,48,0)
            <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981025.002,2,49,0)
 
"KRN",.84,7981025.002,2,50,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,51,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,52,0)
            <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981025.002,2,53,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,54,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,55,0)
 
"KRN",.84,7981025.002,2,56,0)
          <xsl:if test="$D1">
"KRN",.84,7981025.002,2,57,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,58,0)
              <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981025.002,2,59,0)
            </xsl:call-template>
"KRN",.84,7981025.002,2,60,0)
 
"KRN",.84,7981025.002,2,61,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,62,0)
              <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981025.002,2,63,0)
              <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,64,0)
            </xsl:call-template>
"KRN",.84,7981025.002,2,65,0)
 
"KRN",.84,7981025.002,2,66,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,67,0)
              <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981025.002,2,68,0)
            </xsl:call-template>
"KRN",.84,7981025.002,2,69,0)
          </xsl:if>
"KRN",.84,7981025.002,2,70,0)
 
"KRN",.84,7981025.002,2,71,0)
          <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,72,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,73,0)
              <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,74,0)
            </xsl:call-template>
"KRN",.84,7981025.002,2,75,0)
          </xsl:if>
"KRN",.84,7981025.002,2,76,0)
 
"KRN",.84,7981025.002,2,77,0)
          <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,78,0)
        </xsl:for-each>
"KRN",.84,7981025.002,2,79,0)
 
"KRN",.84,7981025.002,2,80,0)
      </xsl:when>
"KRN",.84,7981025.002,2,81,0)
 
"KRN",.84,7981025.002,2,82,0)
      <xsl:when test="$D1">
"KRN",.84,7981025.002,2,83,0)
 
"KRN",.84,7981025.002,2,84,0)
        <xsl:for-each select="LABTESTS">
"KRN",.84,7981025.002,2,85,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,86,0)
            <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,87,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,88,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,89,0)
            <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,90,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,91,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,92,0)
            <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,93,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,94,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,95,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,96,0)
            <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981025.002,2,97,0)
 
"KRN",.84,7981025.002,2,98,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,99,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,100,0)
            <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981025.002,2,101,0)
 
"KRN",.84,7981025.002,2,102,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,103,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,104,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,105,0)
            <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981025.002,2,106,0)
 
"KRN",.84,7981025.002,2,107,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,108,0)
 
"KRN",.84,7981025.002,2,109,0)
          <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,110,0)
            <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,111,0)
              <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,112,0)
            </xsl:call-template>
"KRN",.84,7981025.002,2,113,0)
          </xsl:if>
"KRN",.84,7981025.002,2,114,0)
 
"KRN",.84,7981025.002,2,115,0)
          <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,116,0)
        </xsl:for-each>
"KRN",.84,7981025.002,2,117,0)
      </xsl:when>
"KRN",.84,7981025.002,2,118,0)
     <xsl:otherwise>
"KRN",.84,7981025.002,2,119,0)
 
"KRN",.84,7981025.002,2,120,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,121,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,122,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,123,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,124,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,125,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,126,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,127,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,128,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,129,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,130,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,131,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,132,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,133,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,134,0)
        </xsl:if>
"KRN",.84,7981025.002,2,135,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,136,0)
 
"KRN",.84,7981025.002,2,137,0)
      </xsl:otherwise>
"KRN",.84,7981025.002,2,138,0)
    </xsl:choose>
"KRN",.84,7981025.002,2,139,0)
 
"KRN",.84,7981025.002,2,140,0)
  </xsl:template>
"KRN",.84,7981025.002,2,141,0)
 
"KRN",.84,7981025.002,2,142,0)
  <xsl:template match="COLUMN[@NAME='VAC_NAME']">
"KRN",.84,7981025.002,2,143,0)
    <xsl:if test="$D2">
"KRN",.84,7981025.002,2,144,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,145,0)
        <xsl:with-param name="title" select="'Vaccine Name'"/>
"KRN",.84,7981025.002,2,146,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,147,0)
    </xsl:if>
"KRN",.84,7981025.002,2,148,0)
  </xsl:template>
"KRN",.84,7981025.002,2,149,0)
 
"KRN",.84,7981025.002,2,150,0)
  <xsl:template match="COLUMN[@NAME='VAC_DATE']">
"KRN",.84,7981025.002,2,151,0)
    <xsl:if test="$D2">
"KRN",.84,7981025.002,2,152,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,153,0)
        <xsl:with-param name="title" select="'Vaccine Date'"/>
"KRN",.84,7981025.002,2,154,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,155,0)
    </xsl:if>
"KRN",.84,7981025.002,2,156,0)
  </xsl:template>
"KRN",.84,7981025.002,2,157,0)
 
"KRN",.84,7981025.002,2,158,0)
 
"KRN",.84,7981025.002,2,159,0)
 
"KRN",.84,7981025.002,2,160,0)
  <xsl:template match="COLUMN[@NAME='LTNAME']">
"KRN",.84,7981025.002,2,161,0)
    <xsl:if test="$D1">
"KRN",.84,7981025.002,2,162,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,163,0)
        <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981025.002,2,164,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,165,0)
    </xsl:if>
"KRN",.84,7981025.002,2,166,0)
  </xsl:template>
"KRN",.84,7981025.002,2,167,0)
 
"KRN",.84,7981025.002,2,168,0)
  <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981025.002,2,169,0)
    <xsl:if test="$D1">
"KRN",.84,7981025.002,2,170,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,171,0)
        <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981025.002,2,172,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,173,0)
 
"KRN",.84,7981025.002,2,174,0)
    </xsl:if>
"KRN",.84,7981025.002,2,175,0)
  </xsl:template>
"KRN",.84,7981025.002,2,176,0)
 
"KRN",.84,7981025.002,2,177,0)
  <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981025.002,2,178,0)
    <xsl:if test="$D1">
"KRN",.84,7981025.002,2,179,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,180,0)
        <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981025.002,2,181,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,182,0)
    </xsl:if>
"KRN",.84,7981025.002,2,183,0)
  </xsl:template>
"KRN",.84,7981025.002,2,184,0)
 
"KRN",.84,7981025.002,2,185,0)
  <xsl:template match="COLUMN[@NAME='ICN']">
"KRN",.84,7981025.002,2,186,0)
    <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,187,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,188,0)
        <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981025.002,2,189,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,190,0)
    </xsl:if>
"KRN",.84,7981025.002,2,191,0)
  </xsl:template>
"KRN",.84,7981025.002,2,192,0)
 
"KRN",.84,7981025.002,2,193,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^1
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
939^.844^946^946^3160412^^^^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<!-- Common (999.1) -->
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,8,0)
 
"KRN",.84,7981999.001,2,9,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,10,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,11,0)
 
"KRN",.84,7981999.001,2,12,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,13,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,16,0)
 
"KRN",.84,7981999.001,2,17,0)
<!--
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
                                UTILITIES
"KRN",.84,7981999.001,2,20,0)
=========================================================================
"KRN",.84,7981999.001,2,21,0)
-->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,24,0)
 
"KRN",.84,7981999.001,2,25,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,28,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,29,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,30,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,31,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,32,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,33,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,34,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,35,0)
  </xsl:when>
"KRN",.84,7981999.001,2,36,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,37,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,38,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,39,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,40,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,41,0)
  </xsl:when>
"KRN",.84,7981999.001,2,42,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,43,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,44,0)
</xsl:template>
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,47,0)
 
"KRN",.84,7981999.001,2,48,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,49,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,50,0)
 <!--
"KRN",.84,7981999.001,2,51,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,52,0)
 -->
"KRN",.84,7981999.001,2,53,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,54,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,55,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,56,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,57,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,59,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,61,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,62,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,63,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,64,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,65,0)
     </xsl:when>
"KRN",.84,7981999.001,2,66,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,67,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,68,0)
     </xsl:when>
"KRN",.84,7981999.001,2,69,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,70,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,71,0)
   </xsl:when>
"KRN",.84,7981999.001,2,72,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,73,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,74,0)
  <!--
"KRN",.84,7981999.001,2,75,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,76,0)
  -->
"KRN",.84,7981999.001,2,77,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,78,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,79,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,82,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,83,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,84,0)
  </xsl:if>
"KRN",.84,7981999.001,2,85,0)
 </xsl:if>
"KRN",.84,7981999.001,2,86,0)
</xsl:template>
"KRN",.84,7981999.001,2,87,0)
 
"KRN",.84,7981999.001,2,88,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,89,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,90,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,91,0)
</xsl:template>
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,94,0)
 
"KRN",.84,7981999.001,2,95,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,99,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,100,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,101,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,102,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,103,0)
   <a>
"KRN",.84,7981999.001,2,104,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,105,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,106,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,107,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,108,0)
    </xsl:if>
"KRN",.84,7981999.001,2,109,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,110,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,111,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,112,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,113,0)
    </xsl:if>
"KRN",.84,7981999.001,2,114,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,115,0)
   </a>
"KRN",.84,7981999.001,2,116,0)
  </xsl:when>
"KRN",.84,7981999.001,2,117,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,118,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,119,0)
</xsl:template>
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,122,0)
 
"KRN",.84,7981999.001,2,123,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,124,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,125,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,126,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,127,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,128,0)
  </xsl:when>
"KRN",.84,7981999.001,2,129,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,131,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,132,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,133,0)
</xsl:template>
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,136,0)
 
"KRN",.84,7981999.001,2,137,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,138,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,139,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,140,0)
 <tr>
"KRN",.84,7981999.001,2,141,0)
  <th scope="row">
"KRN",.84,7981999.001,2,142,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,143,0)
  </th>
"KRN",.84,7981999.001,2,144,0)
  <td>
"KRN",.84,7981999.001,2,145,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,146,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,147,0)
   </xsl:if>
"KRN",.84,7981999.001,2,148,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,149,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,150,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,151,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,152,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,153,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,154,0)
  </td>
"KRN",.84,7981999.001,2,155,0)
 </tr>
"KRN",.84,7981999.001,2,156,0)
</xsl:template>
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<!--
"KRN",.84,7981999.001,2,159,0)
Special processing for multivalued local fields to handle 
"KRN",.84,7981999.001,2,160,0)
pseudo local field  in the HIV_DX tag.
"KRN",.84,7981999.001,2,161,0)
-->
"KRN",.84,7981999.001,2,162,0)
 
"KRN",.84,7981999.001,2,163,0)
<xsl:template name="LocalList">
"KRN",.84,7981999.001,2,164,0)
 <xsl:param name="firstitem"/>
"KRN",.84,7981999.001,2,165,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,166,0)
 <tr>
"KRN",.84,7981999.001,2,167,0)
  <th scope="row">
"KRN",.84,7981999.001,2,168,0)
   <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,169,0)
  </th>
"KRN",.84,7981999.001,2,170,0)
  <td>
"KRN",.84,7981999.001,2,171,0)
   <xsl:if test="$firstitem!=''">
"KRN",.84,7981999.001,2,172,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,173,0)
    <xsl:value-of select="$firstitem"/>
"KRN",.84,7981999.001,2,174,0)
    <xsl:text>); </xsl:text>
"KRN",.84,7981999.001,2,175,0)
   </xsl:if>
"KRN",.84,7981999.001,2,176,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,177,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,178,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,179,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,180,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,181,0)
  </td>
"KRN",.84,7981999.001,2,182,0)
 </tr>
"KRN",.84,7981999.001,2,183,0)
</xsl:template>
"KRN",.84,7981999.001,2,184,0)
 
"KRN",.84,7981999.001,2,185,0)
 
"KRN",.84,7981999.001,2,186,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,187,0)
 
"KRN",.84,7981999.001,2,188,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,189,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,190,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,191,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,192,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,193,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,194,0)
 </xsl:if>
"KRN",.84,7981999.001,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,196,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,197,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,198,0)
  </xsl:when>
"KRN",.84,7981999.001,2,199,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,200,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,201,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,202,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,203,0)
</xsl:template>
"KRN",.84,7981999.001,2,204,0)
 
"KRN",.84,7981999.001,2,205,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,206,0)
 
"KRN",.84,7981999.001,2,207,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,208,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,209,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,210,0)
  <tr>
"KRN",.84,7981999.001,2,211,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,212,0)
   <td>
"KRN",.84,7981999.001,2,213,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,214,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,215,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,216,0)
   </td>
"KRN",.84,7981999.001,2,217,0)
  </tr>
"KRN",.84,7981999.001,2,218,0)
  <tr>
"KRN",.84,7981999.001,2,219,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,220,0)
   <td>
"KRN",.84,7981999.001,2,221,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,222,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,223,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,224,0)
   </td>
"KRN",.84,7981999.001,2,225,0)
  </tr>
"KRN",.84,7981999.001,2,226,0)
  <tr>
"KRN",.84,7981999.001,2,227,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,228,0)
   <td>
"KRN",.84,7981999.001,2,229,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,230,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,231,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,232,0)
   </td>
"KRN",.84,7981999.001,2,233,0)
  </tr>
"KRN",.84,7981999.001,2,234,0)
  <tr>
"KRN",.84,7981999.001,2,235,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,236,0)
   <td>
"KRN",.84,7981999.001,2,237,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,238,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,239,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,240,0)
   </td>
"KRN",.84,7981999.001,2,241,0)
  </tr>
"KRN",.84,7981999.001,2,242,0)
 </table>
"KRN",.84,7981999.001,2,243,0)
</xsl:template>
"KRN",.84,7981999.001,2,244,0)
 
"KRN",.84,7981999.001,2,245,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,246,0)
 
"KRN",.84,7981999.001,2,247,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,248,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,249,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,250,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,251,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,252,0)
  </div>
"KRN",.84,7981999.001,2,253,0)
 </xsl:if>
"KRN",.84,7981999.001,2,254,0)
</xsl:template>
"KRN",.84,7981999.001,2,255,0)
 
"KRN",.84,7981999.001,2,256,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,257,0)
 
"KRN",.84,7981999.001,2,258,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,259,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,260,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,261,0)
 </table>
"KRN",.84,7981999.001,2,262,0)
</xsl:template>
"KRN",.84,7981999.001,2,263,0)
 
"KRN",.84,7981999.001,2,264,0)
<!--
"KRN",.84,7981999.001,2,265,0)
=========================================================================
"KRN",.84,7981999.001,2,266,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,267,0)
=========================================================================
"KRN",.84,7981999.001,2,268,0)
-->
"KRN",.84,7981999.001,2,269,0)
 
"KRN",.84,7981999.001,2,270,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,271,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,272,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,273,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,274,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,275,0)
   <tr>
"KRN",.84,7981999.001,2,276,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,277,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,278,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,279,0)
     </table>
"KRN",.84,7981999.001,2,280,0)
    </td>
"KRN",.84,7981999.001,2,281,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,282,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,283,0)
    </td>
"KRN",.84,7981999.001,2,284,0)
   </tr>
"KRN",.84,7981999.001,2,285,0)
  </table>
"KRN",.84,7981999.001,2,286,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,287,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,288,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,289,0)
   </table>
"KRN",.84,7981999.001,2,290,0)
  </xsl:if>
"KRN",.84,7981999.001,2,291,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,292,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,293,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,294,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,295,0)
   </div>
"KRN",.84,7981999.001,2,296,0)
  </xsl:if>
"KRN",.84,7981999.001,2,297,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,298,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,299,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,300,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,301,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,302,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,303,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,304,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,305,0)
     </xsl:when>
"KRN",.84,7981999.001,2,306,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,307,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,308,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,309,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,310,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,311,0)
   </dl>
"KRN",.84,7981999.001,2,312,0)
  </xsl:if>
"KRN",.84,7981999.001,2,313,0)
 </div>
"KRN",.84,7981999.001,2,314,0)
</xsl:template>
"KRN",.84,7981999.001,2,315,0)
 
"KRN",.84,7981999.001,2,316,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,317,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,318,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,319,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,320,0)
</xsl:template>
"KRN",.84,7981999.001,2,321,0)
 
"KRN",.84,7981999.001,2,322,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,323,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,324,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,325,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,326,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,327,0)
</xsl:template>
"KRN",.84,7981999.001,2,328,0)
 
"KRN",.84,7981999.001,2,329,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,330,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,331,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,332,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,336,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,337,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,338,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,339,0)
</xsl:template>
"KRN",.84,7981999.001,2,340,0)
 
"KRN",.84,7981999.001,2,341,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,342,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,343,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,344,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,345,0)
  <tr>
"KRN",.84,7981999.001,2,346,0)
   <th scope="row">
"KRN",.84,7981999.001,2,347,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,348,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,349,0)
    </xsl:if>
"KRN",.84,7981999.001,2,350,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,351,0)
   </th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,357,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,358,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,359,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,360,0)
   </td>
"KRN",.84,7981999.001,2,361,0)
  </tr>
"KRN",.84,7981999.001,2,362,0)
 </xsl:if>
"KRN",.84,7981999.001,2,363,0)
</xsl:template>
"KRN",.84,7981999.001,2,364,0)
 
"KRN",.84,7981999.001,2,365,0)
<!-- 
"KRN",.84,7981999.001,2,366,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,367,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,368,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,369,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,370,0)
  <tr>
"KRN",.84,7981999.001,2,371,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,372,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,373,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,374,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,375,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,376,0)
   </td>
"KRN",.84,7981999.001,2,377,0)
  </tr>
"KRN",.84,7981999.001,2,378,0)
 </xsl:if>
"KRN",.84,7981999.001,2,379,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,380,0)
  <tr>
"KRN",.84,7981999.001,2,381,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,382,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,383,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,384,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,385,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,386,0)
   </td>
"KRN",.84,7981999.001,2,387,0)
  </tr>
"KRN",.84,7981999.001,2,388,0)
 </xsl:if>
"KRN",.84,7981999.001,2,389,0)
</xsl:template>
"KRN",.84,7981999.001,2,390,0)
-->
"KRN",.84,7981999.001,2,391,0)
 
"KRN",.84,7981999.001,2,392,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,393,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,394,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,395,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,396,0)
</xsl:template>
"KRN",.84,7981999.001,2,397,0)
 
"KRN",.84,7981999.001,2,398,0)
<xsl:template match="PARAMETERS/ICDLST">
"KRN",.84,7981999.001,2,399,0)
 <tr>
"KRN",.84,7981999.001,2,400,0)
  <th scope="row">ICD:&#160;</th>
"KRN",.84,7981999.001,2,401,0)
  <td>
"KRN",.84,7981999.001,2,402,0)
   <dl>
"KRN",.84,7981999.001,2,403,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,404,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,405,0)
    </xsl:if>
"KRN",.84,7981999.001,2,406,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,407,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,408,0)
   </dl>
"KRN",.84,7981999.001,2,409,0)
  </td>
"KRN",.84,7981999.001,2,410,0)
 </tr>
"KRN",.84,7981999.001,2,411,0)
</xsl:template>
"KRN",.84,7981999.001,2,412,0)
 
"KRN",.84,7981999.001,2,413,0)
<xsl:template match="PARAMETERS/ICDLST/GROUP">
"KRN",.84,7981999.001,2,414,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,415,0)
 <dd><dl>
"KRN",.84,7981999.001,2,416,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,417,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,418,0)
  </xsl:if>
"KRN",.84,7981999.001,2,419,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,420,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,421,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,422,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,423,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,424,0)
   </td>
"KRN",.84,7981999.001,2,425,0)
   <td>
"KRN",.84,7981999.001,2,426,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,427,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,428,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,429,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,430,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,431,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,432,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,433,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,434,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,435,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,436,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,437,0)
   </td>
"KRN",.84,7981999.001,2,438,0)
   <td>
"KRN",.84,7981999.001,2,439,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,440,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,441,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,442,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,443,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,444,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,445,0)
 </dl></dd>
"KRN",.84,7981999.001,2,446,0)
</xsl:template>
"KRN",.84,7981999.001,2,447,0)
 
"KRN",.84,7981999.001,2,448,0)
<xsl:template match="PARAMETERS/ICDFILT">
"KRN",.84,7981999.001,2,449,0)
 <tr>
"KRN",.84,7981999.001,2,450,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,451,0)
  <td>
"KRN",.84,7981999.001,2,452,0)
   <dl>
"KRN",.84,7981999.001,2,453,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,454,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,455,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,456,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,457,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,458,0)
        </xsl:when>
"KRN",.84,7981999.001,2,459,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,460,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,461,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,462,0)
        </xsl:when>
"KRN",.84,7981999.001,2,463,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,464,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,465,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,466,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,467,0)
    </xsl:if>
"KRN",.84,7981999.001,2,468,0)
   </dl>
"KRN",.84,7981999.001,2,469,0)
  </td>
"KRN",.84,7981999.001,2,470,0)
 </tr>
"KRN",.84,7981999.001,2,471,0)
</xsl:template>
"KRN",.84,7981999.001,2,472,0)
 
"KRN",.84,7981999.001,2,473,0)
<xsl:template match="PARAMETERS/ICDFILT/GROUP">
"KRN",.84,7981999.001,2,474,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,475,0)
 <dd><dl>
"KRN",.84,7981999.001,2,476,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,477,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,478,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,479,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,480,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,481,0)
   </td>
"KRN",.84,7981999.001,2,482,0)
   <td>
"KRN",.84,7981999.001,2,483,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,484,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,485,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,486,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,487,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,488,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,489,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,490,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,491,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,492,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,493,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,494,0)
   </td>
"KRN",.84,7981999.001,2,495,0)
   <td>
"KRN",.84,7981999.001,2,496,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,497,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,498,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,499,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,500,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,501,0)
   </td></tr></table> 
"KRN",.84,7981999.001,2,502,0)
 </dl></dd>
"KRN",.84,7981999.001,2,503,0)
</xsl:template> 
"KRN",.84,7981999.001,2,504,0)
 
"KRN",.84,7981999.001,2,505,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,506,0)
 <xsl:variable name="pseudo" select="/REPORT/PARAMETERS/HIV_DX" />
"KRN",.84,7981999.001,2,507,0)
 <xsl:call-template name="LocalList">
"KRN",.84,7981999.001,2,508,0)
  <xsl:with-param name="firstitem" select="$pseudo"/>
"KRN",.84,7981999.001,2,509,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,510,0)
</xsl:template>
"KRN",.84,7981999.001,2,511,0)
 
"KRN",.84,7981999.001,2,512,0)
<!-- Process the pseudo local field -->
"KRN",.84,7981999.001,2,513,0)
<xsl:template match="PARAMETERS/HIV_DX">
"KRN",.84,7981999.001,2,514,0)
 <xsl:if test="count(/REPORT/PARAMETERS/LOCAL_FIELDS/*) &lt; 1">
"KRN",.84,7981999.001,2,515,0)
  <tr>
"KRN",.84,7981999.001,2,516,0)
   <th scope="row">
"KRN",.84,7981999.001,2,517,0)
    <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,518,0)
   </th>
"KRN",.84,7981999.001,2,519,0)
   <td>
"KRN",.84,7981999.001,2,520,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,521,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,522,0)
    <xsl:text>)</xsl:text>
"KRN",.84,7981999.001,2,523,0)
   </td>
"KRN",.84,7981999.001,2,524,0)
  </tr>
"KRN",.84,7981999.001,2,525,0)
 </xsl:if>
"KRN",.84,7981999.001,2,526,0)
</xsl:template> 
"KRN",.84,7981999.001,2,527,0)
 
"KRN",.84,7981999.001,2,528,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,529,0)
<xsl:choose>
"KRN",.84,7981999.001,2,530,0)
   <xsl:when test="@DAA_DRUGS">
"KRN",.84,7981999.001,2,531,0)
    <tr>
"KRN",.84,7981999.001,2,532,0)
     <th scope="row">DAA Prescriptions:&#160;</th>
"KRN",.84,7981999.001,2,533,0)
     <td>
"KRN",.84,7981999.001,2,534,0)
      <xsl:if test="@DAA_DRUGS='A'"><xsl:text>All prescriptions</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,535,0)
      <xsl:if test="@DAA_DRUGS='I'"><xsl:text>In-house only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,536,0)
      <xsl:if test="@DAA_DRUGS='C'"><xsl:text>Choice only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,537,0)
     </td>
"KRN",.84,7981999.001,2,538,0)
    </tr>
"KRN",.84,7981999.001,2,539,0)
   </xsl:when>
"KRN",.84,7981999.001,2,540,0)
   <xsl:otherwise>
"KRN",.84,7981999.001,2,541,0)
    <tr>
"KRN",.84,7981999.001,2,542,0)
      <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,543,0)
      <td>
"KRN",.84,7981999.001,2,544,0)
        <xsl:if test="@COMPLETE='1' or @SUMMARY='1'">
"KRN",.84,7981999.001,2,545,0)
          <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,546,0)
        </xsl:if> 
"KRN",.84,7981999.001,2,547,0)
        <xsl:if test="(@RECENT_FILLS='1' or @ALL_FILLS='1') and (@COMPLETE='1' or @SUMMARY='1')">
"KRN",.84,7981999.001,2,548,0)
          <xsl:text>, </xsl:text>
"KRN",.84,7981999.001,2,549,0)
        </xsl:if>
"KRN",.84,7981999.001,2,550,0)
        <xsl:if test="@ALL_FILLS='1'"><xsl:text>All fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,551,0)
        <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in time period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,552,0)
      </td>
"KRN",.84,7981999.001,2,553,0)
    </tr>  
"KRN",.84,7981999.001,2,554,0)
    <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,555,0)
     <tr>
"KRN",.84,7981999.001,2,556,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,557,0)
      <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,558,0)
     </tr>
"KRN",.84,7981999.001,2,559,0)
    </xsl:if>
"KRN",.84,7981999.001,2,560,0)
    <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,561,0)
     <tr>
"KRN",.84,7981999.001,2,562,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,563,0)
      <td>
"KRN",.84,7981999.001,2,564,0)
       <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,565,0)
       <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,566,0)
        <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,567,0)
       </xsl:call-template>
"KRN",.84,7981999.001,2,568,0)
      </td>
"KRN",.84,7981999.001,2,569,0)
     </tr>
"KRN",.84,7981999.001,2,570,0)
    </xsl:if>
"KRN",.84,7981999.001,2,571,0)
   </xsl:otherwise>
"KRN",.84,7981999.001,2,572,0)
</xsl:choose>
"KRN",.84,7981999.001,2,573,0)
</xsl:template>
"KRN",.84,7981999.001,2,574,0)
 
"KRN",.84,7981999.001,2,575,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,576,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,577,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,578,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,579,0)
</xsl:template>
"KRN",.84,7981999.001,2,580,0)
 
"KRN",.84,7981999.001,2,581,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,582,0)
 <tr>
"KRN",.84,7981999.001,2,583,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,584,0)
  <td>
"KRN",.84,7981999.001,2,585,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,586,0)
    <xsl:if test="@CONFDT_AFTER!=''">
"KRN",.84,7981999.001,2,587,0)
      <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,588,0)
      <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,589,0)
       <xsl:with-param name="dt" select="@CONFDT_AFTER"/>
"KRN",.84,7981999.001,2,590,0)
      </xsl:call-template>
"KRN",.84,7981999.001,2,591,0)
    </xsl:if>
"KRN",.84,7981999.001,2,592,0)
  </td>
"KRN",.84,7981999.001,2,593,0)
 </tr>
"KRN",.84,7981999.001,2,594,0)
 <xsl:if test="@OEF!=''">
"KRN",.84,7981999.001,2,595,0)
  <tr>
"KRN",.84,7981999.001,2,596,0)
   <th scope="row">OEF/OIF:&#160;</th>
"KRN",.84,7981999.001,2,597,0)
   <td>
"KRN",.84,7981999.001,2,598,0)
    <xsl:if test="@OEF='1'">
"KRN",.84,7981999.001,2,599,0)
      <xsl:text>Include only</xsl:text>
"KRN",.84,7981999.001,2,600,0)
    </xsl:if>
"KRN",.84,7981999.001,2,601,0)
    <xsl:if test="@OEF='-1'">
"KRN",.84,7981999.001,2,602,0)
      <xsl:text>Exclude</xsl:text>
"KRN",.84,7981999.001,2,603,0)
    </xsl:if>
"KRN",.84,7981999.001,2,604,0)
   </td>
"KRN",.84,7981999.001,2,605,0)
  </tr>
"KRN",.84,7981999.001,2,606,0)
 </xsl:if>
"KRN",.84,7981999.001,2,607,0)
 <tr>
"KRN",.84,7981999.001,2,608,0)
  <th scope="row">Sex:&#160;</th>
"KRN",.84,7981999.001,2,609,0)
  <td>
"KRN",.84,7981999.001,2,610,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,611,0)
     <xsl:when test="@SEX">
"KRN",.84,7981999.001,2,612,0)
      <xsl:if test="@SEX='F'">
"KRN",.84,7981999.001,2,613,0)
       <xsl:text>Female only</xsl:text>
"KRN",.84,7981999.001,2,614,0)
      </xsl:if>
"KRN",.84,7981999.001,2,615,0)
      <xsl:if test="@SEX='M'">
"KRN",.84,7981999.001,2,616,0)
       <xsl:text>Male only</xsl:text>
"KRN",.84,7981999.001,2,617,0)
      </xsl:if>
"KRN",.84,7981999.001,2,618,0)
     </xsl:when>
"KRN",.84,7981999.001,2,619,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,620,0)
      <xsl:text>Both</xsl:text>
"KRN",.84,7981999.001,2,621,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,622,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,623,0)
  </td>
"KRN",.84,7981999.001,2,624,0)
 </tr>
"KRN",.84,7981999.001,2,625,0)
 <xsl:if test="@SVR!=''">
"KRN",.84,7981999.001,2,626,0)
   <tr>
"KRN",.84,7981999.001,2,627,0)
    <th scope="row">SVR:&#160;</th>
"KRN",.84,7981999.001,2,628,0)
    <td>
"KRN",.84,7981999.001,2,629,0)
     <xsl:if test="@SVR='1'">
"KRN",.84,7981999.001,2,630,0)
       <xsl:text>SVR Only</xsl:text>
"KRN",.84,7981999.001,2,631,0)
     </xsl:if>
"KRN",.84,7981999.001,2,632,0)
     <xsl:if test="@SVR='0'">
"KRN",.84,7981999.001,2,633,0)
       <xsl:text>No SVR</xsl:text>
"KRN",.84,7981999.001,2,634,0)
     </xsl:if>
"KRN",.84,7981999.001,2,635,0)
     <xsl:if test="@SVR='-1'">
"KRN",.84,7981999.001,2,636,0)
       <xsl:text>All patients</xsl:text>
"KRN",.84,7981999.001,2,637,0)
     </xsl:if>
"KRN",.84,7981999.001,2,638,0)
    </td>
"KRN",.84,7981999.001,2,639,0)
   </tr>
"KRN",.84,7981999.001,2,640,0)
 </xsl:if>
"KRN",.84,7981999.001,2,641,0)
</xsl:template>
"KRN",.84,7981999.001,2,642,0)
 
"KRN",.84,7981999.001,2,643,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,644,0)
 <tr>
"KRN",.84,7981999.001,2,645,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,646,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,647,0)
 </tr>
"KRN",.84,7981999.001,2,648,0)
</xsl:template>
"KRN",.84,7981999.001,2,649,0)
 
"KRN",.84,7981999.001,2,650,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,651,0)
 <tr>
"KRN",.84,7981999.001,2,652,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,653,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,654,0)
 </tr>
"KRN",.84,7981999.001,2,655,0)
</xsl:template>
"KRN",.84,7981999.001,2,656,0)
 
"KRN",.84,7981999.001,2,657,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,658,0)
 <tr>
"KRN",.84,7981999.001,2,659,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,660,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,661,0)
 </tr>
"KRN",.84,7981999.001,2,662,0)
</xsl:template>
"KRN",.84,7981999.001,2,663,0)
 
"KRN",.84,7981999.001,2,664,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,665,0)
 <tr>
"KRN",.84,7981999.001,2,666,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,667,0)
  <td>
"KRN",.84,7981999.001,2,668,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,669,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,670,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,671,0)
  </td>
"KRN",.84,7981999.001,2,672,0)
 </tr>
"KRN",.84,7981999.001,2,673,0)
</xsl:template>
"KRN",.84,7981999.001,2,674,0)
 
"KRN",.84,7981999.001,2,675,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,676,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,677,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,678,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,679,0)
<xsl:if test="../TREATMENT_HISTORY">
"KRN",.84,7981999.001,2,680,0)
  <tr>
"KRN",.84,7981999.001,2,681,0)
   <th scope="row">Treatment History:&#160;</th>
"KRN",.84,7981999.001,2,682,0)
   <td>
"KRN",.84,7981999.001,2,683,0)
     <xsl:value-of select="../TREATMENT_HISTORY"/>
"KRN",.84,7981999.001,2,684,0)
   </td>
"KRN",.84,7981999.001,2,685,0)
  </tr>
"KRN",.84,7981999.001,2,686,0)
 </xsl:if>
"KRN",.84,7981999.001,2,687,0)
</xsl:template>
"KRN",.84,7981999.001,2,688,0)
 
"KRN",.84,7981999.001,2,689,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_5">
"KRN",.84,7981999.001,2,690,0)
   <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,691,0)
    <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981999.001,2,692,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,693,0)
  </xsl:template>
"KRN",.84,7981999.001,2,694,0)
 
"KRN",.84,7981999.001,2,695,0)
<!--
"KRN",.84,7981999.001,2,696,0)
=========================================================================
"KRN",.84,7981999.001,2,697,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,698,0)
=========================================================================
"KRN",.84,7981999.001,2,699,0)
-->
"KRN",.84,7981999.001,2,700,0)
 
"KRN",.84,7981999.001,2,701,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,702,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,703,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,704,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,705,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,706,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,707,0)
   <div>
"KRN",.84,7981999.001,2,708,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,709,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,710,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,711,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,712,0)
    </xsl:if>
"KRN",.84,7981999.001,2,713,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,714,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,715,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,716,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,717,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,718,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,719,0)
     <tbody>
"KRN",.84,7981999.001,2,720,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,721,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,722,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,723,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,724,0)
     </tbody>
"KRN",.84,7981999.001,2,725,0)
    </table>
"KRN",.84,7981999.001,2,726,0)
   </div>
"KRN",.84,7981999.001,2,727,0)
  </xsl:when>
"KRN",.84,7981999.001,2,728,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,729,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,730,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,731,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,732,0)
</xsl:template>
"KRN",.84,7981999.001,2,733,0)
 
"KRN",.84,7981999.001,2,734,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,735,0)
 
"KRN",.84,7981999.001,2,736,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,737,0)
 <thead>
"KRN",.84,7981999.001,2,738,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,739,0)
 </thead>
"KRN",.84,7981999.001,2,740,0)
</xsl:template>
"KRN",.84,7981999.001,2,741,0)
 
"KRN",.84,7981999.001,2,742,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,743,0)
 
"KRN",.84,7981999.001,2,744,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,745,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,746,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,747,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,748,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,749,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,750,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,751,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,752,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,753,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,754,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,755,0)
 <th scope="col">
"KRN",.84,7981999.001,2,756,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,757,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,758,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,759,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,760,0)
  </xsl:if>
"KRN",.84,7981999.001,2,761,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,762,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,763,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,764,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,765,0)
  </xsl:if>
"KRN",.84,7981999.001,2,766,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,767,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,768,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,769,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,770,0)
  </xsl:if>
"KRN",.84,7981999.001,2,771,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,772,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,773,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,774,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,775,0)
  </xsl:if>
"KRN",.84,7981999.001,2,776,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,777,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,778,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,779,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,780,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,781,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,782,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,783,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,784,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,785,0)
    </xsl:element>
"KRN",.84,7981999.001,2,786,0)
   </xsl:when>
"KRN",.84,7981999.001,2,787,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,788,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,789,0)
 </th>
"KRN",.84,7981999.001,2,790,0)
</xsl:template>
"KRN",.84,7981999.001,2,791,0)
 
"KRN",.84,7981999.001,2,792,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,793,0)
 
"KRN",.84,7981999.001,2,794,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,795,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,796,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,797,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,798,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,799,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,800,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,801,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,802,0)
  </xsl:if>
"KRN",.84,7981999.001,2,803,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,804,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,805,0)
</xsl:template>
"KRN",.84,7981999.001,2,806,0)
 
"KRN",.84,7981999.001,2,807,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,808,0)
 
"KRN",.84,7981999.001,2,809,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,810,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,811,0)
 <tr>
"KRN",.84,7981999.001,2,812,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,813,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,814,0)
  </xsl:if>
"KRN",.84,7981999.001,2,815,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,816,0)
 </tr>
"KRN",.84,7981999.001,2,817,0)
</xsl:template>
"KRN",.84,7981999.001,2,818,0)
 
"KRN",.84,7981999.001,2,819,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,820,0)
 
"KRN",.84,7981999.001,2,821,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,822,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,823,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,824,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,825,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,826,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,827,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,828,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,829,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,830,0)
 <td>
"KRN",.84,7981999.001,2,831,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,832,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,833,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,834,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,835,0)
  </xsl:if>
"KRN",.84,7981999.001,2,836,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,837,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,838,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,839,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,840,0)
  </xsl:if>
"KRN",.84,7981999.001,2,841,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,842,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,843,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,844,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,845,0)
  </xsl:if>
"KRN",.84,7981999.001,2,846,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,847,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,848,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,849,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,850,0)
  </xsl:if>
"KRN",.84,7981999.001,2,851,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,852,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,853,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,854,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,855,0)
  </xsl:if>
"KRN",.84,7981999.001,2,856,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,857,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,858,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,859,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,860,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,861,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,862,0)
   </xsl:when>
"KRN",.84,7981999.001,2,863,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,864,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,865,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,866,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,867,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,868,0)
   </xsl:when>
"KRN",.84,7981999.001,2,869,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,870,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,871,0)
 </td>
"KRN",.84,7981999.001,2,872,0)
</xsl:template>
"KRN",.84,7981999.001,2,873,0)
 
"KRN",.84,7981999.001,2,874,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,875,0)
 
"KRN",.84,7981999.001,2,876,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,877,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,878,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,879,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,880,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,881,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,882,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,883,0)
</xsl:template>
"KRN",.84,7981999.001,2,884,0)
 
"KRN",.84,7981999.001,2,885,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,886,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,887,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,888,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,889,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,890,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,891,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,892,0)
</xsl:template>
"KRN",.84,7981999.001,2,893,0)
 
"KRN",.84,7981999.001,2,894,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,895,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,896,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,897,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,898,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,899,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,900,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,901,0)
</xsl:template>
"KRN",.84,7981999.001,2,902,0)
 
"KRN",.84,7981999.001,2,903,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,904,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,905,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,906,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,907,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,908,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,909,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,910,0)
</xsl:template>
"KRN",.84,7981999.001,2,911,0)
 
"KRN",.84,7981999.001,2,912,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,913,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,914,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,915,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,916,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,917,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,918,0)
</xsl:template>
"KRN",.84,7981999.001,2,919,0)
 
"KRN",.84,7981999.001,2,920,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,921,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,922,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,923,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,924,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,925,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,926,0)
</xsl:template>
"KRN",.84,7981999.001,2,927,0)
 
"KRN",.84,7981999.001,2,928,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,929,0)
 
"KRN",.84,7981999.001,2,930,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,931,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,932,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,933,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,934,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,935,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,936,0)
</xsl:template>
"KRN",.84,7981999.001,2,937,0)
 
"KRN",.84,7981999.001,2,938,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,939,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,940,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,941,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,942,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,943,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,944,0)
</xsl:template>
"KRN",.84,7981999.001,2,945,0)
 
"KRN",.84,7981999.001,2,946,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PKG",186,-1)
1^1
"PKG",186,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",186,20,0)
^9.402P^^
"PKG",186,22,0)
^9.49I^1^1
"PKG",186,22,1,0)
1.5^3060208^3060308^1
"PKG",186,22,1,"PAH",1,0)
29^3161117^84
"PKG",186,22,1,"PAH",1,1,0)
^^6^6^3161117
"PKG",186,22,1,"PAH",1,1,1,0)
This patch contains changes to the following:
"PKG",186,22,1,"PAH",1,1,2,0)
 
"PKG",186,22,1,"PAH",1,1,3,0)
1.      A new Selection Panel on each report to allow the user to limit 
"PKG",186,22,1,"PAH",1,1,4,0)
the report to patients with a diagnosis of interest in a date range. 
"PKG",186,22,1,"PAH",1,1,5,0)
 
"PKG",186,22,1,"PAH",1,1,6,0)
2.      Two new reports Hep A and Hep B are included in this patch. 
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","RORP029")
0^2^B20741353^n/a
"RTN","RORP029",1,0)
RORP029 ;ALB/TK - CCR PRE/POST-INSTALL PATCH 29 ;29 Jul 2014  4:02 PM
"RTN","RORP029",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29**;Feb 17, 2006;Build 18
"RTN","RORP029",3,0)
 ;
"RTN","RORP029",4,0)
 ; This routine uses the following IAs:
"RTN","RORP029",5,0)
 ; #3277         OWNSKEY^XUSRB (supported)
"RTN","RORP029",6,0)
 ; #10141        BMES^XPDUTL
"RTN","RORP029",7,0)
 ;               MES^XPDUTL
"RTN","RORP029",8,0)
 ; #2056         GET1^DIQ (supported)
"RTN","RORP029",9,0)
 ; #2053         UPDATE^DIE (supported)
"RTN","RORP029",10,0)
 ; #2054         CLEAN^DILF (supported)
"RTN","RORP029",11,0)
 ;
"RTN","RORP029",12,0)
 ;******************************************************************************
"RTN","RORP029",13,0)
 ;******************************************************************************
"RTN","RORP029",14,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORP029",15,0)
 ;        
"RTN","RORP029",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORP029",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORP029",18,0)
 ;ROR*1.5*29   APR  2016   T KOPP       Patch 29 pre and post install
"RTN","RORP029",19,0)
 ;******************************************************************************
"RTN","RORP029",20,0)
 ;******************************************************************************
"RTN","RORP029",21,0)
 ;
"RTN","RORP029",22,0)
 Q
"RTN","RORP029",23,0)
 ;Pre-Install routine for Patch 29
"RTN","RORP029",24,0)
PRE ;
"RTN","RORP029",25,0)
 ; CHECK FOR ROR VA IRM KEY, ABORT IF USER DOES NOT POSSESS
"RTN","RORP029",26,0)
 N RORKEYOK
"RTN","RORP029",27,0)
 D BMES^XPDUTL("Verifying installing user has the ROR VA IRM security key")
"RTN","RORP029",28,0)
 D OWNSKEY^XUSRB(.RORKEYOK,"ROR VA IRM",DUZ)
"RTN","RORP029",29,0)
 I '$G(RORKEYOK(0)) D  Q
"RTN","RORP029",30,0)
 . S XPDABORT=1
"RTN","RORP029",31,0)
 . D BMES^XPDUTL("****** INSTALL ABORTED!!! ******")
"RTN","RORP029",32,0)
 . D BMES^XPDUTL("This patch can only be installed by a user who is assigned the ROR VA IRM key")
"RTN","RORP029",33,0)
 . D BMES^XPDUTL("Restart the installation again once the appropriate key has been assigned")
"RTN","RORP029",34,0)
 D BMES^XPDUTL("  User has the ROR VA IRM key - OK to install")
"RTN","RORP029",35,0)
 Q
"RTN","RORP029",36,0)
 ;
"RTN","RORP029",37,0)
 ;Post-Install routine for Patch 29
"RTN","RORP029",38,0)
POST ;
"RTN","RORP029",39,0)
 D BMES^XPDUTL("Post install started")
"RTN","RORP029",40,0)
 D BMES^XPDUTL("Adding new reports to all registries")
"RTN","RORP029",41,0)
 D UPDREG
"RTN","RORP029",42,0)
 ;
"RTN","RORP029",43,0)
 D BMES^XPDUTL("Adding new selection panel to reports")
"RTN","RORP029",44,0)
 D UPDPAN
"RTN","RORP029",45,0)
 ;
"RTN","RORP029",46,0)
 D CLEAN^DILF
"RTN","RORP029",47,0)
 D BMES^XPDUTL("Post install completed")
"RTN","RORP029",48,0)
 Q
"RTN","RORP029",49,0)
 ;
"RTN","RORP029",50,0)
UPDREG ;  Add new reports to all registries
"RTN","RORP029",51,0)
 N CT,DIERR,RORDATA,REGNAME,REGIEN,RORERR,RORFDA,RORMSG,X,Y,Z
"RTN","RORP029",52,0)
 S REGIEN=0 F  S REGIEN=$O(^ROR(798.1,REGIEN)) Q:'REGIEN  D
"RTN","RORP029",53,0)
 . ; Extract field #27 AVAILABLE REPORTS - Quit if "24,25" already exists in the record .  Add ,24,25 to report list
"RTN","RORP029",54,0)
 . ; VA HEPB registry does not have report 25
"RTN","RORP029",55,0)
 . S RORDATA=$$GET1^DIQ(798.1,REGIEN_",",27,"I")
"RTN","RORP029",56,0)
 . S REGNAME=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORP029",57,0)
 . I RORDATA[$S(REGNAME'="VA HEPB":"24,25",1:",24") D  Q
"RTN","RORP029",58,0)
 .. D BMES^XPDUTL("   o New reports already exist for registry #"_REGIEN)
"RTN","RORP029",59,0)
 . K RORFDA,RORMSG
"RTN","RORP029",60,0)
 . S RORFDA(798.1,REGIEN_",",27)=RORDATA_",24"_$S(REGNAME'="VA HEPB":",25",1:"")
"RTN","RORP029",61,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP029",62,0)
 . I $D(DIERR) D  Q
"RTN","RORP029",63,0)
 .. K RORERR
"RTN","RORP029",64,0)
 .. D DBS^RORERR("RORMSG",-112,,,798.1,REGIEN)
"RTN","RORP029",65,0)
 .. M RORMSG=RORERR
"RTN","RORP029",66,0)
 .. K RORERR
"RTN","RORP029",67,0)
 .. S RORERR(1)="     Update of registry "_$P($G(^ROR(798.1,REGIEN,0)),U)_" with new reports"
"RTN","RORP029",68,0)
 .. S RORERR(2)="      encountered the following error.  Please report this error to your CCR contact:"
"RTN","RORP029",69,0)
 .. S RORERR(3)=""
"RTN","RORP029",70,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP029",71,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP029",72,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP029",73,0)
 D COMPL
"RTN","RORP029",74,0)
 Q
"RTN","RORP029",75,0)
 ;
"RTN","RORP029",76,0)
UPDPAN ;  Add new panel to all reports with OTHER DIAGNOSIS panel
"RTN","RORP029",77,0)
 N CT,DIERR,P1,P2,RORDATA,RORRPT,RORERR,RORFDA,RORMSG,X,Y,Z
"RTN","RORP029",78,0)
 S RORRPT=0 F  S RORRPT=$O(^ROR(799.34,RORRPT)) Q:'RORRPT  D
"RTN","RORP029",79,0)
 . ; Extract field #1 PARAMETER PANELS - Quit if ",190," already exists in the record .  Add ,190 after ,180
"RTN","RORP029",80,0)
 . S RORDATA=$$GET1^DIQ(799.34,RORRPT_",",1,"I")
"RTN","RORP029",81,0)
 . Q:RORDATA'["180"
"RTN","RORP029",82,0)
 . I RORDATA[",180,190" D  Q
"RTN","RORP029",83,0)
 .. D BMES^XPDUTL("   o New selection panel 190 already exists for report #"_RORRPT)
"RTN","RORP029",84,0)
 . K RORFDA,RORMSG
"RTN","RORP029",85,0)
 . S P1=$P(RORDATA,",180"),P2=$P(RORDATA,",180",2)
"RTN","RORP029",86,0)
 . S RORFDA(799.34,RORRPT_",",1)=P1_",180,190"_P2
"RTN","RORP029",87,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP029",88,0)
 . I $D(DIERR) D  Q
"RTN","RORP029",89,0)
 .. K RORERR
"RTN","RORP029",90,0)
 .. D DBS^RORERR("RORMSG",-112,,,799.34,RORRPT)
"RTN","RORP029",91,0)
 .. M RORMSG=RORERR
"RTN","RORP029",92,0)
 .. K RORERR
"RTN","RORP029",93,0)
 .. S RORERR(1)="     Update of report "_$P($G(^ROR(799.34,RORRPT,0)),U)_" with new panel"
"RTN","RORP029",94,0)
 .. S RORERR(2)="      encountered the following error.  Please report this error to your CCR contact:"
"RTN","RORP029",95,0)
 .. S RORERR(3)=""
"RTN","RORP029",96,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP029",97,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP029",98,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP029",99,0)
 D COMPL
"RTN","RORP029",100,0)
 Q
"RTN","RORP029",101,0)
 ;
"RTN","RORP029",102,0)
COMPL ;
"RTN","RORP029",103,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP029",104,0)
 Q
"RTN","RORP029",105,0)
 ;
"RTN","RORUTL11")
0^4^B4575612^B4484027
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ; 03 Dec 2015  1:56 PM
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17,18,20,19,21,22,24,27,25,26,28,29**;Feb 17, 2006;Build 18
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;
"RTN","RORUTL11",15,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",16,0)
 ;
"RTN","RORUTL11",17,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version 
"RTN","RORUTL11",18,0)
 ;
"RTN","RORUTL11",19,0)
 ;ROR*1.5*18   MAY 2012    C RAY        Updated version 
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ;ROR*1.5*20   DEC 2012    C RAY        Updated version
"RTN","RORUTL11",22,0)
 ;
"RTN","RORUTL11",23,0)
 ;ROR*1.5*19   APR 2012    K GUPTA      Updated version
"RTN","RORUTL11",24,0)
 ;                                    
"RTN","RORUTL11",25,0)
 ;ROR*1.5*21   AUG 2013    T KOPP       Updated version
"RTN","RORUTL11",26,0)
 ;
"RTN","RORUTL11",27,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Updated version 
"RTN","RORUTL11",28,0)
 ;
"RTN","RORUTL11",29,0)
 ;ROR*1.5*24   DEC 2014    T KOPP       Updated version       
"RTN","RORUTL11",30,0)
 ;                       
"RTN","RORUTL11",31,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Updated version
"RTN","RORUTL11",32,0)
 ;
"RTN","RORUTL11",33,0)
 ;ROR*1.5*25   MAR 2015    T KOPP       Updated version
"RTN","RORUTL11",34,0)
 ;                       
"RTN","RORUTL11",35,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Updated version
"RTN","RORUTL11",36,0)
 ;
"RTN","RORUTL11",37,0)
 ;ROR*1.5*28   APR 2016    T KOPP       Updated version
"RTN","RORUTL11",38,0)
 ;
"RTN","RORUTL11",39,0)
 ;ROR*1.5*29   AUG 2016    T KOPP       Updated version
"RTN","RORUTL11",40,0)
 ;******************************************************************************
"RTN","RORUTL11",41,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",42,0)
 ;
"RTN","RORUTL11",43,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",44,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",45,0)
 ;         
"RTN","RORUTL11",46,0)
 ;******************************************************************************
"RTN","RORUTL11",47,0)
 Q
"RTN","RORUTL11",48,0)
 ;
"RTN","RORUTL11",49,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",50,0)
 ;
"RTN","RORUTL11",51,0)
 ; Return Values:
"RTN","RORUTL11",52,0)
 ;       <0  Error code
"RTN","RORUTL11",53,0)
 ;        0  Ok
"RTN","RORUTL11",54,0)
 ;
"RTN","RORUTL11",55,0)
RNDXACL() ;
"RTN","RORUTL11",56,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",57,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",58,0)
 S REGIEN=0
"RTN","RORUTL11",59,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",60,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",61,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",62,0)
 Q 0
"RTN","RORUTL11",63,0)
 ;
"RTN","RORUTL11",64,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",65,0)
 ;
"RTN","RORUTL11",66,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",67,0)
 ;
"RTN","RORUTL11",68,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",69,0)
 ;
"RTN","RORUTL11",70,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",71,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",72,0)
 ;                 I  IRM Only
"RTN","RORUTL11",73,0)
 ;
"RTN","RORUTL11",74,0)
 ; Return Values:
"RTN","RORUTL11",75,0)
 ;       <0  Error code
"RTN","RORUTL11",76,0)
 ;        0  Ok
"RTN","RORUTL11",77,0)
 ;       >0  Access denied
"RTN","RORUTL11",78,0)
 ;
"RTN","RORUTL11",79,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",80,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",81,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",82,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",83,0)
 ;---
"RTN","RORUTL11",84,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",85,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",86,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",87,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",88,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",89,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",90,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",91,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",92,0)
 . S ACCESS=1
"RTN","RORUTL11",93,0)
 ;---
"RTN","RORUTL11",94,0)
 D ACVIOLTN^RORLOG(-91,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",95,0)
 Q 1
"RTN","RORUTL11",96,0)
 ;
"RTN","RORUTL11",97,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",98,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",99,0)
 ;
"RTN","RORUTL11",100,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",101,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",102,0)
 ;been installed yet.
"RTN","RORUTL11",103,0)
 ;
"RTN","RORUTL11",104,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",105,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",106,0)
 ;
"RTN","RORUTL11",107,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",108,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",109,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",110,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",111,0)
 ;
"RTN","RORUTL11",112,0)
VERSRV(VAL) ;
"RTN","RORUTL11",113,0)
 S VAL="1.5.29"
"RTN","RORUTL11",114,0)
 Q
"RTN","RORUTL21")
0^9^B10076025^n/a
"RTN","RORUTL21",1,0)
RORUTL21 ;HCIOFO/BH,SG - VACCINATION DATA SEARCH ; 12/13/05 2:16pm
"RTN","RORUTL21",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29**;Feb 17, 2006;Build 18
"RTN","RORUTL21",3,0)
 ;
"RTN","RORUTL21",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL21",5,0)
 ; #10104   UP^XLFSTR (supported)
"RTN","RORUTL21",6,0)
 ; #5521   ^AUPNVIMM (private)
"RTN","RORUTL21",7,0)
 ; #2056    GETS^DIQ
"RTN","RORUTL21",8,0)
 ;
"RTN","RORUTL21",9,0)
 ;******************************************************************************
"RTN","RORUTL21",10,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL21",11,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL21",12,0)
 ;ROR*1.5*29   APR  2016   T KOPP       Added routine for immunization search.
"RTN","RORUTL21",13,0)
 ;******************************************************************************
"RTN","RORUTL21",14,0)
 Q
"RTN","RORUTL21",15,0)
 ;
"RTN","RORUTL21",16,0)
 ;***** QUERIES THE IMMUNIZATION DATA FOR SPECIFIC VACCINE NAME PATTERN MATCHES
"RTN","RORUTL21",17,0)
 ;
"RTN","RORUTL21",18,0)
 ; PATIEN        IEN of the patient (DFN)
"RTN","RORUTL21",19,0)
 ;
"RTN","RORUTL21",20,0)
 ; ROR8PAT      Closed root of a variable, which contains a list
"RTN","RORUTL21",21,0)
 ;               of pattern matches for names of vaccines of interest
"RTN","RORUTL21",22,0)
 ;               [in the format ROR(i)=pattern to match]
"RTN","RORUTL21",23,0)
 ;
"RTN","RORUTL21",24,0)
 ; [[.]ROR8DST]  Closed root of an array where the data will be
"RTN","RORUTL21",25,0)
 ;               returned (^TMP("RORUTL21",$J), by default).
"RTN","RORUTL21",26,0)
 ;               The data will be stored into the destination
"RTN","RORUTL21",27,0)
 ;               array in following format:
"RTN","RORUTL21",28,0)
 ;
"RTN","RORUTL21",29,0)
 ;                 @ROR8DST = number of vaccination records found
"RTN","RORUTL21",30,0)
 ;                    @ROR8DST@(i)  
"RTN","RORUTL21",31,0)
 ;                                 ^01: Vaccine Name
"RTN","RORUTL21",32,0)
 ;                                 ^02: Event Date
"RTN","RORUTL21",33,0)
 ;                             
"RTN","RORUTL21",34,0)
 ;               The function should return the following values:
"RTN","RORUTL21",35,0)
 ;
"RTN","RORUTL21",36,0)
 ;                 <0  Error code (the search will be aborted)
"RTN","RORUTL21",37,0)
 ;                  0 or greater = the # of matches found
"RTN","RORUTL21",38,0)
 ;
"RTN","RORUTL21",39,0)
 ;  RORVSDT      Start date (FileMan)
"RTN","RORUTL21",40,0)
 ; [RORVEDT]     End date   (FileMan)
"RTN","RORUTL21",41,0)
 ;
"RTN","RORUTL21",42,0)
QUERY(PATIEN,ROR8PAT,ROR8DST,RORVSDT,RORVEDT) ;
"RTN","RORUTL21",43,0)
 N DFN,RC,ROR1,RESULT
"RTN","RORUTL21",44,0)
 ;
"RTN","RORUTL21",45,0)
 S DFN=PATIEN
"RTN","RORUTL21",46,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORUTL21",$J))
"RTN","RORUTL21",47,0)
 Q:$G(ROR8PAT)="" -1               ; No vaccines to search for
"RTN","RORUTL21",48,0)
 ;---
"RTN","RORUTL21",49,0)
 S:$G(RORVEDT)'>0 RORVEDT=DT
"RTN","RORUTL21",50,0)
 S RC=0
"RTN","RORUTL21",51,0)
 ;
"RTN","RORUTL21",52,0)
 ;--- Look for vaccine data (immunizations)
"RTN","RORUTL21",53,0)
 S (ROR1,RESULT)=0
"RTN","RORUTL21",54,0)
 F  S ROR1=$O(^AUPNVIMM("C",DFN,ROR1)) Q:'ROR1  D
"RTN","RORUTL21",55,0)
 . N MATCH,RORIDATA,RORIERR,ROREVDT,RORVACNM,RORL,PATT,X,Y,Z
"RTN","RORUTL21",56,0)
 . ;get vaccine data   field #1201 = event date/time
"RTN","RORUTL21",57,0)
 . K RORIDATA,RORIERR D GETS^DIQ(9000010.11,ROR1_",",".01;.03;1201","IE","RORIDATA","RORIERR")
"RTN","RORUTL21",58,0)
 . Q:$D(RORIERR("DIERR"))
"RTN","RORUTL21",59,0)
 . S ROREVDT=$G(RORIDATA(9000010.11,ROR1_",",1201,"I")) ;get event date/time
"RTN","RORUTL21",60,0)
 . I 'ROREVDT D
"RTN","RORUTL21",61,0)
 .. N Z
"RTN","RORUTL21",62,0)
 .. S Z=$G(RORIDATA(9000010.11,ROR1_",",.03,"I")) ; if no event date, get the visit date
"RTN","RORUTL21",63,0)
 .. I Z'="" S ROREVDT=$P($G(^AUPNVSIT(Z,0)),U)
"RTN","RORUTL21",64,0)
 . Q:ROREVDT>(RORVEDT_.999999)  ;date/time past end date
"RTN","RORUTL21",65,0)
 . Q:ROREVDT<RORVSDT  ;date/time before start date
"RTN","RORUTL21",66,0)
 . S RORVACNM=$$UP^XLFSTR($G(RORIDATA(9000010.11,ROR1_",",.01,"E"))) ;get name of vaccine in all uppercase
"RTN","RORUTL21",67,0)
 . S RORL=0,MATCH=0
"RTN","RORUTL21",68,0)
 . F  S RORL=$O(@ROR8PAT@(RORL)) Q:'RORL  S PATT=$G(^(RORL)) I PATT'="" D  Q:MATCH
"RTN","RORUTL21",69,0)
 .. ; Check if vaccine name matches any of the pattern matches
"RTN","RORUTL21",70,0)
 .. I RORVACNM?@(PATT) S MATCH=1 D  Q
"RTN","RORUTL21",71,0)
 ... S RESULT=RESULT+1,@ROR8DST@(RESULT)=RORVACNM_U_ROREVDT
"RTN","RORUTL21",72,0)
 S @ROR8DST=RESULT,RC=RESULT
"RTN","RORUTL21",73,0)
 Q RC
"RTN","RORUTL21",74,0)
 ;
"RTN","RORUTL21",75,0)
 ; RORVLST      Closed root of a variable, which contains a list
"RTN","RORUTL21",76,0)
 ;               of vaccines matching search criteria
"RTN","RORUTL21",77,0)
 ;               [in the format RORVLST(i)=vaccine name^event date
"RTN","RORUTL21",78,0)
 ;
"RTN","RORUTL21",79,0)
 ; PATIEN        IEN of the patient (DFN)
"RTN","RORUTL21",80,0)
 ;
"RTN","RORUTL21",81,0)
 ; ROR8VLST      Closed root of an array where the data will be
"RTN","RORUTL21",82,0)
 ;               returned.
"RTN","RORUTL21",83,0)
 ;               The data will be stored into the destination
"RTN","RORUTL21",84,0)
 ;               array in following format:
"RTN","RORUTL21",85,0)
 ;
"RTN","RORUTL21",86,0)
 ;                 @ROR8VLST = # of vaccines found
"RTN","RORUTL21",87,0)
 ;                    @ROR8VLST@(Vaccine Name,Event Date) = null  
"RTN","RORUTL21",88,0)
 ;                             
"RTN","RORUTL21",89,0)
 ; The function should return the following values:
"RTN","RORUTL21",90,0)
 ;
"RTN","RORUTL21",91,0)
 ;        <0  Error
"RTN","RORUTL21",92,0)
 ;         0  OK
"RTN","RORUTL21",93,0)
 ;
"RTN","RORUTL21",94,0)
PROCESS(RORVLST,PATIEN,ROR8VLST) ; 
"RTN","RORUTL21",95,0)
 N CT,RC,ROR,RORNM,RORDT
"RTN","RORUTL21",96,0)
 S CT=0
"RTN","RORUTL21",97,0)
 S RC=-1,ROR=0 F  S ROR=$O(@RORVLST@(ROR)) Q:'ROR  D
"RTN","RORUTL21",98,0)
 . S RORNM=$P(@RORVLST@(ROR),U),RORDT=$P(@RORVLST@(ROR),U,2)
"RTN","RORUTL21",99,0)
 . I RORNM=""!(RORDT="") Q
"RTN","RORUTL21",100,0)
 . S @ROR8VLST@(RORNM,RORDT)="",RC=1,CT=CT+1
"RTN","RORUTL21",101,0)
 S @ROR8VLST=CT
"RTN","RORUTL21",102,0)
 Q RC
"RTN","RORUTL21",103,0)
 ;
"RTN","RORX024")
0^5^B71003457^n/a
"RTN","RORX024",1,0)
RORX024 ;ALB/TK,MAF - HEP A VACCINE OR IMMUNITY REPORT ; 27 Jul 2016  3:03 PM
"RTN","RORX024",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29**;Feb 17, 2006;Build 18
"RTN","RORX024",3,0)
 ;
"RTN","RORX024",4,0)
 ;******************************************************************************
"RTN","RORX024",5,0)
 ; This routine uses the following IAs:
"RTN","RORX024",6,0)
 ;
"RTN","RORX024",7,0)
 ; #10103 HL7TFM^XLFDT
"RTN","RORX024",8,0)
 ;
"RTN","RORX024",9,0)
 ;******************************************************************************
"RTN","RORX024",10,0)
 ;******************************************************************************
"RTN","RORX024",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX024",12,0)
 ;        
"RTN","RORX024",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX024",14,0)
 ;-----------  ----------  -----------  ---------------------------------------
"RTN","RORX024",15,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added 'Hep A vaccine or immunity report'
"RTN","RORX024",16,0)
 ;
"RTN","RORX024",17,0)
 ;******************************************************************************
"RTN","RORX024",18,0)
 ;******************************************************************************
"RTN","RORX024",19,0)
 ;
"RTN","RORX024",20,0)
 Q
"RTN","RORX024",21,0)
 ;
"RTN","RORX024",22,0)
 ;***** COMPILES THE "HEP A VACCINE OR IMMUNITY" REPORT
"RTN","RORX024",23,0)
 ; REPORT CODE: 024
"RTN","RORX024",24,0)
 ;
"RTN","RORX024",25,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX024",26,0)
 ;
"RTN","RORX024",27,0)
 ; The ^TMP("RORX024",$J) global node is used by this function.
"RTN","RORX024",28,0)
 ;
"RTN","RORX024",29,0)
 ; ^TMP("RORX024",$J,
"RTN","RORX024",30,0)
 ;   "PAT",
"RTN","RORX024",31,0)
 ;     DFN,              Patient descriptor
"RTN","RORX024",32,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX024",33,0)
 ;                         ^02: Patient name
"RTN","RORX024",34,0)
 ;                         ^03: Date of Death
"RTN","RORX024",35,0)
 ;                         ^04: ICN
"RTN","RORX024",36,0)
 ;       "IMM")          Result if positive test found or "" if no positive test found
"RTN","RORX024",37,0)
 ;                         ^01: Local lab test name
"RTN","RORX024",38,0)
 ;                         ^02: Collected date (FM)
"RTN","RORX024",39,0)
 ;                         ^03: Lab test result
"RTN","RORX024",40,0)
 ;       "VAC",           Number of results
"RTN","RORX024",41,0)
 ;                         ^01: #
"RTN","RORX024",42,0)
 ;           VaccineName, 
"RTN","RORX024",43,0)
 ;             VaccineDate) Always null if node exists
"RTN","RORX024",44,0)
 ;                         ^01: Null
"RTN","RORX024",45,0)
 ;
"RTN","RORX024",46,0)
 ; Return Values:
"RTN","RORX024",47,0)
 ;       <0  Error code
"RTN","RORX024",48,0)
 ;        0  Ok
"RTN","RORX024",49,0)
 ;
"RTN","RORX024",50,0)
HEPARPT(RORTSK) ;
"RTN","RORX024",51,0)
 N RORIMM        ; Immunity wanted mode (-1|0|1)  no|not selected|yes  (verified by lab test)
"RTN","RORX024",52,0)
 N RORVAC        ; Vaccination (-1|0|1)  not received|not selected|received  (verified by immunization record)
"RTN","RORX024",53,0)
 N RORREG        ; Registry IEN
"RTN","RORX024",54,0)
 N RORVEDT       ; Vaccination end date
"RTN","RORX024",55,0)
 N RORVSDT       ; Vaccination start date
"RTN","RORX024",56,0)
 N RORLEDT       ; Lab test/LOINC end date
"RTN","RORX024",57,0)
 N RORLSDT       ; Lab test/LOINC start date
"RTN","RORX024",58,0)
 N RORRTN        ; Routine to invoke for hep A processing
"RTN","RORX024",59,0)
 ;
"RTN","RORX024",60,0)
 N NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX024",61,0)
 S RC=0,RORRTN="RORX024"
"RTN","RORX024",62,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX024",63,0)
 ;--- Root node of the report
"RTN","RORX024",64,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX024",65,0)
 Q:REPORT<0 REPORT
"RTN","RORX024",66,0)
 ;
"RTN","RORX024",67,0)
 D
"RTN","RORX024",68,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX024",69,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX024",70,0)
 . S RORVAC=$$RPTMODE("HEPAVAC")        ; Vaccination option chosen
"RTN","RORX024",71,0)
 . S RORIMM=$$RPTMODE("HEPAIMM")        ; Immunity option chosen
"RTN","RORX024",72,0)
 . S RC=$$PARAMS(REPORT,.RORVSDT,.RORVEDT,.SFLAGS)  Q:RC<0
"RTN","RORX024",73,0)
 . ;--- Report header
"RTN","RORX024",74,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX024",75,0)
 . ;--- Query the registry
"RTN","RORX024",76,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX024",77,0)
 . S RC=$$QUERY^RORX024A(SFLAGS,.NSPT,RORRTN)
"RTN","RORX024",78,0)
 . I RC Q:RC<0
"RTN","RORX024",79,0)
 . ;--- Store the results
"RTN","RORX024",80,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX024",81,0)
 . S RC=$$STORE^RORX024A(REPORT,NSPT,RORRTN)
"RTN","RORX024",82,0)
 . I RC Q:RC<0
"RTN","RORX024",83,0)
 ;
"RTN","RORX024",84,0)
 ;--- Cleanup
"RTN","RORX024",85,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX024",86,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX024",87,0)
 ;
"RTN","RORX024",88,0)
  ;
"RTN","RORX024",89,0)
 ;
"RTN","RORX024",90,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX024",91,0)
 ;
"RTN","RORX024",92,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX024",93,0)
 ;
"RTN","RORX024",94,0)
 ; Return Values:
"RTN","RORX024",95,0)
 ;       <0  Error code
"RTN","RORX024",96,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX024",97,0)
 ;
"RTN","RORX024",98,0)
HEADER(PARTAG) ;
"RTN","RORX024",99,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN)
"RTN","RORX024",100,0)
 ;
"RTN","RORX024",101,0)
 N HEADER,LN,RC,CTAG,LTAG
"RTN","RORX024",102,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX024",103,0)
 Q:HEADER<0 HEADER
"RTN","RORX024",104,0)
 ;--- LOINC codes output
"RTN","RORX024",105,0)
 I $G(RORIMM) D
"RTN","RORX024",106,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX024",107,0)
 . S LN=0 F  S LN=$O(^TMP("RORX024",$J,"IMM","TYPE",LN)) Q:'LN  D
"RTN","RORX024",108,0)
 . . S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX024",109,0)
 . . D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE",^TMP("RORX024",$J,"IMM","TYPE",LN))
"RTN","RORX024",110,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX024",HEADER)
"RTN","RORX024",111,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX024",112,0)
 ;
"RTN","RORX024",113,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX024",114,0)
 ;
"RTN","RORX024",115,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX024",116,0)
 ;
"RTN","RORX024",117,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX024",118,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX024",119,0)
 ;
"RTN","RORX024",120,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX024",121,0)
 ;               returned via this parameter
"RTN","RORX024",122,0)
 ;
"RTN","RORX024",123,0)
 ; Return Values:
"RTN","RORX024",124,0)
 ;       <0  Error code
"RTN","RORX024",125,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX024",126,0)
 ;
"RTN","RORX024",127,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX024",128,0)
 N PARAMS,TMP
"RTN","RORX024",129,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,,,.FLAGS)
"RTN","RORX024",130,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX024",131,0)
 ;--- Process the list of Lab tests/LOINC codes
"RTN","RORX024",132,0)
 I $G(RORIMM) D
"RTN","RORX024",133,0)
 . D GETIMM("RORX024") ;extract the immunity criteria for HEP A
"RTN","RORX024",134,0)
 ;--- Process the list of vaccinations
"RTN","RORX024",135,0)
 I $G(RORVAC) D
"RTN","RORX024",136,0)
 . D GETVAC("RORX024") ;extract the vaccine criteria for HEP A
"RTN","RORX024",137,0)
 ;---
"RTN","RORX024",138,0)
 Q PARAMS
"RTN","RORX024",139,0)
 ;
"RTN","RORX024",140,0)
 ;
"RTN","RORX024",141,0)
 ; -- Extract immunity (lab) data for a patient
"RTN","RORX024",142,0)
 ;
"RTN","RORX024",143,0)
 ; PATIEN        IEN of the patient (DFN)
"RTN","RORX024",144,0)
 ;
"RTN","RORX024",145,0)
 ; RORLOINC      Closed root of a variable, which contains a list
"RTN","RORX024",146,0)
 ;               of LOINC codes for HEP A or HEPB in the format
"RTN","RORX024",147,0)
 ;                          @RORLOINC@("VALID",i,
"RTN","RORX024",148,0)
 ;                                          ^01: LOINC code
"RTN","RORX024",149,0)
 ;                                   @("PRIORITY",LOINC code,priority)=""
"RTN","RORX024",150,0)
 ;
"RTN","RORX024",151,0)
 ;                      HEPA priority [0 for Ab Total or 1 for IgG]
"RTN","RORX024",152,0)
 ;                      HEPB priority [0 for Surface AB or 1 for Core AB]
"RTN","RORX024",153,0)
 ;
"RTN","RORX024",154,0)
 ; RORLRES  Closed root of an array where the data will be
"RTN","RORX024",155,0)
 ;               returned.
"RTN","RORX024",156,0)
 ;               The data will be stored into the destination
"RTN","RORX024",157,0)
 ;               array in following format:
"RTN","RORX024",158,0)
 ;
"RTN","RORX024",159,0)
 ;                    @RORLRES
"RTN","RORX024",160,0)
 ;                                 ^01: Local lab test name
"RTN","RORX024",161,0)
 ;                                 ^02: Collected date (FM)
"RTN","RORX024",162,0)
 ;                                 ^03: Lab test result
"RTN","RORX024",163,0)
 ;                             
"RTN","RORX024",164,0)
 ;  LTSDT        Lab test start date (FileMan)
"RTN","RORX024",165,0)
 ;  LTEDT        Lab test end date   (FileMan)
"RTN","RORX024",166,0)
 ;
"RTN","RORX024",167,0)
 ;  The function should return the following values:
"RTN","RORX024",168,0)
 ;
"RTN","RORX024",169,0)
 ;        <0 Error code (the search will be aborted)
"RTN","RORX024",170,0)
 ;         0 No immunity found
"RTN","RORX024",171,0)
 ;         1 At least 1 immunity found
"RTN","RORX024",172,0)
 ;
"RTN","RORX024",173,0)
LAB(PATIEN,RORLOINC,RORLRES,LTSDT,LTEDT) ;
"RTN","RORX024",174,0)
 N RC1,DFN,RORID,RORENDT,RORSTDT,ROR1,RESDT,RESULT,RORLRC,RORLAB,RORMSG,Z,Z0
"RTN","RORX024",175,0)
 ;
"RTN","RORX024",176,0)
 S DFN=PATIEN
"RTN","RORX024",177,0)
 ;
"RTN","RORX024",178,0)
 ; Search for specific LOINC codes and positive results
"RTN","RORX024",179,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX024",180,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX024",181,0)
 ;---CALL LAB API---
"RTN","RORX024",182,0)
 M RORLRC=@RORLOINC@("VALID")
"RTN","RORX024",183,0)
 S RORLRC="CH,MI",RORLRES="",RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX024",184,0)
 S RC1=$$GCPR^LA7QRY(RORID,LTSDT,LTEDT,.RORLRC,"*",.RORMSG,RORLAB)
"RTN","RORX024",185,0)
 I RC1<0 Q -1
"RTN","RORX024",186,0)
 Q:$D(@RORLAB)<10 0
"RTN","RORX024",187,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX024",188,0)
 N FS,TMP,LOINC,RESULT,RORLTN,RORVAL,RORNODE,RORSEG,SEGTYPE,RORDATE,RORX,RORX1
"RTN","RORX024",189,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX024",190,0)
 S (RORNODE,RESULT)=0
"RTN","RORX024",191,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:RORNODE=""  D
"RTN","RORX024",192,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX024",193,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX024",194,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX024",195,0)
 . S LOINC=$P($P(RORSEG,FS,4),U,1) ;get LOINC code for test
"RTN","RORX024",196,0)
 . Q:$S(LOINC="":1,1:'$D(@RORLOINC@("PRIORITY",LOINC)))  ; Call to lab does not filter out unwanted LOINCs
"RTN","RORX024",197,0)
 . S RORLTN=$P($P($P(RORSEG,FS,4),U,9),FS) ;local test name
"RTN","RORX024",198,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX024",199,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX024",200,0)
 . Q:RORVAL=""  ;quit if no value
"RTN","RORX024",201,0)
 . ;Check if value meets the positive result criteria selected for immunity
"RTN","RORX024",202,0)
 . Q:'$$POS^RORX024A(RORVAL)
"RTN","RORX024",203,0)
 . S RORDATE=$$HL7TFM^XLFDT($E($P(RORSEG,FS,15),1,8)) ;get date collected
"RTN","RORX024",204,0)
 . ;S RORDATE=RORDATE\1
"RTN","RORX024",205,0)
 . ;Output the record into RORX by priority, date, LOINC Code if positive result
"RTN","RORX024",206,0)
 . S RORX(+$O(@RORLOINC@("PRIORITY",LOINC,0)),RORDATE,LOINC)=RORVAL_U_RORLTN
"RTN","RORX024",207,0)
 ; Find the result as the earliest date in priority 0 tests and if none, earliest in priority 1
"RTN","RORX024",208,0)
 F Z=1,2 S Z0=$O(RORX(Z,0)) I Z0 D  Q:RESULT
"RTN","RORX024",209,0)
 . S RORX1=$O(RORX(Z,Z0,0))
"RTN","RORX024",210,0)
 . Q:RORX1=""
"RTN","RORX024",211,0)
 . S RESULT=1,RORLRES=$P(RORX(Z,Z0,RORX1),U,2)_U_Z0_U_$P(RORX(Z,Z0,RORX1),U)
"RTN","RORX024",212,0)
 K @RORLAB
"RTN","RORX024",213,0)
 Q RESULT
"RTN","RORX024",214,0)
 ;
"RTN","RORX024",215,0)
 ;***** DETERMINES THE REPORT MODE FOR IMMUNITY OR VACCINATION
"RTN","RORX024",216,0)
 ;
"RTN","RORX024",217,0)
 ; NAME          Base name of the attribute ("HEPAIMM" or "HEPAVAC")
"RTN","RORX024",218,0)
 ;                                    OR    ("HEPBIMM" or "HEPBVAC")
"RTN","RORX024",219,0)
 ; Return Values:
"RTN","RORX024",220,0)
 ;       <0  "No"
"RTN","RORX024",221,0)
 ;        0  Not selected
"RTN","RORX024",222,0)
 ;       >0  "Yes"
"RTN","RORX024",223,0)
 ;
"RTN","RORX024",224,0)
RPTMODE(NAME) ;
"RTN","RORX024",225,0)
 Q:$$PARAM^RORTSK01("PATIENTS",NAME) 1        ; "Yes"
"RTN","RORX024",226,0)
 Q:$$PARAM^RORTSK01("PATIENTS","NO"_NAME) -1  ; "No"
"RTN","RORX024",227,0)
 Q 0
"RTN","RORX024",228,0)
 ;
"RTN","RORX024",229,0)
 ; ******* EXTRACT LOINC CODES FOR IMMUNITY ********
"RTN","RORX024",230,0)
 ; RORRTN = the name of the report routine where the IMMUNITY data should be extracted from
"RTN","RORX024",231,0)
 ;
"RTN","RORX024",232,0)
 ; Returns ^TMP(RORRTN,$J,"IMM","VALID",n)=LOINC code^LN     and
"RTN","RORX024",233,0)
 ;         ^TMP(RORRTN,$J,"IMM","PRIORITY",LOINC code,[0 for Total Ab or 1 for IgG])=""
"RTN","RORX024",234,0)
 ;         ^TMP(RORRTN,$J,"IMM","TYPE",n)=Type of LOINC: list of LOINC codes for type    (used for header output)
"RTN","RORX024",235,0)
 ;         
"RTN","RORX024",236,0)
 ;
"RTN","RORX024",237,0)
GETIMM(RORRTN) ;
"RTN","RORX024",238,0)
 N RORDATA,RORI,RORI1,COM,CT,Z
"RTN","RORX024",239,0)
 K ^TMP(RORRTN,$J,"IMM")
"RTN","RORX024",240,0)
 ;
"RTN","RORX024",241,0)
 I $E(RORRTN)=U S RORRTN=$P(RORRTN,U,2)
"RTN","RORX024",242,0)
 S CT=0
"RTN","RORX024",243,0)
 F RORI=1:1 S RORDATA=$P($T(@("IMMUNITY+"_RORI_U_RORRTN)),";;",2) Q:RORDATA=""  D
"RTN","RORX024",244,0)
 . S ^TMP(RORRTN,$J,"IMM","TYPE",RORI)=$P(RORDATA,U)_": ",COM=0
"RTN","RORX024",245,0)
 . F RORI1=2:1 S Z=$P(RORDATA,U,RORI1) Q:Z=""  D
"RTN","RORX024",246,0)
 . . S CT=CT+1,^TMP(RORRTN,$J,"IMM","VALID",CT)=Z_"^LN"
"RTN","RORX024",247,0)
 . . S ^TMP(RORRTN,$J,"IMM","PRIORITY",Z,RORI)=""
"RTN","RORX024",248,0)
 . . S ^TMP(RORRTN,$J,"IMM","TYPE",RORI)=^TMP(RORRTN,$J,"IMM","TYPE",RORI)_$S('COM:"",1:";")_Z,COM=1
"RTN","RORX024",249,0)
 ;
"RTN","RORX024",250,0)
 Q
"RTN","RORX024",251,0)
 ;
"RTN","RORX024",252,0)
 ; --  LOINC codes to check for HEP A immunity
"RTN","RORX024",253,0)
IMMUNITY ; List of LOINC codes indicating HEP A immunity results by type Line +1 = Total AB (priority), Line +2 = IgG
"RTN","RORX024",254,0)
 ;;Hepatitis A Ab Total^20575-7^13951-9^22312-3^5183-9^5184-7
"RTN","RORX024",255,0)
 ;;Hepatitis A IgG^32018-4^22313-1^5179-7
"RTN","RORX024",256,0)
 ;;
"RTN","RORX024",257,0)
 Q
"RTN","RORX024",258,0)
 ; ******* EXTRACT VACCINE NAMES ********
"RTN","RORX024",259,0)
 ; RORRTN = the name of the report routine where the IMMUNITY data should be extracted from
"RTN","RORX024",260,0)
 ;
"RTN","RORX024",261,0)
 ; Returns ^TMP(RORRTN,$J,"VAC",seq #)=pattern to match
"RTN","RORX024",262,0)
 ;
"RTN","RORX024",263,0)
GETVAC(RORRTN) ;  Extract pertinent vaccine names to match
"RTN","RORX024",264,0)
 N CT,CHAR,QUOTE,POS,RORDATA,RORI,RORI1,RESULT,VACNM,Z
"RTN","RORX024",265,0)
 ;
"RTN","RORX024",266,0)
 I $E(RORRTN="^") S RORRTN=$P(RORRTN,U,2)
"RTN","RORX024",267,0)
 S CT=0
"RTN","RORX024",268,0)
 F RORI=1:1 S RORDATA=$P($T(@("VACCINE+"_RORI_U_RORRTN)),";;",2) Q:RORDATA=""  D
"RTN","RORX024",269,0)
 . F RORI1=1:1 S VACNM=$P(RORDATA,U,RORI1) Q:VACNM=""  D
"RTN","RORX024",270,0)
 .. S RESULT=""
"RTN","RORX024",271,0)
 .. ; determine pattern
"RTN","RORX024",272,0)
 .. S QUOTE=0
"RTN","RORX024",273,0)
 .. F POS=1:1:$L(VACNM) S CHAR=$E(VACNM,POS) D
"RTN","RORX024",274,0)
 ... I POS=1,CHAR="%" S RESULT=".E" Q
"RTN","RORX024",275,0)
 ... I CHAR'="%" S RESULT=RESULT_$S('QUOTE:"1""",1:"")_CHAR,QUOTE=1 Q
"RTN","RORX024",276,0)
 ... I CHAR="%" D
"RTN","RORX024",277,0)
 .... I QUOTE S RESULT=RESULT_""""
"RTN","RORX024",278,0)
 .... S RESULT=RESULT_".E",QUOTE=0
"RTN","RORX024",279,0)
 .. I RESULT'="",QUOTE S RESULT=RESULT_""""
"RTN","RORX024",280,0)
 .. S CT=CT+1,^TMP(RORRTN,$J,"VAC",CT)=RESULT
"RTN","RORX024",281,0)
 ;
"RTN","RORX024",282,0)
 Q
"RTN","RORX024",283,0)
 ;
"RTN","RORX024",284,0)
 ; -- List of vaccines to include
"RTN","RORX024",285,0)
 ;  Business owner also requested (HEPATITIS A&B%, HEPATITIS A/B, HEPATITIS AB) that are the same as %HEPATITIS A%
"RTN","RORX024",286,0)
 ;                                (HEP A/HEP B%, HEP A&B, HEP A/HEP B) that are the same as HEP A%
"RTN","RORX024",287,0)
VACCINE ;  Hepatitis A vaccine names (% = wild card)
"RTN","RORX024",288,0)
 ;;HEP A%^%HEPATITIS A%^HEPATITIS-A%^HEPAADULT^HEPAADLT1^HEPA,%^HEPA/HEPB%^%HEP A/B%^HEPAB%^TWINRIX%
"RTN","RORX024",289,0)
 ;;
"RTN","RORX024",290,0)
 Q
"RTN","RORX024",291,0)
 ;
"RTN","RORX024A")
0^6^B72187457^n/a
"RTN","RORX024A",1,0)
RORX024A ;ALB/TK,MAF - HEP A/B VACCINE/IMMUNITY REPORTS (QUERY & STORE) ; 27 Jul 2016  3:04 PM
"RTN","RORX024A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29**;Feb 17, 2006;Build 18
"RTN","RORX024A",3,0)
 ;
"RTN","RORX024A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX024A",5,0)
 ;
"RTN","RORX024A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX024A",7,0)
 ; #2051  FIND1^DIC
"RTN","RORX024A",8,0)
 ;   
"RTN","RORX024A",9,0)
 ;******************************************************************************
"RTN","RORX024A",10,0)
 ;******************************************************************************
"RTN","RORX024A",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX024A",12,0)
 ;        
"RTN","RORX024A",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX024A",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX024A",15,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added for Hep A/B vaccine/immunity reports
"RTN","RORX024A",16,0)
 ;
"RTN","RORX024A",17,0)
 ;******************************************************************************
"RTN","RORX024A",18,0)
 ;******************************************************************************
"RTN","RORX024A",19,0)
 Q
"RTN","RORX024A",20,0)
 ;
"RTN","RORX024A",21,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX024A",22,0)
 ;
"RTN","RORX024A",23,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX024A",24,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX024A",25,0)
 ; RORRTN        Routine name for Hep A (RORX024) or Hep B (RORX025) report
"RTN","RORX024A",26,0)
 ;
"RTN","RORX024A",27,0)
 ; Return Values:
"RTN","RORX024A",28,0)
 ;       <0  Error code
"RTN","RORX024A",29,0)
 ;        0  Ok
"RTN","RORX024A",30,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX024A",31,0)
 ;
"RTN","RORX024A",32,0)
QUERY(FLAGS,NSPT,RORRTN) ;
"RTN","RORX024A",33,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX024A",34,0)
 N RORVSDT       ; Vaccination search start date
"RTN","RORX024A",35,0)
 N RORVEDT       ; Vaccination search end date
"RTN","RORX024A",36,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX024A",37,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX024A",38,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX024A",39,0)
 N RORICN        ; National ICN
"RTN","RORX024A",40,0)
 ;
"RTN","RORX024A",41,0)
 S:$G(RORRTN)="" RORRTN="RORX024"
"RTN","RORX024A",42,0)
 N CNT,IEN,IENS,LTEDT,LTSDT,RORHEPB,PATIEN,RC,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX024A",43,0)
 N RCC,FLAG
"RTN","RORX024A",44,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX024A",45,0)
 S (CNT,NSPT,RC,SKIPEDT,SKIPSDT)=0
"RTN","RORX024A",46,0)
 ;--- Utilization date range
"RTN","RORX024A",47,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX024A",48,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX024A",49,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX024A",50,0)
 . ;--- Combined date range
"RTN","RORX024A",51,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX024A",52,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX024A",53,0)
 ;--- Number of patients in the registry
"RTN","RORX024A",54,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX024A",55,0)
 ;
"RTN","RORX024A",56,0)
 ;--- Setup the immunity and vaccination parameters
"RTN","RORX024A",57,0)
 I RORIMM  D
"RTN","RORX024A",58,0)
 . ;--- Lab/LOINC codes date range
"RTN","RORX024A",59,0)
 . S LTSDT=$$PARAM^RORTSK01("DATE_RANGE_7","START")\1
"RTN","RORX024A",60,0)
 . S LTEDT=$$PARAM^RORTSK01("DATE_RANGE_7","END")\1
"RTN","RORX024A",61,0)
 . ;--- Combined date range
"RTN","RORX024A",62,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,LTSDT)
"RTN","RORX024A",63,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,LTEDT)
"RTN","RORX024A",64,0)
 . ;--- Shift the Labs end date
"RTN","RORX024A",65,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX024A",66,0)
 I RORVAC  D
"RTN","RORX024A",67,0)
 . S RORVSDT=$$PARAM^RORTSK01("DATE_RANGE_6","START")\1
"RTN","RORX024A",68,0)
 . S RORVEDT=$$PARAM^RORTSK01("DATE_RANGE_6","END")\1
"RTN","RORX024A",69,0)
 . ;--- Combined date range
"RTN","RORX024A",70,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,RORVSDT)
"RTN","RORX024A",71,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,RORVEDT)
"RTN","RORX024A",72,0)
 . ;--- Shift the vaccine end date
"RTN","RORX024A",73,0)
 . S RORVEDT=$$FMADD^XLFDT(RORVEDT\1,1)
"RTN","RORX024A",74,0)
 Q:'(RORIMM!RORVAC) 0
"RTN","RORX024A",75,0)
 ;
"RTN","RORX024A",76,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX024A",77,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX024A",78,0)
 ;
"RTN","RORX024A",79,0)
 S RORHEPB=$S(RORRTN'="RORX024":"",1:$$FIND1^DIC(798.1,,"BQX","VA HEPB"))
"RTN","RORX024A",80,0)
 ;--- Browse through the registry records
"RTN","RORX024A",81,0)
 S IEN=0
"RTN","RORX024A",82,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX024A",83,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX024A",84,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX024A",85,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX024A",86,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX024A",87,0)
 . ; Ignore patients in Hep B registry if Hep B report
"RTN","RORX024A",88,0)
 . I RORHEPB'="" Q:$D(^RORDATA(798,"AC",+RORHEPB,+IEN))
"RTN","RORX024A",89,0)
 . ;--- Get patient DFN
"RTN","RORX024A",90,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX024A",91,0)
 . ;check for patient list and quit if not on list
"RTN","RORX024A",92,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX024A",93,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX024A",94,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX024A",95,0)
 . S SKIP=1,UTIL=0
"RTN","RORX024A",96,0)
 . ;--- Check if patient should be filtered because of ICD codes
"RTN","RORX024A",97,0)
 . S RCC=0
"RTN","RORX024A",98,0)
 . I FLAG'="ALL" D
"RTN","RORX024A",99,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX024A",100,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX024A",101,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX024A",102,0)
 . ;
"RTN","RORX024A",103,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX024A",104,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX024A",105,0)
 . ;
"RTN","RORX024A",106,0)
 . S RCC=0,SKIP=1
"RTN","RORX024A",107,0)
 . D
"RTN","RORX024A",108,0)
 . . ;--- Search for vaccination data in IMMUNIZATIONS file
"RTN","RORX024A",109,0)
 . . I RORVAC D  Q:RCC<0
"RTN","RORX024A",110,0)
 . . . N VAC,ROR8PAT,ROR8LST,RORVRES
"RTN","RORX024A",111,0)
 . . . S ROR8PAT=$NA(^TMP(RORRTN,$J,"VAC"))
"RTN","RORX024A",112,0)
 . . . S RORVRES=$NA(^TMP(RORRTN,$J,"VAC_RES")) K @RORVRES
"RTN","RORX024A",113,0)
 . . . S VAC=$$QUERY^RORUTL21(PATIEN,ROR8PAT,RORVRES,RORVSDT,RORVEDT)
"RTN","RORX024A",114,0)
 . . . I VAC<0 S RCC=-1 Q
"RTN","RORX024A",115,0)
 . . . I RORVAC<0,'VAC S ^TMP(RORRTN,$J,"PAT",PATIEN,"VAC")=0 Q     ; No vaccination requested and none found 
"RTN","RORX024A",116,0)
 . . . I RORVAC>0,VAC D  Q   ; Vaccination requested, at least one found
"RTN","RORX024A",117,0)
 . . . . S ROR8LST=$NA(^TMP(RORRTN,$J,"PAT",PATIEN,"VAC"))
"RTN","RORX024A",118,0)
 . . . . S RCC=$$PROCESS^RORUTL21(RORVRES,PATIEN,ROR8LST)
"RTN","RORX024A",119,0)
 . . . . K @RORVRES
"RTN","RORX024A",120,0)
 . . . . Q:RCC<0
"RTN","RORX024A",121,0)
 . . . S RCC=-1  ;does not pass vaccination selection criteria validation
"RTN","RORX024A",122,0)
 . . ;
"RTN","RORX024A",123,0)
 . . ;--- Search for lab data positive results for selected LOINC codes
"RTN","RORX024A",124,0)
 . . I RORIMM D  Q:RCC<0
"RTN","RORX024A",125,0)
 . . . N IMM,ROR8LST,RORLOINC,RORLRES
"RTN","RORX024A",126,0)
 . . . S RORLOINC=$NA(^TMP(RORRTN,$J,"IMM"))
"RTN","RORX024A",127,0)
 . . . ; Extract positive lab test results for selected LOINC codes
"RTN","RORX024A",128,0)
 . . . S IMM=$$LAB^RORX024(PATIEN,RORLOINC,.RORLRES,LTSDT,LTEDT)
"RTN","RORX024A",129,0)
 . . . I IMM<0 S RCC=-1 Q
"RTN","RORX024A",130,0)
 . . . I RORIMM<0,'IMM D  Q     ; No immunity requested and no positive test found
"RTN","RORX024A",131,0)
 . . . . S ^TMP(RORRTN,$J,"PAT",PATIEN,"IMM")=""
"RTN","RORX024A",132,0)
 . . . I RORIMM>0,IMM D  Q   ; Immunity requested, at least one positive lab test found
"RTN","RORX024A",133,0)
 . . . . S ^TMP(RORRTN,$J,"PAT",PATIEN,"IMM")=RORLRES
"RTN","RORX024A",134,0)
 . . . S RCC=-1  ;does not pass immunity selection criteria validation
"RTN","RORX024A",135,0)
 . . S SKIP=0
"RTN","RORX024A",136,0)
 . ;
"RTN","RORX024A",137,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX024A",138,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX024A",139,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX024A",140,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX024A",141,0)
 . . S:'UTIL SKIP=1
"RTN","RORX024A",142,0)
 . ;
"RTN","RORX024A",143,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX024A",144,0)
 . I SKIP K ^TMP(RORRTN,$J,"PAT",PATIEN) Q
"RTN","RORX024A",145,0)
 . ;
"RTN","RORX024A",146,0)
 . ;--- Get and store the patient's data
"RTN","RORX024A",147,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX024A",148,0)
 . S RORICN=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX024A",149,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX024A",150,0)
 . S ^TMP(RORRTN,$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP_U_RORICN
"RTN","RORX024A",151,0)
 . S NSPT=NSPT+1
"RTN","RORX024A",152,0)
 ;
"RTN","RORX024A",153,0)
 ;---
"RTN","RORX024A",154,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX024A",155,0)
 ;
"RTN","RORX024A",156,0)
POS(VAL) ; Returns 1 if lab test returns positive result (VAL)
"RTN","RORX024A",157,0)
 ;Positive results are results that are equal to "P" or contain "POS", "DETEC" or "REACT"
"RTN","RORX024A",158,0)
 ;         -- AND -- do not contain "NEG", "NO" or "IND." 
"RTN","RORX024A",159,0)
 N POS
"RTN","RORX024A",160,0)
 S POS=0
"RTN","RORX024A",161,0)
 I VAL="P"!(VAL["POS")!(VAL["DETEC")!(VAL["REACT") D
"RTN","RORX024A",162,0)
 . I '(VAL["NEG"!(VAL["NO")!(VAL["IND.")) S POS=1
"RTN","RORX024A",163,0)
 Q POS
"RTN","RORX024A",164,0)
 ;
"RTN","RORX024A",165,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX024A",166,0)
 ;
"RTN","RORX024A",167,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX024A",168,0)
 ; [.]NSPT       # of patients in registry
"RTN","RORX024A",169,0)
 ;
"RTN","RORX024A",170,0)
 ; Return Values:
"RTN","RORX024A",171,0)
 ;       <0  Error code
"RTN","RORX024A",172,0)
 ;        0  Ok
"RTN","RORX024A",173,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX024A",174,0)
 ;
"RTN","RORX024A",175,0)
 ;
"RTN","RORX024A",176,0)
STORE(REPORT,NSPT,RORRTN) ;
"RTN","RORX024A",177,0)
 N CNT,DFN,DOD,ICN,ITEM,LAST4,NAME,NODE,PTCNT,PTLST,PTNAME,RC,VDATE,TMP,VAL,LTIMM,IMMLST,VACLST,VLST
"RTN","RORX024A",178,0)
 S RC=0,PTLST=-1
"RTN","RORX024A",179,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX024A",180,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX024A",181,0)
 ;--- Create patient list
"RTN","RORX024A",182,0)
 S PTLST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX024A",183,0)
 D ADDATTR^RORTSK11(RORTSK,PTLST,"TABLE","PATIENTS")
"RTN","RORX024A",184,0)
 ;---
"RTN","RORX024A",185,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX024A",186,0)
 F  S DFN=$O(^TMP(RORRTN,$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX024A",187,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX024A",188,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX024A",189,0)
 . S CNT=CNT+1,NODE=$NA(^TMP(RORRTN,$J,"PAT",DFN))
"RTN","RORX024A",190,0)
 . ;--- Patient's data
"RTN","RORX024A",191,0)
 . S TMP=$G(@NODE)
"RTN","RORX024A",192,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DOD=$P(TMP,U,3),ICN=$P(TMP,U,4)
"RTN","RORX024A",193,0)
 . ;--- Patient list
"RTN","RORX024A",194,0)
 . S TMP=$S('RORIMM:1,RORIMM<0:$G(@NODE@("IMM"))="",1:$G(@NODE@("IMM"))'="")
"RTN","RORX024A",195,0)
 . I TMP,$S('RORVAC:1,RORVAC<0:'$G(@NODE@("VAC")),1:$G(@NODE@("VAC"))) D
"RTN","RORX024A",196,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLST,,DFN)
"RTN","RORX024A",197,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX024A",198,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX024A",199,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX024A",200,0)
 . . S PTCNT=PTCNT+1
"RTN","RORX024A",201,0)
 . ;--- List of vaccines
"RTN","RORX024A",202,0)
 . S VACLST=-1
"RTN","RORX024A",203,0)
 . I $O(@NODE@("VAC",""))'="" S VACLST=$$ADDVAL^RORTSK11(RORTSK,"VACCINES",,ITEM) Q:VACLST<0
"RTN","RORX024A",204,0)
 . I RORVAC=1,VACLST'<0 S NAME="" F  S NAME=$O(@NODE@("VAC",NAME)) Q:NAME=""  D
"RTN","RORX024A",205,0)
 . . S VLST=$$ADDVAL^RORTSK11(RORTSK,"VACCINE",,VACLST)
"RTN","RORX024A",206,0)
 . . Q:VLST<0
"RTN","RORX024A",207,0)
 . . S VDATE=0
"RTN","RORX024A",208,0)
 . . F  S VDATE=$O(@NODE@("VAC",NAME,VDATE))  Q:'VDATE  D
"RTN","RORX024A",209,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"VAC_NAME",NAME,VLST,1)
"RTN","RORX024A",210,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"VAC_DATE",VDATE\1,VLST,1)
"RTN","RORX024A",211,0)
 . ;--- Immunity
"RTN","RORX024A",212,0)
 . I RORIMM=1,$G(@NODE@("IMM"))'="" D
"RTN","RORX024A",213,0)
 . . S IMMLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,ITEM) Q:IMMLST<0
"RTN","RORX024A",214,0)
 . . S LTIMM=$G(@NODE@("IMM"))
"RTN","RORX024A",215,0)
 . . Q:LTIMM=""
"RTN","RORX024A",216,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",$P(LTIMM,U),IMMLST,1)
"RTN","RORX024A",217,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DATE",$P(LTIMM,U,2)\1,IMMLST,1)
"RTN","RORX024A",218,0)
 . . S VAL=$P(LTIMM,U,3)
"RTN","RORX024A",219,0)
 . . S TMP=$S($$NUMERIC^RORUTL05(VAL):3,1:1)
"RTN","RORX024A",220,0)
 . . D ADDVAL^RORTSK11(RORTSK,"RESULT",VAL,IMMLST,TMP)
"RTN","RORX024A",221,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX024A",222,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX024A",223,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX024A",224,0)
 ;---
"RTN","RORX024A",225,0)
 Q 0
"RTN","RORX024A",226,0)
 ;
"RTN","RORX025")
0^7^B19022640^n/a
"RTN","RORX025",1,0)
RORX025 ;ALB/TK,MAF - HEP B VACCINE OR IMMUNITY REPORT ;4/21/16 9:40am
"RTN","RORX025",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29**;Feb 17, 2006;Build 18
"RTN","RORX025",3,0)
 ;
"RTN","RORX025",4,0)
 ;******************************************************************************
"RTN","RORX025",5,0)
 ;******************************************************************************
"RTN","RORX025",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX025",7,0)
 ;        
"RTN","RORX025",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX025",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX025",10,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added 'Hep B vaccine or immunity report'
"RTN","RORX025",11,0)
 ;
"RTN","RORX025",12,0)
 ;******************************************************************************
"RTN","RORX025",13,0)
 ;******************************************************************************
"RTN","RORX025",14,0)
 ;
"RTN","RORX025",15,0)
 ;***** COMPILES THE "HEP B VACCINE OR IMMUNITY" REPORT
"RTN","RORX025",16,0)
 ; REPORT CODE: 025
"RTN","RORX025",17,0)
 ;
"RTN","RORX025",18,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX025",19,0)
 ;
"RTN","RORX025",20,0)
 ; The ^TMP("RORX025",$J) global node is used by this function.
"RTN","RORX025",21,0)
 ;
"RTN","RORX025",22,0)
 ; ^TMP("RORX025",$J,
"RTN","RORX025",23,0)
 ;   "PAT",
"RTN","RORX025",24,0)
 ;     DFN,              Patient descriptor
"RTN","RORX025",25,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX025",26,0)
 ;                         ^02: Patient name
"RTN","RORX025",27,0)
 ;                         ^03: Date of Death
"RTN","RORX025",28,0)
 ;                         ^04: ICN
"RTN","RORX025",29,0)
 ;       "IMM")          Result if positive test found or "" if no positive test found
"RTN","RORX025",30,0)
 ;                         ^01: Local lab test name
"RTN","RORX025",31,0)
 ;                         ^02: Collected date (FM)
"RTN","RORX025",32,0)
 ;                         ^03: Lab test result
"RTN","RORX025",33,0)
 ;       "VAC",           Number of results
"RTN","RORX025",34,0)
 ;                         ^01: #
"RTN","RORX025",35,0)
 ;           VaccineName, 
"RTN","RORX025",36,0)
 ;             VaccineDate) Always null if node exists
"RTN","RORX025",37,0)
 ;                         ^01: Null
"RTN","RORX025",38,0)
 ;
"RTN","RORX025",39,0)
 ; Return Values:
"RTN","RORX025",40,0)
 ;       <0  Error code
"RTN","RORX025",41,0)
 ;        0  Ok
"RTN","RORX025",42,0)
 ;
"RTN","RORX025",43,0)
HEPBRPT(RORTSK) ;
"RTN","RORX025",44,0)
 N RORIMM        ; Immunity wanted mode (-1|0|1)  no|not selected|yes  (verified by lab test)
"RTN","RORX025",45,0)
 N RORVAC        ; Vaccination (-1|0|1)  not received|not selected|received  (verified by immunization record)
"RTN","RORX025",46,0)
 N RORREG        ; Registry IEN
"RTN","RORX025",47,0)
 N RORVEDT       ; Vaccination end date
"RTN","RORX025",48,0)
 N RORVSDT       ; Vaccination start date
"RTN","RORX025",49,0)
 N RORLEDT       ; Lab test/LOINC end date
"RTN","RORX025",50,0)
 N RORLSDT       ; Lab test/LOINC start date
"RTN","RORX025",51,0)
 N RORRTN        ; Routine to invoke for hep B processing
"RTN","RORX025",52,0)
 ;
"RTN","RORX025",53,0)
 N NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX025",54,0)
 S RC=0,RORRTN="RORX025"
"RTN","RORX025",55,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX025",56,0)
 ;--- Root node of the report
"RTN","RORX025",57,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX025",58,0)
 Q:REPORT<0 REPORT
"RTN","RORX025",59,0)
 ;
"RTN","RORX025",60,0)
 D
"RTN","RORX025",61,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX025",62,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX025",63,0)
 . S RORVAC=$$RPTMODE^RORX024("HEPBVAC")        ; Vaccination option chosen
"RTN","RORX025",64,0)
 . S RORIMM=$$RPTMODE^RORX024("HEPBIMM")        ; Immunity option chosen
"RTN","RORX025",65,0)
 . S RC=$$PARAMS(REPORT,.RORVSDT,.RORVEDT,.SFLAGS)  Q:RC<0
"RTN","RORX025",66,0)
 . ;--- Report header
"RTN","RORX025",67,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX025",68,0)
 . ;--- Query the registry
"RTN","RORX025",69,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX025",70,0)
 . S RC=$$QUERY^RORX024A(SFLAGS,.NSPT,RORRTN)
"RTN","RORX025",71,0)
 . I RC Q:RC<0
"RTN","RORX025",72,0)
 . ;--- Store the results
"RTN","RORX025",73,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX025",74,0)
 . S RC=$$STORE^RORX024A(REPORT,NSPT,RORRTN)
"RTN","RORX025",75,0)
 . I RC Q:RC<0
"RTN","RORX025",76,0)
 ;
"RTN","RORX025",77,0)
 ;--- Cleanup
"RTN","RORX025",78,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX025",79,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX025",80,0)
 ;
"RTN","RORX025",81,0)
 ;
"RTN","RORX025",82,0)
 ;
"RTN","RORX025",83,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX025",84,0)
 ;
"RTN","RORX025",85,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX025",86,0)
 ;
"RTN","RORX025",87,0)
 ; Return Values:
"RTN","RORX025",88,0)
 ;       <0  Error code
"RTN","RORX025",89,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX025",90,0)
 ;
"RTN","RORX025",91,0)
HEADER(PARTAG) ;
"RTN","RORX025",92,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN)
"RTN","RORX025",93,0)
 ;
"RTN","RORX025",94,0)
 N HEADER,LN,RC,CTAG,LTAG
"RTN","RORX025",95,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX025",96,0)
 Q:HEADER<0 HEADER
"RTN","RORX025",97,0)
 ;--- LOINC codes output
"RTN","RORX025",98,0)
 I $G(RORIMM) D
"RTN","RORX025",99,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX025",100,0)
 . S LN=0 F  S LN=$O(^TMP("RORX025",$J,"IMM","TYPE",LN)) Q:'LN  D
"RTN","RORX025",101,0)
 . . S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX025",102,0)
 . . D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE",^TMP("RORX025",$J,"IMM","TYPE",LN))
"RTN","RORX025",103,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX025",HEADER)
"RTN","RORX025",104,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX025",105,0)
 ;
"RTN","RORX025",106,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX025",107,0)
 ;
"RTN","RORX025",108,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX025",109,0)
 ;
"RTN","RORX025",110,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX025",111,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX025",112,0)
 ;
"RTN","RORX025",113,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX025",114,0)
 ;               returned via this parameter
"RTN","RORX025",115,0)
 ;
"RTN","RORX025",116,0)
 ; Return Values:
"RTN","RORX025",117,0)
 ;       <0  Error code
"RTN","RORX025",118,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX025",119,0)
 ;
"RTN","RORX025",120,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX025",121,0)
 N PARAMS,TMP
"RTN","RORX025",122,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,,,.FLAGS)
"RTN","RORX025",123,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX025",124,0)
 ;--- Process the list of Lab tests/LOINC codes
"RTN","RORX025",125,0)
 I $G(RORIMM) D
"RTN","RORX025",126,0)
 . D GETIMM^RORX024("RORX025") ;extract the immunity criteria for HEP B
"RTN","RORX025",127,0)
 ;--- Process the list of vaccinations
"RTN","RORX025",128,0)
 I $G(RORVAC) D
"RTN","RORX025",129,0)
 . D GETVAC^RORX024("RORX025") ;extract the vaccine criteria for HEP B
"RTN","RORX025",130,0)
 ;---
"RTN","RORX025",131,0)
 Q PARAMS
"RTN","RORX025",132,0)
 ;
"RTN","RORX025",133,0)
 ; --  LOINC codes to check for HEP B immunity
"RTN","RORX025",134,0)
IMMUNITY ; LOINC codes indicating HEP B immunity results by type Line +1 = Surface AB (priority), Line +2 = Core AB
"RTN","RORX025",135,0)
 ;;Surface AB^22322-2^10900-9^16935-9^5193-8^5194-6^22323-0^32019-2
"RTN","RORX025",136,0)
 ;;Core AB^32685-0^22318-0^13919-6^16933-4^13952-7^22316-4^5187-0^5188-8^22317-2^21005-4
"RTN","RORX025",137,0)
 ;;
"RTN","RORX025",138,0)
 Q
"RTN","RORX025",139,0)
 ;
"RTN","RORX025",140,0)
 ; -- List of Hep B vaccines to include
"RTN","RORX025",141,0)
VACCINE ;  Hepatitis B vaccine names (% = wild card)
"RTN","RORX025",142,0)
 ;;%ENGERIX-B%^%HEP B%^%HEPATITIS B%^HEPATITIS-B%^HEPB%^HEP A&B^HEPA/HEPB%^%HEP A/B%^HEPAB%^HEPATITIS A & B%^HEPATITIS A&B%
"RTN","RORX025",143,0)
 ;;HEPATITIS A/B^HEPATITIS AB^TWINRIX%
"RTN","RORX025",144,0)
 ;;
"RTN","RORX025",145,0)
 Q
"RTN","RORX025",146,0)
 ;
"RTN","RORXU002")
0^3^B146259436^B144602530
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ; 20 Apr 2016  1:21 PM
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10,13,15,17,19,21,22,26,29**;Feb 17, 2006;Build 18
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 ; #417    Read access to .01 field of file #40.8 (controlled)
"RTN","RORXU002",13,0)
 ; #10040  Read access to file #44 (supported)
"RTN","RORXU002",14,0)
 ; #5747   $$VLTD^ICDEX (controlled)
"RTN","RORXU002",15,0)
 ;
"RTN","RORXU002",16,0)
 ;******************************************************************************
"RTN","RORXU002",17,0)
 ;******************************************************************************
"RTN","RORXU002",18,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU002",19,0)
 ;        
"RTN","RORXU002",20,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU002",21,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU002",22,0)
 ;ROR*1.5*10   APR  2010   A SAUNDERS   Modified Lab Tests Ranges section in
"RTN","RORXU002",23,0)
 ;                                      PARAMS tag to include the 3 new reports.
"RTN","RORXU002",24,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added Division and Clinic sections in
"RTN","RORXU002",25,0)
 ;                                      PARAMS tag (pulled from RORXU006).
"RTN","RORXU002",26,0)
 ;ROR*1.5*15   JUN  2011   C RAY        Added HIV_DX
"RTN","RORXU002",27,0)
 ; 
"RTN","RORXU002",28,0)
 ;ROR*1.5*17   AUG  2011   C RAY        Modified to allow 
"RTN","RORXU002",29,0)
 ;                                      PATIENTS,OPTIONS params to have other
"RTN","RORXU002",30,0)
 ;                                      values besides boolean
"RTN","RORXU002",31,0)
 ;                                      Modified to add DATE_RANGE_4
"RTN","RORXU002",32,0)
 ;ROR*1.5*19   FEB  2012   J SCOTT      Support for ICD-10 Coding System.
"RTN","RORXU002",33,0)
 ;
"RTN","RORXU002",34,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added flags for GENDER (SEX) selection on
"RTN","RORXU002",35,0)
 ;                                      reports in PATIENTS XML tag
"RTN","RORXU002",36,0)
 ;                                      Added ICN column if Additional Identifier
"RTN","RORXU002",37,0)
 ;                                       requested.
"RTN","RORXU002",38,0)
 ;
"RTN","RORXU002",39,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Added flags for OEF/OIF period of service
"RTN","RORXU002",40,0)
 ;                                      selection on reports in PATIENTS XML tag
"RTN","RORXU002",41,0)
 ;
"RTN","RORXU002",42,0)
 ;ROR*1.5*26   JAN 2015    T KOPP       Added flags for SVR ONLY or NO SVR ONLY
"RTN","RORXU002",43,0)
 ;                                      selection on reports in PATIENTS XML tag.
"RTN","RORXU002",44,0)
 ;                                      Suppress FIB4 header on DAA Potential
"RTN","RORXU002",45,0)
 ;                                      Candidates report if FIB-4 parameter not
"RTN","RORXU002",46,0)
 ;                                      selected
"RTN","RORXU002",47,0)
 ;
"RTN","RORXU002",48,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added DATE_RANGE_5-7 to parameter output in
"RTN","RORXU002",49,0)
 ;                                       PARAMS
"RTN","RORXU002",50,0)
 ;
"RTN","RORXU002",51,0)
 ;******************************************************************************
"RTN","RORXU002",52,0)
 ;******************************************************************************
"RTN","RORXU002",53,0)
 Q
"RTN","RORXU002",54,0)
 ;
"RTN","RORXU002",55,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",56,0)
 ;
"RTN","RORXU002",57,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",58,0)
 ;               is terminator is returned
"RTN","RORXU002",59,0)
 ;
"RTN","RORXU002",60,0)
 ; Return Values:
"RTN","RORXU002",61,0)
 ;       ""  End of definition
"RTN","RORXU002",62,0)
 ;      ...  Name of the column
"RTN","RORXU002",63,0)
 ;
"RTN","RORXU002",64,0)
COLSCAN(TERM) ;
"RTN","RORXU002",65,0)
 N CH,I,TOKEN
"RTN","RORXU002",66,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",67,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",68,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",69,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",70,0)
 Q TOKEN
"RTN","RORXU002",71,0)
 ;
"RTN","RORXU002",72,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",73,0)
DATE(DT) ;
"RTN","RORXU002",74,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",75,0)
 ;
"RTN","RORXU002",76,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",77,0)
 ;
"RTN","RORXU002",78,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",79,0)
 ;
"RTN","RORXU002",80,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",81,0)
 ;
"RTN","RORXU002",82,0)
 ; Return Values:
"RTN","RORXU002",83,0)
 ;       <0  Error code
"RTN","RORXU002",84,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",85,0)
 ;
"RTN","RORXU002",86,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",87,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP,DIERR
"RTN","RORXU002",88,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",89,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",90,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",91,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",92,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",93,0)
 ;---
"RTN","RORXU002",94,0)
 S IENS=REGIEN_","
"RTN","RORXU002",95,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",96,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",97,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",98,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",99,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",100,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",101,0)
 Q HEADER
"RTN","RORXU002",102,0)
 ;
"RTN","RORXU002",103,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",104,0)
 ;
"RTN","RORXU002",105,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",106,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",107,0)
 ;               this variable.
"RTN","RORXU002",108,0)
 ;
"RTN","RORXU002",109,0)
LIST(LIST) ;
"RTN","RORXU002",110,0)
 N I,TMP,VAL
"RTN","RORXU002",111,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",112,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",113,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",114,0)
 Q
"RTN","RORXU002",115,0)
 ;
"RTN","RORXU002",116,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",117,0)
 ;
"RTN","RORXU002",118,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",119,0)
 ;               the options as subscripts
"RTN","RORXU002",120,0)
 ;
"RTN","RORXU002",121,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",122,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",123,0)
 ;
"RTN","RORXU002",124,0)
 ; Return Values:
"RTN","RORXU002",125,0)
 ;      ...  Text description of the options
"RTN","RORXU002",126,0)
 ;
"RTN","RORXU002",127,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",128,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",129,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",130,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",131,0)
 S TEXT="",I=0
"RTN","RORXU002",132,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",133,0)
 . S NS=0
"RTN","RORXU002",134,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",135,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",136,0)
 . Q:'NS
"RTN","RORXU002",137,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",138,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",139,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",140,0)
 ;
"RTN","RORXU002",141,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",142,0)
 ;
"RTN","RORXU002",143,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",144,0)
 ;
"RTN","RORXU002",145,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",146,0)
 ;
"RTN","RORXU002",147,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",148,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",149,0)
 ;
"RTN","RORXU002",150,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",151,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",152,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",153,0)
 ;
"RTN","RORXU002",154,0)
 ; Return Values:
"RTN","RORXU002",155,0)
 ;       <0  Error code
"RTN","RORXU002",156,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",157,0)
 ;
"RTN","RORXU002",158,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",159,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP,IEN,DIERR
"RTN","RORXU002",160,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",161,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",162,0)
 ;
"RTN","RORXU002",163,0)
 ;=== Registry name
"RTN","RORXU002",164,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",165,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",166,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",167,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",168,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",169,0)
 ;
"RTN","RORXU002",170,0)
 ;=== Alternate date ranges
"RTN","RORXU002",171,0)
 F I=2:1:7  D  Q:RC<0
"RTN","RORXU002",172,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",173,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",174,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",175,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",176,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",177,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",178,0)
 Q:RC<0 RC
"RTN","RORXU002",179,0)
 ;
"RTN","RORXU002",180,0)
 ;=== Main date range
"RTN","RORXU002",181,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",182,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",183,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",184,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",185,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",186,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",187,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",188,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",189,0)
 ;
"RTN","RORXU002",190,0)
 ;=== Task comment
"RTN","RORXU002",191,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",192,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",193,0)
 ;
"RTN","RORXU002",194,0)
 ;=== Clinic Selection - patch 13
"RTN","RORXU002",195,0)
 D:$D(RORTSK("PARAMS","CLINICS","C"))
"RTN","RORXU002",196,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",197,0)
 . S IEN=0
"RTN","RORXU002",198,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",199,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",200,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU002",201,0)
 . . Q:TMP=""
"RTN","RORXU002",202,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU002",203,0)
 D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU002",204,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARAMS)
"RTN","RORXU002",205,0)
 ;
"RTN","RORXU002",206,0)
 ;=== Division Selection - patch 13
"RTN","RORXU002",207,0)
 D:$D(RORTSK("PARAMS","DIVISIONS","C"))
"RTN","RORXU002",208,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",209,0)
 . S IEN=0
"RTN","RORXU002",210,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",211,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",212,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU002",213,0)
 . . Q:TMP=""
"RTN","RORXU002",214,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU002",215,0)
 D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU002",216,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARAMS)
"RTN","RORXU002",217,0)
 ;
"RTN","RORXU002",218,0)
 ;
"RTN","RORXU002",219,0)
 ;=== Patient selection and Options
"RTN","RORXU002",220,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",221,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",222,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",223,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",224,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",225,0)
 . S TMP=""
"RTN","RORXU002",226,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",227,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,$G(BUF(TMP)))
"RTN","RORXU002",228,0)
 . ;--- Compile the flags
"RTN","RORXU002",229,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",230,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",231,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",232,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",233,0)
 . . I $D(BUF("SEX")) S FLAGS=FLAGS_$S(BUF("SEX")="M":"W",BUF("SEX")="F":"M",1:"")
"RTN","RORXU002",234,0)
 . . I $D(BUF("OEF")) D
"RTN","RORXU002",235,0)
 . . . S FLAGS=FLAGS_$S(BUF("OEF")=1:"I",BUF("OEF")=-1:"E",1:"")
"RTN","RORXU002",236,0)
 . . I $D(BUF("SVR")) S FLAGS=FLAGS_$S(BUF("SVR")=1:"S",BUF("SVR")=0:"V",1:"")
"RTN","RORXU002",237,0)
 Q:RC<0 RC
"RTN","RORXU002",238,0)
 ;
"RTN","RORXU002",239,0)
 ;=== Other Registries
"RTN","RORXU002",240,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",241,0)
 . N NODE,REGIEN
"RTN","RORXU002",242,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",243,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",244,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",245,0)
 . S REGIEN=0
"RTN","RORXU002",246,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",247,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",248,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",249,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",250,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",251,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",252,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",253,0)
 ;
"RTN","RORXU002",254,0)
 ;=== Local Fields
"RTN","RORXU002",255,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",256,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",257,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",258,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",259,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",260,0)
 . S IEN=0
"RTN","RORXU002",261,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",262,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",263,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",264,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",265,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",266,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",267,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",268,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",269,0)
 ;
"RTN","RORXU002",270,0)
 ;=== Lab test ranges
"RTN","RORXU002",271,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",272,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",273,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",274,0)
 . I $G(RORTSK("EP"))["MLDRANGE"!($G(RORTSK("EP"))["HCVDAA") S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",275,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",276,0)
 . N GRC,NODE
"RTN","RORXU002",277,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",278,0)
 . S GRC=0
"RTN","RORXU002",279,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",280,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",281,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",282,0)
 ;
"RTN","RORXU002",283,0)
 ;=== ICD filter/group/codes
"RTN","RORXU002",284,0)
 N LEV1FILT,LEV2GRP,LEV3ICD,ICDIEN,ICDCODE,GRPNAME,FILTER,ICDDESC,RORXMLNODE,RORICDSYS
"RTN","RORXU002",285,0)
 S FILTER=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORXU002",286,0)
 I $L(FILTER)>0 D  ;quit if no ICD filter exists
"RTN","RORXU002",287,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICDFILT",,PARAMS)
"RTN","RORXU002",288,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",289,0)
 . ;add filter value to the output
"RTN","RORXU002",290,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",291,0)
 . ;if there's an ICD group, process it
"RTN","RORXU002",292,0)
 . I $D(RORTSK("PARAMS","ICDFILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",293,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICDFILT","G"))
"RTN","RORXU002",294,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",295,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",296,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",297,0)
 ... I LEV2GRP'>0  S RC=LEV2GRP Q 
"RTN","RORXU002",298,0)
 ... ;add group name to the output
"RTN","RORXU002",299,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",300,0)
 ... S ICDIEN=0
"RTN","RORXU002",301,0)
 ... F  S ICDIEN=$O(@NODE@(GRPNAME,"C",ICDIEN)) Q:ICDIEN'>0  D
"RTN","RORXU002",302,0)
 .... S ICDCODE=$P(@NODE@(GRPNAME,"C",ICDIEN),U,1) Q:ICDCODE=""
"RTN","RORXU002",303,0)
 .... S RORICDSYS=$P(@NODE@(GRPNAME,"C",ICDIEN),U,2)
"RTN","RORXU002",304,0)
 .... ;get diagnosis description
"RTN","RORXU002",305,0)
 .... S ICDDESC=$$VLTD^ICDEX(ICDIEN)
"RTN","RORXU002",306,0)
 .... S RORXMLNODE=$S(RORICDSYS=1:"ICD9",1:"ICD10")
"RTN","RORXU002",307,0)
 .... S LEV3ICD=$$ADDVAL^RORTSK11(RORTSK,RORXMLNODE,ICDDESC,LEV2GRP)
"RTN","RORXU002",308,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD,"ID",ICDCODE)
"RTN","RORXU002",309,0)
 ;
"RTN","RORXU002",310,0)
 ;=== get Max Date
"RTN","RORXU002",311,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",312,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",313,0)
 ;
"RTN","RORXU002",314,0)
 ;=== get HIV_DX
"RTN","RORXU002",315,0)
 N RORMODE S RORMODE=$$PARAM^RORTSK01("HIV_DX")
"RTN","RORXU002",316,0)
 S RORMODE=$S(RORMODE=1:"Include",RORMODE=-1:"Exclude",1:"")
"RTN","RORXU002",317,0)
 I RORMODE'="" D
"RTN","RORXU002",318,0)
 . D ADDVAL^RORTSK11(RORTSK,"HIV_DX",RORMODE,PARAMS)
"RTN","RORXU002",319,0)
 . S FLAGS=FLAGS_"H"
"RTN","RORXU002",320,0)
 ;
"RTN","RORXU002",321,0)
 ;=== Defaults
"RTN","RORXU002",322,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",323,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",324,0)
 ;
"RTN","RORXU002",325,0)
 ;=== Success
"RTN","RORXU002",326,0)
 Q PARAMS
"RTN","RORXU002",327,0)
 ;
"RTN","RORXU002",328,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",329,0)
 ;
"RTN","RORXU002",330,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",331,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",332,0)
 ;               examples of table definitions.
"RTN","RORXU002",333,0)
 ;
"RTN","RORXU002",334,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",335,0)
 ;
"RTN","RORXU002",336,0)
 ; Return Values:
"RTN","RORXU002",337,0)
 ;       <0  Error code
"RTN","RORXU002",338,0)
 ;        0  Ok
"RTN","RORXU002",339,0)
 ;
"RTN","RORXU002",340,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",341,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",342,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",343,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",344,0)
 S RC=0
"RTN","RORXU002",345,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",346,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",347,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",348,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",349,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",350,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",351,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",352,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",353,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",354,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",355,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",356,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",357,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",358,0)
 ;
"RTN","RORXU002",359,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",360,0)
 ;
"RTN","RORXU002",361,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",362,0)
 ;
"RTN","RORXU002",363,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",364,0)
 N COLUMN,IT,NAME,OK,ROR,TERM
"RTN","RORXU002",365,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",366,0)
 . I '$D(^TMP($J,"RORSELCOL")) D  ; set up special columns selection criteria
"RTN","RORXU002",367,0)
 . . F IT=1:1 X "S ROR=$P($T(SELCOL+"_IT_"^RORXU002),"";;"",2)" Q:$P(ROR,U)=""  D
"RTN","RORXU002",368,0)
 . . . S ^TMP($J,"RORSELCOL",$P(ROR,U))=$P(ROR,U,2,999)
"RTN","RORXU002",369,0)
 . I $D(^TMP($J,"RORSELCOL",NAME)) D  Q:'OK
"RTN","RORXU002",370,0)
 . . X ^TMP($J,"RORSELCOL",NAME) S OK=$T
"RTN","RORXU002",371,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",372,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",373,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",374,0)
 Q
"RTN","RORXU002",375,0)
 ;
"RTN","RORXU002",376,0)
 ;Setup of values in SELCOL is:
"RTN","RORXU002",377,0)
 ;name of selected optional column^statement to execute to set $T if the condition to include this field has been met
"RTN","RORXU002",378,0)
 ;
"RTN","RORXU002",379,0)
SELCOL ;selected optional fields and screen criteria is listed here
"RTN","RORXU002",380,0)
 ;;ICN^I $$PARAM^RORTSK01("PATIENTS","ICN")
"RTN","RORXU002",381,0)
 ;;FIB4^I $D(RORTSK("PARAMS","LRGRANGES","C",4))
"RTN","RORXU002",382,0)
 ;;
"RTN","RORXU010")
0^1^B25087165^B14122091
"RTN","RORXU010",1,0)
RORXU010 ;HCOIFO/VC - REPORT MODIFICATON UTILITY ;4/16/09 2:54pm
"RTN","RORXU010",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,19,25,29**;Feb 17, 2006;Build 18
"RTN","RORXU010",3,0)
 ;
"RTN","RORXU010",4,0)
 ;Routine builds the ^TMP($J,"RORFLTR" global array that includes
"RTN","RORXU010",5,0)
 ;ICD information from inpatient, outpatient and problem
"RTN","RORXU010",6,0)
 ;list data for the identified patient.
"RTN","RORXU010",7,0)
 ;
"RTN","RORXU010",8,0)
 ;The ICD information that is stored in the ^TMP($J,"RORFLTR"
"RTN","RORXU010",9,0)
 ;global array is then compared to ICD information stored in 
"RTN","RORXU010",10,0)
 ;the RORTSK local array which is established by the calling
"RTN","RORXU010",11,0)
 ;report routine.
"RTN","RORXU010",12,0)
 ;
"RTN","RORXU010",13,0)
 ;This routine returns a status flag indicating whether the
"RTN","RORXU010",14,0)
 ;patient should being included on the calling report.
"RTN","RORXU010",15,0)
 ;
"RTN","RORXU010",16,0)
 ;Format is:
"RTN","RORXU010",17,0)
 ;   ^TMP($J,"RORFLTR",PATIENT IEN,ICD FILE #,ICD IEN)=1
"RTN","RORXU010",18,0)
 ;   ^TMP($J,"RORFLTR",PATIENT IEN,ICD FILE #,ICD IEN,"DATE",ICD Date)=""
"RTN","RORXU010",19,0)
 ;
"RTN","RORXU010",20,0)
 ;The inputs are:
"RTN","RORXU010",21,0)
 ;   1)  PIEN - Patient's IEN in the registry file (required).
"RTN","RORXU010",22,0)
 ;              Specifically ^RORDATA(798.4,PIEN) and in the 
"RTN","RORXU010",23,0)
 ;              patient file ^DPT(PIEN).
"RTN","RORXU010",24,0)
 ;
"RTN","RORXU010",25,0)
 ;The return code is:
"RTN","RORXU010",26,0)
 ;       RC   - Flag indicating if patient should be retained.
"RTN","RORXU010",27,0)
 ;              1 - Patient should be retained for report.
"RTN","RORXU010",28,0)
 ;              0 - Patient should NOT be retained for report.
"RTN","RORXU010",29,0)
 ;
"RTN","RORXU010",30,0)
 ;ICD information is obtained from 3 different packages:
"RTN","RORXU010",31,0)
 ;   Registration package for patient inpatient diagnosis.
"RTN","RORXU010",32,0)
 ;   Patient Care Encounter package for patient outpatient diagnosis.
"RTN","RORXU010",33,0)
 ;   Problem List package for patient problem list diagnosis.
"RTN","RORXU010",34,0)
 ;   
"RTN","RORXU010",35,0)
 ;This routine uses the following IAs:
"RTN","RORXU010",36,0)
 ;
"RTN","RORXU010",37,0)
 ;#92       ^DGPT(  (controlled)
"RTN","RORXU010",38,0)
 ;#928      ACTIVE^GMPLUTL (controlled)
"RTN","RORXU010",39,0)
 ;#1554     POV^PXAPIIB (controlled)
"RTN","RORXU010",40,0)
 ;#1905     SELECTED^VSIT (controlled)
"RTN","RORXU010",41,0)
 ;#2977     GETFLDS^GMPLEDT3 (controlled)
"RTN","RORXU010",42,0)
 ;#3545     ^DGPT("AAD" (private)
"RTN","RORXU010",43,0)
 ;#6130     PTFICD^DGPTFUT
"RTN","RORXU010",44,0)
 ;
"RTN","RORXU010",45,0)
 ;******************************************************************************
"RTN","RORXU010",46,0)
 ;******************************************************************************
"RTN","RORXU010",47,0)
 ; --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU010",48,0)
 ; 
"RTN","RORXU010",49,0)
 ;PKG/PATCH   DATE       DEVELOPER   MODIFICATION
"RTN","RORXU010",50,0)
 ;----------- ---------- ----------- ----------------------------------------
"RTN","RORXU010",51,0)
 ;ROR*1.5*8   MAR 2010   V CARR      Modified to handle ICD9 filter for
"RTN","RORXU010",52,0)
 ;                                   'include' or 'exclude'.
"RTN","RORXU010",53,0)
 ;ROR*1.5*13  DEC 2010   A SAUNDERS  User can select specific patients, 
"RTN","RORXU010",54,0)
 ;                                   clinics, or divisions for the report.
"RTN","RORXU010",55,0)
 ;ROR*1.5*19  FEB 2012   J SCOTT     Support for ICD-10 Coding System.
"RTN","RORXU010",56,0)
 ;ROR*1.5*19  FEB 2012   J SCOTT     Removed direct read of ^ICD9( global.
"RTN","RORXU010",57,0)
 ;ROR*1.5*19  FEB 2012   J SCOTT     Changed the screening of ICD codes from
"RTN","RORXU010",58,0)
 ;                                   external to internal values.
"RTN","RORXU010",59,0)
 ;ROR*1.5*19  FEB 2012   J SCOTT     Removed obsolete REG parameter from
"RTN","RORXU010",60,0)
 ;                                   ICD entry point.
"RTN","RORXU010",61,0)
 ;ROR*1.5*25  OCT 2014   T KOPP      Added PTF ICD-10 support for 25 diagnoses
"RTN","RORXU010",62,0)
 ;ROR*1.5*29  APR 2016   T KOPP      Add check for selected diagnosis date range
"RTN","RORXU010",63,0)
 ; 
"RTN","RORXU010",64,0)
 ;******************************************************************************
"RTN","RORXU010",65,0)
 ;******************************************************************************
"RTN","RORXU010",66,0)
 Q
"RTN","RORXU010",67,0)
 ;
"RTN","RORXU010",68,0)
ICD(PIEN) ;Determine if patient is retained for report based on ICD information.
"RTN","RORXU010",69,0)
 ;
"RTN","RORXU010",70,0)
 K ^TMP($J,"RORFLTR",PIEN)
"RTN","RORXU010",71,0)
 N PATIEN,RORICDIEN
"RTN","RORXU010",72,0)
 S PATIEN=PIEN
"RTN","RORXU010",73,0)
 ;
"RTN","RORXU010",74,0)
 ;Gather INPATIENT ICD information from Registration package file #45 (PTF).
"RTN","RORXU010",75,0)
 N DATE,DGPTREF,ICD1,ICD2,FLDLOC,RORIBUF,FLD
"RTN","RORXU010",76,0)
 ;
"RTN","RORXU010",77,0)
 ;Browse through each inpatient date.
"RTN","RORXU010",78,0)
 S DATE=0
"RTN","RORXU010",79,0)
 F  S DATE=$O(^DGPT("AAD",PATIEN,DATE)) Q:DATE=""  D
"RTN","RORXU010",80,0)
 .;Browse through each PTF (#45) entry for an inpatient date.
"RTN","RORXU010",81,0)
 .S DGPTREF=0
"RTN","RORXU010",82,0)
 .F  S DGPTREF=$O(^DGPT("AAD",PATIEN,DATE,DGPTREF)) Q:DGPTREF=""  D
"RTN","RORXU010",83,0)
 ..;Extract ICD diagnosis codes.
"RTN","RORXU010",84,0)
 ..D PTFICD^DGPTFUT(701,DGPTREF,"",.RORIBUF)
"RTN","RORXU010",85,0)
 ..S FLD="" F  S FLD=$O(RORIBUF(FLD)) Q:FLD=""  I $G(RORIBUF(FLD)) D
"RTN","RORXU010",86,0)
 ... S ^TMP($J,"RORFLTR",PATIEN,80,+RORIBUF(FLD))=1
"RTN","RORXU010",87,0)
 ... S ^TMP($J,"RORFLTR",PATIEN,80,+RORIBUF(FLD),"DATE",+$P(RORIBUF,U,10))=""
"RTN","RORXU010",88,0)
 ;
"RTN","RORXU010",89,0)
 ;Gather OUTPATIENT ICD information from Patient Care Encounter package.
"RTN","RORXU010",90,0)
 N VSIEN,TMP,RORVPLST,VPOVREF,VSDATE
"RTN","RORXU010",91,0)
 ;
"RTN","RORXU010",92,0)
 ;Get a list of all VISIT (#9000010) entries for the patient.
"RTN","RORXU010",93,0)
 D SELECTED^VSIT(PATIEN)
"RTN","RORXU010",94,0)
 ;Browse through each returned VISIT entry.
"RTN","RORXU010",95,0)
 S VSIEN=0
"RTN","RORXU010",96,0)
 F  S VSIEN=$O(^TMP("VSIT",$J,VSIEN)) Q:VSIEN=""  D
"RTN","RORXU010",97,0)
 .S TMP=+$O(^TMP("VSIT",$J,VSIEN,"")) Q:TMP'>0
"RTN","RORXU010",98,0)
 .S VSDATE=+^TMP("VSIT",$J,VSIEN,TMP)
"RTN","RORXU010",99,0)
 .;Get V POV (#9000010.07) entries for a specific VISIT entry.
"RTN","RORXU010",100,0)
 .D POV^PXAPIIB(VSIEN,.RORVPLST)
"RTN","RORXU010",101,0)
 .;Browse through each returned V POV entry.
"RTN","RORXU010",102,0)
 .S VPOVREF=""
"RTN","RORXU010",103,0)
 .F  S VPOVREF=$O(RORVPLST(VPOVREF)) Q:VPOVREF=""  D
"RTN","RORXU010",104,0)
 ..;Extract ICD diagnosis code.
"RTN","RORXU010",105,0)
 ..S RORICDIEN=$P(RORVPLST(VPOVREF),U,1)
"RTN","RORXU010",106,0)
 ..I RORICDIEN'="" D
"RTN","RORXU010",107,0)
 ...S ^TMP($J,"RORFLTR",PATIEN,80,RORICDIEN)=1
"RTN","RORXU010",108,0)
 ...S ^TMP($J,"RORFLTR",PATIEN,80,RORICDIEN,"DATE",VSDATE)=""
"RTN","RORXU010",109,0)
 K ^TMP("VSIT",$J)
"RTN","RORXU010",110,0)
 ;
"RTN","RORXU010",111,0)
 ;Gather PROBLEM LIST ICD information from Problem List package.
"RTN","RORXU010",112,0)
 N RORPLST,PLSTREF,GMPVAMC,GMPROV,PROBNUM
"RTN","RORXU010",113,0)
 ;
"RTN","RORXU010",114,0)
 ;Get a list of all PROBLEM (#9000011) entries for the patient.
"RTN","RORXU010",115,0)
 D ACTIVE^GMPLUTL(PATIEN,.RORPLST)
"RTN","RORXU010",116,0)
 S (GMPVAMC,GMPROV)=0
"RTN","RORXU010",117,0)
 ;Browse through each returned PROBLEM entry.
"RTN","RORXU010",118,0)
 S PROBNUM=0
"RTN","RORXU010",119,0)
 F  S PROBNUM=$O(RORPLST(PROBNUM)) Q:PROBNUM=""  D
"RTN","RORXU010",120,0)
 .S PLSTREF=$G(RORPLST(PROBNUM,0))
"RTN","RORXU010",121,0)
 .Q:PLSTREF'>0
"RTN","RORXU010",122,0)
 .;Extract ICD diagnosis code.
"RTN","RORXU010",123,0)
 .K GMPFLD,GMPORIG
"RTN","RORXU010",124,0)
 .D GETFLDS^GMPLEDT3(PLSTREF)
"RTN","RORXU010",125,0)
 .S RORICDIEN=$P($G(GMPFLD(.01)),U,1)
"RTN","RORXU010",126,0)
 .I RORICDIEN'="" D
"RTN","RORXU010",127,0)
 ..S ^TMP($J,"RORFLTR",PATIEN,80,RORICDIEN)=1
"RTN","RORXU010",128,0)
 ..S ^TMP($J,"RORFLTR",PATIEN,80,RORICDIEN,"DATE",+$G(GMPFLD(.08)))=""
"RTN","RORXU010",129,0)
 .K GMPFLD,GMPORIG
"RTN","RORXU010",130,0)
 ;
"RTN","RORXU010",131,0)
COMPARE ;Determine if patient should be retained or not.
"RTN","RORXU010",132,0)
 ;
"RTN","RORXU010",133,0)
 ;Compare ICD data gathered for patient in ^TMP($J,"RORFLTR"
"RTN","RORXU010",134,0)
 ;with ICD data in RORTSK local array that was established from
"RTN","RORXU010",135,0)
 ;the calling routine.
"RTN","RORXU010",136,0)
 ;
"RTN","RORXU010",137,0)
 N A,B,C,DTOK,STOP,X,Y,Y1,RC
"RTN","RORXU010",138,0)
 S A="PARAMS",B="ICDFILT",C="DATE_RANGE_5",RC=0
"RTN","RORXU010",139,0)
 S X="",STOP="GO"
"RTN","RORXU010",140,0)
 F  S X=$O(RORTSK(A,B,"G",X)) Q:X=""  Q:STOP="STOP"  D
"RTN","RORXU010",141,0)
 .S Y=""
"RTN","RORXU010",142,0)
 .F  S Y=$O(RORTSK(A,B,"G",X,"C",Y)) Q:Y=""  Q:STOP="STOP"  D
"RTN","RORXU010",143,0)
 ..I $D(^TMP($J,"RORFLTR",PATIEN,80,Y))>0 D
"RTN","RORXU010",144,0)
 ...S DTOK=0
"RTN","RORXU010",145,0)
 ...I $G(RORTSK(A,C,"A","START"))>0 D  Q:'DTOK          ;Check if diagnosis is within date range
"RTN","RORXU010",146,0)
 ....S Y1=$G(RORTSK(A,C,"A","START"))-.1   ; Start looking just before earliest start date
"RTN","RORXU010",147,0)
 ....S Y1=$O(^TMP($J,"RORFLTR",PATIEN,80,Y,"DATE",Y1))  ;First diagnosis date after start date                                                                             ; This date must exist and be <= range end date
"RTN","RORXU010",148,0)
 ....I 'Y1!(Y1>$G(RORTSK(A,C,"A","END")))  Q        ; Diagnosis is not within the date range - keep looking
"RTN","RORXU010",149,0)
 ....S DTOK=1
"RTN","RORXU010",150,0)
 ...S RC=1,STOP="STOP"
"RTN","RORXU010",151,0)
 K ^TMP($J,"RORFLTR",PATIEN)
"RTN","RORXU010",152,0)
 Q RC
"SEC","^DIC",799.34,799.34,0,"AUDIT")
@
"SEC","^DIC",799.34,799.34,0,"DD")
@
"SEC","^DIC",799.34,799.34,0,"DEL")
@
"SEC","^DIC",799.34,799.34,0,"LAYGO")
@
"SEC","^DIC",799.34,799.34,0,"RD")
@
"SEC","^DIC",799.34,799.34,0,"WR")
@
"VER")
8.0^22.0
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DD",799.34,799.34,0)
FIELD^^12^10
"^DD",799.34,799.34,0,"DDA")
N
"^DD",799.34,799.34,0,"DT")
3051121
"^DD",799.34,799.34,0,"IX","B",799.34,.01)

"^DD",799.34,799.34,0,"NM","ROR REPORT PARAMETERS")

"^DD",799.34,799.34,0,"PT",798.12,.01)

"^DD",799.34,799.34,0,"PT",798.8,.04)

"^DD",799.34,799.34,0,"VRPK")
ROR
"^DD",799.34,799.34,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",799.34,799.34,.01,1,0)
^.1
"^DD",799.34,799.34,.01,1,1,0)
799.34^B
"^DD",799.34,799.34,.01,1,1,1)
S ^ROR(799.34,"B",$E(X,1,30),DA)=""
"^DD",799.34,799.34,.01,1,1,2)
K ^ROR(799.34,"B",$E(X,1,30),DA)
"^DD",799.34,799.34,.01,1,1,3)
Do not delete!
"^DD",799.34,799.34,.01,3)
Enter the report name (3-60 characters).
"^DD",799.34,799.34,.01,8.5)
@
"^DD",799.34,799.34,.01,9)
@
"^DD",799.34,799.34,.01,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.01,21,3,0)
 
"^DD",799.34,799.34,.01,21,4,0)
The name of the report stored in the NAME field is
"^DD",799.34,799.34,.01,21,5,0)
displayed in the Reports sub-menu of the GUI.
"^DD",799.34,799.34,.01,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.01,"DT")
3021126
"^DD",799.34,799.34,.02,0)
BACKGROUND PROCESSING?^SX^0:NO;1:YES;^0;2^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,8.5)
@
"^DD",799.34,799.34,.02,9)
@
"^DD",799.34,799.34,.02,21,0)
^^6^6^3030506^
"^DD",799.34,799.34,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.02,21,3,0)
 
"^DD",799.34,799.34,.02,21,4,0)
If the BACKGROUND PROCESSING? field is set to
"^DD",799.34,799.34,.02,21,5,0)
'YES' then the report will be scheduled to run as
"^DD",799.34,799.34,.02,21,6,0)
a background task.
"^DD",799.34,799.34,.02,23,0)
^^1^1^3030506^
"^DD",799.34,799.34,.02,23,1,0)
Only background processing is currently implemented.
"^DD",799.34,799.34,.02,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,"DT")
3021127
"^DD",799.34,799.34,.03,0)
SHARED TEMPLATES^SX^0:NO;1:YES;^0;3^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,8.5)
@
"^DD",799.34,799.34,.03,9)
@
"^DD",799.34,799.34,.03,21,0)
^^7^7^3051121^
"^DD",799.34,799.34,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.03,21,3,0)
 
"^DD",799.34,799.34,.03,21,4,0)
If this field is set to 'YES', then report 
"^DD",799.34,799.34,.03,21,5,0)
parameter templates are shared between all 
"^DD",799.34,799.34,.03,21,6,0)
registries. Otherwise, the templates are 
"^DD",799.34,799.34,.03,21,7,0)
registry-specific.
"^DD",799.34,799.34,.03,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,"DT")
3051121
"^DD",799.34,799.34,.04,0)
CODE^RNJ3,0X^^0;4^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.34,799.34,.04,3)
Enter the unique report code (between 1 and 999, 0 Decimal Digits).
"^DD",799.34,799.34,.04,8.5)
@
"^DD",799.34,799.34,.04,9)
@
"^DD",799.34,799.34,.04,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.04,21,3,0)
 
"^DD",799.34,799.34,.04,21,4,0)
The CODE field stores the unique code of the
"^DD",799.34,799.34,.04,21,5,0)
report.
"^DD",799.34,799.34,.04,23,0)
^^19^19^3030507^
"^DD",799.34,799.34,.04,23,1,0)
The corresponding XSL templates for the report are 
"^DD",799.34,799.34,.04,23,2,0)
stored in the DIALOG file (#.84). The dialog number 
"^DD",799.34,799.34,.04,23,3,0)
of the template has the following structure:
"^DD",799.34,799.34,.04,23,4,0)
 
"^DD",799.34,799.34,.04,23,5,0)
 7981CCC.TTT
"^DD",799.34,799.34,.04,23,6,0)
 
"^DD",799.34,799.34,.04,23,7,0)
 'CCC' is the code of the report.
"^DD",799.34,799.34,.04,23,8,0)
 
"^DD",799.34,799.34,.04,23,9,0)
 'TTT' is the type of the template:
"^DD",799.34,799.34,.04,23,10,0)
        001 - HTML Preview,
"^DD",799.34,799.34,.04,23,11,0)
        002 - Delimited Format (CSV),
"^DD",799.34,799.34,.04,23,12,0)
        003 - Printer Output.
"^DD",799.34,799.34,.04,23,13,0)
 
"^DD",799.34,799.34,.04,23,14,0)
For example, the dialog 7981001.001 contains the HTML
"^DD",799.34,799.34,.04,23,15,0)
preview template for the List of Registry Patients
"^DD",799.34,799.34,.04,23,16,0)
(report code: 1).
"^DD",799.34,799.34,.04,23,17,0)
 
"^DD",799.34,799.34,.04,23,18,0)
If no template is defined for the report then the
"^DD",799.34,799.34,.04,23,19,0)
default template from dialog 7981000 is used.
"^DD",799.34,799.34,.04,"DT")
3030401
"^DD",799.34,799.34,.05,0)
DATE OF INACTIVATION^D^^0;5^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",799.34,799.34,.05,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.05,21,1,0)
If this field has a value, the report will be
"^DD",799.34,799.34,.05,21,2,0)
considered inactive after this date. Use this
"^DD",799.34,799.34,.05,21,3,0)
field to disable unnecessary reports (and hide
"^DD",799.34,799.34,.05,21,4,0)
them from the Report sub-menu of the GUI) instead
"^DD",799.34,799.34,.05,21,5,0)
of deleting them.
"^DD",799.34,799.34,.05,23,0)
^^3^3^3030505^
"^DD",799.34,799.34,.05,23,1,0)
The ROR REPORTS AVAILABLE remote procedure analyzes
"^DD",799.34,799.34,.05,23,2,0)
this field when it loads the list of available reports
"^DD",799.34,799.34,.05,23,3,0)
and skips the inactive ones.
"^DD",799.34,799.34,.05,"DT")
3021126
"^DD",799.34,799.34,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.34,,-1)
"^DD",799.34,799.34,.09,8.5)
@
"^DD",799.34,799.34,.09,9)
@
"^DD",799.34,799.34,.09,21,0)
^^7^7^3030506^
"^DD",799.34,799.34,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.34,799.34,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.34,799.34,.09,21,3,0)
 
"^DD",799.34,799.34,.09,21,4,0)
Reports distributed with the national registries
"^DD",799.34,799.34,.09,21,5,0)
must have this field set to "YES". This prevents
"^DD",799.34,799.34,.09,21,6,0)
local editing of other fields of report
"^DD",799.34,799.34,.09,21,7,0)
definitions.
"^DD",799.34,799.34,.09,"DEL",1,0)
I $$VADEL^RORDD(799.34,,,-1)
"^DD",799.34,799.34,.09,"DT")
3021126
"^DD",799.34,799.34,1,0)
PARAMETER PANELS^FX^^1;E1,250^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",799.34,799.34,1,3)
Enter codes of dialog panels separated by commas (1-250 characters).
"^DD",799.34,799.34,1,8.5)
@
"^DD",799.34,799.34,1,9)
@
"^DD",799.34,799.34,1,21,0)
^^7^7^3030507^
"^DD",799.34,799.34,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,1,21,3,0)
 
"^DD",799.34,799.34,1,21,4,0)
The PARAMETER PANELS field stores the list of 
"^DD",799.34,799.34,1,21,5,0)
panel codes separated by commas. The panels are 
"^DD",799.34,799.34,1,21,6,0)
combined by the GUI into the dialog form that is
"^DD",799.34,799.34,1,21,7,0)
used to request values of the report parameters.
"^DD",799.34,799.34,1,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,1,"DT")
3030304
"^DD",799.34,799.34,10.01,0)
REPORT BUILDER^RFX^^10.01;E1,245^Q:$$VAEDT^RORDD(799.34,$G(DA))  Q:$$EP^RORDD(1)
"^DD",799.34,799.34,10.01,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",799.34,799.34,10.01,8.5)
@
"^DD",799.34,799.34,10.01,9)
@
"^DD",799.34,799.34,10.01,21,0)
^.001^6^6^3060106^^
"^DD",799.34,799.34,10.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,10.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,10.01,21,3,0)
 
"^DD",799.34,799.34,10.01,21,4,0)
The REPORT BUILDER field stores a reference to the
"^DD",799.34,799.34,10.01,21,5,0)
function that is used to build the report (the
"^DD",799.34,799.34,10.01,21,6,0)
report builder).
"^DD",799.34,799.34,10.01,23,0)
^^24^24^3060106^
"^DD",799.34,799.34,10.01,23,1,0)
The call-back entry point is called with a single
"^DD",799.34,799.34,10.01,23,2,0)
parameter. The parameter is a reference to a local
"^DD",799.34,799.34,10.01,23,3,0)
variable that contains values of the report parameters.
"^DD",799.34,799.34,10.01,23,4,0)
 
"^DD",799.34,799.34,10.01,23,5,0)
 RORTSK(            Task Number
"^DD",799.34,799.34,10.01,23,6,0)
 
"^DD",799.34,799.34,10.01,23,7,0)
   "EP")            Entry Point ($$TAG^ROUTINE)
"^DD",799.34,799.34,10.01,23,8,0)
 
"^DD",799.34,799.34,10.01,23,9,0)
   "PARAMS",...)    See the CCR Programmer's Reference 
"^DD",799.34,799.34,10.01,23,10,0)
                    Manual for details
"^DD",799.34,799.34,10.01,23,11,0)
 
"^DD",799.34,799.34,10.01,23,12,0)
   "REGIEN")        Registry IEN
"^DD",799.34,799.34,10.01,23,13,0)
 
"^DD",799.34,799.34,10.01,23,14,0)
   "TYPE")          Type of the Task
"^DD",799.34,799.34,10.01,23,15,0)
   "REPORT")        Code of the Report
"^DD",799.34,799.34,10.01,23,16,0)
   "SCHCODE")       Rescheduling Code
"^DD",799.34,799.34,10.01,23,17,0)
 
"^DD",799.34,799.34,10.01,23,18,0)
The function must return 0 in the case of successful
"^DD",799.34,799.34,10.01,23,19,0)
completion. Otherwise, a negative error code must be 
"^DD",799.34,799.34,10.01,23,20,0)
returned.
"^DD",799.34,799.34,10.01,23,21,0)
 
"^DD",799.34,799.34,10.01,23,22,0)
See description of the ROR REPORT SCHEDULE remote
"^DD",799.34,799.34,10.01,23,23,0)
procedure and source code of the RORTSK01 routine for
"^DD",799.34,799.34,10.01,23,24,0)
more details.
"^DD",799.34,799.34,10.01,"DT")
3021126
"^DD",799.34,799.34,11,0)
DEFAULT PARAMETERS^799.3411^^11;0
"^DD",799.34,799.34,11,9)
@
"^DD",799.34,799.34,11,21,0)
^.001^2^2^3040124^^
"^DD",799.34,799.34,11,21,1,0)
This field stores the default values for the 
"^DD",799.34,799.34,11,21,2,0)
report parameters (in the NAME=VALUE format).
"^DD",799.34,799.34,12,0)
DEFAULT SORTING^799.3412^^12;0
"^DD",799.34,799.34,12,9)
@
"^DD",799.34,799.34,12,21,0)
^^2^2^3040121^
"^DD",799.34,799.34,12,21,1,0)
This field stores the default sorting modes for
"^DD",799.34,799.34,12,21,2,0)
the report (in the TABLE=FIELD format).
"^DD",799.34,799.3411,0)
DEFAULT PARAMETERS SUB-FIELD^^.01^1
"^DD",799.34,799.3411,0,"DT")
3030918
"^DD",799.34,799.3411,0,"NM","DEFAULT PARAMETERS")

"^DD",799.34,799.3411,0,"UP")
799.34
"^DD",799.34,799.3411,.01,0)
DEFAULT PARAMETERS^WL^^0;1^Q
"^DD",799.34,799.3411,.01,8.5)
@
"^DD",799.34,799.3411,.01,9)
@
"^DD",799.34,799.3411,.01,"DT")
3030918
"^DD",799.34,799.3412,0)
DEFAULT SORTING SUB-FIELD^^.01^1
"^DD",799.34,799.3412,0,"DT")
3031103
"^DD",799.34,799.3412,0,"NM","DEFAULT SORTING")

"^DD",799.34,799.3412,0,"UP")
799.34
"^DD",799.34,799.3412,.01,0)
DEFAULT SORTING^WL^^0;1^Q
"^DD",799.34,799.3412,.01,8.5)
@
"^DD",799.34,799.3412,.01,9)
@
"^DD",799.34,799.3412,.01,"DT")
3031103
"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"^DIC",799.34,799.34,0)
ROR REPORT PARAMETERS^799.34
"^DIC",799.34,799.34,0,"GL")
^ROR(799.34,
"^DIC",799.34,799.34,"%",0)
^1.005^^0
"^DIC",799.34,799.34,"%D",0)
^^7^7^3030814^^
"^DIC",799.34,799.34,"%D",1,0)
The ROR REPORT PARAMETERS file stores the report
"^DIC",799.34,799.34,"%D",2,0)
definitions that are used by the ROR REPORT 
"^DIC",799.34,799.34,"%D",3,0)
SCHEDULE remote procedure to schedule the reports.
"^DIC",799.34,799.34,"%D",4,0)
 
"^DIC",799.34,799.34,"%D",5,0)
Records of the file are uniquely identified by the
"^DIC",799.34,799.34,"%D",6,0)
report code (the "A" primary key and the
"^DIC",799.34,799.34,"%D",7,0)
uniqueness index "KEY" are used for that purpose).
"^DIC",799.34,"B","ROR REPORT PARAMETERS",799.34)

"BLD",10111,6)
^29
**END**
**END**

