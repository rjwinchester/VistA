Released ROR*1.5*26 SEQ #27
Extracted from mail message
**KIDS**:ROR*1.5*26^

**INSTALL NAME**
ROR*1.5*26
"BLD",9370,0)
ROR*1.5*26^CLINICAL CASE REGISTRIES^0^3151014^y
"BLD",9370,1,0)
^^2^2^3150414^^
"BLD",9370,1,1,0)
Patch reference and additional information may be found on Forum for 
"BLD",9370,1,2,0)
ROR*1.5*26
"BLD",9370,4,0)
^9.64PA^798.5^4
"BLD",9370,4,798.1,0)
798.1
"BLD",9370,4,798.1,222)
n^n^f^^y^^y^o^n
"BLD",9370,4,798.1,224)
N ROR S ROR=$P(^(0),U) I ROR["TOTAL KNEE"!(ROR["TOTAL HIP")
"BLD",9370,4,798.2,0)
798.2
"BLD",9370,4,798.2,222)
y^n^f^^y^^y^o^n
"BLD",9370,4,798.2,224)
I $P($G(^(0)),U)["VA TOTAL"
"BLD",9370,4,798.5,0)
798.5
"BLD",9370,4,798.5,2,0)
^9.641^798.53^3
"BLD",9370,4,798.5,2,798.5,0)
ROR ICD SEARCH  (File-top level)
"BLD",9370,4,798.5,2,798.5,1,0)
^9.6411^^0
"BLD",9370,4,798.5,2,798.52,0)
ICD PROCEDURE CODE  (sub-file)
"BLD",9370,4,798.5,2,798.52,1,0)
^9.6411^^0
"BLD",9370,4,798.5,2,798.53,0)
INPATIENT CPT CODE  (sub-file)
"BLD",9370,4,798.5,2,798.53,1,0)
^9.6411^^0
"BLD",9370,4,798.5,222)
y^n^p^^^^n^^n
"BLD",9370,4,798.5,224)

"BLD",9370,4,799.31,0)
799.31
"BLD",9370,4,799.31,222)
n^n^f^^n^^y^o^n
"BLD",9370,4,799.31,224)
I $P(^(0),U)="SVR"
"BLD",9370,4,"APDD",798.5,798.5)

"BLD",9370,4,"APDD",798.5,798.52)

"BLD",9370,4,"APDD",798.5,798.53)

"BLD",9370,4,"B",798.1,798.1)

"BLD",9370,4,"B",798.2,798.2)

"BLD",9370,4,"B",798.5,798.5)

"BLD",9370,4,"B",799.31,799.31)

"BLD",9370,6)
4^
"BLD",9370,6.3)
53
"BLD",9370,"ABPKG")
n
"BLD",9370,"INI")
PRE^RORP026
"BLD",9370,"INIT")
POST^RORP026
"BLD",9370,"KRN",0)
^9.67PA^779.2^20
"BLD",9370,"KRN",.4,0)
.4
"BLD",9370,"KRN",.401,0)
.401
"BLD",9370,"KRN",.402,0)
.402
"BLD",9370,"KRN",.403,0)
.403
"BLD",9370,"KRN",.5,0)
.5
"BLD",9370,"KRN",.84,0)
.84
"BLD",9370,"KRN",.84,"NM",0)
^9.68A^15^15
"BLD",9370,"KRN",.84,"NM",1,0)
7981003.002^^0
"BLD",9370,"KRN",.84,"NM",1,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",2,0)
7981008.002^^0
"BLD",9370,"KRN",.84,"NM",2,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",3,0)
7981011.002^^0
"BLD",9370,"KRN",.84,"NM",3,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",4,0)
7981012.002^^0
"BLD",9370,"KRN",.84,"NM",4,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",5,0)
7981013.002^^0
"BLD",9370,"KRN",.84,"NM",5,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",6,0)
7981015.002^^0
"BLD",9370,"KRN",.84,"NM",6,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",7,0)
7981020.002^^0
"BLD",9370,"KRN",.84,"NM",7,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",8,0)
7981022.002^^0
"BLD",9370,"KRN",.84,"NM",8,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",9,0)
7981018.002^^0
"BLD",9370,"KRN",.84,"NM",9,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",10,0)
7981999.002^^0
"BLD",9370,"KRN",.84,"NM",10,99999999)
2990000^3150415.161247
"BLD",9370,"KRN",.84,"NM",11,0)
7981999.001^^0
"BLD",9370,"KRN",.84,"NM",11,99999999)
2990000^3150422.171733
"BLD",9370,"KRN",.84,"NM",12,0)
7981021.001^^0
"BLD",9370,"KRN",.84,"NM",12,99999999)
2990000^3150505.111609
"BLD",9370,"KRN",.84,"NM",13,0)
7981021.002^^0
"BLD",9370,"KRN",.84,"NM",13,99999999)
2990000^3150505.111609
"BLD",9370,"KRN",.84,"NM",14,0)
7981023.001^^0
"BLD",9370,"KRN",.84,"NM",14,99999999)
2990000^3150521.182242
"BLD",9370,"KRN",.84,"NM",15,0)
7981023.002^^0
"BLD",9370,"KRN",.84,"NM",15,99999999)
2990000^3150521.182242
"BLD",9370,"KRN",.84,"NM","B",7981003.002,1)

"BLD",9370,"KRN",.84,"NM","B",7981008.002,2)

"BLD",9370,"KRN",.84,"NM","B",7981011.002,3)

"BLD",9370,"KRN",.84,"NM","B",7981012.002,4)

"BLD",9370,"KRN",.84,"NM","B",7981013.002,5)

"BLD",9370,"KRN",.84,"NM","B",7981015.002,6)

"BLD",9370,"KRN",.84,"NM","B",7981018.002,9)

"BLD",9370,"KRN",.84,"NM","B",7981020.002,7)

"BLD",9370,"KRN",.84,"NM","B",7981021.001,12)

"BLD",9370,"KRN",.84,"NM","B",7981021.002,13)

"BLD",9370,"KRN",.84,"NM","B",7981022.002,8)

"BLD",9370,"KRN",.84,"NM","B",7981023.001,14)

"BLD",9370,"KRN",.84,"NM","B",7981023.002,15)

"BLD",9370,"KRN",.84,"NM","B",7981999.001,11)

"BLD",9370,"KRN",.84,"NM","B",7981999.002,10)

"BLD",9370,"KRN",3.6,0)
3.6
"BLD",9370,"KRN",3.8,0)
3.8
"BLD",9370,"KRN",9.2,0)
9.2
"BLD",9370,"KRN",9.8,0)
9.8
"BLD",9370,"KRN",9.8,"NM",0)
^9.68A^16^15
"BLD",9370,"KRN",9.8,"NM",1,0)
RORSET02^^0^B19313536
"BLD",9370,"KRN",9.8,"NM",1,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",2,0)
RORXU002^^0^B144602530
"BLD",9370,"KRN",9.8,"NM",2,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",3,0)
RORX019^^0^B188558484
"BLD",9370,"KRN",9.8,"NM",3,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",4,0)
RORX021^^0^B26620213
"BLD",9370,"KRN",9.8,"NM",4,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",5,0)
RORX021A^^0^B151761658
"BLD",9370,"KRN",9.8,"NM",5,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",7,0)
RORUPD09^^0^B15763662
"BLD",9370,"KRN",9.8,"NM",7,99999999)
2990000^3150414.170031
"BLD",9370,"KRN",9.8,"NM",8,0)
RORXU005^^0^B44286894
"BLD",9370,"KRN",9.8,"NM",8,99999999)
2990000^3150422.174717
"BLD",9370,"KRN",9.8,"NM",9,0)
RORUPD01^^0^B84632669
"BLD",9370,"KRN",9.8,"NM",9,99999999)
2990000^3150422.175744
"BLD",9370,"KRN",9.8,"NM",10,0)
RORUPDUT^^0^B73706104
"BLD",9370,"KRN",9.8,"NM",10,99999999)
2990000^3150422.175744
"BLD",9370,"KRN",9.8,"NM",11,0)
RORUPR1^^0^B82778880
"BLD",9370,"KRN",9.8,"NM",11,99999999)
2990000^3150422.175744
"BLD",9370,"KRN",9.8,"NM",12,0)
RORUTL20^^0^B24633226
"BLD",9370,"KRN",9.8,"NM",12,99999999)
2990000^3150422.180359
"BLD",9370,"KRN",9.8,"NM",13,0)
RORP026^^0^B180985006
"BLD",9370,"KRN",9.8,"NM",13,99999999)
2990000^3150422.180746
"BLD",9370,"KRN",9.8,"NM",14,0)
RORUTL07^^0^B15158256
"BLD",9370,"KRN",9.8,"NM",14,99999999)
2990000^3150423.08304
"BLD",9370,"KRN",9.8,"NM",15,0)
RORUTL11^^0^B4300869
"BLD",9370,"KRN",9.8,"NM",15,99999999)
2990000^3150513.191356
"BLD",9370,"KRN",9.8,"NM",16,0)
RORUTL15^^0^B58131600
"BLD",9370,"KRN",9.8,"NM",16,99999999)
2990000^3150615.172445
"BLD",9370,"KRN",9.8,"NM","B","RORP026",13)

"BLD",9370,"KRN",9.8,"NM","B","RORSET02",1)

"BLD",9370,"KRN",9.8,"NM","B","RORUPD01",9)

"BLD",9370,"KRN",9.8,"NM","B","RORUPD09",7)

"BLD",9370,"KRN",9.8,"NM","B","RORUPDUT",10)

"BLD",9370,"KRN",9.8,"NM","B","RORUPR1",11)

"BLD",9370,"KRN",9.8,"NM","B","RORUTL07",14)

"BLD",9370,"KRN",9.8,"NM","B","RORUTL11",15)

"BLD",9370,"KRN",9.8,"NM","B","RORUTL15",16)

"BLD",9370,"KRN",9.8,"NM","B","RORUTL20",12)

"BLD",9370,"KRN",9.8,"NM","B","RORX019",3)

"BLD",9370,"KRN",9.8,"NM","B","RORX021",4)

"BLD",9370,"KRN",9.8,"NM","B","RORX021A",5)

"BLD",9370,"KRN",9.8,"NM","B","RORXU002",2)

"BLD",9370,"KRN",9.8,"NM","B","RORXU005",8)

"BLD",9370,"KRN",19,0)
19
"BLD",9370,"KRN",19.1,0)
19.1
"BLD",9370,"KRN",101,0)
101
"BLD",9370,"KRN",409.61,0)
409.61
"BLD",9370,"KRN",771,0)
771
"BLD",9370,"KRN",779.2,0)
779.2
"BLD",9370,"KRN",870,0)
870
"BLD",9370,"KRN",8989.51,0)
8989.51
"BLD",9370,"KRN",8989.52,0)
8989.52
"BLD",9370,"KRN",8994,0)
8994
"BLD",9370,"KRN","B",.4,.4)

"BLD",9370,"KRN","B",.401,.401)

"BLD",9370,"KRN","B",.402,.402)

"BLD",9370,"KRN","B",.403,.403)

"BLD",9370,"KRN","B",.5,.5)

"BLD",9370,"KRN","B",.84,.84)

"BLD",9370,"KRN","B",3.6,3.6)

"BLD",9370,"KRN","B",3.8,3.8)

"BLD",9370,"KRN","B",9.2,9.2)

"BLD",9370,"KRN","B",9.8,9.8)

"BLD",9370,"KRN","B",19,19)

"BLD",9370,"KRN","B",19.1,19.1)

"BLD",9370,"KRN","B",101,101)

"BLD",9370,"KRN","B",409.61,409.61)

"BLD",9370,"KRN","B",771,771)

"BLD",9370,"KRN","B",779.2,779.2)

"BLD",9370,"KRN","B",870,870)

"BLD",9370,"KRN","B",8989.51,8989.51)

"BLD",9370,"KRN","B",8989.52,8989.52)

"BLD",9370,"KRN","B",8994,8994)

"BLD",9370,"PRE")
RORP026
"BLD",9370,"QUES",0)
^9.62^5^5
"BLD",9370,"QUES",1,0)
POSQ1
"BLD",9370,"QUES",1,1)
N^0:10:0
"BLD",9370,"QUES",1,"A")
Maximum number of registry update subtasks 
"BLD",9370,"QUES",1,"B")
5
"BLD",9370,"QUES",1,"M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"BLD",9370,"QUES",2,0)
POSQ2
"BLD",9370,"QUES",2,1)
Y
"BLD",9370,"QUES",2,"A")
Suspend the post-install during the peak hours
"BLD",9370,"QUES",2,"B")
NO
"BLD",9370,"QUES",2,"M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"BLD",9370,"QUES",3,0)
POSQ3
"BLD",9370,"QUES",3,1)
D^::R
"BLD",9370,"QUES",3,"A")
Suspension start time
"BLD",9370,"QUES",3,"B")
7:00AM
"BLD",9370,"QUES",3,"M")
W ! D POSQ3^RORP024(.DIR)
"BLD",9370,"QUES",4,0)
POSQ4
"BLD",9370,"QUES",4,1)
D
"BLD",9370,"QUES",4,"A")
Suspension end time
"BLD",9370,"QUES",4,"B")
6:00PM
"BLD",9370,"QUES",4,"M")
W ! D POSQ4^RORP024(.DIR)
"BLD",9370,"QUES",5,0)
POSQ5
"BLD",9370,"QUES",5,1)
D^::FRX
"BLD",9370,"QUES",5,"A")
Date/Time to run the new registry initialize task
"BLD",9370,"QUES",5,"M")
D POSQ5^RORP024(.DIR)
"BLD",9370,"QUES",5,"Q")
The date/time entered must be at least 15 minutes in the future.
"BLD",9370,"QUES","B","POSQ1",1)

"BLD",9370,"QUES","B","POSQ2",2)

"BLD",9370,"QUES","B","POSQ3",3)

"BLD",9370,"QUES","B","POSQ4",4)

"BLD",9370,"QUES","B","POSQ5",5)

"BLD",9370,"REQB",0)
^9.611^1^1
"BLD",9370,"REQB",1,0)
ROR*1.5*25^2
"BLD",9370,"REQB","B","ROR*1.5*25",1)

"DATA",798.1,28,0)
VA TOTAL KNEE^^^Total Knee Replacement^^1^^^^^0^^^1
"DATA",798.1,28,1,0)
^798.13^9^9
"DATA",798.1,28,1,1,0)
VA TOTAL KNEE CPT PTF PROC
"DATA",798.1,28,1,2,0)
VA TOTAL KNEE ICD PTF PROC
"DATA",798.1,28,1,3,0)
VA TOTAL KNEE ICD PTF PROC (ICD10)
"DATA",798.1,28,1,4,0)
VA TOTAL KNEE PTF
"DATA",798.1,28,1,5,0)
VA TOTAL KNEE PTF (ICD10)
"DATA",798.1,28,1,6,0)
VA TOTAL KNEE VPOV
"DATA",798.1,28,1,7,0)
VA TOTAL KNEE VPOV (ICD10)
"DATA",798.1,28,1,8,0)
VA TOTAL KNEE PROBLEM
"DATA",798.1,28,1,9,0)
VA TOTAL KNEE PROBLEM (ICD10)
"DATA",798.1,28,6)
1
"DATA",798.1,28,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,28,11)
7
"DATA",798.1,28,18,0)
^798.118^2^2
"DATA",798.1,28,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,28,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,28,19)
^
"DATA",798.1,28,21)
^^^
"DATA",798.1,28,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.1,29,0)
VA TOTAL HIP^^^Total Hip Replacement^^1^^^^^0^^^1
"DATA",798.1,29,1,0)
^798.13^9^9
"DATA",798.1,29,1,1,0)
VA TOTAL HIP ICD PTF PROC
"DATA",798.1,29,1,2,0)
VA TOTAL HIP ICD PTF PROC (ICD10)
"DATA",798.1,29,1,3,0)
VA TOTAL HIP CPT PTF PROC
"DATA",798.1,29,1,4,0)
VA TOTAL HIP PTF
"DATA",798.1,29,1,5,0)
VA TOTAL HIP PTF (ICD10)
"DATA",798.1,29,1,6,0)
VA TOTAL HIP VPOV
"DATA",798.1,29,1,7,0)
VA TOTAL HIP VPOV (ICD10)
"DATA",798.1,29,1,8,0)
VA TOTAL HIP PROBLEM
"DATA",798.1,29,1,9,0)
VA TOTAL HIP PROBLEM (ICD10)
"DATA",798.1,29,6)
1
"DATA",798.1,29,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,29,11)
7
"DATA",798.1,29,18,0)
^798.118^2^2
"DATA",798.1,29,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,29,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,29,19)

"DATA",798.1,29,21)
^^^
"DATA",798.1,29,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.2,191,0)
VA TOTAL KNEE ICD PTF PROC^45^ICD-9 code in inpatient file^1
"DATA",798.2,191,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,191,4,0)
^798.26^^
"DATA",798.2,191,5)
2
"DATA",798.2,192,0)
VA TOTAL KNEE ICD PTF PROC (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,192,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,192,5)
31
"DATA",798.2,193,0)
VA TOTAL KNEE CPT PTF PROC^45^CPT code in inpatient file^1
"DATA",798.2,193,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,193,4,0)
^798.26^1^1
"DATA",798.2,193,4,1,0)
153^I
"DATA",798.2,194,0)
VA TOTAL HIP CPT PTF PROC^45^CPT code in inpatient file^1
"DATA",798.2,194,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,194,4,0)
^798.26^1^1
"DATA",798.2,194,4,1,0)
153^I
"DATA",798.2,195,0)
VA TOTAL HIP ICD PTF PROC^45^ICD-9 code in inpatient file^1
"DATA",798.2,195,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,195,5)
2
"DATA",798.2,196,0)
VA TOTAL HIP ICD PTF PROC (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,196,1)
$$PTFRULE1^RORUPD09(REGIEN)
"DATA",798.2,196,5)
31
"DATA",798.2,197,0)
VA TOTAL HIP PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,197,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,197,5)
1
"DATA",798.2,198,0)
VA TOTAL KNEE PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,198,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,198,5)
1
"DATA",798.2,199,0)
VA TOTAL HIP PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,199,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,199,5)
30
"DATA",798.2,200,0)
VA TOTAL KNEE PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,200,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,200,5)
30
"DATA",798.2,201,0)
VA TOTAL HIP VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,201,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,201,3,0)
^798.25^1^1^3151008^^^^
"DATA",798.2,201,3,1,0)
 
"DATA",798.2,201,5)
1
"DATA",798.2,202,0)
VA TOTAL HIP VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,202,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,202,5)
30
"DATA",798.2,203,0)
VA TOTAL KNEE VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,203,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,203,3,0)
^798.25^1^1^3151008^^^^
"DATA",798.2,203,3,1,0)
 
"DATA",798.2,203,5)
1
"DATA",798.2,204,0)
VA TOTAL KNEE VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,204,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,204,5)
30
"DATA",798.2,205,0)
VA TOTAL HIP PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,205,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,205,5)
1
"DATA",798.2,206,0)
VA TOTAL HIP PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,206,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,206,5)
30
"DATA",798.2,207,0)
VA TOTAL KNEE PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,207,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,207,5)
1
"DATA",798.2,208,0)
VA TOTAL KNEE PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,208,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,208,5)
30
"DATA",799.31,290,0)
SVR
"FIA",798.1)
ROR REGISTRY PARAMETERS
"FIA",798.1,0)
^ROR(798.1,
"FIA",798.1,0,0)
798.1Is
"FIA",798.1,0,1)
n^n^f^^y^^y^o^n
"FIA",798.1,0,10)

"FIA",798.1,0,11)
N ROR S ROR=$P(^(0),U) I ROR["TOTAL KNEE"!(ROR["TOTAL HIP")
"FIA",798.1,0,"RLRO")

"FIA",798.1,0,"VR")
1.5^ROR
"FIA",798.1,798.1)
0
"FIA",798.1,798.11)
0
"FIA",798.1,798.112)
0
"FIA",798.1,798.114)
0
"FIA",798.1,798.118)
0
"FIA",798.1,798.12)
0
"FIA",798.1,798.122)
0
"FIA",798.1,798.128)
0
"FIA",798.1,798.129)
0
"FIA",798.1,798.13)
0
"FIA",798.1,798.15)
0
"FIA",798.2)
ROR SELECTION RULE
"FIA",798.2,0)
^ROR(798.2,
"FIA",798.2,0,0)
798.2I
"FIA",798.2,0,1)
y^n^f^^y^^y^o^n
"FIA",798.2,0,10)

"FIA",798.2,0,11)
I $P($G(^(0)),U)["VA TOTAL"
"FIA",798.2,0,"RLRO")

"FIA",798.2,0,"VR")
1.5^ROR
"FIA",798.2,798.2)
0
"FIA",798.2,798.25)
0
"FIA",798.2,798.26)
0
"FIA",798.5)
ROR ICD SEARCH
"FIA",798.5,0)
^ROR(798.5,
"FIA",798.5,0,0)
798.5P
"FIA",798.5,0,1)
y^n^f^^^^n^^n
"FIA",798.5,0,10)

"FIA",798.5,0,11)

"FIA",798.5,0,"RLRO")

"FIA",798.5,0,"VR")
1.5^ROR
"FIA",798.5,798.5)
0
"FIA",798.5,798.51)
0
"FIA",798.5,798.52)
0
"FIA",798.5,798.53)
0
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^n^f^^n^^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)
I $P(^(0),U)="SVR"
"FIA",799.31,0,"RLRO")

"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FRV1",798.2,"191,5",1)
ICD-9 Proc
"FRV1",798.2,"191,5",1,"F")
;ICDS(
"FRV1",798.2,"192,5",1)
ICD-10-PCS
"FRV1",798.2,"192,5",1,"F")
;ICDS(
"FRV1",798.2,"195,5",1)
ICD-9 Proc
"FRV1",798.2,"195,5",1,"F")
;ICDS(
"FRV1",798.2,"196,5",1)
ICD-10-PCS
"FRV1",798.2,"196,5",1,"F")
;ICDS(
"FRV1",798.2,"197,5",1)
ICD-9-CM
"FRV1",798.2,"197,5",1,"F")
;ICDS(
"FRV1",798.2,"198,5",1)
ICD-9-CM
"FRV1",798.2,"198,5",1,"F")
;ICDS(
"FRV1",798.2,"199,5",1)
ICD-10-CM
"FRV1",798.2,"199,5",1,"F")
;ICDS(
"FRV1",798.2,"200,5",1)
ICD-10-CM
"FRV1",798.2,"200,5",1,"F")
;ICDS(
"FRV1",798.2,"201,5",1)
ICD-9-CM
"FRV1",798.2,"201,5",1,"F")
;ICDS(
"FRV1",798.2,"202,5",1)
ICD-10-CM
"FRV1",798.2,"202,5",1,"F")
;ICDS(
"FRV1",798.2,"203,5",1)
ICD-9-CM
"FRV1",798.2,"203,5",1,"F")
;ICDS(
"FRV1",798.2,"204,5",1)
ICD-10-CM
"FRV1",798.2,"204,5",1,"F")
;ICDS(
"FRV1",798.2,"205,5",1)
ICD-9-CM
"FRV1",798.2,"205,5",1,"F")
;ICDS(
"FRV1",798.2,"206,5",1)
ICD-10-CM
"FRV1",798.2,"206,5",1,"F")
;ICDS(
"FRV1",798.2,"207,5",1)
ICD-9-CM
"FRV1",798.2,"207,5",1,"F")
;ICDS(
"FRV1",798.2,"208,5",1)
ICD-10-CM
"FRV1",798.2,"208,5",1,"F")
;ICDS(
"INI")
PRE^RORP026
"INIT")
POST^RORP026
"IX",798.1,798.1,"B",0)
798.1^B^Uniqueness Index for Key 'A' of File #798.1^R^^F^IR^I^798.1^^^^^LS
"IX",798.1,798.1,"B",1)
S ^ROR(798.1,"B",X,DA)=""
"IX",798.1,798.1,"B",2)
K ^ROR(798.1,"B",X,DA)
"IX",798.1,798.1,"B",2.5)
K ^ROR(798.1,"B")
"IX",798.1,798.1,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.1,"B",11.1,1,0)
1^F^798.1^.01^^1
"IX",798.1,798.11,"B",0)
798.11^B^Uniqueness Index for Key 'A' of Subfile #798.11^R^^F^IR^I^798.11^^^^^LS
"IX",798.1,798.11,"B",1)
S ^ROR(798.1,DA(1),3,"B",X,DA)=""
"IX",798.1,798.11,"B",2)
K ^ROR(798.1,DA(1),3,"B",X,DA)
"IX",798.1,798.11,"B",2.5)
K ^ROR(798.1,DA(1),3,"B")
"IX",798.1,798.11,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.11,"B",11.1,1,0)
1^F^798.11^.01^^1
"IX",798.1,798.118,"B",0)
798.118^B^Uniqueness Index for Key 'A' of Subfile #798.118^R^^F^IR^I^798.118^^^^^LS
"IX",798.1,798.118,"B",1)
S ^ROR(798.1,DA(1),18,"B",X,DA)=""
"IX",798.1,798.118,"B",2)
K ^ROR(798.1,DA(1),18,"B",X,DA)
"IX",798.1,798.118,"B",2.5)
K ^ROR(798.1,DA(1),18,"B")
"IX",798.1,798.118,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.118,"B",11.1,1,0)
1^F^798.118^.01^^1
"IX",798.1,798.122,"B",0)
798.122^B^Uniqueness Index for Key 'A' of Subfile #798.122^R^^F^IR^I^798.122^^^^^LS
"IX",798.1,798.122,"B",1)
S ^ROR(798.1,DA(1),22,"B",X,DA)=""
"IX",798.1,798.122,"B",2)
K ^ROR(798.1,DA(1),22,"B",X,DA)
"IX",798.1,798.122,"B",2.5)
K ^ROR(798.1,DA(1),22,"B")
"IX",798.1,798.122,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.122,"B",11.1,1,0)
1^F^798.122^.01^^1
"IX",798.1,798.128,"G",0)
798.128^G^Lab Group and Local Test Name^R^^R^IR^I^798.128^^^^^LS
"IX",798.1,798.128,"G",1)
S ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)=""
"IX",798.1,798.128,"G",2)
K ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)
"IX",798.1,798.128,"G",2.5)
K ^ROR(798.1,DA(1),28,"G")
"IX",798.1,798.128,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.128,"G",11.1,1,0)
1^F^798.128^.02^^1^F
"IX",798.1,798.128,"G",11.1,1,2)
 
"IX",798.1,798.128,"G",11.1,1,3)
 
"IX",798.1,798.128,"G",11.1,3,0)
2^F^798.128^.01^^2^F
"IX",798.1,798.128,"G",11.1,3,3)
 
"IX",798.1,798.129,"G",0)
798.129^G^Drug Group and Local Drug Name^R^^R^IR^I^798.129^^^^^LS
"IX",798.1,798.129,"G",1)
S ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)=""
"IX",798.1,798.129,"G",2)
K ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)
"IX",798.1,798.129,"G",2.5)
K ^ROR(798.1,DA(1),29,"G")
"IX",798.1,798.129,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.129,"G",11.1,1,0)
1^F^798.129^.02^^1^F
"IX",798.1,798.129,"G",11.1,1,3)
 
"IX",798.1,798.129,"G",11.1,3,0)
2^F^798.129^.01^^2^F
"IX",798.1,798.129,"G",11.1,3,3)
 
"IX",798.1,798.13,"B",0)
798.13^B^Uniqueness Index for Key 'A' of Subfile #798.13^R^^F^IR^I^798.13^^^^^LS
"IX",798.1,798.13,"B",1)
S ^ROR(798.1,DA(1),1,"B",X,DA)=""
"IX",798.1,798.13,"B",2)
K ^ROR(798.1,DA(1),1,"B",X,DA)
"IX",798.1,798.13,"B",2.5)
K ^ROR(798.1,DA(1),1,"B")
"IX",798.1,798.13,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.13,"B",11.1,1,0)
1^F^798.13^.01^^1
"IX",798.2,798.2,"B",0)
798.2^B^Uniqueness Index for the "A" Key of File #798.2^R^^F^IR^I^798.2^^^^^LS
"IX",798.2,798.2,"B",1)
S ^ROR(798.2,"B",X,DA)=""
"IX",798.2,798.2,"B",2)
K ^ROR(798.2,"B",X,DA)
"IX",798.2,798.2,"B",2.5)
K ^ROR(798.2,"B")
"IX",798.2,798.2,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.2,"B",11.1,1,0)
1^F^798.2^.01^^1
"IX",798.2,798.26,"B",0)
798.26^B^Uniqueness Index for the "A" Key of Subfile #798.26^R^^F^IR^I^798.26^^^^^LS
"IX",798.2,798.26,"B",1)
S ^ROR(798.2,DA(1),4,"B",X,DA)=""
"IX",798.2,798.26,"B",2)
K ^ROR(798.2,DA(1),4,"B",X,DA)
"IX",798.2,798.26,"B",2.5)
K ^ROR(798.2,DA(1),4,"B")
"IX",798.2,798.26,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.26,"B",11.1,1,0)
1^F^798.26^.01^^1
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"KEY",798.1,798.1,"A",0)
798.1^A^S^201
"KEY",798.1,798.1,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.1,"A",2,1,0)
.01^798.1^1
"KEY",798.1,798.11,"A",0)
798.11^A^S^209
"KEY",798.1,798.11,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.11,"A",2,1,0)
.01^798.11^1
"KEY",798.1,798.118,"A",0)
798.118^A^S^210
"KEY",798.1,798.118,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.118,"A",2,1,0)
.01^798.118^1
"KEY",798.1,798.122,"A",0)
798.122^A^S^747
"KEY",798.1,798.122,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.122,"A",2,1,0)
.01^798.122^1
"KEY",798.1,798.128,"G",0)
798.128^G^P^203
"KEY",798.1,798.128,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.128,"G",2,1,0)
.02^798.128^1
"KEY",798.1,798.128,"G",2,2,0)
.01^798.128^2
"KEY",798.1,798.129,"G",0)
798.129^G^P^207
"KEY",798.1,798.129,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.129,"G",2,1,0)
.02^798.129^1
"KEY",798.1,798.129,"G",2,2,0)
.01^798.129^2
"KEY",798.1,798.13,"A",0)
798.13^A^S^202
"KEY",798.1,798.13,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.13,"A",2,1,0)
.01^798.13^1
"KEY",798.2,798.2,"A",0)
798.2^A^S^204
"KEY",798.2,798.2,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.2,"A",2,1,0)
.01^798.2^1
"KEY",798.2,798.26,"A",0)
798.26^A^S^205
"KEY",798.2,798.26,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.26,"A",2,1,0)
.01^798.26^1
"KEY",799.31,799.31,"A",0)
799.31^A^S^748
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEYPTR",798.1,798.1,"A")
798.1^B
"KEYPTR",798.1,798.11,"A")
798.11^B
"KEYPTR",798.1,798.118,"A")
798.118^B
"KEYPTR",798.1,798.122,"A")
798.122^B
"KEYPTR",798.1,798.128,"G")
798.128^G
"KEYPTR",798.1,798.129,"G")
798.129^G
"KEYPTR",798.1,798.13,"A")
798.13^B
"KEYPTR",798.2,798.2,"A")
798.2^B
"KEYPTR",798.2,798.26,"A")
798.26^B
"KEYPTR",799.31,799.31,"A")
799.31^B
"KRN",.84,7981003.002,-1)
0^1
"KRN",.84,7981003.002,0)
7981003.002^2^^CLINICAL CASE REGISTRIES^General Utiliz. and Demogr. (CSV)
"KRN",.84,7981003.002,2,0)
^.844^185^185^3150520^^^^
"KRN",.84,7981003.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981003.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981003.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981003.002,2,4,0)
>
"KRN",.84,7981003.002,2,5,0)
 
"KRN",.84,7981003.002,2,6,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981003.002,2,7,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981003.002,2,8,0)
 
"KRN",.84,7981003.002,2,9,0)
<xsl:template match="/">
"KRN",.84,7981003.002,2,10,0)
 <xsl:text>General Utilization and Demographics (Patients)</xsl:text>
"KRN",.84,7981003.002,2,11,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981003.002,2,12,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981003.002,2,13,0)
 <xsl:text>General Utilization and Demographics (Summary)</xsl:text>
"KRN",.84,7981003.002,2,14,0)
 <xsl:call-template name="ReportSummary"/>
"KRN",.84,7981003.002,2,15,0)
</xsl:template>
"KRN",.84,7981003.002,2,16,0)
 
"KRN",.84,7981003.002,2,17,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981003.002,2,18,0)
 
"KRN",.84,7981003.002,2,19,0)
<xsl:template name="SummaryLine">
"KRN",.84,7981003.002,2,20,0)
 <xsl:param name="line" select="."/>
"KRN",.84,7981003.002,2,21,0)
 <xsl:value-of select="$line/@ID"/>
"KRN",.84,7981003.002,2,22,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981003.002,2,23,0)
 <xsl:value-of select="$line"/>
"KRN",.84,7981003.002,2,24,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981003.002,2,25,0)
 <xsl:value-of select="$line/@COUNT"/>
"KRN",.84,7981003.002,2,26,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,27,0)
</xsl:template>
"KRN",.84,7981003.002,2,28,0)
 
"KRN",.84,7981003.002,2,29,0)
<!--[ COLUMN HEADERS ]-->
"KRN",.84,7981003.002,2,30,0)
 
"KRN",.84,7981003.002,2,31,0)
<xsl:template match="COLUMN[@NAME='RISK']">
"KRN",.84,7981003.002,2,32,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981003.002,2,33,0)
  <xsl:with-param name="title" select="'Risk Factors'"/>
"KRN",.84,7981003.002,2,34,0)
 </xsl:call-template>
"KRN",.84,7981003.002,2,35,0)
</xsl:template>
"KRN",.84,7981003.002,2,36,0)
 
"KRN",.84,7981003.002,2,37,0)
<xsl:template match="COLUMN[@NAME='UTIL']">
"KRN",.84,7981003.002,2,38,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981003.002,2,39,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981003.002,2,40,0)
 </xsl:call-template>
"KRN",.84,7981003.002,2,41,0)
</xsl:template>
"KRN",.84,7981003.002,2,42,0)
 
"KRN",.84,7981003.002,2,43,0)
<!--[ SUMMARY TABLES ]--> 
"KRN",.84,7981003.002,2,44,0)
 
"KRN",.84,7981003.002,2,45,0)
<xsl:template match="SUMMARY/AGE_SUMMARY">
"KRN",.84,7981003.002,2,46,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,47,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,48,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,49,0)
  <xsl:text>[Age Summary]</xsl:text>
"KRN",.84,7981003.002,2,50,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,51,0)
  <xsl:text>,Age,Count (Value)</xsl:text>
"KRN",.84,7981003.002,2,52,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,53,0)
  <xsl:for-each select="$summary/AGE">
"KRN",.84,7981003.002,2,54,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,55,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,56,0)
 </xsl:if>
"KRN",.84,7981003.002,2,57,0)
</xsl:template>
"KRN",.84,7981003.002,2,58,0)
 
"KRN",.84,7981003.002,2,59,0)
<xsl:template match="SUMMARY/CONFDT_SUMMARY">
"KRN",.84,7981003.002,2,60,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,61,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,62,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,63,0)
  <xsl:text>[Confirmation Date Summary]</xsl:text>
"KRN",.84,7981003.002,2,64,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,65,0)
  <xsl:text>,Confirmation Date,Count</xsl:text>
"KRN",.84,7981003.002,2,66,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,67,0)
  <xsl:for-each select="$summary/CONFDT">
"KRN",.84,7981003.002,2,68,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,69,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,70,0)
 </xsl:if>
"KRN",.84,7981003.002,2,71,0)
</xsl:template>
"KRN",.84,7981003.002,2,72,0)
 
"KRN",.84,7981003.002,2,73,0)
<xsl:template match="SUMMARY/DOB_SUMMARY">
"KRN",.84,7981003.002,2,74,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,75,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,76,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,77,0)
  <xsl:text>[Date of Birth Summary]</xsl:text>
"KRN",.84,7981003.002,2,78,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,79,0)
  <xsl:text>,Date of Birth,Count</xsl:text>
"KRN",.84,7981003.002,2,80,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,81,0)
  <xsl:for-each select="$summary/DOB">
"KRN",.84,7981003.002,2,82,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,83,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,84,0)
 </xsl:if>
"KRN",.84,7981003.002,2,85,0)
</xsl:template>
"KRN",.84,7981003.002,2,86,0)
 
"KRN",.84,7981003.002,2,87,0)
<xsl:template match="SUMMARY/DOD_SUMMARY">
"KRN",.84,7981003.002,2,88,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,89,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,90,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,91,0)
  <xsl:text>[Date of Death Summary]</xsl:text>
"KRN",.84,7981003.002,2,92,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,93,0)
  <xsl:text>,Date of Death,Count</xsl:text>
"KRN",.84,7981003.002,2,94,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,95,0)
  <xsl:for-each select="$summary/DOD">
"KRN",.84,7981003.002,2,96,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,97,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,98,0)
 </xsl:if>
"KRN",.84,7981003.002,2,99,0)
</xsl:template>
"KRN",.84,7981003.002,2,100,0)
 
"KRN",.84,7981003.002,2,101,0)
<xsl:template match="SUMMARY/ETHN_SUMMARY">
"KRN",.84,7981003.002,2,102,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,103,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,104,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,105,0)
  <xsl:text>[Ethnicity Summary]</xsl:text>
"KRN",.84,7981003.002,2,106,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,107,0)
  <xsl:text>,Ethnicity,Count</xsl:text>
"KRN",.84,7981003.002,2,108,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,109,0)
  <xsl:for-each select="$summary/ETHN">
"KRN",.84,7981003.002,2,110,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,111,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,112,0)
 </xsl:if>
"KRN",.84,7981003.002,2,113,0)
</xsl:template>
"KRN",.84,7981003.002,2,114,0)
 
"KRN",.84,7981003.002,2,115,0)
<xsl:template match="SUMMARY/RACE_SUMMARY">
"KRN",.84,7981003.002,2,116,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,117,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,118,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,119,0)
  <xsl:text>[Race Summary]</xsl:text>
"KRN",.84,7981003.002,2,120,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,121,0)
  <xsl:text>,Race,Count</xsl:text>
"KRN",.84,7981003.002,2,122,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,123,0)
  <xsl:for-each select="$summary/RACE">
"KRN",.84,7981003.002,2,124,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,125,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,126,0)
 </xsl:if>
"KRN",.84,7981003.002,2,127,0)
</xsl:template>
"KRN",.84,7981003.002,2,128,0)
 
"KRN",.84,7981003.002,2,129,0)
<xsl:template match="SUMMARY/RISK_FACTORS">
"KRN",.84,7981003.002,2,130,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,131,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,132,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,133,0)
  <xsl:text>[Risk Factors]</xsl:text>
"KRN",.84,7981003.002,2,134,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,135,0)
  <xsl:text>Code,Description,Count</xsl:text>
"KRN",.84,7981003.002,2,136,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,137,0)
  <xsl:for-each select="$summary/RISK">
"KRN",.84,7981003.002,2,138,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,139,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,140,0)
 </xsl:if>
"KRN",.84,7981003.002,2,141,0)
</xsl:template>
"KRN",.84,7981003.002,2,142,0)
 
"KRN",.84,7981003.002,2,143,0)
<xsl:template match="SUMMARY/SELDT_SUMMARY">
"KRN",.84,7981003.002,2,144,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,145,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,146,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,147,0)
  <xsl:text>[Selection Date Summary]</xsl:text>
"KRN",.84,7981003.002,2,148,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,149,0)
  <xsl:text>,Selection Date,Count</xsl:text>
"KRN",.84,7981003.002,2,150,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,151,0)
  <xsl:for-each select="$summary/SELDT">
"KRN",.84,7981003.002,2,152,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,153,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,154,0)
 </xsl:if>
"KRN",.84,7981003.002,2,155,0)
</xsl:template>
"KRN",.84,7981003.002,2,156,0)
 
"KRN",.84,7981003.002,2,157,0)
<xsl:template match="SUMMARY/SEX_SUMMARY">
"KRN",.84,7981003.002,2,158,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,159,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,160,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,161,0)
  <xsl:text>[Sex Summary]</xsl:text>
"KRN",.84,7981003.002,2,162,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,163,0)
  <xsl:text>,Sex,Count</xsl:text>
"KRN",.84,7981003.002,2,164,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,165,0)
  <xsl:for-each select="$summary/SEX">
"KRN",.84,7981003.002,2,166,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,167,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,168,0)
 </xsl:if>
"KRN",.84,7981003.002,2,169,0)
</xsl:template>
"KRN",.84,7981003.002,2,170,0)
 
"KRN",.84,7981003.002,2,171,0)
<xsl:template match="SUMMARY/UTIL_CODES">
"KRN",.84,7981003.002,2,172,0)
 <xsl:param name="summary" select="."/>
"KRN",.84,7981003.002,2,173,0)
 <xsl:if test="$summary/*[1]">
"KRN",.84,7981003.002,2,174,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,175,0)
  <xsl:text>[Utilization]</xsl:text>
"KRN",.84,7981003.002,2,176,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,177,0)
  <xsl:text>Code,Description,Count</xsl:text>
"KRN",.84,7981003.002,2,178,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981003.002,2,179,0)
  <xsl:for-each select="$summary/UTIL">
"KRN",.84,7981003.002,2,180,0)
   <xsl:call-template name="SummaryLine"/>
"KRN",.84,7981003.002,2,181,0)
  </xsl:for-each>
"KRN",.84,7981003.002,2,182,0)
 </xsl:if>
"KRN",.84,7981003.002,2,183,0)
</xsl:template>
"KRN",.84,7981003.002,2,184,0)
 
"KRN",.84,7981003.002,2,185,0)
</xsl:stylesheet>
"KRN",.84,7981008.002,-1)
0^2
"KRN",.84,7981008.002,0)
7981008.002^2^^CLINICAL CASE REGISTRIES^VERA Reimbursement Report (CSV)
"KRN",.84,7981008.002,2,0)
^.844^72^72^3150520^^^
"KRN",.84,7981008.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981008.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981008.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981008.002,2,4,0)
>
"KRN",.84,7981008.002,2,5,0)
 
"KRN",.84,7981008.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981008.002,2,7,0)
 
"KRN",.84,7981008.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981008.002,2,9,0)
 <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981008.002,2,10,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981008.002,2,11,0)
</xsl:template>
"KRN",.84,7981008.002,2,12,0)
 
"KRN",.84,7981008.002,2,13,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981008.002,2,14,0)
 <xsl:text>VERA Reimbursement Report (ARV Drugs)</xsl:text>
"KRN",.84,7981008.002,2,15,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981008.002,2,16,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981008.002,2,17,0)
</xsl:template>
"KRN",.84,7981008.002,2,18,0)
 
"KRN",.84,7981008.002,2,19,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981008.002,2,20,0)
 <xsl:text>VERA Reimbursement Report (Patients)</xsl:text>
"KRN",.84,7981008.002,2,21,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981008.002,2,22,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981008.002,2,23,0)
</xsl:template>
"KRN",.84,7981008.002,2,24,0)
 
"KRN",.84,7981008.002,2,25,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981008.002,2,26,0)
 
"KRN",.84,7981008.002,2,27,0)
<xsl:template match="COLUMN[@NAME='AIDSTAT']">
"KRN",.84,7981008.002,2,28,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,29,0)
  <xsl:with-param name="title" select="'AIDS OI'"/>
"KRN",.84,7981008.002,2,30,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,31,0)
</xsl:template>
"KRN",.84,7981008.002,2,32,0)
 
"KRN",.84,7981008.002,2,33,0)
<xsl:template match="COLUMN[@NAME='ARV']">
"KRN",.84,7981008.002,2,34,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,35,0)
  <xsl:with-param name="title" select="'ARV Drugs'"/>
"KRN",.84,7981008.002,2,36,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,37,0)
</xsl:template>
"KRN",.84,7981008.002,2,38,0)
 
"KRN",.84,7981008.002,2,39,0)
<xsl:template match="COLUMN[@NAME='COMPLEX']">
"KRN",.84,7981008.002,2,40,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,41,0)
  <xsl:with-param name="title" select="'Complex Care'"/>
"KRN",.84,7981008.002,2,42,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,43,0)
</xsl:template>
"KRN",.84,7981008.002,2,44,0)
 
"KRN",.84,7981008.002,2,45,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981008.002,2,46,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,47,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981008.002,2,48,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,49,0)
</xsl:template>
"KRN",.84,7981008.002,2,50,0)
 
"KRN",.84,7981008.002,2,51,0)
<xsl:template match="COLUMN[@NAME='NPAIDS']">
"KRN",.84,7981008.002,2,52,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,53,0)
  <xsl:with-param name="title" select="'Number of AIDS OI Patients'"/>
"KRN",.84,7981008.002,2,54,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,55,0)
</xsl:template>
"KRN",.84,7981008.002,2,56,0)
 
"KRN",.84,7981008.002,2,57,0)
<xsl:template match="COLUMN[@NAME='NPHIV']">
"KRN",.84,7981008.002,2,58,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981008.002,2,59,0)
  <xsl:with-param name="title"
"KRN",.84,7981008.002,2,60,0)
                  select="'Number of HIV+ (no AIDS OI) Patients'"/>
"KRN",.84,7981008.002,2,61,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,62,0)
</xsl:template>
"KRN",.84,7981008.002,2,63,0)
 
"KRN",.84,7981008.002,2,64,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981008.002,2,65,0)
 
"KRN",.84,7981008.002,2,66,0)
<xsl:template match="PATIENT/ARV|PATIENT/COMPLEX|PATIENT/AIDSTAT">
"KRN",.84,7981008.002,2,67,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981008.002,2,68,0)
  <xsl:with-param name="yesno" select="1"/>
"KRN",.84,7981008.002,2,69,0)
 </xsl:call-template>
"KRN",.84,7981008.002,2,70,0)
</xsl:template>
"KRN",.84,7981008.002,2,71,0)
 
"KRN",.84,7981008.002,2,72,0)
</xsl:stylesheet>
"KRN",.84,7981011.002,-1)
0^3
"KRN",.84,7981011.002,0)
7981011.002^2^^CLINICAL CASE REGISTRIES^Patient Medication History (CSV)
"KRN",.84,7981011.002,2,0)
^.844^103^103^3150520^^^^
"KRN",.84,7981011.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.002,2,4,0)
>
"KRN",.84,7981011.002,2,5,0)
 
"KRN",.84,7981011.002,2,6,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981011.002,2,7,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981011.002,2,8,0)
 
"KRN",.84,7981011.002,2,9,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981011.002,2,10,0)
<xsl:variable name="ICN_YES" select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981011.002,2,11,0)
 
"KRN",.84,7981011.002,2,12,0)
<xsl:template match="/">
"KRN",.84,7981011.002,2,13,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.002,2,14,0)
</xsl:template>
"KRN",.84,7981011.002,2,15,0)
 
"KRN",.84,7981011.002,2,16,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.002,2,17,0)
 <xsl:text>Patient Medication History</xsl:text>
"KRN",.84,7981011.002,2,18,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,19,0)
 <xsl:text>Patient Name,SSN,Date of Birth,Age,Date of Death</xsl:text>
"KRN",.84,7981011.002,2,20,0)
 <xsl:if test="$ICN_YES">
"KRN",.84,7981011.002,2,21,0)
   <xsl:text>,ICN</xsl:text>
"KRN",.84,7981011.002,2,22,0)
 </xsl:if>
"KRN",.84,7981011.002,2,23,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,24,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,25,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.002,2,26,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,27,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,28,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.002,2,29,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,30,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,31,0)
  <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.002,2,32,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,33,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,34,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,35,0)
  <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.002,2,36,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,37,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,38,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.002,2,39,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,40,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,41,0)
 <xsl:if test="$ICN_YES">
"KRN",.84,7981011.002,2,42,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,43,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981011.002,2,44,0)
   </xsl:call-template>
"KRN",.84,7981011.002,2,45,0)
 </xsl:if>
"KRN",.84,7981011.002,2,46,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,47,0)
 <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.002,2,48,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981011.002,2,49,0)
</xsl:template>
"KRN",.84,7981011.002,2,50,0)
 
"KRN",.84,7981011.002,2,51,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.002,2,52,0)
 
"KRN",.84,7981011.002,2,53,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.002,2,54,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,55,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.002,2,56,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,57,0)
</xsl:template>
"KRN",.84,7981011.002,2,58,0)
 
"KRN",.84,7981011.002,2,59,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.002,2,60,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,61,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.002,2,62,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,63,0)
</xsl:template>
"KRN",.84,7981011.002,2,64,0)
 
"KRN",.84,7981011.002,2,65,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.002,2,66,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,67,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.002,2,68,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,69,0)
</xsl:template>
"KRN",.84,7981011.002,2,70,0)
 
"KRN",.84,7981011.002,2,71,0)
<xsl:template match="COLUMN[@NAME='REFILLS']">
"KRN",.84,7981011.002,2,72,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,73,0)
  <xsl:with-param name="title" select="'Refills Remaining'"/>
"KRN",.84,7981011.002,2,74,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,75,0)
</xsl:template>
"KRN",.84,7981011.002,2,76,0)
 
"KRN",.84,7981011.002,2,77,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.002,2,78,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,79,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.002,2,80,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,81,0)
</xsl:template>
"KRN",.84,7981011.002,2,82,0)
 
"KRN",.84,7981011.002,2,83,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.002,2,84,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,85,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.002,2,86,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,87,0)
</xsl:template>
"KRN",.84,7981011.002,2,88,0)
 
"KRN",.84,7981011.002,2,89,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.002,2,90,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,91,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.002,2,92,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,93,0)
</xsl:template>
"KRN",.84,7981011.002,2,94,0)
 
"KRN",.84,7981011.002,2,95,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.002,2,96,0)
 
"KRN",.84,7981011.002,2,97,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.002,2,98,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,99,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,100,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,101,0)
</xsl:template>
"KRN",.84,7981011.002,2,102,0)
 
"KRN",.84,7981011.002,2,103,0)
</xsl:stylesheet>
"KRN",.84,7981012.002,-1)
0^4
"KRN",.84,7981012.002,0)
7981012.002^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (CSV)
"KRN",.84,7981012.002,2,0)
^.844^130^130^3150520^^^^
"KRN",.84,7981012.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981012.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981012.002,2,4,0)
 
"KRN",.84,7981012.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981012.002,2,6,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981012.002,2,7,0)
 
"KRN",.84,7981012.002,2,8,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981012.002,2,9,0)
<xsl:variable name="ICN_YES" select="/REPORT/LABTESTS/LT[1]/ICN"/>
"KRN",.84,7981012.002,2,10,0)
<xsl:variable name="ICN_YES2" select="/REPORT/DRUGS/DRUG[1]/ICN"/>
"KRN",.84,7981012.002,2,11,0)
 
"KRN",.84,7981012.002,2,12,0)
<xsl:template match="/">
"KRN",.84,7981012.002,2,13,0)
 <xsl:apply-templates select="REPORT/DRUGS"/>
"KRN",.84,7981012.002,2,14,0)
 <xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981012.002,2,15,0)
 <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981012.002,2,16,0)
</xsl:template>
"KRN",.84,7981012.002,2,17,0)
 
"KRN",.84,7981012.002,2,18,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.002,2,19,0)
 <xsl:text>Combined Meds and Labs Report (Medications)</xsl:text>
"KRN",.84,7981012.002,2,20,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,21,0)
 <xsl:choose>
"KRN",.84,7981012.002,2,22,0)
   <xsl:when test="$ICN_YES2">
"KRN",.84,7981012.002,2,23,0)
     <xsl:text>Patient Name,SSN,Date of Death,Medication Name,ICN</xsl:text>
"KRN",.84,7981012.002,2,24,0)
   </xsl:when>
"KRN",.84,7981012.002,2,25,0)
   <xsl:otherwise>
"KRN",.84,7981012.002,2,26,0)
     <xsl:text>Patient Name,SSN,Date of Death,Medication Name</xsl:text>
"KRN",.84,7981012.002,2,27,0)
   </xsl:otherwise>
"KRN",.84,7981012.002,2,28,0)
 </xsl:choose>
"KRN",.84,7981012.002,2,29,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,30,0)
 <xsl:for-each select="DRUG">
"KRN",.84,7981012.002,2,31,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,32,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,33,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,34,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,35,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,36,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,37,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,38,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,39,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,40,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,41,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,42,0)
   <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.002,2,43,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,44,0)
  <xsl:if test="$ICN_YES2">
"KRN",.84,7981012.002,2,45,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,46,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,47,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,48,0)
  </xsl:if>
"KRN",.84,7981012.002,2,49,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,50,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,51,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,52,0)
</xsl:template>
"KRN",.84,7981012.002,2,53,0)
 
"KRN",.84,7981012.002,2,54,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.002,2,55,0)
 <xsl:text>Combined Meds and Labs Report (Lab Results)</xsl:text>
"KRN",.84,7981012.002,2,56,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,57,0)
 <xsl:choose>
"KRN",.84,7981012.002,2,58,0)
   <xsl:when test="$ICN_YES">
"KRN",.84,7981012.002,2,59,0)
     <xsl:text>Patient Name,SSN,Date of Death,Date,Test Name,Result,ICN</xsl:text>
"KRN",.84,7981012.002,2,60,0)
   </xsl:when>
"KRN",.84,7981012.002,2,61,0)
   <xsl:otherwise>
"KRN",.84,7981012.002,2,62,0)
     <xsl:text>Patient Name,SSN,Date of Death,Date,Test Name,Result</xsl:text>
"KRN",.84,7981012.002,2,63,0)
   </xsl:otherwise>
"KRN",.84,7981012.002,2,64,0)
 </xsl:choose>
"KRN",.84,7981012.002,2,65,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,66,0)
 <xsl:for-each select="LT">
"KRN",.84,7981012.002,2,67,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,68,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,69,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,70,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,71,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,72,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,73,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,74,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,75,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,76,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,77,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,78,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981012.002,2,79,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,80,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,81,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,82,0)
   <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981012.002,2,83,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,84,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,85,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981012.002,2,86,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,87,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,88,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,89,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,90,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,91,0)
  </xsl:if>
"KRN",.84,7981012.002,2,92,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,93,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,94,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,95,0)
</xsl:template>
"KRN",.84,7981012.002,2,96,0)
 
"KRN",.84,7981012.002,2,97,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.002,2,98,0)
 <xsl:text>Combined Meds and Labs Report (Patients)</xsl:text>
"KRN",.84,7981012.002,2,99,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,100,0)
 <xsl:choose>
"KRN",.84,7981012.002,2,101,0)
   <xsl:when test="$ICN_YES or $ICN_YES2">
"KRN",.84,7981012.002,2,102,0)
     <xsl:text>Patient Name,SSN,Date of Death,ICN</xsl:text>
"KRN",.84,7981012.002,2,103,0)
   </xsl:when>
"KRN",.84,7981012.002,2,104,0)
   <xsl:otherwise>
"KRN",.84,7981012.002,2,105,0)
     <xsl:text>Patient Name,SSN,Date of Death</xsl:text>
"KRN",.84,7981012.002,2,106,0)
   </xsl:otherwise>
"KRN",.84,7981012.002,2,107,0)
 </xsl:choose>
"KRN",.84,7981012.002,2,108,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,109,0)
 <xsl:for-each select="PATIENT">
"KRN",.84,7981012.002,2,110,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,111,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,112,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,113,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,114,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,115,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,116,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,117,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,118,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,119,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,120,0)
  <xsl:if test="$ICN_YES or $ICN_YES2">
"KRN",.84,7981012.002,2,121,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,122,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,123,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,124,0)
  </xsl:if>
"KRN",.84,7981012.002,2,125,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,126,0)
 </xsl:for-each>
"KRN",.84,7981012.002,2,127,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,128,0)
</xsl:template>
"KRN",.84,7981012.002,2,129,0)
 
"KRN",.84,7981012.002,2,130,0)
</xsl:stylesheet>
"KRN",.84,7981013.002,-1)
0^5
"KRN",.84,7981013.002,0)
7981013.002^2^^CLINICAL CASE REGISTRIES^Diagnoses (CSV)
"KRN",.84,7981013.002,2,0)
^.844^104^104^3150520^^^^
"KRN",.84,7981013.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981013.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981013.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981013.002,2,4,0)
>
"KRN",.84,7981013.002,2,5,0)
 
"KRN",.84,7981013.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981013.002,2,7,0)
 
"KRN",.84,7981013.002,2,8,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981013.002,2,9,0)
<xsl:variable name="ICN_YES" select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981013.002,2,10,0)
 
"KRN",.84,7981013.002,2,11,0)
<xsl:template match="/">
"KRN",.84,7981013.002,2,12,0)
 <xsl:apply-templates select="/REPORT/ICDLST"/>
"KRN",.84,7981013.002,2,13,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981013.002,2,14,0)
</xsl:template>
"KRN",.84,7981013.002,2,15,0)
 
"KRN",.84,7981013.002,2,16,0)
<xsl:template match="REPORT/ICDLST">
"KRN",.84,7981013.002,2,17,0)
 <xsl:text>Diagnoses (ICD Codes)</xsl:text>
"KRN",.84,7981013.002,2,18,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.002,2,19,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981013.002,2,20,0)
</xsl:template>
"KRN",.84,7981013.002,2,21,0)
 
"KRN",.84,7981013.002,2,22,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981013.002,2,23,0)
 <xsl:text>Diagnoses (Patients)</xsl:text>
"KRN",.84,7981013.002,2,24,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981013.002,2,25,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981013.002,2,26,0)
</xsl:template>
"KRN",.84,7981013.002,2,27,0)
 
"KRN",.84,7981013.002,2,28,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981013.002,2,29,0)
 <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981013.002,2,30,0)
 <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981013.002,2,31,0)
 <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981013.002,2,32,0)
 <xsl:variable name="icn" select="ICN"/>
"KRN",.84,7981013.002,2,33,0)
 <xsl:for-each select="PTICDL/ICD">
"KRN",.84,7981013.002,2,34,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,35,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981013.002,2,36,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,37,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,38,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981013.002,2,39,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,40,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,41,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981013.002,2,42,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.002,2,43,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,44,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981013.002,2,45,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,46,0)
    <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981013.002,2,47,0)
   </xsl:call-template>
"KRN",.84,7981013.002,2,48,0)
  </xsl:if>
"KRN",.84,7981013.002,2,49,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,50,0)
   <xsl:with-param name="value" select="CODE"/>
"KRN",.84,7981013.002,2,51,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,52,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,53,0)
   <xsl:with-param name="value" select="DIAG"/>
"KRN",.84,7981013.002,2,54,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,55,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,56,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981013.002,2,57,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981013.002,2,58,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,59,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981013.002,2,60,0)
   <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981013.002,2,61,0)
  </xsl:call-template>
"KRN",.84,7981013.002,2,62,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981013.002,2,63,0)
 </xsl:for-each>
"KRN",.84,7981013.002,2,64,0)
</xsl:template>
"KRN",.84,7981013.002,2,65,0)
 
"KRN",.84,7981013.002,2,66,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981013.002,2,67,0)
 
"KRN",.84,7981013.002,2,68,0)
<xsl:template match="COLUMN[@NAME='CODE']">
"KRN",.84,7981013.002,2,69,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,70,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981013.002,2,71,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,72,0)
</xsl:template>
"KRN",.84,7981013.002,2,73,0)
 
"KRN",.84,7981013.002,2,74,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981013.002,2,75,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,76,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981013.002,2,77,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,78,0)
</xsl:template>
"KRN",.84,7981013.002,2,79,0)
 
"KRN",.84,7981013.002,2,80,0)
<xsl:template match="COLUMN[@NAME='DIAG']">
"KRN",.84,7981013.002,2,81,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,82,0)
  <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981013.002,2,83,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,84,0)
</xsl:template>
"KRN",.84,7981013.002,2,85,0)
 
"KRN",.84,7981013.002,2,86,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981013.002,2,87,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,88,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981013.002,2,89,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,90,0)
</xsl:template>
"KRN",.84,7981013.002,2,91,0)
 
"KRN",.84,7981013.002,2,92,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981013.002,2,93,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,94,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981013.002,2,95,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,96,0)
</xsl:template>
"KRN",.84,7981013.002,2,97,0)
 
"KRN",.84,7981013.002,2,98,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981013.002,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981013.002,2,100,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981013.002,2,101,0)
 </xsl:call-template>
"KRN",.84,7981013.002,2,102,0)
</xsl:template>
"KRN",.84,7981013.002,2,103,0)
 
"KRN",.84,7981013.002,2,104,0)
</xsl:stylesheet>
"KRN",.84,7981015.002,-1)
0^6
"KRN",.84,7981015.002,0)
7981015.002^2^^CLINICAL CASE REGISTRIES^Procedures (CSV)
"KRN",.84,7981015.002,2,0)
^.844^105^105^3150520^^^^
"KRN",.84,7981015.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981015.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981015.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981015.002,2,4,0)
>
"KRN",.84,7981015.002,2,5,0)
 
"KRN",.84,7981015.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981015.002,2,7,0)
 
"KRN",.84,7981015.002,2,8,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981015.002,2,9,0)
<xsl:variable name="ICN_YES" select="/REPORT/PROCEDURES/PROCEDURE[1]/ICN"/>
"KRN",.84,7981015.002,2,10,0)
 
"KRN",.84,7981015.002,2,11,0)
<xsl:template match="/">
"KRN",.84,7981015.002,2,12,0)
 <xsl:apply-templates select="/REPORT/PROCLST"/>
"KRN",.84,7981015.002,2,13,0)
 <xsl:apply-templates select="/REPORT/PROCEDURES"/>
"KRN",.84,7981015.002,2,14,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981015.002,2,15,0)
</xsl:template>
"KRN",.84,7981015.002,2,16,0)
 
"KRN",.84,7981015.002,2,17,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981015.002,2,18,0)
 <xsl:text>Patients without procedures</xsl:text>
"KRN",.84,7981015.002,2,19,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,20,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981015.002,2,21,0)
</xsl:template>
"KRN",.84,7981015.002,2,22,0)
 
"KRN",.84,7981015.002,2,23,0)
<xsl:template match="REPORT/PROCEDURES">
"KRN",.84,7981015.002,2,24,0)
 <xsl:text>Procedures (Patients)</xsl:text>
"KRN",.84,7981015.002,2,25,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,26,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981015.002,2,27,0)
</xsl:template>
"KRN",.84,7981015.002,2,28,0)
 
"KRN",.84,7981015.002,2,29,0)
<xsl:template match="REPORT/PROCLST">
"KRN",.84,7981015.002,2,30,0)
 <xsl:text>Procedures (CPT and ICD codes)</xsl:text>
"KRN",.84,7981015.002,2,31,0)
 <xsl:call-template name="DataGrid"/>
"KRN",.84,7981015.002,2,32,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981015.002,2,33,0)
</xsl:template>
"KRN",.84,7981015.002,2,34,0)
 
"KRN",.84,7981015.002,2,35,0)
<xsl:template match="PROCEDURES/PROCEDURE">
"KRN",.84,7981015.002,2,36,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,37,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981015.002,2,38,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,39,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,40,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981015.002,2,41,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,42,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,43,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981015.002,2,44,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.002,2,45,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,46,0)
 <xsl:if test="$ICN_YES">
"KRN",.84,7981015.002,2,47,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,48,0)
   <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981015.002,2,49,0)
  </xsl:call-template>
"KRN",.84,7981015.002,2,50,0)
 </xsl:if>
"KRN",.84,7981015.002,2,51,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,52,0)
  <xsl:with-param name="value" select="PROCODE"/>
"KRN",.84,7981015.002,2,53,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,54,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,55,0)
  <xsl:with-param name="value" select="PROCNAME"/>
"KRN",.84,7981015.002,2,56,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,57,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,58,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981015.002,2,59,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981015.002,2,60,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,61,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981015.002,2,62,0)
  <xsl:with-param name="value" select="SOURCE"/>
"KRN",.84,7981015.002,2,63,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,64,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981015.002,2,65,0)
</xsl:template>
"KRN",.84,7981015.002,2,66,0)
 
"KRN",.84,7981015.002,2,67,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981015.002,2,68,0)
 
"KRN",.84,7981015.002,2,69,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981015.002,2,70,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,71,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981015.002,2,72,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,73,0)
</xsl:template>
"KRN",.84,7981015.002,2,74,0)
 
"KRN",.84,7981015.002,2,75,0)
<xsl:template match="COLUMN[@NAME='NC']">
"KRN",.84,7981015.002,2,76,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,77,0)
  <xsl:with-param name="title" select="'Number of Codes'"/>
"KRN",.84,7981015.002,2,78,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,79,0)
</xsl:template>
"KRN",.84,7981015.002,2,80,0)
 
"KRN",.84,7981015.002,2,81,0)
<xsl:template match="COLUMN[@NAME='NP']">
"KRN",.84,7981015.002,2,82,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,83,0)
  <xsl:with-param name="title" select="'Number of Patients'"/>
"KRN",.84,7981015.002,2,84,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,85,0)
</xsl:template>
"KRN",.84,7981015.002,2,86,0)
 
"KRN",.84,7981015.002,2,87,0)
<xsl:template match="COLUMN[@NAME='PROCODE']">
"KRN",.84,7981015.002,2,88,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,89,0)
  <xsl:with-param name="title" select="'Code'"/>
"KRN",.84,7981015.002,2,90,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,91,0)
</xsl:template>
"KRN",.84,7981015.002,2,92,0)
 
"KRN",.84,7981015.002,2,93,0)
<xsl:template match="COLUMN[@NAME='PROCNAME']">
"KRN",.84,7981015.002,2,94,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,95,0)
  <xsl:with-param name="title" select="'Procedure Name'"/>
"KRN",.84,7981015.002,2,96,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,97,0)
</xsl:template>
"KRN",.84,7981015.002,2,98,0)
 
"KRN",.84,7981015.002,2,99,0)
<xsl:template match="COLUMN[@NAME='SOURCE']">
"KRN",.84,7981015.002,2,100,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981015.002,2,101,0)
  <xsl:with-param name="title" select="'Source'"/>
"KRN",.84,7981015.002,2,102,0)
 </xsl:call-template>
"KRN",.84,7981015.002,2,103,0)
</xsl:template>
"KRN",.84,7981015.002,2,104,0)
 
"KRN",.84,7981015.002,2,105,0)
</xsl:stylesheet>
"KRN",.84,7981018.002,-1)
0^9
"KRN",.84,7981018.002,0)
7981018.002^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (CSV)
"KRN",.84,7981018.002,2,0)
^.844^96^96^3150520^^^^
"KRN",.84,7981018.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981018.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981018.002,2,4,0)
 >
"KRN",.84,7981018.002,2,5,0)
 
"KRN",.84,7981018.002,2,6,0)
<xsl:import href="template://report/999/2"/> <!-- Common   -->
"KRN",.84,7981018.002,2,7,0)
<!-- Determine if the user wants the ICN on the report. -->
"KRN",.84,7981018.002,2,8,0)
<xsl:variable name="ICN_YES" select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981018.002,2,9,0)
 
"KRN",.84,7981018.002,2,10,0)
<xsl:template match="/">
"KRN",.84,7981018.002,2,11,0)
  <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.002,2,12,0)
  <xsl:text>BMI by Range</xsl:text>
"KRN",.84,7981018.002,2,13,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.002,2,14,0)
</xsl:template>
"KRN",.84,7981018.002,2,15,0)
 
"KRN",.84,7981018.002,2,16,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.002,2,17,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.002,2,18,0)
 <xsl:text>BMI by Range (Summary)</xsl:text>
"KRN",.84,7981018.002,2,19,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,20,0)
 <xsl:text>BMI Categories</xsl:text>
"KRN",.84,7981018.002,2,21,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,22,0)
 <xsl:text>BMI Values</xsl:text>
"KRN",.84,7981018.002,2,23,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,24,0)
 <xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981018.002,2,25,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,26,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.002,2,27,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981018.002,2,28,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,29,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981018.002,2,30,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,31,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981018.002,2,32,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,33,0)
 </xsl:for-each>
"KRN",.84,7981018.002,2,34,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981018.002,2,35,0)
</xsl:template>
"KRN",.84,7981018.002,2,36,0)
 
"KRN",.84,7981018.002,2,37,0)
 <xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.002,2,38,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981018.002,2,39,0)
 </xsl:template>
"KRN",.84,7981018.002,2,40,0)
 
"KRN",.84,7981018.002,2,41,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.002,2,42,0)
  <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981018.002,2,43,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,44,0)
  <xsl:value-of select="'Height'"/>
"KRN",.84,7981018.002,2,45,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,46,0)
 </xsl:template>
"KRN",.84,7981018.002,2,47,0)
 
"KRN",.84,7981018.002,2,48,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.002,2,49,0)
  <xsl:value-of select="'Weight Date'"/>
"KRN",.84,7981018.002,2,50,0)
  <xsl:value-of select="$DELIMITER"/>  
"KRN",.84,7981018.002,2,51,0)
  <xsl:value-of select="'Weight'"/>
"KRN",.84,7981018.002,2,52,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,53,0)
 </xsl:template>
"KRN",.84,7981018.002,2,54,0)
 
"KRN",.84,7981018.002,2,55,0)
 <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981018.002,2,56,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981018.002,2,57,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981018.002,2,58,0)
  <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981018.002,2,59,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,60,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981018.002,2,61,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,62,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,63,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981018.002,2,64,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,65,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,66,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981018.002,2,67,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,68,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,69,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,70,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/DATE"/>
"KRN",.84,7981018.002,2,71,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,72,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,73,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,74,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,75,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,77,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/DATE"/>
"KRN",.84,7981018.002,2,78,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,79,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,80,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,81,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,82,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,83,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,84,0)
   <xsl:with-param name="value" select="BMI"/>
"KRN",.84,7981018.002,2,85,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,86,0)
<xsl:choose>
"KRN",.84,7981018.002,2,87,0)
   <xsl:when test="$ICN_YES">
"KRN",.84,7981018.002,2,88,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,89,0)
      <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981018.002,2,90,0)
    </xsl:call-template>
"KRN",.84,7981018.002,2,91,0)
   </xsl:when>
"KRN",.84,7981018.002,2,92,0)
  </xsl:choose>
"KRN",.84,7981018.002,2,93,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,94,0)
 </xsl:template>
"KRN",.84,7981018.002,2,95,0)
 
"KRN",.84,7981018.002,2,96,0)
</xsl:stylesheet>
"KRN",.84,7981020.002,-1)
0^7
"KRN",.84,7981020.002,0)
7981020.002^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (CSV)
"KRN",.84,7981020.002,2,0)
^.844^150^150^3150520^^^^
"KRN",.84,7981020.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981020.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981020.002,2,4,0)
 
"KRN",.84,7981020.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981020.002,2,6,0)
 
"KRN",.84,7981020.002,2,7,0)
<xsl:variable name="CRCLUSED" 
"KRN",.84,7981020.002,2,8,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.002,2,9,0)
)"/>
"KRN",.84,7981020.002,2,10,0)
<xsl:variable name="CKDUSED" 
"KRN",.84,7981020.002,2,11,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CKD'])
"KRN",.84,7981020.002,2,12,0)
"/>
"KRN",.84,7981020.002,2,13,0)
<xsl:variable name="MDRDUSED" 
"KRN",.84,7981020.002,2,14,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MDRD']
"KRN",.84,7981020.002,2,15,0)
)"/>
"KRN",.84,7981020.002,2,16,0)
 
"KRN",.84,7981020.002,2,17,0)
<!-- Determine if the user wants the ICN on the report. -->
"KRN",.84,7981020.002,2,18,0)
<xsl:variable name="ICN_YES" select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='ICN'])"/>
"KRN",.84,7981020.002,2,19,0)
 
"KRN",.84,7981020.002,2,20,0)
<xsl:template match="/">
"KRN",.84,7981020.002,2,21,0)
  <xsl:if test="$CKDUSED &gt; 0 or $MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,22,0)
    <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.002,2,23,0)
  </xsl:if>
"KRN",.84,7981020.002,2,24,0)
  <xsl:text>Renal Function by Range</xsl:text>
"KRN",.84,7981020.002,2,25,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.002,2,26,0)
</xsl:template>
"KRN",.84,7981020.002,2,27,0)
 
"KRN",.84,7981020.002,2,28,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.002,2,29,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.002,2,30,0)
 <xsl:text>Renal Function by Range (Summary)</xsl:text>
"KRN",.84,7981020.002,2,31,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,32,0)
 <xsl:text>Chronic Kidney Disease Stages</xsl:text>
"KRN",.84,7981020.002,2,33,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,34,0)
 <xsl:text>GFR</xsl:text>
"KRN",.84,7981020.002,2,35,0)
 <xsl:if test="$MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,36,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,37,0)
   <xsl:text>Number of Patients by MDRD</xsl:text>
"KRN",.84,7981020.002,2,38,0)
 </xsl:if>
"KRN",.84,7981020.002,2,39,0)
<xsl:if test="$CKDUSED &gt; 0">
"KRN",.84,7981020.002,2,40,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,41,0)
   <xsl:text>Number of Patients by CKD-EPI</xsl:text>
"KRN",.84,7981020.002,2,42,0)
 </xsl:if>
"KRN",.84,7981020.002,2,43,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,44,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.002,2,45,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981020.002,2,46,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,47,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981020.002,2,48,0)
   <xsl:text> sq</xsl:text>
"KRN",.84,7981020.002,2,49,0)
   <xsl:if test="$MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,50,0)
     <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,51,0)
     <xsl:value-of select="./NPMDRD"/>
"KRN",.84,7981020.002,2,52,0)
   </xsl:if>
"KRN",.84,7981020.002,2,53,0)
   <xsl:if test="$CKDUSED &gt; 0">
"KRN",.84,7981020.002,2,54,0)
     <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,55,0)
     <xsl:value-of select="./NPCKD"/>
"KRN",.84,7981020.002,2,56,0)
   </xsl:if>
"KRN",.84,7981020.002,2,57,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,58,0)
 </xsl:for-each>
"KRN",.84,7981020.002,2,59,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981020.002,2,60,0)
</xsl:template>
"KRN",.84,7981020.002,2,61,0)
 
"KRN",.84,7981020.002,2,62,0)
 <xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.002,2,63,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981020.002,2,64,0)
 </xsl:template>
"KRN",.84,7981020.002,2,65,0)
 
"KRN",.84,7981020.002,2,66,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.002,2,67,0)
  <xsl:value-of select="'Cr Date'"/>
"KRN",.84,7981020.002,2,68,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,69,0)
  <xsl:value-of select="'Cr'"/>
"KRN",.84,7981020.002,2,70,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,71,0)
 </xsl:template>
"KRN",.84,7981020.002,2,72,0)
 
"KRN",.84,7981020.002,2,73,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.002,2,74,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,75,0)
    <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981020.002,2,76,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,77,0)
    <xsl:value-of select="'Height'"/>
"KRN",.84,7981020.002,2,78,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,79,0)
  </xsl:if>
"KRN",.84,7981020.002,2,80,0)
 </xsl:template>
"KRN",.84,7981020.002,2,81,0)
 
"KRN",.84,7981020.002,2,82,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.002,2,83,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,84,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.002,2,85,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,86,0)
</xsl:template>
"KRN",.84,7981020.002,2,87,0)
 
"KRN",.84,7981020.002,2,88,0)
<xsl:template match="COLUMN[@NAME='MDRD']">
"KRN",.84,7981020.002,2,89,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,90,0)
  <xsl:with-param name="title" select="'MDRD'"/>
"KRN",.84,7981020.002,2,91,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,92,0)
</xsl:template>
"KRN",.84,7981020.002,2,93,0)
 
"KRN",.84,7981020.002,2,94,0)
<xsl:template match="COLUMN[@NAME='CKD']">
"KRN",.84,7981020.002,2,95,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,96,0)
  <xsl:with-param name="title" select="'CKD-EPI'"/>
"KRN",.84,7981020.002,2,97,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,98,0)
</xsl:template>
"KRN",.84,7981020.002,2,99,0)
 
"KRN",.84,7981020.002,2,100,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981020.002,2,101,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,102,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981020.002,2,103,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,104,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,105,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981020.002,2,106,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,107,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,108,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981020.002,2,109,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,110,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,111,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,112,0)
   <xsl:with-param name="value" select="RNLDATA/TEST/DATE"/>
"KRN",.84,7981020.002,2,113,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,114,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,115,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,116,0)
    <xsl:with-param name="value" select="RNLDATA/TEST/RESULT"/>
"KRN",.84,7981020.002,2,117,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,118,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,119,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,120,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/DATE"/>
"KRN",.84,7981020.002,2,121,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,122,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,123,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,124,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/RESULT"/>
"KRN",.84,7981020.002,2,125,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,126,0)
  </xsl:if>
"KRN",.84,7981020.002,2,127,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,128,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,129,0)
     <xsl:with-param name="value" select="CRCL"/>
"KRN",.84,7981020.002,2,130,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,131,0)
  </xsl:if>
"KRN",.84,7981020.002,2,132,0)
  <xsl:if test="$MDRDUSED > 0">
"KRN",.84,7981020.002,2,133,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,134,0)
     <xsl:with-param name="value" select="MDRD"/>
"KRN",.84,7981020.002,2,135,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,136,0)
  </xsl:if>
"KRN",.84,7981020.002,2,137,0)
  <xsl:if test="$CKDUSED > 0">
"KRN",.84,7981020.002,2,138,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,139,0)
     <xsl:with-param name="value" select="CKD"/>
"KRN",.84,7981020.002,2,140,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,141,0)
  </xsl:if>
"KRN",.84,7981020.002,2,142,0)
  <xsl:if test="$ICN_YES > 0">
"KRN",.84,7981020.002,2,143,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,144,0)
     <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981020.002,2,145,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,146,0)
  </xsl:if>
"KRN",.84,7981020.002,2,147,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,148,0)
 </xsl:template>
"KRN",.84,7981020.002,2,149,0)
 
"KRN",.84,7981020.002,2,150,0)
</xsl:stylesheet>
"KRN",.84,7981021.001,-1)
0^12
"KRN",.84,7981021.001,0)
7981021.001^2^^CLINICAL CASE REGISTRIES^Potential DAA Candidates (HTML)
"KRN",.84,7981021.001,2,0)
^.844^94^94^3150521^^^^
"KRN",.84,7981021.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981021.001,2,2,0)
  
"KRN",.84,7981021.001,2,3,0)
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981021.001,2,4,0)
 version="1.0">
"KRN",.84,7981021.001,2,5,0)
  
"KRN",.84,7981021.001,2,6,0)
 <xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981021.001,2,7,0)
 <xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981021.001,2,8,0)
 <xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981021.001,2,9,0)
  
"KRN",.84,7981021.001,2,10,0)
 <xsl:template match="/">
"KRN",.84,7981021.001,2,11,0)
  <html>
"KRN",.84,7981021.001,2,12,0)
   <head>
"KRN",.84,7981021.001,2,13,0)
    <title>Potential DAA Candidates</title>
"KRN",.84,7981021.001,2,14,0)
    <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981021.001,2,15,0)
   </head>
"KRN",.84,7981021.001,2,16,0)
   <body>
"KRN",.84,7981021.001,2,17,0)
    <h1>Potential DAA Candidates</h1>
"KRN",.84,7981021.001,2,18,0)
    <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981021.001,2,19,0)
    <xsl:if test="/REPORT/PARAMETERS/TREATMENT_HISTORY/@EXP_DAYS != ''">
"KRN",.84,7981021.001,2,20,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981021.001,2,21,0)
        *For this report, patients with HCV antiviral treatment within the 
"KRN",.84,7981021.001,2,22,0)
 last 
"KRN",.84,7981021.001,2,23,0)
 <xsl:value-of select="/REPORT/PARAMETERS/TREATMENT_HISTORY/@EXP_DAYS"/> 
"KRN",.84,7981021.001,2,24,0)
 days have been excluded.
"KRN",.84,7981021.001,2,25,0)
       </div>
"KRN",.84,7981021.001,2,26,0)
    </xsl:if>
"KRN",.84,7981021.001,2,27,0)
    <br />
"KRN",.84,7981021.001,2,28,0)
    <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981021.001,2,29,0)
    <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981021.001,2,30,0)
 border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981021.001,2,31,0)
    <div>
"KRN",.84,7981021.001,2,32,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981021.001,2,33,0)
    </div>
"KRN",.84,7981021.001,2,34,0)
   </body>
"KRN",.84,7981021.001,2,35,0)
  </html>
"KRN",.84,7981021.001,2,36,0)
 </xsl:template>
"KRN",.84,7981021.001,2,37,0)
  
"KRN",.84,7981021.001,2,38,0)
 <!--[ TABLE HEADERS ]-->
"KRN",.84,7981021.001,2,39,0)
   
"KRN",.84,7981021.001,2,40,0)
 <xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981021.001,2,41,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,42,0)
   <xsl:with-param name="title" select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981021.001,2,43,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,44,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,45,0)
 </xsl:template>
"KRN",.84,7981021.001,2,46,0)
  
"KRN",.84,7981021.001,2,47,0)
 <xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981021.001,2,48,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,49,0)
   <xsl:with-param name="title" select="'Most Recent HCV RNA'"/>
"KRN",.84,7981021.001,2,50,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,51,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,52,0)
 </xsl:template>
"KRN",.84,7981021.001,2,53,0)
  
"KRN",.84,7981021.001,2,54,0)
 <xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981021.001,2,55,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,56,0)
   <xsl:with-param name="title" select="'Most Recent GT'"/>
"KRN",.84,7981021.001,2,57,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,58,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,59,0)
 </xsl:template>
"KRN",.84,7981021.001,2,60,0)
  
"KRN",.84,7981021.001,2,61,0)
 <xsl:template match="COLUMN[@NAME='FILL_DATE']">
"KRN",.84,7981021.001,2,62,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,63,0)
   <xsl:with-param name="title" select="'Most Recent Fill Date'"/>
"KRN",.84,7981021.001,2,64,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,65,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,66,0)
 </xsl:template>
"KRN",.84,7981021.001,2,67,0)
  
"KRN",.84,7981021.001,2,68,0)
 <xsl:template match="COLUMN[@NAME='FILL_MED']">
"KRN",.84,7981021.001,2,69,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,70,0)
   <xsl:with-param name="title" select="'Most Recent HCV Medication 
"KRN",.84,7981021.001,2,71,0)
 Fill'"/>
"KRN",.84,7981021.001,2,72,0)
   <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981021.001,2,73,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,74,0)
</xsl:template>
"KRN",.84,7981021.001,2,75,0)
  
"KRN",.84,7981021.001,2,76,0)
 <!--[ TABLE CELLS ]-->
"KRN",.84,7981021.001,2,77,0)
  
"KRN",.84,7981021.001,2,78,0)
 <xsl:template match="PATIENT/HCV_DATE">
"KRN",.84,7981021.001,2,79,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981021.001,2,80,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.001,2,81,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.001,2,82,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981021.001,2,83,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,84,0)
 </xsl:template>
"KRN",.84,7981021.001,2,85,0)
  
"KRN",.84,7981021.001,2,86,0)
 <xsl:template match="PATIENT/FILL_DATE">
"KRN",.84,7981021.001,2,87,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981021.001,2,88,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.001,2,89,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.001,2,90,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981021.001,2,91,0)
  </xsl:call-template>
"KRN",.84,7981021.001,2,92,0)
 </xsl:template>
"KRN",.84,7981021.001,2,93,0)
  
"KRN",.84,7981021.001,2,94,0)
 </xsl:stylesheet>
"KRN",.84,7981021.002,-1)
0^13
"KRN",.84,7981021.002,0)
7981021.002^2^^CLINICAL CASE REGISTRIES^Potential DAA Candidates (CSV)
"KRN",.84,7981021.002,2,0)
^.844^84^84^3150522^^^^
"KRN",.84,7981021.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981021.002,2,2,0)
<xsl:stylesheet version="1.0"  
"KRN",.84,7981021.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981021.002,2,4,0)
 
"KRN",.84,7981021.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981021.002,2,6,0)
 
"KRN",.84,7981021.002,2,7,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981021.002,2,8,0)
<xsl:variable name="ICN_YES" select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981021.002,2,9,0)
 
"KRN",.84,7981021.002,2,10,0)
<xsl:template match="/">
"KRN",.84,7981021.002,2,11,0)
  <xsl:text>Potential DAA Candidates</xsl:text>
"KRN",.84,7981021.002,2,12,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981021.002,2,13,0)
</xsl:template>
"KRN",.84,7981021.002,2,14,0)
 
"KRN",.84,7981021.002,2,15,0)
 <xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981021.002,2,16,0)
  <xsl:value-of select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981021.002,2,17,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,18,0)
</xsl:template>
"KRN",.84,7981021.002,2,19,0)
 
"KRN",.84,7981021.002,2,20,0)
 <xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981021.002,2,21,0)
  <xsl:value-of select="'Most Recent HCV RNA'"/>
"KRN",.84,7981021.002,2,22,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,23,0)
</xsl:template>
"KRN",.84,7981021.002,2,24,0)
 
"KRN",.84,7981021.002,2,25,0)
 <xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981021.002,2,26,0)
  <xsl:value-of select="'Most Recent GT'"/>
"KRN",.84,7981021.002,2,27,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,28,0)
</xsl:template>
"KRN",.84,7981021.002,2,29,0)
 
"KRN",.84,7981021.002,2,30,0)
 <xsl:template match="COLUMN[@NAME='FILL_DATE']">
"KRN",.84,7981021.002,2,31,0)
  <xsl:value-of select="'Most Recent Fill Date'"/>
"KRN",.84,7981021.002,2,32,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,33,0)
</xsl:template>
"KRN",.84,7981021.002,2,34,0)
 
"KRN",.84,7981021.002,2,35,0)
 <xsl:template match="COLUMN[@NAME='FILL_MED']">
"KRN",.84,7981021.002,2,36,0)
  <xsl:value-of select="'Most Recent HCV Medication Fill'"/>
"KRN",.84,7981021.002,2,37,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,38,0)
</xsl:template>
"KRN",.84,7981021.002,2,39,0)
 
"KRN",.84,7981021.002,2,40,0)
<xsl:template match="COLUMN[@NAME='FIB4']">
"KRN",.84,7981021.002,2,41,0)
  <xsl:value-of select="'Fib4'"/>
"KRN",.84,7981021.002,2,42,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,43,0)
</xsl:template>
"KRN",.84,7981021.002,2,44,0)
 
"KRN",.84,7981021.002,2,45,0)
  
"KRN",.84,7981021.002,2,46,0)
 <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981021.002,2,47,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981021.002,2,48,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981021.002,2,49,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,50,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981021.002,2,51,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,52,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,53,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981021.002,2,54,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,55,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,56,0)
   <xsl:with-param name="value" select="HCV_DATE"/>
"KRN",.84,7981021.002,2,57,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,58,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,59,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,60,0)
   <xsl:with-param name="value" select="HCV"/>
"KRN",.84,7981021.002,2,61,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,62,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,63,0)
   <xsl:with-param name="value" select="GT"/>
"KRN",.84,7981021.002,2,64,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,65,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,66,0)
   <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981021.002,2,67,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,68,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,69,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,70,0)
   <xsl:with-param name="value" select="FILL_MED"/>
"KRN",.84,7981021.002,2,71,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,72,0)
  <xsl:if test="FIB4">
"KRN",.84,7981021.002,2,73,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,74,0)
   <xsl:with-param name="value" select="FIB4"/>
"KRN",.84,7981021.002,2,75,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,76,0)
  </xsl:if>
"KRN",.84,7981021.002,2,77,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981021.002,2,78,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,79,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981021.002,2,80,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,81,0)
  </xsl:if>
"KRN",.84,7981021.002,2,82,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981021.002,2,83,0)
</xsl:template>  
"KRN",.84,7981021.002,2,84,0)
</xsl:stylesheet>
"KRN",.84,7981022.002,-1)
0^8
"KRN",.84,7981022.002,0)
7981022.002^2^^CLINICAL CASE REGISTRIES^DAA Lab Monitoring (CSV)
"KRN",.84,7981022.002,2,0)
^.844^131^131^3150520^^^^
"KRN",.84,7981022.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981022.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981022.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981022.002,2,4,0)
 
"KRN",.84,7981022.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981022.002,2,6,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981022.002,2,7,0)
 
"KRN",.84,7981022.002,2,8,0)
<!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981022.002,2,9,0)
<xsl:variable name="ICN_YES" select="/REPORT/LABTESTS/LT[1]/ICN"/>
"KRN",.84,7981022.002,2,10,0)
 
"KRN",.84,7981022.002,2,11,0)
<xsl:template match="/">
"KRN",.84,7981022.002,2,12,0)
 <xsl:apply-templates select="REPORT/DRUGS"/>
"KRN",.84,7981022.002,2,13,0)
 <xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981022.002,2,14,0)
 <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981022.002,2,15,0)
</xsl:template>
"KRN",.84,7981022.002,2,16,0)
 
"KRN",.84,7981022.002,2,17,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981022.002,2,18,0)
 <xsl:text>DAA Lab Monitoring Report (Medications)</xsl:text>
"KRN",.84,7981022.002,2,19,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,20,0)
 <xsl:choose>
"KRN",.84,7981022.002,2,21,0)
   <xsl:when test="$ICN_YES">
"KRN",.84,7981022.002,2,22,0)
     <xsl:text>Patient Name,SSN,DAA Start Date,Medication Name,Fill Date,Days Supply,ICN</xsl:text>
"KRN",.84,7981022.002,2,23,0)
   </xsl:when>
"KRN",.84,7981022.002,2,24,0)
   <xsl:otherwise>
"KRN",.84,7981022.002,2,25,0)
     <xsl:text>Patient Name,SSN,DAA Start Date,Medication Name,Fill Date,Days Supply</xsl:text>
"KRN",.84,7981022.002,2,26,0)
   </xsl:otherwise>
"KRN",.84,7981022.002,2,27,0)
 </xsl:choose>
"KRN",.84,7981022.002,2,28,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,29,0)
 <xsl:for-each select="DRUG">
"KRN",.84,7981022.002,2,30,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,31,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,32,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,33,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,34,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,35,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,36,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,37,0)
   <xsl:with-param name="value" select="DAA_FILL"/>
"KRN",.84,7981022.002,2,38,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,39,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,40,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,41,0)
   <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981022.002,2,42,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,43,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,44,0)
   <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981022.002,2,45,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,46,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,47,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,48,0)
   <xsl:with-param name="value" select="DAYSPLY"/>
"KRN",.84,7981022.002,2,49,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,50,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981022.002,2,51,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,52,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981022.002,2,53,0)
   </xsl:call-template>
"KRN",.84,7981022.002,2,54,0)
  </xsl:if>
"KRN",.84,7981022.002,2,55,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,56,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,57,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981022.002,2,58,0)
</xsl:template>
"KRN",.84,7981022.002,2,59,0)
 
"KRN",.84,7981022.002,2,60,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981022.002,2,61,0)
 <xsl:text>DAA Lab Monitoring Report (Lab Results)</xsl:text>
"KRN",.84,7981022.002,2,62,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,63,0)
 <xsl:choose>
"KRN",.84,7981022.002,2,64,0)
   <xsl:when test="$ICN_YES">
"KRN",.84,7981022.002,2,65,0)
     <xsl:text>Patient Name,SSN,Date,Test Name,Result,Weeks Since DAA Start,ICN</xsl:text>
"KRN",.84,7981022.002,2,66,0)
   </xsl:when>
"KRN",.84,7981022.002,2,67,0)
   <xsl:otherwise>
"KRN",.84,7981022.002,2,68,0)
     <xsl:text>Patient Name,SSN,Date,Test Name,Result,Weeks Since DAA Start</xsl:text>
"KRN",.84,7981022.002,2,69,0)
   </xsl:otherwise>
"KRN",.84,7981022.002,2,70,0)
  </xsl:choose>
"KRN",.84,7981022.002,2,71,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,72,0)
 <xsl:for-each select="LT">
"KRN",.84,7981022.002,2,73,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,74,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,75,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,77,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,78,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,79,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,80,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981022.002,2,81,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,82,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,83,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,84,0)
   <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981022.002,2,85,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,86,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,87,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981022.002,2,88,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,89,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,90,0)
   <xsl:with-param name="value" select="WKS_LAB"/>
"KRN",.84,7981022.002,2,91,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,92,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981022.002,2,93,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,94,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981022.002,2,95,0)
   </xsl:call-template>
"KRN",.84,7981022.002,2,96,0)
  </xsl:if>
"KRN",.84,7981022.002,2,97,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,98,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,99,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981022.002,2,100,0)
</xsl:template>
"KRN",.84,7981022.002,2,101,0)
 
"KRN",.84,7981022.002,2,102,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981022.002,2,103,0)
 <xsl:text>DAA Lab Monitoring Report (Patients)</xsl:text>
"KRN",.84,7981022.002,2,104,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,105,0)
 <xsl:choose>
"KRN",.84,7981022.002,2,106,0)
   <xsl:when test="$ICN_YES">
"KRN",.84,7981022.002,2,107,0)
     <xsl:text>Patient Name,SSN,ICN</xsl:text>
"KRN",.84,7981022.002,2,108,0)
   </xsl:when>
"KRN",.84,7981022.002,2,109,0)
   <xsl:otherwise>
"KRN",.84,7981022.002,2,110,0)
     <xsl:text>Patient Name,SSN</xsl:text>
"KRN",.84,7981022.002,2,111,0)
   </xsl:otherwise>
"KRN",.84,7981022.002,2,112,0)
 </xsl:choose>
"KRN",.84,7981022.002,2,113,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,114,0)
 <xsl:for-each select="PATIENT">
"KRN",.84,7981022.002,2,115,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,116,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,117,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,118,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,119,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,120,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,121,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981022.002,2,122,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,123,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981022.002,2,124,0)
   </xsl:call-template>
"KRN",.84,7981022.002,2,125,0)
  </xsl:if>
"KRN",.84,7981022.002,2,126,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,127,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,128,0)
 <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981022.002,2,129,0)
</xsl:template>
"KRN",.84,7981022.002,2,130,0)
 
"KRN",.84,7981022.002,2,131,0)
</xsl:stylesheet>
"KRN",.84,7981023.001,-1)
0^14
"KRN",.84,7981023.001,0)
7981023.001^2^^CLINICAL CASE REGISTRIES^Sustained Virologic Response (HTML)
"KRN",.84,7981023.001,2,0)
^.844^78^78^3150521^^^^
"KRN",.84,7981023.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981023.001,2,2,0)
  
"KRN",.84,7981023.001,2,3,0)
 <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981023.001,2,4,0)
 version="1.0">
"KRN",.84,7981023.001,2,5,0)
  
"KRN",.84,7981023.001,2,6,0)
 <xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981023.001,2,7,0)
 <xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981023.001,2,8,0)
 <xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981023.001,2,9,0)
  
"KRN",.84,7981023.001,2,10,0)
 <xsl:template match="/">
"KRN",.84,7981023.001,2,11,0)
  <html>
"KRN",.84,7981023.001,2,12,0)
   <head>
"KRN",.84,7981023.001,2,13,0)
    <title>Sustained Virologic Response</title>
"KRN",.84,7981023.001,2,14,0)
    <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981023.001,2,15,0)
   </head>
"KRN",.84,7981023.001,2,16,0)
   <body>
"KRN",.84,7981023.001,2,17,0)
    <h1>Sustained Virologic Response</h1>
"KRN",.84,7981023.001,2,18,0)
    <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981023.001,2,19,0)
    <br />
"KRN",.84,7981023.001,2,20,0)
    <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981023.001,2,21,0)
    <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981023.001,2,22,0)
 border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981023.001,2,23,0)
    <div>
"KRN",.84,7981023.001,2,24,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981023.001,2,25,0)
    </div>
"KRN",.84,7981023.001,2,26,0)
   </body>
"KRN",.84,7981023.001,2,27,0)
  </html>
"KRN",.84,7981023.001,2,28,0)
 </xsl:template>
"KRN",.84,7981023.001,2,29,0)
  
"KRN",.84,7981023.001,2,30,0)
 <!--[ TABLE HEADERS ]-->
"KRN",.84,7981023.001,2,31,0)
  
"KRN",.84,7981023.001,2,32,0)
 <xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981023.001,2,33,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981023.001,2,34,0)
   <xsl:with-param name="title" select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981023.001,2,35,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981023.001,2,36,0)
  </xsl:call-template>
"KRN",.84,7981023.001,2,37,0)
 </xsl:template>
"KRN",.84,7981023.001,2,38,0)
  
"KRN",.84,7981023.001,2,39,0)
 <xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981023.001,2,40,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981023.001,2,41,0)
   <xsl:with-param name="title" select="'Most Recent HCV RNA'"/>
"KRN",.84,7981023.001,2,42,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981023.001,2,43,0)
  </xsl:call-template>
"KRN",.84,7981023.001,2,44,0)
 </xsl:template>
"KRN",.84,7981023.001,2,45,0)
  
"KRN",.84,7981023.001,2,46,0)
 <xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981023.001,2,47,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981023.001,2,48,0)
   <xsl:with-param name="title" select="'Most Recent GT'"/>
"KRN",.84,7981023.001,2,49,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981023.001,2,50,0)
  </xsl:call-template>
"KRN",.84,7981023.001,2,51,0)
 </xsl:template>
"KRN",.84,7981023.001,2,52,0)
  
"KRN",.84,7981023.001,2,53,0)
 <xsl:template match="COLUMN[@NAME='LAST_TAKEN']">
"KRN",.84,7981023.001,2,54,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981023.001,2,55,0)
   <xsl:with-param name="title" select="'Treatment End Date'"/>
"KRN",.84,7981023.001,2,56,0)
   <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981023.001,2,57,0)
 </xsl:call-template>
"KRN",.84,7981023.001,2,58,0)
 </xsl:template>
"KRN",.84,7981023.001,2,59,0)
  
"KRN",.84,7981023.001,2,60,0)
 <!--[ TABLE CELLS ]-->
"KRN",.84,7981023.001,2,61,0)
  
"KRN",.84,7981023.001,2,62,0)
 <xsl:template match="PATIENT/HCV_DATE">
"KRN",.84,7981023.001,2,63,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981023.001,2,64,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981023.001,2,65,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981023.001,2,66,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981023.001,2,67,0)
  </xsl:call-template>
"KRN",.84,7981023.001,2,68,0)
 </xsl:template>
"KRN",.84,7981023.001,2,69,0)
  
"KRN",.84,7981023.001,2,70,0)
 <xsl:template match="PATIENT/LAST_TAKEN">
"KRN",.84,7981023.001,2,71,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981023.001,2,72,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981023.001,2,73,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981023.001,2,74,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981023.001,2,75,0)
  </xsl:call-template>
"KRN",.84,7981023.001,2,76,0)
 </xsl:template>
"KRN",.84,7981023.001,2,77,0)
  
"KRN",.84,7981023.001,2,78,0)
 </xsl:stylesheet>
"KRN",.84,7981023.002,-1)
0^15
"KRN",.84,7981023.002,0)
7981023.002^2^^CLINICAL CASE REGISTRIES^Sustained Virologic Response (CSV)
"KRN",.84,7981023.002,2,0)
^.844^65^65^3150521^^^^
"KRN",.84,7981023.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981023.002,2,2,0)
 <xsl:stylesheet version="1.0"  
"KRN",.84,7981023.002,2,3,0)
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981023.002,2,4,0)
  
"KRN",.84,7981023.002,2,5,0)
 <xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981023.002,2,6,0)
  
"KRN",.84,7981023.002,2,7,0)
 <!-- Determine if the ICN column is present on the report. -->
"KRN",.84,7981023.002,2,8,0)
 <xsl:variable name="ICN_YES" select="/REPORT/PATIENTS/PATIENT[1]/ICN"/>
"KRN",.84,7981023.002,2,9,0)
  
"KRN",.84,7981023.002,2,10,0)
 <xsl:template match="/">
"KRN",.84,7981023.002,2,11,0)
   <xsl:text>Sustained Virologic Response</xsl:text>
"KRN",.84,7981023.002,2,12,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981023.002,2,13,0)
 </xsl:template>
"KRN",.84,7981023.002,2,14,0)
  
"KRN",.84,7981023.002,2,15,0)
  <xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981023.002,2,16,0)
   <xsl:value-of select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981023.002,2,17,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981023.002,2,18,0)
  </xsl:template>
"KRN",.84,7981023.002,2,19,0)
  
"KRN",.84,7981023.002,2,20,0)
  <xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981023.002,2,21,0)
   <xsl:value-of select="'Most Recent HCV RNA'"/>
"KRN",.84,7981023.002,2,22,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981023.002,2,23,0)
  </xsl:template>
"KRN",.84,7981023.002,2,24,0)
  
"KRN",.84,7981023.002,2,25,0)
  <xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981023.002,2,26,0)
   <xsl:value-of select="'Most Recent GT'"/>
"KRN",.84,7981023.002,2,27,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981023.002,2,28,0)
  </xsl:template>
"KRN",.84,7981023.002,2,29,0)
  
"KRN",.84,7981023.002,2,30,0)
  <xsl:template match="COLUMN[@NAME='LAST_TAKEN']">
"KRN",.84,7981023.002,2,31,0)
   <xsl:value-of select="'Treatment End Date'"/>
"KRN",.84,7981023.002,2,32,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981023.002,2,33,0)
  </xsl:template>
"KRN",.84,7981023.002,2,34,0)
  
"KRN",.84,7981023.002,2,35,0)
  <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981023.002,2,36,0)
   <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981023.002,2,37,0)
   <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981023.002,2,38,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,39,0)
    <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981023.002,2,40,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,41,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,42,0)
    <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981023.002,2,43,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,44,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,45,0)
    <xsl:with-param name="value" select="HCV_DATE"/>
"KRN",.84,7981023.002,2,46,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981023.002,2,47,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,48,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,49,0)
    <xsl:with-param name="value" select="HCV"/>
"KRN",.84,7981023.002,2,50,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,51,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,52,0)
    <xsl:with-param name="value" select="GT"/>
"KRN",.84,7981023.002,2,53,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,54,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,55,0)
    <xsl:with-param name="value" select="LAST_TAKEN"/>
"KRN",.84,7981023.002,2,56,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981023.002,2,57,0)
   </xsl:call-template>
"KRN",.84,7981023.002,2,58,0)
   <xsl:if test="$ICN_YES">
"KRN",.84,7981023.002,2,59,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981023.002,2,60,0)
     <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981023.002,2,61,0)
    </xsl:call-template>
"KRN",.84,7981023.002,2,62,0)
   </xsl:if>
"KRN",.84,7981023.002,2,63,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981023.002,2,64,0)
  </xsl:template>  
"KRN",.84,7981023.002,2,65,0)
 </xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^11
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^.844^924^924^3150422^^^^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<!-- Common (999.1) -->
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,8,0)
 
"KRN",.84,7981999.001,2,9,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,10,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,11,0)
 
"KRN",.84,7981999.001,2,12,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,13,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,16,0)
 
"KRN",.84,7981999.001,2,17,0)
<!--
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
                                UTILITIES
"KRN",.84,7981999.001,2,20,0)
=========================================================================
"KRN",.84,7981999.001,2,21,0)
-->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,24,0)
 
"KRN",.84,7981999.001,2,25,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,28,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,29,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,30,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,31,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,32,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,33,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,34,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,35,0)
  </xsl:when>
"KRN",.84,7981999.001,2,36,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,37,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,38,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,39,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,40,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,41,0)
  </xsl:when>
"KRN",.84,7981999.001,2,42,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,43,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,44,0)
</xsl:template>
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,47,0)
 
"KRN",.84,7981999.001,2,48,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,49,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,50,0)
 <!--
"KRN",.84,7981999.001,2,51,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,52,0)
 -->
"KRN",.84,7981999.001,2,53,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,54,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,55,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,56,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,57,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,59,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,61,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,62,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,63,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,64,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,65,0)
     </xsl:when>
"KRN",.84,7981999.001,2,66,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,67,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,68,0)
     </xsl:when>
"KRN",.84,7981999.001,2,69,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,70,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,71,0)
   </xsl:when>
"KRN",.84,7981999.001,2,72,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,73,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,74,0)
  <!--
"KRN",.84,7981999.001,2,75,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,76,0)
  -->
"KRN",.84,7981999.001,2,77,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,78,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,79,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,82,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,83,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,84,0)
  </xsl:if>
"KRN",.84,7981999.001,2,85,0)
 </xsl:if>
"KRN",.84,7981999.001,2,86,0)
</xsl:template>
"KRN",.84,7981999.001,2,87,0)
 
"KRN",.84,7981999.001,2,88,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,89,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,90,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,91,0)
</xsl:template>
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,94,0)
 
"KRN",.84,7981999.001,2,95,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,99,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,100,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,101,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,102,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,103,0)
   <a>
"KRN",.84,7981999.001,2,104,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,105,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,106,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,107,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,108,0)
    </xsl:if>
"KRN",.84,7981999.001,2,109,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,110,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,111,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,112,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,113,0)
    </xsl:if>
"KRN",.84,7981999.001,2,114,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,115,0)
   </a>
"KRN",.84,7981999.001,2,116,0)
  </xsl:when>
"KRN",.84,7981999.001,2,117,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,118,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,119,0)
</xsl:template>
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,122,0)
 
"KRN",.84,7981999.001,2,123,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,124,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,125,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,126,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,127,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,128,0)
  </xsl:when>
"KRN",.84,7981999.001,2,129,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,131,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,132,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,133,0)
</xsl:template>
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,136,0)
 
"KRN",.84,7981999.001,2,137,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,138,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,139,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,140,0)
 <tr>
"KRN",.84,7981999.001,2,141,0)
  <th scope="row">
"KRN",.84,7981999.001,2,142,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,143,0)
  </th>
"KRN",.84,7981999.001,2,144,0)
  <td>
"KRN",.84,7981999.001,2,145,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,146,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,147,0)
   </xsl:if>
"KRN",.84,7981999.001,2,148,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,149,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,150,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,151,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,152,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,153,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,154,0)
  </td>
"KRN",.84,7981999.001,2,155,0)
 </tr>
"KRN",.84,7981999.001,2,156,0)
</xsl:template>
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<!--
"KRN",.84,7981999.001,2,159,0)
Special processing for multivalued local fields to handle 
"KRN",.84,7981999.001,2,160,0)
pseudo local field  in the HIV_DX tag.
"KRN",.84,7981999.001,2,161,0)
-->
"KRN",.84,7981999.001,2,162,0)
 
"KRN",.84,7981999.001,2,163,0)
<xsl:template name="LocalList">
"KRN",.84,7981999.001,2,164,0)
 <xsl:param name="firstitem"/>
"KRN",.84,7981999.001,2,165,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,166,0)
 <tr>
"KRN",.84,7981999.001,2,167,0)
  <th scope="row">
"KRN",.84,7981999.001,2,168,0)
   <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,169,0)
  </th>
"KRN",.84,7981999.001,2,170,0)
  <td>
"KRN",.84,7981999.001,2,171,0)
   <xsl:if test="$firstitem!=''">
"KRN",.84,7981999.001,2,172,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,173,0)
    <xsl:value-of select="$firstitem"/>
"KRN",.84,7981999.001,2,174,0)
    <xsl:text>); </xsl:text>
"KRN",.84,7981999.001,2,175,0)
   </xsl:if>
"KRN",.84,7981999.001,2,176,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,177,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,178,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,179,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,180,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,181,0)
  </td>
"KRN",.84,7981999.001,2,182,0)
 </tr>
"KRN",.84,7981999.001,2,183,0)
</xsl:template>
"KRN",.84,7981999.001,2,184,0)
 
"KRN",.84,7981999.001,2,185,0)
 
"KRN",.84,7981999.001,2,186,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,187,0)
 
"KRN",.84,7981999.001,2,188,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,189,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,190,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,191,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,192,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,193,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,194,0)
 </xsl:if>
"KRN",.84,7981999.001,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,196,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,197,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,198,0)
  </xsl:when>
"KRN",.84,7981999.001,2,199,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,200,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,201,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,202,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,203,0)
</xsl:template>
"KRN",.84,7981999.001,2,204,0)
 
"KRN",.84,7981999.001,2,205,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,206,0)
 
"KRN",.84,7981999.001,2,207,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,208,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,209,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,210,0)
  <tr>
"KRN",.84,7981999.001,2,211,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,212,0)
   <td>
"KRN",.84,7981999.001,2,213,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,214,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,215,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,216,0)
   </td>
"KRN",.84,7981999.001,2,217,0)
  </tr>
"KRN",.84,7981999.001,2,218,0)
  <tr>
"KRN",.84,7981999.001,2,219,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,220,0)
   <td>
"KRN",.84,7981999.001,2,221,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,222,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,223,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,224,0)
   </td>
"KRN",.84,7981999.001,2,225,0)
  </tr>
"KRN",.84,7981999.001,2,226,0)
  <tr>
"KRN",.84,7981999.001,2,227,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,228,0)
   <td>
"KRN",.84,7981999.001,2,229,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,230,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,231,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,232,0)
   </td>
"KRN",.84,7981999.001,2,233,0)
  </tr>
"KRN",.84,7981999.001,2,234,0)
  <tr>
"KRN",.84,7981999.001,2,235,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,236,0)
   <td>
"KRN",.84,7981999.001,2,237,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,238,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,239,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,240,0)
   </td>
"KRN",.84,7981999.001,2,241,0)
  </tr>
"KRN",.84,7981999.001,2,242,0)
 </table>
"KRN",.84,7981999.001,2,243,0)
</xsl:template>
"KRN",.84,7981999.001,2,244,0)
 
"KRN",.84,7981999.001,2,245,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,246,0)
 
"KRN",.84,7981999.001,2,247,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,248,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,249,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,250,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,251,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,252,0)
  </div>
"KRN",.84,7981999.001,2,253,0)
 </xsl:if>
"KRN",.84,7981999.001,2,254,0)
</xsl:template>
"KRN",.84,7981999.001,2,255,0)
 
"KRN",.84,7981999.001,2,256,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,257,0)
 
"KRN",.84,7981999.001,2,258,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,259,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,260,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,261,0)
 </table>
"KRN",.84,7981999.001,2,262,0)
</xsl:template>
"KRN",.84,7981999.001,2,263,0)
 
"KRN",.84,7981999.001,2,264,0)
<!--
"KRN",.84,7981999.001,2,265,0)
=========================================================================
"KRN",.84,7981999.001,2,266,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,267,0)
=========================================================================
"KRN",.84,7981999.001,2,268,0)
-->
"KRN",.84,7981999.001,2,269,0)
 
"KRN",.84,7981999.001,2,270,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,271,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,272,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,273,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,274,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,275,0)
   <tr>
"KRN",.84,7981999.001,2,276,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,277,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,278,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,279,0)
     </table>
"KRN",.84,7981999.001,2,280,0)
    </td>
"KRN",.84,7981999.001,2,281,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,282,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,283,0)
    </td>
"KRN",.84,7981999.001,2,284,0)
   </tr>
"KRN",.84,7981999.001,2,285,0)
  </table>
"KRN",.84,7981999.001,2,286,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,287,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,288,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,289,0)
   </table>
"KRN",.84,7981999.001,2,290,0)
  </xsl:if>
"KRN",.84,7981999.001,2,291,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,292,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,293,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,294,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,295,0)
   </div>
"KRN",.84,7981999.001,2,296,0)
  </xsl:if>
"KRN",.84,7981999.001,2,297,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,298,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,299,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,300,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,301,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,302,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,303,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,304,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,305,0)
     </xsl:when>
"KRN",.84,7981999.001,2,306,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,307,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,308,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,309,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,310,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,311,0)
   </dl>
"KRN",.84,7981999.001,2,312,0)
  </xsl:if>
"KRN",.84,7981999.001,2,313,0)
 </div>
"KRN",.84,7981999.001,2,314,0)
</xsl:template>
"KRN",.84,7981999.001,2,315,0)
 
"KRN",.84,7981999.001,2,316,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,317,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,318,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,319,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,320,0)
</xsl:template>
"KRN",.84,7981999.001,2,321,0)
 
"KRN",.84,7981999.001,2,322,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,323,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,324,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,325,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,326,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,327,0)
</xsl:template>
"KRN",.84,7981999.001,2,328,0)
 
"KRN",.84,7981999.001,2,329,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,330,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,331,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,332,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,336,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,337,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,338,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,339,0)
</xsl:template>
"KRN",.84,7981999.001,2,340,0)
 
"KRN",.84,7981999.001,2,341,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,342,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,343,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,344,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,345,0)
  <tr>
"KRN",.84,7981999.001,2,346,0)
   <th scope="row">
"KRN",.84,7981999.001,2,347,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,348,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,349,0)
    </xsl:if>
"KRN",.84,7981999.001,2,350,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,351,0)
   </th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,357,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,358,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,359,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,360,0)
   </td>
"KRN",.84,7981999.001,2,361,0)
  </tr>
"KRN",.84,7981999.001,2,362,0)
 </xsl:if>
"KRN",.84,7981999.001,2,363,0)
</xsl:template>
"KRN",.84,7981999.001,2,364,0)
 
"KRN",.84,7981999.001,2,365,0)
<!-- 
"KRN",.84,7981999.001,2,366,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,367,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,368,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,369,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,370,0)
  <tr>
"KRN",.84,7981999.001,2,371,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,372,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,373,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,374,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,375,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,376,0)
   </td>
"KRN",.84,7981999.001,2,377,0)
  </tr>
"KRN",.84,7981999.001,2,378,0)
 </xsl:if>
"KRN",.84,7981999.001,2,379,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,380,0)
  <tr>
"KRN",.84,7981999.001,2,381,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,382,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,383,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,384,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,385,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,386,0)
   </td>
"KRN",.84,7981999.001,2,387,0)
  </tr>
"KRN",.84,7981999.001,2,388,0)
 </xsl:if>
"KRN",.84,7981999.001,2,389,0)
</xsl:template>
"KRN",.84,7981999.001,2,390,0)
-->
"KRN",.84,7981999.001,2,391,0)
 
"KRN",.84,7981999.001,2,392,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,393,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,394,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,395,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,396,0)
</xsl:template>
"KRN",.84,7981999.001,2,397,0)
 
"KRN",.84,7981999.001,2,398,0)
<xsl:template match="PARAMETERS/ICDLST">
"KRN",.84,7981999.001,2,399,0)
 <tr>
"KRN",.84,7981999.001,2,400,0)
  <th scope="row">ICD:&#160;</th>
"KRN",.84,7981999.001,2,401,0)
  <td>
"KRN",.84,7981999.001,2,402,0)
   <dl>
"KRN",.84,7981999.001,2,403,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,404,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,405,0)
    </xsl:if>
"KRN",.84,7981999.001,2,406,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,407,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,408,0)
   </dl>
"KRN",.84,7981999.001,2,409,0)
  </td>
"KRN",.84,7981999.001,2,410,0)
 </tr>
"KRN",.84,7981999.001,2,411,0)
</xsl:template>
"KRN",.84,7981999.001,2,412,0)
 
"KRN",.84,7981999.001,2,413,0)
<xsl:template match="PARAMETERS/ICDLST/GROUP">
"KRN",.84,7981999.001,2,414,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,415,0)
 <dd><dl>
"KRN",.84,7981999.001,2,416,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,417,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,418,0)
  </xsl:if>
"KRN",.84,7981999.001,2,419,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,420,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,421,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,422,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,423,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,424,0)
   </td>
"KRN",.84,7981999.001,2,425,0)
   <td>
"KRN",.84,7981999.001,2,426,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,427,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,428,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,429,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,430,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,431,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,432,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,433,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,434,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,435,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,436,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,437,0)
   </td>
"KRN",.84,7981999.001,2,438,0)
   <td>
"KRN",.84,7981999.001,2,439,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,440,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,441,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,442,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,443,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,444,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,445,0)
 </dl></dd>
"KRN",.84,7981999.001,2,446,0)
</xsl:template>
"KRN",.84,7981999.001,2,447,0)
 
"KRN",.84,7981999.001,2,448,0)
<xsl:template match="PARAMETERS/ICDFILT">
"KRN",.84,7981999.001,2,449,0)
 <tr>
"KRN",.84,7981999.001,2,450,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,451,0)
  <td>
"KRN",.84,7981999.001,2,452,0)
   <dl>
"KRN",.84,7981999.001,2,453,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,454,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,455,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,456,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,457,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,458,0)
        </xsl:when>
"KRN",.84,7981999.001,2,459,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,460,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,461,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,462,0)
        </xsl:when>
"KRN",.84,7981999.001,2,463,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,464,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,465,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,466,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,467,0)
    </xsl:if>
"KRN",.84,7981999.001,2,468,0)
   </dl>
"KRN",.84,7981999.001,2,469,0)
  </td>
"KRN",.84,7981999.001,2,470,0)
 </tr>
"KRN",.84,7981999.001,2,471,0)
</xsl:template>
"KRN",.84,7981999.001,2,472,0)
 
"KRN",.84,7981999.001,2,473,0)
<xsl:template match="PARAMETERS/ICDFILT/GROUP">
"KRN",.84,7981999.001,2,474,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,475,0)
 <dd><dl>
"KRN",.84,7981999.001,2,476,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,477,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,478,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,479,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,480,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,481,0)
   </td>
"KRN",.84,7981999.001,2,482,0)
   <td>
"KRN",.84,7981999.001,2,483,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,484,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,485,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,486,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,487,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,488,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,489,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,490,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,491,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,492,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,493,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,494,0)
   </td>
"KRN",.84,7981999.001,2,495,0)
   <td>
"KRN",.84,7981999.001,2,496,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,497,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,498,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,499,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,500,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,501,0)
   </td></tr></table> 
"KRN",.84,7981999.001,2,502,0)
 </dl></dd>
"KRN",.84,7981999.001,2,503,0)
</xsl:template> 
"KRN",.84,7981999.001,2,504,0)
 
"KRN",.84,7981999.001,2,505,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,506,0)
 <xsl:variable name="pseudo" select="/REPORT/PARAMETERS/HIV_DX" />
"KRN",.84,7981999.001,2,507,0)
 <xsl:call-template name="LocalList">
"KRN",.84,7981999.001,2,508,0)
  <xsl:with-param name="firstitem" select="$pseudo"/>
"KRN",.84,7981999.001,2,509,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,510,0)
</xsl:template>
"KRN",.84,7981999.001,2,511,0)
 
"KRN",.84,7981999.001,2,512,0)
<!-- Process the pseudo local field -->
"KRN",.84,7981999.001,2,513,0)
<xsl:template match="PARAMETERS/HIV_DX">
"KRN",.84,7981999.001,2,514,0)
 <xsl:if test="count(/REPORT/PARAMETERS/LOCAL_FIELDS/*) &lt; 1">
"KRN",.84,7981999.001,2,515,0)
  <tr>
"KRN",.84,7981999.001,2,516,0)
   <th scope="row">
"KRN",.84,7981999.001,2,517,0)
    <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,518,0)
   </th>
"KRN",.84,7981999.001,2,519,0)
   <td>
"KRN",.84,7981999.001,2,520,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,521,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,522,0)
    <xsl:text>)</xsl:text>
"KRN",.84,7981999.001,2,523,0)
   </td>
"KRN",.84,7981999.001,2,524,0)
  </tr>
"KRN",.84,7981999.001,2,525,0)
 </xsl:if>
"KRN",.84,7981999.001,2,526,0)
</xsl:template> 
"KRN",.84,7981999.001,2,527,0)
 
"KRN",.84,7981999.001,2,528,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,529,0)
 <tr>
"KRN",.84,7981999.001,2,530,0)
  <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,531,0)
  <td>
"KRN",.84,7981999.001,2,532,0)
    <xsl:if test="@ALL_FILLS='1'"><xsl:text>All fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,533,0)
    <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in time 
"KRN",.84,7981999.001,2,534,0)
period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,535,0)
    <xsl:if test="@RECENT_FILLS!='1' and @ALL_FILLS!='1'"><xsl:value-of 
"KRN",.84,7981999.001,2,536,0)
select="."/></xsl:if>
"KRN",.84,7981999.001,2,537,0)
  </td>
"KRN",.84,7981999.001,2,538,0)
 </tr>
"KRN",.84,7981999.001,2,539,0)
 <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,540,0)
  <tr>
"KRN",.84,7981999.001,2,541,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,542,0)
   <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,543,0)
  </tr>
"KRN",.84,7981999.001,2,544,0)
 </xsl:if>
"KRN",.84,7981999.001,2,545,0)
 <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,546,0)
  <tr>
"KRN",.84,7981999.001,2,547,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,548,0)
   <td>
"KRN",.84,7981999.001,2,549,0)
    <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,550,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,551,0)
     <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,552,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,553,0)
   </td>
"KRN",.84,7981999.001,2,554,0)
  </tr>
"KRN",.84,7981999.001,2,555,0)
 </xsl:if>
"KRN",.84,7981999.001,2,556,0)
</xsl:template>
"KRN",.84,7981999.001,2,557,0)
 
"KRN",.84,7981999.001,2,558,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,559,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,560,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,561,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,562,0)
</xsl:template>
"KRN",.84,7981999.001,2,563,0)
 
"KRN",.84,7981999.001,2,564,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,565,0)
 <tr>
"KRN",.84,7981999.001,2,566,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,567,0)
  <td>
"KRN",.84,7981999.001,2,568,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,569,0)
    <xsl:if test="@CONFDT_AFTER!=''">
"KRN",.84,7981999.001,2,570,0)
      <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,571,0)
      <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,572,0)
       <xsl:with-param name="dt" select="@CONFDT_AFTER"/>
"KRN",.84,7981999.001,2,573,0)
      </xsl:call-template>
"KRN",.84,7981999.001,2,574,0)
    </xsl:if>
"KRN",.84,7981999.001,2,575,0)
  </td>
"KRN",.84,7981999.001,2,576,0)
 </tr>
"KRN",.84,7981999.001,2,577,0)
 <xsl:if test="@OEF!=''">
"KRN",.84,7981999.001,2,578,0)
  <tr>
"KRN",.84,7981999.001,2,579,0)
   <th scope="row">OEF/OIF:&#160;</th>
"KRN",.84,7981999.001,2,580,0)
   <td>
"KRN",.84,7981999.001,2,581,0)
    <xsl:if test="@OEF='1'">
"KRN",.84,7981999.001,2,582,0)
      <xsl:text>Include only</xsl:text>
"KRN",.84,7981999.001,2,583,0)
    </xsl:if>
"KRN",.84,7981999.001,2,584,0)
    <xsl:if test="@OEF='-1'">
"KRN",.84,7981999.001,2,585,0)
      <xsl:text>Exclude</xsl:text>
"KRN",.84,7981999.001,2,586,0)
    </xsl:if>
"KRN",.84,7981999.001,2,587,0)
   </td>
"KRN",.84,7981999.001,2,588,0)
  </tr>
"KRN",.84,7981999.001,2,589,0)
 </xsl:if>
"KRN",.84,7981999.001,2,590,0)
 <tr>
"KRN",.84,7981999.001,2,591,0)
  <th scope="row">Sex:&#160;</th>
"KRN",.84,7981999.001,2,592,0)
  <td>
"KRN",.84,7981999.001,2,593,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,594,0)
     <xsl:when test="@SEX">
"KRN",.84,7981999.001,2,595,0)
      <xsl:if test="@SEX='F'">
"KRN",.84,7981999.001,2,596,0)
       <xsl:text>Female only</xsl:text>
"KRN",.84,7981999.001,2,597,0)
      </xsl:if>
"KRN",.84,7981999.001,2,598,0)
      <xsl:if test="@SEX='M'">
"KRN",.84,7981999.001,2,599,0)
       <xsl:text>Male only</xsl:text>
"KRN",.84,7981999.001,2,600,0)
      </xsl:if>
"KRN",.84,7981999.001,2,601,0)
     </xsl:when>
"KRN",.84,7981999.001,2,602,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,603,0)
      <xsl:text>Both</xsl:text>
"KRN",.84,7981999.001,2,604,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,605,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,606,0)
  </td>
"KRN",.84,7981999.001,2,607,0)
 </tr>
"KRN",.84,7981999.001,2,608,0)
 <xsl:if test="@SVR!=''">
"KRN",.84,7981999.001,2,609,0)
   <tr>
"KRN",.84,7981999.001,2,610,0)
    <th scope="row">SVR:&#160;</th>
"KRN",.84,7981999.001,2,611,0)
    <td>
"KRN",.84,7981999.001,2,612,0)
     <xsl:if test="@SVR='1'">
"KRN",.84,7981999.001,2,613,0)
       <xsl:text>SVR Only</xsl:text>
"KRN",.84,7981999.001,2,614,0)
     </xsl:if>
"KRN",.84,7981999.001,2,615,0)
     <xsl:if test="@SVR='0'">
"KRN",.84,7981999.001,2,616,0)
       <xsl:text>No SVR</xsl:text>
"KRN",.84,7981999.001,2,617,0)
     </xsl:if>
"KRN",.84,7981999.001,2,618,0)
     <xsl:if test="@SVR='-1'">
"KRN",.84,7981999.001,2,619,0)
       <xsl:text>All patients</xsl:text>
"KRN",.84,7981999.001,2,620,0)
     </xsl:if>
"KRN",.84,7981999.001,2,621,0)
    </td>
"KRN",.84,7981999.001,2,622,0)
   </tr>
"KRN",.84,7981999.001,2,623,0)
 </xsl:if>
"KRN",.84,7981999.001,2,624,0)
</xsl:template>
"KRN",.84,7981999.001,2,625,0)
 
"KRN",.84,7981999.001,2,626,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,627,0)
 <tr>
"KRN",.84,7981999.001,2,628,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,629,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,630,0)
 </tr>
"KRN",.84,7981999.001,2,631,0)
</xsl:template>
"KRN",.84,7981999.001,2,632,0)
 
"KRN",.84,7981999.001,2,633,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,634,0)
 <tr>
"KRN",.84,7981999.001,2,635,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,636,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,637,0)
 </tr>
"KRN",.84,7981999.001,2,638,0)
</xsl:template>
"KRN",.84,7981999.001,2,639,0)
 
"KRN",.84,7981999.001,2,640,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,641,0)
 <tr>
"KRN",.84,7981999.001,2,642,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,643,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,644,0)
 </tr>
"KRN",.84,7981999.001,2,645,0)
</xsl:template>
"KRN",.84,7981999.001,2,646,0)
 
"KRN",.84,7981999.001,2,647,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,648,0)
 <tr>
"KRN",.84,7981999.001,2,649,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,650,0)
  <td>
"KRN",.84,7981999.001,2,651,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,652,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,653,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,654,0)
  </td>
"KRN",.84,7981999.001,2,655,0)
 </tr>
"KRN",.84,7981999.001,2,656,0)
</xsl:template>
"KRN",.84,7981999.001,2,657,0)
 
"KRN",.84,7981999.001,2,658,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,659,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,660,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,661,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,662,0)
<xsl:if test="../TREATMENT_HISTORY">
"KRN",.84,7981999.001,2,663,0)
  <tr>
"KRN",.84,7981999.001,2,664,0)
   <th scope="row">Treatment History:&#160;</th>
"KRN",.84,7981999.001,2,665,0)
   <td>
"KRN",.84,7981999.001,2,666,0)
     <xsl:value-of select="../TREATMENT_HISTORY"/>
"KRN",.84,7981999.001,2,667,0)
   </td>
"KRN",.84,7981999.001,2,668,0)
  </tr>
"KRN",.84,7981999.001,2,669,0)
 </xsl:if>
"KRN",.84,7981999.001,2,670,0)
</xsl:template>
"KRN",.84,7981999.001,2,671,0)
 
"KRN",.84,7981999.001,2,672,0)
 
"KRN",.84,7981999.001,2,673,0)
<!--
"KRN",.84,7981999.001,2,674,0)
=========================================================================
"KRN",.84,7981999.001,2,675,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,676,0)
=========================================================================
"KRN",.84,7981999.001,2,677,0)
-->
"KRN",.84,7981999.001,2,678,0)
 
"KRN",.84,7981999.001,2,679,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,680,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,681,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,682,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,683,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,684,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,685,0)
   <div>
"KRN",.84,7981999.001,2,686,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,687,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,688,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,689,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,690,0)
    </xsl:if>
"KRN",.84,7981999.001,2,691,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,692,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,693,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,694,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,695,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,696,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,697,0)
     <tbody>
"KRN",.84,7981999.001,2,698,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,699,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,700,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,701,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,702,0)
     </tbody>
"KRN",.84,7981999.001,2,703,0)
    </table>
"KRN",.84,7981999.001,2,704,0)
   </div>
"KRN",.84,7981999.001,2,705,0)
  </xsl:when>
"KRN",.84,7981999.001,2,706,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,707,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,708,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,709,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,710,0)
</xsl:template>
"KRN",.84,7981999.001,2,711,0)
 
"KRN",.84,7981999.001,2,712,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,713,0)
 
"KRN",.84,7981999.001,2,714,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,715,0)
 <thead>
"KRN",.84,7981999.001,2,716,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,717,0)
 </thead>
"KRN",.84,7981999.001,2,718,0)
</xsl:template>
"KRN",.84,7981999.001,2,719,0)
 
"KRN",.84,7981999.001,2,720,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,721,0)
 
"KRN",.84,7981999.001,2,722,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,723,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,724,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,725,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,726,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,727,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,728,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,729,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,730,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,731,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,732,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,733,0)
 <th scope="col">
"KRN",.84,7981999.001,2,734,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,735,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,736,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,737,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,738,0)
  </xsl:if>
"KRN",.84,7981999.001,2,739,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,740,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,741,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,742,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,743,0)
  </xsl:if>
"KRN",.84,7981999.001,2,744,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,745,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,746,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,747,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,748,0)
  </xsl:if>
"KRN",.84,7981999.001,2,749,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,750,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,751,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,752,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,753,0)
  </xsl:if>
"KRN",.84,7981999.001,2,754,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,755,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,756,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,757,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,758,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,759,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,760,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,761,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,762,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,763,0)
    </xsl:element>
"KRN",.84,7981999.001,2,764,0)
   </xsl:when>
"KRN",.84,7981999.001,2,765,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,766,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,767,0)
 </th>
"KRN",.84,7981999.001,2,768,0)
</xsl:template>
"KRN",.84,7981999.001,2,769,0)
 
"KRN",.84,7981999.001,2,770,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,771,0)
 
"KRN",.84,7981999.001,2,772,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,773,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,774,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,775,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,776,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,777,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,778,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,779,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,780,0)
  </xsl:if>
"KRN",.84,7981999.001,2,781,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,782,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,783,0)
</xsl:template>
"KRN",.84,7981999.001,2,784,0)
 
"KRN",.84,7981999.001,2,785,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,786,0)
 
"KRN",.84,7981999.001,2,787,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,788,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,789,0)
 <tr>
"KRN",.84,7981999.001,2,790,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,791,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,792,0)
  </xsl:if>
"KRN",.84,7981999.001,2,793,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,794,0)
 </tr>
"KRN",.84,7981999.001,2,795,0)
</xsl:template>
"KRN",.84,7981999.001,2,796,0)
 
"KRN",.84,7981999.001,2,797,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,798,0)
 
"KRN",.84,7981999.001,2,799,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,800,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,801,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,802,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,803,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,804,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,805,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,806,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,807,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,808,0)
 <td>
"KRN",.84,7981999.001,2,809,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,810,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,811,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,812,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,813,0)
  </xsl:if>
"KRN",.84,7981999.001,2,814,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,815,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,816,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,817,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,818,0)
  </xsl:if>
"KRN",.84,7981999.001,2,819,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,820,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,821,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,822,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,823,0)
  </xsl:if>
"KRN",.84,7981999.001,2,824,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,825,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,826,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,827,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,828,0)
  </xsl:if>
"KRN",.84,7981999.001,2,829,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,830,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,831,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,832,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,833,0)
  </xsl:if>
"KRN",.84,7981999.001,2,834,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,835,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,836,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,837,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,838,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,839,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,840,0)
   </xsl:when>
"KRN",.84,7981999.001,2,841,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,842,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,843,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,844,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,845,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,846,0)
   </xsl:when>
"KRN",.84,7981999.001,2,847,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,848,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,849,0)
 </td>
"KRN",.84,7981999.001,2,850,0)
</xsl:template>
"KRN",.84,7981999.001,2,851,0)
 
"KRN",.84,7981999.001,2,852,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,853,0)
 
"KRN",.84,7981999.001,2,854,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,855,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,856,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,857,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,858,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,859,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,860,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,861,0)
</xsl:template>
"KRN",.84,7981999.001,2,862,0)
 
"KRN",.84,7981999.001,2,863,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,864,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,865,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,866,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,867,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,868,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,869,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,870,0)
</xsl:template>
"KRN",.84,7981999.001,2,871,0)
 
"KRN",.84,7981999.001,2,872,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,873,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,874,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,875,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,876,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,877,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,878,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,879,0)
</xsl:template>
"KRN",.84,7981999.001,2,880,0)
 
"KRN",.84,7981999.001,2,881,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,882,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,883,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,884,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,885,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,886,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,887,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,888,0)
</xsl:template>
"KRN",.84,7981999.001,2,889,0)
 
"KRN",.84,7981999.001,2,890,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,891,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,892,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,893,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,894,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,895,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,896,0)
</xsl:template>
"KRN",.84,7981999.001,2,897,0)
 
"KRN",.84,7981999.001,2,898,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,899,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,900,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,901,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,902,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,903,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,904,0)
</xsl:template>
"KRN",.84,7981999.001,2,905,0)
 
"KRN",.84,7981999.001,2,906,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,907,0)
 
"KRN",.84,7981999.001,2,908,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,909,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,910,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,911,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,912,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,913,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,914,0)
</xsl:template>
"KRN",.84,7981999.001,2,915,0)
 
"KRN",.84,7981999.001,2,916,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,917,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,918,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,919,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,920,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,921,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,922,0)
</xsl:template>
"KRN",.84,7981999.001,2,923,0)
 
"KRN",.84,7981999.001,2,924,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"KRN",.84,7981999.002,-1)
0^10
"KRN",.84,7981999.002,0)
7981999.002^2^^CLINICAL CASE REGISTRIES^Common XSL templates (CSV)
"KRN",.84,7981999.002,2,0)
^.844^256^256^3150521^^^^
"KRN",.84,7981999.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981999.002,2,4,0)
>
"KRN",.84,7981999.002,2,5,0)
 
"KRN",.84,7981999.002,2,6,0)
<xsl:output method="text" encoding="iso-8859-1"/>
"KRN",.84,7981999.002,2,7,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.002,2,8,0)
 
"KRN",.84,7981999.002,2,9,0)
<xsl:variable name="CRLF"><xsl:text>&#13;&#10;</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,10,0)
<xsl:variable name="DELIMITER"><xsl:text>,</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,11,0)
<!-- xsl:variable name="FILESWITCH"><xsl:text>&#127;</xsl:text></xsl:variable -->
"KRN",.84,7981999.002,2,12,0)
 
"KRN",.84,7981999.002,2,13,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.002,2,14,0)
 
"KRN",.84,7981999.002,2,15,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.002,2,16,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.002,2,17,0)
 
"KRN",.84,7981999.002,2,18,0)
<!--
"KRN",.84,7981999.002,2,19,0)
=========================================================================
"KRN",.84,7981999.002,2,20,0)
                                UTILITIES
"KRN",.84,7981999.002,2,21,0)
=========================================================================
"KRN",.84,7981999.002,2,22,0)
-->
"KRN",.84,7981999.002,2,23,0)
 
"KRN",.84,7981999.002,2,24,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.002,2,25,0)
 
"KRN",.84,7981999.002,2,26,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.002,2,27,0)
 <xsl:param name="dt"/>
"KRN",.84,7981999.002,2,28,0)
 <!--
"KRN",.84,7981999.002,2,29,0)
     Date (YYYMMDD)
"KRN",.84,7981999.002,2,30,0)
 -->
"KRN",.84,7981999.002,2,31,0)
 <xsl:variable name="date"
"KRN",.84,7981999.002,2,32,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.002,2,33,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.002,2,34,0)
  <xsl:choose>
"KRN",.84,7981999.002,2,35,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.002,2,36,0)
    <xsl:variable name="year" 
"KRN",.84,7981999.002,2,37,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.002,2,38,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.002,2,39,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.002,2,40,0)
    <xsl:choose>
"KRN",.84,7981999.002,2,41,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.002,2,42,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.002,2,43,0)
     </xsl:when>
"KRN",.84,7981999.002,2,44,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.002,2,45,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.002,2,46,0)
     </xsl:when>
"KRN",.84,7981999.002,2,47,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.002,2,48,0)
    </xsl:choose>
"KRN",.84,7981999.002,2,49,0)
   </xsl:when>
"KRN",.84,7981999.002,2,50,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.002,2,51,0)
  </xsl:choose>
"KRN",.84,7981999.002,2,52,0)
  <!--
"KRN",.84,7981999.002,2,53,0)
      Time (HHMMSS)
"KRN",.84,7981999.002,2,54,0)
  -->
"KRN",.84,7981999.002,2,55,0)
  <xsl:variable name="time"
"KRN",.84,7981999.002,2,56,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.002,2,57,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.002,2,58,0)
   <xsl:text> </xsl:text>
"KRN",.84,7981999.002,2,59,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.002,2,60,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.002,2,61,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.002,2,62,0)
  </xsl:if>
"KRN",.84,7981999.002,2,63,0)
 </xsl:if>
"KRN",.84,7981999.002,2,64,0)
</xsl:template>
"KRN",.84,7981999.002,2,65,0)
 
"KRN",.84,7981999.002,2,66,0)
<!-- Doubles the double quotes in the provided string -->
"KRN",.84,7981999.002,2,67,0)
 
"KRN",.84,7981999.002,2,68,0)
<xsl:template name="DoubleQuotes">
"KRN",.84,7981999.002,2,69,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,70,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,71,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,72,0)
   <xsl:value-of select="substring-before($value,'&quot;')"/>
"KRN",.84,7981999.002,2,73,0)
   <xsl:text>&quot;&quot;</xsl:text>
"KRN",.84,7981999.002,2,74,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,75,0)
    <xsl:with-param name="value" 
"KRN",.84,7981999.002,2,76,0)
                    select="substring-after($value,'&quot;')"/>
"KRN",.84,7981999.002,2,77,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,78,0)
  </xsl:when>
"KRN",.84,7981999.002,2,79,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,80,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,81,0)
</xsl:template>
"KRN",.84,7981999.002,2,82,0)
 
"KRN",.84,7981999.002,2,83,0)
<!-- Quotes the string if it contains commas or double quotes -->
"KRN",.84,7981999.002,2,84,0)
 
"KRN",.84,7981999.002,2,85,0)
<xsl:template name="Quote">
"KRN",.84,7981999.002,2,86,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,87,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,88,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,89,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,90,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,91,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,92,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,93,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,94,0)
  </xsl:when>
"KRN",.84,7981999.002,2,95,0)
  <xsl:when test="contains($value,$DELIMITER)">
"KRN",.84,7981999.002,2,96,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,97,0)
   <xsl:value-of select="$value"/>
"KRN",.84,7981999.002,2,98,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,99,0)
  </xsl:when>
"KRN",.84,7981999.002,2,100,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,101,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,102,0)
</xsl:template> 
"KRN",.84,7981999.002,2,103,0)
 
"KRN",.84,7981999.002,2,104,0)
<!-- Default report summary -->
"KRN",.84,7981999.002,2,105,0)
 
"KRN",.84,7981999.002,2,106,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.002,2,107,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.002,2,108,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.002,2,109,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,110,0)
  <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.002,2,111,0)
 </xsl:if>
"KRN",.84,7981999.002,2,112,0)
</xsl:template>
"KRN",.84,7981999.002,2,113,0)
 
"KRN",.84,7981999.002,2,114,0)
<!-- Empty table indicator -->
"KRN",.84,7981999.002,2,115,0)
 
"KRN",.84,7981999.002,2,116,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.002,2,117,0)
 <xsl:text>No data has been found.</xsl:text>
"KRN",.84,7981999.002,2,118,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,119,0)
</xsl:template>
"KRN",.84,7981999.002,2,120,0)
 
"KRN",.84,7981999.002,2,121,0)
<!-- Format the section of a utilization report -->
"KRN",.84,7981999.002,2,122,0)
 
"KRN",.84,7981999.002,2,123,0)
<xsl:template name="UtilizationSection">
"KRN",.84,7981999.002,2,124,0)
 <xsl:param name="data"/>
"KRN",.84,7981999.002,2,125,0)
 <xsl:param name="subttl"/>
"KRN",.84,7981999.002,2,126,0)
 <xsl:variable name="table" select="$data/@TABLE"/>
"KRN",.84,7981999.002,2,127,0)
 <xsl:if test="$data/*[1]">
"KRN",.84,7981999.002,2,128,0)
  <xsl:value-of select="$UTILIZATION_HEADER"/>
"KRN",.84,7981999.002,2,129,0)
  <xsl:value-of select="concat(' (',$subttl,')')"/>
"KRN",.84,7981999.002,2,130,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,131,0)
  <xsl:apply-templates select="$data"/>
"KRN",.84,7981999.002,2,132,0)
  <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981999.002,2,133,0)
 </xsl:if>
"KRN",.84,7981999.002,2,134,0)
 
"KRN",.84,7981999.002,2,135,0)
</xsl:template>
"KRN",.84,7981999.002,2,136,0)
 
"KRN",.84,7981999.002,2,137,0)
<!--
"KRN",.84,7981999.002,2,138,0)
=========================================================================
"KRN",.84,7981999.002,2,139,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.002,2,140,0)
=========================================================================
"KRN",.84,7981999.002,2,141,0)
-->
"KRN",.84,7981999.002,2,142,0)
 
"KRN",.84,7981999.002,2,143,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.002,2,144,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.002,2,145,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,146,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,147,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.002,2,148,0)
   <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.002,2,149,0)
   <xsl:apply-templates select="*"/>
"KRN",.84,7981999.002,2,150,0)
  </xsl:when>
"KRN",.84,7981999.002,2,151,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,152,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.002,2,153,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,154,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,155,0)
</xsl:template>
"KRN",.84,7981999.002,2,156,0)
 
"KRN",.84,7981999.002,2,157,0)
<!-- Default data grid header -->
"KRN",.84,7981999.002,2,158,0)
 
"KRN",.84,7981999.002,2,159,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.002,2,160,0)
 <xsl:apply-templates select="..//COLUMN[not(child::COLUMN[1])]"/>
"KRN",.84,7981999.002,2,161,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,162,0)
</xsl:template>
"KRN",.84,7981999.002,2,163,0)
 
"KRN",.84,7981999.002,2,164,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.002,2,165,0)
 
"KRN",.84,7981999.002,2,166,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.002,2,167,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.002,2,168,0)
 <xsl:param name="title" select="$column/@NAME"/>
"KRN",.84,7981999.002,2,169,0)
 <xsl:if test="$title!='#'">
"KRN",.84,7981999.002,2,170,0)
  <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,171,0)
   <xsl:with-param name="value" select="$title"/>
"KRN",.84,7981999.002,2,172,0)
  </xsl:call-template>
"KRN",.84,7981999.002,2,173,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,174,0)
 </xsl:if>
"KRN",.84,7981999.002,2,175,0)
</xsl:template>
"KRN",.84,7981999.002,2,176,0)
 
"KRN",.84,7981999.002,2,177,0)
<!-- Default data grid row -->
"KRN",.84,7981999.002,2,178,0)
 
"KRN",.84,7981999.002,2,179,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.002,2,180,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.002,2,181,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981999.002,2,182,0)
  <xsl:value-of select="position()"/>
"KRN",.84,7981999.002,2,183,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,184,0)
 </xsl:if>
"KRN",.84,7981999.002,2,185,0)
 <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.002,2,186,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,187,0)
</xsl:template>
"KRN",.84,7981999.002,2,188,0)
 
"KRN",.84,7981999.002,2,189,0)
<!-- Data grid cell -->
"KRN",.84,7981999.002,2,190,0)
 
"KRN",.84,7981999.002,2,191,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.002,2,192,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.002,2,193,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,194,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.002,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.002,2,196,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.002,2,197,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.002,2,198,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.002,2,199,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,200,0)
  </xsl:when>
"KRN",.84,7981999.002,2,201,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.002,2,202,0)
   <xsl:choose>
"KRN",.84,7981999.002,2,203,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.002,2,204,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.002,2,205,0)
   </xsl:choose>
"KRN",.84,7981999.002,2,206,0)
  </xsl:when>
"KRN",.84,7981999.002,2,207,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,208,0)
   <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,209,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,210,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,211,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,212,0)
 </xsl:choose>
"KRN",.84,7981999.002,2,213,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,214,0)
</xsl:template>
"KRN",.84,7981999.002,2,215,0)
 
"KRN",.84,7981999.002,2,216,0)
<!-- Default column headers -->
"KRN",.84,7981999.002,2,217,0)
 
"KRN",.84,7981999.002,2,218,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981999.002,2,219,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,220,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981999.002,2,221,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,222,0)
</xsl:template>
"KRN",.84,7981999.002,2,223,0)
 
"KRN",.84,7981999.002,2,224,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.002,2,225,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,226,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.002,2,227,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,228,0)
</xsl:template>
"KRN",.84,7981999.002,2,229,0)
 
"KRN",.84,7981999.002,2,230,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.002,2,231,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,232,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.002,2,233,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,234,0)
</xsl:template>
"KRN",.84,7981999.002,2,235,0)
 
"KRN",.84,7981999.002,2,236,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,237,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,238,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.002,2,239,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,240,0)
</xsl:template>
"KRN",.84,7981999.002,2,241,0)
 
"KRN",.84,7981999.002,2,242,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,243,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,244,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.002,2,245,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,246,0)
</xsl:template>
"KRN",.84,7981999.002,2,247,0)
 
"KRN",.84,7981999.002,2,248,0)
<!-- Default cells -->
"KRN",.84,7981999.002,2,249,0)
 
"KRN",.84,7981999.002,2,250,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.002,2,251,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.002,2,252,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.002,2,253,0)
 </xsl:call-template>
"KRN",.84,7981999.002,2,254,0)
</xsl:template>
"KRN",.84,7981999.002,2,255,0)
 
"KRN",.84,7981999.002,2,256,0)
</xsl:stylesheet>
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PGL",798.1,9,1,13)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.1,21,1,21.01)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.128,0,2,.02)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.129,0,2,.02)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.2,5,1,7)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PKG",540,-1)
1^1
"PKG",540,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",540,20,0)
^9.402P^^
"PKG",540,22,0)
^9.49I^1^1
"PKG",540,22,1,0)
1.5^3060208^3070319^1
"PKG",540,22,1,"PAH",1,0)
26^3151014^2990000
"PKG",540,22,1,"PAH",1,1,0)
^^2^2^3151014
"PKG",540,22,1,"PAH",1,1,1,0)
Patch reference and additional information may be found on Forum for 
"PKG",540,22,1,"PAH",1,1,2,0)
ROR*1.5*26
"PRE")
RORP026
"QUES","POSQ1",0)
N^0:10:0
"QUES","POSQ1","A")
Maximum number of registry update subtasks 
"QUES","POSQ1","B")
5
"QUES","POSQ1","M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"QUES","POSQ2",0)
Y
"QUES","POSQ2","A")
Suspend the post-install during the peak hours
"QUES","POSQ2","B")
NO
"QUES","POSQ2","M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"QUES","POSQ3",0)
D^::R
"QUES","POSQ3","A")
Suspension start time
"QUES","POSQ3","B")
7:00AM
"QUES","POSQ3","M")
W ! D POSQ3^RORP024(.DIR)
"QUES","POSQ4",0)
D
"QUES","POSQ4","A")
Suspension end time
"QUES","POSQ4","B")
6:00PM
"QUES","POSQ4","M")
W ! D POSQ4^RORP024(.DIR)
"QUES","POSQ5",0)
D^::FRX
"QUES","POSQ5","?")
The date/time entered must be at least 15 minutes in the future.
"QUES","POSQ5","A")
Date/Time to run the new registry initialize task
"QUES","POSQ5","M")
D POSQ5^RORP024(.DIR)
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
15
"RTN","RORP026")
0^13^B180985006^n/a
"RTN","RORP026",1,0)
RORP026 ;ALB/TK  ENV CK, PRE and POST INSTALL - PATCH 26 ; 04 Aug 2015  6:28 PM
"RTN","RORP026",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**26**;Feb 17, 2006;Build 53
"RTN","RORP026",3,0)
 ;
"RTN","RORP026",4,0)
 ;*****************************************************************************
"RTN","RORP026",5,0)
 ;*****************************************************************************
"RTN","RORP026",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORP026",7,0)
 ;        
"RTN","RORP026",8,0)
 ;PKG/PATCH    DATE       DEVELOPER    MODIFICATION
"RTN","RORP026",9,0)
 ;-----------  ---------  -----------  ----------------------------------------
"RTN","RORP026",10,0)
 ;ROR*1.5*26   JAN 2015   T KOPP       Added routine for env check, pre/post
"RTN","RORP026",11,0)
 ;                                     install
"RTN","RORP026",12,0)
 ;                                               
"RTN","RORP026",13,0)
 ;******************************************************************************
"RTN","RORP026",14,0)
 ;******************************************************************************
"RTN","RORP026",15,0)
 ; 
"RTN","RORP026",16,0)
 ; SUPPORTED CALLS:
"RTN","RORP026",17,0)
 ;  RTN^%ZTLOAD   #10063
"RTN","RORP026",18,0)
 ;  STAT^%ZTLOAD  #10063
"RTN","RORP026",19,0)
 ;  BMES^XPDUTL   #10141
"RTN","RORP026",20,0)
 ;  MES^XPDUTL    #10141
"RTN","RORP026",21,0)
 ;  BLD^DIALOG    #2050
"RTN","RORP026",22,0)
 ;  UPDATE^DIE    #2053
"RTN","RORP026",23,0)
 ;  FMADD^XLFDT   #10103
"RTN","RORP026",24,0)
 ;  NOW^XLFDT     #10103
"RTN","RORP026",25,0)
 ;  FMTE^XLFDT    #10103
"RTN","RORP026",26,0)
 ;  ADD^XPAR      #2263
"RTN","RORP026",27,0)
 ;  DEL^XPAR      #2263
"RTN","RORP026",28,0)
 ;  CLEAN^DILF    #2054
"RTN","RORP026",29,0)
 ;
"RTN","RORP026",30,0)
ENV ;  Environment check
"RTN","RORP026",31,0)
 S XPDNOQUE=1 ; disable queuing
"RTN","RORP026",32,0)
 Q
"RTN","RORP026",33,0)
 ;
"RTN","RORP026",34,0)
PRE ; Patch pre-install
"RTN","RORP026",35,0)
 N RC,ZTSK,RORBUF,RORMES
"RTN","RORP026",36,0)
 ; Check for ROR INITIALIZE task running
"RTN","RORP026",37,0)
 D BMES^XPDUTL("   *** Checking to be sure ROR INITIALIZE task is not already running")
"RTN","RORP026",38,0)
 S RC=0
"RTN","RORP026",39,0)
 D RTN^%ZTLOAD("RORSET02","RORBUF")
"RTN","RORP026",40,0)
 S ZTSK="" F  S ZTSK=$O(RORBUF(ZTSK)) Q:ZTSK=""  D  I $G(ZTSK(1))=2 S RC=-1 Q
"RTN","RORP026",41,0)
 . D STAT^%ZTLOAD
"RTN","RORP026",42,0)
 ;--- Display error message if option is running
"RTN","RORP026",43,0)
 I RC<0  D  S XPDABORT=2 Q
"RTN","RORP026",44,0)
 . K RORMES
"RTN","RORP026",45,0)
 . D BMES^XPDUTL($$MSG^RORERR20(RC,,XPDNM))
"RTN","RORP026",46,0)
 . D BMES^XPDUTL("")
"RTN","RORP026",47,0)
 . S RORMES(1)="   >> ROR INITIALIZE task is already running.  Task # is "_ZTSK
"RTN","RORP026",48,0)
 . S RORMES(2)="      This task must complete or be terminated before the install can continue"
"RTN","RORP026",49,0)
 . S RORMES(3)="      Restart this patch install when this task is not running"
"RTN","RORP026",50,0)
 . S RORMES(4)=" "
"RTN","RORP026",51,0)
 . D MES^XPDUTL(.RORMES)
"RTN","RORP026",52,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP026",53,0)
 N RORI,REGIEN,RORREG,Z,X,Y,DIR
"RTN","RORP026",54,0)
 K ^XTMP("ROR_NO_INIT")  ; Will contain any pre-initialized registries not to be reinitialized
"RTN","RORP026",55,0)
 D XTMPHDR^RORUTL01("ROR_NO_INIT",7,"CCR REGISTRIES NOT TO BE RE-INITIALIZED")
"RTN","RORP026",56,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP026")),";;",2),U) Q:RORREG=""  D  Q:$G(XPDABORT)
"RTN","RORP026",57,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP026",58,0)
 . Q:REGIEN'>0  ; new registry doesn't yet exist
"RTN","RORP026",59,0)
 . ; Check if registry is already initiated (has a value in HDT field)
"RTN","RORP026",60,0)
 . S Z=$$GET1^DIQ(798.1,REGIEN_",",21.05,"I")
"RTN","RORP026",61,0)
 . I Z'="" D  Q
"RTN","RORP026",62,0)
 .. S DIR(0)="YA",DIR("A",1)="  >> New registry "_RORREG_"(ien #"_REGIEN_") has already completed initialization"
"RTN","RORP026",63,0)
 .. S DIR("A")="Do you want to rerun its initialization?: ",DIR("B")="NO"
"RTN","RORP026",64,0)
 .. W ! D ^DIR K DIR W !
"RTN","RORP026",65,0)
 .. I Y<0 S XPDABORT=2 K ^XTMP("ROR_NO_INIT") D BMES^XPDUTL("INSTALL ABORTED") Q
"RTN","RORP026",66,0)
 .. I Y'=1 S ^XTMP("ROR_NO_INIT",REGIEN)=""
"RTN","RORP026",67,0)
 Q
"RTN","RORP026",68,0)
 ;
"RTN","RORP026",69,0)
POST ; Patch post-install
"RTN","RORP026",70,0)
 N CT,RORI,RORREG,REGIEN,Z
"RTN","RORP026",71,0)
 N RORPARM
"RTN","RORP026",72,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP026",73,0)
 D BMES^XPDUTL("POST INSTALL START")
"RTN","RORP026",74,0)
 ;
"RTN","RORP026",75,0)
 D BMES^XPDUTL(">> Adding Liver Transplantation diagnosis group to common templates")
"RTN","RORP026",76,0)
 D DXGRP
"RTN","RORP026",77,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP026",78,0)
 ;
"RTN","RORP026",79,0)
 D BMES^XPDUTL(">> Adding new panels to reports")
"RTN","RORP026",80,0)
 D UPDPANEL
"RTN","RORP026",81,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP026",82,0)
 ;
"RTN","RORP026",83,0)
 D BMES^XPDUTL(">> Adding inpatient procedures fields to ROR METADATA file")
"RTN","RORP026",84,0)
 D UPDMETA
"RTN","RORP026",85,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP026",86,0)
 ;
"RTN","RORP026",87,0)
 D BMES^XPDUTL(">> Adding CPT and ICD-9 procedures to ROR ICD SE""ARCH file for new registries")
"RTN","RORP026",88,0)
 D UPDPROC
"RTN","RORP026",89,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP026",90,0)
 ;
"RTN","RORP026",91,0)
 D BMES^XPDUTL("Updating List Items for new registries")
"RTN","RORP026",92,0)
 D UPDLIST
"RTN","RORP026",93,0)
 D BMES^XPDUTL("    >> Step complete")
"RTN","RORP026",94,0)
 ;
"RTN","RORP026",95,0)
 D BMES^XPDUTL(">> Initiating background job to set up registries added with this patch")
"RTN","RORP026",96,0)
 N RORKIDS,RORERR,CT,DIERR
"RTN","RORP026",97,0)
 S RORKIDS=1
"RTN","RORP026",98,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP026")),";;",2),U) Q:RORREG=""  D
"RTN","RORP026",99,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP026",100,0)
 . Q:REGIEN'>0
"RTN","RORP026",101,0)
 . I $D(^XTMP("ROR_NO_INIT",REGIEN)) D  Q
"RTN","RORP026",102,0)
 .. S RORERR(1)="   It appears new registry "_RORREG_"(ien #"_REGIEN_") has already been initialized"
"RTN","RORP026",103,0)
 .. S RORERR(2)="   You have chosen not to re-initialize this registry"
"RTN","RORP026",104,0)
 .. S RORERR(3)=" "
"RTN","RORP026",105,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP026",106,0)
 .. K RORERR
"RTN","RORP026",107,0)
 . ;
"RTN","RORP026",108,0)
 . K RORFDA,RORMSG,RORERR
"RTN","RORP026",109,0)
 . S RORFDA(798.1,REGIEN_",",1)=2850101
"RTN","RORP026",110,0)
 . S RORFDA(798.1,REGIEN_",",19.1)=""
"RTN","RORP026",111,0)
 . S RORFDA(798.1,REGIEN_",",21.05)=""
"RTN","RORP026",112,0)
 . D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP026",113,0)
 . I $D(DIERR) D
"RTN","RORP026",114,0)
 .. K RORERR
"RTN","RORP026",115,0)
 .. M RORERR=RORMSG
"RTN","RORP026",116,0)
 .. D DBS^RORERR("RORMSG",-112,,,798.1,REGIEN)
"RTN","RORP026",117,0)
 .. M RORMSG=RORERR
"RTN","RORP026",118,0)
 .. K RORERR
"RTN","RORP026",119,0)
 .. S RORERR(1)="     New registry "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP026",120,0)
 .. S RORERR(2)="     and may not initialize correctly.  Please report this error to your CCR contact:"
"RTN","RORP026",121,0)
 .. S RORERR(3)=""
"RTN","RORP026",122,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP026",123,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP026",124,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP026",125,0)
 D ^RORSET02
"RTN","RORP026",126,0)
 K ^XTMP("ROR_NO_INIT")
"RTN","RORP026",127,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP026",128,0)
 ;
"RTN","RORP026",129,0)
 D CLEAN^DILF
"RTN","RORP026",130,0)
 D BMES^XPDUTL("POST INSTALL COMPLETE")
"RTN","RORP026",131,0)
 Q
"RTN","RORP026",132,0)
 ;
"RTN","RORP026",133,0)
NEWREG ; List of new registries to initialize
"RTN","RORP026",134,0)
 ;;VA TOTAL KNEE
"RTN","RORP026",135,0)
 ;;VA TOTAL HIP
"RTN","RORP026",136,0)
 ;;
"RTN","RORP026",137,0)
UPDPROC ; Adds ICD dx/procedure codes and CPT codes to the new registries in ROR ICD file
"RTN","RORP026",138,0)
 ; Delete if already there
"RTN","RORP026",139,0)
 N CT,I1,DA,DIK,X,Y,Z,RORDATA,RORFDA,RORI,RORPROC,RORREG,RORIEN,RORFDA1
"RTN","RORP026",140,0)
 F RORI="KNEE","HIP" S DIC="^ROR(798.5,",X="VA TOTAL "_RORI,DIC(0)="" D ^DIC I Y>0 D
"RTN","RORP026",141,0)
 . S DIK="^ROR(798.5,",DA=+Y D ^DIK
"RTN","RORP026",142,0)
 F RORI=1:1 S RORDATA=$P($T(ICDPROC+RORI),";;",2) Q:RORDATA=""  D
"RTN","RORP026",143,0)
 . S RORREG=$P(RORDATA,U)
"RTN","RORP026",144,0)
 . I RORREG'="" D  Q
"RTN","RORP026",145,0)
 .. ; add new registry top level entry
"RTN","RORP026",146,0)
 .. D:$D(RORFDA) ADD7985(.RORFDA,RORIEN,$P($G(^ROR(798.1,+$G(RORIEN),0)),U)) ;Store 'previous registry' if RORFDA exists
"RTN","RORP026",147,0)
 .. K RORFDA1
"RTN","RORP026",148,0)
 .. S RORFDA1(798.5,"+1,",.01)=RORREG,RORIEN="",CT=0
"RTN","RORP026",149,0)
 .. D ADD7985(.RORFDA1,.RORIEN,RORREG)
"RTN","RORP026",150,0)
 .. S Z=+$O(RORIEN(0)),Z=$G(RORIEN(Z))
"RTN","RORP026",151,0)
 .. K RORIEN,RORFDA1 S RORIEN=Z
"RTN","RORP026",152,0)
 . I $P(RORDATA,U,2)'="" D  Q  ; Add ICD-codes to the entry
"RTN","RORP026",153,0)
 .. S RORPROC=$P(RORDATA,U,2)
"RTN","RORP026",154,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.52,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP026",155,0)
 . I $P(RORDATA,U,3)'="" D  Q  ; Add ICPT codes to the entry
"RTN","RORP026",156,0)
 .. S RORPROC=$P(RORDATA,U,3)
"RTN","RORP026",157,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.53,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP026",158,0)
 . I $P(RORDATA,U,4)'="" D  Q  ; Add ICD diagnosis codes to the entry
"RTN","RORP026",159,0)
 .. S RORPROC=$P(RORDATA,U,4)
"RTN","RORP026",160,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.51,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP026",161,0)
 .. ;
"RTN","RORP026",162,0)
 I $D(RORFDA) D ADD7985(.RORFDA,RORIEN,RORREG)
"RTN","RORP026",163,0)
 D CLEAN^DILF
"RTN","RORP026",164,0)
 Q
"RTN","RORP026",165,0)
 ;
"RTN","RORP026",166,0)
ADD7985(RORFDA,RORIEN,RORREG) ; Adds procedures to the entries in the files
"RTN","RORP026",167,0)
 N RORMSG,DIERR
"RTN","RORP026",168,0)
 D UPDATE^DIE("E","RORFDA","RORIEN","RORMSG")
"RTN","RORP026",169,0)
 I $G(DIERR) D
"RTN","RORP026",170,0)
 . N Z,CT,RORERR
"RTN","RORP026",171,0)
 . M RORERR=RORMSG
"RTN","RORP026",172,0)
 . D DBS^RORERR("RORMSG",-112,,,798.5,RORREG)
"RTN","RORP026",173,0)
 . M RORMSG=RORERR
"RTN","RORP026",174,0)
 . K RORERR
"RTN","RORP026",175,0)
 . S RORERR(1)="     Adding procedures for new registry "_RORREG_" encountered the"
"RTN","RORP026",176,0)
 . S RORERR(2)="     following error.  Please report this error to your CCR contact:"
"RTN","RORP026",177,0)
 . S RORERR(3)=""
"RTN","RORP026",178,0)
 . S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP026",179,0)
 . S CT=CT+1,RORERR(CT)=" "
"RTN","RORP026",180,0)
 . D MES^XPDUTL(.RORERR)
"RTN","RORP026",181,0)
 Q
"RTN","RORP026",182,0)
 ;
"RTN","RORP026",183,0)
ICDPROC ; Registry name^PTF ICD Procedure codes, separated by commas^PTF CPT codes, separated by commas^ ICD DIAGNOSIS codes
"RTN","RORP026",184,0)
 ;;VA TOTAL KNEE
"RTN","RORP026",185,0)
 ;;^81.54,81.55,00.80,00.81,00.82,00.83,00.84,0SRC07Z,0SRC0J9,0SRC0JA,0SRC0JZ,0SRC0KZ
"RTN","RORP026",186,0)
 ;;^0SRD07Z,0SRD0J9,0SRD0JA,0SRD0JZ,0SRD0KZ,0SRT07Z,0SRT0J9,0SRT0JA,0SRT0JZ,0SRT0KZ,0SRU07Z
"RTN","RORP026",187,0)
 ;;^0SRU0J9,0SRU0JA,0SRU0JZ,0SRU0KZ,0SRV07Z,0SRV0J9,0SRV0JA,0SRV0JZ,0SRV0KZ,0SRW07Z,0SRW0J9
"RTN","RORP026",188,0)
 ;;^0SRW0JA,0SRW0JZ,0SRW0KZ
"RTN","RORP026",189,0)
 ;;^^27447
"RTN","RORP026",190,0)
 ;;^^^V43.65,Z96.651,Z96.652,Z96.653,Z96.659
"RTN","RORP026",191,0)
 ;;VA TOTAL HIP
"RTN","RORP026",192,0)
 ;;^00.70,00.71,00.72,00.73,00.74,00.75,00.76,00.77,81.51,81.52,81.53,0SR901Z,0SR9019,0SR901A
"RTN","RORP026",193,0)
 ;;^0SR9029,0SR902A,0SR902Z,0SR9039,0SR903A,0SR903Z,0SR9049,0SR904A,0SR904Z,0SR907Z,0SR90J9
"RTN","RORP026",194,0)
 ;;^0SR90JA,0SR90JZ,0SR90KZ,0SRB019,0SRB01A,0SRB01Z,0SRB029,0SRB02A,0SRB02Z,0SRB039,0SRB03A
"RTN","RORP026",195,0)
 ;;^0SRB03Z,0SRB049,0SRB04A,0SRB04Z,0SRB07Z,0SRB0J9,0SRB0JA,0SRB0JZ,0SRB0KZ
"RTN","RORP026",196,0)
 ;;^^27130,27132
"RTN","RORP026",197,0)
 ;;^^^V43.64,Z96.641,Z96.642,Z96.643,Z96.649
"RTN","RORP026",198,0)
 Q
"RTN","RORP026",199,0)
 ;
"RTN","RORP026",200,0)
UPDMETA ;
"RTN","RORP026",201,0)
 ; Add 2 new outpatient procedure fields to file 45 in the ROR METADATA file (delete first if they already exist)
"RTN","RORP026",202,0)
 N DIERR,DA,DIC,DIK,X,Y,Z,RORIEN,RORFDA,RORI,RORDATA,RORIENS,RORMSG,Z,CT,RORERR
"RTN","RORP026",203,0)
 F RORI=1:1:2 S RORDATA=$P($T(META45+RORI),";;",2) D
"RTN","RORP026",204,0)
 . S RORDATA(RORI)=RORDATA
"RTN","RORP026",205,0)
 . S X=$P(RORDATA,U),DA(1)=45,DIC="^ROR(799.2,"_DA(1)_",2," D ^DIC
"RTN","RORP026",206,0)
 . I Y>0 S DA(1)=45,DIK="^ROR(799.2,"_DA(1)_",2,",DA=+Y D ^DIK
"RTN","RORP026",207,0)
 S RORIEN(1)=45,RORDATA=0
"RTN","RORP026",208,0)
 F RORI=1:1 S RORDATA=$O(RORDATA(RORDATA)) Q:RORDATA=""  D
"RTN","RORP026",209,0)
 . S RORIENS="+"_(RORI+1)_",45,"
"RTN","RORP026",210,0)
 . S RORFDA(799.22,RORIENS,.01)=$P(RORDATA(RORI),U)
"RTN","RORP026",211,0)
 . S RORFDA(799.22,RORIENS,.02)=$P(RORDATA(RORI),U,2)
"RTN","RORP026",212,0)
 . S RORFDA(799.22,RORIENS,4)=$P(RORDATA(RORI),U,3)
"RTN","RORP026",213,0)
 . S RORFDA(799.22,RORIENS,1)=$P(RORDATA(RORI),U,4)
"RTN","RORP026",214,0)
 D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORP026",215,0)
 I $D(DIERR) D
"RTN","RORP026",216,0)
 . D BMES^XPDUTL("Update to ROR METADATA <<FAILED>>")
"RTN","RORP026",217,0)
 . K RORERR
"RTN","RORP026",218,0)
 . M RORERR=RORMSG
"RTN","RORP026",219,0)
 . D DBS^RORERR("RORMSG",-112,,,799.22,45)
"RTN","RORP026",220,0)
 . M RORMSG=RORERR
"RTN","RORP026",221,0)
 . K RORERR
"RTN","RORP026",222,0)
 . S RORERR(1)="    Update to ROR METADATA file has <<FAILED>>"
"RTN","RORP026",223,0)
 . S RORERR(2)="    Please report this error to your CCR contact:"
"RTN","RORP026",224,0)
 . S RORERR(3)=""
"RTN","RORP026",225,0)
 . S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP026",226,0)
 . S CT=CT+1,RORERR(CT)=" "
"RTN","RORP026",227,0)
 . D MES^XPDUTL(.RORERR)
"RTN","RORP026",228,0)
 Q
"RTN","RORP026",229,0)
 ;
"RTN","RORP026",230,0)
 ; Data to be added to ROR METADATA file (#799.2/799.22)
"RTN","RORP026",231,0)
 ; DATA NAME^CODE^VALUE TYPE^LOADER API
"RTN","RORP026",232,0)
META45 ; Elements to add to file 45 entry in ROR METADATA
"RTN","RORP026",233,0)
 ;;INPATIENT ICD PROCEDURE^152^I^3
"RTN","RORP026",234,0)
 ;;INPATIENT CPT^153^I^3
"RTN","RORP026",235,0)
 Q
"RTN","RORP026",236,0)
 ;
"RTN","RORP026",237,0)
UPDPANEL ;
"RTN","RORP026",238,0)
 ; For parameter panel field, add 27, after ,25, for all except Sustained Virologic Report (REPORT CODE=23),
"RTN","RORP026",239,0)
 ; DAA Lab Monitoring (REPORT CODE=22) and Potential DAA Candidates (REPORT CODE=21)
"RTN","RORP026",240,0)
 ; For Potential DAA report - add panels 201,47 after ,90,
"RTN","RORP026",241,0)
 N CT,RORRPT,RORMSG,RORPAN,RORERR,RORFDA,Z,Z1,DIERR
"RTN","RORP026",242,0)
 S RORRPT=0 F  S RORRPT=$O(^ROR(799.34,RORRPT)) Q:'RORRPT  S RORPAN=$P($G(^ROR(799.34,RORRPT,0)),U,4) D:$S(RORPAN=23:0,RORPAN=22:0,1:1)
"RTN","RORP026",243,0)
 . S Z1=$G(^ROR(799.34,RORRPT,1))
"RTN","RORP026",244,0)
 . K RORFDA,RORMSG
"RTN","RORP026",245,0)
 . I RORPAN=21 D
"RTN","RORP026",246,0)
 .. I Z1'[",201,47,",Z1[",90," S RORFDA(799.34,RORRPT_",",1)=$P(Z1,",90,")_",90,201,47,"_$P(Z1,",90,",2)
"RTN","RORP026",247,0)
 . I RORPAN'=21 D
"RTN","RORP026",248,0)
 .. I Z1[",25,",Z1'[",25,27," S RORFDA(799.34,RORRPT_",",1)=$P(Z1,",25,")_",25,27,"_$P(Z1,",25,",2)
"RTN","RORP026",249,0)
 . Q:'$D(RORFDA)
"RTN","RORP026",250,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP026",251,0)
 . I $D(DIERR) D
"RTN","RORP026",252,0)
 .. K RORERR
"RTN","RORP026",253,0)
 .. D DBS^RORERR("RORMSG",-112,,,799.34,RORRPT)
"RTN","RORP026",254,0)
 .. M RORMSG=RORERR
"RTN","RORP026",255,0)
 .. K RORERR
"RTN","RORP026",256,0)
 .. S RORERR(1)="     Update of report "_$P($G(^ROR(799.34,RORRPT,0)),U)_" with new panel"
"RTN","RORP026",257,0)
 .. S RORERR(2)="     encountered the following error.  Please report this error to your CCR contact:"
"RTN","RORP026",258,0)
 .. S RORERR(3)=""
"RTN","RORP026",259,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP026",260,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP026",261,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP026",262,0)
 Q
"RTN","RORP026",263,0)
 ;
"RTN","RORP026",264,0)
 ; Sets the DIR array from the post-install question #3 (suspension start time)
"RTN","RORP026",265,0)
POSQ3(DIR) ;
"RTN","RORP026",266,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP026",267,0)
 Q:'$D(DIR)
"RTN","RORP026",268,0)
 D BLD^DIALOG(7980000.011,,,"DIR(""?"")","S")
"RTN","RORP026",269,0)
 Q
"RTN","RORP026",270,0)
 ;
"RTN","RORP026",271,0)
 ; Update ROR LIST ITEM file (#799.1) for new registries
"RTN","RORP026",272,0)
UPDLIST  ;
"RTN","RORP026",273,0)
 N RORI,RORI1,RORREG,RORDATA,REGIEN,Z,CT,DIERR,RORFDA,RORMSG,RORERR
"RTN","RORP026",274,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP026")),";;",2),U) Q:RORREG=""  D
"RTN","RORP026",275,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP026",276,0)
 . I REGIEN>0 D
"RTN","RORP026",277,0)
 .. F RORI1=1:1 S RORDATA=$P($T(@("LISTITEM+"_RORI1_"^RORP026")),";;",2) Q:RORDATA=""  D
"RTN","RORP026",278,0)
 ... Q:$D(^ROR(799.1,"KEY",+$P(RORDATA,U,2),REGIEN,+$P(RORDATA,U,3)))  ; Entry already exists
"RTN","RORP026",279,0)
 ... K RORFDA,RORMSG,RORERR,DIERR
"RTN","RORP026",280,0)
 ... S RORFDA(799.1,"?+1,",.01)=$P(RORDATA,U)
"RTN","RORP026",281,0)
 ... S RORFDA(799.1,"?+1,",.02)=$P(RORDATA,U,2)
"RTN","RORP026",282,0)
 ... S RORFDA(799.1,"?+1,",.03)=REGIEN
"RTN","RORP026",283,0)
 ... S RORFDA(799.1,"?+1,",.04)=$P(RORDATA,U,3)
"RTN","RORP026",284,0)
 ... D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP026",285,0)
 ... I $G(DIERR) D
"RTN","RORP026",286,0)
 .... K RORERR
"RTN","RORP026",287,0)
 .... S RORERR(1)="     New entry for "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP026",288,0)
 .... S RORERR(2)="     and was not added to the ROR LIST ITEM file."
"RTN","RORP026",289,0)
 .... S RORERR(3)="     (Data = "_RORDATA_")"
"RTN","RORP026",290,0)
 .... S RORERR(4)="     Please report this error to your CCR contact:"
"RTN","RORP026",291,0)
 .... S RORERR(5)=""
"RTN","RORP026",292,0)
 .... S Z=0,CT=5 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",6)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP026",293,0)
 .... S CT=CT+1,RORERR(CT)=" "
"RTN","RORP026",294,0)
 .... D MES^XPDUTL(.RORERR)
"RTN","RORP026",295,0)
 Q
"RTN","RORP026",296,0)
 ;
"RTN","RORP026",297,0)
LISTITEM ;  Entries to add to file 799.1  text^group^code
"RTN","RORP026",298,0)
 ;;eGFR by CKD-EPI^7^3
"RTN","RORP026",299,0)
 ;;eGFR by MDRD^7^2
"RTN","RORP026",300,0)
 ;;Creatinine clearance by Cockcroft-Gault^7^1
"RTN","RORP026",301,0)
 ;;FIB-4^6^4
"RTN","RORP026",302,0)
 ;;APRI^6^3
"RTN","RORP026",303,0)
 ;;MELD-Na^6^2
"RTN","RORP026",304,0)
 ;;MELD^6^1
"RTN","RORP026",305,0)
 ;;BMI^5^1
"RTN","RORP026",306,0)
 ;;Registry Lab^3^1
"RTN","RORP026",307,0)
 ;;
"RTN","RORP026",308,0)
 ;
"RTN","RORP026",309,0)
 ; Sets the DIR array from the post-install question #4  (suspension end time)
"RTN","RORP026",310,0)
POSQ4(DIR) ;
"RTN","RORP026",311,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP026",312,0)
 Q:'$D(DIR)
"RTN","RORP026",313,0)
 S DIR("A")="Suspension end time"
"RTN","RORP026",314,0)
 ;  Make sure end time entered is later than end time start
"RTN","RORP026",315,0)
 S DIR(0)="D^::R^K:(Y#1)'>(XPDQUES(""POSQ3"")#1) X"
"RTN","RORP026",316,0)
 D BLD^DIALOG(7980000.012,,,"DIR(""?"")","S")
"RTN","RORP026",317,0)
 Q
"RTN","RORP026",318,0)
 ;
"RTN","RORP026",319,0)
 ; Updates the DIR array from the post-install question #5  (schedule time for ROR INITIALIZE task)
"RTN","RORP026",320,0)
POSQ5(DIR) ;
"RTN","RORP026",321,0)
 Q:'$D(DIR)
"RTN","RORP026",322,0)
 N ROREDT
"RTN","RORP026",323,0)
 ; Set earliest date to schedule to 15 minutes from 'NOW'
"RTN","RORP026",324,0)
 S ROREDT=$$FMADD^XLFDT($$NOW^XLFDT(),,,15)
"RTN","RORP026",325,0)
 ; Strip seconds
"RTN","RORP026",326,0)
 S ROREDT=$P(ROREDT,".",1)_"."_$E($P(ROREDT,".",2),1,4)
"RTN","RORP026",327,0)
 ;  Make sure future date/time is entered
"RTN","RORP026",328,0)
 S $P(DIR(0),U,3)=("K:Y<"_ROREDT_" X")
"RTN","RORP026",329,0)
 S DIR("B")=$$FMTE^XLFDT(ROREDT,2)
"RTN","RORP026",330,0)
 Q
"RTN","RORP026",331,0)
 ;
"RTN","RORP026",332,0)
 ;******************************************************************************
"RTN","RORP026",333,0)
 ;Add new ICD9 entry/group "Liver Transplantation" to the PARAMETERS file #8989.5
"RTN","RORP026",334,0)
 ;ADD^XPAR(entity,parameter[,instance],value[,.error])
"RTN","RORP026",335,0)
 ;*****************************************************************************
"RTN","RORP026",336,0)
DXGRP ;
"RTN","RORP026",337,0)
 N RORPARAMETER,RORENTITY,RORINSTANCE,RORVALUE,RORERR
"RTN","RORP026",338,0)
 S RORENTITY="PKG.CLINICAL CASE REGISTRIES"
"RTN","RORP026",339,0)
 S RORPARAMETER="ROR REPORT PARAMS TEMPLATE"
"RTN","RORP026",340,0)
 S RORINSTANCE="13::Liver Transplantation"
"RTN","RORP026",341,0)
 ;delete it first (in case it already exists)
"RTN","RORP026",342,0)
 D DEL^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORERR)
"RTN","RORP026",343,0)
 S RORVALUE="CCR Predefined Report Template"
"RTN","RORP026",344,0)
 S RORVALUE(1,0)="<?xml version="_"""1.0"""_" encoding="_"""UTF-8"""_"?>"
"RTN","RORP026",345,0)
 S RORVALUE(2,0)="<PARAMS>"
"RTN","RORP026",346,0)
 S RORVALUE(3,0)="<ICD9LST>"
"RTN","RORP026",347,0)
 S RORVALUE(4,0)="<GROUP ID="_"""Liver Transplantation"""_">"
"RTN","RORP026",348,0)
 S RORVALUE(5,0)="<ICD ID=""V42.7"" VERSION=""ICD-9"">LIVER TRANSPLANT STATUS (CC)</ICD>"
"RTN","RORP026",349,0)
 S RORVALUE(6,0)="<ICD ID=""996.82"" VERSION=""ICD-9"">COMPL OF TRANSPLANTED LIVER (CC)</ICD>"
"RTN","RORP026",350,0)
 S RORVALUE(7,0)="<ICD ID=""T86.40"" VERSION=""ICD-10"">UNSPECIFIED COMPLICATION OF LIVER TRANSPLANT</ICD>"
"RTN","RORP026",351,0)
 S RORVALUE(8,0)="<ICD ID=""T86.41"" VERSION=""ICD-10"">LIVER TRANSPLANT REJECTION</ICD>"
"RTN","RORP026",352,0)
 S RORVALUE(9,0)="<ICD ID=""T86.42"" VERSION=""ICD-10"">LIVER TRANSPLANT FAILURE</ICD>"
"RTN","RORP026",353,0)
 S RORVALUE(10,0)="<ICD ID=""T86.43"" VERSION=""ICD-10"">LIVER TRANSPLANT INFECTION</ICD>"
"RTN","RORP026",354,0)
 S RORVALUE(11,0)="<ICD ID=""T86.49"" VERSION=""ICD-10"">OTHER COMPLICATIONS OF LIVER TRANSPLANT</ICD>"
"RTN","RORP026",355,0)
 S RORVALUE(12,0)="<ICD ID=""Z48.23"" VERSION=""ICD-10"">ENCOUNTER FOR AFTERCARE FOLLOWING LIVER TRANSPLANT</ICD>"
"RTN","RORP026",356,0)
 S RORVALUE(13,0)="<ICD ID=""Z94.4"" VERSION=""ICD-10"">LIVER TRANSPLANT STATUS</ICD10>"
"RTN","RORP026",357,0)
 S RORVALUE(14,0)="</GROUP>"
"RTN","RORP026",358,0)
 S RORVALUE(15,0)="</ICD9LST>"
"RTN","RORP026",359,0)
 S RORVALUE(16,0)="<PANELS>"
"RTN","RORP026",360,0)
 S RORVALUE(17,0)="<PANEL ID="_"""160"""_"/>"
"RTN","RORP026",361,0)
 S RORVALUE(18,0)="</PANELS>"
"RTN","RORP026",362,0)
 S RORVALUE(19,0)="</PARAMS>"
"RTN","RORP026",363,0)
 ;add it
"RTN","RORP026",364,0)
 D ADD^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORVALUE,.RORERR)
"RTN","RORP026",365,0)
 Q
"RTN","RORP026",366,0)
 ;
"RTN","RORSET02")
0^1^B19313536^B18807730
"RTN","RORSET02",1,0)
RORSET02 ;BPIOFO/CLR - NEW REGISTRY SETUP FROM POST-INSTALL ;6/06/2012
"RTN","RORSET02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**18,21,26**;Feb 17, 2006;Build 53
"RTN","RORSET02",3,0)
 ; This routine uses the following IAs:
"RTN","RORSET02",4,0)
 ;
"RTN","RORSET02",5,0)
 ; #10063 ^%ZTLOAD            
"RTN","RORSET02",6,0)
 ; #10026 ^DIR
"RTN","RORSET02",7,0)
 ;
"RTN","RORSET02",8,0)
 ;*****************************************************************************
"RTN","RORSET02",9,0)
 ;*****************************************************************************
"RTN","RORSET02",10,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORSET02",11,0)
 ;        
"RTN","RORSET02",12,0)
 ;PKG/PATCH    DATE       DEVELOPER    MODIFICATION
"RTN","RORSET02",13,0)
 ;-----------  ---------  -----------  ----------------------------------------
"RTN","RORSET02",14,0)
 ;ROR*1.5*21   NOV 2013   T KOPP       Added env check, pre/post install logic
"RTN","RORSET02",15,0)
 ;                                     Added new of ZTQUEUED variable
"RTN","RORSET02",16,0)
 ;                                     Added initialization of registry params
"RTN","RORSET02",17,0)
 ;                                      for new registries
"RTN","RORSET02",18,0)
 ;                                     Corrected max # of strings variable used
"RTN","RORSET02",19,0)
 ;                                      from MAXNTSK to RORMNTSK
"RTN","RORSET02",20,0)
 ;ROR*1.5*26   APR 2015   T KOPP       Corrected 'suspend' parameters to strip
"RTN","RORSET02",21,0)
 ;                                      date, leaving only time portions
"RTN","RORSET02",22,0)
 ;******************************************************************************
"RTN","RORSET02",23,0)
 ;******************************************************************************
"RTN","RORSET02",24,0)
 ;
"RTN","RORSET02",25,0)
 N RORPARM,RORBUF,RORI,RORDIFF,ROROUT,RORMSG,RORSUSP,MAXNTSK
"RTN","RORSET02",26,0)
 N RC,REGNAME,RORMNTSK,RORSUSP,TMP,REGLST,RORINFO
"RTN","RORSET02",27,0)
 N ZTCPU,ZTDESC,ZTIO,ZTKIL,ZTPRI,ZTRTN,ZTSAVE,ZTSK,ZTSYNC,ZTUCI,ZTREQ,ZTDTH
"RTN","RORSET02",28,0)
 N DIR,DIRUT,Y,DIERR,FLD,NODE,RORERRDL,RORQ,ZTQUEUED
"RTN","RORSET02",29,0)
 ;
"RTN","RORSET02",30,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORSET02",31,0)
 S RORPARM("LOG")=1         ; Enable event recording
"RTN","RORSET02",32,0)
 D INIT^RORUTL01("RORSET02")
"RTN","RORSET02",33,0)
 D CLEAR^RORERR("TASK^RORSET02")
"RTN","RORSET02",34,0)
 ;--- display all ACTIVE auto confirm registries that have not been initialized
"RTN","RORSET02",35,0)
 D BMES^XPDUTL("   *** Checking for registry(s) to be initialized")
"RTN","RORSET02",36,0)
 S RC=$$REGSEL^RORUTL01("UA")
"RTN","RORSET02",37,0)
 I RC<0 D BMES^XPDUTL($$MSG^RORERR20(RC,,," file #798.1")),BMES^XPDUTL("") Q
"RTN","RORSET02",38,0)
 I '$D(REGLST) D  Q
"RTN","RORSET02",39,0)
 . D BMES^XPDUTL(""),BMES^XPDUTL("     No active registries were found needing to be initialized.")
"RTN","RORSET02",40,0)
 . D BMES^XPDUTL(""),BMES^XPDUTL("")
"RTN","RORSET02",41,0)
 D BMES^XPDUTL(""),BMES^XPDUTL("")
"RTN","RORSET02",42,0)
 D BMES^XPDUTL("     The following registry(s) will be populated with new patients: ")
"RTN","RORSET02",43,0)
 S REGNAME="" F  S REGNAME=$O(REGLST(REGNAME)) Q:REGNAME=""  D
"RTN","RORSET02",44,0)
 . D MES^XPDUTL($J("",10)_REGNAME)
"RTN","RORSET02",45,0)
 D BMES^XPDUTL("")
"RTN","RORSET02",46,0)
 D BMES^XPDUTL("   *** Storing registry setup parameters")
"RTN","RORSET02",47,0)
 S RORMNTSK=$G(XPDQUES("POSQ1")),RORSUSP=$G(XPDQUES("POSQ2"))
"RTN","RORSET02",48,0)
 I RORSUSP S RORSUSP=($G(XPDQUES("POSQ3"))#1)_U_($G(XPDQUES("POSQ4"))#1)
"RTN","RORSET02",49,0)
 S RORQ=$G(XPDQUES("POSQ5"))
"RTN","RORSET02",50,0)
 I RORQ<$$NOW^XLFDT() S RORQ=$$NOW^XLFDT()
"RTN","RORSET02",51,0)
 D CONFTXT^RORSETU1(RORMNTSK,RORSUSP)
"RTN","RORSET02",52,0)
 ;log parameters in log
"RTN","RORSET02",53,0)
 D TP^ROR10(.RORINFO,"RORFLSET")
"RTN","RORSET02",54,0)
 D TP^ROR10(.RORINFO,"RORFLCLR")
"RTN","RORSET02",55,0)
 D TP^ROR10(.RORINFO,"RORMNTSK")
"RTN","RORSET02",56,0)
 D TP^ROR10(.RORINFO,"RORSUSP")
"RTN","RORSET02",57,0)
 D LOG^RORLOG(,"Task Parameters",,.RORINFO)
"RTN","RORSET02",58,0)
 ;--- Schedule the setup task
"RTN","RORSET02",59,0)
 I RORQ<$$NOW^XLFDT() S RORQ=$$NOW^XLFDT()
"RTN","RORSET02",60,0)
 S ZTRTN="TASK^RORSET02",ZTIO="",ZTDTH=$$FMTH^XLFDT(RORQ),ZTQUEUED=1
"RTN","RORSET02",61,0)
 S ZTDESC="Local Registries Initialization"
"RTN","RORSET02",62,0)
 F TMP="RORMNTSK","RORSUSP" S ZTSAVE(TMP)=""
"RTN","RORSET02",63,0)
 S ZTSAVE("REGLST(")=""
"RTN","RORSET02",64,0)
 D ^%ZTLOAD
"RTN","RORSET02",65,0)
 I $G(ZTSK) D  Q
"RTN","RORSET02",66,0)
 . D BMES^XPDUTL("The scheduled task number is "_ZTSK)
"RTN","RORSET02",67,0)
 D BMES^XPDUTL("")
"RTN","RORSET02",68,0)
 D BMES^XPDUTL("     ROR INITIALIZE task was not scheduled and is required")
"RTN","RORSET02",69,0)
 D BMES^XPDUTL("     to complete the patch"),BMES^XPDUTL("     Try restarting the install")
"RTN","RORSET02",70,0)
 D BMES^XPDUTL("     If this error continues, please enter a Remedy ticket")
"RTN","RORSET02",71,0)
 D BMES^XPDUTL("   *** Patch install aborted")
"RTN","RORSET02",72,0)
 Q
"RTN","RORSET02",73,0)
 ;
"RTN","RORSET02",74,0)
ERROR ;--- Display stack errors
"RTN","RORSET02",75,0)
 D DSPSTK^RORERR()
"RTN","RORSET02",76,0)
 Q
"RTN","RORSET02",77,0)
 ;
"RTN","RORSET02",78,0)
 ;***** ENTRY POINT OF THE REGISTRY SETUP TASK
"RTN","RORSET02",79,0)
 ;
"RTN","RORSET02",80,0)
 ; RORMNTSK      Maximum number of the registry update subtasks
"RTN","RORSET02",81,0)
 ; RORREG        RegistryIEN^RegistryName
"RTN","RORSET02",82,0)
 ; RORSUSP       Task suspension time frame (StartTime^EndTime)
"RTN","RORSET02",83,0)
 ;
"RTN","RORSET02",84,0)
TASK ;
"RTN","RORSET02",85,0)
 N RORERROR      ; Error processing data
"RTN","RORSET02",86,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORSET02",87,0)
 N RORPARM       ; Application parameters
"RTN","RORSET02",88,0)
 ;
"RTN","RORSET02",89,0)
 N RC,REGNAME,TMP,REGIEN
"RTN","RORSET02",90,0)
 S RORPARM("DEVELOPER")=1   ; Enable modifications
"RTN","RORSET02",91,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORSET02",92,0)
 S RORPARM("LOG")=1         ; Enable event recording
"RTN","RORSET02",93,0)
 S RORPARM("SETUP")=1       ; Registry setup indicator
"RTN","RORSET02",94,0)
 ;
"RTN","RORSET02",95,0)
 ;--- Check list of registries
"RTN","RORSET02",96,0)
 I $D(REGLST)<10  D  Q
"RTN","RORSET02",97,0)
 . S RC=$$ERROR^RORERR(-28,,,," initialize")
"RTN","RORSET02",98,0)
 ;--- Populate the registry
"RTN","RORSET02",99,0)
 S RC=$$UPDATE^RORUPD(.REGLST,$G(RORMNTSK),$G(RORSUSP)) Q:RC<0
"RTN","RORSET02",100,0)
 ;--- Setup the registry
"RTN","RORSET02",101,0)
 S REGNAME="" F  S REGNAME=$O(REGLST(REGNAME)) Q:REGNAME=""  D
"RTN","RORSET02",102,0)
 . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORSET02",103,0)
 . I REGIEN<0 S RC=$$ERROR^RORERR(-112,,,,REGNAME) Q
"RTN","RORSET02",104,0)
 . S RC=$$PREPARE^RORSETU2(REGIEN)
"RTN","RORSET02",105,0)
 . I RC<0 S RC=$$ERROR^RORERR(-112,,,,REGNAME) Q
"RTN","RORSET02",106,0)
 . ;--- Send the notification e-mail
"RTN","RORSET02",107,0)
 . S:RC'<0 TMP=$$SENDINFO^RORUTL17(+REGIEN,,"E")
"RTN","RORSET02",108,0)
 . ;--- Cleanup
"RTN","RORSET02",109,0)
 . I RC'<0 D  S ZTREQ="@"
"RTN","RORSET02",110,0)
 . . K ^XTMP("RORUPDR"_+REGIEN)
"RTN","RORSET02",111,0)
 Q
"RTN","RORSET02",112,0)
 ;
"RTN","RORUPD01")
0^9^B84632669^B79263856
"RTN","RORUPD01",1,0)
RORUPD01 ;HCIOFO/SG - PROCESSING OF THE FILES ;7/21/03 10:19am
"RTN","RORUPD01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14,26**;Feb 17, 2006;Build 53
"RTN","RORUPD01",3,0)
 ;
"RTN","RORUPD01",4,0)
 ; This routine uses the following IA's:
"RTN","RORUPD01",5,0)
 ;
"RTN","RORUPD01",6,0)
 ; #3646         $$EMPL^DGSEC4
"RTN","RORUPD01",7,0)
 ; #10035        Browse through IENs of the file #2
"RTN","RORUPD01",8,0)
 Q
"RTN","RORUPD01",9,0)
 ;******************************************************************************
"RTN","RORUPD01",10,0)
 ;******************************************************************************
"RTN","RORUPD01",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPD01",12,0)
 ;        
"RTN","RORUPD01",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPD01",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPD01",15,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Tags HCVLOAD and HCVLIST added for auto-
"RTN","RORUPD01",16,0)
 ;                                      confirm functionality.  PROCESS: call
"RTN","RORUPD01",17,0)
 ;                                      to tag HCVLOAD is added.
"RTN","RORUPD01",18,0)
 ;ROR*1.5*26   APR 2015    T KOPP       Added check that if the job is scheduled
"RTN","RORUPD01",19,0)
 ;                                      to start within the SUSPEND start-stop
"RTN","RORUPD01",20,0)
 ;                                      timeframe, it will immediately suspend
"RTN","RORUPD01",21,0)
 ;                                      until the suspend stop time has been
"RTN","RORUPD01",22,0)
 ;                                      reached.  (SUSPEND tag)
"RTN","RORUPD01",23,0)
 ;******************************************************************************
"RTN","RORUPD01",24,0)
 ;******************************************************************************
"RTN","RORUPD01",25,0)
 ;
"RTN","RORUPD01",26,0)
 ;
"RTN","RORUPD01",27,0)
 ;***** CHECKS FOR A STOP REQUESTS (TASKMAN & PROPRIETARY)
"RTN","RORUPD01",28,0)
 ;
"RTN","RORUPD01",29,0)
 ; Return Values:
"RTN","RORUPD01",30,0)
 ;        0  Continue running
"RTN","RORUPD01",31,0)
 ;        1  Stop the subtask
"RTN","RORUPD01",32,0)
 ;
"RTN","RORUPD01",33,0)
CHKSTOP() ;
"RTN","RORUPD01",34,0)
 Q:'$G(RORUPD("JOB")) $$S^%ZTLOAD
"RTN","RORUPD01",35,0)
 L +@RORUPDPI@("T",0):0
"RTN","RORUPD01",36,0)
 I  L -@RORUPDPI@("T",0)  Q 1
"RTN","RORUPD01",37,0)
 Q $$S^%ZTLOAD
"RTN","RORUPD01",38,0)
 ;
"RTN","RORUPD01",39,0)
 ;***** LOAD DATA ELEMENTS
"RTN","RORUPD01",40,0)
 ;
"RTN","RORUPD01",41,0)
 ; IENS          IENS of the current record
"RTN","RORUPD01",42,0)
 ;
"RTN","RORUPD01",43,0)
 ; Return values:
"RTN","RORUPD01",44,0)
 ;       <0  Error code
"RTN","RORUPD01",45,0)
 ;        0  Ok
"RTN","RORUPD01",46,0)
 ;
"RTN","RORUPD01",47,0)
LOAD(IENS) ;
"RTN","RORUPD01",48,0)
 N RC  S RC=0
"RTN","RORUPD01",49,0)
 ;--- API #1
"RTN","RORUPD01",50,0)
 I $D(RORUPD("SR",2,"F",1))  D  Q:RC<0 RC
"RTN","RORUPD01",51,0)
 . S RC=$$LOADFLDS^RORUPDUT(2,IENS)
"RTN","RORUPD01",52,0)
 ;--- API #2
"RTN","RORUPD01",53,0)
 Q 0
"RTN","RORUPD01",54,0)
 ;
"RTN","RORUPD01",55,0)
 ;***** INITIALIZES LOOP CONTROL LISTS
"RTN","RORUPD01",56,0)
 ;
"RTN","RORUPD01",57,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD01",58,0)
 ;
"RTN","RORUPD01",59,0)
 ; Return Values:
"RTN","RORUPD01",60,0)
 ;       <0  Error code
"RTN","RORUPD01",61,0)
 ;        0  Ok
"RTN","RORUPD01",62,0)
 ;
"RTN","RORUPD01",63,0)
 ; The RORUPD("LM",1,Rule Name) list contains names of the top level
"RTN","RORUPD01",64,0)
 ; rules that have not been triggered by now.
"RTN","RORUPD01",65,0)
 ;
"RTN","RORUPD01",66,0)
 ; The RORUPD("LM",2,Registry#) list contains IENs of the registries
"RTN","RORUPD01",67,0)
 ; that do not contain the patient by now.
"RTN","RORUPD01",68,0)
 ;
"RTN","RORUPD01",69,0)
 ; If the patient is an employee and the registry must not include
"RTN","RORUPD01",70,0)
 ; employees (see the EXCLUDE EMPLOYEES field of the ROR REGISTRY
"RTN","RORUPD01",71,0)
 ; PARAMETERS file), the function initializes the corresponding items
"RTN","RORUPD01",72,0)
 ; of control lists as if the patient were already in the registry.
"RTN","RORUPD01",73,0)
 ; Therefore, the patient will not be added to this registry.
"RTN","RORUPD01",74,0)
 ;
"RTN","RORUPD01",75,0)
LOOPINIT(PATIEN) ;
"RTN","RORUPD01",76,0)
 N I,EMPL,REGIEN
"RTN","RORUPD01",77,0)
 K RORUPD("LM",1),RORUPD("LM",2)
"RTN","RORUPD01",78,0)
 S EMPL=$$EMPL^DGSEC4(PATIEN,"P")
"RTN","RORUPD01",79,0)
 M RORUPD("LM",1)=RORUPD("LM1")
"RTN","RORUPD01",80,0)
 S REGIEN=""
"RTN","RORUPD01",81,0)
 F  S REGIEN=$O(RORUPD("LM2",REGIEN))  Q:REGIEN=""  D
"RTN","RORUPD01",82,0)
 . S $P(RORUPD("LM2",REGIEN),U)=0
"RTN","RORUPD01",83,0)
 . ;--- Check if the patient is already in the registry
"RTN","RORUPD01",84,0)
 . Q:$D(^RORDATA(798,"KEY",PATIEN,REGIEN))
"RTN","RORUPD01",85,0)
 . ;--- Check if the patient is an employee and the
"RTN","RORUPD01",86,0)
 . ;--- employees must not be added to the registry
"RTN","RORUPD01",87,0)
 . I EMPL  Q:$P(RORUPD("LM2",REGIEN),U,2)
"RTN","RORUPD01",88,0)
 . ;--- Initialize the items of control lists
"RTN","RORUPD01",89,0)
 . S $P(RORUPD("LM2",REGIEN),U)=1,RORUPD("LM",2,REGIEN)=""
"RTN","RORUPD01",90,0)
 Q 0
"RTN","RORUPD01",91,0)
 ;
"RTN","RORUPD01",92,0)
 ;***** PROCESS EVERY PATIENT IN THE 'PATIENT' FILE
"RTN","RORUPD01",93,0)
 ;
"RTN","RORUPD01",94,0)
 ; BEGIEN        Start IEN in the PATIENT file
"RTN","RORUPD01",95,0)
 ; ENDIEN        End IEN in the PATIENT file
"RTN","RORUPD01",96,0)
 ;
"RTN","RORUPD01",97,0)
 ; Return Values:
"RTN","RORUPD01",98,0)
 ;       <0  Error code
"RTN","RORUPD01",99,0)
 ;      >=0  Statistics
"RTN","RORUPD01",100,0)
 ;             ^1: Total number of processed patients
"RTN","RORUPD01",101,0)
 ;             ^2: Number of patients processed with errors
"RTN","RORUPD01",102,0)
 ;
"RTN","RORUPD01",103,0)
 ; If there is an error in processing of a patient, routine behavior
"RTN","RORUPD01",104,0)
 ; depends on the mode of execution:
"RTN","RORUPD01",105,0)
 ;
"RTN","RORUPD01",106,0)
 ; In the normal mode program logs the errors, adds a record to the
"RTN","RORUPD01",107,0)
 ; ROR PATIENT EVENTS file (#798.3), and continues processing of
"RTN","RORUPD01",108,0)
 ; the remaining patients. Next registry update wil start data scan
"RTN","RORUPD01",109,0)
 ; for this patient from the date stored in the file #798.3.
"RTN","RORUPD01",110,0)
 ;
"RTN","RORUPD01",111,0)
 ; In the debug mode 3 program is aborted if there is an error
"RTN","RORUPD01",112,0)
 ; during processing of a patient.
"RTN","RORUPD01",113,0)
 ;
"RTN","RORUPD01",114,0)
PROCESS(BEGIEN,ENDIEN) ;
"RTN","RORUPD01",115,0)
 ;Patch 14 adds functionality to automatically confirm patients with
"RTN","RORUPD01",116,0)
 ;certain HCV LOINCs.  A list of the LOINCs are loaded into an array
"RTN","RORUPD01",117,0)
 ;for future comparison
"RTN","RORUPD01",118,0)
 D HCVLOAD ;Load list of HCV LOINCs into an array for use in HCV^RORUPD04
"RTN","RORUPD01",119,0)
 N CNT,DTNEXT,ECNT,EXIT,PATIEN,RC,TH,TMP
"RTN","RORUPD01",120,0)
 ;--- Loop through the patients
"RTN","RORUPD01",121,0)
 S:$G(ENDIEN)'>0 ENDIEN=0
"RTN","RORUPD01",122,0)
 S PATIEN=$S($G(BEGIEN)>0:$O(^DPT(BEGIEN),-1),1:0)
"RTN","RORUPD01",123,0)
 S (CNT,ECNT,EXIT,RC)=0
"RTN","RORUPD01",124,0)
 F  S PATIEN=$O(^DPT(PATIEN))  Q:PATIEN'>0  D  Q:EXIT!(RC<0)
"RTN","RORUPD01",125,0)
 . I ENDIEN,PATIEN'<ENDIEN  S EXIT=1  Q
"RTN","RORUPD01",126,0)
 . ;--- For a queued task only
"RTN","RORUPD01",127,0)
 . I $D(ZTQUEUED)  S RC=0  D  Q:RC<0
"RTN","RORUPD01",128,0)
 . . ;--- Check if task stop has been requested
"RTN","RORUPD01",129,0)
 . . I $$CHKSTOP()  S RC=$$ERROR^RORERR(-42)  Q
"RTN","RORUPD01",130,0)
 . . ;--- Check if the task should be suspended
"RTN","RORUPD01",131,0)
 . . Q:'$G(RORUPD("SUSPEND"))
"RTN","RORUPD01",132,0)
 . . Q:$$NOW^XLFDT<$G(DTNEXT)
"RTN","RORUPD01",133,0)
 . . Q:'$$SUSPEND(.DTNEXT)
"RTN","RORUPD01",134,0)
 . . ;--- Suspend the task during the peak hours
"RTN","RORUPD01",135,0)
 . . F  D  Q:'TH!(RC<0)
"RTN","RORUPD01",136,0)
 . . . S TH=$$FMDIFF^XLFDT(DTNEXT,$$NOW^XLFDT,2)
"RTN","RORUPD01",137,0)
 . . . I TH<60  S TH=0  Q       ; Do not HANG for less than a
"RTN","RORUPD01",138,0)
 . . . H $S(TH>3600:3600,1:TH)  ; minute and more than an hour
"RTN","RORUPD01",139,0)
 . . . ;--- Check if task stop has been requested
"RTN","RORUPD01",140,0)
 . . . S:$$CHKSTOP() RC=$$ERROR^RORERR(-42)
"RTN","RORUPD01",141,0)
 . ;--- Update the progress indicator
"RTN","RORUPD01",142,0)
 . S CNT=CNT+1
"RTN","RORUPD01",143,0)
 . I $G(RORPARM("DEBUG"))>1  W:$E($G(IOST),1,2)="C-" *13,CNT
"RTN","RORUPD01",144,0)
 . ;--- Process the patient
"RTN","RORUPD01",145,0)
 . S RC=$$PROCPAT(PATIEN)
"RTN","RORUPD01",146,0)
 . I $G(RORPARM("SETUP"))  D:'(CNT#1000)
"RTN","RORUPD01",147,0)
 . . D LOG^RORLOG(2,"Number of patients processed by now: "_CNT)
"RTN","RORUPD01",148,0)
 . ;--- Process the error (if any)
"RTN","RORUPD01",149,0)
 . I RC<0  D  S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORUPD01",150,0)
 . . I RC=-66  S RC=0  Q        ; Counter in the file #798.3
"RTN","RORUPD01",151,0)
 . . S ECNT=ECNT+1
"RTN","RORUPD01",152,0)
 . . S RC=$$ERROR^RORERR(-15,,,PATIEN)
"RTN","RORUPD01",153,0)
 . . ;--- Create a record in the file #798.3
"RTN","RORUPD01",154,0)
 . . S TMP=$$ADD^RORUPP01(PATIEN,RORUPD("DSBEG"))
"RTN","RORUPD01",155,0)
 . . S:TMP<0 RC=TMP
"RTN","RORUPD01",156,0)
 K ^TMP("ROR HCV LIST"),^TMP("ROR HCV CONFIRM")
"RTN","RORUPD01",157,0)
 Q $S(RC<0:RC,1:CNT_"^"_ECNT)
"RTN","RORUPD01",158,0)
 ;
"RTN","RORUPD01",159,0)
 ;***** PROCESSES PATIENT'S DATA (EXCEPT DEMOGRAPHIC DATA)
"RTN","RORUPD01",160,0)
 ;
"RTN","RORUPD01",161,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD01",162,0)
 ; [NOUPD]       Disable registry update (0 by default)
"RTN","RORUPD01",163,0)
 ;
"RTN","RORUPD01",164,0)
 ; Return Values:
"RTN","RORUPD01",165,0)
 ;       <0  Error code
"RTN","RORUPD01",166,0)
 ;        0  Ok
"RTN","RORUPD01",167,0)
 ;
"RTN","RORUPD01",168,0)
 ; If there is a record for the patient in the ROR PATIENT EVENTS
"RTN","RORUPD01",169,0)
 ; file (#798.3) and date in that record is less than a value of the
"RTN","RORUPD01",170,0)
 ; RORUPD("DSBEG") then it is used as a start date of the data scan
"RTN","RORUPD01",171,0)
 ; for the patient. Otherwise, the RORUPD("DSBEG") is used.
"RTN","RORUPD01",172,0)
 ;
"RTN","RORUPD01",173,0)
PROCPAT(PATIEN,NOUPD) ;
"RTN","RORUPD01",174,0)
 ;--- Quit if the patient has already been processed
"RTN","RORUPD01",175,0)
 Q:$D(@RORUPDPI@("U",PATIEN)) 0
"RTN","RORUPD01",176,0)
 ;--- Quit if the patient's record has been merged
"RTN","RORUPD01",177,0)
 Q:$G(^DPT(PATIEN,-9)) 0
"RTN","RORUPD01",178,0)
 ;--- Do not update the registries with a "test patient"
"RTN","RORUPD01",179,0)
 I '$G(NOUPD),$$TESTPAT^RORUTL01(PATIEN) D  Q 0
"RTN","RORUPD01",180,0)
 . S @RORUPDPI@("U",PATIEN)=""
"RTN","RORUPD01",181,0)
 ;
"RTN","RORUPD01",182,0)
 N RORERRDL      ; Default error location
"RTN","RORUPD01",183,0)
 ;
"RTN","RORUPD01",184,0)
 N PATIENS,RC,RLST,RORMSG,SDSDT,TMP,UPDREG,UPDSTART
"RTN","RORUPD01",185,0)
 S PATIENS=PATIEN_","
"RTN","RORUPD01",186,0)
 ;--- Initialize the variables
"RTN","RORUPD01",187,0)
 D CLEAR^RORERR("PROCPAT^RORUPD01"),CLREC^RORUPDUT
"RTN","RORUPD01",188,0)
 K RORVALS ; Clear all calculated values
"RTN","RORUPD01",189,0)
 S RC=$$LOOPINIT(PATIEN)  Q:RC<0 RC
"RTN","RORUPD01",190,0)
 ;
"RTN","RORUPD01",191,0)
 ;--- If the loop control list of registries is empty, the patient
"RTN","RORUPD01",192,0)
 ;    is already in all the registries that we are going to process.
"RTN","RORUPD01",193,0)
 S UPDREG=0
"RTN","RORUPD01",194,0)
 I $D(RORUPD("LM",2))>1  S RC=0  D  G:RC<0 PPEX  S UPDREG='$G(NOUPD)
"RTN","RORUPD01",195,0)
 . ;--- Determine start date of the data scan
"RTN","RORUPD01",196,0)
 . S UPDSTART=RORUPD("DSBEG")
"RTN","RORUPD01",197,0)
 . S SDSDT=$$SDSDATE^RORUPP01(PATIEN)
"RTN","RORUPD01",198,0)
 . I SDSDT<0  S RC=SDSDT  Q
"RTN","RORUPD01",199,0)
 . I SDSDT  S:SDSDT<UPDSTART UPDSTART=SDSDT
"RTN","RORUPD01",200,0)
 . S UPDSTART=$$FMADD^XLFDT(UPDSTART\1,-RORUPD("LD",1))
"RTN","RORUPD01",201,0)
 . ;--- Load necessary data elements
"RTN","RORUPD01",202,0)
 . I $D(RORUPD("SR",2,"F"))>1  D  Q:RC<0
"RTN","RORUPD01",203,0)
 . . S RC=$$LOAD(PATIENS)
"RTN","RORUPD01",204,0)
 . D SETVAL^RORUPDUT("ROR DFN",PATIEN)
"RTN","RORUPD01",205,0)
 . ;--- Apply "before" rules
"RTN","RORUPD01",206,0)
 . S RC=$$APLRULES^RORUPDUT(2,PATIENS,"B")  Q:RC
"RTN","RORUPD01",207,0)
 . ;
"RTN","RORUPD01",208,0)
 . ;--- Process patient data from other VistA files
"RTN","RORUPD01",209,0)
 . I $D(RORUPD("SR",9000010))  D  Q:RC
"RTN","RORUPD01",210,0)
 . . S RC=$$VISIT^RORUPD08(UPDSTART,PATIEN)
"RTN","RORUPD01",211,0)
 . I $D(RORUPD("SR",9000011))  D  Q:RC
"RTN","RORUPD01",212,0)
 . . S RC=$$PROBLEM^RORUPD07(UPDSTART,PATIEN)
"RTN","RORUPD01",213,0)
 . I $D(RORUPD("SR",45))  D       Q:RC
"RTN","RORUPD01",214,0)
 . . S RC=$$PTF^RORUPD09(UPDSTART,PATIEN)
"RTN","RORUPD01",215,0)
 . I $D(RORUPD("SR",63))  D       Q:RC
"RTN","RORUPD01",216,0)
 . . S RC=$$LAB^RORUPD04(UPDSTART,PATIEN)
"RTN","RORUPD01",217,0)
 . ; <--- Insert processing of other files here. Do not forget to add
"RTN","RORUPD01",218,0)
 . ;      definitions of these files into the 'ROR METADATA' file.
"RTN","RORUPD01",219,0)
 . ;
"RTN","RORUPD01",220,0)
 . ;--- Apply "after" rules
"RTN","RORUPD01",221,0)
 . S RC=$$APLRULES^RORUPDUT(2,PATIENS,"A")  Q:RC
"RTN","RORUPD01",222,0)
 ;
"RTN","RORUPD01",223,0)
 ;--- Update the registries if necessary
"RTN","RORUPD01",224,0)
 I UPDREG  S RC=$$UPDREG^RORUPD50(PATIEN)  G:RC<0 PPEX
"RTN","RORUPD01",225,0)
 ;--- Error processing
"RTN","RORUPD01",226,0)
 I $$GETEC^RORUPDUT  D  S RC=-15
"RTN","RORUPD01",227,0)
 . S RLST=$NA(@RORUPDPI@("U",PATIEN,2))
"RTN","RORUPD01",228,0)
 E  S RLST="",RC=0
"RTN","RORUPD01",229,0)
 ;--- If there are records in the file #798.3 for the patient,
"RTN","RORUPD01",230,0)
 ;    remove them (log a warning if cannot remove). If the patient
"RTN","RORUPD01",231,0)
 ;    has been processed with errors, remove only records associated
"RTN","RORUPD01",232,0)
 ;--- with the registries that the patient has been added to.
"RTN","RORUPD01",233,0)
 D:$G(SDSDT)
"RTN","RORUPD01",234,0)
 . S TMP=$$REMOVE^RORUPP01(PATIEN,RLST)
"RTN","RORUPD01",235,0)
 . S:TMP<0 TMP=$$ERROR^RORERR(-31,,,PATIEN)
"RTN","RORUPD01",236,0)
 ;--- Mark the patient as processed
"RTN","RORUPD01",237,0)
 S @RORUPDPI@("U",PATIEN)=""
"RTN","RORUPD01",238,0)
PPEX ;--- Cleanup
"RTN","RORUPD01",239,0)
 D CLRDES^RORUPDUT(2)
"RTN","RORUPD01",240,0)
 Q RC
"RTN","RORUPD01",241,0)
 ;
"RTN","RORUPD01",242,0)
 ;***** CHECKS IF THE TASK SHOULD BE SUSPENDED
"RTN","RORUPD01",243,0)
 ;
"RTN","RORUPD01",244,0)
 ; .DTNEXT       Date/Time of the next event (suspend/resume)
"RTN","RORUPD01",245,0)
 ;               is returned via this parameter
"RTN","RORUPD01",246,0)
 ;
"RTN","RORUPD01",247,0)
 ; Return Values:
"RTN","RORUPD01",248,0)
 ;        0  Continue/Resume
"RTN","RORUPD01",249,0)
 ;        1  Suspend
"RTN","RORUPD01",250,0)
 ;
"RTN","RORUPD01",251,0)
SUSPEND(DTNEXT) ;
"RTN","RORUPD01",252,0)
 N DATE,NOW,SUSPEND,TIME,TS,TR
"RTN","RORUPD01",253,0)
 S TS=$P(RORUPD("SUSPEND"),U,1)
"RTN","RORUPD01",254,0)
 S TR=$P(RORUPD("SUSPEND"),U,2)
"RTN","RORUPD01",255,0)
 S NOW=$$NOW^XLFDT,DATE=NOW\1
"RTN","RORUPD01",256,0)
 ;--- A working day
"RTN","RORUPD01",257,0)
 I $$WDCHK^RORUTL01(DATE)  D  Q SUSPEND
"RTN","RORUPD01",258,0)
 . S TIME=NOW#1,SUSPEND=0
"RTN","RORUPD01",259,0)
 . I '$D(DTNEXT) D  Q:SUSPEND=1
"RTN","RORUPD01",260,0)
 .. ; Check that first start time is not within a suspend period
"RTN","RORUPD01",261,0)
 .. I TIME'<TS,TIME<TR S DTNEXT=DATE+TR,SUSPEND=1
"RTN","RORUPD01",262,0)
 . I TIME<TS S DTNEXT=DATE+TS  Q
"RTN","RORUPD01",263,0)
 . I TIME'<TR S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS  Q
"RTN","RORUPD01",264,0)
 . S DTNEXT=DATE+TR,SUSPEND=1
"RTN","RORUPD01",265,0)
 ;--- Saturday, Sunday or Holiday
"RTN","RORUPD01",266,0)
 S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS
"RTN","RORUPD01",267,0)
 Q 0
"RTN","RORUPD01",268,0)
 ;
"RTN","RORUPD01",269,0)
 ;***** UPDATES REGISTRY UPDATE PARAMETERS
"RTN","RORUPD01",270,0)
 ;
"RTN","RORUPD01",271,0)
 ; .REGLST       Reference to a local array containing registry names
"RTN","RORUPD01",272,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUPD01",273,0)
 ;
"RTN","RORUPD01",274,0)
 ; Return values:
"RTN","RORUPD01",275,0)
 ;       <0  Error code
"RTN","RORUPD01",276,0)
 ;        0  Ok
"RTN","RORUPD01",277,0)
 ;
"RTN","RORUPD01",278,0)
TMSTMP(REGLST) ;
"RTN","RORUPD01",279,0)
 N DATE,DIERR,RC,REGIEN,REGIENS,REGNAME,RORFDA,RORMSG,TMP
"RTN","RORUPD01",280,0)
 S REGNAME="",RC=0
"RTN","RORUPD01",281,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUPD01",282,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUPD01",283,0)
 . I REGIEN'>0  D  I REGIEN'>0  S RC=+REGIEN  Q
"RTN","RORUPD01",284,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUPD01",285,0)
 . S REGIENS=REGIEN_","
"RTN","RORUPD01",286,0)
 . ;--- Check if the new date until that registry is updated is
"RTN","RORUPD01",287,0)
 . ;    greater than that stored in the registry parameters
"RTN","RORUPD01",288,0)
 . S TMP=$$GET1^DIQ(798.1,REGIENS,1,"I",,"RORMSG")
"RTN","RORUPD01",289,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD01",290,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","RORUPD01",291,0)
 . S DATE=RORUPD("DSEND")\1
"RTN","RORUPD01",292,0)
 . S:DATE>TMP RORFDA(798.1,REGIENS,1)=DATE
"RTN","RORUPD01",293,0)
 . ;--- Update registry parameters (if necessary)
"RTN","RORUPD01",294,0)
 . Q:$D(RORFDA)<10
"RTN","RORUPD01",295,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUPD01",296,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD01",297,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","RORUPD01",298,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPD01",299,0)
 ;
"RTN","RORUPD01",300,0)
 ;***** LOAD LIST OF HCV LOINCS INTO AN ARRAY FOR USE IN ADD^RORUPD50
"RTN","RORUPD01",301,0)
 ;
"RTN","RORUPD01",302,0)
HCVLOAD ;
"RTN","RORUPD01",303,0)
 K ^TMP("ROR HCV LIST") ;initialize HCV arrays
"RTN","RORUPD01",304,0)
 N I,RORDONE,RORLOINC
"RTN","RORUPD01",305,0)
 S RORDONE=0
"RTN","RORUPD01",306,0)
 F I=1:1 S RORLOINC=$P($T(HCVLIST+I),";;",2) Q:RORDONE  D
"RTN","RORUPD01",307,0)
 . I (($G(RORLOINC)="END OF LIST")!($G(RORLOINC)="")) S RORDONE=1 Q
"RTN","RORUPD01",308,0)
 . S ^TMP("ROR HCV LIST",$J,RORLOINC)="" ;add LOINC to array
"RTN","RORUPD01",309,0)
 ;
"RTN","RORUPD01",310,0)
 Q
"RTN","RORUPD01",311,0)
 ;LIST OF HCV LOINCS
"RTN","RORUPD01",312,0)
 ;Patients with a positive value in any of these HCV LOINCs will be confirmed into
"RTN","RORUPD01",313,0)
 ;the registry during the nightly update.  If a LOINC needs to be added to the
"RTN","RORUPD01",314,0)
 ;list, add it above the 'end of list' entry.
"RTN","RORUPD01",315,0)
HCVLIST ;
"RTN","RORUPD01",316,0)
 ;;11011-4
"RTN","RORUPD01",317,0)
 ;;29609-5
"RTN","RORUPD01",318,0)
 ;;34703-9
"RTN","RORUPD01",319,0)
 ;;34704-7
"RTN","RORUPD01",320,0)
 ;;10676-5
"RTN","RORUPD01",321,0)
 ;;20416-4
"RTN","RORUPD01",322,0)
 ;;20571-6
"RTN","RORUPD01",323,0)
 ;;49758-6
"RTN","RORUPD01",324,0)
 ;;50023-1
"RTN","RORUPD01",325,0)
 ;;END OF LIST
"RTN","RORUPD09")
0^7^B15763662^B11230376
"RTN","RORUPD09",1,0)
RORUPD09 ;HCIOFO/SG - PROCESSING OF THE 'PTF' FILE  ;8/3/05 9:50am
"RTN","RORUPD09",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**18,25,26**;Feb 17, 2006;Build 53
"RTN","RORUPD09",3,0)
 ;
"RTN","RORUPD09",4,0)
 ;*****************************************************************************
"RTN","RORUPD09",5,0)
 ;*****************************************************************************
"RTN","RORUPD09",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPD09",7,0)
 ;        
"RTN","RORUPD09",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPD09",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPD09",10,0)
 ;ROR*1.5*18   APR 2012    C RAY        Modified PTF RULE to use B xref #798.5
"RTN","RORUPD09",11,0)
 ;ROR*1.5*25   FEB 2015    T KOPP       Modified PTF rule to add new Diagnosis
"RTN","RORUPD09",12,0)
 ;                                      fields for ICD-10 PTF expansion.
"RTN","RORUPD09",13,0)
 ;ROR*1.5*26   MAR 2015    T KOPP       Added rule for PTF procedure codes check
"RTN","RORUPD09",14,0)
 ;                                      in API #3
"RTN","RORUPD09",15,0)
 ;*****************************************************************************
"RTN","RORUPD09",16,0)
 ;*****************************************************************************
"RTN","RORUPD09",17,0)
 ; This routine uses the following IAs:
"RTN","RORUPD09",18,0)
 ;
"RTN","RORUPD09",19,0)
 ; #3157         RPC^DGPTFAPI
"RTN","RORUPD09",20,0)
 ; #3545         Access to the "AAD" cross-reference and the field 80
"RTN","RORUPD09",21,0)
 ; #10103        $$FMADD^XLFDT (supported)
"RTN","RORUPD09",22,0)
 ; #2171         $$IEN^XUAF4 (supported)
"RTN","RORUPD09",23,0)
 ;
"RTN","RORUPD09",24,0)
 ;
"RTN","RORUPD09",25,0)
 Q
"RTN","RORUPD09",26,0)
 ;
"RTN","RORUPD09",27,0)
 ;***** LOADS DATA ELEMENT VALUES
"RTN","RORUPD09",28,0)
 ;
"RTN","RORUPD09",29,0)
 ; IENS          IENS of the current record
"RTN","RORUPD09",30,0)
 ;
"RTN","RORUPD09",31,0)
 ; Return values:
"RTN","RORUPD09",32,0)
 ;       <0  Error code
"RTN","RORUPD09",33,0)
 ;        0  Ok
"RTN","RORUPD09",34,0)
 ;
"RTN","RORUPD09",35,0)
LOAD(IENS) ;
"RTN","RORUPD09",36,0)
 N RC  S RC=0
"RTN","RORUPD09",37,0)
 ;--- API #1 or #3
"RTN","RORUPD09",38,0)
 I $S($D(RORUPD("SR",RORFILE,"F",1)):1,1:$D(RORUPD("SR",RORFILE,"F",3))) D  Q:RC<0 RC
"RTN","RORUPD09",39,0)
 . S RC=$$LOADFLDS^RORUPDUT(RORFILE,IENS)
"RTN","RORUPD09",40,0)
 ;--- API #2
"RTN","RORUPD09",41,0)
 I $D(RORUPD("SR",RORFILE,"F",2))  D  Q:RC<0 RC
"RTN","RORUPD09",42,0)
 . N API,DE,IN,IP,RORBUF,VT
"RTN","RORUPD09",43,0)
 . D RPC^DGPTFAPI(.RORBUF,+IENS)
"RTN","RORUPD09",44,0)
 . I $G(RORBUF(0))<0  S API="RPC^DGPTFAPI"  D  Q
"RTN","RORUPD09",45,0)
 . . S RC=$$ERROR^RORERR(-57,,,,RORBUF(0),API)
"RTN","RORUPD09",46,0)
 . ;---
"RTN","RORUPD09",47,0)
 . S DE=""
"RTN","RORUPD09",48,0)
 . F  S DE=$O(RORUPD("SR",RORFILE,"F",2,DE))  Q:DE=""  D
"RTN","RORUPD09",49,0)
 . . S VT=""
"RTN","RORUPD09",50,0)
 . . F  S VT=$O(RORUPD("SR",RORFILE,"F",2,DE,VT))  Q:VT=""  D
"RTN","RORUPD09",51,0)
 . . . S IP=+$P(RORUPD("SR",RORFILE,"F",2,DE,VT),U,1)  Q:IP'>0
"RTN","RORUPD09",52,0)
 . . . S IN=+$P(RORUPD("SR",RORFILE,"F",2,DE,VT),U,2)
"RTN","RORUPD09",53,0)
 . . . S RORVALS("DV",RORFILE,DE,VT)=$P($G(RORBUF(IN)),U,IP)
"RTN","RORUPD09",54,0)
 Q 0
"RTN","RORUPD09",55,0)
 ;
"RTN","RORUPD09",56,0)
 ;***** PROCESSING OF THE 'PTF' FILE
"RTN","RORUPD09",57,0)
 ;
"RTN","RORUPD09",58,0)
 ; UPDSTART      Date of the earliest update
"RTN","RORUPD09",59,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD09",60,0)
 ;
"RTN","RORUPD09",61,0)
 ; Return values:
"RTN","RORUPD09",62,0)
 ;       <0  Error code
"RTN","RORUPD09",63,0)
 ;        0  Continue processing of the current patient
"RTN","RORUPD09",64,0)
 ;        1  Stop processing
"RTN","RORUPD09",65,0)
 ;
"RTN","RORUPD09",66,0)
PTF(UPDSTART,PATIEN) ;
"RTN","RORUPD09",67,0)
 N RORFILE       ; File number
"RTN","RORUPD09",68,0)
 ;
"RTN","RORUPD09",69,0)
 N ADMDT,ADMIENS,EDT,IEN,LOCATION,NODE,RC,TMP
"RTN","RORUPD09",70,0)
 S RORFILE=45,EDT=RORUPD("DSEND")
"RTN","RORUPD09",71,0)
 ;--- Check the event references if the events are enabled
"RTN","RORUPD09",72,0)
 I $G(RORUPD("FLAGS"))["E"  D  Q:RC'>0 RC
"RTN","RORUPD09",73,0)
 . S RC=$$GET^RORUPP02(PATIEN,3,.UPDSTART,.EDT)
"RTN","RORUPD09",74,0)
 . S:RC>1 UPDSTART=UPDSTART\1,EDT=$$FMADD^XLFDT(EDT\1,1)
"RTN","RORUPD09",75,0)
 ;--- Subtract 1 second from the start date to include
"RTN","RORUPD09",76,0)
 ;    it into the interval
"RTN","RORUPD09",77,0)
 S ADMDT=$$FMADD^XLFDT(UPDSTART,,,,-1)
"RTN","RORUPD09",78,0)
 ;
"RTN","RORUPD09",79,0)
 ;--- Browse through the admissions
"RTN","RORUPD09",80,0)
 S NODE=RORUPD("ROOT",RORFILE),NODE=$NA(@NODE@("AAD",PATIEN))
"RTN","RORUPD09",81,0)
 S RC=0
"RTN","RORUPD09",82,0)
 F  S ADMDT=$O(@NODE@(ADMDT))  Q:(ADMDT="")!(ADMDT'<EDT)  D  Q:RC
"RTN","RORUPD09",83,0)
 . S IEN=""
"RTN","RORUPD09",84,0)
 . F  S IEN=$O(@NODE@(ADMDT,IEN))  Q:IEN=""  D  Q:RC
"RTN","RORUPD09",85,0)
 . . S ADMIENS=IEN_","
"RTN","RORUPD09",86,0)
 . . ;--- Load necessary data elements
"RTN","RORUPD09",87,0)
 . . I $D(RORUPD("SR",RORFILE,"F"))>1  D  I TMP<0 D INCEC^RORUPDUT() Q
"RTN","RORUPD09",88,0)
 . . . S TMP=$$LOAD(ADMIENS)
"RTN","RORUPD09",89,0)
 . . . S TMP=$$GETDE^RORUPDUT(45,131)_$$GETDE^RORUPDUT(45,132)
"RTN","RORUPD09",90,0)
 . . . S LOCATION=$S(TMP'="":$$IEN^XUAF4(TMP),1:"")
"RTN","RORUPD09",91,0)
 . . ;--- Apply "before" rules
"RTN","RORUPD09",92,0)
 . . S RC=$$APLRULES^RORUPDUT(RORFILE,ADMIENS,"B",ADMDT,$G(LOCATION))
"RTN","RORUPD09",93,0)
 . . I RC  D INCEC^RORUPDUT(.RC)  Q
"RTN","RORUPD09",94,0)
 . . ;--- Apply "after" rules
"RTN","RORUPD09",95,0)
 . . S RC=$$APLRULES^RORUPDUT(RORFILE,ADMIENS,"A",ADMDT,$G(LOCATION))
"RTN","RORUPD09",96,0)
 . . I RC  D INCEC^RORUPDUT(.RC)  Q
"RTN","RORUPD09",97,0)
 ;
"RTN","RORUPD09",98,0)
 D CLRDES^RORUPDUT(RORFILE)
"RTN","RORUPD09",99,0)
 Q RC
"RTN","RORUPD09",100,0)
 ;
"RTN","RORUPD09",101,0)
 ;***** IMPLEMENTATION OF THE 'PTF' Diagnosis RULE
"RTN","RORUPD09",102,0)
PTFRULE(ICD) ;
"RTN","RORUPD09",103,0)
 N DATELMT,RC
"RTN","RORUPD09",104,0)
 S RC=0
"RTN","RORUPD09",105,0)
 F DATELMT=111,101:1:110,131:1:147  D  Q:RC
"RTN","RORUPD09",106,0)
 . S RC=+$D(^ROR(798.5,REGIEN,1,"B",+$G(RORVALS("DV",45,DATELMT,"I"))))
"RTN","RORUPD09",107,0)
 Q RC
"RTN","RORUPD09",108,0)
 ;
"RTN","RORUPD09",109,0)
 ;***** IMPLEMENTATION OF THE 'PTF' Procedure RULE for ICD and CPT
"RTN","RORUPD09",110,0)
PTFRULE1(REGIEN) ;
"RTN","RORUPD09",111,0)
 N ROR
"RTN","RORUPD09",112,0)
 S RC=0
"RTN","RORUPD09",113,0)
 I $D(^ROR(798.5,REGIEN,2,"B")) D  Q:RC  ;ICD procedure codes
"RTN","RORUPD09",114,0)
 . S ROR=0 F  S ROR=$O(RORVALS("PPTF","I",ROR)) Q:'ROR  I +$D(^ROR(798.5,REGIEN,2,"B",+$G(RORVALS("PPTF","I",ROR,"I")))) S RC=1 Q
"RTN","RORUPD09",115,0)
 I 'RC,$D(^ROR(798.5,REGIEN,3,"B")) D  ;CPT procedure codes
"RTN","RORUPD09",116,0)
 . S ROR=0 F  S ROR=$O(RORVALS("PPTF","C",ROR)) Q:'ROR  I +$D(^ROR(798.5,REGIEN,3,"B",+$G(RORVALS("PPTF","C",ROR,"I")))) S RC=1 Q
"RTN","RORUPD09",117,0)
 Q RC
"RTN","RORUPD09",118,0)
 ;
"RTN","RORUPDUT")
0^10^B73706104^B61030807
"RTN","RORUPDUT",1,0)
RORUPDUT ;HCIOFO/SG - REGISTRY UPDATE UTILITIES ;15 Jun 2015  12:30 PM
"RTN","RORUPDUT",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**18,19,26**;Feb 17, 2006;Build 53
"RTN","RORUPDUT",3,0)
 ;
"RTN","RORUPDUT",4,0)
 ;*****************************************************************************
"RTN","RORUPDUT",5,0)
 ;*****************************************************************************
"RTN","RORUPDUT",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPDUT",7,0)
 ;        
"RTN","RORUPDUT",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPDUT",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPDUT",10,0)
 ;ROR*1.5*18   APR 2012    C RAY        Add logic to define REGIEN for
"RTN","RORUPDUT",11,0)
 ;                                      ROR SELECTION RULE EXPRESSION
"RTN","RORUPDUT",12,0)
 ;ROR*1.5*19   FEB  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORUPDUT",13,0)
 ;ROR*1.5*26   APR  2015   T KOPP       Add check for coding system for procedures
"RTN","RORUPDUT",14,0)
 ;                                      Add logic for storing inpatient proc codes
"RTN","RORUPDUT",15,0)
 ;*****************************************************************************
"RTN","RORUPDUT",16,0)
 ;****************************************************************************
"RTN","RORUPDUT",17,0)
 ; This routine uses the following IAs:
"RTN","RORUPDUT",18,0)
 ;
"RTN","RORUPDUT",19,0)
 ; #2051  FIND^DIC  (supported)
"RTN","RORUPDUT",20,0)
 ; #2056  GETS^DIQ (supported)
"RTN","RORUPDUT",21,0)
 ; #5679  IMPDATE^LEXU (Supported)
"RTN","RORUPDUT",22,0)
 ;****************************************************************************          
"RTN","RORUPDUT",23,0)
 ;
"RTN","RORUPDUT",24,0)
 ; RORVALS ------------- CALCULATED VALUES
"RTN","RORUPDUT",25,0)
 ;
"RTN","RORUPDUT",26,0)
 ; RORVALS("DV",         VALUES OF THE DATA ELEMENTS
"RTN","RORUPDUT",27,0)
 ;   File#,DataCode,"E") External value
"RTN","RORUPDUT",28,0)
 ;   File#,DataCode,"I") Internal value
"RTN","RORUPDUT",29,0)
 ;
"RTN","RORUPDUT",30,0)
 ; RORVALS("LS",         LIST OF TRIGGERED LAB SEARCHES
"RTN","RORUPDUT",31,0)
 ;   LabSearch#)         Observation descriptor
"RTN","RORUPDUT",32,0)
 ;                         ^01: Date/time of the observation
"RTN","RORUPDUT",33,0)
 ;                         ^02: Institution IEN
"RTN","RORUPDUT",34,0)
 ; RORVALS("PPTF",       List of inpatient procedure codes for patient
"RTN","RORUPDUT",35,0)
 ;   Datatype,           Datatype="C" for CPT, 'I' for ICD procedure
"RTN","RORUPDUT",36,0)
 ;   n,                  n = seq # unique to each multiple file entry found
"RTN","RORUPDUT",37,0)
 ;   "I")                Internal value
"RTN","RORUPDUT",38,0)
 ;
"RTN","RORUPDUT",39,0)
 ; RORVALS("SV",         VALUES OF THE SELECTION RULES
"RTN","RORUPDUT",40,0)
 ;   Rule Name,          Current value
"RTN","RORUPDUT",41,0)
 ;     "AVG")            Average value
"RTN","RORUPDUT",42,0)
 ;     "CNT")            Counter
"RTN","RORUPDUT",43,0)
 ;     "DTF")            Used by the {SDF} and {SDL} macros to store
"RTN","RORUPDUT",44,0)
 ;     "DTL")            the earliest and the latest trigger dates
"RTN","RORUPDUT",45,0)
 ;     "MAX")            Maximum value
"RTN","RORUPDUT",46,0)
 ;     "MIN")            Minimum value
"RTN","RORUPDUT",47,0)
 ;     "SUM")            Total value
"RTN","RORUPDUT",48,0)
 ;
"RTN","RORUPDUT",49,0)
 ; PREDEFINED NAME ----- VALUE AND DESCRIPTION
"RTN","RORUPDUT",50,0)
 ;
"RTN","RORUPDUT",51,0)
 ; "ROR DFN"             IEN of the patient being processed
"RTN","RORUPDUT",52,0)
 ; "ROR SRDT"            Date when the current selection rule was
"RTN","RORUPDUT",53,0)
 ;                       triggered (it is set by APLRULES^RORUPDUT
"RTN","RORUPDUT",54,0)
 ;                       but could be changed by selection rules).
"RTN","RORUPDUT",55,0)
 ;                       The {GDF} and {GDL} macros modify this
"RTN","RORUPDUT",56,0)
 ;                       value as well.
"RTN","RORUPDUT",57,0)
 ; "ROR SRLOC"           Institution IEN where the selection rule
"RTN","RORUPDUT",58,0)
 ;                       was triggered
"RTN","RORUPDUT",59,0)
 ;
"RTN","RORUPDUT",60,0)
 Q
"RTN","RORUPDUT",61,0)
 ;
"RTN","RORUPDUT",62,0)
 ;***** APPLIES SELECTION RULES TO THE RECORD
"RTN","RORUPDUT",63,0)
 ;
"RTN","RORUPDUT",64,0)
 ; FILE          File/Subfile number
"RTN","RORUPDUT",65,0)
 ; IENS          IENS of the current record
"RTN","RORUPDUT",66,0)
 ; MODE          "B" (process before subfiles) or
"RTN","RORUPDUT",67,0)
 ;               "A" (process after subfiles)
"RTN","RORUPDUT",68,0)
 ; [DATE]        Trigger date (TODAY by default)
"RTN","RORUPDUT",69,0)
 ; [LOCATION]    Institution IEN (empty by default)
"RTN","RORUPDUT",70,0)
 ;
"RTN","RORUPDUT",71,0)
 ; Return values:
"RTN","RORUPDUT",72,0)
 ;       <0  Error code
"RTN","RORUPDUT",73,0)
 ;        0  Continue processing of the current patient
"RTN","RORUPDUT",74,0)
 ;        1  Stop looping
"RTN","RORUPDUT",75,0)
 ;
"RTN","RORUPDUT",76,0)
APLRULES(FILE,IENS,MODE,DATE,LOCATION) ;
"RTN","RORUPDUT",77,0)
 N EXPR,HDR,LM,PATIEN,RC,REGIEN,RI,RULENAME,RULENODE,TMP,RORCSYS
"RTN","RORUPDUT",78,0)
 S:'$G(DATE) DATE=$$DT^XLFDT
"RTN","RORUPDUT",79,0)
 S:$G(RORUPD("IMPDATE","ICD10"))="" RORUPD("IMPDATE","ICD10")=$$IMPDATE^LEXU("10D")  ;ICD-10 implementation date
"RTN","RORUPDUT",80,0)
 ;--- Loop through the selection rules
"RTN","RORUPDUT",81,0)
 S RI="",RC=0
"RTN","RORUPDUT",82,0)
 F  S RI=$O(RORUPD("SR",FILE,MODE,RI))  Q:RI=""  D  Q:RC<0
"RTN","RORUPDUT",83,0)
 . S RULENODE=$NA(RORUPD("SR",FILE,MODE,RI))
"RTN","RORUPDUT",84,0)
 . ;Check if rule is applicable or not based on coding system
"RTN","RORUPDUT",85,0)
 . S RORCSYS=@RULENODE@(3)
"RTN","RORUPDUT",86,0)
 . Q:(DATE<RORUPD("IMPDATE","ICD10")&(RORCSYS=30!(RORCSYS=31)))  ;quit if date is before ICD-10 implementation date and selection rule is applicable for ICD-10 coding system
"RTN","RORUPDUT",87,0)
 . Q:(DATE'<RORUPD("IMPDATE","ICD10")&(RORCSYS=1!(RORCSYS=2)))  ;quit if date is on or after ICD-10 implementation date and selection rule is applicable for ICD-9 coding system 
"RTN","RORUPDUT",88,0)
 . S RORVALS("SV","ROR SRDT")=$P(DATE,".")
"RTN","RORUPDUT",89,0)
 . S RORVALS("SV","ROR SRLOC")=$G(LOCATION)
"RTN","RORUPDUT",90,0)
 . S HDR=$G(@RULENODE),RULENAME=$P(HDR,U)
"RTN","RORUPDUT",91,0)
 . ;--- If a top level rule does not exist in the control list, this
"RTN","RORUPDUT",92,0)
 . ;    rule has been already triggered for the patient. So, there is
"RTN","RORUPDUT",93,0)
 . ;    no need to check it again.
"RTN","RORUPDUT",94,0)
 . I $P(HDR,U,3)  Q:'$D(RORUPD("LM",1,RULENAME))
"RTN","RORUPDUT",95,0)
 . ;--- Get value of registry for selection rule
"RTN","RORUPDUT",96,0)
 . S REGIEN=$O(@RULENODE@(2,""))
"RTN","RORUPDUT",97,0)
 . Q:REGIEN=""
"RTN","RORUPDUT",98,0)
 . ;--- Compute the expression of the selection rule
"RTN","RORUPDUT",99,0)
 . X "S RC="_@RULENODE@(1)
"RTN","RORUPDUT",100,0)
 . I $P(HDR,U,3)  Q:'RC  D               ; TOP LEVEL RULE
"RTN","RORUPDUT",101,0)
 . . S PATIEN=$$GETVAL("ROR DFN"),REGIEN=""
"RTN","RORUPDUT",102,0)
 . . F  S REGIEN=$O(@RULENODE@(2,REGIEN))  Q:REGIEN=""  D
"RTN","RORUPDUT",103,0)
 . . . ;--- Check if the patient is already in the registry
"RTN","RORUPDUT",104,0)
 . . . Q:'$G(RORUPD("LM2",REGIEN))
"RTN","RORUPDUT",105,0)
 . . . ;--- Save the rule reference for the registry and new patient
"RTN","RORUPDUT",106,0)
 . . . S TMP=$$GETVAL("ROR SRDT")_U_$$GETVAL("ROR SRLOC")
"RTN","RORUPDUT",107,0)
 . . . S @RORUPDPI@("U",PATIEN,2,REGIEN,+$P(HDR,U,2))=TMP
"RTN","RORUPDUT",108,0)
 . . . ;--- Remove the registry from the control list
"RTN","RORUPDUT",109,0)
 . . . K RORUPD("LM",2,REGIEN)
"RTN","RORUPDUT",110,0)
 . . ;--- Remove the rule from the control list
"RTN","RORUPDUT",111,0)
 . . K RORUPD("LM",1,RULENAME)
"RTN","RORUPDUT",112,0)
 . E  D SETVAL(RULENAME,RC)              ; LOWER LEVEL RULE
"RTN","RORUPDUT",113,0)
 . S RC=0
"RTN","RORUPDUT",114,0)
 S LM=+$G(RORUPD("LM")) ; Loop mode
"RTN","RORUPDUT",115,0)
 ;--- If the loop mode equals 0, continue processing of the patient
"RTN","RORUPDUT",116,0)
 ;    in any case. Otherwise, stop processing if the corresponding
"RTN","RORUPDUT",117,0)
 ;    control list is empty.
"RTN","RORUPDUT",118,0)
 Q $S(RC<0:RC,LM:$D(RORUPD("LM",LM))<10,1:0)
"RTN","RORUPDUT",119,0)
 ;
"RTN","RORUPDUT",120,0)
 ;***** CLEARS DATA ELEMENT VALUES
"RTN","RORUPDUT",121,0)
 ;
"RTN","RORUPDUT",122,0)
 ; FILE          File/Subfile number
"RTN","RORUPDUT",123,0)
 ;
"RTN","RORUPDUT",124,0)
CLRDES(FILE) ;
"RTN","RORUPDUT",125,0)
 K RORVALS("DV",FILE)
"RTN","RORUPDUT",126,0)
 K RORVALS("PPTF",FILE)
"RTN","RORUPDUT",127,0)
 Q
"RTN","RORUPDUT",128,0)
 ;
"RTN","RORUPDUT",129,0)
 ;***** CLEARS VALUE OF THE ERROR COUNTER
"RTN","RORUPDUT",130,0)
CLREC ;
"RTN","RORUPDUT",131,0)
 K RORUPD("ERRCNT")
"RTN","RORUPDUT",132,0)
 Q
"RTN","RORUPDUT",133,0)
 ;
"RTN","RORUPDUT",134,0)
 ;***** CLEARS VALUES OF THE SELECTION RULES ASSOCIATED WITH THE FILE
"RTN","RORUPDUT",135,0)
 ;
"RTN","RORUPDUT",136,0)
 ; FILE          File/Subfile number
"RTN","RORUPDUT",137,0)
 ;
"RTN","RORUPDUT",138,0)
CLRVALS(FILE) ;
"RTN","RORUPDUT",139,0)
 N MODE,RI,RULENAME
"RTN","RORUPDUT",140,0)
 F MODE="B","A"  D
"RTN","RORUPDUT",141,0)
 . S RI=""
"RTN","RORUPDUT",142,0)
 . F  S RI=$O(RORUPD("SR",FILE,MODE,RI))  Q:RI=""  D
"RTN","RORUPDUT",143,0)
 . . S RULENAME=$P($G(RORUPD("SR",FILE,MODE,RI)),U)
"RTN","RORUPDUT",144,0)
 . . K:RULENAME'="" RORVALS("SV",RULENAME)
"RTN","RORUPDUT",145,0)
 Q
"RTN","RORUPDUT",146,0)
 ;
"RTN","RORUPDUT",147,0)
 ;***** RETURNS A CODE OF THE DATA ELEMENT
"RTN","RORUPDUT",148,0)
 ;
"RTN","RORUPDUT",149,0)
 ; FILE          File number
"RTN","RORUPDUT",150,0)
 ; NAME          Name of the data element
"RTN","RORUPDUT",151,0)
 ;
"RTN","RORUPDUT",152,0)
 ; Return values:
"RTN","RORUPDUT",153,0)
 ;       <0  Error code
"RTN","RORUPDUT",154,0)
 ;       >0  Code of the data element
"RTN","RORUPDUT",155,0)
 ;
"RTN","RORUPDUT",156,0)
DATACODE(FILE,NAME) ;
"RTN","RORUPDUT",157,0)
 N DIERR,IENS,RC,RORBUF,RORMSG
"RTN","RORUPDUT",158,0)
 S IENS=","_FILE_","
"RTN","RORUPDUT",159,0)
 D FIND^DIC(799.22,IENS,"@;.02I","X",NAME,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPDUT",160,0)
 I $G(DIERR)  D  Q RC
"RTN","RORUPDUT",161,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,799.22,IENS)
"RTN","RORUPDUT",162,0)
 S RC=+$G(RORBUF("DILIST",0))
"RTN","RORUPDUT",163,0)
 Q:RC<1 $$ERROR^RORERR(-69,,NAME)
"RTN","RORUPDUT",164,0)
 Q:RC>1 $$ERROR^RORERR(-70,,NAME)
"RTN","RORUPDUT",165,0)
 Q +$G(RORBUF("DILIST","ID",1,.02))
"RTN","RORUPDUT",166,0)
 ;
"RTN","RORUPDUT",167,0)
 ;***** PRINTS SOME DEBUG INFORMATION
"RTN","RORUPDUT",168,0)
DEBUG ;
"RTN","RORUPDUT",169,0)
 N I
"RTN","RORUPDUT",170,0)
 D ZW^RORUTL01($NA(RORUPD("FLAGS")),"Control Flags")
"RTN","RORUPDUT",171,0)
 D ZW^RORUTL01($NA(RORUPD("SR")),"Selection Rules")
"RTN","RORUPDUT",172,0)
 D ZW^RORUTL01($NA(RORUPD("UPD")),"Call-back Entry Points")
"RTN","RORUPDUT",173,0)
 W !,"Control Lists",!!
"RTN","RORUPDUT",174,0)
 F I="LM1","LM2"  D ZW^RORUTL01($NA(RORUPD(I)))
"RTN","RORUPDUT",175,0)
 D ZW^RORUTL01("RORLRC","Lab Results to check")
"RTN","RORUPDUT",176,0)
 W !,"Job number: ",$J,!
"RTN","RORUPDUT",177,0)
 Q
"RTN","RORUPDUT",178,0)
 ;
"RTN","RORUPDUT",179,0)
 ;***** GETS A VALUE OF THE DATA ELEMENT
"RTN","RORUPDUT",180,0)
 ;
"RTN","RORUPDUT",181,0)
 ; FILE          File number
"RTN","RORUPDUT",182,0)
 ; DATELMT       Code of the data element
"RTN","RORUPDUT",183,0)
 ; [TYPE]        Type of the value
"RTN","RORUPDUT",184,0)
 ;                 "E"  External
"RTN","RORUPDUT",185,0)
 ;                 "I"  Internal (default)
"RTN","RORUPDUT",186,0)
 ;
"RTN","RORUPDUT",187,0)
GETDE(FILE,DATELMT,TYPE) ;
"RTN","RORUPDUT",188,0)
 Q $G(RORVALS("DV",FILE,DATELMT,$G(TYPE,"I")))
"RTN","RORUPDUT",189,0)
 ;
"RTN","RORUPDUT",190,0)
 ;***** RETURNS VALUE OF THE ERROR COUNTER
"RTN","RORUPDUT",191,0)
GETEC() ;
"RTN","RORUPDUT",192,0)
 Q +$G(RORUPD("ERRCNT"))
"RTN","RORUPDUT",193,0)
 ;
"RTN","RORUPDUT",194,0)
 ;***** GETS VALUE OF THE SELECTION RULE
"RTN","RORUPDUT",195,0)
 ;
"RTN","RORUPDUT",196,0)
 ; RULENAME      Name of the rule
"RTN","RORUPDUT",197,0)
 ; [PFX]         Prefix of the value
"RTN","RORUPDUT",198,0)
 ;                 ""     Value itself (default)
"RTN","RORUPDUT",199,0)
 ;                 "AVG"  Average value
"RTN","RORUPDUT",200,0)
 ;                 "CNT"  Counter
"RTN","RORUPDUT",201,0)
 ;                 "MAX"  Maximum value
"RTN","RORUPDUT",202,0)
 ;                 "MIN"  Minimum value
"RTN","RORUPDUT",203,0)
 ;                 "SUM"  Total sum
"RTN","RORUPDUT",204,0)
 ;
"RTN","RORUPDUT",205,0)
GETVAL(RULENAME,PFX) ;
"RTN","RORUPDUT",206,0)
 Q $S($G(PFX)="":$G(RORVALS("SV",RULENAME)),1:$G(RORVALS("SV",RULENAME,PFX)))
"RTN","RORUPDUT",207,0)
 ;
"RTN","RORUPDUT",208,0)
 ;***** INCREMENTS VALUE OF THE ERROR COUNTER
"RTN","RORUPDUT",209,0)
 ;
"RTN","RORUPDUT",210,0)
 ; [RC]          Reference to a variable containing the error code
"RTN","RORUPDUT",211,0)
 ;
"RTN","RORUPDUT",212,0)
INCEC(RC) ;
"RTN","RORUPDUT",213,0)
 S:$G(RC,-1)<0 RORUPD("ERRCNT")=$G(RORUPD("ERRCNT"))+1,RC=0
"RTN","RORUPDUT",214,0)
 Q
"RTN","RORUPDUT",215,0)
 ;
"RTN","RORUPDUT",216,0)
 ;***** LOADS DATA ELEMENT VALUES FROM CORRESPONDING FIELDS
"RTN","RORUPDUT",217,0)
 ;
"RTN","RORUPDUT",218,0)
 ; FILE          File/Subfile number
"RTN","RORUPDUT",219,0)
 ; IENS          IENS of the current record
"RTN","RORUPDUT",220,0)
 ;
"RTN","RORUPDUT",221,0)
 ; Return values:
"RTN","RORUPDUT",222,0)
 ;       <0  Error code
"RTN","RORUPDUT",223,0)
 ;        0  Ok
"RTN","RORUPDUT",224,0)
 ;
"RTN","RORUPDUT",225,0)
LOADFLDS(FILE,IENS) ;
"RTN","RORUPDUT",226,0)
 N DE,FLD,RC,RORFDA,RORMSG,VT  K RORVALS("DV",FILE) K:FILE=45 RORVALS("PPTF",45)
"RTN","RORUPDUT",227,0)
 S FLD=$G(RORUPD("SR",FILE,"F",1))  Q:FLD="" 0
"RTN","RORUPDUT",228,0)
 ;--- Load the field values
"RTN","RORUPDUT",229,0)
 D GETS^DIQ(FILE,IENS,FLD,"EIN","RORFDA","RORMSG")
"RTN","RORUPDUT",230,0)
 I $G(DIERR)  D  Q RC
"RTN","RORUPDUT",231,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,FILE,IENS)
"RTN","RORUPDUT",232,0)
 ;--- Copy the field values from the FDA
"RTN","RORUPDUT",233,0)
 S DE=""
"RTN","RORUPDUT",234,0)
 F  S DE=$O(RORUPD("SR",FILE,"F",1,DE))  Q:DE=""  D
"RTN","RORUPDUT",235,0)
 . S FLD=+$G(RORUPD("SR",FILE,"F",1,DE))  Q:'FLD
"RTN","RORUPDUT",236,0)
 . S VT=""
"RTN","RORUPDUT",237,0)
 . F  S VT=$O(RORUPD("SR",FILE,"F",1,DE,VT))  Q:VT=""  D
"RTN","RORUPDUT",238,0)
 . . S RORVALS("DV",FILE,DE,VT)=$G(RORFDA(FILE,IENS,FLD,VT))
"RTN","RORUPDUT",239,0)
 S DE=""
"RTN","RORUPDUT",240,0)
 F  S DE=$O(RORUPD("SR",FILE,"F",3,DE))  Q:DE=""  D
"RTN","RORUPDUT",241,0)
 . S VT=""
"RTN","RORUPDUT",242,0)
 . F  S VT=$O(RORUPD("SR",FILE,"F",3,DE,VT))  Q:VT=""  D
"RTN","RORUPDUT",243,0)
 . . N ADMDT,VT,FILE,IEN ; protect some variables
"RTN","RORUPDUT",244,0)
 . . ; Call the API to return the CPT codes and ICD procedures for surgery and 'other'
"RTN","RORUPDUT",245,0)
 . . ; Returns array RORVALS("PPTF","C",n,"I") for CPT codes
"RTN","RORUPDUT",246,0)
 . . ;               RORVALS("PPTF","I",n,"I") for ICD procedure codes
"RTN","RORUPDUT",247,0)
 . . D SETPROC^RORUTL20(DE,IENS,.RORUPD,.RORVALS)
"RTN","RORUPDUT",248,0)
 Q 0
"RTN","RORUPDUT",249,0)
 ;
"RTN","RORUPDUT",250,0)
 ;***** SETS THE EARLIEST DATE FOR THE RULE
"RTN","RORUPDUT",251,0)
 ;
"RTN","RORUPDUT",252,0)
 ; NAME          Name of the selection rule
"RTN","RORUPDUT",253,0)
 ; COND          Result value of the logical condition
"RTN","RORUPDUT",254,0)
 ;
"RTN","RORUPDUT",255,0)
 ; Return values:
"RTN","RORUPDUT",256,0)
 ;        0  COND equals to zero
"RTN","RORUPDUT",257,0)
 ;        1  COND is not zero
"RTN","RORUPDUT",258,0)
 ;
"RTN","RORUPDUT",259,0)
SDF(NAME,COND) ;
"RTN","RORUPDUT",260,0)
 Q:'$G(COND) 0
"RTN","RORUPDUT",261,0)
 N DATE
"RTN","RORUPDUT",262,0)
 S DATE=$G(RORVALS("SV","ROR SRDT"))
"RTN","RORUPDUT",263,0)
 D:DATE>0
"RTN","RORUPDUT",264,0)
 . I $G(RORVALS("SV",NAME,"DTF"))'>0  D  Q
"RTN","RORUPDUT",265,0)
 . . S RORVALS("SV",NAME,"DTF")=DATE
"RTN","RORUPDUT",266,0)
 . S:DATE<RORVALS("SV",NAME,"DTF") RORVALS("SV",NAME,"DTF")=DATE
"RTN","RORUPDUT",267,0)
 Q 1
"RTN","RORUPDUT",268,0)
 ;
"RTN","RORUPDUT",269,0)
 ;***** SETS THE LATEST DATE FOR THE RULE
"RTN","RORUPDUT",270,0)
 ;
"RTN","RORUPDUT",271,0)
 ; NAME          Name of the selection rule
"RTN","RORUPDUT",272,0)
 ; COND          Result value of the logical condition
"RTN","RORUPDUT",273,0)
 ;
"RTN","RORUPDUT",274,0)
 ; Return values:
"RTN","RORUPDUT",275,0)
 ;        0  COND equals to zero
"RTN","RORUPDUT",276,0)
 ;        1  COND is not zero
"RTN","RORUPDUT",277,0)
 ;
"RTN","RORUPDUT",278,0)
SDL(NAME,COND) ;
"RTN","RORUPDUT",279,0)
 Q:'$G(COND) 0
"RTN","RORUPDUT",280,0)
 N DATE
"RTN","RORUPDUT",281,0)
 S DATE=$G(RORVALS("SV","ROR SRDT"))
"RTN","RORUPDUT",282,0)
 D:DATE>0
"RTN","RORUPDUT",283,0)
 . S:DATE>$G(RORVALS("SV",NAME,"DTL")) RORVALS("SV",NAME,"DTL")=DATE
"RTN","RORUPDUT",284,0)
 Q 1
"RTN","RORUPDUT",285,0)
 ;
"RTN","RORUPDUT",286,0)
 ;***** SETS VALUE OF THE SELECTION RULE
"RTN","RORUPDUT",287,0)
 ;
"RTN","RORUPDUT",288,0)
 ; RULENAME      Name of the rule
"RTN","RORUPDUT",289,0)
 ; VALUE         New value
"RTN","RORUPDUT",290,0)
 ;
"RTN","RORUPDUT",291,0)
SETVAL(RULENAME,VALUE) ;
"RTN","RORUPDUT",292,0)
 S RORVALS("SV",RULENAME)=VALUE
"RTN","RORUPDUT",293,0)
 S RORVALS("SV",RULENAME,"CNT")=$G(RORVALS("SV",RULENAME,"CNT"))+1
"RTN","RORUPDUT",294,0)
 S RORVALS("SV",RULENAME,"SUM")=$G(RORVALS("SV",RULENAME,"SUM"))+VALUE
"RTN","RORUPDUT",295,0)
 S RORVALS("SV",RULENAME,"AVG")=RORVALS("SV",RULENAME,"SUM")/RORVALS("SV",RULENAME,"CNT")
"RTN","RORUPDUT",296,0)
 ;
"RTN","RORUPDUT",297,0)
 I $G(RORVALS("SV",RULENAME,"MIN"))=""  S RORVALS("SV",RULENAME,"MIN")=VALUE
"RTN","RORUPDUT",298,0)
 E   S:VALUE<RORVALS("SV",RULENAME,"MIN") RORVALS("SV",RULENAME,"MIN")=VALUE
"RTN","RORUPDUT",299,0)
 ;
"RTN","RORUPDUT",300,0)
 I $G(RORVALS("SV",RULENAME,"MAX"))=""  S RORVALS("SV",RULENAME,"MAX")=VALUE
"RTN","RORUPDUT",301,0)
 E   S:VALUE>RORVALS("SV",RULENAME,"MAX") RORVALS("SV",RULENAME,"MAX")=VALUE
"RTN","RORUPDUT",302,0)
 Q
"RTN","RORUPDUT",303,0)
 ;
"RTN","RORUPDUT",304,0)
 ;***** GETS THE TRIGGER DATE OF THE RULE
"RTN","RORUPDUT",305,0)
 ;
"RTN","RORUPDUT",306,0)
 ; NAME          Name of the selection rule
"RTN","RORUPDUT",307,0)
 ; PFX           Prefix of the value ("GDF" or "GDL")
"RTN","RORUPDUT",308,0)
 ; COND          Result value of the logical condition
"RTN","RORUPDUT",309,0)
 ;
"RTN","RORUPDUT",310,0)
 ; Return values:
"RTN","RORUPDUT",311,0)
 ;        0  COND equals to zero
"RTN","RORUPDUT",312,0)
 ;        1  COND is not zero
"RTN","RORUPDUT",313,0)
 ;
"RTN","RORUPDUT",314,0)
SRDT(NAME,PFX,COND) ;
"RTN","RORUPDUT",315,0)
 Q:'$G(COND) 0
"RTN","RORUPDUT",316,0)
 N DATE
"RTN","RORUPDUT",317,0)
 S DATE=$G(RORVALS("SV",NAME,$S(PFX="GDL":"DTL",1:"DTF")))
"RTN","RORUPDUT",318,0)
 I DATE  S:DATE<$G(RORVALS("SV","ROR SRDT")) RORVALS("SV","ROR SRDT")=DATE
"RTN","RORUPDUT",319,0)
 Q 1
"RTN","RORUPR1")
0^11^B82778880^B80467906
"RTN","RORUPR1",1,0)
RORUPR1 ;HCIOFO/SG - SELECTION RULES PREPARATION ;11/20/05 4:56pm
"RTN","RORUPR1",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**12,19,24,26**;Feb 17, 2006;Build 53
"RTN","RORUPR1",3,0)
 ;
"RTN","RORUPR1",4,0)
 ;01/04/2011 BAY/KAM ROR*1.5*12 Remedy Call 421530 Populate a variable
"RTN","RORUPR1",5,0)
 ;                              to assist with Lab Test Result Code
"RTN","RORUPR1",6,0)
 ;                              identification in GCPR^LA7QRY
"RTN","RORUPR1",7,0)
 ;******************************************************************************
"RTN","RORUPR1",8,0)
 ;******************************************************************************
"RTN","RORUPR1",9,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPR1",10,0)
 ;        
"RTN","RORUPR1",11,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPR1",12,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPR1",13,0)
 ;ROR*1.5*19   FEB  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORUPR1",14,0)
 ;ROR*1.5*24   AUG  2014   T KOPP       Change to lookup for selection rule names
"RTN","RORUPR1",15,0)
 ;                                       longer than 30 characters
"RTN","RORUPR1",16,0)
 ;                                      Added NEW of variable DIERR at FILETREE
"RTN","RORUPR1",17,0)
 ;                                       and METADATA
"RTN","RORUPR1",18,0)
 ;ROR*1.5*26   APR  2015   T KOPP       Added code to support PTF procedure rule
"RTN","RORUPR1",19,0)
 ;******************************************************************************
"RTN","RORUPR1",20,0)
 ;******************************************************************************
"RTN","RORUPR1",21,0)
 ;
"RTN","RORUPR1",22,0)
 Q
"RTN","RORUPR1",23,0)
 ;
"RTN","RORUPR1",24,0)
 ;***** MARKS PARENT FILES TO PROCESS
"RTN","RORUPR1",25,0)
 ;
"RTN","RORUPR1",26,0)
 ; This function analyzes file dependencies defined by the 'ROR
"RTN","RORUPR1",27,0)
 ; METADATA' file and guaranties that all necessary files will be
"RTN","RORUPR1",28,0)
 ; processed during the registry update.
"RTN","RORUPR1",29,0)
 ;
"RTN","RORUPR1",30,0)
FILETREE() ;
"RTN","RORUPR1",31,0)
 N FILE,PF,RC,DIERR
"RTN","RORUPR1",32,0)
 S FILE="",RC=0
"RTN","RORUPR1",33,0)
 F  S FILE=$O(RORUPD("SR",FILE))  Q:FILE=""  D  Q:RC<0
"RTN","RORUPR1",34,0)
 . S PF=+FILE,RC=0
"RTN","RORUPR1",35,0)
 . ;--- Follow a path that leads from this file to
"RTN","RORUPR1",36,0)
 . ;    the root of the "file-processing tree".
"RTN","RORUPR1",37,0)
 . F  D  Q:RC
"RTN","RORUPR1",38,0)
 . . ;--- Check if metadata for the file is defined
"RTN","RORUPR1",39,0)
 . . I '$D(^ROR(799.2,PF))  D  Q
"RTN","RORUPR1",40,0)
 . . . S RC=$$ERROR^RORERR(-63,,,,PF)
"RTN","RORUPR1",41,0)
 . . ;--- Get the number of the parent file
"RTN","RORUPR1",42,0)
 . . S PF=+$$GET1^DIQ(799.2,PF_",",1,"I",,"RORMSG")
"RTN","RORUPR1",43,0)
 . . I $G(DIERR)  D  Q
"RTN","RORUPR1",44,0)
 . . . S RC=$$DBS^RORERR("RORMSG",-9)
"RTN","RORUPR1",45,0)
 . . ;--- Stop if the root of the "file-processing tree" has been
"RTN","RORUPR1",46,0)
 . . ;    reached or the file is already marked for processing.
"RTN","RORUPR1",47,0)
 . . ;    Otherwise, mark the file and continue moving up.
"RTN","RORUPR1",48,0)
 . . I 'PF!$D(RORUPD("SR",PF))  S RC=1  Q
"RTN","RORUPR1",49,0)
 . . S RORUPD("SR",PF)=""
"RTN","RORUPR1",50,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPR1",51,0)
 ;
"RTN","RORUPR1",52,0)
 ;***** RETURNS LEVEL OF THE FILE IN 'THE FILE PROCESSING' TREE
"RTN","RORUPR1",53,0)
 ;
"RTN","RORUPR1",54,0)
 ; FILE          File number
"RTN","RORUPR1",55,0)
 ;
"RTN","RORUPR1",56,0)
FLEVEL(FILE) ;
"RTN","RORUPR1",57,0)
 N LEVEL
"RTN","RORUPR1",58,0)
 S LEVEL=1
"RTN","RORUPR1",59,0)
 F  S FILE=+$P($G(^ROR(799.2,FILE,0)),U,2)  Q:'FILE  S LEVEL=LEVEL+1
"RTN","RORUPR1",60,0)
 Q LEVEL
"RTN","RORUPR1",61,0)
 ;
"RTN","RORUPR1",62,0)
 ;***** LOADS AND PREPARES LAB SEARCH INDICATORS
"RTN","RORUPR1",63,0)
 ;
"RTN","RORUPR1",64,0)
 ; Return Values:
"RTN","RORUPR1",65,0)
 ;        0  Ok
"RTN","RORUPR1",66,0)
 ;       <0  Error code
"RTN","RORUPR1",67,0)
 ;
"RTN","RORUPR1",68,0)
LABSRCH() ;
"RTN","RORUPR1",69,0)
 N I,IND,IR,LRCODE,LSICNT,LSIEN,RC,RORBUF,RORMSG,TMP,VAL
"RTN","RORUPR1",70,0)
 K RORLRC
"RTN","RORUPR1",71,0)
 ;--- Browse through the list of Lab searches
"RTN","RORUPR1",72,0)
 S LSIEN="",RC=0
"RTN","RORUPR1",73,0)
 F  S LSIEN=$O(@RORUPDPI@(4,LSIEN))  Q:LSIEN=""  D  Q:RC<0
"RTN","RORUPR1",74,0)
 . K RORBUF  S TMP=","_LSIEN_","
"RTN","RORUPR1",75,0)
 . D LIST^DIC(798.92,TMP,"@;.01;.02;1I;2",,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPR1",76,0)
 . S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0
"RTN","RORUPR1",77,0)
 . ;--- Browse through the list of search indicators
"RTN","RORUPR1",78,0)
 . S IR="",LSICNT=0
"RTN","RORUPR1",79,0)
 . F  S IR=$O(RORBUF("DILIST","ID",IR))  Q:IR=""  D  Q:RC<0
"RTN","RORUPR1",80,0)
 . . K LRCODE
"RTN","RORUPR1",81,0)
 . . ;--- Check if the indicator should be ignored
"RTN","RORUPR1",82,0)
 . . S IND=$G(RORBUF("DILIST","ID",IR,1))  Q:IND'>0
"RTN","RORUPR1",83,0)
 . . ;--- Get the result code (LOINC and/or NLT)
"RTN","RORUPR1",84,0)
 . . S LRCODE=$G(RORBUF("DILIST","ID",IR,.01))
"RTN","RORUPR1",85,0)
 . . I LRCODE>0  D  Q:LRCODE<0  S LRCODE(LRCODE_"^LN")=""
"RTN","RORUPR1",86,0)
 . . . S LRCODE=$$LNCODE^RORUTL02(LRCODE)
"RTN","RORUPR1",87,0)
 . . S LRCODE=$G(RORBUF("DILIST","ID",IR,.02))
"RTN","RORUPR1",88,0)
 . . S:LRCODE>0 LRCODE(LRCODE_"^NLT")=""
"RTN","RORUPR1",89,0)
 . . ;--- Either LOINC or NLT must be defined
"RTN","RORUPR1",90,0)
 . . Q:$D(LRCODE)<10
"RTN","RORUPR1",91,0)
 . . M RORLRC("B")=LRCODE
"RTN","RORUPR1",92,0)
 . . ;--- Prepare and store the search indicator
"RTN","RORUPR1",93,0)
 . . S VAL=$G(RORBUF("DILIST","ID",IR,2))
"RTN","RORUPR1",94,0)
 . . I VAL="",IND'=1,IND'=6  Q
"RTN","RORUPR1",95,0)
 . . S LSICNT=LSICNT+1
"RTN","RORUPR1",96,0)
 . . S LRCODE=""
"RTN","RORUPR1",97,0)
 . . F  S LRCODE=$O(LRCODE(LRCODE))  Q:LRCODE=""  D
"RTN","RORUPR1",98,0)
 . . . S I=$O(@RORUPDPI@("LS",LRCODE,LSIEN,""),-1)+1
"RTN","RORUPR1",99,0)
 . . . S @RORUPDPI@("LS",LRCODE,LSIEN,I)=IND_U_VAL
"RTN","RORUPR1",100,0)
 . Q:(RC<0)!(LSICNT>0)
"RTN","RORUPR1",101,0)
 . ;--- Record a warning if no indicators are defined
"RTN","RORUPR1",102,0)
 . S TMP=$$GET1^DIQ(798.9,LSIEN_",",.01,,,"RORMSG")
"RTN","RORUPR1",103,0)
 . S TMP=$$ERROR^RORERR(-55,,,,TMP)
"RTN","RORUPR1",104,0)
 Q:RC<0 RC
"RTN","RORUPR1",105,0)
 ;--- Prepare a list of Lab result codes for GCPR^LA7QRY
"RTN","RORUPR1",106,0)
 ;01/04/2011 BAY/KAM ROR*1.5*12 added RORLRC variable set to next line
"RTN","RORUPR1",107,0)
 S LRCODE="",RORLRC="CH"
"RTN","RORUPR1",108,0)
 F IR=1:1  S LRCODE=$O(RORLRC("B",LRCODE))  Q:LRCODE=""  D
"RTN","RORUPR1",109,0)
 . S RORLRC(IR)=LRCODE
"RTN","RORUPR1",110,0)
 K RORLRC("B")
"RTN","RORUPR1",111,0)
 Q 0
"RTN","RORUPR1",112,0)
 ;
"RTN","RORUPR1",113,0)
 ;***** LOADS SELECTION RULES DATA
"RTN","RORUPR1",114,0)
 ;
"RTN","RORUPR1",115,0)
 ; .REGLST       Reference to a local array containing registry names
"RTN","RORUPR1",116,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUPR1",117,0)
 ;
"RTN","RORUPR1",118,0)
 ; Return Values:
"RTN","RORUPR1",119,0)
 ;        0  Ok
"RTN","RORUPR1",120,0)
 ;       <0  Error code
"RTN","RORUPR1",121,0)
 ;
"RTN","RORUPR1",122,0)
LOAD(REGLST) ;
"RTN","RORUPR1",123,0)
 N I,IENS,RC,REGIEN,REGNAME,RORBUF,RORMSG,RULENAME
"RTN","RORUPR1",124,0)
 K RORUPD("LM1")
"RTN","RORUPR1",125,0)
 S REGNAME="",RC=0
"RTN","RORUPR1",126,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUPR1",127,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUPR1",128,0)
 . I REGIEN'>0  D  I REGIEN'>0  S RC=REGIEN  Q
"RTN","RORUPR1",129,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUPR1",130,0)
 . S @RORUPDPI@(2,REGIEN)=REGNAME
"RTN","RORUPR1",131,0)
 . ;--- Load selection rules
"RTN","RORUPR1",132,0)
 . K RORBUF  S IENS=","_REGIEN_","
"RTN","RORUPR1",133,0)
 . D LIST^DIC(798.13,IENS,"@;.01E","U",,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPR1",134,0)
 . S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0
"RTN","RORUPR1",135,0)
 . S I=""
"RTN","RORUPR1",136,0)
 . F  S I=$O(RORBUF("DILIST","ID",I))  Q:I=""  D  Q:RC<0
"RTN","RORUPR1",137,0)
 . . S RULENAME=RORBUF("DILIST","ID",I,.01)
"RTN","RORUPR1",138,0)
 . . S RC=$$LOADRULE(RULENAME,REGIEN)
"RTN","RORUPR1",139,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPR1",140,0)
 ;
"RTN","RORUPR1",141,0)
 ;***** LOADS THE SELECTION RULE
"RTN","RORUPR1",142,0)
 ;
"RTN","RORUPR1",143,0)
 ; RULENAME      Name of the rule
"RTN","RORUPR1",144,0)
 ; REGIEN        Registry IEN
"RTN","RORUPR1",145,0)
 ; [LEVEL]       Level of the rule (O for top level rules)
"RTN","RORUPR1",146,0)
 ;
"RTN","RORUPR1",147,0)
 ; Return Values:
"RTN","RORUPR1",148,0)
 ;        0  Ok
"RTN","RORUPR1",149,0)
 ;       <0  Error code
"RTN","RORUPR1",150,0)
 ;
"RTN","RORUPR1",151,0)
LOADRULE(RULENAME,REGIEN,LEVEL) ;
"RTN","RORUPR1",152,0)
 ;--- Quit if the rule has already been loaded
"RTN","RORUPR1",153,0)
 I $D(@RORUPDPI@(3,RULENAME))  D  Q 0
"RTN","RORUPR1",154,0)
 . S @RORUPDPI@(3,RULENAME,2,REGIEN)=""
"RTN","RORUPR1",155,0)
 ;---
"RTN","RORUPR1",156,0)
 N DATELMT,DEPRLC,EXPR,FILE,I,IENS,RORBUF,RORMSG,RULIEN,TMP
"RTN","RORUPR1",157,0)
 ;--- Load the rule data
"RTN","RORUPR1",158,0)
 ;D FIND^DIC(798.2,,"@;1;2I","X",RULENAME,2,"B",,,"RORBUF","RORMSG")
"RTN","RORUPR1",159,0)
 D FIND^DIC(798.2,,"@;1;2I;7I","KO",RULENAME,2,,,,"RORBUF","RORMSG") ;load the new coding system internal value
"RTN","RORUPR1",160,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORUPR1",161,0)
 Q:$G(RORBUF("DILIST",0))<1 $$ERROR^RORERR(-3,,RULENAME)
"RTN","RORUPR1",162,0)
 Q:$G(RORBUF("DILIST",0))>1 $$ERROR^RORERR(-4,,RULENAME)
"RTN","RORUPR1",163,0)
 S RULIEN=+RORBUF("DILIST",2,1),IENS=","_RULIEN_","
"RTN","RORUPR1",164,0)
 S FILE=+RORBUF("DILIST","ID",1,2)
"RTN","RORUPR1",165,0)
 ;--- Put the rule data into the temporary global
"RTN","RORUPR1",166,0)
 S @RORUPDPI@(1,FILE,"S",RULENAME)=""
"RTN","RORUPR1",167,0)
 S @RORUPDPI@(3,RULENAME)=RULIEN_U_FILE_"^^"_'$G(LEVEL)
"RTN","RORUPR1",168,0)
 S RC=$$PARSER^RORUPEX(FILE,RORBUF("DILIST","ID",1,1),.EXPR)
"RTN","RORUPR1",169,0)
 Q:RC<0 RC
"RTN","RORUPR1",170,0)
 S @RORUPDPI@(3,RULENAME,1)=EXPR
"RTN","RORUPR1",171,0)
 S @RORUPDPI@(3,RULENAME,2,REGIEN)=""
"RTN","RORUPR1",172,0)
 S @RORUPDPI@(3,RULENAME,4)=RORBUF("DILIST","ID",1,7) ;store the coding system
"RTN","RORUPR1",173,0)
 M @RORUPDPI@(1,FILE,"F")=EXPR("F")
"RTN","RORUPR1",174,0)
 S:'$G(LEVEL) RORUPD("LM1",RULENAME)=""
"RTN","RORUPR1",175,0)
 M @RORUPDPI@(4)=EXPR("L")
"RTN","RORUPR1",176,0)
 ;--- Load the rules that this rule depends on
"RTN","RORUPR1",177,0)
 S DEPRLC=""
"RTN","RORUPR1",178,0)
 F  S DEPRLC=$O(EXPR("R",DEPRLC))  Q:DEPRLC=""  D  Q:RC<0
"RTN","RORUPR1",179,0)
 . S RC=$$LOADRULE(DEPRLC,REGIEN,$G(LEVEL)+1)
"RTN","RORUPR1",180,0)
 . S:RC'<0 @RORUPDPI@(3,RULENAME,3,DEPRLC)=""
"RTN","RORUPR1",181,0)
 Q:RC<0 RC
"RTN","RORUPR1",182,0)
 ;--- Load a list of additional data elements
"RTN","RORUPR1",183,0)
 K EXPR,RORBUF,RORMSG
"RTN","RORUPR1",184,0)
 D LIST^DIC(798.26,IENS,"@;.01I;1I",,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUPR1",185,0)
 S RC=$$DBS^RORERR("RORMSG",-9)  Q:RC<0 RC
"RTN","RORUPR1",186,0)
 S I=""
"RTN","RORUPR1",187,0)
 F  S I=$O(RORBUF("DILIST","ID",I))  Q:I=""  D
"RTN","RORUPR1",188,0)
 . S DATELMT=RORBUF("DILIST","ID",I,.01)
"RTN","RORUPR1",189,0)
 . S TMP=$G(RORBUF("DILIST","ID",I,1))  S:TMP="" TMP="EI"
"RTN","RORUPR1",190,0)
 . S:TMP["E" @RORUPDPI@(1,FILE,"F",DATELMT,"E")=""
"RTN","RORUPR1",191,0)
 . S:TMP["I" @RORUPDPI@(1,FILE,"F",DATELMT,"I")=""
"RTN","RORUPR1",192,0)
 Q 0
"RTN","RORUPR1",193,0)
 ;
"RTN","RORUPR1",194,0)
 ;***** LOADS AND PREPARES THE METADATA
"RTN","RORUPR1",195,0)
METADATA() ;
"RTN","RORUPR1",196,0)
 N API,DATELMT,DEFL,DIERR,FILE,I,IENS,IS,PIF,RC,ROOT,RORBUF,RORMSG,TMP,VT
"RTN","RORUPR1",197,0)
 S RC=$$FILETREE()  Q:RC<0 RC
"RTN","RORUPR1",198,0)
 S DEFL="@;.02I;1I;4I;4.1;4.2;6I"
"RTN","RORUPR1",199,0)
 ;--- Load and process the metadata
"RTN","RORUPR1",200,0)
 S FILE="",RC=0
"RTN","RORUPR1",201,0)
 F  S FILE=$O(RORUPD("SR",FILE))  Q:FILE=""  D  Q:RC<0
"RTN","RORUPR1",202,0)
 . S IENS=","_FILE_",",PIF=$NA(@RORUPDPI@(1,FILE))
"RTN","RORUPR1",203,0)
 . ;--- Global root of the file
"RTN","RORUPR1",204,0)
 . S RORUPD("ROOT",FILE)=$$ROOT^DILFD(FILE,,1)
"RTN","RORUPR1",205,0)
 . ;--- Associate data elements with APIs
"RTN","RORUPR1",206,0)
 . S DATELMT=""
"RTN","RORUPR1",207,0)
 . F  S DATELMT=$O(@PIF@("F",DATELMT))  Q:DATELMT=""  D  Q:RC<0
"RTN","RORUPR1",208,0)
 . . ;--- Find and load defintion of the data element
"RTN","RORUPR1",209,0)
 . . K RORBUF,RORMSG
"RTN","RORUPR1",210,0)
 . . D FIND^DIC(799.22,IENS,DEFL,"X",DATELMT,,"C",,,"RORBUF","RORMSG")
"RTN","RORUPR1",211,0)
 . . I $G(DIERR)  D  Q
"RTN","RORUPR1",212,0)
 . . . S RC=$$DBS^RORERR("RORMSG",-9,,,799.22,IENS)
"RTN","RORUPR1",213,0)
 . . ;--- Check if search on this element is supported
"RTN","RORUPR1",214,0)
 . . S API=+$G(RORBUF("DILIST","ID",1,1))
"RTN","RORUPR1",215,0)
 . . I 'API  D  Q
"RTN","RORUPR1",216,0)
 . . . S RC=$$ERROR^RORERR(-64,,,,FILE,DATELMT)
"RTN","RORUPR1",217,0)
 . . ;--- Store the field number (if necessary)
"RTN","RORUPR1",218,0)
 . . I API=1  D  S RORUPD("SR",FILE,"F",API,DATELMT)=TMP
"RTN","RORUPR1",219,0)
 . . . S TMP=$G(RORBUF("DILIST","ID",1,6))
"RTN","RORUPR1",220,0)
 . . I API=3,FILE=45 D  Q
"RTN","RORUPR1",221,0)
 . . . S RORUPD("SR",45,"F",3,DATELMT)=0
"RTN","RORUPR1",222,0)
 . . . S RORUPD("SR",45,"F",3,DATELMT,"I")="",RC=0
"RTN","RORUPR1",223,0)
 . . ;--- Associate the data element with the API
"RTN","RORUPR1",224,0)
 . . S VT=$G(RORBUF("DILIST","ID",1,4)),RC=0
"RTN","RORUPR1",225,0)
 . . F I="E","I"  I $D(@PIF@("F",DATELMT,I))  D  Q:RC<0
"RTN","RORUPR1",226,0)
 . . . ;--- Check if type of the requested value is supported
"RTN","RORUPR1",227,0)
 . . . I VT'[I  D  Q
"RTN","RORUPR1",228,0)
 . . . . S TMP=$$EXTERNAL^DILFD(799.22,4,,I,"RORMSG")
"RTN","RORUPR1",229,0)
 . . . . S RC=$$ERROR^RORERR(-65,,,,FILE,DATELMT,TMP)
"RTN","RORUPR1",230,0)
 . . . ;--- Add the API-Element pair to the list
"RTN","RORUPR1",231,0)
 . . . S TMP=$G(RORBUF("DILIST","ID",1,$$VTFN(I)))
"RTN","RORUPR1",232,0)
 . . . S RORUPD("SR",FILE,"F",API,DATELMT,I)=TMP
"RTN","RORUPR1",233,0)
 . Q:RC<0
"RTN","RORUPR1",234,0)
 . ;--- Add required elements (if any) to the list
"RTN","RORUPR1",235,0)
 . K RORBUF,RORMSG
"RTN","RORUPR1",236,0)
 . D FIND^DIC(799.22,IENS,DEFL,"X",1,,"AR",,,"RORBUF","RORMSG")
"RTN","RORUPR1",237,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPR1",238,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,799.22,IENS)
"RTN","RORUPR1",239,0)
 . S IS=""
"RTN","RORUPR1",240,0)
 . F  S IS=$O(RORBUF("DILIST","ID",IS))  Q:IS=""  D
"RTN","RORUPR1",241,0)
 . . S DATELMT=+$G(RORBUF("DILIST","ID",IS,.02))  Q:'DATELMT
"RTN","RORUPR1",242,0)
 . . S API=+$G(RORBUF("DILIST","ID",IS,1))        Q:'API
"RTN","RORUPR1",243,0)
 . . S VT=$G(RORBUF("DILIST","ID",IS,4))
"RTN","RORUPR1",244,0)
 . . F I="E","I"  D:VT[I
"RTN","RORUPR1",245,0)
 . . . S TMP=$G(RORBUF("DILIST","ID",IS,$$VTFN(I)))
"RTN","RORUPR1",246,0)
 . . . S RORUPD("SR",FILE,"F",API,DATELMT,I)=TMP
"RTN","RORUPR1",247,0)
 . . ;--- Store the field number (if necessary)
"RTN","RORUPR1",248,0)
 . . I API=1  D  S RORUPD("SR",FILE,"F",API,DATELMT)=TMP
"RTN","RORUPR1",249,0)
 . . . S TMP=$G(RORBUF("DILIST","ID",IS,6))
"RTN","RORUPR1",250,0)
 . ;--- Compile a list of fields (separated by ';') for the GETS^DIQ
"RTN","RORUPR1",251,0)
 . Q:$D(RORUPD("SR",FILE,"F",1))<10
"RTN","RORUPR1",252,0)
 . S (DATELMT,RORBUF)=""
"RTN","RORUPR1",253,0)
 . F  S DATELMT=$O(RORUPD("SR",FILE,"F",1,DATELMT))  Q:DATELMT=""  D
"RTN","RORUPR1",254,0)
 . . S TMP=+$G(RORUPD("SR",FILE,"F",1,DATELMT))
"RTN","RORUPR1",255,0)
 . . S:TMP>0 RORBUF=RORBUF_";"_TMP
"RTN","RORUPR1",256,0)
 . S RORUPD("SR",FILE,"F",1)=$S(RORBUF'="":$P(RORBUF,";",2,999),1:"")
"RTN","RORUPR1",257,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPR1",258,0)
 ;
"RTN","RORUPR1",259,0)
 ;***** RETURNS FIELD NUMBER OF ADDITIONAL DATA
"RTN","RORUPR1",260,0)
VTFN(VT) ;
"RTN","RORUPR1",261,0)
 Q $S(VT="E":4.1,1:4.2)
"RTN","RORUTL07")
0^14^B15158256^B12994069
"RTN","RORUTL07",1,0)
RORUTL07 ;HCIOFO/SG - TEST ENTRY POINTS ; 26 May 2015  3:44 PM
"RTN","RORUTL07",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**21,26**;Feb 17, 2006;Build 53
"RTN","RORUTL07",3,0)
 ;
"RTN","RORUTL07",4,0)
 Q
"RTN","RORUTL07",5,0)
 ;******************************************************************************
"RTN","RORUTL07",6,0)
 ;******************************************************************************
"RTN","RORUTL07",7,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL07",8,0)
 ;        
"RTN","RORUTL07",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL07",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL07",11,0)
 ;ROR*1.5*26   APR  2015   T KOPP       UPDATE updated to ask for start date
"RTN","RORUTL07",12,0)
 ;                                      and set IO variable 
"RTN","RORUTL07",13,0)
 ;
"RTN","RORUTL07",14,0)
 ;******************************************************************************
"RTN","RORUTL07",15,0)
 ;******************************************************************************
"RTN","RORUTL07",16,0)
 ;
"RTN","RORUTL07",17,0)
 ;***** DISPLAYS THE ERRORS
"RTN","RORUTL07",18,0)
ERROR ;
"RTN","RORUTL07",19,0)
 D DSPSTK^RORERR()
"RTN","RORUTL07",20,0)
 Q
"RTN","RORUTL07",21,0)
 ;
"RTN","RORUTL07",22,0)
 ;***** DATA EXTRACTION TEST ENTRY POINT
"RTN","RORUTL07",23,0)
EXTRACT ;
"RTN","RORUTL07",24,0)
 N RORERRDL      ; Default error location
"RTN","RORUTL07",25,0)
 N RORERROR      ; Error processing data
"RTN","RORUTL07",26,0)
 N RORPARM       ; Application parameters
"RTN","RORUTL07",27,0)
 ;
"RTN","RORUTL07",28,0)
 N RC,REGLST,REGNAME,SDT
"RTN","RORUTL07",29,0)
 W !,"DATA EXTRACTION & TRANSMISSION IN DEBUG MODE",!
"RTN","RORUTL07",30,0)
 D KILL^XUSCLEAN
"RTN","RORUTL07",31,0)
 S RORPARM("DEBUG")=2
"RTN","RORUTL07",32,0)
 S RORPARM("ERR")=1
"RTN","RORUTL07",33,0)
 D CLEAR^RORERR("EXTRACT^RORUTL07")
"RTN","RORUTL07",34,0)
 ;--- Select registries
"RTN","RORUTL07",35,0)
 Q:$$SELREG(.REGLST)'>0
"RTN","RORUTL07",36,0)
 ;--- Request a start date
"RTN","RORUTL07",37,0)
 S SDT=$$GETSDT()                            G:SDT<0 ERROR
"RTN","RORUTL07",38,0)
 ;--- Extract the registry data
"RTN","RORUTL07",39,0)
 S RC=$$EXTRACT^ROREXT(.REGLST,SDT,,"S")  G:RC<0 ERROR
"RTN","RORUTL07",40,0)
 Q
"RTN","RORUTL07",41,0)
 ;
"RTN","RORUTL07",42,0)
 ;***** REQESTS A START DATE FROM A USER
"RTN","RORUTL07",43,0)
 ;
"RTN","RORUTL07",44,0)
 ; Return Values:
"RTN","RORUTL07",45,0)
 ;       <0  Error Code
"RTN","RORUTL07",46,0)
 ;       ""  No start date (default)
"RTN","RORUTL07",47,0)
 ;       >0  Start date
"RTN","RORUTL07",48,0)
 ;
"RTN","RORUTL07",49,0)
GETSDT() ;
"RTN","RORUTL07",50,0)
 ;;If you enter an empty string then the individual start date
"RTN","RORUTL07",51,0)
 ;;(from the registry record) will be used for each patient.
"RTN","RORUTL07",52,0)
 ;
"RTN","RORUTL07",53,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,RC,X,Y
"RTN","RORUTL07",54,0)
 S DIR(0)="DO^:DT:EX"
"RTN","RORUTL07",55,0)
 S DIR("A")="Start date for data extraction"
"RTN","RORUTL07",56,0)
 F X=1:1  S Y=$P($T(GETSDT+X),";;",2)  Q:Y=""  S DIR("?",X)=Y
"RTN","RORUTL07",57,0)
 S DIR("?")="This response must be a date."
"RTN","RORUTL07",58,0)
 D ^DIR
"RTN","RORUTL07",59,0)
 S RC=$S($D(DTOUT):-72,$D(DUOUT):-71,1:0)
"RTN","RORUTL07",60,0)
 Q $S(RC<0:RC,1:$G(Y))
"RTN","RORUTL07",61,0)
 ;
"RTN","RORUTL07",62,0)
 ;***** SELECTS REGISTRIES FROM THE FILE #798.1
"RTN","RORUTL07",63,0)
 ;
"RTN","RORUTL07",64,0)
 ; .REGLST       Reference to a local variable for the list of
"RTN","RORUTL07",65,0)
 ;               registry names (subscripts) and IENs (values)
"RTN","RORUTL07",66,0)
 ;
"RTN","RORUTL07",67,0)
 ; Return Values:
"RTN","RORUTL07",68,0)
 ;       <0  Error code
"RTN","RORUTL07",69,0)
 ;        0  Nothing selected
"RTN","RORUTL07",70,0)
 ;       >0  Number of selected registries
"RTN","RORUTL07",71,0)
 ;       ""  Timeout or "^"
"RTN","RORUTL07",72,0)
 ;
"RTN","RORUTL07",73,0)
SELREG(REGLST) ;
"RTN","RORUTL07",74,0)
 N CNT,DA,DIC,DLAYGO,DTOUT,DUOUT,X,Y
"RTN","RORUTL07",75,0)
 K REGLST  S CNT=0
"RTN","RORUTL07",76,0)
 ;--- Select a registry
"RTN","RORUTL07",77,0)
 S DIC=798.1,DIC(0)="AENQ"
"RTN","RORUTL07",78,0)
 S DIC("A")="Select a Registry: "
"RTN","RORUTL07",79,0)
 F  D  Q:Y'>0  S REGLST($P(Y,U,2))=+Y,CNT=CNT+1
"RTN","RORUTL07",80,0)
 . D ^DIC
"RTN","RORUTL07",81,0)
 W !
"RTN","RORUTL07",82,0)
 Q $S($D(DTOUT)!$D(DUOUT):"",1:CNT)
"RTN","RORUTL07",83,0)
 ;
"RTN","RORUTL07",84,0)
 ;***** REGISTRY UPDATE TEST ENTRY POINT
"RTN","RORUTL07",85,0)
UPDATE ;
"RTN","RORUTL07",86,0)
 N RORERRDL      ; Default error location
"RTN","RORUTL07",87,0)
 N RORERROR      ; Error processing data
"RTN","RORUTL07",88,0)
 N RORPARM       ; Application parameters
"RTN","RORUTL07",89,0)
 ;
"RTN","RORUTL07",90,0)
 N RC,REGLST,REGNAME,DSBEG
"RTN","RORUTL07",91,0)
 D HOME^%ZIS
"RTN","RORUTL07",92,0)
 W !,"REGISTRY UPDATE IN DEBUG MODE",!
"RTN","RORUTL07",93,0)
 D KILL^XUSCLEAN
"RTN","RORUTL07",94,0)
 S RORPARM("DEBUG")=2
"RTN","RORUTL07",95,0)
 S RORPARM("ERR")=1
"RTN","RORUTL07",96,0)
 D CLEAR^RORERR("UPDATE^RORUTL07")
"RTN","RORUTL07",97,0)
 ;--- Select registries
"RTN","RORUTL07",98,0)
 Q:$$SELREG(.REGLST)'>0
"RTN","RORUTL07",99,0)
 ;--- Request a start date
"RTN","RORUTL07",100,0)
 S DSBEG=$$GETSDT()
"RTN","RORUTL07",101,0)
 Q:DSBEG<0
"RTN","RORUTL07",102,0)
 ;--- Update the registry
"RTN","RORUTL07",103,0)
 S RC=$$UPDATE^RORUPD(.REGLST)  G:RC<0 ERROR
"RTN","RORUTL07",104,0)
 Q
"RTN","RORUTL07",105,0)
  ;DEFINE ENTRY POINT TO CLEAR AND RESTART REGISTRY UPDATE
"RTN","RORUTL07",106,0)
DEL(REGLST) ;
"RTN","RORUTL07",107,0)
 ;Select new registry to delete
"RTN","RORUTL07",108,0)
 ;delete any records in 798 for that registry
"RTN","RORUTL07",109,0)
 ;delete enable protocols,hdt,registry updated until
"RTN","RORUTL07",110,0)
 N REGNAME,REGIEN,IEN,DA,DIK,RORFDA,IENS,RORMSG,DIERR
"RTN","RORUTL07",111,0)
 N FILE,ROOT,IX,RORPARM,FLD
"RTN","RORUTL07",112,0)
 S (REGNAME,IEN)=""
"RTN","RORUTL07",113,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORUTL07",114,0)
 F  S REGNAME=$O(REGLST(REGNAME)) Q:REGNAME=""  D
"RTN","RORUTL07",115,0)
 . S REGIEN=$$REGIEN^RORUTL02(REGNAME) Q:REGIEN=""
"RTN","RORUTL07",116,0)
 . ; Only local registries
"RTN","RORUTL07",117,0)
 . Q:$P($G(^ROR(798.1,REGIEN,0)),U,11)
"RTN","RORUTL07",118,0)
 . S IENS=REGIEN_","
"RTN","RORUTL07",119,0)
 . F FLD=6.1,6.2,7,10,13,13.1,19.1,19.2,19.3,21.01,21.04,21.05 D
"RTN","RORUTL07",120,0)
 . . S RORFDA(798.1,IENS,FLD)="@"
"RTN","RORUTL07",121,0)
 . S RORFDA(798.1,IENS,1)=2850101
"RTN","RORUTL07",122,0)
 . D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORUTL07",123,0)
 . I $G(DIERR) W !!,"<<ERROR - restoring "_REGNAME_" registry parameters>>" Q
"RTN","RORUTL07",124,0)
 . F  S IEN=$O(^RORDATA(798,"AC",REGIEN,IEN)) Q:IEN=""  D
"RTN","RORUTL07",125,0)
 . . N DA,DIK
"RTN","RORUTL07",126,0)
 . . S DIK=$$ROOT^DILFD(798),DA=IEN  D ^DIK
"RTN","RORUTL07",127,0)
 . . W !,"<< "_IEN_" >> Deleted"
"RTN","RORUTL07",128,0)
 Q
"RTN","RORUTL07",129,0)
 ;
"RTN","RORUTL11")
0^15^B4300869^B4346474
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ;15 Aug 2013  11:31 AM
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17,18,20,19,21,22,24,27,26**;Feb 17, 2006;Build 53
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;
"RTN","RORUTL11",15,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",16,0)
 ;
"RTN","RORUTL11",17,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version 
"RTN","RORUTL11",18,0)
 ;
"RTN","RORUTL11",19,0)
 ;ROR*1.5*18   MAY 2012    C RAY        Updated version 
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ;ROR*1.5*20   DEC 2012    C RAY        Updated version
"RTN","RORUTL11",22,0)
 ;
"RTN","RORUTL11",23,0)
 ;ROR*1.5*19   APR 2012    K GUPTA      Updated version
"RTN","RORUTL11",24,0)
 ;                                    
"RTN","RORUTL11",25,0)
 ;ROR*1.5*21   AUG 2013    T KOPP       Updated version
"RTN","RORUTL11",26,0)
 ;
"RTN","RORUTL11",27,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Updated version 
"RTN","RORUTL11",28,0)
 ;
"RTN","RORUTL11",29,0)
 ;ROR*1.5*24   DEC 2014    T KOPP       Updated version       
"RTN","RORUTL11",30,0)
 ;                       
"RTN","RORUTL11",31,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Updated version                    
"RTN","RORUTL11",32,0)
 ;                       
"RTN","RORUTL11",33,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Updated version                    
"RTN","RORUTL11",34,0)
 ;******************************************************************************
"RTN","RORUTL11",35,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",36,0)
 ;
"RTN","RORUTL11",37,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",38,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",39,0)
 ;         
"RTN","RORUTL11",40,0)
 ;******************************************************************************
"RTN","RORUTL11",41,0)
 Q
"RTN","RORUTL11",42,0)
 ;
"RTN","RORUTL11",43,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",44,0)
 ;
"RTN","RORUTL11",45,0)
 ; Return Values:
"RTN","RORUTL11",46,0)
 ;       <0  Error code
"RTN","RORUTL11",47,0)
 ;        0  Ok
"RTN","RORUTL11",48,0)
 ;
"RTN","RORUTL11",49,0)
RNDXACL() ;
"RTN","RORUTL11",50,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",51,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",52,0)
 S REGIEN=0
"RTN","RORUTL11",53,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",54,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",55,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",56,0)
 Q 0
"RTN","RORUTL11",57,0)
 ;
"RTN","RORUTL11",58,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",59,0)
 ;
"RTN","RORUTL11",60,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",61,0)
 ;
"RTN","RORUTL11",62,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",63,0)
 ;
"RTN","RORUTL11",64,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",65,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",66,0)
 ;                 I  IRM Only
"RTN","RORUTL11",67,0)
 ;
"RTN","RORUTL11",68,0)
 ; Return Values:
"RTN","RORUTL11",69,0)
 ;       <0  Error code
"RTN","RORUTL11",70,0)
 ;        0  Ok
"RTN","RORUTL11",71,0)
 ;       >0  Access denied
"RTN","RORUTL11",72,0)
 ;
"RTN","RORUTL11",73,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",74,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",75,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",76,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",77,0)
 ;---
"RTN","RORUTL11",78,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",79,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",80,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",81,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",82,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",83,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",84,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",85,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",86,0)
 . S ACCESS=1
"RTN","RORUTL11",87,0)
 ;---
"RTN","RORUTL11",88,0)
 D ACVIOLTN^RORLOG(-91,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",89,0)
 Q 1
"RTN","RORUTL11",90,0)
 ;
"RTN","RORUTL11",91,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",92,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",93,0)
 ;
"RTN","RORUTL11",94,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",95,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",96,0)
 ;been installed yet.
"RTN","RORUTL11",97,0)
 ;
"RTN","RORUTL11",98,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",99,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",100,0)
 ;
"RTN","RORUTL11",101,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",102,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",103,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",104,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",105,0)
 ;
"RTN","RORUTL11",106,0)
VERSRV(VAL) ;
"RTN","RORUTL11",107,0)
 S VAL="1.5.26"
"RTN","RORUTL11",108,0)
 Q
"RTN","RORUTL15")
0^16^B58131600^B55128247
"RTN","RORUTL15",1,0)
RORUTL15 ;HCIOFO/BH,SG - PHARMACY DATA SEARCH (TOOLS) ;12/21/05 11:11am
"RTN","RORUTL15",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,26**;Feb 17, 2006;Build 53
"RTN","RORUTL15",3,0)
 ;
"RTN","RORUTL15",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL15",5,0)
 ;
"RTN","RORUTL15",6,0)
 ; #2400         OCL^PSOORRL and OEL^PSOORRL (controlled)
"RTN","RORUTL15",7,0)
 ; #4533         ARWS^PSS50 (supported)
"RTN","RORUTL15",8,0)
 ; #4543         IEN^PSN50P65 (supported)
"RTN","RORUTL15",9,0)
 ; #4549         ZERO^PSS52P6 (supported)
"RTN","RORUTL15",10,0)
 ; #4826         PSS436^PSS55 (supported)
"RTN","RORUTL15",11,0)
 ;
"RTN","RORUTL15",12,0)
 ;******************************************************************************
"RTN","RORUTL15",13,0)
 ;******************************************************************************
"RTN","RORUTL15",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL15",15,0)
 ;        
"RTN","RORUTL15",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL15",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL15",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Patient Med History Report: retrieve 
"RTN","RORUTL15",19,0)
 ;                                      #refills remaining and add to the 
"RTN","RORUTL15",20,0)
 ;                                      'callback' function call
"RTN","RORUTL15",21,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORUTL15",22,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORUTL15",23,0)
 ;                                      below is referring to path 13.
"RTN","RORUTL15",24,0)
 ;
"RTN","RORUTL15",25,0)
 ;ROR*1.5*26   JUN 2015    T KOPP       Callback function for SVR screening
"RTN","RORUTL15",26,0)
 ;                                      does not require the # of refills as a
"RTN","RORUTL15",27,0)
 ;                                      parameter for the Patient Med History
"RTN","RORUTL15",28,0)
 ;                                      Report, so a check is made for callback
"RTN","RORUTL15",29,0)
 ;                                      entry point RXOCB to prevent adding it.
"RTN","RORUTL15",30,0)
 ;******************************************************************************
"RTN","RORUTL15",31,0)
 ;******************************************************************************
"RTN","RORUTL15",32,0)
 Q
"RTN","RORUTL15",33,0)
 ;
"RTN","RORUTL15",34,0)
 ;***** DOUBLE-CHECKS THE OUTPATIENT RX (ORDER, REFILLS AND PARTIALS)
"RTN","RORUTL15",35,0)
 ;
"RTN","RORUTL15",36,0)
 ; STDT          Start Date (FileMan)
"RTN","RORUTL15",37,0)
 ; ENDT          End Date   (FileMan)
"RTN","RORUTL15",38,0)
 ;
"RTN","RORUTL15",39,0)
 ; [.NREF]       Number of refills is returned via this parameter
"RTN","RORUTL15",40,0)
 ;
"RTN","RORUTL15",41,0)
 ; [.NPAR]       Nubmer of partials is returned via this parameter
"RTN","RORUTL15",42,0)
 ;
"RTN","RORUTL15",43,0)
 ; The ^TMP("PS",$J) node must be populated by the OEL^PSOORRL
"RTN","RORUTL15",44,0)
 ; before calling this function.
"RTN","RORUTL15",45,0)
 ;
"RTN","RORUTL15",46,0)
 ; Return Values:
"RTN","RORUTL15",47,0)
 ;        0  Ok
"RTN","RORUTL15",48,0)
 ;        1  Skip the order
"RTN","RORUTL15",49,0)
 ;
"RTN","RORUTL15",50,0)
DTCHECK(STDT,ENDT,NREF,NPAR) ;
"RTN","RORUTL15",51,0)
 N IRP,RXDT,SKIP
"RTN","RORUTL15",52,0)
 S RXDT=+$P($G(^TMP("PS",$J,"RXN",0)),U,6),(NREF,NPAR)=0
"RTN","RORUTL15",53,0)
 S SKIP=(RXDT<STDT)!(RXDT'<ENDT)
"RTN","RORUTL15",54,0)
 ;--- Refills
"RTN","RORUTL15",55,0)
 S IRP=0
"RTN","RORUTL15",56,0)
 F  S IRP=$O(^TMP("PS",$J,"REF",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",57,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"REF",IRP,0)),U)
"RTN","RORUTL15",58,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NREF=NREF+1  Q
"RTN","RORUTL15",59,0)
 . K ^TMP("PS",$J,"REF",IRP)
"RTN","RORUTL15",60,0)
 ;--- Partials
"RTN","RORUTL15",61,0)
 S IRP=0
"RTN","RORUTL15",62,0)
 F  S IRP=$O(^TMP("PS",$J,"PAR",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",63,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"PAR",IRP,0)),U)
"RTN","RORUTL15",64,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NPAR=NPAR+1  Q
"RTN","RORUTL15",65,0)
 . K ^TMP("PS",$J,"PAR",IRP)
"RTN","RORUTL15",66,0)
 ;---
"RTN","RORUTL15",67,0)
 Q SKIP
"RTN","RORUTL15",68,0)
 ;
"RTN","RORUTL15",69,0)
 ;***** PROCESSES THE LIST OF PRESELECTED PHARMACY ORDERS
"RTN","RORUTL15",70,0)
 ;
"RTN","RORUTL15",71,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",72,0)
 ;
"RTN","RORUTL15",73,0)
 ; RORFLAGS      Flags to control processing
"RTN","RORUTL15",74,0)
 ;
"RTN","RORUTL15",75,0)
 ; ROR8LST       Closed root of the list of preselected orders
"RTN","RORUTL15",76,0)
 ;
"RTN","RORUTL15",77,0)
 ; Return Values:
"RTN","RORUTL15",78,0)
 ;       <0  Error code
"RTN","RORUTL15",79,0)
 ;        0  No orders have been found
"RTN","RORUTL15",80,0)
 ;       >0  Number of orders
"RTN","RORUTL15",81,0)
 ;
"RTN","RORUTL15",82,0)
PROCESS(PTIEN,RORFLAGS,ROR8LST) ;
"RTN","RORUTL15",83,0)
 N DRUGIEN,IRX,IVM,LOADEXT,ORDDATE,ORDER,ORDIEN,ORDFLG,RC,ROR8SET,RORLST,RORTMP,RORTS,RORXCNT,TMP,NUMREF
"RTN","RORUTL15",84,0)
 S LOADEXT=(RORFLAGS["E")
"RTN","RORUTL15",85,0)
 S (RC,RORXCNT)=0
"RTN","RORUTL15",86,0)
 S RORTMP=$$ALLOC^RORTMP(.RORTS)
"RTN","RORUTL15",87,0)
 ;
"RTN","RORUTL15",88,0)
 ;=== Determine the storage method (default or callback)
"RTN","RORUTL15",89,0)
 I $G(ROR8DST("RORCB"))?2"$"1.8UN1"^"1.8UN  D
"RTN","RORUTL15",90,0)
 . ;standard callback setup
"RTN","RORUTL15",91,0)
 . S ROR8SET="S RC="_ROR8DST("RORCB")_"(.ROR8DST,ORDER"
"RTN","RORUTL15",92,0)
 . S ROR8SET=ROR8SET_",ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE)"
"RTN","RORUTL15",93,0)
 . ;Patch 11/13: Variable 'RORX011' is set in routine RORX011 for the
"RTN","RORUTL15",94,0)
 . ;Patient Medications History report.  If set, add # refills
"RTN","RORUTL15",95,0)
 . ;remaining (NUMREF) to the callback parameter list.
"RTN","RORUTL15",96,0)
 . I $G(RORX011),$G(ROR8DST("RORCB"))'["RXOCB" S ROR8SET=$E(ROR8SET,1,$L(ROR8SET)-1)_",$G(NUMREF))"
"RTN","RORUTL15",97,0)
 . ;---
"RTN","RORUTL15",98,0)
 . S ROR8DST("RORDFN")=PTIEN
"RTN","RORUTL15",99,0)
 . S ROR8DST("ROREDT")=ROREDT
"RTN","RORUTL15",100,0)
 . S ROR8DST("RORFLAGS")=RORFLAGS
"RTN","RORUTL15",101,0)
 . S ROR8DST("RORSDT")=RORSDT
"RTN","RORUTL15",102,0)
 E  S ROR8SET=""  K @ROR8DST
"RTN","RORUTL15",103,0)
 ;
"RTN","RORUTL15",104,0)
 ;=== Process the list of preselected orders
"RTN","RORUTL15",105,0)
 S (IRX,RC)=0
"RTN","RORUTL15",106,0)
 F  S IRX=$O(@ROR8LST@(IRX))  Q:'IRX  D  Q:RC
"RTN","RORUTL15",107,0)
 . S ORDFLG=$P(@ROR8LST@(IRX),U)
"RTN","RORUTL15",108,0)
 . S TMP=@ROR8LST@(IRX,0)
"RTN","RORUTL15",109,0)
 . S ORDER=$P(TMP,U),ORDDATE=$P(TMP,U,15)
"RTN","RORUTL15",110,0)
 . ;Patch 11/13: get #refills remaining for Patient Medication History report:
"RTN","RORUTL15",111,0)
 . I $G(RORX011) S NUMREF=$P(TMP,U,5)
"RTN","RORUTL15",112,0)
 . ;--- Get the order details
"RTN","RORUTL15",113,0)
 . K ^TMP("PS",$J)
"RTN","RORUTL15",114,0)
 . D OEL^PSOORRL(PTIEN,ORDER)
"RTN","RORUTL15",115,0)
 . Q:$D(^TMP("PS",$J))<10
"RTN","RORUTL15",116,0)
 . ;=== Inpatient and Outpatient Medications
"RTN","RORUTL15",117,0)
 . I ORDFLG'["V"  D  Q
"RTN","RORUTL15",118,0)
 . . ;--- Double-check the dates for outpatient orders
"RTN","RORUTL15",119,0)
 . . I ORDFLG["O"  Q:$$DTCHECK(RORSDT,ROREDT)
"RTN","RORUTL15",120,0)
 . . ;--- Get the drug IEN in the DRUG file (#50)
"RTN","RORUTL15",121,0)
 . . S TMP=$G(^TMP("PS",$J,"DD",1,0)),DRUGIEN=+$P(TMP,U,3)
"RTN","RORUTL15",122,0)
 . . I DRUGIEN'>0  S DRUGIEN=+$P(TMP,U)  Q:DRUGIEN'>0
"RTN","RORUTL15",123,0)
 . . ;--- Process the order
"RTN","RORUTL15",124,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",125,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",126,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",127,0)
 . ;=== IV Medications
"RTN","RORUTL15",128,0)
 . S RORLST=$$ALLOC^RORTMP(.TMP),ORDIEN=+ORDER
"RTN","RORUTL15",129,0)
 . D
"RTN","RORUTL15",130,0)
 . . N IEN,ORDER  ; Workaround for the bug in the API
"RTN","RORUTL15",131,0)
 . . D PSS436^PSS55(PTIEN,ORDIEN,TMP)
"RTN","RORUTL15",132,0)
 . I $G(@RORLST@(0))'>0  D FREE^RORTMP(RORLST)  Q
"RTN","RORUTL15",133,0)
 . ;--- Process the additives
"RTN","RORUTL15",134,0)
 . S IVM=0
"RTN","RORUTL15",135,0)
 . F  S IVM=$O(@RORLST@(ORDIEN,"ADD",IVM))  Q:IVM'>0  D  Q:RC
"RTN","RORUTL15",136,0)
 . . ;--- IEN in the IV ADDITIVES file (#52.6)
"RTN","RORUTL15",137,0)
 . . S DRUGIEN=+$P($G(@RORLST@(ORDIEN,"ADD",IVM,.01)),U)
"RTN","RORUTL15",138,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",139,0)
 . . ;--- IEN in the DRUG file (#50)
"RTN","RORUTL15",140,0)
 . . D ZERO^PSS52P6(DRUGIEN,,,RORTS)
"RTN","RORUTL15",141,0)
 . . Q:$G(@RORTMP@(0))'>0
"RTN","RORUTL15",142,0)
 . . S DRUGIEN=+$P($G(@RORTMP@(DRUGIEN,1)),U)
"RTN","RORUTL15",143,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",144,0)
 . . ;--- Process the medication
"RTN","RORUTL15",145,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",146,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",147,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",148,0)
 . ;---
"RTN","RORUTL15",149,0)
 . D FREE^RORTMP(RORLST)
"RTN","RORUTL15",150,0)
 ;
"RTN","RORUTL15",151,0)
 ;===
"RTN","RORUTL15",152,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORUTL15",153,0)
 Q $S(RC<0:RC,1:RORXCNT)
"RTN","RORUTL15",154,0)
 ;
"RTN","RORUTL15",155,0)
 ;***** PROCESS THE MEDICATION (internal)
"RTN","RORUTL15",156,0)
 ;
"RTN","RORUTL15",157,0)
 ; DRUGIEN       IEN of the medication in the DRUG file (#50)
"RTN","RORUTL15",158,0)
 ;
"RTN","RORUTL15",159,0)
 ; The ROR8DST, ROR8RXS, ROR8SET, RORTMP, and RORTS variables
"RTN","RORUTL15",160,0)
 ; must be defined before calling this function.
"RTN","RORUTL15",161,0)
 ;
"RTN","RORUTL15",162,0)
 ; Return Values:
"RTN","RORUTL15",163,0)
 ;       <0  Error code
"RTN","RORUTL15",164,0)
 ;        0  Ok
"RTN","RORUTL15",165,0)
 ;        1  Skip this medication
"RTN","RORUTL15",166,0)
 ;        2  Skip this and all remaining medications
"RTN","RORUTL15",167,0)
 ;
"RTN","RORUTL15",168,0)
PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE) ;
"RTN","RORUTL15",169,0)
 N DRUGNAME,RC,ROR8BUF,SKIP,TMP
"RTN","RORUTL15",170,0)
 S RC=0
"RTN","RORUTL15",171,0)
 ;=== Load some drug data
"RTN","RORUTL15",172,0)
 D ARWS^PSS50(DRUGIEN,,RORTS)  K ROR8BUF
"RTN","RORUTL15",173,0)
 F TMP=2,20,25  S ROR8BUF(TMP)=$G(@RORTMP@(DRUGIEN,TMP))
"RTN","RORUTL15",174,0)
 S DRUGNAME=$G(@RORTMP@(DRUGIEN,.01))
"RTN","RORUTL15",175,0)
 S:DRUGNAME="" DRUGNAME="Unknown (IEN="_DRUGIEN_")"
"RTN","RORUTL15",176,0)
 K @RORTMP
"RTN","RORUTL15",177,0)
 ;--- Generic Drug
"RTN","RORUTL15",178,0)
 S ROR8DST("RORXGEN")=ROR8BUF(20)
"RTN","RORUTL15",179,0)
 I $P(ROR8BUF(20),U,2)=""  D  S $P(ROR8DST("RORXGEN"),U,2)=TMP
"RTN","RORUTL15",180,0)
 . S TMP="Unknown ("_(+ROR8BUF(20))_")"
"RTN","RORUTL15",181,0)
 ;--- VA Drug Class
"RTN","RORUTL15",182,0)
 S ROR8DST("RORXVCL")=""
"RTN","RORUTL15",183,0)
 D:ROR8BUF(2)'=""
"RTN","RORUTL15",184,0)
 . ;--- If the "national" drug class is the same, use its IEN
"RTN","RORUTL15",185,0)
 . I $P(ROR8BUF(25),U,2)=ROR8BUF(2)  D  Q
"RTN","RORUTL15",186,0)
 . . S ROR8DST("RORXVCL")=$P(ROR8BUF(25),U,1,2)
"RTN","RORUTL15",187,0)
 . ;--- Get the Drug Class IEN
"RTN","RORUTL15",188,0)
 . D IEN^PSN50P65(,ROR8BUF(2),RORTS)
"RTN","RORUTL15",189,0)
 . S TMP=+$G(@RORTMP@(0))
"RTN","RORUTL15",190,0)
 . S:TMP=1 ROR8DST("RORXVCL")=+$O(@RORTMP@(0))_U_ROR8BUF(2)
"RTN","RORUTL15",191,0)
 . K @RORTMP
"RTN","RORUTL15",192,0)
 ;
"RTN","RORUTL15",193,0)
 ;=== Check if the drug should be skipped
"RTN","RORUTL15",194,0)
 I ROR8RXS'="*"  S SKIP=0  D  Q:SKIP 1
"RTN","RORUTL15",195,0)
 . Q:$D(@ROR8RXS@(DRUGIEN))
"RTN","RORUTL15",196,0)
 . I $D(@ROR8RXS@("C"))>1  Q:$D(@ROR8RXS@("C",+ROR8DST("RORXVCL")))
"RTN","RORUTL15",197,0)
 . I $D(@ROR8RXS@("G"))>1  Q:$D(@ROR8RXS@("G",+ROR8DST("RORXGEN")))
"RTN","RORUTL15",198,0)
 . S SKIP=1
"RTN","RORUTL15",199,0)
 ;
"RTN","RORUTL15",200,0)
 ;--- Load additional drug data
"RTN","RORUTL15",201,0)
 ;D:LOADEXT
"RTN","RORUTL15",202,0)
 ;.
"RTN","RORUTL15",203,0)
 ;
"RTN","RORUTL15",204,0)
 ;=== Default output
"RTN","RORUTL15",205,0)
 I ROR8SET=""  D  Q 0
"RTN","RORUTL15",206,0)
 . S RORXCNT=RORXCNT+1
"RTN","RORUTL15",207,0)
 . M @ROR8DST@(RORXCNT)=^TMP("PS",$J)
"RTN","RORUTL15",208,0)
 . S TMP=ORDER_U_ORDFLG_U_ROR8DST("RORXGEN")
"RTN","RORUTL15",209,0)
 . S $P(TMP,U,5,6)=ROR8DST("RORXVCL")
"RTN","RORUTL15",210,0)
 . S @ROR8DST@(RORXCNT)=TMP
"RTN","RORUTL15",211,0)
 ;=== Callback function
"RTN","RORUTL15",212,0)
 X ROR8SET  ; (.ROR8DST,ORDER,ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE,special data for specific reports)
"RTN","RORUTL15",213,0)
 Q RC
"RTN","RORUTL15",214,0)
 ;
"RTN","RORUTL15",215,0)
 ;***** LOADS AND PRESELECTS PHARMACY ORDERS
"RTN","RORUTL15",216,0)
 ;
"RTN","RORUTL15",217,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",218,0)
 ;
"RTN","RORUTL15",219,0)
 ; FLAGS         Flags to control processing
"RTN","RORUTL15",220,0)
 ;
"RTN","RORUTL15",221,0)
 ; STDT          Start date (FileMan)
"RTN","RORUTL15",222,0)
 ; ENDT          End date   (FileMan)
"RTN","RORUTL15",223,0)
 ;
"RTN","RORUTL15",224,0)
 ; ROR8LST       Closed root for the list of preselected orders
"RTN","RORUTL15",225,0)
 ;
"RTN","RORUTL15",226,0)
 ; @ROR8LST@(
"RTN","RORUTL15",227,0)
 ;   Seq#,               Flags that describe the order (I,O,P, etc.)
"RTN","RORUTL15",228,0)
 ;     0)                Content of the ^TMP("PS",$J,i,0) node
"RTN","RORUTL15",229,0)
 ;                       returned by the OCL^PSOORRL (see the DBIA
"RTN","RORUTL15",230,0)
 ;                       #2400 for details).
"RTN","RORUTL15",231,0)
 ;
"RTN","RORUTL15",232,0)
 ; Return Values:
"RTN","RORUTL15",233,0)
 ;       <0  Error code
"RTN","RORUTL15",234,0)
 ;        0  No orders have been found
"RTN","RORUTL15",235,0)
 ;       >0  Number of orders
"RTN","RORUTL15",236,0)
 ;
"RTN","RORUTL15",237,0)
QUERY(PTIEN,FLAGS,STDT,ENDT,ROR8LST) ;
"RTN","RORUTL15",238,0)
 N IEN,IRX,ORDER,RXCNT,TMP,TYPE
"RTN","RORUTL15",239,0)
 K ^TMP("PS",$J),@ROR8LST
"RTN","RORUTL15",240,0)
 ;
"RTN","RORUTL15",241,0)
 ;--- Prepare the flags
"RTN","RORUTL15",242,0)
 I FLAGS["I"  D  S TYPE("U;I")="I"
"RTN","RORUTL15",243,0)
 . S:FLAGS["P" TYPE("P;I")="IP"
"RTN","RORUTL15",244,0)
 . S:FLAGS["V" TYPE("V;I")="IV"
"RTN","RORUTL15",245,0)
 I FLAGS["O"  D  S TYPE("R;O")="O"
"RTN","RORUTL15",246,0)
 . S:FLAGS["P" TYPE("P;O")="OP"
"RTN","RORUTL15",247,0)
 ;
"RTN","RORUTL15",248,0)
 ;--- Load the list of pharmacy orders
"RTN","RORUTL15",249,0)
 D OCL^PSOORRL(PTIEN,STDT,ENDT)
"RTN","RORUTL15",250,0)
 Q:$D(^TMP("PS",$J))<10 0
"RTN","RORUTL15",251,0)
 ;
"RTN","RORUTL15",252,0)
 ;--- Preselect the orders
"RTN","RORUTL15",253,0)
 S (IRX,RXCNT)=0
"RTN","RORUTL15",254,0)
 F  S IRX=$O(^TMP("PS",$J,IRX))  Q:'IRX  D
"RTN","RORUTL15",255,0)
 . S ORDER=$P($G(^TMP("PS",$J,IRX,0)),U)  Q:ORDER'>0
"RTN","RORUTL15",256,0)
 . ;--- Check the type of order
"RTN","RORUTL15",257,0)
 . S TMP=$L(ORDER),TYPE=$E(ORDER,TMP-2,TMP)
"RTN","RORUTL15",258,0)
 . S TYPE=$G(TYPE(TYPE))  Q:TYPE=""
"RTN","RORUTL15",259,0)
 . ;--- Double-check the dates
"RTN","RORUTL15",260,0)
 . I TYPE["I"  D  Q:(TMP<STDT)!(TMP'<ENDT)
"RTN","RORUTL15",261,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,15)
"RTN","RORUTL15",262,0)
 . I TYPE["O"  D  Q:TMP<STDT
"RTN","RORUTL15",263,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,10)
"RTN","RORUTL15",264,0)
 . ;--- Select the order
"RTN","RORUTL15",265,0)
 . S RXCNT=RXCNT+1,@ROR8LST@(RXCNT)=TYPE
"RTN","RORUTL15",266,0)
 . S @ROR8LST@(RXCNT,0)=^TMP("PS",$J,IRX,0)
"RTN","RORUTL15",267,0)
 ;
"RTN","RORUTL15",268,0)
 ;--- Cleanup
"RTN","RORUTL15",269,0)
 K ^TMP("PS",$J)
"RTN","RORUTL15",270,0)
 Q RXCNT
"RTN","RORUTL20")
0^12^B24633226^n/a
"RTN","RORUTL20",1,0)
RORUTL20 ;ALBFO/TK - INPATIENT PROCEDURES UTILITIES ;1/29/07 9:53am
"RTN","RORUTL20",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**26**;Feb 17, 2006;Build 53
"RTN","RORUTL20",3,0)
 ;
"RTN","RORUTL20",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL20",5,0)
 ;
"RTN","RORUTL20",6,0)
 ; #6130         PTFICD^DGPTFUT
"RTN","RORUTL20",7,0)
 ; #4205         CPTINFO^DGAPI
"RTN","RORUTL20",8,0)
 ;               PTFINFO^DGAPI
"RTN","RORUTL20",9,0)
 ; #2056         GETS^DIQ
"RTN","RORUTL20",10,0)
 ; #1995         CODEC^ICPTCOD
"RTN","RORUTL20",11,0)
 ; #5747         CODEC^ICDEX
"RTN","RORUTL20",12,0)
 ; #2055         ROOT^DILFD
"RTN","RORUTL20",13,0)
 ;
"RTN","RORUTL20",14,0)
 ;******************************************************************************
"RTN","RORUTL20",15,0)
 ;******************************************************************************
"RTN","RORUTL20",16,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL20",17,0)
 ;        
"RTN","RORUTL20",18,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL20",19,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL20",20,0)
 ;
"RTN","RORUTL20",21,0)
 ;ROR*1.5*26   APR  2015   T KOPP       Added routine for all PTF procedures
"RTN","RORUTL20",22,0)
 ;                                      extract utility (INPROC)
"RTN","RORUTL20",23,0)
 ;
"RTN","RORUTL20",24,0)
 ;******************************************************************************
"RTN","RORUTL20",25,0)
 ;******************************************************************************
"RTN","RORUTL20",26,0)
 Q
"RTN","RORUTL20",27,0)
 ; Input:
"RTN","RORUTL20",28,0)
 ;  DE = the code representing the type of procedure to extract (C=CPT,I=ICD)
"RTN","RORUTL20",29,0)
 ;  IENS: the iens variable for the entry in file 45 (example: "10,")
"RTN","RORUTL20",30,0)
 ;  RORUPD: array passed by reference to accommodate use of the RORUPD("DSBEG")
"RTN","RORUTL20",31,0)
 ;          and RORUPD("ROREND") pre-set values.  
"RTN","RORUTL20",32,0)
 ; Output:
"RTN","RORUTL20",33,0)
 ;    Sets up RORVALS array for other procedure, surgical procedure and CPT multiples in file 45
"RTN","RORUTL20",34,0)
 ;
"RTN","RORUTL20",35,0)
SETPROC(DE,IENS,RORUPD,RORVALS) ;
"RTN","RORUTL20",36,0)
 N RORBUF,RORTYPE
"RTN","RORUTL20",37,0)
 S DE=$G(DE,"B")
"RTN","RORUTL20",38,0)
 S RORTYPE=$S(DE=152:"I",DE="153":"C",1:DE)
"RTN","RORUTL20",39,0)
 D INPROC(IENS,RORTYPE,.RORBUF,$G(RORUPD("DSBEG"),2850101),$G(RORUPD("DSEND"),9999999))
"RTN","RORUTL20",40,0)
 I $G(RORBUF(0))>0 D
"RTN","RORUTL20",41,0)
 . I RORTYPE="I"!(RORTYPE="B") D
"RTN","RORUTL20",42,0)
 . . N S1,S2,SCT
"RTN","RORUTL20",43,0)
 . . S S1="ICD",S2="",SCT=0
"RTN","RORUTL20",44,0)
 . . F  S S2=$O(RORBUF(S1,S2)) Q:S2=""  D
"RTN","RORUTL20",45,0)
 . . . S SCT=SCT+1,RORVALS("PPTF","I",SCT,"I")=$P(RORBUF(S1,S2),U,2)
"RTN","RORUTL20",46,0)
 . I RORTYPE="C"!(RORTYPE="B") D
"RTN","RORUTL20",47,0)
 . . N S1,S2,SCT
"RTN","RORUTL20",48,0)
 . . S S1="CPT",S2="",SCT=0
"RTN","RORUTL20",49,0)
 . . F  S S2=$O(RORBUF(S1,S2)) Q:S2=""  D
"RTN","RORUTL20",50,0)
 . . . S SCT=SCT+1,RORVALS("PPTF","C",SCT,"I")=$P(RORBUF(S1,S2),U,2)
"RTN","RORUTL20",51,0)
 Q
"RTN","RORUTL20",52,0)
 ;
"RTN","RORUTL20",53,0)
 ; Returns all inpatient ICD and/or CPT procedure codes for a patient
"RTN","RORUTL20",54,0)
 ;
"RTN","RORUTL20",55,0)
 ; Input:
"RTN","RORUTL20",56,0)
 ;   PTIEN    : DFN of patient
"RTN","RORUTL20",57,0)
 ;   RORTYPE  : Code to indicate the type of procedure to return
"RTN","RORUTL20",58,0)
 ;                I = ICD only  C = CPT only  B = both (default)
"RTN","RORUTL20",59,0)
 ;   RORIBUF  : the array, passed by reference where the data will be returned
"RTN","RORUTL20",60,0)
 ;   RORSDT   : start date to consider (optional)
"RTN","RORUTL20",61,0)
 ;   ROREDT   : end date to consider (optional)
"RTN","RORUTL20",62,0)
 ;
"RTN","RORUTL20",63,0)
 ; Output:
"RTN","RORUTL20",64,0)
 ; Returns array RORIBUF("ICD-401,"file 45.01 ien,file 45 ien")=ICD DATE^internal icd code
"RTN","RORUTL20",65,0)
 ;               RORIBUF("ICD-601,"file 45.05 ien,file 45 ien")=ICD DATE^internal icd code
"RTN","RORUTL20",66,0)
 ;               RORIBUF("CPT","file 45.06 ien,file 45 ien")=CPT DATE^internal cpt code
"RTN","RORUTL20",67,0)
 ; RORIBUF(0)=-1 if error or 0 if success
"RTN","RORUTL20",68,0)
 ;
"RTN","RORUTL20",69,0)
INPROC(IEN45,RORTYPE,RORIBUF,RORSDT,ROREDT) ;  Get all inpatient procedures from PTF
"RTN","RORUTL20",70,0)
 N RORDATE,DATE,RORIEN,IEN,IENS,NODE,RORBUF,RORMSG,FLD,RC,PTIEN
"RTN","RORUTL20",71,0)
 N C,RORCPT,RORCPTCT,RORPTF,RORCD,REF401,ROR401,REF601,ROR601,Z
"RTN","RORUTL20",72,0)
 I '$D(RORTYPE) S RORTYPE="B"
"RTN","RORUTL20",73,0)
 K RORIBUF
"RTN","RORUTL20",74,0)
 K ^TMP("PTF",$J),^TMP("RORPTF",$J)
"RTN","RORUTL20",75,0)
 S IEN45=","_IEN45
"RTN","RORUTL20",76,0)
 ;--- Surgical procedures
"RTN","RORUTL20",77,0)
 S RORIBUF(0)=0,RC=0
"RTN","RORUTL20",78,0)
 I RORTYPE="I"!(RORTYPE="B") D  ; 'I'CD only or 'B'OTH ICD and CPT
"RTN","RORUTL20",79,0)
 . S ROR401=$$ROOT^DILFD(45.01,IEN45,1),REF401=$NA(@ROR401)
"RTN","RORUTL20",80,0)
 . S RORIEN=0 F  S RORIEN=$O(@REF401@(RORIEN)) Q:RORIEN'>0  D
"RTN","RORUTL20",81,0)
 . . K RORBUF,RORMSG
"RTN","RORUTL20",82,0)
 . . S IENS=+RORIEN_IEN45
"RTN","RORUTL20",83,0)
 . . D GETS^DIQ(45.01,IENS,".01;","I","RORBUF","RORMSG")
"RTN","RORUTL20",84,0)
 . . I $G(RORMSG) S RC=$$ERROR^RORERR(-57,,,,RORMSG(0),"GETS^DIQ;401"),RORIBUF(0)=-1 Q
"RTN","RORUTL20",85,0)
 . . S RORDATE=$G(RORBUF(45.01,IENS,.01,"I"))
"RTN","RORUTL20",86,0)
 . . Q:'RORDATE
"RTN","RORUTL20",87,0)
 . . I $G(RORSDT)!($G(ROREDT)) Q:'$$CHKDT(RORDATE\1,$G(RORSDT,0),$G(ROREDT,9999999))
"RTN","RORUTL20",88,0)
 . . K ROR ;D PTFICD^DGPTFUT(401,IEN45,RORIEN,.ROR)
"RTN","RORUTL20",89,0)
 . . S FLD="" F  S FLD=$O(ROR(FLD)) Q:FLD=""  I $G(ROR(FLD)) D
"RTN","RORUTL20",90,0)
 . . . S RORIBUF("ICD-401",RORIEN_IEN45_FLD)=RORDATE_U_+ROR(FLD),RORIBUF(0)=$G(RORIBUF(0))+1
"RTN","RORUTL20",91,0)
 . ;--- Other procedures
"RTN","RORUTL20",92,0)
 . S ROR601=$$ROOT^DILFD(45.05,IEN45,1),REF601=$NA(@ROR601)
"RTN","RORUTL20",93,0)
 . S IEN=0 F  S IEN=$O(@REF601@(IEN)) Q:IEN'>0  D
"RTN","RORUTL20",94,0)
 . . K RORBUF,RORMSG
"RTN","RORUTL20",95,0)
 . . S IENS=IEN_","_IEN45_","
"RTN","RORUTL20",96,0)
 . . D GETS^DIQ(45.05,IENS,"","I","RORBUF","RORMSG")
"RTN","RORUTL20",97,0)
 . . I $G(RORMSG) S RC=$$ERROR^RORERR(-57,,,,RORMSG(0),"GETS^DIQ;601"),RORIBUF(0)=-1 Q
"RTN","RORUTL20",98,0)
 . . S RORDATE=$G(RORBUF(45.05,IENS,.01,"I"))
"RTN","RORUTL20",99,0)
 . . Q:'RORDATE
"RTN","RORUTL20",100,0)
 . . I $G(RORSDT)!($G(ROREDT)) Q:'$$CHKDT(RORDATE\1,$G(RORSDT,0),$G(ROREDT,9999999))
"RTN","RORUTL20",101,0)
 . . K ROR ;D PTFICD^DGPTFUT(601,IEN45,IEN,.ROR)
"RTN","RORUTL20",102,0)
 . . S FLD="" F  S FLD=$O(ROR(FLD)) Q:FLD=""  I $G(ROR(FLD)) D
"RTN","RORUTL20",103,0)
 . . . S RORIBUF("ICD-601",IEN_","_IEN45)=RORDATE_U_+ROR(FLD),RORIBUF(0)=$G(RORIBUF(0))+1
"RTN","RORUTL20",104,0)
 ;--- CPT codes
"RTN","RORUTL20",105,0)
 I RORTYPE="C"!(RORTYPE="B") D  ; 'C'PT only or 'B'OTH ICD and CPT
"RTN","RORUTL20",106,0)
 . K ^TMP("PTF",$J),RORBUF,RORMSG
"RTN","RORUTL20",107,0)
 . S IEN45=$E(IEN45,2,$L(IEN45))
"RTN","RORUTL20",108,0)
 . D GETS^DIQ(45,IEN45,".01;","I","RORBUF","RORMSG")
"RTN","RORUTL20",109,0)
 . I $G(RORMSG) S RC=$$ERROR^RORERR(-57,,,,RORMSG(0),"GETS^DIQ;CPT"),RORIBUF(0)=-1 Q
"RTN","RORUTL20",110,0)
 . S PTIEN=+$G(RORBUF(45,IEN45,.01,"I"))
"RTN","RORUTL20",111,0)
 . D PTFINFOR^DGAPI(PTIEN,+IEN45) ;List of CPT code records in PTF
"RTN","RORUTL20",112,0)
 . K ^TMP("RORPTF",$J) M ^TMP("RORPTF",$J)=^TMP("PTF",$J)
"RTN","RORUTL20",113,0)
 . S RORPTF=0,RORCPTCT=0
"RTN","RORUTL20",114,0)
 . S Z=0 F  S Z=$O(^TMP("RORPTF",$J,Z)) Q:'Z  D
"RTN","RORUTL20",115,0)
 . . S RORDATE=+$G(^TMP("RORPTF",$J,Z))
"RTN","RORUTL20",116,0)
 . . D CPTINFO^DGAPI(PTIEN,+IEN45,+^TMP("RORPTF",$J,Z))  ; Pulls CPT code nodes from file 46
"RTN","RORUTL20",117,0)
 . . I $G(RORSDT)!($G(ROREDT)) Q:'$$CHKDT(RORDATE\1,$G(RORSDT,0),$G(ROREDT,9999999))
"RTN","RORUTL20",118,0)
 . . S RORCPT=0 F  S RORCPT=$O(^TMP("PTF",$J,46,RORCPT)) Q:'RORCPT  D
"RTN","RORUTL20",119,0)
 . . . S IEN=+$G(^TMP("PTF",$J,46,RORCPT)),RORCD=$P($G(^(RORCPT)),U,2)
"RTN","RORUTL20",120,0)
 . . . I RORCD S RORCPTCT=RORCPTCT+1,RORIBUF("CPT",IEN_IEN45_RORCPTCT)=RORDATE_U_RORCD,RORIBUF(0)=$G(RORIBUF(0))+1
"RTN","RORUTL20",121,0)
 . K ^TMP("PTF",$J),^TMP("RORPTF",$J)
"RTN","RORUTL20",122,0)
 ;
"RTN","RORUTL20",123,0)
 Q
"RTN","RORUTL20",124,0)
 ;
"RTN","RORUTL20",125,0)
CHKDT(DATE,SDATE,EDATE) ; Check dates - returns 1 if DATE is within SDATE-EDATE range
"RTN","RORUTL20",126,0)
 I (DATE<SDATE)!(DATE'<EDATE) Q 0
"RTN","RORUTL20",127,0)
 Q 1
"RTN","RORUTL20",128,0)
 ;
"RTN","RORX019")
0^3^B188558484^B173251947
"RTN","RORX019",1,0)
RORX019 ;BPOIFO/ACS - LIVER SCORE BY RANGE ;5/18/11 12:39pm
"RTN","RORX019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14,15,19,21,26**;Feb 17, 2006;Build 53
"RTN","RORX019",3,0)
 ;
"RTN","RORX019",4,0)
 ;******************************************************************************
"RTN","RORX019",5,0)
 ;******************************************************************************
"RTN","RORX019",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019",7,0)
 ;        
"RTN","RORX019",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019",10,0)
 ;ROR*1.5*10   MAR 2010    A SAUNDERS   Routine created
"RTN","RORX019",11,0)
 ;ROR*1.5*13   DEC 2010    A SAUNDERS   User can select specific patients,
"RTN","RORX019",12,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX019",13,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX019",14,0)
 ;ROR*1.5*14   APR 2011    A SAUNDERS   Added APRI and FIB4 scores.
"RTN","RORX019",15,0)
 ;ROR*1.5*15   MAY 2011    C RAY        Modified to exclude null tests
"RTN","RORX019",16,0)
 ;ROR*1.5*19   FEB 2012    J SCOTT      Support for ICD-10 Coding System
"RTN","RORX019",17,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX019",18,0)
 ;                                      additional identifier option selected
"RTN","RORX019",19,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Set up LIVPARAM so it can be called
"RTN","RORX019",20,0)
 ;                                      from other entry points/reports
"RTN","RORX019",21,0)
 ;******************************************************************************
"RTN","RORX019",22,0)
 ;******************************************************************************
"RTN","RORX019",23,0)
 Q
"RTN","RORX019",24,0)
 ;************************************************************************
"RTN","RORX019",25,0)
 ;COMPILE THE "LIVER SCORE BY RANGE" REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",26,0)
 ;REPORT CODE: 019
"RTN","RORX019",27,0)
 ;
"RTN","RORX019",28,0)
 ;Called by entry "Liver Score by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX019",29,0)
 ;
"RTN","RORX019",30,0)
 ;INPUT
"RTN","RORX019",31,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX019",32,0)
 ;
"RTN","RORX019",33,0)
 ;
"RTN","RORX019",34,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX019",35,0)
 ;  scores, MELD range from 10 to 30, MELD Na range from 20 to 50:
"RTN","RORX019",36,0)
 ;  
"RTN","RORX019",37,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX019",38,0)
 ;  RORTSK("EP")="$$MLDRANGE^RORX019"
"RTN","RORX019",39,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX019",40,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX019",41,0)
 ;  RORTSK("PARAMS","ICDFILT","A","FILTER")="ALL"
"RTN","RORX019",42,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX019",43,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=30
"RTN","RORX019",44,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=10
"RTN","RORX019",45,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX019",46,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=50
"RTN","RORX019",47,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=20
"RTN","RORX019",48,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX019",49,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",50,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX019",51,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX019",52,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX019",53,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX019",54,0)
 ;  
"RTN","RORX019",55,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX019",56,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",57,0)
 ;     is replaced with:  
"RTN","RORX019",58,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX019",59,0)
 ;
"RTN","RORX019",60,0)
 ;
"RTN","RORX019",61,0)
 ;OUTPUT
"RTN","RORX019",62,0)
 ;  <0  Error code
"RTN","RORX019",63,0)
 ;   0  Ok
"RTN","RORX019",64,0)
 ;************************************************************************
"RTN","RORX019",65,0)
MLDRANGE(RORTSK) ;
"RTN","RORX019",66,0)
 N RORREG        ; Registry IEN
"RTN","RORX019",67,0)
 N RORSDT        ; report start date
"RTN","RORX019",68,0)
 N ROREDT        ; report end date
"RTN","RORX019",69,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX019",70,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX019",71,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX019",72,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX019",73,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX019",74,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX019",75,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX019",76,0)
 ;
"RTN","RORX019",77,0)
 N REPORT,RC,I,TMP,SFLAGS,PARAMS
"RTN","RORX019",78,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX019",79,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX019",80,0)
 Q:REPORT<0 REPORT
"RTN","RORX019",81,0)
 ;
"RTN","RORX019",82,0)
 ;--- Get registry IEN
"RTN","RORX019",83,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX019",84,0)
 ;
"RTN","RORX019",85,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX019",86,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX019",87,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX019",88,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX019",89,0)
 ;
"RTN","RORX019",90,0)
 ;--- Add range parameters to output
"RTN","RORX019",91,0)
 S RC=$$PARAMS^RORX019A(PARAMS,.RORDATA,.RORTSK) Q:RC<0 RC
"RTN","RORX019",92,0)
 ;
"RTN","RORX019",93,0)
 ;--- Get ULNAST value for calculations
"RTN","RORX019",94,0)
 I $D(RORTSK("PARAMS","ULNAST")) S RORDATA("ULNAST")=$G(RORTSK("PARAMS","ULNAST"))
"RTN","RORX019",95,0)
 ;
"RTN","RORX019",96,0)
 ;--- Put report header data into output:
"RTN","RORX019",97,0)
 ;report creation date, task number, last registry update date, last
"RTN","RORX019",98,0)
 ;data extraction date, and ULNAST if present, liver score by range
"RTN","RORX019",99,0)
 S RC=$$HEADER(REPORT,PARAMS) Q:RC<0 RC
"RTN","RORX019",100,0)
 ;
"RTN","RORX019",101,0)
 D LIVPARAM(.RORDATA,.RORTSK,.RORLC)
"RTN","RORX019",102,0)
 ;
"RTN","RORX019",103,0)
 ;--- Create 'patients' table
"RTN","RORX019",104,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX019",105,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX019",106,0)
 ;
"RTN","RORX019",107,0)
 ;--- Check utilization
"RTN","RORX019",108,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX019",109,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX019",110,0)
 ; Utilization date range is always sent
"RTN","RORX019",111,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX019",112,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX019",113,0)
 ; Combined date range
"RTN","RORX019",114,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX019",115,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX019",116,0)
 ;
"RTN","RORX019",117,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX019",118,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX019",119,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX019",120,0)
 ;
"RTN","RORX019",121,0)
 ;
"RTN","RORX019",122,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX019",123,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX019",124,0)
 ;
"RTN","RORX019",125,0)
 ;--- Get registry records
"RTN","RORX019",126,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX019",127,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX019",128,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX019",129,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX019",130,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX019",131,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX019",132,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX019",133,0)
 . S CNT=CNT+1
"RTN","RORX019",134,0)
 . ;--- Get patient DFN
"RTN","RORX019",135,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX019",136,0)
 . ;check for patient list and quit if not on list
"RTN","RORX019",137,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX019",138,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX019",139,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX019",140,0)
 . ;--- Check if patient has passed the ICD filter
"RTN","RORX019",141,0)
 . S RCC=0
"RTN","RORX019",142,0)
 . I FLAG'="ALL" D
"RTN","RORX019",143,0)
 . . S RCC=$$ICD^RORXU010(DFN)
"RTN","RORX019",144,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX019",145,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX019",146,0)
 . ;
"RTN","RORX019",147,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX019",148,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX019",149,0)
 . ;
"RTN","RORX019",150,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX019",151,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX019",152,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX019",153,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX019",154,0)
 .. S:'UTIL SKIP=1
"RTN","RORX019",155,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX019",156,0)
 . I $G(SKIP) Q
"RTN","RORX019",157,0)
 . ;
"RTN","RORX019",158,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX019",159,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX019",160,0)
 ;
"RTN","RORX019",161,0)
 K ^TMP("RORX019",$J)
"RTN","RORX019",162,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX019",163,0)
 ;
"RTN","RORX019",164,0)
 ;************************************************************************
"RTN","RORX019",165,0)
 ;ADD PATIENT DATA TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",166,0)
 ;
"RTN","RORX019",167,0)
 ;INPUT
"RTN","RORX019",168,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019",169,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",170,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",171,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",172,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",173,0)
 ;
"RTN","RORX019",174,0)
 ;OUTPUT
"RTN","RORX019",175,0)
 ;  1        ok
"RTN","RORX019",176,0)
 ; <0        error
"RTN","RORX019",177,0)
 ;************************************************************************
"RTN","RORX019",178,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",179,0)
 ;Calculate the scores requested by the user
"RTN","RORX019",180,0)
 I ((RORDATA("IDLST")[1)!(RORDATA("IDLST")[2)) I $$CALCMLD^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",181,0)
 I ((RORDATA("IDLST")[3)!(RORDATA("IDLST")[4)) I $$CALCFIB^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",182,0)
 I '$$INRANGE(.RORDATA) Q 1  ;exclude patient from report if ANY score is out of range
"RTN","RORX019",183,0)
 I '$$SKIP(.RORDATA) Q 1  ;exclude patient from report with null scores
"RTN","RORX019",184,0)
 ;--- Get patient data and put into the report
"RTN","RORX019",185,0)
 N VADM,VA,RORDOD,MTAG,TTAG
"RTN","RORX019",186,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX019",187,0)
 ;--- The <PATIENT> tag
"RTN","RORX019",188,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX019",189,0)
 I PTAG<0 Q PTAG
"RTN","RORX019",190,0)
 ;--- Patient Name
"RTN","RORX019",191,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX019",192,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX019",193,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX019",194,0)
 ;--- Date of death
"RTN","RORX019",195,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX019",196,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX019",197,0)
 ;--- MELDDATA tag
"RTN","RORX019",198,0)
 S MTAG=$$ADDVAL^RORTSK11(RORTSK,"MELDDATA",,PTAG)
"RTN","RORX019",199,0)
 I MTAG<0 Q MTAG
"RTN","RORX019",200,0)
 ;--- Test Result Values
"RTN","RORX019",201,0)
 N TNAME
"RTN","RORX019",202,0)
 I ((RORDATA("IDLST")[1)!(RORDATA("IDLST")[2)) D
"RTN","RORX019",203,0)
 .F TNAME="BILI","CR","INR" D TSTRSLT(TNAME,MTAG)
"RTN","RORX019",204,0)
 .I RORDATA("IDLST")[2 D TSTRSLT("NA",MTAG)
"RTN","RORX019",205,0)
 I ((RORDATA("IDLST")[3)!(RORDATA("IDLST")[4)) D
"RTN","RORX019",206,0)
 .F TNAME="AST","PLAT" D TSTRSLT(TNAME,MTAG)
"RTN","RORX019",207,0)
 .I RORDATA("IDLST")[4 D TSTRSLT("ALT",MTAG)
"RTN","RORX019",208,0)
 ;---  MELD score
"RTN","RORX019",209,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"MELD",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX019",210,0)
 ;---  MELD-Na Score
"RTN","RORX019",211,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MELDNA",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX019",212,0)
 ;---  APRI Score
"RTN","RORX019",213,0)
 I RORDATA("IDLST")[3 D ADDVAL^RORTSK11(RORTSK,"APRI",$G(RORDATA("SCORE",3)),PTAG,3)
"RTN","RORX019",214,0)
 ;---  FIB-4 Score
"RTN","RORX019",215,0)
 I RORDATA("IDLST")[4 D ADDVAL^RORTSK11(RORTSK,"FIB4",$G(RORDATA("SCORE",4)),PTAG,3)
"RTN","RORX019",216,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D
"RTN","RORX019",217,0)
 . S TMP=$$ICN^RORUTL02(DFN)
"RTN","RORX019",218,0)
 . D ADDVAL^RORTSK11(RORTSK,"ICN",TMP,PTAG,1)
"RTN","RORX019",219,0)
 Q ($S($G(TTAG)<0:TTAG,1:1))
"RTN","RORX019",220,0)
 ;
"RTN","RORX019",221,0)
 ;*****************************************************
"RTN","RORX019",222,0)
 ;Procedure to add test name, date and results to report
"RTN","RORX019",223,0)
 ;INPUT
"RTN","RORX019",224,0)
 ;   TNAME       Name of test 
"RTN","RORX019",225,0)
 ;   MTAG        IEN of parent record
"RTN","RORX019",226,0)
 ;OUTPUT         n/a
"RTN","RORX019",227,0)
 ;******************************************************
"RTN","RORX019",228,0)
TSTRSLT(TNAME,MTAG) ;
"RTN","RORX019",229,0)
 ;--- Test Result Values
"RTN","RORX019",230,0)
 ;--- TEST tag
"RTN","RORX019",231,0)
 N TNAMEMIX
"RTN","RORX019",232,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,MTAG)
"RTN","RORX019",233,0)
 I TTAG<0 Q
"RTN","RORX019",234,0)
 ;--- Mixed case test name for GUI application
"RTN","RORX019",235,0)
 I TNAME="BILI" S TNAMEMIX="Bili"
"RTN","RORX019",236,0)
 I TNAME="CR" S TNAMEMIX="Cr"
"RTN","RORX019",237,0)
 I TNAME="INR" S TNAMEMIX="INR"
"RTN","RORX019",238,0)
 I TNAME="NA" S TNAMEMIX="Na"
"RTN","RORX019",239,0)
 I TNAME="AST" S TNAMEMIX="AST"
"RTN","RORX019",240,0)
 I TNAME="PLAT" S TNAMEMIX="Platelet"
"RTN","RORX019",241,0)
 I TNAME="ALT" S TNAMEMIX="ALT"
"RTN","RORX019",242,0)
 ;---  Test Name
"RTN","RORX019",243,0)
 D ADDVAL^RORTSK11(RORTSK,"TNAME",TNAMEMIX,TTAG)
"RTN","RORX019",244,0)
 ;---  Test Date
"RTN","RORX019",245,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$P($G(RORDATA(TNAME)),U,2),TTAG)
"RTN","RORX019",246,0)
 ;---  Test Result Value
"RTN","RORX019",247,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$P($G(RORDATA(TNAME)),U,1),TTAG)
"RTN","RORX019",248,0)
 Q
"RTN","RORX019",249,0)
 ;****************************************************************
"RTN","RORX019",250,0)
 ;Function to check whether patient should be included on report
"RTN","RORX019",251,0)
 ;To be included patient must have a score for at least one of
"RTN","RORX019",252,0)
 ;the scores requested by the user
"RTN","RORX019",253,0)
 ;
"RTN","RORX019",254,0)
 ;INPUT
"RTN","RORX019",255,0)
 ;   RORDATA   Array with ROR Data
"RTN","RORX019",256,0)
 ;OUTPUT
"RTN","RORX019",257,0)
 ;   1         Include
"RTN","RORX019",258,0)
 ;   0         Exclude
"RTN","RORX019",259,0)
 ;***************************************************************
"RTN","RORX019",260,0)
SKIP(RORDATA) ;
"RTN","RORX019",261,0)
 ;
"RTN","RORX019",262,0)
 N RETURN
"RTN","RORX019",263,0)
 S RETURN=0
"RTN","RORX019",264,0)
 I RORDATA("IDLST")[1,+$G(RORDATA("SCORE",1)) S RETURN=1
"RTN","RORX019",265,0)
 I RORDATA("IDLST")[2,+$G(RORDATA("SCORE",2)) S RETURN=1
"RTN","RORX019",266,0)
 I RORDATA("IDLST")[3,+$G(RORDATA("SCORE",3)) S RETURN=1
"RTN","RORX019",267,0)
 I RORDATA("IDLST")[4,+$G(RORDATA("SCORE",4)) S RETURN=1
"RTN","RORX019",268,0)
 Q RETURN
"RTN","RORX019",269,0)
 ;************************************************************************
"RTN","RORX019",270,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES
"RTN","RORX019",271,0)
 ;-- If both tests contain ranges: scores for BOTH tests must fall in the
"RTN","RORX019",272,0)
 ;ranges...treated like an 'AND'
"RTN","RORX019",273,0)
 ;-- If 1 test contains a range: only patients with scores in the requested range
"RTN","RORX019",274,0)
 ;will be displayed, and the test without the range will also be displayed
"RTN","RORX019",275,0)
 ;with the calculated score (if applicable)
"RTN","RORX019",276,0)
 ;-- If neither test contains a range: all patients and their test results
"RTN","RORX019",277,0)
 ;and scores (null if they can't be calculated) are returned
"RTN","RORX019",278,0)
 ;
"RTN","RORX019",279,0)
 ;INPUT
"RTN","RORX019",280,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",281,0)
 ;OUTPUT
"RTN","RORX019",282,0)
 ;  1        include on report
"RTN","RORX019",283,0)
 ;  0        exclude from report
"RTN","RORX019",284,0)
 ;************************************************************************
"RTN","RORX019",285,0)
INRANGE(RORDATA) ;
"RTN","RORX019",286,0)
 ;include data and quit if no range was sent in
"RTN","RORX019",287,0)
 Q:($D(RORDATA("RANGE"))'>1) 1
"RTN","RORX019",288,0)
 ;check scores to see if they are within the user-selected range(s)
"RTN","RORX019",289,0)
 N I,RETURN,SCORE S RETURN=1 ;default is set to 'within range'
"RTN","RORX019",290,0)
 S I=0 F  S I=$O(RORDATA("RANGE",I)) Q:I=""  D
"RTN","RORX019",291,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX019",292,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",293,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",294,0)
 .. I SCORE<RORDATA("L",I) S RETURN=0
"RTN","RORX019",295,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX019",296,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",297,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",298,0)
 .. I SCORE>$G(RORDATA("H",I)) S RETURN=0
"RTN","RORX019",299,0)
 ;
"RTN","RORX019",300,0)
 Q RETURN
"RTN","RORX019",301,0)
 ;
"RTN","RORX019",302,0)
 ;************************************************************************
"RTN","RORX019",303,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",304,0)
 ;
"RTN","RORX019",305,0)
 ;INPUT
"RTN","RORX019",306,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX019",307,0)
 ;  PARAMS  Reference IEN to the 'params' parent XML tag
"RTN","RORX019",308,0)
 ;
"RTN","RORX019",309,0)
 ;OUTPUT
"RTN","RORX019",310,0)
 ;  <0      error
"RTN","RORX019",311,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX019",312,0)
 ;************************************************************************
"RTN","RORX019",313,0)
HEADER(PARTAG,PARAMS) ;
"RTN","RORX019",314,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX019",315,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX019",316,0)
 ;last registry update, and last data extraction.
"RTN","RORX019",317,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX019",318,0)
 Q:HEADER<0 HEADER
"RTN","RORX019",319,0)
 ;manually build the table defintion(s) listed below
"RTN","RORX019",320,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,MELD,MELDNA,APRI,FIB4,ICN)
"RTN","RORX019",321,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX019",322,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX019",323,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX019",324,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX019",325,0)
 ;--- Required columns
"RTN","RORX019",326,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX019",327,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",328,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX019",329,0)
 ;--- Additional columns
"RTN","RORX019",330,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX019",331,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",332,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELD")
"RTN","RORX019",333,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX019",334,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",335,0)
 . ;D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELDNA")
"RTN","RORX019",336,0)
 . ;note: the column name length above was causing problems in the
"RTN","RORX019",337,0)
 . ;XSL diaglog file entry 7981019.001, so we shortened it to just "NA".
"RTN","RORX019",338,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","NA")
"RTN","RORX019",339,0)
 I RORDATA("IDLST")[3 D
"RTN","RORX019",340,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",341,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","APRI")
"RTN","RORX019",342,0)
 I RORDATA("IDLST")[4 D
"RTN","RORX019",343,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",344,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","FIB4")
"RTN","RORX019",345,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D
"RTN","RORX019",346,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",347,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","ICN")
"RTN","RORX019",348,0)
 ;--- LOINC codes
"RTN","RORX019",349,0)
 N LTAG S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX019",350,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",351,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","ALT: 1742-6, 16325-3")
"RTN","RORX019",352,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",353,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","AST: 1916-6, 1920-8, 127344-1")
"RTN","RORX019",354,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",355,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Billirubin: 14631-6, 1975-2")
"RTN","RORX019",356,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",357,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Creatinine: 15045-8, 21232-4, 2160-0")
"RTN","RORX019",358,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",359,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","INR: 34714-6, 6301-6")
"RTN","RORX019",360,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",361,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Platelets: 777-3, 778-1, 26515-7")
"RTN","RORX019",362,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",363,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Sodium: 2947-0, 2951-2, 32717-1")
"RTN","RORX019",364,0)
 ;
"RTN","RORX019",365,0)
 ;Add ULNAST value if passed in
"RTN","RORX019",366,0)
 I $G(RORTSK("PARAMS","ULNAST")) D
"RTN","RORX019",367,0)
 . N ULNAST S ULNAST=$$ADDVAL^RORTSK11(RORTSK,"ULNAST",,PARAMS)
"RTN","RORX019",368,0)
 . D ADDATTR^RORTSK11(RORTSK,ULNAST,"VALUES",$G(RORDATA("ULNAST")))
"RTN","RORX019",369,0)
 ;
"RTN","RORX019",370,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX019",371,0)
 ;
"RTN","RORX019",372,0)
 ; Set up parameter values for liver scores
"RTN","RORX019",373,0)
 ;
"RTN","RORX019",374,0)
 ;  Input:
"RTN","RORX019",375,0)
 ;     RORDATA   Array with ROR data
"RTN","RORX019",376,0)
 ;     RORTSK    Task number and task parameters
"RTN","RORX019",377,0)
 ;
"RTN","RORX019",378,0)
 ;  Output:
"RTN","RORX019",379,0)
 ;     RORDATA
"RTN","RORX019",380,0)
 ;     RORTSK
"RTN","RORX019",381,0)
 ;     RORLC     sub-file and LOINC codes to search for    
"RTN","RORX019",382,0)
 ;
"RTN","RORX019",383,0)
LIVPARAM(RORDATA,RORTSK,RORLC) ;
"RTN","RORX019",384,0)
 ;--- Get test ranges requested
"RTN","RORX019",385,0)
 ;I=1 ==> report = MELD      I=2 ==> report = MELD Na
"RTN","RORX019",386,0)
 ;I=3 ==> report = APRI      I=4 ==> report = FIB-4
"RTN","RORX019",387,0)
 N I
"RTN","RORX019",388,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX019",389,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX019",390,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX019",391,0)
 ;
"RTN","RORX019",392,0)
 ;--- Get Max Date for test results  OUTPUT: RORDATA("DATE")
"RTN","RORX019",393,0)
 ;In the GUI, the user selects either 'most recent' or 'as of' date
"RTN","RORX019",394,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX019",395,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX019",396,0)
 ;
"RTN","RORX019",397,0)
 ;--- LOINC codes
"RTN","RORX019",398,0)
 I "1,2"[RORDATA("IDLST") D  ;If MELD or MELD-NA scores requested
"RTN","RORX019",399,0)
 . ;create list for future comparison
"RTN","RORX019",400,0)
 . S RORDATA("CR_LOINC")=";15045-8;21232-4;2160-0;" ;Creatinine
"RTN","RORX019",401,0)
 . S RORDATA("BIL_LOINC")=";14631-6;1975-2;" ;Bilirubin
"RTN","RORX019",402,0)
 . S RORDATA("SOD_LOINC")=";2947-0;2951-2;32717-1;" ;Sodium
"RTN","RORX019",403,0)
 . S RORDATA("INR_LOINC")=";34714-6;6301-6;" ;INR 
"RTN","RORX019",404,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",405,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",406,0)
 . S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX019",407,0)
 . S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX019",408,0)
 . S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX019",409,0)
 . S RORLC(4)="14631-6^LN" ;Bilirubin LOINC
"RTN","RORX019",410,0)
 . S RORLC(5)="1975-2^LN"  ;Bilirubin LOINC
"RTN","RORX019",411,0)
 . S RORLC(6)="2947-0^LN"  ;Sodium LOINC
"RTN","RORX019",412,0)
 . S RORLC(7)="2951-2^LN"  ;Sodium LOINC
"RTN","RORX019",413,0)
 . S RORLC(8)="32717-1^LN" ;Sodium LOINC
"RTN","RORX019",414,0)
 . S RORLC(9)="34714-6^LN" ;INR LOINC
"RTN","RORX019",415,0)
 . S RORLC(10)="6301-6^LN" ;INR LOINC
"RTN","RORX019",416,0)
 ;
"RTN","RORX019",417,0)
 I "3,4"[RORDATA("IDLST") D  ;If APRI or FIB-4 scores requested
"RTN","RORX019",418,0)
 . ;create list for future comparison
"RTN","RORX019",419,0)
 . S RORDATA("AST_LOINC")=";1916-6;1920-8;127344-1;" ;AST 
"RTN","RORX019",420,0)
 . S RORDATA("PLAT_LOINC")=";777-3;778-1;26515-7;" ;Platelets 
"RTN","RORX019",421,0)
 . S RORDATA("ALT_LOINC")=";1742-6;16325-3;" ;ALT 
"RTN","RORX019",422,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",423,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",424,0)
 . S RORLC(1)="1916-6^LN" ;AST LOINC
"RTN","RORX019",425,0)
 . S RORLC(2)="1920-8^LN" ;AST LOINC
"RTN","RORX019",426,0)
 . ;S RORLC(3)="127344-1^LN" ;AST LOINC
"RTN","RORX019",427,0)
 . S RORLC(4)="777-3^LN" ;Platelets LOINC
"RTN","RORX019",428,0)
 . S RORLC(5)="778-1^LN" ;Platelets LOINC
"RTN","RORX019",429,0)
 . S RORLC(6)="26515-7^LN" ;Platelets LOINC
"RTN","RORX019",430,0)
 . S RORLC(7)="1742-6^LN" ;ALT LOINC
"RTN","RORX019",431,0)
 . S RORLC(8)="16325-3^LN" ;ALT LOINC
"RTN","RORX019",432,0)
 Q
"RTN","RORX019",433,0)
 ;
"RTN","RORX021")
0^4^B26620213^B10440315
"RTN","RORX021",1,0)
RORX021 ;BPOIFO/CLR - HCV DAA CANDIDATES REPORT ;26 May 2015  4:02 PM
"RTN","RORX021",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17,21,26**;Feb 17, 2006;Build 53
"RTN","RORX021",3,0)
 ;
"RTN","RORX021",4,0)
 ;******************************************************************************
"RTN","RORX021",5,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX021",6,0)
 ;        
"RTN","RORX021",7,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX021",8,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX021",9,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX021",10,0)
 ;                                      additional identifier option selected
"RTN","RORX021",11,0)
 ;ROR*1.5*26   JAN 2015    T KOPP       Added FIB4 parameters set and header
"RTN","RORX021",12,0)
 ;                                      for FIB4 score. Remove treatment status.
"RTN","RORX021",13,0)
 ;******************************************************************************
"RTN","RORX021",14,0)
 ;
"RTN","RORX021",15,0)
 Q
"RTN","RORX021",16,0)
 ;
"RTN","RORX021",17,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX021",18,0)
 ;
"RTN","RORX021",19,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX021",20,0)
 ;
"RTN","RORX021",21,0)
 ; Return Values:
"RTN","RORX021",22,0)
 ;       <0  Error code
"RTN","RORX021",23,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX021",24,0)
 ;
"RTN","RORX021",25,0)
HEADER(PARTAG) ;
"RTN","RORX021",26,0)
 ;;PATIENTS(#,NAME,LAST4,HCV_DATE,HCV,GT,FILL_DATE,FILL_MED,FIB4,ICN)
"RTN","RORX021",27,0)
 ;
"RTN","RORX021",28,0)
 N HEADER,RC
"RTN","RORX021",29,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX021",30,0)
 Q:HEADER<0 HEADER
"RTN","RORX021",31,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX021",HEADER)
"RTN","RORX021",32,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX021",33,0)
 ;
"RTN","RORX021",34,0)
 ;***** COMPILES THE "POTENTIAL DAA CANDIDATES" REPORT
"RTN","RORX021",35,0)
 ; REPORT CODE: 021
"RTN","RORX021",36,0)
 ;
"RTN","RORX021",37,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX021",38,0)
 ;
"RTN","RORX021",39,0)
 ; The ^TMP("RORX021",$J) global node is used by this function.
"RTN","RORX021",40,0)
 ;
"RTN","RORX021",41,0)
 ; ^TMP("RORX021",$J,
"RTN","RORX021",42,0)
 ;   "PAT",
"RTN","RORX021",43,0)
 ;     DFN,              Patient descriptor
"RTN","RORX021",44,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX021",45,0)
 ;                         ^02: Patient name
"RTN","RORX021",46,0)
 ;                         ^03: Treatment History (not used)
"RTN","RORX021",47,0)
 ;                         ^04: National ICN
"RTN","RORX021",48,0)
 ;                         ^05: FIB4 score
"RTN","RORX021",49,0)
 ;       "LR",
"RTN","RORX021",50,0)
 ;         Category,
"RTN","RORX021",51,0)
 ;           Date(inverse) = Result
"RTN","RORX021",52,0)
 ;            
"RTN","RORX021",53,0)
 ;       "RX",
"RTN","RORX021",54,0)
 ;         Date(inverse),
"RTN","RORX021",55,0)
 ;           Generic Drug Name,
"RTN","RORX021",56,0)
 ;             Drug IEN,
"RTN","RORX021",57,0)
 ;                RX #,
"RTN","RORX021",58,0)
 ;                   Count) = ""
"RTN","RORX021",59,0)
 ;
"RTN","RORX021",60,0)
 ; Return Values:
"RTN","RORX021",61,0)
 ;       <0  Error code
"RTN","RORX021",62,0)
 ;        0  Ok
"RTN","RORX021",63,0)
 ;
"RTN","RORX021",64,0)
HCVDAA(RORTSK) ;
"RTN","RORX021",65,0)
 N RORLTST       ; Closed root of the list of lab tests for the
"RTN","RORX021",66,0)
 ;               ; Lab search API
"RTN","RORX021",67,0)
 N RORREG        ; Registry IEN
"RTN","RORX021",68,0)
 N RORSDT       ; Pharmacy start date
"RTN","RORX021",69,0)
 N ROREDT       ; Pharmacy end date
"RTN","RORX021",70,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX021",71,0)
 N RORXL         ; Closed root of the drug list for the pharmacy
"RTN","RORX021",72,0)
 ;               ; search API 
"RTN","RORX021",73,0)
 N RORLC         ; sub-file and LOINC codes to search for FIB4
"RTN","RORX021",74,0)
 N ECNT,NSPT,RC,SFLAGS,TMP,BUF,RORDATA
"RTN","RORX021",75,0)
 N REPORT,PARAMS,ELEMENT  ;XML parent variables
"RTN","RORX021",76,0)
 ;
"RTN","RORX021",77,0)
 S (RORXL,RORLTST)="",(ECNT,RC)=0
"RTN","RORX021",78,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",79,0)
 ;--- Root node of the report
"RTN","RORX021",80,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX021",81,0)
 Q:REPORT<0 REPORT
"RTN","RORX021",82,0)
 ;
"RTN","RORX021",83,0)
 ;--- Get and prepare the report parameters
"RTN","RORX021",84,0)
 D
"RTN","RORX021",85,0)
 . N Z
"RTN","RORX021",86,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX021",87,0)
 . S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORXSDT,.RORXEDT,.SFLAGS)
"RTN","RORX021",88,0)
 . I PARAMS<0 S RC=PARAMS Q
"RTN","RORX021",89,0)
 . S Z=0,RORDATA("IDLST")=""
"RTN","RORX021",90,0)
 . F  S Z=$O(RORTSK("PARAMS","LRGRANGES","C",Z)) Q:'Z  D
"RTN","RORX021",91,0)
 .. S RORDATA("IDLST")=RORDATA("IDLST")_$S(RORDATA("IDLST")'="":",",1:"")_Z
"RTN","RORX021",92,0)
 . K:RORDATA("IDLST")="" RORDATA("IDLST")
"RTN","RORX021",93,0)
 . I $D(RORDATA("IDLST")) D  Q:RC<0
"RTN","RORX021",94,0)
 .. D LIVPARAM^RORX019(.RORDATA,.RORTSK,.RORLC)
"RTN","RORX021",95,0)
 .. ;--- Add lab results range parameters to output
"RTN","RORX021",96,0)
 .. S RC=$$PARAMS(PARAMS,.RORDATA,.RORTSK)
"RTN","RORX021",97,0)
 .. Q:RC<0
"RTN","RORX021",98,0)
 .. S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"FIB4",$$OPTXT^RORXU002(.RORDATA),PARAMS)
"RTN","RORX021",99,0)
 .. I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX021",100,0)
 . Q:RC<0
"RTN","RORX021",101,0)
 . ;--- Get and store treatment history parameters
"RTN","RORX021",102,0)
 . M BUF=RORTSK("PARAMS","TREATMENT_HISTORY","A")  Q:$D(BUF)<10
"RTN","RORX021",103,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"TREATMENT_HISTORY",$$OPTXT^RORXU002(.BUF),PARAMS)
"RTN","RORX021",104,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORX021",105,0)
 . S TMP=""
"RTN","RORX021",106,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORX021",107,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,BUF(TMP))
"RTN","RORX021",108,0)
 . ;--- Report header
"RTN","RORX021",109,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX021",110,0)
 . ;--- Query the registry
"RTN","RORX021",111,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX021",112,0)
 . S RC=$$QUERY^RORX021A(REPORT,SFLAGS,.NSPT,.RORLC)
"RTN","RORX021",113,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",114,0)
 . ;--- Store the results
"RTN","RORX021",115,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX021",116,0)
 . S RC=$$STORE^RORX021A(REPORT,NSPT)
"RTN","RORX021",117,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",118,0)
 ;--- Cleanup
"RTN","RORX021",119,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",120,0)
 ;
"RTN","RORX021",121,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX021",122,0)
 ;
"RTN","RORX021",123,0)
  ;*****************************************************************************
"RTN","RORX021",124,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX021",125,0)
 ;
"RTN","RORX021",126,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX021",127,0)
 ;
"RTN","RORX021",128,0)
 ; Return Values:
"RTN","RORX021",129,0)
 ;       <0  Error code
"RTN","RORX021",130,0)
 ;        0  Ok
"RTN","RORX021",131,0)
 ;*****************************************************************************
"RTN","RORX021",132,0)
PARAMS(PARTAG,RORDATA,RORTSK) ;  Currently, only FIB-4 is used for this report
"RTN","RORX021",133,0)
 N PARAMS,DESC,TMP,RC S RC=0
"RTN","RORX021",134,0)
 ;--- Lab test ranges
"RTN","RORX021",135,0)
 S RORDATA("RANGE",4)=0 ;initialize FIB4 to 'no range passed in'
"RTN","RORX021",136,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",4)) D  Q:RC<0 RC
"RTN","RORX021",137,0)
 . N ELEMENT,NODE,RTAG,RANGE
"RTN","RORX021",138,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX021",139,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX021",140,0)
 . S RANGE=0,DESC=$$RTEXT^RORX019A(4,.RORDATA,.RORTSK) ;get range description
"RTN","RORX021",141,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG) ;add desc to output
"RTN","RORX021",142,0)
 . I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX021",143,0)
 . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",4)
"RTN","RORX021",144,0)
 . ;--- Process the range values
"RTN","RORX021",145,0)
 . S TMP=$G(@NODE@(4,"L"))
"RTN","RORX021",146,0)
 . I TMP'="" D  S RANGE=1
"RTN","RORX021",147,0)
 .. D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP) S RORDATA("RANGE",4)=1
"RTN","RORX021",148,0)
 .. S TMP=$G(@NODE@(4,"H"))
"RTN","RORX021",149,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX021",150,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP) S RORDATA("RANGE",4)=1
"RTN","RORX021",151,0)
 .. I RANGE D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX021",152,0)
 Q RC
"RTN","RORX021",153,0)
 ;
"RTN","RORX021A")
0^5^B151761658^B135223327
"RTN","RORX021A",1,0)
RORX021A ;BPOIFO/CLR - HCV DAA CANDIDATES(QUERY & STORE) ;7/15/11 3:37pm
"RTN","RORX021A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17,19,21,27,26**;Feb 17, 2006;Build 53
"RTN","RORX021A",3,0)
 ;
"RTN","RORX021A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX021A",5,0)
 ;
"RTN","RORX021A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX021A",7,0)
 ; #10035 Direct read of the DOD field of the file #2 (supported)
"RTN","RORX021A",8,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX021A",9,0)
 ; #10103 $$TRIM^XLFSTR (supported)
"RTN","RORX021A",10,0)
 ; #10103 $$UP^XLFSTR (supported)
"RTN","RORX021A",11,0)
 ;   
"RTN","RORX021A",12,0)
 ;******************************************************************************
"RTN","RORX021A",13,0)
 ;******************************************************************************
"RTN","RORX021A",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX021A",15,0)
 ;        
"RTN","RORX021A",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX021A",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX021A",18,0)
 ;ROR*1.5*19   JUN  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX021A",19,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX021A",20,0)
 ;                                      additional identifier option selected
"RTN","RORX021A",21,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Remove requirement to skip patient in
"RTN","RORX021A",22,0)
 ;                                      report if they received Boceprevir or
"RTN","RORX021A",23,0)
 ;                                      Telaprevir, removed requirement that
"RTN","RORX021A",24,0)
 ;                                      only genotype 1 is included on the
"RTN","RORX021A",25,0)
 ;                                      report.
"RTN","RORX021A",26,0)
 ;ROR*1.5*26   MAR 2015    T KOPP       Added FIB-4 as report column if FIB-4
"RTN","RORX021A",27,0)
 ;                                      range option selected (STORE), calculate
"RTN","RORX021A",28,0)
 ;                                      FIB-4 score if parameter selected. 
"RTN","RORX021A",29,0)
 ;                                      Remove treatment status column.        
"RTN","RORX021A",30,0)
 ;******************************************************************************
"RTN","RORX021A",31,0)
 ;******************************************************************************
"RTN","RORX021A",32,0)
 Q
"RTN","RORX021A",33,0)
 ;
"RTN","RORX021A",34,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX021A",35,0)
 ;
"RTN","RORX021A",36,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",37,0)
 ;
"RTN","RORX021A",38,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX021A",39,0)
 ;
"RTN","RORX021A",40,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX021A",41,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX021A",42,0)
 ;
"RTN","RORX021A",43,0)
 ; Return Values:
"RTN","RORX021A",44,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",45,0)
 ;        0  Ok
"RTN","RORX021A",46,0)
 ;        1  Skip this result
"RTN","RORX021A",47,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",48,0)
 ;
"RTN","RORX021A",49,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX021A",50,0)
 N DATE,IEN,NAME,RC,TMP,VAL,CAT,SUB
"RTN","RORX021A",51,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX021A",52,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX021A",53,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX021A",54,0)
 S CAT=$P(RESULT(2),U,4)    Q:CAT="" 1   ; Category(lab group) of the test
"RTN","RORX021A",55,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX021A",56,0)
 ;--- Skip if test is not in lab groups HepC GT, Quant, or Qual
"RTN","RORX021A",57,0)
 I CAT'="HepC GT",(CAT'="HepC Quant"),(CAT'="HepC Qual") Q 1
"RTN","RORX021A",58,0)
 ;=== Mark values as quantitative, qualitative or responded to treatment
"RTN","RORX021A",59,0)
 ;---  HCVQT=quant,HCVQL=qual,HCVOK=cured
"RTN","RORX021A",60,0)
 I CAT="HepC Quant"!(CAT="HepC Qual") D  Q:TMP 1
"RTN","RORX021A",61,0)
 . S TMP=0
"RTN","RORX021A",62,0)
 . S VAL=$$UP^XLFSTR(VAL)  ;convert to upper case
"RTN","RORX021A",63,0)
 . S VAL=$TR(VAL," ")  ;strip out all spaces
"RTN","RORX021A",64,0)
 . I VAL["POS" S SUB="HCVQL" Q
"RTN","RORX021A",65,0)
 . I $E(VAL,1,1)="P" S SUB="HCVQL" Q
"RTN","RORX021A",66,0)
 . I VAL["NEG" S SUB="HCVOK" Q
"RTN","RORX021A",67,0)
 . I VAL["NO" S SUB="HCVOK" Q
"RTN","RORX021A",68,0)
 . I $E(VAL,1,1)="N" S SUB="HCVOK" Q
"RTN","RORX021A",69,0)
 . I VAL["COMMENT"!(VAL["CANC")!(VAL["DNR")!(VAL["TNP") S TMP=1 Q
"RTN","RORX021A",70,0)
 . I +VAL=VAL,VAL<51 S TMP=1 Q  ;skip abnormally low values
"RTN","RORX021A",71,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," >,GT")) S SUB="HCVQT" Q
"RTN","RORX021A",72,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," <,LT")) S SUB="HCVOK" Q
"RTN","RORX021A",73,0)
 . S TMP=1
"RTN","RORX021A",74,0)
 S SUB=$S(CAT="HepC GT":"GT",1:SUB)
"RTN","RORX021A",75,0)
 ;--- Store the result
"RTN","RORX021A",76,0)
 S @ROR8DST@(SUB,DATE)=$P(RESULT(1),U,3)
"RTN","RORX021A",77,0)
 Q 0
"RTN","RORX021A",78,0)
 ;
"RTN","RORX021A",79,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX021A",80,0)
 ; REPORT        Parent IEN of report
"RTN","RORX021A",81,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX021A",82,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX021A",83,0)
 ; .RORLC        sub-file and LOINC codes to search for FIB4
"RTN","RORX021A",84,0)
 ;
"RTN","RORX021A",85,0)
 ; Return Values:
"RTN","RORX021A",86,0)
 ;       <0  Fatal error
"RTN","RORX021A",87,0)
 ;        0  Ok
"RTN","RORX021A",88,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",89,0)
 ;
"RTN","RORX021A",90,0)
QUERY(REPORT,FLAGS,NSPT,RORLC) ;
"RTN","RORX021A",91,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX021A",92,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX021A",93,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX021A",94,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX021A",95,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX021A",96,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX021A",97,0)
 N RORXCDT       ; User selected cut off date for registry meds
"RTN","RORX021A",98,0)
 N RORTS         ; User selected treatment status categories
"RTN","RORX021A",99,0)
 N RORXEDT       ; RX end date
"RTN","RORX021A",100,0)
 N RORXSDT       ; RX start date
"RTN","RORX021A",101,0)
 N RORTH         ; Patient treatment status (EXP=experienced, NAIVE=naive)
"RTN","RORX021A",102,0)
 ;
"RTN","RORX021A",103,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX021A",104,0)
 N RCC,FLAG,HCV,GT,ROR1,ROR2,ROR3
"RTN","RORX021A",105,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX021A",106,0)
 S (CNT,ECNT,NSPT,RC)=0,(UTEDT,UTSDT)=0
"RTN","RORX021A",107,0)
 ;=== Set up parameters
"RTN","RORX021A",108,0)
 ;--- Utilization date range
"RTN","RORX021A",109,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",110,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX021A",111,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX021A",112,0)
 ;--- Number of patients in the registry
"RTN","RORX021A",113,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX021A",114,0)
 ;--- Set up Treatment status parameters
"RTN","RORX021A",115,0)
 F TMP="NAIVE","EXP","EXP_DAYS" D
"RTN","RORX021A",116,0)
 . S RORTS(TMP)=$$PARAM^RORTSK01("TREATMENT_HISTORY",TMP)
"RTN","RORX021A",117,0)
 ;--- Lab parameters
"RTN","RORX021A",118,0)
 S RORLDST("RORCB")="$$LTSCB^RORX021A"
"RTN","RORX021A",119,0)
 ;--- Labs date range
"RTN","RORX021A",120,0)
 S LTSDT=""
"RTN","RORX021A",121,0)
 S LTEDT=DT
"RTN","RORX021A",122,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",123,0)
 S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX021A",124,0)
 ;== Pharm parameters
"RTN","RORX021A",125,0)
 S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORX021A",126,0)
 S RORXDST("RORCB")="$$RXOCB^RORX021A"   ;call back routine
"RTN","RORX021A",127,0)
 ;--- RX cut off date (inverse)/shift cut off back one day
"RTN","RORX021A",128,0)
 N X1,X2,X S X2=-(+RORTS("EXP_DAYS")+1),X1=DT D C^%DTC S RORXCDT=99999999-X
"RTN","RORX021A",129,0)
 ;--- RX start and end dates
"RTN","RORX021A",130,0)
 S RORXSDT=2000101  ;start date 1/1/1900
"RTN","RORX021A",131,0)
 S RORXEDT=DT
"RTN","RORX021A",132,0)
 ;--- RX list of HepC registry drugs
"RTN","RORX021A",133,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX021A",134,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG)
"RTN","RORX021A",135,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",136,0)
 S RORXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX021A",137,0)
 ;--- Set up Clinic/Division list parameters date_range_3
"RTN","RORX021A",138,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX021A",139,0)
 ;--- Set up ICD parameters
"RTN","RORX021A",140,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX021A",141,0)
 ;=== Browse through the registry records
"RTN","RORX021A",142,0)
 S IEN=0
"RTN","RORX021A",143,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX021A",144,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX021A",145,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",146,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX021A",147,0)
 . ;--- Get patient DFN
"RTN","RORX021A",148,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX021A",149,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX021A",150,0)
 . ;--- Check if the patient should be skipped based on standard filters
"RTN","RORX021A",151,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,UTSDT,UTEDT)
"RTN","RORX021A",152,0)
 . ;--- Check if patient should be skipped because of ICD codes
"RTN","RORX021A",153,0)
 . S RCC=0
"RTN","RORX021A",154,0)
 . I FLAG'="ALL" D
"RTN","RORX021A",155,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX021A",156,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX021A",157,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX021A",158,0)
 . ;
"RTN","RORX021A",159,0)
 . ;--- Check if patient should be skipped because of Clinic or Division 
"RTN","RORX021A",160,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX021A",161,0)
 . ;=== Check labs and meds
"RTN","RORX021A",162,0)
 . S SKIP=1,UTIL=0
"RTN","RORX021A",163,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX021A",164,0)
 . . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"LR"))
"RTN","RORX021A",165,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,+RORREG,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX021A",166,0)
 . . Q:RC'>0
"RTN","RORX021A",167,0)
 . . ;=== Skip if patient no longer has HCV
"RTN","RORX021A",168,0)
 . . S ROR1=+$O(@RORLDST@("HCVOK","")),ROR2=+$O(@RORLDST@("HCVQL","")),ROR3=(+$O(@RORLDST@("HCVQT","")))
"RTN","RORX021A",169,0)
 . . I ROR1>0 D  Q:SKIP=1
"RTN","RORX021A",170,0)
 . . . ;--- Skip if date of most recent HCV test is normal
"RTN","RORX021A",171,0)
 . . . I (ROR1<ROR2),(ROR1<ROR3) S SKIP=1 Q
"RTN","RORX021A",172,0)
 . . . I (ROR1<ROR2),(ROR3=0) S SKIP=1 Q
"RTN","RORX021A",173,0)
 . . . I (ROR1<ROR3),(ROR2=0) S SKIP=1 Q
"RTN","RORX021A",174,0)
 . . . ;--- Skip if no qual or quant test
"RTN","RORX021A",175,0)
 . . . I ROR2+ROR3=0 S SKIP=1 Q
"RTN","RORX021A",176,0)
 . . . S SKIP=0
"RTN","RORX021A",177,0)
 . . ;--- Check if patient should be skipped because of user selected Treatment status
"RTN","RORX021A",178,0)
 . . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"RX"))
"RTN","RORX021A",179,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX021A",180,0)
 . . Q:RC<0  ;error occurred
"RTN","RORX021A",181,0)
 . . I $G(RORXDST("SKIP")) S SKIP=1 K RORXDST("SKIP") Q  ;skip if taking DAA meds
"RTN","RORX021A",182,0)
 . . I RC>0,'+RORTS("EXP") S SKIP=1 Q  ; skip naive patients 
"RTN","RORX021A",183,0)
 . . I RC=0,'+RORTS("NAIVE") S SKIP=1 Q  ;skip experienced patients
"RTN","RORX021A",184,0)
 . . I RC>0,$O(@RORXDST@(RORXCDT),-1) S SKIP=1 Q  ;skip if patient has meds after cutoff
"RTN","RORX021A",185,0)
 . . ;--- Include patient 
"RTN","RORX021A",186,0)
 . . S RORTH=$S(RC>0:"EXP",RC=0:"NAIVE",1:"")
"RTN","RORX021A",187,0)
 . . S SKIP=0
"RTN","RORX021A",188,0)
 . ;--- Check if patient should be skipped because no utilization in the corresponding date range
"RTN","RORX021A",189,0)
 . I 'SKIP D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",190,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX021A",191,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX021A",192,0)
 . . S:'UTIL SKIP=1
"RTN","RORX021A",193,0)
 . ;
"RTN","RORX021A",194,0)
 . ; Skip patient if FIB4 range has been selected and score does not match parameters
"RTN","RORX021A",195,0)
 . I 'SKIP,$G(RORDATA("IDLST")) D
"RTN","RORX021A",196,0)
 . . N OK
"RTN","RORX021A",197,0)
 . . S OK=$$CALCFIB^RORX019A(PATIEN,"",.RORDATA,IEN,.RORLC)
"RTN","RORX021A",198,0)
 . . I OK<0 S SKIP=1 Q
"RTN","RORX021A",199,0)
 . . I '$$INRANGE^RORX019(.RORDATA) S SKIP=1 Q  ;exclude patient from report if ANY score is out of range
"RTN","RORX021A",200,0)
 . . I '$$SKIP^RORX019(.RORDATA) S SKIP=1  ;exclude patient from report with null scores
"RTN","RORX021A",201,0)
 . ;--- Skip the patient if not all selection criteria have been met
"RTN","RORX021A",202,0)
 . I SKIP K ^TMP("RORX021",$J,"PAT",PATIEN)  Q
"RTN","RORX021A",203,0)
 . ;
"RTN","RORX021A",204,0)
 . ;--- Get and store the patient's data  last4^name^treatment status^ICN^FIB-4 score
"RTN","RORX021A",205,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX021A",206,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX021A",207,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORTH_U_TMP_U_$G(RORDATA("SCORE",4))
"RTN","RORX021A",208,0)
 . S NSPT=NSPT+1   ;increment count of selected patients
"RTN","RORX021A",209,0)
 ;
"RTN","RORX021A",210,0)
 D FREE^RORTMP(RORXL)  ;clean up drug list
"RTN","RORX021A",211,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX021A",212,0)
 ;
"RTN","RORX021A",213,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX021A",214,0)
 ;
"RTN","RORX021A",215,0)
 ;
"RTN","RORX021A",216,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",217,0)
 ;
"RTN","RORX021A",218,0)
 ;
"RTN","RORX021A",219,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX021A",220,0)
 ;
"RTN","RORX021A",221,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX021A",222,0)
 ;                               processed.
"RTN","RORX021A",223,0)
 ;
"RTN","RORX021A",224,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX021A",225,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX021A",226,0)
 ;                                 ^02: Drug name
"RTN","RORX021A",227,0)
 ;
"RTN","RORX021A",228,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX021A",229,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX021A",230,0)
 ;
"RTN","RORX021A",231,0)
 ;Return Values:
"RTN","RORX021A",232,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",233,0)
 ;        0  Ok
"RTN","RORX021A",234,0)
 ;        1  Skip this result
"RTN","RORX021A",235,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",236,0)
 ;
"RTN","RORX021A",237,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX021A",238,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX021A",239,0)
 ;--- Skip med if med does not have a generic name
"RTN","RORX021A",240,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX021A",241,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX021A",242,0)
 E  Q 1
"RTN","RORX021A",243,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX021A",244,0)
 ;--- Process the order
"RTN","RORX021A",245,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX021A",246,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX021A",247,0)
 S RXCNT=0
"RTN","RORX021A",248,0)
 ;--- Original prescription
"RTN","RORX021A",249,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX021A",250,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX021A",251,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",252,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",253,0)
 E  D             ;--- Outpatient
"RTN","RORX021A",254,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX021A",255,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX021A",256,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",257,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",258,0)
 ;--- Refills and partials
"RTN","RORX021A",259,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX021A",260,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX021A",261,0)
 . S IRP=0
"RTN","RORX021A",262,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX021A",263,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX021A",264,0)
 . . I TMP>0  S RXCNT=RXCNT+1,TMP=99999999-TMP  D
"RTN","RORX021A",265,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",266,0)
 Q 0
"RTN","RORX021A",267,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX021A",268,0)
 ;
"RTN","RORX021A",269,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX021A",270,0)
 ; NSPT          Number of selected patients
"RTN","RORX021A",271,0)
 ;
"RTN","RORX021A",272,0)
 ; Return Values:
"RTN","RORX021A",273,0)
 ;       <0  Error code
"RTN","RORX021A",274,0)
 ;        0  Ok
"RTN","RORX021A",275,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",276,0)
 ;
"RTN","RORX021A",277,0)
STORE(REPORT,NSPT) ;
"RTN","RORX021A",278,0)
 N RORFDT        ;med fill date
"RTN","RORX021A",279,0)
 N RORLBG        ;lab test type (GT, HCVQT,HCVQL)
"RTN","RORX021A",280,0)
 N RORLVAL       ;lab value
"RTN","RORX021A",281,0)
 N RORRX         ;med name
"RTN","RORX021A",282,0)
 N RORSTNAM      ;
"RTN","RORX021A",283,0)
 N RORLDST
"RTN","RORX021A",284,0)
 N RORXDST
"RTN","RORX021A",285,0)
 N RORICN
"RTN","RORX021A",286,0)
 N RORFIB4
"RTN","RORX021A",287,0)
 N RORBODY,PTAG  ;parent iens
"RTN","RORX021A",288,0)
 N CNT,DATE,DFN,ECNT,IEN,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,THIST
"RTN","RORX021A",289,0)
 N GT,HCVQT,HCV,HCVQL
"RTN","RORX021A",290,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX021A",291,0)
 ;--- Create 'patients' table
"RTN","RORX021A",292,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX021A",293,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX021A",294,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX021A",295,0)
 F  S DFN=$O(^TMP("RORX021",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX021A",296,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX021A",297,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",298,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX021",$J,"PAT",DFN))
"RTN","RORX021A",299,0)
 . ;--- Patient's data
"RTN","RORX021A",300,0)
 . S TMP=$G(@NODE)
"RTN","RORX021A",301,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),THIST=$P(TMP,U,3),RORICN=$P(TMP,U,4),RORFIB4=$P(TMP,U,5)
"RTN","RORX021A",302,0)
 . ;--- get lab results
"RTN","RORX021A",303,0)
 . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"LR"))
"RTN","RORX021A",304,0)
 . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"RX"))
"RTN","RORX021A",305,0)
 . ;--- Gets most recent result for HepC Qual, HepC Quant and GT
"RTN","RORX021A",306,0)
 . ;    HCVQT=date of most recent quanitative test^result
"RTN","RORX021A",307,0)
 . ;    HCVQL=date of most recent qualitative test^result
"RTN","RORX021A",308,0)
 . ;    GT=date of most recent GT test^result
"RTN","RORX021A",309,0)
 . K HCVQT,HCVQL,GT
"RTN","RORX021A",310,0)
 . F RORLBG="HCVQT","HCVQL","GT" D
"RTN","RORX021A",311,0)
 . . S NODE=RORLBG,@NODE="^"
"RTN","RORX021A",312,0)
 . . S RORFDT=$O(@RORLDST@(RORLBG,""))
"RTN","RORX021A",313,0)
 . . Q:RORFDT=""
"RTN","RORX021A",314,0)
 . . S RORLVAL=$G(@RORLDST@(RORLBG,RORFDT))
"RTN","RORX021A",315,0)
 . . S RORFDT=9999999-RORFDT
"RTN","RORX021A",316,0)
 . . S RORFDT=RORFDT\1  ;strip time  
"RTN","RORX021A",317,0)
 . . S @NODE=(RORFDT)_U_RORLVAL
"RTN","RORX021A",318,0)
 . ;--- get most recent registry med if experienced
"RTN","RORX021A",319,0)
 . ;--- if more than one med give preference to INTERFERON
"RTN","RORX021A",320,0)
 . S RORFDT=$O(@RORXDST@("")),RORRX=""
"RTN","RORX021A",321,0)
 . I THIST="EXP" D
"RTN","RORX021A",322,0)
 . . S RORSTNAM="",RORRX=""
"RTN","RORX021A",323,0)
 . . F  S RORSTNAM=$O(@RORXDST@(RORFDT,RORSTNAM)) Q:RORSTNAM=""  D
"RTN","RORX021A",324,0)
 . . . S RORRX=$S(RORRX="":RORSTNAM,RORRX["INTERFERON":RORRX,1:RORSTNAM)
"RTN","RORX021A",325,0)
 . . S RORFDT=99999999-RORFDT
"RTN","RORX021A",326,0)
 . . S RORFDT=RORFDT\1
"RTN","RORX021A",327,0)
 . S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,RORBODY,,DFN)
"RTN","RORX021A",328,0)
 . ;--- give preference to quant result over qual result
"RTN","RORX021A",329,0)
 . S HCV=$S(+$G(HCVQL)>+$G(HCVQT):HCVQL,$G(HCVQT):HCVQT,1:"")
"RTN","RORX021A",330,0)
 . ;--- store
"RTN","RORX021A",331,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,PTAG,1)
"RTN","RORX021A",332,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,PTAG,2)
"RTN","RORX021A",333,0)
 . ; I $G(RORDATA("LIST"))'["4" D ADDVAL^RORTSK11(RORTSK,"STATUS",THIST,PTAG,1)
"RTN","RORX021A",334,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV_DATE",$P(HCV,U),PTAG,1)
"RTN","RORX021A",335,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV",$P(HCV,U,2),PTAG,3)
"RTN","RORX021A",336,0)
 . D ADDVAL^RORTSK11(RORTSK,"GT",$P(GT,U,2),PTAG,1)
"RTN","RORX021A",337,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",RORFDT,PTAG,1)
"RTN","RORX021A",338,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_MED",RORRX,PTAG,1)
"RTN","RORX021A",339,0)
 . I $G(RORDATA("IDLST"))'="" D
"RTN","RORX021A",340,0)
 . . S:RORDATA("IDLST")["4" TMP=$$ADDVAL^RORTSK11(RORTSK,"FIB4",RORFIB4,PTAG,3)
"RTN","RORX021A",341,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",RORICN,PTAG,1)
"RTN","RORX021A",342,0)
 . S PTCNT=PTCNT+1
"RTN","RORX021A",343,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX021A",344,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX021A",345,0)
 ;---
"RTN","RORX021A",346,0)
 Q ECNT
"RTN","RORXU002")
0^2^B144602530^B137521488
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ;8/3/11 3:55pm
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10,13,15,17,19,21,22,26**;Feb 17, 2006;Build 53
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 ; #417    Read access to .01 field of file #40.8 (controlled)
"RTN","RORXU002",13,0)
 ; #10040  Read access to file #44 (supported)
"RTN","RORXU002",14,0)
 ; #5747   $$VLTD^ICDEX (controlled)
"RTN","RORXU002",15,0)
 ;
"RTN","RORXU002",16,0)
 ;******************************************************************************
"RTN","RORXU002",17,0)
 ;******************************************************************************
"RTN","RORXU002",18,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU002",19,0)
 ;        
"RTN","RORXU002",20,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU002",21,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU002",22,0)
 ;ROR*1.5*10   APR  2010   A SAUNDERS   Modified Lab Tests Ranges section in
"RTN","RORXU002",23,0)
 ;                                      PARAMS tag to include the 3 new reports.
"RTN","RORXU002",24,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added Division and Clinic sections in
"RTN","RORXU002",25,0)
 ;                                      PARAMS tag (pulled from RORXU006).
"RTN","RORXU002",26,0)
 ;ROR*1.5*15   JUN  2011   C RAY        Added HIV_DX
"RTN","RORXU002",27,0)
 ; 
"RTN","RORXU002",28,0)
 ;ROR*1.5*17   AUG  2011   C RAY        Modified to allow 
"RTN","RORXU002",29,0)
 ;                                      PATIENTS,OPTIONS params to have other
"RTN","RORXU002",30,0)
 ;                                      values besides boolean
"RTN","RORXU002",31,0)
 ;                                      Modified to add DATE_RANGE_4
"RTN","RORXU002",32,0)
 ;ROR*1.5*19   FEB  2012   J SCOTT      Support for ICD-10 Coding System.
"RTN","RORXU002",33,0)
 ;
"RTN","RORXU002",34,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added flags for GENDER (SEX) selection on
"RTN","RORXU002",35,0)
 ;                                      reports in PATIENTS XML tag
"RTN","RORXU002",36,0)
 ;                                      Added ICN column if Additional Identifier
"RTN","RORXU002",37,0)
 ;                                       requested.
"RTN","RORXU002",38,0)
 ;
"RTN","RORXU002",39,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Added flags for OEF/OIF period of service
"RTN","RORXU002",40,0)
 ;                                      selection on reports in PATIENTS XML tag
"RTN","RORXU002",41,0)
 ;
"RTN","RORXU002",42,0)
 ;ROR*1.5*26   JAN 2015    T KOPP       Added flags for SVR ONLY or NO SVR ONLY
"RTN","RORXU002",43,0)
 ;                                      selection on reports in PATIENTS XML tag.
"RTN","RORXU002",44,0)
 ;                                      Suppress FIB4 header on DAA Potential
"RTN","RORXU002",45,0)
 ;                                      Candidates report if FIB-4 parameter not
"RTN","RORXU002",46,0)
 ;                                      selected
"RTN","RORXU002",47,0)
 ;
"RTN","RORXU002",48,0)
 ;******************************************************************************
"RTN","RORXU002",49,0)
 ;******************************************************************************
"RTN","RORXU002",50,0)
 Q
"RTN","RORXU002",51,0)
 ;
"RTN","RORXU002",52,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",53,0)
 ;
"RTN","RORXU002",54,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",55,0)
 ;               is terminator is returned
"RTN","RORXU002",56,0)
 ;
"RTN","RORXU002",57,0)
 ; Return Values:
"RTN","RORXU002",58,0)
 ;       ""  End of definition
"RTN","RORXU002",59,0)
 ;      ...  Name of the column
"RTN","RORXU002",60,0)
 ;
"RTN","RORXU002",61,0)
COLSCAN(TERM) ;
"RTN","RORXU002",62,0)
 N CH,I,TOKEN
"RTN","RORXU002",63,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",64,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",65,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",66,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",67,0)
 Q TOKEN
"RTN","RORXU002",68,0)
 ;
"RTN","RORXU002",69,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",70,0)
DATE(DT) ;
"RTN","RORXU002",71,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",72,0)
 ;
"RTN","RORXU002",73,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",74,0)
 ;
"RTN","RORXU002",75,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",76,0)
 ;
"RTN","RORXU002",77,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",78,0)
 ;
"RTN","RORXU002",79,0)
 ; Return Values:
"RTN","RORXU002",80,0)
 ;       <0  Error code
"RTN","RORXU002",81,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",82,0)
 ;
"RTN","RORXU002",83,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",84,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP,DIERR
"RTN","RORXU002",85,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",86,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",87,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",88,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",89,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",90,0)
 ;---
"RTN","RORXU002",91,0)
 S IENS=REGIEN_","
"RTN","RORXU002",92,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",93,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",94,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",95,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",96,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",97,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",98,0)
 Q HEADER
"RTN","RORXU002",99,0)
 ;
"RTN","RORXU002",100,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",101,0)
 ;
"RTN","RORXU002",102,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",103,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",104,0)
 ;               this variable.
"RTN","RORXU002",105,0)
 ;
"RTN","RORXU002",106,0)
LIST(LIST) ;
"RTN","RORXU002",107,0)
 N I,TMP,VAL
"RTN","RORXU002",108,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",109,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",110,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",111,0)
 Q
"RTN","RORXU002",112,0)
 ;
"RTN","RORXU002",113,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",114,0)
 ;
"RTN","RORXU002",115,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",116,0)
 ;               the options as subscripts
"RTN","RORXU002",117,0)
 ;
"RTN","RORXU002",118,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",119,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",120,0)
 ;
"RTN","RORXU002",121,0)
 ; Return Values:
"RTN","RORXU002",122,0)
 ;      ...  Text description of the options
"RTN","RORXU002",123,0)
 ;
"RTN","RORXU002",124,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",125,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",126,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",127,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",128,0)
 S TEXT="",I=0
"RTN","RORXU002",129,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",130,0)
 . S NS=0
"RTN","RORXU002",131,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",132,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",133,0)
 . Q:'NS
"RTN","RORXU002",134,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",135,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",136,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",137,0)
 ;
"RTN","RORXU002",138,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",139,0)
 ;
"RTN","RORXU002",140,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",141,0)
 ;
"RTN","RORXU002",142,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",143,0)
 ;
"RTN","RORXU002",144,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",145,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",146,0)
 ;
"RTN","RORXU002",147,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",148,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",149,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",150,0)
 ;
"RTN","RORXU002",151,0)
 ; Return Values:
"RTN","RORXU002",152,0)
 ;       <0  Error code
"RTN","RORXU002",153,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",154,0)
 ;
"RTN","RORXU002",155,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",156,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP,IEN,DIERR
"RTN","RORXU002",157,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",158,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",159,0)
 ;
"RTN","RORXU002",160,0)
 ;=== Registry name
"RTN","RORXU002",161,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",162,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",163,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",164,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",165,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",166,0)
 ;
"RTN","RORXU002",167,0)
 ;=== Alternate date ranges
"RTN","RORXU002",168,0)
 F I=2:1:4  D  Q:RC<0
"RTN","RORXU002",169,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",170,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",171,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",172,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",173,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",174,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",175,0)
 Q:RC<0 RC
"RTN","RORXU002",176,0)
 ;
"RTN","RORXU002",177,0)
 ;=== Main date range
"RTN","RORXU002",178,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",179,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",180,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",181,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",182,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",183,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",184,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",185,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",186,0)
 ;
"RTN","RORXU002",187,0)
 ;=== Task comment
"RTN","RORXU002",188,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",189,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",190,0)
 ;
"RTN","RORXU002",191,0)
 ;=== Clinic Selection - patch 13
"RTN","RORXU002",192,0)
 D:$D(RORTSK("PARAMS","CLINICS","C"))
"RTN","RORXU002",193,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",194,0)
 . S IEN=0
"RTN","RORXU002",195,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",196,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",197,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU002",198,0)
 . . Q:TMP=""
"RTN","RORXU002",199,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU002",200,0)
 D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU002",201,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARAMS)
"RTN","RORXU002",202,0)
 ;
"RTN","RORXU002",203,0)
 ;=== Division Selection - patch 13
"RTN","RORXU002",204,0)
 D:$D(RORTSK("PARAMS","DIVISIONS","C"))
"RTN","RORXU002",205,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",206,0)
 . S IEN=0
"RTN","RORXU002",207,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",208,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",209,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU002",210,0)
 . . Q:TMP=""
"RTN","RORXU002",211,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU002",212,0)
 D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU002",213,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARAMS)
"RTN","RORXU002",214,0)
 ;
"RTN","RORXU002",215,0)
 ;
"RTN","RORXU002",216,0)
 ;=== Patient selection and Options
"RTN","RORXU002",217,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",218,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",219,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",220,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",221,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",222,0)
 . S TMP=""
"RTN","RORXU002",223,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",224,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,$G(BUF(TMP)))
"RTN","RORXU002",225,0)
 . ;--- Compile the flags
"RTN","RORXU002",226,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",227,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",228,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",229,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",230,0)
 . . I $D(BUF("SEX")) S FLAGS=FLAGS_$S(BUF("SEX")="M":"W",BUF("SEX")="F":"M",1:"")
"RTN","RORXU002",231,0)
 . . I $D(BUF("OEF")) D
"RTN","RORXU002",232,0)
 . . . S FLAGS=FLAGS_$S(BUF("OEF")=1:"I",BUF("OEF")=-1:"E",1:"")
"RTN","RORXU002",233,0)
 . . I $D(BUF("SVR")) S FLAGS=FLAGS_$S(BUF("SVR")=1:"S",BUF("SVR")=0:"V",1:"")
"RTN","RORXU002",234,0)
 Q:RC<0 RC
"RTN","RORXU002",235,0)
 ;
"RTN","RORXU002",236,0)
 ;=== Other Registries
"RTN","RORXU002",237,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",238,0)
 . N NODE,REGIEN
"RTN","RORXU002",239,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",240,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",241,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",242,0)
 . S REGIEN=0
"RTN","RORXU002",243,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",244,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",245,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",246,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",247,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",248,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",249,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",250,0)
 ;
"RTN","RORXU002",251,0)
 ;=== Local Fields
"RTN","RORXU002",252,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",253,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",254,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",255,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",256,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",257,0)
 . S IEN=0
"RTN","RORXU002",258,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",259,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",260,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",261,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",262,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",263,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",264,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",265,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",266,0)
 ;
"RTN","RORXU002",267,0)
 ;=== Lab test ranges
"RTN","RORXU002",268,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",269,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",270,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",271,0)
 . I $G(RORTSK("EP"))["MLDRANGE"!($G(RORTSK("EP"))["HCVDAA") S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",272,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",273,0)
 . N GRC,NODE
"RTN","RORXU002",274,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",275,0)
 . S GRC=0
"RTN","RORXU002",276,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",277,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",278,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",279,0)
 ;
"RTN","RORXU002",280,0)
 ;=== ICD filter/group/codes
"RTN","RORXU002",281,0)
 N LEV1FILT,LEV2GRP,LEV3ICD,ICDIEN,ICDCODE,GRPNAME,FILTER,ICDDESC,RORXMLNODE,RORICDSYS
"RTN","RORXU002",282,0)
 S FILTER=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORXU002",283,0)
 I $L(FILTER)>0 D  ;quit if no ICD filter exists
"RTN","RORXU002",284,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICDFILT",,PARAMS)
"RTN","RORXU002",285,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",286,0)
 . ;add filter value to the output
"RTN","RORXU002",287,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",288,0)
 . ;if there's an ICD group, process it
"RTN","RORXU002",289,0)
 . I $D(RORTSK("PARAMS","ICDFILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",290,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICDFILT","G"))
"RTN","RORXU002",291,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",292,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",293,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",294,0)
 ... I LEV2GRP'>0  S RC=LEV2GRP Q 
"RTN","RORXU002",295,0)
 ... ;add group name to the output
"RTN","RORXU002",296,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",297,0)
 ... S ICDIEN=0
"RTN","RORXU002",298,0)
 ... F  S ICDIEN=$O(@NODE@(GRPNAME,"C",ICDIEN)) Q:ICDIEN'>0  D
"RTN","RORXU002",299,0)
 .... S ICDCODE=$P(@NODE@(GRPNAME,"C",ICDIEN),U,1) Q:ICDCODE=""
"RTN","RORXU002",300,0)
 .... S RORICDSYS=$P(@NODE@(GRPNAME,"C",ICDIEN),U,2)
"RTN","RORXU002",301,0)
 .... ;get diagnosis description
"RTN","RORXU002",302,0)
 .... S ICDDESC=$$VLTD^ICDEX(ICDIEN)
"RTN","RORXU002",303,0)
 .... S RORXMLNODE=$S(RORICDSYS=1:"ICD9",1:"ICD10")
"RTN","RORXU002",304,0)
 .... S LEV3ICD=$$ADDVAL^RORTSK11(RORTSK,RORXMLNODE,ICDDESC,LEV2GRP)
"RTN","RORXU002",305,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD,"ID",ICDCODE)
"RTN","RORXU002",306,0)
 ;
"RTN","RORXU002",307,0)
 ;=== get Max Date
"RTN","RORXU002",308,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",309,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",310,0)
 ;
"RTN","RORXU002",311,0)
 ;=== get HIV_DX
"RTN","RORXU002",312,0)
 N RORMODE S RORMODE=$$PARAM^RORTSK01("HIV_DX")
"RTN","RORXU002",313,0)
 S RORMODE=$S(RORMODE=1:"Include",RORMODE=-1:"Exclude",1:"")
"RTN","RORXU002",314,0)
 I RORMODE'="" D
"RTN","RORXU002",315,0)
 . D ADDVAL^RORTSK11(RORTSK,"HIV_DX",RORMODE,PARAMS)
"RTN","RORXU002",316,0)
 . S FLAGS=FLAGS_"H"
"RTN","RORXU002",317,0)
 ;
"RTN","RORXU002",318,0)
 ;=== Defaults
"RTN","RORXU002",319,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",320,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",321,0)
 ;
"RTN","RORXU002",322,0)
 ;=== Success
"RTN","RORXU002",323,0)
 Q PARAMS
"RTN","RORXU002",324,0)
 ;
"RTN","RORXU002",325,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",326,0)
 ;
"RTN","RORXU002",327,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",328,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",329,0)
 ;               examples of table definitions.
"RTN","RORXU002",330,0)
 ;
"RTN","RORXU002",331,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",332,0)
 ;
"RTN","RORXU002",333,0)
 ; Return Values:
"RTN","RORXU002",334,0)
 ;       <0  Error code
"RTN","RORXU002",335,0)
 ;        0  Ok
"RTN","RORXU002",336,0)
 ;
"RTN","RORXU002",337,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",338,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",339,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",340,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",341,0)
 S RC=0
"RTN","RORXU002",342,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",343,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",344,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",345,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",346,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",347,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",348,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",349,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",350,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",351,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",352,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",353,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",354,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",355,0)
 ;
"RTN","RORXU002",356,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",357,0)
 ;
"RTN","RORXU002",358,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",359,0)
 ;
"RTN","RORXU002",360,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",361,0)
 N COLUMN,IT,NAME,OK,ROR,TERM
"RTN","RORXU002",362,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",363,0)
 . I '$D(^TMP($J,"RORSELCOL")) D  ; set up special columns selection criteria
"RTN","RORXU002",364,0)
 . . F IT=1:1 X "S ROR=$P($T(SELCOL+"_IT_"^RORXU002),"";;"",2)" Q:$P(ROR,U)=""  D
"RTN","RORXU002",365,0)
 . . . S ^TMP($J,"RORSELCOL",$P(ROR,U))=$P(ROR,U,2,999)
"RTN","RORXU002",366,0)
 . I $D(^TMP($J,"RORSELCOL",NAME)) D  Q:'OK
"RTN","RORXU002",367,0)
 . . X ^TMP($J,"RORSELCOL",NAME) S OK=$T
"RTN","RORXU002",368,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",369,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",370,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",371,0)
 Q
"RTN","RORXU002",372,0)
 ;
"RTN","RORXU002",373,0)
 ;Setup of values in SELCOL is:
"RTN","RORXU002",374,0)
 ;name of selected optional column^statement to execute to set $T if the condition to include this field has been met
"RTN","RORXU002",375,0)
 ;
"RTN","RORXU002",376,0)
SELCOL ;selected optional fields and screen criteria is listed here
"RTN","RORXU002",377,0)
 ;;ICN^I $$PARAM^RORTSK01("PATIENTS","ICN")
"RTN","RORXU002",378,0)
 ;;FIB4^I $D(RORTSK("PARAMS","LRGRANGES","C",4))
"RTN","RORXU002",379,0)
 ;;
"RTN","RORXU005")
0^8^B44286894^B31439969
"RTN","RORXU005",1,0)
RORXU005 ;HCIOFO/SG - REPORT BUILDER UTILITIES ;5/25/11 11:48am
"RTN","RORXU005",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,15,21,22,26**;Feb 17, 2006;Build 53
"RTN","RORXU005",3,0)
 ;
"RTN","RORXU005",4,0)
 ;******************************************************************************
"RTN","RORXU005",5,0)
 ;******************************************************************************
"RTN","RORXU005",6,0)
 ;
"RTN","RORXU005",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU005",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU005",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU005",10,0)
 ;ROR*1.5*22   FEB  2014   T KOPP       Added tag SKIPOEF to return the result
"RTN","RORXU005",11,0)
 ;                                      if the period of service of patient
"RTN","RORXU005",12,0)
 ;                                      matches OEF/OIF selection criteria.
"RTN","RORXU005",13,0)
 ;ROR*1.5*26   JAN  2015   T KOPP       Added check for SVR match in report
"RTN","RORXU005",14,0)
 ;                                      screen logic, flags S and V
"RTN","RORXU005",15,0)
 ;****************************************************************************** 
"RTN","RORXU005",16,0)
 ; This routine uses the following IAs:
"RTN","RORXU005",17,0)
 ;
"RTN","RORXU005",18,0)
 ; #10035        Direct read of the DOD field of the file #2
"RTN","RORXU005",19,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORXU005",20,0)
 ;
"RTN","RORXU005",21,0)
 Q
"RTN","RORXU005",22,0)
 ;
"RTN","RORXU005",23,0)
 ;***** CALLBACK FUNCTION FOR DRUG SEARCH API
"RTN","RORXU005",24,0)
REIMBCB(RORDST,ORDER,FLAGS,DRUG,DATE) ;
"RTN","RORXU005",25,0)
 S RORDST=1
"RTN","RORXU005",26,0)
 Q 2
"RTN","RORXU005",27,0)
 ;
"RTN","RORXU005",28,0)
 ;***** RETURNS THE REIMBURSEMENT LEVEL FOR THE PATIENT
"RTN","RORXU005",29,0)
 ;
"RTN","RORXU005",30,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",31,0)
 ;
"RTN","RORXU005",32,0)
 ; ROR8DRGS      Either closed root of the ARV drug list prepared by
"RTN","RORXU005",33,0)
 ;               the $$DRUGLIST^RORUTL16 or the Registry IEN. In the
"RTN","RORXU005",34,0)
 ;               latter case, the list will be compiled automatically.
"RTN","RORXU005",35,0)
 ;
"RTN","RORXU005",36,0)
 ; STDT          Start date
"RTN","RORXU005",37,0)
 ; ENDT          End date
"RTN","RORXU005",38,0)
 ;
"RTN","RORXU005",39,0)
 ; Return Values:
"RTN","RORXU005",40,0)
 ;       <0  Error code
"RTN","RORXU005",41,0)
 ;        0  Neither Clinical AIDS nor ARV drugs
"RTN","RORXU005",42,0)
 ;       10  ARV drugs
"RTN","RORXU005",43,0)
 ;       20  Clinical AIDS
"RTN","RORXU005",44,0)
 ;       30  Both Clinical AIDS and ARV drugs
"RTN","RORXU005",45,0)
 ;
"RTN","RORXU005",46,0)
REIMBLVL(RORIEN,ROR8DRGS,STDT,ENDT) ;
"RTN","RORXU005",47,0)
 N PATIEN,RC,RLVL,RORDST
"RTN","RORXU005",48,0)
 S RLVL=0
"RTN","RORXU005",49,0)
 ;--- Clinical AIDS
"RTN","RORXU005",50,0)
 S:$$CLINAIDS^RORHIVUT(+RORIEN,ENDT) RLVL=RLVL+20
"RTN","RORXU005",51,0)
 ;--- ARV Drugs
"RTN","RORXU005",52,0)
 S PATIEN=$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",53,0)
 S RORDST("RORCB")="$$REIMBCB^RORXU005"
"RTN","RORXU005",54,0)
 S RC=$$RXSEARCH^RORUTL14(PATIEN,ROR8DRGS,.RORDST,"IOV",STDT,ENDT)
"RTN","RORXU005",55,0)
 S:$G(RORDST)>0 RLVL=RLVL+10
"RTN","RORXU005",56,0)
 ;--- Reimbursement level
"RTN","RORXU005",57,0)
 Q $S(RC<0:RC,1:RLVL)
"RTN","RORXU005",58,0)
 ;
"RTN","RORXU005",59,0)
 ;***** RETURNS THE PATIENT'S LIST OF RISK FACTORS
"RTN","RORXU005",60,0)
 ;
"RTN","RORXU005",61,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",62,0)
 ;
"RTN","RORXU005",63,0)
 ; Return Values:
"RTN","RORXU005",64,0)
 ;       <0  Error code
"RTN","RORXU005",65,0)
 ;       ""  No risk factors have been found
"RTN","RORXU005",66,0)
 ;  " ... "  A string containing the risk factor numbers
"RTN","RORXU005",67,0)
 ;           separated by commas and spaces
"RTN","RORXU005",68,0)
 ;
"RTN","RORXU005",69,0)
RISKS(RORIEN) ;
"RTN","RORXU005",70,0)
 Q:'$D(^RORDATA(799.4,+RORIEN,0)) ""
"RTN","RORXU005",71,0)
 N FLD,FLDLST,I,IENS,RISKLST,RORBUF,RORMSG,DIERR
"RTN","RORXU005",72,0)
 S FLDLST="14.01;14.02;14.03;14.04;14.08;14.07;14.09;14.1;14.11;14.12;14.13;14.16;14.17"
"RTN","RORXU005",73,0)
 ;--- Load the risk fields
"RTN","RORXU005",74,0)
 S IENS=(+RORIEN)_","
"RTN","RORXU005",75,0)
 D GETS^DIQ(799.4,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORXU005",76,0)
 Q:$G(DIERR) $$DBS^RORERR(799.4,-9,,,799.4,IENS)
"RTN","RORXU005",77,0)
 ;--- Process the data
"RTN","RORXU005",78,0)
 S RISKLST=""
"RTN","RORXU005",79,0)
 F I=1:1  S FLD=$P(FLDLST,";",I)  Q:FLD=""  D:FLD>0
"RTN","RORXU005",80,0)
 . S:$G(RORBUF(799.4,IENS,FLD,"I"))=1 RISKLST=RISKLST_", "_I
"RTN","RORXU005",81,0)
 Q $P(RISKLST,", ",2,999)
"RTN","RORXU005",82,0)
 ;
"RTN","RORXU005",83,0)
 ;***** DETERMINES IF THE PATIENT SHOULD NOT BE INCLUDED IN THE REPORT
"RTN","RORXU005",84,0)
 ;
"RTN","RORXU005",85,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",86,0)
 ;
"RTN","RORXU005",87,0)
 ; FLAGS         Flags that control the execution (can be combined)
"RTN","RORXU005",88,0)
 ;
"RTN","RORXU005",89,0)
 ;                 C  Skip confirmed patients
"RTN","RORXU005",90,0)
 ;                 G  Skip pending patients
"RTN","RORXU005",91,0)
 ;
"RTN","RORXU005",92,0)
 ;                 D  Skip deceased patients
"RTN","RORXU005",93,0)
 ;                 L  Skip alive patients
"RTN","RORXU005",94,0)
 ;
"RTN","RORXU005",95,0)
 ;                 P  Skip patients confirmed before the start date
"RTN","RORXU005",96,0)
 ;                 N  Skip patients confirmed during the report
"RTN","RORXU005",97,0)
 ;                    time frame
"RTN","RORXU005",98,0)
 ;                 F  Skip patients added after the end date
"RTN","RORXU005",99,0)
 ;
"RTN","RORXU005",100,0)
 ;                 H  Skip patients without local HIV diagnosis
"RTN","RORXU005",101,0)
 ;
"RTN","RORXU005",102,0)
 ;                 M  Skip male patients
"RTN","RORXU005",103,0)
 ;                 W  Skip female patients
"RTN","RORXU005",104,0)
 ;
"RTN","RORXU005",105,0)
 ;                 O  Process LOCAL_FIELDS
"RTN","RORXU005",106,0)
 ;                 R  Process OTHER_REGISTRIES
"RTN","RORXU005",107,0)
 ;
"RTN","RORXU005",108,0)
 ;                 E  Exclude patients with OEF/OIF period of service
"RTN","RORXU005",109,0)
 ;                 I  Include only patients with OEF/OIF period of service
"RTN","RORXU005",110,0)
 ;
"RTN","RORXU005",111,0)
 ;                 S  Include only patients with SVR
"RTN","RORXU005",112,0)
 ;                 V  Include only patients with No SVR
"RTN","RORXU005",113,0)
 ;
"RTN","RORXU005",114,0)
 ; [STDT]        Start date of the report (FileMan).
"RTN","RORXU005",115,0)
 ;               Time is ignored and the beginning of the day is
"RTN","RORXU005",116,0)
 ;               considered as the boundary (STDT\1).
"RTN","RORXU005",117,0)
 ;
"RTN","RORXU005",118,0)
 ;               If not defined or not greater than 0 then 0 is used.
"RTN","RORXU005",119,0)
 ;
"RTN","RORXU005",120,0)
 ; [ENDT]        End date of the report (FileMan).
"RTN","RORXU005",121,0)
 ;               Time is ignored and the end of the day is
"RTN","RORXU005",122,0)
 ;               considered as the boundary (ENDT\1+1).
"RTN","RORXU005",123,0)
 ;
"RTN","RORXU005",124,0)
 ;               If not defined or not greater than 0 then 9999999
"RTN","RORXU005",125,0)
 ;               is used.
"RTN","RORXU005",126,0)
 ;
"RTN","RORXU005",127,0)
 ; Return Values:
"RTN","RORXU005",128,0)
 ;        0  Include the patient's data in the report
"RTN","RORXU005",129,0)
 ;        1  Skip the patient
"RTN","RORXU005",130,0)
 ;
"RTN","RORXU005",131,0)
SKIP(RORIEN,FLAGS,STDT,ENDT) ;
"RTN","RORXU005",132,0)
 N DOD,IEN,MODE,NODE,PTIEN,REGIEN,SEX,SKIP,STATUS,TMP
"RTN","RORXU005",133,0)
 S SKIP=0
"RTN","RORXU005",134,0)
 ;--- Always skip patients marked for deletion
"RTN","RORXU005",135,0)
 Q:$$SKIPNA(RORIEN,FLAGS,.STATUS) 1
"RTN","RORXU005",136,0)
 ;---Include all registry patients if flags are not provided
"RTN","RORXU005",137,0)
 Q:FLAGS="" 0
"RTN","RORXU005",138,0)
 ;
"RTN","RORXU005",139,0)
 ;--- Confirmed
"RTN","RORXU005",140,0)
 I FLAGS["C"  Q:STATUS'=4 1
"RTN","RORXU005",141,0)
 ;
"RTN","RORXU005",142,0)
 ;--- Alive/Deceased patients
"RTN","RORXU005",143,0)
 S STDT=$S($G(STDT)>0:STDT\1,1:0)
"RTN","RORXU005",144,0)
 I $TR(FLAGS,"LD")'=FLAGS  D  Q:$S(TMP:FLAGS["L",1:FLAGS["D") 1
"RTN","RORXU005",145,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",146,0)
 . S DOD=+$P($G(^DPT(PTIEN,.35)),U)
"RTN","RORXU005",147,0)
 . S TMP=$S(DOD>0:DOD'<STDT,1:1)
"RTN","RORXU005",148,0)
 ;
"RTN","RORXU005",149,0)
 ;--- Male/Female patients screen
"RTN","RORXU005",150,0)
 I FLAGS["M"!(FLAGS["W") D  Q:SKIP 1
"RTN","RORXU005",151,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",152,0)
 . S SKIP=$$SKIPSEX(PTIEN,FLAGS)
"RTN","RORXU005",153,0)
 ;
"RTN","RORXU005",154,0)
 ;--- OEF/OIF period of service patients screen
"RTN","RORXU005",155,0)
 I FLAGS["E"!(FLAGS["I") D  Q:SKIP 1
"RTN","RORXU005",156,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",157,0)
 . S SKIP=$$SKIPOEF(PTIEN,FLAGS)
"RTN","RORXU005",158,0)
 ;
"RTN","RORXU005",159,0)
 ;--- SVR patients screen
"RTN","RORXU005",160,0)
 I FLAGS["V"!(FLAGS["S") D  Q:SKIP 1
"RTN","RORXU005",161,0)
 . N REGIEN,RC,RORXL,RORLDST,RORXDST
"RTN","RORXU005",162,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",163,0)
 . S REGIEN=$$GET1^DIQ(798,RORIEN_",",.02,"I")
"RTN","RORXU005",164,0)
 . ;== Lab parameters
"RTN","RORXU005",165,0)
 . S RORLDST("RORCB")="$$LTSCB^RORX023A"
"RTN","RORXU005",166,0)
 . ;== Pharm parameters
"RTN","RORXU005",167,0)
 . S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORXU005",168,0)
 . S RORXDST("RORCB")="$$RXOCB^RORX023A"   ;call back routine
"RTN","RORXU005",169,0)
 . ;--- RX list of HepC registry drugs
"RTN","RORXU005",170,0)
 . S RORXL=$$ALLOC^RORTMP()
"RTN","RORXU005",171,0)
 . S RC=$$DRUGLIST^RORUTL16(RORXL,REGIEN)
"RTN","RORXU005",172,0)
 . S RC=$$SVR^RORX023A(PTIEN,2000101,DT,REGIEN,RORXL,"",$$FMADD^XLFDT(DT,1),.RORLDST,.RORXDST)
"RTN","RORXU005",173,0)
 . D POP^RORTMP(RORXL)
"RTN","RORXU005",174,0)
 . I FLAGS["V" S SKIP=$S(RC=0:0,1:1) Q  ; skip if SVR and not SVR requested
"RTN","RORXU005",175,0)
 . I FLAGS["S" S SKIP=$S(RC=1:0,1:1)    ; skip if not SVR and SVR requested
"RTN","RORXU005",176,0)
 ;
"RTN","RORXU005",177,0)
 ;--- Confirmed before/during/after the date range
"RTN","RORXU005",178,0)
 S ENDT=$S($G(ENDT)>0:ENDT\1,1:9999999)+1
"RTN","RORXU005",179,0)
 I $TR(FLAGS,"PNF")'=FLAGS  D  Q:TMP 1
"RTN","RORXU005",180,0)
 . S TMP=+$$CONFDT^RORUTL18(RORIEN)  ; Date Confirmed
"RTN","RORXU005",181,0)
 . S TMP=$S(TMP<STDT:FLAGS["P",TMP>ENDT:FLAGS["F",1:FLAGS["N")
"RTN","RORXU005",182,0)
 ;
"RTN","RORXU005",183,0)
 ;--- Other registries
"RTN","RORXU005",184,0)
 I FLAGS["R"  D  Q:SKIP 1
"RTN","RORXU005",185,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU005",186,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",187,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",188,0)
 . S REGIEN=0
"RTN","RORXU005",189,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:SKIP
"RTN","RORXU005",190,0)
 . . S MODE=+$G(@NODE@(REGIEN))  Q:'MODE
"RTN","RORXU005",191,0)
 . . S IEN=$$PRRIEN^RORUTL01(PTIEN,REGIEN)
"RTN","RORXU005",192,0)
 . . I IEN'>0  S SKIP=1
"RTN","RORXU005",193,0)
 . . E  S:$$SKIPNA(IEN,FLAGS) SKIP=1
"RTN","RORXU005",194,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",195,0)
 ;
"RTN","RORXU005",196,0)
 ;--- Local Fields
"RTN","RORXU005",197,0)
 I FLAGS["O"  D  Q:SKIP 1
"RTN","RORXU005",198,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU005",199,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",200,0)
 . S IEN=0
"RTN","RORXU005",201,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:SKIP
"RTN","RORXU005",202,0)
 . . S MODE=+$G(@NODE@(IEN))  Q:'MODE
"RTN","RORXU005",203,0)
 . . S:'$D(^RORDATA(798,RORIEN,20,"B",IEN)) SKIP=1
"RTN","RORXU005",204,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",205,0)
 ;
"RTN","RORXU005",206,0)
 ;--- Local HIV Diagnosis
"RTN","RORXU005",207,0)
 I FLAGS["H" D  Q:SKIP 1
"RTN","RORXU005",208,0)
 . N RORV
"RTN","RORXU005",209,0)
 . S MODE=+RORTSK("PARAMS","HIV_DX") Q:'MODE
"RTN","RORXU005",210,0)
 . S RORV=+$P($G(^RORDATA(799.4,RORIEN,12)),U,8)
"RTN","RORXU005",211,0)
 . S:RORV'=1 SKIP=1
"RTN","RORXU005",212,0)
 . S:MODE<0 SKIP='SKIP
"RTN","RORXU005",213,0)
 ;
"RTN","RORXU005",214,0)
 ;
"RTN","RORXU005",215,0)
 ;--- Include in the report
"RTN","RORXU005",216,0)
 Q 0
"RTN","RORXU005",217,0)
 ;
"RTN","RORXU005",218,0)
 ;***** CHECKS STATUS OF THE PATIENT'S REGISTRY RECORD (internal)
"RTN","RORXU005",219,0)
 ;
"RTN","RORXU005",220,0)
 ; IEN798        IEN of the patient's record in the registry
"RTN","RORXU005",221,0)
 ;
"RTN","RORXU005",222,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",223,0)
 ;
"RTN","RORXU005",224,0)
 ; [.STATUS]     Status code is returned via this parameter.
"RTN","RORXU005",225,0)
 ;
"RTN","RORXU005",226,0)
 ; Return Values:
"RTN","RORXU005",227,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",228,0)
 ;        1  Skip the patient
"RTN","RORXU005",229,0)
 ;
"RTN","RORXU005",230,0)
SKIPNA(IEN798,FLAGS,STATUS) ;
"RTN","RORXU005",231,0)
 Q:$$ACTIVE^RORDD(IEN798,,.STATUS) 0  ; Active patient
"RTN","RORXU005",232,0)
 Q:(STATUS=5)!(STATUS="") 1           ; Deleted patient
"RTN","RORXU005",233,0)
 Q:(STATUS=4)&(FLAGS["G") 1           ; Pending patient
"RTN","RORXU005",234,0)
 Q 0
"RTN","RORXU005",235,0)
 ;
"RTN","RORXU005",236,0)
 ;***** CHECKS IF SEX OF PATIENT MATCHES SEX SELECTED FOR REPORT
"RTN","RORXU005",237,0)
 ;
"RTN","RORXU005",238,0)
 ; DFN           IEN of the patient's record in the patient file (#2)
"RTN","RORXU005",239,0)
 ;
"RTN","RORXU005",240,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",241,0)
 ;
"RTN","RORXU005",242,0)
 ; Return Values:
"RTN","RORXU005",243,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",244,0)
 ;        1  Skip the patient
"RTN","RORXU005",245,0)
 ;
"RTN","RORXU005",246,0)
SKIPSEX(DFN,FLAGS) ;
"RTN","RORXU005",247,0)
 N VADM,VAPTYP,VAHOW,SEX
"RTN","RORXU005",248,0)
 D DEM^VADPT
"RTN","RORXU005",249,0)
 S SEX=$P($G(VADM(5)),U)
"RTN","RORXU005",250,0)
 Q $S(FLAGS["M":SEX'="F",FLAGS["W":SEX'="M",1:0)
"RTN","RORXU005",251,0)
 ;
"RTN","RORXU005",252,0)
 ;***** CHECKS IF PERIOD OF SERVICE OF PATIENT MATCHES OEF/OIF SELECTION FOR
"RTN","RORXU005",253,0)
 ;      REPORT
"RTN","RORXU005",254,0)
 ;
"RTN","RORXU005",255,0)
 ; DFN           IEN of the patient's record in the patient file (#2)
"RTN","RORXU005",256,0)
 ;
"RTN","RORXU005",257,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",258,0)
 ;
"RTN","RORXU005",259,0)
 ; Return Values:
"RTN","RORXU005",260,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",261,0)
 ;        1  Skip the patient
"RTN","RORXU005",262,0)
 ;
"RTN","RORXU005",263,0)
SKIPOEF(DFN,FLAGS) ;
"RTN","RORXU005",264,0)
 N VASV,QUIT
"RTN","RORXU005",265,0)
 D SVC^VADPT
"RTN","RORXU005",266,0)
 S QUIT=0
"RTN","RORXU005",267,0)
 ; Ignore if Only OEF/OIF selected and patient has no such POS
"RTN","RORXU005",268,0)
 I FLAGS["I" S QUIT=$S($G(VASV(11))!($G(VASV(12)))!($G(VASV(13))):0,1:1)
"RTN","RORXU005",269,0)
 ; Ignore if Exclude OEF/OIF selected and patient has such POS
"RTN","RORXU005",270,0)
 I 'QUIT,FLAGS["E" S QUIT=$S($G(VASV(11))!($G(VASV(12)))!($G(VASV(13))):1,1:0)
"RTN","RORXU005",271,0)
 Q QUIT
"RTN","RORXU005",272,0)
 ; 
"VER")
8.0^22.0
"^DD",798.1,798.1,0)
FIELD^^31^36
"^DD",798.1,798.1,0,"DDA")
N
"^DD",798.1,798.1,0,"DT")
3120301
"^DD",798.1,798.1,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,4),,"?30")
"^DD",798.1,798.1,0,"IX","ACL",798.118,.01)

"^DD",798.1,798.1,0,"IX","AEP",798.1,25)

"^DD",798.1,798.1,0,"IX","ARULES",798.13,.01)

"^DD",798.1,798.1,0,"IX","C",798.1,31)

"^DD",798.1,798.1,0,"NM","ROR REGISTRY PARAMETERS")
 
"^DD",798.1,798.1,0,"PT",798,.02)
 
"^DD",798.1,798.1,0,"PT",798.31,.01)
 
"^DD",798.1,798.1,0,"PT",798.5,.01)

"^DD",798.1,798.1,0,"PT",798.6,.02)
 
"^DD",798.1,798.1,0,"PT",798.73,.01)
 
"^DD",798.1,798.1,0,"PT",798.8,.03)
 
"^DD",798.1,798.1,0,"PT",799.1,.03)
 
"^DD",798.1,798.1,0,"PT",799.51,.02)
 
"^DD",798.1,798.1,0,"PT",799.53,.03)
 
"^DD",798.1,798.1,0,"SCR")
I $$ACCESS^RORDD(798.1,Y)
"^DD",798.1,798.1,0,"VRPK")
ROR
"^DD",798.1,798.1,0,"VRRV")
1.5^ROR 1.5
"^DD",798.1,798.1,.01,0)
REGISTRY NAME^RFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>30!($L(X)<3)!'(X?1.UNP) X
"^DD",798.1,798.1,.01,1,0)
^.1^^0
"^DD",798.1,798.1,.01,3)
Enter the unique registry name (3-30 characters).
"^DD",798.1,798.1,.01,8.5)
@
"^DD",798.1,798.1,.01,9)
@
"^DD",798.1,798.1,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.01,20,1,0)
DEFINITION
"^DD",798.1,798.1,.01,21,0)
^.001^9^9^3060203^^
"^DD",798.1,798.1,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,.01,21,3,0)
 
"^DD",798.1,798.1,.01,21,4,0)
You can either select an existing registry or add 
"^DD",798.1,798.1,.01,21,5,0)
a new one. Registry names must be unique. Names of
"^DD",798.1,798.1,.01,21,6,0)
the National registries must start with "VA".
"^DD",798.1,798.1,.01,21,7,0)
 
"^DD",798.1,798.1,.01,21,8,0)
You can only select records of those registries
"^DD",798.1,798.1,.01,21,9,0)
that you have appropriate security key(s) for.
"^DD",798.1,798.1,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,.01,"DT")
3060203
"^DD",798.1,798.1,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;11^Q:$$VAEDT^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,8.5)
@
"^DD",798.1,798.1,.09,9)
@
"^DD",798.1,798.1,.09,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.09,20,1,0)
DEFINITION
"^DD",798.1,798.1,.09,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.1,798.1,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.1,798.1,.09,21,3,0)
 
"^DD",798.1,798.1,.09,21,4,0)
The national registries must have this field set
"^DD",798.1,798.1,.09,21,5,0)
to "YES". This prevents local editing of other 
"^DD",798.1,798.1,.09,21,6,0)
fields of national registry definitions.
"^DD",798.1,798.1,.09,"DEL",1,0)
I $$VADEL^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,"DT")
3011120
"^DD",798.1,798.1,1,0)
REGISTRY UPDATED UNTIL^D^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,1,20,1,0)
STATE
"^DD",798.1,798.1,1,21,0)
^^9^9^3060203^
"^DD",798.1,798.1,1,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,1,21,2,0)
successful run of the regular registry update
"^DD",798.1,798.1,1,21,3,0)
process. The search engine looks for new patients
"^DD",798.1,798.1,1,21,4,0)
starting from this date.
"^DD",798.1,798.1,1,21,5,0)
 
"^DD",798.1,798.1,1,21,6,0)
Usually, this field should not be manually edited;
"^DD",798.1,798.1,1,21,7,0)
it is updated automatically. Before initial
"^DD",798.1,798.1,1,21,8,0)
population of the registry, enter the date that the
"^DD",798.1,798.1,1,21,9,0)
data search should start from.
"^DD",798.1,798.1,1,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,1,23,1,0)
This field is updated automatically by the registry 
"^DD",798.1,798.1,1,23,2,0)
update process after successful completion (see the 
"^DD",798.1,798.1,1,23,3,0)
$$TMSTMP^RORUPD01 function for details).
"^DD",798.1,798.1,1,"DT")
3010928
"^DD",798.1,798.1,2,0)
DATA EXTRACTED UNTIL^D^^0;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,2,20,1,0)
STATE
"^DD",798.1,798.1,2,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,2,21,2,0)
successful run of the regular data extraction
"^DD",798.1,798.1,2,21,3,0)
process. Do not edit this field.
"^DD",798.1,798.1,2,23,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,23,1,0)
This field is updated automatically by the regular data
"^DD",798.1,798.1,2,23,2,0)
extraction process after its successful completion (see
"^DD",798.1,798.1,2,23,3,0)
the $$TMSTMP^ROREXTUT function for details).
"^DD",798.1,798.1,2,"DT")
3010928
"^DD",798.1,798.1,3,0)
SELECTION RULE^798.13^^1;0
"^DD",798.1,798.1,3,9)
@
"^DD",798.1,798.1,3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,3,20,1,0)
DEFINITION
"^DD",798.1,798.1,3,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.1,3,21,1,0)
The SELECTION RULE field contains a list of the 
"^DD",798.1,798.1,3,21,2,0)
top-level selection rules that are used to screen
"^DD",798.1,798.1,3,21,3,0)
the patients to be added to the registry.
"^DD",798.1,798.1,3,21,4,0)
 
"^DD",798.1,798.1,3,21,5,0)
The records of the multiple are uniquely 
"^DD",798.1,798.1,3,21,6,0)
identified by the selection rule names. The "A"
"^DD",798.1,798.1,3,21,7,0)
primary key and the uniqueness index "B" are used
"^DD",798.1,798.1,3,21,8,0)
for this purpose.
"^DD",798.1,798.1,4,0)
SHORT DESCRIPTION^RFX^^0;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>40!($L(X)<3) X
"^DD",798.1,798.1,4,3)
Enter a short description of the registry (3-40 characters).
"^DD",798.1,798.1,4,8.5)
@
"^DD",798.1,798.1,4,9)
@
"^DD",798.1,798.1,4,21,0)
^.001^2^2^3020403^^
"^DD",798.1,798.1,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,4,"DT")
3011109
"^DD",798.1,798.1,5,0)
DESCRIPTION^798.15^^2;0
"^DD",798.1,798.1,5,21,0)
^.001^2^2^3011009^^^
"^DD",798.1,798.1,5,21,1,0)
Any additional reference information related to
"^DD",798.1,798.1,5,21,2,0)
the registry may be stored in this field.
"^DD",798.1,798.1,5,23,0)
^.001^1^1^3011009^^
"^DD",798.1,798.1,5,23,1,0)
Content of this field is not used by the application.
"^DD",798.1,798.1,6.1,0)
BEFORE UPDATE^FX^^4;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.1,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.1,8.5)
@
"^DD",798.1,798.1,6.1,9)
@
"^DD",798.1,798.1,6.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.1,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.1,21,0)
^.001^7^7^3050427^^^^
"^DD",798.1,798.1,6.1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.1,21,3,0)
 
"^DD",798.1,798.1,6.1,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.1,21,5,0)
MUMPS function that will be called before adding a
"^DD",798.1,798.1,6.1,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.1,21,7,0)
be used to prepare any additional data.
"^DD",798.1,798.1,6.1,23,0)
^^20^20^3050427^
"^DD",798.1,798.1,6.1,23,1,0)
The call-back entry point must accept three parameters:
"^DD",798.1,798.1,6.1,23,2,0)
 
"^DD",798.1,798.1,6.1,23,3,0)
FDA - A reference to a local array that contains 
"^DD",798.1,798.1,6.1,23,4,0)
prepared data (for the UPDATE^DIE FileMan DSB call)
"^DD",798.1,798.1,6.1,23,5,0)
that should be stored as a new record in the ROR
"^DD",798.1,798.1,6.1,23,6,0)
REGISTRY RECORD (#798) file.
"^DD",798.1,798.1,6.1,23,7,0)
 
"^DD",798.1,798.1,6.1,23,8,0)
The main record uses "+1," placeholder and records of
"^DD",798.1,798.1,6.1,23,9,0)
the SELECTION RULE multiple use placeholders with
"^DD",798.1,798.1,6.1,23,10,0)
numbers starting from 1001.
"^DD",798.1,798.1,6.1,23,11,0)
 
"^DD",798.1,798.1,6.1,23,12,0)
See the source code of the $$ADD^RORUPD50 function and
"^DD",798.1,798.1,6.1,23,13,0)
the FileMan Programmer Manual for further details.
"^DD",798.1,798.1,6.1,23,14,0)
 
"^DD",798.1,798.1,6.1,23,15,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,6.1,23,16,0)
 
"^DD",798.1,798.1,6.1,23,17,0)
REGIEN - Registry IEN (in the file #798.1)
"^DD",798.1,798.1,6.1,23,18,0)
 
"^DD",798.1,798.1,6.1,23,19,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.1,23,20,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.1,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.1,"DT")
3011120
"^DD",798.1,798.1,6.2,0)
AFTER UPDATE^FX^^5;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.2,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.2,8.5)
@
"^DD",798.1,798.1,6.2,9)
@
"^DD",798.1,798.1,6.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.2,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.2,21,0)
^.001^8^8^3020816^^
"^DD",798.1,798.1,6.2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.2,21,3,0)
 
"^DD",798.1,798.1,6.2,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.2,21,5,0)
MUMPS function that will be called after adding a
"^DD",798.1,798.1,6.2,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.2,21,7,0)
be used to create record(s) in additional linked
"^DD",798.1,798.1,6.2,21,8,0)
file(s) of the local registry.
"^DD",798.1,798.1,6.2,23,0)
^^11^11^3050427^
"^DD",798.1,798.1,6.2,23,1,0)
The call-back function must accept three parameters:
"^DD",798.1,798.1,6.2,23,2,0)
 
"^DD",798.1,798.1,6.2,23,3,0)
IEN - An IEN of the newly added record of the ROR
"^DD",798.1,798.1,6.2,23,4,0)
REGISTRY RECORD file
"^DD",798.1,798.1,6.2,23,5,0)
 
"^DD",798.1,798.1,6.2,23,6,0)
PATIEN - Patient IEN (in file #2)
"^DD",798.1,798.1,6.2,23,7,0)
 
"^DD",798.1,798.1,6.2,23,8,0)
REGIEN - Registry IEN (in file #798.1)
"^DD",798.1,798.1,6.2,23,9,0)
 
"^DD",798.1,798.1,6.2,23,10,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.2,23,11,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.2,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.2,"DT")
3011120
"^DD",798.1,798.1,7,0)
EXTRACT PERIOD FOR NEW PATIENT^NJ5,0X^^0;5^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:+X'=X!(X>15000)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,7,3)
Enter number of days between 1 and 15000.
"^DD",798.1,798.1,7,8.5)
@
"^DD",798.1,798.1,7,9)
@
"^DD",798.1,798.1,7,20,0)
^.3LA^1^1
"^DD",798.1,798.1,7,20,1,0)
DEFINITION
"^DD",798.1,798.1,7,21,0)
^.001^11^11^3030717^^^
"^DD",798.1,798.1,7,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,7,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,7,21,3,0)
 
"^DD",798.1,798.1,7,21,4,0)
Enter the number of days that should be subtracted
"^DD",798.1,798.1,7,21,5,0)
from the earliest date when the patient passed one
"^DD",798.1,798.1,7,21,6,0)
of the selection rules. The result will be used as
"^DD",798.1,798.1,7,21,7,0)
the start date of the data extraction for this new
"^DD",798.1,798.1,7,21,8,0)
patient.
"^DD",798.1,798.1,7,21,9,0)
 
"^DD",798.1,798.1,7,21,10,0)
If this field is empty, the default value of 3650
"^DD",798.1,798.1,7,21,11,0)
is used.
"^DD",798.1,798.1,7,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,7,"DT")
3011109
"^DD",798.1,798.1,7,"V",0)
^.12P
"^DD",798.1,798.1,8,0)
ENABLE LOG^S^0:NO;1:YES;^0;6^Q
"^DD",798.1,798.1,8,20,0)
^.3LA^1^1
"^DD",798.1,798.1,8,20,1,0)
PARAMETERS
"^DD",798.1,798.1,8,21,0)
^^3^3^3060203^
"^DD",798.1,798.1,8,21,1,0)
Select "YES" to enable recording of different 
"^DD",798.1,798.1,8,21,2,0)
kinds of events (debug messages, errors, etc.)
"^DD",798.1,798.1,8,21,3,0)
generated by registry processes.
"^DD",798.1,798.1,8,23,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,8,23,1,0)
The ENABLE LOG field controls recording of the errors
"^DD",798.1,798.1,8,23,2,0)
and other events in the log file.
"^DD",798.1,798.1,8,23,3,0)
 
"^DD",798.1,798.1,8,23,4,0)
If internal value of the field is 0 or the field is 
"^DD",798.1,798.1,8,23,5,0)
empty, the recording of all events associated with the
"^DD",798.1,798.1,8,23,6,0)
registry is disabled.
"^DD",798.1,798.1,8,23,7,0)
 
"^DD",798.1,798.1,8,23,8,0)
If internal value of the field is 1, content of the
"^DD",798.1,798.1,8,23,9,0)
LOG EVENT multiple is analyzed to determine which
"^DD",798.1,798.1,8,23,10,0)
events (errors, warnings, etc.) should be recorded.
"^DD",798.1,798.1,8,"DT")
3000503
"^DD",798.1,798.1,8.1,0)
LOG EVENT^798.11S^^3;0
"^DD",798.1,798.1,8.1,20,0)
^.3LA^^0
"^DD",798.1,798.1,8.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,8.1,21,1,0)
The LOG EVENT multiple contain a list of event 
"^DD",798.1,798.1,8.1,21,2,0)
types that are enabled to record. 
"^DD",798.1,798.1,8.1,21,3,0)
 
"^DD",798.1,798.1,8.1,21,4,0)
If the list is empty and recording is enabled, 
"^DD",798.1,798.1,8.1,21,5,0)
all events except debug messages will be recorded.
"^DD",798.1,798.1,8.1,21,6,0)
 
"^DD",798.1,798.1,8.1,21,7,0)
Otherwise, only recording of the events from the
"^DD",798.1,798.1,8.1,21,8,0)
list and error messages will be enabled.
"^DD",798.1,798.1,8.1,"DT")
3050722
"^DD",798.1,798.1,10,0)
MESSAGE BUILDER^FX^^7;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(4)
"^DD",798.1,798.1,10,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,10,8.5)
@
"^DD",798.1,798.1,10,9)
@
"^DD",798.1,798.1,10,20,0)
^.3LA^1^1
"^DD",798.1,798.1,10,20,1,0)
DEFINITION
"^DD",798.1,798.1,10,21,0)
^^10^10^3060106^
"^DD",798.1,798.1,10,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,10,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,10,21,3,0)
 
"^DD",798.1,798.1,10,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external 
"^DD",798.1,798.1,10,21,5,0)
MUMPS function that will be called to generate the
"^DD",798.1,798.1,10,21,6,0)
registry-specific section of the HL7 message for
"^DD",798.1,798.1,10,21,7,0)
each record of the registry.
"^DD",798.1,798.1,10,21,8,0)
 
"^DD",798.1,798.1,10,21,9,0)
If this field has no value, the default entry 
"^DD",798.1,798.1,10,21,10,0)
point ($$REGDATA^ROREXT02) will be used.
"^DD",798.1,798.1,10,23,0)
^^28^28^3060106^
"^DD",798.1,798.1,10,23,1,0)
The call-back function must accept four parameters:
"^DD",798.1,798.1,10,23,2,0)
 
"^DD",798.1,798.1,10,23,3,0)
IEN - IEN of the registry record
"^DD",798.1,798.1,10,23,4,0)
 
"^DD",798.1,798.1,10,23,5,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,10,23,6,0)
 
"^DD",798.1,798.1,10,23,7,0)
[.]DXDTS - Either a single time frame in 
"^DD",798.1,798.1,10,23,8,0)
StartDate^EndDate format or a reference to a local 
"^DD",798.1,798.1,10,23,9,0)
variable containing the list of data extraction time 
"^DD",798.1,798.1,10,23,10,0)
frames. The main time frame should be stored in the
"^DD",798.1,798.1,10,23,11,0)
root node (see the $$DXPERIOD^ROREXTUT function for 
"^DD",798.1,798.1,10,23,12,0)
details):
"^DD",798.1,798.1,10,23,13,0)
 
"^DD",798.1,798.1,10,23,14,0)
  DXDTS(         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,15,0)
    DataArea,
"^DD",798.1,798.1,10,23,16,0)
      i)         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,17,0)
 
"^DD",798.1,798.1,10,23,18,0)
The function should add the text of the HL7 message 
"^DD",798.1,798.1,10,23,19,0)
after already existing nodes in the standard location:
"^DD",798.1,798.1,10,23,20,0)
^TMP("HLS",$J). DO NOT KILL THIS NODE! It contains the
"^DD",798.1,798.1,10,23,21,0)
previous messages of the batch.
"^DD",798.1,798.1,10,23,22,0)
 
"^DD",798.1,798.1,10,23,23,0)
If the message was generated successfully, the function
"^DD",798.1,798.1,10,23,24,0)
should return zero. A negative value corresponds to the
"^DD",798.1,798.1,10,23,25,0)
error code.
"^DD",798.1,798.1,10,23,26,0)
                                                                    
"^DD",798.1,798.1,10,23,27,0)
See the source code of the $$REGDATA^ROREXT02 function 
"^DD",798.1,798.1,10,23,28,0)
for further details.
"^DD",798.1,798.1,10,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,10,"DT")
3011120
"^DD",798.1,798.1,11,0)
REGISTRY STATUS^S^0:ACTIVE;1:INACTIVE;^0;7^Q
"^DD",798.1,798.1,11,1,0)
^.1^^0
"^DD",798.1,798.1,11,20,0)
^.3LA^1^1
"^DD",798.1,798.1,11,20,1,0)
PARAMETERS
"^DD",798.1,798.1,11,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,11,21,1,0)
Select the "INACTIVE" code if you want to exclude
"^DD",798.1,798.1,11,21,2,0)
the registry from the regular registry updates and
"^DD",798.1,798.1,11,21,3,0)
data transmissions.
"^DD",798.1,798.1,11,"DT")
3020424
"^DD",798.1,798.1,12,0)
EXTRACTED RESULT^798.112I^^8;0
"^DD",798.1,798.1,12,9)
@
"^DD",798.1,798.1,12,20,0)
^.3LA^1^1
"^DD",798.1,798.1,12,20,1,0)
DEFINITION
"^DD",798.1,798.1,12,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,12,21,1,0)
This multiple contains a list of Lab result codes.
"^DD",798.1,798.1,12,21,2,0)
These results will be extracted and transmitted to
"^DD",798.1,798.1,12,21,3,0)
AAC.
"^DD",798.1,798.1,12,"DT")
3010629
"^DD",798.1,798.1,13,0)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,13,3)
 
"^DD",798.1,798.1,13,8.5)
@
"^DD",798.1,798.1,13,9)
@
"^DD",798.1,798.1,13,12)
Only Event Drivers from the "ROR" namespace can be selected!
"^DD",798.1,798.1,13,12.1)
S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E"""
"^DD",798.1,798.1,13,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13,20,1,0)
HL7
"^DD",798.1,798.1,13,20,2,0)
DEFINITION
"^DD",798.1,798.1,13,21,0)
^.001^6^6^3120501^^^^
"^DD",798.1,798.1,13,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13,21,3,0)
 
"^DD",798.1,798.1,13,21,4,0)
This field contains a pointer to the protocol in 
"^DD",798.1,798.1,13,21,5,0)
the PROTOCOL file that is used as the event driver
"^DD",798.1,798.1,13,21,6,0)
for sending HL7 messages.
"^DD",798.1,798.1,13,23,0)
^^5^5^3120501^
"^DD",798.1,798.1,13,23,1,0)
If several registries are processed by the same nightly
"^DD",798.1,798.1,13,23,2,0)
task and they have different values of the PROTOCOL
"^DD",798.1,798.1,13,23,3,0)
field, then the registries are grouped by the value of
"^DD",798.1,798.1,13,23,4,0)
this field and data extraction is performed separately
"^DD",798.1,798.1,13,23,5,0)
for each of those groups.
"^DD",798.1,798.1,13,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13,"DT")
3011112
"^DD",798.1,798.1,13.1,0)
MAXIMUM MESSAGE SIZE^NJ4,1^^9;2^K:+X'=X!(X>99)!(X<0)!(X?.E1"."2N.N) X
"^DD",798.1,798.1,13.1,3)
Enter maximum size (in megabytes) between 0 and 99, 1 decimal digit.
"^DD",798.1,798.1,13.1,8.5)
@
"^DD",798.1,798.1,13.1,9)
@
"^DD",798.1,798.1,13.1,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.1,20,1,0)
HL7
"^DD",798.1,798.1,13.1,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,13.1,21,1,0)
This field stores the maximum size (in megabytes)
"^DD",798.1,798.1,13.1,21,2,0)
of a batch HL7 message that can be sent to Austin
"^DD",798.1,798.1,13.1,21,3,0)
Automation Center (AAC). If this field is empty or
"^DD",798.1,798.1,13.1,21,4,0)
contains 0, the size is not limited.
"^DD",798.1,798.1,13.1,21,5,0)
 
"^DD",798.1,798.1,13.1,21,6,0)
You must coordinate your intentions with AAC
"^DD",798.1,798.1,13.1,21,7,0)
support personnel if you are going to edit this
"^DD",798.1,798.1,13.1,21,8,0)
field.
"^DD",798.1,798.1,13.1,23,0)
^^8^8^3060203^
"^DD",798.1,798.1,13.1,23,1,0)
Actual size of an HL7 batch can be greater than the
"^DD",798.1,798.1,13.1,23,2,0)
value of this field because the software does not break
"^DD",798.1,798.1,13.1,23,3,0)
in the middle of an individual HL7 message.
"^DD",798.1,798.1,13.1,23,4,0)
 
"^DD",798.1,798.1,13.1,23,5,0)
For example, if the maximum size is 10Mb, the current
"^DD",798.1,798.1,13.1,23,6,0)
size is 9Mb and 3Mb should be sent for the patient
"^DD",798.1,798.1,13.1,23,7,0)
being processed, then the actual size of the batch will
"^DD",798.1,798.1,13.1,23,8,0)
be 12Mb.
"^DD",798.1,798.1,13.1,"DT")
3020730
"^DD",798.1,798.1,13.2,0)
ALERT FREQUENCY^NJ2,0^^9;3^K:+X'=X!(X>10)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,13.2,3)
Type a Number between 1 and 10, 0 Decimal Digits
"^DD",798.1,798.1,13.2,8.5)
@
"^DD",798.1,798.1,13.2,9)
@
"^DD",798.1,798.1,13.2,11,0)
^.2LAP^^0
"^DD",798.1,798.1,13.2,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.2,20,1,0)
HL7
"^DD",798.1,798.1,13.2,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.2,21,0)
^.001^20^20^3060203^^
"^DD",798.1,798.1,13.2,21,1,0)
Value of the ALERT FREQUENCY field determines how
"^DD",798.1,798.1,13.2,21,2,0)
often e-mail notifications and VistA alerts are 
"^DD",798.1,798.1,13.2,21,3,0)
sent to the AAC and local staff in case of
"^DD",798.1,798.1,13.2,21,4,0)
problems with the site's CCR software (data
"^DD",798.1,798.1,13.2,21,5,0)
extraction problems, unsent HL7 messages, etc.).
"^DD",798.1,798.1,13.2,21,6,0)
 
"^DD",798.1,798.1,13.2,21,7,0)
If this field is empty or 0, notifications are
"^DD",798.1,798.1,13.2,21,8,0)
not sent.
"^DD",798.1,798.1,13.2,21,9,0)
 
"^DD",798.1,798.1,13.2,21,10,0)
Otherwise, the nightly task increments the error
"^DD",798.1,798.1,13.2,21,11,0)
counters and checks the remainders from division
"^DD",798.1,798.1,13.2,21,12,0)
of the counters by the value of this field. When a
"^DD",798.1,798.1,13.2,21,13,0)
reminder becomes 0, the software sends the
"^DD",798.1,798.1,13.2,21,14,0)
corresponding e-mail notification to the AAC and
"^DD",798.1,798.1,13.2,21,15,0)
generates the VistA alert to the local staff
"^DD",798.1,798.1,13.2,21,16,0)
listed in the NOTIFICATION multiple (14).
"^DD",798.1,798.1,13.2,21,17,0)
 
"^DD",798.1,798.1,13.2,21,18,0)
For example, if the nightly task runs every night 
"^DD",798.1,798.1,13.2,21,19,0)
and the ALERT FREQUENCY is 2, then alerts and 
"^DD",798.1,798.1,13.2,21,20,0)
notifications will be sent every other night.
"^DD",798.1,798.1,13.2,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,13.2,23,1,0)
See description of the HL7 PROBLEM COUNTER field (19.3)
"^DD",798.1,798.1,13.2,23,2,0)
and source code of the $$CHECKMSG^ROR10 function for
"^DD",798.1,798.1,13.2,23,3,0)
more details.
"^DD",798.1,798.1,13.2,"DT")
3050503
"^DD",798.1,798.1,13.3,0)
NATIONAL NOTIFICATION E-MAIL^FX^^9;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>50!($L(X)<3)!(X'?1.ANP1"@"1.ANP) X
"^DD",798.1,798.1,13.3,3)
Answer must be a valid e-mail address (3-50 characters in length).
"^DD",798.1,798.1,13.3,8.5)
@
"^DD",798.1,798.1,13.3,9)
@
"^DD",798.1,798.1,13.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,13.3,20,1,0)
DEFINITION
"^DD",798.1,798.1,13.3,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,13.3,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13.3,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13.3,21,3,0)
 
"^DD",798.1,798.1,13.3,21,4,0)
The NATIONAL NOTIFICATION E-MAIL field holds an 
"^DD",798.1,798.1,13.3,21,5,0)
e-mail address where notifications about registry
"^DD",798.1,798.1,13.3,21,6,0)
problems (mostly, data transmission problems) are
"^DD",798.1,798.1,13.3,21,7,0)
sent to.
"^DD",798.1,798.1,13.3,21,8,0)
 
"^DD",798.1,798.1,13.3,21,9,0)
If the field is empty, e-mail notifications will
"^DD",798.1,798.1,13.3,21,10,0)
not be sent.
"^DD",798.1,798.1,13.3,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13.3,"DT")
3030429
"^DD",798.1,798.1,14,0)
NOTIFICATION^798.114P^^10;0
"^DD",798.1,798.1,14,21,0)
^.001^3^3^3050525^^^
"^DD",798.1,798.1,14,21,1,0)
This multiple contains a list of VistA users that
"^DD",798.1,798.1,14,21,2,0)
should be notified about problems with the local
"^DD",798.1,798.1,14,21,3,0)
registry.
"^DD",798.1,798.1,14,"DT")
3050427
"^DD",798.1,798.1,15.1,0)
LAG DAYS^NJ1,0^^11;1^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,15.1,3)
Enter number of days between 1 and 7.
"^DD",798.1,798.1,15.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,15.1,20,1,0)
PARAMETERS
"^DD",798.1,798.1,15.1,21,0)
^.001^12^12^3120501^^^^
"^DD",798.1,798.1,15.1,21,1,0)
Number of days that defines an overlap of the data
"^DD",798.1,798.1,15.1,21,2,0)
searches during the registry updates and a data
"^DD",798.1,798.1,15.1,21,3,0)
extraction delay during the regular data
"^DD",798.1,798.1,15.1,21,4,0)
extractions.
"^DD",798.1,798.1,15.1,21,5,0)
 
"^DD",798.1,798.1,15.1,21,6,0)
If this field is empty, the default value of 1 is 
"^DD",798.1,798.1,15.1,21,7,0)
used by the registry update and data extraction
"^DD",798.1,798.1,15.1,21,8,0)
processes.
"^DD",798.1,798.1,15.1,21,9,0)
 
"^DD",798.1,798.1,15.1,21,10,0)
See the package documentation or Technical
"^DD",798.1,798.1,15.1,21,11,0)
Description of the field in the data dictionary
"^DD",798.1,798.1,15.1,21,12,0)
for more information.
"^DD",798.1,798.1,15.1,23,0)
^^37^37^3120501^
"^DD",798.1,798.1,15.1,23,1,0)
Clinical data may be entered into the VistA system 
"^DD",798.1,798.1,15.1,23,2,0)
later than they are available. For example, an
"^DD",798.1,798.1,15.1,23,3,0)
encounter that occurred today may not get entered into
"^DD",798.1,798.1,15.1,23,4,0)
the system until tomorrow.
"^DD",798.1,798.1,15.1,23,5,0)
 
"^DD",798.1,798.1,15.1,23,6,0)
Because of this delay, data may be missed by the
"^DD",798.1,798.1,15.1,23,7,0)
registry update and data extraction processes if they
"^DD",798.1,798.1,15.1,23,8,0)
look for the data until the current date and then
"^DD",798.1,798.1,15.1,23,9,0)
continue from that point next time.
"^DD",798.1,798.1,15.1,23,10,0)
 
"^DD",798.1,798.1,15.1,23,11,0)
To avoid this problem, data search intervals are 
"^DD",798.1,798.1,15.1,23,12,0)
overlapped by the number of days indicated by this 
"^DD",798.1,798.1,15.1,23,13,0)
field. The registry update process looks for new data 
"^DD",798.1,798.1,15.1,23,14,0)
not from the end date of its previous run but from the 
"^DD",798.1,798.1,15.1,23,15,0)
date that is earlier by the number of days from this 
"^DD",798.1,798.1,15.1,23,16,0)
field. This overlap increases the chances of data
"^DD",798.1,798.1,15.1,23,17,0)
entered retrospectively to be found by the next run of
"^DD",798.1,798.1,15.1,23,18,0)
the registry update process.
"^DD",798.1,798.1,15.1,23,19,0)
 
"^DD",798.1,798.1,15.1,23,20,0)
Moreover, the regular data extraction process extracts
"^DD",798.1,798.1,15.1,23,21,0)
data not until the date when the process is run but
"^DD",798.1,798.1,15.1,23,22,0)
until the date that is earlier by the number of days
"^DD",798.1,798.1,15.1,23,23,0)
from this field. So, this is a delay that allows the
"^DD",798.1,798.1,15.1,23,24,0)
data to be entered retrospectively before the next data
"^DD",798.1,798.1,15.1,23,25,0)
extraction.
"^DD",798.1,798.1,15.1,23,26,0)
 
"^DD",798.1,798.1,15.1,23,27,0)
If the value of this field is too small, you may miss 
"^DD",798.1,798.1,15.1,23,28,0)
some data entered retrospectively. If it is too big,
"^DD",798.1,798.1,15.1,23,29,0)
the national registry will not contain up to date
"^DD",798.1,798.1,15.1,23,30,0)
information (data will be delayed by the number of days
"^DD",798.1,798.1,15.1,23,31,0)
indicated by this field) and the registry update
"^DD",798.1,798.1,15.1,23,32,0)
process will take more time to complete, because 
"^DD",798.1,798.1,15.1,23,33,0)
additional time will be spent processing the data from
"^DD",798.1,798.1,15.1,23,34,0)
the overlap interval).
"^DD",798.1,798.1,15.1,23,35,0)
 
"^DD",798.1,798.1,15.1,23,36,0)
When several registries are processed at the same time,
"^DD",798.1,798.1,15.1,23,37,0)
the maximum value of the LAG DAYS field is used.
"^DD",798.1,798.1,15.1,"DT")
3020426
"^DD",798.1,798.1,18,0)
SECURITY KEY^798.118^^18;0
"^DD",798.1,798.1,18,9)
@
"^DD",798.1,798.1,18,20,0)
^.3LA^1^1
"^DD",798.1,798.1,18,20,1,0)
DEFINITION
"^DD",798.1,798.1,18,21,0)
^.001^2^2^3050722^^^^
"^DD",798.1,798.1,18,21,1,0)
This multiple stores a list of security keys 
"^DD",798.1,798.1,18,21,2,0)
associated with the registry.
"^DD",798.1,798.1,19.1,0)
NUMBER OF PATIENTS^NJ9,0^^19;1^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.1,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.1,8.5)
@
"^DD",798.1,798.1,19.1,9)
@
"^DD",798.1,798.1,19.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.1,20,1,0)
STATE
"^DD",798.1,798.1,19.1,21,0)
^.001^3^3^3060106^^^
"^DD",798.1,798.1,19.1,21,1,0)
The NUMBER OF PATIENTS field contains total number
"^DD",798.1,798.1,19.1,21,2,0)
of confirmed patients in the registry right after
"^DD",798.1,798.1,19.1,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.1,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.1,23,1,0)
This field should not be edited. It is updated
"^DD",798.1,798.1,19.1,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.1,23,3,0)
the registry update.
"^DD",798.1,798.1,19.1,"DT")
3031027
"^DD",798.1,798.1,19.2,0)
NUMBER OF PENDING PATIENTS^NJ9,0^^19;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.2,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.2,8.5)
@
"^DD",798.1,798.1,19.2,9)
@
"^DD",798.1,798.1,19.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.2,20,1,0)
STATE
"^DD",798.1,798.1,19.2,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,19.2,21,1,0)
The NUMBER OF PENDING PATIENTS field stores number
"^DD",798.1,798.1,19.2,21,2,0)
of pending patients in the registry right after
"^DD",798.1,798.1,19.2,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.2,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.2,23,1,0)
This field should not be edited. It is updated 
"^DD",798.1,798.1,19.2,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.2,23,3,0)
the registry update.
"^DD",798.1,798.1,19.2,"DT")
3050627
"^DD",798.1,798.1,19.3,0)
HL7 ATTEMPT COUNTER^NJ3,0^^19;3^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.3,3)
Type a Number between 0 and 999, 0 Decimal Digits
"^DD",798.1,798.1,19.3,8.5)
@
"^DD",798.1,798.1,19.3,9)
@
"^DD",798.1,798.1,19.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.3,20,1,0)
HL7
"^DD",798.1,798.1,19.3,21,0)
^^10^10^3060203^
"^DD",798.1,798.1,19.3,21,1,0)
The HL7 ATTEMPT COUNTER field is incremented each
"^DD",798.1,798.1,19.3,21,2,0)
time the nightly task (the Registry Update & Data 
"^DD",798.1,798.1,19.3,21,3,0)
Extraction [ROR TASK] option) encounters at least
"^DD",798.1,798.1,19.3,21,4,0)
one unsent HL7 message.
"^DD",798.1,798.1,19.3,21,5,0)
 
"^DD",798.1,798.1,19.3,21,6,0)
The nightly task assigns 1 to the field when new
"^DD",798.1,798.1,19.3,21,7,0)
HL7 messages are generated (only if all previous
"^DD",798.1,798.1,19.3,21,8,0)
messages have been successfully transmitted).
"^DD",798.1,798.1,19.3,21,9,0)
 
"^DD",798.1,798.1,19.3,21,10,0)
Usually, you should not edit this field.
"^DD",798.1,798.1,19.3,23,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,19.3,23,1,0)
See description of the ALERT FREQUENCY field (13.2) and
"^DD",798.1,798.1,19.3,23,2,0)
source code of the $$CHECKMSG^ROR10 function for more
"^DD",798.1,798.1,19.3,23,3,0)
details.
"^DD",798.1,798.1,19.3,"DT")
3050701
"^DD",798.1,798.1,21.01,0)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,21.01,8.5)
@
"^DD",798.1,798.1,21.01,9)
@
"^DD",798.1,798.1,21.01,12)
Only "Auto" definitions can be selected.
"^DD",798.1,798.1,21.01,12.1)
S DIC("S")="I $P($G(^(0)),U,2)=1"
"^DD",798.1,798.1,21.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.01,20,1,0)
STATE
"^DD",798.1,798.1,21.01,21,0)
^^3^3^3051110^
"^DD",798.1,798.1,21.01,21,1,0)
This field stores the pointer to the historical 
"^DD",798.1,798.1,21.01,21,2,0)
data extraction definition that was used during
"^DD",798.1,798.1,21.01,21,3,0)
the previous run of the nightly task.
"^DD",798.1,798.1,21.01,"DT")
3051110
"^DD",798.1,798.1,21.04,0)
LOCAL DATA RESENT^D^^21;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.04,8.5)
@
"^DD",798.1,798.1,21.04,9)
@
"^DD",798.1,798.1,21.04,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.04,20,1,0)
STATE
"^DD",798.1,798.1,21.04,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,21.04,21,1,0)
This field holds the date when all local registry 
"^DD",798.1,798.1,21.04,21,2,0)
data was resent to AAC after the installation (to 
"^DD",798.1,798.1,21.04,21,3,0)
fix the data incorrectly overwritten with the 
"^DD",798.1,798.1,21.04,21,4,0)
historical data).
"^DD",798.1,798.1,21.04,21,5,0)
 
"^DD",798.1,798.1,21.04,21,6,0)
Usually, you should not modify this field. If you
"^DD",798.1,798.1,21.04,21,7,0)
need to resend all local registry and demographic
"^DD",798.1,798.1,21.04,21,8,0)
data to AAC, you should clear this field. The data
"^DD",798.1,798.1,21.04,21,9,0)
will be resent automatically during the next
"^DD",798.1,798.1,21.04,21,10,0)
nightly transmission.
"^DD",798.1,798.1,21.04,23,0)
^.001^4^4^3060203^^^^
"^DD",798.1,798.1,21.04,23,1,0)
The value of this field is analyzed and modified by the
"^DD",798.1,798.1,21.04,23,2,0)
$$REMARK^RORUTL05 function. The function is called by
"^DD",798.1,798.1,21.04,23,3,0)
the nightly registry update and data transmission task
"^DD",798.1,798.1,21.04,23,4,0)
(TASK^ROR).
"^DD",798.1,798.1,21.04,"DT")
3020508
"^DD",798.1,798.1,21.05,0)
HDT DATE/TIME^D^^21;4^S %DT="ETX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.05,8.5)
@
"^DD",798.1,798.1,21.05,9)
@
"^DD",798.1,798.1,21.05,21,0)
^.001^4^4^3060123^^
"^DD",798.1,798.1,21.05,21,1,0)
This field is initialized with the current 
"^DD",798.1,798.1,21.05,21,2,0)
date/time by the registry setup task upon
"^DD",798.1,798.1,21.05,21,3,0)
successful completion of the initial registry
"^DD",798.1,798.1,21.05,21,4,0)
population.
"^DD",798.1,798.1,21.05,23,0)
^^4^4^3060123^
"^DD",798.1,798.1,21.05,23,1,0)
The field is populated by the $$UPDHDTRP^RORSETU2 
"^DD",798.1,798.1,21.05,23,2,0)
function during the registry setup.
"^DD",798.1,798.1,21.05,23,3,0)
 
"^DD",798.1,798.1,21.05,23,4,0)
Do not delete value of this field!
"^DD",798.1,798.1,21.05,"DT")
3031027
"^DD",798.1,798.1,22,0)
LAST BATCH CONTROL ID^798.122^^22;0
"^DD",798.1,798.1,22,9)
@
"^DD",798.1,798.1,22,20,0)
^.3LA^1^1
"^DD",798.1,798.1,22,20,1,0)
HL7
"^DD",798.1,798.1,22,21,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,22,21,1,0)
This multiple contains a list of identifiers of
"^DD",798.1,798.1,22,21,2,0)
the HL7 batch messages generated during the
"^DD",798.1,798.1,22,21,3,0)
previous run of the nightly task.
"^DD",798.1,798.1,22,23,0)
^^3^3^3060203^
"^DD",798.1,798.1,22,23,1,0)
The nightly task checks status of each message from 
"^DD",798.1,798.1,22,23,2,0)
this multiple before the registry update and data
"^DD",798.1,798.1,22,23,3,0)
extraction.
"^DD",798.1,798.1,22,"DT")
3050504
"^DD",798.1,798.1,25,0)
ENABLE PROTOCOLS^S^0:NO;1:YES;^0;14^Q
"^DD",798.1,798.1,25,1,0)
^.1
"^DD",798.1,798.1,25,1,1,0)
798.1^AEP^MUMPS
"^DD",798.1,798.1,25,1,1,1)
S:X ^ROR(798.1,"AEP",DA)=""
"^DD",798.1,798.1,25,1,1,2)
K ^ROR(798.1,"AEP",DA)
"^DD",798.1,798.1,25,1,1,3)
Do not delete!
"^DD",798.1,798.1,25,1,1,"%D",0)
^^10^10^3060203^
"^DD",798.1,798.1,25,1,1,"%D",1,0)
This cross-reference controls the package event 
"^DD",798.1,798.1,25,1,1,"%D",2,0)
protocols.
"^DD",798.1,798.1,25,1,1,"%D",3,0)
 
"^DD",798.1,798.1,25,1,1,"%D",4,0)
If at least one registry has the ENABLE PROTOCOLS
"^DD",798.1,798.1,25,1,1,"%D",5,0)
field set to "YES", the ^ROR(798.1,"AEP") node
"^DD",798.1,798.1,25,1,1,"%D",6,0)
will be defined and the protocols will call the
"^DD",798.1,798.1,25,1,1,"%D",7,0)
processing routines.
"^DD",798.1,798.1,25,1,1,"%D",8,0)
 
"^DD",798.1,798.1,25,1,1,"%D",9,0)
Otherwise, they will run idle unless they are 
"^DD",798.1,798.1,25,1,1,"%D",10,0)
disabled or unsubscribed manually.
"^DD",798.1,798.1,25,1,1,"DT")
3020418
"^DD",798.1,798.1,25,20,0)
^.3LA^1^1
"^DD",798.1,798.1,25,20,1,0)
PARAMETERS
"^DD",798.1,798.1,25,21,0)
^^13^13^3060203^
"^DD",798.1,798.1,25,21,1,0)
If this field is set to "YES", event protocols
"^DD",798.1,798.1,25,21,2,0)
will be used by the package to speed up the 
"^DD",798.1,798.1,25,21,3,0)
registry processing.
"^DD",798.1,798.1,25,21,4,0)
 
"^DD",798.1,798.1,25,21,5,0)
The protocols create references to patient events
"^DD",798.1,798.1,25,21,6,0)
in the ROR PATIENT EVENTS file. Only those 
"^DD",798.1,798.1,25,21,7,0)
patients that have new references will be 
"^DD",798.1,798.1,25,21,8,0)
processed by the next registry update.
"^DD",798.1,798.1,25,21,9,0)
 
"^DD",798.1,798.1,25,21,10,0)
If several registries are updated at the same 
"^DD",798.1,798.1,25,21,11,0)
time and at least one of them has this field set 
"^DD",798.1,798.1,25,21,12,0)
to "YES", all these registries will be processed 
"^DD",798.1,798.1,25,21,13,0)
using event references.
"^DD",798.1,798.1,25,23,0)
^.001^11^11^3060203^^
"^DD",798.1,798.1,25,23,1,0)
This field controls both the registry update engine 
"^DD",798.1,798.1,25,23,2,0)
and the event protocols.
"^DD",798.1,798.1,25,23,3,0)
 
"^DD",798.1,798.1,25,23,4,0)
If at least one of the defined registries enables the
"^DD",798.1,798.1,25,23,5,0)
protocols, they will process the events and create
"^DD",798.1,798.1,25,23,6,0)
references in the ROR PATIENT EVENTS file (#798.3).
"^DD",798.1,798.1,25,23,7,0)
 
"^DD",798.1,798.1,25,23,8,0)
Otherwise, the protocols will be executed (if they are
"^DD",798.1,798.1,25,23,9,0)
not disabled or unsubscribed manually) but will not
"^DD",798.1,798.1,25,23,10,0)
call processing routines and will not create references
"^DD",798.1,798.1,25,23,11,0)
in file #798.3.
"^DD",798.1,798.1,25,"DT")
3020418
"^DD",798.1,798.1,26,0)
EXCLUDE EMPLOYEES^SX^0:NO;1:YES;^0;10^Q:$$VAEDT^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,8.5)
@
"^DD",798.1,798.1,26,9)
@
"^DD",798.1,798.1,26,20,0)
^.3LA^1^1
"^DD",798.1,798.1,26,20,1,0)
DEFINITION
"^DD",798.1,798.1,26,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,26,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,26,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,26,21,3,0)
 
"^DD",798.1,798.1,26,21,4,0)
If this field is set to "YES", patients who are
"^DD",798.1,798.1,26,21,5,0)
employees will not be processed by the registry
"^DD",798.1,798.1,26,21,6,0)
update or data extraction functions.
"^DD",798.1,798.1,26,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,"DT")
3020802
"^DD",798.1,798.1,27,0)
AVAILABLE REPORTS^FX^^27;E1,250^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",798.1,798.1,27,3)
Answer must be 1-250 characters in length.
"^DD",798.1,798.1,27,8.5)
@
"^DD",798.1,798.1,27,9)
@
"^DD",798.1,798.1,27,20,0)
^.3LA^1^1
"^DD",798.1,798.1,27,20,1,0)
DEFINITION
"^DD",798.1,798.1,27,21,0)
^^7^7^3060203^
"^DD",798.1,798.1,27,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,27,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,27,21,3,0)
 
"^DD",798.1,798.1,27,21,4,0)
The AVAILABLE REPORTS field stores a list of 
"^DD",798.1,798.1,27,21,5,0)
report codes (not the IENs!) separated by commas.
"^DD",798.1,798.1,27,21,6,0)
These reports will be available for this registry
"^DD",798.1,798.1,27,21,7,0)
in the GUI.
"^DD",798.1,798.1,27,23,0)
^.001^5^5^3060203^^^^
"^DD",798.1,798.1,27,23,1,0)
The GUI loads the value of this field using the ROR 
"^DD",798.1,798.1,27,23,2,0)
REPORTS AVAILABLE remote procedure.
"^DD",798.1,798.1,27,23,3,0)
 
"^DD",798.1,798.1,27,23,4,0)
See the data dictionary of the ROR REPORT PARAMETERS 
"^DD",798.1,798.1,27,23,5,0)
file (#799.12) for more details.
"^DD",798.1,798.1,27,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,27,"DT")
3030417
"^DD",798.1,798.1,28,0)
LOCAL TEST NAME^798.128PI^^28;0
"^DD",798.1,798.1,28,20,0)
^.3LA^1^1
"^DD",798.1,798.1,28,20,1,0)
PARAMETERS
"^DD",798.1,798.1,28,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,28,21,1,0)
This multiple maps local lab tests to the 
"^DD",798.1,798.1,28,21,2,0)
predefined lab test groups that are used in the 
"^DD",798.1,798.1,28,21,3,0)
reports.
"^DD",798.1,798.1,28,"DT")
3030402
"^DD",798.1,798.1,29,0)
LOCAL DRUG NAME^798.129P^^29;0
"^DD",798.1,798.1,29,20,0)
^.3LA^1^1
"^DD",798.1,798.1,29,20,1,0)
PARAMETERS
"^DD",798.1,798.1,29,21,0)
^^3^3^3060106^
"^DD",798.1,798.1,29,21,1,0)
This multiple maps local medication names to the
"^DD",798.1,798.1,29,21,2,0)
predefined medication groups that are used in the
"^DD",798.1,798.1,29,21,3,0)
reports.
"^DD",798.1,798.1,30,0)
REPORT STATS^798.12P^^30;0
"^DD",798.1,798.1,30,9)
@
"^DD",798.1,798.1,30,20,0)
^.3LA^1^1
"^DD",798.1,798.1,30,20,1,0)
STATE
"^DD",798.1,798.1,30,21,0)
^.001^4^4^3120228^^^
"^DD",798.1,798.1,30,21,1,0)
Records of this multiple store the statistic data 
"^DD",798.1,798.1,30,21,2,0)
related to running reports. Usually, the stats are
"^DD",798.1,798.1,30,21,3,0)
reset after successful data transmission to the
"^DD",798.1,798.1,30,21,4,0)
AAC.
"^DD",798.1,798.1,30,23,0)
^.001^7^7^3120228^^
"^DD",798.1,798.1,30,23,1,0)
Please do not edit the records of this multiple
"^DD",798.1,798.1,30,23,2,0)
directly. Use the entry points of the RORTSK12 routine
"^DD",798.1,798.1,30,23,3,0)
instead.
"^DD",798.1,798.1,30,23,4,0)
 
"^DD",798.1,798.1,30,23,5,0)
The input transform associated with the .01 field of 
"^DD",798.1,798.1,30,23,6,0)
this multiple guarantees that each report has only one
"^DD",798.1,798.1,30,23,7,0)
corresponding record in the multiple.
"^DD",798.1,798.1,31,0)
AUTO-CONFIRM^S^0:NO;1:YES;^6;1^Q
"^DD",798.1,798.1,31,1,0)
^.1
"^DD",798.1,798.1,31,1,1,0)
798.1^C
"^DD",798.1,798.1,31,1,1,1)
S ^ROR(798.1,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.1,31,1,1,2)
K ^ROR(798.1,"C",$E(X,1,30),DA)
"^DD",798.1,798.1,31,1,1,"DT")
3120301
"^DD",798.1,798.1,31,3)
Enter 'Yes' if the status of patients added to this registry should be automatically confirmed.
"^DD",798.1,798.1,31,21,0)
^^4^4^3120503^
"^DD",798.1,798.1,31,21,1,0)
This field is used during the registry update to set the status of new 
"^DD",798.1,798.1,31,21,2,0)
patients.  If the registry is set to auto-confirm, the patient status is
"^DD",798.1,798.1,31,21,3,0)
set to 'Confirmed'.  If auto-confirm is no, the patient status is set to
"^DD",798.1,798.1,31,21,4,0)
'Pending'.
"^DD",798.1,798.1,31,"DT")
3120301
"^DD",798.1,798.11,0)
LOG EVENT SUB-FIELD^^.01^1
"^DD",798.1,798.11,0,"DT")
3010712
"^DD",798.1,798.11,0,"NM","LOG EVENT")
 
"^DD",798.1,798.11,0,"UP")
798.1
"^DD",798.1,798.11,.01,0)
LOG EVENT^MSX^1:Debug;2:Information;3:Data Quality;4:Warning;5:Database Error;6:Error;^0;1^Q
"^DD",798.1,798.11,.01,1,0)
^.1^^0
"^DD",798.1,798.11,.01,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.11,.01,21,1,0)
Select the type of the event if you want to enable
"^DD",798.1,798.11,.01,21,2,0)
recording of these events. If the list is empty,
"^DD",798.1,798.11,.01,21,3,0)
recording of all events is enabled. Otherwise,
"^DD",798.1,798.11,.01,21,4,0)
only events from the list and error messages will 
"^DD",798.1,798.11,.01,21,5,0)
be recorded.
"^DD",798.1,798.11,.01,21,6,0)
 
"^DD",798.1,798.11,.01,21,7,0)
Debug messages are exclusions from this rule (they
"^DD",798.1,798.11,.01,21,8,0)
are not logged if the ENABLE LOG field is set to
"^DD",798.1,798.11,.01,21,9,0)
"YES" and this multiple is empty). Their recording
"^DD",798.1,798.11,.01,21,10,0)
can only be enabled explicitly.
"^DD",798.1,798.11,.01,23,0)
^.001^9^9^3060203^^^^
"^DD",798.1,798.11,.01,23,1,0)
If several registries are processed at the same time,
"^DD",798.1,798.11,.01,23,2,0)
the recording parameters are combined.
"^DD",798.1,798.11,.01,23,3,0)
 
"^DD",798.1,798.11,.01,23,4,0)
If one of the registries requests recording of all 
"^DD",798.1,798.11,.01,23,5,0)
events, all events except the debug messages (type 1)
"^DD",798.1,798.11,.01,23,6,0)
will be recorded for all registries.
"^DD",798.1,798.11,.01,23,7,0)
 
"^DD",798.1,798.11,.01,23,8,0)
Otherwise, merged content of the LOG EVENT multiples
"^DD",798.1,798.11,.01,23,9,0)
will determine the events to be recorded.
"^DD",798.1,798.11,.01,"DT")
3050722
"^DD",798.1,798.112,0)
EXTRACTED RESULT SUB-FIELD^^.03^3
"^DD",798.1,798.112,0,"DT")
3030318
"^DD",798.1,798.112,0,"ID","WRITE")
D EN^DDIOL($P(^(0),U,2),"","?20")
"^DD",798.1,798.112,0,"IX","B",798.112,.01)

"^DD",798.1,798.112,0,"IX","C",798.112,.02)

"^DD",798.1,798.112,0,"NM","EXTRACTED RESULT")
 
"^DD",798.1,798.112,0,"UP")
798.1
"^DD",798.1,798.112,.01,0)
LOINC CODE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:X'?1(1.7N,1"*") X
"^DD",798.1,798.112,.01,1,0)
^.1
"^DD",798.1,798.112,.01,1,1,0)
798.112^B
"^DD",798.1,798.112,.01,1,1,1)
S ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.01,1,1,2)
K ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)
"^DD",798.1,798.112,.01,1,1,3)
Do not delete!
"^DD",798.1,798.112,.01,1,1,"DT")
3010716
"^DD",798.1,798.112,.01,3)
Answer must be 1-7 characters in length.
"^DD",798.1,798.112,.01,8.5)
@
"^DD",798.1,798.112,.01,9)
@
"^DD",798.1,798.112,.01,21,0)
^^11^11^3011015^
"^DD",798.1,798.112,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.01,21,3,0)
 
"^DD",798.1,798.112,.01,21,4,0)
Enter the unique numeric LOINC code (without the
"^DD",798.1,798.112,.01,21,5,0)
check digit) of the Lab result to be extracted. If
"^DD",798.1,798.112,.01,21,6,0)
you want to use only NLT code, enter zero as the
"^DD",798.1,798.112,.01,21,7,0)
value of this field.
"^DD",798.1,798.112,.01,21,8,0)
 
"^DD",798.1,798.112,.01,21,9,0)
If you want to extract all results, create a
"^DD",798.1,798.112,.01,21,10,0)
record in this multiple containing the "*" 
"^DD",798.1,798.112,.01,21,11,0)
character in this field.
"^DD",798.1,798.112,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.01,"DT")
3010716
"^DD",798.1,798.112,.02,0)
NLT CODE^FX^^0;2^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:'(X?5N1"."4.5N) X
"^DD",798.1,798.112,.02,1,0)
^.1
"^DD",798.1,798.112,.02,1,1,0)
798.112^C
"^DD",798.1,798.112,.02,1,1,1)
S ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.02,1,1,2)
K ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)
"^DD",798.1,798.112,.02,1,1,3)
Do not delete!
"^DD",798.1,798.112,.02,1,1,"DT")
3010716
"^DD",798.1,798.112,.02,3)
Answer must be 10-11 characters in length.
"^DD",798.1,798.112,.02,8.5)
@
"^DD",798.1,798.112,.02,9)
@
"^DD",798.1,798.112,.02,21,0)
^^8^8^3011015^
"^DD",798.1,798.112,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.02,21,3,0)
 
"^DD",798.1,798.112,.02,21,4,0)
Enter the unique NLT code of the Lab result to be
"^DD",798.1,798.112,.02,21,5,0)
extracted. Both LOINC and NLT codes (if available)
"^DD",798.1,798.112,.02,21,6,0)
are used for searching the Lab results. If you 
"^DD",798.1,798.112,.02,21,7,0)
want to use only the LOINC code, leave this field 
"^DD",798.1,798.112,.02,21,8,0)
empty.
"^DD",798.1,798.112,.02,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.02,"DT")
3010716
"^DD",798.1,798.112,.03,0)
SUBSCRIPTS^FX^^0;3^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>30!($L(X)<2) X
"^DD",798.1,798.112,.03,3)
Answer must be 2-30 characters in length.
"^DD",798.1,798.112,.03,8.5)
@
"^DD",798.1,798.112,.03,9)
@
"^DD",798.1,798.112,.03,21,0)
^^14^14^3030318^
"^DD",798.1,798.112,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.03,21,3,0)
 
"^DD",798.1,798.112,.03,21,4,0)
Enter a list of the subscripts separated by commas
"^DD",798.1,798.112,.03,21,5,0)
(CH, MI, etc.) from where the results should be
"^DD",798.1,798.112,.03,21,6,0)
loaded by the $$GCPR^LA7QRY function. Only these
"^DD",798.1,798.112,.03,21,7,0)
subscripts will be searched for new data.
"^DD",798.1,798.112,.03,21,8,0)
 
"^DD",798.1,798.112,.03,21,9,0)
NOTE: The value of the field affects the data
"^DD",798.1,798.112,.03,21,10,0)
extraction only if the LOINC CODE field is equal
"^DD",798.1,798.112,.03,21,11,0)
to "*".
"^DD",798.1,798.112,.03,21,12,0)
 
"^DD",798.1,798.112,.03,21,13,0)
If this field is empty (by default), the API 
"^DD",798.1,798.112,.03,21,14,0)
searches through all supported subscripts.
"^DD",798.1,798.112,.03,"DT")
3030318
"^DD",798.1,798.114,0)
NOTIFICATION SUB-FIELD^^.01^1
"^DD",798.1,798.114,0,"DT")
3010907
"^DD",798.1,798.114,0,"IX","B",798.114,.01)

"^DD",798.1,798.114,0,"NM","NOTIFICATION")
 
"^DD",798.1,798.114,0,"UP")
798.1
"^DD",798.1,798.114,.01,0)
NOTIFICATION^MP200'X^VA(200,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.114,.01,1,0)
^.1
"^DD",798.1,798.114,.01,1,1,0)
798.114^B
"^DD",798.1,798.114,.01,1,1,1)
S ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.114,.01,1,1,2)
K ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",798.1,798.114,.01,1,1,3)
Do not delete!
"^DD",798.1,798.114,.01,21,0)
^^4^4^3060203^
"^DD",798.1,798.114,.01,21,1,0)
Select a user who already receives alerts or add a
"^DD",798.1,798.114,.01,21,2,0)
new one from the NEW PERSON file. VistA users
"^DD",798.1,798.114,.01,21,3,0)
referenced by this field will be notified about
"^DD",798.1,798.114,.01,21,4,0)
problems with the registry processes.
"^DD",798.1,798.114,.01,"DT")
3050427
"^DD",798.1,798.118,0)
SECURITY KEY SUB-FIELD^^.01^1
"^DD",798.1,798.118,0,"DT")
3020801
"^DD",798.1,798.118,0,"NM","SECURITY KEY")
 
"^DD",798.1,798.118,0,"UP")
798.1
"^DD",798.1,798.118,.01,0)
SECURITY KEY^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>27!($L(X)<3) X
"^DD",798.1,798.118,.01,1,0)
^.1^^-1
"^DD",798.1,798.118,.01,1,2,0)
798.1^ACL^MUMPS
"^DD",798.1,798.118,.01,1,2,1)
D ACLSET^RORDD
"^DD",798.1,798.118,.01,1,2,2)
D ACLKILL^RORDD
"^DD",798.1,798.118,.01,1,2,3)
Do not delete!
"^DD",798.1,798.118,.01,1,2,"%D",0)
^^25^25^3060203^
"^DD",798.1,798.118,.01,1,2,"%D",1,0)
This cross-reference is used by the screening 
"^DD",798.1,798.118,.01,1,2,"%D",2,0)
logic (the "SCR" node) of some Clinical Case 
"^DD",798.1,798.118,.01,1,2,"%D",3,0)
Registries files to check whether a user is
"^DD",798.1,798.118,.01,1,2,"%D",4,0)
allowed to access the records or not.
"^DD",798.1,798.118,.01,1,2,"%D",5,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",6,0)
The cross-reference contains two kinds of items:
"^DD",798.1,798.118,.01,1,2,"%D",7,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",8,0)
  ^ROR(798.1,"ACL",RORDUZ,RegIEN,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",9,0)
  ^ROR(798.1,"ACL",RORDUZ,RegName,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",10,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",11,0)
where RORDUZ is the value of the DUZ variable for
"^DD",798.1,798.118,.01,1,2,"%D",12,0)
the user who has access to one or more registries
"^DD",798.1,798.118,.01,1,2,"%D",13,0)
(according to the allocated security keys). RegIEN
"^DD",798.1,798.118,.01,1,2,"%D",14,0)
and RegName are the registry IEN and name. KEY is
"^DD",798.1,798.118,.01,1,2,"%D",15,0)
the name of security key and IEN is the internal
"^DD",798.1,798.118,.01,1,2,"%D",16,0)
entry number of the corresponding record of the
"^DD",798.1,798.118,.01,1,2,"%D",17,0)
SECURITY KEY multiple.
"^DD",798.1,798.118,.01,1,2,"%D",18,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",19,0)
The cross-reference should be rebuilt after
"^DD",798.1,798.118,.01,1,2,"%D",20,0)
changes in the allocation of the security keys
"^DD",798.1,798.118,.01,1,2,"%D",21,0)
associated with any registry. Usually, this is
"^DD",798.1,798.118,.01,1,2,"%D",22,0)
done by the nightly task (the [ROR TASK] option).
"^DD",798.1,798.118,.01,1,2,"%D",23,0)
However, if you want the changes to be in effect
"^DD",798.1,798.118,.01,1,2,"%D",24,0)
immediately, you should rebuild this
"^DD",798.1,798.118,.01,1,2,"%D",25,0)
cross-reference manually.
"^DD",798.1,798.118,.01,1,2,"DT")
3020805
"^DD",798.1,798.118,.01,3)
Enter a name of security key (3-27 characters in length).
"^DD",798.1,798.118,.01,8.5)
@
"^DD",798.1,798.118,.01,9)
@
"^DD",798.1,798.118,.01,20,0)
^.3LA^^0
"^DD",798.1,798.118,.01,21,0)
^.001^5^5^3020816^^^
"^DD",798.1,798.118,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.118,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.118,.01,21,3,0)
 
"^DD",798.1,798.118,.01,21,4,0)
The SECURITY KEY field contains the name of the 
"^DD",798.1,798.118,.01,21,5,0)
security key associated with the registry.
"^DD",798.1,798.118,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.118,.01,"DT")
3050722
"^DD",798.1,798.12,0)
REPORT STATS SUB-FIELD^^.02^2
"^DD",798.1,798.12,0,"DT")
3050715
"^DD",798.1,798.12,0,"IX","B",798.12,.01)

"^DD",798.1,798.12,0,"NM","REPORT STATS")
 
"^DD",798.1,798.12,0,"UP")
798.1
"^DD",798.1,798.12,.01,0)
REPORT STATS^MP799.34'X^ROR(799.34,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.12,.01,1,0)
^.1
"^DD",798.1,798.12,.01,1,1,0)
798.12^B
"^DD",798.1,798.12,.01,1,1,1)
S ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.12,.01,1,1,2)
K ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)
"^DD",798.1,798.12,.01,1,1,3)
Do not delete!
"^DD",798.1,798.12,.01,1,1,"DT")
3050722
"^DD",798.1,798.12,.01,3)
 
"^DD",798.1,798.12,.01,8.5)
@
"^DD",798.1,798.12,.01,9)
@
"^DD",798.1,798.12,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.01,20,1,0)
STATE
"^DD",798.1,798.12,.01,21,0)
^.001^2^2^3120228^^
"^DD",798.1,798.12,.01,21,1,0)
A pointer stored in this field links the stats to 
"^DD",798.1,798.12,.01,21,2,0)
the report definition.
"^DD",798.1,798.12,.01,"DT")
3050722
"^DD",798.1,798.12,.02,0)
NUMBER OF RUNS^NJ9,0^^0;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.12,.02,3)
Type a Number between 0 and 999999999, 0 Decimal Digits.
"^DD",798.1,798.12,.02,8.5)
@
"^DD",798.1,798.12,.02,9)
@
"^DD",798.1,798.12,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.02,20,1,0)
STATE
"^DD",798.1,798.12,.02,21,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,21,1,0)
This field serves as a counter of report runs 
"^DD",798.1,798.12,.02,21,2,0)
since the last successful data transmission.
"^DD",798.1,798.12,.02,23,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,23,1,0)
Please do not edit the field directly. Use the entry
"^DD",798.1,798.12,.02,23,2,0)
points of the RORTSK12 routine instead.
"^DD",798.1,798.12,.02,"DT")
3050715
"^DD",798.1,798.122,0)
LAST BATCH CONTROL ID SUB-FIELD^^.03^3
"^DD",798.1,798.122,0,"DT")
3051129
"^DD",798.1,798.122,0,"NM","LAST BATCH CONTROL ID")
 
"^DD",798.1,798.122,0,"UP")
798.1
"^DD",798.1,798.122,.01,0)
LAST BATCH CONTROL ID^MFX^^0;1^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.01,1,0)
^.1^^0
"^DD",798.1,798.122,.01,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.01,8.5)
@
"^DD",798.1,798.122,.01,9)
@
"^DD",798.1,798.122,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.01,20,1,0)
HL7
"^DD",798.1,798.122,.01,21,0)
^.001^3^3^3050503^^^
"^DD",798.1,798.122,.01,21,1,0)
The LAST BATCH CONTROL ID field contains the
"^DD",798.1,798.122,.01,21,2,0)
message control ID (BHS-11) of the latest batch
"^DD",798.1,798.122,.01,21,3,0)
HL7 message submitted to the VistA HL7 engine.
"^DD",798.1,798.122,.01,23,0)
^^3^3^3060203^
"^DD",798.1,798.122,.01,23,1,0)
This field is populated with the value returned by the 
"^DD",798.1,798.122,.01,23,2,0)
GENERATE^HLMA procedure. This value is usually
"^DD",798.1,798.122,.01,23,3,0)
different from that of the INTERNAL BATCH ID field.
"^DD",798.1,798.122,.01,"DT")
3051129
"^DD",798.1,798.122,.02,0)
INTERNAL BATCH ID^RF^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.02,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.02,8.5)
@
"^DD",798.1,798.122,.02,9)
@
"^DD",798.1,798.122,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.02,20,1,0)
HL7
"^DD",798.1,798.122,.02,21,0)
^^8^8^3060203^
"^DD",798.1,798.122,.02,21,1,0)
This field contains the internal batch identifier
"^DD",798.1,798.122,.02,21,2,0)
that was used during the generation of the batch 
"^DD",798.1,798.122,.02,21,3,0)
message.
"^DD",798.1,798.122,.02,21,4,0)
 
"^DD",798.1,798.122,.02,21,5,0)
The Control ID of each individual message included
"^DD",798.1,798.122,.02,21,6,0)
in the batch is constructed from the value of this
"^DD",798.1,798.122,.02,21,7,0)
field and a sequential number separated by the '-'
"^DD",798.1,798.122,.02,21,8,0)
character.
"^DD",798.1,798.122,.02,23,0)
^.001^7^7^3060203^^
"^DD",798.1,798.122,.02,23,1,0)
The INTERNAL BATCH ID field is automatically populated 
"^DD",798.1,798.122,.02,23,2,0)
with the identifier of the batch placeholder created by
"^DD",798.1,798.122,.02,23,3,0)
the CREATE^HLTF procedure. See the $$CREATE^RORHL7 and
"^DD",798.1,798.122,.02,23,4,0)
$$TMSTMP^ROREXTUT functions for details.
"^DD",798.1,798.122,.02,23,5,0)
 
"^DD",798.1,798.122,.02,23,6,0)
The actual batch control ID (BHS-11) is usually
"^DD",798.1,798.122,.02,23,7,0)
different from the value stored in this field.
"^DD",798.1,798.122,.02,"DT")
3050503
"^DD",798.1,798.122,.03,0)
DATE^D^^0;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.122,.03,8.5)
@
"^DD",798.1,798.122,.03,9)
@
"^DD",798.1,798.122,.03,21,0)
^^2^2^3060106^
"^DD",798.1,798.122,.03,21,1,0)
This field stores the date/time of the batch HL7 
"^DD",798.1,798.122,.03,21,2,0)
message.
"^DD",798.1,798.122,.03,"DT")
3051129
"^DD",798.1,798.128,0)
LOCAL TEST NAME SUB-FIELD^^.02^2
"^DD",798.1,798.128,0,"DT")
3030402
"^DD",798.1,798.128,0,"ID","WRITE")
S %I=Y,Y=+$P($G(^(0)),U,2),Y=$S(Y>0:$P($G(^ROR(799.1,Y,0)),U),1:"") D EN^DDIOL("   "_Y,,"?40") S Y=%I K %I
"^DD",798.1,798.128,0,"IX","B",798.128,.01)

"^DD",798.1,798.128,0,"NM","LOCAL TEST NAME")
 
"^DD",798.1,798.128,0,"UP")
798.1
"^DD",798.1,798.128,.01,0)
LOCAL TEST NAME^MP60'^LAB(60,^0;1^Q
"^DD",798.1,798.128,.01,1,0)
^.1
"^DD",798.1,798.128,.01,1,1,0)
798.128^B
"^DD",798.1,798.128,.01,1,1,1)
S ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.128,.01,1,1,2)
K ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)
"^DD",798.1,798.128,.01,20,0)
^.3LA^^0
"^DD",798.1,798.128,.01,"DT")
3030706
"^DD",798.1,798.128,.02,0)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.128,.02,1,0)
^.1^^0
"^DD",798.1,798.128,.02,12)
Only Lab Groups can be selected.
"^DD",798.1,798.128,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=3"
"^DD",798.1,798.128,.02,"DT")
3030706
"^DD",798.1,798.129,0)
LOCAL DRUG NAME SUB-FIELD^^.02^2
"^DD",798.1,798.129,0,"DT")
3030625
"^DD",798.1,798.129,0,"IX","B",798.129,.01)

"^DD",798.1,798.129,0,"NM","LOCAL DRUG NAME")
 
"^DD",798.1,798.129,0,"UP")
798.1
"^DD",798.1,798.129,.01,0)
LOCAL DRUG NAME^MP50'^PSDRUG(^0;1^Q
"^DD",798.1,798.129,.01,1,0)
^.1
"^DD",798.1,798.129,.01,1,1,0)
798.129^B
"^DD",798.1,798.129,.01,1,1,1)
S ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.129,.01,1,1,2)
K ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)
"^DD",798.1,798.129,.01,20,0)
^.3LA^^0
"^DD",798.1,798.129,.01,"DT")
3030706
"^DD",798.1,798.129,.02,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.129,.02,12)
Only Drug Groups can be selected.
"^DD",798.1,798.129,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=4"
"^DD",798.1,798.129,.02,20,0)
^.3LA^^0
"^DD",798.1,798.129,.02,"DT")
3030706
"^DD",798.1,798.13,0)
SELECTION RULE SUB-FIELD^^.01^1
"^DD",798.1,798.13,0,"DT")
3000410
"^DD",798.1,798.13,0,"NM","SELECTION RULE")

"^DD",798.1,798.13,0,"UP")
798.1
"^DD",798.1,798.13,.01,0)
SELECTION RULE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>40!($L(X)<3)!'(X?3.UNP) X I $D(X) K:'$D(^ROR(798.2,"B",$E(X,1,40))) X
"^DD",798.1,798.13,.01,1,0)
^.1^^-1
"^DD",798.1,798.13,.01,1,2,0)
798.1^ARULES
"^DD",798.1,798.13,.01,1,2,1)
S ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)=""
"^DD",798.1,798.13,.01,1,2,2)
K ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)
"^DD",798.1,798.13,.01,1,2,3)
Do not delete!
"^DD",798.1,798.13,.01,1,2,"%D",0)
^.101^2^2^3140228^^
"^DD",798.1,798.13,.01,1,2,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.1,798.13,.01,1,2,"%D",2,0)
registries that use the selection rule.
"^DD",798.1,798.13,.01,1,2,"DT")
3000406
"^DD",798.1,798.13,.01,3)
Enter a name of the selection rule (3-40 characters).
"^DD",798.1,798.13,.01,4)
I $G(X)="??" N D,DIC,DZ S DIC="^ROR(798.2,",DIC(0)="",D="B",DZ="??" D DQ^DICQ,EN^DDIOL("",,"!")
"^DD",798.1,798.13,.01,8.5)
@
"^DD",798.1,798.13,.01,9)
@
"^DD",798.1,798.13,.01,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.13,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.13,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.13,.01,21,3,0)
 
"^DD",798.1,798.13,.01,21,4,0)
Enter a name of the selection rule that will be 
"^DD",798.1,798.13,.01,21,5,0)
used to select patients for addition to the
"^DD",798.1,798.13,.01,21,6,0)
registry. The name should be entered exactly as it
"^DD",798.1,798.13,.01,21,7,0)
appears in the list of selection rules (file 
"^DD",798.1,798.13,.01,21,8,0)
#798.2).
"^DD",798.1,798.13,.01,23,0)
^.001^3^3^3140228^^^^
"^DD",798.1,798.13,.01,23,1,0)
Names of the selection rules are used here instead of 
"^DD",798.1,798.13,.01,23,2,0)
pointers because the KIDS pointer resolving feature 
"^DD",798.1,798.13,.01,23,3,0)
does not work for .01 fields.
"^DD",798.1,798.13,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.13,.01,"DT")
3140228
"^DD",798.1,798.15,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.1,798.15,0,"NM","DESCRIPTION")
 
"^DD",798.1,798.15,0,"UP")
798.1
"^DD",798.1,798.15,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.1,798.15,.01,"DT")
3000313
"^DD",798.2,798.2,0)
FIELD^^6^8
"^DD",798.2,798.2,0,"DDA")
N
"^DD",798.2,798.2,0,"DT")
3150423
"^DD",798.2,798.2,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,3),,"?30")
"^DD",798.2,798.2,0,"NM","ROR SELECTION RULE")

"^DD",798.2,798.2,0,"PT",798.01,.01)

"^DD",798.2,798.2,0,"VRPK")
ROR
"^DD",798.2,798.2,.01,0)
RULE NAME^FX^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>40!($L(X)<3)!'(X?1.UNP) X
"^DD",798.2,798.2,.01,1,0)
^.1^^0
"^DD",798.2,798.2,.01,3)
Enter a unique namespaced rule name (3-40 characters).
"^DD",798.2,798.2,.01,8.5)
@
"^DD",798.2,798.2,.01,9)
@
"^DD",798.2,798.2,.01,21,0)
^.001^6^6^3140310^^^
"^DD",798.2,798.2,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,.01,21,3,0)
 
"^DD",798.2,798.2,.01,21,4,0)
Selection rule name must be unique and name 
"^DD",798.2,798.2,.01,21,5,0)
spaced. Names of the rules that are used for
"^DD",798.2,798.2,.01,21,6,0)
National Registries must start with "VA".
"^DD",798.2,798.2,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,.01,"DT")
3140228
"^DD",798.2,798.2,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;4^Q:$$VAEDT^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,1,0)
^.1^^0
"^DD",798.2,798.2,.09,3)
Enter 1 or YES if this rule is for a national registry.
"^DD",798.2,798.2,.09,8.5)
@
"^DD",798.2,798.2,.09,9)
@
"^DD",798.2,798.2,.09,21,0)
^.001^6^6^3150528^^
"^DD",798.2,798.2,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.2,798.2,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.2,798.2,.09,21,3,0)
 
"^DD",798.2,798.2,.09,21,4,0)
Selection rules of the national registries must
"^DD",798.2,798.2,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",798.2,798.2,.09,21,6,0)
editing of other fields of rule definitions.
"^DD",798.2,798.2,.09,"DEL",1,0)
I $$VADEL^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,"DT")
3011121
"^DD",798.2,798.2,1,0)
EXPRESSION^RFX^^1;E1,245^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>250!($L(X)<1) X I $D(X) Q:$$EXPR^RORDD($P($G(^ROR(798.2,DA,0)),U,2))
"^DD",798.2,798.2,1,3)
Enter M expression that implements the selection rule (1-250 characters).
"^DD",798.2,798.2,1,8.5)
@
"^DD",798.2,798.2,1,9)
@
"^DD",798.2,798.2,1,21,0)
^^5^5^3011010^
"^DD",798.2,798.2,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,1,21,3,0)
 
"^DD",798.2,798.2,1,21,4,0)
Enter a MUMPS expression (it may contain special
"^DD",798.2,798.2,1,21,5,0)
macros) that implements the selection rule.
"^DD",798.2,798.2,1,23,0)
^^62^62^3060203^
"^DD",798.2,798.2,1,23,1,0)
MUMPS expression that implements the selection rule can
"^DD",798.2,798.2,1,23,2,0)
contain special macros:
"^DD",798.2,798.2,1,23,3,0)
 
"^DD",798.2,798.2,1,23,4,0)
 {E: Field Name} - External value of the field
"^DD",798.2,798.2,1,23,5,0)
 {E: Field Number}
"^DD",798.2,798.2,1,23,6,0)
 
"^DD",798.2,798.2,1,23,7,0)
 {I: Field Name} - Internal value of the field
"^DD",798.2,798.2,1,23,8,0)
 {I: Field Number}
"^DD",798.2,798.2,1,23,9,0)
 
"^DD",798.2,798.2,1,23,10,0)
 {Rule Name} - Result value of the lower level
"^DD",798.2,798.2,1,23,11,0)
selection rule
"^DD",798.2,798.2,1,23,12,0)
 
"^DD",798.2,798.2,1,23,13,0)
 {AVG: Rule Name} - Average value of the rule
"^DD",798.2,798.2,1,23,14,0)
 
"^DD",798.2,798.2,1,23,15,0)
 {CNT: Rule Name} - Number of calculations of the rule
"^DD",798.2,798.2,1,23,16,0)
 
"^DD",798.2,798.2,1,23,17,0)
 {MAX: Rule Name} - Maximum value of the rule
"^DD",798.2,798.2,1,23,18,0)
 
"^DD",798.2,798.2,1,23,19,0)
 {MIN: Rule Name} - Minimum value of the rule
"^DD",798.2,798.2,1,23,20,0)
 
"^DD",798.2,798.2,1,23,21,0)
 {SUM: Rule Name} - Total of the selection rule values
"^DD",798.2,798.2,1,23,22,0)
 
"^DD",798.2,798.2,1,23,23,0)
 {LS: Lab Search Name} - This macro can be used only in
"^DD",798.2,798.2,1,23,24,0)
the selection rules associated with the LAB DATA file
"^DD",798.2,798.2,1,23,25,0)
(#63). It is evaluated as 1 if some of the patient
"^DD",798.2,798.2,1,23,26,0)
lab results pass the Lab search criteria (from the file
"^DD",798.2,798.2,1,23,27,0)
#798.9). Otherwise, it is evaluated as zero.
"^DD",798.2,798.2,1,23,28,0)
 
"^DD",798.2,798.2,1,23,29,0)
Return values of the top-level rules:
"^DD",798.2,798.2,1,23,30,0)
 
"^DD",798.2,798.2,1,23,31,0)
 0        - Skip the patient
"^DD",798.2,798.2,1,23,32,0)
 Non-zero - Add the patient to the registry
"^DD",798.2,798.2,1,23,33,0)
 
"^DD",798.2,798.2,1,23,34,0)
Return values of the lower level rules:
"^DD",798.2,798.2,1,23,35,0)
 
"^DD",798.2,798.2,1,23,36,0)
Return values can be used in the expressions of the
"^DD",798.2,798.2,1,23,37,0)
other rules. Some additional values are calculated
"^DD",798.2,798.2,1,23,38,0)
automatically (minimum, maximum, average, etc.) for
"^DD",798.2,798.2,1,23,39,0)
each rule.
"^DD",798.2,798.2,1,23,40,0)
 
"^DD",798.2,798.2,1,23,41,0)
Avoid circular references in the expressions. If a 
"^DD",798.2,798.2,1,23,42,0)
rule directly or indirectly depends on itself, it
"^DD",798.2,798.2,1,23,43,0)
cannot be evaluated. An example of the circular
"^DD",798.2,798.2,1,23,44,0)
reference:
"^DD",798.2,798.2,1,23,45,0)
 
"^DD",798.2,798.2,1,23,46,0)
 Rule A: {MAX:B}<10
"^DD",798.2,798.2,1,23,47,0)
 Rule B: {I:23}+{C}
"^DD",798.2,798.2,1,23,48,0)
 Rule C: {CNT:A}
"^DD",798.2,798.2,1,23,49,0)
 
"^DD",798.2,798.2,1,23,50,0)
The rule A cannot be evaluated because it depends on 
"^DD",798.2,798.2,1,23,51,0)
the rule B, which depends on rule C, and C depends on
"^DD",798.2,798.2,1,23,52,0)
A.
"^DD",798.2,798.2,1,23,53,0)
 
"^DD",798.2,798.2,1,23,54,0)
Complex selection rules could be implemented by 
"^DD",798.2,798.2,1,23,55,0)
external MUMPS functions. In that case the expression
"^DD",798.2,798.2,1,23,56,0)
should contains a full reference to the function
"^DD",798.2,798.2,1,23,57,0)
($$TAG^ROUTINE). Values of the necessary data elements
"^DD",798.2,798.2,1,23,58,0)
can be loaded automatically (see description of the
"^DD",798.2,798.2,1,23,59,0)
DATA ELEMENT multiple).
"^DD",798.2,798.2,1,23,60,0)
 
"^DD",798.2,798.2,1,23,61,0)
See the Programmer's reference manual for more details 
"^DD",798.2,798.2,1,23,62,0)
regarding the selection rule expressions.
"^DD",798.2,798.2,1,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,1,"DT")
3011109
"^DD",798.2,798.2,2,0)
FILE^RNJ22,9X^^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X I $D(X) K:'$$VFILE^DILFD(X) X
"^DD",798.2,798.2,2,3)
Enter (sub)file number between 1 and 999999999999, 9 Decimal Digits.
"^DD",798.2,798.2,2,8.5)
@
"^DD",798.2,798.2,2,9)
@
"^DD",798.2,798.2,2,21,0)
^.001^6^6^3020403^^
"^DD",798.2,798.2,2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,2,21,3,0)
 
"^DD",798.2,798.2,2,21,4,0)
Enter a file/sub-file number that the selection 
"^DD",798.2,798.2,2,21,5,0)
rule is associated with. Each selection rule can
"^DD",798.2,798.2,2,21,6,0)
be associated with only one file.
"^DD",798.2,798.2,2,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,2,"DT")
3011109
"^DD",798.2,798.2,4,0)
SHORT DESCRIPTION^FX^^0;3^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>30!($L(X)<3) X
"^DD",798.2,798.2,4,3)
Enter a short description of the selection rule (3-30 characters).
"^DD",798.2,798.2,4,8.5)
@
"^DD",798.2,798.2,4,9)
@
"^DD",798.2,798.2,4,21,0)
^^5^5^3020403^
"^DD",798.2,798.2,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,4,21,3,0)
 
"^DD",798.2,798.2,4,21,4,0)
The short description of the selection rule is 
"^DD",798.2,798.2,4,21,5,0)
used in the reports and GUI dialogs.
"^DD",798.2,798.2,4,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,4,"DT")
3011109
"^DD",798.2,798.2,5,0)
DESCRIPTION^798.25^^3;0
"^DD",798.2,798.2,5,21,0)
^^3^3^3150528^^
"^DD",798.2,798.2,5,21,1,0)
You can enter any additional reference information
"^DD",798.2,798.2,5,21,2,0)
related to the selection rule. The content of this
"^DD",798.2,798.2,5,21,3,0)
field is not used by the application.
"^DD",798.2,798.2,6,0)
DATA ELEMENT^798.26^^4;0
"^DD",798.2,798.2,6,9)
@
"^DD",798.2,798.2,6,21,0)
^.001^12^12^3060203^^
"^DD",798.2,798.2,6,21,1,0)
The DATA ELEMENT multiple contains a list of 
"^DD",798.2,798.2,6,21,2,0)
additional data elements to load. 
"^DD",798.2,798.2,6,21,3,0)
 
"^DD",798.2,798.2,6,21,4,0)
Values of all the data elements referenced in the
"^DD",798.2,798.2,6,21,5,0)
selection rule expression are loaded
"^DD",798.2,798.2,6,21,6,0)
automatically.
"^DD",798.2,798.2,6,21,7,0)
 
"^DD",798.2,798.2,6,21,8,0)
However, if the rule is implemented by an external
"^DD",798.2,798.2,6,21,9,0)
function, you can enter the codes of all necessary
"^DD",798.2,798.2,6,21,10,0)
data elements into this multiple. Their values
"^DD",798.2,798.2,6,21,11,0)
will be loaded automatically and will be
"^DD",798.2,798.2,6,21,12,0)
accessible in the function.
"^DD",798.2,798.2,6,"DT")
3020326
"^DD",798.2,798.2,7,0)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.2,798.2,7,3)
Select a coding system.
"^DD",798.2,798.2,7,12)
The screen limits the coding system to those allowed in files 80 and 80.1
"^DD",798.2,798.2,7,12.1)
S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)"
"^DD",798.2,798.2,7,21,0)
^.001^1^1^3150423^^^^
"^DD",798.2,798.2,7,21,1,0)
This is the coding system to which the code belongs.
"^DD",798.2,798.2,7,"DT")
3150423
"^DD",798.2,798.25,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.2,798.25,0,"NM","DESCRIPTION")

"^DD",798.2,798.25,0,"UP")
798.2
"^DD",798.2,798.25,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.2,798.25,.01,3)
Enter any additional text here to describe the rule.
"^DD",798.2,798.25,.01,21,0)
^^2^2^3150528^
"^DD",798.2,798.25,.01,21,1,0)
This field can contain any additional information needed to describe
"^DD",798.2,798.25,.01,21,2,0)
unique characteristics of this rule.
"^DD",798.2,798.25,.01,"DT")
3150528
"^DD",798.2,798.26,0)
DATA ELEMENT SUB-FIELD^^1^2
"^DD",798.2,798.26,0,"DT")
3020326
"^DD",798.2,798.26,0,"NM","DATA ELEMENT")

"^DD",798.2,798.26,0,"UP")
798.2
"^DD",798.2,798.26,.01,0)
ELEMENT CODE^MNJ9,0X^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))  K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.2,798.26,.01,1,0)
^.1^^0
"^DD",798.2,798.26,.01,3)
Type a Number between 1 and 999999999, 0 Decimal Digits.
"^DD",798.2,798.26,.01,8.5)
@
"^DD",798.2,798.26,.01,9)
@
"^DD",798.2,798.26,.01,21,0)
^^8^8^3020328^
"^DD",798.2,798.26,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.26,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.26,.01,21,3,0)
 
"^DD",798.2,798.26,.01,21,4,0)
Enter the code of the data element that should be 
"^DD",798.2,798.26,.01,21,5,0)
loaded before evaluation of the expression. Values
"^DD",798.2,798.26,.01,21,6,0)
of all data elements referenced in the selection
"^DD",798.2,798.26,.01,21,7,0)
rule expression are loaded automatically (you do
"^DD",798.2,798.26,.01,21,8,0)
not need to enter them here).
"^DD",798.2,798.26,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,.01,"DT")
3020326
"^DD",798.2,798.26,1,0)
VALUE TYPE^RSX^E:External;I:Internal;EI:Both;^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,1,3)
Enter a value type to describe the retrieval format of the data element.
"^DD",798.2,798.26,1,8.5)
@
"^DD",798.2,798.26,1,9)
@
"^DD",798.2,798.26,1,21,0)
^.001^3^3^3150528^^
"^DD",798.2,798.26,1,21,1,0)
This field holds required value type(s) of the
"^DD",798.2,798.26,1,21,2,0)
data element. The type(s) must be supported by the
"^DD",798.2,798.26,1,21,3,0)
search engine.
"^DD",798.2,798.26,1,"DT")
3020311
"^DD",798.5,798.5,0)
FIELD^^3^4
"^DD",798.5,798.5,0,"DDA")
N
"^DD",798.5,798.5,0,"DT")
3150409
"^DD",798.5,798.5,0,"IX","B",798.5,.01)

"^DD",798.5,798.5,0,"NM","ROR ICD SEARCH")

"^DD",798.5,798.5,0,"VRPK")
ROR
"^DD",798.5,798.5,.01,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;1^Q
"^DD",798.5,798.5,.01,1,0)
^.1
"^DD",798.5,798.5,.01,1,1,0)
798.5^B
"^DD",798.5,798.5,.01,1,1,1)
S ^ROR(798.5,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.5,.01,1,1,2)
K ^ROR(798.5,"B",$E(X,1,30),DA)
"^DD",798.5,798.5,.01,3)
Enter a registry from the ROR REGISTRY PARAMETERS file.
"^DD",798.5,798.5,.01,21,0)
^^5^5^3120323^
"^DD",798.5,798.5,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A NATIONAL REGISTRY 
"^DD",798.5,798.5,.01,21,2,0)
DEFINITION.
"^DD",798.5,798.5,.01,21,3,0)
 
"^DD",798.5,798.5,.01,21,4,0)
The ICD codes defined for this registry will be used to select qualified 
"^DD",798.5,798.5,.01,21,5,0)
patients.
"^DD",798.5,798.5,.01,"DEL",1,0)
I $$VADEL^RORDD(798.5,$G(DA),.01)
"^DD",798.5,798.5,.01,"DT")
3140729
"^DD",798.5,798.5,1,0)
ICD CODE^798.51P^^1;0
"^DD",798.5,798.5,1,21,0)
^.001^4^4^3150528^^^^
"^DD",798.5,798.5,1,21,1,0)
This multiple contains a list of ICD codes in the ICD DIAGNOSIS
"^DD",798.5,798.5,1,21,2,0)
file (#80).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,1,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.5,1,21,4,0)
  
"^DD",798.5,798.5,2,0)
ICD PROCEDURE CODE^798.52P^^2;0
"^DD",798.5,798.5,2,21,0)
^.001^3^3^3150528^^^^
"^DD",798.5,798.5,2,21,1,0)
This multiple contains a list of ICD codes in the ICD OPERATION/PROCEDURE
"^DD",798.5,798.5,2,21,2,0)
file (#80.1).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,2,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.5,3,0)
INPATIENT CPT CODE^798.53P^^3;0
"^DD",798.5,798.5,3,21,0)
^^3^3^3150528^
"^DD",798.5,798.5,3,21,1,0)
This multiple contains a list of CPT codes in the CPT
"^DD",798.5,798.5,3,21,2,0)
file (#81).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,3,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.51,0)
ICD CODE SUB-FIELD^^.01^1
"^DD",798.5,798.51,0,"DT")
3120223
"^DD",798.5,798.51,0,"IX","B",798.51,.01)

"^DD",798.5,798.51,0,"NM","ICD CODE")
 
"^DD",798.5,798.51,0,"UP")
798.5
"^DD",798.5,798.51,.01,0)
ICD CODE^MP80'^ICD9(^0;1^Q
"^DD",798.5,798.51,.01,1,0)
^.1
"^DD",798.5,798.51,.01,1,1,0)
798.51^B
"^DD",798.5,798.51,.01,1,1,1)
S ^ROR(798.5,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.51,.01,1,1,2)
K ^ROR(798.5,DA(1),1,"B",$E(X,1,30),DA)
"^DD",798.5,798.51,.01,3)
Enter an ICD code.
"^DD",798.5,798.51,.01,21,0)
^.001^1^1^3120416^^^^
"^DD",798.5,798.51,.01,21,1,0)
The ICD diagnosis code is used to qualify a patient for the registry.
"^DD",798.5,798.51,.01,"DT")
3120328
"^DD",798.5,798.52,0)
ICD PROCEDURE CODE SUB-FIELD^^.01^1
"^DD",798.5,798.52,0,"DT")
3150409
"^DD",798.5,798.52,0,"IX","B",798.52,.01)

"^DD",798.5,798.52,0,"NM","ICD PROCEDURE CODE")

"^DD",798.5,798.52,0,"UP")
798.5
"^DD",798.5,798.52,.01,0)
ICD PROCEDURE CODE^MP80.1'^ICD0(^0;1^Q
"^DD",798.5,798.52,.01,1,0)
^.1
"^DD",798.5,798.52,.01,1,1,0)
798.52^B
"^DD",798.5,798.52,.01,1,1,1)
S ^ROR(798.5,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.52,.01,1,1,2)
K ^ROR(798.5,DA(1),2,"B",$E(X,1,30),DA)
"^DD",798.5,798.52,.01,3)
Enter an ICD procedure code.
"^DD",798.5,798.52,.01,21,0)
^.001^2^2^3150528^^^^
"^DD",798.5,798.52,.01,21,1,0)
The ICD procedure code is used to qualify a
"^DD",798.5,798.52,.01,21,2,0)
patient for the registry.
"^DD",798.5,798.52,.01,"DT")
3150409
"^DD",798.5,798.53,0)
INPATIENT CPT CODE SUB-FIELD^^.01^1
"^DD",798.5,798.53,0,"DT")
3150409
"^DD",798.5,798.53,0,"IX","B",798.53,.01)

"^DD",798.5,798.53,0,"NM","INPATIENT CPT CODE")

"^DD",798.5,798.53,0,"UP")
798.5
"^DD",798.5,798.53,.01,0)
INPATIENT CPT CODE^MP81'^ICPT(^0;1^Q
"^DD",798.5,798.53,.01,1,0)
^.1
"^DD",798.5,798.53,.01,1,1,0)
798.53^B
"^DD",798.5,798.53,.01,1,1,1)
S ^ROR(798.5,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.53,.01,1,1,2)
K ^ROR(798.5,DA(1),3,"B",$E(X,1,30),DA)
"^DD",798.5,798.53,.01,3)
Enter a CPT code.
"^DD",798.5,798.53,.01,21,0)
^.001^1^1^3150528^^
"^DD",798.5,798.53,.01,21,1,0)
The INPATIENT CPT procedure code is used to qualify a patient for a registry.
"^DD",798.5,798.53,.01,"DT")
3150409
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DIC",798.1,798.1,0)
ROR REGISTRY PARAMETERS^798.1
"^DIC",798.1,798.1,0,"GL")
^ROR(798.1,
"^DIC",798.1,798.1,"%",0)
^1.005^^0
"^DIC",798.1,798.1,"%D",0)
^^22^22^3060203^
"^DIC",798.1,798.1,"%D",1,0)
Records of the ROR REGISTRY PARAMETERS file 
"^DIC",798.1,798.1,"%D",2,0)
contain various registry parameters and the data
"^DIC",798.1,798.1,"%D",3,0)
that indicates current registry state. Every 
"^DIC",798.1,798.1,"%D",4,0)
registry must have a record in this file.
"^DIC",798.1,798.1,"%D",5,0)
 
"^DIC",798.1,798.1,"%D",6,0)
Records of the file are uniquely identified by the
"^DIC",798.1,798.1,"%D",7,0)
registry name (the "A" primary key and the
"^DIC",798.1,798.1,"%D",8,0)
uniqueness index "B" are used for that purpose).
"^DIC",798.1,798.1,"%D",9,0)
 
"^DIC",798.1,798.1,"%D",10,0)
A permanent screen (the ^DD(798.1,0,"SCR") node) 
"^DIC",798.1,798.1,"%D",11,0)
restricts access to records of this file. Users
"^DIC",798.1,798.1,"%D",12,0)
can only access records of those registries that
"^DIC",798.1,798.1,"%D",13,0)
they have the security key(s) for. Users with the
"^DIC",798.1,798.1,"%D",14,0)
ROR VA IRM security key can access all records of
"^DIC",798.1,798.1,"%D",15,0)
the file.
"^DIC",798.1,798.1,"%D",16,0)
 
"^DIC",798.1,798.1,"%D",17,0)
If you want the changes in the security keys 
"^DIC",798.1,798.1,"%D",18,0)
allocation to have an effect immediately, you
"^DIC",798.1,798.1,"%D",19,0)
should rebuild the "ACL" cross-reference of the
"^DIC",798.1,798.1,"%D",20,0)
.01 field of the SECURITY KEY multiple of this
"^DIC",798.1,798.1,"%D",21,0)
file. See the description of the cross-reference
"^DIC",798.1,798.1,"%D",22,0)
for more details.
"^DIC",798.1,"B","ROR REGISTRY PARAMETERS",798.1)

"^DIC",798.2,798.2,0)
ROR SELECTION RULE^798.2
"^DIC",798.2,798.2,0,"GL")
^ROR(798.2,
"^DIC",798.2,798.2,"%",0)
^1.005^^0
"^DIC",798.2,798.2,"%D",0)
^^30^30^3020403^
"^DIC",798.2,798.2,"%D",1,0)
The ROR SELECTION RULES file contains definitions
"^DIC",798.2,798.2,"%D",2,0)
of the selection rules that are used to screen
"^DIC",798.2,798.2,"%D",3,0)
patients for addition to the registries. There are
"^DIC",798.2,798.2,"%D",4,0)
two kinds of rules: top-level and lower level.
"^DIC",798.2,798.2,"%D",5,0)
 
"^DIC",798.2,798.2,"%D",6,0)
If a rule is referenced by the ROR REGISTRY 
"^DIC",798.2,798.2,"%D",7,0)
PARAMETERS file, it is the top-level rule.
"^DIC",798.2,798.2,"%D",8,0)
Non-zero value of any top-level rule expression 
"^DIC",798.2,798.2,"%D",9,0)
directly determines that the patient should be
"^DIC",798.2,798.2,"%D",10,0)
added to the corresponding registry.
"^DIC",798.2,798.2,"%D",11,0)
 
"^DIC",798.2,798.2,"%D",12,0)
Lower level rules are referenced only by other 
"^DIC",798.2,798.2,"%D",13,0)
rules (by rule macros in the expressions). Their
"^DIC",798.2,798.2,"%D",14,0)
expressions are evaluated in the proper order, and
"^DIC",798.2,798.2,"%D",15,0)
the result values are used in the expressions of 
"^DIC",798.2,798.2,"%D",16,0)
other rules. Lower level rules have an indirect
"^DIC",798.2,798.2,"%D",17,0)
impact on the final result and can be used for
"^DIC",798.2,798.2,"%D",18,0)
complex processing of linked files and multiples.
"^DIC",798.2,798.2,"%D",19,0)
 
"^DIC",798.2,798.2,"%D",20,0)
For example, a lower level rule can calculate 
"^DIC",798.2,798.2,"%D",21,0)
maximum and minimum values of a parameter in the
"^DIC",798.2,798.2,"%D",22,0)
sub-file, and a top-level rule will analyze these
"^DIC",798.2,798.2,"%D",23,0)
values and decide if the patient should be added 
"^DIC",798.2,798.2,"%D",24,0)
to the registry. Moreover, they could be used to
"^DIC",798.2,798.2,"%D",25,0)
split a very complex rule into several simpler
"^DIC",798.2,798.2,"%D",26,0)
rules.
"^DIC",798.2,798.2,"%D",27,0)
 
"^DIC",798.2,798.2,"%D",28,0)
Records of the file are uniquely identified by the
"^DIC",798.2,798.2,"%D",29,0)
rule name (the "A" primary key and the uniqueness
"^DIC",798.2,798.2,"%D",30,0)
index "B" are used for this purpose).
"^DIC",798.2,"B","ROR SELECTION RULE",798.2)

"^DIC",798.5,798.5,0)
ROR ICD SEARCH^798.5
"^DIC",798.5,798.5,0,"GL")
^ROR(798.5,
"^DIC",798.5,798.5,"%",0)
^1.005^^0
"^DIC",798.5,798.5,"%D",0)
^1.001^7^7^3150528^^^
"^DIC",798.5,798.5,"%D",1,0)
This file stores all the ICD procedure and diagnostic codes and
"^DIC",798.5,798.5,"%D",2,0)
the CPT codes used to identify patients for a given registry during the
"^DIC",798.5,798.5,"%D",3,0)
Registry Update process. The B cross references for the ICD CODE, ICD
"^DIC",798.5,798.5,"%D",4,0)
PROCEDURE CODE and the INPATIENT CPT CODE are used in the EXPRESSION of the
"^DIC",798.5,798.5,"%D",5,0)
ROR SELECTION RULES file (#798.2).  The file design allows CCR to support
"^DIC",798.5,798.5,"%D",6,0)
an unlimited number of codes selected from the ICD DIAGNOSIS file (#80),
"^DIC",798.5,798.5,"%D",7,0)
the ICD OPERATION/PROCEDURE file (#80.1) and the CPT file (#81).
"^DIC",798.5,"B","ROR ICD SEARCH",798.5)

"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"BLD",9370,6)
^27
**END**
**END**

