Released ROR*1.5*28 SEQ #28
Extracted from mail message
**KIDS**:ROR*1.5*28^

**INSTALL NAME**
ROR*1.5*28
"BLD",9391,0)
ROR*1.5*28^CLINICAL CASE REGISTRIES^0^3160627^y
"BLD",9391,1,0)
^^2^2^3160203^^^^
"BLD",9391,1,1,0)
Patch reference and additional information may be found on Forum for 
"BLD",9391,1,2,0)
patch ROR*1.5*28
"BLD",9391,4,0)
^9.64PA^798.5^5
"BLD",9391,4,798.1,0)
798.1
"BLD",9391,4,798.1,222)
n^n^f^^y^^y^o^n
"BLD",9391,4,798.1,224)
N ROR S ROR=$P(^(0),U) I ROR["VA CROHNS"!(ROR["VA UC")!(ROR["VA DEMENTIA")!(ROR["VA HEPB")!(ROR["THYROID CA")
"BLD",9391,4,798.2,0)
798.2
"BLD",9391,4,798.2,222)
n^n^f^^y^^y^o^n
"BLD",9391,4,798.2,224)
N ROR S ROR=$P(^(0),U) I ROR["VA CROHNS"!(ROR["VA UC")!(ROR["VA DEMENTIA")!(ROR["VA HEPB")!(ROR["VA THYROID CA")
"BLD",9391,4,798.5,0)
798.5
"BLD",9391,4,798.5,222)
n^n^f^^y^^y^o^n
"BLD",9391,4,798.5,224)
N ROR,ROR1 S ROR=+$G(^(0)),ROR1=$P($G(^ROR(798.1,ROR,0)),U) I ROR1["VA THYROID CA"!(ROR1["VA DEMENTIA")!(ROR1["VA UC")!(ROR1["VA CROHNS")!(ROR1["VA HEPB")
"BLD",9391,4,799.31,0)
799.31
"BLD",9391,4,799.31,222)
n^n^f^^n^^y^o^n
"BLD",9391,4,799.31,224)
I $P(^(0),U)="DAA_DRUGS"
"BLD",9391,4,799.51,0)
799.51
"BLD",9391,4,799.51,222)
n^n^f^^y^^y^o^n
"BLD",9391,4,799.51,224)
N ROR S ROR=$P($G(^(0)),U) I ROR="DACLATASVIR"!(ROR="OMBITASVIR/PARATEPREVIR/R")!(ROR="ATAZANAVIR/COBICISTAT")!(ROR="COBICISTAT/DARUNAVIR")!(ROR="ELVITEGRAVIR")!(ROR="ELBASVIR/GRAZOPREVIR")
"BLD",9391,4,"B",798.1,798.1)
 
"BLD",9391,4,"B",798.2,798.2)
 
"BLD",9391,4,"B",798.5,798.5)
 
"BLD",9391,4,"B",799.31,799.31)
 
"BLD",9391,4,"B",799.51,799.51)
 
"BLD",9391,6)
4^
"BLD",9391,6.3)
66
"BLD",9391,"ABPKG")
n
"BLD",9391,"INI")
PRE^RORP028
"BLD",9391,"INIT")
POST^RORP028
"BLD",9391,"KRN",0)
^9.67PA^779.2^20
"BLD",9391,"KRN",.4,0)
.4
"BLD",9391,"KRN",.401,0)
.401
"BLD",9391,"KRN",.402,0)
.402
"BLD",9391,"KRN",.403,0)
.403
"BLD",9391,"KRN",.5,0)
.5
"BLD",9391,"KRN",.84,0)
.84
"BLD",9391,"KRN",.84,"NM",0)
^9.68A^1^1
"BLD",9391,"KRN",.84,"NM",1,0)
7981999.001^^0
"BLD",9391,"KRN",.84,"NM",1,99999999)
2990000^3160222.173451
"BLD",9391,"KRN",.84,"NM","B",7981999.001,1)
 
"BLD",9391,"KRN",3.6,0)
3.6
"BLD",9391,"KRN",3.8,0)
3.8
"BLD",9391,"KRN",9.2,0)
9.2
"BLD",9391,"KRN",9.8,0)
9.8
"BLD",9391,"KRN",9.8,"NM",0)
^9.68A^23^9
"BLD",9391,"KRN",9.8,"NM",15,0)
RORUTL11^^0^B4484027
"BLD",9391,"KRN",9.8,"NM",15,99999999)
2990000^3150513.191356
"BLD",9391,"KRN",9.8,"NM",16,0)
RORUTL15^^0^B63032078
"BLD",9391,"KRN",9.8,"NM",16,99999999)
2990000^3150615.172445
"BLD",9391,"KRN",9.8,"NM",17,0)
ROREXT01^^0^B60677930
"BLD",9391,"KRN",9.8,"NM",17,99999999)
2990000^3160203.091331
"BLD",9391,"KRN",9.8,"NM",18,0)
ROREXPR^^0^B30053573
"BLD",9391,"KRN",9.8,"NM",18,99999999)
2990000^3160203.091331
"BLD",9391,"KRN",9.8,"NM",19,0)
RORHL17^^0^B37241996
"BLD",9391,"KRN",9.8,"NM",19,99999999)
2990000^3160203.091331
"BLD",9391,"KRN",9.8,"NM",20,0)
RORX022A^^0^B147471078
"BLD",9391,"KRN",9.8,"NM",20,99999999)
2990000^3160203.091331
"BLD",9391,"KRN",9.8,"NM",21,0)
RORUTL14^^0^B10594346
"BLD",9391,"KRN",9.8,"NM",21,99999999)
2990000^3160203.091331
"BLD",9391,"KRN",9.8,"NM",22,0)
RORP028^^0^B84005676
"BLD",9391,"KRN",9.8,"NM",22,99999999)
2990000^3160203.095253
"BLD",9391,"KRN",9.8,"NM",23,0)
RORX005B^^0^B9080085
"BLD",9391,"KRN",9.8,"NM",23,99999999)
2990000^3160331.1739
"BLD",9391,"KRN",9.8,"NM","B","ROREXPR",18)
 
"BLD",9391,"KRN",9.8,"NM","B","ROREXT01",17)
 
"BLD",9391,"KRN",9.8,"NM","B","RORHL17",19)
 
"BLD",9391,"KRN",9.8,"NM","B","RORP028",22)
 
"BLD",9391,"KRN",9.8,"NM","B","RORUTL11",15)
 
"BLD",9391,"KRN",9.8,"NM","B","RORUTL14",21)
 
"BLD",9391,"KRN",9.8,"NM","B","RORUTL15",16)
 
"BLD",9391,"KRN",9.8,"NM","B","RORX005B",23)
 
"BLD",9391,"KRN",9.8,"NM","B","RORX022A",20)
 
"BLD",9391,"KRN",19,0)
19
"BLD",9391,"KRN",19.1,0)
19.1
"BLD",9391,"KRN",101,0)
101
"BLD",9391,"KRN",409.61,0)
409.61
"BLD",9391,"KRN",771,0)
771
"BLD",9391,"KRN",779.2,0)
779.2
"BLD",9391,"KRN",870,0)
870
"BLD",9391,"KRN",8989.51,0)
8989.51
"BLD",9391,"KRN",8989.52,0)
8989.52
"BLD",9391,"KRN",8994,0)
8994
"BLD",9391,"KRN","B",.4,.4)
 
"BLD",9391,"KRN","B",.401,.401)
 
"BLD",9391,"KRN","B",.402,.402)
 
"BLD",9391,"KRN","B",.403,.403)
 
"BLD",9391,"KRN","B",.5,.5)
 
"BLD",9391,"KRN","B",.84,.84)
 
"BLD",9391,"KRN","B",3.6,3.6)
 
"BLD",9391,"KRN","B",3.8,3.8)
 
"BLD",9391,"KRN","B",9.2,9.2)
 
"BLD",9391,"KRN","B",9.8,9.8)
 
"BLD",9391,"KRN","B",19,19)
 
"BLD",9391,"KRN","B",19.1,19.1)
 
"BLD",9391,"KRN","B",101,101)
 
"BLD",9391,"KRN","B",409.61,409.61)
 
"BLD",9391,"KRN","B",771,771)
 
"BLD",9391,"KRN","B",779.2,779.2)
 
"BLD",9391,"KRN","B",870,870)
 
"BLD",9391,"KRN","B",8989.51,8989.51)
 
"BLD",9391,"KRN","B",8989.52,8989.52)
 
"BLD",9391,"KRN","B",8994,8994)
 
"BLD",9391,"PRE")
RORP028
"BLD",9391,"QUES",0)
^9.62^5^5
"BLD",9391,"QUES",1,0)
POSQ1
"BLD",9391,"QUES",1,1)
N^0:10:0
"BLD",9391,"QUES",1,"A")
Maximum number of registry update subtasks 
"BLD",9391,"QUES",1,"B")
5
"BLD",9391,"QUES",1,"M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"BLD",9391,"QUES",2,0)
POSQ2
"BLD",9391,"QUES",2,1)
Y
"BLD",9391,"QUES",2,"A")
Suspend the post-install during the peak hours
"BLD",9391,"QUES",2,"B")
NO
"BLD",9391,"QUES",2,"M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"BLD",9391,"QUES",3,0)
POSQ3
"BLD",9391,"QUES",3,1)
D^::R
"BLD",9391,"QUES",3,"A")
Suspension start time
"BLD",9391,"QUES",3,"B")
7:00AM
"BLD",9391,"QUES",3,"M")
W ! D POSQ3^RORP024(.DIR)
"BLD",9391,"QUES",4,0)
POSQ4
"BLD",9391,"QUES",4,1)
D
"BLD",9391,"QUES",4,"A")
Suspension end time
"BLD",9391,"QUES",4,"B")
6:00PM
"BLD",9391,"QUES",4,"M")
W ! D POSQ4^RORP024(.DIR)
"BLD",9391,"QUES",5,0)
POSQ5
"BLD",9391,"QUES",5,1)
D^::FRX
"BLD",9391,"QUES",5,"A")
Date/Time to run the new registry initialize task
"BLD",9391,"QUES",5,"M")
D POSQ5^RORP024(.DIR)
"BLD",9391,"QUES",5,"Q")
The date/time entered must be at least 15 minutes in the future.
"BLD",9391,"QUES","B","POSQ1",1)
 
"BLD",9391,"QUES","B","POSQ2",2)
 
"BLD",9391,"QUES","B","POSQ3",3)
 
"BLD",9391,"QUES","B","POSQ4",4)
 
"BLD",9391,"QUES","B","POSQ5",5)
 
"BLD",9391,"REQB",0)
^9.611^2^2
"BLD",9391,"REQB",1,0)
ROR*1.5*26^2
"BLD",9391,"REQB",2,0)
PSN*4.0*473^2
"BLD",9391,"REQB","B","PSN*4.0*473",2)

"BLD",9391,"REQB","B","ROR*1.5*26",1)
 
"DATA",798.1,30,0)
VA CROHNS^3160510^^Crohn's Disease Registry^^1^^^^^0^^^1
"DATA",798.1,30,1,0)
^798.13^6^6
"DATA",798.1,30,1,1,0)
VA CROHNS PROBLEM
"DATA",798.1,30,1,2,0)
VA CROHNS PROBLEM (ICD10)
"DATA",798.1,30,1,3,0)
VA CROHNS PTF
"DATA",798.1,30,1,4,0)
VA CROHNS PTF (ICD10)
"DATA",798.1,30,1,5,0)
VA CROHNS VPOV
"DATA",798.1,30,1,6,0)
VA CROHNS VPOV (ICD10)
"DATA",798.1,30,6)
1
"DATA",798.1,30,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,30,11)
7
"DATA",798.1,30,18,0)
^798.118^2^2
"DATA",798.1,30,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,30,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,30,19)

"DATA",798.1,30,21)
^^^3160510.145457
"DATA",798.1,30,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.1,31,0)
VA HEPB^3160510^^Hepatitis B Registry^^1^^^^^0^^^1
"DATA",798.1,31,1,0)
^798.13^6^6
"DATA",798.1,31,1,1,0)
VA HEPB PROBLEM
"DATA",798.1,31,1,2,0)
VA HEPB PROBLEM (ICD10)
"DATA",798.1,31,1,3,0)
VA HEPB PTF
"DATA",798.1,31,1,4,0)
VA HEPB PTF (ICD10)
"DATA",798.1,31,1,5,0)
VA HEPB VPOV
"DATA",798.1,31,1,6,0)
VA HEPB VPOV (ICD10)
"DATA",798.1,31,6)
1
"DATA",798.1,31,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,31,11)
7
"DATA",798.1,31,18,0)
^798.118^2^2
"DATA",798.1,31,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,31,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,31,19)

"DATA",798.1,31,21)
^^^3160510.145457
"DATA",798.1,31,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.1,32,0)
VA UC^3160510^^Ulcerative Colitis Registry^^1^^^^^0^^^1
"DATA",798.1,32,1,0)
^798.13^6^6
"DATA",798.1,32,1,1,0)
VA UC PROBLEM
"DATA",798.1,32,1,2,0)
VA UC PROBLEM (ICD10)
"DATA",798.1,32,1,3,0)
VA UC PTF
"DATA",798.1,32,1,4,0)
VA UC PTF (ICD10)
"DATA",798.1,32,1,5,0)
VA UC VPOV
"DATA",798.1,32,1,6,0)
VA UC VPOV (ICD10)
"DATA",798.1,32,6)
1
"DATA",798.1,32,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,32,11)
7
"DATA",798.1,32,18,0)
^798.118^2^2
"DATA",798.1,32,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,32,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,32,19)
3^
"DATA",798.1,32,21)
^^^3160510.145457
"DATA",798.1,32,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.1,33,0)
VA THYROID CA^3160510^^Thyroid Cancer Registry^^1^^^^^0^^^1
"DATA",798.1,33,1,0)
^798.13^6^6
"DATA",798.1,33,1,1,0)
VA THYROID CA PROBLEM
"DATA",798.1,33,1,2,0)
VA THYROID CA PROBLEM (ICD10)
"DATA",798.1,33,1,3,0)
VA THYROID CA PTF
"DATA",798.1,33,1,4,0)
VA THYROID CA PTF (ICD10)
"DATA",798.1,33,1,5,0)
VA THYROID CA VPOV
"DATA",798.1,33,1,6,0)
VA THYROID CA VPOV (ICD10)
"DATA",798.1,33,6)
1
"DATA",798.1,33,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,33,11)
7
"DATA",798.1,33,18,0)
^798.118^2^2
"DATA",798.1,33,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,33,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,33,19)

"DATA",798.1,33,21)
^^^3160510.145457
"DATA",798.1,33,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.1,34,0)
VA DEMENTIA^3160510^^Dementia Registry^^1^^^^^0^^^1
"DATA",798.1,34,1,0)
^798.13^6^6
"DATA",798.1,34,1,1,0)
VA DEMENTIA PROBLEM
"DATA",798.1,34,1,2,0)
VA DEMENTIA PTF
"DATA",798.1,34,1,3,0)
VA DEMENTIA PTF (ICD10)
"DATA",798.1,34,1,4,0)
VA DEMENTIA VPOV
"DATA",798.1,34,1,5,0)
VA DEMENTIA VPOV (ICD10)
"DATA",798.1,34,1,6,0)
VA DEMENTIA PROBLEM (ICD10)
"DATA",798.1,34,6)
1
"DATA",798.1,34,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,34,11)
7
"DATA",798.1,34,18,0)
^798.118^2^2
"DATA",798.1,34,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,34,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,34,19)

"DATA",798.1,34,21)
^^^3160510.145457
"DATA",798.1,34,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20
"DATA",798.2,209,0)
VA CROHNS PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,209,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,209,5)
1
"DATA",798.2,210,0)
VA CROHNS PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,210,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,210,5)
30
"DATA",798.2,211,0)
VA CROHNS PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,211,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,211,5)
1
"DATA",798.2,212,0)
VA CROHNS PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,212,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,212,5)
30
"DATA",798.2,213,0)
VA CROHNS VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,213,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,213,5)
1
"DATA",798.2,214,0)
VA CROHNS VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,214,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,214,5)
30
"DATA",798.2,215,0)
VA DEMENTIA PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,215,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,215,5)
1
"DATA",798.2,216,0)
VA DEMENTIA PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,216,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,216,5)
30
"DATA",798.2,217,0)
VA DEMENTIA PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,217,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,217,5)
1
"DATA",798.2,218,0)
VA DEMENTIA PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,218,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,218,5)
30
"DATA",798.2,219,0)
VA DEMENTIA VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,219,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,219,5)
1
"DATA",798.2,220,0)
VA DEMENTIA VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,220,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,220,5)
30
"DATA",798.2,221,0)
VA HEPB PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,221,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,221,5)
1
"DATA",798.2,222,0)
VA HEPB PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,222,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,222,5)
30
"DATA",798.2,223,0)
VA HEPB PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,223,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,223,5)
1
"DATA",798.2,224,0)
VA HEPB VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,224,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,224,5)
30
"DATA",798.2,225,0)
VA HEPB VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,225,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,225,5)
1
"DATA",798.2,226,0)
VA HEPB PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,226,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,226,5)
30
"DATA",798.2,227,0)
VA THYROID CA PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,227,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,227,5)
1
"DATA",798.2,228,0)
VA THYROID CA VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,228,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,228,5)
1
"DATA",798.2,229,0)
VA THYROID CA VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,229,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,229,5)
30
"DATA",798.2,230,0)
VA THYROID CA PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,230,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,230,5)
30
"DATA",798.2,231,0)
VA THYROID CA PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,231,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,231,5)
1
"DATA",798.2,232,0)
VA THYROID CA PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,232,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,232,5)
30
"DATA",798.2,233,0)
VA UC PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,233,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,233,5)
1
"DATA",798.2,234,0)
VA UC PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,234,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,234,5)
30
"DATA",798.2,235,0)
VA UC PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,235,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,235,5)
1
"DATA",798.2,236,0)
VA UC PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,236,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,236,5)
30
"DATA",798.2,237,0)
VA UC VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,237,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,237,5)
1
"DATA",798.2,238,0)
VA UC VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,238,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,238,5)
30
"DATA",798.5,30,0)
30
"DATA",798.5,30,1,0)
^798.51P^32^32
"DATA",798.5,30,1,1,0)
9210
"DATA",798.5,30,1,2,0)
2993
"DATA",798.5,30,1,3,0)
2994
"DATA",798.5,30,1,4,0)
2995
"DATA",798.5,30,1,5,0)
509895
"DATA",798.5,30,1,6,0)
509896
"DATA",798.5,30,1,7,0)
509897
"DATA",798.5,30,1,8,0)
509898
"DATA",798.5,30,1,9,0)
509899
"DATA",798.5,30,1,10,0)
509900
"DATA",798.5,30,1,11,0)
509901
"DATA",798.5,30,1,12,0)
509902
"DATA",798.5,30,1,13,0)
509903
"DATA",798.5,30,1,14,0)
509904
"DATA",798.5,30,1,15,0)
509905
"DATA",798.5,30,1,16,0)
509906
"DATA",798.5,30,1,17,0)
509907
"DATA",798.5,30,1,18,0)
509908
"DATA",798.5,30,1,19,0)
509909
"DATA",798.5,30,1,20,0)
509910
"DATA",798.5,30,1,21,0)
509911
"DATA",798.5,30,1,22,0)
509912
"DATA",798.5,30,1,23,0)
509913
"DATA",798.5,30,1,24,0)
509914
"DATA",798.5,30,1,25,0)
509915
"DATA",798.5,30,1,26,0)
509916
"DATA",798.5,30,1,27,0)
509917
"DATA",798.5,30,1,28,0)
509918
"DATA",798.5,30,1,29,0)
509919
"DATA",798.5,30,1,30,0)
509920
"DATA",798.5,30,1,31,0)
509921
"DATA",798.5,30,1,32,0)
509922
"DATA",798.5,31,0)
32
"DATA",798.5,31,1,0)
^798.51P^58^58
"DATA",798.5,31,1,1,0)
13002
"DATA",798.5,31,1,2,0)
13003
"DATA",798.5,31,1,3,0)
13004
"DATA",798.5,31,1,4,0)
13005
"DATA",798.5,31,1,5,0)
13006
"DATA",798.5,31,1,6,0)
13007
"DATA",798.5,31,1,7,0)
13008
"DATA",798.5,31,1,8,0)
13009
"DATA",798.5,31,1,9,0)
13010
"DATA",798.5,31,1,10,0)
509923
"DATA",798.5,31,1,11,0)
509924
"DATA",798.5,31,1,12,0)
509925
"DATA",798.5,31,1,13,0)
509926
"DATA",798.5,31,1,14,0)
509927
"DATA",798.5,31,1,15,0)
509928
"DATA",798.5,31,1,16,0)
509929
"DATA",798.5,31,1,17,0)
509930
"DATA",798.5,31,1,18,0)
509931
"DATA",798.5,31,1,19,0)
509937
"DATA",798.5,31,1,20,0)
509938
"DATA",798.5,31,1,21,0)
509939
"DATA",798.5,31,1,22,0)
509940
"DATA",798.5,31,1,23,0)
509941
"DATA",798.5,31,1,24,0)
509942
"DATA",798.5,31,1,25,0)
509943
"DATA",798.5,31,1,26,0)
509944
"DATA",798.5,31,1,27,0)
509945
"DATA",798.5,31,1,28,0)
509946
"DATA",798.5,31,1,29,0)
509947
"DATA",798.5,31,1,30,0)
509948
"DATA",798.5,31,1,31,0)
509949
"DATA",798.5,31,1,32,0)
509950
"DATA",798.5,31,1,33,0)
509951
"DATA",798.5,31,1,34,0)
509952
"DATA",798.5,31,1,35,0)
509953
"DATA",798.5,31,1,36,0)
509954
"DATA",798.5,31,1,37,0)
509955
"DATA",798.5,31,1,38,0)
509956
"DATA",798.5,31,1,39,0)
509957
"DATA",798.5,31,1,40,0)
509958
"DATA",798.5,31,1,41,0)
509959
"DATA",798.5,31,1,42,0)
509960
"DATA",798.5,31,1,43,0)
509961
"DATA",798.5,31,1,44,0)
509932
"DATA",798.5,31,1,45,0)
509933
"DATA",798.5,31,1,46,0)
509934
"DATA",798.5,31,1,47,0)
509935
"DATA",798.5,31,1,48,0)
509936
"DATA",798.5,31,1,49,0)
509962
"DATA",798.5,31,1,50,0)
509963
"DATA",798.5,31,1,51,0)
509964
"DATA",798.5,31,1,52,0)
509965
"DATA",798.5,31,1,53,0)
509966
"DATA",798.5,31,1,54,0)
509967
"DATA",798.5,31,1,55,0)
509968
"DATA",798.5,31,1,56,0)
509969
"DATA",798.5,31,1,57,0)
509970
"DATA",798.5,31,1,58,0)
509971
"DATA",798.5,32,0)
34
"DATA",798.5,32,1,0)
^798.51P^50^50
"DATA",798.5,32,1,1,0)
14834
"DATA",798.5,32,1,2,0)
14835
"DATA",798.5,32,1,3,0)
8233
"DATA",798.5,32,1,4,0)
14838
"DATA",798.5,32,1,5,0)
8771
"DATA",798.5,32,1,6,0)
8772
"DATA",798.5,32,1,7,0)
1075
"DATA",798.5,32,1,8,0)
1076
"DATA",798.5,32,1,9,0)
1077
"DATA",798.5,32,1,10,0)
8773
"DATA",798.5,32,1,11,0)
1078
"DATA",798.5,32,1,12,0)
1079
"DATA",798.5,32,1,13,0)
8774
"DATA",798.5,32,1,14,0)
1080
"DATA",798.5,32,1,15,0)
1081
"DATA",798.5,32,1,16,0)
1082
"DATA",798.5,32,1,17,0)
1086
"DATA",798.5,32,1,18,0)
1096
"DATA",798.5,32,1,19,0)
13453
"DATA",798.5,32,1,20,0)
13454
"DATA",798.5,32,1,21,0)
15546
"DATA",798.5,32,1,22,0)
15443
"DATA",798.5,32,1,23,0)
1108
"DATA",798.5,32,1,24,0)
8866
"DATA",798.5,32,1,25,0)
13801
"DATA",798.5,32,1,26,0)
13802
"DATA",798.5,32,1,27,0)
13803
"DATA",798.5,32,1,28,0)
500496
"DATA",798.5,32,1,29,0)
500497
"DATA",798.5,32,1,30,0)
500498
"DATA",798.5,32,1,31,0)
500500
"DATA",798.5,32,1,32,0)
500504
"DATA",798.5,32,1,33,0)
500505
"DATA",798.5,32,1,34,0)
503590
"DATA",798.5,32,1,35,0)
503591
"DATA",798.5,32,1,36,0)
503592
"DATA",798.5,32,1,37,0)
503593
"DATA",798.5,32,1,38,0)
503594
"DATA",798.5,32,1,39,0)
503595
"DATA",798.5,32,1,40,0)
503640
"DATA",798.5,32,1,41,0)
504023
"DATA",798.5,32,1,42,0)
504379
"DATA",798.5,32,1,43,0)
504410
"DATA",798.5,32,1,44,0)
504411
"DATA",798.5,32,1,45,0)
504412
"DATA",798.5,32,1,46,0)
504413
"DATA",798.5,32,1,47,0)
504414
"DATA",798.5,32,1,48,0)
504415
"DATA",798.5,32,1,49,0)
504420
"DATA",798.5,32,1,50,0)
504837
"DATA",798.5,33,0)
33
"DATA",798.5,33,1,0)
^798.51P^4^4
"DATA",798.5,33,1,1,0)
8640
"DATA",798.5,33,1,2,0)
11328
"DATA",798.5,33,1,3,0)
501614
"DATA",798.5,33,1,4,0)
569518
"DATA",798.5,34,0)
31
"DATA",798.5,34,1,0)
^798.51P^19^19
"DATA",798.5,34,1,1,0)
8344
"DATA",798.5,34,1,2,0)
12556
"DATA",798.5,34,1,3,0)
12557
"DATA",798.5,34,1,4,0)
12954
"DATA",798.5,34,1,5,0)
12955
"DATA",798.5,34,1,6,0)
8345
"DATA",798.5,34,1,7,0)
12558
"DATA",798.5,34,1,8,0)
12559
"DATA",798.5,34,1,9,0)
12956
"DATA",798.5,34,1,10,0)
12957
"DATA",798.5,34,1,11,0)
13352
"DATA",798.5,34,1,12,0)
500658
"DATA",798.5,34,1,13,0)
500659
"DATA",798.5,34,1,14,0)
500660
"DATA",798.5,34,1,15,0)
500661
"DATA",798.5,34,1,16,0)
500662
"DATA",798.5,34,1,17,0)
500668
"DATA",798.5,34,1,18,0)
500669
"DATA",798.5,34,1,19,0)
500674
"DATA",799.31,291,0)
DAA_DRUGS
"DATA",799.51,49,0)
ELVITEGRAVIR^2^20^4993^^^^^1
"DATA",799.51,50,0)
COBICISTAT/DARUNAVIR^2^20^4995^^^^^1
"DATA",799.51,51,0)
ATAZANAVIR/COBICISTAT^2^20^4997^^^^^1
"DATA",799.51,52,0)
OMBITASVIR/PARATEPREVIR/R^1^28^5047^^^^^1
"DATA",799.51,53,0)
DACLATASVIR^1^28^5045^^^^^1
"DATA",799.51,54,0)
ELBASVIR/GRAZOPREVIR^1^28^5099^^^^^1
"FIA",798.1)
ROR REGISTRY PARAMETERS
"FIA",798.1,0)
^ROR(798.1,
"FIA",798.1,0,0)
798.1Is
"FIA",798.1,0,1)
n^n^f^^y^^y^o^n
"FIA",798.1,0,10)

"FIA",798.1,0,11)
N ROR S ROR=$P(^(0),U) I ROR["VA CROHNS"!(ROR["VA UC")!(ROR["VA DEMENTIA")!(ROR["VA HEPB")!(ROR["THYROID CA")
"FIA",798.1,0,"RLRO")

"FIA",798.1,0,"VR")
1.5^ROR
"FIA",798.1,798.1)
0
"FIA",798.1,798.11)
0
"FIA",798.1,798.112)
0
"FIA",798.1,798.114)
0
"FIA",798.1,798.118)
0
"FIA",798.1,798.12)
0
"FIA",798.1,798.122)
0
"FIA",798.1,798.128)
0
"FIA",798.1,798.129)
0
"FIA",798.1,798.13)
0
"FIA",798.1,798.15)
0
"FIA",798.2)
ROR SELECTION RULE
"FIA",798.2,0)
^ROR(798.2,
"FIA",798.2,0,0)
798.2I
"FIA",798.2,0,1)
n^n^f^^y^^y^o^n
"FIA",798.2,0,10)

"FIA",798.2,0,11)
N ROR S ROR=$P(^(0),U) I ROR["VA CROHNS"!(ROR["VA UC")!(ROR["VA DEMENTIA")!(ROR["VA HEPB")!(ROR["VA THYROID CA")
"FIA",798.2,0,"RLRO")

"FIA",798.2,0,"VR")
1.5^ROR
"FIA",798.2,798.2)
0
"FIA",798.2,798.25)
0
"FIA",798.2,798.26)
0
"FIA",798.5)
ROR ICD SEARCH
"FIA",798.5,0)
^ROR(798.5,
"FIA",798.5,0,0)
798.5P
"FIA",798.5,0,1)
n^n^f^^y^^y^o^n
"FIA",798.5,0,10)

"FIA",798.5,0,11)
N ROR,ROR1 S ROR=+$G(^(0)),ROR1=$P($G(^ROR(798.1,ROR,0)),U) I ROR1["VA THYROID CA"!(ROR1["VA DEMENTIA")!(ROR1["VA UC")!(ROR1["VA CROHNS")!(ROR1["VA HEPB")
"FIA",798.5,0,"RLRO")

"FIA",798.5,0,"VR")
1.5^ROR
"FIA",798.5,798.5)
0
"FIA",798.5,798.51)
0
"FIA",798.5,798.52)
0
"FIA",798.5,798.53)
0
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^n^f^^n^^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)
I $P(^(0),U)="DAA_DRUGS"
"FIA",799.31,0,"RLRO")

"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FIA",799.51)
ROR GENERIC DRUG
"FIA",799.51,0)
^ROR(799.51,
"FIA",799.51,0,0)
799.51
"FIA",799.51,0,1)
n^n^f^^y^^y^o^n
"FIA",799.51,0,10)

"FIA",799.51,0,11)
N ROR S ROR=$P($G(^(0)),U) I ROR="DACLATASVIR"!(ROR="OMBITASVIR/PARATEPREVIR/R")!(ROR="ATAZANAVIR/COBICISTAT")!(ROR="COBICISTAT/DARUNAVIR")!(ROR="ELVITEGRAVIR")!(ROR="ELBASVIR/GRAZOPREVIR")
"FIA",799.51,0,"RLRO")

"FIA",799.51,0,"VR")
1.5^ROR
"FIA",799.51,799.51)
0
"FRV1",798.2,"209,5",1)
ICD-9-CM
"FRV1",798.2,"209,5",1,"F")
;ICDS(
"FRV1",798.2,"210,5",1)
ICD-10-CM
"FRV1",798.2,"210,5",1,"F")
;ICDS(
"FRV1",798.2,"211,5",1)
ICD-9-CM
"FRV1",798.2,"211,5",1,"F")
;ICDS(
"FRV1",798.2,"212,5",1)
ICD-10-CM
"FRV1",798.2,"212,5",1,"F")
;ICDS(
"FRV1",798.2,"213,5",1)
ICD-9-CM
"FRV1",798.2,"213,5",1,"F")
;ICDS(
"FRV1",798.2,"214,5",1)
ICD-10-CM
"FRV1",798.2,"214,5",1,"F")
;ICDS(
"FRV1",798.2,"215,5",1)
ICD-9-CM
"FRV1",798.2,"215,5",1,"F")
;ICDS(
"FRV1",798.2,"216,5",1)
ICD-10-CM
"FRV1",798.2,"216,5",1,"F")
;ICDS(
"FRV1",798.2,"217,5",1)
ICD-9-CM
"FRV1",798.2,"217,5",1,"F")
;ICDS(
"FRV1",798.2,"218,5",1)
ICD-10-CM
"FRV1",798.2,"218,5",1,"F")
;ICDS(
"FRV1",798.2,"219,5",1)
ICD-9-CM
"FRV1",798.2,"219,5",1,"F")
;ICDS(
"FRV1",798.2,"220,5",1)
ICD-10-CM
"FRV1",798.2,"220,5",1,"F")
;ICDS(
"FRV1",798.2,"221,5",1)
ICD-9-CM
"FRV1",798.2,"221,5",1,"F")
;ICDS(
"FRV1",798.2,"222,5",1)
ICD-10-CM
"FRV1",798.2,"222,5",1,"F")
;ICDS(
"FRV1",798.2,"223,5",1)
ICD-9-CM
"FRV1",798.2,"223,5",1,"F")
;ICDS(
"FRV1",798.2,"224,5",1)
ICD-10-CM
"FRV1",798.2,"224,5",1,"F")
;ICDS(
"FRV1",798.2,"225,5",1)
ICD-9-CM
"FRV1",798.2,"225,5",1,"F")
;ICDS(
"FRV1",798.2,"226,5",1)
ICD-10-CM
"FRV1",798.2,"226,5",1,"F")
;ICDS(
"FRV1",798.2,"227,5",1)
ICD-9-CM
"FRV1",798.2,"227,5",1,"F")
;ICDS(
"FRV1",798.2,"228,5",1)
ICD-9-CM
"FRV1",798.2,"228,5",1,"F")
;ICDS(
"FRV1",798.2,"229,5",1)
ICD-10-CM
"FRV1",798.2,"229,5",1,"F")
;ICDS(
"FRV1",798.2,"230,5",1)
ICD-10-CM
"FRV1",798.2,"230,5",1,"F")
;ICDS(
"FRV1",798.2,"231,5",1)
ICD-9-CM
"FRV1",798.2,"231,5",1,"F")
;ICDS(
"FRV1",798.2,"232,5",1)
ICD-10-CM
"FRV1",798.2,"232,5",1,"F")
;ICDS(
"FRV1",798.2,"233,5",1)
ICD-9-CM
"FRV1",798.2,"233,5",1,"F")
;ICDS(
"FRV1",798.2,"234,5",1)
ICD-10-CM
"FRV1",798.2,"234,5",1,"F")
;ICDS(
"FRV1",798.2,"235,5",1)
ICD-9-CM
"FRV1",798.2,"235,5",1,"F")
;ICDS(
"FRV1",798.2,"236,5",1)
ICD-10-CM
"FRV1",798.2,"236,5",1,"F")
;ICDS(
"FRV1",798.2,"237,5",1)
ICD-9-CM
"FRV1",798.2,"237,5",1,"F")
;ICDS(
"FRV1",798.2,"238,5",1)
ICD-10-CM
"FRV1",798.2,"238,5",1,"F")
;ICDS(
"FRV1",799.51,"49,0",2)
VA HIV
"FRV1",799.51,"49,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"49,0",3)
Default (HIV)
"FRV1",799.51,"49,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"49,0",4)
ELVITEGRAVIR
"FRV1",799.51,"49,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"50,0",2)
VA HIV
"FRV1",799.51,"50,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"50,0",3)
Default (HIV)
"FRV1",799.51,"50,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"50,0",4)
COBICISTAT/DARUNAVIR
"FRV1",799.51,"50,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"51,0",2)
VA HIV
"FRV1",799.51,"51,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"51,0",3)
Default (HIV)
"FRV1",799.51,"51,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"51,0",4)
ATAZANAVIR/COBICISTAT
"FRV1",799.51,"51,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"52,0",2)
VA HEPC
"FRV1",799.51,"52,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"52,0",3)
Default (HepC)
"FRV1",799.51,"52,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"52,0",4)
OMBITASVIR/PARITAPREVIR/RITONAVIR
"FRV1",799.51,"52,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"53,0",2)
VA HEPC
"FRV1",799.51,"53,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"53,0",3)
Default (HepC)
"FRV1",799.51,"53,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"53,0",4)
DACLATASVIR
"FRV1",799.51,"53,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"54,0",2)
VA HEPC
"FRV1",799.51,"54,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"54,0",3)
Default (HepC)
"FRV1",799.51,"54,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"54,0",4)
ELBASVIR/GRAZOPREVIR
"FRV1",799.51,"54,0",4,"F")
;PSNDF(50.6,
"FRV1K",799.51,"49,0",3)
KEY
"FRV1K",799.51,"49,0",3,1)
Drug Group
"FRV1K",799.51,"49,0",3,2)
VA HIV
"FRV1K",799.51,"49,0",3,3)
99
"FRV1K",799.51,"50,0",3)
KEY
"FRV1K",799.51,"50,0",3,1)
Drug Group
"FRV1K",799.51,"50,0",3,2)
VA HIV
"FRV1K",799.51,"50,0",3,3)
99
"FRV1K",799.51,"51,0",3)
KEY
"FRV1K",799.51,"51,0",3,1)
Drug Group
"FRV1K",799.51,"51,0",3,2)
VA HIV
"FRV1K",799.51,"51,0",3,3)
99
"FRV1K",799.51,"52,0",3)
KEY
"FRV1K",799.51,"52,0",3,1)
Drug Group
"FRV1K",799.51,"52,0",3,2)
VA HEPC
"FRV1K",799.51,"52,0",3,3)
99
"FRV1K",799.51,"53,0",3)
KEY
"FRV1K",799.51,"53,0",3,1)
Drug Group
"FRV1K",799.51,"53,0",3,2)
VA HEPC
"FRV1K",799.51,"53,0",3,3)
99
"FRV1K",799.51,"54,0",3)
KEY
"FRV1K",799.51,"54,0",3,1)
Drug Group
"FRV1K",799.51,"54,0",3,2)
VA HEPC
"FRV1K",799.51,"54,0",3,3)
99
"INI")
PRE^RORP028
"INIT")
POST^RORP028
"IX",798.1,798.1,"B",0)
798.1^B^Uniqueness Index for Key 'A' of File #798.1^R^^F^IR^I^798.1^^^^^LS
"IX",798.1,798.1,"B",1)
S ^ROR(798.1,"B",X,DA)=""
"IX",798.1,798.1,"B",2)
K ^ROR(798.1,"B",X,DA)
"IX",798.1,798.1,"B",2.5)
K ^ROR(798.1,"B")
"IX",798.1,798.1,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.1,"B",11.1,1,0)
1^F^798.1^.01^^1
"IX",798.1,798.11,"B",0)
798.11^B^Uniqueness Index for Key 'A' of Subfile #798.11^R^^F^IR^I^798.11^^^^^LS
"IX",798.1,798.11,"B",1)
S ^ROR(798.1,DA(1),3,"B",X,DA)=""
"IX",798.1,798.11,"B",2)
K ^ROR(798.1,DA(1),3,"B",X,DA)
"IX",798.1,798.11,"B",2.5)
K ^ROR(798.1,DA(1),3,"B")
"IX",798.1,798.11,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.11,"B",11.1,1,0)
1^F^798.11^.01^^1
"IX",798.1,798.118,"B",0)
798.118^B^Uniqueness Index for Key 'A' of Subfile #798.118^R^^F^IR^I^798.118^^^^^LS
"IX",798.1,798.118,"B",1)
S ^ROR(798.1,DA(1),18,"B",X,DA)=""
"IX",798.1,798.118,"B",2)
K ^ROR(798.1,DA(1),18,"B",X,DA)
"IX",798.1,798.118,"B",2.5)
K ^ROR(798.1,DA(1),18,"B")
"IX",798.1,798.118,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.118,"B",11.1,1,0)
1^F^798.118^.01^^1
"IX",798.1,798.122,"B",0)
798.122^B^Uniqueness Index for Key 'A' of Subfile #798.122^R^^F^IR^I^798.122^^^^^LS
"IX",798.1,798.122,"B",1)
S ^ROR(798.1,DA(1),22,"B",X,DA)=""
"IX",798.1,798.122,"B",2)
K ^ROR(798.1,DA(1),22,"B",X,DA)
"IX",798.1,798.122,"B",2.5)
K ^ROR(798.1,DA(1),22,"B")
"IX",798.1,798.122,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.122,"B",11.1,1,0)
1^F^798.122^.01^^1
"IX",798.1,798.128,"G",0)
798.128^G^Lab Group and Local Test Name^R^^R^IR^I^798.128^^^^^LS
"IX",798.1,798.128,"G",1)
S ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)=""
"IX",798.1,798.128,"G",2)
K ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)
"IX",798.1,798.128,"G",2.5)
K ^ROR(798.1,DA(1),28,"G")
"IX",798.1,798.128,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.128,"G",11.1,1,0)
1^F^798.128^.02^^1^F
"IX",798.1,798.128,"G",11.1,1,2)
 
"IX",798.1,798.128,"G",11.1,1,3)
 
"IX",798.1,798.128,"G",11.1,3,0)
2^F^798.128^.01^^2^F
"IX",798.1,798.128,"G",11.1,3,3)
 
"IX",798.1,798.129,"G",0)
798.129^G^Drug Group and Local Drug Name^R^^R^IR^I^798.129^^^^^LS
"IX",798.1,798.129,"G",1)
S ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)=""
"IX",798.1,798.129,"G",2)
K ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)
"IX",798.1,798.129,"G",2.5)
K ^ROR(798.1,DA(1),29,"G")
"IX",798.1,798.129,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.129,"G",11.1,1,0)
1^F^798.129^.02^^1^F
"IX",798.1,798.129,"G",11.1,1,3)
 
"IX",798.1,798.129,"G",11.1,3,0)
2^F^798.129^.01^^2^F
"IX",798.1,798.129,"G",11.1,3,3)
 
"IX",798.1,798.13,"B",0)
798.13^B^Uniqueness Index for Key 'A' of Subfile #798.13^R^^F^IR^I^798.13^^^^^LS
"IX",798.1,798.13,"B",1)
S ^ROR(798.1,DA(1),1,"B",X,DA)=""
"IX",798.1,798.13,"B",2)
K ^ROR(798.1,DA(1),1,"B",X,DA)
"IX",798.1,798.13,"B",2.5)
K ^ROR(798.1,DA(1),1,"B")
"IX",798.1,798.13,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.13,"B",11.1,1,0)
1^F^798.13^.01^^1
"IX",798.2,798.2,"B",0)
798.2^B^Uniqueness Index for the "A" Key of File #798.2^R^^F^IR^I^798.2^^^^^LS
"IX",798.2,798.2,"B",1)
S ^ROR(798.2,"B",X,DA)=""
"IX",798.2,798.2,"B",2)
K ^ROR(798.2,"B",X,DA)
"IX",798.2,798.2,"B",2.5)
K ^ROR(798.2,"B")
"IX",798.2,798.2,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.2,"B",11.1,1,0)
1^F^798.2^.01^^1
"IX",798.2,798.26,"B",0)
798.26^B^Uniqueness Index for the "A" Key of Subfile #798.26^R^^F^IR^I^798.26^^^^^LS
"IX",798.2,798.26,"B",1)
S ^ROR(798.2,DA(1),4,"B",X,DA)=""
"IX",798.2,798.26,"B",2)
K ^ROR(798.2,DA(1),4,"B",X,DA)
"IX",798.2,798.26,"B",2.5)
K ^ROR(798.2,DA(1),4,"B")
"IX",798.2,798.26,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.26,"B",11.1,1,0)
1^F^798.26^.01^^1
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"IX",799.51,799.51,"ARDG",0)
799.51^ARDG^Registry & Drug Group^R^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"ARDG",1)
S ^ROR(799.51,"ARDG",X(2),X(3),DA)=""
"IX",799.51,799.51,"ARDG",2)
K ^ROR(799.51,"ARDG",X(2),X(3),DA)
"IX",799.51,799.51,"ARDG",2.5)
K ^ROR(799.51,"ARDG")
"IX",799.51,799.51,"ARDG",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"ARDG",11.1,1,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",11.1,2,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"ARDG",11.1,3,0)
2^C^^^^1
"IX",799.51,799.51,"ARDG",11.1,3,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"KEY",0)
799.51^KEY^Registry, Drug Group, Generic Drug^R^^R^IR^I^799.51^^^^^LS
"IX",799.51,799.51,"KEY",1)
S ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.51,799.51,"KEY",2)
K ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)
"IX",799.51,799.51,"KEY",2.5)
K ^ROR(799.51,"KEY")
"IX",799.51,799.51,"KEY",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"KEY",11.1,1,0)
1^F^799.51^.02^^1
"IX",799.51,799.51,"KEY",11.1,2,0)
2^F^799.51^.03^^2
"IX",799.51,799.51,"KEY",11.1,3,0)
3^F^799.51^.04^^3
"KEY",798.1,798.1,"A",0)
798.1^A^S^201
"KEY",798.1,798.1,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.1,"A",2,1,0)
.01^798.1^1
"KEY",798.1,798.11,"A",0)
798.11^A^S^209
"KEY",798.1,798.11,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.11,"A",2,1,0)
.01^798.11^1
"KEY",798.1,798.118,"A",0)
798.118^A^S^210
"KEY",798.1,798.118,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.118,"A",2,1,0)
.01^798.118^1
"KEY",798.1,798.122,"A",0)
798.122^A^S^747
"KEY",798.1,798.122,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.122,"A",2,1,0)
.01^798.122^1
"KEY",798.1,798.128,"G",0)
798.128^G^P^203
"KEY",798.1,798.128,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.128,"G",2,1,0)
.02^798.128^1
"KEY",798.1,798.128,"G",2,2,0)
.01^798.128^2
"KEY",798.1,798.129,"G",0)
798.129^G^P^207
"KEY",798.1,798.129,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.129,"G",2,1,0)
.02^798.129^1
"KEY",798.1,798.129,"G",2,2,0)
.01^798.129^2
"KEY",798.1,798.13,"A",0)
798.13^A^S^202
"KEY",798.1,798.13,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.13,"A",2,1,0)
.01^798.13^1
"KEY",798.2,798.2,"A",0)
798.2^A^S^204
"KEY",798.2,798.2,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.2,"A",2,1,0)
.01^798.2^1
"KEY",798.2,798.26,"A",0)
798.26^A^S^205
"KEY",798.2,798.26,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.26,"A",2,1,0)
.01^798.26^1
"KEY",799.31,799.31,"A",0)
799.31^A^S^748
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEY",799.51,799.51,"A",0)
799.51^A^S^750
"KEY",799.51,799.51,"A",2,0)
^.312IA^3^3
"KEY",799.51,799.51,"A",2,1,0)
.02^799.51^1
"KEY",799.51,799.51,"A",2,2,0)
.03^799.51^2
"KEY",799.51,799.51,"A",2,3,0)
.04^799.51^3
"KEYPTR",798.1,798.1,"A")
798.1^B
"KEYPTR",798.1,798.11,"A")
798.11^B
"KEYPTR",798.1,798.118,"A")
798.118^B
"KEYPTR",798.1,798.122,"A")
798.122^B
"KEYPTR",798.1,798.128,"G")
798.128^G
"KEYPTR",798.1,798.129,"G")
798.129^G
"KEYPTR",798.1,798.13,"A")
798.13^B
"KEYPTR",798.2,798.2,"A")
798.2^B
"KEYPTR",798.2,798.26,"A")
798.26^B
"KEYPTR",799.31,799.31,"A")
799.31^B
"KEYPTR",799.51,799.51,"A")
799.51^KEY
"KRN",.84,7981999.001,-1)
0^1
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
939^.844^941^941^3160229^^^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<!-- Common (999.1) -->
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,8,0)
 
"KRN",.84,7981999.001,2,9,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,10,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,11,0)
 
"KRN",.84,7981999.001,2,12,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,13,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,16,0)
 
"KRN",.84,7981999.001,2,17,0)
<!--
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
                                UTILITIES
"KRN",.84,7981999.001,2,20,0)
=========================================================================
"KRN",.84,7981999.001,2,21,0)
-->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,24,0)
 
"KRN",.84,7981999.001,2,25,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,28,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,29,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,30,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,31,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,32,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,33,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,34,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,35,0)
  </xsl:when>
"KRN",.84,7981999.001,2,36,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,37,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,38,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,39,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,40,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,41,0)
  </xsl:when>
"KRN",.84,7981999.001,2,42,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,43,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,44,0)
</xsl:template>
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,47,0)
 
"KRN",.84,7981999.001,2,48,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,49,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,50,0)
 <!--
"KRN",.84,7981999.001,2,51,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,52,0)
 -->
"KRN",.84,7981999.001,2,53,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,54,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,55,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,56,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,57,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,59,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,61,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,62,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,63,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,64,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,65,0)
     </xsl:when>
"KRN",.84,7981999.001,2,66,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,67,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,68,0)
     </xsl:when>
"KRN",.84,7981999.001,2,69,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,70,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,71,0)
   </xsl:when>
"KRN",.84,7981999.001,2,72,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,73,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,74,0)
  <!--
"KRN",.84,7981999.001,2,75,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,76,0)
  -->
"KRN",.84,7981999.001,2,77,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,78,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,79,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,82,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,83,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,84,0)
  </xsl:if>
"KRN",.84,7981999.001,2,85,0)
 </xsl:if>
"KRN",.84,7981999.001,2,86,0)
</xsl:template>
"KRN",.84,7981999.001,2,87,0)
 
"KRN",.84,7981999.001,2,88,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,89,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,90,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,91,0)
</xsl:template>
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,94,0)
 
"KRN",.84,7981999.001,2,95,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,99,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,100,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,101,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,102,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,103,0)
   <a>
"KRN",.84,7981999.001,2,104,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,105,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,106,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,107,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,108,0)
    </xsl:if>
"KRN",.84,7981999.001,2,109,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,110,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,111,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,112,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,113,0)
    </xsl:if>
"KRN",.84,7981999.001,2,114,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,115,0)
   </a>
"KRN",.84,7981999.001,2,116,0)
  </xsl:when>
"KRN",.84,7981999.001,2,117,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,118,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,119,0)
</xsl:template>
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,122,0)
 
"KRN",.84,7981999.001,2,123,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,124,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,125,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,126,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,127,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,128,0)
  </xsl:when>
"KRN",.84,7981999.001,2,129,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,131,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,132,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,133,0)
</xsl:template>
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,136,0)
 
"KRN",.84,7981999.001,2,137,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,138,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,139,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,140,0)
 <tr>
"KRN",.84,7981999.001,2,141,0)
  <th scope="row">
"KRN",.84,7981999.001,2,142,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,143,0)
  </th>
"KRN",.84,7981999.001,2,144,0)
  <td>
"KRN",.84,7981999.001,2,145,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,146,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,147,0)
   </xsl:if>
"KRN",.84,7981999.001,2,148,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,149,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,150,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,151,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,152,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,153,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,154,0)
  </td>
"KRN",.84,7981999.001,2,155,0)
 </tr>
"KRN",.84,7981999.001,2,156,0)
</xsl:template>
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<!--
"KRN",.84,7981999.001,2,159,0)
Special processing for multivalued local fields to handle 
"KRN",.84,7981999.001,2,160,0)
pseudo local field  in the HIV_DX tag.
"KRN",.84,7981999.001,2,161,0)
-->
"KRN",.84,7981999.001,2,162,0)
 
"KRN",.84,7981999.001,2,163,0)
<xsl:template name="LocalList">
"KRN",.84,7981999.001,2,164,0)
 <xsl:param name="firstitem"/>
"KRN",.84,7981999.001,2,165,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,166,0)
 <tr>
"KRN",.84,7981999.001,2,167,0)
  <th scope="row">
"KRN",.84,7981999.001,2,168,0)
   <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,169,0)
  </th>
"KRN",.84,7981999.001,2,170,0)
  <td>
"KRN",.84,7981999.001,2,171,0)
   <xsl:if test="$firstitem!=''">
"KRN",.84,7981999.001,2,172,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,173,0)
    <xsl:value-of select="$firstitem"/>
"KRN",.84,7981999.001,2,174,0)
    <xsl:text>); </xsl:text>
"KRN",.84,7981999.001,2,175,0)
   </xsl:if>
"KRN",.84,7981999.001,2,176,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,177,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,178,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,179,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,180,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,181,0)
  </td>
"KRN",.84,7981999.001,2,182,0)
 </tr>
"KRN",.84,7981999.001,2,183,0)
</xsl:template>
"KRN",.84,7981999.001,2,184,0)
 
"KRN",.84,7981999.001,2,185,0)
 
"KRN",.84,7981999.001,2,186,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,187,0)
 
"KRN",.84,7981999.001,2,188,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,189,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,190,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,191,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,192,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,193,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,194,0)
 </xsl:if>
"KRN",.84,7981999.001,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,196,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,197,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,198,0)
  </xsl:when>
"KRN",.84,7981999.001,2,199,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,200,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,201,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,202,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,203,0)
</xsl:template>
"KRN",.84,7981999.001,2,204,0)
 
"KRN",.84,7981999.001,2,205,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,206,0)
 
"KRN",.84,7981999.001,2,207,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,208,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,209,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,210,0)
  <tr>
"KRN",.84,7981999.001,2,211,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,212,0)
   <td>
"KRN",.84,7981999.001,2,213,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,214,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,215,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,216,0)
   </td>
"KRN",.84,7981999.001,2,217,0)
  </tr>
"KRN",.84,7981999.001,2,218,0)
  <tr>
"KRN",.84,7981999.001,2,219,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,220,0)
   <td>
"KRN",.84,7981999.001,2,221,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,222,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,223,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,224,0)
   </td>
"KRN",.84,7981999.001,2,225,0)
  </tr>
"KRN",.84,7981999.001,2,226,0)
  <tr>
"KRN",.84,7981999.001,2,227,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,228,0)
   <td>
"KRN",.84,7981999.001,2,229,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,230,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,231,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,232,0)
   </td>
"KRN",.84,7981999.001,2,233,0)
  </tr>
"KRN",.84,7981999.001,2,234,0)
  <tr>
"KRN",.84,7981999.001,2,235,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,236,0)
   <td>
"KRN",.84,7981999.001,2,237,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,238,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,239,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,240,0)
   </td>
"KRN",.84,7981999.001,2,241,0)
  </tr>
"KRN",.84,7981999.001,2,242,0)
 </table>
"KRN",.84,7981999.001,2,243,0)
</xsl:template>
"KRN",.84,7981999.001,2,244,0)
 
"KRN",.84,7981999.001,2,245,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,246,0)
 
"KRN",.84,7981999.001,2,247,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,248,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,249,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,250,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,251,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,252,0)
  </div>
"KRN",.84,7981999.001,2,253,0)
 </xsl:if>
"KRN",.84,7981999.001,2,254,0)
</xsl:template>
"KRN",.84,7981999.001,2,255,0)
 
"KRN",.84,7981999.001,2,256,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,257,0)
 
"KRN",.84,7981999.001,2,258,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,259,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,260,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,261,0)
 </table>
"KRN",.84,7981999.001,2,262,0)
</xsl:template>
"KRN",.84,7981999.001,2,263,0)
 
"KRN",.84,7981999.001,2,264,0)
<!--
"KRN",.84,7981999.001,2,265,0)
=========================================================================
"KRN",.84,7981999.001,2,266,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,267,0)
=========================================================================
"KRN",.84,7981999.001,2,268,0)
-->
"KRN",.84,7981999.001,2,269,0)
 
"KRN",.84,7981999.001,2,270,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,271,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,272,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,273,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,274,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,275,0)
   <tr>
"KRN",.84,7981999.001,2,276,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,277,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,278,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,279,0)
     </table>
"KRN",.84,7981999.001,2,280,0)
    </td>
"KRN",.84,7981999.001,2,281,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,282,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,283,0)
    </td>
"KRN",.84,7981999.001,2,284,0)
   </tr>
"KRN",.84,7981999.001,2,285,0)
  </table>
"KRN",.84,7981999.001,2,286,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,287,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,288,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,289,0)
   </table>
"KRN",.84,7981999.001,2,290,0)
  </xsl:if>
"KRN",.84,7981999.001,2,291,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,292,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,293,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,294,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,295,0)
   </div>
"KRN",.84,7981999.001,2,296,0)
  </xsl:if>
"KRN",.84,7981999.001,2,297,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,298,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,299,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,300,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,301,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,302,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,303,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,304,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,305,0)
     </xsl:when>
"KRN",.84,7981999.001,2,306,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,307,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,308,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,309,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,310,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,311,0)
   </dl>
"KRN",.84,7981999.001,2,312,0)
  </xsl:if>
"KRN",.84,7981999.001,2,313,0)
 </div>
"KRN",.84,7981999.001,2,314,0)
</xsl:template>
"KRN",.84,7981999.001,2,315,0)
 
"KRN",.84,7981999.001,2,316,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,317,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,318,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,319,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,320,0)
</xsl:template>
"KRN",.84,7981999.001,2,321,0)
 
"KRN",.84,7981999.001,2,322,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,323,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,324,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,325,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,326,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,327,0)
</xsl:template>
"KRN",.84,7981999.001,2,328,0)
 
"KRN",.84,7981999.001,2,329,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,330,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,331,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,332,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,336,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,337,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,338,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,339,0)
</xsl:template>
"KRN",.84,7981999.001,2,340,0)
 
"KRN",.84,7981999.001,2,341,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,342,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,343,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,344,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,345,0)
  <tr>
"KRN",.84,7981999.001,2,346,0)
   <th scope="row">
"KRN",.84,7981999.001,2,347,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,348,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,349,0)
    </xsl:if>
"KRN",.84,7981999.001,2,350,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,351,0)
   </th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,357,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,358,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,359,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,360,0)
   </td>
"KRN",.84,7981999.001,2,361,0)
  </tr>
"KRN",.84,7981999.001,2,362,0)
 </xsl:if>
"KRN",.84,7981999.001,2,363,0)
</xsl:template>
"KRN",.84,7981999.001,2,364,0)
 
"KRN",.84,7981999.001,2,365,0)
<!-- 
"KRN",.84,7981999.001,2,366,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,367,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,368,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,369,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,370,0)
  <tr>
"KRN",.84,7981999.001,2,371,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,372,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,373,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,374,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,375,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,376,0)
   </td>
"KRN",.84,7981999.001,2,377,0)
  </tr>
"KRN",.84,7981999.001,2,378,0)
 </xsl:if>
"KRN",.84,7981999.001,2,379,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,380,0)
  <tr>
"KRN",.84,7981999.001,2,381,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,382,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,383,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,384,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,385,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,386,0)
   </td>
"KRN",.84,7981999.001,2,387,0)
  </tr>
"KRN",.84,7981999.001,2,388,0)
 </xsl:if>
"KRN",.84,7981999.001,2,389,0)
</xsl:template>
"KRN",.84,7981999.001,2,390,0)
-->
"KRN",.84,7981999.001,2,391,0)
 
"KRN",.84,7981999.001,2,392,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,393,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,394,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,395,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,396,0)
</xsl:template>
"KRN",.84,7981999.001,2,397,0)
 
"KRN",.84,7981999.001,2,398,0)
<xsl:template match="PARAMETERS/ICDLST">
"KRN",.84,7981999.001,2,399,0)
 <tr>
"KRN",.84,7981999.001,2,400,0)
  <th scope="row">ICD:&#160;</th>
"KRN",.84,7981999.001,2,401,0)
  <td>
"KRN",.84,7981999.001,2,402,0)
   <dl>
"KRN",.84,7981999.001,2,403,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,404,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,405,0)
    </xsl:if>
"KRN",.84,7981999.001,2,406,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,407,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,408,0)
   </dl>
"KRN",.84,7981999.001,2,409,0)
  </td>
"KRN",.84,7981999.001,2,410,0)
 </tr>
"KRN",.84,7981999.001,2,411,0)
</xsl:template>
"KRN",.84,7981999.001,2,412,0)
 
"KRN",.84,7981999.001,2,413,0)
<xsl:template match="PARAMETERS/ICDLST/GROUP">
"KRN",.84,7981999.001,2,414,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,415,0)
 <dd><dl>
"KRN",.84,7981999.001,2,416,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,417,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,418,0)
  </xsl:if>
"KRN",.84,7981999.001,2,419,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,420,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,421,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,422,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,423,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,424,0)
   </td>
"KRN",.84,7981999.001,2,425,0)
   <td>
"KRN",.84,7981999.001,2,426,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,427,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,428,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,429,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,430,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,431,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,432,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,433,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,434,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,435,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,436,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,437,0)
   </td>
"KRN",.84,7981999.001,2,438,0)
   <td>
"KRN",.84,7981999.001,2,439,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,440,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,441,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,442,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,443,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,444,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,445,0)
 </dl></dd>
"KRN",.84,7981999.001,2,446,0)
</xsl:template>
"KRN",.84,7981999.001,2,447,0)
 
"KRN",.84,7981999.001,2,448,0)
<xsl:template match="PARAMETERS/ICDFILT">
"KRN",.84,7981999.001,2,449,0)
 <tr>
"KRN",.84,7981999.001,2,450,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,451,0)
  <td>
"KRN",.84,7981999.001,2,452,0)
   <dl>
"KRN",.84,7981999.001,2,453,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,454,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,455,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,456,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,457,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,458,0)
        </xsl:when>
"KRN",.84,7981999.001,2,459,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,460,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,461,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,462,0)
        </xsl:when>
"KRN",.84,7981999.001,2,463,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,464,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,465,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,466,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,467,0)
    </xsl:if>
"KRN",.84,7981999.001,2,468,0)
   </dl>
"KRN",.84,7981999.001,2,469,0)
  </td>
"KRN",.84,7981999.001,2,470,0)
 </tr>
"KRN",.84,7981999.001,2,471,0)
</xsl:template>
"KRN",.84,7981999.001,2,472,0)
 
"KRN",.84,7981999.001,2,473,0)
<xsl:template match="PARAMETERS/ICDFILT/GROUP">
"KRN",.84,7981999.001,2,474,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,475,0)
 <dd><dl>
"KRN",.84,7981999.001,2,476,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,477,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,478,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,479,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,480,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,481,0)
   </td>
"KRN",.84,7981999.001,2,482,0)
   <td>
"KRN",.84,7981999.001,2,483,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,484,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,485,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,486,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,487,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,488,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,489,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,490,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,491,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,492,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,493,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,494,0)
   </td>
"KRN",.84,7981999.001,2,495,0)
   <td>
"KRN",.84,7981999.001,2,496,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,497,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,498,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,499,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,500,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,501,0)
   </td></tr></table> 
"KRN",.84,7981999.001,2,502,0)
 </dl></dd>
"KRN",.84,7981999.001,2,503,0)
</xsl:template> 
"KRN",.84,7981999.001,2,504,0)
 
"KRN",.84,7981999.001,2,505,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,506,0)
 <xsl:variable name="pseudo" select="/REPORT/PARAMETERS/HIV_DX" />
"KRN",.84,7981999.001,2,507,0)
 <xsl:call-template name="LocalList">
"KRN",.84,7981999.001,2,508,0)
  <xsl:with-param name="firstitem" select="$pseudo"/>
"KRN",.84,7981999.001,2,509,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,510,0)
</xsl:template>
"KRN",.84,7981999.001,2,511,0)
 
"KRN",.84,7981999.001,2,512,0)
<!-- Process the pseudo local field -->
"KRN",.84,7981999.001,2,513,0)
<xsl:template match="PARAMETERS/HIV_DX">
"KRN",.84,7981999.001,2,514,0)
 <xsl:if test="count(/REPORT/PARAMETERS/LOCAL_FIELDS/*) &lt; 1">
"KRN",.84,7981999.001,2,515,0)
  <tr>
"KRN",.84,7981999.001,2,516,0)
   <th scope="row">
"KRN",.84,7981999.001,2,517,0)
    <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,518,0)
   </th>
"KRN",.84,7981999.001,2,519,0)
   <td>
"KRN",.84,7981999.001,2,520,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,521,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,522,0)
    <xsl:text>)</xsl:text>
"KRN",.84,7981999.001,2,523,0)
   </td>
"KRN",.84,7981999.001,2,524,0)
  </tr>
"KRN",.84,7981999.001,2,525,0)
 </xsl:if>
"KRN",.84,7981999.001,2,526,0)
</xsl:template> 
"KRN",.84,7981999.001,2,527,0)
 
"KRN",.84,7981999.001,2,528,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,529,0)
<xsl:choose>
"KRN",.84,7981999.001,2,530,0)
   <xsl:when test="@DAA_DRUGS">
"KRN",.84,7981999.001,2,531,0)
    <tr>
"KRN",.84,7981999.001,2,532,0)
     <th scope="row">DAA Prescriptions:&#160;</th>
"KRN",.84,7981999.001,2,533,0)
     <td>
"KRN",.84,7981999.001,2,534,0)
      <xsl:if test="@DAA_DRUGS='A'"><xsl:text>All prescriptions</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,535,0)
      <xsl:if test="@DAA_DRUGS='I'"><xsl:text>In-house only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,536,0)
      <xsl:if test="@DAA_DRUGS='C'"><xsl:text>Choice only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,537,0)
     </td>
"KRN",.84,7981999.001,2,538,0)
    </tr>
"KRN",.84,7981999.001,2,539,0)
   </xsl:when>
"KRN",.84,7981999.001,2,540,0)
   <xsl:otherwise>
"KRN",.84,7981999.001,2,541,0)
    <tr>
"KRN",.84,7981999.001,2,542,0)
      <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,543,0)
      <td>
"KRN",.84,7981999.001,2,544,0)
        <xsl:if test="@COMPLETE='1' or @SUMMARY='1'">
"KRN",.84,7981999.001,2,545,0)
          <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,546,0)
        </xsl:if> 
"KRN",.84,7981999.001,2,547,0)
        <xsl:if test="(@RECENT_FILLS='1' or @ALL_FILLS='1') and (@COMPLETE='1' or @SUMMARY='1')">
"KRN",.84,7981999.001,2,548,0)
          <xsl:text>, </xsl:text>
"KRN",.84,7981999.001,2,549,0)
        </xsl:if>
"KRN",.84,7981999.001,2,550,0)
        <xsl:if test="@ALL_FILLS='1'"><xsl:text>All fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,551,0)
        <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in time period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,552,0)
      </td>
"KRN",.84,7981999.001,2,553,0)
    </tr>  
"KRN",.84,7981999.001,2,554,0)
    <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,555,0)
     <tr>
"KRN",.84,7981999.001,2,556,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,557,0)
      <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,558,0)
     </tr>
"KRN",.84,7981999.001,2,559,0)
    </xsl:if>
"KRN",.84,7981999.001,2,560,0)
    <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,561,0)
     <tr>
"KRN",.84,7981999.001,2,562,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,563,0)
      <td>
"KRN",.84,7981999.001,2,564,0)
       <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,565,0)
       <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,566,0)
        <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,567,0)
       </xsl:call-template>
"KRN",.84,7981999.001,2,568,0)
      </td>
"KRN",.84,7981999.001,2,569,0)
     </tr>
"KRN",.84,7981999.001,2,570,0)
    </xsl:if>
"KRN",.84,7981999.001,2,571,0)
   </xsl:otherwise>
"KRN",.84,7981999.001,2,572,0)
</xsl:choose>
"KRN",.84,7981999.001,2,573,0)
</xsl:template>
"KRN",.84,7981999.001,2,574,0)
 
"KRN",.84,7981999.001,2,575,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,576,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,577,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,578,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,579,0)
</xsl:template>
"KRN",.84,7981999.001,2,580,0)
 
"KRN",.84,7981999.001,2,581,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,582,0)
 <tr>
"KRN",.84,7981999.001,2,583,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,584,0)
  <td>
"KRN",.84,7981999.001,2,585,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,586,0)
    <xsl:if test="@CONFDT_AFTER!=''">
"KRN",.84,7981999.001,2,587,0)
      <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,588,0)
      <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,589,0)
       <xsl:with-param name="dt" select="@CONFDT_AFTER"/>
"KRN",.84,7981999.001,2,590,0)
      </xsl:call-template>
"KRN",.84,7981999.001,2,591,0)
    </xsl:if>
"KRN",.84,7981999.001,2,592,0)
  </td>
"KRN",.84,7981999.001,2,593,0)
 </tr>
"KRN",.84,7981999.001,2,594,0)
 <xsl:if test="@OEF!=''">
"KRN",.84,7981999.001,2,595,0)
  <tr>
"KRN",.84,7981999.001,2,596,0)
   <th scope="row">OEF/OIF:&#160;</th>
"KRN",.84,7981999.001,2,597,0)
   <td>
"KRN",.84,7981999.001,2,598,0)
    <xsl:if test="@OEF='1'">
"KRN",.84,7981999.001,2,599,0)
      <xsl:text>Include only</xsl:text>
"KRN",.84,7981999.001,2,600,0)
    </xsl:if>
"KRN",.84,7981999.001,2,601,0)
    <xsl:if test="@OEF='-1'">
"KRN",.84,7981999.001,2,602,0)
      <xsl:text>Exclude</xsl:text>
"KRN",.84,7981999.001,2,603,0)
    </xsl:if>
"KRN",.84,7981999.001,2,604,0)
   </td>
"KRN",.84,7981999.001,2,605,0)
  </tr>
"KRN",.84,7981999.001,2,606,0)
 </xsl:if>
"KRN",.84,7981999.001,2,607,0)
 <tr>
"KRN",.84,7981999.001,2,608,0)
  <th scope="row">Sex:&#160;</th>
"KRN",.84,7981999.001,2,609,0)
  <td>
"KRN",.84,7981999.001,2,610,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,611,0)
     <xsl:when test="@SEX">
"KRN",.84,7981999.001,2,612,0)
      <xsl:if test="@SEX='F'">
"KRN",.84,7981999.001,2,613,0)
       <xsl:text>Female only</xsl:text>
"KRN",.84,7981999.001,2,614,0)
      </xsl:if>
"KRN",.84,7981999.001,2,615,0)
      <xsl:if test="@SEX='M'">
"KRN",.84,7981999.001,2,616,0)
       <xsl:text>Male only</xsl:text>
"KRN",.84,7981999.001,2,617,0)
      </xsl:if>
"KRN",.84,7981999.001,2,618,0)
     </xsl:when>
"KRN",.84,7981999.001,2,619,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,620,0)
      <xsl:text>Both</xsl:text>
"KRN",.84,7981999.001,2,621,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,622,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,623,0)
  </td>
"KRN",.84,7981999.001,2,624,0)
 </tr>
"KRN",.84,7981999.001,2,625,0)
 <xsl:if test="@SVR!=''">
"KRN",.84,7981999.001,2,626,0)
   <tr>
"KRN",.84,7981999.001,2,627,0)
    <th scope="row">SVR:&#160;</th>
"KRN",.84,7981999.001,2,628,0)
    <td>
"KRN",.84,7981999.001,2,629,0)
     <xsl:if test="@SVR='1'">
"KRN",.84,7981999.001,2,630,0)
       <xsl:text>SVR Only</xsl:text>
"KRN",.84,7981999.001,2,631,0)
     </xsl:if>
"KRN",.84,7981999.001,2,632,0)
     <xsl:if test="@SVR='0'">
"KRN",.84,7981999.001,2,633,0)
       <xsl:text>No SVR</xsl:text>
"KRN",.84,7981999.001,2,634,0)
     </xsl:if>
"KRN",.84,7981999.001,2,635,0)
     <xsl:if test="@SVR='-1'">
"KRN",.84,7981999.001,2,636,0)
       <xsl:text>All patients</xsl:text>
"KRN",.84,7981999.001,2,637,0)
     </xsl:if>
"KRN",.84,7981999.001,2,638,0)
    </td>
"KRN",.84,7981999.001,2,639,0)
   </tr>
"KRN",.84,7981999.001,2,640,0)
 </xsl:if>
"KRN",.84,7981999.001,2,641,0)
</xsl:template>
"KRN",.84,7981999.001,2,642,0)
 
"KRN",.84,7981999.001,2,643,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,644,0)
 <tr>
"KRN",.84,7981999.001,2,645,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,646,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,647,0)
 </tr>
"KRN",.84,7981999.001,2,648,0)
</xsl:template>
"KRN",.84,7981999.001,2,649,0)
 
"KRN",.84,7981999.001,2,650,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,651,0)
 <tr>
"KRN",.84,7981999.001,2,652,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,653,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,654,0)
 </tr>
"KRN",.84,7981999.001,2,655,0)
</xsl:template>
"KRN",.84,7981999.001,2,656,0)
 
"KRN",.84,7981999.001,2,657,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,658,0)
 <tr>
"KRN",.84,7981999.001,2,659,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,660,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,661,0)
 </tr>
"KRN",.84,7981999.001,2,662,0)
</xsl:template>
"KRN",.84,7981999.001,2,663,0)
 
"KRN",.84,7981999.001,2,664,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,665,0)
 <tr>
"KRN",.84,7981999.001,2,666,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,667,0)
  <td>
"KRN",.84,7981999.001,2,668,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,669,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,670,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,671,0)
  </td>
"KRN",.84,7981999.001,2,672,0)
 </tr>
"KRN",.84,7981999.001,2,673,0)
</xsl:template>
"KRN",.84,7981999.001,2,674,0)
 
"KRN",.84,7981999.001,2,675,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,676,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,677,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,678,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,679,0)
<xsl:if test="../TREATMENT_HISTORY">
"KRN",.84,7981999.001,2,680,0)
  <tr>
"KRN",.84,7981999.001,2,681,0)
   <th scope="row">Treatment History:&#160;</th>
"KRN",.84,7981999.001,2,682,0)
   <td>
"KRN",.84,7981999.001,2,683,0)
     <xsl:value-of select="../TREATMENT_HISTORY"/>
"KRN",.84,7981999.001,2,684,0)
   </td>
"KRN",.84,7981999.001,2,685,0)
  </tr>
"KRN",.84,7981999.001,2,686,0)
 </xsl:if>
"KRN",.84,7981999.001,2,687,0)
</xsl:template>
"KRN",.84,7981999.001,2,688,0)
 
"KRN",.84,7981999.001,2,689,0)
 
"KRN",.84,7981999.001,2,690,0)
<!--
"KRN",.84,7981999.001,2,691,0)
=========================================================================
"KRN",.84,7981999.001,2,692,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,693,0)
=========================================================================
"KRN",.84,7981999.001,2,694,0)
-->
"KRN",.84,7981999.001,2,695,0)
 
"KRN",.84,7981999.001,2,696,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,697,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,698,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,699,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,700,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,701,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,702,0)
   <div>
"KRN",.84,7981999.001,2,703,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,704,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,705,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,706,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,707,0)
    </xsl:if>
"KRN",.84,7981999.001,2,708,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,709,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,710,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,711,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,712,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,713,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,714,0)
     <tbody>
"KRN",.84,7981999.001,2,715,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,716,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,717,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,718,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,719,0)
     </tbody>
"KRN",.84,7981999.001,2,720,0)
    </table>
"KRN",.84,7981999.001,2,721,0)
   </div>
"KRN",.84,7981999.001,2,722,0)
  </xsl:when>
"KRN",.84,7981999.001,2,723,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,724,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,725,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,726,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,727,0)
</xsl:template>
"KRN",.84,7981999.001,2,728,0)
 
"KRN",.84,7981999.001,2,729,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,730,0)
 
"KRN",.84,7981999.001,2,731,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,732,0)
 <thead>
"KRN",.84,7981999.001,2,733,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,734,0)
 </thead>
"KRN",.84,7981999.001,2,735,0)
</xsl:template>
"KRN",.84,7981999.001,2,736,0)
 
"KRN",.84,7981999.001,2,737,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,738,0)
 
"KRN",.84,7981999.001,2,739,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,740,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,741,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,742,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,743,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,744,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,745,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,746,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,747,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,748,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,749,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,750,0)
 <th scope="col">
"KRN",.84,7981999.001,2,751,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,752,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,753,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,754,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,755,0)
  </xsl:if>
"KRN",.84,7981999.001,2,756,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,757,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,758,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,759,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,760,0)
  </xsl:if>
"KRN",.84,7981999.001,2,761,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,762,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,763,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,764,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,765,0)
  </xsl:if>
"KRN",.84,7981999.001,2,766,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,767,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,768,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,769,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,770,0)
  </xsl:if>
"KRN",.84,7981999.001,2,771,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,772,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,773,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,774,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,775,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,776,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,777,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,778,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,779,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,780,0)
    </xsl:element>
"KRN",.84,7981999.001,2,781,0)
   </xsl:when>
"KRN",.84,7981999.001,2,782,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,783,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,784,0)
 </th>
"KRN",.84,7981999.001,2,785,0)
</xsl:template>
"KRN",.84,7981999.001,2,786,0)
 
"KRN",.84,7981999.001,2,787,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,788,0)
 
"KRN",.84,7981999.001,2,789,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,790,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,791,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,792,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,793,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,794,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,795,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,796,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,797,0)
  </xsl:if>
"KRN",.84,7981999.001,2,798,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,799,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,800,0)
</xsl:template>
"KRN",.84,7981999.001,2,801,0)
 
"KRN",.84,7981999.001,2,802,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,803,0)
 
"KRN",.84,7981999.001,2,804,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,805,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,806,0)
 <tr>
"KRN",.84,7981999.001,2,807,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,808,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,809,0)
  </xsl:if>
"KRN",.84,7981999.001,2,810,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,811,0)
 </tr>
"KRN",.84,7981999.001,2,812,0)
</xsl:template>
"KRN",.84,7981999.001,2,813,0)
 
"KRN",.84,7981999.001,2,814,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,815,0)
 
"KRN",.84,7981999.001,2,816,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,817,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,818,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,819,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,820,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,821,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,822,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,823,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,824,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,825,0)
 <td>
"KRN",.84,7981999.001,2,826,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,827,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,828,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,829,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,830,0)
  </xsl:if>
"KRN",.84,7981999.001,2,831,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,832,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,833,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,834,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,835,0)
  </xsl:if>
"KRN",.84,7981999.001,2,836,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,837,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,838,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,839,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,840,0)
  </xsl:if>
"KRN",.84,7981999.001,2,841,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,842,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,843,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,844,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,845,0)
  </xsl:if>
"KRN",.84,7981999.001,2,846,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,847,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,848,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,849,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,850,0)
  </xsl:if>
"KRN",.84,7981999.001,2,851,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,852,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,853,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,854,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,855,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,856,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,857,0)
   </xsl:when>
"KRN",.84,7981999.001,2,858,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,859,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,860,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,861,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,862,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,863,0)
   </xsl:when>
"KRN",.84,7981999.001,2,864,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,865,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,866,0)
 </td>
"KRN",.84,7981999.001,2,867,0)
</xsl:template>
"KRN",.84,7981999.001,2,868,0)
 
"KRN",.84,7981999.001,2,869,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,870,0)
 
"KRN",.84,7981999.001,2,871,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,872,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,873,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,874,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,875,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,876,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,877,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,878,0)
</xsl:template>
"KRN",.84,7981999.001,2,879,0)
 
"KRN",.84,7981999.001,2,880,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,881,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,882,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,883,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,884,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,885,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,886,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,887,0)
</xsl:template>
"KRN",.84,7981999.001,2,888,0)
 
"KRN",.84,7981999.001,2,889,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,890,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,891,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,892,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,893,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,894,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,895,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,896,0)
</xsl:template>
"KRN",.84,7981999.001,2,897,0)
 
"KRN",.84,7981999.001,2,898,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,899,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,900,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,901,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,902,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,903,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,904,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,905,0)
</xsl:template>
"KRN",.84,7981999.001,2,906,0)
 
"KRN",.84,7981999.001,2,907,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,908,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,909,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,910,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,911,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,912,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,913,0)
</xsl:template>
"KRN",.84,7981999.001,2,914,0)
 
"KRN",.84,7981999.001,2,915,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,916,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,917,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,918,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,919,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,920,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,921,0)
</xsl:template>
"KRN",.84,7981999.001,2,922,0)
 
"KRN",.84,7981999.001,2,923,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,924,0)
 
"KRN",.84,7981999.001,2,925,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,926,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,927,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,928,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,929,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,930,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,931,0)
</xsl:template>
"KRN",.84,7981999.001,2,932,0)
 
"KRN",.84,7981999.001,2,933,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,934,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,935,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,936,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,937,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,938,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,939,0)
</xsl:template>
"KRN",.84,7981999.001,2,940,0)
 
"KRN",.84,7981999.001,2,941,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PGL",798.1,9,1,13)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.1,21,1,21.01)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.128,0,2,.02)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.129,0,2,.02)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.2,5,1,7)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,2,.02)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PGL",799.51,0,3,.03)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,4,.04)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PKG",540,-1)
1^1
"PKG",540,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",540,20,0)
^9.402P^^
"PKG",540,22,0)
^9.49I^1^1
"PKG",540,22,1,0)
1.5^3060208^3070319^1
"PKG",540,22,1,"PAH",1,0)
28^3160627^2990000
"PKG",540,22,1,"PAH",1,1,0)
^^2^2^3160627
"PKG",540,22,1,"PAH",1,1,1,0)
Patch reference and additional information may be found on Forum for 
"PKG",540,22,1,"PAH",1,1,2,0)
patch ROR*1.5*28
"PRE")
RORP028
"QUES","POSQ1",0)
N^0:10:0
"QUES","POSQ1","A")
Maximum number of registry update subtasks 
"QUES","POSQ1","B")
5
"QUES","POSQ1","M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"QUES","POSQ2",0)
Y
"QUES","POSQ2","A")
Suspend the post-install during the peak hours
"QUES","POSQ2","B")
NO
"QUES","POSQ2","M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"QUES","POSQ3",0)
D^::R
"QUES","POSQ3","A")
Suspension start time
"QUES","POSQ3","B")
7:00AM
"QUES","POSQ3","M")
W ! D POSQ3^RORP024(.DIR)
"QUES","POSQ4",0)
D
"QUES","POSQ4","A")
Suspension end time
"QUES","POSQ4","B")
6:00PM
"QUES","POSQ4","M")
W ! D POSQ4^RORP024(.DIR)
"QUES","POSQ5",0)
D^::FRX
"QUES","POSQ5","?")
The date/time entered must be at least 15 minutes in the future.
"QUES","POSQ5","A")
Date/Time to run the new registry initialize task
"QUES","POSQ5","M")
D POSQ5^RORP024(.DIR)
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
9
"RTN","ROREXPR")
0^18^B30053573^B25327319
"RTN","ROREXPR",1,0)
ROREXPR ;HCIOFO/SG - PREPARATION FOR DATA EXTRACTION  ; 11/2/05 8:56am
"RTN","ROREXPR",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**28**;Feb 17, 2006;Build 66
"RTN","ROREXPR",3,0)
 ;
"RTN","ROREXPR",4,0)
 ; #2051  FIND1^DIC
"RTN","ROREXPR",5,0)
 ;******************************************************************************
"RTN","ROREXPR",6,0)
 ;******************************************************************************
"RTN","ROREXPR",7,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","ROREXPR",8,0)
 ;        
"RTN","ROREXPR",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","ROREXPR",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","ROREXPR",11,0)
 ;ROR*1.5*28   APR  2016   T KOPP       One time extract to retrieve problem
"RTN","ROREXPR",12,0)
 ;                                      list entries missed from 2009-2011
"RTN","ROREXPR",13,0)
 ;******************************************************************************
"RTN","ROREXPR",14,0)
 ;******************************************************************************
"RTN","ROREXPR",15,0)
 ;
"RTN","ROREXPR",16,0)
 Q
"RTN","ROREXPR",17,0)
 ;
"RTN","ROREXPR",18,0)
 ;***** PREPARES VARIABLES FOR DATA EXTRACTION
"RTN","ROREXPR",19,0)
 ;
"RTN","ROREXPR",20,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","ROREXPR",21,0)
 ;               names as subscripts and registry IENs as values
"RTN","ROREXPR",22,0)
 ;
"RTN","ROREXPR",23,0)
 ; [DXBEG]       Data extraction start date (individual start
"RTN","ROREXPR",24,0)
 ;               date for each patient by default).
"RTN","ROREXPR",25,0)
 ;               Time part of the parameter value is ignored.
"RTN","ROREXPR",26,0)
 ;
"RTN","ROREXPR",27,0)
 ; [DXEND]       Data extraction end date (TODAY by default)
"RTN","ROREXPR",28,0)
 ;               Time part of the parameter value is ignored.
"RTN","ROREXPR",29,0)
 ;
"RTN","ROREXPR",30,0)
 ; DXBEG and DXEND parameters may be used only for historical data
"RTN","ROREXPR",31,0)
 ; extraction. Use of these parameters for regular data extraction
"RTN","ROREXPR",32,0)
 ; process will negatively affect the package!
"RTN","ROREXPR",33,0)
 ;
"RTN","ROREXPR",34,0)
 ; This function does not kill the ROREXT("DTAR") node! It just adds
"RTN","ROREXPR",35,0)
 ; missing data areas to those that are already present in the list.
"RTN","ROREXPR",36,0)
 ;
"RTN","ROREXPR",37,0)
 ; Data extraction parameters are aggregated from individual
"RTN","ROREXPR",38,0)
 ; registry parameters as follow:
"RTN","ROREXPR",39,0)
 ;
"RTN","ROREXPR",40,0)
 ;   EXTRACT PERIOD FOR NEW PATIENT  Maximum
"RTN","ROREXPR",41,0)
 ;   LAG DAYS                        Maximum
"RTN","ROREXPR",42,0)
 ;   EXTRACTED RESULT                Union
"RTN","ROREXPR",43,0)
 ;   MAXIMUM MESSAGE SIZE            Minimum
"RTN","ROREXPR",44,0)
 ;
"RTN","ROREXPR",45,0)
 ; Return Values:
"RTN","ROREXPR",46,0)
 ;        0  Ok
"RTN","ROREXPR",47,0)
 ;       <0  Error code
"RTN","ROREXPR",48,0)
 ;
"RTN","ROREXPR",49,0)
PREPARE(REGLST,DXBEG,DXEND) ;
"RTN","ROREXPR",50,0)
 N I,IL,IR,LOINC,NODE,RC,REGIEN,REGNAME,RORBUF,RORMSG,TMP,VAL
"RTN","ROREXPR",51,0)
 K RORLRC
"RTN","ROREXPR",52,0)
 F TMP="DXBEG","HDTIEN","LD","MAXHL7SIZE","PATCH"  K ROREXT(TMP)
"RTN","ROREXPR",53,0)
 S DXBEG=$G(DXBEG)\1,DXEND=$G(DXEND)\1
"RTN","ROREXPR",54,0)
 ;
"RTN","ROREXPR",55,0)
 ;=== Data areas
"RTN","ROREXPR",56,0)
 S NODE=$$ROOT^DILFD(799.33,,1)
"RTN","ROREXPR",57,0)
 ;--- Validate the existing list
"RTN","ROREXPR",58,0)
 S IR=0
"RTN","ROREXPR",59,0)
 F  S IR=$O(ROREXT("DTAR",IR))  Q:IR'>0  D
"RTN","ROREXPR",60,0)
 . I '$D(@NODE@(IR))  K ROREXT("DTAR",IR)  Q
"RTN","ROREXPR",61,0)
 . S TMP=$G(ROREXT("DTAR",IR))
"RTN","ROREXPR",62,0)
 . S:TMP>0 ROREXT("DTAR",IR)=($P(TMP,U)\1)_U_($P(TMP,U,2)\1)
"RTN","ROREXPR",63,0)
 ; One time extract to retrieve problem list entries missed from 2009-forward
"RTN","ROREXPR",64,0)
 I $G(^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT",1)) D
"RTN","ROREXPR",65,0)
 . N ROR
"RTN","ROREXPR",66,0)
 . S ROR=$$FIND1^DIC(799.33,,,"Problem List")
"RTN","ROREXPR",67,0)
 . Q:'ROR
"RTN","ROREXPR",68,0)
 . S ROREXT("DTAR",ROR)="3090101^"_DT
"RTN","ROREXPR",69,0)
 ;--- Add remaining data areas
"RTN","ROREXPR",70,0)
 S IR=0
"RTN","ROREXPR",71,0)
 F  S IR=$O(@NODE@(IR))  Q:IR'>0  D:'$D(ROREXT("DTAR",IR))
"RTN","ROREXPR",72,0)
 . S ROREXT("DTAR",IR)=""
"RTN","ROREXPR",73,0)
 ;
"RTN","ROREXPR",74,0)
 ;=== Main data extraction time frame
"RTN","ROREXPR",75,0)
 S ROREXT("DXEND")=$S(DXEND>0:DXEND,1:$$DT^XLFDT)
"RTN","ROREXPR",76,0)
 I DXBEG>0  S RC=0  D  Q:RC<0 RC
"RTN","ROREXPR",77,0)
 . S ROREXT("DXBEG")=DXBEG  Q:DXBEG'>ROREXT("DXEND")
"RTN","ROREXPR",78,0)
 . S RC=$$ERROR^RORERR(-32,,,,DXBEG,ROREXT("DXEND"))
"RTN","ROREXPR",79,0)
 ;
"RTN","ROREXPR",80,0)
 ;=== Check if the critical patches are installed
"RTN","ROREXPR",81,0)
 F TMP="MD*1.0*1","MC*2.3*34","GMPL*2*30"  D
"RTN","ROREXPR",82,0)
 . S:$$PATCH^XPDUTL(TMP) ROREXT("PATCH",TMP)=""
"RTN","ROREXPR",83,0)
 ;
"RTN","ROREXPR",84,0)
 ;=== Get the package version and the latest patch info
"RTN","ROREXPR",85,0)
 S TMP="CLINICAL CASE REGISTRIES"
"RTN","ROREXPR",86,0)
 S ROREXT("VERSION")=$$VERSION^XPDUTL(TMP)
"RTN","ROREXPR",87,0)
 S TMP=$$LAST^XPDUTL(TMP)  D:TMP>0
"RTN","ROREXPR",88,0)
 . S $P(ROREXT("VERSION"),U,2)=+TMP
"RTN","ROREXPR",89,0)
 . S $P(ROREXT("VERSION"),U,3)=$P(TMP,U,2)
"RTN","ROREXPR",90,0)
 ;
"RTN","ROREXPR",91,0)
 ;=== Aggregate registry parameters
"RTN","ROREXPR",92,0)
 S REGNAME="",RC=0
"RTN","ROREXPR",93,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","ROREXPR",94,0)
 . ;--- Get the registry IEN and parameters
"RTN","ROREXPR",95,0)
 . S REGIEN=$$REGIEN^RORUTL02(REGNAME,"7;10;13;13.1;15.1",.RORBUF)
"RTN","ROREXPR",96,0)
 . I REGIEN<0  S RC=REGIEN  Q
"RTN","ROREXPR",97,0)
 . ;--- Extract Period for New Patient
"RTN","ROREXPR",98,0)
 . S VAL=+$G(RORBUF("DILIST","ID",1,7))
"RTN","ROREXPR",99,0)
 . S:VAL>$G(ROREXT("EXTRDAYS")) ROREXT("EXTRDAYS")=VAL
"RTN","ROREXPR",100,0)
 . ;--- Setup the message builder call-back entry point
"RTN","ROREXPR",101,0)
 . S VAL=$$TRIM^XLFSTR($G(RORBUF("DILIST","ID",1,10)))
"RTN","ROREXPR",102,0)
 . I VAL'=""  D  Q:RC<0
"RTN","ROREXPR",103,0)
 . . S RC=$$VERIFYEP^RORUTL01(VAL)
"RTN","ROREXPR",104,0)
 . . I RC<0  D ERROR^RORERR(-44,,REGNAME,,VAL)  Q
"RTN","ROREXPR",105,0)
 . . S ROREXT("MSGBLD",REGIEN)=VAL
"RTN","ROREXPR",106,0)
 . ;--- Use the first available HL7 event protocol if it has not
"RTN","ROREXPR",107,0)
 . ;--- been defined before calling the $$PREPARE^ROREXPR
"RTN","ROREXPR",108,0)
 . D:$G(ROREXT("HL7PROT"))=""
"RTN","ROREXPR",109,0)
 . . S ROREXT("HL7PROT")=$G(RORBUF("DILIST","ID",1,13))
"RTN","ROREXPR",110,0)
 . ;--- Load maximum message size and convert it into bytes
"RTN","ROREXPR",111,0)
 . ;--- (1 Megabyte = 1024 Kb = 1024 * 1024 = 1048576 bytes)
"RTN","ROREXPR",112,0)
 . S VAL=($G(RORBUF("DILIST","ID",1,13.1))*1048576)\1
"RTN","ROREXPR",113,0)
 . I VAL>0  D  S:(TMP'>0)!(VAL<TMP) ROREXT("MAXHL7SIZE")=VAL
"RTN","ROREXPR",114,0)
 . . S TMP=+$G(ROREXT("MAXHL7SIZE"))
"RTN","ROREXPR",115,0)
 . ;--- Setup the lag interval (for regular data extraction only)
"RTN","ROREXPR",116,0)
 . D:'$G(ROREXT("DXBEG"))
"RTN","ROREXPR",117,0)
 . . S VAL=+$G(RORBUF("DILIST","ID",1,15.1))
"RTN","ROREXPR",118,0)
 . . S:VAL>$G(ROREXT("LD",1)) ROREXT("LD",1)=VAL
"RTN","ROREXPR",119,0)
 . ;--- Load list of codes of extracted Lab results
"RTN","ROREXPR",120,0)
 . I $G(RORLRC)'="*"  D  Q:RC<0
"RTN","ROREXPR",121,0)
 . . S TMP=","_REGIEN_","
"RTN","ROREXPR",122,0)
 . . D LIST^DIC(798.112,TMP,"@;.01;.02;.03","U",,,,"B",,,,"RORMSG")
"RTN","ROREXPR",123,0)
 . . I $G(DIERR)  S RC=$$DBS^RORERR("RORMSG",-9,,,798.112,TMP)  Q
"RTN","ROREXPR",124,0)
 . . Q:$G(^TMP("DILIST",$J,0))'>0
"RTN","ROREXPR",125,0)
 . . S (IL,IR,RC)=0
"RTN","ROREXPR",126,0)
 . . F  S IR=$O(^TMP("DILIST",$J,"ID",IR))  Q:IR=""  D  Q:RC
"RTN","ROREXPR",127,0)
 . . . S LOINC=$G(^TMP("DILIST",$J,"ID",IR,.01))
"RTN","ROREXPR",128,0)
 . . . ;--- All results or list of subscripts
"RTN","ROREXPR",129,0)
 . . . I LOINC="*"  D  S RC=1  Q
"RTN","ROREXPR",130,0)
 . . . . S VAL=$G(^TMP("DILIST",$J,"ID",IR,.03))
"RTN","ROREXPR",131,0)
 . . . . I VAL=""         K RORLRC  S RORLRC="*"  Q
"RTN","ROREXPR",132,0)
 . . . . I $G(RORLRC)=""  K RORLRC  S RORLRC=VAL  Q
"RTN","ROREXPR",133,0)
 . . . . F I=1:1  S TMP=$P(RORLRC,",",I)  Q:(TMP="")!(TMP=VAL)
"RTN","ROREXPR",134,0)
 . . . . S:TMP="" RORLRC=RORLRC_","_VAL
"RTN","ROREXPR",135,0)
 . . . ;--- Ignore individual codes if any subscripts
"RTN","ROREXPR",136,0)
 . . . ;--- (CH, MI, etc.) have been requested already
"RTN","ROREXPR",137,0)
 . . . Q:$G(RORLRC)'=""
"RTN","ROREXPR",138,0)
 . . . ;--- LOINC
"RTN","ROREXPR",139,0)
 . . . I LOINC>0  D  Q:RC<0  S IL=IL+1,RORLRC(IL)=TMP_"^LN"
"RTN","ROREXPR",140,0)
 . . . . S TMP=$$LNCODE^RORUTL02(LOINC)  S:TMP<0 RC=TMP
"RTN","ROREXPR",141,0)
 . . . ;--- NLT
"RTN","ROREXPR",142,0)
 . . . S TMP=$G(^TMP("DILIST",$J,"ID",IR,.02))
"RTN","ROREXPR",143,0)
 . . . S:TMP>0 IL=IL+1,RORLRC(IL)=TMP_"^NLT"
"RTN","ROREXPR",144,0)
 D CLEAN^DILF
"RTN","ROREXPR",145,0)
 K ^TMP("DILIST",$J)
"RTN","ROREXPR",146,0)
 Q:RC<0 RC
"RTN","ROREXPR",147,0)
 ;
"RTN","ROREXPR",148,0)
 ;=== Validate parameters
"RTN","ROREXPR",149,0)
 I '$G(ROREXT("DXBEG"))  S:$G(ROREXT("LD",1))'>0 ROREXT("LD",1)=1
"RTN","ROREXPR",150,0)
 ;
"RTN","ROREXPR",151,0)
 ;=== Check the HL7 parameters
"RTN","ROREXPR",152,0)
 I $G(ROREXT("HL7PROT"))'=""  D  Q:RC<0 RC
"RTN","ROREXPR",153,0)
 . S RC=$$INIT^RORHL7()
"RTN","ROREXPR",154,0)
 ;
"RTN","ROREXPR",155,0)
 ;=== Success
"RTN","ROREXPR",156,0)
 Q 0
"RTN","ROREXT01")
0^17^B60677930^B58409462
"RTN","ROREXT01",1,0)
ROREXT01 ;HCIOFO/SG - EXTRACTION & TRANSMISSION PROCESS ;1/22/06 12:40pm
"RTN","ROREXT01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,21,28**;Feb 17, 2006;Build 66
"RTN","ROREXT01",3,0)
 ;
"RTN","ROREXT01",4,0)
 ; This routine uses the following IAs:
"RTN","ROREXT01",5,0)
 ;
"RTN","ROREXT01",6,0)
 ; #10063  $$S^%ZTLOAD (supported)
"RTN","ROREXT01",7,0)
 ; #10103  $$FMDIFF^XLFDT (supported)
"RTN","ROREXT01",8,0)
 ; #10103  $$NOW^XLFDT (supported)
"RTN","ROREXT01",9,0)
 ;
"RTN","ROREXT01",10,0)
 ;******************************************************************************
"RTN","ROREXT01",11,0)
 ;******************************************************************************
"RTN","ROREXT01",12,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","ROREXT01",13,0)
 ;        
"RTN","ROREXT01",14,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","ROREXT01",15,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","ROREXT01",16,0)
 ;ROR*1.5*21   NOV 2013    T KOPP       Output # of reports run for all local
"RTN","ROREXT01",17,0)
 ;                                      registries
"RTN","ROREXT01",18,0)
 ;ROR*1.5*28   APR  2016   T KOPP       Kill flag for one time extract to
"RTN","ROREXT01",19,0)
 ;                                      retrieve problem list entries missed
"RTN","ROREXT01",20,0)
 ;                                      from 2009-2011 for HIV/HEPC registries
"RTN","ROREXT01",21,0)
 ;******************************************************************************
"RTN","ROREXT01",22,0)
 ;******************************************************************************
"RTN","ROREXT01",23,0)
 Q
"RTN","ROREXT01",24,0)
 ;
"RTN","ROREXT01",25,0)
 ;***** INTERNAL ENTRY POINT FOR DATA EXTRACTION
"RTN","ROREXT01",26,0)
 ;
"RTN","ROREXT01",27,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","ROREXT01",28,0)
 ;               names as subscripts and registry IENs as values
"RTN","ROREXT01",29,0)
 ;
"RTN","ROREXT01",30,0)
 ; [RORTASK]     Task Number (if the data extraction is performed
"RTN","ROREXT01",31,0)
 ;               by a separate process)
"RTN","ROREXT01",32,0)
 ;
"RTN","ROREXT01",33,0)
 ; Return Values:
"RTN","ROREXT01",34,0)
 ;       <0  Error code (see MSGLIST^RORERR20)
"RTN","ROREXT01",35,0)
 ;        0  Ok
"RTN","ROREXT01",36,0)
 ;
"RTN","ROREXT01",37,0)
 ; NOTE: The ROREXT and RORPARM local arrays must be properly
"RTN","ROREXT01",38,0)
 ;       initialized before calling this function.
"RTN","ROREXT01",39,0)
 ;
"RTN","ROREXT01",40,0)
INTEXT(REGLST,RORTASK) ;
"RTN","ROREXT01",41,0)
 N RORHL         ; HL7 variables
"RTN","ROREXT01",42,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","ROREXT01",43,0)
 N RORLRC        ; List of codes of Lab results to be extracted
"RTN","ROREXT01",44,0)
 ;
"RTN","ROREXT01",45,0)
 N COUNTERS,DXBEG,DXEND,HDTIEN,MID,RC,TMP
"RTN","ROREXT01",46,0)
 D INIT^RORUTL01("ROREXT")
"RTN","ROREXT01",47,0)
 S DXBEG=$G(ROREXT("DXBEG")),DXEND="",HDTIEN=0
"RTN","ROREXT01",48,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT01",49,0)
 ;--- Open a new log
"RTN","ROREXT01",50,0)
 S TMP=$$SETUP^RORLOG(.REGLST)
"RTN","ROREXT01",51,0)
 S TMP=$S($G(RORTASK)'="":" TASK #"_RORTASK,1:"")
"RTN","ROREXT01",52,0)
 S TMP=$$OPEN^RORLOG(.REGLST,2,"DATA EXTRACTION"_TMP_" STARTED")
"RTN","ROREXT01",53,0)
 D
"RTN","ROREXT01",54,0)
 . ;--- Check the list of registries
"RTN","ROREXT01",55,0)
 . I $D(REGLST)<10  D  Q
"RTN","ROREXT01",56,0)
 . . S RC=$$ERROR^RORERR(-28,,,,"extract data")
"RTN","ROREXT01",57,0)
 . ;--- Lock parameters of the registries being processed
"RTN","ROREXT01",58,0)
 . S RC=$$LOCKREG^RORUTL02(.REGLST,1,,"DATA EXTRACTION")  Q:RC<0
"RTN","ROREXT01",59,0)
 . I 'RC  D  Q
"RTN","ROREXT01",60,0)
 . . S RC=$$ERROR^RORERR(-11,,,,"registries being processed")
"RTN","ROREXT01",61,0)
 . ;--- Check for pending historical data extraction
"RTN","ROREXT01",62,0)
 . I DXBEG'>0  D  I HDTIEN<0  S RC=+HDTIEN  Q
"RTN","ROREXT01",63,0)
 . . S HDTIEN=$$FIND^RORHDT06(.REGLST,.DXBEG,.DXEND)
"RTN","ROREXT01",64,0)
 . ;--- Load and process data extraction rules
"RTN","ROREXT01",65,0)
 . S RC=$$PREPARE^ROREXPR(.REGLST,DXBEG,DXEND)
"RTN","ROREXT01",66,0)
 . I RC<0  S RC=$$ERROR^RORERR(-22)  Q
"RTN","ROREXT01",67,0)
 . ;--- Load and process the historical data extraction parameters
"RTN","ROREXT01",68,0)
 . I HDTIEN>0  D  Q:RC<0
"RTN","ROREXT01",69,0)
 . . S RC=$$PREPARE^RORHDT06(HDTIEN)
"RTN","ROREXT01",70,0)
 . ;--- Reference the historical data extraction definition
"RTN","ROREXT01",71,0)
 . S RC=$$REGREF^RORHDT06(.REGLST,HDTIEN)  Q:RC<0
"RTN","ROREXT01",72,0)
 . ;--- Display the debug information
"RTN","ROREXT01",73,0)
 . D:$G(RORPARM("DEBUG"))>1 DEBUG^ROREXTUT
"RTN","ROREXT01",74,0)
 . ;--- Extract and send the data
"RTN","ROREXT01",75,0)
 . S RC=$$PROCESS(.REGLST)  Q:RC<0
"RTN","ROREXT01",76,0)
 . S COUNTERS=RC,RC=0
"RTN","ROREXT01",77,0)
 . ;--- Update registry parameters
"RTN","ROREXT01",78,0)
 . S TMP=$$TMSTMP^ROREXTUT(.REGLST)
"RTN","ROREXT01",79,0)
 ;--- Unlock parameters of processed registries
"RTN","ROREXT01",80,0)
 S TMP=$$LOCKREG^RORUTL02(.REGLST,0)
"RTN","ROREXT01",81,0)
 ;
"RTN","ROREXT01",82,0)
 ;--- Statistics & Cleanup
"RTN","ROREXT01",83,0)
 S TMP="DATA EXTRACTION "_$S(RC<0:"ABORTED",1:"COMPLETED")
"RTN","ROREXT01",84,0)
 I RC'<0,$D(^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT")) K ^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT")
"RTN","ROREXT01",85,0)
 D CLOSE^RORLOG(TMP,$G(COUNTERS))
"RTN","ROREXT01",86,0)
 D:'$G(RORPARM("DEBUG")) INIT^RORUTL01("ROREXT")
"RTN","ROREXT01",87,0)
 K ^TMP("RORPTF",$J)
"RTN","ROREXT01",88,0)
 ;---
"RTN","ROREXT01",89,0)
 Q $S($G(RC)<0:RC,1:0)
"RTN","ROREXT01",90,0)
 ;
"RTN","ROREXT01",91,0)
 ;***** RETURNS THE NEXT PATIENT FOR DATA EXTRACTION
"RTN","ROREXT01",92,0)
 ;
"RTN","ROREXT01",93,0)
 ; PTIEN         Patient IEN (DFN in file #2)
"RTN","ROREXT01",94,0)
 ;
"RTN","ROREXT01",95,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT01",96,0)
 ;               IENs as subscripts. The IENs of the corresponding
"RTN","ROREXT01",97,0)
 ;               patient's registry records are returned as values.
"RTN","ROREXT01",98,0)
 ;
"RTN","ROREXT01",99,0)
 ; Return Values:
"RTN","ROREXT01",100,0)
 ;        0  No more patients
"RTN","ROREXT01",101,0)
 ;       >0  IEN (DFN) of the next patient who belongs to at least
"RTN","ROREXT01",102,0)
 ;           one of the registries defined by the RGIENLST parameter.
"RTN","ROREXT01",103,0)
 ;
"RTN","ROREXT01",104,0)
NEXTPAT(PTIEN,RGIENLST) ;
"RTN","ROREXT01",105,0)
 N CNT,IEN,REGIEN,STATUS
"RTN","ROREXT01",106,0)
 S CNT=0
"RTN","ROREXT01",107,0)
 F  S PTIEN=$O(^RORDATA(798,"KEY",PTIEN))  Q:PTIEN'>0  D  Q:CNT
"RTN","ROREXT01",108,0)
 . S REGIEN=0
"RTN","ROREXT01",109,0)
 . F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D
"RTN","ROREXT01",110,0)
 . . S RGIENLST(REGIEN)=0
"RTN","ROREXT01",111,0)
 . . S IEN=+$O(^RORDATA(798,"KEY",PTIEN,REGIEN,""))
"RTN","ROREXT01",112,0)
 . . Q:IEN'>0
"RTN","ROREXT01",113,0)
 . . ;With patch 10, status is irrelevant
"RTN","ROREXT01",114,0)
 . . ;I '$$ACTIVE^RORDD(IEN,,.STATUS)  Q:STATUS'=5
"RTN","ROREXT01",115,0)
 . . ;--- Skip a record tagged as "DON'T SEND" or if test patient
"RTN","ROREXT01",116,0)
 . . I (($P($G(^RORDATA(798,IEN,2)),U,4))!($$TESTPAT^RORUTL01(PTIEN))) Q
"RTN","ROREXT01",117,0)
 . . ;--- Consider the record
"RTN","ROREXT01",118,0)
 . . S RGIENLST(REGIEN)=IEN,CNT=CNT+1
"RTN","ROREXT01",119,0)
 Q $S(PTIEN>0:PTIEN,1:0)
"RTN","ROREXT01",120,0)
 ;
"RTN","ROREXT01",121,0)
 ;***** SCANS THE REGISTRY AND EXTRACTS THE DATA
"RTN","ROREXT01",122,0)
 ;
"RTN","ROREXT01",123,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","ROREXT01",124,0)
 ;               names as subscripts and registry IENs as values
"RTN","ROREXT01",125,0)
 ;
"RTN","ROREXT01",126,0)
 ; Return Values:
"RTN","ROREXT01",127,0)
 ;       <0  Error Code
"RTN","ROREXT01",128,0)
 ;      >=0  Statistics
"RTN","ROREXT01",129,0)
 ;             ^1: Total number of processed patients
"RTN","ROREXT01",130,0)
 ;             ^2: Number of patients processed with errors
"RTN","ROREXT01",131,0)
 ;
"RTN","ROREXT01",132,0)
 ; In normal mode this function processes all patients and returns
"RTN","ROREXT01",133,0)
 ; total number of patients and number of patients processed with
"RTN","ROREXT01",134,0)
 ; errors.
"RTN","ROREXT01",135,0)
 ;
"RTN","ROREXT01",136,0)
 ; However, in debug mode 3 the function stops after the first
"RTN","ROREXT01",137,0)
 ; patient processed with error and returns an error code.
"RTN","ROREXT01",138,0)
 ;
"RTN","ROREXT01",139,0)
PROCESS(REGLST) ;
"RTN","ROREXT01",140,0)
 N CNT,DTNEXT,ECNT,PTIEN,RC,REGIEN,REGNAME,RGIENLST,RORBUF,RORMSG,TH,TMP
"RTN","ROREXT01",141,0)
 ;--- Prepare the list of registry IENs
"RTN","ROREXT01",142,0)
 S REGNAME="",REGIEN=0
"RTN","ROREXT01",143,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:REGIEN<0
"RTN","ROREXT01",144,0)
 . S REGIEN=+REGLST(REGNAME)
"RTN","ROREXT01",145,0)
 . S:REGIEN'>0 REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","ROREXT01",146,0)
 . S:REGIEN>0 RGIENLST(REGIEN)=""
"RTN","ROREXT01",147,0)
 Q:REGIEN<0 REGIEN
"RTN","ROREXT01",148,0)
 ;--- Initialize environment variables
"RTN","ROREXT01",149,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","ROREXT01",150,0)
 ;
"RTN","ROREXT01",151,0)
 ;--- Generate the registry state message
"RTN","ROREXT01",152,0)
 S RC=$$CREATE^RORHL7()  Q:RC<0 RC
"RTN","ROREXT01",153,0)
 S REGIEN=0
"RTN","ROREXT01",154,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT01",155,0)
 . S RC=$$REGSTATE^ROREXT03(REGIEN)
"RTN","ROREXT01",156,0)
 Q:RC<0 RC
"RTN","ROREXT01",157,0)
 ;
"RTN","ROREXT01",158,0)
 ;Output # of reports run for all local registries
"RTN","ROREXT01",159,0)
 S REGIEN=0
"RTN","ROREXT01",160,0)
 F  S REGIEN=$O(^ROR(798.1,REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT01",161,0)
 . I '$D(RGIENLST(REGIEN)) S RC=$$REGSTATE^ROREXT03(REGIEN)
"RTN","ROREXT01",162,0)
 Q:RC<0 RC
"RTN","ROREXT01",163,0)
 ;
"RTN","ROREXT01",164,0)
 ;--- Loop through the patients of the registries
"RTN","ROREXT01",165,0)
 S (CNT,ECNT,PTIEN,RC)=0
"RTN","ROREXT01",166,0)
 F  S PTIEN=$$NEXTPAT(PTIEN,.RGIENLST)  Q:PTIEN'>0  D  Q:RC
"RTN","ROREXT01",167,0)
 . ;--- For a queued task only
"RTN","ROREXT01",168,0)
 . I $D(ZTQUEUED)  S RC=0  D  Q:RC<0
"RTN","ROREXT01",169,0)
 . . ;--- Check if task stop has been requested
"RTN","ROREXT01",170,0)
 . . I $$S^%ZTLOAD  S RC=$$ERROR^RORERR(-42)  Q
"RTN","ROREXT01",171,0)
 . . ;--- Check if the task should be suspended
"RTN","ROREXT01",172,0)
 . . Q:'$G(ROREXT("SUSPEND"))
"RTN","ROREXT01",173,0)
 . . Q:$$NOW^XLFDT<$G(DTNEXT)
"RTN","ROREXT01",174,0)
 . . Q:'$$SUSPEND(.DTNEXT)
"RTN","ROREXT01",175,0)
 . . ;--- Suspend the task during the peak hours
"RTN","ROREXT01",176,0)
 . . F  D  Q:'TH!(RC<0)
"RTN","ROREXT01",177,0)
 . . . S TH=$$FMDIFF^XLFDT(DTNEXT,$$NOW^XLFDT,2)
"RTN","ROREXT01",178,0)
 . . . I TH<60  S TH=0  Q       ; Do not HANG for less than a
"RTN","ROREXT01",179,0)
 . . . H $S(TH>3600:3600,1:TH)  ; minute and more than an hour
"RTN","ROREXT01",180,0)
 . . . ;--- Check if task stop has been requested
"RTN","ROREXT01",181,0)
 . . . S:$$S^%ZTLOAD RC=$$ERROR^RORERR(-42)
"RTN","ROREXT01",182,0)
 . ;--- Process the patient's records
"RTN","ROREXT01",183,0)
 . S CNT=CNT+1
"RTN","ROREXT01",184,0)
 . I $G(RORPARM("DEBUG"))>1  W:$E($G(IOST),1,2)="C-" *13,CNT
"RTN","ROREXT01",185,0)
 . S RC=$$PROCPAT(PTIEN,.RGIENLST)
"RTN","ROREXT01",186,0)
 . ;--- Process the error (if any)
"RTN","ROREXT01",187,0)
 . I RC<0  D  S:$G(RORPARM("DEBUG"))<3 RC=0  Q
"RTN","ROREXT01",188,0)
 . . S ECNT=ECNT+1,RC=$$ERROR^RORERR(-15,,,$G(PTIEN))
"RTN","ROREXT01",189,0)
 . ;--- Send the batch HL7 message when the maximum size is reached
"RTN","ROREXT01",190,0)
 . S:$$ISMAXSZ^RORHL7() RC=$$SEND^ROREXT03(.RGIENLST)
"RTN","ROREXT01",191,0)
 Q:RC<0 RC
"RTN","ROREXT01",192,0)
 ;
"RTN","ROREXT01",193,0)
 ;--- Send the remaining data (flush the buffer)
"RTN","ROREXT01",194,0)
 S RC=$$SEND^ROREXT03(.RGIENLST)  Q:RC<0 RC
"RTN","ROREXT01",195,0)
 ;
"RTN","ROREXT01",196,0)
 ;--- Return number of processed patients and number of errors
"RTN","ROREXT01",197,0)
 Q CNT_U_ECNT
"RTN","ROREXT01",198,0)
 ;
"RTN","ROREXT01",199,0)
 ;***** PROCESS THE PATIENT'S REGISTRY RECORDS
"RTN","ROREXT01",200,0)
 ;
"RTN","ROREXT01",201,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","ROREXT01",202,0)
 ;
"RTN","ROREXT01",203,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT01",204,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT01",205,0)
 ;               patient's registry records as values.
"RTN","ROREXT01",206,0)
 ;
"RTN","ROREXT01",207,0)
 ; Return Values:
"RTN","ROREXT01",208,0)
 ;       <0  Error Code
"RTN","ROREXT01",209,0)
 ;        0  Ok
"RTN","ROREXT01",210,0)
 ;
"RTN","ROREXT01",211,0)
PROCPAT(PTIEN,RGIENLST) ;
"RTN","ROREXT01",212,0)
 N RORERRDL      ; Default error location
"RTN","ROREXT01",213,0)
 ;
"RTN","ROREXT01",214,0)
 N BATCHID,CNT,DXDTS,IEN,MSHPTR,RC,REGIEN,RORMSH,TMP
"RTN","ROREXT01",215,0)
 D CLEAR^RORERR("PROCPAT^ROREXT01")
"RTN","ROREXT01",216,0)
 ;
"RTN","ROREXT01",217,0)
 ;--- Compile the data extraction time frames
"RTN","ROREXT01",218,0)
 S (CNT,RC,REGIEN)=0
"RTN","ROREXT01",219,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT01",220,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","ROREXT01",221,0)
 . S RC=$$DXPERIOD^ROREXTUT(.DXDTS,IEN,PTIEN)
"RTN","ROREXT01",222,0)
 . S:'RC CNT=CNT+1
"RTN","ROREXT01",223,0)
 . S:RC>0 RGIENLST(REGIEN)=0
"RTN","ROREXT01",224,0)
 Q:RC<0 RC
"RTN","ROREXT01",225,0)
 ;--- If the patient should be skipped in all registries
"RTN","ROREXT01",226,0)
 ;    that are being processed, then do not perform the data
"RTN","ROREXT01",227,0)
 ;--- extraction for this patient at all.
"RTN","ROREXT01",228,0)
 I 'CNT  D:$G(RORPARM("DEBUG"))  Q 0
"RTN","ROREXT01",229,0)
 . D LOG^RORLOG(4,"There is no data to extract.",PTIEN)
"RTN","ROREXT01",230,0)
 ;
"RTN","ROREXT01",231,0)
 ;--- Create an HL7 message for the patient
"RTN","ROREXT01",232,0)
 S MSHPTR=$$CREATE^RORHL7(.RORMSH)  Q:MSHPTR<0 MSHPTR
"RTN","ROREXT01",233,0)
 S RC=$$MESSAGE^ROREXT02(PTIEN,.RGIENLST,.DXDTS,$G(ROREXT("HDTIEN")))
"RTN","ROREXT01",234,0)
 ;
"RTN","ROREXT01",235,0)
 ;--- Delete the unfinished message from the ^TMP("HLS",$J)
"RTN","ROREXT01",236,0)
 ;    if there is no data to send (RC>0) or there was an error
"RTN","ROREXT01",237,0)
 ;    during the data extraction (RC<0). Return the error code
"RTN","ROREXT01",238,0)
 ;--- in the latter case.
"RTN","ROREXT01",239,0)
 I RC!($O(^TMP("HLS",$J,""),-1)=MSHPTR)  D  Q:RC<0 RC
"RTN","ROREXT01",240,0)
 . D ROLLBACK^RORHL7(MSHPTR)  S:'RC RC=1
"RTN","ROREXT01",241,0)
 ;
"RTN","ROREXT01",242,0)
 ;--- Do not change state of the record(s) during the
"RTN","ROREXT01",243,0)
 ;--- historical data extraction
"RTN","ROREXT01",244,0)
 I $G(ROREXT("HDTIEN"))'>0  D  Q:RC<0 RC
"RTN","ROREXT01",245,0)
 . S TMP=$S('RC:$P(RORMSH,$E(RORMSH,4),10),1:"")
"RTN","ROREXT01",246,0)
 . S RC=$$UPDRECS^ROREXT03(PTIEN,.RGIENLST,TMP,$P(DXDTS,U,2))
"RTN","ROREXT01",247,0)
 ;---
"RTN","ROREXT01",248,0)
 Q 0
"RTN","ROREXT01",249,0)
 ;
"RTN","ROREXT01",250,0)
 ;***** CHECKS IF THE TASK SHOULD BE SUSPENDED
"RTN","ROREXT01",251,0)
 ;
"RTN","ROREXT01",252,0)
 ; .DTNEXT       Date/Time of the next event (suspend/resume)
"RTN","ROREXT01",253,0)
 ;               is returned via this parameter
"RTN","ROREXT01",254,0)
 ;
"RTN","ROREXT01",255,0)
 ; Return Values:
"RTN","ROREXT01",256,0)
 ;        0  Continue/Resume
"RTN","ROREXT01",257,0)
 ;        1  Suspend
"RTN","ROREXT01",258,0)
 ;
"RTN","ROREXT01",259,0)
SUSPEND(DTNEXT) ;
"RTN","ROREXT01",260,0)
 N DATE,NOW,SUSPEND,TIME,TS,TR
"RTN","ROREXT01",261,0)
 S TS=$P(ROREXT("SUSPEND"),U,1)
"RTN","ROREXT01",262,0)
 S TR=$P(ROREXT("SUSPEND"),U,2)
"RTN","ROREXT01",263,0)
 S NOW=$$NOW^XLFDT,DATE=NOW\1
"RTN","ROREXT01",264,0)
 ;--- A work day
"RTN","ROREXT01",265,0)
 I $$WDCHK^RORUTL01(DATE)  D  Q SUSPEND
"RTN","ROREXT01",266,0)
 . S TIME=NOW-DATE,SUSPEND=0
"RTN","ROREXT01",267,0)
 . I TIME<TS   S DTNEXT=DATE+TS  Q
"RTN","ROREXT01",268,0)
 . I TIME'<TR  S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS  Q
"RTN","ROREXT01",269,0)
 . S DTNEXT=DATE+TR,SUSPEND=1
"RTN","ROREXT01",270,0)
 ;--- Saturday, Sunday or Holiday
"RTN","ROREXT01",271,0)
 S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS
"RTN","ROREXT01",272,0)
 Q 0
"RTN","RORHL17")
0^19^B37241996^B32627161
"RTN","RORHL17",1,0)
RORHL17 ;HOIFO/BH,SG - HL7 PROBLEM LIST: OBR,OBX ;1/23/06 2:22pm
"RTN","RORHL17",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,19,28**;Feb 17, 2006;Build 66
"RTN","RORHL17",3,0)
 ;
"RTN","RORHL17",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL17",5,0)
 ;
"RTN","RORHL17",6,0)
 ; #2308         ^AUPNPROB - PROBLEM file #9000011 (controlled)
"RTN","RORHL17",7,0)
 ; #2644         $$MOD^GMPLUTL3 (controlled)
"RTN","RORHL17",8,0)
 ; #2056         $$GET1^DIQ
"RTN","RORHL17",9,0)
 ; #10103        FMTHL7^XLFDT (supported)
"RTN","RORHL17",10,0)
 ; #5747         $$CODEC^ICDEX (controlled)
"RTN","RORHL17",11,0)
 ;
"RTN","RORHL17",12,0)
 ;******************************************************************************
"RTN","RORHL17",13,0)
 ;******************************************************************************
"RTN","RORHL17",14,0)
 ; --- ROUTINE MODIFICATION LOG ---
"RTN","RORHL17",15,0)
 ; 
"RTN","RORHL17",16,0)
 ;PKG/PATCH   DATE       DEVELOPER   MODIFICATION
"RTN","RORHL17",17,0)
 ;----------- ---------- ----------- ----------------------------------------
"RTN","RORHL17",18,0)
 ;ROR*1.5*19  MAY 2012   K GUPTA     Support for ICD-10 Coding System.
"RTN","RORHL17",19,0)
 ;
"RTN","RORHL17",20,0)
 ;ROR*1.5*28  APR 2016   T KOPP      Set flag for one time extract to
"RTN","RORHL17",21,0)
 ;                                   retrieve problem list entries missed
"RTN","RORHL17",22,0)
 ;                                   from 2009-2011 for HIV/HEPC registries
"RTN","RORHL17",23,0)
 ;
"RTN","RORHL17",24,0)
 ;******************************************************************************
"RTN","RORHL17",25,0)
 ;******************************************************************************
"RTN","RORHL17",26,0)
 ;
"RTN","RORHL17",27,0)
 Q
"RTN","RORHL17",28,0)
 ;
"RTN","RORHL17",29,0)
 ;***** SEARCHES FOR Problem List DATA
"RTN","RORHL17",30,0)
 ;
"RTN","RORHL17",31,0)
 ; RORDFN        IEN of the patient in the PATIENT file (#2)
"RTN","RORHL17",32,0)
 ;
"RTN","RORHL17",33,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","RORHL17",34,0)
 ;               data extraction time frames are stored.
"RTN","RORHL17",35,0)
 ;
"RTN","RORHL17",36,0)
 ; Return Values:
"RTN","RORHL17",37,0)
 ;       <0  Error code
"RTN","RORHL17",38,0)
 ;        0  Ok
"RTN","RORHL17",39,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",40,0)
 ;
"RTN","RORHL17",41,0)
 ;
"RTN","RORHL17",42,0)
EN1(RORDFN,DXDTS) ;
"RTN","RORHL17",43,0)
 N CS,DFN,GMRVSTR,IDX,PROBIEN,OKDT,RC,RORARR,RORBUF,RORENDT,RORMSG,RORSTDT,RORTMP,TMP,Z
"RTN","RORHL17",44,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",45,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",46,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","RORHL17",47,0)
 ;
"RTN","RORHL17",48,0)
 S IDX=0
"RTN","RORHL17",49,0)
 F  S IDX=$O(DXDTS(16,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","RORHL17",50,0)
 . S RORSTDT=$P(DXDTS(16,IDX),U),RORENDT=$P(DXDTS(16,IDX),U,2)
"RTN","RORHL17",51,0)
 . ;--- Check to see is any problems have been entered/modified
"RTN","RORHL17",52,0)
 . ;--- during the data extraction time frame
"RTN","RORHL17",53,0)
 . S MDATE=$$MOD^GMPLUTL3(RORDFN)
"RTN","RORHL17",54,0)
 . ; Don't check LAST DATE MODIFIED for one time data back pull of problem list entries
"RTN","RORHL17",55,0)
 . I '$G(^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT",1)) Q:$S(MDATE<RORSTDT:1,MDATE'<RORENDT:1,1:0)
"RTN","RORHL17",56,0)
 . ;--- Find newly entered problems or modified problems
"RTN","RORHL17",57,0)
 . S PROBIEN=""
"RTN","RORHL17",58,0)
 . F  S PROBIEN=$O(^AUPNPROB("AC",RORDFN,PROBIEN)) Q:'PROBIEN  D
"RTN","RORHL17",59,0)
 . . ; ---
"RTN","RORHL17",60,0)
 . . ; Check date entered is after 2009 for one time back pull
"RTN","RORHL17",61,0)
 . . I $G(^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT",1)) S Z=$P($G(^AUPNPROB(PROBIEN,0)),U,8) Q:Z<3090101
"RTN","RORHL17",62,0)
 . . ; ---
"RTN","RORHL17",63,0)
 . . S TMP=$$LOAD(.RORARR,PROBIEN)  Q:TMP="S"
"RTN","RORHL17",64,0)
 . . S:TMP>0 ERRCNT=ERRCNT+TMP
"RTN","RORHL17",65,0)
 . . ;---
"RTN","RORHL17",66,0)
 . . S TMP=$$OBR(.RORARR)
"RTN","RORHL17",67,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL17",68,0)
 . . S TMP=$$OBX(.RORARR)
"RTN","RORHL17",69,0)
 . . I TMP  Q:TMP<0  S ERRCNT=ERRCNT+TMP
"RTN","RORHL17",70,0)
 ;
"RTN","RORHL17",71,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORHL17",72,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL17",73,0)
 ;
"RTN","RORHL17",74,0)
 ;***** VALIDATES THE DATE
"RTN","RORHL17",75,0)
CHECK(DATE) ;
"RTN","RORHL17",76,0)
 Q:DATE'>0 ""
"RTN","RORHL17",77,0)
 Q:$E(DATE,1,3)>$E(DT,1,3) ""
"RTN","RORHL17",78,0)
 S:$E(DATE,4,5)="00" $E(DATE,4,5)="01"
"RTN","RORHL17",79,0)
 S:$E(DATE,6,7)="00" $E(DATE,6,7)="01"
"RTN","RORHL17",80,0)
 Q $$FM2HL^RORHL7(DATE)
"RTN","RORHL17",81,0)
 ;
"RTN","RORHL17",82,0)
 ;I $E(DATE,1,2)="20",$E(DATE,3,4)>$E(DT,2,3) Q ""
"RTN","RORHL17",83,0)
 ;
"RTN","RORHL17",84,0)
 ;*****
"RTN","RORHL17",85,0)
LOAD(RORARR,PROBIEN) ;
"RTN","RORHL17",86,0)
 N CNT,ERRCNT,IENS,MDATE,NOTE,REC,REC1,SUB3,SUB5,STAT,RORDIAG
"RTN","RORHL17",87,0)
 K RORARR,@RORTMP  S ERRCNT=0
"RTN","RORHL17",88,0)
 ;
"RTN","RORHL17",89,0)
 S REC=$G(^AUPNPROB(PROBIEN,0))
"RTN","RORHL17",90,0)
 S REC1=$G(^AUPNPROB(PROBIEN,1))
"RTN","RORHL17",91,0)
 S MDATE=$P(REC,U,3)
"RTN","RORHL17",92,0)
 Q:(MDATE<RORSTDT)!(MDATE'<RORENDT) "S"
"RTN","RORHL17",93,0)
 ;
"RTN","RORHL17",94,0)
 S RORARR("OBR","FACIL")=$P(REC,U,6)
"RTN","RORHL17",95,0)
 S RORARR("OBR","NMBR")=$P(REC,U,7)
"RTN","RORHL17",96,0)
 S RORARR("OBR","COND")=$P(REC1,U,2)
"RTN","RORHL17",97,0)
 S RORARR("OBR","DE")=$$FMTHL7^XLFDT($P(REC,U,8))
"RTN","RORHL17",98,0)
 S RORARR("OBR","DOO")=$$CHECK($P(REC,U,13))
"RTN","RORHL17",99,0)
 S RORARR("OBR","DRES")=$$CHECK($P(REC1,U,7)) ;date resolved
"RTN","RORHL17",100,0)
 ;
"RTN","RORHL17",101,0)
 S RORDIAG=$$CODEC^ICDEX(80,+$P(REC,U))
"RTN","RORHL17",102,0)
 S:+RORDIAG<0 RORDIAG=""
"RTN","RORHL17",103,0)
 S:RORDIAG]"" RORDIAG=$$CSNAME^RORHLUT1(80,+$P(REC,U))_":"_RORDIAG
"RTN","RORHL17",104,0)
 S RORARR("OBR","DIAG")=RORDIAG
"RTN","RORHL17",105,0)
 ;
"RTN","RORHL17",106,0)
 S RORARR("OBR","DREC")=$$FMTHL7^XLFDT($P(REC1,U,9)) ;date recorded
"RTN","RORHL17",107,0)
 S RORARR("OBR","RP")=$P(REC1,U,4)
"RTN","RORHL17",108,0)
 S RORARR("OBR","DLM")=$$FMTHL7^XLFDT(MDATE)
"RTN","RORHL17",109,0)
 S RORARR("OBR","ST")=$P(REC,U,12)
"RTN","RORHL17",110,0)
 ;
"RTN","RORHL17",111,0)
 S RORARR("OBX","PR")=$$GET1^DIQ(9000011,PROBIEN,.05,"E")
"RTN","RORHL17",112,0)
 S RORARR("OBX","PROB")=$$GET1^DIQ(9000011,PROBIEN,1.01,"E")
"RTN","RORHL17",113,0)
 ;
"RTN","RORHL17",114,0)
 I $D(^AUPNPROB(PROBIEN,11))>1  D
"RTN","RORHL17",115,0)
 . S SUB3=0,CNT=0
"RTN","RORHL17",116,0)
 . F  S SUB3=$O(^AUPNPROB(PROBIEN,11,SUB3))  Q:'SUB3  D
"RTN","RORHL17",117,0)
 . . S SUB5=0
"RTN","RORHL17",118,0)
 . . F  S SUB5=$O(^AUPNPROB(PROBIEN,11,SUB3,11,SUB5))  Q:'SUB5  D
"RTN","RORHL17",119,0)
 . . . S IENS=SUB5_","_SUB3_","_PROBIEN_","
"RTN","RORHL17",120,0)
 . . . S NOTE=$$GET1^DIQ(9000011.1111,IENS,.03,,,"RORMSG")
"RTN","RORHL17",121,0)
 . . . S CNT=CNT+1,@RORTMP@(CNT)=NOTE
"RTN","RORHL17",122,0)
 ;
"RTN","RORHL17",123,0)
 Q ERRCNT
"RTN","RORHL17",124,0)
 ;
"RTN","RORHL17",125,0)
 ;***** PROBLEM LIST OBR SEGMENT BUILDER
"RTN","RORHL17",126,0)
 ;
"RTN","RORHL17",127,0)
 ; Return Values:
"RTN","RORHL17",128,0)
 ;       <0  Error code
"RTN","RORHL17",129,0)
 ;        0  Ok
"RTN","RORHL17",130,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",131,0)
 ;
"RTN","RORHL17",132,0)
OBR(RORARR) ;
"RTN","RORHL17",133,0)
 N CLASS,CS,DIERR,ERRCNT,PRV,RC,RORMSG,RORSEG,TMP,TMP1
"RTN","RORHL17",134,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",135,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",136,0)
 ;
"RTN","RORHL17",137,0)
 ;--- Initialize the segment
"RTN","RORHL17",138,0)
 S RORSEG(0)="OBR"
"RTN","RORHL17",139,0)
 ;
"RTN","RORHL17",140,0)
 ;--- OBR-3 - Filler Order Number
"RTN","RORHL17",141,0)
 S RORSEG(3)=RORARR("OBR","FACIL")_RORARR("OBR","NMBR")
"RTN","RORHL17",142,0)
 ;
"RTN","RORHL17",143,0)
 ;--- OBR-4 - Problem List CPT Code
"RTN","RORHL17",144,0)
 S RORSEG(4)="90125"_CS_"HOSPITAL CARE,NEW, INTERMED."_CS_"C4"
"RTN","RORHL17",145,0)
 ;
"RTN","RORHL17",146,0)
 ;--- OBR-6 - Requested Date/time (Date Entered)
"RTN","RORHL17",147,0)
 S RORSEG(6)=RORARR("OBR","DE")
"RTN","RORHL17",148,0)
 ;
"RTN","RORHL17",149,0)
 ;--- OBR-7 - Observation Date/Time (Date Appeared)
"RTN","RORHL17",150,0)
 S RORSEG(7)=RORARR("OBR","DOO")
"RTN","RORHL17",151,0)
 ;
"RTN","RORHL17",152,0)
 ;--- OBR-8 - Observation End Date/Time (Date Resolved/Inactivated)
"RTN","RORHL17",153,0)
 S RORSEG(8)=RORARR("OBR","DRES")
"RTN","RORHL17",154,0)
 ;
"RTN","RORHL17",155,0)
 ;--- OBR-13 -  Relevant Clinical Info. (Diagnosis Code)
"RTN","RORHL17",156,0)
 S RORSEG(13)=RORARR("OBR","DIAG")
"RTN","RORHL17",157,0)
 ;
"RTN","RORHL17",158,0)
 ;--- OBR-14 - Specimen Received Date/time (Date Recorded)
"RTN","RORHL17",159,0)
 S RORSEG(14)=RORARR("OBR","DREC")
"RTN","RORHL17",160,0)
 ;
"RTN","RORHL17",161,0)
 ;--- OBR-16 - Ordering Provider
"RTN","RORHL17",162,0)
 S PRV=RORARR("OBR","RP")
"RTN","RORHL17",163,0)
 S TMP=$$GET1^DIQ(200,PRV_",",53.5,"E",,"RORMSG")
"RTN","RORHL17",164,0)
 I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL17",165,0)
 . D DBS^RORERR("RORMSG",-99,,RORDFN,200,PRV_",")
"RTN","RORHL17",166,0)
 E  S $P(PRV,CS,13)=$$ESCAPE^RORHL7(TMP)
"RTN","RORHL17",167,0)
 S RORSEG(16)=PRV
"RTN","RORHL17",168,0)
 ;
"RTN","RORHL17",169,0)
 ;--- OBR-20 - Filler Field 1 (Condition of the Record)
"RTN","RORHL17",170,0)
 S RORSEG(20)=RORARR("OBR","COND")
"RTN","RORHL17",171,0)
 ;
"RTN","RORHL17",172,0)
 ;--- OBR-22 - Results Rpt/Status Change Date/time  (Last Modified)
"RTN","RORHL17",173,0)
 S RORSEG(22)=RORARR("OBR","DLM")
"RTN","RORHL17",174,0)
 ;
"RTN","RORHL17",175,0)
 ;--- OBR-24 - Diagnostic Service ID
"RTN","RORHL17",176,0)
 S RORSEG(24)="TX"
"RTN","RORHL17",177,0)
 ;
"RTN","RORHL17",178,0)
 ;--- OBR-25 - Result Status (Status of the Problem)
"RTN","RORHL17",179,0)
 S TMP1=RORARR("OBR","ST")
"RTN","RORHL17",180,0)
 S TMP=$S(TMP1="A":"F",TMP1="I":"R",1:"")
"RTN","RORHL17",181,0)
 S RORSEG(25)=TMP
"RTN","RORHL17",182,0)
 ;
"RTN","RORHL17",183,0)
 ;--- OBR-44 - Division
"RTN","RORHL17",184,0)
 S RORSEG(44)=$$SITE^RORUTL03(CS)
"RTN","RORHL17",185,0)
 ;
"RTN","RORHL17",186,0)
 ;--- Store the segment
"RTN","RORHL17",187,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL17",188,0)
 Q ERRCNT
"RTN","RORHL17",189,0)
 ;
"RTN","RORHL17",190,0)
 ;***** PROBLEM LIST OBX SEGMENT(S) BUILDER
"RTN","RORHL17",191,0)
 ;
"RTN","RORHL17",192,0)
 ; Return Values:
"RTN","RORHL17",193,0)
 ;       <0  Error code
"RTN","RORHL17",194,0)
 ;        0  Ok
"RTN","RORHL17",195,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL17",196,0)
 ;
"RTN","RORHL17",197,0)
OBX(RORARR) ;
"RTN","RORHL17",198,0)
 N BR,CS,ERRCNT,NDX,OBX3,RC
"RTN","RORHL17",199,0)
 S (ERRCNT,RC)=0
"RTN","RORHL17",200,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL17",201,0)
 S BR=$E(HLECH,3)_".br"_$E(HLECH,3)
"RTN","RORHL17",202,0)
 ;
"RTN","RORHL17",203,0)
 I $D(RORARR("OBX","PR")) D
"RTN","RORHL17",204,0)
 . S OBX3="PRVN"_CS_"Provider Narrative"_CS_"VA080"
"RTN","RORHL17",205,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PR")))
"RTN","RORHL17",206,0)
 ;
"RTN","RORHL17",207,0)
 I $D(RORARR("OBX","PROB")) D
"RTN","RORHL17",208,0)
 . S OBX3="EXPR"_CS_"Expression"_CS_"VA080"
"RTN","RORHL17",209,0)
 . D SETOBX(OBX3,"",$$ESCAPE^RORHL7(RORARR("OBX","PROB")))
"RTN","RORHL17",210,0)
 ;
"RTN","RORHL17",211,0)
 S OBX3="NOTE"_CS_"Note Narrative"_CS_"VA080"
"RTN","RORHL17",212,0)
 D SETOBXWP^RORHLUT1(RORTMP,OBX3)
"RTN","RORHL17",213,0)
 ;
"RTN","RORHL17",214,0)
 Q ERRCNT
"RTN","RORHL17",215,0)
 ;
"RTN","RORHL17",216,0)
 ;*** CREATES AND STORES THE OBX SEGMENT
"RTN","RORHL17",217,0)
SETOBX(OBX3,OBX4,OBX5) ;
"RTN","RORHL17",218,0)
 N RORSEG
"RTN","RORHL17",219,0)
 ;--- Initialize the segment
"RTN","RORHL17",220,0)
 S RORSEG(0)="OBX"
"RTN","RORHL17",221,0)
 ;--- OBX-2
"RTN","RORHL17",222,0)
 S RORSEG(2)="FT"
"RTN","RORHL17",223,0)
 ;--- OBX-3
"RTN","RORHL17",224,0)
 S RORSEG(3)=OBX3
"RTN","RORHL17",225,0)
 ;--- OBX-4
"RTN","RORHL17",226,0)
 S:$G(OBX4)'="" RORSEG(4)=OBX4
"RTN","RORHL17",227,0)
 ;--- OBX-5
"RTN","RORHL17",228,0)
 S RORSEG(5)=OBX5
"RTN","RORHL17",229,0)
 ;--- OBX-11
"RTN","RORHL17",230,0)
 S RORSEG(11)="F"
"RTN","RORHL17",231,0)
 ;--- Store the segment
"RTN","RORHL17",232,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL17",233,0)
 Q
"RTN","RORP028")
0^22^B84005676^n/a
"RTN","RORP028",1,0)
RORP028 ;ALB/TK  ENV CK, PRE and POST INSTALL - PATCH 28 ; 18 Feb 2016  6:23 PM
"RTN","RORP028",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**28**;Feb 17, 2006;Build 66
"RTN","RORP028",3,0)
 ;
"RTN","RORP028",4,0)
 ;*****************************************************************************
"RTN","RORP028",5,0)
 ;*****************************************************************************
"RTN","RORP028",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORP028",7,0)
 ;        
"RTN","RORP028",8,0)
 ;PKG/PATCH    DATE       DEVELOPER    MODIFICATION
"RTN","RORP028",9,0)
 ;-----------  ---------  -----------  ----------------------------------------
"RTN","RORP028",10,0)
 ;ROR*1.5*28   APR 2016   T KOPP       Added routine for env check, pre/post
"RTN","RORP028",11,0)
 ;                                     install
"RTN","RORP028",12,0)
 ;                                               
"RTN","RORP028",13,0)
 ;******************************************************************************
"RTN","RORP028",14,0)
 ;******************************************************************************
"RTN","RORP028",15,0)
 ; 
"RTN","RORP028",16,0)
 ; SUPPORTED CALLS:
"RTN","RORP028",17,0)
 ;  RTN^%ZTLOAD   #10063
"RTN","RORP028",18,0)
 ;  STAT^%ZTLOAD  #10063
"RTN","RORP028",19,0)
 ;  BMES^XPDUTL   #10141
"RTN","RORP028",20,0)
 ;  MES^XPDUTL    #10141
"RTN","RORP028",21,0)
 ;  BLD^DIALOG    #2050
"RTN","RORP028",22,0)
 ;  UPDATE^DIE    #2053
"RTN","RORP028",23,0)
 ;  FMADD^XLFDT   #10103
"RTN","RORP028",24,0)
 ;  NOW^XLFDT     #10103
"RTN","RORP028",25,0)
 ;  FMTE^XLFDT    #10103
"RTN","RORP028",26,0)
 ;  CLEAN^DILF    #2054
"RTN","RORP028",27,0)
 ;  GET1^DIQ      #2056
"RTN","RORP028",28,0)
 ;  ^DIR          #10026
"RTN","RORP028",29,0)
 ;  FIND1^DIC     #2051
"RTN","RORP028",30,0)
 ;
"RTN","RORP028",31,0)
ENV ;  Environment check
"RTN","RORP028",32,0)
 S XPDNOQUE=1 ; disable queuing
"RTN","RORP028",33,0)
 Q
"RTN","RORP028",34,0)
 ;
"RTN","RORP028",35,0)
PRE ; Patch pre-install
"RTN","RORP028",36,0)
 N RC,ZTSK,RORBUF,RORMES
"RTN","RORP028",37,0)
 ; Check for ROR INITIALIZE task running
"RTN","RORP028",38,0)
 D BMES^XPDUTL("   *** Checking to be sure ROR INITIALIZE task is not already running")
"RTN","RORP028",39,0)
 S RC=0
"RTN","RORP028",40,0)
 D RTN^%ZTLOAD("RORSET02","RORBUF")
"RTN","RORP028",41,0)
 S ZTSK="" F  S ZTSK=$O(RORBUF(ZTSK)) Q:ZTSK=""  D  I $G(ZTSK(1))=2 S RC=-1 Q
"RTN","RORP028",42,0)
 . D STAT^%ZTLOAD
"RTN","RORP028",43,0)
 ;--- Display error message if option is running
"RTN","RORP028",44,0)
 I RC<0  D  S XPDABORT=2 Q
"RTN","RORP028",45,0)
 . K RORMES
"RTN","RORP028",46,0)
 . D BMES^XPDUTL($$MSG^RORERR20(RC,,XPDNM))
"RTN","RORP028",47,0)
 . D BMES^XPDUTL("")
"RTN","RORP028",48,0)
 . S RORMES(1)="   >> ROR INITIALIZE task is already running.  Task # is "_ZTSK
"RTN","RORP028",49,0)
 . S RORMES(2)="      This task must complete or be terminated before the install can continue"
"RTN","RORP028",50,0)
 . S RORMES(3)="      Restart this patch install when this task is not running"
"RTN","RORP028",51,0)
 . S RORMES(4)=" "
"RTN","RORP028",52,0)
 . D MES^XPDUTL(.RORMES)
"RTN","RORP028",53,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP028",54,0)
 N RORI,REGIEN,RORREG,Z,X,Y,DIR
"RTN","RORP028",55,0)
 K ^XTMP("ROR_NO_INIT")  ; Will contain any pre-initialized registries not to be reinitialized
"RTN","RORP028",56,0)
 D XTMPHDR^RORUTL01("ROR_NO_INIT",7,"CCR REGISTRIES NOT TO BE RE-INITIALIZED")
"RTN","RORP028",57,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP028")),";;",2),U) Q:RORREG=""  D  Q:$G(XPDABORT)
"RTN","RORP028",58,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP028",59,0)
 . Q:REGIEN'>0  ; new registry doesn't yet exist
"RTN","RORP028",60,0)
 . ; Check if registry is already initiated (has a value in HDT field)
"RTN","RORP028",61,0)
 . S Z=$$GET1^DIQ(798.1,REGIEN_",",21.05,"I")
"RTN","RORP028",62,0)
 . I Z'="" D  Q
"RTN","RORP028",63,0)
 .. S DIR(0)="YA",DIR("A",1)="  >> New registry "_RORREG_"(ien #"_REGIEN_") has already completed initialization"
"RTN","RORP028",64,0)
 .. S DIR("A")="Do you want to rerun its initialization?: ",DIR("B")="NO"
"RTN","RORP028",65,0)
 .. W ! D ^DIR K DIR W !
"RTN","RORP028",66,0)
 .. I $D(DIRUT)!($D(DIROUT)) S XPDABORT=2 K ^XTMP("ROR_NO_INIT") D BMES^XPDUTL("INSTALL ABORTED") Q
"RTN","RORP028",67,0)
 .. I Y'=1 S ^XTMP("ROR_NO_INIT",REGIEN)=""
"RTN","RORP028",68,0)
 Q
"RTN","RORP028",69,0)
 ;
"RTN","RORP028",70,0)
POST ; Patch post-install
"RTN","RORP028",71,0)
 N CT,RORI,RORREG,REGIEN,Z
"RTN","RORP028",72,0)
 N RORPARM
"RTN","RORP028",73,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP028",74,0)
 D BMES^XPDUTL("POST INSTALL START")
"RTN","RORP028",75,0)
 ;
"RTN","RORP028",76,0)
 D BMES^XPDUTL(">> Adding new panel to DAA Lab Monitoring report")
"RTN","RORP028",77,0)
 D NEWPANEL
"RTN","RORP028",78,0)
 ; Update Knee/Hip replacement registries short description
"RTN","RORP028",79,0)
 D BMES^XPDUTL(">> Updating Short Description for 2 Registries")
"RTN","RORP028",80,0)
 D UPDNM
"RTN","RORP028",81,0)
 ;
"RTN","RORP028",82,0)
 D BMES^XPDUTL(">> Updating List Items for new registries")
"RTN","RORP028",83,0)
 D UPDLIST,COMPL
"RTN","RORP028",84,0)
 ;
"RTN","RORP028",85,0)
 D BMES^XPDUTL(">> Initiating background job to set up registries added with this patch")
"RTN","RORP028",86,0)
 N RORKIDS,RORERR,RORFDA,CT,DIERR,X,Y
"RTN","RORP028",87,0)
 S RORKIDS=1
"RTN","RORP028",88,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP028")),";;",2),U) Q:RORREG=""  D
"RTN","RORP028",89,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP028",90,0)
 . Q:REGIEN'>0
"RTN","RORP028",91,0)
 . I $D(^XTMP("ROR_NO_INIT",REGIEN)) D  Q
"RTN","RORP028",92,0)
 .. S RORERR(1)="   o New registry "_RORREG_"(ien #"_REGIEN_") is already initialized"
"RTN","RORP028",93,0)
 .. S RORERR(2)="     You have chosen not to re-initialize this registry"
"RTN","RORP028",94,0)
 .. S RORERR(3)=" "
"RTN","RORP028",95,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP028",96,0)
 .. K RORERR
"RTN","RORP028",97,0)
 . ;
"RTN","RORP028",98,0)
 . K RORFDA,RORMSG,RORERR
"RTN","RORP028",99,0)
 . S RORFDA(798.1,REGIEN_",",1)=2850101
"RTN","RORP028",100,0)
 . S RORFDA(798.1,REGIEN_",",19.1)=""
"RTN","RORP028",101,0)
 . S RORFDA(798.1,REGIEN_",",21.05)=""
"RTN","RORP028",102,0)
 . D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP028",103,0)
 . I $D(DIERR) D
"RTN","RORP028",104,0)
 .. K RORERR
"RTN","RORP028",105,0)
 .. M RORERR=RORMSG
"RTN","RORP028",106,0)
 .. D DBS^RORERR("RORMSG",-112,,,798.1,REGIEN)
"RTN","RORP028",107,0)
 .. M RORMSG=RORERR
"RTN","RORP028",108,0)
 .. K RORERR
"RTN","RORP028",109,0)
 .. S RORERR(1)="     New registry "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP028",110,0)
 .. S RORERR(2)="     and may not initialize correctly.  Please report this error to your CCR contact:"
"RTN","RORP028",111,0)
 .. S RORERR(3)=""
"RTN","RORP028",112,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP028",113,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP028",114,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP028",115,0)
 D ^RORSET02
"RTN","RORP028",116,0)
 K ^XTMP("ROR_NO_INIT")
"RTN","RORP028",117,0)
 D COMPL
"RTN","RORP028",118,0)
 ;
"RTN","RORP028",119,0)
 D BMES^XPDUTL(">> Setting flag for back pull of problem list for HIV/HEPC registries")
"RTN","RORP028",120,0)
 D XTMPHDR^RORUTL01("ROR_ONETIME_PROBLEM_LIST_EXTRACT",60,"ONE TIME PROBLEM LIST BACK PULL PATCH 28")
"RTN","RORP028",121,0)
 S ^XTMP("ROR_ONETIME_PROBLEM_LIST_EXTRACT",1)=1
"RTN","RORP028",122,0)
 D COMPL
"RTN","RORP028",123,0)
 ;
"RTN","RORP028",124,0)
 D CLEAN^DILF
"RTN","RORP028",125,0)
 D BMES^XPDUTL("POST INSTALL COMPLETE")
"RTN","RORP028",126,0)
 Q
"RTN","RORP028",127,0)
 ;
"RTN","RORP028",128,0)
NEWREG ; List of new registries to initialize
"RTN","RORP028",129,0)
 ;;VA CROHNS
"RTN","RORP028",130,0)
 ;;VA DEMENTIA
"RTN","RORP028",131,0)
 ;;VA HEPB
"RTN","RORP028",132,0)
 ;;VA THYROID CA
"RTN","RORP028",133,0)
 ;;VA UC
"RTN","RORP028",134,0)
 ;;
"RTN","RORP028",135,0)
 ;
"RTN","RORP028",136,0)
NEWPANEL ; For DAA Lab Monitoring report - add panel 55 after ,24,
"RTN","RORP028",137,0)
 N RORRPT,RORMSG,RORPAN,RORERR,RORFDA,X,Y,DIERR
"RTN","RORP028",138,0)
 S RORRPT=$$FIND1^DIC(799.34,,"X","DAA Lab Monitoring")
"RTN","RORP028",139,0)
 S RORPAN=$G(^ROR(799.34,RORRPT,1))
"RTN","RORP028",140,0)
 K RORFDA,RORMSG
"RTN","RORP028",141,0)
 I RORPAN[",24,55," D  Q
"RTN","RORP028",142,0)
 . D BMES^XPDUTL("   o New panel already exists for registry")
"RTN","RORP028",143,0)
 . D COMPL
"RTN","RORP028",144,0)
 I RORPAN'[",24,55," D
"RTN","RORP028",145,0)
 . S RORFDA(799.34,RORRPT_",",1)=$P(RORPAN,",24,")_",24,55,"_$P(RORPAN,",24,",2)
"RTN","RORP028",146,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP028",147,0)
 . I $D(DIERR) D  Q
"RTN","RORP028",148,0)
 .. K RORERR
"RTN","RORP028",149,0)
 .. D DBS^RORERR("RORMSG",-112,,,799.34,RORRPT)
"RTN","RORP028",150,0)
 .. M RORMSG=RORERR
"RTN","RORP028",151,0)
 .. K RORERR
"RTN","RORP028",152,0)
 .. S RORERR(1)="     Update of report "_$P($G(^ROR(799.34,RORRPT,0)),U)_" with new panel"
"RTN","RORP028",153,0)
 .. S RORERR(2)="      encountered the following error.  Please report this error to your CCR contact:"
"RTN","RORP028",154,0)
 .. S RORERR(3)=""
"RTN","RORP028",155,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP028",156,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP028",157,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP028",158,0)
 D COMPL
"RTN","RORP028",159,0)
 Q
"RTN","RORP028",160,0)
 ;
"RTN","RORP028",161,0)
UPDNM ;
"RTN","RORP028",162,0)
 N DIERR,ROR,ROR1,ROR2,RORFDA,RORMSG,RORERR,X,Y
"RTN","RORP028",163,0)
 F ROR="VA TOTAL KNEE","VA TOTAL HIP" D
"RTN","RORP028",164,0)
 . S ROR1=$$FIND1^DIC(798.1,,"X",ROR)
"RTN","RORP028",165,0)
 . I ROR1'>0 D  Q
"RTN","RORP028",166,0)
 .. D BMES^XPDUTL("   o "_ROR_" registry does not exist"),COMPL
"RTN","RORP028",167,0)
 . S ROR2=$P($G(^ROR(798.1,ROR1,0)),U,4)
"RTN","RORP028",168,0)
 . ;
"RTN","RORP028",169,0)
 . I ROR2[" Registry" D  Q
"RTN","RORP028",170,0)
 .. D BMES^XPDUTL("   o "_ROR_" registry description was already updated")
"RTN","RORP028",171,0)
 . ;
"RTN","RORP028",172,0)
 . K RORFDA,RORMSG,DIERR,RORERR
"RTN","RORP028",173,0)
 . S ROR2=ROR2_" Registry"
"RTN","RORP028",174,0)
 . S RORFDA(798.1,ROR1_",",4)=ROR2
"RTN","RORP028",175,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP028",176,0)
 . I $D(DIERR) D  Q
"RTN","RORP028",177,0)
 .. K RORERR
"RTN","RORP028",178,0)
 .. D DBS^RORERR("RORMSG",-112,,,798.1,ROR1)
"RTN","RORP028",179,0)
 .. M RORMSG=RORERR
"RTN","RORP028",180,0)
 .. K RORERR
"RTN","RORP028",181,0)
 .. S RORERR(1)="     Update of the "_ROR_" registry description was not successful"
"RTN","RORP028",182,0)
 .. S RORERR(2)="      Please report this error to your CCR contact:"
"RTN","RORP028",183,0)
 .. S RORERR(3)=""
"RTN","RORP028",184,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP028",185,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP028",186,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP028",187,0)
 . D BMES^XPDUTL("   o "_ROR_" registry description updated")
"RTN","RORP028",188,0)
 D COMPL
"RTN","RORP028",189,0)
 Q
"RTN","RORP028",190,0)
 ;
"RTN","RORP028",191,0)
COMPL ;
"RTN","RORP028",192,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP028",193,0)
 Q
"RTN","RORP028",194,0)
 ;
"RTN","RORP028",195,0)
LISTITEM ;  Entries to add to file 799.1  text^group^code
"RTN","RORP028",196,0)
 ;;eGFR by CKD-EPI^7^3
"RTN","RORP028",197,0)
 ;;eGFR by MDRD^7^2
"RTN","RORP028",198,0)
 ;;Creatinine clearance by Cockcroft-Gault^7^1
"RTN","RORP028",199,0)
 ;;FIB-4^6^4
"RTN","RORP028",200,0)
 ;;APRI^6^3
"RTN","RORP028",201,0)
 ;;MELD-Na^6^2
"RTN","RORP028",202,0)
 ;;MELD^6^1
"RTN","RORP028",203,0)
 ;;BMI^5^1
"RTN","RORP028",204,0)
 ;;Registry Lab^3^1
"RTN","RORP028",205,0)
 ;;
"RTN","RORP028",206,0)
 ;
"RTN","RORP028",207,0)
 ; Update ROR LIST ITEM file (#799.1) for new registries
"RTN","RORP028",208,0)
UPDLIST  ;
"RTN","RORP028",209,0)
 N RORI,RORI1,RORREG,RORDATA,REGIEN,Z,CT,DIERR,RORFDA,RORMSG,RORERR
"RTN","RORP028",210,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP028")),";;",2),U) Q:RORREG=""  D
"RTN","RORP028",211,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP028",212,0)
 . I REGIEN>0 D
"RTN","RORP028",213,0)
 .. F RORI1=1:1 S RORDATA=$P($T(@("LISTITEM+"_RORI1_"^RORP028")),";;",2) Q:RORDATA=""  D
"RTN","RORP028",214,0)
 ... Q:$D(^ROR(799.1,"KEY",+$P(RORDATA,U,2),REGIEN,+$P(RORDATA,U,3)))  ; Entry already exists
"RTN","RORP028",215,0)
 ... K RORFDA,RORMSG,RORERR,DIERR
"RTN","RORP028",216,0)
 ... S RORFDA(799.1,"?+1,",.01)=$P(RORDATA,U)
"RTN","RORP028",217,0)
 ... S RORFDA(799.1,"?+1,",.02)=$P(RORDATA,U,2)
"RTN","RORP028",218,0)
 ... S RORFDA(799.1,"?+1,",.03)=REGIEN
"RTN","RORP028",219,0)
 ... S RORFDA(799.1,"?+1,",.04)=$P(RORDATA,U,3)
"RTN","RORP028",220,0)
 ... D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP028",221,0)
 ... I $G(DIERR) D
"RTN","RORP028",222,0)
 .... K RORERR
"RTN","RORP028",223,0)
 .... S RORERR(1)="     New entry for "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP028",224,0)
 .... S RORERR(2)="     and was not added to the ROR LIST ITEM file."
"RTN","RORP028",225,0)
 .... S RORERR(3)="     (Data = "_RORDATA_")"
"RTN","RORP028",226,0)
 .... S RORERR(4)="     Please report this error to your CCR contact:"
"RTN","RORP028",227,0)
 .... S RORERR(5)=""
"RTN","RORP028",228,0)
 .... S Z=0,CT=5 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",6)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP028",229,0)
 .... S CT=CT+1,RORERR(CT)=" "
"RTN","RORP028",230,0)
 .... D MES^XPDUTL(.RORERR)
"RTN","RORP028",231,0)
 Q
"RTN","RORP028",232,0)
 ;
"RTN","RORP028",233,0)
 ; Sets the DIR array from the post-install question #3 (suspension start time)
"RTN","RORP028",234,0)
POSQ3(DIR) ;
"RTN","RORP028",235,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP028",236,0)
 Q:'$D(DIR)
"RTN","RORP028",237,0)
 D BLD^DIALOG(7980000.011,,,"DIR(""?"")","S")
"RTN","RORP028",238,0)
 Q
"RTN","RORP028",239,0)
 ;
"RTN","RORP028",240,0)
 ; Sets the DIR array from the post-install question #4  (suspension end time)
"RTN","RORP028",241,0)
POSQ4(DIR) ;
"RTN","RORP028",242,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP028",243,0)
 Q:'$D(DIR)
"RTN","RORP028",244,0)
 S DIR("A")="Suspension end time"
"RTN","RORP028",245,0)
 ;  Make sure end time entered is later than end time start
"RTN","RORP028",246,0)
 S DIR(0)="D^::R^K:(Y#1)'>(XPDQUES(""POSQ3"")#1) X"
"RTN","RORP028",247,0)
 D BLD^DIALOG(7980000.012,,,"DIR(""?"")","S")
"RTN","RORP028",248,0)
 Q
"RTN","RORP028",249,0)
 ;
"RTN","RORP028",250,0)
 ; Updates the DIR array from the post-install question #5  (schedule time for ROR INITIALIZE task)
"RTN","RORP028",251,0)
POSQ5(DIR) ;
"RTN","RORP028",252,0)
 Q:'$D(DIR)
"RTN","RORP028",253,0)
 N ROREDT
"RTN","RORP028",254,0)
 ; Set earliest date to schedule to 15 minutes from 'NOW'
"RTN","RORP028",255,0)
 S ROREDT=$$FMADD^XLFDT($$NOW^XLFDT(),,,15)
"RTN","RORP028",256,0)
 ; Strip seconds
"RTN","RORP028",257,0)
 S ROREDT=$P(ROREDT,".",1)_"."_$E($P(ROREDT,".",2),1,4)
"RTN","RORP028",258,0)
 ;  Make sure future date/time is entered
"RTN","RORP028",259,0)
 S $P(DIR(0),U,3)=("K:Y<"_ROREDT_" X")
"RTN","RORP028",260,0)
 S DIR("B")=$$FMTE^XLFDT(ROREDT,2)
"RTN","RORP028",261,0)
 Q
"RTN","RORP028",262,0)
 ;
"RTN","RORUTL11")
0^15^B4484027^B4300869
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ; 03 Dec 2015  1:56 PM
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17,18,20,19,21,22,24,27,25,26,28**;Feb 17, 2006;Build 66
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;
"RTN","RORUTL11",15,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",16,0)
 ;
"RTN","RORUTL11",17,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version 
"RTN","RORUTL11",18,0)
 ;
"RTN","RORUTL11",19,0)
 ;ROR*1.5*18   MAY 2012    C RAY        Updated version 
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ;ROR*1.5*20   DEC 2012    C RAY        Updated version
"RTN","RORUTL11",22,0)
 ;
"RTN","RORUTL11",23,0)
 ;ROR*1.5*19   APR 2012    K GUPTA      Updated version
"RTN","RORUTL11",24,0)
 ;                                    
"RTN","RORUTL11",25,0)
 ;ROR*1.5*21   AUG 2013    T KOPP       Updated version
"RTN","RORUTL11",26,0)
 ;
"RTN","RORUTL11",27,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Updated version 
"RTN","RORUTL11",28,0)
 ;
"RTN","RORUTL11",29,0)
 ;ROR*1.5*24   DEC 2014    T KOPP       Updated version       
"RTN","RORUTL11",30,0)
 ;                       
"RTN","RORUTL11",31,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Updated version
"RTN","RORUTL11",32,0)
 ;
"RTN","RORUTL11",33,0)
 ;ROR*1.5*25   MAR 2015    T KOPP       Updated version
"RTN","RORUTL11",34,0)
 ;                       
"RTN","RORUTL11",35,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Updated version
"RTN","RORUTL11",36,0)
 ;
"RTN","RORUTL11",37,0)
 ;ROR*1.5*28   APR 2016    T KOPP       Updated version
"RTN","RORUTL11",38,0)
 ;******************************************************************************
"RTN","RORUTL11",39,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",40,0)
 ;
"RTN","RORUTL11",41,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",42,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",43,0)
 ;         
"RTN","RORUTL11",44,0)
 ;******************************************************************************
"RTN","RORUTL11",45,0)
 Q
"RTN","RORUTL11",46,0)
 ;
"RTN","RORUTL11",47,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",48,0)
 ;
"RTN","RORUTL11",49,0)
 ; Return Values:
"RTN","RORUTL11",50,0)
 ;       <0  Error code
"RTN","RORUTL11",51,0)
 ;        0  Ok
"RTN","RORUTL11",52,0)
 ;
"RTN","RORUTL11",53,0)
RNDXACL() ;
"RTN","RORUTL11",54,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",55,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",56,0)
 S REGIEN=0
"RTN","RORUTL11",57,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",58,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",59,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",60,0)
 Q 0
"RTN","RORUTL11",61,0)
 ;
"RTN","RORUTL11",62,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",63,0)
 ;
"RTN","RORUTL11",64,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",65,0)
 ;
"RTN","RORUTL11",66,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",67,0)
 ;
"RTN","RORUTL11",68,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",69,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",70,0)
 ;                 I  IRM Only
"RTN","RORUTL11",71,0)
 ;
"RTN","RORUTL11",72,0)
 ; Return Values:
"RTN","RORUTL11",73,0)
 ;       <0  Error code
"RTN","RORUTL11",74,0)
 ;        0  Ok
"RTN","RORUTL11",75,0)
 ;       >0  Access denied
"RTN","RORUTL11",76,0)
 ;
"RTN","RORUTL11",77,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",78,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",79,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",80,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",81,0)
 ;---
"RTN","RORUTL11",82,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",83,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",84,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",85,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",86,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",87,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",88,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",89,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",90,0)
 . S ACCESS=1
"RTN","RORUTL11",91,0)
 ;---
"RTN","RORUTL11",92,0)
 D ACVIOLTN^RORLOG(-91,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",93,0)
 Q 1
"RTN","RORUTL11",94,0)
 ;
"RTN","RORUTL11",95,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",96,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",97,0)
 ;
"RTN","RORUTL11",98,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",99,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",100,0)
 ;been installed yet.
"RTN","RORUTL11",101,0)
 ;
"RTN","RORUTL11",102,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",103,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",104,0)
 ;
"RTN","RORUTL11",105,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",106,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",107,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",108,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",109,0)
 ;
"RTN","RORUTL11",110,0)
VERSRV(VAL) ;
"RTN","RORUTL11",111,0)
 S VAL="1.5.28"
"RTN","RORUTL11",112,0)
 Q
"RTN","RORUTL14")
0^21^B10594346^B10147900
"RTN","RORUTL14",1,0)
RORUTL14 ;HCIOFO/BH,SG - PHARMACY DATA SEARCH ; 12/13/05 2:16pm
"RTN","RORUTL14",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**28**;Feb 17, 2006;Build 66
"RTN","RORUTL14",3,0)
 ;
"RTN","RORUTL14",4,0)
 ;   
"RTN","RORUTL14",5,0)
 ;******************************************************************************
"RTN","RORUTL14",6,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL14",7,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL14",8,0)
 ;ROR*1.5*28   APR  2016   T KOPP       Document DAA/in house parameter.
"RTN","RORUTL14",9,0)
 ;******************************************************************************
"RTN","RORUTL14",10,0)
 Q
"RTN","RORUTL14",11,0)
 ;
"RTN","RORUTL14",12,0)
 ;***** SEARCHES THE PHARMACY DATA
"RTN","RORUTL14",13,0)
 ;
"RTN","RORUTL14",14,0)
 ; PATIEN        IEN of the patient (DFN)
"RTN","RORUTL14",15,0)
 ;
"RTN","RORUTL14",16,0)
 ; ROR8RXS       Closed root of a variable, which contains a list
"RTN","RORUTL14",17,0)
 ;               of drugs of interest (in the same format as
"RTN","RORUTL14",18,0)
 ;               the list returned by the $$DRUGLIST^RORUTL16).
"RTN","RORUTL14",19,0)
 ;
"RTN","RORUTL14",20,0)
 ;               If the "*" is passed via this parameter then all
"RTN","RORUTL14",21,0)
 ;               pharmacy orders tests are considered.
"RTN","RORUTL14",22,0)
 ;
"RTN","RORUTL14",23,0)
 ;               If this parameter has a pure numeric value then
"RTN","RORUTL14",24,0)
 ;               it is considered as registry IEN and the default
"RTN","RORUTL14",25,0)
 ;               list of registry specific drugs is automatically
"RTN","RORUTL14",26,0)
 ;               compiled by the $$DRUGLIST^RORUTL16 function.
"RTN","RORUTL14",27,0)
 ;
"RTN","RORUTL14",28,0)
 ; [[.]ROR8DST]  Closed root of an array where the data will be
"RTN","RORUTL14",29,0)
 ;               returned (the ^TMP("RORUTL14",$J), by default).
"RTN","RORUTL14",30,0)
 ;               The data will be stored into the destination
"RTN","RORUTL14",31,0)
 ;               array in following format:
"RTN","RORUTL14",32,0)
 ;
"RTN","RORUTL14",33,0)
 ;                 @ROR8DST@(i,  Additional drug information
"RTN","RORUTL14",34,0)
 ;                                 ^01: Order number
"RTN","RORUTL14",35,0)
 ;                                 ^02: Flags describing the order:
"RTN","RORUTL14",36,0)
 ;                                        I  Inpatient dose
"RTN","RORUTL14",37,0)
 ;                                        O  Outpatient fill
"RTN","RORUTL14",38,0)
 ;                                        P  Pending
"RTN","RORUTL14",39,0)
 ;                                        V  IV
"RTN","RORUTL14",40,0)
 ;                                 ^03: Generic drug IEN (file #50.6)
"RTN","RORUTL14",41,0)
 ;                                 ^04: Generic drug name
"RTN","RORUTL14",42,0)
 ;                                 ^05: Drug class IEN (file #50.605)
"RTN","RORUTL14",43,0)
 ;                                 ^06: Drug class code
"RTN","RORUTL14",44,0)
 ;                   0)          Detailed information on pharmacy
"RTN","RORUTL14",45,0)
 ;                   "RXN",0)    order loaded by the OEL^PSOORRL
"RTN","RORUTL14",46,0)
 ;                   ...
"RTN","RORUTL14",47,0)
 ;
"RTN","RORUTL14",48,0)
 ;               Example:
"RTN","RORUTL14",49,0)
 ;                 S RORDST=$NA(^TMP("RORTMP",$J))
"RTN","RORUTL14",50,0)
 ;                 S RC=$$RXSEARCH^RORUTL14(DFN,REGIEN,RORDST)
"RTN","RORUTL14",51,0)
 ;
"RTN","RORUTL14",52,0)
 ;               If this parameter is passed by reference, you can
"RTN","RORUTL14",53,0)
 ;               provide a full name ($$TAG^ROUTINE) of the callback
"RTN","RORUTL14",54,0)
 ;               function, which will process and store the results,
"RTN","RORUTL14",55,0)
 ;               as the value of the "RORCB" node.
"RTN","RORUTL14",56,0)
 ;
"RTN","RORUTL14",57,0)
 ;               Any additional nodes created in this variable will
"RTN","RORUTL14",58,0)
 ;               be accessible in the callback function. The following
"RTN","RORUTL14",59,0)
 ;               nodes are created automatically:
"RTN","RORUTL14",60,0)
 ;
"RTN","RORUTL14",61,0)
 ;                 "RORDFN"      IEN of the registry patient (DFN)
"RTN","RORUTL14",62,0)
 ;
"RTN","RORUTL14",63,0)
 ;                 "ROREDT"      End date
"RTN","RORUTL14",64,0)
 ;
"RTN","RORUTL14",65,0)
 ;                 "RORFLAGS"    Value of parameter of the same name
"RTN","RORUTL14",66,0)
 ;
"RTN","RORUTL14",67,0)
 ;                 "RORSDT"      Start date
"RTN","RORUTL14",68,0)
 ;                              
"RTN","RORUTL14",69,0)
 ;                 "RORXGEN"     Generic drug
"RTN","RORUTL14",70,0)
 ;                                 ^01: Drug IEN in file #50.6
"RTN","RORUTL14",71,0)
 ;                                 ^02: Generic drug name
"RTN","RORUTL14",72,0)
 ;
"RTN","RORUTL14",73,0)
 ;                 "RORXVCL"     VA Drug class
"RTN","RORUTL14",74,0)
 ;                                 ^01: Class IEN in file #50.605
"RTN","RORUTL14",75,0)
 ;                                 ^02: Class code
"RTN","RORUTL14",76,0)
 ;
"RTN","RORUTL14",77,0)
 ;               The callback function must accept 5 parameters:
"RTN","RORUTL14",78,0)
 ;
"RTN","RORUTL14",79,0)
 ;                 .ROR8DST      Reference to the ROR8DST parameter
"RTN","RORUTL14",80,0)
 ;                               passed into the $$RXSEARCH function.
"RTN","RORUTL14",81,0)
 ;
"RTN","RORUTL14",82,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORUTL14",83,0)
 ;
"RTN","RORUTL14",84,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORUTL14",85,0)
 ;                               processed.
"RTN","RORUTL14",86,0)
 ;
"RTN","RORUTL14",87,0)
 ;                 DRUG          Dispensed drug
"RTN","RORUTL14",88,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORUTL14",89,0)
 ;                                 ^02: Drug name
"RTN","RORUTL14",90,0)
 ;
"RTN","RORUTL14",91,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORUTL14",92,0)
 ;                               drugs or start date for inpatient)
"RTN","RORUTL14",93,0)
 ;
"RTN","RORUTL14",94,0)
 ;               The ^TMP("PS",$J) global node contains the data
"RTN","RORUTL14",95,0)
 ;               returned by the OEL^PSOORRL procedure (see the
"RTN","RORUTL14",96,0)
 ;               DBIA #2400 for details).
"RTN","RORUTL14",97,0)
 ;
"RTN","RORUTL14",98,0)
 ;               The callback function is called for each additive
"RTN","RORUTL14",99,0)
 ;               included in the IV order; the ^TMP("PS",$J) is
"RTN","RORUTL14",100,0)
 ;               loaded once and stays the same for all of them.
"RTN","RORUTL14",101,0)
 ;
"RTN","RORUTL14",102,0)
 ;               The function should return the following values:
"RTN","RORUTL14",103,0)
 ;
"RTN","RORUTL14",104,0)
 ;                 <0  Error code (the search will be aborted)
"RTN","RORUTL14",105,0)
 ;                  0  Ok
"RTN","RORUTL14",106,0)
 ;                  1  Skip this pharmacy order
"RTN","RORUTL14",107,0)
 ;                  2  Skip this and all remaining orders
"RTN","RORUTL14",108,0)
 ;
"RTN","RORUTL14",109,0)
 ;               Example:
"RTN","RORUTL14",110,0)
 ;                 S RORDST=$NA(^TMP("RORBUF",$J))
"RTN","RORUTL14",111,0)
 ;                 S RORDST("RORPTR")=+$O(@RORDST@(""),-1)
"RTN","RORUTL14",112,0)
 ;                 S RORDST("RORCB")="$$RXCB^RORUT999"
"RTN","RORUTL14",113,0)
 ;                 S RC=$$RXSEARCH^RORUTL14(DFN,REGIEN,.RORDST)
"RTN","RORUTL14",114,0)
 ;
"RTN","RORUTL14",115,0)
 ; [RORFLAGS]    Flags to control processing:
"RTN","RORUTL14",116,0)
 ;                 E  Load external values for additional fields
"RTN","RORUTL14",117,0)
 ;                    stored into the output array or passed to
"RTN","RORUTL14",118,0)
 ;                    the callback function. Affected fields
"RTN","RORUTL14",119,0)
 ;                    have the (E) marker.
"RTN","RORUTL14",120,0)
 ;                 I  Include inpatient doses
"RTN","RORUTL14",121,0)
 ;                 O  Include outpatient fills
"RTN","RORUTL14",122,0)
 ;                 P  Include pending orders
"RTN","RORUTL14",123,0)
 ;                 V  Include IV
"RTN","RORUTL14",124,0)
 ;                 C  Include only DAA Drug (remarks contains CHOICE)
"RTN","RORUTL14",125,0)
 ;                 H  Include only In-house drug (remarks doesn't contain CHOICE)
"RTN","RORUTL14",126,0)
 ;
"RTN","RORUTL14",127,0)
 ;               If this parameter has no value ($G(RORFLAGS)="")
"RTN","RORUTL14",128,0)
 ;               then the default set of flags is used: "IO".
"RTN","RORUTL14",129,0)
 ;
"RTN","RORUTL14",130,0)
 ; RORSDT        Start date (FileMan)
"RTN","RORUTL14",131,0)
 ; [ROREDT]      End date   (FileMan)
"RTN","RORUTL14",132,0)
 ;
"RTN","RORUTL14",133,0)
 ;               The search is performed exactly between provided
"RTN","RORUTL14",134,0)
 ;               boundaries (the time parts are considered).
"RTN","RORUTL14",135,0)
 ;
"RTN","RORUTL14",136,0)
 ; The following global nodes are used by the function:
"RTN","RORUTL14",137,0)
 ;
"RTN","RORUTL14",138,0)
 ; ^TMP("PS",$J)         The OCL^PSOORRL and OEL^PSOORRL procedures
"RTN","RORUTL14",139,0)
 ;                       return the results into this node.
"RTN","RORUTL14",140,0)
 ;
"RTN","RORUTL14",141,0)
 ; ^TMP("RORUTL14",$J)   If the name of the destination array is
"RTN","RORUTL14",142,0)
 ;                       not provided via the ROR8DST parameter
"RTN","RORUTL14",143,0)
 ;                       then the $$RXSEARCH returns the results
"RTN","RORUTL14",144,0)
 ;                       under this node.
"RTN","RORUTL14",145,0)
 ;
"RTN","RORUTL14",146,0)
 ; ^TMP("RORUTL14L",$J)  If the ROR8RXS parameter is undefined
"RTN","RORUTL14",147,0)
 ;                       then a temporary list of registry specific
"RTN","RORUTL14",148,0)
 ;                       drugs is compiled under this node.
"RTN","RORUTL14",149,0)
 ;
"RTN","RORUTL14",150,0)
 ; Return Values:
"RTN","RORUTL14",151,0)
 ;       <0  Error code
"RTN","RORUTL14",152,0)
 ;        0  No ordes have been found
"RTN","RORUTL14",153,0)
 ;       >0  Number of pharmacy orders
"RTN","RORUTL14",154,0)
 ;
"RTN","RORUTL14",155,0)
RXSEARCH(PATIEN,ROR8RXS,ROR8DST,RORFLAGS,RORSDT,ROREDT) ;
"RTN","RORUTL14",156,0)
 N RC,ROR8SET,RORXLST,TMP
"RTN","RORUTL14",157,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORUTL14",$J))
"RTN","RORUTL14",158,0)
 S RORFLAGS=$S($G(RORFLAGS)'="":RORFLAGS,1:"IO")
"RTN","RORUTL14",159,0)
 Q:$TR(RORFLAGS,"IO")=RORFLAGS 0  ; Neither Inpatient nor Outpatient
"RTN","RORUTL14",160,0)
 Q:$G(ROR8RXS)="" 0               ; No drugs to search for
"RTN","RORUTL14",161,0)
 ;---
"RTN","RORUTL14",162,0)
 S:$G(ROREDT)'>0 ROREDT=DT
"RTN","RORUTL14",163,0)
 S RORXLST=$$ALLOC^RORTMP(),RC=0
"RTN","RORUTL14",164,0)
 ;
"RTN","RORUTL14",165,0)
 D
"RTN","RORUTL14",166,0)
 . ;--- Prepare the list of drugs of interest
"RTN","RORUTL14",167,0)
 . I (+ROR8RXS)=ROR8RXS  D  Q:RC'>0
"RTN","RORUTL14",168,0)
 . . S TMP=ROR8RXS,ROR8RXS=$$ALLOC^RORTMP()
"RTN","RORUTL14",169,0)
 . . S RC=$$DRUGLIST^RORUTL16(ROR8RXS,TMP)
"RTN","RORUTL14",170,0)
 . I ROR8RXS'="*",$D(@ROR8RXS)<10  S RC=0  Q
"RTN","RORUTL14",171,0)
 . ;--- Preselect pharmacy orders
"RTN","RORUTL14",172,0)
 . S RC=$$QUERY^RORUTL15(PATIEN,RORFLAGS,RORSDT,ROREDT,RORXLST)
"RTN","RORUTL14",173,0)
 . Q:RC'>0
"RTN","RORUTL14",174,0)
 . ;--- Process selected orders
"RTN","RORUTL14",175,0)
 . S RC=$$PROCESS^RORUTL15(PATIEN,RORFLAGS,RORXLST)
"RTN","RORUTL14",176,0)
 . Q:RC'>0
"RTN","RORUTL14",177,0)
 ;
"RTN","RORUTL14",178,0)
 ;--- Cleanup
"RTN","RORUTL14",179,0)
 D POP^RORTMP(RORXLST)
"RTN","RORUTL14",180,0)
 Q RC
"RTN","RORUTL15")
0^16^B63032078^B58131600
"RTN","RORUTL15",1,0)
RORUTL15 ;HCIOFO/BH,SG - PHARMACY DATA SEARCH (TOOLS) ; 04 Apr 2016  4:57 PM
"RTN","RORUTL15",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,26,28**;Feb 17, 2006;Build 66
"RTN","RORUTL15",3,0)
 ;
"RTN","RORUTL15",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL15",5,0)
 ;
"RTN","RORUTL15",6,0)
 ; #2400         OCL^PSOORRL and OEL^PSOORRL (controlled)
"RTN","RORUTL15",7,0)
 ; #4533         ARWS^PSS50 (supported)
"RTN","RORUTL15",8,0)
 ; #4543         IEN^PSN50P65 (supported)
"RTN","RORUTL15",9,0)
 ; #4549         ZERO^PSS52P6 (supported)
"RTN","RORUTL15",10,0)
 ; #4826         PSS436^PSS55 (supported)
"RTN","RORUTL15",11,0)
 ; #10104        UP^XLFSTR (supported)
"RTN","RORUTL15",12,0)
 ;
"RTN","RORUTL15",13,0)
 ;******************************************************************************
"RTN","RORUTL15",14,0)
 ;******************************************************************************
"RTN","RORUTL15",15,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL15",16,0)
 ;        
"RTN","RORUTL15",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL15",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL15",19,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Patient Med History Report: retrieve 
"RTN","RORUTL15",20,0)
 ;                                      #refills remaining and add to the 
"RTN","RORUTL15",21,0)
 ;                                      'callback' function call
"RTN","RORUTL15",22,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORUTL15",23,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORUTL15",24,0)
 ;                                      below is referring to path 13.
"RTN","RORUTL15",25,0)
 ;
"RTN","RORUTL15",26,0)
 ;ROR*1.5*26   JUN 2015    T KOPP       Callback function for SVR screening
"RTN","RORUTL15",27,0)
 ;                                      does not require the # of refills as a
"RTN","RORUTL15",28,0)
 ;                                      parameter for the Patient Med History
"RTN","RORUTL15",29,0)
 ;                                      Report, so a check is made for callback
"RTN","RORUTL15",30,0)
 ;                                      entry point RXOCB to prevent adding it.
"RTN","RORUTL15",31,0)
 ;
"RTN","RORUTL15",32,0)
 ;ROR*1.5*28   APR  2016   T KOPP       Check for DAA drug/in house param
"RTN","RORUTL15",33,0)
 ;******************************************************************************
"RTN","RORUTL15",34,0)
 ;******************************************************************************
"RTN","RORUTL15",35,0)
 Q
"RTN","RORUTL15",36,0)
 ;
"RTN","RORUTL15",37,0)
 ;***** DOUBLE-CHECKS THE OUTPATIENT RX (ORDER, REFILLS AND PARTIALS)
"RTN","RORUTL15",38,0)
 ;
"RTN","RORUTL15",39,0)
 ; STDT          Start Date (FileMan)
"RTN","RORUTL15",40,0)
 ; ENDT          End Date   (FileMan)
"RTN","RORUTL15",41,0)
 ;
"RTN","RORUTL15",42,0)
 ; [.NREF]       Number of refills is returned via this parameter
"RTN","RORUTL15",43,0)
 ;
"RTN","RORUTL15",44,0)
 ; [.NPAR]       Nubmer of partials is returned via this parameter
"RTN","RORUTL15",45,0)
 ;
"RTN","RORUTL15",46,0)
 ; The ^TMP("PS",$J) node must be populated by the OEL^PSOORRL
"RTN","RORUTL15",47,0)
 ; before calling this function.
"RTN","RORUTL15",48,0)
 ;
"RTN","RORUTL15",49,0)
 ; Return Values:
"RTN","RORUTL15",50,0)
 ;        0  Ok
"RTN","RORUTL15",51,0)
 ;        1  Skip the order
"RTN","RORUTL15",52,0)
 ;
"RTN","RORUTL15",53,0)
DTCHECK(STDT,ENDT,NREF,NPAR) ;
"RTN","RORUTL15",54,0)
 N IRP,RXDT,SKIP
"RTN","RORUTL15",55,0)
 S RXDT=+$P($G(^TMP("PS",$J,"RXN",0)),U,6),(NREF,NPAR)=0
"RTN","RORUTL15",56,0)
 S SKIP=(RXDT<STDT)!(RXDT'<ENDT)
"RTN","RORUTL15",57,0)
 ;--- Refills
"RTN","RORUTL15",58,0)
 S IRP=0
"RTN","RORUTL15",59,0)
 F  S IRP=$O(^TMP("PS",$J,"REF",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",60,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"REF",IRP,0)),U)
"RTN","RORUTL15",61,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NREF=NREF+1  Q
"RTN","RORUTL15",62,0)
 . K ^TMP("PS",$J,"REF",IRP)
"RTN","RORUTL15",63,0)
 ;--- Partials
"RTN","RORUTL15",64,0)
 S IRP=0
"RTN","RORUTL15",65,0)
 F  S IRP=$O(^TMP("PS",$J,"PAR",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",66,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"PAR",IRP,0)),U)
"RTN","RORUTL15",67,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NPAR=NPAR+1  Q
"RTN","RORUTL15",68,0)
 . K ^TMP("PS",$J,"PAR",IRP)
"RTN","RORUTL15",69,0)
 ;---
"RTN","RORUTL15",70,0)
 Q SKIP
"RTN","RORUTL15",71,0)
 ;
"RTN","RORUTL15",72,0)
 ;***** PROCESSES THE LIST OF PRESELECTED PHARMACY ORDERS
"RTN","RORUTL15",73,0)
 ;
"RTN","RORUTL15",74,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",75,0)
 ;
"RTN","RORUTL15",76,0)
 ; RORFLAGS      Flags to control processing
"RTN","RORUTL15",77,0)
 ;
"RTN","RORUTL15",78,0)
 ; ROR8LST       Closed root of the list of preselected orders
"RTN","RORUTL15",79,0)
 ;
"RTN","RORUTL15",80,0)
 ; Return Values:
"RTN","RORUTL15",81,0)
 ;       <0  Error code
"RTN","RORUTL15",82,0)
 ;        0  No orders have been found
"RTN","RORUTL15",83,0)
 ;       >0  Number of orders
"RTN","RORUTL15",84,0)
 ;
"RTN","RORUTL15",85,0)
PROCESS(PTIEN,RORFLAGS,ROR8LST) ;
"RTN","RORUTL15",86,0)
 N DRUGIEN,IRX,IVM,LOADEXT,ORDDATE,ORDER,ORDIEN,ORDFLG,RC,ROR8SET,RORLST,RORTMP,RORTS,RORXCNT,TMP,NUMREF
"RTN","RORUTL15",87,0)
 S LOADEXT=(RORFLAGS["E")
"RTN","RORUTL15",88,0)
 S (RC,RORXCNT)=0
"RTN","RORUTL15",89,0)
 S RORTMP=$$ALLOC^RORTMP(.RORTS)
"RTN","RORUTL15",90,0)
 ;
"RTN","RORUTL15",91,0)
 ;=== Determine the storage method (default or callback)
"RTN","RORUTL15",92,0)
 I $G(ROR8DST("RORCB"))?2"$"1.8UN1"^"1.8UN  D
"RTN","RORUTL15",93,0)
 . ;standard callback setup
"RTN","RORUTL15",94,0)
 . S ROR8SET="S RC="_ROR8DST("RORCB")_"(.ROR8DST,ORDER"
"RTN","RORUTL15",95,0)
 . S ROR8SET=ROR8SET_",ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE)"
"RTN","RORUTL15",96,0)
 . ;Patch 11/13: Variable 'RORX011' is set in routine RORX011 for the
"RTN","RORUTL15",97,0)
 . ;Patient Medications History report.  If set, add # refills
"RTN","RORUTL15",98,0)
 . ;remaining (NUMREF) to the callback parameter list.
"RTN","RORUTL15",99,0)
 . I $G(RORX011),$G(ROR8DST("RORCB"))'["RXOCB" S ROR8SET=$E(ROR8SET,1,$L(ROR8SET)-1)_",$G(NUMREF))"
"RTN","RORUTL15",100,0)
 . ;---
"RTN","RORUTL15",101,0)
 . S ROR8DST("RORDFN")=PTIEN
"RTN","RORUTL15",102,0)
 . S ROR8DST("ROREDT")=ROREDT
"RTN","RORUTL15",103,0)
 . S ROR8DST("RORFLAGS")=RORFLAGS
"RTN","RORUTL15",104,0)
 . S ROR8DST("RORSDT")=RORSDT
"RTN","RORUTL15",105,0)
 E  S ROR8SET=""  K @ROR8DST
"RTN","RORUTL15",106,0)
 ;
"RTN","RORUTL15",107,0)
 ;=== Process the list of preselected orders
"RTN","RORUTL15",108,0)
 S (IRX,RC)=0
"RTN","RORUTL15",109,0)
 F  S IRX=$O(@ROR8LST@(IRX))  Q:'IRX  D  Q:RC
"RTN","RORUTL15",110,0)
 . N REMARK,CHOICE
"RTN","RORUTL15",111,0)
 . S ORDFLG=$P(@ROR8LST@(IRX),U)
"RTN","RORUTL15",112,0)
 . S TMP=@ROR8LST@(IRX,0)
"RTN","RORUTL15",113,0)
 . S ORDER=$P(TMP,U),ORDDATE=$P(TMP,U,15)
"RTN","RORUTL15",114,0)
 . ;Patch 11/13: get #refills remaining for Patient Medication History report:
"RTN","RORUTL15",115,0)
 . I $G(RORX011) S NUMREF=$P(TMP,U,5)
"RTN","RORUTL15",116,0)
 . ;--- Get the order details
"RTN","RORUTL15",117,0)
 . K ^TMP("PS",$J)
"RTN","RORUTL15",118,0)
 . D OEL^PSOORRL(PTIEN,ORDER)
"RTN","RORUTL15",119,0)
 . Q:$D(^TMP("PS",$J))<10
"RTN","RORUTL15",120,0)
 . ; Check order remark for "CHOICE"
"RTN","RORUTL15",121,0)
 . I RORFLAGS["C"!(RORFLAGS["H") D  Q:$S(RORFLAGS["C":'CHOICE,RORFLAGS["H":CHOICE,1:0)
"RTN","RORUTL15",122,0)
 . . S REMARK=$$UP^XLFSTR($P($G(^TMP("PS",$J,"RXN",0)),U,4))
"RTN","RORUTL15",123,0)
 . . S CHOICE=(REMARK["CHOICE") ; true if DAA drug, false if in house
"RTN","RORUTL15",124,0)
 . ;=== Inpatient and Outpatient Medications
"RTN","RORUTL15",125,0)
 . I ORDFLG'["V"  D  Q
"RTN","RORUTL15",126,0)
 . . ;--- Double-check the dates for outpatient orders
"RTN","RORUTL15",127,0)
 . . I ORDFLG["O"  Q:$$DTCHECK(RORSDT,ROREDT)
"RTN","RORUTL15",128,0)
 . . ;--- Get the drug IEN in the DRUG file (#50)
"RTN","RORUTL15",129,0)
 . . S TMP=$G(^TMP("PS",$J,"DD",1,0)),DRUGIEN=+$P(TMP,U,3)
"RTN","RORUTL15",130,0)
 . . I DRUGIEN'>0  S DRUGIEN=+$P(TMP,U)  Q:DRUGIEN'>0
"RTN","RORUTL15",131,0)
 . . ;--- Process the order
"RTN","RORUTL15",132,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",133,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",134,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",135,0)
 . ;=== IV Medications
"RTN","RORUTL15",136,0)
 . S RORLST=$$ALLOC^RORTMP(.TMP),ORDIEN=+ORDER
"RTN","RORUTL15",137,0)
 . D
"RTN","RORUTL15",138,0)
 . . N IEN,ORDER  ; Workaround for the bug in the API
"RTN","RORUTL15",139,0)
 . . D PSS436^PSS55(PTIEN,ORDIEN,TMP)
"RTN","RORUTL15",140,0)
 . I $G(@RORLST@(0))'>0  D FREE^RORTMP(RORLST)  Q
"RTN","RORUTL15",141,0)
 . ;--- Process the additives
"RTN","RORUTL15",142,0)
 . S IVM=0
"RTN","RORUTL15",143,0)
 . F  S IVM=$O(@RORLST@(ORDIEN,"ADD",IVM))  Q:IVM'>0  D  Q:RC
"RTN","RORUTL15",144,0)
 . . ;--- IEN in the IV ADDITIVES file (#52.6)
"RTN","RORUTL15",145,0)
 . . S DRUGIEN=+$P($G(@RORLST@(ORDIEN,"ADD",IVM,.01)),U)
"RTN","RORUTL15",146,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",147,0)
 . . ;--- IEN in the DRUG file (#50)
"RTN","RORUTL15",148,0)
 . . D ZERO^PSS52P6(DRUGIEN,,,RORTS)
"RTN","RORUTL15",149,0)
 . . Q:$G(@RORTMP@(0))'>0
"RTN","RORUTL15",150,0)
 . . S DRUGIEN=+$P($G(@RORTMP@(DRUGIEN,1)),U)
"RTN","RORUTL15",151,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",152,0)
 . . ;--- Process the medication
"RTN","RORUTL15",153,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",154,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",155,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",156,0)
 . ;---
"RTN","RORUTL15",157,0)
 . D FREE^RORTMP(RORLST)
"RTN","RORUTL15",158,0)
 ;
"RTN","RORUTL15",159,0)
 ;===
"RTN","RORUTL15",160,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORUTL15",161,0)
 Q $S(RC<0:RC,1:RORXCNT)
"RTN","RORUTL15",162,0)
 ;
"RTN","RORUTL15",163,0)
 ;***** PROCESS THE MEDICATION (internal)
"RTN","RORUTL15",164,0)
 ;
"RTN","RORUTL15",165,0)
 ; DRUGIEN       IEN of the medication in the DRUG file (#50)
"RTN","RORUTL15",166,0)
 ;
"RTN","RORUTL15",167,0)
 ; The ROR8DST, ROR8RXS, ROR8SET, RORTMP, and RORTS variables
"RTN","RORUTL15",168,0)
 ; must be defined before calling this function.
"RTN","RORUTL15",169,0)
 ;
"RTN","RORUTL15",170,0)
 ; Return Values:
"RTN","RORUTL15",171,0)
 ;       <0  Error code
"RTN","RORUTL15",172,0)
 ;        0  Ok
"RTN","RORUTL15",173,0)
 ;        1  Skip this medication
"RTN","RORUTL15",174,0)
 ;        2  Skip this and all remaining medications
"RTN","RORUTL15",175,0)
 ;
"RTN","RORUTL15",176,0)
PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE) ;
"RTN","RORUTL15",177,0)
 N DRUGNAME,RC,ROR8BUF,SKIP,TMP
"RTN","RORUTL15",178,0)
 S RC=0
"RTN","RORUTL15",179,0)
 ;=== Load some drug data
"RTN","RORUTL15",180,0)
 D ARWS^PSS50(DRUGIEN,,RORTS)  K ROR8BUF
"RTN","RORUTL15",181,0)
 F TMP=2,20,25  S ROR8BUF(TMP)=$G(@RORTMP@(DRUGIEN,TMP))
"RTN","RORUTL15",182,0)
 S DRUGNAME=$G(@RORTMP@(DRUGIEN,.01))
"RTN","RORUTL15",183,0)
 S:DRUGNAME="" DRUGNAME="Unknown (IEN="_DRUGIEN_")"
"RTN","RORUTL15",184,0)
 K @RORTMP
"RTN","RORUTL15",185,0)
 ;--- Generic Drug
"RTN","RORUTL15",186,0)
 S ROR8DST("RORXGEN")=ROR8BUF(20)
"RTN","RORUTL15",187,0)
 I $P(ROR8BUF(20),U,2)=""  D  S $P(ROR8DST("RORXGEN"),U,2)=TMP
"RTN","RORUTL15",188,0)
 . S TMP="Unknown ("_(+ROR8BUF(20))_")"
"RTN","RORUTL15",189,0)
 ;--- VA Drug Class
"RTN","RORUTL15",190,0)
 S ROR8DST("RORXVCL")=""
"RTN","RORUTL15",191,0)
 D:ROR8BUF(2)'=""
"RTN","RORUTL15",192,0)
 . ;--- If the "national" drug class is the same, use its IEN
"RTN","RORUTL15",193,0)
 . I $P(ROR8BUF(25),U,2)=ROR8BUF(2)  D  Q
"RTN","RORUTL15",194,0)
 . . S ROR8DST("RORXVCL")=$P(ROR8BUF(25),U,1,2)
"RTN","RORUTL15",195,0)
 . ;--- Get the Drug Class IEN
"RTN","RORUTL15",196,0)
 . D IEN^PSN50P65(,ROR8BUF(2),RORTS)
"RTN","RORUTL15",197,0)
 . S TMP=+$G(@RORTMP@(0))
"RTN","RORUTL15",198,0)
 . S:TMP=1 ROR8DST("RORXVCL")=+$O(@RORTMP@(0))_U_ROR8BUF(2)
"RTN","RORUTL15",199,0)
 . K @RORTMP
"RTN","RORUTL15",200,0)
 ;
"RTN","RORUTL15",201,0)
 ;=== Check if the drug should be skipped
"RTN","RORUTL15",202,0)
 I ROR8RXS'="*"  S SKIP=0  D  Q:SKIP 1
"RTN","RORUTL15",203,0)
 . Q:$D(@ROR8RXS@(DRUGIEN))
"RTN","RORUTL15",204,0)
 . I $D(@ROR8RXS@("C"))>1  Q:$D(@ROR8RXS@("C",+ROR8DST("RORXVCL")))
"RTN","RORUTL15",205,0)
 . I $D(@ROR8RXS@("G"))>1  Q:$D(@ROR8RXS@("G",+ROR8DST("RORXGEN")))
"RTN","RORUTL15",206,0)
 . S SKIP=1
"RTN","RORUTL15",207,0)
 ;
"RTN","RORUTL15",208,0)
 ;--- Load additional drug data
"RTN","RORUTL15",209,0)
 ;D:LOADEXT
"RTN","RORUTL15",210,0)
 ;.
"RTN","RORUTL15",211,0)
 ;
"RTN","RORUTL15",212,0)
 ;=== Default output
"RTN","RORUTL15",213,0)
 I ROR8SET=""  D  Q 0
"RTN","RORUTL15",214,0)
 . S RORXCNT=RORXCNT+1
"RTN","RORUTL15",215,0)
 . M @ROR8DST@(RORXCNT)=^TMP("PS",$J)
"RTN","RORUTL15",216,0)
 . S TMP=ORDER_U_ORDFLG_U_ROR8DST("RORXGEN")
"RTN","RORUTL15",217,0)
 . S $P(TMP,U,5,6)=ROR8DST("RORXVCL")
"RTN","RORUTL15",218,0)
 . S @ROR8DST@(RORXCNT)=TMP
"RTN","RORUTL15",219,0)
 ;=== Callback function
"RTN","RORUTL15",220,0)
 X ROR8SET  ; (.ROR8DST,ORDER,ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE,special data for specific reports)
"RTN","RORUTL15",221,0)
 Q RC
"RTN","RORUTL15",222,0)
 ;
"RTN","RORUTL15",223,0)
 ;***** LOADS AND PRESELECTS PHARMACY ORDERS
"RTN","RORUTL15",224,0)
 ;
"RTN","RORUTL15",225,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",226,0)
 ;
"RTN","RORUTL15",227,0)
 ; FLAGS         Flags to control processing
"RTN","RORUTL15",228,0)
 ;
"RTN","RORUTL15",229,0)
 ; STDT          Start date (FileMan)
"RTN","RORUTL15",230,0)
 ; ENDT          End date   (FileMan)
"RTN","RORUTL15",231,0)
 ;
"RTN","RORUTL15",232,0)
 ; ROR8LST       Closed root for the list of preselected orders
"RTN","RORUTL15",233,0)
 ;
"RTN","RORUTL15",234,0)
 ; @ROR8LST@(
"RTN","RORUTL15",235,0)
 ;   Seq#,               Flags that describe the order (I,O,P, etc.)
"RTN","RORUTL15",236,0)
 ;     0)                Content of the ^TMP("PS",$J,i,0) node
"RTN","RORUTL15",237,0)
 ;                       returned by the OCL^PSOORRL (see the DBIA
"RTN","RORUTL15",238,0)
 ;                       #2400 for details).
"RTN","RORUTL15",239,0)
 ;
"RTN","RORUTL15",240,0)
 ; Return Values:
"RTN","RORUTL15",241,0)
 ;       <0  Error code
"RTN","RORUTL15",242,0)
 ;        0  No orders have been found
"RTN","RORUTL15",243,0)
 ;       >0  Number of orders
"RTN","RORUTL15",244,0)
 ;
"RTN","RORUTL15",245,0)
QUERY(PTIEN,FLAGS,STDT,ENDT,ROR8LST) ;
"RTN","RORUTL15",246,0)
 N IEN,IRX,ORDER,RXCNT,TMP,TYPE
"RTN","RORUTL15",247,0)
 K ^TMP("PS",$J),@ROR8LST
"RTN","RORUTL15",248,0)
 ;
"RTN","RORUTL15",249,0)
 ;--- Prepare the flags
"RTN","RORUTL15",250,0)
 I FLAGS["I"  D  S TYPE("U;I")="I"
"RTN","RORUTL15",251,0)
 . S:FLAGS["P" TYPE("P;I")="IP"
"RTN","RORUTL15",252,0)
 . S:FLAGS["V" TYPE("V;I")="IV"
"RTN","RORUTL15",253,0)
 I FLAGS["O"  D  S TYPE("R;O")="O"
"RTN","RORUTL15",254,0)
 . S:FLAGS["P" TYPE("P;O")="OP"
"RTN","RORUTL15",255,0)
 ;
"RTN","RORUTL15",256,0)
 ;--- Load the list of pharmacy orders
"RTN","RORUTL15",257,0)
 D OCL^PSOORRL(PTIEN,STDT,ENDT)
"RTN","RORUTL15",258,0)
 Q:$D(^TMP("PS",$J))<10 0
"RTN","RORUTL15",259,0)
 ;
"RTN","RORUTL15",260,0)
 ;--- Preselect the orders
"RTN","RORUTL15",261,0)
 S (IRX,RXCNT)=0
"RTN","RORUTL15",262,0)
 F  S IRX=$O(^TMP("PS",$J,IRX))  Q:'IRX  D
"RTN","RORUTL15",263,0)
 . S ORDER=$P($G(^TMP("PS",$J,IRX,0)),U)  Q:ORDER'>0
"RTN","RORUTL15",264,0)
 . ;--- Check the type of order
"RTN","RORUTL15",265,0)
 . S TMP=$L(ORDER),TYPE=$E(ORDER,TMP-2,TMP)
"RTN","RORUTL15",266,0)
 . S TYPE=$G(TYPE(TYPE))  Q:TYPE=""
"RTN","RORUTL15",267,0)
 . ;--- Double-check the dates
"RTN","RORUTL15",268,0)
 . I TYPE["I"  D  Q:(TMP<STDT)!(TMP'<ENDT)
"RTN","RORUTL15",269,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,15)
"RTN","RORUTL15",270,0)
 . I TYPE["O"  D  Q:TMP<STDT
"RTN","RORUTL15",271,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,10)
"RTN","RORUTL15",272,0)
 . ;--- Select the order
"RTN","RORUTL15",273,0)
 . S RXCNT=RXCNT+1,@ROR8LST@(RXCNT)=TYPE
"RTN","RORUTL15",274,0)
 . S @ROR8LST@(RXCNT,0)=^TMP("PS",$J,IRX,0)
"RTN","RORUTL15",275,0)
 ;
"RTN","RORUTL15",276,0)
 ;--- Cleanup
"RTN","RORUTL15",277,0)
 K ^TMP("PS",$J)
"RTN","RORUTL15",278,0)
 Q RXCNT
"RTN","RORX005B")
0^23^B9080085^B7236567
"RTN","RORX005B",1,0)
RORX005B ;HCIOFO/BH,SG - INPATIENT UTILIZATION (SORT) ; 04 Apr 2016  12:48 PM
"RTN","RORX005B",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**28**;Feb 17, 2006;Build 66
"RTN","RORX005B",3,0)
 ;
"RTN","RORX005B",4,0)
 ; This routine uses the following IAs:
"RTN","RORX005B",5,0)
 ;
"RTN","RORX005B",6,0)
 ; #2056 GET1^DIQ
"RTN","RORX005B",7,0)
 ;
"RTN","RORX005B",8,0)
 ;**********************************************************************
"RTN","RORX005B",9,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX005B",10,0)
 ;        
"RTN","RORX005B",11,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX005B",12,0)
 ;-----------  ----------  -----------  --------------------------------
"RTN","RORX005B",13,0)
 ;ROR*1.5*28   APR 2016    T KOPP       Add ICN data if additional
"RTN","RORX005B",14,0)
 ;                                       identifier requested.
"RTN","RORX005B",15,0)
 ;**********************************************************************
"RTN","RORX005B",16,0)
 ;
"RTN","RORX005B",17,0)
 Q
"RTN","RORX005B",18,0)
 ;
"RTN","RORX005B",19,0)
 ;***** CALCULATES MEDIAN LENGTHS OF STAY
"RTN","RORX005B",20,0)
 ;
"RTN","RORX005B",21,0)
 ; NODE          Closed root of the category section
"RTN","RORX005B",22,0)
 ;               in the temporary global
"RTN","RORX005B",23,0)
 ;
"RTN","RORX005B",24,0)
 ; FSUM          Update the summary data (0/1)
"RTN","RORX005B",25,0)
 ;
"RTN","RORX005B",26,0)
MLOS(NODE) ;
"RTN","RORX005B",27,0)
 N BSID,TMP,XREFNODE
"RTN","RORX005B",28,0)
 ;--- Median length of the whole stays
"RTN","RORX005B",29,0)
 S XREFNODE=$NA(@NODE@("IPMLOS",0))
"RTN","RORX005B",30,0)
 S TMP=$$XREFMDNV^RORXU004(XREFNODE,+$G(@NODE@("IPS")))
"RTN","RORX005B",31,0)
 S (@NODE@("IPMLOS"),@NODE@("IPMLOS",0))=TMP
"RTN","RORX005B",32,0)
 ;--- Median lengths of the bed section stays
"RTN","RORX005B",33,0)
 S BSID=""
"RTN","RORX005B",34,0)
 F  S BSID=$O(@NODE@("IPMLOS",BSID))  Q:BSID=""  D:BSID
"RTN","RORX005B",35,0)
 . S XREFNODE=$NA(@NODE@("IPMLOS",BSID))
"RTN","RORX005B",36,0)
 . S TMP=+$G(@NODE@("IPB",BSID,"S"))
"RTN","RORX005B",37,0)
 . S @NODE@("IPMLOS",BSID)=$$XREFMDNV^RORXU004(XREFNODE,TMP)
"RTN","RORX005B",38,0)
 Q
"RTN","RORX005B",39,0)
 ;
"RTN","RORX005B",40,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX005B",41,0)
 ;
"RTN","RORX005B",42,0)
 ; Return Values:
"RTN","RORX005B",43,0)
 ;       <0  Error code
"RTN","RORX005B",44,0)
 ;        0  Ok
"RTN","RORX005B",45,0)
 ;
"RTN","RORX005B",46,0)
SORT() ;
"RTN","RORX005B",47,0)
 N BSID,DIERR,FILE,IENS,NAME,NODE,RC,RORMSG,TMP
"RTN","RORX005B",48,0)
 S NODE=$NA(^TMP("RORX005",$J))  Q:$D(@NODE)<10 0
"RTN","RORX005B",49,0)
 ;--- Bed sections
"RTN","RORX005B",50,0)
 S RC=$$LOOP^RORTSK01(0)  Q:RC<0 RC
"RTN","RORX005B",51,0)
 S BSID=""
"RTN","RORX005B",52,0)
 F  S BSID=$O(@NODE@("IPB",BSID))  Q:'BSID  D
"RTN","RORX005B",53,0)
 . D:BSID>0
"RTN","RORX005B",54,0)
 . . S IENS=(+BSID)_",",FILE=+$P(BSID,";",2)
"RTN","RORX005B",55,0)
 . . S NAME=$$GET1^DIQ(FILE,IENS,.01,,,"RORMSG")
"RTN","RORX005B",56,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,FILE,IENS)
"RTN","RORX005B",57,0)
 . . S:NAME?." " NAME="Unknown ("_BSID_")"
"RTN","RORX005B",58,0)
 . . S @NODE@("IPB","B",NAME,BSID)=""
"RTN","RORX005B",59,0)
 ;--- Median length of stay
"RTN","RORX005B",60,0)
 S RC=$$LOOP^RORTSK01(0.5)  Q:RC<0 RC
"RTN","RORX005B",61,0)
 D MLOS(NODE)
"RTN","RORX005B",62,0)
 ;---
"RTN","RORX005B",63,0)
 Q 0
"RTN","RORX005B",64,0)
 ;
"RTN","RORX005B",65,0)
 ;***** CALCULATES THE INTERMEDIATE TOTALS
"RTN","RORX005B",66,0)
 ;
"RTN","RORX005B",67,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX005B",68,0)
 ;
"RTN","RORX005B",69,0)
 ; Return Values:
"RTN","RORX005B",70,0)
 ;       <0  Error code
"RTN","RORX005B",71,0)
 ;        0  Ok
"RTN","RORX005B",72,0)
 ;
"RTN","RORX005B",73,0)
TOTALS(PATIEN) ;
"RTN","RORX005B",74,0)
 N NODE,TMP
"RTN","RORX005B",75,0)
 S NODE=$NA(^TMP("RORX005",$J))
"RTN","RORX005B",76,0)
 ;
"RTN","RORX005B",77,0)
 ;=== Inpatient data
"RTN","RORX005B",78,0)
 D:$D(@NODE@("IP",PATIEN))>1
"RTN","RORX005B",79,0)
 . N DAYS,STAYS,VISITS
"RTN","RORX005B",80,0)
 . S @NODE@("IP",PATIEN)=RORLAST4_U_$S($$PARAM^RORTSK01("PATIENTS","ICN"):$G(RORICN),1:"")
"RTN","RORX005B",81,0)
 . S @NODE@("IP")=$G(@NODE@("IP"))+1
"RTN","RORX005B",82,0)
 . S STAYS=+$G(@NODE@("IP",PATIEN,"S"))
"RTN","RORX005B",83,0)
 . S DAYS=+$G(@NODE@("IP",PATIEN,"D"))
"RTN","RORX005B",84,0)
 . S VISITS=+$G(@NODE@("IP",PATIEN,"V"))
"RTN","RORX005B",85,0)
 . ;--- Number of stays
"RTN","RORX005B",86,0)
 . D:(STAYS>0)!(VISITS>0)
"RTN","RORX005B",87,0)
 . . S @NODE@("IPS")=$G(@NODE@("IPS"))+STAYS
"RTN","RORX005B",88,0)
 . . S @NODE@("IPS",STAYS)=$G(@NODE@("IPS",STAYS))+1
"RTN","RORX005B",89,0)
 . . S @NODE@("IPS",STAYS,RORPNAME,PATIEN)=""
"RTN","RORX005B",90,0)
 . ;--- Number of days
"RTN","RORX005B",91,0)
 . D:(DAYS>0)!(VISITS>0)
"RTN","RORX005B",92,0)
 . . S @NODE@("IPD")=$G(@NODE@("IPD"))+DAYS
"RTN","RORX005B",93,0)
 . . S @NODE@("IPD",DAYS)=$G(@NODE@("IPD",DAYS))+1
"RTN","RORX005B",94,0)
 . . S @NODE@("IPD",DAYS,RORPNAME,PATIEN)=""
"RTN","RORX005B",95,0)
 . ;--- Number of short stays (visits)
"RTN","RORX005B",96,0)
 . D:VISITS>0
"RTN","RORX005B",97,0)
 . . S @NODE@("IPV")=$G(@NODE@("IPV"))+VISITS
"RTN","RORX005B",98,0)
 Q 0
"RTN","RORX022A")
0^20^B147471078^B139990962
"RTN","RORX022A",1,0)
RORX022A ;BPOIFO/CLR - LAB DAA MONITOR (CONT.) ; 22 Feb 2016  2:28 AM
"RTN","RORX022A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13,17,18,19,21,28**;Feb 17, 2006;Build 66
"RTN","RORX022A",3,0)
 ;
"RTN","RORX022A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX022A",5,0)
 ;
"RTN","RORX022A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX022A",7,0)
 ; #10103 FMDIFF^XLFDT (supported)
"RTN","RORX022A",8,0)
 ; #10035 Direct read of the DOD field of the file #2
"RTN","RORX022A",9,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX022A",10,0)
 ;   
"RTN","RORX022A",11,0)
 ;******************************************************************************
"RTN","RORX022A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX022A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX022A",14,0)
 ;ROR*1.5*18   APR  2012   C RAY        Adds select patient panel
"RTN","RORX022A",15,0)
 ;ROR*1.5*19   JUN  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX022A",16,0)
 ;ROR*1.5*21   SEP  2013   T KOPP       Add ICN column if Additional Identifier
"RTN","RORX022A",17,0)
 ;                                       requested.
"RTN","RORX022A",18,0)
 ;ROR*1.5*28   APR  2016   T KOPP       Add select DAA/in house drug parameter
"RTN","RORX022A",19,0)
 ;                                      Change selection of Rx's from 2 specific
"RTN","RORX022A",20,0)
 ;                                       drugs to any drug assigned to the HEP C
"RTN","RORX022A",21,0)
 ;                                       registry plus local drugs defined for 
"RTN","RORX022A",22,0)
 ;                                       the registry. 
"RTN","RORX022A",23,0)
 ;******************************************************************************
"RTN","RORX022A",24,0)
 Q
"RTN","RORX022A",25,0)
 ;
"RTN","RORX022A",26,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX022A",27,0)
 ;
"RTN","RORX022A",28,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX022A",29,0)
 ;
"RTN","RORX022A",30,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX022A",31,0)
 ;
"RTN","RORX022A",32,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX022A",33,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX022A",34,0)
 ;
"RTN","RORX022A",35,0)
 ; Return Values:
"RTN","RORX022A",36,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX022A",37,0)
 ;        0  Ok
"RTN","RORX022A",38,0)
 ;        1  Skip this result
"RTN","RORX022A",39,0)
 ;        2  Skip this and all remaining results
"RTN","RORX022A",40,0)
 ;
"RTN","RORX022A",41,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX022A",42,0)
 ;all lab tests
"RTN","RORX022A",43,0)
 N DATE,IEN,NAME,RC,TMP,VAL,WEEKS,DAYS,RAWDAYS
"RTN","RORX022A",44,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX022A",45,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX022A",46,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX022A",47,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX022A",48,0)
 S RAWDAYS=$$FMDIFF^XLFDT(((9999999-DATE)\1),ROR8DST("DAA"))
"RTN","RORX022A",49,0)
 S WEEKS=RAWDAYS\7  ;Number of weeks
"RTN","RORX022A",50,0)
 S DAYS=RAWDAYS#7  ;Remainder in days
"RTN","RORX022A",51,0)
 S VAL=$$UP^XLFSTR(VAL)
"RTN","RORX022A",52,0)
 ;--- Skip value if test not performed
"RTN","RORX022A",53,0)
 I VAL["CANC"!(VAL["DNR")!(VAL["TNP") Q 1
"RTN","RORX022A",54,0)
 ;--- Skip value out of the result range
"RTN","RORX022A",55,0)
 I $D(RORLTRV(IEN))>1  S RC=1  D  Q:RC RC
"RTN","RORX022A",56,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P(RESULT(1),U,3))
"RTN","RORX022A",57,0)
 . ;--- Skip a non-numeric result
"RTN","RORX022A",58,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX022A",59,0)
 . ;--- Check the range
"RTN","RORX022A",60,0)
 . I $G(RORLTRV(IEN,"L"))'=""  Q:VAL<RORLTRV(IEN,"L")
"RTN","RORX022A",61,0)
 . I $G(RORLTRV(IEN,"H"))'=""  Q:VAL>RORLTRV(IEN,"H")
"RTN","RORX022A",62,0)
 . S RC=0
"RTN","RORX022A",63,0)
 ;--- Store the result
"RTN","RORX022A",64,0)
 S @ROR8DST@(NAME,IEN,DATE)=($P(RESULT(1),U,3))_U_(+WEEKS_" weeks "_+DAYS_" days")
"RTN","RORX022A",65,0)
 Q 0
"RTN","RORX022A",66,0)
 ;
"RTN","RORX022A",67,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX022A",68,0)
 ;
"RTN","RORX022A",69,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX022A",70,0)
 ; RORTSK        Parameters passed by client
"RTN","RORX022A",71,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX022A",72,0)
 ;
"RTN","RORX022A",73,0)
 ; Return Values:
"RTN","RORX022A",74,0)
 ;       <0  Error code
"RTN","RORX022A",75,0)
 ;        0  Ok
"RTN","RORX022A",76,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX022A",77,0)
 ;
"RTN","RORX022A",78,0)
QUERY(FLAGS,RORTSK,NSPT) ;
"RTN","RORX022A",79,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX022A",80,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX022A",81,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX022A",82,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX022A",83,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX022A",84,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX022A",85,0)
 N RORDAA        ; Date of patient's 1st DAA fill
"RTN","RORX022A",86,0)
 N RORXL         ; Location of drug list
"RTN","RORX022A",87,0)
 N RXSDT         ; RX start date
"RTN","RORX022A",88,0)
 N RXEDT         ; RX end date
"RTN","RORX022A",89,0)
 N RORICN        ; National ICN
"RTN","RORX022A",90,0)
 ;
"RTN","RORX022A",91,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,SKIP,TMP,VA,VADM,XREFNODE
"RTN","RORX022A",92,0)
 N RCC,FLAG,DAASDT,DAAEDT,RORXSDT,RORDAACH
"RTN","RORX022A",93,0)
 N LTEDT,LTSDT,LTWKDYS,LTWKS
"RTN","RORX022A",94,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX022A",95,0)
 S (CNT,ECNT,NSPT,RC,RORCDLIST)=0
"RTN","RORX022A",96,0)
 ;--- Number of patients in the registry
"RTN","RORX022A",97,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX022A",98,0)
 ;--- Date range to search for DAA meds
"RTN","RORX022A",99,0)
 S DAASDT=$$PARAM^RORTSK01("DATE_RANGE_4","START")\1
"RTN","RORX022A",100,0)
 S DAAEDT=$$PARAM^RORTSK01("DATE_RANGE_4","END")\1
"RTN","RORX022A",101,0)
 ;--- set up LAB descriptors
"RTN","RORX022A",102,0)
 S LTWKS=$$PARAM^RORTSK01("WEEKS_AFTER")
"RTN","RORX022A",103,0)
 S LTWKDYS=LTWKS*7
"RTN","RORX022A",104,0)
 S LTMREC=$$PARAM^RORTSK01("WEEKS_AFTER","MOST_RECENT")
"RTN","RORX022A",105,0)
 S RORLDST("RORCB")="$$LTSCB^RORX022A"
"RTN","RORX022A",106,0)
 ;--- set up RX descriptors
"RTN","RORX022A",107,0)
 S RORXDST("RORCB")="$$RXOCB^RORX022A"
"RTN","RORX022A",108,0)
 S RORXDST("GENERIC")=1
"RTN","RORX022A",109,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX022A",110,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG,"DG")
"RTN","RORX022A",111,0)
 S RXSDT=3100101  ;based on compliance date PSN*4*293
"RTN","RORX022A",112,0)
 S RXEDT=$$FMADD^XLFDT(DAAEDT,1)
"RTN","RORX022A",113,0)
 ;--- Set up Clinic/Division list parameters
"RTN","RORX022A",114,0)
 I $D(RORTSK("PARAMS","CLINICS","C")) S RORCDLIST=1
"RTN","RORX022A",115,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C")) S RORCDLIST=1
"RTN","RORX022A",116,0)
 ;--- Set up ICD parameters
"RTN","RORX022A",117,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX022A",118,0)
 ;
"RTN","RORX022A",119,0)
 ;--- Browse through the registry records
"RTN","RORX022A",120,0)
 S IEN=0
"RTN","RORX022A",121,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX022A",122,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX022A",123,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX022A",124,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX022A",125,0)
 . ;--- Get patient DFN
"RTN","RORX022A",126,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX022A",127,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX022A",128,0)
 . ;check for patient list and quit if not on list  ;+18
"RTN","RORX022A",129,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX022A",130,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX022A",131,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS)
"RTN","RORX022A",132,0)
 . ;--- Check if patient should be skipped because of ICD codes
"RTN","RORX022A",133,0)
 . S RCC=0
"RTN","RORX022A",134,0)
 . I FLAG'="ALL" D
"RTN","RORX022A",135,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX022A",136,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX022A",137,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX022A",138,0)
 . ;--- Check if patient should be skipped because not on Clinic or Division list
"RTN","RORX022A",139,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,DAASDT,DAAEDT) Q
"RTN","RORX022A",140,0)
 . ;--- Report specific filters
"RTN","RORX022A",141,0)
 . S SKIP=1
"RTN","RORX022A",142,0)
 . ;--- Check if patient should be skipped because no DAA fill
"RTN","RORX022A",143,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX022A",144,0)
 . . ;--- Search for 1st DAA fill date skip patient if not taking DAA
"RTN","RORX022A",145,0)
 . . S RORXDST("1STDAA")=1  ;set DAA flag
"RTN","RORX022A",146,0)
 . . D  I RC'>0 Q
"RTN","RORX022A",147,0)
 . . . N RORDAACH
"RTN","RORX022A",148,0)
 . . . S RORDAACH=$$PARAM^RORTSK01("OPTIONS","DAA_DRUGS")
"RTN","RORX022A",149,0)
 . . . S RORXDST=$$ALLOC^RORTMP()
"RTN","RORX022A",150,0)
 . . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV"_$S(RORDAACH="C":"C",RORDAACH="I":"H",1:""),RXSDT,RXEDT)
"RTN","RORX022A",151,0)
 . . S SKIP=0
"RTN","RORX022A",152,0)
 . S RORDAA=$O(@RORXDST@(""))
"RTN","RORX022A",153,0)
 . I +RORDAA<DAASDT S SKIP=1  ;1st fill before daa start date
"RTN","RORX022A",154,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX022A",155,0)
 . I SKIP D FREE^RORTMP(RORXDST) Q
"RTN","RORX022A",156,0)
 . ;=== Store the patient's data
"RTN","RORX022A",157,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX022A",158,0)
 . D FREE^RORTMP(RORXDST)
"RTN","RORX022A",159,0)
 . S RORICN=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX022A",160,0)
 . S ^TMP("RORX022",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORDAA_U_RORICN
"RTN","RORX022A",161,0)
 . ;--- Get lab tests N weeks after 1st DAA fill
"RTN","RORX022A",162,0)
 . N X,X1,X2
"RTN","RORX022A",163,0)
 . S X1=RORDAA,X2=LTWKDYS D C^%DTC S LTEDT=X
"RTN","RORX022A",164,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT\1,1)
"RTN","RORX022A",165,0)
 . ;--- If baseline requested get all lab results
"RTN","RORX022A",166,0)
 . S LTSDT=$S(LTMREC=1:"",1:RORDAA)
"RTN","RORX022A",167,0)
 . S RORLDST("DAA")=RORDAA
"RTN","RORX022A",168,0)
 . D  Q:RC<0 
"RTN","RORX022A",169,0)
 . . S RORLDST=$NA(^TMP("RORX022",$J,"PAT",PATIEN,"LR"))
"RTN","RORX022A",170,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,RORLTST,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX022A",171,0)
 . ;--- Get all registry med fills 60 days before 1st DAA fill
"RTN","RORX022A",172,0)
 . K RORXDST("1STDAA")  ;clear DAA flag
"RTN","RORX022A",173,0)
 . D  Q:RC<0
"RTN","RORX022A",174,0)
 . . N RORDAACH
"RTN","RORX022A",175,0)
 . . S RORXDST=$NA(^TMP("RORX022",$J,"PAT",PATIEN,"RX"))
"RTN","RORX022A",176,0)
 . . S X1=RORDAA,X2=-60 D C^%DTC S RORXSDT=X
"RTN","RORX022A",177,0)
 . . S RORXEDT=$$FMADD^XLFDT(DT,1)
"RTN","RORX022A",178,0)
 . . S RORDAACH=$$PARAM^RORTSK01("OPTIONS","DAA_DRUGS")
"RTN","RORX022A",179,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV"_$S(RORDAACH="C":"C",RORDAACH="I":"H",1:""),RORXSDT,RORXEDT)
"RTN","RORX022A",180,0)
 . S NSPT=NSPT+1
"RTN","RORX022A",181,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX022A",182,0)
 ;
"RTN","RORX022A",183,0)
 ;
"RTN","RORX022A",184,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX022A",185,0)
 ;
"RTN","RORX022A",186,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX022A",187,0)
 ;
"RTN","RORX022A",188,0)
 ;
"RTN","RORX022A",189,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX022A",190,0)
 ;
"RTN","RORX022A",191,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX022A",192,0)
 ;                               processed.
"RTN","RORX022A",193,0)
 ;
"RTN","RORX022A",194,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX022A",195,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX022A",196,0)
 ;                                 ^02: Drug name
"RTN","RORX022A",197,0)
 ;
"RTN","RORX022A",198,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX022A",199,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX022A",200,0)
 ;
"RTN","RORX022A",201,0)
 ;Return Values:
"RTN","RORX022A",202,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX022A",203,0)
 ;        0  Ok
"RTN","RORX022A",204,0)
 ;        1  Skip this result
"RTN","RORX022A",205,0)
 ;        2  Skip this and all remaining results
"RTN","RORX022A",206,0)
 ;
"RTN","RORX022A",207,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX022A",208,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX022A",209,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX022A",210,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX022A",211,0)
 I DRUGIEN'>0!(DRUGNAME="") S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX022A",212,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX022A",213,0)
 ;--- if DAA flag set, skip med if not a DAA
"RTN","RORX022A",214,0)
 ;I +$G(ROR8DST("1STDAA")),(DRUGNAME'="BOCEPREVIR"),(DRUGNAME'="TELAPREVIR") Q 1
"RTN","RORX022A",215,0)
 S $P(RXBUF,U,5)=$P($G(^TMP("PS",$J,0)),U,7)  ; Days Supply
"RTN","RORX022A",216,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX022A",217,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX022A",218,0)
 S RXCNT=0
"RTN","RORX022A",219,0)
 ;--- Original prescription
"RTN","RORX022A",220,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX022A",221,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)\1         ; Start Date
"RTN","RORX022A",222,0)
 . S RXCNT=RXCNT+1
"RTN","RORX022A",223,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",224,0)
 E  D             ;--- Outpatient
"RTN","RORX022A",225,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX022A",226,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX022A",227,0)
 . S RXCNT=RXCNT+1
"RTN","RORX022A",228,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",229,0)
 ;--- Refills and partials
"RTN","RORX022A",230,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX022A",231,0)
 . S IRP=0
"RTN","RORX022A",232,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX022A",233,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX022A",234,0)
 . . S $P(RXBUF,U,5)=$P(TMP,U,2)  ; Days Supply
"RTN","RORX022A",235,0)
 . . I TMP>0  S RXCNT=RXCNT+1  D
"RTN","RORX022A",236,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",237,0)
 Q 0
"RTN","RORX022A",238,0)
 ;
"RTN","RORX022A",239,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX022A",240,0)
 ;
"RTN","RORX022A",241,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX022A",242,0)
 ; RORTSK        Parameters passed by GUI
"RTN","RORX022A",243,0)
 ; NSPT          Number of selected patients
"RTN","RORX022A",244,0)
 ;
"RTN","RORX022A",245,0)
 ; Return Values:
"RTN","RORX022A",246,0)
 ;       <0  Error code
"RTN","RORX022A",247,0)
 ;        0  Ok
"RTN","RORX022A",248,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX022A",249,0)
 ;
"RTN","RORX022A",250,0)
STORE(REPORT,RORTSK,NSPT) ;
"RTN","RORX022A",251,0)
 N CNT,DATE,DFN,DAA,ECNT,ICN,IEN,ITEM,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL
"RTN","RORX022A",252,0)
 N DAAINV,LRMREC
"RTN","RORX022A",253,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX022A",254,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX022A",255,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX022A",256,0)
 S LRMREC=$$PARAM^RORTSK01("LABTESTS","MOST_RECENT")
"RTN","RORX022A",257,0)
 ;--- Create lab test list
"RTN","RORX022A",258,0)
 D  Q:LTLST<0 LTLST
"RTN","RORX022A",259,0)
 . S LTLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,REPORT)
"RTN","RORX022A",260,0)
 . D ADDATTR^RORTSK11(RORTSK,LTLST,"TABLE","LABTESTS")
"RTN","RORX022A",261,0)
 ;--- Create pharmacy list
"RTN","RORX022A",262,0)
 D  Q:RXLST<0 RXLST
"RTN","RORX022A",263,0)
 . S RXLST=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,REPORT)
"RTN","RORX022A",264,0)
 . D ADDATTR^RORTSK11(RORTSK,RXLST,"TABLE","DRUGS")
"RTN","RORX022A",265,0)
 ;--- Loop through selected patients and store as XML
"RTN","RORX022A",266,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX022A",267,0)
 F  S DFN=$O(^TMP("RORX022",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX022A",268,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX022A",269,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX022A",270,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX022",$J,"PAT",DFN))
"RTN","RORX022A",271,0)
 . ;--- Patient's data
"RTN","RORX022A",272,0)
 . S TMP=$G(@NODE)
"RTN","RORX022A",273,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DAA=$P(TMP,U,3),ICN=$P(TMP,U,4)
"RTN","RORX022A",274,0)
 . S PTCNT=PTCNT+1
"RTN","RORX022A",275,0)
 . ;--- List of Lab tests
"RTN","RORX022A",276,0)
 . S NAME="" K LTCNT
"RTN","RORX022A",277,0)
 . F  S NAME=$O(@NODE@("LR",NAME)) Q:NAME=""  D
"RTN","RORX022A",278,0)
 . . S IEN=""
"RTN","RORX022A",279,0)
 . . F  S IEN=$O(@NODE@("LR",NAME,IEN)) Q:IEN=""  D
"RTN","RORX022A",280,0)
 . . . S DATE="",DAAINV=9999999-DAA
"RTN","RORX022A",281,0)
 . . . F  S DATE=$O(@NODE@("LR",NAME,IEN,DATE)) Q:DATE=""!($G(LTCNT(NAME,IEN))=2)!((DATE>DAAINV)&'LTMREC)  D
"RTN","RORX022A",282,0)
 . . . . ;store results after or on DAA fill date
"RTN","RORX022A",283,0)
 . . . . I DATE'>DAAINV D  Q
"RTN","RORX022A",284,0)
 . . . . . I LRMREC,$G(LTCNT(NAME,IEN))=0 Q  ;quit if most recent
"RTN","RORX022A",285,0)
 . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX022A",286,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",287,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",288,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",289,0)
 . . . . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX022A",290,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",((9999999-DATE)\1),ITEM,1)
"RTN","RORX022A",291,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX022A",292,0)
 . . . . . S VAL=$G(@NODE@("LR",NAME,IEN,DATE))
"RTN","RORX022A",293,0)
 . . . . . S TMP=$S($$NUMERIC^RORUTL05($P(VAL,U)):3,1:1)
"RTN","RORX022A",294,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(VAL,U),ITEM,TMP)
"RTN","RORX022A",295,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"WKS_LAB",$P(VAL,U,2),ITEM,1)
"RTN","RORX022A",296,0)
 . . . . . S LTCNT(NAME,IEN)=0
"RTN","RORX022A",297,0)
 . . . . ;store 2 baseline results if flag is set
"RTN","RORX022A",298,0)
 . . . . I LTMREC D
"RTN","RORX022A",299,0)
 . . . . . S LTCNT(NAME,IEN)=$S('$D(LTCNT(NAME,IEN)):1,1:LTCNT(NAME,IEN)+1)  ;count for each test
"RTN","RORX022A",300,0)
 . . . . . Q:LTCNT(NAME,IEN)>2  ;stop after 2 baseline results
"RTN","RORX022A",301,0)
 . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX022A",302,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",303,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",304,0)
 . . . . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX022A",305,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DAA_FILL",DAA,ITEM,1)
"RTN","RORX022A",306,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",((9999999-DATE)\1),ITEM,1)
"RTN","RORX022A",307,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX022A",308,0)
 . . . . . S VAL=$G(@NODE@("LR",NAME,IEN,DATE))
"RTN","RORX022A",309,0)
 . . . . . S TMP=$S($$NUMERIC^RORUTL05($P(VAL,U)):3,1:1)
"RTN","RORX022A",310,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(VAL,U),ITEM,TMP)
"RTN","RORX022A",311,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"WKS_LAB","Baseline",ITEM,1)
"RTN","RORX022A",312,0)
 . ;--- List of drugs
"RTN","RORX022A",313,0)
 . S DATE=""
"RTN","RORX022A",314,0)
 . F  S DATE=$O(@NODE@("RX",DATE))  Q:DATE=""  D
"RTN","RORX022A",315,0)
 . . S NAME=""
"RTN","RORX022A",316,0)
 . . F  S NAME=$O(@NODE@("RX",DATE,NAME))  Q:NAME=""  D
"RTN","RORX022A",317,0)
 . . . S IEN=""
"RTN","RORX022A",318,0)
 . . . F  S IEN=$O(@NODE@("RX",DATE,NAME,IEN))  Q:IEN=""  D
"RTN","RORX022A",319,0)
 . . . . S RXNUM=""
"RTN","RORX022A",320,0)
 . . . . F  S RXNUM=$O(@NODE@("RX",DATE,NAME,IEN,RXNUM)) Q:RXNUM=""  D
"RTN","RORX022A",321,0)
 . . . . . S RXCNT=""
"RTN","RORX022A",322,0)
 . . . . . F  S RXCNT=$O(@NODE@("RX",DATE,NAME,IEN,RXNUM,RXCNT)) Q:RXCNT=""  S RXBUF=@NODE@("RX",DATE,NAME,IEN,RXNUM,RXCNT) D
"RTN","RORX022A",323,0)
 . . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,RXLST,,DFN)
"RTN","RORX022A",324,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",325,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",326,0)
 . . . . . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX022A",327,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"DAA_FILL",DAA,ITEM,1)
"RTN","RORX022A",328,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",DATE\1,ITEM,1)
"RTN","RORX022A",329,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"RXNAME",NAME,ITEM,1)
"RTN","RORX022A",330,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"DAYSPLY",$P(RXBUF,U,5),ITEM,1)
"RTN","RORX022A",331,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX022A",332,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX022A",333,0)
 Q ECNT
"VER")
8.0^22.0
"^DD",798.1,798.1,0)
FIELD^^31^36
"^DD",798.1,798.1,0,"DDA")
N
"^DD",798.1,798.1,0,"DT")
3120301
"^DD",798.1,798.1,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,4),,"?30")
"^DD",798.1,798.1,0,"IX","ACL",798.118,.01)

"^DD",798.1,798.1,0,"IX","AEP",798.1,25)

"^DD",798.1,798.1,0,"IX","ARULES",798.13,.01)

"^DD",798.1,798.1,0,"IX","C",798.1,31)

"^DD",798.1,798.1,0,"NM","ROR REGISTRY PARAMETERS")
 
"^DD",798.1,798.1,0,"PT",798,.02)
 
"^DD",798.1,798.1,0,"PT",798.31,.01)
 
"^DD",798.1,798.1,0,"PT",798.5,.01)

"^DD",798.1,798.1,0,"PT",798.6,.02)
 
"^DD",798.1,798.1,0,"PT",798.73,.01)
 
"^DD",798.1,798.1,0,"PT",798.8,.03)
 
"^DD",798.1,798.1,0,"PT",799.1,.03)
 
"^DD",798.1,798.1,0,"PT",799.51,.02)
 
"^DD",798.1,798.1,0,"PT",799.53,.03)
 
"^DD",798.1,798.1,0,"SCR")
I $$ACCESS^RORDD(798.1,Y)
"^DD",798.1,798.1,0,"VRPK")
ROR
"^DD",798.1,798.1,0,"VRRV")
1.5^ROR 1.5
"^DD",798.1,798.1,.01,0)
REGISTRY NAME^RFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>30!($L(X)<3)!'(X?1.UNP) X
"^DD",798.1,798.1,.01,1,0)
^.1^^0
"^DD",798.1,798.1,.01,3)
Enter the unique registry name (3-30 characters).
"^DD",798.1,798.1,.01,8.5)
@
"^DD",798.1,798.1,.01,9)
@
"^DD",798.1,798.1,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.01,20,1,0)
DEFINITION
"^DD",798.1,798.1,.01,21,0)
^.001^9^9^3060203^^
"^DD",798.1,798.1,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,.01,21,3,0)
 
"^DD",798.1,798.1,.01,21,4,0)
You can either select an existing registry or add 
"^DD",798.1,798.1,.01,21,5,0)
a new one. Registry names must be unique. Names of
"^DD",798.1,798.1,.01,21,6,0)
the National registries must start with "VA".
"^DD",798.1,798.1,.01,21,7,0)
 
"^DD",798.1,798.1,.01,21,8,0)
You can only select records of those registries
"^DD",798.1,798.1,.01,21,9,0)
that you have appropriate security key(s) for.
"^DD",798.1,798.1,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,.01,"DT")
3060203
"^DD",798.1,798.1,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;11^Q:$$VAEDT^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,8.5)
@
"^DD",798.1,798.1,.09,9)
@
"^DD",798.1,798.1,.09,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.09,20,1,0)
DEFINITION
"^DD",798.1,798.1,.09,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.1,798.1,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.1,798.1,.09,21,3,0)
 
"^DD",798.1,798.1,.09,21,4,0)
The national registries must have this field set
"^DD",798.1,798.1,.09,21,5,0)
to "YES". This prevents local editing of other 
"^DD",798.1,798.1,.09,21,6,0)
fields of national registry definitions.
"^DD",798.1,798.1,.09,"DEL",1,0)
I $$VADEL^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,"DT")
3011120
"^DD",798.1,798.1,1,0)
REGISTRY UPDATED UNTIL^D^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,1,20,1,0)
STATE
"^DD",798.1,798.1,1,21,0)
^^9^9^3060203^
"^DD",798.1,798.1,1,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,1,21,2,0)
successful run of the regular registry update
"^DD",798.1,798.1,1,21,3,0)
process. The search engine looks for new patients
"^DD",798.1,798.1,1,21,4,0)
starting from this date.
"^DD",798.1,798.1,1,21,5,0)
 
"^DD",798.1,798.1,1,21,6,0)
Usually, this field should not be manually edited;
"^DD",798.1,798.1,1,21,7,0)
it is updated automatically. Before initial
"^DD",798.1,798.1,1,21,8,0)
population of the registry, enter the date that the
"^DD",798.1,798.1,1,21,9,0)
data search should start from.
"^DD",798.1,798.1,1,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,1,23,1,0)
This field is updated automatically by the registry 
"^DD",798.1,798.1,1,23,2,0)
update process after successful completion (see the 
"^DD",798.1,798.1,1,23,3,0)
$$TMSTMP^RORUPD01 function for details).
"^DD",798.1,798.1,1,"DT")
3010928
"^DD",798.1,798.1,2,0)
DATA EXTRACTED UNTIL^D^^0;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,2,20,1,0)
STATE
"^DD",798.1,798.1,2,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,2,21,2,0)
successful run of the regular data extraction
"^DD",798.1,798.1,2,21,3,0)
process. Do not edit this field.
"^DD",798.1,798.1,2,23,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,23,1,0)
This field is updated automatically by the regular data
"^DD",798.1,798.1,2,23,2,0)
extraction process after its successful completion (see
"^DD",798.1,798.1,2,23,3,0)
the $$TMSTMP^ROREXTUT function for details).
"^DD",798.1,798.1,2,"DT")
3010928
"^DD",798.1,798.1,3,0)
SELECTION RULE^798.13^^1;0
"^DD",798.1,798.1,3,9)
@
"^DD",798.1,798.1,3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,3,20,1,0)
DEFINITION
"^DD",798.1,798.1,3,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.1,3,21,1,0)
The SELECTION RULE field contains a list of the 
"^DD",798.1,798.1,3,21,2,0)
top-level selection rules that are used to screen
"^DD",798.1,798.1,3,21,3,0)
the patients to be added to the registry.
"^DD",798.1,798.1,3,21,4,0)
 
"^DD",798.1,798.1,3,21,5,0)
The records of the multiple are uniquely 
"^DD",798.1,798.1,3,21,6,0)
identified by the selection rule names. The "A"
"^DD",798.1,798.1,3,21,7,0)
primary key and the uniqueness index "B" are used
"^DD",798.1,798.1,3,21,8,0)
for this purpose.
"^DD",798.1,798.1,4,0)
SHORT DESCRIPTION^RFX^^0;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>40!($L(X)<3) X
"^DD",798.1,798.1,4,3)
Enter a short description of the registry (3-40 characters).
"^DD",798.1,798.1,4,8.5)
@
"^DD",798.1,798.1,4,9)
@
"^DD",798.1,798.1,4,21,0)
^.001^2^2^3020403^^
"^DD",798.1,798.1,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,4,"DT")
3011109
"^DD",798.1,798.1,5,0)
DESCRIPTION^798.15^^2;0
"^DD",798.1,798.1,5,21,0)
^.001^2^2^3011009^^^
"^DD",798.1,798.1,5,21,1,0)
Any additional reference information related to
"^DD",798.1,798.1,5,21,2,0)
the registry may be stored in this field.
"^DD",798.1,798.1,5,23,0)
^.001^1^1^3011009^^
"^DD",798.1,798.1,5,23,1,0)
Content of this field is not used by the application.
"^DD",798.1,798.1,6.1,0)
BEFORE UPDATE^FX^^4;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.1,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.1,8.5)
@
"^DD",798.1,798.1,6.1,9)
@
"^DD",798.1,798.1,6.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.1,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.1,21,0)
^.001^7^7^3050427^^^^
"^DD",798.1,798.1,6.1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.1,21,3,0)
 
"^DD",798.1,798.1,6.1,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.1,21,5,0)
MUMPS function that will be called before adding a
"^DD",798.1,798.1,6.1,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.1,21,7,0)
be used to prepare any additional data.
"^DD",798.1,798.1,6.1,23,0)
^^20^20^3050427^
"^DD",798.1,798.1,6.1,23,1,0)
The call-back entry point must accept three parameters:
"^DD",798.1,798.1,6.1,23,2,0)
 
"^DD",798.1,798.1,6.1,23,3,0)
FDA - A reference to a local array that contains 
"^DD",798.1,798.1,6.1,23,4,0)
prepared data (for the UPDATE^DIE FileMan DSB call)
"^DD",798.1,798.1,6.1,23,5,0)
that should be stored as a new record in the ROR
"^DD",798.1,798.1,6.1,23,6,0)
REGISTRY RECORD (#798) file.
"^DD",798.1,798.1,6.1,23,7,0)
 
"^DD",798.1,798.1,6.1,23,8,0)
The main record uses "+1," placeholder and records of
"^DD",798.1,798.1,6.1,23,9,0)
the SELECTION RULE multiple use placeholders with
"^DD",798.1,798.1,6.1,23,10,0)
numbers starting from 1001.
"^DD",798.1,798.1,6.1,23,11,0)
 
"^DD",798.1,798.1,6.1,23,12,0)
See the source code of the $$ADD^RORUPD50 function and
"^DD",798.1,798.1,6.1,23,13,0)
the FileMan Programmer Manual for further details.
"^DD",798.1,798.1,6.1,23,14,0)
 
"^DD",798.1,798.1,6.1,23,15,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,6.1,23,16,0)
 
"^DD",798.1,798.1,6.1,23,17,0)
REGIEN - Registry IEN (in the file #798.1)
"^DD",798.1,798.1,6.1,23,18,0)
 
"^DD",798.1,798.1,6.1,23,19,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.1,23,20,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.1,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.1,"DT")
3011120
"^DD",798.1,798.1,6.2,0)
AFTER UPDATE^FX^^5;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.2,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.2,8.5)
@
"^DD",798.1,798.1,6.2,9)
@
"^DD",798.1,798.1,6.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.2,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.2,21,0)
^.001^8^8^3020816^^
"^DD",798.1,798.1,6.2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.2,21,3,0)
 
"^DD",798.1,798.1,6.2,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.2,21,5,0)
MUMPS function that will be called after adding a
"^DD",798.1,798.1,6.2,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.2,21,7,0)
be used to create record(s) in additional linked
"^DD",798.1,798.1,6.2,21,8,0)
file(s) of the local registry.
"^DD",798.1,798.1,6.2,23,0)
^^11^11^3050427^
"^DD",798.1,798.1,6.2,23,1,0)
The call-back function must accept three parameters:
"^DD",798.1,798.1,6.2,23,2,0)
 
"^DD",798.1,798.1,6.2,23,3,0)
IEN - An IEN of the newly added record of the ROR
"^DD",798.1,798.1,6.2,23,4,0)
REGISTRY RECORD file
"^DD",798.1,798.1,6.2,23,5,0)
 
"^DD",798.1,798.1,6.2,23,6,0)
PATIEN - Patient IEN (in file #2)
"^DD",798.1,798.1,6.2,23,7,0)
 
"^DD",798.1,798.1,6.2,23,8,0)
REGIEN - Registry IEN (in file #798.1)
"^DD",798.1,798.1,6.2,23,9,0)
 
"^DD",798.1,798.1,6.2,23,10,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.2,23,11,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.2,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.2,"DT")
3011120
"^DD",798.1,798.1,7,0)
EXTRACT PERIOD FOR NEW PATIENT^NJ5,0X^^0;5^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:+X'=X!(X>15000)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,7,3)
Enter number of days between 1 and 15000.
"^DD",798.1,798.1,7,8.5)
@
"^DD",798.1,798.1,7,9)
@
"^DD",798.1,798.1,7,20,0)
^.3LA^1^1
"^DD",798.1,798.1,7,20,1,0)
DEFINITION
"^DD",798.1,798.1,7,21,0)
^.001^11^11^3030717^^^
"^DD",798.1,798.1,7,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,7,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,7,21,3,0)
 
"^DD",798.1,798.1,7,21,4,0)
Enter the number of days that should be subtracted
"^DD",798.1,798.1,7,21,5,0)
from the earliest date when the patient passed one
"^DD",798.1,798.1,7,21,6,0)
of the selection rules. The result will be used as
"^DD",798.1,798.1,7,21,7,0)
the start date of the data extraction for this new
"^DD",798.1,798.1,7,21,8,0)
patient.
"^DD",798.1,798.1,7,21,9,0)
 
"^DD",798.1,798.1,7,21,10,0)
If this field is empty, the default value of 3650
"^DD",798.1,798.1,7,21,11,0)
is used.
"^DD",798.1,798.1,7,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,7,"DT")
3011109
"^DD",798.1,798.1,7,"V",0)
^.12P
"^DD",798.1,798.1,8,0)
ENABLE LOG^S^0:NO;1:YES;^0;6^Q
"^DD",798.1,798.1,8,20,0)
^.3LA^1^1
"^DD",798.1,798.1,8,20,1,0)
PARAMETERS
"^DD",798.1,798.1,8,21,0)
^^3^3^3060203^
"^DD",798.1,798.1,8,21,1,0)
Select "YES" to enable recording of different 
"^DD",798.1,798.1,8,21,2,0)
kinds of events (debug messages, errors, etc.)
"^DD",798.1,798.1,8,21,3,0)
generated by registry processes.
"^DD",798.1,798.1,8,23,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,8,23,1,0)
The ENABLE LOG field controls recording of the errors
"^DD",798.1,798.1,8,23,2,0)
and other events in the log file.
"^DD",798.1,798.1,8,23,3,0)
 
"^DD",798.1,798.1,8,23,4,0)
If internal value of the field is 0 or the field is 
"^DD",798.1,798.1,8,23,5,0)
empty, the recording of all events associated with the
"^DD",798.1,798.1,8,23,6,0)
registry is disabled.
"^DD",798.1,798.1,8,23,7,0)
 
"^DD",798.1,798.1,8,23,8,0)
If internal value of the field is 1, content of the
"^DD",798.1,798.1,8,23,9,0)
LOG EVENT multiple is analyzed to determine which
"^DD",798.1,798.1,8,23,10,0)
events (errors, warnings, etc.) should be recorded.
"^DD",798.1,798.1,8,"DT")
3000503
"^DD",798.1,798.1,8.1,0)
LOG EVENT^798.11S^^3;0
"^DD",798.1,798.1,8.1,20,0)
^.3LA^^0
"^DD",798.1,798.1,8.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,8.1,21,1,0)
The LOG EVENT multiple contain a list of event 
"^DD",798.1,798.1,8.1,21,2,0)
types that are enabled to record. 
"^DD",798.1,798.1,8.1,21,3,0)
 
"^DD",798.1,798.1,8.1,21,4,0)
If the list is empty and recording is enabled, 
"^DD",798.1,798.1,8.1,21,5,0)
all events except debug messages will be recorded.
"^DD",798.1,798.1,8.1,21,6,0)
 
"^DD",798.1,798.1,8.1,21,7,0)
Otherwise, only recording of the events from the
"^DD",798.1,798.1,8.1,21,8,0)
list and error messages will be enabled.
"^DD",798.1,798.1,8.1,"DT")
3050722
"^DD",798.1,798.1,10,0)
MESSAGE BUILDER^FX^^7;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(4)
"^DD",798.1,798.1,10,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,10,8.5)
@
"^DD",798.1,798.1,10,9)
@
"^DD",798.1,798.1,10,20,0)
^.3LA^1^1
"^DD",798.1,798.1,10,20,1,0)
DEFINITION
"^DD",798.1,798.1,10,21,0)
^^10^10^3060106^
"^DD",798.1,798.1,10,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,10,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,10,21,3,0)
 
"^DD",798.1,798.1,10,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external 
"^DD",798.1,798.1,10,21,5,0)
MUMPS function that will be called to generate the
"^DD",798.1,798.1,10,21,6,0)
registry-specific section of the HL7 message for
"^DD",798.1,798.1,10,21,7,0)
each record of the registry.
"^DD",798.1,798.1,10,21,8,0)
 
"^DD",798.1,798.1,10,21,9,0)
If this field has no value, the default entry 
"^DD",798.1,798.1,10,21,10,0)
point ($$REGDATA^ROREXT02) will be used.
"^DD",798.1,798.1,10,23,0)
^^28^28^3060106^
"^DD",798.1,798.1,10,23,1,0)
The call-back function must accept four parameters:
"^DD",798.1,798.1,10,23,2,0)
 
"^DD",798.1,798.1,10,23,3,0)
IEN - IEN of the registry record
"^DD",798.1,798.1,10,23,4,0)
 
"^DD",798.1,798.1,10,23,5,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,10,23,6,0)
 
"^DD",798.1,798.1,10,23,7,0)
[.]DXDTS - Either a single time frame in 
"^DD",798.1,798.1,10,23,8,0)
StartDate^EndDate format or a reference to a local 
"^DD",798.1,798.1,10,23,9,0)
variable containing the list of data extraction time 
"^DD",798.1,798.1,10,23,10,0)
frames. The main time frame should be stored in the
"^DD",798.1,798.1,10,23,11,0)
root node (see the $$DXPERIOD^ROREXTUT function for 
"^DD",798.1,798.1,10,23,12,0)
details):
"^DD",798.1,798.1,10,23,13,0)
 
"^DD",798.1,798.1,10,23,14,0)
  DXDTS(         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,15,0)
    DataArea,
"^DD",798.1,798.1,10,23,16,0)
      i)         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,17,0)
 
"^DD",798.1,798.1,10,23,18,0)
The function should add the text of the HL7 message 
"^DD",798.1,798.1,10,23,19,0)
after already existing nodes in the standard location:
"^DD",798.1,798.1,10,23,20,0)
^TMP("HLS",$J). DO NOT KILL THIS NODE! It contains the
"^DD",798.1,798.1,10,23,21,0)
previous messages of the batch.
"^DD",798.1,798.1,10,23,22,0)
 
"^DD",798.1,798.1,10,23,23,0)
If the message was generated successfully, the function
"^DD",798.1,798.1,10,23,24,0)
should return zero. A negative value corresponds to the
"^DD",798.1,798.1,10,23,25,0)
error code.
"^DD",798.1,798.1,10,23,26,0)
                                                                    
"^DD",798.1,798.1,10,23,27,0)
See the source code of the $$REGDATA^ROREXT02 function 
"^DD",798.1,798.1,10,23,28,0)
for further details.
"^DD",798.1,798.1,10,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,10,"DT")
3011120
"^DD",798.1,798.1,11,0)
REGISTRY STATUS^S^0:ACTIVE;1:INACTIVE;^0;7^Q
"^DD",798.1,798.1,11,1,0)
^.1^^0
"^DD",798.1,798.1,11,20,0)
^.3LA^1^1
"^DD",798.1,798.1,11,20,1,0)
PARAMETERS
"^DD",798.1,798.1,11,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,11,21,1,0)
Select the "INACTIVE" code if you want to exclude
"^DD",798.1,798.1,11,21,2,0)
the registry from the regular registry updates and
"^DD",798.1,798.1,11,21,3,0)
data transmissions.
"^DD",798.1,798.1,11,"DT")
3020424
"^DD",798.1,798.1,12,0)
EXTRACTED RESULT^798.112I^^8;0
"^DD",798.1,798.1,12,9)
@
"^DD",798.1,798.1,12,20,0)
^.3LA^1^1
"^DD",798.1,798.1,12,20,1,0)
DEFINITION
"^DD",798.1,798.1,12,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,12,21,1,0)
This multiple contains a list of Lab result codes.
"^DD",798.1,798.1,12,21,2,0)
These results will be extracted and transmitted to
"^DD",798.1,798.1,12,21,3,0)
AAC.
"^DD",798.1,798.1,12,"DT")
3010629
"^DD",798.1,798.1,13,0)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,13,3)
 
"^DD",798.1,798.1,13,8.5)
@
"^DD",798.1,798.1,13,9)
@
"^DD",798.1,798.1,13,12)
Only Event Drivers from the "ROR" namespace can be selected!
"^DD",798.1,798.1,13,12.1)
S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E"""
"^DD",798.1,798.1,13,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13,20,1,0)
HL7
"^DD",798.1,798.1,13,20,2,0)
DEFINITION
"^DD",798.1,798.1,13,21,0)
^.001^6^6^3120501^^^^
"^DD",798.1,798.1,13,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13,21,3,0)
 
"^DD",798.1,798.1,13,21,4,0)
This field contains a pointer to the protocol in 
"^DD",798.1,798.1,13,21,5,0)
the PROTOCOL file that is used as the event driver
"^DD",798.1,798.1,13,21,6,0)
for sending HL7 messages.
"^DD",798.1,798.1,13,23,0)
^^5^5^3120501^
"^DD",798.1,798.1,13,23,1,0)
If several registries are processed by the same nightly
"^DD",798.1,798.1,13,23,2,0)
task and they have different values of the PROTOCOL
"^DD",798.1,798.1,13,23,3,0)
field, then the registries are grouped by the value of
"^DD",798.1,798.1,13,23,4,0)
this field and data extraction is performed separately
"^DD",798.1,798.1,13,23,5,0)
for each of those groups.
"^DD",798.1,798.1,13,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13,"DT")
3011112
"^DD",798.1,798.1,13.1,0)
MAXIMUM MESSAGE SIZE^NJ4,1^^9;2^K:+X'=X!(X>99)!(X<0)!(X?.E1"."2N.N) X
"^DD",798.1,798.1,13.1,3)
Enter maximum size (in megabytes) between 0 and 99, 1 decimal digit.
"^DD",798.1,798.1,13.1,8.5)
@
"^DD",798.1,798.1,13.1,9)
@
"^DD",798.1,798.1,13.1,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.1,20,1,0)
HL7
"^DD",798.1,798.1,13.1,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,13.1,21,1,0)
This field stores the maximum size (in megabytes)
"^DD",798.1,798.1,13.1,21,2,0)
of a batch HL7 message that can be sent to Austin
"^DD",798.1,798.1,13.1,21,3,0)
Automation Center (AAC). If this field is empty or
"^DD",798.1,798.1,13.1,21,4,0)
contains 0, the size is not limited.
"^DD",798.1,798.1,13.1,21,5,0)
 
"^DD",798.1,798.1,13.1,21,6,0)
You must coordinate your intentions with AAC
"^DD",798.1,798.1,13.1,21,7,0)
support personnel if you are going to edit this
"^DD",798.1,798.1,13.1,21,8,0)
field.
"^DD",798.1,798.1,13.1,23,0)
^^8^8^3060203^
"^DD",798.1,798.1,13.1,23,1,0)
Actual size of an HL7 batch can be greater than the
"^DD",798.1,798.1,13.1,23,2,0)
value of this field because the software does not break
"^DD",798.1,798.1,13.1,23,3,0)
in the middle of an individual HL7 message.
"^DD",798.1,798.1,13.1,23,4,0)
 
"^DD",798.1,798.1,13.1,23,5,0)
For example, if the maximum size is 10Mb, the current
"^DD",798.1,798.1,13.1,23,6,0)
size is 9Mb and 3Mb should be sent for the patient
"^DD",798.1,798.1,13.1,23,7,0)
being processed, then the actual size of the batch will
"^DD",798.1,798.1,13.1,23,8,0)
be 12Mb.
"^DD",798.1,798.1,13.1,"DT")
3020730
"^DD",798.1,798.1,13.2,0)
ALERT FREQUENCY^NJ2,0^^9;3^K:+X'=X!(X>10)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,13.2,3)
Type a Number between 1 and 10, 0 Decimal Digits
"^DD",798.1,798.1,13.2,8.5)
@
"^DD",798.1,798.1,13.2,9)
@
"^DD",798.1,798.1,13.2,11,0)
^.2LAP^^0
"^DD",798.1,798.1,13.2,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.2,20,1,0)
HL7
"^DD",798.1,798.1,13.2,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.2,21,0)
^.001^20^20^3060203^^
"^DD",798.1,798.1,13.2,21,1,0)
Value of the ALERT FREQUENCY field determines how
"^DD",798.1,798.1,13.2,21,2,0)
often e-mail notifications and VistA alerts are 
"^DD",798.1,798.1,13.2,21,3,0)
sent to the AAC and local staff in case of
"^DD",798.1,798.1,13.2,21,4,0)
problems with the site's CCR software (data
"^DD",798.1,798.1,13.2,21,5,0)
extraction problems, unsent HL7 messages, etc.).
"^DD",798.1,798.1,13.2,21,6,0)
 
"^DD",798.1,798.1,13.2,21,7,0)
If this field is empty or 0, notifications are
"^DD",798.1,798.1,13.2,21,8,0)
not sent.
"^DD",798.1,798.1,13.2,21,9,0)
 
"^DD",798.1,798.1,13.2,21,10,0)
Otherwise, the nightly task increments the error
"^DD",798.1,798.1,13.2,21,11,0)
counters and checks the remainders from division
"^DD",798.1,798.1,13.2,21,12,0)
of the counters by the value of this field. When a
"^DD",798.1,798.1,13.2,21,13,0)
reminder becomes 0, the software sends the
"^DD",798.1,798.1,13.2,21,14,0)
corresponding e-mail notification to the AAC and
"^DD",798.1,798.1,13.2,21,15,0)
generates the VistA alert to the local staff
"^DD",798.1,798.1,13.2,21,16,0)
listed in the NOTIFICATION multiple (14).
"^DD",798.1,798.1,13.2,21,17,0)
 
"^DD",798.1,798.1,13.2,21,18,0)
For example, if the nightly task runs every night 
"^DD",798.1,798.1,13.2,21,19,0)
and the ALERT FREQUENCY is 2, then alerts and 
"^DD",798.1,798.1,13.2,21,20,0)
notifications will be sent every other night.
"^DD",798.1,798.1,13.2,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,13.2,23,1,0)
See description of the HL7 PROBLEM COUNTER field (19.3)
"^DD",798.1,798.1,13.2,23,2,0)
and source code of the $$CHECKMSG^ROR10 function for
"^DD",798.1,798.1,13.2,23,3,0)
more details.
"^DD",798.1,798.1,13.2,"DT")
3050503
"^DD",798.1,798.1,13.3,0)
NATIONAL NOTIFICATION E-MAIL^FX^^9;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>50!($L(X)<3)!(X'?1.ANP1"@"1.ANP) X
"^DD",798.1,798.1,13.3,3)
Answer must be a valid e-mail address (3-50 characters in length).
"^DD",798.1,798.1,13.3,8.5)
@
"^DD",798.1,798.1,13.3,9)
@
"^DD",798.1,798.1,13.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,13.3,20,1,0)
DEFINITION
"^DD",798.1,798.1,13.3,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,13.3,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13.3,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13.3,21,3,0)
 
"^DD",798.1,798.1,13.3,21,4,0)
The NATIONAL NOTIFICATION E-MAIL field holds an 
"^DD",798.1,798.1,13.3,21,5,0)
e-mail address where notifications about registry
"^DD",798.1,798.1,13.3,21,6,0)
problems (mostly, data transmission problems) are
"^DD",798.1,798.1,13.3,21,7,0)
sent to.
"^DD",798.1,798.1,13.3,21,8,0)
 
"^DD",798.1,798.1,13.3,21,9,0)
If the field is empty, e-mail notifications will
"^DD",798.1,798.1,13.3,21,10,0)
not be sent.
"^DD",798.1,798.1,13.3,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13.3,"DT")
3030429
"^DD",798.1,798.1,14,0)
NOTIFICATION^798.114P^^10;0
"^DD",798.1,798.1,14,21,0)
^.001^3^3^3050525^^^
"^DD",798.1,798.1,14,21,1,0)
This multiple contains a list of VistA users that
"^DD",798.1,798.1,14,21,2,0)
should be notified about problems with the local
"^DD",798.1,798.1,14,21,3,0)
registry.
"^DD",798.1,798.1,14,"DT")
3050427
"^DD",798.1,798.1,15.1,0)
LAG DAYS^NJ1,0^^11;1^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,15.1,3)
Enter number of days between 1 and 7.
"^DD",798.1,798.1,15.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,15.1,20,1,0)
PARAMETERS
"^DD",798.1,798.1,15.1,21,0)
^.001^12^12^3120501^^^^
"^DD",798.1,798.1,15.1,21,1,0)
Number of days that defines an overlap of the data
"^DD",798.1,798.1,15.1,21,2,0)
searches during the registry updates and a data
"^DD",798.1,798.1,15.1,21,3,0)
extraction delay during the regular data
"^DD",798.1,798.1,15.1,21,4,0)
extractions.
"^DD",798.1,798.1,15.1,21,5,0)
 
"^DD",798.1,798.1,15.1,21,6,0)
If this field is empty, the default value of 1 is 
"^DD",798.1,798.1,15.1,21,7,0)
used by the registry update and data extraction
"^DD",798.1,798.1,15.1,21,8,0)
processes.
"^DD",798.1,798.1,15.1,21,9,0)
 
"^DD",798.1,798.1,15.1,21,10,0)
See the package documentation or Technical
"^DD",798.1,798.1,15.1,21,11,0)
Description of the field in the data dictionary
"^DD",798.1,798.1,15.1,21,12,0)
for more information.
"^DD",798.1,798.1,15.1,23,0)
^^37^37^3120501^
"^DD",798.1,798.1,15.1,23,1,0)
Clinical data may be entered into the VistA system 
"^DD",798.1,798.1,15.1,23,2,0)
later than they are available. For example, an
"^DD",798.1,798.1,15.1,23,3,0)
encounter that occurred today may not get entered into
"^DD",798.1,798.1,15.1,23,4,0)
the system until tomorrow.
"^DD",798.1,798.1,15.1,23,5,0)
 
"^DD",798.1,798.1,15.1,23,6,0)
Because of this delay, data may be missed by the
"^DD",798.1,798.1,15.1,23,7,0)
registry update and data extraction processes if they
"^DD",798.1,798.1,15.1,23,8,0)
look for the data until the current date and then
"^DD",798.1,798.1,15.1,23,9,0)
continue from that point next time.
"^DD",798.1,798.1,15.1,23,10,0)
 
"^DD",798.1,798.1,15.1,23,11,0)
To avoid this problem, data search intervals are 
"^DD",798.1,798.1,15.1,23,12,0)
overlapped by the number of days indicated by this 
"^DD",798.1,798.1,15.1,23,13,0)
field. The registry update process looks for new data 
"^DD",798.1,798.1,15.1,23,14,0)
not from the end date of its previous run but from the 
"^DD",798.1,798.1,15.1,23,15,0)
date that is earlier by the number of days from this 
"^DD",798.1,798.1,15.1,23,16,0)
field. This overlap increases the chances of data
"^DD",798.1,798.1,15.1,23,17,0)
entered retrospectively to be found by the next run of
"^DD",798.1,798.1,15.1,23,18,0)
the registry update process.
"^DD",798.1,798.1,15.1,23,19,0)
 
"^DD",798.1,798.1,15.1,23,20,0)
Moreover, the regular data extraction process extracts
"^DD",798.1,798.1,15.1,23,21,0)
data not until the date when the process is run but
"^DD",798.1,798.1,15.1,23,22,0)
until the date that is earlier by the number of days
"^DD",798.1,798.1,15.1,23,23,0)
from this field. So, this is a delay that allows the
"^DD",798.1,798.1,15.1,23,24,0)
data to be entered retrospectively before the next data
"^DD",798.1,798.1,15.1,23,25,0)
extraction.
"^DD",798.1,798.1,15.1,23,26,0)
 
"^DD",798.1,798.1,15.1,23,27,0)
If the value of this field is too small, you may miss 
"^DD",798.1,798.1,15.1,23,28,0)
some data entered retrospectively. If it is too big,
"^DD",798.1,798.1,15.1,23,29,0)
the national registry will not contain up to date
"^DD",798.1,798.1,15.1,23,30,0)
information (data will be delayed by the number of days
"^DD",798.1,798.1,15.1,23,31,0)
indicated by this field) and the registry update
"^DD",798.1,798.1,15.1,23,32,0)
process will take more time to complete, because 
"^DD",798.1,798.1,15.1,23,33,0)
additional time will be spent processing the data from
"^DD",798.1,798.1,15.1,23,34,0)
the overlap interval).
"^DD",798.1,798.1,15.1,23,35,0)
 
"^DD",798.1,798.1,15.1,23,36,0)
When several registries are processed at the same time,
"^DD",798.1,798.1,15.1,23,37,0)
the maximum value of the LAG DAYS field is used.
"^DD",798.1,798.1,15.1,"DT")
3020426
"^DD",798.1,798.1,18,0)
SECURITY KEY^798.118^^18;0
"^DD",798.1,798.1,18,9)
@
"^DD",798.1,798.1,18,20,0)
^.3LA^1^1
"^DD",798.1,798.1,18,20,1,0)
DEFINITION
"^DD",798.1,798.1,18,21,0)
^.001^2^2^3050722^^^^
"^DD",798.1,798.1,18,21,1,0)
This multiple stores a list of security keys 
"^DD",798.1,798.1,18,21,2,0)
associated with the registry.
"^DD",798.1,798.1,19.1,0)
NUMBER OF PATIENTS^NJ9,0^^19;1^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.1,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.1,8.5)
@
"^DD",798.1,798.1,19.1,9)
@
"^DD",798.1,798.1,19.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.1,20,1,0)
STATE
"^DD",798.1,798.1,19.1,21,0)
^.001^3^3^3060106^^^
"^DD",798.1,798.1,19.1,21,1,0)
The NUMBER OF PATIENTS field contains total number
"^DD",798.1,798.1,19.1,21,2,0)
of confirmed patients in the registry right after
"^DD",798.1,798.1,19.1,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.1,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.1,23,1,0)
This field should not be edited. It is updated
"^DD",798.1,798.1,19.1,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.1,23,3,0)
the registry update.
"^DD",798.1,798.1,19.1,"DT")
3031027
"^DD",798.1,798.1,19.2,0)
NUMBER OF PENDING PATIENTS^NJ9,0^^19;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.2,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.2,8.5)
@
"^DD",798.1,798.1,19.2,9)
@
"^DD",798.1,798.1,19.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.2,20,1,0)
STATE
"^DD",798.1,798.1,19.2,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,19.2,21,1,0)
The NUMBER OF PENDING PATIENTS field stores number
"^DD",798.1,798.1,19.2,21,2,0)
of pending patients in the registry right after
"^DD",798.1,798.1,19.2,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.2,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.2,23,1,0)
This field should not be edited. It is updated 
"^DD",798.1,798.1,19.2,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.2,23,3,0)
the registry update.
"^DD",798.1,798.1,19.2,"DT")
3050627
"^DD",798.1,798.1,19.3,0)
HL7 ATTEMPT COUNTER^NJ3,0^^19;3^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.3,3)
Type a Number between 0 and 999, 0 Decimal Digits
"^DD",798.1,798.1,19.3,8.5)
@
"^DD",798.1,798.1,19.3,9)
@
"^DD",798.1,798.1,19.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.3,20,1,0)
HL7
"^DD",798.1,798.1,19.3,21,0)
^^10^10^3060203^
"^DD",798.1,798.1,19.3,21,1,0)
The HL7 ATTEMPT COUNTER field is incremented each
"^DD",798.1,798.1,19.3,21,2,0)
time the nightly task (the Registry Update & Data 
"^DD",798.1,798.1,19.3,21,3,0)
Extraction [ROR TASK] option) encounters at least
"^DD",798.1,798.1,19.3,21,4,0)
one unsent HL7 message.
"^DD",798.1,798.1,19.3,21,5,0)
 
"^DD",798.1,798.1,19.3,21,6,0)
The nightly task assigns 1 to the field when new
"^DD",798.1,798.1,19.3,21,7,0)
HL7 messages are generated (only if all previous
"^DD",798.1,798.1,19.3,21,8,0)
messages have been successfully transmitted).
"^DD",798.1,798.1,19.3,21,9,0)
 
"^DD",798.1,798.1,19.3,21,10,0)
Usually, you should not edit this field.
"^DD",798.1,798.1,19.3,23,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,19.3,23,1,0)
See description of the ALERT FREQUENCY field (13.2) and
"^DD",798.1,798.1,19.3,23,2,0)
source code of the $$CHECKMSG^ROR10 function for more
"^DD",798.1,798.1,19.3,23,3,0)
details.
"^DD",798.1,798.1,19.3,"DT")
3050701
"^DD",798.1,798.1,21.01,0)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,21.01,8.5)
@
"^DD",798.1,798.1,21.01,9)
@
"^DD",798.1,798.1,21.01,12)
Only "Auto" definitions can be selected.
"^DD",798.1,798.1,21.01,12.1)
S DIC("S")="I $P($G(^(0)),U,2)=1"
"^DD",798.1,798.1,21.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.01,20,1,0)
STATE
"^DD",798.1,798.1,21.01,21,0)
^^3^3^3051110^
"^DD",798.1,798.1,21.01,21,1,0)
This field stores the pointer to the historical 
"^DD",798.1,798.1,21.01,21,2,0)
data extraction definition that was used during
"^DD",798.1,798.1,21.01,21,3,0)
the previous run of the nightly task.
"^DD",798.1,798.1,21.01,"DT")
3051110
"^DD",798.1,798.1,21.04,0)
LOCAL DATA RESENT^D^^21;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.04,8.5)
@
"^DD",798.1,798.1,21.04,9)
@
"^DD",798.1,798.1,21.04,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.04,20,1,0)
STATE
"^DD",798.1,798.1,21.04,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,21.04,21,1,0)
This field holds the date when all local registry 
"^DD",798.1,798.1,21.04,21,2,0)
data was resent to AAC after the installation (to 
"^DD",798.1,798.1,21.04,21,3,0)
fix the data incorrectly overwritten with the 
"^DD",798.1,798.1,21.04,21,4,0)
historical data).
"^DD",798.1,798.1,21.04,21,5,0)
 
"^DD",798.1,798.1,21.04,21,6,0)
Usually, you should not modify this field. If you
"^DD",798.1,798.1,21.04,21,7,0)
need to resend all local registry and demographic
"^DD",798.1,798.1,21.04,21,8,0)
data to AAC, you should clear this field. The data
"^DD",798.1,798.1,21.04,21,9,0)
will be resent automatically during the next
"^DD",798.1,798.1,21.04,21,10,0)
nightly transmission.
"^DD",798.1,798.1,21.04,23,0)
^.001^4^4^3060203^^^^
"^DD",798.1,798.1,21.04,23,1,0)
The value of this field is analyzed and modified by the
"^DD",798.1,798.1,21.04,23,2,0)
$$REMARK^RORUTL05 function. The function is called by
"^DD",798.1,798.1,21.04,23,3,0)
the nightly registry update and data transmission task
"^DD",798.1,798.1,21.04,23,4,0)
(TASK^ROR).
"^DD",798.1,798.1,21.04,"DT")
3020508
"^DD",798.1,798.1,21.05,0)
HDT DATE/TIME^D^^21;4^S %DT="ETX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.05,8.5)
@
"^DD",798.1,798.1,21.05,9)
@
"^DD",798.1,798.1,21.05,21,0)
^.001^4^4^3060123^^
"^DD",798.1,798.1,21.05,21,1,0)
This field is initialized with the current 
"^DD",798.1,798.1,21.05,21,2,0)
date/time by the registry setup task upon
"^DD",798.1,798.1,21.05,21,3,0)
successful completion of the initial registry
"^DD",798.1,798.1,21.05,21,4,0)
population.
"^DD",798.1,798.1,21.05,23,0)
^^4^4^3060123^
"^DD",798.1,798.1,21.05,23,1,0)
The field is populated by the $$UPDHDTRP^RORSETU2 
"^DD",798.1,798.1,21.05,23,2,0)
function during the registry setup.
"^DD",798.1,798.1,21.05,23,3,0)
 
"^DD",798.1,798.1,21.05,23,4,0)
Do not delete value of this field!
"^DD",798.1,798.1,21.05,"DT")
3031027
"^DD",798.1,798.1,22,0)
LAST BATCH CONTROL ID^798.122^^22;0
"^DD",798.1,798.1,22,9)
@
"^DD",798.1,798.1,22,20,0)
^.3LA^1^1
"^DD",798.1,798.1,22,20,1,0)
HL7
"^DD",798.1,798.1,22,21,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,22,21,1,0)
This multiple contains a list of identifiers of
"^DD",798.1,798.1,22,21,2,0)
the HL7 batch messages generated during the
"^DD",798.1,798.1,22,21,3,0)
previous run of the nightly task.
"^DD",798.1,798.1,22,23,0)
^^3^3^3060203^
"^DD",798.1,798.1,22,23,1,0)
The nightly task checks status of each message from 
"^DD",798.1,798.1,22,23,2,0)
this multiple before the registry update and data
"^DD",798.1,798.1,22,23,3,0)
extraction.
"^DD",798.1,798.1,22,"DT")
3050504
"^DD",798.1,798.1,25,0)
ENABLE PROTOCOLS^S^0:NO;1:YES;^0;14^Q
"^DD",798.1,798.1,25,1,0)
^.1
"^DD",798.1,798.1,25,1,1,0)
798.1^AEP^MUMPS
"^DD",798.1,798.1,25,1,1,1)
S:X ^ROR(798.1,"AEP",DA)=""
"^DD",798.1,798.1,25,1,1,2)
K ^ROR(798.1,"AEP",DA)
"^DD",798.1,798.1,25,1,1,3)
Do not delete!
"^DD",798.1,798.1,25,1,1,"%D",0)
^^10^10^3060203^
"^DD",798.1,798.1,25,1,1,"%D",1,0)
This cross-reference controls the package event 
"^DD",798.1,798.1,25,1,1,"%D",2,0)
protocols.
"^DD",798.1,798.1,25,1,1,"%D",3,0)
 
"^DD",798.1,798.1,25,1,1,"%D",4,0)
If at least one registry has the ENABLE PROTOCOLS
"^DD",798.1,798.1,25,1,1,"%D",5,0)
field set to "YES", the ^ROR(798.1,"AEP") node
"^DD",798.1,798.1,25,1,1,"%D",6,0)
will be defined and the protocols will call the
"^DD",798.1,798.1,25,1,1,"%D",7,0)
processing routines.
"^DD",798.1,798.1,25,1,1,"%D",8,0)
 
"^DD",798.1,798.1,25,1,1,"%D",9,0)
Otherwise, they will run idle unless they are 
"^DD",798.1,798.1,25,1,1,"%D",10,0)
disabled or unsubscribed manually.
"^DD",798.1,798.1,25,1,1,"DT")
3020418
"^DD",798.1,798.1,25,20,0)
^.3LA^1^1
"^DD",798.1,798.1,25,20,1,0)
PARAMETERS
"^DD",798.1,798.1,25,21,0)
^^13^13^3060203^
"^DD",798.1,798.1,25,21,1,0)
If this field is set to "YES", event protocols
"^DD",798.1,798.1,25,21,2,0)
will be used by the package to speed up the 
"^DD",798.1,798.1,25,21,3,0)
registry processing.
"^DD",798.1,798.1,25,21,4,0)
 
"^DD",798.1,798.1,25,21,5,0)
The protocols create references to patient events
"^DD",798.1,798.1,25,21,6,0)
in the ROR PATIENT EVENTS file. Only those 
"^DD",798.1,798.1,25,21,7,0)
patients that have new references will be 
"^DD",798.1,798.1,25,21,8,0)
processed by the next registry update.
"^DD",798.1,798.1,25,21,9,0)
 
"^DD",798.1,798.1,25,21,10,0)
If several registries are updated at the same 
"^DD",798.1,798.1,25,21,11,0)
time and at least one of them has this field set 
"^DD",798.1,798.1,25,21,12,0)
to "YES", all these registries will be processed 
"^DD",798.1,798.1,25,21,13,0)
using event references.
"^DD",798.1,798.1,25,23,0)
^.001^11^11^3060203^^
"^DD",798.1,798.1,25,23,1,0)
This field controls both the registry update engine 
"^DD",798.1,798.1,25,23,2,0)
and the event protocols.
"^DD",798.1,798.1,25,23,3,0)
 
"^DD",798.1,798.1,25,23,4,0)
If at least one of the defined registries enables the
"^DD",798.1,798.1,25,23,5,0)
protocols, they will process the events and create
"^DD",798.1,798.1,25,23,6,0)
references in the ROR PATIENT EVENTS file (#798.3).
"^DD",798.1,798.1,25,23,7,0)
 
"^DD",798.1,798.1,25,23,8,0)
Otherwise, the protocols will be executed (if they are
"^DD",798.1,798.1,25,23,9,0)
not disabled or unsubscribed manually) but will not
"^DD",798.1,798.1,25,23,10,0)
call processing routines and will not create references
"^DD",798.1,798.1,25,23,11,0)
in file #798.3.
"^DD",798.1,798.1,25,"DT")
3020418
"^DD",798.1,798.1,26,0)
EXCLUDE EMPLOYEES^SX^0:NO;1:YES;^0;10^Q:$$VAEDT^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,8.5)
@
"^DD",798.1,798.1,26,9)
@
"^DD",798.1,798.1,26,20,0)
^.3LA^1^1
"^DD",798.1,798.1,26,20,1,0)
DEFINITION
"^DD",798.1,798.1,26,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,26,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,26,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,26,21,3,0)
 
"^DD",798.1,798.1,26,21,4,0)
If this field is set to "YES", patients who are
"^DD",798.1,798.1,26,21,5,0)
employees will not be processed by the registry
"^DD",798.1,798.1,26,21,6,0)
update or data extraction functions.
"^DD",798.1,798.1,26,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,"DT")
3020802
"^DD",798.1,798.1,27,0)
AVAILABLE REPORTS^FX^^27;E1,250^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",798.1,798.1,27,3)
Answer must be 1-250 characters in length.
"^DD",798.1,798.1,27,8.5)
@
"^DD",798.1,798.1,27,9)
@
"^DD",798.1,798.1,27,20,0)
^.3LA^1^1
"^DD",798.1,798.1,27,20,1,0)
DEFINITION
"^DD",798.1,798.1,27,21,0)
^^7^7^3060203^
"^DD",798.1,798.1,27,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,27,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,27,21,3,0)
 
"^DD",798.1,798.1,27,21,4,0)
The AVAILABLE REPORTS field stores a list of 
"^DD",798.1,798.1,27,21,5,0)
report codes (not the IENs!) separated by commas.
"^DD",798.1,798.1,27,21,6,0)
These reports will be available for this registry
"^DD",798.1,798.1,27,21,7,0)
in the GUI.
"^DD",798.1,798.1,27,23,0)
^.001^5^5^3060203^^^^
"^DD",798.1,798.1,27,23,1,0)
The GUI loads the value of this field using the ROR 
"^DD",798.1,798.1,27,23,2,0)
REPORTS AVAILABLE remote procedure.
"^DD",798.1,798.1,27,23,3,0)
 
"^DD",798.1,798.1,27,23,4,0)
See the data dictionary of the ROR REPORT PARAMETERS 
"^DD",798.1,798.1,27,23,5,0)
file (#799.12) for more details.
"^DD",798.1,798.1,27,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,27,"DT")
3030417
"^DD",798.1,798.1,28,0)
LOCAL TEST NAME^798.128PI^^28;0
"^DD",798.1,798.1,28,20,0)
^.3LA^1^1
"^DD",798.1,798.1,28,20,1,0)
PARAMETERS
"^DD",798.1,798.1,28,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,28,21,1,0)
This multiple maps local lab tests to the 
"^DD",798.1,798.1,28,21,2,0)
predefined lab test groups that are used in the 
"^DD",798.1,798.1,28,21,3,0)
reports.
"^DD",798.1,798.1,28,"DT")
3030402
"^DD",798.1,798.1,29,0)
LOCAL DRUG NAME^798.129P^^29;0
"^DD",798.1,798.1,29,20,0)
^.3LA^1^1
"^DD",798.1,798.1,29,20,1,0)
PARAMETERS
"^DD",798.1,798.1,29,21,0)
^^3^3^3060106^
"^DD",798.1,798.1,29,21,1,0)
This multiple maps local medication names to the
"^DD",798.1,798.1,29,21,2,0)
predefined medication groups that are used in the
"^DD",798.1,798.1,29,21,3,0)
reports.
"^DD",798.1,798.1,30,0)
REPORT STATS^798.12P^^30;0
"^DD",798.1,798.1,30,9)
@
"^DD",798.1,798.1,30,20,0)
^.3LA^1^1
"^DD",798.1,798.1,30,20,1,0)
STATE
"^DD",798.1,798.1,30,21,0)
^.001^4^4^3120228^^^
"^DD",798.1,798.1,30,21,1,0)
Records of this multiple store the statistic data 
"^DD",798.1,798.1,30,21,2,0)
related to running reports. Usually, the stats are
"^DD",798.1,798.1,30,21,3,0)
reset after successful data transmission to the
"^DD",798.1,798.1,30,21,4,0)
AAC.
"^DD",798.1,798.1,30,23,0)
^.001^7^7^3120228^^
"^DD",798.1,798.1,30,23,1,0)
Please do not edit the records of this multiple
"^DD",798.1,798.1,30,23,2,0)
directly. Use the entry points of the RORTSK12 routine
"^DD",798.1,798.1,30,23,3,0)
instead.
"^DD",798.1,798.1,30,23,4,0)
 
"^DD",798.1,798.1,30,23,5,0)
The input transform associated with the .01 field of 
"^DD",798.1,798.1,30,23,6,0)
this multiple guarantees that each report has only one
"^DD",798.1,798.1,30,23,7,0)
corresponding record in the multiple.
"^DD",798.1,798.1,31,0)
AUTO-CONFIRM^S^0:NO;1:YES;^6;1^Q
"^DD",798.1,798.1,31,1,0)
^.1
"^DD",798.1,798.1,31,1,1,0)
798.1^C
"^DD",798.1,798.1,31,1,1,1)
S ^ROR(798.1,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.1,31,1,1,2)
K ^ROR(798.1,"C",$E(X,1,30),DA)
"^DD",798.1,798.1,31,1,1,"DT")
3120301
"^DD",798.1,798.1,31,3)
Enter 'Yes' if the status of patients added to this registry should be automatically confirmed.
"^DD",798.1,798.1,31,21,0)
^^4^4^3120503^
"^DD",798.1,798.1,31,21,1,0)
This field is used during the registry update to set the status of new 
"^DD",798.1,798.1,31,21,2,0)
patients.  If the registry is set to auto-confirm, the patient status is
"^DD",798.1,798.1,31,21,3,0)
set to 'Confirmed'.  If auto-confirm is no, the patient status is set to
"^DD",798.1,798.1,31,21,4,0)
'Pending'.
"^DD",798.1,798.1,31,"DT")
3120301
"^DD",798.1,798.11,0)
LOG EVENT SUB-FIELD^^.01^1
"^DD",798.1,798.11,0,"DT")
3010712
"^DD",798.1,798.11,0,"NM","LOG EVENT")
 
"^DD",798.1,798.11,0,"UP")
798.1
"^DD",798.1,798.11,.01,0)
LOG EVENT^MSX^1:Debug;2:Information;3:Data Quality;4:Warning;5:Database Error;6:Error;^0;1^Q
"^DD",798.1,798.11,.01,1,0)
^.1^^0
"^DD",798.1,798.11,.01,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.11,.01,21,1,0)
Select the type of the event if you want to enable
"^DD",798.1,798.11,.01,21,2,0)
recording of these events. If the list is empty,
"^DD",798.1,798.11,.01,21,3,0)
recording of all events is enabled. Otherwise,
"^DD",798.1,798.11,.01,21,4,0)
only events from the list and error messages will 
"^DD",798.1,798.11,.01,21,5,0)
be recorded.
"^DD",798.1,798.11,.01,21,6,0)
 
"^DD",798.1,798.11,.01,21,7,0)
Debug messages are exclusions from this rule (they
"^DD",798.1,798.11,.01,21,8,0)
are not logged if the ENABLE LOG field is set to
"^DD",798.1,798.11,.01,21,9,0)
"YES" and this multiple is empty). Their recording
"^DD",798.1,798.11,.01,21,10,0)
can only be enabled explicitly.
"^DD",798.1,798.11,.01,23,0)
^.001^9^9^3060203^^^^
"^DD",798.1,798.11,.01,23,1,0)
If several registries are processed at the same time,
"^DD",798.1,798.11,.01,23,2,0)
the recording parameters are combined.
"^DD",798.1,798.11,.01,23,3,0)
 
"^DD",798.1,798.11,.01,23,4,0)
If one of the registries requests recording of all 
"^DD",798.1,798.11,.01,23,5,0)
events, all events except the debug messages (type 1)
"^DD",798.1,798.11,.01,23,6,0)
will be recorded for all registries.
"^DD",798.1,798.11,.01,23,7,0)
 
"^DD",798.1,798.11,.01,23,8,0)
Otherwise, merged content of the LOG EVENT multiples
"^DD",798.1,798.11,.01,23,9,0)
will determine the events to be recorded.
"^DD",798.1,798.11,.01,"DT")
3050722
"^DD",798.1,798.112,0)
EXTRACTED RESULT SUB-FIELD^^.03^3
"^DD",798.1,798.112,0,"DT")
3030318
"^DD",798.1,798.112,0,"ID","WRITE")
D EN^DDIOL($P(^(0),U,2),"","?20")
"^DD",798.1,798.112,0,"IX","B",798.112,.01)

"^DD",798.1,798.112,0,"IX","C",798.112,.02)

"^DD",798.1,798.112,0,"NM","EXTRACTED RESULT")
 
"^DD",798.1,798.112,0,"UP")
798.1
"^DD",798.1,798.112,.01,0)
LOINC CODE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:X'?1(1.7N,1"*") X
"^DD",798.1,798.112,.01,1,0)
^.1
"^DD",798.1,798.112,.01,1,1,0)
798.112^B
"^DD",798.1,798.112,.01,1,1,1)
S ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.01,1,1,2)
K ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)
"^DD",798.1,798.112,.01,1,1,3)
Do not delete!
"^DD",798.1,798.112,.01,1,1,"DT")
3010716
"^DD",798.1,798.112,.01,3)
Answer must be 1-7 characters in length.
"^DD",798.1,798.112,.01,8.5)
@
"^DD",798.1,798.112,.01,9)
@
"^DD",798.1,798.112,.01,21,0)
^^11^11^3011015^
"^DD",798.1,798.112,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.01,21,3,0)
 
"^DD",798.1,798.112,.01,21,4,0)
Enter the unique numeric LOINC code (without the
"^DD",798.1,798.112,.01,21,5,0)
check digit) of the Lab result to be extracted. If
"^DD",798.1,798.112,.01,21,6,0)
you want to use only NLT code, enter zero as the
"^DD",798.1,798.112,.01,21,7,0)
value of this field.
"^DD",798.1,798.112,.01,21,8,0)
 
"^DD",798.1,798.112,.01,21,9,0)
If you want to extract all results, create a
"^DD",798.1,798.112,.01,21,10,0)
record in this multiple containing the "*" 
"^DD",798.1,798.112,.01,21,11,0)
character in this field.
"^DD",798.1,798.112,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.01,"DT")
3010716
"^DD",798.1,798.112,.02,0)
NLT CODE^FX^^0;2^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:'(X?5N1"."4.5N) X
"^DD",798.1,798.112,.02,1,0)
^.1
"^DD",798.1,798.112,.02,1,1,0)
798.112^C
"^DD",798.1,798.112,.02,1,1,1)
S ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.02,1,1,2)
K ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)
"^DD",798.1,798.112,.02,1,1,3)
Do not delete!
"^DD",798.1,798.112,.02,1,1,"DT")
3010716
"^DD",798.1,798.112,.02,3)
Answer must be 10-11 characters in length.
"^DD",798.1,798.112,.02,8.5)
@
"^DD",798.1,798.112,.02,9)
@
"^DD",798.1,798.112,.02,21,0)
^^8^8^3011015^
"^DD",798.1,798.112,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.02,21,3,0)
 
"^DD",798.1,798.112,.02,21,4,0)
Enter the unique NLT code of the Lab result to be
"^DD",798.1,798.112,.02,21,5,0)
extracted. Both LOINC and NLT codes (if available)
"^DD",798.1,798.112,.02,21,6,0)
are used for searching the Lab results. If you 
"^DD",798.1,798.112,.02,21,7,0)
want to use only the LOINC code, leave this field 
"^DD",798.1,798.112,.02,21,8,0)
empty.
"^DD",798.1,798.112,.02,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.02,"DT")
3010716
"^DD",798.1,798.112,.03,0)
SUBSCRIPTS^FX^^0;3^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>30!($L(X)<2) X
"^DD",798.1,798.112,.03,3)
Answer must be 2-30 characters in length.
"^DD",798.1,798.112,.03,8.5)
@
"^DD",798.1,798.112,.03,9)
@
"^DD",798.1,798.112,.03,21,0)
^^14^14^3030318^
"^DD",798.1,798.112,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.03,21,3,0)
 
"^DD",798.1,798.112,.03,21,4,0)
Enter a list of the subscripts separated by commas
"^DD",798.1,798.112,.03,21,5,0)
(CH, MI, etc.) from where the results should be
"^DD",798.1,798.112,.03,21,6,0)
loaded by the $$GCPR^LA7QRY function. Only these
"^DD",798.1,798.112,.03,21,7,0)
subscripts will be searched for new data.
"^DD",798.1,798.112,.03,21,8,0)
 
"^DD",798.1,798.112,.03,21,9,0)
NOTE: The value of the field affects the data
"^DD",798.1,798.112,.03,21,10,0)
extraction only if the LOINC CODE field is equal
"^DD",798.1,798.112,.03,21,11,0)
to "*".
"^DD",798.1,798.112,.03,21,12,0)
 
"^DD",798.1,798.112,.03,21,13,0)
If this field is empty (by default), the API 
"^DD",798.1,798.112,.03,21,14,0)
searches through all supported subscripts.
"^DD",798.1,798.112,.03,"DT")
3030318
"^DD",798.1,798.114,0)
NOTIFICATION SUB-FIELD^^.01^1
"^DD",798.1,798.114,0,"DT")
3010907
"^DD",798.1,798.114,0,"IX","B",798.114,.01)

"^DD",798.1,798.114,0,"NM","NOTIFICATION")
 
"^DD",798.1,798.114,0,"UP")
798.1
"^DD",798.1,798.114,.01,0)
NOTIFICATION^MP200'X^VA(200,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.114,.01,1,0)
^.1
"^DD",798.1,798.114,.01,1,1,0)
798.114^B
"^DD",798.1,798.114,.01,1,1,1)
S ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.114,.01,1,1,2)
K ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",798.1,798.114,.01,1,1,3)
Do not delete!
"^DD",798.1,798.114,.01,21,0)
^^4^4^3060203^
"^DD",798.1,798.114,.01,21,1,0)
Select a user who already receives alerts or add a
"^DD",798.1,798.114,.01,21,2,0)
new one from the NEW PERSON file. VistA users
"^DD",798.1,798.114,.01,21,3,0)
referenced by this field will be notified about
"^DD",798.1,798.114,.01,21,4,0)
problems with the registry processes.
"^DD",798.1,798.114,.01,"DT")
3050427
"^DD",798.1,798.118,0)
SECURITY KEY SUB-FIELD^^.01^1
"^DD",798.1,798.118,0,"DT")
3020801
"^DD",798.1,798.118,0,"NM","SECURITY KEY")
 
"^DD",798.1,798.118,0,"UP")
798.1
"^DD",798.1,798.118,.01,0)
SECURITY KEY^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>27!($L(X)<3) X
"^DD",798.1,798.118,.01,1,0)
^.1^^-1
"^DD",798.1,798.118,.01,1,2,0)
798.1^ACL^MUMPS
"^DD",798.1,798.118,.01,1,2,1)
D ACLSET^RORDD
"^DD",798.1,798.118,.01,1,2,2)
D ACLKILL^RORDD
"^DD",798.1,798.118,.01,1,2,3)
Do not delete!
"^DD",798.1,798.118,.01,1,2,"%D",0)
^^25^25^3060203^
"^DD",798.1,798.118,.01,1,2,"%D",1,0)
This cross-reference is used by the screening 
"^DD",798.1,798.118,.01,1,2,"%D",2,0)
logic (the "SCR" node) of some Clinical Case 
"^DD",798.1,798.118,.01,1,2,"%D",3,0)
Registries files to check whether a user is
"^DD",798.1,798.118,.01,1,2,"%D",4,0)
allowed to access the records or not.
"^DD",798.1,798.118,.01,1,2,"%D",5,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",6,0)
The cross-reference contains two kinds of items:
"^DD",798.1,798.118,.01,1,2,"%D",7,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",8,0)
  ^ROR(798.1,"ACL",RORDUZ,RegIEN,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",9,0)
  ^ROR(798.1,"ACL",RORDUZ,RegName,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",10,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",11,0)
where RORDUZ is the value of the DUZ variable for
"^DD",798.1,798.118,.01,1,2,"%D",12,0)
the user who has access to one or more registries
"^DD",798.1,798.118,.01,1,2,"%D",13,0)
(according to the allocated security keys). RegIEN
"^DD",798.1,798.118,.01,1,2,"%D",14,0)
and RegName are the registry IEN and name. KEY is
"^DD",798.1,798.118,.01,1,2,"%D",15,0)
the name of security key and IEN is the internal
"^DD",798.1,798.118,.01,1,2,"%D",16,0)
entry number of the corresponding record of the
"^DD",798.1,798.118,.01,1,2,"%D",17,0)
SECURITY KEY multiple.
"^DD",798.1,798.118,.01,1,2,"%D",18,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",19,0)
The cross-reference should be rebuilt after
"^DD",798.1,798.118,.01,1,2,"%D",20,0)
changes in the allocation of the security keys
"^DD",798.1,798.118,.01,1,2,"%D",21,0)
associated with any registry. Usually, this is
"^DD",798.1,798.118,.01,1,2,"%D",22,0)
done by the nightly task (the [ROR TASK] option).
"^DD",798.1,798.118,.01,1,2,"%D",23,0)
However, if you want the changes to be in effect
"^DD",798.1,798.118,.01,1,2,"%D",24,0)
immediately, you should rebuild this
"^DD",798.1,798.118,.01,1,2,"%D",25,0)
cross-reference manually.
"^DD",798.1,798.118,.01,1,2,"DT")
3020805
"^DD",798.1,798.118,.01,3)
Enter a name of security key (3-27 characters in length).
"^DD",798.1,798.118,.01,8.5)
@
"^DD",798.1,798.118,.01,9)
@
"^DD",798.1,798.118,.01,20,0)
^.3LA^^0
"^DD",798.1,798.118,.01,21,0)
^.001^5^5^3020816^^^
"^DD",798.1,798.118,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.118,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.118,.01,21,3,0)
 
"^DD",798.1,798.118,.01,21,4,0)
The SECURITY KEY field contains the name of the 
"^DD",798.1,798.118,.01,21,5,0)
security key associated with the registry.
"^DD",798.1,798.118,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.118,.01,"DT")
3050722
"^DD",798.1,798.12,0)
REPORT STATS SUB-FIELD^^.02^2
"^DD",798.1,798.12,0,"DT")
3050715
"^DD",798.1,798.12,0,"IX","B",798.12,.01)

"^DD",798.1,798.12,0,"NM","REPORT STATS")
 
"^DD",798.1,798.12,0,"UP")
798.1
"^DD",798.1,798.12,.01,0)
REPORT STATS^MP799.34'X^ROR(799.34,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.12,.01,1,0)
^.1
"^DD",798.1,798.12,.01,1,1,0)
798.12^B
"^DD",798.1,798.12,.01,1,1,1)
S ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.12,.01,1,1,2)
K ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)
"^DD",798.1,798.12,.01,1,1,3)
Do not delete!
"^DD",798.1,798.12,.01,1,1,"DT")
3050722
"^DD",798.1,798.12,.01,3)
 
"^DD",798.1,798.12,.01,8.5)
@
"^DD",798.1,798.12,.01,9)
@
"^DD",798.1,798.12,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.01,20,1,0)
STATE
"^DD",798.1,798.12,.01,21,0)
^.001^2^2^3120228^^
"^DD",798.1,798.12,.01,21,1,0)
A pointer stored in this field links the stats to 
"^DD",798.1,798.12,.01,21,2,0)
the report definition.
"^DD",798.1,798.12,.01,"DT")
3050722
"^DD",798.1,798.12,.02,0)
NUMBER OF RUNS^NJ9,0^^0;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.12,.02,3)
Type a Number between 0 and 999999999, 0 Decimal Digits.
"^DD",798.1,798.12,.02,8.5)
@
"^DD",798.1,798.12,.02,9)
@
"^DD",798.1,798.12,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.02,20,1,0)
STATE
"^DD",798.1,798.12,.02,21,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,21,1,0)
This field serves as a counter of report runs 
"^DD",798.1,798.12,.02,21,2,0)
since the last successful data transmission.
"^DD",798.1,798.12,.02,23,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,23,1,0)
Please do not edit the field directly. Use the entry
"^DD",798.1,798.12,.02,23,2,0)
points of the RORTSK12 routine instead.
"^DD",798.1,798.12,.02,"DT")
3050715
"^DD",798.1,798.122,0)
LAST BATCH CONTROL ID SUB-FIELD^^.03^3
"^DD",798.1,798.122,0,"DT")
3051129
"^DD",798.1,798.122,0,"NM","LAST BATCH CONTROL ID")
 
"^DD",798.1,798.122,0,"UP")
798.1
"^DD",798.1,798.122,.01,0)
LAST BATCH CONTROL ID^MFX^^0;1^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.01,1,0)
^.1^^0
"^DD",798.1,798.122,.01,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.01,8.5)
@
"^DD",798.1,798.122,.01,9)
@
"^DD",798.1,798.122,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.01,20,1,0)
HL7
"^DD",798.1,798.122,.01,21,0)
^.001^3^3^3050503^^^
"^DD",798.1,798.122,.01,21,1,0)
The LAST BATCH CONTROL ID field contains the
"^DD",798.1,798.122,.01,21,2,0)
message control ID (BHS-11) of the latest batch
"^DD",798.1,798.122,.01,21,3,0)
HL7 message submitted to the VistA HL7 engine.
"^DD",798.1,798.122,.01,23,0)
^^3^3^3060203^
"^DD",798.1,798.122,.01,23,1,0)
This field is populated with the value returned by the 
"^DD",798.1,798.122,.01,23,2,0)
GENERATE^HLMA procedure. This value is usually
"^DD",798.1,798.122,.01,23,3,0)
different from that of the INTERNAL BATCH ID field.
"^DD",798.1,798.122,.01,"DT")
3051129
"^DD",798.1,798.122,.02,0)
INTERNAL BATCH ID^RF^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.02,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.02,8.5)
@
"^DD",798.1,798.122,.02,9)
@
"^DD",798.1,798.122,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.02,20,1,0)
HL7
"^DD",798.1,798.122,.02,21,0)
^^8^8^3060203^
"^DD",798.1,798.122,.02,21,1,0)
This field contains the internal batch identifier
"^DD",798.1,798.122,.02,21,2,0)
that was used during the generation of the batch 
"^DD",798.1,798.122,.02,21,3,0)
message.
"^DD",798.1,798.122,.02,21,4,0)
 
"^DD",798.1,798.122,.02,21,5,0)
The Control ID of each individual message included
"^DD",798.1,798.122,.02,21,6,0)
in the batch is constructed from the value of this
"^DD",798.1,798.122,.02,21,7,0)
field and a sequential number separated by the '-'
"^DD",798.1,798.122,.02,21,8,0)
character.
"^DD",798.1,798.122,.02,23,0)
^.001^7^7^3060203^^
"^DD",798.1,798.122,.02,23,1,0)
The INTERNAL BATCH ID field is automatically populated 
"^DD",798.1,798.122,.02,23,2,0)
with the identifier of the batch placeholder created by
"^DD",798.1,798.122,.02,23,3,0)
the CREATE^HLTF procedure. See the $$CREATE^RORHL7 and
"^DD",798.1,798.122,.02,23,4,0)
$$TMSTMP^ROREXTUT functions for details.
"^DD",798.1,798.122,.02,23,5,0)
 
"^DD",798.1,798.122,.02,23,6,0)
The actual batch control ID (BHS-11) is usually
"^DD",798.1,798.122,.02,23,7,0)
different from the value stored in this field.
"^DD",798.1,798.122,.02,"DT")
3050503
"^DD",798.1,798.122,.03,0)
DATE^D^^0;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.122,.03,8.5)
@
"^DD",798.1,798.122,.03,9)
@
"^DD",798.1,798.122,.03,21,0)
^^2^2^3060106^
"^DD",798.1,798.122,.03,21,1,0)
This field stores the date/time of the batch HL7 
"^DD",798.1,798.122,.03,21,2,0)
message.
"^DD",798.1,798.122,.03,"DT")
3051129
"^DD",798.1,798.128,0)
LOCAL TEST NAME SUB-FIELD^^.02^2
"^DD",798.1,798.128,0,"DT")
3030402
"^DD",798.1,798.128,0,"ID","WRITE")
S %I=Y,Y=+$P($G(^(0)),U,2),Y=$S(Y>0:$P($G(^ROR(799.1,Y,0)),U),1:"") D EN^DDIOL("   "_Y,,"?40") S Y=%I K %I
"^DD",798.1,798.128,0,"IX","B",798.128,.01)

"^DD",798.1,798.128,0,"NM","LOCAL TEST NAME")
 
"^DD",798.1,798.128,0,"UP")
798.1
"^DD",798.1,798.128,.01,0)
LOCAL TEST NAME^MP60'^LAB(60,^0;1^Q
"^DD",798.1,798.128,.01,1,0)
^.1
"^DD",798.1,798.128,.01,1,1,0)
798.128^B
"^DD",798.1,798.128,.01,1,1,1)
S ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.128,.01,1,1,2)
K ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)
"^DD",798.1,798.128,.01,20,0)
^.3LA^^0
"^DD",798.1,798.128,.01,"DT")
3030706
"^DD",798.1,798.128,.02,0)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.128,.02,1,0)
^.1^^0
"^DD",798.1,798.128,.02,12)
Only Lab Groups can be selected.
"^DD",798.1,798.128,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=3"
"^DD",798.1,798.128,.02,"DT")
3030706
"^DD",798.1,798.129,0)
LOCAL DRUG NAME SUB-FIELD^^.02^2
"^DD",798.1,798.129,0,"DT")
3030625
"^DD",798.1,798.129,0,"IX","B",798.129,.01)

"^DD",798.1,798.129,0,"NM","LOCAL DRUG NAME")
 
"^DD",798.1,798.129,0,"UP")
798.1
"^DD",798.1,798.129,.01,0)
LOCAL DRUG NAME^MP50'^PSDRUG(^0;1^Q
"^DD",798.1,798.129,.01,1,0)
^.1
"^DD",798.1,798.129,.01,1,1,0)
798.129^B
"^DD",798.1,798.129,.01,1,1,1)
S ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.129,.01,1,1,2)
K ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)
"^DD",798.1,798.129,.01,20,0)
^.3LA^^0
"^DD",798.1,798.129,.01,"DT")
3030706
"^DD",798.1,798.129,.02,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.129,.02,12)
Only Drug Groups can be selected.
"^DD",798.1,798.129,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=4"
"^DD",798.1,798.129,.02,20,0)
^.3LA^^0
"^DD",798.1,798.129,.02,"DT")
3030706
"^DD",798.1,798.13,0)
SELECTION RULE SUB-FIELD^^.01^1
"^DD",798.1,798.13,0,"DT")
3000410
"^DD",798.1,798.13,0,"NM","SELECTION RULE")

"^DD",798.1,798.13,0,"UP")
798.1
"^DD",798.1,798.13,.01,0)
SELECTION RULE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>40!($L(X)<3)!'(X?3.UNP) X I $D(X) K:'$D(^ROR(798.2,"B",$E(X,1,40))) X
"^DD",798.1,798.13,.01,1,0)
^.1^^-1
"^DD",798.1,798.13,.01,1,2,0)
798.1^ARULES
"^DD",798.1,798.13,.01,1,2,1)
S ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)=""
"^DD",798.1,798.13,.01,1,2,2)
K ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)
"^DD",798.1,798.13,.01,1,2,3)
Do not delete!
"^DD",798.1,798.13,.01,1,2,"%D",0)
^.101^2^2^3140228^^
"^DD",798.1,798.13,.01,1,2,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.1,798.13,.01,1,2,"%D",2,0)
registries that use the selection rule.
"^DD",798.1,798.13,.01,1,2,"DT")
3000406
"^DD",798.1,798.13,.01,3)
Enter a name of the selection rule (3-40 characters).
"^DD",798.1,798.13,.01,4)
I $G(X)="??" N D,DIC,DZ S DIC="^ROR(798.2,",DIC(0)="",D="B",DZ="??" D DQ^DICQ,EN^DDIOL("",,"!")
"^DD",798.1,798.13,.01,8.5)
@
"^DD",798.1,798.13,.01,9)
@
"^DD",798.1,798.13,.01,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.13,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.13,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.13,.01,21,3,0)
 
"^DD",798.1,798.13,.01,21,4,0)
Enter a name of the selection rule that will be 
"^DD",798.1,798.13,.01,21,5,0)
used to select patients for addition to the
"^DD",798.1,798.13,.01,21,6,0)
registry. The name should be entered exactly as it
"^DD",798.1,798.13,.01,21,7,0)
appears in the list of selection rules (file 
"^DD",798.1,798.13,.01,21,8,0)
#798.2).
"^DD",798.1,798.13,.01,23,0)
^.001^3^3^3140228^^^^
"^DD",798.1,798.13,.01,23,1,0)
Names of the selection rules are used here instead of 
"^DD",798.1,798.13,.01,23,2,0)
pointers because the KIDS pointer resolving feature 
"^DD",798.1,798.13,.01,23,3,0)
does not work for .01 fields.
"^DD",798.1,798.13,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.13,.01,"DT")
3140228
"^DD",798.1,798.15,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.1,798.15,0,"NM","DESCRIPTION")
 
"^DD",798.1,798.15,0,"UP")
798.1
"^DD",798.1,798.15,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.1,798.15,.01,"DT")
3000313
"^DD",798.2,798.2,0)
FIELD^^6^8
"^DD",798.2,798.2,0,"DDA")
N
"^DD",798.2,798.2,0,"DT")
3150423
"^DD",798.2,798.2,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,3),,"?30")
"^DD",798.2,798.2,0,"NM","ROR SELECTION RULE")

"^DD",798.2,798.2,0,"PT",798.01,.01)

"^DD",798.2,798.2,0,"VRPK")
ROR
"^DD",798.2,798.2,.01,0)
RULE NAME^FX^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>40!($L(X)<3)!'(X?1.UNP) X
"^DD",798.2,798.2,.01,1,0)
^.1^^0
"^DD",798.2,798.2,.01,3)
Enter a unique namespaced rule name (3-40 characters).
"^DD",798.2,798.2,.01,8.5)
@
"^DD",798.2,798.2,.01,9)
@
"^DD",798.2,798.2,.01,21,0)
^.001^6^6^3140310^^^
"^DD",798.2,798.2,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,.01,21,3,0)
 
"^DD",798.2,798.2,.01,21,4,0)
Selection rule name must be unique and name 
"^DD",798.2,798.2,.01,21,5,0)
spaced. Names of the rules that are used for
"^DD",798.2,798.2,.01,21,6,0)
National Registries must start with "VA".
"^DD",798.2,798.2,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,.01,"DT")
3140228
"^DD",798.2,798.2,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;4^Q:$$VAEDT^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,1,0)
^.1^^0
"^DD",798.2,798.2,.09,3)
Enter 1 or YES if this rule is for a national registry.
"^DD",798.2,798.2,.09,8.5)
@
"^DD",798.2,798.2,.09,9)
@
"^DD",798.2,798.2,.09,21,0)
^.001^6^6^3150528^^
"^DD",798.2,798.2,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.2,798.2,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.2,798.2,.09,21,3,0)
 
"^DD",798.2,798.2,.09,21,4,0)
Selection rules of the national registries must
"^DD",798.2,798.2,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",798.2,798.2,.09,21,6,0)
editing of other fields of rule definitions.
"^DD",798.2,798.2,.09,"DEL",1,0)
I $$VADEL^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,"DT")
3011121
"^DD",798.2,798.2,1,0)
EXPRESSION^RFX^^1;E1,245^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>250!($L(X)<1) X I $D(X) Q:$$EXPR^RORDD($P($G(^ROR(798.2,DA,0)),U,2))
"^DD",798.2,798.2,1,3)
Enter M expression that implements the selection rule (1-250 characters).
"^DD",798.2,798.2,1,8.5)
@
"^DD",798.2,798.2,1,9)
@
"^DD",798.2,798.2,1,21,0)
^^5^5^3011010^
"^DD",798.2,798.2,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,1,21,3,0)
 
"^DD",798.2,798.2,1,21,4,0)
Enter a MUMPS expression (it may contain special
"^DD",798.2,798.2,1,21,5,0)
macros) that implements the selection rule.
"^DD",798.2,798.2,1,23,0)
^^62^62^3060203^
"^DD",798.2,798.2,1,23,1,0)
MUMPS expression that implements the selection rule can
"^DD",798.2,798.2,1,23,2,0)
contain special macros:
"^DD",798.2,798.2,1,23,3,0)
 
"^DD",798.2,798.2,1,23,4,0)
 {E: Field Name} - External value of the field
"^DD",798.2,798.2,1,23,5,0)
 {E: Field Number}
"^DD",798.2,798.2,1,23,6,0)
 
"^DD",798.2,798.2,1,23,7,0)
 {I: Field Name} - Internal value of the field
"^DD",798.2,798.2,1,23,8,0)
 {I: Field Number}
"^DD",798.2,798.2,1,23,9,0)
 
"^DD",798.2,798.2,1,23,10,0)
 {Rule Name} - Result value of the lower level
"^DD",798.2,798.2,1,23,11,0)
selection rule
"^DD",798.2,798.2,1,23,12,0)
 
"^DD",798.2,798.2,1,23,13,0)
 {AVG: Rule Name} - Average value of the rule
"^DD",798.2,798.2,1,23,14,0)
 
"^DD",798.2,798.2,1,23,15,0)
 {CNT: Rule Name} - Number of calculations of the rule
"^DD",798.2,798.2,1,23,16,0)
 
"^DD",798.2,798.2,1,23,17,0)
 {MAX: Rule Name} - Maximum value of the rule
"^DD",798.2,798.2,1,23,18,0)
 
"^DD",798.2,798.2,1,23,19,0)
 {MIN: Rule Name} - Minimum value of the rule
"^DD",798.2,798.2,1,23,20,0)
 
"^DD",798.2,798.2,1,23,21,0)
 {SUM: Rule Name} - Total of the selection rule values
"^DD",798.2,798.2,1,23,22,0)
 
"^DD",798.2,798.2,1,23,23,0)
 {LS: Lab Search Name} - This macro can be used only in
"^DD",798.2,798.2,1,23,24,0)
the selection rules associated with the LAB DATA file
"^DD",798.2,798.2,1,23,25,0)
(#63). It is evaluated as 1 if some of the patient
"^DD",798.2,798.2,1,23,26,0)
lab results pass the Lab search criteria (from the file
"^DD",798.2,798.2,1,23,27,0)
#798.9). Otherwise, it is evaluated as zero.
"^DD",798.2,798.2,1,23,28,0)
 
"^DD",798.2,798.2,1,23,29,0)
Return values of the top-level rules:
"^DD",798.2,798.2,1,23,30,0)
 
"^DD",798.2,798.2,1,23,31,0)
 0        - Skip the patient
"^DD",798.2,798.2,1,23,32,0)
 Non-zero - Add the patient to the registry
"^DD",798.2,798.2,1,23,33,0)
 
"^DD",798.2,798.2,1,23,34,0)
Return values of the lower level rules:
"^DD",798.2,798.2,1,23,35,0)
 
"^DD",798.2,798.2,1,23,36,0)
Return values can be used in the expressions of the
"^DD",798.2,798.2,1,23,37,0)
other rules. Some additional values are calculated
"^DD",798.2,798.2,1,23,38,0)
automatically (minimum, maximum, average, etc.) for
"^DD",798.2,798.2,1,23,39,0)
each rule.
"^DD",798.2,798.2,1,23,40,0)
 
"^DD",798.2,798.2,1,23,41,0)
Avoid circular references in the expressions. If a 
"^DD",798.2,798.2,1,23,42,0)
rule directly or indirectly depends on itself, it
"^DD",798.2,798.2,1,23,43,0)
cannot be evaluated. An example of the circular
"^DD",798.2,798.2,1,23,44,0)
reference:
"^DD",798.2,798.2,1,23,45,0)
 
"^DD",798.2,798.2,1,23,46,0)
 Rule A: {MAX:B}<10
"^DD",798.2,798.2,1,23,47,0)
 Rule B: {I:23}+{C}
"^DD",798.2,798.2,1,23,48,0)
 Rule C: {CNT:A}
"^DD",798.2,798.2,1,23,49,0)
 
"^DD",798.2,798.2,1,23,50,0)
The rule A cannot be evaluated because it depends on 
"^DD",798.2,798.2,1,23,51,0)
the rule B, which depends on rule C, and C depends on
"^DD",798.2,798.2,1,23,52,0)
A.
"^DD",798.2,798.2,1,23,53,0)
 
"^DD",798.2,798.2,1,23,54,0)
Complex selection rules could be implemented by 
"^DD",798.2,798.2,1,23,55,0)
external MUMPS functions. In that case the expression
"^DD",798.2,798.2,1,23,56,0)
should contains a full reference to the function
"^DD",798.2,798.2,1,23,57,0)
($$TAG^ROUTINE). Values of the necessary data elements
"^DD",798.2,798.2,1,23,58,0)
can be loaded automatically (see description of the
"^DD",798.2,798.2,1,23,59,0)
DATA ELEMENT multiple).
"^DD",798.2,798.2,1,23,60,0)
 
"^DD",798.2,798.2,1,23,61,0)
See the Programmer's reference manual for more details 
"^DD",798.2,798.2,1,23,62,0)
regarding the selection rule expressions.
"^DD",798.2,798.2,1,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,1,"DT")
3011109
"^DD",798.2,798.2,2,0)
FILE^RNJ22,9X^^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X I $D(X) K:'$$VFILE^DILFD(X) X
"^DD",798.2,798.2,2,3)
Enter (sub)file number between 1 and 999999999999, 9 Decimal Digits.
"^DD",798.2,798.2,2,8.5)
@
"^DD",798.2,798.2,2,9)
@
"^DD",798.2,798.2,2,21,0)
^.001^6^6^3020403^^
"^DD",798.2,798.2,2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,2,21,3,0)
 
"^DD",798.2,798.2,2,21,4,0)
Enter a file/sub-file number that the selection 
"^DD",798.2,798.2,2,21,5,0)
rule is associated with. Each selection rule can
"^DD",798.2,798.2,2,21,6,0)
be associated with only one file.
"^DD",798.2,798.2,2,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,2,"DT")
3011109
"^DD",798.2,798.2,4,0)
SHORT DESCRIPTION^FX^^0;3^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>30!($L(X)<3) X
"^DD",798.2,798.2,4,3)
Enter a short description of the selection rule (3-30 characters).
"^DD",798.2,798.2,4,8.5)
@
"^DD",798.2,798.2,4,9)
@
"^DD",798.2,798.2,4,21,0)
^^5^5^3020403^
"^DD",798.2,798.2,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,4,21,3,0)
 
"^DD",798.2,798.2,4,21,4,0)
The short description of the selection rule is 
"^DD",798.2,798.2,4,21,5,0)
used in the reports and GUI dialogs.
"^DD",798.2,798.2,4,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,4,"DT")
3011109
"^DD",798.2,798.2,5,0)
DESCRIPTION^798.25^^3;0
"^DD",798.2,798.2,5,21,0)
^^3^3^3150528^^
"^DD",798.2,798.2,5,21,1,0)
You can enter any additional reference information
"^DD",798.2,798.2,5,21,2,0)
related to the selection rule. The content of this
"^DD",798.2,798.2,5,21,3,0)
field is not used by the application.
"^DD",798.2,798.2,6,0)
DATA ELEMENT^798.26^^4;0
"^DD",798.2,798.2,6,9)
@
"^DD",798.2,798.2,6,21,0)
^.001^12^12^3060203^^
"^DD",798.2,798.2,6,21,1,0)
The DATA ELEMENT multiple contains a list of 
"^DD",798.2,798.2,6,21,2,0)
additional data elements to load. 
"^DD",798.2,798.2,6,21,3,0)
 
"^DD",798.2,798.2,6,21,4,0)
Values of all the data elements referenced in the
"^DD",798.2,798.2,6,21,5,0)
selection rule expression are loaded
"^DD",798.2,798.2,6,21,6,0)
automatically.
"^DD",798.2,798.2,6,21,7,0)
 
"^DD",798.2,798.2,6,21,8,0)
However, if the rule is implemented by an external
"^DD",798.2,798.2,6,21,9,0)
function, you can enter the codes of all necessary
"^DD",798.2,798.2,6,21,10,0)
data elements into this multiple. Their values
"^DD",798.2,798.2,6,21,11,0)
will be loaded automatically and will be
"^DD",798.2,798.2,6,21,12,0)
accessible in the function.
"^DD",798.2,798.2,6,"DT")
3020326
"^DD",798.2,798.2,7,0)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.2,798.2,7,3)
Select a coding system.
"^DD",798.2,798.2,7,12)
The screen limits the coding system to those allowed in files 80 and 80.1
"^DD",798.2,798.2,7,12.1)
S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)"
"^DD",798.2,798.2,7,21,0)
^.001^1^1^3150423^^^^
"^DD",798.2,798.2,7,21,1,0)
This is the coding system to which the code belongs.
"^DD",798.2,798.2,7,"DT")
3150423
"^DD",798.2,798.25,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.2,798.25,0,"NM","DESCRIPTION")

"^DD",798.2,798.25,0,"UP")
798.2
"^DD",798.2,798.25,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.2,798.25,.01,3)
Enter any additional text here to describe the rule.
"^DD",798.2,798.25,.01,21,0)
^^2^2^3150528^
"^DD",798.2,798.25,.01,21,1,0)
This field can contain any additional information needed to describe
"^DD",798.2,798.25,.01,21,2,0)
unique characteristics of this rule.
"^DD",798.2,798.25,.01,"DT")
3150528
"^DD",798.2,798.26,0)
DATA ELEMENT SUB-FIELD^^1^2
"^DD",798.2,798.26,0,"DT")
3020326
"^DD",798.2,798.26,0,"NM","DATA ELEMENT")

"^DD",798.2,798.26,0,"UP")
798.2
"^DD",798.2,798.26,.01,0)
ELEMENT CODE^MNJ9,0X^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))  K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.2,798.26,.01,1,0)
^.1^^0
"^DD",798.2,798.26,.01,3)
Type a Number between 1 and 999999999, 0 Decimal Digits.
"^DD",798.2,798.26,.01,8.5)
@
"^DD",798.2,798.26,.01,9)
@
"^DD",798.2,798.26,.01,21,0)
^^8^8^3020328^
"^DD",798.2,798.26,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.26,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.26,.01,21,3,0)
 
"^DD",798.2,798.26,.01,21,4,0)
Enter the code of the data element that should be 
"^DD",798.2,798.26,.01,21,5,0)
loaded before evaluation of the expression. Values
"^DD",798.2,798.26,.01,21,6,0)
of all data elements referenced in the selection
"^DD",798.2,798.26,.01,21,7,0)
rule expression are loaded automatically (you do
"^DD",798.2,798.26,.01,21,8,0)
not need to enter them here).
"^DD",798.2,798.26,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,.01,"DT")
3020326
"^DD",798.2,798.26,1,0)
VALUE TYPE^RSX^E:External;I:Internal;EI:Both;^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,1,3)
Enter a value type to describe the retrieval format of the data element.
"^DD",798.2,798.26,1,8.5)
@
"^DD",798.2,798.26,1,9)
@
"^DD",798.2,798.26,1,21,0)
^.001^3^3^3150528^^
"^DD",798.2,798.26,1,21,1,0)
This field holds required value type(s) of the
"^DD",798.2,798.26,1,21,2,0)
data element. The type(s) must be supported by the
"^DD",798.2,798.26,1,21,3,0)
search engine.
"^DD",798.2,798.26,1,"DT")
3020311
"^DD",798.5,798.5,0)
FIELD^^3^4
"^DD",798.5,798.5,0,"DDA")
N
"^DD",798.5,798.5,0,"DT")
3150409
"^DD",798.5,798.5,0,"IX","B",798.5,.01)

"^DD",798.5,798.5,0,"NM","ROR ICD SEARCH")

"^DD",798.5,798.5,0,"VRPK")
ROR
"^DD",798.5,798.5,.01,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;1^Q
"^DD",798.5,798.5,.01,1,0)
^.1
"^DD",798.5,798.5,.01,1,1,0)
798.5^B
"^DD",798.5,798.5,.01,1,1,1)
S ^ROR(798.5,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.5,.01,1,1,2)
K ^ROR(798.5,"B",$E(X,1,30),DA)
"^DD",798.5,798.5,.01,3)
Enter a registry from the ROR REGISTRY PARAMETERS file.
"^DD",798.5,798.5,.01,21,0)
^^5^5^3120323^
"^DD",798.5,798.5,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A NATIONAL REGISTRY 
"^DD",798.5,798.5,.01,21,2,0)
DEFINITION.
"^DD",798.5,798.5,.01,21,3,0)
 
"^DD",798.5,798.5,.01,21,4,0)
The ICD codes defined for this registry will be used to select qualified 
"^DD",798.5,798.5,.01,21,5,0)
patients.
"^DD",798.5,798.5,.01,"DEL",1,0)
I $$VADEL^RORDD(798.5,$G(DA),.01)
"^DD",798.5,798.5,.01,"DT")
3140729
"^DD",798.5,798.5,1,0)
ICD CODE^798.51P^^1;0
"^DD",798.5,798.5,1,21,0)
^.001^4^4^3150528^^^^
"^DD",798.5,798.5,1,21,1,0)
This multiple contains a list of ICD codes in the ICD DIAGNOSIS
"^DD",798.5,798.5,1,21,2,0)
file (#80).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,1,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.5,1,21,4,0)
  
"^DD",798.5,798.5,2,0)
ICD PROCEDURE CODE^798.52P^^2;0
"^DD",798.5,798.5,2,21,0)
^.001^3^3^3150528^^^^
"^DD",798.5,798.5,2,21,1,0)
This multiple contains a list of ICD codes in the ICD OPERATION/PROCEDURE
"^DD",798.5,798.5,2,21,2,0)
file (#80.1).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,2,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.5,3,0)
INPATIENT CPT CODE^798.53P^^3;0
"^DD",798.5,798.5,3,21,0)
^^3^3^3150528^
"^DD",798.5,798.5,3,21,1,0)
This multiple contains a list of CPT codes in the CPT
"^DD",798.5,798.5,3,21,2,0)
file (#81).  Selection rules for a registry use these codes to find
"^DD",798.5,798.5,3,21,3,0)
new registry patients during the registry update process.
"^DD",798.5,798.51,0)
ICD CODE SUB-FIELD^^.01^1
"^DD",798.5,798.51,0,"DT")
3120223
"^DD",798.5,798.51,0,"IX","B",798.51,.01)

"^DD",798.5,798.51,0,"NM","ICD CODE")
 
"^DD",798.5,798.51,0,"UP")
798.5
"^DD",798.5,798.51,.01,0)
ICD CODE^MP80'^ICD9(^0;1^Q
"^DD",798.5,798.51,.01,1,0)
^.1
"^DD",798.5,798.51,.01,1,1,0)
798.51^B
"^DD",798.5,798.51,.01,1,1,1)
S ^ROR(798.5,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.51,.01,1,1,2)
K ^ROR(798.5,DA(1),1,"B",$E(X,1,30),DA)
"^DD",798.5,798.51,.01,3)
Enter an ICD code.
"^DD",798.5,798.51,.01,21,0)
^.001^1^1^3120416^^^^
"^DD",798.5,798.51,.01,21,1,0)
The ICD diagnosis code is used to qualify a patient for the registry.
"^DD",798.5,798.51,.01,"DT")
3120328
"^DD",798.5,798.52,0)
ICD PROCEDURE CODE SUB-FIELD^^.01^1
"^DD",798.5,798.52,0,"DT")
3150409
"^DD",798.5,798.52,0,"IX","B",798.52,.01)

"^DD",798.5,798.52,0,"NM","ICD PROCEDURE CODE")

"^DD",798.5,798.52,0,"UP")
798.5
"^DD",798.5,798.52,.01,0)
ICD PROCEDURE CODE^MP80.1'^ICD0(^0;1^Q
"^DD",798.5,798.52,.01,1,0)
^.1
"^DD",798.5,798.52,.01,1,1,0)
798.52^B
"^DD",798.5,798.52,.01,1,1,1)
S ^ROR(798.5,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.52,.01,1,1,2)
K ^ROR(798.5,DA(1),2,"B",$E(X,1,30),DA)
"^DD",798.5,798.52,.01,3)
Enter an ICD procedure code.
"^DD",798.5,798.52,.01,21,0)
^.001^2^2^3150528^^^^
"^DD",798.5,798.52,.01,21,1,0)
The ICD procedure code is used to qualify a
"^DD",798.5,798.52,.01,21,2,0)
patient for the registry.
"^DD",798.5,798.52,.01,"DT")
3150409
"^DD",798.5,798.53,0)
INPATIENT CPT CODE SUB-FIELD^^.01^1
"^DD",798.5,798.53,0,"DT")
3150409
"^DD",798.5,798.53,0,"IX","B",798.53,.01)

"^DD",798.5,798.53,0,"NM","INPATIENT CPT CODE")

"^DD",798.5,798.53,0,"UP")
798.5
"^DD",798.5,798.53,.01,0)
INPATIENT CPT CODE^MP81'^ICPT(^0;1^Q
"^DD",798.5,798.53,.01,1,0)
^.1
"^DD",798.5,798.53,.01,1,1,0)
798.53^B
"^DD",798.5,798.53,.01,1,1,1)
S ^ROR(798.5,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",798.5,798.53,.01,1,1,2)
K ^ROR(798.5,DA(1),3,"B",$E(X,1,30),DA)
"^DD",798.5,798.53,.01,3)
Enter a CPT code.
"^DD",798.5,798.53,.01,21,0)
^.001^1^1^3150528^^
"^DD",798.5,798.53,.01,21,1,0)
The INPATIENT CPT procedure code is used to qualify a patient for a registry.
"^DD",798.5,798.53,.01,"DT")
3150409
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DD",799.51,799.51,0)
FIELD^^.09^5
"^DD",799.51,799.51,0,"DDA")
N
"^DD",799.51,799.51,0,"DT")
3040114
"^DD",799.51,799.51,0,"IX","AR",799.51,.02)

"^DD",799.51,799.51,0,"IX","B",799.51,.01)

"^DD",799.51,799.51,0,"NM","ROR GENERIC DRUG")

"^DD",799.51,799.51,0,"VRPK")
ROR
"^DD",799.51,799.51,0,"VRRV")
1.1^ROR*1*5
"^DD",799.51,799.51,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.51,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.51,799.51,.01,1,0)
^.1
"^DD",799.51,799.51,.01,1,1,0)
799.51^B
"^DD",799.51,799.51,.01,1,1,1)
S ^ROR(799.51,"B",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.01,1,1,2)
K ^ROR(799.51,"B",$E(X,1,30),DA)
"^DD",799.51,799.51,.01,1,1,3)
Do not delete!
"^DD",799.51,799.51,.01,3)
Name must be 3-30 characters, not numeric or starting with punctuation.
"^DD",799.51,799.51,.01,8.5)
@
"^DD",799.51,799.51,.01,9)
@
"^DD",799.51,799.51,.01,21,0)
^.001^4^4^3040124^^^
"^DD",799.51,799.51,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.01,21,3,0)
 
"^DD",799.51,799.51,.01,21,4,0)
The NAME field stores a short name of the drug.
"^DD",799.51,799.51,.01,"DEL",1,0)
I $$VADEL^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,1,0)
^.1
"^DD",799.51,799.51,.02,1,1,0)
799.51^AR
"^DD",799.51,799.51,.02,1,1,1)
S ^ROR(799.51,"AR",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.02,1,1,2)
K ^ROR(799.51,"AR",$E(X,1,30),DA)
"^DD",799.51,799.51,.02,1,1,3)
Do not delete!
"^DD",799.51,799.51,.02,1,1,"%D",0)
^^2^2^3040124^
"^DD",799.51,799.51,.02,1,1,"%D",1,0)
This cross-reference groups all drugs associated
"^DD",799.51,799.51,.02,1,1,"%D",2,0)
with a particular registry together.
"^DD",799.51,799.51,.02,1,1,"DT")
3030818
"^DD",799.51,799.51,.02,8.5)
@
"^DD",799.51,799.51,.02,9)
@
"^DD",799.51,799.51,.02,21,0)
^^5^5^3040124^
"^DD",799.51,799.51,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.02,21,3,0)
 
"^DD",799.51,799.51,.02,21,4,0)
This field identifies the registry that the drug 
"^DD",799.51,799.51,.02,21,5,0)
is associated with.
"^DD",799.51,799.51,.02,"DT")
3040114
"^DD",799.51,799.51,.03,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",799.51,799.51,.03,3)

"^DD",799.51,799.51,.03,8.5)
@
"^DD",799.51,799.51,.03,9)
@
"^DD",799.51,799.51,.03,12)
Only Drug Groups can be selected.
"^DD",799.51,799.51,.03,12.1)
S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"")
"^DD",799.51,799.51,.03,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.03,23,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,23,1,0)
This field is not used currently. It is reserved for 
"^DD",799.51,799.51,.03,23,2,0)
future use.
"^DD",799.51,799.51,.03,"DT")
3040124
"^DD",799.51,799.51,.04,0)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.04,8.5)
@
"^DD",799.51,799.51,.04,9)
@
"^DD",799.51,799.51,.04,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.04,"DT")
3040114
"^DD",799.51,799.51,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,8.5)
@
"^DD",799.51,799.51,.09,9)
@
"^DD",799.51,799.51,.09,21,0)
^^6^6^3060203^
"^DD",799.51,799.51,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.51,799.51,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.51,799.51,.09,21,3,0)
 
"^DD",799.51,799.51,.09,21,4,0)
Drugs associated with the national registries must
"^DD",799.51,799.51,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",799.51,799.51,.09,21,6,0)
editing of other fields of the record.
"^DD",799.51,799.51,.09,"DEL",1,0)
I $$VADEL^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,"DT")
3030818
"^DIC",798.1,798.1,0)
ROR REGISTRY PARAMETERS^798.1
"^DIC",798.1,798.1,0,"GL")
^ROR(798.1,
"^DIC",798.1,798.1,"%",0)
^1.005^^0
"^DIC",798.1,798.1,"%D",0)
^^22^22^3060203^
"^DIC",798.1,798.1,"%D",1,0)
Records of the ROR REGISTRY PARAMETERS file 
"^DIC",798.1,798.1,"%D",2,0)
contain various registry parameters and the data
"^DIC",798.1,798.1,"%D",3,0)
that indicates current registry state. Every 
"^DIC",798.1,798.1,"%D",4,0)
registry must have a record in this file.
"^DIC",798.1,798.1,"%D",5,0)
 
"^DIC",798.1,798.1,"%D",6,0)
Records of the file are uniquely identified by the
"^DIC",798.1,798.1,"%D",7,0)
registry name (the "A" primary key and the
"^DIC",798.1,798.1,"%D",8,0)
uniqueness index "B" are used for that purpose).
"^DIC",798.1,798.1,"%D",9,0)
 
"^DIC",798.1,798.1,"%D",10,0)
A permanent screen (the ^DD(798.1,0,"SCR") node) 
"^DIC",798.1,798.1,"%D",11,0)
restricts access to records of this file. Users
"^DIC",798.1,798.1,"%D",12,0)
can only access records of those registries that
"^DIC",798.1,798.1,"%D",13,0)
they have the security key(s) for. Users with the
"^DIC",798.1,798.1,"%D",14,0)
ROR VA IRM security key can access all records of
"^DIC",798.1,798.1,"%D",15,0)
the file.
"^DIC",798.1,798.1,"%D",16,0)
 
"^DIC",798.1,798.1,"%D",17,0)
If you want the changes in the security keys 
"^DIC",798.1,798.1,"%D",18,0)
allocation to have an effect immediately, you
"^DIC",798.1,798.1,"%D",19,0)
should rebuild the "ACL" cross-reference of the
"^DIC",798.1,798.1,"%D",20,0)
.01 field of the SECURITY KEY multiple of this
"^DIC",798.1,798.1,"%D",21,0)
file. See the description of the cross-reference
"^DIC",798.1,798.1,"%D",22,0)
for more details.
"^DIC",798.1,"B","ROR REGISTRY PARAMETERS",798.1)

"^DIC",798.2,798.2,0)
ROR SELECTION RULE^798.2
"^DIC",798.2,798.2,0,"GL")
^ROR(798.2,
"^DIC",798.2,798.2,"%",0)
^1.005^^0
"^DIC",798.2,798.2,"%D",0)
^^30^30^3020403^
"^DIC",798.2,798.2,"%D",1,0)
The ROR SELECTION RULES file contains definitions
"^DIC",798.2,798.2,"%D",2,0)
of the selection rules that are used to screen
"^DIC",798.2,798.2,"%D",3,0)
patients for addition to the registries. There are
"^DIC",798.2,798.2,"%D",4,0)
two kinds of rules: top-level and lower level.
"^DIC",798.2,798.2,"%D",5,0)
 
"^DIC",798.2,798.2,"%D",6,0)
If a rule is referenced by the ROR REGISTRY 
"^DIC",798.2,798.2,"%D",7,0)
PARAMETERS file, it is the top-level rule.
"^DIC",798.2,798.2,"%D",8,0)
Non-zero value of any top-level rule expression 
"^DIC",798.2,798.2,"%D",9,0)
directly determines that the patient should be
"^DIC",798.2,798.2,"%D",10,0)
added to the corresponding registry.
"^DIC",798.2,798.2,"%D",11,0)
 
"^DIC",798.2,798.2,"%D",12,0)
Lower level rules are referenced only by other 
"^DIC",798.2,798.2,"%D",13,0)
rules (by rule macros in the expressions). Their
"^DIC",798.2,798.2,"%D",14,0)
expressions are evaluated in the proper order, and
"^DIC",798.2,798.2,"%D",15,0)
the result values are used in the expressions of 
"^DIC",798.2,798.2,"%D",16,0)
other rules. Lower level rules have an indirect
"^DIC",798.2,798.2,"%D",17,0)
impact on the final result and can be used for
"^DIC",798.2,798.2,"%D",18,0)
complex processing of linked files and multiples.
"^DIC",798.2,798.2,"%D",19,0)
 
"^DIC",798.2,798.2,"%D",20,0)
For example, a lower level rule can calculate 
"^DIC",798.2,798.2,"%D",21,0)
maximum and minimum values of a parameter in the
"^DIC",798.2,798.2,"%D",22,0)
sub-file, and a top-level rule will analyze these
"^DIC",798.2,798.2,"%D",23,0)
values and decide if the patient should be added 
"^DIC",798.2,798.2,"%D",24,0)
to the registry. Moreover, they could be used to
"^DIC",798.2,798.2,"%D",25,0)
split a very complex rule into several simpler
"^DIC",798.2,798.2,"%D",26,0)
rules.
"^DIC",798.2,798.2,"%D",27,0)
 
"^DIC",798.2,798.2,"%D",28,0)
Records of the file are uniquely identified by the
"^DIC",798.2,798.2,"%D",29,0)
rule name (the "A" primary key and the uniqueness
"^DIC",798.2,798.2,"%D",30,0)
index "B" are used for this purpose).
"^DIC",798.2,"B","ROR SELECTION RULE",798.2)

"^DIC",798.5,798.5,0)
ROR ICD SEARCH^798.5
"^DIC",798.5,798.5,0,"GL")
^ROR(798.5,
"^DIC",798.5,798.5,"%",0)
^1.005^^0
"^DIC",798.5,798.5,"%D",0)
^1.001^7^7^3150528^^^
"^DIC",798.5,798.5,"%D",1,0)
This file stores all the ICD procedure and diagnostic codes and
"^DIC",798.5,798.5,"%D",2,0)
the CPT codes used to identify patients for a given registry during the
"^DIC",798.5,798.5,"%D",3,0)
Registry Update process. The B cross references for the ICD CODE, ICD
"^DIC",798.5,798.5,"%D",4,0)
PROCEDURE CODE and the INPATIENT CPT CODE are used in the EXPRESSION of the
"^DIC",798.5,798.5,"%D",5,0)
ROR SELECTION RULES file (#798.2).  The file design allows CCR to support
"^DIC",798.5,798.5,"%D",6,0)
an unlimited number of codes selected from the ICD DIAGNOSIS file (#80),
"^DIC",798.5,798.5,"%D",7,0)
the ICD OPERATION/PROCEDURE file (#80.1) and the CPT file (#81).
"^DIC",798.5,"B","ROR ICD SEARCH",798.5)

"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"^DIC",799.51,799.51,0)
ROR GENERIC DRUG^799.51
"^DIC",799.51,799.51,0,"GL")
^ROR(799.51,
"^DIC",799.51,799.51,"%",0)
^1.005^^0
"^DIC",799.51,799.51,"%D",0)
^^5^5^3060203^
"^DIC",799.51,799.51,"%D",1,0)
This file contains a list of registry specific
"^DIC",799.51,799.51,"%D",2,0)
generic medications. For example, the ARV 
"^DIC",799.51,799.51,"%D",3,0)
(anti-retroviral) medications associated with the
"^DIC",799.51,799.51,"%D",4,0)
Human Immunodeficiency Virus (HIV) registry are
"^DIC",799.51,799.51,"%D",5,0)
stored here.
"^DIC",799.51,"B","ROR GENERIC DRUG",799.51)

"BLD",9391,6)
^28
**END**
**END**

