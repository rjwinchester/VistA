Released ROR*1.5*27 SEQ #25
Extracted from mail message
**KIDS**:ROR*1.5*27^

**INSTALL NAME**
ROR*1.5*27
"BLD",8891,0)
ROR*1.5*27^CLINICAL CASE REGISTRIES^0^3150506^y
"BLD",8891,1,0)
^^2^2^3150506^^
"BLD",8891,1,1,0)
Enhancements to Clinical Case Registries to include new registries
"BLD",8891,1,2,0)
and report enhancements.
"BLD",8891,4,0)
^9.64PA^799.51^1
"BLD",8891,4,799.51,0)
799.51
"BLD",8891,4,799.51,222)
n^n^f^^y^^y^o^n
"BLD",8891,4,799.51,223)

"BLD",8891,4,799.51,224)
I $P(^(0),U)="OBV/PTV/r+DSV"!($P(^(0),U)="LED/SOF")!($P(^(0),U)="ABC/DOL/3TC")
"BLD",8891,4,"B",799.51,799.51)

"BLD",8891,6)
^22
"BLD",8891,6.3)
58
"BLD",8891,"ABPKG")
n
"BLD",8891,"INI")
PRE^RORP027
"BLD",8891,"INIT")
POST^RORP027
"BLD",8891,"KRN",0)
^9.67PA^779.2^20
"BLD",8891,"KRN",.4,0)
.4
"BLD",8891,"KRN",.401,0)
.401
"BLD",8891,"KRN",.402,0)
.402
"BLD",8891,"KRN",.403,0)
.403
"BLD",8891,"KRN",.5,0)
.5
"BLD",8891,"KRN",.84,0)
.84
"BLD",8891,"KRN",.84,"NM",0)
^9.68A^^0
"BLD",8891,"KRN",3.6,0)
3.6
"BLD",8891,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",8891,"KRN",3.8,0)
3.8
"BLD",8891,"KRN",9.2,0)
9.2
"BLD",8891,"KRN",9.8,0)
9.8
"BLD",8891,"KRN",9.8,"NM",0)
^9.68A^5^5
"BLD",8891,"KRN",9.8,"NM",1,0)
RORX021A^^0^B135223327
"BLD",8891,"KRN",9.8,"NM",2,0)
RORUTL11^^0^B4209534
"BLD",8891,"KRN",9.8,"NM",3,0)
RORX023A^^0^B122090515
"BLD",8891,"KRN",9.8,"NM",4,0)
RORLOCK^^0^B32559211
"BLD",8891,"KRN",9.8,"NM",5,0)
RORUTL02^^0^B53382352
"BLD",8891,"KRN",9.8,"NM","B","RORLOCK",4)

"BLD",8891,"KRN",9.8,"NM","B","RORUTL02",5)

"BLD",8891,"KRN",9.8,"NM","B","RORUTL11",2)

"BLD",8891,"KRN",9.8,"NM","B","RORX021A",1)

"BLD",8891,"KRN",9.8,"NM","B","RORX023A",3)

"BLD",8891,"KRN",19,0)
19
"BLD",8891,"KRN",19,"NM",0)
^9.68A^^
"BLD",8891,"KRN",19.1,0)
19.1
"BLD",8891,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",8891,"KRN",101,0)
101
"BLD",8891,"KRN",101,"NM",0)
^9.68A^^
"BLD",8891,"KRN",409.61,0)
409.61
"BLD",8891,"KRN",771,0)
771
"BLD",8891,"KRN",779.2,0)
779.2
"BLD",8891,"KRN",870,0)
870
"BLD",8891,"KRN",8989.51,0)
8989.51
"BLD",8891,"KRN",8989.52,0)
8989.52
"BLD",8891,"KRN",8994,0)
8994
"BLD",8891,"KRN","B",.4,.4)

"BLD",8891,"KRN","B",.401,.401)

"BLD",8891,"KRN","B",.402,.402)

"BLD",8891,"KRN","B",.403,.403)

"BLD",8891,"KRN","B",.5,.5)

"BLD",8891,"KRN","B",.84,.84)

"BLD",8891,"KRN","B",3.6,3.6)

"BLD",8891,"KRN","B",3.8,3.8)

"BLD",8891,"KRN","B",9.2,9.2)

"BLD",8891,"KRN","B",9.8,9.8)

"BLD",8891,"KRN","B",19,19)

"BLD",8891,"KRN","B",19.1,19.1)

"BLD",8891,"KRN","B",101,101)

"BLD",8891,"KRN","B",409.61,409.61)

"BLD",8891,"KRN","B",771,771)

"BLD",8891,"KRN","B",779.2,779.2)

"BLD",8891,"KRN","B",870,870)

"BLD",8891,"KRN","B",8989.51,8989.51)

"BLD",8891,"KRN","B",8989.52,8989.52)

"BLD",8891,"KRN","B",8994,8994)

"BLD",8891,"PRE")

"BLD",8891,"QUES",0)
^9.62^^0
"BLD",8891,"REQB",0)
^9.611^4^2
"BLD",8891,"REQB",3,0)
ROR*1.5*24^2
"BLD",8891,"REQB",4,0)
PSN*4.0*426^2
"BLD",8891,"REQB","B","PSN*4.0*426",4)

"BLD",8891,"REQB","B","ROR*1.5*24",3)

"DATA",799.51,46,0)
LED/SOF^1^28^4958^^^^^1
"DATA",799.51,47,0)
ABC/DOL/3TC^2^20^4939^^^^^1
"DATA",799.51,48,0)
OBV/PTV/r+DSV^1^28^4981^^^^^1
"FIA",799.51)
ROR GENERIC DRUG
"FIA",799.51,0)
^ROR(799.51,
"FIA",799.51,0,0)
799.51
"FIA",799.51,0,1)
n^n^f^^y^^y^o^n
"FIA",799.51,0,10)

"FIA",799.51,0,11)
I $P(^(0),U)="OBV/PTV/r+DSV"!($P(^(0),U)="LED/SOF")!($P(^(0),U)="ABC/DOL/3TC")
"FIA",799.51,0,"RLRO")

"FIA",799.51,0,"VR")
1.5^ROR
"FIA",799.51,799.51)
0
"FRV1",799.51,"46,0",2)
VA HEPC
"FRV1",799.51,"46,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"46,0",3)
Default (HepC)
"FRV1",799.51,"46,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"46,0",4)
LEDIPASVIR/SOFOSBUVIR
"FRV1",799.51,"46,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"47,0",2)
VA HIV
"FRV1",799.51,"47,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"47,0",3)
Default (HIV)
"FRV1",799.51,"47,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"47,0",4)
ABACAVIR/DOLUTEGRAVIR/LAMIVUDINE
"FRV1",799.51,"47,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"48,0",2)
VA HEPC
"FRV1",799.51,"48,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"48,0",3)
Default (HepC)
"FRV1",799.51,"48,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"48,0",4)
DASABUVIR/OMBITASVIR/PARITAPREVIR/RITONAVIR
"FRV1",799.51,"48,0",4,"F")
;PSNDF(50.6,
"FRV1K",799.51,"46,0",3)
KEY
"FRV1K",799.51,"46,0",3,1)
Drug Group
"FRV1K",799.51,"46,0",3,2)
VA HEPC
"FRV1K",799.51,"46,0",3,3)
99
"FRV1K",799.51,"47,0",3)
KEY
"FRV1K",799.51,"47,0",3,1)
Drug Group
"FRV1K",799.51,"47,0",3,2)
VA HIV
"FRV1K",799.51,"47,0",3,3)
99
"FRV1K",799.51,"48,0",3)
KEY
"FRV1K",799.51,"48,0",3,1)
Drug Group
"FRV1K",799.51,"48,0",3,2)
VA HEPC
"FRV1K",799.51,"48,0",3,3)
99
"INI")
PRE^RORP027
"INIT")
POST^RORP027
"IX",799.51,799.51,"ARDG",0)
799.51^ARDG^Registry & Drug Group^R^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"ARDG",1)
S ^ROR(799.51,"ARDG",X(2),X(3),DA)=""
"IX",799.51,799.51,"ARDG",2)
K ^ROR(799.51,"ARDG",X(2),X(3),DA)
"IX",799.51,799.51,"ARDG",2.5)
K ^ROR(799.51,"ARDG")
"IX",799.51,799.51,"ARDG",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"ARDG",11.1,1,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",11.1,2,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"ARDG",11.1,3,0)
2^C^^^^1
"IX",799.51,799.51,"ARDG",11.1,3,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"KEY",0)
799.51^KEY^Registry, Drug Group, Generic Drug^R^^R^IR^I^799.51^^^^^LS
"IX",799.51,799.51,"KEY",1)
S ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.51,799.51,"KEY",2)
K ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)
"IX",799.51,799.51,"KEY",2.5)
K ^ROR(799.51,"KEY")
"IX",799.51,799.51,"KEY",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"KEY",11.1,1,0)
1^F^799.51^.02^^1
"IX",799.51,799.51,"KEY",11.1,2,0)
2^F^799.51^.03^^2
"IX",799.51,799.51,"KEY",11.1,3,0)
3^F^799.51^.04^^3
"KEY",799.51,799.51,"A",0)
799.51^A^S^694
"KEY",799.51,799.51,"A",2,0)
^.312IA^3^3
"KEY",799.51,799.51,"A",2,1,0)
.02^799.51^1
"KEY",799.51,799.51,"A",2,2,0)
.03^799.51^2
"KEY",799.51,799.51,"A",2,3,0)
.04^799.51^3
"KEYPTR",799.51,799.51,"A")
799.51^KEY
"MBREQ")
0
"PGL",799.51,0,2,.02)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PGL",799.51,0,3,.03)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,4,.04)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PKG",618,-1)
1^1
"PKG",618,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",618,20,0)
^9.402P^^
"PKG",618,22,0)
^9.49I^1^1
"PKG",618,22,1,0)
1.5^3060208^3060419^568
"PKG",618,22,1,"PAH",1,0)
27^3150506^520736431
"PKG",618,22,1,"PAH",1,1,0)
^^2^2^3150506
"PKG",618,22,1,"PAH",1,1,1,0)
Enhancements to Clinical Case Registries to include new registries
"PKG",618,22,1,"PAH",1,1,2,0)
and report enhancements.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","RORLOCK")
0^4^B32559211^B28241178
"RTN","RORLOCK",1,0)
RORLOCK ;HCIOFO/SG - LOCKS AND TRANSACTIONS ;17 Mar 2015  11:45 AM
"RTN","RORLOCK",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,27**;Feb 17, 2006;Build 58
"RTN","RORLOCK",3,0)
 ;
"RTN","RORLOCK",4,0)
 ; This routine uses the following IAs:
"RTN","RORLOCK",5,0)
 ; #2052   GET1^DID (supported)
"RTN","RORLOCK",6,0)
 ; #2055   ROOT^DILFD (supported)
"RTN","RORLOCK",7,0)
 ; #2056   GET1^DIQ (supported)
"RTN","RORLOCK",8,0)
 ; #10103  FMTE^XLFDT (supported)
"RTN","RORLOCK",9,0)
 ; #10103  NOW^XLFDT (supported)
"RTN","RORLOCK",10,0)
 ;
"RTN","RORLOCK",11,0)
 ;******************************************************************************
"RTN","RORLOCK",12,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORLOCK",13,0)
 ;        
"RTN","RORLOCK",14,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORLOCK",15,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORLOCK",16,0)
 ;ROR*1.5*27   FEB  2015   T KOPP       Changed default lock time from 3 to
"RTN","RORLOCK",17,0)
 ;                                      DILOCKTM if DILOCKTM > 3
"RTN","RORLOCK",18,0)
 ;******************************************************************************
"RTN","RORLOCK",19,0)
 Q
"RTN","RORLOCK",20,0)
 ;
"RTN","RORLOCK",21,0)
 ;***** FINDS THE LOCK DESCRIPTOR FOR THE GLOBAL NODE
"RTN","RORLOCK",22,0)
LDSC(NODELIST) ;
"RTN","RORLOCK",23,0)
 N DESCR,IENS,L,NDX,NODE,RORMSG,SP,TMP
"RTN","RORLOCK",24,0)
 S:$D(NODELIST)<10 NODELIST(NODELIST)=""
"RTN","RORLOCK",25,0)
 S (DESCR,NODE)=""
"RTN","RORLOCK",26,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",27,0)
 . ;--- The Node itself
"RTN","RORLOCK",28,0)
 . S SP=$$XLNDX(NODE),TMP=$G(^XTMP("RORLOCK",SP))
"RTN","RORLOCK",29,0)
 . S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",30,0)
 . ;--- Left Siblings and Ancestors
"RTN","RORLOCK",31,0)
 . S NDX=SP
"RTN","RORLOCK",32,0)
 . F  S NDX=$O(^XTMP("RORLOCK",NDX),-1),L=$L(NDX)  Q:(NDX="")!(NDX'=$E(SP,1,L))  D
"RTN","RORLOCK",33,0)
 . . S TMP=$G(^XTMP("RORLOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",34,0)
 . ;--- Right Siblings and Descendants
"RTN","RORLOCK",35,0)
 . S NDX=SP,L=$L(SP)
"RTN","RORLOCK",36,0)
 . F  S NDX=$O(^XTMP("RORLOCK",NDX))  Q:(NDX="")!($E(NDX,1,L)'=SP)  D
"RTN","RORLOCK",37,0)
 . . S TMP=$G(^XTMP("RORLOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RORLOCK",38,0)
 ;--- Prepare the lock descriptor
"RTN","RORLOCK",39,0)
 S:'DESCR $P(DESCR,U)=$$NOW^XLFDT
"RTN","RORLOCK",40,0)
 D:$P(DESCR,U,3)>0
"RTN","RORLOCK",41,0)
 . S IENS=+$P(DESCR,U,3)_","
"RTN","RORLOCK",42,0)
 . S $P(DESCR,U,2)=$$GET1^DIQ(200,IENS,.01,,,"RORMSG")
"RTN","RORLOCK",43,0)
 . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,200,IENS)
"RTN","RORLOCK",44,0)
 S:$P(DESCR,U,2)="" $P(DESCR,U,2)="UNKNOWN USER"
"RTN","RORLOCK",45,0)
 Q $P(DESCR,U,1,5)
"RTN","RORLOCK",46,0)
 ;
"RTN","RORLOCK",47,0)
 ;***** LOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RORLOCK",48,0)
 ;
"RTN","RORLOCK",49,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",50,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RORLOCK",51,0)
 ; [FIELD]       Field number
"RTN","RORLOCK",52,0)
 ; [TO]          Timeout (DILOCKTM sec, by default)
"RTN","RORLOCK",53,0)
 ; [NAME]        Process name
"RTN","RORLOCK",54,0)
 ;
"RTN","RORLOCK",55,0)
 ; Return Values:
"RTN","RORLOCK",56,0)
 ;       <0  Error code
"RTN","RORLOCK",57,0)
 ;        0  Ok (the object has been locked)
"RTN","RORLOCK",58,0)
 ;       >0  The object is locked by another user. A lock descriptor
"RTN","RORLOCK",59,0)
 ;           is returned in this case:
"RTN","RORLOCK",60,0)
 ;             ^01: Date/Time (FileMan)
"RTN","RORLOCK",61,0)
 ;             ^02: User/Process name
"RTN","RORLOCK",62,0)
 ;             ^03: User IEN (DUZ)
"RTN","RORLOCK",63,0)
 ;             ^04: $JOB
"RTN","RORLOCK",64,0)
 ;             ^05: Task number
"RTN","RORLOCK",65,0)
 ;
"RTN","RORLOCK",66,0)
 ; If the third field is empty then the object is locked by a
"RTN","RORLOCK",67,0)
 ; registry background process (see the name in the 2nd field).
"RTN","RORLOCK",68,0)
 ;
"RTN","RORLOCK",69,0)
LOCK(FILE,IENS,FIELD,TO,NAME) ;
"RTN","RORLOCK",70,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC,TMP
"RTN","RORLOCK",71,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q RC
"RTN","RORLOCK",72,0)
 . S RC=$$LOCK1(FILE,$G(IENS),$G(FIELD),$G(TO),$G(NAME))
"RTN","RORLOCK",73,0)
 ;--- Compile the list of global nodes
"RTN","RORLOCK",74,0)
 S RC=$$NODELIST(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",75,0)
 Q:RC<0 RC  Q:NODELIST="" 0
"RTN","RORLOCK",76,0)
 ;--- Try to lock the object(s)
"RTN","RORLOCK",77,0)
 X "L +("_NODELIST_"):"_$S($G(TO)>0:TO,$G(DILOCKTM)>3:DILOCKTM,1:3)  E  Q $$LDSC(.NODELIST)
"RTN","RORLOCK",78,0)
 ;--- Create the lock descriptor(s)
"RTN","RORLOCK",79,0)
 S DESCR=$$NOW^XLFDT_U_$G(NAME)_U_U_$JOB_U_$G(ZTSK)
"RTN","RORLOCK",80,0)
 S:$G(NAME)="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RORLOCK",81,0)
 S NODE=""
"RTN","RORLOCK",82,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",83,0)
 . S NDX=$$XLNDX(NODE)
"RTN","RORLOCK",84,0)
 . ;--- Calculate the lock counter
"RTN","RORLOCK",85,0)
 . S TMP=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",86,0)
 . S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RORLOCK",87,0)
 . ;--- Store the descriptor
"RTN","RORLOCK",88,0)
 . S ^XTMP("RORLOCK",NDX)=DESCR
"RTN","RORLOCK",89,0)
 Q 0
"RTN","RORLOCK",90,0)
 ;
"RTN","RORLOCK",91,0)
LOCK1(FILE,IENS,FIELD,TO,NAME) ;
"RTN","RORLOCK",92,0)
 N DESCR,NDX,NODE,TMP,RORLTM
"RTN","RORLOCK",93,0)
 S NODE=$$NODE(FILE,$G(IENS),$G(FIELD)),RORLTM=$S($G(DILOCKTM)>3:DILOCKTM,1:3)
"RTN","RORLOCK",94,0)
 Q:NODE<0 NODE
"RTN","RORLOCK",95,0)
 ;--- Try to lock the object
"RTN","RORLOCK",96,0)
 L +@NODE:$S($G(TO)>0:TO,1:RORLTM)  E  Q $$LDSC(NODE)
"RTN","RORLOCK",97,0)
 ;--- Create the lock descriptor
"RTN","RORLOCK",98,0)
 S DESCR=$$NOW^XLFDT_U_$G(NAME)_U_U_$JOB_U_$G(ZTSK)
"RTN","RORLOCK",99,0)
 S:$G(NAME)="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RORLOCK",100,0)
 ;--- Calculate the lock counter
"RTN","RORLOCK",101,0)
 S NDX=$$XLNDX(NODE),TMP=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",102,0)
 S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RORLOCK",103,0)
 ;--- Store the descriptor
"RTN","RORLOCK",104,0)
 S ^XTMP("RORLOCK",NDX)=DESCR
"RTN","RORLOCK",105,0)
 Q 0
"RTN","RORLOCK",106,0)
 ;
"RTN","RORLOCK",107,0)
 ;***** RETURNS THE GLOBAL NODE OF THE OBJECT
"RTN","RORLOCK",108,0)
 ;
"RTN","RORLOCK",109,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",110,0)
 ; IENS          IENS of the record or subfile
"RTN","RORLOCK",111,0)
 ; FIELD         Field number
"RTN","RORLOCK",112,0)
 ;
"RTN","RORLOCK",113,0)
 ; Return Values:
"RTN","RORLOCK",114,0)
 ;       <0  Error code
"RTN","RORLOCK",115,0)
 ;           Closed root
"RTN","RORLOCK",116,0)
 ;
"RTN","RORLOCK",117,0)
NODE(FILE,IENS,FIELD) ;
"RTN","RORLOCK",118,0)
 N FGL,IEN,NODE,RC
"RTN","RORLOCK",119,0)
 S IEN=+IENS  S:IEN $P(IENS,",")=""
"RTN","RORLOCK",120,0)
 ;--- Closed root of the (sub)file
"RTN","RORLOCK",121,0)
 S NODE=$$ROOT^DILFD(FILE,IENS,1)
"RTN","RORLOCK",122,0)
 I NODE=""  D  Q RC
"RTN","RORLOCK",123,0)
 . S RC=$$ERROR^RORERR(-98,,,,FILE,IENS)
"RTN","RORLOCK",124,0)
 Q:'IEN NODE
"RTN","RORLOCK",125,0)
 ;--- The record node
"RTN","RORLOCK",126,0)
 S NODE=$NA(@NODE@(IEN))
"RTN","RORLOCK",127,0)
 Q:'FIELD NODE
"RTN","RORLOCK",128,0)
 ;--- Field node
"RTN","RORLOCK",129,0)
 S FGL=$$GET1^DID(FILE,FIELD,,"GLOBAL SUBSCRIPT LOCATION",,"RORMSG")
"RTN","RORLOCK",130,0)
 I $G(DIERR)  D  Q RC
"RTN","RORLOCK",131,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,FILE)
"RTN","RORLOCK",132,0)
 S:$P(FGL,";")'="" NODE=$NA(@NODE@($P(FGL,";")))
"RTN","RORLOCK",133,0)
 Q NODE
"RTN","RORLOCK",134,0)
 ;
"RTN","RORLOCK",135,0)
 ;***** COMPILES THE LIST OF GLOBAL NODES
"RTN","RORLOCK",136,0)
NODELIST(NODELIST,FILE,IENS,FIELD) ;
"RTN","RORLOCK",137,0)
 N NODE,PI,RC  K NODELIST
"RTN","RORLOCK",138,0)
 S NODELIST="",RC=0
"RTN","RORLOCK",139,0)
 ;--- Main object
"RTN","RORLOCK",140,0)
 I $G(FILE)>0  D  Q:RC<0 RC
"RTN","RORLOCK",141,0)
 . S NODE=$$NODE(FILE,IENS,FIELD)
"RTN","RORLOCK",142,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RORLOCK",143,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RORLOCK",144,0)
 . S NODELIST(NODE)=""
"RTN","RORLOCK",145,0)
 ;--- Linked objects
"RTN","RORLOCK",146,0)
 S PI="FILE"
"RTN","RORLOCK",147,0)
 F  S PI=$Q(@PI)  Q:PI=""  D  Q:RC<0
"RTN","RORLOCK",148,0)
 . S NODE=$$NODE($QS(PI,1),$QS(PI,2),$QS(PI,3))
"RTN","RORLOCK",149,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RORLOCK",150,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RORLOCK",151,0)
 . S NODELIST(NODE)=""
"RTN","RORLOCK",152,0)
 Q:RC<0 RC
"RTN","RORLOCK",153,0)
 ;---
"RTN","RORLOCK",154,0)
 S NODELIST=$P(NODELIST,",",2,999)
"RTN","RORLOCK",155,0)
 Q RC
"RTN","RORLOCK",156,0)
 ;
"RTN","RORLOCK",157,0)
 ;***** GENERATES A TEXT DESCRIPTION FROM THE LOCK DESCRIPTOR
"RTN","RORLOCK",158,0)
 ;
"RTN","RORLOCK",159,0)
 ; LDSC          Lock descriptor returned by the $$LOCK^RORLOCK
"RTN","RORLOCK",160,0)
 ;
"RTN","RORLOCK",161,0)
TEXT(LDSC) ;
"RTN","RORLOCK",162,0)
 N LTEXT
"RTN","RORLOCK",163,0)
 S LTEXT=$P(LDSC,U,2)_" about "_$$FMTE^XLFDT(+LDSC)
"RTN","RORLOCK",164,0)
 S:$P(LDSC,U,4) LTEXT=LTEXT_"; Job #"_$P(LDSC,U,4)
"RTN","RORLOCK",165,0)
 S:$P(LDSC,U,5) LTEXT=LTEXT_"; Task #"_$P(LDSC,U,5)
"RTN","RORLOCK",166,0)
 Q LTEXT
"RTN","RORLOCK",167,0)
 ;
"RTN","RORLOCK",168,0)
 ;***** UNLOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RORLOCK",169,0)
 ;
"RTN","RORLOCK",170,0)
 ; FILE          File/subfile number
"RTN","RORLOCK",171,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RORLOCK",172,0)
 ; [FIELD]       Field number
"RTN","RORLOCK",173,0)
 ;
"RTN","RORLOCK",174,0)
 ; Return Values:
"RTN","RORLOCK",175,0)
 ;       <0  Error code
"RTN","RORLOCK",176,0)
 ;        0  Ok
"RTN","RORLOCK",177,0)
 ;
"RTN","RORLOCK",178,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RORLOCK",179,0)
 ;       D UNLOCK^RORLOCK(...) if you do not need its return value.
"RTN","RORLOCK",180,0)
 ;
"RTN","RORLOCK",181,0)
UNLOCK(FILE,IENS,FIELD) ;
"RTN","RORLOCK",182,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC
"RTN","RORLOCK",183,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q:$QUIT RC  Q
"RTN","RORLOCK",184,0)
 . S RC=$$UNLOCK1(FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",185,0)
 ;--- Compile the list of global nodes
"RTN","RORLOCK",186,0)
 S RC=$$NODELIST(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",187,0)
 I RC<0  Q:$QUIT RC  Q
"RTN","RORLOCK",188,0)
 I NODELIST=""  Q:$QUIT 0  Q
"RTN","RORLOCK",189,0)
 ;--- Remove the lock descriptor(s)
"RTN","RORLOCK",190,0)
 S NODE=""
"RTN","RORLOCK",191,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RORLOCK",192,0)
 . S NDX=$$XLNDX(NODE),DESCR=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",193,0)
 . Q:$P(DESCR,U,4)'=$JOB
"RTN","RORLOCK",194,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RORLOCK",195,0)
 . . S $P(^XTMP("RORLOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RORLOCK",196,0)
 . E  K ^XTMP("RORLOCK",NDX)
"RTN","RORLOCK",197,0)
 ;--- Unlock the object(s)
"RTN","RORLOCK",198,0)
 X "L -("_NODELIST_")"
"RTN","RORLOCK",199,0)
 Q:$QUIT 0  Q
"RTN","RORLOCK",200,0)
 ;
"RTN","RORLOCK",201,0)
UNLOCK1(FILE,IENS,FIELD) ;
"RTN","RORLOCK",202,0)
 N DESCR,NDX,NODE
"RTN","RORLOCK",203,0)
 S NODE=$$NODE(FILE,$G(IENS),$G(FIELD))
"RTN","RORLOCK",204,0)
 Q:NODE<0 NODE
"RTN","RORLOCK",205,0)
 ;--- Remove the lock descriptor
"RTN","RORLOCK",206,0)
 S NDX=$$XLNDX(NODE),DESCR=$G(^XTMP("RORLOCK",NDX))
"RTN","RORLOCK",207,0)
 D:$P(DESCR,U,4)=$JOB
"RTN","RORLOCK",208,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RORLOCK",209,0)
 . . S $P(^XTMP("RORLOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RORLOCK",210,0)
 . E  K ^XTMP("RORLOCK",NDX)
"RTN","RORLOCK",211,0)
 ;--- Unlock the object
"RTN","RORLOCK",212,0)
 L -@NODE
"RTN","RORLOCK",213,0)
 Q 0
"RTN","RORLOCK",214,0)
 ;
"RTN","RORLOCK",215,0)
 ;***** RETURNS SUBSCRIPT OF THE NODE IN THE DESCRIPTOR TABLE
"RTN","RORLOCK",216,0)
XLNDX(NODE) ;
"RTN","RORLOCK",217,0)
 N L  S L=$L(NODE)
"RTN","RORLOCK",218,0)
 Q $S($E(NODE,L)=")":$E(NODE,1,L-1),1:NODE)
"RTN","RORP027")
0^^B19318782^n/a
"RTN","RORP027",1,0)
RORP027 ;ALB/TK - CCR PRE/POST-INSTALL PATCH 27 ;29 Jul 2014  4:02 PM
"RTN","RORP027",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**27**;Feb 17, 2006;Build 58
"RTN","RORP027",3,0)
 ;
"RTN","RORP027",4,0)
 ; This routine uses the following IAs:
"RTN","RORP027",5,0)
 ; #3277         OWNSKEY^XUSRB (supported)
"RTN","RORP027",6,0)
 ; #10141        BMES^XPDUTL
"RTN","RORP027",7,0)
 ;               MES^XPDUTL
"RTN","RORP027",8,0)
 ;
"RTN","RORP027",9,0)
 ;******************************************************************************
"RTN","RORP027",10,0)
 ;******************************************************************************
"RTN","RORP027",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORP027",12,0)
 ;        
"RTN","RORP027",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORP027",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORP027",15,0)
 ;ROR*1.5*27   FEB  2015   T KOPP       Patch 27 pre and post install
"RTN","RORP027",16,0)
 ;******************************************************************************
"RTN","RORP027",17,0)
 ;******************************************************************************
"RTN","RORP027",18,0)
 ;
"RTN","RORP027",19,0)
 Q
"RTN","RORP027",20,0)
 ;Pre-Install routine for Patch 27
"RTN","RORP027",21,0)
PRE ;
"RTN","RORP027",22,0)
 ; CHECK FOR ROR VA IRM KEY, ABORT IF USER DOES NOT POSSESS
"RTN","RORP027",23,0)
 N RORKEYOK
"RTN","RORP027",24,0)
 D BMES^XPDUTL("Verifying installing user has the ROR VA IRM security key")
"RTN","RORP027",25,0)
 D OWNSKEY^XUSRB(.RORKEYOK,"ROR VA IRM",DUZ)
"RTN","RORP027",26,0)
 I '$G(RORKEYOK(0)) D  Q
"RTN","RORP027",27,0)
 . S XPDABORT=1
"RTN","RORP027",28,0)
 . D BMES^XPDUTL("****** INSTALL ABORTED!!! ******")
"RTN","RORP027",29,0)
 . D BMES^XPDUTL("This patch can only be installed by a user who is assigned the ROR VA IRM key")
"RTN","RORP027",30,0)
 . D BMES^XPDUTL("Restart the installation again once the appropriate key has been assigned")
"RTN","RORP027",31,0)
 D BMES^XPDUTL("  User has the ROR VA IRM key - OK to install")
"RTN","RORP027",32,0)
 Q
"RTN","RORP027",33,0)
 ;
"RTN","RORP027",34,0)
 ;Post-Install routine for Patch 27
"RTN","RORP027",35,0)
POST ;
"RTN","RORP027",36,0)
 N CT,ROR,RORERR,REGNAME,REGIEN,RORBUF,RORFDA,RORMSG,RORMSGX
"RTN","RORP027",37,0)
 D BMES^XPDUTL("Post install started")
"RTN","RORP027",38,0)
 ; Check if any registries from patch 24 have been inactivated
"RTN","RORP027",39,0)
 S ROR(1)="VA ALS",ROR(2)="VA OSTEOPOROSIS",ROR(3)="VA HCC",ROR(4)="VA LUNG CANCER"
"RTN","RORP027",40,0)
 S ROR(5)="VA MELANOMA",ROR(6)="VA COLORECTAL CANCER",ROR(7)="VA PANCREATIC CANCER",ROR(8)="VA PROSTATE CANCER"
"RTN","RORP027",41,0)
 D BMES^XPDUTL("Checking for inactive registries")
"RTN","RORP027",42,0)
 S CT=1,RORERR=0
"RTN","RORP027",43,0)
 F ROR=1:1:8 D
"RTN","RORP027",44,0)
 . K RORBUF,RORMSGX,RORFDA
"RTN","RORP027",45,0)
 . S REGIEN=$$REGIEN^RORUTL02(ROR(ROR),"11I",.RORBUF)
"RTN","RORP027",46,0)
 . I $G(RORBUF("DILIST","ID",1,11)) D
"RTN","RORP027",47,0)
 .. S RORFDA(798.1,REGIEN_",",11)=0
"RTN","RORP027",48,0)
 .. D FILE^DIE(,"RORFDA","RORMSGX")
"RTN","RORP027",49,0)
 .. S CT=CT+1,RORMSG(CT)=$J("",10)_ROR(ROR)
"RTN","RORP027",50,0)
 .. I '$G(RORMSGX) D
"RTN","RORP027",51,0)
 ... S RORMSG(CT)=RORMSG(CT)_" was reactivated"
"RTN","RORP027",52,0)
 .. E  D
"RTN","RORP027",53,0)
 ... S RORMSG(CT)=RORMSG(CT)_" must be manually reactivated",RORERR=1
"RTN","RORP027",54,0)
 I CT=1 K RORMSG D BMES^XPDUTL("No inactive registries found")
"RTN","RORP027",55,0)
 I CT>1 D
"RTN","RORP027",56,0)
 . S RORMSG(1)="REGISTRY UPDATE STATUS:" D MES^XPDUTL(.RORMSG)
"RTN","RORP027",57,0)
 . I RORERR D BMES^XPDUTL("***** AT LEAST ONE REGISTRY MUST BE MANUALLY REACTIVATED *****")
"RTN","RORP027",58,0)
 D BMES^XPDUTL("    Step Complete")
"RTN","RORP027",59,0)
 ;
"RTN","RORP027",60,0)
 D BMES^XPDUTL("Updating List Items")
"RTN","RORP027",61,0)
 D UPDLIST
"RTN","RORP027",62,0)
 D BMES^XPDUTL("    Step Complete")
"RTN","RORP027",63,0)
 ;
"RTN","RORP027",64,0)
 D BMES^XPDUTL("Post install completed")
"RTN","RORP027",65,0)
 Q
"RTN","RORP027",66,0)
 ;
"RTN","RORP027",67,0)
UPDLIST ;
"RTN","RORP027",68,0)
 N RORI,RORI1,RORREG,RORDATA,REGIEN,Z,CT
"RTN","RORP027",69,0)
 F RORI=1:1 S RORREG=$P($P($T(@("REGS+"_RORI_"^RORP027")),";;",2),U) Q:RORREG=""  D
"RTN","RORP027",70,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP027",71,0)
 . I REGIEN>0 D
"RTN","RORP027",72,0)
 .. F RORI1=1:1 S RORDATA=$P($T(@("LISTITEM+"_RORI1_"^RORP027")),";;",2) Q:RORDATA=""  D
"RTN","RORP027",73,0)
 ... Q:$D(^ROR(799.1,"KEY",+$P(RORDATA,U,2),REGIEN,+$P(RORDATA,U,3)))  ; Entry already exists
"RTN","RORP027",74,0)
 ... K RORFDA,RORMSG,RORERR,DIERR
"RTN","RORP027",75,0)
 ... S RORFDA(799.1,"?+1,",.01)=$P(RORDATA,U)
"RTN","RORP027",76,0)
 ... S RORFDA(799.1,"?+1,",.02)=$P(RORDATA,U,2)
"RTN","RORP027",77,0)
 ... S RORFDA(799.1,"?+1,",.03)=REGIEN
"RTN","RORP027",78,0)
 ... S RORFDA(799.1,"?+1,",.04)=$P(RORDATA,U,3)
"RTN","RORP027",79,0)
 ... D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP027",80,0)
 ... I $G(DIERR) D
"RTN","RORP027",81,0)
 .... K RORERR
"RTN","RORP027",82,0)
 .... S RORERR(1)="     New entry for "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP027",83,0)
 .... S RORERR(2)="     and was not added to the ROR LIST ITEM file."
"RTN","RORP027",84,0)
 .... S RORERR(3)="     (Data = "_RORDATA_")"
"RTN","RORP027",85,0)
 .... S RORERR(4)="     Please report this error to your CCR contact:"
"RTN","RORP027",86,0)
 .... S RORERR(5)=""
"RTN","RORP027",87,0)
 .... S Z=0,CT=5 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",6)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP027",88,0)
 .... D MES^XPDUTL(.RORERR)
"RTN","RORP027",89,0)
 Q
"RTN","RORP027",90,0)
 ;
"RTN","RORP027",91,0)
REGS ; List of registries whose LIST ITEM entries should be added to file 799.1
"RTN","RORP027",92,0)
 ;;VA ALS
"RTN","RORP027",93,0)
 ;;VA APNEA
"RTN","RORP027",94,0)
 ;;VA COLORECTAL CANCER
"RTN","RORP027",95,0)
 ;;VA HCC
"RTN","RORP027",96,0)
 ;;VA LUNG CANCER
"RTN","RORP027",97,0)
 ;;VA MELANOMA
"RTN","RORP027",98,0)
 ;;VA OSTEOPOROSIS
"RTN","RORP027",99,0)
 ;;VA PANCREATIC CANCER
"RTN","RORP027",100,0)
 ;;VA PROSTATE CANCER
"RTN","RORP027",101,0)
 ;;
"RTN","RORP027",102,0)
 ;
"RTN","RORP027",103,0)
LISTITEM ;  Entries to add to file 799.1  text^group^code
"RTN","RORP027",104,0)
 ;;eGFR by CKD-EPI^7^3
"RTN","RORP027",105,0)
 ;;eGFR by MDRD^7^2
"RTN","RORP027",106,0)
 ;;Creatinine clearance by Cockcroft-Gault^7^1
"RTN","RORP027",107,0)
 ;;FIB-4^6^4
"RTN","RORP027",108,0)
 ;;APRI^6^3
"RTN","RORP027",109,0)
 ;;MELD-Na^6^2
"RTN","RORP027",110,0)
 ;;MELD^6^1
"RTN","RORP027",111,0)
 ;;BMI^5^1
"RTN","RORP027",112,0)
 ;;Registry Lab^3^1
"RTN","RORP027",113,0)
 ;;
"RTN","RORUTL02")
0^5^B53382352^B37458648
"RTN","RORUTL02",1,0)
RORUTL02 ;HCIOFO/SG - UTILITIES  ;8/25/05 10:20am
"RTN","RORUTL02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**21,27**;Feb 17, 2006;Build 58
"RTN","RORUTL02",3,0)
 ;
"RTN","RORUTL02",4,0)
 ;******************************************************************************
"RTN","RORUTL02",5,0)
 ;******************************************************************************
"RTN","RORUTL02",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL02",7,0)
 ;        
"RTN","RORUTL02",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL02",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL02",10,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Changed LOCKREG entry point to loop thru
"RTN","RORUTL02",11,0)
 ;                                      registries to lock only 15 at a time to
"RTN","RORUTL02",12,0)
 ;                                      prevent maxstring errors when lock
"RTN","RORUTL02",13,0)
 ;                                      command is executed.
"RTN","RORUTL02",14,0)
 ;
"RTN","RORUTL02",15,0)
 ;******************************************************************************
"RTN","RORUTL02",16,0)
 ;
"RTN","RORUTL02",17,0)
 ; This routine uses the following IAs:
"RTN","RORUTL02",18,0)
 ;
"RTN","RORUTL02",19,0)
 ; #2701         $$GETICN^MPIF001 Gets ICN (supported)
"RTN","RORUTL02",20,0)
 ;               $$IFLOCAL^MPIF001 (checks for local ICN) (supported)
"RTN","RORUTL02",21,0)
 ; #3556         $$GCPR^LA7QRY
"RTN","RORUTL02",22,0)
 ; #3557         Access to the field .01 and x-ref "B"
"RTN","RORUTL02",23,0)
 ;               of the file 95.3
"RTN","RORUTL02",24,0)
 ; #3646         $$EMPL^DGSEC4
"RTN","RORUTL02",25,0)
 ; #10035        Access to the field #.09 of the file #2
"RTN","RORUTL02",26,0)
 ;
"RTN","RORUTL02",27,0)
 Q
"RTN","RORUTL02",28,0)
 ;
"RTN","RORUTL02",29,0)
 ;***** REMOVES THE INACTIVE REGISTRIES FROM THE LIST
"RTN","RORUTL02",30,0)
 ;
"RTN","RORUTL02",31,0)
 ; .REGLST(      A list of registry names (as subscripts)
"RTN","RORUTL02",32,0)
 ;   RegName)    Registry IEN (output)
"RTN","RORUTL02",33,0)
 ;
"RTN","RORUTL02",34,0)
 ; Return values:
"RTN","RORUTL02",35,0)
 ;       <0  Error code
"RTN","RORUTL02",36,0)
 ;        0  Ok
"RTN","RORUTL02",37,0)
 ;
"RTN","RORUTL02",38,0)
 ; This function removes names of those registries that are
"RTN","RORUTL02",39,0)
 ; inactive or cannot be updated for any other reasons from
"RTN","RORUTL02",40,0)
 ; the list. It also associates registry IENs with the names
"RTN","RORUTL02",41,0)
 ; of registries remaining on the list.
"RTN","RORUTL02",42,0)
 ;
"RTN","RORUTL02",43,0)
 ; Moreover, it records corresponding messages about skipped
"RTN","RORUTL02",44,0)
 ; registries to the current open log.
"RTN","RORUTL02",45,0)
 ;
"RTN","RORUTL02",46,0)
ARLST(REGLST) ;
"RTN","RORUTL02",47,0)
 N INFO,RC,REGIEN,REGNAME,RORBUF,TMP  K DSTLST
"RTN","RORUTL02",48,0)
 S REGNAME="",RC=0
"RTN","RORUTL02",49,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUTL02",50,0)
 . S REGIEN=$$REGIEN(REGNAME,"@;11I;21.05I",.RORBUF)
"RTN","RORUTL02",51,0)
 . ;--- Cannot find (or load) the registry parameters
"RTN","RORUTL02",52,0)
 . I REGIEN'>0  D  Q
"RTN","RORUTL02",53,0)
 . . D ERROR^RORERR(REGIEN,,REGNAME)
"RTN","RORUTL02",54,0)
 . . K REGLST(REGNAME)
"RTN","RORUTL02",55,0)
 . ;--- Check if the registry is marked as 'inactive'
"RTN","RORUTL02",56,0)
 . I $G(RORBUF("DILIST","ID",1,11))  D  Q
"RTN","RORUTL02",57,0)
 . . D ERROR^RORERR(-48,,,,REGNAME)
"RTN","RORUTL02",58,0)
 . . K REGLST(REGNAME)
"RTN","RORUTL02",59,0)
 . ;--- Check if the registry has not been populated
"RTN","RORUTL02",60,0)
 . I '$G(RORBUF("DILIST","ID",1,21.05)),'$G(RORPARM("SETUP"))  D  Q
"RTN","RORUTL02",61,0)
 . . D TEXT^RORTXT(7980000.02,.INFO)
"RTN","RORUTL02",62,0)
 . . D ERROR^RORERR(-103,,.INFO,,REGNAME)
"RTN","RORUTL02",63,0)
 . . K INFO,REGLST(REGNAME)
"RTN","RORUTL02",64,0)
 . ;--- Store the registry IEN
"RTN","RORUTL02",65,0)
 . S REGLST(REGNAME)=REGIEN
"RTN","RORUTL02",66,0)
 Q RC
"RTN","RORUTL02",67,0)
 ;
"RTN","RORUTL02",68,0)
 ;***** RETURNS A FULL NATIONAL ICN OF THE PATIENT
"RTN","RORUTL02",69,0)
 ;
"RTN","RORUTL02",70,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",71,0)
 ;
"RTN","RORUTL02",72,0)
 ; Return Values:
"RTN","RORUTL02",73,0)
 ;       <0  Error code
"RTN","RORUTL02",74,0)
 ;       ""  ICN has not been assigned or ICN is a local ICN
"RTN","RORUTL02",75,0)
 ;       >0  Patient National ICN
"RTN","RORUTL02",76,0)
 ;
"RTN","RORUTL02",77,0)
ICN(PTIEN) ;
"RTN","RORUTL02",78,0)
 N ICN,L,TMP
"RTN","RORUTL02",79,0)
 I $$IFLOCAL^MPIF001(PTIEN) Q ""
"RTN","RORUTL02",80,0)
 S ICN=$$GETICN^MPIF001(PTIEN)
"RTN","RORUTL02",81,0)
 I ICN'>0  D  Q ""
"RTN","RORUTL02",82,0)
 . S TMP=$$ERROR^RORERR(-57,,$P(ICN,U,2),PTIEN,+ICN,"$$GETICN^MPIF001")
"RTN","RORUTL02",83,0)
 ;--- Validate the checksum (just in case ;-)
"RTN","RORUTL02",84,0)
 S L=$L($P(ICN,"V",2))
"RTN","RORUTL02",85,0)
 Q $S(L<6:$P(ICN,"V")_"V"_$E("000000",1,6-L)_$P(ICN,"V",2),1:ICN)
"RTN","RORUTL02",86,0)
 ;
"RTN","RORUTL02",87,0)
 ;***** LOADS THE LAB RESULTS
"RTN","RORUTL02",88,0)
 ;
"RTN","RORUTL02",89,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",90,0)
 ;
"RTN","RORUTL02",91,0)
 ; SDT           Start date of the results
"RTN","RORUTL02",92,0)
 ; EDT           End date of the results
"RTN","RORUTL02",93,0)
 ;
"RTN","RORUTL02",94,0)
 ; [ROR8DST]     Closed root of the destination array
"RTN","RORUTL02",95,0)
 ;               (the ^TMP("RORTMP",$J) node, by default)
"RTN","RORUTL02",96,0)
 ;
"RTN","RORUTL02",97,0)
 ; Return values:
"RTN","RORUTL02",98,0)
 ;       <0  Error code
"RTN","RORUTL02",99,0)
 ;        0  Ok
"RTN","RORUTL02",100,0)
 ;
"RTN","RORUTL02",101,0)
LABRSLTS(PTIEN,SDT,EDT,ROR8DST) ;
"RTN","RORUTL02",102,0)
 N H7CH,RC,RORMSG,TMP
"RTN","RORUTL02",103,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORTMP",$J))
"RTN","RORUTL02",104,0)
 K @ROR8DST
"RTN","RORUTL02",105,0)
 I $D(RORLRC)<10  Q:$G(RORLRC)="" 0
"RTN","RORUTL02",106,0)
 ;--- Get the Patient ID (ICN or SSN)
"RTN","RORUTL02",107,0)
 S PTID=$$PTID(PTIEN)  Q:PTID<0 PTID
"RTN","RORUTL02",108,0)
 ;--- Get the Lab data
"RTN","RORUTL02",109,0)
 S H7CH=$G(RORHL("FS"))_$G(RORHL("ECH"))
"RTN","RORUTL02",110,0)
 S RC=$$GCPR^LA7QRY(PTID,SDT,EDT,.RORLRC,"*",.RORMSG,ROR8DST,H7CH)
"RTN","RORUTL02",111,0)
 I RC="",$D(RORMSG)>1  D
"RTN","RORUTL02",112,0)
 . N ERR,I,LST
"RTN","RORUTL02",113,0)
 . S (ERR,LST)=""
"RTN","RORUTL02",114,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORUTL02",115,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORUTL02",116,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORUTL02",117,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORUTL02",118,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,PTIEN)
"RTN","RORUTL02",119,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL02",120,0)
 ;
"RTN","RORUTL02",121,0)
 ;***** RETURNS THE LOINC CODE WITH THE CONTROL DIGIT
"RTN","RORUTL02",122,0)
 ;
"RTN","RORUTL02",123,0)
 ; LNCODE        LOINC code
"RTN","RORUTL02",124,0)
 ;
"RTN","RORUTL02",125,0)
 ; Besides adding a control digit to the LOINC code, the function
"RTN","RORUTL02",126,0)
 ; checks the code against the LAB LOINC file (#95.3).
"RTN","RORUTL02",127,0)
 ;
"RTN","RORUTL02",128,0)
 ; Return values:
"RTN","RORUTL02",129,0)
 ;       <0  Error code
"RTN","RORUTL02",130,0)
 ;       >0  LOINC code with the control digit
"RTN","RORUTL02",131,0)
 ;
"RTN","RORUTL02",132,0)
LNCODE(LNCODE) ;
"RTN","RORUTL02",133,0)
 N RC,RORBUF,RORMSG
"RTN","RORUTL02",134,0)
 D FIND^DIC(95.3,,"@;.01E","X",$P(LNCODE,"-"),2,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL02",135,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,95.3)
"RTN","RORUTL02",136,0)
 I $G(RORBUF("DILIST",0))<1  D  Q RC ; Non-existent code
"RTN","RORUTL02",137,0)
 . S RC=$$ERROR^RORERR(-29,,,,LNCODE)
"RTN","RORUTL02",138,0)
 I $G(RORBUF("DILIST",0))>1  D  Q RC ; Duplicate records
"RTN","RORUTL02",139,0)
 . S RC=$$ERROR^RORERR(-30,,,,LNCODE)
"RTN","RORUTL02",140,0)
 Q RORBUF("DILIST","ID",1,.01)
"RTN","RORUTL02",141,0)
 ;
"RTN","RORUTL02",142,0)
 ;***** LOCK/UNLOCK REGISTRIES BEING PROCESSED
"RTN","RORUTL02",143,0)
 ;
"RTN","RORUTL02",144,0)
 ; .REGLST       Reference to a local array containing registry names 
"RTN","RORUTL02",145,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUTL02",146,0)
 ; [MODE]        0 - Unlock (default), 1 - Lock
"RTN","RORUTL02",147,0)
 ; [TO]          LOCK timeout (3 sec by defualt)
"RTN","RORUTL02",148,0)
 ; [NAME]        Name of the process/task
"RTN","RORUTL02",149,0)
 ;
"RTN","RORUTL02",150,0)
 ; Return Values:
"RTN","RORUTL02",151,0)
 ;       <0  Error code
"RTN","RORUTL02",152,0)
 ;        0  Some of the registries has been locked by another job
"RTN","RORUTL02",153,0)
 ;        1  Ok
"RTN","RORUTL02",154,0)
 ;
"RTN","RORUTL02",155,0)
LOCKREG(REGLST,MODE,TO,NAME) ;
"RTN","RORUTL02",156,0)
 Q:$D(REGLST)<10 1
"RTN","RORUTL02",157,0)
 N LOCKLST,RORLIST,RC,REGIEN,REGNAME
"RTN","RORUTL02",158,0)
 N CT,FAILS,Q,Q0,Z
"RTN","RORUTL02",159,0)
 ; RORLIST = 0 if less than 15 entries to lock
"RTN","RORUTL02",160,0)
 ;         = 1 if 15 or more entries to lock
"RTN","RORUTL02",161,0)
 ;        (n,x,y) = the array in LOCKLST(x,y) at that point
"RTN","RORUTL02",162,0)
 ;                  (where n = the # identifying the set of 15
"RTN","RORUTL02",163,0)
 ;                   registries being locked at one time)
"RTN","RORUTL02",164,0)
 ; FAILS = <0 or 1 ... lock failed     = 0 ... lock was successful
"RTN","RORUTL02",165,0)
 S REGNAME="",CT=0,RORLIST=0
"RTN","RORUTL02",166,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:REGIEN<0
"RTN","RORUTL02",167,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUTL02",168,0)
 . I REGIEN'>0  S REGIEN=$$REGIEN^RORUTL02(REGNAME)  Q:REGIEN'>0
"RTN","RORUTL02",169,0)
 . S CT=CT+1
"RTN","RORUTL02",170,0)
 . S LOCKLST(798.1,REGIEN_",")=""
"RTN","RORUTL02",171,0)
 . I '(CT#15) D  ; Split the locks into smaller chunks every 15 entries
"RTN","RORUTL02",172,0)
 .. M RORLIST(CT/15)=LOCKLST S RORLIST=1
"RTN","RORUTL02",173,0)
 .. K LOCKLST
"RTN","RORUTL02",174,0)
 Q:$G(REGIEN)<0 REGIEN
"RTN","RORUTL02",175,0)
 I RORLIST,$O(LOCKLST(""))'="" M RORLIST((CT/15\1)+1)=LOCKLST K LOCKLST
"RTN","RORUTL02",176,0)
 Q:$D(LOCKLST)<10&'$O(RORLIST(0)) 1
"RTN","RORUTL02",177,0)
 I $G(MODE) S RC=0 D
"RTN","RORUTL02",178,0)
 . I 'RORLIST S RC=$$LOCK^RORLOCK(.LOCKLST,,,+$G(TO,3),$G(NAME)) Q
"RTN","RORUTL02",179,0)
 . F Q=1:1 Q:'$D(RORLIST(Q))!RC  D
"RTN","RORUTL02",180,0)
 .. K LOCKLST M LOCKLST=RORLIST(Q)
"RTN","RORUTL02",181,0)
 .. S FAILS=$$LOCK^RORLOCK(.LOCKLST,,,+$G(TO,3),$G(NAME)),RC=FAILS
"RTN","RORUTL02",182,0)
 .. ; If lock fails for at least one set of nodes [=1 or <0] - unlock previous locks
"RTN","RORUTL02",183,0)
 .. I FAILS D:Q>1
"RTN","RORUTL02",184,0)
 ... F Q0=1:1:Q-1 K LOCKLST M LOCKLST=RORLIST(Q0) S Z=$$UNLOCK^RORLOCK(.LOCKLST)
"RTN","RORUTL02",185,0)
 E  D
"RTN","RORUTL02",186,0)
 . I 'RORLIST S RC=$$UNLOCK^RORLOCK(.LOCKLST) Q
"RTN","RORUTL02",187,0)
 . S RC=0
"RTN","RORUTL02",188,0)
 . F Q=1:1 K LOCKLST Q:'$D(RORLIST(Q))  D
"RTN","RORUTL02",189,0)
 .. M LOCKLST=RORLIST(Q) S FAILS=$$UNLOCK^RORLOCK(.LOCKLST)
"RTN","RORUTL02",190,0)
 .. S:FAILS RC=FAILS
"RTN","RORUTL02",191,0)
 Q $S('RC:1,RC<0:RC,1:0)
"RTN","RORUTL02",192,0)
 ;
"RTN","RORUTL02",193,0)
 ;***** RETURNS A PATIENT ID (ICN OR SSN)
"RTN","RORUTL02",194,0)
 ;
"RTN","RORUTL02",195,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",196,0)
 ;
"RTN","RORUTL02",197,0)
 ; Return Values:
"RTN","RORUTL02",198,0)
 ;       <0  Error code
"RTN","RORUTL02",199,0)
 ;       ""  Neither ICN nor SSN has been assigned
"RTN","RORUTL02",200,0)
 ;       >0  Patient ICN (or SSN if ICN is not available)
"RTN","RORUTL02",201,0)
 ;
"RTN","RORUTL02",202,0)
PTID(PTIEN) ;
"RTN","RORUTL02",203,0)
 N L,PTID,RC,RORMSG
"RTN","RORUTL02",204,0)
 S PTID=$$GETICN^MPIF001(PTIEN)
"RTN","RORUTL02",205,0)
 I PTID>0  D  Q PTID
"RTN","RORUTL02",206,0)
 . ;--- Validate the checksum (just in case ;-)
"RTN","RORUTL02",207,0)
 . S L=$L($P(PTID,"V",2))  Q:L'<6
"RTN","RORUTL02",208,0)
 . ;S RC=$$ERROR^RORERR(-59,,,PTIEN)
"RTN","RORUTL02",209,0)
 . S $P(PTID,"V",2)=$E("000000",1,6-L)_$P(PTID,"V",2)
"RTN","RORUTL02",210,0)
 ;--- Get SSN if ICN is not available
"RTN","RORUTL02",211,0)
 S PTID=$$GET1^DIQ(2,PTIEN_",",.09,,,"RORMSG")
"RTN","RORUTL02",212,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,PTIEN,2)
"RTN","RORUTL02",213,0)
 Q PTID
"RTN","RORUTL02",214,0)
 ;
"RTN","RORUTL02",215,0)
 ;***** RETURNS IEN OF THE REGISTRY PARAMETERS
"RTN","RORUTL02",216,0)
 ;
"RTN","RORUTL02",217,0)
 ; REGNAME       Name of the registry
"RTN","RORUTL02",218,0)
 ; [FIELDS]      List of fields (separated by semicolons) to load
"RTN","RORUTL02",219,0)
 ; [.RORTRGT]    Reference to a local variable where field values will
"RTN","RORUTL02",220,0)
 ;               be stored by the FIND^DIC call
"RTN","RORUTL02",221,0)
 ;
"RTN","RORUTL02",222,0)
 ; Return Values:
"RTN","RORUTL02",223,0)
 ;       <0  Error code
"RTN","RORUTL02",224,0)
 ;       >0  Registry parameters IEN
"RTN","RORUTL02",225,0)
 ;
"RTN","RORUTL02",226,0)
REGIEN(REGNAME,FIELDS,RORTRGT) ;
"RTN","RORUTL02",227,0)
 N RC,REGIEN,RORMSG  K RORTRGT
"RTN","RORUTL02",228,0)
 D FIND^DIC(798.1,,"@;"_$G(FIELDS),"UX",REGNAME,2,"B",,,"RORTRGT","RORMSG")
"RTN","RORUTL02",229,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL02",230,0)
 S RC=+$G(RORTRGT("DILIST",0))
"RTN","RORUTL02",231,0)
 Q $S(RC<1:-1,RC>1:-2,1:+RORTRGT("DILIST",2,1))
"RTN","RORUTL02",232,0)
 ;
"RTN","RORUTL02",233,0)
 ;***** RETURNS NUMBER OF RECORDS IN THE REGISTRY
"RTN","RORUTL02",234,0)
 ;
"RTN","RORUTL02",235,0)
 ; REGIEN        Registry IEN
"RTN","RORUTL02",236,0)
 ; [.LOWIEN]     The smallest IEN will be returned via this parameter
"RTN","RORUTL02",237,0)
 ; [.HIGHIEN]    The biggest IEN will be returned via this parameter
"RTN","RORUTL02",238,0)
 ;
"RTN","RORUTL02",239,0)
 ; Return Values:
"RTN","RORUTL02",240,0)
 ;       <0  Error code
"RTN","RORUTL02",241,0)
 ;        0  The registry is empty
"RTN","RORUTL02",242,0)
 ;       >0  Number of records in the registry
"RTN","RORUTL02",243,0)
 ;
"RTN","RORUTL02",244,0)
REGSIZE(REGIEN,LOWIEN,HIGHIEN) ;
"RTN","RORUTL02",245,0)
 N I,NODE,NRE,RC,RORFDA,RORMSG
"RTN","RORUTL02",246,0)
 S NODE=$NA(^RORDATA(798,"AC",REGIEN))
"RTN","RORUTL02",247,0)
 S LOWIEN=$O(@NODE@(""))
"RTN","RORUTL02",248,0)
 S HIGHIEN=$O(@NODE@(""),-1)
"RTN","RORUTL02",249,0)
 ;--- Get number of records from the parameters
"RTN","RORUTL02",250,0)
 S NRE=$$GET1^DIQ(798.1,REGIEN_",",19.1,,,"RORMSG")
"RTN","RORUTL02",251,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,REGIEN)
"RTN","RORUTL02",252,0)
 Q:NRE>0 NRE
"RTN","RORUTL02",253,0)
 ;--- Count the records of the registry
"RTN","RORUTL02",254,0)
 S I="",NRE=0
"RTN","RORUTL02",255,0)
 F  S I=$O(@NODE@(I))  Q:I=""  S NRE=NRE+1
"RTN","RORUTL02",256,0)
 ;--- Store the value in the parameters
"RTN","RORUTL02",257,0)
 S RORFDA(798.1,REGIEN_",",19.1)=NRE
"RTN","RORUTL02",258,0)
 D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUTL02",259,0)
 Q NRE
"RTN","RORUTL02",260,0)
 ;
"RTN","RORUTL02",261,0)
 ;***** CHECKS IF AN EMPLOYEE SHOULD BE SKIPPED
"RTN","RORUTL02",262,0)
 ;
"RTN","RORUTL02",263,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",264,0)
 ;
"RTN","RORUTL02",265,0)
 ; [.]REGIEN     Registry IEN
"RTN","RORUTL02",266,0)
 ;
"RTN","RORUTL02",267,0)
 ;               If you are going to call this function for several
"RTN","RORUTL02",268,0)
 ;               patients in a row (in a cycle), you can pass the
"RTN","RORUTL02",269,0)
 ;               second parameter by reference. This will eliminate
"RTN","RORUTL02",270,0)
 ;               repetitive access to the registry parameters (the
"RTN","RORUTL02",271,0)
 ;               REGIEN("SE") node will be used as a "cache" for the
"RTN","RORUTL02",272,0)
 ;               value of the EXCLUDE EMPLOYEES field).
"RTN","RORUTL02",273,0)
 ;
"RTN","RORUTL02",274,0)
 ; Return Values:
"RTN","RORUTL02",275,0)
 ;        0  Patient can be added to the registry
"RTN","RORUTL02",276,0)
 ;        1  Patient should be skipped
"RTN","RORUTL02",277,0)
 ;
"RTN","RORUTL02",278,0)
 ; The function checks if the patient is an employee and if he/she
"RTN","RORUTL02",279,0)
 ; can be added to the registry (according to the value of the
"RTN","RORUTL02",280,0)
 ; EXCLUDE EMPLOYEES field of the ROR REGISTRY PARAMETERS file).
"RTN","RORUTL02",281,0)
 ;
"RTN","RORUTL02",282,0)
SKIPEMPL(PTIEN,REGIEN) ;
"RTN","RORUTL02",283,0)
 Q:'$$EMPL^DGSEC4(PTIEN,"P") 0
"RTN","RORUTL02",284,0)
 S:'$D(REGIEN("SE")) REGIEN("SE")=+$P($G(^ROR(798.1,+REGIEN,0)),U,10)
"RTN","RORUTL02",285,0)
 Q +REGIEN("SE")
"RTN","RORUTL02",286,0)
 ;
"RTN","RORUTL02",287,0)
 ;***** RETURNS IEN OF THE SELECTION RULE
"RTN","RORUTL02",288,0)
 ;
"RTN","RORUTL02",289,0)
 ; RULENAME      Name of the selection rule
"RTN","RORUTL02",290,0)
 ; [FIELDS]      List of fields (separated by semicolons) to load
"RTN","RORUTL02",291,0)
 ; [.RORTRGT]    Reference to a local variable where field values will
"RTN","RORUTL02",292,0)
 ;               be stored by the FIND^DIC call.
"RTN","RORUTL02",293,0)
 ;
"RTN","RORUTL02",294,0)
 ; Return Values:
"RTN","RORUTL02",295,0)
 ;       <0  Error code
"RTN","RORUTL02",296,0)
 ;       >0  Selection rule IEN
"RTN","RORUTL02",297,0)
 ;
"RTN","RORUTL02",298,0)
SRLIEN(RULENAME,FIELDS,RORTRGT) ;
"RTN","RORUTL02",299,0)
 N RC,RULEIEN,RORMSG  K RORTRGT
"RTN","RORUTL02",300,0)
 D FIND^DIC(798.2,,"@;"_$G(FIELDS),"X",RULENAME,2,"B",,,"RORTRGT","RORMSG")
"RTN","RORUTL02",301,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.2)
"RTN","RORUTL02",302,0)
 S RC=+$G(RORTRGT("DILIST",0))
"RTN","RORUTL02",303,0)
 Q $S(RC<1:-3,RC>1:-4,1:+RORTRGT("DILIST",2,1))
"RTN","RORUTL11")
0^2^B4209534^B4026277
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ;15 Aug 2013  11:31 AM
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17,18,20,19,21,22,24,27**;Feb 17, 2006;Build 58
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;
"RTN","RORUTL11",15,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",16,0)
 ;
"RTN","RORUTL11",17,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version 
"RTN","RORUTL11",18,0)
 ;
"RTN","RORUTL11",19,0)
 ;ROR*1.5*18   MAY 2012    C RAY        Updated version 
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ;ROR*1.5*20   DEC 2012    C RAY        Updated version
"RTN","RORUTL11",22,0)
 ;
"RTN","RORUTL11",23,0)
 ;ROR*1.5*19   APR 2012    K GUPTA      Updated version
"RTN","RORUTL11",24,0)
 ;                                    
"RTN","RORUTL11",25,0)
 ;ROR*1.5*21   AUG 2013    T KOPP       Updated version
"RTN","RORUTL11",26,0)
 ;
"RTN","RORUTL11",27,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Updated version 
"RTN","RORUTL11",28,0)
 ;
"RTN","RORUTL11",29,0)
 ;ROR*1.5*24   DEC 2014    T KOPP       Updated version       
"RTN","RORUTL11",30,0)
 ;                       
"RTN","RORUTL11",31,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Updated version                    
"RTN","RORUTL11",32,0)
 ;******************************************************************************
"RTN","RORUTL11",33,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",34,0)
 ;
"RTN","RORUTL11",35,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",36,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",37,0)
 ;         
"RTN","RORUTL11",38,0)
 ;******************************************************************************
"RTN","RORUTL11",39,0)
 Q
"RTN","RORUTL11",40,0)
 ;
"RTN","RORUTL11",41,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",42,0)
 ;
"RTN","RORUTL11",43,0)
 ; Return Values:
"RTN","RORUTL11",44,0)
 ;       <0  Error code
"RTN","RORUTL11",45,0)
 ;        0  Ok
"RTN","RORUTL11",46,0)
 ;
"RTN","RORUTL11",47,0)
RNDXACL() ;
"RTN","RORUTL11",48,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",49,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",50,0)
 S REGIEN=0
"RTN","RORUTL11",51,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",52,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",53,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",54,0)
 Q 0
"RTN","RORUTL11",55,0)
 ;
"RTN","RORUTL11",56,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",57,0)
 ;
"RTN","RORUTL11",58,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",59,0)
 ;
"RTN","RORUTL11",60,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",61,0)
 ;
"RTN","RORUTL11",62,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",63,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",64,0)
 ;                 I  IRM Only
"RTN","RORUTL11",65,0)
 ;
"RTN","RORUTL11",66,0)
 ; Return Values:
"RTN","RORUTL11",67,0)
 ;       <0  Error code
"RTN","RORUTL11",68,0)
 ;        0  Ok
"RTN","RORUTL11",69,0)
 ;       >0  Access denied
"RTN","RORUTL11",70,0)
 ;
"RTN","RORUTL11",71,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",72,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",73,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",74,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",75,0)
 ;---
"RTN","RORUTL11",76,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",77,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",78,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",79,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",80,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",81,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",82,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",83,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",84,0)
 . S ACCESS=1
"RTN","RORUTL11",85,0)
 ;---
"RTN","RORUTL11",86,0)
 D ACVIOLTN^RORLOG(-91,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",87,0)
 Q 1
"RTN","RORUTL11",88,0)
 ;
"RTN","RORUTL11",89,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",90,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",91,0)
 ;
"RTN","RORUTL11",92,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",93,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",94,0)
 ;been installed yet.
"RTN","RORUTL11",95,0)
 ;
"RTN","RORUTL11",96,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",97,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",98,0)
 ;
"RTN","RORUTL11",99,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",100,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",101,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",102,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",103,0)
 ;
"RTN","RORUTL11",104,0)
VERSRV(VAL) ;
"RTN","RORUTL11",105,0)
 S VAL="1.5.27"
"RTN","RORUTL11",106,0)
 Q
"RTN","RORX021A")
0^1^B135223327^B136846787
"RTN","RORX021A",1,0)
RORX021A ;BPOIFO/CLR - HCV DAA CANDIDATES(QUERY & STORE) ;7/15/11 3:37pm
"RTN","RORX021A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17,19,21,27**;Feb 17, 2006;Build 58
"RTN","RORX021A",3,0)
 ;
"RTN","RORX021A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX021A",5,0)
 ;
"RTN","RORX021A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX021A",7,0)
 ; #10035 Direct read of the DOD field of the file #2 (supported)
"RTN","RORX021A",8,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX021A",9,0)
 ; #10103 $$TRIM^XLFSTR (supported)
"RTN","RORX021A",10,0)
 ; #10103 $$UP^XLFSTR (supported)
"RTN","RORX021A",11,0)
 ;   
"RTN","RORX021A",12,0)
 ;******************************************************************************
"RTN","RORX021A",13,0)
 ;******************************************************************************
"RTN","RORX021A",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX021A",15,0)
 ;        
"RTN","RORX021A",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX021A",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX021A",18,0)
 ;ROR*1.5*19   JUN  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX021A",19,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX021A",20,0)
 ;                                      additional identifier option selected
"RTN","RORX021A",21,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Remove requirement to skip patient in
"RTN","RORX021A",22,0)
 ;                                      report if they received Boceprevir or
"RTN","RORX021A",23,0)
 ;                                      Telaprevir, removed requirement that
"RTN","RORX021A",24,0)
 ;                                      only genotype 1 is included on the
"RTN","RORX021A",25,0)
 ;                                      report.
"RTN","RORX021A",26,0)
 ;                                      
"RTN","RORX021A",27,0)
 ;******************************************************************************
"RTN","RORX021A",28,0)
 ;******************************************************************************
"RTN","RORX021A",29,0)
 Q
"RTN","RORX021A",30,0)
 ;
"RTN","RORX021A",31,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX021A",32,0)
 ;
"RTN","RORX021A",33,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",34,0)
 ;
"RTN","RORX021A",35,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX021A",36,0)
 ;
"RTN","RORX021A",37,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX021A",38,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX021A",39,0)
 ;
"RTN","RORX021A",40,0)
 ; Return Values:
"RTN","RORX021A",41,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",42,0)
 ;        0  Ok
"RTN","RORX021A",43,0)
 ;        1  Skip this result
"RTN","RORX021A",44,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",45,0)
 ;
"RTN","RORX021A",46,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX021A",47,0)
 N DATE,IEN,NAME,RC,TMP,VAL,CAT,SUB
"RTN","RORX021A",48,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX021A",49,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX021A",50,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX021A",51,0)
 S CAT=$P(RESULT(2),U,4)    Q:CAT="" 1   ; Category(lab group) of the test
"RTN","RORX021A",52,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX021A",53,0)
 ;--- Skip if test is not in lab groups HepC GT, Quant, or Qual
"RTN","RORX021A",54,0)
 I CAT'="HepC GT",(CAT'="HepC Quant"),(CAT'="HepC Qual") Q 1
"RTN","RORX021A",55,0)
 ;=== Mark values as quantitative, qualitative or responded to treatment
"RTN","RORX021A",56,0)
 ;---  HCVQT=quant,HCVQL=qual,HCVOK=cured
"RTN","RORX021A",57,0)
 I CAT="HepC Quant"!(CAT="HepC Qual") D  Q:TMP 1
"RTN","RORX021A",58,0)
 . S TMP=0
"RTN","RORX021A",59,0)
 . S VAL=$$UP^XLFSTR(VAL)  ;convert to upper case
"RTN","RORX021A",60,0)
 . S VAL=$TR(VAL," ")  ;strip out all spaces
"RTN","RORX021A",61,0)
 . I VAL["POS" S SUB="HCVQL" Q
"RTN","RORX021A",62,0)
 . I $E(VAL,1,1)="P" S SUB="HCVQL" Q
"RTN","RORX021A",63,0)
 . I VAL["NEG" S SUB="HCVOK" Q
"RTN","RORX021A",64,0)
 . I VAL["NO" S SUB="HCVOK" Q
"RTN","RORX021A",65,0)
 . I $E(VAL,1,1)="N" S SUB="HCVOK" Q
"RTN","RORX021A",66,0)
 . I VAL["COMMENT"!(VAL["CANC")!(VAL["DNR")!(VAL["TNP") S TMP=1 Q
"RTN","RORX021A",67,0)
 . I +VAL=VAL,VAL<51 S TMP=1 Q  ;skip abnormally low values
"RTN","RORX021A",68,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," >,GT")) S SUB="HCVQT" Q
"RTN","RORX021A",69,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," <,LT")) S SUB="HCVOK" Q
"RTN","RORX021A",70,0)
 . S TMP=1
"RTN","RORX021A",71,0)
 S SUB=$S(CAT="HepC GT":"GT",1:SUB)
"RTN","RORX021A",72,0)
 ;--- Store the result
"RTN","RORX021A",73,0)
 S @ROR8DST@(SUB,DATE)=$P(RESULT(1),U,3)
"RTN","RORX021A",74,0)
 Q 0
"RTN","RORX021A",75,0)
 ;
"RTN","RORX021A",76,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX021A",77,0)
 ; REPORT        Parent IEN of report
"RTN","RORX021A",78,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX021A",79,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX021A",80,0)
 ;
"RTN","RORX021A",81,0)
 ; Return Values:
"RTN","RORX021A",82,0)
 ;       <0  Fatal error
"RTN","RORX021A",83,0)
 ;        0  Ok
"RTN","RORX021A",84,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",85,0)
 ;
"RTN","RORX021A",86,0)
QUERY(REPORT,FLAGS,NSPT) ;
"RTN","RORX021A",87,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX021A",88,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX021A",89,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX021A",90,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX021A",91,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX021A",92,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX021A",93,0)
 N RORXCDT       ; User selected cut off date for registry meds
"RTN","RORX021A",94,0)
 N RORTS         ; User selected treatment status categories
"RTN","RORX021A",95,0)
 N RORXEDT       ; RX end date
"RTN","RORX021A",96,0)
 N RORXSDT       ; RX start date
"RTN","RORX021A",97,0)
 N RORTH         ; Patient treatment status (EXP=experienced, NAIVE=naive)
"RTN","RORX021A",98,0)
 ;
"RTN","RORX021A",99,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX021A",100,0)
 N RCC,FLAG,HCV,GT,ROR1,ROR2,ROR3
"RTN","RORX021A",101,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX021A",102,0)
 S (CNT,ECNT,NSPT,RC)=0,(UTEDT,UTSDT)=0
"RTN","RORX021A",103,0)
 ;=== Set up parameters
"RTN","RORX021A",104,0)
 ;--- Utilization date range
"RTN","RORX021A",105,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",106,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX021A",107,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX021A",108,0)
 ;--- Number of patients in the registry
"RTN","RORX021A",109,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX021A",110,0)
 ;--- Set up Treatment status parameters
"RTN","RORX021A",111,0)
 F TMP="NAIVE","EXP","EXP_DAYS" D
"RTN","RORX021A",112,0)
 . S RORTS(TMP)=$$PARAM^RORTSK01("TREATMENT_HISTORY",TMP)
"RTN","RORX021A",113,0)
 ;--- Lab parameters
"RTN","RORX021A",114,0)
 S RORLDST("RORCB")="$$LTSCB^RORX021A"
"RTN","RORX021A",115,0)
 ;--- Labs date range
"RTN","RORX021A",116,0)
 S LTSDT=""
"RTN","RORX021A",117,0)
 S LTEDT=DT
"RTN","RORX021A",118,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",119,0)
 S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX021A",120,0)
 ;== Pharm parameters
"RTN","RORX021A",121,0)
 S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORX021A",122,0)
 S RORXDST("RORCB")="$$RXOCB^RORX021A"   ;call back routine
"RTN","RORX021A",123,0)
 ;--- RX cut off date (inverse)/shift cut off back one day
"RTN","RORX021A",124,0)
 N X1,X2,X S X2=-(+RORTS("EXP_DAYS")+1),X1=DT D C^%DTC S RORXCDT=99999999-X
"RTN","RORX021A",125,0)
 ;--- RX start and end dates
"RTN","RORX021A",126,0)
 S RORXSDT=2000101  ;start date 1/1/1900
"RTN","RORX021A",127,0)
 S RORXEDT=DT
"RTN","RORX021A",128,0)
 ;--- RX list of HepC registry drugs
"RTN","RORX021A",129,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX021A",130,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG)
"RTN","RORX021A",131,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",132,0)
 S RORXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX021A",133,0)
 ;--- Set up Clinic/Division list parameters date_range_3
"RTN","RORX021A",134,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX021A",135,0)
 ;--- Set up ICD parameters
"RTN","RORX021A",136,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX021A",137,0)
 ;=== Browse through the registry records
"RTN","RORX021A",138,0)
 S IEN=0
"RTN","RORX021A",139,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX021A",140,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX021A",141,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",142,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX021A",143,0)
 . ;--- Get patient DFN
"RTN","RORX021A",144,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX021A",145,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX021A",146,0)
 . ;--- Check if the patient should be skipped based on standard filters
"RTN","RORX021A",147,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,UTSDT,UTEDT)
"RTN","RORX021A",148,0)
 . ;--- Check if patient should be skipped because of ICD codes
"RTN","RORX021A",149,0)
 . S RCC=0
"RTN","RORX021A",150,0)
 . I FLAG'="ALL" D
"RTN","RORX021A",151,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX021A",152,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX021A",153,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX021A",154,0)
 . ;
"RTN","RORX021A",155,0)
 . ;--- Check if patient should be skipped because of Clinic or Division 
"RTN","RORX021A",156,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX021A",157,0)
 . ;=== Check labs and meds
"RTN","RORX021A",158,0)
 . S SKIP=1,UTIL=0
"RTN","RORX021A",159,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX021A",160,0)
 . . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"LR"))
"RTN","RORX021A",161,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,+RORREG,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX021A",162,0)
 . . Q:RC'>0
"RTN","RORX021A",163,0)
 . . ;=== Skip if patient no longer has HCV
"RTN","RORX021A",164,0)
 . . S ROR1=+$O(@RORLDST@("HCVOK","")),ROR2=+$O(@RORLDST@("HCVQL","")),ROR3=(+$O(@RORLDST@("HCVQT","")))
"RTN","RORX021A",165,0)
 . . I ROR1>0 D  Q:SKIP=1
"RTN","RORX021A",166,0)
 . . . ;--- Skip if date of most recent HCV test is normal
"RTN","RORX021A",167,0)
 . . . I (ROR1<ROR2),(ROR1<ROR3) S SKIP=1 Q
"RTN","RORX021A",168,0)
 . . . I (ROR1<ROR2),(ROR3=0) S SKIP=1 Q
"RTN","RORX021A",169,0)
 . . . I (ROR1<ROR3),(ROR2=0) S SKIP=1 Q
"RTN","RORX021A",170,0)
 . . . ;--- Skip if no qual or quant test
"RTN","RORX021A",171,0)
 . . . I ROR2+ROR3=0 S SKIP=1 Q
"RTN","RORX021A",172,0)
 . . . S SKIP=0
"RTN","RORX021A",173,0)
 . . ;--- Check if patient should be skipped because of user selected Treatment status
"RTN","RORX021A",174,0)
 . . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"RX"))
"RTN","RORX021A",175,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX021A",176,0)
 . . Q:RC<0  ;error occurred
"RTN","RORX021A",177,0)
 . . I $G(RORXDST("SKIP")) S SKIP=1 K RORXDST("SKIP") Q  ;skip if taking DAA meds
"RTN","RORX021A",178,0)
 . . I RC>0,'+RORTS("EXP") S SKIP=1 Q  ; skip naive patients 
"RTN","RORX021A",179,0)
 . . I RC=0,'+RORTS("NAIVE") S SKIP=1 Q  ;skip experienced patients
"RTN","RORX021A",180,0)
 . . I RC>0,$O(@RORXDST@(RORXCDT),-1) S SKIP=1 Q  ;skip if patient has meds after cutoff
"RTN","RORX021A",181,0)
 . . ;--- Include patient 
"RTN","RORX021A",182,0)
 . . S RORTH=$S(RC>0:"EXP",RC=0:"NAIVE",1:"")
"RTN","RORX021A",183,0)
 . . S SKIP=0
"RTN","RORX021A",184,0)
 . ;--- Check if patient should be skipped because no utilization in the corresponding date range
"RTN","RORX021A",185,0)
 . I 'SKIP D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",186,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX021A",187,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX021A",188,0)
 . . S:'UTIL SKIP=1
"RTN","RORX021A",189,0)
 . ;
"RTN","RORX021A",190,0)
 . ;--- Skip the patient if not all selection criteria have been met
"RTN","RORX021A",191,0)
 . I SKIP K ^TMP("RORX021",$J,"PAT",PATIEN)  Q
"RTN","RORX021A",192,0)
 . ;
"RTN","RORX021A",193,0)
 . ;--- Get and store the patient's data  last4^name^treatment status
"RTN","RORX021A",194,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX021A",195,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX021A",196,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORTH_U_TMP
"RTN","RORX021A",197,0)
 . S NSPT=NSPT+1   ;increment count of selected patients
"RTN","RORX021A",198,0)
 ;
"RTN","RORX021A",199,0)
 D FREE^RORTMP(RORXL)  ;clean up drug list
"RTN","RORX021A",200,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX021A",201,0)
 ;
"RTN","RORX021A",202,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX021A",203,0)
 ;
"RTN","RORX021A",204,0)
 ;
"RTN","RORX021A",205,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",206,0)
 ;
"RTN","RORX021A",207,0)
 ;
"RTN","RORX021A",208,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX021A",209,0)
 ;
"RTN","RORX021A",210,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX021A",211,0)
 ;                               processed.
"RTN","RORX021A",212,0)
 ;
"RTN","RORX021A",213,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX021A",214,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX021A",215,0)
 ;                                 ^02: Drug name
"RTN","RORX021A",216,0)
 ;
"RTN","RORX021A",217,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX021A",218,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX021A",219,0)
 ;
"RTN","RORX021A",220,0)
 ;Return Values:
"RTN","RORX021A",221,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",222,0)
 ;        0  Ok
"RTN","RORX021A",223,0)
 ;        1  Skip this result
"RTN","RORX021A",224,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",225,0)
 ;
"RTN","RORX021A",226,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX021A",227,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX021A",228,0)
 ;--- Skip med if med does not have a generic name
"RTN","RORX021A",229,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX021A",230,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX021A",231,0)
 E  Q 1
"RTN","RORX021A",232,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX021A",233,0)
 ;--- Process the order
"RTN","RORX021A",234,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX021A",235,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX021A",236,0)
 S RXCNT=0
"RTN","RORX021A",237,0)
 ;--- Original prescription
"RTN","RORX021A",238,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX021A",239,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX021A",240,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",241,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",242,0)
 E  D             ;--- Outpatient
"RTN","RORX021A",243,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX021A",244,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX021A",245,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",246,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",247,0)
 ;--- Refills and partials
"RTN","RORX021A",248,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX021A",249,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX021A",250,0)
 . S IRP=0
"RTN","RORX021A",251,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX021A",252,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX021A",253,0)
 . . I TMP>0  S RXCNT=RXCNT+1,TMP=99999999-TMP  D
"RTN","RORX021A",254,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",255,0)
 Q 0
"RTN","RORX021A",256,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX021A",257,0)
 ;
"RTN","RORX021A",258,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX021A",259,0)
 ; NSPT          Number of selected patients
"RTN","RORX021A",260,0)
 ;
"RTN","RORX021A",261,0)
 ; Return Values:
"RTN","RORX021A",262,0)
 ;       <0  Error code
"RTN","RORX021A",263,0)
 ;        0  Ok
"RTN","RORX021A",264,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",265,0)
 ;
"RTN","RORX021A",266,0)
STORE(REPORT,NSPT) ;
"RTN","RORX021A",267,0)
 N RORFDT        ;med fill date
"RTN","RORX021A",268,0)
 N RORLBG        ;lab test type (GT, HCVQT,HCVQL)
"RTN","RORX021A",269,0)
 N RORLVAL       ;lab value
"RTN","RORX021A",270,0)
 N RORRX         ;med name
"RTN","RORX021A",271,0)
 N RORSTNAM      ;
"RTN","RORX021A",272,0)
 N RORLDST
"RTN","RORX021A",273,0)
 N RORXDST
"RTN","RORX021A",274,0)
 N RORICN
"RTN","RORX021A",275,0)
 N RORBODY,PTAG  ;parent iens
"RTN","RORX021A",276,0)
 N CNT,DATE,DFN,ECNT,IEN,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,THIST
"RTN","RORX021A",277,0)
 N GT,HCVQT,HCV,HCVQL
"RTN","RORX021A",278,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX021A",279,0)
 ;--- Create 'patients' table
"RTN","RORX021A",280,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX021A",281,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX021A",282,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX021A",283,0)
 F  S DFN=$O(^TMP("RORX021",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX021A",284,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX021A",285,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",286,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX021",$J,"PAT",DFN))
"RTN","RORX021A",287,0)
 . ;--- Patient's data
"RTN","RORX021A",288,0)
 . S TMP=$G(@NODE)
"RTN","RORX021A",289,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),THIST=$P(TMP,U,3),RORICN=$P(TMP,U,4)
"RTN","RORX021A",290,0)
 . ;--- get lab results
"RTN","RORX021A",291,0)
 . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"LR"))
"RTN","RORX021A",292,0)
 . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"RX"))
"RTN","RORX021A",293,0)
 . ;--- Gets most recent result for HepC Qual, HepC Quant and GT
"RTN","RORX021A",294,0)
 . ;    HCVQT=date of most recent quanitative test^result
"RTN","RORX021A",295,0)
 . ;    HCVQL=date of most recent qualitative test^result
"RTN","RORX021A",296,0)
 . ;    GT=date of most recent GT test^result
"RTN","RORX021A",297,0)
 . K HCVQT,HCVQL,GT
"RTN","RORX021A",298,0)
 . F RORLBG="HCVQT","HCVQL","GT" D
"RTN","RORX021A",299,0)
 . . S NODE=RORLBG,@NODE="^"
"RTN","RORX021A",300,0)
 . . S RORFDT=$O(@RORLDST@(RORLBG,""))
"RTN","RORX021A",301,0)
 . . Q:RORFDT=""
"RTN","RORX021A",302,0)
 . . S RORLVAL=$G(@RORLDST@(RORLBG,RORFDT))
"RTN","RORX021A",303,0)
 . . S RORFDT=9999999-RORFDT
"RTN","RORX021A",304,0)
 . . S RORFDT=RORFDT\1  ;strip time  
"RTN","RORX021A",305,0)
 . . S @NODE=(RORFDT)_U_RORLVAL
"RTN","RORX021A",306,0)
 . ;--- get most recent registry med if experienced
"RTN","RORX021A",307,0)
 . ;--- if more than one med give preference to INTERFERON
"RTN","RORX021A",308,0)
 . S RORFDT=$O(@RORXDST@("")),RORRX=""
"RTN","RORX021A",309,0)
 . I THIST="EXP" D
"RTN","RORX021A",310,0)
 . . S RORSTNAM="",RORRX=""
"RTN","RORX021A",311,0)
 . . F  S RORSTNAM=$O(@RORXDST@(RORFDT,RORSTNAM)) Q:RORSTNAM=""  D
"RTN","RORX021A",312,0)
 . . . S RORRX=$S(RORRX="":RORSTNAM,RORRX["INTERFERON":RORRX,1:RORSTNAM)
"RTN","RORX021A",313,0)
 . . S RORFDT=99999999-RORFDT
"RTN","RORX021A",314,0)
 . . S RORFDT=RORFDT\1
"RTN","RORX021A",315,0)
 . S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,RORBODY,,DFN)
"RTN","RORX021A",316,0)
 . ;--- give preference to quant result over qual result
"RTN","RORX021A",317,0)
 . S HCV=$S(+$G(HCVQL)>+$G(HCVQT):HCVQL,$G(HCVQT):HCVQT,1:"")
"RTN","RORX021A",318,0)
 . ;--- store
"RTN","RORX021A",319,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,PTAG,1)
"RTN","RORX021A",320,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,PTAG,2)
"RTN","RORX021A",321,0)
 . D ADDVAL^RORTSK11(RORTSK,"STATUS",THIST,PTAG,1)
"RTN","RORX021A",322,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV_DATE",$P(HCV,U),PTAG,1)
"RTN","RORX021A",323,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV",$P(HCV,U,2),PTAG,3)
"RTN","RORX021A",324,0)
 . D ADDVAL^RORTSK11(RORTSK,"GT",$P(GT,U,2),PTAG,1)
"RTN","RORX021A",325,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",RORFDT,PTAG,1)
"RTN","RORX021A",326,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_MED",RORRX,PTAG,1)
"RTN","RORX021A",327,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",RORICN,PTAG,1)
"RTN","RORX021A",328,0)
 . S PTCNT=PTCNT+1
"RTN","RORX021A",329,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX021A",330,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX021A",331,0)
 ;---
"RTN","RORX021A",332,0)
 Q ECNT
"RTN","RORX023A")
0^3^B122090515^B107139551
"RTN","RORX023A",1,0)
RORX023A ;ALB/TMK - HCV SUSTAINED VIROLOGIC RESPONSE REPORT(QUERY & STORE) ;7/15/11 3:37pm
"RTN","RORX023A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**24,27**;Feb 17, 2006;Build 58
"RTN","RORX023A",3,0)
 ;
"RTN","RORX023A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX023A",5,0)
 ;
"RTN","RORX023A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX023A",7,0)
 ; #10104 UP^XLFSTR (supported)
"RTN","RORX023A",8,0)
 ;   
"RTN","RORX023A",9,0)
 ;******************************************************************************
"RTN","RORX023A",10,0)
 ;******************************************************************************
"RTN","RORX023A",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX023A",12,0)
 ;        
"RTN","RORX023A",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX023A",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX023A",15,0)
 ;ROR*1.5*24   JUN 2014    T KOPP       New report
"RTN","RORX023A",16,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Fix selection of SVR chg ">" to "<" 
"RTN","RORX023A",17,0)
 ;                                      at LTSCB+11 and pull SVR/NO SVR logic
"RTN","RORX023A",18,0)
 ;                                      into callable function $$SVR
"RTN","RORX023A",19,0)
 ;                                      
"RTN","RORX023A",20,0)
 ;******************************************************************************
"RTN","RORX023A",21,0)
 ;******************************************************************************
"RTN","RORX023A",22,0)
 Q
"RTN","RORX023A",23,0)
 ;
"RTN","RORX023A",24,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX023A",25,0)
 ;
"RTN","RORX023A",26,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX023A",27,0)
 ;
"RTN","RORX023A",28,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX023A",29,0)
 ;
"RTN","RORX023A",30,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX023A",31,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX023A",32,0)
 ;
"RTN","RORX023A",33,0)
 ; Return Values:
"RTN","RORX023A",34,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX023A",35,0)
 ;        0  Ok
"RTN","RORX023A",36,0)
 ;        1  Skip this result
"RTN","RORX023A",37,0)
 ;        2  Skip this and all remaining results
"RTN","RORX023A",38,0)
 ;
"RTN","RORX023A",39,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX023A",40,0)
 N DATE,IEN,NAME,RC,TMP,VAL,CAT,SUB
"RTN","RORX023A",41,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX023A",42,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX023A",43,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX023A",44,0)
 S CAT=$P(RESULT(2),U,4)    Q:CAT="" 1   ; Category(lab group) of the test
"RTN","RORX023A",45,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX023A",46,0)
 ;--- Skip if test is not in lab groups HepC GT, Quant, or Qual
"RTN","RORX023A",47,0)
 S TMP=0
"RTN","RORX023A",48,0)
 I CAT'="HepC GT",(CAT'="HepC Quant"),(CAT'="HepC Qual") S TMP=1
"RTN","RORX023A",49,0)
 I 'TMP,CAT'="HepC GT" D
"RTN","RORX023A",50,0)
 . S TMP=$S($E(VAL)="<":0,VAL["NOT DETECT":0,VAL["NO HCV RNA":0,VAL["NO RNA":0,$E(VAL,1,3)="NEG":0,VAL["NEGATIVE":0,VAL["NO_HCV_RNA_DETECTED":0,VAL["TND":0,1:1)
"RTN","RORX023A",51,0)
 I 'TMP,+VAL=VAL,VAL<51 S TMP=1  ;skip abnormally low values
"RTN","RORX023A",52,0)
 I TMP Q 1
"RTN","RORX023A",53,0)
 S SUB=$S(CAT="HepC GT":"GT",1:"HepC")
"RTN","RORX023A",54,0)
 ;--- Store the result
"RTN","RORX023A",55,0)
 S @ROR8DST@(SUB,DATE)=VAL
"RTN","RORX023A",56,0)
 Q 0
"RTN","RORX023A",57,0)
 ;
"RTN","RORX023A",58,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX023A",59,0)
 ; REPORT        Parent IEN of report
"RTN","RORX023A",60,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX023A",61,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX023A",62,0)
 ;
"RTN","RORX023A",63,0)
 ; Return Values:
"RTN","RORX023A",64,0)
 ;       <0  Fatal error
"RTN","RORX023A",65,0)
 ;        0  Ok
"RTN","RORX023A",66,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX023A",67,0)
 ;
"RTN","RORX023A",68,0)
 ;  Assumes RORREG = the ien of the ROR REGISTER PARAMETERS entry in file 798.1 being processed
"RTN","RORX023A",69,0)
QUERY(REPORT,FLAGS,NSPT) ;
"RTN","RORX023A",70,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX023A",71,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX023A",72,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX023A",73,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX023A",74,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX023A",75,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX023A",76,0)
 N RORXEDT       ; RX end date
"RTN","RORX023A",77,0)
 N RORXSDT       ; RX start date
"RTN","RORX023A",78,0)
 ;
"RTN","RORX023A",79,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX023A",80,0)
 N RCC,FLAG,HCV,GT,ROR1,ROR2,ROR3,RORX023,RORTAKN,RORXL
"RTN","RORX023A",81,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX023A",82,0)
 S (CNT,ECNT,NSPT,RC)=0,(UTEDT,UTSDT)=0,RORX023=1
"RTN","RORX023A",83,0)
 ;=== Set up parameters
"RTN","RORX023A",84,0)
 ;--- Utilization date range
"RTN","RORX023A",85,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX023A",86,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX023A",87,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX023A",88,0)
 ;--- Number of patients in the registry
"RTN","RORX023A",89,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX023A",90,0)
 ;--- Lab parameters
"RTN","RORX023A",91,0)
 S RORLDST("RORCB")="$$LTSCB^RORX023A"
"RTN","RORX023A",92,0)
 ;--- Labs date range
"RTN","RORX023A",93,0)
 S LTSDT=""
"RTN","RORX023A",94,0)
 S LTEDT=DT
"RTN","RORX023A",95,0)
 ;--- Shift the Labs end date
"RTN","RORX023A",96,0)
 S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX023A",97,0)
 ;== Pharm parameters
"RTN","RORX023A",98,0)
 S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORX023A",99,0)
 S RORXDST("RORCB")="$$RXOCB^RORX023A"   ;call back routine
"RTN","RORX023A",100,0)
 ;--- RX start and end dates
"RTN","RORX023A",101,0)
 S RORXSDT=2000101  ;start date 1/1/1900
"RTN","RORX023A",102,0)
 S RORXEDT=DT
"RTN","RORX023A",103,0)
 ;--- RX list of HepC registry drugs
"RTN","RORX023A",104,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX023A",105,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG)
"RTN","RORX023A",106,0)
 ;--- Shift the RXs end date
"RTN","RORX023A",107,0)
 S RORXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX023A",108,0)
 ;--- Set up Clinic/Division list parameters date_range_3
"RTN","RORX023A",109,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX023A",110,0)
 ;--- Set up ICD parameters
"RTN","RORX023A",111,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX023A",112,0)
 ;=== Browse through the registry records
"RTN","RORX023A",113,0)
 S IEN=0
"RTN","RORX023A",114,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX023A",115,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX023A",116,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX023A",117,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX023A",118,0)
 . ;--- Get patient DFN
"RTN","RORX023A",119,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX023A",120,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX023A",121,0)
 . ;--- Check if the patient should be skipped based on standard filters
"RTN","RORX023A",122,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,UTSDT,UTEDT)
"RTN","RORX023A",123,0)
 . ;--- Check if patient should be skipped because of ICD codes
"RTN","RORX023A",124,0)
 . S RCC=0
"RTN","RORX023A",125,0)
 . I FLAG'="ALL" D
"RTN","RORX023A",126,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX023A",127,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX023A",128,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX023A",129,0)
 . ;
"RTN","RORX023A",130,0)
 . ;--- Check if patient should be skipped because of Clinic or Division 
"RTN","RORX023A",131,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX023A",132,0)
 . ;=== Check meds and labs
"RTN","RORX023A",133,0)
 . ; Find last date HepC registry meds were taken, add 84 days to the date of the last med fill/refill plus the days supply
"RTN","RORX023A",134,0)
 . ; Include in report if the patient has selected HepC Quant or HepC Qual lab results:
"RTN","RORX023A",135,0)
 . ;  Result either starts with a <   -- OR -- includes the phrase "NOT DETECT" or "NO HCV RNA" or "NO RNA" or "NEGATIVE" 
"RTN","RORX023A",136,0)
 . ; -- OR -- starts "NEG"  -- OR -- = "NO_HCV_RNA_DETECTED" or "TND".) and the last result was on or after 84 days past
"RTN","RORX023A",137,0)
 . ; the last date registry med was taken calculated date.
"RTN","RORX023A",138,0)
 . ;
"RTN","RORX023A",139,0)
 . S SKIP=1,UTIL=0
"RTN","RORX023A",140,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX023A",141,0)
 . . N RORCHK
"RTN","RORX023A",142,0)
 . . S RORCHK=$$SVR(PATIEN,RORXSDT,RORXEDT,RORREG,RORXL,LTSDT,LTEDT,.RORLDST,.RORXDST),RC=RORCHK
"RTN","RORX023A",143,0)
 . . I RORCHK<0 Q  ;error
"RTN","RORX023A",144,0)
 . . I RORCHK S SKIP=0 ; SVR criteria met - don't skip
"RTN","RORX023A",145,0)
 . ;
"RTN","RORX023A",146,0)
 . ;--- Check if patient should be skipped because no utilization in the corresponding date range
"RTN","RORX023A",147,0)
 . I 'SKIP D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX023A",148,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX023A",149,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX023A",150,0)
 . . S:'UTIL SKIP=1
"RTN","RORX023A",151,0)
 . ;
"RTN","RORX023A",152,0)
 . ;--- Skip the patient if not all selection criteria have been met
"RTN","RORX023A",153,0)
 . I SKIP K ^TMP("RORX023",$J,"PAT",PATIEN) Q
"RTN","RORX023A",154,0)
 . ;
"RTN","RORX023A",155,0)
 . ;--- Get and store the patient's data  last4^name
"RTN","RORX023A",156,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX023A",157,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX023A",158,0)
 . S ^TMP("RORX023",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_U_TMP
"RTN","RORX023A",159,0)
 . S NSPT=NSPT+1   ;increment count of selected patients
"RTN","RORX023A",160,0)
 ;
"RTN","RORX023A",161,0)
 D FREE^RORTMP(RORXL)  ;clean up drug list
"RTN","RORX023A",162,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX023A",163,0)
 ;
"RTN","RORX023A",164,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX023A",165,0)
 ;
"RTN","RORX023A",166,0)
 ; Need to identify the 
"RTN","RORX023A",167,0)
 ;
"RTN","RORX023A",168,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX023A",169,0)
 ;
"RTN","RORX023A",170,0)
 ;
"RTN","RORX023A",171,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX023A",172,0)
 ;
"RTN","RORX023A",173,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX023A",174,0)
 ;                               processed.
"RTN","RORX023A",175,0)
 ;
"RTN","RORX023A",176,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX023A",177,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX023A",178,0)
 ;                                 ^02: Drug name
"RTN","RORX023A",179,0)
 ;
"RTN","RORX023A",180,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX023A",181,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX023A",182,0)
 ;
"RTN","RORX023A",183,0)
 ;Return Values:
"RTN","RORX023A",184,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX023A",185,0)
 ;        0  Ok
"RTN","RORX023A",186,0)
 ;        1  Skip this result
"RTN","RORX023A",187,0)
 ;        2  Skip this and all remaining results
"RTN","RORX023A",188,0)
 ;
"RTN","RORX023A",189,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX023A",190,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,RORDS,RORTAKEN,TMP
"RTN","RORX023A",191,0)
 ;--- Skip med if med does not have a generic name
"RTN","RORX023A",192,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX023A",193,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX023A",194,0)
 E  Q 1
"RTN","RORX023A",195,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX023A",196,0)
 ;--- Process the order
"RTN","RORX023A",197,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX023A",198,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX023A",199,0)
 S RXCNT=0
"RTN","RORX023A",200,0)
 ;--- Original prescription
"RTN","RORX023A",201,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX023A",202,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX023A",203,0)
 . S RORDS=$P($G(^TMP("PS",$J,0)),U,7)       ; Days supply
"RTN","RORX023A",204,0)
 . S RORTAKEN=$$FMADD^XLFDT(OFD,+RORDS)      ; Last date taken
"RTN","RORX023A",205,0)
 . S RXCNT=RXCNT+1
"RTN","RORX023A",206,0)
 . S @ROR8DST@(RORTAKEN)=""
"RTN","RORX023A",207,0)
 E  D             ;--- Outpatient
"RTN","RORX023A",208,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)   ; Original Fill Date
"RTN","RORX023A",209,0)
 . S RORDS=$P($G(^TMP("PS",$J,0)),U,7)        ; Days supply
"RTN","RORX023A",210,0)
 . S RORTAKEN=$$FMADD^XLFDT(OFD,+RORDS)       ; Last date taken
"RTN","RORX023A",211,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX023A",212,0)
 . S RXCNT=RXCNT+1
"RTN","RORX023A",213,0)
 . S @ROR8DST@(RORTAKEN)=""
"RTN","RORX023A",214,0)
 ;--- Refills and partials
"RTN","RORX023A",215,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX023A",216,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX023A",217,0)
 . S IRP=0
"RTN","RORX023A",218,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX023A",219,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX023A",220,0)
 . . I TMP>0  S RXCNT=RXCNT+1 D
"RTN","RORX023A",221,0)
 . . . S RORDS=$P(TMP,U,2)                           ; Days supply
"RTN","RORX023A",222,0)
 . . . S RORTAKEN=$$FMADD^XLFDT(+TMP,+RORDS)         ; Last date taken
"RTN","RORX023A",223,0)
 . . . S @ROR8DST@(RORTAKEN)=""
"RTN","RORX023A",224,0)
 Q 0
"RTN","RORX023A",225,0)
 ;
"RTN","RORX023A",226,0)
 ;***** CHECKS FOR SVR CRITERIA MET
"RTN","RORX023A",227,0)
 ;PATIEN the ien of patient entry from PATIENT file (#2)
"RTN","RORX023A",228,0)
 ;RORREG the ien of the ROR REGISTER PARAMETERS entry in file 798.1 being processed
"RTN","RORX023A",229,0)
 ;RORXL Closed root of the array containing RX list of HepC registry drugs from call to $$DRUGLIST^RORUTL1
"RTN","RORX023A",230,0)
 ;RORXEDT RX end date
"RTN","RORX023A",231,0)
 ;RORXSDT RX start date
"RTN","RORX023A",232,0)
 ;LTSDT  Labs start date
"RTN","RORX023A",233,0)
 ;LTEDT   Labs end date
"RTN","RORX023A",234,0)
 ;RORLDST  Descriptor for Lab search API
"RTN","RORX023A",235,0)
 ;RORXDST  Descriptor for pharmacy search API
"RTN","RORX023A",236,0)
 ;
"RTN","RORX023A",237,0)
 ;=== SVR criteria 'rules'
"RTN","RORX023A",238,0)
 ; Find last date HepC registry meds were taken, add the days supply to the date of the last med fill/refill
"RTN","RORX023A",239,0)
 ; Include in report if the patient has selected HepC Quant or HepC Qual lab results:
"RTN","RORX023A",240,0)
 ; Result either starts with a < -- OR -- includes the phrase "NOT DETECT" or "NO HCV RNA" or "NO RNA" or "NEGATIVE" 
"RTN","RORX023A",241,0)
 ; -- OR -- starts "NEG" -- OR -- = "NO_HCV_RNA_DETECTED" or "TND".) and the last result was on or after 84 days past
"RTN","RORX023A",242,0)
 ; the last date registry med was taken calculated date.
"RTN","RORX023A",243,0)
 ;
"RTN","RORX023A",244,0)
 ; Return Values:
"RTN","RORX023A",245,0)
 ; <0 Error code
"RTN","RORX023A",246,0)
 ; 0 SVR criteria not met
"RTN","RORX023A",247,0)
 ; 1 SVR criteria met
"RTN","RORX023A",248,0)
 ;
"RTN","RORX023A",249,0)
SVR(PATIEN,RORXSDT,RORXEDT,RORREG,RORXL,LTSDT,LTEDT,RORLDST,RORXDST) ; 
"RTN","RORX023A",250,0)
 N RC,RORLABDT,RORTAKN
"RTN","RORX023A",251,0)
 ; Get registry meds for patient
"RTN","RORX023A",252,0)
 S RORXDST=$NA(^TMP("RORX023",$J,"PAT",PATIEN,"RX"))
"RTN","RORX023A",253,0)
 S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX023A",254,0)
 I RC<0 Q RC  ;error occurred
"RTN","RORX023A",255,0)
 I $G(RORXDST("SKIP"))!'$O(@RORXDST@("")) K RORXDST("SKIP") Q 0 ;patient never took or still takes registry meds
"RTN","RORX023A",256,0)
 ;
"RTN","RORX023A",257,0)
 S RORLDST=$NA(^TMP("RORX023",$J,"PAT",PATIEN,"LR"))
"RTN","RORX023A",258,0)
 S RC=$$LTSEARCH^RORUTL10(PATIEN,+RORREG,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX023A",259,0)
 I RC<0 Q RC  ;error
"RTN","RORX023A",260,0)
 ;=== SVR if patient has a qualifying lab test at least 84 days past the last med taken date
"RTN","RORX023A",261,0)
 I '$O(@RORLDST@("HepC","")) Q 0  ; No lab result date
"RTN","RORX023A",262,0)
 S RORLABDT=(9999999-$O(@RORLDST@("HepC","")))/1 ; Data stored inversely, reverse to normal and strip time
"RTN","RORX023A",263,0)
 S RORTAKN=$O(@RORXDST@(" "),-1)
"RTN","RORX023A",264,0)
 I 'RORTAKN Q 0  ; No last taken date
"RTN","RORX023A",265,0)
 I RORLABDT<$$FMADD^XLFDT(RORTAKN,84) Q 0  ; No qualifying lab test at least 84 days past the last taken date
"RTN","RORX023A",266,0)
 Q 1
"RTN","RORX023A",267,0)
 ;
"RTN","RORX023A",268,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX023A",269,0)
 ;
"RTN","RORX023A",270,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX023A",271,0)
 ; NSPT          Number of selected patients
"RTN","RORX023A",272,0)
 ;
"RTN","RORX023A",273,0)
 ; Return Values:
"RTN","RORX023A",274,0)
 ;       <0  Error code
"RTN","RORX023A",275,0)
 ;        0  Ok
"RTN","RORX023A",276,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX023A",277,0)
 ;
"RTN","RORX023A",278,0)
STORE(REPORT,NSPT) ;
"RTN","RORX023A",279,0)
 N RORFDT        ;med last taken date
"RTN","RORX023A",280,0)
 N RORLBG        ;lab test type (GT, HCV)
"RTN","RORX023A",281,0)
 N RORLVAL       ;lab value
"RTN","RORX023A",282,0)
 N RORLDST
"RTN","RORX023A",283,0)
 N RORXDST
"RTN","RORX023A",284,0)
 N RORICN
"RTN","RORX023A",285,0)
 N RORBODY,PTAG  ;parent iens
"RTN","RORX023A",286,0)
 N CNT,DATE,DFN,ECNT,IEN,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,THIST
"RTN","RORX023A",287,0)
 N GT,HCV,HCVHEPC
"RTN","RORX023A",288,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX023A",289,0)
 ;--- Create 'patients' table
"RTN","RORX023A",290,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX023A",291,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX023A",292,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX023A",293,0)
 F  S DFN=$O(^TMP("RORX023",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX023A",294,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX023A",295,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX023A",296,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX023",$J,"PAT",DFN))
"RTN","RORX023A",297,0)
 . ;--- Patient's data
"RTN","RORX023A",298,0)
 . S TMP=$G(@NODE)
"RTN","RORX023A",299,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),RORICN=$P(TMP,U,4)
"RTN","RORX023A",300,0)
 . ;--- get lab results
"RTN","RORX023A",301,0)
 . S RORLDST=$NA(^TMP("RORX023",$J,"PAT",DFN,"LR"))
"RTN","RORX023A",302,0)
 . S RORXDST=$NA(^TMP("RORX023",$J,"PAT",DFN,"RX"))
"RTN","RORX023A",303,0)
 . ;--- Gets most recent result for Qualifying HepC and GT lab tests
"RTN","RORX023A",304,0)
 . ;    HEPC=date of most recent quanitative or qualitative test^result
"RTN","RORX023A",305,0)
 . ;    GT=date of most recent GT test^result
"RTN","RORX023A",306,0)
 . K HEPC,GT
"RTN","RORX023A",307,0)
 . F RORLBG="HepC","GT" D
"RTN","RORX023A",308,0)
 . . S NODE=$$UP^XLFSTR(RORLBG),@NODE="^"
"RTN","RORX023A",309,0)
 . . S RORFDT=$O(@RORLDST@(RORLBG,""))
"RTN","RORX023A",310,0)
 . . Q:RORFDT=""
"RTN","RORX023A",311,0)
 . . S RORLVAL=$G(@RORLDST@(RORLBG,RORFDT))
"RTN","RORX023A",312,0)
 . . S RORFDT=(9999999-RORFDT)\1  ;strip time  
"RTN","RORX023A",313,0)
 . . S @NODE=(RORFDT)_U_RORLVAL
"RTN","RORX023A",314,0)
 . S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,RORBODY,,DFN)
"RTN","RORX023A",315,0)
 . S RORFDT=$O(@RORXDST@(""),-1)
"RTN","RORX023A",316,0)
 . ;--- store
"RTN","RORX023A",317,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,PTAG,1)
"RTN","RORX023A",318,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,PTAG,2)
"RTN","RORX023A",319,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV_DATE",$P(HEPC,U),PTAG,1)
"RTN","RORX023A",320,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV",$P(HEPC,U,2),PTAG,3)
"RTN","RORX023A",321,0)
 . D ADDVAL^RORTSK11(RORTSK,"GT",$P(GT,U,2),PTAG,1)
"RTN","RORX023A",322,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST_TAKEN",RORFDT,PTAG,1)
"RTN","RORX023A",323,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",RORICN,PTAG,1)
"RTN","RORX023A",324,0)
 . S PTCNT=PTCNT+1
"RTN","RORX023A",325,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX023A",326,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX023A",327,0)
 ;---
"RTN","RORX023A",328,0)
 Q ECNT
"VER")
8.0^22.0
"^DD",799.51,799.51,0)
FIELD^^.09^5
"^DD",799.51,799.51,0,"DDA")
N
"^DD",799.51,799.51,0,"DT")
3040114
"^DD",799.51,799.51,0,"IX","AR",799.51,.02)

"^DD",799.51,799.51,0,"IX","B",799.51,.01)

"^DD",799.51,799.51,0,"NM","ROR GENERIC DRUG")

"^DD",799.51,799.51,0,"VRPK")
ROR
"^DD",799.51,799.51,0,"VRRV")
1.1^ROR*1*5
"^DD",799.51,799.51,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.51,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.51,799.51,.01,1,0)
^.1
"^DD",799.51,799.51,.01,1,1,0)
799.51^B
"^DD",799.51,799.51,.01,1,1,1)
S ^ROR(799.51,"B",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.01,1,1,2)
K ^ROR(799.51,"B",$E(X,1,30),DA)
"^DD",799.51,799.51,.01,1,1,3)
Do not delete!
"^DD",799.51,799.51,.01,3)
Name must be 3-30 characters, not numeric or starting with punctuation.
"^DD",799.51,799.51,.01,8.5)
@
"^DD",799.51,799.51,.01,9)
@
"^DD",799.51,799.51,.01,21,0)
^.001^4^4^3040124^^^
"^DD",799.51,799.51,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.01,21,3,0)
 
"^DD",799.51,799.51,.01,21,4,0)
The NAME field stores a short name of the drug.
"^DD",799.51,799.51,.01,"DEL",1,0)
I $$VADEL^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,1,0)
^.1
"^DD",799.51,799.51,.02,1,1,0)
799.51^AR
"^DD",799.51,799.51,.02,1,1,1)
S ^ROR(799.51,"AR",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.02,1,1,2)
K ^ROR(799.51,"AR",$E(X,1,30),DA)
"^DD",799.51,799.51,.02,1,1,3)
Do not delete!
"^DD",799.51,799.51,.02,1,1,"%D",0)
^^2^2^3040124^
"^DD",799.51,799.51,.02,1,1,"%D",1,0)
This cross-reference groups all drugs associated
"^DD",799.51,799.51,.02,1,1,"%D",2,0)
with a particular registry together.
"^DD",799.51,799.51,.02,1,1,"DT")
3030818
"^DD",799.51,799.51,.02,8.5)
@
"^DD",799.51,799.51,.02,9)
@
"^DD",799.51,799.51,.02,21,0)
^^5^5^3040124^
"^DD",799.51,799.51,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.02,21,3,0)
 
"^DD",799.51,799.51,.02,21,4,0)
This field identifies the registry that the drug 
"^DD",799.51,799.51,.02,21,5,0)
is associated with.
"^DD",799.51,799.51,.02,"DT")
3040114
"^DD",799.51,799.51,.03,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",799.51,799.51,.03,3)

"^DD",799.51,799.51,.03,8.5)
@
"^DD",799.51,799.51,.03,9)
@
"^DD",799.51,799.51,.03,12)
Only Drug Groups can be selected.
"^DD",799.51,799.51,.03,12.1)
S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"")
"^DD",799.51,799.51,.03,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.03,23,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,23,1,0)
This field is not used currently. It is reserved for 
"^DD",799.51,799.51,.03,23,2,0)
future use.
"^DD",799.51,799.51,.03,"DT")
3040124
"^DD",799.51,799.51,.04,0)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.04,8.5)
@
"^DD",799.51,799.51,.04,9)
@
"^DD",799.51,799.51,.04,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.04,"DT")
3040114
"^DD",799.51,799.51,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,8.5)
@
"^DD",799.51,799.51,.09,9)
@
"^DD",799.51,799.51,.09,21,0)
^^6^6^3060203^
"^DD",799.51,799.51,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.51,799.51,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.51,799.51,.09,21,3,0)
 
"^DD",799.51,799.51,.09,21,4,0)
Drugs associated with the national registries must
"^DD",799.51,799.51,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",799.51,799.51,.09,21,6,0)
editing of other fields of the record.
"^DD",799.51,799.51,.09,"DEL",1,0)
I $$VADEL^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,"DT")
3030818
"^DIC",799.51,799.51,0)
ROR GENERIC DRUG^799.51
"^DIC",799.51,799.51,0,"GL")
^ROR(799.51,
"^DIC",799.51,799.51,"%",0)
^1.005^^0
"^DIC",799.51,799.51,"%D",0)
^^5^5^3060203^
"^DIC",799.51,799.51,"%D",1,0)
This file contains a list of registry specific
"^DIC",799.51,799.51,"%D",2,0)
generic medications. For example, the ARV 
"^DIC",799.51,799.51,"%D",3,0)
(anti-retroviral) medications associated with the
"^DIC",799.51,799.51,"%D",4,0)
Human Immunodeficiency Virus (HIV) registry are
"^DIC",799.51,799.51,"%D",5,0)
stored here.
"^DIC",799.51,"B","ROR GENERIC DRUG",799.51)

"BLD",8891,6)
^25
**END**
**END**

