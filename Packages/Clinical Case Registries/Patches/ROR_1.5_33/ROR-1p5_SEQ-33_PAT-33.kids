Released ROR*1.5*33 SEQ #33
Extracted from mail message
**KIDS**:ROR*1.5*33^

**INSTALL NAME**
ROR*1.5*33
"BLD",10354,0)
ROR*1.5*33^CLINICAL CASE REGISTRIES^0^3180731^y
"BLD",10354,1,0)
^^29^29^3180607^^
"BLD",10354,1,1,0)
1. Six new local registries added
"BLD",10354,1,2,0)
2. Three new medications are added to the ROR GENERIC DRUG file
"BLD",10354,1,3,0)
   (#799.51) to be used as inclusion criteria for patients in the
"BLD",10354,1,4,0)
   respective registry(s).
"BLD",10354,1,5,0)
      a. HIV registry    : 
"BLD",10354,1,6,0)
            BICTEGRAVIR/EMTRICITABINE/TENOFOVIR
"BLD",10354,1,7,0)
 
"BLD",10354,1,8,0)
            EFAVIRENZ/LAMIVUDINE/TENOFOVIR
"BLD",10354,1,9,0)
 
"BLD",10354,1,10,0)
            LAMIVUDINE/ TDF
"BLD",10354,1,11,0)
  
"BLD",10354,1,12,0)
 3. A  new Future Appointment selection paneladded to selected reports
"BLD",10354,1,13,0)
 4. The new panel will have a radio button with a label 
"BLD",10354,1,14,0)
    "All Patients" which will be the default. A second button
"BLD",10354,1,15,0)
     with a label "Only patients with an appointment in the
"BLD",10354,1,16,0)
     next X days".
"BLD",10354,1,17,0)
 
"BLD",10354,1,18,0)
5. On the report header for reports that display "Only patients with
"BLD",10354,1,19,0)
    appointment in the X number of days", new text will be displayed as
"BLD",10354,1,20,0)
    follows to et the user know that the report was run for future 
"BLD",10354,1,21,0)
    appointments only.
"BLD",10354,1,22,0)
 
"BLD",10354,1,23,0)
6. New LOINC codes have been added to the ROR LAB SEARCH file (#798.9) 
"BLD",10354,1,24,0)
   to add patients to the HIV pending list.
"BLD",10354,1,25,0)
7. A correction was made on the Combined Meds and Labs, 
"BLD",10354,1,26,0)
    DAA Lab Monitoring, Hepatitis A and the Hepatitis B
"BLD",10354,1,27,0)
    reports when sorting by the ICN, PACT or PCP columns. 
"BLD",10354,1,28,0)
      
"BLD",10354,1,29,0)
 8. The version of the CCR software has been updated 
"BLD",10354,4,0)
^9.64PA^798.2^4
"BLD",10354,4,798.1,0)
798.1
"BLD",10354,4,798.1,222)
n^n^f^^y^^y^o^n
"BLD",10354,4,798.1,224)
N ROR S ROR=$P(^(0),U) I ROR["VA TRANSPLANT"
"BLD",10354,4,798.2,0)
798.2
"BLD",10354,4,798.2,222)
n^n^f^^y^^y^o^n
"BLD",10354,4,798.2,224)
N ROR S ROR=$P(^(0),U) I ROR["VA TRANSPLANT"
"BLD",10354,4,799.31,0)
799.31
"BLD",10354,4,799.31,222)
n^n^f^^n^^y^o^n
"BLD",10354,4,799.31,224)
N ROR S ROR=$P(^(0),U) I ROR="FUT_APPT"
"BLD",10354,4,799.51,0)
799.51
"BLD",10354,4,799.51,222)
n^n^f^^y^^y^o^n
"BLD",10354,4,799.51,224)
N ROR S ROR=$P($G(^(0)),U) I ROR="BICTEGRAVIR/EMTRICITABINE/TAF"!(ROR="EFAVIRENZ/LAMIVUDINE/TDF")!(ROR="LAMIVUDINE/TDF")
"BLD",10354,4,"B",798.1,798.1)

"BLD",10354,4,"B",798.2,798.2)

"BLD",10354,4,"B",799.31,799.31)

"BLD",10354,4,"B",799.51,799.51)

"BLD",10354,6.3)
81
"BLD",10354,"INI")
PRE^RORP033
"BLD",10354,"INIT")
POST^RORP033
"BLD",10354,"KRN",0)
^9.67PA^779.2^20
"BLD",10354,"KRN",.4,0)
.4
"BLD",10354,"KRN",.401,0)
.401
"BLD",10354,"KRN",.402,0)
.402
"BLD",10354,"KRN",.403,0)
.403
"BLD",10354,"KRN",.5,0)
.5
"BLD",10354,"KRN",.84,0)
.84
"BLD",10354,"KRN",.84,"NM",0)
^9.68A^17^17
"BLD",10354,"KRN",.84,"NM",1,0)
7981997.001^^0
"BLD",10354,"KRN",.84,"NM",1,99999999)
10000000198^3180411.133923
"BLD",10354,"KRN",.84,"NM",2,0)
7981018.002^^0
"BLD",10354,"KRN",.84,"NM",2,99999999)
10000000198^3180411.133923
"BLD",10354,"KRN",.84,"NM",3,0)
7981999.002^^0
"BLD",10354,"KRN",.84,"NM",3,99999999)
10000000198^3180411.133923
"BLD",10354,"KRN",.84,"NM",4,0)
7981010.001^^0
"BLD",10354,"KRN",.84,"NM",4,99999999)
10000000198^3180411.133923
"BLD",10354,"KRN",.84,"NM",5,0)
7981010.002^^0
"BLD",10354,"KRN",.84,"NM",5,99999999)
10000000198^3180411.133923
"BLD",10354,"KRN",.84,"NM",6,0)
7981999.001^^0
"BLD",10354,"KRN",.84,"NM",6,99999999)
10000000199^3180416.152237
"BLD",10354,"KRN",.84,"NM",7,0)
7981012.001^^0
"BLD",10354,"KRN",.84,"NM",7,99999999)
10000000199^3180416.152237
"BLD",10354,"KRN",.84,"NM",8,0)
7981012.002^^0
"BLD",10354,"KRN",.84,"NM",8,99999999)
10000000199^3180416.152237
"BLD",10354,"KRN",.84,"NM",9,0)
7981020.002^^0
"BLD",10354,"KRN",.84,"NM",9,99999999)
10000000198^3180417.09155
"BLD",10354,"KRN",.84,"NM",10,0)
7981019.002^^0
"BLD",10354,"KRN",.84,"NM",10,99999999)
10000000198^3180417.09155
"BLD",10354,"KRN",.84,"NM",11,0)
7981024.001^^0
"BLD",10354,"KRN",.84,"NM",11,99999999)
10000000198^3180417.130616
"BLD",10354,"KRN",.84,"NM",12,0)
7981024.002^^0
"BLD",10354,"KRN",.84,"NM",12,99999999)
10000000198^3180417.130616
"BLD",10354,"KRN",.84,"NM",13,0)
7981025.001^^0
"BLD",10354,"KRN",.84,"NM",13,99999999)
10000000198^3180418.123908
"BLD",10354,"KRN",.84,"NM",14,0)
7981025.002^^0
"BLD",10354,"KRN",.84,"NM",14,99999999)
10000000198^3180418.123908
"BLD",10354,"KRN",.84,"NM",15,0)
7981022.001^^0
"BLD",10354,"KRN",.84,"NM",15,99999999)
10000000198^3180425.141206
"BLD",10354,"KRN",.84,"NM",16,0)
7981021.002^^0
"BLD",10354,"KRN",.84,"NM",16,99999999)
10000000198^3180514.121601
"BLD",10354,"KRN",.84,"NM",17,0)
7980000.018^^0
"BLD",10354,"KRN",.84,"NM",17,99999999)
10000000198^3180727.132904
"BLD",10354,"KRN",.84,"NM","B",7980000.018,17)

"BLD",10354,"KRN",.84,"NM","B",7981010.001,4)

"BLD",10354,"KRN",.84,"NM","B",7981010.002,5)

"BLD",10354,"KRN",.84,"NM","B",7981012.001,7)

"BLD",10354,"KRN",.84,"NM","B",7981012.002,8)

"BLD",10354,"KRN",.84,"NM","B",7981018.002,2)

"BLD",10354,"KRN",.84,"NM","B",7981019.002,10)

"BLD",10354,"KRN",.84,"NM","B",7981020.002,9)

"BLD",10354,"KRN",.84,"NM","B",7981021.002,16)

"BLD",10354,"KRN",.84,"NM","B",7981022.001,15)

"BLD",10354,"KRN",.84,"NM","B",7981024.001,11)

"BLD",10354,"KRN",.84,"NM","B",7981024.002,12)

"BLD",10354,"KRN",.84,"NM","B",7981025.001,13)

"BLD",10354,"KRN",.84,"NM","B",7981025.002,14)

"BLD",10354,"KRN",.84,"NM","B",7981997.001,1)

"BLD",10354,"KRN",.84,"NM","B",7981999.001,6)

"BLD",10354,"KRN",.84,"NM","B",7981999.002,3)

"BLD",10354,"KRN",3.6,0)
3.6
"BLD",10354,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",10354,"KRN",3.8,0)
3.8
"BLD",10354,"KRN",9.2,0)
9.2
"BLD",10354,"KRN",9.8,0)
9.8
"BLD",10354,"KRN",9.8,"NM",0)
^9.68A^24^21
"BLD",10354,"KRN",9.8,"NM",2,0)
RORXU005^^0^B61938494
"BLD",10354,"KRN",9.8,"NM",2,99999999)
10000000198^3180327.143813
"BLD",10354,"KRN",9.8,"NM",3,0)
RORXU006^^0^B58238897
"BLD",10354,"KRN",9.8,"NM",3,99999999)
10000000198^3180327.143813
"BLD",10354,"KRN",9.8,"NM",4,0)
RORX018^^0^B174478547
"BLD",10354,"KRN",9.8,"NM",4,99999999)
10000000198^3180327.143813
"BLD",10354,"KRN",9.8,"NM",5,0)
RORX018A^^0^B2762309
"BLD",10354,"KRN",9.8,"NM",5,99999999)
10000000198^3180327.143813
"BLD",10354,"KRN",9.8,"NM",6,0)
RORUTL02^^0^B62497061
"BLD",10354,"KRN",9.8,"NM",6,99999999)
10000000198^3180327.143813
"BLD",10354,"KRN",9.8,"NM",7,0)
RORXU002^^0^B171073228
"BLD",10354,"KRN",9.8,"NM",7,99999999)
10000000198^3180327.150611
"BLD",10354,"KRN",9.8,"NM",8,0)
RORX010^^0^B81772446
"BLD",10354,"KRN",9.8,"NM",8,99999999)
10000000198^3180404.132359
"BLD",10354,"KRN",9.8,"NM",9,0)
RORX012^^0^B23584131
"BLD",10354,"KRN",9.8,"NM",9,99999999)
10000000198^3180405.112904
"BLD",10354,"KRN",9.8,"NM",10,0)
RORX012A^^0^B136884718
"BLD",10354,"KRN",9.8,"NM",10,99999999)
10000000198^3180405.112904
"BLD",10354,"KRN",9.8,"NM",11,0)
RORX024^^0^B81144322
"BLD",10354,"KRN",9.8,"NM",11,99999999)
10000000198^3180409.071631
"BLD",10354,"KRN",9.8,"NM",12,0)
RORX024A^^0^B104217949
"BLD",10354,"KRN",9.8,"NM",12,99999999)
10000000198^3180409.071631
"BLD",10354,"KRN",9.8,"NM",13,0)
RORX025^^0^B26668893
"BLD",10354,"KRN",9.8,"NM",13,99999999)
10000000198^3180409.071631
"BLD",10354,"KRN",9.8,"NM",15,0)
RORX019^^0^B222078560
"BLD",10354,"KRN",9.8,"NM",15,99999999)
10000000199^3180409.170322
"BLD",10354,"KRN",9.8,"NM",16,0)
RORX020^^0^B81734051
"BLD",10354,"KRN",9.8,"NM",16,99999999)
10000000199^3180409.170322
"BLD",10354,"KRN",9.8,"NM",17,0)
RORX020A^^0^B60919482
"BLD",10354,"KRN",9.8,"NM",17,99999999)
10000000199^3180409.170322
"BLD",10354,"KRN",9.8,"NM",18,0)
RORX021^^0^B30787018
"BLD",10354,"KRN",9.8,"NM",18,99999999)
10000000199^3180409.170322
"BLD",10354,"KRN",9.8,"NM",19,0)
RORX021A^^0^B180829631
"BLD",10354,"KRN",9.8,"NM",19,99999999)
10000000199^3180409.170322
"BLD",10354,"KRN",9.8,"NM",20,0)
RORP033^^0^B197718013
"BLD",10354,"KRN",9.8,"NM",20,99999999)
10000000198^3180410.091529
"BLD",10354,"KRN",9.8,"NM",21,0)
RORUTL18^^0^B50985602
"BLD",10354,"KRN",9.8,"NM",21,99999999)
10000000199^3180524.165712
"BLD",10354,"KRN",9.8,"NM",23,0)
RORSET02^^0^B46700821
"BLD",10354,"KRN",9.8,"NM",23,99999999)
10000000199^3180524.165712
"BLD",10354,"KRN",9.8,"NM",24,0)
RORUTL11^^0^B4163451
"BLD",10354,"KRN",9.8,"NM",24,99999999)
10000000198^3180529.112843
"BLD",10354,"KRN",9.8,"NM","B","RORP033",20)

"BLD",10354,"KRN",9.8,"NM","B","RORSET02",23)

"BLD",10354,"KRN",9.8,"NM","B","RORUTL02",6)

"BLD",10354,"KRN",9.8,"NM","B","RORUTL11",24)

"BLD",10354,"KRN",9.8,"NM","B","RORUTL18",21)

"BLD",10354,"KRN",9.8,"NM","B","RORX010",8)

"BLD",10354,"KRN",9.8,"NM","B","RORX012",9)

"BLD",10354,"KRN",9.8,"NM","B","RORX012A",10)

"BLD",10354,"KRN",9.8,"NM","B","RORX018",4)

"BLD",10354,"KRN",9.8,"NM","B","RORX018A",5)

"BLD",10354,"KRN",9.8,"NM","B","RORX019",15)

"BLD",10354,"KRN",9.8,"NM","B","RORX020",16)

"BLD",10354,"KRN",9.8,"NM","B","RORX020A",17)

"BLD",10354,"KRN",9.8,"NM","B","RORX021",18)

"BLD",10354,"KRN",9.8,"NM","B","RORX021A",19)

"BLD",10354,"KRN",9.8,"NM","B","RORX024",11)

"BLD",10354,"KRN",9.8,"NM","B","RORX024A",12)

"BLD",10354,"KRN",9.8,"NM","B","RORX025",13)

"BLD",10354,"KRN",9.8,"NM","B","RORXU002",7)

"BLD",10354,"KRN",9.8,"NM","B","RORXU005",2)

"BLD",10354,"KRN",9.8,"NM","B","RORXU006",3)

"BLD",10354,"KRN",19,0)
19
"BLD",10354,"KRN",19.1,0)
19.1
"BLD",10354,"KRN",101,0)
101
"BLD",10354,"KRN",409.61,0)
409.61
"BLD",10354,"KRN",771,0)
771
"BLD",10354,"KRN",779.2,0)
779.2
"BLD",10354,"KRN",870,0)
870
"BLD",10354,"KRN",8989.51,0)
8989.51
"BLD",10354,"KRN",8989.52,0)
8989.52
"BLD",10354,"KRN",8994,0)
8994
"BLD",10354,"KRN","B",.4,.4)

"BLD",10354,"KRN","B",.401,.401)

"BLD",10354,"KRN","B",.402,.402)

"BLD",10354,"KRN","B",.403,.403)

"BLD",10354,"KRN","B",.5,.5)

"BLD",10354,"KRN","B",.84,.84)

"BLD",10354,"KRN","B",3.6,3.6)

"BLD",10354,"KRN","B",3.8,3.8)

"BLD",10354,"KRN","B",9.2,9.2)

"BLD",10354,"KRN","B",9.8,9.8)

"BLD",10354,"KRN","B",19,19)

"BLD",10354,"KRN","B",19.1,19.1)

"BLD",10354,"KRN","B",101,101)

"BLD",10354,"KRN","B",409.61,409.61)

"BLD",10354,"KRN","B",771,771)

"BLD",10354,"KRN","B",779.2,779.2)

"BLD",10354,"KRN","B",870,870)

"BLD",10354,"KRN","B",8989.51,8989.51)

"BLD",10354,"KRN","B",8989.52,8989.52)

"BLD",10354,"KRN","B",8994,8994)

"BLD",10354,"PRE")
RORP033
"BLD",10354,"QUES",0)
^9.62^5^5
"BLD",10354,"QUES",1,0)
POSQ1
"BLD",10354,"QUES",1,1)
N^0:10:0
"BLD",10354,"QUES",1,"A")
Maximum number of registry update subtasks
"BLD",10354,"QUES",1,"B")
5
"BLD",10354,"QUES",1,"M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"BLD",10354,"QUES",2,0)
POSQ2
"BLD",10354,"QUES",2,1)
Y
"BLD",10354,"QUES",2,"A")
Suspend the post-install during the peak hours 
"BLD",10354,"QUES",2,"B")
NO
"BLD",10354,"QUES",2,"M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"BLD",10354,"QUES",3,0)
POSQ3
"BLD",10354,"QUES",3,1)
D^::R
"BLD",10354,"QUES",3,"A")
Suspension start time
"BLD",10354,"QUES",3,"B")
7:00AM
"BLD",10354,"QUES",3,"M")
W ! D POSQ3^RORP024(.DIR)
"BLD",10354,"QUES",4,0)
POSQ4
"BLD",10354,"QUES",4,1)
D
"BLD",10354,"QUES",4,"A")
Suspension end time
"BLD",10354,"QUES",4,"B")
6:00PM
"BLD",10354,"QUES",4,"M")
W ! D POSQ4^RORP024(.DIR)
"BLD",10354,"QUES",5,0)
POSQ5
"BLD",10354,"QUES",5,1)
D^::FRX
"BLD",10354,"QUES",5,"A")
Date/Time to run the new registry initialize task
"BLD",10354,"QUES",5,"M")
D POSQ5^RORP024(.DIR)
"BLD",10354,"QUES",5,"Q")
The date/time entered must be at least 15 minutes in the future.
"BLD",10354,"QUES","B","POSQ1",1)

"BLD",10354,"QUES","B","POSQ2",2)

"BLD",10354,"QUES","B","POSQ3",3)

"BLD",10354,"QUES","B","POSQ4",4)

"BLD",10354,"QUES","B","POSQ5",5)

"BLD",10354,"REQB",0)
^9.611^1^1
"BLD",10354,"REQB",1,0)
ROR*1.5*32^1
"BLD",10354,"REQB","B","ROR*1.5*32",1)

"DATA",798.1,41,0)
VA TRANSPLANT HEART^^^Transplant Heart Registry^^1^^^^^0^^^1
"DATA",798.1,41,1,0)
^798.13^6^6
"DATA",798.1,41,1,1,0)
VA TRANSPLANT HEART  PROBLEM
"DATA",798.1,41,1,2,0)
VA TRANSPLANT HEART  PROBLEM (ICD10)
"DATA",798.1,41,1,3,0)
VA TRANSPLANT HEART  PTF
"DATA",798.1,41,1,4,0)
VA TRANSPLANT HEART  VPOV
"DATA",798.1,41,1,5,0)
VA TRANSPLANT HEART  PTF (ICD10)
"DATA",798.1,41,1,6,0)
VA TRANSPLANT HEART  VPOV (ICD10)
"DATA",798.1,41,6)
1
"DATA",798.1,41,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,41,11)
7
"DATA",798.1,41,18,0)
^798.118^2^2
"DATA",798.1,41,18,1,0)
ROR VA GENERIC USER
"DATA",798.1,41,18,2,0)
ROR VA GENERIC ADMIN
"DATA",798.1,41,19)

"DATA",798.1,41,21)
^^^
"DATA",798.1,41,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.1,42,0)
VA TRANSPLANT INTESTINE^^^Transplant Intestine Registry^^1^^^^^0^^^1
"DATA",798.1,42,1,0)
^798.13^6^6
"DATA",798.1,42,1,1,0)
VA TRANSPLANT INTESTINE  PROBLEM
"DATA",798.1,42,1,2,0)
VA TRANSPLANT INTESTINE  PROBLEM (ICD10)
"DATA",798.1,42,1,3,0)
VA TRANSPLANT INTESTINE  PTF
"DATA",798.1,42,1,4,0)
VA TRANSPLANT INTESTINE  PTF (ICD10)
"DATA",798.1,42,1,5,0)
VA TRANSPLANT INTESTINE  VPOV
"DATA",798.1,42,1,6,0)
VA TRANSPLANT INTESTINE  VPOV (ICD10)
"DATA",798.1,42,6)
1
"DATA",798.1,42,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,42,11)
7
"DATA",798.1,42,18,0)
^798.118^4^2
"DATA",798.1,42,18,3,0)
ROR VA GENERIC USER
"DATA",798.1,42,18,4,0)
ROR VA GENERIC ADMIN
"DATA",798.1,42,19)

"DATA",798.1,42,21)
^^^
"DATA",798.1,42,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.1,43,0)
VA TRANSPLANT KIDNEY^^^Transplant Kidney Registry^^1^^^^^0^^^1
"DATA",798.1,43,1,0)
^798.13^6^6
"DATA",798.1,43,1,1,0)
VA TRANSPLANT KIDNEY  PROBLEM
"DATA",798.1,43,1,2,0)
VA TRANSPLANT KIDNEY  PROBLEM (ICD10)
"DATA",798.1,43,1,3,0)
VA TRANSPLANT KIDNEY  PTF
"DATA",798.1,43,1,4,0)
VA TRANSPLANT KIDNEY  PTF (ICD10)
"DATA",798.1,43,1,5,0)
VA TRANSPLANT KIDNEY  VPOV
"DATA",798.1,43,1,6,0)
VA TRANSPLANT KIDNEY  VPOV (ICD10)
"DATA",798.1,43,6)
1
"DATA",798.1,43,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,43,11)
7
"DATA",798.1,43,18,0)
^798.118^2^2
"DATA",798.1,43,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,43,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,43,19)

"DATA",798.1,43,21)
^^^
"DATA",798.1,43,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.1,44,0)
VA TRANSPLANT LIVER^^^Transplant Liver Registry^^1^^^^^0^^^1
"DATA",798.1,44,1,0)
^798.13^6^6
"DATA",798.1,44,1,1,0)
VA TRANSPLANT LIVER  PROBLEM
"DATA",798.1,44,1,2,0)
VA TRANSPLANT LIVER  PROBLEM (ICD10)
"DATA",798.1,44,1,3,0)
VA TRANSPLANT LIVER  PTF
"DATA",798.1,44,1,4,0)
VA TRANSPLANT LIVER  PTF (ICD10)
"DATA",798.1,44,1,5,0)
VA TRANSPLANT LIVER  VPOV
"DATA",798.1,44,1,6,0)
VA TRANSPLANT LIVER  VPOV (ICD10)
"DATA",798.1,44,6)
1
"DATA",798.1,44,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,44,11)
7
"DATA",798.1,44,18,0)
^798.118^2^2
"DATA",798.1,44,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,44,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,44,19)

"DATA",798.1,44,21)
^^^
"DATA",798.1,44,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.1,45,0)
VA TRANSPLANT LUNG^^^Transplant Lung Registry^^1^^^^^0^^^1
"DATA",798.1,45,1,0)
^798.13^6^6
"DATA",798.1,45,1,1,0)
VA TRANSPLANT LUNG  PROBLEM
"DATA",798.1,45,1,2,0)
VA TRANSPLANT LUNG  PROBLEM (ICD10)
"DATA",798.1,45,1,3,0)
VA TRANSPLANT LUNG  PTF
"DATA",798.1,45,1,4,0)
VA TRANSPLANT LUNG  PTF (ICD10)
"DATA",798.1,45,1,5,0)
VA TRANSPLANT LUNG  VPOV
"DATA",798.1,45,1,6,0)
VA TRANSPLANT LUNG  VPOV (ICD10)
"DATA",798.1,45,6)
1
"DATA",798.1,45,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,45,11)
7
"DATA",798.1,45,18,0)
^798.118^2^2
"DATA",798.1,45,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,45,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,45,19)

"DATA",798.1,45,21)
^^^
"DATA",798.1,45,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.1,46,0)
VA TRANSPLANT PANCREAS^^^Transplant Pancreas Registry^^1^^^^^0^^^1
"DATA",798.1,46,1,0)
^798.13^6^6
"DATA",798.1,46,1,1,0)
VA TRANSPLANT PANCREAS  PROBLEM
"DATA",798.1,46,1,2,0)
VA TRANSPLANT PANCREAS  PROBLEM (ICD10)
"DATA",798.1,46,1,3,0)
VA TRANSPLANT PANCREAS  PTF
"DATA",798.1,46,1,4,0)
VA TRANSPLANT PANCREAS  PTF (ICD10)
"DATA",798.1,46,1,5,0)
VA TRANSPLANT PANCREAS  VPOV
"DATA",798.1,46,1,6,0)
VA TRANSPLANT PANCREAS  VPOV (ICD10)
"DATA",798.1,46,6)
1
"DATA",798.1,46,9)
^^2^CCRAutoNotification@domain.ext
"DATA",798.1,46,11)
7
"DATA",798.1,46,18,0)
^798.118^2^2
"DATA",798.1,46,18,1,0)
ROR VA GENERIC ADMIN
"DATA",798.1,46,18,2,0)
ROR VA GENERIC USER
"DATA",798.1,46,19)

"DATA",798.1,46,21)
^^^
"DATA",798.1,46,27)
1,2,3,4,5,6,7,9,11,12,13,15,16,18,19,20,24,25
"DATA",798.2,275,0)
VA TRANSPLANT HEART  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,275,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,275,5)
1
"DATA",798.2,276,0)
VA TRANSPLANT HEART  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,276,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,276,5)
30
"DATA",798.2,277,0)
VA TRANSPLANT HEART  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,277,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,277,5)
1
"DATA",798.2,278,0)
VA TRANSPLANT HEART  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,278,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,278,5)
30
"DATA",798.2,279,0)
VA TRANSPLANT HEART  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,279,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,279,5)
1
"DATA",798.2,280,0)
VA TRANSPLANT HEART  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,280,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,280,5)
30
"DATA",798.2,281,0)
VA TRANSPLANT INTESTINE  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,281,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,281,5)
1
"DATA",798.2,282,0)
VA TRANSPLANT INTESTINE  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,282,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,282,5)
30
"DATA",798.2,283,0)
VA TRANSPLANT INTESTINE  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,283,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,283,5)
1
"DATA",798.2,284,0)
VA TRANSPLANT INTESTINE  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,284,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,284,5)
30
"DATA",798.2,285,0)
VA TRANSPLANT INTESTINE  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,285,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,285,5)
1
"DATA",798.2,286,0)
VA TRANSPLANT INTESTINE  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,286,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,286,5)
30
"DATA",798.2,287,0)
VA TRANSPLANT KIDNEY  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,287,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,287,5)
1
"DATA",798.2,288,0)
VA TRANSPLANT KIDNEY  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,288,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,288,5)
30
"DATA",798.2,289,0)
VA TRANSPLANT KIDNEY  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,289,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,289,5)
1
"DATA",798.2,290,0)
VA TRANSPLANT KIDNEY  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,290,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,290,4,0)
^798.26^^
"DATA",798.2,290,5)
30
"DATA",798.2,291,0)
VA TRANSPLANT KIDNEY  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,291,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,291,5)
1
"DATA",798.2,292,0)
VA TRANSPLANT KIDNEY  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,292,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,292,5)
30
"DATA",798.2,293,0)
VA TRANSPLANT LIVER  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,293,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,293,5)
1
"DATA",798.2,294,0)
VA TRANSPLANT LIVER  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,294,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,294,5)
30
"DATA",798.2,295,0)
VA TRANSPLANT LIVER  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,295,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,295,5)
1
"DATA",798.2,296,0)
VA TRANSPLANT LIVER  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,296,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,296,5)
30
"DATA",798.2,297,0)
VA TRANSPLANT LIVER  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,297,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,297,5)
1
"DATA",798.2,298,0)
 VA TRANSPLANT LIVER  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,298,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,298,5)
30
"DATA",798.2,299,0)
VA TRANSPLANT LIVER  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,299,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,299,5)
30
"DATA",798.2,300,0)
VA TRANSPLANT LUNG  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,300,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,300,5)
1
"DATA",798.2,301,0)
VA TRANSPLANT LUNG  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,301,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,301,5)
30
"DATA",798.2,302,0)
VA TRANSPLANT LUNG  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,302,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,302,5)
1
"DATA",798.2,303,0)
VA TRANSPLANT LUNG  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,303,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,303,5)
30
"DATA",798.2,304,0)
VA TRANSPLANT LUNG  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,304,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,304,5)
1
"DATA",798.2,305,0)
VA TRANSPLANT LUNG  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,305,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,305,5)
30
"DATA",798.2,306,0)
VA TRANSPLANT PANCREAS  PTF^45^ICD-9 code in inpatient file^1
"DATA",798.2,306,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,306,5)
1
"DATA",798.2,307,0)
VA TRANSPLANT PANCREAS  PTF (ICD10)^45^ICD-10 code in inpatient file^1
"DATA",798.2,307,1)
$$PTFRULE^RORUPD09(REGIEN)
"DATA",798.2,307,5)
30
"DATA",798.2,308,0)
VA TRANSPLANT PANCREAS  PROBLEM^9000011^ICD-9 code in problem list^1
"DATA",798.2,308,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,308,5)
1
"DATA",798.2,309,0)
VA TRANSPLANT PANCREAS  PROBLEM (ICD10)^9000011^ICD-10 code in problem list^1
"DATA",798.2,309,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:DIAGNOSIS}))
"DATA",798.2,309,5)
30
"DATA",798.2,310,0)
VA TRANSPLANT PANCREAS  VPOV^9000010.07^ICD-9 code in outpatient file^1
"DATA",798.2,310,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,310,5)
1
"DATA",798.2,311,0)
VA TRANSPLANT PANCREAS  VPOV (ICD10)^9000010.07^ICD-10 code in outpatient file^1
"DATA",798.2,311,1)
+$D(^ROR(798.5,REGIEN,1,"B",+{I:POV}))
"DATA",798.2,311,5)
30
"DATA",799.31,315,0)
FUT_APPT
"DATA",799.51,60,0)
BICTEGRAVIR/EMTRICITABINE/TAF^2^20^5263^^^^^1
"DATA",799.51,61,0)
EFAVIRENZ/LAMIVUDINE/TDF^2^20^5269^^^^^1
"DATA",799.51,62,0)
LAMIVUDINE/TDF^2^20^5273^^^^^1
"FIA",798.1)
ROR REGISTRY PARAMETERS
"FIA",798.1,0)
^ROR(798.1,
"FIA",798.1,0,0)
798.1Is
"FIA",798.1,0,1)
n^n^f^^y^^y^o^n
"FIA",798.1,0,10)

"FIA",798.1,0,11)
N ROR S ROR=$P(^(0),U) I ROR["VA TRANSPLANT"
"FIA",798.1,0,"RLRO")

"FIA",798.1,0,"VR")
1.5^ROR
"FIA",798.1,798.1)
0
"FIA",798.1,798.11)
0
"FIA",798.1,798.112)
0
"FIA",798.1,798.114)
0
"FIA",798.1,798.118)
0
"FIA",798.1,798.12)
0
"FIA",798.1,798.122)
0
"FIA",798.1,798.128)
0
"FIA",798.1,798.129)
0
"FIA",798.1,798.13)
0
"FIA",798.1,798.15)
0
"FIA",798.2)
ROR SELECTION RULE
"FIA",798.2,0)
^ROR(798.2,
"FIA",798.2,0,0)
798.2I
"FIA",798.2,0,1)
n^n^f^^y^^y^o^n
"FIA",798.2,0,10)

"FIA",798.2,0,11)
N ROR S ROR=$P(^(0),U) I ROR["VA TRANSPLANT"
"FIA",798.2,0,"RLRO")

"FIA",798.2,0,"VR")
1.5^ROR
"FIA",798.2,798.2)
0
"FIA",798.2,798.25)
0
"FIA",798.2,798.26)
0
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^n^f^^n^^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)
N ROR S ROR=$P(^(0),U) I ROR="FUT_APPT"
"FIA",799.31,0,"RLRO")

"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FIA",799.51)
ROR GENERIC DRUG
"FIA",799.51,0)
^ROR(799.51,
"FIA",799.51,0,0)
799.51
"FIA",799.51,0,1)
n^n^f^^y^^y^o^n
"FIA",799.51,0,10)

"FIA",799.51,0,11)
N ROR S ROR=$P($G(^(0)),U) I ROR="BICTEGRAVIR/EMTRICITABINE/TAF"!(ROR="EFAVIRENZ/LAMIVUDINE/TDF")!(ROR="LAMIVUDINE/TDF")
"FIA",799.51,0,"RLRO")

"FIA",799.51,0,"VR")
1.5^ROR
"FIA",799.51,799.51)
0
"FRV1",798.2,"275,5",1)
ICD-9-CM
"FRV1",798.2,"275,5",1,"F")
;ICDS(
"FRV1",798.2,"276,5",1)
ICD-10-CM
"FRV1",798.2,"276,5",1,"F")
;ICDS(
"FRV1",798.2,"277,5",1)
ICD-9-CM
"FRV1",798.2,"277,5",1,"F")
;ICDS(
"FRV1",798.2,"278,5",1)
ICD-10-CM
"FRV1",798.2,"278,5",1,"F")
;ICDS(
"FRV1",798.2,"279,5",1)
ICD-9-CM
"FRV1",798.2,"279,5",1,"F")
;ICDS(
"FRV1",798.2,"280,5",1)
ICD-10-CM
"FRV1",798.2,"280,5",1,"F")
;ICDS(
"FRV1",798.2,"281,5",1)
ICD-9-CM
"FRV1",798.2,"281,5",1,"F")
;ICDS(
"FRV1",798.2,"282,5",1)
ICD-10-CM
"FRV1",798.2,"282,5",1,"F")
;ICDS(
"FRV1",798.2,"283,5",1)
ICD-9-CM
"FRV1",798.2,"283,5",1,"F")
;ICDS(
"FRV1",798.2,"284,5",1)
ICD-10-CM
"FRV1",798.2,"284,5",1,"F")
;ICDS(
"FRV1",798.2,"285,5",1)
ICD-9-CM
"FRV1",798.2,"285,5",1,"F")
;ICDS(
"FRV1",798.2,"286,5",1)
ICD-10-CM
"FRV1",798.2,"286,5",1,"F")
;ICDS(
"FRV1",798.2,"287,5",1)
ICD-9-CM
"FRV1",798.2,"287,5",1,"F")
;ICDS(
"FRV1",798.2,"288,5",1)
ICD-10-CM
"FRV1",798.2,"288,5",1,"F")
;ICDS(
"FRV1",798.2,"289,5",1)
ICD-9-CM
"FRV1",798.2,"289,5",1,"F")
;ICDS(
"FRV1",798.2,"290,5",1)
ICD-10-CM
"FRV1",798.2,"290,5",1,"F")
;ICDS(
"FRV1",798.2,"291,5",1)
ICD-9-CM
"FRV1",798.2,"291,5",1,"F")
;ICDS(
"FRV1",798.2,"292,5",1)
ICD-10-CM
"FRV1",798.2,"292,5",1,"F")
;ICDS(
"FRV1",798.2,"293,5",1)
ICD-9-CM
"FRV1",798.2,"293,5",1,"F")
;ICDS(
"FRV1",798.2,"294,5",1)
ICD-10-CM
"FRV1",798.2,"294,5",1,"F")
;ICDS(
"FRV1",798.2,"295,5",1)
ICD-9-CM
"FRV1",798.2,"295,5",1,"F")
;ICDS(
"FRV1",798.2,"296,5",1)
ICD-10-CM
"FRV1",798.2,"296,5",1,"F")
;ICDS(
"FRV1",798.2,"297,5",1)
ICD-9-CM
"FRV1",798.2,"297,5",1,"F")
;ICDS(
"FRV1",798.2,"298,5",1)
ICD-10-CM
"FRV1",798.2,"298,5",1,"F")
;ICDS(
"FRV1",798.2,"299,5",1)
ICD-10-CM
"FRV1",798.2,"299,5",1,"F")
;ICDS(
"FRV1",798.2,"300,5",1)
ICD-9-CM
"FRV1",798.2,"300,5",1,"F")
;ICDS(
"FRV1",798.2,"301,5",1)
ICD-10-CM
"FRV1",798.2,"301,5",1,"F")
;ICDS(
"FRV1",798.2,"302,5",1)
ICD-9-CM
"FRV1",798.2,"302,5",1,"F")
;ICDS(
"FRV1",798.2,"303,5",1)
ICD-10-CM
"FRV1",798.2,"303,5",1,"F")
;ICDS(
"FRV1",798.2,"304,5",1)
ICD-9-CM
"FRV1",798.2,"304,5",1,"F")
;ICDS(
"FRV1",798.2,"305,5",1)
ICD-10-CM
"FRV1",798.2,"305,5",1,"F")
;ICDS(
"FRV1",798.2,"306,5",1)
ICD-9-CM
"FRV1",798.2,"306,5",1,"F")
;ICDS(
"FRV1",798.2,"307,5",1)
ICD-10-CM
"FRV1",798.2,"307,5",1,"F")
;ICDS(
"FRV1",798.2,"308,5",1)
ICD-9-CM
"FRV1",798.2,"308,5",1,"F")
;ICDS(
"FRV1",798.2,"309,5",1)
ICD-10-CM
"FRV1",798.2,"309,5",1,"F")
;ICDS(
"FRV1",798.2,"310,5",1)
ICD-9-CM
"FRV1",798.2,"310,5",1,"F")
;ICDS(
"FRV1",798.2,"311,5",1)
ICD-10-CM
"FRV1",798.2,"311,5",1,"F")
;ICDS(
"FRV1",799.51,"60,0",2)
VA HIV
"FRV1",799.51,"60,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"60,0",3)
Default (HIV)
"FRV1",799.51,"60,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"60,0",4)
BICTEGRAVIR/EMTRICITABINE/TENOFOVIR
"FRV1",799.51,"60,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"61,0",2)
VA HIV
"FRV1",799.51,"61,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"61,0",3)
Default (HIV)
"FRV1",799.51,"61,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"61,0",4)
EFAVIRENZ/LAMIVUDINE/TENOFOVIR
"FRV1",799.51,"61,0",4,"F")
;PSNDF(50.6,
"FRV1",799.51,"62,0",2)
VA HIV
"FRV1",799.51,"62,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"62,0",3)
Default (HIV)
"FRV1",799.51,"62,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"62,0",4)
LAMIVUDINE/TENOFOVIR
"FRV1",799.51,"62,0",4,"F")
;PSNDF(50.6,
"FRV1K",799.51,"60,0",3)
KEY
"FRV1K",799.51,"60,0",3,1)
Drug Group
"FRV1K",799.51,"60,0",3,2)
VA HIV
"FRV1K",799.51,"60,0",3,3)
99
"FRV1K",799.51,"61,0",3)
KEY
"FRV1K",799.51,"61,0",3,1)
Drug Group
"FRV1K",799.51,"61,0",3,2)
VA HIV
"FRV1K",799.51,"61,0",3,3)
99
"FRV1K",799.51,"62,0",3)
KEY
"FRV1K",799.51,"62,0",3,1)
Drug Group
"FRV1K",799.51,"62,0",3,2)
VA HIV
"FRV1K",799.51,"62,0",3,3)
99
"INI")
PRE^RORP033
"INIT")
POST^RORP033
"IX",798.1,798.1,"B",0)
798.1^B^Uniqueness Index for Key 'A' of File #798.1^R^^F^IR^I^798.1^^^^^LS
"IX",798.1,798.1,"B",1)
S ^ROR(798.1,"B",X,DA)=""
"IX",798.1,798.1,"B",2)
K ^ROR(798.1,"B",X,DA)
"IX",798.1,798.1,"B",2.5)
K ^ROR(798.1,"B")
"IX",798.1,798.1,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.1,"B",11.1,1,0)
1^F^798.1^.01^^1
"IX",798.1,798.11,"B",0)
798.11^B^Uniqueness Index for Key 'A' of Subfile #798.11^R^^F^IR^I^798.11^^^^^LS
"IX",798.1,798.11,"B",1)
S ^ROR(798.1,DA(1),3,"B",X,DA)=""
"IX",798.1,798.11,"B",2)
K ^ROR(798.1,DA(1),3,"B",X,DA)
"IX",798.1,798.11,"B",2.5)
K ^ROR(798.1,DA(1),3,"B")
"IX",798.1,798.11,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.11,"B",11.1,1,0)
1^F^798.11^.01^^1
"IX",798.1,798.118,"B",0)
798.118^B^Uniqueness Index for Key 'A' of Subfile #798.118^R^^F^IR^I^798.118^^^^^LS
"IX",798.1,798.118,"B",1)
S ^ROR(798.1,DA(1),18,"B",X,DA)=""
"IX",798.1,798.118,"B",2)
K ^ROR(798.1,DA(1),18,"B",X,DA)
"IX",798.1,798.118,"B",2.5)
K ^ROR(798.1,DA(1),18,"B")
"IX",798.1,798.118,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.118,"B",11.1,1,0)
1^F^798.118^.01^^1
"IX",798.1,798.122,"B",0)
798.122^B^Uniqueness Index for Key 'A' of Subfile #798.122^R^^F^IR^I^798.122^^^^^LS
"IX",798.1,798.122,"B",1)
S ^ROR(798.1,DA(1),22,"B",X,DA)=""
"IX",798.1,798.122,"B",2)
K ^ROR(798.1,DA(1),22,"B",X,DA)
"IX",798.1,798.122,"B",2.5)
K ^ROR(798.1,DA(1),22,"B")
"IX",798.1,798.122,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.122,"B",11.1,1,0)
1^F^798.122^.01^^1
"IX",798.1,798.128,"G",0)
798.128^G^Lab Group and Local Test Name^R^^R^IR^I^798.128^^^^^LS
"IX",798.1,798.128,"G",1)
S ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)=""
"IX",798.1,798.128,"G",2)
K ^ROR(798.1,DA(1),28,"G",X(1),X(2),DA)
"IX",798.1,798.128,"G",2.5)
K ^ROR(798.1,DA(1),28,"G")
"IX",798.1,798.128,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.128,"G",11.1,1,0)
1^F^798.128^.02^^1^F
"IX",798.1,798.128,"G",11.1,1,2)
 
"IX",798.1,798.128,"G",11.1,1,3)
 
"IX",798.1,798.128,"G",11.1,3,0)
2^F^798.128^.01^^2^F
"IX",798.1,798.128,"G",11.1,3,3)
 
"IX",798.1,798.129,"G",0)
798.129^G^Drug Group and Local Drug Name^R^^R^IR^I^798.129^^^^^LS
"IX",798.1,798.129,"G",1)
S ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)=""
"IX",798.1,798.129,"G",2)
K ^ROR(798.1,DA(1),29,"G",X(1),X(2),DA)
"IX",798.1,798.129,"G",2.5)
K ^ROR(798.1,DA(1),29,"G")
"IX",798.1,798.129,"G",11.1,0)
^.114IA^3^2
"IX",798.1,798.129,"G",11.1,1,0)
1^F^798.129^.02^^1^F
"IX",798.1,798.129,"G",11.1,1,3)
 
"IX",798.1,798.129,"G",11.1,3,0)
2^F^798.129^.01^^2^F
"IX",798.1,798.129,"G",11.1,3,3)
 
"IX",798.1,798.13,"B",0)
798.13^B^Uniqueness Index for Key 'A' of Subfile #798.13^R^^F^IR^I^798.13^^^^^LS
"IX",798.1,798.13,"B",1)
S ^ROR(798.1,DA(1),1,"B",X,DA)=""
"IX",798.1,798.13,"B",2)
K ^ROR(798.1,DA(1),1,"B",X,DA)
"IX",798.1,798.13,"B",2.5)
K ^ROR(798.1,DA(1),1,"B")
"IX",798.1,798.13,"B",11.1,0)
^.114IA^1^1
"IX",798.1,798.13,"B",11.1,1,0)
1^F^798.13^.01^^1
"IX",798.2,798.2,"B",0)
798.2^B^Uniqueness Index for the "A" Key of File #798.2^R^^F^IR^I^798.2^^^^^LS
"IX",798.2,798.2,"B",1)
S ^ROR(798.2,"B",X,DA)=""
"IX",798.2,798.2,"B",2)
K ^ROR(798.2,"B",X,DA)
"IX",798.2,798.2,"B",2.5)
K ^ROR(798.2,"B")
"IX",798.2,798.2,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.2,"B",11.1,1,0)
1^F^798.2^.01^^1
"IX",798.2,798.26,"B",0)
798.26^B^Uniqueness Index for the "A" Key of Subfile #798.26^R^^F^IR^I^798.26^^^^^LS
"IX",798.2,798.26,"B",1)
S ^ROR(798.2,DA(1),4,"B",X,DA)=""
"IX",798.2,798.26,"B",2)
K ^ROR(798.2,DA(1),4,"B",X,DA)
"IX",798.2,798.26,"B",2.5)
K ^ROR(798.2,DA(1),4,"B")
"IX",798.2,798.26,"B",11.1,0)
^.114IA^1^1
"IX",798.2,798.26,"B",11.1,1,0)
1^F^798.26^.01^^1
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"IX",799.51,799.51,"AMCH",0)
799.51^AMCH^Registry & Drug Group & Local Drug^MU^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"AMCH",.1,0)
^^3^3^3180131^^
"IX",799.51,799.51,"AMCH",.1,1,0)
This cross-reference creates the relation between ROR Registry, ROR
"IX",799.51,799.51,"AMCH",.1,2,0)
Generic Drug entry, and Local Drug and will be checked during 
"IX",799.51,799.51,"AMCH",.1,3,0)
collecting Patient Medication History report.
"IX",799.51,799.51,"AMCH",1)
D EN^RORUTL22(X(3))
"IX",799.51,799.51,"AMCH",2)
K ^ROR(799.51,"AMCH",X(2),X(3))
"IX",799.51,799.51,"AMCH",2.5)
K ^ROR(799.51,"AMCH")
"IX",799.51,799.51,"AMCH",11.1,0)
^.114IA^4^3
"IX",799.51,799.51,"AMCH",11.1,2,0)
2^C^^^^1
"IX",799.51,799.51,"AMCH",11.1,2,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"AMCH",11.1,3,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"AMCH",11.1,4,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",0)
799.51^ARDG^Registry & Drug Group^R^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"ARDG",.1,0)
^^3^3^3180117^
"IX",799.51,799.51,"ARDG",.1,1,0)
This cross-reference creates the relation between ROR Registry and 
"IX",799.51,799.51,"ARDG",.1,2,0)
ROR Generic entry and it's checked during Patient Medication History
"IX",799.51,799.51,"ARDG",.1,3,0)
report.
"IX",799.51,799.51,"ARDG",1)
S ^ROR(799.51,"ARDG",X(2),X(3),DA)=""
"IX",799.51,799.51,"ARDG",2)
K ^ROR(799.51,"ARDG",X(2),X(3),DA)
"IX",799.51,799.51,"ARDG",2.5)
K ^ROR(799.51,"ARDG")
"IX",799.51,799.51,"ARDG",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"ARDG",11.1,1,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",11.1,2,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"ARDG",11.1,3,0)
2^C^^^^1
"IX",799.51,799.51,"ARDG",11.1,3,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"KEY",0)
799.51^KEY^Registry, Drug Group, Generic Drug^R^^R^IR^I^799.51^^^^^LS
"IX",799.51,799.51,"KEY",1)
S ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.51,799.51,"KEY",2)
K ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)
"IX",799.51,799.51,"KEY",2.5)
K ^ROR(799.51,"KEY")
"IX",799.51,799.51,"KEY",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"KEY",11.1,1,0)
1^F^799.51^.02^^1
"IX",799.51,799.51,"KEY",11.1,2,0)
2^F^799.51^.03^^2
"IX",799.51,799.51,"KEY",11.1,3,0)
3^F^799.51^.04^^3
"KEY",798.1,798.1,"A",0)
798.1^A^S^201
"KEY",798.1,798.1,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.1,"A",2,1,0)
.01^798.1^1
"KEY",798.1,798.11,"A",0)
798.11^A^S^209
"KEY",798.1,798.11,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.11,"A",2,1,0)
.01^798.11^1
"KEY",798.1,798.118,"A",0)
798.118^A^S^210
"KEY",798.1,798.118,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.118,"A",2,1,0)
.01^798.118^1
"KEY",798.1,798.122,"A",0)
798.122^A^S^747
"KEY",798.1,798.122,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.122,"A",2,1,0)
.01^798.122^1
"KEY",798.1,798.128,"G",0)
798.128^G^P^203
"KEY",798.1,798.128,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.128,"G",2,1,0)
.02^798.128^1
"KEY",798.1,798.128,"G",2,2,0)
.01^798.128^2
"KEY",798.1,798.129,"G",0)
798.129^G^P^207
"KEY",798.1,798.129,"G",2,0)
^.312IA^2^2
"KEY",798.1,798.129,"G",2,1,0)
.02^798.129^1
"KEY",798.1,798.129,"G",2,2,0)
.01^798.129^2
"KEY",798.1,798.13,"A",0)
798.13^A^S^202
"KEY",798.1,798.13,"A",2,0)
^.312IA^1^1
"KEY",798.1,798.13,"A",2,1,0)
.01^798.13^1
"KEY",798.2,798.2,"A",0)
798.2^A^S^204
"KEY",798.2,798.2,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.2,"A",2,1,0)
.01^798.2^1
"KEY",798.2,798.26,"A",0)
798.26^A^S^205
"KEY",798.2,798.26,"A",2,0)
^.312IA^1^1
"KEY",798.2,798.26,"A",2,1,0)
.01^798.26^1
"KEY",799.31,799.31,"A",0)
799.31^A^S^748
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEY",799.51,799.51,"A",0)
799.51^A^S^750
"KEY",799.51,799.51,"A",2,0)
^.312IA^3^3
"KEY",799.51,799.51,"A",2,1,0)
.02^799.51^1
"KEY",799.51,799.51,"A",2,2,0)
.03^799.51^2
"KEY",799.51,799.51,"A",2,3,0)
.04^799.51^3
"KEYPTR",798.1,798.1,"A")
798.1^B
"KEYPTR",798.1,798.11,"A")
798.11^B
"KEYPTR",798.1,798.118,"A")
798.118^B
"KEYPTR",798.1,798.122,"A")
798.122^B
"KEYPTR",798.1,798.128,"G")
798.128^G
"KEYPTR",798.1,798.129,"G")
798.129^G
"KEYPTR",798.1,798.13,"A")
798.13^B
"KEYPTR",798.2,798.2,"A")
798.2^B
"KEYPTR",798.2,798.26,"A")
798.26^B
"KEYPTR",799.31,799.31,"A")
799.31^B
"KEYPTR",799.51,799.51,"A")
799.51^KEY
"KRN",.84,7980000.018,-1)
0^17
"KRN",.84,7980000.018,0)
7980000.018^2^^CLINICAL CASE REGISTRIES^Report options
"KRN",.84,7980000.018,2,0)
^.844^112^112^3180727^^
"KRN",.84,7980000.018,2,1,0)
AGGR_GENERIC
"KRN",.84,7980000.018,2,2,0)
        Aggregate by Generic Names
"KRN",.84,7980000.018,2,3,0)
 
"KRN",.84,7980000.018,2,4,0)
AGGR_FORMUL,AGGR_FORCED
"KRN",.84,7980000.018,2,5,0)
        Aggregate by Individual Formulations
"KRN",.84,7980000.018,2,6,0)
 
"KRN",.84,7980000.018,2,7,0)
        Aggregate by Individual Formulations (enforced because of investigational medications)
"KRN",.84,7980000.018,2,8,0)
 
"KRN",.84,7980000.018,2,9,0)
BASIC,COMPLEX
"KRN",.84,7980000.018,2,10,0)
        Basic Care
"KRN",.84,7980000.018,2,11,0)
        Complex Care
"KRN",.84,7980000.018,2,12,0)
        Both Basic and Complex Care
"KRN",.84,7980000.018,2,13,0)
 
"KRN",.84,7980000.018,2,14,0)
CAREONLY
"KRN",.84,7980000.018,2,15,0)
        Treated only
"KRN",.84,7980000.018,2,16,0)
 
"KRN",.84,7980000.018,2,17,0)
COMPLETE
"KRN",.84,7980000.018,2,18,0)
        Complete Report
"KRN",.84,7980000.018,2,19,0)
 
"KRN",.84,7980000.018,2,20,0)
CONFIRMED,PENDING,CONFIRM_AFTER
"KRN",.84,7980000.018,2,21,0)
        Confirmed
"KRN",.84,7980000.018,2,22,0)
        Pending
"KRN",.84,7980000.018,2,23,0)
        Both Confirmed and Pending
"KRN",.84,7980000.018,2,24,0)
        Only confirmed after
"KRN",.84,7980000.018,2,25,0)
 
"KRN",.84,7980000.018,2,26,0)
NAIVE,EXP
"KRN",.84,7980000.018,2,27,0)
        Naive
"KRN",.84,7980000.018,2,28,0)
        Experienced
"KRN",.84,7980000.018,2,29,0)
        Both Naive and Experienced
"KRN",.84,7980000.018,2,30,0)
 
"KRN",.84,7980000.018,2,31,0)
DE_BEFORE,DE_DURING,DE_AFTER
"KRN",.84,7980000.018,2,32,0)
        Added before the date range
"KRN",.84,7980000.018,2,33,0)
        Added during the date range
"KRN",.84,7980000.018,2,34,0)
        Added before and during the date range
"KRN",.84,7980000.018,2,35,0)
        Added after the date range
"KRN",.84,7980000.018,2,36,0)
        Added before and after the date range 
"KRN",.84,7980000.018,2,37,0)
        Added during and after the date range
"KRN",.84,7980000.018,2,38,0)
        Added on any date
"KRN",.84,7980000.018,2,39,0)
 
"KRN",.84,7980000.018,2,40,0)
GENERIC,FORMULATIONS
"KRN",.84,7980000.018,2,41,0)
        Generic Medications
"KRN",.84,7980000.018,2,42,0)
        Individual Formulations
"KRN",.84,7980000.018,2,43,0)
        Generic Medications and Individual Formulations
"KRN",.84,7980000.018,2,44,0)
 
"KRN",.84,7980000.018,2,45,0)
HEPAVAC
"KRN",.84,7980000.018,2,46,0)
                                Hepatitis A vaccination
"KRN",.84,7980000.018,2,47,0)
 
"KRN",.84,7980000.018,2,48,0)
HEPBVAC
"KRN",.84,7980000.018,2,49,0)
                                Hepatitis B vaccination
"KRN",.84,7980000.018,2,50,0)
 
"KRN",.84,7980000.018,2,51,0)
NOHEPAVAC
"KRN",.84,7980000.018,2,52,0)
                                No Hepatitis A vaccination
"KRN",.84,7980000.018,2,53,0)
 
"KRN",.84,7980000.018,2,54,0)
NOHEPBVAC
"KRN",.84,7980000.018,2,55,0)
                                No Hepatitis B vaccination
"KRN",.84,7980000.018,2,56,0)
 
"KRN",.84,7980000.018,2,57,0)
HEPAIMM
"KRN",.84,7980000.018,2,58,0)
                                Hepatitis A immunity
"KRN",.84,7980000.018,2,59,0)
 
"KRN",.84,7980000.018,2,60,0)
HEPBIMM
"KRN",.84,7980000.018,2,61,0)
                                Hepatitis B immunity
"KRN",.84,7980000.018,2,62,0)
 
"KRN",.84,7980000.018,2,63,0)
NOHEPAIMM
"KRN",.84,7980000.018,2,64,0)
                                No Hepatitis A immunity
"KRN",.84,7980000.018,2,65,0)
 
"KRN",.84,7980000.018,2,66,0)
NOHEPBIMM
"KRN",.84,7980000.018,2,67,0)
                                No Hepatitis B immunity
"KRN",.84,7980000.018,2,68,0)
 
"KRN",.84,7980000.018,2,69,0)
INPATIENT,OUTPATIENT
"KRN",.84,7980000.018,2,70,0)
        Inpatient
"KRN",.84,7980000.018,2,71,0)
        Outpatient
"KRN",.84,7980000.018,2,72,0)
        Both Inpatients and Outpatients
"KRN",.84,7980000.018,2,73,0)
 
"KRN",.84,7980000.018,2,74,0)
LAB
"KRN",.84,7980000.018,2,75,0)
        Selected lab tests were performed
"KRN",.84,7980000.018,2,76,0)
 
"KRN",.84,7980000.018,2,77,0)
NOLAB
"KRN",.84,7980000.018,2,78,0)
        No selected lab tests were performed
"KRN",.84,7980000.018,2,79,0)
 
"KRN",.84,7980000.018,2,80,0)
NOPHARM
"KRN",.84,7980000.018,2,81,0)
        Did not receive selected medication(s)
"KRN",.84,7980000.018,2,82,0)
 
"KRN",.84,7980000.018,2,83,0)
NOTSEEN,SEEN
"KRN",.84,7980000.018,2,84,0)
        Not Seen
"KRN",.84,7980000.018,2,85,0)
        Seen
"KRN",.84,7980000.018,2,86,0)
        Both Seen and Not Seen
"KRN",.84,7980000.018,2,87,0)
 
"KRN",.84,7980000.018,2,88,0)
PHARM
"KRN",.84,7980000.018,2,89,0)
        Received selected medication(s)
"KRN",.84,7980000.018,2,90,0)
 
"KRN",.84,7980000.018,2,91,0)
PROC
"KRN",.84,7980000.018,2,92,0)
        Selected procedures were performed
"KRN",.84,7980000.018,2,93,0)
 
"KRN",.84,7980000.018,2,94,0)
NOPROC
"KRN",.84,7980000.018,2,95,0)
        No selected procedures were performed
"KRN",.84,7980000.018,2,96,0)
 
"KRN",.84,7980000.018,2,97,0)
PTLIST
"KRN",.84,7980000.018,2,98,0)
        List of Patients
"KRN",.84,7980000.018,2,99,0)
 
"KRN",.84,7980000.018,2,100,0)
REGMEDS,INVESTIG
"KRN",.84,7980000.018,2,101,0)
        Registry Medications
"KRN",.84,7980000.018,2,102,0)
        Investigational Medications
"KRN",.84,7980000.018,2,103,0)
        Registry and Investigational Medications
"KRN",.84,7980000.018,2,104,0)
 
"KRN",.84,7980000.018,2,105,0)
REGMEDSMRY
"KRN",.84,7980000.018,2,106,0)
        Summary Registry Meds Usage Table
"KRN",.84,7980000.018,2,107,0)
 
"KRN",.84,7980000.018,2,108,0)
SUMMARY
"KRN",.84,7980000.018,2,109,0)
        Summary
"KRN",.84,7980000.018,2,110,0)
 
"KRN",.84,7980000.018,2,111,0)
FUT_APPT
"KRN",.84,7980000.018,2,112,0)
        Only appts in the next XXX days
"KRN",.84,7980000.018,5,0)
^.841A^1^1
"KRN",.84,7980000.018,5,1,0)
RORXU002^OPTXT
"KRN",.84,7980000.018,5,"B","RORXU002",1)

"KRN",.84,7981010.001,-1)
0^4
"KRN",.84,7981010.001,0)
7981010.001^2^^CLINICAL CASE REGISTRIES^Registry Lab Tests by Range (HTML)
"KRN",.84,7981010.001,2,0)
^^106^106^3180411^
"KRN",.84,7981010.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981010.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981010.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981010.001,2,4,0)
 
"KRN",.84,7981010.001,2,5,0)
<xsl:import  href="template://report/998/1"/> <!-- Styles   -->
"KRN",.84,7981010.001,2,6,0)
<xsl:import  href="template://report/999/1"/> <!-- Common   -->
"KRN",.84,7981010.001,2,7,0)
<xsl:include href="template://report/997/1"/> <!-- Patients -->
"KRN",.84,7981010.001,2,8,0)
<xsl:include href="template://report/995/1"/> <!-- Lab Data -->
"KRN",.84,7981010.001,2,9,0)
 
"KRN",.84,7981010.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981010.001,2,11,0)
<html>
"KRN",.84,7981010.001,2,12,0)
  <head>
"KRN",.84,7981010.001,2,13,0)
   <title>Registry Lab Tests by Range</title>
"KRN",.84,7981010.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981010.001,2,15,0)
  </head>
"KRN",.84,7981010.001,2,16,0)
  <body>
"KRN",.84,7981010.001,2,17,0)
  <h1>Registry Lab Tests by Range</h1>
"KRN",.84,7981010.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981010.001,2,19,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981010.001,2,20,0)
  </body>
"KRN",.84,7981010.001,2,21,0)
</html>
"KRN",.84,7981010.001,2,22,0)
</xsl:template>
"KRN",.84,7981010.001,2,23,0)
 
"KRN",.84,7981010.001,2,24,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981010.001,2,25,0)
<!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981010.001,2,26,0)
<div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981010.001,2,27,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981010.001,2,28,0)
<div>
"KRN",.84,7981010.001,2,29,0)
  <xsl:call-template name="DataGrid">
"KRN",.84,7981010.001,2,30,0)
   <xsl:with-param name="scroll" select="descendant::LT[31]"/>
"KRN",.84,7981010.001,2,31,0)
  </xsl:call-template>
"KRN",.84,7981010.001,2,32,0)
</div>
"KRN",.84,7981010.001,2,33,0)
</xsl:template>
"KRN",.84,7981010.001,2,34,0)
 
"KRN",.84,7981010.001,2,35,0)
<!--[ TABLE HEADER ]-->
"KRN",.84,7981010.001,2,36,0)
 
"KRN",.84,7981010.001,2,37,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981010.001,2,38,0)
<xsl:variable name="PTLRL" select="../COLUMN[@NAME='PTLRL']"/>
"KRN",.84,7981010.001,2,39,0)
<thead>
"KRN",.84,7981010.001,2,40,0)
  <tr>
"KRN",.84,7981010.001,2,41,0)
   <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981010.001,2,42,0)
    <xsl:with-param name="rowspan" select="2"/>
"KRN",.84,7981010.001,2,43,0)
    <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981010.001,2,44,0)
    <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981010.001,2,45,0)
    <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981010.001,2,46,0)
    <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981010.001,2,47,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,48,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981010.001,2,49,0)
    <xsl:with-param name="column" select="$PTLRL"/>
"KRN",.84,7981010.001,2,50,0)
    <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981010.001,2,51,0)
    <xsl:with-param name="title" select="'Laboratory 
"KRN",.84,7981010.001,2,52,0)
Tests'"/>                                  
"KRN",.84,7981010.001,2,53,0)
    <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981010.001,2,54,0)
    <xsl:with-param name="width" select="'60%'"/>
"KRN",.84,7981010.001,2,55,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,56,0)
  </tr>
"KRN",.84,7981010.001,2,57,0)
  <tr>
"KRN",.84,7981010.001,2,58,0)
   <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981010.001,2,59,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,60,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,61,0)
  </tr>
"KRN",.84,7981010.001,2,62,0)
</thead>
"KRN",.84,7981010.001,2,63,0)
</xsl:template>
"KRN",.84,7981010.001,2,64,0)
 
"KRN",.84,7981010.001,2,65,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981010.001,2,66,0)
 
"KRN",.84,7981010.001,2,67,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981010.001,2,68,0)
<xsl:variable name="rowspan" select="count(PTLRL/LT)"/>
"KRN",.84,7981010.001,2,69,0)
<tr>
"KRN",.84,7981010.001,2,70,0)
  <xsl:call-template name="BasicPatientData">
"KRN",.84,7981010.001,2,71,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981010.001,2,72,0)
   <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981010.001,2,73,0)
   <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981010.001,2,74,0)
   <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981010.001,2,75,0)
   <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981010.001,2,76,0)
  </xsl:call-template>
"KRN",.84,7981010.001,2,77,0)
  <xsl:for-each select="PTLRL/LT[1]">
"KRN",.84,7981010.001,2,78,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981010.001,2,79,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,80,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,81,0)
  </xsl:for-each>
"KRN",.84,7981010.001,2,82,0)
</tr>
"KRN",.84,7981010.001,2,83,0)
<xsl:for-each select="PTLRL/LT[position()>1]">
"KRN",.84,7981010.001,2,84,0)
  <tr>
"KRN",.84,7981010.001,2,85,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981010.001,2,86,0)
    <xsl:with-param name="group" select="1"/>
"KRN",.84,7981010.001,2,87,0)
   </xsl:call-template>
"KRN",.84,7981010.001,2,88,0)
  </tr>
"KRN",.84,7981010.001,2,89,0)
</xsl:for-each>
"KRN",.84,7981010.001,2,90,0)
</xsl:template>
"KRN",.84,7981010.001,2,91,0)
 
"KRN",.84,7981010.001,2,92,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981010.001,2,93,0)
<!-- 
"KRN",.84,7981010.001,2,94,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981010.001,2,95,0)
<tr>
"KRN",.84,7981010.001,2,96,0)
  <th scope="row">Lab Results:&#160;</th>
"KRN",.84,7981010.001,2,97,0)
  <td>
"KRN",.84,7981010.001,2,98,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981010.001,2,99,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981010.001,2,100,0)
   </xsl:for-each>
"KRN",.84,7981010.001,2,101,0)
  </td>
"KRN",.84,7981010.001,2,102,0)
</tr>
"KRN",.84,7981010.001,2,103,0)
</xsl:template>
"KRN",.84,7981010.001,2,104,0)
--> 
"KRN",.84,7981010.001,2,105,0)
 
"KRN",.84,7981010.001,2,106,0)
</xsl:stylesheet>
"KRN",.84,7981010.002,-1)
0^5
"KRN",.84,7981010.002,0)
7981010.002^2^^CLINICAL CASE REGISTRIES^Registry Lab Tests by Range (CSV)
"KRN",.84,7981010.002,2,0)
^^94^94^3180411^
"KRN",.84,7981010.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981010.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981010.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981010.002,2,4,0)
 
"KRN",.84,7981010.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981010.002,2,6,0)
 
"KRN",.84,7981010.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981010.002,2,8,0)
  <xsl:text>Registry Lab Tests by Range</xsl:text>
"KRN",.84,7981010.002,2,9,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981010.002,2,10,0)
</xsl:template>
"KRN",.84,7981010.002,2,11,0)
 
"KRN",.84,7981010.002,2,12,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981010.002,2,13,0)
<xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981010.002,2,14,0)
<xsl:variable name="ssn"  select="LAST4"/>
"KRN",.84,7981010.002,2,15,0)
<xsl:variable name="age"  select="AGE"/>
"KRN",.84,7981010.002,2,16,0)
<xsl:variable name="dob"  select="DOB"/>
"KRN",.84,7981010.002,2,17,0)
<xsl:variable name="dod"  select="DOD"/>
"KRN",.84,7981010.002,2,18,0)
<xsl:variable name="icn"  select="ICN"/>
"KRN",.84,7981010.002,2,19,0)
<xsl:variable name="pact" select="PACT"/>
"KRN",.84,7981010.002,2,20,0)
<xsl:variable name="pcp"  select="PCP"/>
"KRN",.84,7981010.002,2,21,0)
<xsl:variable name="appt" select="FUT_APPT"/>
"KRN",.84,7981010.002,2,22,0)
<xsl:for-each select="PTLRL/LT">
"KRN",.84,7981010.002,2,23,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,24,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981010.002,2,25,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,26,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,27,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981010.002,2,28,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,29,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981010.002,2,30,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,31,0)
    <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981010.002,2,32,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,33,0)
  </xsl:if>
"KRN",.84,7981010.002,2,34,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981010.002,2,35,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,36,0)
    <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981010.002,2,37,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981010.002,2,38,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,39,0)
  </xsl:if>
"KRN",.84,7981010.002,2,40,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,41,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981010.002,2,42,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981010.002,2,43,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,44,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981010.002,2,45,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,46,0)
    <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981010.002,2,47,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,48,0)
  </xsl:if>
"KRN",.84,7981010.002,2,49,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981010.002,2,50,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,51,0)
    <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981010.002,2,52,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,53,0)
  </xsl:if>
"KRN",.84,7981010.002,2,54,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981010.002,2,55,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,56,0)
    <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981010.002,2,57,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,58,0)
  </xsl:if>
"KRN",.84,7981010.002,2,59,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981010.002,2,60,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,61,0)
    <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981010.002,2,62,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981010.002,2,63,0)
   </xsl:call-template>
"KRN",.84,7981010.002,2,64,0)
  </xsl:if>
"KRN",.84,7981010.002,2,65,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,66,0)
   <xsl:with-param name="value" select="GROUP"/>
"KRN",.84,7981010.002,2,67,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,68,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,69,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981010.002,2,70,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981010.002,2,71,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,72,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,73,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981010.002,2,74,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,75,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981010.002,2,76,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981010.002,2,77,0)
  </xsl:call-template>
"KRN",.84,7981010.002,2,78,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981010.002,2,79,0)
</xsl:for-each>
"KRN",.84,7981010.002,2,80,0)
</xsl:template>
"KRN",.84,7981010.002,2,81,0)
 
"KRN",.84,7981010.002,2,82,0)
<xsl:template match="COLUMN[@NAME='GROUP']">
"KRN",.84,7981010.002,2,83,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981010.002,2,84,0)
  <xsl:with-param name="title" select="'Group'"/>
"KRN",.84,7981010.002,2,85,0)
</xsl:call-template>
"KRN",.84,7981010.002,2,86,0)
</xsl:template>
"KRN",.84,7981010.002,2,87,0)
 
"KRN",.84,7981010.002,2,88,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981010.002,2,89,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981010.002,2,90,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981010.002,2,91,0)
</xsl:call-template>
"KRN",.84,7981010.002,2,92,0)
</xsl:template>
"KRN",.84,7981010.002,2,93,0)
 
"KRN",.84,7981010.002,2,94,0)
</xsl:stylesheet>
"KRN",.84,7981012.001,-1)
0^7
"KRN",.84,7981012.001,0)
7981012.001^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (HTML)
"KRN",.84,7981012.001,2,0)
^^501^501^3180425^
"KRN",.84,7981012.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981012.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981012.001,2,4,0)
 
"KRN",.84,7981012.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981012.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981012.001,2,7,0)
<xsl:import  href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981012.001,2,8,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981012.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981012.001,2,10,0)
 
"KRN",.84,7981012.001,2,11,0)
<xsl:key name="patient-drug" match="/REPORT/DRUGS/DRUG"  use="@ID"/>
"KRN",.84,7981012.001,2,12,0)
<xsl:key name="patient-lt"   match="/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,13,0)
<xsl:key name="patient-both" 
"KRN",.84,7981012.001,2,14,0)
match="/REPORT/DRUGS/DRUG|/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981012.001,2,15,0)
 
"KRN",.84,7981012.001,2,16,0)
<!-- Determine if the Meds and/or Labs table is not empty. -->
"KRN",.84,7981012.001,2,17,0)
<xsl:variable name="D1" select="/REPORT/DRUGS/DRUG[1]"/>
"KRN",.84,7981012.001,2,18,0)
<xsl:variable name="L1" select="/REPORT/LABTESTS/LT[1]"/>
"KRN",.84,7981012.001,2,19,0)
 
"KRN",.84,7981012.001,2,20,0)
<!-- Determine if the Meds and/or Labs table is sorted by a patient data 
"KRN",.84,7981012.001,2,21,0)
field. -->
"KRN",.84,7981012.001,2,22,0)
<xsl:variable name="PTCOLS"   
"KRN",.84,7981012.001,2,23,0)
select="',AGE,DOB,DOD,FUT_APPT,ICN,LAST4,NAME,PACT,PCP,'"/>
"KRN",.84,7981012.001,2,24,0)
<xsl:variable name="PTSDRUGS" 
"KRN",.84,7981012.001,2,25,0)
select="contains($PTCOLS,concat(',',/REPORT/DRUGS/@SORT,','))"/>
"KRN",.84,7981012.001,2,26,0)
<xsl:variable name="PTSLABS"  
"KRN",.84,7981012.001,2,27,0)
select="contains($PTCOLS,concat(',',/REPORT/LABTESTS/@SORT,','))"/>
"KRN",.84,7981012.001,2,28,0)
 
"KRN",.84,7981012.001,2,29,0)
<xsl:template match="/">
"KRN",.84,7981012.001,2,30,0)
<html>
"KRN",.84,7981012.001,2,31,0)
  <head>
"KRN",.84,7981012.001,2,32,0)
   <title>Combined Meds and Labs Report</title>
"KRN",.84,7981012.001,2,33,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981012.001,2,34,0)
  </head>
"KRN",.84,7981012.001,2,35,0)
  <body>
"KRN",.84,7981012.001,2,36,0)
   <h1>Combined Meds and Labs Report</h1>
"KRN",.84,7981012.001,2,37,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981012.001,2,38,0)
   <xsl:choose>
"KRN",.84,7981012.001,2,39,0)
    <!-- 
"KRN",.84,7981012.001,2,40,0)
     If both Meds and Labs tables are not empty and at least one of them
"KRN",.84,7981012.001,2,41,0)
     is sorted by patient data field, then group the data by patients.
"KRN",.84,7981012.001,2,42,0)
    -->
"KRN",.84,7981012.001,2,43,0)
    <xsl:when test="$D1 and $L1 and ($PTSDRUGS or $PTSLABS)">
"KRN",.84,7981012.001,2,44,0)
     <xsl:call-template name="MedsAndLabs"/>
"KRN",.84,7981012.001,2,45,0)
    </xsl:when>
"KRN",.84,7981012.001,2,46,0)
    <!-- 
"KRN",.84,7981012.001,2,47,0)
     Otherwise, format available data using separate tables.
"KRN",.84,7981012.001,2,48,0)
    -->
"KRN",.84,7981012.001,2,49,0)
    <xsl:when test="$D1 or $L1 or /REPORT/PATIENTS/PATIENT[1]">
"KRN",.84,7981012.001,2,50,0)
     <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981012.001,2,51,0)
     <xsl:apply-templates select="/REPORT/LABTESTS"/>
"KRN",.84,7981012.001,2,52,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981012.001,2,53,0)
    </xsl:when>
"KRN",.84,7981012.001,2,54,0)
    <xsl:otherwise>
"KRN",.84,7981012.001,2,55,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,56,0)
    </xsl:otherwise>
"KRN",.84,7981012.001,2,57,0)
   </xsl:choose>
"KRN",.84,7981012.001,2,58,0)
  </body>
"KRN",.84,7981012.001,2,59,0)
</html>
"KRN",.84,7981012.001,2,60,0)
</xsl:template>
"KRN",.84,7981012.001,2,61,0)
 
"KRN",.84,7981012.001,2,62,0)
<xsl:template name="MedsAndLabs">
"KRN",.84,7981012.001,2,63,0)
<xsl:variable name="SORT">
"KRN",.84,7981012.001,2,64,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,65,0)
   <xsl:when test="$PTSDRUGS"><xsl:value-of 
"KRN",.84,7981012.001,2,66,0)
select="/REPORT/DRUGS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,67,0)
   <xsl:when test="$PTSLABS"><xsl:value-of 
"KRN",.84,7981012.001,2,68,0)
select="/REPORT/LABTESTS/@SORT"/></xsl:when>
"KRN",.84,7981012.001,2,69,0)
   <xsl:otherwise>NAME</xsl:otherwise>
"KRN",.84,7981012.001,2,70,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,71,0)
</xsl:variable>
"KRN",.84,7981012.001,2,72,0)
<xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,73,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,74,0)
   <xsl:when test="($PTSDRUGS and boolean(/REPORT/DRUGS/@SORTDESC)) or 
"KRN",.84,7981012.001,2,75,0)
    ($PTSLABS and 
"KRN",.84,7981012.001,2,76,0)
boolean(/REPORT/LABTESTS/@SORTDESC))">descending</xsl:when>
"KRN",.84,7981012.001,2,77,0)
   <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,78,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,79,0)
</xsl:variable>
"KRN",.84,7981012.001,2,80,0)
<xsl:for-each 
"KRN",.84,7981012.001,2,81,0)
select="/REPORT//*[generate-id(.)=generate-id(key('patient-both',@ID))]">
"KRN",.84,7981012.001,2,82,0)
  <!--
"KRN",.84,7981012.001,2,83,0)
  <xsl:sort select="concat(*[name()=$SORT],' ')" order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,84,0)
  <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,85,0)
  -->
"KRN",.84,7981012.001,2,86,0)
  <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981012.001,2,87,0)
order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,88,0)
  <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981012.001,2,89,0)
  <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981012.001,2,90,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981012.001,2,91,0)
  <div>
"KRN",.84,7981012.001,2,92,0)
   <table style="width:100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,93,0)
    <thead>
"KRN",.84,7981012.001,2,94,0)
     <tr>
"KRN",.84,7981012.001,2,95,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,96,0)
       <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981012.001,2,97,0)
       <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981012.001,2,98,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981012.001,2,99,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,100,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,101,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,102,0)
select="'DRUGS=NAME&amp;LABTESTS=NAME'"/>
"KRN",.84,7981012.001,2,103,0)
       <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981012.001,2,104,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,105,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,106,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,107,0)
select="'DRUGS=LAST4&amp;LABTESTS=LAST4'"/>
"KRN",.84,7981012.001,2,108,0)
       <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981012.001,2,109,0)
       <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981012.001,2,110,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,111,0)
      <xsl:if test="$AGE_YES">
"KRN",.84,7981012.001,2,112,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,113,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,114,0)
select="'DRUGS=AGE&amp;LABTESTS=AGE'"/>
"KRN",.84,7981012.001,2,115,0)
        <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981012.001,2,116,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981012.001,2,117,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,118,0)
      </xsl:if>
"KRN",.84,7981012.001,2,119,0)
      <xsl:if test="$DOB_YES">
"KRN",.84,7981012.001,2,120,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,121,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,122,0)
select="'DRUGS=DOB&amp;LABTESTS=DOB'"/>
"KRN",.84,7981012.001,2,123,0)
        <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981012.001,2,124,0)
        <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981012.001,2,125,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,126,0)
      </xsl:if>
"KRN",.84,7981012.001,2,127,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,128,0)
       <xsl:with-param name="sort" select="'DRUGS=DOD&amp;LABTESTS=DOD'"/>
"KRN",.84,7981012.001,2,129,0)
      <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981012.001,2,130,0)
       <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981012.001,2,131,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,132,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981012.001,2,133,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,134,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,135,0)
select="'DRUGS=ICN&amp;LABTESTS=ICN'"/>
"KRN",.84,7981012.001,2,136,0)
        <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981012.001,2,137,0)
        <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981012.001,2,138,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,139,0)
      </xsl:if>
"KRN",.84,7981012.001,2,140,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981012.001,2,141,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,142,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,143,0)
select="'DRUGS=PACT&amp;LABTESTS=PACT'"/>
"KRN",.84,7981012.001,2,144,0)
       <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981012.001,2,145,0)
        <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981012.001,2,146,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,147,0)
      </xsl:if>
"KRN",.84,7981012.001,2,148,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981012.001,2,149,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,150,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,151,0)
select="'DRUGS=PCP&amp;LABTESTS=PCP'"/>
"KRN",.84,7981012.001,2,152,0)
        <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981012.001,2,153,0)
        <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981012.001,2,154,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,155,0)
      </xsl:if>
"KRN",.84,7981012.001,2,156,0)
      <xsl:if test="$APPT_YES">
"KRN",.84,7981012.001,2,157,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,158,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,159,0)
select="'DRUGS=FUT_APPT&amp;LABTESTS=FUT_APPT'"/>
"KRN",.84,7981012.001,2,160,0)
        <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981012.001,2,161,0)
        <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981012.001,2,162,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,163,0)
      </xsl:if>
"KRN",.84,7981012.001,2,164,0)
     </tr>
"KRN",.84,7981012.001,2,165,0)
    </thead>
"KRN",.84,7981012.001,2,166,0)
    <tr>
"KRN",.84,7981012.001,2,167,0)
     <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,168,0)
      <xsl:with-param name="seqnum"  select="1"/>
"KRN",.84,7981012.001,2,169,0)
      <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,170,0)
      <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,171,0)
      <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,172,0)
      <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,173,0)
      <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,174,0)
      <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,175,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,176,0)
    </tr>
"KRN",.84,7981012.001,2,177,0)
   </table>
"KRN",.84,7981012.001,2,178,0)
   <br/>
"KRN",.84,7981012.001,2,179,0)
   <table cellpadding="5" cellspacing="0" style="float:left;width:43%;">
"KRN",.84,7981012.001,2,180,0)
    <thead>
"KRN",.84,7981012.001,2,181,0)
     <tr>
"KRN",.84,7981012.001,2,182,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,183,0)
       <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,184,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,185,0)
select="'DRUGS=RXNAME:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981012.001,2,186,0)
       <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,187,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,188,0)
     </tr>
"KRN",.84,7981012.001,2,189,0)
    </thead>
"KRN",.84,7981012.001,2,190,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,191,0)
     <xsl:with-param name="colspan" select="15"/>    <!-- Make bigger 
"KRN",.84,7981012.001,2,192,0)
than number of columns -->
"KRN",.84,7981012.001,2,193,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,194,0)
    <tbody>
"KRN",.84,7981012.001,2,195,0)
    <xsl:for-each select="key('patient-drug',@ID)">
"KRN",.84,7981012.001,2,196,0)
      <xsl:sort select="RXNAME"/>
"KRN",.84,7981012.001,2,197,0)
      <tr><xsl:call-template name="DrugData"/></tr>
"KRN",.84,7981012.001,2,198,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,199,0)
    </tbody>
"KRN",.84,7981012.001,2,200,0)
   </table>
"KRN",.84,7981012.001,2,201,0)
   <table cellpadding="5" cellspacing="0" style="float:right;width:55%;">
"KRN",.84,7981012.001,2,202,0)
    <thead>
"KRN",.84,7981012.001,2,203,0)
     <tr>
"KRN",.84,7981012.001,2,204,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,205,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,206,0)
select="'LABTESTS=DATE:DESC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,207,0)
       <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981012.001,2,208,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,209,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,210,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,211,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,212,0)
select="'LABTESTS=LTNAME:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,213,0)
       <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981012.001,2,214,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,215,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,216,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981012.001,2,217,0)
select="'LABTESTS=RESULT:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981012.001,2,218,0)
       <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981012.001,2,219,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981012.001,2,220,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,221,0)
     </tr>
"KRN",.84,7981012.001,2,222,0)
    </thead>
"KRN",.84,7981012.001,2,223,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,224,0)
     <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981012.001,2,225,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,226,0)
    <tbody>
"KRN",.84,7981012.001,2,227,0)
     <xsl:for-each select="key('patient-lt',@ID)">
"KRN",.84,7981012.001,2,228,0)
      <!--
"KRN",.84,7981012.001,2,229,0)
      <xsl:sort select="LTNAME"/>
"KRN",.84,7981012.001,2,230,0)
      <xsl:sort select="DATE" data-type="number"/>
"KRN",.84,7981012.001,2,231,0)
      -->
"KRN",.84,7981012.001,2,232,0)
      <xsl:sort select="concat(LTNAME,'&#10;',DATE)"/>
"KRN",.84,7981012.001,2,233,0)
      <tr>
"KRN",.84,7981012.001,2,234,0)
       <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,235,0)
        <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,236,0)
       </xsl:call-template>
"KRN",.84,7981012.001,2,237,0)
     </tr>
"KRN",.84,7981012.001,2,238,0)
     </xsl:for-each>
"KRN",.84,7981012.001,2,239,0)
    </tbody>
"KRN",.84,7981012.001,2,240,0)
   </table>
"KRN",.84,7981012.001,2,241,0)
   <br clear="all"/><br/>
"KRN",.84,7981012.001,2,242,0)
  </div>
"KRN",.84,7981012.001,2,243,0)
</xsl:for-each>
"KRN",.84,7981012.001,2,244,0)
</xsl:template>
"KRN",.84,7981012.001,2,245,0)
 
"KRN",.84,7981012.001,2,246,0)
<!--[ TABLES ]-->
"KRN",.84,7981012.001,2,247,0)
 
"KRN",.84,7981012.001,2,248,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.001,2,249,0)
<div style="page-break-before:always">
"KRN",.84,7981012.001,2,250,0)
  <h2>Medications</h2>
"KRN",.84,7981012.001,2,251,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,252,0)
   <xsl:when test="$D1">
"KRN",.84,7981012.001,2,253,0)
    <xsl:variable name="SORT" select="/REPORT/DRUGS/@SORT"/>
"KRN",.84,7981012.001,2,254,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,255,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,256,0)
      <xsl:when test="/REPORT/DRUGS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,257,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,258,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,259,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,260,0)
    <div>
"KRN",.84,7981012.001,2,261,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,262,0)
      <xsl:with-param name="condition" select="DRUG[31]"/>
"KRN",.84,7981012.001,2,263,0)
     </xsl:call-template>
"KRN",.84,7981012.001,2,264,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,265,0)
      <thead>
"KRN",.84,7981012.001,2,266,0)
       <tr>
"KRN",.84,7981012.001,2,267,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,268,0)
         <xsl:with-param name="tblname" select="'DRUGS'"/>
"KRN",.84,7981012.001,2,269,0)
         <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,270,0)
         <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,271,0)
         <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,272,0)
         <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,273,0)
         <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,274,0)
         <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,275,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,276,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981012.001,2,277,0)
         <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981012.001,2,278,0)
         <xsl:with-param name="sort" select="'DRUGS=RXNAME'"/>
"KRN",.84,7981012.001,2,279,0)
         <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981012.001,2,280,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,281,0)
       </tr>
"KRN",.84,7981012.001,2,282,0)
      </thead>
"KRN",.84,7981012.001,2,283,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,284,0)
       <xsl:with-param name="colspan" select="15"/>    <!-- Make bigger 
"KRN",.84,7981012.001,2,285,0)
than number of columns -->
"KRN",.84,7981012.001,2,286,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,287,0)
      <tbody>
"KRN",.84,7981012.001,2,288,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,289,0)
        <xsl:when test="$PTSDRUGS">
"KRN",.84,7981012.001,2,290,0)
         <xsl:for-each 
"KRN",.84,7981012.001,2,291,0)
select="DRUG[generate-id(.)=generate-id(key('patient-drug',@ID))]">
"KRN",.84,7981012.001,2,292,0)
          <xsl:call-template name="PatientDrugData">
"KRN",.84,7981012.001,2,293,0)
           <xsl:with-param name="group" select="key('patient-drug',@ID)"/>
"KRN",.84,7981012.001,2,294,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,295,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,296,0)
        </xsl:when>
"KRN",.84,7981012.001,2,297,0)
        <xsl:otherwise> 
"KRN",.84,7981012.001,2,298,0)
         <xsl:for-each select="DRUG">
"KRN",.84,7981012.001,2,299,0)
          <!--
"KRN",.84,7981012.001,2,300,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" 
"KRN",.84,7981012.001,2,301,0)
order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,302,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,303,0)
          -->
"KRN",.84,7981012.001,2,304,0)
          <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981012.001,2,305,0)
order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,306,0)
          <tr>
"KRN",.84,7981012.001,2,307,0)
            <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,308,0)
             <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,309,0)
             <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,310,0)
             <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,311,0)
             <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,312,0)
             <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,313,0)
             <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,314,0)
            </xsl:call-template>
"KRN",.84,7981012.001,2,315,0)
           <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,316,0)
          </tr>
"KRN",.84,7981012.001,2,317,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,318,0)
       </xsl:otherwise>
"KRN",.84,7981012.001,2,319,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,320,0)
      </tbody>
"KRN",.84,7981012.001,2,321,0)
     </table>
"KRN",.84,7981012.001,2,322,0)
    </div>
"KRN",.84,7981012.001,2,323,0)
   </xsl:when>
"KRN",.84,7981012.001,2,324,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,325,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,326,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,327,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,328,0)
</div>
"KRN",.84,7981012.001,2,329,0)
</xsl:template>
"KRN",.84,7981012.001,2,330,0)
 
"KRN",.84,7981012.001,2,331,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.001,2,332,0)
<div style="page-break-before:always">
"KRN",.84,7981012.001,2,333,0)
  <h2>Lab Results</h2>
"KRN",.84,7981012.001,2,334,0)
  <xsl:choose>
"KRN",.84,7981012.001,2,335,0)
   <xsl:when test="$L1">
"KRN",.84,7981012.001,2,336,0)
    <xsl:variable name="SORT" select="/REPORT/LABTESTS/@SORT"/>
"KRN",.84,7981012.001,2,337,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981012.001,2,338,0)
     <xsl:choose>
"KRN",.84,7981012.001,2,339,0)
      <xsl:when test="/REPORT/LABTESTS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981012.001,2,340,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981012.001,2,341,0)
     </xsl:choose>
"KRN",.84,7981012.001,2,342,0)
    </xsl:variable>
"KRN",.84,7981012.001,2,343,0)
    <div>
"KRN",.84,7981012.001,2,344,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981012.001,2,345,0)
     <xsl:with-param name="condition" select="LT[31]"/>
"KRN",.84,7981012.001,2,346,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,347,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981012.001,2,348,0)
      <thead>
"KRN",.84,7981012.001,2,349,0)
       <tr>
"KRN",.84,7981012.001,2,350,0)
        <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981012.001,2,351,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,352,0)
         <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,353,0)
         <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,354,0)
         <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,355,0)
         <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,356,0)
         <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,357,0)
         <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,358,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,359,0)
        <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981012.001,2,360,0)
         <xsl:with-param name="colname" select="'LTNAME'"/>
"KRN",.84,7981012.001,2,361,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981012.001,2,362,0)
        </xsl:call-template>
"KRN",.84,7981012.001,2,363,0)
       </tr>
"KRN",.84,7981012.001,2,364,0)
      </thead>
"KRN",.84,7981012.001,2,365,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981012.001,2,366,0)
       <xsl:with-param name="colspan" select="10"/>    <!-- Make bigger 
"KRN",.84,7981012.001,2,367,0)
than number of columns -->
"KRN",.84,7981012.001,2,368,0)
      </xsl:call-template>
"KRN",.84,7981012.001,2,369,0)
      <tbody>
"KRN",.84,7981012.001,2,370,0)
       <xsl:choose>
"KRN",.84,7981012.001,2,371,0)
        <xsl:when test="$PTSLABS">
"KRN",.84,7981012.001,2,372,0)
         <xsl:for-each 
"KRN",.84,7981012.001,2,373,0)
select="LT[generate-id(.)=generate-id(key('patient-lt',@ID))]">
"KRN",.84,7981012.001,2,374,0)
          <xsl:call-template name="PatientLabData">
"KRN",.84,7981012.001,2,375,0)
           <xsl:with-param name="group" select="key('patient-lt',@ID)"/>
"KRN",.84,7981012.001,2,376,0)
          </xsl:call-template>
"KRN",.84,7981012.001,2,377,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,378,0)
        </xsl:when>
"KRN",.84,7981012.001,2,379,0)
        <xsl:otherwise>
"KRN",.84,7981012.001,2,380,0)
         <xsl:for-each select="LT">
"KRN",.84,7981012.001,2,381,0)
          <!--
"KRN",.84,7981012.001,2,382,0)
          <xsl:sort select="concat(*[name()=$SORT],' ')" 
"KRN",.84,7981012.001,2,383,0)
order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,384,0)
          <xsl:sort select="NAME"/>
"KRN",.84,7981012.001,2,385,0)
          -->
"KRN",.84,7981012.001,2,386,0)
          <xsl:sort select="concat(./*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981012.001,2,387,0)
order="{$SORTORD}"/>
"KRN",.84,7981012.001,2,388,0)
          <tr>
"KRN",.84,7981012.001,2,389,0)
           <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,390,0)
            <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,391,0)
            <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,392,0)
            <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,393,0)
            <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,394,0)
            <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,395,0)
            <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,396,0)
           </xsl:call-template>
"KRN",.84,7981012.001,2,397,0)
           <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,398,0)
            <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,399,0)
           </xsl:call-template>
"KRN",.84,7981012.001,2,400,0)
          </tr>
"KRN",.84,7981012.001,2,401,0)
         </xsl:for-each>
"KRN",.84,7981012.001,2,402,0)
        </xsl:otherwise>
"KRN",.84,7981012.001,2,403,0)
       </xsl:choose>
"KRN",.84,7981012.001,2,404,0)
      </tbody>
"KRN",.84,7981012.001,2,405,0)
     </table>
"KRN",.84,7981012.001,2,406,0)
    </div>
"KRN",.84,7981012.001,2,407,0)
   </xsl:when>
"KRN",.84,7981012.001,2,408,0)
   <xsl:otherwise>
"KRN",.84,7981012.001,2,409,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981012.001,2,410,0)
   </xsl:otherwise>
"KRN",.84,7981012.001,2,411,0)
  </xsl:choose>
"KRN",.84,7981012.001,2,412,0)
</div>
"KRN",.84,7981012.001,2,413,0)
</xsl:template>
"KRN",.84,7981012.001,2,414,0)
 
"KRN",.84,7981012.001,2,415,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.001,2,416,0)
<div style="page-break-before:always">
"KRN",.84,7981012.001,2,417,0)
  <h2>Patients</h2>
"KRN",.84,7981012.001,2,418,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981012.001,2,419,0)
</div>
"KRN",.84,7981012.001,2,420,0)
</xsl:template>
"KRN",.84,7981012.001,2,421,0)
 
"KRN",.84,7981012.001,2,422,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981012.001,2,423,0)
 
"KRN",.84,7981012.001,2,424,0)
<xsl:template name="DrugData">
"KRN",.84,7981012.001,2,425,0)
<xsl:param name="rowspan" select="'1'"/>
"KRN",.84,7981012.001,2,426,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981012.001,2,427,0)
  <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.001,2,428,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981012.001,2,429,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,430,0)
</xsl:call-template>
"KRN",.84,7981012.001,2,431,0)
</xsl:template>
"KRN",.84,7981012.001,2,432,0)
 
"KRN",.84,7981012.001,2,433,0)
<xsl:template name="PatientDrugData">
"KRN",.84,7981012.001,2,434,0)
<xsl:param name="group"/>
"KRN",.84,7981012.001,2,435,0)
<xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,436,0)
<xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,437,0)
<xsl:for-each select="$group">
"KRN",.84,7981012.001,2,438,0)
  <tr>
"KRN",.84,7981012.001,2,439,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,440,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,441,0)
     <xsl:with-param name="number"  select="$number"/>
"KRN",.84,7981012.001,2,442,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,443,0)
     <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,444,0)
     <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,445,0)
     <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,446,0)
     <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,447,0)
     <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,448,0)
     <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,449,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,450,0)
   </xsl:if>
"KRN",.84,7981012.001,2,451,0)
   <xsl:call-template name="DrugData"/>
"KRN",.84,7981012.001,2,452,0)
  </tr>
"KRN",.84,7981012.001,2,453,0)
</xsl:for-each>
"KRN",.84,7981012.001,2,454,0)
</xsl:template>
"KRN",.84,7981012.001,2,455,0)
 
"KRN",.84,7981012.001,2,456,0)
<xsl:template name="PatientLabData">
"KRN",.84,7981012.001,2,457,0)
<xsl:param name="group"/>
"KRN",.84,7981012.001,2,458,0)
<xsl:param name="number" select="position()"/>
"KRN",.84,7981012.001,2,459,0)
<xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981012.001,2,460,0)
<xsl:for-each select="$group">
"KRN",.84,7981012.001,2,461,0)
  <tr>
"KRN",.84,7981012.001,2,462,0)
   <xsl:if test="position()=1">
"KRN",.84,7981012.001,2,463,0)
    <xsl:call-template name="BasicPatientData">
"KRN",.84,7981012.001,2,464,0)
     <xsl:with-param name="number"  select="$number"/>
"KRN",.84,7981012.001,2,465,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981012.001,2,466,0)
     <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981012.001,2,467,0)
     <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981012.001,2,468,0)
     <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981012.001,2,469,0)
     <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981012.001,2,470,0)
     <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981012.001,2,471,0)
     <xsl:with-param name="apptyes" select="$APPT_YES"/>
"KRN",.84,7981012.001,2,472,0)
    </xsl:call-template>
"KRN",.84,7981012.001,2,473,0)
   </xsl:if>
"KRN",.84,7981012.001,2,474,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981012.001,2,475,0)
    <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981012.001,2,476,0)
   </xsl:call-template>
"KRN",.84,7981012.001,2,477,0)
  </tr>
"KRN",.84,7981012.001,2,478,0)
</xsl:for-each>
"KRN",.84,7981012.001,2,479,0)
</xsl:template>
"KRN",.84,7981012.001,2,480,0)
 
"KRN",.84,7981012.001,2,481,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981012.001,2,482,0)
 
"KRN",.84,7981012.001,2,483,0)
<xsl:template match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981012.001,2,484,0)
<xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,485,0)
  <xsl:with-param name="title" select="'Meds'"/>
"KRN",.84,7981012.001,2,486,0)
</xsl:call-template>
"KRN",.84,7981012.001,2,487,0)
</xsl:template>
"KRN",.84,7981012.001,2,488,0)
 
"KRN",.84,7981012.001,2,489,0)
<xsl:template match="PARAMETERS/DATE_RANGE_2">
"KRN",.84,7981012.001,2,490,0)
<xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,491,0)
  <xsl:with-param name="title" select="'Labs'"/>
"KRN",.84,7981012.001,2,492,0)
</xsl:call-template>
"KRN",.84,7981012.001,2,493,0)
</xsl:template>
"KRN",.84,7981012.001,2,494,0)
 
"KRN",.84,7981012.001,2,495,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981012.001,2,496,0)
<xsl:call-template name="DateRange">
"KRN",.84,7981012.001,2,497,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981012.001,2,498,0)
</xsl:call-template>
"KRN",.84,7981012.001,2,499,0)
</xsl:template>
"KRN",.84,7981012.001,2,500,0)
 
"KRN",.84,7981012.001,2,501,0)
</xsl:stylesheet>
"KRN",.84,7981012.002,-1)
0^8
"KRN",.84,7981012.002,0)
7981012.002^2^^CLINICAL CASE REGISTRIES^Combined Meds and Labs Report (CSV)
"KRN",.84,7981012.002,2,0)
^^243^243^3180413^
"KRN",.84,7981012.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981012.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981012.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981012.002,2,4,0)
 
"KRN",.84,7981012.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981012.002,2,6,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981012.002,2,7,0)
 
"KRN",.84,7981012.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981012.002,2,9,0)
<xsl:apply-templates select="REPORT/DRUGS"/>
"KRN",.84,7981012.002,2,10,0)
<xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981012.002,2,11,0)
<xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981012.002,2,12,0)
</xsl:template>
"KRN",.84,7981012.002,2,13,0)
 
"KRN",.84,7981012.002,2,14,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981012.002,2,15,0)
<xsl:text>Combined Meds and Labs Report (Medications)</xsl:text>
"KRN",.84,7981012.002,2,16,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,17,0)
<xsl:text>Patient Name,SSN,</xsl:text>
"KRN",.84,7981012.002,2,18,0)
<xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,19,0)
   <xsl:text>Age,</xsl:text>
"KRN",.84,7981012.002,2,20,0)
</xsl:if>
"KRN",.84,7981012.002,2,21,0)
<xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,22,0)
   <xsl:text>Date of Birth,</xsl:text>
"KRN",.84,7981012.002,2,23,0)
</xsl:if>
"KRN",.84,7981012.002,2,24,0)
<xsl:text>Date of Death,Medication Name</xsl:text>
"KRN",.84,7981012.002,2,25,0)
<xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,26,0)
   <xsl:text>,ICN</xsl:text>
"KRN",.84,7981012.002,2,27,0)
</xsl:if>
"KRN",.84,7981012.002,2,28,0)
<xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,29,0)
   <xsl:text>,PACT</xsl:text>
"KRN",.84,7981012.002,2,30,0)
</xsl:if>
"KRN",.84,7981012.002,2,31,0)
<xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,32,0)
   <xsl:text>,PCP</xsl:text>
"KRN",.84,7981012.002,2,33,0)
</xsl:if>
"KRN",.84,7981012.002,2,34,0)
<xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,35,0)
   <xsl:text>,Next Appt</xsl:text>
"KRN",.84,7981012.002,2,36,0)
</xsl:if>
"KRN",.84,7981012.002,2,37,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,38,0)
<xsl:for-each select="DRUG">
"KRN",.84,7981012.002,2,39,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,40,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,41,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,42,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,43,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,44,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,45,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,46,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,47,0)
    <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981012.002,2,48,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,49,0)
  </xsl:if>
"KRN",.84,7981012.002,2,50,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,51,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,52,0)
    <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981012.002,2,53,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,54,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,55,0)
  </xsl:if>
"KRN",.84,7981012.002,2,56,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,57,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,58,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,59,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,60,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,61,0)
   <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981012.002,2,62,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,63,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,64,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,65,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,66,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,67,0)
  </xsl:if>
"KRN",.84,7981012.002,2,68,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,69,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,70,0)
    <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981012.002,2,71,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,72,0)
  </xsl:if>
"KRN",.84,7981012.002,2,73,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,74,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,75,0)
    <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981012.002,2,76,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,77,0)
  </xsl:if>
"KRN",.84,7981012.002,2,78,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,79,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,80,0)
    <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981012.002,2,81,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,82,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,83,0)
  </xsl:if>
"KRN",.84,7981012.002,2,84,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,85,0)
</xsl:for-each>
"KRN",.84,7981012.002,2,86,0)
<!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,87,0)
</xsl:template>
"KRN",.84,7981012.002,2,88,0)
 
"KRN",.84,7981012.002,2,89,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981012.002,2,90,0)
<xsl:text>Combined Meds and Labs Report (Lab Results)</xsl:text>
"KRN",.84,7981012.002,2,91,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,92,0)
<xsl:text>Patient Name,SSN,</xsl:text>
"KRN",.84,7981012.002,2,93,0)
<xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,94,0)
   <xsl:text>Age,</xsl:text>
"KRN",.84,7981012.002,2,95,0)
</xsl:if>
"KRN",.84,7981012.002,2,96,0)
<xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,97,0)
   <xsl:text>Date of Birth,</xsl:text>
"KRN",.84,7981012.002,2,98,0)
</xsl:if>
"KRN",.84,7981012.002,2,99,0)
<xsl:text>Date of Death,Date,Test Name,Result</xsl:text>
"KRN",.84,7981012.002,2,100,0)
<xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,101,0)
   <xsl:text>,ICN</xsl:text>
"KRN",.84,7981012.002,2,102,0)
</xsl:if>
"KRN",.84,7981012.002,2,103,0)
<xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,104,0)
   <xsl:text>,PACT</xsl:text>
"KRN",.84,7981012.002,2,105,0)
</xsl:if>
"KRN",.84,7981012.002,2,106,0)
<xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,107,0)
   <xsl:text>,PCP</xsl:text>
"KRN",.84,7981012.002,2,108,0)
</xsl:if>
"KRN",.84,7981012.002,2,109,0)
<xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,110,0)
   <xsl:text>,Next Appt</xsl:text>
"KRN",.84,7981012.002,2,111,0)
</xsl:if>
"KRN",.84,7981012.002,2,112,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,113,0)
<xsl:for-each select="LT">
"KRN",.84,7981012.002,2,114,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,115,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,116,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,117,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,118,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,119,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,120,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,121,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,122,0)
    <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981012.002,2,123,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,124,0)
  </xsl:if>
"KRN",.84,7981012.002,2,125,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,126,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,127,0)
    <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981012.002,2,128,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,129,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,130,0)
  </xsl:if>
"KRN",.84,7981012.002,2,131,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,132,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,133,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,134,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,135,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,136,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981012.002,2,137,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,138,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,139,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,140,0)
   <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981012.002,2,141,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,142,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,143,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981012.002,2,144,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,145,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,146,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,147,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,148,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,149,0)
  </xsl:if>
"KRN",.84,7981012.002,2,150,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,151,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,152,0)
    <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981012.002,2,153,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,154,0)
  </xsl:if>
"KRN",.84,7981012.002,2,155,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,156,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,157,0)
    <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981012.002,2,158,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,159,0)
  </xsl:if>
"KRN",.84,7981012.002,2,160,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,161,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,162,0)
    <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981012.002,2,163,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,164,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,165,0)
  </xsl:if>
"KRN",.84,7981012.002,2,166,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,167,0)
</xsl:for-each>
"KRN",.84,7981012.002,2,168,0)
<!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,169,0)
</xsl:template>
"KRN",.84,7981012.002,2,170,0)
 
"KRN",.84,7981012.002,2,171,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981012.002,2,172,0)
<xsl:text>Combined Meds and Labs Report (Patients)</xsl:text>
"KRN",.84,7981012.002,2,173,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,174,0)
<xsl:text>Patient Name,SSN,</xsl:text>
"KRN",.84,7981012.002,2,175,0)
<xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,176,0)
   <xsl:text>Age,</xsl:text>
"KRN",.84,7981012.002,2,177,0)
</xsl:if>
"KRN",.84,7981012.002,2,178,0)
<xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,179,0)
   <xsl:text>Date of Birth,</xsl:text>
"KRN",.84,7981012.002,2,180,0)
</xsl:if>
"KRN",.84,7981012.002,2,181,0)
<xsl:text>Date of Death</xsl:text>
"KRN",.84,7981012.002,2,182,0)
<xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,183,0)
   <xsl:text>,ICN</xsl:text>
"KRN",.84,7981012.002,2,184,0)
</xsl:if>
"KRN",.84,7981012.002,2,185,0)
<xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,186,0)
   <xsl:text>,PACT</xsl:text>
"KRN",.84,7981012.002,2,187,0)
</xsl:if>
"KRN",.84,7981012.002,2,188,0)
<xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,189,0)
   <xsl:text>,PCP</xsl:text>
"KRN",.84,7981012.002,2,190,0)
</xsl:if>
"KRN",.84,7981012.002,2,191,0)
<xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,192,0)
   <xsl:text>,Next Appt</xsl:text>
"KRN",.84,7981012.002,2,193,0)
</xsl:if>
"KRN",.84,7981012.002,2,194,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,195,0)
<xsl:for-each select="PATIENT">
"KRN",.84,7981012.002,2,196,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,197,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981012.002,2,198,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,199,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,200,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981012.002,2,201,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,202,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981012.002,2,203,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,204,0)
    <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981012.002,2,205,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,206,0)
  </xsl:if>
"KRN",.84,7981012.002,2,207,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981012.002,2,208,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,209,0)
    <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981012.002,2,210,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,211,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,212,0)
  </xsl:if>
"KRN",.84,7981012.002,2,213,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,214,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981012.002,2,215,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,216,0)
  </xsl:call-template>
"KRN",.84,7981012.002,2,217,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981012.002,2,218,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,219,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981012.002,2,220,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,221,0)
  </xsl:if>
"KRN",.84,7981012.002,2,222,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981012.002,2,223,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,224,0)
    <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981012.002,2,225,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,226,0)
  </xsl:if>
"KRN",.84,7981012.002,2,227,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981012.002,2,228,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,229,0)
    <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981012.002,2,230,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,231,0)
  </xsl:if>
"KRN",.84,7981012.002,2,232,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981012.002,2,233,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981012.002,2,234,0)
    <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981012.002,2,235,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981012.002,2,236,0)
   </xsl:call-template>
"KRN",.84,7981012.002,2,237,0)
  </xsl:if>
"KRN",.84,7981012.002,2,238,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981012.002,2,239,0)
</xsl:for-each>
"KRN",.84,7981012.002,2,240,0)
<!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981012.002,2,241,0)
</xsl:template>
"KRN",.84,7981012.002,2,242,0)
 
"KRN",.84,7981012.002,2,243,0)
</xsl:stylesheet>
"KRN",.84,7981018.002,-1)
0^2
"KRN",.84,7981018.002,0)
7981018.002^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (CSV)
"KRN",.84,7981018.002,2,0)
^^123^123^3180411^
"KRN",.84,7981018.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981018.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981018.002,2,4,0)
 
"KRN",.84,7981018.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common -->
"KRN",.84,7981018.002,2,6,0)
 
"KRN",.84,7981018.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981018.002,2,8,0)
  <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.002,2,9,0)
  <xsl:text>BMI by Range</xsl:text>
"KRN",.84,7981018.002,2,10,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.002,2,11,0)
</xsl:template>
"KRN",.84,7981018.002,2,12,0)
 
"KRN",.84,7981018.002,2,13,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.002,2,14,0)
<xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.002,2,15,0)
<xsl:text>BMI by Range (Summary)</xsl:text>
"KRN",.84,7981018.002,2,16,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,17,0)
<xsl:text>BMI Categories</xsl:text>
"KRN",.84,7981018.002,2,18,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,19,0)
<xsl:text>BMI Values</xsl:text>
"KRN",.84,7981018.002,2,20,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,21,0)
<xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981018.002,2,22,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,23,0)
<xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.002,2,24,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981018.002,2,25,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,26,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981018.002,2,27,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,28,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981018.002,2,29,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,30,0)
</xsl:for-each>
"KRN",.84,7981018.002,2,31,0)
<!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981018.002,2,32,0)
</xsl:template>
"KRN",.84,7981018.002,2,33,0)
 
"KRN",.84,7981018.002,2,34,0)
<xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.002,2,35,0)
<xsl:value-of select="''"/>
"KRN",.84,7981018.002,2,36,0)
</xsl:template>
"KRN",.84,7981018.002,2,37,0)
 
"KRN",.84,7981018.002,2,38,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.002,2,39,0)
<xsl:value-of select="'Height Date'"/>
"KRN",.84,7981018.002,2,40,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,41,0)
<xsl:value-of select="'Height'"/>
"KRN",.84,7981018.002,2,42,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,43,0)
</xsl:template>
"KRN",.84,7981018.002,2,44,0)
 
"KRN",.84,7981018.002,2,45,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.002,2,46,0)
<xsl:value-of select="'Weight Date'"/>
"KRN",.84,7981018.002,2,47,0)
<xsl:value-of select="$DELIMITER"/>  
"KRN",.84,7981018.002,2,48,0)
 <xsl:value-of select="'Weight'"/>
"KRN",.84,7981018.002,2,49,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,50,0)
</xsl:template>
"KRN",.84,7981018.002,2,51,0)
 
"KRN",.84,7981018.002,2,52,0)
<xsl:template match="COLUMN[@NAME='FUT_APPT']">
"KRN",.84,7981018.002,2,53,0)
<xsl:value-of select="'Next Appt'"/>
"KRN",.84,7981018.002,2,54,0)
<xsl:value-of select="$DELIMITER"/>  
"KRN",.84,7981018.002,2,55,0)
</xsl:template>
"KRN",.84,7981018.002,2,56,0)
 
"KRN",.84,7981018.002,2,57,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981018.002,2,58,0)
<xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981018.002,2,59,0)
<xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981018.002,2,60,0)
<xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981018.002,2,61,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,62,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981018.002,2,63,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,64,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,65,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981018.002,2,66,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,67,0)
<xsl:if test="$AGE_YES">
"KRN",.84,7981018.002,2,68,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,69,0)
     <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981018.002,2,70,0)
   </xsl:call-template>
"KRN",.84,7981018.002,2,71,0)
</xsl:if>
"KRN",.84,7981018.002,2,72,0)
<xsl:if test="$DOB_YES">
"KRN",.84,7981018.002,2,73,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,74,0)
     <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981018.002,2,75,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,76,0)
   </xsl:call-template>
"KRN",.84,7981018.002,2,77,0)
</xsl:if>
"KRN",.84,7981018.002,2,78,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,79,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981018.002,2,80,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,81,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,82,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,83,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/DATE"/>
"KRN",.84,7981018.002,2,84,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,85,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,86,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,87,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,88,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,89,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,90,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/DATE"/>
"KRN",.84,7981018.002,2,91,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,92,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,93,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,94,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,95,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,96,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,97,0)
   <xsl:with-param name="value" select="BMI"/>
"KRN",.84,7981018.002,2,98,0)
</xsl:call-template>
"KRN",.84,7981018.002,2,99,0)
<xsl:if test="$ICN_YES">
"KRN",.84,7981018.002,2,100,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,101,0)
      <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981018.002,2,102,0)
    </xsl:call-template>
"KRN",.84,7981018.002,2,103,0)
</xsl:if>
"KRN",.84,7981018.002,2,104,0)
<xsl:if test="$PACT_YES">
"KRN",.84,7981018.002,2,105,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,106,0)
      <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981018.002,2,107,0)
    </xsl:call-template>
"KRN",.84,7981018.002,2,108,0)
</xsl:if>
"KRN",.84,7981018.002,2,109,0)
<xsl:if test="$PCP_YES">
"KRN",.84,7981018.002,2,110,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,111,0)
      <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981018.002,2,112,0)
    </xsl:call-template>
"KRN",.84,7981018.002,2,113,0)
</xsl:if>
"KRN",.84,7981018.002,2,114,0)
<xsl:if test="$APPT_YES">
"KRN",.84,7981018.002,2,115,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,116,0)
      <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981018.002,2,117,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,118,0)
    </xsl:call-template>
"KRN",.84,7981018.002,2,119,0)
</xsl:if>
"KRN",.84,7981018.002,2,120,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,121,0)
</xsl:template>
"KRN",.84,7981018.002,2,122,0)
 
"KRN",.84,7981018.002,2,123,0)
</xsl:stylesheet>
"KRN",.84,7981019.002,-1)
0^10
"KRN",.84,7981019.002,0)
7981019.002^2^^CLINICAL CASE REGISTRIES^Liver Report by Range (CSV)
"KRN",.84,7981019.002,2,0)
^^117^117^3180417^
"KRN",.84,7981019.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981019.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981019.002,2,4,0)
 
"KRN",.84,7981019.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common -->
"KRN",.84,7981019.002,2,6,0)
 
"KRN",.84,7981019.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981019.002,2,8,0)
<xsl:text>Liver Score by Range</xsl:text>
"KRN",.84,7981019.002,2,9,0)
<xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.002,2,10,0)
</xsl:template>
"KRN",.84,7981019.002,2,11,0)
 
"KRN",.84,7981019.002,2,12,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981019.002,2,13,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,14,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981019.002,2,15,0)
</xsl:call-template>
"KRN",.84,7981019.002,2,16,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,17,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981019.002,2,18,0)
</xsl:call-template>
"KRN",.84,7981019.002,2,19,0)
<xsl:if test="$AGE_YES">
"KRN",.84,7981019.002,2,20,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,21,0)
     <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981019.002,2,22,0)
   </xsl:call-template>
"KRN",.84,7981019.002,2,23,0)
</xsl:if>
"KRN",.84,7981019.002,2,24,0)
<xsl:if test="$DOB_YES">
"KRN",.84,7981019.002,2,25,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,26,0)
     <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981019.002,2,27,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,28,0)
   </xsl:call-template>
"KRN",.84,7981019.002,2,29,0)
</xsl:if>
"KRN",.84,7981019.002,2,30,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,31,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981019.002,2,32,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,33,0)
</xsl:call-template>
"KRN",.84,7981019.002,2,34,0)
<xsl:for-each select="MELDDATA/TEST">
"KRN",.84,7981019.002,2,35,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,36,0)
    <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981019.002,2,37,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,38,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,39,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,40,0)
    <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981019.002,2,41,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,42,0)
</xsl:for-each>
"KRN",.84,7981019.002,2,43,0)
<xsl:if 
"KRN",.84,7981019.002,2,44,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']) 
"KRN",.84,7981019.002,2,45,0)
> 0">
"KRN",.84,7981019.002,2,46,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,47,0)
    <xsl:with-param name="value" select="MELD"/>
"KRN",.84,7981019.002,2,48,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,49,0)
</xsl:if>
"KRN",.84,7981019.002,2,50,0)
<xsl:if 
"KRN",.84,7981019.002,2,51,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NA']) > 
"KRN",.84,7981019.002,2,52,0)
0">
"KRN",.84,7981019.002,2,53,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,54,0)
    <xsl:with-param name="value" select="MELDNA"/>
"KRN",.84,7981019.002,2,55,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,56,0)
</xsl:if>
"KRN",.84,7981019.002,2,57,0)
<xsl:if 
"KRN",.84,7981019.002,2,58,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='APRI']) 
"KRN",.84,7981019.002,2,59,0)
> 0">
"KRN",.84,7981019.002,2,60,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,61,0)
    <xsl:with-param name="value" select="APRI"/>
"KRN",.84,7981019.002,2,62,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,63,0)
</xsl:if>
"KRN",.84,7981019.002,2,64,0)
<xsl:if 
"KRN",.84,7981019.002,2,65,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='FIB4']) 
"KRN",.84,7981019.002,2,66,0)
> 0">
"KRN",.84,7981019.002,2,67,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,68,0)
    <xsl:with-param name="value" select="FIB4"/>
"KRN",.84,7981019.002,2,69,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,70,0)
</xsl:if>
"KRN",.84,7981019.002,2,71,0)
<xsl:if test="$ICN_YES">
"KRN",.84,7981019.002,2,72,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,73,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981019.002,2,74,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,75,0)
</xsl:if>
"KRN",.84,7981019.002,2,76,0)
<xsl:if test="$PACT_YES">
"KRN",.84,7981019.002,2,77,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,78,0)
    <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981019.002,2,79,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,80,0)
</xsl:if>
"KRN",.84,7981019.002,2,81,0)
<xsl:if test="$PCP_YES">
"KRN",.84,7981019.002,2,82,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,83,0)
    <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981019.002,2,84,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,85,0)
</xsl:if>
"KRN",.84,7981019.002,2,86,0)
<xsl:if test="$APPT_YES">
"KRN",.84,7981019.002,2,87,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,88,0)
    <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981019.002,2,89,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,90,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,91,0)
</xsl:if>
"KRN",.84,7981019.002,2,92,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981019.002,2,93,0)
</xsl:template>
"KRN",.84,7981019.002,2,94,0)
 
"KRN",.84,7981019.002,2,95,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.002,2,96,0)
<xsl:for-each select="/REPORT/PATIENTS/PATIENT[1]/MELDDATA/TEST/TNAME">
"KRN",.84,7981019.002,2,97,0)
  <xsl:variable name="tname" select="."/>
"KRN",.84,7981019.002,2,98,0)
  <xsl:value-of select="concat($tname, ' Date', $DELIMITER)"/>
"KRN",.84,7981019.002,2,99,0)
  <xsl:value-of select="concat($tname, ' Result', $DELIMITER)"/>
"KRN",.84,7981019.002,2,100,0)
</xsl:for-each>
"KRN",.84,7981019.002,2,101,0)
</xsl:template>
"KRN",.84,7981019.002,2,102,0)
 
"KRN",.84,7981019.002,2,103,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.002,2,104,0)
<xsl:text></xsl:text>
"KRN",.84,7981019.002,2,105,0)
</xsl:template>
"KRN",.84,7981019.002,2,106,0)
 
"KRN",.84,7981019.002,2,107,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.002,2,108,0)
<xsl:text></xsl:text>
"KRN",.84,7981019.002,2,109,0)
</xsl:template>
"KRN",.84,7981019.002,2,110,0)
 
"KRN",.84,7981019.002,2,111,0)
<xsl:template match="COLUMN[@NAME='NA']">
"KRN",.84,7981019.002,2,112,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.002,2,113,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.002,2,114,0)
</xsl:call-template>
"KRN",.84,7981019.002,2,115,0)
</xsl:template>
"KRN",.84,7981019.002,2,116,0)
 
"KRN",.84,7981019.002,2,117,0)
</xsl:stylesheet>
"KRN",.84,7981020.002,-1)
0^9
"KRN",.84,7981020.002,0)
7981020.002^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (CSV)
"KRN",.84,7981020.002,2,0)
^^176^176^3180417^
"KRN",.84,7981020.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981020.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981020.002,2,4,0)
 
"KRN",.84,7981020.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common -->
"KRN",.84,7981020.002,2,6,0)
 
"KRN",.84,7981020.002,2,7,0)
<xsl:variable name="CRCLUSED" 
"KRN",.84,7981020.002,2,8,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.002,2,9,0)
)"/>
"KRN",.84,7981020.002,2,10,0)
<xsl:variable name="CKDUSED"  
"KRN",.84,7981020.002,2,11,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CKD'])
"KRN",.84,7981020.002,2,12,0)
"/>
"KRN",.84,7981020.002,2,13,0)
<xsl:variable name="MDRDUSED" 
"KRN",.84,7981020.002,2,14,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MDRD']
"KRN",.84,7981020.002,2,15,0)
)"/>
"KRN",.84,7981020.002,2,16,0)
 
"KRN",.84,7981020.002,2,17,0)
<xsl:template match="/">
"KRN",.84,7981020.002,2,18,0)
  <xsl:if test="$CKDUSED &gt; 0 or $MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,19,0)
    <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.002,2,20,0)
  </xsl:if>
"KRN",.84,7981020.002,2,21,0)
  <xsl:if test="/REPORT/PARAMETERS/OPTIONS/@COMPLETE='1'">
"KRN",.84,7981020.002,2,22,0)
    <xsl:text>Renal Function by Range</xsl:text>
"KRN",.84,7981020.002,2,23,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.002,2,24,0)
  </xsl:if>
"KRN",.84,7981020.002,2,25,0)
</xsl:template>
"KRN",.84,7981020.002,2,26,0)
 
"KRN",.84,7981020.002,2,27,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.002,2,28,0)
<xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.002,2,29,0)
<xsl:text>Renal Function by Range (Summary)</xsl:text>
"KRN",.84,7981020.002,2,30,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,31,0)
<xsl:text>Chronic Kidney Disease Stages</xsl:text>
"KRN",.84,7981020.002,2,32,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,33,0)
<xsl:text>GFR</xsl:text>
"KRN",.84,7981020.002,2,34,0)
<xsl:if test="$MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,35,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,36,0)
   <xsl:text>Number of Patients by MDRD</xsl:text>
"KRN",.84,7981020.002,2,37,0)
</xsl:if>
"KRN",.84,7981020.002,2,38,0)
<xsl:if test="$CKDUSED &gt; 0">
"KRN",.84,7981020.002,2,39,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,40,0)
   <xsl:text>Number of Patients by CKD-EPI</xsl:text>
"KRN",.84,7981020.002,2,41,0)
</xsl:if>
"KRN",.84,7981020.002,2,42,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,43,0)
<xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.002,2,44,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981020.002,2,45,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,46,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981020.002,2,47,0)
   <xsl:text> sq</xsl:text>
"KRN",.84,7981020.002,2,48,0)
   <xsl:if test="$MDRDUSED &gt; 0">
"KRN",.84,7981020.002,2,49,0)
     <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,50,0)
     <xsl:value-of select="./NPMDRD"/>
"KRN",.84,7981020.002,2,51,0)
  </xsl:if>
"KRN",.84,7981020.002,2,52,0)
   <xsl:if test="$CKDUSED &gt; 0">
"KRN",.84,7981020.002,2,53,0)
     <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,54,0)
     <xsl:value-of select="./NPCKD"/>
"KRN",.84,7981020.002,2,55,0)
   </xsl:if>
"KRN",.84,7981020.002,2,56,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,57,0)
</xsl:for-each>
"KRN",.84,7981020.002,2,58,0)
<!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981020.002,2,59,0)
</xsl:template>
"KRN",.84,7981020.002,2,60,0)
 
"KRN",.84,7981020.002,2,61,0)
 <xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.002,2,62,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981020.002,2,63,0)
</xsl:template>
"KRN",.84,7981020.002,2,64,0)
 
"KRN",.84,7981020.002,2,65,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.002,2,66,0)
  <xsl:value-of select="'Cr Date'"/>
"KRN",.84,7981020.002,2,67,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,68,0)
  <xsl:value-of select="'Cr'"/>
"KRN",.84,7981020.002,2,69,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,70,0)
</xsl:template>
"KRN",.84,7981020.002,2,71,0)
 
"KRN",.84,7981020.002,2,72,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.002,2,73,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,74,0)
    <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981020.002,2,75,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,76,0)
    <xsl:value-of select="'Height'"/>
"KRN",.84,7981020.002,2,77,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,78,0)
  </xsl:if>
"KRN",.84,7981020.002,2,79,0)
</xsl:template>
"KRN",.84,7981020.002,2,80,0)
 
"KRN",.84,7981020.002,2,81,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.002,2,82,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,83,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.002,2,84,0)
</xsl:call-template>
"KRN",.84,7981020.002,2,85,0)
</xsl:template>
"KRN",.84,7981020.002,2,86,0)
 
"KRN",.84,7981020.002,2,87,0)
<xsl:template match="COLUMN[@NAME='MDRD']">
"KRN",.84,7981020.002,2,88,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,89,0)
  <xsl:with-param name="title" select="'MDRD'"/>
"KRN",.84,7981020.002,2,90,0)
</xsl:call-template>
"KRN",.84,7981020.002,2,91,0)
</xsl:template>
"KRN",.84,7981020.002,2,92,0)
 
"KRN",.84,7981020.002,2,93,0)
<xsl:template match="COLUMN[@NAME='CKD']">
"KRN",.84,7981020.002,2,94,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,95,0)
  <xsl:with-param name="title" select="'CKD-EPI'"/>
"KRN",.84,7981020.002,2,96,0)
</xsl:call-template>
"KRN",.84,7981020.002,2,97,0)
</xsl:template>
"KRN",.84,7981020.002,2,98,0)
 
"KRN",.84,7981020.002,2,99,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981020.002,2,100,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,101,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981020.002,2,102,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,103,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,104,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981020.002,2,105,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,106,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981020.002,2,107,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,108,0)
      <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981020.002,2,109,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,110,0)
  </xsl:if>
"KRN",.84,7981020.002,2,111,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981020.002,2,112,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,113,0)
      <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981020.002,2,114,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,115,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,116,0)
  </xsl:if>
"KRN",.84,7981020.002,2,117,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,118,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981020.002,2,119,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,120,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,121,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,122,0)
   <xsl:with-param name="value" select="RNLDATA/TEST/DATE"/>
"KRN",.84,7981020.002,2,123,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,124,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,125,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,126,0)
    <xsl:with-param name="value" select="RNLDATA/TEST/RESULT"/>
"KRN",.84,7981020.002,2,127,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,128,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,129,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,130,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/DATE"/>
"KRN",.84,7981020.002,2,131,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,132,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,133,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,134,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/RESULT"/>
"KRN",.84,7981020.002,2,135,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,136,0)
  </xsl:if>
"KRN",.84,7981020.002,2,137,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,138,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,139,0)
     <xsl:with-param name="value" select="CRCL"/>
"KRN",.84,7981020.002,2,140,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,141,0)
  </xsl:if>
"KRN",.84,7981020.002,2,142,0)
  <xsl:if test="$MDRDUSED > 0">
"KRN",.84,7981020.002,2,143,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,144,0)
     <xsl:with-param name="value" select="MDRD"/>
"KRN",.84,7981020.002,2,145,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,146,0)
  </xsl:if>
"KRN",.84,7981020.002,2,147,0)
  <xsl:if test="$CKDUSED > 0">
"KRN",.84,7981020.002,2,148,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,149,0)
     <xsl:with-param name="value" select="CKD"/>
"KRN",.84,7981020.002,2,150,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,151,0)
  </xsl:if>
"KRN",.84,7981020.002,2,152,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981020.002,2,153,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,154,0)
     <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981020.002,2,155,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,156,0)
  </xsl:if>
"KRN",.84,7981020.002,2,157,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981020.002,2,158,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,159,0)
     <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981020.002,2,160,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,161,0)
  </xsl:if>
"KRN",.84,7981020.002,2,162,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981020.002,2,163,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,164,0)
     <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981020.002,2,165,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,166,0)
  </xsl:if>
"KRN",.84,7981020.002,2,167,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981020.002,2,168,0)
    <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,169,0)
      <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981020.002,2,170,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,171,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,172,0)
  </xsl:if>
"KRN",.84,7981020.002,2,173,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,174,0)
</xsl:template>
"KRN",.84,7981020.002,2,175,0)
 
"KRN",.84,7981020.002,2,176,0)
</xsl:stylesheet>
"KRN",.84,7981021.002,-1)
0^16
"KRN",.84,7981021.002,0)
7981021.002^2^^CLINICAL CASE REGISTRIES^Potential DAA Candidates (CSV)
"KRN",.84,7981021.002,2,0)
^^108^108^3180514^
"KRN",.84,7981021.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981021.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981021.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981021.002,2,4,0)
 
"KRN",.84,7981021.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common -->
"KRN",.84,7981021.002,2,6,0)
 
"KRN",.84,7981021.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981021.002,2,8,0)
  <xsl:text>Potential DAA Candidates</xsl:text>
"KRN",.84,7981021.002,2,9,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981021.002,2,10,0)
</xsl:template>
"KRN",.84,7981021.002,2,11,0)
 
"KRN",.84,7981021.002,2,12,0)
<xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981021.002,2,13,0)
  <xsl:value-of select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981021.002,2,14,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,15,0)
</xsl:template>
"KRN",.84,7981021.002,2,16,0)
 
"KRN",.84,7981021.002,2,17,0)
<xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981021.002,2,18,0)
  <xsl:value-of select="'Most Recent HCV RNA'"/>
"KRN",.84,7981021.002,2,19,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,20,0)
</xsl:template>
"KRN",.84,7981021.002,2,21,0)
 
"KRN",.84,7981021.002,2,22,0)
<xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981021.002,2,23,0)
  <xsl:value-of select="'Most Recent GT'"/>
"KRN",.84,7981021.002,2,24,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,25,0)
</xsl:template>
"KRN",.84,7981021.002,2,26,0)
 
"KRN",.84,7981021.002,2,27,0)
<xsl:template match="COLUMN[@NAME='FILL_DATE']">
"KRN",.84,7981021.002,2,28,0)
  <xsl:value-of select="'Most Recent Fill Date'"/>
"KRN",.84,7981021.002,2,29,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,30,0)
</xsl:template>
"KRN",.84,7981021.002,2,31,0)
 
"KRN",.84,7981021.002,2,32,0)
<xsl:template match="COLUMN[@NAME='FILL_MED']">
"KRN",.84,7981021.002,2,33,0)
  <xsl:value-of select="'Most Recent HCV Medication Fill'"/>
"KRN",.84,7981021.002,2,34,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,35,0)
</xsl:template>
"KRN",.84,7981021.002,2,36,0)
 
"KRN",.84,7981021.002,2,37,0)
<xsl:template match="COLUMN[@NAME='FIB4']">
"KRN",.84,7981021.002,2,38,0)
  <xsl:value-of select="'Fib4'"/>
"KRN",.84,7981021.002,2,39,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,40,0)
</xsl:template>
"KRN",.84,7981021.002,2,41,0)
  
"KRN",.84,7981021.002,2,42,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981021.002,2,43,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981021.002,2,44,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981021.002,2,45,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,46,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981021.002,2,47,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,48,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,49,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981021.002,2,50,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,51,0)
  <xsl:if test="$AGE_YES">
"KRN",.84,7981021.002,2,52,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,53,0)
    <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981021.002,2,54,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,55,0)
  </xsl:if>
"KRN",.84,7981021.002,2,56,0)
  <xsl:if test="$DOB_YES">
"KRN",.84,7981021.002,2,57,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,58,0)
    <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981021.002,2,59,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,60,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,61,0)
  </xsl:if>
"KRN",.84,7981021.002,2,62,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,63,0)
   <xsl:with-param name="value" select="HCV_DATE"/>
"KRN",.84,7981021.002,2,64,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,65,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,66,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,67,0)
   <xsl:with-param name="value" select="HCV"/>
"KRN",.84,7981021.002,2,68,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,69,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,70,0)
   <xsl:with-param name="value" select="GT"/>
"KRN",.84,7981021.002,2,71,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,72,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,73,0)
   <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981021.002,2,74,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,75,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,77,0)
   <xsl:with-param name="value" select="FILL_MED"/>
"KRN",.84,7981021.002,2,78,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,79,0)
  <xsl:if test="FIB4">
"KRN",.84,7981021.002,2,80,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,81,0)
   <xsl:with-param name="value" select="FIB4"/>
"KRN",.84,7981021.002,2,82,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,83,0)
  </xsl:if>
"KRN",.84,7981021.002,2,84,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981021.002,2,85,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,86,0)
    <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981021.002,2,87,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,88,0)
  </xsl:if>
"KRN",.84,7981021.002,2,89,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981021.002,2,90,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,91,0)
    <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981021.002,2,92,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,93,0)
  </xsl:if>
"KRN",.84,7981021.002,2,94,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981021.002,2,95,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,96,0)
    <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981021.002,2,97,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,98,0)
  </xsl:if>
"KRN",.84,7981021.002,2,99,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981021.002,2,100,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,101,0)
    <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981021.002,2,102,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,103,0)
   </xsl:call-template>
"KRN",.84,7981021.002,2,104,0)
  </xsl:if>
"KRN",.84,7981021.002,2,105,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981021.002,2,106,0)
</xsl:template>
"KRN",.84,7981021.002,2,107,0)
 
"KRN",.84,7981021.002,2,108,0)
</xsl:stylesheet>
"KRN",.84,7981022.001,-1)
0^15
"KRN",.84,7981022.001,0)
7981022.001^2^^CLINICAL CASE REGISTRIES^DAA Lab Monitoring (HTML)
"KRN",.84,7981022.001,2,0)
^^661^661^3180425^
"KRN",.84,7981022.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981022.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981022.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981022.001,2,4,0)
 
"KRN",.84,7981022.001,2,5,0)
<xsl:import  href="template://report/998/1"/> <!-- Styles   -->
"KRN",.84,7981022.001,2,6,0)
<xsl:import  href="template://report/999/1"/> <!-- Common   -->
"KRN",.84,7981022.001,2,7,0)
<xsl:include href="template://report/997/1"/> <!-- Patients -->
"KRN",.84,7981022.001,2,8,0)
<xsl:include href="template://report/996/1"/> <!-- Pharmacy -->
"KRN",.84,7981022.001,2,9,0)
<xsl:include href="template://report/995/1"/> <!-- Lab Data -->
"KRN",.84,7981022.001,2,10,0)
 
"KRN",.84,7981022.001,2,11,0)
<xsl:key name="patient-drug" match="/REPORT/DRUGS/DRUG"  use="@ID"/>
"KRN",.84,7981022.001,2,12,0)
<xsl:key name="patient-lt"   match="/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981022.001,2,13,0)
<xsl:key name="patient-both" 
"KRN",.84,7981022.001,2,14,0)
match="/REPORT/DRUGS/DRUG|/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981022.001,2,15,0)
 
"KRN",.84,7981022.001,2,16,0)
<!-- Determine if the Meds and/or Labs table is not empty. -->
"KRN",.84,7981022.001,2,17,0)
<xsl:variable name="D1" select="/REPORT/DRUGS/DRUG[1]"/>
"KRN",.84,7981022.001,2,18,0)
<xsl:variable name="L1" select="/REPORT/LABTESTS/LT[1]"/>
"KRN",.84,7981022.001,2,19,0)
 
"KRN",.84,7981022.001,2,20,0)
<!-- Determine if the Meds and/or Labs table is sorted by a patient data 
"KRN",.84,7981022.001,2,21,0)
field.-->
"KRN",.84,7981022.001,2,22,0)
<xsl:variable name="PTCOLS"   
"KRN",.84,7981022.001,2,23,0)
select="',AGE,DOB,FUT_APPT,ICN,LAST4,NAME,PACT,PCP,'"/>
"KRN",.84,7981022.001,2,24,0)
<xsl:variable name="PTSDRUGS" 
"KRN",.84,7981022.001,2,25,0)
select="contains($PTCOLS,concat(',',/REPORT/DRUGS/@SORT,','))"/>
"KRN",.84,7981022.001,2,26,0)
<xsl:variable name="PTSLABS"  
"KRN",.84,7981022.001,2,27,0)
select="contains($PTCOLS,concat(',',/REPORT/LABTESTS/@SORT,','))"/>
"KRN",.84,7981022.001,2,28,0)
 
"KRN",.84,7981022.001,2,29,0)
<xsl:template match="/">
"KRN",.84,7981022.001,2,30,0)
<html>
"KRN",.84,7981022.001,2,31,0)
  <head>
"KRN",.84,7981022.001,2,32,0)
   <title>DAA Lab Monitoring Report</title>
"KRN",.84,7981022.001,2,33,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981022.001,2,34,0)
  </head>
"KRN",.84,7981022.001,2,35,0)
  <body>
"KRN",.84,7981022.001,2,36,0)
   <h1>DAA Lab Monitoring Report </h1>
"KRN",.84,7981022.001,2,37,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981022.001,2,38,0)
   <xsl:choose>
"KRN",.84,7981022.001,2,39,0)
    <!-- 
"KRN",.84,7981022.001,2,40,0)
     If both Meds and Labs tables are not empty and at least one of them
"KRN",.84,7981022.001,2,41,0)
     is sorted by patient data field, then group the data by patients.
"KRN",.84,7981022.001,2,42,0)
    -->
"KRN",.84,7981022.001,2,43,0)
    <xsl:when test="$D1 and $L1 and ($PTSDRUGS or $PTSLABS)">
"KRN",.84,7981022.001,2,44,0)
     <xsl:call-template name="DAAMonitor"/>
"KRN",.84,7981022.001,2,45,0)
    </xsl:when>
"KRN",.84,7981022.001,2,46,0)
    <!-- 
"KRN",.84,7981022.001,2,47,0)
     Otherwise, format available data using separate tables.
"KRN",.84,7981022.001,2,48,0)
    -->
"KRN",.84,7981022.001,2,49,0)
    <xsl:when test="$D1 or $L1 or /REPORT/PATIENTS/PATIENT[1]">
"KRN",.84,7981022.001,2,50,0)
     <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981022.001,2,51,0)
     <xsl:apply-templates select="/REPORT/LABTESTS"/>
"KRN",.84,7981022.001,2,52,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981022.001,2,53,0)
    </xsl:when>
"KRN",.84,7981022.001,2,54,0)
    <xsl:otherwise>
"KRN",.84,7981022.001,2,55,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,56,0)
    </xsl:otherwise>
"KRN",.84,7981022.001,2,57,0)
   </xsl:choose>
"KRN",.84,7981022.001,2,58,0)
  </body>
"KRN",.84,7981022.001,2,59,0)
</html>
"KRN",.84,7981022.001,2,60,0)
</xsl:template>
"KRN",.84,7981022.001,2,61,0)
 
"KRN",.84,7981022.001,2,62,0)
<xsl:template name="DAAMonitor">
"KRN",.84,7981022.001,2,63,0)
<xsl:variable name="SORT">
"KRN",.84,7981022.001,2,64,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,65,0)
   <xsl:when test="$PTSDRUGS"><xsl:value-of 
"KRN",.84,7981022.001,2,66,0)
select="/REPORT/DRUGS/@SORT"/></xsl:when>
"KRN",.84,7981022.001,2,67,0)
   <xsl:when test="$PTSLABS"><xsl:value-of   
"KRN",.84,7981022.001,2,68,0)
select="/REPORT/LABTESTS/@SORT"/></xsl:when>
"KRN",.84,7981022.001,2,69,0)
   <xsl:otherwise>NAME</xsl:otherwise>
"KRN",.84,7981022.001,2,70,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,71,0)
</xsl:variable>
"KRN",.84,7981022.001,2,72,0)
<xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,73,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,74,0)
   <xsl:when test="($PTSDRUGS and boolean(/REPORT/DRUGS/@SORTDESC)) or 
"KRN",.84,7981022.001,2,75,0)
    ($PTSLABS and 
"KRN",.84,7981022.001,2,76,0)
boolean(/REPORT/LABTESTS/@SORTDESC))">descending</xsl:when>
"KRN",.84,7981022.001,2,77,0)
   <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,78,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,79,0)
</xsl:variable>
"KRN",.84,7981022.001,2,80,0)
<xsl:for-each 
"KRN",.84,7981022.001,2,81,0)
select="/REPORT//*[generate-id(.)=generate-id(key('patient-both',@ID))]">
"KRN",.84,7981022.001,2,82,0)
  <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981022.001,2,83,0)
order="{$SORTORD}"/>
"KRN",.84,7981022.001,2,84,0)
  <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981022.001,2,85,0)
  <div style="page-break-after:always; font-size:1; 
"KRN",.84,7981022.001,2,86,0)
margin:0;border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981022.001,2,87,0)
  <div>
"KRN",.84,7981022.001,2,88,0)
   <table style="width:100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,89,0)
    <thead>
"KRN",.84,7981022.001,2,90,0)
     <tr>
"KRN",.84,7981022.001,2,91,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,92,0)
       <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981022.001,2,93,0)
       <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981022.001,2,94,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,95,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,96,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,97,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,98,0)
select="'DRUGS=NAME&amp;LABTESTS=NAME'"/>
"KRN",.84,7981022.001,2,99,0)
       <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981022.001,2,100,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,101,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,102,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,103,0)
select="'DRUGS=LAST4&amp;LABTESTS=LAST4'"/>
"KRN",.84,7981022.001,2,104,0)
       <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981022.001,2,105,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,106,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,107,0)
      <xsl:if test="$AGE_YES">
"KRN",.84,7981022.001,2,108,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,109,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,110,0)
select="'DRUGS=AGE&amp;LABTESTS=AGE'"/>
"KRN",.84,7981022.001,2,111,0)
        <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981022.001,2,112,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,113,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,114,0)
      </xsl:if>
"KRN",.84,7981022.001,2,115,0)
      <xsl:if test="$DOB_YES">
"KRN",.84,7981022.001,2,116,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,117,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,118,0)
select="'DRUGS=DOB&amp;LABTESTS=DOB'"/>
"KRN",.84,7981022.001,2,119,0)
        <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981022.001,2,120,0)
        <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981022.001,2,121,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,122,0)
      </xsl:if>
"KRN",.84,7981022.001,2,123,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981022.001,2,124,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,125,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,126,0)
select="'DRUGS=ICN&amp;LABTESTS=ICN'"/>
"KRN",.84,7981022.001,2,127,0)
        <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981022.001,2,128,0)
        <xsl:with-param name="width" select="'13%'"/>
"KRN",.84,7981022.001,2,129,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,130,0)
      </xsl:if>
"KRN",.84,7981022.001,2,131,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981022.001,2,132,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,133,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,134,0)
select="'DRUGS=PACT&amp;LABTESTS=PACT'"/>
"KRN",.84,7981022.001,2,135,0)
        <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981022.001,2,136,0)
        <xsl:with-param name="width" select="'16%'"/>
"KRN",.84,7981022.001,2,137,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,138,0)
      </xsl:if>
"KRN",.84,7981022.001,2,139,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981022.001,2,140,0)
       <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,141,0)
        <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,142,0)
select="'DRUGS=PCP&amp;LABTESTS=PCP'"/>
"KRN",.84,7981022.001,2,143,0)
        <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981022.001,2,144,0)
        <xsl:with-param name="width" select="'18%'"/>
"KRN",.84,7981022.001,2,145,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,146,0)
      </xsl:if>
"KRN",.84,7981022.001,2,147,0)
     </tr>
"KRN",.84,7981022.001,2,148,0)
    </thead>
"KRN",.84,7981022.001,2,149,0)
    <tr>
"KRN",.84,7981022.001,2,150,0)
     <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,151,0)
      <xsl:with-param name="seqnum"  select="1"/>
"KRN",.84,7981022.001,2,152,0)
      <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,153,0)
      <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,154,0)
      <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,155,0)
      <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,156,0)
      <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,157,0)
     </xsl:call-template>
"KRN",.84,7981022.001,2,158,0)
    </tr>
"KRN",.84,7981022.001,2,159,0)
   </table>
"KRN",.84,7981022.001,2,160,0)
   <br/>
"KRN",.84,7981022.001,2,161,0)
   <table cellpadding="5" cellspacing="0" style="leftpadding:25px; 
"KRN",.84,7981022.001,2,162,0)
width:80%;">
"KRN",.84,7981022.001,2,163,0)
    <thead>
"KRN",.84,7981022.001,2,164,0)
     <tr>
"KRN",.84,7981022.001,2,165,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,166,0)
       <xsl:with-param name="colname" select="'DAA_FILL'"/>
"KRN",.84,7981022.001,2,167,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,168,0)
select="'DRUGS=DAA_FILL:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,169,0)
       <xsl:with-param name="title" select="'DAA Start Date'"/>
"KRN",.84,7981022.001,2,170,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,171,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,172,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,173,0)
       <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981022.001,2,174,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,175,0)
select="'DRUGS=RXNAME:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,176,0)
       <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981022.001,2,177,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,178,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,179,0)
       <xsl:with-param name="colname" select="'FILL_DATE'"/>
"KRN",.84,7981022.001,2,180,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,181,0)
select="'DRUGS=FILL_DATE:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,182,0)
       <xsl:with-param name="title" select="'Fill Date'"/>
"KRN",.84,7981022.001,2,183,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,184,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,185,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,186,0)
       <xsl:with-param name="colname" select="'DAYSPLY'"/>
"KRN",.84,7981022.001,2,187,0)
      <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,188,0)
select="'DRUGS=DAYSPLY:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,189,0)
       <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981022.001,2,190,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,191,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,192,0)
     </tr>
"KRN",.84,7981022.001,2,193,0)
    </thead>
"KRN",.84,7981022.001,2,194,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,195,0)
     <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981022.001,2,196,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,197,0)
    <tbody>
"KRN",.84,7981022.001,2,198,0)
     <xsl:for-each select="key('patient-drug',@ID)">
"KRN",.84,7981022.001,2,199,0)
      <xsl:sort select="concat(RXNAME,'',FILL_DATE)"/>
"KRN",.84,7981022.001,2,200,0)
      <tr><xsl:call-template name="DAADrugData"/></tr>
"KRN",.84,7981022.001,2,201,0)
     </xsl:for-each>
"KRN",.84,7981022.001,2,202,0)
    </tbody>
"KRN",.84,7981022.001,2,203,0)
   </table>
"KRN",.84,7981022.001,2,204,0)
   <br />
"KRN",.84,7981022.001,2,205,0)
   <table cellpadding="5" cellspacing="0" style="leftpadding:25px; 
"KRN",.84,7981022.001,2,206,0)
width:80%;">
"KRN",.84,7981022.001,2,207,0)
    <thead>
"KRN",.84,7981022.001,2,208,0)
     <tr>
"KRN",.84,7981022.001,2,209,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,210,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,211,0)
select="'LABTESTS=DATE:DESC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,212,0)
       <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981022.001,2,213,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,214,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,215,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,216,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,217,0)
select="'LABTESTS=LTNAME:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,218,0)
       <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981022.001,2,219,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,220,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,221,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,222,0)
select="'LABTESTS=RESULT:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,223,0)
       <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981022.001,2,224,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,225,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,226,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,227,0)
       <xsl:with-param name="sort" 
"KRN",.84,7981022.001,2,228,0)
select="'LABTESTS=WKS_LAB:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,229,0)
       <xsl:with-param name="title" select="'Weeks Since DAA Start'"/>
"KRN",.84,7981022.001,2,230,0)
       <xsl:with-param name="width" select="'25%'"/>
"KRN",.84,7981022.001,2,231,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,232,0)
     </tr>
"KRN",.84,7981022.001,2,233,0)
    </thead>
"KRN",.84,7981022.001,2,234,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,235,0)
     <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981022.001,2,236,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,237,0)
    <tbody>
"KRN",.84,7981022.001,2,238,0)
     <xsl:for-each select="key('patient-lt',@ID)">
"KRN",.84,7981022.001,2,239,0)
      <xsl:sort select="concat(LTNAME,'&#10;',DATE)"/>
"KRN",.84,7981022.001,2,240,0)
      <tr>
"KRN",.84,7981022.001,2,241,0)
       <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,242,0)
        <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,243,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,244,0)
      </tr>
"KRN",.84,7981022.001,2,245,0)
     </xsl:for-each>
"KRN",.84,7981022.001,2,246,0)
    </tbody>
"KRN",.84,7981022.001,2,247,0)
   </table>
"KRN",.84,7981022.001,2,248,0)
   <br clear="all"/><br/>
"KRN",.84,7981022.001,2,249,0)
  </div>
"KRN",.84,7981022.001,2,250,0)
</xsl:for-each>
"KRN",.84,7981022.001,2,251,0)
</xsl:template>
"KRN",.84,7981022.001,2,252,0)
 
"KRN",.84,7981022.001,2,253,0)
<!--[ TABLES ]-->
"KRN",.84,7981022.001,2,254,0)
 
"KRN",.84,7981022.001,2,255,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981022.001,2,256,0)
<div style="page-break-before:always">
"KRN",.84,7981022.001,2,257,0)
  <h2>Medications</h2>
"KRN",.84,7981022.001,2,258,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,259,0)
   <xsl:when test="$D1">
"KRN",.84,7981022.001,2,260,0)
    <xsl:variable name="SORT" select="/REPORT/DRUGS/@SORT"/>
"KRN",.84,7981022.001,2,261,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,262,0)
     <xsl:choose>
"KRN",.84,7981022.001,2,263,0)
      <xsl:when test="/REPORT/DRUGS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981022.001,2,264,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,265,0)
     </xsl:choose>
"KRN",.84,7981022.001,2,266,0)
    </xsl:variable>
"KRN",.84,7981022.001,2,267,0)
    <div>
"KRN",.84,7981022.001,2,268,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981022.001,2,269,0)
      <xsl:with-param name="condition" select="DRUG[31]"/>
"KRN",.84,7981022.001,2,270,0)
     </xsl:call-template>
"KRN",.84,7981022.001,2,271,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,272,0)
      <thead>
"KRN",.84,7981022.001,2,273,0)
       <tr>
"KRN",.84,7981022.001,2,274,0)
        <xsl:call-template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,275,0)
         <xsl:with-param name="tblname" select="'DRUGS'"/>
"KRN",.84,7981022.001,2,276,0)
         <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,277,0)
         <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,278,0)
         <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,279,0)
         <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,280,0)
         <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,281,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,282,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,283,0)
         <xsl:with-param name="colname" select="'DAA_FILL'"/>
"KRN",.84,7981022.001,2,284,0)
         <xsl:with-param name="sort" select="'DRUGS=DAA_FILL'"/>
"KRN",.84,7981022.001,2,285,0)
         <xsl:with-param name="title" select="'DAA Start Date'"/>
"KRN",.84,7981022.001,2,286,0)
         <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,287,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,288,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,289,0)
         <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981022.001,2,290,0)
         <xsl:with-param name="sort" select="'DRUGS=RXNAME'"/>
"KRN",.84,7981022.001,2,291,0)
        <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981022.001,2,292,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,293,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,294,0)
         <xsl:with-param name="colname" select="'FILL_DATE'"/>
"KRN",.84,7981022.001,2,295,0)
         <xsl:with-param name="sort" select="'DRUGS=FILL_DATE'"/>
"KRN",.84,7981022.001,2,296,0)
         <xsl:with-param name="title" select="'Fill Date'"/>
"KRN",.84,7981022.001,2,297,0)
         <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,298,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,299,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,300,0)
         <xsl:with-param name="colname" select="'DAYSPLY'"/>
"KRN",.84,7981022.001,2,301,0)
         <xsl:with-param name="sort" select="'DRUGS=DAYSPLY'"/>
"KRN",.84,7981022.001,2,302,0)
         <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981022.001,2,303,0)
         <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981022.001,2,304,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,305,0)
       </tr>
"KRN",.84,7981022.001,2,306,0)
      </thead>
"KRN",.84,7981022.001,2,307,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,308,0)
       <xsl:with-param name="colspan" select="15"/>    <!-- Make bigger 
"KRN",.84,7981022.001,2,309,0)
than number of columns -->
"KRN",.84,7981022.001,2,310,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,311,0)
      <tbody>
"KRN",.84,7981022.001,2,312,0)
       <xsl:choose>
"KRN",.84,7981022.001,2,313,0)
        <xsl:when test="$PTSDRUGS">
"KRN",.84,7981022.001,2,314,0)
         <xsl:for-each 
"KRN",.84,7981022.001,2,315,0)
select="DRUG[generate-id(.)=generate-id(key('patient-drug',@ID))]">
"KRN",.84,7981022.001,2,316,0)
          <xsl:call-template name="DAAPatientDrugData">
"KRN",.84,7981022.001,2,317,0)
           <xsl:with-param name="group" select="key('patient-drug',@ID)"/>
"KRN",.84,7981022.001,2,318,0)
          </xsl:call-template>
"KRN",.84,7981022.001,2,319,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,320,0)
        </xsl:when>
"KRN",.84,7981022.001,2,321,0)
        <xsl:otherwise> 
"KRN",.84,7981022.001,2,322,0)
         <xsl:for-each select="DRUG">
"KRN",.84,7981022.001,2,323,0)
          <!--xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981022.001,2,324,0)
order="{$SORTORD}"/-->
"KRN",.84,7981022.001,2,325,0)
          <xsl:sort select="concat(NAME,'',RXNAME,'',FILL_DATE)"/>
"KRN",.84,7981022.001,2,326,0)
          <tr>
"KRN",.84,7981022.001,2,327,0)
           <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,328,0)
             <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,329,0)
             <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,330,0)
             <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,331,0)
             <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,332,0)
             <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,333,0)
           </xsl:call-template>
"KRN",.84,7981022.001,2,334,0)
           <xsl:call-template name="DAADrugData"/>
"KRN",.84,7981022.001,2,335,0)
          </tr>
"KRN",.84,7981022.001,2,336,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,337,0)
        </xsl:otherwise>
"KRN",.84,7981022.001,2,338,0)
       </xsl:choose>
"KRN",.84,7981022.001,2,339,0)
      </tbody>
"KRN",.84,7981022.001,2,340,0)
     </table>
"KRN",.84,7981022.001,2,341,0)
    </div>
"KRN",.84,7981022.001,2,342,0)
   </xsl:when>
"KRN",.84,7981022.001,2,343,0)
   <xsl:otherwise>
"KRN",.84,7981022.001,2,344,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,345,0)
   </xsl:otherwise>
"KRN",.84,7981022.001,2,346,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,347,0)
</div>
"KRN",.84,7981022.001,2,348,0)
</xsl:template>
"KRN",.84,7981022.001,2,349,0)
 
"KRN",.84,7981022.001,2,350,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981022.001,2,351,0)
<div style="page-break-before:always">
"KRN",.84,7981022.001,2,352,0)
  <h2>Lab Results</h2>
"KRN",.84,7981022.001,2,353,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,354,0)
   <xsl:when test="$L1">
"KRN",.84,7981022.001,2,355,0)
    <xsl:variable name="SORT" select="/REPORT/LABTESTS/@SORT"/>
"KRN",.84,7981022.001,2,356,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,357,0)
     <xsl:choose>
"KRN",.84,7981022.001,2,358,0)
      <xsl:when test="/REPORT/LABTESTS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981022.001,2,359,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,360,0)
     </xsl:choose>
"KRN",.84,7981022.001,2,361,0)
    </xsl:variable>
"KRN",.84,7981022.001,2,362,0)
    <div>
"KRN",.84,7981022.001,2,363,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981022.001,2,364,0)
     <xsl:with-param name="condition" select="LT[31]"/>
"KRN",.84,7981022.001,2,365,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,366,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,367,0)
      <thead>
"KRN",.84,7981022.001,2,368,0)
       <tr>
"KRN",.84,7981022.001,2,369,0)
        <xsl:call-template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,370,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981022.001,2,371,0)
         <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,372,0)
         <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,373,0)
         <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,374,0)
         <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,375,0)
         <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,376,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,377,0)
        <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981022.001,2,378,0)
         <xsl:with-param name="colname" select="'LTNAME'"/>
"KRN",.84,7981022.001,2,379,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981022.001,2,380,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,381,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,382,0)
         <xsl:with-param name="colname" select="'WKS_LAB'"/>
"KRN",.84,7981022.001,2,383,0)
         <xsl:with-param name="sort" select="'LABTESTS=WKS_LAB'"/>
"KRN",.84,7981022.001,2,384,0)
         <xsl:with-param name="title" select="'Weeks Since DAA Start'"/>
"KRN",.84,7981022.001,2,385,0)
         <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981022.001,2,386,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,387,0)
       </tr>
"KRN",.84,7981022.001,2,388,0)
      </thead>
"KRN",.84,7981022.001,2,389,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,390,0)
       <xsl:with-param name="colspan" select="15"/>    <!-- Make bigger 
"KRN",.84,7981022.001,2,391,0)
than number of columns -->
"KRN",.84,7981022.001,2,392,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,393,0)
      <tbody>
"KRN",.84,7981022.001,2,394,0)
       <xsl:choose>
"KRN",.84,7981022.001,2,395,0)
        <xsl:when test="$PTSLABS">
"KRN",.84,7981022.001,2,396,0)
         <xsl:for-each 
"KRN",.84,7981022.001,2,397,0)
select="LT[generate-id(.)=generate-id(key('patient-lt',@ID))]">
"KRN",.84,7981022.001,2,398,0)
          <xsl:call-template name="DAAPatientLabData">
"KRN",.84,7981022.001,2,399,0)
           <xsl:with-param name="group" select="key('patient-lt',@ID)"/>
"KRN",.84,7981022.001,2,400,0)
          </xsl:call-template>
"KRN",.84,7981022.001,2,401,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,402,0)
        </xsl:when>
"KRN",.84,7981022.001,2,403,0)
        <xsl:otherwise>
"KRN",.84,7981022.001,2,404,0)
         <xsl:for-each select="LT">
"KRN",.84,7981022.001,2,405,0)
          <xsl:sort select="concat(./*[name()=$SORT],'&#10;',NAME)" 
"KRN",.84,7981022.001,2,406,0)
order="{$SORTORD}"/>
"KRN",.84,7981022.001,2,407,0)
          <tr>
"KRN",.84,7981022.001,2,408,0)
           <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,409,0)
            <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,410,0)
            <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,411,0)
            <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,412,0)
            <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,413,0)
            <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,414,0)
           </xsl:call-template>
"KRN",.84,7981022.001,2,415,0)
           <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,416,0)
            <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,417,0)
           </xsl:call-template>
"KRN",.84,7981022.001,2,418,0)
          </tr>
"KRN",.84,7981022.001,2,419,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,420,0)
        </xsl:otherwise>
"KRN",.84,7981022.001,2,421,0)
       </xsl:choose>
"KRN",.84,7981022.001,2,422,0)
      </tbody>
"KRN",.84,7981022.001,2,423,0)
     </table>
"KRN",.84,7981022.001,2,424,0)
    </div>
"KRN",.84,7981022.001,2,425,0)
   </xsl:when>
"KRN",.84,7981022.001,2,426,0)
   <xsl:otherwise>
"KRN",.84,7981022.001,2,427,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,428,0)
   </xsl:otherwise>
"KRN",.84,7981022.001,2,429,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,430,0)
</div>
"KRN",.84,7981022.001,2,431,0)
</xsl:template>
"KRN",.84,7981022.001,2,432,0)
 
"KRN",.84,7981022.001,2,433,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981022.001,2,434,0)
<div style="page-break-before:always">
"KRN",.84,7981022.001,2,435,0)
  <h2>Patients</h2>
"KRN",.84,7981022.001,2,436,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981022.001,2,437,0)
</div>
"KRN",.84,7981022.001,2,438,0)
</xsl:template>
"KRN",.84,7981022.001,2,439,0)
 
"KRN",.84,7981022.001,2,440,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981022.001,2,441,0)
 
"KRN",.84,7981022.001,2,442,0)
<xsl:template name="DAADrugData">
"KRN",.84,7981022.001,2,443,0)
<xsl:param name="rowspan" select="'1'"/>
"KRN",.84,7981022.001,2,444,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,445,0)
  <xsl:with-param name="value" select="DAA_FILL"/>
"KRN",.84,7981022.001,2,446,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.001,2,447,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,448,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,449,0)
  <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981022.001,2,450,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,451,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,452,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,453,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,454,0)
  <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981022.001,2,455,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.001,2,456,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,457,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,458,0)
  <xsl:with-param name="value" select="DAYSPLY"/>
"KRN",.84,7981022.001,2,459,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,460,0)
</xsl:template>
"KRN",.84,7981022.001,2,461,0)
 
"KRN",.84,7981022.001,2,462,0)
<xsl:template name="DAAPatientDrugData">
"KRN",.84,7981022.001,2,463,0)
<xsl:param name="group"/>
"KRN",.84,7981022.001,2,464,0)
<xsl:param name="number" select="position()"/>
"KRN",.84,7981022.001,2,465,0)
<xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981022.001,2,466,0)
<xsl:for-each select="$group">
"KRN",.84,7981022.001,2,467,0)
  <tr>
"KRN",.84,7981022.001,2,468,0)
   <xsl:if test="position()=1">
"KRN",.84,7981022.001,2,469,0)
    <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,470,0)
     <xsl:with-param name="number"  select="$number"/>
"KRN",.84,7981022.001,2,471,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,472,0)
     <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,473,0)
     <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,474,0)
     <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,475,0)
     <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,476,0)
     <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,477,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,478,0)
   </xsl:if>
"KRN",.84,7981022.001,2,479,0)
   <xsl:call-template name="DAADrugData"/>
"KRN",.84,7981022.001,2,480,0)
  </tr>
"KRN",.84,7981022.001,2,481,0)
</xsl:for-each>
"KRN",.84,7981022.001,2,482,0)
</xsl:template>
"KRN",.84,7981022.001,2,483,0)
 
"KRN",.84,7981022.001,2,484,0)
<xsl:template name="DAAPatientLabData">
"KRN",.84,7981022.001,2,485,0)
<xsl:param name="group"/>
"KRN",.84,7981022.001,2,486,0)
<xsl:param name="number" select="position()"/>
"KRN",.84,7981022.001,2,487,0)
<xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981022.001,2,488,0)
<xsl:for-each select="$group">
"KRN",.84,7981022.001,2,489,0)
  <tr>
"KRN",.84,7981022.001,2,490,0)
   <xsl:if test="position()=1">
"KRN",.84,7981022.001,2,491,0)
   <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,492,0)
     <xsl:with-param name="number"  select="$number"/>
"KRN",.84,7981022.001,2,493,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,494,0)
     <xsl:with-param name="ageyes"  select="$AGE_YES"/>
"KRN",.84,7981022.001,2,495,0)
     <xsl:with-param name="dobyes"  select="$DOB_YES"/>
"KRN",.84,7981022.001,2,496,0)
     <xsl:with-param name="icnyes"  select="$ICN_YES"/>
"KRN",.84,7981022.001,2,497,0)
     <xsl:with-param name="pactyes" select="$PACT_YES"/>
"KRN",.84,7981022.001,2,498,0)
     <xsl:with-param name="pcpyes"  select="$PCP_YES"/>
"KRN",.84,7981022.001,2,499,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,500,0)
   </xsl:if>
"KRN",.84,7981022.001,2,501,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,502,0)
    <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,503,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,504,0)
  </tr>
"KRN",.84,7981022.001,2,505,0)
</xsl:for-each>
"KRN",.84,7981022.001,2,506,0)
</xsl:template>
"KRN",.84,7981022.001,2,507,0)
 
"KRN",.84,7981022.001,2,508,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981022.001,2,509,0)
 
"KRN",.84,7981022.001,2,510,0)
<xsl:template match="PARAMETERS/DATE_RANGE_4">
"KRN",.84,7981022.001,2,511,0)
<xsl:call-template name="DateRange">
"KRN",.84,7981022.001,2,512,0)
  <xsl:with-param name="title" select="'DAA Start'"/>
"KRN",.84,7981022.001,2,513,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,514,0)
<xsl:if test="../WEEKS_AFTER">
"KRN",.84,7981022.001,2,515,0)
  <tr>
"KRN",.84,7981022.001,2,516,0)
   <th scope="row">DAA Lab Options:&#160;</th>
"KRN",.84,7981022.001,2,517,0)
   <td>
"KRN",.84,7981022.001,2,518,0)
     <xsl:text>Include labs done </xsl:text>
"KRN",.84,7981022.001,2,519,0)
     <xsl:value-of select="../WEEKS_AFTER"/>
"KRN",.84,7981022.001,2,520,0)
     <xsl:text> weeks after the DAA start</xsl:text>
"KRN",.84,7981022.001,2,521,0)
     <xsl:if test="(../WEEKS_AFTER[1]/@MOST_RECENT='1')">
"KRN",.84,7981022.001,2,522,0)
       <br />
"KRN",.84,7981022.001,2,523,0)
       <xsl:text>Include two most recent prior to DAA start 
"KRN",.84,7981022.001,2,524,0)
date</xsl:text>
"KRN",.84,7981022.001,2,525,0)
     </xsl:if>
"KRN",.84,7981022.001,2,526,0)
   </td>
"KRN",.84,7981022.001,2,527,0)
  </tr>
"KRN",.84,7981022.001,2,528,0)
</xsl:if>
"KRN",.84,7981022.001,2,529,0)
</xsl:template>
"KRN",.84,7981022.001,2,530,0)
 
"KRN",.84,7981022.001,2,531,0)
<xsl:template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,532,0)
<xsl:param name="rowspan" select="1"/>
"KRN",.84,7981022.001,2,533,0)
<xsl:param name="seqnum"  select="1"/>
"KRN",.84,7981022.001,2,534,0)
<xsl:param name="tblname" select="'PATIENTS'"/>
"KRN",.84,7981022.001,2,535,0)
<xsl:param name="ageyes"  select="''"/>
"KRN",.84,7981022.001,2,536,0)
<xsl:param name="dobyes"  select="''"/>
"KRN",.84,7981022.001,2,537,0)
<xsl:param name="icnyes"  select="''"/>
"KRN",.84,7981022.001,2,538,0)
<xsl:param name="pactyes" select="''"/>
"KRN",.84,7981022.001,2,539,0)
<xsl:param name="pcpyes"  select="''"/>
"KRN",.84,7981022.001,2,540,0)
<xsl:if test="$seqnum">
"KRN",.84,7981022.001,2,541,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,542,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,543,0)
   <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981022.001,2,544,0)
   <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981022.001,2,545,0)
   <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,546,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,547,0)
</xsl:if>
"KRN",.84,7981022.001,2,548,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,549,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,550,0)
  <xsl:with-param name="sort" select="concat($tblname,'=NAME')"/>
"KRN",.84,7981022.001,2,551,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981022.001,2,552,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,553,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,554,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,555,0)
  <xsl:with-param name="sort" select="concat($tblname,'=LAST4')"/>
"KRN",.84,7981022.001,2,556,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981022.001,2,557,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,558,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,559,0)
<xsl:if test="$ageyes">
"KRN",.84,7981022.001,2,560,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,561,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,562,0)
    <xsl:with-param name="sort" select="concat($tblname,'=AGE')"/>
"KRN",.84,7981022.001,2,563,0)
    <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981022.001,2,564,0)
    <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,565,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,566,0)
</xsl:if>
"KRN",.84,7981022.001,2,567,0)
<xsl:if test="$dobyes">
"KRN",.84,7981022.001,2,568,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,569,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,570,0)
    <xsl:with-param name="sort" select="concat($tblname,'=DOB')"/>
"KRN",.84,7981022.001,2,571,0)
    <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981022.001,2,572,0)
    <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981022.001,2,573,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,574,0)
</xsl:if>
"KRN",.84,7981022.001,2,575,0)
<xsl:if test="$icnyes">
"KRN",.84,7981022.001,2,576,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,577,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,578,0)
    <xsl:with-param name="sort" select="concat($tblname,'=ICN')"/>
"KRN",.84,7981022.001,2,579,0)
    <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981022.001,2,580,0)
    <xsl:with-param name="width" select="'13%'"/>
"KRN",.84,7981022.001,2,581,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,582,0)
</xsl:if>
"KRN",.84,7981022.001,2,583,0)
<xsl:if test="$pactyes">
"KRN",.84,7981022.001,2,584,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,585,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,586,0)
    <xsl:with-param name="sort" select="concat($tblname,'=PACT')"/>
"KRN",.84,7981022.001,2,587,0)
    <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981022.001,2,588,0)
    <xsl:with-param name="width" select="'16%'"/>
"KRN",.84,7981022.001,2,589,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,590,0)
</xsl:if>
"KRN",.84,7981022.001,2,591,0)
<xsl:if test="$pcpyes">
"KRN",.84,7981022.001,2,592,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,593,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,594,0)
    <xsl:with-param name="sort" select="concat($tblname,'=PCP')"/>
"KRN",.84,7981022.001,2,595,0)
    <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981022.001,2,596,0)
    <xsl:with-param name="width" select="'18%'"/>
"KRN",.84,7981022.001,2,597,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,598,0)
</xsl:if>
"KRN",.84,7981022.001,2,599,0)
</xsl:template>
"KRN",.84,7981022.001,2,600,0)
 
"KRN",.84,7981022.001,2,601,0)
<xsl:template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,602,0)
<xsl:param name="rowspan" select="1"/>
"KRN",.84,7981022.001,2,603,0)
<xsl:param name="seqnum"  select="1"/>
"KRN",.84,7981022.001,2,604,0)
<xsl:param name="number"  select="position()"/>
"KRN",.84,7981022.001,2,605,0)
<xsl:param name="ageyes"  select="''"/>
"KRN",.84,7981022.001,2,606,0)
<xsl:param name="dobyes"  select="''"/>
"KRN",.84,7981022.001,2,607,0)
<xsl:param name="icnyes"  select="''"/>
"KRN",.84,7981022.001,2,608,0)
<xsl:param name="pactyes" select="''"/>
"KRN",.84,7981022.001,2,609,0)
<xsl:param name="pcpyes"  select="''"/>
"KRN",.84,7981022.001,2,610,0)
<xsl:if test="$seqnum">
"KRN",.84,7981022.001,2,611,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,612,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,613,0)
   <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981022.001,2,614,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,615,0)
</xsl:if>
"KRN",.84,7981022.001,2,616,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,617,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,618,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.001,2,619,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,620,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,621,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,622,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,623,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.001,2,624,0)
</xsl:call-template>
"KRN",.84,7981022.001,2,625,0)
<xsl:if test="$ageyes">
"KRN",.84,7981022.001,2,626,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,627,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,628,0)
   <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981022.001,2,629,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,630,0)
</xsl:if>
"KRN",.84,7981022.001,2,631,0)
<xsl:if test="$dobyes">
"KRN",.84,7981022.001,2,632,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,633,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,634,0)
   <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981022.001,2,635,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.001,2,636,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,637,0)
</xsl:if>
"KRN",.84,7981022.001,2,638,0)
<xsl:if test="$icnyes">
"KRN",.84,7981022.001,2,639,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,640,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,641,0)
   <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981022.001,2,642,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,643,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,644,0)
</xsl:if>
"KRN",.84,7981022.001,2,645,0)
<xsl:if test="$pactyes">
"KRN",.84,7981022.001,2,646,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,647,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,648,0)
   <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981022.001,2,649,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,650,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,651,0)
</xsl:if>
"KRN",.84,7981022.001,2,652,0)
<xsl:if test="$pcpyes">
"KRN",.84,7981022.001,2,653,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,654,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,655,0)
   <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981022.001,2,656,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,657,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,658,0)
</xsl:if>
"KRN",.84,7981022.001,2,659,0)
</xsl:template>
"KRN",.84,7981022.001,2,660,0)
 
"KRN",.84,7981022.001,2,661,0)
</xsl:stylesheet>
"KRN",.84,7981022.001,3,0)
^.845A^1^1
"KRN",.84,7981022.001,3,1,0)
  
"KRN",.84,7981024.001,-1)
0^11
"KRN",.84,7981024.001,0)
7981024.001^2^^CLINICAL CASE REGISTRIES^Hepatitis A Report (HTML)
"KRN",.84,7981024.001,2,0)
^^289^289^3180418^
"KRN",.84,7981024.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981024.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981024.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981024.001,2,4,0)
 
"KRN",.84,7981024.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981024.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981024.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981024.001,2,8,0)
 
"KRN",.84,7981024.001,2,9,0)
<!-- Determine if vaccine parameters have been chosen for the report -->
"KRN",.84,7981024.001,2,10,0)
<xsl:variable name="D1" 
"KRN",.84,7981024.001,2,11,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981024.001,2,12,0)
<xsl:variable name="D2" 
"KRN",.84,7981024.001,2,13,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981024.001,2,14,0)
<xsl:variable name="D3" select="REPORT/PARAMETERS/DATE_RANGE_7"/>
"KRN",.84,7981024.001,2,15,0)
 
"KRN",.84,7981024.001,2,16,0)
<xsl:template match="/">
"KRN",.84,7981024.001,2,17,0)
  <html>
"KRN",.84,7981024.001,2,18,0)
    <head>
"KRN",.84,7981024.001,2,19,0)
      <title>Hepatitis A Report</title>
"KRN",.84,7981024.001,2,20,0)
      <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981024.001,2,21,0)
    </head>
"KRN",.84,7981024.001,2,22,0)
    <body>
"KRN",.84,7981024.001,2,23,0)
      <h1>Hepatitis A Report</h1>
"KRN",.84,7981024.001,2,24,0)
      <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981024.001,2,25,0)
      <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981024.001,2,26,0)
 
"KRN",.84,7981024.001,2,27,0)
        <xsl:if test="$D3">
"KRN",.84,7981024.001,2,28,0)
          Lab tests used to calculate scores are identified by LOINC code.
"KRN",.84,7981024.001,2,29,0)
          If the values shown for test results appear unusual,
"KRN",.84,7981024.001,2,30,0)
          contact your local Lab ADPAC to verify that LOINC codes are set 
"KRN",.84,7981024.001,2,31,0)
up
"KRN",.84,7981024.001,2,32,0)
          correctly. The LOINC codes that are used are:
"KRN",.84,7981024.001,2,33,0)
          <br/>
"KRN",.84,7981024.001,2,34,0)
          <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981024.001,2,35,0)
        </xsl:if>
"KRN",.84,7981024.001,2,36,0)
      </div>
"KRN",.84,7981024.001,2,37,0)
      <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981024.001,2,38,0)
        <br />
"KRN",.84,7981024.001,2,39,0)
        <!-- The following line changed to fix page break issue in IE 7 
"KRN",.84,7981024.001,2,40,0)
-->
"KRN",.84,7981024.001,2,41,0)
        <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981024.001,2,42,0)
border:0">
"KRN",.84,7981024.001,2,43,0)
          <span style="visibility: hidden">-</span>
"KRN",.84,7981024.001,2,44,0)
        </div>
"KRN",.84,7981024.001,2,45,0)
        <div>
"KRN",.84,7981024.001,2,46,0)
          <xsl:call-template name="MakeScrollable">
"KRN",.84,7981024.001,2,47,0)
            <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981024.001,2,48,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,49,0)
          <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981024.001,2,50,0)
        </div>
"KRN",.84,7981024.001,2,51,0)
      </xsl:if>
"KRN",.84,7981024.001,2,52,0)
    </body>
"KRN",.84,7981024.001,2,53,0)
  </html>
"KRN",.84,7981024.001,2,54,0)
</xsl:template>
"KRN",.84,7981024.001,2,55,0)
 
"KRN",.84,7981024.001,2,56,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981024.001,2,57,0)
  <table cellpadding="5" cellspacing="0">
"KRN",.84,7981024.001,2,58,0)
    <thead>
"KRN",.84,7981024.001,2,59,0)
      <tr>
"KRN",.84,7981024.001,2,60,0)
        <th>LOINC Codes</th>
"KRN",.84,7981024.001,2,61,0)
      </tr>
"KRN",.84,7981024.001,2,62,0)
    </thead>
"KRN",.84,7981024.001,2,63,0)
    <tbody>
"KRN",.84,7981024.001,2,64,0)
      <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981024.001,2,65,0)
        <tr>
"KRN",.84,7981024.001,2,66,0)
          <td class="aLeft">
"KRN",.84,7981024.001,2,67,0)
            <xsl:value-of select="@CODE"/>
"KRN",.84,7981024.001,2,68,0)
          </td>
"KRN",.84,7981024.001,2,69,0)
        </tr>
"KRN",.84,7981024.001,2,70,0)
      </xsl:for-each>
"KRN",.84,7981024.001,2,71,0)
    </tbody>
"KRN",.84,7981024.001,2,72,0)
  </table>
"KRN",.84,7981024.001,2,73,0)
</xsl:template>
"KRN",.84,7981024.001,2,74,0)
 
"KRN",.84,7981024.001,2,75,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981024.001,2,76,0)
 
"KRN",.84,7981024.001,2,77,0)
<xsl:template match="PARAMETERS/DATE_RANGE_6">
"KRN",.84,7981024.001,2,78,0)
  <xsl:if test="$D2">
"KRN",.84,7981024.001,2,79,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981024.001,2,80,0)
     <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981024.001,2,81,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,82,0)
  </xsl:if>
"KRN",.84,7981024.001,2,83,0)
</xsl:template>
"KRN",.84,7981024.001,2,84,0)
 
"KRN",.84,7981024.001,2,85,0)
<xsl:template match="PARAMETERS/DATE_RANGE_7">
"KRN",.84,7981024.001,2,86,0)
  <xsl:if test="$D1">
"KRN",.84,7981024.001,2,87,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981024.001,2,88,0)
     <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981024.001,2,89,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,90,0)
  </xsl:if>
"KRN",.84,7981024.001,2,91,0)
</xsl:template>
"KRN",.84,7981024.001,2,92,0)
 
"KRN",.84,7981024.001,2,93,0)
<xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981024.001,2,94,0)
  <xsl:variable name="PTCOLS" select="../COLUMN[@NAME='PATIENTS']"/>
"KRN",.84,7981024.001,2,95,0)
  <xsl:variable name="VACLST" select="../COLUMN[@NAME='VACCINES']"/>
"KRN",.84,7981024.001,2,96,0)
  <xsl:variable name="IMMLST" select="../COLUMN[@NAME='LABTESTS']"/>
"KRN",.84,7981024.001,2,97,0)
  <xsl:variable name="ICNCOL" select="../COLUMN[@NAME='ICN']"/>
"KRN",.84,7981024.001,2,98,0)
 
"KRN",.84,7981024.001,2,99,0)
  <thead>
"KRN",.84,7981024.001,2,100,0)
    <tr>
"KRN",.84,7981024.001,2,101,0)
      <xsl:choose>
"KRN",.84,7981024.001,2,102,0)
        <xsl:when test="$AGE_YES or $DOB_YES">
"KRN",.84,7981024.001,2,103,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,104,0)
            <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981024.001,2,105,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981024.001,2,106,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,107,0)
            <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981024.001,2,108,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,109,0)
        </xsl:when>
"KRN",.84,7981024.001,2,110,0)
        <xsl:otherwise>
"KRN",.84,7981024.001,2,111,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,112,0)
            <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981024.001,2,113,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981024.001,2,114,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,115,0)
            <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981024.001,2,116,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,117,0)
        </xsl:otherwise>
"KRN",.84,7981024.001,2,118,0)
      </xsl:choose> 
"KRN",.84,7981024.001,2,119,0)
 
"KRN",.84,7981024.001,2,120,0)
      <xsl:if test="$D2">
"KRN",.84,7981024.001,2,121,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,122,0)
          <xsl:with-param name="column" select="$VACLST"/>
"KRN",.84,7981024.001,2,123,0)
          <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981024.001,2,124,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,125,0)
          <xsl:with-param name="colspan" select="2"/>
"KRN",.84,7981024.001,2,126,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,127,0)
      </xsl:if>
"KRN",.84,7981024.001,2,128,0)
 
"KRN",.84,7981024.001,2,129,0)
      <xsl:if test="$D1">
"KRN",.84,7981024.001,2,130,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,131,0)
          <xsl:with-param name="column" select="$IMMLST"/>
"KRN",.84,7981024.001,2,132,0)
          <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981024.001,2,133,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981024.001,2,134,0)
          <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981024.001,2,135,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,136,0)
      </xsl:if>
"KRN",.84,7981024.001,2,137,0)
 
"KRN",.84,7981024.001,2,138,0)
      <xsl:if test="$ICN_YES or $PACT_YES or $PCP_YES or $APPT_YES">
"KRN",.84,7981024.001,2,139,0)
        <xsl:variable name="COLCOUNT" select="number($ICN_YES)+
"KRN",.84,7981024.001,2,140,0)
                      
"KRN",.84,7981024.001,2,141,0)
number($PACT_YES)+number($PCP_YES)+number($APPT_YES)"/>
"KRN",.84,7981024.001,2,142,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,143,0)
          <xsl:with-param name="column" select="$ICNCOL"/>
"KRN",.84,7981024.001,2,144,0)
          <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981024.001,2,145,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981024.001,2,146,0)
          <xsl:with-param name="colspan" select="$COLCOUNT"/>
"KRN",.84,7981024.001,2,147,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,148,0)
      </xsl:if>
"KRN",.84,7981024.001,2,149,0)
    </tr>
"KRN",.84,7981024.001,2,150,0)
 
"KRN",.84,7981024.001,2,151,0)
    <tr>
"KRN",.84,7981024.001,2,152,0)
      <xsl:choose>
"KRN",.84,7981024.001,2,153,0)
        <xsl:when test="$AGE_YES or $DOB_YES">
"KRN",.84,7981024.001,2,154,0)
          <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981024.001,2,155,0)
            <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981024.001,2,156,0)
            <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981024.001,2,157,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,158,0)
        </xsl:when>
"KRN",.84,7981024.001,2,159,0)
        <xsl:otherwise>
"KRN",.84,7981024.001,2,160,0)
          <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981024.001,2,161,0)
            <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981024.001,2,162,0)
            <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981024.001,2,163,0)
          </xsl:call-template>
"KRN",.84,7981024.001,2,164,0)
        </xsl:otherwise>
"KRN",.84,7981024.001,2,165,0)
      </xsl:choose> 
"KRN",.84,7981024.001,2,166,0)
 
"KRN",.84,7981024.001,2,167,0)
      <xsl:if test="$D2">
"KRN",.84,7981024.001,2,168,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,169,0)
          <xsl:with-param name="column" select="VAC_NAME"/>
"KRN",.84,7981024.001,2,170,0)
          <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981024.001,2,171,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981024.001,2,172,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,173,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,174,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,175,0)
          <xsl:with-param name="column" select="VAC_DATE"/>
"KRN",.84,7981024.001,2,176,0)
          <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981024.001,2,177,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,178,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,179,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,180,0)
      </xsl:if>
"KRN",.84,7981024.001,2,181,0)
 
"KRN",.84,7981024.001,2,182,0)
      <xsl:if test="$D1">
"KRN",.84,7981024.001,2,183,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,184,0)
          <xsl:with-param name="column" select="LTNAME"/>
"KRN",.84,7981024.001,2,185,0)
          <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981024.001,2,186,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981024.001,2,187,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,188,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,189,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,190,0)
          <xsl:with-param name="column" select="DATE"/>
"KRN",.84,7981024.001,2,191,0)
          <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981024.001,2,192,0)
          <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,193,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,194,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,195,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,196,0)
          <xsl:with-param name="column" select="RESULT"/>
"KRN",.84,7981024.001,2,197,0)
          <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981024.001,2,198,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,199,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,200,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,201,0)
      </xsl:if>
"KRN",.84,7981024.001,2,202,0)
 
"KRN",.84,7981024.001,2,203,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981024.001,2,204,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,205,0)
          <xsl:with-param name="column" select="ICN"/>
"KRN",.84,7981024.001,2,206,0)
          <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981024.001,2,207,0)
          <xsl:with-param name="sort" select="'PATIENTS=ICN'"/>
"KRN",.84,7981024.001,2,208,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,209,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,210,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,211,0)
      </xsl:if>
"KRN",.84,7981024.001,2,212,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981024.001,2,213,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,214,0)
          <xsl:with-param name="column" select="PACT"/>
"KRN",.84,7981024.001,2,215,0)
          <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981024.001,2,216,0)
          <xsl:with-param name="sort" select="'PATIENTS=PACT'"/>
"KRN",.84,7981024.001,2,217,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,218,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,219,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,220,0)
      </xsl:if>
"KRN",.84,7981024.001,2,221,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981024.001,2,222,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,223,0)
          <xsl:with-param name="column" select="PCP"/>
"KRN",.84,7981024.001,2,224,0)
          <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981024.001,2,225,0)
          <xsl:with-param name="sort" select="'PATIENTS=PCP'"/>
"KRN",.84,7981024.001,2,226,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981024.001,2,227,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,228,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,229,0)
      </xsl:if>
"KRN",.84,7981024.001,2,230,0)
      <xsl:if test="$APPT_YES">
"KRN",.84,7981024.001,2,231,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.001,2,232,0)
          <xsl:with-param name="column" select="FUT_APPT"/>
"KRN",.84,7981024.001,2,233,0)
          <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981024.001,2,234,0)
          <xsl:with-param name="sort" select="'PATIENTS=FUT_APPT'"/>
"KRN",.84,7981024.001,2,235,0)
          <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981024.001,2,236,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981024.001,2,237,0)
        </xsl:call-template>
"KRN",.84,7981024.001,2,238,0)
      </xsl:if>
"KRN",.84,7981024.001,2,239,0)
    </tr>
"KRN",.84,7981024.001,2,240,0)
  </thead>
"KRN",.84,7981024.001,2,241,0)
</xsl:template>
"KRN",.84,7981024.001,2,242,0)
 
"KRN",.84,7981024.001,2,243,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981024.001,2,244,0)
 
"KRN",.84,7981024.001,2,245,0)
<xsl:template match="PATIENT/VACCINES">
"KRN",.84,7981024.001,2,246,0)
  <td>
"KRN",.84,7981024.001,2,247,0)
    <xsl:for-each select="VACCINE">
"KRN",.84,7981024.001,2,248,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,249,0)
        <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981024.001,2,250,0)
        <xsl:with-param name="width" select="'9%'"/>
"KRN",.84,7981024.001,2,251,0)
      </xsl:call-template>
"KRN",.84,7981024.001,2,252,0)
      <br />
"KRN",.84,7981024.001,2,253,0)
    </xsl:for-each>
"KRN",.84,7981024.001,2,254,0)
  </td>
"KRN",.84,7981024.001,2,255,0)
  <td>
"KRN",.84,7981024.001,2,256,0)
    <xsl:for-each select="VACCINE">
"KRN",.84,7981024.001,2,257,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,258,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.001,2,259,0)
        <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981024.001,2,260,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981024.001,2,261,0)
      </xsl:call-template>
"KRN",.84,7981024.001,2,262,0)
      <br />
"KRN",.84,7981024.001,2,263,0)
    </xsl:for-each>
"KRN",.84,7981024.001,2,264,0)
  </td>
"KRN",.84,7981024.001,2,265,0)
</xsl:template>
"KRN",.84,7981024.001,2,266,0)
 
"KRN",.84,7981024.001,2,267,0)
<xsl:template match="PATIENT/LABTESTS">
"KRN",.84,7981024.001,2,268,0)
  <td>
"KRN",.84,7981024.001,2,269,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,270,0)
      <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981024.001,2,271,0)
      <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,272,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,273,0)
  </td>
"KRN",.84,7981024.001,2,274,0)
  <td>
"KRN",.84,7981024.001,2,275,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,276,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.001,2,277,0)
      <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981024.001,2,278,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981024.001,2,279,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,280,0)
  </td>
"KRN",.84,7981024.001,2,281,0)
  <td>
"KRN",.84,7981024.001,2,282,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981024.001,2,283,0)
      <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981024.001,2,284,0)
      <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981024.001,2,285,0)
    </xsl:call-template>
"KRN",.84,7981024.001,2,286,0)
  </td>
"KRN",.84,7981024.001,2,287,0)
</xsl:template>
"KRN",.84,7981024.001,2,288,0)
 
"KRN",.84,7981024.001,2,289,0)
</xsl:stylesheet>
"KRN",.84,7981024.001,3,0)
^.845A
"KRN",.84,7981024.001,5,0)
^.841A
"KRN",.84,7981024.002,-1)
0^12
"KRN",.84,7981024.002,0)
7981024.002^2^^CLINICAL CASE REGISTRIES^Hepatitis A Report (CSV)
"KRN",.84,7981024.002,2,0)
^^280^280^3180417^
"KRN",.84,7981024.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981024.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981024.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981024.002,2,4,0)
 
"KRN",.84,7981024.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981024.002,2,6,0)
 
"KRN",.84,7981024.002,2,7,0)
<xsl:variable name="D1" 
"KRN",.84,7981024.002,2,8,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981024.002,2,9,0)
<xsl:variable name="D2" 
"KRN",.84,7981024.002,2,10,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981024.002,2,11,0)
 
"KRN",.84,7981024.002,2,12,0)
<xsl:template match="/">
"KRN",.84,7981024.002,2,13,0)
  <xsl:text>Hepatitis A report</xsl:text>
"KRN",.84,7981024.002,2,14,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981024.002,2,15,0)
</xsl:template>
"KRN",.84,7981024.002,2,16,0)
 
"KRN",.84,7981024.002,2,17,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981024.002,2,18,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981024.002,2,19,0)
  <xsl:variable name="ssn"  select="LAST4"/>
"KRN",.84,7981024.002,2,20,0)
  <xsl:variable name="age"  select="AGE"/>
"KRN",.84,7981024.002,2,21,0)
  <xsl:variable name="dob"  select="DOB"/>
"KRN",.84,7981024.002,2,22,0)
  <xsl:variable name="dod"  select="DOD"/>
"KRN",.84,7981024.002,2,23,0)
  <xsl:variable name="icn"  select="ICN"/>
"KRN",.84,7981024.002,2,24,0)
  <xsl:variable name="pact" select="PACT"/>
"KRN",.84,7981024.002,2,25,0)
  <xsl:variable name="pcp"  select="PCP"/>
"KRN",.84,7981024.002,2,26,0)
  <xsl:variable name="appt" select="FUT_APPT"/>
"KRN",.84,7981024.002,2,27,0)
  <xsl:variable name="ltname" select="LABTESTS/LTNAME"/>
"KRN",.84,7981024.002,2,28,0)
  <xsl:variable name="ltdate" select="LABTESTS/DATE"/>
"KRN",.84,7981024.002,2,29,0)
  <xsl:variable name="ltresult" select="LABTESTS/RESULT"/>
"KRN",.84,7981024.002,2,30,0)
 
"KRN",.84,7981024.002,2,31,0)
  <xsl:choose>
"KRN",.84,7981024.002,2,32,0)
    <xsl:when test="($D2 and $D1) or $D2">
"KRN",.84,7981024.002,2,33,0)
      <xsl:for-each select="VACCINES/VACCINE">
"KRN",.84,7981024.002,2,34,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,35,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,36,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,37,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,38,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,39,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,40,0)
        <xsl:if test="$AGE_YES">
"KRN",.84,7981024.002,2,41,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,42,0)
            <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981024.002,2,43,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,44,0)
        </xsl:if>
"KRN",.84,7981024.002,2,45,0)
        <xsl:if test="$DOB_YES">
"KRN",.84,7981024.002,2,46,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,47,0)
            <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981024.002,2,48,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,49,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,50,0)
        </xsl:if>
"KRN",.84,7981024.002,2,51,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,52,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,53,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,54,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,55,0)
 
"KRN",.84,7981024.002,2,56,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,57,0)
          <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981024.002,2,58,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,59,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,60,0)
          <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981024.002,2,61,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,62,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,63,0)
 
"KRN",.84,7981024.002,2,64,0)
        <xsl:if test="$D1">
"KRN",.84,7981024.002,2,65,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,66,0)
            <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981024.002,2,67,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,68,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,69,0)
            <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981024.002,2,70,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,71,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,72,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,73,0)
            <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981024.002,2,74,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,75,0)
        </xsl:if>
"KRN",.84,7981024.002,2,76,0)
 
"KRN",.84,7981024.002,2,77,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,78,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,79,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,80,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,81,0)
        </xsl:if>
"KRN",.84,7981024.002,2,82,0)
        <xsl:if test="$PACT_YES">
"KRN",.84,7981024.002,2,83,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,84,0)
            <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981024.002,2,85,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,86,0)
        </xsl:if>
"KRN",.84,7981024.002,2,87,0)
        <xsl:if test="$PCP_YES">
"KRN",.84,7981024.002,2,88,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,89,0)
            <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981024.002,2,90,0)
         </xsl:call-template>
"KRN",.84,7981024.002,2,91,0)
        </xsl:if>
"KRN",.84,7981024.002,2,92,0)
        <xsl:if test="$APPT_YES">
"KRN",.84,7981024.002,2,93,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,94,0)
            <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981024.002,2,95,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,96,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,97,0)
        </xsl:if>
"KRN",.84,7981024.002,2,98,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,99,0)
      </xsl:for-each>
"KRN",.84,7981024.002,2,100,0)
    </xsl:when>
"KRN",.84,7981024.002,2,101,0)
 
"KRN",.84,7981024.002,2,102,0)
    <xsl:when test="$D1">
"KRN",.84,7981024.002,2,103,0)
      <xsl:for-each select="LABTESTS">
"KRN",.84,7981024.002,2,104,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,105,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,106,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,107,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,108,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,109,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,110,0)
        <xsl:if test="$AGE_YES">
"KRN",.84,7981024.002,2,111,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,112,0)
            <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981024.002,2,113,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,114,0)
        </xsl:if>
"KRN",.84,7981024.002,2,115,0)
        <xsl:if test="$DOB_YES">
"KRN",.84,7981024.002,2,116,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,117,0)
            <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981024.002,2,118,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,119,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,120,0)
        </xsl:if>
"KRN",.84,7981024.002,2,121,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,122,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,123,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,124,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,125,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,126,0)
          <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981024.002,2,127,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,128,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,129,0)
          <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981024.002,2,130,0)
         <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,131,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,132,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,133,0)
          <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981024.002,2,134,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,135,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,136,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,137,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,138,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,139,0)
        </xsl:if>
"KRN",.84,7981024.002,2,140,0)
        <xsl:if test="$PACT_YES">
"KRN",.84,7981024.002,2,141,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,142,0)
            <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981024.002,2,143,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,144,0)
        </xsl:if>
"KRN",.84,7981024.002,2,145,0)
        <xsl:if test="$PCP_YES">
"KRN",.84,7981024.002,2,146,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,147,0)
            <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981024.002,2,148,0)
         </xsl:call-template>
"KRN",.84,7981024.002,2,149,0)
        </xsl:if>
"KRN",.84,7981024.002,2,150,0)
        <xsl:if test="$APPT_YES">
"KRN",.84,7981024.002,2,151,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,152,0)
            <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981024.002,2,153,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,154,0)
          </xsl:call-template>
"KRN",.84,7981024.002,2,155,0)
        </xsl:if>
"KRN",.84,7981024.002,2,156,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,157,0)
      </xsl:for-each>
"KRN",.84,7981024.002,2,158,0)
    </xsl:when>
"KRN",.84,7981024.002,2,159,0)
      
"KRN",.84,7981024.002,2,160,0)
    <xsl:otherwise>
"KRN",.84,7981024.002,2,161,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,162,0)
        <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981024.002,2,163,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,164,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,165,0)
        <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981024.002,2,166,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,167,0)
      <xsl:if test="$AGE_YES">
"KRN",.84,7981024.002,2,168,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,169,0)
          <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981024.002,2,170,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,171,0)
      </xsl:if>
"KRN",.84,7981024.002,2,172,0)
      <xsl:if test="$DOB_YES">
"KRN",.84,7981024.002,2,173,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,174,0)
          <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981024.002,2,175,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,176,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,177,0)
      </xsl:if>
"KRN",.84,7981024.002,2,178,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,179,0)
        <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981024.002,2,180,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,181,0)
      </xsl:call-template>
"KRN",.84,7981024.002,2,182,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,183,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,184,0)
          <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981024.002,2,185,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,186,0)
      </xsl:if>
"KRN",.84,7981024.002,2,187,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981024.002,2,188,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,189,0)
          <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981024.002,2,190,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,191,0)
      </xsl:if>
"KRN",.84,7981024.002,2,192,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981024.002,2,193,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,194,0)
          <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981024.002,2,195,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,196,0)
      </xsl:if>
"KRN",.84,7981024.002,2,197,0)
      <xsl:if test="$APPT_YES">
"KRN",.84,7981024.002,2,198,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981024.002,2,199,0)
          <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981024.002,2,200,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981024.002,2,201,0)
        </xsl:call-template>
"KRN",.84,7981024.002,2,202,0)
      </xsl:if>
"KRN",.84,7981024.002,2,203,0)
      <xsl:value-of select="$CRLF"/>
"KRN",.84,7981024.002,2,204,0)
    </xsl:otherwise>
"KRN",.84,7981024.002,2,205,0)
  </xsl:choose>
"KRN",.84,7981024.002,2,206,0)
</xsl:template>
"KRN",.84,7981024.002,2,207,0)
 
"KRN",.84,7981024.002,2,208,0)
<xsl:template match="COLUMN[@NAME='VAC_NAME']">
"KRN",.84,7981024.002,2,209,0)
  <xsl:if test="$D2">
"KRN",.84,7981024.002,2,210,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,211,0)
      <xsl:with-param name="title" select="'Vaccine Name'"/>
"KRN",.84,7981024.002,2,212,0)
   </xsl:call-template>
"KRN",.84,7981024.002,2,213,0)
  </xsl:if>
"KRN",.84,7981024.002,2,214,0)
</xsl:template>
"KRN",.84,7981024.002,2,215,0)
 
"KRN",.84,7981024.002,2,216,0)
<xsl:template match="COLUMN[@NAME='VAC_DATE']">
"KRN",.84,7981024.002,2,217,0)
  <xsl:if test="$D2">
"KRN",.84,7981024.002,2,218,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,219,0)
      <xsl:with-param name="title" select="'Vaccine Date'"/>
"KRN",.84,7981024.002,2,220,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,221,0)
  </xsl:if>
"KRN",.84,7981024.002,2,222,0)
</xsl:template>
"KRN",.84,7981024.002,2,223,0)
 
"KRN",.84,7981024.002,2,224,0)
<xsl:template match="COLUMN[@NAME='LTNAME']">
"KRN",.84,7981024.002,2,225,0)
  <xsl:if test="$D1">
"KRN",.84,7981024.002,2,226,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,227,0)
      <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981024.002,2,228,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,229,0)
  </xsl:if>
"KRN",.84,7981024.002,2,230,0)
</xsl:template>
"KRN",.84,7981024.002,2,231,0)
 
"KRN",.84,7981024.002,2,232,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981024.002,2,233,0)
  <xsl:if test="$D1">
"KRN",.84,7981024.002,2,234,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,235,0)
      <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981024.002,2,236,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,237,0)
  </xsl:if>
"KRN",.84,7981024.002,2,238,0)
</xsl:template>
"KRN",.84,7981024.002,2,239,0)
 
"KRN",.84,7981024.002,2,240,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981024.002,2,241,0)
  <xsl:if test="$D1">
"KRN",.84,7981024.002,2,242,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,243,0)
      <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981024.002,2,244,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,245,0)
  </xsl:if>
"KRN",.84,7981024.002,2,246,0)
</xsl:template>
"KRN",.84,7981024.002,2,247,0)
 
"KRN",.84,7981024.002,2,248,0)
<xsl:template match="COLUMN[@NAME='ICN']">
"KRN",.84,7981024.002,2,249,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981024.002,2,250,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,251,0)
      <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981024.002,2,252,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,253,0)
  </xsl:if>
"KRN",.84,7981024.002,2,254,0)
</xsl:template>
"KRN",.84,7981024.002,2,255,0)
 
"KRN",.84,7981024.002,2,256,0)
<xsl:template match="COLUMN[@NAME='PACT']">
"KRN",.84,7981024.002,2,257,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981024.002,2,258,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,259,0)
      <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981024.002,2,260,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,261,0)
  </xsl:if>
"KRN",.84,7981024.002,2,262,0)
</xsl:template>
"KRN",.84,7981024.002,2,263,0)
 
"KRN",.84,7981024.002,2,264,0)
<xsl:template match="COLUMN[@NAME='PCP']">
"KRN",.84,7981024.002,2,265,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981024.002,2,266,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,267,0)
      <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981024.002,2,268,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,269,0)
  </xsl:if>
"KRN",.84,7981024.002,2,270,0)
</xsl:template>
"KRN",.84,7981024.002,2,271,0)
 
"KRN",.84,7981024.002,2,272,0)
<xsl:template match="COLUMN[@NAME='FUT_APPT']">
"KRN",.84,7981024.002,2,273,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981024.002,2,274,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981024.002,2,275,0)
      <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981024.002,2,276,0)
    </xsl:call-template>
"KRN",.84,7981024.002,2,277,0)
  </xsl:if>
"KRN",.84,7981024.002,2,278,0)
</xsl:template>
"KRN",.84,7981024.002,2,279,0)
 
"KRN",.84,7981024.002,2,280,0)
</xsl:stylesheet>
"KRN",.84,7981025.001,-1)
0^13
"KRN",.84,7981025.001,0)
7981025.001^2^^CLINICAL CASE REGISTRIES^Hepatitis B Report (HTML)
"KRN",.84,7981025.001,2,0)
^^289^289^3180418^
"KRN",.84,7981025.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981025.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981025.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981025.001,2,4,0)
 
"KRN",.84,7981025.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981025.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981025.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981025.001,2,8,0)
 
"KRN",.84,7981025.001,2,9,0)
<!-- Determine if vaccine parameters have been chosen for the report -->
"KRN",.84,7981025.001,2,10,0)
<xsl:variable name="D1" 
"KRN",.84,7981025.001,2,11,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981025.001,2,12,0)
<xsl:variable name="D2" 
"KRN",.84,7981025.001,2,13,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981025.001,2,14,0)
<xsl:variable name="D3" select="REPORT/PARAMETERS/DATE_RANGE_7"/>
"KRN",.84,7981025.001,2,15,0)
 
"KRN",.84,7981025.001,2,16,0)
<xsl:template match="/">
"KRN",.84,7981025.001,2,17,0)
  <html>
"KRN",.84,7981025.001,2,18,0)
    <head>
"KRN",.84,7981025.001,2,19,0)
      <title>Hepatitis B Report</title>
"KRN",.84,7981025.001,2,20,0)
      <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981025.001,2,21,0)
    </head>
"KRN",.84,7981025.001,2,22,0)
    <body>
"KRN",.84,7981025.001,2,23,0)
      <h1>Hepatitis B Report</h1>
"KRN",.84,7981025.001,2,24,0)
      <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981025.001,2,25,0)
      <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981025.001,2,26,0)
 
"KRN",.84,7981025.001,2,27,0)
        <xsl:if test="$D3">
"KRN",.84,7981025.001,2,28,0)
          Lab tests used to calculate scores are identified by LOINC code.
"KRN",.84,7981025.001,2,29,0)
          If the values shown for test results appear unusual,
"KRN",.84,7981025.001,2,30,0)
          contact your local Lab ADPAC to verify that LOINC codes are set 
"KRN",.84,7981025.001,2,31,0)
up
"KRN",.84,7981025.001,2,32,0)
          correctly. The LOINC codes that are used are:
"KRN",.84,7981025.001,2,33,0)
          <br/>
"KRN",.84,7981025.001,2,34,0)
          <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981025.001,2,35,0)
        </xsl:if>
"KRN",.84,7981025.001,2,36,0)
      </div>
"KRN",.84,7981025.001,2,37,0)
      <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981025.001,2,38,0)
        <br />
"KRN",.84,7981025.001,2,39,0)
        <!-- The following line changed to fix page break issue in IE 7 
"KRN",.84,7981025.001,2,40,0)
-->
"KRN",.84,7981025.001,2,41,0)
        <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981025.001,2,42,0)
border:0">
"KRN",.84,7981025.001,2,43,0)
          <span style="visibility: hidden">-</span>
"KRN",.84,7981025.001,2,44,0)
        </div>
"KRN",.84,7981025.001,2,45,0)
        <div>
"KRN",.84,7981025.001,2,46,0)
          <xsl:call-template name="MakeScrollable">
"KRN",.84,7981025.001,2,47,0)
            <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981025.001,2,48,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,49,0)
          <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981025.001,2,50,0)
        </div>
"KRN",.84,7981025.001,2,51,0)
      </xsl:if>
"KRN",.84,7981025.001,2,52,0)
    </body>
"KRN",.84,7981025.001,2,53,0)
  </html>
"KRN",.84,7981025.001,2,54,0)
</xsl:template>
"KRN",.84,7981025.001,2,55,0)
 
"KRN",.84,7981025.001,2,56,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981025.001,2,57,0)
  <table cellpadding="5" cellspacing="0">
"KRN",.84,7981025.001,2,58,0)
    <thead>
"KRN",.84,7981025.001,2,59,0)
      <tr>
"KRN",.84,7981025.001,2,60,0)
        <th>LOINC Codes</th>
"KRN",.84,7981025.001,2,61,0)
      </tr>
"KRN",.84,7981025.001,2,62,0)
    </thead>
"KRN",.84,7981025.001,2,63,0)
    <tbody>
"KRN",.84,7981025.001,2,64,0)
      <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981025.001,2,65,0)
        <tr>
"KRN",.84,7981025.001,2,66,0)
          <td class="aLeft">
"KRN",.84,7981025.001,2,67,0)
            <xsl:value-of select="@CODE"/>
"KRN",.84,7981025.001,2,68,0)
          </td>
"KRN",.84,7981025.001,2,69,0)
        </tr>
"KRN",.84,7981025.001,2,70,0)
      </xsl:for-each>
"KRN",.84,7981025.001,2,71,0)
    </tbody>
"KRN",.84,7981025.001,2,72,0)
  </table>
"KRN",.84,7981025.001,2,73,0)
</xsl:template>
"KRN",.84,7981025.001,2,74,0)
 
"KRN",.84,7981025.001,2,75,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981025.001,2,76,0)
 
"KRN",.84,7981025.001,2,77,0)
<xsl:template match="PARAMETERS/DATE_RANGE_6">
"KRN",.84,7981025.001,2,78,0)
  <xsl:if test="$D2">
"KRN",.84,7981025.001,2,79,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981025.001,2,80,0)
     <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981025.001,2,81,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,82,0)
  </xsl:if>
"KRN",.84,7981025.001,2,83,0)
</xsl:template>
"KRN",.84,7981025.001,2,84,0)
 
"KRN",.84,7981025.001,2,85,0)
<xsl:template match="PARAMETERS/DATE_RANGE_7">
"KRN",.84,7981025.001,2,86,0)
  <xsl:if test="$D1">
"KRN",.84,7981025.001,2,87,0)
    <xsl:call-template name="DateRange">
"KRN",.84,7981025.001,2,88,0)
     <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981025.001,2,89,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,90,0)
  </xsl:if>
"KRN",.84,7981025.001,2,91,0)
</xsl:template>
"KRN",.84,7981025.001,2,92,0)
 
"KRN",.84,7981025.001,2,93,0)
<xsl:template match="HEADER/TBLDEF[@NAME='PATIENTS']/@HEADER">
"KRN",.84,7981025.001,2,94,0)
  <xsl:variable name="PTCOLS" select="../COLUMN[@NAME='PATIENTS']"/>
"KRN",.84,7981025.001,2,95,0)
  <xsl:variable name="VACLST" select="../COLUMN[@NAME='VACCINES']"/>
"KRN",.84,7981025.001,2,96,0)
  <xsl:variable name="IMMLST" select="../COLUMN[@NAME='LABTESTS']"/>
"KRN",.84,7981025.001,2,97,0)
  <xsl:variable name="ICNCOL" select="../COLUMN[@NAME='ICN']"/>
"KRN",.84,7981025.001,2,98,0)
 
"KRN",.84,7981025.001,2,99,0)
  <thead>
"KRN",.84,7981025.001,2,100,0)
    <tr>
"KRN",.84,7981025.001,2,101,0)
      <xsl:choose>
"KRN",.84,7981025.001,2,102,0)
        <xsl:when test="$AGE_YES or $DOB_YES">
"KRN",.84,7981025.001,2,103,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,104,0)
            <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981025.001,2,105,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981025.001,2,106,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,107,0)
            <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981025.001,2,108,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,109,0)
        </xsl:when>
"KRN",.84,7981025.001,2,110,0)
        <xsl:otherwise>
"KRN",.84,7981025.001,2,111,0)
          <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,112,0)
            <xsl:with-param name="column" select="$PTCOLS"/>
"KRN",.84,7981025.001,2,113,0)
            <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981025.001,2,114,0)
            <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,115,0)
            <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981025.001,2,116,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,117,0)
        </xsl:otherwise>
"KRN",.84,7981025.001,2,118,0)
      </xsl:choose> 
"KRN",.84,7981025.001,2,119,0)
 
"KRN",.84,7981025.001,2,120,0)
      <xsl:if test="$D2">
"KRN",.84,7981025.001,2,121,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,122,0)
          <xsl:with-param name="column" select="$VACLST"/>
"KRN",.84,7981025.001,2,123,0)
          <xsl:with-param name="title" select="'Vaccination'"/>
"KRN",.84,7981025.001,2,124,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,125,0)
          <xsl:with-param name="colspan" select="2"/>
"KRN",.84,7981025.001,2,126,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,127,0)
      </xsl:if>
"KRN",.84,7981025.001,2,128,0)
 
"KRN",.84,7981025.001,2,129,0)
      <xsl:if test="$D1">
"KRN",.84,7981025.001,2,130,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,131,0)
          <xsl:with-param name="column" select="$IMMLST"/>
"KRN",.84,7981025.001,2,132,0)
          <xsl:with-param name="title" select="'Immunity'"/>
"KRN",.84,7981025.001,2,133,0)
          <xsl:with-param name="width" select="'24%'"/>
"KRN",.84,7981025.001,2,134,0)
          <xsl:with-param name="colspan" select="3"/>
"KRN",.84,7981025.001,2,135,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,136,0)
      </xsl:if>
"KRN",.84,7981025.001,2,137,0)
 
"KRN",.84,7981025.001,2,138,0)
      <xsl:if test="$ICN_YES or $PACT_YES or $PCP_YES or $APPT_YES">
"KRN",.84,7981025.001,2,139,0)
        <xsl:variable name="COLCOUNT" select="number($ICN_YES)+
"KRN",.84,7981025.001,2,140,0)
                      
"KRN",.84,7981025.001,2,141,0)
number($PACT_YES)+number($PCP_YES)+number($APPT_YES)"/>
"KRN",.84,7981025.001,2,142,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,143,0)
          <xsl:with-param name="column" select="$ICNCOL"/>
"KRN",.84,7981025.001,2,144,0)
          <xsl:with-param name="title" select="' '"/>
"KRN",.84,7981025.001,2,145,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981025.001,2,146,0)
          <xsl:with-param name="colspan" select="$COLCOUNT"/>
"KRN",.84,7981025.001,2,147,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,148,0)
      </xsl:if>
"KRN",.84,7981025.001,2,149,0)
    </tr>
"KRN",.84,7981025.001,2,150,0)
 
"KRN",.84,7981025.001,2,151,0)
    <tr>
"KRN",.84,7981025.001,2,152,0)
      <xsl:choose>
"KRN",.84,7981025.001,2,153,0)
        <xsl:when test="$AGE_YES or $DOB_YES">
"KRN",.84,7981025.001,2,154,0)
          <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981025.001,2,155,0)
            <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981025.001,2,156,0)
            <xsl:with-param name="colspan" select="5"/>
"KRN",.84,7981025.001,2,157,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,158,0)
        </xsl:when>
"KRN",.84,7981025.001,2,159,0)
        <xsl:otherwise>
"KRN",.84,7981025.001,2,160,0)
          <xsl:call-template name="BasicPatientHeader">
"KRN",.84,7981025.001,2,161,0)
            <xsl:with-param name="column" select="PATIENT"/>
"KRN",.84,7981025.001,2,162,0)
            <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981025.001,2,163,0)
          </xsl:call-template>
"KRN",.84,7981025.001,2,164,0)
        </xsl:otherwise>
"KRN",.84,7981025.001,2,165,0)
      </xsl:choose> 
"KRN",.84,7981025.001,2,166,0)
 
"KRN",.84,7981025.001,2,167,0)
      <xsl:if test="$D2">
"KRN",.84,7981025.001,2,168,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,169,0)
          <xsl:with-param name="column" select="VAC_NAME"/>
"KRN",.84,7981025.001,2,170,0)
          <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981025.001,2,171,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981025.001,2,172,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,173,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,174,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,175,0)
          <xsl:with-param name="column" select="VAC_DATE"/>
"KRN",.84,7981025.001,2,176,0)
          <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981025.001,2,177,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,178,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,179,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,180,0)
      </xsl:if>
"KRN",.84,7981025.001,2,181,0)
 
"KRN",.84,7981025.001,2,182,0)
      <xsl:if test="$D1">
"KRN",.84,7981025.001,2,183,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,184,0)
          <xsl:with-param name="column" select="LTNAME"/>
"KRN",.84,7981025.001,2,185,0)
          <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981025.001,2,186,0)
          <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981025.001,2,187,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,188,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,189,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,190,0)
          <xsl:with-param name="column" select="DATE"/>
"KRN",.84,7981025.001,2,191,0)
          <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981025.001,2,192,0)
          <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,193,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,194,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,195,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,196,0)
          <xsl:with-param name="column" select="RESULT"/>
"KRN",.84,7981025.001,2,197,0)
          <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981025.001,2,198,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,199,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,200,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,201,0)
      </xsl:if>
"KRN",.84,7981025.001,2,202,0)
 
"KRN",.84,7981025.001,2,203,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981025.001,2,204,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,205,0)
          <xsl:with-param name="column" select="ICN"/>
"KRN",.84,7981025.001,2,206,0)
          <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981025.001,2,207,0)
          <xsl:with-param name="sort" select="'PATIENTS=ICN'"/>
"KRN",.84,7981025.001,2,208,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,209,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,210,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,211,0)
      </xsl:if>
"KRN",.84,7981025.001,2,212,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981025.001,2,213,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,214,0)
          <xsl:with-param name="column" select="PACT"/>
"KRN",.84,7981025.001,2,215,0)
          <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981025.001,2,216,0)
          <xsl:with-param name="sort" select="'PATIENTS=PACT'"/>
"KRN",.84,7981025.001,2,217,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,218,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,219,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,220,0)
      </xsl:if>
"KRN",.84,7981025.001,2,221,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981025.001,2,222,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,223,0)
          <xsl:with-param name="column" select="PCP"/>
"KRN",.84,7981025.001,2,224,0)
          <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981025.001,2,225,0)
          <xsl:with-param name="sort" select="'PATIENTS=PCP'"/>
"KRN",.84,7981025.001,2,226,0)
          <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981025.001,2,227,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,228,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,229,0)
      </xsl:if>
"KRN",.84,7981025.001,2,230,0)
      <xsl:if test="$APPT_YES">
"KRN",.84,7981025.001,2,231,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.001,2,232,0)
          <xsl:with-param name="column" select="FUT_APPT"/>
"KRN",.84,7981025.001,2,233,0)
          <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981025.001,2,234,0)
          <xsl:with-param name="sort" select="'PATIENTS=FUT_APPT'"/>
"KRN",.84,7981025.001,2,235,0)
          <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981025.001,2,236,0)
          <xsl:with-param name="colspan" select="1"/>
"KRN",.84,7981025.001,2,237,0)
        </xsl:call-template>
"KRN",.84,7981025.001,2,238,0)
      </xsl:if>
"KRN",.84,7981025.001,2,239,0)
    </tr>
"KRN",.84,7981025.001,2,240,0)
  </thead>
"KRN",.84,7981025.001,2,241,0)
</xsl:template>
"KRN",.84,7981025.001,2,242,0)
 
"KRN",.84,7981025.001,2,243,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981025.001,2,244,0)
 
"KRN",.84,7981025.001,2,245,0)
<xsl:template match="PATIENT/VACCINES">
"KRN",.84,7981025.001,2,246,0)
  <td>
"KRN",.84,7981025.001,2,247,0)
    <xsl:for-each select="VACCINE">
"KRN",.84,7981025.001,2,248,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,249,0)
        <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981025.001,2,250,0)
        <xsl:with-param name="width" select="'9%'"/>
"KRN",.84,7981025.001,2,251,0)
      </xsl:call-template>
"KRN",.84,7981025.001,2,252,0)
      <br />
"KRN",.84,7981025.001,2,253,0)
    </xsl:for-each>
"KRN",.84,7981025.001,2,254,0)
  </td>
"KRN",.84,7981025.001,2,255,0)
  <td>
"KRN",.84,7981025.001,2,256,0)
    <xsl:for-each select="VACCINE">
"KRN",.84,7981025.001,2,257,0)
      <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,258,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.001,2,259,0)
        <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981025.001,2,260,0)
        <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981025.001,2,261,0)
      </xsl:call-template>
"KRN",.84,7981025.001,2,262,0)
      <br />
"KRN",.84,7981025.001,2,263,0)
    </xsl:for-each>
"KRN",.84,7981025.001,2,264,0)
  </td>
"KRN",.84,7981025.001,2,265,0)
</xsl:template>
"KRN",.84,7981025.001,2,266,0)
 
"KRN",.84,7981025.001,2,267,0)
<xsl:template match="PATIENT/LABTESTS">
"KRN",.84,7981025.001,2,268,0)
  <td>
"KRN",.84,7981025.001,2,269,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,270,0)
      <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981025.001,2,271,0)
      <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,272,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,273,0)
  </td>
"KRN",.84,7981025.001,2,274,0)
  <td>
"KRN",.84,7981025.001,2,275,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,276,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.001,2,277,0)
      <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981025.001,2,278,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981025.001,2,279,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,280,0)
  </td>
"KRN",.84,7981025.001,2,281,0)
  <td>
"KRN",.84,7981025.001,2,282,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981025.001,2,283,0)
      <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981025.001,2,284,0)
      <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981025.001,2,285,0)
    </xsl:call-template>
"KRN",.84,7981025.001,2,286,0)
  </td>
"KRN",.84,7981025.001,2,287,0)
</xsl:template>
"KRN",.84,7981025.001,2,288,0)
 
"KRN",.84,7981025.001,2,289,0)
</xsl:stylesheet>
"KRN",.84,7981025.002,-1)
0^14
"KRN",.84,7981025.002,0)
7981025.002^2^^CLINICAL CASE REGISTRIES^Hepatitis B Report (CSV)
"KRN",.84,7981025.002,2,0)
^^280^280^3180418^
"KRN",.84,7981025.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981025.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981025.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981025.002,2,4,0)
 
"KRN",.84,7981025.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981025.002,2,6,0)
 
"KRN",.84,7981025.002,2,7,0)
<xsl:variable name="D1" 
"KRN",.84,7981025.002,2,8,0)
select="/REPORT/PATIENTS/PATIENT/LABTESTS[1]/LTNAME"/>
"KRN",.84,7981025.002,2,9,0)
<xsl:variable name="D2" 
"KRN",.84,7981025.002,2,10,0)
select="/REPORT/PATIENTS/PATIENT/VACCINES/VACCINE[1]/VAC_NAME"/>
"KRN",.84,7981025.002,2,11,0)
 
"KRN",.84,7981025.002,2,12,0)
<xsl:template match="/">
"KRN",.84,7981025.002,2,13,0)
  <xsl:text>Hepatitis B report</xsl:text>
"KRN",.84,7981025.002,2,14,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981025.002,2,15,0)
</xsl:template>
"KRN",.84,7981025.002,2,16,0)
 
"KRN",.84,7981025.002,2,17,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981025.002,2,18,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981025.002,2,19,0)
  <xsl:variable name="ssn"  select="LAST4"/>
"KRN",.84,7981025.002,2,20,0)
  <xsl:variable name="age"  select="AGE"/>
"KRN",.84,7981025.002,2,21,0)
  <xsl:variable name="dob"  select="DOB"/>
"KRN",.84,7981025.002,2,22,0)
  <xsl:variable name="dod"  select="DOD"/>
"KRN",.84,7981025.002,2,23,0)
  <xsl:variable name="icn"  select="ICN"/>
"KRN",.84,7981025.002,2,24,0)
  <xsl:variable name="pact" select="PACT"/>
"KRN",.84,7981025.002,2,25,0)
  <xsl:variable name="pcp"  select="PCP"/>
"KRN",.84,7981025.002,2,26,0)
  <xsl:variable name="appt" select="FUT_APPT"/>
"KRN",.84,7981025.002,2,27,0)
  <xsl:variable name="ltname" select="LABTESTS/LTNAME"/>
"KRN",.84,7981025.002,2,28,0)
  <xsl:variable name="ltdate" select="LABTESTS/DATE"/>
"KRN",.84,7981025.002,2,29,0)
  <xsl:variable name="ltresult" select="LABTESTS/RESULT"/>
"KRN",.84,7981025.002,2,30,0)
 
"KRN",.84,7981025.002,2,31,0)
  <xsl:choose>
"KRN",.84,7981025.002,2,32,0)
    <xsl:when test="($D2 and $D1) or $D2">
"KRN",.84,7981025.002,2,33,0)
      <xsl:for-each select="VACCINES/VACCINE">
"KRN",.84,7981025.002,2,34,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,35,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,36,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,37,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,38,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,39,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,40,0)
        <xsl:if test="$AGE_YES">
"KRN",.84,7981025.002,2,41,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,42,0)
            <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981025.002,2,43,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,44,0)
        </xsl:if>
"KRN",.84,7981025.002,2,45,0)
        <xsl:if test="$DOB_YES">
"KRN",.84,7981025.002,2,46,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,47,0)
            <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981025.002,2,48,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,49,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,50,0)
        </xsl:if>
"KRN",.84,7981025.002,2,51,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,52,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,53,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,54,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,55,0)
 
"KRN",.84,7981025.002,2,56,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,57,0)
          <xsl:with-param name="value" select="VAC_NAME"/>
"KRN",.84,7981025.002,2,58,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,59,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,60,0)
          <xsl:with-param name="value" select="VAC_DATE"/>
"KRN",.84,7981025.002,2,61,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,62,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,63,0)
 
"KRN",.84,7981025.002,2,64,0)
        <xsl:if test="$D1">
"KRN",.84,7981025.002,2,65,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,66,0)
            <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981025.002,2,67,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,68,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,69,0)
            <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981025.002,2,70,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,71,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,72,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,73,0)
            <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981025.002,2,74,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,75,0)
        </xsl:if>
"KRN",.84,7981025.002,2,76,0)
 
"KRN",.84,7981025.002,2,77,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,78,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,79,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,80,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,81,0)
        </xsl:if>
"KRN",.84,7981025.002,2,82,0)
        <xsl:if test="$PACT_YES">
"KRN",.84,7981025.002,2,83,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,84,0)
            <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981025.002,2,85,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,86,0)
        </xsl:if>
"KRN",.84,7981025.002,2,87,0)
        <xsl:if test="$PCP_YES">
"KRN",.84,7981025.002,2,88,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,89,0)
            <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981025.002,2,90,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,91,0)
        </xsl:if>
"KRN",.84,7981025.002,2,92,0)
        <xsl:if test="$APPT_YES">
"KRN",.84,7981025.002,2,93,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,94,0)
            <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981025.002,2,95,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,96,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,97,0)
        </xsl:if>
"KRN",.84,7981025.002,2,98,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,99,0)
      </xsl:for-each>
"KRN",.84,7981025.002,2,100,0)
    </xsl:when>
"KRN",.84,7981025.002,2,101,0)
 
"KRN",.84,7981025.002,2,102,0)
    <xsl:when test="$D1">
"KRN",.84,7981025.002,2,103,0)
      <xsl:for-each select="LABTESTS">
"KRN",.84,7981025.002,2,104,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,105,0)
          <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,106,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,107,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,108,0)
          <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,109,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,110,0)
        <xsl:if test="$AGE_YES">
"KRN",.84,7981025.002,2,111,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,112,0)
            <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981025.002,2,113,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,114,0)
        </xsl:if>
"KRN",.84,7981025.002,2,115,0)
        <xsl:if test="$DOB_YES">
"KRN",.84,7981025.002,2,116,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,117,0)
            <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981025.002,2,118,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,119,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,120,0)
        </xsl:if>
"KRN",.84,7981025.002,2,121,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,122,0)
          <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,123,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,124,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,125,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,126,0)
          <xsl:with-param name="value" select="$ltname"/>
"KRN",.84,7981025.002,2,127,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,128,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,129,0)
          <xsl:with-param name="value" select="$ltdate"/>
"KRN",.84,7981025.002,2,130,0)
         <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,131,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,132,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,133,0)
          <xsl:with-param name="value" select="$ltresult"/>
"KRN",.84,7981025.002,2,134,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,135,0)
        <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,136,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,137,0)
            <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,138,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,139,0)
        </xsl:if>
"KRN",.84,7981025.002,2,140,0)
        <xsl:if test="$PACT_YES">
"KRN",.84,7981025.002,2,141,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,142,0)
            <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981025.002,2,143,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,144,0)
        </xsl:if>
"KRN",.84,7981025.002,2,145,0)
        <xsl:if test="$PCP_YES">
"KRN",.84,7981025.002,2,146,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,147,0)
            <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981025.002,2,148,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,149,0)
        </xsl:if>
"KRN",.84,7981025.002,2,150,0)
        <xsl:if test="$APPT_YES">
"KRN",.84,7981025.002,2,151,0)
          <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,152,0)
            <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981025.002,2,153,0)
            <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,154,0)
          </xsl:call-template>
"KRN",.84,7981025.002,2,155,0)
        </xsl:if>
"KRN",.84,7981025.002,2,156,0)
        <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,157,0)
      </xsl:for-each>
"KRN",.84,7981025.002,2,158,0)
    </xsl:when>
"KRN",.84,7981025.002,2,159,0)
      
"KRN",.84,7981025.002,2,160,0)
    <xsl:otherwise>
"KRN",.84,7981025.002,2,161,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,162,0)
        <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981025.002,2,163,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,164,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,165,0)
        <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981025.002,2,166,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,167,0)
      <xsl:if test="$AGE_YES">
"KRN",.84,7981025.002,2,168,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,169,0)
          <xsl:with-param name="value" select="$age"/>
"KRN",.84,7981025.002,2,170,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,171,0)
      </xsl:if>
"KRN",.84,7981025.002,2,172,0)
      <xsl:if test="$DOB_YES">
"KRN",.84,7981025.002,2,173,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,174,0)
          <xsl:with-param name="value" select="$dob"/>
"KRN",.84,7981025.002,2,175,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,176,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,177,0)
      </xsl:if>
"KRN",.84,7981025.002,2,178,0)
      <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,179,0)
        <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981025.002,2,180,0)
        <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,181,0)
      </xsl:call-template>
"KRN",.84,7981025.002,2,182,0)
      <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,183,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,184,0)
          <xsl:with-param name="value" select="$icn"/>
"KRN",.84,7981025.002,2,185,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,186,0)
      </xsl:if>
"KRN",.84,7981025.002,2,187,0)
      <xsl:if test="$PACT_YES">
"KRN",.84,7981025.002,2,188,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,189,0)
          <xsl:with-param name="value" select="$pact"/>
"KRN",.84,7981025.002,2,190,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,191,0)
      </xsl:if>
"KRN",.84,7981025.002,2,192,0)
      <xsl:if test="$PCP_YES">
"KRN",.84,7981025.002,2,193,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,194,0)
          <xsl:with-param name="value" select="$pcp"/>
"KRN",.84,7981025.002,2,195,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,196,0)
      </xsl:if>
"KRN",.84,7981025.002,2,197,0)
      <xsl:if test="$APPT_YES">
"KRN",.84,7981025.002,2,198,0)
        <xsl:call-template name="TableCell">
"KRN",.84,7981025.002,2,199,0)
          <xsl:with-param name="value" select="$appt"/>
"KRN",.84,7981025.002,2,200,0)
          <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981025.002,2,201,0)
        </xsl:call-template>
"KRN",.84,7981025.002,2,202,0)
      </xsl:if>
"KRN",.84,7981025.002,2,203,0)
      <xsl:value-of select="$CRLF"/>
"KRN",.84,7981025.002,2,204,0)
    </xsl:otherwise>
"KRN",.84,7981025.002,2,205,0)
  </xsl:choose>
"KRN",.84,7981025.002,2,206,0)
</xsl:template>
"KRN",.84,7981025.002,2,207,0)
 
"KRN",.84,7981025.002,2,208,0)
<xsl:template match="COLUMN[@NAME='VAC_NAME']">
"KRN",.84,7981025.002,2,209,0)
  <xsl:if test="$D2">
"KRN",.84,7981025.002,2,210,0)
   <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,211,0)
      <xsl:with-param name="title" select="'Vaccine Name'"/>
"KRN",.84,7981025.002,2,212,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,213,0)
  </xsl:if>
"KRN",.84,7981025.002,2,214,0)
</xsl:template>
"KRN",.84,7981025.002,2,215,0)
 
"KRN",.84,7981025.002,2,216,0)
<xsl:template match="COLUMN[@NAME='VAC_DATE']">
"KRN",.84,7981025.002,2,217,0)
  <xsl:if test="$D2">
"KRN",.84,7981025.002,2,218,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,219,0)
      <xsl:with-param name="title" select="'Vaccine Date'"/>
"KRN",.84,7981025.002,2,220,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,221,0)
  </xsl:if>
"KRN",.84,7981025.002,2,222,0)
</xsl:template>
"KRN",.84,7981025.002,2,223,0)
 
"KRN",.84,7981025.002,2,224,0)
<xsl:template match="COLUMN[@NAME='LTNAME']">
"KRN",.84,7981025.002,2,225,0)
  <xsl:if test="$D1">
"KRN",.84,7981025.002,2,226,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,227,0)
      <xsl:with-param name="title" select="'Test Name'"/>
"KRN",.84,7981025.002,2,228,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,229,0)
  </xsl:if>
"KRN",.84,7981025.002,2,230,0)
</xsl:template>
"KRN",.84,7981025.002,2,231,0)
 
"KRN",.84,7981025.002,2,232,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981025.002,2,233,0)
  <xsl:if test="$D1">
"KRN",.84,7981025.002,2,234,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,235,0)
      <xsl:with-param name="title" select="'Test Date'"/>
"KRN",.84,7981025.002,2,236,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,237,0)
  </xsl:if>
"KRN",.84,7981025.002,2,238,0)
</xsl:template>
"KRN",.84,7981025.002,2,239,0)
 
"KRN",.84,7981025.002,2,240,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981025.002,2,241,0)
  <xsl:if test="$D1">
"KRN",.84,7981025.002,2,242,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,243,0)
      <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981025.002,2,244,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,245,0)
  </xsl:if>
"KRN",.84,7981025.002,2,246,0)
</xsl:template>
"KRN",.84,7981025.002,2,247,0)
 
"KRN",.84,7981025.002,2,248,0)
<xsl:template match="COLUMN[@NAME='ICN']">
"KRN",.84,7981025.002,2,249,0)
  <xsl:if test="$ICN_YES">
"KRN",.84,7981025.002,2,250,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,251,0)
      <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981025.002,2,252,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,253,0)
  </xsl:if>
"KRN",.84,7981025.002,2,254,0)
</xsl:template>
"KRN",.84,7981025.002,2,255,0)
 
"KRN",.84,7981025.002,2,256,0)
<xsl:template match="COLUMN[@NAME='PACT']">
"KRN",.84,7981025.002,2,257,0)
  <xsl:if test="$PACT_YES">
"KRN",.84,7981025.002,2,258,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,259,0)
      <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981025.002,2,260,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,261,0)
  </xsl:if>
"KRN",.84,7981025.002,2,262,0)
</xsl:template>
"KRN",.84,7981025.002,2,263,0)
 
"KRN",.84,7981025.002,2,264,0)
<xsl:template match="COLUMN[@NAME='PCP']">
"KRN",.84,7981025.002,2,265,0)
  <xsl:if test="$PCP_YES">
"KRN",.84,7981025.002,2,266,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,267,0)
      <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981025.002,2,268,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,269,0)
  </xsl:if>
"KRN",.84,7981025.002,2,270,0)
</xsl:template>
"KRN",.84,7981025.002,2,271,0)
 
"KRN",.84,7981025.002,2,272,0)
<xsl:template match="COLUMN[@NAME='FUT_APPT']">
"KRN",.84,7981025.002,2,273,0)
  <xsl:if test="$APPT_YES">
"KRN",.84,7981025.002,2,274,0)
    <xsl:call-template name="ColumnHeader">
"KRN",.84,7981025.002,2,275,0)
      <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981025.002,2,276,0)
    </xsl:call-template>
"KRN",.84,7981025.002,2,277,0)
  </xsl:if>
"KRN",.84,7981025.002,2,278,0)
</xsl:template>
"KRN",.84,7981025.002,2,279,0)
 
"KRN",.84,7981025.002,2,280,0)
</xsl:stylesheet>
"KRN",.84,7981997.001,-1)
0^1
"KRN",.84,7981997.001,0)
7981997.001^2^^CLINICAL CASE REGISTRIES^Patient data templates (HTML)
"KRN",.84,7981997.001,2,0)
^^355^355^3180411^
"KRN",.84,7981997.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981997.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981997.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981997.001,2,4,0)
 
"KRN",.84,7981997.001,2,5,0)
<!-- Patients (997.1) -->
"KRN",.84,7981997.001,2,6,0)
 
"KRN",.84,7981997.001,2,7,0)
<!-- Determine if the Age, Future Appt, DOB, ICN, PACT or PCP column is 
"KRN",.84,7981997.001,2,8,0)
present on the report. -->  
"KRN",.84,7981997.001,2,9,0)
<xsl:variable name="AGE_YES"  
"KRN",.84,7981997.001,2,10,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='AGE']) &gt; 0"/>
"KRN",.84,7981997.001,2,11,0)
<xsl:variable name="APPT_YES" 
"KRN",.84,7981997.001,2,12,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='FUT_APPT']) &gt; 0"/>
"KRN",.84,7981997.001,2,13,0)
<xsl:variable name="DOB_YES"  
"KRN",.84,7981997.001,2,14,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='DOB']) &gt; 0"/>
"KRN",.84,7981997.001,2,15,0)
<xsl:variable name="ICN_YES"  
"KRN",.84,7981997.001,2,16,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='ICN']) &gt; 0"/>
"KRN",.84,7981997.001,2,17,0)
<xsl:variable name="PACT_YES" 
"KRN",.84,7981997.001,2,18,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='PACT']) &gt; 0"/>
"KRN",.84,7981997.001,2,19,0)
<xsl:variable name="PCP_YES"  
"KRN",.84,7981997.001,2,20,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='PCP']) &gt; 0"/>
"KRN",.84,7981997.001,2,21,0)
 
"KRN",.84,7981997.001,2,22,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981997.001,2,23,0)
 
"KRN",.84,7981997.001,2,24,0)
<xsl:template name="BasicPatientHeader">
"KRN",.84,7981997.001,2,25,0)
<xsl:param name="rowspan" select="1"/>
"KRN",.84,7981997.001,2,26,0)
<xsl:param name="seqnum" select="1"/>
"KRN",.84,7981997.001,2,27,0)
<xsl:param name="tblname" select="'PATIENTS'"/>
"KRN",.84,7981997.001,2,28,0)
<xsl:param name="ageyes" select="''"/>
"KRN",.84,7981997.001,2,29,0)
<xsl:param name="dobyes" select="''"/>
"KRN",.84,7981997.001,2,30,0)
<xsl:param name="icnyes" select="''"/>
"KRN",.84,7981997.001,2,31,0)
<xsl:param name="pactyes" select="''"/>
"KRN",.84,7981997.001,2,32,0)
<xsl:param name="pcpyes" select="''"/>
"KRN",.84,7981997.001,2,33,0)
<xsl:param name="apptyes" select="''"/>
"KRN",.84,7981997.001,2,34,0)
<xsl:if test="$seqnum">
"KRN",.84,7981997.001,2,35,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,36,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,37,0)
   <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,38,0)
   <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981997.001,2,39,0)
   <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981997.001,2,40,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,41,0)
</xsl:if>
"KRN",.84,7981997.001,2,42,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,43,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,44,0)
  <xsl:with-param name="sort" select="concat($tblname,'=NAME')"/>
"KRN",.84,7981997.001,2,45,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981997.001,2,46,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,47,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,48,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,49,0)
  <xsl:with-param name="sort" select="concat($tblname,'=LAST4')"/>
"KRN",.84,7981997.001,2,50,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981997.001,2,51,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,52,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,53,0)
<xsl:if test="$ageyes!='' or $AGE_YES">
"KRN",.84,7981997.001,2,54,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,55,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,56,0)
  <xsl:with-param name="sort" select="concat($tblname,'=AGE')"/>
"KRN",.84,7981997.001,2,57,0)
  <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981997.001,2,58,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981997.001,2,59,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,60,0)
</xsl:if>
"KRN",.84,7981997.001,2,61,0)
<xsl:if test="$dobyes!='' or $DOB_YES">
"KRN",.84,7981997.001,2,62,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,63,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,64,0)
  <xsl:with-param name="sort" select="concat($tblname,'=DOB')"/>
"KRN",.84,7981997.001,2,65,0)
  <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981997.001,2,66,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,67,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,68,0)
</xsl:if>
"KRN",.84,7981997.001,2,69,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,70,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,71,0)
  <xsl:with-param name="sort" select="concat($tblname,'=DOD')"/>
"KRN",.84,7981997.001,2,72,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981997.001,2,73,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,74,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,75,0)
<xsl:if test="$icnyes!=''">
"KRN",.84,7981997.001,2,76,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,77,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,78,0)
  <xsl:with-param name="sort" select="concat($tblname,'=ICN')"/>
"KRN",.84,7981997.001,2,79,0)
  <xsl:with-param name="title" select="'ICN'"/>
"KRN",.84,7981997.001,2,80,0)
  <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981997.001,2,81,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,82,0)
</xsl:if>
"KRN",.84,7981997.001,2,83,0)
<xsl:if test="$pactyes!=''">
"KRN",.84,7981997.001,2,84,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,85,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,86,0)
  <xsl:with-param name="sort" select="concat($tblname,'=PACT')"/>
"KRN",.84,7981997.001,2,87,0)
  <xsl:with-param name="title" select="'PACT'"/>
"KRN",.84,7981997.001,2,88,0)
  <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981997.001,2,89,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,90,0)
</xsl:if>
"KRN",.84,7981997.001,2,91,0)
<xsl:if test="$pcpyes!=''">
"KRN",.84,7981997.001,2,92,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,93,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,94,0)
  <xsl:with-param name="sort" select="concat($tblname,'=PCP')"/>
"KRN",.84,7981997.001,2,95,0)
  <xsl:with-param name="title" select="'PCP'"/>
"KRN",.84,7981997.001,2,96,0)
  <xsl:with-param name="width" select="'12%'"/>
"KRN",.84,7981997.001,2,97,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,98,0)
</xsl:if>
"KRN",.84,7981997.001,2,99,0)
<xsl:if test="$apptyes!=''">
"KRN",.84,7981997.001,2,100,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,101,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,102,0)
  <xsl:with-param name="sort" select="concat($tblname,'=FUT_APPT')"/>
"KRN",.84,7981997.001,2,103,0)
 <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981997.001,2,104,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981997.001,2,105,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,106,0)
</xsl:if>
"KRN",.84,7981997.001,2,107,0)
</xsl:template>
"KRN",.84,7981997.001,2,108,0)
 
"KRN",.84,7981997.001,2,109,0)
<xsl:template name="BasicPatientData">
"KRN",.84,7981997.001,2,110,0)
<xsl:param name="rowspan" select="1"/>
"KRN",.84,7981997.001,2,111,0)
<xsl:param name="seqnum" select="1"/>
"KRN",.84,7981997.001,2,112,0)
<xsl:param name="number" select="position()"/>
"KRN",.84,7981997.001,2,113,0)
<xsl:param name="ageyes" select="''"/>
"KRN",.84,7981997.001,2,114,0)
<xsl:param name="dobyes" select="''"/>
"KRN",.84,7981997.001,2,115,0)
<xsl:param name="icnyes" select="''"/>
"KRN",.84,7981997.001,2,116,0)
<xsl:param name="pactyes" select="''"/>
"KRN",.84,7981997.001,2,117,0)
<xsl:param name="pcpyes" select="''"/>
"KRN",.84,7981997.001,2,118,0)
<xsl:param name="apptyes" select="''"/>
"KRN",.84,7981997.001,2,119,0)
<xsl:if test="$seqnum">
"KRN",.84,7981997.001,2,120,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,121,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,122,0)
   <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981997.001,2,123,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,124,0)
</xsl:if>
"KRN",.84,7981997.001,2,125,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,126,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,127,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981997.001,2,128,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981997.001,2,129,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,130,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,131,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,132,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981997.001,2,133,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,134,0)
<xsl:if test="$ageyes!='' or $AGE_YES">
"KRN",.84,7981997.001,2,135,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,136,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,137,0)
   <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981997.001,2,138,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,139,0)
</xsl:if>
"KRN",.84,7981997.001,2,140,0)
<xsl:if test="$dobyes!='' or $DOB_YES">
"KRN",.84,7981997.001,2,141,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,142,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,143,0)
  <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981997.001,2,144,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,145,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,146,0)
</xsl:if>
"KRN",.84,7981997.001,2,147,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,148,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,149,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981997.001,2,150,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,151,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,152,0)
<xsl:if test="$icnyes!=''">
"KRN",.84,7981997.001,2,153,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,154,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,155,0)
   <xsl:with-param name="value" select="ICN"/>
"KRN",.84,7981997.001,2,156,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981997.001,2,157,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,158,0)
</xsl:if>
"KRN",.84,7981997.001,2,159,0)
<xsl:if test="$pactyes!=''">
"KRN",.84,7981997.001,2,160,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,161,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,162,0)
   <xsl:with-param name="value" select="PACT"/>
"KRN",.84,7981997.001,2,163,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981997.001,2,164,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,165,0)
</xsl:if>
"KRN",.84,7981997.001,2,166,0)
<xsl:if test="$pcpyes!=''">
"KRN",.84,7981997.001,2,167,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,168,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,169,0)
   <xsl:with-param name="value" select="PCP"/>
"KRN",.84,7981997.001,2,170,0)
   <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981997.001,2,171,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,172,0)
</xsl:if>
"KRN",.84,7981997.001,2,173,0)
<xsl:if test="$apptyes!=''">
"KRN",.84,7981997.001,2,174,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,175,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,176,0)
   <xsl:with-param name="value" select="FUT_APPT"/>
"KRN",.84,7981997.001,2,177,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,178,0)
  </xsl:call-template>
"KRN",.84,7981997.001,2,179,0)
</xsl:if>
"KRN",.84,7981997.001,2,180,0)
</xsl:template>
"KRN",.84,7981997.001,2,181,0)
 
"KRN",.84,7981997.001,2,182,0)
<!--[ PATIENT TABLE HEADINGS ]-->
"KRN",.84,7981997.001,2,183,0)
 
"KRN",.84,7981997.001,2,184,0)
<xsl:template match="COLUMN[@NAME='ADMDT']">
"KRN",.84,7981997.001,2,185,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,186,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,187,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,188,0)
  <xsl:with-param name="title" select="'Admission Date'"/>
"KRN",.84,7981997.001,2,189,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,190,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,191,0)
</xsl:template>
"KRN",.84,7981997.001,2,192,0)
 
"KRN",.84,7981997.001,2,193,0)
<xsl:template match="COLUMN[@NAME='AGE']">
"KRN",.84,7981997.001,2,194,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,195,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,196,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,197,0)
  <xsl:with-param name="title" select="'Age'"/>                 
"KRN",.84,7981997.001,2,198,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981997.001,2,199,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,200,0)
</xsl:template>
"KRN",.84,7981997.001,2,201,0)
 
"KRN",.84,7981997.001,2,202,0)
<xsl:template match="COLUMN[@NAME='CONFDT']">
"KRN",.84,7981997.001,2,203,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,204,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,205,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,206,0)
  <xsl:with-param name="title" select="'Confirmation Date'"/>
"KRN",.84,7981997.001,2,207,0)
  <xsl:with-param name="sort" select="'PATIENTS=CONFDT:DESC'"/>
"KRN",.84,7981997.001,2,208,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,209,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,210,0)
</xsl:template>
"KRN",.84,7981997.001,2,211,0)
 
"KRN",.84,7981997.001,2,212,0)
<xsl:template match="COLUMN[@NAME='CSSN']">
"KRN",.84,7981997.001,2,213,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,214,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,215,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,216,0)
  <xsl:with-param name="title" select="'Coded 
"KRN",.84,7981997.001,2,217,0)
SSN'"/>                      
"KRN",.84,7981997.001,2,218,0)
 </xsl:call-template>
"KRN",.84,7981997.001,2,219,0)
</xsl:template>
"KRN",.84,7981997.001,2,220,0)
 
"KRN",.84,7981997.001,2,221,0)
<xsl:template match="COLUMN[@NAME='DOB']">
"KRN",.84,7981997.001,2,222,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,223,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,224,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,225,0)
  <xsl:with-param name="title" select="'Date of 
"KRN",.84,7981997.001,2,226,0)
Birth'"/>                  
"KRN",.84,7981997.001,2,227,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,228,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,229,0)
</xsl:template>
"KRN",.84,7981997.001,2,230,0)
 
"KRN",.84,7981997.001,2,231,0)
<xsl:template match="COLUMN[@NAME='ENTDT']">
"KRN",.84,7981997.001,2,232,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,233,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,234,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,235,0)
   <xsl:with-param name="title" select="'Date Entered'"/>
"KRN",.84,7981997.001,2,236,0)
  <xsl:with-param name="sort" 
"KRN",.84,7981997.001,2,237,0)
select="'PATIENTS=ENTDT:DESC'"/>                      
"KRN",.84,7981997.001,2,238,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,239,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,240,0)
</xsl:template>
"KRN",.84,7981997.001,2,241,0)
 
"KRN",.84,7981997.001,2,242,0)
<xsl:template match="COLUMN[@NAME='ETHN']">
"KRN",.84,7981997.001,2,243,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,244,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,245,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,246,0)
  <xsl:with-param name="title" select="'Ethnicity'"/>
"KRN",.84,7981997.001,2,247,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,248,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,249,0)
</xsl:template>
"KRN",.84,7981997.001,2,250,0)
 
"KRN",.84,7981997.001,2,251,0)
<xsl:template match="COLUMN[@NAME='RACE']">
"KRN",.84,7981997.001,2,252,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,253,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,254,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,255,0)
  <xsl:with-param name="title" select="'Race'"/>
"KRN",.84,7981997.001,2,256,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981997.001,2,257,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,258,0)
</xsl:template>
"KRN",.84,7981997.001,2,259,0)
 
"KRN",.84,7981997.001,2,260,0)
<xsl:template match="COLUMN[@NAME='SELDT']">
"KRN",.84,7981997.001,2,261,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,262,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,263,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,264,0)
   <xsl:with-param name="title" select="'Selection Date'"/>
"KRN",.84,7981997.001,2,265,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981997.001,2,266,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,267,0)
</xsl:template>
"KRN",.84,7981997.001,2,268,0)
 
"KRN",.84,7981997.001,2,269,0)
<xsl:template match="COLUMN[@NAME='SEX']">
"KRN",.84,7981997.001,2,270,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,271,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,272,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,273,0)
  <xsl:with-param name="title" select="'Birth Sex'"/>                 
"KRN",.84,7981997.001,2,274,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981997.001,2,275,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,276,0)
</xsl:template>
"KRN",.84,7981997.001,2,277,0)
 
"KRN",.84,7981997.001,2,278,0)
<xsl:template match="COLUMN[@NAME='BIRTHSEX']">
"KRN",.84,7981997.001,2,279,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,280,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,281,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,282,0)
  <xsl:with-param name="title" select="'Birth Sex'"/>                 
"KRN",.84,7981997.001,2,283,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981997.001,2,284,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,285,0)
</xsl:template>
"KRN",.84,7981997.001,2,286,0)
 
"KRN",.84,7981997.001,2,287,0)
<xsl:template match="COLUMN[@NAME='FUT_APPT']">
"KRN",.84,7981997.001,2,288,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,289,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.001,2,290,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,291,0)
  <xsl:with-param name="title" select="'Next Appt'"/>                 
"KRN",.84,7981997.001,2,292,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981997.001,2,293,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,294,0)
</xsl:template>
"KRN",.84,7981997.001,2,295,0)
 
"KRN",.84,7981997.001,2,296,0)
<!--[ PATIENT TABLE CELLS ]-->
"KRN",.84,7981997.001,2,297,0)
 
"KRN",.84,7981997.001,2,298,0)
<xsl:template match="PATIENT/ADMDT">
"KRN",.84,7981997.001,2,299,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,300,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,301,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,302,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,303,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,304,0)
</xsl:template>
"KRN",.84,7981997.001,2,305,0)
 
"KRN",.84,7981997.001,2,306,0)
<xsl:template match="PATIENT/CONFDT">
"KRN",.84,7981997.001,2,307,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,308,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,309,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,310,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,311,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,312,0)
</xsl:template>
"KRN",.84,7981997.001,2,313,0)
 
"KRN",.84,7981997.001,2,314,0)
<xsl:template match="PATIENT/DOB">
"KRN",.84,7981997.001,2,315,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,316,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,317,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,318,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,319,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,320,0)
</xsl:template>
"KRN",.84,7981997.001,2,321,0)
 
"KRN",.84,7981997.001,2,322,0)
<xsl:template match="PATIENT/ENTDT">
"KRN",.84,7981997.001,2,323,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,324,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,325,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,326,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,327,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,328,0)
</xsl:template>
"KRN",.84,7981997.001,2,329,0)
 
"KRN",.84,7981997.001,2,330,0)
<xsl:template match="PATIENT/RACES">
"KRN",.84,7981997.001,2,331,0)
<td class="aLeft">
"KRN",.84,7981997.001,2,332,0)
  <xsl:for-each select="RACE">
"KRN",.84,7981997.001,2,333,0)
   <xsl:value-of select="."/>
"KRN",.84,7981997.001,2,334,0)
   <xsl:if test=".=''"><xsl:text>&#160;</xsl:text></xsl:if><br/>
"KRN",.84,7981997.001,2,335,0)
  </xsl:for-each>
"KRN",.84,7981997.001,2,336,0)
</td>
"KRN",.84,7981997.001,2,337,0)
</xsl:template>
"KRN",.84,7981997.001,2,338,0)
 
"KRN",.84,7981997.001,2,339,0)
<xsl:template match="PATIENT/SELDT">
"KRN",.84,7981997.001,2,340,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,341,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,342,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,343,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,344,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,345,0)
</xsl:template>
"KRN",.84,7981997.001,2,346,0)
 
"KRN",.84,7981997.001,2,347,0)
<xsl:template match="PATIENT/FUT_APPT">
"KRN",.84,7981997.001,2,348,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981997.001,2,349,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981997.001,2,350,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.001,2,351,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981997.001,2,352,0)
</xsl:call-template>
"KRN",.84,7981997.001,2,353,0)
</xsl:template>
"KRN",.84,7981997.001,2,354,0)
 
"KRN",.84,7981997.001,2,355,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^6
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^^1034^1034^3180416^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981999.001,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<!-- Common (999.1) -->
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,8,0)
 
"KRN",.84,7981999.001,2,9,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,10,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,11,0)
 
"KRN",.84,7981999.001,2,12,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,13,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,16,0)
 
"KRN",.84,7981999.001,2,17,0)
<!--
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
                                UTILITIES
"KRN",.84,7981999.001,2,20,0)
=========================================================================
"KRN",.84,7981999.001,2,21,0)
-->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,24,0)
 
"KRN",.84,7981999.001,2,25,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,26,0)
<xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,27,0)
<xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,28,0)
<xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,29,0)
<xsl:choose>
"KRN",.84,7981999.001,2,30,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,31,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,32,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,33,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,34,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,35,0)
  </xsl:when>
"KRN",.84,7981999.001,2,36,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,37,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,38,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,39,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,40,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,41,0)
  </xsl:when>
"KRN",.84,7981999.001,2,42,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,43,0)
</xsl:choose>
"KRN",.84,7981999.001,2,44,0)
</xsl:template>
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,47,0)
 
"KRN",.84,7981999.001,2,48,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,49,0)
<xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,50,0)
<!--
"KRN",.84,7981999.001,2,51,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,52,0)
-->
"KRN",.84,7981999.001,2,53,0)
<xsl:variable name="date"
"KRN",.84,7981999.001,2,54,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,55,0)
<xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,56,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,57,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,59,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,61,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,62,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,63,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,64,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,65,0)
     </xsl:when>
"KRN",.84,7981999.001,2,66,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,67,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,68,0)
     </xsl:when>
"KRN",.84,7981999.001,2,69,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,70,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,71,0)
   </xsl:when>
"KRN",.84,7981999.001,2,72,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,73,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,74,0)
  <!--
"KRN",.84,7981999.001,2,75,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,76,0)
  -->
"KRN",.84,7981999.001,2,77,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,78,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,79,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,82,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,83,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,84,0)
  </xsl:if>
"KRN",.84,7981999.001,2,85,0)
</xsl:if>
"KRN",.84,7981999.001,2,86,0)
</xsl:template>
"KRN",.84,7981999.001,2,87,0)
 
"KRN",.84,7981999.001,2,88,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,89,0)
<xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,90,0)
<xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,91,0)
</xsl:template>
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,94,0)
 
"KRN",.84,7981999.001,2,95,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,96,0)
<xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,97,0)
<xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,98,0)
<xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,99,0)
<xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,100,0)
<xsl:choose>
"KRN",.84,7981999.001,2,101,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,102,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,103,0)
   <a>
"KRN",.84,7981999.001,2,104,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,105,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,106,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,107,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,108,0)
    </xsl:if>
"KRN",.84,7981999.001,2,109,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,110,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,111,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,112,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,113,0)
    </xsl:if>
"KRN",.84,7981999.001,2,114,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,115,0)
   </a>
"KRN",.84,7981999.001,2,116,0)
  </xsl:when>
"KRN",.84,7981999.001,2,117,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,118,0)
</xsl:choose>
"KRN",.84,7981999.001,2,119,0)
</xsl:template>
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,122,0)
 
"KRN",.84,7981999.001,2,123,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,124,0)
<xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,125,0)
<xsl:choose>
"KRN",.84,7981999.001,2,126,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,127,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,128,0)
  </xsl:when>
"KRN",.84,7981999.001,2,129,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,131,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,132,0)
</xsl:choose>
"KRN",.84,7981999.001,2,133,0)
</xsl:template>
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,136,0)
 
"KRN",.84,7981999.001,2,137,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,138,0)
<xsl:param name="heading"/>
"KRN",.84,7981999.001,2,139,0)
<xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,140,0)
<tr>
"KRN",.84,7981999.001,2,141,0)
  <th scope="row">
"KRN",.84,7981999.001,2,142,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,143,0)
  </th>
"KRN",.84,7981999.001,2,144,0)
  <td>
"KRN",.84,7981999.001,2,145,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,146,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,147,0)
   </xsl:if>
"KRN",.84,7981999.001,2,148,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,149,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,150,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,151,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,152,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,153,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,154,0)
  </td>
"KRN",.84,7981999.001,2,155,0)
</tr>
"KRN",.84,7981999.001,2,156,0)
</xsl:template>
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<!--
"KRN",.84,7981999.001,2,159,0)
Special processing for multivalued local fields to handle 
"KRN",.84,7981999.001,2,160,0)
pseudo local field  in the HIV_DX tag.
"KRN",.84,7981999.001,2,161,0)
-->
"KRN",.84,7981999.001,2,162,0)
 
"KRN",.84,7981999.001,2,163,0)
<xsl:template name="LocalList">
"KRN",.84,7981999.001,2,164,0)
<xsl:param name="firstitem"/>
"KRN",.84,7981999.001,2,165,0)
<xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,166,0)
<tr>
"KRN",.84,7981999.001,2,167,0)
  <th scope="row">
"KRN",.84,7981999.001,2,168,0)
   <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,169,0)
  </th>
"KRN",.84,7981999.001,2,170,0)
  <td>
"KRN",.84,7981999.001,2,171,0)
   <xsl:if test="$firstitem!=''">
"KRN",.84,7981999.001,2,172,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,173,0)
    <xsl:value-of select="$firstitem"/>
"KRN",.84,7981999.001,2,174,0)
    <xsl:text>); </xsl:text>
"KRN",.84,7981999.001,2,175,0)
   </xsl:if>
"KRN",.84,7981999.001,2,176,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,177,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,178,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,179,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,180,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,181,0)
  </td>
"KRN",.84,7981999.001,2,182,0)
</tr>
"KRN",.84,7981999.001,2,183,0)
</xsl:template>
"KRN",.84,7981999.001,2,184,0)
 
"KRN",.84,7981999.001,2,185,0)
 
"KRN",.84,7981999.001,2,186,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,187,0)
 
"KRN",.84,7981999.001,2,188,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,189,0)
<xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,190,0)
<xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,191,0)
<xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,192,0)
<xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,193,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,194,0)
</xsl:if>
"KRN",.84,7981999.001,2,195,0)
<xsl:choose>
"KRN",.84,7981999.001,2,196,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,197,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,198,0)
  </xsl:when>
"KRN",.84,7981999.001,2,199,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,200,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,201,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,202,0)
</xsl:choose>
"KRN",.84,7981999.001,2,203,0)
</xsl:template>
"KRN",.84,7981999.001,2,204,0)
 
"KRN",.84,7981999.001,2,205,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,206,0)
 
"KRN",.84,7981999.001,2,207,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,208,0)
<xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,209,0)
<table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,210,0)
  <tr>
"KRN",.84,7981999.001,2,211,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,212,0)
   <td>
"KRN",.84,7981999.001,2,213,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,214,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,215,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,216,0)
   </td>
"KRN",.84,7981999.001,2,217,0)
  </tr>
"KRN",.84,7981999.001,2,218,0)
  <tr>
"KRN",.84,7981999.001,2,219,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,220,0)
   <td>
"KRN",.84,7981999.001,2,221,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,222,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,223,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,224,0)
   </td>
"KRN",.84,7981999.001,2,225,0)
  </tr>
"KRN",.84,7981999.001,2,226,0)
  <tr>
"KRN",.84,7981999.001,2,227,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,228,0)
   <td>
"KRN",.84,7981999.001,2,229,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,230,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,231,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,232,0)
   </td>
"KRN",.84,7981999.001,2,233,0)
  </tr>
"KRN",.84,7981999.001,2,234,0)
  <tr>
"KRN",.84,7981999.001,2,235,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,236,0)
   <td>
"KRN",.84,7981999.001,2,237,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,238,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,239,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,240,0)
   </td>
"KRN",.84,7981999.001,2,241,0)
  </tr>
"KRN",.84,7981999.001,2,242,0)
</table>
"KRN",.84,7981999.001,2,243,0)
</xsl:template>
"KRN",.84,7981999.001,2,244,0)
 
"KRN",.84,7981999.001,2,245,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,246,0)
 
"KRN",.84,7981999.001,2,247,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,248,0)
<xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,249,0)
<xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,250,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,251,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,252,0)
  </div>
"KRN",.84,7981999.001,2,253,0)
</xsl:if>
"KRN",.84,7981999.001,2,254,0)
</xsl:template>
"KRN",.84,7981999.001,2,255,0)
 
"KRN",.84,7981999.001,2,256,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,257,0)
 
"KRN",.84,7981999.001,2,258,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,259,0)
<table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,260,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,261,0)
</table>
"KRN",.84,7981999.001,2,262,0)
</xsl:template>
"KRN",.84,7981999.001,2,263,0)
 
"KRN",.84,7981999.001,2,264,0)
<!--
"KRN",.84,7981999.001,2,265,0)
=========================================================================
"KRN",.84,7981999.001,2,266,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,267,0)
=========================================================================
"KRN",.84,7981999.001,2,268,0)
-->
"KRN",.84,7981999.001,2,269,0)
 
"KRN",.84,7981999.001,2,270,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,271,0)
<xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,272,0)
<xsl:variable name="notecnt" 
"KRN",.84,7981999.001,2,273,0)
select="count(/REPORT/HEADER/NOTES/AGE_BASE_DATE)"/>
"KRN",.84,7981999.001,2,274,0)
<div class="reportHeader">
"KRN",.84,7981999.001,2,275,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,276,0)
   <tr>
"KRN",.84,7981999.001,2,277,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,278,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,279,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,280,0)
     </table>
"KRN",.84,7981999.001,2,281,0)
    </td>
"KRN",.84,7981999.001,2,282,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,283,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,284,0)
    </td>
"KRN",.84,7981999.001,2,285,0)
   </tr>
"KRN",.84,7981999.001,2,286,0)
  </table>
"KRN",.84,7981999.001,2,287,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,288,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" 
"KRN",.84,7981999.001,2,289,0)
cellspacing="0">
"KRN",.84,7981999.001,2,290,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,291,0)
   </table>
"KRN",.84,7981999.001,2,292,0)
  </xsl:if>
"KRN",.84,7981999.001,2,293,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,294,0)
   <xsl:variable name="explain" 
"KRN",.84,7981999.001,2,295,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='AGE']) &gt; 0"/>
"KRN",.84,7981999.001,2,296,0)
   <xsl:if test="$explain and $notecnt=0">
"KRN",.84,7981999.001,2,297,0)
     <xsl:variable name="rptdate" 
"KRN",.84,7981999.001,2,298,0)
select="substring-before(concat(/REPORT/HEADER/DATE,'.'),'.')"/>
"KRN",.84,7981999.001,2,299,0)
     <br/>
"KRN",.84,7981999.001,2,300,0)
     <b>Note:&#160; </b>Age of patients is calculated as of the date when 
"KRN",.84,7981999.001,2,301,0)
the report is run 
"KRN",.84,7981999.001,2,302,0)
     (<xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,303,0)
       <xsl:with-param name="dt" select="$rptdate"/>
"KRN",.84,7981999.001,2,304,0)
     </xsl:call-template>). If a patient died then the age is calculated 
"KRN",.84,7981999.001,2,305,0)
as of date of death.
"KRN",.84,7981999.001,2,306,0)
   </xsl:if>
"KRN",.84,7981999.001,2,307,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,308,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,309,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,310,0)
   </div>
"KRN",.84,7981999.001,2,311,0)
  </xsl:if>
"KRN",.84,7981999.001,2,312,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,313,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,314,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,315,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,316,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,317,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,318,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,319,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,320,0)
     </xsl:when>
"KRN",.84,7981999.001,2,321,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,322,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,323,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,324,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,325,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,326,0)
   </dl>
"KRN",.84,7981999.001,2,327,0)
  </xsl:if>
"KRN",.84,7981999.001,2,328,0)
</div>
"KRN",.84,7981999.001,2,329,0)
</xsl:template>
"KRN",.84,7981999.001,2,330,0)
 
"KRN",.84,7981999.001,2,331,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,332,0)
Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,333,0)
(<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,334,0)
age is calculated as of date of death.
"KRN",.84,7981999.001,2,335,0)
</xsl:template>
"KRN",.84,7981999.001,2,336,0)
 
"KRN",.84,7981999.001,2,337,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,338,0)
Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,339,0)
which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,340,0)
this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,341,0)
date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,342,0)
</xsl:template>
"KRN",.84,7981999.001,2,343,0)
 
"KRN",.84,7981999.001,2,344,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,345,0)
<xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,346,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,347,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,348,0)
</xsl:template>
"KRN",.84,7981999.001,2,349,0)
 
"KRN",.84,7981999.001,2,350,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,351,0)
<xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,352,0)
 <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,353,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,354,0)
</xsl:template>
"KRN",.84,7981999.001,2,355,0)
 
"KRN",.84,7981999.001,2,356,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,357,0)
<xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,358,0)
<xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,359,0)
<xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,360,0)
  <tr>
"KRN",.84,7981999.001,2,361,0)
   <th scope="row">
"KRN",.84,7981999.001,2,362,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,363,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,364,0)
    </xsl:if>
"KRN",.84,7981999.001,2,365,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,366,0)
   </th>
"KRN",.84,7981999.001,2,367,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,368,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,369,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,370,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,371,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,372,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,373,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,374,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,375,0)
   </td>
"KRN",.84,7981999.001,2,376,0)
  </tr>
"KRN",.84,7981999.001,2,377,0)
</xsl:if>
"KRN",.84,7981999.001,2,378,0)
</xsl:template>
"KRN",.84,7981999.001,2,379,0)
 
"KRN",.84,7981999.001,2,380,0)
<!-- 
"KRN",.84,7981999.001,2,381,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,382,0)
<xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,383,0)
<xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,384,0)
<xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,385,0)
  <tr>
"KRN",.84,7981999.001,2,386,0)
   <th scope="row"><xsl:value-of select="$title"/> 
"KRN",.84,7981999.001,2,387,0)
Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,388,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,389,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,390,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,391,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,392,0)
   </td>
"KRN",.84,7981999.001,2,393,0)
  </tr>
"KRN",.84,7981999.001,2,394,0)
</xsl:if>
"KRN",.84,7981999.001,2,395,0)
<xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,396,0)
  <tr>
"KRN",.84,7981999.001,2,397,0)
   <th scope="row"><xsl:value-of select="$title"/> 
"KRN",.84,7981999.001,2,398,0)
End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,399,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,400,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,401,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,402,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,403,0)
   </td>
"KRN",.84,7981999.001,2,404,0)
  </tr>
"KRN",.84,7981999.001,2,405,0)
</xsl:if>
"KRN",.84,7981999.001,2,406,0)
</xsl:template>
"KRN",.84,7981999.001,2,407,0)
-->
"KRN",.84,7981999.001,2,408,0)
 
"KRN",.84,7981999.001,2,409,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,410,0)
<xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,411,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,412,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,413,0)
</xsl:template>
"KRN",.84,7981999.001,2,414,0)
 
"KRN",.84,7981999.001,2,415,0)
<xsl:template match="PARAMETERS/ICDLST">
"KRN",.84,7981999.001,2,416,0)
<tr>
"KRN",.84,7981999.001,2,417,0)
  <th scope="row">ICD:&#160;</th>
"KRN",.84,7981999.001,2,418,0)
  <td>
"KRN",.84,7981999.001,2,419,0)
   <dl>
"KRN",.84,7981999.001,2,420,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,421,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,422,0)
    </xsl:if>
"KRN",.84,7981999.001,2,423,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,424,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,425,0)
   </dl>
"KRN",.84,7981999.001,2,426,0)
  </td>
"KRN",.84,7981999.001,2,427,0)
</tr>
"KRN",.84,7981999.001,2,428,0)
</xsl:template>
"KRN",.84,7981999.001,2,429,0)
 
"KRN",.84,7981999.001,2,430,0)
<xsl:template match="PARAMETERS/ICDLST/GROUP">
"KRN",.84,7981999.001,2,431,0)
<dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,432,0)
<dd><dl>
"KRN",.84,7981999.001,2,433,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,434,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,435,0)
  </xsl:if>
"KRN",.84,7981999.001,2,436,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,437,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,438,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,439,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,440,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,441,0)
   </td>
"KRN",.84,7981999.001,2,442,0)
   <td>
"KRN",.84,7981999.001,2,443,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,444,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,445,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,446,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,447,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,448,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,449,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,450,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,451,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,452,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,453,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,454,0)
   </td>
"KRN",.84,7981999.001,2,455,0)
   <td>
"KRN",.84,7981999.001,2,456,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,457,0)
     <xsl:sort select="."/>
"KRN",.84,7981999.001,2,458,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,459,0)
     <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,460,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,461,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,462,0)
</dl></dd>
"KRN",.84,7981999.001,2,463,0)
</xsl:template>
"KRN",.84,7981999.001,2,464,0)
 
"KRN",.84,7981999.001,2,465,0)
<xsl:template match="PARAMETERS/ICDFILT">
"KRN",.84,7981999.001,2,466,0)
<tr>
"KRN",.84,7981999.001,2,467,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,468,0)
  <td>
"KRN",.84,7981999.001,2,469,0)
   <dl>
"KRN",.84,7981999.001,2,470,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,471,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,472,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,473,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,474,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,475,0)
        </xsl:when>
"KRN",.84,7981999.001,2,476,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,477,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,478,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,479,0)
        </xsl:when>
"KRN",.84,7981999.001,2,480,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,481,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,482,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,483,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,484,0)
    </xsl:if>
"KRN",.84,7981999.001,2,485,0)
   </dl>
"KRN",.84,7981999.001,2,486,0)
  </td>
"KRN",.84,7981999.001,2,487,0)
</tr>
"KRN",.84,7981999.001,2,488,0)
</xsl:template>
"KRN",.84,7981999.001,2,489,0)
 
"KRN",.84,7981999.001,2,490,0)
<xsl:template match="PARAMETERS/ICDFILT/GROUP">
"KRN",.84,7981999.001,2,491,0)
<dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,492,0)
<dd><dl>
"KRN",.84,7981999.001,2,493,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,494,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,495,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,496,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-9) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,497,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,498,0)
   </td>
"KRN",.84,7981999.001,2,499,0)
   <td>
"KRN",.84,7981999.001,2,500,0)
    <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,501,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,502,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,503,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,504,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,505,0)
   </td></tr></table>
"KRN",.84,7981999.001,2,506,0)
   <table><tr><td width="80px">
"KRN",.84,7981999.001,2,507,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,508,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,509,0)
     <xsl:if test="position()=1"><xsl:text>(ICD-10) </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,510,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,511,0)
   </td>
"KRN",.84,7981999.001,2,512,0)
   <td>
"KRN",.84,7981999.001,2,513,0)
    <xsl:for-each select="ICD10">
"KRN",.84,7981999.001,2,514,0)
     <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,515,0)
     <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,516,0)
     <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,517,0)
    </xsl:for-each>
"KRN",.84,7981999.001,2,518,0)
   </td></tr></table> 
"KRN",.84,7981999.001,2,519,0)
 </dl></dd>
"KRN",.84,7981999.001,2,520,0)
</xsl:template> 
"KRN",.84,7981999.001,2,521,0)
 
"KRN",.84,7981999.001,2,522,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,523,0)
<xsl:variable name="pseudo" select="/REPORT/PARAMETERS/HIV_DX" />
"KRN",.84,7981999.001,2,524,0)
<xsl:call-template name="LocalList">
"KRN",.84,7981999.001,2,525,0)
  <xsl:with-param name="firstitem" select="$pseudo"/>
"KRN",.84,7981999.001,2,526,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,527,0)
</xsl:template>
"KRN",.84,7981999.001,2,528,0)
 
"KRN",.84,7981999.001,2,529,0)
<!-- Process the pseudo local field -->
"KRN",.84,7981999.001,2,530,0)
<xsl:template match="PARAMETERS/HIV_DX">
"KRN",.84,7981999.001,2,531,0)
<xsl:if test="count(/REPORT/PARAMETERS/LOCAL_FIELDS/*) &lt; 1">
"KRN",.84,7981999.001,2,532,0)
  <tr>
"KRN",.84,7981999.001,2,533,0)
   <th scope="row">
"KRN",.84,7981999.001,2,534,0)
    <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,535,0)
   </th>
"KRN",.84,7981999.001,2,536,0)
   <td>
"KRN",.84,7981999.001,2,537,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,538,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,539,0)
    <xsl:text>)</xsl:text>
"KRN",.84,7981999.001,2,540,0)
   </td>
"KRN",.84,7981999.001,2,541,0)
  </tr>
"KRN",.84,7981999.001,2,542,0)
</xsl:if>
"KRN",.84,7981999.001,2,543,0)
</xsl:template> 
"KRN",.84,7981999.001,2,544,0)
 
"KRN",.84,7981999.001,2,545,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,546,0)
<xsl:choose>
"KRN",.84,7981999.001,2,547,0)
   <xsl:when test="@DAA_DRUGS">
"KRN",.84,7981999.001,2,548,0)
    <tr>
"KRN",.84,7981999.001,2,549,0)
     <th scope="row">DAA Prescriptions:&#160;</th>
"KRN",.84,7981999.001,2,550,0)
     <td>
"KRN",.84,7981999.001,2,551,0)
      <xsl:if test="@DAA_DRUGS='A'"><xsl:text>All 
"KRN",.84,7981999.001,2,552,0)
prescriptions</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,553,0)
      <xsl:if test="@DAA_DRUGS='I'"><xsl:text>In-house 
"KRN",.84,7981999.001,2,554,0)
only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,555,0)
      <xsl:if test="@DAA_DRUGS='C'"><xsl:text>Choice 
"KRN",.84,7981999.001,2,556,0)
only</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,557,0)
     </td>
"KRN",.84,7981999.001,2,558,0)
    </tr>
"KRN",.84,7981999.001,2,559,0)
   </xsl:when>
"KRN",.84,7981999.001,2,560,0)
   <xsl:otherwise>
"KRN",.84,7981999.001,2,561,0)
    <tr>
"KRN",.84,7981999.001,2,562,0)
      <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,563,0)
      <td>
"KRN",.84,7981999.001,2,564,0)
        <xsl:if test="@COMPLETE='1' or @SUMMARY='1' or @FUT_APPT">
"KRN",.84,7981999.001,2,565,0)
          <xsl:choose>
"KRN",.84,7981999.001,2,566,0)
            <xsl:when test="@FUT_APPT">
"KRN",.84,7981999.001,2,567,0)
              <xsl:value-of select="substring-before(., 'XXX')"/>
"KRN",.84,7981999.001,2,568,0)
              <xsl:value-of select="@FUT_APPT"/>
"KRN",.84,7981999.001,2,569,0)
              <xsl:value-of select="substring-after(., 'XXX')"/>
"KRN",.84,7981999.001,2,570,0)
            </xsl:when> 
"KRN",.84,7981999.001,2,571,0)
            <xsl:otherwise>
"KRN",.84,7981999.001,2,572,0)
              <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,573,0)
            </xsl:otherwise>
"KRN",.84,7981999.001,2,574,0)
          </xsl:choose>
"KRN",.84,7981999.001,2,575,0)
        </xsl:if> 
"KRN",.84,7981999.001,2,576,0)
        <xsl:if test="(@RECENT_FILLS='1' or @ALL_FILLS='1') and 
"KRN",.84,7981999.001,2,577,0)
(@COMPLETE='1' or @SUMMARY='1')">
"KRN",.84,7981999.001,2,578,0)
          <xsl:text>, </xsl:text>
"KRN",.84,7981999.001,2,579,0)
        </xsl:if>
"KRN",.84,7981999.001,2,580,0)
        <xsl:if test="@ALL_FILLS='1'"><xsl:text>All 
"KRN",.84,7981999.001,2,581,0)
fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,582,0)
        <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in 
"KRN",.84,7981999.001,2,583,0)
time period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,584,0)
      </td>
"KRN",.84,7981999.001,2,585,0)
    </tr>  
"KRN",.84,7981999.001,2,586,0)
    <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,587,0)
     <tr>
"KRN",.84,7981999.001,2,588,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,589,0)
      <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,590,0)
     </tr>
"KRN",.84,7981999.001,2,591,0)
    </xsl:if>
"KRN",.84,7981999.001,2,592,0)
    <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,593,0)
     <tr>
"KRN",.84,7981999.001,2,594,0)
      <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,595,0)
      <td>
"KRN",.84,7981999.001,2,596,0)
       <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,597,0)
       <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,598,0)
        <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,599,0)
       </xsl:call-template>
"KRN",.84,7981999.001,2,600,0)
      </td>
"KRN",.84,7981999.001,2,601,0)
     </tr>
"KRN",.84,7981999.001,2,602,0)
    </xsl:if>
"KRN",.84,7981999.001,2,603,0)
   </xsl:otherwise>
"KRN",.84,7981999.001,2,604,0)
</xsl:choose>
"KRN",.84,7981999.001,2,605,0)
</xsl:template>
"KRN",.84,7981999.001,2,606,0)
 
"KRN",.84,7981999.001,2,607,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,608,0)
<xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,609,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,610,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,611,0)
</xsl:template>
"KRN",.84,7981999.001,2,612,0)
 
"KRN",.84,7981999.001,2,613,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,614,0)
<tr>
"KRN",.84,7981999.001,2,615,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,616,0)
  <td>
"KRN",.84,7981999.001,2,617,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,618,0)
    <xsl:if test="@CONFDT_AFTER!=''">
"KRN",.84,7981999.001,2,619,0)
      <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,620,0)
      <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,621,0)
       <xsl:with-param name="dt" select="@CONFDT_AFTER"/>
"KRN",.84,7981999.001,2,622,0)
      </xsl:call-template>
"KRN",.84,7981999.001,2,623,0)
    </xsl:if>
"KRN",.84,7981999.001,2,624,0)
  </td>
"KRN",.84,7981999.001,2,625,0)
</tr>
"KRN",.84,7981999.001,2,626,0)
<xsl:if test="@OEF!=''">
"KRN",.84,7981999.001,2,627,0)
  <tr>
"KRN",.84,7981999.001,2,628,0)
   <th scope="row">OEF/OIF:&#160;</th>
"KRN",.84,7981999.001,2,629,0)
   <td>
"KRN",.84,7981999.001,2,630,0)
    <xsl:if test="@OEF='1'">
"KRN",.84,7981999.001,2,631,0)
      <xsl:text>Include only</xsl:text>
"KRN",.84,7981999.001,2,632,0)
    </xsl:if>
"KRN",.84,7981999.001,2,633,0)
    <xsl:if test="@OEF='-1'">
"KRN",.84,7981999.001,2,634,0)
      <xsl:text>Exclude</xsl:text>
"KRN",.84,7981999.001,2,635,0)
    </xsl:if>
"KRN",.84,7981999.001,2,636,0)
   </td>
"KRN",.84,7981999.001,2,637,0)
  </tr>
"KRN",.84,7981999.001,2,638,0)
</xsl:if>
"KRN",.84,7981999.001,2,639,0)
<tr>
"KRN",.84,7981999.001,2,640,0)
  <th scope="row">Birth Sex:&#160;</th>
"KRN",.84,7981999.001,2,641,0)
  <td>
"KRN",.84,7981999.001,2,642,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,643,0)
     <xsl:when test="@SEX or @BIRTHSEX">
"KRN",.84,7981999.001,2,644,0)
      <xsl:if test="@SEX='F' or @BIRTHSEX='F'">
"KRN",.84,7981999.001,2,645,0)
       <xsl:text>Female only</xsl:text>
"KRN",.84,7981999.001,2,646,0)
      </xsl:if>
"KRN",.84,7981999.001,2,647,0)
      <xsl:if test="@SEX='M' or @BIRTHSEX='M'">
"KRN",.84,7981999.001,2,648,0)
       <xsl:text>Male only</xsl:text>
"KRN",.84,7981999.001,2,649,0)
      </xsl:if>
"KRN",.84,7981999.001,2,650,0)
     </xsl:when>
"KRN",.84,7981999.001,2,651,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,652,0)
      <xsl:text>Both</xsl:text>
"KRN",.84,7981999.001,2,653,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,654,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,655,0)
  </td>
"KRN",.84,7981999.001,2,656,0)
</tr>
"KRN",.84,7981999.001,2,657,0)
<tr>
"KRN",.84,7981999.001,2,658,0)
  <th scope="row">Age Range:&#160;</th>
"KRN",.84,7981999.001,2,659,0)
  <td>
"KRN",.84,7981999.001,2,660,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,661,0)
     <xsl:when test="../AGE_RANGE/@TYPE">
"KRN",.84,7981999.001,2,662,0)
      <xsl:if test="../AGE_RANGE/@TYPE='DOB'">
"KRN",.84,7981999.001,2,663,0)
        <xsl:text>Date of birth&#160;</xsl:text>
"KRN",.84,7981999.001,2,664,0)
        <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,665,0)
          <xsl:with-param name="dt" select="../AGE_RANGE/@START"/>
"KRN",.84,7981999.001,2,666,0)
        </xsl:call-template>
"KRN",.84,7981999.001,2,667,0)
        <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,668,0)
        <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,669,0)
          <xsl:with-param name="dt" select="../AGE_RANGE/@END"/>  
"KRN",.84,7981999.001,2,670,0)
        </xsl:call-template>
"KRN",.84,7981999.001,2,671,0)
      </xsl:if>
"KRN",.84,7981999.001,2,672,0)
      <xsl:if test="../AGE_RANGE/@TYPE='AGE'">
"KRN",.84,7981999.001,2,673,0)
        <xsl:text>Age&#160;</xsl:text>
"KRN",.84,7981999.001,2,674,0)
        <xsl:value-of select="../AGE_RANGE/@START"/>
"KRN",.84,7981999.001,2,675,0)
        <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,676,0)
        <xsl:value-of select="../AGE_RANGE/@END"/>
"KRN",.84,7981999.001,2,677,0)
      </xsl:if>
"KRN",.84,7981999.001,2,678,0)
     </xsl:when>
"KRN",.84,7981999.001,2,679,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,680,0)
      <xsl:text>All</xsl:text>
"KRN",.84,7981999.001,2,681,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,682,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,683,0)
  </td>
"KRN",.84,7981999.001,2,684,0)
</tr>
"KRN",.84,7981999.001,2,685,0)
<xsl:if test="@SVR!=''">
"KRN",.84,7981999.001,2,686,0)
  <tr>
"KRN",.84,7981999.001,2,687,0)
    <th scope="row">SVR:&#160;</th>
"KRN",.84,7981999.001,2,688,0)
    <td>
"KRN",.84,7981999.001,2,689,0)
     <xsl:if test="@SVR='1'">
"KRN",.84,7981999.001,2,690,0)
       <xsl:text>SVR Only</xsl:text>
"KRN",.84,7981999.001,2,691,0)
     </xsl:if>
"KRN",.84,7981999.001,2,692,0)
     <xsl:if test="@SVR='0'">
"KRN",.84,7981999.001,2,693,0)
       <xsl:text>No SVR</xsl:text>
"KRN",.84,7981999.001,2,694,0)
     </xsl:if>
"KRN",.84,7981999.001,2,695,0)
     <xsl:if test="@SVR='-1'">
"KRN",.84,7981999.001,2,696,0)
       <xsl:text>All patients</xsl:text>
"KRN",.84,7981999.001,2,697,0)
     </xsl:if>
"KRN",.84,7981999.001,2,698,0)
    </td>
"KRN",.84,7981999.001,2,699,0)
   </tr>
"KRN",.84,7981999.001,2,700,0)
</xsl:if>
"KRN",.84,7981999.001,2,701,0)
</xsl:template>
"KRN",.84,7981999.001,2,702,0)
 
"KRN",.84,7981999.001,2,703,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,704,0)
<tr>
"KRN",.84,7981999.001,2,705,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,706,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,707,0)
</tr>
"KRN",.84,7981999.001,2,708,0)
</xsl:template>
"KRN",.84,7981999.001,2,709,0)
 
"KRN",.84,7981999.001,2,710,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,711,0)
<tr>
"KRN",.84,7981999.001,2,712,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,713,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,714,0)
</tr>
"KRN",.84,7981999.001,2,715,0)
</xsl:template>
"KRN",.84,7981999.001,2,716,0)
 
"KRN",.84,7981999.001,2,717,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,718,0)
<tr>
"KRN",.84,7981999.001,2,719,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,720,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,721,0)
</tr>
"KRN",.84,7981999.001,2,722,0)
</xsl:template>
"KRN",.84,7981999.001,2,723,0)
 
"KRN",.84,7981999.001,2,724,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,725,0)
<tr>
"KRN",.84,7981999.001,2,726,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,727,0)
  <td>
"KRN",.84,7981999.001,2,728,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,729,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,730,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,731,0)
  </td>
"KRN",.84,7981999.001,2,732,0)
</tr>
"KRN",.84,7981999.001,2,733,0)
</xsl:template>
"KRN",.84,7981999.001,2,734,0)
 
"KRN",.84,7981999.001,2,735,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,736,0)
<xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,737,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,738,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,739,0)
<xsl:if test="../TREATMENT_HISTORY">
"KRN",.84,7981999.001,2,740,0)
  <tr>
"KRN",.84,7981999.001,2,741,0)
   <th scope="row">Treatment History:&#160;</th>
"KRN",.84,7981999.001,2,742,0)
   <td>
"KRN",.84,7981999.001,2,743,0)
     <xsl:value-of select="../TREATMENT_HISTORY"/>
"KRN",.84,7981999.001,2,744,0)
   </td>
"KRN",.84,7981999.001,2,745,0)
  </tr>
"KRN",.84,7981999.001,2,746,0)
</xsl:if>
"KRN",.84,7981999.001,2,747,0)
</xsl:template>
"KRN",.84,7981999.001,2,748,0)
 
"KRN",.84,7981999.001,2,749,0)
  <xsl:template match="PARAMETERS/DATE_RANGE_5">
"KRN",.84,7981999.001,2,750,0)
   <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,751,0)
    <xsl:with-param name="title" select="'Diagnosis'"/>
"KRN",.84,7981999.001,2,752,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,753,0)
  </xsl:template>
"KRN",.84,7981999.001,2,754,0)
 
"KRN",.84,7981999.001,2,755,0)
<!--
"KRN",.84,7981999.001,2,756,0)
=========================================================================
"KRN",.84,7981999.001,2,757,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,758,0)
=========================================================================
"KRN",.84,7981999.001,2,759,0)
-->
"KRN",.84,7981999.001,2,760,0)
 
"KRN",.84,7981999.001,2,761,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,762,0)
<xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,763,0)
<xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,764,0)
<xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,765,0)
<xsl:choose>
"KRN",.84,7981999.001,2,766,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,767,0)
   <div>
"KRN",.84,7981999.001,2,768,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,769,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,770,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,771,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,772,0)
    </xsl:if>
"KRN",.84,7981999.001,2,773,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,774,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,775,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,776,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,777,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,778,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,779,0)
     <tbody>
"KRN",.84,7981999.001,2,780,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,781,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,782,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,783,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,784,0)
     </tbody>
"KRN",.84,7981999.001,2,785,0)
    </table>
"KRN",.84,7981999.001,2,786,0)
   </div>
"KRN",.84,7981999.001,2,787,0)
  </xsl:when>
"KRN",.84,7981999.001,2,788,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,789,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,790,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,791,0)
</xsl:choose>
"KRN",.84,7981999.001,2,792,0)
</xsl:template>
"KRN",.84,7981999.001,2,793,0)
 
"KRN",.84,7981999.001,2,794,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,795,0)
 
"KRN",.84,7981999.001,2,796,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,797,0)
<thead>
"KRN",.84,7981999.001,2,798,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,799,0)
</thead>
"KRN",.84,7981999.001,2,800,0)
</xsl:template>
"KRN",.84,7981999.001,2,801,0)
 
"KRN",.84,7981999.001,2,802,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,803,0)
 
"KRN",.84,7981999.001,2,804,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,805,0)
<xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,806,0)
<xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,807,0)
<xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,808,0)
<xsl:param name="sort" 
"KRN",.84,7981999.001,2,809,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,810,0)
<xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,811,0)
<xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,812,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,813,0)
<xsl:param name="style"/>
"KRN",.84,7981999.001,2,814,0)
<xsl:param name="width"/>
"KRN",.84,7981999.001,2,815,0)
<th scope="col">
"KRN",.84,7981999.001,2,816,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,817,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,818,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,819,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,820,0)
  </xsl:if>
"KRN",.84,7981999.001,2,821,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,822,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,823,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,824,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,825,0)
  </xsl:if>
"KRN",.84,7981999.001,2,826,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,827,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,828,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,829,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,830,0)
  </xsl:if>
"KRN",.84,7981999.001,2,831,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,832,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,833,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,834,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,835,0)
  </xsl:if>
"KRN",.84,7981999.001,2,836,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,837,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,838,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,839,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,840,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,841,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,842,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,843,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,844,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,845,0)
    </xsl:element>
"KRN",.84,7981999.001,2,846,0)
   </xsl:when>
"KRN",.84,7981999.001,2,847,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,848,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,849,0)
</th>
"KRN",.84,7981999.001,2,850,0)
</xsl:template>
"KRN",.84,7981999.001,2,851,0)
 
"KRN",.84,7981999.001,2,852,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,853,0)
 
"KRN",.84,7981999.001,2,854,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,855,0)
<xsl:param name="colspan"
"KRN",.84,7981999.001,2,856,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,857,0)
<tfoot><tr><td>
"KRN",.84,7981999.001,2,858,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,859,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,860,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,861,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,862,0)
  </xsl:if>
"KRN",.84,7981999.001,2,863,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,864,0)
</td></tr></tfoot>
"KRN",.84,7981999.001,2,865,0)
</xsl:template>
"KRN",.84,7981999.001,2,866,0)
 
"KRN",.84,7981999.001,2,867,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,868,0)
 
"KRN",.84,7981999.001,2,869,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,870,0)
<xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,871,0)
<tr>
"KRN",.84,7981999.001,2,872,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,873,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,874,0)
  </xsl:if>
"KRN",.84,7981999.001,2,875,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,876,0)
</tr>
"KRN",.84,7981999.001,2,877,0)
</xsl:template>
"KRN",.84,7981999.001,2,878,0)
 
"KRN",.84,7981999.001,2,879,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,880,0)
 
"KRN",.84,7981999.001,2,881,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,882,0)
<xsl:param name="class"/>
"KRN",.84,7981999.001,2,883,0)
<xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,884,0)
<xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,885,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,886,0)
<xsl:param name="style"/>
"KRN",.84,7981999.001,2,887,0)
<xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,888,0)
<xsl:param name="width"/>
"KRN",.84,7981999.001,2,889,0)
<xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,890,0)
<td>
"KRN",.84,7981999.001,2,891,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,892,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,893,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,894,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,895,0)
  </xsl:if>
"KRN",.84,7981999.001,2,896,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,897,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,898,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,899,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,900,0)
  </xsl:if>
"KRN",.84,7981999.001,2,901,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,902,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,903,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,904,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,905,0)
  </xsl:if>
"KRN",.84,7981999.001,2,906,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,907,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,908,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,909,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,910,0)
  </xsl:if>
"KRN",.84,7981999.001,2,911,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,912,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,913,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,914,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,915,0)
  </xsl:if>
"KRN",.84,7981999.001,2,916,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,917,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,918,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,919,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,920,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,921,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,922,0)
   </xsl:when>
"KRN",.84,7981999.001,2,923,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,924,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,925,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,926,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,927,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,928,0)
   </xsl:when>
"KRN",.84,7981999.001,2,929,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,930,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,931,0)
</td>
"KRN",.84,7981999.001,2,932,0)
</xsl:template>
"KRN",.84,7981999.001,2,933,0)
 
"KRN",.84,7981999.001,2,934,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,935,0)
 
"KRN",.84,7981999.001,2,936,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,937,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,938,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,939,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,940,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,941,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,942,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,943,0)
</xsl:template>
"KRN",.84,7981999.001,2,944,0)
 
"KRN",.84,7981999.001,2,945,0)
<xsl:template 
"KRN",.84,7981999.001,2,946,0)
match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,947,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,948,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,949,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,950,0)
  <xsl:with-param name="title" 
"KRN",.84,7981999.001,2,951,0)
select="'Date'"/>                               
"KRN",.84,7981999.001,2,952,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,953,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,954,0)
</xsl:template>
"KRN",.84,7981999.001,2,955,0)
 
"KRN",.84,7981999.001,2,956,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,957,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,958,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,959,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,960,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,961,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,962,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,963,0)
</xsl:template>
"KRN",.84,7981999.001,2,964,0)
 
"KRN",.84,7981999.001,2,965,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,966,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,967,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,968,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,969,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,970,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,971,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,972,0)
</xsl:template>
"KRN",.84,7981999.001,2,973,0)
 
"KRN",.84,7981999.001,2,974,0)
<xsl:template match="COLUMN[@NAME='AGE']">
"KRN",.84,7981999.001,2,975,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,976,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,977,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,978,0)
  <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981999.001,2,979,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981999.001,2,980,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,981,0)
</xsl:template>
"KRN",.84,7981999.001,2,982,0)
 
"KRN",.84,7981999.001,2,983,0)
<xsl:template match="COLUMN[@NAME='DOB']">
"KRN",.84,7981999.001,2,984,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,985,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,986,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,987,0)
  <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981999.001,2,988,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,989,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,990,0)
</xsl:template>
"KRN",.84,7981999.001,2,991,0)
 
"KRN",.84,7981999.001,2,992,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,993,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,994,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,995,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,996,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,997,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,998,0)
</xsl:template>
"KRN",.84,7981999.001,2,999,0)
 
"KRN",.84,7981999.001,2,1000,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,1001,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,1002,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,1003,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,1004,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,1005,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,1006,0)
</xsl:template>
"KRN",.84,7981999.001,2,1007,0)
 
"KRN",.84,7981999.001,2,1008,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,1009,0)
 
"KRN",.84,7981999.001,2,1010,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,1011,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,1012,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,1013,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,1014,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,1015,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,1016,0)
</xsl:template>
"KRN",.84,7981999.001,2,1017,0)
 
"KRN",.84,7981999.001,2,1018,0)
<xsl:template match="PATIENT/DOB">
"KRN",.84,7981999.001,2,1019,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,1020,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,1021,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,1022,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,1023,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,1024,0)
</xsl:template>
"KRN",.84,7981999.001,2,1025,0)
 
"KRN",.84,7981999.001,2,1026,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,1027,0)
<xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,1028,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,1029,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,1030,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,1031,0)
</xsl:call-template>
"KRN",.84,7981999.001,2,1032,0)
</xsl:template>
"KRN",.84,7981999.001,2,1033,0)
 
"KRN",.84,7981999.001,2,1034,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845A
"KRN",.84,7981999.002,-1)
0^3
"KRN",.84,7981999.002,0)
7981999.002^2^^CLINICAL CASE REGISTRIES^Common XSL templates (CSV)
"KRN",.84,7981999.002,2,0)
^^291^291^3180411^
"KRN",.84,7981999.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.002,2,2,0)
<xsl:stylesheet version="1.0" 
"KRN",.84,7981999.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.002,2,4,0)
 
"KRN",.84,7981999.002,2,5,0)
<!-- Common (999.2) -->
"KRN",.84,7981999.002,2,6,0)
 
"KRN",.84,7981999.002,2,7,0)
<xsl:output method="text" encoding="iso-8859-1"/>
"KRN",.84,7981999.002,2,8,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.002,2,9,0)
 
"KRN",.84,7981999.002,2,10,0)
<xsl:variable name="CRLF"><xsl:text>&#13;&#10;</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,11,0)
<xsl:variable name="DELIMITER"><xsl:text>,</xsl:text></xsl:variable>
"KRN",.84,7981999.002,2,12,0)
<!-- xsl:variable 
"KRN",.84,7981999.002,2,13,0)
name="FILESWITCH"><xsl:text>&#127;</xsl:text></xsl:variable -->
"KRN",.84,7981999.002,2,14,0)
 
"KRN",.84,7981999.002,2,15,0)
<!-- Determine if the Age, Future Appt, DOB, ICN, PACT or PCP column is 
"KRN",.84,7981999.002,2,16,0)
present on the report. -->  
"KRN",.84,7981999.002,2,17,0)
<xsl:variable name="AGE_YES"  
"KRN",.84,7981999.002,2,18,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='AGE']) &gt; 0"/>
"KRN",.84,7981999.002,2,19,0)
<xsl:variable name="APPT_YES" 
"KRN",.84,7981999.002,2,20,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='FUT_APPT']) &gt; 0"/>
"KRN",.84,7981999.002,2,21,0)
<xsl:variable name="DOB_YES"  
"KRN",.84,7981999.002,2,22,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='DOB']) &gt; 0"/>
"KRN",.84,7981999.002,2,23,0)
<xsl:variable name="ICN_YES"  
"KRN",.84,7981999.002,2,24,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='ICN']) &gt; 0"/>
"KRN",.84,7981999.002,2,25,0)
<xsl:variable name="PACT_YES" 
"KRN",.84,7981999.002,2,26,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='PACT']) &gt; 0"/>
"KRN",.84,7981999.002,2,27,0)
<xsl:variable name="PCP_YES"  
"KRN",.84,7981999.002,2,28,0)
select="count(/REPORT/HEADER/TBLDEF//COLUMN[@NAME='PCP']) &gt; 0"/>
"KRN",.84,7981999.002,2,29,0)
 
"KRN",.84,7981999.002,2,30,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.002,2,31,0)
 
"KRN",.84,7981999.002,2,32,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.002,2,33,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.002,2,34,0)
 
"KRN",.84,7981999.002,2,35,0)
<!--
"KRN",.84,7981999.002,2,36,0)
=========================================================================
"KRN",.84,7981999.002,2,37,0)
                                UTILITIES
"KRN",.84,7981999.002,2,38,0)
=========================================================================
"KRN",.84,7981999.002,2,39,0)
-->
"KRN",.84,7981999.002,2,40,0)
 
"KRN",.84,7981999.002,2,41,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.002,2,42,0)
 
"KRN",.84,7981999.002,2,43,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.002,2,44,0)
<xsl:param name="dt"/>
"KRN",.84,7981999.002,2,45,0)
<!--
"KRN",.84,7981999.002,2,46,0)
     Date (YYYMMDD)
"KRN",.84,7981999.002,2,47,0)
-->
"KRN",.84,7981999.002,2,48,0)
<xsl:variable name="date"
"KRN",.84,7981999.002,2,49,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.002,2,50,0)
<xsl:if test="$date!=''">
"KRN",.84,7981999.002,2,51,0)
  <xsl:choose>
"KRN",.84,7981999.002,2,52,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.002,2,53,0)
    <xsl:variable name="year" 
"KRN",.84,7981999.002,2,54,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.002,2,55,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.002,2,56,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.002,2,57,0)
    <xsl:choose>
"KRN",.84,7981999.002,2,58,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.002,2,59,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.002,2,60,0)
     </xsl:when>
"KRN",.84,7981999.002,2,61,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.002,2,62,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.002,2,63,0)
     </xsl:when>
"KRN",.84,7981999.002,2,64,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.002,2,65,0)
    </xsl:choose>
"KRN",.84,7981999.002,2,66,0)
   </xsl:when>
"KRN",.84,7981999.002,2,67,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.002,2,68,0)
  </xsl:choose>
"KRN",.84,7981999.002,2,69,0)
  <!--
"KRN",.84,7981999.002,2,70,0)
      Time (HHMMSS)
"KRN",.84,7981999.002,2,71,0)
  -->
"KRN",.84,7981999.002,2,72,0)
  <xsl:variable name="time"
"KRN",.84,7981999.002,2,73,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.002,2,74,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.002,2,75,0)
   <xsl:text> </xsl:text>
"KRN",.84,7981999.002,2,76,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.002,2,77,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.002,2,78,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.002,2,79,0)
  </xsl:if>
"KRN",.84,7981999.002,2,80,0)
</xsl:if>
"KRN",.84,7981999.002,2,81,0)
</xsl:template>
"KRN",.84,7981999.002,2,82,0)
 
"KRN",.84,7981999.002,2,83,0)
<!-- Doubles the double quotes in the provided string -->
"KRN",.84,7981999.002,2,84,0)
 
"KRN",.84,7981999.002,2,85,0)
<xsl:template name="DoubleQuotes">
"KRN",.84,7981999.002,2,86,0)
<xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,87,0)
<xsl:choose>
"KRN",.84,7981999.002,2,88,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,89,0)
   <xsl:value-of select="substring-before($value,'&quot;')"/>
"KRN",.84,7981999.002,2,90,0)
   <xsl:text>&quot;&quot;</xsl:text>
"KRN",.84,7981999.002,2,91,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,92,0)
    <xsl:with-param name="value" 
"KRN",.84,7981999.002,2,93,0)
                    select="substring-after($value,'&quot;')"/>
"KRN",.84,7981999.002,2,94,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,95,0)
  </xsl:when>
"KRN",.84,7981999.002,2,96,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,97,0)
</xsl:choose>
"KRN",.84,7981999.002,2,98,0)
</xsl:template>
"KRN",.84,7981999.002,2,99,0)
 
"KRN",.84,7981999.002,2,100,0)
<!-- Quotes the string if it contains commas or double quotes -->
"KRN",.84,7981999.002,2,101,0)
 
"KRN",.84,7981999.002,2,102,0)
<xsl:template name="Quote">
"KRN",.84,7981999.002,2,103,0)
<xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,104,0)
<xsl:choose>
"KRN",.84,7981999.002,2,105,0)
  <xsl:when test="contains($value,'&quot;')">
"KRN",.84,7981999.002,2,106,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,107,0)
   <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981999.002,2,108,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,109,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,110,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,111,0)
  </xsl:when>
"KRN",.84,7981999.002,2,112,0)
  <xsl:when test="contains($value,$DELIMITER)">
"KRN",.84,7981999.002,2,113,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,114,0)
   <xsl:value-of select="$value"/>
"KRN",.84,7981999.002,2,115,0)
   <xsl:text>&quot;</xsl:text>
"KRN",.84,7981999.002,2,116,0)
  </xsl:when>
"KRN",.84,7981999.002,2,117,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.002,2,118,0)
</xsl:choose>
"KRN",.84,7981999.002,2,119,0)
</xsl:template> 
"KRN",.84,7981999.002,2,120,0)
 
"KRN",.84,7981999.002,2,121,0)
<!-- Default report summary -->
"KRN",.84,7981999.002,2,122,0)
 
"KRN",.84,7981999.002,2,123,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.002,2,124,0)
<xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.002,2,125,0)
<xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.002,2,126,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,127,0)
  <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.002,2,128,0)
</xsl:if>
"KRN",.84,7981999.002,2,129,0)
</xsl:template>
"KRN",.84,7981999.002,2,130,0)
 
"KRN",.84,7981999.002,2,131,0)
<!-- Empty table indicator -->
"KRN",.84,7981999.002,2,132,0)
 
"KRN",.84,7981999.002,2,133,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.002,2,134,0)
<xsl:text>No data has been found.</xsl:text>
"KRN",.84,7981999.002,2,135,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,136,0)
</xsl:template>
"KRN",.84,7981999.002,2,137,0)
 
"KRN",.84,7981999.002,2,138,0)
<!-- Format the section of a utilization report -->
"KRN",.84,7981999.002,2,139,0)
 
"KRN",.84,7981999.002,2,140,0)
<xsl:template name="UtilizationSection">
"KRN",.84,7981999.002,2,141,0)
<xsl:param name="data"/>
"KRN",.84,7981999.002,2,142,0)
<xsl:param name="subttl"/>
"KRN",.84,7981999.002,2,143,0)
<xsl:variable name="table" select="$data/@TABLE"/>
"KRN",.84,7981999.002,2,144,0)
<xsl:if test="$data/*[1]">
"KRN",.84,7981999.002,2,145,0)
  <xsl:value-of select="$UTILIZATION_HEADER"/>
"KRN",.84,7981999.002,2,146,0)
  <xsl:value-of select="concat(' (',$subttl,')')"/>
"KRN",.84,7981999.002,2,147,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,148,0)
  <xsl:apply-templates select="$data"/>
"KRN",.84,7981999.002,2,149,0)
  <!-- xsl:value-of select="$FILESWITCH"/ -->
"KRN",.84,7981999.002,2,150,0)
</xsl:if>
"KRN",.84,7981999.002,2,151,0)
 
"KRN",.84,7981999.002,2,152,0)
</xsl:template>
"KRN",.84,7981999.002,2,153,0)
 
"KRN",.84,7981999.002,2,154,0)
<!--
"KRN",.84,7981999.002,2,155,0)
=========================================================================
"KRN",.84,7981999.002,2,156,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.002,2,157,0)
=========================================================================
"KRN",.84,7981999.002,2,158,0)
-->
"KRN",.84,7981999.002,2,159,0)
 
"KRN",.84,7981999.002,2,160,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.002,2,161,0)
<xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.002,2,162,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,163,0)
<xsl:choose>
"KRN",.84,7981999.002,2,164,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.002,2,165,0)
   <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.002,2,166,0)
   <xsl:apply-templates select="*"/>
"KRN",.84,7981999.002,2,167,0)
  </xsl:when>
"KRN",.84,7981999.002,2,168,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,169,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.002,2,170,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,171,0)
</xsl:choose>
"KRN",.84,7981999.002,2,172,0)
</xsl:template>
"KRN",.84,7981999.002,2,173,0)
 
"KRN",.84,7981999.002,2,174,0)
<!-- Default data grid header -->
"KRN",.84,7981999.002,2,175,0)
 
"KRN",.84,7981999.002,2,176,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.002,2,177,0)
<xsl:apply-templates select="..//COLUMN[not(child::COLUMN[1])]"/>
"KRN",.84,7981999.002,2,178,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,179,0)
</xsl:template>
"KRN",.84,7981999.002,2,180,0)
 
"KRN",.84,7981999.002,2,181,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.002,2,182,0)
 
"KRN",.84,7981999.002,2,183,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.002,2,184,0)
<xsl:param name="column" select="."/>
"KRN",.84,7981999.002,2,185,0)
<xsl:param name="title" select="$column/@NAME"/>
"KRN",.84,7981999.002,2,186,0)
<xsl:if test="$title!='#'">
"KRN",.84,7981999.002,2,187,0)
  <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,188,0)
   <xsl:with-param name="value" select="$title"/>
"KRN",.84,7981999.002,2,189,0)
  </xsl:call-template>
"KRN",.84,7981999.002,2,190,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,191,0)
</xsl:if>
"KRN",.84,7981999.002,2,192,0)
</xsl:template>
"KRN",.84,7981999.002,2,193,0)
 
"KRN",.84,7981999.002,2,194,0)
<!-- Default data grid row -->
"KRN",.84,7981999.002,2,195,0)
 
"KRN",.84,7981999.002,2,196,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.002,2,197,0)
<xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.002,2,198,0)
<xsl:if test="$seqnum">
"KRN",.84,7981999.002,2,199,0)
  <xsl:value-of select="position()"/>
"KRN",.84,7981999.002,2,200,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,201,0)
</xsl:if>
"KRN",.84,7981999.002,2,202,0)
<xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.002,2,203,0)
<xsl:value-of select="$CRLF"/>
"KRN",.84,7981999.002,2,204,0)
</xsl:template>
"KRN",.84,7981999.002,2,205,0)
 
"KRN",.84,7981999.002,2,206,0)
<!-- Data grid cell -->
"KRN",.84,7981999.002,2,207,0)
 
"KRN",.84,7981999.002,2,208,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.002,2,209,0)
<xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.002,2,210,0)
<xsl:param name="value" select="."/>
"KRN",.84,7981999.002,2,211,0)
<xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.002,2,212,0)
<xsl:choose>
"KRN",.84,7981999.002,2,213,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.002,2,214,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.002,2,215,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.002,2,216,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,217,0)
  </xsl:when>
"KRN",.84,7981999.002,2,218,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.002,2,219,0)
   <xsl:choose>
"KRN",.84,7981999.002,2,220,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.002,2,221,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.002,2,222,0)
   </xsl:choose>
"KRN",.84,7981999.002,2,223,0)
  </xsl:when>
"KRN",.84,7981999.002,2,224,0)
  <xsl:otherwise>
"KRN",.84,7981999.002,2,225,0)
   <xsl:call-template name="Quote">
"KRN",.84,7981999.002,2,226,0)
    <xsl:with-param name="value" select="$value"/>
"KRN",.84,7981999.002,2,227,0)
   </xsl:call-template>
"KRN",.84,7981999.002,2,228,0)
  </xsl:otherwise>
"KRN",.84,7981999.002,2,229,0)
</xsl:choose>
"KRN",.84,7981999.002,2,230,0)
<xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981999.002,2,231,0)
</xsl:template>
"KRN",.84,7981999.002,2,232,0)
 
"KRN",.84,7981999.002,2,233,0)
<!-- Default column headers -->
"KRN",.84,7981999.002,2,234,0)
 
"KRN",.84,7981999.002,2,235,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981999.002,2,236,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,237,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981999.002,2,238,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,239,0)
</xsl:template>
"KRN",.84,7981999.002,2,240,0)
 
"KRN",.84,7981999.002,2,241,0)
<xsl:template match="COLUMN[@NAME='DOB']">
"KRN",.84,7981999.002,2,242,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,243,0)
  <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981999.002,2,244,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,245,0)
</xsl:template>
"KRN",.84,7981999.002,2,246,0)
 
"KRN",.84,7981999.002,2,247,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.002,2,248,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,249,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.002,2,250,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,251,0)
</xsl:template>
"KRN",.84,7981999.002,2,252,0)
 
"KRN",.84,7981999.002,2,253,0)
<xsl:template match="COLUMN[@NAME='FUT_APPT']">
"KRN",.84,7981999.002,2,254,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,255,0)
  <xsl:with-param name="title" select="'Next Appt'"/>
"KRN",.84,7981999.002,2,256,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,257,0)
</xsl:template>
"KRN",.84,7981999.002,2,258,0)
 
"KRN",.84,7981999.002,2,259,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.002,2,260,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,261,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.002,2,262,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,263,0)
</xsl:template>
"KRN",.84,7981999.002,2,264,0)
 
"KRN",.84,7981999.002,2,265,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,266,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,267,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.002,2,268,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,269,0)
</xsl:template>
"KRN",.84,7981999.002,2,270,0)
 
"KRN",.84,7981999.002,2,271,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.002,2,272,0)
<xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.002,2,273,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.002,2,274,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,275,0)
</xsl:template>
"KRN",.84,7981999.002,2,276,0)
 
"KRN",.84,7981999.002,2,277,0)
<!-- Default cells -->
"KRN",.84,7981999.002,2,278,0)
 
"KRN",.84,7981999.002,2,279,0)
<xsl:template match="PATIENT/DOB">
"KRN",.84,7981999.002,2,280,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981999.002,2,281,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.002,2,282,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,283,0)
</xsl:template>
"KRN",.84,7981999.002,2,284,0)
 
"KRN",.84,7981999.002,2,285,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.002,2,286,0)
<xsl:call-template name="TableCell">
"KRN",.84,7981999.002,2,287,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.002,2,288,0)
</xsl:call-template>
"KRN",.84,7981999.002,2,289,0)
</xsl:template>
"KRN",.84,7981999.002,2,290,0)
 
"KRN",.84,7981999.002,2,291,0)
</xsl:stylesheet>
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PGL",798.1,9,1,13)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.1,21,1,21.01)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.128,0,2,.02)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.129,0,2,.02)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",798.2,5,1,7)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,2,.02)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PGL",799.51,0,3,.03)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,4,.04)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PKG",540,-1)
1^1
"PKG",540,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",540,20,0)
^9.402P^^
"PKG",540,22,0)
^9.49I^1^1
"PKG",540,22,1,0)
1.5^3060208^3070319^1
"PKG",540,22,1,"PAH",1,0)
33^3180731^10000000198
"PKG",540,22,1,"PAH",1,1,0)
^^29^29^3180731
"PKG",540,22,1,"PAH",1,1,1,0)
1. Six new local registries added
"PKG",540,22,1,"PAH",1,1,2,0)
2. Three new medications are added to the ROR GENERIC DRUG file
"PKG",540,22,1,"PAH",1,1,3,0)
   (#799.51) to be used as inclusion criteria for patients in the
"PKG",540,22,1,"PAH",1,1,4,0)
   respective registry(s).
"PKG",540,22,1,"PAH",1,1,5,0)
      a. HIV registry    : 
"PKG",540,22,1,"PAH",1,1,6,0)
            BICTEGRAVIR/EMTRICITABINE/TENOFOVIR
"PKG",540,22,1,"PAH",1,1,7,0)
 
"PKG",540,22,1,"PAH",1,1,8,0)
            EFAVIRENZ/LAMIVUDINE/TENOFOVIR
"PKG",540,22,1,"PAH",1,1,9,0)
 
"PKG",540,22,1,"PAH",1,1,10,0)
            LAMIVUDINE/ TDF
"PKG",540,22,1,"PAH",1,1,11,0)
  
"PKG",540,22,1,"PAH",1,1,12,0)
 3. A  new Future Appointment selection paneladded to selected reports
"PKG",540,22,1,"PAH",1,1,13,0)
 4. The new panel will have a radio button with a label 
"PKG",540,22,1,"PAH",1,1,14,0)
    "All Patients" which will be the default. A second button
"PKG",540,22,1,"PAH",1,1,15,0)
     with a label "Only patients with an appointment in the
"PKG",540,22,1,"PAH",1,1,16,0)
     next X days".
"PKG",540,22,1,"PAH",1,1,17,0)
 
"PKG",540,22,1,"PAH",1,1,18,0)
5. On the report header for reports that display "Only patients with
"PKG",540,22,1,"PAH",1,1,19,0)
    appointment in the X number of days", new text will be displayed as
"PKG",540,22,1,"PAH",1,1,20,0)
    follows to et the user know that the report was run for future 
"PKG",540,22,1,"PAH",1,1,21,0)
    appointments only.
"PKG",540,22,1,"PAH",1,1,22,0)
 
"PKG",540,22,1,"PAH",1,1,23,0)
6. New LOINC codes have been added to the ROR LAB SEARCH file (#798.9) 
"PKG",540,22,1,"PAH",1,1,24,0)
   to add patients to the HIV pending list.
"PKG",540,22,1,"PAH",1,1,25,0)
7. A correction was made on the Combined Meds and Labs, 
"PKG",540,22,1,"PAH",1,1,26,0)
    DAA Lab Monitoring, Hepatitis A and the Hepatitis B
"PKG",540,22,1,"PAH",1,1,27,0)
    reports when sorting by the ICN, PACT or PCP columns. 
"PKG",540,22,1,"PAH",1,1,28,0)
      
"PKG",540,22,1,"PAH",1,1,29,0)
 8. The version of the CCR software has been updated 
"PRE")
RORP033
"QUES","POSQ1",0)
N^0:10:0
"QUES","POSQ1","A")
Maximum number of registry update subtasks
"QUES","POSQ1","B")
5
"QUES","POSQ1","M")
D BLD^DIALOG(7980000.009,,,"DIR(""?"")","S")
"QUES","POSQ2",0)
Y
"QUES","POSQ2","A")
Suspend the post-install during the peak hours 
"QUES","POSQ2","B")
NO
"QUES","POSQ2","M")
W ! D BLD^DIALOG(7980000.01,,,"DIR(""?"")","S")
"QUES","POSQ3",0)
D^::R
"QUES","POSQ3","A")
Suspension start time
"QUES","POSQ3","B")
7:00AM
"QUES","POSQ3","M")
W ! D POSQ3^RORP024(.DIR)
"QUES","POSQ4",0)
D
"QUES","POSQ4","A")
Suspension end time
"QUES","POSQ4","B")
6:00PM
"QUES","POSQ4","M")
W ! D POSQ4^RORP024(.DIR)
"QUES","POSQ5",0)
D^::FRX
"QUES","POSQ5","?")
The date/time entered must be at least 15 minutes in the future.
"QUES","POSQ5","A")
Date/Time to run the new registry initialize task
"QUES","POSQ5","M")
D POSQ5^RORP024(.DIR)
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
21
"RTN","RORP033")
0^20^B197718013^n/a
"RTN","RORP033",1,0)
RORP033 ;ALB/MAF - CCR PRE/POST-INSTALL PATCH 33 ;18 Apr 2018  1:38 PM
"RTN","RORP033",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**33**;Feb 17, 2006;Build 81
"RTN","RORP033",3,0)
 ;
"RTN","RORP033",4,0)
 ;*****************************************************************************
"RTN","RORP033",5,0)
 ;*****************************************************************************
"RTN","RORP033",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORP033",7,0)
 ;  
"RTN","RORP033",8,0)
 ;PKG/PATCH    DATE       DEVELOPER    MODIFICATION
"RTN","RORP033",9,0)
 ;-----------  ---------  -----------  ----------------------------------------
"RTN","RORP033",10,0)
 ;ROR*1.5*33   Mar 2018   M FERRARESE  Added routine for env check, pre/post
"RTN","RORP033",11,0)
 ;                                     install          
"RTN","RORP033",12,0)
 ;******************************************************************************
"RTN","RORP033",13,0)
 ;******************************************************************************
"RTN","RORP033",14,0)
 ; 
"RTN","RORP033",15,0)
 ; SUPPORTED CALLS:
"RTN","RORP033",16,0)
 ;  RTN^%ZTLOAD   #10063
"RTN","RORP033",17,0)
 ;  STAT^%ZTLOAD  #10063
"RTN","RORP033",18,0)
 ;  BMES^XPDUTL   #10141
"RTN","RORP033",19,0)
 ;  OWNSKEY^XUSRB #3277 (supported)  
"RTN","RORP033",20,0)
 ;  MES^XPDUTL    #10141
"RTN","RORP033",21,0)
 ;  BLD^DIALOG    #2050
"RTN","RORP033",22,0)
 ;  UPDATE^DIE    #2053
"RTN","RORP033",23,0)
 ;  FMADD^XLFDT   #10103
"RTN","RORP033",24,0)
 ;  NOW^XLFDT     #10103
"RTN","RORP033",25,0)
 ;  FMTE^XLFDT    #10103
"RTN","RORP033",26,0)
 ;  ADD^XPAR      #2263
"RTN","RORP033",27,0)
 ;  DEL^XPAR      #2263
"RTN","RORP033",28,0)
 ;  CLEAN^DILF    #2054
"RTN","RORP033",29,0)
 ;
"RTN","RORP033",30,0)
ENV ; --- Environment check
"RTN","RORP033",31,0)
 S XPDNOQUE=1 ; disable queuing
"RTN","RORP033",32,0)
 Q
"RTN","RORP033",33,0)
 ;
"RTN","RORP033",34,0)
PRE ; --- Pre-Install routine for Patch 32
"RTN","RORP033",35,0)
 ; CHECK FOR ROR VA IRM KEY, ABORT IF USER DOES NOT POSSESS
"RTN","RORP033",36,0)
 N RORKEYOK
"RTN","RORP033",37,0)
 D BMES^XPDUTL("Verifying installing user has the ROR VA IRM security key")
"RTN","RORP033",38,0)
 D OWNSKEY^XUSRB(.RORKEYOK,"ROR VA IRM",DUZ)
"RTN","RORP033",39,0)
 I '$G(RORKEYOK(0)) D  Q
"RTN","RORP033",40,0)
 . S XPDABORT=1
"RTN","RORP033",41,0)
 . D BMES^XPDUTL("****** INSTALL ABORTED!!! ******")
"RTN","RORP033",42,0)
 . D BMES^XPDUTL("This patch can only be installed by a user who is assigned the ROR VA IRM key")
"RTN","RORP033",43,0)
 . D BMES^XPDUTL("Restart the installation again once the appropriate key has been assigned")
"RTN","RORP033",44,0)
 D BMES^XPDUTL("  User has the ROR VA IRM key - OK to install")
"RTN","RORP033",45,0)
 ;
"RTN","RORP033",46,0)
 N RC,ZTSK,RORBUF,RORMES
"RTN","RORP033",47,0)
 ; Check for ROR INITIALIZE task running
"RTN","RORP033",48,0)
 D BMES^XPDUTL("   *** Checking to be sure ROR INITIALIZE task is not already running")
"RTN","RORP033",49,0)
 S RC=0
"RTN","RORP033",50,0)
 D OPTION^%ZTLOAD("ROR INITIALIZE",.RORBUF)
"RTN","RORP033",51,0)
 S ZTSK=0 F  S ZTSK=$O(@RORBUF@(ZTSK)) Q:'ZTSK  D  I $G(ZTSK(1))=2 S RC=-1 Q
"RTN","RORP033",52,0)
 . D STAT^%ZTLOAD
"RTN","RORP033",53,0)
 S ZTSK=0 F  S ZTSK=$O(@RORBUF@(ZTSK)) Q:'ZTSK  K @RORBUF@(ZTSK) ;clean up
"RTN","RORP033",54,0)
 ;--- Display error message if option is running
"RTN","RORP033",55,0)
 I RC<0  D  S XPDABORT=2 Q
"RTN","RORP033",56,0)
 . K RORMES
"RTN","RORP033",57,0)
 . D BMES^XPDUTL($$MSG^RORERR20(RC,,XPDNM))
"RTN","RORP033",58,0)
 . D BMES^XPDUTL("")
"RTN","RORP033",59,0)
 . S RORMES(1)="   >> ROR INITIALIZE task is already running.  Task # is "_ZTSK
"RTN","RORP033",60,0)
 . S RORMES(2)="      This task must complete or be terminated before the install can continue"
"RTN","RORP033",61,0)
 . S RORMES(3)="      Restart this patch install when this task is not running"
"RTN","RORP033",62,0)
 . S RORMES(4)=" "
"RTN","RORP033",63,0)
 . D MES^XPDUTL(.RORMES)
"RTN","RORP033",64,0)
  ; Is ROR TASK option running
"RTN","RORP033",65,0)
 D BMES^XPDUTL("   *** Checking to be sure ROR TASK is not running")
"RTN","RORP033",66,0)
 S RC=0 K RORBUF
"RTN","RORP033",67,0)
 D OPTION^%ZTLOAD("ROR TASK",.RORBUF) ;returns data in ^TMP($J)
"RTN","RORP033",68,0)
 S ZTSK=0
"RTN","RORP033",69,0)
 F  S ZTSK=$O(@RORBUF@(ZTSK)) Q:'ZTSK  D  I $G(ZTSK(1))=2 S RC=-76 Q
"RTN","RORP033",70,0)
 . D STAT^%ZTLOAD
"RTN","RORP033",71,0)
 ;don't want to K ^TMP($J). May kill something that is needed elsewhere.
"RTN","RORP033",72,0)
 S ZTSK=0 F  S ZTSK=$O(@RORBUF@(ZTSK)) Q:'ZTSK  K @RORBUF@(ZTSK)
"RTN","RORP033",73,0)
 ;--- Display error message if option is running
"RTN","RORP033",74,0)
 I RC<0  D  S XPDABORT=2 Q
"RTN","RORP033",75,0)
 . K RORMES
"RTN","RORP033",76,0)
 . D BMES^XPDUTL($$MSG^RORERR20(RC,,,"ROR TASK"))
"RTN","RORP033",77,0)
 . D BMES^XPDUTL("")
"RTN","RORP033",78,0)
 . S RORMES(1)="   >> ROR TASK is already running.  Task # is "_ZTSK
"RTN","RORP033",79,0)
 . S RORMES(2)="      This task must complete before the install can continue."
"RTN","RORP033",80,0)
 . S RORMES(3)="      Restart this patch install when this task is not running."
"RTN","RORP033",81,0)
 . S RORMES(4)=" "
"RTN","RORP033",82,0)
 . D MES^XPDUTL(.RORMES)
"RTN","RORP033",83,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP033",84,0)
 N RORI,REGIEN,RORREG,Z,X,Y,DIR
"RTN","RORP033",85,0)
 K ^XTMP("ROR_NO_INIT")  ; Will contain any pre-initialized registries not to be reinitialized
"RTN","RORP033",86,0)
 D XTMPHDR^RORUTL01("ROR_NO_INIT",7,"CCR REGISTRIES NOT TO BE RE-INITIALIZED")
"RTN","RORP033",87,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP033")),";;",2),U) Q:RORREG=""  D  Q:$G(XPDABORT)
"RTN","RORP033",88,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP033",89,0)
 . Q:REGIEN'>0  ; new registry doesn't yet exist
"RTN","RORP033",90,0)
 . ; Check if registry is already initiated (has a value in HDT field)
"RTN","RORP033",91,0)
 . S Z=$$GET1^DIQ(798.1,REGIEN_",",21.05,"I")
"RTN","RORP033",92,0)
 . I Z'="" D  Q
"RTN","RORP033",93,0)
 . . S DIR(0)="YA",DIR("A",1)="  >> New registry "_RORREG_"(ien #"_REGIEN_") has already completed initialization"
"RTN","RORP033",94,0)
 . . S DIR("A")="Do you want to rerun its initialization?: ",DIR("B")="NO"
"RTN","RORP033",95,0)
 . . W ! D ^DIR K DIR W !
"RTN","RORP033",96,0)
 . . I Y<0 S XPDABORT=2 K ^XTMP("ROR_NO_INIT") D BMES^XPDUTL("INSTALL ABORTED") Q
"RTN","RORP033",97,0)
 . . I Y'=1 S ^XTMP("ROR_NO_INIT",REGIEN)=""
"RTN","RORP033",98,0)
 Q
"RTN","RORP033",99,0)
 ;
"RTN","RORP033",100,0)
POST ; --- Post-Install routine for Patch 32
"RTN","RORP033",101,0)
 N CT,RORI,RORREG,REGIEN,Z
"RTN","RORP033",102,0)
 N RORPARM
"RTN","RORP033",103,0)
 S RORPARM("DEVELOPER")=1
"RTN","RORP033",104,0)
 D BMES^XPDUTL("POST INSTALL START")
"RTN","RORP033",105,0)
 ;
"RTN","RORP033",106,0)
 D BMES^XPDUTL(">> Adding new LOINC codes to the VA HIV registry parameters")
"RTN","RORP033",107,0)
 D LOINC
"RTN","RORP033",108,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP033",109,0)
 ;
"RTN","RORP033",110,0)
 D BMES^XPDUTL(">> Adding new Future Appointments panel to reports")
"RTN","RORP033",111,0)
 D UPDPANEL
"RTN","RORP033",112,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP033",113,0)
 ;
"RTN","RORP033",114,0)
 D BMES^XPDUTL("Checking VA GENERIC drug file..Bictegravir/emtricitabine/tenofovir alafenamide ")
"RTN","RORP033",115,0)
 D BMES^XPDUTL("                            ..Efavirenz/lamivudine/tenofovir disoproxil fumarate ")
"RTN","RORP033",116,0)
 D BMES^XPDUTL("                            ..Lamivudine/tenofovir disoproxil fumarate ")
"RTN","RORP033",117,0)
 D GENDRG
"RTN","RORP033",118,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP033",119,0)
 D CLEAN^DILF
"RTN","RORP033",120,0)
 ;
"RTN","RORP033",121,0)
 D BMES^XPDUTL(">> Adding CPT and ICD-9 procedures to ROR ICD SEARCH file for new registries")
"RTN","RORP033",122,0)
 D UPDPROC
"RTN","RORP033",123,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP033",124,0)
 ;
"RTN","RORP033",125,0)
 D BMES^XPDUTL("Updating List Items for new registries")
"RTN","RORP033",126,0)
 D UPDLIST
"RTN","RORP033",127,0)
 D BMES^XPDUTL("    >> Step complete")
"RTN","RORP033",128,0)
 ;
"RTN","RORP033",129,0)
 D BMES^XPDUTL(">> Initiating background job to set up registries added with this patch")
"RTN","RORP033",130,0)
 N RORKIDS,RORERR,CT,DIERR
"RTN","RORP033",131,0)
 S RORKIDS=1
"RTN","RORP033",132,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP033")),";;",2),U) Q:RORREG=""  D
"RTN","RORP033",133,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP033",134,0)
 . Q:REGIEN'>0
"RTN","RORP033",135,0)
 . I $D(^XTMP("ROR_NO_INIT",REGIEN)) D  Q
"RTN","RORP033",136,0)
 . . S RORERR(1)="   It appears new registry "_RORREG_"(ien #"_REGIEN_") has already been initialized"
"RTN","RORP033",137,0)
 . . S RORERR(2)="   You have chosen not to re-initialize this registry"
"RTN","RORP033",138,0)
 . . S RORERR(3)=" "
"RTN","RORP033",139,0)
 . . D MES^XPDUTL(.RORERR)
"RTN","RORP033",140,0)
 . . K RORERR
"RTN","RORP033",141,0)
 . ;
"RTN","RORP033",142,0)
 . K RORFDA,RORMSG,RORERR
"RTN","RORP033",143,0)
 . S RORFDA(798.1,REGIEN_",",1)=2850101
"RTN","RORP033",144,0)
 . S RORFDA(798.1,REGIEN_",",19.1)=""
"RTN","RORP033",145,0)
 . S RORFDA(798.1,REGIEN_",",21.05)=""
"RTN","RORP033",146,0)
 . D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP033",147,0)
 . I $D(DIERR) D
"RTN","RORP033",148,0)
 . . K RORERR
"RTN","RORP033",149,0)
 . . M RORERR=RORMSG
"RTN","RORP033",150,0)
 . . D DBS^RORERR("RORMSG",-112,,,798.1,REGIEN)
"RTN","RORP033",151,0)
 . . M RORMSG=RORERR
"RTN","RORP033",152,0)
 . . K RORERR
"RTN","RORP033",153,0)
 . . S RORERR(1)="     New registry "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP033",154,0)
 . . S RORERR(2)="     and may not initialize correctly.  Please report this error to your CCR contact:"
"RTN","RORP033",155,0)
 . . S RORERR(3)=""
"RTN","RORP033",156,0)
 . . S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP033",157,0)
 . . S CT=CT+1,RORERR(CT)=" "
"RTN","RORP033",158,0)
 . . D MES^XPDUTL(.RORERR)
"RTN","RORP033",159,0)
 D ^RORSET02
"RTN","RORP033",160,0)
 K ^XTMP("ROR_NO_INIT")
"RTN","RORP033",161,0)
 D BMES^XPDUTL("   >> Step complete")
"RTN","RORP033",162,0)
 D BMES^XPDUTL("Updating the Drug matching entries...") D EN^RORUTL22
"RTN","RORP033",163,0)
 D BMES^XPDUTL("Tasking nightly job to gather drug matching...") D TASK^RORUTL22
"RTN","RORP033",164,0)
 D CLEAN^DILF
"RTN","RORP033",165,0)
 D BMES^XPDUTL("POST INSTALL COMPLETE")
"RTN","RORP033",166,0)
 Q
"RTN","RORP033",167,0)
GENDRG ; --- Delete entry in ROR GENERIC DRUG with unresolved pointers
"RTN","RORP033",168,0)
 ; clean up 799.51 if pointers are bad
"RTN","RORP033",169,0)
 ;  HIV registry  : BICTEGRAVIR/EMTRICITABINE/TENOFOVIR ALAFENAMIDE - "BICTEGRAVIR/EMTRICITABINE/TENOFOVIRQW"  Released in PSN*4*
"RTN","RORP033",170,0)
 ;                : EFAVIRENZ/LAMIVUDINE/TENOFOVIR DISOPROXIL FUMARATE - "EFAVIRENZ/LAMIVUDINE/TENOFOVIR"  Released in PSN*4*
"RTN","RORP033",171,0)
 ;                : LAMIVUDINE/TENOFOVIR DISOPROXIL FUMARATE - "LAMIVUDINE/TENOFOVIR"  Released in PSN*4* 
"RTN","RORP033",172,0)
 ;
"RTN","RORP033",173,0)
 ;
"RTN","RORP033",174,0)
 N DIC,X,DIK,DA,RORNAME,Y
"RTN","RORP033",175,0)
 S DIC=799.51,DIC(0)="MNZ"
"RTN","RORP033",176,0)
 F RORNAME="BICTEGRAVIR/EMTRICITABINE/TENOFOVIR","EFAVIRENZ/LAMIVUDINE/TENOFOVIR","LAMIVUDINE/TENOFOVIR" D
"RTN","RORP033",177,0)
 .S X=RORNAME D ^DIC Q:+Y<0
"RTN","RORP033",178,0)
 .Q:+$P(Y(0),U,4)>0
"RTN","RORP033",179,0)
 .S DA=+Y,DIK="^ROR(799.51," D ^DIK
"RTN","RORP033",180,0)
 .D BMES^XPDUTL("WARNING*** Missing entry in VA GENERIC file 50.6.")
"RTN","RORP033",181,0)
 Q
"RTN","RORP033",182,0)
 ; 
"RTN","RORP033",183,0)
LOINC ;Add new LOINC codes to the VA HIV lab search criterion in
"RTN","RORP033",184,0)
 ;ROR LAB SEARCH file #798.9.  Don't add them if they already exist.  Don't
"RTN","RORP033",185,0)
 ;add the 'dash' or the number following it (checksum)
"RTN","RORP033",186,0)
 ;**********************************************************************
"RTN","RORP033",187,0)
 N I,HEPCIEN,HIVIEN,RORDATA,RORLOINC,RORTAG,ROR K RORMSG1,RORMSG2
"RTN","RORP033",188,0)
 S HIVIEN=$O(^ROR(798.9,"B","VA HIV",0)) ;HIV top level IEN
"RTN","RORP033",189,0)
 ;--- add LOINC codes to the VA HIV search criteria
"RTN","RORP033",190,0)
 F I=1:1  S RORTAG="HIV+"_I,ROR=$P($T(@RORTAG),";;",2) Q:ROR=""  D
"RTN","RORP033",191,0)
 . S RORLOINC=$P(ROR,"-",1)
"RTN","RORP033",192,0)
 . ;don't add if it's already in the global
"RTN","RORP033",193,0)
 . Q:($D(^ROR(798.9,HIVIEN,1,"B",RORLOINC)))
"RTN","RORP033",194,0)
 . S RORDATA(1,798.92,"+2,"_HIVIEN_",",.01)=$G(RORLOINC)
"RTN","RORP033",195,0)
 . S RORDATA(1,798.92,"+2,"_HIVIEN_",",1)=6
"RTN","RORP033",196,0)
 . D UPDATE^DIE("","RORDATA(1)",,"RORMSG1")
"RTN","RORP033",197,0)
 K RORDATA,RORMSG1,RORMSG2
"RTN","RORP033",198,0)
 ;
"RTN","RORP033",199,0)
 Q
"RTN","RORP033",200,0)
 ;
"RTN","RORP033",201,0)
 ;**********************************************************************
"RTN","RORP033",202,0)
 ;New LOINC codes
"RTN","RORP033",203,0)
 ;**********************************************************************
"RTN","RORP033",204,0)
HIV ;
"RTN","RORP033",205,0)
 ;;28004-0
"RTN","RORP033",206,0)
 ;;42768-2
"RTN","RORP033",207,0)
 ;;48345-3
"RTN","RORP033",208,0)
 ;;51866-2
"RTN","RORP033",209,0)
 ;;56888-1
"RTN","RORP033",210,0)
 ;;57975-5
"RTN","RORP033",211,0)
 ;;58900-2
"RTN","RORP033",212,0)
 ;;68961-2
"RTN","RORP033",213,0)
 ;;69668-2
"RTN","RORP033",214,0)
 ;;73906-0
"RTN","RORP033",215,0)
 ;;75666-8
"RTN","RORP033",216,0)
 ;;80203-3
"RTN","RORP033",217,0)
 ;;81641-3
"RTN","RORP033",218,0)
 ;;85037-0
"RTN","RORP033",219,0)
 ;;
"RTN","RORP033",220,0)
 ;
"RTN","RORP033",221,0)
UPDPANEL ;
"RTN","RORP033",222,0)
 ; For parameter panel field, add 29, after ,24, right below the Additional Identifiers panel for
"RTN","RORP033",223,0)
 ;     Combined Meds and Labs    (REPORT CODE=12)
"RTN","RORP033",224,0)
 ;     Hepatitis A Vaccine or Immunity   (REPORT CODE=24)  
"RTN","RORP033",225,0)
 ;     Hepatitis B Vaccine of Immunity   (REPORT CODE=25) 
"RTN","RORP033",226,0)
 ;     Liver Score by Range    (REPORT CODE=19)  
"RTN","RORP033",227,0)
 ;     Registry Lab Tests by Range    (REPORT CODE=10) 
"RTN","RORP033",228,0)
 ;     Renal Function by Range    (REPORT CODE=20)
"RTN","RORP033",229,0)
 ;     BMI by Range    (REPORT CODE=18)
"RTN","RORP033",230,0)
 ;
"RTN","RORP033",231,0)
 ; In the Hepatitis C registry right below the Additional Identifiers panel
"RTN","RORP033",232,0)
 ;     Potential DAA Candidates (REPORT CODE=21)
"RTN","RORP033",233,0)
 ;     BMI by Range    (REPORT CODE=18)
"RTN","RORP033",234,0)
 ;
"RTN","RORP033",235,0)
 N CT,RORRPT,RORMSG,RORPAN,RORERR,RORFDA,Z,Z1,DIERR
"RTN","RORP033",236,0)
 S RORRPT=0 F  S RORRPT=$O(^ROR(799.34,RORRPT)) Q:'RORRPT  S RORPAN=$P($G(^ROR(799.34,RORRPT,0)),U,4) D:$S(RORPAN=10:1,RORPAN=12:1,RORPAN=18:1,RORPAN=19:1,RORPAN=20:1,RORPAN=21:1,RORPAN=24:1,RORPAN=25:1,1:0)
"RTN","RORP033",237,0)
 . S Z1=$G(^ROR(799.34,RORRPT,1))
"RTN","RORP033",238,0)
 . K RORFDA,RORMSG
"RTN","RORP033",239,0)
 . I Z1[",24,29," D  Q
"RTN","RORP033",240,0)
 . .D BMES^XPDUTL("   o New panel already exists for registry")
"RTN","RORP033",241,0)
 . I Z1'[",24,29," D 
"RTN","RORP033",242,0)
 . . I Z1[",24,",Z1'[",24,29," S RORFDA(799.34,RORRPT_",",1)=$P(Z1,",24,")_",24,29,"_$P(Z1,",24,",2)
"RTN","RORP033",243,0)
 . Q:'$D(RORFDA)
"RTN","RORP033",244,0)
 . D UPDATE^DIE("","RORFDA",,"RORMSG")
"RTN","RORP033",245,0)
 . I $D(DIERR) D
"RTN","RORP033",246,0)
 .. K RORERR
"RTN","RORP033",247,0)
 .. D DBS^RORERR("RORMSG",-112,,,799.34,RORRPT)
"RTN","RORP033",248,0)
 .. M RORMSG=RORERR
"RTN","RORP033",249,0)
 .. K RORERR
"RTN","RORP033",250,0)
 .. S RORERR(1)="     Update of report "_$P($G(^ROR(799.34,RORRPT,0)),U)_" with new panel"
"RTN","RORP033",251,0)
 .. S RORERR(2)="     encountered the following error.  Please report this error to your CCR contact:"
"RTN","RORP033",252,0)
 .. S RORERR(3)=""
"RTN","RORP033",253,0)
 .. S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP033",254,0)
 .. S CT=CT+1,RORERR(CT)=" "
"RTN","RORP033",255,0)
 .. D MES^XPDUTL(.RORERR)
"RTN","RORP033",256,0)
 Q
"RTN","RORP033",257,0)
 ;
"RTN","RORP033",258,0)
POSQ3(DIR)  ; --- Sets the DIR array from the post-install question #3 (suspension start time)
"RTN","RORP033",259,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP033",260,0)
 Q:'$D(DIR)
"RTN","RORP033",261,0)
 D BLD^DIALOG(7980000.011,,,"DIR(""?"")","S")
"RTN","RORP033",262,0)
 Q
"RTN","RORP033",263,0)
 ;
"RTN","RORP033",264,0)
POSQ4(DIR)  ; --- Sets the DIR array from the post-install question #4  (suspension end time)
"RTN","RORP033",265,0)
 K:$G(XPDQUES("POSQ2"))'=1 DIR
"RTN","RORP033",266,0)
 Q:'$D(DIR)
"RTN","RORP033",267,0)
 S DIR("A")="Suspension end time"
"RTN","RORP033",268,0)
 ;  Make sure end time entered is later than end time start
"RTN","RORP033",269,0)
 S DIR(0)="D^::R^K:(Y#1)'>(XPDQUES(""POSQ3"")#1) X"
"RTN","RORP033",270,0)
 D BLD^DIALOG(7980000.012,,,"DIR(""?"")","S")
"RTN","RORP033",271,0)
 Q
"RTN","RORP033",272,0)
 ;
"RTN","RORP033",273,0)
POSQ5(DIR) ; --- Updates the DIR array from the post-install question #5  (schedule time for ROR INITIALIZE task)
"RTN","RORP033",274,0)
 Q:'$D(DIR)
"RTN","RORP033",275,0)
 N ROREDT
"RTN","RORP033",276,0)
 ; Set earliest date to schedule to 15 minutes from 'NOW'
"RTN","RORP033",277,0)
 S ROREDT=$$FMADD^XLFDT($$NOW^XLFDT(),,,15)
"RTN","RORP033",278,0)
 ; Strip seconds
"RTN","RORP033",279,0)
 S ROREDT=$P(ROREDT,".",1)_"."_$E($P(ROREDT,".",2),1,4)
"RTN","RORP033",280,0)
 ;  Make sure future date/time is entered
"RTN","RORP033",281,0)
 S $P(DIR(0),U,3)=("K:Y<"_ROREDT_" X")
"RTN","RORP033",282,0)
 S DIR("B")=$$FMTE^XLFDT(ROREDT,2)
"RTN","RORP033",283,0)
 Q
"RTN","RORP033",284,0)
 ;
"RTN","RORP033",285,0)
 ;
"RTN","RORP033",286,0)
 ;
"RTN","RORP033",287,0)
 ;
"RTN","RORP033",288,0)
NEWREG ; --- Update ROR LIST ITEM file (#799.1) for new registriesList of new registries to initialize
"RTN","RORP033",289,0)
 ;;VA TRANSPLANT HEART
"RTN","RORP033",290,0)
 ;;VA TRANSPLANT INTESTINE
"RTN","RORP033",291,0)
 ;;VA TRANSPLANT KIDNEY
"RTN","RORP033",292,0)
 ;;VA TRANSPLANT LIVER
"RTN","RORP033",293,0)
 ;;VA TRANSPLANT LUNG
"RTN","RORP033",294,0)
 ;;VA TRANSPLANT PANCREAS
"RTN","RORP033",295,0)
 ;;
"RTN","RORP033",296,0)
 ;
"RTN","RORP033",297,0)
UPDPROC ; --- Update ROR LIST ITEM file (#799.1) for new registriesAdds ICD dx/procedure codes and CPT codes to the new registries in ROR ICD file
"RTN","RORP033",298,0)
 ; Delete if already there
"RTN","RORP033",299,0)
 N CT,I1,DA,DIK,X,Y,Z,RORDATA,RORFDA,RORI,RORPROC,RORREG,RORIEN,RORFDA1
"RTN","RORP033",300,0)
 F RORI="TRANSPLANT HEART","TRANSPLANT INTESTINE","TRANSPLANT KIDNEY","TRANSPLANT LIVER","TRANSPLANT LUNG","TRANSPLANT PANCREAS" S DIC="^ROR(798.5,",X="VA "_RORI,DIC(0)="" D ^DIC I Y>0 D
"RTN","RORP033",301,0)
 . S DIK="^ROR(798.5,",DA=+Y D ^DIK
"RTN","RORP033",302,0)
 F RORI=1:1 S RORDATA=$P($T(ICDPROC+RORI),";;",2) Q:RORDATA=""  D
"RTN","RORP033",303,0)
 . S RORREG=$P(RORDATA,U)
"RTN","RORP033",304,0)
 . I RORREG'="" D  Q
"RTN","RORP033",305,0)
 .. ; add new registry top level entry
"RTN","RORP033",306,0)
 .. D:$D(RORFDA) ADD7985(.RORFDA,RORIEN,$P($G(^ROR(798.1,+$G(RORIEN),0)),U)) ;Store 'previous registry' if RORFDA exists
"RTN","RORP033",307,0)
 .. K RORFDA1
"RTN","RORP033",308,0)
 .. S RORFDA1(798.5,"+1,",.01)=RORREG,RORIEN="",CT=0
"RTN","RORP033",309,0)
 .. D ADD7985(.RORFDA1,.RORIEN,RORREG)
"RTN","RORP033",310,0)
 .. S Z=+$O(RORIEN(0)),Z=$G(RORIEN(Z))
"RTN","RORP033",311,0)
 .. K RORIEN,RORFDA1 S RORIEN=Z
"RTN","RORP033",312,0)
 . I $P(RORDATA,U,2)'="" D  Q  ; Add ICD-codes to the entry
"RTN","RORP033",313,0)
 .. S RORPROC=$P(RORDATA,U,2)
"RTN","RORP033",314,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.52,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP033",315,0)
 . I $P(RORDATA,U,3)'="" D  Q  ; Add ICPT codes to the entry
"RTN","RORP033",316,0)
 .. S RORPROC=$P(RORDATA,U,3)
"RTN","RORP033",317,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.53,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP033",318,0)
 . I $P(RORDATA,U,4)'="" D  Q  ; Add ICD diagnosis codes to the entry
"RTN","RORP033",319,0)
 .. S RORPROC=$P(RORDATA,U,4)
"RTN","RORP033",320,0)
 .. F I1=1:1:$L(RORPROC,",") S X=$P(RORPROC,",",I1) I X'="" S CT=CT+1,RORFDA(798.51,"+"_CT_","_RORIEN_",",.01)=X
"RTN","RORP033",321,0)
 .. ;
"RTN","RORP033",322,0)
 I $D(RORFDA) D ADD7985(.RORFDA,RORIEN,RORREG)
"RTN","RORP033",323,0)
 D CLEAN^DILF
"RTN","RORP033",324,0)
 Q
"RTN","RORP033",325,0)
 ;
"RTN","RORP033",326,0)
ADD7985(RORFDA,RORIEN,RORREG) ; Adds procedures to the entries in the files
"RTN","RORP033",327,0)
 N RORMSG,DIERR
"RTN","RORP033",328,0)
 D UPDATE^DIE("E","RORFDA","RORIEN","RORMSG")
"RTN","RORP033",329,0)
 I $G(DIERR) D
"RTN","RORP033",330,0)
 . N Z,CT,RORERR
"RTN","RORP033",331,0)
 . M RORERR=RORMSG
"RTN","RORP033",332,0)
 . D DBS^RORERR("RORMSG",-112,,,798.5,RORREG)
"RTN","RORP033",333,0)
 . M RORMSG=RORERR
"RTN","RORP033",334,0)
 . K RORERR
"RTN","RORP033",335,0)
 . S RORERR(1)="     Adding procedures for new registry "_RORREG_" encountered the"
"RTN","RORP033",336,0)
 . S RORERR(2)="     following error.  Please report this error to your CCR contact:"
"RTN","RORP033",337,0)
 . S RORERR(3)=""
"RTN","RORP033",338,0)
 . S Z=0,CT=3 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",10)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP033",339,0)
 . S CT=CT+1,RORERR(CT)=" "
"RTN","RORP033",340,0)
 . D MES^XPDUTL(.RORERR)
"RTN","RORP033",341,0)
 Q
"RTN","RORP033",342,0)
 ;
"RTN","RORP033",343,0)
ICDPROC ; Registry name^PTF ICD Procedure codes, separated by commas^PTF CPT codes, separated by commas^ ICD DIAGNOSIS codes
"RTN","RORP033",344,0)
 ;;VA TRANSPLANT HEART
"RTN","RORP033",345,0)
 ;;^^^996.83,V42.1,V43.21,V43.22,T86.20,T86.21,T86.22,T86.23,T86.290,T86.298,T86.30,T86.31,T86.32,T86.33,T86.39,Z48.21,Z48.280,Z94.1,Z94.3
"RTN","RORP033",346,0)
 ;;VA TRANSPLANT INTESTINE
"RTN","RORP033",347,0)
 ;;^^^996.87,V42.84,Z94.82,T86.850,T86.851,T86.852,T86.858,T86.859,
"RTN","RORP033",348,0)
 ;;VA TRANSPLANT KIDNEY
"RTN","RORP033",349,0)
 ;;^^^V42.0,T86.10,T86.11,T86.12,T86.13,T86.19,Z48.22,Z94.0
"RTN","RORP033",350,0)
 ;;VA TRANSPLANT LIVER
"RTN","RORP033",351,0)
 ;;^^^996.82,V42.7,T86.40,T86.41,T86.42,T86.43,T86.49,Z48.23,Z94.4
"RTN","RORP033",352,0)
 ;;VA TRANSPLANT LUNG
"RTN","RORP033",353,0)
 ;;^^^996.84,V42.6,T86.30,T86.31,T86.32,T86.33,T86.39,T86.810,T86.811,T86.812,T86.818,T86.819,Z48.24,Z48.280,Z94.2
"RTN","RORP033",354,0)
 ;;VA TRANSPLANT PANCREAS
"RTN","RORP033",355,0)
 ;;^^^996.86,V42.83,Z94.83
"RTN","RORP033",356,0)
 Q
"RTN","RORP033",357,0)
 ;
"RTN","RORP033",358,0)
UPDLIST  ; --- Update ROR LIST ITEM file (#799.1) for new registries
"RTN","RORP033",359,0)
 N RORI,RORI1,RORREG,RORDATA,REGIEN,Z,CT,DIERR,RORFDA,RORMSG,RORERR
"RTN","RORP033",360,0)
 F RORI=1:1 S RORREG=$P($P($T(@("NEWREG+"_RORI_"^RORP033")),";;",2),U) Q:RORREG=""  D
"RTN","RORP033",361,0)
 . S REGIEN=$$REGIEN^RORUTL02(RORREG)
"RTN","RORP033",362,0)
 . I REGIEN>0 D
"RTN","RORP033",363,0)
 ..  F RORI1=1:1 S RORDATA=$P($T(@("LISTITEM+"_RORI1_"^RORP033")),";;",2) Q:RORDATA=""  D
"RTN","RORP033",364,0)
 ... Q:$D(^ROR(799.1,"KEY",+$P(RORDATA,U,2),REGIEN,+$P(RORDATA,U,3)))  ; Entry already exists
"RTN","RORP033",365,0)
 ... K RORFDA,RORMSG,RORERR,DIERR
"RTN","RORP033",366,0)
 ... S RORFDA(799.1,"?+1,",.01)=$P(RORDATA,U)
"RTN","RORP033",367,0)
 ... S RORFDA(799.1,"?+1,",.02)=$P(RORDATA,U,2)
"RTN","RORP033",368,0)
 ... S RORFDA(799.1,"?+1,",.03)=REGIEN
"RTN","RORP033",369,0)
 ... S RORFDA(799.1,"?+1,",.04)=$P(RORDATA,U,3)
"RTN","RORP033",370,0)
 ... D UPDATE^DIE(,"RORFDA",,"RORMSG")
"RTN","RORP033",371,0)
 ... I $G(DIERR) D
"RTN","RORP033",372,0)
 .... K RORERR
"RTN","RORP033",373,0)
 .... S RORERR(1)="     New entry for "_RORREG_"(ien #"_REGIEN_") encountered the following error"
"RTN","RORP033",374,0)
 .... S RORERR(2)="     and was not added to the ROR LIST ITEM file."
"RTN","RORP033",375,0)
 .... S RORERR(3)="     (Data = "_RORDATA_")"
"RTN","RORP033",376,0)
 .... S RORERR(4)="     Please report this error to your CCR contact:"
"RTN","RORP033",377,0)
 .... S RORERR(5)=""
"RTN","RORP033",378,0)
 .... S Z=0,CT=5 F  S Z=$O(RORMSG("DIERR",1,"TEXT",Z)) Q:'Z  S CT=CT+1,RORERR(CT)=$J("",6)_$G(RORMSG("DIERR",1,"TEXT",Z))
"RTN","RORP033",379,0)
 .... S CT=CT+1,RORERR(CT)=" "
"RTN","RORP033",380,0)
 .... D MES^XPDUTL(.RORERR)
"RTN","RORP033",381,0)
 Q
"RTN","RORP033",382,0)
 ;
"RTN","RORP033",383,0)
LISTITEM ; --- Entries to add to ROR LIST ITEM file (#799.1)  text^group^code
"RTN","RORP033",384,0)
 ;;eGFR by CKD-EPI^7^3
"RTN","RORP033",385,0)
 ;;eGFR by MDRD^7^2
"RTN","RORP033",386,0)
 ;;Creatinine clearance by Cockcroft-Gault^7^1
"RTN","RORP033",387,0)
 ;;FIB-4^6^4
"RTN","RORP033",388,0)
 ;;APRI^6^3
"RTN","RORP033",389,0)
 ;;MELD-Na^6^2
"RTN","RORP033",390,0)
 ;;MELD^6^1
"RTN","RORP033",391,0)
 ;;BMI^5^1
"RTN","RORP033",392,0)
 ;;
"RTN","RORP033",393,0)
 ; 
"RTN","RORSET02")
0^23^B46700821^B19313536
"RTN","RORSET02",1,0)
RORSET02 ;BPIOFO/CLR - NEW REGISTRY SETUP FROM POST-INSTALL ;6/06/2012
"RTN","RORSET02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**18,21,26,33**;Feb 17, 2006;Build 81
"RTN","RORSET02",3,0)
 ; This routine uses the following IAs:
"RTN","RORSET02",4,0)
 ;
"RTN","RORSET02",5,0)
 ; #10063 ^%ZTLOAD            
"RTN","RORSET02",6,0)
 ; #10026 ^DIR
"RTN","RORSET02",7,0)
 ; #10103 ^XLFDT
"RTN","RORSET02",8,0)
 ; #10141 ^XPDUTL
"RTN","RORSET02",9,0)
 ;
"RTN","RORSET02",10,0)
 ;*****************************************************************************
"RTN","RORSET02",11,0)
 ;*****************************************************************************
"RTN","RORSET02",12,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORSET02",13,0)
 ;        
"RTN","RORSET02",14,0)
 ;PKG/PATCH    DATE       DEVELOPER    MODIFICATION
"RTN","RORSET02",15,0)
 ;-----------  ---------  -----------  ----------------------------------------
"RTN","RORSET02",16,0)
 ;ROR*1.5*21   NOV 2013   T KOPP       Added env check, pre/post install logic
"RTN","RORSET02",17,0)
 ;                                     Added new of ZTQUEUED variable
"RTN","RORSET02",18,0)
 ;                                     Added initialization of registry params
"RTN","RORSET02",19,0)
 ;                                      for new registries
"RTN","RORSET02",20,0)
 ;                                     Corrected max # of strings variable used
"RTN","RORSET02",21,0)
 ;                                      from MAXNTSK to RORMNTSK
"RTN","RORSET02",22,0)
 ;ROR*1.5*26   APR 2015   T KOPP       Corrected 'suspend' parameters to strip
"RTN","RORSET02",23,0)
 ;                                      date, leaving only time portions
"RTN","RORSET02",24,0)
 ;ROR*1.5*33   MAY 2018   F TRAXLER    ROR TASK scheduling changes
"RTN","RORSET02",25,0)
 ;******************************************************************************
"RTN","RORSET02",26,0)
 ;******************************************************************************
"RTN","RORSET02",27,0)
 ;
"RTN","RORSET02",28,0)
 N RORPARM,RORBUF,RORI,RORDIFF,ROROUT,RORMSG,RORSUSP,MAXNTSK
"RTN","RORSET02",29,0)
 N RC,REGNAME,RORMNTSK,RORSUSP,TMP,REGLST,RORINFO
"RTN","RORSET02",30,0)
 N ZTCPU,ZTDESC,ZTIO,ZTKIL,ZTPRI,ZTRTN,ZTSAVE,ZTSK,ZTSYNC,ZTUCI,ZTREQ,ZTDTH
"RTN","RORSET02",31,0)
 N DIR,DIRUT,Y,DIERR,FLD,NODE,RORERRDL,RORQ,ZTQUEUED
"RTN","RORSET02",32,0)
 ;
"RTN","RORSET02",33,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORSET02",34,0)
 S RORPARM("LOG")=1         ; Enable event recording
"RTN","RORSET02",35,0)
 D INIT^RORUTL01("RORSET02")
"RTN","RORSET02",36,0)
 D CLEAR^RORERR("TASK^RORSET02")
"RTN","RORSET02",37,0)
 ;--- display all ACTIVE auto confirm registries that have not been initialized
"RTN","RORSET02",38,0)
 D BMES^XPDUTL("   *** Checking for registry(s) to be initialized")
"RTN","RORSET02",39,0)
 S RC=$$REGSEL^RORUTL01("UA")
"RTN","RORSET02",40,0)
 I RC<0 D BMES^XPDUTL($$MSG^RORERR20(RC,,," file #798.1")),BMES^XPDUTL("") Q
"RTN","RORSET02",41,0)
 I '$D(REGLST) D  Q
"RTN","RORSET02",42,0)
 . D BMES^XPDUTL(""),BMES^XPDUTL("     No active registries were found needing to be initialized.")
"RTN","RORSET02",43,0)
 . D BMES^XPDUTL(""),BMES^XPDUTL("")
"RTN","RORSET02",44,0)
 D BMES^XPDUTL(""),BMES^XPDUTL("")
"RTN","RORSET02",45,0)
 D BMES^XPDUTL("     The following registry(s) will be populated with new patients: ")
"RTN","RORSET02",46,0)
 S REGNAME="" F  S REGNAME=$O(REGLST(REGNAME)) Q:REGNAME=""  D
"RTN","RORSET02",47,0)
 . D MES^XPDUTL($J("",10)_REGNAME)
"RTN","RORSET02",48,0)
 D BMES^XPDUTL("")
"RTN","RORSET02",49,0)
 D BMES^XPDUTL("   *** Storing registry setup parameters")
"RTN","RORSET02",50,0)
 S RORMNTSK=$G(XPDQUES("POSQ1")),RORSUSP=$G(XPDQUES("POSQ2"))
"RTN","RORSET02",51,0)
 I RORSUSP S RORSUSP=($G(XPDQUES("POSQ3"))#1)_U_($G(XPDQUES("POSQ4"))#1)
"RTN","RORSET02",52,0)
 S RORQ=$G(XPDQUES("POSQ5"))
"RTN","RORSET02",53,0)
 I RORQ<$$NOW^XLFDT() S RORQ=$$NOW^XLFDT()
"RTN","RORSET02",54,0)
 D CONFTXT^RORSETU1(RORMNTSK,RORSUSP)
"RTN","RORSET02",55,0)
 ;log parameters in log
"RTN","RORSET02",56,0)
 D TP^ROR10(.RORINFO,"RORFLSET")
"RTN","RORSET02",57,0)
 D TP^ROR10(.RORINFO,"RORFLCLR")
"RTN","RORSET02",58,0)
 D TP^ROR10(.RORINFO,"RORMNTSK")
"RTN","RORSET02",59,0)
 D TP^ROR10(.RORINFO,"RORSUSP")
"RTN","RORSET02",60,0)
 D LOG^RORLOG(,"Task Parameters",,.RORINFO)
"RTN","RORSET02",61,0)
 ;--- Schedule the setup task
"RTN","RORSET02",62,0)
 I RORQ<$$NOW^XLFDT() S RORQ=$$NOW^XLFDT()
"RTN","RORSET02",63,0)
 S ZTRTN="TASK^RORSET02",ZTIO="",ZTDTH=$$FMTH^XLFDT(RORQ),ZTQUEUED=1
"RTN","RORSET02",64,0)
 S ZTDESC="Local Registries Initialization"
"RTN","RORSET02",65,0)
 F TMP="RORMNTSK","RORSUSP" S ZTSAVE(TMP)=""
"RTN","RORSET02",66,0)
 S ZTSAVE("REGLST(")=""
"RTN","RORSET02",67,0)
 D ^%ZTLOAD
"RTN","RORSET02",68,0)
 I $G(ZTSK) D  Q
"RTN","RORSET02",69,0)
 . D BMES^XPDUTL("The scheduled task number is "_ZTSK)
"RTN","RORSET02",70,0)
 D BMES^XPDUTL("")
"RTN","RORSET02",71,0)
 D BMES^XPDUTL("     ROR INITIALIZE task was not scheduled and is required")
"RTN","RORSET02",72,0)
 D BMES^XPDUTL("     to complete the patch"),BMES^XPDUTL("     Try restarting the install")
"RTN","RORSET02",73,0)
 D BMES^XPDUTL("     If this error continues, please enter a Remedy ticket")
"RTN","RORSET02",74,0)
 D BMES^XPDUTL("   *** Patch install aborted")
"RTN","RORSET02",75,0)
 Q
"RTN","RORSET02",76,0)
 ;
"RTN","RORSET02",77,0)
ERROR ;--- Display stack errors
"RTN","RORSET02",78,0)
 D DSPSTK^RORERR()
"RTN","RORSET02",79,0)
 Q
"RTN","RORSET02",80,0)
 ;
"RTN","RORSET02",81,0)
 ;***** ENTRY POINT OF THE REGISTRY SETUP TASK
"RTN","RORSET02",82,0)
 ;
"RTN","RORSET02",83,0)
 ; RORMNTSK      Maximum number of the registry update subtasks
"RTN","RORSET02",84,0)
 ; RORREG        RegistryIEN^RegistryName
"RTN","RORSET02",85,0)
 ; RORSUSP       Task suspension time frame (StartTime^EndTime)
"RTN","RORSET02",86,0)
 ;
"RTN","RORSET02",87,0)
TASK ;
"RTN","RORSET02",88,0)
 N RORERROR      ; Error processing data
"RTN","RORSET02",89,0)
 N RORLOG        ; Log subsystem constants & variables
"RTN","RORSET02",90,0)
 N RORPARM       ; Application parameters
"RTN","RORSET02",91,0)
 ;
"RTN","RORSET02",92,0)
 N RC,REGNAME,TMP,REGIEN
"RTN","RORSET02",93,0)
 N RORSCHEDDT,RORSCHEDINFO,RORSCHEDULE,RORTASKCHK,RORUNSCHEDULE
"RTN","RORSET02",94,0)
 S RORPARM("DEVELOPER")=1   ; Enable modifications
"RTN","RORSET02",95,0)
 S RORPARM("ERR")=1         ; Enable error processing
"RTN","RORSET02",96,0)
 S RORPARM("LOG")=1         ; Enable event recording
"RTN","RORSET02",97,0)
 S RORPARM("SETUP")=1       ; Registry setup indicator
"RTN","RORSET02",98,0)
 ;
"RTN","RORSET02",99,0)
 ;--- Check if ROR TASK option is running
"RTN","RORSET02",100,0)
 S RORTASKCHK=$$TASKCHK^RORUTL18("ROR TASK")
"RTN","RORSET02",101,0)
 I RORTASKCHK'=0 D  Q  ;stop if ROR TASK is running
"RTN","RORSET02",102,0)
 . S RC=$$ERROR^RORERR(-76,,,,"ROR TASK")
"RTN","RORSET02",103,0)
 ;--- Get ROR TASK schedule information
"RTN","RORSET02",104,0)
 S RORSCHEDINFO=$$GETSCHED^RORUTL18("ROR TASK")
"RTN","RORSET02",105,0)
 ;--- Unschedule ROR TASK option if it is scheduled
"RTN","RORSET02",106,0)
 I RORSCHEDINFO'="" S RORUNSCHEDULE=$$SETSCHED^RORUTL18("ROR TASK","@")
"RTN","RORSET02",107,0)
 ;--- Check list of registries
"RTN","RORSET02",108,0)
 I $D(REGLST)<10  D  Q
"RTN","RORSET02",109,0)
 . S RC=$$ERROR^RORERR(-28,,,," initialize")
"RTN","RORSET02",110,0)
 ;--- Populate the registry
"RTN","RORSET02",111,0)
 S RC=$$UPDATE^RORUPD(.REGLST,$G(RORMNTSK),$G(RORSUSP)) Q:RC<0
"RTN","RORSET02",112,0)
 ;--- Setup the registry
"RTN","RORSET02",113,0)
 S REGNAME="" F  S REGNAME=$O(REGLST(REGNAME)) Q:REGNAME=""  D
"RTN","RORSET02",114,0)
 . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORSET02",115,0)
 . I REGIEN<0 S RC=$$ERROR^RORERR(-112,,,,REGNAME) Q
"RTN","RORSET02",116,0)
 . S RC=$$PREPARE^RORSETU2(REGIEN)
"RTN","RORSET02",117,0)
 . I RC<0 S RC=$$ERROR^RORERR(-112,,,,REGNAME) Q
"RTN","RORSET02",118,0)
 . ;--- Send the notification e-mail
"RTN","RORSET02",119,0)
 . S:RC'<0 TMP=$$SENDINFO^RORUTL17(+REGIEN,,"E")
"RTN","RORSET02",120,0)
 . ;--- Cleanup
"RTN","RORSET02",121,0)
 . I RC'<0 D  S ZTREQ="@"
"RTN","RORSET02",122,0)
 . . K ^XTMP("RORUPDR"_+REGIEN)
"RTN","RORSET02",123,0)
 ;--- reschedule ROR TASK option
"RTN","RORSET02",124,0)
 N XMY,XMSUB,XMTEXT
"RTN","RORSET02",125,0)
 S RORSCHEDINFO=$G(RORSCHEDINFO)
"RTN","RORSET02",126,0)
 I RORSCHEDINFO="" D  Q  ;ROR TASK is not currently in FILE 19.2
"RTN","RORSET02",127,0)
 . S XMY(DUZ)="" ;message recipient
"RTN","RORSET02",128,0)
 . S XMSUB="ROR TASK option must be scheduled"
"RTN","RORSET02",129,0)
 . S XMTEXT(1)="Please use the Schedule/Unschedule Options [XUTM SCHEDULE]"
"RTN","RORSET02",130,0)
 . S XMTEXT(2)="option to schedule the ROR TASK option to run as a regular"
"RTN","RORSET02",131,0)
 . S XMTEXT(3)="background job."
"RTN","RORSET02",132,0)
 . S XMTEXT(4)=" "
"RTN","RORSET02",133,0)
 . S XMTEXT(5)="Set the time of day to whatever you think best."
"RTN","RORSET02",134,0)
 . S XMTEXT(6)="Set the Rescheduling Frequency = 1D"
"RTN","RORSET02",135,0)
 . S XMTEXT(7)="Set the Task Parameters = VA HEPC, VA HIV"
"RTN","RORSET02",136,0)
 . S XMTEXT="XMTEXT("
"RTN","RORSET02",137,0)
 . D ^XMD
"RTN","RORSET02",138,0)
 S RORSCHEDDT=$$FMADD^XLFDT($$NOW^XLFDT(),,1) ;use 1 hour from now
"RTN","RORSET02",139,0)
 S RORSCHEDULE=$$SETSCHED^RORUTL18("ROR TASK",RORSCHEDDT,,"1D",,,1)
"RTN","RORSET02",140,0)
 ;Send MailMan message about ROR TASK option rescheduling success
"RTN","RORSET02",141,0)
 I RORSCHEDULE=1 D
"RTN","RORSET02",142,0)
 . S RORSCHEDINFO=$$GETSCHED^RORUTL18("ROR TASK")
"RTN","RORSET02",143,0)
 . S XMY(DUZ)="" ;message recipient
"RTN","RORSET02",144,0)
 . S XMSUB="ROR TASK option was rescheduled"
"RTN","RORSET02",145,0)
 . S XMTEXT(1)="The ROR TASK option was successfully rescheduled."
"RTN","RORSET02",146,0)
 . S XMTEXT(2)=" "
"RTN","RORSET02",147,0)
 . S XMTEXT(3)="You may wish to check/alter the scheduling conditions, but"
"RTN","RORSET02",148,0)
 . S XMTEXT(4)="please keep this option scheduled at all times unless a ROR"
"RTN","RORSET02",149,0)
 . S XMTEXT(5)="patch is being installed."
"RTN","RORSET02",150,0)
 . S XMTEXT(6)=" "
"RTN","RORSET02",151,0)
 . S XMTEXT(7)="Use Schedule/Unschedule Options [XUTM SCHEDULE] to check."
"RTN","RORSET02",152,0)
 . S XMTEXT="XMTEXT("
"RTN","RORSET02",153,0)
 I RORSCHEDULE'=1 D
"RTN","RORSET02",154,0)
 . S XMY(DUZ)="" ;message recipient
"RTN","RORSET02",155,0)
 . S XMSUB="ROR TASK option was not rescheduled"
"RTN","RORSET02",156,0)
 . S XMTEXT(1)="The ROR TASK option could not be rescheduled."
"RTN","RORSET02",157,0)
 . S XMTEXT(2)="Please reschedule it as soon as possible."
"RTN","RORSET02",158,0)
 . S XMTEXT(3)="ROR TASK should be scheduled to run daily unless a ROR"
"RTN","RORSET02",159,0)
 . S XMTEXT(4)="patch is being installed."
"RTN","RORSET02",160,0)
 . S XMTEXT(5)=" "
"RTN","RORSET02",161,0)
 . S XMTEXT(6)="Use the Schedule/Unschedule Options [XUTM SCHEDULE] option"
"RTN","RORSET02",162,0)
 . S XMTEXT(7)="to schedule ROR TASK."
"RTN","RORSET02",163,0)
 . S XMTEXT="XMTEXT("
"RTN","RORSET02",164,0)
 D ^XMD
"RTN","RORSET02",165,0)
 Q
"RTN","RORUTL02")
0^6^B62497061^B58261524
"RTN","RORUTL02",1,0)
RORUTL02 ;HCIOFO/SG - UTILITIES  ;8/25/05 10:20am
"RTN","RORUTL02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**21,27,31,33**;Feb 17, 2006;Build 81
"RTN","RORUTL02",3,0)
 ;
"RTN","RORUTL02",4,0)
 ;******************************************************************************
"RTN","RORUTL02",5,0)
 ;******************************************************************************
"RTN","RORUTL02",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL02",7,0)
 ;        
"RTN","RORUTL02",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL02",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL02",10,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Changed LOCKREG entry point to loop thru
"RTN","RORUTL02",11,0)
 ;                                      registries to lock only 15 at a time to
"RTN","RORUTL02",12,0)
 ;                                      prevent maxstring errors when lock
"RTN","RORUTL02",13,0)
 ;                                      command is executed.
"RTN","RORUTL02",14,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT and PCP as additional identifiers.
"RTN","RORUTL02",15,0)
 ;******************************************************************************
"RTN","RORUTL02",16,0)
 ;
"RTN","RORUTL02",17,0)
 ; This routine uses the following IAs:
"RTN","RORUTL02",18,0)
 ;
"RTN","RORUTL02",19,0)
 ; #2701         $$GETICN^MPIF001 Gets ICN (supported)
"RTN","RORUTL02",20,0)
 ;               $$IFLOCAL^MPIF001 (checks for local ICN) (supported)
"RTN","RORUTL02",21,0)
 ; #3556         $$GCPR^LA7QRY
"RTN","RORUTL02",22,0)
 ; #3557         Access to the field .01 and x-ref "B"
"RTN","RORUTL02",23,0)
 ;               of the file 95.3
"RTN","RORUTL02",24,0)
 ; #3646         $$EMPL^DGSEC4
"RTN","RORUTL02",25,0)
 ; #10035        Access to the field #.09 of the file #2
"RTN","RORUTL02",26,0)
 ;
"RTN","RORUTL02",27,0)
 Q
"RTN","RORUTL02",28,0)
 ;
"RTN","RORUTL02",29,0)
 ;***** REMOVES THE INACTIVE REGISTRIES FROM THE LIST
"RTN","RORUTL02",30,0)
 ;
"RTN","RORUTL02",31,0)
 ; .REGLST(      A list of registry names (as subscripts)
"RTN","RORUTL02",32,0)
 ;   RegName)    Registry IEN (output)
"RTN","RORUTL02",33,0)
 ;
"RTN","RORUTL02",34,0)
 ; Return values:
"RTN","RORUTL02",35,0)
 ;       <0  Error code
"RTN","RORUTL02",36,0)
 ;        0  Ok
"RTN","RORUTL02",37,0)
 ;
"RTN","RORUTL02",38,0)
 ; This function removes names of those registries that are
"RTN","RORUTL02",39,0)
 ; inactive or cannot be updated for any other reasons from
"RTN","RORUTL02",40,0)
 ; the list. It also associates registry IENs with the names
"RTN","RORUTL02",41,0)
 ; of registries remaining on the list.
"RTN","RORUTL02",42,0)
 ;
"RTN","RORUTL02",43,0)
 ; Moreover, it records corresponding messages about skipped
"RTN","RORUTL02",44,0)
 ; registries to the current open log.
"RTN","RORUTL02",45,0)
 ;
"RTN","RORUTL02",46,0)
ARLST(REGLST) ;
"RTN","RORUTL02",47,0)
 N INFO,RC,REGIEN,REGNAME,RORBUF,TMP  K DSTLST
"RTN","RORUTL02",48,0)
 S REGNAME="",RC=0
"RTN","RORUTL02",49,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUTL02",50,0)
 . S REGIEN=$$REGIEN(REGNAME,"@;11I;21.05I",.RORBUF)
"RTN","RORUTL02",51,0)
 . ;--- Cannot find (or load) the registry parameters
"RTN","RORUTL02",52,0)
 . I REGIEN'>0  D  Q
"RTN","RORUTL02",53,0)
 . . D ERROR^RORERR(REGIEN,,REGNAME)
"RTN","RORUTL02",54,0)
 . . K REGLST(REGNAME)
"RTN","RORUTL02",55,0)
 . ;--- Check if the registry is marked as 'inactive'
"RTN","RORUTL02",56,0)
 . I $G(RORBUF("DILIST","ID",1,11))  D  Q
"RTN","RORUTL02",57,0)
 . . D ERROR^RORERR(-48,,,,REGNAME)
"RTN","RORUTL02",58,0)
 . . K REGLST(REGNAME)
"RTN","RORUTL02",59,0)
 . ;--- Check if the registry has not been populated
"RTN","RORUTL02",60,0)
 . I '$G(RORBUF("DILIST","ID",1,21.05)),'$G(RORPARM("SETUP"))  D  Q
"RTN","RORUTL02",61,0)
 . . D TEXT^RORTXT(7980000.02,.INFO)
"RTN","RORUTL02",62,0)
 . . D ERROR^RORERR(-103,,.INFO,,REGNAME)
"RTN","RORUTL02",63,0)
 . . K INFO,REGLST(REGNAME)
"RTN","RORUTL02",64,0)
 . ;--- Store the registry IEN
"RTN","RORUTL02",65,0)
 . S REGLST(REGNAME)=REGIEN
"RTN","RORUTL02",66,0)
 Q RC
"RTN","RORUTL02",67,0)
 ;
"RTN","RORUTL02",68,0)
 ;***** RETURNS A FULL NATIONAL ICN OF THE PATIENT
"RTN","RORUTL02",69,0)
 ;
"RTN","RORUTL02",70,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",71,0)
 ;
"RTN","RORUTL02",72,0)
 ; Return Values:
"RTN","RORUTL02",73,0)
 ;       <0  Error code
"RTN","RORUTL02",74,0)
 ;       ""  ICN has not been assigned or ICN is a local ICN
"RTN","RORUTL02",75,0)
 ;       >0  Patient National ICN
"RTN","RORUTL02",76,0)
 ;
"RTN","RORUTL02",77,0)
ICN(PTIEN) ;
"RTN","RORUTL02",78,0)
 N ICN,L,TMP
"RTN","RORUTL02",79,0)
 I $$IFLOCAL^MPIF001(PTIEN) Q ""
"RTN","RORUTL02",80,0)
 S ICN=$$GETICN^MPIF001(PTIEN)
"RTN","RORUTL02",81,0)
 I ICN'>0  D  Q ""
"RTN","RORUTL02",82,0)
 . S TMP=$$ERROR^RORERR(-57,,$P(ICN,U,2),PTIEN,+ICN,"$$GETICN^MPIF001")
"RTN","RORUTL02",83,0)
 ;--- Validate the checksum (just in case ;-)
"RTN","RORUTL02",84,0)
 S L=$L($P(ICN,"V",2))
"RTN","RORUTL02",85,0)
 Q $S(L<6:$P(ICN,"V")_"V"_$E("000000",1,6-L)_$P(ICN,"V",2),1:ICN)
"RTN","RORUTL02",86,0)
 ;
"RTN","RORUTL02",87,0)
PACT(DFN) ;returns ien & name of pc team PATCH 30
"RTN","RORUTL02",88,0)
 ; DFN - pointer to patient file
"RTN","RORUTL02",89,0)
 ; Date of interest (Default=DT)
"RTN","RORUTL02",90,0)
 ;
"RTN","RORUTL02",91,0)
 Q $P($$OUTPTTM^SDUTL3(DFN,DT),U,2)
"RTN","RORUTL02",92,0)
 ;
"RTN","RORUTL02",93,0)
PCP(DFN)  ;returns ien & name of pract filling pc position PATCH 30
"RTN","RORUTL02",94,0)
 ; DFN - pointer to patient file
"RTN","RORUTL02",95,0)
 ; DATE - date of interest
"RTN","RORUTL02",96,0)
 ; PCROLE - Practitioner Position where '1' = PC provider         ;                                      '2' = PC attending 
"RTN","RORUTL02",97,0)
 ;                                      '3' = PC associate provider
"RTN","RORUTL02",98,0)
 ;
"RTN","RORUTL02",99,0)
 ; returns (ien^name), or "" if none or -1 if error
"RTN","RORUTL02",100,0)
 ;
"RTN","RORUTL02",101,0)
 ;
"RTN","RORUTL02",102,0)
 Q $P($$OUTPTPR^SDUTL3(DFN,DT,1),"^",2)
"RTN","RORUTL02",103,0)
 ;
"RTN","RORUTL02",104,0)
FUTAPPT(DFN,DAYS)     ; PATCH 33 
"RTN","RORUTL02",105,0)
 N VASD
"RTN","RORUTL02",106,0)
 I $D(DAYS) D
"RTN","RORUTL02",107,0)
 .N X,X1,X2
"RTN","RORUTL02",108,0)
 .D NOW^%DTC S (VASD("F"),X1)=X,X2=DAYS D C^%DTC S VASD("T")=X
"RTN","RORUTL02",109,0)
 .S VASD("W")="1"
"RTN","RORUTL02",110,0)
 .D SDA^VADPT
"RTN","RORUTL02",111,0)
 I $D(^UTILITY("VASD",$J)) Q $$DATE^RORXU002($P($G(^UTILITY("VASD",$J,1,"I")),"^",1)\1)
"RTN","RORUTL02",112,0)
 Q 0
"RTN","RORUTL02",113,0)
 ;***** LOADS THE LAB RESULTS
"RTN","RORUTL02",114,0)
 ;
"RTN","RORUTL02",115,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",116,0)
 ;
"RTN","RORUTL02",117,0)
 ; SDT           Start date of the results
"RTN","RORUTL02",118,0)
 ; EDT           End date of the results
"RTN","RORUTL02",119,0)
 ;
"RTN","RORUTL02",120,0)
 ; [ROR8DST]     Closed root of the destination array
"RTN","RORUTL02",121,0)
 ;               (the ^TMP("RORTMP",$J) node, by default)
"RTN","RORUTL02",122,0)
 ;
"RTN","RORUTL02",123,0)
 ; Return values:
"RTN","RORUTL02",124,0)
 ;       <0  Error code
"RTN","RORUTL02",125,0)
 ;        0  Ok
"RTN","RORUTL02",126,0)
 ;
"RTN","RORUTL02",127,0)
LABRSLTS(PTIEN,SDT,EDT,ROR8DST) ;
"RTN","RORUTL02",128,0)
 N H7CH,RC,RORMSG,TMP
"RTN","RORUTL02",129,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORTMP",$J))
"RTN","RORUTL02",130,0)
 K @ROR8DST
"RTN","RORUTL02",131,0)
 I $D(RORLRC)<10  Q:$G(RORLRC)="" 0
"RTN","RORUTL02",132,0)
 ;--- Get the Patient ID (ICN or SSN)
"RTN","RORUTL02",133,0)
 S PTID=$$PTID(PTIEN)  Q:PTID<0 PTID
"RTN","RORUTL02",134,0)
 ;--- Get the Lab data
"RTN","RORUTL02",135,0)
 S H7CH=$G(RORHL("FS"))_$G(RORHL("ECH"))
"RTN","RORUTL02",136,0)
 S RC=$$GCPR^LA7QRY(PTID,SDT,EDT,.RORLRC,"*",.RORMSG,ROR8DST,H7CH)
"RTN","RORUTL02",137,0)
 I RC="",$D(RORMSG)>1  D
"RTN","RORUTL02",138,0)
 . N ERR,I,LST
"RTN","RORUTL02",139,0)
 . S (ERR,LST)=""
"RTN","RORUTL02",140,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORUTL02",141,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORUTL02",142,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORUTL02",143,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORUTL02",144,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,PTIEN)
"RTN","RORUTL02",145,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUTL02",146,0)
 ;
"RTN","RORUTL02",147,0)
 ;***** RETURNS THE LOINC CODE WITH THE CONTROL DIGIT
"RTN","RORUTL02",148,0)
 ;
"RTN","RORUTL02",149,0)
 ; LNCODE        LOINC code
"RTN","RORUTL02",150,0)
 ;
"RTN","RORUTL02",151,0)
 ; Besides adding a control digit to the LOINC code, the function
"RTN","RORUTL02",152,0)
 ; checks the code against the LAB LOINC file (#95.3).
"RTN","RORUTL02",153,0)
 ;
"RTN","RORUTL02",154,0)
 ; Return values:
"RTN","RORUTL02",155,0)
 ;       <0  Error code
"RTN","RORUTL02",156,0)
 ;       >0  LOINC code with the control digit
"RTN","RORUTL02",157,0)
 ;
"RTN","RORUTL02",158,0)
LNCODE(LNCODE) ;
"RTN","RORUTL02",159,0)
 N RC,RORBUF,RORMSG
"RTN","RORUTL02",160,0)
 D FIND^DIC(95.3,,"@;.01E","X",$P(LNCODE,"-"),2,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL02",161,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,95.3)
"RTN","RORUTL02",162,0)
 I $G(RORBUF("DILIST",0))<1  D  Q RC ; Non-existent code
"RTN","RORUTL02",163,0)
 . S RC=$$ERROR^RORERR(-29,,,,LNCODE)
"RTN","RORUTL02",164,0)
 I $G(RORBUF("DILIST",0))>1  D  Q RC ; Duplicate records
"RTN","RORUTL02",165,0)
 . S RC=$$ERROR^RORERR(-30,,,,LNCODE)
"RTN","RORUTL02",166,0)
 Q RORBUF("DILIST","ID",1,.01)
"RTN","RORUTL02",167,0)
 ;
"RTN","RORUTL02",168,0)
 ;***** LOCK/UNLOCK REGISTRIES BEING PROCESSED
"RTN","RORUTL02",169,0)
 ;
"RTN","RORUTL02",170,0)
 ; .REGLST       Reference to a local array containing registry names 
"RTN","RORUTL02",171,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUTL02",172,0)
 ; [MODE]        0 - Unlock (default), 1 - Lock
"RTN","RORUTL02",173,0)
 ; [TO]          LOCK timeout (3 sec by defualt)
"RTN","RORUTL02",174,0)
 ; [NAME]        Name of the process/task
"RTN","RORUTL02",175,0)
 ;
"RTN","RORUTL02",176,0)
 ; Return Values:
"RTN","RORUTL02",177,0)
 ;       <0  Error code
"RTN","RORUTL02",178,0)
 ;        0  Some of the registries has been locked by another job
"RTN","RORUTL02",179,0)
 ;        1  Ok
"RTN","RORUTL02",180,0)
 ;
"RTN","RORUTL02",181,0)
LOCKREG(REGLST,MODE,TO,NAME) ;
"RTN","RORUTL02",182,0)
 Q:$D(REGLST)<10 1
"RTN","RORUTL02",183,0)
 N LOCKLST,RORLIST,RC,REGIEN,REGNAME
"RTN","RORUTL02",184,0)
 N CT,FAILS,Q,Q0,Z
"RTN","RORUTL02",185,0)
 ; RORLIST = 0 if less than 15 entries to lock
"RTN","RORUTL02",186,0)
 ;         = 1 if 15 or more entries to lock
"RTN","RORUTL02",187,0)
 ;        (n,x,y) = the array in LOCKLST(x,y) at that point
"RTN","RORUTL02",188,0)
 ;                  (where n = the # identifying the set of 15
"RTN","RORUTL02",189,0)
 ;                   registries being locked at one time)
"RTN","RORUTL02",190,0)
 ; FAILS = <0 or 1 ... lock failed     = 0 ... lock was successful
"RTN","RORUTL02",191,0)
 S REGNAME="",CT=0,RORLIST=0
"RTN","RORUTL02",192,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:REGIEN<0
"RTN","RORUTL02",193,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUTL02",194,0)
 . I REGIEN'>0  S REGIEN=$$REGIEN^RORUTL02(REGNAME)  Q:REGIEN'>0
"RTN","RORUTL02",195,0)
 . S CT=CT+1
"RTN","RORUTL02",196,0)
 . S LOCKLST(798.1,REGIEN_",")=""
"RTN","RORUTL02",197,0)
 . I '(CT#15) D  ; Split the locks into smaller chunks every 15 entries
"RTN","RORUTL02",198,0)
 .. M RORLIST(CT/15)=LOCKLST S RORLIST=1
"RTN","RORUTL02",199,0)
 .. K LOCKLST
"RTN","RORUTL02",200,0)
 Q:$G(REGIEN)<0 REGIEN
"RTN","RORUTL02",201,0)
 I RORLIST,$O(LOCKLST(""))'="" M RORLIST((CT/15\1)+1)=LOCKLST K LOCKLST
"RTN","RORUTL02",202,0)
 Q:$D(LOCKLST)<10&'$O(RORLIST(0)) 1
"RTN","RORUTL02",203,0)
 I $G(MODE) S RC=0 D
"RTN","RORUTL02",204,0)
 . I 'RORLIST S RC=$$LOCK^RORLOCK(.LOCKLST,,,+$G(TO,3),$G(NAME)) Q
"RTN","RORUTL02",205,0)
 . F Q=1:1 Q:'$D(RORLIST(Q))!RC  D
"RTN","RORUTL02",206,0)
 .. K LOCKLST M LOCKLST=RORLIST(Q)
"RTN","RORUTL02",207,0)
 .. S FAILS=$$LOCK^RORLOCK(.LOCKLST,,,+$G(TO,3),$G(NAME)),RC=FAILS
"RTN","RORUTL02",208,0)
 .. ; If lock fails for at least one set of nodes [=1 or <0] - unlock previous locks
"RTN","RORUTL02",209,0)
 .. I FAILS D:Q>1
"RTN","RORUTL02",210,0)
 ... F Q0=1:1:Q-1 K LOCKLST M LOCKLST=RORLIST(Q0) S Z=$$UNLOCK^RORLOCK(.LOCKLST)
"RTN","RORUTL02",211,0)
 E  D
"RTN","RORUTL02",212,0)
 . I 'RORLIST S RC=$$UNLOCK^RORLOCK(.LOCKLST) Q
"RTN","RORUTL02",213,0)
 . S RC=0
"RTN","RORUTL02",214,0)
 . F Q=1:1 K LOCKLST Q:'$D(RORLIST(Q))  D
"RTN","RORUTL02",215,0)
 .. M LOCKLST=RORLIST(Q) S FAILS=$$UNLOCK^RORLOCK(.LOCKLST)
"RTN","RORUTL02",216,0)
 .. S:FAILS RC=FAILS
"RTN","RORUTL02",217,0)
 Q $S('RC:1,RC<0:RC,1:0)
"RTN","RORUTL02",218,0)
 ;
"RTN","RORUTL02",219,0)
 ;***** RETURNS A PATIENT ID (ICN OR SSN)
"RTN","RORUTL02",220,0)
 ;
"RTN","RORUTL02",221,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",222,0)
 ;
"RTN","RORUTL02",223,0)
 ; Return Values:
"RTN","RORUTL02",224,0)
 ;       <0  Error code
"RTN","RORUTL02",225,0)
 ;       ""  Neither ICN nor SSN has been assigned
"RTN","RORUTL02",226,0)
 ;       >0  Patient ICN (or SSN if ICN is not available)
"RTN","RORUTL02",227,0)
 ;
"RTN","RORUTL02",228,0)
PTID(PTIEN) ;
"RTN","RORUTL02",229,0)
 N L,PTID,RC,RORMSG
"RTN","RORUTL02",230,0)
 S PTID=$$GETICN^MPIF001(PTIEN)
"RTN","RORUTL02",231,0)
 I PTID>0  D  Q PTID
"RTN","RORUTL02",232,0)
 . ;--- Validate the checksum (just in case ;-)
"RTN","RORUTL02",233,0)
 . S L=$L($P(PTID,"V",2))  Q:L'<6
"RTN","RORUTL02",234,0)
 . ;S RC=$$ERROR^RORERR(-59,,,PTIEN)
"RTN","RORUTL02",235,0)
 . S $P(PTID,"V",2)=$E("000000",1,6-L)_$P(PTID,"V",2)
"RTN","RORUTL02",236,0)
 ;--- Get SSN if ICN is not available
"RTN","RORUTL02",237,0)
 S PTID=$$GET1^DIQ(2,PTIEN_",",.09,,,"RORMSG")
"RTN","RORUTL02",238,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,PTIEN,2)
"RTN","RORUTL02",239,0)
 Q PTID
"RTN","RORUTL02",240,0)
 ;
"RTN","RORUTL02",241,0)
 ;***** RETURNS IEN OF THE REGISTRY PARAMETERS
"RTN","RORUTL02",242,0)
 ;
"RTN","RORUTL02",243,0)
 ; REGNAME       Name of the registry
"RTN","RORUTL02",244,0)
 ; [FIELDS]      List of fields (separated by semicolons) to load
"RTN","RORUTL02",245,0)
 ; [.RORTRGT]    Reference to a local variable where field values will
"RTN","RORUTL02",246,0)
 ;               be stored by the FIND^DIC call
"RTN","RORUTL02",247,0)
 ;
"RTN","RORUTL02",248,0)
 ; Return Values:
"RTN","RORUTL02",249,0)
 ;       <0  Error code
"RTN","RORUTL02",250,0)
 ;       >0  Registry parameters IEN
"RTN","RORUTL02",251,0)
 ;
"RTN","RORUTL02",252,0)
REGIEN(REGNAME,FIELDS,RORTRGT) ;
"RTN","RORUTL02",253,0)
 N RC,REGIEN,RORMSG  K RORTRGT
"RTN","RORUTL02",254,0)
 D FIND^DIC(798.1,,"@;"_$G(FIELDS),"UX",REGNAME,2,"B",,,"RORTRGT","RORMSG")
"RTN","RORUTL02",255,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL02",256,0)
 S RC=+$G(RORTRGT("DILIST",0))
"RTN","RORUTL02",257,0)
 Q $S(RC<1:-1,RC>1:-2,1:+RORTRGT("DILIST",2,1))
"RTN","RORUTL02",258,0)
 ;
"RTN","RORUTL02",259,0)
 ;***** RETURNS NUMBER OF RECORDS IN THE REGISTRY
"RTN","RORUTL02",260,0)
 ;
"RTN","RORUTL02",261,0)
 ; REGIEN        Registry IEN
"RTN","RORUTL02",262,0)
 ; [.LOWIEN]     The smallest IEN will be returned via this parameter
"RTN","RORUTL02",263,0)
 ; [.HIGHIEN]    The biggest IEN will be returned via this parameter
"RTN","RORUTL02",264,0)
 ;
"RTN","RORUTL02",265,0)
 ; Return Values:
"RTN","RORUTL02",266,0)
 ;       <0  Error code
"RTN","RORUTL02",267,0)
 ;        0  The registry is empty
"RTN","RORUTL02",268,0)
 ;       >0  Number of records in the registry
"RTN","RORUTL02",269,0)
 ;
"RTN","RORUTL02",270,0)
REGSIZE(REGIEN,LOWIEN,HIGHIEN) ;
"RTN","RORUTL02",271,0)
 N I,NODE,NRE,RC,RORFDA,RORMSG
"RTN","RORUTL02",272,0)
 S NODE=$NA(^RORDATA(798,"AC",REGIEN))
"RTN","RORUTL02",273,0)
 S LOWIEN=$O(@NODE@(""))
"RTN","RORUTL02",274,0)
 S HIGHIEN=$O(@NODE@(""),-1)
"RTN","RORUTL02",275,0)
 ;--- Get number of records from the parameters
"RTN","RORUTL02",276,0)
 S NRE=$$GET1^DIQ(798.1,REGIEN_",",19.1,,,"RORMSG")
"RTN","RORUTL02",277,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,REGIEN)
"RTN","RORUTL02",278,0)
 Q:NRE>0 NRE
"RTN","RORUTL02",279,0)
 ;--- Count the records of the registry
"RTN","RORUTL02",280,0)
 S I="",NRE=0
"RTN","RORUTL02",281,0)
 F  S I=$O(@NODE@(I))  Q:I=""  S NRE=NRE+1
"RTN","RORUTL02",282,0)
 ;--- Store the value in the parameters
"RTN","RORUTL02",283,0)
 S RORFDA(798.1,REGIEN_",",19.1)=NRE
"RTN","RORUTL02",284,0)
 D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUTL02",285,0)
 Q NRE
"RTN","RORUTL02",286,0)
 ;
"RTN","RORUTL02",287,0)
 ;***** CHECKS IF AN EMPLOYEE SHOULD BE SKIPPED
"RTN","RORUTL02",288,0)
 ;
"RTN","RORUTL02",289,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL02",290,0)
 ;
"RTN","RORUTL02",291,0)
 ; [.]REGIEN     Registry IEN
"RTN","RORUTL02",292,0)
 ;
"RTN","RORUTL02",293,0)
 ;               If you are going to call this function for several
"RTN","RORUTL02",294,0)
 ;               patients in a row (in a cycle), you can pass the
"RTN","RORUTL02",295,0)
 ;               second parameter by reference. This will eliminate
"RTN","RORUTL02",296,0)
 ;               repetitive access to the registry parameters (the
"RTN","RORUTL02",297,0)
 ;               REGIEN("SE") node will be used as a "cache" for the
"RTN","RORUTL02",298,0)
 ;               value of the EXCLUDE EMPLOYEES field).
"RTN","RORUTL02",299,0)
 ;
"RTN","RORUTL02",300,0)
 ; Return Values:
"RTN","RORUTL02",301,0)
 ;        0  Patient can be added to the registry
"RTN","RORUTL02",302,0)
 ;        1  Patient should be skipped
"RTN","RORUTL02",303,0)
 ;
"RTN","RORUTL02",304,0)
 ; The function checks if the patient is an employee and if he/she
"RTN","RORUTL02",305,0)
 ; can be added to the registry (according to the value of the
"RTN","RORUTL02",306,0)
 ; EXCLUDE EMPLOYEES field of the ROR REGISTRY PARAMETERS file).
"RTN","RORUTL02",307,0)
 ;
"RTN","RORUTL02",308,0)
SKIPEMPL(PTIEN,REGIEN) ;
"RTN","RORUTL02",309,0)
 Q:'$$EMPL^DGSEC4(PTIEN,"P") 0
"RTN","RORUTL02",310,0)
 S:'$D(REGIEN("SE")) REGIEN("SE")=+$P($G(^ROR(798.1,+REGIEN,0)),U,10)
"RTN","RORUTL02",311,0)
 Q +REGIEN("SE")
"RTN","RORUTL02",312,0)
 ;
"RTN","RORUTL02",313,0)
 ;***** RETURNS IEN OF THE SELECTION RULE
"RTN","RORUTL02",314,0)
 ;
"RTN","RORUTL02",315,0)
 ; RULENAME      Name of the selection rule
"RTN","RORUTL02",316,0)
 ; [FIELDS]      List of fields (separated by semicolons) to load
"RTN","RORUTL02",317,0)
 ; [.RORTRGT]    Reference to a local variable where field values will
"RTN","RORUTL02",318,0)
 ;               be stored by the FIND^DIC call.
"RTN","RORUTL02",319,0)
 ;
"RTN","RORUTL02",320,0)
 ; Return Values:
"RTN","RORUTL02",321,0)
 ;       <0  Error code
"RTN","RORUTL02",322,0)
 ;       >0  Selection rule IEN
"RTN","RORUTL02",323,0)
 ;
"RTN","RORUTL02",324,0)
SRLIEN(RULENAME,FIELDS,RORTRGT) ;
"RTN","RORUTL02",325,0)
 N RC,RULEIEN,RORMSG  K RORTRGT
"RTN","RORUTL02",326,0)
 D FIND^DIC(798.2,,"@;"_$G(FIELDS),"X",RULENAME,2,"B",,,"RORTRGT","RORMSG")
"RTN","RORUTL02",327,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.2)
"RTN","RORUTL02",328,0)
 S RC=+$G(RORTRGT("DILIST",0))
"RTN","RORUTL02",329,0)
 Q $S(RC<1:-3,RC>1:-4,1:+RORTRGT("DILIST",2,1))
"RTN","RORUTL11")
0^24^B4163451^B4117609
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ; 03 Dec 2015  1:56 PM
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17,18,20,19,21,22,24,27,25,26,28,29,30,31,32,33**;Feb 17, 2006;Build 81
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",15,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version 
"RTN","RORUTL11",16,0)
 ;ROR*1.5*18   MAY 2012    C RAY        Updated version 
"RTN","RORUTL11",17,0)
 ;ROR*1.5*20   DEC 2012    C RAY        Updated version
"RTN","RORUTL11",18,0)
 ;ROR*1.5*19   APR 2012    K GUPTA      Updated version                            
"RTN","RORUTL11",19,0)
 ;ROR*1.5*21   AUG 2013    T KOPP       Updated version
"RTN","RORUTL11",20,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Updated version 
"RTN","RORUTL11",21,0)
 ;ROR*1.5*24   DEC 2014    T KOPP       Updated version
"RTN","RORUTL11",22,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Updated version
"RTN","RORUTL11",23,0)
 ;ROR*1.5*25   MAR 2015    T KOPP       Updated version                  
"RTN","RORUTL11",24,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Updated version
"RTN","RORUTL11",25,0)
 ;ROR*1.5*28   APR 2016    T KOPP       Updated version
"RTN","RORUTL11",26,0)
 ;ROR*1.5*29   AUG 2016    T KOPP       Updated version
"RTN","RORUTL11",27,0)
 ;ROR*1.5*30   MAR 2017    M FERRARESE  Updated version
"RTN","RORUTL11",28,0)
 ;ROR*1.5*31   JUL 2017    S ALSAHHAR   Updated version
"RTN","RORUTL11",29,0)
 ;ROR*1.5*32   JUL 2017    S ALSAHHAR   Updated version
"RTN","RORUTL11",30,0)
 ;ROR*1.5*33   MAY 2018    M FERRARESE  Updated version
"RTN","RORUTL11",31,0)
 ;******************************************************************************
"RTN","RORUTL11",32,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",33,0)
 ;
"RTN","RORUTL11",34,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",35,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",36,0)
 ;         
"RTN","RORUTL11",37,0)
 ;******************************************************************************
"RTN","RORUTL11",38,0)
 Q
"RTN","RORUTL11",39,0)
 ;
"RTN","RORUTL11",40,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",41,0)
 ;
"RTN","RORUTL11",42,0)
 ; Return Values:
"RTN","RORUTL11",43,0)
 ;       <0  Error code
"RTN","RORUTL11",44,0)
 ;        0  Ok
"RTN","RORUTL11",45,0)
 ;
"RTN","RORUTL11",46,0)
RNDXACL() ;
"RTN","RORUTL11",47,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",48,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",49,0)
 S REGIEN=0
"RTN","RORUTL11",50,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",51,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",52,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",53,0)
 Q 0
"RTN","RORUTL11",54,0)
 ;
"RTN","RORUTL11",55,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",56,0)
 ;
"RTN","RORUTL11",57,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",58,0)
 ;
"RTN","RORUTL11",59,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",60,0)
 ;
"RTN","RORUTL11",61,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",62,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",63,0)
 ;                 I  IRM Only
"RTN","RORUTL11",64,0)
 ;
"RTN","RORUTL11",65,0)
 ; Return Values:
"RTN","RORUTL11",66,0)
 ;       <0  Error code
"RTN","RORUTL11",67,0)
 ;        0  Ok
"RTN","RORUTL11",68,0)
 ;       >0  Access denied
"RTN","RORUTL11",69,0)
 ;
"RTN","RORUTL11",70,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",71,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",72,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",73,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",74,0)
 ;---
"RTN","RORUTL11",75,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",76,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",77,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",78,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",79,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",80,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",81,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",82,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",83,0)
 . S ACCESS=1
"RTN","RORUTL11",84,0)
 ;---
"RTN","RORUTL11",85,0)
 D ACVIOLTN^RORLOG(-91,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",86,0)
 Q 1
"RTN","RORUTL11",87,0)
 ;
"RTN","RORUTL11",88,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",89,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",90,0)
 ;
"RTN","RORUTL11",91,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",92,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",93,0)
 ;been installed yet.
"RTN","RORUTL11",94,0)
 ;
"RTN","RORUTL11",95,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",96,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",97,0)
 ;
"RTN","RORUTL11",98,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",99,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",100,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",101,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",102,0)
 ;
"RTN","RORUTL11",103,0)
VERSRV(VAL) ;
"RTN","RORUTL11",104,0)
 S VAL="1.5.33"
"RTN","RORUTL11",105,0)
 Q
"RTN","RORUTL18")
0^21^B50985602^B26583151
"RTN","RORUTL18",1,0)
RORUTL18 ;HCIOFO/SG - MISCELLANEOUS UTILITIES ; 4/4/07 1:19pm
"RTN","RORUTL18",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2,33**;Feb 17, 2006;Build 81
"RTN","RORUTL18",3,0)
 ;
"RTN","RORUTL18",4,0)
 ; This routine uses the following IA's:
"RTN","RORUTL18",5,0)
 ;
"RTN","RORUTL18",6,0)
 ; #10035        Access to the field #63 of the file #2
"RTN","RORUTL18",7,0)
 ; #10063        %ZTLOAD
"RTN","RORUTL18",8,0)
 ; #1472         XUTMOPT
"RTN","RORUTL18",9,0)
 ; #10070        XMD
"RTN","RORUTL18",10,0)
 ; #10061        VADPT
"RTN","RORUTL18",11,0)
 ; #10104        XLFSTR
"RTN","RORUTL18",12,0)
 ; #10081        XQALERT
"RTN","RORUTL18",13,0)
 ;
"RTN","RORUTL18",14,0)
 ;***************************************************************************
"RTN","RORUTL18",15,0)
 ;***************************************************************************
"RTN","RORUTL18",16,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL18",17,0)
 ;        
"RTN","RORUTL18",18,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL18",19,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL18",20,0)
 ;ROR*1.5*33   MAY  2018   F TRAXLER    Added GETSCHED, SETSCHED, QSCHED, TASKCHK
"RTN","RORUTL18",21,0)
 ;                                      
"RTN","RORUTL18",22,0)
 ;***************************************************************************
"RTN","RORUTL18",23,0)
 ;***************************************************************************
"RTN","RORUTL18",24,0)
 Q
"RTN","RORUTL18",25,0)
 ;
"RTN","RORUTL18",26,0)
 ;***** STRIPS NON-NUMERIC CHARACTERS FROM THE LAB RESULT VALUE
"RTN","RORUTL18",27,0)
 ;
"RTN","RORUTL18",28,0)
 ; VAL           Source value
"RTN","RORUTL18",29,0)
 ;
"RTN","RORUTL18",30,0)
CLRNMVAL(VAL) ;
"RTN","RORUTL18",31,0)
 Q $TR(VAL," <>,")
"RTN","RORUTL18",32,0)
 ;
"RTN","RORUTL18",33,0)
 ;***** CHECKS FOR 'CONFIRMED' STATUS
"RTN","RORUTL18",34,0)
 ;
"RTN","RORUTL18",35,0)
 ; IEN           IEN of the registry record (in file #798)
"RTN","RORUTL18",36,0)
 ;
"RTN","RORUTL18",37,0)
 ; Return Values:
"RTN","RORUTL18",38,0)
 ;        0  Not confirmed
"RTN","RORUTL18",39,0)
 ;       >0  Confirmation date/time
"RTN","RORUTL18",40,0)
 ;
"RTN","RORUTL18",41,0)
CONFDT(IEN) ;
"RTN","RORUTL18",42,0)
 N CONF  S CONF=$P($G(^RORDATA(798,+IEN,0)),U,4,5)
"RTN","RORUTL18",43,0)
 Q $S('$P(CONF,U,2):$P(CONF,U),1:0)
"RTN","RORUTL18",44,0)
 ;
"RTN","RORUTL18",45,0)
 ;***** DATE RANGE COMPARISON FUNCTIONS
"RTN","RORUTL18",46,0)
DTMAX(DT1,DT2) ;
"RTN","RORUTL18",47,0)
 I DT1>0  Q $S(DT2>DT1:DT2,1:DT1)
"RTN","RORUTL18",48,0)
 Q $S(DT2>0:DT2,1:0)
"RTN","RORUTL18",49,0)
 ;
"RTN","RORUTL18",50,0)
DTMIN(DT1,DT2) ;
"RTN","RORUTL18",51,0)
 I DT1>0  Q $S(DT2'>0:DT1,DT2<DT1:DT2,1:DT1)
"RTN","RORUTL18",52,0)
 Q $S(DT2>0:DT2,1:0)
"RTN","RORUTL18",53,0)
 ;
"RTN","RORUTL18",54,0)
 ;***** RETURNS THE INSTITUTION IEN FOR THE HOSPITAL LOCATION
"RTN","RORUTL18",55,0)
 ;
"RTN","RORUTL18",56,0)
 ; IEN44         IEN in the HOSPITAL LOCATION file (#44)
"RTN","RORUTL18",57,0)
 ;
"RTN","RORUTL18",58,0)
 ; Return Values:
"RTN","RORUTL18",59,0)
 ;       <0  Error
"RTN","RORUTL18",60,0)
 ;       ""  Location has no corresponding institution
"RTN","RORUTL18",61,0)
 ;       >0  Institution IEN
"RTN","RORUTL18",62,0)
 ;
"RTN","RORUTL18",63,0)
IEN4(IEN44) ;
"RTN","RORUTL18",64,0)
 N IEN4,RC,RORMSG
"RTN","RORUTL18",65,0)
 Q:$G(IEN44)'>0 ""
"RTN","RORUTL18",66,0)
 S IEN4=+$$GET1^DIQ(44,IEN44_",",3,"I",,"RORMSG")
"RTN","RORUTL18",67,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,44,IEN44_",")
"RTN","RORUTL18",68,0)
 Q $S(IEN4>0:IEN4,1:"")
"RTN","RORUTL18",69,0)
 ;
"RTN","RORUTL18",70,0)
 ;***** RETURNS A LAB REFERENCE (IEN IN 'LAB DATA') FOR THE PATIENT
"RTN","RORUTL18",71,0)
 ;
"RTN","RORUTL18",72,0)
 ; PTIEN         Patient IEN
"RTN","RORUTL18",73,0)
 ;
"RTN","RORUTL18",74,0)
 ; Return values:
"RTN","RORUTL18",75,0)
 ;       <0  Error code
"RTN","RORUTL18",76,0)
 ;        0  No lab data
"RTN","RORUTL18",77,0)
 ;       >0  IEN of the record in LAB DATA file
"RTN","RORUTL18",78,0)
 ;
"RTN","RORUTL18",79,0)
LABREF(PTIEN) ;
"RTN","RORUTL18",80,0)
 N LABREF,RORMSG
"RTN","RORUTL18",81,0)
 Q:$G(PTIEN)'>0 0
"RTN","RORUTL18",82,0)
 Q:$$MERGED(PTIEN) 0
"RTN","RORUTL18",83,0)
 S LABREF=+$$GET1^DIQ(2,PTIEN_",",63,"I",,"RORMSG")
"RTN","RORUTL18",84,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,PTIEN,2,PTIEN_",")
"RTN","RORUTL18",85,0)
 Q LABREF
"RTN","RORUTL18",86,0)
 ;
"RTN","RORUTL18",87,0)
 ;***** RETURNS THE NEW DFN OF A MERGED PATIENT RECORD
"RTN","RORUTL18",88,0)
 ;
"RTN","RORUTL18",89,0)
 ; DFN           Patient IEN
"RTN","RORUTL18",90,0)
 ;
"RTN","RORUTL18",91,0)
 ; Return values:
"RTN","RORUTL18",92,0)
 ;        0  The patient has not been merged
"RTN","RORUTL18",93,0)
 ;       >0  New DFN
"RTN","RORUTL18",94,0)
 ;
"RTN","RORUTL18",95,0)
MERGED(DFN) ;
"RTN","RORUTL18",96,0)
 N NEWDFN
"RTN","RORUTL18",97,0)
 F  S DFN=+$G(^DPT(+DFN,-9))  Q:DFN'>0  S NEWDFN=DFN
"RTN","RORUTL18",98,0)
 Q +$G(NEWDFN)
"RTN","RORUTL18",99,0)
 ;
"RTN","RORUTL18",100,0)
 ;***** SENDS THE CPRS-COMPATIBLE INFORMATIONAL ALERT
"RTN","RORUTL18",101,0)
 ;
"RTN","RORUTL18",102,0)
 ; MSG           Text of the alert message.  The text is truncated
"RTN","RORUTL18",103,0)
 ;               to 50 characters and '^' are replaced with '~'.
"RTN","RORUTL18",104,0)
 ;
"RTN","RORUTL18",105,0)
 ; [DFN]         Patient IEN
"RTN","RORUTL18",106,0)
 ;
"RTN","RORUTL18",107,0)
 ; [.XQA]        List of addressees.  By default, the
"RTN","RORUTL18",108,0)
 ;               alert is sent to the current user.
"RTN","RORUTL18",109,0)
 ;
"RTN","RORUTL18",110,0)
ORALERT(MSG,DFN,XQA) ;
"RTN","RORUTL18",111,0)
 N LAST4,NAME,VA,VADM,VAHOW,VAROOT,XQADATA,XQAID,XQAMSG,XQAROU
"RTN","RORUTL18",112,0)
 S XQAMSG="",XQAID="ROR,,"
"RTN","RORUTL18",113,0)
 I $G(DFN)>0  D
"RTN","RORUTL18",114,0)
 . D DEM^VADPT
"RTN","RORUTL18",115,0)
 . S NAME=$E($G(VADM(1)),1,9)         ; Patient name
"RTN","RORUTL18",116,0)
 . S LAST4=$E($P($G(VADM(2)),U),6,9)  ; Last 4 of SSN
"RTN","RORUTL18",117,0)
 . S XQAMSG=$$LJ^XLFSTR(NAME_" ("_$E(NAME,1)_LAST4_"):",19)
"RTN","RORUTL18",118,0)
 . S $P(XQAID,",",2)=+DFN
"RTN","RORUTL18",119,0)
 S XQAMSG=XQAMSG_$TR(MSG,"^","~")
"RTN","RORUTL18",120,0)
 S:$L(XQAMSG)>70 $E(XQAMSG,68,999)="..."
"RTN","RORUTL18",121,0)
 I $D(XQA)<10  Q:$G(DUZ)'>0  S XQA(+DUZ)=""
"RTN","RORUTL18",122,0)
 D SETUP^XQALERT
"RTN","RORUTL18",123,0)
 Q
"RTN","RORUTL18",124,0)
 ;
"RTN","RORUTL18",125,0)
 ;***** CHECKS FOR 'PENDING' STATUS
"RTN","RORUTL18",126,0)
 ;
"RTN","RORUTL18",127,0)
 ; IEN           IEN of the registry record (in file #798)
"RTN","RORUTL18",128,0)
 ;
"RTN","RORUTL18",129,0)
 ; Return Values:
"RTN","RORUTL18",130,0)
 ;        0  Non-pending
"RTN","RORUTL18",131,0)
 ;        1  Pending patient
"RTN","RORUTL18",132,0)
 ;
"RTN","RORUTL18",133,0)
PENDING(IEN) ;
"RTN","RORUTL18",134,0)
 Q ($P($G(^RORDATA(798,+IEN,0)),U,5)=4)
"RTN","RORUTL18",135,0)
 ;
"RTN","RORUTL18",136,0)
 ;***** EMULATES $QUERY WITH 'DIRECTION' PARAMETER
"RTN","RORUTL18",137,0)
 ;
"RTN","RORUTL18",138,0)
 ; NODE          Closed root of a node
"RTN","RORUTL18",139,0)
 ;
"RTN","RORUTL18",140,0)
 ; [DIR]          Direction:
"RTN","RORUTL18",141,0)
 ;                  $G(DIR)'<0  forward
"RTN","RORUTL18",142,0)
 ;                  DIR<0       backward
"RTN","RORUTL18",143,0)
 ;
"RTN","RORUTL18",144,0)
Q(NODE,DIR) ;
"RTN","RORUTL18",145,0)
 Q:$G(DIR)'<0 $Q(@NODE)
"RTN","RORUTL18",146,0)
 N I,DN,PI,TMP
"RTN","RORUTL18",147,0)
 S TMP=$QL(NODE)  Q:TMP'>0 ""
"RTN","RORUTL18",148,0)
 S I=$QS(NODE,TMP),NODE=$NA(@NODE,TMP-1)
"RTN","RORUTL18",149,0)
 S PI=""
"RTN","RORUTL18",150,0)
 F  S I=$O(@NODE@(I),-1)  Q:I=""  D  Q:PI'=""
"RTN","RORUTL18",151,0)
 . S DN=$D(@NODE@(I))
"RTN","RORUTL18",152,0)
 . I DN#10  S PI=$NA(@NODE@(I))  Q
"RTN","RORUTL18",153,0)
 . S:DN>1 PI=$$Q($NA(@NODE@(I,"")),-1)
"RTN","RORUTL18",154,0)
 Q PI
"RTN","RORUTL18",155,0)
 ;
"RTN","RORUTL18",156,0)
 ;***** COUNTS THE REGISTRY PATIENTS
"RTN","RORUTL18",157,0)
 ;
"RTN","RORUTL18",158,0)
 ; .REGLST       Reference to a local array containing registry
"RTN","RORUTL18",159,0)
 ;               names as the subscripts and optional registry IENs
"RTN","RORUTL18",160,0)
 ;               as the values.
"RTN","RORUTL18",161,0)
 ;
"RTN","RORUTL18",162,0)
 ; [FLAGS]       Flags (can be combined)
"RTN","RORUTL18",163,0)
 ;                 A  Skip non-active patients
"RTN","RORUTL18",164,0)
 ;                 S  Skip patients marked as "Do not Send"
"RTN","RORUTL18",165,0)
 ;
"RTN","RORUTL18",166,0)
 ; [ROR8DST]     Closed root of the global node that will contain a
"RTN","RORUTL18",167,0)
 ;               list of patients. By default ($G(ROR8DST)=""), the
"RTN","RORUTL18",168,0)
 ;               ^TMP("RORUTL18",$J) global node is used internally
"RTN","RORUTL18",169,0)
 ;               (it is deleted before exiting the function).
"RTN","RORUTL18",170,0)
 ; @ROR8DST@(
"RTN","RORUTL18",171,0)
 ;  PatIEN,
"RTN","RORUTL18",172,0)
 ;    RegIEN)    Registry Record IEN
"RTN","RORUTL18",173,0)
 ;
"RTN","RORUTL18",174,0)
 ; Return Values:
"RTN","RORUTL18",175,0)
 ;       <0  Error code
"RTN","RORUTL18",176,0)
 ;        0  All provided registries are empty
"RTN","RORUTL18",177,0)
 ;       >0  Number of unique patients
"RTN","RORUTL18",178,0)
 ;
"RTN","RORUTL18",179,0)
REGPTCNT(REGLST,FLAGS,ROR8DST) ;
"RTN","RORUTL18",180,0)
 N CNT,IEN,NODE,PLKILL,PTIEN,REGIEN,REGNAME
"RTN","RORUTL18",181,0)
 S:$G(ROR8DST)="" ROR8DST=$NA(^TMP("RORUTL18",$J)),PLKILL=1
"RTN","RORUTL18",182,0)
 S FLAGS=$G(FLAGS),NODE=$$ROOT^DILFD(798,"",1),CNT=0
"RTN","RORUTL18",183,0)
 K @ROR8DST
"RTN","RORUTL18",184,0)
 ;--- Build a list of unique patients and count them
"RTN","RORUTL18",185,0)
 S REGNAME=""
"RTN","RORUTL18",186,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D
"RTN","RORUTL18",187,0)
 . ;--- Get the registry IEN
"RTN","RORUTL18",188,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUTL18",189,0)
 . I REGIEN'>0  D  Q:REGIEN'>0
"RTN","RORUTL18",190,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUTL18",191,0)
 . ;--- Count the registry patients
"RTN","RORUTL18",192,0)
 . S IEN=0
"RTN","RORUTL18",193,0)
 . F  S IEN=$O(@NODE@("AC",REGIEN,IEN))  Q:IEN'>0  D
"RTN","RORUTL18",194,0)
 . . I FLAGS["A"  Q:'$$ACTIVE^RORDD(IEN)
"RTN","RORUTL18",195,0)
 . . I FLAGS["S"  Q:$P($G(^RORDATA(798,IEN,2)),U,4)
"RTN","RORUTL18",196,0)
 . . S PTIEN=$$PTIEN^RORUTL01(IEN)  Q:PTIEN'>0
"RTN","RORUTL18",197,0)
 . . I '$D(@ROR8DST@(PTIEN))  D  S CNT=CNT+1
"RTN","RORUTL18",198,0)
 . . . S @ROR8DST@(PTIEN,REGIEN)=IEN
"RTN","RORUTL18",199,0)
 ;--- Cleanup
"RTN","RORUTL18",200,0)
 K:$G(PLKILL) @ROR8DST
"RTN","RORUTL18",201,0)
 Q CNT
"RTN","RORUTL18",202,0)
 ;
"RTN","RORUTL18",203,0)
 ;***** SELECTS A REGISTRY DESCRIPTOR IN THE FILE #798.1
"RTN","RORUTL18",204,0)
 ;
"RTN","RORUTL18",205,0)
 ; [.REGNAME]    Registry name is returned via this parameter
"RTN","RORUTL18",206,0)
 ;
"RTN","RORUTL18",207,0)
 ; Return Values:
"RTN","RORUTL18",208,0)
 ;       <0  Error code
"RTN","RORUTL18",209,0)
 ;       ""  Timeout, "^" entered, or an error in ^DIC
"RTN","RORUTL18",210,0)
 ;        0  There are no records in the file #798.1
"RTN","RORUTL18",211,0)
 ;       >0  IEN of the selected registry
"RTN","RORUTL18",212,0)
 ;
"RTN","RORUTL18",213,0)
SELREG(REGNAME) ;
"RTN","RORUTL18",214,0)
 N DA,DIC,DLAYGO,DTOUT,DUOUT,RC,RORBUF,RORMSG,X,Y
"RTN","RORUTL18",215,0)
 S REGNAME=""
"RTN","RORUTL18",216,0)
 ;--- If there are less than two records, do not ask a user
"RTN","RORUTL18",217,0)
 D LIST^DIC(798.1,,"@;.01E",,2,,,"B",,,"RORBUF","RORMSG")
"RTN","RORUTL18",218,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1)
"RTN","RORUTL18",219,0)
 I $G(RORBUF("DILIST",0))<2  D  Q +$G(RORBUF("DILIST",2,1))
"RTN","RORUTL18",220,0)
 . S REGNAME=$G(RORBUF("DILIST","ID",1,.01))
"RTN","RORUTL18",221,0)
 ;--- Select a registry
"RTN","RORUTL18",222,0)
 S DIC=798.1,DIC(0)="AENQZ"
"RTN","RORUTL18",223,0)
 S DIC("A")="Select a Registry: "
"RTN","RORUTL18",224,0)
 D ^DIC
"RTN","RORUTL18",225,0)
 S:Y>0 REGNAME=Y(0,0)
"RTN","RORUTL18",226,0)
 Q $S($D(DTOUT)!$D(DUOUT):"",Y<0:"",1:+Y)
"RTN","RORUTL18",227,0)
 ;
"RTN","RORUTL18",228,0)
 ;***** RETURNS THE CLINIC'S STOP CODE
"RTN","RORUTL18",229,0)
 ;
"RTN","RORUTL18",230,0)
 ; CLIEN         Clinic IEN
"RTN","RORUTL18",231,0)
 ;
"RTN","RORUTL18",232,0)
 ; Return Values:
"RTN","RORUTL18",233,0)
 ;       <0  Error code
"RTN","RORUTL18",234,0)
 ;       ""  No stop code
"RTN","RORUTL18",235,0)
 ;       >0  Stop code
"RTN","RORUTL18",236,0)
 ;
"RTN","RORUTL18",237,0)
STOPCODE(CLIEN) ;
"RTN","RORUTL18",238,0)
 N RORMSG,STOP
"RTN","RORUTL18",239,0)
 I CLIEN>0  D
"RTN","RORUTL18",240,0)
 . S STOP=$$GET1^DIQ(44,CLIEN_",","#8:#1","I",,"RORMSG")
"RTN","RORUTL18",241,0)
 . S:$G(DIERR) STOP=$$DBS^RORERR("RORMSG",-99,,,44,CLIEN_",")
"RTN","RORUTL18",242,0)
 E  S STOP=""
"RTN","RORUTL18",243,0)
 Q STOP
"RTN","RORUTL18",244,0)
 ;
"RTN","RORUTL18",245,0)
GETSCHED(RORNAME) ;Function to get option schedule information from FILE 19.1
"RTN","RORUTL18",246,0)
 ;  Input: RORNAME = option name (file 19, field .01)
"RTN","RORUTL18",247,0)
 ; Output:     (1) = task number^scheduled time^reschedule freq^special queueing flag
"RTN","RORUTL18",248,0)
 ; Example:    (1) = "1466544^3180427.154^1D^"
"RTN","RORUTL18",249,0)
 ; Returns null if option name not defined or option is not scheduled.
"RTN","RORUTL18",250,0)
 ;
"RTN","RORUTL18",251,0)
 N RORINFO
"RTN","RORUTL18",252,0)
 S RORNAME=$G(RORNAME)
"RTN","RORUTL18",253,0)
 I RORNAME="" Q ""
"RTN","RORUTL18",254,0)
 D OPTSTAT^XUTMOPT(RORNAME,.RORINFO) ;NOTE: API also returns variable: RORINFO=count
"RTN","RORUTL18",255,0)
 I +$G(RORINFO)=0 Q ""
"RTN","RORUTL18",256,0)
 Q $G(RORINFO(1))
"RTN","RORUTL18",257,0)
 ;
"RTN","RORUTL18",258,0)
SETSCHED(RORNAME,ROR1,ROR2,ROR3,ROR4,ROR5,ROR6) ;Function to set option schedule in FILE 19.1
"RTN","RORUTL18",259,0)
 ;  Input: RORNAME = option name (file 19, field .01)
"RTN","RORUTL18",260,0)
 ;            ROR1 = date/time to run
"RTN","RORUTL18",261,0)
 ;            ROR2 = device to use
"RTN","RORUTL18",262,0)
 ;            ROR3 = re-sechedule frequency
"RTN","RORUTL18",263,0)
 ;            ROR4 = flags
"RTN","RORUTL18",264,0)
 ;            ROR5 = error array
"RTN","RORUTL18",265,0)
 ;            ROR6 = queueing flag (0:don't queue{default}, 1:queue)
"RTN","RORUTL18",266,0)
 ; Output: 1 = changes made
"RTN","RORUTL18",267,0)
 ;         0 = changes not made 
"RTN","RORUTL18",268,0)
 ;
"RTN","RORUTL18",269,0)
 N RORVAR,ZTDESC,ZTDTH,ZTRTN,ZTSAVE,ZTIO
"RTN","RORUTL18",270,0)
 S RORNAME=$G(RORNAME)
"RTN","RORUTL18",271,0)
 I RORNAME="" Q 0
"RTN","RORUTL18",272,0)
 S ROR1=$G(ROR1),ROR2=$G(ROR2),ROR3=$G(ROR3),ROR4=$G(ROR4),ROR5=$G(ROR5),ROR6=$G(ROR6,0)
"RTN","RORUTL18",273,0)
 I ROR6=1 D  Q 1
"RTN","RORUTL18",274,0)
 .S ZTRTN="QSCHED^RORUTL18",ZTDESC="ROR reschedule option",ZTDTH=$$NOW^XLFDT(),ZTIO=""
"RTN","RORUTL18",275,0)
 .F RORVAR="RORNAME","ROR1","ROR2","ROR3","ROR4","ROR5" S ZTSAVE(RORVAR)=""
"RTN","RORUTL18",276,0)
 .D ^%ZTLOAD
"RTN","RORUTL18",277,0)
 D RESCH^XUTMOPT(RORNAME,ROR1,ROR2,ROR3,ROR4,.ROR5)
"RTN","RORUTL18",278,0)
 I $G(ROR5)=-1 Q 0
"RTN","RORUTL18",279,0)
 Q 1
"RTN","RORUTL18",280,0)
 ;
"RTN","RORUTL18",281,0)
TASKCHK(RORNAME) ;Function: Is option currently running? 
"RTN","RORUTL18",282,0)
 ;Calls %ZTLOAD API with option name.
"RTN","RORUTL18",283,0)
 ;  Input: RORNAME = option name (file 19, field .01)
"RTN","RORUTL18",284,0)
 ; Output:  1 = task is running
"RTN","RORUTL18",285,0)
 ;          0 = task is not running
"RTN","RORUTL18",286,0)
 ;         -1 = error
"RTN","RORUTL18",287,0)
 ;
"RTN","RORUTL18",288,0)
 N RORARRAY,RORFLAG,ZTSK
"RTN","RORUTL18",289,0)
 S RORFLAG=0
"RTN","RORUTL18",290,0)
 S RORNAME=$G(RORNAME)
"RTN","RORUTL18",291,0)
 I RORNAME="" Q -1
"RTN","RORUTL18",292,0)
 D OPTION^%ZTLOAD(RORNAME,.RORARRAY) ;returns data in ^TMP($J)
"RTN","RORUTL18",293,0)
 S ZTSK=0
"RTN","RORUTL18",294,0)
 F  S ZTSK=$O(@RORARRAY@(ZTSK)) Q:'ZTSK  D  I $G(ZTSK(1))=2 S RORFLAG=1 Q
"RTN","RORUTL18",295,0)
 . D STAT^%ZTLOAD
"RTN","RORUTL18",296,0)
 ;don't want to K ^TMP($J). may kill something that is needed elsewhere.
"RTN","RORUTL18",297,0)
 S ZTSK=0 F  S ZTSK=$O(@RORARRAY@(ZTSK)) Q:'ZTSK  K @RORARRAY@(ZTSK)
"RTN","RORUTL18",298,0)
 Q RORFLAG
"RTN","RORUTL18",299,0)
 ;
"RTN","RORUTL18",300,0)
QSCHED ;Reschedule an option as a tasked job to avoid date/time from writing to the display
"RTN","RORUTL18",301,0)
 D RESCH^XUTMOPT(RORNAME,ROR1,ROR2,ROR3,ROR4,.ROR5)
"RTN","RORUTL18",302,0)
 Q
"RTN","RORX010")
0^8^B81772446^B75093403
"RTN","RORX010",1,0)
RORX010 ;HOIFO/SG,VAC - LAB TESTS BY RANGE REPORT ;4/7/09 2:08pm
"RTN","RORX010",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13,19,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX010",3,0)
 ;
"RTN","RORX010",4,0)
 ; This routine uses the following IAs:
"RTN","RORX010",5,0)
 ;
"RTN","RORX010",6,0)
 ; #2056  GETS^DIQ (supported)
"RTN","RORX010",7,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX010",8,0)
 ;
"RTN","RORX010",9,0)
 ;******************************************************************************
"RTN","RORX010",10,0)
 ;******************************************************************************
"RTN","RORX010",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX010",12,0)
 ;        
"RTN","RORX010",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX010",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX010",15,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX010",16,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX010",17,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX010",18,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX010",19,0)
 ;ROR*1.5*19   FEB  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX010",20,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX010",21,0)
 ;                                      additional identifier option selected
"RTN","RORX010",22,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional identifiers.
"RTN","RORX010",23,0)
 ;                                      Fixing the ICN and PCP at the end of the 
"RTN","RORX010",24,0)
 ;                                      Highest Combined OP and IP Utilization Summary panel
"RTN","RORX010",25,0)
 ;ROR*1.5*33   MAR 2018    M FERRARESE  Adding FUTURE APPOINTMENT as additional identifiers.
"RTN","RORX010",26,0)
 ;                                      
"RTN","RORX010",27,0)
 ;******************************************************************************
"RTN","RORX010",28,0)
 ;******************************************************************************
"RTN","RORX010",29,0)
 Q
"RTN","RORX010",30,0)
 ;
"RTN","RORX010",31,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX010",32,0)
 ;
"RTN","RORX010",33,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",34,0)
 ;
"RTN","RORX010",35,0)
 ; Return Values:
"RTN","RORX010",36,0)
 ;       <0  Error code
"RTN","RORX010",37,0)
 ;        0  Ok
"RTN","RORX010",38,0)
 ;
"RTN","RORX010",39,0)
HEADER(PARTAG) ;
"RTN","RORX010",40,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,ICN,PACT,PCP,FUT_APPT,PTLRL(GROUP,DATE,NAME,RESULT))^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX010",41,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,DOD,ICN,PACT,PCP,FUT_APPT,PTLRL(GROUP,DATE,NAME,RESULT))^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX010",42,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,DOD,ICN,PACT,PCP,FUT_APPT,PTLRL(GROUP,DATE,NAME,RESULT))^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX010",43,0)
 ; 
"RTN","RORX010",44,0)
 N COLUMNS,HEADER,LT,NAME,TMP
"RTN","RORX010",45,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX010",46,0)
 Q:HEADER<0 HEADER
"RTN","RORX010",47,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX010",HEADER)
"RTN","RORX010",48,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX010",49,0)
 ;
"RTN","RORX010",50,0)
 ;***** COMPILES THE LAB TESTS BY RANGE REPORT
"RTN","RORX010",51,0)
 ; REPORT CODE: 010
"RTN","RORX010",52,0)
 ;
"RTN","RORX010",53,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX010",54,0)
 ;
"RTN","RORX010",55,0)
 ; The ^TMP("RORX010",$J) global node is used by this function.
"RTN","RORX010",56,0)
 ;
"RTN","RORX010",57,0)
 ; Return Values:
"RTN","RORX010",58,0)
 ;       <0  Error code
"RTN","RORX010",59,0)
 ;        0  Ok
"RTN","RORX010",60,0)
 ;
"RTN","RORX010",61,0)
LRGRANGE(RORTSK) ;
"RTN","RORX010",62,0)
 N RORDST        ; Callback descriptor
"RTN","RORX010",63,0)
 N ROREDT        ; End date
"RTN","RORX010",64,0)
 N ROREDT1       ; End date + 1 day
"RTN","RORX010",65,0)
 N RORLTL        ; Closed root of the list of lab tests to search for
"RTN","RORX010",66,0)
 N RORREG        ; Registry IEN
"RTN","RORX010",67,0)
 N RORSDT        ; Start date
"RTN","RORX010",68,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX010",69,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX010",70,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX010",71,0)
 ;
"RTN","RORX010",72,0)
 N BODY,CNT,ECNT,IEN,IENS,LRGLST,RC,REPORT,RORPTN,SFLAGS,TMP
"RTN","RORX010",73,0)
 N DFN,RCC,FLAG
"RTN","RORX010",74,0)
 ;--- Root node of the report
"RTN","RORX010",75,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX010",76,0)
 Q:REPORT<0 REPORT
"RTN","RORX010",77,0)
 ;
"RTN","RORX010",78,0)
 ;--- Get and prepare the report parameters
"RTN","RORX010",79,0)
 S RORREG=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORX010",80,0)
 S RC=$$PARAMS(REPORT,.SFLAGS,.LRGLST)  Q:RC<0 RC
"RTN","RORX010",81,0)
 ;
"RTN","RORX010",82,0)
 ;--- Initialize constants and variables
"RTN","RORX010",83,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX010",84,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1),ECNT=0
"RTN","RORX010",85,0)
 K ^TMP("RORX010",$J)
"RTN","RORX010",86,0)
 S RORLTL=$$ALLOC^RORTMP()
"RTN","RORX010",87,0)
 ;
"RTN","RORX010",88,0)
 ;--- Prepare the search parameters
"RTN","RORX010",89,0)
 S RORDST=$NA(^TMP("RORX010",$J))
"RTN","RORX010",90,0)
 S RORDST("RORCB")="$$LTCB^RORX010"
"RTN","RORX010",91,0)
 S RC=$$LOADTSTS^RORUTL10(RORLTL,+RORREG,LRGLST)
"RTN","RORX010",92,0)
 ;
"RTN","RORX010",93,0)
 ;--- Report header and list of patients
"RTN","RORX010",94,0)
 S RC=$$HEADER(REPORT)  G:RC<0 ERROR
"RTN","RORX010",95,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX010",96,0)
 I BODY<0  S RC=+BODY  G ERROR
"RTN","RORX010",97,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX010",98,0)
 ;
"RTN","RORX010",99,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX010",100,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX010",101,0)
 ;
"RTN","RORX010",102,0)
 ;--- Browse through the registry records
"RTN","RORX010",103,0)
 S (CNT,IEN,RC)=0
"RTN","RORX010",104,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX010",105,0)
 F  S IEN=$O(^RORDATA(798,"AC",RORREG,IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX010",106,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX010",107,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX010",108,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX010",109,0)
 . ;--- Get patient DFN
"RTN","RORX010",110,0)
 . S DFN=$$PTIEN^RORUTL01(IEN) Q:DFN'>0
"RTN","RORX010",111,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX010",112,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX010",113,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX010",114,0)
 . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORSDT,ROREDT)
"RTN","RORX010",115,0)
 . ;--- Check pateint against ICD Filter
"RTN","RORX010",116,0)
 . S RCC=0
"RTN","RORX010",117,0)
 . I FLAG'="ALL" D
"RTN","RORX010",118,0)
 . . S RCC=$$ICD^RORXU010(DFN)
"RTN","RORX010",119,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX010",120,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX010",121,0)
 . ;--- End of ICD Check
"RTN","RORX010",122,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX010",123,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX010",124,0)
 . ;--- Process the registry record
"RTN","RORX010",125,0)
 . I $$PATIENT(IENS,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX010",126,0)
 ;
"RTN","RORX010",127,0)
ERROR ;--- Cleanup
"RTN","RORX010",128,0)
 D FREE^RORTMP(RORLTL)
"RTN","RORX010",129,0)
 K ^TMP("RORX010",$J)
"RTN","RORX010",130,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX010",131,0)
 ;
"RTN","RORX010",132,0)
 ;***** CALLBACK FUNCTION FOR LAB DATA SEARCH
"RTN","RORX010",133,0)
LTCB(RORDST,INVDT,RESULT) ;
"RTN","RORX010",134,0)
 N GRP,NODE,RC,VAL
"RTN","RORX010",135,0)
 S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX010",136,0)
 S GRP=+$P($G(RESULT(2)),U,3)
"RTN","RORX010",137,0)
 ;--- Check the result range if necessary
"RTN","RORX010",138,0)
 I $D(@NODE@(GRP))>1  S RC=1  D  Q:RC RC
"RTN","RORX010",139,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P($G(RESULT(1)),U,3))
"RTN","RORX010",140,0)
 . ;--- Skip a non-numeric result
"RTN","RORX010",141,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX010",142,0)
 . ;--- Check the range
"RTN","RORX010",143,0)
 . I $G(@NODE@(GRP,"L"))'=""  Q:VAL<@NODE@(GRP,"L")
"RTN","RORX010",144,0)
 . I $G(@NODE@(GRP,"H"))'=""  Q:VAL>@NODE@(GRP,"H")
"RTN","RORX010",145,0)
 . S RC=0
"RTN","RORX010",146,0)
 ;--- Store the result
"RTN","RORX010",147,0)
 K RORDST("GRP",GRP)
"RTN","RORX010",148,0)
 S RORDST("RORPTR")=$G(RORDST("RORPTR"))+1
"RTN","RORX010",149,0)
 M @RORDST@(RORDST("RORPTR"))=RESULT
"RTN","RORX010",150,0)
 Q 0
"RTN","RORX010",151,0)
 ;
"RTN","RORX010",152,0)
 ;***** OUTPUTS THE REPORT PARAMETERS
"RTN","RORX010",153,0)
 ;
"RTN","RORX010",154,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",155,0)
 ;
"RTN","RORX010",156,0)
 ; .FLAGS        Flags for the $$SKIP^RORXU005 are
"RTN","RORX010",157,0)
 ;               returned via this parameter
"RTN","RORX010",158,0)
 ;
"RTN","RORX010",159,0)
 ; .LRGLST       List of lab group codes for the $$LOADTSTS^RORUTL10
"RTN","RORX010",160,0)
 ;
"RTN","RORX010",161,0)
 ; Return Values:
"RTN","RORX010",162,0)
 ;       <0  Error code
"RTN","RORX010",163,0)
 ;        0  Ok
"RTN","RORX010",164,0)
 ;
"RTN","RORX010",165,0)
PARAMS(PARTAG,FLAGS,LRGLST) ;
"RTN","RORX010",166,0)
 N PARAMS,TMP
"RTN","RORX010",167,0)
 S (FLAGS,LRGLST)=""
"RTN","RORX010",168,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.RORSDT,.ROREDT,.FLAGS)
"RTN","RORX010",169,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX010",170,0)
 ;--- Lab test ranges
"RTN","RORX010",171,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX010",172,0)
 . N GRC,ELEMENT,NODE,LRGELMTS,RANGE
"RTN","RORX010",173,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX010",174,0)
 . S LRGELMTS=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARAMS)
"RTN","RORX010",175,0)
 . S (GRC,RC)=0
"RTN","RORX010",176,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX010",177,0)
 . . S RANGE=0,TMP=$$RANGE(GRC)
"RTN","RORX010",178,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",TMP,LRGELMTS)
"RTN","RORX010",179,0)
 . . I ELEMENT<0  S RC=ELEMENT  Q
"RTN","RORX010",180,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX010",181,0)
 . . S LRGLST=LRGLST_$S(LRGLST'="":","_GRC,1:GRC)
"RTN","RORX010",182,0)
 . . ;--- Process the range values
"RTN","RORX010",183,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX010",184,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX010",185,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX010",186,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX010",187,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX010",188,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX010",189,0)
 . . D:RANGE ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX010",190,0)
 ;--- Success
"RTN","RORX010",191,0)
 Q PARAMS
"RTN","RORX010",192,0)
 ;
"RTN","RORX010",193,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX010",194,0)
 ;
"RTN","RORX010",195,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX010",196,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",197,0)
 ;
"RTN","RORX010",198,0)
 ; Return Values:
"RTN","RORX010",199,0)
 ;       <0  Error code
"RTN","RORX010",200,0)
 ;        0  Ok
"RTN","RORX010",201,0)
 ;
"RTN","RORX010",202,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX010",203,0)
 N DFN,I,LABTESTS,LT,NAME,PTAG,RC,RORBUF,RORMSG,TMP,VA,VADM,RORPACT,RORPCP,AGE,AGETYPE,RORDAYS
"RTN","RORX010",204,0)
 ;--- Get the data from the ROR REGISTRY RECORD file
"RTN","RORX010",205,0)
 K RORMSG D GETS^DIQ(798,IENS,".01","I","RORBUF","RORMSG")
"RTN","RORX010",206,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX010",207,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX010",208,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX010",209,0)
 ;--- Search for the lab results
"RTN","RORX010",210,0)
 K @RORDST,RORDST("RORPTR")
"RTN","RORX010",211,0)
 M RORDST("GRP")=RORTSK("PARAMS","LRGRANGES","C")
"RTN","RORX010",212,0)
 S RC=$$LTSEARCH^RORUTL10(DFN,RORLTL,.RORDST,,RORSDT,ROREDT1)
"RTN","RORX010",213,0)
 Q:RC'>0 RC
"RTN","RORX010",214,0)
 ;--- Results from all groups should be present
"RTN","RORX010",215,0)
 Q:$D(RORDST("GRP"))>1 0
"RTN","RORX010",216,0)
 ;--- Load the demographic data
"RTN","RORX010",217,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX010",218,0)
 ;--- The <PATIENT> tag
"RTN","RORX010",219,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX010",220,0)
 Q:PTAG<0 PTAG
"RTN","RORX010",221,0)
 ;--- Patient Name
"RTN","RORX010",222,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX010",223,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX010",224,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX010",225,0)
 ;--- Age/DOB
"RTN","RORX010",226,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE")
"RTN","RORX010",227,0)
 S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX010",228,0)
 I AGETYPE'="ALL" D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,PTAG,1)
"RTN","RORX010",229,0)
 ;--- Date of death
"RTN","RORX010",230,0)
 S TMP=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX010",231,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX010",232,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D
"RTN","RORX010",233,0)
 . S TMP=$$ICN^RORUTL02(DFN)
"RTN","RORX010",234,0)
 . D ADDVAL^RORTSK11(RORTSK,"ICN",TMP,PTAG,1)
"RTN","RORX010",235,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") S RORPACT="" D
"RTN","RORX010",236,0)
 . S RORPACT=$$PACT^RORUTL02(DFN) D ADDVAL^RORTSK11(RORTSK,"PACT",RORPACT,PTAG,1)
"RTN","RORX010",237,0)
 ;
"RTN","RORX010",238,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") S RORPCP="" D
"RTN","RORX010",239,0)
 . S RORPCP=$$PCP^RORUTL02(DFN) D ADDVAL^RORTSK11(RORTSK,"PCP",RORPCP,PTAG,1)
"RTN","RORX010",240,0)
 ;    
"RTN","RORX010",241,0)
 ;Future Appoinments only  patch 33
"RTN","RORX010",242,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D 
"RTN","RORX010",243,0)
 . S RORDAYS=0
"RTN","RORX010",244,0)
 . S RORDAYS=$$PARAM^RORTSK01("OPTIONS","FUT_APPT")
"RTN","RORX010",245,0)
 . I RORDAYS>0 D
"RTN","RORX010",246,0)
 . .S TMP=$$FUTAPPT^RORUTL02(DFN,RORDAYS)
"RTN","RORX010",247,0)
 . .D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",TMP,PTAG,1)
"RTN","RORX010",248,0)
 . .D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","FUT_APPT")
"RTN","RORX010",249,0)
 ;
"RTN","RORX010",250,0)
 ;--- Lab results
"RTN","RORX010",251,0)
 S LABTESTS=$$ADDVAL^RORTSK11(RORTSK,"PTLRL",,PTAG)
"RTN","RORX010",252,0)
 S I=""
"RTN","RORX010",253,0)
 F  S I=$O(@RORDST@(I))  Q:I=""  D
"RTN","RORX010",254,0)
 . S LT=$$ADDVAL^RORTSK11(RORTSK,"LT",,LABTESTS)
"RTN","RORX010",255,0)
 . D ADDVAL^RORTSK11(RORTSK,"GROUP",$P(@RORDST@(I,2),U,4),LT,1)
"RTN","RORX010",256,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$P(@RORDST@(I,1),U,2),LT,1)
"RTN","RORX010",257,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",$P(@RORDST@(I,2),U,2),LT,1)
"RTN","RORX010",258,0)
 . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(@RORDST@(I,1),U,3),LT,3)
"RTN","RORX010",259,0)
 ;---
"RTN","RORX010",260,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX010",261,0)
 ;
"RTN","RORX010",262,0)
 ;***** PROCESSES THE RESULT RANGE OPTIONS
"RTN","RORX010",263,0)
 ;
"RTN","RORX010",264,0)
 ; GRC           Code of a Lab Group
"RTN","RORX010",265,0)
 ;
"RTN","RORX010",266,0)
 ; Return Values:
"RTN","RORX010",267,0)
 ;       Description of the Lab results to be included in the report.
"RTN","RORX010",268,0)
 ;
"RTN","RORX010",269,0)
RANGE(GRC) ;
"RTN","RORX010",270,0)
 N RANGE,TMP
"RTN","RORX010",271,0)
 S RANGE=""
"RTN","RORX010",272,0)
 ;--- Range
"RTN","RORX010",273,0)
 D:$D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1
"RTN","RORX010",274,0)
 . ;--- Low
"RTN","RORX010",275,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX010",276,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX010",277,0)
 . ;--- High
"RTN","RORX010",278,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX010",279,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX010",280,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX010",281,0)
 ;--- Description
"RTN","RORX010",282,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX010",283,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX010",284,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX012")
0^9^B23584131^B23138519
"RTN","RORX012",1,0)
RORX012 ;HOIFO/SG,VAC - COMBINED MEDS AND LABS REPORT ;4/9/09 9:40am
"RTN","RORX012",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX012",3,0)
 ;
"RTN","RORX012",4,0)
 ;Modified Feb 2009, to permit only the most recent test to be
"RTN","RORX012",5,0)
 ;    displayed on the report - a call to ^RORXU009
"RTN","RORX012",6,0)
 ;
"RTN","RORX012",7,0)
 ;Modified March 2009 to filter patients on Include or Exclude ICD9
"RTN","RORX012",8,0)
 ;    codes.  Call to ^RORXU010
"RTN","RORX012",9,0)
 ;
"RTN","RORX012",10,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Add ICN column if Additional Identifier
"RTN","RORX012",11,0)
 ;                                       requested.
"RTN","RORX012",12,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional
"RTN","RORX012",13,0)
 ;                                      identifiers.
"RTN","RORX012",14,0)
 ;ROR*1.5*33   MAY 2017    M FERRARESE  Adding Future Appointment 
"RTN","RORX012",15,0)
 ;******************************************************************************
"RTN","RORX012",16,0)
 ;
"RTN","RORX012",17,0)
 Q
"RTN","RORX012",18,0)
 ;
"RTN","RORX012",19,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX012",20,0)
 ;
"RTN","RORX012",21,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX012",22,0)
 ;
"RTN","RORX012",23,0)
 ; Return Values:
"RTN","RORX012",24,0)
 ;       <0  Error code
"RTN","RORX012",25,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX012",26,0)
 ;
"RTN","RORX012",27,0)
HEADER(PARTAG) ;
"RTN","RORX012",28,0)
 ;;DRUGS(#,NAME,LAST4,DOD,RXNAME)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX012",29,0)
 ;;DRUGS(#,NAME,LAST4,AGE,DOD,RXNAME)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX012",30,0)
 ;;DRUGS(#,NAME,LAST4,DOB,DOD,RXNAME)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX012",31,0)
 ;;LABTESTS(#,NAME,LAST4,DOD,DATE,LTNAME,RESULT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX012",32,0)
 ;;LABTESTS(#,NAME,LAST4,AGE,DOD,DATE,LTNAME,RESULT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX012",33,0)
 ;;LABTESTS(#,NAME,LAST4,DOB,DOD,DATE,LTNAME,RESULT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX012",34,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX012",35,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,DOD,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX012",36,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,DOD,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX012",37,0)
 ;
"RTN","RORX012",38,0)
 N HEADER,RC
"RTN","RORX012",39,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX012",40,0)
 Q:HEADER<0 HEADER
"RTN","RORX012",41,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX012",HEADER)
"RTN","RORX012",42,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX012",43,0)
 ;
"RTN","RORX012",44,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX012",45,0)
 ;
"RTN","RORX012",46,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX012",47,0)
 ;
"RTN","RORX012",48,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX012",49,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX012",50,0)
 ;
"RTN","RORX012",51,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX012",52,0)
 ;               returned via this parameter
"RTN","RORX012",53,0)
 ;
"RTN","RORX012",54,0)
 ; Return Values:
"RTN","RORX012",55,0)
 ;       <0  Error code
"RTN","RORX012",56,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX012",57,0)
 ;
"RTN","RORX012",58,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX012",59,0)
 N PARAMS,TMP
"RTN","RORX012",60,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX012",61,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX012",62,0)
 ;--- Process the list of drugs and groups
"RTN","RORX012",63,0)
 I RORPHARM  D  Q:TMP<0 TMP
"RTN","RORX012",64,0)
 . S TMP=$$DRUGLST^RORXU007(.RORTSK,PARAMS,.RORXL,.RORXGRP)
"RTN","RORX012",65,0)
 ;--- Process the list of Lab tests
"RTN","RORX012",66,0)
 I RORLAB  D  Q:TMP<0 TMP
"RTN","RORX012",67,0)
 . S TMP=$$LTLST^RORXU006(.RORTSK,PARAMS,.RORLTST,"RORLTRV")
"RTN","RORX012",68,0)
 ;---
"RTN","RORX012",69,0)
 Q PARAMS
"RTN","RORX012",70,0)
 ;
"RTN","RORX012",71,0)
 ;***** DETERMINES THE REPORT MODE FOR LAB OR PHARMACY
"RTN","RORX012",72,0)
 ;
"RTN","RORX012",73,0)
 ; NAME          Base name of the attribute ("LAB" or "PHARM")
"RTN","RORX012",74,0)
 ;
"RTN","RORX012",75,0)
 ; Return Values:
"RTN","RORX012",76,0)
 ;       <0  "Did Not"
"RTN","RORX012",77,0)
 ;        0  Not selected
"RTN","RORX012",78,0)
 ;       >0  "Did"
"RTN","RORX012",79,0)
RPTMODE(NAME) ;
"RTN","RORX012",80,0)
 Q:$$PARAM^RORTSK01("PATIENTS",NAME) 1        ; "Did"
"RTN","RORX012",81,0)
 Q:$$PARAM^RORTSK01("PATIENTS","NO"_NAME) -1  ; "Did Not"
"RTN","RORX012",82,0)
 Q 0
"RTN","RORX012",83,0)
 ;
"RTN","RORX012",84,0)
 ;***** COMPILES THE "COMBINED PHARMACY AND LAB" REPORT
"RTN","RORX012",85,0)
 ; REPORT CODE: 012
"RTN","RORX012",86,0)
 ;
"RTN","RORX012",87,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX012",88,0)
 ;
"RTN","RORX012",89,0)
 ; The ^TMP("RORX012",$J) global node is used by this function.
"RTN","RORX012",90,0)
 ;
"RTN","RORX012",91,0)
 ; ^TMP("RORX012",$J,
"RTN","RORX012",92,0)
 ;   "PAT",
"RTN","RORX012",93,0)
 ;     DFN,              Patient descriptor
"RTN","RORX012",94,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX012",95,0)
 ;                         ^02: Patient name
"RTN","RORX012",96,0)
 ;                         ^03: Date of Death
"RTN","RORX012",97,0)
 ;                         ^04: ICN
"RTN","RORX012",98,0)
 ;                         ^05: PACT
"RTN","RORX012",99,0)
 ;                         ^06: PCP 
"RTN","RORX012",100,0)
 ;                         ^07: AGE/DOB
"RTN","RORX012",101,0)
 ;       "LR",
"RTN","RORX012",102,0)
 ;         Date,
"RTN","RORX012",103,0)
 ;           TestName,
"RTN","RORX012",104,0)
 ;             TestIEN)  Result
"RTN","RORX012",105,0)
 ;       "RX",
"RTN","RORX012",106,0)
 ;         DrugName,
"RTN","RORX012",107,0)
 ;           DrugIEN)    ""
"RTN","RORX012",108,0)
 ;
"RTN","RORX012",109,0)
 ; Return Values:
"RTN","RORX012",110,0)
 ;       <0  Error code
"RTN","RORX012",111,0)
 ;        0  Ok
"RTN","RORX012",112,0)
 ;
"RTN","RORX012",113,0)
RXANDLAB(RORTSK) ;
"RTN","RORX012",114,0)
 N RORLAB        ; Labs mode (-1|0|1)
"RTN","RORX012",115,0)
 N RORLTST       ; Closed root of the list of lab tests for the
"RTN","RORX012",116,0)
 ;               ; Lab search API
"RTN","RORX012",117,0)
 N RORLTRV       ; Closed root of the list of lab tests with ranges
"RTN","RORX012",118,0)
 N RORPHARM      ; Meds mode (-1|0|1)
"RTN","RORX012",119,0)
 N RORREG        ; Registry IEN
"RTN","RORX012",120,0)
 N RORXEDT       ; Pharmacy end date
"RTN","RORX012",121,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX012",122,0)
 N RORXL         ; Closed root of the drug list for the pharmacy
"RTN","RORX012",123,0)
 ;               ; search API or "*" if all drugs were selected
"RTN","RORX012",124,0)
 N RORXSDT       ; Pharmacy start date
"RTN","RORX012",125,0)
 ;
"RTN","RORX012",126,0)
 N ECNT,NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX012",127,0)
 N RORDEL        ; Flag to determine if Most Recent is set
"RTN","RORX012",128,0)
 N RORDELTSK     ; Task number passed to delete tests
"RTN","RORX012",129,0)
 S RORDEL=$G(RORTSK("PARAMS","LABTESTS","A","MOST_RECENT"))
"RTN","RORX012",130,0)
 S RORDELTSK=RORTSK
"RTN","RORX012",131,0)
 S (RORXL,RORLTST)="",(ECNT,RC)=0
"RTN","RORX012",132,0)
 K ^TMP("RORX012",$J)
"RTN","RORX012",133,0)
 ;--- Root node of the report
"RTN","RORX012",134,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX012",135,0)
 Q:REPORT<0 REPORT
"RTN","RORX012",136,0)
 ;
"RTN","RORX012",137,0)
 D
"RTN","RORX012",138,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX012",139,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX012",140,0)
 . S RORLAB=$$RPTMODE("LAB")            ; Labs logic
"RTN","RORX012",141,0)
 . S RORPHARM=$$RPTMODE("PHARM")        ; Meds logic
"RTN","RORX012",142,0)
 . S RC=$$PARAMS(REPORT,.RORXSDT,.RORXEDT,.SFLAGS)  Q:RC<0
"RTN","RORX012",143,0)
 . ;--- Report header
"RTN","RORX012",144,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX012",145,0)
 . ;--- Query the registry
"RTN","RORX012",146,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX012",147,0)
 . S RC=$$QUERY^RORX012A(SFLAGS,.NSPT)
"RTN","RORX012",148,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX012",149,0)
 . ;--- Store the results
"RTN","RORX012",150,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX012",151,0)
 . S RC=$$STORE^RORX012A(REPORT,NSPT)
"RTN","RORX012",152,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX012",153,0)
 ;
"RTN","RORX012",154,0)
 ;--- Cleanup
"RTN","RORX012",155,0)
 ;--- Modify the report if only the latest test is required
"RTN","RORX012",156,0)
 ;    Inputs are Task number for File 798.8 and the flag
"RTN","RORX012",157,0)
 I RORDEL=1 D DEL^RORXU009(RORDELTSK)
"RTN","RORX012",158,0)
 K ^TMP("RORX012",$J)
"RTN","RORX012",159,0)
 D FREE^RORTMP(RORXL),FREE^RORTMP(RORLTST)
"RTN","RORX012",160,0)
 ;
"RTN","RORX012",161,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX012A")
0^10^B136884718^B120421000
"RTN","RORX012A",1,0)
RORX012A ;HOIFO/SG,VAC - COMBINED MEDS AND LABS (QUERY & STORE) ;4/7/09 2:09pm
"RTN","RORX012A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13,19,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX012A",3,0)
 ;
"RTN","RORX012A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX012A",5,0)
 ;
"RTN","RORX012A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX012A",7,0)
 ;   
"RTN","RORX012A",8,0)
 ;******************************************************************************
"RTN","RORX012A",9,0)
 ;******************************************************************************
"RTN","RORX012A",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX012A",11,0)
 ;        
"RTN","RORX012A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX012A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX012A",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX012A",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX012A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX012A",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX012A",18,0)
 ;ROR*1.5*19   FEB  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX012A",19,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Add ICN column if Additional Identifier
"RTN","RORX012A",20,0)
 ;                                       requested.
"RTN","RORX012A",21,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, AGE/DOB as additional
"RTN","RORX012A",22,0)
 ;                                       identifiers.
"RTN","RORX012A",23,0)
 ;ROR*1.5*33   MAY 2017    M FERRARESE  Adding Future Appointment
"RTN","RORX012A",24,0)
 ;******************************************************************************
"RTN","RORX012A",25,0)
 ;******************************************************************************
"RTN","RORX012A",26,0)
 Q
"RTN","RORX012A",27,0)
 ;
"RTN","RORX012A",28,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX012A",29,0)
 ;
"RTN","RORX012A",30,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX012A",31,0)
 ;
"RTN","RORX012A",32,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX012A",33,0)
 ;
"RTN","RORX012A",34,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX012A",35,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX012A",36,0)
 ;
"RTN","RORX012A",37,0)
 ; Return Values:
"RTN","RORX012A",38,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX012A",39,0)
 ;        0  Ok
"RTN","RORX012A",40,0)
 ;        1  Skip this result
"RTN","RORX012A",41,0)
 ;        2  Skip this and all remaining results
"RTN","RORX012A",42,0)
 ;
"RTN","RORX012A",43,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX012A",44,0)
 N DATE,IEN,NAME,RC,TMP,VAL
"RTN","RORX012A",45,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX012A",46,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX012A",47,0)
 S DATE=+$P(RESULT(1),U,2)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX012A",48,0)
 S ROR8DST("RORUTIL")=1
"RTN","RORX012A",49,0)
 ;--- Check the result range if necessary
"RTN","RORX012A",50,0)
 I $D(RORLTRV(IEN))>1  S RC=1  D  Q:RC RC
"RTN","RORX012A",51,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P(RESULT(1),U,3))
"RTN","RORX012A",52,0)
 . ;--- Skip a non-numeric result
"RTN","RORX012A",53,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX012A",54,0)
 . ;--- Check the range
"RTN","RORX012A",55,0)
 . I $G(RORLTRV(IEN,"L"))'=""  Q:VAL<RORLTRV(IEN,"L")
"RTN","RORX012A",56,0)
 . I $G(RORLTRV(IEN,"H"))'=""  Q:VAL>RORLTRV(IEN,"H")
"RTN","RORX012A",57,0)
 . S RC=0
"RTN","RORX012A",58,0)
 ;--- Store the result
"RTN","RORX012A",59,0)
 S @ROR8DST@(DATE,NAME,IEN)=$P(RESULT(1),U,3)
"RTN","RORX012A",60,0)
 Q 0
"RTN","RORX012A",61,0)
 ;
"RTN","RORX012A",62,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX012A",63,0)
 ;
"RTN","RORX012A",64,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX012A",65,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX012A",66,0)
 ;
"RTN","RORX012A",67,0)
 ; Return Values:
"RTN","RORX012A",68,0)
 ;       <0  Error code
"RTN","RORX012A",69,0)
 ;        0  Ok
"RTN","RORX012A",70,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX012A",71,0)
 ;
"RTN","RORX012A",72,0)
QUERY(FLAGS,NSPT) ;
"RTN","RORX012A",73,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX012A",74,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX012A",75,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX012A",76,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX012A",77,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX012A",78,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX012A",79,0)
 N RORICN        ; National ICN
"RTN","RORX012A",80,0)
 N RORPACT       ; Patient Care Team PACT
"RTN","RORX012A",81,0)
 N RORPCP        ; Primary Care Provider PCP
"RTN","RORX012A",82,0)
 N RORDAYS       ; Days for Future Appointments  patch 33
"RTN","RORX012A",83,0)
 N RORFUT        ; Future Appointment date
"RTN","RORX012A",84,0)
 ;
"RTN","RORX012A",85,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX012A",86,0)
 N RCC,FLAG
"RTN","RORX012A",87,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX012A",88,0)
 S (CNT,ECNT,NSPT,RC)=0,(SKIPEDT,SKIPSDT)=0
"RTN","RORX012A",89,0)
 ;--- Utilization date range
"RTN","RORX012A",90,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX012A",91,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX012A",92,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX012A",93,0)
 . ;--- Combined date range
"RTN","RORX012A",94,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX012A",95,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX012A",96,0)
 ;--- Number of patients in the registry
"RTN","RORX012A",97,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX012A",98,0)
 ;
"RTN","RORX012A",99,0)
 ;--- Setup the descriptors for callback API's
"RTN","RORX012A",100,0)
 I RORLAB  D
"RTN","RORX012A",101,0)
 . I RORLTST'="*",$D(@RORLTST)<10  S RORLAB=0  Q
"RTN","RORX012A",102,0)
 . S RORLDST("RORCB")="$$LTSCB^RORX012A"
"RTN","RORX012A",103,0)
 . ;--- Labs date range
"RTN","RORX012A",104,0)
 . S LTSDT=$$PARAM^RORTSK01("DATE_RANGE_2","START")\1
"RTN","RORX012A",105,0)
 . S LTEDT=$$PARAM^RORTSK01("DATE_RANGE_2","END")\1
"RTN","RORX012A",106,0)
 . ;--- Combined date range
"RTN","RORX012A",107,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,LTSDT)
"RTN","RORX012A",108,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,LTEDT)
"RTN","RORX012A",109,0)
 . ;--- Shift the Labs end date
"RTN","RORX012A",110,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX012A",111,0)
 I RORPHARM  D
"RTN","RORX012A",112,0)
 . I RORXL'="*",$D(@RORXL)<10  S RORPHARM=0  Q
"RTN","RORX012A",113,0)
 . S RORXDST("RORCB")="$$RXSCB^RORX012A"
"RTN","RORX012A",114,0)
 . S RORXDST("GENERIC")=$$PARAM^RORTSK01("DRUGS","AGGR_GENERIC")
"RTN","RORX012A",115,0)
 . ;--- Combined date range
"RTN","RORX012A",116,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,RORXSDT)
"RTN","RORX012A",117,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,RORXEDT)
"RTN","RORX012A",118,0)
 . ;--- Shift the Meds end date
"RTN","RORX012A",119,0)
 . S RXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX012A",120,0)
 Q:'(RORLAB!RORPHARM) 0
"RTN","RORX012A",121,0)
 ;
"RTN","RORX012A",122,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX012A",123,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX012A",124,0)
 ;
"RTN","RORX012A",125,0)
 ;--- Browse through the registry records
"RTN","RORX012A",126,0)
 S IEN=0
"RTN","RORX012A",127,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX012A",128,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX012A",129,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX012A",130,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX012A",131,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX012A",132,0)
 . ;--- Get patient DFN
"RTN","RORX012A",133,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX012A",134,0)
 . ;check for patient list and quit if not on list
"RTN","RORX012A",135,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX012A",136,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX012A",137,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX012A",138,0)
 . S SKIP=1,UTIL=0
"RTN","RORX012A",139,0)
 . ;--- Check if patient should be filtered because of ICD codes
"RTN","RORX012A",140,0)
 . S RCC=0
"RTN","RORX012A",141,0)
 . I FLAG'="ALL" D
"RTN","RORX012A",142,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX012A",143,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX012A",144,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX012A",145,0)
 . ;
"RTN","RORX012A",146,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX012A",147,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX012A",148,0)
 . ;
"RTN","RORX012A",149,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX012A",150,0)
 . . ;--- Search for pharmacy data
"RTN","RORX012A",151,0)
 . . I RORPHARM  D  Q:RC'>0
"RTN","RORX012A",152,0)
 . . . M RORXDST("RORXGRP")=RORXGRP("C")
"RTN","RORX012A",153,0)
 . . . S RORXDST=$NA(^TMP("RORX012",$J,"PAT",PATIEN,"RX"))
"RTN","RORX012A",154,0)
 . . . K RORXDST("RORUTIL")
"RTN","RORX012A",155,0)
 . . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RXEDT)
"RTN","RORX012A",156,0)
 . . . Q:RC<0
"RTN","RORX012A",157,0)
 . . . ;S:$G(RORXDST("RORUTIL")) UTIL=1
"RTN","RORX012A",158,0)
 . . . I RC>0  S:$D(RORXDST("RORXGRP"))>1 RC=0
"RTN","RORX012A",159,0)
 . . . ;--- Invert the result if the "Did Not" logic was selected
"RTN","RORX012A",160,0)
 . . . I RORPHARM<0  S RC='RC  K @RORXDST
"RTN","RORX012A",161,0)
 . . ;--- Search for Lab data
"RTN","RORX012A",162,0)
 . . I RORLAB  D  Q:RC'>0
"RTN","RORX012A",163,0)
 . . . S RORLDST=$NA(^TMP("RORX012",$J,"PAT",PATIEN,"LR"))
"RTN","RORX012A",164,0)
 . . . K RORLDST("RORUTIL")
"RTN","RORX012A",165,0)
 . . . S RC=$$LTSEARCH^RORUTL10(PATIEN,RORLTST,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX012A",166,0)
 . . . Q:RC<0
"RTN","RORX012A",167,0)
 . . . ;S:$G(RORLDST("RORUTIL")) UTIL=1
"RTN","RORX012A",168,0)
 . . . ;--- Invert the result if the "Did Not" logic was selected
"RTN","RORX012A",169,0)
 . . . S:RORLAB<0 RC='RC
"RTN","RORX012A",170,0)
 . . ;---
"RTN","RORX012A",171,0)
 . . S SKIP=0
"RTN","RORX012A",172,0)
 . ;
"RTN","RORX012A",173,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX012A",174,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX012A",175,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX012A",176,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX012A",177,0)
 . . S:'UTIL SKIP=1
"RTN","RORX012A",178,0)
 . ;
"RTN","RORX012A",179,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX012A",180,0)
 . I SKIP  K ^TMP("RORX012",$J,"PAT",PATIEN)  Q
"RTN","RORX012A",181,0)
 . ;
"RTN","RORX012A",182,0)
 . ;--- Get and store the patient's data
"RTN","RORX012A",183,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX012A",184,0)
 . S RORICN=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX012A",185,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX012A",186,0)
 . S RORPACT=$S($$PARAM^RORTSK01("PATIENTS","PACT"):$$PACT^RORUTL02(PATIEN),1:"")
"RTN","RORX012A",187,0)
 . S RORPCP=$S($$PARAM^RORTSK01("PATIENTS","PCP"):$$PCP^RORUTL02(PATIEN),1:"")
"RTN","RORX012A",188,0)
 . S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE")
"RTN","RORX012A",189,0)
 . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX012A",190,0)
 . ; IF Future Appointment only  Patch 33
"RTN","RORX012A",191,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D
"RTN","RORX012A",192,0)
 . . S RORDAYS=$$PARAM^RORTSK01("OPTIONS","FUT_APPT")
"RTN","RORX012A",193,0)
 . . S RORFUT=$$FUTAPPT^RORUTL02(PATIEN,RORDAYS)
"RTN","RORX012A",194,0)
 . S ^TMP("RORX012",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP_U_RORICN_U_RORPACT_U_RORPCP_U_AGE
"RTN","RORX012A",195,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") S ^TMP("RORX012",$J,"PAT",PATIEN)=^TMP("RORX012",$J,"PAT",PATIEN)_U_RORFUT
"RTN","RORX012A",196,0)
 . S NSPT=NSPT+1
"RTN","RORX012A",197,0)
 ;
"RTN","RORX012A",198,0)
 ;---
"RTN","RORX012A",199,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX012A",200,0)
 ;
"RTN","RORX012A",201,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX012A",202,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX012A",203,0)
 N GRP,IEN,NAME,TMP
"RTN","RORX012A",204,0)
 S ROR8DST("RORUTIL")=1
"RTN","RORX012A",205,0)
 ;=== Check the drug groups
"RTN","RORX012A",206,0)
 S TMP=$$RXGRPCHK^RORXU007(.ROR8DST,+DRUG,RORXL)
"RTN","RORX012A",207,0)
 Q:TMP TMP
"RTN","RORX012A",208,0)
 ;--- Get the drug data
"RTN","RORX012A",209,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX012A",210,0)
 . S IEN=+ROR8DST("RORXGEN"),NAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX012A",211,0)
 E  S IEN=+DRUG,NAME=$P(DRUG,U,2)
"RTN","RORX012A",212,0)
 Q:(IEN'>0)!(NAME="") 1
"RTN","RORX012A",213,0)
 ;--- Output the data
"RTN","RORX012A",214,0)
 S @ROR8DST@(NAME,IEN)=""
"RTN","RORX012A",215,0)
 Q 0
"RTN","RORX012A",216,0)
 ;
"RTN","RORX012A",217,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX012A",218,0)
 ;
"RTN","RORX012A",219,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX012A",220,0)
 ; NSPT          Number of selected patients
"RTN","RORX012A",221,0)
 ;
"RTN","RORX012A",222,0)
 ; Return Values:
"RTN","RORX012A",223,0)
 ;       <0  Error code
"RTN","RORX012A",224,0)
 ;        0  Ok
"RTN","RORX012A",225,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX012A",226,0)
 ;
"RTN","RORX012A",227,0)
STORE(REPORT,NSPT) ;
"RTN","RORX012A",228,0)
 N CNT,DATE,DFN,DOD,ECNT,ICN,IEN,ITEM,LAST4,LTLST,PACT,PCP,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,AGE,AGETYPE
"RTN","RORX012A",229,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX012A",230,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX012A",231,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX012A",232,0)
 ;--- Create lab test list
"RTN","RORX012A",233,0)
 I RORLAB  D  Q:LTLST<0 LTLST
"RTN","RORX012A",234,0)
 . S LTLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,REPORT)
"RTN","RORX012A",235,0)
 . D ADDATTR^RORTSK11(RORTSK,LTLST,"TABLE","LABTESTS")
"RTN","RORX012A",236,0)
 ;--- Create pharmacy list
"RTN","RORX012A",237,0)
 I RORPHARM>0  D  Q:RXLST<0 RXLST
"RTN","RORX012A",238,0)
 . S RXLST=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,REPORT)
"RTN","RORX012A",239,0)
 . D ADDATTR^RORTSK11(RORTSK,RXLST,"TABLE","DRUGS")
"RTN","RORX012A",240,0)
 ;--- Create patient list
"RTN","RORX012A",241,0)
 I (RORLAB<0)!(RORPHARM<0)  D  Q:PTLST<0 PTLST
"RTN","RORX012A",242,0)
 . S PTLST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX012A",243,0)
 . D ADDATTR^RORTSK11(RORTSK,PTLST,"TABLE","PATIENTS")
"RTN","RORX012A",244,0)
 ;---
"RTN","RORX012A",245,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX012A",246,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE")
"RTN","RORX012A",247,0)
 F  S DFN=$O(^TMP("RORX012",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX012A",248,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX012A",249,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX012A",250,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX012",$J,"PAT",DFN))
"RTN","RORX012A",251,0)
 . ;--- Patient's data
"RTN","RORX012A",252,0)
 . S TMP=$G(@NODE)
"RTN","RORX012A",253,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DOD=$P(TMP,U,3),ICN=$P(TMP,U,4),PACT=$P(TMP,U,5),PCP=$P(TMP,U,6),AGE=$P(TMP,U,7)
"RTN","RORX012A",254,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") S RORFUT=$P(TMP,U,8)
"RTN","RORX012A",255,0)
 . ;--- Patient list
"RTN","RORX012A",256,0)
 . S TMP=$S(LTLST<0:1,1:$D(@NODE@("LR"))<10)
"RTN","RORX012A",257,0)
 . I TMP,$S(RXLST<0:1,1:$D(@NODE@("RX"))<10)  D  Q
"RTN","RORX012A",258,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLST,,DFN)
"RTN","RORX012A",259,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",260,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",261,0)
 . . I AGETYPE'="ALL" D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,ITEM,1)
"RTN","RORX012A",262,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",263,0)
 . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX012A",264,0)
 . . I $$PARAM^RORTSK01("PATIENTS","PACT") D ADDVAL^RORTSK11(RORTSK,"PACT",PACT,ITEM,1)
"RTN","RORX012A",265,0)
 . . I $$PARAM^RORTSK01("PATIENTS","PCP") D ADDVAL^RORTSK11(RORTSK,"PCP",PCP,ITEM,1)
"RTN","RORX012A",266,0)
 . . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORFUT,ITEM,1)
"RTN","RORX012A",267,0)
 . . S PTCNT=PTCNT+1
"RTN","RORX012A",268,0)
 . ;--- List of Lab tests
"RTN","RORX012A",269,0)
 . S DATE=""
"RTN","RORX012A",270,0)
 . F  S DATE=$O(@NODE@("LR",DATE))  Q:DATE=""  D
"RTN","RORX012A",271,0)
 . . S NAME=""
"RTN","RORX012A",272,0)
 . . F  S NAME=$O(@NODE@("LR",DATE,NAME))  Q:NAME=""  D
"RTN","RORX012A",273,0)
 . . . S IEN=""
"RTN","RORX012A",274,0)
 . . . F  S IEN=$O(@NODE@("LR",DATE,NAME,IEN))  Q:IEN=""  D
"RTN","RORX012A",275,0)
 . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX012A",276,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",277,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",278,0)
 . . . . I AGETYPE'="ALL" D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,ITEM,1)
"RTN","RORX012A",279,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",280,0)
 . . . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX012A",281,0)
 . . . . I $$PARAM^RORTSK01("PATIENTS","PACT") D ADDVAL^RORTSK11(RORTSK,"PACT",PACT,ITEM,1)
"RTN","RORX012A",282,0)
 . . . . I $$PARAM^RORTSK01("PATIENTS","PCP") D ADDVAL^RORTSK11(RORTSK,"PCP",PCP,ITEM,1)
"RTN","RORX012A",283,0)
 . . . . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORFUT,ITEM,1)
"RTN","RORX012A",284,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",DATE\1,ITEM,1)
"RTN","RORX012A",285,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX012A",286,0)
 . . . . S VAL=$G(@NODE@("LR",DATE,NAME,IEN))
"RTN","RORX012A",287,0)
 . . . . S TMP=$S($$NUMERIC^RORUTL05(VAL):3,1:1)
"RTN","RORX012A",288,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",VAL,ITEM,TMP)
"RTN","RORX012A",289,0)
 . ;--- List of drugs
"RTN","RORX012A",290,0)
 . S NAME=""
"RTN","RORX012A",291,0)
 . F  S NAME=$O(@NODE@("RX",NAME))  Q:NAME=""  D
"RTN","RORX012A",292,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,RXLST,,DFN)
"RTN","RORX012A",293,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",294,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",295,0)
 . . I AGETYPE'="ALL" D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,ITEM,1)
"RTN","RORX012A",296,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",297,0)
 . . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX012A",298,0)
 . . I $$PARAM^RORTSK01("PATIENTS","PACT") D ADDVAL^RORTSK11(RORTSK,"PACT",PACT,ITEM,1)
"RTN","RORX012A",299,0)
 . . I $$PARAM^RORTSK01("PATIENTS","PCP") D ADDVAL^RORTSK11(RORTSK,"PCP",PCP,ITEM,1)
"RTN","RORX012A",300,0)
 . . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORFUT,ITEM,1)
"RTN","RORX012A",301,0)
 . . D ADDVAL^RORTSK11(RORTSK,"RXNAME",NAME,ITEM,1)
"RTN","RORX012A",302,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX012A",303,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX012A",304,0)
 ;---
"RTN","RORX012A",305,0)
 Q ECNT
"RTN","RORX018")
0^4^B174478547^B166229893
"RTN","RORX018",1,0)
RORX018 ;BPOIFO/ACS - BMI BY RANGE REPORT ;11/1/09
"RTN","RORX018",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,19,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX018",3,0)
 ;
"RTN","RORX018",4,0)
 ;
"RTN","RORX018",5,0)
 ; This routine uses the following IAs:
"RTN","RORX018",6,0)
 ;
"RTN","RORX018",7,0)
 ; #4290  ^PXRMINDX(120.5 (controlled)
"RTN","RORX018",8,0)
 ; #3647   $$EN^GMVPXRM (controlled)
"RTN","RORX018",9,0)
 ; #5047   $$GETIEN^GMVGETVT (supported)
"RTN","RORX018",10,0)
 ;
"RTN","RORX018",11,0)
 ;******************************************************************************
"RTN","RORX018",12,0)
 ;******************************************************************************
"RTN","RORX018",13,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX018",14,0)
 ;        
"RTN","RORX018",15,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX018",16,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX018",17,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX018",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX018",19,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX018",20,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX018",21,0)
 ;ROR*1.5*19   FEB  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX018",22,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Add ICN column if Additional Identifier
"RTN","RORX018",23,0)
 ;                                       requested.
"RTN","RORX018",24,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional
"RTN","RORX018",25,0)
 ;                                       identifiers. 
"RTN","RORX018",26,0)
 ;                                      
"RTN","RORX018",27,0)
 ;******************************************************************************
"RTN","RORX018",28,0)
 ;******************************************************************************
"RTN","RORX018",29,0)
 Q
"RTN","RORX018",30,0)
 ;*****************************************************************************
"RTN","RORX018",31,0)
 ;COMPILE THE "BMI BY RANGE" REPORT
"RTN","RORX018",32,0)
 ;REPORT CODE: 018
"RTN","RORX018",33,0)
 ;
"RTN","RORX018",34,0)
 ;Called by entry "BMI by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX018",35,0)
 ;
"RTN","RORX018",36,0)
 ;INPUT
"RTN","RORX018",37,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX018",38,0)
 ;
"RTN","RORX018",39,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX018",40,0)
 ;  scores, BMI range from 30 to 45:
"RTN","RORX018",41,0)
 ;
"RTN","RORX018",42,0)
 ;  RORTSK=nnn   (task number)
"RTN","RORX018",43,0)
 ;  RORTSK("EP")="$$BMIRANGE^RORX018"
"RTN","RORX018",44,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","TYPE")=ALL
"RTN","RORX018",45,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","TYPE")=DOB
"RTN","RORX018",46,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","END")=3031231
"RTN","RORX018",47,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","START")=3030101
"RTN","RORX018",48,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","TYPE")=AGE
"RTN","RORX018",49,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","END")=3031231
"RTN","RORX018",50,0)
 ;  RORTSK("PARAMS","AGE_RANGE","A","START")=3030101
"RTN","RORX018",51,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX018",52,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX018",53,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX018",54,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX018",55,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=45
"RTN","RORX018",56,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=30
"RTN","RORX018",57,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX018",58,0)
 ;  RORTSK("PARAMS","OPTIONS","A","FUT_APPT")=365   PATCH 33
"RTN","RORX018",59,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",60,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX018",61,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX018",62,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX018",63,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX018",64,0)
 ;
"RTN","RORX018",65,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX018",66,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",67,0)
 ;  is replaced with:  
"RTN","RORX018",68,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX018",69,0)
 ;
"RTN","RORX018",70,0)
 ;OUTPUT
"RTN","RORX018",71,0)
 ;  <0  Error code
"RTN","RORX018",72,0)
 ;   0  Ok
"RTN","RORX018",73,0)
 ;*****************************************************************************
"RTN","RORX018",74,0)
BMIRANGE(RORTSK) ;
"RTN","RORX018",75,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX018",76,0)
 N RORREG        ; Registry IEN
"RTN","RORX018",77,0)
 N RORSDT        ; report start date
"RTN","RORX018",78,0)
 N ROREDT        ; report end date
"RTN","RORX018",79,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX018",80,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX018",81,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX018",82,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX018",83,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX018",84,0)
 ;
"RTN","RORX018",85,0)
 N REPORT,PARAMS,SFLAGS,RC,CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT,RORBODY,RORPTN
"RTN","RORX018",86,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX018",87,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX018",88,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX018",89,0)
 Q:REPORT<0 REPORT
"RTN","RORX018",90,0)
 ;
"RTN","RORX018",91,0)
 ;--- Get registry IEN
"RTN","RORX018",92,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX018",93,0)
 ;
"RTN","RORX018",94,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX018",95,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX018",96,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX018",97,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX018",98,0)
 ;
"RTN","RORX018",99,0)
 ;--- Add range parameters to output
"RTN","RORX018",100,0)
 S RC=$$PARAMS^RORX018A(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX018",101,0)
 ;
"RTN","RORX018",102,0)
 ;--- Put report header data into output:
"RTN","RORX018",103,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX018",104,0)
 ;last data extraction date
"RTN","RORX018",105,0)
 S RC=$$HEADER(REPORT) Q:RC<0 RC
"RTN","RORX018",106,0)
 ;
"RTN","RORX018",107,0)
 ;--- Set the number of BMI ranges and initialize their values to 0
"RTN","RORX018",108,0)
 S RORDATA("RCNT")=6 D INIT(.RORDATA)
"RTN","RORX018",109,0)
 ;
"RTN","RORX018",110,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT and WEIGHT
"RTN","RORX018",111,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX018",112,0)
 S RORDATA("WGTP")=$$GETIEN^GMVGETVT("WEIGHT",1)
"RTN","RORX018",113,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX018",114,0)
 I '$G(RORDATA("WGTP")) Q -1
"RTN","RORX018",115,0)
 ;
"RTN","RORX018",116,0)
 ;--- 'Most recent' vs. max date requested
"RTN","RORX018",117,0)
 S RORDATA("DATE")=0
"RTN","RORX018",118,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORDATA("DATE")=DT_.9
"RTN","RORX018",119,0)
 I '$G(RORDATA("DATE")) S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")_.9
"RTN","RORX018",120,0)
 ;
"RTN","RORX018",121,0)
 ;--- Summary vs. complete report requested
"RTN","RORX018",122,0)
 S RORDATA("SUMMARY")=0
"RTN","RORX018",123,0)
 I $$PARAM^RORTSK01("OPTIONS","SUMMARY") S RORDATA("SUMMARY")=1
"RTN","RORX018",124,0)
 ;
"RTN","RORX018",125,0)
 ;--- Future Appointments   patch 33
"RTN","RORX018",126,0)
 S RORDATA("DAYS")=0
"RTN","RORX018",127,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") S RORDATA("DAYS")=$$PARAM^RORTSK01("OPTIONS","FUT_APPT")
"RTN","RORX018",128,0)
 ;
"RTN","RORX018",129,0)
 ;--- Get BMI range requested (there is currently only 1 BMI test)
"RTN","RORX018",130,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX018",131,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low BMI range
"RTN","RORX018",132,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high BMI range
"RTN","RORX018",133,0)
 ;
"RTN","RORX018",134,0)
 ;--- Create 'patients' table
"RTN","RORX018",135,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX018",136,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX018",137,0)
 ;
"RTN","RORX018",138,0)
 ;--- Get utilization date range (always sent in)
"RTN","RORX018",139,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX018",140,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX018",141,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX018",142,0)
 ; Combined date range
"RTN","RORX018",143,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX018",144,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX018",145,0)
 ;
"RTN","RORX018",146,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX018",147,0)
 ;task progress percentage - shown on the GUI screen
"RTN","RORX018",148,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG) S:RORPTN<0 RORPTN=0
"RTN","RORX018",149,0)
 ;
"RTN","RORX018",150,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX018",151,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX018",152,0)
 ;
"RTN","RORX018",153,0)
 ;--- Get registry records
"RTN","RORX018",154,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX018",155,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX018",156,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX018",157,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX018",158,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX018",159,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX018",160,0)
 . S CNT=CNT+1
"RTN","RORX018",161,0)
 . ;--- Get patient DFN
"RTN","RORX018",162,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX018",163,0)
 . ;check for patient list and quit if not on list
"RTN","RORX018",164,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX018",165,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX018",166,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX018",167,0)
 . ;--- Check if patient has passed the ICD filter
"RTN","RORX018",168,0)
 . S RCC=0
"RTN","RORX018",169,0)
 . I FLAG'="ALL" D
"RTN","RORX018",170,0)
 . . S RCC=$$ICD^RORXU010(DFN)
"RTN","RORX018",171,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX018",172,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX018",173,0)
 . ;
"RTN","RORX018",174,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX018",175,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX018",176,0)
 . ;
"RTN","RORX018",177,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX018",178,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX018",179,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX018",180,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX018",181,0)
 .. S:'UTIL SKIP=1
"RTN","RORX018",182,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX018",183,0)
 . Q:$G(SKIP)
"RTN","RORX018",184,0)
 . ;
"RTN","RORX018",185,0)
 . ;--- For each patient, process the registry record
"RTN","RORX018",186,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX018",187,0)
 ;
"RTN","RORX018",188,0)
 ;--- Always create BMI summary report
"RTN","RORX018",189,0)
 S RC=$$SUMMARY(RORTSK,REPORT,.RORDATA) Q:RC<0 RC
"RTN","RORX018",190,0)
 K ^TMP("RORX018",$J)
"RTN","RORX018",191,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX018",192,0)
 ;
"RTN","RORX018",193,0)
 ;*****************************************************************************
"RTN","RORX018",194,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX018",195,0)
 ;
"RTN","RORX018",196,0)
 ;INPUT
"RTN","RORX018",197,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",198,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",199,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",200,0)
 ;
"RTN","RORX018",201,0)
 ;OUTPUT
"RTN","RORX018",202,0)
 ;  1        ok
"RTN","RORX018",203,0)
 ; <0        error
"RTN","RORX018",204,0)
 ;*****************************************************************************
"RTN","RORX018",205,0)
PATIENT(DFN,PTAG,RORDATA) ;
"RTN","RORX018",206,0)
 I $$CALCBMI(DFN,PTAG,.RORDATA)<0 Q 0  ;calculate the BMI
"RTN","RORX018",207,0)
 I '$$INRANGE(.RORDATA) Q 0 ;if range sent, BMI must be in the requested range
"RTN","RORX018",208,0)
 D BMICAT(.RORDATA) ;add 1 to appropriate category count
"RTN","RORX018",209,0)
 Q:RORDATA("SUMMARY") 1  ;stop if only the 'summary' report was requested
"RTN","RORX018",210,0)
 ;
"RTN","RORX018",211,0)
 ;--- Get patient data and put into the report
"RTN","RORX018",212,0)
 N VADM,VA,RORDOD,BTAG,HTAG,WTAG,AGE,AGETYPE
"RTN","RORX018",213,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX018",214,0)
 ;--- The <PATIENT> tag
"RTN","RORX018",215,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX018",216,0)
 I PTAG<0 Q PTAG
"RTN","RORX018",217,0)
 ;
"RTN","RORX018",218,0)
 ;
"RTN","RORX018",219,0)
 ;--- Patient Name
"RTN","RORX018",220,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX018",221,0)
 ;
"RTN","RORX018",222,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX018",223,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX018",224,0)
 ;
"RTN","RORX018",225,0)
 ;--- Patient age/DOB
"RTN","RORX018",226,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") I AGETYPE'="ALL" D
"RTN","RORX018",227,0)
 . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX018",228,0)
 . D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,PTAG,1)
"RTN","RORX018",229,0)
 ;
"RTN","RORX018",230,0)
 ;--- Date of death
"RTN","RORX018",231,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX018",232,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX018",233,0)
 ;--- 'BMIDATA' tag
"RTN","RORX018",234,0)
 S BTAG=$$ADDVAL^RORTSK11(RORTSK,"BMIDATA",,PTAG)
"RTN","RORX018",235,0)
 Q:BTAG<0 BTAG
"RTN","RORX018",236,0)
 ;--- Height tag
"RTN","RORX018",237,0)
 S HTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,BTAG)
"RTN","RORX018",238,0)
 Q:HTAG<0 HTAG
"RTN","RORX018",239,0)
 ;---  Date Height Taken
"RTN","RORX018",240,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),HTAG)
"RTN","RORX018",241,0)
 ;---  Height value
"RTN","RORX018",242,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),HTAG)
"RTN","RORX018",243,0)
 ;---  Weight tag
"RTN","RORX018",244,0)
 S WTAG=$$ADDVAL^RORTSK11(RORTSK,"WEIGHT",,BTAG)
"RTN","RORX018",245,0)
 Q:WTAG<0 WTAG
"RTN","RORX018",246,0)
 ;---  Date Weight Taken
"RTN","RORX018",247,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("WDATE")),WTAG)
"RTN","RORX018",248,0)
 ;---  Weight value
"RTN","RORX018",249,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("WGT")),WTAG)
"RTN","RORX018",250,0)
 ;---  Calculated BMI value goes on PATIENT tag
"RTN","RORX018",251,0)
 D ADDVAL^RORTSK11(RORTSK,"BMI",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX018",252,0)
 ; --- ICN if selected must be last column on report
"RTN","RORX018",253,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D ICNDATA^RORXU006(.RORTSK,DFN,PTAG)
"RTN","RORX018",254,0)
 ;
"RTN","RORX018",255,0)
 ; --- PACT if selected may be one of the last columns on report
"RTN","RORX018",256,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") D PACTDATA^RORXU006(.RORTSK,DFN,PTAG)
"RTN","RORX018",257,0)
 ;
"RTN","RORX018",258,0)
 ; --- PCP if selected may be one of the last columns on report
"RTN","RORX018",259,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") D PCPDATA^RORXU006(.RORTSK,DFN,PTAG)
"RTN","RORX018",260,0)
 ;
"RTN","RORX018",261,0)
 ;--- If only patients with future appointments   ; PATCH 33
"RTN","RORX018",262,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D FUTAPPT^RORXU006(.RORTSK,DFN,RORDATA("DAYS"),PTAG)
"RTN","RORX018",263,0)
 Q 1
"RTN","RORX018",264,0)
 ;
"RTN","RORX018",265,0)
 ;*****************************************************************************
"RTN","RORX018",266,0)
 ;CALCULATE THE BMI FOR CURRENT PATIENT
"RTN","RORX018",267,0)
 ;
"RTN","RORX018",268,0)
 ;INPUT
"RTN","RORX018",269,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",270,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",271,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",272,0)
 ;  
"RTN","RORX018",273,0)
 ;OUTPUT
"RTN","RORX018",274,0)
 ;  1        BMI calculated successfully
"RTN","RORX018",275,0)
 ; -1        Patient does not have vital measurements or BMI is out of range
"RTN","RORX018",276,0)
 ;  RORDATA  Array with ROR data:
"RTN","RORX018",277,0)
 ;           RORDATA("WGT")   - weight measurement
"RTN","RORX018",278,0)
 ;           RORDATA("WDATE") - date of weight measurement
"RTN","RORX018",279,0)
 ;           RORDATA("HGT")   - height measurement
"RTN","RORX018",280,0)
 ;           RORDATA("HDATE") - date of height measurement
"RTN","RORX018",281,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",282,0)
 ;*****************************************************************************
"RTN","RORX018",283,0)
CALCBMI(DFN,PTAG,RORDATA) ;
"RTN","RORX018",284,0)
 ;-- get vital measurements for BMI calculation
"RTN","RORX018",285,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX018",286,0)
 N RORDATE,I,RORVMDT,RORVMIEN,RORARY,TMP1,TMP2,TMP3
"RTN","RORX018",287,0)
 K RORDATA("HGT"),RORDATA("WGT"),RORDATA("SCORE",1)
"RTN","RORX018",288,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX018",289,0)
 F I="HGTP","WGTP" D  ;height and weight pointers
"RTN","RORX018",290,0)
 . ;get vital measurement date and IEN
"RTN","RORX018",291,0)
 . S RORVMDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORDATE),-1) ;vm date
"RTN","RORX018",292,0)
 . Q:$G(RORVMDT)=""
"RTN","RORX018",293,0)
 . S RORVMIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORVMDT,0)) ;vm IEN
"RTN","RORX018",294,0)
 . Q:$G(RORVMIEN)=""
"RTN","RORX018",295,0)
 . ;call API to get patient's vital measurement value
"RTN","RORX018",296,0)
 . K RORARY D EN^GMVPXRM(.RORARY,RORVMIEN,"I")
"RTN","RORX018",297,0)
 . ; set values into RORDATA("WGT"), ("HGT"), ("WDATE"), & ("HDATE")
"RTN","RORX018",298,0)
 . S RORDATA($E(I,1,3))=$G(RORARY(7)),RORDATA($E(I,1)_"DATE")=$P(RORVMDT,".",1)
"RTN","RORX018",299,0)
 ;quit if height or weight is not > 0
"RTN","RORX018",300,0)
 I (($G(RORDATA("HGT"))'>0)!($G(RORDATA("WGT"))'>0)) Q -1
"RTN","RORX018",301,0)
 ;strip out characters "IN", ",E"
"RTN","RORX018",302,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX018",303,0)
 ;mark as 'invalid' if height not between 36 and 96 inches
"RTN","RORX018",304,0)
 I ((RORDATA("HGT")<36)!(RORDATA("HGT")>96)) D  Q 1
"RTN","RORX018",305,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",306,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",307,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX018",308,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D  Q 1
"RTN","RORX018",309,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",310,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",311,0)
 ;
"RTN","RORX018",312,0)
 ;BMI calculation: (weight * 703) / (height*height)
"RTN","RORX018",313,0)
 S TMP1=703*($G(RORDATA("WGT")))
"RTN","RORX018",314,0)
 S TMP2=$G(RORDATA("HGT"))*($G(RORDATA("HGT")))
"RTN","RORX018",315,0)
 S TMP3=TMP1/TMP2
"RTN","RORX018",316,0)
 S RORDATA("SCORE",1)=$J(TMP3,0,1) ;round to 1 decimal point
"RTN","RORX018",317,0)
 Q 1
"RTN","RORX018",318,0)
 ;
"RTN","RORX018",319,0)
 ;************************************************************************
"RTN","RORX018",320,0)
 ;DETERMINE IF THE SCORE IS WITHIN THE REQUESTED RANGE
"RTN","RORX018",321,0)
 ;
"RTN","RORX018",322,0)
 ;INPUT:
"RTN","RORX018",323,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX018",324,0)
 ;
"RTN","RORX018",325,0)
 ;OUTPUT:
"RTN","RORX018",326,0)
 ;  1  computed test score in range
"RTN","RORX018",327,0)
 ;  0  computed test score not in range
"RTN","RORX018",328,0)
 ;************************************************************************
"RTN","RORX018",329,0)
INRANGE(RORDATA) ;
"RTN","RORX018",330,0)
 ;if range exists for the test, and any result is considered 'invalid',
"RTN","RORX018",331,0)
 ;then skip the range check and exclude data from report
"RTN","RORX018",332,0)
 I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX018",333,0)
 ;if range does not exist for test, and any result is considered 'invalid',
"RTN","RORX018",334,0)
 ;then skip the range check and include data in the report
"RTN","RORX018",335,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX018",336,0)
 ;
"RTN","RORX018",337,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX018",338,0)
 S I=0
"RTN","RORX018",339,0)
 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX018",340,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX018",341,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX018",342,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX018",343,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX018",344,0)
 Q RETURN
"RTN","RORX018",345,0)
 ;
"RTN","RORX018",346,0)
 ;*****************************************************************************
"RTN","RORX018",347,0)
 ;ADD 1 TO APPROPRIATE BMI CATEGORY
"RTN","RORX018",348,0)
 ;
"RTN","RORX018",349,0)
 ;INPUT
"RTN","RORX018",350,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",351,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",352,0)
 ;OUTPUT
"RTN","RORX018",353,0)
 ;  RORDATA("NP",N) - incremented by 1 if BMI in Nth range
"RTN","RORX018",354,0)
 ;           
"RTN","RORX018",355,0)
 ;*****************************************************************************
"RTN","RORX018",356,0)
BMICAT(RORDATA) ;
"RTN","RORX018",357,0)
 I '$G(RORDATA("SCORE",1)) Q
"RTN","RORX018",358,0)
 I $G(RORDATA("SCORE",1))<18.5 S RORDATA("NP",1)=$G(RORDATA("NP",1))+1 Q
"RTN","RORX018",359,0)
 I $G(RORDATA("SCORE",1))<25 S RORDATA("NP",2)=$G(RORDATA("NP",2))+1 Q
"RTN","RORX018",360,0)
 I $G(RORDATA("SCORE",1))<30 S RORDATA("NP",3)=$G(RORDATA("NP",3))+1 Q
"RTN","RORX018",361,0)
 I $G(RORDATA("SCORE",1))<35 S RORDATA("NP",4)=$G(RORDATA("NP",4))+1 Q
"RTN","RORX018",362,0)
 I $G(RORDATA("SCORE",1))<40 S RORDATA("NP",5)=$G(RORDATA("NP",5))+1 Q
"RTN","RORX018",363,0)
 I $G(RORDATA("SCORE",1))>39 S RORDATA("NP",6)=$G(RORDATA("NP",6))+1 Q
"RTN","RORX018",364,0)
 Q
"RTN","RORX018",365,0)
 ;
"RTN","RORX018",366,0)
 ;*****************************************************************************
"RTN","RORX018",367,0)
 ;ADD THE SUMMARY DATA TO THE REPORT
"RTN","RORX018",368,0)
 ;
"RTN","RORX018",369,0)
 ;INPUT
"RTN","RORX018",370,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX018",371,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX018",372,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX018",373,0)
 ;           RORDATA("NP",N) - total count of patients in Nth range
"RTN","RORX018",374,0)
 ;
"RTN","RORX018",375,0)
 ;OUTPUT
"RTN","RORX018",376,0)
 ;  DATA     'Data' XML tag number or error code
"RTN","RORX018",377,0)
 ;*****************************************************************************
"RTN","RORX018",378,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX018",379,0)
 N SUMMARY,I,STAG,RORCATNUM,RORNAME,RORRANGE
"RTN","RORX018",380,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX018",381,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX018",382,0)
 ;add data for the summary entries
"RTN","RORX018",383,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX018",384,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX018",385,0)
 . Q:STAG<0
"RTN","RORX018",386,0)
 . ;get each value
"RTN","RORX018",387,0)
 . S RORCATNUM="S"_I S RORNAME=$P($T(@RORCATNUM),";;",2)
"RTN","RORX018",388,0)
 . S RORRANGE=$P($T(@RORCATNUM),";;",3)
"RTN","RORX018",389,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX018",390,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX018",391,0)
 . D ADDVAL^RORTSK11(RORTSK,"NP",$G(RORDATA("NP",I)),STAG) ;count
"RTN","RORX018",392,0)
 Q STAG
"RTN","RORX018",393,0)
 ;
"RTN","RORX018",394,0)
 ;*****************************************************************************
"RTN","RORX018",395,0)
 ;RETURN RANGE TEXT
"RTN","RORX018",396,0)
 ;
"RTN","RORX018",397,0)
 ; GRC   Test ID
"RTN","RORX018",398,0)
 ;
"RTN","RORX018",399,0)
 ; Return Values:
"RTN","RORX018",400,0)
 ;       Description - <range>
"RTN","RORX018",401,0)
 ;*****************************************************************************
"RTN","RORX018",402,0)
RTEXT(GRC) ;
"RTN","RORX018",403,0)
 N RANGE,TMP
"RTN","RORX018",404,0)
 S RANGE=""
"RTN","RORX018",405,0)
 ;--- Range
"RTN","RORX018",406,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX018",407,0)
 . ;--- Low
"RTN","RORX018",408,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX018",409,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX018",410,0)
 . ;--- High
"RTN","RORX018",411,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX018",412,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX018",413,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX018",414,0)
 ;--- Description
"RTN","RORX018",415,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX018",416,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX018",417,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX018",418,0)
 ;
"RTN","RORX018",419,0)
 ;*****************************************************************************
"RTN","RORX018",420,0)
 ;ADD THE HEADERS TO THE REPORT
"RTN","RORX018",421,0)
 ;
"RTN","RORX018",422,0)
 ;INPUT
"RTN","RORX018",423,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX018",424,0)
 ;
"RTN","RORX018",425,0)
 ;OUTPUT
"RTN","RORX018",426,0)
 ;  <0      error
"RTN","RORX018",427,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX018",428,0)
 ;*****************************************************************************
"RTN","RORX018",429,0)
HEADER(PARTAG) ;
"RTN","RORX018",430,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,DOD,VITAL,DATE,RESULT,BMI,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX018",431,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,DOD,VITAL,DATE,RESULT,BMI,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX018",432,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VITAL,DATE,RESULT,BMI,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX018",433,0)
 ;
"RTN","RORX018",434,0)
 N HEADER,RC
"RTN","RORX018",435,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX018",436,0)
 ;last registry update, and last data extraction.
"RTN","RORX018",437,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX018",438,0)
 Q:HEADER<0 HEADER
"RTN","RORX018",439,0)
 ;automatically build the table defintion(s) listed under the header tag above
"RTN","RORX018",440,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX018",HEADER)
"RTN","RORX018",441,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX018",442,0)
 ;
"RTN","RORX018",443,0)
 ;*****************************************************************************
"RTN","RORX018",444,0)
 ;INITIALIZE THE NUMBER OF PATIENTS IN EACH CATEGORY TO 0
"RTN","RORX018",445,0)
 ;
"RTN","RORX018",446,0)
 ;INPUT
"RTN","RORX018",447,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",448,0)
 ;           RORDATA("RCNT") Number of categories to initialize
"RTN","RORX018",449,0)
 ;*****************************************************************************
"RTN","RORX018",450,0)
INIT(RORDATA) ;
"RTN","RORX018",451,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX018",452,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX018",453,0)
 . S RORDATA("NP",I)=0
"RTN","RORX018",454,0)
 Q
"RTN","RORX018",455,0)
 ;
"RTN","RORX018",456,0)
 ;*****************************************************************************
"RTN","RORX018",457,0)
 ;BMI Categories and Values for the summary table.
"RTN","RORX018",458,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX018",459,0)
 ;*****************************************************************************
"RTN","RORX018",460,0)
S1 ;;Underweight;;<18.5
"RTN","RORX018",461,0)
S2 ;;Normal weight;;18.5-24.9
"RTN","RORX018",462,0)
S3 ;;Overweight;;25.0-29.99
"RTN","RORX018",463,0)
S4 ;;Class I Obesity;;30.0-34.9
"RTN","RORX018",464,0)
S5 ;;Class II Obesity;;35-39.9
"RTN","RORX018",465,0)
S6 ;;Class III Obesity;;>=40
"RTN","RORX018A")
0^5^B2762309^B2762309
"RTN","RORX018A",1,0)
RORX018A ;BPOIFO/SJA - BMI BY RANGE REPORT (CONT.) ;07/26/17
"RTN","RORX018A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**31,33**;Feb 17, 2006;Build 81
"RTN","RORX018A",3,0)
 ;
"RTN","RORX018A",4,0)
 ;
"RTN","RORX018A",5,0)
 ;OUTPUT THE REPORT 'RANGE' PARAMETERS
"RTN","RORX018A",6,0)
 ;
"RTN","RORX018A",7,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX018A",8,0)
 ;
"RTN","RORX018A",9,0)
 ; Return Values:
"RTN","RORX018A",10,0)
 ;       <0  Error code
"RTN","RORX018A",11,0)
 ;        0  Ok
"RTN","RORX018A",12,0)
 ;*****************************************************************************
"RTN","RORX018A",13,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX018A",14,0)
 N PARAMS,TMP,RC S RC=0
"RTN","RORX018A",15,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX018A",16,0)
 ;--- Lab test ranges
"RTN","RORX018A",17,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX018A",18,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX018A",19,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX018A",20,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX018A",21,0)
 . S (GRC,RC)=0
"RTN","RORX018A",22,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX018A",23,0)
 . . S RANGE=0,TMP=$$RTEXT^RORX018(GRC)
"RTN","RORX018A",24,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",TMP,RTAG)
"RTN","RORX018A",25,0)
 . . I ELEMENT<0  S RC=ELEMENT  Q
"RTN","RORX018A",26,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX018A",27,0)
 . . ;--- Process the range values
"RTN","RORX018A",28,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX018A",29,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018A",30,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX018A",31,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX018A",32,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018A",33,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX018A",34,0)
 . . I RANGE D
"RTN","RORX018A",35,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX018A",36,0)
 . . . S RORDATA("RANGE")=1 ;range exists
"RTN","RORX018A",37,0)
 ;--- Success
"RTN","RORX018A",38,0)
 Q RC
"RTN","RORX018A",39,0)
 ;
"RTN","RORX019")
0^15^B222078560^B212873345
"RTN","RORX019",1,0)
RORX019 ;BPOIFO/ACS - LIVER SCORE BY RANGE ;5/18/11 12:39pm
"RTN","RORX019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14,15,19,21,26,31,33**;Feb 17, 2006;Build 81
"RTN","RORX019",3,0)
 ;
"RTN","RORX019",4,0)
 ;******************************************************************************
"RTN","RORX019",5,0)
 ;******************************************************************************
"RTN","RORX019",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019",7,0)
 ;        
"RTN","RORX019",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019",10,0)
 ;ROR*1.5*10   MAR 2010    A SAUNDERS   Routine created
"RTN","RORX019",11,0)
 ;ROR*1.5*13   DEC 2010    A SAUNDERS   User can select specific patients,
"RTN","RORX019",12,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX019",13,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX019",14,0)
 ;ROR*1.5*14   APR 2011    A SAUNDERS   Added APRI and FIB4 scores.
"RTN","RORX019",15,0)
 ;ROR*1.5*15   MAY 2011    C RAY        Modified to exclude null tests
"RTN","RORX019",16,0)
 ;ROR*1.5*19   FEB 2012    J SCOTT      Support for ICD-10 Coding System
"RTN","RORX019",17,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX019",18,0)
 ;                                      additional identifier option selected
"RTN","RORX019",19,0)
 ;ROR*1.5*26   MAY 2015    T KOPP       Set up LIVPARAM so it can be called
"RTN","RORX019",20,0)
 ;                                      from other entry points/reports
"RTN","RORX019",21,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT ,PCP,and AGE/DOB as additional
"RTN","RORX019",22,0)
 ;                                      identifiers.
"RTN","RORX019",23,0)
 ;ROR*1.5*33   MAY 2017    F TRAXLER    Adding FUT_APPT as additional identifier
"RTN","RORX019",24,0)
 ;******************************************************************************
"RTN","RORX019",25,0)
 ;******************************************************************************
"RTN","RORX019",26,0)
 Q
"RTN","RORX019",27,0)
 ;************************************************************************
"RTN","RORX019",28,0)
 ;COMPILE THE "LIVER SCORE BY RANGE" REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",29,0)
 ;REPORT CODE: 019
"RTN","RORX019",30,0)
 ;
"RTN","RORX019",31,0)
 ;Called by entry "Liver Score by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX019",32,0)
 ;
"RTN","RORX019",33,0)
 ;INPUT
"RTN","RORX019",34,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX019",35,0)
 ;
"RTN","RORX019",36,0)
 ;
"RTN","RORX019",37,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX019",38,0)
 ;  scores, MELD range from 10 to 30, MELD Na range from 20 to 50:
"RTN","RORX019",39,0)
 ;  
"RTN","RORX019",40,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX019",41,0)
 ;  RORTSK("EP")="$$MLDRANGE^RORX019"
"RTN","RORX019",42,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX019",43,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX019",44,0)
 ;  RORTSK("PARAMS","ICDFILT","A","FILTER")="ALL"
"RTN","RORX019",45,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX019",46,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=30
"RTN","RORX019",47,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=10
"RTN","RORX019",48,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX019",49,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=50
"RTN","RORX019",50,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=20
"RTN","RORX019",51,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX019",52,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",53,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX019",54,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX019",55,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX019",56,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX019",57,0)
 ;  
"RTN","RORX019",58,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX019",59,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",60,0)
 ;     is replaced with:  
"RTN","RORX019",61,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX019",62,0)
 ;
"RTN","RORX019",63,0)
 ;
"RTN","RORX019",64,0)
 ;OUTPUT
"RTN","RORX019",65,0)
 ;  <0  Error code
"RTN","RORX019",66,0)
 ;   0  Ok
"RTN","RORX019",67,0)
 ;************************************************************************
"RTN","RORX019",68,0)
MLDRANGE(RORTSK) ;
"RTN","RORX019",69,0)
 N RORREG        ; Registry IEN
"RTN","RORX019",70,0)
 N RORSDT        ; report start date
"RTN","RORX019",71,0)
 N ROREDT        ; report end date
"RTN","RORX019",72,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX019",73,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX019",74,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX019",75,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX019",76,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX019",77,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX019",78,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX019",79,0)
 ;
"RTN","RORX019",80,0)
 N REPORT,RC,I,TMP,SFLAGS,PARAMS
"RTN","RORX019",81,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX019",82,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX019",83,0)
 Q:REPORT<0 REPORT
"RTN","RORX019",84,0)
 ;
"RTN","RORX019",85,0)
 ;--- Get registry IEN
"RTN","RORX019",86,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX019",87,0)
 ;
"RTN","RORX019",88,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX019",89,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX019",90,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX019",91,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX019",92,0)
 ;
"RTN","RORX019",93,0)
 ;--- Add range parameters to output
"RTN","RORX019",94,0)
 S RC=$$PARAMS^RORX019A(PARAMS,.RORDATA,.RORTSK) Q:RC<0 RC
"RTN","RORX019",95,0)
 ;
"RTN","RORX019",96,0)
 ;--- Get ULNAST value for calculations
"RTN","RORX019",97,0)
 I $D(RORTSK("PARAMS","ULNAST")) S RORDATA("ULNAST")=$G(RORTSK("PARAMS","ULNAST"))
"RTN","RORX019",98,0)
 ;
"RTN","RORX019",99,0)
 ;--- Put report header data into output:
"RTN","RORX019",100,0)
 ;report creation date, task number, last registry update date, last
"RTN","RORX019",101,0)
 ;data extraction date, and ULNAST if present, liver score by range
"RTN","RORX019",102,0)
 S RC=$$HEADER(REPORT,PARAMS) Q:RC<0 RC
"RTN","RORX019",103,0)
 ;
"RTN","RORX019",104,0)
 D LIVPARAM(.RORDATA,.RORTSK,.RORLC)
"RTN","RORX019",105,0)
 ;
"RTN","RORX019",106,0)
 ;--- Create 'patients' table
"RTN","RORX019",107,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX019",108,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX019",109,0)
 ;
"RTN","RORX019",110,0)
 ;--- Check utilization
"RTN","RORX019",111,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX019",112,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX019",113,0)
 ; Utilization date range is always sent
"RTN","RORX019",114,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX019",115,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX019",116,0)
 ; Combined date range
"RTN","RORX019",117,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX019",118,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX019",119,0)
 ;
"RTN","RORX019",120,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX019",121,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX019",122,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX019",123,0)
 ;
"RTN","RORX019",124,0)
 ;
"RTN","RORX019",125,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX019",126,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX019",127,0)
 ;
"RTN","RORX019",128,0)
 ;--- Get registry records
"RTN","RORX019",129,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX019",130,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX019",131,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX019",132,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX019",133,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX019",134,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX019",135,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX019",136,0)
 . S CNT=CNT+1
"RTN","RORX019",137,0)
 . ;--- Get patient DFN
"RTN","RORX019",138,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX019",139,0)
 . ;check for patient list and quit if not on list
"RTN","RORX019",140,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX019",141,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX019",142,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX019",143,0)
 . ;--- Check if patient has passed the ICD filter
"RTN","RORX019",144,0)
 . S RCC=0
"RTN","RORX019",145,0)
 . I FLAG'="ALL" D
"RTN","RORX019",146,0)
 . . S RCC=$$ICD^RORXU010(DFN)
"RTN","RORX019",147,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX019",148,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX019",149,0)
 . ;
"RTN","RORX019",150,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX019",151,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX019",152,0)
 . ;
"RTN","RORX019",153,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX019",154,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX019",155,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX019",156,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX019",157,0)
 .. S:'UTIL SKIP=1
"RTN","RORX019",158,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX019",159,0)
 . I $G(SKIP) Q
"RTN","RORX019",160,0)
 . ;
"RTN","RORX019",161,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX019",162,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX019",163,0)
 ;
"RTN","RORX019",164,0)
 K ^TMP("RORX019",$J)
"RTN","RORX019",165,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX019",166,0)
 ;
"RTN","RORX019",167,0)
 ;************************************************************************
"RTN","RORX019",168,0)
 ;ADD PATIENT DATA TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",169,0)
 ;
"RTN","RORX019",170,0)
 ;INPUT
"RTN","RORX019",171,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019",172,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",173,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",174,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",175,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",176,0)
 ;
"RTN","RORX019",177,0)
 ;OUTPUT
"RTN","RORX019",178,0)
 ;  1        ok
"RTN","RORX019",179,0)
 ; <0        error
"RTN","RORX019",180,0)
 ;************************************************************************
"RTN","RORX019",181,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",182,0)
 ;Calculate the scores requested by the user
"RTN","RORX019",183,0)
 I ((RORDATA("IDLST")[1)!(RORDATA("IDLST")[2)) I $$CALCMLD^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",184,0)
 I ((RORDATA("IDLST")[3)!(RORDATA("IDLST")[4)) I $$CALCFIB^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",185,0)
 I '$$INRANGE(.RORDATA) Q 1  ;exclude patient from report if ANY score is out of range
"RTN","RORX019",186,0)
 I '$$SKIP(.RORDATA) Q 1  ;exclude patient from report with null scores
"RTN","RORX019",187,0)
 ;--- Get patient data and put into the report
"RTN","RORX019",188,0)
 N VADM,VA,RORDOD,MTAG,TTAG,AGETYPE,AGE
"RTN","RORX019",189,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX019",190,0)
 ;--- The <PATIENT> tag
"RTN","RORX019",191,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX019",192,0)
 I PTAG<0 Q PTAG
"RTN","RORX019",193,0)
 ;--- Patient Name
"RTN","RORX019",194,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX019",195,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX019",196,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX019",197,0)
 ;--- Age/DOB
"RTN","RORX019",198,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") I AGETYPE'="ALL" D
"RTN","RORX019",199,0)
 . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX019",200,0)
 . D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,PTAG,1)
"RTN","RORX019",201,0)
 ;--- Date of death
"RTN","RORX019",202,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX019",203,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX019",204,0)
 ;--- MELDDATA tag
"RTN","RORX019",205,0)
 S MTAG=$$ADDVAL^RORTSK11(RORTSK,"MELDDATA",,PTAG)
"RTN","RORX019",206,0)
 I MTAG<0 Q MTAG
"RTN","RORX019",207,0)
 ;--- Test Result Values
"RTN","RORX019",208,0)
 N TNAME
"RTN","RORX019",209,0)
 I ((RORDATA("IDLST")[1)!(RORDATA("IDLST")[2)) D
"RTN","RORX019",210,0)
 .F TNAME="BILI","CR","INR" D TSTRSLT(TNAME,MTAG)
"RTN","RORX019",211,0)
 .I RORDATA("IDLST")[2 D TSTRSLT("NA",MTAG)
"RTN","RORX019",212,0)
 I ((RORDATA("IDLST")[3)!(RORDATA("IDLST")[4)) D
"RTN","RORX019",213,0)
 .F TNAME="AST","PLAT" D TSTRSLT(TNAME,MTAG)
"RTN","RORX019",214,0)
 .I RORDATA("IDLST")[4 D TSTRSLT("ALT",MTAG)
"RTN","RORX019",215,0)
 ;---  MELD score
"RTN","RORX019",216,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"MELD",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX019",217,0)
 ;---  MELD-Na Score
"RTN","RORX019",218,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MELDNA",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX019",219,0)
 ;---  APRI Score
"RTN","RORX019",220,0)
 I RORDATA("IDLST")[3 D ADDVAL^RORTSK11(RORTSK,"APRI",$G(RORDATA("SCORE",3)),PTAG,3)
"RTN","RORX019",221,0)
 ;---  FIB-4 Score
"RTN","RORX019",222,0)
 I RORDATA("IDLST")[4 D ADDVAL^RORTSK11(RORTSK,"FIB4",$G(RORDATA("SCORE",4)),PTAG,3)
"RTN","RORX019",223,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D
"RTN","RORX019",224,0)
 . S TMP=$$ICN^RORUTL02(DFN)
"RTN","RORX019",225,0)
 . D ADDVAL^RORTSK11(RORTSK,"ICN",TMP,PTAG,1)
"RTN","RORX019",226,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") D
"RTN","RORX019",227,0)
 . S TMP=$$PACT^RORUTL02(DFN)
"RTN","RORX019",228,0)
 . D ADDVAL^RORTSK11(RORTSK,"PACT",TMP,PTAG,1)
"RTN","RORX019",229,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") D
"RTN","RORX019",230,0)
 . S TMP=$$PCP^RORUTL02(DFN)
"RTN","RORX019",231,0)
 . D ADDVAL^RORTSK11(RORTSK,"PCP",TMP,PTAG,1)
"RTN","RORX019",232,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D
"RTN","RORX019",233,0)
 . S TMP=$$FUTAPPT^RORUTL02(DFN,$$PARAM^RORTSK01("OPTIONS","FUT_APPT"))
"RTN","RORX019",234,0)
 . D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",TMP,PTAG,1)
"RTN","RORX019",235,0)
 Q ($S($G(TTAG)<0:TTAG,1:1))
"RTN","RORX019",236,0)
 ;
"RTN","RORX019",237,0)
 ;*****************************************************
"RTN","RORX019",238,0)
 ;Procedure to add test name, date and results to report
"RTN","RORX019",239,0)
 ;INPUT
"RTN","RORX019",240,0)
 ;   TNAME       Name of test 
"RTN","RORX019",241,0)
 ;   MTAG        IEN of parent record
"RTN","RORX019",242,0)
 ;OUTPUT         n/a
"RTN","RORX019",243,0)
 ;******************************************************
"RTN","RORX019",244,0)
TSTRSLT(TNAME,MTAG) ;
"RTN","RORX019",245,0)
 ;--- Test Result Values
"RTN","RORX019",246,0)
 ;--- TEST tag
"RTN","RORX019",247,0)
 N TNAMEMIX
"RTN","RORX019",248,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,MTAG)
"RTN","RORX019",249,0)
 I TTAG<0 Q
"RTN","RORX019",250,0)
 ;--- Mixed case test name for GUI application
"RTN","RORX019",251,0)
 I TNAME="BILI" S TNAMEMIX="Bili"
"RTN","RORX019",252,0)
 I TNAME="CR" S TNAMEMIX="Cr"
"RTN","RORX019",253,0)
 I TNAME="INR" S TNAMEMIX="INR"
"RTN","RORX019",254,0)
 I TNAME="NA" S TNAMEMIX="Na"
"RTN","RORX019",255,0)
 I TNAME="AST" S TNAMEMIX="AST"
"RTN","RORX019",256,0)
 I TNAME="PLAT" S TNAMEMIX="Platelet"
"RTN","RORX019",257,0)
 I TNAME="ALT" S TNAMEMIX="ALT"
"RTN","RORX019",258,0)
 ;---  Test Name
"RTN","RORX019",259,0)
 D ADDVAL^RORTSK11(RORTSK,"TNAME",TNAMEMIX,TTAG)
"RTN","RORX019",260,0)
 ;---  Test Date
"RTN","RORX019",261,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$P($G(RORDATA(TNAME)),U,2),TTAG)
"RTN","RORX019",262,0)
 ;---  Test Result Value
"RTN","RORX019",263,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$P($G(RORDATA(TNAME)),U,1),TTAG)
"RTN","RORX019",264,0)
 Q
"RTN","RORX019",265,0)
 ;****************************************************************
"RTN","RORX019",266,0)
 ;Function to check whether patient should be included on report
"RTN","RORX019",267,0)
 ;To be included patient must have a score for at least one of
"RTN","RORX019",268,0)
 ;the scores requested by the user
"RTN","RORX019",269,0)
 ;
"RTN","RORX019",270,0)
 ;INPUT
"RTN","RORX019",271,0)
 ;   RORDATA   Array with ROR Data
"RTN","RORX019",272,0)
 ;OUTPUT
"RTN","RORX019",273,0)
 ;   1         Include
"RTN","RORX019",274,0)
 ;   0         Exclude
"RTN","RORX019",275,0)
 ;***************************************************************
"RTN","RORX019",276,0)
SKIP(RORDATA) ;
"RTN","RORX019",277,0)
 ;
"RTN","RORX019",278,0)
 N RETURN
"RTN","RORX019",279,0)
 S RETURN=0
"RTN","RORX019",280,0)
 I RORDATA("IDLST")[1,+$G(RORDATA("SCORE",1)) S RETURN=1
"RTN","RORX019",281,0)
 I RORDATA("IDLST")[2,+$G(RORDATA("SCORE",2)) S RETURN=1
"RTN","RORX019",282,0)
 I RORDATA("IDLST")[3,+$G(RORDATA("SCORE",3)) S RETURN=1
"RTN","RORX019",283,0)
 I RORDATA("IDLST")[4,+$G(RORDATA("SCORE",4)) S RETURN=1
"RTN","RORX019",284,0)
 Q RETURN
"RTN","RORX019",285,0)
 ;************************************************************************
"RTN","RORX019",286,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES
"RTN","RORX019",287,0)
 ;-- If both tests contain ranges: scores for BOTH tests must fall in the
"RTN","RORX019",288,0)
 ;ranges...treated like an 'AND'
"RTN","RORX019",289,0)
 ;-- If 1 test contains a range: only patients with scores in the requested range
"RTN","RORX019",290,0)
 ;will be displayed, and the test without the range will also be displayed
"RTN","RORX019",291,0)
 ;with the calculated score (if applicable)
"RTN","RORX019",292,0)
 ;-- If neither test contains a range: all patients and their test results
"RTN","RORX019",293,0)
 ;and scores (null if they can't be calculated) are returned
"RTN","RORX019",294,0)
 ;
"RTN","RORX019",295,0)
 ;INPUT
"RTN","RORX019",296,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",297,0)
 ;OUTPUT
"RTN","RORX019",298,0)
 ;  1        include on report
"RTN","RORX019",299,0)
 ;  0        exclude from report
"RTN","RORX019",300,0)
 ;************************************************************************
"RTN","RORX019",301,0)
INRANGE(RORDATA) ;
"RTN","RORX019",302,0)
 ;include data and quit if no range was sent in
"RTN","RORX019",303,0)
 Q:($D(RORDATA("RANGE"))'>1) 1
"RTN","RORX019",304,0)
 ;check scores to see if they are within the user-selected range(s)
"RTN","RORX019",305,0)
 N I,RETURN,SCORE S RETURN=1 ;default is set to 'within range'
"RTN","RORX019",306,0)
 S I=0 F  S I=$O(RORDATA("RANGE",I)) Q:I=""  D
"RTN","RORX019",307,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX019",308,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",309,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",310,0)
 .. I SCORE<RORDATA("L",I) S RETURN=0
"RTN","RORX019",311,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX019",312,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",313,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",314,0)
 .. I SCORE>$G(RORDATA("H",I)) S RETURN=0
"RTN","RORX019",315,0)
 ;
"RTN","RORX019",316,0)
 Q RETURN
"RTN","RORX019",317,0)
 ;
"RTN","RORX019",318,0)
 ;************************************************************************
"RTN","RORX019",319,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",320,0)
 ;
"RTN","RORX019",321,0)
 ;INPUT
"RTN","RORX019",322,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX019",323,0)
 ;  PARAMS  Reference IEN to the 'params' parent XML tag
"RTN","RORX019",324,0)
 ;
"RTN","RORX019",325,0)
 ;OUTPUT
"RTN","RORX019",326,0)
 ;  <0      error
"RTN","RORX019",327,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX019",328,0)
 ;************************************************************************
"RTN","RORX019",329,0)
HEADER(PARTAG,PARAMS) ;
"RTN","RORX019",330,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX019",331,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX019",332,0)
 ;last registry update, and last data extraction.
"RTN","RORX019",333,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX019",334,0)
 Q:HEADER<0 HEADER
"RTN","RORX019",335,0)
 ;manually build the table defintion(s) listed below
"RTN","RORX019",336,0)
 ;PATIENTS(#,NAME,LAST4,AGE,DOD,TEST,DATE,RESULT,MELD,MELDNA,APRI,FIB4,ICN,PACT,PCP,FUT_APPT)
"RTN","RORX019",337,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX019",338,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX019",339,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX019",340,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX019",341,0)
 ;--- Required columns
"RTN","RORX019",342,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE")
"RTN","RORX019",343,0)
 F COL="#","NAME","LAST4",AGETYPE,"DOD","TEST","DATE","RESULT" D
"RTN","RORX019",344,0)
 . Q:COL="ALL"  ;don't add AGE/DOB to the columns if AGETYPE is set to ALL ages
"RTN","RORX019",345,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",346,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX019",347,0)
 ;--- Additional columns
"RTN","RORX019",348,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX019",349,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",350,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELD")
"RTN","RORX019",351,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX019",352,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",353,0)
 . ;D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELDNA")
"RTN","RORX019",354,0)
 . ;note: the column name length above was causing problems in the
"RTN","RORX019",355,0)
 . ;XSL diaglog file entry 7981019.001, so we shortened it to just "NA".
"RTN","RORX019",356,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","NA")
"RTN","RORX019",357,0)
 I RORDATA("IDLST")[3 D
"RTN","RORX019",358,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",359,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","APRI")
"RTN","RORX019",360,0)
 I RORDATA("IDLST")[4 D
"RTN","RORX019",361,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",362,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","FIB4")
"RTN","RORX019",363,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D
"RTN","RORX019",364,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",365,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","ICN")
"RTN","RORX019",366,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") D
"RTN","RORX019",367,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",368,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","PACT")
"RTN","RORX019",369,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") D
"RTN","RORX019",370,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",371,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","PCP")
"RTN","RORX019",372,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D
"RTN","RORX019",373,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",374,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","FUT_APPT")
"RTN","RORX019",375,0)
 ;--- LOINC codes
"RTN","RORX019",376,0)
 N LTAG S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX019",377,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",378,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","ALT: 1742-6, 16325-3")
"RTN","RORX019",379,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",380,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","AST: 1916-6, 1920-8, 127344-1")
"RTN","RORX019",381,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",382,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Billirubin: 14631-6, 1975-2")
"RTN","RORX019",383,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",384,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Creatinine: 15045-8, 21232-4, 2160-0")
"RTN","RORX019",385,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",386,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","INR: 34714-6, 6301-6")
"RTN","RORX019",387,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",388,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Platelets: 777-3, 778-1, 26515-7")
"RTN","RORX019",389,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",390,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Sodium: 2947-0, 2951-2, 32717-1")
"RTN","RORX019",391,0)
 ;
"RTN","RORX019",392,0)
 ;Add ULNAST value if passed in
"RTN","RORX019",393,0)
 I $G(RORTSK("PARAMS","ULNAST")) D
"RTN","RORX019",394,0)
 . N ULNAST S ULNAST=$$ADDVAL^RORTSK11(RORTSK,"ULNAST",,PARAMS)
"RTN","RORX019",395,0)
 . D ADDATTR^RORTSK11(RORTSK,ULNAST,"VALUES",$G(RORDATA("ULNAST")))
"RTN","RORX019",396,0)
 ;
"RTN","RORX019",397,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX019",398,0)
 ;
"RTN","RORX019",399,0)
 ; Set up parameter values for liver scores
"RTN","RORX019",400,0)
 ;
"RTN","RORX019",401,0)
 ;  Input:
"RTN","RORX019",402,0)
 ;     RORDATA   Array with ROR data
"RTN","RORX019",403,0)
 ;     RORTSK    Task number and task parameters
"RTN","RORX019",404,0)
 ;
"RTN","RORX019",405,0)
 ;  Output:
"RTN","RORX019",406,0)
 ;     RORDATA
"RTN","RORX019",407,0)
 ;     RORTSK
"RTN","RORX019",408,0)
 ;     RORLC     sub-file and LOINC codes to search for    
"RTN","RORX019",409,0)
 ;
"RTN","RORX019",410,0)
LIVPARAM(RORDATA,RORTSK,RORLC) ;
"RTN","RORX019",411,0)
 ;--- Get test ranges requested
"RTN","RORX019",412,0)
 ;I=1 ==> report = MELD      I=2 ==> report = MELD Na
"RTN","RORX019",413,0)
 ;I=3 ==> report = APRI      I=4 ==> report = FIB-4
"RTN","RORX019",414,0)
 N I
"RTN","RORX019",415,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX019",416,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX019",417,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX019",418,0)
 ;
"RTN","RORX019",419,0)
 ;--- Get Max Date for test results  OUTPUT: RORDATA("DATE")
"RTN","RORX019",420,0)
 ;In the GUI, the user selects either 'most recent' or 'as of' date
"RTN","RORX019",421,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX019",422,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX019",423,0)
 ;
"RTN","RORX019",424,0)
 ;--- LOINC codes
"RTN","RORX019",425,0)
 I "1,2"[RORDATA("IDLST") D  ;If MELD or MELD-NA scores requested
"RTN","RORX019",426,0)
 . ;create list for future comparison
"RTN","RORX019",427,0)
 . S RORDATA("CR_LOINC")=";15045-8;21232-4;2160-0;" ;Creatinine
"RTN","RORX019",428,0)
 . S RORDATA("BIL_LOINC")=";14631-6;1975-2;" ;Bilirubin
"RTN","RORX019",429,0)
 . S RORDATA("SOD_LOINC")=";2947-0;2951-2;32717-1;" ;Sodium
"RTN","RORX019",430,0)
 . S RORDATA("INR_LOINC")=";34714-6;6301-6;" ;INR 
"RTN","RORX019",431,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",432,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",433,0)
 . S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX019",434,0)
 . S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX019",435,0)
 . S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX019",436,0)
 . S RORLC(4)="14631-6^LN" ;Bilirubin LOINC
"RTN","RORX019",437,0)
 . S RORLC(5)="1975-2^LN"  ;Bilirubin LOINC
"RTN","RORX019",438,0)
 . S RORLC(6)="2947-0^LN"  ;Sodium LOINC
"RTN","RORX019",439,0)
 . S RORLC(7)="2951-2^LN"  ;Sodium LOINC
"RTN","RORX019",440,0)
 . S RORLC(8)="32717-1^LN" ;Sodium LOINC
"RTN","RORX019",441,0)
 . S RORLC(9)="34714-6^LN" ;INR LOINC
"RTN","RORX019",442,0)
 . S RORLC(10)="6301-6^LN" ;INR LOINC
"RTN","RORX019",443,0)
 ;
"RTN","RORX019",444,0)
 I "3,4"[RORDATA("IDLST") D  ;If APRI or FIB-4 scores requested
"RTN","RORX019",445,0)
 . ;create list for future comparison
"RTN","RORX019",446,0)
 . S RORDATA("AST_LOINC")=";1916-6;1920-8;127344-1;" ;AST 
"RTN","RORX019",447,0)
 . S RORDATA("PLAT_LOINC")=";777-3;778-1;26515-7;" ;Platelets 
"RTN","RORX019",448,0)
 . S RORDATA("ALT_LOINC")=";1742-6;16325-3;" ;ALT 
"RTN","RORX019",449,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",450,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",451,0)
 . S RORLC(1)="1916-6^LN" ;AST LOINC
"RTN","RORX019",452,0)
 . S RORLC(2)="1920-8^LN" ;AST LOINC
"RTN","RORX019",453,0)
 . ;S RORLC(3)="127344-1^LN" ;AST LOINC
"RTN","RORX019",454,0)
 . S RORLC(4)="777-3^LN" ;Platelets LOINC
"RTN","RORX019",455,0)
 . S RORLC(5)="778-1^LN" ;Platelets LOINC
"RTN","RORX019",456,0)
 . S RORLC(6)="26515-7^LN" ;Platelets LOINC
"RTN","RORX019",457,0)
 . S RORLC(7)="1742-6^LN" ;ALT LOINC
"RTN","RORX019",458,0)
 . S RORLC(8)="16325-3^LN" ;ALT LOINC
"RTN","RORX019",459,0)
 Q
"RTN","RORX019",460,0)
 ;
"RTN","RORX020")
0^16^B81734051^B78730803
"RTN","RORX020",1,0)
RORX020 ;BPOIFO/ACS - RENAL FUNCTION BY RANGE ;6/2/11 4:19pm
"RTN","RORX020",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14,15,19,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX020",3,0)
 ;
"RTN","RORX020",4,0)
 ; This routine uses the following IAs:
"RTN","RORX020",5,0)
 ;
"RTN","RORX020",6,0)
 ; #4290         ^PXRMINDX(120.5 (controlled)
"RTN","RORX020",7,0)
 ; #3647         $$EN^GMVPXRM (controlled)
"RTN","RORX020",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX020",9,0)
 ; #10105        PWR^XLFMTH (supported)
"RTN","RORX020",10,0)
 ; #5047         $$GETIEN^GMVGETVT (supported)
"RTN","RORX020",11,0)
 ; #3556         GCPR^LA7QRY (supported)
"RTN","RORX020",12,0)
 ;
"RTN","RORX020",13,0)
 ;******************************************************************************
"RTN","RORX020",14,0)
 ;******************************************************************************
"RTN","RORX020",15,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX020",16,0)
 ;        
"RTN","RORX020",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX020",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX020",19,0)
 ;ROR*1.5*10   MAR 2010   A SAUNDERS    Routine created.
"RTN","RORX020",20,0)
 ;ROR*1.5*13   DEC 2010   A SAUNDERS    User can select specific patients,
"RTN","RORX020",21,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX020",22,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX020",23,0)
 ;ROR*1.5*14   APR 2011   A SAUNDERS    CALCRF: Age calculation now uses 
"RTN","RORX020",24,0)
 ;                                      $$AGE^RORX019A.
"RTN","RORX020",25,0)
 ;ROR*1.5*15   JUN 2011   C RAY         Added calculation for eGRF by CKD-EPI.
"RTN","RORX020",26,0)
 ;ROR*1.5*19   FEB 2012   J SCOTT       Support for ICD-10 Coding System.
"RTN","RORX020",27,0)
 ;ROR*1.5*21   SEP 2013   T KOPP        Add ICN column if Additional Identifier
"RTN","RORX020",28,0)
 ;                                       requested.
"RTN","RORX020",29,0)
 ;ROR*1.5*31   MAY 2017   M FERRARESE   Adding PACT ,PCP,and AGE/DOB as additional
"RTN","RORX020",30,0)
 ;ROR*1.5*33   APR 2018   F TRAXLER     Add FUT_APPT column if requested
"RTN","RORX020",31,0)
 ;
"RTN","RORX020",32,0)
 ;******************************************************************************
"RTN","RORX020",33,0)
 ;******************************************************************************
"RTN","RORX020",34,0)
 Q
"RTN","RORX020",35,0)
 ;
"RTN","RORX020",36,0)
 ;************************************************************************
"RTN","RORX020",37,0)
 ;COMPILE THE "RENAL FUNCTION BY RANGE" REPORT
"RTN","RORX020",38,0)
 ;REPORT CODE: 020
"RTN","RORX020",39,0)
 ;
"RTN","RORX020",40,0)
 ;Called by entry "Renal Function by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX020",41,0)
 ;
"RTN","RORX020",42,0)
 ;INPUT
"RTN","RORX020",43,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX020",44,0)
 ;  
"RTN","RORX020",45,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX020",46,0)
 ;  scores, CrCL range from 20 to 50, eGFR range from 30 to 60:
"RTN","RORX020",47,0)
 ;  
"RTN","RORX020",48,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX020",49,0)
 ;  RORTSK("EP")="$$RFRANGE^RORX020"
"RTN","RORX020",50,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX020",51,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX020",52,0)
 ;  RORTSK("PARAMS","IC9FILT","A","FILTER")="ALL"
"RTN","RORX020",53,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX020",54,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=50
"RTN","RORX020",55,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=20
"RTN","RORX020",56,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX020",57,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=60
"RTN","RORX020",58,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=30
"RTN","RORX020",59,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX020",60,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",61,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX020",62,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX020",63,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX020",64,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX020",65,0)
 ;  
"RTN","RORX020",66,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX020",67,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",68,0)
 ;  is replaced with:  
"RTN","RORX020",69,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX020",70,0)
 ;
"RTN","RORX020",71,0)
 ;OUTPUT
"RTN","RORX020",72,0)
 ;  <0  Error code
"RTN","RORX020",73,0)
 ;   0  Ok
"RTN","RORX020",74,0)
 ;************************************************************************
"RTN","RORX020",75,0)
RFRANGE(RORTSK) ;
"RTN","RORX020",76,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX020",77,0)
 N RORREG        ; Registry IEN
"RTN","RORX020",78,0)
 N RORSDT        ; report start date
"RTN","RORX020",79,0)
 N ROREDT        ; report end date
"RTN","RORX020",80,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX020",81,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX020",82,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX020",83,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX020",84,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX020",85,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX020",86,0)
 ;
"RTN","RORX020",87,0)
 N REPORT,RC,I,SFLAGS,PARAMS
"RTN","RORX020",88,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX020",89,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX020",90,0)
 Q:REPORT<0 REPORT
"RTN","RORX020",91,0)
 ;
"RTN","RORX020",92,0)
 ;--- Get registry IEN
"RTN","RORX020",93,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX020",94,0)
 ;
"RTN","RORX020",95,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX020",96,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX020",97,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX020",98,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX020",99,0)
 ;
"RTN","RORX020",100,0)
 ;--- Add range parameters to output
"RTN","RORX020",101,0)
 S RC=$$PARAMS^RORX020A(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX020",102,0)
 ;
"RTN","RORX020",103,0)
 ;--- Put report header data into output:
"RTN","RORX020",104,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX020",105,0)
 ;last data extraction date
"RTN","RORX020",106,0)
 S RC=$$HEADER^RORX020A(REPORT,.RORTSK) Q:RC<0 RC
"RTN","RORX020",107,0)
 ;
"RTN","RORX020",108,0)
 ;--- Get Renal ranges requested
"RTN","RORX020",109,0)
 ;I=1 ==> report = CrCL      I=2 ==> report = eGFR by MDRD
"RTN","RORX020",110,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX020",111,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX020",112,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX020",113,0)
 ;
"RTN","RORX020",114,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT
"RTN","RORX020",115,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX020",116,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX020",117,0)
 ;
"RTN","RORX020",118,0)
 ;--- Get Max Date  OUTPUT: RORDATA("DATE")  - Max Date for test scores
"RTN","RORX020",119,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX020",120,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX020",121,0)
 ;
"RTN","RORX020",122,0)
 ;--- Summary vs. complete report requested
"RTN","RORX020",123,0)
 S RORDATA("COMPLETE")=0 ;default to 'summary' only
"RTN","RORX020",124,0)
 I $$PARAM^RORTSK01("OPTIONS","COMPLETE") S RORDATA("COMPLETE")=1
"RTN","RORX020",125,0)
 ;
"RTN","RORX020",126,0)
 ;--- Set the number of Renal ranges and initialize their values to 0
"RTN","RORX020",127,0)
 S RORDATA("RCNT")=5 D INIT^RORX020A(.RORDATA)
"RTN","RORX020",128,0)
 ;
"RTN","RORX020",129,0)
 ;--- Create 'patients' table
"RTN","RORX020",130,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX020",131,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX020",132,0)
 ;
"RTN","RORX020",133,0)
 ;--- Check utilization
"RTN","RORX020",134,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX020",135,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX020",136,0)
 ; Utilization date range is always sent
"RTN","RORX020",137,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX020",138,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX020",139,0)
 ; Combined date range
"RTN","RORX020",140,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX020",141,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX020",142,0)
 ;
"RTN","RORX020",143,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX020",144,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX020",145,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX020",146,0)
 ;
"RTN","RORX020",147,0)
 ;--- LOINC codes for Creatinine
"RTN","RORX020",148,0)
 ;create list for future comparison
"RTN","RORX020",149,0)
 S RORDATA("LOINC")=";15045-8;21232-4;2160-0;"
"RTN","RORX020",150,0)
 ;set up array for future call to Lab API
"RTN","RORX020",151,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX020",152,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX020",153,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX020",154,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX020",155,0)
 ;
"RTN","RORX020",156,0)
 ;--- RACE code 2054-5 = 'black or african american' in RACE file (IEN=9)
"RTN","RORX020",157,0)
 S RORDATA("BAM")=";9;"
"RTN","RORX020",158,0)
 ;
"RTN","RORX020",159,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX020",160,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX020",161,0)
 ;
"RTN","RORX020",162,0)
 ;--- Get registry records
"RTN","RORX020",163,0)
 N RCC,FLAG,SKIP,TMP
"RTN","RORX020",164,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX020",165,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX020",166,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX020",167,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX020",168,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX020",169,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX020",170,0)
 . S CNT=CNT+1
"RTN","RORX020",171,0)
 . ;--- Get the patient DFN
"RTN","RORX020",172,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX020",173,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX020",174,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX020",175,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX020",176,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX020",177,0)
 . ;--- Check if patient has passed the ICD filter
"RTN","RORX020",178,0)
 . S RCC=0
"RTN","RORX020",179,0)
 . I FLAG'="ALL" D
"RTN","RORX020",180,0)
 . . S RCC=$$ICD^RORXU010(DFN)
"RTN","RORX020",181,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX020",182,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX020",183,0)
 . ;
"RTN","RORX020",184,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX020",185,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX020",186,0)
 . ;
"RTN","RORX020",187,0)
 . ;--- Check for utilization in the corresponding 'utilization' date range
"RTN","RORX020",188,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX020",189,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX020",190,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX020",191,0)
 .. I 'UTIL S SKIP=1
"RTN","RORX020",192,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX020",193,0)
 . I $G(SKIP) Q
"RTN","RORX020",194,0)
 . ;
"RTN","RORX020",195,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX020",196,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX020",197,0)
 ;
"RTN","RORX020",198,0)
 ;--- If user selected eGFR by MDRD (ID=2) or eGFR by CKD-EPI (ID=3), create summary report
"RTN","RORX020",199,0)
 I RORDATA("IDLST")[2!(RORDATA("IDLST")[3) S RC=$$SUMMARY^RORX020A(RORTSK,REPORT,.RORDATA)
"RTN","RORX020",200,0)
 Q:RC<0 RC
"RTN","RORX020",201,0)
 K ^TMP("RORX020",$J),^TMP("ROROUT",$J)
"RTN","RORX020",202,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX020",203,0)
 ;
"RTN","RORX020",204,0)
 ;************************************************************************
"RTN","RORX020",205,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX020",206,0)
 ;
"RTN","RORX020",207,0)
 ;INPUT
"RTN","RORX020",208,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",209,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX020",210,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",211,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",212,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",213,0)
 ;
"RTN","RORX020",214,0)
 ;OUTPUT
"RTN","RORX020",215,0)
 ;  1        ok
"RTN","RORX020",216,0)
 ; <0        error
"RTN","RORX020",217,0)
 ;************************************************************************
"RTN","RORX020",218,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",219,0)
 ;calculate Renal Function scores
"RTN","RORX020",220,0)
 I $$CALCRF^RORX020B(DFN,.RORDATA,RORPTIEN,.RORLC)<0 Q 1  ;quit if patient data not available
"RTN","RORX020",221,0)
 I '$$INRANGE^RORX020A(.RORDATA) Q 1  ;quit if score(s) out of requested range
"RTN","RORX020",222,0)
 ;if eGFR by MDRD requested, add 1 to appropriate category count
"RTN","RORX020",223,0)
 I RORDATA("IDLST")[2 D MDRDCAT^RORX020A(.RORDATA)
"RTN","RORX020",224,0)
 ;if eGFR by CKD-EPI requested, add 1 to appropriate category count
"RTN","RORX020",225,0)
 I RORDATA("IDLST")[3 D CKDCAT^RORX020A(.RORDATA)
"RTN","RORX020",226,0)
 Q:'RORDATA("COMPLETE") 1  ;continue only if 'complete' report is requested
"RTN","RORX020",227,0)
 ;--- Get patient data and put into the report
"RTN","RORX020",228,0)
 N VADM,VA,RORDOD,TTAG,RTAG,TMP,AGETYPE,AGE
"RTN","RORX020",229,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX020",230,0)
 ;--- The <PATIENT> tag
"RTN","RORX020",231,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX020",232,0)
 I PTAG<0 Q PTAG
"RTN","RORX020",233,0)
 ;--- Patient Name
"RTN","RORX020",234,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX020",235,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX020",236,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX020",237,0)
 ;--- Age/DOB
"RTN","RORX020",238,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") I AGETYPE'="ALL" D
"RTN","RORX020",239,0)
 . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX020",240,0)
 . D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,PTAG,1)
"RTN","RORX020",241,0)
 ;--- Date of death
"RTN","RORX020",242,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX020",243,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX020",244,0)
 ;--- RENAL DATA tag
"RTN","RORX020",245,0)
 S RTAG=$$ADDVAL^RORTSK11(RORTSK,"RNLDATA",,PTAG)
"RTN","RORX020",246,0)
 Q:RTAG<0 RTAG
"RTN","RORX020",247,0)
 ;---  CR Test Tag
"RTN","RORX020",248,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,RTAG)
"RTN","RORX020",249,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",250,0)
 ;---  Date Cr Test Taken
"RTN","RORX020",251,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("CRDATE")),TTAG)
"RTN","RORX020",252,0)
 ;---  Cr Test Value
"RTN","RORX020",253,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("CR")),TTAG)
"RTN","RORX020",254,0)
 ;--- Height tag
"RTN","RORX020",255,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,RTAG)
"RTN","RORX020",256,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",257,0)
 ;---  Date Height Taken
"RTN","RORX020",258,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),TTAG)
"RTN","RORX020",259,0)
 ;---  Height value
"RTN","RORX020",260,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),TTAG)
"RTN","RORX020",261,0)
 ;---  Calculated CRCL
"RTN","RORX020",262,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"CRCL",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX020",263,0)
 ;---  Calculated eGFR by MDRD
"RTN","RORX020",264,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MDRD",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX020",265,0)
 ;---  Calculated eGFR by CKD-EPI
"RTN","RORX020",266,0)
 I RORDATA("IDLST")[3 D ADDVAL^RORTSK11(RORTSK,"CKD",$G(RORDATA("SCORE",3)),PTAG,3)
"RTN","RORX020",267,0)
 ;--- ICN,PACT,PCP
"RTN","RORX020",268,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D ICNDATA^RORXU006(RORTSK,DFN,PTAG)
"RTN","RORX020",269,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") D PACTDATA^RORXU006(RORTSK,DFN,PTAG)
"RTN","RORX020",270,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") D PCPDATA^RORXU006(RORTSK,DFN,PTAG)
"RTN","RORX020",271,0)
 ;--- If only patients with future appointments   ; PATCH 33
"RTN","RORX020",272,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D FUTAPPT^RORXU006(.RORTSK,DFN,$$PARAM^RORTSK01("OPTIONS","FUT_APPT"),PTAG)
"RTN","RORX020",273,0)
 Q ($S(TTAG<0:TTAG,1:1))
"RTN","RORX020",274,0)
 ;
"RTN","RORX020A")
0^17^B60919482^B59481878
"RTN","RORX020A",1,0)
RORX020A ;BPOIFO/ACS - RENAL FUNCTION BY RANGE (CONT.) ;5/20/11 12:11pm
"RTN","RORX020A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,14,15,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORX020A",3,0)
 ;
"RTN","RORX020A",4,0)
 Q
"RTN","RORX020A",5,0)
 ;******************************************************************************
"RTN","RORX020A",6,0)
 ;******************************************************************************
"RTN","RORX020A",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX020A",8,0)
 ;        
"RTN","RORX020A",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX020A",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX020A",11,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   HEADER: Added LOINCs to report header
"RTN","RORX020A",12,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX020A",13,0)
 ;                                      additional identifier option selected
"RTN","RORX020A",14,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT ,PCP,and AGE/DOB as additional
"RTN","RORX020A",15,0)
 ;                                      identifiers.
"RTN","RORX020A",16,0)
 ;ROR*1.5*33   APR 2018    F TRAXLER    Add FUT_APPT column if requested
"RTN","RORX020A",17,0)
 ;******************************************************************************
"RTN","RORX020A",18,0)
 ;******************************************************************************
"RTN","RORX020A",19,0)
 ;
"RTN","RORX020A",20,0)
 ;************************************************************************
"RTN","RORX020A",21,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",22,0)
 ;
"RTN","RORX020A",23,0)
 ;INPUT
"RTN","RORX020A",24,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX020A",25,0)
 ;
"RTN","RORX020A",26,0)
 ;OUTPUT
"RTN","RORX020A",27,0)
 ;  <0      error
"RTN","RORX020A",28,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX020A",29,0)
 ;************************************************************************
"RTN","RORX020A",30,0)
HEADER(PARTAG,RORTSK) ;
"RTN","RORX020A",31,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX020A",32,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX020A",33,0)
 ;last registry update, and last data extraction.
"RTN","RORX020A",34,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX020A",35,0)
 Q:HEADER<0 HEADER
"RTN","RORX020A",36,0)
 ;manually build the table definition(s) listed below
"RTN","RORX020A",37,0)
 ;PATIENTS(#,NAME,LAST4,AGE,DOD,TEST,DATE,RESULT,CRCL,EGFR)
"RTN","RORX020A",38,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX020A",39,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX020A",40,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX020A",41,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX020A",42,0)
 ;--- Required columns
"RTN","RORX020A",43,0)
 S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") ; do not list Age if the selection is to list ALL ages
"RTN","RORX020A",44,0)
 F COL="#","NAME","LAST4",AGETYPE,"DOD","TEST","DATE","RESULT"  D
"RTN","RORX020A",45,0)
 . Q:COL="ALL"
"RTN","RORX020A",46,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",47,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX020A",48,0)
 ;--- Additional columns
"RTN","RORX020A",49,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX020A",50,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",51,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","CRCL")
"RTN","RORX020A",52,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX020A",53,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",54,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MDRD")
"RTN","RORX020A",55,0)
 I RORDATA("IDLST")[3 D
"RTN","RORX020A",56,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",57,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","CKD")
"RTN","RORX020A",58,0)
 ;--- LOINC codes
"RTN","RORX020A",59,0)
 N LTAG S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX020A",60,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX020A",61,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Creatinine: 15045-8, 21232-4, 2160-0")
"RTN","RORX020A",62,0)
 ;--- ICN
"RTN","RORX020A",63,0)
 I $$PARAM^RORTSK01("PATIENTS","ICN") D ICNHDR^RORXU006(RORTSK,COLUMNS)
"RTN","RORX020A",64,0)
 ;--- PACT
"RTN","RORX020A",65,0)
 I $$PARAM^RORTSK01("PATIENTS","PACT") D PACTHDR^RORXU006(RORTSK,COLUMNS)
"RTN","RORX020A",66,0)
 ;--- PCP
"RTN","RORX020A",67,0)
 I $$PARAM^RORTSK01("PATIENTS","PCP") D PCPHDR^RORXU006(RORTSK,COLUMNS)
"RTN","RORX020A",68,0)
 ;--- Future Appt. PATCH 33
"RTN","RORX020A",69,0)
 I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D APPTHDR^RORXU006(RORTSK,COLUMNS)
"RTN","RORX020A",70,0)
 ;---
"RTN","RORX020A",71,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX020A",72,0)
 ;
"RTN","RORX020A",73,0)
 ;*****************************************************************************
"RTN","RORX020A",74,0)
 ;INITIALIZE THE RANGE COUNTS TO 0
"RTN","RORX020A",75,0)
 ;
"RTN","RORX020A",76,0)
 ;INPUT
"RTN","RORX020A",77,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",78,0)
 ;           RORDATA("RCNT") Number of ranges/groupings to initialize
"RTN","RORX020A",79,0)
 ;*****************************************************************************
"RTN","RORX020A",80,0)
INIT(RORDATA) ;
"RTN","RORX020A",81,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX020A",82,0)
 N I
"RTN","RORX020A",83,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX020A",84,0)
 .I RORDATA("IDLST")[2 S RORDATA("NPMDRD",I)=0
"RTN","RORX020A",85,0)
 .I RORDATA("IDLST")[3 S RORDATA("NPCKD",I)=0
"RTN","RORX020A",86,0)
 Q
"RTN","RORX020A",87,0)
 ;
"RTN","RORX020A",88,0)
 ;*****************************************************************************
"RTN","RORX020A",89,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX020A",90,0)
 ;
"RTN","RORX020A",91,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX020A",92,0)
 ;
"RTN","RORX020A",93,0)
 ; Return Values:
"RTN","RORX020A",94,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX020A",95,0)
 ;        RORDATA("RANGE") - 1 if range passed in for either test, else 0
"RTN","RORX020A",96,0)
 ;       <0  Error code
"RTN","RORX020A",97,0)
 ;        0  Ok
"RTN","RORX020A",98,0)
 ;*****************************************************************************
"RTN","RORX020A",99,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX020A",100,0)
 N PARAMS,DESC,TMP,RC,RANGE S RC=0
"RTN","RORX020A",101,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX020A",102,0)
 ;--- Lab test ranges
"RTN","RORX020A",103,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX020A",104,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX020A",105,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX020A",106,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX020A",107,0)
 . S (GRC,RC)=0
"RTN","RORX020A",108,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX020A",109,0)
 . . S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA)
"RTN","RORX020A",110,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG)
"RTN","RORX020A",111,0)
 . . I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX020A",112,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX020A",113,0)
 . . ;add the user-requested test ID to the test ID 'list'
"RTN","RORX020A",114,0)
 . . S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX020A",115,0)
 . . ;--- Process the range values
"RTN","RORX020A",116,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX020A",117,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",118,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX020A",119,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX020A",120,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",121,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX020A",122,0)
 . . I RANGE D 
"RTN","RORX020A",123,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX020A",124,0)
 . . . S RORDATA("RANGE")=1
"RTN","RORX020A",125,0)
 ;--- Success
"RTN","RORX020A",126,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX020A",127,0)
 I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2,3"
"RTN","RORX020A",128,0)
 Q RC
"RTN","RORX020A",129,0)
 ;
"RTN","RORX020A",130,0)
 ;*****************************************************************************
"RTN","RORX020A",131,0)
 ;RETURN RANGE TEXT AND ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION) 
"RTN","RORX020A",132,0)
 ;ID=1: MELD
"RTN","RORX020A",133,0)
 ;ID=2: MELD-Na
"RTN","RORX020A",134,0)
 ;
"RTN","RORX020A",135,0)
 ;INPUT:
"RTN","RORX020A",136,0)
 ;  GRC   Test ID number
"RTN","RORX020A",137,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX020A",138,0)
 ;
"RTN","RORX020A",139,0)
 ;OUTPUT:
"RTN","RORX020A",140,0)
 ;  RORDATA("L",ID) - test ID low range
"RTN","RORX020A",141,0)
 ;  RORDATA("H",ID) - test ID high range
"RTN","RORX020A",142,0)
 ;  Description - <range>
"RTN","RORX020A",143,0)
 ;*****************************************************************************
"RTN","RORX020A",144,0)
RTEXT(GRC,RORDATA) ;
"RTN","RORX020A",145,0)
 N RANGE,TMP
"RTN","RORX020A",146,0)
 S RANGE=""
"RTN","RORX020A",147,0)
 ;--- Range
"RTN","RORX020A",148,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX020A",149,0)
 . ;--- Low
"RTN","RORX020A",150,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX020A",151,0)
 . S RORDATA("L",GRC)=$G(TMP)
"RTN","RORX020A",152,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX020A",153,0)
 . ;--- High
"RTN","RORX020A",154,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX020A",155,0)
 . S RORDATA("H",GRC)=$G(TMP)
"RTN","RORX020A",156,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX020A",157,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX020A",158,0)
 ;--- Description
"RTN","RORX020A",159,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX020A",160,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX020A",161,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX020A",162,0)
 ;
"RTN","RORX020A",163,0)
 ;************************************************************************
"RTN","RORX020A",164,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES (EXTRINSIC FUNCTION)
"RTN","RORX020A",165,0)
 ;If not in the range, exclude from report
"RTN","RORX020A",166,0)
 ;
"RTN","RORX020A",167,0)
 ;INPUT:
"RTN","RORX020A",168,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX020A",169,0)
 ;
"RTN","RORX020A",170,0)
 ;OUTPUT:
"RTN","RORX020A",171,0)
 ;  1  include on report
"RTN","RORX020A",172,0)
 ;  0  exclude from report
"RTN","RORX020A",173,0)
 ;************************************************************************
"RTN","RORX020A",174,0)
INRANGE(RORDATA) ;
"RTN","RORX020A",175,0)
 ;if range exists for either test, and any result is considered 'invalid',
"RTN","RORX020A",176,0)
 ;then skip the range check and exclude data from report
"RTN","RORX020A",177,0)
 ;I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX020A",178,0)
 ;if range does not exist for either test, and any result is considered 'invalid',
"RTN","RORX020A",179,0)
 ;then skip the range check and include data in the report
"RTN","RORX020A",180,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX020A",181,0)
 ;
"RTN","RORX020A",182,0)
 ;---Range Check
"RTN","RORX020A",183,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX020A",184,0)
 S I=0 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX020A",185,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX020A",186,0)
 .. ;if score is less than 'low' range, do not include on report 
"RTN","RORX020A",187,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX020A",188,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX020A",189,0)
 .. ;if score is higher than 'high' range, do not include on report 
"RTN","RORX020A",190,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX020A",191,0)
 ;
"RTN","RORX020A",192,0)
 Q RETURN
"RTN","RORX020A",193,0)
 ;
"RTN","RORX020A",194,0)
 ;************************************************************************
"RTN","RORX020A",195,0)
 ;ADD 1 TO APPROPRIATE eGFR CATEGORY
"RTN","RORX020A",196,0)
 ;
"RTN","RORX020A",197,0)
 ;INPUT
"RTN","RORX020A",198,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",199,0)
 ;************************************************************************
"RTN","RORX020A",200,0)
MDRDCAT(RORDATA) ;
"RTN","RORX020A",201,0)
 I '$G(RORDATA("SCORE",2)) Q  ;quit if no score was calculated
"RTN","RORX020A",202,0)
 I $G(RORDATA("SCORE",2))>89 S RORDATA("NPMDRD",1)=$G(RORDATA("NPMDRD",1))+1 Q
"RTN","RORX020A",203,0)
 I $G(RORDATA("SCORE",2))>59 S RORDATA("NPMDRD",2)=$G(RORDATA("NPMDRD",2))+1 Q
"RTN","RORX020A",204,0)
 I $G(RORDATA("SCORE",2))>29 S RORDATA("NPMDRD",3)=$G(RORDATA("NPMDRD",3))+1 Q
"RTN","RORX020A",205,0)
 I $G(RORDATA("SCORE",2))>14 S RORDATA("NPMDRD",4)=$G(RORDATA("NPMDRD",4))+1 Q
"RTN","RORX020A",206,0)
 S RORDATA("NPMDRD",5)=$G(RORDATA("NPMDRD",5))+1 Q
"RTN","RORX020A",207,0)
 Q
"RTN","RORX020A",208,0)
 ;
"RTN","RORX020A",209,0)
 ;************************************************************************
"RTN","RORX020A",210,0)
 ;ADD 1 TO APPROPRIATE eGFR CATEGORY
"RTN","RORX020A",211,0)
 ;
"RTN","RORX020A",212,0)
 ;INPUT
"RTN","RORX020A",213,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",214,0)
 ;************************************************************************
"RTN","RORX020A",215,0)
CKDCAT(RORDATA) ;
"RTN","RORX020A",216,0)
 I '$G(RORDATA("SCORE",3)) Q  ;quit if no score was calculated
"RTN","RORX020A",217,0)
 I $G(RORDATA("SCORE",3))>89 S RORDATA("NPCKD",1)=$G(RORDATA("NPCKD",1))+1 Q
"RTN","RORX020A",218,0)
 I $G(RORDATA("SCORE",3))>59 S RORDATA("NPCKD",2)=$G(RORDATA("NPCKD",2))+1 Q
"RTN","RORX020A",219,0)
 I $G(RORDATA("SCORE",3))>29 S RORDATA("NPCKD",3)=$G(RORDATA("NPCKD",3))+1 Q
"RTN","RORX020A",220,0)
 I $G(RORDATA("SCORE",3))>14 S RORDATA("NPCKD",4)=$G(RORDATA("NPCKD",4))+1 Q
"RTN","RORX020A",221,0)
 S RORDATA("NPCKD",5)=$G(RORDATA("NPCKD",5))+1 Q
"RTN","RORX020A",222,0)
 Q
"RTN","RORX020A",223,0)
 ;*****************************************************************************
"RTN","RORX020A",224,0)
 ;ADD SUMMARY DATA TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",225,0)
 ;
"RTN","RORX020A",226,0)
 ;INPUT
"RTN","RORX020A",227,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX020A",228,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX020A",229,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX020A",230,0)
 ;           RORDATA("NP",1) - total count of patients in 1st range
"RTN","RORX020A",231,0)
 ;           RORDATA("NP",2) - total count of patients in 2nd range
"RTN","RORX020A",232,0)
 ;           RORDATA("NP",3) - total count of patients in 3rd range
"RTN","RORX020A",233,0)
 ;           RORDATA("NP",4) - total count of patients in 4th range
"RTN","RORX020A",234,0)
 ;           RORDATA("NP",5) - total count of patients in 5th range
"RTN","RORX020A",235,0)
 ;
"RTN","RORX020A",236,0)
 ;OUTPUT
"RTN","RORX020A",237,0)
 ;  STAG     XML 'summary' tag number or error code
"RTN","RORX020A",238,0)
 ;*****************************************************************************
"RTN","RORX020A",239,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX020A",240,0)
 N SUMMARY,I,STAG,RORTAG,RORNAME,RORRANGE
"RTN","RORX020A",241,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX020A",242,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX020A",243,0)
 ;add data for the summary entries
"RTN","RORX020A",244,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX020A",245,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX020A",246,0)
 . Q:STAG<0
"RTN","RORX020A",247,0)
 . ;get each value
"RTN","RORX020A",248,0)
 . S RORTAG="S"_I S RORNAME=$P($T(@RORTAG),";;",2)
"RTN","RORX020A",249,0)
 . S RORRANGE=$P($T(@RORTAG),";;",3)
"RTN","RORX020A",250,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX020A",251,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX020A",252,0)
 . D ADDVAL^RORTSK11(RORTSK,"NPMDRD",$G(RORDATA("NPMDRD",I)),STAG) ;count
"RTN","RORX020A",253,0)
 . D ADDVAL^RORTSK11(RORTSK,"NPCKD",$G(RORDATA("NPCKD",I)),STAG) ;count
"RTN","RORX020A",254,0)
 Q STAG
"RTN","RORX020A",255,0)
 ;************************************************************************
"RTN","RORX020A",256,0)
 ;eGFR by MDRD Categories and Values for the summary table.
"RTN","RORX020A",257,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX020A",258,0)
 ;************************************************************************
"RTN","RORX020A",259,0)
S1 ;;Normal or CKD1;;>=90 mL/min/1.73m
"RTN","RORX020A",260,0)
S2 ;;CKD2 (Mild);;60-89 mL/min/1.73m
"RTN","RORX020A",261,0)
S3 ;;CKD3 (Moderate);;30-59 mL/min/1.73m
"RTN","RORX020A",262,0)
S4 ;;CKD4 (Severe);;15-29 mL/min/1.73m
"RTN","RORX020A",263,0)
S5 ;;CKD5 (Kidney failure);;<15 mL/min/1.73m
"RTN","RORX021")
0^18^B30787018^B30013567
"RTN","RORX021",1,0)
RORX021 ;BPOIFO/CLR - HCV DAA CANDIDATES REPORT ;26 May 2015  4:02 PM
"RTN","RORX021",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17,21,26,31,33**;Feb 17, 2006;Build 81
"RTN","RORX021",3,0)
 ;
"RTN","RORX021",4,0)
 ;******************************************************************************
"RTN","RORX021",5,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX021",6,0)
 ;        
"RTN","RORX021",7,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX021",8,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX021",9,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX021",10,0)
 ;                                      additional identifier option selected
"RTN","RORX021",11,0)
 ;ROR*1.5*26   JAN 2015    T KOPP       Added FIB4 parameters set and header
"RTN","RORX021",12,0)
 ;                                      for FIB4 score. Remove treatment status.
"RTN","RORX021",13,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT ,PCP,and AGE/DOB as additional
"RTN","RORX021",14,0)
 ;                                      identifiers.
"RTN","RORX021",15,0)
 ;ROR*1.5*33   APR 2018    F TRAXLER    Adding FUT_APPT as identifier.
"RTN","RORX021",16,0)
 ;
"RTN","RORX021",17,0)
 ;******************************************************************************
"RTN","RORX021",18,0)
 ;
"RTN","RORX021",19,0)
 Q
"RTN","RORX021",20,0)
 ;
"RTN","RORX021",21,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX021",22,0)
 ;
"RTN","RORX021",23,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX021",24,0)
 ;
"RTN","RORX021",25,0)
 ; Return Values:
"RTN","RORX021",26,0)
 ;       <0  Error code
"RTN","RORX021",27,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX021",28,0)
 ;
"RTN","RORX021",29,0)
HEADER(PARTAG) ;
"RTN","RORX021",30,0)
 ;;PATIENTS(#,NAME,LAST4,HCV_DATE,HCV,GT,FILL_DATE,FILL_MED,FIB4,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX021",31,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,HCV_DATE,HCV,GT,FILL_DATE,FILL_MED,FIB4,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX021",32,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,HCV_DATE,HCV,GT,FILL_DATE,FILL_MED,FIB4,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX021",33,0)
 ;
"RTN","RORX021",34,0)
 N HEADER,RC
"RTN","RORX021",35,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX021",36,0)
 Q:HEADER<0 HEADER
"RTN","RORX021",37,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX021",HEADER)
"RTN","RORX021",38,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX021",39,0)
 ;
"RTN","RORX021",40,0)
 ;***** COMPILES THE "POTENTIAL DAA CANDIDATES" REPORT
"RTN","RORX021",41,0)
 ; REPORT CODE: 021
"RTN","RORX021",42,0)
 ;
"RTN","RORX021",43,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX021",44,0)
 ;
"RTN","RORX021",45,0)
 ; The ^TMP("RORX021",$J) global node is used by this function.
"RTN","RORX021",46,0)
 ;
"RTN","RORX021",47,0)
 ; ^TMP("RORX021",$J,
"RTN","RORX021",48,0)
 ;   "PAT",
"RTN","RORX021",49,0)
 ;     DFN,              Patient descriptor
"RTN","RORX021",50,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX021",51,0)
 ;                         ^02: Patient name
"RTN","RORX021",52,0)
 ;                         ^03: Treatment History (not used)
"RTN","RORX021",53,0)
 ;                         ^04: National ICN
"RTN","RORX021",54,0)
 ;                         ^05: FIB4 score
"RTN","RORX021",55,0)
 ;                         ^06: Patient Care Team
"RTN","RORX021",56,0)
 ;                         ^07: Priamary Care Provider
"RTN","RORX021",57,0)
 ;                         ^08: Age/DOB
"RTN","RORX021",58,0)
 ;       "LR",
"RTN","RORX021",59,0)
 ;         Category,
"RTN","RORX021",60,0)
 ;           Date(inverse) = Result
"RTN","RORX021",61,0)
 ;            
"RTN","RORX021",62,0)
 ;       "RX",
"RTN","RORX021",63,0)
 ;         Date(inverse),
"RTN","RORX021",64,0)
 ;           Generic Drug Name,
"RTN","RORX021",65,0)
 ;             Drug IEN,
"RTN","RORX021",66,0)
 ;                RX #,
"RTN","RORX021",67,0)
 ;                   Count) = ""
"RTN","RORX021",68,0)
 ;
"RTN","RORX021",69,0)
 ; Return Values:
"RTN","RORX021",70,0)
 ;       <0  Error code
"RTN","RORX021",71,0)
 ;        0  Ok
"RTN","RORX021",72,0)
 ;
"RTN","RORX021",73,0)
HCVDAA(RORTSK) ;
"RTN","RORX021",74,0)
 N RORLTST       ; Closed root of the list of lab tests for the
"RTN","RORX021",75,0)
 ;               ; Lab search API
"RTN","RORX021",76,0)
 N RORREG        ; Registry IEN
"RTN","RORX021",77,0)
 N RORSDT       ; Pharmacy start date
"RTN","RORX021",78,0)
 N ROREDT       ; Pharmacy end date
"RTN","RORX021",79,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX021",80,0)
 N RORXL         ; Closed root of the drug list for the pharmacy
"RTN","RORX021",81,0)
 ;               ; search API 
"RTN","RORX021",82,0)
 N RORLC         ; sub-file and LOINC codes to search for FIB4
"RTN","RORX021",83,0)
 N ECNT,NSPT,RC,SFLAGS,TMP,BUF,RORDATA
"RTN","RORX021",84,0)
 N REPORT,PARAMS,ELEMENT  ;XML parent variables
"RTN","RORX021",85,0)
 ;
"RTN","RORX021",86,0)
 S (RORXL,RORLTST)="",(ECNT,RC)=0
"RTN","RORX021",87,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",88,0)
 ;--- Root node of the report
"RTN","RORX021",89,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX021",90,0)
 Q:REPORT<0 REPORT
"RTN","RORX021",91,0)
 ;
"RTN","RORX021",92,0)
 ;--- Get and prepare the report parameters
"RTN","RORX021",93,0)
 D
"RTN","RORX021",94,0)
 . N Z
"RTN","RORX021",95,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX021",96,0)
 . S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORXSDT,.RORXEDT,.SFLAGS)
"RTN","RORX021",97,0)
 . I PARAMS<0 S RC=PARAMS Q
"RTN","RORX021",98,0)
 . S Z=0,RORDATA("IDLST")=""
"RTN","RORX021",99,0)
 . F  S Z=$O(RORTSK("PARAMS","LRGRANGES","C",Z)) Q:'Z  D
"RTN","RORX021",100,0)
 .. S RORDATA("IDLST")=RORDATA("IDLST")_$S(RORDATA("IDLST")'="":",",1:"")_Z
"RTN","RORX021",101,0)
 . K:RORDATA("IDLST")="" RORDATA("IDLST")
"RTN","RORX021",102,0)
 . I $D(RORDATA("IDLST")) D  Q:RC<0
"RTN","RORX021",103,0)
 .. D LIVPARAM^RORX019(.RORDATA,.RORTSK,.RORLC)
"RTN","RORX021",104,0)
 .. ;--- Add lab results range parameters to output
"RTN","RORX021",105,0)
 .. S RC=$$PARAMS(PARAMS,.RORDATA,.RORTSK)
"RTN","RORX021",106,0)
 .. Q:RC<0
"RTN","RORX021",107,0)
 .. S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"FIB4",$$OPTXT^RORXU002(.RORDATA),PARAMS)
"RTN","RORX021",108,0)
 .. I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX021",109,0)
 . Q:RC<0
"RTN","RORX021",110,0)
 . ;--- Get and store treatment history parameters
"RTN","RORX021",111,0)
 . M BUF=RORTSK("PARAMS","TREATMENT_HISTORY","A")  Q:$D(BUF)<10
"RTN","RORX021",112,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"TREATMENT_HISTORY",$$OPTXT^RORXU002(.BUF),PARAMS)
"RTN","RORX021",113,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORX021",114,0)
 . S TMP=""
"RTN","RORX021",115,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORX021",116,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,BUF(TMP))
"RTN","RORX021",117,0)
 . ;--- Report header
"RTN","RORX021",118,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX021",119,0)
 . ;--- Query the registry
"RTN","RORX021",120,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX021",121,0)
 . S RC=$$QUERY^RORX021A(REPORT,SFLAGS,.NSPT,.RORLC)
"RTN","RORX021",122,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",123,0)
 . ;--- Store the results
"RTN","RORX021",124,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX021",125,0)
 . S RC=$$STORE^RORX021A(REPORT,NSPT)
"RTN","RORX021",126,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",127,0)
 ;--- Cleanup
"RTN","RORX021",128,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",129,0)
 ;
"RTN","RORX021",130,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX021",131,0)
 ;
"RTN","RORX021",132,0)
  ;*****************************************************************************
"RTN","RORX021",133,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX021",134,0)
 ;
"RTN","RORX021",135,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX021",136,0)
 ;
"RTN","RORX021",137,0)
 ; Return Values:
"RTN","RORX021",138,0)
 ;       <0  Error code
"RTN","RORX021",139,0)
 ;        0  Ok
"RTN","RORX021",140,0)
 ;*****************************************************************************
"RTN","RORX021",141,0)
PARAMS(PARTAG,RORDATA,RORTSK) ;  Currently, only FIB-4 is used for this report
"RTN","RORX021",142,0)
 N PARAMS,DESC,TMP,RC S RC=0
"RTN","RORX021",143,0)
 ;--- Lab test ranges
"RTN","RORX021",144,0)
 S RORDATA("RANGE",4)=0 ;initialize FIB4 to 'no range passed in'
"RTN","RORX021",145,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",4)) D  Q:RC<0 RC
"RTN","RORX021",146,0)
 . N ELEMENT,NODE,RTAG,RANGE
"RTN","RORX021",147,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX021",148,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX021",149,0)
 . S RANGE=0,DESC=$$RTEXT^RORX019A(4,.RORDATA,.RORTSK) ;get range description
"RTN","RORX021",150,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG) ;add desc to output
"RTN","RORX021",151,0)
 . I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX021",152,0)
 . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",4)
"RTN","RORX021",153,0)
 . ;--- Process the range values
"RTN","RORX021",154,0)
 . S TMP=$G(@NODE@(4,"L"))
"RTN","RORX021",155,0)
 . I TMP'="" D  S RANGE=1
"RTN","RORX021",156,0)
 .. D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP) S RORDATA("RANGE",4)=1
"RTN","RORX021",157,0)
 .. S TMP=$G(@NODE@(4,"H"))
"RTN","RORX021",158,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX021",159,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP) S RORDATA("RANGE",4)=1
"RTN","RORX021",160,0)
 .. I RANGE D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX021",161,0)
 Q RC
"RTN","RORX021",162,0)
 ;
"RTN","RORX021A")
0^19^B180829631^B172044491
"RTN","RORX021A",1,0)
RORX021A ;BPOIFO/CLR - HCV DAA CANDIDATES(QUERY & STORE) ;7/15/11 3:37pm
"RTN","RORX021A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17,19,21,27,26,31,33**;Feb 17, 2006;Build 81
"RTN","RORX021A",3,0)
 ;
"RTN","RORX021A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX021A",5,0)
 ;
"RTN","RORX021A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX021A",7,0)
 ; #10035 Direct read of the DOD field of the file #2 (supported)
"RTN","RORX021A",8,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX021A",9,0)
 ; #10103 $$TRIM^XLFSTR (supported)
"RTN","RORX021A",10,0)
 ; #10103 $$UP^XLFSTR (supported)
"RTN","RORX021A",11,0)
 ;   
"RTN","RORX021A",12,0)
 ;******************************************************************************
"RTN","RORX021A",13,0)
 ;******************************************************************************
"RTN","RORX021A",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX021A",15,0)
 ;        
"RTN","RORX021A",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX021A",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX021A",18,0)
 ;ROR*1.5*19   JUN  2012   K GUPTA      Support for ICD-10 Coding System
"RTN","RORX021A",19,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added ICN as last report column if
"RTN","RORX021A",20,0)
 ;                                      additional identifier option selected
"RTN","RORX021A",21,0)
 ;ROR*1.5*27   FEB 2015    T KOPP       Remove requirement to skip patient in
"RTN","RORX021A",22,0)
 ;                                      report if they received Boceprevir or
"RTN","RORX021A",23,0)
 ;                                      Telaprevir, removed requirement that
"RTN","RORX021A",24,0)
 ;                                      only genotype 1 is included on the
"RTN","RORX021A",25,0)
 ;                                      report.
"RTN","RORX021A",26,0)
 ;ROR*1.5*26   MAR 2015    T KOPP       Added FIB-4 as report column if FIB-4
"RTN","RORX021A",27,0)
 ;                                      range option selected (STORE), calculate
"RTN","RORX021A",28,0)
 ;                                      FIB-4 score if parameter selected. 
"RTN","RORX021A",29,0)
 ;                                      Remove treatment status column. 
"RTN","RORX021A",30,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT ,PCP,and AGE/DOB as additional
"RTN","RORX021A",31,0)
 ;                                      identifiers.
"RTN","RORX021A",32,0)
 ;ROR*1.5*33   APR 2018    F TRAXLER    Adding FUT_APPT as additional identifier.
"RTN","RORX021A",33,0)
 ;      
"RTN","RORX021A",34,0)
 ;******************************************************************************
"RTN","RORX021A",35,0)
 ;******************************************************************************
"RTN","RORX021A",36,0)
 Q
"RTN","RORX021A",37,0)
 ;
"RTN","RORX021A",38,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX021A",39,0)
 ;
"RTN","RORX021A",40,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",41,0)
 ;
"RTN","RORX021A",42,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX021A",43,0)
 ;
"RTN","RORX021A",44,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX021A",45,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX021A",46,0)
 ;
"RTN","RORX021A",47,0)
 ; Return Values:
"RTN","RORX021A",48,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",49,0)
 ;        0  Ok
"RTN","RORX021A",50,0)
 ;        1  Skip this result
"RTN","RORX021A",51,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",52,0)
 ;
"RTN","RORX021A",53,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX021A",54,0)
 N DATE,IEN,NAME,RC,TMP,VAL,CAT,SUB
"RTN","RORX021A",55,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX021A",56,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX021A",57,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX021A",58,0)
 S CAT=$P(RESULT(2),U,4)    Q:CAT="" 1   ; Category(lab group) of the test
"RTN","RORX021A",59,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX021A",60,0)
 ;--- Skip if test is not in lab groups HepC GT, Quant, or Qual
"RTN","RORX021A",61,0)
 I CAT'="HepC GT",(CAT'="HepC Quant"),(CAT'="HepC Qual") Q 1
"RTN","RORX021A",62,0)
 ;=== Mark values as quantitative, qualitative or responded to treatment
"RTN","RORX021A",63,0)
 ;---  HCVQT=quant,HCVQL=qual,HCVOK=cured
"RTN","RORX021A",64,0)
 I CAT="HepC Quant"!(CAT="HepC Qual") D  Q:TMP 1
"RTN","RORX021A",65,0)
 . S TMP=0
"RTN","RORX021A",66,0)
 . S VAL=$$UP^XLFSTR(VAL)  ;convert to upper case
"RTN","RORX021A",67,0)
 . S VAL=$TR(VAL," ")  ;strip out all spaces
"RTN","RORX021A",68,0)
 . I VAL["POS" S SUB="HCVQL" Q
"RTN","RORX021A",69,0)
 . I $E(VAL,1,1)="P" S SUB="HCVQL" Q
"RTN","RORX021A",70,0)
 . I VAL["NEG" S SUB="HCVOK" Q
"RTN","RORX021A",71,0)
 . I VAL["NO" S SUB="HCVOK" Q
"RTN","RORX021A",72,0)
 . I $E(VAL,1,1)="N" S SUB="HCVOK" Q
"RTN","RORX021A",73,0)
 . I VAL["COMMENT"!(VAL["CANC")!(VAL["DNR")!(VAL["TNP") S TMP=1 Q
"RTN","RORX021A",74,0)
 . I +VAL=VAL,VAL<51 S TMP=1 Q  ;skip abnormally low values
"RTN","RORX021A",75,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," >,GT")) S SUB="HCVQT" Q
"RTN","RORX021A",76,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," <,LT")) S SUB="HCVOK" Q
"RTN","RORX021A",77,0)
 . S TMP=1
"RTN","RORX021A",78,0)
 S SUB=$S(CAT="HepC GT":"GT",1:SUB)
"RTN","RORX021A",79,0)
 ;--- Store the result
"RTN","RORX021A",80,0)
 S @ROR8DST@(SUB,DATE)=$P(RESULT(1),U,3)
"RTN","RORX021A",81,0)
 Q 0
"RTN","RORX021A",82,0)
 ;
"RTN","RORX021A",83,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX021A",84,0)
 ; REPORT        Parent IEN of report
"RTN","RORX021A",85,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX021A",86,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX021A",87,0)
 ; .RORLC        sub-file and LOINC codes to search for FIB4
"RTN","RORX021A",88,0)
 ;
"RTN","RORX021A",89,0)
 ; Return Values:
"RTN","RORX021A",90,0)
 ;       <0  Fatal error
"RTN","RORX021A",91,0)
 ;        0  Ok
"RTN","RORX021A",92,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",93,0)
 ;
"RTN","RORX021A",94,0)
QUERY(REPORT,FLAGS,NSPT,RORLC) ;
"RTN","RORX021A",95,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX021A",96,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX021A",97,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX021A",98,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX021A",99,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX021A",100,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX021A",101,0)
 N RORXCDT       ; User selected cut off date for registry meds
"RTN","RORX021A",102,0)
 N RORTS         ; User selected treatment status categories
"RTN","RORX021A",103,0)
 N RORXEDT       ; RX end date
"RTN","RORX021A",104,0)
 N RORXSDT       ; RX start date
"RTN","RORX021A",105,0)
 N RORTH         ; Patient treatment status (EXP=experienced, NAIVE=naive)
"RTN","RORX021A",106,0)
 ;
"RTN","RORX021A",107,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX021A",108,0)
 N RCC,FLAG,HCV,GT,ROR1,ROR2,ROR3
"RTN","RORX021A",109,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX021A",110,0)
 S (CNT,ECNT,NSPT,RC)=0,(UTEDT,UTSDT)=0
"RTN","RORX021A",111,0)
 ;=== Set up parameters
"RTN","RORX021A",112,0)
 ;--- Utilization date range
"RTN","RORX021A",113,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",114,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX021A",115,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX021A",116,0)
 ;--- Number of patients in the registry
"RTN","RORX021A",117,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX021A",118,0)
 ;--- Set up Treatment status parameters
"RTN","RORX021A",119,0)
 F TMP="NAIVE","EXP","EXP_DAYS" D
"RTN","RORX021A",120,0)
 . S RORTS(TMP)=$$PARAM^RORTSK01("TREATMENT_HISTORY",TMP)
"RTN","RORX021A",121,0)
 ;--- Lab parameters
"RTN","RORX021A",122,0)
 S RORLDST("RORCB")="$$LTSCB^RORX021A"
"RTN","RORX021A",123,0)
 ;--- Labs date range
"RTN","RORX021A",124,0)
 S LTSDT=""
"RTN","RORX021A",125,0)
 S LTEDT=DT
"RTN","RORX021A",126,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",127,0)
 S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX021A",128,0)
 ;== Pharm parameters
"RTN","RORX021A",129,0)
 S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORX021A",130,0)
 S RORXDST("RORCB")="$$RXOCB^RORX021A"   ;call back routine
"RTN","RORX021A",131,0)
 ;--- RX cut off date (inverse)/shift cut off back one day
"RTN","RORX021A",132,0)
 N X1,X2,X S X2=-(+RORTS("EXP_DAYS")+1),X1=DT D C^%DTC S RORXCDT=99999999-X
"RTN","RORX021A",133,0)
 ;--- RX start and end dates
"RTN","RORX021A",134,0)
 S RORXSDT=2000101  ;start date 1/1/1900
"RTN","RORX021A",135,0)
 S RORXEDT=DT
"RTN","RORX021A",136,0)
 ;--- RX list of HepC registry drugs
"RTN","RORX021A",137,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX021A",138,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG)
"RTN","RORX021A",139,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",140,0)
 S RORXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX021A",141,0)
 ;--- Set up Clinic/Division list parameters date_range_3
"RTN","RORX021A",142,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX021A",143,0)
 ;--- Set up ICD parameters
"RTN","RORX021A",144,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX021A",145,0)
 ;=== Browse through the registry records
"RTN","RORX021A",146,0)
 S IEN=0
"RTN","RORX021A",147,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX021A",148,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX021A",149,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",150,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX021A",151,0)
 . ;--- Get patient DFN
"RTN","RORX021A",152,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX021A",153,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX021A",154,0)
 . ;--- Check if the patient should be skipped based on standard filters
"RTN","RORX021A",155,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,UTSDT,UTEDT)
"RTN","RORX021A",156,0)
 . ;--- Check if patient should be skipped because of ICD codes
"RTN","RORX021A",157,0)
 . S RCC=0
"RTN","RORX021A",158,0)
 . I FLAG'="ALL" D
"RTN","RORX021A",159,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX021A",160,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX021A",161,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX021A",162,0)
 . ;
"RTN","RORX021A",163,0)
 . ;--- Check if patient should be skipped because of Clinic or Division 
"RTN","RORX021A",164,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX021A",165,0)
 . ;=== Check labs and meds
"RTN","RORX021A",166,0)
 . S SKIP=1,UTIL=0
"RTN","RORX021A",167,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX021A",168,0)
 . . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"LR"))
"RTN","RORX021A",169,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,+RORREG,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX021A",170,0)
 . . Q:RC'>0
"RTN","RORX021A",171,0)
 . . ;=== Skip if patient no longer has HCV
"RTN","RORX021A",172,0)
 . . S ROR1=+$O(@RORLDST@("HCVOK","")),ROR2=+$O(@RORLDST@("HCVQL","")),ROR3=(+$O(@RORLDST@("HCVQT","")))
"RTN","RORX021A",173,0)
 . . I ROR1>0 D  Q:SKIP=1
"RTN","RORX021A",174,0)
 . . . ;--- Skip if date of most recent HCV test is normal
"RTN","RORX021A",175,0)
 . . . I (ROR1<ROR2),(ROR1<ROR3) S SKIP=1 Q
"RTN","RORX021A",176,0)
 . . . I (ROR1<ROR2),(ROR3=0) S SKIP=1 Q
"RTN","RORX021A",177,0)
 . . . I (ROR1<ROR3),(ROR2=0) S SKIP=1 Q
"RTN","RORX021A",178,0)
 . . . ;--- Skip if no qual or quant test
"RTN","RORX021A",179,0)
 . . . I ROR2+ROR3=0 S SKIP=1 Q
"RTN","RORX021A",180,0)
 . . . S SKIP=0
"RTN","RORX021A",181,0)
 . . ;--- Check if patient should be skipped because of user selected Treatment status
"RTN","RORX021A",182,0)
 . . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"RX"))
"RTN","RORX021A",183,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX021A",184,0)
 . . Q:RC<0  ;error occurred
"RTN","RORX021A",185,0)
 . . I $G(RORXDST("SKIP")) S SKIP=1 K RORXDST("SKIP") Q  ;skip if taking DAA meds
"RTN","RORX021A",186,0)
 . . I RC>0,'+RORTS("EXP") S SKIP=1 Q  ; skip naive patients 
"RTN","RORX021A",187,0)
 . . I RC=0,'+RORTS("NAIVE") S SKIP=1 Q  ;skip experienced patients
"RTN","RORX021A",188,0)
 . . I RC>0,$O(@RORXDST@(RORXCDT),-1) S SKIP=1 Q  ;skip if patient has meds after cutoff
"RTN","RORX021A",189,0)
 . . ;--- Include patient 
"RTN","RORX021A",190,0)
 . . S RORTH=$S(RC>0:"EXP",RC=0:"NAIVE",1:"")
"RTN","RORX021A",191,0)
 . . S SKIP=0
"RTN","RORX021A",192,0)
 . ;--- Check if patient should be skipped because no utilization in the corresponding date range
"RTN","RORX021A",193,0)
 . I 'SKIP D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",194,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX021A",195,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX021A",196,0)
 . . S:'UTIL SKIP=1
"RTN","RORX021A",197,0)
 . ;
"RTN","RORX021A",198,0)
 . ; Skip patient if FIB4 range has been selected and score does not match parameters
"RTN","RORX021A",199,0)
 . I 'SKIP,$G(RORDATA("IDLST")) D
"RTN","RORX021A",200,0)
 . . N OK
"RTN","RORX021A",201,0)
 . . S OK=$$CALCFIB^RORX019A(PATIEN,"",.RORDATA,IEN,.RORLC)
"RTN","RORX021A",202,0)
 . . I OK<0 S SKIP=1 Q
"RTN","RORX021A",203,0)
 . . I '$$INRANGE^RORX019(.RORDATA) S SKIP=1 Q  ;exclude patient from report if ANY score is out of range
"RTN","RORX021A",204,0)
 . . I '$$SKIP^RORX019(.RORDATA) S SKIP=1  ;exclude patient from report with null scores
"RTN","RORX021A",205,0)
 . ;--- Skip the patient if not all selection criteria have been met
"RTN","RORX021A",206,0)
 . I SKIP K ^TMP("RORX021",$J,"PAT",PATIEN)  Q
"RTN","RORX021A",207,0)
 . ;
"RTN","RORX021A",208,0)
 . ;--- Get and store the patient's data  last4^name^treatment status^ICN^FIB-4 score^PACT^PCP^AGE/DOB
"RTN","RORX021A",209,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX021A",210,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX021A",211,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORTH_U_TMP_U_$G(RORDATA("SCORE",4))
"RTN","RORX021A",212,0)
 . S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") D
"RTN","RORX021A",213,0)
 . . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX021A",214,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","PACT"):$$PACT^RORUTL02(PATIEN),1:"")
"RTN","RORX021A",215,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=^TMP("RORX021",$J,"PAT",PATIEN)_U_TMP
"RTN","RORX021A",216,0)
 . S TMP=$S($$PARAM^RORTSK01("PATIENTS","PCP"):$$PCP^RORUTL02(PATIEN),1:"")
"RTN","RORX021A",217,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=^TMP("RORX021",$J,"PAT",PATIEN)_U_TMP_U_AGE
"RTN","RORX021A",218,0)
 . S TMP=$S($$PARAM^RORTSK01("OPTIONS","FUT_APPT"):$$FUTAPPT^RORUTL02(PATIEN,$$PARAM^RORTSK01("OPTIONS","FUT_APPT")),1:"")
"RTN","RORX021A",219,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=^TMP("RORX021",$J,"PAT",PATIEN)_U_TMP
"RTN","RORX021A",220,0)
 . S NSPT=NSPT+1   ;increment count of selected patients
"RTN","RORX021A",221,0)
 ;
"RTN","RORX021A",222,0)
 D FREE^RORTMP(RORXL)  ;clean up drug list
"RTN","RORX021A",223,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX021A",224,0)
 ;
"RTN","RORX021A",225,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX021A",226,0)
 ;
"RTN","RORX021A",227,0)
 ;
"RTN","RORX021A",228,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",229,0)
 ;
"RTN","RORX021A",230,0)
 ;
"RTN","RORX021A",231,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX021A",232,0)
 ;
"RTN","RORX021A",233,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX021A",234,0)
 ;                               processed.
"RTN","RORX021A",235,0)
 ;
"RTN","RORX021A",236,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX021A",237,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX021A",238,0)
 ;                                 ^02: Drug name
"RTN","RORX021A",239,0)
 ;
"RTN","RORX021A",240,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX021A",241,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX021A",242,0)
 ;
"RTN","RORX021A",243,0)
 ;Return Values:
"RTN","RORX021A",244,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",245,0)
 ;        0  Ok
"RTN","RORX021A",246,0)
 ;        1  Skip this result
"RTN","RORX021A",247,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",248,0)
 ;
"RTN","RORX021A",249,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX021A",250,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX021A",251,0)
 ;--- Skip med if med does not have a generic name
"RTN","RORX021A",252,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX021A",253,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX021A",254,0)
 E  Q 1
"RTN","RORX021A",255,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX021A",256,0)
 ;--- Process the order
"RTN","RORX021A",257,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX021A",258,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX021A",259,0)
 S RXCNT=0
"RTN","RORX021A",260,0)
 ;--- Original prescription
"RTN","RORX021A",261,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX021A",262,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX021A",263,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",264,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",265,0)
 E  D             ;--- Outpatient
"RTN","RORX021A",266,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX021A",267,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX021A",268,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",269,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",270,0)
 ;--- Refills and partials
"RTN","RORX021A",271,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX021A",272,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX021A",273,0)
 . S IRP=0
"RTN","RORX021A",274,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX021A",275,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX021A",276,0)
 . . I TMP>0  S RXCNT=RXCNT+1,TMP=99999999-TMP  D
"RTN","RORX021A",277,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",278,0)
 Q 0
"RTN","RORX021A",279,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX021A",280,0)
 ;
"RTN","RORX021A",281,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX021A",282,0)
 ; NSPT          Number of selected patients
"RTN","RORX021A",283,0)
 ;
"RTN","RORX021A",284,0)
 ; Return Values:
"RTN","RORX021A",285,0)
 ;       <0  Error code
"RTN","RORX021A",286,0)
 ;        0  Ok
"RTN","RORX021A",287,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",288,0)
 ;
"RTN","RORX021A",289,0)
STORE(REPORT,NSPT) ;
"RTN","RORX021A",290,0)
 N RORFDT        ;med fill date
"RTN","RORX021A",291,0)
 N RORLBG        ;lab test type (GT, HCVQT,HCVQL)
"RTN","RORX021A",292,0)
 N RORLVAL       ;lab value
"RTN","RORX021A",293,0)
 N RORRX         ;med name
"RTN","RORX021A",294,0)
 N RORSTNAM      ;
"RTN","RORX021A",295,0)
 N RORLDST
"RTN","RORX021A",296,0)
 N RORXDST
"RTN","RORX021A",297,0)
 N RORICN
"RTN","RORX021A",298,0)
 N RORFIB4
"RTN","RORX021A",299,0)
 N RORPACT
"RTN","RORX021A",300,0)
 N RORPCP
"RTN","RORX021A",301,0)
 N RORBODY,PTAG  ;parent iens
"RTN","RORX021A",302,0)
 N CNT,DATE,DFN,ECNT,IEN,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,THIST,AGE,AGETYPE
"RTN","RORX021A",303,0)
 N GT,HCVQT,HCV,HCVQL,RORAPPT
"RTN","RORX021A",304,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX021A",305,0)
 ;--- Create 'patients' table
"RTN","RORX021A",306,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX021A",307,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX021A",308,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX021A",309,0)
 F  S DFN=$O(^TMP("RORX021",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX021A",310,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX021A",311,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",312,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX021",$J,"PAT",DFN))
"RTN","RORX021A",313,0)
 . ;--- Patient's data
"RTN","RORX021A",314,0)
 . S TMP=$G(@NODE)
"RTN","RORX021A",315,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),THIST=$P(TMP,U,3),RORICN=$P(TMP,U,4),RORFIB4=$P(TMP,U,5)
"RTN","RORX021A",316,0)
 . S RORPACT=$P(TMP,U,6),RORPCP=$P(TMP,U,7),AGE=$P(TMP,U,8),RORAPPT=$P(TMP,U,9)
"RTN","RORX021A",317,0)
 . ;--- get lab results
"RTN","RORX021A",318,0)
 . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"LR"))
"RTN","RORX021A",319,0)
 . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"RX"))
"RTN","RORX021A",320,0)
 . ;--- Gets most recent result for HepC Qual, HepC Quant and GT
"RTN","RORX021A",321,0)
 . ;    HCVQT=date of most recent quanitative test^result
"RTN","RORX021A",322,0)
 . ;    HCVQL=date of most recent qualitative test^result
"RTN","RORX021A",323,0)
 . ;    GT=date of most recent GT test^result
"RTN","RORX021A",324,0)
 . K HCVQT,HCVQL,GT
"RTN","RORX021A",325,0)
 . F RORLBG="HCVQT","HCVQL","GT" D
"RTN","RORX021A",326,0)
 . . S NODE=RORLBG,@NODE="^"
"RTN","RORX021A",327,0)
 . . S RORFDT=$O(@RORLDST@(RORLBG,""))
"RTN","RORX021A",328,0)
 . . Q:RORFDT=""
"RTN","RORX021A",329,0)
 . . S RORLVAL=$G(@RORLDST@(RORLBG,RORFDT))
"RTN","RORX021A",330,0)
 . . S RORFDT=9999999-RORFDT
"RTN","RORX021A",331,0)
 . . S RORFDT=RORFDT\1  ;strip time  
"RTN","RORX021A",332,0)
 . . S @NODE=(RORFDT)_U_RORLVAL
"RTN","RORX021A",333,0)
 . ;--- get most recent registry med if experienced
"RTN","RORX021A",334,0)
 . ;--- if more than one med give preference to INTERFERON
"RTN","RORX021A",335,0)
 . S RORFDT=$O(@RORXDST@("")),RORRX=""
"RTN","RORX021A",336,0)
 . I THIST="EXP" D
"RTN","RORX021A",337,0)
 . . S RORSTNAM="",RORRX=""
"RTN","RORX021A",338,0)
 . . F  S RORSTNAM=$O(@RORXDST@(RORFDT,RORSTNAM)) Q:RORSTNAM=""  D
"RTN","RORX021A",339,0)
 . . . S RORRX=$S(RORRX="":RORSTNAM,RORRX["INTERFERON":RORRX,1:RORSTNAM)
"RTN","RORX021A",340,0)
 . . S RORFDT=99999999-RORFDT
"RTN","RORX021A",341,0)
 . . S RORFDT=RORFDT\1
"RTN","RORX021A",342,0)
 . S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,RORBODY,,DFN)
"RTN","RORX021A",343,0)
 . ;--- give preference to quant result over qual result
"RTN","RORX021A",344,0)
 . S HCV=$S(+$G(HCVQL)>+$G(HCVQT):HCVQL,$G(HCVQT):HCVQT,1:"")
"RTN","RORX021A",345,0)
 . ;--- store
"RTN","RORX021A",346,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,PTAG,1)
"RTN","RORX021A",347,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,PTAG,2)
"RTN","RORX021A",348,0)
 . S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") I AGETYPE'="ALL" D
"RTN","RORX021A",349,0)
 . . D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,PTAG,1)
"RTN","RORX021A",350,0)
 . ; I $G(RORDATA("LIST"))'["4" D ADDVAL^RORTSK11(RORTSK,"STATUS",THIST,PTAG,1)
"RTN","RORX021A",351,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV_DATE",$P(HCV,U),PTAG,1)
"RTN","RORX021A",352,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV",$P(HCV,U,2),PTAG,3)
"RTN","RORX021A",353,0)
 . D ADDVAL^RORTSK11(RORTSK,"GT",$P(GT,U,2),PTAG,1)
"RTN","RORX021A",354,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",RORFDT,PTAG,1)
"RTN","RORX021A",355,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_MED",RORRX,PTAG,1)
"RTN","RORX021A",356,0)
 . I $G(RORDATA("IDLST"))'="" D
"RTN","RORX021A",357,0)
 . . S:RORDATA("IDLST")["4" TMP=$$ADDVAL^RORTSK11(RORTSK,"FIB4",RORFIB4,PTAG,3)
"RTN","RORX021A",358,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",RORICN,PTAG,1)
"RTN","RORX021A",359,0)
 . I $$PARAM^RORTSK01("PATIENTS","PACT") D ADDVAL^RORTSK11(RORTSK,"PACT",RORPACT,PTAG,1)
"RTN","RORX021A",360,0)
 . I $$PARAM^RORTSK01("PATIENTS","PCP") D ADDVAL^RORTSK11(RORTSK,"PCP",RORPCP,PTAG,1)
"RTN","RORX021A",361,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORAPPT,PTAG,1)
"RTN","RORX021A",362,0)
 . S PTCNT=PTCNT+1
"RTN","RORX021A",363,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX021A",364,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX021A",365,0)
 ;---
"RTN","RORX021A",366,0)
 Q ECNT
"RTN","RORX024")
0^11^B81144322^B77616427
"RTN","RORX024",1,0)
RORX024 ;ALB/TK,MAF - HEP A VACCINE OR IMMUNITY REPORT ; 27 Jul 2016  3:03 PM
"RTN","RORX024",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29,31,32,33**;Feb 17, 2006;Build 81
"RTN","RORX024",3,0)
 ;
"RTN","RORX024",4,0)
 ;******************************************************************************
"RTN","RORX024",5,0)
 ; This routine uses the following IAs:
"RTN","RORX024",6,0)
 ;
"RTN","RORX024",7,0)
 ; #10103 HL7TFM^XLFDT
"RTN","RORX024",8,0)
 ;
"RTN","RORX024",9,0)
 ;******************************************************************************
"RTN","RORX024",10,0)
 ;******************************************************************************
"RTN","RORX024",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX024",12,0)
 ;        
"RTN","RORX024",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX024",14,0)
 ;-----------  ----------  -----------  ---------------------------------------
"RTN","RORX024",15,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added 'Hep A vaccine or immunity report'
"RTN","RORX024",16,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional
"RTN","RORX024",17,0)
 ;                                      identifiers.
"RTN","RORX024",18,0)
 ;ROR*1.5*32   11/01/17    S ALSAHHAR   Print the most recent Immunity result
"RTN","RORX024",19,0)
 ;ROR*1.5*33   MAR 2018    M FERRARESE  Adding FUTURE APPOINTMENT as additional identifiers.
"RTN","RORX024",20,0)
 ;******************************************************************************
"RTN","RORX024",21,0)
 ;******************************************************************************
"RTN","RORX024",22,0)
 ;
"RTN","RORX024",23,0)
 Q
"RTN","RORX024",24,0)
 ;
"RTN","RORX024",25,0)
 ;***** COMPILES THE "HEP A VACCINE OR IMMUNITY" REPORT
"RTN","RORX024",26,0)
 ; REPORT CODE: 024
"RTN","RORX024",27,0)
 ;
"RTN","RORX024",28,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX024",29,0)
 ;
"RTN","RORX024",30,0)
 ; The ^TMP("RORX024",$J) global node is used by this function.
"RTN","RORX024",31,0)
 ;
"RTN","RORX024",32,0)
 ; ^TMP("RORX024",$J,
"RTN","RORX024",33,0)
 ;   "PAT",
"RTN","RORX024",34,0)
 ;     DFN,              Patient descriptor
"RTN","RORX024",35,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX024",36,0)
 ;                         ^02: Patient name
"RTN","RORX024",37,0)
 ;                         ^03: Date of Death
"RTN","RORX024",38,0)
 ;                         ^04: ICN
"RTN","RORX024",39,0)
 ;                         ^05: Patient Care Team
"RTN","RORX024",40,0)
 ;                         ^06: Priamary Care Provider
"RTN","RORX024",41,0)
 ;                         ^07: Age/DOB
"RTN","RORX024",42,0)
 ;       "IMM")          Result if positive test found or "" if no positive test found
"RTN","RORX024",43,0)
 ;                         ^01: Local lab test name
"RTN","RORX024",44,0)
 ;                         ^02: Collected date (FM)
"RTN","RORX024",45,0)
 ;                         ^03: Lab test result
"RTN","RORX024",46,0)
 ;
"RTN","RORX024",47,0)
 ;       "VAC",           Number of results
"RTN","RORX024",48,0)
 ;                         ^01: #
"RTN","RORX024",49,0)
 ;           VaccineName, 
"RTN","RORX024",50,0)
 ;             VaccineDate) Always null if node exists
"RTN","RORX024",51,0)
 ;                         ^01: Null
"RTN","RORX024",52,0)
 ;
"RTN","RORX024",53,0)
 ; Return Values:
"RTN","RORX024",54,0)
 ;       <0  Error code
"RTN","RORX024",55,0)
 ;        0  Ok
"RTN","RORX024",56,0)
 ;
"RTN","RORX024",57,0)
HEPARPT(RORTSK) ;
"RTN","RORX024",58,0)
 N RORIMM        ; Immunity wanted mode (-1|0|1)  no|not selected|yes  (verified by lab test)
"RTN","RORX024",59,0)
 N RORVAC        ; Vaccination (-1|0|1)  not received|not selected|received  (verified by immunization record)
"RTN","RORX024",60,0)
 N RORREG        ; Registry IEN
"RTN","RORX024",61,0)
 N RORVEDT       ; Vaccination end date
"RTN","RORX024",62,0)
 N RORVSDT       ; Vaccination start date
"RTN","RORX024",63,0)
 N RORLEDT       ; Lab test/LOINC end date
"RTN","RORX024",64,0)
 N RORLSDT       ; Lab test/LOINC start date
"RTN","RORX024",65,0)
 N RORRTN        ; Routine to invoke for hep A processing
"RTN","RORX024",66,0)
 N RORDAYS       ; Future Days  patch 33
"RTN","RORX024",67,0)
 N RORFUT        ; Future Appointment   patch 33
"RTN","RORX024",68,0)
 ;
"RTN","RORX024",69,0)
 N NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX024",70,0)
 S RC=0,RORRTN="RORX024"
"RTN","RORX024",71,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX024",72,0)
 ;--- Root node of the report
"RTN","RORX024",73,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX024",74,0)
 Q:REPORT<0 REPORT
"RTN","RORX024",75,0)
 ;
"RTN","RORX024",76,0)
 D
"RTN","RORX024",77,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX024",78,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX024",79,0)
 . S RORVAC=$$RPTMODE("HEPAVAC")        ; Vaccination option chosen
"RTN","RORX024",80,0)
 . S RORIMM=$$RPTMODE("HEPAIMM")        ; Immunity option chosen
"RTN","RORX024",81,0)
 . S RC=$$PARAMS(REPORT,.RORVSDT,.RORVEDT,.SFLAGS)  Q:RC<0
"RTN","RORX024",82,0)
 . ;--- Report header
"RTN","RORX024",83,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX024",84,0)
 . ;--- Query the registry
"RTN","RORX024",85,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX024",86,0)
 . S RC=$$QUERY^RORX024A(SFLAGS,.NSPT,RORRTN)
"RTN","RORX024",87,0)
 . I RC Q:RC<0
"RTN","RORX024",88,0)
 . ;--- Store the results
"RTN","RORX024",89,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX024",90,0)
 . S RC=$$STORE^RORX024A(REPORT,NSPT,RORRTN)
"RTN","RORX024",91,0)
 . I RC Q:RC<0
"RTN","RORX024",92,0)
 ;
"RTN","RORX024",93,0)
 ;--- Cleanup
"RTN","RORX024",94,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX024",95,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX024",96,0)
 ;
"RTN","RORX024",97,0)
 ;
"RTN","RORX024",98,0)
 ;
"RTN","RORX024",99,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX024",100,0)
 ;
"RTN","RORX024",101,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX024",102,0)
 ;
"RTN","RORX024",103,0)
 ; Return Values:
"RTN","RORX024",104,0)
 ;       <0  Error code
"RTN","RORX024",105,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX024",106,0)
 ;
"RTN","RORX024",107,0)
HEADER(PARTAG) ;
"RTN","RORX024",108,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX024",109,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX024",110,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX024",111,0)
 ;
"RTN","RORX024",112,0)
 N HEADER,LN,RC,CTAG,LTAG
"RTN","RORX024",113,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX024",114,0)
 Q:HEADER<0 HEADER
"RTN","RORX024",115,0)
 ;automatically build the table defintion(s) listed under the header tag above  PATCH 33
"RTN","RORX024",116,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX018",HEADER)
"RTN","RORX024",117,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX024",118,0)
 ;--- LOINC codes output
"RTN","RORX024",119,0)
 I $G(RORIMM) D
"RTN","RORX024",120,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX024",121,0)
 . S LN=0 F  S LN=$O(^TMP("RORX024",$J,"IMM","TYPE",LN)) Q:'LN  D
"RTN","RORX024",122,0)
 . . S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX024",123,0)
 . . D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE",^TMP("RORX024",$J,"IMM","TYPE",LN))
"RTN","RORX024",124,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX024",HEADER)
"RTN","RORX024",125,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX024",126,0)
 ;
"RTN","RORX024",127,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX024",128,0)
 ;
"RTN","RORX024",129,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX024",130,0)
 ;
"RTN","RORX024",131,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX024",132,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX024",133,0)
 ;
"RTN","RORX024",134,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX024",135,0)
 ;               returned via this parameter
"RTN","RORX024",136,0)
 ;
"RTN","RORX024",137,0)
 ; Return Values:
"RTN","RORX024",138,0)
 ;       <0  Error code
"RTN","RORX024",139,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX024",140,0)
 ;
"RTN","RORX024",141,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX024",142,0)
 N PARAMS,TMP
"RTN","RORX024",143,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,,,.FLAGS)
"RTN","RORX024",144,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX024",145,0)
 ;--- Process the list of Lab tests/LOINC codes
"RTN","RORX024",146,0)
 I $G(RORIMM) D
"RTN","RORX024",147,0)
 . D GETIMM("RORX024") ;extract the immunity criteria for HEP A
"RTN","RORX024",148,0)
 ;--- Process the list of vaccinations
"RTN","RORX024",149,0)
 I $G(RORVAC) D
"RTN","RORX024",150,0)
 . D GETVAC("RORX024") ;extract the vaccine criteria for HEP A
"RTN","RORX024",151,0)
 ;---
"RTN","RORX024",152,0)
 Q PARAMS
"RTN","RORX024",153,0)
 ;
"RTN","RORX024",154,0)
 ;
"RTN","RORX024",155,0)
 ; -- Extract immunity (lab) data for a patient
"RTN","RORX024",156,0)
 ;
"RTN","RORX024",157,0)
 ; PATIEN        IEN of the patient (DFN)
"RTN","RORX024",158,0)
 ;
"RTN","RORX024",159,0)
 ; RORLOINC      Closed root of a variable, which contains a list
"RTN","RORX024",160,0)
 ;               of LOINC codes for HEP A or HEPB in the format
"RTN","RORX024",161,0)
 ;                          @RORLOINC@("VALID",i,
"RTN","RORX024",162,0)
 ;                                          ^01: LOINC code
"RTN","RORX024",163,0)
 ;                                   @("PRIORITY",LOINC code,priority)=""
"RTN","RORX024",164,0)
 ;
"RTN","RORX024",165,0)
 ;                      HEPA priority [0 for Ab Total or 1 for IgG]
"RTN","RORX024",166,0)
 ;                      HEPB priority [0 for Surface AB or 1 for Core AB]
"RTN","RORX024",167,0)
 ;
"RTN","RORX024",168,0)
 ; RORLRES  Closed root of an array where the data will be
"RTN","RORX024",169,0)
 ;               returned.
"RTN","RORX024",170,0)
 ;               The data will be stored into the destination
"RTN","RORX024",171,0)
 ;               array in following format:
"RTN","RORX024",172,0)
 ;
"RTN","RORX024",173,0)
 ;                    @RORLRES
"RTN","RORX024",174,0)
 ;                                 ^01: Local lab test name
"RTN","RORX024",175,0)
 ;                                 ^02: Collected date (FM)
"RTN","RORX024",176,0)
 ;                                 ^03: Lab test result
"RTN","RORX024",177,0)
 ;                             
"RTN","RORX024",178,0)
 ;  LTSDT        Lab test start date (FileMan)
"RTN","RORX024",179,0)
 ;  LTEDT        Lab test end date   (FileMan)
"RTN","RORX024",180,0)
 ;
"RTN","RORX024",181,0)
 ;  The function should return the following values:
"RTN","RORX024",182,0)
 ;
"RTN","RORX024",183,0)
 ;        <0 Error code (the search will be aborted)
"RTN","RORX024",184,0)
 ;         0 No immunity found
"RTN","RORX024",185,0)
 ;         1 At least 1 immunity found
"RTN","RORX024",186,0)
 ;
"RTN","RORX024",187,0)
LAB(PATIEN,RORLOINC,RORLRES,LTSDT,LTEDT) ;
"RTN","RORX024",188,0)
 N RC1,DFN,RORID,RORENDT,RORSTDT,ROR1,RESDT,RESULT,RORLRC,RORLAB,RORMSG,Z,Z0
"RTN","RORX024",189,0)
 ;
"RTN","RORX024",190,0)
 S DFN=PATIEN
"RTN","RORX024",191,0)
 ;
"RTN","RORX024",192,0)
 ; Search for specific LOINC codes and positive results
"RTN","RORX024",193,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX024",194,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX024",195,0)
 ;---CALL LAB API---
"RTN","RORX024",196,0)
 M RORLRC=@RORLOINC@("VALID")
"RTN","RORX024",197,0)
 S RORLRC="CH,MI",RORLRES="",RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX024",198,0)
 S RC1=$$GCPR^LA7QRY(RORID,LTSDT,LTEDT,.RORLRC,"*",.RORMSG,RORLAB)
"RTN","RORX024",199,0)
 I RC1<0 Q -1
"RTN","RORX024",200,0)
 Q:$D(@RORLAB)<10 0
"RTN","RORX024",201,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX024",202,0)
 N FS,TMP,LOINC,RESULT,RORLTN,RORVAL,RORNODE,RORSEG,SEGTYPE,RORDATE,RORX,RORX1
"RTN","RORX024",203,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX024",204,0)
 S (RORNODE,RESULT)=0
"RTN","RORX024",205,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:RORNODE=""  D
"RTN","RORX024",206,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX024",207,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX024",208,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX024",209,0)
 . S LOINC=$P($P(RORSEG,FS,4),U,1) ;get LOINC code for test
"RTN","RORX024",210,0)
 . Q:$S(LOINC="":1,1:'$D(@RORLOINC@("PRIORITY",LOINC)))  ; Call to lab does not filter out unwanted LOINCs
"RTN","RORX024",211,0)
 . S RORLTN=$P($P($P(RORSEG,FS,4),U,9),FS) ;local test name
"RTN","RORX024",212,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX024",213,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX024",214,0)
 . Q:RORVAL=""  ;quit if no value
"RTN","RORX024",215,0)
 . ;Check if value meets the positive result criteria selected for immunity
"RTN","RORX024",216,0)
 . Q:'$$POS^RORX024A(RORVAL)
"RTN","RORX024",217,0)
 . S RORDATE=$$HL7TFM^XLFDT($E($P(RORSEG,FS,15),1,8)) ;get date collected
"RTN","RORX024",218,0)
 . ;S RORDATE=RORDATE\1
"RTN","RORX024",219,0)
 . ;Output the record into RORX by priority, date, LOINC Code if positive result
"RTN","RORX024",220,0)
 . S RORX(+$O(@RORLOINC@("PRIORITY",LOINC,0)),(9999999-RORDATE),LOINC)=RORVAL_U_RORLTN
"RTN","RORX024",221,0)
 ; Find the result as the earliest date in priority 0 tests and if none, earliest in priority 1
"RTN","RORX024",222,0)
 F Z=1,2 S Z0=$O(RORX(Z,0)) I Z0 D  Q:RESULT
"RTN","RORX024",223,0)
 . S RORX1=$O(RORX(Z,Z0,0))
"RTN","RORX024",224,0)
 . Q:RORX1=""
"RTN","RORX024",225,0)
 . S RESULT=1,RORLRES=$P(RORX(Z,Z0,RORX1),U,2)_U_(9999999-Z0)_U_$P(RORX(Z,Z0,RORX1),U)
"RTN","RORX024",226,0)
 K @RORLAB
"RTN","RORX024",227,0)
 Q RESULT
"RTN","RORX024",228,0)
 ;
"RTN","RORX024",229,0)
 ;***** DETERMINES THE REPORT MODE FOR IMMUNITY OR VACCINATION
"RTN","RORX024",230,0)
 ;
"RTN","RORX024",231,0)
 ; NAME          Base name of the attribute ("HEPAIMM" or "HEPAVAC")
"RTN","RORX024",232,0)
 ;                                    OR    ("HEPBIMM" or "HEPBVAC")
"RTN","RORX024",233,0)
 ; Return Values:
"RTN","RORX024",234,0)
 ;       <0  "No"
"RTN","RORX024",235,0)
 ;        0  Not selected
"RTN","RORX024",236,0)
 ;       >0  "Yes"
"RTN","RORX024",237,0)
 ;
"RTN","RORX024",238,0)
RPTMODE(NAME) ;
"RTN","RORX024",239,0)
 Q:$$PARAM^RORTSK01("PATIENTS",NAME) 1        ; "Yes"
"RTN","RORX024",240,0)
 Q:$$PARAM^RORTSK01("PATIENTS","NO"_NAME) -1  ; "No"
"RTN","RORX024",241,0)
 Q 0
"RTN","RORX024",242,0)
 ;
"RTN","RORX024",243,0)
 ; ******* EXTRACT LOINC CODES FOR IMMUNITY ********
"RTN","RORX024",244,0)
 ; RORRTN = the name of the report routine where the IMMUNITY data should be extracted from
"RTN","RORX024",245,0)
 ;
"RTN","RORX024",246,0)
 ; Returns ^TMP(RORRTN,$J,"IMM","VALID",n)=LOINC code^LN     and
"RTN","RORX024",247,0)
 ;         ^TMP(RORRTN,$J,"IMM","PRIORITY",LOINC code,[0 for Total Ab or 1 for IgG])=""
"RTN","RORX024",248,0)
 ;         ^TMP(RORRTN,$J,"IMM","TYPE",n)=Type of LOINC: list of LOINC codes for type    (used for header output)
"RTN","RORX024",249,0)
 ;         
"RTN","RORX024",250,0)
 ;
"RTN","RORX024",251,0)
GETIMM(RORRTN) ;
"RTN","RORX024",252,0)
 N RORDATA,RORI,RORI1,COM,CT,Z
"RTN","RORX024",253,0)
 K ^TMP(RORRTN,$J,"IMM")
"RTN","RORX024",254,0)
 ;
"RTN","RORX024",255,0)
 I $E(RORRTN)=U S RORRTN=$P(RORRTN,U,2)
"RTN","RORX024",256,0)
 S CT=0
"RTN","RORX024",257,0)
 F RORI=1:1 S RORDATA=$P($T(@("IMMUNITY+"_RORI_U_RORRTN)),";;",2) Q:RORDATA=""  D
"RTN","RORX024",258,0)
 . S ^TMP(RORRTN,$J,"IMM","TYPE",RORI)=$P(RORDATA,U)_": ",COM=0
"RTN","RORX024",259,0)
 . F RORI1=2:1 S Z=$P(RORDATA,U,RORI1) Q:Z=""  D
"RTN","RORX024",260,0)
 . . S CT=CT+1,^TMP(RORRTN,$J,"IMM","VALID",CT)=Z_"^LN"
"RTN","RORX024",261,0)
 . . S ^TMP(RORRTN,$J,"IMM","PRIORITY",Z,RORI)=""
"RTN","RORX024",262,0)
 . . S ^TMP(RORRTN,$J,"IMM","TYPE",RORI)=^TMP(RORRTN,$J,"IMM","TYPE",RORI)_$S('COM:"",1:";")_Z,COM=1
"RTN","RORX024",263,0)
 ;
"RTN","RORX024",264,0)
 Q
"RTN","RORX024",265,0)
 ;
"RTN","RORX024",266,0)
 ; --  LOINC codes to check for HEP A immunity
"RTN","RORX024",267,0)
IMMUNITY ; List of LOINC codes indicating HEP A immunity results by type Line +1 = Total AB (priority), Line +2 = IgG
"RTN","RORX024",268,0)
 ;;Hepatitis A Ab Total^20575-7^13951-9^22312-3^5183-9^5184-7
"RTN","RORX024",269,0)
 ;;Hepatitis A IgG^32018-4^22313-1^5179-7
"RTN","RORX024",270,0)
 ;;
"RTN","RORX024",271,0)
 Q
"RTN","RORX024",272,0)
 ; ******* EXTRACT VACCINE NAMES ********
"RTN","RORX024",273,0)
 ; RORRTN = the name of the report routine where the IMMUNITY data should be extracted from
"RTN","RORX024",274,0)
 ;
"RTN","RORX024",275,0)
 ; Returns ^TMP(RORRTN,$J,"VAC",seq #)=pattern to match
"RTN","RORX024",276,0)
 ;
"RTN","RORX024",277,0)
GETVAC(RORRTN) ;  Extract pertinent vaccine names to match
"RTN","RORX024",278,0)
 N CT,CHAR,QUOTE,POS,RORDATA,RORI,RORI1,RESULT,VACNM,Z
"RTN","RORX024",279,0)
 ;
"RTN","RORX024",280,0)
 I $E(RORRTN="^") S RORRTN=$P(RORRTN,U,2)
"RTN","RORX024",281,0)
 S CT=0
"RTN","RORX024",282,0)
 F RORI=1:1 S RORDATA=$P($T(@("VACCINE+"_RORI_U_RORRTN)),";;",2) Q:RORDATA=""  D
"RTN","RORX024",283,0)
 . F RORI1=1:1 S VACNM=$P(RORDATA,U,RORI1) Q:VACNM=""  D
"RTN","RORX024",284,0)
 .. S RESULT=""
"RTN","RORX024",285,0)
 .. ; determine pattern
"RTN","RORX024",286,0)
 .. S QUOTE=0
"RTN","RORX024",287,0)
 .. F POS=1:1:$L(VACNM) S CHAR=$E(VACNM,POS) D
"RTN","RORX024",288,0)
 ... I POS=1,CHAR="%" S RESULT=".E" Q
"RTN","RORX024",289,0)
 ... I CHAR'="%" S RESULT=RESULT_$S('QUOTE:"1""",1:"")_CHAR,QUOTE=1 Q
"RTN","RORX024",290,0)
 ... I CHAR="%" D
"RTN","RORX024",291,0)
 .... I QUOTE S RESULT=RESULT_""""
"RTN","RORX024",292,0)
 .... S RESULT=RESULT_".E",QUOTE=0
"RTN","RORX024",293,0)
 .. I RESULT'="",QUOTE S RESULT=RESULT_""""
"RTN","RORX024",294,0)
 .. S CT=CT+1,^TMP(RORRTN,$J,"VAC",CT)=RESULT
"RTN","RORX024",295,0)
 ;
"RTN","RORX024",296,0)
 Q
"RTN","RORX024",297,0)
 ;
"RTN","RORX024",298,0)
 ; -- List of vaccines to include
"RTN","RORX024",299,0)
 ;  Business owner also requested (HEPATITIS A&B%, HEPATITIS A/B, HEPATITIS AB) that are the same as %HEPATITIS A%
"RTN","RORX024",300,0)
 ;                                (HEP A/HEP B%, HEP A&B, HEP A/HEP B) that are the same as HEP A%
"RTN","RORX024",301,0)
VACCINE ;  Hepatitis A vaccine names (% = wild card)
"RTN","RORX024",302,0)
 ;;HEP A%^%HEPATITIS A%^HEPATITIS-A%^HEPAADULT^HEPAADLT1^HEPA,%^HEPA/HEPB%^%HEP A/B%^HEPAB%^TWINRIX%
"RTN","RORX024",303,0)
 ;;
"RTN","RORX024",304,0)
 Q
"RTN","RORX024",305,0)
 ;
"RTN","RORX024A")
0^12^B104217949^B88883037
"RTN","RORX024A",1,0)
RORX024A ;ALB/TK,MAF - HEP A/B VACCINE/IMMUNITY REPORTS (QUERY & STORE) ; 27 Jul 2016  3:04 PM
"RTN","RORX024A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29,30,31,33**;Feb 17, 2006;Build 81
"RTN","RORX024A",3,0)
 ;
"RTN","RORX024A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX024A",5,0)
 ;
"RTN","RORX024A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX024A",7,0)
 ; #2051  FIND1^DIC
"RTN","RORX024A",8,0)
 ;   
"RTN","RORX024A",9,0)
 ;******************************************************************************
"RTN","RORX024A",10,0)
 ;******************************************************************************
"RTN","RORX024A",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX024A",12,0)
 ;        
"RTN","RORX024A",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX024A",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX024A",15,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added for Hep A/B vaccine/immunity reports
"RTN","RORX024A",16,0)
 ;ROR*1.5*30   MAR 2017    M FERRARESE  LOINC CODES result values changed to uppercase
"RTN","RORX024A",17,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional
"RTN","RORX024A",18,0)
 ;                                      identifiers.
"RTN","RORX024A",19,0)
 ;ROR*1.5*33   MAY 2017    M FERRARESE  Adding Future Appointment
"RTN","RORX024A",20,0)
 ;******************************************************************************
"RTN","RORX024A",21,0)
 ;******************************************************************************
"RTN","RORX024A",22,0)
 Q
"RTN","RORX024A",23,0)
 ;
"RTN","RORX024A",24,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX024A",25,0)
 ;
"RTN","RORX024A",26,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX024A",27,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX024A",28,0)
 ; RORRTN        Routine name for Hep A (RORX024) or Hep B (RORX025) report
"RTN","RORX024A",29,0)
 ;
"RTN","RORX024A",30,0)
 ; Return Values:
"RTN","RORX024A",31,0)
 ;       <0  Error code
"RTN","RORX024A",32,0)
 ;        0  Ok
"RTN","RORX024A",33,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX024A",34,0)
 ;
"RTN","RORX024A",35,0)
QUERY(FLAGS,NSPT,RORRTN) ;
"RTN","RORX024A",36,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX024A",37,0)
 N RORVSDT       ; Vaccination search start date
"RTN","RORX024A",38,0)
 N RORVEDT       ; Vaccination search end date
"RTN","RORX024A",39,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX024A",40,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX024A",41,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX024A",42,0)
 N RORICN        ; National ICN
"RTN","RORX024A",43,0)
 N RORPACT       ;Patient Care Team
"RTN","RORX024A",44,0)
 N RORPCP        ;Priamary Care Provider
"RTN","RORX024A",45,0)
 N AGE,AGETYPE
"RTN","RORX024A",46,0)
 N RORDAYS       ;Number of Days       PATCH 33
"RTN","RORX024A",47,0)
 N RORFUT        ;Future appointments  PATCH 33 
"RTN","RORX024A",48,0)
 ;
"RTN","RORX024A",49,0)
 S:$G(RORRTN)="" RORRTN="RORX024"
"RTN","RORX024A",50,0)
 N CNT,IEN,IENS,LTEDT,LTSDT,RORHEPB,PATIEN,RC,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX024A",51,0)
 N RCC,FLAG
"RTN","RORX024A",52,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX024A",53,0)
 S (CNT,NSPT,RC,SKIPEDT,SKIPSDT)=0
"RTN","RORX024A",54,0)
 ;--- Utilization date range
"RTN","RORX024A",55,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX024A",56,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX024A",57,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX024A",58,0)
 . ;--- Combined date range
"RTN","RORX024A",59,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX024A",60,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX024A",61,0)
 ;--- Number of patients in the registry
"RTN","RORX024A",62,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX024A",63,0)
 ;
"RTN","RORX024A",64,0)
 ;--- Setup the immunity and vaccination parameters
"RTN","RORX024A",65,0)
 I RORIMM  D
"RTN","RORX024A",66,0)
 . ;--- Lab/LOINC codes date range
"RTN","RORX024A",67,0)
 . S LTSDT=$$PARAM^RORTSK01("DATE_RANGE_7","START")\1
"RTN","RORX024A",68,0)
 . S LTEDT=$$PARAM^RORTSK01("DATE_RANGE_7","END")\1
"RTN","RORX024A",69,0)
 . ;--- Combined date range
"RTN","RORX024A",70,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,LTSDT)
"RTN","RORX024A",71,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,LTEDT)
"RTN","RORX024A",72,0)
 . ;--- Shift the Labs end date
"RTN","RORX024A",73,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX024A",74,0)
 I RORVAC  D
"RTN","RORX024A",75,0)
 . S RORVSDT=$$PARAM^RORTSK01("DATE_RANGE_6","START")\1
"RTN","RORX024A",76,0)
 . S RORVEDT=$$PARAM^RORTSK01("DATE_RANGE_6","END")\1
"RTN","RORX024A",77,0)
 . ;--- Combined date range
"RTN","RORX024A",78,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,RORVSDT)
"RTN","RORX024A",79,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,RORVEDT)
"RTN","RORX024A",80,0)
 . ;--- Shift the vaccine end date
"RTN","RORX024A",81,0)
 . S RORVEDT=$$FMADD^XLFDT(RORVEDT\1,1)
"RTN","RORX024A",82,0)
 Q:'(RORIMM!RORVAC) 0
"RTN","RORX024A",83,0)
 ;
"RTN","RORX024A",84,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX024A",85,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX024A",86,0)
 ;
"RTN","RORX024A",87,0)
 S RORHEPB=$S(RORRTN'="RORX024":"",1:$$FIND1^DIC(798.1,,"BQX","VA HEPB"))
"RTN","RORX024A",88,0)
 ;--- Browse through the registry records
"RTN","RORX024A",89,0)
 S IEN=0
"RTN","RORX024A",90,0)
 S FLAG=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORX024A",91,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX024A",92,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX024A",93,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX024A",94,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX024A",95,0)
 . ; Ignore patients in Hep B registry if Hep B report
"RTN","RORX024A",96,0)
 . I RORHEPB'="" Q:$D(^RORDATA(798,"AC",+RORHEPB,+IEN))
"RTN","RORX024A",97,0)
 . ;--- Get patient DFN
"RTN","RORX024A",98,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX024A",99,0)
 . ;check for patient list and quit if not on list
"RTN","RORX024A",100,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX024A",101,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX024A",102,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX024A",103,0)
 . S SKIP=1,UTIL=0
"RTN","RORX024A",104,0)
 . ;--- Check if patient should be filtered because of ICD codes
"RTN","RORX024A",105,0)
 . S RCC=0
"RTN","RORX024A",106,0)
 . I FLAG'="ALL" D
"RTN","RORX024A",107,0)
 . . S RCC=$$ICD^RORXU010(PATIEN)
"RTN","RORX024A",108,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX024A",109,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX024A",110,0)
 . ;
"RTN","RORX024A",111,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX024A",112,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX024A",113,0)
 . ;
"RTN","RORX024A",114,0)
 . S RCC=0,SKIP=1
"RTN","RORX024A",115,0)
 . D
"RTN","RORX024A",116,0)
 . . ;--- Search for vaccination data in IMMUNIZATIONS file
"RTN","RORX024A",117,0)
 . . I RORVAC D  Q:RCC<0
"RTN","RORX024A",118,0)
 . . . N VAC,ROR8PAT,ROR8LST,RORVRES
"RTN","RORX024A",119,0)
 . . . S ROR8PAT=$NA(^TMP(RORRTN,$J,"VAC"))
"RTN","RORX024A",120,0)
 . . . S RORVRES=$NA(^TMP(RORRTN,$J,"VAC_RES")) K @RORVRES
"RTN","RORX024A",121,0)
 . . . S VAC=$$QUERY^RORUTL21(PATIEN,ROR8PAT,RORVRES,RORVSDT,RORVEDT)
"RTN","RORX024A",122,0)
 . . . I VAC<0 S RCC=-1 Q
"RTN","RORX024A",123,0)
 . . . I RORVAC<0,'VAC S ^TMP(RORRTN,$J,"PAT",PATIEN,"VAC")=0 Q     ; No vaccination requested and none found 
"RTN","RORX024A",124,0)
 . . . I RORVAC>0,VAC D  Q   ; Vaccination requested, at least one found
"RTN","RORX024A",125,0)
 . . . . S ROR8LST=$NA(^TMP(RORRTN,$J,"PAT",PATIEN,"VAC"))
"RTN","RORX024A",126,0)
 . . . . S RCC=$$PROCESS^RORUTL21(RORVRES,PATIEN,ROR8LST)
"RTN","RORX024A",127,0)
 . . . . K @RORVRES
"RTN","RORX024A",128,0)
 . . . . Q:RCC<0
"RTN","RORX024A",129,0)
 . . . S RCC=-1  ;does not pass vaccination selection criteria validation
"RTN","RORX024A",130,0)
 . . ;
"RTN","RORX024A",131,0)
 . . ;--- Search for lab data positive results for selected LOINC codes
"RTN","RORX024A",132,0)
 . . I RORIMM D  Q:RCC<0
"RTN","RORX024A",133,0)
 . . . N IMM,ROR8LST,RORLOINC,RORLRES
"RTN","RORX024A",134,0)
 . . . S RORLOINC=$NA(^TMP(RORRTN,$J,"IMM"))
"RTN","RORX024A",135,0)
 . . . ; Extract positive lab test results for selected LOINC codes
"RTN","RORX024A",136,0)
 . . . S IMM=$$LAB^RORX024(PATIEN,RORLOINC,.RORLRES,LTSDT,LTEDT)
"RTN","RORX024A",137,0)
 . . . I IMM<0 S RCC=-1 Q
"RTN","RORX024A",138,0)
 . . . I RORIMM<0,'IMM D  Q     ; No immunity requested and no positive test found
"RTN","RORX024A",139,0)
 . . . . S ^TMP(RORRTN,$J,"PAT",PATIEN,"IMM")=""
"RTN","RORX024A",140,0)
 . . . I RORIMM>0,IMM D  Q   ; Immunity requested, at least one positive lab test found
"RTN","RORX024A",141,0)
 . . . . S ^TMP(RORRTN,$J,"PAT",PATIEN,"IMM")=RORLRES
"RTN","RORX024A",142,0)
 . . . S RCC=-1  ;does not pass immunity selection criteria validation
"RTN","RORX024A",143,0)
 . . S SKIP=0
"RTN","RORX024A",144,0)
 . ;
"RTN","RORX024A",145,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX024A",146,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX024A",147,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX024A",148,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX024A",149,0)
 . . S:'UTIL SKIP=1
"RTN","RORX024A",150,0)
 . ;
"RTN","RORX024A",151,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX024A",152,0)
 . I SKIP K ^TMP(RORRTN,$J,"PAT",PATIEN) Q
"RTN","RORX024A",153,0)
 . ;
"RTN","RORX024A",154,0)
 . ;--- Get and store the patient's data
"RTN","RORX024A",155,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX024A",156,0)
 . S RORICN=$S($$PARAM^RORTSK01("PATIENTS","ICN"):$$ICN^RORUTL02(PATIEN),1:"")
"RTN","RORX024A",157,0)
 . S RORPACT=$S($$PARAM^RORTSK01("PATIENTS","PACT"):$$PACT^RORUTL02(PATIEN),1:"")
"RTN","RORX024A",158,0)
 . S RORPCP=$S($$PARAM^RORTSK01("PATIENTS","PCP"):$$PCP^RORUTL02(PATIEN),1:"")
"RTN","RORX024A",159,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX024A",160,0)
 . ;
"RTN","RORX024A",161,0)
 . ;--- Patient age/DOB
"RTN","RORX024A",162,0)
 . S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") D
"RTN","RORX024A",163,0)
 . . S AGE=$S(AGETYPE="AGE":$P(VADM(4),U),AGETYPE="DOB":$$DATE^RORXU002($P(VADM(3),U)\1),1:"")
"RTN","RORX024A",164,0)
 . ;
"RTN","RORX024A",165,0)
 . ;S ^TMP(RORRTN,$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP_U_RORICN_U_RORPACT_U_RORPCP_U_AGE
"RTN","RORX024A",166,0)
 . ;
"RTN","RORX024A",167,0)
 . ; IF Future Appointment only  Patch 33
"RTN","RORX024A",168,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D 
"RTN","RORX024A",169,0)
 . . S RORDAYS=$$PARAM^RORTSK01("OPTIONS","FUT_APPT")
"RTN","RORX024A",170,0)
 . . S RORFUT=$$FUTAPPT^RORUTL02(PATIEN,RORDAYS)
"RTN","RORX024A",171,0)
 . S ^TMP(RORRTN,$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP_U_RORICN_U_RORPACT_U_RORPCP_U_AGE
"RTN","RORX024A",172,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") S ^TMP(RORRTN,$J,"PAT",PATIEN)=^TMP(RORRTN,$J,"PAT",PATIEN)_U_RORFUT
"RTN","RORX024A",173,0)
 . S NSPT=NSPT+1
"RTN","RORX024A",174,0)
 ;
"RTN","RORX024A",175,0)
 ;---
"RTN","RORX024A",176,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX024A",177,0)
 ;
"RTN","RORX024A",178,0)
POS(VAL) ; Returns 1 if lab test returns positive result (VAL)
"RTN","RORX024A",179,0)
 ;Positive results are results that are equal to "P" or contain "POS", "DETEC" or "REACT"
"RTN","RORX024A",180,0)
 ;         -- AND -- do not contain "NEG", "NO" or "IND." 
"RTN","RORX024A",181,0)
 N POS,X
"RTN","RORX024A",182,0)
 S POS=0
"RTN","RORX024A",183,0)
 S X=VAL
"RTN","RORX024A",184,0)
 S VAL=$TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","RORX024A",185,0)
 I VAL="P"!(VAL["POS")!(VAL["DETEC")!(VAL["REACT") D
"RTN","RORX024A",186,0)
 . I '(VAL["NEG"!(VAL["NO")!(VAL["IND.")) S POS=1
"RTN","RORX024A",187,0)
 Q POS
"RTN","RORX024A",188,0)
 ;
"RTN","RORX024A",189,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX024A",190,0)
 ;
"RTN","RORX024A",191,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX024A",192,0)
 ; [.]NSPT       # of patients in registry
"RTN","RORX024A",193,0)
 ;
"RTN","RORX024A",194,0)
 ; Return Values:
"RTN","RORX024A",195,0)
 ;       <0  Error code
"RTN","RORX024A",196,0)
 ;        0  Ok
"RTN","RORX024A",197,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX024A",198,0)
 ;
"RTN","RORX024A",199,0)
 ;
"RTN","RORX024A",200,0)
STORE(REPORT,NSPT,RORRTN) ;
"RTN","RORX024A",201,0)
 N CNT,DFN,DOD,ICN,ITEM,LAST4,NAME,NODE,PACT,PCP,PTCNT,PTLST,PTNAME,RC,VDATE,TMP,VAL,LTIMM,IMMLST,VACLST,VLST,AGETYPE,AGE,RORFUTAP,RORDAYS
"RTN","RORX024A",202,0)
 S RC=0,PTLST=-1
"RTN","RORX024A",203,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX024A",204,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX024A",205,0)
 ;--- Create patient list
"RTN","RORX024A",206,0)
 S PTLST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX024A",207,0)
 D ADDATTR^RORTSK11(RORTSK,PTLST,"TABLE","PATIENTS")
"RTN","RORX024A",208,0)
 ;---
"RTN","RORX024A",209,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX024A",210,0)
 F  S DFN=$O(^TMP(RORRTN,$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX024A",211,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX024A",212,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX024A",213,0)
 . S CNT=CNT+1,NODE=$NA(^TMP(RORRTN,$J,"PAT",DFN))
"RTN","RORX024A",214,0)
 . ;--- Patient's data
"RTN","RORX024A",215,0)
 . S TMP=$G(@NODE)
"RTN","RORX024A",216,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DOD=$P(TMP,U,3),ICN=$P(TMP,U,4),PACT=$P(TMP,U,5),PCP=$P(TMP,U,6),AGE=$P(TMP,U,7)
"RTN","RORX024A",217,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") S RORFUT=$P(TMP,U,8)
"RTN","RORX024A",218,0)
 . ;--- Patient list
"RTN","RORX024A",219,0)
 . S TMP=$S('RORIMM:1,RORIMM<0:$G(@NODE@("IMM"))="",1:$G(@NODE@("IMM"))'="")
"RTN","RORX024A",220,0)
 . I TMP,$S('RORVAC:1,RORVAC<0:'$G(@NODE@("VAC")),1:$G(@NODE@("VAC"))) D
"RTN","RORX024A",221,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLST,,DFN)
"RTN","RORX024A",222,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX024A",223,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX024A",224,0)
 . . ;--- Age/DOB
"RTN","RORX024A",225,0)
 . . S AGETYPE=$$PARAM^RORTSK01("AGE_RANGE","TYPE") I AGETYPE'="ALL" D
"RTN","RORX024A",226,0)
 . . . D ADDVAL^RORTSK11(RORTSK,AGETYPE,AGE,ITEM,1)
"RTN","RORX024A",227,0)
 . . ;
"RTN","RORX024A",228,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX024A",229,0)
 . . S PTCNT=PTCNT+1
"RTN","RORX024A",230,0)
 . ; IF Future Appointment only  Patch 33
"RTN","RORX024A",231,0)
 . ;I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORFUT,ITEM,1)
"RTN","RORX024A",232,0)
 .; 
"RTN","RORX024A",233,0)
 . ;--- List of vaccines
"RTN","RORX024A",234,0)
 . S VACLST=-1
"RTN","RORX024A",235,0)
 . I $O(@NODE@("VAC",""))'="" S VACLST=$$ADDVAL^RORTSK11(RORTSK,"VACCINES",,ITEM) Q:VACLST<0
"RTN","RORX024A",236,0)
 . I RORVAC=1,VACLST'<0 S NAME="" F  S NAME=$O(@NODE@("VAC",NAME)) Q:NAME=""  D
"RTN","RORX024A",237,0)
 . . S VLST=$$ADDVAL^RORTSK11(RORTSK,"VACCINE",,VACLST)
"RTN","RORX024A",238,0)
 . . Q:VLST<0
"RTN","RORX024A",239,0)
 . . S VDATE=0
"RTN","RORX024A",240,0)
 . . F  S VDATE=$O(@NODE@("VAC",NAME,VDATE))  Q:'VDATE  D
"RTN","RORX024A",241,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"VAC_NAME",NAME,VLST,1)
"RTN","RORX024A",242,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"VAC_DATE",VDATE\1,VLST,1)
"RTN","RORX024A",243,0)
 . ;--- Immunity
"RTN","RORX024A",244,0)
 . I RORIMM=1,$G(@NODE@("IMM"))'="" D
"RTN","RORX024A",245,0)
 . . S IMMLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,ITEM) Q:IMMLST<0
"RTN","RORX024A",246,0)
 . . S LTIMM=$G(@NODE@("IMM"))
"RTN","RORX024A",247,0)
 . . Q:LTIMM=""
"RTN","RORX024A",248,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",$P(LTIMM,U),IMMLST,1)
"RTN","RORX024A",249,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DATE",$P(LTIMM,U,2)\1,IMMLST,1)
"RTN","RORX024A",250,0)
 . . S VAL=$P(LTIMM,U,3)
"RTN","RORX024A",251,0)
 . . S TMP=$S($$NUMERIC^RORUTL05(VAL):3,1:1)
"RTN","RORX024A",252,0)
 . . D ADDVAL^RORTSK11(RORTSK,"RESULT",VAL,IMMLST,TMP)
"RTN","RORX024A",253,0)
 . I $$PARAM^RORTSK01("PATIENTS","ICN") D ADDVAL^RORTSK11(RORTSK,"ICN",ICN,ITEM,1)
"RTN","RORX024A",254,0)
 . I $$PARAM^RORTSK01("PATIENTS","PACT") D ADDVAL^RORTSK11(RORTSK,"PACT",PACT,ITEM,1)
"RTN","RORX024A",255,0)
 . I $$PARAM^RORTSK01("PATIENTS","PCP") D ADDVAL^RORTSK11(RORTSK,"PCP",PCP,ITEM,1)
"RTN","RORX024A",256,0)
 . I $$PARAM^RORTSK01("OPTIONS","FUT_APPT") D ADDVAL^RORTSK11(RORTSK,"FUT_APPT",RORFUT,ITEM,1)
"RTN","RORX024A",257,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX024A",258,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX024A",259,0)
 ;---
"RTN","RORX024A",260,0)
 Q 0
"RTN","RORX024A",261,0)
 ;
"RTN","RORX025")
0^13^B26668893^B23252812
"RTN","RORX025",1,0)
RORX025 ;ALB/TK,MAF - HEP B VACCINE OR IMMUNITY REPORT ;4/21/16 9:40am
"RTN","RORX025",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**29,31,33**;Feb 17, 2006;Build 81
"RTN","RORX025",3,0)
 ;
"RTN","RORX025",4,0)
 ;******************************************************************************
"RTN","RORX025",5,0)
 ;******************************************************************************
"RTN","RORX025",6,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX025",7,0)
 ;        
"RTN","RORX025",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX025",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX025",10,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added 'Hep B vaccine or immunity report'
"RTN","RORX025",11,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT, PCP, and AGE/DOB as additional
"RTN","RORX025",12,0)
 ;                                      identifiers.
"RTN","RORX025",13,0)
 ;ROR*1.5*33   MAR 2018    M FERRARESE  Adding FUTURE APPOINTMENT as additional identifiers.
"RTN","RORX025",14,0)
 ;******************************************************************************
"RTN","RORX025",15,0)
 ;******************************************************************************
"RTN","RORX025",16,0)
 ;
"RTN","RORX025",17,0)
 ;***** COMPILES THE "HEP B VACCINE OR IMMUNITY" REPORT
"RTN","RORX025",18,0)
 ; REPORT CODE: 025
"RTN","RORX025",19,0)
 ;
"RTN","RORX025",20,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX025",21,0)
 ;
"RTN","RORX025",22,0)
 ; The ^TMP("RORX025",$J) global node is used by this function.
"RTN","RORX025",23,0)
 ;
"RTN","RORX025",24,0)
 ; ^TMP("RORX025",$J,
"RTN","RORX025",25,0)
 ;   "PAT",
"RTN","RORX025",26,0)
 ;     DFN,              Patient descriptor
"RTN","RORX025",27,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX025",28,0)
 ;                         ^02: Patient name
"RTN","RORX025",29,0)
 ;                         ^03: Date of Death
"RTN","RORX025",30,0)
 ;                         ^04: ICN
"RTN","RORX025",31,0)
 ;                         ^05: Patient Care Team
"RTN","RORX025",32,0)
 ;                         ^06: Priamary Care Provider
"RTN","RORX025",33,0)
 ;                         ^07: Age/DOB
"RTN","RORX025",34,0)
 ;       "IMM")          Result if positive test found or "" if no positive test found
"RTN","RORX025",35,0)
 ;                         ^01: Local lab test name
"RTN","RORX025",36,0)
 ;                         ^02: Collected date (FM)
"RTN","RORX025",37,0)
 ;                         ^03: Lab test result
"RTN","RORX025",38,0)
 ;       "VAC",           Number of results
"RTN","RORX025",39,0)
 ;                         ^01: #
"RTN","RORX025",40,0)
 ;           VaccineName, 
"RTN","RORX025",41,0)
 ;             VaccineDate) Always null if node exists
"RTN","RORX025",42,0)
 ;                         ^01: Null
"RTN","RORX025",43,0)
 ;
"RTN","RORX025",44,0)
 ; Return Values:
"RTN","RORX025",45,0)
 ;       <0  Error code
"RTN","RORX025",46,0)
 ;        0  Ok
"RTN","RORX025",47,0)
 ;
"RTN","RORX025",48,0)
HEPBRPT(RORTSK) ;
"RTN","RORX025",49,0)
 N RORIMM        ; Immunity wanted mode (-1|0|1)  no|not selected|yes  (verified by lab test)
"RTN","RORX025",50,0)
 N RORVAC        ; Vaccination (-1|0|1)  not received|not selected|received  (verified by immunization record)
"RTN","RORX025",51,0)
 N RORREG        ; Registry IEN
"RTN","RORX025",52,0)
 N RORVEDT       ; Vaccination end date
"RTN","RORX025",53,0)
 N RORVSDT       ; Vaccination start date
"RTN","RORX025",54,0)
 N RORLEDT       ; Lab test/LOINC end date
"RTN","RORX025",55,0)
 N RORLSDT       ; Lab test/LOINC start date
"RTN","RORX025",56,0)
 N RORRTN        ; Routine to invoke for hep B processing
"RTN","RORX025",57,0)
 N RORDAYS       ; Future Days  patch 33
"RTN","RORX025",58,0)
 N RORFUT        ; Future Appointment   patch 33
"RTN","RORX025",59,0)
 ;
"RTN","RORX025",60,0)
 N NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX025",61,0)
 S RC=0,RORRTN="RORX025"
"RTN","RORX025",62,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX025",63,0)
 ;--- Root node of the report
"RTN","RORX025",64,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX025",65,0)
 Q:REPORT<0 REPORT
"RTN","RORX025",66,0)
 ;
"RTN","RORX025",67,0)
 D
"RTN","RORX025",68,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX025",69,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX025",70,0)
 . S RORVAC=$$RPTMODE^RORX024("HEPBVAC")        ; Vaccination option chosen
"RTN","RORX025",71,0)
 . S RORIMM=$$RPTMODE^RORX024("HEPBIMM")        ; Immunity option chosen
"RTN","RORX025",72,0)
 . S RC=$$PARAMS(REPORT,.RORVSDT,.RORVEDT,.SFLAGS)  Q:RC<0
"RTN","RORX025",73,0)
 . ;--- Report header
"RTN","RORX025",74,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX025",75,0)
 . ;--- Query the registry
"RTN","RORX025",76,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX025",77,0)
 . S RC=$$QUERY^RORX024A(SFLAGS,.NSPT,RORRTN)
"RTN","RORX025",78,0)
 . I RC Q:RC<0
"RTN","RORX025",79,0)
 . ;--- Store the results
"RTN","RORX025",80,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX025",81,0)
 . S RC=$$STORE^RORX024A(REPORT,NSPT,RORRTN)
"RTN","RORX025",82,0)
 . I RC Q:RC<0
"RTN","RORX025",83,0)
 ;
"RTN","RORX025",84,0)
 ;--- Cleanup
"RTN","RORX025",85,0)
 K ^TMP(RORRTN,$J)
"RTN","RORX025",86,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX025",87,0)
 ;
"RTN","RORX025",88,0)
 ;
"RTN","RORX025",89,0)
 ;
"RTN","RORX025",90,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX025",91,0)
 ;
"RTN","RORX025",92,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX025",93,0)
 ;
"RTN","RORX025",94,0)
 ; Return Values:
"RTN","RORX025",95,0)
 ;       <0  Error code
"RTN","RORX025",96,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX025",97,0)
 ;
"RTN","RORX025",98,0)
HEADER(PARTAG) ;
"RTN","RORX025",99,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="ALL"
"RTN","RORX025",100,0)
 ;;PATIENTS(#,NAME,LAST4,AGE,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="AGE"
"RTN","RORX025",101,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,DOD,VAC_NAME,VAC_DATE,LTNAME,DATE,RESULT,ICN,PACT,PCP,FUT_APPT)^I $$PARAM^RORTSK01("AGE_RANGE","TYPE")="DOB"
"RTN","RORX025",102,0)
 ;
"RTN","RORX025",103,0)
 N HEADER,LN,RC,CTAG,LTAG
"RTN","RORX025",104,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX025",105,0)
 Q:HEADER<0 HEADER
"RTN","RORX025",106,0)
  ;automatically build the table defintion(s) listed under the header tag above  PATCH 33
"RTN","RORX025",107,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX018",HEADER)
"RTN","RORX025",108,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX025",109,0)
 ;--- LOINC codes output
"RTN","RORX025",110,0)
 I $G(RORIMM) D
"RTN","RORX025",111,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX025",112,0)
 . S LN=0 F  S LN=$O(^TMP("RORX025",$J,"IMM","TYPE",LN)) Q:'LN  D
"RTN","RORX025",113,0)
 . . S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX025",114,0)
 . . D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE",^TMP("RORX025",$J,"IMM","TYPE",LN))
"RTN","RORX025",115,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX025",HEADER)
"RTN","RORX025",116,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX025",117,0)
 ;
"RTN","RORX025",118,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX025",119,0)
 ;
"RTN","RORX025",120,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX025",121,0)
 ;
"RTN","RORX025",122,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX025",123,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX025",124,0)
 ;
"RTN","RORX025",125,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX025",126,0)
 ;               returned via this parameter
"RTN","RORX025",127,0)
 ;
"RTN","RORX025",128,0)
 ; Return Values:
"RTN","RORX025",129,0)
 ;       <0  Error code
"RTN","RORX025",130,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX025",131,0)
 ;
"RTN","RORX025",132,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX025",133,0)
 N PARAMS,TMP
"RTN","RORX025",134,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,,,.FLAGS)
"RTN","RORX025",135,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX025",136,0)
 ;--- Process the list of Lab tests/LOINC codes
"RTN","RORX025",137,0)
 I $G(RORIMM) D
"RTN","RORX025",138,0)
 . D GETIMM^RORX024("RORX025") ;extract the immunity criteria for HEP B
"RTN","RORX025",139,0)
 ;--- Process the list of vaccinations
"RTN","RORX025",140,0)
 I $G(RORVAC) D
"RTN","RORX025",141,0)
 . D GETVAC^RORX024("RORX025") ;extract the vaccine criteria for HEP B
"RTN","RORX025",142,0)
 ;---
"RTN","RORX025",143,0)
 Q PARAMS
"RTN","RORX025",144,0)
 ;
"RTN","RORX025",145,0)
 ; --  LOINC codes to check for HEP B immunity
"RTN","RORX025",146,0)
IMMUNITY ; LOINC codes indicating HEP B immunity results by type Line +1 = Surface AB (priority), Line +2 = Core AB
"RTN","RORX025",147,0)
 ;;Surface AB^22322-2^10900-9^16935-9^5193-8^5194-6^22323-0^32019-2
"RTN","RORX025",148,0)
 ;;Core AB^32685-0^22318-0^13919-6^16933-4^13952-7^22316-4^5187-0^5188-8^22317-2^21005-4
"RTN","RORX025",149,0)
 ;;
"RTN","RORX025",150,0)
 Q
"RTN","RORX025",151,0)
 ;
"RTN","RORX025",152,0)
 ; -- List of Hep B vaccines to include
"RTN","RORX025",153,0)
VACCINE ;  Hepatitis B vaccine names (% = wild card)
"RTN","RORX025",154,0)
 ;;%ENGERIX-B%^%HEP B%^%HEPATITIS B%^HEPATITIS-B%^HEPB%^HEP A&B^HEPA/HEPB%^%HEP A/B%^HEPAB%^HEPATITIS A & B%^HEPATITIS A&B%
"RTN","RORX025",155,0)
 ;;HEPATITIS A/B^HEPATITIS AB^TWINRIX%
"RTN","RORX025",156,0)
 ;;
"RTN","RORX025",157,0)
 Q
"RTN","RORX025",158,0)
 ;
"RTN","RORXU002")
0^7^B171073228^B167579102
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ; 20 Apr 2016  1:21 PM
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10,13,15,17,19,21,22,26,29,30,31,33**;Feb 17, 2006;Build 81
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 ; #417    Read access to .01 field of file #40.8 (controlled)
"RTN","RORXU002",13,0)
 ; #10040  Read access to file #44 (supported)
"RTN","RORXU002",14,0)
 ; #5747   $$VLTD^ICDEX (controlled)
"RTN","RORXU002",15,0)
 ;
"RTN","RORXU002",16,0)
 ;******************************************************************************
"RTN","RORXU002",17,0)
 ;******************************************************************************
"RTN","RORXU002",18,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU002",19,0)
 ;        
"RTN","RORXU002",20,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU002",21,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU002",22,0)
 ;ROR*1.5*10   APR  2010   A SAUNDERS   Modified Lab Tests Ranges section in
"RTN","RORXU002",23,0)
 ;                                      PARAMS tag to include the 3 new reports.
"RTN","RORXU002",24,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added Division and Clinic sections in
"RTN","RORXU002",25,0)
 ;                                      PARAMS tag (pulled from RORXU006).
"RTN","RORXU002",26,0)
 ;ROR*1.5*15   JUN  2011   C RAY        Added HIV_DX
"RTN","RORXU002",27,0)
 ; 
"RTN","RORXU002",28,0)
 ;ROR*1.5*17   AUG  2011   C RAY        Modified to allow 
"RTN","RORXU002",29,0)
 ;                                      PATIENTS,OPTIONS params to have other
"RTN","RORXU002",30,0)
 ;                                      values besides boolean
"RTN","RORXU002",31,0)
 ;                                      Modified to add DATE_RANGE_4
"RTN","RORXU002",32,0)
 ;ROR*1.5*19   FEB  2012   J SCOTT      Support for ICD-10 Coding System.
"RTN","RORXU002",33,0)
 ;
"RTN","RORXU002",34,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Added flags for GENDER (SEX) selection on
"RTN","RORXU002",35,0)
 ;                                      reports in PATIENTS XML tag
"RTN","RORXU002",36,0)
 ;                                      Added ICN column if Additional Identifier
"RTN","RORXU002",37,0)
 ;                                       requested.
"RTN","RORXU002",38,0)
 ;
"RTN","RORXU002",39,0)
 ;ROR*1.5*22   FEB 2014    T KOPP       Added flags for OEF/OIF period of service
"RTN","RORXU002",40,0)
 ;                                      selection on reports in PATIENTS XML tag
"RTN","RORXU002",41,0)
 ;
"RTN","RORXU002",42,0)
 ;ROR*1.5*26   JAN 2015    T KOPP       Added flags for SVR ONLY or NO SVR ONLY
"RTN","RORXU002",43,0)
 ;                                      selection on reports in PATIENTS XML tag.
"RTN","RORXU002",44,0)
 ;                                      Suppress FIB4 header on DAA Potential
"RTN","RORXU002",45,0)
 ;                                      Candidates report if FIB-4 parameter not
"RTN","RORXU002",46,0)
 ;                                      selected
"RTN","RORXU002",47,0)
 ;
"RTN","RORXU002",48,0)
 ;ROR*1.5*29   APR 2016    T KOPP       Added DATE_RANGE_5-7 to parameter output in
"RTN","RORXU002",49,0)
 ;                                       PARAMS
"RTN","RORXU002",50,0)
 ;
"RTN","RORXU002",51,0)
 ;ROR*1.5*30   OCT 2016    M FERRARESE   Changing the dispay for "Sex" to "Birth Sex" 
"RTN","RORXU002",52,0)
 ;
"RTN","RORXU002",53,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE   Adding PACT, PCP, and AGE/DOB as additional 
"RTN","RORXU002",54,0)
 ;                                       identifiers.
"RTN","RORXU002",55,0)
 ;
"RTN","RORXU002",56,0)
 ;******************************************************************************
"RTN","RORXU002",57,0)
 ;******************************************************************************
"RTN","RORXU002",58,0)
 Q
"RTN","RORXU002",59,0)
 ;
"RTN","RORXU002",60,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",61,0)
 ;
"RTN","RORXU002",62,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",63,0)
 ;               is terminator is returned
"RTN","RORXU002",64,0)
 ;
"RTN","RORXU002",65,0)
 ; Return Values:
"RTN","RORXU002",66,0)
 ;       ""  End of definition
"RTN","RORXU002",67,0)
 ;      ...  Name of the column
"RTN","RORXU002",68,0)
 ;
"RTN","RORXU002",69,0)
COLSCAN(TERM) ;
"RTN","RORXU002",70,0)
 N CH,I,TOKEN
"RTN","RORXU002",71,0)
 F I=1:1 S TERM=$E(RORSRC,I) Q:"(,)"[TERM
"RTN","RORXU002",72,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",73,0)
 F I=I+1:1 S CH=$E(RORSRC,I) Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",74,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",75,0)
 Q TOKEN
"RTN","RORXU002",76,0)
 ;
"RTN","RORXU002",77,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",78,0)
DATE(DT) ;
"RTN","RORXU002",79,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",80,0)
 ;
"RTN","RORXU002",81,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",82,0)
 ;
"RTN","RORXU002",83,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",84,0)
 ;
"RTN","RORXU002",85,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",86,0)
 ;
"RTN","RORXU002",87,0)
 ; Return Values:
"RTN","RORXU002",88,0)
 ;       <0  Error code
"RTN","RORXU002",89,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",90,0)
 ;
"RTN","RORXU002",91,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",92,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP,DIERR
"RTN","RORXU002",93,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",94,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",95,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",96,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",97,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",98,0)
 ;---
"RTN","RORXU002",99,0)
 S IENS=REGIEN_","
"RTN","RORXU002",100,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",101,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",102,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",103,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",104,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",105,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",106,0)
 Q HEADER
"RTN","RORXU002",107,0)
 ;
"RTN","RORXU002",108,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",109,0)
 ;
"RTN","RORXU002",110,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",111,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",112,0)
 ;               this variable.
"RTN","RORXU002",113,0)
 ;
"RTN","RORXU002",114,0)
LIST(LIST) ;
"RTN","RORXU002",115,0)
 N I,TMP,VAL
"RTN","RORXU002",116,0)
 F I=1:1 S VAL=$P(LIST,",",I) Q:VAL=""  D
"RTN","RORXU002",117,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",118,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",119,0)
 Q
"RTN","RORXU002",120,0)
 ;
"RTN","RORXU002",121,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",122,0)
 ;
"RTN","RORXU002",123,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",124,0)
 ;               the options as subscripts
"RTN","RORXU002",125,0)
 ;
"RTN","RORXU002",126,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",127,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",128,0)
 ;
"RTN","RORXU002",129,0)
 ; Return Values:
"RTN","RORXU002",130,0)
 ;      ...  Text description of the options
"RTN","RORXU002",131,0)
 ;
"RTN","RORXU002",132,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",133,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",134,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",135,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",136,0)
 S TEXT="",I=0
"RTN","RORXU002",137,0)
 F  S I=$O(RORBUF(I)) Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",138,0)
 . S NS=0
"RTN","RORXU002",139,0)
 . F J=1:1 S TMP=$TR($P(RORBUF(I),",",J)," ") Q:TMP=""  D
"RTN","RORXU002",140,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",141,0)
 . Q:'NS
"RTN","RORXU002",142,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",143,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",144,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",145,0)
 ;
"RTN","RORXU002",146,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",147,0)
 ;
"RTN","RORXU002",148,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",149,0)
 ;
"RTN","RORXU002",150,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",151,0)
 ;
"RTN","RORXU002",152,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",153,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",154,0)
 ;
"RTN","RORXU002",155,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",156,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",157,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",158,0)
 ;
"RTN","RORXU002",159,0)
 ; Return Values:
"RTN","RORXU002",160,0)
 ;       <0  Error code
"RTN","RORXU002",161,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",162,0)
 ;
"RTN","RORXU002",163,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",164,0)
 N APPT,BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP,IEN,DIERR,TMP1
"RTN","RORXU002",165,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",166,0)
 S RC=0,(ARENDT,ENDT,ARSTDT,STDT)="",FLAGS=""
"RTN","RORXU002",167,0)
 ;
"RTN","RORXU002",168,0)
 ;=== Registry name
"RTN","RORXU002",169,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",170,0)
 I REGIEN>0 D  Q:RC<0 RC
"RTN","RORXU002",171,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",172,0)
 . I TMP="" S RC=-1 Q
"RTN","RORXU002",173,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",174,0)
 ;
"RTN","RORXU002",175,0)
 ;=== Alternate date ranges
"RTN","RORXU002",176,0)
 F I=2:1:7 D  Q:RC<0
"RTN","RORXU002",177,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1 Q:STDT'>0
"RTN","RORXU002",178,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1 Q:ENDT'>0
"RTN","RORXU002",179,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",180,0)
 . I ELEMENT<0 S RC=+ELEMENT Q
"RTN","RORXU002",181,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT) Q:RC<0
"RTN","RORXU002",182,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",183,0)
 Q:RC<0 RC
"RTN","RORXU002",184,0)
 ;
"RTN","RORXU002",185,0)
 ;=== Main date range
"RTN","RORXU002",186,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",187,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",188,0)
 I STDT>0,ENDT>0 D  Q:RC<0 RC
"RTN","RORXU002",189,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",190,0)
 . I ELEMENT<0 S RC=+ELEMENT Q
"RTN","RORXU002",191,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT) Q:RC<0
"RTN","RORXU002",192,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",193,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",194,0)
 ;
"RTN","RORXU002",195,0)
 ;=== Task comment
"RTN","RORXU002",196,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",197,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",198,0)
 ;
"RTN","RORXU002",199,0)
 ;=== Clinic Selection - patch 13
"RTN","RORXU002",200,0)
 D:$D(RORTSK("PARAMS","CLINICS","C"))
"RTN","RORXU002",201,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARAMS) Q:LTAG'>0
"RTN","RORXU002",202,0)
 . S IEN=0
"RTN","RORXU002",203,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN)) Q:IEN'>0  D
"RTN","RORXU002",204,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",205,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU002",206,0)
 . . Q:TMP=""
"RTN","RORXU002",207,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU002",208,0)
 D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU002",209,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARAMS)
"RTN","RORXU002",210,0)
 ;
"RTN","RORXU002",211,0)
 ;=== Division Selection - patch 13
"RTN","RORXU002",212,0)
 D:$D(RORTSK("PARAMS","DIVISIONS","C"))
"RTN","RORXU002",213,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARAMS) Q:LTAG'>0
"RTN","RORXU002",214,0)
 . S IEN=0
"RTN","RORXU002",215,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN)) Q:IEN'>0  D
"RTN","RORXU002",216,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",217,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU002",218,0)
 . . Q:TMP=""
"RTN","RORXU002",219,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU002",220,0)
 D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU002",221,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARAMS)
"RTN","RORXU002",222,0)
 ;
"RTN","RORXU002",223,0)
 ;=== Age Range - patch 31
"RTN","RORXU002",224,0)
 S TMP1=$G(RORTSK("PARAMS","AGE_RANGE","A","TYPE"))
"RTN","RORXU002",225,0)
 I TMP1="ALL" D  Q:RC<0 RC
"RTN","RORXU002",226,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"AGE_RANGE",,PARAMS)
"RTN","RORXU002",227,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,"AGE_RANGE","TYPE",TMP1)
"RTN","RORXU002",228,0)
 ;
"RTN","RORXU002",229,0)
 I TMP1="AGE"!(TMP1="DOB") D  Q:RC<0 RC
"RTN","RORXU002",230,0)
 . S ARSTDT=$$PARAM^RORTSK01("AGE_RANGE","START")
"RTN","RORXU002",231,0)
 . S ARENDT=$$PARAM^RORTSK01("AGE_RANGE","END")
"RTN","RORXU002",232,0)
 . I ARSTDT>0,ARENDT>0 D  Q
"RTN","RORXU002",233,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"AGE_RANGE",,PARAMS)
"RTN","RORXU002",234,0)
 . . I ELEMENT<0 S RC=+ELEMENT Q
"RTN","RORXU002",235,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"TYPE",TMP1) Q:RC<0
"RTN","RORXU002",236,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",ARSTDT)
"RTN","RORXU002",237,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ARENDT)
"RTN","RORXU002",238,0)
 . E  S (ARENDT,ARSTDT)=""
"RTN","RORXU002",239,0)
 ;
"RTN","RORXU002",240,0)
 ;=== Patient selection and Options
"RTN","RORXU002",241,0)
 F NAME="PATIENTS","OPTIONS" D  Q:RC<0
"RTN","RORXU002",242,0)
 . K BUF M BUF=RORTSK("PARAMS",NAME,"A") Q:$D(BUF)<10
"RTN","RORXU002",243,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",244,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",245,0)
 . I ELEMENT'>0 S RC=ELEMENT Q
"RTN","RORXU002",246,0)
 . S TMP=""
"RTN","RORXU002",247,0)
 . F  S TMP=$O(BUF(TMP)) Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",248,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,$G(BUF(TMP)))
"RTN","RORXU002",249,0)
 . ;--- Compile the flags
"RTN","RORXU002",250,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",251,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",252,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",253,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",254,0)
 . . I $D(BUF("BIRTHSEX")) S FLAGS=FLAGS_$S(BUF("BIRTHSEX")="M":"W",BUF("BIRTHSEX")="F":"M",1:"")
"RTN","RORXU002",255,0)
 . . I $D(BUF("OEF")) D
"RTN","RORXU002",256,0)
 . . . S FLAGS=FLAGS_$S(BUF("OEF")=1:"I",BUF("OEF")=-1:"E",1:"")
"RTN","RORXU002",257,0)
 . . I $D(BUF("SVR")) S FLAGS=FLAGS_$S(BUF("SVR")=1:"S",BUF("SVR")=0:"V",1:"")
"RTN","RORXU002",258,0)
 . D:NAME="OPTIONS"       ;PATCH 33
"RTN","RORXU002",259,0)
 . .S:$D(BUF("FUT_APPT")) FLAGS=FLAGS_"U"
"RTN","RORXU002",260,0)
 Q:RC<0 RC
"RTN","RORXU002",261,0)
 ;
"RTN","RORXU002",262,0)
 ;=== Other Registries
"RTN","RORXU002",263,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1 D  Q:RC<0 RC
"RTN","RORXU002",264,0)
 . N NODE,REGIEN
"RTN","RORXU002",265,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",266,0)
 . I LTAG<0 S RC=+LTAG Q
"RTN","RORXU002",267,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",268,0)
 . S REGIEN=0
"RTN","RORXU002",269,0)
 . F  S REGIEN=$O(@NODE@(REGIEN)) Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",270,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",271,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",272,0)
 . . I 'MODE!(TMP="") K @NODE@(REGIEN) Q
"RTN","RORXU002",273,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",274,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",275,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",276,0)
 ;
"RTN","RORXU002",277,0)
 ;=== Local Fields
"RTN","RORXU002",278,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1 D  Q:RC<0 RC
"RTN","RORXU002",279,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",280,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",281,0)
 . I LTAG<0 S RC=+LTAG Q
"RTN","RORXU002",282,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",283,0)
 . S IEN=0
"RTN","RORXU002",284,0)
 . F  S IEN=$O(@NODE@(IEN)) Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",285,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",286,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",287,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",288,0)
 . . I 'MODE!(TMP="") K @NODE@(IEN) Q
"RTN","RORXU002",289,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",290,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",291,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",292,0)
 ;
"RTN","RORXU002",293,0)
 ;=== Lab test ranges
"RTN","RORXU002",294,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1 D  Q:RC<0 RC
"RTN","RORXU002",295,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",296,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",297,0)
 . I $G(RORTSK("EP"))["MLDRANGE"!($G(RORTSK("EP"))["HCVDAA") S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",298,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",299,0)
 . N GRC,NODE
"RTN","RORXU002",300,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",301,0)
 . S GRC=0
"RTN","RORXU002",302,0)
 . F  S GRC=$O(@NODE@(GRC)) Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",303,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",304,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",305,0)
 ;
"RTN","RORXU002",306,0)
 ;=== ICD filter/group/codes
"RTN","RORXU002",307,0)
 N LEV1FILT,LEV2GRP,LEV3ICD,ICDIEN,ICDCODE,GRPNAME,FILTER,ICDDESC,RORXMLNODE,RORICDSYS
"RTN","RORXU002",308,0)
 S FILTER=$G(RORTSK("PARAMS","ICDFILT","A","FILTER"))
"RTN","RORXU002",309,0)
 I $L(FILTER)>0 D  ;quit if no ICD filter exists
"RTN","RORXU002",310,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICDFILT",,PARAMS)
"RTN","RORXU002",311,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",312,0)
 . ;add filter value to the output
"RTN","RORXU002",313,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",314,0)
 . ;if there's an ICD group, process it
"RTN","RORXU002",315,0)
 . I $D(RORTSK("PARAMS","ICDFILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",316,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICDFILT","G"))
"RTN","RORXU002",317,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",318,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",319,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",320,0)
 ... I LEV2GRP'>0 S RC=LEV2GRP Q 
"RTN","RORXU002",321,0)
 ... ;add group name to the output
"RTN","RORXU002",322,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",323,0)
 ... S ICDIEN=0
"RTN","RORXU002",324,0)
 ... F  S ICDIEN=$O(@NODE@(GRPNAME,"C",ICDIEN)) Q:ICDIEN'>0  D
"RTN","RORXU002",325,0)
 .... S ICDCODE=$P(@NODE@(GRPNAME,"C",ICDIEN),U,1) Q:ICDCODE=""
"RTN","RORXU002",326,0)
 .... S RORICDSYS=$P(@NODE@(GRPNAME,"C",ICDIEN),U,2)
"RTN","RORXU002",327,0)
 .... ;get diagnosis description
"RTN","RORXU002",328,0)
 .... S ICDDESC=$$VLTD^ICDEX(ICDIEN)
"RTN","RORXU002",329,0)
 .... S RORXMLNODE=$S(RORICDSYS=1:"ICD9",1:"ICD10")
"RTN","RORXU002",330,0)
 .... S LEV3ICD=$$ADDVAL^RORTSK11(RORTSK,RORXMLNODE,ICDDESC,LEV2GRP)
"RTN","RORXU002",331,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD,"ID",ICDCODE)
"RTN","RORXU002",332,0)
 ;
"RTN","RORXU002",333,0)
 ;=== get Max Date
"RTN","RORXU002",334,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",335,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",336,0)
 ;
"RTN","RORXU002",337,0)
 ;=== get HIV_DX
"RTN","RORXU002",338,0)
 N RORMODE S RORMODE=$$PARAM^RORTSK01("HIV_DX")
"RTN","RORXU002",339,0)
 S RORMODE=$S(RORMODE=1:"Include",RORMODE=-1:"Exclude",1:"")
"RTN","RORXU002",340,0)
 I RORMODE'="" D
"RTN","RORXU002",341,0)
 . D ADDVAL^RORTSK11(RORTSK,"HIV_DX",RORMODE,PARAMS)
"RTN","RORXU002",342,0)
 . S FLAGS=FLAGS_"H"
"RTN","RORXU002",343,0)
 ;
"RTN","RORXU002",344,0)
 ;=== Defaults
"RTN","RORXU002",345,0)
 S TMP=$TR(FLAGS,"FNP") S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",346,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",347,0)
 ;
"RTN","RORXU002",348,0)
 ;=== Success
"RTN","RORXU002",349,0)
 Q PARAMS
"RTN","RORXU002",350,0)
 ;
"RTN","RORXU002",351,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",352,0)
 ;
"RTN","RORXU002",353,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",354,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",355,0)
 ;               examples of table definitions.
"RTN","RORXU002",356,0)
 ;
"RTN","RORXU002",357,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",358,0)
 ;
"RTN","RORXU002",359,0)
 ; Return Values:
"RTN","RORXU002",360,0)
 ;       <0  Error code
"RTN","RORXU002",361,0)
 ;        0  Ok
"RTN","RORXU002",362,0)
 ;
"RTN","RORXU002",363,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",364,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",365,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",366,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",367,0)
 S RC=0
"RTN","RORXU002",368,0)
 F IT=1:1 X TGET S RORSRC=$P(RORSRC,";;",2) Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",369,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",370,0)
 . I COND'="" X COND E  Q
"RTN","RORXU002",371,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",372,0)
 . S NAME=$$COLSCAN(.TERM) Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",373,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",374,0)
 . I TBLDEF<0 S RC=TBLDEF Q
"RTN","RORXU002",375,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",376,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",377,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",378,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",379,0)
 K ^TMP($J,"RORSELCOL")
"RTN","RORXU002",380,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",381,0)
 ;
"RTN","RORXU002",382,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",383,0)
 ;
"RTN","RORXU002",384,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",385,0)
 ;
"RTN","RORXU002",386,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",387,0)
 N COLUMN,IT,NAME,OK,ROR,TERM
"RTN","RORXU002",388,0)
 F  S NAME=$$COLSCAN(.TERM) Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",389,0)
 . I '$D(^TMP($J,"RORSELCOL")) D  ; set up special columns selection criteria
"RTN","RORXU002",390,0)
 . . F IT=1:1 X "S ROR=$P($T(SELCOL+"_IT_"^RORXU002),"";;"",2)" Q:$P(ROR,U)=""  D
"RTN","RORXU002",391,0)
 . . . S ^TMP($J,"RORSELCOL",$P(ROR,U))=$P(ROR,U,2,999)
"RTN","RORXU002",392,0)
 . I $D(^TMP($J,"RORSELCOL",NAME)) D  Q:'OK
"RTN","RORXU002",393,0)
 . . X ^TMP($J,"RORSELCOL",NAME) S OK=$T
"RTN","RORXU002",394,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",395,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",396,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",397,0)
 Q
"RTN","RORXU002",398,0)
 ;
"RTN","RORXU002",399,0)
 ;Setup of values in SELCOL is:
"RTN","RORXU002",400,0)
 ;name of selected optional column^statement to execute to set $T if the condition to include this field has been met
"RTN","RORXU002",401,0)
 ;
"RTN","RORXU002",402,0)
SELCOL ;selected optional fields and screen criteria is listed here
"RTN","RORXU002",403,0)
 ;;ICN^I $$PARAM^RORTSK01("PATIENTS","ICN")
"RTN","RORXU002",404,0)
 ;;FIB4^I $D(RORTSK("PARAMS","LRGRANGES","C",4))
"RTN","RORXU002",405,0)
 ;;PACT^I $$PARAM^RORTSK01("PATIENTS","PACT")
"RTN","RORXU002",406,0)
 ;;PCP^I $$PARAM^RORTSK01("PATIENTS","PCP")
"RTN","RORXU002",407,0)
 ;;FUT_APPT^I $$PARAM^RORTSK01("OPTIONS","FUT_APPT")
"RTN","RORXU002",408,0)
 ;;
"RTN","RORXU005")
0^2^B61938494^B56314333
"RTN","RORXU005",1,0)
RORXU005 ;HCIOFO/SG - REPORT BUILDER UTILITIES ;5/25/11 11:48am
"RTN","RORXU005",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,15,21,22,26,30,31,33**;Feb 17, 2006;Build 81
"RTN","RORXU005",3,0)
 ;
"RTN","RORXU005",4,0)
 ;******************************************************************************
"RTN","RORXU005",5,0)
 ;******************************************************************************
"RTN","RORXU005",6,0)
 ;
"RTN","RORXU005",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU005",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU005",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU005",10,0)
 ;ROR*1.5*22   FEB  2014   T KOPP       Added tag SKIPOEF to return the result
"RTN","RORXU005",11,0)
 ;                                      if the period of service of patient
"RTN","RORXU005",12,0)
 ;                                      matches OEF/OIF selection criteria.
"RTN","RORXU005",13,0)
 ;ROR*1.5*26   JAN  2015   T KOPP       Added check for SVR match in report
"RTN","RORXU005",14,0)
 ;
"RTN","RORXU005",15,0)
 ;ROR*1.5*30   OCT 2016   M FERRARESE   Changing the dispay for "Sex" to "Birth Sex"
"RTN","RORXU005",16,0)
 ;                                      screen logic, flags S and V
"RTN","RORXU005",17,0)
 ;ROR*1.5*31   MAY 2017   S ALSAHHAR    Adding logic for AGE/DOB identifier
"RTN","RORXU005",18,0)
 ;
"RTN","RORXU005",19,0)
 ;****************************************************************************** 
"RTN","RORXU005",20,0)
 ; This routine uses the following IAs:
"RTN","RORXU005",21,0)
 ;
"RTN","RORXU005",22,0)
 ; #10035        Direct read of the DOD field of the file #2
"RTN","RORXU005",23,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORXU005",24,0)
 ;
"RTN","RORXU005",25,0)
 Q
"RTN","RORXU005",26,0)
 ;
"RTN","RORXU005",27,0)
 ;***** CALLBACK FUNCTION FOR DRUG SEARCH API
"RTN","RORXU005",28,0)
REIMBCB(RORDST,ORDER,FLAGS,DRUG,DATE) ;
"RTN","RORXU005",29,0)
 S RORDST=1
"RTN","RORXU005",30,0)
 Q 2
"RTN","RORXU005",31,0)
 ;
"RTN","RORXU005",32,0)
 ;***** RETURNS THE REIMBURSEMENT LEVEL FOR THE PATIENT
"RTN","RORXU005",33,0)
 ;
"RTN","RORXU005",34,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",35,0)
 ;
"RTN","RORXU005",36,0)
 ; ROR8DRGS      Either closed root of the ARV drug list prepared by
"RTN","RORXU005",37,0)
 ;               the $$DRUGLIST^RORUTL16 or the Registry IEN. In the
"RTN","RORXU005",38,0)
 ;               latter case, the list will be compiled automatically.
"RTN","RORXU005",39,0)
 ;
"RTN","RORXU005",40,0)
 ; STDT          Start date
"RTN","RORXU005",41,0)
 ; ENDT          End date
"RTN","RORXU005",42,0)
 ;
"RTN","RORXU005",43,0)
 ; Return Values:
"RTN","RORXU005",44,0)
 ;       <0  Error code
"RTN","RORXU005",45,0)
 ;        0  Neither Clinical AIDS nor ARV drugs
"RTN","RORXU005",46,0)
 ;       10  ARV drugs
"RTN","RORXU005",47,0)
 ;       20  Clinical AIDS
"RTN","RORXU005",48,0)
 ;       30  Both Clinical AIDS and ARV drugs
"RTN","RORXU005",49,0)
 ;
"RTN","RORXU005",50,0)
REIMBLVL(RORIEN,ROR8DRGS,STDT,ENDT) ;
"RTN","RORXU005",51,0)
 N PATIEN,RC,RLVL,RORDST
"RTN","RORXU005",52,0)
 S RLVL=0
"RTN","RORXU005",53,0)
 ;--- Clinical AIDS
"RTN","RORXU005",54,0)
 S:$$CLINAIDS^RORHIVUT(+RORIEN,ENDT) RLVL=RLVL+20
"RTN","RORXU005",55,0)
 ;--- ARV Drugs
"RTN","RORXU005",56,0)
 S PATIEN=$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",57,0)
 S RORDST("RORCB")="$$REIMBCB^RORXU005"
"RTN","RORXU005",58,0)
 S RC=$$RXSEARCH^RORUTL14(PATIEN,ROR8DRGS,.RORDST,"IOV",STDT,ENDT)
"RTN","RORXU005",59,0)
 S:$G(RORDST)>0 RLVL=RLVL+10
"RTN","RORXU005",60,0)
 ;--- Reimbursement level
"RTN","RORXU005",61,0)
 Q $S(RC<0:RC,1:RLVL)
"RTN","RORXU005",62,0)
 ;
"RTN","RORXU005",63,0)
 ;***** RETURNS THE PATIENT'S LIST OF RISK FACTORS
"RTN","RORXU005",64,0)
 ;
"RTN","RORXU005",65,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",66,0)
 ;
"RTN","RORXU005",67,0)
 ; Return Values:
"RTN","RORXU005",68,0)
 ;       <0  Error code
"RTN","RORXU005",69,0)
 ;       ""  No risk factors have been found
"RTN","RORXU005",70,0)
 ;  " ... "  A string containing the risk factor numbers
"RTN","RORXU005",71,0)
 ;           separated by commas and spaces
"RTN","RORXU005",72,0)
 ;
"RTN","RORXU005",73,0)
RISKS(RORIEN) ;
"RTN","RORXU005",74,0)
 Q:'$D(^RORDATA(799.4,+RORIEN,0)) ""
"RTN","RORXU005",75,0)
 N FLD,FLDLST,I,IENS,RISKLST,RORBUF,RORMSG,DIERR
"RTN","RORXU005",76,0)
 S FLDLST="14.01;14.02;14.03;14.04;14.08;14.07;14.09;14.1;14.11;14.12;14.13;14.16;14.17"
"RTN","RORXU005",77,0)
 ;--- Load the risk fields
"RTN","RORXU005",78,0)
 S IENS=(+RORIEN)_","
"RTN","RORXU005",79,0)
 D GETS^DIQ(799.4,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORXU005",80,0)
 Q:$G(DIERR) $$DBS^RORERR(799.4,-9,,,799.4,IENS)
"RTN","RORXU005",81,0)
 ;--- Process the data
"RTN","RORXU005",82,0)
 S RISKLST=""
"RTN","RORXU005",83,0)
 F I=1:1  S FLD=$P(FLDLST,";",I)  Q:FLD=""  D:FLD>0
"RTN","RORXU005",84,0)
 . S:$G(RORBUF(799.4,IENS,FLD,"I"))=1 RISKLST=RISKLST_", "_I
"RTN","RORXU005",85,0)
 Q $P(RISKLST,", ",2,999)
"RTN","RORXU005",86,0)
 ;
"RTN","RORXU005",87,0)
 ;***** DETERMINES IF THE PATIENT SHOULD NOT BE INCLUDED IN THE REPORT
"RTN","RORXU005",88,0)
 ;
"RTN","RORXU005",89,0)
 ; RORIEN        IEN of the patient's record in the registry
"RTN","RORXU005",90,0)
 ;
"RTN","RORXU005",91,0)
 ; FLAGS         Flags that control the execution (can be combined)
"RTN","RORXU005",92,0)
 ;
"RTN","RORXU005",93,0)
 ;                 C  Skip confirmed patients
"RTN","RORXU005",94,0)
 ;                 G  Skip pending patients
"RTN","RORXU005",95,0)
 ;
"RTN","RORXU005",96,0)
 ;                 D  Skip deceased patients
"RTN","RORXU005",97,0)
 ;                 L  Skip alive patients
"RTN","RORXU005",98,0)
 ;
"RTN","RORXU005",99,0)
 ;                 P  Skip patients confirmed before the start date
"RTN","RORXU005",100,0)
 ;                 N  Skip patients confirmed during the report
"RTN","RORXU005",101,0)
 ;                    time frame
"RTN","RORXU005",102,0)
 ;                 F  Skip patients added after the end date
"RTN","RORXU005",103,0)
 ;
"RTN","RORXU005",104,0)
 ;                 H  Skip patients without local HIV diagnosis
"RTN","RORXU005",105,0)
 ;
"RTN","RORXU005",106,0)
 ;                 M  Skip male patients
"RTN","RORXU005",107,0)
 ;                 W  Skip female patients
"RTN","RORXU005",108,0)
 ;
"RTN","RORXU005",109,0)
 ;                 O  Process LOCAL_FIELDS
"RTN","RORXU005",110,0)
 ;                 R  Process OTHER_REGISTRIES
"RTN","RORXU005",111,0)
 ;
"RTN","RORXU005",112,0)
 ;                 E  Exclude patients with OEF/OIF period of service
"RTN","RORXU005",113,0)
 ;                 I  Include only patients with OEF/OIF period of service
"RTN","RORXU005",114,0)
 ;
"RTN","RORXU005",115,0)
 ;                 S  Include only patients with SVR
"RTN","RORXU005",116,0)
 ;                 V  Include only patients with No SVR
"RTN","RORXU005",117,0)
 ;
"RTN","RORXU005",118,0)
 ;                 U  Include only patients with FUTURE APPOINTMENTS    ; PATCH 33
"RTN","RORXU005",119,0)
 ;
"RTN","RORXU005",120,0)
 ;
"RTN","RORXU005",121,0)
 ; [STDT]        Start date of the report (FileMan).
"RTN","RORXU005",122,0)
 ;               Time is ignored and the beginning of the day is
"RTN","RORXU005",123,0)
 ;               considered as the boundary (STDT\1).
"RTN","RORXU005",124,0)
 ;
"RTN","RORXU005",125,0)
 ;               If not defined or not greater than 0 then 0 is used.
"RTN","RORXU005",126,0)
 ;
"RTN","RORXU005",127,0)
 ; [ENDT]        End date of the report (FileMan).
"RTN","RORXU005",128,0)
 ;               Time is ignored and the end of the day is
"RTN","RORXU005",129,0)
 ;               considered as the boundary (ENDT\1+1).
"RTN","RORXU005",130,0)
 ;
"RTN","RORXU005",131,0)
 ;               If not defined or not greater than 0 then 9999999
"RTN","RORXU005",132,0)
 ;               is used.
"RTN","RORXU005",133,0)
 ;
"RTN","RORXU005",134,0)
 ; Return Values:
"RTN","RORXU005",135,0)
 ;        0  Include the patient's data in the report
"RTN","RORXU005",136,0)
 ;        1  Skip the patient
"RTN","RORXU005",137,0)
 ;
"RTN","RORXU005",138,0)
SKIP(RORIEN,FLAGS,STDT,ENDT) ;
"RTN","RORXU005",139,0)
 N DOD,IEN,MODE,NODE,PTIEN,REGIEN,BIRTHSEX,SKIP,STATUS,TMP,ARFLAG
"RTN","RORXU005",140,0)
 S SKIP=0
"RTN","RORXU005",141,0)
 ;--- Always skip patients marked for deletion
"RTN","RORXU005",142,0)
 Q:$$SKIPNA(RORIEN,FLAGS,.STATUS) 1
"RTN","RORXU005",143,0)
 ;---Include all registry patients if flags are not provided
"RTN","RORXU005",144,0)
 Q:FLAGS="" 0
"RTN","RORXU005",145,0)
 ;
"RTN","RORXU005",146,0)
 ;--- Confirmed
"RTN","RORXU005",147,0)
 I FLAGS["C"  Q:STATUS'=4 1
"RTN","RORXU005",148,0)
 ;
"RTN","RORXU005",149,0)
 ;--- Alive/Deceased patients
"RTN","RORXU005",150,0)
 S STDT=$S($G(STDT)>0:STDT\1,1:0)
"RTN","RORXU005",151,0)
 I $TR(FLAGS,"LD")'=FLAGS  D  Q:$S(TMP:FLAGS["L",1:FLAGS["D") 1
"RTN","RORXU005",152,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",153,0)
 . S DOD=+$P($G(^DPT(PTIEN,.35)),U)
"RTN","RORXU005",154,0)
 . S TMP=$S(DOD>0:DOD'<STDT,1:1)
"RTN","RORXU005",155,0)
 ;
"RTN","RORXU005",156,0)
 ;--- Male/Female patients screen
"RTN","RORXU005",157,0)
 I FLAGS["M"!(FLAGS["W") D  Q:SKIP 1
"RTN","RORXU005",158,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",159,0)
 . S SKIP=$$SKIPSEX(PTIEN,FLAGS)
"RTN","RORXU005",160,0)
 ;
"RTN","RORXU005",161,0)
 ;--- Age Range patients screen
"RTN","RORXU005",162,0)
 S ARFLAG=$G(RORTSK("PARAMS","AGE_RANGE","A","TYPE"))
"RTN","RORXU005",163,0)
 I $D(ARFLAG),ARFLAG'="ALL" D  Q:SKIP 1
"RTN","RORXU005",164,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",165,0)
 . S SKIP=$$SKIPAR(PTIEN,ARFLAG)
"RTN","RORXU005",166,0)
 ;
"RTN","RORXU005",167,0)
 ;--- OEF/OIF period of service patients screen
"RTN","RORXU005",168,0)
 I FLAGS["E"!(FLAGS["I") D  Q:SKIP 1
"RTN","RORXU005",169,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",170,0)
 . S SKIP=$$SKIPOEF(PTIEN,FLAGS)
"RTN","RORXU005",171,0)
 ;
"RTN","RORXU005",172,0)
 ;--- SVR patients screen
"RTN","RORXU005",173,0)
 I FLAGS["V"!(FLAGS["S") D  Q:SKIP 1
"RTN","RORXU005",174,0)
 . N REGIEN,RC,RORXL,RORLDST,RORXDST
"RTN","RORXU005",175,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",176,0)
 . S REGIEN=$$GET1^DIQ(798,RORIEN_",",.02,"I")
"RTN","RORXU005",177,0)
 . ;== Lab parameters
"RTN","RORXU005",178,0)
 . S RORLDST("RORCB")="$$LTSCB^RORX023A"
"RTN","RORXU005",179,0)
 . ;== Pharm parameters
"RTN","RORXU005",180,0)
 . S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORXU005",181,0)
 . S RORXDST("RORCB")="$$RXOCB^RORX023A"   ;call back routine
"RTN","RORXU005",182,0)
 . ;--- RX list of HepC registry drugs
"RTN","RORXU005",183,0)
 . S RORXL=$$ALLOC^RORTMP()
"RTN","RORXU005",184,0)
 . S RC=$$DRUGLIST^RORUTL16(RORXL,REGIEN)
"RTN","RORXU005",185,0)
 . S RC=$$SVR^RORX023A(PTIEN,2000101,DT,REGIEN,RORXL,"",$$FMADD^XLFDT(DT,1),.RORLDST,.RORXDST)
"RTN","RORXU005",186,0)
 . D POP^RORTMP(RORXL)
"RTN","RORXU005",187,0)
 . I FLAGS["V" S SKIP=$S(RC=0:0,1:1) Q  ; skip if SVR and not SVR requested
"RTN","RORXU005",188,0)
 . I FLAGS["S" S SKIP=$S(RC=1:0,1:1)    ; skip if not SVR and SVR requested
"RTN","RORXU005",189,0)
 ;
"RTN","RORXU005",190,0)
 ;--- Confirmed before/during/after the date range
"RTN","RORXU005",191,0)
 S ENDT=$S($G(ENDT)>0:ENDT\1,1:9999999)+1
"RTN","RORXU005",192,0)
 I $TR(FLAGS,"PNF")'=FLAGS  D  Q:TMP 1
"RTN","RORXU005",193,0)
 . S TMP=+$$CONFDT^RORUTL18(RORIEN)  ; Date Confirmed
"RTN","RORXU005",194,0)
 . S TMP=$S(TMP<STDT:FLAGS["P",TMP>ENDT:FLAGS["F",1:FLAGS["N")
"RTN","RORXU005",195,0)
 ;
"RTN","RORXU005",196,0)
 ;--- Other registries
"RTN","RORXU005",197,0)
 I FLAGS["R"  D  Q:SKIP 1
"RTN","RORXU005",198,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU005",199,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",200,0)
 . S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)
"RTN","RORXU005",201,0)
 . S REGIEN=0
"RTN","RORXU005",202,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:SKIP
"RTN","RORXU005",203,0)
 . . S MODE=+$G(@NODE@(REGIEN))  Q:'MODE
"RTN","RORXU005",204,0)
 . . S IEN=$$PRRIEN^RORUTL01(PTIEN,REGIEN)
"RTN","RORXU005",205,0)
 . . I IEN'>0  S SKIP=1
"RTN","RORXU005",206,0)
 . . E  S:$$SKIPNA(IEN,FLAGS) SKIP=1
"RTN","RORXU005",207,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",208,0)
 ;
"RTN","RORXU005",209,0)
 ;--- Local Fields
"RTN","RORXU005",210,0)
 I FLAGS["O"  D  Q:SKIP 1
"RTN","RORXU005",211,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU005",212,0)
 . Q:$D(@NODE)<10
"RTN","RORXU005",213,0)
 . S IEN=0
"RTN","RORXU005",214,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:SKIP
"RTN","RORXU005",215,0)
 . . S MODE=+$G(@NODE@(IEN))  Q:'MODE
"RTN","RORXU005",216,0)
 . . S:'$D(^RORDATA(798,RORIEN,20,"B",IEN)) SKIP=1
"RTN","RORXU005",217,0)
 . . S:MODE<0 SKIP='SKIP  ; Exclude
"RTN","RORXU005",218,0)
 ;
"RTN","RORXU005",219,0)
 ;--- Local HIV Diagnosis
"RTN","RORXU005",220,0)
 I FLAGS["H" D  Q:SKIP 1
"RTN","RORXU005",221,0)
 . N RORV
"RTN","RORXU005",222,0)
 . S MODE=+RORTSK("PARAMS","HIV_DX") Q:'MODE
"RTN","RORXU005",223,0)
 . S RORV=+$P($G(^RORDATA(799.4,RORIEN,12)),U,8)
"RTN","RORXU005",224,0)
 . S:RORV'=1 SKIP=1
"RTN","RORXU005",225,0)
 . S:MODE<0 SKIP='SKIP
"RTN","RORXU005",226,0)
 ;
"RTN","RORXU005",227,0)
 ;
"RTN","RORXU005",228,0)
 ;---Check for future appointments   patch 33
"RTN","RORXU005",229,0)
 I FLAGS["U" D  Q:SKIP 1
"RTN","RORXU005",230,0)
 .N RORDAYS
"RTN","RORXU005",231,0)
 .S RORDAYS=$G(RORTSK("PARAMS","OPTIONS","A","FUT_APPT"))
"RTN","RORXU005",232,0)
 .S:'$D(PTIEN) PTIEN=+$$PTIEN^RORUTL01(RORIEN)  ;get dfn
"RTN","RORXU005",233,0)
 .S SKIP=$$SKIPFUT(PTIEN,RORDAYS)
"RTN","RORXU005",234,0)
 ;
"RTN","RORXU005",235,0)
 ;--- Include in the report
"RTN","RORXU005",236,0)
 Q 0
"RTN","RORXU005",237,0)
 ;
"RTN","RORXU005",238,0)
 ;***** CHECKS STATUS OF THE PATIENT'S REGISTRY RECORD (internal)
"RTN","RORXU005",239,0)
 ;
"RTN","RORXU005",240,0)
 ; IEN798        IEN of the patient's record in the registry
"RTN","RORXU005",241,0)
 ;
"RTN","RORXU005",242,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",243,0)
 ;
"RTN","RORXU005",244,0)
 ; [.STATUS]     Status code is returned via this parameter.
"RTN","RORXU005",245,0)
 ;
"RTN","RORXU005",246,0)
 ; Return Values:
"RTN","RORXU005",247,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",248,0)
 ;        1  Skip the patient
"RTN","RORXU005",249,0)
 ;
"RTN","RORXU005",250,0)
SKIPNA(IEN798,FLAGS,STATUS) ;
"RTN","RORXU005",251,0)
 Q:$$ACTIVE^RORDD(IEN798,,.STATUS) 0  ; Active patient
"RTN","RORXU005",252,0)
 Q:(STATUS=5)!(STATUS="") 1           ; Deleted patient
"RTN","RORXU005",253,0)
 Q:(STATUS=4)&(FLAGS["G") 1           ; Pending patient
"RTN","RORXU005",254,0)
 Q 0
"RTN","RORXU005",255,0)
 ;
"RTN","RORXU005",256,0)
 ;***** CHECKS IF BIRTHSEX OF PATIENT MATCHES BIRTHSEX SELECTED FOR REPORT
"RTN","RORXU005",257,0)
 ;
"RTN","RORXU005",258,0)
 ; DFN           IEN of the patient's record in the patient file (#2)
"RTN","RORXU005",259,0)
 ;
"RTN","RORXU005",260,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",261,0)
 ;
"RTN","RORXU005",262,0)
 ; Return Values:
"RTN","RORXU005",263,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",264,0)
 ;        1  Skip the patient
"RTN","RORXU005",265,0)
 ;
"RTN","RORXU005",266,0)
SKIPSEX(DFN,FLAGS) ;
"RTN","RORXU005",267,0)
 N VADM,VAPTYP,VAHOW,BIRTHSEX
"RTN","RORXU005",268,0)
 D DEM^VADPT
"RTN","RORXU005",269,0)
 S BIRTHSEX=$P($G(VADM(5)),U)
"RTN","RORXU005",270,0)
 Q $S(FLAGS["M":BIRTHSEX'="F",FLAGS["W":BIRTHSEX'="M",1:0)
"RTN","RORXU005",271,0)
 ;
"RTN","RORXU005",272,0)
 ;***** CHECKS IF PERIOD OF SERVICE OF PATIENT MATCHES OEF/OIF SELECTION FOR
"RTN","RORXU005",273,0)
 ;      REPORT
"RTN","RORXU005",274,0)
 ;
"RTN","RORXU005",275,0)
 ; DFN           IEN of the patient's record in the patient file (#2)
"RTN","RORXU005",276,0)
 ;
"RTN","RORXU005",277,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",278,0)
 ;
"RTN","RORXU005",279,0)
 ; Return Values:
"RTN","RORXU005",280,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",281,0)
 ;        1  Skip the patient
"RTN","RORXU005",282,0)
 ;
"RTN","RORXU005",283,0)
SKIPOEF(DFN,FLAGS) ;
"RTN","RORXU005",284,0)
 N VASV,QUIT
"RTN","RORXU005",285,0)
 D SVC^VADPT
"RTN","RORXU005",286,0)
 S QUIT=0
"RTN","RORXU005",287,0)
 ; Ignore if Only OEF/OIF selected and patient has no such POS
"RTN","RORXU005",288,0)
 I FLAGS["I" S QUIT=$S($G(VASV(11))!($G(VASV(12)))!($G(VASV(13))):0,1:1)
"RTN","RORXU005",289,0)
 ; Ignore if Exclude OEF/OIF selected and patient has such POS
"RTN","RORXU005",290,0)
 I 'QUIT,FLAGS["E" S QUIT=$S($G(VASV(11))!($G(VASV(12)))!($G(VASV(13))):1,1:0)
"RTN","RORXU005",291,0)
 Q QUIT
"RTN","RORXU005",292,0)
 ;
"RTN","RORXU005",293,0)
 ;***** CHECKS IF AGE RANGE OF PATIENT MATCHES AGE RANGE SELECTED FOR REPORT
"RTN","RORXU005",294,0)
 ;
"RTN","RORXU005",295,0)
 ; DFN           IEN of the patient's record in the patient file (#2)
"RTN","RORXU005",296,0)
 ;
"RTN","RORXU005",297,0)
 ; FLAGS         Flags that control the execution
"RTN","RORXU005",298,0)
 ;
"RTN","RORXU005",299,0)
 ; Return Values:
"RTN","RORXU005",300,0)
 ;        0  Continue processing of the patient's data
"RTN","RORXU005",301,0)
 ;        1  Skip the patient
"RTN","RORXU005",302,0)
 ;
"RTN","RORXU005",303,0)
SKIPAR(DFN,ARFLAGS) ; skip Age Range
"RTN","RORXU005",304,0)
 N VADM,VAPTYP,VAHOW,ARSTDT,ARENDT,PATAGE
"RTN","RORXU005",305,0)
 I $G(ARFLAGS)="" Q 0
"RTN","RORXU005",306,0)
 D DEM^VADPT
"RTN","RORXU005",307,0)
 S ARSTDT=$G(RORTSK("PARAMS","AGE_RANGE","A","START"))
"RTN","RORXU005",308,0)
 S ARENDT=$G(RORTSK("PARAMS","AGE_RANGE","A","END"))
"RTN","RORXU005",309,0)
 I ARSTDT>ARENDT!(ARSTDT="")!(ARENDT="") Q 0
"RTN","RORXU005",310,0)
 S PATAGE=$S(ARFLAGS["AGE":$P($G(VADM(4)),U),ARFLAGS["DOB":$P($G(VADM(3)),U),1:"")
"RTN","RORXU005",311,0)
 I PATAGE>ARENDT!(PATAGE<ARSTDT) Q 1
"RTN","RORXU005",312,0)
 Q 0
"RTN","RORXU005",313,0)
 ;
"RTN","RORXU005",314,0)
SKIPFUT(PTIEN,RORDAYS) ; SKIP if no future appointment  PATCH 33
"RTN","RORXU005",315,0)
 I '$$FUTAPPT^RORUTL02(PTIEN,RORDAYS) Q 1
"RTN","RORXU005",316,0)
 Q 0
"RTN","RORXU006")
0^3^B58238897^B51777169
"RTN","RORXU006",1,0)
RORXU006 ;HCIOFO/SG - REPORT PARAMETERS ;6/21/06 1:41pm
"RTN","RORXU006",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,13,21,31,33**;Feb 17, 2006;Build 81
"RTN","RORXU006",3,0)
 ;
"RTN","RORXU006",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU006",5,0)
 ;
"RTN","RORXU006",6,0)
 ; #91           Read access to the file #60 (controlled)
"RTN","RORXU006",7,0)
 ; #417          The .01 field of file #40.8 (controlled)
"RTN","RORXU006",8,0)
 ; #2947         ATESTS^ORWLRR (controlled)
"RTN","RORXU006",9,0)
 ; #10035        Direct read of DOD field of file #2 (supported)
"RTN","RORXU006",10,0)
 ; #10040        Read access to HOSPITAL LOCATION file (supported)
"RTN","RORXU006",11,0)
 ;
"RTN","RORXU006",12,0)
 ;******************************************************************************
"RTN","RORXU006",13,0)
 ;******************************************************************************
"RTN","RORXU006",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU006",15,0)
 ;        
"RTN","RORXU006",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU006",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU006",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Moved code in tags CLINLST and DIVLST to
"RTN","RORXU006",19,0)
 ;                                      PARMS^RORXU002 so the clinic or
"RTN","RORXU006",20,0)
 ;                                      division XML will be returned for all
"RTN","RORXU006",21,0)
 ;                                      reports. 
"RTN","RORXU006",22,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORXU006",23,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORXU006",24,0)
 ;                                      below is referring to path 13.
"RTN","RORXU006",25,0)
 ;ROR*1.5*21   SEP 2013    T KOPP       Add ICN column if Additional Identifier
"RTN","RORXU006",26,0)
 ;
"RTN","RORXU006",27,0)
 ;ROR*1.5*31   MAY 2017    M FERRARESE  Adding PACT and PCP as additional
"RTN","RORXU006",28,0)
 ;                                      identifiers.                                 
"RTN","RORXU006",29,0)
 ;******************************************************************************
"RTN","RORXU006",30,0)
 ;******************************************************************************
"RTN","RORXU006",31,0)
 Q
"RTN","RORXU006",32,0)
 ;
"RTN","RORXU006",33,0)
 ;***** PROCESSES THE LIST OF CLINICS
"RTN","RORXU006",34,0)
 ;
"RTN","RORXU006",35,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",36,0)
 ;
"RTN","RORXU006",37,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",38,0)
 ;
"RTN","RORXU006",39,0)
 ; Return Values:
"RTN","RORXU006",40,0)
 ;       <0  Error code
"RTN","RORXU006",41,0)
 ;       >0  IEN of the CLINICS element
"RTN","RORXU006",42,0)
 ;
"RTN","RORXU006",43,0)
CLINLST(RORTSK,PARTAG) ;
"RTN","RORXU006",44,0)
 Q 0  ;code removed for patch 11
"RTN","RORXU006",45,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",46,0)
 I $D(RORTSK("PARAMS","CLINICS","C"))>1  D
"RTN","RORXU006",47,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",48,0)
 . S IEN=0
"RTN","RORXU006",49,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",50,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",51,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU006",52,0)
 . . Q:TMP=""
"RTN","RORXU006",53,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU006",54,0)
 E  D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU006",55,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARTAG)
"RTN","RORXU006",56,0)
 Q +$G(LTAG)
"RTN","RORXU006",57,0)
 ;
"RTN","RORXU006",58,0)
 ;***** PROCESSES THE LIST OF CPT CODES
"RTN","RORXU006",59,0)
 ;
"RTN","RORXU006",60,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",61,0)
 ;
"RTN","RORXU006",62,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",63,0)
 ;
"RTN","RORXU006",64,0)
 ; Return Values:
"RTN","RORXU006",65,0)
 ;       <0  Error code
"RTN","RORXU006",66,0)
 ;       >0  IEN of the CPTLST element
"RTN","RORXU006",67,0)
 ;
"RTN","RORXU006",68,0)
CPTLST(RORTSK,PARTAG) ;
"RTN","RORXU006",69,0)
 N CPT,IEN,LTAG,TMP
"RTN","RORXU006",70,0)
 I $D(RORTSK("PARAMS","CPTLST","C"))>1  D
"RTN","RORXU006",71,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",72,0)
 . S IEN=0
"RTN","RORXU006",73,0)
 . F  S IEN=$O(RORTSK("PARAMS","CPTLST","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",74,0)
 . . S CPT=$P(RORTSK("PARAMS","CPTLST","C",IEN),U)  Q:CPT=""
"RTN","RORXU006",75,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CPT",CPT,LTAG,,IEN)
"RTN","RORXU006",76,0)
 E  D:$$PARAM^RORTSK01("CPTLST","ALL")
"RTN","RORXU006",77,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST","ALL",PARTAG)
"RTN","RORXU006",78,0)
 Q +$G(LTAG)
"RTN","RORXU006",79,0)
 ;
"RTN","RORXU006",80,0)
 ;***** PROCESSES THE LIST OF DIVISIONS
"RTN","RORXU006",81,0)
 ;
"RTN","RORXU006",82,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",83,0)
 ;
"RTN","RORXU006",84,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",85,0)
 ;
"RTN","RORXU006",86,0)
 ; Return Values:
"RTN","RORXU006",87,0)
 ;       <0  Error code
"RTN","RORXU006",88,0)
 ;       >0  IEN of the DIVISIONS element
"RTN","RORXU006",89,0)
 ;
"RTN","RORXU006",90,0)
DIVLST(RORTSK,PARTAG) ;
"RTN","RORXU006",91,0)
 Q 0  ;code removed for patch 11
"RTN","RORXU006",92,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",93,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C"))>1  D
"RTN","RORXU006",94,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",95,0)
 . S IEN=0
"RTN","RORXU006",96,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",97,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",98,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU006",99,0)
 . . Q:TMP=""
"RTN","RORXU006",100,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU006",101,0)
 E  D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU006",102,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARTAG)
"RTN","RORXU006",103,0)
 Q +$G(LTAG)
"RTN","RORXU006",104,0)
 ;
"RTN","RORXU006",105,0)
 ;***** PROCESSES THE LIST OF LAB TESTS
"RTN","RORXU006",106,0)
 ;
"RTN","RORXU006",107,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",108,0)
 ;
"RTN","RORXU006",109,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",110,0)
 ;
"RTN","RORXU006",111,0)
 ;
"RTN","RORXU006",112,0)
 ; .ROR8LST      Reference to a local variable, which contains a
"RTN","RORXU006",113,0)
 ;               closed root of an array. Descriptors of selected
"RTN","RORXU006",114,0)
 ;               lab tests will be returned into this array.
"RTN","RORXU006",115,0)
 ;
"RTN","RORXU006",116,0)
 ;                 @ROR8LTST@(ResultNode,TestIEN)
"RTN","RORXU006",117,0)
 ;                   ^01: Test IEN (in file #60)
"RTN","RORXU006",118,0)
 ;                   ^02: Test name
"RTN","RORXU006",119,0)
 ;                   ^03: 99
"RTN","RORXU006",120,0)
 ;                   ^04: "Other"
"RTN","RORXU006",121,0)
 ;                   ^05: Location subscript
"RTN","RORXU006",122,0)
 ;                   ^06: Result node
"RTN","RORXU006",123,0)
 ;
"RTN","RORXU006",124,0)
 ;               If this parameter is undefined or empty, then a
"RTN","RORXU006",125,0)
 ;               temporary buffer is allocated by the $$ALLOC^RORTMP
"RTN","RORXU006",126,0)
 ;               function and its root is returned via this parameter.
"RTN","RORXU006",127,0)
 ;
"RTN","RORXU006",128,0)
 ;               If all drugs are requested (the "ALL" attribute of
"RTN","RORXU006",129,0)
 ;               the "DRUGS" tag), then "*" is returned.
"RTN","RORXU006",130,0)
 ;
"RTN","RORXU006",131,0)
 ; [ROR8LRG]     Closed root of a node where the lab tests with
"RTN","RORXU006",132,0)
 ;               defined range values will be returned. By default
"RTN","RORXU006",133,0)
 ;               ($G(ROR8LRG)=""), this list is not compiled.
"RTN","RORXU006",134,0)
 ;
"RTN","RORXU006",135,0)
 ;                  @ROR8LRG@(TestIEN,
"RTN","RORXU006",136,0)
 ;                    "H") = Low
"RTN","RORXU006",137,0)
 ;                    "L") = High
"RTN","RORXU006",138,0)
 ;
"RTN","RORXU006",139,0)
 ;               "H", "L", or both will be defined.
"RTN","RORXU006",140,0)
 ;
"RTN","RORXU006",141,0)
 ; If the source list contains lab test panels, all corresponding
"RTN","RORXU006",142,0)
 ; lab tests are added to the @ROR8LST array but only a single tag
"RTN","RORXU006",143,0)
 ; is added to the XML list.
"RTN","RORXU006",144,0)
 ;
"RTN","RORXU006",145,0)
 ; Return Values:
"RTN","RORXU006",146,0)
 ;       <0  Error code
"RTN","RORXU006",147,0)
 ;       >0  IEN of the LABTESTS element
"RTN","RORXU006",148,0)
 ;
"RTN","RORXU006",149,0)
LTLST(RORTSK,PARTAG,ROR8LST,ROR8LRG) ;
"RTN","RORXU006",150,0)
 N ALL,BUF,I,LTAG,LTIEN,LTOPTS,TMP
"RTN","RORXU006",151,0)
 S ALL=+$$PARAM^RORTSK01("LABTESTS","ALL")
"RTN","RORXU006",152,0)
 S (LTAG,RC)=0
"RTN","RORXU006",153,0)
 ;
"RTN","RORXU006",154,0)
 ;=== Validate parameters
"RTN","RORXU006",155,0)
 I 'ALL  D  K @ROR8LST
"RTN","RORXU006",156,0)
 . S:$G(ROR8LST)="" ROR8LST=$$ALLOC^RORTMP()
"RTN","RORXU006",157,0)
 E  S ROR8LST="*"
"RTN","RORXU006",158,0)
 ;
"RTN","RORXU006",159,0)
 ;=== Process the drug options (if present)
"RTN","RORXU006",160,0)
 M LTOPTS=RORTSK("PARAMS","LABTESTS","A")
"RTN","RORXU006",161,0)
 I $D(LTOPTS)>1  D  Q:LTAG'>0 LTAG
"RTN","RORXU006",162,0)
 . N ATTR,REGIEN
"RTN","RORXU006",163,0)
 . S ATTR=$S(ALL:"ALL",1:"")
"RTN","RORXU006",164,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",ATTR,PARTAG)
"RTN","RORXU006",165,0)
 . Q:LTAG'>0
"RTN","RORXU006",166,0)
 . ;--- Output option attributes
"RTN","RORXU006",167,0)
 . S ATTR="",RC=0
"RTN","RORXU006",168,0)
 . F  S ATTR=$O(LTOPTS(ATTR))  Q:ATTR=""  D  Q:RC<0
"RTN","RORXU006",169,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,LTAG,ATTR,"1")
"RTN","RORXU006",170,0)
 . I RC<0  S LTAG=RC  Q
"RTN","RORXU006",171,0)
 . S ATTR=$$OPTXT^RORXU002(.LTOPTS)
"RTN","RORXU006",172,0)
 . D:ATTR'="" ADDATTR^RORTSK11(RORTSK,LTAG,"DESCR",ATTR)
"RTN","RORXU006",173,0)
 ;
"RTN","RORXU006",174,0)
 ;=== Process the list of tests (if present)
"RTN","RORXU006",175,0)
 I 'ALL,$D(RORTSK("PARAMS","LABTESTS","C"))>1  D
"RTN","RORXU006",176,0)
 . I LTAG'>0  D  Q:LTAG'>0
"RTN","RORXU006",177,0)
 . . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,PARTAG)
"RTN","RORXU006",178,0)
 . S LTIEN=0
"RTN","RORXU006",179,0)
 . F  S LTIEN=$O(RORTSK("PARAMS","LABTESTS","C",LTIEN))  Q:LTIEN'>0  D
"RTN","RORXU006",180,0)
 . . D LTLSTI(LTIEN,LTAG)
"RTN","RORXU006",181,0)
 ;
"RTN","RORXU006",182,0)
 Q $S(RC<0:RC,1:LTAG)
"RTN","RORXU006",183,0)
 ;
"RTN","RORXU006",184,0)
 ;***** CREATES THE LAB TEST ITEM(S)
"RTN","RORXU006",185,0)
 ;
"RTN","RORXU006",186,0)
 ; LTIEN         IEN of the lab test in the file #60
"RTN","RORXU006",187,0)
 ; [LTAG]        IEN of the parent tag
"RTN","RORXU006",188,0)
 ;
"RTN","RORXU006",189,0)
 ; This is an internal entry point. Do NOT call it directly.
"RTN","RORXU006",190,0)
 ;
"RTN","RORXU006",191,0)
LTLSTI(LTIEN,LTAG) ;
"RTN","RORXU006",192,0)
 N BUF,I,IENS,ITEM,LTNAME,LTNODE,PLTCNT,RORBUF,RORMSG,TMP
"RTN","RORXU006",193,0)
 ;--- Load the lab test parameters
"RTN","RORXU006",194,0)
 S IENS=LTIEN_","
"RTN","RORXU006",195,0)
 D GETS^DIQ(60,IENS,".01;5","EI","RORBUF","RORMSG")
"RTN","RORXU006",196,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,60,IENS)
"RTN","RORXU006",197,0)
 S LTNAME=$G(RORBUF(60,IENS,.01,"E"))  Q:LTNAME=""
"RTN","RORXU006",198,0)
 ;--- Output the tag and update the list of ranges
"RTN","RORXU006",199,0)
 D:$G(LTAG)>0
"RTN","RORXU006",200,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",LTNAME,LTAG,,LTIEN)
"RTN","RORXU006",201,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"L")))
"RTN","RORXU006",202,0)
 . D:TMP'=""
"RTN","RORXU006",203,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"LOW",TMP)
"RTN","RORXU006",204,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"L")=TMP
"RTN","RORXU006",205,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"H")))
"RTN","RORXU006",206,0)
 . D:TMP'=""
"RTN","RORXU006",207,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"HIGH",TMP)
"RTN","RORXU006",208,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"H")=TMP
"RTN","RORXU006",209,0)
 ;--- Process the panel
"RTN","RORXU006",210,0)
 D ATESTS^ORWLRR(.BUF,LTIEN)
"RTN","RORXU006",211,0)
 I $D(BUF)>1  S I="",PLTCNT=0  D  Q:PLTCNT>1
"RTN","RORXU006",212,0)
 . F  S I=$O(BUF(I))  Q:I=""  D
"RTN","RORXU006",213,0)
 . . S TMP=+$P(BUF(I),U),PLTCNT=PLTCNT+1
"RTN","RORXU006",214,0)
 . . D:TMP'=LTIEN LTLSTI(TMP)
"RTN","RORXU006",215,0)
 ;--- Create the reference
"RTN","RORXU006",216,0)
 S LTNODE=$P($G(RORBUF(60,IENS,5,"I")),";",2)  Q:LTNODE=""
"RTN","RORXU006",217,0)
 S BUF=LTIEN_U_LTNAME_U_"99^Other"
"RTN","RORXU006",218,0)
 S $P(BUF,U,5)=$P(RORBUF(60,IENS,5,"I"),";")  ; Subscript
"RTN","RORXU006",219,0)
 S $P(BUF,U,6)=LTNODE                         ; Result node
"RTN","RORXU006",220,0)
 S @ROR8LST@(LTNODE,LTIEN)=BUF
"RTN","RORXU006",221,0)
 Q
"RTN","RORXU006",222,0)
 ;
"RTN","RORXU006",223,0)
 ;***** CHECKS IF THE OPTIONAL COLUMN IS SELECTED
"RTN","RORXU006",224,0)
 ;
"RTN","RORXU006",225,0)
 ; NAME          Column name
"RTN","RORXU006",226,0)
 ;
"RTN","RORXU006",227,0)
 ; Return Values:
"RTN","RORXU006",228,0)
 ;        0  Skip the field
"RTN","RORXU006",229,0)
 ;       >0  Include in report
"RTN","RORXU006",230,0)
 ;
"RTN","RORXU006",231,0)
OPTCOL(NAME) ;
"RTN","RORXU006",232,0)
 Q $S($G(NAME)'="":$D(RORTSK("PARAMS","OPTIONAL_COLUMNS","C",NAME)),1:0)
"RTN","RORXU006",233,0)
 ;
"RTN","RORXU006",234,0)
 ;***** CHECK IF ONLY THE SUMMARY SHOULD BE GENERATED
"RTN","RORXU006",235,0)
SMRYONLY() ;
"RTN","RORXU006",236,0)
 Q:$$PARAM^RORTSK01("MAXUTNUM")'="" 0
"RTN","RORXU006",237,0)
 Q:$$PARAM^RORTSK01("MINRPNUM")'="" 0
"RTN","RORXU006",238,0)
 Q 1
"RTN","RORXU006",239,0)
 ;
"RTN","RORXU006",240,0)
 ;***** OUTPUTS ICN DATA IF ICN SHOULD BE THE FINAL COLUMN
"RTN","RORXU006",241,0)
 ; TASK          Task number
"RTN","RORXU006",242,0)
 ;
"RTN","RORXU006",243,0)
 ; VALUE         DFN of patient
"RTN","RORXU006",244,0)
 ;
"RTN","RORXU006",245,0)
 ; PARENT        IEN of the parent element
"RTN","RORXU006",246,0)
 ;
"RTN","RORXU006",247,0)
ICNDATA(TASK,VALUE,PARENT) ;
"RTN","RORXU006",248,0)
 N TMP
"RTN","RORXU006",249,0)
 S TMP=$$ICN^RORUTL02(VALUE)
"RTN","RORXU006",250,0)
 I TMP'<0 D ADDVAL^RORTSK11(TASK,"ICN",TMP,PARENT,1)
"RTN","RORXU006",251,0)
 Q
"RTN","RORXU006",252,0)
 ;
"RTN","RORXU006",253,0)
PACTDATA(TASK,VALUE,PARENT) ;
"RTN","RORXU006",254,0)
 N TMP
"RTN","RORXU006",255,0)
 S TMP=$$PACT^RORUTL02(VALUE)
"RTN","RORXU006",256,0)
 I TMP'<0 D ADDVAL^RORTSK11(TASK,"PACT",TMP,PARENT,1)
"RTN","RORXU006",257,0)
 Q
"RTN","RORXU006",258,0)
 ;
"RTN","RORXU006",259,0)
PCPDATA(TASK,VALUE,PARENT) ;
"RTN","RORXU006",260,0)
 N TMP
"RTN","RORXU006",261,0)
 S TMP=$$PCP^RORUTL02(VALUE)
"RTN","RORXU006",262,0)
 I TMP'<0 D ADDVAL^RORTSK11(TASK,"PCP",TMP,PARENT,1)
"RTN","RORXU006",263,0)
 Q
"RTN","RORXU006",264,0)
FUTAPPT(TASK,DFN,DAYS,PARENT) ;  PATCH 33
"RTN","RORXU006",265,0)
 N TMP
"RTN","RORXU006",266,0)
 S TMP=0
"RTN","RORXU006",267,0)
 S TMP=$$FUTAPPT^RORUTL02(DFN,DAYS)
"RTN","RORXU006",268,0)
 I TMP'<0 D 
"RTN","RORXU006",269,0)
 . D ADDVAL^RORTSK11(TASK,"FUT_APPT",TMP,PARENT,1)
"RTN","RORXU006",270,0)
 . D ADDATTR^RORTSK11(TASK,TMP,"NAME","FUT_APPT")
"RTN","RORXU006",271,0)
 Q
"RTN","RORXU006",272,0)
 ;
"RTN","RORXU006",273,0)
 ;***** OUTPUTS ICN HEADER IF ICN SHOULD BE THE FINAL COLUMN
"RTN","RORXU006",274,0)
 ; TASK          Task number
"RTN","RORXU006",275,0)
 ;
"RTN","RORXU006",276,0)
 ; PARENT        IEN of the parent element
"RTN","RORXU006",277,0)
 ;
"RTN","RORXU006",278,0)
ICNHDR(TASK,PARENT) ;
"RTN","RORXU006",279,0)
 N TMP
"RTN","RORXU006",280,0)
 S TMP=$$ADDVAL^RORTSK11(TASK,"COLUMN",,PARENT)
"RTN","RORXU006",281,0)
 D ADDATTR^RORTSK11(TASK,TMP,"NAME","ICN")
"RTN","RORXU006",282,0)
 Q
"RTN","RORXU006",283,0)
 ;
"RTN","RORXU006",284,0)
PACTHDR(TASK,PARENT) ;
"RTN","RORXU006",285,0)
 N TMP
"RTN","RORXU006",286,0)
 S TMP=$$ADDVAL^RORTSK11(TASK,"COLUMN",,PARENT)
"RTN","RORXU006",287,0)
 D ADDATTR^RORTSK11(TASK,TMP,"NAME","PACT")
"RTN","RORXU006",288,0)
 Q
"RTN","RORXU006",289,0)
 ;
"RTN","RORXU006",290,0)
PCPHDR(TASK,PARENT) ;
"RTN","RORXU006",291,0)
 N TMP
"RTN","RORXU006",292,0)
 S TMP=$$ADDVAL^RORTSK11(TASK,"COLUMN",,PARENT)
"RTN","RORXU006",293,0)
 D ADDATTR^RORTSK11(TASK,TMP,"NAME","PCP")
"RTN","RORXU006",294,0)
 Q
"RTN","RORXU006",295,0)
 ;
"RTN","RORXU006",296,0)
APPTHDR(TASK,PARENT) ;
"RTN","RORXU006",297,0)
 N TMP
"RTN","RORXU006",298,0)
 S TMP=$$ADDVAL^RORTSK11(TASK,"COLUMN",,PARENT)
"RTN","RORXU006",299,0)
 D ADDATTR^RORTSK11(TASK,TMP,"NAME","FUT_APPT")
"RTN","RORXU006",300,0)
 Q
"RTN","RORXU006",301,0)
 ;
"VER")
8.0^22.2
"^DD",798.1,798.1,0)
FIELD^^31^36
"^DD",798.1,798.1,0,"DDA")
N
"^DD",798.1,798.1,0,"DT")
3120301
"^DD",798.1,798.1,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,4),,"?30")
"^DD",798.1,798.1,0,"IX","ACL",798.118,.01)

"^DD",798.1,798.1,0,"IX","AEP",798.1,25)

"^DD",798.1,798.1,0,"IX","ARULES",798.13,.01)

"^DD",798.1,798.1,0,"IX","C",798.1,31)

"^DD",798.1,798.1,0,"NM","ROR REGISTRY PARAMETERS")
 
"^DD",798.1,798.1,0,"PT",798,.02)
 
"^DD",798.1,798.1,0,"PT",798.31,.01)
 
"^DD",798.1,798.1,0,"PT",798.5,.01)

"^DD",798.1,798.1,0,"PT",798.6,.02)
 
"^DD",798.1,798.1,0,"PT",798.73,.01)
 
"^DD",798.1,798.1,0,"PT",798.8,.03)
 
"^DD",798.1,798.1,0,"PT",799.1,.03)
 
"^DD",798.1,798.1,0,"PT",799.51,.02)

"^DD",798.1,798.1,0,"PT",799.53,.03)
 
"^DD",798.1,798.1,0,"SCR")
I $$ACCESS^RORDD(798.1,Y)
"^DD",798.1,798.1,0,"VRPK")
ROR
"^DD",798.1,798.1,0,"VRRV")
1.5^ROR 1.5
"^DD",798.1,798.1,.01,0)
REGISTRY NAME^RFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>30!($L(X)<3)!'(X?1.UNP) X
"^DD",798.1,798.1,.01,1,0)
^.1^^0
"^DD",798.1,798.1,.01,3)
Enter the unique registry name (3-30 characters).
"^DD",798.1,798.1,.01,8.5)
@
"^DD",798.1,798.1,.01,9)
@
"^DD",798.1,798.1,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.01,20,1,0)
DEFINITION
"^DD",798.1,798.1,.01,21,0)
^.001^9^9^3060203^^
"^DD",798.1,798.1,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,.01,21,3,0)
 
"^DD",798.1,798.1,.01,21,4,0)
You can either select an existing registry or add 
"^DD",798.1,798.1,.01,21,5,0)
a new one. Registry names must be unique. Names of
"^DD",798.1,798.1,.01,21,6,0)
the National registries must start with "VA".
"^DD",798.1,798.1,.01,21,7,0)
 
"^DD",798.1,798.1,.01,21,8,0)
You can only select records of those registries
"^DD",798.1,798.1,.01,21,9,0)
that you have appropriate security key(s) for.
"^DD",798.1,798.1,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,.01,"DT")
3060203
"^DD",798.1,798.1,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;11^Q:$$VAEDT^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,8.5)
@
"^DD",798.1,798.1,.09,9)
@
"^DD",798.1,798.1,.09,20,0)
^.3LA^1^1
"^DD",798.1,798.1,.09,20,1,0)
DEFINITION
"^DD",798.1,798.1,.09,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.1,798.1,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.1,798.1,.09,21,3,0)
 
"^DD",798.1,798.1,.09,21,4,0)
The national registries must have this field set
"^DD",798.1,798.1,.09,21,5,0)
to "YES". This prevents local editing of other 
"^DD",798.1,798.1,.09,21,6,0)
fields of national registry definitions.
"^DD",798.1,798.1,.09,"DEL",1,0)
I $$VADEL^RORDD(798.1,,-1)
"^DD",798.1,798.1,.09,"DT")
3011120
"^DD",798.1,798.1,1,0)
REGISTRY UPDATED UNTIL^D^^0;2^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,1,20,1,0)
STATE
"^DD",798.1,798.1,1,21,0)
^^9^9^3060203^
"^DD",798.1,798.1,1,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,1,21,2,0)
successful run of the regular registry update
"^DD",798.1,798.1,1,21,3,0)
process. The search engine looks for new patients
"^DD",798.1,798.1,1,21,4,0)
starting from this date.
"^DD",798.1,798.1,1,21,5,0)
 
"^DD",798.1,798.1,1,21,6,0)
Usually, this field should not be manually edited;
"^DD",798.1,798.1,1,21,7,0)
it is updated automatically. Before initial
"^DD",798.1,798.1,1,21,8,0)
population of the registry, enter the date that the
"^DD",798.1,798.1,1,21,9,0)
data search should start from.
"^DD",798.1,798.1,1,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,1,23,1,0)
This field is updated automatically by the registry 
"^DD",798.1,798.1,1,23,2,0)
update process after successful completion (see the 
"^DD",798.1,798.1,1,23,3,0)
$$TMSTMP^RORUPD01 function for details).
"^DD",798.1,798.1,1,"DT")
3010928
"^DD",798.1,798.1,2,0)
DATA EXTRACTED UNTIL^D^^0;3^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,2,20,1,0)
STATE
"^DD",798.1,798.1,2,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,21,1,0)
This field indicates the date of the last 
"^DD",798.1,798.1,2,21,2,0)
successful run of the regular data extraction
"^DD",798.1,798.1,2,21,3,0)
process. Do not edit this field.
"^DD",798.1,798.1,2,23,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,2,23,1,0)
This field is updated automatically by the regular data
"^DD",798.1,798.1,2,23,2,0)
extraction process after its successful completion (see
"^DD",798.1,798.1,2,23,3,0)
the $$TMSTMP^ROREXTUT function for details).
"^DD",798.1,798.1,2,"DT")
3010928
"^DD",798.1,798.1,3,0)
SELECTION RULE^798.13^^1;0
"^DD",798.1,798.1,3,9)
@
"^DD",798.1,798.1,3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,3,20,1,0)
DEFINITION
"^DD",798.1,798.1,3,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.1,3,21,1,0)
The SELECTION RULE field contains a list of the 
"^DD",798.1,798.1,3,21,2,0)
top-level selection rules that are used to screen
"^DD",798.1,798.1,3,21,3,0)
the patients to be added to the registry.
"^DD",798.1,798.1,3,21,4,0)
 
"^DD",798.1,798.1,3,21,5,0)
The records of the multiple are uniquely 
"^DD",798.1,798.1,3,21,6,0)
identified by the selection rule names. The "A"
"^DD",798.1,798.1,3,21,7,0)
primary key and the uniqueness index "B" are used
"^DD",798.1,798.1,3,21,8,0)
for this purpose.
"^DD",798.1,798.1,4,0)
SHORT DESCRIPTION^RFX^^0;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>40!($L(X)<3) X
"^DD",798.1,798.1,4,3)
Enter a short description of the registry (3-40 characters).
"^DD",798.1,798.1,4,8.5)
@
"^DD",798.1,798.1,4,9)
@
"^DD",798.1,798.1,4,21,0)
^.001^2^2^3020403^^
"^DD",798.1,798.1,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,4,"DT")
3011109
"^DD",798.1,798.1,5,0)
DESCRIPTION^798.15^^2;0
"^DD",798.1,798.1,5,21,0)
^.001^2^2^3011009^^^
"^DD",798.1,798.1,5,21,1,0)
Any additional reference information related to
"^DD",798.1,798.1,5,21,2,0)
the registry may be stored in this field.
"^DD",798.1,798.1,5,23,0)
^.001^1^1^3011009^^
"^DD",798.1,798.1,5,23,1,0)
Content of this field is not used by the application.
"^DD",798.1,798.1,6.1,0)
BEFORE UPDATE^FX^^4;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.1,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.1,8.5)
@
"^DD",798.1,798.1,6.1,9)
@
"^DD",798.1,798.1,6.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.1,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.1,21,0)
^.001^7^7^3050427^^^^
"^DD",798.1,798.1,6.1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.1,21,3,0)
 
"^DD",798.1,798.1,6.1,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.1,21,5,0)
MUMPS function that will be called before adding a
"^DD",798.1,798.1,6.1,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.1,21,7,0)
be used to prepare any additional data.
"^DD",798.1,798.1,6.1,23,0)
^^20^20^3050427^
"^DD",798.1,798.1,6.1,23,1,0)
The call-back entry point must accept three parameters:
"^DD",798.1,798.1,6.1,23,2,0)
 
"^DD",798.1,798.1,6.1,23,3,0)
FDA - A reference to a local array that contains 
"^DD",798.1,798.1,6.1,23,4,0)
prepared data (for the UPDATE^DIE FileMan DSB call)
"^DD",798.1,798.1,6.1,23,5,0)
that should be stored as a new record in the ROR
"^DD",798.1,798.1,6.1,23,6,0)
REGISTRY RECORD (#798) file.
"^DD",798.1,798.1,6.1,23,7,0)
 
"^DD",798.1,798.1,6.1,23,8,0)
The main record uses "+1," placeholder and records of
"^DD",798.1,798.1,6.1,23,9,0)
the SELECTION RULE multiple use placeholders with
"^DD",798.1,798.1,6.1,23,10,0)
numbers starting from 1001.
"^DD",798.1,798.1,6.1,23,11,0)
 
"^DD",798.1,798.1,6.1,23,12,0)
See the source code of the $$ADD^RORUPD50 function and
"^DD",798.1,798.1,6.1,23,13,0)
the FileMan Programmer Manual for further details.
"^DD",798.1,798.1,6.1,23,14,0)
 
"^DD",798.1,798.1,6.1,23,15,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,6.1,23,16,0)
 
"^DD",798.1,798.1,6.1,23,17,0)
REGIEN - Registry IEN (in the file #798.1)
"^DD",798.1,798.1,6.1,23,18,0)
 
"^DD",798.1,798.1,6.1,23,19,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.1,23,20,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.1,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.1,"DT")
3011120
"^DD",798.1,798.1,6.2,0)
AFTER UPDATE^FX^^5;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(3)
"^DD",798.1,798.1,6.2,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,6.2,8.5)
@
"^DD",798.1,798.1,6.2,9)
@
"^DD",798.1,798.1,6.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,6.2,20,1,0)
DEFINITION
"^DD",798.1,798.1,6.2,21,0)
^.001^8^8^3020816^^
"^DD",798.1,798.1,6.2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,6.2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,6.2,21,3,0)
 
"^DD",798.1,798.1,6.2,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external
"^DD",798.1,798.1,6.2,21,5,0)
MUMPS function that will be called after adding a
"^DD",798.1,798.1,6.2,21,6,0)
new record to the registry. This entry point can
"^DD",798.1,798.1,6.2,21,7,0)
be used to create record(s) in additional linked
"^DD",798.1,798.1,6.2,21,8,0)
file(s) of the local registry.
"^DD",798.1,798.1,6.2,23,0)
^^11^11^3050427^
"^DD",798.1,798.1,6.2,23,1,0)
The call-back function must accept three parameters:
"^DD",798.1,798.1,6.2,23,2,0)
 
"^DD",798.1,798.1,6.2,23,3,0)
IEN - An IEN of the newly added record of the ROR
"^DD",798.1,798.1,6.2,23,4,0)
REGISTRY RECORD file
"^DD",798.1,798.1,6.2,23,5,0)
 
"^DD",798.1,798.1,6.2,23,6,0)
PATIEN - Patient IEN (in file #2)
"^DD",798.1,798.1,6.2,23,7,0)
 
"^DD",798.1,798.1,6.2,23,8,0)
REGIEN - Registry IEN (in file #798.1)
"^DD",798.1,798.1,6.2,23,9,0)
 
"^DD",798.1,798.1,6.2,23,10,0)
The function should return a negative number in case of
"^DD",798.1,798.1,6.2,23,11,0)
errors. Otherwise, zero should be returned.
"^DD",798.1,798.1,6.2,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,6.2,"DT")
3011120
"^DD",798.1,798.1,7,0)
EXTRACT PERIOD FOR NEW PATIENT^NJ5,0X^^0;5^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:+X'=X!(X>15000)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,7,3)
Enter number of days between 1 and 15000.
"^DD",798.1,798.1,7,8.5)
@
"^DD",798.1,798.1,7,9)
@
"^DD",798.1,798.1,7,20,0)
^.3LA^1^1
"^DD",798.1,798.1,7,20,1,0)
DEFINITION
"^DD",798.1,798.1,7,21,0)
^.001^11^11^3030717^^^
"^DD",798.1,798.1,7,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,7,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,7,21,3,0)
 
"^DD",798.1,798.1,7,21,4,0)
Enter the number of days that should be subtracted
"^DD",798.1,798.1,7,21,5,0)
from the earliest date when the patient passed one
"^DD",798.1,798.1,7,21,6,0)
of the selection rules. The result will be used as
"^DD",798.1,798.1,7,21,7,0)
the start date of the data extraction for this new
"^DD",798.1,798.1,7,21,8,0)
patient.
"^DD",798.1,798.1,7,21,9,0)
 
"^DD",798.1,798.1,7,21,10,0)
If this field is empty, the default value of 3650
"^DD",798.1,798.1,7,21,11,0)
is used.
"^DD",798.1,798.1,7,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,7,"DT")
3011109
"^DD",798.1,798.1,7,"V",0)
^.12P
"^DD",798.1,798.1,8,0)
ENABLE LOG^S^0:NO;1:YES;^0;6^Q
"^DD",798.1,798.1,8,20,0)
^.3LA^1^1
"^DD",798.1,798.1,8,20,1,0)
PARAMETERS
"^DD",798.1,798.1,8,21,0)
^^3^3^3060203^
"^DD",798.1,798.1,8,21,1,0)
Select "YES" to enable recording of different 
"^DD",798.1,798.1,8,21,2,0)
kinds of events (debug messages, errors, etc.)
"^DD",798.1,798.1,8,21,3,0)
generated by registry processes.
"^DD",798.1,798.1,8,23,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,8,23,1,0)
The ENABLE LOG field controls recording of the errors
"^DD",798.1,798.1,8,23,2,0)
and other events in the log file.
"^DD",798.1,798.1,8,23,3,0)
 
"^DD",798.1,798.1,8,23,4,0)
If internal value of the field is 0 or the field is 
"^DD",798.1,798.1,8,23,5,0)
empty, the recording of all events associated with the
"^DD",798.1,798.1,8,23,6,0)
registry is disabled.
"^DD",798.1,798.1,8,23,7,0)
 
"^DD",798.1,798.1,8,23,8,0)
If internal value of the field is 1, content of the
"^DD",798.1,798.1,8,23,9,0)
LOG EVENT multiple is analyzed to determine which
"^DD",798.1,798.1,8,23,10,0)
events (errors, warnings, etc.) should be recorded.
"^DD",798.1,798.1,8,"DT")
3000503
"^DD",798.1,798.1,8.1,0)
LOG EVENT^798.11S^^3;0
"^DD",798.1,798.1,8.1,20,0)
^.3LA^^0
"^DD",798.1,798.1,8.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,8.1,21,1,0)
The LOG EVENT multiple contain a list of event 
"^DD",798.1,798.1,8.1,21,2,0)
types that are enabled to record. 
"^DD",798.1,798.1,8.1,21,3,0)
 
"^DD",798.1,798.1,8.1,21,4,0)
If the list is empty and recording is enabled, 
"^DD",798.1,798.1,8.1,21,5,0)
all events except debug messages will be recorded.
"^DD",798.1,798.1,8.1,21,6,0)
 
"^DD",798.1,798.1,8.1,21,7,0)
Otherwise, only recording of the events from the
"^DD",798.1,798.1,8.1,21,8,0)
list and error messages will be enabled.
"^DD",798.1,798.1,8.1,"DT")
3050722
"^DD",798.1,798.1,10,0)
MESSAGE BUILDER^FX^^7;E1,245^Q:$$VAEDT^RORDD(798.1,$G(DA))  Q:$$EP^RORDD(4)
"^DD",798.1,798.1,10,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",798.1,798.1,10,8.5)
@
"^DD",798.1,798.1,10,9)
@
"^DD",798.1,798.1,10,20,0)
^.3LA^1^1
"^DD",798.1,798.1,10,20,1,0)
DEFINITION
"^DD",798.1,798.1,10,21,0)
^^10^10^3060106^
"^DD",798.1,798.1,10,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,10,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,10,21,3,0)
 
"^DD",798.1,798.1,10,21,4,0)
Enter a full name ($$TAG^ROUTINE) of the external 
"^DD",798.1,798.1,10,21,5,0)
MUMPS function that will be called to generate the
"^DD",798.1,798.1,10,21,6,0)
registry-specific section of the HL7 message for
"^DD",798.1,798.1,10,21,7,0)
each record of the registry.
"^DD",798.1,798.1,10,21,8,0)
 
"^DD",798.1,798.1,10,21,9,0)
If this field has no value, the default entry 
"^DD",798.1,798.1,10,21,10,0)
point ($$REGDATA^ROREXT02) will be used.
"^DD",798.1,798.1,10,23,0)
^^28^28^3060106^
"^DD",798.1,798.1,10,23,1,0)
The call-back function must accept four parameters:
"^DD",798.1,798.1,10,23,2,0)
 
"^DD",798.1,798.1,10,23,3,0)
IEN - IEN of the registry record
"^DD",798.1,798.1,10,23,4,0)
 
"^DD",798.1,798.1,10,23,5,0)
PATIEN - Patient IEN (in the file #2)
"^DD",798.1,798.1,10,23,6,0)
 
"^DD",798.1,798.1,10,23,7,0)
[.]DXDTS - Either a single time frame in 
"^DD",798.1,798.1,10,23,8,0)
StartDate^EndDate format or a reference to a local 
"^DD",798.1,798.1,10,23,9,0)
variable containing the list of data extraction time 
"^DD",798.1,798.1,10,23,10,0)
frames. The main time frame should be stored in the
"^DD",798.1,798.1,10,23,11,0)
root node (see the $$DXPERIOD^ROREXTUT function for 
"^DD",798.1,798.1,10,23,12,0)
details):
"^DD",798.1,798.1,10,23,13,0)
 
"^DD",798.1,798.1,10,23,14,0)
  DXDTS(         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,15,0)
    DataArea,
"^DD",798.1,798.1,10,23,16,0)
      i)         StartDate^EndDate  (FileMan)
"^DD",798.1,798.1,10,23,17,0)
 
"^DD",798.1,798.1,10,23,18,0)
The function should add the text of the HL7 message 
"^DD",798.1,798.1,10,23,19,0)
after already existing nodes in the standard location:
"^DD",798.1,798.1,10,23,20,0)
^TMP("HLS",$J). DO NOT KILL THIS NODE! It contains the
"^DD",798.1,798.1,10,23,21,0)
previous messages of the batch.
"^DD",798.1,798.1,10,23,22,0)
 
"^DD",798.1,798.1,10,23,23,0)
If the message was generated successfully, the function
"^DD",798.1,798.1,10,23,24,0)
should return zero. A negative value corresponds to the
"^DD",798.1,798.1,10,23,25,0)
error code.
"^DD",798.1,798.1,10,23,26,0)
                                                                    
"^DD",798.1,798.1,10,23,27,0)
See the source code of the $$REGDATA^ROREXT02 function 
"^DD",798.1,798.1,10,23,28,0)
for further details.
"^DD",798.1,798.1,10,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,10,"DT")
3011120
"^DD",798.1,798.1,11,0)
REGISTRY STATUS^S^0:ACTIVE;1:INACTIVE;^0;7^Q
"^DD",798.1,798.1,11,1,0)
^.1^^0
"^DD",798.1,798.1,11,20,0)
^.3LA^1^1
"^DD",798.1,798.1,11,20,1,0)
PARAMETERS
"^DD",798.1,798.1,11,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,11,21,1,0)
Select the "INACTIVE" code if you want to exclude
"^DD",798.1,798.1,11,21,2,0)
the registry from the regular registry updates and
"^DD",798.1,798.1,11,21,3,0)
data transmissions.
"^DD",798.1,798.1,11,"DT")
3020424
"^DD",798.1,798.1,12,0)
EXTRACTED RESULT^798.112I^^8;0
"^DD",798.1,798.1,12,9)
@
"^DD",798.1,798.1,12,20,0)
^.3LA^1^1
"^DD",798.1,798.1,12,20,1,0)
DEFINITION
"^DD",798.1,798.1,12,21,0)
^.001^3^3^3020816^^
"^DD",798.1,798.1,12,21,1,0)
This multiple contains a list of Lab result codes.
"^DD",798.1,798.1,12,21,2,0)
These results will be extracted and transmitted to
"^DD",798.1,798.1,12,21,3,0)
AAC.
"^DD",798.1,798.1,12,"DT")
3010629
"^DD",798.1,798.1,13,0)
PROTOCOL^*P101'X^ORD(101,^9;1^Q:$$VAEDT^RORDD(798.1,$G(DA))  S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,13,3)
 
"^DD",798.1,798.1,13,8.5)
@
"^DD",798.1,798.1,13,9)
@
"^DD",798.1,798.1,13,12)
Only Event Drivers from the "ROR" namespace can be selected!
"^DD",798.1,798.1,13,12.1)
S DIC("S")="S D=$G(^(0)) I $E($P(D,U),1,3)=""ROR"",$P(D,U,4)=""E"""
"^DD",798.1,798.1,13,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13,20,1,0)
HL7
"^DD",798.1,798.1,13,20,2,0)
DEFINITION
"^DD",798.1,798.1,13,21,0)
^.001^6^6^3120501^^^^
"^DD",798.1,798.1,13,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13,21,3,0)
 
"^DD",798.1,798.1,13,21,4,0)
This field contains a pointer to the protocol in 
"^DD",798.1,798.1,13,21,5,0)
the PROTOCOL file that is used as the event driver
"^DD",798.1,798.1,13,21,6,0)
for sending HL7 messages.
"^DD",798.1,798.1,13,23,0)
^^5^5^3120501^
"^DD",798.1,798.1,13,23,1,0)
If several registries are processed by the same nightly
"^DD",798.1,798.1,13,23,2,0)
task and they have different values of the PROTOCOL
"^DD",798.1,798.1,13,23,3,0)
field, then the registries are grouped by the value of
"^DD",798.1,798.1,13,23,4,0)
this field and data extraction is performed separately
"^DD",798.1,798.1,13,23,5,0)
for each of those groups.
"^DD",798.1,798.1,13,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13,"DT")
3011112
"^DD",798.1,798.1,13.1,0)
MAXIMUM MESSAGE SIZE^NJ4,1^^9;2^K:+X'=X!(X>99)!(X<0)!(X?.E1"."2N.N) X
"^DD",798.1,798.1,13.1,3)
Enter maximum size (in megabytes) between 0 and 99, 1 decimal digit.
"^DD",798.1,798.1,13.1,8.5)
@
"^DD",798.1,798.1,13.1,9)
@
"^DD",798.1,798.1,13.1,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.1,20,1,0)
HL7
"^DD",798.1,798.1,13.1,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.1,21,0)
^.001^8^8^3060203^^
"^DD",798.1,798.1,13.1,21,1,0)
This field stores the maximum size (in megabytes)
"^DD",798.1,798.1,13.1,21,2,0)
of a batch HL7 message that can be sent to Austin
"^DD",798.1,798.1,13.1,21,3,0)
Automation Center (AAC). If this field is empty or
"^DD",798.1,798.1,13.1,21,4,0)
contains 0, the size is not limited.
"^DD",798.1,798.1,13.1,21,5,0)
 
"^DD",798.1,798.1,13.1,21,6,0)
You must coordinate your intentions with AAC
"^DD",798.1,798.1,13.1,21,7,0)
support personnel if you are going to edit this
"^DD",798.1,798.1,13.1,21,8,0)
field.
"^DD",798.1,798.1,13.1,23,0)
^^8^8^3060203^
"^DD",798.1,798.1,13.1,23,1,0)
Actual size of an HL7 batch can be greater than the
"^DD",798.1,798.1,13.1,23,2,0)
value of this field because the software does not break
"^DD",798.1,798.1,13.1,23,3,0)
in the middle of an individual HL7 message.
"^DD",798.1,798.1,13.1,23,4,0)
 
"^DD",798.1,798.1,13.1,23,5,0)
For example, if the maximum size is 10Mb, the current
"^DD",798.1,798.1,13.1,23,6,0)
size is 9Mb and 3Mb should be sent for the patient
"^DD",798.1,798.1,13.1,23,7,0)
being processed, then the actual size of the batch will
"^DD",798.1,798.1,13.1,23,8,0)
be 12Mb.
"^DD",798.1,798.1,13.1,"DT")
3020730
"^DD",798.1,798.1,13.2,0)
ALERT FREQUENCY^NJ2,0^^9;3^K:+X'=X!(X>10)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,13.2,3)
Type a Number between 1 and 10, 0 Decimal Digits
"^DD",798.1,798.1,13.2,8.5)
@
"^DD",798.1,798.1,13.2,9)
@
"^DD",798.1,798.1,13.2,11,0)
^.2LAP^^0
"^DD",798.1,798.1,13.2,20,0)
^.3LA^2^2
"^DD",798.1,798.1,13.2,20,1,0)
HL7
"^DD",798.1,798.1,13.2,20,2,0)
PARAMETERS
"^DD",798.1,798.1,13.2,21,0)
^.001^20^20^3060203^^
"^DD",798.1,798.1,13.2,21,1,0)
Value of the ALERT FREQUENCY field determines how
"^DD",798.1,798.1,13.2,21,2,0)
often e-mail notifications and VistA alerts are 
"^DD",798.1,798.1,13.2,21,3,0)
sent to the AAC and local staff in case of
"^DD",798.1,798.1,13.2,21,4,0)
problems with the site's CCR software (data
"^DD",798.1,798.1,13.2,21,5,0)
extraction problems, unsent HL7 messages, etc.).
"^DD",798.1,798.1,13.2,21,6,0)
 
"^DD",798.1,798.1,13.2,21,7,0)
If this field is empty or 0, notifications are
"^DD",798.1,798.1,13.2,21,8,0)
not sent.
"^DD",798.1,798.1,13.2,21,9,0)
 
"^DD",798.1,798.1,13.2,21,10,0)
Otherwise, the nightly task increments the error
"^DD",798.1,798.1,13.2,21,11,0)
counters and checks the remainders from division
"^DD",798.1,798.1,13.2,21,12,0)
of the counters by the value of this field. When a
"^DD",798.1,798.1,13.2,21,13,0)
reminder becomes 0, the software sends the
"^DD",798.1,798.1,13.2,21,14,0)
corresponding e-mail notification to the AAC and
"^DD",798.1,798.1,13.2,21,15,0)
generates the VistA alert to the local staff
"^DD",798.1,798.1,13.2,21,16,0)
listed in the NOTIFICATION multiple (14).
"^DD",798.1,798.1,13.2,21,17,0)
 
"^DD",798.1,798.1,13.2,21,18,0)
For example, if the nightly task runs every night 
"^DD",798.1,798.1,13.2,21,19,0)
and the ALERT FREQUENCY is 2, then alerts and 
"^DD",798.1,798.1,13.2,21,20,0)
notifications will be sent every other night.
"^DD",798.1,798.1,13.2,23,0)
^.001^3^3^3060203^^^
"^DD",798.1,798.1,13.2,23,1,0)
See description of the HL7 PROBLEM COUNTER field (19.3)
"^DD",798.1,798.1,13.2,23,2,0)
and source code of the $$CHECKMSG^ROR10 function for
"^DD",798.1,798.1,13.2,23,3,0)
more details.
"^DD",798.1,798.1,13.2,"DT")
3050503
"^DD",798.1,798.1,13.3,0)
NATIONAL NOTIFICATION E-MAIL^FX^^9;4^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>50!($L(X)<3)!(X'?1.ANP1"@"1.ANP) X
"^DD",798.1,798.1,13.3,3)
Answer must be a valid e-mail address (3-50 characters in length).
"^DD",798.1,798.1,13.3,8.5)
@
"^DD",798.1,798.1,13.3,9)
@
"^DD",798.1,798.1,13.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,13.3,20,1,0)
DEFINITION
"^DD",798.1,798.1,13.3,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,13.3,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,13.3,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,13.3,21,3,0)
 
"^DD",798.1,798.1,13.3,21,4,0)
The NATIONAL NOTIFICATION E-MAIL field holds an 
"^DD",798.1,798.1,13.3,21,5,0)
e-mail address where notifications about registry
"^DD",798.1,798.1,13.3,21,6,0)
problems (mostly, data transmission problems) are
"^DD",798.1,798.1,13.3,21,7,0)
sent to.
"^DD",798.1,798.1,13.3,21,8,0)
 
"^DD",798.1,798.1,13.3,21,9,0)
If the field is empty, e-mail notifications will
"^DD",798.1,798.1,13.3,21,10,0)
not be sent.
"^DD",798.1,798.1,13.3,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,13.3,"DT")
3030429
"^DD",798.1,798.1,14,0)
NOTIFICATION^798.114P^^10;0
"^DD",798.1,798.1,14,21,0)
^.001^3^3^3050525^^^
"^DD",798.1,798.1,14,21,1,0)
This multiple contains a list of VistA users that
"^DD",798.1,798.1,14,21,2,0)
should be notified about problems with the local
"^DD",798.1,798.1,14,21,3,0)
registry.
"^DD",798.1,798.1,14,"DT")
3050427
"^DD",798.1,798.1,15.1,0)
LAG DAYS^NJ1,0^^11;1^K:+X'=X!(X>7)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,15.1,3)
Enter number of days between 1 and 7.
"^DD",798.1,798.1,15.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,15.1,20,1,0)
PARAMETERS
"^DD",798.1,798.1,15.1,21,0)
^.001^12^12^3120501^^^^
"^DD",798.1,798.1,15.1,21,1,0)
Number of days that defines an overlap of the data
"^DD",798.1,798.1,15.1,21,2,0)
searches during the registry updates and a data
"^DD",798.1,798.1,15.1,21,3,0)
extraction delay during the regular data
"^DD",798.1,798.1,15.1,21,4,0)
extractions.
"^DD",798.1,798.1,15.1,21,5,0)
 
"^DD",798.1,798.1,15.1,21,6,0)
If this field is empty, the default value of 1 is 
"^DD",798.1,798.1,15.1,21,7,0)
used by the registry update and data extraction
"^DD",798.1,798.1,15.1,21,8,0)
processes.
"^DD",798.1,798.1,15.1,21,9,0)
 
"^DD",798.1,798.1,15.1,21,10,0)
See the package documentation or Technical
"^DD",798.1,798.1,15.1,21,11,0)
Description of the field in the data dictionary
"^DD",798.1,798.1,15.1,21,12,0)
for more information.
"^DD",798.1,798.1,15.1,23,0)
^^37^37^3120501^
"^DD",798.1,798.1,15.1,23,1,0)
Clinical data may be entered into the VistA system 
"^DD",798.1,798.1,15.1,23,2,0)
later than they are available. For example, an
"^DD",798.1,798.1,15.1,23,3,0)
encounter that occurred today may not get entered into
"^DD",798.1,798.1,15.1,23,4,0)
the system until tomorrow.
"^DD",798.1,798.1,15.1,23,5,0)
 
"^DD",798.1,798.1,15.1,23,6,0)
Because of this delay, data may be missed by the
"^DD",798.1,798.1,15.1,23,7,0)
registry update and data extraction processes if they
"^DD",798.1,798.1,15.1,23,8,0)
look for the data until the current date and then
"^DD",798.1,798.1,15.1,23,9,0)
continue from that point next time.
"^DD",798.1,798.1,15.1,23,10,0)
 
"^DD",798.1,798.1,15.1,23,11,0)
To avoid this problem, data search intervals are 
"^DD",798.1,798.1,15.1,23,12,0)
overlapped by the number of days indicated by this 
"^DD",798.1,798.1,15.1,23,13,0)
field. The registry update process looks for new data 
"^DD",798.1,798.1,15.1,23,14,0)
not from the end date of its previous run but from the 
"^DD",798.1,798.1,15.1,23,15,0)
date that is earlier by the number of days from this 
"^DD",798.1,798.1,15.1,23,16,0)
field. This overlap increases the chances of data
"^DD",798.1,798.1,15.1,23,17,0)
entered retrospectively to be found by the next run of
"^DD",798.1,798.1,15.1,23,18,0)
the registry update process.
"^DD",798.1,798.1,15.1,23,19,0)
 
"^DD",798.1,798.1,15.1,23,20,0)
Moreover, the regular data extraction process extracts
"^DD",798.1,798.1,15.1,23,21,0)
data not until the date when the process is run but
"^DD",798.1,798.1,15.1,23,22,0)
until the date that is earlier by the number of days
"^DD",798.1,798.1,15.1,23,23,0)
from this field. So, this is a delay that allows the
"^DD",798.1,798.1,15.1,23,24,0)
data to be entered retrospectively before the next data
"^DD",798.1,798.1,15.1,23,25,0)
extraction.
"^DD",798.1,798.1,15.1,23,26,0)
 
"^DD",798.1,798.1,15.1,23,27,0)
If the value of this field is too small, you may miss 
"^DD",798.1,798.1,15.1,23,28,0)
some data entered retrospectively. If it is too big,
"^DD",798.1,798.1,15.1,23,29,0)
the national registry will not contain up to date
"^DD",798.1,798.1,15.1,23,30,0)
information (data will be delayed by the number of days
"^DD",798.1,798.1,15.1,23,31,0)
indicated by this field) and the registry update
"^DD",798.1,798.1,15.1,23,32,0)
process will take more time to complete, because 
"^DD",798.1,798.1,15.1,23,33,0)
additional time will be spent processing the data from
"^DD",798.1,798.1,15.1,23,34,0)
the overlap interval).
"^DD",798.1,798.1,15.1,23,35,0)
 
"^DD",798.1,798.1,15.1,23,36,0)
When several registries are processed at the same time,
"^DD",798.1,798.1,15.1,23,37,0)
the maximum value of the LAG DAYS field is used.
"^DD",798.1,798.1,15.1,"DT")
3020426
"^DD",798.1,798.1,18,0)
SECURITY KEY^798.118^^18;0
"^DD",798.1,798.1,18,9)
@
"^DD",798.1,798.1,18,20,0)
^.3LA^1^1
"^DD",798.1,798.1,18,20,1,0)
DEFINITION
"^DD",798.1,798.1,18,21,0)
^.001^2^2^3050722^^^^
"^DD",798.1,798.1,18,21,1,0)
This multiple stores a list of security keys 
"^DD",798.1,798.1,18,21,2,0)
associated with the registry.
"^DD",798.1,798.1,19.1,0)
NUMBER OF PATIENTS^NJ9,0^^19;1^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.1,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.1,8.5)
@
"^DD",798.1,798.1,19.1,9)
@
"^DD",798.1,798.1,19.1,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.1,20,1,0)
STATE
"^DD",798.1,798.1,19.1,21,0)
^.001^3^3^3060106^^^
"^DD",798.1,798.1,19.1,21,1,0)
The NUMBER OF PATIENTS field contains total number
"^DD",798.1,798.1,19.1,21,2,0)
of confirmed patients in the registry right after
"^DD",798.1,798.1,19.1,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.1,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.1,23,1,0)
This field should not be edited. It is updated
"^DD",798.1,798.1,19.1,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.1,23,3,0)
the registry update.
"^DD",798.1,798.1,19.1,"DT")
3031027
"^DD",798.1,798.1,19.2,0)
NUMBER OF PENDING PATIENTS^NJ9,0^^19;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.2,3)
Type a Number between 0 and 999999999, 0 Decimal Digits
"^DD",798.1,798.1,19.2,8.5)
@
"^DD",798.1,798.1,19.2,9)
@
"^DD",798.1,798.1,19.2,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.2,20,1,0)
STATE
"^DD",798.1,798.1,19.2,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,19.2,21,1,0)
The NUMBER OF PENDING PATIENTS field stores number
"^DD",798.1,798.1,19.2,21,2,0)
of pending patients in the registry right after
"^DD",798.1,798.1,19.2,21,3,0)
the last registry update.
"^DD",798.1,798.1,19.2,23,0)
^.001^3^3^3060203^^
"^DD",798.1,798.1,19.2,23,1,0)
This field should not be edited. It is updated 
"^DD",798.1,798.1,19.2,23,2,0)
automatically by the $$UPDDEM^RORUPD51 function during
"^DD",798.1,798.1,19.2,23,3,0)
the registry update.
"^DD",798.1,798.1,19.2,"DT")
3050627
"^DD",798.1,798.1,19.3,0)
HL7 ATTEMPT COUNTER^NJ3,0^^19;3^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.1,19.3,3)
Type a Number between 0 and 999, 0 Decimal Digits
"^DD",798.1,798.1,19.3,8.5)
@
"^DD",798.1,798.1,19.3,9)
@
"^DD",798.1,798.1,19.3,20,0)
^.3LA^1^1
"^DD",798.1,798.1,19.3,20,1,0)
HL7
"^DD",798.1,798.1,19.3,21,0)
^^10^10^3060203^
"^DD",798.1,798.1,19.3,21,1,0)
The HL7 ATTEMPT COUNTER field is incremented each
"^DD",798.1,798.1,19.3,21,2,0)
time the nightly task (the Registry Update & Data 
"^DD",798.1,798.1,19.3,21,3,0)
Extraction [ROR TASK] option) encounters at least
"^DD",798.1,798.1,19.3,21,4,0)
one unsent HL7 message.
"^DD",798.1,798.1,19.3,21,5,0)
 
"^DD",798.1,798.1,19.3,21,6,0)
The nightly task assigns 1 to the field when new
"^DD",798.1,798.1,19.3,21,7,0)
HL7 messages are generated (only if all previous
"^DD",798.1,798.1,19.3,21,8,0)
messages have been successfully transmitted).
"^DD",798.1,798.1,19.3,21,9,0)
 
"^DD",798.1,798.1,19.3,21,10,0)
Usually, you should not edit this field.
"^DD",798.1,798.1,19.3,23,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,19.3,23,1,0)
See description of the ALERT FREQUENCY field (13.2) and
"^DD",798.1,798.1,19.3,23,2,0)
source code of the $$CHECKMSG^ROR10 function for more
"^DD",798.1,798.1,19.3,23,3,0)
details.
"^DD",798.1,798.1,19.3,"DT")
3050701
"^DD",798.1,798.1,21.01,0)
AUTOMATIC BACKPULL^*P799.6'^RORDATA(799.6,^21;1^S DIC("S")="I $P($G(^(0)),U,2)=1" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.1,21.01,8.5)
@
"^DD",798.1,798.1,21.01,9)
@
"^DD",798.1,798.1,21.01,12)
Only "Auto" definitions can be selected.
"^DD",798.1,798.1,21.01,12.1)
S DIC("S")="I $P($G(^(0)),U,2)=1"
"^DD",798.1,798.1,21.01,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.01,20,1,0)
STATE
"^DD",798.1,798.1,21.01,21,0)
^^3^3^3051110^
"^DD",798.1,798.1,21.01,21,1,0)
This field stores the pointer to the historical 
"^DD",798.1,798.1,21.01,21,2,0)
data extraction definition that was used during
"^DD",798.1,798.1,21.01,21,3,0)
the previous run of the nightly task.
"^DD",798.1,798.1,21.01,"DT")
3051110
"^DD",798.1,798.1,21.04,0)
LOCAL DATA RESENT^D^^21;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.04,8.5)
@
"^DD",798.1,798.1,21.04,9)
@
"^DD",798.1,798.1,21.04,20,0)
^.3LA^1^1
"^DD",798.1,798.1,21.04,20,1,0)
STATE
"^DD",798.1,798.1,21.04,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.1,21.04,21,1,0)
This field holds the date when all local registry 
"^DD",798.1,798.1,21.04,21,2,0)
data was resent to AAC after the installation (to 
"^DD",798.1,798.1,21.04,21,3,0)
fix the data incorrectly overwritten with the 
"^DD",798.1,798.1,21.04,21,4,0)
historical data).
"^DD",798.1,798.1,21.04,21,5,0)
 
"^DD",798.1,798.1,21.04,21,6,0)
Usually, you should not modify this field. If you
"^DD",798.1,798.1,21.04,21,7,0)
need to resend all local registry and demographic
"^DD",798.1,798.1,21.04,21,8,0)
data to AAC, you should clear this field. The data
"^DD",798.1,798.1,21.04,21,9,0)
will be resent automatically during the next
"^DD",798.1,798.1,21.04,21,10,0)
nightly transmission.
"^DD",798.1,798.1,21.04,23,0)
^.001^4^4^3060203^^^^
"^DD",798.1,798.1,21.04,23,1,0)
The value of this field is analyzed and modified by the
"^DD",798.1,798.1,21.04,23,2,0)
$$REMARK^RORUTL05 function. The function is called by
"^DD",798.1,798.1,21.04,23,3,0)
the nightly registry update and data transmission task
"^DD",798.1,798.1,21.04,23,4,0)
(TASK^ROR).
"^DD",798.1,798.1,21.04,"DT")
3020508
"^DD",798.1,798.1,21.05,0)
HDT DATE/TIME^D^^21;4^S %DT="ETX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.1,21.05,8.5)
@
"^DD",798.1,798.1,21.05,9)
@
"^DD",798.1,798.1,21.05,21,0)
^.001^4^4^3060123^^
"^DD",798.1,798.1,21.05,21,1,0)
This field is initialized with the current 
"^DD",798.1,798.1,21.05,21,2,0)
date/time by the registry setup task upon
"^DD",798.1,798.1,21.05,21,3,0)
successful completion of the initial registry
"^DD",798.1,798.1,21.05,21,4,0)
population.
"^DD",798.1,798.1,21.05,23,0)
^^4^4^3060123^
"^DD",798.1,798.1,21.05,23,1,0)
The field is populated by the $$UPDHDTRP^RORSETU2 
"^DD",798.1,798.1,21.05,23,2,0)
function during the registry setup.
"^DD",798.1,798.1,21.05,23,3,0)
 
"^DD",798.1,798.1,21.05,23,4,0)
Do not delete value of this field!
"^DD",798.1,798.1,21.05,"DT")
3031027
"^DD",798.1,798.1,22,0)
LAST BATCH CONTROL ID^798.122^^22;0
"^DD",798.1,798.1,22,9)
@
"^DD",798.1,798.1,22,20,0)
^.3LA^1^1
"^DD",798.1,798.1,22,20,1,0)
HL7
"^DD",798.1,798.1,22,21,0)
^.001^3^3^3060203^^^^
"^DD",798.1,798.1,22,21,1,0)
This multiple contains a list of identifiers of
"^DD",798.1,798.1,22,21,2,0)
the HL7 batch messages generated during the
"^DD",798.1,798.1,22,21,3,0)
previous run of the nightly task.
"^DD",798.1,798.1,22,23,0)
^^3^3^3060203^
"^DD",798.1,798.1,22,23,1,0)
The nightly task checks status of each message from 
"^DD",798.1,798.1,22,23,2,0)
this multiple before the registry update and data
"^DD",798.1,798.1,22,23,3,0)
extraction.
"^DD",798.1,798.1,22,"DT")
3050504
"^DD",798.1,798.1,25,0)
ENABLE PROTOCOLS^S^0:NO;1:YES;^0;14^Q
"^DD",798.1,798.1,25,1,0)
^.1
"^DD",798.1,798.1,25,1,1,0)
798.1^AEP^MUMPS
"^DD",798.1,798.1,25,1,1,1)
S:X ^ROR(798.1,"AEP",DA)=""
"^DD",798.1,798.1,25,1,1,2)
K ^ROR(798.1,"AEP",DA)
"^DD",798.1,798.1,25,1,1,3)
Do not delete!
"^DD",798.1,798.1,25,1,1,"%D",0)
^^10^10^3060203^
"^DD",798.1,798.1,25,1,1,"%D",1,0)
This cross-reference controls the package event 
"^DD",798.1,798.1,25,1,1,"%D",2,0)
protocols.
"^DD",798.1,798.1,25,1,1,"%D",3,0)
 
"^DD",798.1,798.1,25,1,1,"%D",4,0)
If at least one registry has the ENABLE PROTOCOLS
"^DD",798.1,798.1,25,1,1,"%D",5,0)
field set to "YES", the ^ROR(798.1,"AEP") node
"^DD",798.1,798.1,25,1,1,"%D",6,0)
will be defined and the protocols will call the
"^DD",798.1,798.1,25,1,1,"%D",7,0)
processing routines.
"^DD",798.1,798.1,25,1,1,"%D",8,0)
 
"^DD",798.1,798.1,25,1,1,"%D",9,0)
Otherwise, they will run idle unless they are 
"^DD",798.1,798.1,25,1,1,"%D",10,0)
disabled or unsubscribed manually.
"^DD",798.1,798.1,25,1,1,"DT")
3020418
"^DD",798.1,798.1,25,20,0)
^.3LA^1^1
"^DD",798.1,798.1,25,20,1,0)
PARAMETERS
"^DD",798.1,798.1,25,21,0)
^^13^13^3060203^
"^DD",798.1,798.1,25,21,1,0)
If this field is set to "YES", event protocols
"^DD",798.1,798.1,25,21,2,0)
will be used by the package to speed up the 
"^DD",798.1,798.1,25,21,3,0)
registry processing.
"^DD",798.1,798.1,25,21,4,0)
 
"^DD",798.1,798.1,25,21,5,0)
The protocols create references to patient events
"^DD",798.1,798.1,25,21,6,0)
in the ROR PATIENT EVENTS file. Only those 
"^DD",798.1,798.1,25,21,7,0)
patients that have new references will be 
"^DD",798.1,798.1,25,21,8,0)
processed by the next registry update.
"^DD",798.1,798.1,25,21,9,0)
 
"^DD",798.1,798.1,25,21,10,0)
If several registries are updated at the same 
"^DD",798.1,798.1,25,21,11,0)
time and at least one of them has this field set 
"^DD",798.1,798.1,25,21,12,0)
to "YES", all these registries will be processed 
"^DD",798.1,798.1,25,21,13,0)
using event references.
"^DD",798.1,798.1,25,23,0)
^.001^11^11^3060203^^
"^DD",798.1,798.1,25,23,1,0)
This field controls both the registry update engine 
"^DD",798.1,798.1,25,23,2,0)
and the event protocols.
"^DD",798.1,798.1,25,23,3,0)
 
"^DD",798.1,798.1,25,23,4,0)
If at least one of the defined registries enables the
"^DD",798.1,798.1,25,23,5,0)
protocols, they will process the events and create
"^DD",798.1,798.1,25,23,6,0)
references in the ROR PATIENT EVENTS file (#798.3).
"^DD",798.1,798.1,25,23,7,0)
 
"^DD",798.1,798.1,25,23,8,0)
Otherwise, the protocols will be executed (if they are
"^DD",798.1,798.1,25,23,9,0)
not disabled or unsubscribed manually) but will not
"^DD",798.1,798.1,25,23,10,0)
call processing routines and will not create references
"^DD",798.1,798.1,25,23,11,0)
in file #798.3.
"^DD",798.1,798.1,25,"DT")
3020418
"^DD",798.1,798.1,26,0)
EXCLUDE EMPLOYEES^SX^0:NO;1:YES;^0;10^Q:$$VAEDT^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,8.5)
@
"^DD",798.1,798.1,26,9)
@
"^DD",798.1,798.1,26,20,0)
^.3LA^1^1
"^DD",798.1,798.1,26,20,1,0)
DEFINITION
"^DD",798.1,798.1,26,21,0)
^^6^6^3060203^
"^DD",798.1,798.1,26,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.1,26,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,26,21,3,0)
 
"^DD",798.1,798.1,26,21,4,0)
If this field is set to "YES", patients who are
"^DD",798.1,798.1,26,21,5,0)
employees will not be processed by the registry
"^DD",798.1,798.1,26,21,6,0)
update or data extraction functions.
"^DD",798.1,798.1,26,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,26,"DT")
3020802
"^DD",798.1,798.1,27,0)
AVAILABLE REPORTS^FX^^27;E1,250^Q:$$VAEDT^RORDD(798.1,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",798.1,798.1,27,3)
Answer must be 1-250 characters in length.
"^DD",798.1,798.1,27,8.5)
@
"^DD",798.1,798.1,27,9)
@
"^DD",798.1,798.1,27,20,0)
^.3LA^1^1
"^DD",798.1,798.1,27,20,1,0)
DEFINITION
"^DD",798.1,798.1,27,21,0)
^^7^7^3060203^
"^DD",798.1,798.1,27,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.1,798.1,27,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.1,27,21,3,0)
 
"^DD",798.1,798.1,27,21,4,0)
The AVAILABLE REPORTS field stores a list of 
"^DD",798.1,798.1,27,21,5,0)
report codes (not the IENs!) separated by commas.
"^DD",798.1,798.1,27,21,6,0)
These reports will be available for this registry
"^DD",798.1,798.1,27,21,7,0)
in the GUI.
"^DD",798.1,798.1,27,23,0)
^.001^5^5^3060203^^^^
"^DD",798.1,798.1,27,23,1,0)
The GUI loads the value of this field using the ROR 
"^DD",798.1,798.1,27,23,2,0)
REPORTS AVAILABLE remote procedure.
"^DD",798.1,798.1,27,23,3,0)
 
"^DD",798.1,798.1,27,23,4,0)
See the data dictionary of the ROR REPORT PARAMETERS 
"^DD",798.1,798.1,27,23,5,0)
file (#799.12) for more details.
"^DD",798.1,798.1,27,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA))
"^DD",798.1,798.1,27,"DT")
3030417
"^DD",798.1,798.1,28,0)
LOCAL TEST NAME^798.128PI^^28;0
"^DD",798.1,798.1,28,20,0)
^.3LA^1^1
"^DD",798.1,798.1,28,20,1,0)
PARAMETERS
"^DD",798.1,798.1,28,21,0)
^.001^3^3^3060106^^
"^DD",798.1,798.1,28,21,1,0)
This multiple maps local lab tests to the 
"^DD",798.1,798.1,28,21,2,0)
predefined lab test groups that are used in the 
"^DD",798.1,798.1,28,21,3,0)
reports.
"^DD",798.1,798.1,28,"DT")
3030402
"^DD",798.1,798.1,29,0)
LOCAL DRUG NAME^798.129P^^29;0
"^DD",798.1,798.1,29,20,0)
^.3LA^1^1
"^DD",798.1,798.1,29,20,1,0)
PARAMETERS
"^DD",798.1,798.1,29,21,0)
^^3^3^3060106^
"^DD",798.1,798.1,29,21,1,0)
This multiple maps local medication names to the
"^DD",798.1,798.1,29,21,2,0)
predefined medication groups that are used in the
"^DD",798.1,798.1,29,21,3,0)
reports.
"^DD",798.1,798.1,30,0)
REPORT STATS^798.12P^^30;0
"^DD",798.1,798.1,30,9)
@
"^DD",798.1,798.1,30,20,0)
^.3LA^1^1
"^DD",798.1,798.1,30,20,1,0)
STATE
"^DD",798.1,798.1,30,21,0)
^.001^4^4^3120228^^^
"^DD",798.1,798.1,30,21,1,0)
Records of this multiple store the statistic data 
"^DD",798.1,798.1,30,21,2,0)
related to running reports. Usually, the stats are
"^DD",798.1,798.1,30,21,3,0)
reset after successful data transmission to the
"^DD",798.1,798.1,30,21,4,0)
AAC.
"^DD",798.1,798.1,30,23,0)
^.001^7^7^3120228^^
"^DD",798.1,798.1,30,23,1,0)
Please do not edit the records of this multiple
"^DD",798.1,798.1,30,23,2,0)
directly. Use the entry points of the RORTSK12 routine
"^DD",798.1,798.1,30,23,3,0)
instead.
"^DD",798.1,798.1,30,23,4,0)
 
"^DD",798.1,798.1,30,23,5,0)
The input transform associated with the .01 field of 
"^DD",798.1,798.1,30,23,6,0)
this multiple guarantees that each report has only one
"^DD",798.1,798.1,30,23,7,0)
corresponding record in the multiple.
"^DD",798.1,798.1,31,0)
AUTO-CONFIRM^S^0:NO;1:YES;^6;1^Q
"^DD",798.1,798.1,31,1,0)
^.1
"^DD",798.1,798.1,31,1,1,0)
798.1^C
"^DD",798.1,798.1,31,1,1,1)
S ^ROR(798.1,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.1,31,1,1,2)
K ^ROR(798.1,"C",$E(X,1,30),DA)
"^DD",798.1,798.1,31,1,1,"DT")
3120301
"^DD",798.1,798.1,31,3)
Enter 'Yes' if the status of patients added to this registry should be automatically confirmed.
"^DD",798.1,798.1,31,21,0)
^^4^4^3120503^
"^DD",798.1,798.1,31,21,1,0)
This field is used during the registry update to set the status of new 
"^DD",798.1,798.1,31,21,2,0)
patients.  If the registry is set to auto-confirm, the patient status is
"^DD",798.1,798.1,31,21,3,0)
set to 'Confirmed'.  If auto-confirm is no, the patient status is set to
"^DD",798.1,798.1,31,21,4,0)
'Pending'.
"^DD",798.1,798.1,31,"DT")
3120301
"^DD",798.1,798.11,0)
LOG EVENT SUB-FIELD^^.01^1
"^DD",798.1,798.11,0,"DT")
3010712
"^DD",798.1,798.11,0,"NM","LOG EVENT")
 
"^DD",798.1,798.11,0,"UP")
798.1
"^DD",798.1,798.11,.01,0)
LOG EVENT^MSX^1:Debug;2:Information;3:Data Quality;4:Warning;5:Database Error;6:Error;^0;1^Q
"^DD",798.1,798.11,.01,1,0)
^.1^^0
"^DD",798.1,798.11,.01,21,0)
^.001^10^10^3060203^^
"^DD",798.1,798.11,.01,21,1,0)
Select the type of the event if you want to enable
"^DD",798.1,798.11,.01,21,2,0)
recording of these events. If the list is empty,
"^DD",798.1,798.11,.01,21,3,0)
recording of all events is enabled. Otherwise,
"^DD",798.1,798.11,.01,21,4,0)
only events from the list and error messages will 
"^DD",798.1,798.11,.01,21,5,0)
be recorded.
"^DD",798.1,798.11,.01,21,6,0)
 
"^DD",798.1,798.11,.01,21,7,0)
Debug messages are exclusions from this rule (they
"^DD",798.1,798.11,.01,21,8,0)
are not logged if the ENABLE LOG field is set to
"^DD",798.1,798.11,.01,21,9,0)
"YES" and this multiple is empty). Their recording
"^DD",798.1,798.11,.01,21,10,0)
can only be enabled explicitly.
"^DD",798.1,798.11,.01,23,0)
^.001^9^9^3060203^^^^
"^DD",798.1,798.11,.01,23,1,0)
If several registries are processed at the same time,
"^DD",798.1,798.11,.01,23,2,0)
the recording parameters are combined.
"^DD",798.1,798.11,.01,23,3,0)
 
"^DD",798.1,798.11,.01,23,4,0)
If one of the registries requests recording of all 
"^DD",798.1,798.11,.01,23,5,0)
events, all events except the debug messages (type 1)
"^DD",798.1,798.11,.01,23,6,0)
will be recorded for all registries.
"^DD",798.1,798.11,.01,23,7,0)
 
"^DD",798.1,798.11,.01,23,8,0)
Otherwise, merged content of the LOG EVENT multiples
"^DD",798.1,798.11,.01,23,9,0)
will determine the events to be recorded.
"^DD",798.1,798.11,.01,"DT")
3050722
"^DD",798.1,798.112,0)
EXTRACTED RESULT SUB-FIELD^^.03^3
"^DD",798.1,798.112,0,"DT")
3030318
"^DD",798.1,798.112,0,"ID","WRITE")
D EN^DDIOL($P(^(0),U,2),"","?20")
"^DD",798.1,798.112,0,"IX","B",798.112,.01)

"^DD",798.1,798.112,0,"IX","C",798.112,.02)

"^DD",798.1,798.112,0,"NM","EXTRACTED RESULT")
 
"^DD",798.1,798.112,0,"UP")
798.1
"^DD",798.1,798.112,.01,0)
LOINC CODE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:X'?1(1.7N,1"*") X
"^DD",798.1,798.112,.01,1,0)
^.1
"^DD",798.1,798.112,.01,1,1,0)
798.112^B
"^DD",798.1,798.112,.01,1,1,1)
S ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.01,1,1,2)
K ^ROR(798.1,DA(1),8,"B",$E(X,1,30),DA)
"^DD",798.1,798.112,.01,1,1,3)
Do not delete!
"^DD",798.1,798.112,.01,1,1,"DT")
3010716
"^DD",798.1,798.112,.01,3)
Answer must be 1-7 characters in length.
"^DD",798.1,798.112,.01,8.5)
@
"^DD",798.1,798.112,.01,9)
@
"^DD",798.1,798.112,.01,21,0)
^^11^11^3011015^
"^DD",798.1,798.112,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.01,21,3,0)
 
"^DD",798.1,798.112,.01,21,4,0)
Enter the unique numeric LOINC code (without the
"^DD",798.1,798.112,.01,21,5,0)
check digit) of the Lab result to be extracted. If
"^DD",798.1,798.112,.01,21,6,0)
you want to use only NLT code, enter zero as the
"^DD",798.1,798.112,.01,21,7,0)
value of this field.
"^DD",798.1,798.112,.01,21,8,0)
 
"^DD",798.1,798.112,.01,21,9,0)
If you want to extract all results, create a
"^DD",798.1,798.112,.01,21,10,0)
record in this multiple containing the "*" 
"^DD",798.1,798.112,.01,21,11,0)
character in this field.
"^DD",798.1,798.112,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.01,"DT")
3010716
"^DD",798.1,798.112,.02,0)
NLT CODE^FX^^0;2^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:'(X?5N1"."4.5N) X
"^DD",798.1,798.112,.02,1,0)
^.1
"^DD",798.1,798.112,.02,1,1,0)
798.112^C
"^DD",798.1,798.112,.02,1,1,1)
S ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)=""
"^DD",798.1,798.112,.02,1,1,2)
K ^ROR(798.1,DA(1),8,"C",$E(X,1,30),DA)
"^DD",798.1,798.112,.02,1,1,3)
Do not delete!
"^DD",798.1,798.112,.02,1,1,"DT")
3010716
"^DD",798.1,798.112,.02,3)
Answer must be 10-11 characters in length.
"^DD",798.1,798.112,.02,8.5)
@
"^DD",798.1,798.112,.02,9)
@
"^DD",798.1,798.112,.02,21,0)
^^8^8^3011015^
"^DD",798.1,798.112,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.02,21,3,0)
 
"^DD",798.1,798.112,.02,21,4,0)
Enter the unique NLT code of the Lab result to be
"^DD",798.1,798.112,.02,21,5,0)
extracted. Both LOINC and NLT codes (if available)
"^DD",798.1,798.112,.02,21,6,0)
are used for searching the Lab results. If you 
"^DD",798.1,798.112,.02,21,7,0)
want to use only the LOINC code, leave this field 
"^DD",798.1,798.112,.02,21,8,0)
empty.
"^DD",798.1,798.112,.02,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.112,.02,"DT")
3010716
"^DD",798.1,798.112,.03,0)
SUBSCRIPTS^FX^^0;3^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>30!($L(X)<2) X
"^DD",798.1,798.112,.03,3)
Answer must be 2-30 characters in length.
"^DD",798.1,798.112,.03,8.5)
@
"^DD",798.1,798.112,.03,9)
@
"^DD",798.1,798.112,.03,21,0)
^^14^14^3030318^
"^DD",798.1,798.112,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.112,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.112,.03,21,3,0)
 
"^DD",798.1,798.112,.03,21,4,0)
Enter a list of the subscripts separated by commas
"^DD",798.1,798.112,.03,21,5,0)
(CH, MI, etc.) from where the results should be
"^DD",798.1,798.112,.03,21,6,0)
loaded by the $$GCPR^LA7QRY function. Only these
"^DD",798.1,798.112,.03,21,7,0)
subscripts will be searched for new data.
"^DD",798.1,798.112,.03,21,8,0)
 
"^DD",798.1,798.112,.03,21,9,0)
NOTE: The value of the field affects the data
"^DD",798.1,798.112,.03,21,10,0)
extraction only if the LOINC CODE field is equal
"^DD",798.1,798.112,.03,21,11,0)
to "*".
"^DD",798.1,798.112,.03,21,12,0)
 
"^DD",798.1,798.112,.03,21,13,0)
If this field is empty (by default), the API 
"^DD",798.1,798.112,.03,21,14,0)
searches through all supported subscripts.
"^DD",798.1,798.112,.03,"DT")
3030318
"^DD",798.1,798.114,0)
NOTIFICATION SUB-FIELD^^.01^1
"^DD",798.1,798.114,0,"DT")
3010907
"^DD",798.1,798.114,0,"IX","B",798.114,.01)

"^DD",798.1,798.114,0,"NM","NOTIFICATION")
 
"^DD",798.1,798.114,0,"UP")
798.1
"^DD",798.1,798.114,.01,0)
NOTIFICATION^MP200'X^VA(200,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.114,.01,1,0)
^.1
"^DD",798.1,798.114,.01,1,1,0)
798.114^B
"^DD",798.1,798.114,.01,1,1,1)
S ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.114,.01,1,1,2)
K ^ROR(798.1,DA(1),10,"B",$E(X,1,30),DA)
"^DD",798.1,798.114,.01,1,1,3)
Do not delete!
"^DD",798.1,798.114,.01,21,0)
^^4^4^3060203^
"^DD",798.1,798.114,.01,21,1,0)
Select a user who already receives alerts or add a
"^DD",798.1,798.114,.01,21,2,0)
new one from the NEW PERSON file. VistA users
"^DD",798.1,798.114,.01,21,3,0)
referenced by this field will be notified about
"^DD",798.1,798.114,.01,21,4,0)
problems with the registry processes.
"^DD",798.1,798.114,.01,"DT")
3050427
"^DD",798.1,798.118,0)
SECURITY KEY SUB-FIELD^^.01^1
"^DD",798.1,798.118,0,"DT")
3020801
"^DD",798.1,798.118,0,"NM","SECURITY KEY")
 
"^DD",798.1,798.118,0,"UP")
798.1
"^DD",798.1,798.118,.01,0)
SECURITY KEY^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>27!($L(X)<3) X
"^DD",798.1,798.118,.01,1,0)
^.1^^-1
"^DD",798.1,798.118,.01,1,2,0)
798.1^ACL^MUMPS
"^DD",798.1,798.118,.01,1,2,1)
D ACLSET^RORDD
"^DD",798.1,798.118,.01,1,2,2)
D ACLKILL^RORDD
"^DD",798.1,798.118,.01,1,2,3)
Do not delete!
"^DD",798.1,798.118,.01,1,2,"%D",0)
^^25^25^3060203^
"^DD",798.1,798.118,.01,1,2,"%D",1,0)
This cross-reference is used by the screening 
"^DD",798.1,798.118,.01,1,2,"%D",2,0)
logic (the "SCR" node) of some Clinical Case 
"^DD",798.1,798.118,.01,1,2,"%D",3,0)
Registries files to check whether a user is
"^DD",798.1,798.118,.01,1,2,"%D",4,0)
allowed to access the records or not.
"^DD",798.1,798.118,.01,1,2,"%D",5,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",6,0)
The cross-reference contains two kinds of items:
"^DD",798.1,798.118,.01,1,2,"%D",7,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",8,0)
  ^ROR(798.1,"ACL",RORDUZ,RegIEN,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",9,0)
  ^ROR(798.1,"ACL",RORDUZ,RegName,KEY,IEN) = ""
"^DD",798.1,798.118,.01,1,2,"%D",10,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",11,0)
where RORDUZ is the value of the DUZ variable for
"^DD",798.1,798.118,.01,1,2,"%D",12,0)
the user who has access to one or more registries
"^DD",798.1,798.118,.01,1,2,"%D",13,0)
(according to the allocated security keys). RegIEN
"^DD",798.1,798.118,.01,1,2,"%D",14,0)
and RegName are the registry IEN and name. KEY is
"^DD",798.1,798.118,.01,1,2,"%D",15,0)
the name of security key and IEN is the internal
"^DD",798.1,798.118,.01,1,2,"%D",16,0)
entry number of the corresponding record of the
"^DD",798.1,798.118,.01,1,2,"%D",17,0)
SECURITY KEY multiple.
"^DD",798.1,798.118,.01,1,2,"%D",18,0)
 
"^DD",798.1,798.118,.01,1,2,"%D",19,0)
The cross-reference should be rebuilt after
"^DD",798.1,798.118,.01,1,2,"%D",20,0)
changes in the allocation of the security keys
"^DD",798.1,798.118,.01,1,2,"%D",21,0)
associated with any registry. Usually, this is
"^DD",798.1,798.118,.01,1,2,"%D",22,0)
done by the nightly task (the [ROR TASK] option).
"^DD",798.1,798.118,.01,1,2,"%D",23,0)
However, if you want the changes to be in effect
"^DD",798.1,798.118,.01,1,2,"%D",24,0)
immediately, you should rebuild this
"^DD",798.1,798.118,.01,1,2,"%D",25,0)
cross-reference manually.
"^DD",798.1,798.118,.01,1,2,"DT")
3020805
"^DD",798.1,798.118,.01,3)
Enter a name of security key (3-27 characters in length).
"^DD",798.1,798.118,.01,8.5)
@
"^DD",798.1,798.118,.01,9)
@
"^DD",798.1,798.118,.01,20,0)
^.3LA^^0
"^DD",798.1,798.118,.01,21,0)
^.001^5^5^3020816^^^
"^DD",798.1,798.118,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.118,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.118,.01,21,3,0)
 
"^DD",798.1,798.118,.01,21,4,0)
The SECURITY KEY field contains the name of the 
"^DD",798.1,798.118,.01,21,5,0)
security key associated with the registry.
"^DD",798.1,798.118,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.118,.01,"DT")
3050722
"^DD",798.1,798.12,0)
REPORT STATS SUB-FIELD^^.02^2
"^DD",798.1,798.12,0,"DT")
3050715
"^DD",798.1,798.12,0,"IX","B",798.12,.01)

"^DD",798.1,798.12,0,"NM","REPORT STATS")
 
"^DD",798.1,798.12,0,"UP")
798.1
"^DD",798.1,798.12,.01,0)
REPORT STATS^MP799.34'X^ROR(799.34,^0;1^S:$D(X) DINUM=X
"^DD",798.1,798.12,.01,1,0)
^.1
"^DD",798.1,798.12,.01,1,1,0)
798.12^B
"^DD",798.1,798.12,.01,1,1,1)
S ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.12,.01,1,1,2)
K ^ROR(798.1,DA(1),30,"B",$E(X,1,30),DA)
"^DD",798.1,798.12,.01,1,1,3)
Do not delete!
"^DD",798.1,798.12,.01,1,1,"DT")
3050722
"^DD",798.1,798.12,.01,3)
 
"^DD",798.1,798.12,.01,8.5)
@
"^DD",798.1,798.12,.01,9)
@
"^DD",798.1,798.12,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.01,20,1,0)
STATE
"^DD",798.1,798.12,.01,21,0)
^.001^2^2^3120228^^
"^DD",798.1,798.12,.01,21,1,0)
A pointer stored in this field links the stats to 
"^DD",798.1,798.12,.01,21,2,0)
the report definition.
"^DD",798.1,798.12,.01,"DT")
3050722
"^DD",798.1,798.12,.02,0)
NUMBER OF RUNS^NJ9,0^^0;2^K:+X'=X!(X>999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",798.1,798.12,.02,3)
Type a Number between 0 and 999999999, 0 Decimal Digits.
"^DD",798.1,798.12,.02,8.5)
@
"^DD",798.1,798.12,.02,9)
@
"^DD",798.1,798.12,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.12,.02,20,1,0)
STATE
"^DD",798.1,798.12,.02,21,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,21,1,0)
This field serves as a counter of report runs 
"^DD",798.1,798.12,.02,21,2,0)
since the last successful data transmission.
"^DD",798.1,798.12,.02,23,0)
^.001^2^2^3060203^^
"^DD",798.1,798.12,.02,23,1,0)
Please do not edit the field directly. Use the entry
"^DD",798.1,798.12,.02,23,2,0)
points of the RORTSK12 routine instead.
"^DD",798.1,798.12,.02,"DT")
3050715
"^DD",798.1,798.122,0)
LAST BATCH CONTROL ID SUB-FIELD^^.03^3
"^DD",798.1,798.122,0,"DT")
3051129
"^DD",798.1,798.122,0,"NM","LAST BATCH CONTROL ID")
 
"^DD",798.1,798.122,0,"UP")
798.1
"^DD",798.1,798.122,.01,0)
LAST BATCH CONTROL ID^MFX^^0;1^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.01,1,0)
^.1^^0
"^DD",798.1,798.122,.01,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.01,8.5)
@
"^DD",798.1,798.122,.01,9)
@
"^DD",798.1,798.122,.01,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.01,20,1,0)
HL7
"^DD",798.1,798.122,.01,21,0)
^.001^3^3^3050503^^^
"^DD",798.1,798.122,.01,21,1,0)
The LAST BATCH CONTROL ID field contains the
"^DD",798.1,798.122,.01,21,2,0)
message control ID (BHS-11) of the latest batch
"^DD",798.1,798.122,.01,21,3,0)
HL7 message submitted to the VistA HL7 engine.
"^DD",798.1,798.122,.01,23,0)
^^3^3^3060203^
"^DD",798.1,798.122,.01,23,1,0)
This field is populated with the value returned by the 
"^DD",798.1,798.122,.01,23,2,0)
GENERATE^HLMA procedure. This value is usually
"^DD",798.1,798.122,.01,23,3,0)
different from that of the INTERNAL BATCH ID field.
"^DD",798.1,798.122,.01,"DT")
3051129
"^DD",798.1,798.122,.02,0)
INTERNAL BATCH ID^RF^^0;2^K:$L(X)>20!($L(X)<1) X
"^DD",798.1,798.122,.02,3)
Answer must be 1-20 characters in length.
"^DD",798.1,798.122,.02,8.5)
@
"^DD",798.1,798.122,.02,9)
@
"^DD",798.1,798.122,.02,20,0)
^.3LA^1^1
"^DD",798.1,798.122,.02,20,1,0)
HL7
"^DD",798.1,798.122,.02,21,0)
^^8^8^3060203^
"^DD",798.1,798.122,.02,21,1,0)
This field contains the internal batch identifier
"^DD",798.1,798.122,.02,21,2,0)
that was used during the generation of the batch 
"^DD",798.1,798.122,.02,21,3,0)
message.
"^DD",798.1,798.122,.02,21,4,0)
 
"^DD",798.1,798.122,.02,21,5,0)
The Control ID of each individual message included
"^DD",798.1,798.122,.02,21,6,0)
in the batch is constructed from the value of this
"^DD",798.1,798.122,.02,21,7,0)
field and a sequential number separated by the '-'
"^DD",798.1,798.122,.02,21,8,0)
character.
"^DD",798.1,798.122,.02,23,0)
^.001^7^7^3060203^^
"^DD",798.1,798.122,.02,23,1,0)
The INTERNAL BATCH ID field is automatically populated 
"^DD",798.1,798.122,.02,23,2,0)
with the identifier of the batch placeholder created by
"^DD",798.1,798.122,.02,23,3,0)
the CREATE^HLTF procedure. See the $$CREATE^RORHL7 and
"^DD",798.1,798.122,.02,23,4,0)
$$TMSTMP^ROREXTUT functions for details.
"^DD",798.1,798.122,.02,23,5,0)
 
"^DD",798.1,798.122,.02,23,6,0)
The actual batch control ID (BHS-11) is usually
"^DD",798.1,798.122,.02,23,7,0)
different from the value stored in this field.
"^DD",798.1,798.122,.02,"DT")
3050503
"^DD",798.1,798.122,.03,0)
DATE^D^^0;3^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",798.1,798.122,.03,8.5)
@
"^DD",798.1,798.122,.03,9)
@
"^DD",798.1,798.122,.03,21,0)
^^2^2^3060106^
"^DD",798.1,798.122,.03,21,1,0)
This field stores the date/time of the batch HL7 
"^DD",798.1,798.122,.03,21,2,0)
message.
"^DD",798.1,798.122,.03,"DT")
3051129
"^DD",798.1,798.128,0)
LOCAL TEST NAME SUB-FIELD^^.02^2
"^DD",798.1,798.128,0,"DT")
3030402
"^DD",798.1,798.128,0,"ID","WRITE")
S %I=Y,Y=+$P($G(^(0)),U,2),Y=$S(Y>0:$P($G(^ROR(799.1,Y,0)),U),1:"") D EN^DDIOL("   "_Y,,"?40") S Y=%I K %I
"^DD",798.1,798.128,0,"IX","B",798.128,.01)

"^DD",798.1,798.128,0,"NM","LOCAL TEST NAME")
 
"^DD",798.1,798.128,0,"UP")
798.1
"^DD",798.1,798.128,.01,0)
LOCAL TEST NAME^MP60'^LAB(60,^0;1^Q
"^DD",798.1,798.128,.01,1,0)
^.1
"^DD",798.1,798.128,.01,1,1,0)
798.128^B
"^DD",798.1,798.128,.01,1,1,1)
S ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.128,.01,1,1,2)
K ^ROR(798.1,DA(1),28,"B",$E(X,1,30),DA)
"^DD",798.1,798.128,.01,20,0)
^.3LA^^0
"^DD",798.1,798.128,.01,"DT")
3030706
"^DD",798.1,798.128,.02,0)
LAB GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=3,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.128,.02,1,0)
^.1^^0
"^DD",798.1,798.128,.02,12)
Only Lab Groups can be selected.
"^DD",798.1,798.128,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=3"
"^DD",798.1,798.128,.02,"DT")
3030706
"^DD",798.1,798.129,0)
LOCAL DRUG NAME SUB-FIELD^^.02^2
"^DD",798.1,798.129,0,"DT")
3030625
"^DD",798.1,798.129,0,"IX","B",798.129,.01)

"^DD",798.1,798.129,0,"NM","LOCAL DRUG NAME")
 
"^DD",798.1,798.129,0,"UP")
798.1
"^DD",798.1,798.129,.01,0)
LOCAL DRUG NAME^MP50'^PSDRUG(^0;1^Q
"^DD",798.1,798.129,.01,1,0)
^.1
"^DD",798.1,798.129,.01,1,1,0)
798.129^B
"^DD",798.1,798.129,.01,1,1,1)
S ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)=""
"^DD",798.1,798.129,.01,1,1,2)
K ^ROR(798.1,DA(1),29,"B",$E(X,1,30),DA)
"^DD",798.1,798.129,.01,20,0)
^.3LA^^0
"^DD",798.1,798.129,.01,"DT")
3030706
"^DD",798.1,798.129,.02,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;2^S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4,$P(D,U,3)="_DA(1) D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.1,798.129,.02,12)
Only Drug Groups can be selected.
"^DD",798.1,798.129,.02,12.1)
S DIC("S")="I $P(^(0),U,2)=4"
"^DD",798.1,798.129,.02,20,0)
^.3LA^^0
"^DD",798.1,798.129,.02,"DT")
3030706
"^DD",798.1,798.13,0)
SELECTION RULE SUB-FIELD^^.01^1
"^DD",798.1,798.13,0,"DT")
3000410
"^DD",798.1,798.13,0,"NM","SELECTION RULE")

"^DD",798.1,798.13,0,"UP")
798.1
"^DD",798.1,798.13,.01,0)
SELECTION RULE^MFX^^0;1^Q:$$VAEDT^RORDD(798.1,$G(DA(1)))  K:$L(X)>40!($L(X)<3)!'(X?3.UNP) X I $D(X) K:'$D(^ROR(798.2,"B",$E(X,1,40))) X
"^DD",798.1,798.13,.01,1,0)
^.1^^-1
"^DD",798.1,798.13,.01,1,2,0)
798.1^ARULES
"^DD",798.1,798.13,.01,1,2,1)
S ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)=""
"^DD",798.1,798.13,.01,1,2,2)
K ^ROR(798.1,"ARULES",$E(X,1,40),DA(1),DA)
"^DD",798.1,798.13,.01,1,2,3)
Do not delete!
"^DD",798.1,798.13,.01,1,2,"%D",0)
^.101^2^2^3140228^^
"^DD",798.1,798.13,.01,1,2,"%D",1,0)
This cross-reference can be used to find all 
"^DD",798.1,798.13,.01,1,2,"%D",2,0)
registries that use the selection rule.
"^DD",798.1,798.13,.01,1,2,"DT")
3000406
"^DD",798.1,798.13,.01,3)
Enter a name of the selection rule (3-40 characters).
"^DD",798.1,798.13,.01,4)
I $G(X)="??" N D,DIC,DZ S DIC="^ROR(798.2,",DIC(0)="",D="B",DZ="??" D DQ^DICQ,EN^DDIOL("",,"!")
"^DD",798.1,798.13,.01,8.5)
@
"^DD",798.1,798.13,.01,9)
@
"^DD",798.1,798.13,.01,21,0)
^.001^8^8^3140228^^^^
"^DD",798.1,798.13,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",798.1,798.13,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.1,798.13,.01,21,3,0)
 
"^DD",798.1,798.13,.01,21,4,0)
Enter a name of the selection rule that will be 
"^DD",798.1,798.13,.01,21,5,0)
used to select patients for addition to the
"^DD",798.1,798.13,.01,21,6,0)
registry. The name should be entered exactly as it
"^DD",798.1,798.13,.01,21,7,0)
appears in the list of selection rules (file 
"^DD",798.1,798.13,.01,21,8,0)
#798.2).
"^DD",798.1,798.13,.01,23,0)
^.001^3^3^3140228^^^^
"^DD",798.1,798.13,.01,23,1,0)
Names of the selection rules are used here instead of 
"^DD",798.1,798.13,.01,23,2,0)
pointers because the KIDS pointer resolving feature 
"^DD",798.1,798.13,.01,23,3,0)
does not work for .01 fields.
"^DD",798.1,798.13,.01,"DEL",1,0)
I $$VADEL^RORDD(798.1,$G(DA(1)))
"^DD",798.1,798.13,.01,"DT")
3140228
"^DD",798.1,798.15,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.1,798.15,0,"NM","DESCRIPTION")
 
"^DD",798.1,798.15,0,"UP")
798.1
"^DD",798.1,798.15,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.1,798.15,.01,"DT")
3000313
"^DD",798.2,798.2,0)
FIELD^^6^8
"^DD",798.2,798.2,0,"DDA")
N
"^DD",798.2,798.2,0,"DT")
3150423
"^DD",798.2,798.2,0,"ID","WRITE")
D EN^DDIOL("  "_$P($G(^(0)),U,3),,"?30")
"^DD",798.2,798.2,0,"NM","ROR SELECTION RULE")

"^DD",798.2,798.2,0,"PT",798.01,.01)

"^DD",798.2,798.2,0,"VRPK")
ROR
"^DD",798.2,798.2,.01,0)
RULE NAME^FX^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>40!($L(X)<3)!'(X?1.UNP) X
"^DD",798.2,798.2,.01,1,0)
^.1^^0
"^DD",798.2,798.2,.01,3)
Enter a unique namespaced rule name (3-40 characters).
"^DD",798.2,798.2,.01,8.5)
@
"^DD",798.2,798.2,.01,9)
@
"^DD",798.2,798.2,.01,21,0)
^.001^6^6^3140310^^^
"^DD",798.2,798.2,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,.01,21,3,0)
 
"^DD",798.2,798.2,.01,21,4,0)
Selection rule name must be unique and name 
"^DD",798.2,798.2,.01,21,5,0)
spaced. Names of the rules that are used for
"^DD",798.2,798.2,.01,21,6,0)
National Registries must start with "VA".
"^DD",798.2,798.2,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,.01,"DT")
3140228
"^DD",798.2,798.2,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;4^Q:$$VAEDT^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,1,0)
^.1^^0
"^DD",798.2,798.2,.09,3)
Enter 1 or YES if this rule is for a national registry.
"^DD",798.2,798.2,.09,8.5)
@
"^DD",798.2,798.2,.09,9)
@
"^DD",798.2,798.2,.09,21,0)
^.001^6^6^3150528^^
"^DD",798.2,798.2,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",798.2,798.2,.09,21,2,0)
EDIT THIS FIELD!
"^DD",798.2,798.2,.09,21,3,0)
 
"^DD",798.2,798.2,.09,21,4,0)
Selection rules of the national registries must
"^DD",798.2,798.2,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",798.2,798.2,.09,21,6,0)
editing of other fields of rule definitions.
"^DD",798.2,798.2,.09,"DEL",1,0)
I $$VADEL^RORDD(798.2,,-1)
"^DD",798.2,798.2,.09,"DT")
3011121
"^DD",798.2,798.2,1,0)
EXPRESSION^RFX^^1;E1,245^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>250!($L(X)<1) X I $D(X) Q:$$EXPR^RORDD($P($G(^ROR(798.2,DA,0)),U,2))
"^DD",798.2,798.2,1,3)
Enter M expression that implements the selection rule (1-250 characters).
"^DD",798.2,798.2,1,8.5)
@
"^DD",798.2,798.2,1,9)
@
"^DD",798.2,798.2,1,21,0)
^^5^5^3011010^
"^DD",798.2,798.2,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,1,21,3,0)
 
"^DD",798.2,798.2,1,21,4,0)
Enter a MUMPS expression (it may contain special
"^DD",798.2,798.2,1,21,5,0)
macros) that implements the selection rule.
"^DD",798.2,798.2,1,23,0)
^^62^62^3060203^
"^DD",798.2,798.2,1,23,1,0)
MUMPS expression that implements the selection rule can
"^DD",798.2,798.2,1,23,2,0)
contain special macros:
"^DD",798.2,798.2,1,23,3,0)
 
"^DD",798.2,798.2,1,23,4,0)
 {E: Field Name} - External value of the field
"^DD",798.2,798.2,1,23,5,0)
 {E: Field Number}
"^DD",798.2,798.2,1,23,6,0)
 
"^DD",798.2,798.2,1,23,7,0)
 {I: Field Name} - Internal value of the field
"^DD",798.2,798.2,1,23,8,0)
 {I: Field Number}
"^DD",798.2,798.2,1,23,9,0)
 
"^DD",798.2,798.2,1,23,10,0)
 {Rule Name} - Result value of the lower level
"^DD",798.2,798.2,1,23,11,0)
selection rule
"^DD",798.2,798.2,1,23,12,0)
 
"^DD",798.2,798.2,1,23,13,0)
 {AVG: Rule Name} - Average value of the rule
"^DD",798.2,798.2,1,23,14,0)
 
"^DD",798.2,798.2,1,23,15,0)
 {CNT: Rule Name} - Number of calculations of the rule
"^DD",798.2,798.2,1,23,16,0)
 
"^DD",798.2,798.2,1,23,17,0)
 {MAX: Rule Name} - Maximum value of the rule
"^DD",798.2,798.2,1,23,18,0)
 
"^DD",798.2,798.2,1,23,19,0)
 {MIN: Rule Name} - Minimum value of the rule
"^DD",798.2,798.2,1,23,20,0)
 
"^DD",798.2,798.2,1,23,21,0)
 {SUM: Rule Name} - Total of the selection rule values
"^DD",798.2,798.2,1,23,22,0)
 
"^DD",798.2,798.2,1,23,23,0)
 {LS: Lab Search Name} - This macro can be used only in
"^DD",798.2,798.2,1,23,24,0)
the selection rules associated with the LAB DATA file
"^DD",798.2,798.2,1,23,25,0)
(#63). It is evaluated as 1 if some of the patient
"^DD",798.2,798.2,1,23,26,0)
lab results pass the Lab search criteria (from the file
"^DD",798.2,798.2,1,23,27,0)
#798.9). Otherwise, it is evaluated as zero.
"^DD",798.2,798.2,1,23,28,0)
 
"^DD",798.2,798.2,1,23,29,0)
Return values of the top-level rules:
"^DD",798.2,798.2,1,23,30,0)
 
"^DD",798.2,798.2,1,23,31,0)
 0        - Skip the patient
"^DD",798.2,798.2,1,23,32,0)
 Non-zero - Add the patient to the registry
"^DD",798.2,798.2,1,23,33,0)
 
"^DD",798.2,798.2,1,23,34,0)
Return values of the lower level rules:
"^DD",798.2,798.2,1,23,35,0)
 
"^DD",798.2,798.2,1,23,36,0)
Return values can be used in the expressions of the
"^DD",798.2,798.2,1,23,37,0)
other rules. Some additional values are calculated
"^DD",798.2,798.2,1,23,38,0)
automatically (minimum, maximum, average, etc.) for
"^DD",798.2,798.2,1,23,39,0)
each rule.
"^DD",798.2,798.2,1,23,40,0)
 
"^DD",798.2,798.2,1,23,41,0)
Avoid circular references in the expressions. If a 
"^DD",798.2,798.2,1,23,42,0)
rule directly or indirectly depends on itself, it
"^DD",798.2,798.2,1,23,43,0)
cannot be evaluated. An example of the circular
"^DD",798.2,798.2,1,23,44,0)
reference:
"^DD",798.2,798.2,1,23,45,0)
 
"^DD",798.2,798.2,1,23,46,0)
 Rule A: {MAX:B}<10
"^DD",798.2,798.2,1,23,47,0)
 Rule B: {I:23}+{C}
"^DD",798.2,798.2,1,23,48,0)
 Rule C: {CNT:A}
"^DD",798.2,798.2,1,23,49,0)
 
"^DD",798.2,798.2,1,23,50,0)
The rule A cannot be evaluated because it depends on 
"^DD",798.2,798.2,1,23,51,0)
the rule B, which depends on rule C, and C depends on
"^DD",798.2,798.2,1,23,52,0)
A.
"^DD",798.2,798.2,1,23,53,0)
 
"^DD",798.2,798.2,1,23,54,0)
Complex selection rules could be implemented by 
"^DD",798.2,798.2,1,23,55,0)
external MUMPS functions. In that case the expression
"^DD",798.2,798.2,1,23,56,0)
should contains a full reference to the function
"^DD",798.2,798.2,1,23,57,0)
($$TAG^ROUTINE). Values of the necessary data elements
"^DD",798.2,798.2,1,23,58,0)
can be loaded automatically (see description of the
"^DD",798.2,798.2,1,23,59,0)
DATA ELEMENT multiple).
"^DD",798.2,798.2,1,23,60,0)
 
"^DD",798.2,798.2,1,23,61,0)
See the Programmer's reference manual for more details 
"^DD",798.2,798.2,1,23,62,0)
regarding the selection rule expressions.
"^DD",798.2,798.2,1,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,1,"DT")
3011109
"^DD",798.2,798.2,2,0)
FILE^RNJ22,9X^^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X I $D(X) K:'$$VFILE^DILFD(X) X
"^DD",798.2,798.2,2,3)
Enter (sub)file number between 1 and 999999999999, 9 Decimal Digits.
"^DD",798.2,798.2,2,8.5)
@
"^DD",798.2,798.2,2,9)
@
"^DD",798.2,798.2,2,21,0)
^.001^6^6^3020403^^
"^DD",798.2,798.2,2,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,2,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,2,21,3,0)
 
"^DD",798.2,798.2,2,21,4,0)
Enter a file/sub-file number that the selection 
"^DD",798.2,798.2,2,21,5,0)
rule is associated with. Each selection rule can
"^DD",798.2,798.2,2,21,6,0)
be associated with only one file.
"^DD",798.2,798.2,2,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,2,"DT")
3011109
"^DD",798.2,798.2,4,0)
SHORT DESCRIPTION^FX^^0;3^Q:$$VAEDT^RORDD(798.2,$G(DA))  K:$L(X)>30!($L(X)<3) X
"^DD",798.2,798.2,4,3)
Enter a short description of the selection rule (3-30 characters).
"^DD",798.2,798.2,4,8.5)
@
"^DD",798.2,798.2,4,9)
@
"^DD",798.2,798.2,4,21,0)
^^5^5^3020403^
"^DD",798.2,798.2,4,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.2,4,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.2,4,21,3,0)
 
"^DD",798.2,798.2,4,21,4,0)
The short description of the selection rule is 
"^DD",798.2,798.2,4,21,5,0)
used in the reports and GUI dialogs.
"^DD",798.2,798.2,4,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA))
"^DD",798.2,798.2,4,"DT")
3011109
"^DD",798.2,798.2,5,0)
DESCRIPTION^798.25^^3;0
"^DD",798.2,798.2,5,21,0)
^^3^3^3150528^^
"^DD",798.2,798.2,5,21,1,0)
You can enter any additional reference information
"^DD",798.2,798.2,5,21,2,0)
related to the selection rule. The content of this
"^DD",798.2,798.2,5,21,3,0)
field is not used by the application.
"^DD",798.2,798.2,6,0)
DATA ELEMENT^798.26^^4;0
"^DD",798.2,798.2,6,9)
@
"^DD",798.2,798.2,6,21,0)
^.001^12^12^3060203^^
"^DD",798.2,798.2,6,21,1,0)
The DATA ELEMENT multiple contains a list of 
"^DD",798.2,798.2,6,21,2,0)
additional data elements to load. 
"^DD",798.2,798.2,6,21,3,0)
 
"^DD",798.2,798.2,6,21,4,0)
Values of all the data elements referenced in the
"^DD",798.2,798.2,6,21,5,0)
selection rule expression are loaded
"^DD",798.2,798.2,6,21,6,0)
automatically.
"^DD",798.2,798.2,6,21,7,0)
 
"^DD",798.2,798.2,6,21,8,0)
However, if the rule is implemented by an external
"^DD",798.2,798.2,6,21,9,0)
function, you can enter the codes of all necessary
"^DD",798.2,798.2,6,21,10,0)
data elements into this multiple. Their values
"^DD",798.2,798.2,6,21,11,0)
will be loaded automatically and will be
"^DD",798.2,798.2,6,21,12,0)
accessible in the function.
"^DD",798.2,798.2,6,"DT")
3020326
"^DD",798.2,798.2,7,0)
CODING SYSTEM^*P80.4'^ICDS(^5;1^S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",798.2,798.2,7,3)
Select a coding system.
"^DD",798.2,798.2,7,12)
The screen limits the coding system to those allowed in files 80 and 80.1
"^DD",798.2,798.2,7,12.1)
S DIC("S")="I $$FILE^ICDEX(+Y)=80!($$FILE^ICDEX(+Y)=80.1)"
"^DD",798.2,798.2,7,21,0)
^.001^1^1^3150423^^^^
"^DD",798.2,798.2,7,21,1,0)
This is the coding system to which the code belongs.
"^DD",798.2,798.2,7,"DT")
3150423
"^DD",798.2,798.25,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",798.2,798.25,0,"NM","DESCRIPTION")

"^DD",798.2,798.25,0,"UP")
798.2
"^DD",798.2,798.25,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",798.2,798.25,.01,3)
Enter any additional text here to describe the rule.
"^DD",798.2,798.25,.01,21,0)
^^2^2^3150528^
"^DD",798.2,798.25,.01,21,1,0)
This field can contain any additional information needed to describe
"^DD",798.2,798.25,.01,21,2,0)
unique characteristics of this rule.
"^DD",798.2,798.25,.01,"DT")
3150528
"^DD",798.2,798.26,0)
DATA ELEMENT SUB-FIELD^^1^2
"^DD",798.2,798.26,0,"DT")
3020326
"^DD",798.2,798.26,0,"NM","DATA ELEMENT")

"^DD",798.2,798.26,0,"UP")
798.2
"^DD",798.2,798.26,.01,0)
ELEMENT CODE^MNJ9,0X^^0;1^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))  K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",798.2,798.26,.01,1,0)
^.1^^0
"^DD",798.2,798.26,.01,3)
Type a Number between 1 and 999999999, 0 Decimal Digits.
"^DD",798.2,798.26,.01,8.5)
@
"^DD",798.2,798.26,.01,9)
@
"^DD",798.2,798.26,.01,21,0)
^^8^8^3020328^
"^DD",798.2,798.26,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF
"^DD",798.2,798.26,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",798.2,798.26,.01,21,3,0)
 
"^DD",798.2,798.26,.01,21,4,0)
Enter the code of the data element that should be 
"^DD",798.2,798.26,.01,21,5,0)
loaded before evaluation of the expression. Values
"^DD",798.2,798.26,.01,21,6,0)
of all data elements referenced in the selection
"^DD",798.2,798.26,.01,21,7,0)
rule expression are loaded automatically (you do
"^DD",798.2,798.26,.01,21,8,0)
not need to enter them here).
"^DD",798.2,798.26,.01,"DEL",1,0)
I $$VADEL^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,.01,"DT")
3020326
"^DD",798.2,798.26,1,0)
VALUE TYPE^RSX^E:External;I:Internal;EI:Both;^0;2^Q:$$VAEDT^RORDD(798.2,$G(DA(1)))
"^DD",798.2,798.26,1,3)
Enter a value type to describe the retrieval format of the data element.
"^DD",798.2,798.26,1,8.5)
@
"^DD",798.2,798.26,1,9)
@
"^DD",798.2,798.26,1,21,0)
^.001^3^3^3150528^^
"^DD",798.2,798.26,1,21,1,0)
This field holds required value type(s) of the
"^DD",798.2,798.26,1,21,2,0)
data element. The type(s) must be supported by the
"^DD",798.2,798.26,1,21,3,0)
search engine.
"^DD",798.2,798.26,1,"DT")
3020311
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DD",799.51,799.51,0)
FIELD^^.09^5
"^DD",799.51,799.51,0,"DDA")
N
"^DD",799.51,799.51,0,"DT")
3180508
"^DD",799.51,799.51,0,"IX","AR",799.51,.02)

"^DD",799.51,799.51,0,"IX","B",799.51,.01)

"^DD",799.51,799.51,0,"NM","ROR GENERIC DRUG")

"^DD",799.51,799.51,0,"VRPK")
ROR
"^DD",799.51,799.51,0,"VRRV")
1.1^ROR*1*5
"^DD",799.51,799.51,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.51,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.51,799.51,.01,1,0)
^.1
"^DD",799.51,799.51,.01,1,1,0)
799.51^B
"^DD",799.51,799.51,.01,1,1,1)
S ^ROR(799.51,"B",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.01,1,1,2)
K ^ROR(799.51,"B",$E(X,1,30),DA)
"^DD",799.51,799.51,.01,1,1,3)
Do not delete!
"^DD",799.51,799.51,.01,3)
Name must be 3-30 characters, not numeric or starting with punctuation.
"^DD",799.51,799.51,.01,8.5)
@
"^DD",799.51,799.51,.01,9)
@
"^DD",799.51,799.51,.01,21,0)
^.001^4^4^3040124^^^
"^DD",799.51,799.51,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.01,21,3,0)
 
"^DD",799.51,799.51,.01,21,4,0)
The NAME field stores a short name of the drug.
"^DD",799.51,799.51,.01,"DEL",1,0)
I $$VADEL^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,1,0)
^.1
"^DD",799.51,799.51,.02,1,1,0)
799.51^AR
"^DD",799.51,799.51,.02,1,1,1)
S ^ROR(799.51,"AR",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.02,1,1,2)
K ^ROR(799.51,"AR",$E(X,1,30),DA)
"^DD",799.51,799.51,.02,1,1,3)
Do not delete!
"^DD",799.51,799.51,.02,1,1,"%D",0)
^^2^2^3040124^
"^DD",799.51,799.51,.02,1,1,"%D",1,0)
This cross-reference groups all drugs associated
"^DD",799.51,799.51,.02,1,1,"%D",2,0)
with a particular registry together.
"^DD",799.51,799.51,.02,1,1,"DT")
3030818
"^DD",799.51,799.51,.02,8.5)
@
"^DD",799.51,799.51,.02,9)
@
"^DD",799.51,799.51,.02,21,0)
^^5^5^3040124^
"^DD",799.51,799.51,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.02,21,3,0)
 
"^DD",799.51,799.51,.02,21,4,0)
This field identifies the registry that the drug 
"^DD",799.51,799.51,.02,21,5,0)
is associated with.
"^DD",799.51,799.51,.02,"DT")
3180117
"^DD",799.51,799.51,.03,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",799.51,799.51,.03,3)

"^DD",799.51,799.51,.03,8.5)
@
"^DD",799.51,799.51,.03,9)
@
"^DD",799.51,799.51,.03,12)
Only Drug Groups can be selected.
"^DD",799.51,799.51,.03,12.1)
S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"")
"^DD",799.51,799.51,.03,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.03,23,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,23,1,0)
This field is not used currently. It is reserved for 
"^DD",799.51,799.51,.03,23,2,0)
future use.
"^DD",799.51,799.51,.03,"DT")
3040124
"^DD",799.51,799.51,.04,0)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.04,8.5)
@
"^DD",799.51,799.51,.04,9)
@
"^DD",799.51,799.51,.04,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.04,"DT")
3180117
"^DD",799.51,799.51,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,8.5)
@
"^DD",799.51,799.51,.09,9)
@
"^DD",799.51,799.51,.09,21,0)
^^6^6^3060203^
"^DD",799.51,799.51,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.51,799.51,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.51,799.51,.09,21,3,0)
 
"^DD",799.51,799.51,.09,21,4,0)
Drugs associated with the national registries must
"^DD",799.51,799.51,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",799.51,799.51,.09,21,6,0)
editing of other fields of the record.
"^DD",799.51,799.51,.09,"DEL",1,0)
I $$VADEL^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,"DT")
3030818
"^DIC",798.1,798.1,0)
ROR REGISTRY PARAMETERS^798.1
"^DIC",798.1,798.1,0,"GL")
^ROR(798.1,
"^DIC",798.1,798.1,"%",0)
^1.005^^0
"^DIC",798.1,798.1,"%D",0)
^^22^22^3060203^
"^DIC",798.1,798.1,"%D",1,0)
Records of the ROR REGISTRY PARAMETERS file 
"^DIC",798.1,798.1,"%D",2,0)
contain various registry parameters and the data
"^DIC",798.1,798.1,"%D",3,0)
that indicates current registry state. Every 
"^DIC",798.1,798.1,"%D",4,0)
registry must have a record in this file.
"^DIC",798.1,798.1,"%D",5,0)
 
"^DIC",798.1,798.1,"%D",6,0)
Records of the file are uniquely identified by the
"^DIC",798.1,798.1,"%D",7,0)
registry name (the "A" primary key and the
"^DIC",798.1,798.1,"%D",8,0)
uniqueness index "B" are used for that purpose).
"^DIC",798.1,798.1,"%D",9,0)
 
"^DIC",798.1,798.1,"%D",10,0)
A permanent screen (the ^DD(798.1,0,"SCR") node) 
"^DIC",798.1,798.1,"%D",11,0)
restricts access to records of this file. Users
"^DIC",798.1,798.1,"%D",12,0)
can only access records of those registries that
"^DIC",798.1,798.1,"%D",13,0)
they have the security key(s) for. Users with the
"^DIC",798.1,798.1,"%D",14,0)
ROR VA IRM security key can access all records of
"^DIC",798.1,798.1,"%D",15,0)
the file.
"^DIC",798.1,798.1,"%D",16,0)
 
"^DIC",798.1,798.1,"%D",17,0)
If you want the changes in the security keys 
"^DIC",798.1,798.1,"%D",18,0)
allocation to have an effect immediately, you
"^DIC",798.1,798.1,"%D",19,0)
should rebuild the "ACL" cross-reference of the
"^DIC",798.1,798.1,"%D",20,0)
.01 field of the SECURITY KEY multiple of this
"^DIC",798.1,798.1,"%D",21,0)
file. See the description of the cross-reference
"^DIC",798.1,798.1,"%D",22,0)
for more details.
"^DIC",798.1,"B","ROR REGISTRY PARAMETERS",798.1)

"^DIC",798.2,798.2,0)
ROR SELECTION RULE^798.2
"^DIC",798.2,798.2,0,"GL")
^ROR(798.2,
"^DIC",798.2,798.2,"%",0)
^1.005^^0
"^DIC",798.2,798.2,"%D",0)
^^30^30^3020403^
"^DIC",798.2,798.2,"%D",1,0)
The ROR SELECTION RULES file contains definitions
"^DIC",798.2,798.2,"%D",2,0)
of the selection rules that are used to screen
"^DIC",798.2,798.2,"%D",3,0)
patients for addition to the registries. There are
"^DIC",798.2,798.2,"%D",4,0)
two kinds of rules: top-level and lower level.
"^DIC",798.2,798.2,"%D",5,0)
 
"^DIC",798.2,798.2,"%D",6,0)
If a rule is referenced by the ROR REGISTRY 
"^DIC",798.2,798.2,"%D",7,0)
PARAMETERS file, it is the top-level rule.
"^DIC",798.2,798.2,"%D",8,0)
Non-zero value of any top-level rule expression 
"^DIC",798.2,798.2,"%D",9,0)
directly determines that the patient should be
"^DIC",798.2,798.2,"%D",10,0)
added to the corresponding registry.
"^DIC",798.2,798.2,"%D",11,0)
 
"^DIC",798.2,798.2,"%D",12,0)
Lower level rules are referenced only by other 
"^DIC",798.2,798.2,"%D",13,0)
rules (by rule macros in the expressions). Their
"^DIC",798.2,798.2,"%D",14,0)
expressions are evaluated in the proper order, and
"^DIC",798.2,798.2,"%D",15,0)
the result values are used in the expressions of 
"^DIC",798.2,798.2,"%D",16,0)
other rules. Lower level rules have an indirect
"^DIC",798.2,798.2,"%D",17,0)
impact on the final result and can be used for
"^DIC",798.2,798.2,"%D",18,0)
complex processing of linked files and multiples.
"^DIC",798.2,798.2,"%D",19,0)
 
"^DIC",798.2,798.2,"%D",20,0)
For example, a lower level rule can calculate 
"^DIC",798.2,798.2,"%D",21,0)
maximum and minimum values of a parameter in the
"^DIC",798.2,798.2,"%D",22,0)
sub-file, and a top-level rule will analyze these
"^DIC",798.2,798.2,"%D",23,0)
values and decide if the patient should be added 
"^DIC",798.2,798.2,"%D",24,0)
to the registry. Moreover, they could be used to
"^DIC",798.2,798.2,"%D",25,0)
split a very complex rule into several simpler
"^DIC",798.2,798.2,"%D",26,0)
rules.
"^DIC",798.2,798.2,"%D",27,0)
 
"^DIC",798.2,798.2,"%D",28,0)
Records of the file are uniquely identified by the
"^DIC",798.2,798.2,"%D",29,0)
rule name (the "A" primary key and the uniqueness
"^DIC",798.2,798.2,"%D",30,0)
index "B" are used for this purpose).
"^DIC",798.2,"B","ROR SELECTION RULE",798.2)

"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"^DIC",799.51,799.51,0)
ROR GENERIC DRUG^799.51
"^DIC",799.51,799.51,0,"GL")
^ROR(799.51,
"^DIC",799.51,799.51,"%",0)
^1.005^^0
"^DIC",799.51,799.51,"%D",0)
^^5^5^3060203^
"^DIC",799.51,799.51,"%D",1,0)
This file contains a list of registry specific
"^DIC",799.51,799.51,"%D",2,0)
generic medications. For example, the ARV 
"^DIC",799.51,799.51,"%D",3,0)
(anti-retroviral) medications associated with the
"^DIC",799.51,799.51,"%D",4,0)
Human Immunodeficiency Virus (HIV) registry are
"^DIC",799.51,799.51,"%D",5,0)
stored here.
"^DIC",799.51,"B","ROR GENERIC DRUG",799.51)

"BLD",10354,6)
^33
**END**
**END**

