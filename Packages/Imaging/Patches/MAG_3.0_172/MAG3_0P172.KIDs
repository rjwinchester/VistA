KIDS Distribution saved on May 24, 2017@09:19:21
P172 -Reject Duplicated UID
**KIDS**:MAG*3.0*172^

**INSTALL NAME**
MAG*3.0*172
"BLD",8340,0)
MAG*3.0*172^IMAGING^0^3170524^y
"BLD",8340,1,0)
^^10^10^3170517^^
"BLD",8340,1,1,0)
 
"BLD",8340,1,2,0)
VistA Imaging V3.0 - Patch 172 T3 - Reject duplicated UID
"BLD",8340,1,3,0)
 
"BLD",8340,1,4,0)
Routines:
"BLD",8340,1,5,0)
MAGIP172
"BLD",8340,1,6,0)
MAGVUID
"BLD",8340,1,7,0)
MAGVRD03
"BLD",8340,1,8,0)
 
"BLD",8340,1,9,0)
Please note that routine MAGIP172 is deleted after the KIDS build is 
"BLD",8340,1,10,0)
installed
"BLD",8340,4,0)
^9.64PA^^0
"BLD",8340,6.3)
33
"BLD",8340,"ABNS",0)
^9.66A^^
"BLD",8340,"ABPKG")
n^n^G.IMAGING DEVELOPMENT TEAM@domain.ext
"BLD",8340,"INID")
n^y^n
"BLD",8340,"INIT")
POS^MAGIP172
"BLD",8340,"KRN",0)
^9.67PA^779.2^20
"BLD",8340,"KRN",.4,0)
.4
"BLD",8340,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",8340,"KRN",.401,0)
.401
"BLD",8340,"KRN",.401,"NM",0)
^9.68A^^0
"BLD",8340,"KRN",.402,0)
.402
"BLD",8340,"KRN",.402,"NM",0)
^9.68A^^
"BLD",8340,"KRN",.403,0)
.403
"BLD",8340,"KRN",.5,0)
.5
"BLD",8340,"KRN",.84,0)
.84
"BLD",8340,"KRN",.84,"NM",0)
^9.68A^^
"BLD",8340,"KRN",3.6,0)
3.6
"BLD",8340,"KRN",3.8,0)
3.8
"BLD",8340,"KRN",3.8,"NM",0)
^9.68A^^
"BLD",8340,"KRN",9.2,0)
9.2
"BLD",8340,"KRN",9.8,0)
9.8
"BLD",8340,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",8340,"KRN",9.8,"NM",1,0)
MAGVUID^^0^B66333362
"BLD",8340,"KRN",9.8,"NM",2,0)
MAGIP172^^0^B4110404
"BLD",8340,"KRN",9.8,"NM",3,0)
MAGVRD03^^0^B19320380
"BLD",8340,"KRN",9.8,"NM","B","MAGIP172",2)

"BLD",8340,"KRN",9.8,"NM","B","MAGVRD03",3)

"BLD",8340,"KRN",9.8,"NM","B","MAGVUID",1)

"BLD",8340,"KRN",19,0)
19
"BLD",8340,"KRN",19,"NM",0)
^9.68A^^0
"BLD",8340,"KRN",19.1,0)
19.1
"BLD",8340,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",8340,"KRN",101,0)
101
"BLD",8340,"KRN",101,"NM",0)
^9.68A^^
"BLD",8340,"KRN",409.61,0)
409.61
"BLD",8340,"KRN",771,0)
771
"BLD",8340,"KRN",771,"NM",0)
^9.68A^^
"BLD",8340,"KRN",779.2,0)
779.2
"BLD",8340,"KRN",870,0)
870
"BLD",8340,"KRN",870,"NM",0)
^9.68A^^
"BLD",8340,"KRN",8989.51,0)
8989.51
"BLD",8340,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",8340,"KRN",8989.52,0)
8989.52
"BLD",8340,"KRN",8994,0)
8994
"BLD",8340,"KRN",8994,"NM",0)
^9.68A^7^3
"BLD",8340,"KRN",8994,"NM",1,0)
MAGV SERIES UID CHECK^^0
"BLD",8340,"KRN",8994,"NM",5,0)
MAGV SOP UID CHECK^^0
"BLD",8340,"KRN",8994,"NM",7,0)
MAGV STUDY UID CHECK^^0
"BLD",8340,"KRN",8994,"NM","B","MAGV SERIES UID CHECK",1)

"BLD",8340,"KRN",8994,"NM","B","MAGV SOP UID CHECK",5)

"BLD",8340,"KRN",8994,"NM","B","MAGV STUDY UID CHECK",7)

"BLD",8340,"KRN","B",.4,.4)

"BLD",8340,"KRN","B",.401,.401)

"BLD",8340,"KRN","B",.402,.402)

"BLD",8340,"KRN","B",.403,.403)

"BLD",8340,"KRN","B",.5,.5)

"BLD",8340,"KRN","B",.84,.84)

"BLD",8340,"KRN","B",3.6,3.6)

"BLD",8340,"KRN","B",3.8,3.8)

"BLD",8340,"KRN","B",9.2,9.2)

"BLD",8340,"KRN","B",9.8,9.8)

"BLD",8340,"KRN","B",19,19)

"BLD",8340,"KRN","B",19.1,19.1)

"BLD",8340,"KRN","B",101,101)

"BLD",8340,"KRN","B",409.61,409.61)

"BLD",8340,"KRN","B",771,771)

"BLD",8340,"KRN","B",779.2,779.2)

"BLD",8340,"KRN","B",870,870)

"BLD",8340,"KRN","B",8989.51,8989.51)

"BLD",8340,"KRN","B",8989.52,8989.52)

"BLD",8340,"KRN","B",8994,8994)

"BLD",8340,"PRE")

"BLD",8340,"QDEF")
^^^^^^^^
"BLD",8340,"QUES",0)
^9.62^^
"BLD",8340,"REQB",0)
^9.611^1^1
"BLD",8340,"REQB",1,0)
MAG*3.0*162^2
"BLD",8340,"REQB","B","MAG*3.0*162",1)

"INIT")
POS^MAGIP172
"KRN",8994,3271,-1)
0^1
"KRN",8994,3271,0)
MAGV SERIES UID CHECK^SERIES^MAGVUID^1^R^0^^^^^1
"KRN",8994,3271,1,0)
^8994.01^1^1^3160512^^^^
"KRN",8994,3271,1,1,0)
SERIES UID CHECKING
"KRN",8994,3271,2,0)
^8994.02A^7^7
"KRN",8994,3271,2,1,0)
DFN^1^10^1^1
"KRN",8994,3271,2,1,1,0)
^8994.021^2^2^3100817^^^
"KRN",8994,3271,2,1,1,1,0)
IEN of the patient's record in the NEW PERSON File (#200).
"KRN",8994,3271,2,1,1,2,0)
The IEN is obtained from the image's DICOM header.
"KRN",8994,3271,2,2,0)
ACNUMB^1^20^1^2
"KRN",8994,3271,2,2,1,0)
^8994.021^6^6^3100816^^
"KRN",8994,3271,2,2,1,1,0)
ACCESSION NUMBER (LONG FORM)
"KRN",8994,3271,2,2,1,2,0)
  DATE-SITE LOCATION
"KRN",8994,3271,2,2,1,3,0)
  The date is in VA format, and the site location code is the site number.
"KRN",8994,3271,2,2,1,4,0)
  The two components are concatenated with a hyphen (-).
"KRN",8994,3271,2,2,1,5,0)
  This component comes from image's DICOM header by way of the
"KRN",8994,3271,2,2,1,6,0)
  Modality Worklist entry for the associated study.
"KRN",8994,3271,2,3,0)
SITE^1^5^1^3
"KRN",8994,3271,2,3,1,0)
^8994.021^1^1^3091121^^
"KRN",8994,3271,2,3,1,1,0)
SITE CODE
"KRN",8994,3271,2,4,0)
INSTR^1^30^1^4
"KRN",8994,3271,2,4,1,0)
^8994.021^1^1^3100816^^
"KRN",8994,3271,2,4,1,1,0)
INSTRUMENT NAME
"KRN",8994,3271,2,5,0)
STUDYUID^1^64^1^5
"KRN",8994,3271,2,5,1,0)
^8994.021^1^1^3100816^^^
"KRN",8994,3271,2,5,1,1,0)
STUDY UID
"KRN",8994,3271,2,6,0)
SERIESUID^1^64^1^6
"KRN",8994,3271,2,6,1,0)
^8994.021^1^1^3160504^^^^
"KRN",8994,3271,2,6,1,1,0)
SERIES UID
"KRN",8994,3271,2,7,0)
DUPEFLAG^1^1^0^7
"KRN",8994,3271,2,7,1,0)
^^2^2^3160512^
"KRN",8994,3271,2,7,1,1,0)
Optional flag to determine if a new UID should be generated if a duplicate is detected.
"KRN",8994,3271,2,7,1,2,0)
If flag is set to "1" do not generate a new UID is a duplicate UID is detected.
"KRN",8994,3271,2,"B","ACNUMB",2)

"KRN",8994,3271,2,"B","DFN",1)

"KRN",8994,3271,2,"B","DUPEFLAG",7)

"KRN",8994,3271,2,"B","INSTR",4)

"KRN",8994,3271,2,"B","SERIESUID",6)

"KRN",8994,3271,2,"B","SITE",3)

"KRN",8994,3271,2,"B","STUDYUID",5)

"KRN",8994,3271,2,"PARAMSEQ",1,1)

"KRN",8994,3271,2,"PARAMSEQ",2,2)

"KRN",8994,3271,2,"PARAMSEQ",3,3)

"KRN",8994,3271,2,"PARAMSEQ",4,4)

"KRN",8994,3271,2,"PARAMSEQ",5,5)

"KRN",8994,3271,2,"PARAMSEQ",6,6)

"KRN",8994,3271,2,"PARAMSEQ",7,7)

"KRN",8994,3271,3,0)
^8994.03^6^6^3160512^^^^
"KRN",8994,3271,3,1,0)
REPLACEMENT UID OR CODE
"KRN",8994,3271,3,2,0)
  0~DATA OK = Success (Series UID is not a duplicate).
"KRN",8994,3271,3,3,0)
  1~LogUIDToUse~"_UID
"KRN",8994,3271,3,4,0)
  3~Illegal UID Replacement~NEWUID
"KRN",8994,3271,3,5,0)
  1~NewUIDToUse~NEWUID
"KRN",8994,3271,3,6,0)
  -1 (Error Condition)
"KRN",8994,3274,-1)
0^5
"KRN",8994,3274,0)
MAGV SOP UID CHECK^SOP^MAGVUID^1^R^0^^^^^1
"KRN",8994,3274,1,0)
^8994.01^1^1^3160512^^^^
"KRN",8994,3274,1,1,0)
SOP UID CHECK
"KRN",8994,3274,2,0)
^8994.02A^8^8
"KRN",8994,3274,2,1,0)
DFN^1^10^1^1
"KRN",8994,3274,2,1,1,0)
^8994.021^2^2^3100816^^
"KRN",8994,3274,2,1,1,1,0)
 IEN of the patient's record in the NEW PERSON File (#200).
"KRN",8994,3274,2,1,1,2,0)
 It is obtained from the image's DICOM header.
"KRN",8994,3274,2,2,0)
ACNUMB^1^20^1^2
"KRN",8994,3274,2,2,1,0)
^8994.021^6^6^3100816^^
"KRN",8994,3274,2,2,1,1,0)
ACCESSION NUMBER (LONG FORM)
"KRN",8994,3274,2,2,1,2,0)
 DATE-SITE LOCATION
"KRN",8994,3274,2,2,1,3,0)
 The date is in VA format, and the site location code is the site number.
"KRN",8994,3274,2,2,1,4,0)
 The two components are concatenated with a hyphen (-).
"KRN",8994,3274,2,2,1,5,0)
 This component comes from image's DICOM header by way of the
"KRN",8994,3274,2,2,1,6,0)
 Modality Worklist entry for the associated study.
"KRN",8994,3274,2,3,0)
SITE^1^5^1^3
"KRN",8994,3274,2,3,1,0)
^^1^1^3091121^
"KRN",8994,3274,2,3,1,1,0)
SITE CODE (660)
"KRN",8994,3274,2,4,0)
INSTR^1^30^1^4
"KRN",8994,3274,2,4,1,0)
^^1^1^3091121^
"KRN",8994,3274,2,4,1,1,0)
INSTRUMENT NAME
"KRN",8994,3274,2,5,0)
STUDYUID^1^64^1^5
"KRN",8994,3274,2,5,1,0)
^8994.021^1^1^3100816^^
"KRN",8994,3274,2,5,1,1,0)
STUDY UID
"KRN",8994,3274,2,6,0)
SERIESUID^1^64^1^6
"KRN",8994,3274,2,6,1,0)
^8994.021^1^1^3100816^^
"KRN",8994,3274,2,6,1,1,0)
SERIES UID
"KRN",8994,3274,2,7,0)
SOPUID^1^64^1^7
"KRN",8994,3274,2,7,1,0)
^8994.021^1^1^3160504^^^^
"KRN",8994,3274,2,7,1,1,0)
SOP UID
"KRN",8994,3274,2,8,0)
DUPEFLAG^1^1^0^8
"KRN",8994,3274,2,8,1,0)
^^2^2^3160512^
"KRN",8994,3274,2,8,1,1,0)
Optional flag to determine if a new UID should be generated if a duplicate is detected.
"KRN",8994,3274,2,8,1,2,0)
If flag is set to "1" do not generate a new UID is a duplicate UID is detected.
"KRN",8994,3274,2,"B","ACNUMB",2)

"KRN",8994,3274,2,"B","DFN",1)

"KRN",8994,3274,2,"B","DUPEFLAG",8)

"KRN",8994,3274,2,"B","INSTR",4)

"KRN",8994,3274,2,"B","SERIESUID",6)

"KRN",8994,3274,2,"B","SITE",3)

"KRN",8994,3274,2,"B","SOPUID",7)

"KRN",8994,3274,2,"B","STUDYUID",5)

"KRN",8994,3274,2,"PARAMSEQ",1,1)

"KRN",8994,3274,2,"PARAMSEQ",2,2)

"KRN",8994,3274,2,"PARAMSEQ",3,3)

"KRN",8994,3274,2,"PARAMSEQ",4,4)

"KRN",8994,3274,2,"PARAMSEQ",5,5)

"KRN",8994,3274,2,"PARAMSEQ",6,6)

"KRN",8994,3274,2,"PARAMSEQ",7,7)

"KRN",8994,3274,2,"PARAMSEQ",8,8)

"KRN",8994,3274,3,0)
^8994.03^7^7^3160512^^^^
"KRN",8994,3274,3,1,0)
REPLACEMENT UID OR CODE
"KRN",8994,3274,3,2,0)
 0~DATA OK = Success (Series UID is not a duplicate).
"KRN",8994,3274,3,3,0)
 1~LogUIDToUse~"_UID
"KRN",8994,3274,3,4,0)
 3~Illegal UID Replacement~NEWUID
"KRN",8994,3274,3,5,0)
 1~NewUIDToUse~NEWUID
"KRN",8994,3274,3,6,0)
 2~RESEND
"KRN",8994,3274,3,7,0)
 -1 (Error Condition)
"KRN",8994,3276,-1)
0^7
"KRN",8994,3276,0)
MAGV STUDY UID CHECK^STUDY^MAGVUID^1^R^0^^^^^1
"KRN",8994,3276,1,0)
^8994.01^1^1^3160512^^^^
"KRN",8994,3276,1,1,0)
Performs check for duplicate Study UIDs
"KRN",8994,3276,2,0)
^8994.02A^6^6
"KRN",8994,3276,2,1,0)
DFN^1^10^1^1
"KRN",8994,3276,2,1,1,0)
^^1^1^3100816^
"KRN",8994,3276,2,1,1,1,0)
IEN of the patient's record in the NEW PERSON File (#200).
"KRN",8994,3276,2,2,0)
ACNUMB^1^20^1^2
"KRN",8994,3276,2,2,1,0)
^8994.021^6^6^3100816^^
"KRN",8994,3276,2,2,1,1,0)
ACCESSION NUMBER (LONG FORM)
"KRN",8994,3276,2,2,1,2,0)
 DATE-SITE LOCATION
"KRN",8994,3276,2,2,1,3,0)
 The date is in VA format, and the site location code is the site number.
"KRN",8994,3276,2,2,1,4,0)
 The two components are concatenated with a hyphen (-).
"KRN",8994,3276,2,2,1,5,0)
 This component comes from image's DICOM header by way of the
"KRN",8994,3276,2,2,1,6,0)
 Modality Worklist entry for the associated study.
"KRN",8994,3276,2,3,0)
SITE^1^5^1^3
"KRN",8994,3276,2,3,1,0)
^8994.021^1^1^3100816^^
"KRN",8994,3276,2,3,1,1,0)
SITE CODE (660)
"KRN",8994,3276,2,4,0)
INSTR^1^30^1^4
"KRN",8994,3276,2,4,1,0)
^8994.021^1^1^3100816^^
"KRN",8994,3276,2,4,1,1,0)
INSTRUMENT NAME
"KRN",8994,3276,2,5,0)
STUDYUID^1^64^1^5
"KRN",8994,3276,2,5,1,0)
^8994.021^1^1^3100816^^^^
"KRN",8994,3276,2,5,1,1,0)
STUDY UID
"KRN",8994,3276,2,6,0)
DUPEFLAG^1^1^0^6
"KRN",8994,3276,2,6,1,0)
^^1^1^3160512^
"KRN",8994,3276,2,6,1,1,0)
Optional parameter. This parameter is not supported yet.
"KRN",8994,3276,2,"B","ACNUMB",2)

"KRN",8994,3276,2,"B","DFN",1)

"KRN",8994,3276,2,"B","DUPEFLAG",6)

"KRN",8994,3276,2,"B","INSTR",4)

"KRN",8994,3276,2,"B","SITE",3)

"KRN",8994,3276,2,"B","STUDYUID",5)

"KRN",8994,3276,2,"PARAMSEQ",1,1)

"KRN",8994,3276,2,"PARAMSEQ",2,2)

"KRN",8994,3276,2,"PARAMSEQ",3,3)

"KRN",8994,3276,2,"PARAMSEQ",4,4)

"KRN",8994,3276,2,"PARAMSEQ",5,5)

"KRN",8994,3276,2,"PARAMSEQ",6,6)

"KRN",8994,3276,3,0)
^8994.03^6^6^3160512^^^^
"KRN",8994,3276,3,1,0)
REPLACEMENT UID OR CODE
"KRN",8994,3276,3,2,0)
 0~DATA OK = Success (Series UID is not a duplicate).
"KRN",8994,3276,3,3,0)
 1~LogUIDToUse~"_UID
"KRN",8994,3276,3,4,0)
 3~Illegal UID Replacement~NEWUID
"KRN",8994,3276,3,5,0)
 1~NewUIDToUse~NEWUID
"KRN",8994,3276,3,6,0)
 -1 (Error condition)
"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",454,-1)
1^1
"PKG",454,0)
IMAGING^MAG^Imaging-V1 to release 
"PKG",454,20,0)
^9.402P^^
"PKG",454,22,0)
^9.49I^1^1
"PKG",454,22,1,0)
3.0^3020319^3020517^126
"PKG",454,22,1,"PAH",1,0)
172^3170524^126
"PKG",454,22,1,"PAH",1,1,0)
^^10^10^3170524
"PKG",454,22,1,"PAH",1,1,1,0)
 
"PKG",454,22,1,"PAH",1,1,2,0)
VistA Imaging V3.0 - Patch 172 T3 - Reject duplicated UID
"PKG",454,22,1,"PAH",1,1,3,0)
 
"PKG",454,22,1,"PAH",1,1,4,0)
Routines:
"PKG",454,22,1,"PAH",1,1,5,0)
MAGIP172
"PKG",454,22,1,"PAH",1,1,6,0)
MAGVUID
"PKG",454,22,1,"PAH",1,1,7,0)
MAGVRD03
"PKG",454,22,1,"PAH",1,1,8,0)
 
"PKG",454,22,1,"PAH",1,1,9,0)
Please note that routine MAGIP172 is deleted after the KIDS build is 
"PKG",454,22,1,"PAH",1,1,10,0)
installed
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","MAGIP172")
0^2^B4110404
"RTN","MAGIP172",1,0)
MAGIP172 ;WOIFO/DAC - Install code for MAG*3.0*172 ; 04 May 2016 10:05 AM
"RTN","MAGIP172",2,0)
 ;;3.0;IMAGING;**172**;Mar 19, 2002;Build 33
"RTN","MAGIP172",3,0)
 ;; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MAGIP172",4,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGIP172",5,0)
 ;; | Property of the US Government.                                |
"RTN","MAGIP172",6,0)
 ;; | No permission to copy or redistribute this software is given. |
"RTN","MAGIP172",7,0)
 ;; | Use of unreleased versions of this software requires the user |
"RTN","MAGIP172",8,0)
 ;; | to execute a written test agreement with the VistA Imaging    |
"RTN","MAGIP172",9,0)
 ;; | Development Office of the Department of Veterans Affairs,     |
"RTN","MAGIP172",10,0)
 ;; | telephone (301) 734-0100.                                     |
"RTN","MAGIP172",11,0)
 ;; | The Food and Drug Administration classifies this software as  |
"RTN","MAGIP172",12,0)
 ;; | a medical device.  As such, it may not be changed in any way. |
"RTN","MAGIP172",13,0)
 ;; | Modifications to this software may result in an adulterated   |
"RTN","MAGIP172",14,0)
 ;; | medical device under 21CFR820, the use of which is considered |
"RTN","MAGIP172",15,0)
 ;; | to be a violation of US Federal Statutes.                     |
"RTN","MAGIP172",16,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGIP172",17,0)
 ;;
"RTN","MAGIP172",18,0)
 ; There are no environment checks here but the MAGIP172 has to be
"RTN","MAGIP172",19,0)
 ; referenced by the "Environment Check Routine" field of the KIDS
"RTN","MAGIP172",20,0)
 ; build so that entry points of the routine are available to the
"RTN","MAGIP172",21,0)
 ; KIDS during all installation phases.
"RTN","MAGIP172",22,0)
 Q
"RTN","MAGIP172",23,0)
 ;
"RTN","MAGIP172",24,0)
 ;+++++ INSTALLATION ERROR HANDLING
"RTN","MAGIP172",25,0)
ERROR ;
"RTN","MAGIP172",26,0)
 S:$D(XPDNM) XPDABORT=1
"RTN","MAGIP172",27,0)
 ;--- Display the messages and store them to the INSTALL file
"RTN","MAGIP172",28,0)
 D DUMP^MAGUERR1(),ABTMSG^MAGKIDS()
"RTN","MAGIP172",29,0)
 Q
"RTN","MAGIP172",30,0)
 ;
"RTN","MAGIP172",31,0)
 ;***** POST-INSTALL CODE
"RTN","MAGIP172",32,0)
POS ;
"RTN","MAGIP172",33,0)
 N CALLBACK
"RTN","MAGIP172",34,0)
 D CLEAR^MAGUERR(1)
"RTN","MAGIP172",35,0)
 ;
"RTN","MAGIP172",36,0)
 ;--- Send the notification e-mail
"RTN","MAGIP172",37,0)
 D BMES^XPDUTL("Post Install Mail Message: "_$$FMTE^XLFDT($$NOW^XLFDT))
"RTN","MAGIP172",38,0)
 D INS^MAGQBUT4(XPDNM,DUZ,$$NOW^XLFDT,XPDA)
"RTN","MAGIP172",39,0)
 Q
"RTN","MAGIP172",40,0)
 ;
"RTN","MAGIP172",41,0)
 ;***** PRE-INSTALL CODE
"RTN","MAGIP172",42,0)
PRE ;
"RTN","MAGIP172",43,0)
 Q
"RTN","MAGVRD03")
0^3^B19320380
"RTN","MAGVRD03",1,0)
MAGVRD03 ;WOIFO/DAC - Radiation Dosage - Attach Instance ; 23 May 2017 8:41 AM
"RTN","MAGVRD03",2,0)
 ;;3.0;IMAGING;**138,172**;Mar 19, 2002;Build 33
"RTN","MAGVRD03",3,0)
 ;; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MAGVRD03",4,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGVRD03",5,0)
 ;; | Property of the US Government.                                |
"RTN","MAGVRD03",6,0)
 ;; | No permission to copy or redistribute this software is given. |
"RTN","MAGVRD03",7,0)
 ;; | Use of unreleased versions of this software requires the user |
"RTN","MAGVRD03",8,0)
 ;; | to execute a written test agreement with the VistA Imaging    |
"RTN","MAGVRD03",9,0)
 ;; | Development Office of the Department of Veterans Affairs,     |
"RTN","MAGVRD03",10,0)
 ;; | telephone (301) 734-0100.                                     |
"RTN","MAGVRD03",11,0)
 ;; | The Food and Drug Administration classifies this software as  |
"RTN","MAGVRD03",12,0)
 ;; | a medical device.  As such, it may not be changed in any way. |
"RTN","MAGVRD03",13,0)
 ;; | Modifications to this software may result in an adulterated   |
"RTN","MAGVRD03",14,0)
 ;; | medical device under 21CFR820, the use of which is considered |
"RTN","MAGVRD03",15,0)
 ;; | to be a violation of US Federal Statutes.                     |
"RTN","MAGVRD03",16,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGVRD03",17,0)
 ;;
"RTN","MAGVRD03",18,0)
 Q
"RTN","MAGVRD03",19,0)
INPUTSEP() ; Name value separator for input data  ie. NAME`TESTPATIENT
"RTN","MAGVRD03",20,0)
 Q "`"
"RTN","MAGVRD03",21,0)
OUTSEP() ; Name value separator for output data ie. NAME|TESTPATIENT
"RTN","MAGVRD03",22,0)
 Q "|"
"RTN","MAGVRD03",23,0)
STATSEP() ; Status and Result separator ie. -3``No record IEN
"RTN","MAGVRD03",24,0)
 Q "`"
"RTN","MAGVRD03",25,0)
 ;
"RTN","MAGVRD03",26,0)
 ;***** Get irradiation dosage information
"RTN","MAGVRD03",27,0)
 ;
"RTN","MAGVRD03",28,0)
 ; RPC: MAGV GET IRRADIATION DOSE
"RTN","MAGVRD03",29,0)
 ;
"RTN","MAGVRD03",30,0)
 ; Input Variables:
"RTN","MAGVRD03",31,0)
 ;                 PATIENT   - Patient DFN
"RTN","MAGVRD03",32,0)
 ;                 PROC      - Accession Number
"RTN","MAGVRD03",33,0)
 ;                 PROCTYPE  - "CT" or "FLUORO" optional
"RTN","MAGVRD03",34,0)
 ; Output Variable:
"RTN","MAGVRD03",35,0)
 ;                 OUT       - Array of name value pairs separated by an input separator 
"RTN","MAGVRD03",36,0)
 ;
"RTN","MAGVRD03",37,0)
REFRESH(OUT,PATIENT,PROC,PROCTYPE) ; RPC [MAGV GET IRRADIATION DOSE]
"RTN","MAGVRD03",38,0)
 N OSEP,ISEP,SSEP,NAM,VAL,I,J,ATTNAMS,FILE,IIUIDIEN,DOSEIEN,PROCIEN,STUDIEN,SERIEN,TYPE
"RTN","MAGVRD03",39,0)
 S OSEP=$$OUTSEP,ISEP=$$INPUTSEP,SSEP=$$STATSEP
"RTN","MAGVRD03",40,0)
 ; Quit with error if any input variable not defined
"RTN","MAGVRD03",41,0)
 I $G(PATIENT)="" S OUT(1)="-10"_SSEP_"Patient not defined" Q
"RTN","MAGVRD03",42,0)
 I $G(PROC)="" S OUT(1)="-11"_SSEP_"Procedure not defined" Q
"RTN","MAGVRD03",43,0)
 ; Site Specific Accession Number look up
"RTN","MAGVRD03",44,0)
 S PROCXREF=$$SSAN(PROC)
"RTN","MAGVRD03",45,0)
 I PROCXREF="" S OUT(1)="-13"_SSEP_"Procedure not found" Q
"RTN","MAGVRD03",46,0)
 S I=2,IEN="",J=0
"RTN","MAGVRD03",47,0)
 S PROCIEN=$O(^MAGV(2005.61,"B",PROCXREF,""))
"RTN","MAGVRD03",48,0)
 S STUDIEN=""
"RTN","MAGVRD03",49,0)
 F  S STUDIEN=$O(^MAGV(2005.62,"C",PROCIEN,STUDIEN)) Q:STUDIEN=""  D
"RTN","MAGVRD03",50,0)
 . S SERIEN=""
"RTN","MAGVRD03",51,0)
 . F  S SERIEN=$O(^MAGV(2005.63,"C",STUDIEN,SERIEN)) Q:SERIEN=""  D
"RTN","MAGVRD03",52,0)
 . . F TYPE="CT","FLUORO" D
"RTN","MAGVRD03",53,0)
 . . . I TYPE="CT",$G(PROCTYPE)'="FLUORO" S FILE=2005.632
"RTN","MAGVRD03",54,0)
 . . . I TYPE="FLUORO",$G(PROCTYPE)'="CT" S FILE=2005.633
"RTN","MAGVRD03",55,0)
 . . . Q:$G(FILE)=""
"RTN","MAGVRD03",56,0)
 . . . S DOSEIEN=""
"RTN","MAGVRD03",57,0)
 . . . F  S DOSEIEN=$O(^MAGV(FILE,"C",SERIEN,DOSEIEN)) Q:DOSEIEN=""  D
"RTN","MAGVRD03",58,0)
 . . . . D REFRESH2(.OUT,.I,.J,TYPE,DOSEIEN,FILE)
"RTN","MAGVRD03",59,0)
 . . . . Q
"RTN","MAGVRD03",60,0)
 . . . S FILE=""
"RTN","MAGVRD03",61,0)
 . . . Q
"RTN","MAGVRD03",62,0)
 . . Q
"RTN","MAGVRD03",63,0)
 . Q
"RTN","MAGVRD03",64,0)
 S OUT(1)="0"_SSEP_SSEP_J ; Look up successful
"RTN","MAGVRD03",65,0)
 Q
"RTN","MAGVRD03",66,0)
 ;
"RTN","MAGVRD03",67,0)
 ; ***** Get irradiation dosage information for an irradiation instance
"RTN","MAGVRD03",68,0)
 ;  
"RTN","MAGVRD03",69,0)
 ; Input variables:
"RTN","MAGVRD03",70,0)
 ;                I       - Output array element number
"RTN","MAGVRD03",71,0)
 ;                J       - Number of records returned
"RTN","MAGVRD03",72,0)
 ;                DOSEIEN - IEN of dosage instance
"RTN","MAGVRD03",73,0)
 ;                FILE    - File number to extract dosage information from (2005.632 or 2005.633) 
"RTN","MAGVRD03",74,0)
 ; Output variable:
"RTN","MAGVRD03",75,0)
 ;                OUT       - Array of name value pairs separated by an input separator  
"RTN","MAGVRD03",76,0)
 ;                 
"RTN","MAGVRD03",77,0)
REFRESH2(OUT,I,J,TYPE,DOSEIEN,FILE) ; Retrieve data from dosage instance
"RTN","MAGVRD03",78,0)
 N FNUM,FORMAT,VALUE,TRANIEN,FIELD,IEN,DD
"RTN","MAGVRD03",79,0)
 S OSEP=$$OUTSEP,ISEP=$$INPUTSEP,SSEP=$$STATSEP
"RTN","MAGVRD03",80,0)
 S FNUM=.01,J=J+1
"RTN","MAGVRD03",81,0)
 S OUT(I)="TYPE"_OSEP_TYPE,I=I+1
"RTN","MAGVRD03",82,0)
 ; Get dosage instance data
"RTN","MAGVRD03",83,0)
 D GETS^DIQ(FILE,DOSEIEN_",","**","I","DD")
"RTN","MAGVRD03",84,0)
 F  D  Q:FNUM=""
"RTN","MAGVRD03",85,0)
 . S FNUM=$O(DD(FILE,DOSEIEN_",",FNUM)) Q:FNUM=""
"RTN","MAGVRD03",86,0)
 . S FIELD=$$GET1^DID(FILE,FNUM,,"LABEL")
"RTN","MAGVRD03",87,0)
 . Q:FIELD="SERIES INSTANCE"  ; Don't return Series Instance field
"RTN","MAGVRD03",88,0)
 . S FORMAT="E"
"RTN","MAGVRD03",89,0)
 . S VALUE=$$GET1^DIQ(FILE,DOSEIEN,FIELD,$G(FORMAT))
"RTN","MAGVRD03",90,0)
 . I FIELD="TARGET REGION",VALUE'="" D
"RTN","MAGVRD03",91,0)
 . . S IEN=$$GET1^DIQ(FILE,DOSEIEN,FIELD,"I")
"RTN","MAGVRD03",92,0)
 . . I '$D(^MAGV(2005.63611,"B",IEN)) Q
"RTN","MAGVRD03",93,0)
 . . S TRANIEN=$O(^MAGV(2005.63611,"B",IEN,""))
"RTN","MAGVRD03",94,0)
 . . I $G(TRANIEN)'="" S VALUE=$P($G(^MAGV(2005.63611,TRANIEN,0)),U,2)
"RTN","MAGVRD03",95,0)
 . . Q
"RTN","MAGVRD03",96,0)
 . I FIELD="PHANTOM TYPE",VALUE'="" D
"RTN","MAGVRD03",97,0)
 . . S IEN=$$GET1^DIQ(FILE,DOSEIEN,FIELD,"I")
"RTN","MAGVRD03",98,0)
 . . I '$D(^MAGV(2005.63621,"B",VALUE)) Q
"RTN","MAGVRD03",99,0)
 . . S TRANIEN=$O(^MAGV(2005.63621,"B",IEN,""))
"RTN","MAGVRD03",100,0)
 . . I $G(TRANIEN)'="" S VALUE=$P($G(^MAGV(2005.63621,TRANIEN,0)),U,2)
"RTN","MAGVRD03",101,0)
 . . Q
"RTN","MAGVRD03",102,0)
 . S OUT(I)=FIELD_OSEP_VALUE
"RTN","MAGVRD03",103,0)
 . S I=I+1
"RTN","MAGVRD03",104,0)
 . Q
"RTN","MAGVRD03",105,0)
 Q
"RTN","MAGVRD03",106,0)
 ;
"RTN","MAGVRD03",107,0)
 ; ***** Compare accession number for site specific and non-site specific accession numbers
"RTN","MAGVRD03",108,0)
 ; 
"RTN","MAGVRD03",109,0)
 ;  Input Variable: 
"RTN","MAGVRD03",110,0)
 ;                 PROC - Accession number in either site specific or non site specific form
"RTN","MAGVRD03",111,0)
 ;  
"RTN","MAGVRD03",112,0)
 ;  Output: 
"RTN","MAGVRD03",113,0)
 ;                 Returns accession number stored in PROCEDURE REFRENCE (#2005.61) file
"RTN","MAGVRD03",114,0)
 ; 
"RTN","MAGVRD03",115,0)
SSAN(PROC) ; Site specific accession number function
"RTN","MAGVRD03",116,0)
 N PROCXREF
"RTN","MAGVRD03",117,0)
 ; Scenario 1 - match
"RTN","MAGVRD03",118,0)
 S PROCXREF=""
"RTN","MAGVRD03",119,0)
 I $D(^MAGV(2005.61,"B",PROC)) Q PROC
"RTN","MAGVRD03",120,0)
 ; Scenario 2 - long (in) / short (DB x-ref)
"RTN","MAGVRD03",121,0)
 S PROCXREF=""
"RTN","MAGVRD03",122,0)
 I $L(PROC,"-")=3 S PROCXREF=$P(PROC,"-",2)_"-"_$P(PROC,"-",3) Q:$D(^MAGV(2005.61,"B",PROCXREF)) PROCXREF
"RTN","MAGVRD03",123,0)
 ; Scenario 3 - short (in) / long (DB x-ref)
"RTN","MAGVRD03",124,0)
 S PROCXREF=""
"RTN","MAGVRD03",125,0)
 I $L(PROC,"-")=2 D
"RTN","MAGVRD03",126,0)
 . ; P172 DAC - Fixed to remove incorrect partial matches
"RTN","MAGVRD03",127,0)
 . F  S PROCXREF=$O(^MAGV(2005.61,"B",PROCXREF)) D  Q:($P(PROCXREF,"-",2)_"-"_$P(PROCXREF,"-",3)=PROC)!(PROCXREF="")
"RTN","MAGVRD03",128,0)
 . Q
"RTN","MAGVRD03",129,0)
 Q PROCXREF
"RTN","MAGVUID")
0^1^B66333362
"RTN","MAGVUID",1,0)
MAGVUID ;WOIFO/RRB,NST,DAC - MAGV Duplicate UID Utilities and RPCs ; 24 Oct16 8:30 AM
"RTN","MAGVUID",2,0)
 ;;3.0;IMAGING;**118,138,172**;Mar 19, 2002;Build 33
"RTN","MAGVUID",3,0)
 ;; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MAGVUID",4,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGVUID",5,0)
 ;; | Property of the US Government.                                |
"RTN","MAGVUID",6,0)
 ;; | No permission to copy or redistribute this software is given. |
"RTN","MAGVUID",7,0)
 ;; | Use of unreleased versions of this software requires the user |
"RTN","MAGVUID",8,0)
 ;; | to execute a written test agreement with the VistA Imaging    |
"RTN","MAGVUID",9,0)
 ;; | Development Office of the Department of Veterans Affairs,     |
"RTN","MAGVUID",10,0)
 ;; | telephone (301) 734-0100.                                     |
"RTN","MAGVUID",11,0)
 ;; | The Food and Drug Administration classifies this software as  |
"RTN","MAGVUID",12,0)
 ;; | a medical device.  As such, it may not be changed in any way. |
"RTN","MAGVUID",13,0)
 ;; | Modifications to this software may result in an adulterated   |
"RTN","MAGVUID",14,0)
 ;; | medical device under 21CFR820, the use of which is considered |
"RTN","MAGVUID",15,0)
 ;; | to be a violation of US Federal Statutes.                     |
"RTN","MAGVUID",16,0)
 ;; +---------------------------------------------------------------+
"RTN","MAGVUID",17,0)
 ;;
"RTN","MAGVUID",18,0)
 Q
"RTN","MAGVUID",19,0)
 ; 
"RTN","MAGVUID",20,0)
 ;
"RTN","MAGVUID",21,0)
STUDY(RESULT,DFN,ACNUMB,SITE,INSTR,STUDYUID,DUPEFLAG)  ; RPC - MAGV STUDY UID CHECK - P172/DAC - Duplicate flag added
"RTN","MAGVUID",22,0)
 ;
"RTN","MAGVUID",23,0)
 N NEWUID,TYPE,UID
"RTN","MAGVUID",24,0)
 S TYPE="STUDY",DUPEFLAG=$G(DUPEFLAG)
"RTN","MAGVUID",25,0)
 ;
"RTN","MAGVUID",26,0)
 ; Check length of incoming UID and reject with fatal error message if >96 characters.
"RTN","MAGVUID",27,0)
 ; 
"RTN","MAGVUID",28,0)
 I $L(STUDYUID)>96 S RESULT="-1~Fatal UID > 96 Characters" Q
"RTN","MAGVUID",29,0)
 ;
"RTN","MAGVUID",30,0)
 ; Check IMAGING DUPLICATE UID LOG (#2005.66) to determine if the Study UID has been replaced.  
"RTN","MAGVUID",31,0)
 ; If it has return the replacement UID and quit.  Otherwise, continue with UID checking.
"RTN","MAGVUID",32,0)
 ;
"RTN","MAGVUID",33,0)
 S UID=$$UIDLOOK^MAGVRS61(STUDYUID,DFN,ACNUMB,TYPE,STUDYUID)
"RTN","MAGVUID",34,0)
 I UID'=0 S RESULT="1~LogUIDToUse~"_UID Q
"RTN","MAGVUID",35,0)
 ;
"RTN","MAGVUID",36,0)
 ;
"RTN","MAGVUID",37,0)
 ; Check and replace illegal Study UID
"RTN","MAGVUID",38,0)
 ; 
"RTN","MAGVUID",39,0)
 I $L(STUDYUID)>64 D  Q RESULT ; Replace UID having Illegal Length
"RTN","MAGVUID",40,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",41,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,STUDYUID,TYPE)
"RTN","MAGVUID",42,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",43,0)
 . Q
"RTN","MAGVUID",44,0)
 ;
"RTN","MAGVUID",45,0)
 S RESULT=$$UIDCHECK(STUDYUID,TYPE)  ; Check for illegal UID format and characters
"RTN","MAGVUID",46,0)
 ;
"RTN","MAGVUID",47,0)
 I RESULT=1 D  Q RESULT ; Replace UID having Illegal format or characters
"RTN","MAGVUID",48,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",49,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,STUDYUID,TYPE)
"RTN","MAGVUID",50,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",51,0)
 ;
"RTN","MAGVUID",52,0)
 I RESULT'=0 Q
"RTN","MAGVUID",53,0)
 ;
"RTN","MAGVUID",54,0)
 ; Proceed with checking Study UID
"RTN","MAGVUID",55,0)
 ;
"RTN","MAGVUID",56,0)
 S RESULT=$$STUDY^MAGVGUID(DFN,ACNUMB,STUDYUID)  ; Check Study UID in ^MAG(2005)
"RTN","MAGVUID",57,0)
 ;
"RTN","MAGVUID",58,0)
 I (RESULT=1) D  Q  ; FIX 10/21/206
"RTN","MAGVUID",59,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,STUDYUID,TYPE)
"RTN","MAGVUID",60,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",61,0)
 . Q
"RTN","MAGVUID",62,0)
 ;
"RTN","MAGVUID",63,0)
 S RESULT=$$DUPSTUD^MAGVRS61(DFN,ACNUMB,STUDYUID)  ; Check Study UID in ^MAGV(2005.62)
"RTN","MAGVUID",64,0)
 ;
"RTN","MAGVUID",65,0)
 I (RESULT=1) D  ; Create New Study UID if duplicate is found in #2005.62 - P172/DAC - If flag not set store duplicate
"RTN","MAGVUID",66,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,STUDYUID,TYPE)
"RTN","MAGVUID",67,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",68,0)
 . Q
"RTN","MAGVUID",69,0)
 ;
"RTN","MAGVUID",70,0)
 Q
"RTN","MAGVUID",71,0)
 ;
"RTN","MAGVUID",72,0)
SERIES(RESULT,DFN,ACNUMB,SITE,INSTR,STUDYUID,SERIESUID,DUPEFLAG)  ; RPC - MAGV SERIES UID CHECK
"RTN","MAGVUID",73,0)
 ;
"RTN","MAGVUID",74,0)
 N NEWUID,TYPE,UID
"RTN","MAGVUID",75,0)
 S TYPE="SERIES",DUPEFLAG=$G(DUPEFLAG)
"RTN","MAGVUID",76,0)
 ;
"RTN","MAGVUID",77,0)
 ; Check length of incoming UID and reject with fatal error message if >96 characters.
"RTN","MAGVUID",78,0)
 ; 
"RTN","MAGVUID",79,0)
 I $L(SERIESUID)>96 S RESULT="-1~Fatal UID > 96 Characters" Q
"RTN","MAGVUID",80,0)
 ;
"RTN","MAGVUID",81,0)
 ; Check IMAGING DUPLICATE UID LOG (#2005.66) to determine if the Series UID has been replaced.  
"RTN","MAGVUID",82,0)
 ; If it has return the replacement UID and quit.  Otherwise, continue with UID checking.
"RTN","MAGVUID",83,0)
 ;
"RTN","MAGVUID",84,0)
 S UID=$$UIDLOOK^MAGVRS61(SERIESUID,DFN,ACNUMB,TYPE,STUDYUID)
"RTN","MAGVUID",85,0)
 I UID'=0 S RESULT="1~LogUIDToUse~"_UID Q
"RTN","MAGVUID",86,0)
 ;
"RTN","MAGVUID",87,0)
 ; Check and replace illegal Series UID
"RTN","MAGVUID",88,0)
 ; 
"RTN","MAGVUID",89,0)
 I $L(SERIESUID)>64 D  Q RESULT ; Replace UID having Illegal Length
"RTN","MAGVUID",90,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",91,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SERIESUID,TYPE,STUDYUID)
"RTN","MAGVUID",92,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",93,0)
 . Q
"RTN","MAGVUID",94,0)
 ;
"RTN","MAGVUID",95,0)
 S RESULT=$$UIDCHECK(SERIESUID,TYPE)  ; Check for illegal UID format and characters
"RTN","MAGVUID",96,0)
 ;
"RTN","MAGVUID",97,0)
 I RESULT=1 D  Q RESULT ; Replace UID having Illegal format or characters
"RTN","MAGVUID",98,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",99,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SERIESUID,TYPE,STUDYUID)
"RTN","MAGVUID",100,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",101,0)
 ;
"RTN","MAGVUID",102,0)
 I RESULT'=0 Q
"RTN","MAGVUID",103,0)
 ;
"RTN","MAGVUID",104,0)
 ; Proceed with checking Series UID
"RTN","MAGVUID",105,0)
 ; 
"RTN","MAGVUID",106,0)
 S RESULT=$$SERIES^MAGVGUID(DFN,ACNUMB,STUDYUID,SERIESUID)  ; Check Series UID in ^MAG(2005) - P172/DAC - If flag not set store duplicate
"RTN","MAGVUID",107,0)
 ;
"RTN","MAGVUID",108,0)
 I (RESULT=1)&('DUPEFLAG) D  Q  ; Create New Series UID and Quit if duplicate is found in #2005
"RTN","MAGVUID",109,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SERIESUID,TYPE,STUDYUID)
"RTN","MAGVUID",110,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",111,0)
 . Q
"RTN","MAGVUID",112,0)
 ;
"RTN","MAGVUID",113,0)
 S RESULT=$$DUPSER^MAGVRS61(DFN,ACNUMB,STUDYUID,SERIESUID)  ; Check Series UID in ^MAGV(2005.63) - P172/DAC - If flag not set store duplicate
"RTN","MAGVUID",114,0)
 ;
"RTN","MAGVUID",115,0)
 I (RESULT=1)&('DUPEFLAG) D  ; Create New Series UID if duplicate is found in #2005.63
"RTN","MAGVUID",116,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SERIESUID,TYPE,STUDYUID)
"RTN","MAGVUID",117,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",118,0)
 . Q
"RTN","MAGVUID",119,0)
 ;
"RTN","MAGVUID",120,0)
 I (RESULT=1)&(DUPEFLAG) S RESULT=RESULT_"~NewUIDToUse~0" ; P172/DAC - If flag set do not store duplicate
"RTN","MAGVUID",121,0)
 ;
"RTN","MAGVUID",122,0)
 Q
"RTN","MAGVUID",123,0)
 ;
"RTN","MAGVUID",124,0)
SOP(RESULT,DFN,ACNUMB,SITE,INSTR,STUDYUID,SERIESUID,SOPUID,DUPEFLAG)  ; RPC - MAGV SOP UID CHECK
"RTN","MAGVUID",125,0)
 ;
"RTN","MAGVUID",126,0)
 N NEWUID,TYPE,UID
"RTN","MAGVUID",127,0)
 S TYPE="SOP",DUPEFLAG=$G(DUPEFLAG)
"RTN","MAGVUID",128,0)
 ;
"RTN","MAGVUID",129,0)
 ; Check length of incoming UID and reject with fatal error message if >96 characters.
"RTN","MAGVUID",130,0)
 ; 
"RTN","MAGVUID",131,0)
 I $L(SOPUID)>96 S RESULT="-1~Fatal UID > 96 Characters" Q
"RTN","MAGVUID",132,0)
 ;
"RTN","MAGVUID",133,0)
 ;
"RTN","MAGVUID",134,0)
 ; Check IMAGING DUPLICATE UID LOG (#2005.66) to determine if the Series UID has been replaced.  
"RTN","MAGVUID",135,0)
 ; If it has return the replacement UID and quit.  Otherwise, continue with UID checking.
"RTN","MAGVUID",136,0)
 ;
"RTN","MAGVUID",137,0)
 S UID=$$UIDLOOK^MAGVRS61(SOPUID,DFN,ACNUMB,TYPE,STUDYUID,SERIESUID)
"RTN","MAGVUID",138,0)
 I UID'=0 S RESULT="2~RERUNLog~" Q
"RTN","MAGVUID",139,0)
 ;
"RTN","MAGVUID",140,0)
 ; Check and replace illegal SOP UID
"RTN","MAGVUID",141,0)
 ; 
"RTN","MAGVUID",142,0)
 I $L(SOPUID)>64 D  Q RESULT ; Replace UID having Illegal Length
"RTN","MAGVUID",143,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",144,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SOPUID,TYPE,STUDYUID,SERIESUID)
"RTN","MAGVUID",145,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",146,0)
 . Q
"RTN","MAGVUID",147,0)
 ;
"RTN","MAGVUID",148,0)
 S RESULT=$$UIDCHECK(SOPUID,TYPE)  ; Check for illegal UID format and characters
"RTN","MAGVUID",149,0)
 ;
"RTN","MAGVUID",150,0)
 I RESULT=1 D  Q RESULT ; Replace UID having Illegal format or characters
"RTN","MAGVUID",151,0)
 . S RESULT="3~Illegal UID Replacement~"
"RTN","MAGVUID",152,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SOPUID,TYPE,STUDYUID,SERIESUID)
"RTN","MAGVUID",153,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_NEWUID)
"RTN","MAGVUID",154,0)
 ;
"RTN","MAGVUID",155,0)
 I RESULT'=0 Q
"RTN","MAGVUID",156,0)
 ;
"RTN","MAGVUID",157,0)
 ; Proceed with checking SOP UID
"RTN","MAGVUID",158,0)
 ; 
"RTN","MAGVUID",159,0)
 S RESULT=$$SOP^MAGVGUID(DFN,ACNUMB,STUDYUID,SERIESUID,SOPUID)  ; Check SOP UID in ^MAG(2005)
"RTN","MAGVUID",160,0)
 ;
"RTN","MAGVUID",161,0)
 I RESULT=1 D  Q  ; Create New SOP UID and Quit if duplicate is found in #2005
"RTN","MAGVUID",162,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SOPUID,TYPE,STUDYUID,SERIESUID)
"RTN","MAGVUID",163,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",164,0)
 . Q
"RTN","MAGVUID",165,0)
 ;
"RTN","MAGVUID",166,0)
 I RESULT=2 S RESULT=RESULT_"~RERUN" Q  ; Quit with RERUN message if on file and not duplicate UID
"RTN","MAGVUID",167,0)
 ;
"RTN","MAGVUID",168,0)
 S RESULT=$$DUPSOP^MAGVRS61(DFN,ACNUMB,STUDYUID,SERIESUID,SOPUID)  ; Check Series UID in ^MAGV(2005.64)
"RTN","MAGVUID",169,0)
 ;
"RTN","MAGVUID",170,0)
 I (RESULT=1)&('DUPEFLAG) D  ; Create New SOP UID if duplicate is found in #2005.64
"RTN","MAGVUID",171,0)
 . S NEWUID=$$NEWUID(DFN,ACNUMB,SITE,INSTR,SOPUID,TYPE,STUDYUID,SERIESUID)
"RTN","MAGVUID",172,0)
 . S RESULT=$S(+NEWUID=-1:NEWUID,1:RESULT_"~NewUIDToUse~"_NEWUID)
"RTN","MAGVUID",173,0)
 . Q
"RTN","MAGVUID",174,0)
 ;
"RTN","MAGVUID",175,0)
 I (RESULT=1)&(DUPEFLAG) S RESULT=RESULT_"~NewUIDToUse~0" ; P172/DAC - If flag set do not store duplicate
"RTN","MAGVUID",176,0)
 I RESULT=2 S RESULT=RESULT_"~RERUN"  ; Return RERUN message if on file and not duplicate UId
"RTN","MAGVUID",177,0)
 ;
"RTN","MAGVUID",178,0)
 Q
"RTN","MAGVUID",179,0)
 ;
"RTN","MAGVUID",180,0)
UIDCHECK(UIDCHK,TYPE)  ; Check UID for invalid UIDs
"RTN","MAGVUID",181,0)
 ;
"RTN","MAGVUID",182,0)
 N I,X
"RTN","MAGVUID",183,0)
 S RESULT=0
"RTN","MAGVUID",184,0)
 ;
"RTN","MAGVUID",185,0)
 ; Check for Illegal Characters
"RTN","MAGVUID",186,0)
 ; 
"RTN","MAGVUID",187,0)
 F I=1:1:$L(UIDCHK,".") S X=$P(UIDCHK,".",I) D  I RESULT'=0 Q 
"RTN","MAGVUID",188,0)
 . I $L(X)>1,$E(X,1)=0 S RESULT=1 Q
"RTN","MAGVUID",189,0)
 . I X'?1.N S RESULT=1 Q
"RTN","MAGVUID",190,0)
 . Q
"RTN","MAGVUID",191,0)
 ;
"RTN","MAGVUID",192,0)
 Q RESULT
"RTN","MAGVUID",193,0)
 ;
"RTN","MAGVUID",194,0)
NEWUID(DFN,ACNUMB,SITE,INSTR,OUID,TYPE,STUDYUID,SERIESUID)  ; Utility to Generate new UID for TYPE
"RTN","MAGVUID",195,0)
 ;
"RTN","MAGVUID",196,0)
 Q:SITE="" "-1~Invalid Site Number"
"RTN","MAGVUID",197,0)
 ;
"RTN","MAGVUID",198,0)
 N UID
"RTN","MAGVUID",199,0)
 ;
"RTN","MAGVUID",200,0)
 S STUDYUID=$G(STUDYUID),SERIESUID=$G(SERIESUID)
"RTN","MAGVUID",201,0)
 ;
"RTN","MAGVUID",202,0)
 S UID=$$GENUID^MAGVUID2(ACNUMB,SITE,INSTR,TYPE)  ; Generate a new UID
"RTN","MAGVUID",203,0)
 ;
"RTN","MAGVUID",204,0)
 ; Log duplicate UID error
"RTN","MAGVUID",205,0)
 ; 
"RTN","MAGVUID",206,0)
 ;
"RTN","MAGVUID",207,0)
 D LOGDUP^MAGVRS61(OUID,.UID,ACNUMB,DFN,TYPE,STUDYUID,SERIESUID)  ; Log duplicate UID and adjust new UID to be unique if already logged
"RTN","MAGVUID",208,0)
 ;
"RTN","MAGVUID",209,0)
 Q UID  ; Return new UID to use
"RTN","MAGVUID",210,0)
 ;
"VER")
8.0^22.2
**END**
**END**
